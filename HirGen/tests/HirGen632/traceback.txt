==========mod==========
#[version = "0.0.5"]
def @func_9169(%var_9162: Tensor[(520), int32], %var_9164: Tensor[(3584), float32], %var_9166: Tensor[(3840), float32]) -> (Tensor[(3, 15, 14), float32], Tensor[(1, 10, 15), float32], Tensor[(520), int32], Tensor[(2100), float32], Tensor[(3584), float32], Tensor[(2080), float32], Tensor[(3840), float32]) {
  %0 = @func_8323() /* ty=Tensor[(3, 15, 14), float32] */;
  %1 = cast(%0, dtype="float32") /* ty=Tensor[(3, 15, 14), float32] */;
  %2 = cast(%var_9162, dtype="int32") /* ty=Tensor[(520), int32] */;
  %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(2100), float32] */, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %4 = cast(%var_9164, dtype="float32") /* ty=Tensor[(3584), float32] */;
  %5 = cast(meta[relay.Constant][1] /* ty=Tensor[(2080), float32] */, dtype="float32") /* ty=Tensor[(2080), float32] */;
  %6 = cast(%var_9166, dtype="float32") /* ty=Tensor[(3840), float32] */;
  %7 = reshape(%2, newshape=[520]) /* ty=Tensor[(520), int32] */;
  %8 = reshape(%3, newshape=[2100]) /* ty=Tensor[(2100), float32] */;
  %9 = reshape(%4, newshape=[3584]) /* ty=Tensor[(3584), float32] */;
  %10 = reshape(%5, newshape=[2080]) /* ty=Tensor[(2080), float32] */;
  %11 = reshape(%6, newshape=[48, 80]) /* ty=Tensor[(48, 80), float32] */;
  %12 = @func_4624(%7, %8, %9, %10, %11) /* ty=(Tensor[(1, 10, 15), float32], Tensor[(3584), float32], Tensor[(520), int32], Tensor[(224), float32], Tensor[(3584), float32], Tensor[(15, 9, 6), uint16], Tensor[(810), uint16], Tensor[(2080), float32], Tensor[(540), float64], Tensor[(48, 80), float32], Tensor[(2100), float32]) */;
  %13 = asinh(%1) /* ty=Tensor[(3, 15, 14), float32] */;
  %14 = %12.0;
  (%13, %14, %var_9162, meta[relay.Constant][0] /* ty=Tensor[(2100), float32] */, %var_9164, meta[relay.Constant][1] /* ty=Tensor[(2080), float32] */, %var_9166)
}

def @func_2229(%var_2221: Tensor[(15, 8, 13), float64]) -> Tensor[(15, 8, 13), float32] {
  %15 = cast(%var_2221, dtype="float64") /* ty=Tensor[(15, 8, 13), float64] */;
  %16 = rsqrt(%15) /* ty=Tensor[(15, 8, 13), float64] */;
  %17 = cast(%16, dtype="float32") /* ty=Tensor[(15, 8, 13), float32] */;
  sinh(%17) /* ty=Tensor[(15, 8, 13), float32] */
}

def @func_9412() -> Tensor[(3, 15, 14), float32] {
  %18 = @func_9320() /* ty=(Tensor[(3, 15, 14), float32],) */;
  %18.0
}

def @func_9573() -> (Tensor[(3, 15, 14), float32], Tensor[(1, 10, 15), float64]) {
  %19 = @func_9320() /* ty=(Tensor[(3, 15, 14), float32],) */;
  %20 = %19.0;
  %21 = @func_7921() /* ty=Tensor[(1, 10, 15), float64] */;
  (%20, %21)
}

def @func_5118() -> (Tensor[(1, 10, 15), float64], Tensor[(540), float64], Tensor[(3584), float32]) {
  %22 = @func_4530() /* ty=(Tensor[(1, 10, 15), float32], Tensor[(1, 10, 15), float64]) */;
  %23 = cast(meta[relay.Constant][2] /* ty=Tensor[(3584), float32] */, dtype="float32") /* ty=Tensor[(3584), float32] */;
  %24 = reshape(%23, newshape=[3584]) /* ty=Tensor[(3584), float32] */;
  %25 = @func_4881(%24) /* ty=(Tensor[(15, 9, 6), uint16], Tensor[(810), uint16], Tensor[(1, 10, 15), float32], Tensor[(1, 2100), float32], Tensor[(16, 14), float32], Tensor[(3584), float32], Tensor[(540), float64]) */;
  %26 = cast(meta[relay.Constant][2] /* ty=Tensor[(3584), float32] */, dtype="float32") /* ty=Tensor[(3584), float32] */;
  %27 = %22.1;
  %28 = %25.6;
  %29 = log2(%26) /* ty=Tensor[(3584), float32] */;
  (%27, %28, %29)
}

def @func_306(%var_290: Tensor[(9, 12, 5), float64], %var_301: Tensor[(1, 2100), float32]) -> (Tensor[(9, 12, 5), float64], Tensor[(15, 10, 14), bool], Tensor[(1, 2100), float32]) {
  %30 = cast(1.43898f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %31 = cast(%var_290, dtype="float64") /* ty=Tensor[(9, 12, 5), float64] */;
  %32 = cast(%var_301, dtype="float32") /* ty=Tensor[(1, 2100), float32] */;
  %33 = cast(%var_301, dtype="int64") /* ty=Tensor[(1, 2100), int64] */;
  %34 = cast(%var_301, dtype="float32") /* ty=Tensor[(1, 2100), float32] */;
  %35 = reshape(%32, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), float32] */;
  %36 = reshape(%33, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), int64] */;
  %37 = reshape(%34, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), float32] */;
  %38 = @func_140(%35, %36, %37) /* ty=(Tensor[(15, 10, 14), bool], Tensor[(15, 10, 14), float64], Tensor[(15, 10, 14), float64], Tensor[(15, 10, 14), float32]) */;
  %39 = floor_mod(%30, %31) /* ty=Tensor[(9, 12, 5), float64] */;
  %40 = %38.0;
  (%39, %40, %var_301)
}

def @func_9369() -> (Tensor[(3, 15, 14), float32], Tensor[(1, 10, 15), float64], Tensor[(14700), uint32], Tensor[(1, 10, 15), float64], Tensor[(?, 10, 15), int8]) {
  %41 = cast(meta[relay.Constant][3] /* ty=Tensor[(14700), uint32] */, dtype="uint32") /* ty=Tensor[(14700), uint32] */;
  %42 = reshape(%41, newshape=[2100, 7]) /* ty=Tensor[(2100, 7), uint32] */;
  %43 = @func_6608(%42) /* ty=(Tensor[(1, 10, 15), float64], Tensor[(2100, 7), bool]) */;
  %44 = @func_5372() /* ty=(Tensor[(?, 10, 15), int8],) */;
  %45 = @func_9076() /* ty=Tensor[(3, 15, 14), float32] */;
  %46 = %43.0;
  %47 = @func_7264() /* ty=Tensor[(1, 10, 15), float64] */;
  %48 = %44.0;
  (%45, %46, meta[relay.Constant][3] /* ty=Tensor[(14700), uint32] */, %47, %48)
}

def @func_6136(%var_6117: Tensor[(6, 2, 9), float64], %var_6133: Tensor[(135), float32]) -> (Tensor[(6, 2, 9), float64], Tensor[(3, 15, 3), float32], Tensor[(135), float32]) {
  %49 = cast(%var_6117, dtype="float64") /* ty=Tensor[(6, 2, 9), float64] */;
  %50 = cast(%var_6133, dtype="float32") /* ty=Tensor[(135), float32] */;
  %51 = reshape(%50, newshape=[3, 15, 3]) /* ty=Tensor[(3, 15, 3), float32] */;
  %52 = asinh(%49) /* ty=Tensor[(6, 2, 9), float64] */;
  %53 = @func_5835(%51) /* ty=Tensor[(3, 15, 3), float32] */;
  (%52, %53, %var_6133)
}

def @func_8584(%var_8556: Tensor[(3584), float32], %var_8572: Tensor[(224), float32], %var_8573: Tensor[(540), float64]) -> (Tensor[(?, 10, 15), int8], Tensor[(2100, 16), bool], Tensor[(3584), int32], Tensor[(14, 16, 16), float64], Tensor[(224), float32], Tensor[(540), float64]) {
  %54 = @func_5257() /* ty=(Tensor[(?, 10, 15), int8],) */;
  %55 = cast(meta[relay.Constant][4] /* ty=Tensor[(33600), uint32] */, dtype="uint32") /* ty=Tensor[(33600), uint32] */;
  %56 = reshape(%55, newshape=[2100, 16]) /* ty=Tensor[(2100, 16), uint32] */;
  %57 = @func_6962(%56) /* ty=Tensor[(2100, 16), float32] */;
  %58 = cast(meta[relay.Constant][4] /* ty=Tensor[(33600), uint32] */, dtype="bool") /* ty=Tensor[(33600), bool] */;
  %59 = shape_of(%57, dtype="int32") /* ty=Tensor[(2), int32] */;
  %60 = cast(%57, dtype="bool") /* ty=Tensor[(2100, 16), bool] */;
  %61 = dyn.reshape(%58, %59, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %62 = @func_5118() /* ty=(Tensor[(1, 10, 15), float64], Tensor[(540), float64], Tensor[(3584), float32]) */;
  %63 = %62.2;
  %64 = cast(%var_8556, dtype="int32") /* ty=Tensor[(3584), int32] */;
  %65 = shape_of(%63, dtype="int32") /* ty=Tensor[(1), int32] */;
  %66 = cast(%63, dtype="int32") /* ty=Tensor[(3584), int32] */;
  %67 = dyn.reshape(%64, %65, newshape=[]) /* ty=Tensor[(?), int32] */;
  %68 = cast(%var_8572, dtype="float32") /* ty=Tensor[(224), float32] */;
  %69 = bitwise_or(%66, %67) /* ty=Tensor[(3584), int32] */;
  %70 = cast(%69, dtype="float32") /* ty=Tensor[(3584), float32] */;
  %71 = cast(%var_8573, dtype="float64") /* ty=Tensor[(540), float64] */;
  %72 = reshape(%68, newshape=[14, 1, 16]) /* ty=Tensor[(14, 1, 16), float32] */;
  %73 = reshape(%70, newshape=[14, 16, 16]) /* ty=Tensor[(14, 16, 16), float32] */;
  %74 = reshape(%71, newshape=[540]) /* ty=Tensor[(540), float64] */;
  %75 = @func_1824(%72, %73, %74) /* ty=(Tensor[(14, 16, 16), float64], Tensor[(1, 2100), float32], Tensor[(540), float64], Tensor[(2100), float32]) */;
  %76 = %54.0;
  %77 = logical_and(%60, %61) /* ty=Tensor[(2100, 16), bool] */;
  %78 = %75.0;
  (%76, %77, %69, %78, %var_8572, %var_8573)
}

def @func_6372(%var_6370: Tensor[(810), uint16]) -> (Tensor[(2100, ?), uint32], Tensor[(15, 9, 6), uint16], Tensor[(810), uint16]) {
  %79 = @func_6264() /* ty=(Tensor[(2100, ?), uint32],) */;
  %80 = cast(%var_6370, dtype="uint16") /* ty=Tensor[(810), uint16] */;
  %81 = reshape(%80, newshape=[15, 9, 6]) /* ty=Tensor[(15, 9, 6), uint16] */;
  %82 = %79.0;
  %83 = @func_3607(%81) /* ty=Tensor[(15, 9, 6), uint16] */;
  (%82, %83, %var_6370)
}

def @func_8276() -> (Tensor[(3, 15, 14), float32],) {
  %84 = @func_5361() /* ty=Tensor[(3, 15, 14), float32] */;
  %85 = cast(%84, dtype="float32") /* ty=Tensor[(3, 15, 14), float32] */;
  %86 = log10(%85) /* ty=Tensor[(3, 15, 14), float32] */;
  (%86,)
}

def @func_8081(%var_8079: Tensor[(3, 700), float32]) -> (Tensor[(1, 1560), float32], Tensor[(9, 12, 5), float64], Tensor[(540), float64], Tensor[(3, 700), float32]) {
  %87 = @func_7707() /* ty=(Tensor[(3, 15, 14), float32], Tensor[(15, 8, 13), float32], Tensor[(1, 1560), float64]) */;
  %88 = %87.2;
  %89 = cast(%88, dtype="float32") /* ty=Tensor[(1, 1560), float32] */;
  %90 = cast(meta[relay.Constant][5] /* ty=Tensor[(540), float64] */, dtype="float64") /* ty=Tensor[(540), float64] */;
  %91 = cast(%var_8079, dtype="float32") /* ty=Tensor[(3, 700), float32] */;
  %92 = reshape(%90, newshape=[9, 12, 5]) /* ty=Tensor[(9, 12, 5), float64] */;
  %93 = reshape(%91, newshape=[1, 2100]) /* ty=Tensor[(1, 2100), float32] */;
  %94 = @func_306(%92, %93) /* ty=(Tensor[(9, 12, 5), float64], Tensor[(15, 10, 14), bool], Tensor[(1, 2100), float32]) */;
  %95 = erf(%89) /* ty=Tensor[(1, 1560), float32] */;
  %96 = %94.0;
  (%95, %96, meta[relay.Constant][5] /* ty=Tensor[(540), float64] */, %var_8079)
}

def @func_7264() -> Tensor[(1, 10, 15), float64] {
  %97 = @func_5319() /* ty=(Tensor[(1, 10, 15), float64],) */;
  %97.0
}

def @func_8786(%var_8767: Tensor[(936), uint32]) -> (Tensor[(?, 10, 15), int8], Tensor[(13, 8, 9), float64], Tensor[(936), uint32], Tensor[(1, 10, 15), float64]) {
  %98 = cast(%var_8767, dtype="uint32") /* ty=Tensor[(936), uint32] */;
  %99 = cast(%var_8767, dtype="uint32") /* ty=Tensor[(936), uint32] */;
  %100 = reshape(%98, newshape=[13, 8, 9]) /* ty=Tensor[(13, 8, 9), uint32] */;
  %101 = reshape(%99, newshape=[13, 8, 9]) /* ty=Tensor[(13, 8, 9), uint32] */;
  %102 = @func_4713(%100, %101) /* ty=(Tensor[(13, 8, 9), float64],) */;
  %103 = @func_5016() /* ty=Tensor[(?, 10, 15), int8] */;
  %104 = %102.0;
  %105 = @func_4854() /* ty=Tensor[(1, 10, 15), float64] */;
  (%103, %104, %var_8767, %105)
}

def @func_7148() -> Tensor[(3584), float32] {
  %106 = @func_5118() /* ty=(Tensor[(1, 10, 15), float64], Tensor[(540), float64], Tensor[(3584), float32]) */;
  %106.2
}

def @func_9064(%var_9024: Tensor[(4, 8, 12), uint64]) -> (Tensor[(4, 8, 12), uint16], Tensor[(4, 8, 12), float64]) {
  %107 = cast(%var_9024, dtype="uint64") /* ty=Tensor[(4, 8, 12), uint64] */;
  %108 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(4, 8, 12), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %109 = cast(meta[relay.Constant][6] /* ty=Tensor[(4, 8, 12), uint64] */, dtype="uint64") /* ty=Tensor[(4, 8, 12), uint64] */;
  %110 = dyn.reshape(%107, %108, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %111 = left_shift(%109, %110) /* ty=Tensor[(4, 8, 12), uint64] */;
  %112 = cast(%111, dtype="uint16") /* ty=Tensor[(4, 8, 12), uint16] */;
  %113 = shape_of(%var_9024, dtype="int32") /* ty=Tensor[(3), int32] */;
  %114 = cast(%var_9024, dtype="uint16") /* ty=Tensor[(4, 8, 12), uint16] */;
  %115 = dyn.reshape(%112, %113, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %116 = cast(meta[relay.Constant][6] /* ty=Tensor[(4, 8, 12), uint64] */, dtype="float64") /* ty=Tensor[(4, 8, 12), float64] */;
  %117 = bitwise_and(%114, %115) /* ty=Tensor[(4, 8, 12), uint16] */;
  %118 = log2(%116) /* ty=Tensor[(4, 8, 12), float64] */;
  (%117, %118)
}

def @func_5553(%var_5532: Tensor[(546), float64], %var_5541: Tensor[(16, 10, 15), float64]) -> (Tensor[(1, 10, 15), float64], Tensor[(?, 10, 15), float64], Tensor[(1, 2100), float32], Tensor[(3584), float32], Tensor[(13, 3, 14), float64], Tensor[(546), float64], Tensor[(16, 10, 15), float64]) {
  %119 = @func_4530() /* ty=(Tensor[(1, 10, 15), float32], Tensor[(1, 10, 15), float64]) */;
  %120 = @func_5016() /* ty=Tensor[(?, 10, 15), int8] */;
  %121 = cast(%120, dtype="float64") /* ty=Tensor[(?, 10, 15), float64] */;
  %122 = log10(%121) /* ty=Tensor[(?, 10, 15), float64] */;
  %123 = cast(%122, dtype="float64") /* ty=Tensor[(?, 10, 15), float64] */;
  %124 = cast(meta[relay.Constant][7] /* ty=Tensor[(3584), float32] */, dtype="float32") /* ty=Tensor[(3584), float32] */;
  %125 = reshape(%124, newshape=[3584]) /* ty=Tensor[(3584), float32] */;
  %126 = @func_4881(%125) /* ty=(Tensor[(15, 9, 6), uint16], Tensor[(810), uint16], Tensor[(1, 10, 15), float32], Tensor[(1, 2100), float32], Tensor[(16, 14), float32], Tensor[(3584), float32], Tensor[(540), float64]) */;
  %127 = cast(%var_5532, dtype="float64") /* ty=Tensor[(546), float64] */;
  %128 = cast(%var_5532, dtype="float64") /* ty=Tensor[(546), float64] */;
  %129 = reshape(%127, newshape=[13, 3, 14]) /* ty=Tensor[(13, 3, 14), float64] */;
  %130 = reshape(%128, newshape=[13, 3, 14]) /* ty=Tensor[(13, 3, 14), float64] */;
  %131 = @func_3758(%129, %130) /* ty=(Tensor[(13, 3, 14), float64],) */;
  %132 = cast(%122, dtype="float64") /* ty=Tensor[(?, 10, 15), float64] */;
  %133 = cast(%var_5541, dtype="float64") /* ty=Tensor[(16, 10, 15), float64] */;
  %134 = %119.1;
  %135 = acosh(%123) /* ty=Tensor[(?, 10, 15), float64] */;
  %136 = %126.3;
  %137 = %131.0;
  %138 = subtract(%132, %133) /* ty=Tensor[(16, 10, 15), float64] */;
  (%134, %135, %136, meta[relay.Constant][7] /* ty=Tensor[(3584), float32] */, %137, %var_5532, %138)
}

def @func_2794(%var_2746: Tensor[(13, 4, 10), int32], %var_2747: Tensor[(13, 4, 10), int32], %var_2762: Tensor[(2100), float32], %var_2765: Tensor[(224), float32], %var_2766: Tensor[(3584), float32]) -> (Tensor[(13, 4, 10), int32], Tensor[(15, 10, 14), float64], Tensor[(2100), float32], Tensor[(540), float64], Tensor[(224), float32], Tensor[(3584), float32], Tensor[(540), float64], Tensor[(15, 10, 14), bool]) {
  %139 = cast(%var_2747, dtype="int32") /* ty=Tensor[(13, 4, 10), int32] */;
  %140 = shape_of(%var_2746, dtype="int32") /* ty=Tensor[(3), int32] */;
  %141 = cast(%var_2746, dtype="int32") /* ty=Tensor[(13, 4, 10), int32] */;
  %142 = dyn.reshape(%139, %140, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %143 = cast(%var_2762, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %144 = cast(%var_2762, dtype="int64") /* ty=Tensor[(2100), int64] */;
  %145 = cast(%var_2762, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %146 = reshape(%143, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), float32] */;
  %147 = reshape(%144, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), int64] */;
  %148 = reshape(%145, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), float32] */;
  %149 = @func_140(%146, %147, %148) /* ty=(Tensor[(15, 10, 14), bool], Tensor[(15, 10, 14), float64], Tensor[(15, 10, 14), float64], Tensor[(15, 10, 14), float32]) */;
  %150 = cast(%var_2765, dtype="float32") /* ty=Tensor[(224), float32] */;
  %151 = cast(%var_2766, dtype="float32") /* ty=Tensor[(3584), float32] */;
  %152 = cast(meta[relay.Constant][8] /* ty=Tensor[(540), float64] */, dtype="float64") /* ty=Tensor[(540), float64] */;
  %153 = reshape(%150, newshape=[14, 1, 16]) /* ty=Tensor[(14, 1, 16), float32] */;
  %154 = reshape(%151, newshape=[14, 16, 16]) /* ty=Tensor[(14, 16, 16), float32] */;
  %155 = reshape(%152, newshape=[540]) /* ty=Tensor[(540), float64] */;
  %156 = @func_1824(%153, %154, %155) /* ty=(Tensor[(14, 16, 16), float64], Tensor[(1, 2100), float32], Tensor[(540), float64], Tensor[(2100), float32]) */;
  %157 = cast(meta[relay.Constant][8] /* ty=Tensor[(540), float64] */, dtype="float64") /* ty=Tensor[(540), float64] */;
  %158 = cast(%var_2762, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %159 = reshape(%157, newshape=[9, 12, 5]) /* ty=Tensor[(9, 12, 5), float64] */;
  %160 = reshape(%158, newshape=[1, 2100]) /* ty=Tensor[(1, 2100), float32] */;
  %161 = @func_306(%159, %160) /* ty=(Tensor[(9, 12, 5), float64], Tensor[(15, 10, 14), bool], Tensor[(1, 2100), float32]) */;
  %162 = multiply(%141, %142) /* ty=Tensor[(13, 4, 10), int32] */;
  %163 = %149.2;
  %164 = %156.2;
  %165 = %161.1;
  (%162, %163, %var_2762, %164, %var_2765, %var_2766, meta[relay.Constant][8] /* ty=Tensor[(540), float64] */, %165)
}

def @func_5080(%var_5074: Tensor[(520, 1), int32], %var_5075: Tensor[(2100), float32], %var_5077: Tensor[(3584), float32]) -> (Tensor[(1, 10, 15), float32], Tensor[(13, 4, 10), int32], Tensor[(520, 1), int32], Tensor[(2100), float32], Tensor[(224), float32], Tensor[(3584), float32]) {
  %166 = cast(%var_5074, dtype="int32") /* ty=Tensor[(520, 1), int32] */;
  %167 = cast(%var_5074, dtype="int32") /* ty=Tensor[(520, 1), int32] */;
  %168 = cast(%var_5075, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %169 = cast(meta[relay.Constant][9] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
  %170 = cast(%var_5077, dtype="float32") /* ty=Tensor[(3584), float32] */;
  %171 = reshape(%166, newshape=[13, 4, 10]) /* ty=Tensor[(13, 4, 10), int32] */;
  %172 = reshape(%167, newshape=[13, 4, 10]) /* ty=Tensor[(13, 4, 10), int32] */;
  %173 = reshape(%168, newshape=[2100]) /* ty=Tensor[(2100), float32] */;
  %174 = reshape(%169, newshape=[224]) /* ty=Tensor[(224), float32] */;
  %175 = reshape(%170, newshape=[3584]) /* ty=Tensor[(3584), float32] */;
  %176 = @func_2794(%171, %172, %173, %174, %175) /* ty=(Tensor[(13, 4, 10), int32], Tensor[(15, 10, 14), float64], Tensor[(2100), float32], Tensor[(540), float64], Tensor[(224), float32], Tensor[(3584), float32], Tensor[(540), float64], Tensor[(15, 10, 14), bool]) */;
  %177 = @func_4835() /* ty=Tensor[(1, 10, 15), float32] */;
  %178 = %176.0;
  (%177, %178, %var_5074, %var_5075, meta[relay.Constant][9] /* ty=Tensor[(224), float32] */, %var_5077)
}

def @func_6199(%var_6186: Tensor[(10, 3), float32]) -> (Tensor[(?, 10, 15), int8], Tensor[(5, 6), float32], Tensor[(10, 3), float32]) {
  %179 = @func_5962() /* ty=(Tensor[(?, 10, 15), int8],) */;
  %180 = cast(%var_6186, dtype="float32") /* ty=Tensor[(10, 3), float32] */;
  %181 = reshape(%180, newshape=[5, 6]) /* ty=Tensor[(5, 6), float32] */;
  %182 = @func_3239(%181) /* ty=(Tensor[(5, 6), float32], Tensor[(9, 11, 9), uint64], Tensor[(99, 9), uint64]) */;
  %183 = %179.0;
  %184 = %182.0;
  (%183, %184, %var_6186)
}

def @func_7650() -> Tensor[(11, 16, 2), float32] {
  %185 = cast(meta[relay.Constant][10] /* ty=Tensor[(11, 16, 2), float32] */, dtype="float32") /* ty=Tensor[(11, 16, 2), float32] */;
  exp(%185) /* ty=Tensor[(11, 16, 2), float32] */
}

def @func_8323() -> Tensor[(3, 15, 14), float32] {
  @func_7860() /* ty=Tensor[(3, 15, 14), float32] */
}

def @func_4835() -> Tensor[(1, 10, 15), float32] {
  %186 = @func_4530() /* ty=(Tensor[(1, 10, 15), float32], Tensor[(1, 10, 15), float64]) */;
  %186.0
}

def @func_4854() -> Tensor[(1, 10, 15), float64] {
  %187 = @func_4530() /* ty=(Tensor[(1, 10, 15), float32], Tensor[(1, 10, 15), float64]) */;
  %187.1
}

def @func_1776(%var_1735: Tensor[(16, 15, 16), float32], %var_1736: Tensor[(16, 15, 16), float32], %var_1742: Tensor[(2100), float32]) -> (Tensor[(16, 15, 16), bool], Tensor[(1, 2100), float32], Tensor[(2100), float32], Tensor[(54, 10), float32]) {
  %188 = cast(%var_1736, dtype="bool") /* ty=Tensor[(16, 15, 16), bool] */;
  %189 = shape_of(%var_1735, dtype="int32") /* ty=Tensor[(3), int32] */;
  %190 = cast(%var_1735, dtype="bool") /* ty=Tensor[(16, 15, 16), bool] */;
  %191 = dyn.reshape(%188, %189, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %192 = cast(meta[relay.Constant][11] /* ty=Tensor[(54, 10), float64] */, dtype="float64") /* ty=Tensor[(54, 10), float64] */;
  %193 = cast(%var_1742, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %194 = reshape(%192, newshape=[9, 12, 5]) /* ty=Tensor[(9, 12, 5), float64] */;
  %195 = reshape(%193, newshape=[1, 2100]) /* ty=Tensor[(1, 2100), float32] */;
  %196 = @func_306(%194, %195) /* ty=(Tensor[(9, 12, 5), float64], Tensor[(15, 10, 14), bool], Tensor[(1, 2100), float32]) */;
  %197 = cast(meta[relay.Constant][11] /* ty=Tensor[(54, 10), float64] */, dtype="float64") /* ty=Tensor[(54, 10), float64] */;
  %198 = sin(%197) /* ty=Tensor[(54, 10), float64] */;
  %199 = cast(meta[relay.Constant][11] /* ty=Tensor[(54, 10), float64] */, dtype="uint16") /* ty=Tensor[(54, 10), uint16] */;
  %200 = shape_of(%198, dtype="int32") /* ty=Tensor[(2), int32] */;
  %201 = cast(%198, dtype="uint16") /* ty=Tensor[(54, 10), uint16] */;
  %202 = dyn.reshape(%199, %200, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %203 = left_shift(%201, %202) /* ty=Tensor[(54, 10), uint16] */;
  %204 = cast(%203, dtype="float32") /* ty=Tensor[(54, 10), float32] */;
  %205 = shape_of(%198, dtype="int32") /* ty=Tensor[(2), int32] */;
  %206 = cast(%198, dtype="float32") /* ty=Tensor[(54, 10), float32] */;
  %207 = dyn.reshape(%204, %205, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %208 = less(%190, %191) /* ty=Tensor[(16, 15, 16), bool] */;
  %209 = %196.2;
  %210 = maximum(%206, %207) /* ty=Tensor[(54, 10), float32] */;
  (%208, %209, %var_1742, %210)
}

def @func_4298(%var_4259: Tensor[(12, 6, 12), int8]) -> (Tensor[(12, 6, 12), int8], Tensor[(13, 3, 14), float64], Tensor[(546), float64], Tensor[(9, 11, 9), uint64], Tensor[(891), uint64]) {
  %211 = cast(%var_4259, dtype="int8") /* ty=Tensor[(12, 6, 12), int8] */;
  %212 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(12, 6, 12), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %213 = cast(meta[relay.Constant][12] /* ty=Tensor[(12, 6, 12), int8] */, dtype="int8") /* ty=Tensor[(12, 6, 12), int8] */;
  %214 = dyn.reshape(%211, %212, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %215 = cast(meta[relay.Constant][13] /* ty=Tensor[(546), float64] */, dtype="float64") /* ty=Tensor[(546), float64] */;
  %216 = cast(meta[relay.Constant][13] /* ty=Tensor[(546), float64] */, dtype="float64") /* ty=Tensor[(546), float64] */;
  %217 = reshape(%215, newshape=[13, 3, 14]) /* ty=Tensor[(13, 3, 14), float64] */;
  %218 = reshape(%216, newshape=[13, 3, 14]) /* ty=Tensor[(13, 3, 14), float64] */;
  %219 = @func_3758(%217, %218) /* ty=(Tensor[(13, 3, 14), float64],) */;
  %220 = cast(meta[relay.Constant][14] /* ty=Tensor[(891), uint64] */, dtype="uint64") /* ty=Tensor[(891), uint64] */;
  %221 = cast(meta[relay.Constant][14] /* ty=Tensor[(891), uint64] */, dtype="uint64") /* ty=Tensor[(891), uint64] */;
  %222 = reshape(%220, newshape=[9, 11, 9]) /* ty=Tensor[(9, 11, 9), uint64] */;
  %223 = reshape(%221, newshape=[9, 11, 9]) /* ty=Tensor[(9, 11, 9), uint64] */;
  %224 = subtract(%213, %214) /* ty=Tensor[(12, 6, 12), int8] */;
  %225 = %219.0;
  %226 = @func_3072(%222, %223) /* ty=Tensor[(9, 11, 9), uint64] */;
  (%224, %225, meta[relay.Constant][13] /* ty=Tensor[(546), float64] */, %226, meta[relay.Constant][14] /* ty=Tensor[(891), uint64] */)
}

def @func_3239(%var_3231: Tensor[(5, 6), float32]) -> (Tensor[(5, 6), float32], Tensor[(9, 11, 9), uint64], Tensor[(99, 9), uint64]) {
  %227 = cast(%var_3231, dtype="float32") /* ty=Tensor[(5, 6), float32] */;
  %228 = cast(meta[relay.Constant][15] /* ty=Tensor[(99, 9), uint64] */, dtype="uint64") /* ty=Tensor[(99, 9), uint64] */;
  %229 = cast(meta[relay.Constant][15] /* ty=Tensor[(99, 9), uint64] */, dtype="uint64") /* ty=Tensor[(99, 9), uint64] */;
  %230 = reshape(%228, newshape=[9, 11, 9]) /* ty=Tensor[(9, 11, 9), uint64] */;
  %231 = reshape(%229, newshape=[9, 11, 9]) /* ty=Tensor[(9, 11, 9), uint64] */;
  %232 = log(%227) /* ty=Tensor[(5, 6), float32] */;
  %233 = @func_3072(%230, %231) /* ty=Tensor[(9, 11, 9), uint64] */;
  (%232, %233, meta[relay.Constant][15] /* ty=Tensor[(99, 9), uint64] */)
}

def @func_7836(%var_7827: Tensor[(3584), float32], %var_7828: Tensor[(9, 60), float64]) -> (Tensor[(3, 15, 14), float32], Tensor[(540), float64], Tensor[(224), float32], Tensor[(3584), float32], Tensor[(9, 60), float64]) {
  %234 = cast(meta[relay.Constant][16] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
  %235 = cast(%var_7827, dtype="float32") /* ty=Tensor[(3584), float32] */;
  %236 = cast(%var_7828, dtype="float64") /* ty=Tensor[(9, 60), float64] */;
  %237 = reshape(%234, newshape=[14, 1, 16]) /* ty=Tensor[(14, 1, 16), float32] */;
  %238 = reshape(%235, newshape=[14, 16, 16]) /* ty=Tensor[(14, 16, 16), float32] */;
  %239 = reshape(%236, newshape=[540]) /* ty=Tensor[(540), float64] */;
  %240 = @func_1824(%237, %238, %239) /* ty=(Tensor[(14, 16, 16), float64], Tensor[(1, 2100), float32], Tensor[(540), float64], Tensor[(2100), float32]) */;
  %241 = @func_6106() /* ty=Tensor[(3, 15, 14), float32] */;
  %242 = %240.2;
  (%241, %242, meta[relay.Constant][16] /* ty=Tensor[(224), float32] */, %var_7827, %var_7828)
}

def @func_4530() -> (Tensor[(1, 10, 15), float32], Tensor[(1, 10, 15), float64]) {
  %243 = cast(meta[relay.Constant][17] /* ty=Tensor[(1, 10, 15), float32] */, dtype="float32") /* ty=Tensor[(1, 10, 15), float32] */;
  %244 = cast(meta[relay.Constant][17] /* ty=Tensor[(1, 10, 15), float32] */, dtype="float64") /* ty=Tensor[(1, 10, 15), float64] */;
  %245 = cosh(%243) /* ty=Tensor[(1, 10, 15), float32] */;
  %246 = log(%244) /* ty=Tensor[(1, 10, 15), float64] */;
  (%245, %246)
}

def @func_7707() -> (Tensor[(3, 15, 14), float32], Tensor[(15, 8, 13), float32], Tensor[(1, 1560), float64]) {
  %247 = @func_5394() /* ty=Tensor[(3, 15, 14), float32] */;
  %248 = cast(%247, dtype="float32") /* ty=Tensor[(3, 15, 14), float32] */;
  %249 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 1560), float64] */, dtype="float64") /* ty=Tensor[(1, 1560), float64] */;
  %250 = reshape(%249, newshape=[15, 8, 13]) /* ty=Tensor[(15, 8, 13), float64] */;
  %251 = sigmoid(%248) /* ty=Tensor[(3, 15, 14), float32] */;
  %252 = @func_2229(%250) /* ty=Tensor[(15, 8, 13), float32] */;
  (%251, %252, meta[relay.Constant][18] /* ty=Tensor[(1, 1560), float64] */)
}

def @func_7543() -> (Tensor[(2100, ?), uint32],) {
  %253 = @func_6264() /* ty=(Tensor[(2100, ?), uint32],) */;
  %254 = %253.0;
  (%254,)
}

def @func_7445(%var_7418: Tensor[(891), uint64]) -> (Tensor[(2100, ?), uint32], Tensor[(9, 11, 9), uint64], Tensor[(891), float64]) {
  %255 = @func_6264() /* ty=(Tensor[(2100, ?), uint32],) */;
  %256 = cast(%var_7418, dtype="uint64") /* ty=Tensor[(891), uint64] */;
  %257 = cast(%var_7418, dtype="uint64") /* ty=Tensor[(891), uint64] */;
  %258 = reshape(%256, newshape=[9, 11, 9]) /* ty=Tensor[(9, 11, 9), uint64] */;
  %259 = reshape(%257, newshape=[9, 11, 9]) /* ty=Tensor[(9, 11, 9), uint64] */;
  %260 = cast(%var_7418, dtype="float64") /* ty=Tensor[(891), float64] */;
  %261 = %255.0;
  %262 = @func_3072(%258, %259) /* ty=Tensor[(9, 11, 9), uint64] */;
  %263 = sinh(%260) /* ty=Tensor[(891), float64] */;
  (%261, %262, %263)
}

def @func_5962() -> (Tensor[(?, 10, 15), int8],) {
  %264 = @func_5016() /* ty=Tensor[(?, 10, 15), int8] */;
  (%264,)
}

def @func_1173(%var_1148: Tensor[(4, 16, 11), float32], %var_1149: Tensor[(4, 16, 11), float32], %var_1156: Tensor[(4, 16, 11), float32]) -> (Tensor[(4, 16, 11), float32], Tensor[(4, 16, 11), bool], Tensor[(1, 2100), float32], Tensor[(540), float64], Tensor[(2100), float32]) {
  %265 = cast(%var_1149, dtype="float32") /* ty=Tensor[(4, 16, 11), float32] */;
  %266 = shape_of(%var_1148, dtype="int32") /* ty=Tensor[(3), int32] */;
  %267 = cast(%var_1148, dtype="float32") /* ty=Tensor[(4, 16, 11), float32] */;
  %268 = dyn.reshape(%265, %266, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %269 = cast(%var_1156, dtype="bool") /* ty=Tensor[(4, 16, 11), bool] */;
  %270 = shape_of(%var_1149, dtype="int32") /* ty=Tensor[(3), int32] */;
  %271 = cast(%var_1149, dtype="bool") /* ty=Tensor[(4, 16, 11), bool] */;
  %272 = dyn.reshape(%269, %270, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %273 = cast(meta[relay.Constant][19] /* ty=Tensor[(540), float64] */, dtype="float64") /* ty=Tensor[(540), float64] */;
  %274 = cast(meta[relay.Constant][20] /* ty=Tensor[(2100), float32] */, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %275 = reshape(%273, newshape=[9, 12, 5]) /* ty=Tensor[(9, 12, 5), float64] */;
  %276 = reshape(%274, newshape=[1, 2100]) /* ty=Tensor[(1, 2100), float32] */;
  %277 = @func_306(%275, %276) /* ty=(Tensor[(9, 12, 5), float64], Tensor[(15, 10, 14), bool], Tensor[(1, 2100), float32]) */;
  %278 = mod(%267, %268) /* ty=Tensor[(4, 16, 11), float32] */;
  %279 = less_equal(%271, %272) /* ty=Tensor[(4, 16, 11), bool] */;
  %280 = %277.2;
  (%278, %279, %280, meta[relay.Constant][19] /* ty=Tensor[(540), float64] */, meta[relay.Constant][20] /* ty=Tensor[(2100), float32] */)
}

def @func_7860() -> Tensor[(3, 15, 14), float32] {
  @func_6106() /* ty=Tensor[(3, 15, 14), float32] */
}

def @func_7030(%var_7008: Tensor[(3, 15, 14), float32]) -> (Tensor[(3, 15, 14), uint16], Tensor[(3, 15, 14), float32], Tensor[(3, 15, 14), uint16]) {
  %281 = @func_5361() /* ty=Tensor[(3, 15, 14), float32] */;
  %282 = cast(%var_7008, dtype="uint16") /* ty=Tensor[(3, 15, 14), uint16] */;
  %283 = shape_of(%281, dtype="int32") /* ty=Tensor[(3), int32] */;
  %284 = cast(%281, dtype="uint16") /* ty=Tensor[(3, 15, 14), uint16] */;
  %285 = dyn.reshape(%282, %283, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %286 = cast(%281, dtype="float32") /* ty=Tensor[(3, 15, 14), float32] */;
  %287 = sqrt(%286) /* ty=Tensor[(3, 15, 14), float32] */;
  %288 = cast(%287, dtype="float32") /* ty=Tensor[(3, 15, 14), float32] */;
  %289 = cast(%281, dtype="uint16") /* ty=Tensor[(3, 15, 14), uint16] */;
  %290 = shape_of(%287, dtype="int32") /* ty=Tensor[(3), int32] */;
  %291 = cast(%287, dtype="uint16") /* ty=Tensor[(3, 15, 14), uint16] */;
  %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %293 = bitwise_and(%284, %285) /* ty=Tensor[(3, 15, 14), uint16] */;
  %294 = asin(%288) /* ty=Tensor[(3, 15, 14), float32] */;
  %295 = add(%291, %292) /* ty=Tensor[(3, 15, 14), uint16] */;
  (%293, %294, %295)
}

def @func_4713(%var_4686: Tensor[(13, 8, 9), uint32], %var_4687: Tensor[(13, 8, 9), uint32]) -> (Tensor[(13, 8, 9), float64],) {
  %296 = cast(%var_4687, dtype="uint32") /* ty=Tensor[(13, 8, 9), uint32] */;
  %297 = shape_of(%var_4686, dtype="int32") /* ty=Tensor[(3), int32] */;
  %298 = cast(%var_4686, dtype="uint32") /* ty=Tensor[(13, 8, 9), uint32] */;
  %299 = dyn.reshape(%296, %297, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %300 = logical_xor(%298, %299) /* ty=Tensor[(13, 8, 9), uint32] */;
  %301 = cast(%300, dtype="float64") /* ty=Tensor[(13, 8, 9), float64] */;
  %302 = sinh(%301) /* ty=Tensor[(13, 8, 9), float64] */;
  (%302,)
}

def @func_9722(%var_9705: Tensor[(32, 112), float32], %var_9706: Tensor[(8, 28), float32]) -> (Tensor[(3, 15, 14), float32], Tensor[(?, 10, 15), int8], Tensor[(32, 112), float32], Tensor[(8, 28), float32], Tensor[(270, 2), float64]) {
  %303 = cast(%var_9705, dtype="float32") /* ty=Tensor[(32, 112), float32] */;
  %304 = cast(%var_9706, dtype="float32") /* ty=Tensor[(8, 28), float32] */;
  %305 = cast(meta[relay.Constant][21] /* ty=Tensor[(270, 2), float64] */, dtype="float64") /* ty=Tensor[(270, 2), float64] */;
  %306 = reshape(%303, newshape=[3584]) /* ty=Tensor[(3584), float32] */;
  %307 = reshape(%304, newshape=[224]) /* ty=Tensor[(224), float32] */;
  %308 = reshape(%305, newshape=[540]) /* ty=Tensor[(540), float64] */;
  %309 = @func_8584(%306, %307, %308) /* ty=(Tensor[(?, 10, 15), int8], Tensor[(2100, 16), bool], Tensor[(3584), int32], Tensor[(14, 16, 16), float64], Tensor[(224), float32], Tensor[(540), float64]) */;
  %310 = @func_6106() /* ty=Tensor[(3, 15, 14), float32] */;
  %311 = %309.0;
  (%310, %311, %var_9705, %var_9706, meta[relay.Constant][21] /* ty=Tensor[(270, 2), float64] */)
}

def @func_6106() -> Tensor[(3, 15, 14), float32] {
  @func_5361() /* ty=Tensor[(3, 15, 14), float32] */
}

def @func_6264() -> (Tensor[(2100, ?), uint32],) {
  %312 = @func_5474() /* ty=(Tensor[(3, 15, 14), float32], Tensor[(1, 10, 15), float64], Tensor[(2100, ?), uint32]) */;
  %313 = %312.2;
  (%313,)
}

def @func_5372() -> (Tensor[(?, 10, 15), int8],) {
  %314 = @func_5257() /* ty=(Tensor[(?, 10, 15), int8],) */;
  %315 = %314.0;
  (%315,)
}

def @func_5394() -> Tensor[(3, 15, 14), float32] {
  @func_5361() /* ty=Tensor[(3, 15, 14), float32] */
}

def @func_8154() -> (Tensor[(1, 10, 15), float64], Tensor[(810), uint16], Tensor[(810), uint16]) {
  %316 = @func_5319() /* ty=(Tensor[(1, 10, 15), float64],) */;
  %317 = cast(meta[relay.Constant][22] /* ty=Tensor[(810), uint16] */, dtype="uint16") /* ty=Tensor[(810), uint16] */;
  %318 = reshape(%317, newshape=[810]) /* ty=Tensor[(810), uint16] */;
  %319 = @func_8131(%318) /* ty=(Tensor[(11, 16, 2), float32], Tensor[(15, 9, 6), uint16], Tensor[(810), uint16]) */;
  %320 = %316.0;
  %321 = %319.2;
  (%320, %321, meta[relay.Constant][22] /* ty=Tensor[(810), uint16] */)
}

def @func_8425(%var_8418: Tensor[(15, 15, 8), bool], %var_8419: Tensor[(15, 15, 8), bool]) -> (Tensor[(15, 15, 8), bool], Tensor[(2100, ?), uint32]) {
  %322 = cast(%var_8419, dtype="bool") /* ty=Tensor[(15, 15, 8), bool] */;
  %323 = shape_of(%var_8418, dtype="int32") /* ty=Tensor[(3), int32] */;
  %324 = cast(%var_8418, dtype="bool") /* ty=Tensor[(15, 15, 8), bool] */;
  %325 = dyn.reshape(%322, %323, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %326 = @func_5474() /* ty=(Tensor[(3, 15, 14), float32], Tensor[(1, 10, 15), float64], Tensor[(2100, ?), uint32]) */;
  %327 = logical_and(%324, %325) /* ty=Tensor[(15, 15, 8), bool] */;
  %328 = %326.2;
  (%327, %328)
}

def @func_7921() -> Tensor[(1, 10, 15), float64] {
  %329 = @func_5319() /* ty=(Tensor[(1, 10, 15), float64],) */;
  %329.0
}

def @func_6729() -> Tensor[(3, 15, 14), float64] {
  %330 = @func_6526() /* ty=(Tensor[(3, 15, 14), float64],) */;
  %330.0
}

def @func_6007(%var_5980: Tensor[(3, 10, 15), float64], %var_5989: Tensor[(3584), float32]) -> (Tensor[(3, 10, 15), uint16], Tensor[(3, 10, 15), float32], Tensor[(810), uint16], Tensor[(3584), float32]) {
  %331 = @func_4854() /* ty=Tensor[(1, 10, 15), float64] */;
  %332 = cast(%331, dtype="uint16") /* ty=Tensor[(1, 10, 15), uint16] */;
  %333 = cast(%var_5980, dtype="uint16") /* ty=Tensor[(3, 10, 15), uint16] */;
  %334 = cast(%var_5980, dtype="float32") /* ty=Tensor[(3, 10, 15), float32] */;
  %335 = cast(%var_5989, dtype="float32") /* ty=Tensor[(3584), float32] */;
  %336 = reshape(%335, newshape=[3584]) /* ty=Tensor[(3584), float32] */;
  %337 = @func_4881(%336) /* ty=(Tensor[(15, 9, 6), uint16], Tensor[(810), uint16], Tensor[(1, 10, 15), float32], Tensor[(1, 2100), float32], Tensor[(16, 14), float32], Tensor[(3584), float32], Tensor[(540), float64]) */;
  %338 = right_shift(%332, %333) /* ty=Tensor[(3, 10, 15), uint16] */;
  %339 = atan(%334) /* ty=Tensor[(3, 10, 15), float32] */;
  %340 = %337.1;
  (%338, %339, %340, %var_5989)
}

def @func_9204() -> Tensor[(3, 15, 14), float32] {
  %341 = @func_6096() /* ty=(Tensor[(1, 10, 15), float64], Tensor[(3, 15, 14), float32]) */;
  %341.1
}

def @func_7184(%var_7180: Tensor[(546), float64]) -> (Tensor[(?, 10, 15), float32], Tensor[(13, 3, 14), float64], Tensor[(546), float64]) {
  %342 = @func_5257() /* ty=(Tensor[(?, 10, 15), int8],) */;
  %343 = %342.0;
  %344 = cast(%343, dtype="float32") /* ty=Tensor[(?, 10, 15), float32] */;
  %345 = cast(%var_7180, dtype="float64") /* ty=Tensor[(546), float64] */;
  %346 = cast(%var_7180, dtype="float64") /* ty=Tensor[(546), float64] */;
  %347 = reshape(%345, newshape=[13, 3, 14]) /* ty=Tensor[(13, 3, 14), float64] */;
  %348 = reshape(%346, newshape=[13, 3, 14]) /* ty=Tensor[(13, 3, 14), float64] */;
  %349 = @func_3758(%347, %348) /* ty=(Tensor[(13, 3, 14), float64],) */;
  %350 = sinh(%344) /* ty=Tensor[(?, 10, 15), float32] */;
  %351 = %349.0;
  (%350, %351, %var_7180)
}

def @func_6686() -> (Tensor[(1, 10, 15), float64], Tensor[(5, 6), float32], Tensor[(30), float32]) {
  %352 = @func_6096() /* ty=(Tensor[(1, 10, 15), float64], Tensor[(3, 15, 14), float32]) */;
  %353 = cast(meta[relay.Constant][23] /* ty=Tensor[(30), float32] */, dtype="float32") /* ty=Tensor[(30), float32] */;
  %354 = reshape(%353, newshape=[10, 3]) /* ty=Tensor[(10, 3), float32] */;
  %355 = @func_6199(%354) /* ty=(Tensor[(?, 10, 15), int8], Tensor[(5, 6), float32], Tensor[(10, 3), float32]) */;
  %356 = %352.0;
  %357 = %355.1;
  (%356, %357, meta[relay.Constant][23] /* ty=Tensor[(30), float32] */)
}

def @func_8131(%var_8128: Tensor[(810), uint16]) -> (Tensor[(11, 16, 2), float32], Tensor[(15, 9, 6), uint16], Tensor[(810), uint16]) {
  %358 = @func_7650() /* ty=Tensor[(11, 16, 2), float32] */;
  %359 = cast(%358, dtype="float32") /* ty=Tensor[(11, 16, 2), float32] */;
  %360 = cast(%var_8128, dtype="uint16") /* ty=Tensor[(810), uint16] */;
  %361 = reshape(%360, newshape=[15, 9, 6]) /* ty=Tensor[(15, 9, 6), uint16] */;
  %362 = acos(%359) /* ty=Tensor[(11, 16, 2), float32] */;
  %363 = @func_3607(%361) /* ty=Tensor[(15, 9, 6), uint16] */;
  (%362, %363, %var_8128)
}

def @func_4749(%var_4722: Tensor[(2, 9, 1), float64]) -> (Tensor[(2, 9, 1), float64], Tensor[(3, 14, 4), bool], Tensor[(168), bool]) {
  %364 = cast(%var_4722, dtype="float64") /* ty=Tensor[(2, 9, 1), float64] */;
  %365 = cast(meta[relay.Constant][24] /* ty=Tensor[(168), bool] */, dtype="bool") /* ty=Tensor[(168), bool] */;
  %366 = reshape(%365, newshape=[3, 14, 4]) /* ty=Tensor[(3, 14, 4), bool] */;
  %367 = cosh(%364) /* ty=Tensor[(2, 9, 1), float64] */;
  %368 = @func_4476(%366) /* ty=Tensor[(3, 14, 4), bool] */;
  (%367, %368, meta[relay.Constant][24] /* ty=Tensor[(168), bool] */)
}

def @func_4476(%var_4458: Tensor[(3, 14, 4), bool]) -> Tensor[(3, 14, 4), bool] {
  %369 = cast(meta[relay.Constant][25] /* ty=Tensor[(3, 14, 4), bool] */, dtype="bool") /* ty=Tensor[(3, 14, 4), bool] */;
  %370 = shape_of(%var_4458, dtype="int32") /* ty=Tensor[(3), int32] */;
  %371 = cast(%var_4458, dtype="bool") /* ty=Tensor[(3, 14, 4), bool] */;
  %372 = dyn.reshape(%369, %370, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%371, %372) /* ty=Tensor[(3, 14, 4), bool] */
}

def @func_8989() -> (Tensor[(3, 15, 14), float32], Tensor[(1, 11, 14), float32], Tensor[(1, 154), float32]) {
  %373 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 154), float32] */, dtype="float32") /* ty=Tensor[(1, 154), float32] */;
  %374 = reshape(%373, newshape=[1, 11, 14]) /* ty=Tensor[(1, 11, 14), float32] */;
  %375 = @func_5394() /* ty=Tensor[(3, 15, 14), float32] */;
  %376 = @func_5663(%374) /* ty=Tensor[(1, 11, 14), float32] */;
  (%375, %376, meta[relay.Constant][26] /* ty=Tensor[(1, 154), float32] */)
}

def @func_8898(%var_8868: Tensor[(891), uint64]) -> (Tensor[(9, 11, 9), uint64], Tensor[(891), uint64], Tensor[(?, 10, 15), bool], Tensor[(11, 16, 2), float32]) {
  %377 = cast(%var_8868, dtype="uint64") /* ty=Tensor[(891), uint64] */;
  %378 = cast(%var_8868, dtype="uint64") /* ty=Tensor[(891), uint64] */;
  %379 = reshape(%377, newshape=[9, 11, 9]) /* ty=Tensor[(9, 11, 9), uint64] */;
  %380 = reshape(%378, newshape=[9, 11, 9]) /* ty=Tensor[(9, 11, 9), uint64] */;
  %381 = @func_7921() /* ty=Tensor[(1, 10, 15), float64] */;
  %382 = cast(%381, dtype="float32") /* ty=Tensor[(1, 10, 15), float32] */;
  %383 = tan(%382) /* ty=Tensor[(1, 10, 15), float32] */;
  %384 = cast(%381, dtype="bool") /* ty=Tensor[(1, 10, 15), bool] */;
  %385 = shape_of(%383, dtype="int32") /* ty=Tensor[(3), int32] */;
  %386 = cast(%383, dtype="bool") /* ty=Tensor[(1, 10, 15), bool] */;
  %387 = dyn.reshape(%384, %385, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %388 = @func_7650() /* ty=Tensor[(11, 16, 2), float32] */;
  %389 = cast(%388, dtype="float32") /* ty=Tensor[(11, 16, 2), float32] */;
  %390 = @func_3072(%379, %380) /* ty=Tensor[(9, 11, 9), uint64] */;
  %391 = logical_and(%386, %387) /* ty=Tensor[(?, 10, 15), bool] */;
  %392 = rsqrt(%389) /* ty=Tensor[(11, 16, 2), float32] */;
  (%390, %var_8868, %391, %392)
}

def @func_3607(%var_3598: Tensor[(15, 9, 6), uint16]) -> Tensor[(15, 9, 6), uint16] {
  %393 = cast(meta[relay.Constant][27] /* ty=Tensor[(15, 9, 6), uint16] */, dtype="uint16") /* ty=Tensor[(15, 9, 6), uint16] */;
  %394 = shape_of(%var_3598, dtype="int32") /* ty=Tensor[(3), int32] */;
  %395 = cast(%var_3598, dtype="uint16") /* ty=Tensor[(15, 9, 6), uint16] */;
  %396 = dyn.reshape(%393, %394, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_and(%395, %396) /* ty=Tensor[(15, 9, 6), uint16] */
}

def @func_7375(%var_7371: Tensor[(12, 3, 6), float64]) -> (Tensor[(12, 3, 6), float64],) {
  %397 = cast(%var_7371, dtype="float64") /* ty=Tensor[(12, 3, 6), float64] */;
  %398 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(12, 3, 6), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %399 = cast(meta[relay.Constant][28] /* ty=Tensor[(12, 3, 6), float64] */, dtype="float64") /* ty=Tensor[(12, 3, 6), float64] */;
  %400 = dyn.reshape(%397, %398, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %401 = power(%399, %400) /* ty=Tensor[(12, 3, 6), float64] */;
  (%401,)
}

def @func_8748() -> (Tensor[(11, 16, 2), float32],) {
  %402 = @func_7650() /* ty=Tensor[(11, 16, 2), float32] */;
  (%402,)
}

def @func_5257() -> (Tensor[(?, 10, 15), int8],) {
  %403 = @func_5016() /* ty=Tensor[(?, 10, 15), int8] */;
  (%403,)
}

def @func_9076() -> Tensor[(3, 15, 14), float32] {
  @func_6106() /* ty=Tensor[(3, 15, 14), float32] */
}

def @func_9494() -> (Tensor[(3, 15, 14), float32], Tensor[(?, 10, 15), int8]) {
  %404 = @func_5372() /* ty=(Tensor[(?, 10, 15), int8],) */;
  %405 = @func_9412() /* ty=Tensor[(3, 15, 14), float32] */;
  %406 = %404.0;
  (%405, %406)
}

def @func_9631() -> Tensor[(11, 16, 2), float32] {
  @func_7650() /* ty=Tensor[(11, 16, 2), float32] */
}

def @func_5361() -> Tensor[(3, 15, 14), float32] {
  %407 = cast(meta[relay.Constant][29] /* ty=Tensor[(3, 15, 14), float32] */, dtype="float32") /* ty=Tensor[(3, 15, 14), float32] */;
  log2(%407) /* ty=Tensor[(3, 15, 14), float32] */
}

def @func_5319() -> (Tensor[(1, 10, 15), float64],) {
  %408 = @func_4835() /* ty=Tensor[(1, 10, 15), float32] */;
  %409 = cast(%408, dtype="float64") /* ty=Tensor[(1, 10, 15), float64] */;
  %410 = cos(%409) /* ty=Tensor[(1, 10, 15), float64] */;
  (%410,)
}

def @func_140(%var_53: Tensor[(15, 10, 14), float32], %var_65: Tensor[(15, 10, 14), int64], %var_87: Tensor[(15, 10, 14), float32]) -> (Tensor[(15, 10, 14), bool], Tensor[(15, 10, 14), float64], Tensor[(15, 10, 14), float64], Tensor[(15, 10, 14), float32]) {
  %411 = cast(%var_53, dtype="float32") /* ty=Tensor[(15, 10, 14), float32] */;
  %412 = sinh(%411) /* ty=Tensor[(15, 10, 14), float32] */;
  %413 = cast(%var_53, dtype="int64") /* ty=Tensor[(15, 10, 14), int64] */;
  %414 = shape_of(%412, dtype="int32") /* ty=Tensor[(3), int32] */;
  %415 = cast(%412, dtype="int64") /* ty=Tensor[(15, 10, 14), int64] */;
  %416 = dyn.reshape(%413, %414, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %417 = bitwise_and(%415, %416) /* ty=Tensor[(15, 10, 14), int64] */;
  %418 = cast(%var_65, dtype="bool") /* ty=Tensor[(15, 10, 14), bool] */;
  %419 = shape_of(%417, dtype="int32") /* ty=Tensor[(3), int32] */;
  %420 = cast(%417, dtype="bool") /* ty=Tensor[(15, 10, 14), bool] */;
  %421 = dyn.reshape(%418, %419, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %422 = cast(%var_87, dtype="uint32") /* ty=Tensor[(15, 10, 14), uint32] */;
  %423 = shape_of(%var_53, dtype="int32") /* ty=Tensor[(3), int32] */;
  %424 = cast(%var_53, dtype="uint32") /* ty=Tensor[(15, 10, 14), uint32] */;
  %425 = dyn.reshape(%422, %423, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %426 = minimum(%424, %425) /* ty=Tensor[(15, 10, 14), uint32] */;
  %427 = cast(%426, dtype="float64") /* ty=Tensor[(15, 10, 14), float64] */;
  %428 = cast(%412, dtype="float64") /* ty=Tensor[(15, 10, 14), float64] */;
  %429 = shape_of(%var_87, dtype="int32") /* ty=Tensor[(3), int32] */;
  %430 = cast(%var_87, dtype="float64") /* ty=Tensor[(15, 10, 14), float64] */;
  %431 = dyn.reshape(%428, %429, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %432 = subtract(%430, %431) /* ty=Tensor[(15, 10, 14), float64] */;
  %433 = cast(%432, dtype="float64") /* ty=Tensor[(15, 10, 14), float64] */;
  %434 = cast(%432, dtype="float32") /* ty=Tensor[(15, 10, 14), float32] */;
  %435 = shape_of(%426, dtype="int32") /* ty=Tensor[(3), int32] */;
  %436 = cast(%426, dtype="float32") /* ty=Tensor[(15, 10, 14), float32] */;
  %437 = dyn.reshape(%434, %435, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %438 = equal(%420, %421) /* ty=Tensor[(15, 10, 14), bool] */;
  %439 = acosh(%427) /* ty=Tensor[(15, 10, 14), float64] */;
  %440 = log10(%433) /* ty=Tensor[(15, 10, 14), float64] */;
  %441 = divide(%436, %437) /* ty=Tensor[(15, 10, 14), float32] */;
  (%438, %439, %440, %441)
}

def @func_5016() -> Tensor[(?, 10, 15), int8] {
  %442 = @func_4835() /* ty=Tensor[(1, 10, 15), float32] */;
  %443 = @func_4835() /* ty=Tensor[(1, 10, 15), float32] */;
  %444 = cast(%443, dtype="int8") /* ty=Tensor[(1, 10, 15), int8] */;
  %445 = shape_of(%442, dtype="int32") /* ty=Tensor[(3), int32] */;
  %446 = cast(%442, dtype="int8") /* ty=Tensor[(1, 10, 15), int8] */;
  %447 = dyn.reshape(%444, %445, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  subtract(%446, %447) /* ty=Tensor[(?, 10, 15), int8] */
}

def @func_6841(%var_6809: Tensor[(14, 3, 11), float64], %var_6815: Tensor[(14, 3, 11), float64], %var_6826: Tensor[(135), float32]) -> (Tensor[(14, 3, 11), float64], Tensor[(?, 10, 15), int8], Tensor[(3, 15, 3), float32], Tensor[(18, 6), float64], Tensor[(135), float32]) {
  %448 = cast(%var_6809, dtype="float64") /* ty=Tensor[(14, 3, 11), float64] */;
  %449 = log2(%448) /* ty=Tensor[(14, 3, 11), float64] */;
  %450 = cast(%var_6815, dtype="float64") /* ty=Tensor[(14, 3, 11), float64] */;
  %451 = shape_of(%449, dtype="int32") /* ty=Tensor[(3), int32] */;
  %452 = cast(%449, dtype="float64") /* ty=Tensor[(14, 3, 11), float64] */;
  %453 = dyn.reshape(%450, %451, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %454 = cast(meta[relay.Constant][30] /* ty=Tensor[(18, 6), float64] */, dtype="float64") /* ty=Tensor[(18, 6), float64] */;
  %455 = cast(%var_6826, dtype="float32") /* ty=Tensor[(135), float32] */;
  %456 = reshape(%454, newshape=[6, 2, 9]) /* ty=Tensor[(6, 2, 9), float64] */;
  %457 = reshape(%455, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %458 = @func_6136(%456, %457) /* ty=(Tensor[(6, 2, 9), float64], Tensor[(3, 15, 3), float32], Tensor[(135), float32]) */;
  %459 = add(%452, %453) /* ty=Tensor[(14, 3, 11), float64] */;
  %460 = @func_5016() /* ty=Tensor[(?, 10, 15), int8] */;
  %461 = %458.1;
  (%459, %460, %461, meta[relay.Constant][30] /* ty=Tensor[(18, 6), float64] */, %var_6826)
}

def @func_7356(%var_7298: Tensor[(936), uint32]) -> (Tensor[(?, 10, 15), int8], Tensor[(168), bool], Tensor[(18), float64], Tensor[(3584), float32], Tensor[(450), float64], Tensor[(128, 28), float32], Tensor[(936), int16], Tensor[(3584), float32], Tensor[(3, 14, 4), bool]) {
  %462 = cast(meta[relay.Constant][31] /* ty=Tensor[(18), float64] */, dtype="float64") /* ty=Tensor[(18), float64] */;
  %463 = reshape(%462, newshape=[2, 9, 1]) /* ty=Tensor[(2, 9, 1), float64] */;
  %464 = @func_4749(%463) /* ty=(Tensor[(2, 9, 1), float64], Tensor[(3, 14, 4), bool], Tensor[(168), bool]) */;
  %465 = cast(meta[relay.Constant][32] /* ty=Tensor[(450), float64] */, dtype="float64") /* ty=Tensor[(450), float64] */;
  %466 = cast(meta[relay.Constant][33] /* ty=Tensor[(128, 28), float32] */, dtype="float32") /* ty=Tensor[(128, 28), float32] */;
  %467 = reshape(%465, newshape=[3, 10, 15]) /* ty=Tensor[(3, 10, 15), float64] */;
  %468 = reshape(%466, newshape=[3584]) /* ty=Tensor[(3584), float32] */;
  %469 = @func_6007(%467, %468) /* ty=(Tensor[(3, 10, 15), uint16], Tensor[(3, 10, 15), float32], Tensor[(810), uint16], Tensor[(3584), float32]) */;
  %470 = cast(%var_7298, dtype="uint32") /* ty=Tensor[(936), uint32] */;
  %471 = cast(%var_7298, dtype="uint32") /* ty=Tensor[(936), uint32] */;
  %472 = reshape(%470, newshape=[13, 8, 9]) /* ty=Tensor[(13, 8, 9), uint32] */;
  %473 = reshape(%471, newshape=[13, 8, 9]) /* ty=Tensor[(13, 8, 9), uint32] */;
  %474 = @func_4713(%472, %473) /* ty=(Tensor[(13, 8, 9), float64],) */;
  %475 = %474.0;
  %476 = cast(%475, dtype="int16") /* ty=Tensor[(13, 8, 9), int16] */;
  %477 = shape_of(%var_7298, dtype="int32") /* ty=Tensor[(1), int32] */;
  %478 = cast(%var_7298, dtype="int16") /* ty=Tensor[(936), int16] */;
  %479 = dyn.reshape(%476, %477, newshape=[]) /* ty=Tensor[(?), int16] */;
  %480 = @func_5118() /* ty=(Tensor[(1, 10, 15), float64], Tensor[(540), float64], Tensor[(3584), float32]) */;
  %481 = cast(meta[relay.Constant][31] /* ty=Tensor[(18), float64] */, dtype="float64") /* ty=Tensor[(18), float64] */;
  %482 = reshape(%481, newshape=[2, 9, 1]) /* ty=Tensor[(2, 9, 1), float64] */;
  %483 = @func_4749(%482) /* ty=(Tensor[(2, 9, 1), float64], Tensor[(3, 14, 4), bool], Tensor[(168), bool]) */;
  %484 = @func_5016() /* ty=Tensor[(?, 10, 15), int8] */;
  %485 = %464.2;
  %486 = %469.3;
  %487 = bitwise_and(%478, %479) /* ty=Tensor[(936), int16] */;
  %488 = %480.2;
  %489 = %483.1;
  (%484, %485, meta[relay.Constant][31] /* ty=Tensor[(18), float64] */, %486, meta[relay.Constant][32] /* ty=Tensor[(450), float64] */, meta[relay.Constant][33] /* ty=Tensor[(128, 28), float32] */, %487, %488, %489)
}

def @func_8395(%var_8341: Tensor[(2100), float32], %var_8347: Tensor[(3840), float32]) -> (Tensor[(3, 15, 14), float32], Tensor[(2100), float32], Tensor[(2100), float32], Tensor[(3840), float64], Tensor[(1, 10, 15), float64], Tensor[(14700), uint32], Tensor[(616, 2), uint64], Tensor[(616, 2), uint32]) {
  %490 = cast(meta[relay.Constant][34] /* ty=Tensor[(616, 2), uint32] */, dtype="uint32") /* ty=Tensor[(616, 2), uint32] */;
  %491 = cast(meta[relay.Constant][35] /* ty=Tensor[(3840), float32] */, dtype="float32") /* ty=Tensor[(3840), float32] */;
  %492 = cast(%var_8341, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %493 = reshape(%490, newshape=[14, 11, 8]) /* ty=Tensor[(14, 11, 8), uint32] */;
  %494 = reshape(%491, newshape=[3840]) /* ty=Tensor[(3840), float32] */;
  %495 = reshape(%492, newshape=[2100]) /* ty=Tensor[(2100), float32] */;
  %496 = @func_4191(%493, %494, %495) /* ty=(Tensor[(14, 11, 8), float32], Tensor[(2100), float32], Tensor[(3840), float32], Tensor[(2100), float32], Tensor[(14, 11, 8), float32]) */;
  %497 = cast(%var_8347, dtype="float64") /* ty=Tensor[(3840), float64] */;
  %498 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(3840), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %499 = cast(meta[relay.Constant][35] /* ty=Tensor[(3840), float32] */, dtype="float64") /* ty=Tensor[(3840), float64] */;
  %500 = dyn.reshape(%497, %498, newshape=[]) /* ty=Tensor[(?), float64] */;
  %501 = cast(meta[relay.Constant][36] /* ty=Tensor[(14700), uint32] */, dtype="uint32") /* ty=Tensor[(14700), uint32] */;
  %502 = reshape(%501, newshape=[2100, 7]) /* ty=Tensor[(2100, 7), uint32] */;
  %503 = @func_6608(%502) /* ty=(Tensor[(1, 10, 15), float64], Tensor[(2100, 7), bool]) */;
  %504 = cast(meta[relay.Constant][34] /* ty=Tensor[(616, 2), uint32] */, dtype="float32") /* ty=Tensor[(616, 2), float32] */;
  %505 = log(%504) /* ty=Tensor[(616, 2), float32] */;
  %506 = cast(meta[relay.Constant][34] /* ty=Tensor[(616, 2), uint32] */, dtype="int64") /* ty=Tensor[(616, 2), int64] */;
  %507 = shape_of(%505, dtype="int32") /* ty=Tensor[(2), int32] */;
  %508 = cast(%505, dtype="int64") /* ty=Tensor[(616, 2), int64] */;
  %509 = dyn.reshape(%506, %507, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %510 = bitwise_or(%508, %509) /* ty=Tensor[(616, 2), int64] */;
  %511 = cast(%510, dtype="float64") /* ty=Tensor[(616, 2), float64] */;
  %512 = erf(%511) /* ty=Tensor[(616, 2), float64] */;
  %513 = cast(%512, dtype="float64") /* ty=Tensor[(616, 2), float64] */;
  %514 = rsqrt(%513) /* ty=Tensor[(616, 2), float64] */;
  %515 = cast(%512, dtype="uint64") /* ty=Tensor[(616, 2), uint64] */;
  %516 = shape_of(%514, dtype="int32") /* ty=Tensor[(2), int32] */;
  %517 = cast(%514, dtype="uint64") /* ty=Tensor[(616, 2), uint64] */;
  %518 = dyn.reshape(%515, %516, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %519 = cast(meta[relay.Constant][34] /* ty=Tensor[(616, 2), uint32] */, dtype="float64") /* ty=Tensor[(616, 2), float64] */;
  %520 = shape_of(%510, dtype="int32") /* ty=Tensor[(2), int32] */;
  %521 = cast(%510, dtype="float64") /* ty=Tensor[(616, 2), float64] */;
  %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %523 = floor_divide(%521, %522) /* ty=Tensor[(616, 2), float64] */;
  %524 = cast(%523, dtype="int8") /* ty=Tensor[(616, 2), int8] */;
  %525 = shape_of(%514, dtype="int32") /* ty=Tensor[(2), int32] */;
  %526 = cast(%514, dtype="int8") /* ty=Tensor[(616, 2), int8] */;
  %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %528 = minimum(%526, %527) /* ty=Tensor[(616, 2), int8] */;
  %529 = cast(%514, dtype="uint32") /* ty=Tensor[(616, 2), uint32] */;
  %530 = shape_of(%528, dtype="int32") /* ty=Tensor[(2), int32] */;
  %531 = cast(%528, dtype="uint32") /* ty=Tensor[(616, 2), uint32] */;
  %532 = dyn.reshape(%529, %530, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %533 = @func_5361() /* ty=Tensor[(3, 15, 14), float32] */;
  %534 = %496.3;
  %535 = floor_mod(%499, %500) /* ty=Tensor[(3840), float64] */;
  %536 = %503.0;
  %537 = right_shift(%517, %518) /* ty=Tensor[(616, 2), uint64] */;
  %538 = logical_xor(%531, %532) /* ty=Tensor[(616, 2), uint32] */;
  (%533, %534, %var_8341, %535, %536, meta[relay.Constant][36] /* ty=Tensor[(14700), uint32] */, %537, %538)
}

def @func_7988() -> (Tensor[(1, 10, 15), float64],) {
  %539 = @func_4854() /* ty=Tensor[(1, 10, 15), float64] */;
  (%539,)
}

def @func_1973(%var_1948: Tensor[(16, 10, 13), float32], %var_1953: Tensor[(540), float64], %var_1954: Tensor[(2100), float32], %var_1960: Tensor[(3840), float32]) -> (Tensor[(16, 10, 13), float32], Tensor[(9, 12, 5), float64], Tensor[(540), float64], Tensor[(2100), float32], Tensor[(2100), float32], Tensor[(3840), float32], Tensor[(15, 10, 14), float64]) {
  %540 = cast(%var_1948, dtype="float32") /* ty=Tensor[(16, 10, 13), float32] */;
  %541 = cast(%var_1953, dtype="float64") /* ty=Tensor[(540), float64] */;
  %542 = cast(%var_1954, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %543 = reshape(%541, newshape=[9, 12, 5]) /* ty=Tensor[(9, 12, 5), float64] */;
  %544 = reshape(%542, newshape=[1, 2100]) /* ty=Tensor[(1, 2100), float32] */;
  %545 = @func_306(%543, %544) /* ty=(Tensor[(9, 12, 5), float64], Tensor[(15, 10, 14), bool], Tensor[(1, 2100), float32]) */;
  %546 = cast(%var_1960, dtype="float32") /* ty=Tensor[(3840), float32] */;
  %547 = cast(%var_1960, dtype="float32") /* ty=Tensor[(3840), float32] */;
  %548 = cast(%var_1954, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %549 = reshape(%546, newshape=[16, 15, 16]) /* ty=Tensor[(16, 15, 16), float32] */;
  %550 = reshape(%547, newshape=[16, 15, 16]) /* ty=Tensor[(16, 15, 16), float32] */;
  %551 = reshape(%548, newshape=[2100]) /* ty=Tensor[(2100), float32] */;
  %552 = @func_1776(%549, %550, %551) /* ty=(Tensor[(16, 15, 16), bool], Tensor[(1, 2100), float32], Tensor[(2100), float32], Tensor[(54, 10), float32]) */;
  %553 = cast(%var_1954, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %554 = cast(%var_1954, dtype="int64") /* ty=Tensor[(2100), int64] */;
  %555 = cast(%var_1954, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %556 = reshape(%553, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), float32] */;
  %557 = reshape(%554, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), int64] */;
  %558 = reshape(%555, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), float32] */;
  %559 = @func_140(%556, %557, %558) /* ty=(Tensor[(15, 10, 14), bool], Tensor[(15, 10, 14), float64], Tensor[(15, 10, 14), float64], Tensor[(15, 10, 14), float32]) */;
  %560 = exp(%540) /* ty=Tensor[(16, 10, 13), float32] */;
  %561 = %545.0;
  %562 = %552.2;
  %563 = %559.1;
  (%560, %561, %var_1953, %var_1954, %562, %var_1960, %563)
}

def @func_3072(%var_3053: Tensor[(9, 11, 9), uint64], %var_3054: Tensor[(9, 11, 9), uint64]) -> Tensor[(9, 11, 9), uint64] {
  %564 = cast(%var_3054, dtype="uint64") /* ty=Tensor[(9, 11, 9), uint64] */;
  %565 = shape_of(%var_3053, dtype="int32") /* ty=Tensor[(3), int32] */;
  %566 = cast(%var_3053, dtype="uint64") /* ty=Tensor[(9, 11, 9), uint64] */;
  %567 = dyn.reshape(%564, %565, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  multiply(%566, %567) /* ty=Tensor[(9, 11, 9), uint64] */
}

def @func_5788(%var_5770: Tensor[(3584), float32]) -> (Tensor[(?, 10, 15), int8], Tensor[(1, 2100), float32], Tensor[(3584), float32], Tensor[(?, 10, 15), int8]) {
  %568 = @func_5372() /* ty=(Tensor[(?, 10, 15), int8],) */;
  %569 = cast(%var_5770, dtype="float32") /* ty=Tensor[(3584), float32] */;
  %570 = reshape(%569, newshape=[3584]) /* ty=Tensor[(3584), float32] */;
  %571 = @func_4881(%570) /* ty=(Tensor[(15, 9, 6), uint16], Tensor[(810), uint16], Tensor[(1, 10, 15), float32], Tensor[(1, 2100), float32], Tensor[(16, 14), float32], Tensor[(3584), float32], Tensor[(540), float64]) */;
  %572 = @func_5257() /* ty=(Tensor[(?, 10, 15), int8],) */;
  %573 = %568.0;
  %574 = %571.3;
  %575 = %572.0;
  (%573, %574, %var_5770, %575)
}

def @func_8533() -> Tensor[(3, 15, 14), float64] {
  %576 = @func_5361() /* ty=Tensor[(3, 15, 14), float32] */;
  %577 = cast(%576, dtype="float64") /* ty=Tensor[(3, 15, 14), float64] */;
  atanh(%577) /* ty=Tensor[(3, 15, 14), float64] */
}

def @func_7760(%var_7751: Tensor[(3, 15, 14), float64]) -> (Tensor[(3, 15, 14), float32], Tensor[(3, 15, 14), float64]) {
  %578 = @func_6729() /* ty=Tensor[(3, 15, 14), float64] */;
  %579 = cast(%var_7751, dtype="float64") /* ty=Tensor[(3, 15, 14), float64] */;
  %580 = shape_of(%578, dtype="int32") /* ty=Tensor[(3), int32] */;
  %581 = cast(%578, dtype="float64") /* ty=Tensor[(3, 15, 14), float64] */;
  %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %583 = @func_6106() /* ty=Tensor[(3, 15, 14), float32] */;
  %584 = divide(%581, %582) /* ty=Tensor[(3, 15, 14), float64] */;
  (%583, %584)
}

def @func_8719(%var_8695: Tensor[(15, 10, 15), float32]) -> (Tensor[(15, 10, 15), float32],) {
  %585 = @func_4835() /* ty=Tensor[(1, 10, 15), float32] */;
  %586 = cast(%585, dtype="float32") /* ty=Tensor[(1, 10, 15), float32] */;
  %587 = cast(%var_8695, dtype="float32") /* ty=Tensor[(15, 10, 15), float32] */;
  %588 = mod(%586, %587) /* ty=Tensor[(15, 10, 15), float32] */;
  %589 = cast(%588, dtype="float32") /* ty=Tensor[(15, 10, 15), float32] */;
  %590 = sinh(%589) /* ty=Tensor[(15, 10, 15), float32] */;
  (%590,)
}

def @func_4881(%var_4875: Tensor[(3584), float32]) -> (Tensor[(15, 9, 6), uint16], Tensor[(810), uint16], Tensor[(1, 10, 15), float32], Tensor[(1, 2100), float32], Tensor[(16, 14), float32], Tensor[(3584), float32], Tensor[(540), float64]) {
  %591 = cast(meta[relay.Constant][37] /* ty=Tensor[(810), uint16] */, dtype="uint16") /* ty=Tensor[(810), uint16] */;
  %592 = reshape(%591, newshape=[15, 9, 6]) /* ty=Tensor[(15, 9, 6), uint16] */;
  %593 = @func_4854() /* ty=Tensor[(1, 10, 15), float64] */;
  %594 = cast(%593, dtype="float32") /* ty=Tensor[(1, 10, 15), float32] */;
  %595 = cast(meta[relay.Constant][38] /* ty=Tensor[(16, 14), float32] */, dtype="float32") /* ty=Tensor[(16, 14), float32] */;
  %596 = cast(%var_4875, dtype="float32") /* ty=Tensor[(3584), float32] */;
  %597 = cast(meta[relay.Constant][39] /* ty=Tensor[(540), float64] */, dtype="float64") /* ty=Tensor[(540), float64] */;
  %598 = reshape(%595, newshape=[14, 1, 16]) /* ty=Tensor[(14, 1, 16), float32] */;
  %599 = reshape(%596, newshape=[14, 16, 16]) /* ty=Tensor[(14, 16, 16), float32] */;
  %600 = reshape(%597, newshape=[540]) /* ty=Tensor[(540), float64] */;
  %601 = @func_1824(%598, %599, %600) /* ty=(Tensor[(14, 16, 16), float64], Tensor[(1, 2100), float32], Tensor[(540), float64], Tensor[(2100), float32]) */;
  %602 = @func_3607(%592) /* ty=Tensor[(15, 9, 6), uint16] */;
  %603 = rsqrt(%594) /* ty=Tensor[(1, 10, 15), float32] */;
  %604 = %601.1;
  (%602, meta[relay.Constant][37] /* ty=Tensor[(810), uint16] */, %603, %604, meta[relay.Constant][38] /* ty=Tensor[(16, 14), float32] */, %var_4875, meta[relay.Constant][39] /* ty=Tensor[(540), float64] */)
}

def @func_6360(%var_6327: Tensor[(2100), float32], %var_6345: Tensor[(1560), float64]) -> (Tensor[(?, 10, 15), int8], Tensor[(1, 10, 15), float32], Tensor[(520, 1), int32], Tensor[(2100), float32], Tensor[(128, 28), float32], Tensor[(1, 10, 15), float64], Tensor[(15, 10, 14), float64], Tensor[(224), float32], Tensor[(540), float64], Tensor[(15, 8, 13), float32], Tensor[(1560), float64]) {
  %605 = @func_5257() /* ty=(Tensor[(?, 10, 15), int8],) */;
  %606 = cast(meta[relay.Constant][40] /* ty=Tensor[(520, 1), int32] */, dtype="int32") /* ty=Tensor[(520, 1), int32] */;
  %607 = cast(%var_6327, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %608 = cast(meta[relay.Constant][41] /* ty=Tensor[(128, 28), float32] */, dtype="float32") /* ty=Tensor[(128, 28), float32] */;
  %609 = reshape(%606, newshape=[520, 1]) /* ty=Tensor[(520, 1), int32] */;
  %610 = reshape(%607, newshape=[2100]) /* ty=Tensor[(2100), float32] */;
  %611 = reshape(%608, newshape=[3584]) /* ty=Tensor[(3584), float32] */;
  %612 = @func_5080(%609, %610, %611) /* ty=(Tensor[(1, 10, 15), float32], Tensor[(13, 4, 10), int32], Tensor[(520, 1), int32], Tensor[(2100), float32], Tensor[(224), float32], Tensor[(3584), float32]) */;
  %613 = @func_5474() /* ty=(Tensor[(3, 15, 14), float32], Tensor[(1, 10, 15), float64], Tensor[(2100, ?), uint32]) */;
  %614 = cast(meta[relay.Constant][40] /* ty=Tensor[(520, 1), int32] */, dtype="int32") /* ty=Tensor[(520, 1), int32] */;
  %615 = cast(meta[relay.Constant][40] /* ty=Tensor[(520, 1), int32] */, dtype="int32") /* ty=Tensor[(520, 1), int32] */;
  %616 = cast(%var_6327, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %617 = cast(meta[relay.Constant][42] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
  %618 = cast(meta[relay.Constant][41] /* ty=Tensor[(128, 28), float32] */, dtype="float32") /* ty=Tensor[(128, 28), float32] */;
  %619 = reshape(%614, newshape=[13, 4, 10]) /* ty=Tensor[(13, 4, 10), int32] */;
  %620 = reshape(%615, newshape=[13, 4, 10]) /* ty=Tensor[(13, 4, 10), int32] */;
  %621 = reshape(%616, newshape=[2100]) /* ty=Tensor[(2100), float32] */;
  %622 = reshape(%617, newshape=[224]) /* ty=Tensor[(224), float32] */;
  %623 = reshape(%618, newshape=[3584]) /* ty=Tensor[(3584), float32] */;
  %624 = @func_2794(%619, %620, %621, %622, %623) /* ty=(Tensor[(13, 4, 10), int32], Tensor[(15, 10, 14), float64], Tensor[(2100), float32], Tensor[(540), float64], Tensor[(224), float32], Tensor[(3584), float32], Tensor[(540), float64], Tensor[(15, 10, 14), bool]) */;
  %625 = cast(meta[relay.Constant][41] /* ty=Tensor[(128, 28), float32] */, dtype="float32") /* ty=Tensor[(128, 28), float32] */;
  %626 = reshape(%625, newshape=[3584]) /* ty=Tensor[(3584), float32] */;
  %627 = @func_4881(%626) /* ty=(Tensor[(15, 9, 6), uint16], Tensor[(810), uint16], Tensor[(1, 10, 15), float32], Tensor[(1, 2100), float32], Tensor[(16, 14), float32], Tensor[(3584), float32], Tensor[(540), float64]) */;
  %628 = cast(%var_6345, dtype="float64") /* ty=Tensor[(1560), float64] */;
  %629 = reshape(%628, newshape=[15, 8, 13]) /* ty=Tensor[(15, 8, 13), float64] */;
  %630 = %605.0;
  %631 = %612.0;
  %632 = %613.1;
  %633 = %624.1;
  %634 = %627.6;
  %635 = @func_2229(%629) /* ty=Tensor[(15, 8, 13), float32] */;
  (%630, %631, meta[relay.Constant][40] /* ty=Tensor[(520, 1), int32] */, %var_6327, meta[relay.Constant][41] /* ty=Tensor[(128, 28), float32] */, %632, %633, meta[relay.Constant][42] /* ty=Tensor[(224), float32] */, %634, %635, %var_6345)
}

def @func_5870(%var_5841: Tensor[(3, 15, 14), float32]) -> (Tensor[(3, 15, 14), bool], Tensor[(3584), float32], Tensor[(3584), float32]) {
  %636 = @func_5361() /* ty=Tensor[(3, 15, 14), float32] */;
  %637 = cast(%var_5841, dtype="bool") /* ty=Tensor[(3, 15, 14), bool] */;
  %638 = shape_of(%636, dtype="int32") /* ty=Tensor[(3), int32] */;
  %639 = cast(%636, dtype="bool") /* ty=Tensor[(3, 15, 14), bool] */;
  %640 = dyn.reshape(%637, %638, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %641 = cast(meta[relay.Constant][43] /* ty=Tensor[(3584), float32] */, dtype="float32") /* ty=Tensor[(3584), float32] */;
  %642 = reshape(%641, newshape=[3584]) /* ty=Tensor[(3584), float32] */;
  %643 = @func_5788(%642) /* ty=(Tensor[(?, 10, 15), int8], Tensor[(1, 2100), float32], Tensor[(3584), float32], Tensor[(?, 10, 15), int8]) */;
  %644 = equal(%639, %640) /* ty=Tensor[(3, 15, 14), bool] */;
  %645 = %643.2;
  (%644, %645, meta[relay.Constant][43] /* ty=Tensor[(3584), float32] */)
}

def @func_6642() -> (Tensor[(1, 10, 15), float64],) {
  %646 = @func_4854() /* ty=Tensor[(1, 10, 15), float64] */;
  (%646,)
}

def @func_5474() -> (Tensor[(3, 15, 14), float32], Tensor[(1, 10, 15), float64], Tensor[(2100, ?), uint32]) {
  %647 = @func_5319() /* ty=(Tensor[(1, 10, 15), float64],) */;
  %648 = cast(meta[relay.Constant][44] /* ty=Tensor[(2100, 1), float32] */, dtype="float32") /* ty=Tensor[(2100, 1), float32] */;
  %649 = cast(meta[relay.Constant][44] /* ty=Tensor[(2100, 1), float32] */, dtype="int64") /* ty=Tensor[(2100, 1), int64] */;
  %650 = cast(meta[relay.Constant][44] /* ty=Tensor[(2100, 1), float32] */, dtype="float32") /* ty=Tensor[(2100, 1), float32] */;
  %651 = reshape(%648, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), float32] */;
  %652 = reshape(%649, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), int64] */;
  %653 = reshape(%650, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), float32] */;
  %654 = @func_140(%651, %652, %653) /* ty=(Tensor[(15, 10, 14), bool], Tensor[(15, 10, 14), float64], Tensor[(15, 10, 14), float64], Tensor[(15, 10, 14), float32]) */;
  %655 = %654.2;
  %656 = cast(%655, dtype="uint32") /* ty=Tensor[(15, 10, 14), uint32] */;
  %657 = shape_of(meta[relay.Constant][44] /* ty=Tensor[(2100, 1), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %658 = cast(meta[relay.Constant][44] /* ty=Tensor[(2100, 1), float32] */, dtype="uint32") /* ty=Tensor[(2100, 1), uint32] */;
  %659 = dyn.reshape(%656, %657, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %660 = @func_5361() /* ty=Tensor[(3, 15, 14), float32] */;
  %661 = %647.0;
  %662 = bitwise_xor(%658, %659) /* ty=Tensor[(2100, ?), uint32] */;
  (%660, %661, %662)
}

def @func_4624(%var_4596: Tensor[(520), int32], %var_4597: Tensor[(2100), float32], %var_4599: Tensor[(3584), float32], %var_4610: Tensor[(2080), float32], %var_4612: Tensor[(48, 80), float32]) -> (Tensor[(1, 10, 15), float32], Tensor[(3584), float32], Tensor[(520), int32], Tensor[(224), float32], Tensor[(3584), float32], Tensor[(15, 9, 6), uint16], Tensor[(810), uint16], Tensor[(2080), float32], Tensor[(540), float64], Tensor[(48, 80), float32], Tensor[(2100), float32]) {
  %663 = @func_4530() /* ty=(Tensor[(1, 10, 15), float32], Tensor[(1, 10, 15), float64]) */;
  %664 = cast(%var_4596, dtype="int32") /* ty=Tensor[(520), int32] */;
  %665 = cast(%var_4596, dtype="int32") /* ty=Tensor[(520), int32] */;
  %666 = cast(%var_4597, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %667 = cast(meta[relay.Constant][45] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
  %668 = cast(%var_4599, dtype="float32") /* ty=Tensor[(3584), float32] */;
  %669 = reshape(%664, newshape=[13, 4, 10]) /* ty=Tensor[(13, 4, 10), int32] */;
  %670 = reshape(%665, newshape=[13, 4, 10]) /* ty=Tensor[(13, 4, 10), int32] */;
  %671 = reshape(%666, newshape=[2100]) /* ty=Tensor[(2100), float32] */;
  %672 = reshape(%667, newshape=[224]) /* ty=Tensor[(224), float32] */;
  %673 = reshape(%668, newshape=[3584]) /* ty=Tensor[(3584), float32] */;
  %674 = @func_2794(%669, %670, %671, %672, %673) /* ty=(Tensor[(13, 4, 10), int32], Tensor[(15, 10, 14), float64], Tensor[(2100), float32], Tensor[(540), float64], Tensor[(224), float32], Tensor[(3584), float32], Tensor[(540), float64], Tensor[(15, 10, 14), bool]) */;
  %675 = cast(meta[relay.Constant][46] /* ty=Tensor[(810), uint16] */, dtype="uint16") /* ty=Tensor[(810), uint16] */;
  %676 = reshape(%675, newshape=[15, 9, 6]) /* ty=Tensor[(15, 9, 6), uint16] */;
  %677 = cast(%var_4610, dtype="float32") /* ty=Tensor[(2080), float32] */;
  %678 = cast(meta[relay.Constant][47] /* ty=Tensor[(540), float64] */, dtype="float64") /* ty=Tensor[(540), float64] */;
  %679 = cast(%var_4597, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %680 = cast(%var_4612, dtype="float32") /* ty=Tensor[(48, 80), float32] */;
  %681 = reshape(%677, newshape=[16, 10, 13]) /* ty=Tensor[(16, 10, 13), float32] */;
  %682 = reshape(%678, newshape=[540]) /* ty=Tensor[(540), float64] */;
  %683 = reshape(%679, newshape=[2100]) /* ty=Tensor[(2100), float32] */;
  %684 = reshape(%680, newshape=[3840]) /* ty=Tensor[(3840), float32] */;
  %685 = @func_1973(%681, %682, %683, %684) /* ty=(Tensor[(16, 10, 13), float32], Tensor[(9, 12, 5), float64], Tensor[(540), float64], Tensor[(2100), float32], Tensor[(2100), float32], Tensor[(3840), float32], Tensor[(15, 10, 14), float64]) */;
  %686 = %685.3;
  %687 = cast(%686, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %688 = shape_of(%var_4597, dtype="int32") /* ty=Tensor[(1), int32] */;
  %689 = cast(%var_4597, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %690 = dyn.reshape(%687, %688, newshape=[]) /* ty=Tensor[(?), float32] */;
  %691 = %663.0;
  %692 = %674.5;
  %693 = @func_3607(%676) /* ty=Tensor[(15, 9, 6), uint16] */;
  %694 = power(%689, %690) /* ty=Tensor[(2100), float32] */;
  (%691, %692, %var_4596, meta[relay.Constant][45] /* ty=Tensor[(224), float32] */, %var_4599, %693, meta[relay.Constant][46] /* ty=Tensor[(810), uint16] */, %var_4610, meta[relay.Constant][47] /* ty=Tensor[(540), float64] */, %var_4612, %694)
}

def @func_8673() -> (Tensor[(1, 10, 15), float64],) {
  %695 = @func_4854() /* ty=Tensor[(1, 10, 15), float64] */;
  (%695,)
}

def @main(%var_9768: Tensor[(14, 10, 15), float64]) -> (Tensor[(3840), float32], Tensor[(2100), int64], Tensor[(14, 10, 15), bool], Tensor[(2100, ?), float64]) {
  %696 = cast(meta[relay.Constant][48] /* ty=Tensor[(3840), float32] */, dtype="float32") /* ty=Tensor[(3840), float32] */;
  %697 = cast(meta[relay.Constant][48] /* ty=Tensor[(3840), float32] */, dtype="float32") /* ty=Tensor[(3840), float32] */;
  %698 = @func_6264() /* ty=(Tensor[(2100, ?), uint32],) */;
  %699 = %698.0;
  %700 = cast(%699, dtype="float32") /* ty=Tensor[(2100, ?), float32] */;
  %701 = reshape(%696, newshape=[16, 15, 16]) /* ty=Tensor[(16, 15, 16), float32] */;
  %702 = reshape(%697, newshape=[16, 15, 16]) /* ty=Tensor[(16, 15, 16), float32] */;
  %703 = reshape(%700, newshape=[2100]) /* ty=Tensor[(2100), float32] */;
  %704 = @func_1776(%701, %702, %703) /* ty=(Tensor[(16, 15, 16), bool], Tensor[(1, 2100), float32], Tensor[(2100), float32], Tensor[(54, 10), float32]) */;
  %705 = %704.2;
  %706 = cast(%699, dtype="int64") /* ty=Tensor[(2100, ?), int64] */;
  %707 = shape_of(%705, dtype="int32") /* ty=Tensor[(1), int32] */;
  %708 = cast(%705, dtype="int64") /* ty=Tensor[(2100), int64] */;
  %709 = dyn.reshape(%706, %707, newshape=[]) /* ty=Tensor[(?), int64] */;
  %710 = @func_9369() /* ty=(Tensor[(3, 15, 14), float32], Tensor[(1, 10, 15), float64], Tensor[(14700), uint32], Tensor[(1, 10, 15), float64], Tensor[(?, 10, 15), int8]) */;
  %711 = %710.1;
  %712 = cast(%711, dtype="bool") /* ty=Tensor[(1, 10, 15), bool] */;
  %713 = cast(%var_9768, dtype="bool") /* ty=Tensor[(14, 10, 15), bool] */;
  %714 = cast(%699, dtype="float64") /* ty=Tensor[(2100, ?), float64] */;
  %715 = bitwise_xor(%708, %709) /* ty=Tensor[(2100), int64] */;
  %716 = not_equal(%712, %713) /* ty=Tensor[(14, 10, 15), bool] */;
  %717 = sigmoid(%714) /* ty=Tensor[(2100, ?), float64] */;
  (meta[relay.Constant][48] /* ty=Tensor[(3840), float32] */, %715, %716, %717)
}

def @func_9670() -> (Tensor[(540), float64], Tensor[(3, 15, 14), float32]) {
  %718 = @func_5118() /* ty=(Tensor[(1, 10, 15), float64], Tensor[(540), float64], Tensor[(3584), float32]) */;
  %719 = %718.1;
  %720 = @func_8323() /* ty=Tensor[(3, 15, 14), float32] */;
  (%719, %720)
}

def @func_6021(%var_6014: Tensor[(8, 9, 3), uint16]) -> Tensor[(8, 9, 3), uint16] {
  %721 = cast(%var_6014, dtype="uint16") /* ty=Tensor[(8, 9, 3), uint16] */;
  %722 = shape_of(meta[relay.Constant][49] /* ty=Tensor[(8, 9, 3), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %723 = cast(meta[relay.Constant][49] /* ty=Tensor[(8, 9, 3), uint16] */, dtype="uint16") /* ty=Tensor[(8, 9, 3), uint16] */;
  %724 = dyn.reshape(%721, %722, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_or(%723, %724) /* ty=Tensor[(8, 9, 3), uint16] */
}

def @func_6798(%var_6761: Tensor[(891), uint64], %var_6771: Tensor[(3584), float32], %var_6772: Tensor[(2080), float32], %var_6779: Tensor[(546), float64]) -> (Tensor[(5, 6), float32], Tensor[(3, 15, 14), float32], Tensor[(9, 11, 9), uint64], Tensor[(891), uint64], Tensor[(15, 9, 6), uint16], Tensor[(520), int32], Tensor[(2100), float32], Tensor[(3584), float32], Tensor[(2080), float32], Tensor[(3840), float32], Tensor[(2400), float64], Tensor[(13, 3, 14), bool], Tensor[(1, 10, 15), float64]) {
  %725 = @func_6686() /* ty=(Tensor[(1, 10, 15), float64], Tensor[(5, 6), float32], Tensor[(30), float32]) */;
  %726 = cast(%var_6761, dtype="uint64") /* ty=Tensor[(891), uint64] */;
  %727 = cast(%var_6761, dtype="uint64") /* ty=Tensor[(891), uint64] */;
  %728 = reshape(%726, newshape=[9, 11, 9]) /* ty=Tensor[(9, 11, 9), uint64] */;
  %729 = reshape(%727, newshape=[9, 11, 9]) /* ty=Tensor[(9, 11, 9), uint64] */;
  %730 = cast(meta[relay.Constant][50] /* ty=Tensor[(520), int32] */, dtype="int32") /* ty=Tensor[(520), int32] */;
  %731 = cast(meta[relay.Constant][51] /* ty=Tensor[(2100), float32] */, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %732 = cast(%var_6771, dtype="float32") /* ty=Tensor[(3584), float32] */;
  %733 = cast(%var_6772, dtype="float32") /* ty=Tensor[(2080), float32] */;
  %734 = cast(meta[relay.Constant][52] /* ty=Tensor[(3840), float32] */, dtype="float32") /* ty=Tensor[(3840), float32] */;
  %735 = reshape(%730, newshape=[520]) /* ty=Tensor[(520), int32] */;
  %736 = reshape(%731, newshape=[2100]) /* ty=Tensor[(2100), float32] */;
  %737 = reshape(%732, newshape=[3584]) /* ty=Tensor[(3584), float32] */;
  %738 = reshape(%733, newshape=[2080]) /* ty=Tensor[(2080), float32] */;
  %739 = reshape(%734, newshape=[48, 80]) /* ty=Tensor[(48, 80), float32] */;
  %740 = @func_4624(%735, %736, %737, %738, %739) /* ty=(Tensor[(1, 10, 15), float32], Tensor[(3584), float32], Tensor[(520), int32], Tensor[(224), float32], Tensor[(3584), float32], Tensor[(15, 9, 6), uint16], Tensor[(810), uint16], Tensor[(2080), float32], Tensor[(540), float64], Tensor[(48, 80), float32], Tensor[(2100), float32]) */;
  %741 = cast(%var_6779, dtype="float64") /* ty=Tensor[(546), float64] */;
  %742 = cast(meta[relay.Constant][53] /* ty=Tensor[(2400), float64] */, dtype="float64") /* ty=Tensor[(2400), float64] */;
  %743 = reshape(%741, newshape=[546]) /* ty=Tensor[(546), float64] */;
  %744 = reshape(%742, newshape=[16, 10, 15]) /* ty=Tensor[(16, 10, 15), float64] */;
  %745 = @func_5553(%743, %744) /* ty=(Tensor[(1, 10, 15), float64], Tensor[(?, 10, 15), float64], Tensor[(1, 2100), float32], Tensor[(3584), float32], Tensor[(13, 3, 14), float64], Tensor[(546), float64], Tensor[(16, 10, 15), float64]) */;
  %746 = %745.4;
  %747 = cast(%var_6779, dtype="bool") /* ty=Tensor[(546), bool] */;
  %748 = shape_of(%746, dtype="int32") /* ty=Tensor[(3), int32] */;
  %749 = cast(%746, dtype="bool") /* ty=Tensor[(13, 3, 14), bool] */;
  %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %751 = @func_5319() /* ty=(Tensor[(1, 10, 15), float64],) */;
  %752 = %725.1;
  %753 = @func_5361() /* ty=Tensor[(3, 15, 14), float32] */;
  %754 = @func_3072(%728, %729) /* ty=Tensor[(9, 11, 9), uint64] */;
  %755 = %740.5;
  %756 = logical_or(%749, %750) /* ty=Tensor[(13, 3, 14), bool] */;
  %757 = %751.0;
  (%752, %753, %754, %var_6761, %755, meta[relay.Constant][50] /* ty=Tensor[(520), int32] */, meta[relay.Constant][51] /* ty=Tensor[(2100), float32] */, %var_6771, %var_6772, meta[relay.Constant][52] /* ty=Tensor[(3840), float32] */, meta[relay.Constant][53] /* ty=Tensor[(2400), float64] */, %756, %757)
}

def @func_9225() -> (Tensor[(3, 15, 14), float32],) {
  %758 = @func_9204() /* ty=Tensor[(3, 15, 14), float32] */;
  (%758,)
}

def @func_6962(%var_6956: Tensor[(2100, 16), uint32]) -> Tensor[(2100, 16), float32] {
  %759 = @func_6264() /* ty=(Tensor[(2100, ?), uint32],) */;
  %760 = %759.0;
  %761 = cast(%760, dtype="float32") /* ty=Tensor[(2100, ?), float32] */;
  %762 = cast(%var_6956, dtype="float32") /* ty=Tensor[(2100, 16), float32] */;
  mod(%761, %762) /* ty=Tensor[(2100, 16), float32] */
}

def @func_9320() -> (Tensor[(3, 15, 14), float32],) {
  %763 = @func_6106() /* ty=Tensor[(3, 15, 14), float32] */;
  (%763,)
}

def @func_7628() -> (Tensor[(540), float64], Tensor[(14, 10, 15), int64]) {
  %764 = @func_5118() /* ty=(Tensor[(1, 10, 15), float64], Tensor[(540), float64], Tensor[(3584), float32]) */;
  %765 = @func_7264() /* ty=Tensor[(1, 10, 15), float64] */;
  %766 = cast(%765, dtype="uint64") /* ty=Tensor[(1, 10, 15), uint64] */;
  %767 = cast(meta[relay.Constant][54] /* ty=Tensor[(14, 10, 15), float64] */, dtype="uint64") /* ty=Tensor[(14, 10, 15), uint64] */;
  %768 = add(%766, %767) /* ty=Tensor[(14, 10, 15), uint64] */;
  %769 = cast(%768, dtype="int64") /* ty=Tensor[(14, 10, 15), int64] */;
  %770 = cast(%765, dtype="int64") /* ty=Tensor[(1, 10, 15), int64] */;
  %771 = %764.1;
  %772 = multiply(%769, %770) /* ty=Tensor[(14, 10, 15), int64] */;
  (%771, %772)
}

def @func_5835(%var_5832: Tensor[(3, 15, 3), float32]) -> Tensor[(3, 15, 3), float32] {
  %773 = cast(%var_5832, dtype="float32") /* ty=Tensor[(3, 15, 3), float32] */;
  acosh(%773) /* ty=Tensor[(3, 15, 3), float32] */
}

def @func_4191(%var_4159: Tensor[(14, 11, 8), uint32], %var_4171: Tensor[(3840), float32], %var_4172: Tensor[(2100), float32]) -> (Tensor[(14, 11, 8), float32], Tensor[(2100), float32], Tensor[(3840), float32], Tensor[(2100), float32], Tensor[(14, 11, 8), float32]) {
  %774 = cast(%var_4159, dtype="uint32") /* ty=Tensor[(14, 11, 8), uint32] */;
  %775 = shape_of(meta[relay.Constant][55] /* ty=Tensor[(14, 11, 8), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %776 = cast(meta[relay.Constant][55] /* ty=Tensor[(14, 11, 8), uint32] */, dtype="uint32") /* ty=Tensor[(14, 11, 8), uint32] */;
  %777 = dyn.reshape(%774, %775, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %778 = bitwise_xor(%776, %777) /* ty=Tensor[(14, 11, 8), uint32] */;
  %779 = cast(%778, dtype="float32") /* ty=Tensor[(14, 11, 8), float32] */;
  %780 = cast(%var_4171, dtype="float32") /* ty=Tensor[(3840), float32] */;
  %781 = cast(%var_4171, dtype="float32") /* ty=Tensor[(3840), float32] */;
  %782 = cast(%var_4172, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %783 = reshape(%780, newshape=[16, 15, 16]) /* ty=Tensor[(16, 15, 16), float32] */;
  %784 = reshape(%781, newshape=[16, 15, 16]) /* ty=Tensor[(16, 15, 16), float32] */;
  %785 = reshape(%782, newshape=[2100]) /* ty=Tensor[(2100), float32] */;
  %786 = @func_1776(%783, %784, %785) /* ty=(Tensor[(16, 15, 16), bool], Tensor[(1, 2100), float32], Tensor[(2100), float32], Tensor[(54, 10), float32]) */;
  %787 = cast(%var_4159, dtype="float32") /* ty=Tensor[(14, 11, 8), float32] */;
  %788 = acosh(%779) /* ty=Tensor[(14, 11, 8), float32] */;
  %789 = %786.2;
  %790 = tan(%787) /* ty=Tensor[(14, 11, 8), float32] */;
  (%788, %789, %var_4171, %var_4172, %790)
}

def @func_6096() -> (Tensor[(1, 10, 15), float64], Tensor[(3, 15, 14), float32]) {
  %791 = @func_4854() /* ty=Tensor[(1, 10, 15), float64] */;
  %792 = @func_5394() /* ty=Tensor[(3, 15, 14), float32] */;
  (%791, %792)
}

def @func_7225(%var_7208: Tensor[(2100), float32], %var_7209: Tensor[(224), float32], %var_7210: Tensor[(3584), float32]) -> (Tensor[(3, 15, 14), float64], Tensor[(2100), float32], Tensor[(520), int32], Tensor[(2100), float32], Tensor[(224), float32], Tensor[(3584), float32]) {
  %793 = @func_6526() /* ty=(Tensor[(3, 15, 14), float64],) */;
  %794 = cast(meta[relay.Constant][56] /* ty=Tensor[(520), int32] */, dtype="int32") /* ty=Tensor[(520), int32] */;
  %795 = cast(meta[relay.Constant][56] /* ty=Tensor[(520), int32] */, dtype="int32") /* ty=Tensor[(520), int32] */;
  %796 = cast(%var_7208, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %797 = cast(%var_7209, dtype="float32") /* ty=Tensor[(224), float32] */;
  %798 = cast(%var_7210, dtype="float32") /* ty=Tensor[(3584), float32] */;
  %799 = reshape(%794, newshape=[13, 4, 10]) /* ty=Tensor[(13, 4, 10), int32] */;
  %800 = reshape(%795, newshape=[13, 4, 10]) /* ty=Tensor[(13, 4, 10), int32] */;
  %801 = reshape(%796, newshape=[2100]) /* ty=Tensor[(2100), float32] */;
  %802 = reshape(%797, newshape=[224]) /* ty=Tensor[(224), float32] */;
  %803 = reshape(%798, newshape=[3584]) /* ty=Tensor[(3584), float32] */;
  %804 = @func_2794(%799, %800, %801, %802, %803) /* ty=(Tensor[(13, 4, 10), int32], Tensor[(15, 10, 14), float64], Tensor[(2100), float32], Tensor[(540), float64], Tensor[(224), float32], Tensor[(3584), float32], Tensor[(540), float64], Tensor[(15, 10, 14), bool]) */;
  %805 = cast(%var_7210, dtype="float32") /* ty=Tensor[(3584), float32] */;
  %806 = %793.0;
  %807 = %804.2;
  %808 = acos(%805) /* ty=Tensor[(3584), float32] */;
  (%806, %807, meta[relay.Constant][56] /* ty=Tensor[(520), int32] */, %var_7208, %var_7209, %808)
}

def @func_5663(%var_5658: Tensor[(1, 11, 14), float32]) -> Tensor[(1, 11, 14), float32] {
  %809 = cast(%var_5658, dtype="float32") /* ty=Tensor[(1, 11, 14), float32] */;
  asinh(%809) /* ty=Tensor[(1, 11, 14), float32] */
}

def @func_6608(%var_6603: Tensor[(2100, 7), uint32]) -> (Tensor[(1, 10, 15), float64], Tensor[(2100, 7), bool]) {
  %810 = @func_6264() /* ty=(Tensor[(2100, ?), uint32],) */;
  %811 = %810.0;
  %812 = cast(%811, dtype="bool") /* ty=Tensor[(2100, ?), bool] */;
  %813 = cast(%var_6603, dtype="bool") /* ty=Tensor[(2100, 7), bool] */;
  %814 = @func_4854() /* ty=Tensor[(1, 10, 15), float64] */;
  %815 = greater(%812, %813) /* ty=Tensor[(2100, 7), bool] */;
  (%814, %815)
}

def @func_6526() -> (Tensor[(3, 15, 14), float64],) {
  %816 = @func_5474() /* ty=(Tensor[(3, 15, 14), float32], Tensor[(1, 10, 15), float64], Tensor[(2100, ?), uint32]) */;
  %817 = %816.0;
  %818 = cast(%817, dtype="float64") /* ty=Tensor[(3, 15, 14), float64] */;
  %819 = sin(%818) /* ty=Tensor[(3, 15, 14), float64] */;
  (%819,)
}

def @func_1824(%var_1802: Tensor[(14, 1, 16), float32], %var_1805: Tensor[(14, 16, 16), float32], %var_1812: Tensor[(540), float64]) -> (Tensor[(14, 16, 16), float64], Tensor[(1, 2100), float32], Tensor[(540), float64], Tensor[(2100), float32]) {
  %820 = cast(%var_1802, dtype="float32") /* ty=Tensor[(14, 1, 16), float32] */;
  %821 = cos(%820) /* ty=Tensor[(14, 1, 16), float32] */;
  %822 = cast(%821, dtype="float64") /* ty=Tensor[(14, 1, 16), float64] */;
  %823 = cast(%var_1805, dtype="float64") /* ty=Tensor[(14, 16, 16), float64] */;
  %824 = cast(%var_1812, dtype="float64") /* ty=Tensor[(540), float64] */;
  %825 = cast(meta[relay.Constant][57] /* ty=Tensor[(2100), float32] */, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %826 = reshape(%824, newshape=[9, 12, 5]) /* ty=Tensor[(9, 12, 5), float64] */;
  %827 = reshape(%825, newshape=[1, 2100]) /* ty=Tensor[(1, 2100), float32] */;
  %828 = @func_306(%826, %827) /* ty=(Tensor[(9, 12, 5), float64], Tensor[(15, 10, 14), bool], Tensor[(1, 2100), float32]) */;
  %829 = mod(%822, %823) /* ty=Tensor[(14, 16, 16), float64] */;
  %830 = %828.2;
  (%829, %830, %var_1812, meta[relay.Constant][57] /* ty=Tensor[(2100), float32] */)
}

def @func_3758(%var_3739: Tensor[(13, 3, 14), float64], %var_3740: Tensor[(13, 3, 14), float64]) -> (Tensor[(13, 3, 14), float64],) {
  %831 = cast(%var_3740, dtype="float64") /* ty=Tensor[(13, 3, 14), float64] */;
  %832 = shape_of(%var_3739, dtype="int32") /* ty=Tensor[(3), int32] */;
  %833 = cast(%var_3739, dtype="float64") /* ty=Tensor[(13, 3, 14), float64] */;
  %834 = dyn.reshape(%831, %832, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %835 = divide(%833, %834) /* ty=Tensor[(13, 3, 14), float64] */;
  (%835,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_3075(%var_3073: Tensor[(9, 11, 9), uint64], %var_3074: Tensor[(9, 11, 9), uint64]) -> Tensor[(9, 11, 9), uint64] {
  %4 = fn (%var_3053: Tensor[(9, 11, 9), uint64], %var_3054: Tensor[(9, 11, 9), uint64]) -> Tensor[(9, 11, 9), uint64] {
    %0 = cast(%var_3054, dtype="uint64") /* ty=Tensor[(9, 11, 9), uint64] */;
    %1 = shape_of(%var_3053, dtype="int32") /* ty=Tensor[(3), int32] */;
    %2 = cast(%var_3053, dtype="uint64") /* ty=Tensor[(9, 11, 9), uint64] */;
    %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    multiply(%2, %3) /* ty=Tensor[(9, 11, 9), uint64] */
  };
  %4(%var_3073, %var_3074) /* ty=Tensor[(9, 11, 9), uint64] */
}

def @func_5373() -> (Tensor[(?, 10, 15), int8],) {
  %7 = fn () -> (Tensor[(?, 10, 15), int8],) {
    %5 = @func_5257() /* ty=(Tensor[(?, 10, 15), int8],) */;
    %6 = %5.0;
    (%6,)
  };
  %7() /* ty=(Tensor[(?, 10, 15), int8],) */
}

def @func_5666(%var_5664: Tensor[(1, 11, 14), float32]) -> Tensor[(1, 11, 14), float32] {
  @func_5663(%var_5664) /* ty=Tensor[(1, 11, 14), float32] */
}

def @func_6106() -> Tensor[(3, 15, 14), float32] {
  @func_5361() /* ty=Tensor[(3, 15, 14), float32] */
}

def @func_6845(%var_6842: Tensor[(14, 3, 11), float64], %var_6843: Tensor[(14, 3, 11), float64], %var_6844: Tensor[(135), float32]) -> (Tensor[(14, 3, 11), float64], Tensor[(?, 10, 15), int8], Tensor[(3, 15, 3), float32], Tensor[(18, 6), float64], Tensor[(135), float32]) {
  %22 = fn (%var_6809: Tensor[(14, 3, 11), float64], %var_6815: Tensor[(14, 3, 11), float64], %var_6826: Tensor[(135), float32]) -> (Tensor[(14, 3, 11), float64], Tensor[(?, 10, 15), int8], Tensor[(3, 15, 3), float32], Tensor[(18, 6), float64], Tensor[(135), float32]) {
    %8 = cast(%var_6809, dtype="float64") /* ty=Tensor[(14, 3, 11), float64] */;
    %9 = log2(%8) /* ty=Tensor[(14, 3, 11), float64] */;
    %10 = cast(%var_6815, dtype="float64") /* ty=Tensor[(14, 3, 11), float64] */;
    %11 = shape_of(%9, dtype="int32") /* ty=Tensor[(3), int32] */;
    %12 = cast(%9, dtype="float64") /* ty=Tensor[(14, 3, 11), float64] */;
    %13 = dyn.reshape(%10, %11, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %14 = cast(meta[relay.Constant][0] /* ty=Tensor[(18, 6), float64] */, dtype="float64") /* ty=Tensor[(18, 6), float64] */;
    %15 = cast(%var_6826, dtype="float32") /* ty=Tensor[(135), float32] */;
    %16 = reshape(%14, newshape=[6, 2, 9]) /* ty=Tensor[(6, 2, 9), float64] */;
    %17 = reshape(%15, newshape=[135]) /* ty=Tensor[(135), float32] */;
    %18 = @func_6136(%16, %17) /* ty=(Tensor[(6, 2, 9), float64], Tensor[(3, 15, 3), float32], Tensor[(135), float32]) */;
    %19 = add(%12, %13) /* ty=Tensor[(14, 3, 11), float64] */;
    %20 = @func_5016() /* ty=Tensor[(?, 10, 15), int8] */;
    %21 = %18.1;
    (%19, %20, %21, meta[relay.Constant][0] /* ty=Tensor[(18, 6), float64] */, %var_6826)
  };
  %22(%var_6842, %var_6843, %var_6844) /* ty=(Tensor[(14, 3, 11), float64], Tensor[(?, 10, 15), int8], Tensor[(3, 15, 3), float32], Tensor[(18, 6), float64], Tensor[(135), float32]) */
}

def @func_8901(%var_8899: Tensor[(891), uint64]) -> (Tensor[(9, 11, 9), uint64], Tensor[(891), uint64], Tensor[(?, 10, 15), bool], Tensor[(11, 16, 2), float32]) {
  @func_8898(%var_8899) /* ty=(Tensor[(9, 11, 9), uint64], Tensor[(891), uint64], Tensor[(?, 10, 15), bool], Tensor[(11, 16, 2), float32]) */
}

def @func_3241(%var_3240: Tensor[(5, 6), float32]) -> (Tensor[(5, 6), float32], Tensor[(9, 11, 9), uint64], Tensor[(99, 9), uint64]) {
  %30 = fn (%var_3231: Tensor[(5, 6), float32]) -> (Tensor[(5, 6), float32], Tensor[(9, 11, 9), uint64], Tensor[(99, 9), uint64]) {
    %23 = cast(%var_3231, dtype="float32") /* ty=Tensor[(5, 6), float32] */;
    %24 = cast(meta[relay.Constant][1] /* ty=Tensor[(99, 9), uint64] */, dtype="uint64") /* ty=Tensor[(99, 9), uint64] */;
    %25 = cast(meta[relay.Constant][1] /* ty=Tensor[(99, 9), uint64] */, dtype="uint64") /* ty=Tensor[(99, 9), uint64] */;
    %26 = reshape(%24, newshape=[9, 11, 9]) /* ty=Tensor[(9, 11, 9), uint64] */;
    %27 = reshape(%25, newshape=[9, 11, 9]) /* ty=Tensor[(9, 11, 9), uint64] */;
    %28 = log(%23) /* ty=Tensor[(5, 6), float32] */;
    %29 = @func_3072(%26, %27) /* ty=Tensor[(9, 11, 9), uint64] */;
    (%28, %29, meta[relay.Constant][1] /* ty=Tensor[(99, 9), uint64] */)
  };
  %30(%var_3240) /* ty=(Tensor[(5, 6), float32], Tensor[(9, 11, 9), uint64], Tensor[(99, 9), uint64]) */
}

def @func_7187(%var_7185: Tensor[(546), float64]) -> (Tensor[(?, 10, 15), float32], Tensor[(13, 3, 14), float64], Tensor[(546), float64]) {
  @func_7184(%var_7185) /* ty=(Tensor[(?, 10, 15), float32], Tensor[(13, 3, 14), float64], Tensor[(546), float64]) */
}

def @func_6527() -> (Tensor[(3, 15, 14), float64],) {
  %35 = fn () -> (Tensor[(3, 15, 14), float64],) {
    %31 = @func_5474() /* ty=(Tensor[(3, 15, 14), float32], Tensor[(1, 10, 15), float64], Tensor[(2100, ?), uint32]) */;
    %32 = %31.0;
    %33 = cast(%32, dtype="float64") /* ty=Tensor[(3, 15, 14), float64] */;
    %34 = sin(%33) /* ty=Tensor[(3, 15, 14), float64] */;
    (%34,)
  };
  %35() /* ty=(Tensor[(3, 15, 14), float64],) */
}

def @func_6962(%var_6956: Tensor[(2100, 16), uint32]) -> Tensor[(2100, 16), float32] {
  %36 = @func_6264() /* ty=(Tensor[(2100, ?), uint32],) */;
  %37 = %36.0;
  %38 = cast(%37, dtype="float32") /* ty=Tensor[(2100, ?), float32] */;
  %39 = cast(%var_6956, dtype="float32") /* ty=Tensor[(2100, 16), float32] */;
  mod(%38, %39) /* ty=Tensor[(2100, 16), float32] */
}

def @func_7923() -> Tensor[(1, 10, 15), float64] {
  @func_7921() /* ty=Tensor[(1, 10, 15), float64] */
}

def @func_8395(%var_8341: Tensor[(2100), float32], %var_8347: Tensor[(3840), float32]) -> (Tensor[(3, 15, 14), float32], Tensor[(2100), float32], Tensor[(2100), float32], Tensor[(3840), float64], Tensor[(1, 10, 15), float64], Tensor[(14700), uint32], Tensor[(616, 2), uint64], Tensor[(616, 2), uint32]) {
  %40 = cast(meta[relay.Constant][2] /* ty=Tensor[(616, 2), uint32] */, dtype="uint32") /* ty=Tensor[(616, 2), uint32] */;
  %41 = cast(meta[relay.Constant][3] /* ty=Tensor[(3840), float32] */, dtype="float32") /* ty=Tensor[(3840), float32] */;
  %42 = cast(%var_8341, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %43 = reshape(%40, newshape=[14, 11, 8]) /* ty=Tensor[(14, 11, 8), uint32] */;
  %44 = reshape(%41, newshape=[3840]) /* ty=Tensor[(3840), float32] */;
  %45 = reshape(%42, newshape=[2100]) /* ty=Tensor[(2100), float32] */;
  %46 = @func_4191(%43, %44, %45) /* ty=(Tensor[(14, 11, 8), float32], Tensor[(2100), float32], Tensor[(3840), float32], Tensor[(2100), float32], Tensor[(14, 11, 8), float32]) */;
  %47 = cast(%var_8347, dtype="float64") /* ty=Tensor[(3840), float64] */;
  %48 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(3840), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %49 = cast(meta[relay.Constant][3] /* ty=Tensor[(3840), float32] */, dtype="float64") /* ty=Tensor[(3840), float64] */;
  %50 = dyn.reshape(%47, %48, newshape=[]) /* ty=Tensor[(?), float64] */;
  %51 = cast(meta[relay.Constant][4] /* ty=Tensor[(14700), uint32] */, dtype="uint32") /* ty=Tensor[(14700), uint32] */;
  %52 = reshape(%51, newshape=[2100, 7]) /* ty=Tensor[(2100, 7), uint32] */;
  %53 = @func_6608(%52) /* ty=(Tensor[(1, 10, 15), float64], Tensor[(2100, 7), bool]) */;
  %54 = cast(meta[relay.Constant][2] /* ty=Tensor[(616, 2), uint32] */, dtype="float32") /* ty=Tensor[(616, 2), float32] */;
  %55 = log(%54) /* ty=Tensor[(616, 2), float32] */;
  %56 = cast(meta[relay.Constant][2] /* ty=Tensor[(616, 2), uint32] */, dtype="int64") /* ty=Tensor[(616, 2), int64] */;
  %57 = shape_of(%55, dtype="int32") /* ty=Tensor[(2), int32] */;
  %58 = cast(%55, dtype="int64") /* ty=Tensor[(616, 2), int64] */;
  %59 = dyn.reshape(%56, %57, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %60 = bitwise_or(%58, %59) /* ty=Tensor[(616, 2), int64] */;
  %61 = cast(%60, dtype="float64") /* ty=Tensor[(616, 2), float64] */;
  %62 = erf(%61) /* ty=Tensor[(616, 2), float64] */;
  %63 = cast(%62, dtype="float64") /* ty=Tensor[(616, 2), float64] */;
  %64 = rsqrt(%63) /* ty=Tensor[(616, 2), float64] */;
  %65 = cast(%62, dtype="uint64") /* ty=Tensor[(616, 2), uint64] */;
  %66 = shape_of(%64, dtype="int32") /* ty=Tensor[(2), int32] */;
  %67 = cast(%64, dtype="uint64") /* ty=Tensor[(616, 2), uint64] */;
  %68 = dyn.reshape(%65, %66, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %69 = cast(meta[relay.Constant][2] /* ty=Tensor[(616, 2), uint32] */, dtype="float64") /* ty=Tensor[(616, 2), float64] */;
  %70 = shape_of(%60, dtype="int32") /* ty=Tensor[(2), int32] */;
  %71 = cast(%60, dtype="float64") /* ty=Tensor[(616, 2), float64] */;
  %72 = dyn.reshape(%69, %70, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %73 = floor_divide(%71, %72) /* ty=Tensor[(616, 2), float64] */;
  %74 = cast(%73, dtype="int8") /* ty=Tensor[(616, 2), int8] */;
  %75 = shape_of(%64, dtype="int32") /* ty=Tensor[(2), int32] */;
  %76 = cast(%64, dtype="int8") /* ty=Tensor[(616, 2), int8] */;
  %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %78 = minimum(%76, %77) /* ty=Tensor[(616, 2), int8] */;
  %79 = cast(%64, dtype="uint32") /* ty=Tensor[(616, 2), uint32] */;
  %80 = shape_of(%78, dtype="int32") /* ty=Tensor[(2), int32] */;
  %81 = cast(%78, dtype="uint32") /* ty=Tensor[(616, 2), uint32] */;
  %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %83 = @func_5361() /* ty=Tensor[(3, 15, 14), float32] */;
  %84 = %46.3;
  %85 = floor_mod(%49, %50) /* ty=Tensor[(3840), float64] */;
  %86 = %53.0;
  %87 = right_shift(%67, %68) /* ty=Tensor[(616, 2), uint64] */;
  %88 = logical_xor(%81, %82) /* ty=Tensor[(616, 2), uint32] */;
  (%83, %84, %var_8341, %85, %86, meta[relay.Constant][4] /* ty=Tensor[(14700), uint32] */, %87, %88)
}

def @func_7184(%var_7180: Tensor[(546), float64]) -> (Tensor[(?, 10, 15), float32], Tensor[(13, 3, 14), float64], Tensor[(546), float64]) {
  %89 = @func_5257() /* ty=(Tensor[(?, 10, 15), int8],) */;
  %90 = %89.0;
  %91 = cast(%90, dtype="float32") /* ty=Tensor[(?, 10, 15), float32] */;
  %92 = cast(%var_7180, dtype="float64") /* ty=Tensor[(546), float64] */;
  %93 = cast(%var_7180, dtype="float64") /* ty=Tensor[(546), float64] */;
  %94 = reshape(%92, newshape=[13, 3, 14]) /* ty=Tensor[(13, 3, 14), float64] */;
  %95 = reshape(%93, newshape=[13, 3, 14]) /* ty=Tensor[(13, 3, 14), float64] */;
  %96 = @func_3758(%94, %95) /* ty=(Tensor[(13, 3, 14), float64],) */;
  %97 = sinh(%91) /* ty=Tensor[(?, 10, 15), float32] */;
  %98 = %96.0;
  (%97, %98, %var_7180)
}

def @func_7265() -> Tensor[(1, 10, 15), float64] {
  %100 = fn () -> Tensor[(1, 10, 15), float64] {
    %99 = @func_5319() /* ty=(Tensor[(1, 10, 15), float64],) */;
    %99.0
  };
  %100() /* ty=Tensor[(1, 10, 15), float64] */
}

def @func_4751(%var_4750: Tensor[(2, 9, 1), float64]) -> (Tensor[(2, 9, 1), float64], Tensor[(3, 14, 4), bool], Tensor[(168), bool]) {
  %106 = fn (%var_4722: Tensor[(2, 9, 1), float64]) -> (Tensor[(2, 9, 1), float64], Tensor[(3, 14, 4), bool], Tensor[(168), bool]) {
    %101 = cast(%var_4722, dtype="float64") /* ty=Tensor[(2, 9, 1), float64] */;
    %102 = cast(meta[relay.Constant][5] /* ty=Tensor[(168), bool] */, dtype="bool") /* ty=Tensor[(168), bool] */;
    %103 = reshape(%102, newshape=[3, 14, 4]) /* ty=Tensor[(3, 14, 4), bool] */;
    %104 = cosh(%101) /* ty=Tensor[(2, 9, 1), float64] */;
    %105 = @func_4476(%103) /* ty=Tensor[(3, 14, 4), bool] */;
    (%104, %105, meta[relay.Constant][5] /* ty=Tensor[(168), bool] */)
  };
  %106(%var_4750) /* ty=(Tensor[(2, 9, 1), float64], Tensor[(3, 14, 4), bool], Tensor[(168), bool]) */
}

def @func_5870(%var_5841: Tensor[(3, 15, 14), float32]) -> (Tensor[(3, 15, 14), bool], Tensor[(3584), float32], Tensor[(3584), float32]) {
  %107 = @func_5361() /* ty=Tensor[(3, 15, 14), float32] */;
  %108 = cast(%var_5841, dtype="bool") /* ty=Tensor[(3, 15, 14), bool] */;
  %109 = shape_of(%107, dtype="int32") /* ty=Tensor[(3), int32] */;
  %110 = cast(%107, dtype="bool") /* ty=Tensor[(3, 15, 14), bool] */;
  %111 = dyn.reshape(%108, %109, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %112 = cast(meta[relay.Constant][6] /* ty=Tensor[(3584), float32] */, dtype="float32") /* ty=Tensor[(3584), float32] */;
  %113 = reshape(%112, newshape=[3584]) /* ty=Tensor[(3584), float32] */;
  %114 = @func_5788(%113) /* ty=(Tensor[(?, 10, 15), int8], Tensor[(1, 2100), float32], Tensor[(3584), float32], Tensor[(?, 10, 15), int8]) */;
  %115 = equal(%110, %111) /* ty=Tensor[(3, 15, 14), bool] */;
  %116 = %114.2;
  (%115, %116, meta[relay.Constant][6] /* ty=Tensor[(3584), float32] */)
}

def @func_5556(%var_5554: Tensor[(546), float64], %var_5555: Tensor[(16, 10, 15), float64]) -> (Tensor[(1, 10, 15), float64], Tensor[(?, 10, 15), float64], Tensor[(1, 2100), float32], Tensor[(3584), float32], Tensor[(13, 3, 14), float64], Tensor[(546), float64], Tensor[(16, 10, 15), float64]) {
  %137 = fn (%var_5532: Tensor[(546), float64], %var_5541: Tensor[(16, 10, 15), float64]) -> (Tensor[(1, 10, 15), float64], Tensor[(?, 10, 15), float64], Tensor[(1, 2100), float32], Tensor[(3584), float32], Tensor[(13, 3, 14), float64], Tensor[(546), float64], Tensor[(16, 10, 15), float64]) {
    %117 = @func_4530() /* ty=(Tensor[(1, 10, 15), float32], Tensor[(1, 10, 15), float64]) */;
    %118 = @func_5016() /* ty=Tensor[(?, 10, 15), int8] */;
    %119 = cast(%118, dtype="float64") /* ty=Tensor[(?, 10, 15), float64] */;
    %120 = log10(%119) /* ty=Tensor[(?, 10, 15), float64] */;
    %121 = cast(%120, dtype="float64") /* ty=Tensor[(?, 10, 15), float64] */;
    %122 = cast(meta[relay.Constant][7] /* ty=Tensor[(3584), float32] */, dtype="float32") /* ty=Tensor[(3584), float32] */;
    %123 = reshape(%122, newshape=[3584]) /* ty=Tensor[(3584), float32] */;
    %124 = @func_4881(%123) /* ty=(Tensor[(15, 9, 6), uint16], Tensor[(810), uint16], Tensor[(1, 10, 15), float32], Tensor[(1, 2100), float32], Tensor[(16, 14), float32], Tensor[(3584), float32], Tensor[(540), float64]) */;
    %125 = cast(%var_5532, dtype="float64") /* ty=Tensor[(546), float64] */;
    %126 = cast(%var_5532, dtype="float64") /* ty=Tensor[(546), float64] */;
    %127 = reshape(%125, newshape=[13, 3, 14]) /* ty=Tensor[(13, 3, 14), float64] */;
    %128 = reshape(%126, newshape=[13, 3, 14]) /* ty=Tensor[(13, 3, 14), float64] */;
    %129 = @func_3758(%127, %128) /* ty=(Tensor[(13, 3, 14), float64],) */;
    %130 = cast(%120, dtype="float64") /* ty=Tensor[(?, 10, 15), float64] */;
    %131 = cast(%var_5541, dtype="float64") /* ty=Tensor[(16, 10, 15), float64] */;
    %132 = %117.1;
    %133 = acosh(%121) /* ty=Tensor[(?, 10, 15), float64] */;
    %134 = %124.3;
    %135 = %129.0;
    %136 = subtract(%130, %131) /* ty=Tensor[(16, 10, 15), float64] */;
    (%132, %133, %134, meta[relay.Constant][7] /* ty=Tensor[(3584), float32] */, %135, %var_5532, %136)
  };
  %137(%var_5554, %var_5555) /* ty=(Tensor[(1, 10, 15), float64], Tensor[(?, 10, 15), float64], Tensor[(1, 2100), float32], Tensor[(3584), float32], Tensor[(13, 3, 14), float64], Tensor[(546), float64], Tensor[(16, 10, 15), float64]) */
}

def @func_5319() -> (Tensor[(1, 10, 15), float64],) {
  %138 = @func_4835() /* ty=Tensor[(1, 10, 15), float32] */;
  %139 = cast(%138, dtype="float64") /* ty=Tensor[(1, 10, 15), float64] */;
  %140 = cos(%139) /* ty=Tensor[(1, 10, 15), float64] */;
  (%140,)
}

def @func_9414() -> Tensor[(3, 15, 14), float32] {
  @func_9412() /* ty=Tensor[(3, 15, 14), float32] */
}

def @func_7544() -> (Tensor[(2100, ?), uint32],) {
  %143 = fn () -> (Tensor[(2100, ?), uint32],) {
    %141 = @func_6264() /* ty=(Tensor[(2100, ?), uint32],) */;
    %142 = %141.0;
    (%142,)
  };
  %143() /* ty=(Tensor[(2100, ?), uint32],) */
}

def @func_8748() -> (Tensor[(11, 16, 2), float32],) {
  %144 = @func_7650() /* ty=Tensor[(11, 16, 2), float32] */;
  (%144,)
}

def @func_6097() -> (Tensor[(1, 10, 15), float64], Tensor[(3, 15, 14), float32]) {
  %147 = fn () -> (Tensor[(1, 10, 15), float64], Tensor[(3, 15, 14), float32]) {
    %145 = @func_4854() /* ty=Tensor[(1, 10, 15), float64] */;
    %146 = @func_5394() /* ty=Tensor[(3, 15, 14), float32] */;
    (%145, %146)
  };
  %147() /* ty=(Tensor[(1, 10, 15), float64], Tensor[(3, 15, 14), float32]) */
}

def @func_8083(%var_8082: Tensor[(3, 700), float32]) -> (Tensor[(1, 1560), float32], Tensor[(9, 12, 5), float64], Tensor[(540), float64], Tensor[(3, 700), float32]) {
  %158 = fn (%var_8079: Tensor[(3, 700), float32]) -> (Tensor[(1, 1560), float32], Tensor[(9, 12, 5), float64], Tensor[(540), float64], Tensor[(3, 700), float32]) {
    %148 = @func_7707() /* ty=(Tensor[(3, 15, 14), float32], Tensor[(15, 8, 13), float32], Tensor[(1, 1560), float64]) */;
    %149 = %148.2;
    %150 = cast(%149, dtype="float32") /* ty=Tensor[(1, 1560), float32] */;
    %151 = cast(meta[relay.Constant][8] /* ty=Tensor[(540), float64] */, dtype="float64") /* ty=Tensor[(540), float64] */;
    %152 = cast(%var_8079, dtype="float32") /* ty=Tensor[(3, 700), float32] */;
    %153 = reshape(%151, newshape=[9, 12, 5]) /* ty=Tensor[(9, 12, 5), float64] */;
    %154 = reshape(%152, newshape=[1, 2100]) /* ty=Tensor[(1, 2100), float32] */;
    %155 = @func_306(%153, %154) /* ty=(Tensor[(9, 12, 5), float64], Tensor[(15, 10, 14), bool], Tensor[(1, 2100), float32]) */;
    %156 = erf(%150) /* ty=Tensor[(1, 1560), float32] */;
    %157 = %155.0;
    (%156, %157, meta[relay.Constant][8] /* ty=Tensor[(540), float64] */, %var_8079)
  };
  %158(%var_8082) /* ty=(Tensor[(1, 1560), float32], Tensor[(9, 12, 5), float64], Tensor[(540), float64], Tensor[(3, 700), float32]) */
}

def @func_7030(%var_7008: Tensor[(3, 15, 14), float32]) -> (Tensor[(3, 15, 14), uint16], Tensor[(3, 15, 14), float32], Tensor[(3, 15, 14), uint16]) {
  %159 = @func_5361() /* ty=Tensor[(3, 15, 14), float32] */;
  %160 = cast(%var_7008, dtype="uint16") /* ty=Tensor[(3, 15, 14), uint16] */;
  %161 = shape_of(%159, dtype="int32") /* ty=Tensor[(3), int32] */;
  %162 = cast(%159, dtype="uint16") /* ty=Tensor[(3, 15, 14), uint16] */;
  %163 = dyn.reshape(%160, %161, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %164 = cast(%159, dtype="float32") /* ty=Tensor[(3, 15, 14), float32] */;
  %165 = sqrt(%164) /* ty=Tensor[(3, 15, 14), float32] */;
  %166 = cast(%165, dtype="float32") /* ty=Tensor[(3, 15, 14), float32] */;
  %167 = cast(%159, dtype="uint16") /* ty=Tensor[(3, 15, 14), uint16] */;
  %168 = shape_of(%165, dtype="int32") /* ty=Tensor[(3), int32] */;
  %169 = cast(%165, dtype="uint16") /* ty=Tensor[(3, 15, 14), uint16] */;
  %170 = dyn.reshape(%167, %168, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %171 = bitwise_and(%162, %163) /* ty=Tensor[(3, 15, 14), uint16] */;
  %172 = asin(%166) /* ty=Tensor[(3, 15, 14), float32] */;
  %173 = add(%169, %170) /* ty=Tensor[(3, 15, 14), uint16] */;
  (%171, %172, %173)
}

def @func_5085(%var_5082: Tensor[(520, 1), int32], %var_5083: Tensor[(2100), float32], %var_5084: Tensor[(3584), float32]) -> (Tensor[(1, 10, 15), float32], Tensor[(13, 4, 10), int32], Tensor[(520, 1), int32], Tensor[(2100), float32], Tensor[(224), float32], Tensor[(3584), float32]) {
  @func_5080(%var_5082, %var_5083, %var_5084) /* ty=(Tensor[(1, 10, 15), float32], Tensor[(13, 4, 10), int32], Tensor[(520, 1), int32], Tensor[(2100), float32], Tensor[(224), float32], Tensor[(3584), float32]) */
}

def @func_6372(%var_6370: Tensor[(810), uint16]) -> (Tensor[(2100, ?), uint32], Tensor[(15, 9, 6), uint16], Tensor[(810), uint16]) {
  %174 = @func_6264() /* ty=(Tensor[(2100, ?), uint32],) */;
  %175 = cast(%var_6370, dtype="uint16") /* ty=Tensor[(810), uint16] */;
  %176 = reshape(%175, newshape=[15, 9, 6]) /* ty=Tensor[(15, 9, 6), uint16] */;
  %177 = %174.0;
  %178 = @func_3607(%176) /* ty=Tensor[(15, 9, 6), uint16] */;
  (%177, %178, %var_6370)
}

def @func_9078() -> Tensor[(3, 15, 14), float32] {
  @func_9076() /* ty=Tensor[(3, 15, 14), float32] */
}

def @func_9725(%var_9723: Tensor[(32, 112), float32], %var_9724: Tensor[(8, 28), float32]) -> (Tensor[(3, 15, 14), float32], Tensor[(?, 10, 15), int8], Tensor[(32, 112), float32], Tensor[(8, 28), float32], Tensor[(270, 2), float64]) {
  %188 = fn (%var_9705: Tensor[(32, 112), float32], %var_9706: Tensor[(8, 28), float32]) -> (Tensor[(3, 15, 14), float32], Tensor[(?, 10, 15), int8], Tensor[(32, 112), float32], Tensor[(8, 28), float32], Tensor[(270, 2), float64]) {
    %179 = cast(%var_9705, dtype="float32") /* ty=Tensor[(32, 112), float32] */;
    %180 = cast(%var_9706, dtype="float32") /* ty=Tensor[(8, 28), float32] */;
    %181 = cast(meta[relay.Constant][9] /* ty=Tensor[(270, 2), float64] */, dtype="float64") /* ty=Tensor[(270, 2), float64] */;
    %182 = reshape(%179, newshape=[3584]) /* ty=Tensor[(3584), float32] */;
    %183 = reshape(%180, newshape=[224]) /* ty=Tensor[(224), float32] */;
    %184 = reshape(%181, newshape=[540]) /* ty=Tensor[(540), float64] */;
    %185 = @func_8584(%182, %183, %184) /* ty=(Tensor[(?, 10, 15), int8], Tensor[(2100, 16), bool], Tensor[(3584), int32], Tensor[(14, 16, 16), float64], Tensor[(224), float32], Tensor[(540), float64]) */;
    %186 = @func_6106() /* ty=Tensor[(3, 15, 14), float32] */;
    %187 = %185.0;
    (%186, %187, %var_9705, %var_9706, meta[relay.Constant][9] /* ty=Tensor[(270, 2), float64] */)
  };
  %188(%var_9723, %var_9724) /* ty=(Tensor[(3, 15, 14), float32], Tensor[(?, 10, 15), int8], Tensor[(32, 112), float32], Tensor[(8, 28), float32], Tensor[(270, 2), float64]) */
}

def @func_4479(%var_4477: Tensor[(3, 14, 4), bool]) -> Tensor[(3, 14, 4), bool] {
  @func_4476(%var_4477) /* ty=Tensor[(3, 14, 4), bool] */
}

def @func_8399(%var_8397: Tensor[(2100), float32], %var_8398: Tensor[(3840), float32]) -> (Tensor[(3, 15, 14), float32], Tensor[(2100), float32], Tensor[(2100), float32], Tensor[(3840), float64], Tensor[(1, 10, 15), float64], Tensor[(14700), uint32], Tensor[(616, 2), uint64], Tensor[(616, 2), uint32]) {
  @func_8395(%var_8397, %var_8398) /* ty=(Tensor[(3, 15, 14), float32], Tensor[(2100), float32], Tensor[(2100), float32], Tensor[(3840), float64], Tensor[(1, 10, 15), float64], Tensor[(14700), uint32], Tensor[(616, 2), uint64], Tensor[(616, 2), uint32]) */
}

def @func_5259() -> (Tensor[(?, 10, 15), int8],) {
  @func_5257() /* ty=(Tensor[(?, 10, 15), int8],) */
}

def @func_8134(%var_8132: Tensor[(810), uint16]) -> (Tensor[(11, 16, 2), float32], Tensor[(15, 9, 6), uint16], Tensor[(810), uint16]) {
  @func_8131(%var_8132) /* ty=(Tensor[(11, 16, 2), float32], Tensor[(15, 9, 6), uint16], Tensor[(810), uint16]) */
}

def @func_8898(%var_8868: Tensor[(891), uint64]) -> (Tensor[(9, 11, 9), uint64], Tensor[(891), uint64], Tensor[(?, 10, 15), bool], Tensor[(11, 16, 2), float32]) {
  %189 = cast(%var_8868, dtype="uint64") /* ty=Tensor[(891), uint64] */;
  %190 = cast(%var_8868, dtype="uint64") /* ty=Tensor[(891), uint64] */;
  %191 = reshape(%189, newshape=[9, 11, 9]) /* ty=Tensor[(9, 11, 9), uint64] */;
  %192 = reshape(%190, newshape=[9, 11, 9]) /* ty=Tensor[(9, 11, 9), uint64] */;
  %193 = @func_7921() /* ty=Tensor[(1, 10, 15), float64] */;
  %194 = cast(%193, dtype="float32") /* ty=Tensor[(1, 10, 15), float32] */;
  %195 = tan(%194) /* ty=Tensor[(1, 10, 15), float32] */;
  %196 = cast(%193, dtype="bool") /* ty=Tensor[(1, 10, 15), bool] */;
  %197 = shape_of(%195, dtype="int32") /* ty=Tensor[(3), int32] */;
  %198 = cast(%195, dtype="bool") /* ty=Tensor[(1, 10, 15), bool] */;
  %199 = dyn.reshape(%196, %197, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %200 = @func_7650() /* ty=Tensor[(11, 16, 2), float32] */;
  %201 = cast(%200, dtype="float32") /* ty=Tensor[(11, 16, 2), float32] */;
  %202 = @func_3072(%191, %192) /* ty=Tensor[(9, 11, 9), uint64] */;
  %203 = logical_and(%198, %199) /* ty=Tensor[(?, 10, 15), bool] */;
  %204 = rsqrt(%201) /* ty=Tensor[(11, 16, 2), float32] */;
  (%202, %var_8868, %203, %204)
}

def @func_7447(%var_7446: Tensor[(891), uint64]) -> (Tensor[(2100, ?), uint32], Tensor[(9, 11, 9), uint64], Tensor[(891), float64]) {
  %214 = fn (%var_7418: Tensor[(891), uint64]) -> (Tensor[(2100, ?), uint32], Tensor[(9, 11, 9), uint64], Tensor[(891), float64]) {
    %205 = @func_6264() /* ty=(Tensor[(2100, ?), uint32],) */;
    %206 = cast(%var_7418, dtype="uint64") /* ty=Tensor[(891), uint64] */;
    %207 = cast(%var_7418, dtype="uint64") /* ty=Tensor[(891), uint64] */;
    %208 = reshape(%206, newshape=[9, 11, 9]) /* ty=Tensor[(9, 11, 9), uint64] */;
    %209 = reshape(%207, newshape=[9, 11, 9]) /* ty=Tensor[(9, 11, 9), uint64] */;
    %210 = cast(%var_7418, dtype="float64") /* ty=Tensor[(891), float64] */;
    %211 = %205.0;
    %212 = @func_3072(%208, %209) /* ty=Tensor[(9, 11, 9), uint64] */;
    %213 = sinh(%210) /* ty=Tensor[(891), float64] */;
    (%211, %212, %213)
  };
  %214(%var_7446) /* ty=(Tensor[(2100, ?), uint32], Tensor[(9, 11, 9), uint64], Tensor[(891), float64]) */
}

def @func_6011(%var_6009: Tensor[(3, 10, 15), float64], %var_6010: Tensor[(3584), float32]) -> (Tensor[(3, 10, 15), uint16], Tensor[(3, 10, 15), float32], Tensor[(810), uint16], Tensor[(3584), float32]) {
  @func_6007(%var_6009, %var_6010) /* ty=(Tensor[(3, 10, 15), uint16], Tensor[(3, 10, 15), float32], Tensor[(810), uint16], Tensor[(3584), float32]) */
}

def @func_6608(%var_6603: Tensor[(2100, 7), uint32]) -> (Tensor[(1, 10, 15), float64], Tensor[(2100, 7), bool]) {
  %215 = @func_6264() /* ty=(Tensor[(2100, ?), uint32],) */;
  %216 = %215.0;
  %217 = cast(%216, dtype="bool") /* ty=Tensor[(2100, ?), bool] */;
  %218 = cast(%var_6603, dtype="bool") /* ty=Tensor[(2100, 7), bool] */;
  %219 = @func_4854() /* ty=Tensor[(1, 10, 15), float64] */;
  %220 = greater(%217, %218) /* ty=Tensor[(2100, 7), bool] */;
  (%219, %220)
}

def @func_6375(%var_6373: Tensor[(810), uint16]) -> (Tensor[(2100, ?), uint32], Tensor[(15, 9, 6), uint16], Tensor[(810), uint16]) {
  @func_6372(%var_6373) /* ty=(Tensor[(2100, ?), uint32], Tensor[(15, 9, 6), uint16], Tensor[(810), uint16]) */
}

def @func_5475() -> (Tensor[(3, 15, 14), float32], Tensor[(1, 10, 15), float64], Tensor[(2100, ?), uint32]) {
  %237 = fn () -> (Tensor[(3, 15, 14), float32], Tensor[(1, 10, 15), float64], Tensor[(2100, ?), uint32]) {
    %221 = @func_5319() /* ty=(Tensor[(1, 10, 15), float64],) */;
    %222 = cast(meta[relay.Constant][10] /* ty=Tensor[(2100, 1), float32] */, dtype="float32") /* ty=Tensor[(2100, 1), float32] */;
    %223 = cast(meta[relay.Constant][10] /* ty=Tensor[(2100, 1), float32] */, dtype="int64") /* ty=Tensor[(2100, 1), int64] */;
    %224 = cast(meta[relay.Constant][10] /* ty=Tensor[(2100, 1), float32] */, dtype="float32") /* ty=Tensor[(2100, 1), float32] */;
    %225 = reshape(%222, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), float32] */;
    %226 = reshape(%223, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), int64] */;
    %227 = reshape(%224, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), float32] */;
    %228 = @func_140(%225, %226, %227) /* ty=(Tensor[(15, 10, 14), bool], Tensor[(15, 10, 14), float64], Tensor[(15, 10, 14), float64], Tensor[(15, 10, 14), float32]) */;
    %229 = %228.2;
    %230 = cast(%229, dtype="uint32") /* ty=Tensor[(15, 10, 14), uint32] */;
    %231 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(2100, 1), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %232 = cast(meta[relay.Constant][10] /* ty=Tensor[(2100, 1), float32] */, dtype="uint32") /* ty=Tensor[(2100, 1), uint32] */;
    %233 = dyn.reshape(%230, %231, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
    %234 = @func_5361() /* ty=Tensor[(3, 15, 14), float32] */;
    %235 = %221.0;
    %236 = bitwise_xor(%232, %233) /* ty=Tensor[(2100, ?), uint32] */;
    (%234, %235, %236)
  };
  %237() /* ty=(Tensor[(3, 15, 14), float32], Tensor[(1, 10, 15), float64], Tensor[(2100, ?), uint32]) */
}

def @func_6803(%var_6799: Tensor[(891), uint64], %var_6800: Tensor[(3584), float32], %var_6801: Tensor[(2080), float32], %var_6802: Tensor[(546), float64]) -> (Tensor[(5, 6), float32], Tensor[(3, 15, 14), float32], Tensor[(9, 11, 9), uint64], Tensor[(891), uint64], Tensor[(15, 9, 6), uint16], Tensor[(520), int32], Tensor[(2100), float32], Tensor[(3584), float32], Tensor[(2080), float32], Tensor[(3840), float32], Tensor[(2400), float64], Tensor[(13, 3, 14), bool], Tensor[(1, 10, 15), float64]) {
  %271 = fn (%var_6761: Tensor[(891), uint64], %var_6771: Tensor[(3584), float32], %var_6772: Tensor[(2080), float32], %var_6779: Tensor[(546), float64]) -> (Tensor[(5, 6), float32], Tensor[(3, 15, 14), float32], Tensor[(9, 11, 9), uint64], Tensor[(891), uint64], Tensor[(15, 9, 6), uint16], Tensor[(520), int32], Tensor[(2100), float32], Tensor[(3584), float32], Tensor[(2080), float32], Tensor[(3840), float32], Tensor[(2400), float64], Tensor[(13, 3, 14), bool], Tensor[(1, 10, 15), float64]) {
    %238 = @func_6686() /* ty=(Tensor[(1, 10, 15), float64], Tensor[(5, 6), float32], Tensor[(30), float32]) */;
    %239 = cast(%var_6761, dtype="uint64") /* ty=Tensor[(891), uint64] */;
    %240 = cast(%var_6761, dtype="uint64") /* ty=Tensor[(891), uint64] */;
    %241 = reshape(%239, newshape=[9, 11, 9]) /* ty=Tensor[(9, 11, 9), uint64] */;
    %242 = reshape(%240, newshape=[9, 11, 9]) /* ty=Tensor[(9, 11, 9), uint64] */;
    %243 = cast(meta[relay.Constant][11] /* ty=Tensor[(520), int32] */, dtype="int32") /* ty=Tensor[(520), int32] */;
    %244 = cast(meta[relay.Constant][12] /* ty=Tensor[(2100), float32] */, dtype="float32") /* ty=Tensor[(2100), float32] */;
    %245 = cast(%var_6771, dtype="float32") /* ty=Tensor[(3584), float32] */;
    %246 = cast(%var_6772, dtype="float32") /* ty=Tensor[(2080), float32] */;
    %247 = cast(meta[relay.Constant][13] /* ty=Tensor[(3840), float32] */, dtype="float32") /* ty=Tensor[(3840), float32] */;
    %248 = reshape(%243, newshape=[520]) /* ty=Tensor[(520), int32] */;
    %249 = reshape(%244, newshape=[2100]) /* ty=Tensor[(2100), float32] */;
    %250 = reshape(%245, newshape=[3584]) /* ty=Tensor[(3584), float32] */;
    %251 = reshape(%246, newshape=[2080]) /* ty=Tensor[(2080), float32] */;
    %252 = reshape(%247, newshape=[48, 80]) /* ty=Tensor[(48, 80), float32] */;
    %253 = @func_4624(%248, %249, %250, %251, %252) /* ty=(Tensor[(1, 10, 15), float32], Tensor[(3584), float32], Tensor[(520), int32], Tensor[(224), float32], Tensor[(3584), float32], Tensor[(15, 9, 6), uint16], Tensor[(810), uint16], Tensor[(2080), float32], Tensor[(540), float64], Tensor[(48, 80), float32], Tensor[(2100), float32]) */;
    %254 = cast(%var_6779, dtype="float64") /* ty=Tensor[(546), float64] */;
    %255 = cast(meta[relay.Constant][14] /* ty=Tensor[(2400), float64] */, dtype="float64") /* ty=Tensor[(2400), float64] */;
    %256 = reshape(%254, newshape=[546]) /* ty=Tensor[(546), float64] */;
    %257 = reshape(%255, newshape=[16, 10, 15]) /* ty=Tensor[(16, 10, 15), float64] */;
    %258 = @func_5553(%256, %257) /* ty=(Tensor[(1, 10, 15), float64], Tensor[(?, 10, 15), float64], Tensor[(1, 2100), float32], Tensor[(3584), float32], Tensor[(13, 3, 14), float64], Tensor[(546), float64], Tensor[(16, 10, 15), float64]) */;
    %259 = %258.4;
    %260 = cast(%var_6779, dtype="bool") /* ty=Tensor[(546), bool] */;
    %261 = shape_of(%259, dtype="int32") /* ty=Tensor[(3), int32] */;
    %262 = cast(%259, dtype="bool") /* ty=Tensor[(13, 3, 14), bool] */;
    %263 = dyn.reshape(%260, %261, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %264 = @func_5319() /* ty=(Tensor[(1, 10, 15), float64],) */;
    %265 = %238.1;
    %266 = @func_5361() /* ty=Tensor[(3, 15, 14), float32] */;
    %267 = @func_3072(%241, %242) /* ty=Tensor[(9, 11, 9), uint64] */;
    %268 = %253.5;
    %269 = logical_or(%262, %263) /* ty=Tensor[(13, 3, 14), bool] */;
    %270 = %264.0;
    (%265, %266, %267, %var_6761, %268, meta[relay.Constant][11] /* ty=Tensor[(520), int32] */, meta[relay.Constant][12] /* ty=Tensor[(2100), float32] */, %var_6771, %var_6772, meta[relay.Constant][13] /* ty=Tensor[(3840), float32] */, meta[relay.Constant][14] /* ty=Tensor[(2400), float64] */, %269, %270)
  };
  %271(%var_6799, %var_6800, %var_6801, %var_6802) /* ty=(Tensor[(5, 6), float32], Tensor[(3, 15, 14), float32], Tensor[(9, 11, 9), uint64], Tensor[(891), uint64], Tensor[(15, 9, 6), uint16], Tensor[(520), int32], Tensor[(2100), float32], Tensor[(3584), float32], Tensor[(2080), float32], Tensor[(3840), float32], Tensor[(2400), float64], Tensor[(13, 3, 14), bool], Tensor[(1, 10, 15), float64]) */
}

def @func_1828(%var_1825: Tensor[(14, 1, 16), float32], %var_1826: Tensor[(14, 16, 16), float32], %var_1827: Tensor[(540), float64]) -> (Tensor[(14, 16, 16), float64], Tensor[(1, 2100), float32], Tensor[(540), float64], Tensor[(2100), float32]) {
  %283 = fn (%var_1802: Tensor[(14, 1, 16), float32], %var_1805: Tensor[(14, 16, 16), float32], %var_1812: Tensor[(540), float64]) -> (Tensor[(14, 16, 16), float64], Tensor[(1, 2100), float32], Tensor[(540), float64], Tensor[(2100), float32]) {
    %272 = cast(%var_1802, dtype="float32") /* ty=Tensor[(14, 1, 16), float32] */;
    %273 = cos(%272) /* ty=Tensor[(14, 1, 16), float32] */;
    %274 = cast(%273, dtype="float64") /* ty=Tensor[(14, 1, 16), float64] */;
    %275 = cast(%var_1805, dtype="float64") /* ty=Tensor[(14, 16, 16), float64] */;
    %276 = cast(%var_1812, dtype="float64") /* ty=Tensor[(540), float64] */;
    %277 = cast(meta[relay.Constant][15] /* ty=Tensor[(2100), float32] */, dtype="float32") /* ty=Tensor[(2100), float32] */;
    %278 = reshape(%276, newshape=[9, 12, 5]) /* ty=Tensor[(9, 12, 5), float64] */;
    %279 = reshape(%277, newshape=[1, 2100]) /* ty=Tensor[(1, 2100), float32] */;
    %280 = @func_306(%278, %279) /* ty=(Tensor[(9, 12, 5), float64], Tensor[(15, 10, 14), bool], Tensor[(1, 2100), float32]) */;
    %281 = mod(%274, %275) /* ty=Tensor[(14, 16, 16), float64] */;
    %282 = %280.2;
    (%281, %282, %var_1812, meta[relay.Constant][15] /* ty=Tensor[(2100), float32] */)
  };
  %283(%var_1825, %var_1826, %var_1827) /* ty=(Tensor[(14, 16, 16), float64], Tensor[(1, 2100), float32], Tensor[(540), float64], Tensor[(2100), float32]) */
}

def @func_2229(%var_2221: Tensor[(15, 8, 13), float64]) -> Tensor[(15, 8, 13), float32] {
  %284 = cast(%var_2221, dtype="float64") /* ty=Tensor[(15, 8, 13), float64] */;
  %285 = rsqrt(%284) /* ty=Tensor[(15, 8, 13), float64] */;
  %286 = cast(%285, dtype="float32") /* ty=Tensor[(15, 8, 13), float32] */;
  sinh(%286) /* ty=Tensor[(15, 8, 13), float32] */
}

def @func_5321() -> (Tensor[(1, 10, 15), float64],) {
  @func_5319() /* ty=(Tensor[(1, 10, 15), float64],) */
}

def @func_8155() -> (Tensor[(1, 10, 15), float64], Tensor[(810), uint16], Tensor[(810), uint16]) {
  %293 = fn () -> (Tensor[(1, 10, 15), float64], Tensor[(810), uint16], Tensor[(810), uint16]) {
    %287 = @func_5319() /* ty=(Tensor[(1, 10, 15), float64],) */;
    %288 = cast(meta[relay.Constant][16] /* ty=Tensor[(810), uint16] */, dtype="uint16") /* ty=Tensor[(810), uint16] */;
    %289 = reshape(%288, newshape=[810]) /* ty=Tensor[(810), uint16] */;
    %290 = @func_8131(%289) /* ty=(Tensor[(11, 16, 2), float32], Tensor[(15, 9, 6), uint16], Tensor[(810), uint16]) */;
    %291 = %287.0;
    %292 = %290.2;
    (%291, %292, meta[relay.Constant][16] /* ty=Tensor[(810), uint16] */)
  };
  %293() /* ty=(Tensor[(1, 10, 15), float64], Tensor[(810), uint16], Tensor[(810), uint16]) */
}

def @func_9575() -> (Tensor[(3, 15, 14), float32], Tensor[(1, 10, 15), float64]) {
  @func_9573() /* ty=(Tensor[(3, 15, 14), float32], Tensor[(1, 10, 15), float64]) */
}

def @func_8991() -> (Tensor[(3, 15, 14), float32], Tensor[(1, 11, 14), float32], Tensor[(1, 154), float32]) {
  @func_8989() /* ty=(Tensor[(3, 15, 14), float32], Tensor[(1, 11, 14), float32], Tensor[(1, 154), float32]) */
}

def @func_6007(%var_5980: Tensor[(3, 10, 15), float64], %var_5989: Tensor[(3584), float32]) -> (Tensor[(3, 10, 15), uint16], Tensor[(3, 10, 15), float32], Tensor[(810), uint16], Tensor[(3584), float32]) {
  %294 = @func_4854() /* ty=Tensor[(1, 10, 15), float64] */;
  %295 = cast(%294, dtype="uint16") /* ty=Tensor[(1, 10, 15), uint16] */;
  %296 = cast(%var_5980, dtype="uint16") /* ty=Tensor[(3, 10, 15), uint16] */;
  %297 = cast(%var_5980, dtype="float32") /* ty=Tensor[(3, 10, 15), float32] */;
  %298 = cast(%var_5989, dtype="float32") /* ty=Tensor[(3584), float32] */;
  %299 = reshape(%298, newshape=[3584]) /* ty=Tensor[(3584), float32] */;
  %300 = @func_4881(%299) /* ty=(Tensor[(15, 9, 6), uint16], Tensor[(810), uint16], Tensor[(1, 10, 15), float32], Tensor[(1, 2100), float32], Tensor[(16, 14), float32], Tensor[(3584), float32], Tensor[(540), float64]) */;
  %301 = right_shift(%295, %296) /* ty=Tensor[(3, 10, 15), uint16] */;
  %302 = atan(%297) /* ty=Tensor[(3, 10, 15), float32] */;
  %303 = %300.1;
  (%301, %302, %303, %var_5989)
}

def @func_9205() -> Tensor[(3, 15, 14), float32] {
  %305 = fn () -> Tensor[(3, 15, 14), float32] {
    %304 = @func_6096() /* ty=(Tensor[(1, 10, 15), float64], Tensor[(3, 15, 14), float32]) */;
    %304.1
  };
  %305() /* ty=Tensor[(3, 15, 14), float32] */
}

def @func_4716(%var_4714: Tensor[(13, 8, 9), uint32], %var_4715: Tensor[(13, 8, 9), uint32]) -> (Tensor[(13, 8, 9), float64],) {
  %313 = fn (%var_4686: Tensor[(13, 8, 9), uint32], %var_4687: Tensor[(13, 8, 9), uint32]) -> (Tensor[(13, 8, 9), float64],) {
    %306 = cast(%var_4687, dtype="uint32") /* ty=Tensor[(13, 8, 9), uint32] */;
    %307 = shape_of(%var_4686, dtype="int32") /* ty=Tensor[(3), int32] */;
    %308 = cast(%var_4686, dtype="uint32") /* ty=Tensor[(13, 8, 9), uint32] */;
    %309 = dyn.reshape(%306, %307, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %310 = logical_xor(%308, %309) /* ty=Tensor[(13, 8, 9), uint32] */;
    %311 = cast(%310, dtype="float64") /* ty=Tensor[(13, 8, 9), float64] */;
    %312 = sinh(%311) /* ty=Tensor[(13, 8, 9), float64] */;
    (%312,)
  };
  %313(%var_4714, %var_4715) /* ty=(Tensor[(13, 8, 9), float64],) */
}

def @func_7651() -> Tensor[(11, 16, 2), float32] {
  %315 = fn () -> Tensor[(11, 16, 2), float32] {
    %314 = cast(meta[relay.Constant][17] /* ty=Tensor[(11, 16, 2), float32] */, dtype="float32") /* ty=Tensor[(11, 16, 2), float32] */;
    exp(%314) /* ty=Tensor[(11, 16, 2), float32] */
  };
  %315() /* ty=Tensor[(11, 16, 2), float32] */
}

def @func_4835() -> Tensor[(1, 10, 15), float32] {
  %316 = @func_4530() /* ty=(Tensor[(1, 10, 15), float32], Tensor[(1, 10, 15), float64]) */;
  %316.0
}

def @func_4530() -> (Tensor[(1, 10, 15), float32], Tensor[(1, 10, 15), float64]) {
  %317 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 10, 15), float32] */, dtype="float32") /* ty=Tensor[(1, 10, 15), float32] */;
  %318 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 10, 15), float32] */, dtype="float64") /* ty=Tensor[(1, 10, 15), float64] */;
  %319 = cosh(%317) /* ty=Tensor[(1, 10, 15), float32] */;
  %320 = log(%318) /* ty=Tensor[(1, 10, 15), float64] */;
  (%319, %320)
}

def @func_1780(%var_1777: Tensor[(16, 15, 16), float32], %var_1778: Tensor[(16, 15, 16), float32], %var_1779: Tensor[(2100), float32]) -> (Tensor[(16, 15, 16), bool], Tensor[(1, 2100), float32], Tensor[(2100), float32], Tensor[(54, 10), float32]) {
  %344 = fn (%var_1735: Tensor[(16, 15, 16), float32], %var_1736: Tensor[(16, 15, 16), float32], %var_1742: Tensor[(2100), float32]) -> (Tensor[(16, 15, 16), bool], Tensor[(1, 2100), float32], Tensor[(2100), float32], Tensor[(54, 10), float32]) {
    %321 = cast(%var_1736, dtype="bool") /* ty=Tensor[(16, 15, 16), bool] */;
    %322 = shape_of(%var_1735, dtype="int32") /* ty=Tensor[(3), int32] */;
    %323 = cast(%var_1735, dtype="bool") /* ty=Tensor[(16, 15, 16), bool] */;
    %324 = dyn.reshape(%321, %322, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %325 = cast(meta[relay.Constant][19] /* ty=Tensor[(54, 10), float64] */, dtype="float64") /* ty=Tensor[(54, 10), float64] */;
    %326 = cast(%var_1742, dtype="float32") /* ty=Tensor[(2100), float32] */;
    %327 = reshape(%325, newshape=[9, 12, 5]) /* ty=Tensor[(9, 12, 5), float64] */;
    %328 = reshape(%326, newshape=[1, 2100]) /* ty=Tensor[(1, 2100), float32] */;
    %329 = @func_306(%327, %328) /* ty=(Tensor[(9, 12, 5), float64], Tensor[(15, 10, 14), bool], Tensor[(1, 2100), float32]) */;
    %330 = cast(meta[relay.Constant][19] /* ty=Tensor[(54, 10), float64] */, dtype="float64") /* ty=Tensor[(54, 10), float64] */;
    %331 = sin(%330) /* ty=Tensor[(54, 10), float64] */;
    %332 = cast(meta[relay.Constant][19] /* ty=Tensor[(54, 10), float64] */, dtype="uint16") /* ty=Tensor[(54, 10), uint16] */;
    %333 = shape_of(%331, dtype="int32") /* ty=Tensor[(2), int32] */;
    %334 = cast(%331, dtype="uint16") /* ty=Tensor[(54, 10), uint16] */;
    %335 = dyn.reshape(%332, %333, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    %336 = left_shift(%334, %335) /* ty=Tensor[(54, 10), uint16] */;
    %337 = cast(%336, dtype="float32") /* ty=Tensor[(54, 10), float32] */;
    %338 = shape_of(%331, dtype="int32") /* ty=Tensor[(2), int32] */;
    %339 = cast(%331, dtype="float32") /* ty=Tensor[(54, 10), float32] */;
    %340 = dyn.reshape(%337, %338, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %341 = less(%323, %324) /* ty=Tensor[(16, 15, 16), bool] */;
    %342 = %329.2;
    %343 = maximum(%339, %340) /* ty=Tensor[(54, 10), float32] */;
    (%341, %342, %var_1742, %343)
  };
  %344(%var_1777, %var_1778, %var_1779) /* ty=(Tensor[(16, 15, 16), bool], Tensor[(1, 2100), float32], Tensor[(2100), float32], Tensor[(54, 10), float32]) */
}

def @func_4884(%var_4882: Tensor[(3584), float32]) -> (Tensor[(15, 9, 6), uint16], Tensor[(810), uint16], Tensor[(1, 10, 15), float32], Tensor[(1, 2100), float32], Tensor[(16, 14), float32], Tensor[(3584), float32], Tensor[(540), float64]) {
  @func_4881(%var_4882) /* ty=(Tensor[(15, 9, 6), uint16], Tensor[(810), uint16], Tensor[(1, 10, 15), float32], Tensor[(1, 2100), float32], Tensor[(16, 14), float32], Tensor[(3584), float32], Tensor[(540), float64]) */
}

def @func_8989() -> (Tensor[(3, 15, 14), float32], Tensor[(1, 11, 14), float32], Tensor[(1, 154), float32]) {
  %345 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 154), float32] */, dtype="float32") /* ty=Tensor[(1, 154), float32] */;
  %346 = reshape(%345, newshape=[1, 11, 14]) /* ty=Tensor[(1, 11, 14), float32] */;
  %347 = @func_5394() /* ty=Tensor[(3, 15, 14), float32] */;
  %348 = @func_5663(%346) /* ty=Tensor[(1, 11, 14), float32] */;
  (%347, %348, meta[relay.Constant][20] /* ty=Tensor[(1, 154), float32] */)
}

def @func_8786(%var_8767: Tensor[(936), uint32]) -> (Tensor[(?, 10, 15), int8], Tensor[(13, 8, 9), float64], Tensor[(936), uint32], Tensor[(1, 10, 15), float64]) {
  %349 = cast(%var_8767, dtype="uint32") /* ty=Tensor[(936), uint32] */;
  %350 = cast(%var_8767, dtype="uint32") /* ty=Tensor[(936), uint32] */;
  %351 = reshape(%349, newshape=[13, 8, 9]) /* ty=Tensor[(13, 8, 9), uint32] */;
  %352 = reshape(%350, newshape=[13, 8, 9]) /* ty=Tensor[(13, 8, 9), uint32] */;
  %353 = @func_4713(%351, %352) /* ty=(Tensor[(13, 8, 9), float64],) */;
  %354 = @func_5016() /* ty=Tensor[(?, 10, 15), int8] */;
  %355 = %353.0;
  %356 = @func_4854() /* ty=Tensor[(1, 10, 15), float64] */;
  (%354, %355, %var_8767, %356)
}

def @func_9064(%var_9024: Tensor[(4, 8, 12), uint64]) -> (Tensor[(4, 8, 12), uint16], Tensor[(4, 8, 12), float64]) {
  %357 = cast(%var_9024, dtype="uint64") /* ty=Tensor[(4, 8, 12), uint64] */;
  %358 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(4, 8, 12), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %359 = cast(meta[relay.Constant][21] /* ty=Tensor[(4, 8, 12), uint64] */, dtype="uint64") /* ty=Tensor[(4, 8, 12), uint64] */;
  %360 = dyn.reshape(%357, %358, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %361 = left_shift(%359, %360) /* ty=Tensor[(4, 8, 12), uint64] */;
  %362 = cast(%361, dtype="uint16") /* ty=Tensor[(4, 8, 12), uint16] */;
  %363 = shape_of(%var_9024, dtype="int32") /* ty=Tensor[(3), int32] */;
  %364 = cast(%var_9024, dtype="uint16") /* ty=Tensor[(4, 8, 12), uint16] */;
  %365 = dyn.reshape(%362, %363, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %366 = cast(meta[relay.Constant][21] /* ty=Tensor[(4, 8, 12), uint64] */, dtype="float64") /* ty=Tensor[(4, 8, 12), float64] */;
  %367 = bitwise_and(%364, %365) /* ty=Tensor[(4, 8, 12), uint16] */;
  %368 = log2(%366) /* ty=Tensor[(4, 8, 12), float64] */;
  (%367, %368)
}

def @func_4631(%var_4626: Tensor[(520), int32], %var_4627: Tensor[(2100), float32], %var_4628: Tensor[(3584), float32], %var_4629: Tensor[(2080), float32], %var_4630: Tensor[(48, 80), float32]) -> (Tensor[(1, 10, 15), float32], Tensor[(3584), float32], Tensor[(520), int32], Tensor[(224), float32], Tensor[(3584), float32], Tensor[(15, 9, 6), uint16], Tensor[(810), uint16], Tensor[(2080), float32], Tensor[(540), float64], Tensor[(48, 80), float32], Tensor[(2100), float32]) {
  @func_4624(%var_4626, %var_4627, %var_4628, %var_4629, %var_4630) /* ty=(Tensor[(1, 10, 15), float32], Tensor[(3584), float32], Tensor[(520), int32], Tensor[(224), float32], Tensor[(3584), float32], Tensor[(15, 9, 6), uint16], Tensor[(810), uint16], Tensor[(2080), float32], Tensor[(540), float64], Tensor[(48, 80), float32], Tensor[(2100), float32]) */
}

def @func_9371() -> (Tensor[(3, 15, 14), float32], Tensor[(1, 10, 15), float64], Tensor[(14700), uint32], Tensor[(1, 10, 15), float64], Tensor[(?, 10, 15), int8]) {
  @func_9369() /* ty=(Tensor[(3, 15, 14), float32], Tensor[(1, 10, 15), float64], Tensor[(14700), uint32], Tensor[(1, 10, 15), float64], Tensor[(?, 10, 15), int8]) */
}

def @func_7708() -> (Tensor[(3, 15, 14), float32], Tensor[(15, 8, 13), float32], Tensor[(1, 1560), float64]) {
  %375 = fn () -> (Tensor[(3, 15, 14), float32], Tensor[(15, 8, 13), float32], Tensor[(1, 1560), float64]) {
    %369 = @func_5394() /* ty=Tensor[(3, 15, 14), float32] */;
    %370 = cast(%369, dtype="float32") /* ty=Tensor[(3, 15, 14), float32] */;
    %371 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 1560), float64] */, dtype="float64") /* ty=Tensor[(1, 1560), float64] */;
    %372 = reshape(%371, newshape=[15, 8, 13]) /* ty=Tensor[(15, 8, 13), float64] */;
    %373 = sigmoid(%370) /* ty=Tensor[(3, 15, 14), float32] */;
    %374 = @func_2229(%372) /* ty=Tensor[(15, 8, 13), float32] */;
    (%373, %374, meta[relay.Constant][22] /* ty=Tensor[(1, 1560), float64] */)
  };
  %375() /* ty=(Tensor[(3, 15, 14), float32], Tensor[(15, 8, 13), float32], Tensor[(1, 1560), float64]) */
}

def @func_3761(%var_3759: Tensor[(13, 3, 14), float64], %var_3760: Tensor[(13, 3, 14), float64]) -> (Tensor[(13, 3, 14), float64],) {
  %381 = fn (%var_3739: Tensor[(13, 3, 14), float64], %var_3740: Tensor[(13, 3, 14), float64]) -> (Tensor[(13, 3, 14), float64],) {
    %376 = cast(%var_3740, dtype="float64") /* ty=Tensor[(13, 3, 14), float64] */;
    %377 = shape_of(%var_3739, dtype="int32") /* ty=Tensor[(3), int32] */;
    %378 = cast(%var_3739, dtype="float64") /* ty=Tensor[(13, 3, 14), float64] */;
    %379 = dyn.reshape(%376, %377, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %380 = divide(%378, %379) /* ty=Tensor[(13, 3, 14), float64] */;
    (%380,)
  };
  %381(%var_3759, %var_3760) /* ty=(Tensor[(13, 3, 14), float64],) */
}

def @func_6687() -> (Tensor[(1, 10, 15), float64], Tensor[(5, 6), float32], Tensor[(30), float32]) {
  %388 = fn () -> (Tensor[(1, 10, 15), float64], Tensor[(5, 6), float32], Tensor[(30), float32]) {
    %382 = @func_6096() /* ty=(Tensor[(1, 10, 15), float64], Tensor[(3, 15, 14), float32]) */;
    %383 = cast(meta[relay.Constant][23] /* ty=Tensor[(30), float32] */, dtype="float32") /* ty=Tensor[(30), float32] */;
    %384 = reshape(%383, newshape=[10, 3]) /* ty=Tensor[(10, 3), float32] */;
    %385 = @func_6199(%384) /* ty=(Tensor[(?, 10, 15), int8], Tensor[(5, 6), float32], Tensor[(10, 3), float32]) */;
    %386 = %382.0;
    %387 = %385.1;
    (%386, %387, meta[relay.Constant][23] /* ty=Tensor[(30), float32] */)
  };
  %388() /* ty=(Tensor[(1, 10, 15), float64], Tensor[(5, 6), float32], Tensor[(30), float32]) */
}

def @func_4196(%var_4193: Tensor[(14, 11, 8), uint32], %var_4194: Tensor[(3840), float32], %var_4195: Tensor[(2100), float32]) -> (Tensor[(14, 11, 8), float32], Tensor[(2100), float32], Tensor[(3840), float32], Tensor[(2100), float32], Tensor[(14, 11, 8), float32]) {
  @func_4191(%var_4193, %var_4194, %var_4195) /* ty=(Tensor[(14, 11, 8), float32], Tensor[(2100), float32], Tensor[(3840), float32], Tensor[(2100), float32], Tensor[(14, 11, 8), float32]) */
}

def @func_5361() -> Tensor[(3, 15, 14), float32] {
  %389 = cast(meta[relay.Constant][24] /* ty=Tensor[(3, 15, 14), float32] */, dtype="float32") /* ty=Tensor[(3, 15, 14), float32] */;
  log2(%389) /* ty=Tensor[(3, 15, 14), float32] */
}

def @func_8721(%var_8720: Tensor[(15, 10, 15), float32]) -> (Tensor[(15, 10, 15), float32],) {
  %396 = fn (%var_8695: Tensor[(15, 10, 15), float32]) -> (Tensor[(15, 10, 15), float32],) {
    %390 = @func_4835() /* ty=Tensor[(1, 10, 15), float32] */;
    %391 = cast(%390, dtype="float32") /* ty=Tensor[(1, 10, 15), float32] */;
    %392 = cast(%var_8695, dtype="float32") /* ty=Tensor[(15, 10, 15), float32] */;
    %393 = mod(%391, %392) /* ty=Tensor[(15, 10, 15), float32] */;
    %394 = cast(%393, dtype="float32") /* ty=Tensor[(15, 10, 15), float32] */;
    %395 = sinh(%394) /* ty=Tensor[(15, 10, 15), float32] */;
    (%395,)
  };
  %396(%var_8720) /* ty=(Tensor[(15, 10, 15), float32],) */
}

def @func_4301(%var_4299: Tensor[(12, 6, 12), int8]) -> (Tensor[(12, 6, 12), int8], Tensor[(13, 3, 14), float64], Tensor[(546), float64], Tensor[(9, 11, 9), uint64], Tensor[(891), uint64]) {
  @func_4298(%var_4299) /* ty=(Tensor[(12, 6, 12), int8], Tensor[(13, 3, 14), float64], Tensor[(546), float64], Tensor[(9, 11, 9), uint64], Tensor[(891), uint64]) */
}

def @func_2232(%var_2230: Tensor[(15, 8, 13), float64]) -> Tensor[(15, 8, 13), float32] {
  @func_2229(%var_2230) /* ty=Tensor[(15, 8, 13), float32] */
}

def @func_4624(%var_4596: Tensor[(520), int32], %var_4597: Tensor[(2100), float32], %var_4599: Tensor[(3584), float32], %var_4610: Tensor[(2080), float32], %var_4612: Tensor[(48, 80), float32]) -> (Tensor[(1, 10, 15), float32], Tensor[(3584), float32], Tensor[(520), int32], Tensor[(224), float32], Tensor[(3584), float32], Tensor[(15, 9, 6), uint16], Tensor[(810), uint16], Tensor[(2080), float32], Tensor[(540), float64], Tensor[(48, 80), float32], Tensor[(2100), float32]) {
  %397 = @func_4530() /* ty=(Tensor[(1, 10, 15), float32], Tensor[(1, 10, 15), float64]) */;
  %398 = cast(%var_4596, dtype="int32") /* ty=Tensor[(520), int32] */;
  %399 = cast(%var_4596, dtype="int32") /* ty=Tensor[(520), int32] */;
  %400 = cast(%var_4597, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %401 = cast(meta[relay.Constant][25] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
  %402 = cast(%var_4599, dtype="float32") /* ty=Tensor[(3584), float32] */;
  %403 = reshape(%398, newshape=[13, 4, 10]) /* ty=Tensor[(13, 4, 10), int32] */;
  %404 = reshape(%399, newshape=[13, 4, 10]) /* ty=Tensor[(13, 4, 10), int32] */;
  %405 = reshape(%400, newshape=[2100]) /* ty=Tensor[(2100), float32] */;
  %406 = reshape(%401, newshape=[224]) /* ty=Tensor[(224), float32] */;
  %407 = reshape(%402, newshape=[3584]) /* ty=Tensor[(3584), float32] */;
  %408 = @func_2794(%403, %404, %405, %406, %407) /* ty=(Tensor[(13, 4, 10), int32], Tensor[(15, 10, 14), float64], Tensor[(2100), float32], Tensor[(540), float64], Tensor[(224), float32], Tensor[(3584), float32], Tensor[(540), float64], Tensor[(15, 10, 14), bool]) */;
  %409 = cast(meta[relay.Constant][26] /* ty=Tensor[(810), uint16] */, dtype="uint16") /* ty=Tensor[(810), uint16] */;
  %410 = reshape(%409, newshape=[15, 9, 6]) /* ty=Tensor[(15, 9, 6), uint16] */;
  %411 = cast(%var_4610, dtype="float32") /* ty=Tensor[(2080), float32] */;
  %412 = cast(meta[relay.Constant][27] /* ty=Tensor[(540), float64] */, dtype="float64") /* ty=Tensor[(540), float64] */;
  %413 = cast(%var_4597, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %414 = cast(%var_4612, dtype="float32") /* ty=Tensor[(48, 80), float32] */;
  %415 = reshape(%411, newshape=[16, 10, 13]) /* ty=Tensor[(16, 10, 13), float32] */;
  %416 = reshape(%412, newshape=[540]) /* ty=Tensor[(540), float64] */;
  %417 = reshape(%413, newshape=[2100]) /* ty=Tensor[(2100), float32] */;
  %418 = reshape(%414, newshape=[3840]) /* ty=Tensor[(3840), float32] */;
  %419 = @func_1973(%415, %416, %417, %418) /* ty=(Tensor[(16, 10, 13), float32], Tensor[(9, 12, 5), float64], Tensor[(540), float64], Tensor[(2100), float32], Tensor[(2100), float32], Tensor[(3840), float32], Tensor[(15, 10, 14), float64]) */;
  %420 = %419.3;
  %421 = cast(%420, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %422 = shape_of(%var_4597, dtype="int32") /* ty=Tensor[(1), int32] */;
  %423 = cast(%var_4597, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %424 = dyn.reshape(%421, %422, newshape=[]) /* ty=Tensor[(?), float32] */;
  %425 = %397.0;
  %426 = %408.5;
  %427 = @func_3607(%410) /* ty=Tensor[(15, 9, 6), uint16] */;
  %428 = power(%423, %424) /* ty=Tensor[(2100), float32] */;
  (%425, %426, %var_4596, meta[relay.Constant][25] /* ty=Tensor[(224), float32] */, %var_4599, %427, meta[relay.Constant][26] /* ty=Tensor[(810), uint16] */, %var_4610, meta[relay.Constant][27] /* ty=Tensor[(540), float64] */, %var_4612, %428)
}

def @func_7762(%var_7761: Tensor[(3, 15, 14), float64]) -> (Tensor[(3, 15, 14), float32], Tensor[(3, 15, 14), float64]) {
  %436 = fn (%var_7751: Tensor[(3, 15, 14), float64]) -> (Tensor[(3, 15, 14), float32], Tensor[(3, 15, 14), float64]) {
    %429 = @func_6729() /* ty=Tensor[(3, 15, 14), float64] */;
    %430 = cast(%var_7751, dtype="float64") /* ty=Tensor[(3, 15, 14), float64] */;
    %431 = shape_of(%429, dtype="int32") /* ty=Tensor[(3), int32] */;
    %432 = cast(%429, dtype="float64") /* ty=Tensor[(3, 15, 14), float64] */;
    %433 = dyn.reshape(%430, %431, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %434 = @func_6106() /* ty=Tensor[(3, 15, 14), float32] */;
    %435 = divide(%432, %433) /* ty=Tensor[(3, 15, 14), float64] */;
    (%434, %435)
  };
  %436(%var_7761) /* ty=(Tensor[(3, 15, 14), float32], Tensor[(3, 15, 14), float64]) */
}

def @func_8750() -> (Tensor[(11, 16, 2), float32],) {
  @func_8748() /* ty=(Tensor[(11, 16, 2), float32],) */
}

def @func_4532() -> (Tensor[(1, 10, 15), float32], Tensor[(1, 10, 15), float64]) {
  @func_4530() /* ty=(Tensor[(1, 10, 15), float32], Tensor[(1, 10, 15), float64]) */
}

def @func_4837() -> Tensor[(1, 10, 15), float32] {
  @func_4835() /* ty=Tensor[(1, 10, 15), float32] */
}

def @func_5363() -> Tensor[(3, 15, 14), float32] {
  @func_5361() /* ty=Tensor[(3, 15, 14), float32] */
}

def @func_5394() -> Tensor[(3, 15, 14), float32] {
  @func_5361() /* ty=Tensor[(3, 15, 14), float32] */
}

def @func_5663(%var_5658: Tensor[(1, 11, 14), float32]) -> Tensor[(1, 11, 14), float32] {
  %437 = cast(%var_5658, dtype="float32") /* ty=Tensor[(1, 11, 14), float32] */;
  asinh(%437) /* ty=Tensor[(1, 11, 14), float32] */
}

def @func_5790(%var_5789: Tensor[(3584), float32]) -> (Tensor[(?, 10, 15), int8], Tensor[(1, 2100), float32], Tensor[(3584), float32], Tensor[(?, 10, 15), int8]) {
  %446 = fn (%var_5770: Tensor[(3584), float32]) -> (Tensor[(?, 10, 15), int8], Tensor[(1, 2100), float32], Tensor[(3584), float32], Tensor[(?, 10, 15), int8]) {
    %438 = @func_5372() /* ty=(Tensor[(?, 10, 15), int8],) */;
    %439 = cast(%var_5770, dtype="float32") /* ty=Tensor[(3584), float32] */;
    %440 = reshape(%439, newshape=[3584]) /* ty=Tensor[(3584), float32] */;
    %441 = @func_4881(%440) /* ty=(Tensor[(15, 9, 6), uint16], Tensor[(810), uint16], Tensor[(1, 10, 15), float32], Tensor[(1, 2100), float32], Tensor[(16, 14), float32], Tensor[(3584), float32], Tensor[(540), float64]) */;
    %442 = @func_5257() /* ty=(Tensor[(?, 10, 15), int8],) */;
    %443 = %438.0;
    %444 = %441.3;
    %445 = %442.0;
    (%443, %444, %var_5770, %445)
  };
  %446(%var_5789) /* ty=(Tensor[(?, 10, 15), int8], Tensor[(1, 2100), float32], Tensor[(3584), float32], Tensor[(?, 10, 15), int8]) */
}

def @func_8674() -> (Tensor[(1, 10, 15), float64],) {
  %448 = fn () -> (Tensor[(1, 10, 15), float64],) {
    %447 = @func_4854() /* ty=Tensor[(1, 10, 15), float64] */;
    (%447,)
  };
  %448() /* ty=(Tensor[(1, 10, 15), float64],) */
}

def @func_7358(%var_7357: Tensor[(936), uint32]) -> (Tensor[(?, 10, 15), int8], Tensor[(168), bool], Tensor[(18), float64], Tensor[(3584), float32], Tensor[(450), float64], Tensor[(128, 28), float32], Tensor[(936), int16], Tensor[(3584), float32], Tensor[(3, 14, 4), bool]) {
  %477 = fn (%var_7298: Tensor[(936), uint32]) -> (Tensor[(?, 10, 15), int8], Tensor[(168), bool], Tensor[(18), float64], Tensor[(3584), float32], Tensor[(450), float64], Tensor[(128, 28), float32], Tensor[(936), int16], Tensor[(3584), float32], Tensor[(3, 14, 4), bool]) {
    %449 = cast(meta[relay.Constant][28] /* ty=Tensor[(18), float64] */, dtype="float64") /* ty=Tensor[(18), float64] */;
    %450 = reshape(%449, newshape=[2, 9, 1]) /* ty=Tensor[(2, 9, 1), float64] */;
    %451 = @func_4749(%450) /* ty=(Tensor[(2, 9, 1), float64], Tensor[(3, 14, 4), bool], Tensor[(168), bool]) */;
    %452 = cast(meta[relay.Constant][29] /* ty=Tensor[(450), float64] */, dtype="float64") /* ty=Tensor[(450), float64] */;
    %453 = cast(meta[relay.Constant][30] /* ty=Tensor[(128, 28), float32] */, dtype="float32") /* ty=Tensor[(128, 28), float32] */;
    %454 = reshape(%452, newshape=[3, 10, 15]) /* ty=Tensor[(3, 10, 15), float64] */;
    %455 = reshape(%453, newshape=[3584]) /* ty=Tensor[(3584), float32] */;
    %456 = @func_6007(%454, %455) /* ty=(Tensor[(3, 10, 15), uint16], Tensor[(3, 10, 15), float32], Tensor[(810), uint16], Tensor[(3584), float32]) */;
    %457 = cast(%var_7298, dtype="uint32") /* ty=Tensor[(936), uint32] */;
    %458 = cast(%var_7298, dtype="uint32") /* ty=Tensor[(936), uint32] */;
    %459 = reshape(%457, newshape=[13, 8, 9]) /* ty=Tensor[(13, 8, 9), uint32] */;
    %460 = reshape(%458, newshape=[13, 8, 9]) /* ty=Tensor[(13, 8, 9), uint32] */;
    %461 = @func_4713(%459, %460) /* ty=(Tensor[(13, 8, 9), float64],) */;
    %462 = %461.0;
    %463 = cast(%462, dtype="int16") /* ty=Tensor[(13, 8, 9), int16] */;
    %464 = shape_of(%var_7298, dtype="int32") /* ty=Tensor[(1), int32] */;
    %465 = cast(%var_7298, dtype="int16") /* ty=Tensor[(936), int16] */;
    %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?), int16] */;
    %467 = @func_5118() /* ty=(Tensor[(1, 10, 15), float64], Tensor[(540), float64], Tensor[(3584), float32]) */;
    %468 = cast(meta[relay.Constant][28] /* ty=Tensor[(18), float64] */, dtype="float64") /* ty=Tensor[(18), float64] */;
    %469 = reshape(%468, newshape=[2, 9, 1]) /* ty=Tensor[(2, 9, 1), float64] */;
    %470 = @func_4749(%469) /* ty=(Tensor[(2, 9, 1), float64], Tensor[(3, 14, 4), bool], Tensor[(168), bool]) */;
    %471 = @func_5016() /* ty=Tensor[(?, 10, 15), int8] */;
    %472 = %451.2;
    %473 = %456.3;
    %474 = bitwise_and(%465, %466) /* ty=Tensor[(936), int16] */;
    %475 = %467.2;
    %476 = %470.1;
    (%471, %472, meta[relay.Constant][28] /* ty=Tensor[(18), float64] */, %473, meta[relay.Constant][29] /* ty=Tensor[(450), float64] */, meta[relay.Constant][30] /* ty=Tensor[(128, 28), float32] */, %474, %475, %476)
  };
  %477(%var_7357) /* ty=(Tensor[(?, 10, 15), int8], Tensor[(168), bool], Tensor[(18), float64], Tensor[(3584), float32], Tensor[(450), float64], Tensor[(128, 28), float32], Tensor[(936), int16], Tensor[(3584), float32], Tensor[(3, 14, 4), bool]) */
}

def @func_2800(%var_2795: Tensor[(13, 4, 10), int32], %var_2796: Tensor[(13, 4, 10), int32], %var_2797: Tensor[(2100), float32], %var_2798: Tensor[(224), float32], %var_2799: Tensor[(3584), float32]) -> (Tensor[(13, 4, 10), int32], Tensor[(15, 10, 14), float64], Tensor[(2100), float32], Tensor[(540), float64], Tensor[(224), float32], Tensor[(3584), float32], Tensor[(540), float64], Tensor[(15, 10, 14), bool]) {
  %505 = fn (%var_2746: Tensor[(13, 4, 10), int32], %var_2747: Tensor[(13, 4, 10), int32], %var_2762: Tensor[(2100), float32], %var_2765: Tensor[(224), float32], %var_2766: Tensor[(3584), float32]) -> (Tensor[(13, 4, 10), int32], Tensor[(15, 10, 14), float64], Tensor[(2100), float32], Tensor[(540), float64], Tensor[(224), float32], Tensor[(3584), float32], Tensor[(540), float64], Tensor[(15, 10, 14), bool]) {
    %478 = cast(%var_2747, dtype="int32") /* ty=Tensor[(13, 4, 10), int32] */;
    %479 = shape_of(%var_2746, dtype="int32") /* ty=Tensor[(3), int32] */;
    %480 = cast(%var_2746, dtype="int32") /* ty=Tensor[(13, 4, 10), int32] */;
    %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %482 = cast(%var_2762, dtype="float32") /* ty=Tensor[(2100), float32] */;
    %483 = cast(%var_2762, dtype="int64") /* ty=Tensor[(2100), int64] */;
    %484 = cast(%var_2762, dtype="float32") /* ty=Tensor[(2100), float32] */;
    %485 = reshape(%482, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), float32] */;
    %486 = reshape(%483, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), int64] */;
    %487 = reshape(%484, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), float32] */;
    %488 = @func_140(%485, %486, %487) /* ty=(Tensor[(15, 10, 14), bool], Tensor[(15, 10, 14), float64], Tensor[(15, 10, 14), float64], Tensor[(15, 10, 14), float32]) */;
    %489 = cast(%var_2765, dtype="float32") /* ty=Tensor[(224), float32] */;
    %490 = cast(%var_2766, dtype="float32") /* ty=Tensor[(3584), float32] */;
    %491 = cast(meta[relay.Constant][31] /* ty=Tensor[(540), float64] */, dtype="float64") /* ty=Tensor[(540), float64] */;
    %492 = reshape(%489, newshape=[14, 1, 16]) /* ty=Tensor[(14, 1, 16), float32] */;
    %493 = reshape(%490, newshape=[14, 16, 16]) /* ty=Tensor[(14, 16, 16), float32] */;
    %494 = reshape(%491, newshape=[540]) /* ty=Tensor[(540), float64] */;
    %495 = @func_1824(%492, %493, %494) /* ty=(Tensor[(14, 16, 16), float64], Tensor[(1, 2100), float32], Tensor[(540), float64], Tensor[(2100), float32]) */;
    %496 = cast(meta[relay.Constant][31] /* ty=Tensor[(540), float64] */, dtype="float64") /* ty=Tensor[(540), float64] */;
    %497 = cast(%var_2762, dtype="float32") /* ty=Tensor[(2100), float32] */;
    %498 = reshape(%496, newshape=[9, 12, 5]) /* ty=Tensor[(9, 12, 5), float64] */;
    %499 = reshape(%497, newshape=[1, 2100]) /* ty=Tensor[(1, 2100), float32] */;
    %500 = @func_306(%498, %499) /* ty=(Tensor[(9, 12, 5), float64], Tensor[(15, 10, 14), bool], Tensor[(1, 2100), float32]) */;
    %501 = multiply(%480, %481) /* ty=Tensor[(13, 4, 10), int32] */;
    %502 = %488.2;
    %503 = %495.2;
    %504 = %500.1;
    (%501, %502, %var_2762, %503, %var_2765, %var_2766, meta[relay.Constant][31] /* ty=Tensor[(540), float64] */, %504)
  };
  %505(%var_2795, %var_2796, %var_2797, %var_2798, %var_2799) /* ty=(Tensor[(13, 4, 10), int32], Tensor[(15, 10, 14), float64], Tensor[(2100), float32], Tensor[(540), float64], Tensor[(224), float32], Tensor[(3584), float32], Tensor[(540), float64], Tensor[(15, 10, 14), bool]) */
}

def @func_4191(%var_4159: Tensor[(14, 11, 8), uint32], %var_4171: Tensor[(3840), float32], %var_4172: Tensor[(2100), float32]) -> (Tensor[(14, 11, 8), float32], Tensor[(2100), float32], Tensor[(3840), float32], Tensor[(2100), float32], Tensor[(14, 11, 8), float32]) {
  %506 = cast(%var_4159, dtype="uint32") /* ty=Tensor[(14, 11, 8), uint32] */;
  %507 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(14, 11, 8), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %508 = cast(meta[relay.Constant][32] /* ty=Tensor[(14, 11, 8), uint32] */, dtype="uint32") /* ty=Tensor[(14, 11, 8), uint32] */;
  %509 = dyn.reshape(%506, %507, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %510 = bitwise_xor(%508, %509) /* ty=Tensor[(14, 11, 8), uint32] */;
  %511 = cast(%510, dtype="float32") /* ty=Tensor[(14, 11, 8), float32] */;
  %512 = cast(%var_4171, dtype="float32") /* ty=Tensor[(3840), float32] */;
  %513 = cast(%var_4171, dtype="float32") /* ty=Tensor[(3840), float32] */;
  %514 = cast(%var_4172, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %515 = reshape(%512, newshape=[16, 15, 16]) /* ty=Tensor[(16, 15, 16), float32] */;
  %516 = reshape(%513, newshape=[16, 15, 16]) /* ty=Tensor[(16, 15, 16), float32] */;
  %517 = reshape(%514, newshape=[2100]) /* ty=Tensor[(2100), float32] */;
  %518 = @func_1776(%515, %516, %517) /* ty=(Tensor[(16, 15, 16), bool], Tensor[(1, 2100), float32], Tensor[(2100), float32], Tensor[(54, 10), float32]) */;
  %519 = cast(%var_4159, dtype="float32") /* ty=Tensor[(14, 11, 8), float32] */;
  %520 = acosh(%511) /* ty=Tensor[(14, 11, 8), float32] */;
  %521 = %518.2;
  %522 = tan(%519) /* ty=Tensor[(14, 11, 8), float32] */;
  (%520, %521, %var_4171, %var_4172, %522)
}

def @func_9226() -> (Tensor[(3, 15, 14), float32],) {
  %524 = fn () -> (Tensor[(3, 15, 14), float32],) {
    %523 = @func_9204() /* ty=Tensor[(3, 15, 14), float32] */;
    (%523,)
  };
  %524() /* ty=(Tensor[(3, 15, 14), float32],) */
}

def @func_5080(%var_5074: Tensor[(520, 1), int32], %var_5075: Tensor[(2100), float32], %var_5077: Tensor[(3584), float32]) -> (Tensor[(1, 10, 15), float32], Tensor[(13, 4, 10), int32], Tensor[(520, 1), int32], Tensor[(2100), float32], Tensor[(224), float32], Tensor[(3584), float32]) {
  %525 = cast(%var_5074, dtype="int32") /* ty=Tensor[(520, 1), int32] */;
  %526 = cast(%var_5074, dtype="int32") /* ty=Tensor[(520, 1), int32] */;
  %527 = cast(%var_5075, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %528 = cast(meta[relay.Constant][33] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
  %529 = cast(%var_5077, dtype="float32") /* ty=Tensor[(3584), float32] */;
  %530 = reshape(%525, newshape=[13, 4, 10]) /* ty=Tensor[(13, 4, 10), int32] */;
  %531 = reshape(%526, newshape=[13, 4, 10]) /* ty=Tensor[(13, 4, 10), int32] */;
  %532 = reshape(%527, newshape=[2100]) /* ty=Tensor[(2100), float32] */;
  %533 = reshape(%528, newshape=[224]) /* ty=Tensor[(224), float32] */;
  %534 = reshape(%529, newshape=[3584]) /* ty=Tensor[(3584), float32] */;
  %535 = @func_2794(%530, %531, %532, %533, %534) /* ty=(Tensor[(13, 4, 10), int32], Tensor[(15, 10, 14), float64], Tensor[(2100), float32], Tensor[(540), float64], Tensor[(224), float32], Tensor[(3584), float32], Tensor[(540), float64], Tensor[(15, 10, 14), bool]) */;
  %536 = @func_4835() /* ty=Tensor[(1, 10, 15), float32] */;
  %537 = %535.0;
  (%536, %537, %var_5074, %var_5075, meta[relay.Constant][33] /* ty=Tensor[(224), float32] */, %var_5077)
}

def @func_4298(%var_4259: Tensor[(12, 6, 12), int8]) -> (Tensor[(12, 6, 12), int8], Tensor[(13, 3, 14), float64], Tensor[(546), float64], Tensor[(9, 11, 9), uint64], Tensor[(891), uint64]) {
  %538 = cast(%var_4259, dtype="int8") /* ty=Tensor[(12, 6, 12), int8] */;
  %539 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(12, 6, 12), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %540 = cast(meta[relay.Constant][34] /* ty=Tensor[(12, 6, 12), int8] */, dtype="int8") /* ty=Tensor[(12, 6, 12), int8] */;
  %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %542 = cast(meta[relay.Constant][35] /* ty=Tensor[(546), float64] */, dtype="float64") /* ty=Tensor[(546), float64] */;
  %543 = cast(meta[relay.Constant][35] /* ty=Tensor[(546), float64] */, dtype="float64") /* ty=Tensor[(546), float64] */;
  %544 = reshape(%542, newshape=[13, 3, 14]) /* ty=Tensor[(13, 3, 14), float64] */;
  %545 = reshape(%543, newshape=[13, 3, 14]) /* ty=Tensor[(13, 3, 14), float64] */;
  %546 = @func_3758(%544, %545) /* ty=(Tensor[(13, 3, 14), float64],) */;
  %547 = cast(meta[relay.Constant][36] /* ty=Tensor[(891), uint64] */, dtype="uint64") /* ty=Tensor[(891), uint64] */;
  %548 = cast(meta[relay.Constant][36] /* ty=Tensor[(891), uint64] */, dtype="uint64") /* ty=Tensor[(891), uint64] */;
  %549 = reshape(%547, newshape=[9, 11, 9]) /* ty=Tensor[(9, 11, 9), uint64] */;
  %550 = reshape(%548, newshape=[9, 11, 9]) /* ty=Tensor[(9, 11, 9), uint64] */;
  %551 = subtract(%540, %541) /* ty=Tensor[(12, 6, 12), int8] */;
  %552 = %546.0;
  %553 = @func_3072(%549, %550) /* ty=Tensor[(9, 11, 9), uint64] */;
  (%551, %552, meta[relay.Constant][35] /* ty=Tensor[(546), float64] */, %553, meta[relay.Constant][36] /* ty=Tensor[(891), uint64] */)
}

def @func_8429(%var_8427: Tensor[(15, 15, 8), bool], %var_8428: Tensor[(15, 15, 8), bool]) -> (Tensor[(15, 15, 8), bool], Tensor[(2100, ?), uint32]) {
  @func_8425(%var_8427, %var_8428) /* ty=(Tensor[(15, 15, 8), bool], Tensor[(2100, ?), uint32]) */
}

def @func_5837(%var_5836: Tensor[(3, 15, 3), float32]) -> Tensor[(3, 15, 3), float32] {
  %555 = fn (%var_5832: Tensor[(3, 15, 3), float32]) -> Tensor[(3, 15, 3), float32] {
    %554 = cast(%var_5832, dtype="float32") /* ty=Tensor[(3, 15, 3), float32] */;
    acosh(%554) /* ty=Tensor[(3, 15, 3), float32] */
  };
  %555(%var_5836) /* ty=Tensor[(3, 15, 3), float32] */
}

def @func_9670() -> (Tensor[(540), float64], Tensor[(3, 15, 14), float32]) {
  %556 = @func_5118() /* ty=(Tensor[(1, 10, 15), float64], Tensor[(540), float64], Tensor[(3584), float32]) */;
  %557 = %556.1;
  %558 = @func_8323() /* ty=Tensor[(3, 15, 14), float32] */;
  (%557, %558)
}

def @func_5396() -> Tensor[(3, 15, 14), float32] {
  @func_5394() /* ty=Tensor[(3, 15, 14), float32] */
}

def @func_6611(%var_6609: Tensor[(2100, 7), uint32]) -> (Tensor[(1, 10, 15), float64], Tensor[(2100, 7), bool]) {
  @func_6608(%var_6609) /* ty=(Tensor[(1, 10, 15), float64], Tensor[(2100, 7), bool]) */
}

def @func_8323() -> Tensor[(3, 15, 14), float32] {
  @func_7860() /* ty=Tensor[(3, 15, 14), float32] */
}

def @func_5119() -> (Tensor[(1, 10, 15), float64], Tensor[(540), float64], Tensor[(3584), float32]) {
  %567 = fn () -> (Tensor[(1, 10, 15), float64], Tensor[(540), float64], Tensor[(3584), float32]) {
    %559 = @func_4530() /* ty=(Tensor[(1, 10, 15), float32], Tensor[(1, 10, 15), float64]) */;
    %560 = cast(meta[relay.Constant][37] /* ty=Tensor[(3584), float32] */, dtype="float32") /* ty=Tensor[(3584), float32] */;
    %561 = reshape(%560, newshape=[3584]) /* ty=Tensor[(3584), float32] */;
    %562 = @func_4881(%561) /* ty=(Tensor[(15, 9, 6), uint16], Tensor[(810), uint16], Tensor[(1, 10, 15), float32], Tensor[(1, 2100), float32], Tensor[(16, 14), float32], Tensor[(3584), float32], Tensor[(540), float64]) */;
    %563 = cast(meta[relay.Constant][37] /* ty=Tensor[(3584), float32] */, dtype="float32") /* ty=Tensor[(3584), float32] */;
    %564 = %559.1;
    %565 = %562.6;
    %566 = log2(%563) /* ty=Tensor[(3584), float32] */;
    (%564, %565, %566)
  };
  %567() /* ty=(Tensor[(1, 10, 15), float64], Tensor[(540), float64], Tensor[(3584), float32]) */
}

def @func_7229(%var_7226: Tensor[(2100), float32], %var_7227: Tensor[(224), float32], %var_7228: Tensor[(3584), float32]) -> (Tensor[(3, 15, 14), float64], Tensor[(2100), float32], Tensor[(520), int32], Tensor[(2100), float32], Tensor[(224), float32], Tensor[(3584), float32]) {
  %584 = fn (%var_7208: Tensor[(2100), float32], %var_7209: Tensor[(224), float32], %var_7210: Tensor[(3584), float32]) -> (Tensor[(3, 15, 14), float64], Tensor[(2100), float32], Tensor[(520), int32], Tensor[(2100), float32], Tensor[(224), float32], Tensor[(3584), float32]) {
    %568 = @func_6526() /* ty=(Tensor[(3, 15, 14), float64],) */;
    %569 = cast(meta[relay.Constant][38] /* ty=Tensor[(520), int32] */, dtype="int32") /* ty=Tensor[(520), int32] */;
    %570 = cast(meta[relay.Constant][38] /* ty=Tensor[(520), int32] */, dtype="int32") /* ty=Tensor[(520), int32] */;
    %571 = cast(%var_7208, dtype="float32") /* ty=Tensor[(2100), float32] */;
    %572 = cast(%var_7209, dtype="float32") /* ty=Tensor[(224), float32] */;
    %573 = cast(%var_7210, dtype="float32") /* ty=Tensor[(3584), float32] */;
    %574 = reshape(%569, newshape=[13, 4, 10]) /* ty=Tensor[(13, 4, 10), int32] */;
    %575 = reshape(%570, newshape=[13, 4, 10]) /* ty=Tensor[(13, 4, 10), int32] */;
    %576 = reshape(%571, newshape=[2100]) /* ty=Tensor[(2100), float32] */;
    %577 = reshape(%572, newshape=[224]) /* ty=Tensor[(224), float32] */;
    %578 = reshape(%573, newshape=[3584]) /* ty=Tensor[(3584), float32] */;
    %579 = @func_2794(%574, %575, %576, %577, %578) /* ty=(Tensor[(13, 4, 10), int32], Tensor[(15, 10, 14), float64], Tensor[(2100), float32], Tensor[(540), float64], Tensor[(224), float32], Tensor[(3584), float32], Tensor[(540), float64], Tensor[(15, 10, 14), bool]) */;
    %580 = cast(%var_7210, dtype="float32") /* ty=Tensor[(3584), float32] */;
    %581 = %568.0;
    %582 = %579.2;
    %583 = acos(%580) /* ty=Tensor[(3584), float32] */;
    (%581, %582, meta[relay.Constant][38] /* ty=Tensor[(520), int32] */, %var_7208, %var_7209, %583)
  };
  %584(%var_7226, %var_7227, %var_7228) /* ty=(Tensor[(3, 15, 14), float64], Tensor[(2100), float32], Tensor[(520), int32], Tensor[(2100), float32], Tensor[(224), float32], Tensor[(3584), float32]) */
}

def @func_9632() -> Tensor[(11, 16, 2), float32] {
  %585 = fn () -> Tensor[(11, 16, 2), float32] {
    @func_7650() /* ty=Tensor[(11, 16, 2), float32] */
  };
  %585() /* ty=Tensor[(11, 16, 2), float32] */
}

def @func_6965(%var_6963: Tensor[(2100, 16), uint32]) -> Tensor[(2100, 16), float32] {
  @func_6962(%var_6963) /* ty=Tensor[(2100, 16), float32] */
}

def @func_9495() -> (Tensor[(3, 15, 14), float32], Tensor[(?, 10, 15), int8]) {
  %589 = fn () -> (Tensor[(3, 15, 14), float32], Tensor[(?, 10, 15), int8]) {
    %586 = @func_5372() /* ty=(Tensor[(?, 10, 15), int8],) */;
    %587 = @func_9412() /* ty=Tensor[(3, 15, 14), float32] */;
    %588 = %586.0;
    (%587, %588)
  };
  %589() /* ty=(Tensor[(3, 15, 14), float32], Tensor[(?, 10, 15), int8]) */
}

def @func_1978(%var_1974: Tensor[(16, 10, 13), float32], %var_1975: Tensor[(540), float64], %var_1976: Tensor[(2100), float32], %var_1977: Tensor[(3840), float32]) -> (Tensor[(16, 10, 13), float32], Tensor[(9, 12, 5), float64], Tensor[(540), float64], Tensor[(2100), float32], Tensor[(2100), float32], Tensor[(3840), float32], Tensor[(15, 10, 14), float64]) {
  %614 = fn (%var_1948: Tensor[(16, 10, 13), float32], %var_1953: Tensor[(540), float64], %var_1954: Tensor[(2100), float32], %var_1960: Tensor[(3840), float32]) -> (Tensor[(16, 10, 13), float32], Tensor[(9, 12, 5), float64], Tensor[(540), float64], Tensor[(2100), float32], Tensor[(2100), float32], Tensor[(3840), float32], Tensor[(15, 10, 14), float64]) {
    %590 = cast(%var_1948, dtype="float32") /* ty=Tensor[(16, 10, 13), float32] */;
    %591 = cast(%var_1953, dtype="float64") /* ty=Tensor[(540), float64] */;
    %592 = cast(%var_1954, dtype="float32") /* ty=Tensor[(2100), float32] */;
    %593 = reshape(%591, newshape=[9, 12, 5]) /* ty=Tensor[(9, 12, 5), float64] */;
    %594 = reshape(%592, newshape=[1, 2100]) /* ty=Tensor[(1, 2100), float32] */;
    %595 = @func_306(%593, %594) /* ty=(Tensor[(9, 12, 5), float64], Tensor[(15, 10, 14), bool], Tensor[(1, 2100), float32]) */;
    %596 = cast(%var_1960, dtype="float32") /* ty=Tensor[(3840), float32] */;
    %597 = cast(%var_1960, dtype="float32") /* ty=Tensor[(3840), float32] */;
    %598 = cast(%var_1954, dtype="float32") /* ty=Tensor[(2100), float32] */;
    %599 = reshape(%596, newshape=[16, 15, 16]) /* ty=Tensor[(16, 15, 16), float32] */;
    %600 = reshape(%597, newshape=[16, 15, 16]) /* ty=Tensor[(16, 15, 16), float32] */;
    %601 = reshape(%598, newshape=[2100]) /* ty=Tensor[(2100), float32] */;
    %602 = @func_1776(%599, %600, %601) /* ty=(Tensor[(16, 15, 16), bool], Tensor[(1, 2100), float32], Tensor[(2100), float32], Tensor[(54, 10), float32]) */;
    %603 = cast(%var_1954, dtype="float32") /* ty=Tensor[(2100), float32] */;
    %604 = cast(%var_1954, dtype="int64") /* ty=Tensor[(2100), int64] */;
    %605 = cast(%var_1954, dtype="float32") /* ty=Tensor[(2100), float32] */;
    %606 = reshape(%603, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), float32] */;
    %607 = reshape(%604, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), int64] */;
    %608 = reshape(%605, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), float32] */;
    %609 = @func_140(%606, %607, %608) /* ty=(Tensor[(15, 10, 14), bool], Tensor[(15, 10, 14), float64], Tensor[(15, 10, 14), float64], Tensor[(15, 10, 14), float32]) */;
    %610 = exp(%590) /* ty=Tensor[(16, 10, 13), float32] */;
    %611 = %595.0;
    %612 = %602.2;
    %613 = %609.1;
    (%610, %611, %var_1953, %var_1954, %612, %var_1960, %613)
  };
  %614(%var_1974, %var_1975, %var_1976, %var_1977) /* ty=(Tensor[(16, 10, 13), float32], Tensor[(9, 12, 5), float64], Tensor[(540), float64], Tensor[(2100), float32], Tensor[(2100), float32], Tensor[(3840), float32], Tensor[(15, 10, 14), float64]) */
}

def @func_144(%var_141: Tensor[(15, 10, 14), float32], %var_142: Tensor[(15, 10, 14), int64], %var_143: Tensor[(15, 10, 14), float32]) -> (Tensor[(15, 10, 14), bool], Tensor[(15, 10, 14), float64], Tensor[(15, 10, 14), float64], Tensor[(15, 10, 14), float32]) {
  %646 = fn (%var_53: Tensor[(15, 10, 14), float32], %var_65: Tensor[(15, 10, 14), int64], %var_87: Tensor[(15, 10, 14), float32]) -> (Tensor[(15, 10, 14), bool], Tensor[(15, 10, 14), float64], Tensor[(15, 10, 14), float64], Tensor[(15, 10, 14), float32]) {
    %615 = cast(%var_53, dtype="float32") /* ty=Tensor[(15, 10, 14), float32] */;
    %616 = sinh(%615) /* ty=Tensor[(15, 10, 14), float32] */;
    %617 = cast(%var_53, dtype="int64") /* ty=Tensor[(15, 10, 14), int64] */;
    %618 = shape_of(%616, dtype="int32") /* ty=Tensor[(3), int32] */;
    %619 = cast(%616, dtype="int64") /* ty=Tensor[(15, 10, 14), int64] */;
    %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %621 = bitwise_and(%619, %620) /* ty=Tensor[(15, 10, 14), int64] */;
    %622 = cast(%var_65, dtype="bool") /* ty=Tensor[(15, 10, 14), bool] */;
    %623 = shape_of(%621, dtype="int32") /* ty=Tensor[(3), int32] */;
    %624 = cast(%621, dtype="bool") /* ty=Tensor[(15, 10, 14), bool] */;
    %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %626 = cast(%var_87, dtype="uint32") /* ty=Tensor[(15, 10, 14), uint32] */;
    %627 = shape_of(%var_53, dtype="int32") /* ty=Tensor[(3), int32] */;
    %628 = cast(%var_53, dtype="uint32") /* ty=Tensor[(15, 10, 14), uint32] */;
    %629 = dyn.reshape(%626, %627, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %630 = minimum(%628, %629) /* ty=Tensor[(15, 10, 14), uint32] */;
    %631 = cast(%630, dtype="float64") /* ty=Tensor[(15, 10, 14), float64] */;
    %632 = cast(%616, dtype="float64") /* ty=Tensor[(15, 10, 14), float64] */;
    %633 = shape_of(%var_87, dtype="int32") /* ty=Tensor[(3), int32] */;
    %634 = cast(%var_87, dtype="float64") /* ty=Tensor[(15, 10, 14), float64] */;
    %635 = dyn.reshape(%632, %633, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %636 = subtract(%634, %635) /* ty=Tensor[(15, 10, 14), float64] */;
    %637 = cast(%636, dtype="float64") /* ty=Tensor[(15, 10, 14), float64] */;
    %638 = cast(%636, dtype="float32") /* ty=Tensor[(15, 10, 14), float32] */;
    %639 = shape_of(%630, dtype="int32") /* ty=Tensor[(3), int32] */;
    %640 = cast(%630, dtype="float32") /* ty=Tensor[(15, 10, 14), float32] */;
    %641 = dyn.reshape(%638, %639, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %642 = equal(%624, %625) /* ty=Tensor[(15, 10, 14), bool] */;
    %643 = acosh(%631) /* ty=Tensor[(15, 10, 14), float64] */;
    %644 = log10(%637) /* ty=Tensor[(15, 10, 14), float64] */;
    %645 = divide(%640, %641) /* ty=Tensor[(15, 10, 14), float32] */;
    (%642, %643, %644, %645)
  };
  %646(%var_141, %var_142, %var_143) /* ty=(Tensor[(15, 10, 14), bool], Tensor[(15, 10, 14), float64], Tensor[(15, 10, 14), float64], Tensor[(15, 10, 14), float32]) */
}

def @func_7989() -> (Tensor[(1, 10, 15), float64],) {
  %648 = fn () -> (Tensor[(1, 10, 15), float64],) {
    %647 = @func_4854() /* ty=Tensor[(1, 10, 15), float64] */;
    (%647,)
  };
  %648() /* ty=(Tensor[(1, 10, 15), float64],) */
}

def @func_7375(%var_7371: Tensor[(12, 3, 6), float64]) -> (Tensor[(12, 3, 6), float64],) {
  %649 = cast(%var_7371, dtype="float64") /* ty=Tensor[(12, 3, 6), float64] */;
  %650 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(12, 3, 6), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %651 = cast(meta[relay.Constant][39] /* ty=Tensor[(12, 3, 6), float64] */, dtype="float64") /* ty=Tensor[(12, 3, 6), float64] */;
  %652 = dyn.reshape(%649, %650, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %653 = power(%651, %652) /* ty=Tensor[(12, 3, 6), float64] */;
  (%653,)
}

def @func_6108() -> Tensor[(3, 15, 14), float32] {
  @func_6106() /* ty=Tensor[(3, 15, 14), float32] */
}

def @func_6643() -> (Tensor[(1, 10, 15), float64],) {
  %655 = fn () -> (Tensor[(1, 10, 15), float64],) {
    %654 = @func_4854() /* ty=Tensor[(1, 10, 15), float64] */;
    (%654,)
  };
  %655() /* ty=(Tensor[(1, 10, 15), float64],) */
}

def @func_9369() -> (Tensor[(3, 15, 14), float32], Tensor[(1, 10, 15), float64], Tensor[(14700), uint32], Tensor[(1, 10, 15), float64], Tensor[(?, 10, 15), int8]) {
  %656 = cast(meta[relay.Constant][40] /* ty=Tensor[(14700), uint32] */, dtype="uint32") /* ty=Tensor[(14700), uint32] */;
  %657 = reshape(%656, newshape=[2100, 7]) /* ty=Tensor[(2100, 7), uint32] */;
  %658 = @func_6608(%657) /* ty=(Tensor[(1, 10, 15), float64], Tensor[(2100, 7), bool]) */;
  %659 = @func_5372() /* ty=(Tensor[(?, 10, 15), int8],) */;
  %660 = @func_9076() /* ty=Tensor[(3, 15, 14), float32] */;
  %661 = %658.0;
  %662 = @func_7264() /* ty=Tensor[(1, 10, 15), float64] */;
  %663 = %659.0;
  (%660, %661, meta[relay.Constant][40] /* ty=Tensor[(14700), uint32] */, %662, %663)
}

def @func_6139(%var_6137: Tensor[(6, 2, 9), float64], %var_6138: Tensor[(135), float32]) -> (Tensor[(6, 2, 9), float64], Tensor[(3, 15, 3), float32], Tensor[(135), float32]) {
  %669 = fn (%var_6117: Tensor[(6, 2, 9), float64], %var_6133: Tensor[(135), float32]) -> (Tensor[(6, 2, 9), float64], Tensor[(3, 15, 3), float32], Tensor[(135), float32]) {
    %664 = cast(%var_6117, dtype="float64") /* ty=Tensor[(6, 2, 9), float64] */;
    %665 = cast(%var_6133, dtype="float32") /* ty=Tensor[(135), float32] */;
    %666 = reshape(%665, newshape=[3, 15, 3]) /* ty=Tensor[(3, 15, 3), float32] */;
    %667 = asinh(%664) /* ty=Tensor[(6, 2, 9), float64] */;
    %668 = @func_5835(%666) /* ty=Tensor[(3, 15, 3), float32] */;
    (%667, %668, %var_6133)
  };
  %669(%var_6137, %var_6138) /* ty=(Tensor[(6, 2, 9), float64], Tensor[(3, 15, 3), float32], Tensor[(135), float32]) */
}

def @func_9573() -> (Tensor[(3, 15, 14), float32], Tensor[(1, 10, 15), float64]) {
  %670 = @func_9320() /* ty=(Tensor[(3, 15, 14), float32],) */;
  %671 = %670.0;
  %672 = @func_7921() /* ty=Tensor[(1, 10, 15), float64] */;
  (%671, %672)
}

def @func_6360(%var_6327: Tensor[(2100), float32], %var_6345: Tensor[(1560), float64]) -> (Tensor[(?, 10, 15), int8], Tensor[(1, 10, 15), float32], Tensor[(520, 1), int32], Tensor[(2100), float32], Tensor[(128, 28), float32], Tensor[(1, 10, 15), float64], Tensor[(15, 10, 14), float64], Tensor[(224), float32], Tensor[(540), float64], Tensor[(15, 8, 13), float32], Tensor[(1560), float64]) {
  %673 = @func_5257() /* ty=(Tensor[(?, 10, 15), int8],) */;
  %674 = cast(meta[relay.Constant][41] /* ty=Tensor[(520, 1), int32] */, dtype="int32") /* ty=Tensor[(520, 1), int32] */;
  %675 = cast(%var_6327, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %676 = cast(meta[relay.Constant][42] /* ty=Tensor[(128, 28), float32] */, dtype="float32") /* ty=Tensor[(128, 28), float32] */;
  %677 = reshape(%674, newshape=[520, 1]) /* ty=Tensor[(520, 1), int32] */;
  %678 = reshape(%675, newshape=[2100]) /* ty=Tensor[(2100), float32] */;
  %679 = reshape(%676, newshape=[3584]) /* ty=Tensor[(3584), float32] */;
  %680 = @func_5080(%677, %678, %679) /* ty=(Tensor[(1, 10, 15), float32], Tensor[(13, 4, 10), int32], Tensor[(520, 1), int32], Tensor[(2100), float32], Tensor[(224), float32], Tensor[(3584), float32]) */;
  %681 = @func_5474() /* ty=(Tensor[(3, 15, 14), float32], Tensor[(1, 10, 15), float64], Tensor[(2100, ?), uint32]) */;
  %682 = cast(meta[relay.Constant][41] /* ty=Tensor[(520, 1), int32] */, dtype="int32") /* ty=Tensor[(520, 1), int32] */;
  %683 = cast(meta[relay.Constant][41] /* ty=Tensor[(520, 1), int32] */, dtype="int32") /* ty=Tensor[(520, 1), int32] */;
  %684 = cast(%var_6327, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %685 = cast(meta[relay.Constant][43] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
  %686 = cast(meta[relay.Constant][42] /* ty=Tensor[(128, 28), float32] */, dtype="float32") /* ty=Tensor[(128, 28), float32] */;
  %687 = reshape(%682, newshape=[13, 4, 10]) /* ty=Tensor[(13, 4, 10), int32] */;
  %688 = reshape(%683, newshape=[13, 4, 10]) /* ty=Tensor[(13, 4, 10), int32] */;
  %689 = reshape(%684, newshape=[2100]) /* ty=Tensor[(2100), float32] */;
  %690 = reshape(%685, newshape=[224]) /* ty=Tensor[(224), float32] */;
  %691 = reshape(%686, newshape=[3584]) /* ty=Tensor[(3584), float32] */;
  %692 = @func_2794(%687, %688, %689, %690, %691) /* ty=(Tensor[(13, 4, 10), int32], Tensor[(15, 10, 14), float64], Tensor[(2100), float32], Tensor[(540), float64], Tensor[(224), float32], Tensor[(3584), float32], Tensor[(540), float64], Tensor[(15, 10, 14), bool]) */;
  %693 = cast(meta[relay.Constant][42] /* ty=Tensor[(128, 28), float32] */, dtype="float32") /* ty=Tensor[(128, 28), float32] */;
  %694 = reshape(%693, newshape=[3584]) /* ty=Tensor[(3584), float32] */;
  %695 = @func_4881(%694) /* ty=(Tensor[(15, 9, 6), uint16], Tensor[(810), uint16], Tensor[(1, 10, 15), float32], Tensor[(1, 2100), float32], Tensor[(16, 14), float32], Tensor[(3584), float32], Tensor[(540), float64]) */;
  %696 = cast(%var_6345, dtype="float64") /* ty=Tensor[(1560), float64] */;
  %697 = reshape(%696, newshape=[15, 8, 13]) /* ty=Tensor[(15, 8, 13), float64] */;
  %698 = %673.0;
  %699 = %680.0;
  %700 = %681.1;
  %701 = %692.1;
  %702 = %695.6;
  %703 = @func_2229(%697) /* ty=Tensor[(15, 8, 13), float32] */;
  (%698, %699, meta[relay.Constant][41] /* ty=Tensor[(520, 1), int32] */, %var_6327, meta[relay.Constant][42] /* ty=Tensor[(128, 28), float32] */, %700, %701, meta[relay.Constant][43] /* ty=Tensor[(224), float32] */, %702, %703, %var_6345)
}

def @func_7033(%var_7031: Tensor[(3, 15, 14), float32]) -> (Tensor[(3, 15, 14), uint16], Tensor[(3, 15, 14), float32], Tensor[(3, 15, 14), uint16]) {
  @func_7030(%var_7031) /* ty=(Tensor[(3, 15, 14), uint16], Tensor[(3, 15, 14), float32], Tensor[(3, 15, 14), uint16]) */
}

def @func_9321() -> (Tensor[(3, 15, 14), float32],) {
  %705 = fn () -> (Tensor[(3, 15, 14), float32],) {
    %704 = @func_6106() /* ty=Tensor[(3, 15, 14), float32] */;
    (%704,)
  };
  %705() /* ty=(Tensor[(3, 15, 14), float32],) */
}

def @func_8425(%var_8418: Tensor[(15, 15, 8), bool], %var_8419: Tensor[(15, 15, 8), bool]) -> (Tensor[(15, 15, 8), bool], Tensor[(2100, ?), uint32]) {
  %706 = cast(%var_8419, dtype="bool") /* ty=Tensor[(15, 15, 8), bool] */;
  %707 = shape_of(%var_8418, dtype="int32") /* ty=Tensor[(3), int32] */;
  %708 = cast(%var_8418, dtype="bool") /* ty=Tensor[(15, 15, 8), bool] */;
  %709 = dyn.reshape(%706, %707, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %710 = @func_5474() /* ty=(Tensor[(3, 15, 14), float32], Tensor[(1, 10, 15), float64], Tensor[(2100, ?), uint32]) */;
  %711 = logical_and(%708, %709) /* ty=Tensor[(15, 15, 8), bool] */;
  %712 = %710.2;
  (%711, %712)
}

def @main(%var_9768: Tensor[(14, 10, 15), float64]) -> (Tensor[(3840), float32], Tensor[(2100), int64], Tensor[(14, 10, 15), bool], Tensor[(2100, ?), float64]) {
  %713 = cast(meta[relay.Constant][44] /* ty=Tensor[(3840), float32] */, dtype="float32") /* ty=Tensor[(3840), float32] */;
  %714 = cast(meta[relay.Constant][44] /* ty=Tensor[(3840), float32] */, dtype="float32") /* ty=Tensor[(3840), float32] */;
  %715 = @func_6264() /* ty=(Tensor[(2100, ?), uint32],) */;
  %716 = %715.0;
  %717 = cast(%716, dtype="float32") /* ty=Tensor[(2100, ?), float32] */;
  %718 = reshape(%713, newshape=[16, 15, 16]) /* ty=Tensor[(16, 15, 16), float32] */;
  %719 = reshape(%714, newshape=[16, 15, 16]) /* ty=Tensor[(16, 15, 16), float32] */;
  %720 = reshape(%717, newshape=[2100]) /* ty=Tensor[(2100), float32] */;
  %721 = @func_1780(%718, %719, %720) /* ty=(Tensor[(16, 15, 16), bool], Tensor[(1, 2100), float32], Tensor[(2100), float32], Tensor[(54, 10), float32]) */;
  %722 = %721.2;
  %723 = @func_6265() /* ty=(Tensor[(2100, ?), uint32],) */;
  %724 = %723.0;
  %725 = cast(%724, dtype="int64") /* ty=Tensor[(2100, ?), int64] */;
  %726 = shape_of(%722, dtype="int32") /* ty=Tensor[(1), int32] */;
  %727 = cast(%722, dtype="int64") /* ty=Tensor[(2100), int64] */;
  %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?), int64] */;
  %729 = @func_9371() /* ty=(Tensor[(3, 15, 14), float32], Tensor[(1, 10, 15), float64], Tensor[(14700), uint32], Tensor[(1, 10, 15), float64], Tensor[(?, 10, 15), int8]) */;
  %730 = %729.1;
  %731 = cast(%730, dtype="bool") /* ty=Tensor[(1, 10, 15), bool] */;
  %732 = cast(%var_9768, dtype="bool") /* ty=Tensor[(14, 10, 15), bool] */;
  %733 = cast(%724, dtype="float64") /* ty=Tensor[(2100, ?), float64] */;
  %734 = bitwise_xor(%727, %728) /* ty=Tensor[(2100), int64] */;
  %735 = not_equal(%731, %732) /* ty=Tensor[(14, 10, 15), bool] */;
  %736 = sigmoid(%733) /* ty=Tensor[(2100, ?), float64] */;
  (meta[relay.Constant][44] /* ty=Tensor[(3840), float32] */, %734, %735, %736)
}

def @func_6364(%var_6362: Tensor[(2100), float32], %var_6363: Tensor[(1560), float64]) -> (Tensor[(?, 10, 15), int8], Tensor[(1, 10, 15), float32], Tensor[(520, 1), int32], Tensor[(2100), float32], Tensor[(128, 28), float32], Tensor[(1, 10, 15), float64], Tensor[(15, 10, 14), float64], Tensor[(224), float32], Tensor[(540), float64], Tensor[(15, 8, 13), float32], Tensor[(1560), float64]) {
  @func_6360(%var_6362, %var_6363) /* ty=(Tensor[(?, 10, 15), int8], Tensor[(1, 10, 15), float32], Tensor[(520, 1), int32], Tensor[(2100), float32], Tensor[(128, 28), float32], Tensor[(1, 10, 15), float64], Tensor[(15, 10, 14), float64], Tensor[(224), float32], Tensor[(540), float64], Tensor[(15, 8, 13), float32], Tensor[(1560), float64]) */
}

def @func_8789(%var_8787: Tensor[(936), uint32]) -> (Tensor[(?, 10, 15), int8], Tensor[(13, 8, 9), float64], Tensor[(936), uint32], Tensor[(1, 10, 15), float64]) {
  @func_8786(%var_8787) /* ty=(Tensor[(?, 10, 15), int8], Tensor[(13, 8, 9), float64], Tensor[(936), uint32], Tensor[(1, 10, 15), float64]) */
}

def @func_7629() -> (Tensor[(540), float64], Tensor[(14, 10, 15), int64]) {
  %746 = fn () -> (Tensor[(540), float64], Tensor[(14, 10, 15), int64]) {
    %737 = @func_5118() /* ty=(Tensor[(1, 10, 15), float64], Tensor[(540), float64], Tensor[(3584), float32]) */;
    %738 = @func_7264() /* ty=Tensor[(1, 10, 15), float64] */;
    %739 = cast(%738, dtype="uint64") /* ty=Tensor[(1, 10, 15), uint64] */;
    %740 = cast(meta[relay.Constant][45] /* ty=Tensor[(14, 10, 15), float64] */, dtype="uint64") /* ty=Tensor[(14, 10, 15), uint64] */;
    %741 = add(%739, %740) /* ty=Tensor[(14, 10, 15), uint64] */;
    %742 = cast(%741, dtype="int64") /* ty=Tensor[(14, 10, 15), int64] */;
    %743 = cast(%738, dtype="int64") /* ty=Tensor[(1, 10, 15), int64] */;
    %744 = %737.1;
    %745 = multiply(%742, %743) /* ty=Tensor[(14, 10, 15), int64] */;
    (%744, %745)
  };
  %746() /* ty=(Tensor[(540), float64], Tensor[(14, 10, 15), int64]) */
}

def @func_8588(%var_8585: Tensor[(3584), float32], %var_8586: Tensor[(224), float32], %var_8587: Tensor[(540), float64]) -> (Tensor[(?, 10, 15), int8], Tensor[(2100, 16), bool], Tensor[(3584), int32], Tensor[(14, 16, 16), float64], Tensor[(224), float32], Tensor[(540), float64]) {
  %772 = fn (%var_8556: Tensor[(3584), float32], %var_8572: Tensor[(224), float32], %var_8573: Tensor[(540), float64]) -> (Tensor[(?, 10, 15), int8], Tensor[(2100, 16), bool], Tensor[(3584), int32], Tensor[(14, 16, 16), float64], Tensor[(224), float32], Tensor[(540), float64]) {
    %747 = @func_5257() /* ty=(Tensor[(?, 10, 15), int8],) */;
    %748 = cast(meta[relay.Constant][46] /* ty=Tensor[(33600), uint32] */, dtype="uint32") /* ty=Tensor[(33600), uint32] */;
    %749 = reshape(%748, newshape=[2100, 16]) /* ty=Tensor[(2100, 16), uint32] */;
    %750 = @func_6962(%749) /* ty=Tensor[(2100, 16), float32] */;
    %751 = cast(meta[relay.Constant][46] /* ty=Tensor[(33600), uint32] */, dtype="bool") /* ty=Tensor[(33600), bool] */;
    %752 = shape_of(%750, dtype="int32") /* ty=Tensor[(2), int32] */;
    %753 = cast(%750, dtype="bool") /* ty=Tensor[(2100, 16), bool] */;
    %754 = dyn.reshape(%751, %752, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %755 = @func_5118() /* ty=(Tensor[(1, 10, 15), float64], Tensor[(540), float64], Tensor[(3584), float32]) */;
    %756 = %755.2;
    %757 = cast(%var_8556, dtype="int32") /* ty=Tensor[(3584), int32] */;
    %758 = shape_of(%756, dtype="int32") /* ty=Tensor[(1), int32] */;
    %759 = cast(%756, dtype="int32") /* ty=Tensor[(3584), int32] */;
    %760 = dyn.reshape(%757, %758, newshape=[]) /* ty=Tensor[(?), int32] */;
    %761 = cast(%var_8572, dtype="float32") /* ty=Tensor[(224), float32] */;
    %762 = bitwise_or(%759, %760) /* ty=Tensor[(3584), int32] */;
    %763 = cast(%762, dtype="float32") /* ty=Tensor[(3584), float32] */;
    %764 = cast(%var_8573, dtype="float64") /* ty=Tensor[(540), float64] */;
    %765 = reshape(%761, newshape=[14, 1, 16]) /* ty=Tensor[(14, 1, 16), float32] */;
    %766 = reshape(%763, newshape=[14, 16, 16]) /* ty=Tensor[(14, 16, 16), float32] */;
    %767 = reshape(%764, newshape=[540]) /* ty=Tensor[(540), float64] */;
    %768 = @func_1824(%765, %766, %767) /* ty=(Tensor[(14, 16, 16), float64], Tensor[(1, 2100), float32], Tensor[(540), float64], Tensor[(2100), float32]) */;
    %769 = %747.0;
    %770 = logical_and(%753, %754) /* ty=Tensor[(2100, 16), bool] */;
    %771 = %768.0;
    (%769, %770, %762, %771, %var_8572, %var_8573)
  };
  %772(%var_8585, %var_8586, %var_8587) /* ty=(Tensor[(?, 10, 15), int8], Tensor[(2100, 16), bool], Tensor[(3584), int32], Tensor[(14, 16, 16), float64], Tensor[(224), float32], Tensor[(540), float64]) */
}

def @func_8277() -> (Tensor[(3, 15, 14), float32],) {
  %776 = fn () -> (Tensor[(3, 15, 14), float32],) {
    %773 = @func_5361() /* ty=Tensor[(3, 15, 14), float32] */;
    %774 = cast(%773, dtype="float32") /* ty=Tensor[(3, 15, 14), float32] */;
    %775 = log10(%774) /* ty=Tensor[(3, 15, 14), float32] */;
    (%775,)
  };
  %776() /* ty=(Tensor[(3, 15, 14), float32],) */
}

def @func_7378(%var_7376: Tensor[(12, 3, 6), float64]) -> (Tensor[(12, 3, 6), float64],) {
  @func_7375(%var_7376) /* ty=(Tensor[(12, 3, 6), float64],) */
}

def @func_7861() -> Tensor[(3, 15, 14), float32] {
  %777 = fn () -> Tensor[(3, 15, 14), float32] {
    @func_6106() /* ty=Tensor[(3, 15, 14), float32] */
  };
  %777() /* ty=Tensor[(3, 15, 14), float32] */
}

def @func_8325() -> Tensor[(3, 15, 14), float32] {
  @func_8323() /* ty=Tensor[(3, 15, 14), float32] */
}

def @func_309(%var_307: Tensor[(9, 12, 5), float64], %var_308: Tensor[(1, 2100), float32]) -> (Tensor[(9, 12, 5), float64], Tensor[(15, 10, 14), bool], Tensor[(1, 2100), float32]) {
  %789 = fn (%var_290: Tensor[(9, 12, 5), float64], %var_301: Tensor[(1, 2100), float32]) -> (Tensor[(9, 12, 5), float64], Tensor[(15, 10, 14), bool], Tensor[(1, 2100), float32]) {
    %778 = cast(1.43898f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %779 = cast(%var_290, dtype="float64") /* ty=Tensor[(9, 12, 5), float64] */;
    %780 = cast(%var_301, dtype="float32") /* ty=Tensor[(1, 2100), float32] */;
    %781 = cast(%var_301, dtype="int64") /* ty=Tensor[(1, 2100), int64] */;
    %782 = cast(%var_301, dtype="float32") /* ty=Tensor[(1, 2100), float32] */;
    %783 = reshape(%780, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), float32] */;
    %784 = reshape(%781, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), int64] */;
    %785 = reshape(%782, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), float32] */;
    %786 = @func_140(%783, %784, %785) /* ty=(Tensor[(15, 10, 14), bool], Tensor[(15, 10, 14), float64], Tensor[(15, 10, 14), float64], Tensor[(15, 10, 14), float32]) */;
    %787 = floor_mod(%778, %779) /* ty=Tensor[(9, 12, 5), float64] */;
    %788 = %786.0;
    (%787, %788, %var_301)
  };
  %789(%var_307, %var_308) /* ty=(Tensor[(9, 12, 5), float64], Tensor[(15, 10, 14), bool], Tensor[(1, 2100), float32]) */
}

def @func_3609(%var_3608: Tensor[(15, 9, 6), uint16]) -> Tensor[(15, 9, 6), uint16] {
  %794 = fn (%var_3598: Tensor[(15, 9, 6), uint16]) -> Tensor[(15, 9, 6), uint16] {
    %790 = cast(meta[relay.Constant][47] /* ty=Tensor[(15, 9, 6), uint16] */, dtype="uint16") /* ty=Tensor[(15, 9, 6), uint16] */;
    %791 = shape_of(%var_3598, dtype="int32") /* ty=Tensor[(3), int32] */;
    %792 = cast(%var_3598, dtype="uint16") /* ty=Tensor[(15, 9, 6), uint16] */;
    %793 = dyn.reshape(%790, %791, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    bitwise_and(%792, %793) /* ty=Tensor[(15, 9, 6), uint16] */
  };
  %794(%var_3608) /* ty=Tensor[(15, 9, 6), uint16] */
}

def @func_1177(%var_1174: Tensor[(4, 16, 11), float32], %var_1175: Tensor[(4, 16, 11), float32], %var_1176: Tensor[(4, 16, 11), float32]) -> (Tensor[(4, 16, 11), float32], Tensor[(4, 16, 11), bool], Tensor[(1, 2100), float32], Tensor[(540), float64], Tensor[(2100), float32]) {
  %811 = fn (%var_1148: Tensor[(4, 16, 11), float32], %var_1149: Tensor[(4, 16, 11), float32], %var_1156: Tensor[(4, 16, 11), float32]) -> (Tensor[(4, 16, 11), float32], Tensor[(4, 16, 11), bool], Tensor[(1, 2100), float32], Tensor[(540), float64], Tensor[(2100), float32]) {
    %795 = cast(%var_1149, dtype="float32") /* ty=Tensor[(4, 16, 11), float32] */;
    %796 = shape_of(%var_1148, dtype="int32") /* ty=Tensor[(3), int32] */;
    %797 = cast(%var_1148, dtype="float32") /* ty=Tensor[(4, 16, 11), float32] */;
    %798 = dyn.reshape(%795, %796, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %799 = cast(%var_1156, dtype="bool") /* ty=Tensor[(4, 16, 11), bool] */;
    %800 = shape_of(%var_1149, dtype="int32") /* ty=Tensor[(3), int32] */;
    %801 = cast(%var_1149, dtype="bool") /* ty=Tensor[(4, 16, 11), bool] */;
    %802 = dyn.reshape(%799, %800, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %803 = cast(meta[relay.Constant][48] /* ty=Tensor[(540), float64] */, dtype="float64") /* ty=Tensor[(540), float64] */;
    %804 = cast(meta[relay.Constant][49] /* ty=Tensor[(2100), float32] */, dtype="float32") /* ty=Tensor[(2100), float32] */;
    %805 = reshape(%803, newshape=[9, 12, 5]) /* ty=Tensor[(9, 12, 5), float64] */;
    %806 = reshape(%804, newshape=[1, 2100]) /* ty=Tensor[(1, 2100), float32] */;
    %807 = @func_306(%805, %806) /* ty=(Tensor[(9, 12, 5), float64], Tensor[(15, 10, 14), bool], Tensor[(1, 2100), float32]) */;
    %808 = mod(%797, %798) /* ty=Tensor[(4, 16, 11), float32] */;
    %809 = less_equal(%801, %802) /* ty=Tensor[(4, 16, 11), bool] */;
    %810 = %807.2;
    (%808, %809, %810, meta[relay.Constant][48] /* ty=Tensor[(540), float64] */, meta[relay.Constant][49] /* ty=Tensor[(2100), float32] */)
  };
  %811(%var_1174, %var_1175, %var_1176) /* ty=(Tensor[(4, 16, 11), float32], Tensor[(4, 16, 11), bool], Tensor[(1, 2100), float32], Tensor[(540), float64], Tensor[(2100), float32]) */
}

def @func_4476(%var_4458: Tensor[(3, 14, 4), bool]) -> Tensor[(3, 14, 4), bool] {
  %812 = cast(meta[relay.Constant][50] /* ty=Tensor[(3, 14, 4), bool] */, dtype="bool") /* ty=Tensor[(3, 14, 4), bool] */;
  %813 = shape_of(%var_4458, dtype="int32") /* ty=Tensor[(3), int32] */;
  %814 = cast(%var_4458, dtype="bool") /* ty=Tensor[(3, 14, 4), bool] */;
  %815 = dyn.reshape(%812, %813, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%814, %815) /* ty=Tensor[(3, 14, 4), bool] */
}

def @func_8131(%var_8128: Tensor[(810), uint16]) -> (Tensor[(11, 16, 2), float32], Tensor[(15, 9, 6), uint16], Tensor[(810), uint16]) {
  %816 = @func_7650() /* ty=Tensor[(11, 16, 2), float32] */;
  %817 = cast(%816, dtype="float32") /* ty=Tensor[(11, 16, 2), float32] */;
  %818 = cast(%var_8128, dtype="uint16") /* ty=Tensor[(810), uint16] */;
  %819 = reshape(%818, newshape=[15, 9, 6]) /* ty=Tensor[(15, 9, 6), uint16] */;
  %820 = acos(%817) /* ty=Tensor[(11, 16, 2), float32] */;
  %821 = @func_3607(%819) /* ty=Tensor[(15, 9, 6), uint16] */;
  (%820, %821, %var_8128)
}

def @func_7921() -> Tensor[(1, 10, 15), float64] {
  %822 = @func_5319() /* ty=(Tensor[(1, 10, 15), float64],) */;
  %822.0
}

def @func_9076() -> Tensor[(3, 15, 14), float32] {
  @func_6106() /* ty=Tensor[(3, 15, 14), float32] */
}

def @func_7149() -> Tensor[(3584), float32] {
  %824 = fn () -> Tensor[(3584), float32] {
    %823 = @func_5118() /* ty=(Tensor[(1, 10, 15), float64], Tensor[(540), float64], Tensor[(3584), float32]) */;
    %823.2
  };
  %824() /* ty=Tensor[(3584), float32] */
}

def @func_5873(%var_5871: Tensor[(3, 15, 14), float32]) -> (Tensor[(3, 15, 14), bool], Tensor[(3584), float32], Tensor[(3584), float32]) {
  @func_5870(%var_5871) /* ty=(Tensor[(3, 15, 14), bool], Tensor[(3584), float32], Tensor[(3584), float32]) */
}

def @func_9672() -> (Tensor[(540), float64], Tensor[(3, 15, 14), float32]) {
  @func_9670() /* ty=(Tensor[(540), float64], Tensor[(3, 15, 14), float32]) */
}

def @func_7839(%var_7837: Tensor[(3584), float32], %var_7838: Tensor[(9, 60), float64]) -> (Tensor[(3, 15, 14), float32], Tensor[(540), float64], Tensor[(224), float32], Tensor[(3584), float32], Tensor[(9, 60), float64]) {
  %834 = fn (%var_7827: Tensor[(3584), float32], %var_7828: Tensor[(9, 60), float64]) -> (Tensor[(3, 15, 14), float32], Tensor[(540), float64], Tensor[(224), float32], Tensor[(3584), float32], Tensor[(9, 60), float64]) {
    %825 = cast(meta[relay.Constant][51] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
    %826 = cast(%var_7827, dtype="float32") /* ty=Tensor[(3584), float32] */;
    %827 = cast(%var_7828, dtype="float64") /* ty=Tensor[(9, 60), float64] */;
    %828 = reshape(%825, newshape=[14, 1, 16]) /* ty=Tensor[(14, 1, 16), float32] */;
    %829 = reshape(%826, newshape=[14, 16, 16]) /* ty=Tensor[(14, 16, 16), float32] */;
    %830 = reshape(%827, newshape=[540]) /* ty=Tensor[(540), float64] */;
    %831 = @func_1824(%828, %829, %830) /* ty=(Tensor[(14, 16, 16), float64], Tensor[(1, 2100), float32], Tensor[(540), float64], Tensor[(2100), float32]) */;
    %832 = @func_6106() /* ty=Tensor[(3, 15, 14), float32] */;
    %833 = %831.2;
    (%832, %833, meta[relay.Constant][51] /* ty=Tensor[(224), float32] */, %var_7827, %var_7828)
  };
  %834(%var_7837, %var_7838) /* ty=(Tensor[(3, 15, 14), float32], Tensor[(540), float64], Tensor[(224), float32], Tensor[(3584), float32], Tensor[(9, 60), float64]) */
}

def @func_6201(%var_6200: Tensor[(10, 3), float32]) -> (Tensor[(?, 10, 15), int8], Tensor[(5, 6), float32], Tensor[(10, 3), float32]) {
  %841 = fn (%var_6186: Tensor[(10, 3), float32]) -> (Tensor[(?, 10, 15), int8], Tensor[(5, 6), float32], Tensor[(10, 3), float32]) {
    %835 = @func_5962() /* ty=(Tensor[(?, 10, 15), int8],) */;
    %836 = cast(%var_6186, dtype="float32") /* ty=Tensor[(10, 3), float32] */;
    %837 = reshape(%836, newshape=[5, 6]) /* ty=Tensor[(5, 6), float32] */;
    %838 = @func_3239(%837) /* ty=(Tensor[(5, 6), float32], Tensor[(9, 11, 9), uint64], Tensor[(99, 9), uint64]) */;
    %839 = %835.0;
    %840 = %838.0;
    (%839, %840, %var_6186)
  };
  %841(%var_6200) /* ty=(Tensor[(?, 10, 15), int8], Tensor[(5, 6), float32], Tensor[(10, 3), float32]) */
}

def @func_5963() -> (Tensor[(?, 10, 15), int8],) {
  %843 = fn () -> (Tensor[(?, 10, 15), int8],) {
    %842 = @func_5016() /* ty=Tensor[(?, 10, 15), int8] */;
    (%842,)
  };
  %843() /* ty=(Tensor[(?, 10, 15), int8],) */
}

def @func_6730() -> Tensor[(3, 15, 14), float64] {
  %845 = fn () -> Tensor[(3, 15, 14), float64] {
    %844 = @func_6526() /* ty=(Tensor[(3, 15, 14), float64],) */;
    %844.0
  };
  %845() /* ty=Tensor[(3, 15, 14), float64] */
}

def @func_5017() -> Tensor[(?, 10, 15), int8] {
  %852 = fn () -> Tensor[(?, 10, 15), int8] {
    %846 = @func_4835() /* ty=Tensor[(1, 10, 15), float32] */;
    %847 = @func_4835() /* ty=Tensor[(1, 10, 15), float32] */;
    %848 = cast(%847, dtype="int8") /* ty=Tensor[(1, 10, 15), int8] */;
    %849 = shape_of(%846, dtype="int32") /* ty=Tensor[(3), int32] */;
    %850 = cast(%846, dtype="int8") /* ty=Tensor[(1, 10, 15), int8] */;
    %851 = dyn.reshape(%848, %849, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    subtract(%850, %851) /* ty=Tensor[(?, 10, 15), int8] */
  };
  %852() /* ty=Tensor[(?, 10, 15), int8] */
}

def @func_4855() -> Tensor[(1, 10, 15), float64] {
  %854 = fn () -> Tensor[(1, 10, 15), float64] {
    %853 = @func_4530() /* ty=(Tensor[(1, 10, 15), float32], Tensor[(1, 10, 15), float64]) */;
    %853.1
  };
  %854() /* ty=Tensor[(1, 10, 15), float64] */
}

def @func_6265() -> (Tensor[(2100, ?), uint32],) {
  %857 = fn () -> (Tensor[(2100, ?), uint32],) {
    %855 = @func_5474() /* ty=(Tensor[(3, 15, 14), float32], Tensor[(1, 10, 15), float64], Tensor[(2100, ?), uint32]) */;
    %856 = %855.2;
    (%856,)
  };
  %857() /* ty=(Tensor[(2100, ?), uint32],) */
}

def @func_8534() -> Tensor[(3, 15, 14), float64] {
  %860 = fn () -> Tensor[(3, 15, 14), float64] {
    %858 = @func_5361() /* ty=Tensor[(3, 15, 14), float32] */;
    %859 = cast(%858, dtype="float64") /* ty=Tensor[(3, 15, 14), float64] */;
    atanh(%859) /* ty=Tensor[(3, 15, 14), float64] */
  };
  %860() /* ty=Tensor[(3, 15, 14), float64] */
}

def @func_6023(%var_6022: Tensor[(8, 9, 3), uint16]) -> Tensor[(8, 9, 3), uint16] {
  %865 = fn (%var_6014: Tensor[(8, 9, 3), uint16]) -> Tensor[(8, 9, 3), uint16] {
    %861 = cast(%var_6014, dtype="uint16") /* ty=Tensor[(8, 9, 3), uint16] */;
    %862 = shape_of(meta[relay.Constant][52] /* ty=Tensor[(8, 9, 3), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %863 = cast(meta[relay.Constant][52] /* ty=Tensor[(8, 9, 3), uint16] */, dtype="uint16") /* ty=Tensor[(8, 9, 3), uint16] */;
    %864 = dyn.reshape(%861, %862, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    bitwise_or(%863, %864) /* ty=Tensor[(8, 9, 3), uint16] */
  };
  %865(%var_6022) /* ty=Tensor[(8, 9, 3), uint16] */
}

def @func_9412() -> Tensor[(3, 15, 14), float32] {
  %866 = @func_9320() /* ty=(Tensor[(3, 15, 14), float32],) */;
  %866.0
}

def @func_5257() -> (Tensor[(?, 10, 15), int8],) {
  %867 = @func_5016() /* ty=Tensor[(?, 10, 15), int8] */;
  (%867,)
}

def @func_4881(%var_4875: Tensor[(3584), float32]) -> (Tensor[(15, 9, 6), uint16], Tensor[(810), uint16], Tensor[(1, 10, 15), float32], Tensor[(1, 2100), float32], Tensor[(16, 14), float32], Tensor[(3584), float32], Tensor[(540), float64]) {
  %868 = cast(meta[relay.Constant][53] /* ty=Tensor[(810), uint16] */, dtype="uint16") /* ty=Tensor[(810), uint16] */;
  %869 = reshape(%868, newshape=[15, 9, 6]) /* ty=Tensor[(15, 9, 6), uint16] */;
  %870 = @func_4854() /* ty=Tensor[(1, 10, 15), float64] */;
  %871 = cast(%870, dtype="float32") /* ty=Tensor[(1, 10, 15), float32] */;
  %872 = cast(meta[relay.Constant][54] /* ty=Tensor[(16, 14), float32] */, dtype="float32") /* ty=Tensor[(16, 14), float32] */;
  %873 = cast(%var_4875, dtype="float32") /* ty=Tensor[(3584), float32] */;
  %874 = cast(meta[relay.Constant][55] /* ty=Tensor[(540), float64] */, dtype="float64") /* ty=Tensor[(540), float64] */;
  %875 = reshape(%872, newshape=[14, 1, 16]) /* ty=Tensor[(14, 1, 16), float32] */;
  %876 = reshape(%873, newshape=[14, 16, 16]) /* ty=Tensor[(14, 16, 16), float32] */;
  %877 = reshape(%874, newshape=[540]) /* ty=Tensor[(540), float64] */;
  %878 = @func_1824(%875, %876, %877) /* ty=(Tensor[(14, 16, 16), float64], Tensor[(1, 2100), float32], Tensor[(540), float64], Tensor[(2100), float32]) */;
  %879 = @func_3607(%869) /* ty=Tensor[(15, 9, 6), uint16] */;
  %880 = rsqrt(%871) /* ty=Tensor[(1, 10, 15), float32] */;
  %881 = %878.1;
  (%879, meta[relay.Constant][53] /* ty=Tensor[(810), uint16] */, %880, %881, meta[relay.Constant][54] /* ty=Tensor[(16, 14), float32] */, %var_4875, meta[relay.Constant][55] /* ty=Tensor[(540), float64] */)
}

def @func_9067(%var_9065: Tensor[(4, 8, 12), uint64]) -> (Tensor[(4, 8, 12), uint16], Tensor[(4, 8, 12), float64]) {
  @func_9064(%var_9065) /* ty=(Tensor[(4, 8, 12), uint16], Tensor[(4, 8, 12), float64]) */
}

def @func_9173(%var_9170: Tensor[(520), int32], %var_9171: Tensor[(3584), float32], %var_9172: Tensor[(3840), float32]) -> (Tensor[(3, 15, 14), float32], Tensor[(1, 10, 15), float32], Tensor[(520), int32], Tensor[(2100), float32], Tensor[(3584), float32], Tensor[(2080), float32], Tensor[(3840), float32]) {
  %897 = fn (%var_9162: Tensor[(520), int32], %var_9164: Tensor[(3584), float32], %var_9166: Tensor[(3840), float32]) -> (Tensor[(3, 15, 14), float32], Tensor[(1, 10, 15), float32], Tensor[(520), int32], Tensor[(2100), float32], Tensor[(3584), float32], Tensor[(2080), float32], Tensor[(3840), float32]) {
    %882 = @func_8323() /* ty=Tensor[(3, 15, 14), float32] */;
    %883 = cast(%882, dtype="float32") /* ty=Tensor[(3, 15, 14), float32] */;
    %884 = cast(%var_9162, dtype="int32") /* ty=Tensor[(520), int32] */;
    %885 = cast(meta[relay.Constant][56] /* ty=Tensor[(2100), float32] */, dtype="float32") /* ty=Tensor[(2100), float32] */;
    %886 = cast(%var_9164, dtype="float32") /* ty=Tensor[(3584), float32] */;
    %887 = cast(meta[relay.Constant][57] /* ty=Tensor[(2080), float32] */, dtype="float32") /* ty=Tensor[(2080), float32] */;
    %888 = cast(%var_9166, dtype="float32") /* ty=Tensor[(3840), float32] */;
    %889 = reshape(%884, newshape=[520]) /* ty=Tensor[(520), int32] */;
    %890 = reshape(%885, newshape=[2100]) /* ty=Tensor[(2100), float32] */;
    %891 = reshape(%886, newshape=[3584]) /* ty=Tensor[(3584), float32] */;
    %892 = reshape(%887, newshape=[2080]) /* ty=Tensor[(2080), float32] */;
    %893 = reshape(%888, newshape=[48, 80]) /* ty=Tensor[(48, 80), float32] */;
    %894 = @func_4624(%889, %890, %891, %892, %893) /* ty=(Tensor[(1, 10, 15), float32], Tensor[(3584), float32], Tensor[(520), int32], Tensor[(224), float32], Tensor[(3584), float32], Tensor[(15, 9, 6), uint16], Tensor[(810), uint16], Tensor[(2080), float32], Tensor[(540), float64], Tensor[(48, 80), float32], Tensor[(2100), float32]) */;
    %895 = asinh(%883) /* ty=Tensor[(3, 15, 14), float32] */;
    %896 = %894.0;
    (%895, %896, %var_9162, meta[relay.Constant][56] /* ty=Tensor[(2100), float32] */, %var_9164, meta[relay.Constant][57] /* ty=Tensor[(2080), float32] */, %var_9166)
  };
  %897(%var_9170, %var_9171, %var_9172) /* ty=(Tensor[(3, 15, 14), float32], Tensor[(1, 10, 15), float32], Tensor[(520), int32], Tensor[(2100), float32], Tensor[(3584), float32], Tensor[(2080), float32], Tensor[(3840), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen632/build/output.py", line 2100, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:42:31] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

