==========mod==========
#[version = "0.0.5"]
def @func_2630(%var_2585: Tensor[(2, 15, 8), float32], %var_2594: Tensor[(1792), float32]) -> (Tensor[(2, 15, 8), int8], Tensor[(7, 16, 16), float32], Tensor[(1792), float32], Tensor[(1170), float32]) {
  %0 = @func_1277() /* ty=Tensor[(2, 15, 8), float32] */;
  %1 = cast(%var_2585, dtype="int8") /* ty=Tensor[(2, 15, 8), int8] */;
  %2 = shape_of(%0, dtype="int32") /* ty=Tensor[(3), int32] */;
  %3 = cast(%0, dtype="int8") /* ty=Tensor[(2, 15, 8), int8] */;
  %4 = dyn.reshape(%1, %2, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %5 = cast(%var_2594, dtype="float32") /* ty=Tensor[(1792), float32] */;
  %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(1170), float32] */, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %7 = reshape(%5, newshape=[8, 224]) /* ty=Tensor[(8, 224), float32] */;
  %8 = reshape(%6, newshape=[1170]) /* ty=Tensor[(1170), float32] */;
  %9 = @func_1523(%7, %8) /* ty=(Tensor[(15, 14, 5), float32], Tensor[(7, 16, 16), float32], Tensor[(13, 10, 9), bool], Tensor[(1170), float32], Tensor[(180), float32], Tensor[(8, 224), float32], Tensor[(8, 224), float32]) */;
  %10 = multiply(%3, %4) /* ty=Tensor[(2, 15, 8), int8] */;
  %11 = %9.1;
  (%10, %11, %var_2594, meta[relay.Constant][0] /* ty=Tensor[(1170), float32] */)
}

def @func_4020() -> (Tensor[(15, 14, 5), float32], Tensor[(15, 14, 8), float64], Tensor[(1792), float32], Tensor[(576), float64]) {
  %12 = @func_1022() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 8), float64]) */;
  %13 = @func_1022() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 8), float64]) */;
  %14 = cast(meta[relay.Constant][1] /* ty=Tensor[(576), float64] */, dtype="float64") /* ty=Tensor[(576), float64] */;
  %15 = reshape(%14, newshape=[6, 16, 6]) /* ty=Tensor[(6, 16, 6), float64] */;
  %16 = @func_3865(%15) /* ty=(Tensor[(6, 16, 6), float64], Tensor[(1170), float32], Tensor[(1, 240), float32], Tensor[(1792), float32]) */;
  %17 = %12.0;
  %18 = %13.1;
  %19 = %16.3;
  (%17, %18, %19, meta[relay.Constant][1] /* ty=Tensor[(576), float64] */)
}

def @func_4332(%var_4308: Tensor[(1170), float32]) -> (Tensor[(1170), float64], Tensor[(15, 14, 5), float32]) {
  %20 = @func_1344() /* ty=Tensor[(1170), float32] */;
  %21 = cast(%var_4308, dtype="float64") /* ty=Tensor[(1170), float64] */;
  %22 = shape_of(%20, dtype="int32") /* ty=Tensor[(1), int32] */;
  %23 = cast(%20, dtype="float64") /* ty=Tensor[(1170), float64] */;
  %24 = dyn.reshape(%21, %22, newshape=[]) /* ty=Tensor[(?), float64] */;
  %25 = @func_1568() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32]) */;
  %26 = divide(%23, %24) /* ty=Tensor[(1170), float64] */;
  %27 = %25.0;
  (%26, %27)
}

def @func_7787() -> Tensor[(15, 14, 5), float32] {
  %28 = @func_7733() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %28.0
}

def @func_7833() -> (Tensor[(15, 14, 8), float64],) {
  %29 = @func_7177() /* ty=(Tensor[(15, 14, 8), float64],) */;
  %30 = %29.0;
  (%30,)
}

def @func_3115() -> (Tensor[(15, 14, 5), float32],) {
  %31 = @func_2217() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(12, 10, 3), bool], Tensor[(360), int64]) */;
  %32 = %31.0;
  (%32,)
}

def @func_5338() -> (Tensor[(15, 14, 8), float64],) {
  %33 = @func_2260() /* ty=Tensor[(15, 14, 8), float64] */;
  (%33,)
}

def @func_1150(%var_1131: Tensor[(3, 13), float32]) -> (Tensor[(3, 13), float32],) {
  %34 = cast(meta[relay.Constant][2] /* ty=Tensor[(3, 13), float32] */, dtype="float32") /* ty=Tensor[(3, 13), float32] */;
  %35 = shape_of(%var_1131, dtype="int32") /* ty=Tensor[(2), int32] */;
  %36 = cast(%var_1131, dtype="float32") /* ty=Tensor[(3, 13), float32] */;
  %37 = dyn.reshape(%34, %35, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %38 = divide(%36, %37) /* ty=Tensor[(3, 13), float32] */;
  (%38,)
}

def @func_2296(%var_2285: Tensor[(9, 10, 2), float32]) -> (Tensor[(9, 10, 2), float32], Tensor[(360), int64], Tensor[(12, 30), int64]) {
  %39 = cast(%var_2285, dtype="float32") /* ty=Tensor[(9, 10, 2), float32] */;
  %40 = cast(meta[relay.Constant][3] /* ty=Tensor[(12, 30), int64] */, dtype="int64") /* ty=Tensor[(12, 30), int64] */;
  %41 = reshape(%40, newshape=[360]) /* ty=Tensor[(360), int64] */;
  %42 = @func_2086(%41) /* ty=(Tensor[(15, 14, 5), float32], Tensor[(1170), float32], Tensor[(360), int64]) */;
  %43 = rsqrt(%39) /* ty=Tensor[(9, 10, 2), float32] */;
  %44 = %42.2;
  (%43, %44, meta[relay.Constant][3] /* ty=Tensor[(12, 30), int64] */)
}

def @func_1111() -> (Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32]) {
  %45 = @func_1059() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %46 = @func_1059() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %47 = %45.0;
  %48 = %46.0;
  (%47, %48)
}

def @func_2480() -> Tensor[(15, 14, 5), float32] {
  @func_1591() /* ty=Tensor[(15, 14, 5), float32] */
}

def @func_6685() -> (Tensor[(15, 14, 5), float32],) {
  %49 = @func_1111() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32]) */;
  %50 = %49.1;
  (%50,)
}

def @func_3865(%var_3830: Tensor[(6, 16, 6), float64]) -> (Tensor[(6, 16, 6), float64], Tensor[(1170), float32], Tensor[(1, 240), float32], Tensor[(1792), float32]) {
  %51 = cast(%var_3830, dtype="float64") /* ty=Tensor[(6, 16, 6), float64] */;
  %52 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 240), float32] */, dtype="float32") /* ty=Tensor[(1, 240), float32] */;
  %53 = cast(meta[relay.Constant][5] /* ty=Tensor[(1792), float32] */, dtype="float32") /* ty=Tensor[(1792), float32] */;
  %54 = reshape(%52, newshape=[2, 15, 8]) /* ty=Tensor[(2, 15, 8), float32] */;
  %55 = reshape(%53, newshape=[1792]) /* ty=Tensor[(1792), float32] */;
  %56 = @func_2630(%54, %55) /* ty=(Tensor[(2, 15, 8), int8], Tensor[(7, 16, 16), float32], Tensor[(1792), float32], Tensor[(1170), float32]) */;
  %57 = log2(%51) /* ty=Tensor[(6, 16, 6), float64] */;
  %58 = %56.3;
  (%57, %58, meta[relay.Constant][4] /* ty=Tensor[(1, 240), float32] */, meta[relay.Constant][5] /* ty=Tensor[(1792), float32] */)
}

def @func_4835(%var_4832: Tensor[(15, 12, 5), float32]) -> Tensor[(15, 12, 5), float32] {
  %59 = cast(%var_4832, dtype="float32") /* ty=Tensor[(15, 12, 5), float32] */;
  erf(%59) /* ty=Tensor[(15, 12, 5), float32] */
}

def @func_6011(%var_6003: Tensor[(5, 15, 1), uint64], %var_6004: Tensor[(5, 15, 1), uint64]) -> Tensor[(5, 15, ?), uint64] {
  %60 = cast(%var_6004, dtype="uint64") /* ty=Tensor[(5, 15, 1), uint64] */;
  %61 = shape_of(%var_6003, dtype="int32") /* ty=Tensor[(3), int32] */;
  %62 = cast(%var_6003, dtype="uint64") /* ty=Tensor[(5, 15, 1), uint64] */;
  %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  minimum(%62, %63) /* ty=Tensor[(5, 15, ?), uint64] */
}

def @func_3595(%var_3567: Tensor[(240), float32], %var_3568: Tensor[(1792), float32]) -> (Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32], Tensor[(7, 16, 16), float32], Tensor[(240), float32], Tensor[(1792), float32], Tensor[(3, 13), float32], Tensor[(39), float32]) {
  %64 = cast(%var_3567, dtype="float32") /* ty=Tensor[(240), float32] */;
  %65 = cast(%var_3568, dtype="float32") /* ty=Tensor[(1792), float32] */;
  %66 = reshape(%64, newshape=[2, 15, 8]) /* ty=Tensor[(2, 15, 8), float32] */;
  %67 = reshape(%65, newshape=[1792]) /* ty=Tensor[(1792), float32] */;
  %68 = @func_2630(%66, %67) /* ty=(Tensor[(2, 15, 8), int8], Tensor[(7, 16, 16), float32], Tensor[(1792), float32], Tensor[(1170), float32]) */;
  %69 = cast(meta[relay.Constant][6] /* ty=Tensor[(39), float32] */, dtype="float32") /* ty=Tensor[(39), float32] */;
  %70 = reshape(%69, newshape=[3, 13]) /* ty=Tensor[(3, 13), float32] */;
  %71 = @func_1150(%70) /* ty=(Tensor[(3, 13), float32],) */;
  %72 = @func_3170() /* ty=Tensor[(15, 14, 5), float32] */;
  %73 = @func_3548() /* ty=Tensor[(15, 14, 5), float32] */;
  %74 = %68.1;
  %75 = %71.0;
  (%72, %73, %74, %var_3567, %var_3568, %75, meta[relay.Constant][6] /* ty=Tensor[(39), float32] */)
}

def @func_4934() -> (Tensor[(2, 15, 8), float32],) {
  %76 = @func_1277() /* ty=Tensor[(2, 15, 8), float32] */;
  (%76,)
}

def @func_7138() -> (Tensor[(2, 15, 8), float32], Tensor[(15, 14, 5), float32]) {
  %77 = @func_1158() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %78 = @func_1986() /* ty=Tensor[(2, 15, 8), float32] */;
  %79 = %77.0;
  (%78, %79)
}

def @func_3390() -> (Tensor[(15, 14, 5), float32],) {
  %80 = @func_1059() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %81 = %80.0;
  (%81,)
}

def @func_4086() -> Tensor[(15, 14, 5), float32] {
  %82 = @func_1059() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %82.0
}

def @func_7803() -> Tensor[(15, 14, 8), float64] {
  %83 = @func_2543() /* ty=(Tensor[(1170), float32], Tensor[(15, 14, 8), float64]) */;
  %83.1
}

def @func_5222() -> (Tensor[(13, 10, 9), bool], Tensor[(15, 14, 5), float32]) {
  %84 = @func_1235() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(13, 10, 9), bool], Tensor[(1170), float32], Tensor[(7, 16, 16), float32], Tensor[(448, 4), float64]) */;
  %85 = %84.1;
  %86 = @func_1591() /* ty=Tensor[(15, 14, 5), float32] */;
  (%85, %86)
}

def @func_5280() -> Tensor[(15, 14, 8), float64] {
  %87 = @func_2248() /* ty=(Tensor[(15, 14, 8), float64],) */;
  %87.0
}

def @func_3357(%var_3308: Tensor[(15, 14, 5), float32], %var_3323: Tensor[(15, 14, 5), float32]) -> (Tensor[(15, 14, 5), bool], Tensor[(15, 14, 5), int32], Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32]) {
  %88 = @func_2830() /* ty=(Tensor[(15, 14, 8), float64], Tensor[(15, 14, 5), float32]) */;
  %89 = %88.1;
  %90 = cast(%var_3308, dtype="bool") /* ty=Tensor[(15, 14, 5), bool] */;
  %91 = shape_of(%89, dtype="int32") /* ty=Tensor[(3), int32] */;
  %92 = cast(%89, dtype="bool") /* ty=Tensor[(15, 14, 5), bool] */;
  %93 = dyn.reshape(%90, %91, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %94 = cast(%var_3323, dtype="int32") /* ty=Tensor[(15, 14, 5), int32] */;
  %95 = shape_of(%89, dtype="int32") /* ty=Tensor[(3), int32] */;
  %96 = cast(%89, dtype="int32") /* ty=Tensor[(15, 14, 5), int32] */;
  %97 = dyn.reshape(%94, %95, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %98 = @func_3071() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %99 = %98.0;
  %100 = cast(%99, dtype="float32") /* ty=Tensor[(15, 14, 5), float32] */;
  %101 = less_equal(%92, %93) /* ty=Tensor[(15, 14, 5), bool] */;
  %102 = right_shift(%96, %97) /* ty=Tensor[(15, 14, 5), int32] */;
  %103 = atan(%100) /* ty=Tensor[(15, 14, 5), float32] */;
  %104 = @func_2863() /* ty=Tensor[(15, 14, 5), float32] */;
  %105 = @func_1591() /* ty=Tensor[(15, 14, 5), float32] */;
  (%101, %102, %103, %104, %105)
}

def @func_658(%var_655: Tensor[(9, 13, 8), float32]) -> Tensor[(9, 13, 8), float32] {
  %106 = cast(%var_655, dtype="float32") /* ty=Tensor[(9, 13, 8), float32] */;
  rsqrt(%106) /* ty=Tensor[(9, 13, 8), float32] */
}

def @func_4816(%var_4798: Tensor[(10, 3, 6), bool]) -> (Tensor[(1170), float32], Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), int64], Tensor[(10, 3, 6), float64], Tensor[(1170), float32]) {
  %107 = @func_3115() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %108 = %107.0;
  %109 = cast(%108, dtype="float32") /* ty=Tensor[(15, 14, 5), float32] */;
  %110 = reshape(%109, newshape=[15, 14, 5]) /* ty=Tensor[(15, 14, 5), float32] */;
  %111 = @func_3239(%110) /* ty=(Tensor[(9, 13, 8), float32], Tensor[(15, 14, 5), int64]) */;
  %112 = @func_1344() /* ty=Tensor[(1170), float32] */;
  %113 = cast(%112, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %114 = cast(%112, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %115 = cast(%112, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %116 = reshape(%113, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), float32] */;
  %117 = reshape(%114, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), float32] */;
  %118 = reshape(%115, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), float32] */;
  %119 = @func_441(%116, %117, %118) /* ty=(Tensor[(13, 10, 9), bool], Tensor[(10, 3, 6), bool], Tensor[(180), float32], Tensor[(10, 3, 6), bool], Tensor[(13, 10, 9), bool], Tensor[(14, 8, 2), float64], Tensor[(224), int16], Tensor[(13, 10, 9), uint8], Tensor[(13, 10, 9), uint64], Tensor[(10, 3, 6), bool], Tensor[(10, 3, 6), bool]) */;
  %120 = %119.3;
  %121 = cast(%var_4798, dtype="float64") /* ty=Tensor[(10, 3, 6), float64] */;
  %122 = shape_of(%120, dtype="int32") /* ty=Tensor[(3), int32] */;
  %123 = cast(%120, dtype="float64") /* ty=Tensor[(10, 3, 6), float64] */;
  %124 = dyn.reshape(%121, %122, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %125 = @func_1682() /* ty=(Tensor[(1170), float64], Tensor[(13, 10, 9), bool], Tensor[(1170), float32], Tensor[(72), float32]) */;
  %126 = %111.1;
  %127 = power(%123, %124) /* ty=Tensor[(10, 3, 6), float64] */;
  %128 = %125.2;
  (%112, %108, %126, %127, %128)
}

def @func_310(%var_299: Tensor[(14, 8, 2), int16], %var_300: Tensor[(14, 8, 2), int16]) -> (Tensor[(14, 8, 2), int16], Tensor[(14, 8, 2), float64]) {
  %129 = cast(%var_300, dtype="int16") /* ty=Tensor[(14, 8, 2), int16] */;
  %130 = shape_of(%var_299, dtype="int32") /* ty=Tensor[(3), int32] */;
  %131 = cast(%var_299, dtype="int16") /* ty=Tensor[(14, 8, 2), int16] */;
  %132 = dyn.reshape(%129, %130, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %133 = cast(%var_300, dtype="float64") /* ty=Tensor[(14, 8, 2), float64] */;
  %134 = bitwise_xor(%131, %132) /* ty=Tensor[(14, 8, 2), int16] */;
  %135 = atan(%133) /* ty=Tensor[(14, 8, 2), float64] */;
  (%134, %135)
}

def @func_6752(%var_6750: Tensor[(900), float32]) -> (Tensor[(15, 14, 5), float32], Tensor[(15, 12, 5), float32], Tensor[(900), float32]) {
  %136 = @func_4020() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 8), float64], Tensor[(1792), float32], Tensor[(576), float64]) */;
  %137 = cast(%var_6750, dtype="float32") /* ty=Tensor[(900), float32] */;
  %138 = reshape(%137, newshape=[15, 12, 5]) /* ty=Tensor[(15, 12, 5), float32] */;
  %139 = %136.0;
  %140 = @func_4835(%138) /* ty=Tensor[(15, 12, 5), float32] */;
  (%139, %140, %var_6750)
}

def @func_4890() -> (Tensor[(15, 14, 5), float32], Tensor[(13, 10, 9), uint64], Tensor[(1170), float32]) {
  %141 = @func_1431() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %142 = cast(meta[relay.Constant][7] /* ty=Tensor[(1170), float32] */, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %143 = reshape(%142, newshape=[1170]) /* ty=Tensor[(1170), float32] */;
  %144 = @func_3676(%143) /* ty=(Tensor[(15, 14, 5), float32], Tensor[(13, 10, 9), uint64], Tensor[(1170), float32]) */;
  %145 = %141.0;
  %146 = %144.1;
  (%145, %146, meta[relay.Constant][7] /* ty=Tensor[(1170), float32] */)
}

def @func_7177() -> (Tensor[(15, 14, 8), float64],) {
  %147 = @func_5911() /* ty=(Tensor[(15, 14, 8), float64],) */;
  %148 = %147.0;
  (%148,)
}

def @func_5911() -> (Tensor[(15, 14, 8), float64],) {
  %149 = @func_5198() /* ty=(Tensor[(15, 14, 8), float64],) */;
  %150 = %149.0;
  (%150,)
}

def @func_4567() -> (Tensor[(15, 14, 5), float32], Tensor[(448, 4), float64], Tensor[(15, 14, 8), float64]) {
  %151 = @func_1431() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %152 = @func_1235() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(13, 10, 9), bool], Tensor[(1170), float32], Tensor[(7, 16, 16), float32], Tensor[(448, 4), float64]) */;
  %153 = @func_4020() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 8), float64], Tensor[(1792), float32], Tensor[(576), float64]) */;
  %154 = %151.0;
  %155 = %152.4;
  %156 = %153.1;
  (%154, %155, %156)
}

def @func_1377(%var_1362: Tensor[(360), int64]) -> (Tensor[(1170), float32], Tensor[(12, 10, 3), bool], Tensor[(360), int64]) {
  %157 = cast(%var_1362, dtype="int64") /* ty=Tensor[(360), int64] */;
  %158 = cast(%var_1362, dtype="int64") /* ty=Tensor[(360), int64] */;
  %159 = reshape(%157, newshape=[12, 10, 3]) /* ty=Tensor[(12, 10, 3), int64] */;
  %160 = reshape(%158, newshape=[12, 10, 3]) /* ty=Tensor[(12, 10, 3), int64] */;
  %161 = @func_1344() /* ty=Tensor[(1170), float32] */;
  %162 = @func_805(%159, %160) /* ty=Tensor[(12, 10, 3), bool] */;
  (%161, %162, %var_1362)
}

def @func_4915() -> (Tensor[(15, 14, 5), float32],) {
  %163 = @func_2956() /* ty=Tensor[(15, 14, 5), float32] */;
  (%163,)
}

def @func_2086(%var_2077: Tensor[(360), int64]) -> (Tensor[(15, 14, 5), float32], Tensor[(1170), float32], Tensor[(360), int64]) {
  %164 = cast(%var_2077, dtype="int64") /* ty=Tensor[(360), int64] */;
  %165 = reshape(%164, newshape=[360]) /* ty=Tensor[(360), int64] */;
  %166 = @func_1377(%165) /* ty=(Tensor[(1170), float32], Tensor[(12, 10, 3), bool], Tensor[(360), int64]) */;
  %167 = @func_1591() /* ty=Tensor[(15, 14, 5), float32] */;
  %168 = %166.0;
  (%167, %168, %var_2077)
}

def @func_814(%var_810: Tensor[(7, 16, 16), float32]) -> (Tensor[(7, 16, 16), float32],) {
  %169 = cast(%var_810, dtype="float32") /* ty=Tensor[(7, 16, 16), float32] */;
  %170 = cosh(%169) /* ty=Tensor[(7, 16, 16), float32] */;
  (%170,)
}

def @func_6566() -> (Tensor[(2, 15, 8), float32],) {
  %171 = @func_1277() /* ty=Tensor[(2, 15, 8), float32] */;
  (%171,)
}

def @func_6303() -> (Tensor[(15, 14, 8), float64], Tensor[(936), float32]) {
  %172 = @func_2830() /* ty=(Tensor[(15, 14, 8), float64], Tensor[(15, 14, 5), float32]) */;
  %173 = @func_2023() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(9, 13, 8), float32], Tensor[(936), float32]) */;
  %174 = %172.0;
  %175 = %173.2;
  (%174, %175)
}

def @func_6118() -> (Tensor[(15, 14, 5), float32],) {
  %176 = @func_1850() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32]) */;
  %177 = %176.0;
  (%177,)
}

def @func_2882() -> (Tensor[(9, 13, 8), float32], Tensor[(15, 14, 5), float32]) {
  %178 = @func_2023() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(9, 13, 8), float32], Tensor[(936), float32]) */;
  %179 = %178.1;
  %180 = @func_2863() /* ty=Tensor[(15, 14, 5), float32] */;
  (%179, %180)
}

def @func_3239(%var_3232: Tensor[(15, 14, 5), float32]) -> (Tensor[(9, 13, 8), float32], Tensor[(15, 14, 5), int64]) {
  %181 = @func_2023() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(9, 13, 8), float32], Tensor[(936), float32]) */;
  %182 = @func_2863() /* ty=Tensor[(15, 14, 5), float32] */;
  %183 = cast(%var_3232, dtype="int64") /* ty=Tensor[(15, 14, 5), int64] */;
  %184 = shape_of(%182, dtype="int32") /* ty=Tensor[(3), int32] */;
  %185 = cast(%182, dtype="int64") /* ty=Tensor[(15, 14, 5), int64] */;
  %186 = dyn.reshape(%183, %184, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %187 = %181.1;
  %188 = bitwise_xor(%185, %186) /* ty=Tensor[(15, 14, 5), int64] */;
  (%187, %188)
}

def @func_1850() -> (Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32]) {
  %189 = @func_1059() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %190 = %189.0;
  %191 = @func_1591() /* ty=Tensor[(15, 14, 5), float32] */;
  (%190, %191)
}

def @func_6370() -> (Tensor[(15, 14, 5), float32],) {
  %192 = @func_4383() /* ty=(Tensor[(1170), float32], Tensor[(15, 14, 5), float32], Tensor[(1170), float32]) */;
  %193 = %192.1;
  (%193,)
}

def @func_6763() -> (Tensor[(15, 14, 5), float32],) {
  %194 = @func_3746() /* ty=Tensor[(15, 14, 5), float32] */;
  (%194,)
}

def @func_5951() -> (Tensor[(2, 15, 8), float32],) {
  %195 = @func_1986() /* ty=Tensor[(2, 15, 8), float32] */;
  (%195,)
}

def @func_3297(%var_3281: Tensor[(8, 4, 8), float32], %var_3293: Tensor[(8, 4, 8), float64]) -> (Tensor[(8, 4, 8), bool],) {
  %196 = cast(%var_3281, dtype="float32") /* ty=Tensor[(8, 4, 8), float32] */;
  %197 = cos(%196) /* ty=Tensor[(8, 4, 8), float32] */;
  %198 = cast(%197, dtype="float64") /* ty=Tensor[(8, 4, 8), float64] */;
  %199 = asin(%198) /* ty=Tensor[(8, 4, 8), float64] */;
  %200 = cast(%var_3293, dtype="bool") /* ty=Tensor[(8, 4, 8), bool] */;
  %201 = shape_of(%199, dtype="int32") /* ty=Tensor[(3), int32] */;
  %202 = cast(%199, dtype="bool") /* ty=Tensor[(8, 4, 8), bool] */;
  %203 = dyn.reshape(%200, %201, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %204 = greater_equal(%202, %203) /* ty=Tensor[(8, 4, 8), bool] */;
  (%204,)
}

def @func_3548() -> Tensor[(15, 14, 5), float32] {
  %205 = @func_2217() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(12, 10, 3), bool], Tensor[(360), int64]) */;
  %205.0
}

def @func_2830() -> (Tensor[(15, 14, 8), float64], Tensor[(15, 14, 5), float32]) {
  %206 = @func_2248() /* ty=(Tensor[(15, 14, 8), float64],) */;
  %207 = %206.0;
  %208 = @func_2480() /* ty=Tensor[(15, 14, 5), float32] */;
  (%207, %208)
}

def @func_1591() -> Tensor[(15, 14, 5), float32] {
  %209 = @func_1059() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %209.0
}

def @func_1344() -> Tensor[(1170), float32] {
  %210 = @func_1235() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(13, 10, 9), bool], Tensor[(1170), float32], Tensor[(7, 16, 16), float32], Tensor[(448, 4), float64]) */;
  %210.2
}

def @func_3477(%var_3463: Tensor[(5, 15, 10), bool], %var_3464: Tensor[(5, 15, 10), bool]) -> Tensor[(5, 15, 10), float32] {
  %211 = cast(%var_3464, dtype="bool") /* ty=Tensor[(5, 15, 10), bool] */;
  %212 = shape_of(%var_3463, dtype="int32") /* ty=Tensor[(3), int32] */;
  %213 = cast(%var_3463, dtype="bool") /* ty=Tensor[(5, 15, 10), bool] */;
  %214 = dyn.reshape(%211, %212, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %215 = logical_and(%213, %214) /* ty=Tensor[(5, 15, 10), bool] */;
  %216 = cast(%215, dtype="float32") /* ty=Tensor[(5, 15, 10), float32] */;
  erf(%216) /* ty=Tensor[(5, 15, 10), float32] */
}

def @func_5664() -> (Tensor[(15, 14, 5), float32],) {
  %217 = @func_3548() /* ty=Tensor[(15, 14, 5), float32] */;
  (%217,)
}

def @func_3691() -> (Tensor[(1170), float32],) {
  %218 = @func_1344() /* ty=Tensor[(1170), float32] */;
  (%218,)
}

def @func_4164(%var_4113: Tensor[(72), float32]) -> (Tensor[(15, 14, 5), float32], Tensor[(72), float32], Tensor[(13, 10, 9), bool], Tensor[(15, 14, 8), float64], Tensor[(4, 7, 2), float64], Tensor[(7, 16, 16), float32], Tensor[(1792), float32]) {
  %219 = @func_1059() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %220 = @func_1682() /* ty=(Tensor[(1170), float64], Tensor[(13, 10, 9), bool], Tensor[(1170), float32], Tensor[(72), float32]) */;
  %221 = @func_2248() /* ty=(Tensor[(15, 14, 8), float64],) */;
  %222 = cast(%var_4113, dtype="float32") /* ty=Tensor[(72), float32] */;
  %223 = reshape(%222, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %224 = @func_1486(%223) /* ty=(Tensor[(4, 7, 2), float32], Tensor[(4, 7, 2), uint8], Tensor[(1170), float32], Tensor[(72), float32], Tensor[(390, 3), float32]) */;
  %225 = %224.0;
  %226 = cast(%225, dtype="float64") /* ty=Tensor[(4, 7, 2), float64] */;
  %227 = cast(meta[relay.Constant][8] /* ty=Tensor[(1792), float32] */, dtype="float32") /* ty=Tensor[(1792), float32] */;
  %228 = %220.1;
  %229 = cast(%228, dtype="float32") /* ty=Tensor[(13, 10, 9), float32] */;
  %230 = reshape(%227, newshape=[8, 224]) /* ty=Tensor[(8, 224), float32] */;
  %231 = reshape(%229, newshape=[1170]) /* ty=Tensor[(1170), float32] */;
  %232 = @func_1523(%230, %231) /* ty=(Tensor[(15, 14, 5), float32], Tensor[(7, 16, 16), float32], Tensor[(13, 10, 9), bool], Tensor[(1170), float32], Tensor[(180), float32], Tensor[(8, 224), float32], Tensor[(8, 224), float32]) */;
  %233 = %219.0;
  %234 = %221.0;
  %235 = tan(%226) /* ty=Tensor[(4, 7, 2), float64] */;
  %236 = %232.1;
  (%233, %var_4113, %228, %234, %235, %236, meta[relay.Constant][8] /* ty=Tensor[(1792), float32] */)
}

def @func_1986() -> Tensor[(2, 15, 8), float32] {
  @func_1277() /* ty=Tensor[(2, 15, 8), float32] */
}

def @func_1523(%var_1495: Tensor[(8, 224), float32], %var_1502: Tensor[(1170), float32]) -> (Tensor[(15, 14, 5), float32], Tensor[(7, 16, 16), float32], Tensor[(13, 10, 9), bool], Tensor[(1170), float32], Tensor[(180), float32], Tensor[(8, 224), float32], Tensor[(8, 224), float32]) {
  %237 = @func_1059() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %238 = cast(%var_1495, dtype="float32") /* ty=Tensor[(8, 224), float32] */;
  %239 = reshape(%238, newshape=[7, 16, 16]) /* ty=Tensor[(7, 16, 16), float32] */;
  %240 = @func_814(%239) /* ty=(Tensor[(7, 16, 16), float32],) */;
  %241 = cast(%var_1502, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %242 = cast(%var_1502, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %243 = cast(%var_1502, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %244 = reshape(%241, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), float32] */;
  %245 = reshape(%242, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), float32] */;
  %246 = reshape(%243, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), float32] */;
  %247 = @func_441(%244, %245, %246) /* ty=(Tensor[(13, 10, 9), bool], Tensor[(10, 3, 6), bool], Tensor[(180), float32], Tensor[(10, 3, 6), bool], Tensor[(13, 10, 9), bool], Tensor[(14, 8, 2), float64], Tensor[(224), int16], Tensor[(13, 10, 9), uint8], Tensor[(13, 10, 9), uint64], Tensor[(10, 3, 6), bool], Tensor[(10, 3, 6), bool]) */;
  %248 = %247.4;
  %249 = cast(%248, dtype="float32") /* ty=Tensor[(13, 10, 9), float32] */;
  %250 = cast(%var_1502, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %251 = cast(%var_1502, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %252 = reshape(%249, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), float32] */;
  %253 = reshape(%250, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), float32] */;
  %254 = reshape(%251, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), float32] */;
  %255 = @func_441(%252, %253, %254) /* ty=(Tensor[(13, 10, 9), bool], Tensor[(10, 3, 6), bool], Tensor[(180), float32], Tensor[(10, 3, 6), bool], Tensor[(13, 10, 9), bool], Tensor[(14, 8, 2), float64], Tensor[(224), int16], Tensor[(13, 10, 9), uint8], Tensor[(13, 10, 9), uint64], Tensor[(10, 3, 6), bool], Tensor[(10, 3, 6), bool]) */;
  %256 = cast(%var_1495, dtype="float32") /* ty=Tensor[(8, 224), float32] */;
  %257 = log10(%256) /* ty=Tensor[(8, 224), float32] */;
  %258 = cast(%257, dtype="float32") /* ty=Tensor[(8, 224), float32] */;
  %259 = cast(%257, dtype="float32") /* ty=Tensor[(8, 224), float32] */;
  %260 = %237.0;
  %261 = %240.0;
  %262 = %255.2;
  %263 = cosh(%258) /* ty=Tensor[(8, 224), float32] */;
  %264 = sigmoid(%259) /* ty=Tensor[(8, 224), float32] */;
  (%260, %261, %248, %var_1502, %262, %263, %264)
}

def @func_7221() -> Tensor[(2, 15, 8), float64] {
  %265 = @func_6545() /* ty=(Tensor[(2, 15, 8), float32],) */;
  %266 = %265.0;
  %267 = cast(%266, dtype="float64") /* ty=Tensor[(2, 15, 8), float64] */;
  log10(%267) /* ty=Tensor[(2, 15, 8), float64] */
}

def @func_5137() -> (Tensor[(15, 14, 5), float32], Tensor[(15, ?), uint16]) {
  %268 = cast(meta[relay.Constant][9] /* ty=Tensor[(15), float64] */, dtype="float64") /* ty=Tensor[(15), float64] */;
  %269 = reshape(%268, newshape=[15, 1]) /* ty=Tensor[(15, 1), float64] */;
  %270 = @func_4175(%269) /* ty=Tensor[(15, 1), float64] */;
  %271 = cast(meta[relay.Constant][9] /* ty=Tensor[(15), float64] */, dtype="uint16") /* ty=Tensor[(15), uint16] */;
  %272 = shape_of(%270, dtype="int32") /* ty=Tensor[(2), int32] */;
  %273 = cast(%270, dtype="uint16") /* ty=Tensor[(15, 1), uint16] */;
  %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %275 = @func_4086() /* ty=Tensor[(15, 14, 5), float32] */;
  %276 = right_shift(%273, %274) /* ty=Tensor[(15, ?), uint16] */;
  (%275, %276)
}

def @func_3275(%var_3259: Tensor[(360), int64], %var_3260: Tensor[(1, 180), float32], %var_3261: Tensor[(10, 117), float32]) -> (Tensor[(15, 14, 5), float32], Tensor[(360), int64], Tensor[(360), int64], Tensor[(1, 180), float32], Tensor[(10, 117), float32]) {
  %277 = @func_1059() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %278 = cast(%var_3259, dtype="int64") /* ty=Tensor[(360), int64] */;
  %279 = cast(%var_3260, dtype="float32") /* ty=Tensor[(1, 180), float32] */;
  %280 = cast(%var_3261, dtype="float32") /* ty=Tensor[(10, 117), float32] */;
  %281 = reshape(%278, newshape=[360]) /* ty=Tensor[(360), int64] */;
  %282 = reshape(%279, newshape=[180, 1]) /* ty=Tensor[(180, 1), float32] */;
  %283 = reshape(%280, newshape=[1170]) /* ty=Tensor[(1170), float32] */;
  %284 = @func_1786(%281, %282, %283) /* ty=(Tensor[(15, 14, 5), float32], Tensor[(12, 10, 3), bool], Tensor[(360), int64], Tensor[(10, 3, 6), bool], Tensor[(180, 1), float32], Tensor[(15, 14, 5), float32], Tensor[(1170), float32], Tensor[(15, 14, 5), float64]) */;
  %285 = %277.0;
  %286 = %284.2;
  (%285, %286, %var_3259, %var_3260, %var_3261)
}

def @func_1648(%var_1631: Tensor[(5, 234), float32]) -> (Tensor[(15, 14, 5), float32], Tensor[(5, 234), float32], Tensor[(13, 10, 9), float32]) {
  %287 = cast(%var_1631, dtype="float32") /* ty=Tensor[(5, 234), float32] */;
  %288 = cast(%var_1631, dtype="float32") /* ty=Tensor[(5, 234), float32] */;
  %289 = cast(%var_1631, dtype="float32") /* ty=Tensor[(5, 234), float32] */;
  %290 = reshape(%287, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), float32] */;
  %291 = reshape(%288, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), float32] */;
  %292 = reshape(%289, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), float32] */;
  %293 = @func_441(%290, %291, %292) /* ty=(Tensor[(13, 10, 9), bool], Tensor[(10, 3, 6), bool], Tensor[(180), float32], Tensor[(10, 3, 6), bool], Tensor[(13, 10, 9), bool], Tensor[(14, 8, 2), float64], Tensor[(224), int16], Tensor[(13, 10, 9), uint8], Tensor[(13, 10, 9), uint64], Tensor[(10, 3, 6), bool], Tensor[(10, 3, 6), bool]) */;
  %294 = %293.7;
  %295 = cast(%294, dtype="float64") /* ty=Tensor[(13, 10, 9), float64] */;
  %296 = erf(%295) /* ty=Tensor[(13, 10, 9), float64] */;
  %297 = cast(%296, dtype="float32") /* ty=Tensor[(13, 10, 9), float32] */;
  %298 = @func_1591() /* ty=Tensor[(15, 14, 5), float32] */;
  %299 = atanh(%297) /* ty=Tensor[(13, 10, 9), float32] */;
  (%298, %var_1631, %299)
}

def @func_2775(%var_2770: Tensor[(9, 1, 9), float32], %var_2771: Tensor[(9, 16, 9), float32]) -> (Tensor[(9, 16, 9), float32],) {
  %300 = cast(%var_2770, dtype="float32") /* ty=Tensor[(9, 1, 9), float32] */;
  %301 = cast(%var_2771, dtype="float32") /* ty=Tensor[(9, 16, 9), float32] */;
  %302 = mod(%300, %301) /* ty=Tensor[(9, 16, 9), float32] */;
  (%302,)
}

def @func_5429(%var_5388: Tensor[(750), bool]) -> (Tensor[(10, 6, 8), bool], Tensor[(750), bool], Tensor[(8, 4, 8), bool], Tensor[(1, 256), float32], Tensor[(10, 6, 8), float64], Tensor[(936), float32], Tensor[(2400), bool]) {
  %303 = cast(meta[relay.Constant][11] /* ty=Tensor[(10, 6, 8), float32] */, dtype="bool") /* ty=Tensor[(10, 6, 8), bool] */;
  %304 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(10, 6, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %305 = cast(meta[relay.Constant][10] /* ty=Tensor[(10, 6, 8), float32] */, dtype="bool") /* ty=Tensor[(10, 6, 8), bool] */;
  %306 = dyn.reshape(%303, %304, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %307 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 256), float32] */, dtype="float32") /* ty=Tensor[(1, 256), float32] */;
  %308 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 256), float32] */, dtype="float64") /* ty=Tensor[(1, 256), float64] */;
  %309 = reshape(%307, newshape=[8, 4, 8]) /* ty=Tensor[(8, 4, 8), float32] */;
  %310 = reshape(%308, newshape=[8, 4, 8]) /* ty=Tensor[(8, 4, 8), float64] */;
  %311 = @func_3297(%309, %310) /* ty=(Tensor[(8, 4, 8), bool],) */;
  %312 = cast(meta[relay.Constant][11] /* ty=Tensor[(10, 6, 8), float32] */, dtype="float64") /* ty=Tensor[(10, 6, 8), float64] */;
  %313 = @func_2023() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(9, 13, 8), float32], Tensor[(936), float32]) */;
  %314 = cast(meta[relay.Constant][13] /* ty=Tensor[(2400), uint64] */, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %315 = sin(%314) /* ty=Tensor[(2400), float32] */;
  %316 = cast(meta[relay.Constant][13] /* ty=Tensor[(2400), uint64] */, dtype="uint64") /* ty=Tensor[(2400), uint64] */;
  %317 = cast(meta[relay.Constant][13] /* ty=Tensor[(2400), uint64] */, dtype="uint64") /* ty=Tensor[(2400), uint64] */;
  %318 = cast(%var_5388, dtype="bool") /* ty=Tensor[(750), bool] */;
  %319 = reshape(%316, newshape=[15, 16, 10]) /* ty=Tensor[(15, 16, 10), uint64] */;
  %320 = reshape(%317, newshape=[15, 16, 10]) /* ty=Tensor[(15, 16, 10), uint64] */;
  %321 = reshape(%318, newshape=[50, 15]) /* ty=Tensor[(50, 15), bool] */;
  %322 = @func_4258(%319, %320, %321) /* ty=(Tensor[(15, 16, 10), int8], Tensor[(15, 16, 10), float32], Tensor[(5, 15, 10), uint64]) */;
  %323 = %322.0;
  %324 = cast(%323, dtype="bool") /* ty=Tensor[(15, 16, 10), bool] */;
  %325 = shape_of(%315, dtype="int32") /* ty=Tensor[(1), int32] */;
  %326 = cast(%315, dtype="bool") /* ty=Tensor[(2400), bool] */;
  %327 = dyn.reshape(%324, %325, newshape=[]) /* ty=Tensor[(?), bool] */;
  %328 = greater(%305, %306) /* ty=Tensor[(10, 6, 8), bool] */;
  %329 = %311.0;
  %330 = cos(%312) /* ty=Tensor[(10, 6, 8), float64] */;
  %331 = %313.2;
  %332 = greater_equal(%326, %327) /* ty=Tensor[(2400), bool] */;
  (%328, %var_5388, %329, meta[relay.Constant][12] /* ty=Tensor[(1, 256), float32] */, %330, %331, %332)
}

def @func_4729(%var_4726: Tensor[(180), float32], %var_4727: Tensor[(1170), float32]) -> (Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32], Tensor[(1, 360), int64], Tensor[(180), float32], Tensor[(1170), float32]) {
  %333 = @func_4663() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %334 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 360), int64] */, dtype="int64") /* ty=Tensor[(1, 360), int64] */;
  %335 = cast(%var_4726, dtype="float32") /* ty=Tensor[(180), float32] */;
  %336 = cast(%var_4727, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %337 = reshape(%334, newshape=[360]) /* ty=Tensor[(360), int64] */;
  %338 = reshape(%335, newshape=[180, 1]) /* ty=Tensor[(180, 1), float32] */;
  %339 = reshape(%336, newshape=[1170]) /* ty=Tensor[(1170), float32] */;
  %340 = @func_1786(%337, %338, %339) /* ty=(Tensor[(15, 14, 5), float32], Tensor[(12, 10, 3), bool], Tensor[(360), int64], Tensor[(10, 3, 6), bool], Tensor[(180, 1), float32], Tensor[(15, 14, 5), float32], Tensor[(1170), float32], Tensor[(15, 14, 5), float64]) */;
  %341 = %333.0;
  %342 = %340.0;
  (%341, %342, meta[relay.Constant][14] /* ty=Tensor[(1, 360), int64] */, %var_4726, %var_4727)
}

def @func_6137() -> (Tensor[(15, 14, 8), float64], Tensor[(15, 14, 5), float32]) {
  %343 = @func_1821() /* ty=(Tensor[(15, 14, 8), float64],) */;
  %344 = @func_1059() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %345 = %343.0;
  %346 = %344.0;
  (%345, %346)
}

def @func_5801() -> (Tensor[(15, 14, 5), float64],) {
  %347 = @func_2480() /* ty=Tensor[(15, 14, 5), float32] */;
  %348 = cast(%347, dtype="float64") /* ty=Tensor[(15, 14, 5), float64] */;
  %349 = sin(%348) /* ty=Tensor[(15, 14, 5), float64] */;
  (%349,)
}

def @func_2937() -> (Tensor[(15, 14, 5), float32],) {
  %350 = @func_1235() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(13, 10, 9), bool], Tensor[(1170), float32], Tensor[(7, 16, 16), float32], Tensor[(448, 4), float64]) */;
  %351 = %350.0;
  (%351,)
}

def @func_2260() -> Tensor[(15, 14, 8), float64] {
  %352 = @func_2248() /* ty=(Tensor[(15, 14, 8), float64],) */;
  %352.0
}

def @func_7064() -> (Tensor[(15, 14, 8), float64],) {
  %353 = @func_2248() /* ty=(Tensor[(15, 14, 8), float64],) */;
  %354 = %353.0;
  (%354,)
}

def @func_2956() -> Tensor[(15, 14, 5), float32] {
  %355 = @func_1887() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 8), float64]) */;
  %355.0
}

def @func_5446(%var_5438: Tensor[(14, 14, 4), float64]) -> Tensor[(14, 14, 4), float64] {
  %356 = cast(%var_5438, dtype="float64") /* ty=Tensor[(14, 14, 4), float64] */;
  asinh(%356) /* ty=Tensor[(14, 14, 4), float64] */
}

def @func_5001() -> (Tensor[(7, 16, 16), float32], Tensor[(15, 14, 5), int64], Tensor[(1050), float32]) {
  %357 = @func_1235() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(13, 10, 9), bool], Tensor[(1170), float32], Tensor[(7, 16, 16), float32], Tensor[(448, 4), float64]) */;
  %358 = cast(meta[relay.Constant][15] /* ty=Tensor[(1050), float32] */, dtype="float32") /* ty=Tensor[(1050), float32] */;
  %359 = reshape(%358, newshape=[15, 14, 5]) /* ty=Tensor[(15, 14, 5), float32] */;
  %360 = @func_3239(%359) /* ty=(Tensor[(9, 13, 8), float32], Tensor[(15, 14, 5), int64]) */;
  %361 = %357.3;
  %362 = %360.1;
  (%361, %362, meta[relay.Constant][15] /* ty=Tensor[(1050), float32] */)
}

def @func_4258(%var_4217: Tensor[(15, 16, 10), uint64], %var_4218: Tensor[(15, 16, 10), uint64], %var_4243: Tensor[(50, 15), bool]) -> (Tensor[(15, 16, 10), int8], Tensor[(15, 16, 10), float32], Tensor[(5, 15, 10), uint64]) {
  %363 = cast(%var_4218, dtype="uint64") /* ty=Tensor[(15, 16, 10), uint64] */;
  %364 = shape_of(%var_4217, dtype="int32") /* ty=Tensor[(3), int32] */;
  %365 = cast(%var_4217, dtype="uint64") /* ty=Tensor[(15, 16, 10), uint64] */;
  %366 = dyn.reshape(%363, %364, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %367 = bitwise_xor(%365, %366) /* ty=Tensor[(15, 16, 10), uint64] */;
  %368 = cast(%367, dtype="int8") /* ty=Tensor[(15, 16, 10), int8] */;
  %369 = shape_of(%var_4218, dtype="int32") /* ty=Tensor[(3), int32] */;
  %370 = cast(%var_4218, dtype="int8") /* ty=Tensor[(15, 16, 10), int8] */;
  %371 = dyn.reshape(%368, %369, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %372 = cast(%var_4218, dtype="float32") /* ty=Tensor[(15, 16, 10), float32] */;
  %373 = cast(%var_4243, dtype="bool") /* ty=Tensor[(50, 15), bool] */;
  %374 = cast(%var_4243, dtype="bool") /* ty=Tensor[(50, 15), bool] */;
  %375 = reshape(%373, newshape=[5, 15, 10]) /* ty=Tensor[(5, 15, 10), bool] */;
  %376 = reshape(%374, newshape=[5, 15, 10]) /* ty=Tensor[(5, 15, 10), bool] */;
  %377 = @func_3477(%375, %376) /* ty=Tensor[(5, 15, 10), float32] */;
  %378 = cast(%var_4243, dtype="uint64") /* ty=Tensor[(50, 15), uint64] */;
  %379 = shape_of(%377, dtype="int32") /* ty=Tensor[(3), int32] */;
  %380 = cast(%377, dtype="uint64") /* ty=Tensor[(5, 15, 10), uint64] */;
  %381 = dyn.reshape(%378, %379, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %382 = maximum(%370, %371) /* ty=Tensor[(15, 16, 10), int8] */;
  %383 = sigmoid(%372) /* ty=Tensor[(15, 16, 10), float32] */;
  %384 = minimum(%380, %381) /* ty=Tensor[(5, 15, 10), uint64] */;
  (%382, %383, %384)
}

def @func_6545() -> (Tensor[(2, 15, 8), float32],) {
  %385 = @func_5951() /* ty=(Tensor[(2, 15, 8), float32],) */;
  %386 = %385.0;
  (%386,)
}

def @func_7846() -> Tensor[(15, 14, 8), float64] {
  @func_5566() /* ty=Tensor[(15, 14, 8), float64] */
}

def @func_2466() -> (Tensor[(936), float32],) {
  %387 = @func_2023() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(9, 13, 8), float32], Tensor[(936), float32]) */;
  %388 = %387.2;
  (%388,)
}

def @func_2157(%var_2153: Tensor[(6, 9, 10), float32]) -> Tensor[(6, 9, 10), float32] {
  %389 = cast(%var_2153, dtype="float32") /* ty=Tensor[(6, 9, 10), float32] */;
  cos(%389) /* ty=Tensor[(6, 9, 10), float32] */
}

def @func_5839() -> (Tensor[(448, 4), float64], Tensor[(15, 14, 5), float32]) {
  %390 = @func_3390() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %391 = @func_4095() /* ty=Tensor[(448, 4), float64] */;
  %392 = %390.0;
  (%391, %392)
}

def @func_85(%var_68: Tensor[(1, 16, 1), uint64], %var_69: Tensor[(9, 16, 14), uint64]) -> (Tensor[(9, 16, 14), uint64], Tensor[(9, 16, 14), bool]) {
  %393 = cast(%var_68, dtype="uint64") /* ty=Tensor[(1, 16, 1), uint64] */;
  %394 = cast(%var_69, dtype="uint64") /* ty=Tensor[(9, 16, 14), uint64] */;
  %395 = cast(%var_69, dtype="bool") /* ty=Tensor[(9, 16, 14), bool] */;
  %396 = cast(%var_68, dtype="bool") /* ty=Tensor[(1, 16, 1), bool] */;
  %397 = multiply(%393, %394) /* ty=Tensor[(9, 16, 14), uint64] */;
  %398 = logical_and(%395, %396) /* ty=Tensor[(9, 16, 14), bool] */;
  (%397, %398)
}

def @func_7017() -> (Tensor[(15, 14, 8), float64], Tensor[(1792), float32], Tensor[(72), float32], Tensor[(15, 14, 8), float64], Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32], Tensor[(576), float64]) {
  %399 = @func_5911() /* ty=(Tensor[(15, 14, 8), float64],) */;
  %400 = cast(meta[relay.Constant][16] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %401 = reshape(%400, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %402 = @func_4164(%401) /* ty=(Tensor[(15, 14, 5), float32], Tensor[(72), float32], Tensor[(13, 10, 9), bool], Tensor[(15, 14, 8), float64], Tensor[(4, 7, 2), float64], Tensor[(7, 16, 16), float32], Tensor[(1792), float32]) */;
  %403 = @func_5338() /* ty=(Tensor[(15, 14, 8), float64],) */;
  %404 = @func_2937() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %405 = @func_4600() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %406 = @func_4020() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 8), float64], Tensor[(1792), float32], Tensor[(576), float64]) */;
  %407 = %399.0;
  %408 = %402.6;
  %409 = %403.0;
  %410 = %404.0;
  %411 = %405.0;
  %412 = %406.3;
  (%407, %408, meta[relay.Constant][16] /* ty=Tensor[(72), float32] */, %409, %410, %411, %412)
}

def @func_7477() -> Tensor[(15, 14, 5), float32] {
  %413 = @func_5020() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %413.0
}

def @func_4175(%var_4172: Tensor[(15, 1), float64]) -> Tensor[(15, 1), float64] {
  %414 = cast(%var_4172, dtype="float64") /* ty=Tensor[(15, 1), float64] */;
  atanh(%414) /* ty=Tensor[(15, 1), float64] */
}

def @func_2863() -> Tensor[(15, 14, 5), float32] {
  %415 = @func_1111() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32]) */;
  %415.1
}

def @func_4047(%var_4034: Tensor[(2, 11, 1), float32]) -> (Tensor[(2, 11, 1), float32], Tensor[(15, 14, 8), float64], Tensor[(2, 11, 1), float32], Tensor[(9, 16, 14), uint64], Tensor[(16), uint64], Tensor[(2016), uint64]) {
  %416 = cast(%var_4034, dtype="float32") /* ty=Tensor[(2, 11, 1), float32] */;
  %417 = @func_2830() /* ty=(Tensor[(15, 14, 8), float64], Tensor[(15, 14, 5), float32]) */;
  %418 = cast(%var_4034, dtype="float32") /* ty=Tensor[(2, 11, 1), float32] */;
  %419 = cast(meta[relay.Constant][17] /* ty=Tensor[(16), uint64] */, dtype="uint64") /* ty=Tensor[(16), uint64] */;
  %420 = cast(meta[relay.Constant][18] /* ty=Tensor[(2016), uint64] */, dtype="uint64") /* ty=Tensor[(2016), uint64] */;
  %421 = reshape(%419, newshape=[1, 16, 1]) /* ty=Tensor[(1, 16, 1), uint64] */;
  %422 = reshape(%420, newshape=[9, 16, 14]) /* ty=Tensor[(9, 16, 14), uint64] */;
  %423 = @func_85(%421, %422) /* ty=(Tensor[(9, 16, 14), uint64], Tensor[(9, 16, 14), bool]) */;
  %424 = atanh(%416) /* ty=Tensor[(2, 11, 1), float32] */;
  %425 = %417.0;
  %426 = rsqrt(%418) /* ty=Tensor[(2, 11, 1), float32] */;
  %427 = %423.0;
  (%424, %425, %426, %427, meta[relay.Constant][17] /* ty=Tensor[(16), uint64] */, meta[relay.Constant][18] /* ty=Tensor[(2016), uint64] */)
}

def @func_6403() -> Tensor[(15, 14, 8), float64] {
  @func_5566() /* ty=Tensor[(15, 14, 8), float64] */
}

def @func_993(%var_979: Tensor[(12, 1, 6), float32], %var_986: Tensor[(1170), float32]) -> (Tensor[(12, 1, 6), float32], Tensor[(13, 10, 9), uint8], Tensor[(1170), float32]) {
  %428 = cast(%var_979, dtype="float32") /* ty=Tensor[(12, 1, 6), float32] */;
  %429 = cast(%var_986, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %430 = cast(%var_986, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %431 = cast(%var_986, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %432 = reshape(%429, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), float32] */;
  %433 = reshape(%430, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), float32] */;
  %434 = reshape(%431, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), float32] */;
  %435 = @func_441(%432, %433, %434) /* ty=(Tensor[(13, 10, 9), bool], Tensor[(10, 3, 6), bool], Tensor[(180), float32], Tensor[(10, 3, 6), bool], Tensor[(13, 10, 9), bool], Tensor[(14, 8, 2), float64], Tensor[(224), int16], Tensor[(13, 10, 9), uint8], Tensor[(13, 10, 9), uint64], Tensor[(10, 3, 6), bool], Tensor[(10, 3, 6), bool]) */;
  %436 = acosh(%428) /* ty=Tensor[(12, 1, 6), float32] */;
  %437 = %435.7;
  (%436, %437, %var_986)
}

def @func_4095() -> Tensor[(448, 4), float64] {
  %438 = @func_1235() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(13, 10, 9), bool], Tensor[(1170), float32], Tensor[(7, 16, 16), float32], Tensor[(448, 4), float64]) */;
  %438.4
}

def @func_3676(%var_3672: Tensor[(1170), float32]) -> (Tensor[(15, 14, 5), float32], Tensor[(13, 10, 9), uint64], Tensor[(1170), float32]) {
  %439 = @func_1568() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32]) */;
  %440 = cast(%var_3672, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %441 = cast(%var_3672, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %442 = cast(%var_3672, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %443 = reshape(%440, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), float32] */;
  %444 = reshape(%441, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), float32] */;
  %445 = reshape(%442, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), float32] */;
  %446 = @func_441(%443, %444, %445) /* ty=(Tensor[(13, 10, 9), bool], Tensor[(10, 3, 6), bool], Tensor[(180), float32], Tensor[(10, 3, 6), bool], Tensor[(13, 10, 9), bool], Tensor[(14, 8, 2), float64], Tensor[(224), int16], Tensor[(13, 10, 9), uint8], Tensor[(13, 10, 9), uint64], Tensor[(10, 3, 6), bool], Tensor[(10, 3, 6), bool]) */;
  %447 = %439.0;
  %448 = %446.8;
  (%447, %448, %var_3672)
}

def @func_5020() -> (Tensor[(15, 14, 5), float32],) {
  %449 = @func_2480() /* ty=Tensor[(15, 14, 5), float32] */;
  (%449,)
}

def @func_1887() -> (Tensor[(15, 14, 5), float32], Tensor[(15, 14, 8), float64]) {
  %450 = @func_1022() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 8), float64]) */;
  %451 = @func_1821() /* ty=(Tensor[(15, 14, 8), float64],) */;
  %452 = %450.0;
  %453 = %451.0;
  (%452, %453)
}

def @func_7733() -> (Tensor[(15, 14, 5), float32],) {
  %454 = @func_2023() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(9, 13, 8), float32], Tensor[(936), float32]) */;
  %455 = %454.0;
  (%455,)
}

def @func_7594(%var_7556: Tensor[(1, 1170), float32], %var_7570: Tensor[(360), int64], %var_7583: Tensor[(900), float32]) -> (Tensor[(15, 14, 5), float32], Tensor[(2, 15, 8), float32], Tensor[(8, 224), float32], Tensor[(896, 2), float32], Tensor[(1, 1170), float32], Tensor[(1170), float32], Tensor[(360), int64], Tensor[(15, 14, 5), float32], Tensor[(900), float32], Tensor[(900), float32]) {
  %456 = @func_4957() /* ty=(Tensor[(2, 15, 8), float32], Tensor[(2, 15, 8), float32]) */;
  %457 = cast(meta[relay.Constant][19] /* ty=Tensor[(896, 2), float32] */, dtype="float32") /* ty=Tensor[(896, 2), float32] */;
  %458 = cast(%var_7556, dtype="float32") /* ty=Tensor[(1, 1170), float32] */;
  %459 = reshape(%457, newshape=[8, 224]) /* ty=Tensor[(8, 224), float32] */;
  %460 = reshape(%458, newshape=[1170]) /* ty=Tensor[(1170), float32] */;
  %461 = @func_1523(%459, %460) /* ty=(Tensor[(15, 14, 5), float32], Tensor[(7, 16, 16), float32], Tensor[(13, 10, 9), bool], Tensor[(1170), float32], Tensor[(180), float32], Tensor[(8, 224), float32], Tensor[(8, 224), float32]) */;
  %462 = cast(%var_7570, dtype="int64") /* ty=Tensor[(360), int64] */;
  %463 = reshape(%462, newshape=[360]) /* ty=Tensor[(360), int64] */;
  %464 = @func_2086(%463) /* ty=(Tensor[(15, 14, 5), float32], Tensor[(1170), float32], Tensor[(360), int64]) */;
  %465 = @func_6685() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %466 = cast(%var_7583, dtype="float32") /* ty=Tensor[(900), float32] */;
  %467 = reshape(%466, newshape=[900]) /* ty=Tensor[(900), float32] */;
  %468 = @func_6752(%467) /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 12, 5), float32], Tensor[(900), float32]) */;
  %469 = @func_7530() /* ty=Tensor[(15, 14, 5), float32] */;
  %470 = %456.1;
  %471 = %461.6;
  %472 = %464.1;
  %473 = %465.0;
  %474 = %468.2;
  (%469, %470, %471, meta[relay.Constant][19] /* ty=Tensor[(896, 2), float32] */, %var_7556, %472, %var_7570, %473, %474, %var_7583)
}

def @func_5566() -> Tensor[(15, 14, 8), float64] {
  %475 = @func_5198() /* ty=(Tensor[(15, 14, 8), float64],) */;
  %475.0
}

def @func_1486(%var_1472: Tensor[(72), float32]) -> (Tensor[(4, 7, 2), float32], Tensor[(4, 7, 2), uint8], Tensor[(1170), float32], Tensor[(72), float32], Tensor[(390, 3), float32]) {
  %476 = cast(meta[relay.Constant][21] /* ty=Tensor[(4, 7, 2), float32] */, dtype="float32") /* ty=Tensor[(4, 7, 2), float32] */;
  %477 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(4, 7, 2), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %478 = cast(meta[relay.Constant][20] /* ty=Tensor[(4, 7, 2), float32] */, dtype="float32") /* ty=Tensor[(4, 7, 2), float32] */;
  %479 = dyn.reshape(%476, %477, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %480 = cast(meta[relay.Constant][22] /* ty=Tensor[(4, 7, 2), float32] */, dtype="uint8") /* ty=Tensor[(4, 7, 2), uint8] */;
  %481 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(4, 7, 2), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %482 = cast(meta[relay.Constant][20] /* ty=Tensor[(4, 7, 2), float32] */, dtype="uint8") /* ty=Tensor[(4, 7, 2), uint8] */;
  %483 = dyn.reshape(%480, %481, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %484 = cast(%var_1472, dtype="float32") /* ty=Tensor[(72), float32] */;
  %485 = cast(meta[relay.Constant][23] /* ty=Tensor[(390, 3), float32] */, dtype="float32") /* ty=Tensor[(390, 3), float32] */;
  %486 = reshape(%484, newshape=[12, 1, 6]) /* ty=Tensor[(12, 1, 6), float32] */;
  %487 = reshape(%485, newshape=[1170]) /* ty=Tensor[(1170), float32] */;
  %488 = @func_993(%486, %487) /* ty=(Tensor[(12, 1, 6), float32], Tensor[(13, 10, 9), uint8], Tensor[(1170), float32]) */;
  %489 = mod(%478, %479) /* ty=Tensor[(4, 7, 2), float32] */;
  %490 = add(%482, %483) /* ty=Tensor[(4, 7, 2), uint8] */;
  %491 = %488.2;
  (%489, %490, %491, %var_1472, meta[relay.Constant][23] /* ty=Tensor[(390, 3), float32] */)
}

def @func_528(%var_492: Tensor[(15, 2, 13), int8], %var_493: Tensor[(15, 2, 13), int8]) -> (Tensor[(15, 2, 13), float32], Tensor[(15, 2, 13), uint64]) {
  %492 = cast(%var_492, dtype="float32") /* ty=Tensor[(15, 2, 13), float32] */;
  %493 = shape_of(%var_493, dtype="int32") /* ty=Tensor[(3), int32] */;
  %494 = cast(%var_493, dtype="float32") /* ty=Tensor[(15, 2, 13), float32] */;
  %495 = dyn.reshape(%492, %493, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %496 = cast(%var_493, dtype="int8") /* ty=Tensor[(15, 2, 13), int8] */;
  %497 = shape_of(%var_492, dtype="int32") /* ty=Tensor[(3), int32] */;
  %498 = cast(%var_492, dtype="int8") /* ty=Tensor[(15, 2, 13), int8] */;
  %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %500 = bitwise_and(%498, %499) /* ty=Tensor[(15, 2, 13), int8] */;
  %501 = cast(%var_492, dtype="bool") /* ty=Tensor[(15, 2, 13), bool] */;
  %502 = shape_of(%var_493, dtype="int32") /* ty=Tensor[(3), int32] */;
  %503 = cast(%var_493, dtype="bool") /* ty=Tensor[(15, 2, 13), bool] */;
  %504 = dyn.reshape(%501, %502, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %505 = not_equal(%503, %504) /* ty=Tensor[(15, 2, 13), bool] */;
  %506 = cast(%505, dtype="uint64") /* ty=Tensor[(15, 2, 13), uint64] */;
  %507 = shape_of(%500, dtype="int32") /* ty=Tensor[(3), int32] */;
  %508 = cast(%500, dtype="uint64") /* ty=Tensor[(15, 2, 13), uint64] */;
  %509 = dyn.reshape(%506, %507, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %510 = divide(%494, %495) /* ty=Tensor[(15, 2, 13), float32] */;
  %511 = maximum(%508, %509) /* ty=Tensor[(15, 2, 13), uint64] */;
  (%510, %511)
}

def @func_5319() -> (Tensor[(448, 4), float64],) {
  %512 = @func_4095() /* ty=Tensor[(448, 4), float64] */;
  (%512,)
}

def @func_5640(%var_5631: Tensor[(4, 12, 13), float64]) -> Tensor[(4, 12, 13), float64] {
  %513 = cast(%var_5631, dtype="float64") /* ty=Tensor[(4, 12, 13), float64] */;
  rsqrt(%513) /* ty=Tensor[(4, 12, 13), float64] */
}

def @func_2337(%var_2313: Tensor[(1170), float64], %var_2324: Tensor[(12, 78), float32]) -> (Tensor[(1170), float64], Tensor[(15, 14, 5), float32], Tensor[(9, 13, 8), float32], Tensor[(12, 78), float32], Tensor[(1170), float64]) {
  %514 = @func_1235() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(13, 10, 9), bool], Tensor[(1170), float32], Tensor[(7, 16, 16), float32], Tensor[(448, 4), float64]) */;
  %515 = %514.2;
  %516 = cast(%515, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %517 = cos(%516) /* ty=Tensor[(1170), float32] */;
  %518 = cast(%517, dtype="float64") /* ty=Tensor[(1170), float64] */;
  %519 = sqrt(%518) /* ty=Tensor[(1170), float64] */;
  %520 = cast(%var_2313, dtype="float64") /* ty=Tensor[(1170), float64] */;
  %521 = shape_of(%519, dtype="int32") /* ty=Tensor[(1), int32] */;
  %522 = cast(%519, dtype="float64") /* ty=Tensor[(1170), float64] */;
  %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?), float64] */;
  %524 = @func_1431() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %525 = cast(%var_2324, dtype="float32") /* ty=Tensor[(12, 78), float32] */;
  %526 = reshape(%525, newshape=[9, 13, 8]) /* ty=Tensor[(9, 13, 8), float32] */;
  %527 = cast(%517, dtype="float64") /* ty=Tensor[(1170), float64] */;
  %528 = floor_mod(%522, %523) /* ty=Tensor[(1170), float64] */;
  %529 = %524.0;
  %530 = @func_658(%526) /* ty=Tensor[(9, 13, 8), float32] */;
  %531 = exp(%527) /* ty=Tensor[(1170), float64] */;
  (%528, %529, %530, %var_2324, %531)
}

def @func_441(%var_337: Tensor[(13, 10, 9), float32], %var_351: Tensor[(13, 10, 9), float32], %var_369: Tensor[(13, 10, 9), float32]) -> (Tensor[(13, 10, 9), bool], Tensor[(10, 3, 6), bool], Tensor[(180), float32], Tensor[(10, 3, 6), bool], Tensor[(13, 10, 9), bool], Tensor[(14, 8, 2), float64], Tensor[(224), int16], Tensor[(13, 10, 9), uint8], Tensor[(13, 10, 9), uint64], Tensor[(10, 3, 6), bool], Tensor[(10, 3, 6), bool]) {
  %532 = cast(%var_351, dtype="bool") /* ty=Tensor[(13, 10, 9), bool] */;
  %533 = shape_of(%var_337, dtype="int32") /* ty=Tensor[(3), int32] */;
  %534 = cast(%var_337, dtype="bool") /* ty=Tensor[(13, 10, 9), bool] */;
  %535 = dyn.reshape(%532, %533, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %536 = cast(meta[relay.Constant][24] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %537 = reshape(%536, newshape=[10, 3, 6]) /* ty=Tensor[(10, 3, 6), float32] */;
  %538 = @func_162(%537) /* ty=(Tensor[(10, 3, 6), bool],) */;
  %539 = cast(meta[relay.Constant][24] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %540 = reshape(%539, newshape=[10, 3, 6]) /* ty=Tensor[(10, 3, 6), float32] */;
  %541 = @func_162(%540) /* ty=(Tensor[(10, 3, 6), bool],) */;
  %542 = cast(%var_337, dtype="float32") /* ty=Tensor[(13, 10, 9), float32] */;
  %543 = asin(%542) /* ty=Tensor[(13, 10, 9), float32] */;
  %544 = cast(%var_369, dtype="bool") /* ty=Tensor[(13, 10, 9), bool] */;
  %545 = shape_of(%543, dtype="int32") /* ty=Tensor[(3), int32] */;
  %546 = cast(%543, dtype="bool") /* ty=Tensor[(13, 10, 9), bool] */;
  %547 = dyn.reshape(%544, %545, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %548 = cast(meta[relay.Constant][25] /* ty=Tensor[(224), int16] */, dtype="int16") /* ty=Tensor[(224), int16] */;
  %549 = cast(meta[relay.Constant][25] /* ty=Tensor[(224), int16] */, dtype="int16") /* ty=Tensor[(224), int16] */;
  %550 = reshape(%548, newshape=[14, 8, 2]) /* ty=Tensor[(14, 8, 2), int16] */;
  %551 = reshape(%549, newshape=[14, 8, 2]) /* ty=Tensor[(14, 8, 2), int16] */;
  %552 = @func_310(%550, %551) /* ty=(Tensor[(14, 8, 2), int16], Tensor[(14, 8, 2), float64]) */;
  %553 = cast(%var_369, dtype="uint8") /* ty=Tensor[(13, 10, 9), uint8] */;
  %554 = shape_of(%543, dtype="int32") /* ty=Tensor[(3), int32] */;
  %555 = cast(%543, dtype="uint8") /* ty=Tensor[(13, 10, 9), uint8] */;
  %556 = dyn.reshape(%553, %554, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %557 = cast(%var_337, dtype="uint64") /* ty=Tensor[(13, 10, 9), uint64] */;
  %558 = shape_of(%var_351, dtype="int32") /* ty=Tensor[(3), int32] */;
  %559 = cast(%var_351, dtype="uint64") /* ty=Tensor[(13, 10, 9), uint64] */;
  %560 = dyn.reshape(%557, %558, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %561 = %538.0;
  %562 = cast(%561, dtype="float32") /* ty=Tensor[(10, 3, 6), float32] */;
  %563 = reshape(%562, newshape=[10, 3, 6]) /* ty=Tensor[(10, 3, 6), float32] */;
  %564 = @func_162(%563) /* ty=(Tensor[(10, 3, 6), bool],) */;
  %565 = cast(meta[relay.Constant][24] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %566 = reshape(%565, newshape=[10, 3, 6]) /* ty=Tensor[(10, 3, 6), float32] */;
  %567 = @func_162(%566) /* ty=(Tensor[(10, 3, 6), bool],) */;
  %568 = greater_equal(%534, %535) /* ty=Tensor[(13, 10, 9), bool] */;
  %569 = %541.0;
  %570 = equal(%546, %547) /* ty=Tensor[(13, 10, 9), bool] */;
  %571 = %552.1;
  %572 = minimum(%555, %556) /* ty=Tensor[(13, 10, 9), uint8] */;
  %573 = bitwise_and(%559, %560) /* ty=Tensor[(13, 10, 9), uint64] */;
  %574 = %564.0;
  %575 = %567.0;
  (%568, %561, meta[relay.Constant][24] /* ty=Tensor[(180), float32] */, %569, %570, %571, meta[relay.Constant][25] /* ty=Tensor[(224), int16] */, %572, %573, %574, %575)
}

def @func_2764(%var_2749: Tensor[(448, 4), float64]) -> (Tensor[(15, 14, 5), float32], Tensor[(448, 4), float64]) {
  %576 = @func_2023() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(9, 13, 8), float32], Tensor[(936), float32]) */;
  %577 = @func_1235() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(13, 10, 9), bool], Tensor[(1170), float32], Tensor[(7, 16, 16), float32], Tensor[(448, 4), float64]) */;
  %578 = %577.4;
  %579 = cast(%var_2749, dtype="bool") /* ty=Tensor[(448, 4), bool] */;
  %580 = shape_of(%578, dtype="int32") /* ty=Tensor[(2), int32] */;
  %581 = cast(%578, dtype="bool") /* ty=Tensor[(448, 4), bool] */;
  %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %583 = logical_or(%581, %582) /* ty=Tensor[(448, 4), bool] */;
  %584 = cast(%583, dtype="float64") /* ty=Tensor[(448, 4), float64] */;
  %585 = %576.0;
  %586 = log10(%584) /* ty=Tensor[(448, 4), float64] */;
  (%585, %586)
}

def @func_2248() -> (Tensor[(15, 14, 8), float64],) {
  %587 = @func_1821() /* ty=(Tensor[(15, 14, 8), float64],) */;
  %588 = %587.0;
  (%588,)
}

def @func_805(%var_798: Tensor[(12, 10, 3), int64], %var_799: Tensor[(12, 10, 3), int64]) -> Tensor[(12, 10, 3), bool] {
  %589 = cast(%var_799, dtype="bool") /* ty=Tensor[(12, 10, 3), bool] */;
  %590 = shape_of(%var_798, dtype="int32") /* ty=Tensor[(3), int32] */;
  %591 = cast(%var_798, dtype="bool") /* ty=Tensor[(12, 10, 3), bool] */;
  %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%591, %592) /* ty=Tensor[(12, 10, 3), bool] */
}

def @func_7745(%var_7739: Tensor[(9, 7, 14), bool], %var_7740: Tensor[(9, 7, 14), bool]) -> Tensor[(9, 7, 14), bool] {
  %593 = cast(%var_7740, dtype="bool") /* ty=Tensor[(9, 7, 14), bool] */;
  %594 = shape_of(%var_7739, dtype="int32") /* ty=Tensor[(3), int32] */;
  %595 = cast(%var_7739, dtype="bool") /* ty=Tensor[(9, 7, 14), bool] */;
  %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%595, %596) /* ty=Tensor[(9, 7, 14), bool] */
}

def @func_6944(%var_6880: Tensor[(2400), uint64]) -> (Tensor[(15, 14, 8), float64], Tensor[(1170), float32], Tensor[(180), bool], Tensor[(15, 14, 5), float32], Tensor[(15, 16, 10), int8], Tensor[(10, 75), bool], Tensor[(2, 15, 8), float32], Tensor[(2400), bool], Tensor[(2400), float64]) {
  %597 = @func_5600() /* ty=(Tensor[(15, 14, 8), float64],) */;
  %598 = cast(meta[relay.Constant][26] /* ty=Tensor[(180), bool] */, dtype="bool") /* ty=Tensor[(180), bool] */;
  %599 = reshape(%598, newshape=[10, 3, 6]) /* ty=Tensor[(10, 3, 6), bool] */;
  %600 = @func_4816(%599) /* ty=(Tensor[(1170), float32], Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), int64], Tensor[(10, 3, 6), float64], Tensor[(1170), float32]) */;
  %601 = @func_3071() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %602 = cast(%var_6880, dtype="uint64") /* ty=Tensor[(2400), uint64] */;
  %603 = cast(%var_6880, dtype="uint64") /* ty=Tensor[(2400), uint64] */;
  %604 = cast(meta[relay.Constant][27] /* ty=Tensor[(10, 75), bool] */, dtype="bool") /* ty=Tensor[(10, 75), bool] */;
  %605 = reshape(%602, newshape=[15, 16, 10]) /* ty=Tensor[(15, 16, 10), uint64] */;
  %606 = reshape(%603, newshape=[15, 16, 10]) /* ty=Tensor[(15, 16, 10), uint64] */;
  %607 = reshape(%604, newshape=[50, 15]) /* ty=Tensor[(50, 15), bool] */;
  %608 = @func_4258(%605, %606, %607) /* ty=(Tensor[(15, 16, 10), int8], Tensor[(15, 16, 10), float32], Tensor[(5, 15, 10), uint64]) */;
  %609 = @func_4934() /* ty=(Tensor[(2, 15, 8), float32],) */;
  %610 = cast(%var_6880, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %611 = cos(%610) /* ty=Tensor[(2400), float32] */;
  %612 = cast(%611, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %613 = asin(%612) /* ty=Tensor[(2400), float32] */;
  %614 = cast(%611, dtype="bool") /* ty=Tensor[(2400), bool] */;
  %615 = shape_of(%613, dtype="int32") /* ty=Tensor[(1), int32] */;
  %616 = cast(%613, dtype="bool") /* ty=Tensor[(2400), bool] */;
  %617 = dyn.reshape(%614, %615, newshape=[]) /* ty=Tensor[(?), bool] */;
  %618 = cast(%613, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %619 = exp(%618) /* ty=Tensor[(2400), float32] */;
  %620 = cast(%611, dtype="float64") /* ty=Tensor[(2400), float64] */;
  %621 = shape_of(%619, dtype="int32") /* ty=Tensor[(1), int32] */;
  %622 = cast(%619, dtype="float64") /* ty=Tensor[(2400), float64] */;
  %623 = dyn.reshape(%620, %621, newshape=[]) /* ty=Tensor[(?), float64] */;
  %624 = %597.0;
  %625 = %600.0;
  %626 = %601.0;
  %627 = %608.0;
  %628 = %609.0;
  %629 = logical_or(%616, %617) /* ty=Tensor[(2400), bool] */;
  %630 = minimum(%622, %623) /* ty=Tensor[(2400), float64] */;
  (%624, %625, meta[relay.Constant][26] /* ty=Tensor[(180), bool] */, %626, %627, meta[relay.Constant][27] /* ty=Tensor[(10, 75), bool] */, %628, %629, %630)
}

def @func_1821() -> (Tensor[(15, 14, 8), float64],) {
  %631 = @func_1022() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 8), float64]) */;
  %632 = %631.1;
  (%632,)
}

def @func_4064(%var_4062: Tensor[(360), int64]) -> (Tensor[(15, 14, 5), float32], Tensor[(12, 10, 3), bool], Tensor[(360), int64]) {
  %633 = @func_2217() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(12, 10, 3), bool], Tensor[(360), int64]) */;
  %634 = cast(%var_4062, dtype="int64") /* ty=Tensor[(360), int64] */;
  %635 = reshape(%634, newshape=[360]) /* ty=Tensor[(360), int64] */;
  %636 = @func_1377(%635) /* ty=(Tensor[(1170), float32], Tensor[(12, 10, 3), bool], Tensor[(360), int64]) */;
  %637 = %633.0;
  %638 = %636.1;
  (%637, %638, %var_4062)
}

def @func_3763(%var_3755: Tensor[(6, 15, 2), float64]) -> Tensor[(6, 15, 2), float64] {
  %639 = cast(%var_3755, dtype="float64") /* ty=Tensor[(6, 15, 2), float64] */;
  asin(%639) /* ty=Tensor[(6, 15, 2), float64] */
}

def @func_1059() -> (Tensor[(15, 14, 5), float32],) {
  %640 = @func_1022() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 8), float64]) */;
  %641 = %640.0;
  (%641,)
}

def @func_7530() -> Tensor[(15, 14, 5), float32] {
  %642 = @func_3115() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %642.0
}

def @func_7456(%var_7417: Tensor[(16, 2, 13), float64]) -> (Tensor[(6, 15, 2), float64], Tensor[(1, 180), float64], Tensor[(7, 16, 16), float32], Tensor[(16, 2, 13), bool]) {
  %643 = cast(meta[relay.Constant][28] /* ty=Tensor[(1, 180), float64] */, dtype="float64") /* ty=Tensor[(1, 180), float64] */;
  %644 = reshape(%643, newshape=[6, 15, 2]) /* ty=Tensor[(6, 15, 2), float64] */;
  %645 = @func_7341() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(7, 16, 16), float32], Tensor[(1792), float32]) */;
  %646 = cast(%var_7417, dtype="float64") /* ty=Tensor[(16, 2, 13), float64] */;
  %647 = acos(%646) /* ty=Tensor[(16, 2, 13), float64] */;
  %648 = cast(%var_7417, dtype="bool") /* ty=Tensor[(16, 2, 13), bool] */;
  %649 = shape_of(%647, dtype="int32") /* ty=Tensor[(3), int32] */;
  %650 = cast(%647, dtype="bool") /* ty=Tensor[(16, 2, 13), bool] */;
  %651 = dyn.reshape(%648, %649, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %652 = @func_3763(%644) /* ty=Tensor[(6, 15, 2), float64] */;
  %653 = %645.1;
  %654 = greater(%650, %651) /* ty=Tensor[(16, 2, 13), bool] */;
  (%652, meta[relay.Constant][28] /* ty=Tensor[(1, 180), float64] */, %653, %654)
}

def @func_1431() -> (Tensor[(15, 14, 5), float32],) {
  %655 = @func_1158() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %656 = %655.0;
  (%656,)
}

def @func_3731() -> (Tensor[(15, 14, 5), float32], Tensor[(4, 7, 14), float32], Tensor[(15, 14, 5), float32]) {
  %657 = @func_1431() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %658 = cast(meta[relay.Constant][29] /* ty=Tensor[(4, 7, 14), float64] */, dtype="float64") /* ty=Tensor[(4, 7, 14), float64] */;
  %659 = asinh(%658) /* ty=Tensor[(4, 7, 14), float64] */;
  %660 = cast(%659, dtype="float32") /* ty=Tensor[(4, 7, 14), float32] */;
  %661 = @func_1887() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 8), float64]) */;
  %662 = %657.0;
  %663 = acos(%660) /* ty=Tensor[(4, 7, 14), float32] */;
  %664 = %661.0;
  (%662, %663, %664)
}

def @func_3881(%var_3878: Tensor[(1170), float64], %var_3879: Tensor[(936), float32]) -> (Tensor[(15, 14, 5), float32], Tensor[(12, 78), float32], Tensor[(1170), float64], Tensor[(936), float32]) {
  %665 = @func_3827() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(14, 8, 2), float64], Tensor[(224, 1), int16], Tensor[(15, 14, 8), float64], Tensor[(15, 14, 5), float32]) */;
  %666 = cast(%var_3878, dtype="float64") /* ty=Tensor[(1170), float64] */;
  %667 = cast(%var_3879, dtype="float32") /* ty=Tensor[(936), float32] */;
  %668 = reshape(%666, newshape=[1170]) /* ty=Tensor[(1170), float64] */;
  %669 = reshape(%667, newshape=[12, 78]) /* ty=Tensor[(12, 78), float32] */;
  %670 = @func_2337(%668, %669) /* ty=(Tensor[(1170), float64], Tensor[(15, 14, 5), float32], Tensor[(9, 13, 8), float32], Tensor[(12, 78), float32], Tensor[(1170), float64]) */;
  %671 = %665.0;
  %672 = %670.3;
  (%671, %672, %var_3878, %var_3879)
}

def @func_1158() -> (Tensor[(15, 14, 5), float32],) {
  %673 = @func_1059() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %674 = %673.0;
  (%674,)
}

def @func_2543() -> (Tensor[(1170), float32], Tensor[(15, 14, 8), float64]) {
  %675 = @func_1682() /* ty=(Tensor[(1170), float64], Tensor[(13, 10, 9), bool], Tensor[(1170), float32], Tensor[(72), float32]) */;
  %676 = @func_1887() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 8), float64]) */;
  %677 = %675.2;
  %678 = %676.1;
  (%677, %678)
}

def @func_5600() -> (Tensor[(15, 14, 8), float64],) {
  %679 = @func_1887() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 8), float64]) */;
  %680 = %679.1;
  (%680,)
}

def @func_1568() -> (Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32]) {
  %681 = @func_1431() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %682 = @func_1059() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %683 = %681.0;
  %684 = %682.0;
  (%683, %684)
}

def @func_4663() -> (Tensor[(15, 14, 5), float32],) {
  %685 = @func_3115() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %686 = %685.0;
  (%686,)
}

def @func_6341(%var_6331: Tensor[(16, 1), int32]) -> (Tensor[(16, 1), bool], Tensor[(15, 14, 5), float32]) {
  %687 = cast(-8 /* ty=int32 */, dtype="bool") /* ty=bool */;
  %688 = cast(%var_6331, dtype="bool") /* ty=Tensor[(16, 1), bool] */;
  %689 = @func_4915() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %690 = greater_equal(%687, %688) /* ty=Tensor[(16, 1), bool] */;
  %691 = %689.0;
  (%690, %691)
}

def @func_3071() -> (Tensor[(15, 14, 5), float32],) {
  %692 = @func_1022() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 8), float64]) */;
  %693 = %692.0;
  (%693,)
}

def @func_1022() -> (Tensor[(15, 14, 5), float32], Tensor[(15, 14, 8), float64]) {
  %694 = cast(meta[relay.Constant][30] /* ty=Tensor[(15, 14, 1), float32] */, dtype="float32") /* ty=Tensor[(15, 14, 1), float32] */;
  %695 = cast(meta[relay.Constant][31] /* ty=Tensor[(15, 14, 5), float32] */, dtype="float32") /* ty=Tensor[(15, 14, 5), float32] */;
  %696 = cast(meta[relay.Constant][30] /* ty=Tensor[(15, 14, 1), float32] */, dtype="float64") /* ty=Tensor[(15, 14, 1), float64] */;
  %697 = cast(meta[relay.Constant][32] /* ty=Tensor[(15, 14, 8), float32] */, dtype="float64") /* ty=Tensor[(15, 14, 8), float64] */;
  %698 = mod(%694, %695) /* ty=Tensor[(15, 14, 5), float32] */;
  %699 = floor_mod(%696, %697) /* ty=Tensor[(15, 14, 8), float64] */;
  (%698, %699)
}

def @func_6328() -> (Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32]) {
  %700 = @func_2937() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %701 = @func_2217() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(12, 10, 3), bool], Tensor[(360), int64]) */;
  %702 = %700.0;
  %703 = @func_2863() /* ty=Tensor[(15, 14, 5), float32] */;
  %704 = %701.0;
  (%702, %703, %704)
}

def @func_5357() -> (Tensor[(15, 14, 5), float32],) {
  %705 = @func_2830() /* ty=(Tensor[(15, 14, 8), float64], Tensor[(15, 14, 5), float32]) */;
  %706 = %705.1;
  (%706,)
}

def @main(%var_7848: Tensor[(5, 15, 1), float32]) -> (Tensor[(5, 15, 1), float32],) {
  %707 = cast(%var_7848, dtype="float32") /* ty=Tensor[(5, 15, 1), float32] */;
  %708 = acosh(%707) /* ty=Tensor[(5, 15, 1), float32] */;
  (%708,)
}

def @func_1682() -> (Tensor[(1170), float64], Tensor[(13, 10, 9), bool], Tensor[(1170), float32], Tensor[(72), float32]) {
  %709 = @func_1344() /* ty=Tensor[(1170), float32] */;
  %710 = cast(meta[relay.Constant][33] /* ty=Tensor[(1170), float32] */, dtype="float64") /* ty=Tensor[(1170), float64] */;
  %711 = shape_of(%709, dtype="int32") /* ty=Tensor[(1), int32] */;
  %712 = cast(%709, dtype="float64") /* ty=Tensor[(1170), float64] */;
  %713 = dyn.reshape(%710, %711, newshape=[]) /* ty=Tensor[(?), float64] */;
  %714 = power(%712, %713) /* ty=Tensor[(1170), float64] */;
  %715 = cast(%714, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %716 = cast(meta[relay.Constant][33] /* ty=Tensor[(1170), float32] */, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %717 = cast(%709, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %718 = reshape(%715, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), float32] */;
  %719 = reshape(%716, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), float32] */;
  %720 = reshape(%717, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), float32] */;
  %721 = @func_441(%718, %719, %720) /* ty=(Tensor[(13, 10, 9), bool], Tensor[(10, 3, 6), bool], Tensor[(180), float32], Tensor[(10, 3, 6), bool], Tensor[(13, 10, 9), bool], Tensor[(14, 8, 2), float64], Tensor[(224), int16], Tensor[(13, 10, 9), uint8], Tensor[(13, 10, 9), uint64], Tensor[(10, 3, 6), bool], Tensor[(10, 3, 6), bool]) */;
  %722 = cast(meta[relay.Constant][34] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %723 = cast(meta[relay.Constant][33] /* ty=Tensor[(1170), float32] */, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %724 = reshape(%722, newshape=[12, 1, 6]) /* ty=Tensor[(12, 1, 6), float32] */;
  %725 = reshape(%723, newshape=[1170]) /* ty=Tensor[(1170), float32] */;
  %726 = @func_993(%724, %725) /* ty=(Tensor[(12, 1, 6), float32], Tensor[(13, 10, 9), uint8], Tensor[(1170), float32]) */;
  %727 = %721.0;
  %728 = %726.2;
  (%714, %727, %728, meta[relay.Constant][34] /* ty=Tensor[(72), float32] */)
}

def @func_5900() -> (Tensor[(4, 6, 6), int8], Tensor[(4, 6, 6), float32]) {
  %729 = cast(meta[relay.Constant][35] /* ty=Tensor[(4, 6, 6), float64] */, dtype="float64") /* ty=Tensor[(4, 6, 6), float64] */;
  %730 = sin(%729) /* ty=Tensor[(4, 6, 6), float64] */;
  %731 = cast(meta[relay.Constant][35] /* ty=Tensor[(4, 6, 6), float64] */, dtype="int8") /* ty=Tensor[(4, 6, 6), int8] */;
  %732 = shape_of(%730, dtype="int32") /* ty=Tensor[(3), int32] */;
  %733 = cast(%730, dtype="int8") /* ty=Tensor[(4, 6, 6), int8] */;
  %734 = dyn.reshape(%731, %732, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %735 = cast(meta[relay.Constant][36] /* ty=Tensor[(4, 6, 6), float64] */, dtype="bool") /* ty=Tensor[(4, 6, 6), bool] */;
  %736 = shape_of(%730, dtype="int32") /* ty=Tensor[(3), int32] */;
  %737 = cast(%730, dtype="bool") /* ty=Tensor[(4, 6, 6), bool] */;
  %738 = dyn.reshape(%735, %736, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %739 = equal(%737, %738) /* ty=Tensor[(4, 6, 6), bool] */;
  %740 = cast(%739, dtype="float32") /* ty=Tensor[(4, 6, 6), float32] */;
  %741 = multiply(%733, %734) /* ty=Tensor[(4, 6, 6), int8] */;
  %742 = asinh(%740) /* ty=Tensor[(4, 6, 6), float32] */;
  (%741, %742)
}

def @func_6645() -> (Tensor[(15, 14, 5), float32], Tensor[(22), float32], Tensor[(448, 4), float64]) {
  %743 = @func_2830() /* ty=(Tensor[(15, 14, 8), float64], Tensor[(15, 14, 5), float32]) */;
  %744 = @func_6209() /* ty=(Tensor[(13, 10, 9), bool], Tensor[(15, 14, 8), float64], Tensor[(22), float32]) */;
  %745 = @func_5319() /* ty=(Tensor[(448, 4), float64],) */;
  %746 = %743.1;
  %747 = %744.2;
  %748 = %745.0;
  (%746, %747, %748)
}

def @func_3746() -> Tensor[(15, 14, 5), float32] {
  %749 = @func_2937() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %749.0
}

def @func_2023() -> (Tensor[(15, 14, 5), float32], Tensor[(9, 13, 8), float32], Tensor[(936), float32]) {
  %750 = cast(meta[relay.Constant][37] /* ty=Tensor[(936), float32] */, dtype="float32") /* ty=Tensor[(936), float32] */;
  %751 = reshape(%750, newshape=[9, 13, 8]) /* ty=Tensor[(9, 13, 8), float32] */;
  %752 = @func_1591() /* ty=Tensor[(15, 14, 5), float32] */;
  %753 = @func_658(%751) /* ty=Tensor[(9, 13, 8), float32] */;
  (%752, %753, meta[relay.Constant][37] /* ty=Tensor[(936), float32] */)
}

def @func_6828() -> (Tensor[(15, 14, 5), float32], Tensor[(15, 14, 8), float64]) {
  %754 = @func_6118() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %755 = @func_5198() /* ty=(Tensor[(15, 14, 8), float64],) */;
  %756 = %754.0;
  %757 = %755.0;
  (%756, %757)
}

def @func_1235() -> (Tensor[(15, 14, 5), float32], Tensor[(13, 10, 9), bool], Tensor[(1170), float32], Tensor[(7, 16, 16), float32], Tensor[(448, 4), float64]) {
  %758 = @func_1158() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %759 = cast(meta[relay.Constant][38] /* ty=Tensor[(1170), float32] */, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %760 = cast(meta[relay.Constant][38] /* ty=Tensor[(1170), float32] */, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %761 = cast(meta[relay.Constant][38] /* ty=Tensor[(1170), float32] */, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %762 = reshape(%759, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), float32] */;
  %763 = reshape(%760, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), float32] */;
  %764 = reshape(%761, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), float32] */;
  %765 = @func_441(%762, %763, %764) /* ty=(Tensor[(13, 10, 9), bool], Tensor[(10, 3, 6), bool], Tensor[(180), float32], Tensor[(10, 3, 6), bool], Tensor[(13, 10, 9), bool], Tensor[(14, 8, 2), float64], Tensor[(224), int16], Tensor[(13, 10, 9), uint8], Tensor[(13, 10, 9), uint64], Tensor[(10, 3, 6), bool], Tensor[(10, 3, 6), bool]) */;
  %766 = cast(meta[relay.Constant][39] /* ty=Tensor[(448, 4), float32] */, dtype="float32") /* ty=Tensor[(448, 4), float32] */;
  %767 = reshape(%766, newshape=[7, 16, 16]) /* ty=Tensor[(7, 16, 16), float32] */;
  %768 = @func_814(%767) /* ty=(Tensor[(7, 16, 16), float32],) */;
  %769 = cast(meta[relay.Constant][39] /* ty=Tensor[(448, 4), float32] */, dtype="float64") /* ty=Tensor[(448, 4), float64] */;
  %770 = sigmoid(%769) /* ty=Tensor[(448, 4), float64] */;
  %771 = cast(%770, dtype="float64") /* ty=Tensor[(448, 4), float64] */;
  %772 = %758.0;
  %773 = %765.4;
  %774 = %768.0;
  %775 = log(%771) /* ty=Tensor[(448, 4), float64] */;
  (%772, %773, meta[relay.Constant][38] /* ty=Tensor[(1170), float32] */, %774, %775)
}

def @func_2217() -> (Tensor[(15, 14, 5), float32], Tensor[(12, 10, 3), bool], Tensor[(360), int64]) {
  %776 = @func_1431() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %777 = cast(meta[relay.Constant][40] /* ty=Tensor[(360), int64] */, dtype="int64") /* ty=Tensor[(360), int64] */;
  %778 = cast(meta[relay.Constant][40] /* ty=Tensor[(360), int64] */, dtype="int64") /* ty=Tensor[(360), int64] */;
  %779 = reshape(%777, newshape=[12, 10, 3]) /* ty=Tensor[(12, 10, 3), int64] */;
  %780 = reshape(%778, newshape=[12, 10, 3]) /* ty=Tensor[(12, 10, 3), int64] */;
  %781 = %776.0;
  %782 = @func_805(%779, %780) /* ty=Tensor[(12, 10, 3), bool] */;
  (%781, %782, meta[relay.Constant][40] /* ty=Tensor[(360), int64] */)
}

def @func_7388() -> Tensor[(15, 14, 5), float32] {
  %783 = @func_4600() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %783.0
}

def @func_3827() -> (Tensor[(15, 14, 5), float32], Tensor[(14, 8, 2), float64], Tensor[(224, 1), int16], Tensor[(15, 14, 8), float64], Tensor[(15, 14, 5), float32]) {
  %784 = cast(meta[relay.Constant][41] /* ty=Tensor[(224, 1), int16] */, dtype="int16") /* ty=Tensor[(224, 1), int16] */;
  %785 = cast(meta[relay.Constant][41] /* ty=Tensor[(224, 1), int16] */, dtype="int16") /* ty=Tensor[(224, 1), int16] */;
  %786 = reshape(%784, newshape=[14, 8, 2]) /* ty=Tensor[(14, 8, 2), int16] */;
  %787 = reshape(%785, newshape=[14, 8, 2]) /* ty=Tensor[(14, 8, 2), int16] */;
  %788 = @func_310(%786, %787) /* ty=(Tensor[(14, 8, 2), int16], Tensor[(14, 8, 2), float64]) */;
  %789 = @func_2830() /* ty=(Tensor[(15, 14, 8), float64], Tensor[(15, 14, 5), float32]) */;
  %790 = @func_1111() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32]) */;
  %791 = @func_3170() /* ty=Tensor[(15, 14, 5), float32] */;
  %792 = %788.1;
  %793 = %789.0;
  %794 = %790.1;
  (%791, %792, meta[relay.Constant][41] /* ty=Tensor[(224, 1), int16] */, %793, %794)
}

def @func_6094(%var_6085: Tensor[(6, 8, 15), float64]) -> (Tensor[(6, 8, 15), float64], Tensor[(6, 8, 15), float64]) {
  %795 = cast(%var_6085, dtype="float64") /* ty=Tensor[(6, 8, 15), float64] */;
  %796 = cast(%var_6085, dtype="float64") /* ty=Tensor[(6, 8, 15), float64] */;
  %797 = sigmoid(%795) /* ty=Tensor[(6, 8, 15), float64] */;
  %798 = asinh(%796) /* ty=Tensor[(6, 8, 15), float64] */;
  (%797, %798)
}

def @func_7341() -> (Tensor[(15, 14, 5), float32], Tensor[(7, 16, 16), float32], Tensor[(1792), float32]) {
  %799 = @func_3548() /* ty=Tensor[(15, 14, 5), float32] */;
  %800 = @func_1111() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32]) */;
  %801 = %800.1;
  %802 = cast(%801, dtype="float32") /* ty=Tensor[(15, 14, 5), float32] */;
  %803 = shape_of(%799, dtype="int32") /* ty=Tensor[(3), int32] */;
  %804 = cast(%799, dtype="float32") /* ty=Tensor[(15, 14, 5), float32] */;
  %805 = dyn.reshape(%802, %803, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %806 = cast(meta[relay.Constant][42] /* ty=Tensor[(1792), float32] */, dtype="float32") /* ty=Tensor[(1792), float32] */;
  %807 = reshape(%806, newshape=[7, 16, 16]) /* ty=Tensor[(7, 16, 16), float32] */;
  %808 = @func_814(%807) /* ty=(Tensor[(7, 16, 16), float32],) */;
  %809 = floor_mod(%804, %805) /* ty=Tensor[(15, 14, 5), float32] */;
  %810 = %808.0;
  (%809, %810, meta[relay.Constant][42] /* ty=Tensor[(1792), float32] */)
}

def @func_3170() -> Tensor[(15, 14, 5), float32] {
  %811 = @func_3071() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %811.0
}

def @func_1786(%var_1743: Tensor[(360), int64], %var_1754: Tensor[(180, 1), float32], %var_1759: Tensor[(1170), float32]) -> (Tensor[(15, 14, 5), float32], Tensor[(12, 10, 3), bool], Tensor[(360), int64], Tensor[(10, 3, 6), bool], Tensor[(180, 1), float32], Tensor[(15, 14, 5), float32], Tensor[(1170), float32], Tensor[(15, 14, 5), float64]) {
  %812 = @func_1431() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %813 = cast(%var_1743, dtype="int64") /* ty=Tensor[(360), int64] */;
  %814 = reshape(%813, newshape=[360]) /* ty=Tensor[(360), int64] */;
  %815 = @func_1377(%814) /* ty=(Tensor[(1170), float32], Tensor[(12, 10, 3), bool], Tensor[(360), int64]) */;
  %816 = cast(%var_1754, dtype="float32") /* ty=Tensor[(180, 1), float32] */;
  %817 = reshape(%816, newshape=[10, 3, 6]) /* ty=Tensor[(10, 3, 6), float32] */;
  %818 = @func_162(%817) /* ty=(Tensor[(10, 3, 6), bool],) */;
  %819 = cast(%var_1759, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %820 = reshape(%819, newshape=[5, 234]) /* ty=Tensor[(5, 234), float32] */;
  %821 = @func_1648(%820) /* ty=(Tensor[(15, 14, 5), float32], Tensor[(5, 234), float32], Tensor[(13, 10, 9), float32]) */;
  %822 = @func_1158() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %823 = %822.0;
  %824 = cast(%823, dtype="float64") /* ty=Tensor[(15, 14, 5), float64] */;
  %825 = erf(%824) /* ty=Tensor[(15, 14, 5), float64] */;
  %826 = cast(%825, dtype="float64") /* ty=Tensor[(15, 14, 5), float64] */;
  %827 = %812.0;
  %828 = %815.1;
  %829 = %818.0;
  %830 = %821.0;
  %831 = sigmoid(%826) /* ty=Tensor[(15, 14, 5), float64] */;
  (%827, %828, %var_1743, %829, %var_1754, %830, %var_1759, %831)
}

def @func_4957() -> (Tensor[(2, 15, 8), float32], Tensor[(2, 15, 8), float32]) {
  %832 = @func_1986() /* ty=Tensor[(2, 15, 8), float32] */;
  %833 = cast(%832, dtype="float32") /* ty=Tensor[(2, 15, 8), float32] */;
  %834 = cast(%832, dtype="float32") /* ty=Tensor[(2, 15, 8), float32] */;
  %835 = asinh(%833) /* ty=Tensor[(2, 15, 8), float32] */;
  %836 = sigmoid(%834) /* ty=Tensor[(2, 15, 8), float32] */;
  (%835, %836)
}

def @func_4600() -> (Tensor[(15, 14, 5), float32],) {
  %837 = @func_3548() /* ty=Tensor[(15, 14, 5), float32] */;
  (%837,)
}

def @func_162(%var_144: Tensor[(10, 3, 6), float32]) -> (Tensor[(10, 3, 6), bool],) {
  %838 = cast(meta[relay.Constant][43] /* ty=Tensor[(1, 3, 6), float32] */, dtype="bool") /* ty=Tensor[(1, 3, 6), bool] */;
  %839 = cast(%var_144, dtype="bool") /* ty=Tensor[(10, 3, 6), bool] */;
  %840 = greater(%838, %839) /* ty=Tensor[(10, 3, 6), bool] */;
  (%840,)
}

def @func_2394(%var_2382: Tensor[(360), int64], %var_2386: Tensor[(4, 4), uint64]) -> (Tensor[(15, 14, 8), float64], Tensor[(15, 14, 5), float32], Tensor[(360), int64], Tensor[(9, 16, 14), bool], Tensor[(4, 4), uint64], Tensor[(2016), uint64]) {
  %841 = @func_2248() /* ty=(Tensor[(15, 14, 8), float64],) */;
  %842 = cast(%var_2382, dtype="int64") /* ty=Tensor[(360), int64] */;
  %843 = reshape(%842, newshape=[360]) /* ty=Tensor[(360), int64] */;
  %844 = @func_2086(%843) /* ty=(Tensor[(15, 14, 5), float32], Tensor[(1170), float32], Tensor[(360), int64]) */;
  %845 = cast(%var_2386, dtype="uint64") /* ty=Tensor[(4, 4), uint64] */;
  %846 = cast(meta[relay.Constant][44] /* ty=Tensor[(2016), uint64] */, dtype="uint64") /* ty=Tensor[(2016), uint64] */;
  %847 = reshape(%845, newshape=[1, 16, 1]) /* ty=Tensor[(1, 16, 1), uint64] */;
  %848 = reshape(%846, newshape=[9, 16, 14]) /* ty=Tensor[(9, 16, 14), uint64] */;
  %849 = @func_85(%847, %848) /* ty=(Tensor[(9, 16, 14), uint64], Tensor[(9, 16, 14), bool]) */;
  %850 = %841.0;
  %851 = %844.0;
  %852 = %849.1;
  (%850, %851, %var_2382, %852, %var_2386, meta[relay.Constant][44] /* ty=Tensor[(2016), uint64] */)
}

def @func_6209() -> (Tensor[(13, 10, 9), bool], Tensor[(15, 14, 8), float64], Tensor[(22), float32]) {
  %853 = @func_4890() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(13, 10, 9), uint64], Tensor[(1170), float32]) */;
  %854 = %853.1;
  %855 = cast(meta[relay.Constant][45] /* ty=Tensor[(13, 10, 9), uint64] */, dtype="bool") /* ty=Tensor[(13, 10, 9), bool] */;
  %856 = shape_of(%854, dtype="int32") /* ty=Tensor[(3), int32] */;
  %857 = cast(%854, dtype="bool") /* ty=Tensor[(13, 10, 9), bool] */;
  %858 = dyn.reshape(%855, %856, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %859 = cast(meta[relay.Constant][46] /* ty=Tensor[(22), float32] */, dtype="float32") /* ty=Tensor[(22), float32] */;
  %860 = reshape(%859, newshape=[2, 11, 1]) /* ty=Tensor[(2, 11, 1), float32] */;
  %861 = @func_4047(%860) /* ty=(Tensor[(2, 11, 1), float32], Tensor[(15, 14, 8), float64], Tensor[(2, 11, 1), float32], Tensor[(9, 16, 14), uint64], Tensor[(16), uint64], Tensor[(2016), uint64]) */;
  %862 = logical_and(%857, %858) /* ty=Tensor[(13, 10, 9), bool] */;
  %863 = %861.1;
  (%862, %863, meta[relay.Constant][46] /* ty=Tensor[(22), float32] */)
}

def @func_5198() -> (Tensor[(15, 14, 8), float64],) {
  %864 = @func_2248() /* ty=(Tensor[(15, 14, 8), float64],) */;
  %865 = %864.0;
  (%865,)
}

def @func_7661() -> (Tensor[(15, 14, 8), float64],) {
  %866 = @func_1821() /* ty=(Tensor[(15, 14, 8), float64],) */;
  %867 = %866.0;
  %868 = cast(meta[relay.Constant][47] /* ty=Tensor[(15, 14, 8), float64] */, dtype="float64") /* ty=Tensor[(15, 14, 8), float64] */;
  %869 = shape_of(%867, dtype="int32") /* ty=Tensor[(3), int32] */;
  %870 = cast(%867, dtype="float64") /* ty=Tensor[(15, 14, 8), float64] */;
  %871 = dyn.reshape(%868, %869, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %872 = floor_divide(%870, %871) /* ty=Tensor[(15, 14, 8), float64] */;
  (%872,)
}

def @func_4383() -> (Tensor[(1170), float32], Tensor[(15, 14, 5), float32], Tensor[(1170), float32]) {
  %873 = @func_3115() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %874 = @func_1682() /* ty=(Tensor[(1170), float64], Tensor[(13, 10, 9), bool], Tensor[(1170), float32], Tensor[(72), float32]) */;
  %875 = @func_1344() /* ty=Tensor[(1170), float32] */;
  %876 = %873.0;
  %877 = %874.2;
  (%875, %876, %877)
}

def @func_5538() -> (Tensor[(448, 4), float64],) {
  %878 = @func_1235() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(13, 10, 9), bool], Tensor[(1170), float32], Tensor[(7, 16, 16), float32], Tensor[(448, 4), float64]) */;
  %879 = %878.4;
  (%879,)
}

def @func_1277() -> Tensor[(2, 15, 8), float32] {
  %880 = cast(meta[relay.Constant][48] /* ty=Tensor[(2, 15, 8), float64] */, dtype="float64") /* ty=Tensor[(2, 15, 8), float64] */;
  %881 = exp(%880) /* ty=Tensor[(2, 15, 8), float64] */;
  %882 = cast(%881, dtype="float32") /* ty=Tensor[(2, 15, 8), float32] */;
  log(%882) /* ty=Tensor[(2, 15, 8), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1024() -> (Tensor[(15, 14, 5), float32], Tensor[(15, 14, 8), float64]) {
  @func_1022() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 8), float64]) */
}

def @func_5280() -> Tensor[(15, 14, 8), float64] {
  %0 = @func_2248() /* ty=(Tensor[(15, 14, 8), float64],) */;
  %0.0
}

def @func_4835(%var_4832: Tensor[(15, 12, 5), float32]) -> Tensor[(15, 12, 5), float32] {
  %1 = cast(%var_4832, dtype="float32") /* ty=Tensor[(15, 12, 5), float32] */;
  erf(%1) /* ty=Tensor[(15, 12, 5), float32] */
}

def @func_2261() -> Tensor[(15, 14, 8), float64] {
  %3 = fn () -> Tensor[(15, 14, 8), float64] {
    %2 = @func_2248() /* ty=(Tensor[(15, 14, 8), float64],) */;
    %2.0
  };
  %3() /* ty=Tensor[(15, 14, 8), float64] */
}

def @func_814(%var_810: Tensor[(7, 16, 16), float32]) -> (Tensor[(7, 16, 16), float32],) {
  %4 = cast(%var_810, dtype="float32") /* ty=Tensor[(7, 16, 16), float32] */;
  %5 = cosh(%4) /* ty=Tensor[(7, 16, 16), float32] */;
  (%5,)
}

def @func_2219() -> (Tensor[(15, 14, 5), float32], Tensor[(12, 10, 3), bool], Tensor[(360), int64]) {
  @func_2217() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(12, 10, 3), bool], Tensor[(360), int64]) */
}

def @func_1377(%var_1362: Tensor[(360), int64]) -> (Tensor[(1170), float32], Tensor[(12, 10, 3), bool], Tensor[(360), int64]) {
  %6 = cast(%var_1362, dtype="int64") /* ty=Tensor[(360), int64] */;
  %7 = cast(%var_1362, dtype="int64") /* ty=Tensor[(360), int64] */;
  %8 = reshape(%6, newshape=[12, 10, 3]) /* ty=Tensor[(12, 10, 3), int64] */;
  %9 = reshape(%7, newshape=[12, 10, 3]) /* ty=Tensor[(12, 10, 3), int64] */;
  %10 = @func_1344() /* ty=Tensor[(1170), float32] */;
  %11 = @func_805(%8, %9) /* ty=Tensor[(12, 10, 3), bool] */;
  (%10, %11, %var_1362)
}

def @func_1160() -> (Tensor[(15, 14, 5), float32],) {
  @func_1158() /* ty=(Tensor[(15, 14, 5), float32],) */
}

def @func_1591() -> Tensor[(15, 14, 5), float32] {
  %12 = @func_1059() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %12.0
}

def @func_6011(%var_6003: Tensor[(5, 15, 1), uint64], %var_6004: Tensor[(5, 15, 1), uint64]) -> Tensor[(5, 15, ?), uint64] {
  %13 = cast(%var_6004, dtype="uint64") /* ty=Tensor[(5, 15, 1), uint64] */;
  %14 = shape_of(%var_6003, dtype="int32") /* ty=Tensor[(3), int32] */;
  %15 = cast(%var_6003, dtype="uint64") /* ty=Tensor[(5, 15, 1), uint64] */;
  %16 = dyn.reshape(%13, %14, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  minimum(%15, %16) /* ty=Tensor[(5, 15, ?), uint64] */
}

def @func_5224() -> (Tensor[(13, 10, 9), bool], Tensor[(15, 14, 5), float32]) {
  @func_5222() /* ty=(Tensor[(13, 10, 9), bool], Tensor[(15, 14, 5), float32]) */
}

def @func_3867(%var_3866: Tensor[(6, 16, 6), float64]) -> (Tensor[(6, 16, 6), float64], Tensor[(1170), float32], Tensor[(1, 240), float32], Tensor[(1792), float32]) {
  %25 = fn (%var_3830: Tensor[(6, 16, 6), float64]) -> (Tensor[(6, 16, 6), float64], Tensor[(1170), float32], Tensor[(1, 240), float32], Tensor[(1792), float32]) {
    %17 = cast(%var_3830, dtype="float64") /* ty=Tensor[(6, 16, 6), float64] */;
    %18 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 240), float32] */, dtype="float32") /* ty=Tensor[(1, 240), float32] */;
    %19 = cast(meta[relay.Constant][1] /* ty=Tensor[(1792), float32] */, dtype="float32") /* ty=Tensor[(1792), float32] */;
    %20 = reshape(%18, newshape=[2, 15, 8]) /* ty=Tensor[(2, 15, 8), float32] */;
    %21 = reshape(%19, newshape=[1792]) /* ty=Tensor[(1792), float32] */;
    %22 = @func_2630(%20, %21) /* ty=(Tensor[(2, 15, 8), int8], Tensor[(7, 16, 16), float32], Tensor[(1792), float32], Tensor[(1170), float32]) */;
    %23 = log2(%17) /* ty=Tensor[(6, 16, 6), float64] */;
    %24 = %22.3;
    (%23, %24, meta[relay.Constant][0] /* ty=Tensor[(1, 240), float32] */, meta[relay.Constant][1] /* ty=Tensor[(1792), float32] */)
  };
  %25(%var_3866) /* ty=(Tensor[(6, 16, 6), float64], Tensor[(1170), float32], Tensor[(1, 240), float32], Tensor[(1792), float32]) */
}

def @func_2956() -> Tensor[(15, 14, 5), float32] {
  %26 = @func_1887() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 8), float64]) */;
  %26.0
}

def @func_6828() -> (Tensor[(15, 14, 5), float32], Tensor[(15, 14, 8), float64]) {
  %27 = @func_6118() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %28 = @func_5198() /* ty=(Tensor[(15, 14, 8), float64],) */;
  %29 = %27.0;
  %30 = %28.0;
  (%29, %30)
}

def @func_5319() -> (Tensor[(448, 4), float64],) {
  %31 = @func_4095() /* ty=Tensor[(448, 4), float64] */;
  (%31,)
}

def @func_3391() -> (Tensor[(15, 14, 5), float32],) {
  %34 = fn () -> (Tensor[(15, 14, 5), float32],) {
    %32 = @func_1059() /* ty=(Tensor[(15, 14, 5), float32],) */;
    %33 = %32.0;
    (%33,)
  };
  %34() /* ty=(Tensor[(15, 14, 5), float32],) */
}

def @func_2023() -> (Tensor[(15, 14, 5), float32], Tensor[(9, 13, 8), float32], Tensor[(936), float32]) {
  %35 = cast(meta[relay.Constant][2] /* ty=Tensor[(936), float32] */, dtype="float32") /* ty=Tensor[(936), float32] */;
  %36 = reshape(%35, newshape=[9, 13, 8]) /* ty=Tensor[(9, 13, 8), float32] */;
  %37 = @func_1591() /* ty=Tensor[(15, 14, 5), float32] */;
  %38 = @func_658(%36) /* ty=Tensor[(9, 13, 8), float32] */;
  (%37, %38, meta[relay.Constant][2] /* ty=Tensor[(936), float32] */)
}

def @func_3679(%var_3677: Tensor[(1170), float32]) -> (Tensor[(15, 14, 5), float32], Tensor[(13, 10, 9), uint64], Tensor[(1170), float32]) {
  @func_3676(%var_3677) /* ty=(Tensor[(15, 14, 5), float32], Tensor[(13, 10, 9), uint64], Tensor[(1170), float32]) */
}

def @func_6547() -> (Tensor[(2, 15, 8), float32],) {
  @func_6545() /* ty=(Tensor[(2, 15, 8), float32],) */
}

def @func_7138() -> (Tensor[(2, 15, 8), float32], Tensor[(15, 14, 5), float32]) {
  %39 = @func_1158() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %40 = @func_1986() /* ty=Tensor[(2, 15, 8), float32] */;
  %41 = %39.0;
  (%40, %41)
}

def @func_2543() -> (Tensor[(1170), float32], Tensor[(15, 14, 8), float64]) {
  %42 = @func_1682() /* ty=(Tensor[(1170), float64], Tensor[(13, 10, 9), bool], Tensor[(1170), float32], Tensor[(72), float32]) */;
  %43 = @func_1887() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 8), float64]) */;
  %44 = %42.2;
  %45 = %43.1;
  (%44, %45)
}

def @func_3301(%var_3299: Tensor[(8, 4, 8), float32], %var_3300: Tensor[(8, 4, 8), float64]) -> (Tensor[(8, 4, 8), bool],) {
  @func_3297(%var_3299, %var_3300) /* ty=(Tensor[(8, 4, 8), bool],) */
}

def @func_7177() -> (Tensor[(15, 14, 8), float64],) {
  %46 = @func_5911() /* ty=(Tensor[(15, 14, 8), float64],) */;
  %47 = %46.0;
  (%47,)
}

def @func_4049(%var_4048: Tensor[(2, 11, 1), float32]) -> (Tensor[(2, 11, 1), float32], Tensor[(15, 14, 8), float64], Tensor[(2, 11, 1), float32], Tensor[(9, 16, 14), uint64], Tensor[(16), uint64], Tensor[(2016), uint64]) {
  %60 = fn (%var_4034: Tensor[(2, 11, 1), float32]) -> (Tensor[(2, 11, 1), float32], Tensor[(15, 14, 8), float64], Tensor[(2, 11, 1), float32], Tensor[(9, 16, 14), uint64], Tensor[(16), uint64], Tensor[(2016), uint64]) {
    %48 = cast(%var_4034, dtype="float32") /* ty=Tensor[(2, 11, 1), float32] */;
    %49 = @func_2830() /* ty=(Tensor[(15, 14, 8), float64], Tensor[(15, 14, 5), float32]) */;
    %50 = cast(%var_4034, dtype="float32") /* ty=Tensor[(2, 11, 1), float32] */;
    %51 = cast(meta[relay.Constant][3] /* ty=Tensor[(16), uint64] */, dtype="uint64") /* ty=Tensor[(16), uint64] */;
    %52 = cast(meta[relay.Constant][4] /* ty=Tensor[(2016), uint64] */, dtype="uint64") /* ty=Tensor[(2016), uint64] */;
    %53 = reshape(%51, newshape=[1, 16, 1]) /* ty=Tensor[(1, 16, 1), uint64] */;
    %54 = reshape(%52, newshape=[9, 16, 14]) /* ty=Tensor[(9, 16, 14), uint64] */;
    %55 = @func_85(%53, %54) /* ty=(Tensor[(9, 16, 14), uint64], Tensor[(9, 16, 14), bool]) */;
    %56 = atanh(%48) /* ty=Tensor[(2, 11, 1), float32] */;
    %57 = %49.0;
    %58 = rsqrt(%50) /* ty=Tensor[(2, 11, 1), float32] */;
    %59 = %55.0;
    (%56, %57, %58, %59, meta[relay.Constant][3] /* ty=Tensor[(16), uint64] */, meta[relay.Constant][4] /* ty=Tensor[(2016), uint64] */)
  };
  %60(%var_4048) /* ty=(Tensor[(2, 11, 1), float32], Tensor[(15, 14, 8), float64], Tensor[(2, 11, 1), float32], Tensor[(9, 16, 14), uint64], Tensor[(16), uint64], Tensor[(2016), uint64]) */
}

def @func_6947(%var_6945: Tensor[(2400), uint64]) -> (Tensor[(15, 14, 8), float64], Tensor[(1170), float32], Tensor[(180), bool], Tensor[(15, 14, 5), float32], Tensor[(15, 16, 10), int8], Tensor[(10, 75), bool], Tensor[(2, 15, 8), float32], Tensor[(2400), bool], Tensor[(2400), float64]) {
  @func_6944(%var_6945) /* ty=(Tensor[(15, 14, 8), float64], Tensor[(1170), float32], Tensor[(180), bool], Tensor[(15, 14, 5), float32], Tensor[(15, 16, 10), int8], Tensor[(10, 75), bool], Tensor[(2, 15, 8), float32], Tensor[(2400), bool], Tensor[(2400), float64]) */
}

def @func_1237() -> (Tensor[(15, 14, 5), float32], Tensor[(13, 10, 9), bool], Tensor[(1170), float32], Tensor[(7, 16, 16), float32], Tensor[(448, 4), float64]) {
  @func_1235() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(13, 10, 9), bool], Tensor[(1170), float32], Tensor[(7, 16, 16), float32], Tensor[(448, 4), float64]) */
}

def @func_6567() -> (Tensor[(2, 15, 8), float32],) {
  %62 = fn () -> (Tensor[(2, 15, 8), float32],) {
    %61 = @func_1277() /* ty=Tensor[(2, 15, 8), float32] */;
    (%61,)
  };
  %62() /* ty=(Tensor[(2, 15, 8), float32],) */
}

def @func_6647() -> (Tensor[(15, 14, 5), float32], Tensor[(22), float32], Tensor[(448, 4), float64]) {
  @func_6645() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(22), float32], Tensor[(448, 4), float64]) */
}

def @func_4383() -> (Tensor[(1170), float32], Tensor[(15, 14, 5), float32], Tensor[(1170), float32]) {
  %63 = @func_3115() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %64 = @func_1682() /* ty=(Tensor[(1170), float64], Tensor[(13, 10, 9), bool], Tensor[(1170), float32], Tensor[(72), float32]) */;
  %65 = @func_1344() /* ty=Tensor[(1170), float32] */;
  %66 = %63.0;
  %67 = %64.2;
  (%65, %66, %67)
}

def @func_3297(%var_3281: Tensor[(8, 4, 8), float32], %var_3293: Tensor[(8, 4, 8), float64]) -> (Tensor[(8, 4, 8), bool],) {
  %68 = cast(%var_3281, dtype="float32") /* ty=Tensor[(8, 4, 8), float32] */;
  %69 = cos(%68) /* ty=Tensor[(8, 4, 8), float32] */;
  %70 = cast(%69, dtype="float64") /* ty=Tensor[(8, 4, 8), float64] */;
  %71 = asin(%70) /* ty=Tensor[(8, 4, 8), float64] */;
  %72 = cast(%var_3293, dtype="bool") /* ty=Tensor[(8, 4, 8), bool] */;
  %73 = shape_of(%71, dtype="int32") /* ty=Tensor[(3), int32] */;
  %74 = cast(%71, dtype="bool") /* ty=Tensor[(8, 4, 8), bool] */;
  %75 = dyn.reshape(%72, %73, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %76 = greater_equal(%74, %75) /* ty=Tensor[(8, 4, 8), bool] */;
  (%76,)
}

def @func_4167(%var_4165: Tensor[(72), float32]) -> (Tensor[(15, 14, 5), float32], Tensor[(72), float32], Tensor[(13, 10, 9), bool], Tensor[(15, 14, 8), float64], Tensor[(4, 7, 2), float64], Tensor[(7, 16, 16), float32], Tensor[(1792), float32]) {
  @func_4164(%var_4165) /* ty=(Tensor[(15, 14, 5), float32], Tensor[(72), float32], Tensor[(13, 10, 9), bool], Tensor[(15, 14, 8), float64], Tensor[(4, 7, 2), float64], Tensor[(7, 16, 16), float32], Tensor[(1792), float32]) */
}

def @func_7599(%var_7596: Tensor[(1, 1170), float32], %var_7597: Tensor[(360), int64], %var_7598: Tensor[(900), float32]) -> (Tensor[(15, 14, 5), float32], Tensor[(2, 15, 8), float32], Tensor[(8, 224), float32], Tensor[(896, 2), float32], Tensor[(1, 1170), float32], Tensor[(1170), float32], Tensor[(360), int64], Tensor[(15, 14, 5), float32], Tensor[(900), float32], Tensor[(900), float32]) {
  @func_7594(%var_7596, %var_7597, %var_7598) /* ty=(Tensor[(15, 14, 5), float32], Tensor[(2, 15, 8), float32], Tensor[(8, 224), float32], Tensor[(896, 2), float32], Tensor[(1, 1170), float32], Tensor[(1170), float32], Tensor[(360), int64], Tensor[(15, 14, 5), float32], Tensor[(900), float32], Tensor[(900), float32]) */
}

def @func_5199() -> (Tensor[(15, 14, 8), float64],) {
  %79 = fn () -> (Tensor[(15, 14, 8), float64],) {
    %77 = @func_2248() /* ty=(Tensor[(15, 14, 8), float64],) */;
    %78 = %77.0;
    (%78,)
  };
  %79() /* ty=(Tensor[(15, 14, 8), float64],) */
}

def @func_3693() -> (Tensor[(1170), float32],) {
  @func_3691() /* ty=(Tensor[(1170), float32],) */
}

def @func_4258(%var_4217: Tensor[(15, 16, 10), uint64], %var_4218: Tensor[(15, 16, 10), uint64], %var_4243: Tensor[(50, 15), bool]) -> (Tensor[(15, 16, 10), int8], Tensor[(15, 16, 10), float32], Tensor[(5, 15, 10), uint64]) {
  %80 = cast(%var_4218, dtype="uint64") /* ty=Tensor[(15, 16, 10), uint64] */;
  %81 = shape_of(%var_4217, dtype="int32") /* ty=Tensor[(3), int32] */;
  %82 = cast(%var_4217, dtype="uint64") /* ty=Tensor[(15, 16, 10), uint64] */;
  %83 = dyn.reshape(%80, %81, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %84 = bitwise_xor(%82, %83) /* ty=Tensor[(15, 16, 10), uint64] */;
  %85 = cast(%84, dtype="int8") /* ty=Tensor[(15, 16, 10), int8] */;
  %86 = shape_of(%var_4218, dtype="int32") /* ty=Tensor[(3), int32] */;
  %87 = cast(%var_4218, dtype="int8") /* ty=Tensor[(15, 16, 10), int8] */;
  %88 = dyn.reshape(%85, %86, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %89 = cast(%var_4218, dtype="float32") /* ty=Tensor[(15, 16, 10), float32] */;
  %90 = cast(%var_4243, dtype="bool") /* ty=Tensor[(50, 15), bool] */;
  %91 = cast(%var_4243, dtype="bool") /* ty=Tensor[(50, 15), bool] */;
  %92 = reshape(%90, newshape=[5, 15, 10]) /* ty=Tensor[(5, 15, 10), bool] */;
  %93 = reshape(%91, newshape=[5, 15, 10]) /* ty=Tensor[(5, 15, 10), bool] */;
  %94 = @func_3477(%92, %93) /* ty=Tensor[(5, 15, 10), float32] */;
  %95 = cast(%var_4243, dtype="uint64") /* ty=Tensor[(50, 15), uint64] */;
  %96 = shape_of(%94, dtype="int32") /* ty=Tensor[(3), int32] */;
  %97 = cast(%94, dtype="uint64") /* ty=Tensor[(5, 15, 10), uint64] */;
  %98 = dyn.reshape(%95, %96, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %99 = maximum(%87, %88) /* ty=Tensor[(15, 16, 10), int8] */;
  %100 = sigmoid(%89) /* ty=Tensor[(15, 16, 10), float32] */;
  %101 = minimum(%97, %98) /* ty=Tensor[(5, 15, 10), uint64] */;
  (%99, %100, %101)
}

def @func_7661() -> (Tensor[(15, 14, 8), float64],) {
  %102 = @func_1821() /* ty=(Tensor[(15, 14, 8), float64],) */;
  %103 = %102.0;
  %104 = cast(meta[relay.Constant][5] /* ty=Tensor[(15, 14, 8), float64] */, dtype="float64") /* ty=Tensor[(15, 14, 8), float64] */;
  %105 = shape_of(%103, dtype="int32") /* ty=Tensor[(3), int32] */;
  %106 = cast(%103, dtype="float64") /* ty=Tensor[(15, 14, 8), float64] */;
  %107 = dyn.reshape(%104, %105, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %108 = floor_divide(%106, %107) /* ty=Tensor[(15, 14, 8), float64] */;
  (%108,)
}

def @func_7477() -> Tensor[(15, 14, 5), float32] {
  %109 = @func_5020() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %109.0
}

def @func_7745(%var_7739: Tensor[(9, 7, 14), bool], %var_7740: Tensor[(9, 7, 14), bool]) -> Tensor[(9, 7, 14), bool] {
  %110 = cast(%var_7740, dtype="bool") /* ty=Tensor[(9, 7, 14), bool] */;
  %111 = shape_of(%var_7739, dtype="int32") /* ty=Tensor[(3), int32] */;
  %112 = cast(%var_7739, dtype="bool") /* ty=Tensor[(9, 7, 14), bool] */;
  %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%112, %113) /* ty=Tensor[(9, 7, 14), bool] */
}

def @func_1489(%var_1487: Tensor[(72), float32]) -> (Tensor[(4, 7, 2), float32], Tensor[(4, 7, 2), uint8], Tensor[(1170), float32], Tensor[(72), float32], Tensor[(390, 3), float32]) {
  @func_1486(%var_1487) /* ty=(Tensor[(4, 7, 2), float32], Tensor[(4, 7, 2), uint8], Tensor[(1170), float32], Tensor[(72), float32], Tensor[(390, 3), float32]) */
}

def @func_1486(%var_1472: Tensor[(72), float32]) -> (Tensor[(4, 7, 2), float32], Tensor[(4, 7, 2), uint8], Tensor[(1170), float32], Tensor[(72), float32], Tensor[(390, 3), float32]) {
  %114 = cast(meta[relay.Constant][7] /* ty=Tensor[(4, 7, 2), float32] */, dtype="float32") /* ty=Tensor[(4, 7, 2), float32] */;
  %115 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(4, 7, 2), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %116 = cast(meta[relay.Constant][6] /* ty=Tensor[(4, 7, 2), float32] */, dtype="float32") /* ty=Tensor[(4, 7, 2), float32] */;
  %117 = dyn.reshape(%114, %115, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %118 = cast(meta[relay.Constant][8] /* ty=Tensor[(4, 7, 2), float32] */, dtype="uint8") /* ty=Tensor[(4, 7, 2), uint8] */;
  %119 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(4, 7, 2), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %120 = cast(meta[relay.Constant][6] /* ty=Tensor[(4, 7, 2), float32] */, dtype="uint8") /* ty=Tensor[(4, 7, 2), uint8] */;
  %121 = dyn.reshape(%118, %119, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %122 = cast(%var_1472, dtype="float32") /* ty=Tensor[(72), float32] */;
  %123 = cast(meta[relay.Constant][9] /* ty=Tensor[(390, 3), float32] */, dtype="float32") /* ty=Tensor[(390, 3), float32] */;
  %124 = reshape(%122, newshape=[12, 1, 6]) /* ty=Tensor[(12, 1, 6), float32] */;
  %125 = reshape(%123, newshape=[1170]) /* ty=Tensor[(1170), float32] */;
  %126 = @func_993(%124, %125) /* ty=(Tensor[(12, 1, 6), float32], Tensor[(13, 10, 9), uint8], Tensor[(1170), float32]) */;
  %127 = mod(%116, %117) /* ty=Tensor[(4, 7, 2), float32] */;
  %128 = add(%120, %121) /* ty=Tensor[(4, 7, 2), uint8] */;
  %129 = %126.2;
  (%127, %128, %129, %var_1472, meta[relay.Constant][9] /* ty=Tensor[(390, 3), float32] */)
}

def @func_1345() -> Tensor[(1170), float32] {
  %131 = fn () -> Tensor[(1170), float32] {
    %130 = @func_1235() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(13, 10, 9), bool], Tensor[(1170), float32], Tensor[(7, 16, 16), float32], Tensor[(448, 4), float64]) */;
    %130.2
  };
  %131() /* ty=Tensor[(1170), float32] */
}

def @func_1790(%var_1787: Tensor[(360), int64], %var_1788: Tensor[(180, 1), float32], %var_1789: Tensor[(1170), float32]) -> (Tensor[(15, 14, 5), float32], Tensor[(12, 10, 3), bool], Tensor[(360), int64], Tensor[(10, 3, 6), bool], Tensor[(180, 1), float32], Tensor[(15, 14, 5), float32], Tensor[(1170), float32], Tensor[(15, 14, 5), float64]) {
  %152 = fn (%var_1743: Tensor[(360), int64], %var_1754: Tensor[(180, 1), float32], %var_1759: Tensor[(1170), float32]) -> (Tensor[(15, 14, 5), float32], Tensor[(12, 10, 3), bool], Tensor[(360), int64], Tensor[(10, 3, 6), bool], Tensor[(180, 1), float32], Tensor[(15, 14, 5), float32], Tensor[(1170), float32], Tensor[(15, 14, 5), float64]) {
    %132 = @func_1431() /* ty=(Tensor[(15, 14, 5), float32],) */;
    %133 = cast(%var_1743, dtype="int64") /* ty=Tensor[(360), int64] */;
    %134 = reshape(%133, newshape=[360]) /* ty=Tensor[(360), int64] */;
    %135 = @func_1377(%134) /* ty=(Tensor[(1170), float32], Tensor[(12, 10, 3), bool], Tensor[(360), int64]) */;
    %136 = cast(%var_1754, dtype="float32") /* ty=Tensor[(180, 1), float32] */;
    %137 = reshape(%136, newshape=[10, 3, 6]) /* ty=Tensor[(10, 3, 6), float32] */;
    %138 = @func_162(%137) /* ty=(Tensor[(10, 3, 6), bool],) */;
    %139 = cast(%var_1759, dtype="float32") /* ty=Tensor[(1170), float32] */;
    %140 = reshape(%139, newshape=[5, 234]) /* ty=Tensor[(5, 234), float32] */;
    %141 = @func_1648(%140) /* ty=(Tensor[(15, 14, 5), float32], Tensor[(5, 234), float32], Tensor[(13, 10, 9), float32]) */;
    %142 = @func_1158() /* ty=(Tensor[(15, 14, 5), float32],) */;
    %143 = %142.0;
    %144 = cast(%143, dtype="float64") /* ty=Tensor[(15, 14, 5), float64] */;
    %145 = erf(%144) /* ty=Tensor[(15, 14, 5), float64] */;
    %146 = cast(%145, dtype="float64") /* ty=Tensor[(15, 14, 5), float64] */;
    %147 = %132.0;
    %148 = %135.1;
    %149 = %138.0;
    %150 = %141.0;
    %151 = sigmoid(%146) /* ty=Tensor[(15, 14, 5), float64] */;
    (%147, %148, %var_1743, %149, %var_1754, %150, %var_1759, %151)
  };
  %152(%var_1787, %var_1788, %var_1789) /* ty=(Tensor[(15, 14, 5), float32], Tensor[(12, 10, 3), bool], Tensor[(360), int64], Tensor[(10, 3, 6), bool], Tensor[(180, 1), float32], Tensor[(15, 14, 5), float32], Tensor[(1170), float32], Tensor[(15, 14, 5), float64]) */
}

def @func_2217() -> (Tensor[(15, 14, 5), float32], Tensor[(12, 10, 3), bool], Tensor[(360), int64]) {
  %153 = @func_1431() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %154 = cast(meta[relay.Constant][10] /* ty=Tensor[(360), int64] */, dtype="int64") /* ty=Tensor[(360), int64] */;
  %155 = cast(meta[relay.Constant][10] /* ty=Tensor[(360), int64] */, dtype="int64") /* ty=Tensor[(360), int64] */;
  %156 = reshape(%154, newshape=[12, 10, 3]) /* ty=Tensor[(12, 10, 3), int64] */;
  %157 = reshape(%155, newshape=[12, 10, 3]) /* ty=Tensor[(12, 10, 3), int64] */;
  %158 = %153.0;
  %159 = @func_805(%156, %157) /* ty=Tensor[(12, 10, 3), bool] */;
  (%158, %159, meta[relay.Constant][10] /* ty=Tensor[(360), int64] */)
}

def @func_7531() -> Tensor[(15, 14, 5), float32] {
  %161 = fn () -> Tensor[(15, 14, 5), float32] {
    %160 = @func_3115() /* ty=(Tensor[(15, 14, 5), float32],) */;
    %160.0
  };
  %161() /* ty=Tensor[(15, 14, 5), float32] */
}

def @func_7847() -> Tensor[(15, 14, 8), float64] {
  %162 = fn () -> Tensor[(15, 14, 8), float64] {
    @func_5566() /* ty=Tensor[(15, 14, 8), float64] */
  };
  %162() /* ty=Tensor[(15, 14, 8), float64] */
}

def @func_6645() -> (Tensor[(15, 14, 5), float32], Tensor[(22), float32], Tensor[(448, 4), float64]) {
  %163 = @func_2830() /* ty=(Tensor[(15, 14, 8), float64], Tensor[(15, 14, 5), float32]) */;
  %164 = @func_6209() /* ty=(Tensor[(13, 10, 9), bool], Tensor[(15, 14, 8), float64], Tensor[(22), float32]) */;
  %165 = @func_5319() /* ty=(Tensor[(448, 4), float64],) */;
  %166 = %163.1;
  %167 = %164.2;
  %168 = %165.0;
  (%166, %167, %168)
}

def @func_5840() -> (Tensor[(448, 4), float64], Tensor[(15, 14, 5), float32]) {
  %172 = fn () -> (Tensor[(448, 4), float64], Tensor[(15, 14, 5), float32]) {
    %169 = @func_3390() /* ty=(Tensor[(15, 14, 5), float32],) */;
    %170 = @func_4095() /* ty=Tensor[(448, 4), float64] */;
    %171 = %169.0;
    (%170, %171)
  };
  %172() /* ty=(Tensor[(448, 4), float64], Tensor[(15, 14, 5), float32]) */
}

def @func_2630(%var_2585: Tensor[(2, 15, 8), float32], %var_2594: Tensor[(1792), float32]) -> (Tensor[(2, 15, 8), int8], Tensor[(7, 16, 16), float32], Tensor[(1792), float32], Tensor[(1170), float32]) {
  %173 = @func_1277() /* ty=Tensor[(2, 15, 8), float32] */;
  %174 = cast(%var_2585, dtype="int8") /* ty=Tensor[(2, 15, 8), int8] */;
  %175 = shape_of(%173, dtype="int32") /* ty=Tensor[(3), int32] */;
  %176 = cast(%173, dtype="int8") /* ty=Tensor[(2, 15, 8), int8] */;
  %177 = dyn.reshape(%174, %175, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %178 = cast(%var_2594, dtype="float32") /* ty=Tensor[(1792), float32] */;
  %179 = cast(meta[relay.Constant][11] /* ty=Tensor[(1170), float32] */, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %180 = reshape(%178, newshape=[8, 224]) /* ty=Tensor[(8, 224), float32] */;
  %181 = reshape(%179, newshape=[1170]) /* ty=Tensor[(1170), float32] */;
  %182 = @func_1523(%180, %181) /* ty=(Tensor[(15, 14, 5), float32], Tensor[(7, 16, 16), float32], Tensor[(13, 10, 9), bool], Tensor[(1170), float32], Tensor[(180), float32], Tensor[(8, 224), float32], Tensor[(8, 224), float32]) */;
  %183 = multiply(%176, %177) /* ty=Tensor[(2, 15, 8), int8] */;
  %184 = %182.1;
  (%183, %184, %var_2594, meta[relay.Constant][11] /* ty=Tensor[(1170), float32] */)
}

def @func_2482() -> Tensor[(15, 14, 5), float32] {
  @func_2480() /* ty=Tensor[(15, 14, 5), float32] */
}

def @func_5901() -> (Tensor[(4, 6, 6), int8], Tensor[(4, 6, 6), float32]) {
  %199 = fn () -> (Tensor[(4, 6, 6), int8], Tensor[(4, 6, 6), float32]) {
    %185 = cast(meta[relay.Constant][12] /* ty=Tensor[(4, 6, 6), float64] */, dtype="float64") /* ty=Tensor[(4, 6, 6), float64] */;
    %186 = sin(%185) /* ty=Tensor[(4, 6, 6), float64] */;
    %187 = cast(meta[relay.Constant][12] /* ty=Tensor[(4, 6, 6), float64] */, dtype="int8") /* ty=Tensor[(4, 6, 6), int8] */;
    %188 = shape_of(%186, dtype="int32") /* ty=Tensor[(3), int32] */;
    %189 = cast(%186, dtype="int8") /* ty=Tensor[(4, 6, 6), int8] */;
    %190 = dyn.reshape(%187, %188, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %191 = cast(meta[relay.Constant][13] /* ty=Tensor[(4, 6, 6), float64] */, dtype="bool") /* ty=Tensor[(4, 6, 6), bool] */;
    %192 = shape_of(%186, dtype="int32") /* ty=Tensor[(3), int32] */;
    %193 = cast(%186, dtype="bool") /* ty=Tensor[(4, 6, 6), bool] */;
    %194 = dyn.reshape(%191, %192, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %195 = equal(%193, %194) /* ty=Tensor[(4, 6, 6), bool] */;
    %196 = cast(%195, dtype="float32") /* ty=Tensor[(4, 6, 6), float32] */;
    %197 = multiply(%189, %190) /* ty=Tensor[(4, 6, 6), int8] */;
    %198 = asinh(%196) /* ty=Tensor[(4, 6, 6), float32] */;
    (%197, %198)
  };
  %199() /* ty=(Tensor[(4, 6, 6), int8], Tensor[(4, 6, 6), float32]) */
}

def @func_6304() -> (Tensor[(15, 14, 8), float64], Tensor[(936), float32]) {
  %204 = fn () -> (Tensor[(15, 14, 8), float64], Tensor[(936), float32]) {
    %200 = @func_2830() /* ty=(Tensor[(15, 14, 8), float64], Tensor[(15, 14, 5), float32]) */;
    %201 = @func_2023() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(9, 13, 8), float32], Tensor[(936), float32]) */;
    %202 = %200.0;
    %203 = %201.2;
    (%202, %203)
  };
  %204() /* ty=(Tensor[(15, 14, 8), float64], Tensor[(936), float32]) */
}

def @func_2634(%var_2632: Tensor[(2, 15, 8), float32], %var_2633: Tensor[(1792), float32]) -> (Tensor[(2, 15, 8), int8], Tensor[(7, 16, 16), float32], Tensor[(1792), float32], Tensor[(1170), float32]) {
  @func_2630(%var_2632, %var_2633) /* ty=(Tensor[(2, 15, 8), int8], Tensor[(7, 16, 16), float32], Tensor[(1792), float32], Tensor[(1170), float32]) */
}

def @func_4891() -> (Tensor[(15, 14, 5), float32], Tensor[(13, 10, 9), uint64], Tensor[(1170), float32]) {
  %211 = fn () -> (Tensor[(15, 14, 5), float32], Tensor[(13, 10, 9), uint64], Tensor[(1170), float32]) {
    %205 = @func_1431() /* ty=(Tensor[(15, 14, 5), float32],) */;
    %206 = cast(meta[relay.Constant][14] /* ty=Tensor[(1170), float32] */, dtype="float32") /* ty=Tensor[(1170), float32] */;
    %207 = reshape(%206, newshape=[1170]) /* ty=Tensor[(1170), float32] */;
    %208 = @func_3676(%207) /* ty=(Tensor[(15, 14, 5), float32], Tensor[(13, 10, 9), uint64], Tensor[(1170), float32]) */;
    %209 = %205.0;
    %210 = %208.1;
    (%209, %210, meta[relay.Constant][14] /* ty=Tensor[(1170), float32] */)
  };
  %211() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(13, 10, 9), uint64], Tensor[(1170), float32]) */
}

def @func_7663() -> (Tensor[(15, 14, 8), float64],) {
  @func_7661() /* ty=(Tensor[(15, 14, 8), float64],) */
}

def @func_3116() -> (Tensor[(15, 14, 5), float32],) {
  %214 = fn () -> (Tensor[(15, 14, 5), float32],) {
    %212 = @func_2217() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(12, 10, 3), bool], Tensor[(360), int64]) */;
    %213 = %212.0;
    (%213,)
  };
  %214() /* ty=(Tensor[(15, 14, 5), float32],) */
}

def @func_5432(%var_5430: Tensor[(750), bool]) -> (Tensor[(10, 6, 8), bool], Tensor[(750), bool], Tensor[(8, 4, 8), bool], Tensor[(1, 256), float32], Tensor[(10, 6, 8), float64], Tensor[(936), float32], Tensor[(2400), bool]) {
  @func_5429(%var_5430) /* ty=(Tensor[(10, 6, 8), bool], Tensor[(750), bool], Tensor[(8, 4, 8), bool], Tensor[(1, 256), float32], Tensor[(10, 6, 8), float64], Tensor[(936), float32], Tensor[(2400), bool]) */
}

def @func_1113() -> (Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32]) {
  @func_1111() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32]) */
}

def @func_7833() -> (Tensor[(15, 14, 8), float64],) {
  %215 = @func_7177() /* ty=(Tensor[(15, 14, 8), float64],) */;
  %216 = %215.0;
  (%216,)
}

def @func_1061() -> (Tensor[(15, 14, 5), float32],) {
  @func_1059() /* ty=(Tensor[(15, 14, 5), float32],) */
}

def @func_6119() -> (Tensor[(15, 14, 5), float32],) {
  %219 = fn () -> (Tensor[(15, 14, 5), float32],) {
    %217 = @func_1850() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32]) */;
    %218 = %217.0;
    (%218,)
  };
  %219() /* ty=(Tensor[(15, 14, 5), float32],) */
}

def @func_5643(%var_5641: Tensor[(4, 12, 13), float64]) -> Tensor[(4, 12, 13), float64] {
  @func_5640(%var_5641) /* ty=Tensor[(4, 12, 13), float64] */
}

def @func_5801() -> (Tensor[(15, 14, 5), float64],) {
  %220 = @func_2480() /* ty=Tensor[(15, 14, 5), float32] */;
  %221 = cast(%220, dtype="float64") /* ty=Tensor[(15, 14, 5), float64] */;
  %222 = sin(%221) /* ty=Tensor[(15, 14, 5), float64] */;
  (%222,)
}

def @func_660(%var_659: Tensor[(9, 13, 8), float32]) -> Tensor[(9, 13, 8), float32] {
  %224 = fn (%var_655: Tensor[(9, 13, 8), float32]) -> Tensor[(9, 13, 8), float32] {
    %223 = cast(%var_655, dtype="float32") /* ty=Tensor[(9, 13, 8), float32] */;
    rsqrt(%223) /* ty=Tensor[(9, 13, 8), float32] */
  };
  %224(%var_659) /* ty=Tensor[(9, 13, 8), float32] */
}

def @func_5664() -> (Tensor[(15, 14, 5), float32],) {
  %225 = @func_3548() /* ty=Tensor[(15, 14, 5), float32] */;
  (%225,)
}

def @func_1593() -> Tensor[(15, 14, 5), float32] {
  @func_1591() /* ty=Tensor[(15, 14, 5), float32] */
}

def @func_3481(%var_3479: Tensor[(5, 15, 10), bool], %var_3480: Tensor[(5, 15, 10), bool]) -> Tensor[(5, 15, 10), float32] {
  @func_3477(%var_3479, %var_3480) /* ty=Tensor[(5, 15, 10), float32] */
}

def @func_4935() -> (Tensor[(2, 15, 8), float32],) {
  %227 = fn () -> (Tensor[(2, 15, 8), float32],) {
    %226 = @func_1277() /* ty=Tensor[(2, 15, 8), float32] */;
    (%226,)
  };
  %227() /* ty=(Tensor[(2, 15, 8), float32],) */
}

def @func_7789() -> Tensor[(15, 14, 5), float32] {
  @func_7787() /* ty=Tensor[(15, 14, 5), float32] */
}

def @func_7066() -> (Tensor[(15, 14, 8), float64],) {
  @func_7064() /* ty=(Tensor[(15, 14, 8), float64],) */
}

def @func_445(%var_442: Tensor[(13, 10, 9), float32], %var_443: Tensor[(13, 10, 9), float32], %var_444: Tensor[(13, 10, 9), float32]) -> (Tensor[(13, 10, 9), bool], Tensor[(10, 3, 6), bool], Tensor[(180), float32], Tensor[(10, 3, 6), bool], Tensor[(13, 10, 9), bool], Tensor[(14, 8, 2), float64], Tensor[(224), int16], Tensor[(13, 10, 9), uint8], Tensor[(13, 10, 9), uint64], Tensor[(10, 3, 6), bool], Tensor[(10, 3, 6), bool]) {
  %272 = fn (%var_337: Tensor[(13, 10, 9), float32], %var_351: Tensor[(13, 10, 9), float32], %var_369: Tensor[(13, 10, 9), float32]) -> (Tensor[(13, 10, 9), bool], Tensor[(10, 3, 6), bool], Tensor[(180), float32], Tensor[(10, 3, 6), bool], Tensor[(13, 10, 9), bool], Tensor[(14, 8, 2), float64], Tensor[(224), int16], Tensor[(13, 10, 9), uint8], Tensor[(13, 10, 9), uint64], Tensor[(10, 3, 6), bool], Tensor[(10, 3, 6), bool]) {
    %228 = cast(%var_351, dtype="bool") /* ty=Tensor[(13, 10, 9), bool] */;
    %229 = shape_of(%var_337, dtype="int32") /* ty=Tensor[(3), int32] */;
    %230 = cast(%var_337, dtype="bool") /* ty=Tensor[(13, 10, 9), bool] */;
    %231 = dyn.reshape(%228, %229, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %232 = cast(meta[relay.Constant][15] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
    %233 = reshape(%232, newshape=[10, 3, 6]) /* ty=Tensor[(10, 3, 6), float32] */;
    %234 = @func_162(%233) /* ty=(Tensor[(10, 3, 6), bool],) */;
    %235 = cast(meta[relay.Constant][15] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
    %236 = reshape(%235, newshape=[10, 3, 6]) /* ty=Tensor[(10, 3, 6), float32] */;
    %237 = @func_162(%236) /* ty=(Tensor[(10, 3, 6), bool],) */;
    %238 = cast(%var_337, dtype="float32") /* ty=Tensor[(13, 10, 9), float32] */;
    %239 = asin(%238) /* ty=Tensor[(13, 10, 9), float32] */;
    %240 = cast(%var_369, dtype="bool") /* ty=Tensor[(13, 10, 9), bool] */;
    %241 = shape_of(%239, dtype="int32") /* ty=Tensor[(3), int32] */;
    %242 = cast(%239, dtype="bool") /* ty=Tensor[(13, 10, 9), bool] */;
    %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %244 = cast(meta[relay.Constant][16] /* ty=Tensor[(224), int16] */, dtype="int16") /* ty=Tensor[(224), int16] */;
    %245 = cast(meta[relay.Constant][16] /* ty=Tensor[(224), int16] */, dtype="int16") /* ty=Tensor[(224), int16] */;
    %246 = reshape(%244, newshape=[14, 8, 2]) /* ty=Tensor[(14, 8, 2), int16] */;
    %247 = reshape(%245, newshape=[14, 8, 2]) /* ty=Tensor[(14, 8, 2), int16] */;
    %248 = @func_310(%246, %247) /* ty=(Tensor[(14, 8, 2), int16], Tensor[(14, 8, 2), float64]) */;
    %249 = cast(%var_369, dtype="uint8") /* ty=Tensor[(13, 10, 9), uint8] */;
    %250 = shape_of(%239, dtype="int32") /* ty=Tensor[(3), int32] */;
    %251 = cast(%239, dtype="uint8") /* ty=Tensor[(13, 10, 9), uint8] */;
    %252 = dyn.reshape(%249, %250, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %253 = cast(%var_337, dtype="uint64") /* ty=Tensor[(13, 10, 9), uint64] */;
    %254 = shape_of(%var_351, dtype="int32") /* ty=Tensor[(3), int32] */;
    %255 = cast(%var_351, dtype="uint64") /* ty=Tensor[(13, 10, 9), uint64] */;
    %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %257 = %234.0;
    %258 = cast(%257, dtype="float32") /* ty=Tensor[(10, 3, 6), float32] */;
    %259 = reshape(%258, newshape=[10, 3, 6]) /* ty=Tensor[(10, 3, 6), float32] */;
    %260 = @func_162(%259) /* ty=(Tensor[(10, 3, 6), bool],) */;
    %261 = cast(meta[relay.Constant][15] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
    %262 = reshape(%261, newshape=[10, 3, 6]) /* ty=Tensor[(10, 3, 6), float32] */;
    %263 = @func_162(%262) /* ty=(Tensor[(10, 3, 6), bool],) */;
    %264 = greater_equal(%230, %231) /* ty=Tensor[(13, 10, 9), bool] */;
    %265 = %237.0;
    %266 = equal(%242, %243) /* ty=Tensor[(13, 10, 9), bool] */;
    %267 = %248.1;
    %268 = minimum(%251, %252) /* ty=Tensor[(13, 10, 9), uint8] */;
    %269 = bitwise_and(%255, %256) /* ty=Tensor[(13, 10, 9), uint64] */;
    %270 = %260.0;
    %271 = %263.0;
    (%264, %257, meta[relay.Constant][15] /* ty=Tensor[(180), float32] */, %265, %266, %267, meta[relay.Constant][16] /* ty=Tensor[(224), int16] */, %268, %269, %270, %271)
  };
  %272(%var_442, %var_443, %var_444) /* ty=(Tensor[(13, 10, 9), bool], Tensor[(10, 3, 6), bool], Tensor[(180), float32], Tensor[(10, 3, 6), bool], Tensor[(13, 10, 9), bool], Tensor[(14, 8, 2), float64], Tensor[(224), int16], Tensor[(13, 10, 9), uint8], Tensor[(13, 10, 9), uint64], Tensor[(10, 3, 6), bool], Tensor[(10, 3, 6), bool]) */
}

def @func_532(%var_530: Tensor[(15, 2, 13), int8], %var_531: Tensor[(15, 2, 13), int8]) -> (Tensor[(15, 2, 13), float32], Tensor[(15, 2, 13), uint64]) {
  @func_528(%var_530, %var_531) /* ty=(Tensor[(15, 2, 13), float32], Tensor[(15, 2, 13), uint64]) */
}

def @func_4164(%var_4113: Tensor[(72), float32]) -> (Tensor[(15, 14, 5), float32], Tensor[(72), float32], Tensor[(13, 10, 9), bool], Tensor[(15, 14, 8), float64], Tensor[(4, 7, 2), float64], Tensor[(7, 16, 16), float32], Tensor[(1792), float32]) {
  %273 = @func_1059() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %274 = @func_1682() /* ty=(Tensor[(1170), float64], Tensor[(13, 10, 9), bool], Tensor[(1170), float32], Tensor[(72), float32]) */;
  %275 = @func_2248() /* ty=(Tensor[(15, 14, 8), float64],) */;
  %276 = cast(%var_4113, dtype="float32") /* ty=Tensor[(72), float32] */;
  %277 = reshape(%276, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %278 = @func_1486(%277) /* ty=(Tensor[(4, 7, 2), float32], Tensor[(4, 7, 2), uint8], Tensor[(1170), float32], Tensor[(72), float32], Tensor[(390, 3), float32]) */;
  %279 = %278.0;
  %280 = cast(%279, dtype="float64") /* ty=Tensor[(4, 7, 2), float64] */;
  %281 = cast(meta[relay.Constant][17] /* ty=Tensor[(1792), float32] */, dtype="float32") /* ty=Tensor[(1792), float32] */;
  %282 = %274.1;
  %283 = cast(%282, dtype="float32") /* ty=Tensor[(13, 10, 9), float32] */;
  %284 = reshape(%281, newshape=[8, 224]) /* ty=Tensor[(8, 224), float32] */;
  %285 = reshape(%283, newshape=[1170]) /* ty=Tensor[(1170), float32] */;
  %286 = @func_1523(%284, %285) /* ty=(Tensor[(15, 14, 5), float32], Tensor[(7, 16, 16), float32], Tensor[(13, 10, 9), bool], Tensor[(1170), float32], Tensor[(180), float32], Tensor[(8, 224), float32], Tensor[(8, 224), float32]) */;
  %287 = %273.0;
  %288 = %275.0;
  %289 = tan(%280) /* ty=Tensor[(4, 7, 2), float64] */;
  %290 = %286.1;
  (%287, %var_4113, %282, %288, %289, %290, meta[relay.Constant][17] /* ty=Tensor[(1792), float32] */)
}

def @func_5021() -> (Tensor[(15, 14, 5), float32],) {
  %292 = fn () -> (Tensor[(15, 14, 5), float32],) {
    %291 = @func_2480() /* ty=Tensor[(15, 14, 5), float32] */;
    (%291,)
  };
  %292() /* ty=(Tensor[(15, 14, 5), float32],) */
}

def @func_1380(%var_1378: Tensor[(360), int64]) -> (Tensor[(1170), float32], Tensor[(12, 10, 3), bool], Tensor[(360), int64]) {
  @func_1377(%var_1378) /* ty=(Tensor[(1170), float32], Tensor[(12, 10, 3), bool], Tensor[(360), int64]) */
}

def @func_2466() -> (Tensor[(936), float32],) {
  %293 = @func_2023() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(9, 13, 8), float32], Tensor[(936), float32]) */;
  %294 = %293.2;
  (%294,)
}

def @func_85(%var_68: Tensor[(1, 16, 1), uint64], %var_69: Tensor[(9, 16, 14), uint64]) -> (Tensor[(9, 16, 14), uint64], Tensor[(9, 16, 14), bool]) {
  %295 = cast(%var_68, dtype="uint64") /* ty=Tensor[(1, 16, 1), uint64] */;
  %296 = cast(%var_69, dtype="uint64") /* ty=Tensor[(9, 16, 14), uint64] */;
  %297 = cast(%var_69, dtype="bool") /* ty=Tensor[(9, 16, 14), bool] */;
  %298 = cast(%var_68, dtype="bool") /* ty=Tensor[(1, 16, 1), bool] */;
  %299 = multiply(%295, %296) /* ty=Tensor[(9, 16, 14), uint64] */;
  %300 = logical_and(%297, %298) /* ty=Tensor[(9, 16, 14), bool] */;
  (%299, %300)
}

def @func_6405() -> Tensor[(15, 14, 8), float64] {
  @func_6403() /* ty=Tensor[(15, 14, 8), float64] */
}

def @func_5222() -> (Tensor[(13, 10, 9), bool], Tensor[(15, 14, 5), float32]) {
  %301 = @func_1235() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(13, 10, 9), bool], Tensor[(1170), float32], Tensor[(7, 16, 16), float32], Tensor[(448, 4), float64]) */;
  %302 = %301.1;
  %303 = @func_1591() /* ty=Tensor[(15, 14, 5), float32] */;
  (%302, %303)
}

def @func_4087() -> Tensor[(15, 14, 5), float32] {
  %305 = fn () -> Tensor[(15, 14, 5), float32] {
    %304 = @func_1059() /* ty=(Tensor[(15, 14, 5), float32],) */;
    %304.0
  };
  %305() /* ty=Tensor[(15, 14, 5), float32] */
}

def @func_7389() -> Tensor[(15, 14, 5), float32] {
  %307 = fn () -> Tensor[(15, 14, 5), float32] {
    %306 = @func_4600() /* ty=(Tensor[(15, 14, 5), float32],) */;
    %306.0
  };
  %307() /* ty=Tensor[(15, 14, 5), float32] */
}

def @func_1887() -> (Tensor[(15, 14, 5), float32], Tensor[(15, 14, 8), float64]) {
  %308 = @func_1022() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 8), float64]) */;
  %309 = @func_1821() /* ty=(Tensor[(15, 14, 8), float64],) */;
  %310 = %308.0;
  %311 = %309.0;
  (%310, %311)
}

def @func_6210() -> (Tensor[(13, 10, 9), bool], Tensor[(15, 14, 8), float64], Tensor[(22), float32]) {
  %323 = fn () -> (Tensor[(13, 10, 9), bool], Tensor[(15, 14, 8), float64], Tensor[(22), float32]) {
    %312 = @func_4890() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(13, 10, 9), uint64], Tensor[(1170), float32]) */;
    %313 = %312.1;
    %314 = cast(meta[relay.Constant][18] /* ty=Tensor[(13, 10, 9), uint64] */, dtype="bool") /* ty=Tensor[(13, 10, 9), bool] */;
    %315 = shape_of(%313, dtype="int32") /* ty=Tensor[(3), int32] */;
    %316 = cast(%313, dtype="bool") /* ty=Tensor[(13, 10, 9), bool] */;
    %317 = dyn.reshape(%314, %315, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %318 = cast(meta[relay.Constant][19] /* ty=Tensor[(22), float32] */, dtype="float32") /* ty=Tensor[(22), float32] */;
    %319 = reshape(%318, newshape=[2, 11, 1]) /* ty=Tensor[(2, 11, 1), float32] */;
    %320 = @func_4047(%319) /* ty=(Tensor[(2, 11, 1), float32], Tensor[(15, 14, 8), float64], Tensor[(2, 11, 1), float32], Tensor[(9, 16, 14), uint64], Tensor[(16), uint64], Tensor[(2016), uint64]) */;
    %321 = logical_and(%316, %317) /* ty=Tensor[(13, 10, 9), bool] */;
    %322 = %320.1;
    (%321, %322, meta[relay.Constant][19] /* ty=Tensor[(22), float32] */)
  };
  %323() /* ty=(Tensor[(13, 10, 9), bool], Tensor[(15, 14, 8), float64], Tensor[(22), float32]) */
}

def @func_817(%var_815: Tensor[(7, 16, 16), float32]) -> (Tensor[(7, 16, 16), float32],) {
  @func_814(%var_815) /* ty=(Tensor[(7, 16, 16), float32],) */
}

def @func_2157(%var_2153: Tensor[(6, 9, 10), float32]) -> Tensor[(6, 9, 10), float32] {
  %324 = cast(%var_2153, dtype="float32") /* ty=Tensor[(6, 9, 10), float32] */;
  cos(%324) /* ty=Tensor[(6, 9, 10), float32] */
}

def @func_4917() -> (Tensor[(15, 14, 5), float32],) {
  @func_4915() /* ty=(Tensor[(15, 14, 5), float32],) */
}

def @func_2864() -> Tensor[(15, 14, 5), float32] {
  %326 = fn () -> Tensor[(15, 14, 5), float32] {
    %325 = @func_1111() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32]) */;
    %325.1
  };
  %326() /* ty=Tensor[(15, 14, 5), float32] */
}

def @func_6096(%var_6095: Tensor[(6, 8, 15), float64]) -> (Tensor[(6, 8, 15), float64], Tensor[(6, 8, 15), float64]) {
  %331 = fn (%var_6085: Tensor[(6, 8, 15), float64]) -> (Tensor[(6, 8, 15), float64], Tensor[(6, 8, 15), float64]) {
    %327 = cast(%var_6085, dtype="float64") /* ty=Tensor[(6, 8, 15), float64] */;
    %328 = cast(%var_6085, dtype="float64") /* ty=Tensor[(6, 8, 15), float64] */;
    %329 = sigmoid(%327) /* ty=Tensor[(6, 8, 15), float64] */;
    %330 = asinh(%328) /* ty=Tensor[(6, 8, 15), float64] */;
    (%329, %330)
  };
  %331(%var_6095) /* ty=(Tensor[(6, 8, 15), float64], Tensor[(6, 8, 15), float64]) */
}

def @func_1433() -> (Tensor[(15, 14, 5), float32],) {
  @func_1431() /* ty=(Tensor[(15, 14, 5), float32],) */
}

def @func_2468() -> (Tensor[(936), float32],) {
  @func_2466() /* ty=(Tensor[(936), float32],) */
}

def @func_4838(%var_4836: Tensor[(15, 12, 5), float32]) -> Tensor[(15, 12, 5), float32] {
  @func_4835(%var_4836) /* ty=Tensor[(15, 12, 5), float32] */
}

def @func_5357() -> (Tensor[(15, 14, 5), float32],) {
  %332 = @func_2830() /* ty=(Tensor[(15, 14, 8), float64], Tensor[(15, 14, 5), float32]) */;
  %333 = %332.1;
  (%333,)
}

def @func_1152(%var_1151: Tensor[(3, 13), float32]) -> (Tensor[(3, 13), float32],) {
  %339 = fn (%var_1131: Tensor[(3, 13), float32]) -> (Tensor[(3, 13), float32],) {
    %334 = cast(meta[relay.Constant][20] /* ty=Tensor[(3, 13), float32] */, dtype="float32") /* ty=Tensor[(3, 13), float32] */;
    %335 = shape_of(%var_1131, dtype="int32") /* ty=Tensor[(2), int32] */;
    %336 = cast(%var_1131, dtype="float32") /* ty=Tensor[(3, 13), float32] */;
    %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %338 = divide(%336, %337) /* ty=Tensor[(3, 13), float32] */;
    (%338,)
  };
  %339(%var_1151) /* ty=(Tensor[(3, 13), float32],) */
}

def @func_4732(%var_4730: Tensor[(180), float32], %var_4731: Tensor[(1170), float32]) -> (Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32], Tensor[(1, 360), int64], Tensor[(180), float32], Tensor[(1170), float32]) {
  %350 = fn (%var_4726: Tensor[(180), float32], %var_4727: Tensor[(1170), float32]) -> (Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32], Tensor[(1, 360), int64], Tensor[(180), float32], Tensor[(1170), float32]) {
    %340 = @func_4663() /* ty=(Tensor[(15, 14, 5), float32],) */;
    %341 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 360), int64] */, dtype="int64") /* ty=Tensor[(1, 360), int64] */;
    %342 = cast(%var_4726, dtype="float32") /* ty=Tensor[(180), float32] */;
    %343 = cast(%var_4727, dtype="float32") /* ty=Tensor[(1170), float32] */;
    %344 = reshape(%341, newshape=[360]) /* ty=Tensor[(360), int64] */;
    %345 = reshape(%342, newshape=[180, 1]) /* ty=Tensor[(180, 1), float32] */;
    %346 = reshape(%343, newshape=[1170]) /* ty=Tensor[(1170), float32] */;
    %347 = @func_1786(%344, %345, %346) /* ty=(Tensor[(15, 14, 5), float32], Tensor[(12, 10, 3), bool], Tensor[(360), int64], Tensor[(10, 3, 6), bool], Tensor[(180, 1), float32], Tensor[(15, 14, 5), float32], Tensor[(1170), float32], Tensor[(15, 14, 5), float64]) */;
    %348 = %340.0;
    %349 = %347.0;
    (%348, %349, meta[relay.Constant][21] /* ty=Tensor[(1, 360), int64] */, %var_4726, %var_4727)
  };
  %350(%var_4730, %var_4731) /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32], Tensor[(1, 360), int64], Tensor[(180), float32], Tensor[(1170), float32]) */
}

def @func_1889() -> (Tensor[(15, 14, 5), float32], Tensor[(15, 14, 8), float64]) {
  @func_1887() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 8), float64]) */
}

def @func_1431() -> (Tensor[(15, 14, 5), float32],) {
  %351 = @func_1158() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %352 = %351.0;
  (%352,)
}

def @func_2766(%var_2765: Tensor[(448, 4), float64]) -> (Tensor[(15, 14, 5), float32], Tensor[(448, 4), float64]) {
  %364 = fn (%var_2749: Tensor[(448, 4), float64]) -> (Tensor[(15, 14, 5), float32], Tensor[(448, 4), float64]) {
    %353 = @func_2023() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(9, 13, 8), float32], Tensor[(936), float32]) */;
    %354 = @func_1235() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(13, 10, 9), bool], Tensor[(1170), float32], Tensor[(7, 16, 16), float32], Tensor[(448, 4), float64]) */;
    %355 = %354.4;
    %356 = cast(%var_2749, dtype="bool") /* ty=Tensor[(448, 4), bool] */;
    %357 = shape_of(%355, dtype="int32") /* ty=Tensor[(2), int32] */;
    %358 = cast(%355, dtype="bool") /* ty=Tensor[(448, 4), bool] */;
    %359 = dyn.reshape(%356, %357, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %360 = logical_or(%358, %359) /* ty=Tensor[(448, 4), bool] */;
    %361 = cast(%360, dtype="float64") /* ty=Tensor[(448, 4), float64] */;
    %362 = %353.0;
    %363 = log10(%361) /* ty=Tensor[(448, 4), float64] */;
    (%362, %363)
  };
  %364(%var_2765) /* ty=(Tensor[(15, 14, 5), float32], Tensor[(448, 4), float64]) */
}

def @func_4263(%var_4260: Tensor[(15, 16, 10), uint64], %var_4261: Tensor[(15, 16, 10), uint64], %var_4262: Tensor[(50, 15), bool]) -> (Tensor[(15, 16, 10), int8], Tensor[(15, 16, 10), float32], Tensor[(5, 15, 10), uint64]) {
  @func_4258(%var_4260, %var_4261, %var_4262) /* ty=(Tensor[(15, 16, 10), int8], Tensor[(15, 16, 10), float32], Tensor[(5, 15, 10), uint64]) */
}

def @func_1022() -> (Tensor[(15, 14, 5), float32], Tensor[(15, 14, 8), float64]) {
  %365 = cast(meta[relay.Constant][22] /* ty=Tensor[(15, 14, 1), float32] */, dtype="float32") /* ty=Tensor[(15, 14, 1), float32] */;
  %366 = cast(meta[relay.Constant][23] /* ty=Tensor[(15, 14, 5), float32] */, dtype="float32") /* ty=Tensor[(15, 14, 5), float32] */;
  %367 = cast(meta[relay.Constant][22] /* ty=Tensor[(15, 14, 1), float32] */, dtype="float64") /* ty=Tensor[(15, 14, 1), float64] */;
  %368 = cast(meta[relay.Constant][24] /* ty=Tensor[(15, 14, 8), float32] */, dtype="float64") /* ty=Tensor[(15, 14, 8), float64] */;
  %369 = mod(%365, %366) /* ty=Tensor[(15, 14, 5), float32] */;
  %370 = floor_mod(%367, %368) /* ty=Tensor[(15, 14, 8), float64] */;
  (%369, %370)
}

def @func_3239(%var_3232: Tensor[(15, 14, 5), float32]) -> (Tensor[(9, 13, 8), float32], Tensor[(15, 14, 5), int64]) {
  %371 = @func_2023() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(9, 13, 8), float32], Tensor[(936), float32]) */;
  %372 = @func_2863() /* ty=Tensor[(15, 14, 5), float32] */;
  %373 = cast(%var_3232, dtype="int64") /* ty=Tensor[(15, 14, 5), int64] */;
  %374 = shape_of(%372, dtype="int32") /* ty=Tensor[(3), int32] */;
  %375 = cast(%372, dtype="int64") /* ty=Tensor[(15, 14, 5), int64] */;
  %376 = dyn.reshape(%373, %374, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %377 = %371.1;
  %378 = bitwise_xor(%375, %376) /* ty=Tensor[(15, 14, 5), int64] */;
  (%377, %378)
}

def @func_5359() -> (Tensor[(15, 14, 5), float32],) {
  @func_5357() /* ty=(Tensor[(15, 14, 5), float32],) */
}

def @func_5446(%var_5438: Tensor[(14, 14, 4), float64]) -> Tensor[(14, 14, 4), float64] {
  %379 = cast(%var_5438, dtype="float64") /* ty=Tensor[(14, 14, 4), float64] */;
  asinh(%379) /* ty=Tensor[(14, 14, 4), float64] */
}

def @func_5600() -> (Tensor[(15, 14, 8), float64],) {
  %380 = @func_1887() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 8), float64]) */;
  %381 = %380.1;
  (%381,)
}

def @func_7223() -> Tensor[(2, 15, 8), float64] {
  @func_7221() /* ty=Tensor[(2, 15, 8), float64] */
}

def @func_5952() -> (Tensor[(2, 15, 8), float32],) {
  %383 = fn () -> (Tensor[(2, 15, 8), float32],) {
    %382 = @func_1986() /* ty=Tensor[(2, 15, 8), float32] */;
    (%382,)
  };
  %383() /* ty=(Tensor[(2, 15, 8), float32],) */
}

def @func_7342() -> (Tensor[(15, 14, 5), float32], Tensor[(7, 16, 16), float32], Tensor[(1792), float32]) {
  %396 = fn () -> (Tensor[(15, 14, 5), float32], Tensor[(7, 16, 16), float32], Tensor[(1792), float32]) {
    %384 = @func_3548() /* ty=Tensor[(15, 14, 5), float32] */;
    %385 = @func_1111() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32]) */;
    %386 = %385.1;
    %387 = cast(%386, dtype="float32") /* ty=Tensor[(15, 14, 5), float32] */;
    %388 = shape_of(%384, dtype="int32") /* ty=Tensor[(3), int32] */;
    %389 = cast(%384, dtype="float32") /* ty=Tensor[(15, 14, 5), float32] */;
    %390 = dyn.reshape(%387, %388, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %391 = cast(meta[relay.Constant][25] /* ty=Tensor[(1792), float32] */, dtype="float32") /* ty=Tensor[(1792), float32] */;
    %392 = reshape(%391, newshape=[7, 16, 16]) /* ty=Tensor[(7, 16, 16), float32] */;
    %393 = @func_814(%392) /* ty=(Tensor[(7, 16, 16), float32],) */;
    %394 = floor_mod(%389, %390) /* ty=Tensor[(15, 14, 5), float32] */;
    %395 = %393.0;
    (%394, %395, meta[relay.Constant][25] /* ty=Tensor[(1792), float32] */)
  };
  %396() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(7, 16, 16), float32], Tensor[(1792), float32]) */
}

def @func_7479() -> Tensor[(15, 14, 5), float32] {
  @func_7477() /* ty=Tensor[(15, 14, 5), float32] */
}

def @func_3548() -> Tensor[(15, 14, 5), float32] {
  %397 = @func_2217() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(12, 10, 3), bool], Tensor[(360), int64]) */;
  %397.0
}

def @func_6372() -> (Tensor[(15, 14, 5), float32],) {
  @func_6370() /* ty=(Tensor[(15, 14, 5), float32],) */
}

def @func_2939() -> (Tensor[(15, 14, 5), float32],) {
  @func_2937() /* ty=(Tensor[(15, 14, 5), float32],) */
}

def @func_1059() -> (Tensor[(15, 14, 5), float32],) {
  %398 = @func_1022() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 8), float64]) */;
  %399 = %398.0;
  (%399,)
}

def @func_1277() -> Tensor[(2, 15, 8), float32] {
  %400 = cast(meta[relay.Constant][26] /* ty=Tensor[(2, 15, 8), float64] */, dtype="float64") /* ty=Tensor[(2, 15, 8), float64] */;
  %401 = exp(%400) /* ty=Tensor[(2, 15, 8), float64] */;
  %402 = cast(%401, dtype="float32") /* ty=Tensor[(2, 15, 8), float32] */;
  log(%402) /* ty=Tensor[(2, 15, 8), float32] */
}

def @func_5003() -> (Tensor[(7, 16, 16), float32], Tensor[(15, 14, 5), int64], Tensor[(1050), float32]) {
  @func_5001() /* ty=(Tensor[(7, 16, 16), float32], Tensor[(15, 14, 5), int64], Tensor[(1050), float32]) */
}

def @func_6343(%var_6342: Tensor[(16, 1), int32]) -> (Tensor[(16, 1), bool], Tensor[(15, 14, 5), float32]) {
  %408 = fn (%var_6331: Tensor[(16, 1), int32]) -> (Tensor[(16, 1), bool], Tensor[(15, 14, 5), float32]) {
    %403 = cast(-8 /* ty=int32 */, dtype="bool") /* ty=bool */;
    %404 = cast(%var_6331, dtype="bool") /* ty=Tensor[(16, 1), bool] */;
    %405 = @func_4915() /* ty=(Tensor[(15, 14, 5), float32],) */;
    %406 = greater_equal(%403, %404) /* ty=Tensor[(16, 1), bool] */;
    %407 = %405.0;
    (%406, %407)
  };
  %408(%var_6342) /* ty=(Tensor[(16, 1), bool], Tensor[(15, 14, 5), float32]) */
}

def @func_7804() -> Tensor[(15, 14, 8), float64] {
  %410 = fn () -> Tensor[(15, 14, 8), float64] {
    %409 = @func_2543() /* ty=(Tensor[(1170), float32], Tensor[(15, 14, 8), float64]) */;
    %409.1
  };
  %410() /* ty=Tensor[(15, 14, 8), float64] */
}

def @func_6403() -> Tensor[(15, 14, 8), float64] {
  @func_5566() /* ty=Tensor[(15, 14, 8), float64] */
}

def @func_2882() -> (Tensor[(9, 13, 8), float32], Tensor[(15, 14, 5), float32]) {
  %411 = @func_2023() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(9, 13, 8), float32], Tensor[(936), float32]) */;
  %412 = %411.1;
  %413 = @func_2863() /* ty=Tensor[(15, 14, 5), float32] */;
  (%412, %413)
}

def @func_3477(%var_3463: Tensor[(5, 15, 10), bool], %var_3464: Tensor[(5, 15, 10), bool]) -> Tensor[(5, 15, 10), float32] {
  %414 = cast(%var_3464, dtype="bool") /* ty=Tensor[(5, 15, 10), bool] */;
  %415 = shape_of(%var_3463, dtype="int32") /* ty=Tensor[(3), int32] */;
  %416 = cast(%var_3463, dtype="bool") /* ty=Tensor[(5, 15, 10), bool] */;
  %417 = dyn.reshape(%414, %415, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %418 = logical_and(%416, %417) /* ty=Tensor[(5, 15, 10), bool] */;
  %419 = cast(%418, dtype="float32") /* ty=Tensor[(5, 15, 10), float32] */;
  erf(%419) /* ty=Tensor[(5, 15, 10), float32] */
}

def @func_1279() -> Tensor[(2, 15, 8), float32] {
  @func_1277() /* ty=Tensor[(2, 15, 8), float32] */
}

def @func_1850() -> (Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32]) {
  %420 = @func_1059() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %421 = %420.0;
  %422 = @func_1591() /* ty=Tensor[(15, 14, 5), float32] */;
  (%421, %422)
}

def @func_5137() -> (Tensor[(15, 14, 5), float32], Tensor[(15, ?), uint16]) {
  %423 = cast(meta[relay.Constant][27] /* ty=Tensor[(15), float64] */, dtype="float64") /* ty=Tensor[(15), float64] */;
  %424 = reshape(%423, newshape=[15, 1]) /* ty=Tensor[(15, 1), float64] */;
  %425 = @func_4175(%424) /* ty=Tensor[(15, 1), float64] */;
  %426 = cast(meta[relay.Constant][27] /* ty=Tensor[(15), float64] */, dtype="uint16") /* ty=Tensor[(15), uint16] */;
  %427 = shape_of(%425, dtype="int32") /* ty=Tensor[(2), int32] */;
  %428 = cast(%425, dtype="uint16") /* ty=Tensor[(15, 1), uint16] */;
  %429 = dyn.reshape(%426, %427, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %430 = @func_4086() /* ty=Tensor[(15, 14, 5), float32] */;
  %431 = right_shift(%428, %429) /* ty=Tensor[(15, ?), uint16] */;
  (%430, %431)
}

def @func_6754(%var_6753: Tensor[(900), float32]) -> (Tensor[(15, 14, 5), float32], Tensor[(15, 12, 5), float32], Tensor[(900), float32]) {
  %437 = fn (%var_6750: Tensor[(900), float32]) -> (Tensor[(15, 14, 5), float32], Tensor[(15, 12, 5), float32], Tensor[(900), float32]) {
    %432 = @func_4020() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 8), float64], Tensor[(1792), float32], Tensor[(576), float64]) */;
    %433 = cast(%var_6750, dtype="float32") /* ty=Tensor[(900), float32] */;
    %434 = reshape(%433, newshape=[15, 12, 5]) /* ty=Tensor[(15, 12, 5), float32] */;
    %435 = %432.0;
    %436 = @func_4835(%434) /* ty=Tensor[(15, 12, 5), float32] */;
    (%435, %436, %var_6750)
  };
  %437(%var_6753) /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 12, 5), float32], Tensor[(900), float32]) */
}

def @func_5340() -> (Tensor[(15, 14, 8), float64],) {
  @func_5338() /* ty=(Tensor[(15, 14, 8), float64],) */
}

def @func_7458(%var_7457: Tensor[(16, 2, 13), float64]) -> (Tensor[(6, 15, 2), float64], Tensor[(1, 180), float64], Tensor[(7, 16, 16), float32], Tensor[(16, 2, 13), bool]) {
  %450 = fn (%var_7417: Tensor[(16, 2, 13), float64]) -> (Tensor[(6, 15, 2), float64], Tensor[(1, 180), float64], Tensor[(7, 16, 16), float32], Tensor[(16, 2, 13), bool]) {
    %438 = cast(meta[relay.Constant][28] /* ty=Tensor[(1, 180), float64] */, dtype="float64") /* ty=Tensor[(1, 180), float64] */;
    %439 = reshape(%438, newshape=[6, 15, 2]) /* ty=Tensor[(6, 15, 2), float64] */;
    %440 = @func_7341() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(7, 16, 16), float32], Tensor[(1792), float32]) */;
    %441 = cast(%var_7417, dtype="float64") /* ty=Tensor[(16, 2, 13), float64] */;
    %442 = acos(%441) /* ty=Tensor[(16, 2, 13), float64] */;
    %443 = cast(%var_7417, dtype="bool") /* ty=Tensor[(16, 2, 13), bool] */;
    %444 = shape_of(%442, dtype="int32") /* ty=Tensor[(3), int32] */;
    %445 = cast(%442, dtype="bool") /* ty=Tensor[(16, 2, 13), bool] */;
    %446 = dyn.reshape(%443, %444, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %447 = @func_3763(%439) /* ty=Tensor[(6, 15, 2), float64] */;
    %448 = %440.1;
    %449 = greater(%445, %446) /* ty=Tensor[(16, 2, 13), bool] */;
    (%447, meta[relay.Constant][28] /* ty=Tensor[(1, 180), float64] */, %448, %449)
  };
  %450(%var_7457) /* ty=(Tensor[(6, 15, 2), float64], Tensor[(1, 180), float64], Tensor[(7, 16, 16), float32], Tensor[(16, 2, 13), bool]) */
}

def @func_996(%var_994: Tensor[(12, 1, 6), float32], %var_995: Tensor[(1170), float32]) -> (Tensor[(12, 1, 6), float32], Tensor[(13, 10, 9), uint8], Tensor[(1170), float32]) {
  %461 = fn (%var_979: Tensor[(12, 1, 6), float32], %var_986: Tensor[(1170), float32]) -> (Tensor[(12, 1, 6), float32], Tensor[(13, 10, 9), uint8], Tensor[(1170), float32]) {
    %451 = cast(%var_979, dtype="float32") /* ty=Tensor[(12, 1, 6), float32] */;
    %452 = cast(%var_986, dtype="float32") /* ty=Tensor[(1170), float32] */;
    %453 = cast(%var_986, dtype="float32") /* ty=Tensor[(1170), float32] */;
    %454 = cast(%var_986, dtype="float32") /* ty=Tensor[(1170), float32] */;
    %455 = reshape(%452, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), float32] */;
    %456 = reshape(%453, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), float32] */;
    %457 = reshape(%454, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), float32] */;
    %458 = @func_441(%455, %456, %457) /* ty=(Tensor[(13, 10, 9), bool], Tensor[(10, 3, 6), bool], Tensor[(180), float32], Tensor[(10, 3, 6), bool], Tensor[(13, 10, 9), bool], Tensor[(14, 8, 2), float64], Tensor[(224), int16], Tensor[(13, 10, 9), uint8], Tensor[(13, 10, 9), uint64], Tensor[(10, 3, 6), bool], Tensor[(10, 3, 6), bool]) */;
    %459 = acosh(%451) /* ty=Tensor[(12, 1, 6), float32] */;
    %460 = %458.7;
    (%459, %460, %var_986)
  };
  %461(%var_994, %var_995) /* ty=(Tensor[(12, 1, 6), float32], Tensor[(13, 10, 9), uint8], Tensor[(1170), float32]) */
}

def @func_4096() -> Tensor[(448, 4), float64] {
  %463 = fn () -> Tensor[(448, 4), float64] {
    %462 = @func_1235() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(13, 10, 9), bool], Tensor[(1170), float32], Tensor[(7, 16, 16), float32], Tensor[(448, 4), float64]) */;
    %462.4
  };
  %463() /* ty=Tensor[(448, 4), float64] */
}

def @func_2249() -> (Tensor[(15, 14, 8), float64],) {
  %466 = fn () -> (Tensor[(15, 14, 8), float64],) {
    %464 = @func_1821() /* ty=(Tensor[(15, 14, 8), float64],) */;
    %465 = %464.0;
    (%465,)
  };
  %466() /* ty=(Tensor[(15, 14, 8), float64],) */
}

def @func_2937() -> (Tensor[(15, 14, 5), float32],) {
  %467 = @func_1235() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(13, 10, 9), bool], Tensor[(1170), float32], Tensor[(7, 16, 16), float32], Tensor[(448, 4), float64]) */;
  %468 = %467.0;
  (%468,)
}

def @func_5429(%var_5388: Tensor[(750), bool]) -> (Tensor[(10, 6, 8), bool], Tensor[(750), bool], Tensor[(8, 4, 8), bool], Tensor[(1, 256), float32], Tensor[(10, 6, 8), float64], Tensor[(936), float32], Tensor[(2400), bool]) {
  %469 = cast(meta[relay.Constant][30] /* ty=Tensor[(10, 6, 8), float32] */, dtype="bool") /* ty=Tensor[(10, 6, 8), bool] */;
  %470 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(10, 6, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %471 = cast(meta[relay.Constant][29] /* ty=Tensor[(10, 6, 8), float32] */, dtype="bool") /* ty=Tensor[(10, 6, 8), bool] */;
  %472 = dyn.reshape(%469, %470, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %473 = cast(meta[relay.Constant][31] /* ty=Tensor[(1, 256), float32] */, dtype="float32") /* ty=Tensor[(1, 256), float32] */;
  %474 = cast(meta[relay.Constant][31] /* ty=Tensor[(1, 256), float32] */, dtype="float64") /* ty=Tensor[(1, 256), float64] */;
  %475 = reshape(%473, newshape=[8, 4, 8]) /* ty=Tensor[(8, 4, 8), float32] */;
  %476 = reshape(%474, newshape=[8, 4, 8]) /* ty=Tensor[(8, 4, 8), float64] */;
  %477 = @func_3297(%475, %476) /* ty=(Tensor[(8, 4, 8), bool],) */;
  %478 = cast(meta[relay.Constant][30] /* ty=Tensor[(10, 6, 8), float32] */, dtype="float64") /* ty=Tensor[(10, 6, 8), float64] */;
  %479 = @func_2023() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(9, 13, 8), float32], Tensor[(936), float32]) */;
  %480 = cast(meta[relay.Constant][32] /* ty=Tensor[(2400), uint64] */, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %481 = sin(%480) /* ty=Tensor[(2400), float32] */;
  %482 = cast(meta[relay.Constant][32] /* ty=Tensor[(2400), uint64] */, dtype="uint64") /* ty=Tensor[(2400), uint64] */;
  %483 = cast(meta[relay.Constant][32] /* ty=Tensor[(2400), uint64] */, dtype="uint64") /* ty=Tensor[(2400), uint64] */;
  %484 = cast(%var_5388, dtype="bool") /* ty=Tensor[(750), bool] */;
  %485 = reshape(%482, newshape=[15, 16, 10]) /* ty=Tensor[(15, 16, 10), uint64] */;
  %486 = reshape(%483, newshape=[15, 16, 10]) /* ty=Tensor[(15, 16, 10), uint64] */;
  %487 = reshape(%484, newshape=[50, 15]) /* ty=Tensor[(50, 15), bool] */;
  %488 = @func_4258(%485, %486, %487) /* ty=(Tensor[(15, 16, 10), int8], Tensor[(15, 16, 10), float32], Tensor[(5, 15, 10), uint64]) */;
  %489 = %488.0;
  %490 = cast(%489, dtype="bool") /* ty=Tensor[(15, 16, 10), bool] */;
  %491 = shape_of(%481, dtype="int32") /* ty=Tensor[(1), int32] */;
  %492 = cast(%481, dtype="bool") /* ty=Tensor[(2400), bool] */;
  %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?), bool] */;
  %494 = greater(%471, %472) /* ty=Tensor[(10, 6, 8), bool] */;
  %495 = %477.0;
  %496 = cos(%478) /* ty=Tensor[(10, 6, 8), float64] */;
  %497 = %479.2;
  %498 = greater_equal(%492, %493) /* ty=Tensor[(2400), bool] */;
  (%494, %var_5388, %495, meta[relay.Constant][31] /* ty=Tensor[(1, 256), float32] */, %496, %497, %498)
}

def @func_1986() -> Tensor[(2, 15, 8), float32] {
  @func_1277() /* ty=Tensor[(2, 15, 8), float32] */
}

def @func_3073() -> (Tensor[(15, 14, 5), float32],) {
  @func_3071() /* ty=(Tensor[(15, 14, 5), float32],) */
}

def @func_2160(%var_2158: Tensor[(6, 9, 10), float32]) -> Tensor[(6, 9, 10), float32] {
  @func_2157(%var_2158) /* ty=Tensor[(6, 9, 10), float32] */
}

def @func_3829() -> (Tensor[(15, 14, 5), float32], Tensor[(14, 8, 2), float64], Tensor[(224, 1), int16], Tensor[(15, 14, 8), float64], Tensor[(15, 14, 5), float32]) {
  @func_3827() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(14, 8, 2), float64], Tensor[(224, 1), int16], Tensor[(15, 14, 8), float64], Tensor[(15, 14, 5), float32]) */
}

def @func_1568() -> (Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32]) {
  %499 = @func_1431() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %500 = @func_1059() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %501 = %499.0;
  %502 = %500.0;
  (%501, %502)
}

def @func_1526(%var_1524: Tensor[(8, 224), float32], %var_1525: Tensor[(1170), float32]) -> (Tensor[(15, 14, 5), float32], Tensor[(7, 16, 16), float32], Tensor[(13, 10, 9), bool], Tensor[(1170), float32], Tensor[(180), float32], Tensor[(8, 224), float32], Tensor[(8, 224), float32]) {
  %531 = fn (%var_1495: Tensor[(8, 224), float32], %var_1502: Tensor[(1170), float32]) -> (Tensor[(15, 14, 5), float32], Tensor[(7, 16, 16), float32], Tensor[(13, 10, 9), bool], Tensor[(1170), float32], Tensor[(180), float32], Tensor[(8, 224), float32], Tensor[(8, 224), float32]) {
    %503 = @func_1059() /* ty=(Tensor[(15, 14, 5), float32],) */;
    %504 = cast(%var_1495, dtype="float32") /* ty=Tensor[(8, 224), float32] */;
    %505 = reshape(%504, newshape=[7, 16, 16]) /* ty=Tensor[(7, 16, 16), float32] */;
    %506 = @func_814(%505) /* ty=(Tensor[(7, 16, 16), float32],) */;
    %507 = cast(%var_1502, dtype="float32") /* ty=Tensor[(1170), float32] */;
    %508 = cast(%var_1502, dtype="float32") /* ty=Tensor[(1170), float32] */;
    %509 = cast(%var_1502, dtype="float32") /* ty=Tensor[(1170), float32] */;
    %510 = reshape(%507, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), float32] */;
    %511 = reshape(%508, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), float32] */;
    %512 = reshape(%509, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), float32] */;
    %513 = @func_441(%510, %511, %512) /* ty=(Tensor[(13, 10, 9), bool], Tensor[(10, 3, 6), bool], Tensor[(180), float32], Tensor[(10, 3, 6), bool], Tensor[(13, 10, 9), bool], Tensor[(14, 8, 2), float64], Tensor[(224), int16], Tensor[(13, 10, 9), uint8], Tensor[(13, 10, 9), uint64], Tensor[(10, 3, 6), bool], Tensor[(10, 3, 6), bool]) */;
    %514 = %513.4;
    %515 = cast(%514, dtype="float32") /* ty=Tensor[(13, 10, 9), float32] */;
    %516 = cast(%var_1502, dtype="float32") /* ty=Tensor[(1170), float32] */;
    %517 = cast(%var_1502, dtype="float32") /* ty=Tensor[(1170), float32] */;
    %518 = reshape(%515, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), float32] */;
    %519 = reshape(%516, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), float32] */;
    %520 = reshape(%517, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), float32] */;
    %521 = @func_441(%518, %519, %520) /* ty=(Tensor[(13, 10, 9), bool], Tensor[(10, 3, 6), bool], Tensor[(180), float32], Tensor[(10, 3, 6), bool], Tensor[(13, 10, 9), bool], Tensor[(14, 8, 2), float64], Tensor[(224), int16], Tensor[(13, 10, 9), uint8], Tensor[(13, 10, 9), uint64], Tensor[(10, 3, 6), bool], Tensor[(10, 3, 6), bool]) */;
    %522 = cast(%var_1495, dtype="float32") /* ty=Tensor[(8, 224), float32] */;
    %523 = log10(%522) /* ty=Tensor[(8, 224), float32] */;
    %524 = cast(%523, dtype="float32") /* ty=Tensor[(8, 224), float32] */;
    %525 = cast(%523, dtype="float32") /* ty=Tensor[(8, 224), float32] */;
    %526 = %503.0;
    %527 = %506.0;
    %528 = %521.2;
    %529 = cosh(%524) /* ty=Tensor[(8, 224), float32] */;
    %530 = sigmoid(%525) /* ty=Tensor[(8, 224), float32] */;
    (%526, %527, %514, %var_1502, %528, %529, %530)
  };
  %531(%var_1524, %var_1525) /* ty=(Tensor[(15, 14, 5), float32], Tensor[(7, 16, 16), float32], Tensor[(13, 10, 9), bool], Tensor[(1170), float32], Tensor[(180), float32], Tensor[(8, 224), float32], Tensor[(8, 224), float32]) */
}

def @func_3279(%var_3276: Tensor[(360), int64], %var_3277: Tensor[(1, 180), float32], %var_3278: Tensor[(10, 117), float32]) -> (Tensor[(15, 14, 5), float32], Tensor[(360), int64], Tensor[(360), int64], Tensor[(1, 180), float32], Tensor[(10, 117), float32]) {
  %542 = fn (%var_3259: Tensor[(360), int64], %var_3260: Tensor[(1, 180), float32], %var_3261: Tensor[(10, 117), float32]) -> (Tensor[(15, 14, 5), float32], Tensor[(360), int64], Tensor[(360), int64], Tensor[(1, 180), float32], Tensor[(10, 117), float32]) {
    %532 = @func_1059() /* ty=(Tensor[(15, 14, 5), float32],) */;
    %533 = cast(%var_3259, dtype="int64") /* ty=Tensor[(360), int64] */;
    %534 = cast(%var_3260, dtype="float32") /* ty=Tensor[(1, 180), float32] */;
    %535 = cast(%var_3261, dtype="float32") /* ty=Tensor[(10, 117), float32] */;
    %536 = reshape(%533, newshape=[360]) /* ty=Tensor[(360), int64] */;
    %537 = reshape(%534, newshape=[180, 1]) /* ty=Tensor[(180, 1), float32] */;
    %538 = reshape(%535, newshape=[1170]) /* ty=Tensor[(1170), float32] */;
    %539 = @func_1786(%536, %537, %538) /* ty=(Tensor[(15, 14, 5), float32], Tensor[(12, 10, 3), bool], Tensor[(360), int64], Tensor[(10, 3, 6), bool], Tensor[(180, 1), float32], Tensor[(15, 14, 5), float32], Tensor[(1170), float32], Tensor[(15, 14, 5), float64]) */;
    %540 = %532.0;
    %541 = %539.2;
    (%540, %541, %var_3259, %var_3260, %var_3261)
  };
  %542(%var_3276, %var_3277, %var_3278) /* ty=(Tensor[(15, 14, 5), float32], Tensor[(360), int64], Tensor[(360), int64], Tensor[(1, 180), float32], Tensor[(10, 117), float32]) */
}

def @func_89(%var_87: Tensor[(1, 16, 1), uint64], %var_88: Tensor[(9, 16, 14), uint64]) -> (Tensor[(9, 16, 14), uint64], Tensor[(9, 16, 14), bool]) {
  @func_85(%var_87, %var_88) /* ty=(Tensor[(9, 16, 14), uint64], Tensor[(9, 16, 14), bool]) */
}

def @func_1852() -> (Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32]) {
  @func_1850() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32]) */
}

def @func_2340(%var_2338: Tensor[(1170), float64], %var_2339: Tensor[(12, 78), float32]) -> (Tensor[(1170), float64], Tensor[(15, 14, 5), float32], Tensor[(9, 13, 8), float32], Tensor[(12, 78), float32], Tensor[(1170), float64]) {
  %561 = fn (%var_2313: Tensor[(1170), float64], %var_2324: Tensor[(12, 78), float32]) -> (Tensor[(1170), float64], Tensor[(15, 14, 5), float32], Tensor[(9, 13, 8), float32], Tensor[(12, 78), float32], Tensor[(1170), float64]) {
    %543 = @func_1235() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(13, 10, 9), bool], Tensor[(1170), float32], Tensor[(7, 16, 16), float32], Tensor[(448, 4), float64]) */;
    %544 = %543.2;
    %545 = cast(%544, dtype="float32") /* ty=Tensor[(1170), float32] */;
    %546 = cos(%545) /* ty=Tensor[(1170), float32] */;
    %547 = cast(%546, dtype="float64") /* ty=Tensor[(1170), float64] */;
    %548 = sqrt(%547) /* ty=Tensor[(1170), float64] */;
    %549 = cast(%var_2313, dtype="float64") /* ty=Tensor[(1170), float64] */;
    %550 = shape_of(%548, dtype="int32") /* ty=Tensor[(1), int32] */;
    %551 = cast(%548, dtype="float64") /* ty=Tensor[(1170), float64] */;
    %552 = dyn.reshape(%549, %550, newshape=[]) /* ty=Tensor[(?), float64] */;
    %553 = @func_1431() /* ty=(Tensor[(15, 14, 5), float32],) */;
    %554 = cast(%var_2324, dtype="float32") /* ty=Tensor[(12, 78), float32] */;
    %555 = reshape(%554, newshape=[9, 13, 8]) /* ty=Tensor[(9, 13, 8), float32] */;
    %556 = cast(%546, dtype="float64") /* ty=Tensor[(1170), float64] */;
    %557 = floor_mod(%551, %552) /* ty=Tensor[(1170), float64] */;
    %558 = %553.0;
    %559 = @func_658(%555) /* ty=Tensor[(9, 13, 8), float32] */;
    %560 = exp(%556) /* ty=Tensor[(1170), float64] */;
    (%557, %558, %559, %var_2324, %560)
  };
  %561(%var_2338, %var_2339) /* ty=(Tensor[(1170), float64], Tensor[(15, 14, 5), float32], Tensor[(9, 13, 8), float32], Tensor[(12, 78), float32], Tensor[(1170), float64]) */
}

def @func_6015(%var_6013: Tensor[(5, 15, 1), uint64], %var_6014: Tensor[(5, 15, 1), uint64]) -> Tensor[(5, 15, ?), uint64] {
  @func_6011(%var_6013, %var_6014) /* ty=Tensor[(5, 15, ?), uint64] */
}

def @func_3598(%var_3596: Tensor[(240), float32], %var_3597: Tensor[(1792), float32]) -> (Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32], Tensor[(7, 16, 16), float32], Tensor[(240), float32], Tensor[(1792), float32], Tensor[(3, 13), float32], Tensor[(39), float32]) {
  %574 = fn (%var_3567: Tensor[(240), float32], %var_3568: Tensor[(1792), float32]) -> (Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32], Tensor[(7, 16, 16), float32], Tensor[(240), float32], Tensor[(1792), float32], Tensor[(3, 13), float32], Tensor[(39), float32]) {
    %562 = cast(%var_3567, dtype="float32") /* ty=Tensor[(240), float32] */;
    %563 = cast(%var_3568, dtype="float32") /* ty=Tensor[(1792), float32] */;
    %564 = reshape(%562, newshape=[2, 15, 8]) /* ty=Tensor[(2, 15, 8), float32] */;
    %565 = reshape(%563, newshape=[1792]) /* ty=Tensor[(1792), float32] */;
    %566 = @func_2630(%564, %565) /* ty=(Tensor[(2, 15, 8), int8], Tensor[(7, 16, 16), float32], Tensor[(1792), float32], Tensor[(1170), float32]) */;
    %567 = cast(meta[relay.Constant][33] /* ty=Tensor[(39), float32] */, dtype="float32") /* ty=Tensor[(39), float32] */;
    %568 = reshape(%567, newshape=[3, 13]) /* ty=Tensor[(3, 13), float32] */;
    %569 = @func_1150(%568) /* ty=(Tensor[(3, 13), float32],) */;
    %570 = @func_3170() /* ty=Tensor[(15, 14, 5), float32] */;
    %571 = @func_3548() /* ty=Tensor[(15, 14, 5), float32] */;
    %572 = %566.1;
    %573 = %569.0;
    (%570, %571, %572, %var_3567, %var_3568, %573, meta[relay.Constant][33] /* ty=Tensor[(39), float32] */)
  };
  %574(%var_3596, %var_3597) /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32], Tensor[(7, 16, 16), float32], Tensor[(240), float32], Tensor[(1792), float32], Tensor[(3, 13), float32], Tensor[(39), float32]) */
}

def @func_2480() -> Tensor[(15, 14, 5), float32] {
  @func_1591() /* ty=Tensor[(15, 14, 5), float32] */
}

def @func_5912() -> (Tensor[(15, 14, 8), float64],) {
  %577 = fn () -> (Tensor[(15, 14, 8), float64],) {
    %575 = @func_5198() /* ty=(Tensor[(15, 14, 8), float64],) */;
    %576 = %575.0;
    (%576,)
  };
  %577() /* ty=(Tensor[(15, 14, 8), float64],) */
}

def @func_3733() -> (Tensor[(15, 14, 5), float32], Tensor[(4, 7, 14), float32], Tensor[(15, 14, 5), float32]) {
  @func_3731() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(4, 7, 14), float32], Tensor[(15, 14, 5), float32]) */
}

def @func_3550() -> Tensor[(15, 14, 5), float32] {
  @func_3548() /* ty=Tensor[(15, 14, 5), float32] */
}

def @func_4335(%var_4333: Tensor[(1170), float32]) -> (Tensor[(1170), float64], Tensor[(15, 14, 5), float32]) {
  @func_4332(%var_4333) /* ty=(Tensor[(1170), float64], Tensor[(15, 14, 5), float32]) */
}

def @func_7734() -> (Tensor[(15, 14, 5), float32],) {
  %580 = fn () -> (Tensor[(15, 14, 5), float32],) {
    %578 = @func_2023() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(9, 13, 8), float32], Tensor[(936), float32]) */;
    %579 = %578.0;
    (%579,)
  };
  %580() /* ty=(Tensor[(15, 14, 5), float32],) */
}

def @func_4665() -> (Tensor[(15, 14, 5), float32],) {
  @func_4663() /* ty=(Tensor[(15, 14, 5), float32],) */
}

def @func_1988() -> Tensor[(2, 15, 8), float32] {
  @func_1986() /* ty=Tensor[(2, 15, 8), float32] */
}

def @func_1235() -> (Tensor[(15, 14, 5), float32], Tensor[(13, 10, 9), bool], Tensor[(1170), float32], Tensor[(7, 16, 16), float32], Tensor[(448, 4), float64]) {
  %581 = @func_1158() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %582 = cast(meta[relay.Constant][34] /* ty=Tensor[(1170), float32] */, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %583 = cast(meta[relay.Constant][34] /* ty=Tensor[(1170), float32] */, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %584 = cast(meta[relay.Constant][34] /* ty=Tensor[(1170), float32] */, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %585 = reshape(%582, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), float32] */;
  %586 = reshape(%583, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), float32] */;
  %587 = reshape(%584, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), float32] */;
  %588 = @func_441(%585, %586, %587) /* ty=(Tensor[(13, 10, 9), bool], Tensor[(10, 3, 6), bool], Tensor[(180), float32], Tensor[(10, 3, 6), bool], Tensor[(13, 10, 9), bool], Tensor[(14, 8, 2), float64], Tensor[(224), int16], Tensor[(13, 10, 9), uint8], Tensor[(13, 10, 9), uint64], Tensor[(10, 3, 6), bool], Tensor[(10, 3, 6), bool]) */;
  %589 = cast(meta[relay.Constant][35] /* ty=Tensor[(448, 4), float32] */, dtype="float32") /* ty=Tensor[(448, 4), float32] */;
  %590 = reshape(%589, newshape=[7, 16, 16]) /* ty=Tensor[(7, 16, 16), float32] */;
  %591 = @func_814(%590) /* ty=(Tensor[(7, 16, 16), float32],) */;
  %592 = cast(meta[relay.Constant][35] /* ty=Tensor[(448, 4), float32] */, dtype="float64") /* ty=Tensor[(448, 4), float64] */;
  %593 = sigmoid(%592) /* ty=Tensor[(448, 4), float64] */;
  %594 = cast(%593, dtype="float64") /* ty=Tensor[(448, 4), float64] */;
  %595 = %581.0;
  %596 = %588.4;
  %597 = %591.0;
  %598 = log(%594) /* ty=Tensor[(448, 4), float64] */;
  (%595, %596, meta[relay.Constant][34] /* ty=Tensor[(1170), float32] */, %597, %598)
}

def @func_1158() -> (Tensor[(15, 14, 5), float32],) {
  %599 = @func_1059() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %600 = %599.0;
  (%600,)
}

def @func_2088(%var_2087: Tensor[(360), int64]) -> (Tensor[(15, 14, 5), float32], Tensor[(1170), float32], Tensor[(360), int64]) {
  %606 = fn (%var_2077: Tensor[(360), int64]) -> (Tensor[(15, 14, 5), float32], Tensor[(1170), float32], Tensor[(360), int64]) {
    %601 = cast(%var_2077, dtype="int64") /* ty=Tensor[(360), int64] */;
    %602 = reshape(%601, newshape=[360]) /* ty=Tensor[(360), int64] */;
    %603 = @func_1377(%602) /* ty=(Tensor[(1170), float32], Tensor[(12, 10, 3), bool], Tensor[(360), int64]) */;
    %604 = @func_1591() /* ty=Tensor[(15, 14, 5), float32] */;
    %605 = %603.0;
    (%604, %605, %var_2077)
  };
  %606(%var_2087) /* ty=(Tensor[(15, 14, 5), float32], Tensor[(1170), float32], Tensor[(360), int64]) */
}

def @func_5602() -> (Tensor[(15, 14, 8), float64],) {
  @func_5600() /* ty=(Tensor[(15, 14, 8), float64],) */
}

def @func_2545() -> (Tensor[(1170), float32], Tensor[(15, 14, 8), float64]) {
  @func_2543() /* ty=(Tensor[(1170), float32], Tensor[(15, 14, 8), float64]) */
}

def @func_1111() -> (Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32]) {
  %607 = @func_1059() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %608 = @func_1059() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %609 = %607.0;
  %610 = %608.0;
  (%609, %610)
}

def @func_3676(%var_3672: Tensor[(1170), float32]) -> (Tensor[(15, 14, 5), float32], Tensor[(13, 10, 9), uint64], Tensor[(1170), float32]) {
  %611 = @func_1568() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32]) */;
  %612 = cast(%var_3672, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %613 = cast(%var_3672, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %614 = cast(%var_3672, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %615 = reshape(%612, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), float32] */;
  %616 = reshape(%613, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), float32] */;
  %617 = reshape(%614, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), float32] */;
  %618 = @func_441(%615, %616, %617) /* ty=(Tensor[(13, 10, 9), bool], Tensor[(10, 3, 6), bool], Tensor[(180), float32], Tensor[(10, 3, 6), bool], Tensor[(13, 10, 9), bool], Tensor[(14, 8, 2), float64], Tensor[(224), int16], Tensor[(13, 10, 9), uint8], Tensor[(13, 10, 9), uint64], Tensor[(10, 3, 6), bool], Tensor[(10, 3, 6), bool]) */;
  %619 = %611.0;
  %620 = %618.8;
  (%619, %620, %var_3672)
}

def @func_3746() -> Tensor[(15, 14, 5), float32] {
  %621 = @func_2937() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %621.0
}

def @func_7835() -> (Tensor[(15, 14, 8), float64],) {
  @func_7833() /* ty=(Tensor[(15, 14, 8), float64],) */
}

def @func_3884(%var_3882: Tensor[(1170), float64], %var_3883: Tensor[(936), float32]) -> (Tensor[(15, 14, 5), float32], Tensor[(12, 78), float32], Tensor[(1170), float64], Tensor[(936), float32]) {
  %630 = fn (%var_3878: Tensor[(1170), float64], %var_3879: Tensor[(936), float32]) -> (Tensor[(15, 14, 5), float32], Tensor[(12, 78), float32], Tensor[(1170), float64], Tensor[(936), float32]) {
    %622 = @func_3827() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(14, 8, 2), float64], Tensor[(224, 1), int16], Tensor[(15, 14, 8), float64], Tensor[(15, 14, 5), float32]) */;
    %623 = cast(%var_3878, dtype="float64") /* ty=Tensor[(1170), float64] */;
    %624 = cast(%var_3879, dtype="float32") /* ty=Tensor[(936), float32] */;
    %625 = reshape(%623, newshape=[1170]) /* ty=Tensor[(1170), float64] */;
    %626 = reshape(%624, newshape=[12, 78]) /* ty=Tensor[(12, 78), float32] */;
    %627 = @func_2337(%625, %626) /* ty=(Tensor[(1170), float64], Tensor[(15, 14, 5), float32], Tensor[(9, 13, 8), float32], Tensor[(12, 78), float32], Tensor[(1170), float64]) */;
    %628 = %622.0;
    %629 = %627.3;
    (%628, %629, %var_3878, %var_3879)
  };
  %630(%var_3882, %var_3883) /* ty=(Tensor[(15, 14, 5), float32], Tensor[(12, 78), float32], Tensor[(1170), float64], Tensor[(936), float32]) */
}

def @func_5282() -> Tensor[(15, 14, 8), float64] {
  @func_5280() /* ty=Tensor[(15, 14, 8), float64] */
}

def @func_1683() -> (Tensor[(1170), float64], Tensor[(13, 10, 9), bool], Tensor[(1170), float32], Tensor[(72), float32]) {
  %651 = fn () -> (Tensor[(1170), float64], Tensor[(13, 10, 9), bool], Tensor[(1170), float32], Tensor[(72), float32]) {
    %631 = @func_1344() /* ty=Tensor[(1170), float32] */;
    %632 = cast(meta[relay.Constant][36] /* ty=Tensor[(1170), float32] */, dtype="float64") /* ty=Tensor[(1170), float64] */;
    %633 = shape_of(%631, dtype="int32") /* ty=Tensor[(1), int32] */;
    %634 = cast(%631, dtype="float64") /* ty=Tensor[(1170), float64] */;
    %635 = dyn.reshape(%632, %633, newshape=[]) /* ty=Tensor[(?), float64] */;
    %636 = power(%634, %635) /* ty=Tensor[(1170), float64] */;
    %637 = cast(%636, dtype="float32") /* ty=Tensor[(1170), float32] */;
    %638 = cast(meta[relay.Constant][36] /* ty=Tensor[(1170), float32] */, dtype="float32") /* ty=Tensor[(1170), float32] */;
    %639 = cast(%631, dtype="float32") /* ty=Tensor[(1170), float32] */;
    %640 = reshape(%637, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), float32] */;
    %641 = reshape(%638, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), float32] */;
    %642 = reshape(%639, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), float32] */;
    %643 = @func_441(%640, %641, %642) /* ty=(Tensor[(13, 10, 9), bool], Tensor[(10, 3, 6), bool], Tensor[(180), float32], Tensor[(10, 3, 6), bool], Tensor[(13, 10, 9), bool], Tensor[(14, 8, 2), float64], Tensor[(224), int16], Tensor[(13, 10, 9), uint8], Tensor[(13, 10, 9), uint64], Tensor[(10, 3, 6), bool], Tensor[(10, 3, 6), bool]) */;
    %644 = cast(meta[relay.Constant][37] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
    %645 = cast(meta[relay.Constant][36] /* ty=Tensor[(1170), float32] */, dtype="float32") /* ty=Tensor[(1170), float32] */;
    %646 = reshape(%644, newshape=[12, 1, 6]) /* ty=Tensor[(12, 1, 6), float32] */;
    %647 = reshape(%645, newshape=[1170]) /* ty=Tensor[(1170), float32] */;
    %648 = @func_993(%646, %647) /* ty=(Tensor[(12, 1, 6), float32], Tensor[(13, 10, 9), uint8], Tensor[(1170), float32]) */;
    %649 = %643.0;
    %650 = %648.2;
    (%636, %649, %650, meta[relay.Constant][37] /* ty=Tensor[(72), float32] */)
  };
  %651() /* ty=(Tensor[(1170), float64], Tensor[(13, 10, 9), bool], Tensor[(1170), float32], Tensor[(72), float32]) */
}

def @func_7064() -> (Tensor[(15, 14, 8), float64],) {
  %652 = @func_2248() /* ty=(Tensor[(15, 14, 8), float64],) */;
  %653 = %652.0;
  (%653,)
}

def @func_313(%var_311: Tensor[(14, 8, 2), int16], %var_312: Tensor[(14, 8, 2), int16]) -> (Tensor[(14, 8, 2), int16], Tensor[(14, 8, 2), float64]) {
  %661 = fn (%var_299: Tensor[(14, 8, 2), int16], %var_300: Tensor[(14, 8, 2), int16]) -> (Tensor[(14, 8, 2), int16], Tensor[(14, 8, 2), float64]) {
    %654 = cast(%var_300, dtype="int16") /* ty=Tensor[(14, 8, 2), int16] */;
    %655 = shape_of(%var_299, dtype="int32") /* ty=Tensor[(3), int32] */;
    %656 = cast(%var_299, dtype="int16") /* ty=Tensor[(14, 8, 2), int16] */;
    %657 = dyn.reshape(%654, %655, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %658 = cast(%var_300, dtype="float64") /* ty=Tensor[(14, 8, 2), float64] */;
    %659 = bitwise_xor(%656, %657) /* ty=Tensor[(14, 8, 2), int16] */;
    %660 = atan(%658) /* ty=Tensor[(14, 8, 2), float64] */;
    (%659, %660)
  };
  %661(%var_311, %var_312) /* ty=(Tensor[(14, 8, 2), int16], Tensor[(14, 8, 2), float64]) */
}

def @func_5666() -> (Tensor[(15, 14, 5), float32],) {
  @func_5664() /* ty=(Tensor[(15, 14, 5), float32],) */
}

def @func_7787() -> Tensor[(15, 14, 5), float32] {
  %662 = @func_7733() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %662.0
}

def @func_3360(%var_3358: Tensor[(15, 14, 5), float32], %var_3359: Tensor[(15, 14, 5), float32]) -> (Tensor[(15, 14, 5), bool], Tensor[(15, 14, 5), int32], Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32]) {
  %681 = fn (%var_3308: Tensor[(15, 14, 5), float32], %var_3323: Tensor[(15, 14, 5), float32]) -> (Tensor[(15, 14, 5), bool], Tensor[(15, 14, 5), int32], Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32]) {
    %663 = @func_2830() /* ty=(Tensor[(15, 14, 8), float64], Tensor[(15, 14, 5), float32]) */;
    %664 = %663.1;
    %665 = cast(%var_3308, dtype="bool") /* ty=Tensor[(15, 14, 5), bool] */;
    %666 = shape_of(%664, dtype="int32") /* ty=Tensor[(3), int32] */;
    %667 = cast(%664, dtype="bool") /* ty=Tensor[(15, 14, 5), bool] */;
    %668 = dyn.reshape(%665, %666, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %669 = cast(%var_3323, dtype="int32") /* ty=Tensor[(15, 14, 5), int32] */;
    %670 = shape_of(%664, dtype="int32") /* ty=Tensor[(3), int32] */;
    %671 = cast(%664, dtype="int32") /* ty=Tensor[(15, 14, 5), int32] */;
    %672 = dyn.reshape(%669, %670, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %673 = @func_3071() /* ty=(Tensor[(15, 14, 5), float32],) */;
    %674 = %673.0;
    %675 = cast(%674, dtype="float32") /* ty=Tensor[(15, 14, 5), float32] */;
    %676 = less_equal(%667, %668) /* ty=Tensor[(15, 14, 5), bool] */;
    %677 = right_shift(%671, %672) /* ty=Tensor[(15, 14, 5), int32] */;
    %678 = atan(%675) /* ty=Tensor[(15, 14, 5), float32] */;
    %679 = @func_2863() /* ty=Tensor[(15, 14, 5), float32] */;
    %680 = @func_1591() /* ty=Tensor[(15, 14, 5), float32] */;
    (%676, %677, %678, %679, %680)
  };
  %681(%var_3358, %var_3359) /* ty=(Tensor[(15, 14, 5), bool], Tensor[(15, 14, 5), int32], Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32]) */
}

def @func_2958() -> Tensor[(15, 14, 5), float32] {
  @func_2956() /* ty=Tensor[(15, 14, 5), float32] */
}

def @func_5001() -> (Tensor[(7, 16, 16), float32], Tensor[(15, 14, 5), int64], Tensor[(1050), float32]) {
  %682 = @func_1235() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(13, 10, 9), bool], Tensor[(1170), float32], Tensor[(7, 16, 16), float32], Tensor[(448, 4), float64]) */;
  %683 = cast(meta[relay.Constant][38] /* ty=Tensor[(1050), float32] */, dtype="float32") /* ty=Tensor[(1050), float32] */;
  %684 = reshape(%683, newshape=[15, 14, 5]) /* ty=Tensor[(15, 14, 5), float32] */;
  %685 = @func_3239(%684) /* ty=(Tensor[(9, 13, 8), float32], Tensor[(15, 14, 5), int64]) */;
  %686 = %682.3;
  %687 = %685.1;
  (%686, %687, meta[relay.Constant][38] /* ty=Tensor[(1050), float32] */)
}

def @func_5139() -> (Tensor[(15, 14, 5), float32], Tensor[(15, ?), uint16]) {
  @func_5137() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, ?), uint16]) */
}

def @func_7594(%var_7556: Tensor[(1, 1170), float32], %var_7570: Tensor[(360), int64], %var_7583: Tensor[(900), float32]) -> (Tensor[(15, 14, 5), float32], Tensor[(2, 15, 8), float32], Tensor[(8, 224), float32], Tensor[(896, 2), float32], Tensor[(1, 1170), float32], Tensor[(1170), float32], Tensor[(360), int64], Tensor[(15, 14, 5), float32], Tensor[(900), float32], Tensor[(900), float32]) {
  %688 = @func_4957() /* ty=(Tensor[(2, 15, 8), float32], Tensor[(2, 15, 8), float32]) */;
  %689 = cast(meta[relay.Constant][39] /* ty=Tensor[(896, 2), float32] */, dtype="float32") /* ty=Tensor[(896, 2), float32] */;
  %690 = cast(%var_7556, dtype="float32") /* ty=Tensor[(1, 1170), float32] */;
  %691 = reshape(%689, newshape=[8, 224]) /* ty=Tensor[(8, 224), float32] */;
  %692 = reshape(%690, newshape=[1170]) /* ty=Tensor[(1170), float32] */;
  %693 = @func_1523(%691, %692) /* ty=(Tensor[(15, 14, 5), float32], Tensor[(7, 16, 16), float32], Tensor[(13, 10, 9), bool], Tensor[(1170), float32], Tensor[(180), float32], Tensor[(8, 224), float32], Tensor[(8, 224), float32]) */;
  %694 = cast(%var_7570, dtype="int64") /* ty=Tensor[(360), int64] */;
  %695 = reshape(%694, newshape=[360]) /* ty=Tensor[(360), int64] */;
  %696 = @func_2086(%695) /* ty=(Tensor[(15, 14, 5), float32], Tensor[(1170), float32], Tensor[(360), int64]) */;
  %697 = @func_6685() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %698 = cast(%var_7583, dtype="float32") /* ty=Tensor[(900), float32] */;
  %699 = reshape(%698, newshape=[900]) /* ty=Tensor[(900), float32] */;
  %700 = @func_6752(%699) /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 12, 5), float32], Tensor[(900), float32]) */;
  %701 = @func_7530() /* ty=Tensor[(15, 14, 5), float32] */;
  %702 = %688.1;
  %703 = %693.6;
  %704 = %696.1;
  %705 = %697.0;
  %706 = %700.2;
  (%701, %702, %703, meta[relay.Constant][39] /* ty=Tensor[(896, 2), float32] */, %var_7556, %704, %var_7570, %705, %706, %var_7583)
}

def @func_6138() -> (Tensor[(15, 14, 8), float64], Tensor[(15, 14, 5), float32]) {
  %711 = fn () -> (Tensor[(15, 14, 8), float64], Tensor[(15, 14, 5), float32]) {
    %707 = @func_1821() /* ty=(Tensor[(15, 14, 8), float64],) */;
    %708 = @func_1059() /* ty=(Tensor[(15, 14, 5), float32],) */;
    %709 = %707.0;
    %710 = %708.0;
    (%709, %710)
  };
  %711() /* ty=(Tensor[(15, 14, 8), float64], Tensor[(15, 14, 5), float32]) */
}

def @func_3171() -> Tensor[(15, 14, 5), float32] {
  %713 = fn () -> Tensor[(15, 14, 5), float32] {
    %712 = @func_3071() /* ty=(Tensor[(15, 14, 5), float32],) */;
    %712.0
  };
  %713() /* ty=Tensor[(15, 14, 5), float32] */
}

def @func_6686() -> (Tensor[(15, 14, 5), float32],) {
  %716 = fn () -> (Tensor[(15, 14, 5), float32],) {
    %714 = @func_1111() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32]) */;
    %715 = %714.1;
    (%715,)
  };
  %716() /* ty=(Tensor[(15, 14, 5), float32],) */
}

def @func_4177(%var_4176: Tensor[(15, 1), float64]) -> Tensor[(15, 1), float64] {
  %718 = fn (%var_4172: Tensor[(15, 1), float64]) -> Tensor[(15, 1), float64] {
    %717 = cast(%var_4172, dtype="float64") /* ty=Tensor[(15, 1), float64] */;
    atanh(%717) /* ty=Tensor[(15, 1), float64] */
  };
  %718(%var_4176) /* ty=Tensor[(15, 1), float64] */
}

def @func_2298(%var_2297: Tensor[(9, 10, 2), float32]) -> (Tensor[(9, 10, 2), float32], Tensor[(360), int64], Tensor[(12, 30), int64]) {
  %725 = fn (%var_2285: Tensor[(9, 10, 2), float32]) -> (Tensor[(9, 10, 2), float32], Tensor[(360), int64], Tensor[(12, 30), int64]) {
    %719 = cast(%var_2285, dtype="float32") /* ty=Tensor[(9, 10, 2), float32] */;
    %720 = cast(meta[relay.Constant][40] /* ty=Tensor[(12, 30), int64] */, dtype="int64") /* ty=Tensor[(12, 30), int64] */;
    %721 = reshape(%720, newshape=[360]) /* ty=Tensor[(360), int64] */;
    %722 = @func_2086(%721) /* ty=(Tensor[(15, 14, 5), float32], Tensor[(1170), float32], Tensor[(360), int64]) */;
    %723 = rsqrt(%719) /* ty=Tensor[(9, 10, 2), float32] */;
    %724 = %722.2;
    (%723, %724, meta[relay.Constant][40] /* ty=Tensor[(12, 30), int64] */)
  };
  %725(%var_2297) /* ty=(Tensor[(9, 10, 2), float32], Tensor[(360), int64], Tensor[(12, 30), int64]) */
}

def @func_1822() -> (Tensor[(15, 14, 8), float64],) {
  %728 = fn () -> (Tensor[(15, 14, 8), float64],) {
    %726 = @func_1022() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 8), float64]) */;
    %727 = %726.1;
    (%727,)
  };
  %728() /* ty=(Tensor[(15, 14, 8), float64],) */
}

def @func_4332(%var_4308: Tensor[(1170), float32]) -> (Tensor[(1170), float64], Tensor[(15, 14, 5), float32]) {
  %729 = @func_1344() /* ty=Tensor[(1170), float32] */;
  %730 = cast(%var_4308, dtype="float64") /* ty=Tensor[(1170), float64] */;
  %731 = shape_of(%729, dtype="int32") /* ty=Tensor[(1), int32] */;
  %732 = cast(%729, dtype="float64") /* ty=Tensor[(1170), float64] */;
  %733 = dyn.reshape(%730, %731, newshape=[]) /* ty=Tensor[(?), float64] */;
  %734 = @func_1568() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32]) */;
  %735 = divide(%732, %733) /* ty=Tensor[(1170), float64] */;
  %736 = %734.0;
  (%735, %736)
}

def @func_4569() -> (Tensor[(15, 14, 5), float32], Tensor[(448, 4), float64], Tensor[(15, 14, 8), float64]) {
  @func_4567() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(448, 4), float64], Tensor[(15, 14, 8), float64]) */
}

def @func_7140() -> (Tensor[(2, 15, 8), float32], Tensor[(15, 14, 5), float32]) {
  @func_7138() /* ty=(Tensor[(2, 15, 8), float32], Tensor[(15, 14, 5), float32]) */
}

def @func_3827() -> (Tensor[(15, 14, 5), float32], Tensor[(14, 8, 2), float64], Tensor[(224, 1), int16], Tensor[(15, 14, 8), float64], Tensor[(15, 14, 5), float32]) {
  %737 = cast(meta[relay.Constant][41] /* ty=Tensor[(224, 1), int16] */, dtype="int16") /* ty=Tensor[(224, 1), int16] */;
  %738 = cast(meta[relay.Constant][41] /* ty=Tensor[(224, 1), int16] */, dtype="int16") /* ty=Tensor[(224, 1), int16] */;
  %739 = reshape(%737, newshape=[14, 8, 2]) /* ty=Tensor[(14, 8, 2), int16] */;
  %740 = reshape(%738, newshape=[14, 8, 2]) /* ty=Tensor[(14, 8, 2), int16] */;
  %741 = @func_310(%739, %740) /* ty=(Tensor[(14, 8, 2), int16], Tensor[(14, 8, 2), float64]) */;
  %742 = @func_2830() /* ty=(Tensor[(15, 14, 8), float64], Tensor[(15, 14, 5), float32]) */;
  %743 = @func_1111() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32]) */;
  %744 = @func_3170() /* ty=Tensor[(15, 14, 5), float32] */;
  %745 = %741.1;
  %746 = %742.0;
  %747 = %743.1;
  (%744, %745, meta[relay.Constant][41] /* ty=Tensor[(224, 1), int16] */, %746, %747)
}

def @func_3071() -> (Tensor[(15, 14, 5), float32],) {
  %748 = @func_1022() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 8), float64]) */;
  %749 = %748.0;
  (%749,)
}

def @func_5803() -> (Tensor[(15, 14, 5), float64],) {
  @func_5801() /* ty=(Tensor[(15, 14, 5), float64],) */
}

def @func_4663() -> (Tensor[(15, 14, 5), float32],) {
  %750 = @func_3115() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %751 = %750.0;
  (%751,)
}

def @func_2884() -> (Tensor[(9, 13, 8), float32], Tensor[(15, 14, 5), float32]) {
  @func_2882() /* ty=(Tensor[(9, 13, 8), float32], Tensor[(15, 14, 5), float32]) */
}

def @func_3731() -> (Tensor[(15, 14, 5), float32], Tensor[(4, 7, 14), float32], Tensor[(15, 14, 5), float32]) {
  %752 = @func_1431() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %753 = cast(meta[relay.Constant][42] /* ty=Tensor[(4, 7, 14), float64] */, dtype="float64") /* ty=Tensor[(4, 7, 14), float64] */;
  %754 = asinh(%753) /* ty=Tensor[(4, 7, 14), float64] */;
  %755 = cast(%754, dtype="float32") /* ty=Tensor[(4, 7, 14), float32] */;
  %756 = @func_1887() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 8), float64]) */;
  %757 = %752.0;
  %758 = acos(%755) /* ty=Tensor[(4, 7, 14), float32] */;
  %759 = %756.0;
  (%757, %758, %759)
}

def @func_1570() -> (Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32]) {
  @func_1568() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32]) */
}

def @func_5539() -> (Tensor[(448, 4), float64],) {
  %762 = fn () -> (Tensor[(448, 4), float64],) {
    %760 = @func_1235() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(13, 10, 9), bool], Tensor[(1170), float32], Tensor[(7, 16, 16), float32], Tensor[(448, 4), float64]) */;
    %761 = %760.4;
    (%761,)
  };
  %762() /* ty=(Tensor[(448, 4), float64],) */
}

def @func_1648(%var_1631: Tensor[(5, 234), float32]) -> (Tensor[(15, 14, 5), float32], Tensor[(5, 234), float32], Tensor[(13, 10, 9), float32]) {
  %763 = cast(%var_1631, dtype="float32") /* ty=Tensor[(5, 234), float32] */;
  %764 = cast(%var_1631, dtype="float32") /* ty=Tensor[(5, 234), float32] */;
  %765 = cast(%var_1631, dtype="float32") /* ty=Tensor[(5, 234), float32] */;
  %766 = reshape(%763, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), float32] */;
  %767 = reshape(%764, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), float32] */;
  %768 = reshape(%765, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), float32] */;
  %769 = @func_441(%766, %767, %768) /* ty=(Tensor[(13, 10, 9), bool], Tensor[(10, 3, 6), bool], Tensor[(180), float32], Tensor[(10, 3, 6), bool], Tensor[(13, 10, 9), bool], Tensor[(14, 8, 2), float64], Tensor[(224), int16], Tensor[(13, 10, 9), uint8], Tensor[(13, 10, 9), uint64], Tensor[(10, 3, 6), bool], Tensor[(10, 3, 6), bool]) */;
  %770 = %769.7;
  %771 = cast(%770, dtype="float64") /* ty=Tensor[(13, 10, 9), float64] */;
  %772 = erf(%771) /* ty=Tensor[(13, 10, 9), float64] */;
  %773 = cast(%772, dtype="float32") /* ty=Tensor[(13, 10, 9), float32] */;
  %774 = @func_1591() /* ty=Tensor[(15, 14, 5), float32] */;
  %775 = atanh(%773) /* ty=Tensor[(13, 10, 9), float32] */;
  (%774, %var_1631, %775)
}

def @func_3748() -> Tensor[(15, 14, 5), float32] {
  @func_3746() /* ty=Tensor[(15, 14, 5), float32] */
}

def @func_164(%var_163: Tensor[(10, 3, 6), float32]) -> (Tensor[(10, 3, 6), bool],) {
  %779 = fn (%var_144: Tensor[(10, 3, 6), float32]) -> (Tensor[(10, 3, 6), bool],) {
    %776 = cast(meta[relay.Constant][43] /* ty=Tensor[(1, 3, 6), float32] */, dtype="bool") /* ty=Tensor[(1, 3, 6), bool] */;
    %777 = cast(%var_144, dtype="bool") /* ty=Tensor[(10, 3, 6), bool] */;
    %778 = greater(%776, %777) /* ty=Tensor[(10, 3, 6), bool] */;
    (%778,)
  };
  %779(%var_163) /* ty=(Tensor[(10, 3, 6), bool],) */
}

def @func_2778(%var_2776: Tensor[(9, 1, 9), float32], %var_2777: Tensor[(9, 16, 9), float32]) -> (Tensor[(9, 16, 9), float32],) {
  %783 = fn (%var_2770: Tensor[(9, 1, 9), float32], %var_2771: Tensor[(9, 16, 9), float32]) -> (Tensor[(9, 16, 9), float32],) {
    %780 = cast(%var_2770, dtype="float32") /* ty=Tensor[(9, 1, 9), float32] */;
    %781 = cast(%var_2771, dtype="float32") /* ty=Tensor[(9, 16, 9), float32] */;
    %782 = mod(%780, %781) /* ty=Tensor[(9, 16, 9), float32] */;
    (%782,)
  };
  %783(%var_2776, %var_2777) /* ty=(Tensor[(9, 16, 9), float32],) */
}

def @func_3242(%var_3240: Tensor[(15, 14, 5), float32]) -> (Tensor[(9, 13, 8), float32], Tensor[(15, 14, 5), int64]) {
  @func_3239(%var_3240) /* ty=(Tensor[(9, 13, 8), float32], Tensor[(15, 14, 5), int64]) */
}

def @func_4958() -> (Tensor[(2, 15, 8), float32], Tensor[(2, 15, 8), float32]) {
  %789 = fn () -> (Tensor[(2, 15, 8), float32], Tensor[(2, 15, 8), float32]) {
    %784 = @func_1986() /* ty=Tensor[(2, 15, 8), float32] */;
    %785 = cast(%784, dtype="float32") /* ty=Tensor[(2, 15, 8), float32] */;
    %786 = cast(%784, dtype="float32") /* ty=Tensor[(2, 15, 8), float32] */;
    %787 = asinh(%785) /* ty=Tensor[(2, 15, 8), float32] */;
    %788 = sigmoid(%786) /* ty=Tensor[(2, 15, 8), float32] */;
    (%787, %788)
  };
  %789() /* ty=(Tensor[(2, 15, 8), float32], Tensor[(2, 15, 8), float32]) */
}

def @func_5640(%var_5631: Tensor[(4, 12, 13), float64]) -> Tensor[(4, 12, 13), float64] {
  %790 = cast(%var_5631, dtype="float64") /* ty=Tensor[(4, 12, 13), float64] */;
  rsqrt(%790) /* ty=Tensor[(4, 12, 13), float64] */
}

def @func_5338() -> (Tensor[(15, 14, 8), float64],) {
  %791 = @func_2260() /* ty=Tensor[(15, 14, 8), float64] */;
  (%791,)
}

def @func_2397(%var_2395: Tensor[(360), int64], %var_2396: Tensor[(4, 4), uint64]) -> (Tensor[(15, 14, 8), float64], Tensor[(15, 14, 5), float32], Tensor[(360), int64], Tensor[(9, 16, 14), bool], Tensor[(4, 4), uint64], Tensor[(2016), uint64]) {
  %804 = fn (%var_2382: Tensor[(360), int64], %var_2386: Tensor[(4, 4), uint64]) -> (Tensor[(15, 14, 8), float64], Tensor[(15, 14, 5), float32], Tensor[(360), int64], Tensor[(9, 16, 14), bool], Tensor[(4, 4), uint64], Tensor[(2016), uint64]) {
    %792 = @func_2248() /* ty=(Tensor[(15, 14, 8), float64],) */;
    %793 = cast(%var_2382, dtype="int64") /* ty=Tensor[(360), int64] */;
    %794 = reshape(%793, newshape=[360]) /* ty=Tensor[(360), int64] */;
    %795 = @func_2086(%794) /* ty=(Tensor[(15, 14, 5), float32], Tensor[(1170), float32], Tensor[(360), int64]) */;
    %796 = cast(%var_2386, dtype="uint64") /* ty=Tensor[(4, 4), uint64] */;
    %797 = cast(meta[relay.Constant][44] /* ty=Tensor[(2016), uint64] */, dtype="uint64") /* ty=Tensor[(2016), uint64] */;
    %798 = reshape(%796, newshape=[1, 16, 1]) /* ty=Tensor[(1, 16, 1), uint64] */;
    %799 = reshape(%797, newshape=[9, 16, 14]) /* ty=Tensor[(9, 16, 14), uint64] */;
    %800 = @func_85(%798, %799) /* ty=(Tensor[(9, 16, 14), uint64], Tensor[(9, 16, 14), bool]) */;
    %801 = %792.0;
    %802 = %795.0;
    %803 = %800.1;
    (%801, %802, %var_2382, %803, %var_2386, meta[relay.Constant][44] /* ty=Tensor[(2016), uint64] */)
  };
  %804(%var_2395, %var_2396) /* ty=(Tensor[(15, 14, 8), float64], Tensor[(15, 14, 5), float32], Tensor[(360), int64], Tensor[(9, 16, 14), bool], Tensor[(4, 4), uint64], Tensor[(2016), uint64]) */
}

def @func_5449(%var_5447: Tensor[(14, 14, 4), float64]) -> Tensor[(14, 14, 4), float64] {
  @func_5446(%var_5447) /* ty=Tensor[(14, 14, 4), float64] */
}

def @func_4385() -> (Tensor[(1170), float32], Tensor[(15, 14, 5), float32], Tensor[(1170), float32]) {
  @func_4383() /* ty=(Tensor[(1170), float32], Tensor[(15, 14, 5), float32], Tensor[(1170), float32]) */
}

def @func_6545() -> (Tensor[(2, 15, 8), float32],) {
  %805 = @func_5951() /* ty=(Tensor[(2, 15, 8), float32],) */;
  %806 = %805.0;
  (%806,)
}

def @func_528(%var_492: Tensor[(15, 2, 13), int8], %var_493: Tensor[(15, 2, 13), int8]) -> (Tensor[(15, 2, 13), float32], Tensor[(15, 2, 13), uint64]) {
  %807 = cast(%var_492, dtype="float32") /* ty=Tensor[(15, 2, 13), float32] */;
  %808 = shape_of(%var_493, dtype="int32") /* ty=Tensor[(3), int32] */;
  %809 = cast(%var_493, dtype="float32") /* ty=Tensor[(15, 2, 13), float32] */;
  %810 = dyn.reshape(%807, %808, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %811 = cast(%var_493, dtype="int8") /* ty=Tensor[(15, 2, 13), int8] */;
  %812 = shape_of(%var_492, dtype="int32") /* ty=Tensor[(3), int32] */;
  %813 = cast(%var_492, dtype="int8") /* ty=Tensor[(15, 2, 13), int8] */;
  %814 = dyn.reshape(%811, %812, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %815 = bitwise_and(%813, %814) /* ty=Tensor[(15, 2, 13), int8] */;
  %816 = cast(%var_492, dtype="bool") /* ty=Tensor[(15, 2, 13), bool] */;
  %817 = shape_of(%var_493, dtype="int32") /* ty=Tensor[(3), int32] */;
  %818 = cast(%var_493, dtype="bool") /* ty=Tensor[(15, 2, 13), bool] */;
  %819 = dyn.reshape(%816, %817, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %820 = not_equal(%818, %819) /* ty=Tensor[(15, 2, 13), bool] */;
  %821 = cast(%820, dtype="uint64") /* ty=Tensor[(15, 2, 13), uint64] */;
  %822 = shape_of(%815, dtype="int32") /* ty=Tensor[(3), int32] */;
  %823 = cast(%815, dtype="uint64") /* ty=Tensor[(15, 2, 13), uint64] */;
  %824 = dyn.reshape(%821, %822, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %825 = divide(%809, %810) /* ty=Tensor[(15, 2, 13), float32] */;
  %826 = maximum(%823, %824) /* ty=Tensor[(15, 2, 13), uint64] */;
  (%825, %826)
}

def @func_3765(%var_3764: Tensor[(6, 15, 2), float64]) -> Tensor[(6, 15, 2), float64] {
  %828 = fn (%var_3755: Tensor[(6, 15, 2), float64]) -> Tensor[(6, 15, 2), float64] {
    %827 = cast(%var_3755, dtype="float64") /* ty=Tensor[(6, 15, 2), float64] */;
    asin(%827) /* ty=Tensor[(6, 15, 2), float64] */
  };
  %828(%var_3764) /* ty=Tensor[(6, 15, 2), float64] */
}

def @func_6830() -> (Tensor[(15, 14, 5), float32], Tensor[(15, 14, 8), float64]) {
  @func_6828() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 8), float64]) */
}

def @func_4022() -> (Tensor[(15, 14, 5), float32], Tensor[(15, 14, 8), float64], Tensor[(1792), float32], Tensor[(576), float64]) {
  @func_4020() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 8), float64], Tensor[(1792), float32], Tensor[(576), float64]) */
}

def @func_4020() -> (Tensor[(15, 14, 5), float32], Tensor[(15, 14, 8), float64], Tensor[(1792), float32], Tensor[(576), float64]) {
  %829 = @func_1022() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 8), float64]) */;
  %830 = @func_1022() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 8), float64]) */;
  %831 = cast(meta[relay.Constant][45] /* ty=Tensor[(576), float64] */, dtype="float64") /* ty=Tensor[(576), float64] */;
  %832 = reshape(%831, newshape=[6, 16, 6]) /* ty=Tensor[(6, 16, 6), float64] */;
  %833 = @func_3865(%832) /* ty=(Tensor[(6, 16, 6), float64], Tensor[(1170), float32], Tensor[(1, 240), float32], Tensor[(1792), float32]) */;
  %834 = %829.0;
  %835 = %830.1;
  %836 = %833.3;
  (%834, %835, %836, meta[relay.Constant][45] /* ty=Tensor[(576), float64] */)
}

def @func_4915() -> (Tensor[(15, 14, 5), float32],) {
  %837 = @func_2956() /* ty=Tensor[(15, 14, 5), float32] */;
  (%837,)
}

def @func_1651(%var_1649: Tensor[(5, 234), float32]) -> (Tensor[(15, 14, 5), float32], Tensor[(5, 234), float32], Tensor[(13, 10, 9), float32]) {
  @func_1648(%var_1649) /* ty=(Tensor[(15, 14, 5), float32], Tensor[(5, 234), float32], Tensor[(13, 10, 9), float32]) */
}

def @func_7179() -> (Tensor[(15, 14, 8), float64],) {
  @func_7177() /* ty=(Tensor[(15, 14, 8), float64],) */
}

def @func_6944(%var_6880: Tensor[(2400), uint64]) -> (Tensor[(15, 14, 8), float64], Tensor[(1170), float32], Tensor[(180), bool], Tensor[(15, 14, 5), float32], Tensor[(15, 16, 10), int8], Tensor[(10, 75), bool], Tensor[(2, 15, 8), float32], Tensor[(2400), bool], Tensor[(2400), float64]) {
  %838 = @func_5600() /* ty=(Tensor[(15, 14, 8), float64],) */;
  %839 = cast(meta[relay.Constant][46] /* ty=Tensor[(180), bool] */, dtype="bool") /* ty=Tensor[(180), bool] */;
  %840 = reshape(%839, newshape=[10, 3, 6]) /* ty=Tensor[(10, 3, 6), bool] */;
  %841 = @func_4816(%840) /* ty=(Tensor[(1170), float32], Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), int64], Tensor[(10, 3, 6), float64], Tensor[(1170), float32]) */;
  %842 = @func_3071() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %843 = cast(%var_6880, dtype="uint64") /* ty=Tensor[(2400), uint64] */;
  %844 = cast(%var_6880, dtype="uint64") /* ty=Tensor[(2400), uint64] */;
  %845 = cast(meta[relay.Constant][47] /* ty=Tensor[(10, 75), bool] */, dtype="bool") /* ty=Tensor[(10, 75), bool] */;
  %846 = reshape(%843, newshape=[15, 16, 10]) /* ty=Tensor[(15, 16, 10), uint64] */;
  %847 = reshape(%844, newshape=[15, 16, 10]) /* ty=Tensor[(15, 16, 10), uint64] */;
  %848 = reshape(%845, newshape=[50, 15]) /* ty=Tensor[(50, 15), bool] */;
  %849 = @func_4258(%846, %847, %848) /* ty=(Tensor[(15, 16, 10), int8], Tensor[(15, 16, 10), float32], Tensor[(5, 15, 10), uint64]) */;
  %850 = @func_4934() /* ty=(Tensor[(2, 15, 8), float32],) */;
  %851 = cast(%var_6880, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %852 = cos(%851) /* ty=Tensor[(2400), float32] */;
  %853 = cast(%852, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %854 = asin(%853) /* ty=Tensor[(2400), float32] */;
  %855 = cast(%852, dtype="bool") /* ty=Tensor[(2400), bool] */;
  %856 = shape_of(%854, dtype="int32") /* ty=Tensor[(1), int32] */;
  %857 = cast(%854, dtype="bool") /* ty=Tensor[(2400), bool] */;
  %858 = dyn.reshape(%855, %856, newshape=[]) /* ty=Tensor[(?), bool] */;
  %859 = cast(%854, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %860 = exp(%859) /* ty=Tensor[(2400), float32] */;
  %861 = cast(%852, dtype="float64") /* ty=Tensor[(2400), float64] */;
  %862 = shape_of(%860, dtype="int32") /* ty=Tensor[(1), int32] */;
  %863 = cast(%860, dtype="float64") /* ty=Tensor[(2400), float64] */;
  %864 = dyn.reshape(%861, %862, newshape=[]) /* ty=Tensor[(?), float64] */;
  %865 = %838.0;
  %866 = %841.0;
  %867 = %842.0;
  %868 = %849.0;
  %869 = %850.0;
  %870 = logical_or(%857, %858) /* ty=Tensor[(2400), bool] */;
  %871 = minimum(%863, %864) /* ty=Tensor[(2400), float64] */;
  (%865, %866, meta[relay.Constant][46] /* ty=Tensor[(180), bool] */, %867, %868, meta[relay.Constant][47] /* ty=Tensor[(10, 75), bool] */, %869, %870, %871)
}

def @func_6329() -> (Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32]) {
  %877 = fn () -> (Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32]) {
    %872 = @func_2937() /* ty=(Tensor[(15, 14, 5), float32],) */;
    %873 = @func_2217() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(12, 10, 3), bool], Tensor[(360), int64]) */;
    %874 = %872.0;
    %875 = @func_2863() /* ty=Tensor[(15, 14, 5), float32] */;
    %876 = %873.0;
    (%874, %875, %876)
  };
  %877() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32]) */
}

def @func_4601() -> (Tensor[(15, 14, 5), float32],) {
  %879 = fn () -> (Tensor[(15, 14, 5), float32],) {
    %878 = @func_3548() /* ty=Tensor[(15, 14, 5), float32] */;
    (%878,)
  };
  %879() /* ty=(Tensor[(15, 14, 5), float32],) */
}

def @func_6764() -> (Tensor[(15, 14, 5), float32],) {
  %881 = fn () -> (Tensor[(15, 14, 5), float32],) {
    %880 = @func_3746() /* ty=Tensor[(15, 14, 5), float32] */;
    (%880,)
  };
  %881() /* ty=(Tensor[(15, 14, 5), float32],) */
}

def @func_5321() -> (Tensor[(448, 4), float64],) {
  @func_5319() /* ty=(Tensor[(448, 4), float64],) */
}

def @func_4066(%var_4065: Tensor[(360), int64]) -> (Tensor[(15, 14, 5), float32], Tensor[(12, 10, 3), bool], Tensor[(360), int64]) {
  %888 = fn (%var_4062: Tensor[(360), int64]) -> (Tensor[(15, 14, 5), float32], Tensor[(12, 10, 3), bool], Tensor[(360), int64]) {
    %882 = @func_2217() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(12, 10, 3), bool], Tensor[(360), int64]) */;
    %883 = cast(%var_4062, dtype="int64") /* ty=Tensor[(360), int64] */;
    %884 = reshape(%883, newshape=[360]) /* ty=Tensor[(360), int64] */;
    %885 = @func_1377(%884) /* ty=(Tensor[(1170), float32], Tensor[(12, 10, 3), bool], Tensor[(360), int64]) */;
    %886 = %882.0;
    %887 = %885.1;
    (%886, %887, %var_4062)
  };
  %888(%var_4065) /* ty=(Tensor[(15, 14, 5), float32], Tensor[(12, 10, 3), bool], Tensor[(360), int64]) */
}

def @func_6370() -> (Tensor[(15, 14, 5), float32],) {
  %889 = @func_4383() /* ty=(Tensor[(1170), float32], Tensor[(15, 14, 5), float32], Tensor[(1170), float32]) */;
  %890 = %889.1;
  (%890,)
}

def @func_4816(%var_4798: Tensor[(10, 3, 6), bool]) -> (Tensor[(1170), float32], Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), int64], Tensor[(10, 3, 6), float64], Tensor[(1170), float32]) {
  %891 = @func_3115() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %892 = %891.0;
  %893 = cast(%892, dtype="float32") /* ty=Tensor[(15, 14, 5), float32] */;
  %894 = reshape(%893, newshape=[15, 14, 5]) /* ty=Tensor[(15, 14, 5), float32] */;
  %895 = @func_3239(%894) /* ty=(Tensor[(9, 13, 8), float32], Tensor[(15, 14, 5), int64]) */;
  %896 = @func_1344() /* ty=Tensor[(1170), float32] */;
  %897 = cast(%896, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %898 = cast(%896, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %899 = cast(%896, dtype="float32") /* ty=Tensor[(1170), float32] */;
  %900 = reshape(%897, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), float32] */;
  %901 = reshape(%898, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), float32] */;
  %902 = reshape(%899, newshape=[13, 10, 9]) /* ty=Tensor[(13, 10, 9), float32] */;
  %903 = @func_441(%900, %901, %902) /* ty=(Tensor[(13, 10, 9), bool], Tensor[(10, 3, 6), bool], Tensor[(180), float32], Tensor[(10, 3, 6), bool], Tensor[(13, 10, 9), bool], Tensor[(14, 8, 2), float64], Tensor[(224), int16], Tensor[(13, 10, 9), uint8], Tensor[(13, 10, 9), uint64], Tensor[(10, 3, 6), bool], Tensor[(10, 3, 6), bool]) */;
  %904 = %903.3;
  %905 = cast(%var_4798, dtype="float64") /* ty=Tensor[(10, 3, 6), float64] */;
  %906 = shape_of(%904, dtype="int32") /* ty=Tensor[(3), int32] */;
  %907 = cast(%904, dtype="float64") /* ty=Tensor[(10, 3, 6), float64] */;
  %908 = dyn.reshape(%905, %906, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %909 = @func_1682() /* ty=(Tensor[(1170), float64], Tensor[(13, 10, 9), bool], Tensor[(1170), float32], Tensor[(72), float32]) */;
  %910 = %895.1;
  %911 = power(%907, %908) /* ty=Tensor[(10, 3, 6), float64] */;
  %912 = %909.2;
  (%896, %892, %910, %911, %912)
}

def @func_808(%var_806: Tensor[(12, 10, 3), int64], %var_807: Tensor[(12, 10, 3), int64]) -> Tensor[(12, 10, 3), bool] {
  %917 = fn (%var_798: Tensor[(12, 10, 3), int64], %var_799: Tensor[(12, 10, 3), int64]) -> Tensor[(12, 10, 3), bool] {
    %913 = cast(%var_799, dtype="bool") /* ty=Tensor[(12, 10, 3), bool] */;
    %914 = shape_of(%var_798, dtype="int32") /* ty=Tensor[(3), int32] */;
    %915 = cast(%var_798, dtype="bool") /* ty=Tensor[(12, 10, 3), bool] */;
    %916 = dyn.reshape(%913, %914, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater_equal(%915, %916) /* ty=Tensor[(12, 10, 3), bool] */
  };
  %917(%var_806, %var_807) /* ty=Tensor[(12, 10, 3), bool] */
}

def @func_7018() -> (Tensor[(15, 14, 8), float64], Tensor[(1792), float32], Tensor[(72), float32], Tensor[(15, 14, 8), float64], Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32], Tensor[(576), float64]) {
  %932 = fn () -> (Tensor[(15, 14, 8), float64], Tensor[(1792), float32], Tensor[(72), float32], Tensor[(15, 14, 8), float64], Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32], Tensor[(576), float64]) {
    %918 = @func_5911() /* ty=(Tensor[(15, 14, 8), float64],) */;
    %919 = cast(meta[relay.Constant][48] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
    %920 = reshape(%919, newshape=[72]) /* ty=Tensor[(72), float32] */;
    %921 = @func_4164(%920) /* ty=(Tensor[(15, 14, 5), float32], Tensor[(72), float32], Tensor[(13, 10, 9), bool], Tensor[(15, 14, 8), float64], Tensor[(4, 7, 2), float64], Tensor[(7, 16, 16), float32], Tensor[(1792), float32]) */;
    %922 = @func_5338() /* ty=(Tensor[(15, 14, 8), float64],) */;
    %923 = @func_2937() /* ty=(Tensor[(15, 14, 5), float32],) */;
    %924 = @func_4600() /* ty=(Tensor[(15, 14, 5), float32],) */;
    %925 = @func_4020() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 8), float64], Tensor[(1792), float32], Tensor[(576), float64]) */;
    %926 = %918.0;
    %927 = %921.6;
    %928 = %922.0;
    %929 = %923.0;
    %930 = %924.0;
    %931 = %925.3;
    (%926, %927, meta[relay.Constant][48] /* ty=Tensor[(72), float32] */, %928, %929, %930, %931)
  };
  %932() /* ty=(Tensor[(15, 14, 8), float64], Tensor[(1792), float32], Tensor[(72), float32], Tensor[(15, 14, 8), float64], Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), float32], Tensor[(576), float64]) */
}

def @func_5566() -> Tensor[(15, 14, 8), float64] {
  %933 = @func_5198() /* ty=(Tensor[(15, 14, 8), float64],) */;
  %933.0
}

def @func_7749(%var_7747: Tensor[(9, 7, 14), bool], %var_7748: Tensor[(9, 7, 14), bool]) -> Tensor[(9, 7, 14), bool] {
  @func_7745(%var_7747, %var_7748) /* ty=Tensor[(9, 7, 14), bool] */
}

def @func_2831() -> (Tensor[(15, 14, 8), float64], Tensor[(15, 14, 5), float32]) {
  %937 = fn () -> (Tensor[(15, 14, 8), float64], Tensor[(15, 14, 5), float32]) {
    %934 = @func_2248() /* ty=(Tensor[(15, 14, 8), float64],) */;
    %935 = %934.0;
    %936 = @func_2480() /* ty=Tensor[(15, 14, 5), float32] */;
    (%935, %936)
  };
  %937() /* ty=(Tensor[(15, 14, 8), float64], Tensor[(15, 14, 5), float32]) */
}

def @main(%var_7848: Tensor[(5, 15, 1), float32]) -> (Tensor[(5, 15, 1), float32],) {
  %938 = cast(%var_7848, dtype="float32") /* ty=Tensor[(5, 15, 1), float32] */;
  %939 = acosh(%938) /* ty=Tensor[(5, 15, 1), float32] */;
  (%939,)
}

def @func_3691() -> (Tensor[(1170), float32],) {
  %940 = @func_1344() /* ty=Tensor[(1170), float32] */;
  (%940,)
}

def @func_7221() -> Tensor[(2, 15, 8), float64] {
  %941 = @func_6545() /* ty=(Tensor[(2, 15, 8), float32],) */;
  %942 = %941.0;
  %943 = cast(%942, dtype="float64") /* ty=Tensor[(2, 15, 8), float64] */;
  log10(%943) /* ty=Tensor[(2, 15, 8), float64] */
}

def @func_5568() -> Tensor[(15, 14, 8), float64] {
  @func_5566() /* ty=Tensor[(15, 14, 8), float64] */
}

def @func_2025() -> (Tensor[(15, 14, 5), float32], Tensor[(9, 13, 8), float32], Tensor[(936), float32]) {
  @func_2023() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(9, 13, 8), float32], Tensor[(936), float32]) */
}

def @func_4819(%var_4817: Tensor[(10, 3, 6), bool]) -> (Tensor[(1170), float32], Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), int64], Tensor[(10, 3, 6), float64], Tensor[(1170), float32]) {
  @func_4816(%var_4817) /* ty=(Tensor[(1170), float32], Tensor[(15, 14, 5), float32], Tensor[(15, 14, 5), int64], Tensor[(10, 3, 6), float64], Tensor[(1170), float32]) */
}

def @func_4567() -> (Tensor[(15, 14, 5), float32], Tensor[(448, 4), float64], Tensor[(15, 14, 8), float64]) {
  %944 = @func_1431() /* ty=(Tensor[(15, 14, 5), float32],) */;
  %945 = @func_1235() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(13, 10, 9), bool], Tensor[(1170), float32], Tensor[(7, 16, 16), float32], Tensor[(448, 4), float64]) */;
  %946 = @func_4020() /* ty=(Tensor[(15, 14, 5), float32], Tensor[(15, 14, 8), float64], Tensor[(1792), float32], Tensor[(576), float64]) */;
  %947 = %944.0;
  %948 = %945.4;
  %949 = %946.1;
  (%947, %948, %949)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen211/build/output.py:2882: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen211/build/output.py", line 2887, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(75) tvmgen_default_fused_acosh_kernel0(float* __restrict__ T_acosh, float* __restrict__ placeholder) {
  T_acosh[(((int)threadIdx.x))] = acoshf(placeholder[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

