==========mod==========
#[version = "0.0.5"]
def @func_8834() -> (Tensor[(7, 4, 2), int32], Tensor[(14, 11, 13), int8], Tensor[(2002), int8], Tensor[(3, 6, 8), float32], Tensor[(144), float32]) {
  %0 = @func_8648() /* ty=(Tensor[(7, 4, 2), int32],) */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(2002), int8] */, dtype="int8") /* ty=Tensor[(2002), int8] */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(2002), int8] */, dtype="int8") /* ty=Tensor[(2002), int8] */;
  %3 = reshape(%1, newshape=[14, 11, 13]) /* ty=Tensor[(14, 11, 13), int8] */;
  %4 = reshape(%2, newshape=[14, 11, 13]) /* ty=Tensor[(14, 11, 13), int8] */;
  %5 = @func_6947(%3, %4) /* ty=(Tensor[(14, 11, 13), int8],) */;
  %6 = cast(meta[relay.Constant][1] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %7 = reshape(%6, newshape=[3, 6, 8]) /* ty=Tensor[(3, 6, 8), float32] */;
  %8 = @func_6426(%7) /* ty=(Tensor[(3, 6, 8), float32],) */;
  %9 = %0.0;
  %10 = %5.0;
  %11 = %8.0;
  (%9, %10, meta[relay.Constant][0] /* ty=Tensor[(2002), int8] */, %11, meta[relay.Constant][1] /* ty=Tensor[(144), float32] */)
}

def @func_4392(%var_4378: Tensor[(7, 14, 8), int64], %var_4379: Tensor[(7, 14, 8), int64]) -> (Tensor[(7, 14, 8), int64],) {
  %12 = cast(%var_4379, dtype="int64") /* ty=Tensor[(7, 14, 8), int64] */;
  %13 = shape_of(%var_4378, dtype="int32") /* ty=Tensor[(3), int32] */;
  %14 = cast(%var_4378, dtype="int64") /* ty=Tensor[(7, 14, 8), int64] */;
  %15 = dyn.reshape(%12, %13, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %16 = logical_xor(%14, %15) /* ty=Tensor[(7, 14, 8), int64] */;
  (%16,)
}

def @func_3852(%var_3792: Tensor[(7, 15, 8), uint64], %var_3793: Tensor[(7, 15, 8), uint64], %var_3800: Tensor[(15, 9), int16], %var_3810: uint32, %var_3825: Tensor[(21, 5), int32], %var_3836: Tensor[(495), float32]) -> (Tensor[(7, 15, 8), bool], Tensor[(10, 5, 15), float64], Tensor[(15, 9), int16], Tensor[(675), int16], Tensor[(336), float32], Tensor[(6, 11, 5), uint16], Tensor[(330), uint8], uint32, Tensor[(11, 11, 14), bool], Tensor[(1694), uint32], Tensor[(21, 5), int32], Tensor[(750), float64], Tensor[(105), int32], Tensor[(100, 2), int64], Tensor[(495), float32], Tensor[(?, 15, 7), float64]) {
  %17 = cast(%var_3793, dtype="bool") /* ty=Tensor[(7, 15, 8), bool] */;
  %18 = shape_of(%var_3792, dtype="int32") /* ty=Tensor[(3), int32] */;
  %19 = cast(%var_3792, dtype="bool") /* ty=Tensor[(7, 15, 8), bool] */;
  %20 = dyn.reshape(%17, %18, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %21 = cast(meta[relay.Constant][2] /* ty=Tensor[(750), float32] */, dtype="float32") /* ty=Tensor[(750), float32] */;
  %22 = cast(%var_3800, dtype="int16") /* ty=Tensor[(15, 9), int16] */;
  %23 = cast(meta[relay.Constant][3] /* ty=Tensor[(675), int16] */, dtype="int16") /* ty=Tensor[(675), int16] */;
  %24 = cast(meta[relay.Constant][4] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %25 = reshape(%21, newshape=[10, 5, 15]) /* ty=Tensor[(10, 5, 15), float32] */;
  %26 = reshape(%22, newshape=[15, 9]) /* ty=Tensor[(15, 9), int16] */;
  %27 = reshape(%23, newshape=[675]) /* ty=Tensor[(675), int16] */;
  %28 = reshape(%24, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %29 = @func_3234(%25, %26, %27, %28) /* ty=(Tensor[(105), float32], Tensor[(15, 9), int16], Tensor[(675), int16], Tensor[(105, 1), int32], Tensor[(336), float32], Tensor[(15, 9, 10), uint64], Tensor[(1350), uint64], Tensor[(10, 5, 15), float32], Tensor[(10, 5, 15), float64]) */;
  %30 = cast(meta[relay.Constant][5] /* ty=Tensor[(330), uint8] */, dtype="uint8") /* ty=Tensor[(330), uint8] */;
  %31 = cast(meta[relay.Constant][4] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %32 = cast(%var_3810, dtype="uint32") /* ty=uint32 */;
  %33 = reshape(%30, newshape=[6, 11, 5]) /* ty=Tensor[(6, 11, 5), uint8] */;
  %34 = reshape(%31, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %35 = reshape(%32, newshape=[]) /* ty=uint32 */;
  %36 = @func_2633(%33, %34, %35) /* ty=(Tensor[(16, 3, 7), float32], Tensor[(336), float32], Tensor[(1, 315), float32], Tensor[(495), float32], Tensor[(?, 15, 7), float64], Tensor[(63), float32], Tensor[(105), int32], Tensor[(6, 11, 5), uint16]) */;
  %37 = cast(%var_3810, dtype="uint32") /* ty=uint32 */;
  %38 = cast(meta[relay.Constant][6] /* ty=Tensor[(1694), uint32] */, dtype="uint32") /* ty=Tensor[(1694), uint32] */;
  %39 = cast(%var_3825, dtype="int32") /* ty=Tensor[(21, 5), int32] */;
  %40 = reshape(%37, newshape=[]) /* ty=uint32 */;
  %41 = reshape(%38, newshape=[11, 11, 14]) /* ty=Tensor[(11, 11, 14), uint32] */;
  %42 = reshape(%39, newshape=[105]) /* ty=Tensor[(105), int32] */;
  %43 = @func_597(%40, %41, %42) /* ty=(Tensor[(11, 11, 14), bool], Tensor[(?, 15, 7), float64], Tensor[(105), int32]) */;
  %44 = cast(meta[relay.Constant][2] /* ty=Tensor[(750), float32] */, dtype="float64") /* ty=Tensor[(750), float64] */;
  %45 = cast(meta[relay.Constant][7] /* ty=Tensor[(100, 2), int64] */, dtype="int64") /* ty=Tensor[(100, 2), int64] */;
  %46 = cast(meta[relay.Constant][7] /* ty=Tensor[(100, 2), int64] */, dtype="int64") /* ty=Tensor[(100, 2), int64] */;
  %47 = cast(%var_3825, dtype="int32") /* ty=Tensor[(21, 5), int32] */;
  %48 = cast(%var_3836, dtype="float32") /* ty=Tensor[(495), float32] */;
  %49 = reshape(%45, newshape=[4, 10, 5]) /* ty=Tensor[(4, 10, 5), int64] */;
  %50 = reshape(%46, newshape=[4, 10, 5]) /* ty=Tensor[(4, 10, 5), int64] */;
  %51 = reshape(%47, newshape=[105]) /* ty=Tensor[(105), int32] */;
  %52 = reshape(%48, newshape=[495]) /* ty=Tensor[(495), float32] */;
  %53 = @func_2679(%49, %50, %51, %52) /* ty=(Tensor[(4, 10, 5), int64], Tensor[(?, 15, 7), float64], Tensor[(105), int32], Tensor[(1, 315), float32], Tensor[(495), float32]) */;
  %54 = cast(%var_3825, dtype="int32") /* ty=Tensor[(21, 5), int32] */;
  %55 = cast(%var_3825, dtype="int32") /* ty=Tensor[(21, 5), int32] */;
  %56 = reshape(%54, newshape=[1, 15, 7]) /* ty=Tensor[(1, 15, 7), int32] */;
  %57 = reshape(%55, newshape=[1, 15, 7]) /* ty=Tensor[(1, 15, 7), int32] */;
  %58 = equal(%19, %20) /* ty=Tensor[(7, 15, 8), bool] */;
  %59 = %29.8;
  %60 = %36.7;
  %61 = %43.0;
  %62 = atanh(%44) /* ty=Tensor[(750), float64] */;
  %63 = %53.2;
  %64 = @func_200(%56, %57) /* ty=Tensor[(?, 15, 7), float64] */;
  (%58, %59, %var_3800, meta[relay.Constant][3] /* ty=Tensor[(675), int16] */, meta[relay.Constant][4] /* ty=Tensor[(336), float32] */, %60, meta[relay.Constant][5] /* ty=Tensor[(330), uint8] */, %var_3810, %61, meta[relay.Constant][6] /* ty=Tensor[(1694), uint32] */, %var_3825, %62, %63, meta[relay.Constant][7] /* ty=Tensor[(100, 2), int64] */, %var_3836, %64)
}

def @func_4814(%var_4786: Tensor[(5, 8, 12), float64], %var_4791: Tensor[(495), float32], %var_4805: uint32, %var_4806: Tensor[(1694), uint32], %var_4811: Tensor[(40), int64]) -> (Tensor[(15, 11, 3), bool], Tensor[(495), float32], Tensor[(5, 8, 12), float32], Tensor[(1694), uint32], Tensor[(490), int8], uint32, Tensor[(1694), uint32], Tensor[(105), int32], Tensor[(4, 1, 10), int64], Tensor[(40), int64]) {
  %65 = cast(%var_4791, dtype="float32") /* ty=Tensor[(495), float32] */;
  %66 = reshape(%65, newshape=[15, 11, 3]) /* ty=Tensor[(15, 11, 3), float32] */;
  %67 = @func_1640(%66) /* ty=(Tensor[(15, 11, 3), bool], Tensor[(1, 315), float32], Tensor[(135), int16], Tensor[(675), int16], Tensor[(105), int32], Tensor[(336), float32]) */;
  %68 = cast(%var_4786, dtype="float64") /* ty=Tensor[(5, 8, 12), float64] */;
  %69 = sinh(%68) /* ty=Tensor[(5, 8, 12), float64] */;
  %70 = cast(meta[relay.Constant][8] /* ty=Tensor[(5, 8, 12), float64] */, dtype="float32") /* ty=Tensor[(5, 8, 12), float32] */;
  %71 = shape_of(%69, dtype="int32") /* ty=Tensor[(3), int32] */;
  %72 = cast(%69, dtype="float32") /* ty=Tensor[(5, 8, 12), float32] */;
  %73 = dyn.reshape(%70, %71, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %74 = cast(meta[relay.Constant][9] /* ty=Tensor[(490), int8] */, dtype="int8") /* ty=Tensor[(490), int8] */;
  %75 = cast(meta[relay.Constant][9] /* ty=Tensor[(490), int8] */, dtype="int8") /* ty=Tensor[(490), int8] */;
  %76 = cast(%var_4805, dtype="uint32") /* ty=uint32 */;
  %77 = cast(%var_4806, dtype="uint32") /* ty=Tensor[(1694), uint32] */;
  %78 = cast(meta[relay.Constant][10] /* ty=Tensor[(105), int32] */, dtype="int32") /* ty=Tensor[(105), int32] */;
  %79 = reshape(%74, newshape=[14, 5, 7]) /* ty=Tensor[(14, 5, 7), int8] */;
  %80 = reshape(%75, newshape=[14, 5, 7]) /* ty=Tensor[(14, 5, 7), int8] */;
  %81 = reshape(%76, newshape=[]) /* ty=uint32 */;
  %82 = reshape(%77, newshape=[1694]) /* ty=Tensor[(1694), uint32] */;
  %83 = reshape(%78, newshape=[105]) /* ty=Tensor[(105), int32] */;
  %84 = @func_4667(%79, %80, %81, %82, %83) /* ty=(Tensor[(14, 5, 7), bool], Tensor[(14, 5, 7), float32], Tensor[(?, 15, 7), float64], uint32, Tensor[(1694), uint32], Tensor[(105), int32]) */;
  %85 = cast(%var_4805, dtype="int64") /* ty=int64 */;
  %86 = cast(%var_4811, dtype="int64") /* ty=Tensor[(40), int64] */;
  %87 = reshape(%85, newshape=[]) /* ty=int64 */;
  %88 = reshape(%86, newshape=[4, 1, 10]) /* ty=Tensor[(4, 1, 10), int64] */;
  %89 = @func_4760(%87, %88) /* ty=(Tensor[(4, 1, 10), int64],) */;
  %90 = %67.0;
  %91 = floor_mod(%72, %73) /* ty=Tensor[(5, 8, 12), float32] */;
  %92 = %84.4;
  %93 = %89.0;
  (%90, %var_4791, %91, %92, meta[relay.Constant][9] /* ty=Tensor[(490), int8] */, %var_4805, %var_4806, meta[relay.Constant][10] /* ty=Tensor[(105), int32] */, %93, %var_4811)
}

def @func_6947(%var_6931: Tensor[(14, 11, 13), int8], %var_6932: Tensor[(14, 11, 13), int8]) -> (Tensor[(14, 11, 13), int8],) {
  %94 = cast(%var_6932, dtype="int8") /* ty=Tensor[(14, 11, 13), int8] */;
  %95 = shape_of(%var_6931, dtype="int32") /* ty=Tensor[(3), int32] */;
  %96 = cast(%var_6931, dtype="int8") /* ty=Tensor[(14, 11, 13), int8] */;
  %97 = dyn.reshape(%94, %95, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %98 = multiply(%96, %97) /* ty=Tensor[(14, 11, 13), int8] */;
  (%98,)
}

def @func_7735(%var_7726: Tensor[(2, 14, 6), int32]) -> Tensor[(2, 14, 6), int32] {
  %99 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 14, 6), int32] */, dtype="int32") /* ty=Tensor[(1, 14, 6), int32] */;
  %100 = cast(%var_7726, dtype="int32") /* ty=Tensor[(2, 14, 6), int32] */;
  minimum(%99, %100) /* ty=Tensor[(2, 14, 6), int32] */
}

def @func_6901(%var_6863: Tensor[(14, 13, 10), bool], %var_6864: Tensor[(14, 13, 10), bool], %var_6873: Tensor[(495), float32]) -> (Tensor[(14, 13, 10), bool], Tensor[(200), int64], Tensor[(40), float64], Tensor[(1, 200), int64], Tensor[(495), float32]) {
  %101 = cast(%var_6864, dtype="bool") /* ty=Tensor[(14, 13, 10), bool] */;
  %102 = shape_of(%var_6863, dtype="int32") /* ty=Tensor[(3), int32] */;
  %103 = cast(%var_6863, dtype="bool") /* ty=Tensor[(14, 13, 10), bool] */;
  %104 = dyn.reshape(%101, %102, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %105 = cast(meta[relay.Constant][12] /* ty=Tensor[(40), float64] */, dtype="float64") /* ty=Tensor[(40), float64] */;
  %106 = cast(meta[relay.Constant][13] /* ty=Tensor[(1, 200), int64] */, dtype="int64") /* ty=Tensor[(1, 200), int64] */;
  %107 = cast(%var_6873, dtype="float32") /* ty=Tensor[(495), float32] */;
  %108 = reshape(%105, newshape=[1, 5, 8]) /* ty=Tensor[(1, 5, 8), float64] */;
  %109 = reshape(%106, newshape=[200]) /* ty=Tensor[(200), int64] */;
  %110 = reshape(%107, newshape=[495]) /* ty=Tensor[(495), float32] */;
  %111 = @func_2741(%108, %109, %110) /* ty=(Tensor[(?, 5, 8), float64], Tensor[(105), int32], Tensor[(200), int64], Tensor[(105), int32], Tensor[(495), float32]) */;
  %112 = logical_or(%103, %104) /* ty=Tensor[(14, 13, 10), bool] */;
  %113 = %111.2;
  (%112, %113, meta[relay.Constant][12] /* ty=Tensor[(40), float64] */, meta[relay.Constant][13] /* ty=Tensor[(1, 200), int64] */, %var_6873)
}

def @func_3234(%var_3194: Tensor[(10, 5, 15), float32], %var_3199: Tensor[(15, 9), int16], %var_3200: Tensor[(675), int16], %var_3202: Tensor[(336), float32]) -> (Tensor[(105), float32], Tensor[(15, 9), int16], Tensor[(675), int16], Tensor[(105, 1), int32], Tensor[(336), float32], Tensor[(15, 9, 10), uint64], Tensor[(1350), uint64], Tensor[(10, 5, 15), float32], Tensor[(10, 5, 15), float64]) {
  %114 = cast(%var_3199, dtype="int16") /* ty=Tensor[(15, 9), int16] */;
  %115 = cast(%var_3200, dtype="int16") /* ty=Tensor[(675), int16] */;
  %116 = cast(meta[relay.Constant][14] /* ty=Tensor[(105, 1), int32] */, dtype="int32") /* ty=Tensor[(105, 1), int32] */;
  %117 = cast(%var_3202, dtype="float32") /* ty=Tensor[(336), float32] */;
  %118 = reshape(%114, newshape=[1, 15, 9]) /* ty=Tensor[(1, 15, 9), int16] */;
  %119 = reshape(%115, newshape=[5, 15, 9]) /* ty=Tensor[(5, 15, 9), int16] */;
  %120 = reshape(%116, newshape=[105]) /* ty=Tensor[(105), int32] */;
  %121 = reshape(%117, newshape=[2, 168]) /* ty=Tensor[(2, 168), float32] */;
  %122 = @func_1430(%118, %119, %120, %121) /* ty=(Tensor[(5, 15, 9), float32], Tensor[(?, 15, 7), float64], Tensor[(63), float32], Tensor[(1, 315), float32], uint32, Tensor[(2, 168), float32], Tensor[(105), float32]) */;
  %123 = cast(meta[relay.Constant][15] /* ty=Tensor[(1350), uint64] */, dtype="uint64") /* ty=Tensor[(1350), uint64] */;
  %124 = cast(meta[relay.Constant][15] /* ty=Tensor[(1350), uint64] */, dtype="uint64") /* ty=Tensor[(1350), uint64] */;
  %125 = reshape(%123, newshape=[15, 9, 10]) /* ty=Tensor[(15, 9, 10), uint64] */;
  %126 = reshape(%124, newshape=[15, 9, 10]) /* ty=Tensor[(15, 9, 10), uint64] */;
  %127 = @func_1006(%125, %126) /* ty=(Tensor[(15, 9, 10), uint64], Tensor[(15, 9, 10), int32]) */;
  %128 = cast(%var_3194, dtype="float32") /* ty=Tensor[(10, 5, 15), float32] */;
  %129 = atanh(%128) /* ty=Tensor[(10, 5, 15), float32] */;
  %130 = cast(%129, dtype="float32") /* ty=Tensor[(10, 5, 15), float32] */;
  %131 = sin(%130) /* ty=Tensor[(10, 5, 15), float32] */;
  %132 = cast(%129, dtype="float32") /* ty=Tensor[(10, 5, 15), float32] */;
  %133 = shape_of(%131, dtype="int32") /* ty=Tensor[(3), int32] */;
  %134 = cast(%131, dtype="float32") /* ty=Tensor[(10, 5, 15), float32] */;
  %135 = dyn.reshape(%132, %133, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %136 = cast(%131, dtype="float64") /* ty=Tensor[(10, 5, 15), float64] */;
  %137 = %122.6;
  %138 = %127.0;
  %139 = mod(%134, %135) /* ty=Tensor[(10, 5, 15), float32] */;
  %140 = sinh(%136) /* ty=Tensor[(10, 5, 15), float64] */;
  (%137, %var_3199, %var_3200, meta[relay.Constant][14] /* ty=Tensor[(105, 1), int32] */, %var_3202, %138, meta[relay.Constant][15] /* ty=Tensor[(1350), uint64] */, %139, %140)
}

def @func_4667(%var_4646: Tensor[(14, 5, 7), int8], %var_4647: Tensor[(14, 5, 7), int8], %var_4662: uint32, %var_4663: Tensor[(1694), uint32], %var_4664: Tensor[(105), int32]) -> (Tensor[(14, 5, 7), bool], Tensor[(14, 5, 7), float32], Tensor[(?, 15, 7), float64], uint32, Tensor[(1694), uint32], Tensor[(105), int32]) {
  %141 = cast(%var_4647, dtype="bool") /* ty=Tensor[(14, 5, 7), bool] */;
  %142 = shape_of(%var_4646, dtype="int32") /* ty=Tensor[(3), int32] */;
  %143 = cast(%var_4646, dtype="bool") /* ty=Tensor[(14, 5, 7), bool] */;
  %144 = dyn.reshape(%141, %142, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %145 = cast(%var_4646, dtype="float32") /* ty=Tensor[(14, 5, 7), float32] */;
  %146 = cast(%var_4662, dtype="uint32") /* ty=uint32 */;
  %147 = cast(%var_4663, dtype="uint32") /* ty=Tensor[(1694), uint32] */;
  %148 = cast(%var_4664, dtype="int32") /* ty=Tensor[(105), int32] */;
  %149 = reshape(%146, newshape=[]) /* ty=uint32 */;
  %150 = reshape(%147, newshape=[11, 11, 14]) /* ty=Tensor[(11, 11, 14), uint32] */;
  %151 = reshape(%148, newshape=[105]) /* ty=Tensor[(105), int32] */;
  %152 = @func_597(%149, %150, %151) /* ty=(Tensor[(11, 11, 14), bool], Tensor[(?, 15, 7), float64], Tensor[(105), int32]) */;
  %153 = not_equal(%143, %144) /* ty=Tensor[(14, 5, 7), bool] */;
  %154 = exp(%145) /* ty=Tensor[(14, 5, 7), float32] */;
  %155 = %152.1;
  (%153, %154, %155, %var_4662, %var_4663, %var_4664)
}

def @func_5028(%var_4915: Tensor[(7, 3, 5), uint16], %var_4955: Tensor[(7, 3, 5), float32], %var_5004: Tensor[(480), float64], %var_5005: Tensor[(495), float32], %var_5008: Tensor[(40), int64], %var_5017: Tensor[(600), uint16]) -> (Tensor[(7, 3, 5), float64], Tensor[(?, 15, 7), float64], Tensor[(7, 3, 5), bool], uint32, Tensor[(480), float64], Tensor[(495), float32], uint32, Tensor[(1694), uint32], Tensor[(40), int64], Tensor[(105), int32], Tensor[(600), uint16], Tensor[(65, 6), float64], Tensor[(49, 6), uint64]) {
  %156 = cast(meta[relay.Constant][16] /* ty=Tensor[(7, 3, 5), uint16] */, dtype="bool") /* ty=Tensor[(7, 3, 5), bool] */;
  %157 = shape_of(%var_4915, dtype="int32") /* ty=Tensor[(3), int32] */;
  %158 = cast(%var_4915, dtype="bool") /* ty=Tensor[(7, 3, 5), bool] */;
  %159 = dyn.reshape(%156, %157, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %160 = less_equal(%158, %159) /* ty=Tensor[(7, 3, 5), bool] */;
  %161 = cast(%160, dtype="float32") /* ty=Tensor[(7, 3, 5), float32] */;
  %162 = log10(%161) /* ty=Tensor[(7, 3, 5), float32] */;
  %163 = cast(%var_4955, dtype="float64") /* ty=Tensor[(7, 3, 5), float64] */;
  %164 = shape_of(%162, dtype="int32") /* ty=Tensor[(3), int32] */;
  %165 = cast(%162, dtype="float64") /* ty=Tensor[(7, 3, 5), float64] */;
  %166 = dyn.reshape(%163, %164, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %167 = cast(%162, dtype="int32") /* ty=Tensor[(7, 3, 5), int32] */;
  %168 = reshape(%167, newshape=[105]) /* ty=Tensor[(105), int32] */;
  %169 = @func_411(%168) /* ty=(Tensor[(3, 11), float64], Tensor[(?, 15, 7), float64], Tensor[(105), int32], Tensor[(?, 15, 7), float64], Tensor[(?, 15, 7), float64]) */;
  %170 = cast(%162, dtype="float32") /* ty=Tensor[(7, 3, 5), float32] */;
  %171 = log(%170) /* ty=Tensor[(7, 3, 5), float32] */;
  %172 = cast(%171, dtype="float64") /* ty=Tensor[(7, 3, 5), float64] */;
  %173 = atanh(%172) /* ty=Tensor[(7, 3, 5), float64] */;
  %174 = cast(%var_4915, dtype="uint32") /* ty=Tensor[(7, 3, 5), uint32] */;
  %175 = shape_of(%160, dtype="int32") /* ty=Tensor[(3), int32] */;
  %176 = cast(%160, dtype="uint32") /* ty=Tensor[(7, 3, 5), uint32] */;
  %177 = dyn.reshape(%174, %175, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %178 = minimum(%176, %177) /* ty=Tensor[(7, 3, 5), uint32] */;
  %179 = cast(%178, dtype="bool") /* ty=Tensor[(7, 3, 5), bool] */;
  %180 = shape_of(%173, dtype="int32") /* ty=Tensor[(3), int32] */;
  %181 = cast(%173, dtype="bool") /* ty=Tensor[(7, 3, 5), bool] */;
  %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %183 = cast(%var_5004, dtype="float64") /* ty=Tensor[(480), float64] */;
  %184 = cast(%var_5005, dtype="float32") /* ty=Tensor[(495), float32] */;
  %185 = cast(meta[relay.Constant][17] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %186 = cast(meta[relay.Constant][18] /* ty=Tensor[(1694), uint32] */, dtype="uint32") /* ty=Tensor[(1694), uint32] */;
  %187 = cast(%var_5008, dtype="int64") /* ty=Tensor[(40), int64] */;
  %188 = reshape(%183, newshape=[5, 8, 12]) /* ty=Tensor[(5, 8, 12), float64] */;
  %189 = reshape(%184, newshape=[495]) /* ty=Tensor[(495), float32] */;
  %190 = reshape(%185, newshape=[]) /* ty=uint32 */;
  %191 = reshape(%186, newshape=[1694]) /* ty=Tensor[(1694), uint32] */;
  %192 = reshape(%187, newshape=[40]) /* ty=Tensor[(40), int64] */;
  %193 = @func_4814(%188, %189, %190, %191, %192) /* ty=(Tensor[(15, 11, 3), bool], Tensor[(495), float32], Tensor[(5, 8, 12), float32], Tensor[(1694), uint32], Tensor[(490), int8], uint32, Tensor[(1694), uint32], Tensor[(105), int32], Tensor[(4, 1, 10), int64], Tensor[(40), int64]) */;
  %194 = cast(%var_5017, dtype="uint16") /* ty=Tensor[(600), uint16] */;
  %195 = cast(%var_5017, dtype="uint16") /* ty=Tensor[(600), uint16] */;
  %196 = cast(meta[relay.Constant][19] /* ty=Tensor[(65, 6), float64] */, dtype="float64") /* ty=Tensor[(65, 6), float64] */;
  %197 = %193.5;
  %198 = cast(%197, dtype="uint64") /* ty=uint64 */;
  %199 = cast(meta[relay.Constant][16] /* ty=Tensor[(7, 3, 5), uint16] */, dtype="int32") /* ty=Tensor[(7, 3, 5), int32] */;
  %200 = cast(meta[relay.Constant][20] /* ty=Tensor[(49, 6), uint64] */, dtype="uint64") /* ty=Tensor[(49, 6), uint64] */;
  %201 = reshape(%194, newshape=[10, 4, 15]) /* ty=Tensor[(10, 4, 15), uint16] */;
  %202 = reshape(%195, newshape=[10, 4, 15]) /* ty=Tensor[(10, 4, 15), uint16] */;
  %203 = reshape(%196, newshape=[5, 78]) /* ty=Tensor[(5, 78), float64] */;
  %204 = reshape(%198, newshape=[]) /* ty=uint64 */;
  %205 = reshape(%199, newshape=[105]) /* ty=Tensor[(105), int32] */;
  %206 = reshape(%200, newshape=[294]) /* ty=Tensor[(294), uint64] */;
  %207 = @func_3668(%201, %202, %203, %204, %205, %206) /* ty=(Tensor[(10, 4, 15), float32], Tensor[(13, 15, 2), uint32], Tensor[(5, 78), float64], Tensor[(105), int32], uint64, Tensor[(160, 1), uint64], Tensor[(105), int32], Tensor[(1694, 1), uint32], Tensor[(294), uint64]) */;
  %208 = mod(%165, %166) /* ty=Tensor[(7, 3, 5), float64] */;
  %209 = %169.4;
  %210 = logical_or(%181, %182) /* ty=Tensor[(7, 3, 5), bool] */;
  %211 = %207.3;
  (%208, %209, %210, %197, %var_5004, %var_5005, meta[relay.Constant][17] /* ty=uint32 */, meta[relay.Constant][18] /* ty=Tensor[(1694), uint32] */, %var_5008, %211, %var_5017, meta[relay.Constant][19] /* ty=Tensor[(65, 6), float64] */, meta[relay.Constant][20] /* ty=Tensor[(49, 6), uint64] */)
}

def @func_5840(%var_5829: Tensor[(3, 12, 1), float64]) -> Tensor[(3, 12, 1), float64] {
  %212 = cast(%var_5829, dtype="float64") /* ty=Tensor[(3, 12, 1), float64] */;
  rsqrt(%212) /* ty=Tensor[(3, 12, 1), float64] */
}

def @func_767(%var_684: uint64, %var_685: Tensor[(8, 2, 10), uint64], %var_699: Tensor[(105), int32], %var_725: Tensor[(1694), uint32], %var_735: Tensor[(6, 7, 7), uint64]) -> (Tensor[(8, 2, 10), bool], Tensor[(3, 11), float64], Tensor[(105), int32], Tensor[(1694), uint32], Tensor[(105), int32], Tensor[(6, 7, 7), float32], Tensor[(?, 15, 7), float64], Tensor[(11, 11, 14), uint8], Tensor[(11, 11, 14), bool]) {
  %213 = cast(%var_684, dtype="bool") /* ty=bool */;
  %214 = cast(%var_685, dtype="bool") /* ty=Tensor[(8, 2, 10), bool] */;
  %215 = cast(%var_699, dtype="int32") /* ty=Tensor[(105), int32] */;
  %216 = reshape(%215, newshape=[105]) /* ty=Tensor[(105), int32] */;
  %217 = @func_411(%216) /* ty=(Tensor[(3, 11), float64], Tensor[(?, 15, 7), float64], Tensor[(105), int32], Tensor[(?, 15, 7), float64], Tensor[(?, 15, 7), float64]) */;
  %218 = cast(%var_684, dtype="uint32") /* ty=uint32 */;
  %219 = cast(%var_725, dtype="uint32") /* ty=Tensor[(1694), uint32] */;
  %220 = cast(%var_699, dtype="int32") /* ty=Tensor[(105), int32] */;
  %221 = reshape(%218, newshape=[]) /* ty=uint32 */;
  %222 = reshape(%219, newshape=[11, 11, 14]) /* ty=Tensor[(11, 11, 14), uint32] */;
  %223 = reshape(%220, newshape=[105]) /* ty=Tensor[(105), int32] */;
  %224 = @func_597(%221, %222, %223) /* ty=(Tensor[(11, 11, 14), bool], Tensor[(?, 15, 7), float64], Tensor[(105), int32]) */;
  %225 = cast(%var_684, dtype="float32") /* ty=float32 */;
  %226 = cast(%var_735, dtype="float32") /* ty=Tensor[(6, 7, 7), float32] */;
  %227 = cast(%var_699, dtype="int32") /* ty=Tensor[(105), int32] */;
  %228 = cast(%var_699, dtype="int32") /* ty=Tensor[(105), int32] */;
  %229 = reshape(%227, newshape=[1, 15, 7]) /* ty=Tensor[(1, 15, 7), int32] */;
  %230 = reshape(%228, newshape=[1, 15, 7]) /* ty=Tensor[(1, 15, 7), int32] */;
  %231 = cast(%var_684, dtype="uint32") /* ty=uint32 */;
  %232 = cast(%var_725, dtype="uint32") /* ty=Tensor[(1694), uint32] */;
  %233 = cast(%var_699, dtype="int32") /* ty=Tensor[(105), int32] */;
  %234 = reshape(%231, newshape=[]) /* ty=uint32 */;
  %235 = reshape(%232, newshape=[11, 11, 14]) /* ty=Tensor[(11, 11, 14), uint32] */;
  %236 = reshape(%233, newshape=[105]) /* ty=Tensor[(105), int32] */;
  %237 = @func_597(%234, %235, %236) /* ty=(Tensor[(11, 11, 14), bool], Tensor[(?, 15, 7), float64], Tensor[(105), int32]) */;
  %238 = %237.0;
  %239 = cast(meta[relay.Constant][21] /* ty=Tensor[(11, 11, 14), bool] */, dtype="uint8") /* ty=Tensor[(11, 11, 14), uint8] */;
  %240 = shape_of(%238, dtype="int32") /* ty=Tensor[(3), int32] */;
  %241 = cast(%238, dtype="uint8") /* ty=Tensor[(11, 11, 14), uint8] */;
  %242 = dyn.reshape(%239, %240, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %243 = cast(%238, dtype="bool") /* ty=Tensor[(11, 11, 14), bool] */;
  %244 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(11, 11, 14), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %245 = cast(meta[relay.Constant][21] /* ty=Tensor[(11, 11, 14), bool] */, dtype="bool") /* ty=Tensor[(11, 11, 14), bool] */;
  %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %247 = greater_equal(%213, %214) /* ty=Tensor[(8, 2, 10), bool] */;
  %248 = %217.0;
  %249 = %224.2;
  %250 = subtract(%225, %226) /* ty=Tensor[(6, 7, 7), float32] */;
  %251 = @func_200(%229, %230) /* ty=Tensor[(?, 15, 7), float64] */;
  %252 = left_shift(%241, %242) /* ty=Tensor[(11, 11, 14), uint8] */;
  %253 = equal(%245, %246) /* ty=Tensor[(11, 11, 14), bool] */;
  (%247, %248, %var_699, %var_725, %249, %250, %251, %252, %253)
}

def @func_7709(%var_7640: Tensor[(840), uint64], %var_7641: Tensor[(135), int16], %var_7643: Tensor[(105), int32], %var_7644: Tensor[(495), float32], %var_7670: Tensor[(672), int32], %var_7671: Tensor[(1694), uint32]) -> (Tensor[(7, 4, 2), int32], Tensor[(100, 2), int64], Tensor[(840), uint64], Tensor[(135), int16], uint32, Tensor[(105), int32], Tensor[(2, 15, 9), float32], Tensor[(90, 3), float32], Tensor[(1, 4, 11), bool], Tensor[(44), bool], Tensor[(672), int32], Tensor[(3360), int32], Tensor[(672), int32], Tensor[(1694), uint32], Tensor[(495), float64]) {
  %254 = @func_7614() /* ty=(Tensor[(7, 4, 2), int32],) */;
  %255 = cast(%var_7640, dtype="uint64") /* ty=Tensor[(840), uint64] */;
  %256 = cast(%var_7640, dtype="uint64") /* ty=Tensor[(840), uint64] */;
  %257 = cast(%var_7641, dtype="int16") /* ty=Tensor[(135), int16] */;
  %258 = cast(meta[relay.Constant][22] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %259 = cast(%var_7643, dtype="int32") /* ty=Tensor[(105), int32] */;
  %260 = cast(%var_7644, dtype="float32") /* ty=Tensor[(495), float32] */;
  %261 = reshape(%255, newshape=[7, 15, 8]) /* ty=Tensor[(7, 15, 8), uint64] */;
  %262 = reshape(%256, newshape=[7, 15, 8]) /* ty=Tensor[(7, 15, 8), uint64] */;
  %263 = reshape(%257, newshape=[15, 9]) /* ty=Tensor[(15, 9), int16] */;
  %264 = reshape(%258, newshape=[]) /* ty=uint32 */;
  %265 = reshape(%259, newshape=[21, 5]) /* ty=Tensor[(21, 5), int32] */;
  %266 = reshape(%260, newshape=[495]) /* ty=Tensor[(495), float32] */;
  %267 = @func_3852(%261, %262, %263, %264, %265, %266) /* ty=(Tensor[(7, 15, 8), bool], Tensor[(10, 5, 15), float64], Tensor[(15, 9), int16], Tensor[(675), int16], Tensor[(336), float32], Tensor[(6, 11, 5), uint16], Tensor[(330), uint8], uint32, Tensor[(11, 11, 14), bool], Tensor[(1694), uint32], Tensor[(21, 5), int32], Tensor[(750), float64], Tensor[(105), int32], Tensor[(100, 2), int64], Tensor[(495), float32], Tensor[(?, 15, 7), float64]) */;
  %268 = cast(meta[relay.Constant][23] /* ty=Tensor[(90, 3), float32] */, dtype="float32") /* ty=Tensor[(90, 3), float32] */;
  %269 = reshape(%268, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), float32] */;
  %270 = cast(meta[relay.Constant][22] /* ty=uint32 */, dtype="bool") /* ty=bool */;
  %271 = cast(meta[relay.Constant][24] /* ty=Tensor[(44), bool] */, dtype="bool") /* ty=Tensor[(44), bool] */;
  %272 = reshape(%270, newshape=[]) /* ty=bool */;
  %273 = reshape(%271, newshape=[1, 4, 11]) /* ty=Tensor[(1, 4, 11), bool] */;
  %274 = @func_1874(%272, %273) /* ty=(Tensor[(1, 4, 11), bool], Tensor[(15, 9, 10), uint64], Tensor[(1350), uint64]) */;
  %275 = cast(meta[relay.Constant][25] /* ty=Tensor[(3360), int32] */, dtype="int32") /* ty=Tensor[(3360), int32] */;
  %276 = cast(%var_7670, dtype="int32") /* ty=Tensor[(672), int32] */;
  %277 = cast(meta[relay.Constant][22] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %278 = cast(%var_7671, dtype="uint32") /* ty=Tensor[(1694), uint32] */;
  %279 = reshape(%275, newshape=[14, 15, 16]) /* ty=Tensor[(14, 15, 16), int32] */;
  %280 = reshape(%276, newshape=[672]) /* ty=Tensor[(672), int32] */;
  %281 = reshape(%277, newshape=[]) /* ty=uint32 */;
  %282 = reshape(%278, newshape=[121, 14]) /* ty=Tensor[(121, 14), uint32] */;
  %283 = @func_7524(%279, %280, %281, %282) /* ty=(Tensor[(14, 15, 16), int32], Tensor[(16, 3, 14), int32], Tensor[(672), int32], uint32, Tensor[(490), int8], uint32, Tensor[(121, 14), uint32], Tensor[(105), int32]) */;
  %284 = cast(%var_7644, dtype="float64") /* ty=Tensor[(495), float64] */;
  %285 = %254.0;
  %286 = %267.13;
  %287 = @func_5627(%269) /* ty=Tensor[(2, 15, 9), float32] */;
  %288 = %274.0;
  %289 = %283.2;
  %290 = atan(%284) /* ty=Tensor[(495), float64] */;
  (%285, %286, %var_7640, %var_7641, meta[relay.Constant][22] /* ty=uint32 */, %var_7643, %287, meta[relay.Constant][23] /* ty=Tensor[(90, 3), float32] */, %288, meta[relay.Constant][24] /* ty=Tensor[(44), bool] */, %289, meta[relay.Constant][25] /* ty=Tensor[(3360), int32] */, %var_7670, %var_7671, %290)
}

def @func_2908(%var_2868: Tensor[(13, 15, 2), float64]) -> (Tensor[(13, 15, 2), float64], Tensor[(13, 15, 2), uint32]) {
  %291 = cast(%var_2868, dtype="float64") /* ty=Tensor[(13, 15, 2), float64] */;
  %292 = cast(meta[relay.Constant][26] /* ty=Tensor[(13, 15, 2), float64] */, dtype="uint32") /* ty=Tensor[(13, 15, 2), uint32] */;
  %293 = shape_of(%var_2868, dtype="int32") /* ty=Tensor[(3), int32] */;
  %294 = cast(%var_2868, dtype="uint32") /* ty=Tensor[(13, 15, 2), uint32] */;
  %295 = dyn.reshape(%292, %293, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %296 = cos(%291) /* ty=Tensor[(13, 15, 2), float64] */;
  %297 = right_shift(%294, %295) /* ty=Tensor[(13, 15, 2), uint32] */;
  (%296, %297)
}

def @func_5526(%var_5521: Tensor[(13, 4, 13), int32]) -> Tensor[(13, 4, 13), int32] {
  %298 = cast(meta[relay.Constant][27] /* ty=Tensor[(13, 4, 13), int32] */, dtype="int32") /* ty=Tensor[(13, 4, 13), int32] */;
  %299 = shape_of(%var_5521, dtype="int32") /* ty=Tensor[(3), int32] */;
  %300 = cast(%var_5521, dtype="int32") /* ty=Tensor[(13, 4, 13), int32] */;
  %301 = dyn.reshape(%298, %299, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  left_shift(%300, %301) /* ty=Tensor[(13, 4, 13), int32] */
}

def @func_5627(%var_5618: Tensor[(2, 15, 9), float32]) -> Tensor[(2, 15, 9), float32] {
  %302 = cast(%var_5618, dtype="float32") /* ty=Tensor[(2, 15, 9), float32] */;
  asin(%302) /* ty=Tensor[(2, 15, 9), float32] */
}

def @func_6636(%var_6626: Tensor[(15, 11, 14), float32]) -> (Tensor[(15, 11, 14), float32], Tensor[(15, 11, 14), bool]) {
  %303 = cast(meta[relay.Constant][28] /* ty=Tensor[(15, 11, 14), float32] */, dtype="float32") /* ty=Tensor[(15, 11, 14), float32] */;
  %304 = shape_of(%var_6626, dtype="int32") /* ty=Tensor[(3), int32] */;
  %305 = cast(%var_6626, dtype="float32") /* ty=Tensor[(15, 11, 14), float32] */;
  %306 = dyn.reshape(%303, %304, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %307 = cast(meta[relay.Constant][28] /* ty=Tensor[(15, 11, 14), float32] */, dtype="bool") /* ty=Tensor[(15, 11, 14), bool] */;
  %308 = shape_of(%var_6626, dtype="int32") /* ty=Tensor[(3), int32] */;
  %309 = cast(%var_6626, dtype="bool") /* ty=Tensor[(15, 11, 14), bool] */;
  %310 = dyn.reshape(%307, %308, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %311 = floor_divide(%305, %306) /* ty=Tensor[(15, 11, 14), float32] */;
  %312 = greater_equal(%309, %310) /* ty=Tensor[(15, 11, 14), bool] */;
  (%311, %312)
}

def @func_2741(%var_2726: Tensor[(1, 5, 8), float64], %var_2736: Tensor[(200), int64], %var_2738: Tensor[(495), float32]) -> (Tensor[(?, 5, 8), float64], Tensor[(105), int32], Tensor[(200), int64], Tensor[(105), int32], Tensor[(495), float32]) {
  %313 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 5, 8), float64] */, dtype="float64") /* ty=Tensor[(1, 5, 8), float64] */;
  %314 = shape_of(%var_2726, dtype="int32") /* ty=Tensor[(3), int32] */;
  %315 = cast(%var_2726, dtype="float64") /* ty=Tensor[(1, 5, 8), float64] */;
  %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %317 = subtract(%315, %316) /* ty=Tensor[(?, 5, 8), float64] */;
  %318 = cast(%317, dtype="float64") /* ty=Tensor[(?, 5, 8), float64] */;
  %319 = cast(%var_2736, dtype="int64") /* ty=Tensor[(200), int64] */;
  %320 = cast(%var_2736, dtype="int64") /* ty=Tensor[(200), int64] */;
  %321 = cast(meta[relay.Constant][30] /* ty=Tensor[(105), int32] */, dtype="int32") /* ty=Tensor[(105), int32] */;
  %322 = cast(%var_2738, dtype="float32") /* ty=Tensor[(495), float32] */;
  %323 = reshape(%319, newshape=[4, 10, 5]) /* ty=Tensor[(4, 10, 5), int64] */;
  %324 = reshape(%320, newshape=[4, 10, 5]) /* ty=Tensor[(4, 10, 5), int64] */;
  %325 = reshape(%321, newshape=[105]) /* ty=Tensor[(105), int32] */;
  %326 = reshape(%322, newshape=[495]) /* ty=Tensor[(495), float32] */;
  %327 = @func_2679(%323, %324, %325, %326) /* ty=(Tensor[(4, 10, 5), int64], Tensor[(?, 15, 7), float64], Tensor[(105), int32], Tensor[(1, 315), float32], Tensor[(495), float32]) */;
  %328 = cos(%318) /* ty=Tensor[(?, 5, 8), float64] */;
  %329 = %327.2;
  (%328, %329, %var_2736, meta[relay.Constant][30] /* ty=Tensor[(105), int32] */, %var_2738)
}

def @func_411(%var_359: Tensor[(105), int32]) -> (Tensor[(3, 11), float64], Tensor[(?, 15, 7), float64], Tensor[(105), int32], Tensor[(?, 15, 7), float64], Tensor[(?, 15, 7), float64]) {
  %330 = cast(meta[relay.Constant][31] /* ty=Tensor[(3, 11), float64] */, dtype="float64") /* ty=Tensor[(3, 11), float64] */;
  %331 = cast(%var_359, dtype="int32") /* ty=Tensor[(105), int32] */;
  %332 = cast(%var_359, dtype="int32") /* ty=Tensor[(105), int32] */;
  %333 = reshape(%331, newshape=[1, 15, 7]) /* ty=Tensor[(1, 15, 7), int32] */;
  %334 = reshape(%332, newshape=[1, 15, 7]) /* ty=Tensor[(1, 15, 7), int32] */;
  %335 = @func_200(%333, %334) /* ty=Tensor[(?, 15, 7), float64] */;
  %336 = cast(%335, dtype="int32") /* ty=Tensor[(?, 15, 7), int32] */;
  %337 = cast(%335, dtype="int32") /* ty=Tensor[(?, 15, 7), int32] */;
  %338 = reshape(%336, newshape=[1, 15, 7]) /* ty=Tensor[(1, 15, 7), int32] */;
  %339 = reshape(%337, newshape=[1, 15, 7]) /* ty=Tensor[(1, 15, 7), int32] */;
  %340 = cast(%var_359, dtype="int32") /* ty=Tensor[(105), int32] */;
  %341 = @func_200(%338, %339) /* ty=Tensor[(?, 15, 7), float64] */;
  %342 = cast(%341, dtype="int32") /* ty=Tensor[(?, 15, 7), int32] */;
  %343 = reshape(%340, newshape=[1, 15, 7]) /* ty=Tensor[(1, 15, 7), int32] */;
  %344 = reshape(%342, newshape=[1, 15, 7]) /* ty=Tensor[(1, 15, 7), int32] */;
  %345 = rsqrt(%330) /* ty=Tensor[(3, 11), float64] */;
  %346 = @func_200(%343, %344) /* ty=Tensor[(?, 15, 7), float64] */;
  (%345, %335, %var_359, %341, %346)
}

def @func_7524(%var_7499: Tensor[(14, 15, 16), int32], %var_7504: Tensor[(672), int32], %var_7512: uint32, %var_7513: Tensor[(121, 14), uint32]) -> (Tensor[(14, 15, 16), int32], Tensor[(16, 3, 14), int32], Tensor[(672), int32], uint32, Tensor[(490), int8], uint32, Tensor[(121, 14), uint32], Tensor[(105), int32]) {
  %347 = cast(meta[relay.Constant][32] /* ty=Tensor[(14, 1, 16), int32] */, dtype="int32") /* ty=Tensor[(14, 1, 16), int32] */;
  %348 = cast(%var_7499, dtype="int32") /* ty=Tensor[(14, 15, 16), int32] */;
  %349 = cast(%var_7504, dtype="int32") /* ty=Tensor[(672), int32] */;
  %350 = reshape(%349, newshape=[16, 3, 14]) /* ty=Tensor[(16, 3, 14), int32] */;
  %351 = @func_6390(%350) /* ty=(Tensor[(16, 3, 14), int32],) */;
  %352 = cast(meta[relay.Constant][33] /* ty=Tensor[(490), int8] */, dtype="int8") /* ty=Tensor[(490), int8] */;
  %353 = cast(meta[relay.Constant][33] /* ty=Tensor[(490), int8] */, dtype="int8") /* ty=Tensor[(490), int8] */;
  %354 = cast(%var_7512, dtype="uint32") /* ty=uint32 */;
  %355 = cast(%var_7513, dtype="uint32") /* ty=Tensor[(121, 14), uint32] */;
  %356 = cast(meta[relay.Constant][34] /* ty=Tensor[(105), int32] */, dtype="int32") /* ty=Tensor[(105), int32] */;
  %357 = reshape(%352, newshape=[14, 5, 7]) /* ty=Tensor[(14, 5, 7), int8] */;
  %358 = reshape(%353, newshape=[14, 5, 7]) /* ty=Tensor[(14, 5, 7), int8] */;
  %359 = reshape(%354, newshape=[]) /* ty=uint32 */;
  %360 = reshape(%355, newshape=[1694]) /* ty=Tensor[(1694), uint32] */;
  %361 = reshape(%356, newshape=[105]) /* ty=Tensor[(105), int32] */;
  %362 = @func_4667(%357, %358, %359, %360, %361) /* ty=(Tensor[(14, 5, 7), bool], Tensor[(14, 5, 7), float32], Tensor[(?, 15, 7), float64], uint32, Tensor[(1694), uint32], Tensor[(105), int32]) */;
  %363 = maximum(%347, %348) /* ty=Tensor[(14, 15, 16), int32] */;
  %364 = %351.0;
  %365 = %362.3;
  (%363, %364, %var_7504, %365, meta[relay.Constant][33] /* ty=Tensor[(490), int8] */, %var_7512, %var_7513, meta[relay.Constant][34] /* ty=Tensor[(105), int32] */)
}

def @func_8115(%var_8087: Tensor[(1350), uint64], %var_8101: uint32, %var_8102: Tensor[(1694), uint32], %var_8110: Tensor[(840), uint64]) -> (Tensor[(7, 4, 2), int32], Tensor[(15, 9, 10), uint64], Tensor[(1350), uint64], Tensor[(11, 11, 14), bool], uint32, Tensor[(1694), uint32], Tensor[(105), int32], uint32, Tensor[(840), uint64], Tensor[(135), int16], Tensor[(495), float32], Tensor[(672), int32]) {
  %366 = @func_7614() /* ty=(Tensor[(7, 4, 2), int32],) */;
  %367 = cast(%var_8087, dtype="uint64") /* ty=Tensor[(1350), uint64] */;
  %368 = cast(%var_8087, dtype="uint64") /* ty=Tensor[(1350), uint64] */;
  %369 = reshape(%367, newshape=[15, 9, 10]) /* ty=Tensor[(15, 9, 10), uint64] */;
  %370 = reshape(%368, newshape=[15, 9, 10]) /* ty=Tensor[(15, 9, 10), uint64] */;
  %371 = @func_1006(%369, %370) /* ty=(Tensor[(15, 9, 10), uint64], Tensor[(15, 9, 10), int32]) */;
  %372 = cast(%var_8101, dtype="uint32") /* ty=uint32 */;
  %373 = cast(%var_8102, dtype="uint32") /* ty=Tensor[(1694), uint32] */;
  %374 = cast(meta[relay.Constant][35] /* ty=Tensor[(105), int32] */, dtype="int32") /* ty=Tensor[(105), int32] */;
  %375 = reshape(%372, newshape=[]) /* ty=uint32 */;
  %376 = reshape(%373, newshape=[11, 11, 14]) /* ty=Tensor[(11, 11, 14), uint32] */;
  %377 = reshape(%374, newshape=[105]) /* ty=Tensor[(105), int32] */;
  %378 = @func_597(%375, %376, %377) /* ty=(Tensor[(11, 11, 14), bool], Tensor[(?, 15, 7), float64], Tensor[(105), int32]) */;
  %379 = cast(%var_8110, dtype="uint64") /* ty=Tensor[(840), uint64] */;
  %380 = cast(meta[relay.Constant][36] /* ty=Tensor[(135), int16] */, dtype="int16") /* ty=Tensor[(135), int16] */;
  %381 = cast(meta[relay.Constant][35] /* ty=Tensor[(105), int32] */, dtype="int32") /* ty=Tensor[(105), int32] */;
  %382 = cast(meta[relay.Constant][37] /* ty=Tensor[(495), float32] */, dtype="float32") /* ty=Tensor[(495), float32] */;
  %383 = cast(meta[relay.Constant][38] /* ty=Tensor[(672), int32] */, dtype="int32") /* ty=Tensor[(672), int32] */;
  %384 = cast(%var_8102, dtype="uint32") /* ty=Tensor[(1694), uint32] */;
  %385 = reshape(%379, newshape=[840]) /* ty=Tensor[(840), uint64] */;
  %386 = reshape(%380, newshape=[135]) /* ty=Tensor[(135), int16] */;
  %387 = reshape(%381, newshape=[105]) /* ty=Tensor[(105), int32] */;
  %388 = reshape(%382, newshape=[495]) /* ty=Tensor[(495), float32] */;
  %389 = reshape(%383, newshape=[672]) /* ty=Tensor[(672), int32] */;
  %390 = reshape(%384, newshape=[1694]) /* ty=Tensor[(1694), uint32] */;
  %391 = @func_7709(%385, %386, %387, %388, %389, %390) /* ty=(Tensor[(7, 4, 2), int32], Tensor[(100, 2), int64], Tensor[(840), uint64], Tensor[(135), int16], uint32, Tensor[(105), int32], Tensor[(2, 15, 9), float32], Tensor[(90, 3), float32], Tensor[(1, 4, 11), bool], Tensor[(44), bool], Tensor[(672), int32], Tensor[(3360), int32], Tensor[(672), int32], Tensor[(1694), uint32], Tensor[(495), float64]) */;
  %392 = %366.0;
  %393 = %371.0;
  %394 = %378.0;
  %395 = %391.4;
  (%392, %393, %var_8087, %394, %var_8101, %var_8102, meta[relay.Constant][35] /* ty=Tensor[(105), int32] */, %395, %var_8110, meta[relay.Constant][36] /* ty=Tensor[(135), int16] */, meta[relay.Constant][37] /* ty=Tensor[(495), float32] */, meta[relay.Constant][38] /* ty=Tensor[(672), int32] */)
}

def @func_7862() -> (Tensor[(7, 4, 2), float64],) {
  %396 = @func_7614() /* ty=(Tensor[(7, 4, 2), int32],) */;
  %397 = %396.0;
  %398 = cast(%397, dtype="float64") /* ty=Tensor[(7, 4, 2), float64] */;
  %399 = sigmoid(%398) /* ty=Tensor[(7, 4, 2), float64] */;
  (%399,)
}

def @func_6481(%var_6465: Tensor[(13, 6, 5), float32]) -> (Tensor[(13, 6, 5), float32], Tensor[(13, 6, 5), uint64]) {
  %400 = cast(meta[relay.Constant][39] /* ty=Tensor[(13, 6, 5), float32] */, dtype="float32") /* ty=Tensor[(13, 6, 5), float32] */;
  %401 = shape_of(%var_6465, dtype="int32") /* ty=Tensor[(3), int32] */;
  %402 = cast(%var_6465, dtype="float32") /* ty=Tensor[(13, 6, 5), float32] */;
  %403 = dyn.reshape(%400, %401, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %404 = cast(meta[relay.Constant][40] /* ty=Tensor[(13, 6, 5), float32] */, dtype="uint64") /* ty=Tensor[(13, 6, 5), uint64] */;
  %405 = shape_of(%var_6465, dtype="int32") /* ty=Tensor[(3), int32] */;
  %406 = cast(%var_6465, dtype="uint64") /* ty=Tensor[(13, 6, 5), uint64] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %408 = floor_mod(%402, %403) /* ty=Tensor[(13, 6, 5), float32] */;
  %409 = bitwise_or(%406, %407) /* ty=Tensor[(13, 6, 5), uint64] */;
  (%408, %409)
}

def @func_1874(%var_1862: bool, %var_1863: Tensor[(1, 4, 11), bool]) -> (Tensor[(1, 4, 11), bool], Tensor[(15, 9, 10), uint64], Tensor[(1350), uint64]) {
  %410 = cast(%var_1862, dtype="bool") /* ty=bool */;
  %411 = cast(%var_1863, dtype="bool") /* ty=Tensor[(1, 4, 11), bool] */;
  %412 = cast(meta[relay.Constant][41] /* ty=Tensor[(1350), uint64] */, dtype="uint64") /* ty=Tensor[(1350), uint64] */;
  %413 = cast(meta[relay.Constant][41] /* ty=Tensor[(1350), uint64] */, dtype="uint64") /* ty=Tensor[(1350), uint64] */;
  %414 = reshape(%412, newshape=[15, 9, 10]) /* ty=Tensor[(15, 9, 10), uint64] */;
  %415 = reshape(%413, newshape=[15, 9, 10]) /* ty=Tensor[(15, 9, 10), uint64] */;
  %416 = @func_1006(%414, %415) /* ty=(Tensor[(15, 9, 10), uint64], Tensor[(15, 9, 10), int32]) */;
  %417 = logical_and(%410, %411) /* ty=Tensor[(1, 4, 11), bool] */;
  %418 = %416.0;
  (%417, %418, meta[relay.Constant][41] /* ty=Tensor[(1350), uint64] */)
}

def @func_7753() -> (Tensor[(7, 4, 2), int32],) {
  %419 = @func_7614() /* ty=(Tensor[(7, 4, 2), int32],) */;
  %420 = %419.0;
  (%420,)
}

def @main() -> (Tensor[(7, 4, 2), float64],) {
  %421 = @func_8205() /* ty=(Tensor[(7, 4, 2), int32],) */;
  %422 = %421.0;
  %423 = cast(meta[relay.Constant][42] /* ty=Tensor[(7, 4, 2), int32] */, dtype="float64") /* ty=Tensor[(7, 4, 2), float64] */;
  %424 = shape_of(%422, dtype="int32") /* ty=Tensor[(3), int32] */;
  %425 = cast(%422, dtype="float64") /* ty=Tensor[(7, 4, 2), float64] */;
  %426 = dyn.reshape(%423, %424, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %427 = power(%425, %426) /* ty=Tensor[(7, 4, 2), float64] */;
  (%427,)
}

def @func_8239() -> Tensor[(7, 4, 2), int32] {
  @func_7980() /* ty=Tensor[(7, 4, 2), int32] */
}

def @func_5598(%var_5573: Tensor[(2, 8, 7), float64], %var_5574: Tensor[(2, 8, 7), float64], %var_5590: Tensor[(1350), uint64]) -> (Tensor[(2, 8, 7), float64], Tensor[(2, 8, 7), float32], Tensor[(15, 9, 10), int32], Tensor[(1350), uint64]) {
  %428 = cast(%var_5574, dtype="float64") /* ty=Tensor[(2, 8, 7), float64] */;
  %429 = shape_of(%var_5573, dtype="int32") /* ty=Tensor[(3), int32] */;
  %430 = cast(%var_5573, dtype="float64") /* ty=Tensor[(2, 8, 7), float64] */;
  %431 = dyn.reshape(%428, %429, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %432 = cast(%var_5573, dtype="float32") /* ty=Tensor[(2, 8, 7), float32] */;
  %433 = cast(%var_5590, dtype="uint64") /* ty=Tensor[(1350), uint64] */;
  %434 = cast(%var_5590, dtype="uint64") /* ty=Tensor[(1350), uint64] */;
  %435 = reshape(%433, newshape=[15, 9, 10]) /* ty=Tensor[(15, 9, 10), uint64] */;
  %436 = reshape(%434, newshape=[15, 9, 10]) /* ty=Tensor[(15, 9, 10), uint64] */;
  %437 = @func_1006(%435, %436) /* ty=(Tensor[(15, 9, 10), uint64], Tensor[(15, 9, 10), int32]) */;
  %438 = mod(%430, %431) /* ty=Tensor[(2, 8, 7), float64] */;
  %439 = exp(%432) /* ty=Tensor[(2, 8, 7), float32] */;
  %440 = %437.1;
  (%438, %439, %440, %var_5590)
}

def @func_7587(%var_7553: Tensor[(1, 2, 15), float64], %var_7573: Tensor[(6, 100), uint16], %var_7576: Tensor[(105), int32], %var_7577: Tensor[(294), uint64]) -> (Tensor[(105), int32], Tensor[(6, 100), uint16], Tensor[(390), float64], Tensor[(105), int32], Tensor[(294), uint64], Tensor[(?, 2, 15), int16]) {
  %441 = cast(%var_7573, dtype="uint16") /* ty=Tensor[(6, 100), uint16] */;
  %442 = cast(%var_7573, dtype="uint16") /* ty=Tensor[(6, 100), uint16] */;
  %443 = cast(meta[relay.Constant][43] /* ty=Tensor[(390), float64] */, dtype="float64") /* ty=Tensor[(390), float64] */;
  %444 = cast(meta[relay.Constant][44] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %445 = cast(%var_7576, dtype="int32") /* ty=Tensor[(105), int32] */;
  %446 = cast(%var_7577, dtype="uint64") /* ty=Tensor[(294), uint64] */;
  %447 = reshape(%441, newshape=[10, 4, 15]) /* ty=Tensor[(10, 4, 15), uint16] */;
  %448 = reshape(%442, newshape=[10, 4, 15]) /* ty=Tensor[(10, 4, 15), uint16] */;
  %449 = reshape(%443, newshape=[5, 78]) /* ty=Tensor[(5, 78), float64] */;
  %450 = reshape(%444, newshape=[]) /* ty=uint64 */;
  %451 = reshape(%445, newshape=[105]) /* ty=Tensor[(105), int32] */;
  %452 = reshape(%446, newshape=[294]) /* ty=Tensor[(294), uint64] */;
  %453 = @func_3668(%447, %448, %449, %450, %451, %452) /* ty=(Tensor[(10, 4, 15), float32], Tensor[(13, 15, 2), uint32], Tensor[(5, 78), float64], Tensor[(105), int32], uint64, Tensor[(160, 1), uint64], Tensor[(105), int32], Tensor[(1694, 1), uint32], Tensor[(294), uint64]) */;
  %454 = cast(%var_7553, dtype="float64") /* ty=Tensor[(1, 2, 15), float64] */;
  %455 = cosh(%454) /* ty=Tensor[(1, 2, 15), float64] */;
  %456 = cast(%var_7553, dtype="uint16") /* ty=Tensor[(1, 2, 15), uint16] */;
  %457 = shape_of(%455, dtype="int32") /* ty=Tensor[(3), int32] */;
  %458 = cast(%455, dtype="uint16") /* ty=Tensor[(1, 2, 15), uint16] */;
  %459 = dyn.reshape(%456, %457, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %460 = multiply(%458, %459) /* ty=Tensor[(?, 2, 15), uint16] */;
  %461 = cast(%460, dtype="int16") /* ty=Tensor[(?, 2, 15), int16] */;
  %462 = cast(meta[relay.Constant][44] /* ty=uint64 */, dtype="int16") /* ty=int16 */;
  %463 = %453.3;
  %464 = left_shift(%461, %462) /* ty=Tensor[(?, 2, 15), int16] */;
  (%463, %var_7573, meta[relay.Constant][43] /* ty=Tensor[(390), float64] */, %var_7576, %var_7577, %464)
}

def @func_6426(%var_6417: Tensor[(3, 6, 8), float32]) -> (Tensor[(3, 6, 8), float32],) {
  %465 = cast(%var_6417, dtype="float32") /* ty=Tensor[(3, 6, 8), float32] */;
  %466 = atan(%465) /* ty=Tensor[(3, 6, 8), float32] */;
  (%466,)
}

def @func_7391(%var_7381: uint16) -> (Tensor[(13, 2, 13), uint16], Tensor[(13, 6, 5), float32], Tensor[(390), float32]) {
  %467 = cast(%var_7381, dtype="uint16") /* ty=uint16 */;
  %468 = cast(meta[relay.Constant][45] /* ty=Tensor[(13, 2, 13), uint16] */, dtype="uint16") /* ty=Tensor[(13, 2, 13), uint16] */;
  %469 = cast(meta[relay.Constant][46] /* ty=Tensor[(390), float32] */, dtype="float32") /* ty=Tensor[(390), float32] */;
  %470 = reshape(%469, newshape=[13, 6, 5]) /* ty=Tensor[(13, 6, 5), float32] */;
  %471 = @func_6481(%470) /* ty=(Tensor[(13, 6, 5), float32], Tensor[(13, 6, 5), uint64]) */;
  %472 = logical_xor(%467, %468) /* ty=Tensor[(13, 2, 13), uint16] */;
  %473 = %471.0;
  (%472, %473, meta[relay.Constant][46] /* ty=Tensor[(390), float32] */)
}

def @func_8613(%var_8595: Tensor[(1, 495), float32]) -> (Tensor[(7, 4, 2), int32], Tensor[(2002), int8], Tensor[(14, 11, 13), float32], Tensor[(200), int64], Tensor[(40), float64], Tensor[(200), int64], Tensor[(1, 495), float32], Tensor[(14, 11, 13), int8]) {
  %474 = @func_8205() /* ty=(Tensor[(7, 4, 2), int32],) */;
  %475 = cast(meta[relay.Constant][47] /* ty=Tensor[(2002), int8] */, dtype="int8") /* ty=Tensor[(2002), int8] */;
  %476 = cast(meta[relay.Constant][47] /* ty=Tensor[(2002), int8] */, dtype="int8") /* ty=Tensor[(2002), int8] */;
  %477 = reshape(%475, newshape=[14, 11, 13]) /* ty=Tensor[(14, 11, 13), int8] */;
  %478 = reshape(%476, newshape=[14, 11, 13]) /* ty=Tensor[(14, 11, 13), int8] */;
  %479 = @func_6947(%477, %478) /* ty=(Tensor[(14, 11, 13), int8],) */;
  %480 = %479.0;
  %481 = cast(%480, dtype="float32") /* ty=Tensor[(14, 11, 13), float32] */;
  %482 = cast(meta[relay.Constant][48] /* ty=Tensor[(40), float64] */, dtype="float64") /* ty=Tensor[(40), float64] */;
  %483 = cast(meta[relay.Constant][49] /* ty=Tensor[(200), int64] */, dtype="int64") /* ty=Tensor[(200), int64] */;
  %484 = cast(%var_8595, dtype="float32") /* ty=Tensor[(1, 495), float32] */;
  %485 = reshape(%482, newshape=[1, 5, 8]) /* ty=Tensor[(1, 5, 8), float64] */;
  %486 = reshape(%483, newshape=[200]) /* ty=Tensor[(200), int64] */;
  %487 = reshape(%484, newshape=[495]) /* ty=Tensor[(495), float32] */;
  %488 = @func_2741(%485, %486, %487) /* ty=(Tensor[(?, 5, 8), float64], Tensor[(105), int32], Tensor[(200), int64], Tensor[(105), int32], Tensor[(495), float32]) */;
  %489 = cast(%480, dtype="int8") /* ty=Tensor[(14, 11, 13), int8] */;
  %490 = log(%481) /* ty=Tensor[(14, 11, 13), float32] */;
  %491 = cast(%490, dtype="int8") /* ty=Tensor[(14, 11, 13), int8] */;
  %492 = reshape(%489, newshape=[14, 11, 13]) /* ty=Tensor[(14, 11, 13), int8] */;
  %493 = reshape(%491, newshape=[14, 11, 13]) /* ty=Tensor[(14, 11, 13), int8] */;
  %494 = @func_6947(%492, %493) /* ty=(Tensor[(14, 11, 13), int8],) */;
  %495 = %474.0;
  %496 = %488.2;
  %497 = %494.0;
  (%495, meta[relay.Constant][47] /* ty=Tensor[(2002), int8] */, %490, %496, meta[relay.Constant][48] /* ty=Tensor[(40), float64] */, meta[relay.Constant][49] /* ty=Tensor[(200), int64] */, %var_8595, %497)
}

def @func_5783(%var_5775: Tensor[(9, 5), float32]) -> Tensor[(9, 5), float32] {
  %498 = cast(%var_5775, dtype="float32") /* ty=Tensor[(9, 5), float32] */;
  erf(%498) /* ty=Tensor[(9, 5), float32] */
}

def @func_8169(%var_8165: Tensor[(1, 490), float32]) -> (Tensor[(7, 4, 2), float32], Tensor[(7, 10, 7), uint16], Tensor[(1, 490), float32], int64, Tensor[(676), int32]) {
  %499 = @func_7753() /* ty=(Tensor[(7, 4, 2), int32],) */;
  %500 = %499.0;
  %501 = cast(%500, dtype="float32") /* ty=Tensor[(7, 4, 2), float32] */;
  %502 = cast(%var_8165, dtype="float32") /* ty=Tensor[(1, 490), float32] */;
  %503 = cast(-5 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %504 = cast(meta[relay.Constant][50] /* ty=Tensor[(676), int32] */, dtype="int32") /* ty=Tensor[(676), int32] */;
  %505 = reshape(%502, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
  %506 = reshape(%503, newshape=[]) /* ty=int64 */;
  %507 = reshape(%504, newshape=[676]) /* ty=Tensor[(676), int32] */;
  %508 = @func_7461(%505, %506, %507) /* ty=(Tensor[(4, 1, 10), int64], Tensor[(40), int64], Tensor[(7, 10, 7), uint16], Tensor[(1, 4, 11), bool], Tensor[(44), bool], Tensor[(13, 4, 13), int32], Tensor[(676), int32]) */;
  %509 = sin(%501) /* ty=Tensor[(7, 4, 2), float32] */;
  %510 = %508.2;
  (%509, %510, %var_8165, -5 /* ty=int64 */, meta[relay.Constant][50] /* ty=Tensor[(676), int32] */)
}

def @func_3668(%var_3617: Tensor[(10, 4, 15), uint16], %var_3618: Tensor[(10, 4, 15), uint16], %var_3645: Tensor[(5, 78), float64], %var_3652: uint64, %var_3654: Tensor[(105), int32], %var_3656: Tensor[(294), uint64]) -> (Tensor[(10, 4, 15), float32], Tensor[(13, 15, 2), uint32], Tensor[(5, 78), float64], Tensor[(105), int32], uint64, Tensor[(160, 1), uint64], Tensor[(105), int32], Tensor[(1694, 1), uint32], Tensor[(294), uint64]) {
  %511 = cast(%var_3618, dtype="uint16") /* ty=Tensor[(10, 4, 15), uint16] */;
  %512 = shape_of(%var_3617, dtype="int32") /* ty=Tensor[(3), int32] */;
  %513 = cast(%var_3617, dtype="uint16") /* ty=Tensor[(10, 4, 15), uint16] */;
  %514 = dyn.reshape(%511, %512, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %515 = right_shift(%513, %514) /* ty=Tensor[(10, 4, 15), uint16] */;
  %516 = cast(%515, dtype="float32") /* ty=Tensor[(10, 4, 15), float32] */;
  %517 = cast(%var_3645, dtype="float64") /* ty=Tensor[(5, 78), float64] */;
  %518 = reshape(%517, newshape=[13, 15, 2]) /* ty=Tensor[(13, 15, 2), float64] */;
  %519 = @func_2908(%518) /* ty=(Tensor[(13, 15, 2), float64], Tensor[(13, 15, 2), uint32]) */;
  %520 = cast(%var_3652, dtype="uint64") /* ty=uint64 */;
  %521 = cast(meta[relay.Constant][51] /* ty=Tensor[(160, 1), uint64] */, dtype="uint64") /* ty=Tensor[(160, 1), uint64] */;
  %522 = cast(%var_3654, dtype="int32") /* ty=Tensor[(105), int32] */;
  %523 = cast(meta[relay.Constant][52] /* ty=Tensor[(1694, 1), uint32] */, dtype="uint32") /* ty=Tensor[(1694, 1), uint32] */;
  %524 = cast(%var_3656, dtype="uint64") /* ty=Tensor[(294), uint64] */;
  %525 = reshape(%520, newshape=[]) /* ty=uint64 */;
  %526 = reshape(%521, newshape=[8, 2, 10]) /* ty=Tensor[(8, 2, 10), uint64] */;
  %527 = reshape(%522, newshape=[105]) /* ty=Tensor[(105), int32] */;
  %528 = reshape(%523, newshape=[1694]) /* ty=Tensor[(1694), uint32] */;
  %529 = reshape(%524, newshape=[6, 7, 7]) /* ty=Tensor[(6, 7, 7), uint64] */;
  %530 = @func_767(%525, %526, %527, %528, %529) /* ty=(Tensor[(8, 2, 10), bool], Tensor[(3, 11), float64], Tensor[(105), int32], Tensor[(1694), uint32], Tensor[(105), int32], Tensor[(6, 7, 7), float32], Tensor[(?, 15, 7), float64], Tensor[(11, 11, 14), uint8], Tensor[(11, 11, 14), bool]) */;
  %531 = asin(%516) /* ty=Tensor[(10, 4, 15), float32] */;
  %532 = %519.1;
  %533 = %530.4;
  (%531, %532, %var_3645, %533, %var_3652, meta[relay.Constant][51] /* ty=Tensor[(160, 1), uint64] */, %var_3654, meta[relay.Constant][52] /* ty=Tensor[(1694, 1), uint32] */, %var_3656)
}

def @func_8205() -> (Tensor[(7, 4, 2), int32],) {
  %534 = @func_7753() /* ty=(Tensor[(7, 4, 2), int32],) */;
  %535 = %534.0;
  (%535,)
}

def @func_7461(%var_7421: Tensor[(7, 10, 7), float32], %var_7425: int64, %var_7454: Tensor[(676), int32]) -> (Tensor[(4, 1, 10), int64], Tensor[(40), int64], Tensor[(7, 10, 7), uint16], Tensor[(1, 4, 11), bool], Tensor[(44), bool], Tensor[(13, 4, 13), int32], Tensor[(676), int32]) {
  %536 = cast(%var_7425, dtype="int64") /* ty=int64 */;
  %537 = cast(meta[relay.Constant][53] /* ty=Tensor[(40), int64] */, dtype="int64") /* ty=Tensor[(40), int64] */;
  %538 = reshape(%536, newshape=[]) /* ty=int64 */;
  %539 = reshape(%537, newshape=[4, 1, 10]) /* ty=Tensor[(4, 1, 10), int64] */;
  %540 = @func_4760(%538, %539) /* ty=(Tensor[(4, 1, 10), int64],) */;
  %541 = cast(%var_7421, dtype="float32") /* ty=Tensor[(7, 10, 7), float32] */;
  %542 = sigmoid(%541) /* ty=Tensor[(7, 10, 7), float32] */;
  %543 = cast(%542, dtype="uint16") /* ty=Tensor[(7, 10, 7), uint16] */;
  %544 = cast(%var_7425, dtype="uint16") /* ty=uint16 */;
  %545 = cast(%var_7425, dtype="bool") /* ty=bool */;
  %546 = cast(meta[relay.Constant][54] /* ty=Tensor[(44), bool] */, dtype="bool") /* ty=Tensor[(44), bool] */;
  %547 = reshape(%545, newshape=[]) /* ty=bool */;
  %548 = reshape(%546, newshape=[1, 4, 11]) /* ty=Tensor[(1, 4, 11), bool] */;
  %549 = @func_1874(%547, %548) /* ty=(Tensor[(1, 4, 11), bool], Tensor[(15, 9, 10), uint64], Tensor[(1350), uint64]) */;
  %550 = cast(%var_7454, dtype="int32") /* ty=Tensor[(676), int32] */;
  %551 = reshape(%550, newshape=[13, 4, 13]) /* ty=Tensor[(13, 4, 13), int32] */;
  %552 = %540.0;
  %553 = maximum(%543, %544) /* ty=Tensor[(7, 10, 7), uint16] */;
  %554 = %549.0;
  %555 = @func_5526(%551) /* ty=Tensor[(13, 4, 13), int32] */;
  (%552, meta[relay.Constant][53] /* ty=Tensor[(40), int64] */, %553, %554, meta[relay.Constant][54] /* ty=Tensor[(44), bool] */, %555, %var_7454)
}

def @func_7980() -> Tensor[(7, 4, 2), int32] {
  %556 = @func_7614() /* ty=(Tensor[(7, 4, 2), int32],) */;
  %556.0
}

def @func_2679(%var_2650: Tensor[(4, 10, 5), int64], %var_2651: Tensor[(4, 10, 5), int64], %var_2660: Tensor[(105), int32], %var_2672: Tensor[(495), float32]) -> (Tensor[(4, 10, 5), int64], Tensor[(?, 15, 7), float64], Tensor[(105), int32], Tensor[(1, 315), float32], Tensor[(495), float32]) {
  %557 = cast(%var_2651, dtype="int64") /* ty=Tensor[(4, 10, 5), int64] */;
  %558 = shape_of(%var_2650, dtype="int32") /* ty=Tensor[(3), int32] */;
  %559 = cast(%var_2650, dtype="int64") /* ty=Tensor[(4, 10, 5), int64] */;
  %560 = dyn.reshape(%557, %558, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %561 = cast(%var_2660, dtype="int32") /* ty=Tensor[(105), int32] */;
  %562 = cast(%var_2660, dtype="int32") /* ty=Tensor[(105), int32] */;
  %563 = reshape(%561, newshape=[1, 15, 7]) /* ty=Tensor[(1, 15, 7), int32] */;
  %564 = reshape(%562, newshape=[1, 15, 7]) /* ty=Tensor[(1, 15, 7), int32] */;
  %565 = cast(%var_2672, dtype="float32") /* ty=Tensor[(495), float32] */;
  %566 = reshape(%565, newshape=[15, 11, 3]) /* ty=Tensor[(15, 11, 3), float32] */;
  %567 = @func_1640(%566) /* ty=(Tensor[(15, 11, 3), bool], Tensor[(1, 315), float32], Tensor[(135), int16], Tensor[(675), int16], Tensor[(105), int32], Tensor[(336), float32]) */;
  %568 = bitwise_xor(%559, %560) /* ty=Tensor[(4, 10, 5), int64] */;
  %569 = @func_200(%563, %564) /* ty=Tensor[(?, 15, 7), float64] */;
  %570 = %567.1;
  (%568, %569, %var_2660, %570, %var_2672)
}

def @func_8408(%var_8403: Tensor[(2, 16, 9), float64], %var_8404: Tensor[(2, 16, 9), float64]) -> Tensor[(2, 16, 9), float64] {
  %571 = cast(%var_8404, dtype="float64") /* ty=Tensor[(2, 16, 9), float64] */;
  %572 = shape_of(%var_8403, dtype="int32") /* ty=Tensor[(3), int32] */;
  %573 = cast(%var_8403, dtype="float64") /* ty=Tensor[(2, 16, 9), float64] */;
  %574 = dyn.reshape(%571, %572, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%573, %574) /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_7892(%var_7887: Tensor[(490), float32], %var_7889: Tensor[(676), int32]) -> (Tensor[(7, 4, 2), int32], Tensor[(1, 4, 11), bool], Tensor[(490), float32], int64, Tensor[(676), int32]) {
  %575 = @func_7614() /* ty=(Tensor[(7, 4, 2), int32],) */;
  %576 = cast(%var_7887, dtype="float32") /* ty=Tensor[(490), float32] */;
  %577 = cast(-5 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %578 = cast(%var_7889, dtype="int32") /* ty=Tensor[(676), int32] */;
  %579 = reshape(%576, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
  %580 = reshape(%577, newshape=[]) /* ty=int64 */;
  %581 = reshape(%578, newshape=[676]) /* ty=Tensor[(676), int32] */;
  %582 = @func_7461(%579, %580, %581) /* ty=(Tensor[(4, 1, 10), int64], Tensor[(40), int64], Tensor[(7, 10, 7), uint16], Tensor[(1, 4, 11), bool], Tensor[(44), bool], Tensor[(13, 4, 13), int32], Tensor[(676), int32]) */;
  %583 = %575.0;
  %584 = %582.3;
  (%583, %584, %var_7887, -5 /* ty=int64 */, %var_7889)
}

def @func_6390(%var_6385: Tensor[(16, 3, 14), int32]) -> (Tensor[(16, 3, 14), int32],) {
  %585 = cast(meta[relay.Constant][55] /* ty=Tensor[(16, 3, 14), int32] */, dtype="int32") /* ty=Tensor[(16, 3, 14), int32] */;
  %586 = shape_of(%var_6385, dtype="int32") /* ty=Tensor[(3), int32] */;
  %587 = cast(%var_6385, dtype="int32") /* ty=Tensor[(16, 3, 14), int32] */;
  %588 = dyn.reshape(%585, %586, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %589 = right_shift(%587, %588) /* ty=Tensor[(16, 3, 14), int32] */;
  (%589,)
}

def @func_8273(%var_8264: Tensor[(7, 4, 2), int32], %var_8270: int64, %var_8271: Tensor[(2, 20), int64]) -> (Tensor[(7, 4, 2), int16], Tensor[(4, 1, 10), int64], int64, Tensor[(2, 20), int64]) {
  %590 = @func_7753() /* ty=(Tensor[(7, 4, 2), int32],) */;
  %591 = %590.0;
  %592 = cast(%var_8264, dtype="int16") /* ty=Tensor[(7, 4, 2), int16] */;
  %593 = shape_of(%591, dtype="int32") /* ty=Tensor[(3), int32] */;
  %594 = cast(%591, dtype="int16") /* ty=Tensor[(7, 4, 2), int16] */;
  %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %596 = cast(%var_8270, dtype="int64") /* ty=int64 */;
  %597 = cast(%var_8271, dtype="int64") /* ty=Tensor[(2, 20), int64] */;
  %598 = reshape(%596, newshape=[]) /* ty=int64 */;
  %599 = reshape(%597, newshape=[4, 1, 10]) /* ty=Tensor[(4, 1, 10), int64] */;
  %600 = @func_4760(%598, %599) /* ty=(Tensor[(4, 1, 10), int64],) */;
  %601 = multiply(%594, %595) /* ty=Tensor[(7, 4, 2), int16] */;
  %602 = %600.0;
  (%601, %602, %var_8270, %var_8271)
}

def @func_8889() -> Tensor[(7, 4, 2), int32] {
  @func_8239() /* ty=Tensor[(7, 4, 2), int32] */
}

def @func_8899() -> (Tensor[(7, 4, 2), int32],) {
  %603 = @func_8205() /* ty=(Tensor[(7, 4, 2), int32],) */;
  %604 = %603.0;
  (%604,)
}

def @func_8760(%var_8735: Tensor[(5, 9, 11), float64]) -> (Tensor[(5, 9, 11), float64], Tensor[(7, 4, 2), int32]) {
  %605 = cast(%var_8735, dtype="float64") /* ty=Tensor[(5, 9, 11), float64] */;
  %606 = @func_8648() /* ty=(Tensor[(7, 4, 2), int32],) */;
  %607 = acosh(%605) /* ty=Tensor[(5, 9, 11), float64] */;
  %608 = %606.0;
  (%607, %608)
}

def @func_5550(%var_5539: Tensor[(14, 8, 8), float32], %var_5540: Tensor[(14, 8, 8), float32]) -> Tensor[(14, 8, 8), float32] {
  %609 = cast(%var_5540, dtype="float32") /* ty=Tensor[(14, 8, 8), float32] */;
  %610 = shape_of(%var_5539, dtype="int32") /* ty=Tensor[(3), int32] */;
  %611 = cast(%var_5539, dtype="float32") /* ty=Tensor[(14, 8, 8), float32] */;
  %612 = dyn.reshape(%609, %610, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  mod(%611, %612) /* ty=Tensor[(14, 8, 8), float32] */
}

def @func_8057() -> (Tensor[(7, 4, 2), float64], Tensor[(7, 4, 2), float64]) {
  %613 = @func_7980() /* ty=Tensor[(7, 4, 2), int32] */;
  %614 = cast(%613, dtype="float64") /* ty=Tensor[(7, 4, 2), float64] */;
  %615 = cos(%614) /* ty=Tensor[(7, 4, 2), float64] */;
  %616 = cast(%615, dtype="float64") /* ty=Tensor[(7, 4, 2), float64] */;
  %617 = cast(%613, dtype="float64") /* ty=Tensor[(7, 4, 2), float64] */;
  %618 = erf(%617) /* ty=Tensor[(7, 4, 2), float64] */;
  %619 = cast(%615, dtype="float64") /* ty=Tensor[(7, 4, 2), float64] */;
  %620 = shape_of(%618, dtype="int32") /* ty=Tensor[(3), int32] */;
  %621 = cast(%618, dtype="float64") /* ty=Tensor[(7, 4, 2), float64] */;
  %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %623 = sinh(%616) /* ty=Tensor[(7, 4, 2), float64] */;
  %624 = floor_mod(%621, %622) /* ty=Tensor[(7, 4, 2), float64] */;
  (%623, %624)
}

def @func_7925() -> Tensor[(7, 4, 2), int32] {
  %625 = @func_7614() /* ty=(Tensor[(7, 4, 2), int32],) */;
  %625.0
}

def @func_7970(%var_7963: Tensor[(10, 11, 3), float32]) -> (Tensor[(10, 11, 3), float32],) {
  %626 = cast(%var_7963, dtype="float32") /* ty=Tensor[(10, 11, 3), float32] */;
  %627 = asinh(%626) /* ty=Tensor[(10, 11, 3), float32] */;
  (%627,)
}

def @func_7485(%var_7470: Tensor[(15, 10, 4), float32]) -> Tensor[(15, 10, 4), float32] {
  %628 = cast(meta[relay.Constant][56] /* ty=Tensor[(15, 10, 4), float32] */, dtype="float32") /* ty=Tensor[(15, 10, 4), float32] */;
  %629 = shape_of(%var_7470, dtype="int32") /* ty=Tensor[(3), int32] */;
  %630 = cast(%var_7470, dtype="float32") /* ty=Tensor[(15, 10, 4), float32] */;
  %631 = dyn.reshape(%628, %629, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%630, %631) /* ty=Tensor[(15, 10, 4), float32] */
}

def @func_1640(%var_1620: Tensor[(15, 11, 3), float32]) -> (Tensor[(15, 11, 3), bool], Tensor[(1, 315), float32], Tensor[(135), int16], Tensor[(675), int16], Tensor[(105), int32], Tensor[(336), float32]) {
  %632 = cast(%var_1620, dtype="float32") /* ty=Tensor[(15, 11, 3), float32] */;
  %633 = erf(%632) /* ty=Tensor[(15, 11, 3), float32] */;
  %634 = cast(%var_1620, dtype="bool") /* ty=Tensor[(15, 11, 3), bool] */;
  %635 = shape_of(%633, dtype="int32") /* ty=Tensor[(3), int32] */;
  %636 = cast(%633, dtype="bool") /* ty=Tensor[(15, 11, 3), bool] */;
  %637 = dyn.reshape(%634, %635, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %638 = cast(meta[relay.Constant][57] /* ty=Tensor[(135), int16] */, dtype="int16") /* ty=Tensor[(135), int16] */;
  %639 = cast(meta[relay.Constant][58] /* ty=Tensor[(675), int16] */, dtype="int16") /* ty=Tensor[(675), int16] */;
  %640 = cast(meta[relay.Constant][59] /* ty=Tensor[(105), int32] */, dtype="int32") /* ty=Tensor[(105), int32] */;
  %641 = cast(meta[relay.Constant][60] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %642 = reshape(%638, newshape=[1, 15, 9]) /* ty=Tensor[(1, 15, 9), int16] */;
  %643 = reshape(%639, newshape=[5, 15, 9]) /* ty=Tensor[(5, 15, 9), int16] */;
  %644 = reshape(%640, newshape=[105]) /* ty=Tensor[(105), int32] */;
  %645 = reshape(%641, newshape=[2, 168]) /* ty=Tensor[(2, 168), float32] */;
  %646 = @func_1430(%642, %643, %644, %645) /* ty=(Tensor[(5, 15, 9), float32], Tensor[(?, 15, 7), float64], Tensor[(63), float32], Tensor[(1, 315), float32], uint32, Tensor[(2, 168), float32], Tensor[(105), float32]) */;
  %647 = logical_and(%636, %637) /* ty=Tensor[(15, 11, 3), bool] */;
  %648 = %646.3;
  (%647, %648, meta[relay.Constant][57] /* ty=Tensor[(135), int16] */, meta[relay.Constant][58] /* ty=Tensor[(675), int16] */, meta[relay.Constant][59] /* ty=Tensor[(105), int32] */, meta[relay.Constant][60] /* ty=Tensor[(336), float32] */)
}

def @func_5955(%var_5847: Tensor[(4, 4, 9), float64], %var_5856: Tensor[(44), bool], %var_5865: Tensor[(676), int32], %var_5871: Tensor[(44), bool], %var_5925: Tensor[(36), float64], %var_5929: Tensor[(165, 3), float32], %var_5943: Tensor[(750), float32]) -> (Tensor[(4, 4, 9), bool], Tensor[(1, 4, 11), bool], Tensor[(13, 4, 13), int32], Tensor[(105), int32], Tensor[(44), int64], Tensor[(?, 15, 7), int16], Tensor[(3, 12, 1), float64], Tensor[(36), float64], Tensor[(165, 3), float32], Tensor[(15, 11, 3), bool], Tensor[(10, 5, 15), float32], Tensor[(750), float32], Tensor[(135), int16], Tensor[(675), int16], Tensor[(336), float32], Tensor[(676), float32]) {
  %649 = cast(%var_5847, dtype="bool") /* ty=Tensor[(4, 4, 9), bool] */;
  %650 = shape_of(meta[relay.Constant][61] /* ty=Tensor[(4, 4, 9), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %651 = cast(meta[relay.Constant][61] /* ty=Tensor[(4, 4, 9), float64] */, dtype="bool") /* ty=Tensor[(4, 4, 9), bool] */;
  %652 = dyn.reshape(%649, %650, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %653 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %654 = cast(%var_5856, dtype="bool") /* ty=Tensor[(44), bool] */;
  %655 = reshape(%653, newshape=[]) /* ty=bool */;
  %656 = reshape(%654, newshape=[1, 4, 11]) /* ty=Tensor[(1, 4, 11), bool] */;
  %657 = @func_1874(%655, %656) /* ty=(Tensor[(1, 4, 11), bool], Tensor[(15, 9, 10), uint64], Tensor[(1350), uint64]) */;
  %658 = cast(%var_5865, dtype="int32") /* ty=Tensor[(676), int32] */;
  %659 = reshape(%658, newshape=[13, 4, 13]) /* ty=Tensor[(13, 4, 13), int32] */;
  %660 = cast(%var_5871, dtype="int64") /* ty=Tensor[(44), int64] */;
  %661 = shape_of(%var_5856, dtype="int32") /* ty=Tensor[(1), int32] */;
  %662 = cast(%var_5856, dtype="int64") /* ty=Tensor[(44), int64] */;
  %663 = dyn.reshape(%660, %661, newshape=[]) /* ty=Tensor[(?), int64] */;
  %664 = cast(meta[relay.Constant][62] /* ty=Tensor[(105), int32] */, dtype="int32") /* ty=Tensor[(105), int32] */;
  %665 = reshape(%664, newshape=[105]) /* ty=Tensor[(105), int32] */;
  %666 = @func_411(%665) /* ty=(Tensor[(3, 11), float64], Tensor[(?, 15, 7), float64], Tensor[(105), int32], Tensor[(?, 15, 7), float64], Tensor[(?, 15, 7), float64]) */;
  %667 = %666.4;
  %668 = cast(%667, dtype="int16") /* ty=Tensor[(?, 15, 7), int16] */;
  %669 = cast(False /* ty=bool */, dtype="int16") /* ty=int16 */;
  %670 = cast(%var_5925, dtype="float64") /* ty=Tensor[(36), float64] */;
  %671 = reshape(%670, newshape=[3, 12, 1]) /* ty=Tensor[(3, 12, 1), float64] */;
  %672 = cast(%var_5929, dtype="float32") /* ty=Tensor[(165, 3), float32] */;
  %673 = reshape(%672, newshape=[15, 11, 3]) /* ty=Tensor[(15, 11, 3), float32] */;
  %674 = @func_1640(%673) /* ty=(Tensor[(15, 11, 3), bool], Tensor[(1, 315), float32], Tensor[(135), int16], Tensor[(675), int16], Tensor[(105), int32], Tensor[(336), float32]) */;
  %675 = %674.0;
  %676 = cast(%675, dtype="bool") /* ty=Tensor[(15, 11, 3), bool] */;
  %677 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %678 = cast(%var_5943, dtype="float32") /* ty=Tensor[(750), float32] */;
  %679 = cast(meta[relay.Constant][63] /* ty=Tensor[(135), int16] */, dtype="int16") /* ty=Tensor[(135), int16] */;
  %680 = cast(meta[relay.Constant][64] /* ty=Tensor[(675), int16] */, dtype="int16") /* ty=Tensor[(675), int16] */;
  %681 = cast(meta[relay.Constant][65] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %682 = reshape(%678, newshape=[10, 5, 15]) /* ty=Tensor[(10, 5, 15), float32] */;
  %683 = reshape(%679, newshape=[15, 9]) /* ty=Tensor[(15, 9), int16] */;
  %684 = reshape(%680, newshape=[675]) /* ty=Tensor[(675), int16] */;
  %685 = reshape(%681, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %686 = @func_3234(%682, %683, %684, %685) /* ty=(Tensor[(105), float32], Tensor[(15, 9), int16], Tensor[(675), int16], Tensor[(105, 1), int32], Tensor[(336), float32], Tensor[(15, 9, 10), uint64], Tensor[(1350), uint64], Tensor[(10, 5, 15), float32], Tensor[(10, 5, 15), float64]) */;
  %687 = cast(%var_5865, dtype="float32") /* ty=Tensor[(676), float32] */;
  %688 = exp(%687) /* ty=Tensor[(676), float32] */;
  %689 = cast(%688, dtype="float32") /* ty=Tensor[(676), float32] */;
  %690 = less(%651, %652) /* ty=Tensor[(4, 4, 9), bool] */;
  %691 = %657.0;
  %692 = @func_5526(%659) /* ty=Tensor[(13, 4, 13), int32] */;
  %693 = bitwise_and(%662, %663) /* ty=Tensor[(44), int64] */;
  %694 = logical_xor(%668, %669) /* ty=Tensor[(?, 15, 7), int16] */;
  %695 = @func_5840(%671) /* ty=Tensor[(3, 12, 1), float64] */;
  %696 = not_equal(%676, %677) /* ty=Tensor[(15, 11, 3), bool] */;
  %697 = %686.7;
  %698 = log10(%689) /* ty=Tensor[(676), float32] */;
  (%690, %691, %692, meta[relay.Constant][62] /* ty=Tensor[(105), int32] */, %693, %694, %695, %var_5925, %var_5929, %696, %697, %var_5943, meta[relay.Constant][63] /* ty=Tensor[(135), int16] */, meta[relay.Constant][64] /* ty=Tensor[(675), int16] */, meta[relay.Constant][65] /* ty=Tensor[(336), float32] */, %698)
}

def @func_597(%var_532: uint32, %var_533: Tensor[(11, 11, 14), uint32], %var_583: Tensor[(105), int32]) -> (Tensor[(11, 11, 14), bool], Tensor[(?, 15, 7), float64], Tensor[(105), int32]) {
  %699 = cast(%var_532, dtype="bool") /* ty=bool */;
  %700 = cast(%var_533, dtype="bool") /* ty=Tensor[(11, 11, 14), bool] */;
  %701 = cast(%var_583, dtype="int32") /* ty=Tensor[(105), int32] */;
  %702 = cast(%var_583, dtype="int32") /* ty=Tensor[(105), int32] */;
  %703 = reshape(%701, newshape=[1, 15, 7]) /* ty=Tensor[(1, 15, 7), int32] */;
  %704 = reshape(%702, newshape=[1, 15, 7]) /* ty=Tensor[(1, 15, 7), int32] */;
  %705 = less(%699, %700) /* ty=Tensor[(11, 11, 14), bool] */;
  %706 = @func_200(%703, %704) /* ty=Tensor[(?, 15, 7), float64] */;
  (%705, %706, %var_583)
}

def @func_1104(%var_1092: Tensor[(16, 3, 7), float32]) -> Tensor[(16, 3, 7), float32] {
  %707 = cast(%var_1092, dtype="float32") /* ty=Tensor[(16, 3, 7), float32] */;
  rsqrt(%707) /* ty=Tensor[(16, 3, 7), float32] */
}

def @func_1006(%var_966: Tensor[(15, 9, 10), uint64], %var_967: Tensor[(15, 9, 10), uint64]) -> (Tensor[(15, 9, 10), uint64], Tensor[(15, 9, 10), int32]) {
  %708 = cast(%var_967, dtype="uint64") /* ty=Tensor[(15, 9, 10), uint64] */;
  %709 = shape_of(%var_966, dtype="int32") /* ty=Tensor[(3), int32] */;
  %710 = cast(%var_966, dtype="uint64") /* ty=Tensor[(15, 9, 10), uint64] */;
  %711 = dyn.reshape(%708, %709, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %712 = cast(%var_967, dtype="int32") /* ty=Tensor[(15, 9, 10), int32] */;
  %713 = shape_of(%var_966, dtype="int32") /* ty=Tensor[(3), int32] */;
  %714 = cast(%var_966, dtype="int32") /* ty=Tensor[(15, 9, 10), int32] */;
  %715 = dyn.reshape(%712, %713, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %716 = bitwise_xor(%710, %711) /* ty=Tensor[(15, 9, 10), uint64] */;
  %717 = bitwise_or(%714, %715) /* ty=Tensor[(15, 9, 10), int32] */;
  (%716, %717)
}

def @func_5756(%var_5697: Tensor[(11, 11, 3), uint32], %var_5708: Tensor[(7, 15), int32], %var_5710: Tensor[(336), float32]) -> (Tensor[(11, 11, 3), uint32], Tensor[(315), float32], Tensor[(7, 15), int32], Tensor[(63), float64], Tensor[(336), float64], Tensor[(3, 11), float64]) {
  %718 = cast(meta[relay.Constant][66] /* ty=Tensor[(11, 11, 3), uint32] */, dtype="uint32") /* ty=Tensor[(11, 11, 3), uint32] */;
  %719 = shape_of(%var_5697, dtype="int32") /* ty=Tensor[(3), int32] */;
  %720 = cast(%var_5697, dtype="uint32") /* ty=Tensor[(11, 11, 3), uint32] */;
  %721 = dyn.reshape(%718, %719, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %722 = cast(meta[relay.Constant][68] /* ty=Tensor[(63), float32] */, dtype="float64") /* ty=Tensor[(63), float64] */;
  %723 = cast(meta[relay.Constant][69] /* ty=uint32 */, dtype="float64") /* ty=float64 */;
  %724 = cast(meta[relay.Constant][68] /* ty=Tensor[(63), float32] */, dtype="float32") /* ty=Tensor[(63), float32] */;
  %725 = cast(meta[relay.Constant][67] /* ty=Tensor[(315), float32] */, dtype="float32") /* ty=Tensor[(315), float32] */;
  %726 = cast(%var_5708, dtype="int32") /* ty=Tensor[(7, 15), int32] */;
  %727 = cast(meta[relay.Constant][69] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %728 = cast(%var_5710, dtype="float32") /* ty=Tensor[(336), float32] */;
  %729 = reshape(%724, newshape=[9, 1, 7]) /* ty=Tensor[(9, 1, 7), float32] */;
  %730 = reshape(%725, newshape=[9, 5, 7]) /* ty=Tensor[(9, 5, 7), float32] */;
  %731 = reshape(%726, newshape=[105, 1]) /* ty=Tensor[(105, 1), int32] */;
  %732 = reshape(%727, newshape=[]) /* ty=uint32 */;
  %733 = reshape(%728, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %734 = @func_1354(%729, %730, %731, %732, %733) /* ty=(Tensor[(?, 15, 7), float64], Tensor[(105, 1), int32], Tensor[(?, 15, 7), float64], uint32, Tensor[(1694), uint32], Tensor[(16, 3, 7), float32], Tensor[(336), float32], Tensor[(9, 5, 7), bool]) */;
  %735 = %734.6;
  %736 = cast(%735, dtype="float64") /* ty=Tensor[(336), float64] */;
  %737 = shape_of(%var_5710, dtype="int32") /* ty=Tensor[(1), int32] */;
  %738 = cast(%var_5710, dtype="float64") /* ty=Tensor[(336), float64] */;
  %739 = dyn.reshape(%736, %737, newshape=[]) /* ty=Tensor[(?), float64] */;
  %740 = cast(%var_5708, dtype="int32") /* ty=Tensor[(7, 15), int32] */;
  %741 = reshape(%740, newshape=[105]) /* ty=Tensor[(105), int32] */;
  %742 = @func_411(%741) /* ty=(Tensor[(3, 11), float64], Tensor[(?, 15, 7), float64], Tensor[(105), int32], Tensor[(?, 15, 7), float64], Tensor[(?, 15, 7), float64]) */;
  %743 = add(%720, %721) /* ty=Tensor[(11, 11, 3), uint32] */;
  %744 = floor_mod(%722, %723) /* ty=Tensor[(63), float64] */;
  %745 = floor_divide(%738, %739) /* ty=Tensor[(336), float64] */;
  %746 = %742.0;
  (%743, meta[relay.Constant][67] /* ty=Tensor[(315), float32] */, %var_5708, %744, %745, %746)
}

def @func_7814() -> Tensor[(8, 1, 15), float32] {
  %747 = cast(meta[relay.Constant][70] /* ty=Tensor[(8, 1, 15), float32] */, dtype="float32") /* ty=Tensor[(8, 1, 15), float32] */;
  erf(%747) /* ty=Tensor[(8, 1, 15), float32] */
}

def @func_1430(%var_1401: Tensor[(1, 15, 9), int16], %var_1402: Tensor[(5, 15, 9), int16], %var_1420: Tensor[(105), int32], %var_1422: Tensor[(2, 168), float32]) -> (Tensor[(5, 15, 9), float32], Tensor[(?, 15, 7), float64], Tensor[(63), float32], Tensor[(1, 315), float32], uint32, Tensor[(2, 168), float32], Tensor[(105), float32]) {
  %748 = cast(%var_1401, dtype="bool") /* ty=Tensor[(1, 15, 9), bool] */;
  %749 = cast(%var_1402, dtype="bool") /* ty=Tensor[(5, 15, 9), bool] */;
  %750 = not_equal(%748, %749) /* ty=Tensor[(5, 15, 9), bool] */;
  %751 = cast(%750, dtype="float32") /* ty=Tensor[(5, 15, 9), float32] */;
  %752 = cast(meta[relay.Constant][71] /* ty=Tensor[(63), float32] */, dtype="float32") /* ty=Tensor[(63), float32] */;
  %753 = cast(meta[relay.Constant][72] /* ty=Tensor[(1, 315), float32] */, dtype="float32") /* ty=Tensor[(1, 315), float32] */;
  %754 = cast(%var_1420, dtype="int32") /* ty=Tensor[(105), int32] */;
  %755 = cast(meta[relay.Constant][73] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %756 = cast(%var_1422, dtype="float32") /* ty=Tensor[(2, 168), float32] */;
  %757 = reshape(%752, newshape=[9, 1, 7]) /* ty=Tensor[(9, 1, 7), float32] */;
  %758 = reshape(%753, newshape=[9, 5, 7]) /* ty=Tensor[(9, 5, 7), float32] */;
  %759 = reshape(%754, newshape=[105, 1]) /* ty=Tensor[(105, 1), int32] */;
  %760 = reshape(%755, newshape=[]) /* ty=uint32 */;
  %761 = reshape(%756, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %762 = @func_1354(%757, %758, %759, %760, %761) /* ty=(Tensor[(?, 15, 7), float64], Tensor[(105, 1), int32], Tensor[(?, 15, 7), float64], uint32, Tensor[(1694), uint32], Tensor[(16, 3, 7), float32], Tensor[(336), float32], Tensor[(9, 5, 7), bool]) */;
  %763 = cast(%var_1420, dtype="float32") /* ty=Tensor[(105), float32] */;
  %764 = asinh(%751) /* ty=Tensor[(5, 15, 9), float32] */;
  %765 = %762.0;
  %766 = acosh(%763) /* ty=Tensor[(105), float32] */;
  (%764, %765, meta[relay.Constant][71] /* ty=Tensor[(63), float32] */, meta[relay.Constant][72] /* ty=Tensor[(1, 315), float32] */, meta[relay.Constant][73] /* ty=uint32 */, %var_1422, %766)
}

def @func_1354(%var_1291: Tensor[(9, 1, 7), float32], %var_1292: Tensor[(9, 5, 7), float32], %var_1312: Tensor[(105, 1), int32], %var_1326: uint32, %var_1341: Tensor[(336), float32]) -> (Tensor[(?, 15, 7), float64], Tensor[(105, 1), int32], Tensor[(?, 15, 7), float64], uint32, Tensor[(1694), uint32], Tensor[(16, 3, 7), float32], Tensor[(336), float32], Tensor[(9, 5, 7), bool]) {
  %767 = cast(%var_1312, dtype="int32") /* ty=Tensor[(105, 1), int32] */;
  %768 = cast(%var_1312, dtype="int32") /* ty=Tensor[(105, 1), int32] */;
  %769 = reshape(%767, newshape=[1, 15, 7]) /* ty=Tensor[(1, 15, 7), int32] */;
  %770 = reshape(%768, newshape=[1, 15, 7]) /* ty=Tensor[(1, 15, 7), int32] */;
  %771 = cast(%var_1326, dtype="uint32") /* ty=uint32 */;
  %772 = cast(meta[relay.Constant][74] /* ty=Tensor[(1694), uint32] */, dtype="uint32") /* ty=Tensor[(1694), uint32] */;
  %773 = cast(%var_1312, dtype="int32") /* ty=Tensor[(105, 1), int32] */;
  %774 = reshape(%771, newshape=[]) /* ty=uint32 */;
  %775 = reshape(%772, newshape=[11, 11, 14]) /* ty=Tensor[(11, 11, 14), uint32] */;
  %776 = reshape(%773, newshape=[105]) /* ty=Tensor[(105), int32] */;
  %777 = @func_597(%774, %775, %776) /* ty=(Tensor[(11, 11, 14), bool], Tensor[(?, 15, 7), float64], Tensor[(105), int32]) */;
  %778 = cast(%var_1341, dtype="float32") /* ty=Tensor[(336), float32] */;
  %779 = reshape(%778, newshape=[16, 3, 7]) /* ty=Tensor[(16, 3, 7), float32] */;
  %780 = cast(%var_1291, dtype="bool") /* ty=Tensor[(9, 1, 7), bool] */;
  %781 = cast(%var_1292, dtype="bool") /* ty=Tensor[(9, 5, 7), bool] */;
  %782 = not_equal(%780, %781) /* ty=Tensor[(9, 5, 7), bool] */;
  %783 = cast(%782, dtype="bool") /* ty=Tensor[(9, 5, 7), bool] */;
  %784 = cast(%var_1291, dtype="bool") /* ty=Tensor[(9, 1, 7), bool] */;
  %785 = @func_200(%769, %770) /* ty=Tensor[(?, 15, 7), float64] */;
  %786 = %777.1;
  %787 = @func_1104(%779) /* ty=Tensor[(16, 3, 7), float32] */;
  %788 = logical_and(%783, %784) /* ty=Tensor[(9, 5, 7), bool] */;
  (%785, %var_1312, %786, %var_1326, meta[relay.Constant][74] /* ty=Tensor[(1694), uint32] */, %787, %var_1341, %788)
}

def @func_8475(%var_8461: Tensor[(40), int64]) -> (Tensor[(7, 4, 2), int32], Tensor[(4, 1, 10), int64], int64, Tensor[(40), int64]) {
  %789 = cast(1 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %790 = cast(%var_8461, dtype="int64") /* ty=Tensor[(40), int64] */;
  %791 = reshape(%789, newshape=[]) /* ty=int64 */;
  %792 = reshape(%790, newshape=[4, 1, 10]) /* ty=Tensor[(4, 1, 10), int64] */;
  %793 = @func_4760(%791, %792) /* ty=(Tensor[(4, 1, 10), int64],) */;
  %794 = @func_7980() /* ty=Tensor[(7, 4, 2), int32] */;
  %795 = %793.0;
  (%794, %795, 1 /* ty=int64 */, %var_8461)
}

def @func_4760(%var_4749: int64, %var_4750: Tensor[(4, 1, 10), int64]) -> (Tensor[(4, 1, 10), int64],) {
  %796 = cast(%var_4749, dtype="int64") /* ty=int64 */;
  %797 = cast(%var_4750, dtype="int64") /* ty=Tensor[(4, 1, 10), int64] */;
  %798 = maximum(%796, %797) /* ty=Tensor[(4, 1, 10), int64] */;
  (%798,)
}

def @func_8648() -> (Tensor[(7, 4, 2), int32],) {
  %799 = @func_7614() /* ty=(Tensor[(7, 4, 2), int32],) */;
  %800 = %799.0;
  (%800,)
}

def @func_200(%var_178: Tensor[(1, 15, 7), int32], %var_179: Tensor[(1, 15, 7), int32]) -> Tensor[(?, 15, 7), float64] {
  %801 = cast(%var_179, dtype="bool") /* ty=Tensor[(1, 15, 7), bool] */;
  %802 = shape_of(%var_178, dtype="int32") /* ty=Tensor[(3), int32] */;
  %803 = cast(%var_178, dtype="bool") /* ty=Tensor[(1, 15, 7), bool] */;
  %804 = dyn.reshape(%801, %802, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %805 = greater_equal(%803, %804) /* ty=Tensor[(?, 15, 7), bool] */;
  %806 = cast(%var_178, dtype="float64") /* ty=Tensor[(1, 15, 7), float64] */;
  %807 = shape_of(%805, dtype="int32") /* ty=Tensor[(3), int32] */;
  %808 = cast(%805, dtype="float64") /* ty=Tensor[(?, 15, 7), float64] */;
  %809 = dyn.reshape(%806, %807, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  subtract(%808, %809) /* ty=Tensor[(?, 15, 7), float64] */
}

def @func_4025(%var_4001: uint32, %var_4002: Tensor[(105), int32], %var_4003: Tensor[(495, 1), float32], %var_4008: Tensor[(195, 2), float64]) -> (Tensor[(1, 7, 12), float64], Tensor[(330), uint8], Tensor[(840), uint64], Tensor[(135), int16], Tensor[(105), int32], Tensor[(495, 1), float32], Tensor[(13, 15, 2), uint32], Tensor[(195, 2), uint16], Tensor[(15, 9, 10), uint64], Tensor[(10, 75), float32], Tensor[(675), int16], Tensor[(168, 2), float32]) {
  %810 = cast(meta[relay.Constant][75] /* ty=Tensor[(1, 7, 12), float64] */, dtype="float64") /* ty=Tensor[(1, 7, 12), float64] */;
  %811 = cast(meta[relay.Constant][76] /* ty=Tensor[(840), uint64] */, dtype="uint64") /* ty=Tensor[(840), uint64] */;
  %812 = cast(meta[relay.Constant][76] /* ty=Tensor[(840), uint64] */, dtype="uint64") /* ty=Tensor[(840), uint64] */;
  %813 = cast(meta[relay.Constant][77] /* ty=Tensor[(135), int16] */, dtype="int16") /* ty=Tensor[(135), int16] */;
  %814 = cast(%var_4001, dtype="uint32") /* ty=uint32 */;
  %815 = cast(%var_4002, dtype="int32") /* ty=Tensor[(105), int32] */;
  %816 = cast(%var_4003, dtype="float32") /* ty=Tensor[(495, 1), float32] */;
  %817 = reshape(%811, newshape=[7, 15, 8]) /* ty=Tensor[(7, 15, 8), uint64] */;
  %818 = reshape(%812, newshape=[7, 15, 8]) /* ty=Tensor[(7, 15, 8), uint64] */;
  %819 = reshape(%813, newshape=[15, 9]) /* ty=Tensor[(15, 9), int16] */;
  %820 = reshape(%814, newshape=[]) /* ty=uint32 */;
  %821 = reshape(%815, newshape=[21, 5]) /* ty=Tensor[(21, 5), int32] */;
  %822 = reshape(%816, newshape=[495]) /* ty=Tensor[(495), float32] */;
  %823 = @func_3852(%817, %818, %819, %820, %821, %822) /* ty=(Tensor[(7, 15, 8), bool], Tensor[(10, 5, 15), float64], Tensor[(15, 9), int16], Tensor[(675), int16], Tensor[(336), float32], Tensor[(6, 11, 5), uint16], Tensor[(330), uint8], uint32, Tensor[(11, 11, 14), bool], Tensor[(1694), uint32], Tensor[(21, 5), int32], Tensor[(750), float64], Tensor[(105), int32], Tensor[(100, 2), int64], Tensor[(495), float32], Tensor[(?, 15, 7), float64]) */;
  %824 = cast(%var_4008, dtype="float64") /* ty=Tensor[(195, 2), float64] */;
  %825 = reshape(%824, newshape=[13, 15, 2]) /* ty=Tensor[(13, 15, 2), float64] */;
  %826 = @func_2908(%825) /* ty=(Tensor[(13, 15, 2), float64], Tensor[(13, 15, 2), uint32]) */;
  %827 = cast(%var_4008, dtype="uint16") /* ty=Tensor[(195, 2), uint16] */;
  %828 = cast(%var_4001, dtype="uint16") /* ty=uint16 */;
  %829 = cast(meta[relay.Constant][78] /* ty=Tensor[(10, 75), float32] */, dtype="float32") /* ty=Tensor[(10, 75), float32] */;
  %830 = cast(meta[relay.Constant][77] /* ty=Tensor[(135), int16] */, dtype="int16") /* ty=Tensor[(135), int16] */;
  %831 = cast(meta[relay.Constant][79] /* ty=Tensor[(675), int16] */, dtype="int16") /* ty=Tensor[(675), int16] */;
  %832 = cast(meta[relay.Constant][80] /* ty=Tensor[(168, 2), float32] */, dtype="float32") /* ty=Tensor[(168, 2), float32] */;
  %833 = reshape(%829, newshape=[10, 5, 15]) /* ty=Tensor[(10, 5, 15), float32] */;
  %834 = reshape(%830, newshape=[15, 9]) /* ty=Tensor[(15, 9), int16] */;
  %835 = reshape(%831, newshape=[675]) /* ty=Tensor[(675), int16] */;
  %836 = reshape(%832, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %837 = @func_3234(%833, %834, %835, %836) /* ty=(Tensor[(105), float32], Tensor[(15, 9), int16], Tensor[(675), int16], Tensor[(105, 1), int32], Tensor[(336), float32], Tensor[(15, 9, 10), uint64], Tensor[(1350), uint64], Tensor[(10, 5, 15), float32], Tensor[(10, 5, 15), float64]) */;
  %838 = erf(%810) /* ty=Tensor[(1, 7, 12), float64] */;
  %839 = %823.6;
  %840 = %826.1;
  %841 = logical_xor(%827, %828) /* ty=Tensor[(195, 2), uint16] */;
  %842 = %837.5;
  (%838, %839, meta[relay.Constant][76] /* ty=Tensor[(840), uint64] */, meta[relay.Constant][77] /* ty=Tensor[(135), int16] */, %var_4002, %var_4003, %840, %841, %842, meta[relay.Constant][78] /* ty=Tensor[(10, 75), float32] */, meta[relay.Constant][79] /* ty=Tensor[(675), int16] */, meta[relay.Constant][80] /* ty=Tensor[(168, 2), float32] */)
}

def @func_7614() -> (Tensor[(7, 4, 2), int32],) {
  %843 = cast(meta[relay.Constant][82] /* ty=Tensor[(7, 4, 2), float32] */, dtype="float32") /* ty=Tensor[(7, 4, 2), float32] */;
  %844 = shape_of(meta[relay.Constant][81] /* ty=Tensor[(7, 4, 2), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %845 = cast(meta[relay.Constant][81] /* ty=Tensor[(7, 4, 2), float32] */, dtype="float32") /* ty=Tensor[(7, 4, 2), float32] */;
  %846 = dyn.reshape(%843, %844, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %847 = divide(%845, %846) /* ty=Tensor[(7, 4, 2), float32] */;
  %848 = cast(meta[relay.Constant][82] /* ty=Tensor[(7, 4, 2), float32] */, dtype="int32") /* ty=Tensor[(7, 4, 2), int32] */;
  %849 = shape_of(%847, dtype="int32") /* ty=Tensor[(3), int32] */;
  %850 = cast(%847, dtype="int32") /* ty=Tensor[(7, 4, 2), int32] */;
  %851 = dyn.reshape(%848, %849, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %852 = add(%850, %851) /* ty=Tensor[(7, 4, 2), int32] */;
  (%852,)
}

def @func_2633(%var_2602: Tensor[(6, 11, 5), uint8], %var_2612: Tensor[(336), float32], %var_2622: uint32) -> (Tensor[(16, 3, 7), float32], Tensor[(336), float32], Tensor[(1, 315), float32], Tensor[(495), float32], Tensor[(?, 15, 7), float64], Tensor[(63), float32], Tensor[(105), int32], Tensor[(6, 11, 5), uint16]) {
  %853 = cast(%var_2612, dtype="float32") /* ty=Tensor[(336), float32] */;
  %854 = reshape(%853, newshape=[16, 3, 7]) /* ty=Tensor[(16, 3, 7), float32] */;
  %855 = cast(meta[relay.Constant][83] /* ty=Tensor[(495), float32] */, dtype="float32") /* ty=Tensor[(495), float32] */;
  %856 = reshape(%855, newshape=[15, 11, 3]) /* ty=Tensor[(15, 11, 3), float32] */;
  %857 = @func_1640(%856) /* ty=(Tensor[(15, 11, 3), bool], Tensor[(1, 315), float32], Tensor[(135), int16], Tensor[(675), int16], Tensor[(105), int32], Tensor[(336), float32]) */;
  %858 = cast(meta[relay.Constant][84] /* ty=Tensor[(63), float32] */, dtype="float32") /* ty=Tensor[(63), float32] */;
  %859 = %857.1;
  %860 = cast(%859, dtype="float32") /* ty=Tensor[(1, 315), float32] */;
  %861 = cast(meta[relay.Constant][85] /* ty=Tensor[(105), int32] */, dtype="int32") /* ty=Tensor[(105), int32] */;
  %862 = cast(%var_2622, dtype="uint32") /* ty=uint32 */;
  %863 = @func_1104(%854) /* ty=Tensor[(16, 3, 7), float32] */;
  %864 = cast(%863, dtype="float32") /* ty=Tensor[(16, 3, 7), float32] */;
  %865 = reshape(%858, newshape=[9, 1, 7]) /* ty=Tensor[(9, 1, 7), float32] */;
  %866 = reshape(%860, newshape=[9, 5, 7]) /* ty=Tensor[(9, 5, 7), float32] */;
  %867 = reshape(%861, newshape=[105, 1]) /* ty=Tensor[(105, 1), int32] */;
  %868 = reshape(%862, newshape=[]) /* ty=uint32 */;
  %869 = reshape(%864, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %870 = @func_1354(%865, %866, %867, %868, %869) /* ty=(Tensor[(?, 15, 7), float64], Tensor[(105, 1), int32], Tensor[(?, 15, 7), float64], uint32, Tensor[(1694), uint32], Tensor[(16, 3, 7), float32], Tensor[(336), float32], Tensor[(9, 5, 7), bool]) */;
  %871 = cast(%var_2602, dtype="uint8") /* ty=Tensor[(6, 11, 5), uint8] */;
  %872 = shape_of(meta[relay.Constant][86] /* ty=Tensor[(6, 11, 5), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %873 = cast(meta[relay.Constant][86] /* ty=Tensor[(6, 11, 5), uint8] */, dtype="uint8") /* ty=Tensor[(6, 11, 5), uint8] */;
  %874 = dyn.reshape(%871, %872, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %875 = bitwise_and(%873, %874) /* ty=Tensor[(6, 11, 5), uint8] */;
  %876 = cast(%875, dtype="uint16") /* ty=Tensor[(6, 11, 5), uint16] */;
  %877 = cast(%var_2622, dtype="uint16") /* ty=uint16 */;
  %878 = %870.2;
  %879 = logical_xor(%876, %877) /* ty=Tensor[(6, 11, 5), uint16] */;
  (%863, %var_2612, %859, meta[relay.Constant][83] /* ty=Tensor[(495), float32] */, %878, meta[relay.Constant][84] /* ty=Tensor[(63), float32] */, meta[relay.Constant][85] /* ty=Tensor[(105), int32] */, %879)
}

def @func_8329(%var_8294: bool, %var_8295: Tensor[(16, 16, 16), bool]) -> (Tensor[(16, 16, 16), bool], Tensor[(13, 2, 13), uint16], Tensor[(13, 4, 13), int32], Tensor[(676), int32]) {
  %880 = cast(%var_8294, dtype="bool") /* ty=bool */;
  %881 = cast(%var_8295, dtype="bool") /* ty=Tensor[(16, 16, 16), bool] */;
  %882 = cast(%var_8294, dtype="uint16") /* ty=uint16 */;
  %883 = reshape(%882, newshape=[]) /* ty=uint16 */;
  %884 = @func_7391(%883) /* ty=(Tensor[(13, 2, 13), uint16], Tensor[(13, 6, 5), float32], Tensor[(390), float32]) */;
  %885 = cast(meta[relay.Constant][87] /* ty=Tensor[(676), int32] */, dtype="int32") /* ty=Tensor[(676), int32] */;
  %886 = reshape(%885, newshape=[13, 4, 13]) /* ty=Tensor[(13, 4, 13), int32] */;
  %887 = logical_or(%880, %881) /* ty=Tensor[(16, 16, 16), bool] */;
  %888 = %884.0;
  %889 = @func_5526(%886) /* ty=Tensor[(13, 4, 13), int32] */;
  (%887, %888, %889, meta[relay.Constant][87] /* ty=Tensor[(676), int32] */)
}

def @func_7837(%var_7829: float32, %var_7830: Tensor[(9, 3, 10), float32]) -> (Tensor[(9, 3, 10), float32],) {
  %890 = cast(%var_7829, dtype="float32") /* ty=float32 */;
  %891 = cast(%var_7830, dtype="float32") /* ty=Tensor[(9, 3, 10), float32] */;
  %892 = divide(%890, %891) /* ty=Tensor[(9, 3, 10), float32] */;
  (%892,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_7488(%var_7486: Tensor[(15, 10, 4), float32]) -> Tensor[(15, 10, 4), float32] {
  @func_7485(%var_7486) /* ty=Tensor[(15, 10, 4), float32] */
}

def @func_8206() -> (Tensor[(7, 4, 2), int32],) {
  %2 = fn () -> (Tensor[(7, 4, 2), int32],) {
    %0 = @func_7753() /* ty=(Tensor[(7, 4, 2), int32],) */;
    %1 = %0.0;
    (%1,)
  };
  %2() /* ty=(Tensor[(7, 4, 2), int32],) */
}

def @func_7615() -> (Tensor[(7, 4, 2), int32],) {
  %13 = fn () -> (Tensor[(7, 4, 2), int32],) {
    %3 = cast(meta[relay.Constant][1] /* ty=Tensor[(7, 4, 2), float32] */, dtype="float32") /* ty=Tensor[(7, 4, 2), float32] */;
    %4 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(7, 4, 2), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %5 = cast(meta[relay.Constant][0] /* ty=Tensor[(7, 4, 2), float32] */, dtype="float32") /* ty=Tensor[(7, 4, 2), float32] */;
    %6 = dyn.reshape(%3, %4, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %7 = divide(%5, %6) /* ty=Tensor[(7, 4, 2), float32] */;
    %8 = cast(meta[relay.Constant][1] /* ty=Tensor[(7, 4, 2), float32] */, dtype="int32") /* ty=Tensor[(7, 4, 2), int32] */;
    %9 = shape_of(%7, dtype="int32") /* ty=Tensor[(3), int32] */;
    %10 = cast(%7, dtype="int32") /* ty=Tensor[(7, 4, 2), int32] */;
    %11 = dyn.reshape(%8, %9, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %12 = add(%10, %11) /* ty=Tensor[(7, 4, 2), int32] */;
    (%12,)
  };
  %13() /* ty=(Tensor[(7, 4, 2), int32],) */
}

def @func_8475(%var_8461: Tensor[(40), int64]) -> (Tensor[(7, 4, 2), int32], Tensor[(4, 1, 10), int64], int64, Tensor[(40), int64]) {
  %14 = cast(1 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %15 = cast(%var_8461, dtype="int64") /* ty=Tensor[(40), int64] */;
  %16 = reshape(%14, newshape=[]) /* ty=int64 */;
  %17 = reshape(%15, newshape=[4, 1, 10]) /* ty=Tensor[(4, 1, 10), int64] */;
  %18 = @func_4760(%16, %17) /* ty=(Tensor[(4, 1, 10), int64],) */;
  %19 = @func_7980() /* ty=Tensor[(7, 4, 2), int32] */;
  %20 = %18.0;
  (%19, %20, 1 /* ty=int64 */, %var_8461)
}

def @func_7391(%var_7381: uint16) -> (Tensor[(13, 2, 13), uint16], Tensor[(13, 6, 5), float32], Tensor[(390), float32]) {
  %21 = cast(%var_7381, dtype="uint16") /* ty=uint16 */;
  %22 = cast(meta[relay.Constant][2] /* ty=Tensor[(13, 2, 13), uint16] */, dtype="uint16") /* ty=Tensor[(13, 2, 13), uint16] */;
  %23 = cast(meta[relay.Constant][3] /* ty=Tensor[(390), float32] */, dtype="float32") /* ty=Tensor[(390), float32] */;
  %24 = reshape(%23, newshape=[13, 6, 5]) /* ty=Tensor[(13, 6, 5), float32] */;
  %25 = @func_6481(%24) /* ty=(Tensor[(13, 6, 5), float32], Tensor[(13, 6, 5), uint64]) */;
  %26 = logical_xor(%21, %22) /* ty=Tensor[(13, 2, 13), uint16] */;
  %27 = %25.0;
  (%26, %27, meta[relay.Constant][3] /* ty=Tensor[(390), float32] */)
}

def @func_602(%var_599: uint32, %var_600: Tensor[(11, 11, 14), uint32], %var_601: Tensor[(105), int32]) -> (Tensor[(11, 11, 14), bool], Tensor[(?, 15, 7), float64], Tensor[(105), int32]) {
  @func_597(%var_599, %var_600, %var_601) /* ty=(Tensor[(11, 11, 14), bool], Tensor[(?, 15, 7), float64], Tensor[(105), int32]) */
}

def @func_6429(%var_6427: Tensor[(3, 6, 8), float32]) -> (Tensor[(3, 6, 8), float32],) {
  @func_6426(%var_6427) /* ty=(Tensor[(3, 6, 8), float32],) */
}

def @func_6950(%var_6948: Tensor[(14, 11, 13), int8], %var_6949: Tensor[(14, 11, 13), int8]) -> (Tensor[(14, 11, 13), int8],) {
  %33 = fn (%var_6931: Tensor[(14, 11, 13), int8], %var_6932: Tensor[(14, 11, 13), int8]) -> (Tensor[(14, 11, 13), int8],) {
    %28 = cast(%var_6932, dtype="int8") /* ty=Tensor[(14, 11, 13), int8] */;
    %29 = shape_of(%var_6931, dtype="int32") /* ty=Tensor[(3), int32] */;
    %30 = cast(%var_6931, dtype="int8") /* ty=Tensor[(14, 11, 13), int8] */;
    %31 = dyn.reshape(%28, %29, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %32 = multiply(%30, %31) /* ty=Tensor[(14, 11, 13), int8] */;
    (%32,)
  };
  %33(%var_6948, %var_6949) /* ty=(Tensor[(14, 11, 13), int8],) */
}

def @func_3668(%var_3617: Tensor[(10, 4, 15), uint16], %var_3618: Tensor[(10, 4, 15), uint16], %var_3645: Tensor[(5, 78), float64], %var_3652: uint64, %var_3654: Tensor[(105), int32], %var_3656: Tensor[(294), uint64]) -> (Tensor[(10, 4, 15), float32], Tensor[(13, 15, 2), uint32], Tensor[(5, 78), float64], Tensor[(105), int32], uint64, Tensor[(160, 1), uint64], Tensor[(105), int32], Tensor[(1694, 1), uint32], Tensor[(294), uint64]) {
  %34 = cast(%var_3618, dtype="uint16") /* ty=Tensor[(10, 4, 15), uint16] */;
  %35 = shape_of(%var_3617, dtype="int32") /* ty=Tensor[(3), int32] */;
  %36 = cast(%var_3617, dtype="uint16") /* ty=Tensor[(10, 4, 15), uint16] */;
  %37 = dyn.reshape(%34, %35, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %38 = right_shift(%36, %37) /* ty=Tensor[(10, 4, 15), uint16] */;
  %39 = cast(%38, dtype="float32") /* ty=Tensor[(10, 4, 15), float32] */;
  %40 = cast(%var_3645, dtype="float64") /* ty=Tensor[(5, 78), float64] */;
  %41 = reshape(%40, newshape=[13, 15, 2]) /* ty=Tensor[(13, 15, 2), float64] */;
  %42 = @func_2908(%41) /* ty=(Tensor[(13, 15, 2), float64], Tensor[(13, 15, 2), uint32]) */;
  %43 = cast(%var_3652, dtype="uint64") /* ty=uint64 */;
  %44 = cast(meta[relay.Constant][4] /* ty=Tensor[(160, 1), uint64] */, dtype="uint64") /* ty=Tensor[(160, 1), uint64] */;
  %45 = cast(%var_3654, dtype="int32") /* ty=Tensor[(105), int32] */;
  %46 = cast(meta[relay.Constant][5] /* ty=Tensor[(1694, 1), uint32] */, dtype="uint32") /* ty=Tensor[(1694, 1), uint32] */;
  %47 = cast(%var_3656, dtype="uint64") /* ty=Tensor[(294), uint64] */;
  %48 = reshape(%43, newshape=[]) /* ty=uint64 */;
  %49 = reshape(%44, newshape=[8, 2, 10]) /* ty=Tensor[(8, 2, 10), uint64] */;
  %50 = reshape(%45, newshape=[105]) /* ty=Tensor[(105), int32] */;
  %51 = reshape(%46, newshape=[1694]) /* ty=Tensor[(1694), uint32] */;
  %52 = reshape(%47, newshape=[6, 7, 7]) /* ty=Tensor[(6, 7, 7), uint64] */;
  %53 = @func_767(%48, %49, %50, %51, %52) /* ty=(Tensor[(8, 2, 10), bool], Tensor[(3, 11), float64], Tensor[(105), int32], Tensor[(1694), uint32], Tensor[(105), int32], Tensor[(6, 7, 7), float32], Tensor[(?, 15, 7), float64], Tensor[(11, 11, 14), uint8], Tensor[(11, 11, 14), bool]) */;
  %54 = asin(%39) /* ty=Tensor[(10, 4, 15), float32] */;
  %55 = %42.1;
  %56 = %53.4;
  (%54, %55, %var_3645, %56, %var_3652, meta[relay.Constant][4] /* ty=Tensor[(160, 1), uint64] */, %var_3654, meta[relay.Constant][5] /* ty=Tensor[(1694, 1), uint32] */, %var_3656)
}

def @func_3676(%var_3670: Tensor[(10, 4, 15), uint16], %var_3671: Tensor[(10, 4, 15), uint16], %var_3672: Tensor[(5, 78), float64], %var_3673: uint64, %var_3674: Tensor[(105), int32], %var_3675: Tensor[(294), uint64]) -> (Tensor[(10, 4, 15), float32], Tensor[(13, 15, 2), uint32], Tensor[(5, 78), float64], Tensor[(105), int32], uint64, Tensor[(160, 1), uint64], Tensor[(105), int32], Tensor[(1694, 1), uint32], Tensor[(294), uint64]) {
  @func_3668(%var_3670, %var_3671, %var_3672, %var_3673, %var_3674, %var_3675) /* ty=(Tensor[(10, 4, 15), float32], Tensor[(13, 15, 2), uint32], Tensor[(5, 78), float64], Tensor[(105), int32], uint64, Tensor[(160, 1), uint64], Tensor[(105), int32], Tensor[(1694, 1), uint32], Tensor[(294), uint64]) */
}

def @func_6392(%var_6391: Tensor[(16, 3, 14), int32]) -> (Tensor[(16, 3, 14), int32],) {
  %62 = fn (%var_6385: Tensor[(16, 3, 14), int32]) -> (Tensor[(16, 3, 14), int32],) {
    %57 = cast(meta[relay.Constant][6] /* ty=Tensor[(16, 3, 14), int32] */, dtype="int32") /* ty=Tensor[(16, 3, 14), int32] */;
    %58 = shape_of(%var_6385, dtype="int32") /* ty=Tensor[(3), int32] */;
    %59 = cast(%var_6385, dtype="int32") /* ty=Tensor[(16, 3, 14), int32] */;
    %60 = dyn.reshape(%57, %58, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %61 = right_shift(%59, %60) /* ty=Tensor[(16, 3, 14), int32] */;
    (%61,)
  };
  %62(%var_6391) /* ty=(Tensor[(16, 3, 14), int32],) */
}

def @func_7735(%var_7726: Tensor[(2, 14, 6), int32]) -> Tensor[(2, 14, 6), int32] {
  %63 = cast(meta[relay.Constant][7] /* ty=Tensor[(1, 14, 6), int32] */, dtype="int32") /* ty=Tensor[(1, 14, 6), int32] */;
  %64 = cast(%var_7726, dtype="int32") /* ty=Tensor[(2, 14, 6), int32] */;
  minimum(%63, %64) /* ty=Tensor[(2, 14, 6), int32] */
}

def @func_7530(%var_7526: Tensor[(14, 15, 16), int32], %var_7527: Tensor[(672), int32], %var_7528: uint32, %var_7529: Tensor[(121, 14), uint32]) -> (Tensor[(14, 15, 16), int32], Tensor[(16, 3, 14), int32], Tensor[(672), int32], uint32, Tensor[(490), int8], uint32, Tensor[(121, 14), uint32], Tensor[(105), int32]) {
  @func_7524(%var_7526, %var_7527, %var_7528, %var_7529) /* ty=(Tensor[(14, 15, 16), int32], Tensor[(16, 3, 14), int32], Tensor[(672), int32], uint32, Tensor[(490), int8], uint32, Tensor[(121, 14), uint32], Tensor[(105), int32]) */
}

def @func_7738(%var_7736: Tensor[(2, 14, 6), int32]) -> Tensor[(2, 14, 6), int32] {
  @func_7735(%var_7736) /* ty=Tensor[(2, 14, 6), int32] */
}

def @func_7524(%var_7499: Tensor[(14, 15, 16), int32], %var_7504: Tensor[(672), int32], %var_7512: uint32, %var_7513: Tensor[(121, 14), uint32]) -> (Tensor[(14, 15, 16), int32], Tensor[(16, 3, 14), int32], Tensor[(672), int32], uint32, Tensor[(490), int8], uint32, Tensor[(121, 14), uint32], Tensor[(105), int32]) {
  %65 = cast(meta[relay.Constant][8] /* ty=Tensor[(14, 1, 16), int32] */, dtype="int32") /* ty=Tensor[(14, 1, 16), int32] */;
  %66 = cast(%var_7499, dtype="int32") /* ty=Tensor[(14, 15, 16), int32] */;
  %67 = cast(%var_7504, dtype="int32") /* ty=Tensor[(672), int32] */;
  %68 = reshape(%67, newshape=[16, 3, 14]) /* ty=Tensor[(16, 3, 14), int32] */;
  %69 = @func_6390(%68) /* ty=(Tensor[(16, 3, 14), int32],) */;
  %70 = cast(meta[relay.Constant][9] /* ty=Tensor[(490), int8] */, dtype="int8") /* ty=Tensor[(490), int8] */;
  %71 = cast(meta[relay.Constant][9] /* ty=Tensor[(490), int8] */, dtype="int8") /* ty=Tensor[(490), int8] */;
  %72 = cast(%var_7512, dtype="uint32") /* ty=uint32 */;
  %73 = cast(%var_7513, dtype="uint32") /* ty=Tensor[(121, 14), uint32] */;
  %74 = cast(meta[relay.Constant][10] /* ty=Tensor[(105), int32] */, dtype="int32") /* ty=Tensor[(105), int32] */;
  %75 = reshape(%70, newshape=[14, 5, 7]) /* ty=Tensor[(14, 5, 7), int8] */;
  %76 = reshape(%71, newshape=[14, 5, 7]) /* ty=Tensor[(14, 5, 7), int8] */;
  %77 = reshape(%72, newshape=[]) /* ty=uint32 */;
  %78 = reshape(%73, newshape=[1694]) /* ty=Tensor[(1694), uint32] */;
  %79 = reshape(%74, newshape=[105]) /* ty=Tensor[(105), int32] */;
  %80 = @func_4667(%75, %76, %77, %78, %79) /* ty=(Tensor[(14, 5, 7), bool], Tensor[(14, 5, 7), float32], Tensor[(?, 15, 7), float64], uint32, Tensor[(1694), uint32], Tensor[(105), int32]) */;
  %81 = maximum(%65, %66) /* ty=Tensor[(14, 15, 16), int32] */;
  %82 = %69.0;
  %83 = %80.3;
  (%81, %82, %var_7504, %83, meta[relay.Constant][9] /* ty=Tensor[(490), int8] */, %var_7512, %var_7513, meta[relay.Constant][10] /* ty=Tensor[(105), int32] */)
}

def @func_4673(%var_4668: Tensor[(14, 5, 7), int8], %var_4669: Tensor[(14, 5, 7), int8], %var_4670: uint32, %var_4671: Tensor[(1694), uint32], %var_4672: Tensor[(105), int32]) -> (Tensor[(14, 5, 7), bool], Tensor[(14, 5, 7), float32], Tensor[(?, 15, 7), float64], uint32, Tensor[(1694), uint32], Tensor[(105), int32]) {
  %99 = fn (%var_4646: Tensor[(14, 5, 7), int8], %var_4647: Tensor[(14, 5, 7), int8], %var_4662: uint32, %var_4663: Tensor[(1694), uint32], %var_4664: Tensor[(105), int32]) -> (Tensor[(14, 5, 7), bool], Tensor[(14, 5, 7), float32], Tensor[(?, 15, 7), float64], uint32, Tensor[(1694), uint32], Tensor[(105), int32]) {
    %84 = cast(%var_4647, dtype="bool") /* ty=Tensor[(14, 5, 7), bool] */;
    %85 = shape_of(%var_4646, dtype="int32") /* ty=Tensor[(3), int32] */;
    %86 = cast(%var_4646, dtype="bool") /* ty=Tensor[(14, 5, 7), bool] */;
    %87 = dyn.reshape(%84, %85, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %88 = cast(%var_4646, dtype="float32") /* ty=Tensor[(14, 5, 7), float32] */;
    %89 = cast(%var_4662, dtype="uint32") /* ty=uint32 */;
    %90 = cast(%var_4663, dtype="uint32") /* ty=Tensor[(1694), uint32] */;
    %91 = cast(%var_4664, dtype="int32") /* ty=Tensor[(105), int32] */;
    %92 = reshape(%89, newshape=[]) /* ty=uint32 */;
    %93 = reshape(%90, newshape=[11, 11, 14]) /* ty=Tensor[(11, 11, 14), uint32] */;
    %94 = reshape(%91, newshape=[105]) /* ty=Tensor[(105), int32] */;
    %95 = @func_597(%92, %93, %94) /* ty=(Tensor[(11, 11, 14), bool], Tensor[(?, 15, 7), float64], Tensor[(105), int32]) */;
    %96 = not_equal(%86, %87) /* ty=Tensor[(14, 5, 7), bool] */;
    %97 = exp(%88) /* ty=Tensor[(14, 5, 7), float32] */;
    %98 = %95.1;
    (%96, %97, %98, %var_4662, %var_4663, %var_4664)
  };
  %99(%var_4668, %var_4669, %var_4670, %var_4671, %var_4672) /* ty=(Tensor[(14, 5, 7), bool], Tensor[(14, 5, 7), float32], Tensor[(?, 15, 7), float64], uint32, Tensor[(1694), uint32], Tensor[(105), int32]) */
}

def @func_8836() -> (Tensor[(7, 4, 2), int32], Tensor[(14, 11, 13), int8], Tensor[(2002), int8], Tensor[(3, 6, 8), float32], Tensor[(144), float32]) {
  @func_8834() /* ty=(Tensor[(7, 4, 2), int32], Tensor[(14, 11, 13), int8], Tensor[(2002), int8], Tensor[(3, 6, 8), float32], Tensor[(144), float32]) */
}

def @func_7972(%var_7971: Tensor[(10, 11, 3), float32]) -> (Tensor[(10, 11, 3), float32],) {
  %102 = fn (%var_7963: Tensor[(10, 11, 3), float32]) -> (Tensor[(10, 11, 3), float32],) {
    %100 = cast(%var_7963, dtype="float32") /* ty=Tensor[(10, 11, 3), float32] */;
    %101 = asinh(%100) /* ty=Tensor[(10, 11, 3), float32] */;
    (%101,)
  };
  %102(%var_7971) /* ty=(Tensor[(10, 11, 3), float32],) */
}

def @func_7485(%var_7470: Tensor[(15, 10, 4), float32]) -> Tensor[(15, 10, 4), float32] {
  %103 = cast(meta[relay.Constant][11] /* ty=Tensor[(15, 10, 4), float32] */, dtype="float32") /* ty=Tensor[(15, 10, 4), float32] */;
  %104 = shape_of(%var_7470, dtype="int32") /* ty=Tensor[(3), int32] */;
  %105 = cast(%var_7470, dtype="float32") /* ty=Tensor[(15, 10, 4), float32] */;
  %106 = dyn.reshape(%103, %104, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%105, %106) /* ty=Tensor[(15, 10, 4), float32] */
}

def @func_7592(%var_7588: Tensor[(1, 2, 15), float64], %var_7589: Tensor[(6, 100), uint16], %var_7590: Tensor[(105), int32], %var_7591: Tensor[(294), uint64]) -> (Tensor[(105), int32], Tensor[(6, 100), uint16], Tensor[(390), float64], Tensor[(105), int32], Tensor[(294), uint64], Tensor[(?, 2, 15), int16]) {
  %131 = fn (%var_7553: Tensor[(1, 2, 15), float64], %var_7573: Tensor[(6, 100), uint16], %var_7576: Tensor[(105), int32], %var_7577: Tensor[(294), uint64]) -> (Tensor[(105), int32], Tensor[(6, 100), uint16], Tensor[(390), float64], Tensor[(105), int32], Tensor[(294), uint64], Tensor[(?, 2, 15), int16]) {
    %107 = cast(%var_7573, dtype="uint16") /* ty=Tensor[(6, 100), uint16] */;
    %108 = cast(%var_7573, dtype="uint16") /* ty=Tensor[(6, 100), uint16] */;
    %109 = cast(meta[relay.Constant][12] /* ty=Tensor[(390), float64] */, dtype="float64") /* ty=Tensor[(390), float64] */;
    %110 = cast(meta[relay.Constant][13] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %111 = cast(%var_7576, dtype="int32") /* ty=Tensor[(105), int32] */;
    %112 = cast(%var_7577, dtype="uint64") /* ty=Tensor[(294), uint64] */;
    %113 = reshape(%107, newshape=[10, 4, 15]) /* ty=Tensor[(10, 4, 15), uint16] */;
    %114 = reshape(%108, newshape=[10, 4, 15]) /* ty=Tensor[(10, 4, 15), uint16] */;
    %115 = reshape(%109, newshape=[5, 78]) /* ty=Tensor[(5, 78), float64] */;
    %116 = reshape(%110, newshape=[]) /* ty=uint64 */;
    %117 = reshape(%111, newshape=[105]) /* ty=Tensor[(105), int32] */;
    %118 = reshape(%112, newshape=[294]) /* ty=Tensor[(294), uint64] */;
    %119 = @func_3668(%113, %114, %115, %116, %117, %118) /* ty=(Tensor[(10, 4, 15), float32], Tensor[(13, 15, 2), uint32], Tensor[(5, 78), float64], Tensor[(105), int32], uint64, Tensor[(160, 1), uint64], Tensor[(105), int32], Tensor[(1694, 1), uint32], Tensor[(294), uint64]) */;
    %120 = cast(%var_7553, dtype="float64") /* ty=Tensor[(1, 2, 15), float64] */;
    %121 = cosh(%120) /* ty=Tensor[(1, 2, 15), float64] */;
    %122 = cast(%var_7553, dtype="uint16") /* ty=Tensor[(1, 2, 15), uint16] */;
    %123 = shape_of(%121, dtype="int32") /* ty=Tensor[(3), int32] */;
    %124 = cast(%121, dtype="uint16") /* ty=Tensor[(1, 2, 15), uint16] */;
    %125 = dyn.reshape(%122, %123, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %126 = multiply(%124, %125) /* ty=Tensor[(?, 2, 15), uint16] */;
    %127 = cast(%126, dtype="int16") /* ty=Tensor[(?, 2, 15), int16] */;
    %128 = cast(meta[relay.Constant][13] /* ty=uint64 */, dtype="int16") /* ty=int16 */;
    %129 = %119.3;
    %130 = left_shift(%127, %128) /* ty=Tensor[(?, 2, 15), int16] */;
    (%129, %var_7573, meta[relay.Constant][12] /* ty=Tensor[(390), float64] */, %var_7576, %var_7577, %130)
  };
  %131(%var_7588, %var_7589, %var_7590, %var_7591) /* ty=(Tensor[(105), int32], Tensor[(6, 100), uint16], Tensor[(390), float64], Tensor[(105), int32], Tensor[(294), uint64], Tensor[(?, 2, 15), int16]) */
}

def @func_7864() -> (Tensor[(7, 4, 2), float64],) {
  @func_7862() /* ty=(Tensor[(7, 4, 2), float64],) */
}

def @func_4821(%var_4816: Tensor[(5, 8, 12), float64], %var_4817: Tensor[(495), float32], %var_4818: uint32, %var_4819: Tensor[(1694), uint32], %var_4820: Tensor[(40), int64]) -> (Tensor[(15, 11, 3), bool], Tensor[(495), float32], Tensor[(5, 8, 12), float32], Tensor[(1694), uint32], Tensor[(490), int8], uint32, Tensor[(1694), uint32], Tensor[(105), int32], Tensor[(4, 1, 10), int64], Tensor[(40), int64]) {
  @func_4814(%var_4816, %var_4817, %var_4818, %var_4819, %var_4820) /* ty=(Tensor[(15, 11, 3), bool], Tensor[(495), float32], Tensor[(5, 8, 12), float32], Tensor[(1694), uint32], Tensor[(490), int8], uint32, Tensor[(1694), uint32], Tensor[(105), int32], Tensor[(4, 1, 10), int64], Tensor[(40), int64]) */
}

def @func_8615(%var_8614: Tensor[(1, 495), float32]) -> (Tensor[(7, 4, 2), int32], Tensor[(2002), int8], Tensor[(14, 11, 13), float32], Tensor[(200), int64], Tensor[(40), float64], Tensor[(200), int64], Tensor[(1, 495), float32], Tensor[(14, 11, 13), int8]) {
  %156 = fn (%var_8595: Tensor[(1, 495), float32]) -> (Tensor[(7, 4, 2), int32], Tensor[(2002), int8], Tensor[(14, 11, 13), float32], Tensor[(200), int64], Tensor[(40), float64], Tensor[(200), int64], Tensor[(1, 495), float32], Tensor[(14, 11, 13), int8]) {
    %132 = @func_8205() /* ty=(Tensor[(7, 4, 2), int32],) */;
    %133 = cast(meta[relay.Constant][14] /* ty=Tensor[(2002), int8] */, dtype="int8") /* ty=Tensor[(2002), int8] */;
    %134 = cast(meta[relay.Constant][14] /* ty=Tensor[(2002), int8] */, dtype="int8") /* ty=Tensor[(2002), int8] */;
    %135 = reshape(%133, newshape=[14, 11, 13]) /* ty=Tensor[(14, 11, 13), int8] */;
    %136 = reshape(%134, newshape=[14, 11, 13]) /* ty=Tensor[(14, 11, 13), int8] */;
    %137 = @func_6947(%135, %136) /* ty=(Tensor[(14, 11, 13), int8],) */;
    %138 = %137.0;
    %139 = cast(%138, dtype="float32") /* ty=Tensor[(14, 11, 13), float32] */;
    %140 = cast(meta[relay.Constant][15] /* ty=Tensor[(40), float64] */, dtype="float64") /* ty=Tensor[(40), float64] */;
    %141 = cast(meta[relay.Constant][16] /* ty=Tensor[(200), int64] */, dtype="int64") /* ty=Tensor[(200), int64] */;
    %142 = cast(%var_8595, dtype="float32") /* ty=Tensor[(1, 495), float32] */;
    %143 = reshape(%140, newshape=[1, 5, 8]) /* ty=Tensor[(1, 5, 8), float64] */;
    %144 = reshape(%141, newshape=[200]) /* ty=Tensor[(200), int64] */;
    %145 = reshape(%142, newshape=[495]) /* ty=Tensor[(495), float32] */;
    %146 = @func_2741(%143, %144, %145) /* ty=(Tensor[(?, 5, 8), float64], Tensor[(105), int32], Tensor[(200), int64], Tensor[(105), int32], Tensor[(495), float32]) */;
    %147 = cast(%138, dtype="int8") /* ty=Tensor[(14, 11, 13), int8] */;
    %148 = log(%139) /* ty=Tensor[(14, 11, 13), float32] */;
    %149 = cast(%148, dtype="int8") /* ty=Tensor[(14, 11, 13), int8] */;
    %150 = reshape(%147, newshape=[14, 11, 13]) /* ty=Tensor[(14, 11, 13), int8] */;
    %151 = reshape(%149, newshape=[14, 11, 13]) /* ty=Tensor[(14, 11, 13), int8] */;
    %152 = @func_6947(%150, %151) /* ty=(Tensor[(14, 11, 13), int8],) */;
    %153 = %132.0;
    %154 = %146.2;
    %155 = %152.0;
    (%153, meta[relay.Constant][14] /* ty=Tensor[(2002), int8] */, %148, %154, meta[relay.Constant][15] /* ty=Tensor[(40), float64] */, meta[relay.Constant][16] /* ty=Tensor[(200), int64] */, %var_8595, %155)
  };
  %156(%var_8614) /* ty=(Tensor[(7, 4, 2), int32], Tensor[(2002), int8], Tensor[(14, 11, 13), float32], Tensor[(200), int64], Tensor[(40), float64], Tensor[(200), int64], Tensor[(1, 495), float32], Tensor[(14, 11, 13), int8]) */
}

def @func_203(%var_201: Tensor[(1, 15, 7), int32], %var_202: Tensor[(1, 15, 7), int32]) -> Tensor[(?, 15, 7), float64] {
  %166 = fn (%var_178: Tensor[(1, 15, 7), int32], %var_179: Tensor[(1, 15, 7), int32]) -> Tensor[(?, 15, 7), float64] {
    %157 = cast(%var_179, dtype="bool") /* ty=Tensor[(1, 15, 7), bool] */;
    %158 = shape_of(%var_178, dtype="int32") /* ty=Tensor[(3), int32] */;
    %159 = cast(%var_178, dtype="bool") /* ty=Tensor[(1, 15, 7), bool] */;
    %160 = dyn.reshape(%157, %158, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %161 = greater_equal(%159, %160) /* ty=Tensor[(?, 15, 7), bool] */;
    %162 = cast(%var_178, dtype="float64") /* ty=Tensor[(1, 15, 7), float64] */;
    %163 = shape_of(%161, dtype="int32") /* ty=Tensor[(3), int32] */;
    %164 = cast(%161, dtype="float64") /* ty=Tensor[(?, 15, 7), float64] */;
    %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    subtract(%164, %165) /* ty=Tensor[(?, 15, 7), float64] */
  };
  %166(%var_201, %var_202) /* ty=Tensor[(?, 15, 7), float64] */
}

def @func_1360(%var_1355: Tensor[(9, 1, 7), float32], %var_1356: Tensor[(9, 5, 7), float32], %var_1357: Tensor[(105, 1), int32], %var_1358: uint32, %var_1359: Tensor[(336), float32]) -> (Tensor[(?, 15, 7), float64], Tensor[(105, 1), int32], Tensor[(?, 15, 7), float64], uint32, Tensor[(1694), uint32], Tensor[(16, 3, 7), float32], Tensor[(336), float32], Tensor[(9, 5, 7), bool]) {
  %189 = fn (%var_1291: Tensor[(9, 1, 7), float32], %var_1292: Tensor[(9, 5, 7), float32], %var_1312: Tensor[(105, 1), int32], %var_1326: uint32, %var_1341: Tensor[(336), float32]) -> (Tensor[(?, 15, 7), float64], Tensor[(105, 1), int32], Tensor[(?, 15, 7), float64], uint32, Tensor[(1694), uint32], Tensor[(16, 3, 7), float32], Tensor[(336), float32], Tensor[(9, 5, 7), bool]) {
    %167 = cast(%var_1312, dtype="int32") /* ty=Tensor[(105, 1), int32] */;
    %168 = cast(%var_1312, dtype="int32") /* ty=Tensor[(105, 1), int32] */;
    %169 = reshape(%167, newshape=[1, 15, 7]) /* ty=Tensor[(1, 15, 7), int32] */;
    %170 = reshape(%168, newshape=[1, 15, 7]) /* ty=Tensor[(1, 15, 7), int32] */;
    %171 = cast(%var_1326, dtype="uint32") /* ty=uint32 */;
    %172 = cast(meta[relay.Constant][17] /* ty=Tensor[(1694), uint32] */, dtype="uint32") /* ty=Tensor[(1694), uint32] */;
    %173 = cast(%var_1312, dtype="int32") /* ty=Tensor[(105, 1), int32] */;
    %174 = reshape(%171, newshape=[]) /* ty=uint32 */;
    %175 = reshape(%172, newshape=[11, 11, 14]) /* ty=Tensor[(11, 11, 14), uint32] */;
    %176 = reshape(%173, newshape=[105]) /* ty=Tensor[(105), int32] */;
    %177 = @func_597(%174, %175, %176) /* ty=(Tensor[(11, 11, 14), bool], Tensor[(?, 15, 7), float64], Tensor[(105), int32]) */;
    %178 = cast(%var_1341, dtype="float32") /* ty=Tensor[(336), float32] */;
    %179 = reshape(%178, newshape=[16, 3, 7]) /* ty=Tensor[(16, 3, 7), float32] */;
    %180 = cast(%var_1291, dtype="bool") /* ty=Tensor[(9, 1, 7), bool] */;
    %181 = cast(%var_1292, dtype="bool") /* ty=Tensor[(9, 5, 7), bool] */;
    %182 = not_equal(%180, %181) /* ty=Tensor[(9, 5, 7), bool] */;
    %183 = cast(%182, dtype="bool") /* ty=Tensor[(9, 5, 7), bool] */;
    %184 = cast(%var_1291, dtype="bool") /* ty=Tensor[(9, 1, 7), bool] */;
    %185 = @func_200(%169, %170) /* ty=Tensor[(?, 15, 7), float64] */;
    %186 = %177.1;
    %187 = @func_1104(%179) /* ty=Tensor[(16, 3, 7), float32] */;
    %188 = logical_and(%183, %184) /* ty=Tensor[(9, 5, 7), bool] */;
    (%185, %var_1312, %186, %var_1326, meta[relay.Constant][17] /* ty=Tensor[(1694), uint32] */, %187, %var_1341, %188)
  };
  %189(%var_1355, %var_1356, %var_1357, %var_1358, %var_1359) /* ty=(Tensor[(?, 15, 7), float64], Tensor[(105, 1), int32], Tensor[(?, 15, 7), float64], uint32, Tensor[(1694), uint32], Tensor[(16, 3, 7), float32], Tensor[(336), float32], Tensor[(9, 5, 7), bool]) */
}

def @func_8058() -> (Tensor[(7, 4, 2), float64], Tensor[(7, 4, 2), float64]) {
  %202 = fn () -> (Tensor[(7, 4, 2), float64], Tensor[(7, 4, 2), float64]) {
    %190 = @func_7980() /* ty=Tensor[(7, 4, 2), int32] */;
    %191 = cast(%190, dtype="float64") /* ty=Tensor[(7, 4, 2), float64] */;
    %192 = cos(%191) /* ty=Tensor[(7, 4, 2), float64] */;
    %193 = cast(%192, dtype="float64") /* ty=Tensor[(7, 4, 2), float64] */;
    %194 = cast(%190, dtype="float64") /* ty=Tensor[(7, 4, 2), float64] */;
    %195 = erf(%194) /* ty=Tensor[(7, 4, 2), float64] */;
    %196 = cast(%192, dtype="float64") /* ty=Tensor[(7, 4, 2), float64] */;
    %197 = shape_of(%195, dtype="int32") /* ty=Tensor[(3), int32] */;
    %198 = cast(%195, dtype="float64") /* ty=Tensor[(7, 4, 2), float64] */;
    %199 = dyn.reshape(%196, %197, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %200 = sinh(%193) /* ty=Tensor[(7, 4, 2), float64] */;
    %201 = floor_mod(%198, %199) /* ty=Tensor[(7, 4, 2), float64] */;
    (%200, %201)
  };
  %202() /* ty=(Tensor[(7, 4, 2), float64], Tensor[(7, 4, 2), float64]) */
}

def @func_5756(%var_5697: Tensor[(11, 11, 3), uint32], %var_5708: Tensor[(7, 15), int32], %var_5710: Tensor[(336), float32]) -> (Tensor[(11, 11, 3), uint32], Tensor[(315), float32], Tensor[(7, 15), int32], Tensor[(63), float64], Tensor[(336), float64], Tensor[(3, 11), float64]) {
  %203 = cast(meta[relay.Constant][18] /* ty=Tensor[(11, 11, 3), uint32] */, dtype="uint32") /* ty=Tensor[(11, 11, 3), uint32] */;
  %204 = shape_of(%var_5697, dtype="int32") /* ty=Tensor[(3), int32] */;
  %205 = cast(%var_5697, dtype="uint32") /* ty=Tensor[(11, 11, 3), uint32] */;
  %206 = dyn.reshape(%203, %204, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %207 = cast(meta[relay.Constant][20] /* ty=Tensor[(63), float32] */, dtype="float64") /* ty=Tensor[(63), float64] */;
  %208 = cast(meta[relay.Constant][21] /* ty=uint32 */, dtype="float64") /* ty=float64 */;
  %209 = cast(meta[relay.Constant][20] /* ty=Tensor[(63), float32] */, dtype="float32") /* ty=Tensor[(63), float32] */;
  %210 = cast(meta[relay.Constant][19] /* ty=Tensor[(315), float32] */, dtype="float32") /* ty=Tensor[(315), float32] */;
  %211 = cast(%var_5708, dtype="int32") /* ty=Tensor[(7, 15), int32] */;
  %212 = cast(meta[relay.Constant][21] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %213 = cast(%var_5710, dtype="float32") /* ty=Tensor[(336), float32] */;
  %214 = reshape(%209, newshape=[9, 1, 7]) /* ty=Tensor[(9, 1, 7), float32] */;
  %215 = reshape(%210, newshape=[9, 5, 7]) /* ty=Tensor[(9, 5, 7), float32] */;
  %216 = reshape(%211, newshape=[105, 1]) /* ty=Tensor[(105, 1), int32] */;
  %217 = reshape(%212, newshape=[]) /* ty=uint32 */;
  %218 = reshape(%213, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %219 = @func_1354(%214, %215, %216, %217, %218) /* ty=(Tensor[(?, 15, 7), float64], Tensor[(105, 1), int32], Tensor[(?, 15, 7), float64], uint32, Tensor[(1694), uint32], Tensor[(16, 3, 7), float32], Tensor[(336), float32], Tensor[(9, 5, 7), bool]) */;
  %220 = %219.6;
  %221 = cast(%220, dtype="float64") /* ty=Tensor[(336), float64] */;
  %222 = shape_of(%var_5710, dtype="int32") /* ty=Tensor[(1), int32] */;
  %223 = cast(%var_5710, dtype="float64") /* ty=Tensor[(336), float64] */;
  %224 = dyn.reshape(%221, %222, newshape=[]) /* ty=Tensor[(?), float64] */;
  %225 = cast(%var_5708, dtype="int32") /* ty=Tensor[(7, 15), int32] */;
  %226 = reshape(%225, newshape=[105]) /* ty=Tensor[(105), int32] */;
  %227 = @func_411(%226) /* ty=(Tensor[(3, 11), float64], Tensor[(?, 15, 7), float64], Tensor[(105), int32], Tensor[(?, 15, 7), float64], Tensor[(?, 15, 7), float64]) */;
  %228 = add(%205, %206) /* ty=Tensor[(11, 11, 3), uint32] */;
  %229 = floor_mod(%207, %208) /* ty=Tensor[(63), float64] */;
  %230 = floor_divide(%223, %224) /* ty=Tensor[(336), float64] */;
  %231 = %227.0;
  (%228, meta[relay.Constant][19] /* ty=Tensor[(315), float32] */, %var_5708, %229, %230, %231)
}

def @func_2638(%var_2635: Tensor[(6, 11, 5), uint8], %var_2636: Tensor[(336), float32], %var_2637: uint32) -> (Tensor[(16, 3, 7), float32], Tensor[(336), float32], Tensor[(1, 315), float32], Tensor[(495), float32], Tensor[(?, 15, 7), float64], Tensor[(63), float32], Tensor[(105), int32], Tensor[(6, 11, 5), uint16]) {
  @func_2633(%var_2635, %var_2636, %var_2637) /* ty=(Tensor[(16, 3, 7), float32], Tensor[(336), float32], Tensor[(1, 315), float32], Tensor[(495), float32], Tensor[(?, 15, 7), float64], Tensor[(63), float32], Tensor[(105), int32], Tensor[(6, 11, 5), uint16]) */
}

def @func_5963(%var_5956: Tensor[(4, 4, 9), float64], %var_5957: Tensor[(44), bool], %var_5958: Tensor[(676), int32], %var_5959: Tensor[(44), bool], %var_5960: Tensor[(36), float64], %var_5961: Tensor[(165, 3), float32], %var_5962: Tensor[(750), float32]) -> (Tensor[(4, 4, 9), bool], Tensor[(1, 4, 11), bool], Tensor[(13, 4, 13), int32], Tensor[(105), int32], Tensor[(44), int64], Tensor[(?, 15, 7), int16], Tensor[(3, 12, 1), float64], Tensor[(36), float64], Tensor[(165, 3), float32], Tensor[(15, 11, 3), bool], Tensor[(10, 5, 15), float32], Tensor[(750), float32], Tensor[(135), int16], Tensor[(675), int16], Tensor[(336), float32], Tensor[(676), float32]) {
  %282 = fn (%var_5847: Tensor[(4, 4, 9), float64], %var_5856: Tensor[(44), bool], %var_5865: Tensor[(676), int32], %var_5871: Tensor[(44), bool], %var_5925: Tensor[(36), float64], %var_5929: Tensor[(165, 3), float32], %var_5943: Tensor[(750), float32]) -> (Tensor[(4, 4, 9), bool], Tensor[(1, 4, 11), bool], Tensor[(13, 4, 13), int32], Tensor[(105), int32], Tensor[(44), int64], Tensor[(?, 15, 7), int16], Tensor[(3, 12, 1), float64], Tensor[(36), float64], Tensor[(165, 3), float32], Tensor[(15, 11, 3), bool], Tensor[(10, 5, 15), float32], Tensor[(750), float32], Tensor[(135), int16], Tensor[(675), int16], Tensor[(336), float32], Tensor[(676), float32]) {
    %232 = cast(%var_5847, dtype="bool") /* ty=Tensor[(4, 4, 9), bool] */;
    %233 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(4, 4, 9), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %234 = cast(meta[relay.Constant][22] /* ty=Tensor[(4, 4, 9), float64] */, dtype="bool") /* ty=Tensor[(4, 4, 9), bool] */;
    %235 = dyn.reshape(%232, %233, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %236 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
    %237 = cast(%var_5856, dtype="bool") /* ty=Tensor[(44), bool] */;
    %238 = reshape(%236, newshape=[]) /* ty=bool */;
    %239 = reshape(%237, newshape=[1, 4, 11]) /* ty=Tensor[(1, 4, 11), bool] */;
    %240 = @func_1874(%238, %239) /* ty=(Tensor[(1, 4, 11), bool], Tensor[(15, 9, 10), uint64], Tensor[(1350), uint64]) */;
    %241 = cast(%var_5865, dtype="int32") /* ty=Tensor[(676), int32] */;
    %242 = reshape(%241, newshape=[13, 4, 13]) /* ty=Tensor[(13, 4, 13), int32] */;
    %243 = cast(%var_5871, dtype="int64") /* ty=Tensor[(44), int64] */;
    %244 = shape_of(%var_5856, dtype="int32") /* ty=Tensor[(1), int32] */;
    %245 = cast(%var_5856, dtype="int64") /* ty=Tensor[(44), int64] */;
    %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?), int64] */;
    %247 = cast(meta[relay.Constant][23] /* ty=Tensor[(105), int32] */, dtype="int32") /* ty=Tensor[(105), int32] */;
    %248 = reshape(%247, newshape=[105]) /* ty=Tensor[(105), int32] */;
    %249 = @func_411(%248) /* ty=(Tensor[(3, 11), float64], Tensor[(?, 15, 7), float64], Tensor[(105), int32], Tensor[(?, 15, 7), float64], Tensor[(?, 15, 7), float64]) */;
    %250 = %249.4;
    %251 = cast(%250, dtype="int16") /* ty=Tensor[(?, 15, 7), int16] */;
    %252 = cast(False /* ty=bool */, dtype="int16") /* ty=int16 */;
    %253 = cast(%var_5925, dtype="float64") /* ty=Tensor[(36), float64] */;
    %254 = reshape(%253, newshape=[3, 12, 1]) /* ty=Tensor[(3, 12, 1), float64] */;
    %255 = cast(%var_5929, dtype="float32") /* ty=Tensor[(165, 3), float32] */;
    %256 = reshape(%255, newshape=[15, 11, 3]) /* ty=Tensor[(15, 11, 3), float32] */;
    %257 = @func_1640(%256) /* ty=(Tensor[(15, 11, 3), bool], Tensor[(1, 315), float32], Tensor[(135), int16], Tensor[(675), int16], Tensor[(105), int32], Tensor[(336), float32]) */;
    %258 = %257.0;
    %259 = cast(%258, dtype="bool") /* ty=Tensor[(15, 11, 3), bool] */;
    %260 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
    %261 = cast(%var_5943, dtype="float32") /* ty=Tensor[(750), float32] */;
    %262 = cast(meta[relay.Constant][24] /* ty=Tensor[(135), int16] */, dtype="int16") /* ty=Tensor[(135), int16] */;
    %263 = cast(meta[relay.Constant][25] /* ty=Tensor[(675), int16] */, dtype="int16") /* ty=Tensor[(675), int16] */;
    %264 = cast(meta[relay.Constant][26] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
    %265 = reshape(%261, newshape=[10, 5, 15]) /* ty=Tensor[(10, 5, 15), float32] */;
    %266 = reshape(%262, newshape=[15, 9]) /* ty=Tensor[(15, 9), int16] */;
    %267 = reshape(%263, newshape=[675]) /* ty=Tensor[(675), int16] */;
    %268 = reshape(%264, newshape=[336]) /* ty=Tensor[(336), float32] */;
    %269 = @func_3234(%265, %266, %267, %268) /* ty=(Tensor[(105), float32], Tensor[(15, 9), int16], Tensor[(675), int16], Tensor[(105, 1), int32], Tensor[(336), float32], Tensor[(15, 9, 10), uint64], Tensor[(1350), uint64], Tensor[(10, 5, 15), float32], Tensor[(10, 5, 15), float64]) */;
    %270 = cast(%var_5865, dtype="float32") /* ty=Tensor[(676), float32] */;
    %271 = exp(%270) /* ty=Tensor[(676), float32] */;
    %272 = cast(%271, dtype="float32") /* ty=Tensor[(676), float32] */;
    %273 = less(%234, %235) /* ty=Tensor[(4, 4, 9), bool] */;
    %274 = %240.0;
    %275 = @func_5526(%242) /* ty=Tensor[(13, 4, 13), int32] */;
    %276 = bitwise_and(%245, %246) /* ty=Tensor[(44), int64] */;
    %277 = logical_xor(%251, %252) /* ty=Tensor[(?, 15, 7), int16] */;
    %278 = @func_5840(%254) /* ty=Tensor[(3, 12, 1), float64] */;
    %279 = not_equal(%259, %260) /* ty=Tensor[(15, 11, 3), bool] */;
    %280 = %269.7;
    %281 = log10(%272) /* ty=Tensor[(676), float32] */;
    (%273, %274, %275, meta[relay.Constant][23] /* ty=Tensor[(105), int32] */, %276, %277, %278, %var_5925, %var_5929, %279, %280, %var_5943, meta[relay.Constant][24] /* ty=Tensor[(135), int16] */, meta[relay.Constant][25] /* ty=Tensor[(675), int16] */, meta[relay.Constant][26] /* ty=Tensor[(336), float32] */, %281)
  };
  %282(%var_5956, %var_5957, %var_5958, %var_5959, %var_5960, %var_5961, %var_5962) /* ty=(Tensor[(4, 4, 9), bool], Tensor[(1, 4, 11), bool], Tensor[(13, 4, 13), int32], Tensor[(105), int32], Tensor[(44), int64], Tensor[(?, 15, 7), int16], Tensor[(3, 12, 1), float64], Tensor[(36), float64], Tensor[(165, 3), float32], Tensor[(15, 11, 3), bool], Tensor[(10, 5, 15), float32], Tensor[(750), float32], Tensor[(135), int16], Tensor[(675), int16], Tensor[(336), float32], Tensor[(676), float32]) */
}

def @func_5028(%var_4915: Tensor[(7, 3, 5), uint16], %var_4955: Tensor[(7, 3, 5), float32], %var_5004: Tensor[(480), float64], %var_5005: Tensor[(495), float32], %var_5008: Tensor[(40), int64], %var_5017: Tensor[(600), uint16]) -> (Tensor[(7, 3, 5), float64], Tensor[(?, 15, 7), float64], Tensor[(7, 3, 5), bool], uint32, Tensor[(480), float64], Tensor[(495), float32], uint32, Tensor[(1694), uint32], Tensor[(40), int64], Tensor[(105), int32], Tensor[(600), uint16], Tensor[(65, 6), float64], Tensor[(49, 6), uint64]) {
  %283 = cast(meta[relay.Constant][27] /* ty=Tensor[(7, 3, 5), uint16] */, dtype="bool") /* ty=Tensor[(7, 3, 5), bool] */;
  %284 = shape_of(%var_4915, dtype="int32") /* ty=Tensor[(3), int32] */;
  %285 = cast(%var_4915, dtype="bool") /* ty=Tensor[(7, 3, 5), bool] */;
  %286 = dyn.reshape(%283, %284, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %287 = less_equal(%285, %286) /* ty=Tensor[(7, 3, 5), bool] */;
  %288 = cast(%287, dtype="float32") /* ty=Tensor[(7, 3, 5), float32] */;
  %289 = log10(%288) /* ty=Tensor[(7, 3, 5), float32] */;
  %290 = cast(%var_4955, dtype="float64") /* ty=Tensor[(7, 3, 5), float64] */;
  %291 = shape_of(%289, dtype="int32") /* ty=Tensor[(3), int32] */;
  %292 = cast(%289, dtype="float64") /* ty=Tensor[(7, 3, 5), float64] */;
  %293 = dyn.reshape(%290, %291, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %294 = cast(%289, dtype="int32") /* ty=Tensor[(7, 3, 5), int32] */;
  %295 = reshape(%294, newshape=[105]) /* ty=Tensor[(105), int32] */;
  %296 = @func_411(%295) /* ty=(Tensor[(3, 11), float64], Tensor[(?, 15, 7), float64], Tensor[(105), int32], Tensor[(?, 15, 7), float64], Tensor[(?, 15, 7), float64]) */;
  %297 = cast(%289, dtype="float32") /* ty=Tensor[(7, 3, 5), float32] */;
  %298 = log(%297) /* ty=Tensor[(7, 3, 5), float32] */;
  %299 = cast(%298, dtype="float64") /* ty=Tensor[(7, 3, 5), float64] */;
  %300 = atanh(%299) /* ty=Tensor[(7, 3, 5), float64] */;
  %301 = cast(%var_4915, dtype="uint32") /* ty=Tensor[(7, 3, 5), uint32] */;
  %302 = shape_of(%287, dtype="int32") /* ty=Tensor[(3), int32] */;
  %303 = cast(%287, dtype="uint32") /* ty=Tensor[(7, 3, 5), uint32] */;
  %304 = dyn.reshape(%301, %302, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %305 = minimum(%303, %304) /* ty=Tensor[(7, 3, 5), uint32] */;
  %306 = cast(%305, dtype="bool") /* ty=Tensor[(7, 3, 5), bool] */;
  %307 = shape_of(%300, dtype="int32") /* ty=Tensor[(3), int32] */;
  %308 = cast(%300, dtype="bool") /* ty=Tensor[(7, 3, 5), bool] */;
  %309 = dyn.reshape(%306, %307, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %310 = cast(%var_5004, dtype="float64") /* ty=Tensor[(480), float64] */;
  %311 = cast(%var_5005, dtype="float32") /* ty=Tensor[(495), float32] */;
  %312 = cast(meta[relay.Constant][28] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %313 = cast(meta[relay.Constant][29] /* ty=Tensor[(1694), uint32] */, dtype="uint32") /* ty=Tensor[(1694), uint32] */;
  %314 = cast(%var_5008, dtype="int64") /* ty=Tensor[(40), int64] */;
  %315 = reshape(%310, newshape=[5, 8, 12]) /* ty=Tensor[(5, 8, 12), float64] */;
  %316 = reshape(%311, newshape=[495]) /* ty=Tensor[(495), float32] */;
  %317 = reshape(%312, newshape=[]) /* ty=uint32 */;
  %318 = reshape(%313, newshape=[1694]) /* ty=Tensor[(1694), uint32] */;
  %319 = reshape(%314, newshape=[40]) /* ty=Tensor[(40), int64] */;
  %320 = @func_4814(%315, %316, %317, %318, %319) /* ty=(Tensor[(15, 11, 3), bool], Tensor[(495), float32], Tensor[(5, 8, 12), float32], Tensor[(1694), uint32], Tensor[(490), int8], uint32, Tensor[(1694), uint32], Tensor[(105), int32], Tensor[(4, 1, 10), int64], Tensor[(40), int64]) */;
  %321 = cast(%var_5017, dtype="uint16") /* ty=Tensor[(600), uint16] */;
  %322 = cast(%var_5017, dtype="uint16") /* ty=Tensor[(600), uint16] */;
  %323 = cast(meta[relay.Constant][30] /* ty=Tensor[(65, 6), float64] */, dtype="float64") /* ty=Tensor[(65, 6), float64] */;
  %324 = %320.5;
  %325 = cast(%324, dtype="uint64") /* ty=uint64 */;
  %326 = cast(meta[relay.Constant][27] /* ty=Tensor[(7, 3, 5), uint16] */, dtype="int32") /* ty=Tensor[(7, 3, 5), int32] */;
  %327 = cast(meta[relay.Constant][31] /* ty=Tensor[(49, 6), uint64] */, dtype="uint64") /* ty=Tensor[(49, 6), uint64] */;
  %328 = reshape(%321, newshape=[10, 4, 15]) /* ty=Tensor[(10, 4, 15), uint16] */;
  %329 = reshape(%322, newshape=[10, 4, 15]) /* ty=Tensor[(10, 4, 15), uint16] */;
  %330 = reshape(%323, newshape=[5, 78]) /* ty=Tensor[(5, 78), float64] */;
  %331 = reshape(%325, newshape=[]) /* ty=uint64 */;
  %332 = reshape(%326, newshape=[105]) /* ty=Tensor[(105), int32] */;
  %333 = reshape(%327, newshape=[294]) /* ty=Tensor[(294), uint64] */;
  %334 = @func_3668(%328, %329, %330, %331, %332, %333) /* ty=(Tensor[(10, 4, 15), float32], Tensor[(13, 15, 2), uint32], Tensor[(5, 78), float64], Tensor[(105), int32], uint64, Tensor[(160, 1), uint64], Tensor[(105), int32], Tensor[(1694, 1), uint32], Tensor[(294), uint64]) */;
  %335 = mod(%292, %293) /* ty=Tensor[(7, 3, 5), float64] */;
  %336 = %296.4;
  %337 = logical_or(%308, %309) /* ty=Tensor[(7, 3, 5), bool] */;
  %338 = %334.3;
  (%335, %336, %337, %324, %var_5004, %var_5005, meta[relay.Constant][28] /* ty=uint32 */, meta[relay.Constant][29] /* ty=Tensor[(1694), uint32] */, %var_5008, %338, %var_5017, meta[relay.Constant][30] /* ty=Tensor[(65, 6), float64] */, meta[relay.Constant][31] /* ty=Tensor[(49, 6), uint64] */)
}

def @func_7926() -> Tensor[(7, 4, 2), int32] {
  %340 = fn () -> Tensor[(7, 4, 2), int32] {
    %339 = @func_7614() /* ty=(Tensor[(7, 4, 2), int32],) */;
    %339.0
  };
  %340() /* ty=Tensor[(7, 4, 2), int32] */
}

def @func_8650() -> (Tensor[(7, 4, 2), int32],) {
  @func_8648() /* ty=(Tensor[(7, 4, 2), int32],) */
}

def @func_3239(%var_3235: Tensor[(10, 5, 15), float32], %var_3236: Tensor[(15, 9), int16], %var_3237: Tensor[(675), int16], %var_3238: Tensor[(336), float32]) -> (Tensor[(105), float32], Tensor[(15, 9), int16], Tensor[(675), int16], Tensor[(105, 1), int32], Tensor[(336), float32], Tensor[(15, 9, 10), uint64], Tensor[(1350), uint64], Tensor[(10, 5, 15), float32], Tensor[(10, 5, 15), float64]) {
  %368 = fn (%var_3194: Tensor[(10, 5, 15), float32], %var_3199: Tensor[(15, 9), int16], %var_3200: Tensor[(675), int16], %var_3202: Tensor[(336), float32]) -> (Tensor[(105), float32], Tensor[(15, 9), int16], Tensor[(675), int16], Tensor[(105, 1), int32], Tensor[(336), float32], Tensor[(15, 9, 10), uint64], Tensor[(1350), uint64], Tensor[(10, 5, 15), float32], Tensor[(10, 5, 15), float64]) {
    %341 = cast(%var_3199, dtype="int16") /* ty=Tensor[(15, 9), int16] */;
    %342 = cast(%var_3200, dtype="int16") /* ty=Tensor[(675), int16] */;
    %343 = cast(meta[relay.Constant][32] /* ty=Tensor[(105, 1), int32] */, dtype="int32") /* ty=Tensor[(105, 1), int32] */;
    %344 = cast(%var_3202, dtype="float32") /* ty=Tensor[(336), float32] */;
    %345 = reshape(%341, newshape=[1, 15, 9]) /* ty=Tensor[(1, 15, 9), int16] */;
    %346 = reshape(%342, newshape=[5, 15, 9]) /* ty=Tensor[(5, 15, 9), int16] */;
    %347 = reshape(%343, newshape=[105]) /* ty=Tensor[(105), int32] */;
    %348 = reshape(%344, newshape=[2, 168]) /* ty=Tensor[(2, 168), float32] */;
    %349 = @func_1430(%345, %346, %347, %348) /* ty=(Tensor[(5, 15, 9), float32], Tensor[(?, 15, 7), float64], Tensor[(63), float32], Tensor[(1, 315), float32], uint32, Tensor[(2, 168), float32], Tensor[(105), float32]) */;
    %350 = cast(meta[relay.Constant][33] /* ty=Tensor[(1350), uint64] */, dtype="uint64") /* ty=Tensor[(1350), uint64] */;
    %351 = cast(meta[relay.Constant][33] /* ty=Tensor[(1350), uint64] */, dtype="uint64") /* ty=Tensor[(1350), uint64] */;
    %352 = reshape(%350, newshape=[15, 9, 10]) /* ty=Tensor[(15, 9, 10), uint64] */;
    %353 = reshape(%351, newshape=[15, 9, 10]) /* ty=Tensor[(15, 9, 10), uint64] */;
    %354 = @func_1006(%352, %353) /* ty=(Tensor[(15, 9, 10), uint64], Tensor[(15, 9, 10), int32]) */;
    %355 = cast(%var_3194, dtype="float32") /* ty=Tensor[(10, 5, 15), float32] */;
    %356 = atanh(%355) /* ty=Tensor[(10, 5, 15), float32] */;
    %357 = cast(%356, dtype="float32") /* ty=Tensor[(10, 5, 15), float32] */;
    %358 = sin(%357) /* ty=Tensor[(10, 5, 15), float32] */;
    %359 = cast(%356, dtype="float32") /* ty=Tensor[(10, 5, 15), float32] */;
    %360 = shape_of(%358, dtype="int32") /* ty=Tensor[(3), int32] */;
    %361 = cast(%358, dtype="float32") /* ty=Tensor[(10, 5, 15), float32] */;
    %362 = dyn.reshape(%359, %360, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %363 = cast(%358, dtype="float64") /* ty=Tensor[(10, 5, 15), float64] */;
    %364 = %349.6;
    %365 = %354.0;
    %366 = mod(%361, %362) /* ty=Tensor[(10, 5, 15), float32] */;
    %367 = sinh(%363) /* ty=Tensor[(10, 5, 15), float64] */;
    (%364, %var_3199, %var_3200, meta[relay.Constant][32] /* ty=Tensor[(105, 1), int32] */, %var_3202, %365, meta[relay.Constant][33] /* ty=Tensor[(1350), uint64] */, %366, %367)
  };
  %368(%var_3235, %var_3236, %var_3237, %var_3238) /* ty=(Tensor[(105), float32], Tensor[(15, 9), int16], Tensor[(675), int16], Tensor[(105, 1), int32], Tensor[(336), float32], Tensor[(15, 9, 10), uint64], Tensor[(1350), uint64], Tensor[(10, 5, 15), float32], Tensor[(10, 5, 15), float64]) */
}

def @func_5786(%var_5784: Tensor[(9, 5), float32]) -> Tensor[(9, 5), float32] {
  @func_5783(%var_5784) /* ty=Tensor[(9, 5), float32] */
}

def @func_7754() -> (Tensor[(7, 4, 2), int32],) {
  %371 = fn () -> (Tensor[(7, 4, 2), int32],) {
    %369 = @func_7614() /* ty=(Tensor[(7, 4, 2), int32],) */;
    %370 = %369.0;
    (%370,)
  };
  %371() /* ty=(Tensor[(7, 4, 2), int32],) */
}

def @func_4025(%var_4001: uint32, %var_4002: Tensor[(105), int32], %var_4003: Tensor[(495, 1), float32], %var_4008: Tensor[(195, 2), float64]) -> (Tensor[(1, 7, 12), float64], Tensor[(330), uint8], Tensor[(840), uint64], Tensor[(135), int16], Tensor[(105), int32], Tensor[(495, 1), float32], Tensor[(13, 15, 2), uint32], Tensor[(195, 2), uint16], Tensor[(15, 9, 10), uint64], Tensor[(10, 75), float32], Tensor[(675), int16], Tensor[(168, 2), float32]) {
  %372 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 7, 12), float64] */, dtype="float64") /* ty=Tensor[(1, 7, 12), float64] */;
  %373 = cast(meta[relay.Constant][35] /* ty=Tensor[(840), uint64] */, dtype="uint64") /* ty=Tensor[(840), uint64] */;
  %374 = cast(meta[relay.Constant][35] /* ty=Tensor[(840), uint64] */, dtype="uint64") /* ty=Tensor[(840), uint64] */;
  %375 = cast(meta[relay.Constant][36] /* ty=Tensor[(135), int16] */, dtype="int16") /* ty=Tensor[(135), int16] */;
  %376 = cast(%var_4001, dtype="uint32") /* ty=uint32 */;
  %377 = cast(%var_4002, dtype="int32") /* ty=Tensor[(105), int32] */;
  %378 = cast(%var_4003, dtype="float32") /* ty=Tensor[(495, 1), float32] */;
  %379 = reshape(%373, newshape=[7, 15, 8]) /* ty=Tensor[(7, 15, 8), uint64] */;
  %380 = reshape(%374, newshape=[7, 15, 8]) /* ty=Tensor[(7, 15, 8), uint64] */;
  %381 = reshape(%375, newshape=[15, 9]) /* ty=Tensor[(15, 9), int16] */;
  %382 = reshape(%376, newshape=[]) /* ty=uint32 */;
  %383 = reshape(%377, newshape=[21, 5]) /* ty=Tensor[(21, 5), int32] */;
  %384 = reshape(%378, newshape=[495]) /* ty=Tensor[(495), float32] */;
  %385 = @func_3852(%379, %380, %381, %382, %383, %384) /* ty=(Tensor[(7, 15, 8), bool], Tensor[(10, 5, 15), float64], Tensor[(15, 9), int16], Tensor[(675), int16], Tensor[(336), float32], Tensor[(6, 11, 5), uint16], Tensor[(330), uint8], uint32, Tensor[(11, 11, 14), bool], Tensor[(1694), uint32], Tensor[(21, 5), int32], Tensor[(750), float64], Tensor[(105), int32], Tensor[(100, 2), int64], Tensor[(495), float32], Tensor[(?, 15, 7), float64]) */;
  %386 = cast(%var_4008, dtype="float64") /* ty=Tensor[(195, 2), float64] */;
  %387 = reshape(%386, newshape=[13, 15, 2]) /* ty=Tensor[(13, 15, 2), float64] */;
  %388 = @func_2908(%387) /* ty=(Tensor[(13, 15, 2), float64], Tensor[(13, 15, 2), uint32]) */;
  %389 = cast(%var_4008, dtype="uint16") /* ty=Tensor[(195, 2), uint16] */;
  %390 = cast(%var_4001, dtype="uint16") /* ty=uint16 */;
  %391 = cast(meta[relay.Constant][37] /* ty=Tensor[(10, 75), float32] */, dtype="float32") /* ty=Tensor[(10, 75), float32] */;
  %392 = cast(meta[relay.Constant][36] /* ty=Tensor[(135), int16] */, dtype="int16") /* ty=Tensor[(135), int16] */;
  %393 = cast(meta[relay.Constant][38] /* ty=Tensor[(675), int16] */, dtype="int16") /* ty=Tensor[(675), int16] */;
  %394 = cast(meta[relay.Constant][39] /* ty=Tensor[(168, 2), float32] */, dtype="float32") /* ty=Tensor[(168, 2), float32] */;
  %395 = reshape(%391, newshape=[10, 5, 15]) /* ty=Tensor[(10, 5, 15), float32] */;
  %396 = reshape(%392, newshape=[15, 9]) /* ty=Tensor[(15, 9), int16] */;
  %397 = reshape(%393, newshape=[675]) /* ty=Tensor[(675), int16] */;
  %398 = reshape(%394, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %399 = @func_3234(%395, %396, %397, %398) /* ty=(Tensor[(105), float32], Tensor[(15, 9), int16], Tensor[(675), int16], Tensor[(105, 1), int32], Tensor[(336), float32], Tensor[(15, 9, 10), uint64], Tensor[(1350), uint64], Tensor[(10, 5, 15), float32], Tensor[(10, 5, 15), float64]) */;
  %400 = erf(%372) /* ty=Tensor[(1, 7, 12), float64] */;
  %401 = %385.6;
  %402 = %388.1;
  %403 = logical_xor(%389, %390) /* ty=Tensor[(195, 2), uint16] */;
  %404 = %399.5;
  (%400, %401, meta[relay.Constant][35] /* ty=Tensor[(840), uint64] */, meta[relay.Constant][36] /* ty=Tensor[(135), int16] */, %var_4002, %var_4003, %402, %403, %404, meta[relay.Constant][37] /* ty=Tensor[(10, 75), float32] */, meta[relay.Constant][38] /* ty=Tensor[(675), int16] */, meta[relay.Constant][39] /* ty=Tensor[(168, 2), float32] */)
}

def @main() -> (Tensor[(7, 4, 2), float64],) {
  %405 = @func_8206() /* ty=(Tensor[(7, 4, 2), int32],) */;
  %406 = %405.0;
  %407 = cast(meta[relay.Constant][40] /* ty=Tensor[(7, 4, 2), int32] */, dtype="float64") /* ty=Tensor[(7, 4, 2), float64] */;
  %408 = shape_of(%406, dtype="int32") /* ty=Tensor[(3), int32] */;
  %409 = cast(%406, dtype="float64") /* ty=Tensor[(7, 4, 2), float64] */;
  %410 = dyn.reshape(%407, %408, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %411 = power(%409, %410) /* ty=Tensor[(7, 4, 2), float64] */;
  (%411,)
}

def @func_5553(%var_5551: Tensor[(14, 8, 8), float32], %var_5552: Tensor[(14, 8, 8), float32]) -> Tensor[(14, 8, 8), float32] {
  %416 = fn (%var_5539: Tensor[(14, 8, 8), float32], %var_5540: Tensor[(14, 8, 8), float32]) -> Tensor[(14, 8, 8), float32] {
    %412 = cast(%var_5540, dtype="float32") /* ty=Tensor[(14, 8, 8), float32] */;
    %413 = shape_of(%var_5539, dtype="int32") /* ty=Tensor[(3), int32] */;
    %414 = cast(%var_5539, dtype="float32") /* ty=Tensor[(14, 8, 8), float32] */;
    %415 = dyn.reshape(%412, %413, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    mod(%414, %415) /* ty=Tensor[(14, 8, 8), float32] */
  };
  %416(%var_5551, %var_5552) /* ty=Tensor[(14, 8, 8), float32] */
}

def @func_7394(%var_7392: uint16) -> (Tensor[(13, 2, 13), uint16], Tensor[(13, 6, 5), float32], Tensor[(390), float32]) {
  @func_7391(%var_7392) /* ty=(Tensor[(13, 2, 13), uint16], Tensor[(13, 6, 5), float32], Tensor[(390), float32]) */
}

def @func_774(%var_769: uint64, %var_770: Tensor[(8, 2, 10), uint64], %var_771: Tensor[(105), int32], %var_772: Tensor[(1694), uint32], %var_773: Tensor[(6, 7, 7), uint64]) -> (Tensor[(8, 2, 10), bool], Tensor[(3, 11), float64], Tensor[(105), int32], Tensor[(1694), uint32], Tensor[(105), int32], Tensor[(6, 7, 7), float32], Tensor[(?, 15, 7), float64], Tensor[(11, 11, 14), uint8], Tensor[(11, 11, 14), bool]) {
  @func_767(%var_769, %var_770, %var_771, %var_772, %var_773) /* ty=(Tensor[(8, 2, 10), bool], Tensor[(3, 11), float64], Tensor[(105), int32], Tensor[(1694), uint32], Tensor[(105), int32], Tensor[(6, 7, 7), float32], Tensor[(?, 15, 7), float64], Tensor[(11, 11, 14), uint8], Tensor[(11, 11, 14), bool]) */
}

def @func_8763(%var_8761: Tensor[(5, 9, 11), float64]) -> (Tensor[(5, 9, 11), float64], Tensor[(7, 4, 2), int32]) {
  @func_8760(%var_8761) /* ty=(Tensor[(5, 9, 11), float64], Tensor[(7, 4, 2), int32]) */
}

def @func_7981() -> Tensor[(7, 4, 2), int32] {
  %418 = fn () -> Tensor[(7, 4, 2), int32] {
    %417 = @func_7614() /* ty=(Tensor[(7, 4, 2), int32],) */;
    %417.0
  };
  %418() /* ty=Tensor[(7, 4, 2), int32] */
}

def @func_1643(%var_1641: Tensor[(15, 11, 3), float32]) -> (Tensor[(15, 11, 3), bool], Tensor[(1, 315), float32], Tensor[(135), int16], Tensor[(675), int16], Tensor[(105), int32], Tensor[(336), float32]) {
  @func_1640(%var_1641) /* ty=(Tensor[(15, 11, 3), bool], Tensor[(1, 315), float32], Tensor[(135), int16], Tensor[(675), int16], Tensor[(105), int32], Tensor[(336), float32]) */
}

def @func_1435(%var_1431: Tensor[(1, 15, 9), int16], %var_1432: Tensor[(5, 15, 9), int16], %var_1433: Tensor[(105), int32], %var_1434: Tensor[(2, 168), float32]) -> (Tensor[(5, 15, 9), float32], Tensor[(?, 15, 7), float64], Tensor[(63), float32], Tensor[(1, 315), float32], uint32, Tensor[(2, 168), float32], Tensor[(105), float32]) {
  %438 = fn (%var_1401: Tensor[(1, 15, 9), int16], %var_1402: Tensor[(5, 15, 9), int16], %var_1420: Tensor[(105), int32], %var_1422: Tensor[(2, 168), float32]) -> (Tensor[(5, 15, 9), float32], Tensor[(?, 15, 7), float64], Tensor[(63), float32], Tensor[(1, 315), float32], uint32, Tensor[(2, 168), float32], Tensor[(105), float32]) {
    %419 = cast(%var_1401, dtype="bool") /* ty=Tensor[(1, 15, 9), bool] */;
    %420 = cast(%var_1402, dtype="bool") /* ty=Tensor[(5, 15, 9), bool] */;
    %421 = not_equal(%419, %420) /* ty=Tensor[(5, 15, 9), bool] */;
    %422 = cast(%421, dtype="float32") /* ty=Tensor[(5, 15, 9), float32] */;
    %423 = cast(meta[relay.Constant][41] /* ty=Tensor[(63), float32] */, dtype="float32") /* ty=Tensor[(63), float32] */;
    %424 = cast(meta[relay.Constant][42] /* ty=Tensor[(1, 315), float32] */, dtype="float32") /* ty=Tensor[(1, 315), float32] */;
    %425 = cast(%var_1420, dtype="int32") /* ty=Tensor[(105), int32] */;
    %426 = cast(meta[relay.Constant][43] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %427 = cast(%var_1422, dtype="float32") /* ty=Tensor[(2, 168), float32] */;
    %428 = reshape(%423, newshape=[9, 1, 7]) /* ty=Tensor[(9, 1, 7), float32] */;
    %429 = reshape(%424, newshape=[9, 5, 7]) /* ty=Tensor[(9, 5, 7), float32] */;
    %430 = reshape(%425, newshape=[105, 1]) /* ty=Tensor[(105, 1), int32] */;
    %431 = reshape(%426, newshape=[]) /* ty=uint32 */;
    %432 = reshape(%427, newshape=[336]) /* ty=Tensor[(336), float32] */;
    %433 = @func_1354(%428, %429, %430, %431, %432) /* ty=(Tensor[(?, 15, 7), float64], Tensor[(105, 1), int32], Tensor[(?, 15, 7), float64], uint32, Tensor[(1694), uint32], Tensor[(16, 3, 7), float32], Tensor[(336), float32], Tensor[(9, 5, 7), bool]) */;
    %434 = cast(%var_1420, dtype="float32") /* ty=Tensor[(105), float32] */;
    %435 = asinh(%422) /* ty=Tensor[(5, 15, 9), float32] */;
    %436 = %433.0;
    %437 = acosh(%434) /* ty=Tensor[(105), float32] */;
    (%435, %436, meta[relay.Constant][41] /* ty=Tensor[(63), float32] */, meta[relay.Constant][42] /* ty=Tensor[(1, 315), float32] */, meta[relay.Constant][43] /* ty=uint32 */, %var_1422, %437)
  };
  %438(%var_1431, %var_1432, %var_1433, %var_1434) /* ty=(Tensor[(5, 15, 9), float32], Tensor[(?, 15, 7), float64], Tensor[(63), float32], Tensor[(1, 315), float32], uint32, Tensor[(2, 168), float32], Tensor[(105), float32]) */
}

def @func_7895(%var_7893: Tensor[(490), float32], %var_7894: Tensor[(676), int32]) -> (Tensor[(7, 4, 2), int32], Tensor[(1, 4, 11), bool], Tensor[(490), float32], int64, Tensor[(676), int32]) {
  %449 = fn (%var_7887: Tensor[(490), float32], %var_7889: Tensor[(676), int32]) -> (Tensor[(7, 4, 2), int32], Tensor[(1, 4, 11), bool], Tensor[(490), float32], int64, Tensor[(676), int32]) {
    %439 = @func_7614() /* ty=(Tensor[(7, 4, 2), int32],) */;
    %440 = cast(%var_7887, dtype="float32") /* ty=Tensor[(490), float32] */;
    %441 = cast(-5 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %442 = cast(%var_7889, dtype="int32") /* ty=Tensor[(676), int32] */;
    %443 = reshape(%440, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
    %444 = reshape(%441, newshape=[]) /* ty=int64 */;
    %445 = reshape(%442, newshape=[676]) /* ty=Tensor[(676), int32] */;
    %446 = @func_7461(%443, %444, %445) /* ty=(Tensor[(4, 1, 10), int64], Tensor[(40), int64], Tensor[(7, 10, 7), uint16], Tensor[(1, 4, 11), bool], Tensor[(44), bool], Tensor[(13, 4, 13), int32], Tensor[(676), int32]) */;
    %447 = %439.0;
    %448 = %446.3;
    (%447, %448, %var_7887, -5 /* ty=int64 */, %var_7889)
  };
  %449(%var_7893, %var_7894) /* ty=(Tensor[(7, 4, 2), int32], Tensor[(1, 4, 11), bool], Tensor[(490), float32], int64, Tensor[(676), int32]) */
}

def @func_5602(%var_5599: Tensor[(2, 8, 7), float64], %var_5600: Tensor[(2, 8, 7), float64], %var_5601: Tensor[(1350), uint64]) -> (Tensor[(2, 8, 7), float64], Tensor[(2, 8, 7), float32], Tensor[(15, 9, 10), int32], Tensor[(1350), uint64]) {
  %463 = fn (%var_5573: Tensor[(2, 8, 7), float64], %var_5574: Tensor[(2, 8, 7), float64], %var_5590: Tensor[(1350), uint64]) -> (Tensor[(2, 8, 7), float64], Tensor[(2, 8, 7), float32], Tensor[(15, 9, 10), int32], Tensor[(1350), uint64]) {
    %450 = cast(%var_5574, dtype="float64") /* ty=Tensor[(2, 8, 7), float64] */;
    %451 = shape_of(%var_5573, dtype="int32") /* ty=Tensor[(3), int32] */;
    %452 = cast(%var_5573, dtype="float64") /* ty=Tensor[(2, 8, 7), float64] */;
    %453 = dyn.reshape(%450, %451, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %454 = cast(%var_5573, dtype="float32") /* ty=Tensor[(2, 8, 7), float32] */;
    %455 = cast(%var_5590, dtype="uint64") /* ty=Tensor[(1350), uint64] */;
    %456 = cast(%var_5590, dtype="uint64") /* ty=Tensor[(1350), uint64] */;
    %457 = reshape(%455, newshape=[15, 9, 10]) /* ty=Tensor[(15, 9, 10), uint64] */;
    %458 = reshape(%456, newshape=[15, 9, 10]) /* ty=Tensor[(15, 9, 10), uint64] */;
    %459 = @func_1006(%457, %458) /* ty=(Tensor[(15, 9, 10), uint64], Tensor[(15, 9, 10), int32]) */;
    %460 = mod(%452, %453) /* ty=Tensor[(2, 8, 7), float64] */;
    %461 = exp(%454) /* ty=Tensor[(2, 8, 7), float32] */;
    %462 = %459.1;
    (%460, %461, %462, %var_5590)
  };
  %463(%var_5599, %var_5600, %var_5601) /* ty=(Tensor[(2, 8, 7), float64], Tensor[(2, 8, 7), float32], Tensor[(15, 9, 10), int32], Tensor[(1350), uint64]) */
}

def @func_5842(%var_5841: Tensor[(3, 12, 1), float64]) -> Tensor[(3, 12, 1), float64] {
  %465 = fn (%var_5829: Tensor[(3, 12, 1), float64]) -> Tensor[(3, 12, 1), float64] {
    %464 = cast(%var_5829, dtype="float64") /* ty=Tensor[(3, 12, 1), float64] */;
    rsqrt(%464) /* ty=Tensor[(3, 12, 1), float64] */
  };
  %465(%var_5841) /* ty=Tensor[(3, 12, 1), float64] */
}

def @func_1009(%var_1007: Tensor[(15, 9, 10), uint64], %var_1008: Tensor[(15, 9, 10), uint64]) -> (Tensor[(15, 9, 10), uint64], Tensor[(15, 9, 10), int32]) {
  %476 = fn (%var_966: Tensor[(15, 9, 10), uint64], %var_967: Tensor[(15, 9, 10), uint64]) -> (Tensor[(15, 9, 10), uint64], Tensor[(15, 9, 10), int32]) {
    %466 = cast(%var_967, dtype="uint64") /* ty=Tensor[(15, 9, 10), uint64] */;
    %467 = shape_of(%var_966, dtype="int32") /* ty=Tensor[(3), int32] */;
    %468 = cast(%var_966, dtype="uint64") /* ty=Tensor[(15, 9, 10), uint64] */;
    %469 = dyn.reshape(%466, %467, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %470 = cast(%var_967, dtype="int32") /* ty=Tensor[(15, 9, 10), int32] */;
    %471 = shape_of(%var_966, dtype="int32") /* ty=Tensor[(3), int32] */;
    %472 = cast(%var_966, dtype="int32") /* ty=Tensor[(15, 9, 10), int32] */;
    %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %474 = bitwise_xor(%468, %469) /* ty=Tensor[(15, 9, 10), uint64] */;
    %475 = bitwise_or(%472, %473) /* ty=Tensor[(15, 9, 10), int32] */;
    (%474, %475)
  };
  %476(%var_1007, %var_1008) /* ty=(Tensor[(15, 9, 10), uint64], Tensor[(15, 9, 10), int32]) */
}

def @func_2910(%var_2909: Tensor[(13, 15, 2), float64]) -> (Tensor[(13, 15, 2), float64], Tensor[(13, 15, 2), uint32]) {
  %484 = fn (%var_2868: Tensor[(13, 15, 2), float64]) -> (Tensor[(13, 15, 2), float64], Tensor[(13, 15, 2), uint32]) {
    %477 = cast(%var_2868, dtype="float64") /* ty=Tensor[(13, 15, 2), float64] */;
    %478 = cast(meta[relay.Constant][44] /* ty=Tensor[(13, 15, 2), float64] */, dtype="uint32") /* ty=Tensor[(13, 15, 2), uint32] */;
    %479 = shape_of(%var_2868, dtype="int32") /* ty=Tensor[(3), int32] */;
    %480 = cast(%var_2868, dtype="uint32") /* ty=Tensor[(13, 15, 2), uint32] */;
    %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %482 = cos(%477) /* ty=Tensor[(13, 15, 2), float64] */;
    %483 = right_shift(%480, %481) /* ty=Tensor[(13, 15, 2), uint32] */;
    (%482, %483)
  };
  %484(%var_2909) /* ty=(Tensor[(13, 15, 2), float64], Tensor[(13, 15, 2), uint32]) */
}

def @func_1104(%var_1092: Tensor[(16, 3, 7), float32]) -> Tensor[(16, 3, 7), float32] {
  %485 = cast(%var_1092, dtype="float32") /* ty=Tensor[(16, 3, 7), float32] */;
  rsqrt(%485) /* ty=Tensor[(16, 3, 7), float32] */
}

def @func_8478(%var_8476: Tensor[(40), int64]) -> (Tensor[(7, 4, 2), int32], Tensor[(4, 1, 10), int64], int64, Tensor[(40), int64]) {
  @func_8475(%var_8476) /* ty=(Tensor[(7, 4, 2), int32], Tensor[(4, 1, 10), int64], int64, Tensor[(40), int64]) */
}

def @func_5036(%var_5030: Tensor[(7, 3, 5), uint16], %var_5031: Tensor[(7, 3, 5), float32], %var_5032: Tensor[(480), float64], %var_5033: Tensor[(495), float32], %var_5034: Tensor[(40), int64], %var_5035: Tensor[(600), uint16]) -> (Tensor[(7, 3, 5), float64], Tensor[(?, 15, 7), float64], Tensor[(7, 3, 5), bool], uint32, Tensor[(480), float64], Tensor[(495), float32], uint32, Tensor[(1694), uint32], Tensor[(40), int64], Tensor[(105), int32], Tensor[(600), uint16], Tensor[(65, 6), float64], Tensor[(49, 6), uint64]) {
  @func_5028(%var_5030, %var_5031, %var_5032, %var_5033, %var_5034, %var_5035) /* ty=(Tensor[(7, 3, 5), float64], Tensor[(?, 15, 7), float64], Tensor[(7, 3, 5), bool], uint32, Tensor[(480), float64], Tensor[(495), float32], uint32, Tensor[(1694), uint32], Tensor[(40), int64], Tensor[(105), int32], Tensor[(600), uint16], Tensor[(65, 6), float64], Tensor[(49, 6), uint64]) */
}

def @func_4396(%var_4394: Tensor[(7, 14, 8), int64], %var_4395: Tensor[(7, 14, 8), int64]) -> (Tensor[(7, 14, 8), int64],) {
  @func_4392(%var_4394, %var_4395) /* ty=(Tensor[(7, 14, 8), int64],) */
}

def @func_6484(%var_6482: Tensor[(13, 6, 5), float32]) -> (Tensor[(13, 6, 5), float32], Tensor[(13, 6, 5), uint64]) {
  @func_6481(%var_6482) /* ty=(Tensor[(13, 6, 5), float32], Tensor[(13, 6, 5), uint64]) */
}

def @func_6639(%var_6637: Tensor[(15, 11, 14), float32]) -> (Tensor[(15, 11, 14), float32], Tensor[(15, 11, 14), bool]) {
  @func_6636(%var_6637) /* ty=(Tensor[(15, 11, 14), float32], Tensor[(15, 11, 14), bool]) */
}

def @func_7461(%var_7421: Tensor[(7, 10, 7), float32], %var_7425: int64, %var_7454: Tensor[(676), int32]) -> (Tensor[(4, 1, 10), int64], Tensor[(40), int64], Tensor[(7, 10, 7), uint16], Tensor[(1, 4, 11), bool], Tensor[(44), bool], Tensor[(13, 4, 13), int32], Tensor[(676), int32]) {
  %486 = cast(%var_7425, dtype="int64") /* ty=int64 */;
  %487 = cast(meta[relay.Constant][45] /* ty=Tensor[(40), int64] */, dtype="int64") /* ty=Tensor[(40), int64] */;
  %488 = reshape(%486, newshape=[]) /* ty=int64 */;
  %489 = reshape(%487, newshape=[4, 1, 10]) /* ty=Tensor[(4, 1, 10), int64] */;
  %490 = @func_4760(%488, %489) /* ty=(Tensor[(4, 1, 10), int64],) */;
  %491 = cast(%var_7421, dtype="float32") /* ty=Tensor[(7, 10, 7), float32] */;
  %492 = sigmoid(%491) /* ty=Tensor[(7, 10, 7), float32] */;
  %493 = cast(%492, dtype="uint16") /* ty=Tensor[(7, 10, 7), uint16] */;
  %494 = cast(%var_7425, dtype="uint16") /* ty=uint16 */;
  %495 = cast(%var_7425, dtype="bool") /* ty=bool */;
  %496 = cast(meta[relay.Constant][46] /* ty=Tensor[(44), bool] */, dtype="bool") /* ty=Tensor[(44), bool] */;
  %497 = reshape(%495, newshape=[]) /* ty=bool */;
  %498 = reshape(%496, newshape=[1, 4, 11]) /* ty=Tensor[(1, 4, 11), bool] */;
  %499 = @func_1874(%497, %498) /* ty=(Tensor[(1, 4, 11), bool], Tensor[(15, 9, 10), uint64], Tensor[(1350), uint64]) */;
  %500 = cast(%var_7454, dtype="int32") /* ty=Tensor[(676), int32] */;
  %501 = reshape(%500, newshape=[13, 4, 13]) /* ty=Tensor[(13, 4, 13), int32] */;
  %502 = %490.0;
  %503 = maximum(%493, %494) /* ty=Tensor[(7, 10, 7), uint16] */;
  %504 = %499.0;
  %505 = @func_5526(%501) /* ty=Tensor[(13, 4, 13), int32] */;
  (%502, meta[relay.Constant][45] /* ty=Tensor[(40), int64] */, %503, %504, meta[relay.Constant][46] /* ty=Tensor[(44), bool] */, %505, %var_7454)
}

def @func_4814(%var_4786: Tensor[(5, 8, 12), float64], %var_4791: Tensor[(495), float32], %var_4805: uint32, %var_4806: Tensor[(1694), uint32], %var_4811: Tensor[(40), int64]) -> (Tensor[(15, 11, 3), bool], Tensor[(495), float32], Tensor[(5, 8, 12), float32], Tensor[(1694), uint32], Tensor[(490), int8], uint32, Tensor[(1694), uint32], Tensor[(105), int32], Tensor[(4, 1, 10), int64], Tensor[(40), int64]) {
  %506 = cast(%var_4791, dtype="float32") /* ty=Tensor[(495), float32] */;
  %507 = reshape(%506, newshape=[15, 11, 3]) /* ty=Tensor[(15, 11, 3), float32] */;
  %508 = @func_1640(%507) /* ty=(Tensor[(15, 11, 3), bool], Tensor[(1, 315), float32], Tensor[(135), int16], Tensor[(675), int16], Tensor[(105), int32], Tensor[(336), float32]) */;
  %509 = cast(%var_4786, dtype="float64") /* ty=Tensor[(5, 8, 12), float64] */;
  %510 = sinh(%509) /* ty=Tensor[(5, 8, 12), float64] */;
  %511 = cast(meta[relay.Constant][47] /* ty=Tensor[(5, 8, 12), float64] */, dtype="float32") /* ty=Tensor[(5, 8, 12), float32] */;
  %512 = shape_of(%510, dtype="int32") /* ty=Tensor[(3), int32] */;
  %513 = cast(%510, dtype="float32") /* ty=Tensor[(5, 8, 12), float32] */;
  %514 = dyn.reshape(%511, %512, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %515 = cast(meta[relay.Constant][48] /* ty=Tensor[(490), int8] */, dtype="int8") /* ty=Tensor[(490), int8] */;
  %516 = cast(meta[relay.Constant][48] /* ty=Tensor[(490), int8] */, dtype="int8") /* ty=Tensor[(490), int8] */;
  %517 = cast(%var_4805, dtype="uint32") /* ty=uint32 */;
  %518 = cast(%var_4806, dtype="uint32") /* ty=Tensor[(1694), uint32] */;
  %519 = cast(meta[relay.Constant][49] /* ty=Tensor[(105), int32] */, dtype="int32") /* ty=Tensor[(105), int32] */;
  %520 = reshape(%515, newshape=[14, 5, 7]) /* ty=Tensor[(14, 5, 7), int8] */;
  %521 = reshape(%516, newshape=[14, 5, 7]) /* ty=Tensor[(14, 5, 7), int8] */;
  %522 = reshape(%517, newshape=[]) /* ty=uint32 */;
  %523 = reshape(%518, newshape=[1694]) /* ty=Tensor[(1694), uint32] */;
  %524 = reshape(%519, newshape=[105]) /* ty=Tensor[(105), int32] */;
  %525 = @func_4667(%520, %521, %522, %523, %524) /* ty=(Tensor[(14, 5, 7), bool], Tensor[(14, 5, 7), float32], Tensor[(?, 15, 7), float64], uint32, Tensor[(1694), uint32], Tensor[(105), int32]) */;
  %526 = cast(%var_4805, dtype="int64") /* ty=int64 */;
  %527 = cast(%var_4811, dtype="int64") /* ty=Tensor[(40), int64] */;
  %528 = reshape(%526, newshape=[]) /* ty=int64 */;
  %529 = reshape(%527, newshape=[4, 1, 10]) /* ty=Tensor[(4, 1, 10), int64] */;
  %530 = @func_4760(%528, %529) /* ty=(Tensor[(4, 1, 10), int64],) */;
  %531 = %508.0;
  %532 = floor_mod(%513, %514) /* ty=Tensor[(5, 8, 12), float32] */;
  %533 = %525.4;
  %534 = %530.0;
  (%531, %var_4791, %532, %533, meta[relay.Constant][48] /* ty=Tensor[(490), int8] */, %var_4805, %var_4806, meta[relay.Constant][49] /* ty=Tensor[(105), int32] */, %534, %var_4811)
}

def @func_3852(%var_3792: Tensor[(7, 15, 8), uint64], %var_3793: Tensor[(7, 15, 8), uint64], %var_3800: Tensor[(15, 9), int16], %var_3810: uint32, %var_3825: Tensor[(21, 5), int32], %var_3836: Tensor[(495), float32]) -> (Tensor[(7, 15, 8), bool], Tensor[(10, 5, 15), float64], Tensor[(15, 9), int16], Tensor[(675), int16], Tensor[(336), float32], Tensor[(6, 11, 5), uint16], Tensor[(330), uint8], uint32, Tensor[(11, 11, 14), bool], Tensor[(1694), uint32], Tensor[(21, 5), int32], Tensor[(750), float64], Tensor[(105), int32], Tensor[(100, 2), int64], Tensor[(495), float32], Tensor[(?, 15, 7), float64]) {
  %535 = cast(%var_3793, dtype="bool") /* ty=Tensor[(7, 15, 8), bool] */;
  %536 = shape_of(%var_3792, dtype="int32") /* ty=Tensor[(3), int32] */;
  %537 = cast(%var_3792, dtype="bool") /* ty=Tensor[(7, 15, 8), bool] */;
  %538 = dyn.reshape(%535, %536, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %539 = cast(meta[relay.Constant][50] /* ty=Tensor[(750), float32] */, dtype="float32") /* ty=Tensor[(750), float32] */;
  %540 = cast(%var_3800, dtype="int16") /* ty=Tensor[(15, 9), int16] */;
  %541 = cast(meta[relay.Constant][51] /* ty=Tensor[(675), int16] */, dtype="int16") /* ty=Tensor[(675), int16] */;
  %542 = cast(meta[relay.Constant][52] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %543 = reshape(%539, newshape=[10, 5, 15]) /* ty=Tensor[(10, 5, 15), float32] */;
  %544 = reshape(%540, newshape=[15, 9]) /* ty=Tensor[(15, 9), int16] */;
  %545 = reshape(%541, newshape=[675]) /* ty=Tensor[(675), int16] */;
  %546 = reshape(%542, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %547 = @func_3234(%543, %544, %545, %546) /* ty=(Tensor[(105), float32], Tensor[(15, 9), int16], Tensor[(675), int16], Tensor[(105, 1), int32], Tensor[(336), float32], Tensor[(15, 9, 10), uint64], Tensor[(1350), uint64], Tensor[(10, 5, 15), float32], Tensor[(10, 5, 15), float64]) */;
  %548 = cast(meta[relay.Constant][53] /* ty=Tensor[(330), uint8] */, dtype="uint8") /* ty=Tensor[(330), uint8] */;
  %549 = cast(meta[relay.Constant][52] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %550 = cast(%var_3810, dtype="uint32") /* ty=uint32 */;
  %551 = reshape(%548, newshape=[6, 11, 5]) /* ty=Tensor[(6, 11, 5), uint8] */;
  %552 = reshape(%549, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %553 = reshape(%550, newshape=[]) /* ty=uint32 */;
  %554 = @func_2633(%551, %552, %553) /* ty=(Tensor[(16, 3, 7), float32], Tensor[(336), float32], Tensor[(1, 315), float32], Tensor[(495), float32], Tensor[(?, 15, 7), float64], Tensor[(63), float32], Tensor[(105), int32], Tensor[(6, 11, 5), uint16]) */;
  %555 = cast(%var_3810, dtype="uint32") /* ty=uint32 */;
  %556 = cast(meta[relay.Constant][54] /* ty=Tensor[(1694), uint32] */, dtype="uint32") /* ty=Tensor[(1694), uint32] */;
  %557 = cast(%var_3825, dtype="int32") /* ty=Tensor[(21, 5), int32] */;
  %558 = reshape(%555, newshape=[]) /* ty=uint32 */;
  %559 = reshape(%556, newshape=[11, 11, 14]) /* ty=Tensor[(11, 11, 14), uint32] */;
  %560 = reshape(%557, newshape=[105]) /* ty=Tensor[(105), int32] */;
  %561 = @func_597(%558, %559, %560) /* ty=(Tensor[(11, 11, 14), bool], Tensor[(?, 15, 7), float64], Tensor[(105), int32]) */;
  %562 = cast(meta[relay.Constant][50] /* ty=Tensor[(750), float32] */, dtype="float64") /* ty=Tensor[(750), float64] */;
  %563 = cast(meta[relay.Constant][55] /* ty=Tensor[(100, 2), int64] */, dtype="int64") /* ty=Tensor[(100, 2), int64] */;
  %564 = cast(meta[relay.Constant][55] /* ty=Tensor[(100, 2), int64] */, dtype="int64") /* ty=Tensor[(100, 2), int64] */;
  %565 = cast(%var_3825, dtype="int32") /* ty=Tensor[(21, 5), int32] */;
  %566 = cast(%var_3836, dtype="float32") /* ty=Tensor[(495), float32] */;
  %567 = reshape(%563, newshape=[4, 10, 5]) /* ty=Tensor[(4, 10, 5), int64] */;
  %568 = reshape(%564, newshape=[4, 10, 5]) /* ty=Tensor[(4, 10, 5), int64] */;
  %569 = reshape(%565, newshape=[105]) /* ty=Tensor[(105), int32] */;
  %570 = reshape(%566, newshape=[495]) /* ty=Tensor[(495), float32] */;
  %571 = @func_2679(%567, %568, %569, %570) /* ty=(Tensor[(4, 10, 5), int64], Tensor[(?, 15, 7), float64], Tensor[(105), int32], Tensor[(1, 315), float32], Tensor[(495), float32]) */;
  %572 = cast(%var_3825, dtype="int32") /* ty=Tensor[(21, 5), int32] */;
  %573 = cast(%var_3825, dtype="int32") /* ty=Tensor[(21, 5), int32] */;
  %574 = reshape(%572, newshape=[1, 15, 7]) /* ty=Tensor[(1, 15, 7), int32] */;
  %575 = reshape(%573, newshape=[1, 15, 7]) /* ty=Tensor[(1, 15, 7), int32] */;
  %576 = equal(%537, %538) /* ty=Tensor[(7, 15, 8), bool] */;
  %577 = %547.8;
  %578 = %554.7;
  %579 = %561.0;
  %580 = atanh(%562) /* ty=Tensor[(750), float64] */;
  %581 = %571.2;
  %582 = @func_200(%574, %575) /* ty=Tensor[(?, 15, 7), float64] */;
  (%576, %577, %var_3800, meta[relay.Constant][51] /* ty=Tensor[(675), int16] */, meta[relay.Constant][52] /* ty=Tensor[(336), float32] */, %578, meta[relay.Constant][53] /* ty=Tensor[(330), uint8] */, %var_3810, %579, meta[relay.Constant][54] /* ty=Tensor[(1694), uint32] */, %var_3825, %580, %581, meta[relay.Constant][55] /* ty=Tensor[(100, 2), int64] */, %var_3836, %582)
}

def @func_1107(%var_1105: Tensor[(16, 3, 7), float32]) -> Tensor[(16, 3, 7), float32] {
  @func_1104(%var_1105) /* ty=Tensor[(16, 3, 7), float32] */
}

def @func_8648() -> (Tensor[(7, 4, 2), int32],) {
  %583 = @func_7614() /* ty=(Tensor[(7, 4, 2), int32],) */;
  %584 = %583.0;
  (%584,)
}

def @func_1640(%var_1620: Tensor[(15, 11, 3), float32]) -> (Tensor[(15, 11, 3), bool], Tensor[(1, 315), float32], Tensor[(135), int16], Tensor[(675), int16], Tensor[(105), int32], Tensor[(336), float32]) {
  %585 = cast(%var_1620, dtype="float32") /* ty=Tensor[(15, 11, 3), float32] */;
  %586 = erf(%585) /* ty=Tensor[(15, 11, 3), float32] */;
  %587 = cast(%var_1620, dtype="bool") /* ty=Tensor[(15, 11, 3), bool] */;
  %588 = shape_of(%586, dtype="int32") /* ty=Tensor[(3), int32] */;
  %589 = cast(%586, dtype="bool") /* ty=Tensor[(15, 11, 3), bool] */;
  %590 = dyn.reshape(%587, %588, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %591 = cast(meta[relay.Constant][56] /* ty=Tensor[(135), int16] */, dtype="int16") /* ty=Tensor[(135), int16] */;
  %592 = cast(meta[relay.Constant][57] /* ty=Tensor[(675), int16] */, dtype="int16") /* ty=Tensor[(675), int16] */;
  %593 = cast(meta[relay.Constant][58] /* ty=Tensor[(105), int32] */, dtype="int32") /* ty=Tensor[(105), int32] */;
  %594 = cast(meta[relay.Constant][59] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %595 = reshape(%591, newshape=[1, 15, 9]) /* ty=Tensor[(1, 15, 9), int16] */;
  %596 = reshape(%592, newshape=[5, 15, 9]) /* ty=Tensor[(5, 15, 9), int16] */;
  %597 = reshape(%593, newshape=[105]) /* ty=Tensor[(105), int32] */;
  %598 = reshape(%594, newshape=[2, 168]) /* ty=Tensor[(2, 168), float32] */;
  %599 = @func_1430(%595, %596, %597, %598) /* ty=(Tensor[(5, 15, 9), float32], Tensor[(?, 15, 7), float64], Tensor[(63), float32], Tensor[(1, 315), float32], uint32, Tensor[(2, 168), float32], Tensor[(105), float32]) */;
  %600 = logical_and(%589, %590) /* ty=Tensor[(15, 11, 3), bool] */;
  %601 = %599.3;
  (%600, %601, meta[relay.Constant][56] /* ty=Tensor[(135), int16] */, meta[relay.Constant][57] /* ty=Tensor[(675), int16] */, meta[relay.Constant][58] /* ty=Tensor[(105), int32] */, meta[relay.Constant][59] /* ty=Tensor[(336), float32] */)
}

def @func_5783(%var_5775: Tensor[(9, 5), float32]) -> Tensor[(9, 5), float32] {
  %602 = cast(%var_5775, dtype="float32") /* ty=Tensor[(9, 5), float32] */;
  erf(%602) /* ty=Tensor[(9, 5), float32] */
}

def @func_8890() -> Tensor[(7, 4, 2), int32] {
  %603 = fn () -> Tensor[(7, 4, 2), int32] {
    @func_8239() /* ty=Tensor[(7, 4, 2), int32] */
  };
  %603() /* ty=Tensor[(7, 4, 2), int32] */
}

def @func_597(%var_532: uint32, %var_533: Tensor[(11, 11, 14), uint32], %var_583: Tensor[(105), int32]) -> (Tensor[(11, 11, 14), bool], Tensor[(?, 15, 7), float64], Tensor[(105), int32]) {
  %604 = cast(%var_532, dtype="bool") /* ty=bool */;
  %605 = cast(%var_533, dtype="bool") /* ty=Tensor[(11, 11, 14), bool] */;
  %606 = cast(%var_583, dtype="int32") /* ty=Tensor[(105), int32] */;
  %607 = cast(%var_583, dtype="int32") /* ty=Tensor[(105), int32] */;
  %608 = reshape(%606, newshape=[1, 15, 7]) /* ty=Tensor[(1, 15, 7), int32] */;
  %609 = reshape(%607, newshape=[1, 15, 7]) /* ty=Tensor[(1, 15, 7), int32] */;
  %610 = less(%604, %605) /* ty=Tensor[(11, 11, 14), bool] */;
  %611 = @func_200(%608, %609) /* ty=Tensor[(?, 15, 7), float64] */;
  (%610, %611, %var_583)
}

def @func_7862() -> (Tensor[(7, 4, 2), float64],) {
  %612 = @func_7614() /* ty=(Tensor[(7, 4, 2), int32],) */;
  %613 = %612.0;
  %614 = cast(%613, dtype="float64") /* ty=Tensor[(7, 4, 2), float64] */;
  %615 = sigmoid(%614) /* ty=Tensor[(7, 4, 2), float64] */;
  (%615,)
}

def @func_4763(%var_4761: int64, %var_4762: Tensor[(4, 1, 10), int64]) -> (Tensor[(4, 1, 10), int64],) {
  %619 = fn (%var_4749: int64, %var_4750: Tensor[(4, 1, 10), int64]) -> (Tensor[(4, 1, 10), int64],) {
    %616 = cast(%var_4749, dtype="int64") /* ty=int64 */;
    %617 = cast(%var_4750, dtype="int64") /* ty=Tensor[(4, 1, 10), int64] */;
    %618 = maximum(%616, %617) /* ty=Tensor[(4, 1, 10), int64] */;
    (%618,)
  };
  %619(%var_4761, %var_4762) /* ty=(Tensor[(4, 1, 10), int64],) */
}

def @func_8332(%var_8330: bool, %var_8331: Tensor[(16, 16, 16), bool]) -> (Tensor[(16, 16, 16), bool], Tensor[(13, 2, 13), uint16], Tensor[(13, 4, 13), int32], Tensor[(676), int32]) {
  %630 = fn (%var_8294: bool, %var_8295: Tensor[(16, 16, 16), bool]) -> (Tensor[(16, 16, 16), bool], Tensor[(13, 2, 13), uint16], Tensor[(13, 4, 13), int32], Tensor[(676), int32]) {
    %620 = cast(%var_8294, dtype="bool") /* ty=bool */;
    %621 = cast(%var_8295, dtype="bool") /* ty=Tensor[(16, 16, 16), bool] */;
    %622 = cast(%var_8294, dtype="uint16") /* ty=uint16 */;
    %623 = reshape(%622, newshape=[]) /* ty=uint16 */;
    %624 = @func_7391(%623) /* ty=(Tensor[(13, 2, 13), uint16], Tensor[(13, 6, 5), float32], Tensor[(390), float32]) */;
    %625 = cast(meta[relay.Constant][60] /* ty=Tensor[(676), int32] */, dtype="int32") /* ty=Tensor[(676), int32] */;
    %626 = reshape(%625, newshape=[13, 4, 13]) /* ty=Tensor[(13, 4, 13), int32] */;
    %627 = logical_or(%620, %621) /* ty=Tensor[(16, 16, 16), bool] */;
    %628 = %624.0;
    %629 = @func_5526(%626) /* ty=Tensor[(13, 4, 13), int32] */;
    (%627, %628, %629, meta[relay.Constant][60] /* ty=Tensor[(676), int32] */)
  };
  %630(%var_8330, %var_8331) /* ty=(Tensor[(16, 16, 16), bool], Tensor[(13, 2, 13), uint16], Tensor[(13, 4, 13), int32], Tensor[(676), int32]) */
}

def @func_4031(%var_4027: uint32, %var_4028: Tensor[(105), int32], %var_4029: Tensor[(495, 1), float32], %var_4030: Tensor[(195, 2), float64]) -> (Tensor[(1, 7, 12), float64], Tensor[(330), uint8], Tensor[(840), uint64], Tensor[(135), int16], Tensor[(105), int32], Tensor[(495, 1), float32], Tensor[(13, 15, 2), uint32], Tensor[(195, 2), uint16], Tensor[(15, 9, 10), uint64], Tensor[(10, 75), float32], Tensor[(675), int16], Tensor[(168, 2), float32]) {
  @func_4025(%var_4027, %var_4028, %var_4029, %var_4030) /* ty=(Tensor[(1, 7, 12), float64], Tensor[(330), uint8], Tensor[(840), uint64], Tensor[(135), int16], Tensor[(105), int32], Tensor[(495, 1), float32], Tensor[(13, 15, 2), uint32], Tensor[(195, 2), uint16], Tensor[(15, 9, 10), uint64], Tensor[(10, 75), float32], Tensor[(675), int16], Tensor[(168, 2), float32]) */
}

def @func_8411(%var_8409: Tensor[(2, 16, 9), float64], %var_8410: Tensor[(2, 16, 9), float64]) -> Tensor[(2, 16, 9), float64] {
  %635 = fn (%var_8403: Tensor[(2, 16, 9), float64], %var_8404: Tensor[(2, 16, 9), float64]) -> Tensor[(2, 16, 9), float64] {
    %631 = cast(%var_8404, dtype="float64") /* ty=Tensor[(2, 16, 9), float64] */;
    %632 = shape_of(%var_8403, dtype="int32") /* ty=Tensor[(3), int32] */;
    %633 = cast(%var_8403, dtype="float64") /* ty=Tensor[(2, 16, 9), float64] */;
    %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    mod(%633, %634) /* ty=Tensor[(2, 16, 9), float64] */
  };
  %635(%var_8409, %var_8410) /* ty=Tensor[(2, 16, 9), float64] */
}

def @func_8278(%var_8275: Tensor[(7, 4, 2), int32], %var_8276: int64, %var_8277: Tensor[(2, 20), int64]) -> (Tensor[(7, 4, 2), int16], Tensor[(4, 1, 10), int64], int64, Tensor[(2, 20), int64]) {
  @func_8273(%var_8275, %var_8276, %var_8277) /* ty=(Tensor[(7, 4, 2), int16], Tensor[(4, 1, 10), int64], int64, Tensor[(2, 20), int64]) */
}

def @func_8901() -> (Tensor[(7, 4, 2), int32],) {
  @func_8899() /* ty=(Tensor[(7, 4, 2), int32],) */
}

def @func_7717(%var_7711: Tensor[(840), uint64], %var_7712: Tensor[(135), int16], %var_7713: Tensor[(105), int32], %var_7714: Tensor[(495), float32], %var_7715: Tensor[(672), int32], %var_7716: Tensor[(1694), uint32]) -> (Tensor[(7, 4, 2), int32], Tensor[(100, 2), int64], Tensor[(840), uint64], Tensor[(135), int16], uint32, Tensor[(105), int32], Tensor[(2, 15, 9), float32], Tensor[(90, 3), float32], Tensor[(1, 4, 11), bool], Tensor[(44), bool], Tensor[(672), int32], Tensor[(3360), int32], Tensor[(672), int32], Tensor[(1694), uint32], Tensor[(495), float64]) {
  @func_7709(%var_7711, %var_7712, %var_7713, %var_7714, %var_7715, %var_7716) /* ty=(Tensor[(7, 4, 2), int32], Tensor[(100, 2), int64], Tensor[(840), uint64], Tensor[(135), int16], uint32, Tensor[(105), int32], Tensor[(2, 15, 9), float32], Tensor[(90, 3), float32], Tensor[(1, 4, 11), bool], Tensor[(44), bool], Tensor[(672), int32], Tensor[(3360), int32], Tensor[(672), int32], Tensor[(1694), uint32], Tensor[(495), float64]) */
}

def @func_2741(%var_2726: Tensor[(1, 5, 8), float64], %var_2736: Tensor[(200), int64], %var_2738: Tensor[(495), float32]) -> (Tensor[(?, 5, 8), float64], Tensor[(105), int32], Tensor[(200), int64], Tensor[(105), int32], Tensor[(495), float32]) {
  %636 = cast(meta[relay.Constant][61] /* ty=Tensor[(1, 5, 8), float64] */, dtype="float64") /* ty=Tensor[(1, 5, 8), float64] */;
  %637 = shape_of(%var_2726, dtype="int32") /* ty=Tensor[(3), int32] */;
  %638 = cast(%var_2726, dtype="float64") /* ty=Tensor[(1, 5, 8), float64] */;
  %639 = dyn.reshape(%636, %637, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %640 = subtract(%638, %639) /* ty=Tensor[(?, 5, 8), float64] */;
  %641 = cast(%640, dtype="float64") /* ty=Tensor[(?, 5, 8), float64] */;
  %642 = cast(%var_2736, dtype="int64") /* ty=Tensor[(200), int64] */;
  %643 = cast(%var_2736, dtype="int64") /* ty=Tensor[(200), int64] */;
  %644 = cast(meta[relay.Constant][62] /* ty=Tensor[(105), int32] */, dtype="int32") /* ty=Tensor[(105), int32] */;
  %645 = cast(%var_2738, dtype="float32") /* ty=Tensor[(495), float32] */;
  %646 = reshape(%642, newshape=[4, 10, 5]) /* ty=Tensor[(4, 10, 5), int64] */;
  %647 = reshape(%643, newshape=[4, 10, 5]) /* ty=Tensor[(4, 10, 5), int64] */;
  %648 = reshape(%644, newshape=[105]) /* ty=Tensor[(105), int32] */;
  %649 = reshape(%645, newshape=[495]) /* ty=Tensor[(495), float32] */;
  %650 = @func_2679(%646, %647, %648, %649) /* ty=(Tensor[(4, 10, 5), int64], Tensor[(?, 15, 7), float64], Tensor[(105), int32], Tensor[(1, 315), float32], Tensor[(495), float32]) */;
  %651 = cos(%641) /* ty=Tensor[(?, 5, 8), float64] */;
  %652 = %650.2;
  (%651, %652, %var_2736, meta[relay.Constant][62] /* ty=Tensor[(105), int32] */, %var_2738)
}

def @func_5630(%var_5628: Tensor[(2, 15, 9), float32]) -> Tensor[(2, 15, 9), float32] {
  @func_5627(%var_5628) /* ty=Tensor[(2, 15, 9), float32] */
}

def @func_5526(%var_5521: Tensor[(13, 4, 13), int32]) -> Tensor[(13, 4, 13), int32] {
  %653 = cast(meta[relay.Constant][63] /* ty=Tensor[(13, 4, 13), int32] */, dtype="int32") /* ty=Tensor[(13, 4, 13), int32] */;
  %654 = shape_of(%var_5521, dtype="int32") /* ty=Tensor[(3), int32] */;
  %655 = cast(%var_5521, dtype="int32") /* ty=Tensor[(13, 4, 13), int32] */;
  %656 = dyn.reshape(%653, %654, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  left_shift(%655, %656) /* ty=Tensor[(13, 4, 13), int32] */
}

def @func_3860(%var_3854: Tensor[(7, 15, 8), uint64], %var_3855: Tensor[(7, 15, 8), uint64], %var_3856: Tensor[(15, 9), int16], %var_3857: uint32, %var_3858: Tensor[(21, 5), int32], %var_3859: Tensor[(495), float32]) -> (Tensor[(7, 15, 8), bool], Tensor[(10, 5, 15), float64], Tensor[(15, 9), int16], Tensor[(675), int16], Tensor[(336), float32], Tensor[(6, 11, 5), uint16], Tensor[(330), uint8], uint32, Tensor[(11, 11, 14), bool], Tensor[(1694), uint32], Tensor[(21, 5), int32], Tensor[(750), float64], Tensor[(105), int32], Tensor[(100, 2), int64], Tensor[(495), float32], Tensor[(?, 15, 7), float64]) {
  @func_3852(%var_3854, %var_3855, %var_3856, %var_3857, %var_3858, %var_3859) /* ty=(Tensor[(7, 15, 8), bool], Tensor[(10, 5, 15), float64], Tensor[(15, 9), int16], Tensor[(675), int16], Tensor[(336), float32], Tensor[(6, 11, 5), uint16], Tensor[(330), uint8], uint32, Tensor[(11, 11, 14), bool], Tensor[(1694), uint32], Tensor[(21, 5), int32], Tensor[(750), float64], Tensor[(105), int32], Tensor[(100, 2), int64], Tensor[(495), float32], Tensor[(?, 15, 7), float64]) */
}

def @func_1877(%var_1875: bool, %var_1876: Tensor[(1, 4, 11), bool]) -> (Tensor[(1, 4, 11), bool], Tensor[(15, 9, 10), uint64], Tensor[(1350), uint64]) {
  %666 = fn (%var_1862: bool, %var_1863: Tensor[(1, 4, 11), bool]) -> (Tensor[(1, 4, 11), bool], Tensor[(15, 9, 10), uint64], Tensor[(1350), uint64]) {
    %657 = cast(%var_1862, dtype="bool") /* ty=bool */;
    %658 = cast(%var_1863, dtype="bool") /* ty=Tensor[(1, 4, 11), bool] */;
    %659 = cast(meta[relay.Constant][64] /* ty=Tensor[(1350), uint64] */, dtype="uint64") /* ty=Tensor[(1350), uint64] */;
    %660 = cast(meta[relay.Constant][64] /* ty=Tensor[(1350), uint64] */, dtype="uint64") /* ty=Tensor[(1350), uint64] */;
    %661 = reshape(%659, newshape=[15, 9, 10]) /* ty=Tensor[(15, 9, 10), uint64] */;
    %662 = reshape(%660, newshape=[15, 9, 10]) /* ty=Tensor[(15, 9, 10), uint64] */;
    %663 = @func_1006(%661, %662) /* ty=(Tensor[(15, 9, 10), uint64], Tensor[(15, 9, 10), int32]) */;
    %664 = logical_and(%657, %658) /* ty=Tensor[(1, 4, 11), bool] */;
    %665 = %663.0;
    (%664, %665, meta[relay.Constant][64] /* ty=Tensor[(1350), uint64] */)
  };
  %666(%var_1875, %var_1876) /* ty=(Tensor[(1, 4, 11), bool], Tensor[(15, 9, 10), uint64], Tensor[(1350), uint64]) */
}

def @func_7841(%var_7839: float32, %var_7840: Tensor[(9, 3, 10), float32]) -> (Tensor[(9, 3, 10), float32],) {
  @func_7837(%var_7839, %var_7840) /* ty=(Tensor[(9, 3, 10), float32],) */
}

def @func_6901(%var_6863: Tensor[(14, 13, 10), bool], %var_6864: Tensor[(14, 13, 10), bool], %var_6873: Tensor[(495), float32]) -> (Tensor[(14, 13, 10), bool], Tensor[(200), int64], Tensor[(40), float64], Tensor[(1, 200), int64], Tensor[(495), float32]) {
  %667 = cast(%var_6864, dtype="bool") /* ty=Tensor[(14, 13, 10), bool] */;
  %668 = shape_of(%var_6863, dtype="int32") /* ty=Tensor[(3), int32] */;
  %669 = cast(%var_6863, dtype="bool") /* ty=Tensor[(14, 13, 10), bool] */;
  %670 = dyn.reshape(%667, %668, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %671 = cast(meta[relay.Constant][65] /* ty=Tensor[(40), float64] */, dtype="float64") /* ty=Tensor[(40), float64] */;
  %672 = cast(meta[relay.Constant][66] /* ty=Tensor[(1, 200), int64] */, dtype="int64") /* ty=Tensor[(1, 200), int64] */;
  %673 = cast(%var_6873, dtype="float32") /* ty=Tensor[(495), float32] */;
  %674 = reshape(%671, newshape=[1, 5, 8]) /* ty=Tensor[(1, 5, 8), float64] */;
  %675 = reshape(%672, newshape=[200]) /* ty=Tensor[(200), int64] */;
  %676 = reshape(%673, newshape=[495]) /* ty=Tensor[(495), float32] */;
  %677 = @func_2741(%674, %675, %676) /* ty=(Tensor[(?, 5, 8), float64], Tensor[(105), int32], Tensor[(200), int64], Tensor[(105), int32], Tensor[(495), float32]) */;
  %678 = logical_or(%669, %670) /* ty=Tensor[(14, 13, 10), bool] */;
  %679 = %677.2;
  (%678, %679, meta[relay.Constant][65] /* ty=Tensor[(40), float64] */, meta[relay.Constant][66] /* ty=Tensor[(1, 200), int64] */, %var_6873)
}

def @func_8760(%var_8735: Tensor[(5, 9, 11), float64]) -> (Tensor[(5, 9, 11), float64], Tensor[(7, 4, 2), int32]) {
  %680 = cast(%var_8735, dtype="float64") /* ty=Tensor[(5, 9, 11), float64] */;
  %681 = @func_8648() /* ty=(Tensor[(7, 4, 2), int32],) */;
  %682 = acosh(%680) /* ty=Tensor[(5, 9, 11), float64] */;
  %683 = %681.0;
  (%682, %683)
}

def @func_6481(%var_6465: Tensor[(13, 6, 5), float32]) -> (Tensor[(13, 6, 5), float32], Tensor[(13, 6, 5), uint64]) {
  %684 = cast(meta[relay.Constant][67] /* ty=Tensor[(13, 6, 5), float32] */, dtype="float32") /* ty=Tensor[(13, 6, 5), float32] */;
  %685 = shape_of(%var_6465, dtype="int32") /* ty=Tensor[(3), int32] */;
  %686 = cast(%var_6465, dtype="float32") /* ty=Tensor[(13, 6, 5), float32] */;
  %687 = dyn.reshape(%684, %685, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %688 = cast(meta[relay.Constant][68] /* ty=Tensor[(13, 6, 5), float32] */, dtype="uint64") /* ty=Tensor[(13, 6, 5), uint64] */;
  %689 = shape_of(%var_6465, dtype="int32") /* ty=Tensor[(3), int32] */;
  %690 = cast(%var_6465, dtype="uint64") /* ty=Tensor[(13, 6, 5), uint64] */;
  %691 = dyn.reshape(%688, %689, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %692 = floor_mod(%686, %687) /* ty=Tensor[(13, 6, 5), float32] */;
  %693 = bitwise_or(%690, %691) /* ty=Tensor[(13, 6, 5), uint64] */;
  (%692, %693)
}

def @func_8239() -> Tensor[(7, 4, 2), int32] {
  @func_7980() /* ty=Tensor[(7, 4, 2), int32] */
}

def @func_5761(%var_5758: Tensor[(11, 11, 3), uint32], %var_5759: Tensor[(7, 15), int32], %var_5760: Tensor[(336), float32]) -> (Tensor[(11, 11, 3), uint32], Tensor[(315), float32], Tensor[(7, 15), int32], Tensor[(63), float64], Tensor[(336), float64], Tensor[(3, 11), float64]) {
  @func_5756(%var_5758, %var_5759, %var_5760) /* ty=(Tensor[(11, 11, 3), uint32], Tensor[(315), float32], Tensor[(7, 15), int32], Tensor[(63), float64], Tensor[(336), float64], Tensor[(3, 11), float64]) */
}

def @func_7709(%var_7640: Tensor[(840), uint64], %var_7641: Tensor[(135), int16], %var_7643: Tensor[(105), int32], %var_7644: Tensor[(495), float32], %var_7670: Tensor[(672), int32], %var_7671: Tensor[(1694), uint32]) -> (Tensor[(7, 4, 2), int32], Tensor[(100, 2), int64], Tensor[(840), uint64], Tensor[(135), int16], uint32, Tensor[(105), int32], Tensor[(2, 15, 9), float32], Tensor[(90, 3), float32], Tensor[(1, 4, 11), bool], Tensor[(44), bool], Tensor[(672), int32], Tensor[(3360), int32], Tensor[(672), int32], Tensor[(1694), uint32], Tensor[(495), float64]) {
  %694 = @func_7614() /* ty=(Tensor[(7, 4, 2), int32],) */;
  %695 = cast(%var_7640, dtype="uint64") /* ty=Tensor[(840), uint64] */;
  %696 = cast(%var_7640, dtype="uint64") /* ty=Tensor[(840), uint64] */;
  %697 = cast(%var_7641, dtype="int16") /* ty=Tensor[(135), int16] */;
  %698 = cast(meta[relay.Constant][69] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %699 = cast(%var_7643, dtype="int32") /* ty=Tensor[(105), int32] */;
  %700 = cast(%var_7644, dtype="float32") /* ty=Tensor[(495), float32] */;
  %701 = reshape(%695, newshape=[7, 15, 8]) /* ty=Tensor[(7, 15, 8), uint64] */;
  %702 = reshape(%696, newshape=[7, 15, 8]) /* ty=Tensor[(7, 15, 8), uint64] */;
  %703 = reshape(%697, newshape=[15, 9]) /* ty=Tensor[(15, 9), int16] */;
  %704 = reshape(%698, newshape=[]) /* ty=uint32 */;
  %705 = reshape(%699, newshape=[21, 5]) /* ty=Tensor[(21, 5), int32] */;
  %706 = reshape(%700, newshape=[495]) /* ty=Tensor[(495), float32] */;
  %707 = @func_3852(%701, %702, %703, %704, %705, %706) /* ty=(Tensor[(7, 15, 8), bool], Tensor[(10, 5, 15), float64], Tensor[(15, 9), int16], Tensor[(675), int16], Tensor[(336), float32], Tensor[(6, 11, 5), uint16], Tensor[(330), uint8], uint32, Tensor[(11, 11, 14), bool], Tensor[(1694), uint32], Tensor[(21, 5), int32], Tensor[(750), float64], Tensor[(105), int32], Tensor[(100, 2), int64], Tensor[(495), float32], Tensor[(?, 15, 7), float64]) */;
  %708 = cast(meta[relay.Constant][70] /* ty=Tensor[(90, 3), float32] */, dtype="float32") /* ty=Tensor[(90, 3), float32] */;
  %709 = reshape(%708, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), float32] */;
  %710 = cast(meta[relay.Constant][69] /* ty=uint32 */, dtype="bool") /* ty=bool */;
  %711 = cast(meta[relay.Constant][71] /* ty=Tensor[(44), bool] */, dtype="bool") /* ty=Tensor[(44), bool] */;
  %712 = reshape(%710, newshape=[]) /* ty=bool */;
  %713 = reshape(%711, newshape=[1, 4, 11]) /* ty=Tensor[(1, 4, 11), bool] */;
  %714 = @func_1874(%712, %713) /* ty=(Tensor[(1, 4, 11), bool], Tensor[(15, 9, 10), uint64], Tensor[(1350), uint64]) */;
  %715 = cast(meta[relay.Constant][72] /* ty=Tensor[(3360), int32] */, dtype="int32") /* ty=Tensor[(3360), int32] */;
  %716 = cast(%var_7670, dtype="int32") /* ty=Tensor[(672), int32] */;
  %717 = cast(meta[relay.Constant][69] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %718 = cast(%var_7671, dtype="uint32") /* ty=Tensor[(1694), uint32] */;
  %719 = reshape(%715, newshape=[14, 15, 16]) /* ty=Tensor[(14, 15, 16), int32] */;
  %720 = reshape(%716, newshape=[672]) /* ty=Tensor[(672), int32] */;
  %721 = reshape(%717, newshape=[]) /* ty=uint32 */;
  %722 = reshape(%718, newshape=[121, 14]) /* ty=Tensor[(121, 14), uint32] */;
  %723 = @func_7524(%719, %720, %721, %722) /* ty=(Tensor[(14, 15, 16), int32], Tensor[(16, 3, 14), int32], Tensor[(672), int32], uint32, Tensor[(490), int8], uint32, Tensor[(121, 14), uint32], Tensor[(105), int32]) */;
  %724 = cast(%var_7644, dtype="float64") /* ty=Tensor[(495), float64] */;
  %725 = %694.0;
  %726 = %707.13;
  %727 = @func_5627(%709) /* ty=Tensor[(2, 15, 9), float32] */;
  %728 = %714.0;
  %729 = %723.2;
  %730 = atan(%724) /* ty=Tensor[(495), float64] */;
  (%725, %726, %var_7640, %var_7641, meta[relay.Constant][69] /* ty=uint32 */, %var_7643, %727, meta[relay.Constant][70] /* ty=Tensor[(90, 3), float32] */, %728, meta[relay.Constant][71] /* ty=Tensor[(44), bool] */, %729, meta[relay.Constant][72] /* ty=Tensor[(3360), int32] */, %var_7670, %var_7671, %730)
}

def @func_4392(%var_4378: Tensor[(7, 14, 8), int64], %var_4379: Tensor[(7, 14, 8), int64]) -> (Tensor[(7, 14, 8), int64],) {
  %731 = cast(%var_4379, dtype="int64") /* ty=Tensor[(7, 14, 8), int64] */;
  %732 = shape_of(%var_4378, dtype="int32") /* ty=Tensor[(3), int32] */;
  %733 = cast(%var_4378, dtype="int64") /* ty=Tensor[(7, 14, 8), int64] */;
  %734 = dyn.reshape(%731, %732, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %735 = logical_xor(%733, %734) /* ty=Tensor[(7, 14, 8), int64] */;
  (%735,)
}

def @func_8171(%var_8170: Tensor[(1, 490), float32]) -> (Tensor[(7, 4, 2), float32], Tensor[(7, 10, 7), uint16], Tensor[(1, 490), float32], int64, Tensor[(676), int32]) {
  %748 = fn (%var_8165: Tensor[(1, 490), float32]) -> (Tensor[(7, 4, 2), float32], Tensor[(7, 10, 7), uint16], Tensor[(1, 490), float32], int64, Tensor[(676), int32]) {
    %736 = @func_7753() /* ty=(Tensor[(7, 4, 2), int32],) */;
    %737 = %736.0;
    %738 = cast(%737, dtype="float32") /* ty=Tensor[(7, 4, 2), float32] */;
    %739 = cast(%var_8165, dtype="float32") /* ty=Tensor[(1, 490), float32] */;
    %740 = cast(-5 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %741 = cast(meta[relay.Constant][73] /* ty=Tensor[(676), int32] */, dtype="int32") /* ty=Tensor[(676), int32] */;
    %742 = reshape(%739, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
    %743 = reshape(%740, newshape=[]) /* ty=int64 */;
    %744 = reshape(%741, newshape=[676]) /* ty=Tensor[(676), int32] */;
    %745 = @func_7461(%742, %743, %744) /* ty=(Tensor[(4, 1, 10), int64], Tensor[(40), int64], Tensor[(7, 10, 7), uint16], Tensor[(1, 4, 11), bool], Tensor[(44), bool], Tensor[(13, 4, 13), int32], Tensor[(676), int32]) */;
    %746 = sin(%738) /* ty=Tensor[(7, 4, 2), float32] */;
    %747 = %745.2;
    (%746, %747, %var_8165, -5 /* ty=int64 */, meta[relay.Constant][73] /* ty=Tensor[(676), int32] */)
  };
  %748(%var_8170) /* ty=(Tensor[(7, 4, 2), float32], Tensor[(7, 10, 7), uint16], Tensor[(1, 490), float32], int64, Tensor[(676), int32]) */
}

def @func_8834() -> (Tensor[(7, 4, 2), int32], Tensor[(14, 11, 13), int8], Tensor[(2002), int8], Tensor[(3, 6, 8), float32], Tensor[(144), float32]) {
  %749 = @func_8648() /* ty=(Tensor[(7, 4, 2), int32],) */;
  %750 = cast(meta[relay.Constant][74] /* ty=Tensor[(2002), int8] */, dtype="int8") /* ty=Tensor[(2002), int8] */;
  %751 = cast(meta[relay.Constant][74] /* ty=Tensor[(2002), int8] */, dtype="int8") /* ty=Tensor[(2002), int8] */;
  %752 = reshape(%750, newshape=[14, 11, 13]) /* ty=Tensor[(14, 11, 13), int8] */;
  %753 = reshape(%751, newshape=[14, 11, 13]) /* ty=Tensor[(14, 11, 13), int8] */;
  %754 = @func_6947(%752, %753) /* ty=(Tensor[(14, 11, 13), int8],) */;
  %755 = cast(meta[relay.Constant][75] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %756 = reshape(%755, newshape=[3, 6, 8]) /* ty=Tensor[(3, 6, 8), float32] */;
  %757 = @func_6426(%756) /* ty=(Tensor[(3, 6, 8), float32],) */;
  %758 = %749.0;
  %759 = %754.0;
  %760 = %757.0;
  (%758, %759, meta[relay.Constant][74] /* ty=Tensor[(2002), int8] */, %760, meta[relay.Constant][75] /* ty=Tensor[(144), float32] */)
}

def @func_8899() -> (Tensor[(7, 4, 2), int32],) {
  %761 = @func_8205() /* ty=(Tensor[(7, 4, 2), int32],) */;
  %762 = %761.0;
  (%762,)
}

def @func_7815() -> Tensor[(8, 1, 15), float32] {
  %764 = fn () -> Tensor[(8, 1, 15), float32] {
    %763 = cast(meta[relay.Constant][76] /* ty=Tensor[(8, 1, 15), float32] */, dtype="float32") /* ty=Tensor[(8, 1, 15), float32] */;
    erf(%763) /* ty=Tensor[(8, 1, 15), float32] */
  };
  %764() /* ty=Tensor[(8, 1, 15), float32] */
}

def @func_6906(%var_6903: Tensor[(14, 13, 10), bool], %var_6904: Tensor[(14, 13, 10), bool], %var_6905: Tensor[(495), float32]) -> (Tensor[(14, 13, 10), bool], Tensor[(200), int64], Tensor[(40), float64], Tensor[(1, 200), int64], Tensor[(495), float32]) {
  @func_6901(%var_6903, %var_6904, %var_6905) /* ty=(Tensor[(14, 13, 10), bool], Tensor[(200), int64], Tensor[(40), float64], Tensor[(1, 200), int64], Tensor[(495), float32]) */
}

def @func_8241() -> Tensor[(7, 4, 2), int32] {
  @func_8239() /* ty=Tensor[(7, 4, 2), int32] */
}

def @func_6636(%var_6626: Tensor[(15, 11, 14), float32]) -> (Tensor[(15, 11, 14), float32], Tensor[(15, 11, 14), bool]) {
  %765 = cast(meta[relay.Constant][77] /* ty=Tensor[(15, 11, 14), float32] */, dtype="float32") /* ty=Tensor[(15, 11, 14), float32] */;
  %766 = shape_of(%var_6626, dtype="int32") /* ty=Tensor[(3), int32] */;
  %767 = cast(%var_6626, dtype="float32") /* ty=Tensor[(15, 11, 14), float32] */;
  %768 = dyn.reshape(%765, %766, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %769 = cast(meta[relay.Constant][77] /* ty=Tensor[(15, 11, 14), float32] */, dtype="bool") /* ty=Tensor[(15, 11, 14), bool] */;
  %770 = shape_of(%var_6626, dtype="int32") /* ty=Tensor[(3), int32] */;
  %771 = cast(%var_6626, dtype="bool") /* ty=Tensor[(15, 11, 14), bool] */;
  %772 = dyn.reshape(%769, %770, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %773 = floor_divide(%767, %768) /* ty=Tensor[(15, 11, 14), float32] */;
  %774 = greater_equal(%771, %772) /* ty=Tensor[(15, 11, 14), bool] */;
  (%773, %774)
}

def @func_7466(%var_7463: Tensor[(7, 10, 7), float32], %var_7464: int64, %var_7465: Tensor[(676), int32]) -> (Tensor[(4, 1, 10), int64], Tensor[(40), int64], Tensor[(7, 10, 7), uint16], Tensor[(1, 4, 11), bool], Tensor[(44), bool], Tensor[(13, 4, 13), int32], Tensor[(676), int32]) {
  @func_7461(%var_7463, %var_7464, %var_7465) /* ty=(Tensor[(4, 1, 10), int64], Tensor[(40), int64], Tensor[(7, 10, 7), uint16], Tensor[(1, 4, 11), bool], Tensor[(44), bool], Tensor[(13, 4, 13), int32], Tensor[(676), int32]) */
}

def @func_5627(%var_5618: Tensor[(2, 15, 9), float32]) -> Tensor[(2, 15, 9), float32] {
  %775 = cast(%var_5618, dtype="float32") /* ty=Tensor[(2, 15, 9), float32] */;
  asin(%775) /* ty=Tensor[(2, 15, 9), float32] */
}

def @func_767(%var_684: uint64, %var_685: Tensor[(8, 2, 10), uint64], %var_699: Tensor[(105), int32], %var_725: Tensor[(1694), uint32], %var_735: Tensor[(6, 7, 7), uint64]) -> (Tensor[(8, 2, 10), bool], Tensor[(3, 11), float64], Tensor[(105), int32], Tensor[(1694), uint32], Tensor[(105), int32], Tensor[(6, 7, 7), float32], Tensor[(?, 15, 7), float64], Tensor[(11, 11, 14), uint8], Tensor[(11, 11, 14), bool]) {
  %776 = cast(%var_684, dtype="bool") /* ty=bool */;
  %777 = cast(%var_685, dtype="bool") /* ty=Tensor[(8, 2, 10), bool] */;
  %778 = cast(%var_699, dtype="int32") /* ty=Tensor[(105), int32] */;
  %779 = reshape(%778, newshape=[105]) /* ty=Tensor[(105), int32] */;
  %780 = @func_411(%779) /* ty=(Tensor[(3, 11), float64], Tensor[(?, 15, 7), float64], Tensor[(105), int32], Tensor[(?, 15, 7), float64], Tensor[(?, 15, 7), float64]) */;
  %781 = cast(%var_684, dtype="uint32") /* ty=uint32 */;
  %782 = cast(%var_725, dtype="uint32") /* ty=Tensor[(1694), uint32] */;
  %783 = cast(%var_699, dtype="int32") /* ty=Tensor[(105), int32] */;
  %784 = reshape(%781, newshape=[]) /* ty=uint32 */;
  %785 = reshape(%782, newshape=[11, 11, 14]) /* ty=Tensor[(11, 11, 14), uint32] */;
  %786 = reshape(%783, newshape=[105]) /* ty=Tensor[(105), int32] */;
  %787 = @func_597(%784, %785, %786) /* ty=(Tensor[(11, 11, 14), bool], Tensor[(?, 15, 7), float64], Tensor[(105), int32]) */;
  %788 = cast(%var_684, dtype="float32") /* ty=float32 */;
  %789 = cast(%var_735, dtype="float32") /* ty=Tensor[(6, 7, 7), float32] */;
  %790 = cast(%var_699, dtype="int32") /* ty=Tensor[(105), int32] */;
  %791 = cast(%var_699, dtype="int32") /* ty=Tensor[(105), int32] */;
  %792 = reshape(%790, newshape=[1, 15, 7]) /* ty=Tensor[(1, 15, 7), int32] */;
  %793 = reshape(%791, newshape=[1, 15, 7]) /* ty=Tensor[(1, 15, 7), int32] */;
  %794 = cast(%var_684, dtype="uint32") /* ty=uint32 */;
  %795 = cast(%var_725, dtype="uint32") /* ty=Tensor[(1694), uint32] */;
  %796 = cast(%var_699, dtype="int32") /* ty=Tensor[(105), int32] */;
  %797 = reshape(%794, newshape=[]) /* ty=uint32 */;
  %798 = reshape(%795, newshape=[11, 11, 14]) /* ty=Tensor[(11, 11, 14), uint32] */;
  %799 = reshape(%796, newshape=[105]) /* ty=Tensor[(105), int32] */;
  %800 = @func_597(%797, %798, %799) /* ty=(Tensor[(11, 11, 14), bool], Tensor[(?, 15, 7), float64], Tensor[(105), int32]) */;
  %801 = %800.0;
  %802 = cast(meta[relay.Constant][78] /* ty=Tensor[(11, 11, 14), bool] */, dtype="uint8") /* ty=Tensor[(11, 11, 14), uint8] */;
  %803 = shape_of(%801, dtype="int32") /* ty=Tensor[(3), int32] */;
  %804 = cast(%801, dtype="uint8") /* ty=Tensor[(11, 11, 14), uint8] */;
  %805 = dyn.reshape(%802, %803, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %806 = cast(%801, dtype="bool") /* ty=Tensor[(11, 11, 14), bool] */;
  %807 = shape_of(meta[relay.Constant][78] /* ty=Tensor[(11, 11, 14), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %808 = cast(meta[relay.Constant][78] /* ty=Tensor[(11, 11, 14), bool] */, dtype="bool") /* ty=Tensor[(11, 11, 14), bool] */;
  %809 = dyn.reshape(%806, %807, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %810 = greater_equal(%776, %777) /* ty=Tensor[(8, 2, 10), bool] */;
  %811 = %780.0;
  %812 = %787.2;
  %813 = subtract(%788, %789) /* ty=Tensor[(6, 7, 7), float32] */;
  %814 = @func_200(%792, %793) /* ty=Tensor[(?, 15, 7), float64] */;
  %815 = left_shift(%804, %805) /* ty=Tensor[(11, 11, 14), uint8] */;
  %816 = equal(%808, %809) /* ty=Tensor[(11, 11, 14), bool] */;
  (%810, %811, %var_699, %var_725, %812, %813, %814, %815, %816)
}

def @func_2746(%var_2743: Tensor[(1, 5, 8), float64], %var_2744: Tensor[(200), int64], %var_2745: Tensor[(495), float32]) -> (Tensor[(?, 5, 8), float64], Tensor[(105), int32], Tensor[(200), int64], Tensor[(105), int32], Tensor[(495), float32]) {
  @func_2741(%var_2743, %var_2744, %var_2745) /* ty=(Tensor[(?, 5, 8), float64], Tensor[(105), int32], Tensor[(200), int64], Tensor[(105), int32], Tensor[(495), float32]) */
}

def @func_2633(%var_2602: Tensor[(6, 11, 5), uint8], %var_2612: Tensor[(336), float32], %var_2622: uint32) -> (Tensor[(16, 3, 7), float32], Tensor[(336), float32], Tensor[(1, 315), float32], Tensor[(495), float32], Tensor[(?, 15, 7), float64], Tensor[(63), float32], Tensor[(105), int32], Tensor[(6, 11, 5), uint16]) {
  %817 = cast(%var_2612, dtype="float32") /* ty=Tensor[(336), float32] */;
  %818 = reshape(%817, newshape=[16, 3, 7]) /* ty=Tensor[(16, 3, 7), float32] */;
  %819 = cast(meta[relay.Constant][79] /* ty=Tensor[(495), float32] */, dtype="float32") /* ty=Tensor[(495), float32] */;
  %820 = reshape(%819, newshape=[15, 11, 3]) /* ty=Tensor[(15, 11, 3), float32] */;
  %821 = @func_1640(%820) /* ty=(Tensor[(15, 11, 3), bool], Tensor[(1, 315), float32], Tensor[(135), int16], Tensor[(675), int16], Tensor[(105), int32], Tensor[(336), float32]) */;
  %822 = cast(meta[relay.Constant][80] /* ty=Tensor[(63), float32] */, dtype="float32") /* ty=Tensor[(63), float32] */;
  %823 = %821.1;
  %824 = cast(%823, dtype="float32") /* ty=Tensor[(1, 315), float32] */;
  %825 = cast(meta[relay.Constant][81] /* ty=Tensor[(105), int32] */, dtype="int32") /* ty=Tensor[(105), int32] */;
  %826 = cast(%var_2622, dtype="uint32") /* ty=uint32 */;
  %827 = @func_1104(%818) /* ty=Tensor[(16, 3, 7), float32] */;
  %828 = cast(%827, dtype="float32") /* ty=Tensor[(16, 3, 7), float32] */;
  %829 = reshape(%822, newshape=[9, 1, 7]) /* ty=Tensor[(9, 1, 7), float32] */;
  %830 = reshape(%824, newshape=[9, 5, 7]) /* ty=Tensor[(9, 5, 7), float32] */;
  %831 = reshape(%825, newshape=[105, 1]) /* ty=Tensor[(105, 1), int32] */;
  %832 = reshape(%826, newshape=[]) /* ty=uint32 */;
  %833 = reshape(%828, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %834 = @func_1354(%829, %830, %831, %832, %833) /* ty=(Tensor[(?, 15, 7), float64], Tensor[(105, 1), int32], Tensor[(?, 15, 7), float64], uint32, Tensor[(1694), uint32], Tensor[(16, 3, 7), float32], Tensor[(336), float32], Tensor[(9, 5, 7), bool]) */;
  %835 = cast(%var_2602, dtype="uint8") /* ty=Tensor[(6, 11, 5), uint8] */;
  %836 = shape_of(meta[relay.Constant][82] /* ty=Tensor[(6, 11, 5), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %837 = cast(meta[relay.Constant][82] /* ty=Tensor[(6, 11, 5), uint8] */, dtype="uint8") /* ty=Tensor[(6, 11, 5), uint8] */;
  %838 = dyn.reshape(%835, %836, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %839 = bitwise_and(%837, %838) /* ty=Tensor[(6, 11, 5), uint8] */;
  %840 = cast(%839, dtype="uint16") /* ty=Tensor[(6, 11, 5), uint16] */;
  %841 = cast(%var_2622, dtype="uint16") /* ty=uint16 */;
  %842 = %834.2;
  %843 = logical_xor(%840, %841) /* ty=Tensor[(6, 11, 5), uint16] */;
  (%827, %var_2612, %823, meta[relay.Constant][79] /* ty=Tensor[(495), float32] */, %842, meta[relay.Constant][80] /* ty=Tensor[(63), float32] */, meta[relay.Constant][81] /* ty=Tensor[(105), int32] */, %843)
}

def @func_8120(%var_8116: Tensor[(1350), uint64], %var_8117: uint32, %var_8118: Tensor[(1694), uint32], %var_8119: Tensor[(840), uint64]) -> (Tensor[(7, 4, 2), int32], Tensor[(15, 9, 10), uint64], Tensor[(1350), uint64], Tensor[(11, 11, 14), bool], uint32, Tensor[(1694), uint32], Tensor[(105), int32], uint32, Tensor[(840), uint64], Tensor[(135), int16], Tensor[(495), float32], Tensor[(672), int32]) {
  %874 = fn (%var_8087: Tensor[(1350), uint64], %var_8101: uint32, %var_8102: Tensor[(1694), uint32], %var_8110: Tensor[(840), uint64]) -> (Tensor[(7, 4, 2), int32], Tensor[(15, 9, 10), uint64], Tensor[(1350), uint64], Tensor[(11, 11, 14), bool], uint32, Tensor[(1694), uint32], Tensor[(105), int32], uint32, Tensor[(840), uint64], Tensor[(135), int16], Tensor[(495), float32], Tensor[(672), int32]) {
    %844 = @func_7614() /* ty=(Tensor[(7, 4, 2), int32],) */;
    %845 = cast(%var_8087, dtype="uint64") /* ty=Tensor[(1350), uint64] */;
    %846 = cast(%var_8087, dtype="uint64") /* ty=Tensor[(1350), uint64] */;
    %847 = reshape(%845, newshape=[15, 9, 10]) /* ty=Tensor[(15, 9, 10), uint64] */;
    %848 = reshape(%846, newshape=[15, 9, 10]) /* ty=Tensor[(15, 9, 10), uint64] */;
    %849 = @func_1006(%847, %848) /* ty=(Tensor[(15, 9, 10), uint64], Tensor[(15, 9, 10), int32]) */;
    %850 = cast(%var_8101, dtype="uint32") /* ty=uint32 */;
    %851 = cast(%var_8102, dtype="uint32") /* ty=Tensor[(1694), uint32] */;
    %852 = cast(meta[relay.Constant][83] /* ty=Tensor[(105), int32] */, dtype="int32") /* ty=Tensor[(105), int32] */;
    %853 = reshape(%850, newshape=[]) /* ty=uint32 */;
    %854 = reshape(%851, newshape=[11, 11, 14]) /* ty=Tensor[(11, 11, 14), uint32] */;
    %855 = reshape(%852, newshape=[105]) /* ty=Tensor[(105), int32] */;
    %856 = @func_597(%853, %854, %855) /* ty=(Tensor[(11, 11, 14), bool], Tensor[(?, 15, 7), float64], Tensor[(105), int32]) */;
    %857 = cast(%var_8110, dtype="uint64") /* ty=Tensor[(840), uint64] */;
    %858 = cast(meta[relay.Constant][84] /* ty=Tensor[(135), int16] */, dtype="int16") /* ty=Tensor[(135), int16] */;
    %859 = cast(meta[relay.Constant][83] /* ty=Tensor[(105), int32] */, dtype="int32") /* ty=Tensor[(105), int32] */;
    %860 = cast(meta[relay.Constant][85] /* ty=Tensor[(495), float32] */, dtype="float32") /* ty=Tensor[(495), float32] */;
    %861 = cast(meta[relay.Constant][86] /* ty=Tensor[(672), int32] */, dtype="int32") /* ty=Tensor[(672), int32] */;
    %862 = cast(%var_8102, dtype="uint32") /* ty=Tensor[(1694), uint32] */;
    %863 = reshape(%857, newshape=[840]) /* ty=Tensor[(840), uint64] */;
    %864 = reshape(%858, newshape=[135]) /* ty=Tensor[(135), int16] */;
    %865 = reshape(%859, newshape=[105]) /* ty=Tensor[(105), int32] */;
    %866 = reshape(%860, newshape=[495]) /* ty=Tensor[(495), float32] */;
    %867 = reshape(%861, newshape=[672]) /* ty=Tensor[(672), int32] */;
    %868 = reshape(%862, newshape=[1694]) /* ty=Tensor[(1694), uint32] */;
    %869 = @func_7709(%863, %864, %865, %866, %867, %868) /* ty=(Tensor[(7, 4, 2), int32], Tensor[(100, 2), int64], Tensor[(840), uint64], Tensor[(135), int16], uint32, Tensor[(105), int32], Tensor[(2, 15, 9), float32], Tensor[(90, 3), float32], Tensor[(1, 4, 11), bool], Tensor[(44), bool], Tensor[(672), int32], Tensor[(3360), int32], Tensor[(672), int32], Tensor[(1694), uint32], Tensor[(495), float64]) */;
    %870 = %844.0;
    %871 = %849.0;
    %872 = %856.0;
    %873 = %869.4;
    (%870, %871, %var_8087, %872, %var_8101, %var_8102, meta[relay.Constant][83] /* ty=Tensor[(105), int32] */, %873, %var_8110, meta[relay.Constant][84] /* ty=Tensor[(135), int16] */, meta[relay.Constant][85] /* ty=Tensor[(495), float32] */, meta[relay.Constant][86] /* ty=Tensor[(672), int32] */)
  };
  %874(%var_8116, %var_8117, %var_8118, %var_8119) /* ty=(Tensor[(7, 4, 2), int32], Tensor[(15, 9, 10), uint64], Tensor[(1350), uint64], Tensor[(11, 11, 14), bool], uint32, Tensor[(1694), uint32], Tensor[(105), int32], uint32, Tensor[(840), uint64], Tensor[(135), int16], Tensor[(495), float32], Tensor[(672), int32]) */
}

def @func_8273(%var_8264: Tensor[(7, 4, 2), int32], %var_8270: int64, %var_8271: Tensor[(2, 20), int64]) -> (Tensor[(7, 4, 2), int16], Tensor[(4, 1, 10), int64], int64, Tensor[(2, 20), int64]) {
  %875 = @func_7753() /* ty=(Tensor[(7, 4, 2), int32],) */;
  %876 = %875.0;
  %877 = cast(%var_8264, dtype="int16") /* ty=Tensor[(7, 4, 2), int16] */;
  %878 = shape_of(%876, dtype="int32") /* ty=Tensor[(3), int32] */;
  %879 = cast(%876, dtype="int16") /* ty=Tensor[(7, 4, 2), int16] */;
  %880 = dyn.reshape(%877, %878, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %881 = cast(%var_8270, dtype="int64") /* ty=int64 */;
  %882 = cast(%var_8271, dtype="int64") /* ty=Tensor[(2, 20), int64] */;
  %883 = reshape(%881, newshape=[]) /* ty=int64 */;
  %884 = reshape(%882, newshape=[4, 1, 10]) /* ty=Tensor[(4, 1, 10), int64] */;
  %885 = @func_4760(%883, %884) /* ty=(Tensor[(4, 1, 10), int64],) */;
  %886 = multiply(%879, %880) /* ty=Tensor[(7, 4, 2), int16] */;
  %887 = %885.0;
  (%886, %887, %var_8270, %var_8271)
}

def @func_2684(%var_2680: Tensor[(4, 10, 5), int64], %var_2681: Tensor[(4, 10, 5), int64], %var_2682: Tensor[(105), int32], %var_2683: Tensor[(495), float32]) -> (Tensor[(4, 10, 5), int64], Tensor[(?, 15, 7), float64], Tensor[(105), int32], Tensor[(1, 315), float32], Tensor[(495), float32]) {
  %902 = fn (%var_2650: Tensor[(4, 10, 5), int64], %var_2651: Tensor[(4, 10, 5), int64], %var_2660: Tensor[(105), int32], %var_2672: Tensor[(495), float32]) -> (Tensor[(4, 10, 5), int64], Tensor[(?, 15, 7), float64], Tensor[(105), int32], Tensor[(1, 315), float32], Tensor[(495), float32]) {
    %888 = cast(%var_2651, dtype="int64") /* ty=Tensor[(4, 10, 5), int64] */;
    %889 = shape_of(%var_2650, dtype="int32") /* ty=Tensor[(3), int32] */;
    %890 = cast(%var_2650, dtype="int64") /* ty=Tensor[(4, 10, 5), int64] */;
    %891 = dyn.reshape(%888, %889, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %892 = cast(%var_2660, dtype="int32") /* ty=Tensor[(105), int32] */;
    %893 = cast(%var_2660, dtype="int32") /* ty=Tensor[(105), int32] */;
    %894 = reshape(%892, newshape=[1, 15, 7]) /* ty=Tensor[(1, 15, 7), int32] */;
    %895 = reshape(%893, newshape=[1, 15, 7]) /* ty=Tensor[(1, 15, 7), int32] */;
    %896 = cast(%var_2672, dtype="float32") /* ty=Tensor[(495), float32] */;
    %897 = reshape(%896, newshape=[15, 11, 3]) /* ty=Tensor[(15, 11, 3), float32] */;
    %898 = @func_1640(%897) /* ty=(Tensor[(15, 11, 3), bool], Tensor[(1, 315), float32], Tensor[(135), int16], Tensor[(675), int16], Tensor[(105), int32], Tensor[(336), float32]) */;
    %899 = bitwise_xor(%890, %891) /* ty=Tensor[(4, 10, 5), int64] */;
    %900 = @func_200(%894, %895) /* ty=Tensor[(?, 15, 7), float64] */;
    %901 = %898.1;
    (%899, %900, %var_2660, %901, %var_2672)
  };
  %902(%var_2680, %var_2681, %var_2682, %var_2683) /* ty=(Tensor[(4, 10, 5), int64], Tensor[(?, 15, 7), float64], Tensor[(105), int32], Tensor[(1, 315), float32], Tensor[(495), float32]) */
}

def @func_413(%var_412: Tensor[(105), int32]) -> (Tensor[(3, 11), float64], Tensor[(?, 15, 7), float64], Tensor[(105), int32], Tensor[(?, 15, 7), float64], Tensor[(?, 15, 7), float64]) {
  %920 = fn (%var_359: Tensor[(105), int32]) -> (Tensor[(3, 11), float64], Tensor[(?, 15, 7), float64], Tensor[(105), int32], Tensor[(?, 15, 7), float64], Tensor[(?, 15, 7), float64]) {
    %903 = cast(meta[relay.Constant][87] /* ty=Tensor[(3, 11), float64] */, dtype="float64") /* ty=Tensor[(3, 11), float64] */;
    %904 = cast(%var_359, dtype="int32") /* ty=Tensor[(105), int32] */;
    %905 = cast(%var_359, dtype="int32") /* ty=Tensor[(105), int32] */;
    %906 = reshape(%904, newshape=[1, 15, 7]) /* ty=Tensor[(1, 15, 7), int32] */;
    %907 = reshape(%905, newshape=[1, 15, 7]) /* ty=Tensor[(1, 15, 7), int32] */;
    %908 = @func_200(%906, %907) /* ty=Tensor[(?, 15, 7), float64] */;
    %909 = cast(%908, dtype="int32") /* ty=Tensor[(?, 15, 7), int32] */;
    %910 = cast(%908, dtype="int32") /* ty=Tensor[(?, 15, 7), int32] */;
    %911 = reshape(%909, newshape=[1, 15, 7]) /* ty=Tensor[(1, 15, 7), int32] */;
    %912 = reshape(%910, newshape=[1, 15, 7]) /* ty=Tensor[(1, 15, 7), int32] */;
    %913 = cast(%var_359, dtype="int32") /* ty=Tensor[(105), int32] */;
    %914 = @func_200(%911, %912) /* ty=Tensor[(?, 15, 7), float64] */;
    %915 = cast(%914, dtype="int32") /* ty=Tensor[(?, 15, 7), int32] */;
    %916 = reshape(%913, newshape=[1, 15, 7]) /* ty=Tensor[(1, 15, 7), int32] */;
    %917 = reshape(%915, newshape=[1, 15, 7]) /* ty=Tensor[(1, 15, 7), int32] */;
    %918 = rsqrt(%903) /* ty=Tensor[(3, 11), float64] */;
    %919 = @func_200(%916, %917) /* ty=Tensor[(?, 15, 7), float64] */;
    (%918, %908, %var_359, %914, %919)
  };
  %920(%var_412) /* ty=(Tensor[(3, 11), float64], Tensor[(?, 15, 7), float64], Tensor[(105), int32], Tensor[(?, 15, 7), float64], Tensor[(?, 15, 7), float64]) */
}

def @func_7837(%var_7829: float32, %var_7830: Tensor[(9, 3, 10), float32]) -> (Tensor[(9, 3, 10), float32],) {
  %921 = cast(%var_7829, dtype="float32") /* ty=float32 */;
  %922 = cast(%var_7830, dtype="float32") /* ty=Tensor[(9, 3, 10), float32] */;
  %923 = divide(%921, %922) /* ty=Tensor[(9, 3, 10), float32] */;
  (%923,)
}

def @func_5529(%var_5527: Tensor[(13, 4, 13), int32]) -> Tensor[(13, 4, 13), int32] {
  @func_5526(%var_5527) /* ty=Tensor[(13, 4, 13), int32] */
}

def @func_6426(%var_6417: Tensor[(3, 6, 8), float32]) -> (Tensor[(3, 6, 8), float32],) {
  %924 = cast(%var_6417, dtype="float32") /* ty=Tensor[(3, 6, 8), float32] */;
  %925 = atan(%924) /* ty=Tensor[(3, 6, 8), float32] */;
  (%925,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen114/build/output.py", line 1646, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:50:43] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

