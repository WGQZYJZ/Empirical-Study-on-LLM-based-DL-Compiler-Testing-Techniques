==========mod==========
#[version = "0.0.5"]
def @func_1029() -> (Tensor[(12, 2, 7), float32],) {
  %0 = @func_318() /* ty=Tensor[(12, 2, 7), float32] */;
  (%0,)
}

def @func_4855(%var_4823: Tensor[(12, 2, 7), float32]) -> (Tensor[(12, 2, 7), bool], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(1440), uint64], Tensor[(8, 13, 4), uint8]) {
  %1 = @func_3515() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */;
  %2 = %1.1;
  %3 = cast(%var_4823, dtype="bool") /* ty=Tensor[(12, 2, 7), bool] */;
  %4 = shape_of(%2, dtype="int32") /* ty=Tensor[(3), int32] */;
  %5 = cast(%2, dtype="bool") /* ty=Tensor[(12, 2, 7), bool] */;
  %6 = dyn.reshape(%3, %4, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %7 = cast(meta[relay.Constant][0] /* ty=Tensor[(1440), uint64] */, dtype="uint64") /* ty=Tensor[(1440), uint64] */;
  %8 = reshape(%7, newshape=[1440]) /* ty=Tensor[(1440), uint64] */;
  %9 = @func_1989(%8) /* ty=(Tensor[(256), float32], Tensor[(12, 2, 7), float32], Tensor[(15, 8, 12), uint64], Tensor[(1440), uint64]) */;
  %10 = equal(%5, %6) /* ty=Tensor[(12, 2, 7), bool] */;
  %11 = @func_3108() /* ty=Tensor[(12, 2, 7), float32] */;
  %12 = %9.1;
  %13 = @func_2623() /* ty=Tensor[(8, 13, 4), uint8] */;
  (%10, %11, %12, meta[relay.Constant][0] /* ty=Tensor[(1440), uint64] */, %13)
}

def @func_667(%var_665: Tensor[(256), float32]) -> (Tensor[(12, 2, 7), float32], Tensor[(16, 16, ?), bool], Tensor[(256), float32]) {
  %14 = cast(%var_665, dtype="float32") /* ty=Tensor[(256), float32] */;
  %15 = reshape(%14, newshape=[16, 16, 1]) /* ty=Tensor[(16, 16, 1), float32] */;
  %16 = @func_318() /* ty=Tensor[(12, 2, 7), float32] */;
  %17 = @func_517(%15) /* ty=Tensor[(16, 16, ?), bool] */;
  (%16, %17, %var_665)
}

def @func_3539() -> Tensor[(12, 2, 7), float32] {
  %18 = @func_3293() /* ty=(Tensor[(12, 2, 7), float32],) */;
  %18.0
}

def @func_2390(%var_2379: Tensor[(416), uint8]) -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(416), uint8], Tensor[(4576, 1), uint8]) {
  %19 = @func_348() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 10, 13), float64]) */;
  %20 = cast(%var_2379, dtype="uint8") /* ty=Tensor[(416), uint8] */;
  %21 = cast(meta[relay.Constant][1] /* ty=Tensor[(4576, 1), uint8] */, dtype="uint8") /* ty=Tensor[(4576, 1), uint8] */;
  %22 = reshape(%20, newshape=[416]) /* ty=Tensor[(416), uint8] */;
  %23 = reshape(%21, newshape=[4576]) /* ty=Tensor[(4576), uint8] */;
  %24 = @func_2254(%22, %23) /* ty=(Tensor[(12, 2, 7), float32], Tensor[(1440), uint64], Tensor[(416), uint8], Tensor[(4576), uint8], Tensor[(256), float32], Tensor[(12, 2, 7), float32], Tensor[(128, 2), bool]) */;
  %25 = %19.0;
  %26 = %24.5;
  (%25, %26, %var_2379, meta[relay.Constant][1] /* ty=Tensor[(4576, 1), uint8] */)
}

def @func_5204() -> (Tensor[(12, 2, 7), float32],) {
  %27 = @func_4134() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(4576), uint8], Tensor[(8, 13, 4), float32]) */;
  %28 = %27.0;
  (%28,)
}

def @func_1658() -> Tensor[(12, 2, 7), float32] {
  %29 = @func_1029() /* ty=(Tensor[(12, 2, 7), float32],) */;
  %29.0
}

def @func_8044(%var_8030: Tensor[(3, 12, 14), float32]) -> (Tensor[(3, 12, 14), float32], Tensor[(1440, 1), uint64]) {
  %30 = cast(%var_8030, dtype="float32") /* ty=Tensor[(3, 12, 14), float32] */;
  %31 = asin(%30) /* ty=Tensor[(3, 12, 14), float32] */;
  %32 = cast(%var_8030, dtype="float32") /* ty=Tensor[(3, 12, 14), float32] */;
  %33 = shape_of(%31, dtype="int32") /* ty=Tensor[(3), int32] */;
  %34 = cast(%31, dtype="float32") /* ty=Tensor[(3, 12, 14), float32] */;
  %35 = dyn.reshape(%32, %33, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %36 = @func_2163() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(256), float32], Tensor[(15, 8, 12), uint64], Tensor[(1440, 1), uint64], Tensor[(15, 8, 12), uint64], Tensor[(12, 2, 7), float32], Tensor[(4, 104), bool]) */;
  %37 = power(%34, %35) /* ty=Tensor[(3, 12, 14), float32] */;
  %38 = %36.3;
  (%37, %38)
}

def @func_8246() -> Tensor[(12, 2, 7), float32] {
  @func_5040() /* ty=Tensor[(12, 2, 7), float32] */
}

def @func_6999() -> Tensor[(12, 2, 7), bool] {
  @func_5722() /* ty=Tensor[(12, 2, 7), bool] */
}

def @func_4134() -> (Tensor[(12, 2, 7), float32], Tensor[(4576), uint8], Tensor[(8, 13, 4), float32]) {
  %39 = @func_3855() /* ty=(Tensor[(15, 8, 12), uint64], Tensor[(8, 13, 4), uint8], Tensor[(8, 13, 4), uint8], Tensor[(12, 2, 7), float32], Tensor[(4576), uint8]) */;
  %40 = %39.2;
  %41 = cast(%40, dtype="uint8") /* ty=Tensor[(8, 13, 4), uint8] */;
  %42 = cast(meta[relay.Constant][2] /* ty=Tensor[(4576), uint8] */, dtype="uint8") /* ty=Tensor[(4576), uint8] */;
  %43 = reshape(%41, newshape=[416]) /* ty=Tensor[(416), uint8] */;
  %44 = reshape(%42, newshape=[4576]) /* ty=Tensor[(4576), uint8] */;
  %45 = @func_2254(%43, %44) /* ty=(Tensor[(12, 2, 7), float32], Tensor[(1440), uint64], Tensor[(416), uint8], Tensor[(4576), uint8], Tensor[(256), float32], Tensor[(12, 2, 7), float32], Tensor[(128, 2), bool]) */;
  %46 = cast(%40, dtype="float32") /* ty=Tensor[(8, 13, 4), float32] */;
  %47 = %45.5;
  %48 = log10(%46) /* ty=Tensor[(8, 13, 4), float32] */;
  (%47, meta[relay.Constant][2] /* ty=Tensor[(4576), uint8] */, %48)
}

def @func_4772(%var_4724: Tensor[(13, 11, 5), float64]) -> (Tensor[(13, 11, 5), float64], Tensor[(12, 2, 7), float32]) {
  %49 = cast(%var_4724, dtype="float64") /* ty=Tensor[(13, 11, 5), float64] */;
  %50 = asinh(%49) /* ty=Tensor[(13, 11, 5), float64] */;
  %51 = @func_4631() /* ty=Tensor[(12, 2, 7), float32] */;
  (%50, %51)
}

def @func_6449() -> (Tensor[(15, 8, 12), uint64],) {
  %52 = @func_1943() /* ty=Tensor[(15, 8, 12), uint64] */;
  (%52,)
}

def @func_8381(%var_8366: Tensor[(16, 3, 6), float64], %var_8367: Tensor[(16, 3, 6), float64]) -> Tensor[(16, 3, 6), bool] {
  %53 = cast(%var_8367, dtype="bool") /* ty=Tensor[(16, 3, 6), bool] */;
  %54 = shape_of(%var_8366, dtype="int32") /* ty=Tensor[(3), int32] */;
  %55 = cast(%var_8366, dtype="bool") /* ty=Tensor[(16, 3, 6), bool] */;
  %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %57 = not_equal(%55, %56) /* ty=Tensor[(16, 3, 6), bool] */;
  %58 = cast(%57, dtype="bool") /* ty=Tensor[(16, 3, 6), bool] */;
  %59 = shape_of(%var_8366, dtype="int32") /* ty=Tensor[(3), int32] */;
  %60 = cast(%var_8366, dtype="bool") /* ty=Tensor[(16, 3, 6), bool] */;
  %61 = dyn.reshape(%58, %59, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%60, %61) /* ty=Tensor[(16, 3, 6), bool] */
}

def @func_7645() -> (Tensor[(8, 10, 13), float64], Tensor[(8, 13, 4), float32]) {
  %62 = @func_348() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 10, 13), float64]) */;
  %63 = @func_2623() /* ty=Tensor[(8, 13, 4), uint8] */;
  %64 = cast(meta[relay.Constant][3] /* ty=Tensor[(8, 13, 4), uint8] */, dtype="float32") /* ty=Tensor[(8, 13, 4), float32] */;
  %65 = shape_of(%63, dtype="int32") /* ty=Tensor[(3), int32] */;
  %66 = cast(%63, dtype="float32") /* ty=Tensor[(8, 13, 4), float32] */;
  %67 = dyn.reshape(%64, %65, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %68 = %62.1;
  %69 = divide(%66, %67) /* ty=Tensor[(8, 13, 4), float32] */;
  (%68, %69)
}

def @func_2696() -> (Tensor[(8, 13, 4), uint8], Tensor[(15, 8, 12), uint64], Tensor[(1440), uint64]) {
  %70 = cast(meta[relay.Constant][4] /* ty=Tensor[(1440), uint64] */, dtype="uint64") /* ty=Tensor[(1440), uint64] */;
  %71 = cast(meta[relay.Constant][4] /* ty=Tensor[(1440), uint64] */, dtype="uint64") /* ty=Tensor[(1440), uint64] */;
  %72 = reshape(%70, newshape=[15, 8, 12]) /* ty=Tensor[(15, 8, 12), uint64] */;
  %73 = reshape(%71, newshape=[15, 8, 12]) /* ty=Tensor[(15, 8, 12), uint64] */;
  %74 = @func_1325(%72, %73) /* ty=(Tensor[(15, 8, 12), uint64], Tensor[(8, 13, 4), uint8]) */;
  %75 = @func_2623() /* ty=Tensor[(8, 13, 4), uint8] */;
  %76 = %74.0;
  (%75, %76, meta[relay.Constant][4] /* ty=Tensor[(1440), uint64] */)
}

def @func_1702(%var_1668: uint32, %var_1669: Tensor[(1, 4, 9), uint32]) -> (Tensor[(?, 4, 9), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(4, 120), float64], Tensor[(416), float32]) {
  %77 = cast(%var_1668, dtype="uint32") /* ty=uint32 */;
  %78 = cast(%var_1669, dtype="uint32") /* ty=Tensor[(1, 4, 9), uint32] */;
  %79 = add(%77, %78) /* ty=Tensor[(1, 4, 9), uint32] */;
  %80 = cast(%var_1669, dtype="float32") /* ty=Tensor[(1, 4, 9), float32] */;
  %81 = shape_of(%79, dtype="int32") /* ty=Tensor[(3), int32] */;
  %82 = cast(%79, dtype="float32") /* ty=Tensor[(1, 4, 9), float32] */;
  %83 = dyn.reshape(%80, %81, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %84 = floor_mod(%82, %83) /* ty=Tensor[(?, 4, 9), float32] */;
  %85 = cast(%var_1669, dtype="float32") /* ty=Tensor[(1, 4, 9), float32] */;
  %86 = shape_of(%84, dtype="int32") /* ty=Tensor[(3), int32] */;
  %87 = cast(%84, dtype="float32") /* ty=Tensor[(?, 4, 9), float32] */;
  %88 = dyn.reshape(%85, %86, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %89 = cast(meta[relay.Constant][5] /* ty=Tensor[(4, 120), float64] */, dtype="float64") /* ty=Tensor[(4, 120), float64] */;
  %90 = cast(meta[relay.Constant][6] /* ty=Tensor[(416), float32] */, dtype="float32") /* ty=Tensor[(416), float32] */;
  %91 = reshape(%89, newshape=[1, 480]) /* ty=Tensor[(1, 480), float64] */;
  %92 = reshape(%90, newshape=[8, 13, 4]) /* ty=Tensor[(8, 13, 4), float32] */;
  %93 = @func_1001(%91, %92) /* ty=(Tensor[(480), float64], Tensor[(1, 480), float64], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), int32]) */;
  %94 = mod(%87, %88) /* ty=Tensor[(?, 4, 9), float32] */;
  %95 = @func_1381() /* ty=Tensor[(12, 2, 7), float32] */;
  %96 = %93.2;
  (%94, %95, %96, meta[relay.Constant][5] /* ty=Tensor[(4, 120), float64] */, meta[relay.Constant][6] /* ty=Tensor[(416), float32] */)
}

def @func_318() -> Tensor[(12, 2, 7), float32] {
  %97 = cast(meta[relay.Constant][7] /* ty=Tensor[(12, 2, 7), float32] */, dtype="float32") /* ty=Tensor[(12, 2, 7), float32] */;
  log10(%97) /* ty=Tensor[(12, 2, 7), float32] */
}

def @func_2254(%var_2232: Tensor[(416), uint8], %var_2233: Tensor[(4576), uint8]) -> (Tensor[(12, 2, 7), float32], Tensor[(1440), uint64], Tensor[(416), uint8], Tensor[(4576), uint8], Tensor[(256), float32], Tensor[(12, 2, 7), float32], Tensor[(128, 2), bool]) {
  %98 = @func_1612() /* ty=(Tensor[(416), uint8], Tensor[(15, 8, 12), uint64], Tensor[(1440), uint64]) */;
  %99 = @func_1553() /* ty=(Tensor[(12, 2, 7), float32],) */;
  %100 = cast(%var_2232, dtype="uint8") /* ty=Tensor[(416), uint8] */;
  %101 = cast(%var_2233, dtype="uint8") /* ty=Tensor[(4576), uint8] */;
  %102 = cast(meta[relay.Constant][8] /* ty=Tensor[(256), float32] */, dtype="float32") /* ty=Tensor[(256), float32] */;
  %103 = reshape(%100, newshape=[1, 416]) /* ty=Tensor[(1, 416), uint8] */;
  %104 = reshape(%101, newshape=[11, 416]) /* ty=Tensor[(11, 416), uint8] */;
  %105 = reshape(%102, newshape=[128, 2]) /* ty=Tensor[(128, 2), float32] */;
  %106 = @func_609(%103, %104, %105) /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 5, 8), float64], Tensor[(11, 416), int8], Tensor[(16, 16, ?), bool], Tensor[(128, 2), float32], Tensor[(12, 5, 8), float64], Tensor[(1, 416), float64], Tensor[(16, 16, ?), bool]) */;
  %107 = %106.4;
  %108 = cast(%107, dtype="float64") /* ty=Tensor[(128, 2), float64] */;
  %109 = acosh(%108) /* ty=Tensor[(128, 2), float64] */;
  %110 = cast(meta[relay.Constant][9] /* ty=Tensor[(128, 2), float64] */, dtype="bool") /* ty=Tensor[(128, 2), bool] */;
  %111 = shape_of(%109, dtype="int32") /* ty=Tensor[(2), int32] */;
  %112 = cast(%109, dtype="bool") /* ty=Tensor[(128, 2), bool] */;
  %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %114 = @func_1131() /* ty=Tensor[(12, 2, 7), float32] */;
  %115 = %98.2;
  %116 = %99.0;
  %117 = logical_or(%112, %113) /* ty=Tensor[(128, 2), bool] */;
  (%114, %115, %var_2232, %var_2233, meta[relay.Constant][8] /* ty=Tensor[(256), float32] */, %116, %117)
}

def @func_1911() -> (Tensor[(256), float32], Tensor[(16, 16), float32], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint64], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8]) {
  %118 = cast(meta[relay.Constant][10] /* ty=Tensor[(16, 16), float32] */, dtype="float32") /* ty=Tensor[(16, 16), float32] */;
  %119 = reshape(%118, newshape=[256]) /* ty=Tensor[(256), float32] */;
  %120 = @func_667(%119) /* ty=(Tensor[(12, 2, 7), float32], Tensor[(16, 16, ?), bool], Tensor[(256), float32]) */;
  %121 = @func_800() /* ty=(Tensor[(8, 13, 4), uint8],) */;
  %122 = %121.0;
  %123 = cast(%122, dtype="float64") /* ty=Tensor[(8, 13, 4), float64] */;
  %124 = sigmoid(%123) /* ty=Tensor[(8, 13, 4), float64] */;
  %125 = cast(%122, dtype="uint64") /* ty=Tensor[(8, 13, 4), uint64] */;
  %126 = shape_of(%124, dtype="int32") /* ty=Tensor[(3), int32] */;
  %127 = cast(%124, dtype="uint64") /* ty=Tensor[(8, 13, 4), uint64] */;
  %128 = dyn.reshape(%125, %126, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %129 = cast(%122, dtype="uint8") /* ty=Tensor[(8, 13, 4), uint8] */;
  %130 = reshape(%129, newshape=[416]) /* ty=Tensor[(416), uint8] */;
  %131 = @func_1482(%130) /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(1, 416), float64], Tensor[(416), uint8], Tensor[(256), float32], Tensor[(4576), int16], Tensor[(4576), bool]) */;
  %132 = cast(%124, dtype="uint8") /* ty=Tensor[(8, 13, 4), uint8] */;
  %133 = cast(%124, dtype="uint8") /* ty=Tensor[(8, 13, 4), uint8] */;
  %134 = reshape(%132, newshape=[8, 13, 4]) /* ty=Tensor[(8, 13, 4), uint8] */;
  %135 = reshape(%133, newshape=[8, 13, 4]) /* ty=Tensor[(8, 13, 4), uint8] */;
  %136 = %120.2;
  %137 = @func_1381() /* ty=Tensor[(12, 2, 7), float32] */;
  %138 = logical_xor(%127, %128) /* ty=Tensor[(8, 13, 4), uint64] */;
  %139 = %131.0;
  %140 = @func_77(%134, %135) /* ty=Tensor[(8, 13, 4), uint8] */;
  (%136, meta[relay.Constant][10] /* ty=Tensor[(16, 16), float32] */, %137, %138, %139, %140)
}

def @func_5391() -> (Tensor[(8, 13, 4), float32],) {
  %141 = @func_4134() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(4576), uint8], Tensor[(8, 13, 4), float32]) */;
  %142 = %141.2;
  (%142,)
}

def @func_4246(%var_4220: Tensor[(7, 5, 9), int64]) -> (Tensor[(7, 5, 9), bool], Tensor[(12, 2, 7), float32], Tensor[(7, 5, 9), float64]) {
  %143 = cast(meta[relay.Constant][11] /* ty=Tensor[(7, 5, 9), int64] */, dtype="bool") /* ty=Tensor[(7, 5, 9), bool] */;
  %144 = shape_of(%var_4220, dtype="int32") /* ty=Tensor[(3), int32] */;
  %145 = cast(%var_4220, dtype="bool") /* ty=Tensor[(7, 5, 9), bool] */;
  %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %147 = greater_equal(%145, %146) /* ty=Tensor[(7, 5, 9), bool] */;
  %148 = cast(meta[relay.Constant][11] /* ty=Tensor[(7, 5, 9), int64] */, dtype="bool") /* ty=Tensor[(7, 5, 9), bool] */;
  %149 = shape_of(%147, dtype="int32") /* ty=Tensor[(3), int32] */;
  %150 = cast(%147, dtype="bool") /* ty=Tensor[(7, 5, 9), bool] */;
  %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %152 = cast(meta[relay.Constant][11] /* ty=Tensor[(7, 5, 9), int64] */, dtype="float64") /* ty=Tensor[(7, 5, 9), float64] */;
  %153 = not_equal(%150, %151) /* ty=Tensor[(7, 5, 9), bool] */;
  %154 = @func_1131() /* ty=Tensor[(12, 2, 7), float32] */;
  %155 = acos(%152) /* ty=Tensor[(7, 5, 9), float64] */;
  (%153, %154, %155)
}

def @func_7036() -> (Tensor[(12, 2, 7), float32],) {
  %156 = @func_3709() /* ty=(Tensor[(12, 2, 7), float32],) */;
  %157 = %156.0;
  (%157,)
}

def @func_5065(%var_5050: Tensor[(3, 4, 7), int32], %var_5051: Tensor[(3, 4, 7), int32]) -> (Tensor[(3, 4, 7), int32], Tensor[(12, 2, 7), float32], Tensor[(3, 4, 7), float32]) {
  %158 = cast(%var_5051, dtype="int32") /* ty=Tensor[(3, 4, 7), int32] */;
  %159 = shape_of(%var_5050, dtype="int32") /* ty=Tensor[(3), int32] */;
  %160 = cast(%var_5050, dtype="int32") /* ty=Tensor[(3, 4, 7), int32] */;
  %161 = dyn.reshape(%158, %159, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %162 = cast(%var_5051, dtype="float32") /* ty=Tensor[(3, 4, 7), float32] */;
  %163 = shape_of(%var_5050, dtype="int32") /* ty=Tensor[(3), int32] */;
  %164 = cast(%var_5050, dtype="float32") /* ty=Tensor[(3, 4, 7), float32] */;
  %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %166 = multiply(%160, %161) /* ty=Tensor[(3, 4, 7), int32] */;
  %167 = @func_4253() /* ty=Tensor[(12, 2, 7), float32] */;
  %168 = power(%164, %165) /* ty=Tensor[(3, 4, 7), float32] */;
  (%166, %167, %168)
}

def @func_8362() -> Tensor[(12, 2, 7), float32] {
  @func_7433() /* ty=Tensor[(12, 2, 7), float32] */
}

def @func_7162(%var_7159: Tensor[(9, 14, 11), float64]) -> (Tensor[(9, 14, 11), float64],) {
  %169 = cast(%var_7159, dtype="float64") /* ty=Tensor[(9, 14, 11), float64] */;
  %170 = cosh(%169) /* ty=Tensor[(9, 14, 11), float64] */;
  (%170,)
}

def @func_2348() -> (Tensor[(12, 2, 7), float32], Tensor[(12, 5, 8), float64], Tensor[(120, 4), float64]) {
  %171 = @func_2011() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */;
  %172 = cast(meta[relay.Constant][12] /* ty=Tensor[(120, 4), float64] */, dtype="float64") /* ty=Tensor[(120, 4), float64] */;
  %173 = cast(meta[relay.Constant][12] /* ty=Tensor[(120, 4), float64] */, dtype="float64") /* ty=Tensor[(120, 4), float64] */;
  %174 = reshape(%172, newshape=[12, 5, 8]) /* ty=Tensor[(12, 5, 8), float64] */;
  %175 = reshape(%173, newshape=[12, 5, 8]) /* ty=Tensor[(12, 5, 8), float64] */;
  %176 = @func_133(%174, %175) /* ty=(Tensor[(12, 5, 8), float64],) */;
  %177 = %171.1;
  %178 = %176.0;
  (%177, %178, meta[relay.Constant][12] /* ty=Tensor[(120, 4), float64] */)
}

def @func_4631() -> Tensor[(12, 2, 7), float32] {
  @func_4253() /* ty=Tensor[(12, 2, 7), float32] */
}

def @func_6765(%var_6752: Tensor[(2, 4, 15), uint32], %var_6753: Tensor[(2, 4, 15), uint32]) -> Tensor[(2, 4, 15), bool] {
  %179 = cast(%var_6753, dtype="bool") /* ty=Tensor[(2, 4, 15), bool] */;
  %180 = shape_of(%var_6752, dtype="int32") /* ty=Tensor[(3), int32] */;
  %181 = cast(%var_6752, dtype="bool") /* ty=Tensor[(2, 4, 15), bool] */;
  %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%181, %182) /* ty=Tensor[(2, 4, 15), bool] */
}

def @func_2562() -> Tensor[(12, 2, 7), float32] {
  %183 = @func_2454() /* ty=(Tensor[(12, 2, 7), float32],) */;
  %183.0
}

def @func_800() -> (Tensor[(8, 13, 4), uint8],) {
  %184 = @func_782() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8], Tensor[(416), uint8]) */;
  %185 = %184.1;
  (%185,)
}

def @func_7446(%var_7438: Tensor[(1440), uint64]) -> (Tensor[(8, 13, 4), uint8], Tensor[(15, 8, 12), bool], Tensor[(1440), float64]) {
  %186 = @func_3855() /* ty=(Tensor[(15, 8, 12), uint64], Tensor[(8, 13, 4), uint8], Tensor[(8, 13, 4), uint8], Tensor[(12, 2, 7), float32], Tensor[(4576), uint8]) */;
  %187 = cast(%var_7438, dtype="uint64") /* ty=Tensor[(1440), uint64] */;
  %188 = reshape(%187, newshape=[15, 8, 12]) /* ty=Tensor[(15, 8, 12), uint64] */;
  %189 = @func_3347(%188) /* ty=(Tensor[(15, 8, 12), bool],) */;
  %190 = cast(%var_7438, dtype="float64") /* ty=Tensor[(1440), float64] */;
  %191 = %186.2;
  %192 = %189.0;
  %193 = acosh(%190) /* ty=Tensor[(1440), float64] */;
  (%191, %192, %193)
}

def @func_1553() -> (Tensor[(12, 2, 7), float32],) {
  %194 = @func_1029() /* ty=(Tensor[(12, 2, 7), float32],) */;
  %195 = %194.0;
  (%195,)
}

def @func_6736() -> Tensor[(8, 13, 4), float64] {
  %196 = @func_5391() /* ty=(Tensor[(8, 13, 4), float32],) */;
  %197 = %196.0;
  %198 = cast(%197, dtype="float64") /* ty=Tensor[(8, 13, 4), float64] */;
  atanh(%198) /* ty=Tensor[(8, 13, 4), float64] */
}

def @func_5135() -> (Tensor[(12, 2, 7), float32],) {
  %199 = @func_3108() /* ty=Tensor[(12, 2, 7), float32] */;
  (%199,)
}

def @func_5616(%var_5544: Tensor[(12, 2, 7), float32], %var_5595: Tensor[(12, 2, 7), float32]) -> (Tensor[(12, 2, 7), int64], Tensor[(12, 5, 7), float32], Tensor[(416), uint8], Tensor[(8, 10, 13), uint32], Tensor[(12, 2, 7), int8]) {
  %200 = @func_5204() /* ty=(Tensor[(12, 2, 7), float32],) */;
  %201 = %200.0;
  %202 = cast(%var_5544, dtype="int64") /* ty=Tensor[(12, 2, 7), int64] */;
  %203 = shape_of(%201, dtype="int32") /* ty=Tensor[(3), int32] */;
  %204 = cast(%201, dtype="int64") /* ty=Tensor[(12, 2, 7), int64] */;
  %205 = dyn.reshape(%202, %203, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %206 = @func_1837() /* ty=(Tensor[(12, 5, 7), float32], Tensor[(12, 5, 7), float32], Tensor[(12, 2, 7), float32]) */;
  %207 = @func_1612() /* ty=(Tensor[(416), uint8], Tensor[(15, 8, 12), uint64], Tensor[(1440), uint64]) */;
  %208 = cast(%var_5595, dtype="int8") /* ty=Tensor[(12, 2, 7), int8] */;
  %209 = shape_of(%201, dtype="int32") /* ty=Tensor[(3), int32] */;
  %210 = cast(%201, dtype="int8") /* ty=Tensor[(12, 2, 7), int8] */;
  %211 = dyn.reshape(%208, %209, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %212 = bitwise_and(%204, %205) /* ty=Tensor[(12, 2, 7), int64] */;
  %213 = %206.0;
  %214 = %207.0;
  %215 = @func_4717() /* ty=Tensor[(8, 10, 13), uint32] */;
  %216 = left_shift(%210, %211) /* ty=Tensor[(12, 2, 7), int8] */;
  (%212, %213, %214, %215, %216)
}

def @func_2934(%var_2885: Tensor[(8, 13, 4), bool], %var_2905: Tensor[(1440), uint64]) -> (Tensor[(8, 13, 4), bool], Tensor[(12, 2, 7), float32], Tensor[(1440), uint64], Tensor[(1, 16, 14), float32], Tensor[(1, 224), float32]) {
  %217 = @func_1426() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), bool], Tensor[(12, 2, 7), float32]) */;
  %218 = %217.1;
  %219 = cast(%var_2885, dtype="uint32") /* ty=Tensor[(8, 13, 4), uint32] */;
  %220 = shape_of(%218, dtype="int32") /* ty=Tensor[(3), int32] */;
  %221 = cast(%218, dtype="uint32") /* ty=Tensor[(8, 13, 4), uint32] */;
  %222 = dyn.reshape(%219, %220, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %223 = bitwise_and(%221, %222) /* ty=Tensor[(8, 13, 4), uint32] */;
  %224 = cast(%223, dtype="bool") /* ty=Tensor[(8, 13, 4), bool] */;
  %225 = shape_of(%218, dtype="int32") /* ty=Tensor[(3), int32] */;
  %226 = cast(%218, dtype="bool") /* ty=Tensor[(8, 13, 4), bool] */;
  %227 = dyn.reshape(%224, %225, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %228 = cast(%var_2905, dtype="uint64") /* ty=Tensor[(1440), uint64] */;
  %229 = reshape(%228, newshape=[1440]) /* ty=Tensor[(1440), uint64] */;
  %230 = @func_1989(%229) /* ty=(Tensor[(256), float32], Tensor[(12, 2, 7), float32], Tensor[(15, 8, 12), uint64], Tensor[(1440), uint64]) */;
  %231 = cast(meta[relay.Constant][13] /* ty=Tensor[(1, 224), float32] */, dtype="float32") /* ty=Tensor[(1, 224), float32] */;
  %232 = reshape(%231, newshape=[1, 16, 14]) /* ty=Tensor[(1, 16, 14), float32] */;
  %233 = @func_2602(%232) /* ty=(Tensor[(1, 16, 14), float32], Tensor[(1, 16, 14), float64]) */;
  %234 = not_equal(%226, %227) /* ty=Tensor[(8, 13, 4), bool] */;
  %235 = %230.1;
  %236 = %233.0;
  (%234, %235, %var_2905, %236, meta[relay.Constant][13] /* ty=Tensor[(1, 224), float32] */)
}

def @func_1325(%var_1245: Tensor[(15, 8, 12), uint64], %var_1246: Tensor[(15, 8, 12), uint64]) -> (Tensor[(15, 8, 12), uint64], Tensor[(8, 13, 4), uint8]) {
  %237 = cast(%var_1246, dtype="uint64") /* ty=Tensor[(15, 8, 12), uint64] */;
  %238 = shape_of(%var_1245, dtype="int32") /* ty=Tensor[(3), int32] */;
  %239 = cast(%var_1245, dtype="uint64") /* ty=Tensor[(15, 8, 12), uint64] */;
  %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %241 = @func_782() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8], Tensor[(416), uint8]) */;
  %242 = bitwise_xor(%239, %240) /* ty=Tensor[(15, 8, 12), uint64] */;
  %243 = %241.1;
  (%242, %243)
}

def @func_6126(%var_6094: Tensor[(12, 2, 7), float32]) -> (Tensor[(8, 13, 4), uint8], Tensor[(256), float32], Tensor[(12, 2, 7), float32]) {
  %244 = @func_2696() /* ty=(Tensor[(8, 13, 4), uint8], Tensor[(15, 8, 12), uint64], Tensor[(1440), uint64]) */;
  %245 = @func_2163() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(256), float32], Tensor[(15, 8, 12), uint64], Tensor[(1440, 1), uint64], Tensor[(15, 8, 12), uint64], Tensor[(12, 2, 7), float32], Tensor[(4, 104), bool]) */;
  %246 = @func_2011() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */;
  %247 = %246.1;
  %248 = cast(%var_6094, dtype="float32") /* ty=Tensor[(12, 2, 7), float32] */;
  %249 = shape_of(%247, dtype="int32") /* ty=Tensor[(3), int32] */;
  %250 = cast(%247, dtype="float32") /* ty=Tensor[(12, 2, 7), float32] */;
  %251 = dyn.reshape(%248, %249, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %252 = %244.0;
  %253 = %245.1;
  %254 = subtract(%250, %251) /* ty=Tensor[(12, 2, 7), float32] */;
  (%252, %253, %254)
}

def @func_4574() -> (Tensor[(15, 8, 12), uint64], Tensor[(12, 2, 7), float32]) {
  %255 = @func_2082() /* ty=(Tensor[(15, 8, 12), uint64], Tensor[(416), uint8], Tensor[(416), float32], Tensor[(480), float64]) */;
  %256 = %255.0;
  %257 = @func_4253() /* ty=Tensor[(12, 2, 7), float32] */;
  (%256, %257)
}

def @func_3293() -> (Tensor[(12, 2, 7), float32],) {
  %258 = @func_1029() /* ty=(Tensor[(12, 2, 7), float32],) */;
  %259 = %258.0;
  (%259,)
}

def @func_4331() -> (Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8]) {
  %260 = @func_1075() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */;
  %261 = %260.0;
  %262 = @func_3390() /* ty=Tensor[(8, 13, 4), uint8] */;
  (%261, %262)
}

def @func_2082() -> (Tensor[(15, 8, 12), uint64], Tensor[(416), uint8], Tensor[(416), float32], Tensor[(480), float64]) {
  %263 = @func_1612() /* ty=(Tensor[(416), uint8], Tensor[(15, 8, 12), uint64], Tensor[(1440), uint64]) */;
  %264 = cast(meta[relay.Constant][14] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %265 = %263.0;
  %266 = cast(%265, dtype="float32") /* ty=Tensor[(416), float32] */;
  %267 = reshape(%264, newshape=[120, 4]) /* ty=Tensor[(120, 4), float64] */;
  %268 = reshape(%266, newshape=[416]) /* ty=Tensor[(416), float32] */;
  %269 = @func_1211(%267, %268) /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 10, 13), float64], Tensor[(12, 2, 7), float32], Tensor[(120, 4), float64], Tensor[(416), float32]) */;
  %270 = @func_1943() /* ty=Tensor[(15, 8, 12), uint64] */;
  %271 = %269.4;
  (%270, %265, %271, meta[relay.Constant][14] /* ty=Tensor[(480), float64] */)
}

def @func_1612() -> (Tensor[(416), uint8], Tensor[(15, 8, 12), uint64], Tensor[(1440), uint64]) {
  %272 = @func_782() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8], Tensor[(416), uint8]) */;
  %273 = cast(meta[relay.Constant][15] /* ty=Tensor[(1440), uint64] */, dtype="uint64") /* ty=Tensor[(1440), uint64] */;
  %274 = cast(meta[relay.Constant][15] /* ty=Tensor[(1440), uint64] */, dtype="uint64") /* ty=Tensor[(1440), uint64] */;
  %275 = reshape(%273, newshape=[15, 8, 12]) /* ty=Tensor[(15, 8, 12), uint64] */;
  %276 = reshape(%274, newshape=[15, 8, 12]) /* ty=Tensor[(15, 8, 12), uint64] */;
  %277 = @func_1325(%275, %276) /* ty=(Tensor[(15, 8, 12), uint64], Tensor[(8, 13, 4), uint8]) */;
  %278 = %272.2;
  %279 = %277.0;
  (%278, %279, meta[relay.Constant][15] /* ty=Tensor[(1440), uint64] */)
}

def @func_6847(%var_6828: Tensor[(168), float32]) -> (Tensor[(8, 10, 13), bool], Tensor[(8, 10, 13), float32], Tensor[(12, 2, 7), bool], Tensor[(168), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) {
  %280 = @func_348() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 10, 13), float64]) */;
  %281 = %280.1;
  %282 = cast(meta[relay.Constant][16] /* ty=Tensor[(8, 10, 13), float64] */, dtype="bool") /* ty=Tensor[(8, 10, 13), bool] */;
  %283 = shape_of(%281, dtype="int32") /* ty=Tensor[(3), int32] */;
  %284 = cast(%281, dtype="bool") /* ty=Tensor[(8, 10, 13), bool] */;
  %285 = dyn.reshape(%282, %283, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %286 = cast(meta[relay.Constant][16] /* ty=Tensor[(8, 10, 13), float64] */, dtype="float32") /* ty=Tensor[(8, 10, 13), float32] */;
  %287 = cast(%var_6828, dtype="float32") /* ty=Tensor[(168), float32] */;
  %288 = reshape(%287, newshape=[12, 2, 7]) /* ty=Tensor[(12, 2, 7), float32] */;
  %289 = @func_4855(%288) /* ty=(Tensor[(12, 2, 7), bool], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(1440), uint64], Tensor[(8, 13, 4), uint8]) */;
  %290 = not_equal(%284, %285) /* ty=Tensor[(8, 10, 13), bool] */;
  %291 = sqrt(%286) /* ty=Tensor[(8, 10, 13), float32] */;
  %292 = %289.0;
  %293 = @func_5631() /* ty=Tensor[(12, 2, 7), float32] */;
  %294 = @func_4253() /* ty=Tensor[(12, 2, 7), float32] */;
  (%290, %291, %292, %var_6828, %293, %294)
}

def @func_348() -> (Tensor[(12, 2, 7), float32], Tensor[(8, 10, 13), float64]) {
  %295 = cast(meta[relay.Constant][17] /* ty=Tensor[(8, 10, 13), float32] */, dtype="float32") /* ty=Tensor[(8, 10, 13), float32] */;
  %296 = cosh(%295) /* ty=Tensor[(8, 10, 13), float32] */;
  %297 = cast(%296, dtype="float64") /* ty=Tensor[(8, 10, 13), float64] */;
  %298 = @func_318() /* ty=Tensor[(12, 2, 7), float32] */;
  %299 = sin(%297) /* ty=Tensor[(8, 10, 13), float64] */;
  (%298, %299)
}

def @func_2759() -> Tensor[(12, 2, 7), float32] {
  @func_1381() /* ty=Tensor[(12, 2, 7), float32] */
}

def @func_7288() -> Tensor[(12, 2, 7), float32] {
  %300 = @func_5800() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(416), uint8], Tensor[(12, 2, 7), float32]) */;
  %300.2
}

def @func_5270() -> (Tensor[(8, 13, 4), uint8], Tensor[(12, 2, 7), float32]) {
  %301 = @func_2454() /* ty=(Tensor[(12, 2, 7), float32],) */;
  %302 = @func_2623() /* ty=Tensor[(8, 13, 4), uint8] */;
  %303 = %301.0;
  (%302, %303)
}

def @func_8220() -> (Tensor[(8, 13, 4), uint8], Tensor[(8, 10, 13), float64]) {
  %304 = @func_3390() /* ty=Tensor[(8, 13, 4), uint8] */;
  %305 = @func_7672() /* ty=Tensor[(8, 10, 13), float64] */;
  (%304, %305)
}

def @func_1211(%var_1194: Tensor[(120, 4), float64], %var_1195: Tensor[(416), float32]) -> (Tensor[(12, 2, 7), float32], Tensor[(8, 10, 13), float64], Tensor[(12, 2, 7), float32], Tensor[(120, 4), float64], Tensor[(416), float32]) {
  %306 = @func_1075() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */;
  %307 = @func_348() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 10, 13), float64]) */;
  %308 = cast(%var_1194, dtype="float64") /* ty=Tensor[(120, 4), float64] */;
  %309 = cast(%var_1195, dtype="float32") /* ty=Tensor[(416), float32] */;
  %310 = reshape(%308, newshape=[1, 480]) /* ty=Tensor[(1, 480), float64] */;
  %311 = reshape(%309, newshape=[8, 13, 4]) /* ty=Tensor[(8, 13, 4), float32] */;
  %312 = @func_1001(%310, %311) /* ty=(Tensor[(480), float64], Tensor[(1, 480), float64], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), int32]) */;
  %313 = %306.2;
  %314 = %307.1;
  %315 = %312.2;
  (%313, %314, %315, %var_1194, %var_1195)
}

def @func_4917() -> Tensor[(12, 2, 7), float32] {
  @func_4631() /* ty=Tensor[(12, 2, 7), float32] */
}

def @func_6624(%var_6613: Tensor[(1440), uint64]) -> (Tensor[(12, 5, 8), float64], Tensor[(15, 8, 12), bool], Tensor[(1440), uint64], Tensor[(12, 2, 7), float32]) {
  %316 = @func_2348() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 5, 8), float64], Tensor[(120, 4), float64]) */;
  %317 = %316.1;
  %318 = cast(%317, dtype="float64") /* ty=Tensor[(12, 5, 8), float64] */;
  %319 = cast(%var_6613, dtype="uint64") /* ty=Tensor[(1440), uint64] */;
  %320 = reshape(%319, newshape=[15, 8, 12]) /* ty=Tensor[(15, 8, 12), uint64] */;
  %321 = @func_3347(%320) /* ty=(Tensor[(15, 8, 12), bool],) */;
  %322 = @func_2988() /* ty=(Tensor[(15, 8, 12), uint64], Tensor[(12, 2, 7), float32]) */;
  %323 = sinh(%318) /* ty=Tensor[(12, 5, 8), float64] */;
  %324 = %321.0;
  %325 = %322.1;
  (%323, %324, %var_6613, %325)
}

def @func_5722() -> Tensor[(12, 2, 7), bool] {
  %326 = @func_5631() /* ty=Tensor[(12, 2, 7), float32] */;
  %327 = cast(meta[relay.Constant][18] /* ty=Tensor[(12, 2, 7), float32] */, dtype="bool") /* ty=Tensor[(12, 2, 7), bool] */;
  %328 = shape_of(%326, dtype="int32") /* ty=Tensor[(3), int32] */;
  %329 = cast(%326, dtype="bool") /* ty=Tensor[(12, 2, 7), bool] */;
  %330 = dyn.reshape(%327, %328, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%329, %330) /* ty=Tensor[(12, 2, 7), bool] */
}

def @func_7570() -> (Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), float64], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) {
  %331 = @func_5204() /* ty=(Tensor[(12, 2, 7), float32],) */;
  %332 = @func_5391() /* ty=(Tensor[(8, 13, 4), float32],) */;
  %333 = %332.0;
  %334 = cast(meta[relay.Constant][19] /* ty=Tensor[(8, 13, 4), float32] */, dtype="uint8") /* ty=Tensor[(8, 13, 4), uint8] */;
  %335 = shape_of(%333, dtype="int32") /* ty=Tensor[(3), int32] */;
  %336 = cast(%333, dtype="uint8") /* ty=Tensor[(8, 13, 4), uint8] */;
  %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %338 = @func_6736() /* ty=Tensor[(8, 13, 4), float64] */;
  %339 = cast(%333, dtype="float64") /* ty=Tensor[(8, 13, 4), float64] */;
  %340 = shape_of(%338, dtype="int32") /* ty=Tensor[(3), int32] */;
  %341 = cast(%338, dtype="float64") /* ty=Tensor[(8, 13, 4), float64] */;
  %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %343 = @func_7036() /* ty=(Tensor[(12, 2, 7), float32],) */;
  %344 = @func_1837() /* ty=(Tensor[(12, 5, 7), float32], Tensor[(12, 5, 7), float32], Tensor[(12, 2, 7), float32]) */;
  %345 = %331.0;
  %346 = maximum(%336, %337) /* ty=Tensor[(8, 13, 4), uint8] */;
  %347 = @func_3325() /* ty=Tensor[(12, 2, 7), float32] */;
  %348 = mod(%341, %342) /* ty=Tensor[(8, 13, 4), float64] */;
  %349 = %343.0;
  %350 = %344.2;
  (%345, %346, %347, %348, %349, %350)
}

def @func_5501(%var_5494: Tensor[(3, 5, 5), uint8], %var_5495: Tensor[(3, 5, 5), uint8]) -> Tensor[(3, 5, 5), uint8] {
  %351 = cast(%var_5495, dtype="uint8") /* ty=Tensor[(3, 5, 5), uint8] */;
  %352 = shape_of(%var_5494, dtype="int32") /* ty=Tensor[(3), int32] */;
  %353 = cast(%var_5494, dtype="uint8") /* ty=Tensor[(3, 5, 5), uint8] */;
  %354 = dyn.reshape(%351, %352, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  subtract(%353, %354) /* ty=Tensor[(3, 5, 5), uint8] */
}

def @func_7952(%var_7890: Tensor[(4576), uint8]) -> (Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), float32], Tensor[(16, 16, ?), bool], Tensor[(4576), uint8], Tensor[(256), float32], Tensor[(8, 10, 13), uint32]) {
  %355 = @func_3855() /* ty=(Tensor[(15, 8, 12), uint64], Tensor[(8, 13, 4), uint8], Tensor[(8, 13, 4), uint8], Tensor[(12, 2, 7), float32], Tensor[(4576), uint8]) */;
  %356 = %355.2;
  %357 = cast(%356, dtype="float32") /* ty=Tensor[(8, 13, 4), float32] */;
  %358 = erf(%357) /* ty=Tensor[(8, 13, 4), float32] */;
  %359 = cast(%358, dtype="uint8") /* ty=Tensor[(8, 13, 4), uint8] */;
  %360 = cast(%var_7890, dtype="uint8") /* ty=Tensor[(4576), uint8] */;
  %361 = cast(meta[relay.Constant][20] /* ty=Tensor[(256), float32] */, dtype="float32") /* ty=Tensor[(256), float32] */;
  %362 = reshape(%359, newshape=[1, 416]) /* ty=Tensor[(1, 416), uint8] */;
  %363 = reshape(%360, newshape=[11, 416]) /* ty=Tensor[(11, 416), uint8] */;
  %364 = reshape(%361, newshape=[128, 2]) /* ty=Tensor[(128, 2), float32] */;
  %365 = @func_609(%362, %363, %364) /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 5, 8), float64], Tensor[(11, 416), int8], Tensor[(16, 16, ?), bool], Tensor[(128, 2), float32], Tensor[(12, 5, 8), float64], Tensor[(1, 416), float64], Tensor[(16, 16, ?), bool]) */;
  %366 = @func_3226() /* ty=Tensor[(12, 2, 7), float32] */;
  %367 = %365.7;
  %368 = @func_4717() /* ty=Tensor[(8, 10, 13), uint32] */;
  (%366, %358, %367, %var_7890, meta[relay.Constant][20] /* ty=Tensor[(256), float32] */, %368)
}

def @func_7773(%var_7719: Tensor[(1440), uint64], %var_7761: Tensor[(720), float64]) -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8], Tensor[(1440), uint64], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(8, 10, 13), float64], Tensor[(8, 60), float64], Tensor[(416), float32], Tensor[(720), float64], Tensor[(9, 14, 11), float64], Tensor[(1386), float64]) {
  %369 = @func_1553() /* ty=(Tensor[(12, 2, 7), float32],) */;
  %370 = cast(%var_7719, dtype="uint64") /* ty=Tensor[(1440), uint64] */;
  %371 = cast(%var_7719, dtype="uint64") /* ty=Tensor[(1440), uint64] */;
  %372 = reshape(%370, newshape=[15, 8, 12]) /* ty=Tensor[(15, 8, 12), uint64] */;
  %373 = reshape(%371, newshape=[15, 8, 12]) /* ty=Tensor[(15, 8, 12), uint64] */;
  %374 = @func_1325(%372, %373) /* ty=(Tensor[(15, 8, 12), uint64], Tensor[(8, 13, 4), uint8]) */;
  %375 = cast(meta[relay.Constant][21] /* ty=Tensor[(8, 60), float64] */, dtype="float64") /* ty=Tensor[(8, 60), float64] */;
  %376 = %374.1;
  %377 = cast(%376, dtype="float32") /* ty=Tensor[(8, 13, 4), float32] */;
  %378 = reshape(%375, newshape=[120, 4]) /* ty=Tensor[(120, 4), float64] */;
  %379 = reshape(%377, newshape=[416]) /* ty=Tensor[(416), float32] */;
  %380 = @func_1211(%378, %379) /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 10, 13), float64], Tensor[(12, 2, 7), float32], Tensor[(120, 4), float64], Tensor[(416), float32]) */;
  %381 = cast(%var_7761, dtype="float64") /* ty=Tensor[(720), float64] */;
  %382 = reshape(%381, newshape=[8, 6, 15]) /* ty=Tensor[(8, 6, 15), float64] */;
  %383 = @func_2193(%382) /* ty=(Tensor[(8, 6, 15), float64], Tensor[(416), float32], Tensor[(12, 2, 7), float32]) */;
  %384 = cast(meta[relay.Constant][22] /* ty=Tensor[(1386), float64] */, dtype="float64") /* ty=Tensor[(1386), float64] */;
  %385 = reshape(%384, newshape=[9, 14, 11]) /* ty=Tensor[(9, 14, 11), float64] */;
  %386 = @func_7162(%385) /* ty=(Tensor[(9, 14, 11), float64],) */;
  %387 = %369.0;
  %388 = @func_3226() /* ty=Tensor[(12, 2, 7), float32] */;
  %389 = @func_7288() /* ty=Tensor[(12, 2, 7), float32] */;
  %390 = @func_4631() /* ty=Tensor[(12, 2, 7), float32] */;
  %391 = %380.1;
  %392 = %383.1;
  %393 = %386.0;
  (%387, %388, %376, %var_7719, %389, %390, %391, meta[relay.Constant][21] /* ty=Tensor[(8, 60), float64] */, %392, %var_7761, %393, meta[relay.Constant][22] /* ty=Tensor[(1386), float64] */)
}

def @func_1482(%var_1451: Tensor[(416), uint8]) -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(1, 416), float64], Tensor[(416), uint8], Tensor[(256), float32], Tensor[(4576), int16], Tensor[(4576), bool]) {
  %394 = @func_1029() /* ty=(Tensor[(12, 2, 7), float32],) */;
  %395 = cast(%var_1451, dtype="uint8") /* ty=Tensor[(416), uint8] */;
  %396 = cast(meta[relay.Constant][23] /* ty=Tensor[(4576), uint8] */, dtype="uint8") /* ty=Tensor[(4576), uint8] */;
  %397 = cast(meta[relay.Constant][24] /* ty=Tensor[(256), float32] */, dtype="float32") /* ty=Tensor[(256), float32] */;
  %398 = reshape(%395, newshape=[1, 416]) /* ty=Tensor[(1, 416), uint8] */;
  %399 = reshape(%396, newshape=[11, 416]) /* ty=Tensor[(11, 416), uint8] */;
  %400 = reshape(%397, newshape=[128, 2]) /* ty=Tensor[(128, 2), float32] */;
  %401 = @func_609(%398, %399, %400) /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 5, 8), float64], Tensor[(11, 416), int8], Tensor[(16, 16, ?), bool], Tensor[(128, 2), float32], Tensor[(12, 5, 8), float64], Tensor[(1, 416), float64], Tensor[(16, 16, ?), bool]) */;
  %402 = cast(meta[relay.Constant][23] /* ty=Tensor[(4576), uint8] */, dtype="float32") /* ty=Tensor[(4576), float32] */;
  %403 = cosh(%402) /* ty=Tensor[(4576), float32] */;
  %404 = cast(meta[relay.Constant][25] /* ty=Tensor[(4576), float32] */, dtype="bool") /* ty=Tensor[(4576), bool] */;
  %405 = shape_of(%403, dtype="int32") /* ty=Tensor[(1), int32] */;
  %406 = cast(%403, dtype="bool") /* ty=Tensor[(4576), bool] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?), bool] */;
  %408 = less_equal(%406, %407) /* ty=Tensor[(4576), bool] */;
  %409 = cast(%408, dtype="int16") /* ty=Tensor[(4576), int16] */;
  %410 = shape_of(%403, dtype="int32") /* ty=Tensor[(1), int32] */;
  %411 = cast(%403, dtype="int16") /* ty=Tensor[(4576), int16] */;
  %412 = dyn.reshape(%409, %410, newshape=[]) /* ty=Tensor[(?), int16] */;
  %413 = cast(meta[relay.Constant][23] /* ty=Tensor[(4576), uint8] */, dtype="bool") /* ty=Tensor[(4576), bool] */;
  %414 = shape_of(%403, dtype="int32") /* ty=Tensor[(1), int32] */;
  %415 = cast(%403, dtype="bool") /* ty=Tensor[(4576), bool] */;
  %416 = dyn.reshape(%413, %414, newshape=[]) /* ty=Tensor[(?), bool] */;
  %417 = %394.0;
  %418 = @func_318() /* ty=Tensor[(12, 2, 7), float32] */;
  %419 = %401.6;
  %420 = right_shift(%411, %412) /* ty=Tensor[(4576), int16] */;
  %421 = equal(%415, %416) /* ty=Tensor[(4576), bool] */;
  (%417, %418, %419, %var_1451, meta[relay.Constant][24] /* ty=Tensor[(256), float32] */, %420, %421)
}

def @func_4426() -> (Tensor[(12, 2, 7), float32], Tensor[(1, 16, 14), float32], Tensor[(224), float32]) {
  %422 = cast(meta[relay.Constant][26] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
  %423 = reshape(%422, newshape=[1, 16, 14]) /* ty=Tensor[(1, 16, 14), float32] */;
  %424 = @func_2602(%423) /* ty=(Tensor[(1, 16, 14), float32], Tensor[(1, 16, 14), float64]) */;
  %425 = @func_3226() /* ty=Tensor[(12, 2, 7), float32] */;
  %426 = %424.0;
  (%425, %426, meta[relay.Constant][26] /* ty=Tensor[(224), float32] */)
}

def @func_5822(%var_5814: Tensor[(16, 5, 16), float32]) -> (Tensor[(16, 5, 16), float32],) {
  %427 = cast(%var_5814, dtype="float32") /* ty=Tensor[(16, 5, 16), float32] */;
  %428 = atanh(%427) /* ty=Tensor[(16, 5, 16), float32] */;
  (%428,)
}

def @func_7989(%var_7987: Tensor[(585), float32]) -> (Tensor[(224), float32], Tensor[(13, 9, 5), float32], Tensor[(585), float32]) {
  %429 = @func_4426() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(1, 16, 14), float32], Tensor[(224), float32]) */;
  %430 = cast(%var_7987, dtype="float32") /* ty=Tensor[(585), float32] */;
  %431 = reshape(%430, newshape=[13, 9, 5]) /* ty=Tensor[(13, 9, 5), float32] */;
  %432 = @func_4173(%431) /* ty=(Tensor[(13, 9, 5), float32], Tensor[(12, 2, 7), float32]) */;
  %433 = %429.2;
  %434 = %432.0;
  (%433, %434, %var_7987)
}

def @func_8521() -> Tensor[(12, 2, 7), float32] {
  @func_3984() /* ty=Tensor[(12, 2, 7), float32] */
}

def @func_782() -> (Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8], Tensor[(416), uint8]) {
  %435 = @func_318() /* ty=Tensor[(12, 2, 7), float32] */;
  %436 = cast(%435, dtype="float32") /* ty=Tensor[(12, 2, 7), float32] */;
  %437 = sinh(%436) /* ty=Tensor[(12, 2, 7), float32] */;
  %438 = cast(%437, dtype="float64") /* ty=Tensor[(12, 2, 7), float64] */;
  %439 = erf(%438) /* ty=Tensor[(12, 2, 7), float64] */;
  %440 = cast(%439, dtype="float32") /* ty=Tensor[(12, 2, 7), float32] */;
  %441 = cast(meta[relay.Constant][27] /* ty=Tensor[(416), uint8] */, dtype="uint8") /* ty=Tensor[(416), uint8] */;
  %442 = cast(meta[relay.Constant][27] /* ty=Tensor[(416), uint8] */, dtype="uint8") /* ty=Tensor[(416), uint8] */;
  %443 = reshape(%441, newshape=[8, 13, 4]) /* ty=Tensor[(8, 13, 4), uint8] */;
  %444 = reshape(%442, newshape=[8, 13, 4]) /* ty=Tensor[(8, 13, 4), uint8] */;
  %445 = exp(%440) /* ty=Tensor[(12, 2, 7), float32] */;
  %446 = @func_77(%443, %444) /* ty=Tensor[(8, 13, 4), uint8] */;
  (%445, %446, meta[relay.Constant][27] /* ty=Tensor[(416), uint8] */)
}

def @func_5479(%var_5436: Tensor[(12, 2, 7), float32], %var_5443: int16, %var_5444: Tensor[(1248), int16], %var_5448: Tensor[(480), float64], %var_5458: Tensor[(4, 64), float32]) -> (Tensor[(12, 2, 7), bool], Tensor[(16, 6, 13), bool], int16, Tensor[(1248), int16], Tensor[(12, 2, 7), float32], Tensor[(480), float64], Tensor[(416), float32], Tensor[(16, 16, ?), bool], Tensor[(4, 64), float32]) {
  %447 = @func_4917() /* ty=Tensor[(12, 2, 7), float32] */;
  %448 = cast(%var_5436, dtype="bool") /* ty=Tensor[(12, 2, 7), bool] */;
  %449 = shape_of(%447, dtype="int32") /* ty=Tensor[(3), int32] */;
  %450 = cast(%447, dtype="bool") /* ty=Tensor[(12, 2, 7), bool] */;
  %451 = dyn.reshape(%448, %449, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %452 = cast(%var_5443, dtype="int16") /* ty=int16 */;
  %453 = cast(%var_5444, dtype="int16") /* ty=Tensor[(1248), int16] */;
  %454 = reshape(%452, newshape=[]) /* ty=int16 */;
  %455 = reshape(%453, newshape=[16, 6, 13]) /* ty=Tensor[(16, 6, 13), int16] */;
  %456 = @func_3598(%454, %455) /* ty=(Tensor[(16, 6, 13), bool], Tensor[(12, 2, 7), float32]) */;
  %457 = cast(%var_5448, dtype="float64") /* ty=Tensor[(480), float64] */;
  %458 = cast(meta[relay.Constant][28] /* ty=Tensor[(416), float32] */, dtype="float32") /* ty=Tensor[(416), float32] */;
  %459 = reshape(%457, newshape=[1, 480]) /* ty=Tensor[(1, 480), float64] */;
  %460 = reshape(%458, newshape=[8, 13, 4]) /* ty=Tensor[(8, 13, 4), float32] */;
  %461 = @func_1001(%459, %460) /* ty=(Tensor[(480), float64], Tensor[(1, 480), float64], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), int32]) */;
  %462 = cast(%var_5458, dtype="float32") /* ty=Tensor[(4, 64), float32] */;
  %463 = reshape(%462, newshape=[16, 16, 1]) /* ty=Tensor[(16, 16, 1), float32] */;
  %464 = less(%450, %451) /* ty=Tensor[(12, 2, 7), bool] */;
  %465 = %456.0;
  %466 = %461.2;
  %467 = @func_517(%463) /* ty=Tensor[(16, 16, ?), bool] */;
  (%464, %465, %var_5443, %var_5444, %466, %var_5448, meta[relay.Constant][28] /* ty=Tensor[(416), float32] */, %467, %var_5458)
}

def @func_3347(%var_3336: Tensor[(15, 8, 12), uint64]) -> (Tensor[(15, 8, 12), bool],) {
  %468 = @func_2082() /* ty=(Tensor[(15, 8, 12), uint64], Tensor[(416), uint8], Tensor[(416), float32], Tensor[(480), float64]) */;
  %469 = %468.0;
  %470 = cast(%var_3336, dtype="bool") /* ty=Tensor[(15, 8, 12), bool] */;
  %471 = shape_of(%469, dtype="int32") /* ty=Tensor[(3), int32] */;
  %472 = cast(%469, dtype="bool") /* ty=Tensor[(15, 8, 12), bool] */;
  %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %474 = logical_or(%472, %473) /* ty=Tensor[(15, 8, 12), bool] */;
  (%474,)
}

def @func_1131() -> Tensor[(12, 2, 7), float32] {
  %475 = @func_348() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 10, 13), float64]) */;
  %475.0
}

def @func_4253() -> Tensor[(12, 2, 7), float32] {
  %476 = @func_2988() /* ty=(Tensor[(15, 8, 12), uint64], Tensor[(12, 2, 7), float32]) */;
  %476.1
}

def @func_4994() -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) {
  %477 = @func_2988() /* ty=(Tensor[(15, 8, 12), uint64], Tensor[(12, 2, 7), float32]) */;
  %478 = @func_1426() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), bool], Tensor[(12, 2, 7), float32]) */;
  %479 = %477.1;
  %480 = %478.2;
  %481 = @func_318() /* ty=Tensor[(12, 2, 7), float32] */;
  (%479, %480, %481)
}

def @func_1943() -> Tensor[(15, 8, 12), uint64] {
  %482 = @func_1612() /* ty=(Tensor[(416), uint8], Tensor[(15, 8, 12), uint64], Tensor[(1440), uint64]) */;
  %482.1
}

def @func_1075() -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) {
  %483 = @func_348() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 10, 13), float64]) */;
  %484 = @func_348() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 10, 13), float64]) */;
  %485 = @func_1029() /* ty=(Tensor[(12, 2, 7), float32],) */;
  %486 = %483.0;
  %487 = %484.0;
  %488 = %485.0;
  (%486, %487, %488)
}

def @func_3240() -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) {
  %489 = @func_2348() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 5, 8), float64], Tensor[(120, 4), float64]) */;
  %490 = @func_1658() /* ty=Tensor[(12, 2, 7), float32] */;
  %491 = %489.0;
  (%490, %491)
}

def @func_517(%var_483: Tensor[(16, 16, 1), float32]) -> Tensor[(16, 16, ?), bool] {
  %492 = cast(%var_483, dtype="float32") /* ty=Tensor[(16, 16, 1), float32] */;
  %493 = sigmoid(%492) /* ty=Tensor[(16, 16, 1), float32] */;
  %494 = cast(%var_483, dtype="uint8") /* ty=Tensor[(16, 16, 1), uint8] */;
  %495 = shape_of(%493, dtype="int32") /* ty=Tensor[(3), int32] */;
  %496 = cast(%493, dtype="uint8") /* ty=Tensor[(16, 16, 1), uint8] */;
  %497 = dyn.reshape(%494, %495, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %498 = minimum(%496, %497) /* ty=Tensor[(16, 16, ?), uint8] */;
  %499 = cast(%498, dtype="float32") /* ty=Tensor[(16, 16, ?), float32] */;
  %500 = acos(%499) /* ty=Tensor[(16, 16, ?), float32] */;
  %501 = cast(%493, dtype="bool") /* ty=Tensor[(16, 16, 1), bool] */;
  %502 = shape_of(%500, dtype="int32") /* ty=Tensor[(3), int32] */;
  %503 = cast(%500, dtype="bool") /* ty=Tensor[(16, 16, ?), bool] */;
  %504 = dyn.reshape(%501, %502, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%503, %504) /* ty=Tensor[(16, 16, ?), bool] */
}

def @func_1989(%var_1983: Tensor[(1440), uint64]) -> (Tensor[(256), float32], Tensor[(12, 2, 7), float32], Tensor[(15, 8, 12), uint64], Tensor[(1440), uint64]) {
  %505 = @func_1911() /* ty=(Tensor[(256), float32], Tensor[(16, 16), float32], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint64], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8]) */;
  %506 = cast(%var_1983, dtype="uint64") /* ty=Tensor[(1440), uint64] */;
  %507 = cast(%var_1983, dtype="uint64") /* ty=Tensor[(1440), uint64] */;
  %508 = reshape(%506, newshape=[15, 8, 12]) /* ty=Tensor[(15, 8, 12), uint64] */;
  %509 = reshape(%507, newshape=[15, 8, 12]) /* ty=Tensor[(15, 8, 12), uint64] */;
  %510 = @func_1325(%508, %509) /* ty=(Tensor[(15, 8, 12), uint64], Tensor[(8, 13, 4), uint8]) */;
  %511 = %505.0;
  %512 = @func_318() /* ty=Tensor[(12, 2, 7), float32] */;
  %513 = %510.0;
  (%511, %512, %513, %var_1983)
}

def @func_3515() -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) {
  %514 = @func_3325() /* ty=Tensor[(12, 2, 7), float32] */;
  %515 = @func_2562() /* ty=Tensor[(12, 2, 7), float32] */;
  (%514, %515)
}

def @func_6426(%var_6403: Tensor[(256), float32], %var_6424: Tensor[(1, 720), float64]) -> (Tensor[(12, 2, 7), float32], Tensor[(720, 2), uint64], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8], Tensor[(8, 13, 4), uint8], Tensor[(15, 8, 12), uint64], Tensor[(8, 13, 4), float64], Tensor[(1440), uint64], Tensor[(16, 16, ?), bool], Tensor[(256), float32], Tensor[(12, 2, 7), float32], Tensor[(1, 720), float64]) {
  %516 = @func_4331() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8]) */;
  %517 = @func_5270() /* ty=(Tensor[(8, 13, 4), uint8], Tensor[(12, 2, 7), float32]) */;
  %518 = @func_2163() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(256), float32], Tensor[(15, 8, 12), uint64], Tensor[(1440, 1), uint64], Tensor[(15, 8, 12), uint64], Tensor[(12, 2, 7), float32], Tensor[(4, 104), bool]) */;
  %519 = cast(meta[relay.Constant][29] /* ty=Tensor[(720, 2), uint64] */, dtype="uint64") /* ty=Tensor[(720, 2), uint64] */;
  %520 = cast(meta[relay.Constant][29] /* ty=Tensor[(720, 2), uint64] */, dtype="uint64") /* ty=Tensor[(720, 2), uint64] */;
  %521 = reshape(%519, newshape=[15, 8, 12]) /* ty=Tensor[(15, 8, 12), uint64] */;
  %522 = reshape(%520, newshape=[15, 8, 12]) /* ty=Tensor[(15, 8, 12), uint64] */;
  %523 = @func_1325(%521, %522) /* ty=(Tensor[(15, 8, 12), uint64], Tensor[(8, 13, 4), uint8]) */;
  %524 = %523.1;
  %525 = cast(%524, dtype="float64") /* ty=Tensor[(8, 13, 4), float64] */;
  %526 = sinh(%525) /* ty=Tensor[(8, 13, 4), float64] */;
  %527 = cast(%526, dtype="float64") /* ty=Tensor[(8, 13, 4), float64] */;
  %528 = cast(meta[relay.Constant][29] /* ty=Tensor[(720, 2), uint64] */, dtype="uint64") /* ty=Tensor[(720, 2), uint64] */;
  %529 = reshape(%528, newshape=[1440]) /* ty=Tensor[(1440), uint64] */;
  %530 = @func_1989(%529) /* ty=(Tensor[(256), float32], Tensor[(12, 2, 7), float32], Tensor[(15, 8, 12), uint64], Tensor[(1440), uint64]) */;
  %531 = cast(%var_6403, dtype="float32") /* ty=Tensor[(256), float32] */;
  %532 = reshape(%531, newshape=[4, 64]) /* ty=Tensor[(4, 64), float32] */;
  %533 = @func_1114(%532) /* ty=(Tensor[(12, 2, 7), float64], Tensor[(16, 16, ?), bool], Tensor[(4, 64), float64]) */;
  %534 = cast(%var_6424, dtype="float64") /* ty=Tensor[(1, 720), float64] */;
  %535 = reshape(%534, newshape=[8, 6, 15]) /* ty=Tensor[(8, 6, 15), float64] */;
  %536 = @func_2193(%535) /* ty=(Tensor[(8, 6, 15), float64], Tensor[(416), float32], Tensor[(12, 2, 7), float32]) */;
  %537 = @func_3984() /* ty=Tensor[(12, 2, 7), float32] */;
  %538 = @func_1131() /* ty=Tensor[(12, 2, 7), float32] */;
  %539 = %516.1;
  %540 = %517.0;
  %541 = %518.4;
  %542 = cos(%527) /* ty=Tensor[(8, 13, 4), float64] */;
  %543 = %530.3;
  %544 = %533.1;
  %545 = %536.2;
  (%537, meta[relay.Constant][29] /* ty=Tensor[(720, 2), uint64] */, %538, %539, %540, %541, %542, %543, %544, %var_6403, %545, %var_6424)
}

def @func_8428() -> (Tensor[(12, 2, 7), float32],) {
  %546 = @func_2011() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */;
  %547 = %546.1;
  (%547,)
}

def @func_3905() -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8]) {
  %548 = @func_1911() /* ty=(Tensor[(256), float32], Tensor[(16, 16), float32], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint64], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8]) */;
  %549 = @func_782() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8], Tensor[(416), uint8]) */;
  %550 = @func_3226() /* ty=Tensor[(12, 2, 7), float32] */;
  %551 = %548.4;
  %552 = %549.1;
  (%550, %551, %552)
}

def @func_4456() -> (Tensor[(12, 2, 7), float32],) {
  %553 = @func_3226() /* ty=Tensor[(12, 2, 7), float32] */;
  (%553,)
}

def @func_133(%var_118: Tensor[(12, 5, 8), float64], %var_119: Tensor[(12, 5, 8), float64]) -> (Tensor[(12, 5, 8), float64],) {
  %554 = cast(%var_119, dtype="float64") /* ty=Tensor[(12, 5, 8), float64] */;
  %555 = shape_of(%var_118, dtype="int32") /* ty=Tensor[(3), int32] */;
  %556 = cast(%var_118, dtype="float64") /* ty=Tensor[(12, 5, 8), float64] */;
  %557 = dyn.reshape(%554, %555, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %558 = mod(%556, %557) /* ty=Tensor[(12, 5, 8), float64] */;
  (%558,)
}

def @func_2988() -> (Tensor[(15, 8, 12), uint64], Tensor[(12, 2, 7), float32]) {
  %559 = @func_1075() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */;
  %560 = @func_1943() /* ty=Tensor[(15, 8, 12), uint64] */;
  %561 = %559.1;
  (%560, %561)
}

def @func_3390() -> Tensor[(8, 13, 4), uint8] {
  %562 = @func_782() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8], Tensor[(416), uint8]) */;
  %562.1
}

def @func_3855() -> (Tensor[(15, 8, 12), uint64], Tensor[(8, 13, 4), uint8], Tensor[(8, 13, 4), uint8], Tensor[(12, 2, 7), float32], Tensor[(4576), uint8]) {
  %563 = @func_2696() /* ty=(Tensor[(8, 13, 4), uint8], Tensor[(15, 8, 12), uint64], Tensor[(1440), uint64]) */;
  %564 = @func_800() /* ty=(Tensor[(8, 13, 4), uint8],) */;
  %565 = %564.0;
  %566 = cast(%565, dtype="uint8") /* ty=Tensor[(8, 13, 4), uint8] */;
  %567 = cast(meta[relay.Constant][30] /* ty=Tensor[(4576), uint8] */, dtype="uint8") /* ty=Tensor[(4576), uint8] */;
  %568 = reshape(%566, newshape=[416]) /* ty=Tensor[(416), uint8] */;
  %569 = reshape(%567, newshape=[4576]) /* ty=Tensor[(4576), uint8] */;
  %570 = @func_2254(%568, %569) /* ty=(Tensor[(12, 2, 7), float32], Tensor[(1440), uint64], Tensor[(416), uint8], Tensor[(4576), uint8], Tensor[(256), float32], Tensor[(12, 2, 7), float32], Tensor[(128, 2), bool]) */;
  %571 = @func_1943() /* ty=Tensor[(15, 8, 12), uint64] */;
  %572 = %563.0;
  %573 = %570.0;
  (%571, %572, %565, %573, meta[relay.Constant][30] /* ty=Tensor[(4576), uint8] */)
}

def @func_6047() -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) {
  %574 = @func_5204() /* ty=(Tensor[(12, 2, 7), float32],) */;
  %575 = @func_1426() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), bool], Tensor[(12, 2, 7), float32]) */;
  %576 = %574.0;
  %577 = @func_2797() /* ty=Tensor[(12, 2, 7), float32] */;
  %578 = %575.2;
  (%576, %577, %578)
}

def @func_2011() -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) {
  %579 = @func_1029() /* ty=(Tensor[(12, 2, 7), float32],) */;
  %580 = @func_1075() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */;
  %581 = %579.0;
  %582 = %580.2;
  (%581, %582)
}

def @func_2623() -> Tensor[(8, 13, 4), uint8] {
  %583 = @func_800() /* ty=(Tensor[(8, 13, 4), uint8],) */;
  %583.0
}

def @func_3108() -> Tensor[(12, 2, 7), float32] {
  @func_1131() /* ty=Tensor[(12, 2, 7), float32] */
}

def @func_358(%var_356: Tensor[(480), float64]) -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 5, 8), float64], Tensor[(480), float64]) {
  %584 = @func_348() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 10, 13), float64]) */;
  %585 = cast(%var_356, dtype="float64") /* ty=Tensor[(480), float64] */;
  %586 = cast(%var_356, dtype="float64") /* ty=Tensor[(480), float64] */;
  %587 = reshape(%585, newshape=[12, 5, 8]) /* ty=Tensor[(12, 5, 8), float64] */;
  %588 = reshape(%586, newshape=[12, 5, 8]) /* ty=Tensor[(12, 5, 8), float64] */;
  %589 = @func_133(%587, %588) /* ty=(Tensor[(12, 5, 8), float64],) */;
  %590 = @func_318() /* ty=Tensor[(12, 2, 7), float32] */;
  %591 = %584.0;
  %592 = %589.0;
  (%590, %591, %592, %var_356)
}

def @func_6299() -> (Tensor[(8, 13, 4), uint8], Tensor[(12, 2, 7), float32]) {
  %593 = @func_5270() /* ty=(Tensor[(8, 13, 4), uint8], Tensor[(12, 2, 7), float32]) */;
  %594 = %593.0;
  %595 = @func_318() /* ty=Tensor[(12, 2, 7), float32] */;
  (%594, %595)
}

def @func_8514(%var_8501: Tensor[(8, 13, 4), float32]) -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), float32], Tensor[(8, 13, 4), uint32]) {
  %596 = @func_3293() /* ty=(Tensor[(12, 2, 7), float32],) */;
  %597 = @func_4134() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(4576), uint8], Tensor[(8, 13, 4), float32]) */;
  %598 = %597.2;
  %599 = cast(%598, dtype="float32") /* ty=Tensor[(8, 13, 4), float32] */;
  %600 = cast(%var_8501, dtype="uint32") /* ty=Tensor[(8, 13, 4), uint32] */;
  %601 = shape_of(%598, dtype="int32") /* ty=Tensor[(3), int32] */;
  %602 = cast(%598, dtype="uint32") /* ty=Tensor[(8, 13, 4), uint32] */;
  %603 = dyn.reshape(%600, %601, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %604 = %596.0;
  %605 = @func_8362() /* ty=Tensor[(12, 2, 7), float32] */;
  %606 = acosh(%599) /* ty=Tensor[(8, 13, 4), float32] */;
  %607 = add(%602, %603) /* ty=Tensor[(8, 13, 4), uint32] */;
  (%604, %605, %606, %607)
}

def @func_4173(%var_4151: Tensor[(13, 9, 5), float32]) -> (Tensor[(13, 9, 5), float32], Tensor[(12, 2, 7), float32]) {
  %608 = cast(%var_4151, dtype="float32") /* ty=Tensor[(13, 9, 5), float32] */;
  %609 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(13, 9, 5), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %610 = cast(meta[relay.Constant][31] /* ty=Tensor[(13, 9, 5), float32] */, dtype="float32") /* ty=Tensor[(13, 9, 5), float32] */;
  %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %612 = @func_2988() /* ty=(Tensor[(15, 8, 12), uint64], Tensor[(12, 2, 7), float32]) */;
  %613 = floor_mod(%610, %611) /* ty=Tensor[(13, 9, 5), float32] */;
  %614 = %612.1;
  (%613, %614)
}

def @func_2454() -> (Tensor[(12, 2, 7), float32],) {
  %615 = @func_348() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 10, 13), float64]) */;
  %616 = %615.0;
  (%616,)
}

def @func_1426() -> (Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), bool], Tensor[(12, 2, 7), float32]) {
  %617 = @func_782() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8], Tensor[(416), uint8]) */;
  %618 = @func_800() /* ty=(Tensor[(8, 13, 4), uint8],) */;
  %619 = %618.0;
  %620 = cast(meta[relay.Constant][32] /* ty=Tensor[(8, 13, 4), uint8] */, dtype="bool") /* ty=Tensor[(8, 13, 4), bool] */;
  %621 = shape_of(%619, dtype="int32") /* ty=Tensor[(3), int32] */;
  %622 = cast(%619, dtype="bool") /* ty=Tensor[(8, 13, 4), bool] */;
  %623 = dyn.reshape(%620, %621, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %624 = %617.0;
  %625 = logical_and(%622, %623) /* ty=Tensor[(8, 13, 4), bool] */;
  %626 = @func_1131() /* ty=Tensor[(12, 2, 7), float32] */;
  (%624, %625, %626)
}

def @func_5800() -> (Tensor[(12, 2, 7), float32], Tensor[(416), uint8], Tensor[(12, 2, 7), float32]) {
  %627 = @func_2011() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */;
  %628 = @func_782() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8], Tensor[(416), uint8]) */;
  %629 = @func_348() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 10, 13), float64]) */;
  %630 = %627.1;
  %631 = %628.2;
  %632 = %629.0;
  (%630, %631, %632)
}

def @main(%var_8814: Tensor[(16, 11, 4), float64], %var_8815: Tensor[(16, 11, 4), float64]) -> (Tensor[(16, 11, 4), float64], Tensor[(480), float64], Tensor[(480), float64], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(16, 11, 4), float32]) {
  %633 = cast(%var_8815, dtype="float64") /* ty=Tensor[(16, 11, 4), float64] */;
  %634 = shape_of(%var_8814, dtype="int32") /* ty=Tensor[(3), int32] */;
  %635 = cast(%var_8814, dtype="float64") /* ty=Tensor[(16, 11, 4), float64] */;
  %636 = dyn.reshape(%633, %634, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %637 = cast(meta[relay.Constant][33] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %638 = reshape(%637, newshape=[480]) /* ty=Tensor[(480), float64] */;
  %639 = @func_358(%638) /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 5, 8), float64], Tensor[(480), float64]) */;
  %640 = cast(meta[relay.Constant][34] /* ty=Tensor[(16, 11, 4), float64] */, dtype="float32") /* ty=Tensor[(16, 11, 4), float32] */;
  %641 = shape_of(%var_8814, dtype="int32") /* ty=Tensor[(3), int32] */;
  %642 = cast(%var_8814, dtype="float32") /* ty=Tensor[(16, 11, 4), float32] */;
  %643 = dyn.reshape(%640, %641, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %644 = minimum(%635, %636) /* ty=Tensor[(16, 11, 4), float64] */;
  %645 = %639.3;
  %646 = @func_8521() /* ty=Tensor[(12, 2, 7), float32] */;
  %647 = @func_5040() /* ty=Tensor[(12, 2, 7), float32] */;
  %648 = floor_mod(%642, %643) /* ty=Tensor[(16, 11, 4), float32] */;
  (%644, %645, meta[relay.Constant][33] /* ty=Tensor[(480), float64] */, %646, %647, %648)
}

def @func_2193(%var_2181: Tensor[(8, 6, 15), float64]) -> (Tensor[(8, 6, 15), float64], Tensor[(416), float32], Tensor[(12, 2, 7), float32]) {
  %649 = cast(%var_2181, dtype="float64") /* ty=Tensor[(8, 6, 15), float64] */;
  %650 = @func_2082() /* ty=(Tensor[(15, 8, 12), uint64], Tensor[(416), uint8], Tensor[(416), float32], Tensor[(480), float64]) */;
  %651 = @func_1075() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */;
  %652 = cos(%649) /* ty=Tensor[(8, 6, 15), float64] */;
  %653 = %650.2;
  %654 = %651.1;
  (%652, %653, %654)
}

def @func_3598(%var_3584: int16, %var_3585: Tensor[(16, 6, 13), int16]) -> (Tensor[(16, 6, 13), bool], Tensor[(12, 2, 7), float32]) {
  %655 = cast(%var_3584, dtype="bool") /* ty=bool */;
  %656 = cast(%var_3585, dtype="bool") /* ty=Tensor[(16, 6, 13), bool] */;
  %657 = greater_equal(%655, %656) /* ty=Tensor[(16, 6, 13), bool] */;
  %658 = @func_1131() /* ty=Tensor[(12, 2, 7), float32] */;
  (%657, %658)
}

def @func_7109() -> Tensor[(12, 2, 7), float32] {
  %659 = @func_5957() /* ty=(Tensor[(12, 2, 7), float32],) */;
  %659.0
}

def @func_8110() -> Tensor[(12, 2, 7), float32] {
  %660 = @func_5135() /* ty=(Tensor[(12, 2, 7), float32],) */;
  %660.0
}

def @func_4079() -> (Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8]) {
  %661 = @func_318() /* ty=Tensor[(12, 2, 7), float32] */;
  %662 = @func_3390() /* ty=Tensor[(8, 13, 4), uint8] */;
  (%661, %662)
}

def @func_2552(%var_2536: Tensor[(8, 13, 4), bool]) -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), bool]) {
  %663 = @func_2348() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 5, 8), float64], Tensor[(120, 4), float64]) */;
  %664 = @func_2011() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */;
  %665 = @func_1426() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), bool], Tensor[(12, 2, 7), float32]) */;
  %666 = %665.1;
  %667 = cast(%var_2536, dtype="bool") /* ty=Tensor[(8, 13, 4), bool] */;
  %668 = shape_of(%666, dtype="int32") /* ty=Tensor[(3), int32] */;
  %669 = cast(%666, dtype="bool") /* ty=Tensor[(8, 13, 4), bool] */;
  %670 = dyn.reshape(%667, %668, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %671 = %663.0;
  %672 = %664.1;
  %673 = equal(%669, %670) /* ty=Tensor[(8, 13, 4), bool] */;
  (%671, %672, %673)
}

def @func_1381() -> Tensor[(12, 2, 7), float32] {
  %674 = @func_1075() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */;
  %674.0
}

def @func_8256() -> (Tensor[(12, 2, 7), float32],) {
  %675 = @func_5957() /* ty=(Tensor[(12, 2, 7), float32],) */;
  %676 = %675.0;
  (%676,)
}

def @func_5631() -> Tensor[(12, 2, 7), float32] {
  @func_4917() /* ty=Tensor[(12, 2, 7), float32] */
}

def @func_4048() -> Tensor[(12, 2, 7), float32] {
  %677 = @func_3240() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */;
  %677.0
}

def @func_8606() -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) {
  %678 = @func_8178() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */;
  %679 = %678.0;
  %680 = cast(%679, dtype="float32") /* ty=Tensor[(12, 2, 7), float32] */;
  %681 = @func_782() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8], Tensor[(416), uint8]) */;
  %682 = atanh(%680) /* ty=Tensor[(12, 2, 7), float32] */;
  %683 = @func_3984() /* ty=Tensor[(12, 2, 7), float32] */;
  %684 = %681.0;
  (%682, %683, %684)
}

def @func_8178() -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) {
  %685 = @func_3154() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(416), uint8]) */;
  %686 = @func_1837() /* ty=(Tensor[(12, 5, 7), float32], Tensor[(12, 5, 7), float32], Tensor[(12, 2, 7), float32]) */;
  %687 = %685.0;
  %688 = %686.2;
  (%687, %688)
}

def @func_3090(%var_3019: Tensor[(120, 4), float64]) -> (Tensor[(120, 4), bool], Tensor[(256), float32], Tensor[(256), float32], Tensor[(1440), uint64], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(120, 4), float64]) {
  %689 = @func_2348() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 5, 8), float64], Tensor[(120, 4), float64]) */;
  %690 = %689.2;
  %691 = cast(%var_3019, dtype="bool") /* ty=Tensor[(120, 4), bool] */;
  %692 = shape_of(%690, dtype="int32") /* ty=Tensor[(2), int32] */;
  %693 = cast(%690, dtype="bool") /* ty=Tensor[(120, 4), bool] */;
  %694 = dyn.reshape(%691, %692, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %695 = cast(meta[relay.Constant][35] /* ty=Tensor[(256), float32] */, dtype="float32") /* ty=Tensor[(256), float32] */;
  %696 = reshape(%695, newshape=[256]) /* ty=Tensor[(256), float32] */;
  %697 = @func_667(%696) /* ty=(Tensor[(12, 2, 7), float32], Tensor[(16, 16, ?), bool], Tensor[(256), float32]) */;
  %698 = @func_2696() /* ty=(Tensor[(8, 13, 4), uint8], Tensor[(15, 8, 12), uint64], Tensor[(1440), uint64]) */;
  %699 = @func_2163() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(256), float32], Tensor[(15, 8, 12), uint64], Tensor[(1440, 1), uint64], Tensor[(15, 8, 12), uint64], Tensor[(12, 2, 7), float32], Tensor[(4, 104), bool]) */;
  %700 = @func_1837() /* ty=(Tensor[(12, 5, 7), float32], Tensor[(12, 5, 7), float32], Tensor[(12, 2, 7), float32]) */;
  %701 = @func_2454() /* ty=(Tensor[(12, 2, 7), float32],) */;
  %702 = cast(%690, dtype="bool") /* ty=Tensor[(120, 4), bool] */;
  %703 = shape_of(%var_3019, dtype="int32") /* ty=Tensor[(2), int32] */;
  %704 = cast(%var_3019, dtype="bool") /* ty=Tensor[(120, 4), bool] */;
  %705 = dyn.reshape(%702, %703, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %706 = equal(%704, %705) /* ty=Tensor[(120, 4), bool] */;
  %707 = cast(%706, dtype="float64") /* ty=Tensor[(120, 4), float64] */;
  %708 = logical_or(%693, %694) /* ty=Tensor[(120, 4), bool] */;
  %709 = %697.2;
  %710 = %698.2;
  %711 = %699.5;
  %712 = %700.2;
  %713 = %701.0;
  %714 = acos(%707) /* ty=Tensor[(120, 4), float64] */;
  (%708, %709, meta[relay.Constant][35] /* ty=Tensor[(256), float32] */, %710, %711, %712, %713, %714)
}

def @func_8751(%var_8672: Tensor[(4, 312), int16], %var_8673: Tensor[(480), float64], %var_8725: Tensor[(4, 64), float64]) -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], int16, Tensor[(4, 312), int16], Tensor[(480), float64], Tensor[(256), float32], Tensor[(8, 13, 4), float64], Tensor[(4, 64), float64], Tensor[(15, 8, 12), uint64], Tensor[(4, 64), bool]) {
  %715 = @func_7036() /* ty=(Tensor[(12, 2, 7), float32],) */;
  %716 = @func_4079() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8]) */;
  %717 = @func_7570() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), float64], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */;
  %718 = %716.0;
  %719 = cast(%718, dtype="float32") /* ty=Tensor[(12, 2, 7), float32] */;
  %720 = cast(meta[relay.Constant][36] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %721 = cast(%var_8672, dtype="int16") /* ty=Tensor[(4, 312), int16] */;
  %722 = cast(%var_8673, dtype="float64") /* ty=Tensor[(480), float64] */;
  %723 = cast(meta[relay.Constant][37] /* ty=Tensor[(256), float32] */, dtype="float32") /* ty=Tensor[(256), float32] */;
  %724 = reshape(%719, newshape=[12, 2, 7]) /* ty=Tensor[(12, 2, 7), float32] */;
  %725 = reshape(%720, newshape=[]) /* ty=int16 */;
  %726 = reshape(%721, newshape=[1248]) /* ty=Tensor[(1248), int16] */;
  %727 = reshape(%722, newshape=[480]) /* ty=Tensor[(480), float64] */;
  %728 = reshape(%723, newshape=[4, 64]) /* ty=Tensor[(4, 64), float32] */;
  %729 = @func_5479(%724, %725, %726, %727, %728) /* ty=(Tensor[(12, 2, 7), bool], Tensor[(16, 6, 13), bool], int16, Tensor[(1248), int16], Tensor[(12, 2, 7), float32], Tensor[(480), float64], Tensor[(416), float32], Tensor[(16, 16, ?), bool], Tensor[(4, 64), float32]) */;
  %730 = %729.8;
  %731 = cast(%730, dtype="float64") /* ty=Tensor[(4, 64), float64] */;
  %732 = @func_2163() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(256), float32], Tensor[(15, 8, 12), uint64], Tensor[(1440, 1), uint64], Tensor[(15, 8, 12), uint64], Tensor[(12, 2, 7), float32], Tensor[(4, 104), bool]) */;
  %733 = cast(%730, dtype="float64") /* ty=Tensor[(4, 64), float64] */;
  %734 = asinh(%733) /* ty=Tensor[(4, 64), float64] */;
  %735 = cast(%var_8725, dtype="bool") /* ty=Tensor[(4, 64), bool] */;
  %736 = shape_of(%734, dtype="int32") /* ty=Tensor[(2), int32] */;
  %737 = cast(%734, dtype="bool") /* ty=Tensor[(4, 64), bool] */;
  %738 = dyn.reshape(%735, %736, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %739 = %715.0;
  %740 = %717.3;
  %741 = log(%731) /* ty=Tensor[(4, 64), float64] */;
  %742 = %732.2;
  %743 = less_equal(%737, %738) /* ty=Tensor[(4, 64), bool] */;
  (%739, %718, meta[relay.Constant][36] /* ty=int16 */, %var_8672, %var_8673, meta[relay.Constant][37] /* ty=Tensor[(256), float32] */, %740, %741, %742, %743)
}

def @func_5957() -> (Tensor[(12, 2, 7), float32],) {
  %744 = @func_3515() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */;
  %745 = %744.1;
  (%745,)
}

def @func_7433() -> Tensor[(12, 2, 7), float32] {
  %746 = @func_1426() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), bool], Tensor[(12, 2, 7), float32]) */;
  %746.2
}

def @func_77(%var_63: Tensor[(8, 13, 4), uint8], %var_64: Tensor[(8, 13, 4), uint8]) -> Tensor[(8, 13, 4), uint8] {
  %747 = cast(%var_64, dtype="uint8") /* ty=Tensor[(8, 13, 4), uint8] */;
  %748 = shape_of(%var_63, dtype="int32") /* ty=Tensor[(3), int32] */;
  %749 = cast(%var_63, dtype="uint8") /* ty=Tensor[(8, 13, 4), uint8] */;
  %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  multiply(%749, %750) /* ty=Tensor[(8, 13, 4), uint8] */
}

def @func_6920() -> (Tensor[(1440), uint64], Tensor[(8, 13, 4), uint8], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), bool]) {
  %751 = @func_2696() /* ty=(Tensor[(8, 13, 4), uint8], Tensor[(15, 8, 12), uint64], Tensor[(1440), uint64]) */;
  %752 = @func_2348() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 5, 8), float64], Tensor[(120, 4), float64]) */;
  %753 = %752.0;
  %754 = cast(%753, dtype="float32") /* ty=Tensor[(12, 2, 7), float32] */;
  %755 = reshape(%754, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %756 = @func_6847(%755) /* ty=(Tensor[(8, 10, 13), bool], Tensor[(8, 10, 13), float32], Tensor[(12, 2, 7), bool], Tensor[(168), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */;
  %757 = %751.2;
  %758 = @func_3390() /* ty=Tensor[(8, 13, 4), uint8] */;
  %759 = %756.2;
  (%757, %758, %753, %759)
}

def @func_8772() -> (Tensor[(12, 2, 7), float32],) {
  %760 = @func_4253() /* ty=Tensor[(12, 2, 7), float32] */;
  (%760,)
}

def @func_478(%var_398: Tensor[(12, 2, 7), float32], %var_410: Tensor[(416), uint8]) -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), bool], Tensor[(12, 5, 8), float64], Tensor[(480), float64], Tensor[(12, 5, 8), float64]) {
  %761 = @func_318() /* ty=Tensor[(12, 2, 7), float32] */;
  %762 = cast(%var_398, dtype="float32") /* ty=Tensor[(12, 2, 7), float32] */;
  %763 = shape_of(%761, dtype="int32") /* ty=Tensor[(3), int32] */;
  %764 = cast(%761, dtype="float32") /* ty=Tensor[(12, 2, 7), float32] */;
  %765 = dyn.reshape(%762, %763, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %766 = cast(%761, dtype="float32") /* ty=Tensor[(12, 2, 7), float32] */;
  %767 = cos(%766) /* ty=Tensor[(12, 2, 7), float32] */;
  %768 = cast(%var_398, dtype="float32") /* ty=Tensor[(12, 2, 7), float32] */;
  %769 = shape_of(%767, dtype="int32") /* ty=Tensor[(3), int32] */;
  %770 = cast(%767, dtype="float32") /* ty=Tensor[(12, 2, 7), float32] */;
  %771 = dyn.reshape(%768, %769, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %772 = cast(%var_410, dtype="uint8") /* ty=Tensor[(416), uint8] */;
  %773 = cast(%var_410, dtype="uint8") /* ty=Tensor[(416), uint8] */;
  %774 = reshape(%772, newshape=[8, 13, 4]) /* ty=Tensor[(8, 13, 4), uint8] */;
  %775 = reshape(%773, newshape=[8, 13, 4]) /* ty=Tensor[(8, 13, 4), uint8] */;
  %776 = @func_77(%774, %775) /* ty=Tensor[(8, 13, 4), uint8] */;
  %777 = cast(%var_410, dtype="float64") /* ty=Tensor[(416), float64] */;
  %778 = atan(%777) /* ty=Tensor[(416), float64] */;
  %779 = cast(%778, dtype="bool") /* ty=Tensor[(416), bool] */;
  %780 = shape_of(%776, dtype="int32") /* ty=Tensor[(3), int32] */;
  %781 = cast(%776, dtype="bool") /* ty=Tensor[(8, 13, 4), bool] */;
  %782 = dyn.reshape(%779, %780, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %783 = cast(meta[relay.Constant][38] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %784 = cast(meta[relay.Constant][38] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %785 = reshape(%783, newshape=[12, 5, 8]) /* ty=Tensor[(12, 5, 8), float64] */;
  %786 = reshape(%784, newshape=[12, 5, 8]) /* ty=Tensor[(12, 5, 8), float64] */;
  %787 = @func_133(%785, %786) /* ty=(Tensor[(12, 5, 8), float64],) */;
  %788 = %787.0;
  %789 = cast(%788, dtype="float64") /* ty=Tensor[(12, 5, 8), float64] */;
  %790 = reshape(%789, newshape=[480]) /* ty=Tensor[(480), float64] */;
  %791 = @func_358(%790) /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 5, 8), float64], Tensor[(480), float64]) */;
  %792 = power(%764, %765) /* ty=Tensor[(12, 2, 7), float32] */;
  %793 = floor_mod(%770, %771) /* ty=Tensor[(12, 2, 7), float32] */;
  %794 = less_equal(%781, %782) /* ty=Tensor[(8, 13, 4), bool] */;
  %795 = %791.2;
  (%792, %793, %794, %788, meta[relay.Constant][38] /* ty=Tensor[(480), float64] */, %795)
}

def @func_7672() -> Tensor[(8, 10, 13), float64] {
  %796 = @func_348() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 10, 13), float64]) */;
  %796.1
}

def @func_3709() -> (Tensor[(12, 2, 7), float32],) {
  %797 = @func_2797() /* ty=Tensor[(12, 2, 7), float32] */;
  (%797,)
}

def @func_7824() -> Tensor[(12, 2, 7), float32] {
  %798 = @func_5204() /* ty=(Tensor[(12, 2, 7), float32],) */;
  %798.0
}

def @func_1114(%var_1104: Tensor[(4, 64), float32]) -> (Tensor[(12, 2, 7), float64], Tensor[(16, 16, ?), bool], Tensor[(4, 64), float64]) {
  %799 = @func_1029() /* ty=(Tensor[(12, 2, 7), float32],) */;
  %800 = %799.0;
  %801 = cast(%800, dtype="float64") /* ty=Tensor[(12, 2, 7), float64] */;
  %802 = cast(%var_1104, dtype="float32") /* ty=Tensor[(4, 64), float32] */;
  %803 = reshape(%802, newshape=[256]) /* ty=Tensor[(256), float32] */;
  %804 = @func_667(%803) /* ty=(Tensor[(12, 2, 7), float32], Tensor[(16, 16, ?), bool], Tensor[(256), float32]) */;
  %805 = cast(%var_1104, dtype="float64") /* ty=Tensor[(4, 64), float64] */;
  %806 = sin(%801) /* ty=Tensor[(12, 2, 7), float64] */;
  %807 = %804.1;
  %808 = rsqrt(%805) /* ty=Tensor[(4, 64), float64] */;
  (%806, %807, %808)
}

def @func_5908(%var_5878: Tensor[(1, 14, 2), int32], %var_5879: Tensor[(16, 14, 2), int32]) -> (Tensor[(16, 14, 2), int32], Tensor[(1, 14, 2), float32], Tensor[(8, 13, 4), uint8], Tensor[(8, 52), uint8], Tensor[(16, 14, 2), float64], Tensor[(15, 8, 12), bool], Tensor[(10, 144), uint64]) {
  %809 = cast(%var_5878, dtype="int32") /* ty=Tensor[(1, 14, 2), int32] */;
  %810 = cast(%var_5879, dtype="int32") /* ty=Tensor[(16, 14, 2), int32] */;
  %811 = cast(%var_5878, dtype="float32") /* ty=Tensor[(1, 14, 2), float32] */;
  %812 = cast(meta[relay.Constant][39] /* ty=Tensor[(8, 52), uint8] */, dtype="uint8") /* ty=Tensor[(8, 52), uint8] */;
  %813 = cast(meta[relay.Constant][39] /* ty=Tensor[(8, 52), uint8] */, dtype="uint8") /* ty=Tensor[(8, 52), uint8] */;
  %814 = reshape(%812, newshape=[8, 13, 4]) /* ty=Tensor[(8, 13, 4), uint8] */;
  %815 = reshape(%813, newshape=[8, 13, 4]) /* ty=Tensor[(8, 13, 4), uint8] */;
  %816 = cast(%var_5879, dtype="float64") /* ty=Tensor[(16, 14, 2), float64] */;
  %817 = cast(meta[relay.Constant][40] /* ty=Tensor[(10, 144), uint64] */, dtype="uint64") /* ty=Tensor[(10, 144), uint64] */;
  %818 = reshape(%817, newshape=[15, 8, 12]) /* ty=Tensor[(15, 8, 12), uint64] */;
  %819 = @func_3347(%818) /* ty=(Tensor[(15, 8, 12), bool],) */;
  %820 = bitwise_xor(%809, %810) /* ty=Tensor[(16, 14, 2), int32] */;
  %821 = cos(%811) /* ty=Tensor[(1, 14, 2), float32] */;
  %822 = @func_77(%814, %815) /* ty=Tensor[(8, 13, 4), uint8] */;
  %823 = log10(%816) /* ty=Tensor[(16, 14, 2), float64] */;
  %824 = %819.0;
  (%820, %821, %822, meta[relay.Constant][39] /* ty=Tensor[(8, 52), uint8] */, %823, %824, meta[relay.Constant][40] /* ty=Tensor[(10, 144), uint64] */)
}

def @func_2797() -> Tensor[(12, 2, 7), float32] {
  %825 = @func_1075() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */;
  %825.2
}

def @func_6565(%var_6556: Tensor[(12, 2, 7), float32]) -> (Tensor[(12, 2, 7), float64],) {
  %826 = @func_2348() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 5, 8), float64], Tensor[(120, 4), float64]) */;
  %827 = %826.0;
  %828 = cast(%var_6556, dtype="float64") /* ty=Tensor[(12, 2, 7), float64] */;
  %829 = shape_of(%827, dtype="int32") /* ty=Tensor[(3), int32] */;
  %830 = cast(%827, dtype="float64") /* ty=Tensor[(12, 2, 7), float64] */;
  %831 = dyn.reshape(%828, %829, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %832 = floor_divide(%830, %831) /* ty=Tensor[(12, 2, 7), float64] */;
  (%832,)
}

def @func_4717() -> Tensor[(8, 10, 13), uint32] {
  %833 = @func_348() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 10, 13), float64]) */;
  %834 = %833.1;
  %835 = cast(%834, dtype="float64") /* ty=Tensor[(8, 10, 13), float64] */;
  %836 = acos(%835) /* ty=Tensor[(8, 10, 13), float64] */;
  %837 = cast(%834, dtype="uint32") /* ty=Tensor[(8, 10, 13), uint32] */;
  %838 = shape_of(%836, dtype="int32") /* ty=Tensor[(3), int32] */;
  %839 = cast(%836, dtype="uint32") /* ty=Tensor[(8, 10, 13), uint32] */;
  %840 = dyn.reshape(%837, %838, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_or(%839, %840) /* ty=Tensor[(8, 10, 13), uint32] */
}

def @func_1001(%var_958: Tensor[(1, 480), float64], %var_986: Tensor[(8, 13, 4), float32]) -> (Tensor[(480), float64], Tensor[(1, 480), float64], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), int32]) {
  %841 = cast(%var_958, dtype="float64") /* ty=Tensor[(1, 480), float64] */;
  %842 = reshape(%841, newshape=[480]) /* ty=Tensor[(480), float64] */;
  %843 = @func_358(%842) /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 5, 8), float64], Tensor[(480), float64]) */;
  %844 = @func_782() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8], Tensor[(416), uint8]) */;
  %845 = @func_800() /* ty=(Tensor[(8, 13, 4), uint8],) */;
  %846 = %845.0;
  %847 = cast(%846, dtype="float64") /* ty=Tensor[(8, 13, 4), float64] */;
  %848 = exp(%847) /* ty=Tensor[(8, 13, 4), float64] */;
  %849 = cast(%848, dtype="float32") /* ty=Tensor[(8, 13, 4), float32] */;
  %850 = log(%849) /* ty=Tensor[(8, 13, 4), float32] */;
  %851 = cast(%var_986, dtype="int32") /* ty=Tensor[(8, 13, 4), int32] */;
  %852 = shape_of(%850, dtype="int32") /* ty=Tensor[(3), int32] */;
  %853 = cast(%850, dtype="int32") /* ty=Tensor[(8, 13, 4), int32] */;
  %854 = dyn.reshape(%851, %852, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %855 = %843.3;
  %856 = %844.0;
  %857 = subtract(%853, %854) /* ty=Tensor[(8, 13, 4), int32] */;
  (%855, %var_958, %856, %857)
}

def @func_1837() -> (Tensor[(12, 5, 7), float32], Tensor[(12, 5, 7), float32], Tensor[(12, 2, 7), float32]) {
  %858 = cast(meta[relay.Constant][41] /* ty=Tensor[(12, 5, 7), float32] */, dtype="float32") /* ty=Tensor[(12, 5, 7), float32] */;
  %859 = cast(meta[relay.Constant][41] /* ty=Tensor[(12, 5, 7), float32] */, dtype="float32") /* ty=Tensor[(12, 5, 7), float32] */;
  %860 = log(%858) /* ty=Tensor[(12, 5, 7), float32] */;
  %861 = atanh(%859) /* ty=Tensor[(12, 5, 7), float32] */;
  %862 = @func_318() /* ty=Tensor[(12, 2, 7), float32] */;
  (%860, %861, %862)
}

def @func_609(%var_576: Tensor[(1, 416), uint8], %var_578: Tensor[(11, 416), uint8], %var_593: Tensor[(128, 2), float32]) -> (Tensor[(12, 2, 7), float32], Tensor[(12, 5, 8), float64], Tensor[(11, 416), int8], Tensor[(16, 16, ?), bool], Tensor[(128, 2), float32], Tensor[(12, 5, 8), float64], Tensor[(1, 416), float64], Tensor[(16, 16, ?), bool]) {
  %863 = @func_318() /* ty=Tensor[(12, 2, 7), float32] */;
  %864 = cast(%863, dtype="float32") /* ty=Tensor[(12, 2, 7), float32] */;
  %865 = cast(%var_576, dtype="uint8") /* ty=Tensor[(1, 416), uint8] */;
  %866 = reshape(%864, newshape=[12, 2, 7]) /* ty=Tensor[(12, 2, 7), float32] */;
  %867 = reshape(%865, newshape=[416]) /* ty=Tensor[(416), uint8] */;
  %868 = @func_478(%866, %867) /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), bool], Tensor[(12, 5, 8), float64], Tensor[(480), float64], Tensor[(12, 5, 8), float64]) */;
  %869 = cast(%var_576, dtype="bool") /* ty=Tensor[(1, 416), bool] */;
  %870 = cast(%var_578, dtype="bool") /* ty=Tensor[(11, 416), bool] */;
  %871 = logical_and(%869, %870) /* ty=Tensor[(11, 416), bool] */;
  %872 = cast(meta[relay.Constant][42] /* ty=Tensor[(11, 416), bool] */, dtype="int8") /* ty=Tensor[(11, 416), int8] */;
  %873 = shape_of(%871, dtype="int32") /* ty=Tensor[(2), int32] */;
  %874 = cast(%871, dtype="int8") /* ty=Tensor[(11, 416), int8] */;
  %875 = dyn.reshape(%872, %873, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %876 = cast(%var_593, dtype="float32") /* ty=Tensor[(128, 2), float32] */;
  %877 = reshape(%876, newshape=[16, 16, 1]) /* ty=Tensor[(16, 16, 1), float32] */;
  %878 = %868.5;
  %879 = cast(%878, dtype="float64") /* ty=Tensor[(12, 5, 8), float64] */;
  %880 = cast(%878, dtype="float64") /* ty=Tensor[(12, 5, 8), float64] */;
  %881 = reshape(%879, newshape=[12, 5, 8]) /* ty=Tensor[(12, 5, 8), float64] */;
  %882 = reshape(%880, newshape=[12, 5, 8]) /* ty=Tensor[(12, 5, 8), float64] */;
  %883 = @func_133(%881, %882) /* ty=(Tensor[(12, 5, 8), float64],) */;
  %884 = cast(%var_576, dtype="float64") /* ty=Tensor[(1, 416), float64] */;
  %885 = cast(%var_593, dtype="float32") /* ty=Tensor[(128, 2), float32] */;
  %886 = reshape(%885, newshape=[16, 16, 1]) /* ty=Tensor[(16, 16, 1), float32] */;
  %887 = bitwise_xor(%874, %875) /* ty=Tensor[(11, 416), int8] */;
  %888 = @func_517(%877) /* ty=Tensor[(16, 16, ?), bool] */;
  %889 = %883.0;
  %890 = acos(%884) /* ty=Tensor[(1, 416), float64] */;
  %891 = @func_517(%886) /* ty=Tensor[(16, 16, ?), bool] */;
  (%863, %878, %887, %888, %var_593, %889, %890, %891)
}

def @func_2163() -> (Tensor[(12, 2, 7), float32], Tensor[(256), float32], Tensor[(15, 8, 12), uint64], Tensor[(1440, 1), uint64], Tensor[(15, 8, 12), uint64], Tensor[(12, 2, 7), float32], Tensor[(4, 104), bool]) {
  %892 = @func_1075() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */;
  %893 = cast(meta[relay.Constant][43] /* ty=Tensor[(4, 104), uint8] */, dtype="uint8") /* ty=Tensor[(4, 104), uint8] */;
  %894 = reshape(%893, newshape=[416]) /* ty=Tensor[(416), uint8] */;
  %895 = @func_1482(%894) /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(1, 416), float64], Tensor[(416), uint8], Tensor[(256), float32], Tensor[(4576), int16], Tensor[(4576), bool]) */;
  %896 = cast(meta[relay.Constant][44] /* ty=Tensor[(1440, 1), uint64] */, dtype="uint64") /* ty=Tensor[(1440, 1), uint64] */;
  %897 = reshape(%896, newshape=[1440]) /* ty=Tensor[(1440), uint64] */;
  %898 = @func_1989(%897) /* ty=(Tensor[(256), float32], Tensor[(12, 2, 7), float32], Tensor[(15, 8, 12), uint64], Tensor[(1440), uint64]) */;
  %899 = @func_1612() /* ty=(Tensor[(416), uint8], Tensor[(15, 8, 12), uint64], Tensor[(1440), uint64]) */;
  %900 = @func_1426() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), bool], Tensor[(12, 2, 7), float32]) */;
  %901 = cast(meta[relay.Constant][45] /* ty=Tensor[(4, 104), uint8] */, dtype="bool") /* ty=Tensor[(4, 104), bool] */;
  %902 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(4, 104), uint8] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %903 = cast(meta[relay.Constant][43] /* ty=Tensor[(4, 104), uint8] */, dtype="bool") /* ty=Tensor[(4, 104), bool] */;
  %904 = dyn.reshape(%901, %902, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %905 = %892.2;
  %906 = %895.4;
  %907 = %898.2;
  %908 = %899.1;
  %909 = %900.2;
  %910 = less(%903, %904) /* ty=Tensor[(4, 104), bool] */;
  (%905, %906, %907, meta[relay.Constant][44] /* ty=Tensor[(1440, 1), uint64] */, %908, %909, %910)
}

def @func_3984() -> Tensor[(12, 2, 7), float32] {
  %911 = @func_1426() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), bool], Tensor[(12, 2, 7), float32]) */;
  %911.2
}

def @func_3325() -> Tensor[(12, 2, 7), float32] {
  %912 = @func_1837() /* ty=(Tensor[(12, 5, 7), float32], Tensor[(12, 5, 7), float32], Tensor[(12, 2, 7), float32]) */;
  %912.2
}

def @func_8280() -> Tensor[(15, 8, 12), uint64] {
  @func_1943() /* ty=Tensor[(15, 8, 12), uint64] */
}

def @func_3968() -> (Tensor[(12, 2, 7), float32],) {
  %913 = @func_3515() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */;
  %914 = %913.0;
  (%914,)
}

def @func_7341() -> Tensor[(12, 2, 7), float32] {
  @func_3108() /* ty=Tensor[(12, 2, 7), float32] */
}

def @func_3154() -> (Tensor[(12, 2, 7), float32], Tensor[(416), uint8]) {
  %915 = @func_1426() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), bool], Tensor[(12, 2, 7), float32]) */;
  %916 = @func_782() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8], Tensor[(416), uint8]) */;
  %917 = %915.0;
  %918 = %916.2;
  (%917, %918)
}

def @func_7267(%var_7248: Tensor[(1, 16, 12), float32], %var_7265: Tensor[(585), float32]) -> (Tensor[(1, 16, 12), float32], Tensor[(12, 2, 7), float32], Tensor[(585), float32]) {
  %919 = cast(%var_7248, dtype="float32") /* ty=Tensor[(1, 16, 12), float32] */;
  %920 = cast(%var_7265, dtype="float32") /* ty=Tensor[(585), float32] */;
  %921 = reshape(%920, newshape=[13, 9, 5]) /* ty=Tensor[(13, 9, 5), float32] */;
  %922 = @func_4173(%921) /* ty=(Tensor[(13, 9, 5), float32], Tensor[(12, 2, 7), float32]) */;
  %923 = cos(%919) /* ty=Tensor[(1, 16, 12), float32] */;
  %924 = %922.1;
  (%923, %924, %var_7265)
}

def @func_8296() -> (Tensor[(12, 2, 7), float32],) {
  %925 = @func_6299() /* ty=(Tensor[(8, 13, 4), uint8], Tensor[(12, 2, 7), float32]) */;
  %926 = %925.1;
  (%926,)
}

def @func_3226() -> Tensor[(12, 2, 7), float32] {
  %927 = @func_1075() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */;
  %927.0
}

def @func_5040() -> Tensor[(12, 2, 7), float32] {
  @func_3984() /* ty=Tensor[(12, 2, 7), float32] */
}

def @func_2602(%var_2588: Tensor[(1, 16, 14), float32]) -> (Tensor[(1, 16, 14), float32], Tensor[(1, 16, 14), float64]) {
  %928 = cast(%var_2588, dtype="float32") /* ty=Tensor[(1, 16, 14), float32] */;
  %929 = cast(%var_2588, dtype="float64") /* ty=Tensor[(1, 16, 14), float64] */;
  %930 = asin(%928) /* ty=Tensor[(1, 16, 14), float32] */;
  %931 = tan(%929) /* ty=Tensor[(1, 16, 14), float64] */;
  (%930, %931)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_609(%var_576: Tensor[(1, 416), uint8], %var_578: Tensor[(11, 416), uint8], %var_593: Tensor[(128, 2), float32]) -> (Tensor[(12, 2, 7), float32], Tensor[(12, 5, 8), float64], Tensor[(11, 416), int8], Tensor[(16, 16, ?), bool], Tensor[(128, 2), float32], Tensor[(12, 5, 8), float64], Tensor[(1, 416), float64], Tensor[(16, 16, ?), bool]) {
  %0 = @func_318() /* ty=Tensor[(12, 2, 7), float32] */;
  %1 = cast(%0, dtype="float32") /* ty=Tensor[(12, 2, 7), float32] */;
  %2 = cast(%var_576, dtype="uint8") /* ty=Tensor[(1, 416), uint8] */;
  %3 = reshape(%1, newshape=[12, 2, 7]) /* ty=Tensor[(12, 2, 7), float32] */;
  %4 = reshape(%2, newshape=[416]) /* ty=Tensor[(416), uint8] */;
  %5 = @func_478(%3, %4) /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), bool], Tensor[(12, 5, 8), float64], Tensor[(480), float64], Tensor[(12, 5, 8), float64]) */;
  %6 = cast(%var_576, dtype="bool") /* ty=Tensor[(1, 416), bool] */;
  %7 = cast(%var_578, dtype="bool") /* ty=Tensor[(11, 416), bool] */;
  %8 = logical_and(%6, %7) /* ty=Tensor[(11, 416), bool] */;
  %9 = cast(meta[relay.Constant][0] /* ty=Tensor[(11, 416), bool] */, dtype="int8") /* ty=Tensor[(11, 416), int8] */;
  %10 = shape_of(%8, dtype="int32") /* ty=Tensor[(2), int32] */;
  %11 = cast(%8, dtype="int8") /* ty=Tensor[(11, 416), int8] */;
  %12 = dyn.reshape(%9, %10, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %13 = cast(%var_593, dtype="float32") /* ty=Tensor[(128, 2), float32] */;
  %14 = reshape(%13, newshape=[16, 16, 1]) /* ty=Tensor[(16, 16, 1), float32] */;
  %15 = %5.5;
  %16 = cast(%15, dtype="float64") /* ty=Tensor[(12, 5, 8), float64] */;
  %17 = cast(%15, dtype="float64") /* ty=Tensor[(12, 5, 8), float64] */;
  %18 = reshape(%16, newshape=[12, 5, 8]) /* ty=Tensor[(12, 5, 8), float64] */;
  %19 = reshape(%17, newshape=[12, 5, 8]) /* ty=Tensor[(12, 5, 8), float64] */;
  %20 = @func_133(%18, %19) /* ty=(Tensor[(12, 5, 8), float64],) */;
  %21 = cast(%var_576, dtype="float64") /* ty=Tensor[(1, 416), float64] */;
  %22 = cast(%var_593, dtype="float32") /* ty=Tensor[(128, 2), float32] */;
  %23 = reshape(%22, newshape=[16, 16, 1]) /* ty=Tensor[(16, 16, 1), float32] */;
  %24 = bitwise_xor(%11, %12) /* ty=Tensor[(11, 416), int8] */;
  %25 = @func_517(%14) /* ty=Tensor[(16, 16, ?), bool] */;
  %26 = %20.0;
  %27 = acos(%21) /* ty=Tensor[(1, 416), float64] */;
  %28 = @func_517(%23) /* ty=Tensor[(16, 16, ?), bool] */;
  (%0, %15, %24, %25, %var_593, %26, %27, %28)
}

def @func_77(%var_63: Tensor[(8, 13, 4), uint8], %var_64: Tensor[(8, 13, 4), uint8]) -> Tensor[(8, 13, 4), uint8] {
  %29 = cast(%var_64, dtype="uint8") /* ty=Tensor[(8, 13, 4), uint8] */;
  %30 = shape_of(%var_63, dtype="int32") /* ty=Tensor[(3), int32] */;
  %31 = cast(%var_63, dtype="uint8") /* ty=Tensor[(8, 13, 4), uint8] */;
  %32 = dyn.reshape(%29, %30, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  multiply(%31, %32) /* ty=Tensor[(8, 13, 4), uint8] */
}

def @func_7446(%var_7438: Tensor[(1440), uint64]) -> (Tensor[(8, 13, 4), uint8], Tensor[(15, 8, 12), bool], Tensor[(1440), float64]) {
  %33 = @func_3855() /* ty=(Tensor[(15, 8, 12), uint64], Tensor[(8, 13, 4), uint8], Tensor[(8, 13, 4), uint8], Tensor[(12, 2, 7), float32], Tensor[(4576), uint8]) */;
  %34 = cast(%var_7438, dtype="uint64") /* ty=Tensor[(1440), uint64] */;
  %35 = reshape(%34, newshape=[15, 8, 12]) /* ty=Tensor[(15, 8, 12), uint64] */;
  %36 = @func_3347(%35) /* ty=(Tensor[(15, 8, 12), bool],) */;
  %37 = cast(%var_7438, dtype="float64") /* ty=Tensor[(1440), float64] */;
  %38 = %33.2;
  %39 = %36.0;
  %40 = acosh(%37) /* ty=Tensor[(1440), float64] */;
  (%38, %39, %40)
}

def @func_8179() -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) {
  %45 = fn () -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) {
    %41 = @func_3154() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(416), uint8]) */;
    %42 = @func_1837() /* ty=(Tensor[(12, 5, 7), float32], Tensor[(12, 5, 7), float32], Tensor[(12, 2, 7), float32]) */;
    %43 = %41.0;
    %44 = %42.2;
    (%43, %44)
  };
  %45() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */
}

def @func_8047(%var_8045: Tensor[(3, 12, 14), float32]) -> (Tensor[(3, 12, 14), float32], Tensor[(1440, 1), uint64]) {
  @func_8044(%var_8045) /* ty=(Tensor[(3, 12, 14), float32], Tensor[(1440, 1), uint64]) */
}

def @func_2988() -> (Tensor[(15, 8, 12), uint64], Tensor[(12, 2, 7), float32]) {
  %46 = @func_1075() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */;
  %47 = @func_1943() /* ty=Tensor[(15, 8, 12), uint64] */;
  %48 = %46.1;
  (%47, %48)
}

def @func_3349(%var_3348: Tensor[(15, 8, 12), uint64]) -> (Tensor[(15, 8, 12), bool],) {
  %56 = fn (%var_3336: Tensor[(15, 8, 12), uint64]) -> (Tensor[(15, 8, 12), bool],) {
    %49 = @func_2082() /* ty=(Tensor[(15, 8, 12), uint64], Tensor[(416), uint8], Tensor[(416), float32], Tensor[(480), float64]) */;
    %50 = %49.0;
    %51 = cast(%var_3336, dtype="bool") /* ty=Tensor[(15, 8, 12), bool] */;
    %52 = shape_of(%50, dtype="int32") /* ty=Tensor[(3), int32] */;
    %53 = cast(%50, dtype="bool") /* ty=Tensor[(15, 8, 12), bool] */;
    %54 = dyn.reshape(%51, %52, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %55 = logical_or(%53, %54) /* ty=Tensor[(15, 8, 12), bool] */;
    (%55,)
  };
  %56(%var_3348) /* ty=(Tensor[(15, 8, 12), bool],) */
}

def @func_2698() -> (Tensor[(8, 13, 4), uint8], Tensor[(15, 8, 12), uint64], Tensor[(1440), uint64]) {
  @func_2696() /* ty=(Tensor[(8, 13, 4), uint8], Tensor[(15, 8, 12), uint64], Tensor[(1440), uint64]) */
}

def @func_7109() -> Tensor[(12, 2, 7), float32] {
  %57 = @func_5957() /* ty=(Tensor[(12, 2, 7), float32],) */;
  %57.0
}

def @func_517(%var_483: Tensor[(16, 16, 1), float32]) -> Tensor[(16, 16, ?), bool] {
  %58 = cast(%var_483, dtype="float32") /* ty=Tensor[(16, 16, 1), float32] */;
  %59 = sigmoid(%58) /* ty=Tensor[(16, 16, 1), float32] */;
  %60 = cast(%var_483, dtype="uint8") /* ty=Tensor[(16, 16, 1), uint8] */;
  %61 = shape_of(%59, dtype="int32") /* ty=Tensor[(3), int32] */;
  %62 = cast(%59, dtype="uint8") /* ty=Tensor[(16, 16, 1), uint8] */;
  %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %64 = minimum(%62, %63) /* ty=Tensor[(16, 16, ?), uint8] */;
  %65 = cast(%64, dtype="float32") /* ty=Tensor[(16, 16, ?), float32] */;
  %66 = acos(%65) /* ty=Tensor[(16, 16, ?), float32] */;
  %67 = cast(%59, dtype="bool") /* ty=Tensor[(16, 16, 1), bool] */;
  %68 = shape_of(%66, dtype="int32") /* ty=Tensor[(3), int32] */;
  %69 = cast(%66, dtype="bool") /* ty=Tensor[(16, 16, ?), bool] */;
  %70 = dyn.reshape(%67, %68, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%69, %70) /* ty=Tensor[(16, 16, ?), bool] */
}

def @func_2798() -> Tensor[(12, 2, 7), float32] {
  %72 = fn () -> Tensor[(12, 2, 7), float32] {
    %71 = @func_1075() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */;
    %71.2
  };
  %72() /* ty=Tensor[(12, 2, 7), float32] */
}

def @func_3856() -> (Tensor[(15, 8, 12), uint64], Tensor[(8, 13, 4), uint8], Tensor[(8, 13, 4), uint8], Tensor[(12, 2, 7), float32], Tensor[(4576), uint8]) {
  %84 = fn () -> (Tensor[(15, 8, 12), uint64], Tensor[(8, 13, 4), uint8], Tensor[(8, 13, 4), uint8], Tensor[(12, 2, 7), float32], Tensor[(4576), uint8]) {
    %73 = @func_2696() /* ty=(Tensor[(8, 13, 4), uint8], Tensor[(15, 8, 12), uint64], Tensor[(1440), uint64]) */;
    %74 = @func_800() /* ty=(Tensor[(8, 13, 4), uint8],) */;
    %75 = %74.0;
    %76 = cast(%75, dtype="uint8") /* ty=Tensor[(8, 13, 4), uint8] */;
    %77 = cast(meta[relay.Constant][1] /* ty=Tensor[(4576), uint8] */, dtype="uint8") /* ty=Tensor[(4576), uint8] */;
    %78 = reshape(%76, newshape=[416]) /* ty=Tensor[(416), uint8] */;
    %79 = reshape(%77, newshape=[4576]) /* ty=Tensor[(4576), uint8] */;
    %80 = @func_2254(%78, %79) /* ty=(Tensor[(12, 2, 7), float32], Tensor[(1440), uint64], Tensor[(416), uint8], Tensor[(4576), uint8], Tensor[(256), float32], Tensor[(12, 2, 7), float32], Tensor[(128, 2), bool]) */;
    %81 = @func_1943() /* ty=Tensor[(15, 8, 12), uint64] */;
    %82 = %73.0;
    %83 = %80.0;
    (%81, %82, %75, %83, meta[relay.Constant][1] /* ty=Tensor[(4576), uint8] */)
  };
  %84() /* ty=(Tensor[(15, 8, 12), uint64], Tensor[(8, 13, 4), uint8], Tensor[(8, 13, 4), uint8], Tensor[(12, 2, 7), float32], Tensor[(4576), uint8]) */
}

def @func_1381() -> Tensor[(12, 2, 7), float32] {
  %85 = @func_1075() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */;
  %85.0
}

def @func_4995() -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) {
  %91 = fn () -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) {
    %86 = @func_2988() /* ty=(Tensor[(15, 8, 12), uint64], Tensor[(12, 2, 7), float32]) */;
    %87 = @func_1426() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), bool], Tensor[(12, 2, 7), float32]) */;
    %88 = %86.1;
    %89 = %87.2;
    %90 = @func_318() /* ty=Tensor[(12, 2, 7), float32] */;
    (%88, %89, %90)
  };
  %91() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */
}

def @func_8385(%var_8383: Tensor[(16, 3, 6), float64], %var_8384: Tensor[(16, 3, 6), float64]) -> Tensor[(16, 3, 6), bool] {
  @func_8381(%var_8383, %var_8384) /* ty=Tensor[(16, 3, 6), bool] */
}

def @func_5631() -> Tensor[(12, 2, 7), float32] {
  @func_4917() /* ty=Tensor[(12, 2, 7), float32] */
}

def @func_4080() -> (Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8]) {
  %94 = fn () -> (Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8]) {
    %92 = @func_318() /* ty=Tensor[(12, 2, 7), float32] */;
    %93 = @func_3390() /* ty=Tensor[(8, 13, 4), uint8] */;
    (%92, %93)
  };
  %94() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8]) */
}

def @func_2623() -> Tensor[(8, 13, 4), uint8] {
  %95 = @func_800() /* ty=(Tensor[(8, 13, 4), uint8],) */;
  %95.0
}

def @func_5040() -> Tensor[(12, 2, 7), float32] {
  @func_3984() /* ty=Tensor[(12, 2, 7), float32] */
}

def @func_136(%var_134: Tensor[(12, 5, 8), float64], %var_135: Tensor[(12, 5, 8), float64]) -> (Tensor[(12, 5, 8), float64],) {
  %101 = fn (%var_118: Tensor[(12, 5, 8), float64], %var_119: Tensor[(12, 5, 8), float64]) -> (Tensor[(12, 5, 8), float64],) {
    %96 = cast(%var_119, dtype="float64") /* ty=Tensor[(12, 5, 8), float64] */;
    %97 = shape_of(%var_118, dtype="int32") /* ty=Tensor[(3), int32] */;
    %98 = cast(%var_118, dtype="float64") /* ty=Tensor[(12, 5, 8), float64] */;
    %99 = dyn.reshape(%96, %97, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %100 = mod(%98, %99) /* ty=Tensor[(12, 5, 8), float64] */;
    (%100,)
  };
  %101(%var_134, %var_135) /* ty=(Tensor[(12, 5, 8), float64],) */
}

def @func_2625() -> Tensor[(8, 13, 4), uint8] {
  @func_2623() /* ty=Tensor[(8, 13, 4), uint8] */
}

def @func_520(%var_518: Tensor[(16, 16, 1), float32]) -> Tensor[(16, 16, ?), bool] {
  @func_517(%var_518) /* ty=Tensor[(16, 16, ?), bool] */
}

def @func_1428() -> (Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), bool], Tensor[(12, 2, 7), float32]) {
  @func_1426() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), bool], Tensor[(12, 2, 7), float32]) */
}

def @func_8296() -> (Tensor[(12, 2, 7), float32],) {
  %102 = @func_6299() /* ty=(Tensor[(8, 13, 4), uint8], Tensor[(12, 2, 7), float32]) */;
  %103 = %102.1;
  (%103,)
}

def @func_3294() -> (Tensor[(12, 2, 7), float32],) {
  %106 = fn () -> (Tensor[(12, 2, 7), float32],) {
    %104 = @func_1029() /* ty=(Tensor[(12, 2, 7), float32],) */;
    %105 = %104.0;
    (%105,)
  };
  %106() /* ty=(Tensor[(12, 2, 7), float32],) */
}

def @func_8044(%var_8030: Tensor[(3, 12, 14), float32]) -> (Tensor[(3, 12, 14), float32], Tensor[(1440, 1), uint64]) {
  %107 = cast(%var_8030, dtype="float32") /* ty=Tensor[(3, 12, 14), float32] */;
  %108 = asin(%107) /* ty=Tensor[(3, 12, 14), float32] */;
  %109 = cast(%var_8030, dtype="float32") /* ty=Tensor[(3, 12, 14), float32] */;
  %110 = shape_of(%108, dtype="int32") /* ty=Tensor[(3), int32] */;
  %111 = cast(%108, dtype="float32") /* ty=Tensor[(3, 12, 14), float32] */;
  %112 = dyn.reshape(%109, %110, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %113 = @func_2163() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(256), float32], Tensor[(15, 8, 12), uint64], Tensor[(1440, 1), uint64], Tensor[(15, 8, 12), uint64], Tensor[(12, 2, 7), float32], Tensor[(4, 104), bool]) */;
  %114 = power(%111, %112) /* ty=Tensor[(3, 12, 14), float32] */;
  %115 = %113.3;
  (%114, %115)
}

def @func_2990() -> (Tensor[(15, 8, 12), uint64], Tensor[(12, 2, 7), float32]) {
  @func_2988() /* ty=(Tensor[(15, 8, 12), uint64], Tensor[(12, 2, 7), float32]) */
}

def @func_5800() -> (Tensor[(12, 2, 7), float32], Tensor[(416), uint8], Tensor[(12, 2, 7), float32]) {
  %116 = @func_2011() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */;
  %117 = @func_782() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8], Tensor[(416), uint8]) */;
  %118 = @func_348() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 10, 13), float64]) */;
  %119 = %116.1;
  %120 = %117.2;
  %121 = %118.0;
  (%119, %120, %121)
}

def @func_2454() -> (Tensor[(12, 2, 7), float32],) {
  %122 = @func_348() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 10, 13), float64]) */;
  %123 = %122.0;
  (%123,)
}

def @func_3710() -> (Tensor[(12, 2, 7), float32],) {
  %125 = fn () -> (Tensor[(12, 2, 7), float32],) {
    %124 = @func_2797() /* ty=Tensor[(12, 2, 7), float32] */;
    (%124,)
  };
  %125() /* ty=(Tensor[(12, 2, 7), float32],) */
}

def @func_4136() -> (Tensor[(12, 2, 7), float32], Tensor[(4576), uint8], Tensor[(8, 13, 4), float32]) {
  @func_4134() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(4576), uint8], Tensor[(8, 13, 4), float32]) */
}

def @func_2254(%var_2232: Tensor[(416), uint8], %var_2233: Tensor[(4576), uint8]) -> (Tensor[(12, 2, 7), float32], Tensor[(1440), uint64], Tensor[(416), uint8], Tensor[(4576), uint8], Tensor[(256), float32], Tensor[(12, 2, 7), float32], Tensor[(128, 2), bool]) {
  %126 = @func_1612() /* ty=(Tensor[(416), uint8], Tensor[(15, 8, 12), uint64], Tensor[(1440), uint64]) */;
  %127 = @func_1553() /* ty=(Tensor[(12, 2, 7), float32],) */;
  %128 = cast(%var_2232, dtype="uint8") /* ty=Tensor[(416), uint8] */;
  %129 = cast(%var_2233, dtype="uint8") /* ty=Tensor[(4576), uint8] */;
  %130 = cast(meta[relay.Constant][2] /* ty=Tensor[(256), float32] */, dtype="float32") /* ty=Tensor[(256), float32] */;
  %131 = reshape(%128, newshape=[1, 416]) /* ty=Tensor[(1, 416), uint8] */;
  %132 = reshape(%129, newshape=[11, 416]) /* ty=Tensor[(11, 416), uint8] */;
  %133 = reshape(%130, newshape=[128, 2]) /* ty=Tensor[(128, 2), float32] */;
  %134 = @func_609(%131, %132, %133) /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 5, 8), float64], Tensor[(11, 416), int8], Tensor[(16, 16, ?), bool], Tensor[(128, 2), float32], Tensor[(12, 5, 8), float64], Tensor[(1, 416), float64], Tensor[(16, 16, ?), bool]) */;
  %135 = %134.4;
  %136 = cast(%135, dtype="float64") /* ty=Tensor[(128, 2), float64] */;
  %137 = acosh(%136) /* ty=Tensor[(128, 2), float64] */;
  %138 = cast(meta[relay.Constant][3] /* ty=Tensor[(128, 2), float64] */, dtype="bool") /* ty=Tensor[(128, 2), bool] */;
  %139 = shape_of(%137, dtype="int32") /* ty=Tensor[(2), int32] */;
  %140 = cast(%137, dtype="bool") /* ty=Tensor[(128, 2), bool] */;
  %141 = dyn.reshape(%138, %139, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %142 = @func_1131() /* ty=Tensor[(12, 2, 7), float32] */;
  %143 = %126.2;
  %144 = %127.0;
  %145 = logical_or(%140, %141) /* ty=Tensor[(128, 2), bool] */;
  (%142, %143, %var_2232, %var_2233, meta[relay.Constant][2] /* ty=Tensor[(256), float32] */, %144, %145)
}

def @func_1426() -> (Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), bool], Tensor[(12, 2, 7), float32]) {
  %146 = @func_782() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8], Tensor[(416), uint8]) */;
  %147 = @func_800() /* ty=(Tensor[(8, 13, 4), uint8],) */;
  %148 = %147.0;
  %149 = cast(meta[relay.Constant][4] /* ty=Tensor[(8, 13, 4), uint8] */, dtype="bool") /* ty=Tensor[(8, 13, 4), bool] */;
  %150 = shape_of(%148, dtype="int32") /* ty=Tensor[(3), int32] */;
  %151 = cast(%148, dtype="bool") /* ty=Tensor[(8, 13, 4), bool] */;
  %152 = dyn.reshape(%149, %150, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %153 = %146.0;
  %154 = logical_and(%151, %152) /* ty=Tensor[(8, 13, 4), bool] */;
  %155 = @func_1131() /* ty=Tensor[(12, 2, 7), float32] */;
  (%153, %154, %155)
}

def @func_4134() -> (Tensor[(12, 2, 7), float32], Tensor[(4576), uint8], Tensor[(8, 13, 4), float32]) {
  %156 = @func_3855() /* ty=(Tensor[(15, 8, 12), uint64], Tensor[(8, 13, 4), uint8], Tensor[(8, 13, 4), uint8], Tensor[(12, 2, 7), float32], Tensor[(4576), uint8]) */;
  %157 = %156.2;
  %158 = cast(%157, dtype="uint8") /* ty=Tensor[(8, 13, 4), uint8] */;
  %159 = cast(meta[relay.Constant][5] /* ty=Tensor[(4576), uint8] */, dtype="uint8") /* ty=Tensor[(4576), uint8] */;
  %160 = reshape(%158, newshape=[416]) /* ty=Tensor[(416), uint8] */;
  %161 = reshape(%159, newshape=[4576]) /* ty=Tensor[(4576), uint8] */;
  %162 = @func_2254(%160, %161) /* ty=(Tensor[(12, 2, 7), float32], Tensor[(1440), uint64], Tensor[(416), uint8], Tensor[(4576), uint8], Tensor[(256), float32], Tensor[(12, 2, 7), float32], Tensor[(128, 2), bool]) */;
  %163 = cast(%157, dtype="float32") /* ty=Tensor[(8, 13, 4), float32] */;
  %164 = %162.5;
  %165 = log10(%163) /* ty=Tensor[(8, 13, 4), float32] */;
  (%164, meta[relay.Constant][5] /* ty=Tensor[(4576), uint8] */, %165)
}

def @func_1076() -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) {
  %172 = fn () -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) {
    %166 = @func_348() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 10, 13), float64]) */;
    %167 = @func_348() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 10, 13), float64]) */;
    %168 = @func_1029() /* ty=(Tensor[(12, 2, 7), float32],) */;
    %169 = %166.0;
    %170 = %167.0;
    %171 = %168.0;
    (%169, %170, %171)
  };
  %172() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */
}

def @func_5957() -> (Tensor[(12, 2, 7), float32],) {
  %173 = @func_3515() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */;
  %174 = %173.1;
  (%174,)
}

def @func_4332() -> (Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8]) {
  %178 = fn () -> (Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8]) {
    %175 = @func_1075() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */;
    %176 = %175.0;
    %177 = @func_3390() /* ty=Tensor[(8, 13, 4), uint8] */;
    (%176, %177)
  };
  %178() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8]) */
}

def @func_801() -> (Tensor[(8, 13, 4), uint8],) {
  %181 = fn () -> (Tensor[(8, 13, 4), uint8],) {
    %179 = @func_782() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8], Tensor[(416), uint8]) */;
    %180 = %179.1;
    (%180,)
  };
  %181() /* ty=(Tensor[(8, 13, 4), uint8],) */
}

def @func_3090(%var_3019: Tensor[(120, 4), float64]) -> (Tensor[(120, 4), bool], Tensor[(256), float32], Tensor[(256), float32], Tensor[(1440), uint64], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(120, 4), float64]) {
  %182 = @func_2348() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 5, 8), float64], Tensor[(120, 4), float64]) */;
  %183 = %182.2;
  %184 = cast(%var_3019, dtype="bool") /* ty=Tensor[(120, 4), bool] */;
  %185 = shape_of(%183, dtype="int32") /* ty=Tensor[(2), int32] */;
  %186 = cast(%183, dtype="bool") /* ty=Tensor[(120, 4), bool] */;
  %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %188 = cast(meta[relay.Constant][6] /* ty=Tensor[(256), float32] */, dtype="float32") /* ty=Tensor[(256), float32] */;
  %189 = reshape(%188, newshape=[256]) /* ty=Tensor[(256), float32] */;
  %190 = @func_667(%189) /* ty=(Tensor[(12, 2, 7), float32], Tensor[(16, 16, ?), bool], Tensor[(256), float32]) */;
  %191 = @func_2696() /* ty=(Tensor[(8, 13, 4), uint8], Tensor[(15, 8, 12), uint64], Tensor[(1440), uint64]) */;
  %192 = @func_2163() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(256), float32], Tensor[(15, 8, 12), uint64], Tensor[(1440, 1), uint64], Tensor[(15, 8, 12), uint64], Tensor[(12, 2, 7), float32], Tensor[(4, 104), bool]) */;
  %193 = @func_1837() /* ty=(Tensor[(12, 5, 7), float32], Tensor[(12, 5, 7), float32], Tensor[(12, 2, 7), float32]) */;
  %194 = @func_2454() /* ty=(Tensor[(12, 2, 7), float32],) */;
  %195 = cast(%183, dtype="bool") /* ty=Tensor[(120, 4), bool] */;
  %196 = shape_of(%var_3019, dtype="int32") /* ty=Tensor[(2), int32] */;
  %197 = cast(%var_3019, dtype="bool") /* ty=Tensor[(120, 4), bool] */;
  %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %199 = equal(%197, %198) /* ty=Tensor[(120, 4), bool] */;
  %200 = cast(%199, dtype="float64") /* ty=Tensor[(120, 4), float64] */;
  %201 = logical_or(%186, %187) /* ty=Tensor[(120, 4), bool] */;
  %202 = %190.2;
  %203 = %191.2;
  %204 = %192.5;
  %205 = %193.2;
  %206 = %194.0;
  %207 = acos(%200) /* ty=Tensor[(120, 4), float64] */;
  (%201, %202, meta[relay.Constant][6] /* ty=Tensor[(256), float32] */, %203, %204, %205, %206, %207)
}

def @func_2555(%var_2553: Tensor[(8, 13, 4), bool]) -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), bool]) {
  @func_2552(%var_2553) /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), bool]) */
}

def @func_6047() -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) {
  %208 = @func_5204() /* ty=(Tensor[(12, 2, 7), float32],) */;
  %209 = @func_1426() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), bool], Tensor[(12, 2, 7), float32]) */;
  %210 = %208.0;
  %211 = @func_2797() /* ty=Tensor[(12, 2, 7), float32] */;
  %212 = %209.2;
  (%210, %211, %212)
}

def @func_2605(%var_2603: Tensor[(1, 16, 14), float32]) -> (Tensor[(1, 16, 14), float32], Tensor[(1, 16, 14), float64]) {
  @func_2602(%var_2603) /* ty=(Tensor[(1, 16, 14), float32], Tensor[(1, 16, 14), float64]) */
}

def @func_361(%var_359: Tensor[(480), float64]) -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 5, 8), float64], Tensor[(480), float64]) {
  @func_358(%var_359) /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 5, 8), float64], Tensor[(480), float64]) */
}

def @func_1329(%var_1327: Tensor[(15, 8, 12), uint64], %var_1328: Tensor[(15, 8, 12), uint64]) -> (Tensor[(15, 8, 12), uint64], Tensor[(8, 13, 4), uint8]) {
  @func_1325(%var_1327, %var_1328) /* ty=(Tensor[(15, 8, 12), uint64], Tensor[(8, 13, 4), uint8]) */
}

def @func_3516() -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) {
  %215 = fn () -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) {
    %213 = @func_3325() /* ty=Tensor[(12, 2, 7), float32] */;
    %214 = @func_2562() /* ty=Tensor[(12, 2, 7), float32] */;
    (%213, %214)
  };
  %215() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */
}

def @func_8381(%var_8366: Tensor[(16, 3, 6), float64], %var_8367: Tensor[(16, 3, 6), float64]) -> Tensor[(16, 3, 6), bool] {
  %216 = cast(%var_8367, dtype="bool") /* ty=Tensor[(16, 3, 6), bool] */;
  %217 = shape_of(%var_8366, dtype="int32") /* ty=Tensor[(3), int32] */;
  %218 = cast(%var_8366, dtype="bool") /* ty=Tensor[(16, 3, 6), bool] */;
  %219 = dyn.reshape(%216, %217, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %220 = not_equal(%218, %219) /* ty=Tensor[(16, 3, 6), bool] */;
  %221 = cast(%220, dtype="bool") /* ty=Tensor[(16, 3, 6), bool] */;
  %222 = shape_of(%var_8366, dtype="int32") /* ty=Tensor[(3), int32] */;
  %223 = cast(%var_8366, dtype="bool") /* ty=Tensor[(16, 3, 6), bool] */;
  %224 = dyn.reshape(%221, %222, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%223, %224) /* ty=Tensor[(16, 3, 6), bool] */
}

def @func_1114(%var_1104: Tensor[(4, 64), float32]) -> (Tensor[(12, 2, 7), float64], Tensor[(16, 16, ?), bool], Tensor[(4, 64), float64]) {
  %225 = @func_1029() /* ty=(Tensor[(12, 2, 7), float32],) */;
  %226 = %225.0;
  %227 = cast(%226, dtype="float64") /* ty=Tensor[(12, 2, 7), float64] */;
  %228 = cast(%var_1104, dtype="float32") /* ty=Tensor[(4, 64), float32] */;
  %229 = reshape(%228, newshape=[256]) /* ty=Tensor[(256), float32] */;
  %230 = @func_667(%229) /* ty=(Tensor[(12, 2, 7), float32], Tensor[(16, 16, ?), bool], Tensor[(256), float32]) */;
  %231 = cast(%var_1104, dtype="float64") /* ty=Tensor[(4, 64), float64] */;
  %232 = sin(%227) /* ty=Tensor[(12, 2, 7), float64] */;
  %233 = %230.1;
  %234 = rsqrt(%231) /* ty=Tensor[(4, 64), float64] */;
  (%232, %233, %234)
}

def @func_3906() -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8]) {
  %240 = fn () -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8]) {
    %235 = @func_1911() /* ty=(Tensor[(256), float32], Tensor[(16, 16), float32], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint64], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8]) */;
    %236 = @func_782() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8], Tensor[(416), uint8]) */;
    %237 = @func_3226() /* ty=Tensor[(12, 2, 7), float32] */;
    %238 = %235.4;
    %239 = %236.1;
    (%237, %238, %239)
  };
  %240() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8]) */
}

def @func_5486(%var_5481: Tensor[(12, 2, 7), float32], %var_5482: int16, %var_5483: Tensor[(1248), int16], %var_5484: Tensor[(480), float64], %var_5485: Tensor[(4, 64), float32]) -> (Tensor[(12, 2, 7), bool], Tensor[(16, 6, 13), bool], int16, Tensor[(1248), int16], Tensor[(12, 2, 7), float32], Tensor[(480), float64], Tensor[(416), float32], Tensor[(16, 16, ?), bool], Tensor[(4, 64), float32]) {
  @func_5479(%var_5481, %var_5482, %var_5483, %var_5484, %var_5485) /* ty=(Tensor[(12, 2, 7), bool], Tensor[(16, 6, 13), bool], int16, Tensor[(1248), int16], Tensor[(12, 2, 7), float32], Tensor[(480), float64], Tensor[(416), float32], Tensor[(16, 16, ?), bool], Tensor[(4, 64), float32]) */
}

def @func_3390() -> Tensor[(8, 13, 4), uint8] {
  %241 = @func_782() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8], Tensor[(416), uint8]) */;
  %241.1
}

def @func_3392() -> Tensor[(8, 13, 4), uint8] {
  @func_3390() /* ty=Tensor[(8, 13, 4), uint8] */
}

def @func_2563() -> Tensor[(12, 2, 7), float32] {
  %243 = fn () -> Tensor[(12, 2, 7), float32] {
    %242 = @func_2454() /* ty=(Tensor[(12, 2, 7), float32],) */;
    %242.0
  };
  %243() /* ty=Tensor[(12, 2, 7), float32] */
}

def @func_8222() -> (Tensor[(8, 13, 4), uint8], Tensor[(8, 10, 13), float64]) {
  @func_8220() /* ty=(Tensor[(8, 13, 4), uint8], Tensor[(8, 10, 13), float64]) */
}

def @func_5908(%var_5878: Tensor[(1, 14, 2), int32], %var_5879: Tensor[(16, 14, 2), int32]) -> (Tensor[(16, 14, 2), int32], Tensor[(1, 14, 2), float32], Tensor[(8, 13, 4), uint8], Tensor[(8, 52), uint8], Tensor[(16, 14, 2), float64], Tensor[(15, 8, 12), bool], Tensor[(10, 144), uint64]) {
  %244 = cast(%var_5878, dtype="int32") /* ty=Tensor[(1, 14, 2), int32] */;
  %245 = cast(%var_5879, dtype="int32") /* ty=Tensor[(16, 14, 2), int32] */;
  %246 = cast(%var_5878, dtype="float32") /* ty=Tensor[(1, 14, 2), float32] */;
  %247 = cast(meta[relay.Constant][7] /* ty=Tensor[(8, 52), uint8] */, dtype="uint8") /* ty=Tensor[(8, 52), uint8] */;
  %248 = cast(meta[relay.Constant][7] /* ty=Tensor[(8, 52), uint8] */, dtype="uint8") /* ty=Tensor[(8, 52), uint8] */;
  %249 = reshape(%247, newshape=[8, 13, 4]) /* ty=Tensor[(8, 13, 4), uint8] */;
  %250 = reshape(%248, newshape=[8, 13, 4]) /* ty=Tensor[(8, 13, 4), uint8] */;
  %251 = cast(%var_5879, dtype="float64") /* ty=Tensor[(16, 14, 2), float64] */;
  %252 = cast(meta[relay.Constant][8] /* ty=Tensor[(10, 144), uint64] */, dtype="uint64") /* ty=Tensor[(10, 144), uint64] */;
  %253 = reshape(%252, newshape=[15, 8, 12]) /* ty=Tensor[(15, 8, 12), uint64] */;
  %254 = @func_3347(%253) /* ty=(Tensor[(15, 8, 12), bool],) */;
  %255 = bitwise_xor(%244, %245) /* ty=Tensor[(16, 14, 2), int32] */;
  %256 = cos(%246) /* ty=Tensor[(1, 14, 2), float32] */;
  %257 = @func_77(%249, %250) /* ty=Tensor[(8, 13, 4), uint8] */;
  %258 = log10(%251) /* ty=Tensor[(16, 14, 2), float64] */;
  %259 = %254.0;
  (%255, %256, %257, meta[relay.Constant][7] /* ty=Tensor[(8, 52), uint8] */, %258, %259, meta[relay.Constant][8] /* ty=Tensor[(10, 144), uint64] */)
}

def @func_7270(%var_7268: Tensor[(1, 16, 12), float32], %var_7269: Tensor[(585), float32]) -> (Tensor[(1, 16, 12), float32], Tensor[(12, 2, 7), float32], Tensor[(585), float32]) {
  %266 = fn (%var_7248: Tensor[(1, 16, 12), float32], %var_7265: Tensor[(585), float32]) -> (Tensor[(1, 16, 12), float32], Tensor[(12, 2, 7), float32], Tensor[(585), float32]) {
    %260 = cast(%var_7248, dtype="float32") /* ty=Tensor[(1, 16, 12), float32] */;
    %261 = cast(%var_7265, dtype="float32") /* ty=Tensor[(585), float32] */;
    %262 = reshape(%261, newshape=[13, 9, 5]) /* ty=Tensor[(13, 9, 5), float32] */;
    %263 = @func_4173(%262) /* ty=(Tensor[(13, 9, 5), float32], Tensor[(12, 2, 7), float32]) */;
    %264 = cos(%260) /* ty=Tensor[(1, 16, 12), float32] */;
    %265 = %263.1;
    (%264, %265, %var_7265)
  };
  %266(%var_7268, %var_7269) /* ty=(Tensor[(1, 16, 12), float32], Tensor[(12, 2, 7), float32], Tensor[(585), float32]) */
}

def @func_5620(%var_5618: Tensor[(12, 2, 7), float32], %var_5619: Tensor[(12, 2, 7), float32]) -> (Tensor[(12, 2, 7), int64], Tensor[(12, 5, 7), float32], Tensor[(416), uint8], Tensor[(8, 10, 13), uint32], Tensor[(12, 2, 7), int8]) {
  @func_5616(%var_5618, %var_5619) /* ty=(Tensor[(12, 2, 7), int64], Tensor[(12, 5, 7), float32], Tensor[(416), uint8], Tensor[(8, 10, 13), uint32], Tensor[(12, 2, 7), int8]) */
}

def @func_6850(%var_6848: Tensor[(168), float32]) -> (Tensor[(8, 10, 13), bool], Tensor[(8, 10, 13), float32], Tensor[(12, 2, 7), bool], Tensor[(168), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) {
  @func_6847(%var_6848) /* ty=(Tensor[(8, 10, 13), bool], Tensor[(8, 10, 13), float32], Tensor[(12, 2, 7), bool], Tensor[(168), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */
}

def @func_6049() -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) {
  @func_6047() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */
}

def @func_1211(%var_1194: Tensor[(120, 4), float64], %var_1195: Tensor[(416), float32]) -> (Tensor[(12, 2, 7), float32], Tensor[(8, 10, 13), float64], Tensor[(12, 2, 7), float32], Tensor[(120, 4), float64], Tensor[(416), float32]) {
  %267 = @func_1075() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */;
  %268 = @func_348() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 10, 13), float64]) */;
  %269 = cast(%var_1194, dtype="float64") /* ty=Tensor[(120, 4), float64] */;
  %270 = cast(%var_1195, dtype="float32") /* ty=Tensor[(416), float32] */;
  %271 = reshape(%269, newshape=[1, 480]) /* ty=Tensor[(1, 480), float64] */;
  %272 = reshape(%270, newshape=[8, 13, 4]) /* ty=Tensor[(8, 13, 4), float32] */;
  %273 = @func_1001(%271, %272) /* ty=(Tensor[(480), float64], Tensor[(1, 480), float64], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), int32]) */;
  %274 = %267.2;
  %275 = %268.1;
  %276 = %273.2;
  (%274, %275, %276, %var_1194, %var_1195)
}

def @func_4049() -> Tensor[(12, 2, 7), float32] {
  %278 = fn () -> Tensor[(12, 2, 7), float32] {
    %277 = @func_3240() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */;
    %277.0
  };
  %278() /* ty=Tensor[(12, 2, 7), float32] */
}

def @func_7343() -> Tensor[(12, 2, 7), float32] {
  @func_7341() /* ty=Tensor[(12, 2, 7), float32] */
}

def @func_5912(%var_5910: Tensor[(1, 14, 2), int32], %var_5911: Tensor[(16, 14, 2), int32]) -> (Tensor[(16, 14, 2), int32], Tensor[(1, 14, 2), float32], Tensor[(8, 13, 4), uint8], Tensor[(8, 52), uint8], Tensor[(16, 14, 2), float64], Tensor[(15, 8, 12), bool], Tensor[(10, 144), uint64]) {
  @func_5908(%var_5910, %var_5911) /* ty=(Tensor[(16, 14, 2), int32], Tensor[(1, 14, 2), float32], Tensor[(8, 13, 4), uint8], Tensor[(8, 52), uint8], Tensor[(16, 14, 2), float64], Tensor[(15, 8, 12), bool], Tensor[(10, 144), uint64]) */
}

def @func_4775(%var_4773: Tensor[(13, 11, 5), float64]) -> (Tensor[(13, 11, 5), float64], Tensor[(12, 2, 7), float32]) {
  @func_4772(%var_4773) /* ty=(Tensor[(13, 11, 5), float64], Tensor[(12, 2, 7), float32]) */
}

def @func_2195(%var_2194: Tensor[(8, 6, 15), float64]) -> (Tensor[(8, 6, 15), float64], Tensor[(416), float32], Tensor[(12, 2, 7), float32]) {
  %285 = fn (%var_2181: Tensor[(8, 6, 15), float64]) -> (Tensor[(8, 6, 15), float64], Tensor[(416), float32], Tensor[(12, 2, 7), float32]) {
    %279 = cast(%var_2181, dtype="float64") /* ty=Tensor[(8, 6, 15), float64] */;
    %280 = @func_2082() /* ty=(Tensor[(15, 8, 12), uint64], Tensor[(416), uint8], Tensor[(416), float32], Tensor[(480), float64]) */;
    %281 = @func_1075() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */;
    %282 = cos(%279) /* ty=Tensor[(8, 6, 15), float64] */;
    %283 = %280.2;
    %284 = %281.1;
    (%282, %283, %284)
  };
  %285(%var_2194) /* ty=(Tensor[(8, 6, 15), float64], Tensor[(416), float32], Tensor[(12, 2, 7), float32]) */
}

def @func_7989(%var_7987: Tensor[(585), float32]) -> (Tensor[(224), float32], Tensor[(13, 9, 5), float32], Tensor[(585), float32]) {
  %286 = @func_4426() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(1, 16, 14), float32], Tensor[(224), float32]) */;
  %287 = cast(%var_7987, dtype="float32") /* ty=Tensor[(585), float32] */;
  %288 = reshape(%287, newshape=[13, 9, 5]) /* ty=Tensor[(13, 9, 5), float32] */;
  %289 = @func_4173(%288) /* ty=(Tensor[(13, 9, 5), float32], Tensor[(12, 2, 7), float32]) */;
  %290 = %286.2;
  %291 = %289.0;
  (%290, %291, %var_7987)
}

def @func_1131() -> Tensor[(12, 2, 7), float32] {
  %292 = @func_348() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 10, 13), float64]) */;
  %292.0
}

def @func_481(%var_479: Tensor[(12, 2, 7), float32], %var_480: Tensor[(416), uint8]) -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), bool], Tensor[(12, 5, 8), float64], Tensor[(480), float64], Tensor[(12, 5, 8), float64]) {
  %328 = fn (%var_398: Tensor[(12, 2, 7), float32], %var_410: Tensor[(416), uint8]) -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), bool], Tensor[(12, 5, 8), float64], Tensor[(480), float64], Tensor[(12, 5, 8), float64]) {
    %293 = @func_318() /* ty=Tensor[(12, 2, 7), float32] */;
    %294 = cast(%var_398, dtype="float32") /* ty=Tensor[(12, 2, 7), float32] */;
    %295 = shape_of(%293, dtype="int32") /* ty=Tensor[(3), int32] */;
    %296 = cast(%293, dtype="float32") /* ty=Tensor[(12, 2, 7), float32] */;
    %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %298 = cast(%293, dtype="float32") /* ty=Tensor[(12, 2, 7), float32] */;
    %299 = cos(%298) /* ty=Tensor[(12, 2, 7), float32] */;
    %300 = cast(%var_398, dtype="float32") /* ty=Tensor[(12, 2, 7), float32] */;
    %301 = shape_of(%299, dtype="int32") /* ty=Tensor[(3), int32] */;
    %302 = cast(%299, dtype="float32") /* ty=Tensor[(12, 2, 7), float32] */;
    %303 = dyn.reshape(%300, %301, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %304 = cast(%var_410, dtype="uint8") /* ty=Tensor[(416), uint8] */;
    %305 = cast(%var_410, dtype="uint8") /* ty=Tensor[(416), uint8] */;
    %306 = reshape(%304, newshape=[8, 13, 4]) /* ty=Tensor[(8, 13, 4), uint8] */;
    %307 = reshape(%305, newshape=[8, 13, 4]) /* ty=Tensor[(8, 13, 4), uint8] */;
    %308 = @func_77(%306, %307) /* ty=Tensor[(8, 13, 4), uint8] */;
    %309 = cast(%var_410, dtype="float64") /* ty=Tensor[(416), float64] */;
    %310 = atan(%309) /* ty=Tensor[(416), float64] */;
    %311 = cast(%310, dtype="bool") /* ty=Tensor[(416), bool] */;
    %312 = shape_of(%308, dtype="int32") /* ty=Tensor[(3), int32] */;
    %313 = cast(%308, dtype="bool") /* ty=Tensor[(8, 13, 4), bool] */;
    %314 = dyn.reshape(%311, %312, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %315 = cast(meta[relay.Constant][9] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
    %316 = cast(meta[relay.Constant][9] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
    %317 = reshape(%315, newshape=[12, 5, 8]) /* ty=Tensor[(12, 5, 8), float64] */;
    %318 = reshape(%316, newshape=[12, 5, 8]) /* ty=Tensor[(12, 5, 8), float64] */;
    %319 = @func_133(%317, %318) /* ty=(Tensor[(12, 5, 8), float64],) */;
    %320 = %319.0;
    %321 = cast(%320, dtype="float64") /* ty=Tensor[(12, 5, 8), float64] */;
    %322 = reshape(%321, newshape=[480]) /* ty=Tensor[(480), float64] */;
    %323 = @func_358(%322) /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 5, 8), float64], Tensor[(480), float64]) */;
    %324 = power(%296, %297) /* ty=Tensor[(12, 2, 7), float32] */;
    %325 = floor_mod(%302, %303) /* ty=Tensor[(12, 2, 7), float32] */;
    %326 = less_equal(%313, %314) /* ty=Tensor[(8, 13, 4), bool] */;
    %327 = %323.2;
    (%324, %325, %326, %320, meta[relay.Constant][9] /* ty=Tensor[(480), float64] */, %327)
  };
  %328(%var_479, %var_480) /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), bool], Tensor[(12, 5, 8), float64], Tensor[(480), float64], Tensor[(12, 5, 8), float64]) */
}

def @func_5272() -> (Tensor[(8, 13, 4), uint8], Tensor[(12, 2, 7), float32]) {
  @func_5270() /* ty=(Tensor[(8, 13, 4), uint8], Tensor[(12, 2, 7), float32]) */
}

def @func_8298() -> (Tensor[(12, 2, 7), float32],) {
  @func_8296() /* ty=(Tensor[(12, 2, 7), float32],) */
}

def @func_8755(%var_8752: Tensor[(4, 312), int16], %var_8753: Tensor[(480), float64], %var_8754: Tensor[(4, 64), float64]) -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], int16, Tensor[(4, 312), int16], Tensor[(480), float64], Tensor[(256), float32], Tensor[(8, 13, 4), float64], Tensor[(4, 64), float64], Tensor[(15, 8, 12), uint64], Tensor[(4, 64), bool]) {
  %358 = fn (%var_8672: Tensor[(4, 312), int16], %var_8673: Tensor[(480), float64], %var_8725: Tensor[(4, 64), float64]) -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], int16, Tensor[(4, 312), int16], Tensor[(480), float64], Tensor[(256), float32], Tensor[(8, 13, 4), float64], Tensor[(4, 64), float64], Tensor[(15, 8, 12), uint64], Tensor[(4, 64), bool]) {
    %329 = @func_7036() /* ty=(Tensor[(12, 2, 7), float32],) */;
    %330 = @func_4079() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8]) */;
    %331 = @func_7570() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), float64], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */;
    %332 = %330.0;
    %333 = cast(%332, dtype="float32") /* ty=Tensor[(12, 2, 7), float32] */;
    %334 = cast(meta[relay.Constant][10] /* ty=int16 */, dtype="int16") /* ty=int16 */;
    %335 = cast(%var_8672, dtype="int16") /* ty=Tensor[(4, 312), int16] */;
    %336 = cast(%var_8673, dtype="float64") /* ty=Tensor[(480), float64] */;
    %337 = cast(meta[relay.Constant][11] /* ty=Tensor[(256), float32] */, dtype="float32") /* ty=Tensor[(256), float32] */;
    %338 = reshape(%333, newshape=[12, 2, 7]) /* ty=Tensor[(12, 2, 7), float32] */;
    %339 = reshape(%334, newshape=[]) /* ty=int16 */;
    %340 = reshape(%335, newshape=[1248]) /* ty=Tensor[(1248), int16] */;
    %341 = reshape(%336, newshape=[480]) /* ty=Tensor[(480), float64] */;
    %342 = reshape(%337, newshape=[4, 64]) /* ty=Tensor[(4, 64), float32] */;
    %343 = @func_5479(%338, %339, %340, %341, %342) /* ty=(Tensor[(12, 2, 7), bool], Tensor[(16, 6, 13), bool], int16, Tensor[(1248), int16], Tensor[(12, 2, 7), float32], Tensor[(480), float64], Tensor[(416), float32], Tensor[(16, 16, ?), bool], Tensor[(4, 64), float32]) */;
    %344 = %343.8;
    %345 = cast(%344, dtype="float64") /* ty=Tensor[(4, 64), float64] */;
    %346 = @func_2163() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(256), float32], Tensor[(15, 8, 12), uint64], Tensor[(1440, 1), uint64], Tensor[(15, 8, 12), uint64], Tensor[(12, 2, 7), float32], Tensor[(4, 104), bool]) */;
    %347 = cast(%344, dtype="float64") /* ty=Tensor[(4, 64), float64] */;
    %348 = asinh(%347) /* ty=Tensor[(4, 64), float64] */;
    %349 = cast(%var_8725, dtype="bool") /* ty=Tensor[(4, 64), bool] */;
    %350 = shape_of(%348, dtype="int32") /* ty=Tensor[(2), int32] */;
    %351 = cast(%348, dtype="bool") /* ty=Tensor[(4, 64), bool] */;
    %352 = dyn.reshape(%349, %350, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %353 = %329.0;
    %354 = %331.3;
    %355 = log(%345) /* ty=Tensor[(4, 64), float64] */;
    %356 = %346.2;
    %357 = less_equal(%351, %352) /* ty=Tensor[(4, 64), bool] */;
    (%353, %332, meta[relay.Constant][10] /* ty=int16 */, %var_8672, %var_8673, meta[relay.Constant][11] /* ty=Tensor[(256), float32] */, %354, %355, %356, %357)
  };
  %358(%var_8752, %var_8753, %var_8754) /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], int16, Tensor[(4, 312), int16], Tensor[(480), float64], Tensor[(256), float32], Tensor[(8, 13, 4), float64], Tensor[(4, 64), float64], Tensor[(15, 8, 12), uint64], Tensor[(4, 64), bool]) */
}

def @func_1943() -> Tensor[(15, 8, 12), uint64] {
  %359 = @func_1612() /* ty=(Tensor[(416), uint8], Tensor[(15, 8, 12), uint64], Tensor[(1440), uint64]) */;
  %359.1
}

def @func_8256() -> (Tensor[(12, 2, 7), float32],) {
  %360 = @func_5957() /* ty=(Tensor[(12, 2, 7), float32],) */;
  %361 = %360.0;
  (%361,)
}

def @func_8246() -> Tensor[(12, 2, 7), float32] {
  @func_5040() /* ty=Tensor[(12, 2, 7), float32] */
}

def @func_3156() -> (Tensor[(12, 2, 7), float32], Tensor[(416), uint8]) {
  @func_3154() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(416), uint8]) */
}

def @func_7825() -> Tensor[(12, 2, 7), float32] {
  %363 = fn () -> Tensor[(12, 2, 7), float32] {
    %362 = @func_5204() /* ty=(Tensor[(12, 2, 7), float32],) */;
    %362.0
  };
  %363() /* ty=Tensor[(12, 2, 7), float32] */
}

def @func_3985() -> Tensor[(12, 2, 7), float32] {
  %365 = fn () -> Tensor[(12, 2, 7), float32] {
    %364 = @func_1426() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), bool], Tensor[(12, 2, 7), float32]) */;
    %364.2
  };
  %365() /* ty=Tensor[(12, 2, 7), float32] */
}

def @func_4772(%var_4724: Tensor[(13, 11, 5), float64]) -> (Tensor[(13, 11, 5), float64], Tensor[(12, 2, 7), float32]) {
  %366 = cast(%var_4724, dtype="float64") /* ty=Tensor[(13, 11, 5), float64] */;
  %367 = asinh(%366) /* ty=Tensor[(13, 11, 5), float64] */;
  %368 = @func_4631() /* ty=Tensor[(12, 2, 7), float32] */;
  (%367, %368)
}

def @func_5479(%var_5436: Tensor[(12, 2, 7), float32], %var_5443: int16, %var_5444: Tensor[(1248), int16], %var_5448: Tensor[(480), float64], %var_5458: Tensor[(4, 64), float32]) -> (Tensor[(12, 2, 7), bool], Tensor[(16, 6, 13), bool], int16, Tensor[(1248), int16], Tensor[(12, 2, 7), float32], Tensor[(480), float64], Tensor[(416), float32], Tensor[(16, 16, ?), bool], Tensor[(4, 64), float32]) {
  %369 = @func_4917() /* ty=Tensor[(12, 2, 7), float32] */;
  %370 = cast(%var_5436, dtype="bool") /* ty=Tensor[(12, 2, 7), bool] */;
  %371 = shape_of(%369, dtype="int32") /* ty=Tensor[(3), int32] */;
  %372 = cast(%369, dtype="bool") /* ty=Tensor[(12, 2, 7), bool] */;
  %373 = dyn.reshape(%370, %371, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %374 = cast(%var_5443, dtype="int16") /* ty=int16 */;
  %375 = cast(%var_5444, dtype="int16") /* ty=Tensor[(1248), int16] */;
  %376 = reshape(%374, newshape=[]) /* ty=int16 */;
  %377 = reshape(%375, newshape=[16, 6, 13]) /* ty=Tensor[(16, 6, 13), int16] */;
  %378 = @func_3598(%376, %377) /* ty=(Tensor[(16, 6, 13), bool], Tensor[(12, 2, 7), float32]) */;
  %379 = cast(%var_5448, dtype="float64") /* ty=Tensor[(480), float64] */;
  %380 = cast(meta[relay.Constant][12] /* ty=Tensor[(416), float32] */, dtype="float32") /* ty=Tensor[(416), float32] */;
  %381 = reshape(%379, newshape=[1, 480]) /* ty=Tensor[(1, 480), float64] */;
  %382 = reshape(%380, newshape=[8, 13, 4]) /* ty=Tensor[(8, 13, 4), float32] */;
  %383 = @func_1001(%381, %382) /* ty=(Tensor[(480), float64], Tensor[(1, 480), float64], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), int32]) */;
  %384 = cast(%var_5458, dtype="float32") /* ty=Tensor[(4, 64), float32] */;
  %385 = reshape(%384, newshape=[16, 16, 1]) /* ty=Tensor[(16, 16, 1), float32] */;
  %386 = less(%372, %373) /* ty=Tensor[(12, 2, 7), bool] */;
  %387 = %378.0;
  %388 = %383.2;
  %389 = @func_517(%385) /* ty=Tensor[(16, 16, ?), bool] */;
  (%386, %387, %var_5443, %var_5444, %388, %var_5448, meta[relay.Constant][12] /* ty=Tensor[(416), float32] */, %389, %var_5458)
}

def @func_8773() -> (Tensor[(12, 2, 7), float32],) {
  %391 = fn () -> (Tensor[(12, 2, 7), float32],) {
    %390 = @func_4253() /* ty=Tensor[(12, 2, 7), float32] */;
    (%390,)
  };
  %391() /* ty=(Tensor[(12, 2, 7), float32],) */
}

def @func_2696() -> (Tensor[(8, 13, 4), uint8], Tensor[(15, 8, 12), uint64], Tensor[(1440), uint64]) {
  %392 = cast(meta[relay.Constant][13] /* ty=Tensor[(1440), uint64] */, dtype="uint64") /* ty=Tensor[(1440), uint64] */;
  %393 = cast(meta[relay.Constant][13] /* ty=Tensor[(1440), uint64] */, dtype="uint64") /* ty=Tensor[(1440), uint64] */;
  %394 = reshape(%392, newshape=[15, 8, 12]) /* ty=Tensor[(15, 8, 12), uint64] */;
  %395 = reshape(%393, newshape=[15, 8, 12]) /* ty=Tensor[(15, 8, 12), uint64] */;
  %396 = @func_1325(%394, %395) /* ty=(Tensor[(15, 8, 12), uint64], Tensor[(8, 13, 4), uint8]) */;
  %397 = @func_2623() /* ty=Tensor[(8, 13, 4), uint8] */;
  %398 = %396.0;
  (%397, %398, meta[relay.Constant][13] /* ty=Tensor[(1440), uint64] */)
}

def @func_320() -> Tensor[(12, 2, 7), float32] {
  @func_318() /* ty=Tensor[(12, 2, 7), float32] */
}

def @func_2349() -> (Tensor[(12, 2, 7), float32], Tensor[(12, 5, 8), float64], Tensor[(120, 4), float64]) {
  %407 = fn () -> (Tensor[(12, 2, 7), float32], Tensor[(12, 5, 8), float64], Tensor[(120, 4), float64]) {
    %399 = @func_2011() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */;
    %400 = cast(meta[relay.Constant][14] /* ty=Tensor[(120, 4), float64] */, dtype="float64") /* ty=Tensor[(120, 4), float64] */;
    %401 = cast(meta[relay.Constant][14] /* ty=Tensor[(120, 4), float64] */, dtype="float64") /* ty=Tensor[(120, 4), float64] */;
    %402 = reshape(%400, newshape=[12, 5, 8]) /* ty=Tensor[(12, 5, 8), float64] */;
    %403 = reshape(%401, newshape=[12, 5, 8]) /* ty=Tensor[(12, 5, 8), float64] */;
    %404 = @func_133(%402, %403) /* ty=(Tensor[(12, 5, 8), float64],) */;
    %405 = %399.1;
    %406 = %404.0;
    (%405, %406, meta[relay.Constant][14] /* ty=Tensor[(120, 4), float64] */)
  };
  %407() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 5, 8), float64], Tensor[(120, 4), float64]) */
}

def @func_7289() -> Tensor[(12, 2, 7), float32] {
  %409 = fn () -> Tensor[(12, 2, 7), float32] {
    %408 = @func_5800() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(416), uint8], Tensor[(12, 2, 7), float32]) */;
    %408.2
  };
  %409() /* ty=Tensor[(12, 2, 7), float32] */
}

def @func_7000() -> Tensor[(12, 2, 7), bool] {
  %410 = fn () -> Tensor[(12, 2, 7), bool] {
    @func_5722() /* ty=Tensor[(12, 2, 7), bool] */
  };
  %410() /* ty=Tensor[(12, 2, 7), bool] */
}

def @func_4456() -> (Tensor[(12, 2, 7), float32],) {
  %411 = @func_3226() /* ty=Tensor[(12, 2, 7), float32] */;
  (%411,)
}

def @func_3970() -> (Tensor[(12, 2, 7), float32],) {
  @func_3968() /* ty=(Tensor[(12, 2, 7), float32],) */
}

def @func_5042() -> Tensor[(12, 2, 7), float32] {
  @func_5040() /* ty=Tensor[(12, 2, 7), float32] */
}

def @func_8607() -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) {
  %419 = fn () -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) {
    %412 = @func_8178() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */;
    %413 = %412.0;
    %414 = cast(%413, dtype="float32") /* ty=Tensor[(12, 2, 7), float32] */;
    %415 = @func_782() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8], Tensor[(416), uint8]) */;
    %416 = atanh(%414) /* ty=Tensor[(12, 2, 7), float32] */;
    %417 = @func_3984() /* ty=Tensor[(12, 2, 7), float32] */;
    %418 = %415.0;
    (%416, %417, %418)
  };
  %419() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */
}

def @func_6565(%var_6556: Tensor[(12, 2, 7), float32]) -> (Tensor[(12, 2, 7), float64],) {
  %420 = @func_2348() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 5, 8), float64], Tensor[(120, 4), float64]) */;
  %421 = %420.0;
  %422 = cast(%var_6556, dtype="float64") /* ty=Tensor[(12, 2, 7), float64] */;
  %423 = shape_of(%421, dtype="int32") /* ty=Tensor[(3), int32] */;
  %424 = cast(%421, dtype="float64") /* ty=Tensor[(12, 2, 7), float64] */;
  %425 = dyn.reshape(%422, %423, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %426 = floor_divide(%424, %425) /* ty=Tensor[(12, 2, 7), float64] */;
  (%426,)
}

def @func_1705(%var_1703: uint32, %var_1704: Tensor[(1, 4, 9), uint32]) -> (Tensor[(?, 4, 9), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(4, 120), float64], Tensor[(416), float32]) {
  %447 = fn (%var_1668: uint32, %var_1669: Tensor[(1, 4, 9), uint32]) -> (Tensor[(?, 4, 9), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(4, 120), float64], Tensor[(416), float32]) {
    %427 = cast(%var_1668, dtype="uint32") /* ty=uint32 */;
    %428 = cast(%var_1669, dtype="uint32") /* ty=Tensor[(1, 4, 9), uint32] */;
    %429 = add(%427, %428) /* ty=Tensor[(1, 4, 9), uint32] */;
    %430 = cast(%var_1669, dtype="float32") /* ty=Tensor[(1, 4, 9), float32] */;
    %431 = shape_of(%429, dtype="int32") /* ty=Tensor[(3), int32] */;
    %432 = cast(%429, dtype="float32") /* ty=Tensor[(1, 4, 9), float32] */;
    %433 = dyn.reshape(%430, %431, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %434 = floor_mod(%432, %433) /* ty=Tensor[(?, 4, 9), float32] */;
    %435 = cast(%var_1669, dtype="float32") /* ty=Tensor[(1, 4, 9), float32] */;
    %436 = shape_of(%434, dtype="int32") /* ty=Tensor[(3), int32] */;
    %437 = cast(%434, dtype="float32") /* ty=Tensor[(?, 4, 9), float32] */;
    %438 = dyn.reshape(%435, %436, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %439 = cast(meta[relay.Constant][15] /* ty=Tensor[(4, 120), float64] */, dtype="float64") /* ty=Tensor[(4, 120), float64] */;
    %440 = cast(meta[relay.Constant][16] /* ty=Tensor[(416), float32] */, dtype="float32") /* ty=Tensor[(416), float32] */;
    %441 = reshape(%439, newshape=[1, 480]) /* ty=Tensor[(1, 480), float64] */;
    %442 = reshape(%440, newshape=[8, 13, 4]) /* ty=Tensor[(8, 13, 4), float32] */;
    %443 = @func_1001(%441, %442) /* ty=(Tensor[(480), float64], Tensor[(1, 480), float64], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), int32]) */;
    %444 = mod(%437, %438) /* ty=Tensor[(?, 4, 9), float32] */;
    %445 = @func_1381() /* ty=Tensor[(12, 2, 7), float32] */;
    %446 = %443.2;
    (%444, %445, %446, meta[relay.Constant][15] /* ty=Tensor[(4, 120), float64] */, meta[relay.Constant][16] /* ty=Tensor[(416), float32] */)
  };
  %447(%var_1703, %var_1704) /* ty=(Tensor[(?, 4, 9), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(4, 120), float64], Tensor[(416), float32]) */
}

def @func_8110() -> Tensor[(12, 2, 7), float32] {
  %448 = @func_5135() /* ty=(Tensor[(12, 2, 7), float32],) */;
  %448.0
}

def @func_81(%var_79: Tensor[(8, 13, 4), uint8], %var_80: Tensor[(8, 13, 4), uint8]) -> Tensor[(8, 13, 4), uint8] {
  @func_77(%var_79, %var_80) /* ty=Tensor[(8, 13, 4), uint8] */
}

def @func_4176(%var_4174: Tensor[(13, 9, 5), float32]) -> (Tensor[(13, 9, 5), float32], Tensor[(12, 2, 7), float32]) {
  @func_4173(%var_4174) /* ty=(Tensor[(13, 9, 5), float32], Tensor[(12, 2, 7), float32]) */
}

def @func_2164() -> (Tensor[(12, 2, 7), float32], Tensor[(256), float32], Tensor[(15, 8, 12), uint64], Tensor[(1440, 1), uint64], Tensor[(15, 8, 12), uint64], Tensor[(12, 2, 7), float32], Tensor[(4, 104), bool]) {
  %468 = fn () -> (Tensor[(12, 2, 7), float32], Tensor[(256), float32], Tensor[(15, 8, 12), uint64], Tensor[(1440, 1), uint64], Tensor[(15, 8, 12), uint64], Tensor[(12, 2, 7), float32], Tensor[(4, 104), bool]) {
    %449 = @func_1075() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */;
    %450 = cast(meta[relay.Constant][17] /* ty=Tensor[(4, 104), uint8] */, dtype="uint8") /* ty=Tensor[(4, 104), uint8] */;
    %451 = reshape(%450, newshape=[416]) /* ty=Tensor[(416), uint8] */;
    %452 = @func_1482(%451) /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(1, 416), float64], Tensor[(416), uint8], Tensor[(256), float32], Tensor[(4576), int16], Tensor[(4576), bool]) */;
    %453 = cast(meta[relay.Constant][18] /* ty=Tensor[(1440, 1), uint64] */, dtype="uint64") /* ty=Tensor[(1440, 1), uint64] */;
    %454 = reshape(%453, newshape=[1440]) /* ty=Tensor[(1440), uint64] */;
    %455 = @func_1989(%454) /* ty=(Tensor[(256), float32], Tensor[(12, 2, 7), float32], Tensor[(15, 8, 12), uint64], Tensor[(1440), uint64]) */;
    %456 = @func_1612() /* ty=(Tensor[(416), uint8], Tensor[(15, 8, 12), uint64], Tensor[(1440), uint64]) */;
    %457 = @func_1426() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), bool], Tensor[(12, 2, 7), float32]) */;
    %458 = cast(meta[relay.Constant][19] /* ty=Tensor[(4, 104), uint8] */, dtype="bool") /* ty=Tensor[(4, 104), bool] */;
    %459 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(4, 104), uint8] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %460 = cast(meta[relay.Constant][17] /* ty=Tensor[(4, 104), uint8] */, dtype="bool") /* ty=Tensor[(4, 104), bool] */;
    %461 = dyn.reshape(%458, %459, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %462 = %449.2;
    %463 = %452.4;
    %464 = %455.2;
    %465 = %456.1;
    %466 = %457.2;
    %467 = less(%460, %461) /* ty=Tensor[(4, 104), bool] */;
    (%462, %463, %464, meta[relay.Constant][18] /* ty=Tensor[(1440, 1), uint64] */, %465, %466, %467)
  };
  %468() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(256), float32], Tensor[(15, 8, 12), uint64], Tensor[(1440, 1), uint64], Tensor[(15, 8, 12), uint64], Tensor[(12, 2, 7), float32], Tensor[(4, 104), bool]) */
}

def @func_6450() -> (Tensor[(15, 8, 12), uint64],) {
  %470 = fn () -> (Tensor[(15, 8, 12), uint64],) {
    %469 = @func_1943() /* ty=Tensor[(15, 8, 12), uint64] */;
    (%469,)
  };
  %470() /* ty=(Tensor[(15, 8, 12), uint64],) */
}

def @func_2937(%var_2935: Tensor[(8, 13, 4), bool], %var_2936: Tensor[(1440), uint64]) -> (Tensor[(8, 13, 4), bool], Tensor[(12, 2, 7), float32], Tensor[(1440), uint64], Tensor[(1, 16, 14), float32], Tensor[(1, 224), float32]) {
  %491 = fn (%var_2885: Tensor[(8, 13, 4), bool], %var_2905: Tensor[(1440), uint64]) -> (Tensor[(8, 13, 4), bool], Tensor[(12, 2, 7), float32], Tensor[(1440), uint64], Tensor[(1, 16, 14), float32], Tensor[(1, 224), float32]) {
    %471 = @func_1426() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), bool], Tensor[(12, 2, 7), float32]) */;
    %472 = %471.1;
    %473 = cast(%var_2885, dtype="uint32") /* ty=Tensor[(8, 13, 4), uint32] */;
    %474 = shape_of(%472, dtype="int32") /* ty=Tensor[(3), int32] */;
    %475 = cast(%472, dtype="uint32") /* ty=Tensor[(8, 13, 4), uint32] */;
    %476 = dyn.reshape(%473, %474, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %477 = bitwise_and(%475, %476) /* ty=Tensor[(8, 13, 4), uint32] */;
    %478 = cast(%477, dtype="bool") /* ty=Tensor[(8, 13, 4), bool] */;
    %479 = shape_of(%472, dtype="int32") /* ty=Tensor[(3), int32] */;
    %480 = cast(%472, dtype="bool") /* ty=Tensor[(8, 13, 4), bool] */;
    %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %482 = cast(%var_2905, dtype="uint64") /* ty=Tensor[(1440), uint64] */;
    %483 = reshape(%482, newshape=[1440]) /* ty=Tensor[(1440), uint64] */;
    %484 = @func_1989(%483) /* ty=(Tensor[(256), float32], Tensor[(12, 2, 7), float32], Tensor[(15, 8, 12), uint64], Tensor[(1440), uint64]) */;
    %485 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 224), float32] */, dtype="float32") /* ty=Tensor[(1, 224), float32] */;
    %486 = reshape(%485, newshape=[1, 16, 14]) /* ty=Tensor[(1, 16, 14), float32] */;
    %487 = @func_2602(%486) /* ty=(Tensor[(1, 16, 14), float32], Tensor[(1, 16, 14), float64]) */;
    %488 = not_equal(%480, %481) /* ty=Tensor[(8, 13, 4), bool] */;
    %489 = %484.1;
    %490 = %487.0;
    (%488, %489, %var_2905, %490, meta[relay.Constant][20] /* ty=Tensor[(1, 224), float32] */)
  };
  %491(%var_2935, %var_2936) /* ty=(Tensor[(8, 13, 4), bool], Tensor[(12, 2, 7), float32], Tensor[(1440), uint64], Tensor[(1, 16, 14), float32], Tensor[(1, 224), float32]) */
}

def @func_7572() -> (Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), float64], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) {
  @func_7570() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), float64], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */
}

def @func_8363() -> Tensor[(12, 2, 7), float32] {
  %492 = fn () -> Tensor[(12, 2, 7), float32] {
    @func_7433() /* ty=Tensor[(12, 2, 7), float32] */
  };
  %492() /* ty=Tensor[(12, 2, 7), float32] */
}

def @func_8258() -> (Tensor[(12, 2, 7), float32],) {
  @func_8256() /* ty=(Tensor[(12, 2, 7), float32],) */
}

def @func_5802() -> (Tensor[(12, 2, 7), float32], Tensor[(416), uint8], Tensor[(12, 2, 7), float32]) {
  @func_5800() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(416), uint8], Tensor[(12, 2, 7), float32]) */
}

def @func_7038() -> (Tensor[(12, 2, 7), float32],) {
  @func_7036() /* ty=(Tensor[(12, 2, 7), float32],) */
}

def @func_5633() -> Tensor[(12, 2, 7), float32] {
  @func_5631() /* ty=Tensor[(12, 2, 7), float32] */
}

def @func_5822(%var_5814: Tensor[(16, 5, 16), float32]) -> (Tensor[(16, 5, 16), float32],) {
  %493 = cast(%var_5814, dtype="float32") /* ty=Tensor[(16, 5, 16), float32] */;
  %494 = atanh(%493) /* ty=Tensor[(16, 5, 16), float32] */;
  (%494,)
}

def @func_7673() -> Tensor[(8, 10, 13), float64] {
  %496 = fn () -> Tensor[(8, 10, 13), float64] {
    %495 = @func_348() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 10, 13), float64]) */;
    %495.1
  };
  %496() /* ty=Tensor[(8, 10, 13), float64] */
}

def @func_6300() -> (Tensor[(8, 13, 4), uint8], Tensor[(12, 2, 7), float32]) {
  %500 = fn () -> (Tensor[(8, 13, 4), uint8], Tensor[(12, 2, 7), float32]) {
    %497 = @func_5270() /* ty=(Tensor[(8, 13, 4), uint8], Tensor[(12, 2, 7), float32]) */;
    %498 = %497.0;
    %499 = @func_318() /* ty=Tensor[(12, 2, 7), float32] */;
    (%498, %499)
  };
  %500() /* ty=(Tensor[(8, 13, 4), uint8], Tensor[(12, 2, 7), float32]) */
}

def @func_7954(%var_7953: Tensor[(4576), uint8]) -> (Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), float32], Tensor[(16, 16, ?), bool], Tensor[(4576), uint8], Tensor[(256), float32], Tensor[(8, 10, 13), uint32]) {
  %515 = fn (%var_7890: Tensor[(4576), uint8]) -> (Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), float32], Tensor[(16, 16, ?), bool], Tensor[(4576), uint8], Tensor[(256), float32], Tensor[(8, 10, 13), uint32]) {
    %501 = @func_3855() /* ty=(Tensor[(15, 8, 12), uint64], Tensor[(8, 13, 4), uint8], Tensor[(8, 13, 4), uint8], Tensor[(12, 2, 7), float32], Tensor[(4576), uint8]) */;
    %502 = %501.2;
    %503 = cast(%502, dtype="float32") /* ty=Tensor[(8, 13, 4), float32] */;
    %504 = erf(%503) /* ty=Tensor[(8, 13, 4), float32] */;
    %505 = cast(%504, dtype="uint8") /* ty=Tensor[(8, 13, 4), uint8] */;
    %506 = cast(%var_7890, dtype="uint8") /* ty=Tensor[(4576), uint8] */;
    %507 = cast(meta[relay.Constant][21] /* ty=Tensor[(256), float32] */, dtype="float32") /* ty=Tensor[(256), float32] */;
    %508 = reshape(%505, newshape=[1, 416]) /* ty=Tensor[(1, 416), uint8] */;
    %509 = reshape(%506, newshape=[11, 416]) /* ty=Tensor[(11, 416), uint8] */;
    %510 = reshape(%507, newshape=[128, 2]) /* ty=Tensor[(128, 2), float32] */;
    %511 = @func_609(%508, %509, %510) /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 5, 8), float64], Tensor[(11, 416), int8], Tensor[(16, 16, ?), bool], Tensor[(128, 2), float32], Tensor[(12, 5, 8), float64], Tensor[(1, 416), float64], Tensor[(16, 16, ?), bool]) */;
    %512 = @func_3226() /* ty=Tensor[(12, 2, 7), float32] */;
    %513 = %511.7;
    %514 = @func_4717() /* ty=Tensor[(8, 10, 13), uint32] */;
    (%512, %504, %513, %var_7890, meta[relay.Constant][21] /* ty=Tensor[(256), float32] */, %514)
  };
  %515(%var_7953) /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), float32], Tensor[(16, 16, ?), bool], Tensor[(4576), uint8], Tensor[(256), float32], Tensor[(8, 10, 13), uint32]) */
}

def @func_1383() -> Tensor[(12, 2, 7), float32] {
  @func_1381() /* ty=Tensor[(12, 2, 7), float32] */
}

def @func_5504(%var_5502: Tensor[(3, 5, 5), uint8], %var_5503: Tensor[(3, 5, 5), uint8]) -> Tensor[(3, 5, 5), uint8] {
  %520 = fn (%var_5494: Tensor[(3, 5, 5), uint8], %var_5495: Tensor[(3, 5, 5), uint8]) -> Tensor[(3, 5, 5), uint8] {
    %516 = cast(%var_5495, dtype="uint8") /* ty=Tensor[(3, 5, 5), uint8] */;
    %517 = shape_of(%var_5494, dtype="int32") /* ty=Tensor[(3), int32] */;
    %518 = cast(%var_5494, dtype="uint8") /* ty=Tensor[(3, 5, 5), uint8] */;
    %519 = dyn.reshape(%516, %517, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    subtract(%518, %519) /* ty=Tensor[(3, 5, 5), uint8] */
  };
  %520(%var_5502, %var_5503) /* ty=Tensor[(3, 5, 5), uint8] */
}

def @func_4458() -> (Tensor[(12, 2, 7), float32],) {
  @func_4456() /* ty=(Tensor[(12, 2, 7), float32],) */
}

def @func_1031() -> (Tensor[(12, 2, 7), float32],) {
  @func_1029() /* ty=(Tensor[(12, 2, 7), float32],) */
}

def @func_7776(%var_7774: Tensor[(1440), uint64], %var_7775: Tensor[(720), float64]) -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8], Tensor[(1440), uint64], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(8, 10, 13), float64], Tensor[(8, 60), float64], Tensor[(416), float32], Tensor[(720), float64], Tensor[(9, 14, 11), float64], Tensor[(1386), float64]) {
  %546 = fn (%var_7719: Tensor[(1440), uint64], %var_7761: Tensor[(720), float64]) -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8], Tensor[(1440), uint64], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(8, 10, 13), float64], Tensor[(8, 60), float64], Tensor[(416), float32], Tensor[(720), float64], Tensor[(9, 14, 11), float64], Tensor[(1386), float64]) {
    %521 = @func_1553() /* ty=(Tensor[(12, 2, 7), float32],) */;
    %522 = cast(%var_7719, dtype="uint64") /* ty=Tensor[(1440), uint64] */;
    %523 = cast(%var_7719, dtype="uint64") /* ty=Tensor[(1440), uint64] */;
    %524 = reshape(%522, newshape=[15, 8, 12]) /* ty=Tensor[(15, 8, 12), uint64] */;
    %525 = reshape(%523, newshape=[15, 8, 12]) /* ty=Tensor[(15, 8, 12), uint64] */;
    %526 = @func_1325(%524, %525) /* ty=(Tensor[(15, 8, 12), uint64], Tensor[(8, 13, 4), uint8]) */;
    %527 = cast(meta[relay.Constant][22] /* ty=Tensor[(8, 60), float64] */, dtype="float64") /* ty=Tensor[(8, 60), float64] */;
    %528 = %526.1;
    %529 = cast(%528, dtype="float32") /* ty=Tensor[(8, 13, 4), float32] */;
    %530 = reshape(%527, newshape=[120, 4]) /* ty=Tensor[(120, 4), float64] */;
    %531 = reshape(%529, newshape=[416]) /* ty=Tensor[(416), float32] */;
    %532 = @func_1211(%530, %531) /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 10, 13), float64], Tensor[(12, 2, 7), float32], Tensor[(120, 4), float64], Tensor[(416), float32]) */;
    %533 = cast(%var_7761, dtype="float64") /* ty=Tensor[(720), float64] */;
    %534 = reshape(%533, newshape=[8, 6, 15]) /* ty=Tensor[(8, 6, 15), float64] */;
    %535 = @func_2193(%534) /* ty=(Tensor[(8, 6, 15), float64], Tensor[(416), float32], Tensor[(12, 2, 7), float32]) */;
    %536 = cast(meta[relay.Constant][23] /* ty=Tensor[(1386), float64] */, dtype="float64") /* ty=Tensor[(1386), float64] */;
    %537 = reshape(%536, newshape=[9, 14, 11]) /* ty=Tensor[(9, 14, 11), float64] */;
    %538 = @func_7162(%537) /* ty=(Tensor[(9, 14, 11), float64],) */;
    %539 = %521.0;
    %540 = @func_3226() /* ty=Tensor[(12, 2, 7), float32] */;
    %541 = @func_7288() /* ty=Tensor[(12, 2, 7), float32] */;
    %542 = @func_4631() /* ty=Tensor[(12, 2, 7), float32] */;
    %543 = %532.1;
    %544 = %535.1;
    %545 = %538.0;
    (%539, %540, %528, %var_7719, %541, %542, %543, meta[relay.Constant][22] /* ty=Tensor[(8, 60), float64] */, %544, %var_7761, %545, meta[relay.Constant][23] /* ty=Tensor[(1386), float64] */)
  };
  %546(%var_7774, %var_7775) /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8], Tensor[(1440), uint64], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(8, 10, 13), float64], Tensor[(8, 60), float64], Tensor[(416), float32], Tensor[(720), float64], Tensor[(9, 14, 11), float64], Tensor[(1386), float64]) */
}

def @func_1029() -> (Tensor[(12, 2, 7), float32],) {
  %547 = @func_318() /* ty=Tensor[(12, 2, 7), float32] */;
  (%547,)
}

def @func_4173(%var_4151: Tensor[(13, 9, 5), float32]) -> (Tensor[(13, 9, 5), float32], Tensor[(12, 2, 7), float32]) {
  %548 = cast(%var_4151, dtype="float32") /* ty=Tensor[(13, 9, 5), float32] */;
  %549 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(13, 9, 5), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %550 = cast(meta[relay.Constant][24] /* ty=Tensor[(13, 9, 5), float32] */, dtype="float32") /* ty=Tensor[(13, 9, 5), float32] */;
  %551 = dyn.reshape(%548, %549, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %552 = @func_2988() /* ty=(Tensor[(15, 8, 12), uint64], Tensor[(12, 2, 7), float32]) */;
  %553 = floor_mod(%550, %551) /* ty=Tensor[(13, 9, 5), float32] */;
  %554 = %552.1;
  (%553, %554)
}

def @func_1912() -> (Tensor[(256), float32], Tensor[(16, 16), float32], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint64], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8]) {
  %578 = fn () -> (Tensor[(256), float32], Tensor[(16, 16), float32], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint64], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8]) {
    %555 = cast(meta[relay.Constant][25] /* ty=Tensor[(16, 16), float32] */, dtype="float32") /* ty=Tensor[(16, 16), float32] */;
    %556 = reshape(%555, newshape=[256]) /* ty=Tensor[(256), float32] */;
    %557 = @func_667(%556) /* ty=(Tensor[(12, 2, 7), float32], Tensor[(16, 16, ?), bool], Tensor[(256), float32]) */;
    %558 = @func_800() /* ty=(Tensor[(8, 13, 4), uint8],) */;
    %559 = %558.0;
    %560 = cast(%559, dtype="float64") /* ty=Tensor[(8, 13, 4), float64] */;
    %561 = sigmoid(%560) /* ty=Tensor[(8, 13, 4), float64] */;
    %562 = cast(%559, dtype="uint64") /* ty=Tensor[(8, 13, 4), uint64] */;
    %563 = shape_of(%561, dtype="int32") /* ty=Tensor[(3), int32] */;
    %564 = cast(%561, dtype="uint64") /* ty=Tensor[(8, 13, 4), uint64] */;
    %565 = dyn.reshape(%562, %563, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %566 = cast(%559, dtype="uint8") /* ty=Tensor[(8, 13, 4), uint8] */;
    %567 = reshape(%566, newshape=[416]) /* ty=Tensor[(416), uint8] */;
    %568 = @func_1482(%567) /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(1, 416), float64], Tensor[(416), uint8], Tensor[(256), float32], Tensor[(4576), int16], Tensor[(4576), bool]) */;
    %569 = cast(%561, dtype="uint8") /* ty=Tensor[(8, 13, 4), uint8] */;
    %570 = cast(%561, dtype="uint8") /* ty=Tensor[(8, 13, 4), uint8] */;
    %571 = reshape(%569, newshape=[8, 13, 4]) /* ty=Tensor[(8, 13, 4), uint8] */;
    %572 = reshape(%570, newshape=[8, 13, 4]) /* ty=Tensor[(8, 13, 4), uint8] */;
    %573 = %557.2;
    %574 = @func_1381() /* ty=Tensor[(12, 2, 7), float32] */;
    %575 = logical_xor(%564, %565) /* ty=Tensor[(8, 13, 4), uint64] */;
    %576 = %568.0;
    %577 = @func_77(%571, %572) /* ty=Tensor[(8, 13, 4), uint8] */;
    (%573, meta[relay.Constant][25] /* ty=Tensor[(16, 16), float32] */, %574, %575, %576, %577)
  };
  %578() /* ty=(Tensor[(256), float32], Tensor[(16, 16), float32], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint64], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8]) */
}

def @func_4718() -> Tensor[(8, 10, 13), uint32] {
  %587 = fn () -> Tensor[(8, 10, 13), uint32] {
    %579 = @func_348() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 10, 13), float64]) */;
    %580 = %579.1;
    %581 = cast(%580, dtype="float64") /* ty=Tensor[(8, 10, 13), float64] */;
    %582 = acos(%581) /* ty=Tensor[(8, 10, 13), float64] */;
    %583 = cast(%580, dtype="uint32") /* ty=Tensor[(8, 10, 13), uint32] */;
    %584 = shape_of(%582, dtype="int32") /* ty=Tensor[(3), int32] */;
    %585 = cast(%582, dtype="uint32") /* ty=Tensor[(8, 10, 13), uint32] */;
    %586 = dyn.reshape(%583, %584, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    bitwise_or(%585, %586) /* ty=Tensor[(8, 10, 13), uint32] */
  };
  %587() /* ty=Tensor[(8, 10, 13), uint32] */
}

def @func_4857(%var_4856: Tensor[(12, 2, 7), float32]) -> (Tensor[(12, 2, 7), bool], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(1440), uint64], Tensor[(8, 13, 4), uint8]) {
  %601 = fn (%var_4823: Tensor[(12, 2, 7), float32]) -> (Tensor[(12, 2, 7), bool], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(1440), uint64], Tensor[(8, 13, 4), uint8]) {
    %588 = @func_3515() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */;
    %589 = %588.1;
    %590 = cast(%var_4823, dtype="bool") /* ty=Tensor[(12, 2, 7), bool] */;
    %591 = shape_of(%589, dtype="int32") /* ty=Tensor[(3), int32] */;
    %592 = cast(%589, dtype="bool") /* ty=Tensor[(12, 2, 7), bool] */;
    %593 = dyn.reshape(%590, %591, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %594 = cast(meta[relay.Constant][26] /* ty=Tensor[(1440), uint64] */, dtype="uint64") /* ty=Tensor[(1440), uint64] */;
    %595 = reshape(%594, newshape=[1440]) /* ty=Tensor[(1440), uint64] */;
    %596 = @func_1989(%595) /* ty=(Tensor[(256), float32], Tensor[(12, 2, 7), float32], Tensor[(15, 8, 12), uint64], Tensor[(1440), uint64]) */;
    %597 = equal(%592, %593) /* ty=Tensor[(12, 2, 7), bool] */;
    %598 = @func_3108() /* ty=Tensor[(12, 2, 7), float32] */;
    %599 = %596.1;
    %600 = @func_2623() /* ty=Tensor[(8, 13, 4), uint8] */;
    (%597, %598, %599, meta[relay.Constant][26] /* ty=Tensor[(1440), uint64] */, %600)
  };
  %601(%var_4856) /* ty=(Tensor[(12, 2, 7), bool], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(1440), uint64], Tensor[(8, 13, 4), uint8]) */
}

def @func_1215(%var_1213: Tensor[(120, 4), float64], %var_1214: Tensor[(416), float32]) -> (Tensor[(12, 2, 7), float32], Tensor[(8, 10, 13), float64], Tensor[(12, 2, 7), float32], Tensor[(120, 4), float64], Tensor[(416), float32]) {
  @func_1211(%var_1213, %var_1214) /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 10, 13), float64], Tensor[(12, 2, 7), float32], Tensor[(120, 4), float64], Tensor[(416), float32]) */
}

def @func_8220() -> (Tensor[(8, 13, 4), uint8], Tensor[(8, 10, 13), float64]) {
  %602 = @func_3390() /* ty=Tensor[(8, 13, 4), uint8] */;
  %603 = @func_7672() /* ty=Tensor[(8, 10, 13), float64] */;
  (%602, %603)
}

def @func_5135() -> (Tensor[(12, 2, 7), float32],) {
  %604 = @func_3108() /* ty=Tensor[(12, 2, 7), float32] */;
  (%604,)
}

def @func_6847(%var_6828: Tensor[(168), float32]) -> (Tensor[(8, 10, 13), bool], Tensor[(8, 10, 13), float32], Tensor[(12, 2, 7), bool], Tensor[(168), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) {
  %605 = @func_348() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 10, 13), float64]) */;
  %606 = %605.1;
  %607 = cast(meta[relay.Constant][27] /* ty=Tensor[(8, 10, 13), float64] */, dtype="bool") /* ty=Tensor[(8, 10, 13), bool] */;
  %608 = shape_of(%606, dtype="int32") /* ty=Tensor[(3), int32] */;
  %609 = cast(%606, dtype="bool") /* ty=Tensor[(8, 10, 13), bool] */;
  %610 = dyn.reshape(%607, %608, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %611 = cast(meta[relay.Constant][27] /* ty=Tensor[(8, 10, 13), float64] */, dtype="float32") /* ty=Tensor[(8, 10, 13), float32] */;
  %612 = cast(%var_6828, dtype="float32") /* ty=Tensor[(168), float32] */;
  %613 = reshape(%612, newshape=[12, 2, 7]) /* ty=Tensor[(12, 2, 7), float32] */;
  %614 = @func_4855(%613) /* ty=(Tensor[(12, 2, 7), bool], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(1440), uint64], Tensor[(8, 13, 4), uint8]) */;
  %615 = not_equal(%609, %610) /* ty=Tensor[(8, 10, 13), bool] */;
  %616 = sqrt(%611) /* ty=Tensor[(8, 10, 13), float32] */;
  %617 = %614.0;
  %618 = @func_5631() /* ty=Tensor[(12, 2, 7), float32] */;
  %619 = @func_4253() /* ty=Tensor[(12, 2, 7), float32] */;
  (%615, %616, %617, %var_6828, %618, %619)
}

def @func_5068(%var_5066: Tensor[(3, 4, 7), int32], %var_5067: Tensor[(3, 4, 7), int32]) -> (Tensor[(3, 4, 7), int32], Tensor[(12, 2, 7), float32], Tensor[(3, 4, 7), float32]) {
  %631 = fn (%var_5050: Tensor[(3, 4, 7), int32], %var_5051: Tensor[(3, 4, 7), int32]) -> (Tensor[(3, 4, 7), int32], Tensor[(12, 2, 7), float32], Tensor[(3, 4, 7), float32]) {
    %620 = cast(%var_5051, dtype="int32") /* ty=Tensor[(3, 4, 7), int32] */;
    %621 = shape_of(%var_5050, dtype="int32") /* ty=Tensor[(3), int32] */;
    %622 = cast(%var_5050, dtype="int32") /* ty=Tensor[(3, 4, 7), int32] */;
    %623 = dyn.reshape(%620, %621, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %624 = cast(%var_5051, dtype="float32") /* ty=Tensor[(3, 4, 7), float32] */;
    %625 = shape_of(%var_5050, dtype="int32") /* ty=Tensor[(3), int32] */;
    %626 = cast(%var_5050, dtype="float32") /* ty=Tensor[(3, 4, 7), float32] */;
    %627 = dyn.reshape(%624, %625, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %628 = multiply(%622, %623) /* ty=Tensor[(3, 4, 7), int32] */;
    %629 = @func_4253() /* ty=Tensor[(12, 2, 7), float32] */;
    %630 = power(%626, %627) /* ty=Tensor[(3, 4, 7), float32] */;
    (%628, %629, %630)
  };
  %631(%var_5066, %var_5067) /* ty=(Tensor[(3, 4, 7), int32], Tensor[(12, 2, 7), float32], Tensor[(3, 4, 7), float32]) */
}

def @func_667(%var_665: Tensor[(256), float32]) -> (Tensor[(12, 2, 7), float32], Tensor[(16, 16, ?), bool], Tensor[(256), float32]) {
  %632 = cast(%var_665, dtype="float32") /* ty=Tensor[(256), float32] */;
  %633 = reshape(%632, newshape=[16, 16, 1]) /* ty=Tensor[(16, 16, 1), float32] */;
  %634 = @func_318() /* ty=Tensor[(12, 2, 7), float32] */;
  %635 = @func_517(%633) /* ty=Tensor[(16, 16, ?), bool] */;
  (%634, %635, %var_665)
}

def @func_6737() -> Tensor[(8, 13, 4), float64] {
  %639 = fn () -> Tensor[(8, 13, 4), float64] {
    %636 = @func_5391() /* ty=(Tensor[(8, 13, 4), float32],) */;
    %637 = %636.0;
    %638 = cast(%637, dtype="float64") /* ty=Tensor[(8, 13, 4), float64] */;
    atanh(%638) /* ty=Tensor[(8, 13, 4), float64] */
  };
  %639() /* ty=Tensor[(8, 13, 4), float64] */
}

def @func_2761() -> Tensor[(12, 2, 7), float32] {
  @func_2759() /* ty=Tensor[(12, 2, 7), float32] */
}

def @func_8281() -> Tensor[(15, 8, 12), uint64] {
  %640 = fn () -> Tensor[(15, 8, 12), uint64] {
    @func_1943() /* ty=Tensor[(15, 8, 12), uint64] */
  };
  %640() /* ty=Tensor[(15, 8, 12), uint64] */
}

def @func_7036() -> (Tensor[(12, 2, 7), float32],) {
  %641 = @func_3709() /* ty=(Tensor[(12, 2, 7), float32],) */;
  %642 = %641.0;
  (%642,)
}

def @func_8517(%var_8515: Tensor[(8, 13, 4), float32]) -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), float32], Tensor[(8, 13, 4), uint32]) {
  @func_8514(%var_8515) /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), float32], Tensor[(8, 13, 4), uint32]) */
}

def @func_5270() -> (Tensor[(8, 13, 4), uint8], Tensor[(12, 2, 7), float32]) {
  %643 = @func_2454() /* ty=(Tensor[(12, 2, 7), float32],) */;
  %644 = @func_2623() /* ty=Tensor[(8, 13, 4), uint8] */;
  %645 = %643.0;
  (%644, %645)
}

def @func_8248() -> Tensor[(12, 2, 7), float32] {
  @func_8246() /* ty=Tensor[(12, 2, 7), float32] */
}

def @func_1325(%var_1245: Tensor[(15, 8, 12), uint64], %var_1246: Tensor[(15, 8, 12), uint64]) -> (Tensor[(15, 8, 12), uint64], Tensor[(8, 13, 4), uint8]) {
  %646 = cast(%var_1246, dtype="uint64") /* ty=Tensor[(15, 8, 12), uint64] */;
  %647 = shape_of(%var_1245, dtype="int32") /* ty=Tensor[(3), int32] */;
  %648 = cast(%var_1245, dtype="uint64") /* ty=Tensor[(15, 8, 12), uint64] */;
  %649 = dyn.reshape(%646, %647, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %650 = @func_782() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8], Tensor[(416), uint8]) */;
  %651 = bitwise_xor(%648, %649) /* ty=Tensor[(15, 8, 12), uint64] */;
  %652 = %650.1;
  (%651, %652)
}

def @func_4632() -> Tensor[(12, 2, 7), float32] {
  %653 = fn () -> Tensor[(12, 2, 7), float32] {
    @func_4253() /* ty=Tensor[(12, 2, 7), float32] */
  };
  %653() /* ty=Tensor[(12, 2, 7), float32] */
}

def @func_2013() -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) {
  @func_2011() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */
}

def @func_3968() -> (Tensor[(12, 2, 7), float32],) {
  %654 = @func_3515() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */;
  %655 = %654.0;
  (%655,)
}

def @func_5825(%var_5823: Tensor[(16, 5, 16), float32]) -> (Tensor[(16, 5, 16), float32],) {
  @func_5822(%var_5823) /* ty=(Tensor[(16, 5, 16), float32],) */
}

def @func_2392(%var_2391: Tensor[(416), uint8]) -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(416), uint8], Tensor[(4576, 1), uint8]) {
  %664 = fn (%var_2379: Tensor[(416), uint8]) -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(416), uint8], Tensor[(4576, 1), uint8]) {
    %656 = @func_348() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 10, 13), float64]) */;
    %657 = cast(%var_2379, dtype="uint8") /* ty=Tensor[(416), uint8] */;
    %658 = cast(meta[relay.Constant][28] /* ty=Tensor[(4576, 1), uint8] */, dtype="uint8") /* ty=Tensor[(4576, 1), uint8] */;
    %659 = reshape(%657, newshape=[416]) /* ty=Tensor[(416), uint8] */;
    %660 = reshape(%658, newshape=[4576]) /* ty=Tensor[(4576), uint8] */;
    %661 = @func_2254(%659, %660) /* ty=(Tensor[(12, 2, 7), float32], Tensor[(1440), uint64], Tensor[(416), uint8], Tensor[(4576), uint8], Tensor[(256), float32], Tensor[(12, 2, 7), float32], Tensor[(128, 2), bool]) */;
    %662 = %656.0;
    %663 = %661.5;
    (%662, %663, %var_2379, meta[relay.Constant][28] /* ty=Tensor[(4576, 1), uint8] */)
  };
  %664(%var_2391) /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(416), uint8], Tensor[(4576, 1), uint8]) */
}

def @func_6568(%var_6566: Tensor[(12, 2, 7), float32]) -> (Tensor[(12, 2, 7), float64],) {
  @func_6565(%var_6566) /* ty=(Tensor[(12, 2, 7), float64],) */
}

def @func_783() -> (Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8], Tensor[(416), uint8]) {
  %677 = fn () -> (Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8], Tensor[(416), uint8]) {
    %665 = @func_318() /* ty=Tensor[(12, 2, 7), float32] */;
    %666 = cast(%665, dtype="float32") /* ty=Tensor[(12, 2, 7), float32] */;
    %667 = sinh(%666) /* ty=Tensor[(12, 2, 7), float32] */;
    %668 = cast(%667, dtype="float64") /* ty=Tensor[(12, 2, 7), float64] */;
    %669 = erf(%668) /* ty=Tensor[(12, 2, 7), float64] */;
    %670 = cast(%669, dtype="float32") /* ty=Tensor[(12, 2, 7), float32] */;
    %671 = cast(meta[relay.Constant][29] /* ty=Tensor[(416), uint8] */, dtype="uint8") /* ty=Tensor[(416), uint8] */;
    %672 = cast(meta[relay.Constant][29] /* ty=Tensor[(416), uint8] */, dtype="uint8") /* ty=Tensor[(416), uint8] */;
    %673 = reshape(%671, newshape=[8, 13, 4]) /* ty=Tensor[(8, 13, 4), uint8] */;
    %674 = reshape(%672, newshape=[8, 13, 4]) /* ty=Tensor[(8, 13, 4), uint8] */;
    %675 = exp(%670) /* ty=Tensor[(12, 2, 7), float32] */;
    %676 = @func_77(%673, %674) /* ty=Tensor[(8, 13, 4), uint8] */;
    (%675, %676, meta[relay.Constant][29] /* ty=Tensor[(416), uint8] */)
  };
  %677() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8], Tensor[(416), uint8]) */
}

def @func_3240() -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) {
  %678 = @func_2348() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 5, 8), float64], Tensor[(120, 4), float64]) */;
  %679 = @func_1658() /* ty=Tensor[(12, 2, 7), float32] */;
  %680 = %678.0;
  (%679, %680)
}

def @func_2759() -> Tensor[(12, 2, 7), float32] {
  @func_1381() /* ty=Tensor[(12, 2, 7), float32] */
}

def @func_7111() -> Tensor[(12, 2, 7), float32] {
  @func_7109() /* ty=Tensor[(12, 2, 7), float32] */
}

def @func_2456() -> (Tensor[(12, 2, 7), float32],) {
  @func_2454() /* ty=(Tensor[(12, 2, 7), float32],) */
}

def @func_1613() -> (Tensor[(416), uint8], Tensor[(15, 8, 12), uint64], Tensor[(1440), uint64]) {
  %689 = fn () -> (Tensor[(416), uint8], Tensor[(15, 8, 12), uint64], Tensor[(1440), uint64]) {
    %681 = @func_782() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8], Tensor[(416), uint8]) */;
    %682 = cast(meta[relay.Constant][30] /* ty=Tensor[(1440), uint64] */, dtype="uint64") /* ty=Tensor[(1440), uint64] */;
    %683 = cast(meta[relay.Constant][30] /* ty=Tensor[(1440), uint64] */, dtype="uint64") /* ty=Tensor[(1440), uint64] */;
    %684 = reshape(%682, newshape=[15, 8, 12]) /* ty=Tensor[(15, 8, 12), uint64] */;
    %685 = reshape(%683, newshape=[15, 8, 12]) /* ty=Tensor[(15, 8, 12), uint64] */;
    %686 = @func_1325(%684, %685) /* ty=(Tensor[(15, 8, 12), uint64], Tensor[(8, 13, 4), uint8]) */;
    %687 = %681.2;
    %688 = %686.0;
    (%687, %688, meta[relay.Constant][30] /* ty=Tensor[(1440), uint64] */)
  };
  %689() /* ty=(Tensor[(416), uint8], Tensor[(15, 8, 12), uint64], Tensor[(1440), uint64]) */
}

def @func_6624(%var_6613: Tensor[(1440), uint64]) -> (Tensor[(12, 5, 8), float64], Tensor[(15, 8, 12), bool], Tensor[(1440), uint64], Tensor[(12, 2, 7), float32]) {
  %690 = @func_2348() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 5, 8), float64], Tensor[(120, 4), float64]) */;
  %691 = %690.1;
  %692 = cast(%691, dtype="float64") /* ty=Tensor[(12, 5, 8), float64] */;
  %693 = cast(%var_6613, dtype="uint64") /* ty=Tensor[(1440), uint64] */;
  %694 = reshape(%693, newshape=[15, 8, 12]) /* ty=Tensor[(15, 8, 12), uint64] */;
  %695 = @func_3347(%694) /* ty=(Tensor[(15, 8, 12), bool],) */;
  %696 = @func_2988() /* ty=(Tensor[(15, 8, 12), uint64], Tensor[(12, 2, 7), float32]) */;
  %697 = sinh(%692) /* ty=Tensor[(12, 5, 8), float64] */;
  %698 = %695.0;
  %699 = %696.1;
  (%697, %698, %var_6613, %699)
}

def @func_8522() -> Tensor[(12, 2, 7), float32] {
  %700 = fn () -> Tensor[(12, 2, 7), float32] {
    @func_3984() /* ty=Tensor[(12, 2, 7), float32] */
  };
  %700() /* ty=Tensor[(12, 2, 7), float32] */
}

def @func_3326() -> Tensor[(12, 2, 7), float32] {
  %702 = fn () -> Tensor[(12, 2, 7), float32] {
    %701 = @func_1837() /* ty=(Tensor[(12, 5, 7), float32], Tensor[(12, 5, 7), float32], Tensor[(12, 2, 7), float32]) */;
    %701.2
  };
  %702() /* ty=Tensor[(12, 2, 7), float32] */
}

def @func_1484(%var_1483: Tensor[(416), uint8]) -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(1, 416), float64], Tensor[(416), uint8], Tensor[(256), float32], Tensor[(4576), int16], Tensor[(4576), bool]) {
  %731 = fn (%var_1451: Tensor[(416), uint8]) -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(1, 416), float64], Tensor[(416), uint8], Tensor[(256), float32], Tensor[(4576), int16], Tensor[(4576), bool]) {
    %703 = @func_1029() /* ty=(Tensor[(12, 2, 7), float32],) */;
    %704 = cast(%var_1451, dtype="uint8") /* ty=Tensor[(416), uint8] */;
    %705 = cast(meta[relay.Constant][31] /* ty=Tensor[(4576), uint8] */, dtype="uint8") /* ty=Tensor[(4576), uint8] */;
    %706 = cast(meta[relay.Constant][32] /* ty=Tensor[(256), float32] */, dtype="float32") /* ty=Tensor[(256), float32] */;
    %707 = reshape(%704, newshape=[1, 416]) /* ty=Tensor[(1, 416), uint8] */;
    %708 = reshape(%705, newshape=[11, 416]) /* ty=Tensor[(11, 416), uint8] */;
    %709 = reshape(%706, newshape=[128, 2]) /* ty=Tensor[(128, 2), float32] */;
    %710 = @func_609(%707, %708, %709) /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 5, 8), float64], Tensor[(11, 416), int8], Tensor[(16, 16, ?), bool], Tensor[(128, 2), float32], Tensor[(12, 5, 8), float64], Tensor[(1, 416), float64], Tensor[(16, 16, ?), bool]) */;
    %711 = cast(meta[relay.Constant][31] /* ty=Tensor[(4576), uint8] */, dtype="float32") /* ty=Tensor[(4576), float32] */;
    %712 = cosh(%711) /* ty=Tensor[(4576), float32] */;
    %713 = cast(meta[relay.Constant][33] /* ty=Tensor[(4576), float32] */, dtype="bool") /* ty=Tensor[(4576), bool] */;
    %714 = shape_of(%712, dtype="int32") /* ty=Tensor[(1), int32] */;
    %715 = cast(%712, dtype="bool") /* ty=Tensor[(4576), bool] */;
    %716 = dyn.reshape(%713, %714, newshape=[]) /* ty=Tensor[(?), bool] */;
    %717 = less_equal(%715, %716) /* ty=Tensor[(4576), bool] */;
    %718 = cast(%717, dtype="int16") /* ty=Tensor[(4576), int16] */;
    %719 = shape_of(%712, dtype="int32") /* ty=Tensor[(1), int32] */;
    %720 = cast(%712, dtype="int16") /* ty=Tensor[(4576), int16] */;
    %721 = dyn.reshape(%718, %719, newshape=[]) /* ty=Tensor[(?), int16] */;
    %722 = cast(meta[relay.Constant][31] /* ty=Tensor[(4576), uint8] */, dtype="bool") /* ty=Tensor[(4576), bool] */;
    %723 = shape_of(%712, dtype="int32") /* ty=Tensor[(1), int32] */;
    %724 = cast(%712, dtype="bool") /* ty=Tensor[(4576), bool] */;
    %725 = dyn.reshape(%722, %723, newshape=[]) /* ty=Tensor[(?), bool] */;
    %726 = %703.0;
    %727 = @func_318() /* ty=Tensor[(12, 2, 7), float32] */;
    %728 = %710.6;
    %729 = right_shift(%720, %721) /* ty=Tensor[(4576), int16] */;
    %730 = equal(%724, %725) /* ty=Tensor[(4576), bool] */;
    (%726, %727, %728, %var_1451, meta[relay.Constant][32] /* ty=Tensor[(256), float32] */, %729, %730)
  };
  %731(%var_1483) /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(1, 416), float64], Tensor[(416), uint8], Tensor[(256), float32], Tensor[(4576), int16], Tensor[(4576), bool]) */
}

def @func_4427() -> (Tensor[(12, 2, 7), float32], Tensor[(1, 16, 14), float32], Tensor[(224), float32]) {
  %737 = fn () -> (Tensor[(12, 2, 7), float32], Tensor[(1, 16, 14), float32], Tensor[(224), float32]) {
    %732 = cast(meta[relay.Constant][34] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
    %733 = reshape(%732, newshape=[1, 16, 14]) /* ty=Tensor[(1, 16, 14), float32] */;
    %734 = @func_2602(%733) /* ty=(Tensor[(1, 16, 14), float32], Tensor[(1, 16, 14), float64]) */;
    %735 = @func_3226() /* ty=Tensor[(12, 2, 7), float32] */;
    %736 = %734.0;
    (%735, %736, meta[relay.Constant][34] /* ty=Tensor[(224), float32] */)
  };
  %737() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(1, 16, 14), float32], Tensor[(224), float32]) */
}

def @func_7646() -> (Tensor[(8, 10, 13), float64], Tensor[(8, 13, 4), float32]) {
  %746 = fn () -> (Tensor[(8, 10, 13), float64], Tensor[(8, 13, 4), float32]) {
    %738 = @func_348() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 10, 13), float64]) */;
    %739 = @func_2623() /* ty=Tensor[(8, 13, 4), uint8] */;
    %740 = cast(meta[relay.Constant][35] /* ty=Tensor[(8, 13, 4), uint8] */, dtype="float32") /* ty=Tensor[(8, 13, 4), float32] */;
    %741 = shape_of(%739, dtype="int32") /* ty=Tensor[(3), int32] */;
    %742 = cast(%739, dtype="float32") /* ty=Tensor[(8, 13, 4), float32] */;
    %743 = dyn.reshape(%740, %741, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %744 = %738.1;
    %745 = divide(%742, %743) /* ty=Tensor[(8, 13, 4), float32] */;
    (%744, %745)
  };
  %746() /* ty=(Tensor[(8, 10, 13), float64], Tensor[(8, 13, 4), float32]) */
}

def @func_1838() -> (Tensor[(12, 5, 7), float32], Tensor[(12, 5, 7), float32], Tensor[(12, 2, 7), float32]) {
  %752 = fn () -> (Tensor[(12, 5, 7), float32], Tensor[(12, 5, 7), float32], Tensor[(12, 2, 7), float32]) {
    %747 = cast(meta[relay.Constant][36] /* ty=Tensor[(12, 5, 7), float32] */, dtype="float32") /* ty=Tensor[(12, 5, 7), float32] */;
    %748 = cast(meta[relay.Constant][36] /* ty=Tensor[(12, 5, 7), float32] */, dtype="float32") /* ty=Tensor[(12, 5, 7), float32] */;
    %749 = log(%747) /* ty=Tensor[(12, 5, 7), float32] */;
    %750 = atanh(%748) /* ty=Tensor[(12, 5, 7), float32] */;
    %751 = @func_318() /* ty=Tensor[(12, 2, 7), float32] */;
    (%749, %750, %751)
  };
  %752() /* ty=(Tensor[(12, 5, 7), float32], Tensor[(12, 5, 7), float32], Tensor[(12, 2, 7), float32]) */
}

def @func_1991(%var_1990: Tensor[(1440), uint64]) -> (Tensor[(256), float32], Tensor[(12, 2, 7), float32], Tensor[(15, 8, 12), uint64], Tensor[(1440), uint64]) {
  %762 = fn (%var_1983: Tensor[(1440), uint64]) -> (Tensor[(256), float32], Tensor[(12, 2, 7), float32], Tensor[(15, 8, 12), uint64], Tensor[(1440), uint64]) {
    %753 = @func_1911() /* ty=(Tensor[(256), float32], Tensor[(16, 16), float32], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint64], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8]) */;
    %754 = cast(%var_1983, dtype="uint64") /* ty=Tensor[(1440), uint64] */;
    %755 = cast(%var_1983, dtype="uint64") /* ty=Tensor[(1440), uint64] */;
    %756 = reshape(%754, newshape=[15, 8, 12]) /* ty=Tensor[(15, 8, 12), uint64] */;
    %757 = reshape(%755, newshape=[15, 8, 12]) /* ty=Tensor[(15, 8, 12), uint64] */;
    %758 = @func_1325(%756, %757) /* ty=(Tensor[(15, 8, 12), uint64], Tensor[(8, 13, 4), uint8]) */;
    %759 = %753.0;
    %760 = @func_318() /* ty=Tensor[(12, 2, 7), float32] */;
    %761 = %758.0;
    (%759, %760, %761, %var_1983)
  };
  %762(%var_1990) /* ty=(Tensor[(256), float32], Tensor[(12, 2, 7), float32], Tensor[(15, 8, 12), uint64], Tensor[(1440), uint64]) */
}

def @func_1004(%var_1002: Tensor[(1, 480), float64], %var_1003: Tensor[(8, 13, 4), float32]) -> (Tensor[(480), float64], Tensor[(1, 480), float64], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), int32]) {
  %780 = fn (%var_958: Tensor[(1, 480), float64], %var_986: Tensor[(8, 13, 4), float32]) -> (Tensor[(480), float64], Tensor[(1, 480), float64], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), int32]) {
    %763 = cast(%var_958, dtype="float64") /* ty=Tensor[(1, 480), float64] */;
    %764 = reshape(%763, newshape=[480]) /* ty=Tensor[(480), float64] */;
    %765 = @func_358(%764) /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 5, 8), float64], Tensor[(480), float64]) */;
    %766 = @func_782() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8], Tensor[(416), uint8]) */;
    %767 = @func_800() /* ty=(Tensor[(8, 13, 4), uint8],) */;
    %768 = %767.0;
    %769 = cast(%768, dtype="float64") /* ty=Tensor[(8, 13, 4), float64] */;
    %770 = exp(%769) /* ty=Tensor[(8, 13, 4), float64] */;
    %771 = cast(%770, dtype="float32") /* ty=Tensor[(8, 13, 4), float32] */;
    %772 = log(%771) /* ty=Tensor[(8, 13, 4), float32] */;
    %773 = cast(%var_986, dtype="int32") /* ty=Tensor[(8, 13, 4), int32] */;
    %774 = shape_of(%772, dtype="int32") /* ty=Tensor[(3), int32] */;
    %775 = cast(%772, dtype="int32") /* ty=Tensor[(8, 13, 4), int32] */;
    %776 = dyn.reshape(%773, %774, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %777 = %765.3;
    %778 = %766.0;
    %779 = subtract(%775, %776) /* ty=Tensor[(8, 13, 4), int32] */;
    (%777, %var_958, %778, %779)
  };
  %780(%var_1002, %var_1003) /* ty=(Tensor[(480), float64], Tensor[(1, 480), float64], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), int32]) */
}

def @func_2258(%var_2256: Tensor[(416), uint8], %var_2257: Tensor[(4576), uint8]) -> (Tensor[(12, 2, 7), float32], Tensor[(1440), uint64], Tensor[(416), uint8], Tensor[(4576), uint8], Tensor[(256), float32], Tensor[(12, 2, 7), float32], Tensor[(128, 2), bool]) {
  @func_2254(%var_2256, %var_2257) /* ty=(Tensor[(12, 2, 7), float32], Tensor[(1440), uint64], Tensor[(416), uint8], Tensor[(4576), uint8], Tensor[(256), float32], Tensor[(12, 2, 7), float32], Tensor[(128, 2), bool]) */
}

def @func_6627(%var_6625: Tensor[(1440), uint64]) -> (Tensor[(12, 5, 8), float64], Tensor[(15, 8, 12), bool], Tensor[(1440), uint64], Tensor[(12, 2, 7), float32]) {
  @func_6624(%var_6625) /* ty=(Tensor[(12, 5, 8), float64], Tensor[(15, 8, 12), bool], Tensor[(1440), uint64], Tensor[(12, 2, 7), float32]) */
}

def @func_349() -> (Tensor[(12, 2, 7), float32], Tensor[(8, 10, 13), float64]) {
  %786 = fn () -> (Tensor[(12, 2, 7), float32], Tensor[(8, 10, 13), float64]) {
    %781 = cast(meta[relay.Constant][37] /* ty=Tensor[(8, 10, 13), float32] */, dtype="float32") /* ty=Tensor[(8, 10, 13), float32] */;
    %782 = cosh(%781) /* ty=Tensor[(8, 10, 13), float32] */;
    %783 = cast(%782, dtype="float64") /* ty=Tensor[(8, 10, 13), float64] */;
    %784 = @func_318() /* ty=Tensor[(12, 2, 7), float32] */;
    %785 = sin(%783) /* ty=Tensor[(8, 10, 13), float64] */;
    (%784, %785)
  };
  %786() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 10, 13), float64]) */
}

def @func_1554() -> (Tensor[(12, 2, 7), float32],) {
  %789 = fn () -> (Tensor[(12, 2, 7), float32],) {
    %787 = @func_1029() /* ty=(Tensor[(12, 2, 7), float32],) */;
    %788 = %787.0;
    (%788,)
  };
  %789() /* ty=(Tensor[(12, 2, 7), float32],) */
}

def @func_2552(%var_2536: Tensor[(8, 13, 4), bool]) -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), bool]) {
  %790 = @func_2348() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 5, 8), float64], Tensor[(120, 4), float64]) */;
  %791 = @func_2011() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */;
  %792 = @func_1426() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), bool], Tensor[(12, 2, 7), float32]) */;
  %793 = %792.1;
  %794 = cast(%var_2536, dtype="bool") /* ty=Tensor[(8, 13, 4), bool] */;
  %795 = shape_of(%793, dtype="int32") /* ty=Tensor[(3), int32] */;
  %796 = cast(%793, dtype="bool") /* ty=Tensor[(8, 13, 4), bool] */;
  %797 = dyn.reshape(%794, %795, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %798 = %790.0;
  %799 = %791.1;
  %800 = equal(%796, %797) /* ty=Tensor[(8, 13, 4), bool] */;
  (%798, %799, %800)
}

def @func_6429(%var_6427: Tensor[(256), float32], %var_6428: Tensor[(1, 720), float64]) -> (Tensor[(12, 2, 7), float32], Tensor[(720, 2), uint64], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8], Tensor[(8, 13, 4), uint8], Tensor[(15, 8, 12), uint64], Tensor[(8, 13, 4), float64], Tensor[(1440), uint64], Tensor[(16, 16, ?), bool], Tensor[(256), float32], Tensor[(12, 2, 7), float32], Tensor[(1, 720), float64]) {
  %831 = fn (%var_6403: Tensor[(256), float32], %var_6424: Tensor[(1, 720), float64]) -> (Tensor[(12, 2, 7), float32], Tensor[(720, 2), uint64], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8], Tensor[(8, 13, 4), uint8], Tensor[(15, 8, 12), uint64], Tensor[(8, 13, 4), float64], Tensor[(1440), uint64], Tensor[(16, 16, ?), bool], Tensor[(256), float32], Tensor[(12, 2, 7), float32], Tensor[(1, 720), float64]) {
    %801 = @func_4331() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8]) */;
    %802 = @func_5270() /* ty=(Tensor[(8, 13, 4), uint8], Tensor[(12, 2, 7), float32]) */;
    %803 = @func_2163() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(256), float32], Tensor[(15, 8, 12), uint64], Tensor[(1440, 1), uint64], Tensor[(15, 8, 12), uint64], Tensor[(12, 2, 7), float32], Tensor[(4, 104), bool]) */;
    %804 = cast(meta[relay.Constant][38] /* ty=Tensor[(720, 2), uint64] */, dtype="uint64") /* ty=Tensor[(720, 2), uint64] */;
    %805 = cast(meta[relay.Constant][38] /* ty=Tensor[(720, 2), uint64] */, dtype="uint64") /* ty=Tensor[(720, 2), uint64] */;
    %806 = reshape(%804, newshape=[15, 8, 12]) /* ty=Tensor[(15, 8, 12), uint64] */;
    %807 = reshape(%805, newshape=[15, 8, 12]) /* ty=Tensor[(15, 8, 12), uint64] */;
    %808 = @func_1325(%806, %807) /* ty=(Tensor[(15, 8, 12), uint64], Tensor[(8, 13, 4), uint8]) */;
    %809 = %808.1;
    %810 = cast(%809, dtype="float64") /* ty=Tensor[(8, 13, 4), float64] */;
    %811 = sinh(%810) /* ty=Tensor[(8, 13, 4), float64] */;
    %812 = cast(%811, dtype="float64") /* ty=Tensor[(8, 13, 4), float64] */;
    %813 = cast(meta[relay.Constant][38] /* ty=Tensor[(720, 2), uint64] */, dtype="uint64") /* ty=Tensor[(720, 2), uint64] */;
    %814 = reshape(%813, newshape=[1440]) /* ty=Tensor[(1440), uint64] */;
    %815 = @func_1989(%814) /* ty=(Tensor[(256), float32], Tensor[(12, 2, 7), float32], Tensor[(15, 8, 12), uint64], Tensor[(1440), uint64]) */;
    %816 = cast(%var_6403, dtype="float32") /* ty=Tensor[(256), float32] */;
    %817 = reshape(%816, newshape=[4, 64]) /* ty=Tensor[(4, 64), float32] */;
    %818 = @func_1114(%817) /* ty=(Tensor[(12, 2, 7), float64], Tensor[(16, 16, ?), bool], Tensor[(4, 64), float64]) */;
    %819 = cast(%var_6424, dtype="float64") /* ty=Tensor[(1, 720), float64] */;
    %820 = reshape(%819, newshape=[8, 6, 15]) /* ty=Tensor[(8, 6, 15), float64] */;
    %821 = @func_2193(%820) /* ty=(Tensor[(8, 6, 15), float64], Tensor[(416), float32], Tensor[(12, 2, 7), float32]) */;
    %822 = @func_3984() /* ty=Tensor[(12, 2, 7), float32] */;
    %823 = @func_1131() /* ty=Tensor[(12, 2, 7), float32] */;
    %824 = %801.1;
    %825 = %802.0;
    %826 = %803.4;
    %827 = cos(%812) /* ty=Tensor[(8, 13, 4), float64] */;
    %828 = %815.3;
    %829 = %818.1;
    %830 = %821.2;
    (%822, meta[relay.Constant][38] /* ty=Tensor[(720, 2), uint64] */, %823, %824, %825, %826, %827, %828, %829, %var_6403, %830, %var_6424)
  };
  %831(%var_6427, %var_6428) /* ty=(Tensor[(12, 2, 7), float32], Tensor[(720, 2), uint64], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8], Tensor[(8, 13, 4), uint8], Tensor[(15, 8, 12), uint64], Tensor[(8, 13, 4), float64], Tensor[(1440), uint64], Tensor[(16, 16, ?), bool], Tensor[(256), float32], Tensor[(12, 2, 7), float32], Tensor[(1, 720), float64]) */
}

def @func_7341() -> Tensor[(12, 2, 7), float32] {
  @func_3108() /* ty=Tensor[(12, 2, 7), float32] */
}

def @func_7992(%var_7990: Tensor[(585), float32]) -> (Tensor[(224), float32], Tensor[(13, 9, 5), float32], Tensor[(585), float32]) {
  @func_7989(%var_7990) /* ty=(Tensor[(224), float32], Tensor[(13, 9, 5), float32], Tensor[(585), float32]) */
}

def @func_6126(%var_6094: Tensor[(12, 2, 7), float32]) -> (Tensor[(8, 13, 4), uint8], Tensor[(256), float32], Tensor[(12, 2, 7), float32]) {
  %832 = @func_2696() /* ty=(Tensor[(8, 13, 4), uint8], Tensor[(15, 8, 12), uint64], Tensor[(1440), uint64]) */;
  %833 = @func_2163() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(256), float32], Tensor[(15, 8, 12), uint64], Tensor[(1440, 1), uint64], Tensor[(15, 8, 12), uint64], Tensor[(12, 2, 7), float32], Tensor[(4, 104), bool]) */;
  %834 = @func_2011() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */;
  %835 = %834.1;
  %836 = cast(%var_6094, dtype="float32") /* ty=Tensor[(12, 2, 7), float32] */;
  %837 = shape_of(%835, dtype="int32") /* ty=Tensor[(3), int32] */;
  %838 = cast(%835, dtype="float32") /* ty=Tensor[(12, 2, 7), float32] */;
  %839 = dyn.reshape(%836, %837, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %840 = %832.0;
  %841 = %833.1;
  %842 = subtract(%838, %839) /* ty=Tensor[(12, 2, 7), float32] */;
  (%840, %841, %842)
}

def @func_3093(%var_3091: Tensor[(120, 4), float64]) -> (Tensor[(120, 4), bool], Tensor[(256), float32], Tensor[(256), float32], Tensor[(1440), uint64], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(120, 4), float64]) {
  @func_3090(%var_3091) /* ty=(Tensor[(120, 4), bool], Tensor[(256), float32], Tensor[(256), float32], Tensor[(1440), uint64], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(120, 4), float64]) */
}

def @func_4918() -> Tensor[(12, 2, 7), float32] {
  %843 = fn () -> Tensor[(12, 2, 7), float32] {
    @func_4631() /* ty=Tensor[(12, 2, 7), float32] */
  };
  %843() /* ty=Tensor[(12, 2, 7), float32] */
}

def @func_4253() -> Tensor[(12, 2, 7), float32] {
  %844 = @func_2988() /* ty=(Tensor[(15, 8, 12), uint64], Tensor[(12, 2, 7), float32]) */;
  %844.1
}

def @func_7570() -> (Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), float64], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) {
  %845 = @func_5204() /* ty=(Tensor[(12, 2, 7), float32],) */;
  %846 = @func_5391() /* ty=(Tensor[(8, 13, 4), float32],) */;
  %847 = %846.0;
  %848 = cast(meta[relay.Constant][39] /* ty=Tensor[(8, 13, 4), float32] */, dtype="uint8") /* ty=Tensor[(8, 13, 4), uint8] */;
  %849 = shape_of(%847, dtype="int32") /* ty=Tensor[(3), int32] */;
  %850 = cast(%847, dtype="uint8") /* ty=Tensor[(8, 13, 4), uint8] */;
  %851 = dyn.reshape(%848, %849, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %852 = @func_6736() /* ty=Tensor[(8, 13, 4), float64] */;
  %853 = cast(%847, dtype="float64") /* ty=Tensor[(8, 13, 4), float64] */;
  %854 = shape_of(%852, dtype="int32") /* ty=Tensor[(3), int32] */;
  %855 = cast(%852, dtype="float64") /* ty=Tensor[(8, 13, 4), float64] */;
  %856 = dyn.reshape(%853, %854, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %857 = @func_7036() /* ty=(Tensor[(12, 2, 7), float32],) */;
  %858 = @func_1837() /* ty=(Tensor[(12, 5, 7), float32], Tensor[(12, 5, 7), float32], Tensor[(12, 2, 7), float32]) */;
  %859 = %845.0;
  %860 = maximum(%850, %851) /* ty=Tensor[(8, 13, 4), uint8] */;
  %861 = @func_3325() /* ty=Tensor[(12, 2, 7), float32] */;
  %862 = mod(%855, %856) /* ty=Tensor[(8, 13, 4), float64] */;
  %863 = %857.0;
  %864 = %858.2;
  (%859, %860, %861, %862, %863, %864)
}

def @func_5959() -> (Tensor[(12, 2, 7), float32],) {
  @func_5957() /* ty=(Tensor[(12, 2, 7), float32],) */
}

def @func_8112() -> Tensor[(12, 2, 7), float32] {
  @func_8110() /* ty=Tensor[(12, 2, 7), float32] */
}

def @func_2011() -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) {
  %865 = @func_1029() /* ty=(Tensor[(12, 2, 7), float32],) */;
  %866 = @func_1075() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */;
  %867 = %865.0;
  %868 = %866.2;
  (%867, %868)
}

def @func_5616(%var_5544: Tensor[(12, 2, 7), float32], %var_5595: Tensor[(12, 2, 7), float32]) -> (Tensor[(12, 2, 7), int64], Tensor[(12, 5, 7), float32], Tensor[(416), uint8], Tensor[(8, 10, 13), uint32], Tensor[(12, 2, 7), int8]) {
  %869 = @func_5204() /* ty=(Tensor[(12, 2, 7), float32],) */;
  %870 = %869.0;
  %871 = cast(%var_5544, dtype="int64") /* ty=Tensor[(12, 2, 7), int64] */;
  %872 = shape_of(%870, dtype="int32") /* ty=Tensor[(3), int32] */;
  %873 = cast(%870, dtype="int64") /* ty=Tensor[(12, 2, 7), int64] */;
  %874 = dyn.reshape(%871, %872, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %875 = @func_1837() /* ty=(Tensor[(12, 5, 7), float32], Tensor[(12, 5, 7), float32], Tensor[(12, 2, 7), float32]) */;
  %876 = @func_1612() /* ty=(Tensor[(416), uint8], Tensor[(15, 8, 12), uint64], Tensor[(1440), uint64]) */;
  %877 = cast(%var_5595, dtype="int8") /* ty=Tensor[(12, 2, 7), int8] */;
  %878 = shape_of(%870, dtype="int32") /* ty=Tensor[(3), int32] */;
  %879 = cast(%870, dtype="int8") /* ty=Tensor[(12, 2, 7), int8] */;
  %880 = dyn.reshape(%877, %878, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %881 = bitwise_and(%873, %874) /* ty=Tensor[(12, 2, 7), int64] */;
  %882 = %875.0;
  %883 = %876.0;
  %884 = @func_4717() /* ty=Tensor[(8, 10, 13), uint32] */;
  %885 = left_shift(%879, %880) /* ty=Tensor[(12, 2, 7), int8] */;
  (%881, %882, %883, %884, %885)
}

def @func_4575() -> (Tensor[(15, 8, 12), uint64], Tensor[(12, 2, 7), float32]) {
  %889 = fn () -> (Tensor[(15, 8, 12), uint64], Tensor[(12, 2, 7), float32]) {
    %886 = @func_2082() /* ty=(Tensor[(15, 8, 12), uint64], Tensor[(416), uint8], Tensor[(416), float32], Tensor[(480), float64]) */;
    %887 = %886.0;
    %888 = @func_4253() /* ty=Tensor[(12, 2, 7), float32] */;
    (%887, %888)
  };
  %889() /* ty=(Tensor[(15, 8, 12), uint64], Tensor[(12, 2, 7), float32]) */
}

def @func_3601(%var_3599: int16, %var_3600: Tensor[(16, 6, 13), int16]) -> (Tensor[(16, 6, 13), bool], Tensor[(12, 2, 7), float32]) {
  %894 = fn (%var_3584: int16, %var_3585: Tensor[(16, 6, 13), int16]) -> (Tensor[(16, 6, 13), bool], Tensor[(12, 2, 7), float32]) {
    %890 = cast(%var_3584, dtype="bool") /* ty=bool */;
    %891 = cast(%var_3585, dtype="bool") /* ty=Tensor[(16, 6, 13), bool] */;
    %892 = greater_equal(%890, %891) /* ty=Tensor[(16, 6, 13), bool] */;
    %893 = @func_1131() /* ty=Tensor[(12, 2, 7), float32] */;
    (%892, %893)
  };
  %894(%var_3599, %var_3600) /* ty=(Tensor[(16, 6, 13), bool], Tensor[(12, 2, 7), float32]) */
}

def @func_3154() -> (Tensor[(12, 2, 7), float32], Tensor[(416), uint8]) {
  %895 = @func_1426() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), bool], Tensor[(12, 2, 7), float32]) */;
  %896 = @func_782() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), uint8], Tensor[(416), uint8]) */;
  %897 = %895.0;
  %898 = %896.2;
  (%897, %898)
}

def @func_670(%var_668: Tensor[(256), float32]) -> (Tensor[(12, 2, 7), float32], Tensor[(16, 16, ?), bool], Tensor[(256), float32]) {
  @func_667(%var_668) /* ty=(Tensor[(12, 2, 7), float32], Tensor[(16, 16, ?), bool], Tensor[(256), float32]) */
}

def @func_614(%var_611: Tensor[(1, 416), uint8], %var_612: Tensor[(11, 416), uint8], %var_613: Tensor[(128, 2), float32]) -> (Tensor[(12, 2, 7), float32], Tensor[(12, 5, 8), float64], Tensor[(11, 416), int8], Tensor[(16, 16, ?), bool], Tensor[(128, 2), float32], Tensor[(12, 5, 8), float64], Tensor[(1, 416), float64], Tensor[(16, 16, ?), bool]) {
  @func_609(%var_611, %var_612, %var_613) /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 5, 8), float64], Tensor[(11, 416), int8], Tensor[(16, 16, ?), bool], Tensor[(128, 2), float32], Tensor[(12, 5, 8), float64], Tensor[(1, 416), float64], Tensor[(16, 16, ?), bool]) */
}

def @func_4248(%var_4247: Tensor[(7, 5, 9), int64]) -> (Tensor[(7, 5, 9), bool], Tensor[(12, 2, 7), float32], Tensor[(7, 5, 9), float64]) {
  %912 = fn (%var_4220: Tensor[(7, 5, 9), int64]) -> (Tensor[(7, 5, 9), bool], Tensor[(12, 2, 7), float32], Tensor[(7, 5, 9), float64]) {
    %899 = cast(meta[relay.Constant][40] /* ty=Tensor[(7, 5, 9), int64] */, dtype="bool") /* ty=Tensor[(7, 5, 9), bool] */;
    %900 = shape_of(%var_4220, dtype="int32") /* ty=Tensor[(3), int32] */;
    %901 = cast(%var_4220, dtype="bool") /* ty=Tensor[(7, 5, 9), bool] */;
    %902 = dyn.reshape(%899, %900, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %903 = greater_equal(%901, %902) /* ty=Tensor[(7, 5, 9), bool] */;
    %904 = cast(meta[relay.Constant][40] /* ty=Tensor[(7, 5, 9), int64] */, dtype="bool") /* ty=Tensor[(7, 5, 9), bool] */;
    %905 = shape_of(%903, dtype="int32") /* ty=Tensor[(3), int32] */;
    %906 = cast(%903, dtype="bool") /* ty=Tensor[(7, 5, 9), bool] */;
    %907 = dyn.reshape(%904, %905, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %908 = cast(meta[relay.Constant][40] /* ty=Tensor[(7, 5, 9), int64] */, dtype="float64") /* ty=Tensor[(7, 5, 9), float64] */;
    %909 = not_equal(%906, %907) /* ty=Tensor[(7, 5, 9), bool] */;
    %910 = @func_1131() /* ty=Tensor[(12, 2, 7), float32] */;
    %911 = acos(%908) /* ty=Tensor[(7, 5, 9), float64] */;
    (%909, %910, %911)
  };
  %912(%var_4247) /* ty=(Tensor[(7, 5, 9), bool], Tensor[(12, 2, 7), float32], Tensor[(7, 5, 9), float64]) */
}

def @func_7165(%var_7163: Tensor[(9, 14, 11), float64]) -> (Tensor[(9, 14, 11), float64],) {
  @func_7162(%var_7163) /* ty=(Tensor[(9, 14, 11), float64],) */
}

def @func_2083() -> (Tensor[(15, 8, 12), uint64], Tensor[(416), uint8], Tensor[(416), float32], Tensor[(480), float64]) {
  %922 = fn () -> (Tensor[(15, 8, 12), uint64], Tensor[(416), uint8], Tensor[(416), float32], Tensor[(480), float64]) {
    %913 = @func_1612() /* ty=(Tensor[(416), uint8], Tensor[(15, 8, 12), uint64], Tensor[(1440), uint64]) */;
    %914 = cast(meta[relay.Constant][41] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
    %915 = %913.0;
    %916 = cast(%915, dtype="float32") /* ty=Tensor[(416), float32] */;
    %917 = reshape(%914, newshape=[120, 4]) /* ty=Tensor[(120, 4), float64] */;
    %918 = reshape(%916, newshape=[416]) /* ty=Tensor[(416), float32] */;
    %919 = @func_1211(%917, %918) /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 10, 13), float64], Tensor[(12, 2, 7), float32], Tensor[(120, 4), float64], Tensor[(416), float32]) */;
    %920 = @func_1943() /* ty=Tensor[(15, 8, 12), uint64] */;
    %921 = %919.4;
    (%920, %915, %921, meta[relay.Constant][41] /* ty=Tensor[(480), float64] */)
  };
  %922() /* ty=(Tensor[(15, 8, 12), uint64], Tensor[(416), uint8], Tensor[(416), float32], Tensor[(480), float64]) */
}

def @func_8429() -> (Tensor[(12, 2, 7), float32],) {
  %925 = fn () -> (Tensor[(12, 2, 7), float32],) {
    %923 = @func_2011() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */;
    %924 = %923.1;
    (%924,)
  };
  %925() /* ty=(Tensor[(12, 2, 7), float32],) */
}

def @func_3109() -> Tensor[(12, 2, 7), float32] {
  %926 = fn () -> Tensor[(12, 2, 7), float32] {
    @func_1131() /* ty=Tensor[(12, 2, 7), float32] */
  };
  %926() /* ty=Tensor[(12, 2, 7), float32] */
}

def @func_5205() -> (Tensor[(12, 2, 7), float32],) {
  %929 = fn () -> (Tensor[(12, 2, 7), float32],) {
    %927 = @func_4134() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(4576), uint8], Tensor[(8, 13, 4), float32]) */;
    %928 = %927.0;
    (%928,)
  };
  %929() /* ty=(Tensor[(12, 2, 7), float32],) */
}

def @func_8514(%var_8501: Tensor[(8, 13, 4), float32]) -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), float32], Tensor[(8, 13, 4), uint32]) {
  %930 = @func_3293() /* ty=(Tensor[(12, 2, 7), float32],) */;
  %931 = @func_4134() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(4576), uint8], Tensor[(8, 13, 4), float32]) */;
  %932 = %931.2;
  %933 = cast(%932, dtype="float32") /* ty=Tensor[(8, 13, 4), float32] */;
  %934 = cast(%var_8501, dtype="uint32") /* ty=Tensor[(8, 13, 4), uint32] */;
  %935 = shape_of(%932, dtype="int32") /* ty=Tensor[(3), int32] */;
  %936 = cast(%932, dtype="uint32") /* ty=Tensor[(8, 13, 4), uint32] */;
  %937 = dyn.reshape(%934, %935, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %938 = %930.0;
  %939 = @func_8362() /* ty=Tensor[(12, 2, 7), float32] */;
  %940 = acosh(%933) /* ty=Tensor[(8, 13, 4), float32] */;
  %941 = add(%936, %937) /* ty=Tensor[(8, 13, 4), uint32] */;
  (%938, %939, %940, %941)
}

def @func_6129(%var_6127: Tensor[(12, 2, 7), float32]) -> (Tensor[(8, 13, 4), uint8], Tensor[(256), float32], Tensor[(12, 2, 7), float32]) {
  @func_6126(%var_6127) /* ty=(Tensor[(8, 13, 4), uint8], Tensor[(256), float32], Tensor[(12, 2, 7), float32]) */
}

def @func_7434() -> Tensor[(12, 2, 7), float32] {
  %943 = fn () -> Tensor[(12, 2, 7), float32] {
    %942 = @func_1426() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 13, 4), bool], Tensor[(12, 2, 7), float32]) */;
    %942.2
  };
  %943() /* ty=Tensor[(12, 2, 7), float32] */
}

def @func_3242() -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) {
  @func_3240() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */
}

def @func_1659() -> Tensor[(12, 2, 7), float32] {
  %945 = fn () -> Tensor[(12, 2, 7), float32] {
    %944 = @func_1029() /* ty=(Tensor[(12, 2, 7), float32],) */;
    %944.0
  };
  %945() /* ty=Tensor[(12, 2, 7), float32] */
}

def @func_1945() -> Tensor[(15, 8, 12), uint64] {
  @func_1943() /* ty=Tensor[(15, 8, 12), uint64] */
}

def @func_6920() -> (Tensor[(1440), uint64], Tensor[(8, 13, 4), uint8], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), bool]) {
  %946 = @func_2696() /* ty=(Tensor[(8, 13, 4), uint8], Tensor[(15, 8, 12), uint64], Tensor[(1440), uint64]) */;
  %947 = @func_2348() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 5, 8), float64], Tensor[(120, 4), float64]) */;
  %948 = %947.0;
  %949 = cast(%948, dtype="float32") /* ty=Tensor[(12, 2, 7), float32] */;
  %950 = reshape(%949, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %951 = @func_6847(%950) /* ty=(Tensor[(8, 10, 13), bool], Tensor[(8, 10, 13), float32], Tensor[(12, 2, 7), bool], Tensor[(168), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */;
  %952 = %946.2;
  %953 = @func_3390() /* ty=Tensor[(8, 13, 4), uint8] */;
  %954 = %951.2;
  (%952, %953, %948, %954)
}

def @func_7162(%var_7159: Tensor[(9, 14, 11), float64]) -> (Tensor[(9, 14, 11), float64],) {
  %955 = cast(%var_7159, dtype="float64") /* ty=Tensor[(9, 14, 11), float64] */;
  %956 = cosh(%955) /* ty=Tensor[(9, 14, 11), float64] */;
  (%956,)
}

def @main(%var_8814: Tensor[(16, 11, 4), float64], %var_8815: Tensor[(16, 11, 4), float64]) -> (Tensor[(16, 11, 4), float64], Tensor[(480), float64], Tensor[(480), float64], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(16, 11, 4), float32]) {
  %957 = cast(%var_8815, dtype="float64") /* ty=Tensor[(16, 11, 4), float64] */;
  %958 = shape_of(%var_8814, dtype="int32") /* ty=Tensor[(3), int32] */;
  %959 = cast(%var_8814, dtype="float64") /* ty=Tensor[(16, 11, 4), float64] */;
  %960 = dyn.reshape(%957, %958, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %961 = cast(meta[relay.Constant][42] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %962 = reshape(%961, newshape=[480]) /* ty=Tensor[(480), float64] */;
  %963 = @func_361(%962) /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 5, 8), float64], Tensor[(480), float64]) */;
  %964 = cast(meta[relay.Constant][43] /* ty=Tensor[(16, 11, 4), float64] */, dtype="float32") /* ty=Tensor[(16, 11, 4), float32] */;
  %965 = shape_of(%var_8814, dtype="int32") /* ty=Tensor[(3), int32] */;
  %966 = cast(%var_8814, dtype="float32") /* ty=Tensor[(16, 11, 4), float32] */;
  %967 = dyn.reshape(%964, %965, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %968 = minimum(%959, %960) /* ty=Tensor[(16, 11, 4), float64] */;
  %969 = %963.3;
  %970 = @func_8521() /* ty=Tensor[(12, 2, 7), float32] */;
  %971 = @func_5040() /* ty=Tensor[(12, 2, 7), float32] */;
  %972 = floor_mod(%966, %967) /* ty=Tensor[(16, 11, 4), float32] */;
  (%968, %969, meta[relay.Constant][42] /* ty=Tensor[(480), float64] */, %970, %971, %972)
}

def @func_358(%var_356: Tensor[(480), float64]) -> (Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 5, 8), float64], Tensor[(480), float64]) {
  %973 = @func_348() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(8, 10, 13), float64]) */;
  %974 = cast(%var_356, dtype="float64") /* ty=Tensor[(480), float64] */;
  %975 = cast(%var_356, dtype="float64") /* ty=Tensor[(480), float64] */;
  %976 = reshape(%974, newshape=[12, 5, 8]) /* ty=Tensor[(12, 5, 8), float64] */;
  %977 = reshape(%975, newshape=[12, 5, 8]) /* ty=Tensor[(12, 5, 8), float64] */;
  %978 = @func_133(%976, %977) /* ty=(Tensor[(12, 5, 8), float64],) */;
  %979 = @func_318() /* ty=Tensor[(12, 2, 7), float32] */;
  %980 = %973.0;
  %981 = %978.0;
  (%979, %980, %981, %var_356)
}

def @func_5137() -> (Tensor[(12, 2, 7), float32],) {
  @func_5135() /* ty=(Tensor[(12, 2, 7), float32],) */
}

def @func_6922() -> (Tensor[(1440), uint64], Tensor[(8, 13, 4), uint8], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), bool]) {
  @func_6920() /* ty=(Tensor[(1440), uint64], Tensor[(8, 13, 4), uint8], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), bool]) */
}

def @func_7449(%var_7447: Tensor[(1440), uint64]) -> (Tensor[(8, 13, 4), uint8], Tensor[(15, 8, 12), bool], Tensor[(1440), float64]) {
  @func_7446(%var_7447) /* ty=(Tensor[(8, 13, 4), uint8], Tensor[(15, 8, 12), bool], Tensor[(1440), float64]) */
}

def @func_5392() -> (Tensor[(8, 13, 4), float32],) {
  %984 = fn () -> (Tensor[(8, 13, 4), float32],) {
    %982 = @func_4134() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(4576), uint8], Tensor[(8, 13, 4), float32]) */;
    %983 = %982.2;
    (%983,)
  };
  %984() /* ty=(Tensor[(8, 13, 4), float32],) */
}

def @func_4255() -> Tensor[(12, 2, 7), float32] {
  @func_4253() /* ty=Tensor[(12, 2, 7), float32] */
}

def @func_1117(%var_1115: Tensor[(4, 64), float32]) -> (Tensor[(12, 2, 7), float64], Tensor[(16, 16, ?), bool], Tensor[(4, 64), float64]) {
  @func_1114(%var_1115) /* ty=(Tensor[(12, 2, 7), float64], Tensor[(16, 16, ?), bool], Tensor[(4, 64), float64]) */
}

def @func_2602(%var_2588: Tensor[(1, 16, 14), float32]) -> (Tensor[(1, 16, 14), float32], Tensor[(1, 16, 14), float64]) {
  %985 = cast(%var_2588, dtype="float32") /* ty=Tensor[(1, 16, 14), float32] */;
  %986 = cast(%var_2588, dtype="float64") /* ty=Tensor[(1, 16, 14), float64] */;
  %987 = asin(%985) /* ty=Tensor[(1, 16, 14), float32] */;
  %988 = tan(%986) /* ty=Tensor[(1, 16, 14), float64] */;
  (%987, %988)
}

def @func_5723() -> Tensor[(12, 2, 7), bool] {
  %994 = fn () -> Tensor[(12, 2, 7), bool] {
    %989 = @func_5631() /* ty=Tensor[(12, 2, 7), float32] */;
    %990 = cast(meta[relay.Constant][44] /* ty=Tensor[(12, 2, 7), float32] */, dtype="bool") /* ty=Tensor[(12, 2, 7), bool] */;
    %991 = shape_of(%989, dtype="int32") /* ty=Tensor[(3), int32] */;
    %992 = cast(%989, dtype="bool") /* ty=Tensor[(12, 2, 7), bool] */;
    %993 = dyn.reshape(%990, %991, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_or(%992, %993) /* ty=Tensor[(12, 2, 7), bool] */
  };
  %994() /* ty=Tensor[(12, 2, 7), bool] */
}

def @func_318() -> Tensor[(12, 2, 7), float32] {
  %995 = cast(meta[relay.Constant][45] /* ty=Tensor[(12, 2, 7), float32] */, dtype="float32") /* ty=Tensor[(12, 2, 7), float32] */;
  log10(%995) /* ty=Tensor[(12, 2, 7), float32] */
}

def @func_3227() -> Tensor[(12, 2, 7), float32] {
  %997 = fn () -> Tensor[(12, 2, 7), float32] {
    %996 = @func_1075() /* ty=(Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32], Tensor[(12, 2, 7), float32]) */;
    %996.0
  };
  %997() /* ty=Tensor[(12, 2, 7), float32] */
}

def @func_3540() -> Tensor[(12, 2, 7), float32] {
  %999 = fn () -> Tensor[(12, 2, 7), float32] {
    %998 = @func_3293() /* ty=(Tensor[(12, 2, 7), float32],) */;
    %998.0
  };
  %999() /* ty=Tensor[(12, 2, 7), float32] */
}

def @func_1133() -> Tensor[(12, 2, 7), float32] {
  @func_1131() /* ty=Tensor[(12, 2, 7), float32] */
}

def @func_6768(%var_6766: Tensor[(2, 4, 15), uint32], %var_6767: Tensor[(2, 4, 15), uint32]) -> Tensor[(2, 4, 15), bool] {
  %1004 = fn (%var_6752: Tensor[(2, 4, 15), uint32], %var_6753: Tensor[(2, 4, 15), uint32]) -> Tensor[(2, 4, 15), bool] {
    %1000 = cast(%var_6753, dtype="bool") /* ty=Tensor[(2, 4, 15), bool] */;
    %1001 = shape_of(%var_6752, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1002 = cast(%var_6752, dtype="bool") /* ty=Tensor[(2, 4, 15), bool] */;
    %1003 = dyn.reshape(%1000, %1001, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    equal(%1002, %1003) /* ty=Tensor[(2, 4, 15), bool] */
  };
  %1004(%var_6766, %var_6767) /* ty=Tensor[(2, 4, 15), bool] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen556/build/output.py", line 2903, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:32:22] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

