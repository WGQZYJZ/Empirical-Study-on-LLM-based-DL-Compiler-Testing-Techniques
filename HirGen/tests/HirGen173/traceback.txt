==========mod==========
#[version = "0.0.5"]
def @func_3395() -> Tensor[(6, 4, 1), int32] {
  %0 = cast(8 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 4, 1), int32] */, dtype="int32") /* ty=Tensor[(6, 4, 1), int32] */;
  add(%0, %1) /* ty=Tensor[(6, 4, 1), int32] */
}

def @func_2477(%var_2463: Tensor[(3, 15, 7), int8]) -> Tensor[(3, 15, 7), uint16] {
  %2 = @func_2409() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %3 = %2.0;
  %4 = cast(%3, dtype="uint16") /* ty=Tensor[(3, ?, 7), uint16] */;
  %5 = cast(%var_2463, dtype="uint16") /* ty=Tensor[(3, 15, 7), uint16] */;
  maximum(%4, %5) /* ty=Tensor[(3, 15, 7), uint16] */
}

def @func_6328() -> (Tensor[(5, 12, 14), float32],) {
  %6 = @func_4415() /* ty=(Tensor[(5, 12, 14), float64],) */;
  %7 = %6.0;
  %8 = cast(%7, dtype="float32") /* ty=Tensor[(5, 12, 14), float32] */;
  %9 = acos(%8) /* ty=Tensor[(5, 12, 14), float32] */;
  (%9,)
}

def @func_2457() -> (Tensor[(3, ?, 7), int8],) {
  %10 = @func_2371() /* ty=Tensor[(3, ?, 7), int8] */;
  (%10,)
}

def @func_3412() -> Tensor[(3, 7, 7), float32] {
  %11 = @func_3260() /* ty=(Tensor[(3, 7, 7), float32], Tensor[(3, 4, 7), float32]) */;
  %11.0
}

def @func_3217(%var_3179: Tensor[(84), bool]) -> (Tensor[(11, 52), int8], Tensor[(84), bool], Tensor[(3, ?, 7), float32], Tensor[(7, 4, 3), bool], Tensor[(8, 18), float64]) {
  %12 = cast(%var_3179, dtype="bool") /* ty=Tensor[(84), bool] */;
  %13 = reshape(%12, newshape=[84]) /* ty=Tensor[(84), bool] */;
  %14 = @func_2724(%13) /* ty=(Tensor[(3, ?, 7), int8], Tensor[(15, 5, 15), float32], Tensor[(2, 72), float64], Tensor[(11, 52), int8], Tensor[(84), bool], Tensor[(13, 4, 11), float32], Tensor[(7, 3, 15), float64], Tensor[(315), float64], Tensor[(3, 4, 7), float32], Tensor[(7, 3, 15), float64], Tensor[(3, ?, 7), int8]) */;
  %15 = @func_1519() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %16 = %15.0;
  %17 = @func_925() /* ty=Tensor[(3, ?, 7), int8] */;
  %18 = cast(%17, dtype="float32") /* ty=Tensor[(3, ?, 7), float32] */;
  %19 = shape_of(%16, dtype="int32") /* ty=Tensor[(3), int32] */;
  %20 = cast(%16, dtype="float32") /* ty=Tensor[(3, ?, 7), float32] */;
  %21 = dyn.reshape(%18, %19, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %22 = cast(meta[relay.Constant][1] /* ty=Tensor[(8, 18), float64] */, dtype="float64") /* ty=Tensor[(8, 18), float64] */;
  %23 = %14.3;
  %24 = cast(%23, dtype="int8") /* ty=Tensor[(11, 52), int8] */;
  %25 = cast(%17, dtype="float64") /* ty=Tensor[(3, ?, 7), float64] */;
  %26 = cast(%var_3179, dtype="bool") /* ty=Tensor[(84), bool] */;
  %27 = reshape(%22, newshape=[8, 3, 6]) /* ty=Tensor[(8, 3, 6), float64] */;
  %28 = reshape(%24, newshape=[572]) /* ty=Tensor[(572), int8] */;
  %29 = reshape(%25, newshape=[21, 1]) /* ty=Tensor[(21, 1), float64] */;
  %30 = reshape(%26, newshape=[7, 4, 3]) /* ty=Tensor[(7, 4, 3), bool] */;
  %31 = @func_834(%27, %28, %29, %30) /* ty=(Tensor[(8, 3, 6), float64], Tensor[(15, 5, 15), float32], Tensor[(1125), float32], Tensor[(572), int8], Tensor[(21, 1), float64], Tensor[(315), float64], Tensor[(84), float64], Tensor[(840), float64], Tensor[(13, 4, 11), float32], Tensor[(7, 4, 3), bool], Tensor[(13, 4, 11), int8], Tensor[(15, 5, 15), float32]) */;
  %32 = maximum(%20, %21) /* ty=Tensor[(3, ?, 7), float32] */;
  %33 = %31.9;
  (%23, %var_3179, %32, %33, meta[relay.Constant][1] /* ty=Tensor[(8, 18), float64] */)
}

def @func_4368() -> (Tensor[(3, 4, 7), float32],) {
  %34 = @func_4138() /* ty=(Tensor[(3, 4, 7), float32], Tensor[(3, ?, 7), float64]) */;
  %35 = %34.0;
  (%35,)
}

def @func_1243(%var_1226: bool, %var_1227: Tensor[(4, 16, 8), bool]) -> (Tensor[(4, 16, 8), bool], Tensor[(3, ?, 7), int8]) {
  %36 = cast(%var_1226, dtype="bool") /* ty=bool */;
  %37 = cast(%var_1227, dtype="bool") /* ty=Tensor[(4, 16, 8), bool] */;
  %38 = @func_1182() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %39 = logical_and(%36, %37) /* ty=Tensor[(4, 16, 8), bool] */;
  %40 = %38.0;
  (%39, %40)
}

def @func_3998(%var_3976: int16, %var_3977: Tensor[(12, 16, 8), int16], %var_3984: Tensor[(315), float64], %var_3985: Tensor[(84), float64], %var_3986: Tensor[(60, 14), float64]) -> (Tensor[(840), float64], Tensor[(21), float64], Tensor[(315), float64], Tensor[(84), float64], Tensor[(60, 14), float64], Tensor[(12, 16, 8), float64]) {
  %41 = cast(meta[relay.Constant][2] /* ty=Tensor[(21), float64] */, dtype="float64") /* ty=Tensor[(21), float64] */;
  %42 = cast(%var_3984, dtype="float64") /* ty=Tensor[(315), float64] */;
  %43 = cast(%var_3985, dtype="float64") /* ty=Tensor[(84), float64] */;
  %44 = cast(%var_3986, dtype="float64") /* ty=Tensor[(60, 14), float64] */;
  %45 = reshape(%41, newshape=[7, 1, 3]) /* ty=Tensor[(7, 1, 3), float64] */;
  %46 = reshape(%42, newshape=[7, 15, 3]) /* ty=Tensor[(7, 15, 3), float64] */;
  %47 = reshape(%43, newshape=[7, 4, 3]) /* ty=Tensor[(7, 4, 3), float64] */;
  %48 = reshape(%44, newshape=[840]) /* ty=Tensor[(840), float64] */;
  %49 = @func_254(%45, %46, %47, %48) /* ty=(Tensor[(7, 15, 3), float64], Tensor[(7, 4, 3), bool], Tensor[(5, 12, 14), int64], Tensor[(840), float64]) */;
  %50 = cast(%var_3976, dtype="int16") /* ty=int16 */;
  %51 = cast(%var_3977, dtype="int16") /* ty=Tensor[(12, 16, 8), int16] */;
  %52 = multiply(%50, %51) /* ty=Tensor[(12, 16, 8), int16] */;
  %53 = cast(%52, dtype="float64") /* ty=Tensor[(12, 16, 8), float64] */;
  %54 = %49.3;
  %55 = acos(%53) /* ty=Tensor[(12, 16, 8), float64] */;
  (%54, meta[relay.Constant][2] /* ty=Tensor[(21), float64] */, %var_3984, %var_3985, %var_3986, %55)
}

def @func_5088() -> (Tensor[(5, 8, 9), float64],) {
  %56 = @func_4337() /* ty=(Tensor[(5, 8, 9), uint16],) */;
  %57 = %56.0;
  %58 = cast(%57, dtype="float64") /* ty=Tensor[(5, 8, 9), float64] */;
  %59 = cos(%58) /* ty=Tensor[(5, 8, 9), float64] */;
  (%59,)
}

def @func_4770() -> (Tensor[(3, ?, 7), int8], Tensor[(5, 8, 9), float64]) {
  %60 = @func_1182() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %61 = @func_3578() /* ty=(Tensor[(5, 8, 9), uint16], Tensor[(7, 2, 16), float32]) */;
  %62 = %61.0;
  %63 = cast(%62, dtype="float64") /* ty=Tensor[(5, 8, 9), float64] */;
  %64 = %60.0;
  %65 = acosh(%63) /* ty=Tensor[(5, 8, 9), float64] */;
  (%64, %65)
}

def @func_1311() -> (Tensor[(3, 4, 7), float32],) {
  %66 = @func_995() /* ty=Tensor[(3, 4, 7), float32] */;
  (%66,)
}

def @func_1876(%var_1829: bool, %var_1830: Tensor[(512), bool], %var_1871: Tensor[(572), float64]) -> (Tensor[(13, 4, 11), int8], Tensor[(5, 8, 9), uint16], Tensor[(4, 16, 8), bool], Tensor[(512), bool], Tensor[(3, ?, 7), int8], Tensor[(13, 5, 5), uint8], Tensor[(325), float32], Tensor[(3, ?, 7), int8], Tensor[(84), float32], Tensor[(572), float64]) {
  %67 = @func_1434() /* ty=(Tensor[(3, ?, 7), int8], Tensor[(13, 4, 11), int8], Tensor[(572), int8]) */;
  %68 = %67.2;
  %69 = cast(%68, dtype="int8") /* ty=Tensor[(572), int8] */;
  %70 = reshape(%69, newshape=[13, 4, 11]) /* ty=Tensor[(13, 4, 11), int8] */;
  %71 = @func_379(%70) /* ty=(Tensor[(13, 4, 11), int8],) */;
  %72 = @func_1580() /* ty=(Tensor[(5, 8, 9), uint16],) */;
  %73 = cast(%var_1829, dtype="bool") /* ty=bool */;
  %74 = cast(%var_1830, dtype="bool") /* ty=Tensor[(512), bool] */;
  %75 = reshape(%73, newshape=[]) /* ty=bool */;
  %76 = reshape(%74, newshape=[4, 16, 8]) /* ty=Tensor[(4, 16, 8), bool] */;
  %77 = @func_1243(%75, %76) /* ty=(Tensor[(4, 16, 8), bool], Tensor[(3, ?, 7), int8]) */;
  %78 = @func_1519() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %79 = cast(meta[relay.Constant][3] /* ty=Tensor[(325), float32] */, dtype="float32") /* ty=Tensor[(325), float32] */;
  %80 = reshape(%79, newshape=[13, 5, 5]) /* ty=Tensor[(13, 5, 5), float32] */;
  %81 = @func_1677(%80) /* ty=(Tensor[(13, 5, 5), uint8], Tensor[(3, ?, 7), int8], Tensor[(7, 3, 15), float64], Tensor[(315), float64]) */;
  %82 = cast(meta[relay.Constant][4] /* ty=Tensor[(84), float32] */, dtype="float32") /* ty=Tensor[(84), float32] */;
  %83 = reshape(%82, newshape=[3, 4, 7]) /* ty=Tensor[(3, 4, 7), float32] */;
  %84 = @func_1344(%83) /* ty=(Tensor[(3, 4, 7), uint16], Tensor[(3, 4, 7), float64], Tensor[(3, ?, 7), int8]) */;
  %85 = cast(%68, dtype="float32") /* ty=Tensor[(572), float32] */;
  %86 = sinh(%85) /* ty=Tensor[(572), float32] */;
  %87 = cast(%86, dtype="float64") /* ty=Tensor[(572), float64] */;
  %88 = cast(%var_1829, dtype="float64") /* ty=float64 */;
  %89 = floor_divide(%87, %88) /* ty=Tensor[(572), float64] */;
  %90 = cast(%var_1871, dtype="float64") /* ty=Tensor[(572), float64] */;
  %91 = shape_of(%89, dtype="int32") /* ty=Tensor[(1), int32] */;
  %92 = cast(%89, dtype="float64") /* ty=Tensor[(572), float64] */;
  %93 = dyn.reshape(%90, %91, newshape=[]) /* ty=Tensor[(?), float64] */;
  %94 = %71.0;
  %95 = %72.0;
  %96 = %77.0;
  %97 = %78.0;
  %98 = %81.0;
  %99 = %84.2;
  %100 = floor_mod(%92, %93) /* ty=Tensor[(572), float64] */;
  (%94, %95, %96, %var_1830, %97, %98, meta[relay.Constant][3] /* ty=Tensor[(325), float32] */, %99, meta[relay.Constant][4] /* ty=Tensor[(84), float32] */, %100)
}

def @func_1434() -> (Tensor[(3, ?, 7), int8], Tensor[(13, 4, 11), int8], Tensor[(572), int8]) {
  %101 = @func_895() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %102 = cast(meta[relay.Constant][5] /* ty=Tensor[(572), int8] */, dtype="int8") /* ty=Tensor[(572), int8] */;
  %103 = reshape(%102, newshape=[13, 4, 11]) /* ty=Tensor[(13, 4, 11), int8] */;
  %104 = @func_379(%103) /* ty=(Tensor[(13, 4, 11), int8],) */;
  %105 = %101.0;
  %106 = %104.0;
  (%105, %106, meta[relay.Constant][5] /* ty=Tensor[(572), int8] */)
}

def @func_4445(%var_4435: Tensor[(4, 15, 8), float64]) -> Tensor[(4, 15, 8), float32] {
  %107 = cast(%var_4435, dtype="float64") /* ty=Tensor[(4, 15, 8), float64] */;
  %108 = cos(%107) /* ty=Tensor[(4, 15, 8), float64] */;
  %109 = cast(%108, dtype="float32") /* ty=Tensor[(4, 15, 8), float32] */;
  sin(%109) /* ty=Tensor[(4, 15, 8), float32] */
}

def @func_4138() -> (Tensor[(3, 4, 7), float32], Tensor[(3, ?, 7), float64]) {
  %110 = @func_2354() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %111 = %110.0;
  %112 = cast(%111, dtype="float64") /* ty=Tensor[(3, ?, 7), float64] */;
  %113 = @func_995() /* ty=Tensor[(3, 4, 7), float32] */;
  %114 = log2(%112) /* ty=Tensor[(3, ?, 7), float64] */;
  (%113, %114)
}

def @func_834(%var_759: Tensor[(8, 3, 6), float64], %var_785: Tensor[(572), int8], %var_793: Tensor[(21, 1), float64], %var_806: Tensor[(7, 4, 3), bool]) -> (Tensor[(8, 3, 6), float64], Tensor[(15, 5, 15), float32], Tensor[(1125), float32], Tensor[(572), int8], Tensor[(21, 1), float64], Tensor[(315), float64], Tensor[(84), float64], Tensor[(840), float64], Tensor[(13, 4, 11), float32], Tensor[(7, 4, 3), bool], Tensor[(13, 4, 11), int8], Tensor[(15, 5, 15), float32]) {
  %115 = cast(%var_759, dtype="float64") /* ty=Tensor[(8, 3, 6), float64] */;
  %116 = cast(meta[relay.Constant][6] /* ty=Tensor[(1125), float32] */, dtype="float32") /* ty=Tensor[(1125), float32] */;
  %117 = reshape(%116, newshape=[15, 5, 15]) /* ty=Tensor[(15, 5, 15), float32] */;
  %118 = cast(%var_785, dtype="int8") /* ty=Tensor[(572), int8] */;
  %119 = reshape(%118, newshape=[13, 4, 11]) /* ty=Tensor[(13, 4, 11), int8] */;
  %120 = @func_379(%119) /* ty=(Tensor[(13, 4, 11), int8],) */;
  %121 = %120.0;
  %122 = cast(%121, dtype="float32") /* ty=Tensor[(13, 4, 11), float32] */;
  %123 = cast(%var_793, dtype="float64") /* ty=Tensor[(21, 1), float64] */;
  %124 = cast(meta[relay.Constant][7] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
  %125 = cast(meta[relay.Constant][8] /* ty=Tensor[(84), float64] */, dtype="float64") /* ty=Tensor[(84), float64] */;
  %126 = cast(meta[relay.Constant][9] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %127 = reshape(%123, newshape=[7, 1, 3]) /* ty=Tensor[(7, 1, 3), float64] */;
  %128 = reshape(%124, newshape=[7, 15, 3]) /* ty=Tensor[(7, 15, 3), float64] */;
  %129 = reshape(%125, newshape=[7, 4, 3]) /* ty=Tensor[(7, 4, 3), float64] */;
  %130 = reshape(%126, newshape=[840]) /* ty=Tensor[(840), float64] */;
  %131 = @func_254(%127, %128, %129, %130) /* ty=(Tensor[(7, 15, 3), float64], Tensor[(7, 4, 3), bool], Tensor[(5, 12, 14), int64], Tensor[(840), float64]) */;
  %132 = %131.1;
  %133 = cast(%var_806, dtype="bool") /* ty=Tensor[(7, 4, 3), bool] */;
  %134 = shape_of(%132, dtype="int32") /* ty=Tensor[(3), int32] */;
  %135 = cast(%132, dtype="bool") /* ty=Tensor[(7, 4, 3), bool] */;
  %136 = dyn.reshape(%133, %134, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %137 = cast(%121, dtype="int8") /* ty=Tensor[(13, 4, 11), int8] */;
  %138 = reshape(%137, newshape=[13, 4, 11]) /* ty=Tensor[(13, 4, 11), int8] */;
  %139 = @func_379(%138) /* ty=(Tensor[(13, 4, 11), int8],) */;
  %140 = cast(meta[relay.Constant][6] /* ty=Tensor[(1125), float32] */, dtype="float32") /* ty=Tensor[(1125), float32] */;
  %141 = reshape(%140, newshape=[15, 5, 15]) /* ty=Tensor[(15, 5, 15), float32] */;
  %142 = sigmoid(%115) /* ty=Tensor[(8, 3, 6), float64] */;
  %143 = @func_312(%117) /* ty=Tensor[(15, 5, 15), float32] */;
  %144 = cosh(%122) /* ty=Tensor[(13, 4, 11), float32] */;
  %145 = not_equal(%135, %136) /* ty=Tensor[(7, 4, 3), bool] */;
  %146 = %139.0;
  %147 = @func_312(%141) /* ty=Tensor[(15, 5, 15), float32] */;
  (%142, %143, meta[relay.Constant][6] /* ty=Tensor[(1125), float32] */, %var_785, %var_793, meta[relay.Constant][7] /* ty=Tensor[(315), float64] */, meta[relay.Constant][8] /* ty=Tensor[(84), float64] */, meta[relay.Constant][9] /* ty=Tensor[(840), float64] */, %144, %145, %146, %147)
}

def @func_1519() -> (Tensor[(3, ?, 7), int8],) {
  %148 = @func_925() /* ty=Tensor[(3, ?, 7), int8] */;
  (%148,)
}

def @func_3578() -> (Tensor[(5, 8, 9), uint16], Tensor[(7, 2, 16), float32]) {
  %149 = @func_1580() /* ty=(Tensor[(5, 8, 9), uint16],) */;
  %150 = %149.0;
  %151 = @func_3285() /* ty=Tensor[(7, 2, 16), float32] */;
  (%150, %151)
}

def @func_4265() -> (Tensor[(3, ?, 7), int8],) {
  %152 = @func_2234() /* ty=(Tensor[(572), float32], Tensor[(5, 8, 9), uint16], Tensor[(3, ?, 7), int8], Tensor[(3, ?, 7), float32]) */;
  %153 = %152.2;
  (%153,)
}

def @func_6254() -> (Tensor[(3, ?, 7), bool],) {
  %154 = @func_2999() /* ty=(Tensor[(3, ?, 7), bool], Tensor[(3, ?, 7), bool]) */;
  %155 = %154.1;
  (%155,)
}

def @func_5892(%var_5857: Tensor[(270), uint32]) -> (Tensor[(3, 9, 7), int32], Tensor[(3, ?, 7), int8], Tensor[(270), uint32]) {
  %156 = @func_5303() /* ty=(Tensor[(6, 4, 1), int32], Tensor[(3, 9, 7), int32]) */;
  %157 = cast(%var_5857, dtype="uint32") /* ty=Tensor[(270), uint32] */;
  %158 = reshape(%157, newshape=[6, 15, 3]) /* ty=Tensor[(6, 15, 3), uint32] */;
  %159 = @func_5018(%158) /* ty=(Tensor[(6, 15, 3), bool], Tensor[(3, ?, 7), int8]) */;
  %160 = %156.1;
  %161 = %159.1;
  (%160, %161, %var_5857)
}

def @main() -> (Tensor[(6, 6, 14), float64],) {
  %162 = cast(meta[relay.Constant][10] /* ty=Tensor[(6, 6, 14), float64] */, dtype="float64") /* ty=Tensor[(6, 6, 14), float64] */;
  %163 = exp(%162) /* ty=Tensor[(6, 6, 14), float64] */;
  (%163,)
}

def @func_2394(%var_2388: Tensor[(2, 21), float64]) -> (Tensor[(2, 21), uint16],) {
  %164 = @func_1748() /* ty=(Tensor[(3, 4, 7), float32], Tensor[(1125), float32], Tensor[(144), float64], Tensor[(143, 4), int8], Tensor[(1, 21), float64]) */;
  %165 = %164.4;
  %166 = cast(%165, dtype="uint16") /* ty=Tensor[(1, 21), uint16] */;
  %167 = cast(%var_2388, dtype="uint16") /* ty=Tensor[(2, 21), uint16] */;
  %168 = bitwise_xor(%166, %167) /* ty=Tensor[(2, 21), uint16] */;
  (%168,)
}

def @func_925() -> Tensor[(3, ?, 7), int8] {
  %169 = @func_895() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %169.0
}

def @func_4510() -> (Tensor[(8, 9, 15), int16], int16, Tensor[(1080), int16], Tensor[(3, ?, 7), uint64]) {
  %170 = cast(meta[relay.Constant][11] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %171 = cast(meta[relay.Constant][12] /* ty=Tensor[(1080), int16] */, dtype="int16") /* ty=Tensor[(1080), int16] */;
  %172 = reshape(%170, newshape=[]) /* ty=int16 */;
  %173 = reshape(%171, newshape=[8, 9, 15]) /* ty=Tensor[(8, 9, 15), int16] */;
  %174 = @func_3911() /* ty=(Tensor[(3, ?, 7), int8], Tensor[(1, 7, 13), float64], Tensor[(91, 1), uint8]) */;
  %175 = %174.0;
  %176 = cast(%175, dtype="float32") /* ty=Tensor[(3, ?, 7), float32] */;
  %177 = asin(%176) /* ty=Tensor[(3, ?, 7), float32] */;
  %178 = cast(%175, dtype="uint64") /* ty=Tensor[(3, ?, 7), uint64] */;
  %179 = shape_of(%177, dtype="int32") /* ty=Tensor[(3), int32] */;
  %180 = cast(%177, dtype="uint64") /* ty=Tensor[(3, ?, 7), uint64] */;
  %181 = dyn.reshape(%178, %179, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %182 = @func_1132(%172, %173) /* ty=Tensor[(8, 9, 15), int16] */;
  %183 = right_shift(%180, %181) /* ty=Tensor[(3, ?, 7), uint64] */;
  (%182, meta[relay.Constant][11] /* ty=int16 */, meta[relay.Constant][12] /* ty=Tensor[(1080), int16] */, %183)
}

def @func_2371() -> Tensor[(3, ?, 7), int8] {
  %184 = @func_1047() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %184.0
}

def @func_1132(%var_1102: int16, %var_1103: Tensor[(8, 9, 15), int16]) -> Tensor[(8, 9, 15), int16] {
  %185 = cast(%var_1102, dtype="int16") /* ty=int16 */;
  %186 = cast(%var_1103, dtype="int16") /* ty=Tensor[(8, 9, 15), int16] */;
  bitwise_or(%185, %186) /* ty=Tensor[(8, 9, 15), int16] */
}

def @func_5018(%var_5002: Tensor[(6, 15, 3), uint32]) -> (Tensor[(6, 15, 3), bool], Tensor[(3, ?, 7), int8]) {
  %187 = cast(%var_5002, dtype="bool") /* ty=Tensor[(6, 15, 3), bool] */;
  %188 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(6, 15, 3), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %189 = cast(meta[relay.Constant][13] /* ty=Tensor[(6, 15, 3), uint32] */, dtype="bool") /* ty=Tensor[(6, 15, 3), bool] */;
  %190 = dyn.reshape(%187, %188, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %191 = @func_4770() /* ty=(Tensor[(3, ?, 7), int8], Tensor[(5, 8, 9), float64]) */;
  %192 = greater(%189, %190) /* ty=Tensor[(6, 15, 3), bool] */;
  %193 = %191.0;
  (%192, %193)
}

def @func_1344(%var_1327: Tensor[(3, 4, 7), float32]) -> (Tensor[(3, 4, 7), uint16], Tensor[(3, 4, 7), float64], Tensor[(3, ?, 7), int8]) {
  %194 = @func_995() /* ty=Tensor[(3, 4, 7), float32] */;
  %195 = cast(%var_1327, dtype="uint16") /* ty=Tensor[(3, 4, 7), uint16] */;
  %196 = shape_of(%194, dtype="int32") /* ty=Tensor[(3), int32] */;
  %197 = cast(%194, dtype="uint16") /* ty=Tensor[(3, 4, 7), uint16] */;
  %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %199 = cast(%var_1327, dtype="float64") /* ty=Tensor[(3, 4, 7), float64] */;
  %200 = @func_1182() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %201 = left_shift(%197, %198) /* ty=Tensor[(3, 4, 7), uint16] */;
  %202 = log2(%199) /* ty=Tensor[(3, 4, 7), float64] */;
  %203 = %200.0;
  (%201, %202, %203)
}

def @func_1561(%var_1543: Tensor[(7, 3, 15), float64], %var_1544: Tensor[(7, 3, 15), float64]) -> (Tensor[(7, 3, 15), float64],) {
  %204 = cast(%var_1544, dtype="float64") /* ty=Tensor[(7, 3, 15), float64] */;
  %205 = shape_of(%var_1543, dtype="int32") /* ty=Tensor[(3), int32] */;
  %206 = cast(%var_1543, dtype="float64") /* ty=Tensor[(7, 3, 15), float64] */;
  %207 = dyn.reshape(%204, %205, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %208 = divide(%206, %207) /* ty=Tensor[(7, 3, 15), float64] */;
  (%208,)
}

def @func_3489() -> (Tensor[(3, ?, 7), float32],) {
  %209 = @func_925() /* ty=Tensor[(3, ?, 7), int8] */;
  %210 = @func_895() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %211 = %210.0;
  %212 = cast(%211, dtype="float32") /* ty=Tensor[(3, ?, 7), float32] */;
  %213 = shape_of(%209, dtype="int32") /* ty=Tensor[(3), int32] */;
  %214 = cast(%209, dtype="float32") /* ty=Tensor[(3, ?, 7), float32] */;
  %215 = dyn.reshape(%212, %213, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %216 = minimum(%214, %215) /* ty=Tensor[(3, ?, 7), float32] */;
  (%216,)
}

def @func_5679() -> (int16, Tensor[(7, 3, 15), float64], Tensor[(4, 15, 8), float32], Tensor[(480), float64]) {
  %217 = @func_5426() /* ty=(int16,) */;
  %218 = @func_5421() /* ty=(Tensor[(16, 32), bool], Tensor[(540, 2), int16], Tensor[(5, 8, 9), uint16], Tensor[(3, ?, 7), float32], Tensor[(7, 3, 15), float64], Tensor[(84), bool], Tensor[(3, 4, 7), float32]) */;
  %219 = cast(meta[relay.Constant][14] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %220 = reshape(%219, newshape=[4, 15, 8]) /* ty=Tensor[(4, 15, 8), float64] */;
  %221 = %217.0;
  %222 = %218.4;
  %223 = @func_4445(%220) /* ty=Tensor[(4, 15, 8), float32] */;
  (%221, %222, %223, meta[relay.Constant][14] /* ty=Tensor[(480), float64] */)
}

def @func_5499() -> (Tensor[(3, ?, 7), int8], Tensor[(3, ?, 7), int8]) {
  %224 = @func_2409() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %225 = %224.0;
  %226 = @func_1790() /* ty=Tensor[(3, ?, 7), int8] */;
  (%225, %226)
}

def @func_5207(%var_5177: bool) -> (Tensor[(8, 9, 15), int16], bool, Tensor[(1080, 1), int16], Tensor[(3, ?, 7), int8], Tensor[(5, 8, 9), uint16], Tensor[(143, 4), float32]) {
  %227 = cast(%var_5177, dtype="bool") /* ty=bool */;
  %228 = cast(meta[relay.Constant][15] /* ty=Tensor[(1080, 1), int16] */, dtype="int16") /* ty=Tensor[(1080, 1), int16] */;
  %229 = reshape(%227, newshape=[]) /* ty=bool */;
  %230 = reshape(%228, newshape=[1080]) /* ty=Tensor[(1080), int16] */;
  %231 = @func_2617(%229, %230) /* ty=(Tensor[(572), float32], Tensor[(3, 4, 7), float32], Tensor[(16, 32), bool], Tensor[(13, 4, 11), float32], Tensor[(72, 2), float64], Tensor[(7, 3), float64], Tensor[(572), bool], Tensor[(15, 5, 15), float32], Tensor[(15, 75), float32], Tensor[(3, 4, 7), uint16], Tensor[(8, 9, 15), int16], Tensor[(1080), int16]) */;
  %232 = @func_1047() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %233 = @func_1748() /* ty=(Tensor[(3, 4, 7), float32], Tensor[(1125), float32], Tensor[(144), float64], Tensor[(143, 4), int8], Tensor[(1, 21), float64]) */;
  %234 = %233.3;
  %235 = cast(%234, dtype="float32") /* ty=Tensor[(143, 4), float32] */;
  %236 = sigmoid(%235) /* ty=Tensor[(143, 4), float32] */;
  %237 = cast(%236, dtype="float32") /* ty=Tensor[(143, 4), float32] */;
  %238 = cos(%237) /* ty=Tensor[(143, 4), float32] */;
  %239 = cast(%238, dtype="float32") /* ty=Tensor[(143, 4), float32] */;
  %240 = %231.10;
  %241 = %232.0;
  %242 = @func_3919() /* ty=Tensor[(5, 8, 9), uint16] */;
  %243 = atan(%239) /* ty=Tensor[(143, 4), float32] */;
  (%240, %var_5177, meta[relay.Constant][15] /* ty=Tensor[(1080, 1), int16] */, %241, %242, %243)
}

def @func_5421() -> (Tensor[(16, 32), bool], Tensor[(540, 2), int16], Tensor[(5, 8, 9), uint16], Tensor[(3, ?, 7), float32], Tensor[(7, 3, 15), float64], Tensor[(84), bool], Tensor[(3, 4, 7), float32]) {
  %244 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %245 = cast(meta[relay.Constant][16] /* ty=Tensor[(540, 2), int16] */, dtype="int16") /* ty=Tensor[(540, 2), int16] */;
  %246 = reshape(%244, newshape=[]) /* ty=bool */;
  %247 = reshape(%245, newshape=[1080]) /* ty=Tensor[(1080), int16] */;
  %248 = @func_2617(%246, %247) /* ty=(Tensor[(572), float32], Tensor[(3, 4, 7), float32], Tensor[(16, 32), bool], Tensor[(13, 4, 11), float32], Tensor[(72, 2), float64], Tensor[(7, 3), float64], Tensor[(572), bool], Tensor[(15, 5, 15), float32], Tensor[(15, 75), float32], Tensor[(3, 4, 7), uint16], Tensor[(8, 9, 15), int16], Tensor[(1080), int16]) */;
  %249 = @func_1580() /* ty=(Tensor[(5, 8, 9), uint16],) */;
  %250 = @func_1047() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %251 = %250.0;
  %252 = cast(%251, dtype="float32") /* ty=Tensor[(3, ?, 7), float32] */;
  %253 = cast(False /* ty=bool */, dtype="float32") /* ty=float32 */;
  %254 = cast(meta[relay.Constant][17] /* ty=Tensor[(84), bool] */, dtype="bool") /* ty=Tensor[(84), bool] */;
  %255 = reshape(%254, newshape=[84]) /* ty=Tensor[(84), bool] */;
  %256 = @func_2724(%255) /* ty=(Tensor[(3, ?, 7), int8], Tensor[(15, 5, 15), float32], Tensor[(2, 72), float64], Tensor[(11, 52), int8], Tensor[(84), bool], Tensor[(13, 4, 11), float32], Tensor[(7, 3, 15), float64], Tensor[(315), float64], Tensor[(3, 4, 7), float32], Tensor[(7, 3, 15), float64], Tensor[(3, ?, 7), int8]) */;
  %257 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %258 = reshape(%257, newshape=[]) /* ty=bool */;
  %259 = @func_3628(%258) /* ty=(Tensor[(3, ?, 7), int8], Tensor[(3, 4, 7), float32], bool, Tensor[(3, 4, 7), float32], Tensor[(3, ?, 7), int8], Tensor[(1080), float32], Tensor[(3, ?, 7), int8]) */;
  %260 = %248.2;
  %261 = %249.0;
  %262 = floor_divide(%252, %253) /* ty=Tensor[(3, ?, 7), float32] */;
  %263 = %256.9;
  %264 = %259.3;
  (%260, meta[relay.Constant][16] /* ty=Tensor[(540, 2), int16] */, %261, %262, %263, meta[relay.Constant][17] /* ty=Tensor[(84), bool] */, %264)
}

def @func_1182() -> (Tensor[(3, ?, 7), int8],) {
  %265 = @func_1047() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %266 = %265.0;
  (%266,)
}

def @func_2877() -> (Tensor[(3, 4, 7), float32], Tensor[(7, 3, 15), float64], Tensor[(315), float64]) {
  %267 = @func_1748() /* ty=(Tensor[(3, 4, 7), float32], Tensor[(1125), float32], Tensor[(144), float64], Tensor[(143, 4), int8], Tensor[(1, 21), float64]) */;
  %268 = cast(meta[relay.Constant][18] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
  %269 = cast(meta[relay.Constant][18] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
  %270 = reshape(%268, newshape=[7, 3, 15]) /* ty=Tensor[(7, 3, 15), float64] */;
  %271 = reshape(%269, newshape=[7, 3, 15]) /* ty=Tensor[(7, 3, 15), float64] */;
  %272 = @func_1561(%270, %271) /* ty=(Tensor[(7, 3, 15), float64],) */;
  %273 = %267.0;
  %274 = %272.0;
  (%273, %274, meta[relay.Constant][18] /* ty=Tensor[(315), float64] */)
}

def @func_5918() -> (Tensor[(5, 8, 9), uint16],) {
  %275 = @func_3919() /* ty=Tensor[(5, 8, 9), uint16] */;
  (%275,)
}

def @func_6278(%var_6268: Tensor[(16, 7, 8), float32]) -> Tensor[(16, 7, 8), float32] {
  %276 = cast(%var_6268, dtype="float32") /* ty=Tensor[(16, 7, 8), float32] */;
  sin(%276) /* ty=Tensor[(16, 7, 8), float32] */
}

def @func_895() -> (Tensor[(3, ?, 7), int8],) {
  %277 = cast(meta[relay.Constant][19] /* ty=Tensor[(3, 1, 7), float32] */, dtype="float32") /* ty=Tensor[(3, 1, 7), float32] */;
  %278 = sin(%277) /* ty=Tensor[(3, 1, 7), float32] */;
  %279 = cast(%278, dtype="int8") /* ty=Tensor[(3, 1, 7), int8] */;
  %280 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(3, 1, 7), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %281 = cast(meta[relay.Constant][19] /* ty=Tensor[(3, 1, 7), float32] */, dtype="int8") /* ty=Tensor[(3, 1, 7), int8] */;
  %282 = dyn.reshape(%279, %280, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %283 = left_shift(%281, %282) /* ty=Tensor[(3, ?, 7), int8] */;
  (%283,)
}

def @func_2999() -> (Tensor[(3, ?, 7), bool], Tensor[(3, ?, 7), bool]) {
  %284 = @func_2457() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %285 = %284.0;
  %286 = cast(%285, dtype="float64") /* ty=Tensor[(3, ?, 7), float64] */;
  %287 = atanh(%286) /* ty=Tensor[(3, ?, 7), float64] */;
  %288 = cast(%285, dtype="uint16") /* ty=Tensor[(3, ?, 7), uint16] */;
  %289 = shape_of(%287, dtype="int32") /* ty=Tensor[(3), int32] */;
  %290 = cast(%287, dtype="uint16") /* ty=Tensor[(3, ?, 7), uint16] */;
  %291 = dyn.reshape(%288, %289, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %292 = bitwise_and(%290, %291) /* ty=Tensor[(3, ?, 7), uint16] */;
  %293 = cast(%292, dtype="bool") /* ty=Tensor[(3, ?, 7), bool] */;
  %294 = shape_of(%287, dtype="int32") /* ty=Tensor[(3), int32] */;
  %295 = cast(%287, dtype="bool") /* ty=Tensor[(3, ?, 7), bool] */;
  %296 = dyn.reshape(%293, %294, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %297 = cast(%287, dtype="bool") /* ty=Tensor[(3, ?, 7), bool] */;
  %298 = shape_of(%285, dtype="int32") /* ty=Tensor[(3), int32] */;
  %299 = cast(%285, dtype="bool") /* ty=Tensor[(3, ?, 7), bool] */;
  %300 = dyn.reshape(%297, %298, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %301 = greater_equal(%295, %296) /* ty=Tensor[(3, ?, 7), bool] */;
  %302 = logical_and(%299, %300) /* ty=Tensor[(3, ?, 7), bool] */;
  (%301, %302)
}

def @func_1580() -> (Tensor[(5, 8, 9), uint16],) {
  %303 = cast(meta[relay.Constant][21] /* ty=Tensor[(5, 8, 9), uint16] */, dtype="uint16") /* ty=Tensor[(5, 8, 9), uint16] */;
  %304 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(5, 8, 9), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %305 = cast(meta[relay.Constant][20] /* ty=Tensor[(5, 8, 9), uint16] */, dtype="uint16") /* ty=Tensor[(5, 8, 9), uint16] */;
  %306 = dyn.reshape(%303, %304, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %307 = add(%305, %306) /* ty=Tensor[(5, 8, 9), uint16] */;
  (%307,)
}

def @func_4913(%var_4895: Tensor[(21, 4), bool]) -> (Tensor[(3, 5, 7), bool], Tensor[(11, 52), int8], Tensor[(21, 4), bool], Tensor[(8, 4, 3), int16]) {
  %308 = @func_4374() /* ty=Tensor[(3, ?, 7), int8] */;
  %309 = cast(%308, dtype="bool") /* ty=Tensor[(3, ?, 7), bool] */;
  %310 = cast(meta[relay.Constant][22] /* ty=Tensor[(3, 5, 7), int8] */, dtype="bool") /* ty=Tensor[(3, 5, 7), bool] */;
  %311 = cast(%var_4895, dtype="bool") /* ty=Tensor[(21, 4), bool] */;
  %312 = reshape(%311, newshape=[84]) /* ty=Tensor[(84), bool] */;
  %313 = @func_2724(%312) /* ty=(Tensor[(3, ?, 7), int8], Tensor[(15, 5, 15), float32], Tensor[(2, 72), float64], Tensor[(11, 52), int8], Tensor[(84), bool], Tensor[(13, 4, 11), float32], Tensor[(7, 3, 15), float64], Tensor[(315), float64], Tensor[(3, 4, 7), float32], Tensor[(7, 3, 15), float64], Tensor[(3, ?, 7), int8]) */;
  %314 = cast(meta[relay.Constant][23] /* ty=Tensor[(96), uint16] */, dtype="uint16") /* ty=Tensor[(96), uint16] */;
  %315 = cast(meta[relay.Constant][23] /* ty=Tensor[(96), uint16] */, dtype="uint16") /* ty=Tensor[(96), uint16] */;
  %316 = reshape(%314, newshape=[8, 4, 3]) /* ty=Tensor[(8, 4, 3), uint16] */;
  %317 = reshape(%315, newshape=[8, 4, 3]) /* ty=Tensor[(8, 4, 3), uint16] */;
  %318 = @func_2260(%316, %317) /* ty=Tensor[(8, 4, 3), uint16] */;
  %319 = cast(meta[relay.Constant][23] /* ty=Tensor[(96), uint16] */, dtype="int16") /* ty=Tensor[(96), int16] */;
  %320 = shape_of(%318, dtype="int32") /* ty=Tensor[(3), int32] */;
  %321 = cast(%318, dtype="int16") /* ty=Tensor[(8, 4, 3), int16] */;
  %322 = dyn.reshape(%319, %320, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %323 = logical_or(%309, %310) /* ty=Tensor[(3, 5, 7), bool] */;
  %324 = %313.3;
  %325 = left_shift(%321, %322) /* ty=Tensor[(8, 4, 3), int16] */;
  (%323, %324, %var_4895, %325)
}

def @func_6315() -> (Tensor[(3, ?, 7), int8], Tensor[(572), float32], Tensor[(8, 9, 15), int16], bool, Tensor[(270, 4), int16]) {
  %326 = @func_2159() /* ty=(Tensor[(572), float32],) */;
  %327 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %328 = cast(meta[relay.Constant][24] /* ty=Tensor[(270, 4), int16] */, dtype="int16") /* ty=Tensor[(270, 4), int16] */;
  %329 = reshape(%327, newshape=[]) /* ty=bool */;
  %330 = reshape(%328, newshape=[1080]) /* ty=Tensor[(1080), int16] */;
  %331 = @func_2617(%329, %330) /* ty=(Tensor[(572), float32], Tensor[(3, 4, 7), float32], Tensor[(16, 32), bool], Tensor[(13, 4, 11), float32], Tensor[(72, 2), float64], Tensor[(7, 3), float64], Tensor[(572), bool], Tensor[(15, 5, 15), float32], Tensor[(15, 75), float32], Tensor[(3, 4, 7), uint16], Tensor[(8, 9, 15), int16], Tensor[(1080), int16]) */;
  %332 = @func_925() /* ty=Tensor[(3, ?, 7), int8] */;
  %333 = %326.0;
  %334 = %331.10;
  (%332, %333, %334, False /* ty=bool */, meta[relay.Constant][24] /* ty=Tensor[(270, 4), int16] */)
}

def @func_6033(%var_5984: Tensor[(4, 36), float64], %var_5985: Tensor[(572), int8], %var_5987: Tensor[(84), bool]) -> (Tensor[(8, 5, 5), bool], Tensor[(13, 4, 11), float32], Tensor[(4, 36), float64], Tensor[(572), int8], Tensor[(21), float64], Tensor[(84), bool], Tensor[(8, 4, 3), int16]) {
  %335 = cast(meta[relay.Constant][26] /* ty=Tensor[(8, 5, 5), uint16] */, dtype="bool") /* ty=Tensor[(8, 5, 5), bool] */;
  %336 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(8, 5, 5), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %337 = cast(meta[relay.Constant][25] /* ty=Tensor[(8, 5, 5), uint16] */, dtype="bool") /* ty=Tensor[(8, 5, 5), bool] */;
  %338 = dyn.reshape(%335, %336, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %339 = cast(%var_5984, dtype="float64") /* ty=Tensor[(4, 36), float64] */;
  %340 = cast(%var_5985, dtype="int8") /* ty=Tensor[(572), int8] */;
  %341 = cast(meta[relay.Constant][27] /* ty=Tensor[(21), float64] */, dtype="float64") /* ty=Tensor[(21), float64] */;
  %342 = cast(%var_5987, dtype="bool") /* ty=Tensor[(84), bool] */;
  %343 = reshape(%339, newshape=[8, 3, 6]) /* ty=Tensor[(8, 3, 6), float64] */;
  %344 = reshape(%340, newshape=[572]) /* ty=Tensor[(572), int8] */;
  %345 = reshape(%341, newshape=[21, 1]) /* ty=Tensor[(21, 1), float64] */;
  %346 = reshape(%342, newshape=[7, 4, 3]) /* ty=Tensor[(7, 4, 3), bool] */;
  %347 = @func_834(%343, %344, %345, %346) /* ty=(Tensor[(8, 3, 6), float64], Tensor[(15, 5, 15), float32], Tensor[(1125), float32], Tensor[(572), int8], Tensor[(21, 1), float64], Tensor[(315), float64], Tensor[(84), float64], Tensor[(840), float64], Tensor[(13, 4, 11), float32], Tensor[(7, 4, 3), bool], Tensor[(13, 4, 11), int8], Tensor[(15, 5, 15), float32]) */;
  %348 = cast(%var_5987, dtype="bool") /* ty=Tensor[(84), bool] */;
  %349 = reshape(%348, newshape=[21, 4]) /* ty=Tensor[(21, 4), bool] */;
  %350 = @func_4913(%349) /* ty=(Tensor[(3, 5, 7), bool], Tensor[(11, 52), int8], Tensor[(21, 4), bool], Tensor[(8, 4, 3), int16]) */;
  %351 = less(%337, %338) /* ty=Tensor[(8, 5, 5), bool] */;
  %352 = %347.8;
  %353 = %350.3;
  (%351, %352, %var_5984, %var_5985, meta[relay.Constant][27] /* ty=Tensor[(21), float64] */, %var_5987, %353)
}

def @func_312(%var_308: Tensor[(15, 5, 15), float32]) -> Tensor[(15, 5, 15), float32] {
  %354 = cast(%var_308, dtype="float32") /* ty=Tensor[(15, 5, 15), float32] */;
  sinh(%354) /* ty=Tensor[(15, 5, 15), float32] */
}

def @func_6415() -> Tensor[(3, 12, 7), float32] {
  %355 = cast(meta[relay.Constant][28] /* ty=Tensor[(3, 12, 7), float32] */, dtype="float32") /* ty=Tensor[(3, 12, 7), float32] */;
  %356 = log(%355) /* ty=Tensor[(3, 12, 7), float32] */;
  %357 = cast(%356, dtype="float32") /* ty=Tensor[(3, 12, 7), float32] */;
  exp(%357) /* ty=Tensor[(3, 12, 7), float32] */
}

def @func_3260() -> (Tensor[(3, 7, 7), float32], Tensor[(3, 4, 7), float32]) {
  %358 = @func_1519() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %359 = %358.0;
  %360 = cast(%359, dtype="float32") /* ty=Tensor[(3, ?, 7), float32] */;
  %361 = cast(meta[relay.Constant][29] /* ty=Tensor[(3, 7, 7), int8] */, dtype="float32") /* ty=Tensor[(3, 7, 7), float32] */;
  %362 = @func_1311() /* ty=(Tensor[(3, 4, 7), float32],) */;
  %363 = floor_divide(%360, %361) /* ty=Tensor[(3, 7, 7), float32] */;
  %364 = %362.0;
  (%363, %364)
}

def @func_4070(%var_4027: Tensor[(5, 8, 9), uint16]) -> (Tensor[(5, 8, 9), float64], Tensor[(5, 8, 9), float32]) {
  %365 = @func_3919() /* ty=Tensor[(5, 8, 9), uint16] */;
  %366 = cast(%var_4027, dtype="float64") /* ty=Tensor[(5, 8, 9), float64] */;
  %367 = shape_of(%365, dtype="int32") /* ty=Tensor[(3), int32] */;
  %368 = cast(%365, dtype="float64") /* ty=Tensor[(5, 8, 9), float64] */;
  %369 = dyn.reshape(%366, %367, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %370 = cast(%var_4027, dtype="float32") /* ty=Tensor[(5, 8, 9), float32] */;
  %371 = mod(%368, %369) /* ty=Tensor[(5, 8, 9), float64] */;
  %372 = erf(%370) /* ty=Tensor[(5, 8, 9), float32] */;
  (%371, %372)
}

def @func_1677(%var_1594: Tensor[(13, 5, 5), float32]) -> (Tensor[(13, 5, 5), uint8], Tensor[(3, ?, 7), int8], Tensor[(7, 3, 15), float64], Tensor[(315), float64]) {
  %373 = cast(%var_1594, dtype="float32") /* ty=Tensor[(13, 5, 5), float32] */;
  %374 = atan(%373) /* ty=Tensor[(13, 5, 5), float32] */;
  %375 = cast(%var_1594, dtype="uint8") /* ty=Tensor[(13, 5, 5), uint8] */;
  %376 = shape_of(%374, dtype="int32") /* ty=Tensor[(3), int32] */;
  %377 = cast(%374, dtype="uint8") /* ty=Tensor[(13, 5, 5), uint8] */;
  %378 = dyn.reshape(%375, %376, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %379 = @func_1047() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %380 = cast(meta[relay.Constant][30] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
  %381 = cast(meta[relay.Constant][30] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
  %382 = reshape(%380, newshape=[7, 3, 15]) /* ty=Tensor[(7, 3, 15), float64] */;
  %383 = reshape(%381, newshape=[7, 3, 15]) /* ty=Tensor[(7, 3, 15), float64] */;
  %384 = @func_1561(%382, %383) /* ty=(Tensor[(7, 3, 15), float64],) */;
  %385 = multiply(%377, %378) /* ty=Tensor[(13, 5, 5), uint8] */;
  %386 = %379.0;
  %387 = %384.0;
  (%385, %386, %387, meta[relay.Constant][30] /* ty=Tensor[(315), float64] */)
}

def @func_4401(%var_4396: Tensor[(84), bool]) -> (Tensor[(5, 8, 9), uint16], Tensor[(5, 12, 14), float64], Tensor[(12, 70), float64], Tensor[(8, 18), float64], Tensor[(84), bool]) {
  %388 = @func_1580() /* ty=(Tensor[(5, 8, 9), uint16],) */;
  %389 = cast(meta[relay.Constant][31] /* ty=Tensor[(12, 70), float64] */, dtype="float64") /* ty=Tensor[(12, 70), float64] */;
  %390 = reshape(%389, newshape=[5, 12, 14]) /* ty=Tensor[(5, 12, 14), float64] */;
  %391 = @func_115(%390) /* ty=(Tensor[(5, 12, 14), float64], Tensor[(5, 12, 14), int64], Tensor[(5, 12, 14), int8]) */;
  %392 = cast(%var_4396, dtype="bool") /* ty=Tensor[(84), bool] */;
  %393 = reshape(%392, newshape=[84]) /* ty=Tensor[(84), bool] */;
  %394 = @func_3217(%393) /* ty=(Tensor[(11, 52), int8], Tensor[(84), bool], Tensor[(3, ?, 7), float32], Tensor[(7, 4, 3), bool], Tensor[(8, 18), float64]) */;
  %395 = %388.0;
  %396 = %391.0;
  %397 = %394.4;
  (%395, %396, meta[relay.Constant][31] /* ty=Tensor[(12, 70), float64] */, %397, %var_4396)
}

def @func_2354() -> (Tensor[(3, ?, 7), int8],) {
  %398 = @func_1475() /* ty=(Tensor[(3, ?, 7), int8], Tensor[(3, 4, 7), float32]) */;
  %399 = %398.0;
  (%399,)
}

def @func_3919() -> Tensor[(5, 8, 9), uint16] {
  %400 = @func_3578() /* ty=(Tensor[(5, 8, 9), uint16], Tensor[(7, 2, 16), float32]) */;
  %400.0
}

def @func_2260(%var_2255: Tensor[(8, 4, 3), uint16], %var_2256: Tensor[(8, 4, 3), uint16]) -> Tensor[(8, 4, 3), uint16] {
  %401 = cast(%var_2256, dtype="uint16") /* ty=Tensor[(8, 4, 3), uint16] */;
  %402 = shape_of(%var_2255, dtype="int32") /* ty=Tensor[(3), int32] */;
  %403 = cast(%var_2255, dtype="uint16") /* ty=Tensor[(8, 4, 3), uint16] */;
  %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  minimum(%403, %404) /* ty=Tensor[(8, 4, 3), uint16] */
}

def @func_5303() -> (Tensor[(6, 4, 1), int32], Tensor[(3, 9, 7), int32]) {
  %405 = @func_4843() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %406 = %405.0;
  %407 = cast(%406, dtype="int32") /* ty=Tensor[(3, ?, 7), int32] */;
  %408 = cast(meta[relay.Constant][32] /* ty=Tensor[(3, 9, 7), int8] */, dtype="int32") /* ty=Tensor[(3, 9, 7), int32] */;
  %409 = @func_3395() /* ty=Tensor[(6, 4, 1), int32] */;
  %410 = bitwise_and(%407, %408) /* ty=Tensor[(3, 9, 7), int32] */;
  (%409, %410)
}

def @func_4415() -> (Tensor[(5, 12, 14), float64],) {
  %411 = @func_3782() /* ty=(Tensor[(3, ?, 7), int8], Tensor[(5, 12, 14), float64], Tensor[(840), float64], Tensor[(7, 2, 16), float32]) */;
  %412 = %411.1;
  (%412,)
}

def @func_5777() -> (Tensor[(5, 12, 14), float64], Tensor[(5, 8, 9), uint16], Tensor[(3, ?, 7), int8], Tensor[(3, 4, 7), bool]) {
  %413 = @func_3882() /* ty=(Tensor[(5, 12, 14), float64],) */;
  %414 = @func_1580() /* ty=(Tensor[(5, 8, 9), uint16],) */;
  %415 = @func_1311() /* ty=(Tensor[(3, 4, 7), float32],) */;
  %416 = %415.0;
  %417 = cast(%416, dtype="float32") /* ty=Tensor[(3, 4, 7), float32] */;
  %418 = acosh(%417) /* ty=Tensor[(3, 4, 7), float32] */;
  %419 = cast(%416, dtype="bool") /* ty=Tensor[(3, 4, 7), bool] */;
  %420 = shape_of(%418, dtype="int32") /* ty=Tensor[(3), int32] */;
  %421 = cast(%418, dtype="bool") /* ty=Tensor[(3, 4, 7), bool] */;
  %422 = dyn.reshape(%419, %420, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %423 = %413.0;
  %424 = %414.0;
  %425 = @func_2371() /* ty=Tensor[(3, ?, 7), int8] */;
  %426 = logical_or(%421, %422) /* ty=Tensor[(3, 4, 7), bool] */;
  (%423, %424, %425, %426)
}

def @func_1475() -> (Tensor[(3, ?, 7), int8], Tensor[(3, 4, 7), float32]) {
  %427 = @func_1182() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %428 = %427.0;
  %429 = @func_995() /* ty=Tensor[(3, 4, 7), float32] */;
  (%428, %429)
}

def @func_5426() -> (int16,) {
  %430 = @func_4510() /* ty=(Tensor[(8, 9, 15), int16], int16, Tensor[(1080), int16], Tensor[(3, ?, 7), uint64]) */;
  %431 = %430.1;
  (%431,)
}

def @func_6158(%var_6151: Tensor[(14, 13, 7), float32]) -> (Tensor[(14, 13, 7), float64],) {
  %432 = cast(%var_6151, dtype="float32") /* ty=Tensor[(14, 13, 7), float32] */;
  %433 = log2(%432) /* ty=Tensor[(14, 13, 7), float32] */;
  %434 = cast(%433, dtype="float64") /* ty=Tensor[(14, 13, 7), float64] */;
  %435 = asinh(%434) /* ty=Tensor[(14, 13, 7), float64] */;
  (%435,)
}

def @func_1731(%var_1723: Tensor[(315), float64]) -> (Tensor[(15, 5, 15), float32], Tensor[(1125), float32], Tensor[(7, 3, 15), float64], Tensor[(315), float64], Tensor[(3, ?, 7), bool]) {
  %436 = cast(meta[relay.Constant][33] /* ty=Tensor[(1125), float32] */, dtype="float32") /* ty=Tensor[(1125), float32] */;
  %437 = reshape(%436, newshape=[15, 5, 15]) /* ty=Tensor[(15, 5, 15), float32] */;
  %438 = cast(%var_1723, dtype="float64") /* ty=Tensor[(315), float64] */;
  %439 = cast(%var_1723, dtype="float64") /* ty=Tensor[(315), float64] */;
  %440 = reshape(%438, newshape=[7, 3, 15]) /* ty=Tensor[(7, 3, 15), float64] */;
  %441 = reshape(%439, newshape=[7, 3, 15]) /* ty=Tensor[(7, 3, 15), float64] */;
  %442 = @func_1561(%440, %441) /* ty=(Tensor[(7, 3, 15), float64],) */;
  %443 = @func_925() /* ty=Tensor[(3, ?, 7), int8] */;
  %444 = cast(%443, dtype="float64") /* ty=Tensor[(3, ?, 7), float64] */;
  %445 = erf(%444) /* ty=Tensor[(3, ?, 7), float64] */;
  %446 = cast(%443, dtype="bool") /* ty=Tensor[(3, ?, 7), bool] */;
  %447 = shape_of(%445, dtype="int32") /* ty=Tensor[(3), int32] */;
  %448 = cast(%445, dtype="bool") /* ty=Tensor[(3, ?, 7), bool] */;
  %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %450 = @func_312(%437) /* ty=Tensor[(15, 5, 15), float32] */;
  %451 = %442.0;
  %452 = less(%448, %449) /* ty=Tensor[(3, ?, 7), bool] */;
  (%450, meta[relay.Constant][33] /* ty=Tensor[(1125), float32] */, %451, %var_1723, %452)
}

def @func_5581() -> (Tensor[(540, 2), uint8], Tensor[(3, 4, 7), float32]) {
  %453 = @func_5421() /* ty=(Tensor[(16, 32), bool], Tensor[(540, 2), int16], Tensor[(5, 8, 9), uint16], Tensor[(3, ?, 7), float32], Tensor[(7, 3, 15), float64], Tensor[(84), bool], Tensor[(3, 4, 7), float32]) */;
  %454 = %453.1;
  %455 = cast(meta[relay.Constant][34] /* ty=Tensor[(540, 2), int16] */, dtype="float32") /* ty=Tensor[(540, 2), float32] */;
  %456 = shape_of(%454, dtype="int32") /* ty=Tensor[(2), int32] */;
  %457 = cast(%454, dtype="float32") /* ty=Tensor[(540, 2), float32] */;
  %458 = dyn.reshape(%455, %456, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %459 = mod(%457, %458) /* ty=Tensor[(540, 2), float32] */;
  %460 = cast(%459, dtype="uint8") /* ty=Tensor[(540, 2), uint8] */;
  %461 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(540, 2), int16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %462 = cast(meta[relay.Constant][34] /* ty=Tensor[(540, 2), int16] */, dtype="uint8") /* ty=Tensor[(540, 2), uint8] */;
  %463 = dyn.reshape(%460, %461, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %464 = @func_1311() /* ty=(Tensor[(3, 4, 7), float32],) */;
  %465 = minimum(%462, %463) /* ty=Tensor[(540, 2), uint8] */;
  %466 = %464.0;
  (%465, %466)
}

def @func_2234() -> (Tensor[(572), float32], Tensor[(5, 8, 9), uint16], Tensor[(3, ?, 7), int8], Tensor[(3, ?, 7), float32]) {
  %467 = @func_2159() /* ty=(Tensor[(572), float32],) */;
  %468 = @func_1580() /* ty=(Tensor[(5, 8, 9), uint16],) */;
  %469 = @func_1519() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %470 = @func_925() /* ty=Tensor[(3, ?, 7), int8] */;
  %471 = cast(%470, dtype="float32") /* ty=Tensor[(3, ?, 7), float32] */;
  %472 = exp(%471) /* ty=Tensor[(3, ?, 7), float32] */;
  %473 = cast(%472, dtype="float32") /* ty=Tensor[(3, ?, 7), float32] */;
  %474 = %467.0;
  %475 = %468.0;
  %476 = %469.0;
  %477 = sigmoid(%473) /* ty=Tensor[(3, ?, 7), float32] */;
  (%474, %475, %476, %477)
}

def @func_3285() -> Tensor[(7, 2, 16), float32] {
  %478 = cast(meta[relay.Constant][35] /* ty=Tensor[(7, 2, 16), float32] */, dtype="float32") /* ty=Tensor[(7, 2, 16), float32] */;
  cos(%478) /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_3843(%var_3814: Tensor[(3, 8, 7), int8], %var_3823: Tensor[(3, 8, 7), float32]) -> Tensor[(3, 8, 7), uint32] {
  %479 = @func_2457() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %480 = %479.0;
  %481 = cast(%480, dtype="float32") /* ty=Tensor[(3, ?, 7), float32] */;
  %482 = cast(%var_3814, dtype="float32") /* ty=Tensor[(3, 8, 7), float32] */;
  %483 = power(%481, %482) /* ty=Tensor[(3, 8, 7), float32] */;
  %484 = cast(%var_3823, dtype="float32") /* ty=Tensor[(3, 8, 7), float32] */;
  %485 = shape_of(%483, dtype="int32") /* ty=Tensor[(3), int32] */;
  %486 = cast(%483, dtype="float32") /* ty=Tensor[(3, 8, 7), float32] */;
  %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %488 = multiply(%486, %487) /* ty=Tensor[(3, 8, 7), float32] */;
  %489 = cast(%488, dtype="uint32") /* ty=Tensor[(3, 8, 7), uint32] */;
  %490 = shape_of(%483, dtype="int32") /* ty=Tensor[(3), int32] */;
  %491 = cast(%483, dtype="uint32") /* ty=Tensor[(3, 8, 7), uint32] */;
  %492 = dyn.reshape(%489, %490, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_and(%491, %492) /* ty=Tensor[(3, 8, 7), uint32] */
}

def @func_2724(%var_2645: Tensor[(84), bool]) -> (Tensor[(3, ?, 7), int8], Tensor[(15, 5, 15), float32], Tensor[(2, 72), float64], Tensor[(11, 52), int8], Tensor[(84), bool], Tensor[(13, 4, 11), float32], Tensor[(7, 3, 15), float64], Tensor[(315), float64], Tensor[(3, 4, 7), float32], Tensor[(7, 3, 15), float64], Tensor[(3, ?, 7), int8]) {
  %493 = @func_1047() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %494 = cast(meta[relay.Constant][36] /* ty=Tensor[(2, 72), float64] */, dtype="float64") /* ty=Tensor[(2, 72), float64] */;
  %495 = cast(meta[relay.Constant][37] /* ty=Tensor[(11, 52), int8] */, dtype="int8") /* ty=Tensor[(11, 52), int8] */;
  %496 = %493.0;
  %497 = cast(%496, dtype="float64") /* ty=Tensor[(3, ?, 7), float64] */;
  %498 = cast(%var_2645, dtype="bool") /* ty=Tensor[(84), bool] */;
  %499 = reshape(%494, newshape=[8, 3, 6]) /* ty=Tensor[(8, 3, 6), float64] */;
  %500 = reshape(%495, newshape=[572]) /* ty=Tensor[(572), int8] */;
  %501 = reshape(%497, newshape=[21, 1]) /* ty=Tensor[(21, 1), float64] */;
  %502 = reshape(%498, newshape=[7, 4, 3]) /* ty=Tensor[(7, 4, 3), bool] */;
  %503 = @func_834(%499, %500, %501, %502) /* ty=(Tensor[(8, 3, 6), float64], Tensor[(15, 5, 15), float32], Tensor[(1125), float32], Tensor[(572), int8], Tensor[(21, 1), float64], Tensor[(315), float64], Tensor[(84), float64], Tensor[(840), float64], Tensor[(13, 4, 11), float32], Tensor[(7, 4, 3), bool], Tensor[(13, 4, 11), int8], Tensor[(15, 5, 15), float32]) */;
  %504 = cast(meta[relay.Constant][36] /* ty=Tensor[(2, 72), float64] */, dtype="float64") /* ty=Tensor[(2, 72), float64] */;
  %505 = cast(meta[relay.Constant][37] /* ty=Tensor[(11, 52), int8] */, dtype="int8") /* ty=Tensor[(11, 52), int8] */;
  %506 = cast(%496, dtype="float64") /* ty=Tensor[(3, ?, 7), float64] */;
  %507 = cast(%var_2645, dtype="bool") /* ty=Tensor[(84), bool] */;
  %508 = reshape(%504, newshape=[8, 3, 6]) /* ty=Tensor[(8, 3, 6), float64] */;
  %509 = reshape(%505, newshape=[572]) /* ty=Tensor[(572), int8] */;
  %510 = reshape(%506, newshape=[21, 1]) /* ty=Tensor[(21, 1), float64] */;
  %511 = reshape(%507, newshape=[7, 4, 3]) /* ty=Tensor[(7, 4, 3), bool] */;
  %512 = @func_834(%508, %509, %510, %511) /* ty=(Tensor[(8, 3, 6), float64], Tensor[(15, 5, 15), float32], Tensor[(1125), float32], Tensor[(572), int8], Tensor[(21, 1), float64], Tensor[(315), float64], Tensor[(84), float64], Tensor[(840), float64], Tensor[(13, 4, 11), float32], Tensor[(7, 4, 3), bool], Tensor[(13, 4, 11), int8], Tensor[(15, 5, 15), float32]) */;
  %513 = cast(meta[relay.Constant][38] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
  %514 = cast(meta[relay.Constant][38] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
  %515 = reshape(%513, newshape=[7, 3, 15]) /* ty=Tensor[(7, 3, 15), float64] */;
  %516 = reshape(%514, newshape=[7, 3, 15]) /* ty=Tensor[(7, 3, 15), float64] */;
  %517 = @func_1561(%515, %516) /* ty=(Tensor[(7, 3, 15), float64],) */;
  %518 = @func_1311() /* ty=(Tensor[(3, 4, 7), float32],) */;
  %519 = %517.0;
  %520 = cast(%519, dtype="float64") /* ty=Tensor[(7, 3, 15), float64] */;
  %521 = cast(%519, dtype="float64") /* ty=Tensor[(7, 3, 15), float64] */;
  %522 = reshape(%520, newshape=[7, 3, 15]) /* ty=Tensor[(7, 3, 15), float64] */;
  %523 = reshape(%521, newshape=[7, 3, 15]) /* ty=Tensor[(7, 3, 15), float64] */;
  %524 = @func_1561(%522, %523) /* ty=(Tensor[(7, 3, 15), float64],) */;
  %525 = @func_2409() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %526 = %503.1;
  %527 = %512.8;
  %528 = %518.0;
  %529 = %524.0;
  %530 = %525.0;
  (%496, %526, meta[relay.Constant][36] /* ty=Tensor[(2, 72), float64] */, meta[relay.Constant][37] /* ty=Tensor[(11, 52), int8] */, %var_2645, %527, %519, meta[relay.Constant][38] /* ty=Tensor[(315), float64] */, %528, %529, %530)
}

def @func_2824(%var_2790: Tensor[(4, 15, 7), bool], %var_2791: Tensor[(4, 15, 7), bool], %var_2798: Tensor[(4, 15, 7), bool]) -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(572), float32], Tensor[(91), uint8]) {
  %531 = cast(%var_2791, dtype="bool") /* ty=Tensor[(4, 15, 7), bool] */;
  %532 = shape_of(%var_2790, dtype="int32") /* ty=Tensor[(3), int32] */;
  %533 = cast(%var_2790, dtype="bool") /* ty=Tensor[(4, 15, 7), bool] */;
  %534 = dyn.reshape(%531, %532, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %535 = cast(%var_2798, dtype="float32") /* ty=Tensor[(4, 15, 7), float32] */;
  %536 = shape_of(%var_2791, dtype="int32") /* ty=Tensor[(3), int32] */;
  %537 = cast(%var_2791, dtype="float32") /* ty=Tensor[(4, 15, 7), float32] */;
  %538 = dyn.reshape(%535, %536, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %539 = cast(meta[relay.Constant][39] /* ty=Tensor[(91), uint8] */, dtype="uint8") /* ty=Tensor[(91), uint8] */;
  %540 = reshape(%539, newshape=[1, 7, 13]) /* ty=Tensor[(1, 7, 13), uint8] */;
  %541 = @func_2332(%540) /* ty=(Tensor[(12, 7, 13), uint8], Tensor[(572), float32], Tensor[(1, 7, 13), float64]) */;
  %542 = logical_or(%533, %534) /* ty=Tensor[(4, 15, 7), bool] */;
  %543 = power(%537, %538) /* ty=Tensor[(4, 15, 7), float32] */;
  %544 = %541.1;
  (%542, %543, %544, meta[relay.Constant][39] /* ty=Tensor[(91), uint8] */)
}

def @func_3628(%var_3593: bool) -> (Tensor[(3, ?, 7), int8], Tensor[(3, 4, 7), float32], bool, Tensor[(3, 4, 7), float32], Tensor[(3, ?, 7), int8], Tensor[(1080), float32], Tensor[(3, ?, 7), int8]) {
  %545 = @func_1182() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %546 = cast(%var_3593, dtype="bool") /* ty=bool */;
  %547 = cast(meta[relay.Constant][40] /* ty=Tensor[(1080), int16] */, dtype="int16") /* ty=Tensor[(1080), int16] */;
  %548 = reshape(%546, newshape=[]) /* ty=bool */;
  %549 = reshape(%547, newshape=[1080]) /* ty=Tensor[(1080), int16] */;
  %550 = @func_2617(%548, %549) /* ty=(Tensor[(572), float32], Tensor[(3, 4, 7), float32], Tensor[(16, 32), bool], Tensor[(13, 4, 11), float32], Tensor[(72, 2), float64], Tensor[(7, 3), float64], Tensor[(572), bool], Tensor[(15, 5, 15), float32], Tensor[(15, 75), float32], Tensor[(3, 4, 7), uint16], Tensor[(8, 9, 15), int16], Tensor[(1080), int16]) */;
  %551 = @func_1311() /* ty=(Tensor[(3, 4, 7), float32],) */;
  %552 = @func_1182() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %553 = cast(meta[relay.Constant][40] /* ty=Tensor[(1080), int16] */, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %554 = erf(%553) /* ty=Tensor[(1080), float64] */;
  %555 = cast(%554, dtype="float32") /* ty=Tensor[(1080), float32] */;
  %556 = %545.0;
  %557 = %550.1;
  %558 = %551.0;
  %559 = %552.0;
  %560 = sqrt(%555) /* ty=Tensor[(1080), float32] */;
  %561 = @func_925() /* ty=Tensor[(3, ?, 7), int8] */;
  (%556, %557, %var_3593, %558, %559, %560, %561)
}

def @func_4843() -> (Tensor[(3, ?, 7), int8],) {
  %562 = @func_2457() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %563 = %562.0;
  (%563,)
}

def @func_4791(%var_4778: float32, %var_4779: Tensor[(8, 1, 9), float32]) -> Tensor[(8, 1, 9), float32] {
  %564 = cast(%var_4778, dtype="float32") /* ty=float32 */;
  %565 = cast(%var_4779, dtype="float32") /* ty=Tensor[(8, 1, 9), float32] */;
  floor_divide(%564, %565) /* ty=Tensor[(8, 1, 9), float32] */
}

def @func_1047() -> (Tensor[(3, ?, 7), int8],) {
  %566 = @func_895() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %567 = %566.0;
  (%567,)
}

def @func_2409() -> (Tensor[(3, ?, 7), int8],) {
  %568 = @func_1182() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %569 = %568.0;
  (%569,)
}

def @func_2065(%var_2057: Tensor[(8, 9, 15), int16]) -> (Tensor[(3, ?, 7), int8], int16, Tensor[(1080), int16], Tensor[(3, ?, 7), float32], Tensor[(8, 9, 15), int32]) {
  %570 = @func_1475() /* ty=(Tensor[(3, ?, 7), int8], Tensor[(3, 4, 7), float32]) */;
  %571 = @func_895() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %572 = %571.0;
  %573 = cast(%572, dtype="float32") /* ty=Tensor[(3, ?, 7), float32] */;
  %574 = cast(meta[relay.Constant][41] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %575 = cast(meta[relay.Constant][42] /* ty=Tensor[(1080), int16] */, dtype="int16") /* ty=Tensor[(1080), int16] */;
  %576 = reshape(%574, newshape=[]) /* ty=int16 */;
  %577 = reshape(%575, newshape=[8, 9, 15]) /* ty=Tensor[(8, 9, 15), int16] */;
  %578 = @func_1132(%576, %577) /* ty=Tensor[(8, 9, 15), int16] */;
  %579 = cast(%var_2057, dtype="int32") /* ty=Tensor[(8, 9, 15), int32] */;
  %580 = shape_of(%578, dtype="int32") /* ty=Tensor[(3), int32] */;
  %581 = cast(%578, dtype="int32") /* ty=Tensor[(8, 9, 15), int32] */;
  %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %583 = %570.0;
  %584 = log10(%573) /* ty=Tensor[(3, ?, 7), float32] */;
  %585 = bitwise_and(%581, %582) /* ty=Tensor[(8, 9, 15), int32] */;
  (%583, meta[relay.Constant][41] /* ty=int16 */, meta[relay.Constant][42] /* ty=Tensor[(1080), int16] */, %584, %585)
}

def @func_115(%var_48: Tensor[(5, 12, 14), float64]) -> (Tensor[(5, 12, 14), float64], Tensor[(5, 12, 14), int64], Tensor[(5, 12, 14), int8]) {
  %586 = cast(%var_48, dtype="float64") /* ty=Tensor[(5, 12, 14), float64] */;
  %587 = cosh(%586) /* ty=Tensor[(5, 12, 14), float64] */;
  %588 = cast(%var_48, dtype="float64") /* ty=Tensor[(5, 12, 14), float64] */;
  %589 = shape_of(%587, dtype="int32") /* ty=Tensor[(3), int32] */;
  %590 = cast(%587, dtype="float64") /* ty=Tensor[(5, 12, 14), float64] */;
  %591 = dyn.reshape(%588, %589, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %592 = add(%590, %591) /* ty=Tensor[(5, 12, 14), float64] */;
  %593 = cast(%592, dtype="float64") /* ty=Tensor[(5, 12, 14), float64] */;
  %594 = sin(%593) /* ty=Tensor[(5, 12, 14), float64] */;
  %595 = cast(%587, dtype="float64") /* ty=Tensor[(5, 12, 14), float64] */;
  %596 = shape_of(%594, dtype="int32") /* ty=Tensor[(3), int32] */;
  %597 = cast(%594, dtype="float64") /* ty=Tensor[(5, 12, 14), float64] */;
  %598 = dyn.reshape(%595, %596, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %599 = cast(%592, dtype="float64") /* ty=Tensor[(5, 12, 14), float64] */;
  %600 = exp(%599) /* ty=Tensor[(5, 12, 14), float64] */;
  %601 = cast(%592, dtype="int64") /* ty=Tensor[(5, 12, 14), int64] */;
  %602 = shape_of(%600, dtype="int32") /* ty=Tensor[(3), int32] */;
  %603 = cast(%600, dtype="int64") /* ty=Tensor[(5, 12, 14), int64] */;
  %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %605 = cast(meta[relay.Constant][43] /* ty=Tensor[(5, 12, 14), float64] */, dtype="int8") /* ty=Tensor[(5, 12, 14), int8] */;
  %606 = shape_of(%587, dtype="int32") /* ty=Tensor[(3), int32] */;
  %607 = cast(%587, dtype="int8") /* ty=Tensor[(5, 12, 14), int8] */;
  %608 = dyn.reshape(%605, %606, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %609 = divide(%597, %598) /* ty=Tensor[(5, 12, 14), float64] */;
  %610 = left_shift(%603, %604) /* ty=Tensor[(5, 12, 14), int64] */;
  %611 = right_shift(%607, %608) /* ty=Tensor[(5, 12, 14), int8] */;
  (%609, %610, %611)
}

def @func_6069() -> Tensor[(5, 12, 14), float64] {
  %612 = @func_4415() /* ty=(Tensor[(5, 12, 14), float64],) */;
  %612.0
}

def @func_6386(%var_6379: Tensor[(6, 8, 14), uint8]) -> (Tensor[(6, 8, 14), uint8], Tensor[(5, 8, 9), float64]) {
  %613 = cast(meta[relay.Constant][44] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %614 = cast(%var_6379, dtype="uint8") /* ty=Tensor[(6, 8, 14), uint8] */;
  %615 = @func_4770() /* ty=(Tensor[(3, ?, 7), int8], Tensor[(5, 8, 9), float64]) */;
  %616 = bitwise_xor(%613, %614) /* ty=Tensor[(6, 8, 14), uint8] */;
  %617 = %615.1;
  (%616, %617)
}

def @func_5131() -> (Tensor[(3, ?, 7), int8],) {
  %618 = @func_2354() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %619 = %618.0;
  (%619,)
}

def @func_6061() -> (Tensor[(3, ?, 7), int8], Tensor[(15, 5, 15), float32], Tensor[(1125), float32]) {
  %620 = @func_2354() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %621 = cast(meta[relay.Constant][45] /* ty=Tensor[(1125), float32] */, dtype="float32") /* ty=Tensor[(1125), float32] */;
  %622 = reshape(%621, newshape=[15, 5, 15]) /* ty=Tensor[(15, 5, 15), float32] */;
  %623 = %620.0;
  %624 = @func_312(%622) /* ty=Tensor[(15, 5, 15), float32] */;
  (%623, %624, meta[relay.Constant][45] /* ty=Tensor[(1125), float32] */)
}

def @func_4235(%var_4218: Tensor[(10, 5, 7), int8], %var_4219: Tensor[(10, 5, 7), int8]) -> (Tensor[(10, 5, 7), bool], Tensor[(10, 5, 7), float32]) {
  %625 = cast(%var_4219, dtype="bool") /* ty=Tensor[(10, 5, 7), bool] */;
  %626 = shape_of(%var_4218, dtype="int32") /* ty=Tensor[(3), int32] */;
  %627 = cast(%var_4218, dtype="bool") /* ty=Tensor[(10, 5, 7), bool] */;
  %628 = dyn.reshape(%625, %626, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %629 = cast(%var_4219, dtype="float32") /* ty=Tensor[(10, 5, 7), float32] */;
  %630 = greater_equal(%627, %628) /* ty=Tensor[(10, 5, 7), bool] */;
  %631 = asinh(%629) /* ty=Tensor[(10, 5, 7), float32] */;
  (%630, %631)
}

def @func_4337() -> (Tensor[(5, 8, 9), uint16],) {
  %632 = @func_1580() /* ty=(Tensor[(5, 8, 9), uint16],) */;
  %633 = %632.0;
  (%633,)
}

def @func_4705(%var_4656: bool) -> (Tensor[(3, ?, 7), int8], Tensor[(10, 5, 7), bool], Tensor[(350), int8], Tensor[(5, 8, 9), float64], Tensor[(512, 1), bool], Tensor[(572), float64], Tensor[(512), float64]) {
  %634 = @func_2354() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %635 = cast(meta[relay.Constant][46] /* ty=Tensor[(350), int8] */, dtype="int8") /* ty=Tensor[(350), int8] */;
  %636 = cast(meta[relay.Constant][46] /* ty=Tensor[(350), int8] */, dtype="int8") /* ty=Tensor[(350), int8] */;
  %637 = reshape(%635, newshape=[10, 5, 7]) /* ty=Tensor[(10, 5, 7), int8] */;
  %638 = reshape(%636, newshape=[10, 5, 7]) /* ty=Tensor[(10, 5, 7), int8] */;
  %639 = @func_4235(%637, %638) /* ty=(Tensor[(10, 5, 7), bool], Tensor[(10, 5, 7), float32]) */;
  %640 = @func_3578() /* ty=(Tensor[(5, 8, 9), uint16], Tensor[(7, 2, 16), float32]) */;
  %641 = %640.0;
  %642 = cast(meta[relay.Constant][47] /* ty=Tensor[(5, 8, 9), uint16] */, dtype="float64") /* ty=Tensor[(5, 8, 9), float64] */;
  %643 = shape_of(%641, dtype="int32") /* ty=Tensor[(3), int32] */;
  %644 = cast(%641, dtype="float64") /* ty=Tensor[(5, 8, 9), float64] */;
  %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %646 = cast(%var_4656, dtype="bool") /* ty=bool */;
  %647 = cast(meta[relay.Constant][48] /* ty=Tensor[(512, 1), bool] */, dtype="bool") /* ty=Tensor[(512, 1), bool] */;
  %648 = cast(meta[relay.Constant][49] /* ty=Tensor[(572), float64] */, dtype="float64") /* ty=Tensor[(572), float64] */;
  %649 = reshape(%646, newshape=[]) /* ty=bool */;
  %650 = reshape(%647, newshape=[512]) /* ty=Tensor[(512), bool] */;
  %651 = reshape(%648, newshape=[572]) /* ty=Tensor[(572), float64] */;
  %652 = @func_1876(%649, %650, %651) /* ty=(Tensor[(13, 4, 11), int8], Tensor[(5, 8, 9), uint16], Tensor[(4, 16, 8), bool], Tensor[(512), bool], Tensor[(3, ?, 7), int8], Tensor[(13, 5, 5), uint8], Tensor[(325), float32], Tensor[(3, ?, 7), int8], Tensor[(84), float32], Tensor[(572), float64]) */;
  %653 = %652.3;
  %654 = cast(%653, dtype="float64") /* ty=Tensor[(512), float64] */;
  %655 = cast(%var_4656, dtype="float64") /* ty=float64 */;
  %656 = %634.0;
  %657 = %639.0;
  %658 = maximum(%644, %645) /* ty=Tensor[(5, 8, 9), float64] */;
  %659 = maximum(%654, %655) /* ty=Tensor[(512), float64] */;
  (%656, %657, meta[relay.Constant][46] /* ty=Tensor[(350), int8] */, %658, meta[relay.Constant][48] /* ty=Tensor[(512, 1), bool] */, meta[relay.Constant][49] /* ty=Tensor[(572), float64] */, %659)
}

def @func_2159() -> (Tensor[(572), float32],) {
  %660 = @func_1434() /* ty=(Tensor[(3, ?, 7), int8], Tensor[(13, 4, 11), int8], Tensor[(572), int8]) */;
  %661 = %660.2;
  %662 = cast(%661, dtype="float32") /* ty=Tensor[(572), float32] */;
  %663 = sigmoid(%662) /* ty=Tensor[(572), float32] */;
  (%663,)
}

def @func_1790() -> Tensor[(3, ?, 7), int8] {
  %664 = @func_895() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %664.0
}

def @func_2332(%var_2292: Tensor[(1, 7, 13), uint8]) -> (Tensor[(12, 7, 13), uint8], Tensor[(572), float32], Tensor[(1, 7, 13), float64]) {
  %665 = cast(%var_2292, dtype="uint8") /* ty=Tensor[(1, 7, 13), uint8] */;
  %666 = cast(meta[relay.Constant][50] /* ty=Tensor[(12, 7, 13), uint8] */, dtype="uint8") /* ty=Tensor[(12, 7, 13), uint8] */;
  %667 = @func_2159() /* ty=(Tensor[(572), float32],) */;
  %668 = cast(%var_2292, dtype="float64") /* ty=Tensor[(1, 7, 13), float64] */;
  %669 = bitwise_and(%665, %666) /* ty=Tensor[(12, 7, 13), uint8] */;
  %670 = %667.0;
  %671 = rsqrt(%668) /* ty=Tensor[(1, 7, 13), float64] */;
  (%669, %670, %671)
}

def @func_3911() -> (Tensor[(3, ?, 7), int8], Tensor[(1, 7, 13), float64], Tensor[(91, 1), uint8]) {
  %672 = @func_895() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %673 = cast(meta[relay.Constant][51] /* ty=Tensor[(91, 1), uint8] */, dtype="uint8") /* ty=Tensor[(91, 1), uint8] */;
  %674 = reshape(%673, newshape=[1, 7, 13]) /* ty=Tensor[(1, 7, 13), uint8] */;
  %675 = @func_2332(%674) /* ty=(Tensor[(12, 7, 13), uint8], Tensor[(572), float32], Tensor[(1, 7, 13), float64]) */;
  %676 = %672.0;
  %677 = %675.2;
  (%676, %677, meta[relay.Constant][51] /* ty=Tensor[(91, 1), uint8] */)
}

def @func_254(%var_220: Tensor[(7, 1, 3), float64], %var_221: Tensor[(7, 15, 3), float64], %var_226: Tensor[(7, 4, 3), float64], %var_249: Tensor[(840), float64]) -> (Tensor[(7, 15, 3), float64], Tensor[(7, 4, 3), bool], Tensor[(5, 12, 14), int64], Tensor[(840), float64]) {
  %678 = cast(%var_220, dtype="float64") /* ty=Tensor[(7, 1, 3), float64] */;
  %679 = cast(%var_221, dtype="float64") /* ty=Tensor[(7, 15, 3), float64] */;
  %680 = cast(%var_220, dtype="bool") /* ty=Tensor[(7, 1, 3), bool] */;
  %681 = cast(%var_226, dtype="bool") /* ty=Tensor[(7, 4, 3), bool] */;
  %682 = cast(%var_249, dtype="float64") /* ty=Tensor[(840), float64] */;
  %683 = reshape(%682, newshape=[5, 12, 14]) /* ty=Tensor[(5, 12, 14), float64] */;
  %684 = @func_115(%683) /* ty=(Tensor[(5, 12, 14), float64], Tensor[(5, 12, 14), int64], Tensor[(5, 12, 14), int8]) */;
  %685 = maximum(%678, %679) /* ty=Tensor[(7, 15, 3), float64] */;
  %686 = logical_or(%680, %681) /* ty=Tensor[(7, 4, 3), bool] */;
  %687 = %684.1;
  (%685, %686, %687, %var_249)
}

def @func_379(%var_362: Tensor[(13, 4, 11), int8]) -> (Tensor[(13, 4, 11), int8],) {
  %688 = cast(meta[relay.Constant][52] /* ty=Tensor[(13, 4, 11), int8] */, dtype="int8") /* ty=Tensor[(13, 4, 11), int8] */;
  %689 = shape_of(%var_362, dtype="int32") /* ty=Tensor[(3), int32] */;
  %690 = cast(%var_362, dtype="int8") /* ty=Tensor[(13, 4, 11), int8] */;
  %691 = dyn.reshape(%688, %689, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %692 = right_shift(%690, %691) /* ty=Tensor[(13, 4, 11), int8] */;
  (%692,)
}

def @func_1748() -> (Tensor[(3, 4, 7), float32], Tensor[(1125), float32], Tensor[(144), float64], Tensor[(143, 4), int8], Tensor[(1, 21), float64]) {
  %693 = cast(meta[relay.Constant][53] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %694 = cast(meta[relay.Constant][54] /* ty=Tensor[(143, 4), int8] */, dtype="int8") /* ty=Tensor[(143, 4), int8] */;
  %695 = cast(meta[relay.Constant][55] /* ty=Tensor[(1, 21), float64] */, dtype="float64") /* ty=Tensor[(1, 21), float64] */;
  %696 = @func_995() /* ty=Tensor[(3, 4, 7), float32] */;
  %697 = cast(%696, dtype="bool") /* ty=Tensor[(3, 4, 7), bool] */;
  %698 = reshape(%693, newshape=[8, 3, 6]) /* ty=Tensor[(8, 3, 6), float64] */;
  %699 = reshape(%694, newshape=[572]) /* ty=Tensor[(572), int8] */;
  %700 = reshape(%695, newshape=[21, 1]) /* ty=Tensor[(21, 1), float64] */;
  %701 = reshape(%697, newshape=[7, 4, 3]) /* ty=Tensor[(7, 4, 3), bool] */;
  %702 = @func_834(%698, %699, %700, %701) /* ty=(Tensor[(8, 3, 6), float64], Tensor[(15, 5, 15), float32], Tensor[(1125), float32], Tensor[(572), int8], Tensor[(21, 1), float64], Tensor[(315), float64], Tensor[(84), float64], Tensor[(840), float64], Tensor[(13, 4, 11), float32], Tensor[(7, 4, 3), bool], Tensor[(13, 4, 11), int8], Tensor[(15, 5, 15), float32]) */;
  %703 = %702.2;
  (%696, %703, meta[relay.Constant][53] /* ty=Tensor[(144), float64] */, meta[relay.Constant][54] /* ty=Tensor[(143, 4), int8] */, meta[relay.Constant][55] /* ty=Tensor[(1, 21), float64] */)
}

def @func_1950(%var_1938: Tensor[(1, 315), float64]) -> (Tensor[(3, ?, 7), int8], Tensor[(7, 4, 3), bool], Tensor[(1, 315), float64], Tensor[(84), float64], Tensor[(840), float64]) {
  %704 = @func_1182() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %705 = %704.0;
  %706 = cast(%705, dtype="float64") /* ty=Tensor[(3, ?, 7), float64] */;
  %707 = cast(%var_1938, dtype="float64") /* ty=Tensor[(1, 315), float64] */;
  %708 = cast(meta[relay.Constant][56] /* ty=Tensor[(84), float64] */, dtype="float64") /* ty=Tensor[(84), float64] */;
  %709 = cast(meta[relay.Constant][57] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %710 = reshape(%706, newshape=[7, 1, 3]) /* ty=Tensor[(7, 1, 3), float64] */;
  %711 = reshape(%707, newshape=[7, 15, 3]) /* ty=Tensor[(7, 15, 3), float64] */;
  %712 = reshape(%708, newshape=[7, 4, 3]) /* ty=Tensor[(7, 4, 3), float64] */;
  %713 = reshape(%709, newshape=[840]) /* ty=Tensor[(840), float64] */;
  %714 = @func_254(%710, %711, %712, %713) /* ty=(Tensor[(7, 15, 3), float64], Tensor[(7, 4, 3), bool], Tensor[(5, 12, 14), int64], Tensor[(840), float64]) */;
  %715 = %714.1;
  (%705, %715, %var_1938, meta[relay.Constant][56] /* ty=Tensor[(84), float64] */, meta[relay.Constant][57] /* ty=Tensor[(840), float64] */)
}

def @func_3882() -> (Tensor[(5, 12, 14), float64],) {
  %716 = @func_3782() /* ty=(Tensor[(3, ?, 7), int8], Tensor[(5, 12, 14), float64], Tensor[(840), float64], Tensor[(7, 2, 16), float32]) */;
  %717 = %716.1;
  %718 = cast(%717, dtype="float64") /* ty=Tensor[(5, 12, 14), float64] */;
  %719 = sigmoid(%718) /* ty=Tensor[(5, 12, 14), float64] */;
  (%719,)
}

def @func_5060(%var_5049: Tensor[(3, 3, 15), int16]) -> Tensor[(3, 3, 15), int8] {
  %720 = cast(meta[relay.Constant][58] /* ty=Tensor[(3, 3, 15), int16] */, dtype="int16") /* ty=Tensor[(3, 3, 15), int16] */;
  %721 = shape_of(%var_5049, dtype="int32") /* ty=Tensor[(3), int32] */;
  %722 = cast(%var_5049, dtype="int16") /* ty=Tensor[(3, 3, 15), int16] */;
  %723 = dyn.reshape(%720, %721, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %724 = minimum(%722, %723) /* ty=Tensor[(3, 3, 15), int16] */;
  %725 = cast(%var_5049, dtype="int8") /* ty=Tensor[(3, 3, 15), int8] */;
  %726 = shape_of(%724, dtype="int32") /* ty=Tensor[(3), int32] */;
  %727 = cast(%724, dtype="int8") /* ty=Tensor[(3, 3, 15), int8] */;
  %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  right_shift(%727, %728) /* ty=Tensor[(3, 3, 15), int8] */
}

def @func_6231() -> Tensor[(3, ?, 7), bool] {
  %729 = @func_2999() /* ty=(Tensor[(3, ?, 7), bool], Tensor[(3, ?, 7), bool]) */;
  %729.1
}

def @func_3782() -> (Tensor[(3, ?, 7), int8], Tensor[(5, 12, 14), float64], Tensor[(840), float64], Tensor[(7, 2, 16), float32]) {
  %730 = @func_1182() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %731 = cast(meta[relay.Constant][59] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %732 = reshape(%731, newshape=[5, 12, 14]) /* ty=Tensor[(5, 12, 14), float64] */;
  %733 = @func_115(%732) /* ty=(Tensor[(5, 12, 14), float64], Tensor[(5, 12, 14), int64], Tensor[(5, 12, 14), int8]) */;
  %734 = %730.0;
  %735 = %733.0;
  %736 = @func_3285() /* ty=Tensor[(7, 2, 16), float32] */;
  (%734, %735, meta[relay.Constant][59] /* ty=Tensor[(840), float64] */, %736)
}

def @func_2617(%var_2553: bool, %var_2615: Tensor[(1080), int16]) -> (Tensor[(572), float32], Tensor[(3, 4, 7), float32], Tensor[(16, 32), bool], Tensor[(13, 4, 11), float32], Tensor[(72, 2), float64], Tensor[(7, 3), float64], Tensor[(572), bool], Tensor[(15, 5, 15), float32], Tensor[(15, 75), float32], Tensor[(3, 4, 7), uint16], Tensor[(8, 9, 15), int16], Tensor[(1080), int16]) {
  %737 = @func_2159() /* ty=(Tensor[(572), float32],) */;
  %738 = cast(meta[relay.Constant][61] /* ty=Tensor[(72, 2), float64] */, dtype="float64") /* ty=Tensor[(72, 2), float64] */;
  %739 = %737.0;
  %740 = cast(%739, dtype="int8") /* ty=Tensor[(572), int8] */;
  %741 = cast(meta[relay.Constant][62] /* ty=Tensor[(7, 3), float64] */, dtype="float64") /* ty=Tensor[(7, 3), float64] */;
  %742 = @func_995() /* ty=Tensor[(3, 4, 7), float32] */;
  %743 = cast(%742, dtype="bool") /* ty=Tensor[(3, 4, 7), bool] */;
  %744 = reshape(%738, newshape=[8, 3, 6]) /* ty=Tensor[(8, 3, 6), float64] */;
  %745 = reshape(%740, newshape=[572]) /* ty=Tensor[(572), int8] */;
  %746 = reshape(%741, newshape=[21, 1]) /* ty=Tensor[(21, 1), float64] */;
  %747 = reshape(%743, newshape=[7, 4, 3]) /* ty=Tensor[(7, 4, 3), bool] */;
  %748 = @func_834(%744, %745, %746, %747) /* ty=(Tensor[(8, 3, 6), float64], Tensor[(15, 5, 15), float32], Tensor[(1125), float32], Tensor[(572), int8], Tensor[(21, 1), float64], Tensor[(315), float64], Tensor[(84), float64], Tensor[(840), float64], Tensor[(13, 4, 11), float32], Tensor[(7, 4, 3), bool], Tensor[(13, 4, 11), int8], Tensor[(15, 5, 15), float32]) */;
  %749 = cast(%var_2553, dtype="bool") /* ty=bool */;
  %750 = cast(meta[relay.Constant][60] /* ty=Tensor[(16, 32), bool] */, dtype="bool") /* ty=Tensor[(16, 32), bool] */;
  %751 = cast(%739, dtype="float64") /* ty=Tensor[(572), float64] */;
  %752 = reshape(%749, newshape=[]) /* ty=bool */;
  %753 = reshape(%750, newshape=[512]) /* ty=Tensor[(512), bool] */;
  %754 = reshape(%751, newshape=[572]) /* ty=Tensor[(572), float64] */;
  %755 = @func_1876(%752, %753, %754) /* ty=(Tensor[(13, 4, 11), int8], Tensor[(5, 8, 9), uint16], Tensor[(4, 16, 8), bool], Tensor[(512), bool], Tensor[(3, ?, 7), int8], Tensor[(13, 5, 5), uint8], Tensor[(325), float32], Tensor[(3, ?, 7), int8], Tensor[(84), float32], Tensor[(572), float64]) */;
  %756 = %755.9;
  %757 = cast(%756, dtype="float64") /* ty=Tensor[(572), float64] */;
  %758 = cast(%var_2553, dtype="float64") /* ty=float64 */;
  %759 = divide(%757, %758) /* ty=Tensor[(572), float64] */;
  %760 = cast(%759, dtype="bool") /* ty=Tensor[(572), bool] */;
  %761 = shape_of(%756, dtype="int32") /* ty=Tensor[(1), int32] */;
  %762 = cast(%756, dtype="bool") /* ty=Tensor[(572), bool] */;
  %763 = dyn.reshape(%760, %761, newshape=[]) /* ty=Tensor[(?), bool] */;
  %764 = cast(meta[relay.Constant][63] /* ty=Tensor[(15, 75), float32] */, dtype="float32") /* ty=Tensor[(15, 75), float32] */;
  %765 = reshape(%764, newshape=[15, 5, 15]) /* ty=Tensor[(15, 5, 15), float32] */;
  %766 = cast(%742, dtype="float32") /* ty=Tensor[(3, 4, 7), float32] */;
  %767 = reshape(%766, newshape=[3, 4, 7]) /* ty=Tensor[(3, 4, 7), float32] */;
  %768 = @func_1344(%767) /* ty=(Tensor[(3, 4, 7), uint16], Tensor[(3, 4, 7), float64], Tensor[(3, ?, 7), int8]) */;
  %769 = cast(%var_2553, dtype="int16") /* ty=int16 */;
  %770 = cast(%var_2615, dtype="int16") /* ty=Tensor[(1080), int16] */;
  %771 = reshape(%769, newshape=[]) /* ty=int16 */;
  %772 = reshape(%770, newshape=[8, 9, 15]) /* ty=Tensor[(8, 9, 15), int16] */;
  %773 = %748.8;
  %774 = greater_equal(%762, %763) /* ty=Tensor[(572), bool] */;
  %775 = @func_312(%765) /* ty=Tensor[(15, 5, 15), float32] */;
  %776 = %768.0;
  %777 = @func_1132(%771, %772) /* ty=Tensor[(8, 9, 15), int16] */;
  (%739, %742, meta[relay.Constant][60] /* ty=Tensor[(16, 32), bool] */, %773, meta[relay.Constant][61] /* ty=Tensor[(72, 2), float64] */, meta[relay.Constant][62] /* ty=Tensor[(7, 3), float64] */, %774, %775, meta[relay.Constant][63] /* ty=Tensor[(15, 75), float32] */, %776, %777, %var_2615)
}

def @func_5597(%var_5588: Tensor[(3, 7, 7), float32]) -> (Tensor[(3, 7, 7), int8],) {
  %778 = @func_3260() /* ty=(Tensor[(3, 7, 7), float32], Tensor[(3, 4, 7), float32]) */;
  %779 = %778.0;
  %780 = cast(%var_5588, dtype="int8") /* ty=Tensor[(3, 7, 7), int8] */;
  %781 = shape_of(%779, dtype="int32") /* ty=Tensor[(3), int32] */;
  %782 = cast(%779, dtype="int8") /* ty=Tensor[(3, 7, 7), int8] */;
  %783 = dyn.reshape(%780, %781, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %784 = subtract(%782, %783) /* ty=Tensor[(3, 7, 7), int8] */;
  (%784,)
}

def @func_4554(%var_4548: Tensor[(168), int8]) -> (Tensor[(3, ?, 7), int8], Tensor[(3, 8, 7), uint32], Tensor[(168), int8]) {
  %785 = @func_2409() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %786 = cast(%var_4548, dtype="int8") /* ty=Tensor[(168), int8] */;
  %787 = cast(%var_4548, dtype="float32") /* ty=Tensor[(168), float32] */;
  %788 = reshape(%786, newshape=[3, 8, 7]) /* ty=Tensor[(3, 8, 7), int8] */;
  %789 = reshape(%787, newshape=[3, 8, 7]) /* ty=Tensor[(3, 8, 7), float32] */;
  %790 = %785.0;
  %791 = @func_3843(%788, %789) /* ty=Tensor[(3, 8, 7), uint32] */;
  (%790, %791, %var_4548)
}

def @func_4305() -> Tensor[(3, ?, 7), float64] {
  %792 = @func_4138() /* ty=(Tensor[(3, 4, 7), float32], Tensor[(3, ?, 7), float64]) */;
  %792.1
}

def @func_4947(%var_4935: Tensor[(5, 12, 14), float64]) -> (Tensor[(5, 12, 14), bool],) {
  %793 = @func_3882() /* ty=(Tensor[(5, 12, 14), float64],) */;
  %794 = %793.0;
  %795 = cast(%var_4935, dtype="bool") /* ty=Tensor[(5, 12, 14), bool] */;
  %796 = shape_of(%794, dtype="int32") /* ty=Tensor[(3), int32] */;
  %797 = cast(%794, dtype="bool") /* ty=Tensor[(5, 12, 14), bool] */;
  %798 = dyn.reshape(%795, %796, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %799 = greater_equal(%797, %798) /* ty=Tensor[(5, 12, 14), bool] */;
  (%799,)
}

def @func_995() -> Tensor[(3, 4, 7), float32] {
  %800 = @func_925() /* ty=Tensor[(3, ?, 7), int8] */;
  %801 = cast(%800, dtype="float32") /* ty=Tensor[(3, ?, 7), float32] */;
  %802 = cast(meta[relay.Constant][64] /* ty=Tensor[(3, 4, 7), int8] */, dtype="float32") /* ty=Tensor[(3, 4, 7), float32] */;
  mod(%801, %802) /* ty=Tensor[(3, 4, 7), float32] */
}

def @func_4374() -> Tensor[(3, ?, 7), int8] {
  %803 = @func_3782() /* ty=(Tensor[(3, ?, 7), int8], Tensor[(5, 12, 14), float64], Tensor[(840), float64], Tensor[(7, 2, 16), float32]) */;
  %803.0
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_314(%var_313: Tensor[(15, 5, 15), float32]) -> Tensor[(15, 5, 15), float32] {
  %1 = fn (%var_308: Tensor[(15, 5, 15), float32]) -> Tensor[(15, 5, 15), float32] {
    %0 = cast(%var_308, dtype="float32") /* ty=Tensor[(15, 5, 15), float32] */;
    sinh(%0) /* ty=Tensor[(15, 5, 15), float32] */
  };
  %1(%var_313) /* ty=Tensor[(15, 5, 15), float32] */
}

def @func_1135(%var_1133: int16, %var_1134: Tensor[(8, 9, 15), int16]) -> Tensor[(8, 9, 15), int16] {
  %4 = fn (%var_1102: int16, %var_1103: Tensor[(8, 9, 15), int16]) -> Tensor[(8, 9, 15), int16] {
    %2 = cast(%var_1102, dtype="int16") /* ty=int16 */;
    %3 = cast(%var_1103, dtype="int16") /* ty=Tensor[(8, 9, 15), int16] */;
    bitwise_or(%2, %3) /* ty=Tensor[(8, 9, 15), int16] */
  };
  %4(%var_1133, %var_1134) /* ty=Tensor[(8, 9, 15), int16] */
}

def @func_379(%var_362: Tensor[(13, 4, 11), int8]) -> (Tensor[(13, 4, 11), int8],) {
  %5 = cast(meta[relay.Constant][0] /* ty=Tensor[(13, 4, 11), int8] */, dtype="int8") /* ty=Tensor[(13, 4, 11), int8] */;
  %6 = shape_of(%var_362, dtype="int32") /* ty=Tensor[(3), int32] */;
  %7 = cast(%var_362, dtype="int8") /* ty=Tensor[(13, 4, 11), int8] */;
  %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %9 = right_shift(%7, %8) /* ty=Tensor[(13, 4, 11), int8] */;
  (%9,)
}

def @func_1734(%var_1732: Tensor[(315), float64]) -> (Tensor[(15, 5, 15), float32], Tensor[(1125), float32], Tensor[(7, 3, 15), float64], Tensor[(315), float64], Tensor[(3, ?, 7), bool]) {
  @func_1731(%var_1732) /* ty=(Tensor[(15, 5, 15), float32], Tensor[(1125), float32], Tensor[(7, 3, 15), float64], Tensor[(315), float64], Tensor[(3, ?, 7), bool]) */
}

def @func_5132() -> (Tensor[(3, ?, 7), int8],) {
  %12 = fn () -> (Tensor[(3, ?, 7), int8],) {
    %10 = @func_2354() /* ty=(Tensor[(3, ?, 7), int8],) */;
    %11 = %10.0;
    (%11,)
  };
  %12() /* ty=(Tensor[(3, ?, 7), int8],) */
}

def @func_1791() -> Tensor[(3, ?, 7), int8] {
  %14 = fn () -> Tensor[(3, ?, 7), int8] {
    %13 = @func_895() /* ty=(Tensor[(3, ?, 7), int8],) */;
    %13.0
  };
  %14() /* ty=Tensor[(3, ?, 7), int8] */
}

def @func_6254() -> (Tensor[(3, ?, 7), bool],) {
  %15 = @func_2999() /* ty=(Tensor[(3, ?, 7), bool], Tensor[(3, ?, 7), bool]) */;
  %16 = %15.1;
  (%16,)
}

def @func_4794(%var_4792: float32, %var_4793: Tensor[(8, 1, 9), float32]) -> Tensor[(8, 1, 9), float32] {
  %19 = fn (%var_4778: float32, %var_4779: Tensor[(8, 1, 9), float32]) -> Tensor[(8, 1, 9), float32] {
    %17 = cast(%var_4778, dtype="float32") /* ty=float32 */;
    %18 = cast(%var_4779, dtype="float32") /* ty=Tensor[(8, 1, 9), float32] */;
    floor_divide(%17, %18) /* ty=Tensor[(8, 1, 9), float32] */
  };
  %19(%var_4792, %var_4793) /* ty=Tensor[(8, 1, 9), float32] */
}

def @func_1183() -> (Tensor[(3, ?, 7), int8],) {
  %22 = fn () -> (Tensor[(3, ?, 7), int8],) {
    %20 = @func_1047() /* ty=(Tensor[(3, ?, 7), int8],) */;
    %21 = %20.0;
    (%21,)
  };
  %22() /* ty=(Tensor[(3, ?, 7), int8],) */
}

def @func_834(%var_759: Tensor[(8, 3, 6), float64], %var_785: Tensor[(572), int8], %var_793: Tensor[(21, 1), float64], %var_806: Tensor[(7, 4, 3), bool]) -> (Tensor[(8, 3, 6), float64], Tensor[(15, 5, 15), float32], Tensor[(1125), float32], Tensor[(572), int8], Tensor[(21, 1), float64], Tensor[(315), float64], Tensor[(84), float64], Tensor[(840), float64], Tensor[(13, 4, 11), float32], Tensor[(7, 4, 3), bool], Tensor[(13, 4, 11), int8], Tensor[(15, 5, 15), float32]) {
  %23 = cast(%var_759, dtype="float64") /* ty=Tensor[(8, 3, 6), float64] */;
  %24 = cast(meta[relay.Constant][1] /* ty=Tensor[(1125), float32] */, dtype="float32") /* ty=Tensor[(1125), float32] */;
  %25 = reshape(%24, newshape=[15, 5, 15]) /* ty=Tensor[(15, 5, 15), float32] */;
  %26 = cast(%var_785, dtype="int8") /* ty=Tensor[(572), int8] */;
  %27 = reshape(%26, newshape=[13, 4, 11]) /* ty=Tensor[(13, 4, 11), int8] */;
  %28 = @func_379(%27) /* ty=(Tensor[(13, 4, 11), int8],) */;
  %29 = %28.0;
  %30 = cast(%29, dtype="float32") /* ty=Tensor[(13, 4, 11), float32] */;
  %31 = cast(%var_793, dtype="float64") /* ty=Tensor[(21, 1), float64] */;
  %32 = cast(meta[relay.Constant][2] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
  %33 = cast(meta[relay.Constant][3] /* ty=Tensor[(84), float64] */, dtype="float64") /* ty=Tensor[(84), float64] */;
  %34 = cast(meta[relay.Constant][4] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %35 = reshape(%31, newshape=[7, 1, 3]) /* ty=Tensor[(7, 1, 3), float64] */;
  %36 = reshape(%32, newshape=[7, 15, 3]) /* ty=Tensor[(7, 15, 3), float64] */;
  %37 = reshape(%33, newshape=[7, 4, 3]) /* ty=Tensor[(7, 4, 3), float64] */;
  %38 = reshape(%34, newshape=[840]) /* ty=Tensor[(840), float64] */;
  %39 = @func_254(%35, %36, %37, %38) /* ty=(Tensor[(7, 15, 3), float64], Tensor[(7, 4, 3), bool], Tensor[(5, 12, 14), int64], Tensor[(840), float64]) */;
  %40 = %39.1;
  %41 = cast(%var_806, dtype="bool") /* ty=Tensor[(7, 4, 3), bool] */;
  %42 = shape_of(%40, dtype="int32") /* ty=Tensor[(3), int32] */;
  %43 = cast(%40, dtype="bool") /* ty=Tensor[(7, 4, 3), bool] */;
  %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %45 = cast(%29, dtype="int8") /* ty=Tensor[(13, 4, 11), int8] */;
  %46 = reshape(%45, newshape=[13, 4, 11]) /* ty=Tensor[(13, 4, 11), int8] */;
  %47 = @func_379(%46) /* ty=(Tensor[(13, 4, 11), int8],) */;
  %48 = cast(meta[relay.Constant][1] /* ty=Tensor[(1125), float32] */, dtype="float32") /* ty=Tensor[(1125), float32] */;
  %49 = reshape(%48, newshape=[15, 5, 15]) /* ty=Tensor[(15, 5, 15), float32] */;
  %50 = sigmoid(%23) /* ty=Tensor[(8, 3, 6), float64] */;
  %51 = @func_312(%25) /* ty=Tensor[(15, 5, 15), float32] */;
  %52 = cosh(%30) /* ty=Tensor[(13, 4, 11), float32] */;
  %53 = not_equal(%43, %44) /* ty=Tensor[(7, 4, 3), bool] */;
  %54 = %47.0;
  %55 = @func_312(%49) /* ty=Tensor[(15, 5, 15), float32] */;
  (%50, %51, meta[relay.Constant][1] /* ty=Tensor[(1125), float32] */, %var_785, %var_793, meta[relay.Constant][2] /* ty=Tensor[(315), float64] */, meta[relay.Constant][3] /* ty=Tensor[(84), float64] */, meta[relay.Constant][4] /* ty=Tensor[(840), float64] */, %52, %53, %54, %55)
}

def @func_1047() -> (Tensor[(3, ?, 7), int8],) {
  %56 = @func_895() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %57 = %56.0;
  (%57,)
}

def @func_1677(%var_1594: Tensor[(13, 5, 5), float32]) -> (Tensor[(13, 5, 5), uint8], Tensor[(3, ?, 7), int8], Tensor[(7, 3, 15), float64], Tensor[(315), float64]) {
  %58 = cast(%var_1594, dtype="float32") /* ty=Tensor[(13, 5, 5), float32] */;
  %59 = atan(%58) /* ty=Tensor[(13, 5, 5), float32] */;
  %60 = cast(%var_1594, dtype="uint8") /* ty=Tensor[(13, 5, 5), uint8] */;
  %61 = shape_of(%59, dtype="int32") /* ty=Tensor[(3), int32] */;
  %62 = cast(%59, dtype="uint8") /* ty=Tensor[(13, 5, 5), uint8] */;
  %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %64 = @func_1047() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %65 = cast(meta[relay.Constant][5] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
  %66 = cast(meta[relay.Constant][5] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
  %67 = reshape(%65, newshape=[7, 3, 15]) /* ty=Tensor[(7, 3, 15), float64] */;
  %68 = reshape(%66, newshape=[7, 3, 15]) /* ty=Tensor[(7, 3, 15), float64] */;
  %69 = @func_1561(%67, %68) /* ty=(Tensor[(7, 3, 15), float64],) */;
  %70 = multiply(%62, %63) /* ty=Tensor[(13, 5, 5), uint8] */;
  %71 = %64.0;
  %72 = %69.0;
  (%70, %71, %72, meta[relay.Constant][5] /* ty=Tensor[(315), float64] */)
}

def @func_3287() -> Tensor[(7, 2, 16), float32] {
  @func_3285() /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_4238(%var_4236: Tensor[(10, 5, 7), int8], %var_4237: Tensor[(10, 5, 7), int8]) -> (Tensor[(10, 5, 7), bool], Tensor[(10, 5, 7), float32]) {
  %80 = fn (%var_4218: Tensor[(10, 5, 7), int8], %var_4219: Tensor[(10, 5, 7), int8]) -> (Tensor[(10, 5, 7), bool], Tensor[(10, 5, 7), float32]) {
    %73 = cast(%var_4219, dtype="bool") /* ty=Tensor[(10, 5, 7), bool] */;
    %74 = shape_of(%var_4218, dtype="int32") /* ty=Tensor[(3), int32] */;
    %75 = cast(%var_4218, dtype="bool") /* ty=Tensor[(10, 5, 7), bool] */;
    %76 = dyn.reshape(%73, %74, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %77 = cast(%var_4219, dtype="float32") /* ty=Tensor[(10, 5, 7), float32] */;
    %78 = greater_equal(%75, %76) /* ty=Tensor[(10, 5, 7), bool] */;
    %79 = asinh(%77) /* ty=Tensor[(10, 5, 7), float32] */;
    (%78, %79)
  };
  %80(%var_4236, %var_4237) /* ty=(Tensor[(10, 5, 7), bool], Tensor[(10, 5, 7), float32]) */
}

def @func_5428() -> (int16,) {
  @func_5426() /* ty=(int16,) */
}

def @func_5021(%var_5019: Tensor[(6, 15, 3), uint32]) -> (Tensor[(6, 15, 3), bool], Tensor[(3, ?, 7), int8]) {
  @func_5018(%var_5019) /* ty=(Tensor[(6, 15, 3), bool], Tensor[(3, ?, 7), int8]) */
}

def @func_3847(%var_3845: Tensor[(3, 8, 7), int8], %var_3846: Tensor[(3, 8, 7), float32]) -> Tensor[(3, 8, 7), uint32] {
  @func_3843(%var_3845, %var_3846) /* ty=Tensor[(3, 8, 7), uint32] */
}

def @func_5018(%var_5002: Tensor[(6, 15, 3), uint32]) -> (Tensor[(6, 15, 3), bool], Tensor[(3, ?, 7), int8]) {
  %81 = cast(%var_5002, dtype="bool") /* ty=Tensor[(6, 15, 3), bool] */;
  %82 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(6, 15, 3), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %83 = cast(meta[relay.Constant][6] /* ty=Tensor[(6, 15, 3), uint32] */, dtype="bool") /* ty=Tensor[(6, 15, 3), bool] */;
  %84 = dyn.reshape(%81, %82, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %85 = @func_4770() /* ty=(Tensor[(3, ?, 7), int8], Tensor[(5, 8, 9), float64]) */;
  %86 = greater(%83, %84) /* ty=Tensor[(6, 15, 3), bool] */;
  %87 = %85.0;
  (%86, %87)
}

def @func_5304() -> (Tensor[(6, 4, 1), int32], Tensor[(3, 9, 7), int32]) {
  %94 = fn () -> (Tensor[(6, 4, 1), int32], Tensor[(3, 9, 7), int32]) {
    %88 = @func_4843() /* ty=(Tensor[(3, ?, 7), int8],) */;
    %89 = %88.0;
    %90 = cast(%89, dtype="int32") /* ty=Tensor[(3, ?, 7), int32] */;
    %91 = cast(meta[relay.Constant][7] /* ty=Tensor[(3, 9, 7), int8] */, dtype="int32") /* ty=Tensor[(3, 9, 7), int32] */;
    %92 = @func_3395() /* ty=Tensor[(6, 4, 1), int32] */;
    %93 = bitwise_and(%90, %91) /* ty=Tensor[(3, 9, 7), int32] */;
    (%92, %93)
  };
  %94() /* ty=(Tensor[(6, 4, 1), int32], Tensor[(3, 9, 7), int32]) */
}

def @func_5895(%var_5893: Tensor[(270), uint32]) -> (Tensor[(3, 9, 7), int32], Tensor[(3, ?, 7), int8], Tensor[(270), uint32]) {
  @func_5892(%var_5893) /* ty=(Tensor[(3, 9, 7), int32], Tensor[(3, ?, 7), int8], Tensor[(270), uint32]) */
}

def @func_2355() -> (Tensor[(3, ?, 7), int8],) {
  %97 = fn () -> (Tensor[(3, ?, 7), int8],) {
    %95 = @func_1475() /* ty=(Tensor[(3, ?, 7), int8], Tensor[(3, 4, 7), float32]) */;
    %96 = %95.0;
    (%96,)
  };
  %97() /* ty=(Tensor[(3, ?, 7), int8],) */
}

def @func_4510() -> (Tensor[(8, 9, 15), int16], int16, Tensor[(1080), int16], Tensor[(3, ?, 7), uint64]) {
  %98 = cast(meta[relay.Constant][8] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %99 = cast(meta[relay.Constant][9] /* ty=Tensor[(1080), int16] */, dtype="int16") /* ty=Tensor[(1080), int16] */;
  %100 = reshape(%98, newshape=[]) /* ty=int16 */;
  %101 = reshape(%99, newshape=[8, 9, 15]) /* ty=Tensor[(8, 9, 15), int16] */;
  %102 = @func_3911() /* ty=(Tensor[(3, ?, 7), int8], Tensor[(1, 7, 13), float64], Tensor[(91, 1), uint8]) */;
  %103 = %102.0;
  %104 = cast(%103, dtype="float32") /* ty=Tensor[(3, ?, 7), float32] */;
  %105 = asin(%104) /* ty=Tensor[(3, ?, 7), float32] */;
  %106 = cast(%103, dtype="uint64") /* ty=Tensor[(3, ?, 7), uint64] */;
  %107 = shape_of(%105, dtype="int32") /* ty=Tensor[(3), int32] */;
  %108 = cast(%105, dtype="uint64") /* ty=Tensor[(3, ?, 7), uint64] */;
  %109 = dyn.reshape(%106, %107, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %110 = @func_1132(%100, %101) /* ty=Tensor[(8, 9, 15), int16] */;
  %111 = right_shift(%108, %109) /* ty=Tensor[(3, ?, 7), uint64] */;
  (%110, meta[relay.Constant][8] /* ty=int16 */, meta[relay.Constant][9] /* ty=Tensor[(1080), int16] */, %111)
}

def @func_5681() -> (int16, Tensor[(7, 3, 15), float64], Tensor[(4, 15, 8), float32], Tensor[(480), float64]) {
  @func_5679() /* ty=(int16, Tensor[(7, 3, 15), float64], Tensor[(4, 15, 8), float32], Tensor[(480), float64]) */
}

def @func_118(%var_116: Tensor[(5, 12, 14), float64]) -> (Tensor[(5, 12, 14), float64], Tensor[(5, 12, 14), int64], Tensor[(5, 12, 14), int8]) {
  @func_115(%var_116) /* ty=(Tensor[(5, 12, 14), float64], Tensor[(5, 12, 14), int64], Tensor[(5, 12, 14), int8]) */
}

def @func_5597(%var_5588: Tensor[(3, 7, 7), float32]) -> (Tensor[(3, 7, 7), int8],) {
  %112 = @func_3260() /* ty=(Tensor[(3, 7, 7), float32], Tensor[(3, 4, 7), float32]) */;
  %113 = %112.0;
  %114 = cast(%var_5588, dtype="int8") /* ty=Tensor[(3, 7, 7), int8] */;
  %115 = shape_of(%113, dtype="int32") /* ty=Tensor[(3), int32] */;
  %116 = cast(%113, dtype="int8") /* ty=Tensor[(3, 7, 7), int8] */;
  %117 = dyn.reshape(%114, %115, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %118 = subtract(%116, %117) /* ty=Tensor[(3, 7, 7), int8] */;
  (%118,)
}

def @func_4447(%var_4446: Tensor[(4, 15, 8), float64]) -> Tensor[(4, 15, 8), float32] {
  %122 = fn (%var_4435: Tensor[(4, 15, 8), float64]) -> Tensor[(4, 15, 8), float32] {
    %119 = cast(%var_4435, dtype="float64") /* ty=Tensor[(4, 15, 8), float64] */;
    %120 = cos(%119) /* ty=Tensor[(4, 15, 8), float64] */;
    %121 = cast(%120, dtype="float32") /* ty=Tensor[(4, 15, 8), float32] */;
    sin(%121) /* ty=Tensor[(4, 15, 8), float32] */
  };
  %122(%var_4446) /* ty=Tensor[(4, 15, 8), float32] */
}

def @func_5207(%var_5177: bool) -> (Tensor[(8, 9, 15), int16], bool, Tensor[(1080, 1), int16], Tensor[(3, ?, 7), int8], Tensor[(5, 8, 9), uint16], Tensor[(143, 4), float32]) {
  %123 = cast(%var_5177, dtype="bool") /* ty=bool */;
  %124 = cast(meta[relay.Constant][10] /* ty=Tensor[(1080, 1), int16] */, dtype="int16") /* ty=Tensor[(1080, 1), int16] */;
  %125 = reshape(%123, newshape=[]) /* ty=bool */;
  %126 = reshape(%124, newshape=[1080]) /* ty=Tensor[(1080), int16] */;
  %127 = @func_2617(%125, %126) /* ty=(Tensor[(572), float32], Tensor[(3, 4, 7), float32], Tensor[(16, 32), bool], Tensor[(13, 4, 11), float32], Tensor[(72, 2), float64], Tensor[(7, 3), float64], Tensor[(572), bool], Tensor[(15, 5, 15), float32], Tensor[(15, 75), float32], Tensor[(3, 4, 7), uint16], Tensor[(8, 9, 15), int16], Tensor[(1080), int16]) */;
  %128 = @func_1047() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %129 = @func_1748() /* ty=(Tensor[(3, 4, 7), float32], Tensor[(1125), float32], Tensor[(144), float64], Tensor[(143, 4), int8], Tensor[(1, 21), float64]) */;
  %130 = %129.3;
  %131 = cast(%130, dtype="float32") /* ty=Tensor[(143, 4), float32] */;
  %132 = sigmoid(%131) /* ty=Tensor[(143, 4), float32] */;
  %133 = cast(%132, dtype="float32") /* ty=Tensor[(143, 4), float32] */;
  %134 = cos(%133) /* ty=Tensor[(143, 4), float32] */;
  %135 = cast(%134, dtype="float32") /* ty=Tensor[(143, 4), float32] */;
  %136 = %127.10;
  %137 = %128.0;
  %138 = @func_3919() /* ty=Tensor[(5, 8, 9), uint16] */;
  %139 = atan(%135) /* ty=Tensor[(143, 4), float32] */;
  (%136, %var_5177, meta[relay.Constant][10] /* ty=Tensor[(1080, 1), int16] */, %137, %138, %139)
}

def @func_2373() -> Tensor[(3, ?, 7), int8] {
  @func_2371() /* ty=Tensor[(3, ?, 7), int8] */
}

def @func_2621(%var_2619: bool, %var_2620: Tensor[(1080), int16]) -> (Tensor[(572), float32], Tensor[(3, 4, 7), float32], Tensor[(16, 32), bool], Tensor[(13, 4, 11), float32], Tensor[(72, 2), float64], Tensor[(7, 3), float64], Tensor[(572), bool], Tensor[(15, 5, 15), float32], Tensor[(15, 75), float32], Tensor[(3, 4, 7), uint16], Tensor[(8, 9, 15), int16], Tensor[(1080), int16]) {
  @func_2617(%var_2619, %var_2620) /* ty=(Tensor[(572), float32], Tensor[(3, 4, 7), float32], Tensor[(16, 32), bool], Tensor[(13, 4, 11), float32], Tensor[(72, 2), float64], Tensor[(7, 3), float64], Tensor[(572), bool], Tensor[(15, 5, 15), float32], Tensor[(15, 75), float32], Tensor[(3, 4, 7), uint16], Tensor[(8, 9, 15), int16], Tensor[(1080), int16]) */
}

def @func_4138() -> (Tensor[(3, 4, 7), float32], Tensor[(3, ?, 7), float64]) {
  %140 = @func_2354() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %141 = %140.0;
  %142 = cast(%141, dtype="float64") /* ty=Tensor[(3, ?, 7), float64] */;
  %143 = @func_995() /* ty=Tensor[(3, 4, 7), float32] */;
  %144 = log2(%142) /* ty=Tensor[(3, ?, 7), float64] */;
  (%143, %144)
}

def @func_6161(%var_6159: Tensor[(14, 13, 7), float32]) -> (Tensor[(14, 13, 7), float64],) {
  @func_6158(%var_6159) /* ty=(Tensor[(14, 13, 7), float64],) */
}

def @func_926() -> Tensor[(3, ?, 7), int8] {
  %146 = fn () -> Tensor[(3, ?, 7), int8] {
    %145 = @func_895() /* ty=(Tensor[(3, ?, 7), int8],) */;
    %145.0
  };
  %146() /* ty=Tensor[(3, ?, 7), int8] */
}

def @func_5581() -> (Tensor[(540, 2), uint8], Tensor[(3, 4, 7), float32]) {
  %147 = @func_5421() /* ty=(Tensor[(16, 32), bool], Tensor[(540, 2), int16], Tensor[(5, 8, 9), uint16], Tensor[(3, ?, 7), float32], Tensor[(7, 3, 15), float64], Tensor[(84), bool], Tensor[(3, 4, 7), float32]) */;
  %148 = %147.1;
  %149 = cast(meta[relay.Constant][11] /* ty=Tensor[(540, 2), int16] */, dtype="float32") /* ty=Tensor[(540, 2), float32] */;
  %150 = shape_of(%148, dtype="int32") /* ty=Tensor[(2), int32] */;
  %151 = cast(%148, dtype="float32") /* ty=Tensor[(540, 2), float32] */;
  %152 = dyn.reshape(%149, %150, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %153 = mod(%151, %152) /* ty=Tensor[(540, 2), float32] */;
  %154 = cast(%153, dtype="uint8") /* ty=Tensor[(540, 2), uint8] */;
  %155 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(540, 2), int16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %156 = cast(meta[relay.Constant][11] /* ty=Tensor[(540, 2), int16] */, dtype="uint8") /* ty=Tensor[(540, 2), uint8] */;
  %157 = dyn.reshape(%154, %155, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %158 = @func_1311() /* ty=(Tensor[(3, 4, 7), float32],) */;
  %159 = minimum(%156, %157) /* ty=Tensor[(540, 2), uint8] */;
  %160 = %158.0;
  (%159, %160)
}

def @func_2065(%var_2057: Tensor[(8, 9, 15), int16]) -> (Tensor[(3, ?, 7), int8], int16, Tensor[(1080), int16], Tensor[(3, ?, 7), float32], Tensor[(8, 9, 15), int32]) {
  %161 = @func_1475() /* ty=(Tensor[(3, ?, 7), int8], Tensor[(3, 4, 7), float32]) */;
  %162 = @func_895() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %163 = %162.0;
  %164 = cast(%163, dtype="float32") /* ty=Tensor[(3, ?, 7), float32] */;
  %165 = cast(meta[relay.Constant][12] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %166 = cast(meta[relay.Constant][13] /* ty=Tensor[(1080), int16] */, dtype="int16") /* ty=Tensor[(1080), int16] */;
  %167 = reshape(%165, newshape=[]) /* ty=int16 */;
  %168 = reshape(%166, newshape=[8, 9, 15]) /* ty=Tensor[(8, 9, 15), int16] */;
  %169 = @func_1132(%167, %168) /* ty=Tensor[(8, 9, 15), int16] */;
  %170 = cast(%var_2057, dtype="int32") /* ty=Tensor[(8, 9, 15), int32] */;
  %171 = shape_of(%169, dtype="int32") /* ty=Tensor[(3), int32] */;
  %172 = cast(%169, dtype="int32") /* ty=Tensor[(8, 9, 15), int32] */;
  %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %174 = %161.0;
  %175 = log10(%164) /* ty=Tensor[(3, ?, 7), float32] */;
  %176 = bitwise_and(%172, %173) /* ty=Tensor[(8, 9, 15), int32] */;
  (%174, meta[relay.Constant][12] /* ty=int16 */, meta[relay.Constant][13] /* ty=Tensor[(1080), int16] */, %175, %176)
}

def @func_2264(%var_2262: Tensor[(8, 4, 3), uint16], %var_2263: Tensor[(8, 4, 3), uint16]) -> Tensor[(8, 4, 3), uint16] {
  @func_2260(%var_2262, %var_2263) /* ty=Tensor[(8, 4, 3), uint16] */
}

def @func_2396(%var_2395: Tensor[(2, 21), float64]) -> (Tensor[(2, 21), uint16],) {
  %182 = fn (%var_2388: Tensor[(2, 21), float64]) -> (Tensor[(2, 21), uint16],) {
    %177 = @func_1748() /* ty=(Tensor[(3, 4, 7), float32], Tensor[(1125), float32], Tensor[(144), float64], Tensor[(143, 4), int8], Tensor[(1, 21), float64]) */;
    %178 = %177.4;
    %179 = cast(%178, dtype="uint16") /* ty=Tensor[(1, 21), uint16] */;
    %180 = cast(%var_2388, dtype="uint16") /* ty=Tensor[(2, 21), uint16] */;
    %181 = bitwise_xor(%179, %180) /* ty=Tensor[(2, 21), uint16] */;
    (%181,)
  };
  %182(%var_2395) /* ty=(Tensor[(2, 21), uint16],) */
}

def @func_3490() -> (Tensor[(3, ?, 7), float32],) {
  %191 = fn () -> (Tensor[(3, ?, 7), float32],) {
    %183 = @func_925() /* ty=Tensor[(3, ?, 7), int8] */;
    %184 = @func_895() /* ty=(Tensor[(3, ?, 7), int8],) */;
    %185 = %184.0;
    %186 = cast(%185, dtype="float32") /* ty=Tensor[(3, ?, 7), float32] */;
    %187 = shape_of(%183, dtype="int32") /* ty=Tensor[(3), int32] */;
    %188 = cast(%183, dtype="float32") /* ty=Tensor[(3, ?, 7), float32] */;
    %189 = dyn.reshape(%186, %187, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %190 = minimum(%188, %189) /* ty=Tensor[(3, ?, 7), float32] */;
    (%190,)
  };
  %191() /* ty=(Tensor[(3, ?, 7), float32],) */
}

def @func_2159() -> (Tensor[(572), float32],) {
  %192 = @func_1434() /* ty=(Tensor[(3, ?, 7), int8], Tensor[(13, 4, 11), int8], Tensor[(572), int8]) */;
  %193 = %192.2;
  %194 = cast(%193, dtype="float32") /* ty=Tensor[(572), float32] */;
  %195 = sigmoid(%194) /* ty=Tensor[(572), float32] */;
  (%195,)
}

def @func_4375() -> Tensor[(3, ?, 7), int8] {
  %197 = fn () -> Tensor[(3, ?, 7), int8] {
    %196 = @func_3782() /* ty=(Tensor[(3, ?, 7), int8], Tensor[(5, 12, 14), float64], Tensor[(840), float64], Tensor[(7, 2, 16), float32]) */;
    %196.0
  };
  %197() /* ty=Tensor[(3, ?, 7), int8] */
}

def @func_997() -> Tensor[(3, 4, 7), float32] {
  @func_995() /* ty=Tensor[(3, 4, 7), float32] */
}

def @func_3883() -> (Tensor[(5, 12, 14), float64],) {
  %202 = fn () -> (Tensor[(5, 12, 14), float64],) {
    %198 = @func_3782() /* ty=(Tensor[(3, ?, 7), int8], Tensor[(5, 12, 14), float64], Tensor[(840), float64], Tensor[(7, 2, 16), float32]) */;
    %199 = %198.1;
    %200 = cast(%199, dtype="float64") /* ty=Tensor[(5, 12, 14), float64] */;
    %201 = sigmoid(%200) /* ty=Tensor[(5, 12, 14), float64] */;
    (%201,)
  };
  %202() /* ty=(Tensor[(5, 12, 14), float64],) */
}

def @func_2457() -> (Tensor[(3, ?, 7), int8],) {
  %203 = @func_2371() /* ty=Tensor[(3, ?, 7), int8] */;
  (%203,)
}

def @func_1731(%var_1723: Tensor[(315), float64]) -> (Tensor[(15, 5, 15), float32], Tensor[(1125), float32], Tensor[(7, 3, 15), float64], Tensor[(315), float64], Tensor[(3, ?, 7), bool]) {
  %204 = cast(meta[relay.Constant][14] /* ty=Tensor[(1125), float32] */, dtype="float32") /* ty=Tensor[(1125), float32] */;
  %205 = reshape(%204, newshape=[15, 5, 15]) /* ty=Tensor[(15, 5, 15), float32] */;
  %206 = cast(%var_1723, dtype="float64") /* ty=Tensor[(315), float64] */;
  %207 = cast(%var_1723, dtype="float64") /* ty=Tensor[(315), float64] */;
  %208 = reshape(%206, newshape=[7, 3, 15]) /* ty=Tensor[(7, 3, 15), float64] */;
  %209 = reshape(%207, newshape=[7, 3, 15]) /* ty=Tensor[(7, 3, 15), float64] */;
  %210 = @func_1561(%208, %209) /* ty=(Tensor[(7, 3, 15), float64],) */;
  %211 = @func_925() /* ty=Tensor[(3, ?, 7), int8] */;
  %212 = cast(%211, dtype="float64") /* ty=Tensor[(3, ?, 7), float64] */;
  %213 = erf(%212) /* ty=Tensor[(3, ?, 7), float64] */;
  %214 = cast(%211, dtype="bool") /* ty=Tensor[(3, ?, 7), bool] */;
  %215 = shape_of(%213, dtype="int32") /* ty=Tensor[(3), int32] */;
  %216 = cast(%213, dtype="bool") /* ty=Tensor[(3, ?, 7), bool] */;
  %217 = dyn.reshape(%214, %215, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %218 = @func_312(%205) /* ty=Tensor[(15, 5, 15), float32] */;
  %219 = %210.0;
  %220 = less(%216, %217) /* ty=Tensor[(3, ?, 7), bool] */;
  (%218, meta[relay.Constant][14] /* ty=Tensor[(1125), float32] */, %219, %var_1723, %220)
}

def @func_4417() -> (Tensor[(5, 12, 14), float64],) {
  @func_4415() /* ty=(Tensor[(5, 12, 14), float64],) */
}

def @func_6315() -> (Tensor[(3, ?, 7), int8], Tensor[(572), float32], Tensor[(8, 9, 15), int16], bool, Tensor[(270, 4), int16]) {
  %221 = @func_2159() /* ty=(Tensor[(572), float32],) */;
  %222 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %223 = cast(meta[relay.Constant][15] /* ty=Tensor[(270, 4), int16] */, dtype="int16") /* ty=Tensor[(270, 4), int16] */;
  %224 = reshape(%222, newshape=[]) /* ty=bool */;
  %225 = reshape(%223, newshape=[1080]) /* ty=Tensor[(1080), int16] */;
  %226 = @func_2617(%224, %225) /* ty=(Tensor[(572), float32], Tensor[(3, 4, 7), float32], Tensor[(16, 32), bool], Tensor[(13, 4, 11), float32], Tensor[(72, 2), float64], Tensor[(7, 3), float64], Tensor[(572), bool], Tensor[(15, 5, 15), float32], Tensor[(15, 75), float32], Tensor[(3, 4, 7), uint16], Tensor[(8, 9, 15), int16], Tensor[(1080), int16]) */;
  %227 = @func_925() /* ty=Tensor[(3, ?, 7), int8] */;
  %228 = %221.0;
  %229 = %226.10;
  (%227, %228, %229, False /* ty=bool */, meta[relay.Constant][15] /* ty=Tensor[(270, 4), int16] */)
}

def @func_1876(%var_1829: bool, %var_1830: Tensor[(512), bool], %var_1871: Tensor[(572), float64]) -> (Tensor[(13, 4, 11), int8], Tensor[(5, 8, 9), uint16], Tensor[(4, 16, 8), bool], Tensor[(512), bool], Tensor[(3, ?, 7), int8], Tensor[(13, 5, 5), uint8], Tensor[(325), float32], Tensor[(3, ?, 7), int8], Tensor[(84), float32], Tensor[(572), float64]) {
  %230 = @func_1434() /* ty=(Tensor[(3, ?, 7), int8], Tensor[(13, 4, 11), int8], Tensor[(572), int8]) */;
  %231 = %230.2;
  %232 = cast(%231, dtype="int8") /* ty=Tensor[(572), int8] */;
  %233 = reshape(%232, newshape=[13, 4, 11]) /* ty=Tensor[(13, 4, 11), int8] */;
  %234 = @func_379(%233) /* ty=(Tensor[(13, 4, 11), int8],) */;
  %235 = @func_1580() /* ty=(Tensor[(5, 8, 9), uint16],) */;
  %236 = cast(%var_1829, dtype="bool") /* ty=bool */;
  %237 = cast(%var_1830, dtype="bool") /* ty=Tensor[(512), bool] */;
  %238 = reshape(%236, newshape=[]) /* ty=bool */;
  %239 = reshape(%237, newshape=[4, 16, 8]) /* ty=Tensor[(4, 16, 8), bool] */;
  %240 = @func_1243(%238, %239) /* ty=(Tensor[(4, 16, 8), bool], Tensor[(3, ?, 7), int8]) */;
  %241 = @func_1519() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %242 = cast(meta[relay.Constant][16] /* ty=Tensor[(325), float32] */, dtype="float32") /* ty=Tensor[(325), float32] */;
  %243 = reshape(%242, newshape=[13, 5, 5]) /* ty=Tensor[(13, 5, 5), float32] */;
  %244 = @func_1677(%243) /* ty=(Tensor[(13, 5, 5), uint8], Tensor[(3, ?, 7), int8], Tensor[(7, 3, 15), float64], Tensor[(315), float64]) */;
  %245 = cast(meta[relay.Constant][17] /* ty=Tensor[(84), float32] */, dtype="float32") /* ty=Tensor[(84), float32] */;
  %246 = reshape(%245, newshape=[3, 4, 7]) /* ty=Tensor[(3, 4, 7), float32] */;
  %247 = @func_1344(%246) /* ty=(Tensor[(3, 4, 7), uint16], Tensor[(3, 4, 7), float64], Tensor[(3, ?, 7), int8]) */;
  %248 = cast(%231, dtype="float32") /* ty=Tensor[(572), float32] */;
  %249 = sinh(%248) /* ty=Tensor[(572), float32] */;
  %250 = cast(%249, dtype="float64") /* ty=Tensor[(572), float64] */;
  %251 = cast(%var_1829, dtype="float64") /* ty=float64 */;
  %252 = floor_divide(%250, %251) /* ty=Tensor[(572), float64] */;
  %253 = cast(%var_1871, dtype="float64") /* ty=Tensor[(572), float64] */;
  %254 = shape_of(%252, dtype="int32") /* ty=Tensor[(1), int32] */;
  %255 = cast(%252, dtype="float64") /* ty=Tensor[(572), float64] */;
  %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?), float64] */;
  %257 = %234.0;
  %258 = %235.0;
  %259 = %240.0;
  %260 = %241.0;
  %261 = %244.0;
  %262 = %247.2;
  %263 = floor_mod(%255, %256) /* ty=Tensor[(572), float64] */;
  (%257, %258, %259, %var_1830, %260, %261, meta[relay.Constant][16] /* ty=Tensor[(325), float32] */, %262, meta[relay.Constant][17] /* ty=Tensor[(84), float32] */, %263)
}

def @func_4338() -> (Tensor[(5, 8, 9), uint16],) {
  %266 = fn () -> (Tensor[(5, 8, 9), uint16],) {
    %264 = @func_1580() /* ty=(Tensor[(5, 8, 9), uint16],) */;
    %265 = %264.0;
    (%265,)
  };
  %266() /* ty=(Tensor[(5, 8, 9), uint16],) */
}

def @func_1476() -> (Tensor[(3, ?, 7), int8], Tensor[(3, 4, 7), float32]) {
  %270 = fn () -> (Tensor[(3, ?, 7), int8], Tensor[(3, 4, 7), float32]) {
    %267 = @func_1182() /* ty=(Tensor[(3, ?, 7), int8],) */;
    %268 = %267.0;
    %269 = @func_995() /* ty=Tensor[(3, 4, 7), float32] */;
    (%268, %269)
  };
  %270() /* ty=(Tensor[(3, ?, 7), int8], Tensor[(3, 4, 7), float32]) */
}

def @func_4266() -> (Tensor[(3, ?, 7), int8],) {
  %273 = fn () -> (Tensor[(3, ?, 7), int8],) {
    %271 = @func_2234() /* ty=(Tensor[(572), float32], Tensor[(5, 8, 9), uint16], Tensor[(3, ?, 7), int8], Tensor[(3, ?, 7), float32]) */;
    %272 = %271.2;
    (%272,)
  };
  %273() /* ty=(Tensor[(3, ?, 7), int8],) */
}

def @func_6256() -> (Tensor[(3, ?, 7), bool],) {
  @func_6254() /* ty=(Tensor[(3, ?, 7), bool],) */
}

def @func_2726(%var_2725: Tensor[(84), bool]) -> (Tensor[(3, ?, 7), int8], Tensor[(15, 5, 15), float32], Tensor[(2, 72), float64], Tensor[(11, 52), int8], Tensor[(84), bool], Tensor[(13, 4, 11), float32], Tensor[(7, 3, 15), float64], Tensor[(315), float64], Tensor[(3, 4, 7), float32], Tensor[(7, 3, 15), float64], Tensor[(3, ?, 7), int8]) {
  %312 = fn (%var_2645: Tensor[(84), bool]) -> (Tensor[(3, ?, 7), int8], Tensor[(15, 5, 15), float32], Tensor[(2, 72), float64], Tensor[(11, 52), int8], Tensor[(84), bool], Tensor[(13, 4, 11), float32], Tensor[(7, 3, 15), float64], Tensor[(315), float64], Tensor[(3, 4, 7), float32], Tensor[(7, 3, 15), float64], Tensor[(3, ?, 7), int8]) {
    %274 = @func_1047() /* ty=(Tensor[(3, ?, 7), int8],) */;
    %275 = cast(meta[relay.Constant][18] /* ty=Tensor[(2, 72), float64] */, dtype="float64") /* ty=Tensor[(2, 72), float64] */;
    %276 = cast(meta[relay.Constant][19] /* ty=Tensor[(11, 52), int8] */, dtype="int8") /* ty=Tensor[(11, 52), int8] */;
    %277 = %274.0;
    %278 = cast(%277, dtype="float64") /* ty=Tensor[(3, ?, 7), float64] */;
    %279 = cast(%var_2645, dtype="bool") /* ty=Tensor[(84), bool] */;
    %280 = reshape(%275, newshape=[8, 3, 6]) /* ty=Tensor[(8, 3, 6), float64] */;
    %281 = reshape(%276, newshape=[572]) /* ty=Tensor[(572), int8] */;
    %282 = reshape(%278, newshape=[21, 1]) /* ty=Tensor[(21, 1), float64] */;
    %283 = reshape(%279, newshape=[7, 4, 3]) /* ty=Tensor[(7, 4, 3), bool] */;
    %284 = @func_834(%280, %281, %282, %283) /* ty=(Tensor[(8, 3, 6), float64], Tensor[(15, 5, 15), float32], Tensor[(1125), float32], Tensor[(572), int8], Tensor[(21, 1), float64], Tensor[(315), float64], Tensor[(84), float64], Tensor[(840), float64], Tensor[(13, 4, 11), float32], Tensor[(7, 4, 3), bool], Tensor[(13, 4, 11), int8], Tensor[(15, 5, 15), float32]) */;
    %285 = cast(meta[relay.Constant][18] /* ty=Tensor[(2, 72), float64] */, dtype="float64") /* ty=Tensor[(2, 72), float64] */;
    %286 = cast(meta[relay.Constant][19] /* ty=Tensor[(11, 52), int8] */, dtype="int8") /* ty=Tensor[(11, 52), int8] */;
    %287 = cast(%277, dtype="float64") /* ty=Tensor[(3, ?, 7), float64] */;
    %288 = cast(%var_2645, dtype="bool") /* ty=Tensor[(84), bool] */;
    %289 = reshape(%285, newshape=[8, 3, 6]) /* ty=Tensor[(8, 3, 6), float64] */;
    %290 = reshape(%286, newshape=[572]) /* ty=Tensor[(572), int8] */;
    %291 = reshape(%287, newshape=[21, 1]) /* ty=Tensor[(21, 1), float64] */;
    %292 = reshape(%288, newshape=[7, 4, 3]) /* ty=Tensor[(7, 4, 3), bool] */;
    %293 = @func_834(%289, %290, %291, %292) /* ty=(Tensor[(8, 3, 6), float64], Tensor[(15, 5, 15), float32], Tensor[(1125), float32], Tensor[(572), int8], Tensor[(21, 1), float64], Tensor[(315), float64], Tensor[(84), float64], Tensor[(840), float64], Tensor[(13, 4, 11), float32], Tensor[(7, 4, 3), bool], Tensor[(13, 4, 11), int8], Tensor[(15, 5, 15), float32]) */;
    %294 = cast(meta[relay.Constant][20] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
    %295 = cast(meta[relay.Constant][20] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
    %296 = reshape(%294, newshape=[7, 3, 15]) /* ty=Tensor[(7, 3, 15), float64] */;
    %297 = reshape(%295, newshape=[7, 3, 15]) /* ty=Tensor[(7, 3, 15), float64] */;
    %298 = @func_1561(%296, %297) /* ty=(Tensor[(7, 3, 15), float64],) */;
    %299 = @func_1311() /* ty=(Tensor[(3, 4, 7), float32],) */;
    %300 = %298.0;
    %301 = cast(%300, dtype="float64") /* ty=Tensor[(7, 3, 15), float64] */;
    %302 = cast(%300, dtype="float64") /* ty=Tensor[(7, 3, 15), float64] */;
    %303 = reshape(%301, newshape=[7, 3, 15]) /* ty=Tensor[(7, 3, 15), float64] */;
    %304 = reshape(%302, newshape=[7, 3, 15]) /* ty=Tensor[(7, 3, 15), float64] */;
    %305 = @func_1561(%303, %304) /* ty=(Tensor[(7, 3, 15), float64],) */;
    %306 = @func_2409() /* ty=(Tensor[(3, ?, 7), int8],) */;
    %307 = %284.1;
    %308 = %293.8;
    %309 = %299.0;
    %310 = %305.0;
    %311 = %306.0;
    (%277, %307, meta[relay.Constant][18] /* ty=Tensor[(2, 72), float64] */, meta[relay.Constant][19] /* ty=Tensor[(11, 52), int8] */, %var_2645, %308, %300, meta[relay.Constant][20] /* ty=Tensor[(315), float64] */, %309, %310, %311)
  };
  %312(%var_2725) /* ty=(Tensor[(3, ?, 7), int8], Tensor[(15, 5, 15), float32], Tensor[(2, 72), float64], Tensor[(11, 52), int8], Tensor[(84), bool], Tensor[(13, 4, 11), float32], Tensor[(7, 3, 15), float64], Tensor[(315), float64], Tensor[(3, 4, 7), float32], Tensor[(7, 3, 15), float64], Tensor[(3, ?, 7), int8]) */
}

def @func_4557(%var_4555: Tensor[(168), int8]) -> (Tensor[(3, ?, 7), int8], Tensor[(3, 8, 7), uint32], Tensor[(168), int8]) {
  @func_4554(%var_4555) /* ty=(Tensor[(3, ?, 7), int8], Tensor[(3, 8, 7), uint32], Tensor[(168), int8]) */
}

def @func_5088() -> (Tensor[(5, 8, 9), float64],) {
  %313 = @func_4337() /* ty=(Tensor[(5, 8, 9), uint16],) */;
  %314 = %313.0;
  %315 = cast(%314, dtype="float64") /* ty=Tensor[(5, 8, 9), float64] */;
  %316 = cos(%315) /* ty=Tensor[(5, 8, 9), float64] */;
  (%316,)
}

def @func_2459() -> (Tensor[(3, ?, 7), int8],) {
  @func_2457() /* ty=(Tensor[(3, ?, 7), int8],) */
}

def @func_1680(%var_1678: Tensor[(13, 5, 5), float32]) -> (Tensor[(13, 5, 5), uint8], Tensor[(3, ?, 7), int8], Tensor[(7, 3, 15), float64], Tensor[(315), float64]) {
  @func_1677(%var_1678) /* ty=(Tensor[(13, 5, 5), uint8], Tensor[(3, ?, 7), int8], Tensor[(7, 3, 15), float64], Tensor[(315), float64]) */
}

def @func_5210(%var_5208: bool) -> (Tensor[(8, 9, 15), int16], bool, Tensor[(1080, 1), int16], Tensor[(3, ?, 7), int8], Tensor[(5, 8, 9), uint16], Tensor[(143, 4), float32]) {
  @func_5207(%var_5208) /* ty=(Tensor[(8, 9, 15), int16], bool, Tensor[(1080, 1), int16], Tensor[(3, ?, 7), int8], Tensor[(5, 8, 9), uint16], Tensor[(143, 4), float32]) */
}

def @func_6062() -> (Tensor[(3, ?, 7), int8], Tensor[(15, 5, 15), float32], Tensor[(1125), float32]) {
  %322 = fn () -> (Tensor[(3, ?, 7), int8], Tensor[(15, 5, 15), float32], Tensor[(1125), float32]) {
    %317 = @func_2354() /* ty=(Tensor[(3, ?, 7), int8],) */;
    %318 = cast(meta[relay.Constant][21] /* ty=Tensor[(1125), float32] */, dtype="float32") /* ty=Tensor[(1125), float32] */;
    %319 = reshape(%318, newshape=[15, 5, 15]) /* ty=Tensor[(15, 5, 15), float32] */;
    %320 = %317.0;
    %321 = @func_312(%319) /* ty=Tensor[(15, 5, 15), float32] */;
    (%320, %321, meta[relay.Constant][21] /* ty=Tensor[(1125), float32] */)
  };
  %322() /* ty=(Tensor[(3, ?, 7), int8], Tensor[(15, 5, 15), float32], Tensor[(1125), float32]) */
}

def @func_5583() -> (Tensor[(540, 2), uint8], Tensor[(3, 4, 7), float32]) {
  @func_5581() /* ty=(Tensor[(540, 2), uint8], Tensor[(3, 4, 7), float32]) */
}

def @func_4306() -> Tensor[(3, ?, 7), float64] {
  %324 = fn () -> Tensor[(3, ?, 7), float64] {
    %323 = @func_4138() /* ty=(Tensor[(3, 4, 7), float32], Tensor[(3, ?, 7), float64]) */;
    %323.1
  };
  %324() /* ty=Tensor[(3, ?, 7), float64] */
}

def @func_2879() -> (Tensor[(3, 4, 7), float32], Tensor[(7, 3, 15), float64], Tensor[(315), float64]) {
  @func_2877() /* ty=(Tensor[(3, 4, 7), float32], Tensor[(7, 3, 15), float64], Tensor[(315), float64]) */
}

def @func_4705(%var_4656: bool) -> (Tensor[(3, ?, 7), int8], Tensor[(10, 5, 7), bool], Tensor[(350), int8], Tensor[(5, 8, 9), float64], Tensor[(512, 1), bool], Tensor[(572), float64], Tensor[(512), float64]) {
  %325 = @func_2354() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %326 = cast(meta[relay.Constant][22] /* ty=Tensor[(350), int8] */, dtype="int8") /* ty=Tensor[(350), int8] */;
  %327 = cast(meta[relay.Constant][22] /* ty=Tensor[(350), int8] */, dtype="int8") /* ty=Tensor[(350), int8] */;
  %328 = reshape(%326, newshape=[10, 5, 7]) /* ty=Tensor[(10, 5, 7), int8] */;
  %329 = reshape(%327, newshape=[10, 5, 7]) /* ty=Tensor[(10, 5, 7), int8] */;
  %330 = @func_4235(%328, %329) /* ty=(Tensor[(10, 5, 7), bool], Tensor[(10, 5, 7), float32]) */;
  %331 = @func_3578() /* ty=(Tensor[(5, 8, 9), uint16], Tensor[(7, 2, 16), float32]) */;
  %332 = %331.0;
  %333 = cast(meta[relay.Constant][23] /* ty=Tensor[(5, 8, 9), uint16] */, dtype="float64") /* ty=Tensor[(5, 8, 9), float64] */;
  %334 = shape_of(%332, dtype="int32") /* ty=Tensor[(3), int32] */;
  %335 = cast(%332, dtype="float64") /* ty=Tensor[(5, 8, 9), float64] */;
  %336 = dyn.reshape(%333, %334, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %337 = cast(%var_4656, dtype="bool") /* ty=bool */;
  %338 = cast(meta[relay.Constant][24] /* ty=Tensor[(512, 1), bool] */, dtype="bool") /* ty=Tensor[(512, 1), bool] */;
  %339 = cast(meta[relay.Constant][25] /* ty=Tensor[(572), float64] */, dtype="float64") /* ty=Tensor[(572), float64] */;
  %340 = reshape(%337, newshape=[]) /* ty=bool */;
  %341 = reshape(%338, newshape=[512]) /* ty=Tensor[(512), bool] */;
  %342 = reshape(%339, newshape=[572]) /* ty=Tensor[(572), float64] */;
  %343 = @func_1876(%340, %341, %342) /* ty=(Tensor[(13, 4, 11), int8], Tensor[(5, 8, 9), uint16], Tensor[(4, 16, 8), bool], Tensor[(512), bool], Tensor[(3, ?, 7), int8], Tensor[(13, 5, 5), uint8], Tensor[(325), float32], Tensor[(3, ?, 7), int8], Tensor[(84), float32], Tensor[(572), float64]) */;
  %344 = %343.3;
  %345 = cast(%344, dtype="float64") /* ty=Tensor[(512), float64] */;
  %346 = cast(%var_4656, dtype="float64") /* ty=float64 */;
  %347 = %325.0;
  %348 = %330.0;
  %349 = maximum(%335, %336) /* ty=Tensor[(5, 8, 9), float64] */;
  %350 = maximum(%345, %346) /* ty=Tensor[(512), float64] */;
  (%347, %348, meta[relay.Constant][22] /* ty=Tensor[(350), int8] */, %349, meta[relay.Constant][24] /* ty=Tensor[(512, 1), bool] */, meta[relay.Constant][25] /* ty=Tensor[(572), float64] */, %350)
}

def @func_5600(%var_5598: Tensor[(3, 7, 7), float32]) -> (Tensor[(3, 7, 7), int8],) {
  @func_5597(%var_5598) /* ty=(Tensor[(3, 7, 7), int8],) */
}

def @func_2332(%var_2292: Tensor[(1, 7, 13), uint8]) -> (Tensor[(12, 7, 13), uint8], Tensor[(572), float32], Tensor[(1, 7, 13), float64]) {
  %351 = cast(%var_2292, dtype="uint8") /* ty=Tensor[(1, 7, 13), uint8] */;
  %352 = cast(meta[relay.Constant][26] /* ty=Tensor[(12, 7, 13), uint8] */, dtype="uint8") /* ty=Tensor[(12, 7, 13), uint8] */;
  %353 = @func_2159() /* ty=(Tensor[(572), float32],) */;
  %354 = cast(%var_2292, dtype="float64") /* ty=Tensor[(1, 7, 13), float64] */;
  %355 = bitwise_and(%351, %352) /* ty=Tensor[(12, 7, 13), uint8] */;
  %356 = %353.0;
  %357 = rsqrt(%354) /* ty=Tensor[(1, 7, 13), float64] */;
  (%355, %356, %357)
}

def @func_3784() -> (Tensor[(3, ?, 7), int8], Tensor[(5, 12, 14), float64], Tensor[(840), float64], Tensor[(7, 2, 16), float32]) {
  @func_3782() /* ty=(Tensor[(3, ?, 7), int8], Tensor[(5, 12, 14), float64], Tensor[(840), float64], Tensor[(7, 2, 16), float32]) */
}

def @func_4404(%var_4402: Tensor[(84), bool]) -> (Tensor[(5, 8, 9), uint16], Tensor[(5, 12, 14), float64], Tensor[(12, 70), float64], Tensor[(8, 18), float64], Tensor[(84), bool]) {
  @func_4401(%var_4402) /* ty=(Tensor[(5, 8, 9), uint16], Tensor[(5, 12, 14), float64], Tensor[(12, 70), float64], Tensor[(8, 18), float64], Tensor[(84), bool]) */
}

def @func_1561(%var_1543: Tensor[(7, 3, 15), float64], %var_1544: Tensor[(7, 3, 15), float64]) -> (Tensor[(7, 3, 15), float64],) {
  %358 = cast(%var_1544, dtype="float64") /* ty=Tensor[(7, 3, 15), float64] */;
  %359 = shape_of(%var_1543, dtype="int32") /* ty=Tensor[(3), int32] */;
  %360 = cast(%var_1543, dtype="float64") /* ty=Tensor[(7, 3, 15), float64] */;
  %361 = dyn.reshape(%358, %359, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %362 = divide(%360, %361) /* ty=Tensor[(7, 3, 15), float64] */;
  (%362,)
}

def @func_2371() -> Tensor[(3, ?, 7), int8] {
  %363 = @func_1047() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %363.0
}

def @func_2068(%var_2066: Tensor[(8, 9, 15), int16]) -> (Tensor[(3, ?, 7), int8], int16, Tensor[(1080), int16], Tensor[(3, ?, 7), float32], Tensor[(8, 9, 15), int32]) {
  @func_2065(%var_2066) /* ty=(Tensor[(3, ?, 7), int8], int16, Tensor[(1080), int16], Tensor[(3, ?, 7), float32], Tensor[(8, 9, 15), int32]) */
}

def @func_3921() -> Tensor[(5, 8, 9), uint16] {
  @func_3919() /* ty=Tensor[(5, 8, 9), uint16] */
}

def @func_5062(%var_5061: Tensor[(3, 3, 15), int16]) -> Tensor[(3, 3, 15), int8] {
  %373 = fn (%var_5049: Tensor[(3, 3, 15), int16]) -> Tensor[(3, 3, 15), int8] {
    %364 = cast(meta[relay.Constant][27] /* ty=Tensor[(3, 3, 15), int16] */, dtype="int16") /* ty=Tensor[(3, 3, 15), int16] */;
    %365 = shape_of(%var_5049, dtype="int32") /* ty=Tensor[(3), int32] */;
    %366 = cast(%var_5049, dtype="int16") /* ty=Tensor[(3, 3, 15), int16] */;
    %367 = dyn.reshape(%364, %365, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %368 = minimum(%366, %367) /* ty=Tensor[(3, 3, 15), int16] */;
    %369 = cast(%var_5049, dtype="int8") /* ty=Tensor[(3, 3, 15), int8] */;
    %370 = shape_of(%368, dtype="int32") /* ty=Tensor[(3), int32] */;
    %371 = cast(%368, dtype="int8") /* ty=Tensor[(3, 3, 15), int8] */;
    %372 = dyn.reshape(%369, %370, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    right_shift(%371, %372) /* ty=Tensor[(3, 3, 15), int8] */
  };
  %373(%var_5061) /* ty=Tensor[(3, 3, 15), int8] */
}

def @func_1565(%var_1563: Tensor[(7, 3, 15), float64], %var_1564: Tensor[(7, 3, 15), float64]) -> (Tensor[(7, 3, 15), float64],) {
  @func_1561(%var_1563, %var_1564) /* ty=(Tensor[(7, 3, 15), float64],) */
}

def @func_4070(%var_4027: Tensor[(5, 8, 9), uint16]) -> (Tensor[(5, 8, 9), float64], Tensor[(5, 8, 9), float32]) {
  %374 = @func_3919() /* ty=Tensor[(5, 8, 9), uint16] */;
  %375 = cast(%var_4027, dtype="float64") /* ty=Tensor[(5, 8, 9), float64] */;
  %376 = shape_of(%374, dtype="int32") /* ty=Tensor[(3), int32] */;
  %377 = cast(%374, dtype="float64") /* ty=Tensor[(5, 8, 9), float64] */;
  %378 = dyn.reshape(%375, %376, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %379 = cast(%var_4027, dtype="float32") /* ty=Tensor[(5, 8, 9), float32] */;
  %380 = mod(%377, %378) /* ty=Tensor[(5, 8, 9), float64] */;
  %381 = erf(%379) /* ty=Tensor[(5, 8, 9), float32] */;
  (%380, %381)
}

def @func_3260() -> (Tensor[(3, 7, 7), float32], Tensor[(3, 4, 7), float32]) {
  %382 = @func_1519() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %383 = %382.0;
  %384 = cast(%383, dtype="float32") /* ty=Tensor[(3, ?, 7), float32] */;
  %385 = cast(meta[relay.Constant][28] /* ty=Tensor[(3, 7, 7), int8] */, dtype="float32") /* ty=Tensor[(3, 7, 7), float32] */;
  %386 = @func_1311() /* ty=(Tensor[(3, 4, 7), float32],) */;
  %387 = floor_divide(%384, %385) /* ty=Tensor[(3, 7, 7), float32] */;
  %388 = %386.0;
  (%387, %388)
}

def @func_2260(%var_2255: Tensor[(8, 4, 3), uint16], %var_2256: Tensor[(8, 4, 3), uint16]) -> Tensor[(8, 4, 3), uint16] {
  %389 = cast(%var_2256, dtype="uint16") /* ty=Tensor[(8, 4, 3), uint16] */;
  %390 = shape_of(%var_2255, dtype="int32") /* ty=Tensor[(3), int32] */;
  %391 = cast(%var_2255, dtype="uint16") /* ty=Tensor[(8, 4, 3), uint16] */;
  %392 = dyn.reshape(%389, %390, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  minimum(%391, %392) /* ty=Tensor[(8, 4, 3), uint16] */
}

def @func_3631(%var_3629: bool) -> (Tensor[(3, ?, 7), int8], Tensor[(3, 4, 7), float32], bool, Tensor[(3, 4, 7), float32], Tensor[(3, ?, 7), int8], Tensor[(1080), float32], Tensor[(3, ?, 7), int8]) {
  @func_3628(%var_3629) /* ty=(Tensor[(3, ?, 7), int8], Tensor[(3, 4, 7), float32], bool, Tensor[(3, 4, 7), float32], Tensor[(3, ?, 7), int8], Tensor[(1080), float32], Tensor[(3, ?, 7), int8]) */
}

def @func_3578() -> (Tensor[(5, 8, 9), uint16], Tensor[(7, 2, 16), float32]) {
  %393 = @func_1580() /* ty=(Tensor[(5, 8, 9), uint16],) */;
  %394 = %393.0;
  %395 = @func_3285() /* ty=Tensor[(7, 2, 16), float32] */;
  (%394, %395)
}

def @func_3919() -> Tensor[(5, 8, 9), uint16] {
  %396 = @func_3578() /* ty=(Tensor[(5, 8, 9), uint16], Tensor[(7, 2, 16), float32]) */;
  %396.0
}

def @func_3782() -> (Tensor[(3, ?, 7), int8], Tensor[(5, 12, 14), float64], Tensor[(840), float64], Tensor[(7, 2, 16), float32]) {
  %397 = @func_1182() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %398 = cast(meta[relay.Constant][29] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %399 = reshape(%398, newshape=[5, 12, 14]) /* ty=Tensor[(5, 12, 14), float64] */;
  %400 = @func_115(%399) /* ty=(Tensor[(5, 12, 14), float64], Tensor[(5, 12, 14), int64], Tensor[(5, 12, 14), int8]) */;
  %401 = %397.0;
  %402 = %400.0;
  %403 = @func_3285() /* ty=Tensor[(7, 2, 16), float32] */;
  (%401, %402, meta[relay.Constant][29] /* ty=Tensor[(840), float64] */, %403)
}

def @func_1749() -> (Tensor[(3, 4, 7), float32], Tensor[(1125), float32], Tensor[(144), float64], Tensor[(143, 4), int8], Tensor[(1, 21), float64]) {
  %415 = fn () -> (Tensor[(3, 4, 7), float32], Tensor[(1125), float32], Tensor[(144), float64], Tensor[(143, 4), int8], Tensor[(1, 21), float64]) {
    %404 = cast(meta[relay.Constant][30] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
    %405 = cast(meta[relay.Constant][31] /* ty=Tensor[(143, 4), int8] */, dtype="int8") /* ty=Tensor[(143, 4), int8] */;
    %406 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 21), float64] */, dtype="float64") /* ty=Tensor[(1, 21), float64] */;
    %407 = @func_995() /* ty=Tensor[(3, 4, 7), float32] */;
    %408 = cast(%407, dtype="bool") /* ty=Tensor[(3, 4, 7), bool] */;
    %409 = reshape(%404, newshape=[8, 3, 6]) /* ty=Tensor[(8, 3, 6), float64] */;
    %410 = reshape(%405, newshape=[572]) /* ty=Tensor[(572), int8] */;
    %411 = reshape(%406, newshape=[21, 1]) /* ty=Tensor[(21, 1), float64] */;
    %412 = reshape(%408, newshape=[7, 4, 3]) /* ty=Tensor[(7, 4, 3), bool] */;
    %413 = @func_834(%409, %410, %411, %412) /* ty=(Tensor[(8, 3, 6), float64], Tensor[(15, 5, 15), float32], Tensor[(1125), float32], Tensor[(572), int8], Tensor[(21, 1), float64], Tensor[(315), float64], Tensor[(84), float64], Tensor[(840), float64], Tensor[(13, 4, 11), float32], Tensor[(7, 4, 3), bool], Tensor[(13, 4, 11), int8], Tensor[(15, 5, 15), float32]) */;
    %414 = %413.2;
    (%407, %414, meta[relay.Constant][30] /* ty=Tensor[(144), float64] */, meta[relay.Constant][31] /* ty=Tensor[(143, 4), int8] */, meta[relay.Constant][32] /* ty=Tensor[(1, 21), float64] */)
  };
  %415() /* ty=(Tensor[(3, 4, 7), float32], Tensor[(1125), float32], Tensor[(144), float64], Tensor[(143, 4), int8], Tensor[(1, 21), float64]) */
}

def @func_2236() -> (Tensor[(572), float32], Tensor[(5, 8, 9), uint16], Tensor[(3, ?, 7), int8], Tensor[(3, ?, 7), float32]) {
  @func_2234() /* ty=(Tensor[(572), float32], Tensor[(5, 8, 9), uint16], Tensor[(3, ?, 7), int8], Tensor[(3, ?, 7), float32]) */
}

def @func_2161() -> (Tensor[(572), float32],) {
  @func_2159() /* ty=(Tensor[(572), float32],) */
}

def @func_4140() -> (Tensor[(3, 4, 7), float32], Tensor[(3, ?, 7), float64]) {
  @func_4138() /* ty=(Tensor[(3, 4, 7), float32], Tensor[(3, ?, 7), float64]) */
}

def @func_2411() -> (Tensor[(3, ?, 7), int8],) {
  @func_2409() /* ty=(Tensor[(3, ?, 7), int8],) */
}

def @func_3843(%var_3814: Tensor[(3, 8, 7), int8], %var_3823: Tensor[(3, 8, 7), float32]) -> Tensor[(3, 8, 7), uint32] {
  %416 = @func_2457() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %417 = %416.0;
  %418 = cast(%417, dtype="float32") /* ty=Tensor[(3, ?, 7), float32] */;
  %419 = cast(%var_3814, dtype="float32") /* ty=Tensor[(3, 8, 7), float32] */;
  %420 = power(%418, %419) /* ty=Tensor[(3, 8, 7), float32] */;
  %421 = cast(%var_3823, dtype="float32") /* ty=Tensor[(3, 8, 7), float32] */;
  %422 = shape_of(%420, dtype="int32") /* ty=Tensor[(3), int32] */;
  %423 = cast(%420, dtype="float32") /* ty=Tensor[(3, 8, 7), float32] */;
  %424 = dyn.reshape(%421, %422, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %425 = multiply(%423, %424) /* ty=Tensor[(3, 8, 7), float32] */;
  %426 = cast(%425, dtype="uint32") /* ty=Tensor[(3, 8, 7), uint32] */;
  %427 = shape_of(%420, dtype="int32") /* ty=Tensor[(3), int32] */;
  %428 = cast(%420, dtype="uint32") /* ty=Tensor[(3, 8, 7), uint32] */;
  %429 = dyn.reshape(%426, %427, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_and(%428, %429) /* ty=Tensor[(3, 8, 7), uint32] */
}

def @func_2477(%var_2463: Tensor[(3, 15, 7), int8]) -> Tensor[(3, 15, 7), uint16] {
  %430 = @func_2409() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %431 = %430.0;
  %432 = cast(%431, dtype="uint16") /* ty=Tensor[(3, ?, 7), uint16] */;
  %433 = cast(%var_2463, dtype="uint16") /* ty=Tensor[(3, 15, 7), uint16] */;
  maximum(%432, %433) /* ty=Tensor[(3, 15, 7), uint16] */
}

def @func_5423() -> (Tensor[(16, 32), bool], Tensor[(540, 2), int16], Tensor[(5, 8, 9), uint16], Tensor[(3, ?, 7), float32], Tensor[(7, 3, 15), float64], Tensor[(84), bool], Tensor[(3, 4, 7), float32]) {
  @func_5421() /* ty=(Tensor[(16, 32), bool], Tensor[(540, 2), int16], Tensor[(5, 8, 9), uint16], Tensor[(3, ?, 7), float32], Tensor[(7, 3, 15), float64], Tensor[(84), bool], Tensor[(3, 4, 7), float32]) */
}

def @func_5090() -> (Tensor[(5, 8, 9), float64],) {
  @func_5088() /* ty=(Tensor[(5, 8, 9), float64],) */
}

def @func_1580() -> (Tensor[(5, 8, 9), uint16],) {
  %434 = cast(meta[relay.Constant][34] /* ty=Tensor[(5, 8, 9), uint16] */, dtype="uint16") /* ty=Tensor[(5, 8, 9), uint16] */;
  %435 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(5, 8, 9), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %436 = cast(meta[relay.Constant][33] /* ty=Tensor[(5, 8, 9), uint16] */, dtype="uint16") /* ty=Tensor[(5, 8, 9), uint16] */;
  %437 = dyn.reshape(%434, %435, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %438 = add(%436, %437) /* ty=Tensor[(5, 8, 9), uint16] */;
  (%438,)
}

def @func_3001() -> (Tensor[(3, ?, 7), bool], Tensor[(3, ?, 7), bool]) {
  @func_2999() /* ty=(Tensor[(3, ?, 7), bool], Tensor[(3, ?, 7), bool]) */
}

def @func_3217(%var_3179: Tensor[(84), bool]) -> (Tensor[(11, 52), int8], Tensor[(84), bool], Tensor[(3, ?, 7), float32], Tensor[(7, 4, 3), bool], Tensor[(8, 18), float64]) {
  %439 = cast(%var_3179, dtype="bool") /* ty=Tensor[(84), bool] */;
  %440 = reshape(%439, newshape=[84]) /* ty=Tensor[(84), bool] */;
  %441 = @func_2724(%440) /* ty=(Tensor[(3, ?, 7), int8], Tensor[(15, 5, 15), float32], Tensor[(2, 72), float64], Tensor[(11, 52), int8], Tensor[(84), bool], Tensor[(13, 4, 11), float32], Tensor[(7, 3, 15), float64], Tensor[(315), float64], Tensor[(3, 4, 7), float32], Tensor[(7, 3, 15), float64], Tensor[(3, ?, 7), int8]) */;
  %442 = @func_1519() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %443 = %442.0;
  %444 = @func_925() /* ty=Tensor[(3, ?, 7), int8] */;
  %445 = cast(%444, dtype="float32") /* ty=Tensor[(3, ?, 7), float32] */;
  %446 = shape_of(%443, dtype="int32") /* ty=Tensor[(3), int32] */;
  %447 = cast(%443, dtype="float32") /* ty=Tensor[(3, ?, 7), float32] */;
  %448 = dyn.reshape(%445, %446, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %449 = cast(meta[relay.Constant][35] /* ty=Tensor[(8, 18), float64] */, dtype="float64") /* ty=Tensor[(8, 18), float64] */;
  %450 = %441.3;
  %451 = cast(%450, dtype="int8") /* ty=Tensor[(11, 52), int8] */;
  %452 = cast(%444, dtype="float64") /* ty=Tensor[(3, ?, 7), float64] */;
  %453 = cast(%var_3179, dtype="bool") /* ty=Tensor[(84), bool] */;
  %454 = reshape(%449, newshape=[8, 3, 6]) /* ty=Tensor[(8, 3, 6), float64] */;
  %455 = reshape(%451, newshape=[572]) /* ty=Tensor[(572), int8] */;
  %456 = reshape(%452, newshape=[21, 1]) /* ty=Tensor[(21, 1), float64] */;
  %457 = reshape(%453, newshape=[7, 4, 3]) /* ty=Tensor[(7, 4, 3), bool] */;
  %458 = @func_834(%454, %455, %456, %457) /* ty=(Tensor[(8, 3, 6), float64], Tensor[(15, 5, 15), float32], Tensor[(1125), float32], Tensor[(572), int8], Tensor[(21, 1), float64], Tensor[(315), float64], Tensor[(84), float64], Tensor[(840), float64], Tensor[(13, 4, 11), float32], Tensor[(7, 4, 3), bool], Tensor[(13, 4, 11), int8], Tensor[(15, 5, 15), float32]) */;
  %459 = maximum(%447, %448) /* ty=Tensor[(3, ?, 7), float32] */;
  %460 = %458.9;
  (%450, %var_3179, %459, %460, meta[relay.Constant][35] /* ty=Tensor[(8, 18), float64] */)
}

def @func_3912() -> (Tensor[(3, ?, 7), int8], Tensor[(1, 7, 13), float64], Tensor[(91, 1), uint8]) {
  %467 = fn () -> (Tensor[(3, ?, 7), int8], Tensor[(1, 7, 13), float64], Tensor[(91, 1), uint8]) {
    %461 = @func_895() /* ty=(Tensor[(3, ?, 7), int8],) */;
    %462 = cast(meta[relay.Constant][36] /* ty=Tensor[(91, 1), uint8] */, dtype="uint8") /* ty=Tensor[(91, 1), uint8] */;
    %463 = reshape(%462, newshape=[1, 7, 13]) /* ty=Tensor[(1, 7, 13), uint8] */;
    %464 = @func_2332(%463) /* ty=(Tensor[(12, 7, 13), uint8], Tensor[(572), float32], Tensor[(1, 7, 13), float64]) */;
    %465 = %461.0;
    %466 = %464.2;
    (%465, %466, meta[relay.Constant][36] /* ty=Tensor[(91, 1), uint8] */)
  };
  %467() /* ty=(Tensor[(3, ?, 7), int8], Tensor[(1, 7, 13), float64], Tensor[(91, 1), uint8]) */
}

def @func_382(%var_380: Tensor[(13, 4, 11), int8]) -> (Tensor[(13, 4, 11), int8],) {
  @func_379(%var_380) /* ty=(Tensor[(13, 4, 11), int8],) */
}

def @func_260(%var_256: Tensor[(7, 1, 3), float64], %var_257: Tensor[(7, 15, 3), float64], %var_258: Tensor[(7, 4, 3), float64], %var_259: Tensor[(840), float64]) -> (Tensor[(7, 15, 3), float64], Tensor[(7, 4, 3), bool], Tensor[(5, 12, 14), int64], Tensor[(840), float64]) {
  @func_254(%var_256, %var_257, %var_258, %var_259) /* ty=(Tensor[(7, 15, 3), float64], Tensor[(7, 4, 3), bool], Tensor[(5, 12, 14), int64], Tensor[(840), float64]) */
}

def @func_4073(%var_4071: Tensor[(5, 8, 9), uint16]) -> (Tensor[(5, 8, 9), float64], Tensor[(5, 8, 9), float32]) {
  @func_4070(%var_4071) /* ty=(Tensor[(5, 8, 9), float64], Tensor[(5, 8, 9), float32]) */
}

def @func_115(%var_48: Tensor[(5, 12, 14), float64]) -> (Tensor[(5, 12, 14), float64], Tensor[(5, 12, 14), int64], Tensor[(5, 12, 14), int8]) {
  %468 = cast(%var_48, dtype="float64") /* ty=Tensor[(5, 12, 14), float64] */;
  %469 = cosh(%468) /* ty=Tensor[(5, 12, 14), float64] */;
  %470 = cast(%var_48, dtype="float64") /* ty=Tensor[(5, 12, 14), float64] */;
  %471 = shape_of(%469, dtype="int32") /* ty=Tensor[(3), int32] */;
  %472 = cast(%469, dtype="float64") /* ty=Tensor[(5, 12, 14), float64] */;
  %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %474 = add(%472, %473) /* ty=Tensor[(5, 12, 14), float64] */;
  %475 = cast(%474, dtype="float64") /* ty=Tensor[(5, 12, 14), float64] */;
  %476 = sin(%475) /* ty=Tensor[(5, 12, 14), float64] */;
  %477 = cast(%469, dtype="float64") /* ty=Tensor[(5, 12, 14), float64] */;
  %478 = shape_of(%476, dtype="int32") /* ty=Tensor[(3), int32] */;
  %479 = cast(%476, dtype="float64") /* ty=Tensor[(5, 12, 14), float64] */;
  %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %481 = cast(%474, dtype="float64") /* ty=Tensor[(5, 12, 14), float64] */;
  %482 = exp(%481) /* ty=Tensor[(5, 12, 14), float64] */;
  %483 = cast(%474, dtype="int64") /* ty=Tensor[(5, 12, 14), int64] */;
  %484 = shape_of(%482, dtype="int32") /* ty=Tensor[(3), int32] */;
  %485 = cast(%482, dtype="int64") /* ty=Tensor[(5, 12, 14), int64] */;
  %486 = dyn.reshape(%483, %484, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %487 = cast(meta[relay.Constant][37] /* ty=Tensor[(5, 12, 14), float64] */, dtype="int8") /* ty=Tensor[(5, 12, 14), int8] */;
  %488 = shape_of(%469, dtype="int32") /* ty=Tensor[(3), int32] */;
  %489 = cast(%469, dtype="int8") /* ty=Tensor[(5, 12, 14), int8] */;
  %490 = dyn.reshape(%487, %488, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %491 = divide(%479, %480) /* ty=Tensor[(5, 12, 14), float64] */;
  %492 = left_shift(%485, %486) /* ty=Tensor[(5, 12, 14), int64] */;
  %493 = right_shift(%489, %490) /* ty=Tensor[(5, 12, 14), int8] */;
  (%491, %492, %493)
}

def @func_5426() -> (int16,) {
  %494 = @func_4510() /* ty=(Tensor[(8, 9, 15), int16], int16, Tensor[(1080), int16], Tensor[(3, ?, 7), uint64]) */;
  %495 = %494.1;
  (%495,)
}

def @func_1520() -> (Tensor[(3, ?, 7), int8],) {
  %497 = fn () -> (Tensor[(3, ?, 7), int8],) {
    %496 = @func_925() /* ty=Tensor[(3, ?, 7), int8] */;
    (%496,)
  };
  %497() /* ty=(Tensor[(3, ?, 7), int8],) */
}

def @func_4915(%var_4914: Tensor[(21, 4), bool]) -> (Tensor[(3, 5, 7), bool], Tensor[(11, 52), int8], Tensor[(21, 4), bool], Tensor[(8, 4, 3), int16]) {
  %516 = fn (%var_4895: Tensor[(21, 4), bool]) -> (Tensor[(3, 5, 7), bool], Tensor[(11, 52), int8], Tensor[(21, 4), bool], Tensor[(8, 4, 3), int16]) {
    %498 = @func_4374() /* ty=Tensor[(3, ?, 7), int8] */;
    %499 = cast(%498, dtype="bool") /* ty=Tensor[(3, ?, 7), bool] */;
    %500 = cast(meta[relay.Constant][38] /* ty=Tensor[(3, 5, 7), int8] */, dtype="bool") /* ty=Tensor[(3, 5, 7), bool] */;
    %501 = cast(%var_4895, dtype="bool") /* ty=Tensor[(21, 4), bool] */;
    %502 = reshape(%501, newshape=[84]) /* ty=Tensor[(84), bool] */;
    %503 = @func_2724(%502) /* ty=(Tensor[(3, ?, 7), int8], Tensor[(15, 5, 15), float32], Tensor[(2, 72), float64], Tensor[(11, 52), int8], Tensor[(84), bool], Tensor[(13, 4, 11), float32], Tensor[(7, 3, 15), float64], Tensor[(315), float64], Tensor[(3, 4, 7), float32], Tensor[(7, 3, 15), float64], Tensor[(3, ?, 7), int8]) */;
    %504 = cast(meta[relay.Constant][39] /* ty=Tensor[(96), uint16] */, dtype="uint16") /* ty=Tensor[(96), uint16] */;
    %505 = cast(meta[relay.Constant][39] /* ty=Tensor[(96), uint16] */, dtype="uint16") /* ty=Tensor[(96), uint16] */;
    %506 = reshape(%504, newshape=[8, 4, 3]) /* ty=Tensor[(8, 4, 3), uint16] */;
    %507 = reshape(%505, newshape=[8, 4, 3]) /* ty=Tensor[(8, 4, 3), uint16] */;
    %508 = @func_2260(%506, %507) /* ty=Tensor[(8, 4, 3), uint16] */;
    %509 = cast(meta[relay.Constant][39] /* ty=Tensor[(96), uint16] */, dtype="int16") /* ty=Tensor[(96), int16] */;
    %510 = shape_of(%508, dtype="int32") /* ty=Tensor[(3), int32] */;
    %511 = cast(%508, dtype="int16") /* ty=Tensor[(8, 4, 3), int16] */;
    %512 = dyn.reshape(%509, %510, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %513 = logical_or(%499, %500) /* ty=Tensor[(3, 5, 7), bool] */;
    %514 = %503.3;
    %515 = left_shift(%511, %512) /* ty=Tensor[(8, 4, 3), int16] */;
    (%513, %514, %var_4895, %515)
  };
  %516(%var_4914) /* ty=(Tensor[(3, 5, 7), bool], Tensor[(11, 52), int8], Tensor[(21, 4), bool], Tensor[(8, 4, 3), int16]) */
}

def @func_2409() -> (Tensor[(3, ?, 7), int8],) {
  %517 = @func_1182() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %518 = %517.0;
  (%518,)
}

def @func_5499() -> (Tensor[(3, ?, 7), int8], Tensor[(3, ?, 7), int8]) {
  %519 = @func_2409() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %520 = %519.0;
  %521 = @func_1790() /* ty=Tensor[(3, ?, 7), int8] */;
  (%520, %521)
}

def @func_5501() -> (Tensor[(3, ?, 7), int8], Tensor[(3, ?, 7), int8]) {
  @func_5499() /* ty=(Tensor[(3, ?, 7), int8], Tensor[(3, ?, 7), int8]) */
}

def @func_6416() -> Tensor[(3, 12, 7), float32] {
  %525 = fn () -> Tensor[(3, 12, 7), float32] {
    %522 = cast(meta[relay.Constant][40] /* ty=Tensor[(3, 12, 7), float32] */, dtype="float32") /* ty=Tensor[(3, 12, 7), float32] */;
    %523 = log(%522) /* ty=Tensor[(3, 12, 7), float32] */;
    %524 = cast(%523, dtype="float32") /* ty=Tensor[(3, 12, 7), float32] */;
    exp(%524) /* ty=Tensor[(3, 12, 7), float32] */
  };
  %525() /* ty=Tensor[(3, 12, 7), float32] */
}

def @func_6232() -> Tensor[(3, ?, 7), bool] {
  %527 = fn () -> Tensor[(3, ?, 7), bool] {
    %526 = @func_2999() /* ty=(Tensor[(3, ?, 7), bool], Tensor[(3, ?, 7), bool]) */;
    %526.1
  };
  %527() /* ty=Tensor[(3, ?, 7), bool] */
}

def @func_5421() -> (Tensor[(16, 32), bool], Tensor[(540, 2), int16], Tensor[(5, 8, 9), uint16], Tensor[(3, ?, 7), float32], Tensor[(7, 3, 15), float64], Tensor[(84), bool], Tensor[(3, 4, 7), float32]) {
  %528 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %529 = cast(meta[relay.Constant][41] /* ty=Tensor[(540, 2), int16] */, dtype="int16") /* ty=Tensor[(540, 2), int16] */;
  %530 = reshape(%528, newshape=[]) /* ty=bool */;
  %531 = reshape(%529, newshape=[1080]) /* ty=Tensor[(1080), int16] */;
  %532 = @func_2617(%530, %531) /* ty=(Tensor[(572), float32], Tensor[(3, 4, 7), float32], Tensor[(16, 32), bool], Tensor[(13, 4, 11), float32], Tensor[(72, 2), float64], Tensor[(7, 3), float64], Tensor[(572), bool], Tensor[(15, 5, 15), float32], Tensor[(15, 75), float32], Tensor[(3, 4, 7), uint16], Tensor[(8, 9, 15), int16], Tensor[(1080), int16]) */;
  %533 = @func_1580() /* ty=(Tensor[(5, 8, 9), uint16],) */;
  %534 = @func_1047() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %535 = %534.0;
  %536 = cast(%535, dtype="float32") /* ty=Tensor[(3, ?, 7), float32] */;
  %537 = cast(False /* ty=bool */, dtype="float32") /* ty=float32 */;
  %538 = cast(meta[relay.Constant][42] /* ty=Tensor[(84), bool] */, dtype="bool") /* ty=Tensor[(84), bool] */;
  %539 = reshape(%538, newshape=[84]) /* ty=Tensor[(84), bool] */;
  %540 = @func_2724(%539) /* ty=(Tensor[(3, ?, 7), int8], Tensor[(15, 5, 15), float32], Tensor[(2, 72), float64], Tensor[(11, 52), int8], Tensor[(84), bool], Tensor[(13, 4, 11), float32], Tensor[(7, 3, 15), float64], Tensor[(315), float64], Tensor[(3, 4, 7), float32], Tensor[(7, 3, 15), float64], Tensor[(3, ?, 7), int8]) */;
  %541 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %542 = reshape(%541, newshape=[]) /* ty=bool */;
  %543 = @func_3628(%542) /* ty=(Tensor[(3, ?, 7), int8], Tensor[(3, 4, 7), float32], bool, Tensor[(3, 4, 7), float32], Tensor[(3, ?, 7), int8], Tensor[(1080), float32], Tensor[(3, ?, 7), int8]) */;
  %544 = %532.2;
  %545 = %533.0;
  %546 = floor_divide(%536, %537) /* ty=Tensor[(3, ?, 7), float32] */;
  %547 = %540.9;
  %548 = %543.3;
  (%544, meta[relay.Constant][41] /* ty=Tensor[(540, 2), int16] */, %545, %546, %547, meta[relay.Constant][42] /* ty=Tensor[(84), bool] */, %548)
}

def @func_5679() -> (int16, Tensor[(7, 3, 15), float64], Tensor[(4, 15, 8), float32], Tensor[(480), float64]) {
  %549 = @func_5426() /* ty=(int16,) */;
  %550 = @func_5421() /* ty=(Tensor[(16, 32), bool], Tensor[(540, 2), int16], Tensor[(5, 8, 9), uint16], Tensor[(3, ?, 7), float32], Tensor[(7, 3, 15), float64], Tensor[(84), bool], Tensor[(3, 4, 7), float32]) */;
  %551 = cast(meta[relay.Constant][43] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %552 = reshape(%551, newshape=[4, 15, 8]) /* ty=Tensor[(4, 15, 8), float64] */;
  %553 = %549.0;
  %554 = %550.4;
  %555 = @func_4445(%552) /* ty=Tensor[(4, 15, 8), float32] */;
  (%553, %554, %555, meta[relay.Constant][43] /* ty=Tensor[(480), float64] */)
}

def @func_2828(%var_2825: Tensor[(4, 15, 7), bool], %var_2826: Tensor[(4, 15, 7), bool], %var_2827: Tensor[(4, 15, 7), bool]) -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(572), float32], Tensor[(91), uint8]) {
  %570 = fn (%var_2790: Tensor[(4, 15, 7), bool], %var_2791: Tensor[(4, 15, 7), bool], %var_2798: Tensor[(4, 15, 7), bool]) -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(572), float32], Tensor[(91), uint8]) {
    %556 = cast(%var_2791, dtype="bool") /* ty=Tensor[(4, 15, 7), bool] */;
    %557 = shape_of(%var_2790, dtype="int32") /* ty=Tensor[(3), int32] */;
    %558 = cast(%var_2790, dtype="bool") /* ty=Tensor[(4, 15, 7), bool] */;
    %559 = dyn.reshape(%556, %557, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %560 = cast(%var_2798, dtype="float32") /* ty=Tensor[(4, 15, 7), float32] */;
    %561 = shape_of(%var_2791, dtype="int32") /* ty=Tensor[(3), int32] */;
    %562 = cast(%var_2791, dtype="float32") /* ty=Tensor[(4, 15, 7), float32] */;
    %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %564 = cast(meta[relay.Constant][44] /* ty=Tensor[(91), uint8] */, dtype="uint8") /* ty=Tensor[(91), uint8] */;
    %565 = reshape(%564, newshape=[1, 7, 13]) /* ty=Tensor[(1, 7, 13), uint8] */;
    %566 = @func_2332(%565) /* ty=(Tensor[(12, 7, 13), uint8], Tensor[(572), float32], Tensor[(1, 7, 13), float64]) */;
    %567 = logical_or(%558, %559) /* ty=Tensor[(4, 15, 7), bool] */;
    %568 = power(%562, %563) /* ty=Tensor[(4, 15, 7), float32] */;
    %569 = %566.1;
    (%567, %568, %569, meta[relay.Constant][44] /* ty=Tensor[(91), uint8] */)
  };
  %570(%var_2825, %var_2826, %var_2827) /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(572), float32], Tensor[(91), uint8]) */
}

def @func_1952(%var_1951: Tensor[(1, 315), float64]) -> (Tensor[(3, ?, 7), int8], Tensor[(7, 4, 3), bool], Tensor[(1, 315), float64], Tensor[(84), float64], Tensor[(840), float64]) {
  %583 = fn (%var_1938: Tensor[(1, 315), float64]) -> (Tensor[(3, ?, 7), int8], Tensor[(7, 4, 3), bool], Tensor[(1, 315), float64], Tensor[(84), float64], Tensor[(840), float64]) {
    %571 = @func_1182() /* ty=(Tensor[(3, ?, 7), int8],) */;
    %572 = %571.0;
    %573 = cast(%572, dtype="float64") /* ty=Tensor[(3, ?, 7), float64] */;
    %574 = cast(%var_1938, dtype="float64") /* ty=Tensor[(1, 315), float64] */;
    %575 = cast(meta[relay.Constant][45] /* ty=Tensor[(84), float64] */, dtype="float64") /* ty=Tensor[(84), float64] */;
    %576 = cast(meta[relay.Constant][46] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
    %577 = reshape(%573, newshape=[7, 1, 3]) /* ty=Tensor[(7, 1, 3), float64] */;
    %578 = reshape(%574, newshape=[7, 15, 3]) /* ty=Tensor[(7, 15, 3), float64] */;
    %579 = reshape(%575, newshape=[7, 4, 3]) /* ty=Tensor[(7, 4, 3), float64] */;
    %580 = reshape(%576, newshape=[840]) /* ty=Tensor[(840), float64] */;
    %581 = @func_254(%577, %578, %579, %580) /* ty=(Tensor[(7, 15, 3), float64], Tensor[(7, 4, 3), bool], Tensor[(5, 12, 14), int64], Tensor[(840), float64]) */;
    %582 = %581.1;
    (%572, %582, %var_1938, meta[relay.Constant][45] /* ty=Tensor[(84), float64] */, meta[relay.Constant][46] /* ty=Tensor[(840), float64] */)
  };
  %583(%var_1951) /* ty=(Tensor[(3, ?, 7), int8], Tensor[(7, 4, 3), bool], Tensor[(1, 315), float64], Tensor[(84), float64], Tensor[(840), float64]) */
}

def @func_3220(%var_3218: Tensor[(84), bool]) -> (Tensor[(11, 52), int8], Tensor[(84), bool], Tensor[(3, ?, 7), float32], Tensor[(7, 4, 3), bool], Tensor[(8, 18), float64]) {
  @func_3217(%var_3218) /* ty=(Tensor[(11, 52), int8], Tensor[(84), bool], Tensor[(3, ?, 7), float32], Tensor[(7, 4, 3), bool], Tensor[(8, 18), float64]) */
}

def @func_4708(%var_4706: bool) -> (Tensor[(3, ?, 7), int8], Tensor[(10, 5, 7), bool], Tensor[(350), int8], Tensor[(5, 8, 9), float64], Tensor[(512, 1), bool], Tensor[(572), float64], Tensor[(512), float64]) {
  @func_4705(%var_4706) /* ty=(Tensor[(3, ?, 7), int8], Tensor[(10, 5, 7), bool], Tensor[(350), int8], Tensor[(5, 8, 9), float64], Tensor[(512, 1), bool], Tensor[(572), float64], Tensor[(512), float64]) */
}

def @func_1312() -> (Tensor[(3, 4, 7), float32],) {
  %585 = fn () -> (Tensor[(3, 4, 7), float32],) {
    %584 = @func_995() /* ty=Tensor[(3, 4, 7), float32] */;
    (%584,)
  };
  %585() /* ty=(Tensor[(3, 4, 7), float32],) */
}

def @func_4844() -> (Tensor[(3, ?, 7), int8],) {
  %588 = fn () -> (Tensor[(3, ?, 7), int8],) {
    %586 = @func_2457() /* ty=(Tensor[(3, ?, 7), int8],) */;
    %587 = %586.0;
    (%587,)
  };
  %588() /* ty=(Tensor[(3, ?, 7), int8],) */
}

def @func_1881(%var_1878: bool, %var_1879: Tensor[(512), bool], %var_1880: Tensor[(572), float64]) -> (Tensor[(13, 4, 11), int8], Tensor[(5, 8, 9), uint16], Tensor[(4, 16, 8), bool], Tensor[(512), bool], Tensor[(3, ?, 7), int8], Tensor[(13, 5, 5), uint8], Tensor[(325), float32], Tensor[(3, ?, 7), int8], Tensor[(84), float32], Tensor[(572), float64]) {
  @func_1876(%var_1878, %var_1879, %var_1880) /* ty=(Tensor[(13, 4, 11), int8], Tensor[(5, 8, 9), uint16], Tensor[(4, 16, 8), bool], Tensor[(512), bool], Tensor[(3, ?, 7), int8], Tensor[(13, 5, 5), uint8], Tensor[(325), float32], Tensor[(3, ?, 7), int8], Tensor[(84), float32], Tensor[(572), float64]) */
}

def @func_4369() -> (Tensor[(3, 4, 7), float32],) {
  %591 = fn () -> (Tensor[(3, 4, 7), float32],) {
    %589 = @func_4138() /* ty=(Tensor[(3, 4, 7), float32], Tensor[(3, ?, 7), float64]) */;
    %590 = %589.0;
    (%590,)
  };
  %591() /* ty=(Tensor[(3, 4, 7), float32],) */
}

def @func_6037(%var_6034: Tensor[(4, 36), float64], %var_6035: Tensor[(572), int8], %var_6036: Tensor[(84), bool]) -> (Tensor[(8, 5, 5), bool], Tensor[(13, 4, 11), float32], Tensor[(4, 36), float64], Tensor[(572), int8], Tensor[(21), float64], Tensor[(84), bool], Tensor[(8, 4, 3), int16]) {
  %611 = fn (%var_5984: Tensor[(4, 36), float64], %var_5985: Tensor[(572), int8], %var_5987: Tensor[(84), bool]) -> (Tensor[(8, 5, 5), bool], Tensor[(13, 4, 11), float32], Tensor[(4, 36), float64], Tensor[(572), int8], Tensor[(21), float64], Tensor[(84), bool], Tensor[(8, 4, 3), int16]) {
    %592 = cast(meta[relay.Constant][48] /* ty=Tensor[(8, 5, 5), uint16] */, dtype="bool") /* ty=Tensor[(8, 5, 5), bool] */;
    %593 = shape_of(meta[relay.Constant][47] /* ty=Tensor[(8, 5, 5), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %594 = cast(meta[relay.Constant][47] /* ty=Tensor[(8, 5, 5), uint16] */, dtype="bool") /* ty=Tensor[(8, 5, 5), bool] */;
    %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %596 = cast(%var_5984, dtype="float64") /* ty=Tensor[(4, 36), float64] */;
    %597 = cast(%var_5985, dtype="int8") /* ty=Tensor[(572), int8] */;
    %598 = cast(meta[relay.Constant][49] /* ty=Tensor[(21), float64] */, dtype="float64") /* ty=Tensor[(21), float64] */;
    %599 = cast(%var_5987, dtype="bool") /* ty=Tensor[(84), bool] */;
    %600 = reshape(%596, newshape=[8, 3, 6]) /* ty=Tensor[(8, 3, 6), float64] */;
    %601 = reshape(%597, newshape=[572]) /* ty=Tensor[(572), int8] */;
    %602 = reshape(%598, newshape=[21, 1]) /* ty=Tensor[(21, 1), float64] */;
    %603 = reshape(%599, newshape=[7, 4, 3]) /* ty=Tensor[(7, 4, 3), bool] */;
    %604 = @func_834(%600, %601, %602, %603) /* ty=(Tensor[(8, 3, 6), float64], Tensor[(15, 5, 15), float32], Tensor[(1125), float32], Tensor[(572), int8], Tensor[(21, 1), float64], Tensor[(315), float64], Tensor[(84), float64], Tensor[(840), float64], Tensor[(13, 4, 11), float32], Tensor[(7, 4, 3), bool], Tensor[(13, 4, 11), int8], Tensor[(15, 5, 15), float32]) */;
    %605 = cast(%var_5987, dtype="bool") /* ty=Tensor[(84), bool] */;
    %606 = reshape(%605, newshape=[21, 4]) /* ty=Tensor[(21, 4), bool] */;
    %607 = @func_4913(%606) /* ty=(Tensor[(3, 5, 7), bool], Tensor[(11, 52), int8], Tensor[(21, 4), bool], Tensor[(8, 4, 3), int16]) */;
    %608 = less(%594, %595) /* ty=Tensor[(8, 5, 5), bool] */;
    %609 = %604.8;
    %610 = %607.3;
    (%608, %609, %var_5984, %var_5985, meta[relay.Constant][49] /* ty=Tensor[(21), float64] */, %var_5987, %610)
  };
  %611(%var_6034, %var_6035, %var_6036) /* ty=(Tensor[(8, 5, 5), bool], Tensor[(13, 4, 11), float32], Tensor[(4, 36), float64], Tensor[(572), int8], Tensor[(21), float64], Tensor[(84), bool], Tensor[(8, 4, 3), int16]) */
}

def @func_4512() -> (Tensor[(8, 9, 15), int16], int16, Tensor[(1080), int16], Tensor[(3, ?, 7), uint64]) {
  @func_4510() /* ty=(Tensor[(8, 9, 15), int16], int16, Tensor[(1080), int16], Tensor[(3, ?, 7), uint64]) */
}

def @func_3395() -> Tensor[(6, 4, 1), int32] {
  %612 = cast(8 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %613 = cast(meta[relay.Constant][50] /* ty=Tensor[(6, 4, 1), int32] */, dtype="int32") /* ty=Tensor[(6, 4, 1), int32] */;
  add(%612, %613) /* ty=Tensor[(6, 4, 1), int32] */
}

def @func_254(%var_220: Tensor[(7, 1, 3), float64], %var_221: Tensor[(7, 15, 3), float64], %var_226: Tensor[(7, 4, 3), float64], %var_249: Tensor[(840), float64]) -> (Tensor[(7, 15, 3), float64], Tensor[(7, 4, 3), bool], Tensor[(5, 12, 14), int64], Tensor[(840), float64]) {
  %614 = cast(%var_220, dtype="float64") /* ty=Tensor[(7, 1, 3), float64] */;
  %615 = cast(%var_221, dtype="float64") /* ty=Tensor[(7, 15, 3), float64] */;
  %616 = cast(%var_220, dtype="bool") /* ty=Tensor[(7, 1, 3), bool] */;
  %617 = cast(%var_226, dtype="bool") /* ty=Tensor[(7, 4, 3), bool] */;
  %618 = cast(%var_249, dtype="float64") /* ty=Tensor[(840), float64] */;
  %619 = reshape(%618, newshape=[5, 12, 14]) /* ty=Tensor[(5, 12, 14), float64] */;
  %620 = @func_115(%619) /* ty=(Tensor[(5, 12, 14), float64], Tensor[(5, 12, 14), int64], Tensor[(5, 12, 14), int8]) */;
  %621 = maximum(%614, %615) /* ty=Tensor[(7, 15, 3), float64] */;
  %622 = logical_or(%616, %617) /* ty=Tensor[(7, 4, 3), bool] */;
  %623 = %620.1;
  (%621, %622, %623, %var_249)
}

def @func_2617(%var_2553: bool, %var_2615: Tensor[(1080), int16]) -> (Tensor[(572), float32], Tensor[(3, 4, 7), float32], Tensor[(16, 32), bool], Tensor[(13, 4, 11), float32], Tensor[(72, 2), float64], Tensor[(7, 3), float64], Tensor[(572), bool], Tensor[(15, 5, 15), float32], Tensor[(15, 75), float32], Tensor[(3, 4, 7), uint16], Tensor[(8, 9, 15), int16], Tensor[(1080), int16]) {
  %624 = @func_2159() /* ty=(Tensor[(572), float32],) */;
  %625 = cast(meta[relay.Constant][52] /* ty=Tensor[(72, 2), float64] */, dtype="float64") /* ty=Tensor[(72, 2), float64] */;
  %626 = %624.0;
  %627 = cast(%626, dtype="int8") /* ty=Tensor[(572), int8] */;
  %628 = cast(meta[relay.Constant][53] /* ty=Tensor[(7, 3), float64] */, dtype="float64") /* ty=Tensor[(7, 3), float64] */;
  %629 = @func_995() /* ty=Tensor[(3, 4, 7), float32] */;
  %630 = cast(%629, dtype="bool") /* ty=Tensor[(3, 4, 7), bool] */;
  %631 = reshape(%625, newshape=[8, 3, 6]) /* ty=Tensor[(8, 3, 6), float64] */;
  %632 = reshape(%627, newshape=[572]) /* ty=Tensor[(572), int8] */;
  %633 = reshape(%628, newshape=[21, 1]) /* ty=Tensor[(21, 1), float64] */;
  %634 = reshape(%630, newshape=[7, 4, 3]) /* ty=Tensor[(7, 4, 3), bool] */;
  %635 = @func_834(%631, %632, %633, %634) /* ty=(Tensor[(8, 3, 6), float64], Tensor[(15, 5, 15), float32], Tensor[(1125), float32], Tensor[(572), int8], Tensor[(21, 1), float64], Tensor[(315), float64], Tensor[(84), float64], Tensor[(840), float64], Tensor[(13, 4, 11), float32], Tensor[(7, 4, 3), bool], Tensor[(13, 4, 11), int8], Tensor[(15, 5, 15), float32]) */;
  %636 = cast(%var_2553, dtype="bool") /* ty=bool */;
  %637 = cast(meta[relay.Constant][51] /* ty=Tensor[(16, 32), bool] */, dtype="bool") /* ty=Tensor[(16, 32), bool] */;
  %638 = cast(%626, dtype="float64") /* ty=Tensor[(572), float64] */;
  %639 = reshape(%636, newshape=[]) /* ty=bool */;
  %640 = reshape(%637, newshape=[512]) /* ty=Tensor[(512), bool] */;
  %641 = reshape(%638, newshape=[572]) /* ty=Tensor[(572), float64] */;
  %642 = @func_1876(%639, %640, %641) /* ty=(Tensor[(13, 4, 11), int8], Tensor[(5, 8, 9), uint16], Tensor[(4, 16, 8), bool], Tensor[(512), bool], Tensor[(3, ?, 7), int8], Tensor[(13, 5, 5), uint8], Tensor[(325), float32], Tensor[(3, ?, 7), int8], Tensor[(84), float32], Tensor[(572), float64]) */;
  %643 = %642.9;
  %644 = cast(%643, dtype="float64") /* ty=Tensor[(572), float64] */;
  %645 = cast(%var_2553, dtype="float64") /* ty=float64 */;
  %646 = divide(%644, %645) /* ty=Tensor[(572), float64] */;
  %647 = cast(%646, dtype="bool") /* ty=Tensor[(572), bool] */;
  %648 = shape_of(%643, dtype="int32") /* ty=Tensor[(1), int32] */;
  %649 = cast(%643, dtype="bool") /* ty=Tensor[(572), bool] */;
  %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?), bool] */;
  %651 = cast(meta[relay.Constant][54] /* ty=Tensor[(15, 75), float32] */, dtype="float32") /* ty=Tensor[(15, 75), float32] */;
  %652 = reshape(%651, newshape=[15, 5, 15]) /* ty=Tensor[(15, 5, 15), float32] */;
  %653 = cast(%629, dtype="float32") /* ty=Tensor[(3, 4, 7), float32] */;
  %654 = reshape(%653, newshape=[3, 4, 7]) /* ty=Tensor[(3, 4, 7), float32] */;
  %655 = @func_1344(%654) /* ty=(Tensor[(3, 4, 7), uint16], Tensor[(3, 4, 7), float64], Tensor[(3, ?, 7), int8]) */;
  %656 = cast(%var_2553, dtype="int16") /* ty=int16 */;
  %657 = cast(%var_2615, dtype="int16") /* ty=Tensor[(1080), int16] */;
  %658 = reshape(%656, newshape=[]) /* ty=int16 */;
  %659 = reshape(%657, newshape=[8, 9, 15]) /* ty=Tensor[(8, 9, 15), int16] */;
  %660 = %635.8;
  %661 = greater_equal(%649, %650) /* ty=Tensor[(572), bool] */;
  %662 = @func_312(%652) /* ty=Tensor[(15, 5, 15), float32] */;
  %663 = %655.0;
  %664 = @func_1132(%658, %659) /* ty=Tensor[(8, 9, 15), int16] */;
  (%626, %629, meta[relay.Constant][51] /* ty=Tensor[(16, 32), bool] */, %660, meta[relay.Constant][52] /* ty=Tensor[(72, 2), float64] */, meta[relay.Constant][53] /* ty=Tensor[(7, 3), float64] */, %661, %662, meta[relay.Constant][54] /* ty=Tensor[(15, 75), float32] */, %663, %664, %var_2615)
}

def @func_1246(%var_1244: bool, %var_1245: Tensor[(4, 16, 8), bool]) -> (Tensor[(4, 16, 8), bool], Tensor[(3, ?, 7), int8]) {
  %670 = fn (%var_1226: bool, %var_1227: Tensor[(4, 16, 8), bool]) -> (Tensor[(4, 16, 8), bool], Tensor[(3, ?, 7), int8]) {
    %665 = cast(%var_1226, dtype="bool") /* ty=bool */;
    %666 = cast(%var_1227, dtype="bool") /* ty=Tensor[(4, 16, 8), bool] */;
    %667 = @func_1182() /* ty=(Tensor[(3, ?, 7), int8],) */;
    %668 = logical_and(%665, %666) /* ty=Tensor[(4, 16, 8), bool] */;
    %669 = %667.0;
    (%668, %669)
  };
  %670(%var_1244, %var_1245) /* ty=(Tensor[(4, 16, 8), bool], Tensor[(3, ?, 7), int8]) */
}

def @func_3397() -> Tensor[(6, 4, 1), int32] {
  @func_3395() /* ty=Tensor[(6, 4, 1), int32] */
}

def @func_1347(%var_1345: Tensor[(3, 4, 7), float32]) -> (Tensor[(3, 4, 7), uint16], Tensor[(3, 4, 7), float64], Tensor[(3, ?, 7), int8]) {
  @func_1344(%var_1345) /* ty=(Tensor[(3, 4, 7), uint16], Tensor[(3, 4, 7), float64], Tensor[(3, ?, 7), int8]) */
}

def @func_5919() -> (Tensor[(5, 8, 9), uint16],) {
  %672 = fn () -> (Tensor[(5, 8, 9), uint16],) {
    %671 = @func_3919() /* ty=Tensor[(5, 8, 9), uint16] */;
    (%671,)
  };
  %672() /* ty=(Tensor[(5, 8, 9), uint16],) */
}

def @func_2480(%var_2478: Tensor[(3, 15, 7), int8]) -> Tensor[(3, 15, 7), uint16] {
  @func_2477(%var_2478) /* ty=Tensor[(3, 15, 7), uint16] */
}

def @func_6069() -> Tensor[(5, 12, 14), float64] {
  %673 = @func_4415() /* ty=(Tensor[(5, 12, 14), float64],) */;
  %673.0
}

def @func_1049() -> (Tensor[(3, ?, 7), int8],) {
  @func_1047() /* ty=(Tensor[(3, ?, 7), int8],) */
}

def @func_6329() -> (Tensor[(5, 12, 14), float32],) {
  %678 = fn () -> (Tensor[(5, 12, 14), float32],) {
    %674 = @func_4415() /* ty=(Tensor[(5, 12, 14), float64],) */;
    %675 = %674.0;
    %676 = cast(%675, dtype="float32") /* ty=Tensor[(5, 12, 14), float32] */;
    %677 = acos(%676) /* ty=Tensor[(5, 12, 14), float32] */;
    (%677,)
  };
  %678() /* ty=(Tensor[(5, 12, 14), float32],) */
}

def @func_5892(%var_5857: Tensor[(270), uint32]) -> (Tensor[(3, 9, 7), int32], Tensor[(3, ?, 7), int8], Tensor[(270), uint32]) {
  %679 = @func_5303() /* ty=(Tensor[(6, 4, 1), int32], Tensor[(3, 9, 7), int32]) */;
  %680 = cast(%var_5857, dtype="uint32") /* ty=Tensor[(270), uint32] */;
  %681 = reshape(%680, newshape=[6, 15, 3]) /* ty=Tensor[(6, 15, 3), uint32] */;
  %682 = @func_5018(%681) /* ty=(Tensor[(6, 15, 3), bool], Tensor[(3, ?, 7), int8]) */;
  %683 = %679.1;
  %684 = %682.1;
  (%683, %684, %var_5857)
}

def @main() -> (Tensor[(6, 6, 14), float64],) {
  %685 = cast(meta[relay.Constant][55] /* ty=Tensor[(6, 6, 14), float64] */, dtype="float64") /* ty=Tensor[(6, 6, 14), float64] */;
  %686 = exp(%685) /* ty=Tensor[(6, 6, 14), float64] */;
  (%686,)
}

def @func_3413() -> Tensor[(3, 7, 7), float32] {
  %688 = fn () -> Tensor[(3, 7, 7), float32] {
    %687 = @func_3260() /* ty=(Tensor[(3, 7, 7), float32], Tensor[(3, 4, 7), float32]) */;
    %687.0
  };
  %688() /* ty=Tensor[(3, 7, 7), float32] */
}

def @func_2999() -> (Tensor[(3, ?, 7), bool], Tensor[(3, ?, 7), bool]) {
  %689 = @func_2457() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %690 = %689.0;
  %691 = cast(%690, dtype="float64") /* ty=Tensor[(3, ?, 7), float64] */;
  %692 = atanh(%691) /* ty=Tensor[(3, ?, 7), float64] */;
  %693 = cast(%690, dtype="uint16") /* ty=Tensor[(3, ?, 7), uint16] */;
  %694 = shape_of(%692, dtype="int32") /* ty=Tensor[(3), int32] */;
  %695 = cast(%692, dtype="uint16") /* ty=Tensor[(3, ?, 7), uint16] */;
  %696 = dyn.reshape(%693, %694, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %697 = bitwise_and(%695, %696) /* ty=Tensor[(3, ?, 7), uint16] */;
  %698 = cast(%697, dtype="bool") /* ty=Tensor[(3, ?, 7), bool] */;
  %699 = shape_of(%692, dtype="int32") /* ty=Tensor[(3), int32] */;
  %700 = cast(%692, dtype="bool") /* ty=Tensor[(3, ?, 7), bool] */;
  %701 = dyn.reshape(%698, %699, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %702 = cast(%692, dtype="bool") /* ty=Tensor[(3, ?, 7), bool] */;
  %703 = shape_of(%690, dtype="int32") /* ty=Tensor[(3), int32] */;
  %704 = cast(%690, dtype="bool") /* ty=Tensor[(3, ?, 7), bool] */;
  %705 = dyn.reshape(%702, %703, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %706 = greater_equal(%700, %701) /* ty=Tensor[(3, ?, 7), bool] */;
  %707 = logical_and(%704, %705) /* ty=Tensor[(3, ?, 7), bool] */;
  (%706, %707)
}

def @func_995() -> Tensor[(3, 4, 7), float32] {
  %708 = @func_925() /* ty=Tensor[(3, ?, 7), int8] */;
  %709 = cast(%708, dtype="float32") /* ty=Tensor[(3, ?, 7), float32] */;
  %710 = cast(meta[relay.Constant][56] /* ty=Tensor[(3, 4, 7), int8] */, dtype="float32") /* ty=Tensor[(3, 4, 7), float32] */;
  mod(%709, %710) /* ty=Tensor[(3, 4, 7), float32] */
}

def @func_4401(%var_4396: Tensor[(84), bool]) -> (Tensor[(5, 8, 9), uint16], Tensor[(5, 12, 14), float64], Tensor[(12, 70), float64], Tensor[(8, 18), float64], Tensor[(84), bool]) {
  %711 = @func_1580() /* ty=(Tensor[(5, 8, 9), uint16],) */;
  %712 = cast(meta[relay.Constant][57] /* ty=Tensor[(12, 70), float64] */, dtype="float64") /* ty=Tensor[(12, 70), float64] */;
  %713 = reshape(%712, newshape=[5, 12, 14]) /* ty=Tensor[(5, 12, 14), float64] */;
  %714 = @func_115(%713) /* ty=(Tensor[(5, 12, 14), float64], Tensor[(5, 12, 14), int64], Tensor[(5, 12, 14), int8]) */;
  %715 = cast(%var_4396, dtype="bool") /* ty=Tensor[(84), bool] */;
  %716 = reshape(%715, newshape=[84]) /* ty=Tensor[(84), bool] */;
  %717 = @func_3217(%716) /* ty=(Tensor[(11, 52), int8], Tensor[(84), bool], Tensor[(3, ?, 7), float32], Tensor[(7, 4, 3), bool], Tensor[(8, 18), float64]) */;
  %718 = %711.0;
  %719 = %714.0;
  %720 = %717.4;
  (%718, %719, meta[relay.Constant][57] /* ty=Tensor[(12, 70), float64] */, %720, %var_4396)
}

def @func_4554(%var_4548: Tensor[(168), int8]) -> (Tensor[(3, ?, 7), int8], Tensor[(3, 8, 7), uint32], Tensor[(168), int8]) {
  %721 = @func_2409() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %722 = cast(%var_4548, dtype="int8") /* ty=Tensor[(168), int8] */;
  %723 = cast(%var_4548, dtype="float32") /* ty=Tensor[(168), float32] */;
  %724 = reshape(%722, newshape=[3, 8, 7]) /* ty=Tensor[(3, 8, 7), int8] */;
  %725 = reshape(%723, newshape=[3, 8, 7]) /* ty=Tensor[(3, 8, 7), float32] */;
  %726 = %721.0;
  %727 = @func_3843(%724, %725) /* ty=Tensor[(3, 8, 7), uint32] */;
  (%726, %727, %var_4548)
}

def @func_1344(%var_1327: Tensor[(3, 4, 7), float32]) -> (Tensor[(3, 4, 7), uint16], Tensor[(3, 4, 7), float64], Tensor[(3, ?, 7), int8]) {
  %728 = @func_995() /* ty=Tensor[(3, 4, 7), float32] */;
  %729 = cast(%var_1327, dtype="uint16") /* ty=Tensor[(3, 4, 7), uint16] */;
  %730 = shape_of(%728, dtype="int32") /* ty=Tensor[(3), int32] */;
  %731 = cast(%728, dtype="uint16") /* ty=Tensor[(3, 4, 7), uint16] */;
  %732 = dyn.reshape(%729, %730, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %733 = cast(%var_1327, dtype="float64") /* ty=Tensor[(3, 4, 7), float64] */;
  %734 = @func_1182() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %735 = left_shift(%731, %732) /* ty=Tensor[(3, 4, 7), uint16] */;
  %736 = log2(%733) /* ty=Tensor[(3, 4, 7), float64] */;
  %737 = %734.0;
  (%735, %736, %737)
}

def @func_6388(%var_6387: Tensor[(6, 8, 14), uint8]) -> (Tensor[(6, 8, 14), uint8], Tensor[(5, 8, 9), float64]) {
  %743 = fn (%var_6379: Tensor[(6, 8, 14), uint8]) -> (Tensor[(6, 8, 14), uint8], Tensor[(5, 8, 9), float64]) {
    %738 = cast(meta[relay.Constant][58] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %739 = cast(%var_6379, dtype="uint8") /* ty=Tensor[(6, 8, 14), uint8] */;
    %740 = @func_4770() /* ty=(Tensor[(3, ?, 7), int8], Tensor[(5, 8, 9), float64]) */;
    %741 = bitwise_xor(%738, %739) /* ty=Tensor[(6, 8, 14), uint8] */;
    %742 = %740.1;
    (%741, %742)
  };
  %743(%var_6387) /* ty=(Tensor[(6, 8, 14), uint8], Tensor[(5, 8, 9), float64]) */
}

def @func_6158(%var_6151: Tensor[(14, 13, 7), float32]) -> (Tensor[(14, 13, 7), float64],) {
  %744 = cast(%var_6151, dtype="float32") /* ty=Tensor[(14, 13, 7), float32] */;
  %745 = log2(%744) /* ty=Tensor[(14, 13, 7), float32] */;
  %746 = cast(%745, dtype="float64") /* ty=Tensor[(14, 13, 7), float64] */;
  %747 = asinh(%746) /* ty=Tensor[(14, 13, 7), float64] */;
  (%747,)
}

def @func_4949(%var_4948: Tensor[(5, 12, 14), float64]) -> (Tensor[(5, 12, 14), bool],) {
  %755 = fn (%var_4935: Tensor[(5, 12, 14), float64]) -> (Tensor[(5, 12, 14), bool],) {
    %748 = @func_3882() /* ty=(Tensor[(5, 12, 14), float64],) */;
    %749 = %748.0;
    %750 = cast(%var_4935, dtype="bool") /* ty=Tensor[(5, 12, 14), bool] */;
    %751 = shape_of(%749, dtype="int32") /* ty=Tensor[(3), int32] */;
    %752 = cast(%749, dtype="bool") /* ty=Tensor[(5, 12, 14), bool] */;
    %753 = dyn.reshape(%750, %751, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %754 = greater_equal(%752, %753) /* ty=Tensor[(5, 12, 14), bool] */;
    (%754,)
  };
  %755(%var_4948) /* ty=(Tensor[(5, 12, 14), bool],) */
}

def @func_896() -> (Tensor[(3, ?, 7), int8],) {
  %763 = fn () -> (Tensor[(3, ?, 7), int8],) {
    %756 = cast(meta[relay.Constant][59] /* ty=Tensor[(3, 1, 7), float32] */, dtype="float32") /* ty=Tensor[(3, 1, 7), float32] */;
    %757 = sin(%756) /* ty=Tensor[(3, 1, 7), float32] */;
    %758 = cast(%757, dtype="int8") /* ty=Tensor[(3, 1, 7), int8] */;
    %759 = shape_of(meta[relay.Constant][59] /* ty=Tensor[(3, 1, 7), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %760 = cast(meta[relay.Constant][59] /* ty=Tensor[(3, 1, 7), float32] */, dtype="int8") /* ty=Tensor[(3, 1, 7), int8] */;
    %761 = dyn.reshape(%758, %759, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %762 = left_shift(%760, %761) /* ty=Tensor[(3, ?, 7), int8] */;
    (%762,)
  };
  %763() /* ty=(Tensor[(3, ?, 7), int8],) */
}

def @func_6280(%var_6279: Tensor[(16, 7, 8), float32]) -> Tensor[(16, 7, 8), float32] {
  %765 = fn (%var_6268: Tensor[(16, 7, 8), float32]) -> Tensor[(16, 7, 8), float32] {
    %764 = cast(%var_6268, dtype="float32") /* ty=Tensor[(16, 7, 8), float32] */;
    sin(%764) /* ty=Tensor[(16, 7, 8), float32] */
  };
  %765(%var_6279) /* ty=Tensor[(16, 7, 8), float32] */
}

def @func_840(%var_836: Tensor[(8, 3, 6), float64], %var_837: Tensor[(572), int8], %var_838: Tensor[(21, 1), float64], %var_839: Tensor[(7, 4, 3), bool]) -> (Tensor[(8, 3, 6), float64], Tensor[(15, 5, 15), float32], Tensor[(1125), float32], Tensor[(572), int8], Tensor[(21, 1), float64], Tensor[(315), float64], Tensor[(84), float64], Tensor[(840), float64], Tensor[(13, 4, 11), float32], Tensor[(7, 4, 3), bool], Tensor[(13, 4, 11), int8], Tensor[(15, 5, 15), float32]) {
  @func_834(%var_836, %var_837, %var_838, %var_839) /* ty=(Tensor[(8, 3, 6), float64], Tensor[(15, 5, 15), float32], Tensor[(1125), float32], Tensor[(572), int8], Tensor[(21, 1), float64], Tensor[(315), float64], Tensor[(84), float64], Tensor[(840), float64], Tensor[(13, 4, 11), float32], Tensor[(7, 4, 3), bool], Tensor[(13, 4, 11), int8], Tensor[(15, 5, 15), float32]) */
}

def @func_1582() -> (Tensor[(5, 8, 9), uint16],) {
  @func_1580() /* ty=(Tensor[(5, 8, 9), uint16],) */
}

def @func_4415() -> (Tensor[(5, 12, 14), float64],) {
  %766 = @func_3782() /* ty=(Tensor[(3, ?, 7), int8], Tensor[(5, 12, 14), float64], Tensor[(840), float64], Tensor[(7, 2, 16), float32]) */;
  %767 = %766.1;
  (%767,)
}

def @func_3628(%var_3593: bool) -> (Tensor[(3, ?, 7), int8], Tensor[(3, 4, 7), float32], bool, Tensor[(3, 4, 7), float32], Tensor[(3, ?, 7), int8], Tensor[(1080), float32], Tensor[(3, ?, 7), int8]) {
  %768 = @func_1182() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %769 = cast(%var_3593, dtype="bool") /* ty=bool */;
  %770 = cast(meta[relay.Constant][60] /* ty=Tensor[(1080), int16] */, dtype="int16") /* ty=Tensor[(1080), int16] */;
  %771 = reshape(%769, newshape=[]) /* ty=bool */;
  %772 = reshape(%770, newshape=[1080]) /* ty=Tensor[(1080), int16] */;
  %773 = @func_2617(%771, %772) /* ty=(Tensor[(572), float32], Tensor[(3, 4, 7), float32], Tensor[(16, 32), bool], Tensor[(13, 4, 11), float32], Tensor[(72, 2), float64], Tensor[(7, 3), float64], Tensor[(572), bool], Tensor[(15, 5, 15), float32], Tensor[(15, 75), float32], Tensor[(3, 4, 7), uint16], Tensor[(8, 9, 15), int16], Tensor[(1080), int16]) */;
  %774 = @func_1311() /* ty=(Tensor[(3, 4, 7), float32],) */;
  %775 = @func_1182() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %776 = cast(meta[relay.Constant][60] /* ty=Tensor[(1080), int16] */, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %777 = erf(%776) /* ty=Tensor[(1080), float64] */;
  %778 = cast(%777, dtype="float32") /* ty=Tensor[(1080), float32] */;
  %779 = %768.0;
  %780 = %773.1;
  %781 = %774.0;
  %782 = %775.0;
  %783 = sqrt(%778) /* ty=Tensor[(1080), float32] */;
  %784 = @func_925() /* ty=Tensor[(3, ?, 7), int8] */;
  (%779, %780, %var_3593, %781, %782, %783, %784)
}

def @func_2335(%var_2333: Tensor[(1, 7, 13), uint8]) -> (Tensor[(12, 7, 13), uint8], Tensor[(572), float32], Tensor[(1, 7, 13), float64]) {
  @func_2332(%var_2333) /* ty=(Tensor[(12, 7, 13), uint8], Tensor[(572), float32], Tensor[(1, 7, 13), float64]) */
}

def @func_3262() -> (Tensor[(3, 7, 7), float32], Tensor[(3, 4, 7), float32]) {
  @func_3260() /* ty=(Tensor[(3, 7, 7), float32], Tensor[(3, 4, 7), float32]) */
}

def @func_4004(%var_3999: int16, %var_4000: Tensor[(12, 16, 8), int16], %var_4001: Tensor[(315), float64], %var_4002: Tensor[(84), float64], %var_4003: Tensor[(60, 14), float64]) -> (Tensor[(840), float64], Tensor[(21), float64], Tensor[(315), float64], Tensor[(84), float64], Tensor[(60, 14), float64], Tensor[(12, 16, 8), float64]) {
  %800 = fn (%var_3976: int16, %var_3977: Tensor[(12, 16, 8), int16], %var_3984: Tensor[(315), float64], %var_3985: Tensor[(84), float64], %var_3986: Tensor[(60, 14), float64]) -> (Tensor[(840), float64], Tensor[(21), float64], Tensor[(315), float64], Tensor[(84), float64], Tensor[(60, 14), float64], Tensor[(12, 16, 8), float64]) {
    %785 = cast(meta[relay.Constant][61] /* ty=Tensor[(21), float64] */, dtype="float64") /* ty=Tensor[(21), float64] */;
    %786 = cast(%var_3984, dtype="float64") /* ty=Tensor[(315), float64] */;
    %787 = cast(%var_3985, dtype="float64") /* ty=Tensor[(84), float64] */;
    %788 = cast(%var_3986, dtype="float64") /* ty=Tensor[(60, 14), float64] */;
    %789 = reshape(%785, newshape=[7, 1, 3]) /* ty=Tensor[(7, 1, 3), float64] */;
    %790 = reshape(%786, newshape=[7, 15, 3]) /* ty=Tensor[(7, 15, 3), float64] */;
    %791 = reshape(%787, newshape=[7, 4, 3]) /* ty=Tensor[(7, 4, 3), float64] */;
    %792 = reshape(%788, newshape=[840]) /* ty=Tensor[(840), float64] */;
    %793 = @func_254(%789, %790, %791, %792) /* ty=(Tensor[(7, 15, 3), float64], Tensor[(7, 4, 3), bool], Tensor[(5, 12, 14), int64], Tensor[(840), float64]) */;
    %794 = cast(%var_3976, dtype="int16") /* ty=int16 */;
    %795 = cast(%var_3977, dtype="int16") /* ty=Tensor[(12, 16, 8), int16] */;
    %796 = multiply(%794, %795) /* ty=Tensor[(12, 16, 8), int16] */;
    %797 = cast(%796, dtype="float64") /* ty=Tensor[(12, 16, 8), float64] */;
    %798 = %793.3;
    %799 = acos(%797) /* ty=Tensor[(12, 16, 8), float64] */;
    (%798, meta[relay.Constant][61] /* ty=Tensor[(21), float64] */, %var_3984, %var_3985, %var_3986, %799)
  };
  %800(%var_3999, %var_4000, %var_4001, %var_4002, %var_4003) /* ty=(Tensor[(840), float64], Tensor[(21), float64], Tensor[(315), float64], Tensor[(84), float64], Tensor[(60, 14), float64], Tensor[(12, 16, 8), float64]) */
}

def @func_1435() -> (Tensor[(3, ?, 7), int8], Tensor[(13, 4, 11), int8], Tensor[(572), int8]) {
  %807 = fn () -> (Tensor[(3, ?, 7), int8], Tensor[(13, 4, 11), int8], Tensor[(572), int8]) {
    %801 = @func_895() /* ty=(Tensor[(3, ?, 7), int8],) */;
    %802 = cast(meta[relay.Constant][62] /* ty=Tensor[(572), int8] */, dtype="int8") /* ty=Tensor[(572), int8] */;
    %803 = reshape(%802, newshape=[13, 4, 11]) /* ty=Tensor[(13, 4, 11), int8] */;
    %804 = @func_379(%803) /* ty=(Tensor[(13, 4, 11), int8],) */;
    %805 = %801.0;
    %806 = %804.0;
    (%805, %806, meta[relay.Constant][62] /* ty=Tensor[(572), int8] */)
  };
  %807() /* ty=(Tensor[(3, ?, 7), int8], Tensor[(13, 4, 11), int8], Tensor[(572), int8]) */
}

def @func_5778() -> (Tensor[(5, 12, 14), float64], Tensor[(5, 8, 9), uint16], Tensor[(3, ?, 7), int8], Tensor[(3, 4, 7), bool]) {
  %822 = fn () -> (Tensor[(5, 12, 14), float64], Tensor[(5, 8, 9), uint16], Tensor[(3, ?, 7), int8], Tensor[(3, 4, 7), bool]) {
    %808 = @func_3882() /* ty=(Tensor[(5, 12, 14), float64],) */;
    %809 = @func_1580() /* ty=(Tensor[(5, 8, 9), uint16],) */;
    %810 = @func_1311() /* ty=(Tensor[(3, 4, 7), float32],) */;
    %811 = %810.0;
    %812 = cast(%811, dtype="float32") /* ty=Tensor[(3, 4, 7), float32] */;
    %813 = acosh(%812) /* ty=Tensor[(3, 4, 7), float32] */;
    %814 = cast(%811, dtype="bool") /* ty=Tensor[(3, 4, 7), bool] */;
    %815 = shape_of(%813, dtype="int32") /* ty=Tensor[(3), int32] */;
    %816 = cast(%813, dtype="bool") /* ty=Tensor[(3, 4, 7), bool] */;
    %817 = dyn.reshape(%814, %815, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %818 = %808.0;
    %819 = %809.0;
    %820 = @func_2371() /* ty=Tensor[(3, ?, 7), int8] */;
    %821 = logical_or(%816, %817) /* ty=Tensor[(3, 4, 7), bool] */;
    (%818, %819, %820, %821)
  };
  %822() /* ty=(Tensor[(5, 12, 14), float64], Tensor[(5, 8, 9), uint16], Tensor[(3, ?, 7), int8], Tensor[(3, 4, 7), bool]) */
}

def @func_6071() -> Tensor[(5, 12, 14), float64] {
  @func_6069() /* ty=Tensor[(5, 12, 14), float64] */
}

def @func_6317() -> (Tensor[(3, ?, 7), int8], Tensor[(572), float32], Tensor[(8, 9, 15), int16], bool, Tensor[(270, 4), int16]) {
  @func_6315() /* ty=(Tensor[(3, ?, 7), int8], Tensor[(572), float32], Tensor[(8, 9, 15), int16], bool, Tensor[(270, 4), int16]) */
}

def @func_2877() -> (Tensor[(3, 4, 7), float32], Tensor[(7, 3, 15), float64], Tensor[(315), float64]) {
  %823 = @func_1748() /* ty=(Tensor[(3, 4, 7), float32], Tensor[(1125), float32], Tensor[(144), float64], Tensor[(143, 4), int8], Tensor[(1, 21), float64]) */;
  %824 = cast(meta[relay.Constant][63] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
  %825 = cast(meta[relay.Constant][63] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
  %826 = reshape(%824, newshape=[7, 3, 15]) /* ty=Tensor[(7, 3, 15), float64] */;
  %827 = reshape(%825, newshape=[7, 3, 15]) /* ty=Tensor[(7, 3, 15), float64] */;
  %828 = @func_1561(%826, %827) /* ty=(Tensor[(7, 3, 15), float64],) */;
  %829 = %823.0;
  %830 = %828.0;
  (%829, %830, meta[relay.Constant][63] /* ty=Tensor[(315), float64] */)
}

def @func_2234() -> (Tensor[(572), float32], Tensor[(5, 8, 9), uint16], Tensor[(3, ?, 7), int8], Tensor[(3, ?, 7), float32]) {
  %831 = @func_2159() /* ty=(Tensor[(572), float32],) */;
  %832 = @func_1580() /* ty=(Tensor[(5, 8, 9), uint16],) */;
  %833 = @func_1519() /* ty=(Tensor[(3, ?, 7), int8],) */;
  %834 = @func_925() /* ty=Tensor[(3, ?, 7), int8] */;
  %835 = cast(%834, dtype="float32") /* ty=Tensor[(3, ?, 7), float32] */;
  %836 = exp(%835) /* ty=Tensor[(3, ?, 7), float32] */;
  %837 = cast(%836, dtype="float32") /* ty=Tensor[(3, ?, 7), float32] */;
  %838 = %831.0;
  %839 = %832.0;
  %840 = %833.0;
  %841 = sigmoid(%837) /* ty=Tensor[(3, ?, 7), float32] */;
  (%838, %839, %840, %841)
}

def @func_4771() -> (Tensor[(3, ?, 7), int8], Tensor[(5, 8, 9), float64]) {
  %848 = fn () -> (Tensor[(3, ?, 7), int8], Tensor[(5, 8, 9), float64]) {
    %842 = @func_1182() /* ty=(Tensor[(3, ?, 7), int8],) */;
    %843 = @func_3578() /* ty=(Tensor[(5, 8, 9), uint16], Tensor[(7, 2, 16), float32]) */;
    %844 = %843.0;
    %845 = cast(%844, dtype="float64") /* ty=Tensor[(5, 8, 9), float64] */;
    %846 = %842.0;
    %847 = acosh(%845) /* ty=Tensor[(5, 8, 9), float64] */;
    (%846, %847)
  };
  %848() /* ty=(Tensor[(3, ?, 7), int8], Tensor[(5, 8, 9), float64]) */
}

def @func_3580() -> (Tensor[(5, 8, 9), uint16], Tensor[(7, 2, 16), float32]) {
  @func_3578() /* ty=(Tensor[(5, 8, 9), uint16], Tensor[(7, 2, 16), float32]) */
}

def @func_3285() -> Tensor[(7, 2, 16), float32] {
  %849 = cast(meta[relay.Constant][64] /* ty=Tensor[(7, 2, 16), float32] */, dtype="float32") /* ty=Tensor[(7, 2, 16), float32] */;
  cos(%849) /* ty=Tensor[(7, 2, 16), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen173/build/output.py:2143: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen173/build/output.py:2148: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='cuda')

===================================
#[version = "0.0.5"]
type GradCell[T] {
  Raw(T),
  One(fn () -> T),
  Zero(fn () -> T),
}

def @MultiplyGradCell[T](%multiply: fn (T, T) -> T, %l: GradCell[T], %r: GradCell[T]) -> GradCell[T] {
  let %x: (GradCell[T], GradCell[T]) = (%l, %r);
  let %x1: GradCell[T] = match (%x) {
    (Zero(_), _) => {
      %l
    },
    (_, Zero(_)) => {
      %r
    },
    (One(_), _) => {
      %r
    },
    (_, One(_)) => {
      %l
    },
    _ => {
      let %x2: T = match (%l) {
        Raw(%x3: T) => {
          %x3
        },
        One(%x4: fn () -> T) => {
          let %x5: T = %x4() /* ty=T */;
          %x5
        },
        Zero(%x6: fn () -> T) => {
          let %x7: T = %x6() /* ty=T */;
          %x7
        },
      };
      let %x8: T = match (%r) {
        Raw(%x9: T) => {
          %x9
        },
        One(%x10: fn () -> T) => {
          let %x11: T = %x10() /* ty=T */;
          %x11
        },
        Zero(%x12: fn () -> T) => {
          let %x13: T = %x12() /* ty=T */;
          %x13
        },
      };
      let %x14: T = %multiply(%x2, %x8) /* ty=T */;
      let %x15: GradCell[T] = Raw(%x14) /* ty=GradCell[T] */;
      %x15
    },
  };
  %x1
}

def @FromGradCell[T](%g: GradCell[T]) -> T {
  let %x16: T = match (%g) {
    Raw(%x17: T) => {
      %x17
    },
    One(%x18: fn () -> T) => {
      let %x19: T = %x18() /* ty=T */;
      %x19
    },
    Zero(%x20: fn () -> T) => {
      let %x21: T = %x20() /* ty=T */;
      %x21
    },
  };
  %x16
}

def @AddGradCell[T](%add: fn (T, T) -> T, %l1: GradCell[T], %r1: GradCell[T]) -> GradCell[T] {
  let %x22: (GradCell[T], GradCell[T]) = (%l1, %r1);
  let %x23: GradCell[T] = match (%x22) {
    (Zero(_), _) => {
      %r1
    },
    (_, Zero(_)) => {
      %l1
    },
    _ => {
      let %x24: T = match (%l1) {
        Raw(%x25: T) => {
          %x25
        },
        One(%x26: fn () -> T) => {
          let %x27: T = %x26() /* ty=T */;
          %x27
        },
        Zero(%x28: fn () -> T) => {
          let %x29: T = %x28() /* ty=T */;
          %x29
        },
      };
      let %x30: T = match (%r1) {
        Raw(%x31: T) => {
          %x31
        },
        One(%x32: fn () -> T) => {
          let %x33: T = %x32() /* ty=T */;
          %x33
        },
        Zero(%x34: fn () -> T) => {
          let %x35: T = %x34() /* ty=T */;
          %x35
        },
      };
      let %x36: T = %add(%x24, %x30) /* ty=T */;
      let %x37: GradCell[T] = Raw(%x36) /* ty=GradCell[T] */;
      %x37
    },
  };
  %x23
}

def @main() -> ((Tensor[(6, 6, 14), float64],), ()) {
  let %x38: fn () -> ((GradCell[Tensor[(6, 6, 14), float64]],), ()) = fn () -> ((GradCell[Tensor[(6, 6, 14), float64]],), ()) {
    let %x39: GradCell[Tensor[(6, 6, 14), float64]] = Raw(meta[relay.Constant][0] /* ty=Tensor[(6, 6, 14), float64] */) /* ty=GradCell[Tensor[(6, 6, 14), float64]] */;
    let %x40: fn () -> Tensor[(6, 6, 14), float64] = fn () -> Tensor[(6, 6, 14), float64] {
      meta[relay.Constant][1] /* ty=Tensor[(6, 6, 14), float64] */
    };
    let %x41: GradCell[Tensor[(6, 6, 14), float64]] = One(%x40) /* ty=GradCell[Tensor[(6, 6, 14), float64]] */;
    let %x42: (GradCell[Tensor[(6, 6, 14), float64]],) = (%x39,);
    let %x43: fn () -> Tensor[(6, 6, 14), float64] = fn () -> Tensor[(6, 6, 14), float64] {
      meta[relay.Constant][2] /* ty=Tensor[(6, 6, 14), float64] */
    };
    let %x44: GradCell[Tensor[(6, 6, 14), float64]] = Zero(%x43) /* ty=GradCell[Tensor[(6, 6, 14), float64]] */;
    let %x45: (GradCell[Tensor[(6, 6, 14), float64]],) = (%x44,);
    let %x46: fn (Tensor[(6, 6, 14), float64], Tensor[(6, 6, 14), float64]) -> Tensor[(6, 6, 14), float64] = fn (%lhs: Tensor[(6, 6, 14), float64], %rhs: Tensor[(6, 6, 14), float64]) -> Tensor[(6, 6, 14), float64] {
      let %x47: Tensor[(6, 6, 14), float64] = add(%lhs, %rhs) /* ty=Tensor[(6, 6, 14), float64] */;
      %x47
    };
    let %x48: fn () -> Tensor[(6, 6, 14), float64] = fn () -> Tensor[(6, 6, 14), float64] {
      meta[relay.Constant][3] /* ty=Tensor[(6, 6, 14), float64] */
    };
    let %x49: GradCell[Tensor[(6, 6, 14), float64]] = One(%x48) /* ty=GradCell[Tensor[(6, 6, 14), float64]] */;
    let %x50: (GradCell[Tensor[(6, 6, 14), float64]],) = (%x49,);
    let %x51: (GradCell[Tensor[(6, 6, 14), float64]], GradCell[Tensor[(6, 6, 14), float64]]) = (%x41, %x49);
    let %x52: GradCell[Tensor[(6, 6, 14), float64]] = Raw(meta[relay.Constant][4] /* ty=Tensor[(6, 6, 14), float64] */) /* ty=GradCell[Tensor[(6, 6, 14), float64]] */;
    let %x53: () = ();
    let %x54: ((GradCell[Tensor[(6, 6, 14), float64]],), ()) = (%x42, %x53);
    %x54
  };
  let %x55: GradCell[Tensor[(6, 6, 14), float64]] = Raw(meta[relay.Constant][0] /* ty=Tensor[(6, 6, 14), float64] */) /* ty=GradCell[Tensor[(6, 6, 14), float64]] */;
  let %x56: fn () -> Tensor[(6, 6, 14), float64] = fn () -> Tensor[(6, 6, 14), float64] {
    meta[relay.Constant][5] /* ty=Tensor[(6, 6, 14), float64] */
  };
  let %x57: GradCell[Tensor[(6, 6, 14), float64]] = One(%x56) /* ty=GradCell[Tensor[(6, 6, 14), float64]] */;
  let %x58: (GradCell[Tensor[(6, 6, 14), float64]],) = (%x55,);
  let %x59: fn () -> Tensor[(6, 6, 14), float64] = fn () -> Tensor[(6, 6, 14), float64] {
    meta[relay.Constant][6] /* ty=Tensor[(6, 6, 14), float64] */
  };
  let %x60: GradCell[Tensor[(6, 6, 14), float64]] = Zero(%x59) /* ty=GradCell[Tensor[(6, 6, 14), float64]] */;
  let %x61: (GradCell[Tensor[(6, 6, 14), float64]],) = (%x60,);
  let %x62: fn (Tensor[(6, 6, 14), float64], Tensor[(6, 6, 14), float64]) -> Tensor[(6, 6, 14), float64] = fn (%lhs1: Tensor[(6, 6, 14), float64], %rhs1: Tensor[(6, 6, 14), float64]) -> Tensor[(6, 6, 14), float64] {
    let %x63: Tensor[(6, 6, 14), float64] = add(%lhs1, %rhs1) /* ty=Tensor[(6, 6, 14), float64] */;
    %x63
  };
  let %x64: fn () -> Tensor[(6, 6, 14), float64] = fn () -> Tensor[(6, 6, 14), float64] {
    meta[relay.Constant][7] /* ty=Tensor[(6, 6, 14), float64] */
  };
  let %x65: GradCell[Tensor[(6, 6, 14), float64]] = One(%x64) /* ty=GradCell[Tensor[(6, 6, 14), float64]] */;
  let %x66: (GradCell[Tensor[(6, 6, 14), float64]],) = (%x65,);
  let %x67: (GradCell[Tensor[(6, 6, 14), float64]], GradCell[Tensor[(6, 6, 14), float64]]) = (%x57, %x65);
  let %x68: GradCell[Tensor[(6, 6, 14), float64]] = Raw(meta[relay.Constant][8] /* ty=Tensor[(6, 6, 14), float64] */) /* ty=GradCell[Tensor[(6, 6, 14), float64]] */;
  let %x69: () = ();
  let %x70: ((GradCell[Tensor[(6, 6, 14), float64]],), ()) = (%x58, %x69);
  let %x71: (Tensor[(6, 6, 14), float64],) = (meta[relay.Constant][0] /* ty=Tensor[(6, 6, 14), float64] */,);
  let %x72: () = ();
  let %x73: ((Tensor[(6, 6, 14), float64],), ()) = (%x71, %x72);
  %x73
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen173/build/output.py", line 2174, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  27: TVMFuncCall
  26: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  25: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  24: tvm::relay::backend::ExecutorCodegen::Codegen(tvm::relay::Function const&, tvm::runtime::String)
  23: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::GraphExecutorCodegenModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  22: tvm::relay::backend::GraphExecutorCodegen::Codegen(tvm::relay::Function, tvm::runtime::String)
  21: tvm::IRModule::FromExpr(tvm::RelayExpr const&, tvm::runtime::Map<tvm::GlobalVar, tvm::BaseFunc, void, void> const&, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void> const&)
  20: tvm::IRModule::FromExprInContext(tvm::RelayExpr const&, tvm::runtime::Map<tvm::GlobalVar, tvm::BaseFunc, void, void> const&, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void> const&, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >)
  19: tvm::IRModuleNode::Add(tvm::GlobalVar const&, tvm::BaseFunc const&, bool)
  18: tvm::WarnIfMalformed(tvm::IRModule const&, tvm::relay::Function)
  17: tvm::relay::FreeTypeVars(tvm::RelayExpr const&, tvm::IRModule const&)
  16: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
  15: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
  14: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
  12: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::relay::LetNode const*)
  11: tvm::relay::ExpandANormalForm(tvm::relay::LetNode const*, std::function<void (tvm::relay::LetNode const*)>, std::function<void (tvm::relay::LetNode const*)>)
  10: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
  9: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
  8: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
  7: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
  6: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::relay::LetNode const*)
  5: tvm::relay::ExpandANormalForm(tvm::relay::LetNode const*, std::function<void (tvm::relay::LetNode const*)>, std::function<void (tvm::relay::LetNode const*)>)
  4: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
  2: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::ConstructorNode const*)
  1: tvm::IRModuleNode::LookupTypeDef(tvm::GlobalTypeVar const&) const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/src/ir/module.cc", line 279
TVMError: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------
  Check failed: (it != type_definitions.end()) is false: There is no definition of GradCell
