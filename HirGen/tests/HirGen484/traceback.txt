==========mod==========
#[version = "0.0.5"]
def @func_6394() -> (Tensor[(8, 16, 6), float64], Tensor[(9, 13, 10), uint16], Tensor[(1170), uint16]) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(1170), uint16] */, dtype="uint16") /* ty=Tensor[(1170), uint16] */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(1170), uint16] */, dtype="uint16") /* ty=Tensor[(1170), uint16] */;
  %2 = reshape(%0, newshape=[9, 13, 10]) /* ty=Tensor[(9, 13, 10), uint16] */;
  %3 = reshape(%1, newshape=[9, 13, 10]) /* ty=Tensor[(9, 13, 10), uint16] */;
  %4 = @func_5806(%2, %3) /* ty=(Tensor[(9, 13, 10), uint16],) */;
  %5 = @func_6081() /* ty=Tensor[(8, 16, 6), float64] */;
  %6 = %4.0;
  (%5, %6, meta[relay.Constant][0] /* ty=Tensor[(1170), uint16] */)
}

def @func_8105() -> Tensor[(8, 16, 6), float64] {
  @func_4026() /* ty=Tensor[(8, 16, 6), float64] */
}

def @func_10488() -> Tensor[(3, 2, 2), bool] {
  %7 = @func_9684() /* ty=(Tensor[(3, 2, 2), bool],) */;
  %7.0
}

def @func_115(%var_110: Tensor[(3, 2, 2), float64]) -> (Tensor[(3, 2, 2), float64],) {
  %8 = cast(%var_110, dtype="float64") /* ty=Tensor[(3, 2, 2), float64] */;
  %9 = asin(%8) /* ty=Tensor[(3, 2, 2), float64] */;
  (%9,)
}

def @func_8227() -> (Tensor[(8, 16, 6), float64], Tensor[(135), float64], Tensor[(270, 6), uint32], Tensor[(4, 13, 8), float32], Tensor[(208, 2), float32]) {
  %10 = @func_7205() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %11 = %10.0;
  %12 = cast(%11, dtype="float64") /* ty=Tensor[(8, 16, 6), float64] */;
  %13 = cast(meta[relay.Constant][1] /* ty=Tensor[(270, 6), uint32] */, dtype="uint32") /* ty=Tensor[(270, 6), uint32] */;
  %14 = reshape(%12, newshape=[8, 16, 6]) /* ty=Tensor[(8, 16, 6), float64] */;
  %15 = reshape(%13, newshape=[540, 3]) /* ty=Tensor[(540, 3), uint32] */;
  %16 = @func_4606(%14, %15) /* ty=(Tensor[(8, 16, 6), bool], Tensor[(16, 2, 16), float64], Tensor[(540, 3), uint32], Tensor[(135), float64]) */;
  %17 = cast(meta[relay.Constant][2] /* ty=Tensor[(208, 2), float32] */, dtype="float32") /* ty=Tensor[(208, 2), float32] */;
  %18 = reshape(%17, newshape=[4, 13, 8]) /* ty=Tensor[(4, 13, 8), float32] */;
  %19 = %16.3;
  %20 = @func_1274(%18) /* ty=Tensor[(4, 13, 8), float32] */;
  (%11, %19, meta[relay.Constant][1] /* ty=Tensor[(270, 6), uint32] */, %20, meta[relay.Constant][2] /* ty=Tensor[(208, 2), float32] */)
}

def @func_7822(%var_7815: Tensor[(416), float32]) -> (Tensor[(8, 16, 6), float64], Tensor[(3, 10, 8), float64], Tensor[(240), float64], Tensor[(4, 13, 8), float32], Tensor[(416), float32]) {
  %21 = @func_3283() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %22 = cast(meta[relay.Constant][3] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %23 = reshape(%22, newshape=[3, 10, 8]) /* ty=Tensor[(3, 10, 8), float64] */;
  %24 = cast(%var_7815, dtype="float32") /* ty=Tensor[(416), float32] */;
  %25 = reshape(%24, newshape=[4, 13, 8]) /* ty=Tensor[(4, 13, 8), float32] */;
  %26 = %21.0;
  %27 = @func_4502(%23) /* ty=Tensor[(3, 10, 8), float64] */;
  %28 = @func_1274(%25) /* ty=Tensor[(4, 13, 8), float32] */;
  (%26, %27, meta[relay.Constant][3] /* ty=Tensor[(240), float64] */, %28, %var_7815)
}

def @func_9932() -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) {
  %29 = @func_8406() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %30 = @func_7036() /* ty=Tensor[(8, 16, 6), float64] */;
  %31 = %29.0;
  (%30, %31)
}

def @func_9249() -> (Tensor[(8, 16, 6), float64], Tensor[(108), uint32]) {
  %32 = @func_8406() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %33 = @func_4265() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(108), uint32], Tensor[(1620), uint32], Tensor[(135), float64]) */;
  %34 = %32.0;
  %35 = %33.1;
  (%34, %35)
}

def @func_11385() -> (Tensor[(8, 16, 6), float64], Tensor[(520), float64], Tensor[(3, 7, 14), float64], Tensor[(294), float64]) {
  %36 = @func_11156() /* ty=(Tensor[(520), float64],) */;
  %37 = cast(meta[relay.Constant][4] /* ty=Tensor[(294), float64] */, dtype="float64") /* ty=Tensor[(294), float64] */;
  %38 = reshape(%37, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), float64] */;
  %39 = @func_9545() /* ty=Tensor[(8, 16, 6), float64] */;
  %40 = %36.0;
  %41 = @func_3041(%38) /* ty=Tensor[(3, 7, 14), float64] */;
  (%39, %40, %41, meta[relay.Constant][4] /* ty=Tensor[(294), float64] */)
}

def @func_9010() -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(294), float64], Tensor[(8, 16, 6), float64]) {
  %42 = cast(meta[relay.Constant][5] /* ty=Tensor[(294), float64] */, dtype="float64") /* ty=Tensor[(294), float64] */;
  %43 = reshape(%42, newshape=[294, 1]) /* ty=Tensor[(294, 1), float64] */;
  %44 = @func_5887(%43) /* ty=(Tensor[(8, 16, 6), float64], Tensor[(3, 7, 14), float64], Tensor[(294, 1), float64]) */;
  %45 = @func_7227() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
  %46 = @func_7282() /* ty=Tensor[(8, 16, 6), float64] */;
  %47 = %44.0;
  %48 = %45.0;
  (%46, %47, meta[relay.Constant][5] /* ty=Tensor[(294), float64] */, %48)
}

def @func_3679(%var_3656: Tensor[(1620), uint32], %var_3670: Tensor[(135), float64]) -> (Tensor[(16, 2, 16), float64], Tensor[(4, 13, 8), float32], Tensor[(108), uint32], Tensor[(1620), uint32], Tensor[(3, 20), uint32], Tensor[(135), float64], Tensor[(3, 20), uint32]) {
  %49 = @func_3528() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(16, 2, 16), float32], Tensor[(512), float32], Tensor[(8, 13, 5), float64], Tensor[(520), float64]) */;
  %50 = %49.2;
  %51 = cast(%50, dtype="float64") /* ty=Tensor[(16, 2, 16), float64] */;
  %52 = cast(meta[relay.Constant][6] /* ty=Tensor[(108), uint32] */, dtype="uint32") /* ty=Tensor[(108), uint32] */;
  %53 = cast(%var_3656, dtype="uint32") /* ty=Tensor[(1620), uint32] */;
  %54 = reshape(%52, newshape=[12, 9, 1]) /* ty=Tensor[(12, 9, 1), uint32] */;
  %55 = reshape(%53, newshape=[12, 9, 15]) /* ty=Tensor[(12, 9, 15), uint32] */;
  %56 = @func_2250(%54, %55) /* ty=(Tensor[(12, 9, 15), uint32], Tensor[(4, 13, 8), float32], Tensor[(416), float32]) */;
  %57 = cast(%var_3670, dtype="float64") /* ty=Tensor[(135), float64] */;
  %58 = cast(meta[relay.Constant][7] /* ty=Tensor[(3, 20), uint32] */, dtype="uint32") /* ty=Tensor[(3, 20), uint32] */;
  %59 = reshape(%57, newshape=[3, 5, 9]) /* ty=Tensor[(3, 5, 9), float64] */;
  %60 = reshape(%58, newshape=[3, 20]) /* ty=Tensor[(3, 20), uint32] */;
  %61 = @func_2874(%59, %60) /* ty=(Tensor[(12, 5, 5), uint32], Tensor[(3, 20), uint32], Tensor[(3, 5, 9), float64], Tensor[(3, 5, 9), float32]) */;
  %62 = exp(%51) /* ty=Tensor[(16, 2, 16), float64] */;
  %63 = %56.1;
  %64 = %61.1;
  (%62, %63, meta[relay.Constant][6] /* ty=Tensor[(108), uint32] */, %var_3656, %64, %var_3670, meta[relay.Constant][7] /* ty=Tensor[(3, 20), uint32] */)
}

def @func_6065() -> (Tensor[(8, 16, 6), float64],) {
  %65 = @func_5696() /* ty=Tensor[(8, 16, 6), float64] */;
  (%65,)
}

def @func_8182(%var_8171: uint16) -> (Tensor[(8, 16, 6), float64], Tensor[(520), float64], uint16) {
  %66 = cast(%var_8171, dtype="uint16") /* ty=uint16 */;
  %67 = reshape(%66, newshape=[]) /* ty=uint16 */;
  %68 = @func_7780(%67) /* ty=(Tensor[(520), float64], Tensor[(5, 1), uint16], uint16) */;
  %69 = @func_6989() /* ty=Tensor[(8, 16, 6), float64] */;
  %70 = %68.0;
  (%69, %70, %var_8171)
}

def @func_10229() -> (Tensor[(520), float64], Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) {
  %71 = @func_4129() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
  %72 = @func_7181() /* ty=Tensor[(520), float64] */;
  %73 = %71.0;
  %74 = @func_6081() /* ty=Tensor[(8, 16, 6), float64] */;
  (%72, %73, %74)
}

def @func_11121() -> (Tensor[(8, 16, 6), float64],) {
  %75 = @func_8626() /* ty=Tensor[(8, 16, 6), float64] */;
  (%75,)
}

def @func_7274() -> (Tensor[(8, 16, 6), float64],) {
  %76 = @func_6882() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %77 = %76.0;
  (%77,)
}

def @func_6152() -> (Tensor[(520), float64],) {
  %78 = @func_4305() /* ty=Tensor[(520), float64] */;
  (%78,)
}

def @func_7044(%var_7039: Tensor[(8, 5, 8), float32], %var_7040: Tensor[(8, 5, 8), float32]) -> (Tensor[(8, 5, 8), float32],) {
  %79 = cast(%var_7040, dtype="float32") /* ty=Tensor[(8, 5, 8), float32] */;
  %80 = shape_of(%var_7039, dtype="int32") /* ty=Tensor[(3), int32] */;
  %81 = cast(%var_7039, dtype="float32") /* ty=Tensor[(8, 5, 8), float32] */;
  %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %83 = add(%81, %82) /* ty=Tensor[(8, 5, 8), float32] */;
  (%83,)
}

def @func_4265() -> (Tensor[(8, 16, 6), float64], Tensor[(108), uint32], Tensor[(1620), uint32], Tensor[(135), float64]) {
  %84 = cast(meta[relay.Constant][8] /* ty=Tensor[(1620), uint32] */, dtype="uint32") /* ty=Tensor[(1620), uint32] */;
  %85 = cast(meta[relay.Constant][9] /* ty=Tensor[(135), float64] */, dtype="float64") /* ty=Tensor[(135), float64] */;
  %86 = reshape(%84, newshape=[1620]) /* ty=Tensor[(1620), uint32] */;
  %87 = reshape(%85, newshape=[135]) /* ty=Tensor[(135), float64] */;
  %88 = @func_3679(%86, %87) /* ty=(Tensor[(16, 2, 16), float64], Tensor[(4, 13, 8), float32], Tensor[(108), uint32], Tensor[(1620), uint32], Tensor[(3, 20), uint32], Tensor[(135), float64], Tensor[(3, 20), uint32]) */;
  %89 = @func_4026() /* ty=Tensor[(8, 16, 6), float64] */;
  %90 = %88.2;
  (%89, %90, meta[relay.Constant][8] /* ty=Tensor[(1620), uint32] */, meta[relay.Constant][9] /* ty=Tensor[(135), float64] */)
}

def @func_6081() -> Tensor[(8, 16, 6), float64] {
  %91 = @func_4777() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
  %91.0
}

def @func_4305() -> Tensor[(520), float64] {
  %92 = @func_3528() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(16, 2, 16), float32], Tensor[(512), float32], Tensor[(8, 13, 5), float64], Tensor[(520), float64]) */;
  %92.5
}

def @func_4204() -> Tensor[(8, 16, 6), float64] {
  @func_4026() /* ty=Tensor[(8, 16, 6), float64] */
}

def @func_10837() -> (Tensor[(8, 16, 6), float64],) {
  %93 = @func_4806() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %94 = %93.0;
  (%94,)
}

def @func_3155(%var_3147: Tensor[(16, 2, 16), float32], %var_3148: Tensor[(16, 2, 16), float32]) -> Tensor[(16, 2, 16), float32] {
  %95 = cast(%var_3148, dtype="float32") /* ty=Tensor[(16, 2, 16), float32] */;
  %96 = shape_of(%var_3147, dtype="int32") /* ty=Tensor[(3), int32] */;
  %97 = cast(%var_3147, dtype="float32") /* ty=Tensor[(16, 2, 16), float32] */;
  %98 = dyn.reshape(%95, %96, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%97, %98) /* ty=Tensor[(16, 2, 16), float32] */
}

def @func_9204(%var_9164: Tensor[(520), float64]) -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(112, 8), float32], Tensor[(7, 5), float32], Tensor[(8, 16, 6), float64], Tensor[(3, 10, 8), float64], Tensor[(240), float64], Tensor[(8, 16, 6), bool], Tensor[(520), float64], Tensor[(520), uint8]) {
  %99 = @func_4082() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
  %100 = @func_8227() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(135), float64], Tensor[(270, 6), uint32], Tensor[(4, 13, 8), float32], Tensor[(208, 2), float32]) */;
  %101 = cast(meta[relay.Constant][10] /* ty=Tensor[(112, 8), float32] */, dtype="float32") /* ty=Tensor[(112, 8), float32] */;
  %102 = cast(meta[relay.Constant][11] /* ty=Tensor[(7, 5), float32] */, dtype="float32") /* ty=Tensor[(7, 5), float32] */;
  %103 = reshape(%101, newshape=[896]) /* ty=Tensor[(896), float32] */;
  %104 = reshape(%102, newshape=[7, 5]) /* ty=Tensor[(7, 5), float32] */;
  %105 = @func_8931(%103, %104) /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], uint16, Tensor[(8, 16, 6), float32], Tensor[(8, 16, 6), float64], Tensor[(5, 11, 2), uint32], Tensor[(896), float32], Tensor[(7, 5), float32], Tensor[(3, 10, 2), bool], Tensor[(3, 7, 14), float64], Tensor[(7, 42), float64]) */;
  %106 = @func_7227() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
  %107 = cast(meta[relay.Constant][12] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %108 = reshape(%107, newshape=[3, 10, 8]) /* ty=Tensor[(3, 10, 8), float64] */;
  %109 = %106.0;
  %110 = cast(%109, dtype="float64") /* ty=Tensor[(8, 16, 6), float64] */;
  %111 = reshape(%110, newshape=[8, 16, 6]) /* ty=Tensor[(8, 16, 6), float64] */;
  %112 = @func_7067() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(520), float64]) */;
  %113 = %112.1;
  %114 = cast(%113, dtype="float64") /* ty=Tensor[(520), float64] */;
  %115 = sqrt(%114) /* ty=Tensor[(520), float64] */;
  %116 = cast(%var_9164, dtype="uint32") /* ty=Tensor[(520), uint32] */;
  %117 = shape_of(%115, dtype="int32") /* ty=Tensor[(1), int32] */;
  %118 = cast(%115, dtype="uint32") /* ty=Tensor[(520), uint32] */;
  %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %120 = multiply(%118, %119) /* ty=Tensor[(520), uint32] */;
  %121 = cast(%120, dtype="float64") /* ty=Tensor[(520), float64] */;
  %122 = cast(%var_9164, dtype="uint8") /* ty=Tensor[(520), uint8] */;
  %123 = shape_of(%115, dtype="int32") /* ty=Tensor[(1), int32] */;
  %124 = cast(%115, dtype="uint8") /* ty=Tensor[(520), uint8] */;
  %125 = dyn.reshape(%122, %123, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %126 = %99.1;
  %127 = %100.0;
  %128 = %105.0;
  %129 = @func_4502(%108) /* ty=Tensor[(3, 10, 8), float64] */;
  %130 = @func_7475(%111) /* ty=Tensor[(8, 16, 6), bool] */;
  %131 = exp(%121) /* ty=Tensor[(520), float64] */;
  %132 = add(%124, %125) /* ty=Tensor[(520), uint8] */;
  (%126, %127, %128, meta[relay.Constant][10] /* ty=Tensor[(112, 8), float32] */, meta[relay.Constant][11] /* ty=Tensor[(7, 5), float32] */, %109, %129, meta[relay.Constant][12] /* ty=Tensor[(240), float64] */, %130, %131, %132)
}

def @func_8566() -> Tensor[(8, 16, 6), float64] {
  %133 = @func_7227() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
  %133.0
}

def @func_6547() -> (Tensor[(8, 16, 6), float64],) {
  %134 = @func_6081() /* ty=Tensor[(8, 16, 6), float64] */;
  (%134,)
}

def @func_5908(%var_5900: Tensor[(416), float32]) -> (Tensor[(8, 16, 6), float64], Tensor[(416), float32], Tensor[(4, 13, 8), float32]) {
  %135 = @func_3809() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %136 = cast(%var_5900, dtype="float32") /* ty=Tensor[(416), float32] */;
  %137 = reshape(%136, newshape=[4, 13, 8]) /* ty=Tensor[(4, 13, 8), float32] */;
  %138 = @func_1274(%137) /* ty=Tensor[(4, 13, 8), float32] */;
  %139 = cast(%138, dtype="float32") /* ty=Tensor[(4, 13, 8), float32] */;
  %140 = %135.0;
  %141 = exp(%139) /* ty=Tensor[(4, 13, 8), float32] */;
  (%140, %var_5900, %141)
}

def @func_7475(%var_7465: Tensor[(8, 16, 6), float64]) -> Tensor[(8, 16, 6), bool] {
  %142 = @func_3629() /* ty=Tensor[(8, 16, 6), float64] */;
  %143 = cast(%var_7465, dtype="bool") /* ty=Tensor[(8, 16, 6), bool] */;
  %144 = shape_of(%142, dtype="int32") /* ty=Tensor[(3), int32] */;
  %145 = cast(%142, dtype="bool") /* ty=Tensor[(8, 16, 6), bool] */;
  %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%145, %146) /* ty=Tensor[(8, 16, 6), bool] */
}

def @func_8626() -> Tensor[(8, 16, 6), float64] {
  @func_7008() /* ty=Tensor[(8, 16, 6), float64] */
}

def @func_11483() -> (Tensor[(8, 16, 6), float64],) {
  %147 = @func_10000() /* ty=(Tensor[(4, 8, 9), float64], Tensor[(6, 9, 10), uint8], Tensor[(540), uint8], Tensor[(520), float32], Tensor[(8, 16, 6), float64]) */;
  %148 = %147.4;
  (%148,)
}

def @func_9709() -> (Tensor[(8, 16, 6), float64],) {
  %149 = @func_7008() /* ty=Tensor[(8, 16, 6), float64] */;
  (%149,)
}

def @func_7282() -> Tensor[(8, 16, 6), float64] {
  %150 = @func_3809() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %150.0
}

def @func_11806() -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], uint16) {
  %151 = cast(meta[relay.Constant][13] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %152 = reshape(%151, newshape=[]) /* ty=uint16 */;
  %153 = @func_5434(%152) /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), bool], Tensor[(8, 16, 6), float64], Tensor[(3, 7, 14), float64], Tensor[(294), float64]) */;
  %154 = @func_10788() /* ty=Tensor[(8, 16, 6), float64] */;
  %155 = %153.2;
  (%154, %155, meta[relay.Constant][13] /* ty=uint16 */)
}

def @func_6448(%var_6426: Tensor[(2, 1, 5), float64], %var_6439: Tensor[(2, 8, 5), float64]) -> (Tensor[(2, 7, 5), bool], Tensor[(2, 8, 5), uint8]) {
  %156 = cast(%var_6426, dtype="bool") /* ty=Tensor[(2, 1, 5), bool] */;
  %157 = cast(meta[relay.Constant][14] /* ty=Tensor[(2, 7, 5), float64] */, dtype="bool") /* ty=Tensor[(2, 7, 5), bool] */;
  %158 = cast(%var_6426, dtype="uint8") /* ty=Tensor[(2, 1, 5), uint8] */;
  %159 = cast(%var_6439, dtype="uint8") /* ty=Tensor[(2, 8, 5), uint8] */;
  %160 = less_equal(%156, %157) /* ty=Tensor[(2, 7, 5), bool] */;
  %161 = add(%158, %159) /* ty=Tensor[(2, 8, 5), uint8] */;
  (%160, %161)
}

def @func_11787(%var_11765: int16, %var_11766: Tensor[(7, 16, 1), int16]) -> (Tensor[(7, 16, 1), bool], Tensor[(8, 16, 6), float64]) {
  %162 = cast(%var_11765, dtype="bool") /* ty=bool */;
  %163 = cast(%var_11766, dtype="bool") /* ty=Tensor[(7, 16, 1), bool] */;
  %164 = @func_7733() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
  %165 = not_equal(%162, %163) /* ty=Tensor[(7, 16, 1), bool] */;
  %166 = %164.0;
  (%165, %166)
}

def @func_3041(%var_3037: Tensor[(3, 7, 14), float64]) -> Tensor[(3, 7, 14), float64] {
  %167 = cast(%var_3037, dtype="float64") /* ty=Tensor[(3, 7, 14), float64] */;
  tan(%167) /* ty=Tensor[(3, 7, 14), float64] */
}

def @func_8947(%var_8939: Tensor[(8, 13, 8), float64], %var_8940: Tensor[(8, 13, 8), float64]) -> Tensor[(8, 13, 8), float64] {
  %168 = cast(%var_8940, dtype="float64") /* ty=Tensor[(8, 13, 8), float64] */;
  %169 = shape_of(%var_8939, dtype="int32") /* ty=Tensor[(3), int32] */;
  %170 = cast(%var_8939, dtype="float64") /* ty=Tensor[(8, 13, 8), float64] */;
  %171 = dyn.reshape(%168, %169, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%170, %171) /* ty=Tensor[(8, 13, 8), float64] */
}

def @func_3707() -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) {
  %172 = @func_3283() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %173 = @func_3283() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %174 = %172.0;
  %175 = %173.0;
  (%174, %175)
}

def @func_8821(%var_8795: Tensor[(135), float64]) -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(4, 13, 8), float32], Tensor[(1620), uint32], Tensor[(135), float64]) {
  %176 = @func_5572() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %177 = @func_4777() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
  %178 = cast(meta[relay.Constant][15] /* ty=Tensor[(1620), uint32] */, dtype="uint32") /* ty=Tensor[(1620), uint32] */;
  %179 = cast(%var_8795, dtype="float64") /* ty=Tensor[(135), float64] */;
  %180 = reshape(%178, newshape=[1620]) /* ty=Tensor[(1620), uint32] */;
  %181 = reshape(%179, newshape=[135]) /* ty=Tensor[(135), float64] */;
  %182 = @func_3679(%180, %181) /* ty=(Tensor[(16, 2, 16), float64], Tensor[(4, 13, 8), float32], Tensor[(108), uint32], Tensor[(1620), uint32], Tensor[(3, 20), uint32], Tensor[(135), float64], Tensor[(3, 20), uint32]) */;
  %183 = %176.0;
  %184 = %177.0;
  %185 = %182.1;
  (%183, %184, %185, meta[relay.Constant][15] /* ty=Tensor[(1620), uint32] */, %var_8795)
}

def @func_5494(%var_5469: Tensor[(132, 2), float32]) -> (Tensor[(8, 16, 6), float64], Tensor[(6, 4, 11), float64], Tensor[(455), float32], Tensor[(132, 2), bool], Tensor[(7, 1, 5), float32], Tensor[(1, 35), float32]) {
  %186 = @func_5333() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %187 = cast(meta[relay.Constant][16] /* ty=Tensor[(455), float32] */, dtype="float32") /* ty=Tensor[(455), float32] */;
  %188 = cast(%var_5469, dtype="float32") /* ty=Tensor[(132, 2), float32] */;
  %189 = reshape(%187, newshape=[7, 13, 5]) /* ty=Tensor[(7, 13, 5), float32] */;
  %190 = reshape(%188, newshape=[264]) /* ty=Tensor[(264), float32] */;
  %191 = @func_3976(%189, %190) /* ty=(Tensor[(7, 13, 5), float64], Tensor[(264), float32], Tensor[(6, 4, 11), float64], Tensor[(6, 4, 11), float64]) */;
  %192 = cast(meta[relay.Constant][17] /* ty=Tensor[(132, 2), float32] */, dtype="bool") /* ty=Tensor[(132, 2), bool] */;
  %193 = shape_of(%var_5469, dtype="int32") /* ty=Tensor[(2), int32] */;
  %194 = cast(%var_5469, dtype="bool") /* ty=Tensor[(132, 2), bool] */;
  %195 = dyn.reshape(%192, %193, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %196 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 35), float32] */, dtype="float32") /* ty=Tensor[(1, 35), float32] */;
  %197 = reshape(%196, newshape=[7, 1, 5]) /* ty=Tensor[(7, 1, 5), float32] */;
  %198 = @func_364(%197) /* ty=(Tensor[(7, 1, 5), float32], Tensor[(7, 1, 5), float32]) */;
  %199 = %186.0;
  %200 = %191.3;
  %201 = not_equal(%194, %195) /* ty=Tensor[(132, 2), bool] */;
  %202 = %198.1;
  (%199, %200, meta[relay.Constant][16] /* ty=Tensor[(455), float32] */, %201, %202, meta[relay.Constant][18] /* ty=Tensor[(1, 35), float32] */)
}

def @func_9310() -> Tensor[(8, 16, 6), float64] {
  %203 = @func_6547() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %203.0
}

def @func_3528() -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(16, 2, 16), float32], Tensor[(512), float32], Tensor[(8, 13, 5), float64], Tensor[(520), float64]) {
  %204 = @func_3283() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %205 = @func_3283() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %206 = cast(meta[relay.Constant][19] /* ty=Tensor[(512), float32] */, dtype="float32") /* ty=Tensor[(512), float32] */;
  %207 = cast(meta[relay.Constant][19] /* ty=Tensor[(512), float32] */, dtype="float32") /* ty=Tensor[(512), float32] */;
  %208 = reshape(%206, newshape=[16, 2, 16]) /* ty=Tensor[(16, 2, 16), float32] */;
  %209 = reshape(%207, newshape=[16, 2, 16]) /* ty=Tensor[(16, 2, 16), float32] */;
  %210 = cast(meta[relay.Constant][20] /* ty=Tensor[(520), float64] */, dtype="float64") /* ty=Tensor[(520), float64] */;
  %211 = cast(meta[relay.Constant][20] /* ty=Tensor[(520), float64] */, dtype="float64") /* ty=Tensor[(520), float64] */;
  %212 = reshape(%210, newshape=[8, 13, 5]) /* ty=Tensor[(8, 13, 5), float64] */;
  %213 = reshape(%211, newshape=[8, 13, 5]) /* ty=Tensor[(8, 13, 5), float64] */;
  %214 = @func_2412(%212, %213) /* ty=(Tensor[(8, 13, 5), float64], Tensor[(8, 13, 5), float32], Tensor[(8, 13, 5), float64]) */;
  %215 = %204.0;
  %216 = %205.0;
  %217 = @func_3155(%208, %209) /* ty=Tensor[(16, 2, 16), float32] */;
  %218 = %214.2;
  (%215, %216, %217, meta[relay.Constant][19] /* ty=Tensor[(512), float32] */, %218, meta[relay.Constant][20] /* ty=Tensor[(520), float64] */)
}

def @func_7102() -> (Tensor[(8, 16, 6), float64],) {
  %219 = @func_6295() /* ty=Tensor[(8, 16, 6), float64] */;
  (%219,)
}

def @func_10984() -> (Tensor[(8, 16, 6), float64],) {
  %220 = @func_8406() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %221 = %220.0;
  (%221,)
}

def @func_3765() -> Tensor[(8, 16, 6), float64] {
  %222 = @func_3707() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
  %222.0
}

def @func_5213() -> Tensor[(8, 16, 6), float64] {
  %223 = @func_4129() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
  %223.0
}

def @func_3795() -> (Tensor[(8, 16, 6), float64],) {
  %224 = @func_3528() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(16, 2, 16), float32], Tensor[(512), float32], Tensor[(8, 13, 5), float64], Tensor[(520), float64]) */;
  %225 = %224.1;
  (%225,)
}

def @func_7143() -> Tensor[(8, 16, 6), float64] {
  @func_6989() /* ty=Tensor[(8, 16, 6), float64] */
}

def @func_5887(%var_5885: Tensor[(294, 1), float64]) -> (Tensor[(8, 16, 6), float64], Tensor[(3, 7, 14), float64], Tensor[(294, 1), float64]) {
  %226 = @func_5333() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %227 = cast(%var_5885, dtype="float64") /* ty=Tensor[(294, 1), float64] */;
  %228 = reshape(%227, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), float64] */;
  %229 = %226.0;
  %230 = @func_3041(%228) /* ty=Tensor[(3, 7, 14), float64] */;
  (%229, %230, %var_5885)
}

def @func_6359(%var_6355: Tensor[(520), float64]) -> (Tensor[(8, 16, 6), float64], Tensor[(8, 13, 5), float64], Tensor[(520), float64]) {
  %231 = cast(%var_6355, dtype="float64") /* ty=Tensor[(520), float64] */;
  %232 = cast(%var_6355, dtype="float64") /* ty=Tensor[(520), float64] */;
  %233 = reshape(%231, newshape=[8, 13, 5]) /* ty=Tensor[(8, 13, 5), float64] */;
  %234 = reshape(%232, newshape=[8, 13, 5]) /* ty=Tensor[(8, 13, 5), float64] */;
  %235 = @func_2412(%233, %234) /* ty=(Tensor[(8, 13, 5), float64], Tensor[(8, 13, 5), float32], Tensor[(8, 13, 5), float64]) */;
  %236 = @func_3765() /* ty=Tensor[(8, 16, 6), float64] */;
  %237 = %235.2;
  (%236, %237, %var_6355)
}

def @func_4015(%var_3982: Tensor[(13, 4, 10), float32]) -> (Tensor[(13, 4, 10), float32], Tensor[(6, 4, 11), float64], Tensor[(455), float32], Tensor[(264), float32], Tensor[(8, 16, 6), float64]) {
  %238 = cast(%var_3982, dtype="float32") /* ty=Tensor[(13, 4, 10), float32] */;
  %239 = cast(meta[relay.Constant][21] /* ty=Tensor[(455), float32] */, dtype="float32") /* ty=Tensor[(455), float32] */;
  %240 = cast(meta[relay.Constant][22] /* ty=Tensor[(264), float32] */, dtype="float32") /* ty=Tensor[(264), float32] */;
  %241 = reshape(%239, newshape=[7, 13, 5]) /* ty=Tensor[(7, 13, 5), float32] */;
  %242 = reshape(%240, newshape=[264]) /* ty=Tensor[(264), float32] */;
  %243 = @func_3976(%241, %242) /* ty=(Tensor[(7, 13, 5), float64], Tensor[(264), float32], Tensor[(6, 4, 11), float64], Tensor[(6, 4, 11), float64]) */;
  %244 = sigmoid(%238) /* ty=Tensor[(13, 4, 10), float32] */;
  %245 = %243.3;
  %246 = @func_3765() /* ty=Tensor[(8, 16, 6), float64] */;
  (%244, %245, meta[relay.Constant][21] /* ty=Tensor[(455), float32] */, meta[relay.Constant][22] /* ty=Tensor[(264), float32] */, %246)
}

def @func_3394(%var_3390: uint16) -> (Tensor[(8, 16, 6), float64], Tensor[(5, 1), uint16], uint16) {
  %247 = @func_3283() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %248 = cast(%var_3390, dtype="uint16") /* ty=uint16 */;
  %249 = reshape(%248, newshape=[]) /* ty=uint16 */;
  %250 = @func_812(%249) /* ty=(Tensor[(5, 1), uint16],) */;
  %251 = %247.0;
  %252 = %250.0;
  (%251, %252, %var_3390)
}

def @func_6218(%var_6209: Tensor[(135, 1), float64], %var_6210: Tensor[(60), uint32]) -> (Tensor[(8, 16, 6), float32], Tensor[(8, 16, 6), float32], Tensor[(3, 5, 9), float32], Tensor[(135, 1), float64], Tensor[(60), uint32]) {
  %253 = @func_4777() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
  %254 = %253.1;
  %255 = cast(%254, dtype="float32") /* ty=Tensor[(8, 16, 6), float32] */;
  %256 = cast(%254, dtype="float32") /* ty=Tensor[(8, 16, 6), float32] */;
  %257 = cast(%var_6209, dtype="float64") /* ty=Tensor[(135, 1), float64] */;
  %258 = cast(%var_6210, dtype="uint32") /* ty=Tensor[(60), uint32] */;
  %259 = reshape(%257, newshape=[3, 5, 9]) /* ty=Tensor[(3, 5, 9), float64] */;
  %260 = reshape(%258, newshape=[3, 20]) /* ty=Tensor[(3, 20), uint32] */;
  %261 = @func_2874(%259, %260) /* ty=(Tensor[(12, 5, 5), uint32], Tensor[(3, 20), uint32], Tensor[(3, 5, 9), float64], Tensor[(3, 5, 9), float32]) */;
  %262 = log(%255) /* ty=Tensor[(8, 16, 6), float32] */;
  %263 = log10(%256) /* ty=Tensor[(8, 16, 6), float32] */;
  %264 = %261.3;
  (%262, %263, %264, %var_6209, %var_6210)
}

def @func_7015(%var_7010: int8, %var_7011: Tensor[(11, 10, 14), int8]) -> Tensor[(11, 10, 14), int8] {
  %265 = cast(%var_7010, dtype="int8") /* ty=int8 */;
  %266 = cast(%var_7011, dtype="int8") /* ty=Tensor[(11, 10, 14), int8] */;
  add(%265, %266) /* ty=Tensor[(11, 10, 14), int8] */
}

def @func_10914(%var_10869: Tensor[(108), uint32]) -> (Tensor[(8, 16, 6), float64], Tensor[(416), float32], Tensor[(108), uint32], Tensor[(18, 90), uint32], Tensor[(3, 20), uint32], Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) {
  %267 = @func_8626() /* ty=Tensor[(8, 16, 6), float64] */;
  %268 = cast(%267, dtype="float64") /* ty=Tensor[(8, 16, 6), float64] */;
  %269 = cast(%var_10869, dtype="uint32") /* ty=Tensor[(108), uint32] */;
  %270 = cast(meta[relay.Constant][23] /* ty=Tensor[(18, 90), uint32] */, dtype="uint32") /* ty=Tensor[(18, 90), uint32] */;
  %271 = reshape(%269, newshape=[12, 9, 1]) /* ty=Tensor[(12, 9, 1), uint32] */;
  %272 = reshape(%270, newshape=[12, 9, 15]) /* ty=Tensor[(12, 9, 15), uint32] */;
  %273 = @func_2250(%271, %272) /* ty=(Tensor[(12, 9, 15), uint32], Tensor[(4, 13, 8), float32], Tensor[(416), float32]) */;
  %274 = @func_6555() /* ty=(Tensor[(3, 20), uint32],) */;
  %275 = sinh(%268) /* ty=Tensor[(8, 16, 6), float64] */;
  %276 = %273.2;
  %277 = %274.0;
  %278 = @func_3765() /* ty=Tensor[(8, 16, 6), float64] */;
  %279 = @func_3765() /* ty=Tensor[(8, 16, 6), float64] */;
  (%275, %276, %var_10869, meta[relay.Constant][23] /* ty=Tensor[(18, 90), uint32] */, %277, %278, %279)
}

def @func_7696(%var_7650: Tensor[(8, 7, 16), float32], %var_7677: Tensor[(35), float32]) -> (Tensor[(8, 16, 6), float64], Tensor[(8, 7, 16), float32], Tensor[(7, 1, 5), float32], Tensor[(35), float32], Tensor[(5, 11, 2), uint32], Tensor[(22), uint32], Tensor[(110), uint32]) {
  %280 = @func_5384() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(12), float64], Tensor[(108), uint32]) */;
  %281 = cast(%var_7650, dtype="float32") /* ty=Tensor[(8, 7, 16), float32] */;
  %282 = acos(%281) /* ty=Tensor[(8, 7, 16), float32] */;
  %283 = cast(%282, dtype="float64") /* ty=Tensor[(8, 7, 16), float64] */;
  %284 = atanh(%283) /* ty=Tensor[(8, 7, 16), float64] */;
  %285 = cast(%284, dtype="float32") /* ty=Tensor[(8, 7, 16), float32] */;
  %286 = cast(%var_7677, dtype="float32") /* ty=Tensor[(35), float32] */;
  %287 = reshape(%286, newshape=[7, 1, 5]) /* ty=Tensor[(7, 1, 5), float32] */;
  %288 = @func_364(%287) /* ty=(Tensor[(7, 1, 5), float32], Tensor[(7, 1, 5), float32]) */;
  %289 = cast(meta[relay.Constant][24] /* ty=Tensor[(22), uint32] */, dtype="uint32") /* ty=Tensor[(22), uint32] */;
  %290 = cast(meta[relay.Constant][25] /* ty=Tensor[(110), uint32] */, dtype="uint32") /* ty=Tensor[(110), uint32] */;
  %291 = reshape(%289, newshape=[1, 11, 2]) /* ty=Tensor[(1, 11, 2), uint32] */;
  %292 = reshape(%290, newshape=[5, 11, 2]) /* ty=Tensor[(5, 11, 2), uint32] */;
  %293 = @func_6519(%291, %292) /* ty=(Tensor[(5, 11, 2), uint32],) */;
  %294 = %280.1;
  %295 = rsqrt(%285) /* ty=Tensor[(8, 7, 16), float32] */;
  %296 = %288.0;
  %297 = %293.0;
  (%294, %295, %296, %var_7677, %297, meta[relay.Constant][24] /* ty=Tensor[(22), uint32] */, meta[relay.Constant][25] /* ty=Tensor[(110), uint32] */)
}

def @func_4129() -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) {
  %298 = @func_3809() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %299 = %298.0;
  %300 = @func_3765() /* ty=Tensor[(8, 16, 6), float64] */;
  (%299, %300)
}

def @func_11617() -> (Tensor[(8, 16, 6), float64],) {
  %301 = @func_5696() /* ty=Tensor[(8, 16, 6), float64] */;
  (%301,)
}

def @func_9041() -> Tensor[(8, 16, 6), float64] {
  @func_5696() /* ty=Tensor[(8, 16, 6), float64] */
}

def @func_7584() -> (Tensor[(8, 16, 6), float64], Tensor[(4, 13, 8), float32], Tensor[(416), float32], Tensor[(8, 16, 6), float64]) {
  %302 = @func_6547() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %303 = cast(meta[relay.Constant][26] /* ty=Tensor[(416), float32] */, dtype="float32") /* ty=Tensor[(416), float32] */;
  %304 = reshape(%303, newshape=[4, 13, 8]) /* ty=Tensor[(4, 13, 8), float32] */;
  %305 = @func_3795() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %306 = %302.0;
  %307 = @func_1274(%304) /* ty=Tensor[(4, 13, 8), float32] */;
  %308 = %305.0;
  (%306, %307, meta[relay.Constant][26] /* ty=Tensor[(416), float32] */, %308)
}

def @func_2874(%var_2810: Tensor[(3, 5, 9), float64], %var_2821: Tensor[(3, 20), uint32]) -> (Tensor[(12, 5, 5), uint32], Tensor[(3, 20), uint32], Tensor[(3, 5, 9), float64], Tensor[(3, 5, 9), float32]) {
  %309 = cast(%var_2821, dtype="uint32") /* ty=Tensor[(3, 20), uint32] */;
  %310 = reshape(%309, newshape=[12, 1, 5]) /* ty=Tensor[(12, 1, 5), uint32] */;
  %311 = @func_225(%310) /* ty=(Tensor[(12, 5, 5), uint32], Tensor[(3, 2, 2), bool], Tensor[(3, 2, 2), float32]) */;
  %312 = cast(%var_2810, dtype="float64") /* ty=Tensor[(3, 5, 9), float64] */;
  %313 = sigmoid(%312) /* ty=Tensor[(3, 5, 9), float64] */;
  %314 = cast(%313, dtype="float64") /* ty=Tensor[(3, 5, 9), float64] */;
  %315 = cast(%313, dtype="float32") /* ty=Tensor[(3, 5, 9), float32] */;
  %316 = %311.0;
  %317 = log2(%314) /* ty=Tensor[(3, 5, 9), float64] */;
  %318 = atan(%315) /* ty=Tensor[(3, 5, 9), float32] */;
  (%316, %var_2821, %317, %318)
}

def @func_8680() -> (Tensor[(3, 2, 2), float32],) {
  %319 = @func_5112() /* ty=(Tensor[(8, 16, 6), float32], Tensor[(3, 2, 2), float32], Tensor[(60), uint32]) */;
  %320 = %319.1;
  (%320,)
}

def @func_5434(%var_5402: uint16) -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), bool], Tensor[(8, 16, 6), float64], Tensor[(3, 7, 14), float64], Tensor[(294), float64]) {
  %321 = cast(%var_5402, dtype="uint16") /* ty=uint16 */;
  %322 = reshape(%321, newshape=[]) /* ty=uint16 */;
  %323 = @func_3394(%322) /* ty=(Tensor[(8, 16, 6), float64], Tensor[(5, 1), uint16], uint16) */;
  %324 = @func_5384() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(12), float64], Tensor[(108), uint32]) */;
  %325 = %324.0;
  %326 = cast(%var_5402, dtype="bool") /* ty=bool */;
  %327 = cast(%325, dtype="bool") /* ty=Tensor[(8, 16, 6), bool] */;
  %328 = @func_3795() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %329 = cast(meta[relay.Constant][27] /* ty=Tensor[(294), float64] */, dtype="float64") /* ty=Tensor[(294), float64] */;
  %330 = reshape(%329, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), float64] */;
  %331 = %323.0;
  %332 = logical_or(%326, %327) /* ty=Tensor[(8, 16, 6), bool] */;
  %333 = %328.0;
  %334 = @func_3041(%330) /* ty=Tensor[(3, 7, 14), float64] */;
  (%331, %332, %333, %334, meta[relay.Constant][27] /* ty=Tensor[(294), float64] */)
}

def @func_8726() -> (Tensor[(3, 2, 2), bool], Tensor[(9, 5, 9), float32], Tensor[(405), float32], Tensor[(3, 2, 2), float64]) {
  %335 = @func_5949() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(3, 2, 2), bool], Tensor[(3, 20), uint32]) */;
  %336 = cast(meta[relay.Constant][28] /* ty=Tensor[(405), float32] */, dtype="float32") /* ty=Tensor[(405), float32] */;
  %337 = reshape(%336, newshape=[9, 5, 9]) /* ty=Tensor[(9, 5, 9), float32] */;
  %338 = %335.1;
  %339 = cast(%338, dtype="float64") /* ty=Tensor[(3, 2, 2), float64] */;
  %340 = reshape(%339, newshape=[3, 2, 2]) /* ty=Tensor[(3, 2, 2), float64] */;
  %341 = @func_115(%340) /* ty=(Tensor[(3, 2, 2), float64],) */;
  %342 = @func_2141(%337) /* ty=Tensor[(9, 5, 9), float32] */;
  %343 = %341.0;
  (%338, %342, meta[relay.Constant][28] /* ty=Tensor[(405), float32] */, %343)
}

def @func_3976(%var_3954: Tensor[(7, 13, 5), float32], %var_3961: Tensor[(264), float32]) -> (Tensor[(7, 13, 5), float64], Tensor[(264), float32], Tensor[(6, 4, 11), float64], Tensor[(6, 4, 11), float64]) {
  %344 = @func_3485() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(7, 1, 5), float32], Tensor[(35), float32], Tensor[(12, 9, 15), uint32], Tensor[(108), uint32], Tensor[(1620), uint32], Tensor[(3, 2, 2), bool], Tensor[(60), uint32]) */;
  %345 = %344.1;
  %346 = cast(%345, dtype="float64") /* ty=Tensor[(7, 1, 5), float64] */;
  %347 = cast(%var_3954, dtype="float64") /* ty=Tensor[(7, 13, 5), float64] */;
  %348 = cast(%var_3961, dtype="float32") /* ty=Tensor[(264), float32] */;
  %349 = reshape(%348, newshape=[6, 4, 11]) /* ty=Tensor[(6, 4, 11), float32] */;
  %350 = @func_339(%349) /* ty=(Tensor[(6, 4, 11), float64],) */;
  %351 = %350.0;
  %352 = cast(%351, dtype="float32") /* ty=Tensor[(6, 4, 11), float32] */;
  %353 = reshape(%352, newshape=[6, 4, 11]) /* ty=Tensor[(6, 4, 11), float32] */;
  %354 = @func_339(%353) /* ty=(Tensor[(6, 4, 11), float64],) */;
  %355 = cast(%351, dtype="float64") /* ty=Tensor[(6, 4, 11), float64] */;
  %356 = divide(%346, %347) /* ty=Tensor[(7, 13, 5), float64] */;
  %357 = %354.0;
  %358 = cosh(%355) /* ty=Tensor[(6, 4, 11), float64] */;
  (%356, %var_3961, %357, %358)
}

def @func_5997(%var_5965: Tensor[(8, 16, 6), float64], %var_5976: Tensor[(8, 16, 6), float64]) -> (Tensor[(8, 16, 6), float32], Tensor[(8, 16, 6), bool]) {
  %359 = @func_3765() /* ty=Tensor[(8, 16, 6), float64] */;
  %360 = cast(%var_5965, dtype="float32") /* ty=Tensor[(8, 16, 6), float32] */;
  %361 = shape_of(%359, dtype="int32") /* ty=Tensor[(3), int32] */;
  %362 = cast(%359, dtype="float32") /* ty=Tensor[(8, 16, 6), float32] */;
  %363 = dyn.reshape(%360, %361, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %364 = cast(%var_5976, dtype="bool") /* ty=Tensor[(8, 16, 6), bool] */;
  %365 = shape_of(%var_5965, dtype="int32") /* ty=Tensor[(3), int32] */;
  %366 = cast(%var_5965, dtype="bool") /* ty=Tensor[(8, 16, 6), bool] */;
  %367 = dyn.reshape(%364, %365, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %368 = mod(%362, %363) /* ty=Tensor[(8, 16, 6), float32] */;
  %369 = greater_equal(%366, %367) /* ty=Tensor[(8, 16, 6), bool] */;
  (%368, %369)
}

def @func_11558() -> Tensor[(8, 16, 6), float64] {
  %370 = @func_9382() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
  %370.0
}

def @func_11752() -> Tensor[(3, 2, 2), bool] {
  @func_10488() /* ty=Tensor[(3, 2, 2), bool] */
}

def @func_6882() -> (Tensor[(8, 16, 6), float64],) {
  %371 = @func_5696() /* ty=Tensor[(8, 16, 6), float64] */;
  (%371,)
}

def @func_10700() -> (Tensor[(8, 16, 6), float64],) {
  %372 = @func_3795() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %373 = %372.0;
  (%373,)
}

def @func_5572() -> (Tensor[(8, 16, 6), float64],) {
  %374 = @func_3528() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(16, 2, 16), float32], Tensor[(512), float32], Tensor[(8, 13, 5), float64], Tensor[(520), float64]) */;
  %375 = %374.0;
  (%375,)
}

def @func_7411() -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float32], Tensor[(8, 16, 6), float32]) {
  %376 = @func_5928() /* ty=Tensor[(8, 16, 6), float64] */;
  %377 = cast(%376, dtype="float32") /* ty=Tensor[(8, 16, 6), float32] */;
  %378 = @func_5112() /* ty=(Tensor[(8, 16, 6), float32], Tensor[(3, 2, 2), float32], Tensor[(60), uint32]) */;
  %379 = @func_5696() /* ty=Tensor[(8, 16, 6), float64] */;
  %380 = acos(%377) /* ty=Tensor[(8, 16, 6), float32] */;
  %381 = %378.0;
  (%379, %380, %381)
}

def @func_812(%var_786: uint16) -> (Tensor[(5, 1), uint16],) {
  %382 = cast(%var_786, dtype="uint16") /* ty=uint16 */;
  %383 = cast(meta[relay.Constant][29] /* ty=Tensor[(5, 1), uint16] */, dtype="uint16") /* ty=Tensor[(5, 1), uint16] */;
  %384 = right_shift(%382, %383) /* ty=Tensor[(5, 1), uint16] */;
  (%384,)
}

def @func_5599() -> (Tensor[(8, 16, 6), float64],) {
  %385 = @func_3629() /* ty=Tensor[(8, 16, 6), float64] */;
  (%385,)
}

def @func_10565() -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) {
  %386 = @func_7584() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(4, 13, 8), float32], Tensor[(416), float32], Tensor[(8, 16, 6), float64]) */;
  %387 = %386.0;
  %388 = @func_6989() /* ty=Tensor[(8, 16, 6), float64] */;
  (%387, %388)
}

def @func_7227() -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) {
  %389 = @func_4129() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
  %390 = @func_6081() /* ty=Tensor[(8, 16, 6), float64] */;
  %391 = %389.1;
  (%390, %391)
}

def @func_3485() -> (Tensor[(8, 16, 6), float64], Tensor[(7, 1, 5), float32], Tensor[(35), float32], Tensor[(12, 9, 15), uint32], Tensor[(108), uint32], Tensor[(1620), uint32], Tensor[(3, 2, 2), bool], Tensor[(60), uint32]) {
  %392 = @func_3283() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %393 = cast(meta[relay.Constant][30] /* ty=Tensor[(35), float32] */, dtype="float32") /* ty=Tensor[(35), float32] */;
  %394 = reshape(%393, newshape=[7, 1, 5]) /* ty=Tensor[(7, 1, 5), float32] */;
  %395 = @func_364(%394) /* ty=(Tensor[(7, 1, 5), float32], Tensor[(7, 1, 5), float32]) */;
  %396 = cast(meta[relay.Constant][31] /* ty=Tensor[(108), uint32] */, dtype="uint32") /* ty=Tensor[(108), uint32] */;
  %397 = cast(meta[relay.Constant][32] /* ty=Tensor[(1620), uint32] */, dtype="uint32") /* ty=Tensor[(1620), uint32] */;
  %398 = reshape(%396, newshape=[12, 9, 1]) /* ty=Tensor[(12, 9, 1), uint32] */;
  %399 = reshape(%397, newshape=[12, 9, 15]) /* ty=Tensor[(12, 9, 15), uint32] */;
  %400 = @func_2250(%398, %399) /* ty=(Tensor[(12, 9, 15), uint32], Tensor[(4, 13, 8), float32], Tensor[(416), float32]) */;
  %401 = cast(meta[relay.Constant][33] /* ty=Tensor[(60), uint32] */, dtype="uint32") /* ty=Tensor[(60), uint32] */;
  %402 = reshape(%401, newshape=[12, 1, 5]) /* ty=Tensor[(12, 1, 5), uint32] */;
  %403 = @func_225(%402) /* ty=(Tensor[(12, 5, 5), uint32], Tensor[(3, 2, 2), bool], Tensor[(3, 2, 2), float32]) */;
  %404 = %392.0;
  %405 = %395.0;
  %406 = %400.0;
  %407 = %403.1;
  (%404, %405, meta[relay.Constant][30] /* ty=Tensor[(35), float32] */, %406, meta[relay.Constant][31] /* ty=Tensor[(108), uint32] */, meta[relay.Constant][32] /* ty=Tensor[(1620), uint32] */, %407, meta[relay.Constant][33] /* ty=Tensor[(60), uint32] */)
}

def @func_7733() -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) {
  %408 = @func_3528() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(16, 2, 16), float32], Tensor[(512), float32], Tensor[(8, 13, 5), float64], Tensor[(520), float64]) */;
  %409 = @func_5503() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %410 = %408.1;
  %411 = %409.0;
  (%410, %411)
}

def @func_10374(%var_10345: Tensor[(5, 7, 13), int32], %var_10346: Tensor[(5, 7, 13), int32]) -> (Tensor[(5, 7, 13), bool], Tensor[(7, 13, 5), float64], Tensor[(6, 44), float32]) {
  %412 = cast(%var_10346, dtype="int32") /* ty=Tensor[(5, 7, 13), int32] */;
  %413 = shape_of(%var_10345, dtype="int32") /* ty=Tensor[(3), int32] */;
  %414 = cast(%var_10345, dtype="int32") /* ty=Tensor[(5, 7, 13), int32] */;
  %415 = dyn.reshape(%412, %413, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %416 = logical_xor(%414, %415) /* ty=Tensor[(5, 7, 13), int32] */;
  %417 = cast(%var_10345, dtype="bool") /* ty=Tensor[(5, 7, 13), bool] */;
  %418 = shape_of(%416, dtype="int32") /* ty=Tensor[(3), int32] */;
  %419 = cast(%416, dtype="bool") /* ty=Tensor[(5, 7, 13), bool] */;
  %420 = dyn.reshape(%417, %418, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %421 = cast(%416, dtype="float32") /* ty=Tensor[(5, 7, 13), float32] */;
  %422 = cast(meta[relay.Constant][34] /* ty=Tensor[(6, 44), float32] */, dtype="float32") /* ty=Tensor[(6, 44), float32] */;
  %423 = reshape(%421, newshape=[7, 13, 5]) /* ty=Tensor[(7, 13, 5), float32] */;
  %424 = reshape(%422, newshape=[264]) /* ty=Tensor[(264), float32] */;
  %425 = @func_3976(%423, %424) /* ty=(Tensor[(7, 13, 5), float64], Tensor[(264), float32], Tensor[(6, 4, 11), float64], Tensor[(6, 4, 11), float64]) */;
  %426 = greater_equal(%419, %420) /* ty=Tensor[(5, 7, 13), bool] */;
  %427 = %425.0;
  (%426, %427, meta[relay.Constant][34] /* ty=Tensor[(6, 44), float32] */)
}

def @func_6723(%var_6658: Tensor[(10, 52), float64], %var_6676: Tensor[(36), float64]) -> (Tensor[(8, 16, 6), float64], Tensor[(3, 2, 2), float64], Tensor[(12), float64], Tensor[(5, 1), uint16], uint16, Tensor[(520), float64], Tensor[(8, 16, 6), float64], Tensor[(36), float64], Tensor[(8, 16, 6), float64], Tensor[(6, 2, 3), float64], Tensor[(60), uint32], Tensor[(10, 52), float32]) {
  %428 = @func_4552() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %429 = cast(meta[relay.Constant][35] /* ty=Tensor[(12), float64] */, dtype="float64") /* ty=Tensor[(12), float64] */;
  %430 = reshape(%429, newshape=[3, 2, 2]) /* ty=Tensor[(3, 2, 2), float64] */;
  %431 = @func_115(%430) /* ty=(Tensor[(3, 2, 2), float64],) */;
  %432 = cast(meta[relay.Constant][36] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %433 = reshape(%432, newshape=[]) /* ty=uint16 */;
  %434 = @func_812(%433) /* ty=(Tensor[(5, 1), uint16],) */;
  %435 = cast(%var_6658, dtype="float64") /* ty=Tensor[(10, 52), float64] */;
  %436 = reshape(%435, newshape=[520]) /* ty=Tensor[(520), float64] */;
  %437 = @func_6359(%436) /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 13, 5), float64], Tensor[(520), float64]) */;
  %438 = %437.2;
  %439 = cast(%438, dtype="float32") /* ty=Tensor[(520), float32] */;
  %440 = reshape(%439, newshape=[13, 4, 10]) /* ty=Tensor[(13, 4, 10), float32] */;
  %441 = @func_4015(%440) /* ty=(Tensor[(13, 4, 10), float32], Tensor[(6, 4, 11), float64], Tensor[(455), float32], Tensor[(264), float32], Tensor[(8, 16, 6), float64]) */;
  %442 = cast(%var_6676, dtype="float64") /* ty=Tensor[(36), float64] */;
  %443 = reshape(%442, newshape=[6, 2, 3]) /* ty=Tensor[(6, 2, 3), float64] */;
  %444 = @func_6253(%443) /* ty=Tensor[(6, 2, 3), float64] */;
  %445 = cast(%444, dtype="float64") /* ty=Tensor[(6, 2, 3), float64] */;
  %446 = @func_5112() /* ty=(Tensor[(8, 16, 6), float32], Tensor[(3, 2, 2), float32], Tensor[(60), uint32]) */;
  %447 = cast(%var_6658, dtype="float32") /* ty=Tensor[(10, 52), float32] */;
  %448 = %428.0;
  %449 = %431.0;
  %450 = %434.0;
  %451 = %441.4;
  %452 = @func_4204() /* ty=Tensor[(8, 16, 6), float64] */;
  %453 = atanh(%445) /* ty=Tensor[(6, 2, 3), float64] */;
  %454 = %446.2;
  %455 = sqrt(%447) /* ty=Tensor[(10, 52), float32] */;
  (%448, %449, meta[relay.Constant][35] /* ty=Tensor[(12), float64] */, %450, meta[relay.Constant][36] /* ty=uint16 */, %438, %451, %var_6676, %452, %453, %454, %455)
}

def @func_11302() -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) {
  %456 = @func_10984() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %457 = @func_4026() /* ty=Tensor[(8, 16, 6), float64] */;
  %458 = %456.0;
  (%457, %458)
}

def @func_3629() -> Tensor[(8, 16, 6), float64] {
  %459 = @func_3283() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %459.0
}

def @func_4552() -> (Tensor[(8, 16, 6), float64],) {
  %460 = @func_4129() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
  %461 = %460.1;
  (%461,)
}

def @func_5177() -> (Tensor[(8, 16, 6), float64],) {
  %462 = @func_3707() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
  %463 = %462.1;
  (%463,)
}

def @func_9684() -> (Tensor[(3, 2, 2), bool],) {
  %464 = @func_3485() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(7, 1, 5), float32], Tensor[(35), float32], Tensor[(12, 9, 15), uint32], Tensor[(108), uint32], Tensor[(1620), uint32], Tensor[(3, 2, 2), bool], Tensor[(60), uint32]) */;
  %465 = %464.6;
  (%465,)
}

def @func_4678(%var_4672: Tensor[(12), float64]) -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(3, 2, 2), float64], Tensor[(12), float64]) {
  %466 = @func_3795() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %467 = cast(%var_4672, dtype="float64") /* ty=Tensor[(12), float64] */;
  %468 = reshape(%467, newshape=[3, 2, 2]) /* ty=Tensor[(3, 2, 2), float64] */;
  %469 = @func_115(%468) /* ty=(Tensor[(3, 2, 2), float64],) */;
  %470 = %466.0;
  %471 = @func_3629() /* ty=Tensor[(8, 16, 6), float64] */;
  %472 = %469.0;
  (%470, %471, %472, %var_4672)
}

def @func_11595() -> Tensor[(294), float64] {
  %473 = @func_9010() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(294), float64], Tensor[(8, 16, 6), float64]) */;
  %473.2
}

def @func_9545() -> Tensor[(8, 16, 6), float64] {
  %474 = @func_9435() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %474.0
}

def @func_5928() -> Tensor[(8, 16, 6), float64] {
  %475 = @func_5333() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %475.0
}

def @func_7976(%var_7941: Tensor[(15, 9, 13), float32]) -> Tensor[(15, 9, 13), bool] {
  %476 = cast(meta[relay.Constant][37] /* ty=Tensor[(15, 9, 13), float32] */, dtype="bool") /* ty=Tensor[(15, 9, 13), bool] */;
  %477 = shape_of(%var_7941, dtype="int32") /* ty=Tensor[(3), int32] */;
  %478 = cast(%var_7941, dtype="bool") /* ty=Tensor[(15, 9, 13), bool] */;
  %479 = dyn.reshape(%476, %477, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%478, %479) /* ty=Tensor[(15, 9, 13), bool] */
}

def @func_4777() -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) {
  %480 = @func_3707() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
  %481 = @func_4552() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %482 = %481.0;
  %483 = cast(%482, dtype="float32") /* ty=Tensor[(8, 16, 6), float32] */;
  %484 = sin(%483) /* ty=Tensor[(8, 16, 6), float32] */;
  %485 = cast(%484, dtype="float64") /* ty=Tensor[(8, 16, 6), float64] */;
  %486 = rsqrt(%485) /* ty=Tensor[(8, 16, 6), float64] */;
  %487 = cast(%484, dtype="float32") /* ty=Tensor[(8, 16, 6), float32] */;
  %488 = shape_of(%486, dtype="int32") /* ty=Tensor[(3), int32] */;
  %489 = cast(%486, dtype="float32") /* ty=Tensor[(8, 16, 6), float32] */;
  %490 = dyn.reshape(%487, %488, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %491 = add(%489, %490) /* ty=Tensor[(8, 16, 6), float32] */;
  %492 = cast(%482, dtype="uint32") /* ty=Tensor[(8, 16, 6), uint32] */;
  %493 = shape_of(%491, dtype="int32") /* ty=Tensor[(3), int32] */;
  %494 = cast(%491, dtype="uint32") /* ty=Tensor[(8, 16, 6), uint32] */;
  %495 = dyn.reshape(%492, %493, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %496 = bitwise_or(%494, %495) /* ty=Tensor[(8, 16, 6), uint32] */;
  %497 = cast(%491, dtype="uint8") /* ty=Tensor[(8, 16, 6), uint8] */;
  %498 = shape_of(%484, dtype="int32") /* ty=Tensor[(3), int32] */;
  %499 = cast(%484, dtype="uint8") /* ty=Tensor[(8, 16, 6), uint8] */;
  %500 = dyn.reshape(%497, %498, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %501 = subtract(%499, %500) /* ty=Tensor[(8, 16, 6), uint8] */;
  %502 = cast(%501, dtype="float64") /* ty=Tensor[(8, 16, 6), float64] */;
  %503 = shape_of(%496, dtype="int32") /* ty=Tensor[(3), int32] */;
  %504 = cast(%496, dtype="float64") /* ty=Tensor[(8, 16, 6), float64] */;
  %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %506 = %480.1;
  %507 = divide(%504, %505) /* ty=Tensor[(8, 16, 6), float64] */;
  (%506, %507)
}

def @func_7205() -> (Tensor[(8, 16, 6), float64],) {
  %508 = @func_4129() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
  %509 = %508.1;
  (%509,)
}

def @func_8448(%var_8437: float64) -> Tensor[(3, 10, 2), bool] {
  %510 = cast(%var_8437, dtype="bool") /* ty=bool */;
  %511 = cast(meta[relay.Constant][38] /* ty=Tensor[(3, 10, 2), float64] */, dtype="bool") /* ty=Tensor[(3, 10, 2), bool] */;
  not_equal(%510, %511) /* ty=Tensor[(3, 10, 2), bool] */
}

def @func_11182(%var_11160: Tensor[(15, 5, 3), float64]) -> Tensor[(15, 5, 3), float64] {
  %512 = cast(%var_11160, dtype="float64") /* ty=Tensor[(15, 5, 3), float64] */;
  %513 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(15, 5, 3), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %514 = cast(meta[relay.Constant][39] /* ty=Tensor[(15, 5, 3), float64] */, dtype="float64") /* ty=Tensor[(15, 5, 3), float64] */;
  %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%514, %515) /* ty=Tensor[(15, 5, 3), float64] */
}

def @func_10141() -> (Tensor[(8, 16, 6), float64],) {
  %516 = @func_6065() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %517 = %516.0;
  (%517,)
}

def @func_7067() -> (Tensor[(8, 16, 6), float64], Tensor[(520), float64]) {
  %518 = @func_6279() /* ty=(Tensor[(520), float64],) */;
  %519 = @func_3765() /* ty=Tensor[(8, 16, 6), float64] */;
  %520 = %518.0;
  (%519, %520)
}

def @func_8406() -> (Tensor[(8, 16, 6), float64],) {
  %521 = @func_5213() /* ty=Tensor[(8, 16, 6), float64] */;
  (%521,)
}

def @func_6253(%var_6248: Tensor[(6, 2, 3), float64]) -> Tensor[(6, 2, 3), float64] {
  %522 = cast(meta[relay.Constant][40] /* ty=Tensor[(6, 2, 3), float64] */, dtype="float64") /* ty=Tensor[(6, 2, 3), float64] */;
  %523 = shape_of(%var_6248, dtype="int32") /* ty=Tensor[(3), int32] */;
  %524 = cast(%var_6248, dtype="float64") /* ty=Tensor[(6, 2, 3), float64] */;
  %525 = dyn.reshape(%522, %523, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%524, %525) /* ty=Tensor[(6, 2, 3), float64] */
}

def @func_4606(%var_4579: Tensor[(8, 16, 6), float64], %var_4603: Tensor[(540, 3), uint32]) -> (Tensor[(8, 16, 6), bool], Tensor[(16, 2, 16), float64], Tensor[(540, 3), uint32], Tensor[(135), float64]) {
  %526 = @func_3795() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %527 = %526.0;
  %528 = cast(%var_4579, dtype="bool") /* ty=Tensor[(8, 16, 6), bool] */;
  %529 = shape_of(%527, dtype="int32") /* ty=Tensor[(3), int32] */;
  %530 = cast(%527, dtype="bool") /* ty=Tensor[(8, 16, 6), bool] */;
  %531 = dyn.reshape(%528, %529, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %532 = cast(%var_4603, dtype="uint32") /* ty=Tensor[(540, 3), uint32] */;
  %533 = cast(meta[relay.Constant][41] /* ty=Tensor[(135), float64] */, dtype="float64") /* ty=Tensor[(135), float64] */;
  %534 = reshape(%532, newshape=[1620]) /* ty=Tensor[(1620), uint32] */;
  %535 = reshape(%533, newshape=[135]) /* ty=Tensor[(135), float64] */;
  %536 = @func_3679(%534, %535) /* ty=(Tensor[(16, 2, 16), float64], Tensor[(4, 13, 8), float32], Tensor[(108), uint32], Tensor[(1620), uint32], Tensor[(3, 20), uint32], Tensor[(135), float64], Tensor[(3, 20), uint32]) */;
  %537 = less_equal(%530, %531) /* ty=Tensor[(8, 16, 6), bool] */;
  %538 = %536.0;
  (%537, %538, %var_4603, meta[relay.Constant][41] /* ty=Tensor[(135), float64] */)
}

def @func_4502(%var_4495: Tensor[(3, 10, 8), float64]) -> Tensor[(3, 10, 8), float64] {
  %539 = cast(%var_4495, dtype="float64") /* ty=Tensor[(3, 10, 8), float64] */;
  %540 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(3, 10, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %541 = cast(meta[relay.Constant][42] /* ty=Tensor[(3, 10, 8), float64] */, dtype="float64") /* ty=Tensor[(3, 10, 8), float64] */;
  %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%541, %542) /* ty=Tensor[(3, 10, 8), float64] */
}

def @func_8492(%var_8482: Tensor[(520), float32]) -> (Tensor[(8, 16, 6), float64], Tensor[(520), float32], Tensor[(3, 20), float32]) {
  %543 = cast(%var_8482, dtype="float32") /* ty=Tensor[(520), float32] */;
  %544 = reshape(%543, newshape=[13, 4, 10]) /* ty=Tensor[(13, 4, 10), float32] */;
  %545 = @func_4015(%544) /* ty=(Tensor[(13, 4, 10), float32], Tensor[(6, 4, 11), float64], Tensor[(455), float32], Tensor[(264), float32], Tensor[(8, 16, 6), float64]) */;
  %546 = @func_5949() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(3, 2, 2), bool], Tensor[(3, 20), uint32]) */;
  %547 = %546.2;
  %548 = cast(meta[relay.Constant][43] /* ty=Tensor[(3, 20), uint32] */, dtype="bool") /* ty=Tensor[(3, 20), bool] */;
  %549 = shape_of(%547, dtype="int32") /* ty=Tensor[(2), int32] */;
  %550 = cast(%547, dtype="bool") /* ty=Tensor[(3, 20), bool] */;
  %551 = dyn.reshape(%548, %549, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %552 = logical_and(%550, %551) /* ty=Tensor[(3, 20), bool] */;
  %553 = cast(%552, dtype="float32") /* ty=Tensor[(3, 20), float32] */;
  %554 = %545.4;
  %555 = cosh(%553) /* ty=Tensor[(3, 20), float32] */;
  (%554, %var_8482, %555)
}

def @func_4964() -> (Tensor[(8, 16, 6), float64], Tensor[(12, 5, 5), uint32], Tensor[(60), uint32]) {
  %556 = cast(meta[relay.Constant][44] /* ty=Tensor[(60), uint32] */, dtype="uint32") /* ty=Tensor[(60), uint32] */;
  %557 = reshape(%556, newshape=[12, 1, 5]) /* ty=Tensor[(12, 1, 5), uint32] */;
  %558 = @func_225(%557) /* ty=(Tensor[(12, 5, 5), uint32], Tensor[(3, 2, 2), bool], Tensor[(3, 2, 2), float32]) */;
  %559 = @func_4026() /* ty=Tensor[(8, 16, 6), float64] */;
  %560 = %558.0;
  (%559, %560, meta[relay.Constant][44] /* ty=Tensor[(60), uint32] */)
}

def @func_339(%var_324: Tensor[(6, 4, 11), float32]) -> (Tensor[(6, 4, 11), float64],) {
  %561 = cast(%var_324, dtype="float32") /* ty=Tensor[(6, 4, 11), float32] */;
  %562 = exp(%561) /* ty=Tensor[(6, 4, 11), float32] */;
  %563 = cast(%562, dtype="float64") /* ty=Tensor[(6, 4, 11), float64] */;
  %564 = asinh(%563) /* ty=Tensor[(6, 4, 11), float64] */;
  (%564,)
}

def @func_2412(%var_2386: Tensor[(8, 13, 5), float64], %var_2387: Tensor[(8, 13, 5), float64]) -> (Tensor[(8, 13, 5), float64], Tensor[(8, 13, 5), float32], Tensor[(8, 13, 5), float64]) {
  %565 = cast(%var_2387, dtype="float64") /* ty=Tensor[(8, 13, 5), float64] */;
  %566 = shape_of(%var_2386, dtype="int32") /* ty=Tensor[(3), int32] */;
  %567 = cast(%var_2386, dtype="float64") /* ty=Tensor[(8, 13, 5), float64] */;
  %568 = dyn.reshape(%565, %566, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %569 = cast(%var_2387, dtype="float32") /* ty=Tensor[(8, 13, 5), float32] */;
  %570 = cast(%var_2387, dtype="float64") /* ty=Tensor[(8, 13, 5), float64] */;
  %571 = mod(%567, %568) /* ty=Tensor[(8, 13, 5), float64] */;
  %572 = atanh(%569) /* ty=Tensor[(8, 13, 5), float32] */;
  %573 = cos(%570) /* ty=Tensor[(8, 13, 5), float64] */;
  (%571, %572, %573)
}

def @func_10048() -> Tensor[(8, 16, 6), float64] {
  %574 = @func_7584() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(4, 13, 8), float32], Tensor[(416), float32], Tensor[(8, 16, 6), float64]) */;
  %574.3
}

def @func_9396(%var_9392: Tensor[(11, 3, 5), float64]) -> Tensor[(11, 3, 5), float64] {
  %575 = cast(%var_9392, dtype="float64") /* ty=Tensor[(11, 3, 5), float64] */;
  sin(%575) /* ty=Tensor[(11, 3, 5), float64] */
}

def @func_4026() -> Tensor[(8, 16, 6), float64] {
  %576 = @func_3528() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(16, 2, 16), float32], Tensor[(512), float32], Tensor[(8, 13, 5), float64], Tensor[(520), float64]) */;
  %576.1
}

def @func_6929(%var_6914: Tensor[(13, 16, 13), uint32], %var_6915: Tensor[(13, 16, 13), uint32]) -> (Tensor[(13, 16, 13), float64],) {
  %577 = cast(%var_6915, dtype="bool") /* ty=Tensor[(13, 16, 13), bool] */;
  %578 = shape_of(%var_6914, dtype="int32") /* ty=Tensor[(3), int32] */;
  %579 = cast(%var_6914, dtype="bool") /* ty=Tensor[(13, 16, 13), bool] */;
  %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %581 = equal(%579, %580) /* ty=Tensor[(13, 16, 13), bool] */;
  %582 = cast(%581, dtype="float64") /* ty=Tensor[(13, 16, 13), float64] */;
  %583 = log10(%582) /* ty=Tensor[(13, 16, 13), float64] */;
  (%583,)
}

def @func_4082() -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) {
  %584 = @func_3795() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %585 = @func_3795() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %586 = %584.0;
  %587 = %585.0;
  (%586, %587)
}

def @func_9435() -> (Tensor[(8, 16, 6), float64],) {
  %588 = @func_4129() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
  %589 = %588.1;
  (%589,)
}

def @func_10788() -> Tensor[(8, 16, 6), float64] {
  %590 = @func_5572() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %590.0
}

def @func_225(%var_178: Tensor[(12, 1, 5), uint32]) -> (Tensor[(12, 5, 5), uint32], Tensor[(3, 2, 2), bool], Tensor[(3, 2, 2), float32]) {
  %591 = cast(%var_178, dtype="uint32") /* ty=Tensor[(12, 1, 5), uint32] */;
  %592 = cast(meta[relay.Constant][45] /* ty=Tensor[(12, 5, 5), uint32] */, dtype="uint32") /* ty=Tensor[(12, 5, 5), uint32] */;
  %593 = cast(meta[relay.Constant][46] /* ty=Tensor[(12), float64] */, dtype="float64") /* ty=Tensor[(12), float64] */;
  %594 = reshape(%593, newshape=[3, 2, 2]) /* ty=Tensor[(3, 2, 2), float64] */;
  %595 = @func_115(%594) /* ty=(Tensor[(3, 2, 2), float64],) */;
  %596 = %595.0;
  %597 = cast(meta[relay.Constant][46] /* ty=Tensor[(12), float64] */, dtype="bool") /* ty=Tensor[(12), bool] */;
  %598 = shape_of(%596, dtype="int32") /* ty=Tensor[(3), int32] */;
  %599 = cast(%596, dtype="bool") /* ty=Tensor[(3, 2, 2), bool] */;
  %600 = dyn.reshape(%597, %598, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %601 = cast(%596, dtype="float32") /* ty=Tensor[(3, 2, 2), float32] */;
  %602 = logical_xor(%591, %592) /* ty=Tensor[(12, 5, 5), uint32] */;
  %603 = logical_and(%599, %600) /* ty=Tensor[(3, 2, 2), bool] */;
  %604 = sin(%601) /* ty=Tensor[(3, 2, 2), float32] */;
  (%602, %603, %604)
}

def @func_1274(%var_1269: Tensor[(4, 13, 8), float32]) -> Tensor[(4, 13, 8), float32] {
  %605 = cast(%var_1269, dtype="float32") /* ty=Tensor[(4, 13, 8), float32] */;
  %606 = acosh(%605) /* ty=Tensor[(4, 13, 8), float32] */;
  %607 = cast(%606, dtype="float32") /* ty=Tensor[(4, 13, 8), float32] */;
  atan(%607) /* ty=Tensor[(4, 13, 8), float32] */
}

def @func_11156() -> (Tensor[(520), float64],) {
  %608 = @func_7067() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(520), float64]) */;
  %609 = %608.1;
  (%609,)
}

def @func_6295() -> Tensor[(8, 16, 6), float64] {
  %610 = @func_4552() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %610.0
}

def @func_5333() -> (Tensor[(8, 16, 6), float64],) {
  %611 = @func_4777() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
  %612 = %611.0;
  (%612,)
}

def @main(%var_11894: Tensor[(13, 16, 5), float64], %var_11907: Tensor[(1, 455), float32], %var_11908: Tensor[(66, 4), float32], %var_11934: int16, %var_11940: Tensor[(416), float32]) -> (Tensor[(6, 4, 11), float64], Tensor[(1, 455), float32], Tensor[(66, 4), float32], Tensor[(8, 16, 6), float64], Tensor[(7, 16, 1), bool], Tensor[(112), int16], Tensor[(416), float32], Tensor[(416), float32], Tensor[(8, 16, 6), float64], Tensor[(13, 16, 5), bool], Tensor[(8, 16, 6), float64], Tensor[(108), uint32], Tensor[(13, 16, 5), float64]) {
  %613 = cast(%var_11907, dtype="float32") /* ty=Tensor[(1, 455), float32] */;
  %614 = cast(%var_11908, dtype="float32") /* ty=Tensor[(66, 4), float32] */;
  %615 = reshape(%613, newshape=[7, 13, 5]) /* ty=Tensor[(7, 13, 5), float32] */;
  %616 = reshape(%614, newshape=[264]) /* ty=Tensor[(264), float32] */;
  %617 = @func_3976(%615, %616) /* ty=(Tensor[(7, 13, 5), float64], Tensor[(264), float32], Tensor[(6, 4, 11), float64], Tensor[(6, 4, 11), float64]) */;
  %618 = cast(%var_11934, dtype="int16") /* ty=int16 */;
  %619 = cast(meta[relay.Constant][47] /* ty=Tensor[(112), int16] */, dtype="int16") /* ty=Tensor[(112), int16] */;
  %620 = reshape(%618, newshape=[]) /* ty=int16 */;
  %621 = reshape(%619, newshape=[7, 16, 1]) /* ty=Tensor[(7, 16, 1), int16] */;
  %622 = @func_11787(%620, %621) /* ty=(Tensor[(7, 16, 1), bool], Tensor[(8, 16, 6), float64]) */;
  %623 = cast(%var_11940, dtype="float32") /* ty=Tensor[(416), float32] */;
  %624 = reshape(%623, newshape=[416]) /* ty=Tensor[(416), float32] */;
  %625 = @func_7822(%624) /* ty=(Tensor[(8, 16, 6), float64], Tensor[(3, 10, 8), float64], Tensor[(240), float64], Tensor[(4, 13, 8), float32], Tensor[(416), float32]) */;
  %626 = @func_7205() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %627 = cast(%var_11894, dtype="float64") /* ty=Tensor[(13, 16, 5), float64] */;
  %628 = sigmoid(%627) /* ty=Tensor[(13, 16, 5), float64] */;
  %629 = cast(%628, dtype="bool") /* ty=Tensor[(13, 16, 5), bool] */;
  %630 = cast(%var_11934, dtype="bool") /* ty=bool */;
  %631 = cast(meta[relay.Constant][48] /* ty=Tensor[(108), uint32] */, dtype="uint32") /* ty=Tensor[(108), uint32] */;
  %632 = reshape(%631, newshape=[108]) /* ty=Tensor[(108), uint32] */;
  %633 = @func_10914(%632) /* ty=(Tensor[(8, 16, 6), float64], Tensor[(416), float32], Tensor[(108), uint32], Tensor[(18, 90), uint32], Tensor[(3, 20), uint32], Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
  %634 = cast(%628, dtype="float32") /* ty=Tensor[(13, 16, 5), float32] */;
  %635 = asinh(%634) /* ty=Tensor[(13, 16, 5), float32] */;
  %636 = cast(%635, dtype="float64") /* ty=Tensor[(13, 16, 5), float64] */;
  %637 = asin(%636) /* ty=Tensor[(13, 16, 5), float64] */;
  %638 = cast(%637, dtype="float64") /* ty=Tensor[(13, 16, 5), float64] */;
  %639 = %617.2;
  %640 = @func_8288() /* ty=Tensor[(8, 16, 6), float64] */;
  %641 = %622.0;
  %642 = %625.4;
  %643 = %626.0;
  %644 = less_equal(%629, %630) /* ty=Tensor[(13, 16, 5), bool] */;
  %645 = %633.6;
  %646 = sqrt(%638) /* ty=Tensor[(13, 16, 5), float64] */;
  (%639, %var_11907, %var_11908, %640, %641, meta[relay.Constant][47] /* ty=Tensor[(112), int16] */, %642, %var_11940, %643, %644, %645, meta[relay.Constant][48] /* ty=Tensor[(108), uint32] */, %646)
}

def @func_7036() -> Tensor[(8, 16, 6), float64] {
  @func_4026() /* ty=Tensor[(8, 16, 6), float64] */
}

def @func_9299() -> (Tensor[(8, 16, 6), float64], Tensor[(6, 4, 11), float64], Tensor[(264), float32], Tensor[(8, 16, 6), float64]) {
  %647 = @func_7102() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %648 = cast(meta[relay.Constant][49] /* ty=Tensor[(264), float32] */, dtype="float32") /* ty=Tensor[(264), float32] */;
  %649 = reshape(%648, newshape=[6, 4, 11]) /* ty=Tensor[(6, 4, 11), float32] */;
  %650 = @func_339(%649) /* ty=(Tensor[(6, 4, 11), float64],) */;
  %651 = %647.0;
  %652 = %650.0;
  %653 = @func_3765() /* ty=Tensor[(8, 16, 6), float64] */;
  (%651, %652, meta[relay.Constant][49] /* ty=Tensor[(264), float32] */, %653)
}

def @func_7322(%var_7284: Tensor[(15, 1, 2), float32], %var_7299: Tensor[(405), float32], %var_7318: Tensor[(2704), uint32]) -> (Tensor[(15, 1, 2), float32], Tensor[(9, 5, 9), float32], Tensor[(405), float32], Tensor[(13, 16, 13), float64], Tensor[(2704), uint32]) {
  %654 = cast(%var_7284, dtype="float32") /* ty=Tensor[(15, 1, 2), float32] */;
  %655 = cast(%var_7299, dtype="float32") /* ty=Tensor[(405), float32] */;
  %656 = reshape(%655, newshape=[9, 5, 9]) /* ty=Tensor[(9, 5, 9), float32] */;
  %657 = cast(%var_7318, dtype="uint32") /* ty=Tensor[(2704), uint32] */;
  %658 = cast(%var_7318, dtype="uint32") /* ty=Tensor[(2704), uint32] */;
  %659 = reshape(%657, newshape=[13, 16, 13]) /* ty=Tensor[(13, 16, 13), uint32] */;
  %660 = reshape(%658, newshape=[13, 16, 13]) /* ty=Tensor[(13, 16, 13), uint32] */;
  %661 = @func_6929(%659, %660) /* ty=(Tensor[(13, 16, 13), float64],) */;
  %662 = atan(%654) /* ty=Tensor[(15, 1, 2), float32] */;
  %663 = @func_2141(%656) /* ty=Tensor[(9, 5, 9), float32] */;
  %664 = %661.0;
  (%662, %663, %var_7299, %664, %var_7318)
}

def @func_6279() -> (Tensor[(520), float64],) {
  %665 = @func_6152() /* ty=(Tensor[(520), float64],) */;
  %666 = %665.0;
  (%666,)
}

def @func_9834(%var_9787: Tensor[(6, 9, 10), uint8], %var_9795: Tensor[(520), float32]) -> (Tensor[(6, 9, 10), uint8], Tensor[(6, 4, 11), float64], Tensor[(520), float32]) {
  %667 = cast(%var_9787, dtype="uint8") /* ty=Tensor[(6, 9, 10), uint8] */;
  %668 = shape_of(meta[relay.Constant][50] /* ty=Tensor[(6, 9, 10), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %669 = cast(meta[relay.Constant][50] /* ty=Tensor[(6, 9, 10), uint8] */, dtype="uint8") /* ty=Tensor[(6, 9, 10), uint8] */;
  %670 = dyn.reshape(%667, %668, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %671 = cast(%var_9795, dtype="float32") /* ty=Tensor[(520), float32] */;
  %672 = reshape(%671, newshape=[13, 4, 10]) /* ty=Tensor[(13, 4, 10), float32] */;
  %673 = @func_4015(%672) /* ty=(Tensor[(13, 4, 10), float32], Tensor[(6, 4, 11), float64], Tensor[(455), float32], Tensor[(264), float32], Tensor[(8, 16, 6), float64]) */;
  %674 = maximum(%669, %670) /* ty=Tensor[(6, 9, 10), uint8] */;
  %675 = %673.1;
  (%674, %675, %var_9795)
}

def @func_6810() -> (Tensor[(8, 16, 6), float32],) {
  %676 = @func_4026() /* ty=Tensor[(8, 16, 6), float64] */;
  %677 = cast(%676, dtype="float32") /* ty=Tensor[(8, 16, 6), float32] */;
  %678 = exp(%677) /* ty=Tensor[(8, 16, 6), float32] */;
  (%678,)
}

def @func_6855() -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) {
  %679 = @func_4129() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
  %680 = @func_4806() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %681 = %679.1;
  %682 = %680.0;
  (%681, %682)
}

def @func_4903(%var_4850: Tensor[(768), float64], %var_4851: Tensor[(1, 1620), uint32], %var_4853: Tensor[(11, 1620), uint32], %var_4869: Tensor[(11, 1620), float32], %var_4886: Tensor[(108), uint32]) -> (Tensor[(135), float64], Tensor[(135), float64], Tensor[(768), float64], Tensor[(7, 1, 5), float32], Tensor[(11, 1620), uint64], Tensor[(11, 1620), uint8], Tensor[(416), float32], Tensor[(108), uint32], Tensor[(35, 1), float32]) {
  %683 = @func_4265() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(108), uint32], Tensor[(1620), uint32], Tensor[(135), float64]) */;
  %684 = cast(%var_4850, dtype="float64") /* ty=Tensor[(768), float64] */;
  %685 = cast(%var_4851, dtype="uint32") /* ty=Tensor[(1, 1620), uint32] */;
  %686 = reshape(%684, newshape=[8, 16, 6]) /* ty=Tensor[(8, 16, 6), float64] */;
  %687 = reshape(%685, newshape=[540, 3]) /* ty=Tensor[(540, 3), uint32] */;
  %688 = @func_4606(%686, %687) /* ty=(Tensor[(8, 16, 6), bool], Tensor[(16, 2, 16), float64], Tensor[(540, 3), uint32], Tensor[(135), float64]) */;
  %689 = cast(meta[relay.Constant][51] /* ty=Tensor[(35, 1), float32] */, dtype="float32") /* ty=Tensor[(35, 1), float32] */;
  %690 = reshape(%689, newshape=[7, 1, 5]) /* ty=Tensor[(7, 1, 5), float32] */;
  %691 = @func_364(%690) /* ty=(Tensor[(7, 1, 5), float32], Tensor[(7, 1, 5), float32]) */;
  %692 = cast(%var_4851, dtype="bool") /* ty=Tensor[(1, 1620), bool] */;
  %693 = cast(%var_4853, dtype="bool") /* ty=Tensor[(11, 1620), bool] */;
  %694 = logical_and(%692, %693) /* ty=Tensor[(11, 1620), bool] */;
  %695 = cast(%694, dtype="float32") /* ty=Tensor[(11, 1620), float32] */;
  %696 = exp(%695) /* ty=Tensor[(11, 1620), float32] */;
  %697 = cast(%694, dtype="uint64") /* ty=Tensor[(11, 1620), uint64] */;
  %698 = shape_of(%696, dtype="int32") /* ty=Tensor[(2), int32] */;
  %699 = cast(%696, dtype="uint64") /* ty=Tensor[(11, 1620), uint64] */;
  %700 = dyn.reshape(%697, %698, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %701 = cast(%var_4869, dtype="float64") /* ty=Tensor[(11, 1620), float64] */;
  %702 = shape_of(%696, dtype="int32") /* ty=Tensor[(2), int32] */;
  %703 = cast(%696, dtype="float64") /* ty=Tensor[(11, 1620), float64] */;
  %704 = dyn.reshape(%701, %702, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %705 = floor_divide(%703, %704) /* ty=Tensor[(11, 1620), float64] */;
  %706 = cast(%696, dtype="uint8") /* ty=Tensor[(11, 1620), uint8] */;
  %707 = shape_of(%705, dtype="int32") /* ty=Tensor[(2), int32] */;
  %708 = cast(%705, dtype="uint8") /* ty=Tensor[(11, 1620), uint8] */;
  %709 = dyn.reshape(%706, %707, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %710 = cast(%var_4886, dtype="uint32") /* ty=Tensor[(108), uint32] */;
  %711 = cast(%var_4851, dtype="uint32") /* ty=Tensor[(1, 1620), uint32] */;
  %712 = reshape(%710, newshape=[12, 9, 1]) /* ty=Tensor[(12, 9, 1), uint32] */;
  %713 = reshape(%711, newshape=[12, 9, 15]) /* ty=Tensor[(12, 9, 15), uint32] */;
  %714 = @func_2250(%712, %713) /* ty=(Tensor[(12, 9, 15), uint32], Tensor[(4, 13, 8), float32], Tensor[(416), float32]) */;
  %715 = cast(meta[relay.Constant][51] /* ty=Tensor[(35, 1), float32] */, dtype="float32") /* ty=Tensor[(35, 1), float32] */;
  %716 = %683.3;
  %717 = %688.3;
  %718 = %691.0;
  %719 = maximum(%699, %700) /* ty=Tensor[(11, 1620), uint64] */;
  %720 = bitwise_or(%708, %709) /* ty=Tensor[(11, 1620), uint8] */;
  %721 = %714.2;
  %722 = acos(%715) /* ty=Tensor[(35, 1), float32] */;
  (%716, %717, %var_4850, %718, %719, %720, %721, %var_4886, %722)
}

def @func_7780(%var_7776: uint16) -> (Tensor[(520), float64], Tensor[(5, 1), uint16], uint16) {
  %723 = cast(%var_7776, dtype="uint16") /* ty=uint16 */;
  %724 = reshape(%723, newshape=[]) /* ty=uint16 */;
  %725 = @func_812(%724) /* ty=(Tensor[(5, 1), uint16],) */;
  %726 = @func_7181() /* ty=Tensor[(520), float64] */;
  %727 = %725.0;
  (%726, %727, %var_7776)
}

def @func_11223() -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(520), float64], Tensor[(8, 16, 6), float64]) {
  %728 = cast(meta[relay.Constant][52] /* ty=Tensor[(520), float64] */, dtype="float64") /* ty=Tensor[(520), float64] */;
  %729 = reshape(%728, newshape=[520]) /* ty=Tensor[(520), float64] */;
  %730 = @func_6359(%729) /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 13, 5), float64], Tensor[(520), float64]) */;
  %731 = @func_4265() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(108), uint32], Tensor[(1620), uint32], Tensor[(135), float64]) */;
  %732 = @func_6295() /* ty=Tensor[(8, 16, 6), float64] */;
  %733 = %730.0;
  %734 = %731.0;
  (%732, %733, meta[relay.Constant][52] /* ty=Tensor[(520), float64] */, %734)
}

def @func_9569() -> (Tensor[(520), float64], Tensor[(8, 16, 6), float64]) {
  %735 = @func_9435() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %736 = @func_7181() /* ty=Tensor[(520), float64] */;
  %737 = %735.0;
  (%736, %737)
}

def @func_5112() -> (Tensor[(8, 16, 6), float32], Tensor[(3, 2, 2), float32], Tensor[(60), uint32]) {
  %738 = @func_4777() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
  %739 = %738.1;
  %740 = cast(%739, dtype="float32") /* ty=Tensor[(8, 16, 6), float32] */;
  %741 = cast(meta[relay.Constant][53] /* ty=Tensor[(60), uint32] */, dtype="uint32") /* ty=Tensor[(60), uint32] */;
  %742 = reshape(%741, newshape=[12, 1, 5]) /* ty=Tensor[(12, 1, 5), uint32] */;
  %743 = @func_225(%742) /* ty=(Tensor[(12, 5, 5), uint32], Tensor[(3, 2, 2), bool], Tensor[(3, 2, 2), float32]) */;
  %744 = cosh(%740) /* ty=Tensor[(8, 16, 6), float32] */;
  %745 = %743.2;
  (%744, %745, meta[relay.Constant][53] /* ty=Tensor[(60), uint32] */)
}

def @func_6500(%var_6481: Tensor[(13, 13, 12), float64], %var_6482: Tensor[(13, 13, 12), float64]) -> (Tensor[(13, 13, 12), float64], Tensor[(8, 16, 6), float64]) {
  %746 = cast(%var_6482, dtype="float64") /* ty=Tensor[(13, 13, 12), float64] */;
  %747 = shape_of(%var_6481, dtype="int32") /* ty=Tensor[(3), int32] */;
  %748 = cast(%var_6481, dtype="float64") /* ty=Tensor[(13, 13, 12), float64] */;
  %749 = dyn.reshape(%746, %747, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %750 = @func_5599() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %751 = divide(%748, %749) /* ty=Tensor[(13, 13, 12), float64] */;
  %752 = %750.0;
  (%751, %752)
}

def @func_8288() -> Tensor[(8, 16, 6), float64] {
  @func_8105() /* ty=Tensor[(8, 16, 6), float64] */
}

def @func_5806(%var_5741: Tensor[(9, 13, 10), uint16], %var_5742: Tensor[(9, 13, 10), uint16]) -> (Tensor[(9, 13, 10), uint16],) {
  %753 = cast(%var_5742, dtype="uint16") /* ty=Tensor[(9, 13, 10), uint16] */;
  %754 = shape_of(%var_5741, dtype="int32") /* ty=Tensor[(3), int32] */;
  %755 = cast(%var_5741, dtype="uint16") /* ty=Tensor[(9, 13, 10), uint16] */;
  %756 = dyn.reshape(%753, %754, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %757 = minimum(%755, %756) /* ty=Tensor[(9, 13, 10), uint16] */;
  (%757,)
}

def @func_3809() -> (Tensor[(8, 16, 6), float64],) {
  %758 = @func_3707() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
  %759 = %758.0;
  (%759,)
}

def @func_10523() -> (Tensor[(8, 16, 6), float64],) {
  %760 = @func_4129() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
  %761 = %760.0;
  (%761,)
}

def @func_9382() -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) {
  %762 = @func_6989() /* ty=Tensor[(8, 16, 6), float64] */;
  %763 = @func_7282() /* ty=Tensor[(8, 16, 6), float64] */;
  (%762, %763)
}

def @func_10626(%var_10606: Tensor[(4, 9, 10), float32]) -> (Tensor[(4, 9, 10), float32], Tensor[(8, 16, 6), float64]) {
  %764 = cast(%var_10606, dtype="float32") /* ty=Tensor[(4, 9, 10), float32] */;
  %765 = sqrt(%764) /* ty=Tensor[(4, 9, 10), float32] */;
  %766 = cast(%765, dtype="float32") /* ty=Tensor[(4, 9, 10), float32] */;
  %767 = @func_5177() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %768 = erf(%766) /* ty=Tensor[(4, 9, 10), float32] */;
  %769 = %767.0;
  (%768, %769)
}

def @func_11050(%var_11004: Tensor[(195, 9), float32], %var_11035: Tensor[(455), int32]) -> (Tensor[(12, 5, 5), uint32], Tensor[(15, 9, 13), bool], Tensor[(195, 9), float32], Tensor[(16, 2, 16), bool], Tensor[(7, 13, 5), float64], Tensor[(455), float32], Tensor[(108), uint32], Tensor[(455), float64]) {
  %770 = @func_4964() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(12, 5, 5), uint32], Tensor[(60), uint32]) */;
  %771 = cast(%var_11004, dtype="float32") /* ty=Tensor[(195, 9), float32] */;
  %772 = reshape(%771, newshape=[15, 9, 13]) /* ty=Tensor[(15, 9, 13), float32] */;
  %773 = cast(meta[relay.Constant][54] /* ty=Tensor[(512), float32] */, dtype="float32") /* ty=Tensor[(512), float32] */;
  %774 = cast(meta[relay.Constant][54] /* ty=Tensor[(512), float32] */, dtype="float32") /* ty=Tensor[(512), float32] */;
  %775 = reshape(%773, newshape=[16, 2, 16]) /* ty=Tensor[(16, 2, 16), float32] */;
  %776 = reshape(%774, newshape=[16, 2, 16]) /* ty=Tensor[(16, 2, 16), float32] */;
  %777 = @func_3155(%775, %776) /* ty=Tensor[(16, 2, 16), float32] */;
  %778 = cast(%777, dtype="float64") /* ty=Tensor[(16, 2, 16), float64] */;
  %779 = cosh(%778) /* ty=Tensor[(16, 2, 16), float64] */;
  %780 = cast(meta[relay.Constant][54] /* ty=Tensor[(512), float32] */, dtype="bool") /* ty=Tensor[(512), bool] */;
  %781 = shape_of(%779, dtype="int32") /* ty=Tensor[(3), int32] */;
  %782 = cast(%779, dtype="bool") /* ty=Tensor[(16, 2, 16), bool] */;
  %783 = dyn.reshape(%780, %781, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %784 = cast(%var_11035, dtype="int32") /* ty=Tensor[(455), int32] */;
  %785 = cast(%var_11035, dtype="int32") /* ty=Tensor[(455), int32] */;
  %786 = reshape(%784, newshape=[5, 7, 13]) /* ty=Tensor[(5, 7, 13), int32] */;
  %787 = reshape(%785, newshape=[5, 7, 13]) /* ty=Tensor[(5, 7, 13), int32] */;
  %788 = @func_10374(%786, %787) /* ty=(Tensor[(5, 7, 13), bool], Tensor[(7, 13, 5), float64], Tensor[(6, 44), float32]) */;
  %789 = cast(%var_11035, dtype="float32") /* ty=Tensor[(455), float32] */;
  %790 = @func_9249() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(108), uint32]) */;
  %791 = cast(%var_11035, dtype="float64") /* ty=Tensor[(455), float64] */;
  %792 = %770.1;
  %793 = @func_7976(%772) /* ty=Tensor[(15, 9, 13), bool] */;
  %794 = less_equal(%782, %783) /* ty=Tensor[(16, 2, 16), bool] */;
  %795 = %788.1;
  %796 = acosh(%789) /* ty=Tensor[(455), float32] */;
  %797 = %790.1;
  %798 = exp(%791) /* ty=Tensor[(455), float64] */;
  (%792, %793, %var_11004, %794, %795, %796, %797, %798)
}

def @func_6519(%var_6506: Tensor[(1, 11, 2), uint32], %var_6507: Tensor[(5, 11, 2), uint32]) -> (Tensor[(5, 11, 2), uint32],) {
  %799 = cast(%var_6506, dtype="uint32") /* ty=Tensor[(1, 11, 2), uint32] */;
  %800 = cast(%var_6507, dtype="uint32") /* ty=Tensor[(5, 11, 2), uint32] */;
  %801 = left_shift(%799, %800) /* ty=Tensor[(5, 11, 2), uint32] */;
  (%801,)
}

def @func_5503() -> (Tensor[(8, 16, 6), float64],) {
  %802 = @func_3765() /* ty=Tensor[(8, 16, 6), float64] */;
  (%802,)
}

def @func_8931(%var_8917: Tensor[(896), float32], %var_8918: Tensor[(7, 5), float32]) -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], uint16, Tensor[(8, 16, 6), float32], Tensor[(8, 16, 6), float64], Tensor[(5, 11, 2), uint32], Tensor[(896), float32], Tensor[(7, 5), float32], Tensor[(3, 10, 2), bool], Tensor[(3, 7, 14), float64], Tensor[(7, 42), float64]) {
  %803 = @func_5503() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %804 = cast(meta[relay.Constant][55] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %805 = reshape(%804, newshape=[]) /* ty=uint16 */;
  %806 = @func_3394(%805) /* ty=(Tensor[(8, 16, 6), float64], Tensor[(5, 1), uint16], uint16) */;
  %807 = @func_6810() /* ty=(Tensor[(8, 16, 6), float32],) */;
  %808 = @func_7411() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float32], Tensor[(8, 16, 6), float32]) */;
  %809 = cast(%var_8917, dtype="float32") /* ty=Tensor[(896), float32] */;
  %810 = cast(%var_8918, dtype="float32") /* ty=Tensor[(7, 5), float32] */;
  %811 = reshape(%809, newshape=[8, 7, 16]) /* ty=Tensor[(8, 7, 16), float32] */;
  %812 = reshape(%810, newshape=[35]) /* ty=Tensor[(35), float32] */;
  %813 = @func_7696(%811, %812) /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 7, 16), float32], Tensor[(7, 1, 5), float32], Tensor[(35), float32], Tensor[(5, 11, 2), uint32], Tensor[(22), uint32], Tensor[(110), uint32]) */;
  %814 = cast(meta[relay.Constant][55] /* ty=uint16 */, dtype="float64") /* ty=float64 */;
  %815 = reshape(%814, newshape=[]) /* ty=float64 */;
  %816 = cast(meta[relay.Constant][56] /* ty=Tensor[(7, 42), float64] */, dtype="float64") /* ty=Tensor[(7, 42), float64] */;
  %817 = reshape(%816, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), float64] */;
  %818 = %803.0;
  %819 = %806.0;
  %820 = %807.0;
  %821 = %808.0;
  %822 = %813.4;
  %823 = @func_8448(%815) /* ty=Tensor[(3, 10, 2), bool] */;
  %824 = @func_3041(%817) /* ty=Tensor[(3, 7, 14), float64] */;
  (%818, %819, meta[relay.Constant][55] /* ty=uint16 */, %820, %821, %822, %var_8917, %var_8918, %823, %824, meta[relay.Constant][56] /* ty=Tensor[(7, 42), float64] */)
}

def @func_7875(%var_7864: Tensor[(3, 11, 7), int32]) -> (Tensor[(3, 11, 7), bool], Tensor[(8, 16, 6), float64]) {
  %825 = cast(%var_7864, dtype="bool") /* ty=Tensor[(3, 11, 7), bool] */;
  %826 = shape_of(meta[relay.Constant][57] /* ty=Tensor[(3, 11, 7), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %827 = cast(meta[relay.Constant][57] /* ty=Tensor[(3, 11, 7), int32] */, dtype="bool") /* ty=Tensor[(3, 11, 7), bool] */;
  %828 = dyn.reshape(%825, %826, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %829 = less_equal(%827, %828) /* ty=Tensor[(3, 11, 7), bool] */;
  %830 = @func_7143() /* ty=Tensor[(8, 16, 6), float64] */;
  (%829, %830)
}

def @func_7008() -> Tensor[(8, 16, 6), float64] {
  %831 = @func_4082() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
  %831.1
}

def @func_4443(%var_4378: Tensor[(9, 45), float32], %var_4413: Tensor[(264), float32]) -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(520), float32], Tensor[(9, 5, 9), float32], Tensor[(9, 45), float32], Tensor[(3, 2, 2), float64], Tensor[(3, 4), float64], Tensor[(264), float32], Tensor[(8, 16, 6), float64], Tensor[(6, 4, 11), uint32], Tensor[(8, 16, 6), float64]) {
  %832 = cast(meta[relay.Constant][58] /* ty=Tensor[(520), float32] */, dtype="float32") /* ty=Tensor[(520), float32] */;
  %833 = reshape(%832, newshape=[13, 4, 10]) /* ty=Tensor[(13, 4, 10), float32] */;
  %834 = @func_4015(%833) /* ty=(Tensor[(13, 4, 10), float32], Tensor[(6, 4, 11), float64], Tensor[(455), float32], Tensor[(264), float32], Tensor[(8, 16, 6), float64]) */;
  %835 = cast(%var_4378, dtype="float32") /* ty=Tensor[(9, 45), float32] */;
  %836 = reshape(%835, newshape=[9, 5, 9]) /* ty=Tensor[(9, 5, 9), float32] */;
  %837 = cast(meta[relay.Constant][59] /* ty=Tensor[(3, 4), float64] */, dtype="float64") /* ty=Tensor[(3, 4), float64] */;
  %838 = reshape(%837, newshape=[3, 2, 2]) /* ty=Tensor[(3, 2, 2), float64] */;
  %839 = @func_115(%838) /* ty=(Tensor[(3, 2, 2), float64],) */;
  %840 = cast(%var_4413, dtype="float32") /* ty=Tensor[(264), float32] */;
  %841 = reshape(%840, newshape=[6, 4, 11]) /* ty=Tensor[(6, 4, 11), float32] */;
  %842 = @func_339(%841) /* ty=(Tensor[(6, 4, 11), float64],) */;
  %843 = %842.0;
  %844 = cast(meta[relay.Constant][60] /* ty=Tensor[(6, 4, 11), float64] */, dtype="uint32") /* ty=Tensor[(6, 4, 11), uint32] */;
  %845 = shape_of(%843, dtype="int32") /* ty=Tensor[(3), int32] */;
  %846 = cast(%843, dtype="uint32") /* ty=Tensor[(6, 4, 11), uint32] */;
  %847 = dyn.reshape(%844, %845, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %848 = @func_3707() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
  %849 = @func_4026() /* ty=Tensor[(8, 16, 6), float64] */;
  %850 = %834.4;
  %851 = @func_2141(%836) /* ty=Tensor[(9, 5, 9), float32] */;
  %852 = %839.0;
  %853 = @func_4204() /* ty=Tensor[(8, 16, 6), float64] */;
  %854 = subtract(%846, %847) /* ty=Tensor[(6, 4, 11), uint32] */;
  %855 = %848.1;
  (%849, %850, meta[relay.Constant][58] /* ty=Tensor[(520), float32] */, %851, %var_4378, %852, meta[relay.Constant][59] /* ty=Tensor[(3, 4), float64] */, %var_4413, %853, %854, %855)
}

def @func_7938() -> (Tensor[(3, 20), uint32],) {
  %856 = @func_6555() /* ty=(Tensor[(3, 20), uint32],) */;
  %857 = %856.0;
  (%857,)
}

def @func_6971() -> Tensor[(520), float64] {
  %858 = @func_6279() /* ty=(Tensor[(520), float64],) */;
  %858.0
}

def @func_10291(%var_10272: Tensor[(455), float32]) -> (Tensor[(8, 16, 6), float64], Tensor[(6, 4, 11), float64], Tensor[(455), float32], Tensor[(1, 264), float32]) {
  %859 = @func_9709() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %860 = cast(%var_10272, dtype="float32") /* ty=Tensor[(455), float32] */;
  %861 = cast(meta[relay.Constant][61] /* ty=Tensor[(1, 264), float32] */, dtype="float32") /* ty=Tensor[(1, 264), float32] */;
  %862 = reshape(%860, newshape=[7, 13, 5]) /* ty=Tensor[(7, 13, 5), float32] */;
  %863 = reshape(%861, newshape=[264]) /* ty=Tensor[(264), float32] */;
  %864 = @func_3976(%862, %863) /* ty=(Tensor[(7, 13, 5), float64], Tensor[(264), float32], Tensor[(6, 4, 11), float64], Tensor[(6, 4, 11), float64]) */;
  %865 = %859.0;
  %866 = %864.2;
  (%865, %866, %var_10272, meta[relay.Constant][61] /* ty=Tensor[(1, 264), float32] */)
}

def @func_6555() -> (Tensor[(3, 20), uint32],) {
  %867 = @func_5949() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(3, 2, 2), bool], Tensor[(3, 20), uint32]) */;
  %868 = %867.2;
  (%868,)
}

def @func_10193() -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) {
  %869 = @func_4204() /* ty=Tensor[(8, 16, 6), float64] */;
  %870 = cast(%869, dtype="float64") /* ty=Tensor[(8, 16, 6), float64] */;
  %871 = @func_4806() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %872 = atan(%870) /* ty=Tensor[(8, 16, 6), float64] */;
  %873 = %871.0;
  (%872, %873)
}

def @func_7181() -> Tensor[(520), float64] {
  %874 = @func_7067() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(520), float64]) */;
  %874.1
}

def @func_6989() -> Tensor[(8, 16, 6), float64] {
  %875 = @func_6547() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %875.0
}

def @func_11817() -> (Tensor[(8, 3, 3), float64], Tensor[(8, 16, 6), float64]) {
  %876 = cast(meta[relay.Constant][62] /* ty=Tensor[(8, 3, 3), float64] */, dtype="float64") /* ty=Tensor[(8, 3, 3), float64] */;
  %877 = @func_4265() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(108), uint32], Tensor[(1620), uint32], Tensor[(135), float64]) */;
  %878 = sinh(%876) /* ty=Tensor[(8, 3, 3), float64] */;
  %879 = %877.0;
  (%878, %879)
}

def @func_5696() -> Tensor[(8, 16, 6), float64] {
  @func_3765() /* ty=Tensor[(8, 16, 6), float64] */
}

def @func_5384() -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(12), float64], Tensor[(108), uint32]) {
  %880 = @func_3795() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %881 = cast(meta[relay.Constant][63] /* ty=Tensor[(12), float64] */, dtype="float64") /* ty=Tensor[(12), float64] */;
  %882 = reshape(%881, newshape=[12]) /* ty=Tensor[(12), float64] */;
  %883 = @func_4678(%882) /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(3, 2, 2), float64], Tensor[(12), float64]) */;
  %884 = @func_4265() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(108), uint32], Tensor[(1620), uint32], Tensor[(135), float64]) */;
  %885 = %880.0;
  %886 = %883.0;
  %887 = %884.1;
  (%885, %886, meta[relay.Constant][63] /* ty=Tensor[(12), float64] */, %887)
}

def @func_10000() -> (Tensor[(4, 8, 9), float64], Tensor[(6, 9, 10), uint8], Tensor[(540), uint8], Tensor[(520), float32], Tensor[(8, 16, 6), float64]) {
  %888 = cast(meta[relay.Constant][64] /* ty=Tensor[(4, 8, 9), float64] */, dtype="float64") /* ty=Tensor[(4, 8, 9), float64] */;
  %889 = cast(meta[relay.Constant][65] /* ty=Tensor[(540), uint8] */, dtype="uint8") /* ty=Tensor[(540), uint8] */;
  %890 = cast(meta[relay.Constant][66] /* ty=Tensor[(520), float32] */, dtype="float32") /* ty=Tensor[(520), float32] */;
  %891 = reshape(%889, newshape=[6, 9, 10]) /* ty=Tensor[(6, 9, 10), uint8] */;
  %892 = reshape(%890, newshape=[520]) /* ty=Tensor[(520), float32] */;
  %893 = @func_9834(%891, %892) /* ty=(Tensor[(6, 9, 10), uint8], Tensor[(6, 4, 11), float64], Tensor[(520), float32]) */;
  %894 = @func_8406() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %895 = acos(%888) /* ty=Tensor[(4, 8, 9), float64] */;
  %896 = %893.0;
  %897 = %894.0;
  (%895, %896, meta[relay.Constant][65] /* ty=Tensor[(540), uint8] */, meta[relay.Constant][66] /* ty=Tensor[(520), float32] */, %897)
}

def @func_5949() -> (Tensor[(8, 16, 6), float64], Tensor[(3, 2, 2), bool], Tensor[(3, 20), uint32]) {
  %898 = @func_4082() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
  %899 = cast(meta[relay.Constant][67] /* ty=Tensor[(3, 20), uint32] */, dtype="uint32") /* ty=Tensor[(3, 20), uint32] */;
  %900 = reshape(%899, newshape=[12, 1, 5]) /* ty=Tensor[(12, 1, 5), uint32] */;
  %901 = @func_225(%900) /* ty=(Tensor[(12, 5, 5), uint32], Tensor[(3, 2, 2), bool], Tensor[(3, 2, 2), float32]) */;
  %902 = %898.0;
  %903 = %901.1;
  (%902, %903, meta[relay.Constant][67] /* ty=Tensor[(3, 20), uint32] */)
}

def @func_9050() -> Tensor[(8, 16, 6), float64] {
  %904 = @func_4552() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %904.0
}

def @func_4806() -> (Tensor[(8, 16, 6), float64],) {
  %905 = @func_3809() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %906 = %905.0;
  (%906,)
}

def @func_364(%var_345: Tensor[(7, 1, 5), float32]) -> (Tensor[(7, 1, 5), float32], Tensor[(7, 1, 5), float32]) {
  %907 = cast(%var_345, dtype="float32") /* ty=Tensor[(7, 1, 5), float32] */;
  %908 = cast(%var_345, dtype="float32") /* ty=Tensor[(7, 1, 5), float32] */;
  %909 = sin(%907) /* ty=Tensor[(7, 1, 5), float32] */;
  %910 = sqrt(%908) /* ty=Tensor[(7, 1, 5), float32] */;
  (%909, %910)
}

def @func_7238() -> Tensor[(8, 16, 6), float64] {
  %911 = @func_6882() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %911.0
}

def @func_2250(%var_2219: Tensor[(12, 9, 1), uint32], %var_2220: Tensor[(12, 9, 15), uint32]) -> (Tensor[(12, 9, 15), uint32], Tensor[(4, 13, 8), float32], Tensor[(416), float32]) {
  %912 = cast(%var_2219, dtype="uint32") /* ty=Tensor[(12, 9, 1), uint32] */;
  %913 = cast(%var_2220, dtype="uint32") /* ty=Tensor[(12, 9, 15), uint32] */;
  %914 = cast(meta[relay.Constant][68] /* ty=Tensor[(416), float32] */, dtype="float32") /* ty=Tensor[(416), float32] */;
  %915 = reshape(%914, newshape=[4, 13, 8]) /* ty=Tensor[(4, 13, 8), float32] */;
  %916 = right_shift(%912, %913) /* ty=Tensor[(12, 9, 15), uint32] */;
  %917 = @func_1274(%915) /* ty=Tensor[(4, 13, 8), float32] */;
  (%916, %917, meta[relay.Constant][68] /* ty=Tensor[(416), float32] */)
}

def @func_2141(%var_2134: Tensor[(9, 5, 9), float32]) -> Tensor[(9, 5, 9), float32] {
  %918 = cast(meta[relay.Constant][69] /* ty=Tensor[(9, 5, 9), float32] */, dtype="float32") /* ty=Tensor[(9, 5, 9), float32] */;
  %919 = shape_of(%var_2134, dtype="int32") /* ty=Tensor[(3), int32] */;
  %920 = cast(%var_2134, dtype="float32") /* ty=Tensor[(9, 5, 9), float32] */;
  %921 = dyn.reshape(%918, %919, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%920, %921) /* ty=Tensor[(9, 5, 9), float32] */
}

def @func_9945() -> Tensor[(8, 16, 6), float64] {
  %922 = @func_8406() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %922.0
}

def @func_11727(%var_11714: bool, %var_11715: Tensor[(16, 1, 6), bool]) -> (Tensor[(16, 1, 6), bool], Tensor[(8, 16, 6), float64]) {
  %923 = cast(%var_11714, dtype="bool") /* ty=bool */;
  %924 = cast(%var_11715, dtype="bool") /* ty=Tensor[(16, 1, 6), bool] */;
  %925 = @func_6882() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %926 = logical_or(%923, %924) /* ty=Tensor[(16, 1, 6), bool] */;
  %927 = %925.0;
  (%926, %927)
}

def @func_3283() -> (Tensor[(8, 16, 6), float64],) {
  %928 = cast(meta[relay.Constant][70] /* ty=Tensor[(8, 16, 6), float64] */, dtype="float64") /* ty=Tensor[(8, 16, 6), float64] */;
  %929 = asinh(%928) /* ty=Tensor[(8, 16, 6), float64] */;
  (%929,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_8288() -> Tensor[(8, 16, 6), float64] {
  @func_8105() /* ty=Tensor[(8, 16, 6), float64] */
}

def @func_5114() -> (Tensor[(8, 16, 6), float32], Tensor[(3, 2, 2), float32], Tensor[(60), uint32]) {
  @func_5112() /* ty=(Tensor[(8, 16, 6), float32], Tensor[(3, 2, 2), float32], Tensor[(60), uint32]) */
}

def @func_8408() -> (Tensor[(8, 16, 6), float64],) {
  @func_8406() /* ty=(Tensor[(8, 16, 6), float64],) */
}

def @func_11754() -> Tensor[(3, 2, 2), bool] {
  @func_11752() /* ty=Tensor[(3, 2, 2), bool] */
}

def @func_4681(%var_4679: Tensor[(12), float64]) -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(3, 2, 2), float64], Tensor[(12), float64]) {
  @func_4678(%var_4679) /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(3, 2, 2), float64], Tensor[(12), float64]) */
}

def @func_9384() -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) {
  @func_9382() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */
}

def @func_6280() -> (Tensor[(520), float64],) {
  %2 = fn () -> (Tensor[(520), float64],) {
    %0 = @func_6152() /* ty=(Tensor[(520), float64],) */;
    %1 = %0.0;
    (%1,)
  };
  %2() /* ty=(Tensor[(520), float64],) */
}

def @func_5573() -> (Tensor[(8, 16, 6), float64],) {
  %5 = fn () -> (Tensor[(8, 16, 6), float64],) {
    %3 = @func_3528() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(16, 2, 16), float32], Tensor[(512), float32], Tensor[(8, 13, 5), float64], Tensor[(520), float64]) */;
    %4 = %3.0;
    (%4,)
  };
  %5() /* ty=(Tensor[(8, 16, 6), float64],) */
}

def @func_6000(%var_5998: Tensor[(8, 16, 6), float64], %var_5999: Tensor[(8, 16, 6), float64]) -> (Tensor[(8, 16, 6), float32], Tensor[(8, 16, 6), bool]) {
  %17 = fn (%var_5965: Tensor[(8, 16, 6), float64], %var_5976: Tensor[(8, 16, 6), float64]) -> (Tensor[(8, 16, 6), float32], Tensor[(8, 16, 6), bool]) {
    %6 = @func_3765() /* ty=Tensor[(8, 16, 6), float64] */;
    %7 = cast(%var_5965, dtype="float32") /* ty=Tensor[(8, 16, 6), float32] */;
    %8 = shape_of(%6, dtype="int32") /* ty=Tensor[(3), int32] */;
    %9 = cast(%6, dtype="float32") /* ty=Tensor[(8, 16, 6), float32] */;
    %10 = dyn.reshape(%7, %8, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %11 = cast(%var_5976, dtype="bool") /* ty=Tensor[(8, 16, 6), bool] */;
    %12 = shape_of(%var_5965, dtype="int32") /* ty=Tensor[(3), int32] */;
    %13 = cast(%var_5965, dtype="bool") /* ty=Tensor[(8, 16, 6), bool] */;
    %14 = dyn.reshape(%11, %12, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %15 = mod(%9, %10) /* ty=Tensor[(8, 16, 6), float32] */;
    %16 = greater_equal(%13, %14) /* ty=Tensor[(8, 16, 6), bool] */;
    (%15, %16)
  };
  %17(%var_5998, %var_5999) /* ty=(Tensor[(8, 16, 6), float32], Tensor[(8, 16, 6), bool]) */
}

def @func_1274(%var_1269: Tensor[(4, 13, 8), float32]) -> Tensor[(4, 13, 8), float32] {
  %18 = cast(%var_1269, dtype="float32") /* ty=Tensor[(4, 13, 8), float32] */;
  %19 = acosh(%18) /* ty=Tensor[(4, 13, 8), float32] */;
  %20 = cast(%19, dtype="float32") /* ty=Tensor[(4, 13, 8), float32] */;
  atan(%20) /* ty=Tensor[(4, 13, 8), float32] */
}

def @func_815(%var_813: uint16) -> (Tensor[(5, 1), uint16],) {
  @func_812(%var_813) /* ty=(Tensor[(5, 1), uint16],) */
}

def @func_6255(%var_6254: Tensor[(6, 2, 3), float64]) -> Tensor[(6, 2, 3), float64] {
  %25 = fn (%var_6248: Tensor[(6, 2, 3), float64]) -> Tensor[(6, 2, 3), float64] {
    %21 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 2, 3), float64] */, dtype="float64") /* ty=Tensor[(6, 2, 3), float64] */;
    %22 = shape_of(%var_6248, dtype="int32") /* ty=Tensor[(3), int32] */;
    %23 = cast(%var_6248, dtype="float64") /* ty=Tensor[(6, 2, 3), float64] */;
    %24 = dyn.reshape(%21, %22, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    power(%23, %24) /* ty=Tensor[(6, 2, 3), float64] */
  };
  %25(%var_6254) /* ty=Tensor[(6, 2, 3), float64] */
}

def @func_6810() -> (Tensor[(8, 16, 6), float32],) {
  %26 = @func_4026() /* ty=Tensor[(8, 16, 6), float64] */;
  %27 = cast(%26, dtype="float32") /* ty=Tensor[(8, 16, 6), float32] */;
  %28 = exp(%27) /* ty=Tensor[(8, 16, 6), float32] */;
  (%28,)
}

def @func_9685() -> (Tensor[(3, 2, 2), bool],) {
  %31 = fn () -> (Tensor[(3, 2, 2), bool],) {
    %29 = @func_3485() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(7, 1, 5), float32], Tensor[(35), float32], Tensor[(12, 9, 15), uint32], Tensor[(108), uint32], Tensor[(1620), uint32], Tensor[(3, 2, 2), bool], Tensor[(60), uint32]) */;
    %30 = %29.6;
    (%30,)
  };
  %31() /* ty=(Tensor[(3, 2, 2), bool],) */
}

def @func_9933() -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) {
  %35 = fn () -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) {
    %32 = @func_8406() /* ty=(Tensor[(8, 16, 6), float64],) */;
    %33 = @func_7036() /* ty=Tensor[(8, 16, 6), float64] */;
    %34 = %32.0;
    (%33, %34)
  };
  %35() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */
}

def @func_9382() -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) {
  %36 = @func_6989() /* ty=Tensor[(8, 16, 6), float64] */;
  %37 = @func_7282() /* ty=Tensor[(8, 16, 6), float64] */;
  (%36, %37)
}

def @func_6812() -> (Tensor[(8, 16, 6), float32],) {
  @func_6810() /* ty=(Tensor[(8, 16, 6), float32],) */
}

def @func_10566() -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) {
  %41 = fn () -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) {
    %38 = @func_7584() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(4, 13, 8), float32], Tensor[(416), float32], Tensor[(8, 16, 6), float64]) */;
    %39 = %38.0;
    %40 = @func_6989() /* ty=Tensor[(8, 16, 6), float64] */;
    (%39, %40)
  };
  %41() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */
}

def @func_4610(%var_4608: Tensor[(8, 16, 6), float64], %var_4609: Tensor[(540, 3), uint32]) -> (Tensor[(8, 16, 6), bool], Tensor[(16, 2, 16), float64], Tensor[(540, 3), uint32], Tensor[(135), float64]) {
  @func_4606(%var_4608, %var_4609) /* ty=(Tensor[(8, 16, 6), bool], Tensor[(16, 2, 16), float64], Tensor[(540, 3), uint32], Tensor[(135), float64]) */
}

def @func_9947() -> Tensor[(8, 16, 6), float64] {
  @func_9945() /* ty=Tensor[(8, 16, 6), float64] */
}

def @func_10142() -> (Tensor[(8, 16, 6), float64],) {
  %44 = fn () -> (Tensor[(8, 16, 6), float64],) {
    %42 = @func_6065() /* ty=(Tensor[(8, 16, 6), float64],) */;
    %43 = %42.0;
    (%43,)
  };
  %44() /* ty=(Tensor[(8, 16, 6), float64],) */
}

def @func_10195() -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) {
  @func_10193() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */
}

def @func_10523() -> (Tensor[(8, 16, 6), float64],) {
  %45 = @func_4129() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
  %46 = %45.0;
  (%46,)
}

def @func_8494(%var_8493: Tensor[(520), float32]) -> (Tensor[(8, 16, 6), float64], Tensor[(520), float32], Tensor[(3, 20), float32]) {
  %60 = fn (%var_8482: Tensor[(520), float32]) -> (Tensor[(8, 16, 6), float64], Tensor[(520), float32], Tensor[(3, 20), float32]) {
    %47 = cast(%var_8482, dtype="float32") /* ty=Tensor[(520), float32] */;
    %48 = reshape(%47, newshape=[13, 4, 10]) /* ty=Tensor[(13, 4, 10), float32] */;
    %49 = @func_4015(%48) /* ty=(Tensor[(13, 4, 10), float32], Tensor[(6, 4, 11), float64], Tensor[(455), float32], Tensor[(264), float32], Tensor[(8, 16, 6), float64]) */;
    %50 = @func_5949() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(3, 2, 2), bool], Tensor[(3, 20), uint32]) */;
    %51 = %50.2;
    %52 = cast(meta[relay.Constant][1] /* ty=Tensor[(3, 20), uint32] */, dtype="bool") /* ty=Tensor[(3, 20), bool] */;
    %53 = shape_of(%51, dtype="int32") /* ty=Tensor[(2), int32] */;
    %54 = cast(%51, dtype="bool") /* ty=Tensor[(3, 20), bool] */;
    %55 = dyn.reshape(%52, %53, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %56 = logical_and(%54, %55) /* ty=Tensor[(3, 20), bool] */;
    %57 = cast(%56, dtype="float32") /* ty=Tensor[(3, 20), float32] */;
    %58 = %49.4;
    %59 = cosh(%57) /* ty=Tensor[(3, 20), float32] */;
    (%58, %var_8482, %59)
  };
  %60(%var_8493) /* ty=(Tensor[(8, 16, 6), float64], Tensor[(520), float32], Tensor[(3, 20), float32]) */
}

def @func_9052() -> Tensor[(8, 16, 6), float64] {
  @func_9050() /* ty=Tensor[(8, 16, 6), float64] */
}

def @func_2144(%var_2142: Tensor[(9, 5, 9), float32]) -> Tensor[(9, 5, 9), float32] {
  @func_2141(%var_2142) /* ty=Tensor[(9, 5, 9), float32] */
}

def @func_4027() -> Tensor[(8, 16, 6), float64] {
  %62 = fn () -> Tensor[(8, 16, 6), float64] {
    %61 = @func_3528() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(16, 2, 16), float32], Tensor[(512), float32], Tensor[(8, 13, 5), float64], Tensor[(520), float64]) */;
    %61.1
  };
  %62() /* ty=Tensor[(8, 16, 6), float64] */
}

def @func_11819() -> (Tensor[(8, 3, 3), float64], Tensor[(8, 16, 6), float64]) {
  @func_11817() /* ty=(Tensor[(8, 3, 3), float64], Tensor[(8, 16, 6), float64]) */
}

def @func_10525() -> (Tensor[(8, 16, 6), float64],) {
  @func_10523() /* ty=(Tensor[(8, 16, 6), float64],) */
}

def @func_5434(%var_5402: uint16) -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), bool], Tensor[(8, 16, 6), float64], Tensor[(3, 7, 14), float64], Tensor[(294), float64]) {
  %63 = cast(%var_5402, dtype="uint16") /* ty=uint16 */;
  %64 = reshape(%63, newshape=[]) /* ty=uint16 */;
  %65 = @func_3394(%64) /* ty=(Tensor[(8, 16, 6), float64], Tensor[(5, 1), uint16], uint16) */;
  %66 = @func_5384() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(12), float64], Tensor[(108), uint32]) */;
  %67 = %66.0;
  %68 = cast(%var_5402, dtype="bool") /* ty=bool */;
  %69 = cast(%67, dtype="bool") /* ty=Tensor[(8, 16, 6), bool] */;
  %70 = @func_3795() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %71 = cast(meta[relay.Constant][2] /* ty=Tensor[(294), float64] */, dtype="float64") /* ty=Tensor[(294), float64] */;
  %72 = reshape(%71, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), float64] */;
  %73 = %65.0;
  %74 = logical_or(%68, %69) /* ty=Tensor[(8, 16, 6), bool] */;
  %75 = %70.0;
  %76 = @func_3041(%72) /* ty=Tensor[(3, 7, 14), float64] */;
  (%73, %74, %75, %76, meta[relay.Constant][2] /* ty=Tensor[(294), float64] */)
}

def @func_5505() -> (Tensor[(8, 16, 6), float64],) {
  @func_5503() /* ty=(Tensor[(8, 16, 6), float64],) */
}

def @func_3811() -> (Tensor[(8, 16, 6), float64],) {
  @func_3809() /* ty=(Tensor[(8, 16, 6), float64],) */
}

def @func_9043() -> Tensor[(8, 16, 6), float64] {
  @func_9041() /* ty=Tensor[(8, 16, 6), float64] */
}

def @func_5887(%var_5885: Tensor[(294, 1), float64]) -> (Tensor[(8, 16, 6), float64], Tensor[(3, 7, 14), float64], Tensor[(294, 1), float64]) {
  %77 = @func_5333() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %78 = cast(%var_5885, dtype="float64") /* ty=Tensor[(294, 1), float64] */;
  %79 = reshape(%78, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), float64] */;
  %80 = %77.0;
  %81 = @func_3041(%79) /* ty=Tensor[(3, 7, 14), float64] */;
  (%80, %81, %var_5885)
}

def @main(%var_11894: Tensor[(13, 16, 5), float64], %var_11907: Tensor[(1, 455), float32], %var_11908: Tensor[(66, 4), float32], %var_11934: int16, %var_11940: Tensor[(416), float32]) -> (Tensor[(6, 4, 11), float64], Tensor[(1, 455), float32], Tensor[(66, 4), float32], Tensor[(8, 16, 6), float64], Tensor[(7, 16, 1), bool], Tensor[(112), int16], Tensor[(416), float32], Tensor[(416), float32], Tensor[(8, 16, 6), float64], Tensor[(13, 16, 5), bool], Tensor[(8, 16, 6), float64], Tensor[(108), uint32], Tensor[(13, 16, 5), float64]) {
  %82 = cast(%var_11907, dtype="float32") /* ty=Tensor[(1, 455), float32] */;
  %83 = cast(%var_11908, dtype="float32") /* ty=Tensor[(66, 4), float32] */;
  %84 = reshape(%82, newshape=[7, 13, 5]) /* ty=Tensor[(7, 13, 5), float32] */;
  %85 = reshape(%83, newshape=[264]) /* ty=Tensor[(264), float32] */;
  %86 = @func_3980(%84, %85) /* ty=(Tensor[(7, 13, 5), float64], Tensor[(264), float32], Tensor[(6, 4, 11), float64], Tensor[(6, 4, 11), float64]) */;
  %87 = cast(%var_11934, dtype="int16") /* ty=int16 */;
  %88 = cast(meta[relay.Constant][3] /* ty=Tensor[(112), int16] */, dtype="int16") /* ty=Tensor[(112), int16] */;
  %89 = reshape(%87, newshape=[]) /* ty=int16 */;
  %90 = reshape(%88, newshape=[7, 16, 1]) /* ty=Tensor[(7, 16, 1), int16] */;
  %91 = @func_11790(%89, %90) /* ty=(Tensor[(7, 16, 1), bool], Tensor[(8, 16, 6), float64]) */;
  %92 = cast(%var_11940, dtype="float32") /* ty=Tensor[(416), float32] */;
  %93 = reshape(%92, newshape=[416]) /* ty=Tensor[(416), float32] */;
  %94 = @func_7825(%93) /* ty=(Tensor[(8, 16, 6), float64], Tensor[(3, 10, 8), float64], Tensor[(240), float64], Tensor[(4, 13, 8), float32], Tensor[(416), float32]) */;
  %95 = @func_7207() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %96 = cast(%var_11894, dtype="float64") /* ty=Tensor[(13, 16, 5), float64] */;
  %97 = sigmoid(%96) /* ty=Tensor[(13, 16, 5), float64] */;
  %98 = cast(%97, dtype="bool") /* ty=Tensor[(13, 16, 5), bool] */;
  %99 = cast(%var_11934, dtype="bool") /* ty=bool */;
  %100 = cast(meta[relay.Constant][4] /* ty=Tensor[(108), uint32] */, dtype="uint32") /* ty=Tensor[(108), uint32] */;
  %101 = reshape(%100, newshape=[108]) /* ty=Tensor[(108), uint32] */;
  %102 = @func_10917(%101) /* ty=(Tensor[(8, 16, 6), float64], Tensor[(416), float32], Tensor[(108), uint32], Tensor[(18, 90), uint32], Tensor[(3, 20), uint32], Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
  %103 = cast(%97, dtype="float32") /* ty=Tensor[(13, 16, 5), float32] */;
  %104 = asinh(%103) /* ty=Tensor[(13, 16, 5), float32] */;
  %105 = cast(%104, dtype="float64") /* ty=Tensor[(13, 16, 5), float64] */;
  %106 = asin(%105) /* ty=Tensor[(13, 16, 5), float64] */;
  %107 = cast(%106, dtype="float64") /* ty=Tensor[(13, 16, 5), float64] */;
  %108 = %86.2;
  %109 = @func_8288() /* ty=Tensor[(8, 16, 6), float64] */;
  %110 = %91.0;
  %111 = %94.4;
  %112 = %95.0;
  %113 = less_equal(%98, %99) /* ty=Tensor[(13, 16, 5), bool] */;
  %114 = %102.6;
  %115 = sqrt(%107) /* ty=Tensor[(13, 16, 5), float64] */;
  (%108, %var_11907, %var_11908, %109, %110, meta[relay.Constant][3] /* ty=Tensor[(112), int16] */, %111, %var_11940, %112, %113, %114, meta[relay.Constant][4] /* ty=Tensor[(108), uint32] */, %115)
}

def @func_8406() -> (Tensor[(8, 16, 6), float64],) {
  %116 = @func_5213() /* ty=Tensor[(8, 16, 6), float64] */;
  (%116,)
}

def @func_6548() -> (Tensor[(8, 16, 6), float64],) {
  %118 = fn () -> (Tensor[(8, 16, 6), float64],) {
    %117 = @func_6081() /* ty=Tensor[(8, 16, 6), float64] */;
    (%117,)
  };
  %118() /* ty=(Tensor[(8, 16, 6), float64],) */
}

def @func_9299() -> (Tensor[(8, 16, 6), float64], Tensor[(6, 4, 11), float64], Tensor[(264), float32], Tensor[(8, 16, 6), float64]) {
  %119 = @func_7102() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %120 = cast(meta[relay.Constant][5] /* ty=Tensor[(264), float32] */, dtype="float32") /* ty=Tensor[(264), float32] */;
  %121 = reshape(%120, newshape=[6, 4, 11]) /* ty=Tensor[(6, 4, 11), float32] */;
  %122 = @func_339(%121) /* ty=(Tensor[(6, 4, 11), float64],) */;
  %123 = %119.0;
  %124 = %122.0;
  %125 = @func_3765() /* ty=Tensor[(8, 16, 6), float64] */;
  (%123, %124, meta[relay.Constant][5] /* ty=Tensor[(264), float32] */, %125)
}

def @func_6990() -> Tensor[(8, 16, 6), float64] {
  %127 = fn () -> Tensor[(8, 16, 6), float64] {
    %126 = @func_6547() /* ty=(Tensor[(8, 16, 6), float64],) */;
    %126.0
  };
  %127() /* ty=Tensor[(8, 16, 6), float64] */
}

def @func_4267() -> (Tensor[(8, 16, 6), float64], Tensor[(108), uint32], Tensor[(1620), uint32], Tensor[(135), float64]) {
  @func_4265() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(108), uint32], Tensor[(1620), uint32], Tensor[(135), float64]) */
}

def @func_11559() -> Tensor[(8, 16, 6), float64] {
  %129 = fn () -> Tensor[(8, 16, 6), float64] {
    %128 = @func_9382() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
    %128.0
  };
  %129() /* ty=Tensor[(8, 16, 6), float64] */
}

def @func_4554() -> (Tensor[(8, 16, 6), float64],) {
  @func_4552() /* ty=(Tensor[(8, 16, 6), float64],) */
}

def @func_3041(%var_3037: Tensor[(3, 7, 14), float64]) -> Tensor[(3, 7, 14), float64] {
  %130 = cast(%var_3037, dtype="float64") /* ty=Tensor[(3, 7, 14), float64] */;
  tan(%130) /* ty=Tensor[(3, 7, 14), float64] */
}

def @func_5215() -> Tensor[(8, 16, 6), float64] {
  @func_5213() /* ty=Tensor[(8, 16, 6), float64] */
}

def @func_3682(%var_3680: Tensor[(1620), uint32], %var_3681: Tensor[(135), float64]) -> (Tensor[(16, 2, 16), float64], Tensor[(4, 13, 8), float32], Tensor[(108), uint32], Tensor[(1620), uint32], Tensor[(3, 20), uint32], Tensor[(135), float64], Tensor[(3, 20), uint32]) {
  %147 = fn (%var_3656: Tensor[(1620), uint32], %var_3670: Tensor[(135), float64]) -> (Tensor[(16, 2, 16), float64], Tensor[(4, 13, 8), float32], Tensor[(108), uint32], Tensor[(1620), uint32], Tensor[(3, 20), uint32], Tensor[(135), float64], Tensor[(3, 20), uint32]) {
    %131 = @func_3528() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(16, 2, 16), float32], Tensor[(512), float32], Tensor[(8, 13, 5), float64], Tensor[(520), float64]) */;
    %132 = %131.2;
    %133 = cast(%132, dtype="float64") /* ty=Tensor[(16, 2, 16), float64] */;
    %134 = cast(meta[relay.Constant][6] /* ty=Tensor[(108), uint32] */, dtype="uint32") /* ty=Tensor[(108), uint32] */;
    %135 = cast(%var_3656, dtype="uint32") /* ty=Tensor[(1620), uint32] */;
    %136 = reshape(%134, newshape=[12, 9, 1]) /* ty=Tensor[(12, 9, 1), uint32] */;
    %137 = reshape(%135, newshape=[12, 9, 15]) /* ty=Tensor[(12, 9, 15), uint32] */;
    %138 = @func_2250(%136, %137) /* ty=(Tensor[(12, 9, 15), uint32], Tensor[(4, 13, 8), float32], Tensor[(416), float32]) */;
    %139 = cast(%var_3670, dtype="float64") /* ty=Tensor[(135), float64] */;
    %140 = cast(meta[relay.Constant][7] /* ty=Tensor[(3, 20), uint32] */, dtype="uint32") /* ty=Tensor[(3, 20), uint32] */;
    %141 = reshape(%139, newshape=[3, 5, 9]) /* ty=Tensor[(3, 5, 9), float64] */;
    %142 = reshape(%140, newshape=[3, 20]) /* ty=Tensor[(3, 20), uint32] */;
    %143 = @func_2874(%141, %142) /* ty=(Tensor[(12, 5, 5), uint32], Tensor[(3, 20), uint32], Tensor[(3, 5, 9), float64], Tensor[(3, 5, 9), float32]) */;
    %144 = exp(%133) /* ty=Tensor[(16, 2, 16), float64] */;
    %145 = %138.1;
    %146 = %143.1;
    (%144, %145, meta[relay.Constant][6] /* ty=Tensor[(108), uint32] */, %var_3656, %146, %var_3670, meta[relay.Constant][7] /* ty=Tensor[(3, 20), uint32] */)
  };
  %147(%var_3680, %var_3681) /* ty=(Tensor[(16, 2, 16), float64], Tensor[(4, 13, 8), float32], Tensor[(108), uint32], Tensor[(1620), uint32], Tensor[(3, 20), uint32], Tensor[(135), float64], Tensor[(3, 20), uint32]) */
}

def @func_4964() -> (Tensor[(8, 16, 6), float64], Tensor[(12, 5, 5), uint32], Tensor[(60), uint32]) {
  %148 = cast(meta[relay.Constant][8] /* ty=Tensor[(60), uint32] */, dtype="uint32") /* ty=Tensor[(60), uint32] */;
  %149 = reshape(%148, newshape=[12, 1, 5]) /* ty=Tensor[(12, 1, 5), uint32] */;
  %150 = @func_225(%149) /* ty=(Tensor[(12, 5, 5), uint32], Tensor[(3, 2, 2), bool], Tensor[(3, 2, 2), float32]) */;
  %151 = @func_4026() /* ty=Tensor[(8, 16, 6), float64] */;
  %152 = %150.0;
  (%151, %152, meta[relay.Constant][8] /* ty=Tensor[(60), uint32] */)
}

def @func_4083() -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) {
  %157 = fn () -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) {
    %153 = @func_3795() /* ty=(Tensor[(8, 16, 6), float64],) */;
    %154 = @func_3795() /* ty=(Tensor[(8, 16, 6), float64],) */;
    %155 = %153.0;
    %156 = %154.0;
    (%155, %156)
  };
  %157() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */
}

def @func_3283() -> (Tensor[(8, 16, 6), float64],) {
  %158 = cast(meta[relay.Constant][9] /* ty=Tensor[(8, 16, 6), float64] */, dtype="float64") /* ty=Tensor[(8, 16, 6), float64] */;
  %159 = asinh(%158) /* ty=Tensor[(8, 16, 6), float64] */;
  (%159,)
}

def @func_7145() -> Tensor[(8, 16, 6), float64] {
  @func_7143() /* ty=Tensor[(8, 16, 6), float64] */
}

def @func_8726() -> (Tensor[(3, 2, 2), bool], Tensor[(9, 5, 9), float32], Tensor[(405), float32], Tensor[(3, 2, 2), float64]) {
  %160 = @func_5949() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(3, 2, 2), bool], Tensor[(3, 20), uint32]) */;
  %161 = cast(meta[relay.Constant][10] /* ty=Tensor[(405), float32] */, dtype="float32") /* ty=Tensor[(405), float32] */;
  %162 = reshape(%161, newshape=[9, 5, 9]) /* ty=Tensor[(9, 5, 9), float32] */;
  %163 = %160.1;
  %164 = cast(%163, dtype="float64") /* ty=Tensor[(3, 2, 2), float64] */;
  %165 = reshape(%164, newshape=[3, 2, 2]) /* ty=Tensor[(3, 2, 2), float64] */;
  %166 = @func_115(%165) /* ty=(Tensor[(3, 2, 2), float64],) */;
  %167 = @func_2141(%162) /* ty=Tensor[(9, 5, 9), float32] */;
  %168 = %166.0;
  (%163, %167, meta[relay.Constant][10] /* ty=Tensor[(405), float32] */, %168)
}

def @func_8567() -> Tensor[(8, 16, 6), float64] {
  %170 = fn () -> Tensor[(8, 16, 6), float64] {
    %169 = @func_7227() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
    %169.0
  };
  %170() /* ty=Tensor[(8, 16, 6), float64] */
}

def @func_8935(%var_8933: Tensor[(896), float32], %var_8934: Tensor[(7, 5), float32]) -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], uint16, Tensor[(8, 16, 6), float32], Tensor[(8, 16, 6), float64], Tensor[(5, 11, 2), uint32], Tensor[(896), float32], Tensor[(7, 5), float32], Tensor[(3, 10, 2), bool], Tensor[(3, 7, 14), float64], Tensor[(7, 42), float64]) {
  @func_8931(%var_8933, %var_8934) /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], uint16, Tensor[(8, 16, 6), float32], Tensor[(8, 16, 6), float64], Tensor[(5, 11, 2), uint32], Tensor[(896), float32], Tensor[(7, 5), float32], Tensor[(3, 10, 2), bool], Tensor[(3, 7, 14), float64], Tensor[(7, 42), float64]) */
}

def @func_9250() -> (Tensor[(8, 16, 6), float64], Tensor[(108), uint32]) {
  %175 = fn () -> (Tensor[(8, 16, 6), float64], Tensor[(108), uint32]) {
    %171 = @func_8406() /* ty=(Tensor[(8, 16, 6), float64],) */;
    %172 = @func_4265() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(108), uint32], Tensor[(1620), uint32], Tensor[(135), float64]) */;
    %173 = %171.0;
    %174 = %172.1;
    (%173, %174)
  };
  %175() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(108), uint32]) */
}

def @func_9206(%var_9205: Tensor[(520), float64]) -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(112, 8), float32], Tensor[(7, 5), float32], Tensor[(8, 16, 6), float64], Tensor[(3, 10, 8), float64], Tensor[(240), float64], Tensor[(8, 16, 6), bool], Tensor[(520), float64], Tensor[(520), uint8]) {
  %210 = fn (%var_9164: Tensor[(520), float64]) -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(112, 8), float32], Tensor[(7, 5), float32], Tensor[(8, 16, 6), float64], Tensor[(3, 10, 8), float64], Tensor[(240), float64], Tensor[(8, 16, 6), bool], Tensor[(520), float64], Tensor[(520), uint8]) {
    %176 = @func_4082() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
    %177 = @func_8227() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(135), float64], Tensor[(270, 6), uint32], Tensor[(4, 13, 8), float32], Tensor[(208, 2), float32]) */;
    %178 = cast(meta[relay.Constant][11] /* ty=Tensor[(112, 8), float32] */, dtype="float32") /* ty=Tensor[(112, 8), float32] */;
    %179 = cast(meta[relay.Constant][12] /* ty=Tensor[(7, 5), float32] */, dtype="float32") /* ty=Tensor[(7, 5), float32] */;
    %180 = reshape(%178, newshape=[896]) /* ty=Tensor[(896), float32] */;
    %181 = reshape(%179, newshape=[7, 5]) /* ty=Tensor[(7, 5), float32] */;
    %182 = @func_8931(%180, %181) /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], uint16, Tensor[(8, 16, 6), float32], Tensor[(8, 16, 6), float64], Tensor[(5, 11, 2), uint32], Tensor[(896), float32], Tensor[(7, 5), float32], Tensor[(3, 10, 2), bool], Tensor[(3, 7, 14), float64], Tensor[(7, 42), float64]) */;
    %183 = @func_7227() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
    %184 = cast(meta[relay.Constant][13] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
    %185 = reshape(%184, newshape=[3, 10, 8]) /* ty=Tensor[(3, 10, 8), float64] */;
    %186 = %183.0;
    %187 = cast(%186, dtype="float64") /* ty=Tensor[(8, 16, 6), float64] */;
    %188 = reshape(%187, newshape=[8, 16, 6]) /* ty=Tensor[(8, 16, 6), float64] */;
    %189 = @func_7067() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(520), float64]) */;
    %190 = %189.1;
    %191 = cast(%190, dtype="float64") /* ty=Tensor[(520), float64] */;
    %192 = sqrt(%191) /* ty=Tensor[(520), float64] */;
    %193 = cast(%var_9164, dtype="uint32") /* ty=Tensor[(520), uint32] */;
    %194 = shape_of(%192, dtype="int32") /* ty=Tensor[(1), int32] */;
    %195 = cast(%192, dtype="uint32") /* ty=Tensor[(520), uint32] */;
    %196 = dyn.reshape(%193, %194, newshape=[]) /* ty=Tensor[(?), uint32] */;
    %197 = multiply(%195, %196) /* ty=Tensor[(520), uint32] */;
    %198 = cast(%197, dtype="float64") /* ty=Tensor[(520), float64] */;
    %199 = cast(%var_9164, dtype="uint8") /* ty=Tensor[(520), uint8] */;
    %200 = shape_of(%192, dtype="int32") /* ty=Tensor[(1), int32] */;
    %201 = cast(%192, dtype="uint8") /* ty=Tensor[(520), uint8] */;
    %202 = dyn.reshape(%199, %200, newshape=[]) /* ty=Tensor[(?), uint8] */;
    %203 = %176.1;
    %204 = %177.0;
    %205 = %182.0;
    %206 = @func_4502(%185) /* ty=Tensor[(3, 10, 8), float64] */;
    %207 = @func_7475(%188) /* ty=Tensor[(8, 16, 6), bool] */;
    %208 = exp(%198) /* ty=Tensor[(520), float64] */;
    %209 = add(%201, %202) /* ty=Tensor[(520), uint8] */;
    (%203, %204, %205, meta[relay.Constant][11] /* ty=Tensor[(112, 8), float32] */, meta[relay.Constant][12] /* ty=Tensor[(7, 5), float32] */, %186, %206, meta[relay.Constant][13] /* ty=Tensor[(240), float64] */, %207, %208, %209)
  };
  %210(%var_9205) /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(112, 8), float32], Tensor[(7, 5), float32], Tensor[(8, 16, 6), float64], Tensor[(3, 10, 8), float64], Tensor[(240), float64], Tensor[(8, 16, 6), bool], Tensor[(520), float64], Tensor[(520), uint8]) */
}

def @func_5951() -> (Tensor[(8, 16, 6), float64], Tensor[(3, 2, 2), bool], Tensor[(3, 20), uint32]) {
  @func_5949() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(3, 2, 2), bool], Tensor[(3, 20), uint32]) */
}

def @func_11050(%var_11004: Tensor[(195, 9), float32], %var_11035: Tensor[(455), int32]) -> (Tensor[(12, 5, 5), uint32], Tensor[(15, 9, 13), bool], Tensor[(195, 9), float32], Tensor[(16, 2, 16), bool], Tensor[(7, 13, 5), float64], Tensor[(455), float32], Tensor[(108), uint32], Tensor[(455), float64]) {
  %211 = @func_4964() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(12, 5, 5), uint32], Tensor[(60), uint32]) */;
  %212 = cast(%var_11004, dtype="float32") /* ty=Tensor[(195, 9), float32] */;
  %213 = reshape(%212, newshape=[15, 9, 13]) /* ty=Tensor[(15, 9, 13), float32] */;
  %214 = cast(meta[relay.Constant][14] /* ty=Tensor[(512), float32] */, dtype="float32") /* ty=Tensor[(512), float32] */;
  %215 = cast(meta[relay.Constant][14] /* ty=Tensor[(512), float32] */, dtype="float32") /* ty=Tensor[(512), float32] */;
  %216 = reshape(%214, newshape=[16, 2, 16]) /* ty=Tensor[(16, 2, 16), float32] */;
  %217 = reshape(%215, newshape=[16, 2, 16]) /* ty=Tensor[(16, 2, 16), float32] */;
  %218 = @func_3155(%216, %217) /* ty=Tensor[(16, 2, 16), float32] */;
  %219 = cast(%218, dtype="float64") /* ty=Tensor[(16, 2, 16), float64] */;
  %220 = cosh(%219) /* ty=Tensor[(16, 2, 16), float64] */;
  %221 = cast(meta[relay.Constant][14] /* ty=Tensor[(512), float32] */, dtype="bool") /* ty=Tensor[(512), bool] */;
  %222 = shape_of(%220, dtype="int32") /* ty=Tensor[(3), int32] */;
  %223 = cast(%220, dtype="bool") /* ty=Tensor[(16, 2, 16), bool] */;
  %224 = dyn.reshape(%221, %222, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %225 = cast(%var_11035, dtype="int32") /* ty=Tensor[(455), int32] */;
  %226 = cast(%var_11035, dtype="int32") /* ty=Tensor[(455), int32] */;
  %227 = reshape(%225, newshape=[5, 7, 13]) /* ty=Tensor[(5, 7, 13), int32] */;
  %228 = reshape(%226, newshape=[5, 7, 13]) /* ty=Tensor[(5, 7, 13), int32] */;
  %229 = @func_10374(%227, %228) /* ty=(Tensor[(5, 7, 13), bool], Tensor[(7, 13, 5), float64], Tensor[(6, 44), float32]) */;
  %230 = cast(%var_11035, dtype="float32") /* ty=Tensor[(455), float32] */;
  %231 = @func_9249() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(108), uint32]) */;
  %232 = cast(%var_11035, dtype="float64") /* ty=Tensor[(455), float64] */;
  %233 = %211.1;
  %234 = @func_7976(%213) /* ty=Tensor[(15, 9, 13), bool] */;
  %235 = less_equal(%223, %224) /* ty=Tensor[(16, 2, 16), bool] */;
  %236 = %229.1;
  %237 = acosh(%230) /* ty=Tensor[(455), float32] */;
  %238 = %231.1;
  %239 = exp(%232) /* ty=Tensor[(455), float64] */;
  (%233, %234, %var_11004, %235, %236, %237, %238, %239)
}

def @func_7412() -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float32], Tensor[(8, 16, 6), float32]) {
  %246 = fn () -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float32], Tensor[(8, 16, 6), float32]) {
    %240 = @func_5928() /* ty=Tensor[(8, 16, 6), float64] */;
    %241 = cast(%240, dtype="float32") /* ty=Tensor[(8, 16, 6), float32] */;
    %242 = @func_5112() /* ty=(Tensor[(8, 16, 6), float32], Tensor[(3, 2, 2), float32], Tensor[(60), uint32]) */;
    %243 = @func_5696() /* ty=Tensor[(8, 16, 6), float64] */;
    %244 = acos(%241) /* ty=Tensor[(8, 16, 6), float32] */;
    %245 = %242.0;
    (%243, %244, %245)
  };
  %246() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float32], Tensor[(8, 16, 6), float32]) */
}

def @func_3530() -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(16, 2, 16), float32], Tensor[(512), float32], Tensor[(8, 13, 5), float64], Tensor[(520), float64]) {
  @func_3528() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(16, 2, 16), float32], Tensor[(512), float32], Tensor[(8, 13, 5), float64], Tensor[(520), float64]) */
}

def @func_8290() -> Tensor[(8, 16, 6), float64] {
  @func_8288() /* ty=Tensor[(8, 16, 6), float64] */
}

def @func_4504(%var_4503: Tensor[(3, 10, 8), float64]) -> Tensor[(3, 10, 8), float64] {
  %251 = fn (%var_4495: Tensor[(3, 10, 8), float64]) -> Tensor[(3, 10, 8), float64] {
    %247 = cast(%var_4495, dtype="float64") /* ty=Tensor[(3, 10, 8), float64] */;
    %248 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(3, 10, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %249 = cast(meta[relay.Constant][15] /* ty=Tensor[(3, 10, 8), float64] */, dtype="float64") /* ty=Tensor[(3, 10, 8), float64] */;
    %250 = dyn.reshape(%247, %248, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    floor_mod(%249, %250) /* ty=Tensor[(3, 10, 8), float64] */
  };
  %251(%var_4503) /* ty=Tensor[(3, 10, 8), float64] */
}

def @func_228(%var_226: Tensor[(12, 1, 5), uint32]) -> (Tensor[(12, 5, 5), uint32], Tensor[(3, 2, 2), bool], Tensor[(3, 2, 2), float32]) {
  @func_225(%var_226) /* ty=(Tensor[(12, 5, 5), uint32], Tensor[(3, 2, 2), bool], Tensor[(3, 2, 2), float32]) */
}

def @func_7239() -> Tensor[(8, 16, 6), float64] {
  %253 = fn () -> Tensor[(8, 16, 6), float64] {
    %252 = @func_6882() /* ty=(Tensor[(8, 16, 6), float64],) */;
    %252.0
  };
  %253() /* ty=Tensor[(8, 16, 6), float64] */
}

def @func_8106() -> Tensor[(8, 16, 6), float64] {
  %254 = fn () -> Tensor[(8, 16, 6), float64] {
    @func_4026() /* ty=Tensor[(8, 16, 6), float64] */
  };
  %254() /* ty=Tensor[(8, 16, 6), float64] */
}

def @func_4777() -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) {
  %255 = @func_3707() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
  %256 = @func_4552() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %257 = %256.0;
  %258 = cast(%257, dtype="float32") /* ty=Tensor[(8, 16, 6), float32] */;
  %259 = sin(%258) /* ty=Tensor[(8, 16, 6), float32] */;
  %260 = cast(%259, dtype="float64") /* ty=Tensor[(8, 16, 6), float64] */;
  %261 = rsqrt(%260) /* ty=Tensor[(8, 16, 6), float64] */;
  %262 = cast(%259, dtype="float32") /* ty=Tensor[(8, 16, 6), float32] */;
  %263 = shape_of(%261, dtype="int32") /* ty=Tensor[(3), int32] */;
  %264 = cast(%261, dtype="float32") /* ty=Tensor[(8, 16, 6), float32] */;
  %265 = dyn.reshape(%262, %263, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %266 = add(%264, %265) /* ty=Tensor[(8, 16, 6), float32] */;
  %267 = cast(%257, dtype="uint32") /* ty=Tensor[(8, 16, 6), uint32] */;
  %268 = shape_of(%266, dtype="int32") /* ty=Tensor[(3), int32] */;
  %269 = cast(%266, dtype="uint32") /* ty=Tensor[(8, 16, 6), uint32] */;
  %270 = dyn.reshape(%267, %268, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %271 = bitwise_or(%269, %270) /* ty=Tensor[(8, 16, 6), uint32] */;
  %272 = cast(%266, dtype="uint8") /* ty=Tensor[(8, 16, 6), uint8] */;
  %273 = shape_of(%259, dtype="int32") /* ty=Tensor[(3), int32] */;
  %274 = cast(%259, dtype="uint8") /* ty=Tensor[(8, 16, 6), uint8] */;
  %275 = dyn.reshape(%272, %273, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %276 = subtract(%274, %275) /* ty=Tensor[(8, 16, 6), uint8] */;
  %277 = cast(%276, dtype="float64") /* ty=Tensor[(8, 16, 6), float64] */;
  %278 = shape_of(%271, dtype="int32") /* ty=Tensor[(3), int32] */;
  %279 = cast(%271, dtype="float64") /* ty=Tensor[(8, 16, 6), float64] */;
  %280 = dyn.reshape(%277, %278, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %281 = %255.1;
  %282 = divide(%279, %280) /* ty=Tensor[(8, 16, 6), float64] */;
  (%281, %282)
}

def @func_6556() -> (Tensor[(3, 20), uint32],) {
  %285 = fn () -> (Tensor[(3, 20), uint32],) {
    %283 = @func_5949() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(3, 2, 2), bool], Tensor[(3, 20), uint32]) */;
    %284 = %283.2;
    (%284,)
  };
  %285() /* ty=(Tensor[(3, 20), uint32],) */
}

def @func_4807() -> (Tensor[(8, 16, 6), float64],) {
  %288 = fn () -> (Tensor[(8, 16, 6), float64],) {
    %286 = @func_3809() /* ty=(Tensor[(8, 16, 6), float64],) */;
    %287 = %286.0;
    (%287,)
  };
  %288() /* ty=(Tensor[(8, 16, 6), float64],) */
}

def @func_5333() -> (Tensor[(8, 16, 6), float64],) {
  %289 = @func_4777() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
  %290 = %289.0;
  (%290,)
}

def @func_9398(%var_9397: Tensor[(11, 3, 5), float64]) -> Tensor[(11, 3, 5), float64] {
  %292 = fn (%var_9392: Tensor[(11, 3, 5), float64]) -> Tensor[(11, 3, 5), float64] {
    %291 = cast(%var_9392, dtype="float64") /* ty=Tensor[(11, 3, 5), float64] */;
    sin(%291) /* ty=Tensor[(11, 3, 5), float64] */
  };
  %292(%var_9397) /* ty=Tensor[(11, 3, 5), float64] */
}

def @func_9435() -> (Tensor[(8, 16, 6), float64],) {
  %293 = @func_4129() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
  %294 = %293.1;
  (%294,)
}

def @func_8681() -> (Tensor[(3, 2, 2), float32],) {
  %297 = fn () -> (Tensor[(3, 2, 2), float32],) {
    %295 = @func_5112() /* ty=(Tensor[(8, 16, 6), float32], Tensor[(3, 2, 2), float32], Tensor[(60), uint32]) */;
    %296 = %295.1;
    (%296,)
  };
  %297() /* ty=(Tensor[(3, 2, 2), float32],) */
}

def @func_9011() -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(294), float64], Tensor[(8, 16, 6), float64]) {
  %305 = fn () -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(294), float64], Tensor[(8, 16, 6), float64]) {
    %298 = cast(meta[relay.Constant][16] /* ty=Tensor[(294), float64] */, dtype="float64") /* ty=Tensor[(294), float64] */;
    %299 = reshape(%298, newshape=[294, 1]) /* ty=Tensor[(294, 1), float64] */;
    %300 = @func_5887(%299) /* ty=(Tensor[(8, 16, 6), float64], Tensor[(3, 7, 14), float64], Tensor[(294, 1), float64]) */;
    %301 = @func_7227() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
    %302 = @func_7282() /* ty=Tensor[(8, 16, 6), float64] */;
    %303 = %300.0;
    %304 = %301.0;
    (%302, %303, meta[relay.Constant][16] /* ty=Tensor[(294), float64] */, %304)
  };
  %305() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(294), float64], Tensor[(8, 16, 6), float64]) */
}

def @func_8823(%var_8822: Tensor[(135), float64]) -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(4, 13, 8), float32], Tensor[(1620), uint32], Tensor[(135), float64]) {
  %316 = fn (%var_8795: Tensor[(135), float64]) -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(4, 13, 8), float32], Tensor[(1620), uint32], Tensor[(135), float64]) {
    %306 = @func_5572() /* ty=(Tensor[(8, 16, 6), float64],) */;
    %307 = @func_4777() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
    %308 = cast(meta[relay.Constant][17] /* ty=Tensor[(1620), uint32] */, dtype="uint32") /* ty=Tensor[(1620), uint32] */;
    %309 = cast(%var_8795, dtype="float64") /* ty=Tensor[(135), float64] */;
    %310 = reshape(%308, newshape=[1620]) /* ty=Tensor[(1620), uint32] */;
    %311 = reshape(%309, newshape=[135]) /* ty=Tensor[(135), float64] */;
    %312 = @func_3679(%310, %311) /* ty=(Tensor[(16, 2, 16), float64], Tensor[(4, 13, 8), float32], Tensor[(108), uint32], Tensor[(1620), uint32], Tensor[(3, 20), uint32], Tensor[(135), float64], Tensor[(3, 20), uint32]) */;
    %313 = %306.0;
    %314 = %307.0;
    %315 = %312.1;
    (%313, %314, %315, meta[relay.Constant][17] /* ty=Tensor[(1620), uint32] */, %var_8795)
  };
  %316(%var_8822) /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(4, 13, 8), float32], Tensor[(1620), uint32], Tensor[(135), float64]) */
}

def @func_6883() -> (Tensor[(8, 16, 6), float64],) {
  %318 = fn () -> (Tensor[(8, 16, 6), float64],) {
    %317 = @func_5696() /* ty=Tensor[(8, 16, 6), float64] */;
    (%317,)
  };
  %318() /* ty=(Tensor[(8, 16, 6), float64],) */
}

def @func_5599() -> (Tensor[(8, 16, 6), float64],) {
  %319 = @func_3629() /* ty=Tensor[(8, 16, 6), float64] */;
  (%319,)
}

def @func_5908(%var_5900: Tensor[(416), float32]) -> (Tensor[(8, 16, 6), float64], Tensor[(416), float32], Tensor[(4, 13, 8), float32]) {
  %320 = @func_3809() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %321 = cast(%var_5900, dtype="float32") /* ty=Tensor[(416), float32] */;
  %322 = reshape(%321, newshape=[4, 13, 8]) /* ty=Tensor[(4, 13, 8), float32] */;
  %323 = @func_1274(%322) /* ty=Tensor[(4, 13, 8), float32] */;
  %324 = cast(%323, dtype="float32") /* ty=Tensor[(4, 13, 8), float32] */;
  %325 = %320.0;
  %326 = exp(%324) /* ty=Tensor[(4, 13, 8), float32] */;
  (%325, %var_5900, %326)
}

def @func_2878(%var_2876: Tensor[(3, 5, 9), float64], %var_2877: Tensor[(3, 20), uint32]) -> (Tensor[(12, 5, 5), uint32], Tensor[(3, 20), uint32], Tensor[(3, 5, 9), float64], Tensor[(3, 5, 9), float32]) {
  @func_2874(%var_2876, %var_2877) /* ty=(Tensor[(12, 5, 5), uint32], Tensor[(3, 20), uint32], Tensor[(3, 5, 9), float64], Tensor[(3, 5, 9), float32]) */
}

def @func_5385() -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(12), float64], Tensor[(108), uint32]) {
  %335 = fn () -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(12), float64], Tensor[(108), uint32]) {
    %327 = @func_3795() /* ty=(Tensor[(8, 16, 6), float64],) */;
    %328 = cast(meta[relay.Constant][18] /* ty=Tensor[(12), float64] */, dtype="float64") /* ty=Tensor[(12), float64] */;
    %329 = reshape(%328, newshape=[12]) /* ty=Tensor[(12), float64] */;
    %330 = @func_4678(%329) /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(3, 2, 2), float64], Tensor[(12), float64]) */;
    %331 = @func_4265() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(108), uint32], Tensor[(1620), uint32], Tensor[(135), float64]) */;
    %332 = %327.0;
    %333 = %330.0;
    %334 = %331.1;
    (%332, %333, meta[relay.Constant][18] /* ty=Tensor[(12), float64] */, %334)
  };
  %335() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(12), float64], Tensor[(108), uint32]) */
}

def @func_7069() -> (Tensor[(8, 16, 6), float64], Tensor[(520), float64]) {
  @func_7067() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(520), float64]) */
}

def @func_11156() -> (Tensor[(520), float64],) {
  %336 = @func_7067() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(520), float64]) */;
  %337 = %336.1;
  (%337,)
}

def @func_4910(%var_4905: Tensor[(768), float64], %var_4906: Tensor[(1, 1620), uint32], %var_4907: Tensor[(11, 1620), uint32], %var_4908: Tensor[(11, 1620), float32], %var_4909: Tensor[(108), uint32]) -> (Tensor[(135), float64], Tensor[(135), float64], Tensor[(768), float64], Tensor[(7, 1, 5), float32], Tensor[(11, 1620), uint64], Tensor[(11, 1620), uint8], Tensor[(416), float32], Tensor[(108), uint32], Tensor[(35, 1), float32]) {
  @func_4903(%var_4905, %var_4906, %var_4907, %var_4908, %var_4909) /* ty=(Tensor[(135), float64], Tensor[(135), float64], Tensor[(768), float64], Tensor[(7, 1, 5), float32], Tensor[(11, 1620), uint64], Tensor[(11, 1620), uint8], Tensor[(416), float32], Tensor[(108), uint32], Tensor[(35, 1), float32]) */
}

def @func_6500(%var_6481: Tensor[(13, 13, 12), float64], %var_6482: Tensor[(13, 13, 12), float64]) -> (Tensor[(13, 13, 12), float64], Tensor[(8, 16, 6), float64]) {
  %338 = cast(%var_6482, dtype="float64") /* ty=Tensor[(13, 13, 12), float64] */;
  %339 = shape_of(%var_6481, dtype="int32") /* ty=Tensor[(3), int32] */;
  %340 = cast(%var_6481, dtype="float64") /* ty=Tensor[(13, 13, 12), float64] */;
  %341 = dyn.reshape(%338, %339, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %342 = @func_5599() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %343 = divide(%340, %341) /* ty=Tensor[(13, 13, 12), float64] */;
  %344 = %342.0;
  (%343, %344)
}

def @func_11731(%var_11729: bool, %var_11730: Tensor[(16, 1, 6), bool]) -> (Tensor[(16, 1, 6), bool], Tensor[(8, 16, 6), float64]) {
  @func_11727(%var_11729, %var_11730) /* ty=(Tensor[(16, 1, 6), bool], Tensor[(8, 16, 6), float64]) */
}

def @func_10293(%var_10292: Tensor[(455), float32]) -> (Tensor[(8, 16, 6), float64], Tensor[(6, 4, 11), float64], Tensor[(455), float32], Tensor[(1, 264), float32]) {
  %353 = fn (%var_10272: Tensor[(455), float32]) -> (Tensor[(8, 16, 6), float64], Tensor[(6, 4, 11), float64], Tensor[(455), float32], Tensor[(1, 264), float32]) {
    %345 = @func_9709() /* ty=(Tensor[(8, 16, 6), float64],) */;
    %346 = cast(%var_10272, dtype="float32") /* ty=Tensor[(455), float32] */;
    %347 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 264), float32] */, dtype="float32") /* ty=Tensor[(1, 264), float32] */;
    %348 = reshape(%346, newshape=[7, 13, 5]) /* ty=Tensor[(7, 13, 5), float32] */;
    %349 = reshape(%347, newshape=[264]) /* ty=Tensor[(264), float32] */;
    %350 = @func_3976(%348, %349) /* ty=(Tensor[(7, 13, 5), float64], Tensor[(264), float32], Tensor[(6, 4, 11), float64], Tensor[(6, 4, 11), float64]) */;
    %351 = %345.0;
    %352 = %350.2;
    (%351, %352, %var_10272, meta[relay.Constant][19] /* ty=Tensor[(1, 264), float32] */)
  };
  %353(%var_10292) /* ty=(Tensor[(8, 16, 6), float64], Tensor[(6, 4, 11), float64], Tensor[(455), float32], Tensor[(1, 264), float32]) */
}

def @func_6081() -> Tensor[(8, 16, 6), float64] {
  %354 = @func_4777() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
  %354.0
}

def @func_10374(%var_10345: Tensor[(5, 7, 13), int32], %var_10346: Tensor[(5, 7, 13), int32]) -> (Tensor[(5, 7, 13), bool], Tensor[(7, 13, 5), float64], Tensor[(6, 44), float32]) {
  %355 = cast(%var_10346, dtype="int32") /* ty=Tensor[(5, 7, 13), int32] */;
  %356 = shape_of(%var_10345, dtype="int32") /* ty=Tensor[(3), int32] */;
  %357 = cast(%var_10345, dtype="int32") /* ty=Tensor[(5, 7, 13), int32] */;
  %358 = dyn.reshape(%355, %356, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %359 = logical_xor(%357, %358) /* ty=Tensor[(5, 7, 13), int32] */;
  %360 = cast(%var_10345, dtype="bool") /* ty=Tensor[(5, 7, 13), bool] */;
  %361 = shape_of(%359, dtype="int32") /* ty=Tensor[(3), int32] */;
  %362 = cast(%359, dtype="bool") /* ty=Tensor[(5, 7, 13), bool] */;
  %363 = dyn.reshape(%360, %361, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %364 = cast(%359, dtype="float32") /* ty=Tensor[(5, 7, 13), float32] */;
  %365 = cast(meta[relay.Constant][20] /* ty=Tensor[(6, 44), float32] */, dtype="float32") /* ty=Tensor[(6, 44), float32] */;
  %366 = reshape(%364, newshape=[7, 13, 5]) /* ty=Tensor[(7, 13, 5), float32] */;
  %367 = reshape(%365, newshape=[264]) /* ty=Tensor[(264), float32] */;
  %368 = @func_3976(%366, %367) /* ty=(Tensor[(7, 13, 5), float64], Tensor[(264), float32], Tensor[(6, 4, 11), float64], Tensor[(6, 4, 11), float64]) */;
  %369 = greater_equal(%362, %363) /* ty=Tensor[(5, 7, 13), bool] */;
  %370 = %368.0;
  (%369, %370, meta[relay.Constant][20] /* ty=Tensor[(6, 44), float32] */)
}

def @func_8628() -> Tensor[(8, 16, 6), float64] {
  @func_8626() /* ty=Tensor[(8, 16, 6), float64] */
}

def @func_11817() -> (Tensor[(8, 3, 3), float64], Tensor[(8, 16, 6), float64]) {
  %371 = cast(meta[relay.Constant][21] /* ty=Tensor[(8, 3, 3), float64] */, dtype="float64") /* ty=Tensor[(8, 3, 3), float64] */;
  %372 = @func_4265() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(108), uint32], Tensor[(1620), uint32], Tensor[(135), float64]) */;
  %373 = sinh(%371) /* ty=Tensor[(8, 3, 3), float64] */;
  %374 = %372.0;
  (%373, %374)
}

def @func_3796() -> (Tensor[(8, 16, 6), float64],) {
  %377 = fn () -> (Tensor[(8, 16, 6), float64],) {
    %375 = @func_3528() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(16, 2, 16), float32], Tensor[(512), float32], Tensor[(8, 13, 5), float64], Tensor[(520), float64]) */;
    %376 = %375.1;
    (%376,)
  };
  %377() /* ty=(Tensor[(8, 16, 6), float64],) */
}

def @func_6504(%var_6502: Tensor[(13, 13, 12), float64], %var_6503: Tensor[(13, 13, 12), float64]) -> (Tensor[(13, 13, 12), float64], Tensor[(8, 16, 6), float64]) {
  @func_6500(%var_6502, %var_6503) /* ty=(Tensor[(13, 13, 12), float64], Tensor[(8, 16, 6), float64]) */
}

def @func_341(%var_340: Tensor[(6, 4, 11), float32]) -> (Tensor[(6, 4, 11), float64],) {
  %382 = fn (%var_324: Tensor[(6, 4, 11), float32]) -> (Tensor[(6, 4, 11), float64],) {
    %378 = cast(%var_324, dtype="float32") /* ty=Tensor[(6, 4, 11), float32] */;
    %379 = exp(%378) /* ty=Tensor[(6, 4, 11), float32] */;
    %380 = cast(%379, dtype="float64") /* ty=Tensor[(6, 4, 11), float64] */;
    %381 = asinh(%380) /* ty=Tensor[(6, 4, 11), float64] */;
    (%381,)
  };
  %382(%var_340) /* ty=(Tensor[(6, 4, 11), float64],) */
}

def @func_9050() -> Tensor[(8, 16, 6), float64] {
  %383 = @func_4552() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %383.0
}

def @func_3285() -> (Tensor[(8, 16, 6), float64],) {
  @func_3283() /* ty=(Tensor[(8, 16, 6), float64],) */
}

def @func_1277(%var_1275: Tensor[(4, 13, 8), float32]) -> Tensor[(4, 13, 8), float32] {
  @func_1274(%var_1275) /* ty=Tensor[(4, 13, 8), float32] */
}

def @func_7067() -> (Tensor[(8, 16, 6), float64], Tensor[(520), float64]) {
  %384 = @func_6279() /* ty=(Tensor[(520), float64],) */;
  %385 = @func_3765() /* ty=Tensor[(8, 16, 6), float64] */;
  %386 = %384.0;
  (%385, %386)
}

def @func_5112() -> (Tensor[(8, 16, 6), float32], Tensor[(3, 2, 2), float32], Tensor[(60), uint32]) {
  %387 = @func_4777() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
  %388 = %387.1;
  %389 = cast(%388, dtype="float32") /* ty=Tensor[(8, 16, 6), float32] */;
  %390 = cast(meta[relay.Constant][22] /* ty=Tensor[(60), uint32] */, dtype="uint32") /* ty=Tensor[(60), uint32] */;
  %391 = reshape(%390, newshape=[12, 1, 5]) /* ty=Tensor[(12, 1, 5), uint32] */;
  %392 = @func_225(%391) /* ty=(Tensor[(12, 5, 5), uint32], Tensor[(3, 2, 2), bool], Tensor[(3, 2, 2), float32]) */;
  %393 = cosh(%389) /* ty=Tensor[(8, 16, 6), float32] */;
  %394 = %392.2;
  (%393, %394, meta[relay.Constant][22] /* ty=Tensor[(60), uint32] */)
}

def @func_3708() -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) {
  %399 = fn () -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) {
    %395 = @func_3283() /* ty=(Tensor[(8, 16, 6), float64],) */;
    %396 = @func_3283() /* ty=(Tensor[(8, 16, 6), float64],) */;
    %397 = %395.0;
    %398 = %396.0;
    (%397, %398)
  };
  %399() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */
}

def @func_5496(%var_5495: Tensor[(132, 2), float32]) -> (Tensor[(8, 16, 6), float64], Tensor[(6, 4, 11), float64], Tensor[(455), float32], Tensor[(132, 2), bool], Tensor[(7, 1, 5), float32], Tensor[(1, 35), float32]) {
  %417 = fn (%var_5469: Tensor[(132, 2), float32]) -> (Tensor[(8, 16, 6), float64], Tensor[(6, 4, 11), float64], Tensor[(455), float32], Tensor[(132, 2), bool], Tensor[(7, 1, 5), float32], Tensor[(1, 35), float32]) {
    %400 = @func_5333() /* ty=(Tensor[(8, 16, 6), float64],) */;
    %401 = cast(meta[relay.Constant][23] /* ty=Tensor[(455), float32] */, dtype="float32") /* ty=Tensor[(455), float32] */;
    %402 = cast(%var_5469, dtype="float32") /* ty=Tensor[(132, 2), float32] */;
    %403 = reshape(%401, newshape=[7, 13, 5]) /* ty=Tensor[(7, 13, 5), float32] */;
    %404 = reshape(%402, newshape=[264]) /* ty=Tensor[(264), float32] */;
    %405 = @func_3976(%403, %404) /* ty=(Tensor[(7, 13, 5), float64], Tensor[(264), float32], Tensor[(6, 4, 11), float64], Tensor[(6, 4, 11), float64]) */;
    %406 = cast(meta[relay.Constant][24] /* ty=Tensor[(132, 2), float32] */, dtype="bool") /* ty=Tensor[(132, 2), bool] */;
    %407 = shape_of(%var_5469, dtype="int32") /* ty=Tensor[(2), int32] */;
    %408 = cast(%var_5469, dtype="bool") /* ty=Tensor[(132, 2), bool] */;
    %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %410 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 35), float32] */, dtype="float32") /* ty=Tensor[(1, 35), float32] */;
    %411 = reshape(%410, newshape=[7, 1, 5]) /* ty=Tensor[(7, 1, 5), float32] */;
    %412 = @func_364(%411) /* ty=(Tensor[(7, 1, 5), float32], Tensor[(7, 1, 5), float32]) */;
    %413 = %400.0;
    %414 = %405.3;
    %415 = not_equal(%408, %409) /* ty=Tensor[(132, 2), bool] */;
    %416 = %412.1;
    (%413, %414, meta[relay.Constant][23] /* ty=Tensor[(455), float32] */, %415, %416, meta[relay.Constant][25] /* ty=Tensor[(1, 35), float32] */)
  };
  %417(%var_5495) /* ty=(Tensor[(8, 16, 6), float64], Tensor[(6, 4, 11), float64], Tensor[(455), float32], Tensor[(132, 2), bool], Tensor[(7, 1, 5), float32], Tensor[(1, 35), float32]) */
}

def @func_8228() -> (Tensor[(8, 16, 6), float64], Tensor[(135), float64], Tensor[(270, 6), uint32], Tensor[(4, 13, 8), float32], Tensor[(208, 2), float32]) {
  %429 = fn () -> (Tensor[(8, 16, 6), float64], Tensor[(135), float64], Tensor[(270, 6), uint32], Tensor[(4, 13, 8), float32], Tensor[(208, 2), float32]) {
    %418 = @func_7205() /* ty=(Tensor[(8, 16, 6), float64],) */;
    %419 = %418.0;
    %420 = cast(%419, dtype="float64") /* ty=Tensor[(8, 16, 6), float64] */;
    %421 = cast(meta[relay.Constant][26] /* ty=Tensor[(270, 6), uint32] */, dtype="uint32") /* ty=Tensor[(270, 6), uint32] */;
    %422 = reshape(%420, newshape=[8, 16, 6]) /* ty=Tensor[(8, 16, 6), float64] */;
    %423 = reshape(%421, newshape=[540, 3]) /* ty=Tensor[(540, 3), uint32] */;
    %424 = @func_4606(%422, %423) /* ty=(Tensor[(8, 16, 6), bool], Tensor[(16, 2, 16), float64], Tensor[(540, 3), uint32], Tensor[(135), float64]) */;
    %425 = cast(meta[relay.Constant][27] /* ty=Tensor[(208, 2), float32] */, dtype="float32") /* ty=Tensor[(208, 2), float32] */;
    %426 = reshape(%425, newshape=[4, 13, 8]) /* ty=Tensor[(4, 13, 8), float32] */;
    %427 = %424.3;
    %428 = @func_1274(%426) /* ty=Tensor[(4, 13, 8), float32] */;
    (%419, %427, meta[relay.Constant][26] /* ty=Tensor[(270, 6), uint32] */, %428, meta[relay.Constant][27] /* ty=Tensor[(208, 2), float32] */)
  };
  %429() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(135), float64], Tensor[(270, 6), uint32], Tensor[(4, 13, 8), float32], Tensor[(208, 2), float32]) */
}

def @func_4446(%var_4444: Tensor[(9, 45), float32], %var_4445: Tensor[(264), float32]) -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(520), float32], Tensor[(9, 5, 9), float32], Tensor[(9, 45), float32], Tensor[(3, 2, 2), float64], Tensor[(3, 4), float64], Tensor[(264), float32], Tensor[(8, 16, 6), float64], Tensor[(6, 4, 11), uint32], Tensor[(8, 16, 6), float64]) {
  %454 = fn (%var_4378: Tensor[(9, 45), float32], %var_4413: Tensor[(264), float32]) -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(520), float32], Tensor[(9, 5, 9), float32], Tensor[(9, 45), float32], Tensor[(3, 2, 2), float64], Tensor[(3, 4), float64], Tensor[(264), float32], Tensor[(8, 16, 6), float64], Tensor[(6, 4, 11), uint32], Tensor[(8, 16, 6), float64]) {
    %430 = cast(meta[relay.Constant][28] /* ty=Tensor[(520), float32] */, dtype="float32") /* ty=Tensor[(520), float32] */;
    %431 = reshape(%430, newshape=[13, 4, 10]) /* ty=Tensor[(13, 4, 10), float32] */;
    %432 = @func_4015(%431) /* ty=(Tensor[(13, 4, 10), float32], Tensor[(6, 4, 11), float64], Tensor[(455), float32], Tensor[(264), float32], Tensor[(8, 16, 6), float64]) */;
    %433 = cast(%var_4378, dtype="float32") /* ty=Tensor[(9, 45), float32] */;
    %434 = reshape(%433, newshape=[9, 5, 9]) /* ty=Tensor[(9, 5, 9), float32] */;
    %435 = cast(meta[relay.Constant][29] /* ty=Tensor[(3, 4), float64] */, dtype="float64") /* ty=Tensor[(3, 4), float64] */;
    %436 = reshape(%435, newshape=[3, 2, 2]) /* ty=Tensor[(3, 2, 2), float64] */;
    %437 = @func_115(%436) /* ty=(Tensor[(3, 2, 2), float64],) */;
    %438 = cast(%var_4413, dtype="float32") /* ty=Tensor[(264), float32] */;
    %439 = reshape(%438, newshape=[6, 4, 11]) /* ty=Tensor[(6, 4, 11), float32] */;
    %440 = @func_339(%439) /* ty=(Tensor[(6, 4, 11), float64],) */;
    %441 = %440.0;
    %442 = cast(meta[relay.Constant][30] /* ty=Tensor[(6, 4, 11), float64] */, dtype="uint32") /* ty=Tensor[(6, 4, 11), uint32] */;
    %443 = shape_of(%441, dtype="int32") /* ty=Tensor[(3), int32] */;
    %444 = cast(%441, dtype="uint32") /* ty=Tensor[(6, 4, 11), uint32] */;
    %445 = dyn.reshape(%442, %443, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %446 = @func_3707() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
    %447 = @func_4026() /* ty=Tensor[(8, 16, 6), float64] */;
    %448 = %432.4;
    %449 = @func_2141(%434) /* ty=Tensor[(9, 5, 9), float32] */;
    %450 = %437.0;
    %451 = @func_4204() /* ty=Tensor[(8, 16, 6), float64] */;
    %452 = subtract(%444, %445) /* ty=Tensor[(6, 4, 11), uint32] */;
    %453 = %446.1;
    (%447, %448, meta[relay.Constant][28] /* ty=Tensor[(520), float32] */, %449, %var_4378, %450, meta[relay.Constant][29] /* ty=Tensor[(3, 4), float64] */, %var_4413, %451, %452, %453)
  };
  %454(%var_4444, %var_4445) /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(520), float32], Tensor[(9, 5, 9), float32], Tensor[(9, 45), float32], Tensor[(3, 2, 2), float64], Tensor[(3, 4), float64], Tensor[(264), float32], Tensor[(8, 16, 6), float64], Tensor[(6, 4, 11), uint32], Tensor[(8, 16, 6), float64]) */
}

def @func_4903(%var_4850: Tensor[(768), float64], %var_4851: Tensor[(1, 1620), uint32], %var_4853: Tensor[(11, 1620), uint32], %var_4869: Tensor[(11, 1620), float32], %var_4886: Tensor[(108), uint32]) -> (Tensor[(135), float64], Tensor[(135), float64], Tensor[(768), float64], Tensor[(7, 1, 5), float32], Tensor[(11, 1620), uint64], Tensor[(11, 1620), uint8], Tensor[(416), float32], Tensor[(108), uint32], Tensor[(35, 1), float32]) {
  %455 = @func_4265() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(108), uint32], Tensor[(1620), uint32], Tensor[(135), float64]) */;
  %456 = cast(%var_4850, dtype="float64") /* ty=Tensor[(768), float64] */;
  %457 = cast(%var_4851, dtype="uint32") /* ty=Tensor[(1, 1620), uint32] */;
  %458 = reshape(%456, newshape=[8, 16, 6]) /* ty=Tensor[(8, 16, 6), float64] */;
  %459 = reshape(%457, newshape=[540, 3]) /* ty=Tensor[(540, 3), uint32] */;
  %460 = @func_4606(%458, %459) /* ty=(Tensor[(8, 16, 6), bool], Tensor[(16, 2, 16), float64], Tensor[(540, 3), uint32], Tensor[(135), float64]) */;
  %461 = cast(meta[relay.Constant][31] /* ty=Tensor[(35, 1), float32] */, dtype="float32") /* ty=Tensor[(35, 1), float32] */;
  %462 = reshape(%461, newshape=[7, 1, 5]) /* ty=Tensor[(7, 1, 5), float32] */;
  %463 = @func_364(%462) /* ty=(Tensor[(7, 1, 5), float32], Tensor[(7, 1, 5), float32]) */;
  %464 = cast(%var_4851, dtype="bool") /* ty=Tensor[(1, 1620), bool] */;
  %465 = cast(%var_4853, dtype="bool") /* ty=Tensor[(11, 1620), bool] */;
  %466 = logical_and(%464, %465) /* ty=Tensor[(11, 1620), bool] */;
  %467 = cast(%466, dtype="float32") /* ty=Tensor[(11, 1620), float32] */;
  %468 = exp(%467) /* ty=Tensor[(11, 1620), float32] */;
  %469 = cast(%466, dtype="uint64") /* ty=Tensor[(11, 1620), uint64] */;
  %470 = shape_of(%468, dtype="int32") /* ty=Tensor[(2), int32] */;
  %471 = cast(%468, dtype="uint64") /* ty=Tensor[(11, 1620), uint64] */;
  %472 = dyn.reshape(%469, %470, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %473 = cast(%var_4869, dtype="float64") /* ty=Tensor[(11, 1620), float64] */;
  %474 = shape_of(%468, dtype="int32") /* ty=Tensor[(2), int32] */;
  %475 = cast(%468, dtype="float64") /* ty=Tensor[(11, 1620), float64] */;
  %476 = dyn.reshape(%473, %474, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %477 = floor_divide(%475, %476) /* ty=Tensor[(11, 1620), float64] */;
  %478 = cast(%468, dtype="uint8") /* ty=Tensor[(11, 1620), uint8] */;
  %479 = shape_of(%477, dtype="int32") /* ty=Tensor[(2), int32] */;
  %480 = cast(%477, dtype="uint8") /* ty=Tensor[(11, 1620), uint8] */;
  %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %482 = cast(%var_4886, dtype="uint32") /* ty=Tensor[(108), uint32] */;
  %483 = cast(%var_4851, dtype="uint32") /* ty=Tensor[(1, 1620), uint32] */;
  %484 = reshape(%482, newshape=[12, 9, 1]) /* ty=Tensor[(12, 9, 1), uint32] */;
  %485 = reshape(%483, newshape=[12, 9, 15]) /* ty=Tensor[(12, 9, 15), uint32] */;
  %486 = @func_2250(%484, %485) /* ty=(Tensor[(12, 9, 15), uint32], Tensor[(4, 13, 8), float32], Tensor[(416), float32]) */;
  %487 = cast(meta[relay.Constant][31] /* ty=Tensor[(35, 1), float32] */, dtype="float32") /* ty=Tensor[(35, 1), float32] */;
  %488 = %455.3;
  %489 = %460.3;
  %490 = %463.0;
  %491 = maximum(%471, %472) /* ty=Tensor[(11, 1620), uint64] */;
  %492 = bitwise_or(%480, %481) /* ty=Tensor[(11, 1620), uint8] */;
  %493 = %486.2;
  %494 = acos(%487) /* ty=Tensor[(35, 1), float32] */;
  (%488, %489, %var_4850, %490, %491, %492, %493, %var_4886, %494)
}

def @func_6856() -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) {
  %499 = fn () -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) {
    %495 = @func_4129() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
    %496 = @func_4806() /* ty=(Tensor[(8, 16, 6), float64],) */;
    %497 = %495.1;
    %498 = %496.0;
    (%497, %498)
  };
  %499() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */
}

def @func_7699(%var_7697: Tensor[(8, 7, 16), float32], %var_7698: Tensor[(35), float32]) -> (Tensor[(8, 16, 6), float64], Tensor[(8, 7, 16), float32], Tensor[(7, 1, 5), float32], Tensor[(35), float32], Tensor[(5, 11, 2), uint32], Tensor[(22), uint32], Tensor[(110), uint32]) {
  %518 = fn (%var_7650: Tensor[(8, 7, 16), float32], %var_7677: Tensor[(35), float32]) -> (Tensor[(8, 16, 6), float64], Tensor[(8, 7, 16), float32], Tensor[(7, 1, 5), float32], Tensor[(35), float32], Tensor[(5, 11, 2), uint32], Tensor[(22), uint32], Tensor[(110), uint32]) {
    %500 = @func_5384() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(12), float64], Tensor[(108), uint32]) */;
    %501 = cast(%var_7650, dtype="float32") /* ty=Tensor[(8, 7, 16), float32] */;
    %502 = acos(%501) /* ty=Tensor[(8, 7, 16), float32] */;
    %503 = cast(%502, dtype="float64") /* ty=Tensor[(8, 7, 16), float64] */;
    %504 = atanh(%503) /* ty=Tensor[(8, 7, 16), float64] */;
    %505 = cast(%504, dtype="float32") /* ty=Tensor[(8, 7, 16), float32] */;
    %506 = cast(%var_7677, dtype="float32") /* ty=Tensor[(35), float32] */;
    %507 = reshape(%506, newshape=[7, 1, 5]) /* ty=Tensor[(7, 1, 5), float32] */;
    %508 = @func_364(%507) /* ty=(Tensor[(7, 1, 5), float32], Tensor[(7, 1, 5), float32]) */;
    %509 = cast(meta[relay.Constant][32] /* ty=Tensor[(22), uint32] */, dtype="uint32") /* ty=Tensor[(22), uint32] */;
    %510 = cast(meta[relay.Constant][33] /* ty=Tensor[(110), uint32] */, dtype="uint32") /* ty=Tensor[(110), uint32] */;
    %511 = reshape(%509, newshape=[1, 11, 2]) /* ty=Tensor[(1, 11, 2), uint32] */;
    %512 = reshape(%510, newshape=[5, 11, 2]) /* ty=Tensor[(5, 11, 2), uint32] */;
    %513 = @func_6519(%511, %512) /* ty=(Tensor[(5, 11, 2), uint32],) */;
    %514 = %500.1;
    %515 = rsqrt(%505) /* ty=Tensor[(8, 7, 16), float32] */;
    %516 = %508.0;
    %517 = %513.0;
    (%514, %515, %516, %var_7677, %517, meta[relay.Constant][32] /* ty=Tensor[(22), uint32] */, meta[relay.Constant][33] /* ty=Tensor[(110), uint32] */)
  };
  %518(%var_7697, %var_7698) /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 7, 16), float32], Tensor[(7, 1, 5), float32], Tensor[(35), float32], Tensor[(5, 11, 2), uint32], Tensor[(22), uint32], Tensor[(110), uint32]) */
}

def @func_4129() -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) {
  %519 = @func_3809() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %520 = %519.0;
  %521 = @func_3765() /* ty=Tensor[(8, 16, 6), float64] */;
  (%520, %521)
}

def @func_5437(%var_5435: uint16) -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), bool], Tensor[(8, 16, 6), float64], Tensor[(3, 7, 14), float64], Tensor[(294), float64]) {
  @func_5434(%var_5435) /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), bool], Tensor[(8, 16, 6), float64], Tensor[(3, 7, 14), float64], Tensor[(294), float64]) */
}

def @func_5809(%var_5807: Tensor[(9, 13, 10), uint16], %var_5808: Tensor[(9, 13, 10), uint16]) -> (Tensor[(9, 13, 10), uint16],) {
  %527 = fn (%var_5741: Tensor[(9, 13, 10), uint16], %var_5742: Tensor[(9, 13, 10), uint16]) -> (Tensor[(9, 13, 10), uint16],) {
    %522 = cast(%var_5742, dtype="uint16") /* ty=Tensor[(9, 13, 10), uint16] */;
    %523 = shape_of(%var_5741, dtype="int32") /* ty=Tensor[(3), int32] */;
    %524 = cast(%var_5741, dtype="uint16") /* ty=Tensor[(9, 13, 10), uint16] */;
    %525 = dyn.reshape(%522, %523, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %526 = minimum(%524, %525) /* ty=Tensor[(9, 13, 10), uint16] */;
    (%526,)
  };
  %527(%var_5807, %var_5808) /* ty=(Tensor[(9, 13, 10), uint16],) */
}

def @func_6221(%var_6219: Tensor[(135, 1), float64], %var_6220: Tensor[(60), uint32]) -> (Tensor[(8, 16, 6), float32], Tensor[(8, 16, 6), float32], Tensor[(3, 5, 9), float32], Tensor[(135, 1), float64], Tensor[(60), uint32]) {
  %540 = fn (%var_6209: Tensor[(135, 1), float64], %var_6210: Tensor[(60), uint32]) -> (Tensor[(8, 16, 6), float32], Tensor[(8, 16, 6), float32], Tensor[(3, 5, 9), float32], Tensor[(135, 1), float64], Tensor[(60), uint32]) {
    %528 = @func_4777() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
    %529 = %528.1;
    %530 = cast(%529, dtype="float32") /* ty=Tensor[(8, 16, 6), float32] */;
    %531 = cast(%529, dtype="float32") /* ty=Tensor[(8, 16, 6), float32] */;
    %532 = cast(%var_6209, dtype="float64") /* ty=Tensor[(135, 1), float64] */;
    %533 = cast(%var_6210, dtype="uint32") /* ty=Tensor[(60), uint32] */;
    %534 = reshape(%532, newshape=[3, 5, 9]) /* ty=Tensor[(3, 5, 9), float64] */;
    %535 = reshape(%533, newshape=[3, 20]) /* ty=Tensor[(3, 20), uint32] */;
    %536 = @func_2874(%534, %535) /* ty=(Tensor[(12, 5, 5), uint32], Tensor[(3, 20), uint32], Tensor[(3, 5, 9), float64], Tensor[(3, 5, 9), float32]) */;
    %537 = log(%530) /* ty=Tensor[(8, 16, 6), float32] */;
    %538 = log10(%531) /* ty=Tensor[(8, 16, 6), float32] */;
    %539 = %536.3;
    (%537, %538, %539, %var_6209, %var_6210)
  };
  %540(%var_6219, %var_6220) /* ty=(Tensor[(8, 16, 6), float32], Tensor[(8, 16, 6), float32], Tensor[(3, 5, 9), float32], Tensor[(135, 1), float64], Tensor[(60), uint32]) */
}

def @func_8951(%var_8949: Tensor[(8, 13, 8), float64], %var_8950: Tensor[(8, 13, 8), float64]) -> Tensor[(8, 13, 8), float64] {
  @func_8947(%var_8949, %var_8950) /* ty=Tensor[(8, 13, 8), float64] */
}

def @func_9041() -> Tensor[(8, 16, 6), float64] {
  @func_5696() /* ty=Tensor[(8, 16, 6), float64] */
}

def @func_9310() -> Tensor[(8, 16, 6), float64] {
  %541 = @func_6547() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %541.0
}

def @func_7978(%var_7977: Tensor[(15, 9, 13), float32]) -> Tensor[(15, 9, 13), bool] {
  %546 = fn (%var_7941: Tensor[(15, 9, 13), float32]) -> Tensor[(15, 9, 13), bool] {
    %542 = cast(meta[relay.Constant][34] /* ty=Tensor[(15, 9, 13), float32] */, dtype="bool") /* ty=Tensor[(15, 9, 13), bool] */;
    %543 = shape_of(%var_7941, dtype="int32") /* ty=Tensor[(3), int32] */;
    %544 = cast(%var_7941, dtype="bool") /* ty=Tensor[(15, 9, 13), bool] */;
    %545 = dyn.reshape(%542, %543, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater_equal(%544, %545) /* ty=Tensor[(15, 9, 13), bool] */
  };
  %546(%var_7977) /* ty=Tensor[(15, 9, 13), bool] */
}

def @func_7733() -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) {
  %547 = @func_3528() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(16, 2, 16), float32], Tensor[(512), float32], Tensor[(8, 13, 5), float64], Tensor[(520), float64]) */;
  %548 = @func_5503() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %549 = %547.1;
  %550 = %548.0;
  (%549, %550)
}

def @func_4206() -> Tensor[(8, 16, 6), float64] {
  @func_4204() /* ty=Tensor[(8, 16, 6), float64] */
}

def @func_9437() -> (Tensor[(8, 16, 6), float64],) {
  @func_9435() /* ty=(Tensor[(8, 16, 6), float64],) */
}

def @func_7143() -> Tensor[(8, 16, 6), float64] {
  @func_6989() /* ty=Tensor[(8, 16, 6), float64] */
}

def @func_2874(%var_2810: Tensor[(3, 5, 9), float64], %var_2821: Tensor[(3, 20), uint32]) -> (Tensor[(12, 5, 5), uint32], Tensor[(3, 20), uint32], Tensor[(3, 5, 9), float64], Tensor[(3, 5, 9), float32]) {
  %551 = cast(%var_2821, dtype="uint32") /* ty=Tensor[(3, 20), uint32] */;
  %552 = reshape(%551, newshape=[12, 1, 5]) /* ty=Tensor[(12, 1, 5), uint32] */;
  %553 = @func_225(%552) /* ty=(Tensor[(12, 5, 5), uint32], Tensor[(3, 2, 2), bool], Tensor[(3, 2, 2), float32]) */;
  %554 = cast(%var_2810, dtype="float64") /* ty=Tensor[(3, 5, 9), float64] */;
  %555 = sigmoid(%554) /* ty=Tensor[(3, 5, 9), float64] */;
  %556 = cast(%555, dtype="float64") /* ty=Tensor[(3, 5, 9), float64] */;
  %557 = cast(%555, dtype="float32") /* ty=Tensor[(3, 5, 9), float32] */;
  %558 = %553.0;
  %559 = log2(%556) /* ty=Tensor[(3, 5, 9), float64] */;
  %560 = atan(%557) /* ty=Tensor[(3, 5, 9), float32] */;
  (%558, %var_2821, %559, %560)
}

def @func_7782(%var_7781: uint16) -> (Tensor[(520), float64], Tensor[(5, 1), uint16], uint16) {
  %566 = fn (%var_7776: uint16) -> (Tensor[(520), float64], Tensor[(5, 1), uint16], uint16) {
    %561 = cast(%var_7776, dtype="uint16") /* ty=uint16 */;
    %562 = reshape(%561, newshape=[]) /* ty=uint16 */;
    %563 = @func_812(%562) /* ty=(Tensor[(5, 1), uint16],) */;
    %564 = @func_7181() /* ty=Tensor[(520), float64] */;
    %565 = %563.0;
    (%564, %565, %var_7776)
  };
  %566(%var_7781) /* ty=(Tensor[(520), float64], Tensor[(5, 1), uint16], uint16) */
}

def @func_7104() -> (Tensor[(8, 16, 6), float64],) {
  @func_7102() /* ty=(Tensor[(8, 16, 6), float64],) */
}

def @func_3158(%var_3156: Tensor[(16, 2, 16), float32], %var_3157: Tensor[(16, 2, 16), float32]) -> Tensor[(16, 2, 16), float32] {
  %571 = fn (%var_3147: Tensor[(16, 2, 16), float32], %var_3148: Tensor[(16, 2, 16), float32]) -> Tensor[(16, 2, 16), float32] {
    %567 = cast(%var_3148, dtype="float32") /* ty=Tensor[(16, 2, 16), float32] */;
    %568 = shape_of(%var_3147, dtype="int32") /* ty=Tensor[(3), int32] */;
    %569 = cast(%var_3147, dtype="float32") /* ty=Tensor[(16, 2, 16), float32] */;
    %570 = dyn.reshape(%567, %568, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    floor_divide(%569, %570) /* ty=Tensor[(16, 2, 16), float32] */
  };
  %571(%var_3156, %var_3157) /* ty=Tensor[(16, 2, 16), float32] */
}

def @func_9711() -> (Tensor[(8, 16, 6), float64],) {
  @func_9709() /* ty=(Tensor[(8, 16, 6), float64],) */
}

def @func_11752() -> Tensor[(3, 2, 2), bool] {
  @func_10488() /* ty=Tensor[(3, 2, 2), bool] */
}

def @func_4306() -> Tensor[(520), float64] {
  %573 = fn () -> Tensor[(520), float64] {
    %572 = @func_3528() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(16, 2, 16), float32], Tensor[(512), float32], Tensor[(8, 13, 5), float64], Tensor[(520), float64]) */;
    %572.5
  };
  %573() /* ty=Tensor[(520), float64] */
}

def @func_366(%var_365: Tensor[(7, 1, 5), float32]) -> (Tensor[(7, 1, 5), float32], Tensor[(7, 1, 5), float32]) {
  %578 = fn (%var_345: Tensor[(7, 1, 5), float32]) -> (Tensor[(7, 1, 5), float32], Tensor[(7, 1, 5), float32]) {
    %574 = cast(%var_345, dtype="float32") /* ty=Tensor[(7, 1, 5), float32] */;
    %575 = cast(%var_345, dtype="float32") /* ty=Tensor[(7, 1, 5), float32] */;
    %576 = sin(%574) /* ty=Tensor[(7, 1, 5), float32] */;
    %577 = sqrt(%575) /* ty=Tensor[(7, 1, 5), float32] */;
    (%576, %577)
  };
  %578(%var_365) /* ty=(Tensor[(7, 1, 5), float32], Tensor[(7, 1, 5), float32]) */
}

def @func_7877(%var_7876: Tensor[(3, 11, 7), int32]) -> (Tensor[(3, 11, 7), bool], Tensor[(8, 16, 6), float64]) {
  %585 = fn (%var_7864: Tensor[(3, 11, 7), int32]) -> (Tensor[(3, 11, 7), bool], Tensor[(8, 16, 6), float64]) {
    %579 = cast(%var_7864, dtype="bool") /* ty=Tensor[(3, 11, 7), bool] */;
    %580 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(3, 11, 7), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %581 = cast(meta[relay.Constant][35] /* ty=Tensor[(3, 11, 7), int32] */, dtype="bool") /* ty=Tensor[(3, 11, 7), bool] */;
    %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %583 = less_equal(%581, %582) /* ty=Tensor[(3, 11, 7), bool] */;
    %584 = @func_7143() /* ty=Tensor[(8, 16, 6), float64] */;
    (%583, %584)
  };
  %585(%var_7876) /* ty=(Tensor[(3, 11, 7), bool], Tensor[(8, 16, 6), float64]) */
}

def @func_6726(%var_6724: Tensor[(10, 52), float64], %var_6725: Tensor[(36), float64]) -> (Tensor[(8, 16, 6), float64], Tensor[(3, 2, 2), float64], Tensor[(12), float64], Tensor[(5, 1), uint16], uint16, Tensor[(520), float64], Tensor[(8, 16, 6), float64], Tensor[(36), float64], Tensor[(8, 16, 6), float64], Tensor[(6, 2, 3), float64], Tensor[(60), uint32], Tensor[(10, 52), float32]) {
  %614 = fn (%var_6658: Tensor[(10, 52), float64], %var_6676: Tensor[(36), float64]) -> (Tensor[(8, 16, 6), float64], Tensor[(3, 2, 2), float64], Tensor[(12), float64], Tensor[(5, 1), uint16], uint16, Tensor[(520), float64], Tensor[(8, 16, 6), float64], Tensor[(36), float64], Tensor[(8, 16, 6), float64], Tensor[(6, 2, 3), float64], Tensor[(60), uint32], Tensor[(10, 52), float32]) {
    %586 = @func_4552() /* ty=(Tensor[(8, 16, 6), float64],) */;
    %587 = cast(meta[relay.Constant][36] /* ty=Tensor[(12), float64] */, dtype="float64") /* ty=Tensor[(12), float64] */;
    %588 = reshape(%587, newshape=[3, 2, 2]) /* ty=Tensor[(3, 2, 2), float64] */;
    %589 = @func_115(%588) /* ty=(Tensor[(3, 2, 2), float64],) */;
    %590 = cast(meta[relay.Constant][37] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %591 = reshape(%590, newshape=[]) /* ty=uint16 */;
    %592 = @func_812(%591) /* ty=(Tensor[(5, 1), uint16],) */;
    %593 = cast(%var_6658, dtype="float64") /* ty=Tensor[(10, 52), float64] */;
    %594 = reshape(%593, newshape=[520]) /* ty=Tensor[(520), float64] */;
    %595 = @func_6359(%594) /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 13, 5), float64], Tensor[(520), float64]) */;
    %596 = %595.2;
    %597 = cast(%596, dtype="float32") /* ty=Tensor[(520), float32] */;
    %598 = reshape(%597, newshape=[13, 4, 10]) /* ty=Tensor[(13, 4, 10), float32] */;
    %599 = @func_4015(%598) /* ty=(Tensor[(13, 4, 10), float32], Tensor[(6, 4, 11), float64], Tensor[(455), float32], Tensor[(264), float32], Tensor[(8, 16, 6), float64]) */;
    %600 = cast(%var_6676, dtype="float64") /* ty=Tensor[(36), float64] */;
    %601 = reshape(%600, newshape=[6, 2, 3]) /* ty=Tensor[(6, 2, 3), float64] */;
    %602 = @func_6253(%601) /* ty=Tensor[(6, 2, 3), float64] */;
    %603 = cast(%602, dtype="float64") /* ty=Tensor[(6, 2, 3), float64] */;
    %604 = @func_5112() /* ty=(Tensor[(8, 16, 6), float32], Tensor[(3, 2, 2), float32], Tensor[(60), uint32]) */;
    %605 = cast(%var_6658, dtype="float32") /* ty=Tensor[(10, 52), float32] */;
    %606 = %586.0;
    %607 = %589.0;
    %608 = %592.0;
    %609 = %599.4;
    %610 = @func_4204() /* ty=Tensor[(8, 16, 6), float64] */;
    %611 = atanh(%603) /* ty=Tensor[(6, 2, 3), float64] */;
    %612 = %604.2;
    %613 = sqrt(%605) /* ty=Tensor[(10, 52), float32] */;
    (%606, %607, meta[relay.Constant][36] /* ty=Tensor[(12), float64] */, %608, meta[relay.Constant][37] /* ty=uint16 */, %596, %609, %var_6676, %610, %611, %612, %613)
  };
  %614(%var_6724, %var_6725) /* ty=(Tensor[(8, 16, 6), float64], Tensor[(3, 2, 2), float64], Tensor[(12), float64], Tensor[(5, 1), uint16], uint16, Tensor[(520), float64], Tensor[(8, 16, 6), float64], Tensor[(36), float64], Tensor[(8, 16, 6), float64], Tensor[(6, 2, 3), float64], Tensor[(60), uint32], Tensor[(10, 52), float32]) */
}

def @func_7275() -> (Tensor[(8, 16, 6), float64],) {
  %617 = fn () -> (Tensor[(8, 16, 6), float64],) {
    %615 = @func_6882() /* ty=(Tensor[(8, 16, 6), float64],) */;
    %616 = %615.0;
    (%616,)
  };
  %617() /* ty=(Tensor[(8, 16, 6), float64],) */
}

def @func_3767() -> Tensor[(8, 16, 6), float64] {
  @func_3765() /* ty=Tensor[(8, 16, 6), float64] */
}

def @func_2253(%var_2251: Tensor[(12, 9, 1), uint32], %var_2252: Tensor[(12, 9, 15), uint32]) -> (Tensor[(12, 9, 15), uint32], Tensor[(4, 13, 8), float32], Tensor[(416), float32]) {
  %624 = fn (%var_2219: Tensor[(12, 9, 1), uint32], %var_2220: Tensor[(12, 9, 15), uint32]) -> (Tensor[(12, 9, 15), uint32], Tensor[(4, 13, 8), float32], Tensor[(416), float32]) {
    %618 = cast(%var_2219, dtype="uint32") /* ty=Tensor[(12, 9, 1), uint32] */;
    %619 = cast(%var_2220, dtype="uint32") /* ty=Tensor[(12, 9, 15), uint32] */;
    %620 = cast(meta[relay.Constant][38] /* ty=Tensor[(416), float32] */, dtype="float32") /* ty=Tensor[(416), float32] */;
    %621 = reshape(%620, newshape=[4, 13, 8]) /* ty=Tensor[(4, 13, 8), float32] */;
    %622 = right_shift(%618, %619) /* ty=Tensor[(12, 9, 15), uint32] */;
    %623 = @func_1274(%621) /* ty=Tensor[(4, 13, 8), float32] */;
    (%622, %623, meta[relay.Constant][38] /* ty=Tensor[(416), float32] */)
  };
  %624(%var_2251, %var_2252) /* ty=(Tensor[(12, 9, 15), uint32], Tensor[(4, 13, 8), float32], Tensor[(416), float32]) */
}

def @func_7477(%var_7476: Tensor[(8, 16, 6), float64]) -> Tensor[(8, 16, 6), bool] {
  %630 = fn (%var_7465: Tensor[(8, 16, 6), float64]) -> Tensor[(8, 16, 6), bool] {
    %625 = @func_3629() /* ty=Tensor[(8, 16, 6), float64] */;
    %626 = cast(%var_7465, dtype="bool") /* ty=Tensor[(8, 16, 6), bool] */;
    %627 = shape_of(%625, dtype="int32") /* ty=Tensor[(3), int32] */;
    %628 = cast(%625, dtype="bool") /* ty=Tensor[(8, 16, 6), bool] */;
    %629 = dyn.reshape(%626, %627, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    equal(%628, %629) /* ty=Tensor[(8, 16, 6), bool] */
  };
  %630(%var_7476) /* ty=Tensor[(8, 16, 6), bool] */
}

def @func_10490() -> Tensor[(3, 2, 2), bool] {
  @func_10488() /* ty=Tensor[(3, 2, 2), bool] */
}

def @func_10985() -> (Tensor[(8, 16, 6), float64],) {
  %633 = fn () -> (Tensor[(8, 16, 6), float64],) {
    %631 = @func_8406() /* ty=(Tensor[(8, 16, 6), float64],) */;
    %632 = %631.0;
    (%632,)
  };
  %633() /* ty=(Tensor[(8, 16, 6), float64],) */
}

def @func_3809() -> (Tensor[(8, 16, 6), float64],) {
  %634 = @func_3707() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
  %635 = %634.0;
  (%635,)
}

def @func_225(%var_178: Tensor[(12, 1, 5), uint32]) -> (Tensor[(12, 5, 5), uint32], Tensor[(3, 2, 2), bool], Tensor[(3, 2, 2), float32]) {
  %636 = cast(%var_178, dtype="uint32") /* ty=Tensor[(12, 1, 5), uint32] */;
  %637 = cast(meta[relay.Constant][39] /* ty=Tensor[(12, 5, 5), uint32] */, dtype="uint32") /* ty=Tensor[(12, 5, 5), uint32] */;
  %638 = cast(meta[relay.Constant][40] /* ty=Tensor[(12), float64] */, dtype="float64") /* ty=Tensor[(12), float64] */;
  %639 = reshape(%638, newshape=[3, 2, 2]) /* ty=Tensor[(3, 2, 2), float64] */;
  %640 = @func_115(%639) /* ty=(Tensor[(3, 2, 2), float64],) */;
  %641 = %640.0;
  %642 = cast(meta[relay.Constant][40] /* ty=Tensor[(12), float64] */, dtype="bool") /* ty=Tensor[(12), bool] */;
  %643 = shape_of(%641, dtype="int32") /* ty=Tensor[(3), int32] */;
  %644 = cast(%641, dtype="bool") /* ty=Tensor[(3, 2, 2), bool] */;
  %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %646 = cast(%641, dtype="float32") /* ty=Tensor[(3, 2, 2), float32] */;
  %647 = logical_xor(%636, %637) /* ty=Tensor[(12, 5, 5), uint32] */;
  %648 = logical_and(%644, %645) /* ty=Tensor[(3, 2, 2), bool] */;
  %649 = sin(%646) /* ty=Tensor[(3, 2, 2), float32] */;
  (%647, %648, %649)
}

def @func_4204() -> Tensor[(8, 16, 6), float64] {
  @func_4026() /* ty=Tensor[(8, 16, 6), float64] */
}

def @func_7940() -> (Tensor[(3, 20), uint32],) {
  @func_7938() /* ty=(Tensor[(3, 20), uint32],) */
}

def @func_7283() -> Tensor[(8, 16, 6), float64] {
  %651 = fn () -> Tensor[(8, 16, 6), float64] {
    %650 = @func_3809() /* ty=(Tensor[(8, 16, 6), float64],) */;
    %650.0
  };
  %651() /* ty=Tensor[(8, 16, 6), float64] */
}

def @func_9547() -> Tensor[(8, 16, 6), float64] {
  @func_9545() /* ty=Tensor[(8, 16, 6), float64] */
}

def @func_9945() -> Tensor[(8, 16, 6), float64] {
  %652 = @func_8406() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %652.0
}

def @func_4265() -> (Tensor[(8, 16, 6), float64], Tensor[(108), uint32], Tensor[(1620), uint32], Tensor[(135), float64]) {
  %653 = cast(meta[relay.Constant][41] /* ty=Tensor[(1620), uint32] */, dtype="uint32") /* ty=Tensor[(1620), uint32] */;
  %654 = cast(meta[relay.Constant][42] /* ty=Tensor[(135), float64] */, dtype="float64") /* ty=Tensor[(135), float64] */;
  %655 = reshape(%653, newshape=[1620]) /* ty=Tensor[(1620), uint32] */;
  %656 = reshape(%654, newshape=[135]) /* ty=Tensor[(135), float64] */;
  %657 = @func_3679(%655, %656) /* ty=(Tensor[(16, 2, 16), float64], Tensor[(4, 13, 8), float32], Tensor[(108), uint32], Tensor[(1620), uint32], Tensor[(3, 20), uint32], Tensor[(135), float64], Tensor[(3, 20), uint32]) */;
  %658 = @func_4026() /* ty=Tensor[(8, 16, 6), float64] */;
  %659 = %657.2;
  (%658, %659, meta[relay.Constant][41] /* ty=Tensor[(1620), uint32] */, meta[relay.Constant][42] /* ty=Tensor[(135), float64] */)
}

def @func_10229() -> (Tensor[(520), float64], Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) {
  %660 = @func_4129() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
  %661 = @func_7181() /* ty=Tensor[(520), float64] */;
  %662 = %660.0;
  %663 = @func_6081() /* ty=Tensor[(8, 16, 6), float64] */;
  (%661, %662, %663)
}

def @func_4678(%var_4672: Tensor[(12), float64]) -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(3, 2, 2), float64], Tensor[(12), float64]) {
  %664 = @func_3795() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %665 = cast(%var_4672, dtype="float64") /* ty=Tensor[(12), float64] */;
  %666 = reshape(%665, newshape=[3, 2, 2]) /* ty=Tensor[(3, 2, 2), float64] */;
  %667 = @func_115(%666) /* ty=(Tensor[(3, 2, 2), float64],) */;
  %668 = %664.0;
  %669 = @func_3629() /* ty=Tensor[(8, 16, 6), float64] */;
  %670 = %667.0;
  (%668, %669, %670, %var_4672)
}

def @func_7207() -> (Tensor[(8, 16, 6), float64],) {
  @func_7205() /* ty=(Tensor[(8, 16, 6), float64],) */
}

def @func_11790(%var_11788: int16, %var_11789: Tensor[(7, 16, 1), int16]) -> (Tensor[(7, 16, 1), bool], Tensor[(8, 16, 6), float64]) {
  %676 = fn (%var_11765: int16, %var_11766: Tensor[(7, 16, 1), int16]) -> (Tensor[(7, 16, 1), bool], Tensor[(8, 16, 6), float64]) {
    %671 = cast(%var_11765, dtype="bool") /* ty=bool */;
    %672 = cast(%var_11766, dtype="bool") /* ty=Tensor[(7, 16, 1), bool] */;
    %673 = @func_7733() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
    %674 = not_equal(%671, %672) /* ty=Tensor[(7, 16, 1), bool] */;
    %675 = %673.0;
    (%674, %675)
  };
  %676(%var_11788, %var_11789) /* ty=(Tensor[(7, 16, 1), bool], Tensor[(8, 16, 6), float64]) */
}

def @func_6153() -> (Tensor[(520), float64],) {
  %678 = fn () -> (Tensor[(520), float64],) {
    %677 = @func_4305() /* ty=Tensor[(520), float64] */;
    (%677,)
  };
  %678() /* ty=(Tensor[(520), float64],) */
}

def @func_4606(%var_4579: Tensor[(8, 16, 6), float64], %var_4603: Tensor[(540, 3), uint32]) -> (Tensor[(8, 16, 6), bool], Tensor[(16, 2, 16), float64], Tensor[(540, 3), uint32], Tensor[(135), float64]) {
  %679 = @func_3795() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %680 = %679.0;
  %681 = cast(%var_4579, dtype="bool") /* ty=Tensor[(8, 16, 6), bool] */;
  %682 = shape_of(%680, dtype="int32") /* ty=Tensor[(3), int32] */;
  %683 = cast(%680, dtype="bool") /* ty=Tensor[(8, 16, 6), bool] */;
  %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %685 = cast(%var_4603, dtype="uint32") /* ty=Tensor[(540, 3), uint32] */;
  %686 = cast(meta[relay.Constant][43] /* ty=Tensor[(135), float64] */, dtype="float64") /* ty=Tensor[(135), float64] */;
  %687 = reshape(%685, newshape=[1620]) /* ty=Tensor[(1620), uint32] */;
  %688 = reshape(%686, newshape=[135]) /* ty=Tensor[(135), float64] */;
  %689 = @func_3679(%687, %688) /* ty=(Tensor[(16, 2, 16), float64], Tensor[(4, 13, 8), float32], Tensor[(108), uint32], Tensor[(1620), uint32], Tensor[(3, 20), uint32], Tensor[(135), float64], Tensor[(3, 20), uint32]) */;
  %690 = less_equal(%683, %684) /* ty=Tensor[(8, 16, 6), bool] */;
  %691 = %689.0;
  (%690, %691, %var_4603, meta[relay.Constant][43] /* ty=Tensor[(135), float64] */)
}

def @func_10629(%var_10627: Tensor[(4, 9, 10), float32]) -> (Tensor[(4, 9, 10), float32], Tensor[(8, 16, 6), float64]) {
  @func_10626(%var_10627) /* ty=(Tensor[(4, 9, 10), float32], Tensor[(8, 16, 6), float64]) */
}

def @func_10838() -> (Tensor[(8, 16, 6), float64],) {
  %694 = fn () -> (Tensor[(8, 16, 6), float64],) {
    %692 = @func_4806() /* ty=(Tensor[(8, 16, 6), float64],) */;
    %693 = %692.0;
    (%693,)
  };
  %694() /* ty=(Tensor[(8, 16, 6), float64],) */
}

def @func_10790() -> Tensor[(8, 16, 6), float64] {
  @func_10788() /* ty=Tensor[(8, 16, 6), float64] */
}

def @func_7102() -> (Tensor[(8, 16, 6), float64],) {
  %695 = @func_6295() /* ty=Tensor[(8, 16, 6), float64] */;
  (%695,)
}

def @func_10049() -> Tensor[(8, 16, 6), float64] {
  %697 = fn () -> Tensor[(8, 16, 6), float64] {
    %696 = @func_7584() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(4, 13, 8), float32], Tensor[(416), float32], Tensor[(8, 16, 6), float64]) */;
    %696.3
  };
  %697() /* ty=Tensor[(8, 16, 6), float64] */
}

def @func_6065() -> (Tensor[(8, 16, 6), float64],) {
  %698 = @func_5696() /* ty=Tensor[(8, 16, 6), float64] */;
  (%698,)
}

def @func_7322(%var_7284: Tensor[(15, 1, 2), float32], %var_7299: Tensor[(405), float32], %var_7318: Tensor[(2704), uint32]) -> (Tensor[(15, 1, 2), float32], Tensor[(9, 5, 9), float32], Tensor[(405), float32], Tensor[(13, 16, 13), float64], Tensor[(2704), uint32]) {
  %699 = cast(%var_7284, dtype="float32") /* ty=Tensor[(15, 1, 2), float32] */;
  %700 = cast(%var_7299, dtype="float32") /* ty=Tensor[(405), float32] */;
  %701 = reshape(%700, newshape=[9, 5, 9]) /* ty=Tensor[(9, 5, 9), float32] */;
  %702 = cast(%var_7318, dtype="uint32") /* ty=Tensor[(2704), uint32] */;
  %703 = cast(%var_7318, dtype="uint32") /* ty=Tensor[(2704), uint32] */;
  %704 = reshape(%702, newshape=[13, 16, 13]) /* ty=Tensor[(13, 16, 13), uint32] */;
  %705 = reshape(%703, newshape=[13, 16, 13]) /* ty=Tensor[(13, 16, 13), uint32] */;
  %706 = @func_6929(%704, %705) /* ty=(Tensor[(13, 16, 13), float64],) */;
  %707 = atan(%699) /* ty=Tensor[(15, 1, 2), float32] */;
  %708 = @func_2141(%701) /* ty=Tensor[(9, 5, 9), float32] */;
  %709 = %706.0;
  (%707, %708, %var_7299, %709, %var_7318)
}

def @func_11158() -> (Tensor[(520), float64],) {
  @func_11156() /* ty=(Tensor[(520), float64],) */
}

def @func_8947(%var_8939: Tensor[(8, 13, 8), float64], %var_8940: Tensor[(8, 13, 8), float64]) -> Tensor[(8, 13, 8), float64] {
  %710 = cast(%var_8940, dtype="float64") /* ty=Tensor[(8, 13, 8), float64] */;
  %711 = shape_of(%var_8939, dtype="int32") /* ty=Tensor[(3), int32] */;
  %712 = cast(%var_8939, dtype="float64") /* ty=Tensor[(8, 13, 8), float64] */;
  %713 = dyn.reshape(%710, %711, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%712, %713) /* ty=Tensor[(8, 13, 8), float64] */
}

def @func_5335() -> (Tensor[(8, 16, 6), float64],) {
  @func_5333() /* ty=(Tensor[(8, 16, 6), float64],) */
}

def @func_11386() -> (Tensor[(8, 16, 6), float64], Tensor[(520), float64], Tensor[(3, 7, 14), float64], Tensor[(294), float64]) {
  %720 = fn () -> (Tensor[(8, 16, 6), float64], Tensor[(520), float64], Tensor[(3, 7, 14), float64], Tensor[(294), float64]) {
    %714 = @func_11156() /* ty=(Tensor[(520), float64],) */;
    %715 = cast(meta[relay.Constant][44] /* ty=Tensor[(294), float64] */, dtype="float64") /* ty=Tensor[(294), float64] */;
    %716 = reshape(%715, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), float64] */;
    %717 = @func_9545() /* ty=Tensor[(8, 16, 6), float64] */;
    %718 = %714.0;
    %719 = @func_3041(%716) /* ty=Tensor[(3, 7, 14), float64] */;
    (%717, %718, %719, meta[relay.Constant][44] /* ty=Tensor[(294), float64] */)
  };
  %720() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(520), float64], Tensor[(3, 7, 14), float64], Tensor[(294), float64]) */
}

def @func_3528() -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(16, 2, 16), float32], Tensor[(512), float32], Tensor[(8, 13, 5), float64], Tensor[(520), float64]) {
  %721 = @func_3283() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %722 = @func_3283() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %723 = cast(meta[relay.Constant][45] /* ty=Tensor[(512), float32] */, dtype="float32") /* ty=Tensor[(512), float32] */;
  %724 = cast(meta[relay.Constant][45] /* ty=Tensor[(512), float32] */, dtype="float32") /* ty=Tensor[(512), float32] */;
  %725 = reshape(%723, newshape=[16, 2, 16]) /* ty=Tensor[(16, 2, 16), float32] */;
  %726 = reshape(%724, newshape=[16, 2, 16]) /* ty=Tensor[(16, 2, 16), float32] */;
  %727 = cast(meta[relay.Constant][46] /* ty=Tensor[(520), float64] */, dtype="float64") /* ty=Tensor[(520), float64] */;
  %728 = cast(meta[relay.Constant][46] /* ty=Tensor[(520), float64] */, dtype="float64") /* ty=Tensor[(520), float64] */;
  %729 = reshape(%727, newshape=[8, 13, 5]) /* ty=Tensor[(8, 13, 5), float64] */;
  %730 = reshape(%728, newshape=[8, 13, 5]) /* ty=Tensor[(8, 13, 5), float64] */;
  %731 = @func_2412(%729, %730) /* ty=(Tensor[(8, 13, 5), float64], Tensor[(8, 13, 5), float32], Tensor[(8, 13, 5), float64]) */;
  %732 = %721.0;
  %733 = %722.0;
  %734 = @func_3155(%725, %726) /* ty=Tensor[(16, 2, 16), float32] */;
  %735 = %731.2;
  (%732, %733, %734, meta[relay.Constant][45] /* ty=Tensor[(512), float32] */, %735, meta[relay.Constant][46] /* ty=Tensor[(520), float64] */)
}

def @func_4966() -> (Tensor[(8, 16, 6), float64], Tensor[(12, 5, 5), uint32], Tensor[(60), uint32]) {
  @func_4964() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(12, 5, 5), uint32], Tensor[(60), uint32]) */
}

def @func_7938() -> (Tensor[(3, 20), uint32],) {
  %736 = @func_6555() /* ty=(Tensor[(3, 20), uint32],) */;
  %737 = %736.0;
  (%737,)
}

def @func_9569() -> (Tensor[(520), float64], Tensor[(8, 16, 6), float64]) {
  %738 = @func_9435() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %739 = @func_7181() /* ty=Tensor[(520), float64] */;
  %740 = %738.0;
  (%739, %740)
}

def @func_10488() -> Tensor[(3, 2, 2), bool] {
  %741 = @func_9684() /* ty=(Tensor[(3, 2, 2), bool],) */;
  %741.0
}

def @func_11727(%var_11714: bool, %var_11715: Tensor[(16, 1, 6), bool]) -> (Tensor[(16, 1, 6), bool], Tensor[(8, 16, 6), float64]) {
  %742 = cast(%var_11714, dtype="bool") /* ty=bool */;
  %743 = cast(%var_11715, dtype="bool") /* ty=Tensor[(16, 1, 6), bool] */;
  %744 = @func_6882() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %745 = logical_or(%742, %743) /* ty=Tensor[(16, 1, 6), bool] */;
  %746 = %744.0;
  (%745, %746)
}

def @func_7047(%var_7045: Tensor[(8, 5, 8), float32], %var_7046: Tensor[(8, 5, 8), float32]) -> (Tensor[(8, 5, 8), float32],) {
  %752 = fn (%var_7039: Tensor[(8, 5, 8), float32], %var_7040: Tensor[(8, 5, 8), float32]) -> (Tensor[(8, 5, 8), float32],) {
    %747 = cast(%var_7040, dtype="float32") /* ty=Tensor[(8, 5, 8), float32] */;
    %748 = shape_of(%var_7039, dtype="int32") /* ty=Tensor[(3), int32] */;
    %749 = cast(%var_7039, dtype="float32") /* ty=Tensor[(8, 5, 8), float32] */;
    %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %751 = add(%749, %750) /* ty=Tensor[(8, 5, 8), float32] */;
    (%751,)
  };
  %752(%var_7045, %var_7046) /* ty=(Tensor[(8, 5, 8), float32],) */
}

def @func_5178() -> (Tensor[(8, 16, 6), float64],) {
  %755 = fn () -> (Tensor[(8, 16, 6), float64],) {
    %753 = @func_3707() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
    %754 = %753.1;
    (%754,)
  };
  %755() /* ty=(Tensor[(8, 16, 6), float64],) */
}

def @func_11303() -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) {
  %759 = fn () -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) {
    %756 = @func_10984() /* ty=(Tensor[(8, 16, 6), float64],) */;
    %757 = @func_4026() /* ty=Tensor[(8, 16, 6), float64] */;
    %758 = %756.0;
    (%757, %758)
  };
  %759() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */
}

def @func_4131() -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) {
  @func_4129() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */
}

def @func_6972() -> Tensor[(520), float64] {
  %761 = fn () -> Tensor[(520), float64] {
    %760 = @func_6279() /* ty=(Tensor[(520), float64],) */;
    %760.0
  };
  %761() /* ty=Tensor[(520), float64] */
}

def @func_6451(%var_6449: Tensor[(2, 1, 5), float64], %var_6450: Tensor[(2, 8, 5), float64]) -> (Tensor[(2, 7, 5), bool], Tensor[(2, 8, 5), uint8]) {
  %768 = fn (%var_6426: Tensor[(2, 1, 5), float64], %var_6439: Tensor[(2, 8, 5), float64]) -> (Tensor[(2, 7, 5), bool], Tensor[(2, 8, 5), uint8]) {
    %762 = cast(%var_6426, dtype="bool") /* ty=Tensor[(2, 1, 5), bool] */;
    %763 = cast(meta[relay.Constant][47] /* ty=Tensor[(2, 7, 5), float64] */, dtype="bool") /* ty=Tensor[(2, 7, 5), bool] */;
    %764 = cast(%var_6426, dtype="uint8") /* ty=Tensor[(2, 1, 5), uint8] */;
    %765 = cast(%var_6439, dtype="uint8") /* ty=Tensor[(2, 8, 5), uint8] */;
    %766 = less_equal(%762, %763) /* ty=Tensor[(2, 7, 5), bool] */;
    %767 = add(%764, %765) /* ty=Tensor[(2, 8, 5), uint8] */;
    (%766, %767)
  };
  %768(%var_6449, %var_6450) /* ty=(Tensor[(2, 7, 5), bool], Tensor[(2, 8, 5), uint8]) */
}

def @func_6396() -> (Tensor[(8, 16, 6), float64], Tensor[(9, 13, 10), uint16], Tensor[(1170), uint16]) {
  @func_6394() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(9, 13, 10), uint16], Tensor[(1170), uint16]) */
}

def @func_9837(%var_9835: Tensor[(6, 9, 10), uint8], %var_9836: Tensor[(520), float32]) -> (Tensor[(6, 9, 10), uint8], Tensor[(6, 4, 11), float64], Tensor[(520), float32]) {
  %778 = fn (%var_9787: Tensor[(6, 9, 10), uint8], %var_9795: Tensor[(520), float32]) -> (Tensor[(6, 9, 10), uint8], Tensor[(6, 4, 11), float64], Tensor[(520), float32]) {
    %769 = cast(%var_9787, dtype="uint8") /* ty=Tensor[(6, 9, 10), uint8] */;
    %770 = shape_of(meta[relay.Constant][48] /* ty=Tensor[(6, 9, 10), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %771 = cast(meta[relay.Constant][48] /* ty=Tensor[(6, 9, 10), uint8] */, dtype="uint8") /* ty=Tensor[(6, 9, 10), uint8] */;
    %772 = dyn.reshape(%769, %770, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %773 = cast(%var_9795, dtype="float32") /* ty=Tensor[(520), float32] */;
    %774 = reshape(%773, newshape=[13, 4, 10]) /* ty=Tensor[(13, 4, 10), float32] */;
    %775 = @func_4015(%774) /* ty=(Tensor[(13, 4, 10), float32], Tensor[(6, 4, 11), float64], Tensor[(455), float32], Tensor[(264), float32], Tensor[(8, 16, 6), float64]) */;
    %776 = maximum(%771, %772) /* ty=Tensor[(6, 9, 10), uint8] */;
    %777 = %775.1;
    (%776, %777, %var_9795)
  };
  %778(%var_9835, %var_9836) /* ty=(Tensor[(6, 9, 10), uint8], Tensor[(6, 4, 11), float64], Tensor[(520), float32]) */
}

def @func_8931(%var_8917: Tensor[(896), float32], %var_8918: Tensor[(7, 5), float32]) -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], uint16, Tensor[(8, 16, 6), float32], Tensor[(8, 16, 6), float64], Tensor[(5, 11, 2), uint32], Tensor[(896), float32], Tensor[(7, 5), float32], Tensor[(3, 10, 2), bool], Tensor[(3, 7, 14), float64], Tensor[(7, 42), float64]) {
  %779 = @func_5503() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %780 = cast(meta[relay.Constant][49] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %781 = reshape(%780, newshape=[]) /* ty=uint16 */;
  %782 = @func_3394(%781) /* ty=(Tensor[(8, 16, 6), float64], Tensor[(5, 1), uint16], uint16) */;
  %783 = @func_6810() /* ty=(Tensor[(8, 16, 6), float32],) */;
  %784 = @func_7411() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float32], Tensor[(8, 16, 6), float32]) */;
  %785 = cast(%var_8917, dtype="float32") /* ty=Tensor[(896), float32] */;
  %786 = cast(%var_8918, dtype="float32") /* ty=Tensor[(7, 5), float32] */;
  %787 = reshape(%785, newshape=[8, 7, 16]) /* ty=Tensor[(8, 7, 16), float32] */;
  %788 = reshape(%786, newshape=[35]) /* ty=Tensor[(35), float32] */;
  %789 = @func_7696(%787, %788) /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 7, 16), float32], Tensor[(7, 1, 5), float32], Tensor[(35), float32], Tensor[(5, 11, 2), uint32], Tensor[(22), uint32], Tensor[(110), uint32]) */;
  %790 = cast(meta[relay.Constant][49] /* ty=uint16 */, dtype="float64") /* ty=float64 */;
  %791 = reshape(%790, newshape=[]) /* ty=float64 */;
  %792 = cast(meta[relay.Constant][50] /* ty=Tensor[(7, 42), float64] */, dtype="float64") /* ty=Tensor[(7, 42), float64] */;
  %793 = reshape(%792, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), float64] */;
  %794 = %779.0;
  %795 = %782.0;
  %796 = %783.0;
  %797 = %784.0;
  %798 = %789.4;
  %799 = @func_8448(%791) /* ty=Tensor[(3, 10, 2), bool] */;
  %800 = @func_3041(%793) /* ty=Tensor[(3, 7, 14), float64] */;
  (%794, %795, meta[relay.Constant][49] /* ty=uint16 */, %796, %797, %798, %var_8917, %var_8918, %799, %800, meta[relay.Constant][50] /* ty=Tensor[(7, 42), float64] */)
}

def @func_11224() -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(520), float64], Tensor[(8, 16, 6), float64]) {
  %808 = fn () -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(520), float64], Tensor[(8, 16, 6), float64]) {
    %801 = cast(meta[relay.Constant][51] /* ty=Tensor[(520), float64] */, dtype="float64") /* ty=Tensor[(520), float64] */;
    %802 = reshape(%801, newshape=[520]) /* ty=Tensor[(520), float64] */;
    %803 = @func_6359(%802) /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 13, 5), float64], Tensor[(520), float64]) */;
    %804 = @func_4265() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(108), uint32], Tensor[(1620), uint32], Tensor[(135), float64]) */;
    %805 = @func_6295() /* ty=Tensor[(8, 16, 6), float64] */;
    %806 = %803.0;
    %807 = %804.0;
    (%805, %806, meta[relay.Constant][51] /* ty=Tensor[(520), float64] */, %807)
  };
  %808() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(520), float64], Tensor[(8, 16, 6), float64]) */
}

def @func_10193() -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) {
  %809 = @func_4204() /* ty=Tensor[(8, 16, 6), float64] */;
  %810 = cast(%809, dtype="float64") /* ty=Tensor[(8, 16, 6), float64] */;
  %811 = @func_4806() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %812 = atan(%810) /* ty=Tensor[(8, 16, 6), float64] */;
  %813 = %811.0;
  (%812, %813)
}

def @func_3396(%var_3395: uint16) -> (Tensor[(8, 16, 6), float64], Tensor[(5, 1), uint16], uint16) {
  %820 = fn (%var_3390: uint16) -> (Tensor[(8, 16, 6), float64], Tensor[(5, 1), uint16], uint16) {
    %814 = @func_3283() /* ty=(Tensor[(8, 16, 6), float64],) */;
    %815 = cast(%var_3390, dtype="uint16") /* ty=uint16 */;
    %816 = reshape(%815, newshape=[]) /* ty=uint16 */;
    %817 = @func_812(%816) /* ty=(Tensor[(5, 1), uint16],) */;
    %818 = %814.0;
    %819 = %817.0;
    (%818, %819, %var_3390)
  };
  %820(%var_3395) /* ty=(Tensor[(8, 16, 6), float64], Tensor[(5, 1), uint16], uint16) */
}

def @func_7036() -> Tensor[(8, 16, 6), float64] {
  @func_4026() /* ty=Tensor[(8, 16, 6), float64] */
}

def @func_4779() -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) {
  @func_4777() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */
}

def @func_7018(%var_7016: int8, %var_7017: Tensor[(11, 10, 14), int8]) -> Tensor[(11, 10, 14), int8] {
  %823 = fn (%var_7010: int8, %var_7011: Tensor[(11, 10, 14), int8]) -> Tensor[(11, 10, 14), int8] {
    %821 = cast(%var_7010, dtype="int8") /* ty=int8 */;
    %822 = cast(%var_7011, dtype="int8") /* ty=Tensor[(11, 10, 14), int8] */;
    add(%821, %822) /* ty=Tensor[(11, 10, 14), int8] */
  };
  %823(%var_7016, %var_7017) /* ty=Tensor[(11, 10, 14), int8] */
}

def @func_6932(%var_6930: Tensor[(13, 16, 13), uint32], %var_6931: Tensor[(13, 16, 13), uint32]) -> (Tensor[(13, 16, 13), float64],) {
  %831 = fn (%var_6914: Tensor[(13, 16, 13), uint32], %var_6915: Tensor[(13, 16, 13), uint32]) -> (Tensor[(13, 16, 13), float64],) {
    %824 = cast(%var_6915, dtype="bool") /* ty=Tensor[(13, 16, 13), bool] */;
    %825 = shape_of(%var_6914, dtype="int32") /* ty=Tensor[(3), int32] */;
    %826 = cast(%var_6914, dtype="bool") /* ty=Tensor[(13, 16, 13), bool] */;
    %827 = dyn.reshape(%824, %825, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %828 = equal(%826, %827) /* ty=Tensor[(13, 16, 13), bool] */;
    %829 = cast(%828, dtype="float64") /* ty=Tensor[(13, 16, 13), float64] */;
    %830 = log10(%829) /* ty=Tensor[(13, 16, 13), float64] */;
    (%830,)
  };
  %831(%var_6930, %var_6931) /* ty=(Tensor[(13, 16, 13), float64],) */
}

def @func_5601() -> (Tensor[(8, 16, 6), float64],) {
  @func_5599() /* ty=(Tensor[(8, 16, 6), float64],) */
}

def @func_5949() -> (Tensor[(8, 16, 6), float64], Tensor[(3, 2, 2), bool], Tensor[(3, 20), uint32]) {
  %832 = @func_4082() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
  %833 = cast(meta[relay.Constant][52] /* ty=Tensor[(3, 20), uint32] */, dtype="uint32") /* ty=Tensor[(3, 20), uint32] */;
  %834 = reshape(%833, newshape=[12, 1, 5]) /* ty=Tensor[(12, 1, 5), uint32] */;
  %835 = @func_225(%834) /* ty=(Tensor[(12, 5, 5), uint32], Tensor[(3, 2, 2), bool], Tensor[(3, 2, 2), float32]) */;
  %836 = %832.0;
  %837 = %835.1;
  (%836, %837, meta[relay.Constant][52] /* ty=Tensor[(3, 20), uint32] */)
}

def @func_6359(%var_6355: Tensor[(520), float64]) -> (Tensor[(8, 16, 6), float64], Tensor[(8, 13, 5), float64], Tensor[(520), float64]) {
  %838 = cast(%var_6355, dtype="float64") /* ty=Tensor[(520), float64] */;
  %839 = cast(%var_6355, dtype="float64") /* ty=Tensor[(520), float64] */;
  %840 = reshape(%838, newshape=[8, 13, 5]) /* ty=Tensor[(8, 13, 5), float64] */;
  %841 = reshape(%839, newshape=[8, 13, 5]) /* ty=Tensor[(8, 13, 5), float64] */;
  %842 = @func_2412(%840, %841) /* ty=(Tensor[(8, 13, 5), float64], Tensor[(8, 13, 5), float32], Tensor[(8, 13, 5), float64]) */;
  %843 = @func_3765() /* ty=Tensor[(8, 16, 6), float64] */;
  %844 = %842.2;
  (%843, %844, %var_6355)
}

def @func_7327(%var_7324: Tensor[(15, 1, 2), float32], %var_7325: Tensor[(405), float32], %var_7326: Tensor[(2704), uint32]) -> (Tensor[(15, 1, 2), float32], Tensor[(9, 5, 9), float32], Tensor[(405), float32], Tensor[(13, 16, 13), float64], Tensor[(2704), uint32]) {
  @func_7322(%var_7324, %var_7325, %var_7326) /* ty=(Tensor[(15, 1, 2), float32], Tensor[(9, 5, 9), float32], Tensor[(405), float32], Tensor[(13, 16, 13), float64], Tensor[(2704), uint32]) */
}

def @func_4017(%var_4016: Tensor[(13, 4, 10), float32]) -> (Tensor[(13, 4, 10), float32], Tensor[(6, 4, 11), float64], Tensor[(455), float32], Tensor[(264), float32], Tensor[(8, 16, 6), float64]) {
  %854 = fn (%var_3982: Tensor[(13, 4, 10), float32]) -> (Tensor[(13, 4, 10), float32], Tensor[(6, 4, 11), float64], Tensor[(455), float32], Tensor[(264), float32], Tensor[(8, 16, 6), float64]) {
    %845 = cast(%var_3982, dtype="float32") /* ty=Tensor[(13, 4, 10), float32] */;
    %846 = cast(meta[relay.Constant][53] /* ty=Tensor[(455), float32] */, dtype="float32") /* ty=Tensor[(455), float32] */;
    %847 = cast(meta[relay.Constant][54] /* ty=Tensor[(264), float32] */, dtype="float32") /* ty=Tensor[(264), float32] */;
    %848 = reshape(%846, newshape=[7, 13, 5]) /* ty=Tensor[(7, 13, 5), float32] */;
    %849 = reshape(%847, newshape=[264]) /* ty=Tensor[(264), float32] */;
    %850 = @func_3976(%848, %849) /* ty=(Tensor[(7, 13, 5), float64], Tensor[(264), float32], Tensor[(6, 4, 11), float64], Tensor[(6, 4, 11), float64]) */;
    %851 = sigmoid(%845) /* ty=Tensor[(13, 4, 10), float32] */;
    %852 = %850.3;
    %853 = @func_3765() /* ty=Tensor[(8, 16, 6), float64] */;
    (%851, %852, meta[relay.Constant][53] /* ty=Tensor[(455), float32] */, meta[relay.Constant][54] /* ty=Tensor[(264), float32] */, %853)
  };
  %854(%var_4016) /* ty=(Tensor[(13, 4, 10), float32], Tensor[(6, 4, 11), float64], Tensor[(455), float32], Tensor[(264), float32], Tensor[(8, 16, 6), float64]) */
}

def @func_5890(%var_5888: Tensor[(294, 1), float64]) -> (Tensor[(8, 16, 6), float64], Tensor[(3, 7, 14), float64], Tensor[(294, 1), float64]) {
  @func_5887(%var_5888) /* ty=(Tensor[(8, 16, 6), float64], Tensor[(3, 7, 14), float64], Tensor[(294, 1), float64]) */
}

def @func_7822(%var_7815: Tensor[(416), float32]) -> (Tensor[(8, 16, 6), float64], Tensor[(3, 10, 8), float64], Tensor[(240), float64], Tensor[(4, 13, 8), float32], Tensor[(416), float32]) {
  %855 = @func_3283() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %856 = cast(meta[relay.Constant][55] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %857 = reshape(%856, newshape=[3, 10, 8]) /* ty=Tensor[(3, 10, 8), float64] */;
  %858 = cast(%var_7815, dtype="float32") /* ty=Tensor[(416), float32] */;
  %859 = reshape(%858, newshape=[4, 13, 8]) /* ty=Tensor[(4, 13, 8), float32] */;
  %860 = %855.0;
  %861 = @func_4502(%857) /* ty=Tensor[(3, 10, 8), float64] */;
  %862 = @func_1274(%859) /* ty=Tensor[(4, 13, 8), float32] */;
  (%860, %861, meta[relay.Constant][55] /* ty=Tensor[(240), float64] */, %862, %var_7815)
}

def @func_2412(%var_2386: Tensor[(8, 13, 5), float64], %var_2387: Tensor[(8, 13, 5), float64]) -> (Tensor[(8, 13, 5), float64], Tensor[(8, 13, 5), float32], Tensor[(8, 13, 5), float64]) {
  %863 = cast(%var_2387, dtype="float64") /* ty=Tensor[(8, 13, 5), float64] */;
  %864 = shape_of(%var_2386, dtype="int32") /* ty=Tensor[(3), int32] */;
  %865 = cast(%var_2386, dtype="float64") /* ty=Tensor[(8, 13, 5), float64] */;
  %866 = dyn.reshape(%863, %864, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %867 = cast(%var_2387, dtype="float32") /* ty=Tensor[(8, 13, 5), float32] */;
  %868 = cast(%var_2387, dtype="float64") /* ty=Tensor[(8, 13, 5), float64] */;
  %869 = mod(%865, %866) /* ty=Tensor[(8, 13, 5), float64] */;
  %870 = atanh(%867) /* ty=Tensor[(8, 13, 5), float32] */;
  %871 = cos(%868) /* ty=Tensor[(8, 13, 5), float64] */;
  (%869, %870, %871)
}

def @func_6522(%var_6520: Tensor[(1, 11, 2), uint32], %var_6521: Tensor[(5, 11, 2), uint32]) -> (Tensor[(5, 11, 2), uint32],) {
  %875 = fn (%var_6506: Tensor[(1, 11, 2), uint32], %var_6507: Tensor[(5, 11, 2), uint32]) -> (Tensor[(5, 11, 2), uint32],) {
    %872 = cast(%var_6506, dtype="uint32") /* ty=Tensor[(1, 11, 2), uint32] */;
    %873 = cast(%var_6507, dtype="uint32") /* ty=Tensor[(5, 11, 2), uint32] */;
    %874 = left_shift(%872, %873) /* ty=Tensor[(5, 11, 2), uint32] */;
    (%874,)
  };
  %875(%var_6520, %var_6521) /* ty=(Tensor[(5, 11, 2), uint32],) */
}

def @func_9312() -> Tensor[(8, 16, 6), float64] {
  @func_9310() /* ty=Tensor[(8, 16, 6), float64] */
}

def @func_10700() -> (Tensor[(8, 16, 6), float64],) {
  %876 = @func_3795() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %877 = %876.0;
  (%877,)
}

def @func_5213() -> Tensor[(8, 16, 6), float64] {
  %878 = @func_4129() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
  %878.0
}

def @func_11484() -> (Tensor[(8, 16, 6), float64],) {
  %881 = fn () -> (Tensor[(8, 16, 6), float64],) {
    %879 = @func_10000() /* ty=(Tensor[(4, 8, 9), float64], Tensor[(6, 9, 10), uint8], Tensor[(540), uint8], Tensor[(520), float32], Tensor[(8, 16, 6), float64]) */;
    %880 = %879.4;
    (%880,)
  };
  %881() /* ty=(Tensor[(8, 16, 6), float64],) */
}

def @func_8626() -> Tensor[(8, 16, 6), float64] {
  @func_7008() /* ty=Tensor[(8, 16, 6), float64] */
}

def @func_10000() -> (Tensor[(4, 8, 9), float64], Tensor[(6, 9, 10), uint8], Tensor[(540), uint8], Tensor[(520), float32], Tensor[(8, 16, 6), float64]) {
  %882 = cast(meta[relay.Constant][56] /* ty=Tensor[(4, 8, 9), float64] */, dtype="float64") /* ty=Tensor[(4, 8, 9), float64] */;
  %883 = cast(meta[relay.Constant][57] /* ty=Tensor[(540), uint8] */, dtype="uint8") /* ty=Tensor[(540), uint8] */;
  %884 = cast(meta[relay.Constant][58] /* ty=Tensor[(520), float32] */, dtype="float32") /* ty=Tensor[(520), float32] */;
  %885 = reshape(%883, newshape=[6, 9, 10]) /* ty=Tensor[(6, 9, 10), uint8] */;
  %886 = reshape(%884, newshape=[520]) /* ty=Tensor[(520), float32] */;
  %887 = @func_9834(%885, %886) /* ty=(Tensor[(6, 9, 10), uint8], Tensor[(6, 4, 11), float64], Tensor[(520), float32]) */;
  %888 = @func_8406() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %889 = acos(%882) /* ty=Tensor[(4, 8, 9), float64] */;
  %890 = %887.0;
  %891 = %888.0;
  (%889, %890, meta[relay.Constant][57] /* ty=Tensor[(540), uint8] */, meta[relay.Constant][58] /* ty=Tensor[(520), float32] */, %891)
}

def @func_7038() -> Tensor[(8, 16, 6), float64] {
  @func_7036() /* ty=Tensor[(8, 16, 6), float64] */
}

def @func_9545() -> Tensor[(8, 16, 6), float64] {
  %892 = @func_9435() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %892.0
}

def @func_117(%var_116: Tensor[(3, 2, 2), float64]) -> (Tensor[(3, 2, 2), float64],) {
  %895 = fn (%var_110: Tensor[(3, 2, 2), float64]) -> (Tensor[(3, 2, 2), float64],) {
    %893 = cast(%var_110, dtype="float64") /* ty=Tensor[(3, 2, 2), float64] */;
    %894 = asin(%893) /* ty=Tensor[(3, 2, 2), float64] */;
    (%894,)
  };
  %895(%var_116) /* ty=(Tensor[(3, 2, 2), float64],) */
}

def @func_5911(%var_5909: Tensor[(416), float32]) -> (Tensor[(8, 16, 6), float64], Tensor[(416), float32], Tensor[(4, 13, 8), float32]) {
  @func_5908(%var_5909) /* ty=(Tensor[(8, 16, 6), float64], Tensor[(416), float32], Tensor[(4, 13, 8), float32]) */
}

def @func_6362(%var_6360: Tensor[(520), float64]) -> (Tensor[(8, 16, 6), float64], Tensor[(8, 13, 5), float64], Tensor[(520), float64]) {
  @func_6359(%var_6360) /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 13, 5), float64], Tensor[(520), float64]) */
}

def @func_10378(%var_10376: Tensor[(5, 7, 13), int32], %var_10377: Tensor[(5, 7, 13), int32]) -> (Tensor[(5, 7, 13), bool], Tensor[(7, 13, 5), float64], Tensor[(6, 44), float32]) {
  @func_10374(%var_10376, %var_10377) /* ty=(Tensor[(5, 7, 13), bool], Tensor[(7, 13, 5), float64], Tensor[(6, 44), float32]) */
}

def @func_7182() -> Tensor[(520), float64] {
  %897 = fn () -> Tensor[(520), float64] {
    %896 = @func_7067() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(520), float64]) */;
    %896.1
  };
  %897() /* ty=Tensor[(520), float64] */
}

def @func_11807() -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], uint16) {
  %903 = fn () -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], uint16) {
    %898 = cast(meta[relay.Constant][59] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %899 = reshape(%898, newshape=[]) /* ty=uint16 */;
    %900 = @func_5434(%899) /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), bool], Tensor[(8, 16, 6), float64], Tensor[(3, 7, 14), float64], Tensor[(294), float64]) */;
    %901 = @func_10788() /* ty=Tensor[(8, 16, 6), float64] */;
    %902 = %900.2;
    (%901, %902, meta[relay.Constant][59] /* ty=uint16 */)
  };
  %903() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], uint16) */
}

def @func_10788() -> Tensor[(8, 16, 6), float64] {
  %904 = @func_5572() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %904.0
}

def @func_8450(%var_8449: float64) -> Tensor[(3, 10, 2), bool] {
  %907 = fn (%var_8437: float64) -> Tensor[(3, 10, 2), bool] {
    %905 = cast(%var_8437, dtype="bool") /* ty=bool */;
    %906 = cast(meta[relay.Constant][60] /* ty=Tensor[(3, 10, 2), float64] */, dtype="bool") /* ty=Tensor[(3, 10, 2), bool] */;
    not_equal(%905, %906) /* ty=Tensor[(3, 10, 2), bool] */
  };
  %907(%var_8449) /* ty=Tensor[(3, 10, 2), bool] */
}

def @func_5697() -> Tensor[(8, 16, 6), float64] {
  %908 = fn () -> Tensor[(8, 16, 6), float64] {
    @func_3765() /* ty=Tensor[(8, 16, 6), float64] */
  };
  %908() /* ty=Tensor[(8, 16, 6), float64] */
}

def @func_5930() -> Tensor[(8, 16, 6), float64] {
  @func_5928() /* ty=Tensor[(8, 16, 6), float64] */
}

def @func_9571() -> (Tensor[(520), float64], Tensor[(8, 16, 6), float64]) {
  @func_9569() /* ty=(Tensor[(520), float64], Tensor[(8, 16, 6), float64]) */
}

def @func_11184(%var_11183: Tensor[(15, 5, 3), float64]) -> Tensor[(15, 5, 3), float64] {
  %913 = fn (%var_11160: Tensor[(15, 5, 3), float64]) -> Tensor[(15, 5, 3), float64] {
    %909 = cast(%var_11160, dtype="float64") /* ty=Tensor[(15, 5, 3), float64] */;
    %910 = shape_of(meta[relay.Constant][61] /* ty=Tensor[(15, 5, 3), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %911 = cast(meta[relay.Constant][61] /* ty=Tensor[(15, 5, 3), float64] */, dtype="float64") /* ty=Tensor[(15, 5, 3), float64] */;
    %912 = dyn.reshape(%909, %910, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    mod(%911, %912) /* ty=Tensor[(15, 5, 3), float64] */
  };
  %913(%var_11183) /* ty=Tensor[(15, 5, 3), float64] */
}

def @func_11122() -> (Tensor[(8, 16, 6), float64],) {
  %915 = fn () -> (Tensor[(8, 16, 6), float64],) {
    %914 = @func_8626() /* ty=Tensor[(8, 16, 6), float64] */;
    (%914,)
  };
  %915() /* ty=(Tensor[(8, 16, 6), float64],) */
}

def @func_7735() -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) {
  @func_7733() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */
}

def @func_9709() -> (Tensor[(8, 16, 6), float64],) {
  %916 = @func_7008() /* ty=Tensor[(8, 16, 6), float64] */;
  (%916,)
}

def @func_10914(%var_10869: Tensor[(108), uint32]) -> (Tensor[(8, 16, 6), float64], Tensor[(416), float32], Tensor[(108), uint32], Tensor[(18, 90), uint32], Tensor[(3, 20), uint32], Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) {
  %917 = @func_8626() /* ty=Tensor[(8, 16, 6), float64] */;
  %918 = cast(%917, dtype="float64") /* ty=Tensor[(8, 16, 6), float64] */;
  %919 = cast(%var_10869, dtype="uint32") /* ty=Tensor[(108), uint32] */;
  %920 = cast(meta[relay.Constant][62] /* ty=Tensor[(18, 90), uint32] */, dtype="uint32") /* ty=Tensor[(18, 90), uint32] */;
  %921 = reshape(%919, newshape=[12, 9, 1]) /* ty=Tensor[(12, 9, 1), uint32] */;
  %922 = reshape(%920, newshape=[12, 9, 15]) /* ty=Tensor[(12, 9, 15), uint32] */;
  %923 = @func_2250(%921, %922) /* ty=(Tensor[(12, 9, 15), uint32], Tensor[(4, 13, 8), float32], Tensor[(416), float32]) */;
  %924 = @func_6555() /* ty=(Tensor[(3, 20), uint32],) */;
  %925 = sinh(%918) /* ty=Tensor[(8, 16, 6), float64] */;
  %926 = %923.2;
  %927 = %924.0;
  %928 = @func_3765() /* ty=Tensor[(8, 16, 6), float64] */;
  %929 = @func_3765() /* ty=Tensor[(8, 16, 6), float64] */;
  (%925, %926, %var_10869, meta[relay.Constant][62] /* ty=Tensor[(18, 90), uint32] */, %927, %928, %929)
}

def @func_7825(%var_7823: Tensor[(416), float32]) -> (Tensor[(8, 16, 6), float64], Tensor[(3, 10, 8), float64], Tensor[(240), float64], Tensor[(4, 13, 8), float32], Tensor[(416), float32]) {
  @func_7822(%var_7823) /* ty=(Tensor[(8, 16, 6), float64], Tensor[(3, 10, 8), float64], Tensor[(240), float64], Tensor[(4, 13, 8), float32], Tensor[(416), float32]) */
}

def @func_11054(%var_11052: Tensor[(195, 9), float32], %var_11053: Tensor[(455), int32]) -> (Tensor[(12, 5, 5), uint32], Tensor[(15, 9, 13), bool], Tensor[(195, 9), float32], Tensor[(16, 2, 16), bool], Tensor[(7, 13, 5), float64], Tensor[(455), float32], Tensor[(108), uint32], Tensor[(455), float64]) {
  @func_11050(%var_11052, %var_11053) /* ty=(Tensor[(12, 5, 5), uint32], Tensor[(15, 9, 13), bool], Tensor[(195, 9), float32], Tensor[(16, 2, 16), bool], Tensor[(7, 13, 5), float64], Tensor[(455), float32], Tensor[(108), uint32], Tensor[(455), float64]) */
}

def @func_10626(%var_10606: Tensor[(4, 9, 10), float32]) -> (Tensor[(4, 9, 10), float32], Tensor[(8, 16, 6), float64]) {
  %930 = cast(%var_10606, dtype="float32") /* ty=Tensor[(4, 9, 10), float32] */;
  %931 = sqrt(%930) /* ty=Tensor[(4, 9, 10), float32] */;
  %932 = cast(%931, dtype="float32") /* ty=Tensor[(4, 9, 10), float32] */;
  %933 = @func_5177() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %934 = erf(%932) /* ty=Tensor[(4, 9, 10), float32] */;
  %935 = %933.0;
  (%934, %935)
}

def @func_7585() -> (Tensor[(8, 16, 6), float64], Tensor[(4, 13, 8), float32], Tensor[(416), float32], Tensor[(8, 16, 6), float64]) {
  %943 = fn () -> (Tensor[(8, 16, 6), float64], Tensor[(4, 13, 8), float32], Tensor[(416), float32], Tensor[(8, 16, 6), float64]) {
    %936 = @func_6547() /* ty=(Tensor[(8, 16, 6), float64],) */;
    %937 = cast(meta[relay.Constant][63] /* ty=Tensor[(416), float32] */, dtype="float32") /* ty=Tensor[(416), float32] */;
    %938 = reshape(%937, newshape=[4, 13, 8]) /* ty=Tensor[(4, 13, 8), float32] */;
    %939 = @func_3795() /* ty=(Tensor[(8, 16, 6), float64],) */;
    %940 = %936.0;
    %941 = @func_1274(%938) /* ty=Tensor[(4, 13, 8), float32] */;
    %942 = %939.0;
    (%940, %941, meta[relay.Constant][63] /* ty=Tensor[(416), float32] */, %942)
  };
  %943() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(4, 13, 8), float32], Tensor[(416), float32], Tensor[(8, 16, 6), float64]) */
}

def @func_11618() -> (Tensor[(8, 16, 6), float64],) {
  %945 = fn () -> (Tensor[(8, 16, 6), float64],) {
    %944 = @func_5696() /* ty=Tensor[(8, 16, 6), float64] */;
    (%944,)
  };
  %945() /* ty=(Tensor[(8, 16, 6), float64],) */
}

def @func_7205() -> (Tensor[(8, 16, 6), float64],) {
  %946 = @func_4129() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
  %947 = %946.1;
  (%947,)
}

def @func_7009() -> Tensor[(8, 16, 6), float64] {
  %949 = fn () -> Tensor[(8, 16, 6), float64] {
    %948 = @func_4082() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
    %948.1
  };
  %949() /* ty=Tensor[(8, 16, 6), float64] */
}

def @func_8182(%var_8171: uint16) -> (Tensor[(8, 16, 6), float64], Tensor[(520), float64], uint16) {
  %950 = cast(%var_8171, dtype="uint16") /* ty=uint16 */;
  %951 = reshape(%950, newshape=[]) /* ty=uint16 */;
  %952 = @func_7780(%951) /* ty=(Tensor[(520), float64], Tensor[(5, 1), uint16], uint16) */;
  %953 = @func_6989() /* ty=Tensor[(8, 16, 6), float64] */;
  %954 = %952.0;
  (%953, %954, %var_8171)
}

def @func_10231() -> (Tensor[(520), float64], Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) {
  @func_10229() /* ty=(Tensor[(520), float64], Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */
}

def @func_6083() -> Tensor[(8, 16, 6), float64] {
  @func_6081() /* ty=Tensor[(8, 16, 6), float64] */
}

def @func_3487() -> (Tensor[(8, 16, 6), float64], Tensor[(7, 1, 5), float32], Tensor[(35), float32], Tensor[(12, 9, 15), uint32], Tensor[(108), uint32], Tensor[(1620), uint32], Tensor[(3, 2, 2), bool], Tensor[(60), uint32]) {
  @func_3485() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(7, 1, 5), float32], Tensor[(35), float32], Tensor[(12, 9, 15), uint32], Tensor[(108), uint32], Tensor[(1620), uint32], Tensor[(3, 2, 2), bool], Tensor[(60), uint32]) */
}

def @func_6296() -> Tensor[(8, 16, 6), float64] {
  %956 = fn () -> Tensor[(8, 16, 6), float64] {
    %955 = @func_4552() /* ty=(Tensor[(8, 16, 6), float64],) */;
    %955.0
  };
  %956() /* ty=Tensor[(8, 16, 6), float64] */
}

def @func_10002() -> (Tensor[(4, 8, 9), float64], Tensor[(6, 9, 10), uint8], Tensor[(540), uint8], Tensor[(520), float32], Tensor[(8, 16, 6), float64]) {
  @func_10000() /* ty=(Tensor[(4, 8, 9), float64], Tensor[(6, 9, 10), uint8], Tensor[(540), uint8], Tensor[(520), float32], Tensor[(8, 16, 6), float64]) */
}

def @func_10702() -> (Tensor[(8, 16, 6), float64],) {
  @func_10700() /* ty=(Tensor[(8, 16, 6), float64],) */
}

def @func_3980(%var_3978: Tensor[(7, 13, 5), float32], %var_3979: Tensor[(264), float32]) -> (Tensor[(7, 13, 5), float64], Tensor[(264), float32], Tensor[(6, 4, 11), float64], Tensor[(6, 4, 11), float64]) {
  @func_3976(%var_3978, %var_3979) /* ty=(Tensor[(7, 13, 5), float64], Tensor[(264), float32], Tensor[(6, 4, 11), float64], Tensor[(6, 4, 11), float64]) */
}

def @func_3630() -> Tensor[(8, 16, 6), float64] {
  %958 = fn () -> Tensor[(8, 16, 6), float64] {
    %957 = @func_3283() /* ty=(Tensor[(8, 16, 6), float64],) */;
    %957.0
  };
  %958() /* ty=Tensor[(8, 16, 6), float64] */
}

def @func_10917(%var_10915: Tensor[(108), uint32]) -> (Tensor[(8, 16, 6), float64], Tensor[(416), float32], Tensor[(108), uint32], Tensor[(18, 90), uint32], Tensor[(3, 20), uint32], Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) {
  @func_10914(%var_10915) /* ty=(Tensor[(8, 16, 6), float64], Tensor[(416), float32], Tensor[(108), uint32], Tensor[(18, 90), uint32], Tensor[(3, 20), uint32], Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */
}

def @func_11596() -> Tensor[(294), float64] {
  %960 = fn () -> Tensor[(294), float64] {
    %959 = @func_9010() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64], Tensor[(294), float64], Tensor[(8, 16, 6), float64]) */;
    %959.2
  };
  %960() /* ty=Tensor[(294), float64] */
}

def @func_4552() -> (Tensor[(8, 16, 6), float64],) {
  %961 = @func_4129() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
  %962 = %961.1;
  (%962,)
}

def @func_3765() -> Tensor[(8, 16, 6), float64] {
  %963 = @func_3707() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
  %963.0
}

def @func_6394() -> (Tensor[(8, 16, 6), float64], Tensor[(9, 13, 10), uint16], Tensor[(1170), uint16]) {
  %964 = cast(meta[relay.Constant][64] /* ty=Tensor[(1170), uint16] */, dtype="uint16") /* ty=Tensor[(1170), uint16] */;
  %965 = cast(meta[relay.Constant][64] /* ty=Tensor[(1170), uint16] */, dtype="uint16") /* ty=Tensor[(1170), uint16] */;
  %966 = reshape(%964, newshape=[9, 13, 10]) /* ty=Tensor[(9, 13, 10), uint16] */;
  %967 = reshape(%965, newshape=[9, 13, 10]) /* ty=Tensor[(9, 13, 10), uint16] */;
  %968 = @func_5806(%966, %967) /* ty=(Tensor[(9, 13, 10), uint16],) */;
  %969 = @func_6081() /* ty=Tensor[(8, 16, 6), float64] */;
  %970 = %968.0;
  (%969, %970, meta[relay.Constant][64] /* ty=Tensor[(1170), uint16] */)
}

def @func_2141(%var_2134: Tensor[(9, 5, 9), float32]) -> Tensor[(9, 5, 9), float32] {
  %971 = cast(meta[relay.Constant][65] /* ty=Tensor[(9, 5, 9), float32] */, dtype="float32") /* ty=Tensor[(9, 5, 9), float32] */;
  %972 = shape_of(%var_2134, dtype="int32") /* ty=Tensor[(3), int32] */;
  %973 = cast(%var_2134, dtype="float32") /* ty=Tensor[(9, 5, 9), float32] */;
  %974 = dyn.reshape(%971, %972, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%973, %974) /* ty=Tensor[(9, 5, 9), float32] */
}

def @func_9301() -> (Tensor[(8, 16, 6), float64], Tensor[(6, 4, 11), float64], Tensor[(264), float32], Tensor[(8, 16, 6), float64]) {
  @func_9299() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(6, 4, 11), float64], Tensor[(264), float32], Tensor[(8, 16, 6), float64]) */
}

def @func_8728() -> (Tensor[(3, 2, 2), bool], Tensor[(9, 5, 9), float32], Tensor[(405), float32], Tensor[(3, 2, 2), float64]) {
  @func_8726() /* ty=(Tensor[(3, 2, 2), bool], Tensor[(9, 5, 9), float32], Tensor[(405), float32], Tensor[(3, 2, 2), float64]) */
}

def @func_5928() -> Tensor[(8, 16, 6), float64] {
  %975 = @func_5333() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %975.0
}

def @func_5503() -> (Tensor[(8, 16, 6), float64],) {
  %976 = @func_3765() /* ty=Tensor[(8, 16, 6), float64] */;
  (%976,)
}

def @func_3976(%var_3954: Tensor[(7, 13, 5), float32], %var_3961: Tensor[(264), float32]) -> (Tensor[(7, 13, 5), float64], Tensor[(264), float32], Tensor[(6, 4, 11), float64], Tensor[(6, 4, 11), float64]) {
  %977 = @func_3485() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(7, 1, 5), float32], Tensor[(35), float32], Tensor[(12, 9, 15), uint32], Tensor[(108), uint32], Tensor[(1620), uint32], Tensor[(3, 2, 2), bool], Tensor[(60), uint32]) */;
  %978 = %977.1;
  %979 = cast(%978, dtype="float64") /* ty=Tensor[(7, 1, 5), float64] */;
  %980 = cast(%var_3954, dtype="float64") /* ty=Tensor[(7, 13, 5), float64] */;
  %981 = cast(%var_3961, dtype="float32") /* ty=Tensor[(264), float32] */;
  %982 = reshape(%981, newshape=[6, 4, 11]) /* ty=Tensor[(6, 4, 11), float32] */;
  %983 = @func_339(%982) /* ty=(Tensor[(6, 4, 11), float64],) */;
  %984 = %983.0;
  %985 = cast(%984, dtype="float32") /* ty=Tensor[(6, 4, 11), float32] */;
  %986 = reshape(%985, newshape=[6, 4, 11]) /* ty=Tensor[(6, 4, 11), float32] */;
  %987 = @func_339(%986) /* ty=(Tensor[(6, 4, 11), float64],) */;
  %988 = cast(%984, dtype="float64") /* ty=Tensor[(6, 4, 11), float64] */;
  %989 = divide(%979, %980) /* ty=Tensor[(7, 13, 5), float64] */;
  %990 = %987.0;
  %991 = cosh(%988) /* ty=Tensor[(6, 4, 11), float64] */;
  (%989, %var_3961, %990, %991)
}

def @func_2416(%var_2414: Tensor[(8, 13, 5), float64], %var_2415: Tensor[(8, 13, 5), float64]) -> (Tensor[(8, 13, 5), float64], Tensor[(8, 13, 5), float32], Tensor[(8, 13, 5), float64]) {
  @func_2412(%var_2414, %var_2415) /* ty=(Tensor[(8, 13, 5), float64], Tensor[(8, 13, 5), float32], Tensor[(8, 13, 5), float64]) */
}

def @func_6067() -> (Tensor[(8, 16, 6), float64],) {
  @func_6065() /* ty=(Tensor[(8, 16, 6), float64],) */
}

def @func_3485() -> (Tensor[(8, 16, 6), float64], Tensor[(7, 1, 5), float32], Tensor[(35), float32], Tensor[(12, 9, 15), uint32], Tensor[(108), uint32], Tensor[(1620), uint32], Tensor[(3, 2, 2), bool], Tensor[(60), uint32]) {
  %992 = @func_3283() /* ty=(Tensor[(8, 16, 6), float64],) */;
  %993 = cast(meta[relay.Constant][66] /* ty=Tensor[(35), float32] */, dtype="float32") /* ty=Tensor[(35), float32] */;
  %994 = reshape(%993, newshape=[7, 1, 5]) /* ty=Tensor[(7, 1, 5), float32] */;
  %995 = @func_364(%994) /* ty=(Tensor[(7, 1, 5), float32], Tensor[(7, 1, 5), float32]) */;
  %996 = cast(meta[relay.Constant][67] /* ty=Tensor[(108), uint32] */, dtype="uint32") /* ty=Tensor[(108), uint32] */;
  %997 = cast(meta[relay.Constant][68] /* ty=Tensor[(1620), uint32] */, dtype="uint32") /* ty=Tensor[(1620), uint32] */;
  %998 = reshape(%996, newshape=[12, 9, 1]) /* ty=Tensor[(12, 9, 1), uint32] */;
  %999 = reshape(%997, newshape=[12, 9, 15]) /* ty=Tensor[(12, 9, 15), uint32] */;
  %1000 = @func_2250(%998, %999) /* ty=(Tensor[(12, 9, 15), uint32], Tensor[(4, 13, 8), float32], Tensor[(416), float32]) */;
  %1001 = cast(meta[relay.Constant][69] /* ty=Tensor[(60), uint32] */, dtype="uint32") /* ty=Tensor[(60), uint32] */;
  %1002 = reshape(%1001, newshape=[12, 1, 5]) /* ty=Tensor[(12, 1, 5), uint32] */;
  %1003 = @func_225(%1002) /* ty=(Tensor[(12, 5, 5), uint32], Tensor[(3, 2, 2), bool], Tensor[(3, 2, 2), float32]) */;
  %1004 = %992.0;
  %1005 = %995.0;
  %1006 = %1000.0;
  %1007 = %1003.1;
  (%1004, %1005, meta[relay.Constant][66] /* ty=Tensor[(35), float32] */, %1006, meta[relay.Constant][67] /* ty=Tensor[(108), uint32] */, meta[relay.Constant][68] /* ty=Tensor[(1620), uint32] */, %1007, meta[relay.Constant][69] /* ty=Tensor[(60), uint32] */)
}

def @func_812(%var_786: uint16) -> (Tensor[(5, 1), uint16],) {
  %1008 = cast(%var_786, dtype="uint16") /* ty=uint16 */;
  %1009 = cast(meta[relay.Constant][70] /* ty=Tensor[(5, 1), uint16] */, dtype="uint16") /* ty=Tensor[(5, 1), uint16] */;
  %1010 = right_shift(%1008, %1009) /* ty=Tensor[(5, 1), uint16] */;
  (%1010,)
}

def @func_3044(%var_3042: Tensor[(3, 7, 14), float64]) -> Tensor[(3, 7, 14), float64] {
  @func_3041(%var_3042) /* ty=Tensor[(3, 7, 14), float64] */
}

def @func_7228() -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) {
  %1014 = fn () -> (Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) {
    %1011 = @func_4129() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */;
    %1012 = @func_6081() /* ty=Tensor[(8, 16, 6), float64] */;
    %1013 = %1011.1;
    (%1012, %1013)
  };
  %1014() /* ty=(Tensor[(8, 16, 6), float64], Tensor[(8, 16, 6), float64]) */
}

def @func_8185(%var_8183: uint16) -> (Tensor[(8, 16, 6), float64], Tensor[(520), float64], uint16) {
  @func_8182(%var_8183) /* ty=(Tensor[(8, 16, 6), float64], Tensor[(520), float64], uint16) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen484/build/output.py", line 3249, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:22:43] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

