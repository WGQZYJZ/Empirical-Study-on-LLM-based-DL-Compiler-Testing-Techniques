==========mod==========
#[version = "0.0.5"]
def @func_5996() -> Tensor[(4, 10, 16), float64] {
  %0 = @func_1637() /* ty=(Tensor[(4, 10, 16), float64],) */;
  %0.0
}

def @func_2367() -> Tensor[(324, 1), uint16] {
  %1 = @func_1344() /* ty=(Tensor[(324, 1), uint16],) */;
  %1.0
}

def @func_3515() -> Tensor[(4, 10, 16), float32] {
  %2 = @func_3266() /* ty=(Tensor[(4, 10, 16), float32],) */;
  %2.0
}

def @func_1614() -> (Tensor[(324, 1), uint16],) {
  %3 = @func_1485() /* ty=Tensor[(324, 1), uint16] */;
  (%3,)
}

def @func_2137(%var_2125: Tensor[(4860), uint16], %var_2126: Tensor[(324), float32]) -> (Tensor[(640), float32], Tensor[(324, 1), uint16], Tensor[(4860), uint16], Tensor[(324), float32]) {
  %4 = @func_1207() /* ty=(Tensor[(324, 1), uint16], Tensor[(4, 10, 16), int8], Tensor[(640), float32], Tensor[(324, ?), bool], Tensor[(324, 1), float32]) */;
  %5 = cast(%var_2125, dtype="uint16") /* ty=Tensor[(4860), uint16] */;
  %6 = cast(%var_2126, dtype="float32") /* ty=Tensor[(324), float32] */;
  %7 = reshape(%5, newshape=[324, 15]) /* ty=Tensor[(324, 15), uint16] */;
  %8 = reshape(%6, newshape=[9, 9, 4]) /* ty=Tensor[(9, 9, 4), float32] */;
  %9 = @func_1317(%7, %8) /* ty=(Tensor[(324, 15), float64], Tensor[(640), float32], Tensor[(9, 9, 4), float32], Tensor[(9, 9, 4), float64], Tensor[(324, 1), uint16]) */;
  %10 = %4.2;
  %11 = %9.4;
  (%10, %11, %var_2125, %var_2126)
}

def @func_4577(%var_4531: Tensor[(28, 120), bool], %var_4555: Tensor[(16, 14, 15), float32], %var_4574: Tensor[(15), int64]) -> (Tensor[(4, 10, 16), float32], Tensor[(28, 120), bool], Tensor[(9, 9, 4), float32], Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32], Tensor[(16, 14, 15), bool], Tensor[(5, ?, 3), int32], Tensor[(15), int64]) {
  %12 = @func_3266() /* ty=(Tensor[(4, 10, 16), float32],) */;
  %13 = @func_4432() /* ty=(Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32], Tensor[(77), float64]) */;
  %14 = @func_893() /* ty=(Tensor[(9, 9, 4), float32],) */;
  %15 = @func_1434() /* ty=(Tensor[(4, 10, 16), float32], Tensor[(9, 9, 4), float32]) */;
  %16 = cast(%var_4531, dtype="bool") /* ty=Tensor[(28, 120), bool] */;
  %17 = cast(%var_4531, dtype="bool") /* ty=Tensor[(28, 120), bool] */;
  %18 = reshape(%16, newshape=[16, 14, 15]) /* ty=Tensor[(16, 14, 15), bool] */;
  %19 = reshape(%17, newshape=[16, 14, 15]) /* ty=Tensor[(16, 14, 15), bool] */;
  %20 = @func_4066(%18, %19) /* ty=(Tensor[(9, 9, 4), float32], Tensor[(16, 14, 15), float32], Tensor[(16, 14, 15), float32]) */;
  %21 = %20.2;
  %22 = cast(%var_4555, dtype="bool") /* ty=Tensor[(16, 14, 15), bool] */;
  %23 = shape_of(%21, dtype="int32") /* ty=Tensor[(3), int32] */;
  %24 = cast(%21, dtype="bool") /* ty=Tensor[(16, 14, 15), bool] */;
  %25 = dyn.reshape(%22, %23, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %26 = cast(%var_4574, dtype="int64") /* ty=Tensor[(15), int64] */;
  %27 = reshape(%26, newshape=[5, 1, 3]) /* ty=Tensor[(5, 1, 3), int64] */;
  %28 = %12.0;
  %29 = %13.0;
  %30 = %14.0;
  %31 = %15.0;
  %32 = not_equal(%24, %25) /* ty=Tensor[(16, 14, 15), bool] */;
  %33 = @func_3482(%27) /* ty=Tensor[(5, ?, 3), int32] */;
  (%28, %var_4531, %29, %30, %31, %32, %33, %var_4574)
}

def @func_3615(%var_3573: Tensor[(1040), float64], %var_3583: Tensor[(10, 8, 13), float64]) -> (Tensor[(4, 10, 16), int32], Tensor[(1040), float64], Tensor[(10, 8, 13), bool], Tensor[(324, 1), uint16], int64, Tensor[(56), int64], Tensor[(896), float64], Tensor[(4, 10, 16), float64], Tensor[(4, 10, 16), float32]) {
  %34 = @func_769() /* ty=(Tensor[(4, 10, 16), int32], Tensor[(4, 10, 16), float64]) */;
  %35 = cast(meta[relay.Constant][0] /* ty=Tensor[(1040), float64] */, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %36 = shape_of(%var_3573, dtype="int32") /* ty=Tensor[(1), int32] */;
  %37 = cast(%var_3573, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %38 = dyn.reshape(%35, %36, newshape=[]) /* ty=Tensor[(?), float64] */;
  %39 = cast(%var_3573, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %40 = reshape(%39, newshape=[10, 8, 13]) /* ty=Tensor[(10, 8, 13), float64] */;
  %41 = @func_1809(%40) /* ty=(Tensor[(10, 8, 13), float64],) */;
  %42 = %41.0;
  %43 = cast(%var_3583, dtype="bool") /* ty=Tensor[(10, 8, 13), bool] */;
  %44 = shape_of(%42, dtype="int32") /* ty=Tensor[(3), int32] */;
  %45 = cast(%42, dtype="bool") /* ty=Tensor[(10, 8, 13), bool] */;
  %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %47 = cast(1 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %48 = cast(meta[relay.Constant][1] /* ty=Tensor[(56), int64] */, dtype="int64") /* ty=Tensor[(56), int64] */;
  %49 = cast(meta[relay.Constant][2] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
  %50 = reshape(%47, newshape=[]) /* ty=int64 */;
  %51 = reshape(%48, newshape=[7, 8, 1]) /* ty=Tensor[(7, 8, 1), int64] */;
  %52 = reshape(%49, newshape=[7, 8, 16]) /* ty=Tensor[(7, 8, 16), float64] */;
  %53 = @func_2354(%50, %51, %52) /* ty=(Tensor[(324, 1), uint16], Tensor[(7, 8, ?), uint16], Tensor[(9, 9, 4), float32], Tensor[(7, 8, ?), float32], Tensor[(7, 8, 16), uint32]) */;
  %54 = @func_2675() /* ty=(Tensor[(4, 10, 16), float64], Tensor[(4, 10, 16), float32]) */;
  %55 = @func_404() /* ty=(Tensor[(4, 10, 16), float32],) */;
  %56 = %34.0;
  %57 = floor_divide(%37, %38) /* ty=Tensor[(1040), float64] */;
  %58 = logical_and(%45, %46) /* ty=Tensor[(10, 8, 13), bool] */;
  %59 = %53.0;
  %60 = %54.0;
  %61 = %55.0;
  (%56, %57, %58, %59, 1 /* ty=int64 */, meta[relay.Constant][1] /* ty=Tensor[(56), int64] */, meta[relay.Constant][2] /* ty=Tensor[(896), float64] */, %60, %61)
}

def @func_6142() -> (Tensor[(324, 1), uint16],) {
  %62 = @func_5057() /* ty=(Tensor[(324, 1), uint16],) */;
  %63 = %62.0;
  (%63,)
}

def @func_5310() -> Tensor[(324, 1), uint16] {
  %64 = @func_1344() /* ty=(Tensor[(324, 1), uint16],) */;
  %64.0
}

def @func_4746() -> (Tensor[(5, 1, 3), float64],) {
  %65 = @func_4114() /* ty=(Tensor[(9, 9, 4), float32], Tensor[(9, 9, 4), float32], Tensor[(5, 1, 3), float64]) */;
  %66 = %65.2;
  (%66,)
}

def @func_1344() -> (Tensor[(324, 1), uint16],) {
  %67 = @func_445() /* ty=(Tensor[(4, 10, 16), float32], Tensor[(9, 9, 4), uint16], Tensor[(324, 1), uint16]) */;
  %68 = %67.2;
  (%68,)
}

def @func_5979(%var_5961: Tensor[(324, 3), uint16]) -> Tensor[(324, 3), float32] {
  %69 = @func_5310() /* ty=Tensor[(324, 1), uint16] */;
  %70 = cast(%69, dtype="bool") /* ty=Tensor[(324, 1), bool] */;
  %71 = cast(%var_5961, dtype="bool") /* ty=Tensor[(324, 3), bool] */;
  %72 = less_equal(%70, %71) /* ty=Tensor[(324, 3), bool] */;
  %73 = cast(%72, dtype="float32") /* ty=Tensor[(324, 3), float32] */;
  sqrt(%73) /* ty=Tensor[(324, 3), float32] */
}

def @func_4788(%var_4751: Tensor[(12, 13, 8), float64], %var_4777: Tensor[(15), int64]) -> (Tensor[(12, 13, 8), float64], Tensor[(5, ?, 3), int32], Tensor[(15), int64], Tensor[(4, 10, 16), int32], Tensor[(56), int64], Tensor[(1040), float64]) {
  %74 = cast(%var_4751, dtype="float64") /* ty=Tensor[(12, 13, 8), float64] */;
  %75 = rsqrt(%74) /* ty=Tensor[(12, 13, 8), float64] */;
  %76 = cast(%var_4751, dtype="float32") /* ty=Tensor[(12, 13, 8), float32] */;
  %77 = sigmoid(%76) /* ty=Tensor[(12, 13, 8), float32] */;
  %78 = cast(%77, dtype="float64") /* ty=Tensor[(12, 13, 8), float64] */;
  %79 = shape_of(%75, dtype="int32") /* ty=Tensor[(3), int32] */;
  %80 = cast(%75, dtype="float64") /* ty=Tensor[(12, 13, 8), float64] */;
  %81 = dyn.reshape(%78, %79, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %82 = cast(%var_4777, dtype="int64") /* ty=Tensor[(15), int64] */;
  %83 = reshape(%82, newshape=[5, 1, 3]) /* ty=Tensor[(5, 1, 3), int64] */;
  %84 = @func_769() /* ty=(Tensor[(4, 10, 16), int32], Tensor[(4, 10, 16), float64]) */;
  %85 = cast(meta[relay.Constant][3] /* ty=Tensor[(1040), float64] */, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %86 = cast(meta[relay.Constant][3] /* ty=Tensor[(1040), float64] */, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %87 = reshape(%85, newshape=[1040]) /* ty=Tensor[(1040), float64] */;
  %88 = reshape(%86, newshape=[10, 8, 13]) /* ty=Tensor[(10, 8, 13), float64] */;
  %89 = @func_3615(%87, %88) /* ty=(Tensor[(4, 10, 16), int32], Tensor[(1040), float64], Tensor[(10, 8, 13), bool], Tensor[(324, 1), uint16], int64, Tensor[(56), int64], Tensor[(896), float64], Tensor[(4, 10, 16), float64], Tensor[(4, 10, 16), float32]) */;
  %90 = floor_mod(%80, %81) /* ty=Tensor[(12, 13, 8), float64] */;
  %91 = @func_3482(%83) /* ty=Tensor[(5, ?, 3), int32] */;
  %92 = %84.0;
  %93 = %89.5;
  (%90, %91, %var_4777, %92, %93, meta[relay.Constant][3] /* ty=Tensor[(1040), float64] */)
}

def @func_501(%var_472: Tensor[(9, 8, 2), float64]) -> (Tensor[(9, 8, 2), float64], Tensor[(9, 9, 4), uint16], Tensor[(324, 1), uint16], Tensor[(9, 9, 4), uint16]) {
  %94 = cast(%var_472, dtype="float64") /* ty=Tensor[(9, 8, 2), float64] */;
  %95 = @func_445() /* ty=(Tensor[(4, 10, 16), float32], Tensor[(9, 9, 4), uint16], Tensor[(324, 1), uint16]) */;
  %96 = @func_445() /* ty=(Tensor[(4, 10, 16), float32], Tensor[(9, 9, 4), uint16], Tensor[(324, 1), uint16]) */;
  %97 = @func_445() /* ty=(Tensor[(4, 10, 16), float32], Tensor[(9, 9, 4), uint16], Tensor[(324, 1), uint16]) */;
  %98 = sin(%94) /* ty=Tensor[(9, 8, 2), float64] */;
  %99 = %95.1;
  %100 = %96.2;
  %101 = %97.1;
  (%98, %99, %100, %101)
}

def @func_3538() -> (Tensor[(324, 1), uint16],) {
  %102 = @func_1916() /* ty=(Tensor[(4, 10, 16), float64], Tensor[(324, 1), uint16]) */;
  %103 = %102.1;
  (%103,)
}

def @func_5881() -> (Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32], Tensor[(324, 1), uint16]) {
  %104 = @func_2675() /* ty=(Tensor[(4, 10, 16), float64], Tensor[(4, 10, 16), float32]) */;
  %105 = @func_4988() /* ty=Tensor[(9, 9, 4), float32] */;
  %106 = %104.1;
  %107 = @func_2367() /* ty=Tensor[(324, 1), uint16] */;
  (%105, %106, %107)
}

def @func_606() -> (Tensor[(324, 1), uint16], Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float32]) {
  %108 = @func_445() /* ty=(Tensor[(4, 10, 16), float32], Tensor[(9, 9, 4), uint16], Tensor[(324, 1), uint16]) */;
  %109 = %108.2;
  %110 = cast(%109, dtype="uint16") /* ty=Tensor[(324, 1), uint16] */;
  %111 = cast(%109, dtype="uint16") /* ty=Tensor[(324, 1), uint16] */;
  %112 = reshape(%110, newshape=[9, 9, 4]) /* ty=Tensor[(9, 9, 4), uint16] */;
  %113 = reshape(%111, newshape=[9, 9, 4]) /* ty=Tensor[(9, 9, 4), uint16] */;
  %114 = @func_377(%112, %113) /* ty=Tensor[(9, 9, 4), uint16] */;
  %115 = cast(%114, dtype="float32") /* ty=Tensor[(9, 9, 4), float32] */;
  %116 = @func_404() /* ty=(Tensor[(4, 10, 16), float32],) */;
  %117 = @func_551() /* ty=(Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float32]) */;
  %118 = sin(%115) /* ty=Tensor[(9, 9, 4), float32] */;
  %119 = %116.0;
  %120 = %117.0;
  (%109, %118, %119, %120)
}

def @func_4732() -> (Tensor[(324, 1), uint16],) {
  %121 = @func_1916() /* ty=(Tensor[(4, 10, 16), float64], Tensor[(324, 1), uint16]) */;
  %122 = %121.1;
  (%122,)
}

def @func_404() -> (Tensor[(4, 10, 16), float32],) {
  %123 = cast(meta[relay.Constant][4] /* ty=Tensor[(4, 10, 16), float32] */, dtype="float32") /* ty=Tensor[(4, 10, 16), float32] */;
  %124 = log2(%123) /* ty=Tensor[(4, 10, 16), float32] */;
  (%124,)
}

def @func_5042() -> Tensor[(5, 1, 3), float64] {
  %125 = @func_2512() /* ty=(Tensor[(5, ?, 3), float64], Tensor[(5, 1, 3), float64], Tensor[(5, ?, 3), int64]) */;
  %125.1
}

def @func_5626(%var_5585: Tensor[(4, 10, 16), float32], %var_5607: Tensor[(324), float32]) -> (Tensor[(4, 10, 16), uint64], Tensor[(640), float32], Tensor[(4860), uint16], Tensor[(324), float32]) {
  %126 = @func_2095() /* ty=(Tensor[(4, 10, 16), float32],) */;
  %127 = %126.0;
  %128 = cast(%127, dtype="float32") /* ty=Tensor[(4, 10, 16), float32] */;
  %129 = sigmoid(%128) /* ty=Tensor[(4, 10, 16), float32] */;
  %130 = cast(%var_5585, dtype="uint64") /* ty=Tensor[(4, 10, 16), uint64] */;
  %131 = shape_of(%129, dtype="int32") /* ty=Tensor[(3), int32] */;
  %132 = cast(%129, dtype="uint64") /* ty=Tensor[(4, 10, 16), uint64] */;
  %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %134 = cast(meta[relay.Constant][5] /* ty=Tensor[(4860), uint16] */, dtype="uint16") /* ty=Tensor[(4860), uint16] */;
  %135 = cast(%var_5607, dtype="float32") /* ty=Tensor[(324), float32] */;
  %136 = reshape(%134, newshape=[4860]) /* ty=Tensor[(4860), uint16] */;
  %137 = reshape(%135, newshape=[324]) /* ty=Tensor[(324), float32] */;
  %138 = @func_2137(%136, %137) /* ty=(Tensor[(640), float32], Tensor[(324, 1), uint16], Tensor[(4860), uint16], Tensor[(324), float32]) */;
  %139 = right_shift(%132, %133) /* ty=Tensor[(4, 10, 16), uint64] */;
  %140 = %138.0;
  (%139, %140, meta[relay.Constant][5] /* ty=Tensor[(4860), uint16] */, %var_5607)
}

def @func_551() -> (Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float32]) {
  %141 = @func_404() /* ty=(Tensor[(4, 10, 16), float32],) */;
  %142 = @func_404() /* ty=(Tensor[(4, 10, 16), float32],) */;
  %143 = %142.0;
  %144 = cast(%143, dtype="float32") /* ty=Tensor[(4, 10, 16), float32] */;
  %145 = %141.0;
  %146 = atan(%144) /* ty=Tensor[(4, 10, 16), float32] */;
  (%145, %146)
}

def @func_2675() -> (Tensor[(4, 10, 16), float64], Tensor[(4, 10, 16), float32]) {
  %147 = @func_2560() /* ty=(Tensor[(4, 10, 16), float64], Tensor[(4, 10, 16), float32]) */;
  %148 = @func_404() /* ty=(Tensor[(4, 10, 16), float32],) */;
  %149 = %147.0;
  %150 = %148.0;
  (%149, %150)
}

def @func_1317(%var_1275: Tensor[(324, 15), uint16], %var_1291: Tensor[(9, 9, 4), float32]) -> (Tensor[(324, 15), float64], Tensor[(640), float32], Tensor[(9, 9, 4), float32], Tensor[(9, 9, 4), float64], Tensor[(324, 1), uint16]) {
  %151 = @func_606() /* ty=(Tensor[(324, 1), uint16], Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float32]) */;
  %152 = %151.0;
  %153 = cast(%152, dtype="float64") /* ty=Tensor[(324, 1), float64] */;
  %154 = cast(%var_1275, dtype="float64") /* ty=Tensor[(324, 15), float64] */;
  %155 = cast(meta[relay.Constant][6] /* ty=Tensor[(640), float32] */, dtype="float32") /* ty=Tensor[(640), float32] */;
  %156 = reshape(%155, newshape=[4, 10, 16]) /* ty=Tensor[(4, 10, 16), float32] */;
  %157 = @func_1012(%156) /* ty=(Tensor[(4, 10, 16), int8], Tensor[(9, 9, 4), float32], Tensor[(9, 9, 4), float32]) */;
  %158 = %157.1;
  %159 = cast(%var_1291, dtype="float32") /* ty=Tensor[(9, 9, 4), float32] */;
  %160 = shape_of(%158, dtype="int32") /* ty=Tensor[(3), int32] */;
  %161 = cast(%158, dtype="float32") /* ty=Tensor[(9, 9, 4), float32] */;
  %162 = dyn.reshape(%159, %160, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %163 = cast(%var_1291, dtype="float64") /* ty=Tensor[(9, 9, 4), float64] */;
  %164 = @func_445() /* ty=(Tensor[(4, 10, 16), float32], Tensor[(9, 9, 4), uint16], Tensor[(324, 1), uint16]) */;
  %165 = floor_divide(%153, %154) /* ty=Tensor[(324, 15), float64] */;
  %166 = divide(%161, %162) /* ty=Tensor[(9, 9, 4), float32] */;
  %167 = rsqrt(%163) /* ty=Tensor[(9, 9, 4), float64] */;
  %168 = %164.2;
  (%165, meta[relay.Constant][6] /* ty=Tensor[(640), float32] */, %166, %167, %168)
}

def @func_2095() -> (Tensor[(4, 10, 16), float32],) {
  %169 = @func_445() /* ty=(Tensor[(4, 10, 16), float32], Tensor[(9, 9, 4), uint16], Tensor[(324, 1), uint16]) */;
  %170 = %169.0;
  (%170,)
}

def @func_5790() -> (Tensor[(5, 1, 3), float64], Tensor[(4, 10, 16), float32]) {
  %171 = @func_404() /* ty=(Tensor[(4, 10, 16), float32],) */;
  %172 = @func_5042() /* ty=Tensor[(5, 1, 3), float64] */;
  %173 = %171.0;
  (%172, %173)
}

def @func_3157() -> (Tensor[(9, 9, 4), float32],) {
  %174 = @func_670() /* ty=(Tensor[(9, 9, 4), float32], Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32]) */;
  %175 = %174.1;
  (%175,)
}

def @func_2814() -> Tensor[(5, ?, 3), int64] {
  %176 = @func_2512() /* ty=(Tensor[(5, ?, 3), float64], Tensor[(5, 1, 3), float64], Tensor[(5, ?, 3), int64]) */;
  %176.2
}

def @func_1582() -> (Tensor[(9, 9, 4), float32],) {
  %177 = @func_606() /* ty=(Tensor[(324, 1), uint16], Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float32]) */;
  %178 = %177.1;
  (%178,)
}

def @func_2826() -> Tensor[(4, 10, 16), float32] {
  %179 = @func_551() /* ty=(Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float32]) */;
  %179.1
}

def @func_2454() -> (Tensor[(324, 1), float32], Tensor[(9, 9, 4), float32]) {
  %180 = @func_2367() /* ty=Tensor[(324, 1), uint16] */;
  %181 = cast(%180, dtype="float32") /* ty=Tensor[(324, 1), float32] */;
  %182 = @func_1095() /* ty=(Tensor[(9, 9, 4), float32],) */;
  %183 = atan(%181) /* ty=Tensor[(324, 1), float32] */;
  %184 = %182.0;
  (%183, %184)
}

def @func_5728() -> (Tensor[(5, ?, 3), float64], Tensor[(10, 5, 16), int16], Tensor[(4, 200), float64]) {
  %185 = @func_2512() /* ty=(Tensor[(5, ?, 3), float64], Tensor[(5, 1, 3), float64], Tensor[(5, ?, 3), int64]) */;
  %186 = cast(meta[relay.Constant][7] /* ty=Tensor[(4, 200), float64] */, dtype="float64") /* ty=Tensor[(4, 200), float64] */;
  %187 = reshape(%186, newshape=[10, 5, 16]) /* ty=Tensor[(10, 5, 16), float64] */;
  %188 = %185.0;
  %189 = @func_4146(%187) /* ty=Tensor[(10, 5, 16), int16] */;
  (%188, %189, meta[relay.Constant][7] /* ty=Tensor[(4, 200), float64] */)
}

def @func_1728(%var_1675: Tensor[(396), float32]) -> (Tensor[(4, 10, 16), float32], Tensor[(11, 12, 3), float32], Tensor[(396), float32], Tensor[(324, 1), uint16], Tensor[(144), float64], Tensor[(144), float64]) {
  %190 = @func_606() /* ty=(Tensor[(324, 1), uint16], Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float32]) */;
  %191 = cast(%var_1675, dtype="float32") /* ty=Tensor[(396), float32] */;
  %192 = reshape(%191, newshape=[11, 12, 3]) /* ty=Tensor[(11, 12, 3), float32] */;
  %193 = @func_1240(%192) /* ty=(Tensor[(11, 12, 3), float32],) */;
  %194 = cast(meta[relay.Constant][8] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %195 = reshape(%194, newshape=[144]) /* ty=Tensor[(144), float64] */;
  %196 = @func_628(%195) /* ty=(Tensor[(9, 9, 4), uint16], Tensor[(9, 8, 2), float64], Tensor[(144), float64]) */;
  %197 = %190.2;
  %198 = %193.0;
  %199 = @func_1485() /* ty=Tensor[(324, 1), uint16] */;
  %200 = %196.2;
  (%197, %198, %var_1675, %199, %200, meta[relay.Constant][8] /* ty=Tensor[(144), float64] */)
}

def @func_5533() -> (Tensor[(324, 1), float32],) {
  %201 = @func_1207() /* ty=(Tensor[(324, 1), uint16], Tensor[(4, 10, 16), int8], Tensor[(640), float32], Tensor[(324, ?), bool], Tensor[(324, 1), float32]) */;
  %202 = %201.4;
  (%202,)
}

def @func_5668() -> Tensor[(324, 1), float32] {
  %203 = @func_5288() /* ty=(Tensor[(324, 1), float32], Tensor[(4, 10, 16), int32], Tensor[(4, 10, 16), float32], Tensor[(324, ?), bool]) */;
  %203.0
}

def @func_3482(%var_3474: Tensor[(5, 1, 3), int64]) -> Tensor[(5, ?, 3), int32] {
  %204 = @func_2814() /* ty=Tensor[(5, ?, 3), int64] */;
  %205 = cast(%var_3474, dtype="int32") /* ty=Tensor[(5, 1, 3), int32] */;
  %206 = shape_of(%204, dtype="int32") /* ty=Tensor[(3), int32] */;
  %207 = cast(%204, dtype="int32") /* ty=Tensor[(5, ?, 3), int32] */;
  %208 = dyn.reshape(%205, %206, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  add(%207, %208) /* ty=Tensor[(5, ?, 3), int32] */
}

def @func_5139(%var_5137: Tensor[(800), float64]) -> (Tensor[(324, 1), float32], Tensor[(9, 9, 4), float32], Tensor[(800), float64]) {
  %209 = @func_5057() /* ty=(Tensor[(324, 1), uint16],) */;
  %210 = %209.0;
  %211 = cast(%210, dtype="float32") /* ty=Tensor[(324, 1), float32] */;
  %212 = cast(%var_5137, dtype="float64") /* ty=Tensor[(800), float64] */;
  %213 = reshape(%212, newshape=[800]) /* ty=Tensor[(800), float64] */;
  %214 = @func_4503(%213) /* ty=(Tensor[(9, 9, 4), float32], Tensor[(9, 9, 4), float32], Tensor[(10, 5, 16), int16], Tensor[(77), float64], Tensor[(4, 10, 16), float32], Tensor[(800), float64]) */;
  %215 = erf(%211) /* ty=Tensor[(324, 1), float32] */;
  %216 = %214.1;
  (%215, %216, %var_5137)
}

def @func_2075(%var_2055: Tensor[(7, 11, 1), float64]) -> (Tensor[(7, 11, 1), float64], Tensor[(4, 10, 16), float32], Tensor[(6, 66), float32], Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float64]) {
  %217 = cast(%var_2055, dtype="float64") /* ty=Tensor[(7, 11, 1), float64] */;
  %218 = cast(meta[relay.Constant][9] /* ty=Tensor[(6, 66), float32] */, dtype="float32") /* ty=Tensor[(6, 66), float32] */;
  %219 = reshape(%218, newshape=[396]) /* ty=Tensor[(396), float32] */;
  %220 = @func_1728(%219) /* ty=(Tensor[(4, 10, 16), float32], Tensor[(11, 12, 3), float32], Tensor[(396), float32], Tensor[(324, 1), uint16], Tensor[(144), float64], Tensor[(144), float64]) */;
  %221 = @func_1434() /* ty=(Tensor[(4, 10, 16), float32], Tensor[(9, 9, 4), float32]) */;
  %222 = @func_769() /* ty=(Tensor[(4, 10, 16), int32], Tensor[(4, 10, 16), float64]) */;
  %223 = asinh(%217) /* ty=Tensor[(7, 11, 1), float64] */;
  %224 = %220.0;
  %225 = %221.0;
  %226 = %222.1;
  (%223, %224, meta[relay.Constant][9] /* ty=Tensor[(6, 66), float32] */, %225, %226)
}

def @func_3266() -> (Tensor[(4, 10, 16), float32],) {
  %227 = @func_1916() /* ty=(Tensor[(4, 10, 16), float64], Tensor[(324, 1), uint16]) */;
  %228 = %227.0;
  %229 = cast(%228, dtype="float32") /* ty=Tensor[(4, 10, 16), float32] */;
  %230 = exp(%229) /* ty=Tensor[(4, 10, 16), float32] */;
  (%230,)
}

def @func_2512() -> (Tensor[(5, ?, 3), float64], Tensor[(5, 1, 3), float64], Tensor[(5, ?, 3), int64]) {
  %231 = cast(meta[relay.Constant][10] /* ty=Tensor[(5, 1, 3), float32] */, dtype="float32") /* ty=Tensor[(5, 1, 3), float32] */;
  %232 = acosh(%231) /* ty=Tensor[(5, 1, 3), float32] */;
  %233 = cast(meta[relay.Constant][10] /* ty=Tensor[(5, 1, 3), float32] */, dtype="float64") /* ty=Tensor[(5, 1, 3), float64] */;
  %234 = shape_of(%232, dtype="int32") /* ty=Tensor[(3), int32] */;
  %235 = cast(%232, dtype="float64") /* ty=Tensor[(5, 1, 3), float64] */;
  %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %237 = cast(meta[relay.Constant][10] /* ty=Tensor[(5, 1, 3), float32] */, dtype="float64") /* ty=Tensor[(5, 1, 3), float64] */;
  %238 = cast(meta[relay.Constant][10] /* ty=Tensor[(5, 1, 3), float32] */, dtype="int64") /* ty=Tensor[(5, 1, 3), int64] */;
  %239 = shape_of(%232, dtype="int32") /* ty=Tensor[(3), int32] */;
  %240 = cast(%232, dtype="int64") /* ty=Tensor[(5, 1, 3), int64] */;
  %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %242 = floor_mod(%235, %236) /* ty=Tensor[(5, ?, 3), float64] */;
  %243 = cos(%237) /* ty=Tensor[(5, 1, 3), float64] */;
  %244 = bitwise_and(%240, %241) /* ty=Tensor[(5, ?, 3), int64] */;
  (%242, %243, %244)
}

def @func_1207() -> (Tensor[(324, 1), uint16], Tensor[(4, 10, 16), int8], Tensor[(640), float32], Tensor[(324, ?), bool], Tensor[(324, 1), float32]) {
  %245 = @func_445() /* ty=(Tensor[(4, 10, 16), float32], Tensor[(9, 9, 4), uint16], Tensor[(324, 1), uint16]) */;
  %246 = cast(meta[relay.Constant][11] /* ty=Tensor[(640), float32] */, dtype="float32") /* ty=Tensor[(640), float32] */;
  %247 = reshape(%246, newshape=[4, 10, 16]) /* ty=Tensor[(4, 10, 16), float32] */;
  %248 = @func_1012(%247) /* ty=(Tensor[(4, 10, 16), int8], Tensor[(9, 9, 4), float32], Tensor[(9, 9, 4), float32]) */;
  %249 = @func_445() /* ty=(Tensor[(4, 10, 16), float32], Tensor[(9, 9, 4), uint16], Tensor[(324, 1), uint16]) */;
  %250 = %249.2;
  %251 = cast(%250, dtype="float32") /* ty=Tensor[(324, 1), float32] */;
  %252 = tan(%251) /* ty=Tensor[(324, 1), float32] */;
  %253 = cast(%250, dtype="bool") /* ty=Tensor[(324, 1), bool] */;
  %254 = shape_of(%252, dtype="int32") /* ty=Tensor[(2), int32] */;
  %255 = cast(%252, dtype="bool") /* ty=Tensor[(324, 1), bool] */;
  %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %257 = cast(%252, dtype="float64") /* ty=Tensor[(324, 1), float64] */;
  %258 = asinh(%257) /* ty=Tensor[(324, 1), float64] */;
  %259 = cast(%258, dtype="float32") /* ty=Tensor[(324, 1), float32] */;
  %260 = %245.2;
  %261 = %248.0;
  %262 = logical_or(%255, %256) /* ty=Tensor[(324, ?), bool] */;
  %263 = atanh(%259) /* ty=Tensor[(324, 1), float32] */;
  (%260, %261, meta[relay.Constant][11] /* ty=Tensor[(640), float32] */, %262, %263)
}

def @func_2354(%var_2250: int64, %var_2251: Tensor[(7, 8, 1), int64], %var_2340: Tensor[(7, 8, 16), float64]) -> (Tensor[(324, 1), uint16], Tensor[(7, 8, ?), uint16], Tensor[(9, 9, 4), float32], Tensor[(7, 8, ?), float32], Tensor[(7, 8, 16), uint32]) {
  %264 = @func_1344() /* ty=(Tensor[(324, 1), uint16],) */;
  %265 = cast(%var_2250, dtype="int16") /* ty=int16 */;
  %266 = cast(%var_2251, dtype="int16") /* ty=Tensor[(7, 8, 1), int16] */;
  %267 = logical_xor(%265, %266) /* ty=Tensor[(7, 8, 1), int16] */;
  %268 = cast(%var_2251, dtype="int64") /* ty=Tensor[(7, 8, 1), int64] */;
  %269 = shape_of(%267, dtype="int32") /* ty=Tensor[(3), int32] */;
  %270 = cast(%267, dtype="int64") /* ty=Tensor[(7, 8, 1), int64] */;
  %271 = dyn.reshape(%268, %269, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %272 = maximum(%270, %271) /* ty=Tensor[(7, 8, ?), int64] */;
  %273 = cast(%272, dtype="float64") /* ty=Tensor[(7, 8, ?), float64] */;
  %274 = sin(%273) /* ty=Tensor[(7, 8, ?), float64] */;
  %275 = cast(%267, dtype="bool") /* ty=Tensor[(7, 8, 1), bool] */;
  %276 = shape_of(%274, dtype="int32") /* ty=Tensor[(3), int32] */;
  %277 = cast(%274, dtype="bool") /* ty=Tensor[(7, 8, ?), bool] */;
  %278 = dyn.reshape(%275, %276, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %279 = greater_equal(%277, %278) /* ty=Tensor[(7, 8, ?), bool] */;
  %280 = cast(%var_2250, dtype="int64") /* ty=int64 */;
  %281 = cast(%var_2251, dtype="int64") /* ty=Tensor[(7, 8, 1), int64] */;
  %282 = add(%280, %281) /* ty=Tensor[(7, 8, 1), int64] */;
  %283 = cast(%282, dtype="uint16") /* ty=Tensor[(7, 8, 1), uint16] */;
  %284 = shape_of(%279, dtype="int32") /* ty=Tensor[(3), int32] */;
  %285 = cast(%279, dtype="uint16") /* ty=Tensor[(7, 8, ?), uint16] */;
  %286 = dyn.reshape(%283, %284, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %287 = @func_1582() /* ty=(Tensor[(9, 9, 4), float32],) */;
  %288 = cast(%272, dtype="float32") /* ty=Tensor[(7, 8, ?), float32] */;
  %289 = cast(%274, dtype="uint32") /* ty=Tensor[(7, 8, ?), uint32] */;
  %290 = cast(%var_2340, dtype="uint32") /* ty=Tensor[(7, 8, 16), uint32] */;
  %291 = %264.0;
  %292 = left_shift(%285, %286) /* ty=Tensor[(7, 8, ?), uint16] */;
  %293 = %287.0;
  %294 = asinh(%288) /* ty=Tensor[(7, 8, ?), float32] */;
  %295 = add(%289, %290) /* ty=Tensor[(7, 8, 16), uint32] */;
  (%291, %292, %293, %294, %295)
}

def @func_893() -> (Tensor[(9, 9, 4), float32],) {
  %296 = @func_871() /* ty=(Tensor[(9, 9, 4), float32],) */;
  %297 = %296.0;
  (%297,)
}

def @func_5739() -> Tensor[(4, 10, 16), int32] {
  %298 = @func_769() /* ty=(Tensor[(4, 10, 16), int32], Tensor[(4, 10, 16), float64]) */;
  %298.0
}

def @func_5823() -> (Tensor[(4, 10, 16), float32], Tensor[(9, 9, 4), float32]) {
  %299 = @func_2826() /* ty=Tensor[(4, 10, 16), float32] */;
  %300 = @func_4988() /* ty=Tensor[(9, 9, 4), float32] */;
  (%299, %300)
}

def @func_5931() -> (Tensor[(324, 11), float32], Tensor[(9, 9, 4), float32]) {
  %301 = @func_3538() /* ty=(Tensor[(324, 1), uint16],) */;
  %302 = %301.0;
  %303 = cast(%302, dtype="float32") /* ty=Tensor[(324, 1), float32] */;
  %304 = cast(meta[relay.Constant][12] /* ty=Tensor[(324, 11), uint16] */, dtype="float32") /* ty=Tensor[(324, 11), float32] */;
  %305 = @func_4432() /* ty=(Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32], Tensor[(77), float64]) */;
  %306 = divide(%303, %304) /* ty=Tensor[(324, 11), float32] */;
  %307 = %305.0;
  (%306, %307)
}

def @func_4422(%var_4404: Tensor[(324, 9), uint16]) -> (Tensor[(324, 9), bool], Tensor[(324, 1), uint16]) {
  %308 = @func_1207() /* ty=(Tensor[(324, 1), uint16], Tensor[(4, 10, 16), int8], Tensor[(640), float32], Tensor[(324, ?), bool], Tensor[(324, 1), float32]) */;
  %309 = %308.0;
  %310 = cast(%309, dtype="bool") /* ty=Tensor[(324, 1), bool] */;
  %311 = cast(%var_4404, dtype="bool") /* ty=Tensor[(324, 9), bool] */;
  %312 = @func_1344() /* ty=(Tensor[(324, 1), uint16],) */;
  %313 = greater_equal(%310, %311) /* ty=Tensor[(324, 9), bool] */;
  %314 = %312.0;
  (%313, %314)
}

def @func_5076() -> (Tensor[(3, 14, 13), float64], Tensor[(324, 1), uint16]) {
  %315 = cast(meta[relay.Constant][13] /* ty=Tensor[(3, 14, 13), float64] */, dtype="float64") /* ty=Tensor[(3, 14, 13), float64] */;
  %316 = @func_5057() /* ty=(Tensor[(324, 1), uint16],) */;
  %317 = sigmoid(%315) /* ty=Tensor[(3, 14, 13), float64] */;
  %318 = %316.0;
  (%317, %318)
}

def @func_1916() -> (Tensor[(4, 10, 16), float64], Tensor[(324, 1), uint16]) {
  %319 = @func_1434() /* ty=(Tensor[(4, 10, 16), float32], Tensor[(9, 9, 4), float32]) */;
  %320 = %319.0;
  %321 = cast(%320, dtype="float64") /* ty=Tensor[(4, 10, 16), float64] */;
  %322 = @func_606() /* ty=(Tensor[(324, 1), uint16], Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float32]) */;
  %323 = acos(%321) /* ty=Tensor[(4, 10, 16), float64] */;
  %324 = %322.0;
  (%323, %324)
}

def @func_670() -> (Tensor[(9, 9, 4), float32], Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32]) {
  %325 = @func_606() /* ty=(Tensor[(324, 1), uint16], Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float32]) */;
  %326 = @func_606() /* ty=(Tensor[(324, 1), uint16], Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float32]) */;
  %327 = @func_606() /* ty=(Tensor[(324, 1), uint16], Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float32]) */;
  %328 = %325.1;
  %329 = %326.1;
  %330 = %327.2;
  (%328, %329, %330)
}

def @func_3352(%var_3330: Tensor[(16, 14, 14), uint64], %var_3331: Tensor[(16, 14, 14), uint64]) -> (Tensor[(16, 14, 14), uint64], Tensor[(4, 10, 16), float64], Tensor[(4, 10, 16), float32]) {
  %331 = cast(%var_3331, dtype="uint64") /* ty=Tensor[(16, 14, 14), uint64] */;
  %332 = shape_of(%var_3330, dtype="int32") /* ty=Tensor[(3), int32] */;
  %333 = cast(%var_3330, dtype="uint64") /* ty=Tensor[(16, 14, 14), uint64] */;
  %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %335 = @func_2675() /* ty=(Tensor[(4, 10, 16), float64], Tensor[(4, 10, 16), float32]) */;
  %336 = @func_3266() /* ty=(Tensor[(4, 10, 16), float32],) */;
  %337 = multiply(%333, %334) /* ty=Tensor[(16, 14, 14), uint64] */;
  %338 = %335.0;
  %339 = %336.0;
  (%337, %338, %339)
}

def @func_1095() -> (Tensor[(9, 9, 4), float32],) {
  %340 = @func_670() /* ty=(Tensor[(9, 9, 4), float32], Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32]) */;
  %341 = %340.1;
  (%341,)
}

def @func_4944(%var_4903: Tensor[(324, 12), float32], %var_4915: Tensor[(1452), int8]) -> (Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float64], Tensor[(9, 9, 4), float32], Tensor[(324, 12), float32], Tensor[(5, ?, 3), int64], Tensor[(11, 11, 12), float32], Tensor[(1452), int8], Tensor[(198, 2), float32], Tensor[(77), float32], Tensor[(324, 77), int8]) {
  %342 = @func_551() /* ty=(Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float32]) */;
  %343 = cast(meta[relay.Constant][14] /* ty=Tensor[(77), float64] */, dtype="float64") /* ty=Tensor[(77), float64] */;
  %344 = reshape(%343, newshape=[7, 11, 1]) /* ty=Tensor[(7, 11, 1), float64] */;
  %345 = @func_2075(%344) /* ty=(Tensor[(7, 11, 1), float64], Tensor[(4, 10, 16), float32], Tensor[(6, 66), float32], Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float64]) */;
  %346 = @func_3777() /* ty=(Tensor[(9, 9, 4), float32],) */;
  %347 = @func_2454() /* ty=(Tensor[(324, 1), float32], Tensor[(9, 9, 4), float32]) */;
  %348 = %347.0;
  %349 = cast(%348, dtype="float32") /* ty=Tensor[(324, 1), float32] */;
  %350 = cast(%var_4903, dtype="float32") /* ty=Tensor[(324, 12), float32] */;
  %351 = cast(%var_4915, dtype="int8") /* ty=Tensor[(1452), int8] */;
  %352 = cast(meta[relay.Constant][15] /* ty=Tensor[(198, 2), float32] */, dtype="float32") /* ty=Tensor[(198, 2), float32] */;
  %353 = cast(meta[relay.Constant][15] /* ty=Tensor[(198, 2), float32] */, dtype="float32") /* ty=Tensor[(198, 2), float32] */;
  %354 = reshape(%351, newshape=[11, 11, 12]) /* ty=Tensor[(11, 11, 12), int8] */;
  %355 = reshape(%352, newshape=[396]) /* ty=Tensor[(396), float32] */;
  %356 = reshape(%353, newshape=[396]) /* ty=Tensor[(396), float32] */;
  %357 = @func_2894(%354, %355, %356) /* ty=(Tensor[(324, 1), uint16], Tensor[(396), uint32], Tensor[(11, 11, 12), float32], Tensor[(9, 9, 4), float32], Tensor[(11, 11, 12), float64]) */;
  %358 = cast(meta[relay.Constant][14] /* ty=Tensor[(77), float64] */, dtype="float64") /* ty=Tensor[(77), float64] */;
  %359 = sigmoid(%358) /* ty=Tensor[(77), float64] */;
  %360 = cast(%359, dtype="float64") /* ty=Tensor[(77), float64] */;
  %361 = atan(%360) /* ty=Tensor[(77), float64] */;
  %362 = cast(%361, dtype="float32") /* ty=Tensor[(77), float32] */;
  %363 = @func_445() /* ty=(Tensor[(4, 10, 16), float32], Tensor[(9, 9, 4), uint16], Tensor[(324, 1), uint16]) */;
  %364 = %363.2;
  %365 = cast(%361, dtype="int8") /* ty=Tensor[(77), int8] */;
  %366 = cast(%364, dtype="int8") /* ty=Tensor[(324, 1), int8] */;
  %367 = %342.0;
  %368 = %345.4;
  %369 = %346.0;
  %370 = divide(%349, %350) /* ty=Tensor[(324, 12), float32] */;
  %371 = @func_2814() /* ty=Tensor[(5, ?, 3), int64] */;
  %372 = %357.2;
  %373 = acos(%362) /* ty=Tensor[(77), float32] */;
  %374 = multiply(%365, %366) /* ty=Tensor[(324, 77), int8] */;
  (%367, %368, %369, %370, %371, %372, %var_4915, meta[relay.Constant][15] /* ty=Tensor[(198, 2), float32] */, %373, %374)
}

def @func_3874() -> (Tensor[(9, 9, 4), float32],) {
  %375 = @func_1582() /* ty=(Tensor[(9, 9, 4), float32],) */;
  %376 = %375.0;
  (%376,)
}

def @func_628(%var_623: Tensor[(144), float64]) -> (Tensor[(9, 9, 4), uint16], Tensor[(9, 8, 2), float64], Tensor[(144), float64]) {
  %377 = @func_445() /* ty=(Tensor[(4, 10, 16), float32], Tensor[(9, 9, 4), uint16], Tensor[(324, 1), uint16]) */;
  %378 = cast(%var_623, dtype="float64") /* ty=Tensor[(144), float64] */;
  %379 = reshape(%378, newshape=[9, 8, 2]) /* ty=Tensor[(9, 8, 2), float64] */;
  %380 = @func_501(%379) /* ty=(Tensor[(9, 8, 2), float64], Tensor[(9, 9, 4), uint16], Tensor[(324, 1), uint16], Tensor[(9, 9, 4), uint16]) */;
  %381 = %377.1;
  %382 = %380.0;
  (%381, %382, %var_623)
}

def @func_4432() -> (Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32], Tensor[(77), float64]) {
  %383 = @func_3157() /* ty=(Tensor[(9, 9, 4), float32],) */;
  %384 = cast(meta[relay.Constant][16] /* ty=Tensor[(77), float64] */, dtype="float64") /* ty=Tensor[(77), float64] */;
  %385 = reshape(%384, newshape=[7, 11, 1]) /* ty=Tensor[(7, 11, 1), float64] */;
  %386 = @func_2075(%385) /* ty=(Tensor[(7, 11, 1), float64], Tensor[(4, 10, 16), float32], Tensor[(6, 66), float32], Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float64]) */;
  %387 = %383.0;
  %388 = %386.1;
  (%387, %388, meta[relay.Constant][16] /* ty=Tensor[(77), float64] */)
}

def @func_445() -> (Tensor[(4, 10, 16), float32], Tensor[(9, 9, 4), uint16], Tensor[(324, 1), uint16]) {
  %389 = @func_404() /* ty=(Tensor[(4, 10, 16), float32],) */;
  %390 = cast(meta[relay.Constant][17] /* ty=Tensor[(324, 1), uint16] */, dtype="uint16") /* ty=Tensor[(324, 1), uint16] */;
  %391 = cast(meta[relay.Constant][17] /* ty=Tensor[(324, 1), uint16] */, dtype="uint16") /* ty=Tensor[(324, 1), uint16] */;
  %392 = reshape(%390, newshape=[9, 9, 4]) /* ty=Tensor[(9, 9, 4), uint16] */;
  %393 = reshape(%391, newshape=[9, 9, 4]) /* ty=Tensor[(9, 9, 4), uint16] */;
  %394 = %389.0;
  %395 = @func_377(%392, %393) /* ty=Tensor[(9, 9, 4), uint16] */;
  (%394, %395, meta[relay.Constant][17] /* ty=Tensor[(324, 1), uint16] */)
}

def @func_5024(%var_5009: Tensor[(4, 10, 16), float32]) -> Tensor[(4, 10, 16), float64] {
  %396 = @func_3266() /* ty=(Tensor[(4, 10, 16), float32],) */;
  %397 = %396.0;
  %398 = cast(%var_5009, dtype="float64") /* ty=Tensor[(4, 10, 16), float64] */;
  %399 = shape_of(%397, dtype="int32") /* ty=Tensor[(3), int32] */;
  %400 = cast(%397, dtype="float64") /* ty=Tensor[(4, 10, 16), float64] */;
  %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%400, %401) /* ty=Tensor[(4, 10, 16), float64] */
}

def @func_5415() -> (Tensor[(4, 10, 16), float64], Tensor[(9, 9, 4), float64]) {
  %402 = @func_769() /* ty=(Tensor[(4, 10, 16), int32], Tensor[(4, 10, 16), float64]) */;
  %403 = @func_871() /* ty=(Tensor[(9, 9, 4), float32],) */;
  %404 = %403.0;
  %405 = cast(%404, dtype="float64") /* ty=Tensor[(9, 9, 4), float64] */;
  %406 = %402.1;
  %407 = log(%405) /* ty=Tensor[(9, 9, 4), float64] */;
  (%406, %407)
}

def @func_5360(%var_5350: Tensor[(324, 13), uint16]) -> (Tensor[(324, 13), float64],) {
  %408 = @func_1916() /* ty=(Tensor[(4, 10, 16), float64], Tensor[(324, 1), uint16]) */;
  %409 = %408.1;
  %410 = cast(%409, dtype="uint8") /* ty=Tensor[(324, 1), uint8] */;
  %411 = cast(%var_5350, dtype="uint8") /* ty=Tensor[(324, 13), uint8] */;
  %412 = bitwise_or(%410, %411) /* ty=Tensor[(324, 13), uint8] */;
  %413 = cast(%412, dtype="float64") /* ty=Tensor[(324, 13), float64] */;
  %414 = cosh(%413) /* ty=Tensor[(324, 13), float64] */;
  (%414,)
}

def @func_3818() -> Tensor[(4, 10, 16), int8] {
  %415 = @func_3515() /* ty=Tensor[(4, 10, 16), float32] */;
  %416 = cast(meta[relay.Constant][18] /* ty=Tensor[(4, 10, 16), float32] */, dtype="int8") /* ty=Tensor[(4, 10, 16), int8] */;
  %417 = shape_of(%415, dtype="int32") /* ty=Tensor[(3), int32] */;
  %418 = cast(%415, dtype="int8") /* ty=Tensor[(4, 10, 16), int8] */;
  %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  bitwise_or(%418, %419) /* ty=Tensor[(4, 10, 16), int8] */
}

def @func_5773(%var_5762: Tensor[(3, 15, 11), int32], %var_5763: Tensor[(3, 15, 11), int32]) -> (Tensor[(3, 15, 11), bool],) {
  %420 = cast(%var_5763, dtype="bool") /* ty=Tensor[(3, 15, 11), bool] */;
  %421 = shape_of(%var_5762, dtype="int32") /* ty=Tensor[(3), int32] */;
  %422 = cast(%var_5762, dtype="bool") /* ty=Tensor[(3, 15, 11), bool] */;
  %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %424 = greater(%422, %423) /* ty=Tensor[(3, 15, 11), bool] */;
  (%424,)
}

def @func_1434() -> (Tensor[(4, 10, 16), float32], Tensor[(9, 9, 4), float32]) {
  %425 = @func_606() /* ty=(Tensor[(324, 1), uint16], Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float32]) */;
  %426 = @func_871() /* ty=(Tensor[(9, 9, 4), float32],) */;
  %427 = %425.2;
  %428 = %426.0;
  (%427, %428)
}

def @func_4114() -> (Tensor[(9, 9, 4), float32], Tensor[(9, 9, 4), float32], Tensor[(5, 1, 3), float64]) {
  %429 = @func_871() /* ty=(Tensor[(9, 9, 4), float32],) */;
  %430 = %429.0;
  %431 = cast(%430, dtype="float32") /* ty=Tensor[(9, 9, 4), float32] */;
  %432 = reshape(%431, newshape=[9, 9, 4]) /* ty=Tensor[(9, 9, 4), float32] */;
  %433 = @func_3704(%432) /* ty=(Tensor[(9, 9, 4), float32],) */;
  %434 = @func_2512() /* ty=(Tensor[(5, ?, 3), float64], Tensor[(5, 1, 3), float64], Tensor[(5, ?, 3), int64]) */;
  %435 = %433.0;
  %436 = %434.1;
  (%430, %435, %436)
}

def @main(%var_6169: Tensor[(4, 9, 14), float32], %var_6215: Tensor[(4, 9, 14), float32]) -> (Tensor[(4, 9, 14), float64], Tensor[(324, 13), float64], Tensor[(9, 9, 4), int16], Tensor[(18, 18), float64], Tensor[(4, 10, 16), float32], Tensor[(5, 1, 3), float64], Tensor[(4, 9, 14), bool], Tensor[(324, 1), uint16], Tensor[(324, 1), float32], Tensor[(4212), float32], Tensor[(4, 9, 14), uint16]) {
  %437 = cast(%var_6169, dtype="float32") /* ty=Tensor[(4, 9, 14), float32] */;
  %438 = log2(%437) /* ty=Tensor[(4, 9, 14), float32] */;
  %439 = cast(meta[relay.Constant][19] /* ty=Tensor[(4, 9, 14), float32] */, dtype="float64") /* ty=Tensor[(4, 9, 14), float64] */;
  %440 = shape_of(%438, dtype="int32") /* ty=Tensor[(3), int32] */;
  %441 = cast(%438, dtype="float64") /* ty=Tensor[(4, 9, 14), float64] */;
  %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %443 = cast(meta[relay.Constant][20] /* ty=Tensor[(4212), uint16] */, dtype="uint16") /* ty=Tensor[(4212), uint16] */;
  %444 = reshape(%443, newshape=[324, 13]) /* ty=Tensor[(324, 13), uint16] */;
  %445 = @func_5360(%444) /* ty=(Tensor[(324, 13), float64],) */;
  %446 = cast(meta[relay.Constant][21] /* ty=Tensor[(18, 18), float32] */, dtype="float32") /* ty=Tensor[(18, 18), float32] */;
  %447 = reshape(%446, newshape=[9, 9, 4]) /* ty=Tensor[(9, 9, 4), float32] */;
  %448 = @func_4359(%447) /* ty=(Tensor[(4, 10, 16), float64], Tensor[(9, 9, 4), int16]) */;
  %449 = cast(meta[relay.Constant][21] /* ty=Tensor[(18, 18), float32] */, dtype="float64") /* ty=Tensor[(18, 18), float64] */;
  %450 = @func_670() /* ty=(Tensor[(9, 9, 4), float32], Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32]) */;
  %451 = @func_5790() /* ty=(Tensor[(5, 1, 3), float64], Tensor[(4, 10, 16), float32]) */;
  %452 = cast(%var_6215, dtype="bool") /* ty=Tensor[(4, 9, 14), bool] */;
  %453 = shape_of(%var_6169, dtype="int32") /* ty=Tensor[(3), int32] */;
  %454 = cast(%var_6169, dtype="bool") /* ty=Tensor[(4, 9, 14), bool] */;
  %455 = dyn.reshape(%452, %453, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %456 = @func_1614() /* ty=(Tensor[(324, 1), uint16],) */;
  %457 = cast(meta[relay.Constant][20] /* ty=Tensor[(4212), uint16] */, dtype="float32") /* ty=Tensor[(4212), float32] */;
  %458 = cast(meta[relay.Constant][22] /* ty=Tensor[(4, 9, 14), float32] */, dtype="uint16") /* ty=Tensor[(4, 9, 14), uint16] */;
  %459 = shape_of(%438, dtype="int32") /* ty=Tensor[(3), int32] */;
  %460 = cast(%438, dtype="uint16") /* ty=Tensor[(4, 9, 14), uint16] */;
  %461 = dyn.reshape(%458, %459, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %462 = mod(%441, %442) /* ty=Tensor[(4, 9, 14), float64] */;
  %463 = %445.0;
  %464 = %448.1;
  %465 = exp(%449) /* ty=Tensor[(18, 18), float64] */;
  %466 = %450.2;
  %467 = %451.0;
  %468 = equal(%454, %455) /* ty=Tensor[(4, 9, 14), bool] */;
  %469 = %456.0;
  %470 = @func_5668() /* ty=Tensor[(324, 1), float32] */;
  %471 = log2(%457) /* ty=Tensor[(4212), float32] */;
  %472 = multiply(%460, %461) /* ty=Tensor[(4, 9, 14), uint16] */;
  (%462, %463, %464, %465, %466, %467, %468, %469, %470, %471, %472)
}

def @func_3704(%var_3684: Tensor[(9, 9, 4), float32]) -> (Tensor[(9, 9, 4), float32],) {
  %473 = @func_1095() /* ty=(Tensor[(9, 9, 4), float32],) */;
  %474 = %473.0;
  %475 = cast(%var_3684, dtype="int16") /* ty=Tensor[(9, 9, 4), int16] */;
  %476 = shape_of(%474, dtype="int32") /* ty=Tensor[(3), int32] */;
  %477 = cast(%474, dtype="int16") /* ty=Tensor[(9, 9, 4), int16] */;
  %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %479 = logical_xor(%477, %478) /* ty=Tensor[(9, 9, 4), int16] */;
  %480 = cast(%479, dtype="float32") /* ty=Tensor[(9, 9, 4), float32] */;
  %481 = sinh(%480) /* ty=Tensor[(9, 9, 4), float32] */;
  (%481,)
}

def @func_377(%var_359: Tensor[(9, 9, 4), uint16], %var_360: Tensor[(9, 9, 4), uint16]) -> Tensor[(9, 9, 4), uint16] {
  %482 = cast(%var_360, dtype="uint16") /* ty=Tensor[(9, 9, 4), uint16] */;
  %483 = shape_of(%var_359, dtype="int32") /* ty=Tensor[(3), int32] */;
  %484 = cast(%var_359, dtype="uint16") /* ty=Tensor[(9, 9, 4), uint16] */;
  %485 = dyn.reshape(%482, %483, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_xor(%484, %485) /* ty=Tensor[(9, 9, 4), uint16] */
}

def @func_1809(%var_1795: Tensor[(10, 8, 13), float64]) -> (Tensor[(10, 8, 13), float64],) {
  %486 = cast(%var_1795, dtype="float64") /* ty=Tensor[(10, 8, 13), float64] */;
  %487 = rsqrt(%486) /* ty=Tensor[(10, 8, 13), float64] */;
  (%487,)
}

def @func_4988() -> Tensor[(9, 9, 4), float32] {
  %488 = @func_893() /* ty=(Tensor[(9, 9, 4), float32],) */;
  %488.0
}

def @func_1012(%var_948: Tensor[(4, 10, 16), float32]) -> (Tensor[(4, 10, 16), int8], Tensor[(9, 9, 4), float32], Tensor[(9, 9, 4), float32]) {
  %489 = @func_606() /* ty=(Tensor[(324, 1), uint16], Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float32]) */;
  %490 = %489.2;
  %491 = cast(%490, dtype="float64") /* ty=Tensor[(4, 10, 16), float64] */;
  %492 = cosh(%491) /* ty=Tensor[(4, 10, 16), float64] */;
  %493 = cast(%var_948, dtype="bool") /* ty=Tensor[(4, 10, 16), bool] */;
  %494 = shape_of(%490, dtype="int32") /* ty=Tensor[(3), int32] */;
  %495 = cast(%490, dtype="bool") /* ty=Tensor[(4, 10, 16), bool] */;
  %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %497 = less_equal(%495, %496) /* ty=Tensor[(4, 10, 16), bool] */;
  %498 = cast(%497, dtype="int8") /* ty=Tensor[(4, 10, 16), int8] */;
  %499 = shape_of(%492, dtype="int32") /* ty=Tensor[(3), int32] */;
  %500 = cast(%492, dtype="int8") /* ty=Tensor[(4, 10, 16), int8] */;
  %501 = dyn.reshape(%498, %499, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %502 = @func_871() /* ty=(Tensor[(9, 9, 4), float32],) */;
  %503 = @func_670() /* ty=(Tensor[(9, 9, 4), float32], Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32]) */;
  %504 = bitwise_xor(%500, %501) /* ty=Tensor[(4, 10, 16), int8] */;
  %505 = %502.0;
  %506 = %503.1;
  (%504, %505, %506)
}

def @func_5218(%var_5171: Tensor[(3360), bool], %var_5211: Tensor[(324, 11), float32]) -> (Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32], Tensor[(324, 3360), uint16], Tensor[(324, 11), bool]) {
  %507 = cast(%var_5171, dtype="bool") /* ty=Tensor[(3360), bool] */;
  %508 = cast(%var_5171, dtype="bool") /* ty=Tensor[(3360), bool] */;
  %509 = reshape(%507, newshape=[16, 14, 15]) /* ty=Tensor[(16, 14, 15), bool] */;
  %510 = reshape(%508, newshape=[16, 14, 15]) /* ty=Tensor[(16, 14, 15), bool] */;
  %511 = @func_4066(%509, %510) /* ty=(Tensor[(9, 9, 4), float32], Tensor[(16, 14, 15), float32], Tensor[(16, 14, 15), float32]) */;
  %512 = @func_1344() /* ty=(Tensor[(324, 1), uint16],) */;
  %513 = %512.0;
  %514 = cast(%513, dtype="float32") /* ty=Tensor[(324, 1), float32] */;
  %515 = log10(%514) /* ty=Tensor[(324, 1), float32] */;
  %516 = cast(%var_5171, dtype="int16") /* ty=Tensor[(3360), int16] */;
  %517 = cast(%515, dtype="int16") /* ty=Tensor[(324, 1), int16] */;
  %518 = subtract(%516, %517) /* ty=Tensor[(324, 3360), int16] */;
  %519 = cast(%518, dtype="uint16") /* ty=Tensor[(324, 3360), uint16] */;
  %520 = cast(%var_5171, dtype="uint16") /* ty=Tensor[(3360), uint16] */;
  %521 = cast(%515, dtype="bool") /* ty=Tensor[(324, 1), bool] */;
  %522 = cast(%var_5211, dtype="bool") /* ty=Tensor[(324, 11), bool] */;
  %523 = %511.0;
  %524 = @func_3515() /* ty=Tensor[(4, 10, 16), float32] */;
  %525 = bitwise_and(%519, %520) /* ty=Tensor[(324, 3360), uint16] */;
  %526 = less_equal(%521, %522) /* ty=Tensor[(324, 11), bool] */;
  (%523, %524, %525, %526)
}

def @func_2560() -> (Tensor[(4, 10, 16), float64], Tensor[(4, 10, 16), float32]) {
  %527 = @func_1637() /* ty=(Tensor[(4, 10, 16), float64],) */;
  %528 = @func_445() /* ty=(Tensor[(4, 10, 16), float32], Tensor[(9, 9, 4), uint16], Tensor[(324, 1), uint16]) */;
  %529 = %527.0;
  %530 = %528.0;
  (%529, %530)
}

def @func_2757(%var_2698: Tensor[(5, 2, 2), float32], %var_2731: Tensor[(324), float32]) -> (Tensor[(5, 2, 2), bool], Tensor[(4, 10, 16), float32], Tensor[(324), float32], Tensor[(4860), uint16], Tensor[(324), float32]) {
  %531 = cast(%var_2698, dtype="float32") /* ty=Tensor[(5, 2, 2), float32] */;
  %532 = cos(%531) /* ty=Tensor[(5, 2, 2), float32] */;
  %533 = cast(%532, dtype="bool") /* ty=Tensor[(5, 2, 2), bool] */;
  %534 = shape_of(%var_2698, dtype="int32") /* ty=Tensor[(3), int32] */;
  %535 = cast(%var_2698, dtype="bool") /* ty=Tensor[(5, 2, 2), bool] */;
  %536 = dyn.reshape(%533, %534, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %537 = @func_670() /* ty=(Tensor[(9, 9, 4), float32], Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32]) */;
  %538 = cast(meta[relay.Constant][23] /* ty=Tensor[(4860), uint16] */, dtype="uint16") /* ty=Tensor[(4860), uint16] */;
  %539 = cast(%var_2731, dtype="float32") /* ty=Tensor[(324), float32] */;
  %540 = reshape(%538, newshape=[4860]) /* ty=Tensor[(4860), uint16] */;
  %541 = reshape(%539, newshape=[324]) /* ty=Tensor[(324), float32] */;
  %542 = @func_2137(%540, %541) /* ty=(Tensor[(640), float32], Tensor[(324, 1), uint16], Tensor[(4860), uint16], Tensor[(324), float32]) */;
  %543 = equal(%535, %536) /* ty=Tensor[(5, 2, 2), bool] */;
  %544 = %537.2;
  %545 = %542.3;
  (%543, %544, %545, meta[relay.Constant][23] /* ty=Tensor[(4860), uint16] */, %var_2731)
}

def @func_5057() -> (Tensor[(324, 1), uint16],) {
  %546 = @func_445() /* ty=(Tensor[(4, 10, 16), float32], Tensor[(9, 9, 4), uint16], Tensor[(324, 1), uint16]) */;
  %547 = %546.2;
  (%547,)
}

def @func_4219(%var_4163: int64, %var_4164: Tensor[(56), int64], %var_4168: Tensor[(15), int64]) -> (Tensor[(324, 1), float32], Tensor[(7, 8, 16), uint32], Tensor[(56), int64], Tensor[(5, ?, 3), int32], Tensor[(15), int64], Tensor[(9, 9, 4), float64], Tensor[(4860), uint16], Tensor[(896), bool], Tensor[(324, 1), uint16]) {
  %548 = @func_1207() /* ty=(Tensor[(324, 1), uint16], Tensor[(4, 10, 16), int8], Tensor[(640), float32], Tensor[(324, ?), bool], Tensor[(324, 1), float32]) */;
  %549 = cast(%var_4163, dtype="int64") /* ty=int64 */;
  %550 = cast(%var_4164, dtype="int64") /* ty=Tensor[(56), int64] */;
  %551 = cast(meta[relay.Constant][24] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
  %552 = reshape(%549, newshape=[]) /* ty=int64 */;
  %553 = reshape(%550, newshape=[7, 8, 1]) /* ty=Tensor[(7, 8, 1), int64] */;
  %554 = reshape(%551, newshape=[7, 8, 16]) /* ty=Tensor[(7, 8, 16), float64] */;
  %555 = @func_2354(%552, %553, %554) /* ty=(Tensor[(324, 1), uint16], Tensor[(7, 8, ?), uint16], Tensor[(9, 9, 4), float32], Tensor[(7, 8, ?), float32], Tensor[(7, 8, 16), uint32]) */;
  %556 = cast(%var_4168, dtype="int64") /* ty=Tensor[(15), int64] */;
  %557 = reshape(%556, newshape=[5, 1, 3]) /* ty=Tensor[(5, 1, 3), int64] */;
  %558 = cast(meta[relay.Constant][25] /* ty=Tensor[(4860), uint16] */, dtype="uint16") /* ty=Tensor[(4860), uint16] */;
  %559 = %548.4;
  %560 = cast(%559, dtype="float32") /* ty=Tensor[(324, 1), float32] */;
  %561 = reshape(%558, newshape=[324, 15]) /* ty=Tensor[(324, 15), uint16] */;
  %562 = reshape(%560, newshape=[9, 9, 4]) /* ty=Tensor[(9, 9, 4), float32] */;
  %563 = @func_1317(%561, %562) /* ty=(Tensor[(324, 15), float64], Tensor[(640), float32], Tensor[(9, 9, 4), float32], Tensor[(9, 9, 4), float64], Tensor[(324, 1), uint16]) */;
  %564 = cast(meta[relay.Constant][24] /* ty=Tensor[(896), float64] */, dtype="bool") /* ty=Tensor[(896), bool] */;
  %565 = cast(%var_4163, dtype="bool") /* ty=bool */;
  %566 = %555.4;
  %567 = @func_3482(%557) /* ty=Tensor[(5, ?, 3), int32] */;
  %568 = %563.3;
  %569 = greater_equal(%564, %565) /* ty=Tensor[(896), bool] */;
  %570 = @func_2367() /* ty=Tensor[(324, 1), uint16] */;
  (%559, %566, %var_4164, %567, %var_4168, %568, meta[relay.Constant][25] /* ty=Tensor[(4860), uint16] */, %569, %570)
}

def @func_4359(%var_4343: Tensor[(9, 9, 4), float32]) -> (Tensor[(4, 10, 16), float64], Tensor[(9, 9, 4), int16]) {
  %571 = @func_1637() /* ty=(Tensor[(4, 10, 16), float64],) */;
  %572 = @func_3874() /* ty=(Tensor[(9, 9, 4), float32],) */;
  %573 = %572.0;
  %574 = cast(%var_4343, dtype="int16") /* ty=Tensor[(9, 9, 4), int16] */;
  %575 = shape_of(%573, dtype="int32") /* ty=Tensor[(3), int32] */;
  %576 = cast(%573, dtype="int16") /* ty=Tensor[(9, 9, 4), int16] */;
  %577 = dyn.reshape(%574, %575, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %578 = %571.0;
  %579 = bitwise_or(%576, %577) /* ty=Tensor[(9, 9, 4), int16] */;
  (%578, %579)
}

def @func_769() -> (Tensor[(4, 10, 16), int32], Tensor[(4, 10, 16), float64]) {
  %580 = @func_404() /* ty=(Tensor[(4, 10, 16), float32],) */;
  %581 = %580.0;
  %582 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 10, 16), float32] */, dtype="int32") /* ty=Tensor[(4, 10, 16), int32] */;
  %583 = shape_of(%581, dtype="int32") /* ty=Tensor[(3), int32] */;
  %584 = cast(%581, dtype="int32") /* ty=Tensor[(4, 10, 16), int32] */;
  %585 = dyn.reshape(%582, %583, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %586 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 10, 16), float32] */, dtype="float64") /* ty=Tensor[(4, 10, 16), float64] */;
  %587 = subtract(%584, %585) /* ty=Tensor[(4, 10, 16), int32] */;
  %588 = log(%586) /* ty=Tensor[(4, 10, 16), float64] */;
  (%587, %588)
}

def @func_2894(%var_2842: Tensor[(11, 11, 12), int8], %var_2848: Tensor[(396), float32], %var_2856: Tensor[(396), float32]) -> (Tensor[(324, 1), uint16], Tensor[(396), uint32], Tensor[(11, 11, 12), float32], Tensor[(9, 9, 4), float32], Tensor[(11, 11, 12), float64]) {
  %589 = cast(%var_2848, dtype="float32") /* ty=Tensor[(396), float32] */;
  %590 = reshape(%589, newshape=[396]) /* ty=Tensor[(396), float32] */;
  %591 = @func_1728(%590) /* ty=(Tensor[(4, 10, 16), float32], Tensor[(11, 12, 3), float32], Tensor[(396), float32], Tensor[(324, 1), uint16], Tensor[(144), float64], Tensor[(144), float64]) */;
  %592 = cast(%var_2856, dtype="uint32") /* ty=Tensor[(396), uint32] */;
  %593 = shape_of(%var_2848, dtype="int32") /* ty=Tensor[(1), int32] */;
  %594 = cast(%var_2848, dtype="uint32") /* ty=Tensor[(396), uint32] */;
  %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %596 = cast(%var_2842, dtype="bool") /* ty=Tensor[(11, 11, 12), bool] */;
  %597 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(11, 11, 12), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %598 = cast(meta[relay.Constant][27] /* ty=Tensor[(11, 11, 12), int8] */, dtype="bool") /* ty=Tensor[(11, 11, 12), bool] */;
  %599 = dyn.reshape(%596, %597, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %600 = not_equal(%598, %599) /* ty=Tensor[(11, 11, 12), bool] */;
  %601 = cast(%600, dtype="float32") /* ty=Tensor[(11, 11, 12), float32] */;
  %602 = shape_of(%var_2842, dtype="int32") /* ty=Tensor[(3), int32] */;
  %603 = cast(%var_2842, dtype="float32") /* ty=Tensor[(11, 11, 12), float32] */;
  %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %605 = @func_1434() /* ty=(Tensor[(4, 10, 16), float32], Tensor[(9, 9, 4), float32]) */;
  %606 = cast(meta[relay.Constant][27] /* ty=Tensor[(11, 11, 12), int8] */, dtype="float64") /* ty=Tensor[(11, 11, 12), float64] */;
  %607 = %591.3;
  %608 = bitwise_and(%594, %595) /* ty=Tensor[(396), uint32] */;
  %609 = mod(%603, %604) /* ty=Tensor[(11, 11, 12), float32] */;
  %610 = %605.1;
  %611 = acosh(%606) /* ty=Tensor[(11, 11, 12), float64] */;
  (%607, %608, %609, %610, %611)
}

def @func_4827() -> Tensor[(4, 10, 16), float32] {
  %612 = @func_3266() /* ty=(Tensor[(4, 10, 16), float32],) */;
  %612.0
}

def @func_4146(%var_4128: Tensor[(10, 5, 16), float64]) -> Tensor[(10, 5, 16), int16] {
  %613 = cast(%var_4128, dtype="float64") /* ty=Tensor[(10, 5, 16), float64] */;
  %614 = log(%613) /* ty=Tensor[(10, 5, 16), float64] */;
  %615 = cast(%var_4128, dtype="bool") /* ty=Tensor[(10, 5, 16), bool] */;
  %616 = shape_of(%614, dtype="int32") /* ty=Tensor[(3), int32] */;
  %617 = cast(%614, dtype="bool") /* ty=Tensor[(10, 5, 16), bool] */;
  %618 = dyn.reshape(%615, %616, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %619 = equal(%617, %618) /* ty=Tensor[(10, 5, 16), bool] */;
  %620 = cast(%614, dtype="int16") /* ty=Tensor[(10, 5, 16), int16] */;
  %621 = shape_of(%619, dtype="int32") /* ty=Tensor[(3), int32] */;
  %622 = cast(%619, dtype="int16") /* ty=Tensor[(10, 5, 16), int16] */;
  %623 = dyn.reshape(%620, %621, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  left_shift(%622, %623) /* ty=Tensor[(10, 5, 16), int16] */
}

def @func_5429() -> (Tensor[(9, 9, 4), float32],) {
  %624 = @func_1095() /* ty=(Tensor[(9, 9, 4), float32],) */;
  %625 = %624.0;
  (%625,)
}

def @func_871() -> (Tensor[(9, 9, 4), float32],) {
  %626 = @func_606() /* ty=(Tensor[(324, 1), uint16], Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float32]) */;
  %627 = %626.1;
  (%627,)
}

def @func_3777() -> (Tensor[(9, 9, 4), float32],) {
  %628 = @func_871() /* ty=(Tensor[(9, 9, 4), float32],) */;
  %629 = %628.0;
  (%629,)
}

def @func_1240(%var_1218: Tensor[(11, 12, 3), float32]) -> (Tensor[(11, 12, 3), float32],) {
  %630 = cast(%var_1218, dtype="float32") /* ty=Tensor[(11, 12, 3), float32] */;
  %631 = asin(%630) /* ty=Tensor[(11, 12, 3), float32] */;
  (%631,)
}

def @func_6079() -> Tensor[(4, 10, 16), float32] {
  %632 = @func_606() /* ty=(Tensor[(324, 1), uint16], Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float32]) */;
  %632.2
}

def @func_4503(%var_4483: Tensor[(800), float64]) -> (Tensor[(9, 9, 4), float32], Tensor[(9, 9, 4), float32], Tensor[(10, 5, 16), int16], Tensor[(77), float64], Tensor[(4, 10, 16), float32], Tensor[(800), float64]) {
  %633 = @func_893() /* ty=(Tensor[(9, 9, 4), float32],) */;
  %634 = @func_893() /* ty=(Tensor[(9, 9, 4), float32],) */;
  %635 = cast(%var_4483, dtype="float64") /* ty=Tensor[(800), float64] */;
  %636 = reshape(%635, newshape=[10, 5, 16]) /* ty=Tensor[(10, 5, 16), float64] */;
  %637 = @func_4432() /* ty=(Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32], Tensor[(77), float64]) */;
  %638 = @func_2675() /* ty=(Tensor[(4, 10, 16), float64], Tensor[(4, 10, 16), float32]) */;
  %639 = cast(%var_4483, dtype="float64") /* ty=Tensor[(800), float64] */;
  %640 = %633.0;
  %641 = %634.0;
  %642 = @func_4146(%636) /* ty=Tensor[(10, 5, 16), int16] */;
  %643 = %637.2;
  %644 = %638.1;
  %645 = log2(%639) /* ty=Tensor[(800), float64] */;
  (%640, %641, %642, %643, %644, %645)
}

def @func_3382() -> (Tensor[(640), float32], Tensor[(640), float32]) {
  %646 = @func_1207() /* ty=(Tensor[(324, 1), uint16], Tensor[(4, 10, 16), int8], Tensor[(640), float32], Tensor[(324, ?), bool], Tensor[(324, 1), float32]) */;
  %647 = @func_1207() /* ty=(Tensor[(324, 1), uint16], Tensor[(4, 10, 16), int8], Tensor[(640), float32], Tensor[(324, ?), bool], Tensor[(324, 1), float32]) */;
  %648 = %646.2;
  %649 = %647.2;
  (%648, %649)
}

def @func_4066(%var_4024: Tensor[(16, 14, 15), bool], %var_4051: Tensor[(16, 14, 15), bool]) -> (Tensor[(9, 9, 4), float32], Tensor[(16, 14, 15), float32], Tensor[(16, 14, 15), float32]) {
  %650 = @func_893() /* ty=(Tensor[(9, 9, 4), float32],) */;
  %651 = cast(%var_4024, dtype="bool") /* ty=Tensor[(16, 14, 15), bool] */;
  %652 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(16, 14, 15), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %653 = cast(meta[relay.Constant][28] /* ty=Tensor[(16, 14, 15), bool] */, dtype="bool") /* ty=Tensor[(16, 14, 15), bool] */;
  %654 = dyn.reshape(%651, %652, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %655 = logical_and(%653, %654) /* ty=Tensor[(16, 14, 15), bool] */;
  %656 = cast(%var_4051, dtype="float32") /* ty=Tensor[(16, 14, 15), float32] */;
  %657 = shape_of(%655, dtype="int32") /* ty=Tensor[(3), int32] */;
  %658 = cast(%655, dtype="float32") /* ty=Tensor[(16, 14, 15), float32] */;
  %659 = dyn.reshape(%656, %657, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %660 = cast(%655, dtype="float32") /* ty=Tensor[(16, 14, 15), float32] */;
  %661 = %650.0;
  %662 = floor_mod(%658, %659) /* ty=Tensor[(16, 14, 15), float32] */;
  %663 = exp(%660) /* ty=Tensor[(16, 14, 15), float32] */;
  (%661, %662, %663)
}

def @func_6057() -> Tensor[(4, 10, 16), int8] {
  @func_3818() /* ty=Tensor[(4, 10, 16), int8] */
}

def @func_3048(%var_3002: Tensor[(10, 7, 11), float32], %var_3003: Tensor[(10, 7, 11), float32], %var_3020: Tensor[(10, 7, 11), float32]) -> (Tensor[(10, 7, 11), float32], Tensor[(10, 7, 11), bool], Tensor[(10, 7, 11), uint32], Tensor[(4, 10, 16), float32], Tensor[(5, ?, 3), int64]) {
  %664 = cast(%var_3003, dtype="float32") /* ty=Tensor[(10, 7, 11), float32] */;
  %665 = shape_of(%var_3002, dtype="int32") /* ty=Tensor[(3), int32] */;
  %666 = cast(%var_3002, dtype="float32") /* ty=Tensor[(10, 7, 11), float32] */;
  %667 = dyn.reshape(%664, %665, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %668 = cast(%var_3002, dtype="bool") /* ty=Tensor[(10, 7, 11), bool] */;
  %669 = shape_of(%var_3003, dtype="int32") /* ty=Tensor[(3), int32] */;
  %670 = cast(%var_3003, dtype="bool") /* ty=Tensor[(10, 7, 11), bool] */;
  %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %672 = cast(%var_3020, dtype="uint32") /* ty=Tensor[(10, 7, 11), uint32] */;
  %673 = shape_of(%var_3002, dtype="int32") /* ty=Tensor[(3), int32] */;
  %674 = cast(%var_3002, dtype="uint32") /* ty=Tensor[(10, 7, 11), uint32] */;
  %675 = dyn.reshape(%672, %673, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %676 = @func_2560() /* ty=(Tensor[(4, 10, 16), float64], Tensor[(4, 10, 16), float32]) */;
  %677 = mod(%666, %667) /* ty=Tensor[(10, 7, 11), float32] */;
  %678 = greater_equal(%670, %671) /* ty=Tensor[(10, 7, 11), bool] */;
  %679 = bitwise_or(%674, %675) /* ty=Tensor[(10, 7, 11), uint32] */;
  %680 = %676.1;
  %681 = @func_2814() /* ty=Tensor[(5, ?, 3), int64] */;
  (%677, %678, %679, %680, %681)
}

def @func_1485() -> Tensor[(324, 1), uint16] {
  %682 = @func_1344() /* ty=(Tensor[(324, 1), uint16],) */;
  %682.0
}

def @func_5288() -> (Tensor[(324, 1), float32], Tensor[(4, 10, 16), int32], Tensor[(4, 10, 16), float32], Tensor[(324, ?), bool]) {
  %683 = @func_4732() /* ty=(Tensor[(324, 1), uint16],) */;
  %684 = %683.0;
  %685 = cast(%684, dtype="float64") /* ty=Tensor[(324, 1), float64] */;
  %686 = sigmoid(%685) /* ty=Tensor[(324, 1), float64] */;
  %687 = cast(%686, dtype="float32") /* ty=Tensor[(324, 1), float32] */;
  %688 = acosh(%687) /* ty=Tensor[(324, 1), float32] */;
  %689 = cast(%688, dtype="float32") /* ty=Tensor[(324, 1), float32] */;
  %690 = @func_769() /* ty=(Tensor[(4, 10, 16), int32], Tensor[(4, 10, 16), float64]) */;
  %691 = @func_2675() /* ty=(Tensor[(4, 10, 16), float64], Tensor[(4, 10, 16), float32]) */;
  %692 = cast(%684, dtype="float64") /* ty=Tensor[(324, 1), float64] */;
  %693 = shape_of(%688, dtype="int32") /* ty=Tensor[(2), int32] */;
  %694 = cast(%688, dtype="float64") /* ty=Tensor[(324, 1), float64] */;
  %695 = dyn.reshape(%692, %693, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %696 = mod(%694, %695) /* ty=Tensor[(324, ?), float64] */;
  %697 = cast(%684, dtype="bool") /* ty=Tensor[(324, 1), bool] */;
  %698 = shape_of(%696, dtype="int32") /* ty=Tensor[(2), int32] */;
  %699 = cast(%696, dtype="bool") /* ty=Tensor[(324, ?), bool] */;
  %700 = dyn.reshape(%697, %698, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %701 = sqrt(%689) /* ty=Tensor[(324, 1), float32] */;
  %702 = %690.0;
  %703 = %691.1;
  %704 = less(%699, %700) /* ty=Tensor[(324, ?), bool] */;
  (%701, %702, %703, %704)
}

def @func_5390(%var_5380: Tensor[(1, 2, 14), int32], %var_5381: Tensor[(9, 2, 14), int32]) -> Tensor[(9, 2, 14), bool] {
  %705 = cast(%var_5380, dtype="bool") /* ty=Tensor[(1, 2, 14), bool] */;
  %706 = cast(%var_5381, dtype="bool") /* ty=Tensor[(9, 2, 14), bool] */;
  equal(%705, %706) /* ty=Tensor[(9, 2, 14), bool] */
}

def @func_4687(%var_4649: Tensor[(4, 10, 16), float32]) -> (Tensor[(4, 10, 16), int16], Tensor[(4, 10, 16), float32]) {
  %707 = @func_551() /* ty=(Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float32]) */;
  %708 = %707.1;
  %709 = cast(%var_4649, dtype="int16") /* ty=Tensor[(4, 10, 16), int16] */;
  %710 = shape_of(%708, dtype="int32") /* ty=Tensor[(3), int32] */;
  %711 = cast(%708, dtype="int16") /* ty=Tensor[(4, 10, 16), int16] */;
  %712 = dyn.reshape(%709, %710, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %713 = cast(%708, dtype="float32") /* ty=Tensor[(4, 10, 16), float32] */;
  %714 = maximum(%711, %712) /* ty=Tensor[(4, 10, 16), int16] */;
  %715 = erf(%713) /* ty=Tensor[(4, 10, 16), float32] */;
  (%714, %715)
}

def @func_5328() -> Tensor[(324, 1), uint16] {
  %716 = @func_3538() /* ty=(Tensor[(324, 1), uint16],) */;
  %716.0
}

def @func_1637() -> (Tensor[(4, 10, 16), float64],) {
  %717 = @func_769() /* ty=(Tensor[(4, 10, 16), int32], Tensor[(4, 10, 16), float64]) */;
  %718 = %717.1;
  (%718,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2358(%var_2355: int64, %var_2356: Tensor[(7, 8, 1), int64], %var_2357: Tensor[(7, 8, 16), float64]) -> (Tensor[(324, 1), uint16], Tensor[(7, 8, ?), uint16], Tensor[(9, 9, 4), float32], Tensor[(7, 8, ?), float32], Tensor[(7, 8, 16), uint32]) {
  %32 = fn (%var_2250: int64, %var_2251: Tensor[(7, 8, 1), int64], %var_2340: Tensor[(7, 8, 16), float64]) -> (Tensor[(324, 1), uint16], Tensor[(7, 8, ?), uint16], Tensor[(9, 9, 4), float32], Tensor[(7, 8, ?), float32], Tensor[(7, 8, 16), uint32]) {
    %0 = @func_1344() /* ty=(Tensor[(324, 1), uint16],) */;
    %1 = cast(%var_2250, dtype="int16") /* ty=int16 */;
    %2 = cast(%var_2251, dtype="int16") /* ty=Tensor[(7, 8, 1), int16] */;
    %3 = logical_xor(%1, %2) /* ty=Tensor[(7, 8, 1), int16] */;
    %4 = cast(%var_2251, dtype="int64") /* ty=Tensor[(7, 8, 1), int64] */;
    %5 = shape_of(%3, dtype="int32") /* ty=Tensor[(3), int32] */;
    %6 = cast(%3, dtype="int64") /* ty=Tensor[(7, 8, 1), int64] */;
    %7 = dyn.reshape(%4, %5, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %8 = maximum(%6, %7) /* ty=Tensor[(7, 8, ?), int64] */;
    %9 = cast(%8, dtype="float64") /* ty=Tensor[(7, 8, ?), float64] */;
    %10 = sin(%9) /* ty=Tensor[(7, 8, ?), float64] */;
    %11 = cast(%3, dtype="bool") /* ty=Tensor[(7, 8, 1), bool] */;
    %12 = shape_of(%10, dtype="int32") /* ty=Tensor[(3), int32] */;
    %13 = cast(%10, dtype="bool") /* ty=Tensor[(7, 8, ?), bool] */;
    %14 = dyn.reshape(%11, %12, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %15 = greater_equal(%13, %14) /* ty=Tensor[(7, 8, ?), bool] */;
    %16 = cast(%var_2250, dtype="int64") /* ty=int64 */;
    %17 = cast(%var_2251, dtype="int64") /* ty=Tensor[(7, 8, 1), int64] */;
    %18 = add(%16, %17) /* ty=Tensor[(7, 8, 1), int64] */;
    %19 = cast(%18, dtype="uint16") /* ty=Tensor[(7, 8, 1), uint16] */;
    %20 = shape_of(%15, dtype="int32") /* ty=Tensor[(3), int32] */;
    %21 = cast(%15, dtype="uint16") /* ty=Tensor[(7, 8, ?), uint16] */;
    %22 = dyn.reshape(%19, %20, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %23 = @func_1582() /* ty=(Tensor[(9, 9, 4), float32],) */;
    %24 = cast(%8, dtype="float32") /* ty=Tensor[(7, 8, ?), float32] */;
    %25 = cast(%10, dtype="uint32") /* ty=Tensor[(7, 8, ?), uint32] */;
    %26 = cast(%var_2340, dtype="uint32") /* ty=Tensor[(7, 8, 16), uint32] */;
    %27 = %0.0;
    %28 = left_shift(%21, %22) /* ty=Tensor[(7, 8, ?), uint16] */;
    %29 = %23.0;
    %30 = asinh(%24) /* ty=Tensor[(7, 8, ?), float32] */;
    %31 = add(%25, %26) /* ty=Tensor[(7, 8, 16), uint32] */;
    (%27, %28, %29, %30, %31)
  };
  %32(%var_2355, %var_2356, %var_2357) /* ty=(Tensor[(324, 1), uint16], Tensor[(7, 8, ?), uint16], Tensor[(9, 9, 4), float32], Tensor[(7, 8, ?), float32], Tensor[(7, 8, 16), uint32]) */
}

def @func_4359(%var_4343: Tensor[(9, 9, 4), float32]) -> (Tensor[(4, 10, 16), float64], Tensor[(9, 9, 4), int16]) {
  %33 = @func_1637() /* ty=(Tensor[(4, 10, 16), float64],) */;
  %34 = @func_3874() /* ty=(Tensor[(9, 9, 4), float32],) */;
  %35 = %34.0;
  %36 = cast(%var_4343, dtype="int16") /* ty=Tensor[(9, 9, 4), int16] */;
  %37 = shape_of(%35, dtype="int32") /* ty=Tensor[(3), int32] */;
  %38 = cast(%35, dtype="int16") /* ty=Tensor[(9, 9, 4), int16] */;
  %39 = dyn.reshape(%36, %37, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %40 = %33.0;
  %41 = bitwise_or(%38, %39) /* ty=Tensor[(9, 9, 4), int16] */;
  (%40, %41)
}

def @func_2826() -> Tensor[(4, 10, 16), float32] {
  %42 = @func_551() /* ty=(Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float32]) */;
  %42.1
}

def @func_3819() -> Tensor[(4, 10, 16), int8] {
  %48 = fn () -> Tensor[(4, 10, 16), int8] {
    %43 = @func_3515() /* ty=Tensor[(4, 10, 16), float32] */;
    %44 = cast(meta[relay.Constant][0] /* ty=Tensor[(4, 10, 16), float32] */, dtype="int8") /* ty=Tensor[(4, 10, 16), int8] */;
    %45 = shape_of(%43, dtype="int32") /* ty=Tensor[(3), int32] */;
    %46 = cast(%43, dtype="int8") /* ty=Tensor[(4, 10, 16), int8] */;
    %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    bitwise_or(%46, %47) /* ty=Tensor[(4, 10, 16), int8] */
  };
  %48() /* ty=Tensor[(4, 10, 16), int8] */
}

def @func_3875() -> (Tensor[(9, 9, 4), float32],) {
  %51 = fn () -> (Tensor[(9, 9, 4), float32],) {
    %49 = @func_1582() /* ty=(Tensor[(9, 9, 4), float32],) */;
    %50 = %49.0;
    (%50,)
  };
  %51() /* ty=(Tensor[(9, 9, 4), float32],) */
}

def @func_5670() -> Tensor[(324, 1), float32] {
  @func_5668() /* ty=Tensor[(324, 1), float32] */
}

def @func_3540() -> (Tensor[(324, 1), uint16],) {
  @func_3538() /* ty=(Tensor[(324, 1), uint16],) */
}

def @func_4505(%var_4504: Tensor[(800), float64]) -> (Tensor[(9, 9, 4), float32], Tensor[(9, 9, 4), float32], Tensor[(10, 5, 16), int16], Tensor[(77), float64], Tensor[(4, 10, 16), float32], Tensor[(800), float64]) {
  %65 = fn (%var_4483: Tensor[(800), float64]) -> (Tensor[(9, 9, 4), float32], Tensor[(9, 9, 4), float32], Tensor[(10, 5, 16), int16], Tensor[(77), float64], Tensor[(4, 10, 16), float32], Tensor[(800), float64]) {
    %52 = @func_893() /* ty=(Tensor[(9, 9, 4), float32],) */;
    %53 = @func_893() /* ty=(Tensor[(9, 9, 4), float32],) */;
    %54 = cast(%var_4483, dtype="float64") /* ty=Tensor[(800), float64] */;
    %55 = reshape(%54, newshape=[10, 5, 16]) /* ty=Tensor[(10, 5, 16), float64] */;
    %56 = @func_4432() /* ty=(Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32], Tensor[(77), float64]) */;
    %57 = @func_2675() /* ty=(Tensor[(4, 10, 16), float64], Tensor[(4, 10, 16), float32]) */;
    %58 = cast(%var_4483, dtype="float64") /* ty=Tensor[(800), float64] */;
    %59 = %52.0;
    %60 = %53.0;
    %61 = @func_4146(%55) /* ty=Tensor[(10, 5, 16), int16] */;
    %62 = %56.2;
    %63 = %57.1;
    %64 = log2(%58) /* ty=Tensor[(800), float64] */;
    (%59, %60, %61, %62, %63, %64)
  };
  %65(%var_4504) /* ty=(Tensor[(9, 9, 4), float32], Tensor[(9, 9, 4), float32], Tensor[(10, 5, 16), int16], Tensor[(77), float64], Tensor[(4, 10, 16), float32], Tensor[(800), float64]) */
}

def @func_1485() -> Tensor[(324, 1), uint16] {
  %66 = @func_1344() /* ty=(Tensor[(324, 1), uint16],) */;
  %66.0
}

def @func_4733() -> (Tensor[(324, 1), uint16],) {
  %69 = fn () -> (Tensor[(324, 1), uint16],) {
    %67 = @func_1916() /* ty=(Tensor[(4, 10, 16), float64], Tensor[(324, 1), uint16]) */;
    %68 = %67.1;
    (%68,)
  };
  %69() /* ty=(Tensor[(324, 1), uint16],) */
}

def @func_2075(%var_2055: Tensor[(7, 11, 1), float64]) -> (Tensor[(7, 11, 1), float64], Tensor[(4, 10, 16), float32], Tensor[(6, 66), float32], Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float64]) {
  %70 = cast(%var_2055, dtype="float64") /* ty=Tensor[(7, 11, 1), float64] */;
  %71 = cast(meta[relay.Constant][1] /* ty=Tensor[(6, 66), float32] */, dtype="float32") /* ty=Tensor[(6, 66), float32] */;
  %72 = reshape(%71, newshape=[396]) /* ty=Tensor[(396), float32] */;
  %73 = @func_1728(%72) /* ty=(Tensor[(4, 10, 16), float32], Tensor[(11, 12, 3), float32], Tensor[(396), float32], Tensor[(324, 1), uint16], Tensor[(144), float64], Tensor[(144), float64]) */;
  %74 = @func_1434() /* ty=(Tensor[(4, 10, 16), float32], Tensor[(9, 9, 4), float32]) */;
  %75 = @func_769() /* ty=(Tensor[(4, 10, 16), int32], Tensor[(4, 10, 16), float64]) */;
  %76 = asinh(%70) /* ty=Tensor[(7, 11, 1), float64] */;
  %77 = %73.0;
  %78 = %74.0;
  %79 = %75.1;
  (%76, %77, meta[relay.Constant][1] /* ty=Tensor[(6, 66), float32] */, %78, %79)
}

def @func_1015(%var_1013: Tensor[(4, 10, 16), float32]) -> (Tensor[(4, 10, 16), int8], Tensor[(9, 9, 4), float32], Tensor[(9, 9, 4), float32]) {
  @func_1012(%var_1013) /* ty=(Tensor[(4, 10, 16), int8], Tensor[(9, 9, 4), float32], Tensor[(9, 9, 4), float32]) */
}

def @func_5141(%var_5140: Tensor[(800), float64]) -> (Tensor[(324, 1), float32], Tensor[(9, 9, 4), float32], Tensor[(800), float64]) {
  %88 = fn (%var_5137: Tensor[(800), float64]) -> (Tensor[(324, 1), float32], Tensor[(9, 9, 4), float32], Tensor[(800), float64]) {
    %80 = @func_5057() /* ty=(Tensor[(324, 1), uint16],) */;
    %81 = %80.0;
    %82 = cast(%81, dtype="float32") /* ty=Tensor[(324, 1), float32] */;
    %83 = cast(%var_5137, dtype="float64") /* ty=Tensor[(800), float64] */;
    %84 = reshape(%83, newshape=[800]) /* ty=Tensor[(800), float64] */;
    %85 = @func_4503(%84) /* ty=(Tensor[(9, 9, 4), float32], Tensor[(9, 9, 4), float32], Tensor[(10, 5, 16), int16], Tensor[(77), float64], Tensor[(4, 10, 16), float32], Tensor[(800), float64]) */;
    %86 = erf(%82) /* ty=Tensor[(324, 1), float32] */;
    %87 = %85.1;
    (%86, %87, %var_5137)
  };
  %88(%var_5140) /* ty=(Tensor[(324, 1), float32], Tensor[(9, 9, 4), float32], Tensor[(800), float64]) */
}

def @func_1435() -> (Tensor[(4, 10, 16), float32], Tensor[(9, 9, 4), float32]) {
  %93 = fn () -> (Tensor[(4, 10, 16), float32], Tensor[(9, 9, 4), float32]) {
    %89 = @func_606() /* ty=(Tensor[(324, 1), uint16], Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float32]) */;
    %90 = @func_871() /* ty=(Tensor[(9, 9, 4), float32],) */;
    %91 = %89.2;
    %92 = %90.0;
    (%91, %92)
  };
  %93() /* ty=(Tensor[(4, 10, 16), float32], Tensor[(9, 9, 4), float32]) */
}

def @func_5328() -> Tensor[(324, 1), uint16] {
  %94 = @func_3538() /* ty=(Tensor[(324, 1), uint16],) */;
  %94.0
}

def @func_4362(%var_4360: Tensor[(9, 9, 4), float32]) -> (Tensor[(4, 10, 16), float64], Tensor[(9, 9, 4), int16]) {
  @func_4359(%var_4360) /* ty=(Tensor[(4, 10, 16), float64], Tensor[(9, 9, 4), int16]) */
}

def @func_5792() -> (Tensor[(5, 1, 3), float64], Tensor[(4, 10, 16), float32]) {
  @func_5790() /* ty=(Tensor[(5, 1, 3), float64], Tensor[(4, 10, 16), float32]) */
}

def @func_5330() -> Tensor[(324, 1), uint16] {
  @func_5328() /* ty=Tensor[(324, 1), uint16] */
}

def @func_1811(%var_1810: Tensor[(10, 8, 13), float64]) -> (Tensor[(10, 8, 13), float64],) {
  %97 = fn (%var_1795: Tensor[(10, 8, 13), float64]) -> (Tensor[(10, 8, 13), float64],) {
    %95 = cast(%var_1795, dtype="float64") /* ty=Tensor[(10, 8, 13), float64] */;
    %96 = rsqrt(%95) /* ty=Tensor[(10, 8, 13), float64] */;
    (%96,)
  };
  %97(%var_1810) /* ty=(Tensor[(10, 8, 13), float64],) */
}

def @func_4947(%var_4945: Tensor[(324, 12), float32], %var_4946: Tensor[(1452), int8]) -> (Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float64], Tensor[(9, 9, 4), float32], Tensor[(324, 12), float32], Tensor[(5, ?, 3), int64], Tensor[(11, 11, 12), float32], Tensor[(1452), int8], Tensor[(198, 2), float32], Tensor[(77), float32], Tensor[(324, 77), int8]) {
  %131 = fn (%var_4903: Tensor[(324, 12), float32], %var_4915: Tensor[(1452), int8]) -> (Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float64], Tensor[(9, 9, 4), float32], Tensor[(324, 12), float32], Tensor[(5, ?, 3), int64], Tensor[(11, 11, 12), float32], Tensor[(1452), int8], Tensor[(198, 2), float32], Tensor[(77), float32], Tensor[(324, 77), int8]) {
    %98 = @func_551() /* ty=(Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float32]) */;
    %99 = cast(meta[relay.Constant][2] /* ty=Tensor[(77), float64] */, dtype="float64") /* ty=Tensor[(77), float64] */;
    %100 = reshape(%99, newshape=[7, 11, 1]) /* ty=Tensor[(7, 11, 1), float64] */;
    %101 = @func_2075(%100) /* ty=(Tensor[(7, 11, 1), float64], Tensor[(4, 10, 16), float32], Tensor[(6, 66), float32], Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float64]) */;
    %102 = @func_3777() /* ty=(Tensor[(9, 9, 4), float32],) */;
    %103 = @func_2454() /* ty=(Tensor[(324, 1), float32], Tensor[(9, 9, 4), float32]) */;
    %104 = %103.0;
    %105 = cast(%104, dtype="float32") /* ty=Tensor[(324, 1), float32] */;
    %106 = cast(%var_4903, dtype="float32") /* ty=Tensor[(324, 12), float32] */;
    %107 = cast(%var_4915, dtype="int8") /* ty=Tensor[(1452), int8] */;
    %108 = cast(meta[relay.Constant][3] /* ty=Tensor[(198, 2), float32] */, dtype="float32") /* ty=Tensor[(198, 2), float32] */;
    %109 = cast(meta[relay.Constant][3] /* ty=Tensor[(198, 2), float32] */, dtype="float32") /* ty=Tensor[(198, 2), float32] */;
    %110 = reshape(%107, newshape=[11, 11, 12]) /* ty=Tensor[(11, 11, 12), int8] */;
    %111 = reshape(%108, newshape=[396]) /* ty=Tensor[(396), float32] */;
    %112 = reshape(%109, newshape=[396]) /* ty=Tensor[(396), float32] */;
    %113 = @func_2894(%110, %111, %112) /* ty=(Tensor[(324, 1), uint16], Tensor[(396), uint32], Tensor[(11, 11, 12), float32], Tensor[(9, 9, 4), float32], Tensor[(11, 11, 12), float64]) */;
    %114 = cast(meta[relay.Constant][2] /* ty=Tensor[(77), float64] */, dtype="float64") /* ty=Tensor[(77), float64] */;
    %115 = sigmoid(%114) /* ty=Tensor[(77), float64] */;
    %116 = cast(%115, dtype="float64") /* ty=Tensor[(77), float64] */;
    %117 = atan(%116) /* ty=Tensor[(77), float64] */;
    %118 = cast(%117, dtype="float32") /* ty=Tensor[(77), float32] */;
    %119 = @func_445() /* ty=(Tensor[(4, 10, 16), float32], Tensor[(9, 9, 4), uint16], Tensor[(324, 1), uint16]) */;
    %120 = %119.2;
    %121 = cast(%117, dtype="int8") /* ty=Tensor[(77), int8] */;
    %122 = cast(%120, dtype="int8") /* ty=Tensor[(324, 1), int8] */;
    %123 = %98.0;
    %124 = %101.4;
    %125 = %102.0;
    %126 = divide(%105, %106) /* ty=Tensor[(324, 12), float32] */;
    %127 = @func_2814() /* ty=Tensor[(5, ?, 3), int64] */;
    %128 = %113.2;
    %129 = acos(%118) /* ty=Tensor[(77), float32] */;
    %130 = multiply(%121, %122) /* ty=Tensor[(324, 77), int8] */;
    (%123, %124, %125, %126, %127, %128, %var_4915, meta[relay.Constant][3] /* ty=Tensor[(198, 2), float32] */, %129, %130)
  };
  %131(%var_4945, %var_4946) /* ty=(Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float64], Tensor[(9, 9, 4), float32], Tensor[(324, 12), float32], Tensor[(5, ?, 3), int64], Tensor[(11, 11, 12), float32], Tensor[(1452), int8], Tensor[(198, 2), float32], Tensor[(77), float32], Tensor[(324, 77), int8]) */
}

def @func_5289() -> (Tensor[(324, 1), float32], Tensor[(4, 10, 16), int32], Tensor[(4, 10, 16), float32], Tensor[(324, ?), bool]) {
  %154 = fn () -> (Tensor[(324, 1), float32], Tensor[(4, 10, 16), int32], Tensor[(4, 10, 16), float32], Tensor[(324, ?), bool]) {
    %132 = @func_4732() /* ty=(Tensor[(324, 1), uint16],) */;
    %133 = %132.0;
    %134 = cast(%133, dtype="float64") /* ty=Tensor[(324, 1), float64] */;
    %135 = sigmoid(%134) /* ty=Tensor[(324, 1), float64] */;
    %136 = cast(%135, dtype="float32") /* ty=Tensor[(324, 1), float32] */;
    %137 = acosh(%136) /* ty=Tensor[(324, 1), float32] */;
    %138 = cast(%137, dtype="float32") /* ty=Tensor[(324, 1), float32] */;
    %139 = @func_769() /* ty=(Tensor[(4, 10, 16), int32], Tensor[(4, 10, 16), float64]) */;
    %140 = @func_2675() /* ty=(Tensor[(4, 10, 16), float64], Tensor[(4, 10, 16), float32]) */;
    %141 = cast(%133, dtype="float64") /* ty=Tensor[(324, 1), float64] */;
    %142 = shape_of(%137, dtype="int32") /* ty=Tensor[(2), int32] */;
    %143 = cast(%137, dtype="float64") /* ty=Tensor[(324, 1), float64] */;
    %144 = dyn.reshape(%141, %142, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %145 = mod(%143, %144) /* ty=Tensor[(324, ?), float64] */;
    %146 = cast(%133, dtype="bool") /* ty=Tensor[(324, 1), bool] */;
    %147 = shape_of(%145, dtype="int32") /* ty=Tensor[(2), int32] */;
    %148 = cast(%145, dtype="bool") /* ty=Tensor[(324, ?), bool] */;
    %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %150 = sqrt(%138) /* ty=Tensor[(324, 1), float32] */;
    %151 = %139.0;
    %152 = %140.1;
    %153 = less(%148, %149) /* ty=Tensor[(324, ?), bool] */;
    (%150, %151, %152, %153)
  };
  %154() /* ty=(Tensor[(324, 1), float32], Tensor[(4, 10, 16), int32], Tensor[(4, 10, 16), float32], Tensor[(324, ?), bool]) */
}

def @func_4990() -> Tensor[(9, 9, 4), float32] {
  @func_4988() /* ty=Tensor[(9, 9, 4), float32] */
}

def @func_1615() -> (Tensor[(324, 1), uint16],) {
  %156 = fn () -> (Tensor[(324, 1), uint16],) {
    %155 = @func_1485() /* ty=Tensor[(324, 1), uint16] */;
    (%155,)
  };
  %156() /* ty=(Tensor[(324, 1), uint16],) */
}

def @func_2561() -> (Tensor[(4, 10, 16), float64], Tensor[(4, 10, 16), float32]) {
  %161 = fn () -> (Tensor[(4, 10, 16), float64], Tensor[(4, 10, 16), float32]) {
    %157 = @func_1637() /* ty=(Tensor[(4, 10, 16), float64],) */;
    %158 = @func_445() /* ty=(Tensor[(4, 10, 16), float32], Tensor[(9, 9, 4), uint16], Tensor[(324, 1), uint16]) */;
    %159 = %157.0;
    %160 = %158.0;
    (%159, %160)
  };
  %161() /* ty=(Tensor[(4, 10, 16), float64], Tensor[(4, 10, 16), float32]) */
}

def @func_4433() -> (Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32], Tensor[(77), float64]) {
  %168 = fn () -> (Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32], Tensor[(77), float64]) {
    %162 = @func_3157() /* ty=(Tensor[(9, 9, 4), float32],) */;
    %163 = cast(meta[relay.Constant][4] /* ty=Tensor[(77), float64] */, dtype="float64") /* ty=Tensor[(77), float64] */;
    %164 = reshape(%163, newshape=[7, 11, 1]) /* ty=Tensor[(7, 11, 1), float64] */;
    %165 = @func_2075(%164) /* ty=(Tensor[(7, 11, 1), float64], Tensor[(4, 10, 16), float32], Tensor[(6, 66), float32], Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float64]) */;
    %166 = %162.0;
    %167 = %165.1;
    (%166, %167, meta[relay.Constant][4] /* ty=Tensor[(77), float64] */)
  };
  %168() /* ty=(Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32], Tensor[(77), float64]) */
}

def @func_5415() -> (Tensor[(4, 10, 16), float64], Tensor[(9, 9, 4), float64]) {
  %169 = @func_769() /* ty=(Tensor[(4, 10, 16), int32], Tensor[(4, 10, 16), float64]) */;
  %170 = @func_871() /* ty=(Tensor[(9, 9, 4), float32],) */;
  %171 = %170.0;
  %172 = cast(%171, dtype="float64") /* ty=Tensor[(9, 9, 4), float64] */;
  %173 = %169.1;
  %174 = log(%172) /* ty=Tensor[(9, 9, 4), float64] */;
  (%173, %174)
}

def @func_3048(%var_3002: Tensor[(10, 7, 11), float32], %var_3003: Tensor[(10, 7, 11), float32], %var_3020: Tensor[(10, 7, 11), float32]) -> (Tensor[(10, 7, 11), float32], Tensor[(10, 7, 11), bool], Tensor[(10, 7, 11), uint32], Tensor[(4, 10, 16), float32], Tensor[(5, ?, 3), int64]) {
  %175 = cast(%var_3003, dtype="float32") /* ty=Tensor[(10, 7, 11), float32] */;
  %176 = shape_of(%var_3002, dtype="int32") /* ty=Tensor[(3), int32] */;
  %177 = cast(%var_3002, dtype="float32") /* ty=Tensor[(10, 7, 11), float32] */;
  %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %179 = cast(%var_3002, dtype="bool") /* ty=Tensor[(10, 7, 11), bool] */;
  %180 = shape_of(%var_3003, dtype="int32") /* ty=Tensor[(3), int32] */;
  %181 = cast(%var_3003, dtype="bool") /* ty=Tensor[(10, 7, 11), bool] */;
  %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %183 = cast(%var_3020, dtype="uint32") /* ty=Tensor[(10, 7, 11), uint32] */;
  %184 = shape_of(%var_3002, dtype="int32") /* ty=Tensor[(3), int32] */;
  %185 = cast(%var_3002, dtype="uint32") /* ty=Tensor[(10, 7, 11), uint32] */;
  %186 = dyn.reshape(%183, %184, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %187 = @func_2560() /* ty=(Tensor[(4, 10, 16), float64], Tensor[(4, 10, 16), float32]) */;
  %188 = mod(%177, %178) /* ty=Tensor[(10, 7, 11), float32] */;
  %189 = greater_equal(%181, %182) /* ty=Tensor[(10, 7, 11), bool] */;
  %190 = bitwise_or(%185, %186) /* ty=Tensor[(10, 7, 11), uint32] */;
  %191 = %187.1;
  %192 = @func_2814() /* ty=Tensor[(5, ?, 3), int64] */;
  (%188, %189, %190, %191, %192)
}

def @func_1345() -> (Tensor[(324, 1), uint16],) {
  %195 = fn () -> (Tensor[(324, 1), uint16],) {
    %193 = @func_445() /* ty=(Tensor[(4, 10, 16), float32], Tensor[(9, 9, 4), uint16], Tensor[(324, 1), uint16]) */;
    %194 = %193.2;
    (%194,)
  };
  %195() /* ty=(Tensor[(324, 1), uint16],) */
}

def @func_4582(%var_4579: Tensor[(28, 120), bool], %var_4580: Tensor[(16, 14, 15), float32], %var_4581: Tensor[(15), int64]) -> (Tensor[(4, 10, 16), float32], Tensor[(28, 120), bool], Tensor[(9, 9, 4), float32], Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32], Tensor[(16, 14, 15), bool], Tensor[(5, ?, 3), int32], Tensor[(15), int64]) {
  @func_4577(%var_4579, %var_4580, %var_4581) /* ty=(Tensor[(4, 10, 16), float32], Tensor[(28, 120), bool], Tensor[(9, 9, 4), float32], Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32], Tensor[(16, 14, 15), bool], Tensor[(5, ?, 3), int32], Tensor[(15), int64]) */
}

def @func_4828() -> Tensor[(4, 10, 16), float32] {
  %197 = fn () -> Tensor[(4, 10, 16), float32] {
    %196 = @func_3266() /* ty=(Tensor[(4, 10, 16), float32],) */;
    %196.0
  };
  %197() /* ty=Tensor[(4, 10, 16), float32] */
}

def @func_5311() -> Tensor[(324, 1), uint16] {
  %199 = fn () -> Tensor[(324, 1), uint16] {
    %198 = @func_1344() /* ty=(Tensor[(324, 1), uint16],) */;
    %198.0
  };
  %199() /* ty=Tensor[(324, 1), uint16] */
}

def @func_377(%var_359: Tensor[(9, 9, 4), uint16], %var_360: Tensor[(9, 9, 4), uint16]) -> Tensor[(9, 9, 4), uint16] {
  %200 = cast(%var_360, dtype="uint16") /* ty=Tensor[(9, 9, 4), uint16] */;
  %201 = shape_of(%var_359, dtype="int32") /* ty=Tensor[(3), int32] */;
  %202 = cast(%var_359, dtype="uint16") /* ty=Tensor[(9, 9, 4), uint16] */;
  %203 = dyn.reshape(%200, %201, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_xor(%202, %203) /* ty=Tensor[(9, 9, 4), uint16] */
}

def @func_3707(%var_3705: Tensor[(9, 9, 4), float32]) -> (Tensor[(9, 9, 4), float32],) {
  @func_3704(%var_3705) /* ty=(Tensor[(9, 9, 4), float32],) */
}

def @func_4577(%var_4531: Tensor[(28, 120), bool], %var_4555: Tensor[(16, 14, 15), float32], %var_4574: Tensor[(15), int64]) -> (Tensor[(4, 10, 16), float32], Tensor[(28, 120), bool], Tensor[(9, 9, 4), float32], Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32], Tensor[(16, 14, 15), bool], Tensor[(5, ?, 3), int32], Tensor[(15), int64]) {
  %204 = @func_3266() /* ty=(Tensor[(4, 10, 16), float32],) */;
  %205 = @func_4432() /* ty=(Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32], Tensor[(77), float64]) */;
  %206 = @func_893() /* ty=(Tensor[(9, 9, 4), float32],) */;
  %207 = @func_1434() /* ty=(Tensor[(4, 10, 16), float32], Tensor[(9, 9, 4), float32]) */;
  %208 = cast(%var_4531, dtype="bool") /* ty=Tensor[(28, 120), bool] */;
  %209 = cast(%var_4531, dtype="bool") /* ty=Tensor[(28, 120), bool] */;
  %210 = reshape(%208, newshape=[16, 14, 15]) /* ty=Tensor[(16, 14, 15), bool] */;
  %211 = reshape(%209, newshape=[16, 14, 15]) /* ty=Tensor[(16, 14, 15), bool] */;
  %212 = @func_4066(%210, %211) /* ty=(Tensor[(9, 9, 4), float32], Tensor[(16, 14, 15), float32], Tensor[(16, 14, 15), float32]) */;
  %213 = %212.2;
  %214 = cast(%var_4555, dtype="bool") /* ty=Tensor[(16, 14, 15), bool] */;
  %215 = shape_of(%213, dtype="int32") /* ty=Tensor[(3), int32] */;
  %216 = cast(%213, dtype="bool") /* ty=Tensor[(16, 14, 15), bool] */;
  %217 = dyn.reshape(%214, %215, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %218 = cast(%var_4574, dtype="int64") /* ty=Tensor[(15), int64] */;
  %219 = reshape(%218, newshape=[5, 1, 3]) /* ty=Tensor[(5, 1, 3), int64] */;
  %220 = %204.0;
  %221 = %205.0;
  %222 = %206.0;
  %223 = %207.0;
  %224 = not_equal(%216, %217) /* ty=Tensor[(16, 14, 15), bool] */;
  %225 = @func_3482(%219) /* ty=Tensor[(5, ?, 3), int32] */;
  (%220, %var_4531, %221, %222, %223, %224, %225, %var_4574)
}

def @func_1095() -> (Tensor[(9, 9, 4), float32],) {
  %226 = @func_670() /* ty=(Tensor[(9, 9, 4), float32], Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32]) */;
  %227 = %226.1;
  (%227,)
}

def @func_3355(%var_3353: Tensor[(16, 14, 14), uint64], %var_3354: Tensor[(16, 14, 14), uint64]) -> (Tensor[(16, 14, 14), uint64], Tensor[(4, 10, 16), float64], Tensor[(4, 10, 16), float32]) {
  %237 = fn (%var_3330: Tensor[(16, 14, 14), uint64], %var_3331: Tensor[(16, 14, 14), uint64]) -> (Tensor[(16, 14, 14), uint64], Tensor[(4, 10, 16), float64], Tensor[(4, 10, 16), float32]) {
    %228 = cast(%var_3331, dtype="uint64") /* ty=Tensor[(16, 14, 14), uint64] */;
    %229 = shape_of(%var_3330, dtype="int32") /* ty=Tensor[(3), int32] */;
    %230 = cast(%var_3330, dtype="uint64") /* ty=Tensor[(16, 14, 14), uint64] */;
    %231 = dyn.reshape(%228, %229, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %232 = @func_2675() /* ty=(Tensor[(4, 10, 16), float64], Tensor[(4, 10, 16), float32]) */;
    %233 = @func_3266() /* ty=(Tensor[(4, 10, 16), float32],) */;
    %234 = multiply(%230, %231) /* ty=Tensor[(16, 14, 14), uint64] */;
    %235 = %232.0;
    %236 = %233.0;
    (%234, %235, %236)
  };
  %237(%var_3353, %var_3354) /* ty=(Tensor[(16, 14, 14), uint64], Tensor[(4, 10, 16), float64], Tensor[(4, 10, 16), float32]) */
}

def @func_4149(%var_4147: Tensor[(10, 5, 16), float64]) -> Tensor[(10, 5, 16), int16] {
  @func_4146(%var_4147) /* ty=Tensor[(10, 5, 16), int16] */
}

def @func_2512() -> (Tensor[(5, ?, 3), float64], Tensor[(5, 1, 3), float64], Tensor[(5, ?, 3), int64]) {
  %238 = cast(meta[relay.Constant][5] /* ty=Tensor[(5, 1, 3), float32] */, dtype="float32") /* ty=Tensor[(5, 1, 3), float32] */;
  %239 = acosh(%238) /* ty=Tensor[(5, 1, 3), float32] */;
  %240 = cast(meta[relay.Constant][5] /* ty=Tensor[(5, 1, 3), float32] */, dtype="float64") /* ty=Tensor[(5, 1, 3), float64] */;
  %241 = shape_of(%239, dtype="int32") /* ty=Tensor[(3), int32] */;
  %242 = cast(%239, dtype="float64") /* ty=Tensor[(5, 1, 3), float64] */;
  %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %244 = cast(meta[relay.Constant][5] /* ty=Tensor[(5, 1, 3), float32] */, dtype="float64") /* ty=Tensor[(5, 1, 3), float64] */;
  %245 = cast(meta[relay.Constant][5] /* ty=Tensor[(5, 1, 3), float32] */, dtype="int64") /* ty=Tensor[(5, 1, 3), int64] */;
  %246 = shape_of(%239, dtype="int32") /* ty=Tensor[(3), int32] */;
  %247 = cast(%239, dtype="int64") /* ty=Tensor[(5, 1, 3), int64] */;
  %248 = dyn.reshape(%245, %246, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %249 = floor_mod(%242, %243) /* ty=Tensor[(5, ?, 3), float64] */;
  %250 = cos(%244) /* ty=Tensor[(5, 1, 3), float64] */;
  %251 = bitwise_and(%247, %248) /* ty=Tensor[(5, ?, 3), int64] */;
  (%249, %250, %251)
}

def @func_1918() -> (Tensor[(4, 10, 16), float64], Tensor[(324, 1), uint16]) {
  @func_1916() /* ty=(Tensor[(4, 10, 16), float64], Tensor[(324, 1), uint16]) */
}

def @func_2078(%var_2076: Tensor[(7, 11, 1), float64]) -> (Tensor[(7, 11, 1), float64], Tensor[(4, 10, 16), float32], Tensor[(6, 66), float32], Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float64]) {
  @func_2075(%var_2076) /* ty=(Tensor[(7, 11, 1), float64], Tensor[(4, 10, 16), float32], Tensor[(6, 66), float32], Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float64]) */
}

def @func_5982(%var_5980: Tensor[(324, 3), uint16]) -> Tensor[(324, 3), float32] {
  @func_5979(%var_5980) /* ty=Tensor[(324, 3), float32] */
}

def @func_5979(%var_5961: Tensor[(324, 3), uint16]) -> Tensor[(324, 3), float32] {
  %252 = @func_5310() /* ty=Tensor[(324, 1), uint16] */;
  %253 = cast(%252, dtype="bool") /* ty=Tensor[(324, 1), bool] */;
  %254 = cast(%var_5961, dtype="bool") /* ty=Tensor[(324, 3), bool] */;
  %255 = less_equal(%253, %254) /* ty=Tensor[(324, 3), bool] */;
  %256 = cast(%255, dtype="float32") /* ty=Tensor[(324, 3), float32] */;
  sqrt(%256) /* ty=Tensor[(324, 3), float32] */
}

def @func_4687(%var_4649: Tensor[(4, 10, 16), float32]) -> (Tensor[(4, 10, 16), int16], Tensor[(4, 10, 16), float32]) {
  %257 = @func_551() /* ty=(Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float32]) */;
  %258 = %257.1;
  %259 = cast(%var_4649, dtype="int16") /* ty=Tensor[(4, 10, 16), int16] */;
  %260 = shape_of(%258, dtype="int32") /* ty=Tensor[(3), int32] */;
  %261 = cast(%258, dtype="int16") /* ty=Tensor[(4, 10, 16), int16] */;
  %262 = dyn.reshape(%259, %260, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %263 = cast(%258, dtype="float32") /* ty=Tensor[(4, 10, 16), float32] */;
  %264 = maximum(%261, %262) /* ty=Tensor[(4, 10, 16), int16] */;
  %265 = erf(%263) /* ty=Tensor[(4, 10, 16), float32] */;
  (%264, %265)
}

def @func_5996() -> Tensor[(4, 10, 16), float64] {
  %266 = @func_1637() /* ty=(Tensor[(4, 10, 16), float64],) */;
  %266.0
}

def @func_2514() -> (Tensor[(5, ?, 3), float64], Tensor[(5, 1, 3), float64], Tensor[(5, ?, 3), int64]) {
  @func_2512() /* ty=(Tensor[(5, ?, 3), float64], Tensor[(5, 1, 3), float64], Tensor[(5, ?, 3), int64]) */
}

def @func_6059() -> Tensor[(4, 10, 16), int8] {
  @func_6057() /* ty=Tensor[(4, 10, 16), int8] */
}

def @func_3159() -> (Tensor[(9, 9, 4), float32],) {
  @func_3157() /* ty=(Tensor[(9, 9, 4), float32],) */
}

def @func_5026(%var_5025: Tensor[(4, 10, 16), float32]) -> Tensor[(4, 10, 16), float64] {
  %273 = fn (%var_5009: Tensor[(4, 10, 16), float32]) -> Tensor[(4, 10, 16), float64] {
    %267 = @func_3266() /* ty=(Tensor[(4, 10, 16), float32],) */;
    %268 = %267.0;
    %269 = cast(%var_5009, dtype="float64") /* ty=Tensor[(4, 10, 16), float64] */;
    %270 = shape_of(%268, dtype="int32") /* ty=Tensor[(3), int32] */;
    %271 = cast(%268, dtype="float64") /* ty=Tensor[(4, 10, 16), float64] */;
    %272 = dyn.reshape(%269, %270, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    divide(%271, %272) /* ty=Tensor[(4, 10, 16), float64] */
  };
  %273(%var_5025) /* ty=Tensor[(4, 10, 16), float64] */
}

def @func_4223(%var_4220: int64, %var_4221: Tensor[(56), int64], %var_4222: Tensor[(15), int64]) -> (Tensor[(324, 1), float32], Tensor[(7, 8, 16), uint32], Tensor[(56), int64], Tensor[(5, ?, 3), int32], Tensor[(15), int64], Tensor[(9, 9, 4), float64], Tensor[(4860), uint16], Tensor[(896), bool], Tensor[(324, 1), uint16]) {
  %297 = fn (%var_4163: int64, %var_4164: Tensor[(56), int64], %var_4168: Tensor[(15), int64]) -> (Tensor[(324, 1), float32], Tensor[(7, 8, 16), uint32], Tensor[(56), int64], Tensor[(5, ?, 3), int32], Tensor[(15), int64], Tensor[(9, 9, 4), float64], Tensor[(4860), uint16], Tensor[(896), bool], Tensor[(324, 1), uint16]) {
    %274 = @func_1207() /* ty=(Tensor[(324, 1), uint16], Tensor[(4, 10, 16), int8], Tensor[(640), float32], Tensor[(324, ?), bool], Tensor[(324, 1), float32]) */;
    %275 = cast(%var_4163, dtype="int64") /* ty=int64 */;
    %276 = cast(%var_4164, dtype="int64") /* ty=Tensor[(56), int64] */;
    %277 = cast(meta[relay.Constant][6] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
    %278 = reshape(%275, newshape=[]) /* ty=int64 */;
    %279 = reshape(%276, newshape=[7, 8, 1]) /* ty=Tensor[(7, 8, 1), int64] */;
    %280 = reshape(%277, newshape=[7, 8, 16]) /* ty=Tensor[(7, 8, 16), float64] */;
    %281 = @func_2354(%278, %279, %280) /* ty=(Tensor[(324, 1), uint16], Tensor[(7, 8, ?), uint16], Tensor[(9, 9, 4), float32], Tensor[(7, 8, ?), float32], Tensor[(7, 8, 16), uint32]) */;
    %282 = cast(%var_4168, dtype="int64") /* ty=Tensor[(15), int64] */;
    %283 = reshape(%282, newshape=[5, 1, 3]) /* ty=Tensor[(5, 1, 3), int64] */;
    %284 = cast(meta[relay.Constant][7] /* ty=Tensor[(4860), uint16] */, dtype="uint16") /* ty=Tensor[(4860), uint16] */;
    %285 = %274.4;
    %286 = cast(%285, dtype="float32") /* ty=Tensor[(324, 1), float32] */;
    %287 = reshape(%284, newshape=[324, 15]) /* ty=Tensor[(324, 15), uint16] */;
    %288 = reshape(%286, newshape=[9, 9, 4]) /* ty=Tensor[(9, 9, 4), float32] */;
    %289 = @func_1317(%287, %288) /* ty=(Tensor[(324, 15), float64], Tensor[(640), float32], Tensor[(9, 9, 4), float32], Tensor[(9, 9, 4), float64], Tensor[(324, 1), uint16]) */;
    %290 = cast(meta[relay.Constant][6] /* ty=Tensor[(896), float64] */, dtype="bool") /* ty=Tensor[(896), bool] */;
    %291 = cast(%var_4163, dtype="bool") /* ty=bool */;
    %292 = %281.4;
    %293 = @func_3482(%283) /* ty=Tensor[(5, ?, 3), int32] */;
    %294 = %289.3;
    %295 = greater_equal(%290, %291) /* ty=Tensor[(896), bool] */;
    %296 = @func_2367() /* ty=Tensor[(324, 1), uint16] */;
    (%285, %292, %var_4164, %293, %var_4168, %294, meta[relay.Constant][7] /* ty=Tensor[(4860), uint16] */, %295, %296)
  };
  %297(%var_4220, %var_4221, %var_4222) /* ty=(Tensor[(324, 1), float32], Tensor[(7, 8, 16), uint32], Tensor[(56), int64], Tensor[(5, ?, 3), int32], Tensor[(15), int64], Tensor[(9, 9, 4), float64], Tensor[(4860), uint16], Tensor[(896), bool], Tensor[(324, 1), uint16]) */
}

def @func_5882() -> (Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32], Tensor[(324, 1), uint16]) {
  %302 = fn () -> (Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32], Tensor[(324, 1), uint16]) {
    %298 = @func_2675() /* ty=(Tensor[(4, 10, 16), float64], Tensor[(4, 10, 16), float32]) */;
    %299 = @func_4988() /* ty=Tensor[(9, 9, 4), float32] */;
    %300 = %298.1;
    %301 = @func_2367() /* ty=Tensor[(324, 1), uint16] */;
    (%299, %300, %301)
  };
  %302() /* ty=(Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32], Tensor[(324, 1), uint16]) */
}

def @func_873() -> (Tensor[(9, 9, 4), float32],) {
  @func_871() /* ty=(Tensor[(9, 9, 4), float32],) */
}

def @func_2455() -> (Tensor[(324, 1), float32], Tensor[(9, 9, 4), float32]) {
  %308 = fn () -> (Tensor[(324, 1), float32], Tensor[(9, 9, 4), float32]) {
    %303 = @func_2367() /* ty=Tensor[(324, 1), uint16] */;
    %304 = cast(%303, dtype="float32") /* ty=Tensor[(324, 1), float32] */;
    %305 = @func_1095() /* ty=(Tensor[(9, 9, 4), float32],) */;
    %306 = atan(%304) /* ty=Tensor[(324, 1), float32] */;
    %307 = %305.0;
    (%306, %307)
  };
  %308() /* ty=(Tensor[(324, 1), float32], Tensor[(9, 9, 4), float32]) */
}

def @func_2828() -> Tensor[(4, 10, 16), float32] {
  @func_2826() /* ty=Tensor[(4, 10, 16), float32] */
}

def @func_5221(%var_5219: Tensor[(3360), bool], %var_5220: Tensor[(324, 11), float32]) -> (Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32], Tensor[(324, 3360), uint16], Tensor[(324, 11), bool]) {
  %329 = fn (%var_5171: Tensor[(3360), bool], %var_5211: Tensor[(324, 11), float32]) -> (Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32], Tensor[(324, 3360), uint16], Tensor[(324, 11), bool]) {
    %309 = cast(%var_5171, dtype="bool") /* ty=Tensor[(3360), bool] */;
    %310 = cast(%var_5171, dtype="bool") /* ty=Tensor[(3360), bool] */;
    %311 = reshape(%309, newshape=[16, 14, 15]) /* ty=Tensor[(16, 14, 15), bool] */;
    %312 = reshape(%310, newshape=[16, 14, 15]) /* ty=Tensor[(16, 14, 15), bool] */;
    %313 = @func_4066(%311, %312) /* ty=(Tensor[(9, 9, 4), float32], Tensor[(16, 14, 15), float32], Tensor[(16, 14, 15), float32]) */;
    %314 = @func_1344() /* ty=(Tensor[(324, 1), uint16],) */;
    %315 = %314.0;
    %316 = cast(%315, dtype="float32") /* ty=Tensor[(324, 1), float32] */;
    %317 = log10(%316) /* ty=Tensor[(324, 1), float32] */;
    %318 = cast(%var_5171, dtype="int16") /* ty=Tensor[(3360), int16] */;
    %319 = cast(%317, dtype="int16") /* ty=Tensor[(324, 1), int16] */;
    %320 = subtract(%318, %319) /* ty=Tensor[(324, 3360), int16] */;
    %321 = cast(%320, dtype="uint16") /* ty=Tensor[(324, 3360), uint16] */;
    %322 = cast(%var_5171, dtype="uint16") /* ty=Tensor[(3360), uint16] */;
    %323 = cast(%317, dtype="bool") /* ty=Tensor[(324, 1), bool] */;
    %324 = cast(%var_5211, dtype="bool") /* ty=Tensor[(324, 11), bool] */;
    %325 = %313.0;
    %326 = @func_3515() /* ty=Tensor[(4, 10, 16), float32] */;
    %327 = bitwise_and(%321, %322) /* ty=Tensor[(324, 3360), uint16] */;
    %328 = less_equal(%323, %324) /* ty=Tensor[(324, 11), bool] */;
    (%325, %326, %327, %328)
  };
  %329(%var_5219, %var_5220) /* ty=(Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32], Tensor[(324, 3360), uint16], Tensor[(324, 11), bool]) */
}

def @func_5824() -> (Tensor[(4, 10, 16), float32], Tensor[(9, 9, 4), float32]) {
  %332 = fn () -> (Tensor[(4, 10, 16), float32], Tensor[(9, 9, 4), float32]) {
    %330 = @func_2826() /* ty=Tensor[(4, 10, 16), float32] */;
    %331 = @func_4988() /* ty=Tensor[(9, 9, 4), float32] */;
    (%330, %331)
  };
  %332() /* ty=(Tensor[(4, 10, 16), float32], Tensor[(9, 9, 4), float32]) */
}

def @func_4424(%var_4423: Tensor[(324, 9), uint16]) -> (Tensor[(324, 9), bool], Tensor[(324, 1), uint16]) {
  %340 = fn (%var_4404: Tensor[(324, 9), uint16]) -> (Tensor[(324, 9), bool], Tensor[(324, 1), uint16]) {
    %333 = @func_1207() /* ty=(Tensor[(324, 1), uint16], Tensor[(4, 10, 16), int8], Tensor[(640), float32], Tensor[(324, ?), bool], Tensor[(324, 1), float32]) */;
    %334 = %333.0;
    %335 = cast(%334, dtype="bool") /* ty=Tensor[(324, 1), bool] */;
    %336 = cast(%var_4404, dtype="bool") /* ty=Tensor[(324, 9), bool] */;
    %337 = @func_1344() /* ty=(Tensor[(324, 1), uint16],) */;
    %338 = greater_equal(%335, %336) /* ty=Tensor[(324, 9), bool] */;
    %339 = %337.0;
    (%338, %339)
  };
  %340(%var_4423) /* ty=(Tensor[(324, 9), bool], Tensor[(324, 1), uint16]) */
}

def @func_6081() -> Tensor[(4, 10, 16), float32] {
  @func_6079() /* ty=Tensor[(4, 10, 16), float32] */
}

def @func_1321(%var_1319: Tensor[(324, 15), uint16], %var_1320: Tensor[(9, 9, 4), float32]) -> (Tensor[(324, 15), float64], Tensor[(640), float32], Tensor[(9, 9, 4), float32], Tensor[(9, 9, 4), float64], Tensor[(324, 1), uint16]) {
  @func_1317(%var_1319, %var_1320) /* ty=(Tensor[(324, 15), float64], Tensor[(640), float32], Tensor[(9, 9, 4), float32], Tensor[(9, 9, 4), float64], Tensor[(324, 1), uint16]) */
}

def @func_3482(%var_3474: Tensor[(5, 1, 3), int64]) -> Tensor[(5, ?, 3), int32] {
  %341 = @func_2814() /* ty=Tensor[(5, ?, 3), int64] */;
  %342 = cast(%var_3474, dtype="int32") /* ty=Tensor[(5, 1, 3), int32] */;
  %343 = shape_of(%341, dtype="int32") /* ty=Tensor[(3), int32] */;
  %344 = cast(%341, dtype="int32") /* ty=Tensor[(5, ?, 3), int32] */;
  %345 = dyn.reshape(%342, %343, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  add(%344, %345) /* ty=Tensor[(5, ?, 3), int32] */
}

def @func_3267() -> (Tensor[(4, 10, 16), float32],) {
  %350 = fn () -> (Tensor[(4, 10, 16), float32],) {
    %346 = @func_1916() /* ty=(Tensor[(4, 10, 16), float64], Tensor[(324, 1), uint16]) */;
    %347 = %346.0;
    %348 = cast(%347, dtype="float32") /* ty=Tensor[(4, 10, 16), float32] */;
    %349 = exp(%348) /* ty=Tensor[(4, 10, 16), float32] */;
    (%349,)
  };
  %350() /* ty=(Tensor[(4, 10, 16), float32],) */
}

def @func_5044() -> Tensor[(5, 1, 3), float64] {
  @func_5042() /* ty=Tensor[(5, 1, 3), float64] */
}

def @func_3157() -> (Tensor[(9, 9, 4), float32],) {
  %351 = @func_670() /* ty=(Tensor[(9, 9, 4), float32], Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32]) */;
  %352 = %351.1;
  (%352,)
}

def @func_5534() -> (Tensor[(324, 1), float32],) {
  %355 = fn () -> (Tensor[(324, 1), float32],) {
    %353 = @func_1207() /* ty=(Tensor[(324, 1), uint16], Tensor[(4, 10, 16), int8], Tensor[(640), float32], Tensor[(324, ?), bool], Tensor[(324, 1), float32]) */;
    %354 = %353.4;
    (%354,)
  };
  %355() /* ty=(Tensor[(324, 1), float32],) */
}

def @func_6144() -> (Tensor[(324, 1), uint16],) {
  @func_6142() /* ty=(Tensor[(324, 1), uint16],) */
}

def @func_3777() -> (Tensor[(9, 9, 4), float32],) {
  %356 = @func_871() /* ty=(Tensor[(9, 9, 4), float32],) */;
  %357 = %356.0;
  (%357,)
}

def @main(%var_6169: Tensor[(4, 9, 14), float32], %var_6215: Tensor[(4, 9, 14), float32]) -> (Tensor[(4, 9, 14), float64], Tensor[(324, 13), float64], Tensor[(9, 9, 4), int16], Tensor[(18, 18), float64], Tensor[(4, 10, 16), float32], Tensor[(5, 1, 3), float64], Tensor[(4, 9, 14), bool], Tensor[(324, 1), uint16], Tensor[(324, 1), float32], Tensor[(4212), float32], Tensor[(4, 9, 14), uint16]) {
  %358 = cast(%var_6169, dtype="float32") /* ty=Tensor[(4, 9, 14), float32] */;
  %359 = log2(%358) /* ty=Tensor[(4, 9, 14), float32] */;
  %360 = cast(meta[relay.Constant][8] /* ty=Tensor[(4, 9, 14), float32] */, dtype="float64") /* ty=Tensor[(4, 9, 14), float64] */;
  %361 = shape_of(%359, dtype="int32") /* ty=Tensor[(3), int32] */;
  %362 = cast(%359, dtype="float64") /* ty=Tensor[(4, 9, 14), float64] */;
  %363 = dyn.reshape(%360, %361, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %364 = cast(meta[relay.Constant][9] /* ty=Tensor[(4212), uint16] */, dtype="uint16") /* ty=Tensor[(4212), uint16] */;
  %365 = reshape(%364, newshape=[324, 13]) /* ty=Tensor[(324, 13), uint16] */;
  %366 = @func_5362(%365) /* ty=(Tensor[(324, 13), float64],) */;
  %367 = cast(meta[relay.Constant][10] /* ty=Tensor[(18, 18), float32] */, dtype="float32") /* ty=Tensor[(18, 18), float32] */;
  %368 = reshape(%367, newshape=[9, 9, 4]) /* ty=Tensor[(9, 9, 4), float32] */;
  %369 = @func_4362(%368) /* ty=(Tensor[(4, 10, 16), float64], Tensor[(9, 9, 4), int16]) */;
  %370 = cast(meta[relay.Constant][10] /* ty=Tensor[(18, 18), float32] */, dtype="float64") /* ty=Tensor[(18, 18), float64] */;
  %371 = @func_672() /* ty=(Tensor[(9, 9, 4), float32], Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32]) */;
  %372 = @func_5792() /* ty=(Tensor[(5, 1, 3), float64], Tensor[(4, 10, 16), float32]) */;
  %373 = cast(%var_6215, dtype="bool") /* ty=Tensor[(4, 9, 14), bool] */;
  %374 = shape_of(%var_6169, dtype="int32") /* ty=Tensor[(3), int32] */;
  %375 = cast(%var_6169, dtype="bool") /* ty=Tensor[(4, 9, 14), bool] */;
  %376 = dyn.reshape(%373, %374, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %377 = @func_1615() /* ty=(Tensor[(324, 1), uint16],) */;
  %378 = cast(meta[relay.Constant][9] /* ty=Tensor[(4212), uint16] */, dtype="float32") /* ty=Tensor[(4212), float32] */;
  %379 = cast(meta[relay.Constant][11] /* ty=Tensor[(4, 9, 14), float32] */, dtype="uint16") /* ty=Tensor[(4, 9, 14), uint16] */;
  %380 = shape_of(%359, dtype="int32") /* ty=Tensor[(3), int32] */;
  %381 = cast(%359, dtype="uint16") /* ty=Tensor[(4, 9, 14), uint16] */;
  %382 = dyn.reshape(%379, %380, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %383 = mod(%362, %363) /* ty=Tensor[(4, 9, 14), float64] */;
  %384 = %366.0;
  %385 = %369.1;
  %386 = exp(%370) /* ty=Tensor[(18, 18), float64] */;
  %387 = %371.2;
  %388 = %372.0;
  %389 = equal(%375, %376) /* ty=Tensor[(4, 9, 14), bool] */;
  %390 = %377.0;
  %391 = @func_5668() /* ty=Tensor[(324, 1), float32] */;
  %392 = log2(%378) /* ty=Tensor[(4212), float32] */;
  %393 = multiply(%381, %382) /* ty=Tensor[(4, 9, 14), uint16] */;
  (%383, %384, %385, %386, %387, %388, %389, %390, %391, %392, %393)
}

def @func_5776(%var_5774: Tensor[(3, 15, 11), int32], %var_5775: Tensor[(3, 15, 11), int32]) -> (Tensor[(3, 15, 11), bool],) {
  %399 = fn (%var_5762: Tensor[(3, 15, 11), int32], %var_5763: Tensor[(3, 15, 11), int32]) -> (Tensor[(3, 15, 11), bool],) {
    %394 = cast(%var_5763, dtype="bool") /* ty=Tensor[(3, 15, 11), bool] */;
    %395 = shape_of(%var_5762, dtype="int32") /* ty=Tensor[(3), int32] */;
    %396 = cast(%var_5762, dtype="bool") /* ty=Tensor[(3, 15, 11), bool] */;
    %397 = dyn.reshape(%394, %395, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %398 = greater(%396, %397) /* ty=Tensor[(3, 15, 11), bool] */;
    (%398,)
  };
  %399(%var_5774, %var_5775) /* ty=(Tensor[(3, 15, 11), bool],) */
}

def @func_4690(%var_4688: Tensor[(4, 10, 16), float32]) -> (Tensor[(4, 10, 16), int16], Tensor[(4, 10, 16), float32]) {
  @func_4687(%var_4688) /* ty=(Tensor[(4, 10, 16), int16], Tensor[(4, 10, 16), float32]) */
}

def @func_1730(%var_1729: Tensor[(396), float32]) -> (Tensor[(4, 10, 16), float32], Tensor[(11, 12, 3), float32], Tensor[(396), float32], Tensor[(324, 1), uint16], Tensor[(144), float64], Tensor[(144), float64]) {
  %411 = fn (%var_1675: Tensor[(396), float32]) -> (Tensor[(4, 10, 16), float32], Tensor[(11, 12, 3), float32], Tensor[(396), float32], Tensor[(324, 1), uint16], Tensor[(144), float64], Tensor[(144), float64]) {
    %400 = @func_606() /* ty=(Tensor[(324, 1), uint16], Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float32]) */;
    %401 = cast(%var_1675, dtype="float32") /* ty=Tensor[(396), float32] */;
    %402 = reshape(%401, newshape=[11, 12, 3]) /* ty=Tensor[(11, 12, 3), float32] */;
    %403 = @func_1240(%402) /* ty=(Tensor[(11, 12, 3), float32],) */;
    %404 = cast(meta[relay.Constant][12] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
    %405 = reshape(%404, newshape=[144]) /* ty=Tensor[(144), float64] */;
    %406 = @func_628(%405) /* ty=(Tensor[(9, 9, 4), uint16], Tensor[(9, 8, 2), float64], Tensor[(144), float64]) */;
    %407 = %400.2;
    %408 = %403.0;
    %409 = @func_1485() /* ty=Tensor[(324, 1), uint16] */;
    %410 = %406.2;
    (%407, %408, %var_1675, %409, %410, meta[relay.Constant][12] /* ty=Tensor[(144), float64] */)
  };
  %411(%var_1729) /* ty=(Tensor[(4, 10, 16), float32], Tensor[(11, 12, 3), float32], Tensor[(396), float32], Tensor[(324, 1), uint16], Tensor[(144), float64], Tensor[(144), float64]) */
}

def @func_3485(%var_3483: Tensor[(5, 1, 3), int64]) -> Tensor[(5, ?, 3), int32] {
  @func_3482(%var_3483) /* ty=Tensor[(5, ?, 3), int32] */
}

def @func_2815() -> Tensor[(5, ?, 3), int64] {
  %413 = fn () -> Tensor[(5, ?, 3), int64] {
    %412 = @func_2512() /* ty=(Tensor[(5, ?, 3), float64], Tensor[(5, 1, 3), float64], Tensor[(5, ?, 3), int64]) */;
    %412.2
  };
  %413() /* ty=Tensor[(5, ?, 3), int64] */
}

def @func_5668() -> Tensor[(324, 1), float32] {
  %414 = @func_5288() /* ty=(Tensor[(324, 1), float32], Tensor[(4, 10, 16), int32], Tensor[(4, 10, 16), float32], Tensor[(324, ?), bool]) */;
  %414.0
}

def @func_5042() -> Tensor[(5, 1, 3), float64] {
  %415 = @func_2512() /* ty=(Tensor[(5, ?, 3), float64], Tensor[(5, 1, 3), float64], Tensor[(5, ?, 3), int64]) */;
  %415.1
}

def @func_5390(%var_5380: Tensor[(1, 2, 14), int32], %var_5381: Tensor[(9, 2, 14), int32]) -> Tensor[(9, 2, 14), bool] {
  %416 = cast(%var_5380, dtype="bool") /* ty=Tensor[(1, 2, 14), bool] */;
  %417 = cast(%var_5381, dtype="bool") /* ty=Tensor[(9, 2, 14), bool] */;
  equal(%416, %417) /* ty=Tensor[(9, 2, 14), bool] */
}

def @func_5394(%var_5392: Tensor[(1, 2, 14), int32], %var_5393: Tensor[(9, 2, 14), int32]) -> Tensor[(9, 2, 14), bool] {
  @func_5390(%var_5392, %var_5393) /* ty=Tensor[(9, 2, 14), bool] */
}

def @func_4116() -> (Tensor[(9, 9, 4), float32], Tensor[(9, 9, 4), float32], Tensor[(5, 1, 3), float64]) {
  @func_4114() /* ty=(Tensor[(9, 9, 4), float32], Tensor[(9, 9, 4), float32], Tensor[(5, 1, 3), float64]) */
}

def @func_1242(%var_1241: Tensor[(11, 12, 3), float32]) -> (Tensor[(11, 12, 3), float32],) {
  %420 = fn (%var_1218: Tensor[(11, 12, 3), float32]) -> (Tensor[(11, 12, 3), float32],) {
    %418 = cast(%var_1218, dtype="float32") /* ty=Tensor[(11, 12, 3), float32] */;
    %419 = asin(%418) /* ty=Tensor[(11, 12, 3), float32] */;
    (%419,)
  };
  %420(%var_1241) /* ty=(Tensor[(11, 12, 3), float32],) */
}

def @func_503(%var_502: Tensor[(9, 8, 2), float64]) -> (Tensor[(9, 8, 2), float64], Tensor[(9, 9, 4), uint16], Tensor[(324, 1), uint16], Tensor[(9, 9, 4), uint16]) {
  %429 = fn (%var_472: Tensor[(9, 8, 2), float64]) -> (Tensor[(9, 8, 2), float64], Tensor[(9, 9, 4), uint16], Tensor[(324, 1), uint16], Tensor[(9, 9, 4), uint16]) {
    %421 = cast(%var_472, dtype="float64") /* ty=Tensor[(9, 8, 2), float64] */;
    %422 = @func_445() /* ty=(Tensor[(4, 10, 16), float32], Tensor[(9, 9, 4), uint16], Tensor[(324, 1), uint16]) */;
    %423 = @func_445() /* ty=(Tensor[(4, 10, 16), float32], Tensor[(9, 9, 4), uint16], Tensor[(324, 1), uint16]) */;
    %424 = @func_445() /* ty=(Tensor[(4, 10, 16), float32], Tensor[(9, 9, 4), uint16], Tensor[(324, 1), uint16]) */;
    %425 = sin(%421) /* ty=Tensor[(9, 8, 2), float64] */;
    %426 = %422.1;
    %427 = %423.2;
    %428 = %424.1;
    (%425, %426, %427, %428)
  };
  %429(%var_502) /* ty=(Tensor[(9, 8, 2), float64], Tensor[(9, 9, 4), uint16], Tensor[(324, 1), uint16], Tensor[(9, 9, 4), uint16]) */
}

def @func_3384() -> (Tensor[(640), float32], Tensor[(640), float32]) {
  @func_3382() /* ty=(Tensor[(640), float32], Tensor[(640), float32]) */
}

def @func_5629(%var_5627: Tensor[(4, 10, 16), float32], %var_5628: Tensor[(324), float32]) -> (Tensor[(4, 10, 16), uint64], Tensor[(640), float32], Tensor[(4860), uint16], Tensor[(324), float32]) {
  %445 = fn (%var_5585: Tensor[(4, 10, 16), float32], %var_5607: Tensor[(324), float32]) -> (Tensor[(4, 10, 16), uint64], Tensor[(640), float32], Tensor[(4860), uint16], Tensor[(324), float32]) {
    %430 = @func_2095() /* ty=(Tensor[(4, 10, 16), float32],) */;
    %431 = %430.0;
    %432 = cast(%431, dtype="float32") /* ty=Tensor[(4, 10, 16), float32] */;
    %433 = sigmoid(%432) /* ty=Tensor[(4, 10, 16), float32] */;
    %434 = cast(%var_5585, dtype="uint64") /* ty=Tensor[(4, 10, 16), uint64] */;
    %435 = shape_of(%433, dtype="int32") /* ty=Tensor[(3), int32] */;
    %436 = cast(%433, dtype="uint64") /* ty=Tensor[(4, 10, 16), uint64] */;
    %437 = dyn.reshape(%434, %435, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %438 = cast(meta[relay.Constant][13] /* ty=Tensor[(4860), uint16] */, dtype="uint16") /* ty=Tensor[(4860), uint16] */;
    %439 = cast(%var_5607, dtype="float32") /* ty=Tensor[(324), float32] */;
    %440 = reshape(%438, newshape=[4860]) /* ty=Tensor[(4860), uint16] */;
    %441 = reshape(%439, newshape=[324]) /* ty=Tensor[(324), float32] */;
    %442 = @func_2137(%440, %441) /* ty=(Tensor[(640), float32], Tensor[(324, 1), uint16], Tensor[(4860), uint16], Tensor[(324), float32]) */;
    %443 = right_shift(%436, %437) /* ty=Tensor[(4, 10, 16), uint64] */;
    %444 = %442.0;
    (%443, %444, meta[relay.Constant][13] /* ty=Tensor[(4860), uint16] */, %var_5607)
  };
  %445(%var_5627, %var_5628) /* ty=(Tensor[(4, 10, 16), uint64], Tensor[(640), float32], Tensor[(4860), uint16], Tensor[(324), float32]) */
}

def @func_406() -> (Tensor[(4, 10, 16), float32],) {
  @func_404() /* ty=(Tensor[(4, 10, 16), float32],) */
}

def @func_2137(%var_2125: Tensor[(4860), uint16], %var_2126: Tensor[(324), float32]) -> (Tensor[(640), float32], Tensor[(324, 1), uint16], Tensor[(4860), uint16], Tensor[(324), float32]) {
  %446 = @func_1207() /* ty=(Tensor[(324, 1), uint16], Tensor[(4, 10, 16), int8], Tensor[(640), float32], Tensor[(324, ?), bool], Tensor[(324, 1), float32]) */;
  %447 = cast(%var_2125, dtype="uint16") /* ty=Tensor[(4860), uint16] */;
  %448 = cast(%var_2126, dtype="float32") /* ty=Tensor[(324), float32] */;
  %449 = reshape(%447, newshape=[324, 15]) /* ty=Tensor[(324, 15), uint16] */;
  %450 = reshape(%448, newshape=[9, 9, 4]) /* ty=Tensor[(9, 9, 4), float32] */;
  %451 = @func_1317(%449, %450) /* ty=(Tensor[(324, 15), float64], Tensor[(640), float32], Tensor[(9, 9, 4), float32], Tensor[(9, 9, 4), float64], Tensor[(324, 1), uint16]) */;
  %452 = %446.2;
  %453 = %451.4;
  (%452, %453, %var_2125, %var_2126)
}

def @func_4747() -> (Tensor[(5, 1, 3), float64],) {
  %456 = fn () -> (Tensor[(5, 1, 3), float64],) {
    %454 = @func_4114() /* ty=(Tensor[(9, 9, 4), float32], Tensor[(9, 9, 4), float32], Tensor[(5, 1, 3), float64]) */;
    %455 = %454.2;
    (%455,)
  };
  %456() /* ty=(Tensor[(5, 1, 3), float64],) */
}

def @func_3538() -> (Tensor[(324, 1), uint16],) {
  %457 = @func_1916() /* ty=(Tensor[(4, 10, 16), float64], Tensor[(324, 1), uint16]) */;
  %458 = %457.1;
  (%458,)
}

def @func_6057() -> Tensor[(4, 10, 16), int8] {
  @func_3818() /* ty=Tensor[(4, 10, 16), int8] */
}

def @func_4114() -> (Tensor[(9, 9, 4), float32], Tensor[(9, 9, 4), float32], Tensor[(5, 1, 3), float64]) {
  %459 = @func_871() /* ty=(Tensor[(9, 9, 4), float32],) */;
  %460 = %459.0;
  %461 = cast(%460, dtype="float32") /* ty=Tensor[(9, 9, 4), float32] */;
  %462 = reshape(%461, newshape=[9, 9, 4]) /* ty=Tensor[(9, 9, 4), float32] */;
  %463 = @func_3704(%462) /* ty=(Tensor[(9, 9, 4), float32],) */;
  %464 = @func_2512() /* ty=(Tensor[(5, ?, 3), float64], Tensor[(5, 1, 3), float64], Tensor[(5, ?, 3), int64]) */;
  %465 = %463.0;
  %466 = %464.1;
  (%460, %465, %466)
}

def @func_1209() -> (Tensor[(324, 1), uint16], Tensor[(4, 10, 16), int8], Tensor[(640), float32], Tensor[(324, ?), bool], Tensor[(324, 1), float32]) {
  @func_1207() /* ty=(Tensor[(324, 1), uint16], Tensor[(4, 10, 16), int8], Tensor[(640), float32], Tensor[(324, ?), bool], Tensor[(324, 1), float32]) */
}

def @func_381(%var_379: Tensor[(9, 9, 4), uint16], %var_380: Tensor[(9, 9, 4), uint16]) -> Tensor[(9, 9, 4), uint16] {
  @func_377(%var_379, %var_380) /* ty=Tensor[(9, 9, 4), uint16] */
}

def @func_2898(%var_2895: Tensor[(11, 11, 12), int8], %var_2896: Tensor[(396), float32], %var_2897: Tensor[(396), float32]) -> (Tensor[(324, 1), uint16], Tensor[(396), uint32], Tensor[(11, 11, 12), float32], Tensor[(9, 9, 4), float32], Tensor[(11, 11, 12), float64]) {
  %490 = fn (%var_2842: Tensor[(11, 11, 12), int8], %var_2848: Tensor[(396), float32], %var_2856: Tensor[(396), float32]) -> (Tensor[(324, 1), uint16], Tensor[(396), uint32], Tensor[(11, 11, 12), float32], Tensor[(9, 9, 4), float32], Tensor[(11, 11, 12), float64]) {
    %467 = cast(%var_2848, dtype="float32") /* ty=Tensor[(396), float32] */;
    %468 = reshape(%467, newshape=[396]) /* ty=Tensor[(396), float32] */;
    %469 = @func_1728(%468) /* ty=(Tensor[(4, 10, 16), float32], Tensor[(11, 12, 3), float32], Tensor[(396), float32], Tensor[(324, 1), uint16], Tensor[(144), float64], Tensor[(144), float64]) */;
    %470 = cast(%var_2856, dtype="uint32") /* ty=Tensor[(396), uint32] */;
    %471 = shape_of(%var_2848, dtype="int32") /* ty=Tensor[(1), int32] */;
    %472 = cast(%var_2848, dtype="uint32") /* ty=Tensor[(396), uint32] */;
    %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?), uint32] */;
    %474 = cast(%var_2842, dtype="bool") /* ty=Tensor[(11, 11, 12), bool] */;
    %475 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(11, 11, 12), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %476 = cast(meta[relay.Constant][14] /* ty=Tensor[(11, 11, 12), int8] */, dtype="bool") /* ty=Tensor[(11, 11, 12), bool] */;
    %477 = dyn.reshape(%474, %475, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %478 = not_equal(%476, %477) /* ty=Tensor[(11, 11, 12), bool] */;
    %479 = cast(%478, dtype="float32") /* ty=Tensor[(11, 11, 12), float32] */;
    %480 = shape_of(%var_2842, dtype="int32") /* ty=Tensor[(3), int32] */;
    %481 = cast(%var_2842, dtype="float32") /* ty=Tensor[(11, 11, 12), float32] */;
    %482 = dyn.reshape(%479, %480, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %483 = @func_1434() /* ty=(Tensor[(4, 10, 16), float32], Tensor[(9, 9, 4), float32]) */;
    %484 = cast(meta[relay.Constant][14] /* ty=Tensor[(11, 11, 12), int8] */, dtype="float64") /* ty=Tensor[(11, 11, 12), float64] */;
    %485 = %469.3;
    %486 = bitwise_and(%472, %473) /* ty=Tensor[(396), uint32] */;
    %487 = mod(%481, %482) /* ty=Tensor[(11, 11, 12), float32] */;
    %488 = %483.1;
    %489 = acosh(%484) /* ty=Tensor[(11, 11, 12), float64] */;
    (%485, %486, %487, %488, %489)
  };
  %490(%var_2895, %var_2896, %var_2897) /* ty=(Tensor[(324, 1), uint16], Tensor[(396), uint32], Tensor[(11, 11, 12), float32], Tensor[(9, 9, 4), float32], Tensor[(11, 11, 12), float64]) */
}

def @func_607() -> (Tensor[(324, 1), uint16], Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float32]) {
  %504 = fn () -> (Tensor[(324, 1), uint16], Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float32]) {
    %491 = @func_445() /* ty=(Tensor[(4, 10, 16), float32], Tensor[(9, 9, 4), uint16], Tensor[(324, 1), uint16]) */;
    %492 = %491.2;
    %493 = cast(%492, dtype="uint16") /* ty=Tensor[(324, 1), uint16] */;
    %494 = cast(%492, dtype="uint16") /* ty=Tensor[(324, 1), uint16] */;
    %495 = reshape(%493, newshape=[9, 9, 4]) /* ty=Tensor[(9, 9, 4), uint16] */;
    %496 = reshape(%494, newshape=[9, 9, 4]) /* ty=Tensor[(9, 9, 4), uint16] */;
    %497 = @func_377(%495, %496) /* ty=Tensor[(9, 9, 4), uint16] */;
    %498 = cast(%497, dtype="float32") /* ty=Tensor[(9, 9, 4), float32] */;
    %499 = @func_404() /* ty=(Tensor[(4, 10, 16), float32],) */;
    %500 = @func_551() /* ty=(Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float32]) */;
    %501 = sin(%498) /* ty=Tensor[(9, 9, 4), float32] */;
    %502 = %499.0;
    %503 = %500.0;
    (%492, %501, %502, %503)
  };
  %504() /* ty=(Tensor[(324, 1), uint16], Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float32]) */
}

def @func_4146(%var_4128: Tensor[(10, 5, 16), float64]) -> Tensor[(10, 5, 16), int16] {
  %505 = cast(%var_4128, dtype="float64") /* ty=Tensor[(10, 5, 16), float64] */;
  %506 = log(%505) /* ty=Tensor[(10, 5, 16), float64] */;
  %507 = cast(%var_4128, dtype="bool") /* ty=Tensor[(10, 5, 16), bool] */;
  %508 = shape_of(%506, dtype="int32") /* ty=Tensor[(3), int32] */;
  %509 = cast(%506, dtype="bool") /* ty=Tensor[(10, 5, 16), bool] */;
  %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %511 = equal(%509, %510) /* ty=Tensor[(10, 5, 16), bool] */;
  %512 = cast(%506, dtype="int16") /* ty=Tensor[(10, 5, 16), int16] */;
  %513 = shape_of(%511, dtype="int32") /* ty=Tensor[(3), int32] */;
  %514 = cast(%511, dtype="int16") /* ty=Tensor[(10, 5, 16), int16] */;
  %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  left_shift(%514, %515) /* ty=Tensor[(10, 5, 16), int16] */
}

def @func_4788(%var_4751: Tensor[(12, 13, 8), float64], %var_4777: Tensor[(15), int64]) -> (Tensor[(12, 13, 8), float64], Tensor[(5, ?, 3), int32], Tensor[(15), int64], Tensor[(4, 10, 16), int32], Tensor[(56), int64], Tensor[(1040), float64]) {
  %516 = cast(%var_4751, dtype="float64") /* ty=Tensor[(12, 13, 8), float64] */;
  %517 = rsqrt(%516) /* ty=Tensor[(12, 13, 8), float64] */;
  %518 = cast(%var_4751, dtype="float32") /* ty=Tensor[(12, 13, 8), float32] */;
  %519 = sigmoid(%518) /* ty=Tensor[(12, 13, 8), float32] */;
  %520 = cast(%519, dtype="float64") /* ty=Tensor[(12, 13, 8), float64] */;
  %521 = shape_of(%517, dtype="int32") /* ty=Tensor[(3), int32] */;
  %522 = cast(%517, dtype="float64") /* ty=Tensor[(12, 13, 8), float64] */;
  %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %524 = cast(%var_4777, dtype="int64") /* ty=Tensor[(15), int64] */;
  %525 = reshape(%524, newshape=[5, 1, 3]) /* ty=Tensor[(5, 1, 3), int64] */;
  %526 = @func_769() /* ty=(Tensor[(4, 10, 16), int32], Tensor[(4, 10, 16), float64]) */;
  %527 = cast(meta[relay.Constant][15] /* ty=Tensor[(1040), float64] */, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %528 = cast(meta[relay.Constant][15] /* ty=Tensor[(1040), float64] */, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %529 = reshape(%527, newshape=[1040]) /* ty=Tensor[(1040), float64] */;
  %530 = reshape(%528, newshape=[10, 8, 13]) /* ty=Tensor[(10, 8, 13), float64] */;
  %531 = @func_3615(%529, %530) /* ty=(Tensor[(4, 10, 16), int32], Tensor[(1040), float64], Tensor[(10, 8, 13), bool], Tensor[(324, 1), uint16], int64, Tensor[(56), int64], Tensor[(896), float64], Tensor[(4, 10, 16), float64], Tensor[(4, 10, 16), float32]) */;
  %532 = floor_mod(%522, %523) /* ty=Tensor[(12, 13, 8), float64] */;
  %533 = @func_3482(%525) /* ty=Tensor[(5, ?, 3), int32] */;
  %534 = %526.0;
  %535 = %531.5;
  (%532, %533, %var_4777, %534, %535, meta[relay.Constant][15] /* ty=Tensor[(1040), float64] */)
}

def @func_3515() -> Tensor[(4, 10, 16), float32] {
  %536 = @func_3266() /* ty=(Tensor[(4, 10, 16), float32],) */;
  %536.0
}

def @func_1097() -> (Tensor[(9, 9, 4), float32],) {
  @func_1095() /* ty=(Tensor[(9, 9, 4), float32],) */
}

def @func_4988() -> Tensor[(9, 9, 4), float32] {
  %537 = @func_893() /* ty=(Tensor[(9, 9, 4), float32],) */;
  %537.0
}

def @func_2676() -> (Tensor[(4, 10, 16), float64], Tensor[(4, 10, 16), float32]) {
  %542 = fn () -> (Tensor[(4, 10, 16), float64], Tensor[(4, 10, 16), float32]) {
    %538 = @func_2560() /* ty=(Tensor[(4, 10, 16), float64], Tensor[(4, 10, 16), float32]) */;
    %539 = @func_404() /* ty=(Tensor[(4, 10, 16), float32],) */;
    %540 = %538.0;
    %541 = %539.0;
    (%540, %541)
  };
  %542() /* ty=(Tensor[(4, 10, 16), float64], Tensor[(4, 10, 16), float32]) */
}

def @func_670() -> (Tensor[(9, 9, 4), float32], Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32]) {
  %543 = @func_606() /* ty=(Tensor[(324, 1), uint16], Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float32]) */;
  %544 = @func_606() /* ty=(Tensor[(324, 1), uint16], Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float32]) */;
  %545 = @func_606() /* ty=(Tensor[(324, 1), uint16], Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float32]) */;
  %546 = %543.1;
  %547 = %544.1;
  %548 = %545.2;
  (%546, %547, %548)
}

def @func_1317(%var_1275: Tensor[(324, 15), uint16], %var_1291: Tensor[(9, 9, 4), float32]) -> (Tensor[(324, 15), float64], Tensor[(640), float32], Tensor[(9, 9, 4), float32], Tensor[(9, 9, 4), float64], Tensor[(324, 1), uint16]) {
  %549 = @func_606() /* ty=(Tensor[(324, 1), uint16], Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float32]) */;
  %550 = %549.0;
  %551 = cast(%550, dtype="float64") /* ty=Tensor[(324, 1), float64] */;
  %552 = cast(%var_1275, dtype="float64") /* ty=Tensor[(324, 15), float64] */;
  %553 = cast(meta[relay.Constant][16] /* ty=Tensor[(640), float32] */, dtype="float32") /* ty=Tensor[(640), float32] */;
  %554 = reshape(%553, newshape=[4, 10, 16]) /* ty=Tensor[(4, 10, 16), float32] */;
  %555 = @func_1012(%554) /* ty=(Tensor[(4, 10, 16), int8], Tensor[(9, 9, 4), float32], Tensor[(9, 9, 4), float32]) */;
  %556 = %555.1;
  %557 = cast(%var_1291, dtype="float32") /* ty=Tensor[(9, 9, 4), float32] */;
  %558 = shape_of(%556, dtype="int32") /* ty=Tensor[(3), int32] */;
  %559 = cast(%556, dtype="float32") /* ty=Tensor[(9, 9, 4), float32] */;
  %560 = dyn.reshape(%557, %558, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %561 = cast(%var_1291, dtype="float64") /* ty=Tensor[(9, 9, 4), float64] */;
  %562 = @func_445() /* ty=(Tensor[(4, 10, 16), float32], Tensor[(9, 9, 4), uint16], Tensor[(324, 1), uint16]) */;
  %563 = floor_divide(%551, %552) /* ty=Tensor[(324, 15), float64] */;
  %564 = divide(%559, %560) /* ty=Tensor[(9, 9, 4), float32] */;
  %565 = rsqrt(%561) /* ty=Tensor[(9, 9, 4), float64] */;
  %566 = %562.2;
  (%563, meta[relay.Constant][16] /* ty=Tensor[(640), float32] */, %564, %565, %566)
}

def @func_5058() -> (Tensor[(324, 1), uint16],) {
  %569 = fn () -> (Tensor[(324, 1), uint16],) {
    %567 = @func_445() /* ty=(Tensor[(4, 10, 16), float32], Tensor[(9, 9, 4), uint16], Tensor[(324, 1), uint16]) */;
    %568 = %567.2;
    (%568,)
  };
  %569() /* ty=(Tensor[(324, 1), uint16],) */
}

def @func_6142() -> (Tensor[(324, 1), uint16],) {
  %570 = @func_5057() /* ty=(Tensor[(324, 1), uint16],) */;
  %571 = %570.0;
  (%571,)
}

def @func_3517() -> Tensor[(4, 10, 16), float32] {
  @func_3515() /* ty=Tensor[(4, 10, 16), float32] */
}

def @func_5933() -> (Tensor[(324, 11), float32], Tensor[(9, 9, 4), float32]) {
  @func_5931() /* ty=(Tensor[(324, 11), float32], Tensor[(9, 9, 4), float32]) */
}

def @func_552() -> (Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float32]) {
  %578 = fn () -> (Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float32]) {
    %572 = @func_404() /* ty=(Tensor[(4, 10, 16), float32],) */;
    %573 = @func_404() /* ty=(Tensor[(4, 10, 16), float32],) */;
    %574 = %573.0;
    %575 = cast(%574, dtype="float32") /* ty=Tensor[(4, 10, 16), float32] */;
    %576 = %572.0;
    %577 = atan(%575) /* ty=Tensor[(4, 10, 16), float32] */;
    (%576, %577)
  };
  %578() /* ty=(Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float32]) */
}

def @func_5790() -> (Tensor[(5, 1, 3), float64], Tensor[(4, 10, 16), float32]) {
  %579 = @func_404() /* ty=(Tensor[(4, 10, 16), float32],) */;
  %580 = @func_5042() /* ty=Tensor[(5, 1, 3), float64] */;
  %581 = %579.0;
  (%580, %581)
}

def @func_3382() -> (Tensor[(640), float32], Tensor[(640), float32]) {
  %582 = @func_1207() /* ty=(Tensor[(324, 1), uint16], Tensor[(4, 10, 16), int8], Tensor[(640), float32], Tensor[(324, ?), bool], Tensor[(324, 1), float32]) */;
  %583 = @func_1207() /* ty=(Tensor[(324, 1), uint16], Tensor[(4, 10, 16), int8], Tensor[(640), float32], Tensor[(324, ?), bool], Tensor[(324, 1), float32]) */;
  %584 = %582.2;
  %585 = %583.2;
  (%584, %585)
}

def @func_5998() -> Tensor[(4, 10, 16), float64] {
  @func_5996() /* ty=Tensor[(4, 10, 16), float64] */
}

def @func_446() -> (Tensor[(4, 10, 16), float32], Tensor[(9, 9, 4), uint16], Tensor[(324, 1), uint16]) {
  %593 = fn () -> (Tensor[(4, 10, 16), float32], Tensor[(9, 9, 4), uint16], Tensor[(324, 1), uint16]) {
    %586 = @func_404() /* ty=(Tensor[(4, 10, 16), float32],) */;
    %587 = cast(meta[relay.Constant][17] /* ty=Tensor[(324, 1), uint16] */, dtype="uint16") /* ty=Tensor[(324, 1), uint16] */;
    %588 = cast(meta[relay.Constant][17] /* ty=Tensor[(324, 1), uint16] */, dtype="uint16") /* ty=Tensor[(324, 1), uint16] */;
    %589 = reshape(%587, newshape=[9, 9, 4]) /* ty=Tensor[(9, 9, 4), uint16] */;
    %590 = reshape(%588, newshape=[9, 9, 4]) /* ty=Tensor[(9, 9, 4), uint16] */;
    %591 = %586.0;
    %592 = @func_377(%589, %590) /* ty=Tensor[(9, 9, 4), uint16] */;
    (%591, %592, meta[relay.Constant][17] /* ty=Tensor[(324, 1), uint16] */)
  };
  %593() /* ty=(Tensor[(4, 10, 16), float32], Tensor[(9, 9, 4), uint16], Tensor[(324, 1), uint16]) */
}

def @func_4069(%var_4067: Tensor[(16, 14, 15), bool], %var_4068: Tensor[(16, 14, 15), bool]) -> (Tensor[(9, 9, 4), float32], Tensor[(16, 14, 15), float32], Tensor[(16, 14, 15), float32]) {
  %608 = fn (%var_4024: Tensor[(16, 14, 15), bool], %var_4051: Tensor[(16, 14, 15), bool]) -> (Tensor[(9, 9, 4), float32], Tensor[(16, 14, 15), float32], Tensor[(16, 14, 15), float32]) {
    %594 = @func_893() /* ty=(Tensor[(9, 9, 4), float32],) */;
    %595 = cast(%var_4024, dtype="bool") /* ty=Tensor[(16, 14, 15), bool] */;
    %596 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(16, 14, 15), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %597 = cast(meta[relay.Constant][18] /* ty=Tensor[(16, 14, 15), bool] */, dtype="bool") /* ty=Tensor[(16, 14, 15), bool] */;
    %598 = dyn.reshape(%595, %596, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %599 = logical_and(%597, %598) /* ty=Tensor[(16, 14, 15), bool] */;
    %600 = cast(%var_4051, dtype="float32") /* ty=Tensor[(16, 14, 15), float32] */;
    %601 = shape_of(%599, dtype="int32") /* ty=Tensor[(3), int32] */;
    %602 = cast(%599, dtype="float32") /* ty=Tensor[(16, 14, 15), float32] */;
    %603 = dyn.reshape(%600, %601, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %604 = cast(%599, dtype="float32") /* ty=Tensor[(16, 14, 15), float32] */;
    %605 = %594.0;
    %606 = floor_mod(%602, %603) /* ty=Tensor[(16, 14, 15), float32] */;
    %607 = exp(%604) /* ty=Tensor[(16, 14, 15), float32] */;
    (%605, %606, %607)
  };
  %608(%var_4067, %var_4068) /* ty=(Tensor[(9, 9, 4), float32], Tensor[(16, 14, 15), float32], Tensor[(16, 14, 15), float32]) */
}

def @func_6079() -> Tensor[(4, 10, 16), float32] {
  %609 = @func_606() /* ty=(Tensor[(324, 1), uint16], Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float32]) */;
  %609.2
}

def @func_5740() -> Tensor[(4, 10, 16), int32] {
  %611 = fn () -> Tensor[(4, 10, 16), int32] {
    %610 = @func_769() /* ty=(Tensor[(4, 10, 16), int32], Tensor[(4, 10, 16), float64]) */;
    %610.0
  };
  %611() /* ty=Tensor[(4, 10, 16), int32] */
}

def @func_3053(%var_3050: Tensor[(10, 7, 11), float32], %var_3051: Tensor[(10, 7, 11), float32], %var_3052: Tensor[(10, 7, 11), float32]) -> (Tensor[(10, 7, 11), float32], Tensor[(10, 7, 11), bool], Tensor[(10, 7, 11), uint32], Tensor[(4, 10, 16), float32], Tensor[(5, ?, 3), int64]) {
  @func_3048(%var_3050, %var_3051, %var_3052) /* ty=(Tensor[(10, 7, 11), float32], Tensor[(10, 7, 11), bool], Tensor[(10, 7, 11), uint32], Tensor[(4, 10, 16), float32], Tensor[(5, ?, 3), int64]) */
}

def @func_3619(%var_3617: Tensor[(1040), float64], %var_3618: Tensor[(10, 8, 13), float64]) -> (Tensor[(4, 10, 16), int32], Tensor[(1040), float64], Tensor[(10, 8, 13), bool], Tensor[(324, 1), uint16], int64, Tensor[(56), int64], Tensor[(896), float64], Tensor[(4, 10, 16), float64], Tensor[(4, 10, 16), float32]) {
  @func_3615(%var_3617, %var_3618) /* ty=(Tensor[(4, 10, 16), int32], Tensor[(1040), float64], Tensor[(10, 8, 13), bool], Tensor[(324, 1), uint16], int64, Tensor[(56), int64], Tensor[(896), float64], Tensor[(4, 10, 16), float64], Tensor[(4, 10, 16), float32]) */
}

def @func_1583() -> (Tensor[(9, 9, 4), float32],) {
  %614 = fn () -> (Tensor[(9, 9, 4), float32],) {
    %612 = @func_606() /* ty=(Tensor[(324, 1), uint16], Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float32]) */;
    %613 = %612.1;
    (%613,)
  };
  %614() /* ty=(Tensor[(9, 9, 4), float32],) */
}

def @func_871() -> (Tensor[(9, 9, 4), float32],) {
  %615 = @func_606() /* ty=(Tensor[(324, 1), uint16], Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float32]) */;
  %616 = %615.1;
  (%616,)
}

def @func_5931() -> (Tensor[(324, 11), float32], Tensor[(9, 9, 4), float32]) {
  %617 = @func_3538() /* ty=(Tensor[(324, 1), uint16],) */;
  %618 = %617.0;
  %619 = cast(%618, dtype="float32") /* ty=Tensor[(324, 1), float32] */;
  %620 = cast(meta[relay.Constant][19] /* ty=Tensor[(324, 11), uint16] */, dtype="float32") /* ty=Tensor[(324, 11), float32] */;
  %621 = @func_4432() /* ty=(Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32], Tensor[(77), float64]) */;
  %622 = divide(%619, %620) /* ty=Tensor[(324, 11), float32] */;
  %623 = %621.0;
  (%622, %623)
}

def @func_630(%var_629: Tensor[(144), float64]) -> (Tensor[(9, 9, 4), uint16], Tensor[(9, 8, 2), float64], Tensor[(144), float64]) {
  %630 = fn (%var_623: Tensor[(144), float64]) -> (Tensor[(9, 9, 4), uint16], Tensor[(9, 8, 2), float64], Tensor[(144), float64]) {
    %624 = @func_445() /* ty=(Tensor[(4, 10, 16), float32], Tensor[(9, 9, 4), uint16], Tensor[(324, 1), uint16]) */;
    %625 = cast(%var_623, dtype="float64") /* ty=Tensor[(144), float64] */;
    %626 = reshape(%625, newshape=[9, 8, 2]) /* ty=Tensor[(9, 8, 2), float64] */;
    %627 = @func_501(%626) /* ty=(Tensor[(9, 8, 2), float64], Tensor[(9, 9, 4), uint16], Tensor[(324, 1), uint16], Tensor[(9, 9, 4), uint16]) */;
    %628 = %624.1;
    %629 = %627.0;
    (%628, %629, %var_623)
  };
  %630(%var_629) /* ty=(Tensor[(9, 9, 4), uint16], Tensor[(9, 8, 2), float64], Tensor[(144), float64]) */
}

def @func_3704(%var_3684: Tensor[(9, 9, 4), float32]) -> (Tensor[(9, 9, 4), float32],) {
  %631 = @func_1095() /* ty=(Tensor[(9, 9, 4), float32],) */;
  %632 = %631.0;
  %633 = cast(%var_3684, dtype="int16") /* ty=Tensor[(9, 9, 4), int16] */;
  %634 = shape_of(%632, dtype="int32") /* ty=Tensor[(3), int32] */;
  %635 = cast(%632, dtype="int16") /* ty=Tensor[(9, 9, 4), int16] */;
  %636 = dyn.reshape(%633, %634, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %637 = logical_xor(%635, %636) /* ty=Tensor[(9, 9, 4), int16] */;
  %638 = cast(%637, dtype="float32") /* ty=Tensor[(9, 9, 4), float32] */;
  %639 = sinh(%638) /* ty=Tensor[(9, 9, 4), float32] */;
  (%639,)
}

def @func_5417() -> (Tensor[(4, 10, 16), float64], Tensor[(9, 9, 4), float64]) {
  @func_5415() /* ty=(Tensor[(4, 10, 16), float64], Tensor[(9, 9, 4), float64]) */
}

def @func_3779() -> (Tensor[(9, 9, 4), float32],) {
  @func_3777() /* ty=(Tensor[(9, 9, 4), float32],) */
}

def @func_1207() -> (Tensor[(324, 1), uint16], Tensor[(4, 10, 16), int8], Tensor[(640), float32], Tensor[(324, ?), bool], Tensor[(324, 1), float32]) {
  %640 = @func_445() /* ty=(Tensor[(4, 10, 16), float32], Tensor[(9, 9, 4), uint16], Tensor[(324, 1), uint16]) */;
  %641 = cast(meta[relay.Constant][20] /* ty=Tensor[(640), float32] */, dtype="float32") /* ty=Tensor[(640), float32] */;
  %642 = reshape(%641, newshape=[4, 10, 16]) /* ty=Tensor[(4, 10, 16), float32] */;
  %643 = @func_1012(%642) /* ty=(Tensor[(4, 10, 16), int8], Tensor[(9, 9, 4), float32], Tensor[(9, 9, 4), float32]) */;
  %644 = @func_445() /* ty=(Tensor[(4, 10, 16), float32], Tensor[(9, 9, 4), uint16], Tensor[(324, 1), uint16]) */;
  %645 = %644.2;
  %646 = cast(%645, dtype="float32") /* ty=Tensor[(324, 1), float32] */;
  %647 = tan(%646) /* ty=Tensor[(324, 1), float32] */;
  %648 = cast(%645, dtype="bool") /* ty=Tensor[(324, 1), bool] */;
  %649 = shape_of(%647, dtype="int32") /* ty=Tensor[(2), int32] */;
  %650 = cast(%647, dtype="bool") /* ty=Tensor[(324, 1), bool] */;
  %651 = dyn.reshape(%648, %649, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %652 = cast(%647, dtype="float64") /* ty=Tensor[(324, 1), float64] */;
  %653 = asinh(%652) /* ty=Tensor[(324, 1), float64] */;
  %654 = cast(%653, dtype="float32") /* ty=Tensor[(324, 1), float32] */;
  %655 = %640.2;
  %656 = %643.0;
  %657 = logical_or(%650, %651) /* ty=Tensor[(324, ?), bool] */;
  %658 = atanh(%654) /* ty=Tensor[(324, 1), float32] */;
  (%655, %656, meta[relay.Constant][20] /* ty=Tensor[(640), float32] */, %657, %658)
}

def @func_2760(%var_2758: Tensor[(5, 2, 2), float32], %var_2759: Tensor[(324), float32]) -> (Tensor[(5, 2, 2), bool], Tensor[(4, 10, 16), float32], Tensor[(324), float32], Tensor[(4860), uint16], Tensor[(324), float32]) {
  %674 = fn (%var_2698: Tensor[(5, 2, 2), float32], %var_2731: Tensor[(324), float32]) -> (Tensor[(5, 2, 2), bool], Tensor[(4, 10, 16), float32], Tensor[(324), float32], Tensor[(4860), uint16], Tensor[(324), float32]) {
    %659 = cast(%var_2698, dtype="float32") /* ty=Tensor[(5, 2, 2), float32] */;
    %660 = cos(%659) /* ty=Tensor[(5, 2, 2), float32] */;
    %661 = cast(%660, dtype="bool") /* ty=Tensor[(5, 2, 2), bool] */;
    %662 = shape_of(%var_2698, dtype="int32") /* ty=Tensor[(3), int32] */;
    %663 = cast(%var_2698, dtype="bool") /* ty=Tensor[(5, 2, 2), bool] */;
    %664 = dyn.reshape(%661, %662, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %665 = @func_670() /* ty=(Tensor[(9, 9, 4), float32], Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32]) */;
    %666 = cast(meta[relay.Constant][21] /* ty=Tensor[(4860), uint16] */, dtype="uint16") /* ty=Tensor[(4860), uint16] */;
    %667 = cast(%var_2731, dtype="float32") /* ty=Tensor[(324), float32] */;
    %668 = reshape(%666, newshape=[4860]) /* ty=Tensor[(4860), uint16] */;
    %669 = reshape(%667, newshape=[324]) /* ty=Tensor[(324), float32] */;
    %670 = @func_2137(%668, %669) /* ty=(Tensor[(640), float32], Tensor[(324, 1), uint16], Tensor[(4860), uint16], Tensor[(324), float32]) */;
    %671 = equal(%663, %664) /* ty=Tensor[(5, 2, 2), bool] */;
    %672 = %665.2;
    %673 = %670.3;
    (%671, %672, %673, meta[relay.Constant][21] /* ty=Tensor[(4860), uint16] */, %var_2731)
  };
  %674(%var_2758, %var_2759) /* ty=(Tensor[(5, 2, 2), bool], Tensor[(4, 10, 16), float32], Tensor[(324), float32], Tensor[(4860), uint16], Tensor[(324), float32]) */
}

def @func_894() -> (Tensor[(9, 9, 4), float32],) {
  %677 = fn () -> (Tensor[(9, 9, 4), float32],) {
    %675 = @func_871() /* ty=(Tensor[(9, 9, 4), float32],) */;
    %676 = %675.0;
    (%676,)
  };
  %677() /* ty=(Tensor[(9, 9, 4), float32],) */
}

def @func_5430() -> (Tensor[(9, 9, 4), float32],) {
  %680 = fn () -> (Tensor[(9, 9, 4), float32],) {
    %678 = @func_1095() /* ty=(Tensor[(9, 9, 4), float32],) */;
    %679 = %678.0;
    (%679,)
  };
  %680() /* ty=(Tensor[(9, 9, 4), float32],) */
}

def @func_5729() -> (Tensor[(5, ?, 3), float64], Tensor[(10, 5, 16), int16], Tensor[(4, 200), float64]) {
  %686 = fn () -> (Tensor[(5, ?, 3), float64], Tensor[(10, 5, 16), int16], Tensor[(4, 200), float64]) {
    %681 = @func_2512() /* ty=(Tensor[(5, ?, 3), float64], Tensor[(5, 1, 3), float64], Tensor[(5, ?, 3), int64]) */;
    %682 = cast(meta[relay.Constant][22] /* ty=Tensor[(4, 200), float64] */, dtype="float64") /* ty=Tensor[(4, 200), float64] */;
    %683 = reshape(%682, newshape=[10, 5, 16]) /* ty=Tensor[(10, 5, 16), float64] */;
    %684 = %681.0;
    %685 = @func_4146(%683) /* ty=Tensor[(10, 5, 16), int16] */;
    (%684, %685, meta[relay.Constant][22] /* ty=Tensor[(4, 200), float64] */)
  };
  %686() /* ty=(Tensor[(5, ?, 3), float64], Tensor[(10, 5, 16), int16], Tensor[(4, 200), float64]) */
}

def @func_770() -> (Tensor[(4, 10, 16), int32], Tensor[(4, 10, 16), float64]) {
  %696 = fn () -> (Tensor[(4, 10, 16), int32], Tensor[(4, 10, 16), float64]) {
    %687 = @func_404() /* ty=(Tensor[(4, 10, 16), float32],) */;
    %688 = %687.0;
    %689 = cast(meta[relay.Constant][23] /* ty=Tensor[(4, 10, 16), float32] */, dtype="int32") /* ty=Tensor[(4, 10, 16), int32] */;
    %690 = shape_of(%688, dtype="int32") /* ty=Tensor[(3), int32] */;
    %691 = cast(%688, dtype="int32") /* ty=Tensor[(4, 10, 16), int32] */;
    %692 = dyn.reshape(%689, %690, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %693 = cast(meta[relay.Constant][23] /* ty=Tensor[(4, 10, 16), float32] */, dtype="float64") /* ty=Tensor[(4, 10, 16), float64] */;
    %694 = subtract(%691, %692) /* ty=Tensor[(4, 10, 16), int32] */;
    %695 = log(%693) /* ty=Tensor[(4, 10, 16), float64] */;
    (%694, %695)
  };
  %696() /* ty=(Tensor[(4, 10, 16), int32], Tensor[(4, 10, 16), float64]) */
}

def @func_3615(%var_3573: Tensor[(1040), float64], %var_3583: Tensor[(10, 8, 13), float64]) -> (Tensor[(4, 10, 16), int32], Tensor[(1040), float64], Tensor[(10, 8, 13), bool], Tensor[(324, 1), uint16], int64, Tensor[(56), int64], Tensor[(896), float64], Tensor[(4, 10, 16), float64], Tensor[(4, 10, 16), float32]) {
  %697 = @func_769() /* ty=(Tensor[(4, 10, 16), int32], Tensor[(4, 10, 16), float64]) */;
  %698 = cast(meta[relay.Constant][24] /* ty=Tensor[(1040), float64] */, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %699 = shape_of(%var_3573, dtype="int32") /* ty=Tensor[(1), int32] */;
  %700 = cast(%var_3573, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %701 = dyn.reshape(%698, %699, newshape=[]) /* ty=Tensor[(?), float64] */;
  %702 = cast(%var_3573, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %703 = reshape(%702, newshape=[10, 8, 13]) /* ty=Tensor[(10, 8, 13), float64] */;
  %704 = @func_1809(%703) /* ty=(Tensor[(10, 8, 13), float64],) */;
  %705 = %704.0;
  %706 = cast(%var_3583, dtype="bool") /* ty=Tensor[(10, 8, 13), bool] */;
  %707 = shape_of(%705, dtype="int32") /* ty=Tensor[(3), int32] */;
  %708 = cast(%705, dtype="bool") /* ty=Tensor[(10, 8, 13), bool] */;
  %709 = dyn.reshape(%706, %707, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %710 = cast(1 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %711 = cast(meta[relay.Constant][25] /* ty=Tensor[(56), int64] */, dtype="int64") /* ty=Tensor[(56), int64] */;
  %712 = cast(meta[relay.Constant][26] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
  %713 = reshape(%710, newshape=[]) /* ty=int64 */;
  %714 = reshape(%711, newshape=[7, 8, 1]) /* ty=Tensor[(7, 8, 1), int64] */;
  %715 = reshape(%712, newshape=[7, 8, 16]) /* ty=Tensor[(7, 8, 16), float64] */;
  %716 = @func_2354(%713, %714, %715) /* ty=(Tensor[(324, 1), uint16], Tensor[(7, 8, ?), uint16], Tensor[(9, 9, 4), float32], Tensor[(7, 8, ?), float32], Tensor[(7, 8, 16), uint32]) */;
  %717 = @func_2675() /* ty=(Tensor[(4, 10, 16), float64], Tensor[(4, 10, 16), float32]) */;
  %718 = @func_404() /* ty=(Tensor[(4, 10, 16), float32],) */;
  %719 = %697.0;
  %720 = floor_divide(%700, %701) /* ty=Tensor[(1040), float64] */;
  %721 = logical_and(%708, %709) /* ty=Tensor[(10, 8, 13), bool] */;
  %722 = %716.0;
  %723 = %717.0;
  %724 = %718.0;
  (%719, %720, %721, %722, 1 /* ty=int64 */, meta[relay.Constant][25] /* ty=Tensor[(56), int64] */, meta[relay.Constant][26] /* ty=Tensor[(896), float64] */, %723, %724)
}

def @func_1487() -> Tensor[(324, 1), uint16] {
  @func_1485() /* ty=Tensor[(324, 1), uint16] */
}

def @func_2368() -> Tensor[(324, 1), uint16] {
  %726 = fn () -> Tensor[(324, 1), uint16] {
    %725 = @func_1344() /* ty=(Tensor[(324, 1), uint16],) */;
    %725.0
  };
  %726() /* ty=Tensor[(324, 1), uint16] */
}

def @func_4792(%var_4790: Tensor[(12, 13, 8), float64], %var_4791: Tensor[(15), int64]) -> (Tensor[(12, 13, 8), float64], Tensor[(5, ?, 3), int32], Tensor[(15), int64], Tensor[(4, 10, 16), int32], Tensor[(56), int64], Tensor[(1040), float64]) {
  @func_4788(%var_4790, %var_4791) /* ty=(Tensor[(12, 13, 8), float64], Tensor[(5, ?, 3), int32], Tensor[(15), int64], Tensor[(4, 10, 16), int32], Tensor[(56), int64], Tensor[(1040), float64]) */
}

def @func_5077() -> (Tensor[(3, 14, 13), float64], Tensor[(324, 1), uint16]) {
  %731 = fn () -> (Tensor[(3, 14, 13), float64], Tensor[(324, 1), uint16]) {
    %727 = cast(meta[relay.Constant][27] /* ty=Tensor[(3, 14, 13), float64] */, dtype="float64") /* ty=Tensor[(3, 14, 13), float64] */;
    %728 = @func_5057() /* ty=(Tensor[(324, 1), uint16],) */;
    %729 = sigmoid(%727) /* ty=Tensor[(3, 14, 13), float64] */;
    %730 = %728.0;
    (%729, %730)
  };
  %731() /* ty=(Tensor[(3, 14, 13), float64], Tensor[(324, 1), uint16]) */
}

def @func_1012(%var_948: Tensor[(4, 10, 16), float32]) -> (Tensor[(4, 10, 16), int8], Tensor[(9, 9, 4), float32], Tensor[(9, 9, 4), float32]) {
  %732 = @func_606() /* ty=(Tensor[(324, 1), uint16], Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float32]) */;
  %733 = %732.2;
  %734 = cast(%733, dtype="float64") /* ty=Tensor[(4, 10, 16), float64] */;
  %735 = cosh(%734) /* ty=Tensor[(4, 10, 16), float64] */;
  %736 = cast(%var_948, dtype="bool") /* ty=Tensor[(4, 10, 16), bool] */;
  %737 = shape_of(%733, dtype="int32") /* ty=Tensor[(3), int32] */;
  %738 = cast(%733, dtype="bool") /* ty=Tensor[(4, 10, 16), bool] */;
  %739 = dyn.reshape(%736, %737, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %740 = less_equal(%738, %739) /* ty=Tensor[(4, 10, 16), bool] */;
  %741 = cast(%740, dtype="int8") /* ty=Tensor[(4, 10, 16), int8] */;
  %742 = shape_of(%735, dtype="int32") /* ty=Tensor[(3), int32] */;
  %743 = cast(%735, dtype="int8") /* ty=Tensor[(4, 10, 16), int8] */;
  %744 = dyn.reshape(%741, %742, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %745 = @func_871() /* ty=(Tensor[(9, 9, 4), float32],) */;
  %746 = @func_670() /* ty=(Tensor[(9, 9, 4), float32], Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32]) */;
  %747 = bitwise_xor(%743, %744) /* ty=Tensor[(4, 10, 16), int8] */;
  %748 = %745.0;
  %749 = %746.1;
  (%747, %748, %749)
}

def @func_404() -> (Tensor[(4, 10, 16), float32],) {
  %750 = cast(meta[relay.Constant][28] /* ty=Tensor[(4, 10, 16), float32] */, dtype="float32") /* ty=Tensor[(4, 10, 16), float32] */;
  %751 = log2(%750) /* ty=Tensor[(4, 10, 16), float32] */;
  (%751,)
}

def @func_2096() -> (Tensor[(4, 10, 16), float32],) {
  %754 = fn () -> (Tensor[(4, 10, 16), float32],) {
    %752 = @func_445() /* ty=(Tensor[(4, 10, 16), float32], Tensor[(9, 9, 4), uint16], Tensor[(324, 1), uint16]) */;
    %753 = %752.0;
    (%753,)
  };
  %754() /* ty=(Tensor[(4, 10, 16), float32],) */
}

def @func_2141(%var_2139: Tensor[(4860), uint16], %var_2140: Tensor[(324), float32]) -> (Tensor[(640), float32], Tensor[(324, 1), uint16], Tensor[(4860), uint16], Tensor[(324), float32]) {
  @func_2137(%var_2139, %var_2140) /* ty=(Tensor[(640), float32], Tensor[(324, 1), uint16], Tensor[(4860), uint16], Tensor[(324), float32]) */
}

def @func_1916() -> (Tensor[(4, 10, 16), float64], Tensor[(324, 1), uint16]) {
  %755 = @func_1434() /* ty=(Tensor[(4, 10, 16), float32], Tensor[(9, 9, 4), float32]) */;
  %756 = %755.0;
  %757 = cast(%756, dtype="float64") /* ty=Tensor[(4, 10, 16), float64] */;
  %758 = @func_606() /* ty=(Tensor[(324, 1), uint16], Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32], Tensor[(4, 10, 16), float32]) */;
  %759 = acos(%757) /* ty=Tensor[(4, 10, 16), float64] */;
  %760 = %758.0;
  (%759, %760)
}

def @func_5362(%var_5361: Tensor[(324, 13), uint16]) -> (Tensor[(324, 13), float64],) {
  %768 = fn (%var_5350: Tensor[(324, 13), uint16]) -> (Tensor[(324, 13), float64],) {
    %761 = @func_1916() /* ty=(Tensor[(4, 10, 16), float64], Tensor[(324, 1), uint16]) */;
    %762 = %761.1;
    %763 = cast(%762, dtype="uint8") /* ty=Tensor[(324, 1), uint8] */;
    %764 = cast(%var_5350, dtype="uint8") /* ty=Tensor[(324, 13), uint8] */;
    %765 = bitwise_or(%763, %764) /* ty=Tensor[(324, 13), uint8] */;
    %766 = cast(%765, dtype="float64") /* ty=Tensor[(324, 13), float64] */;
    %767 = cosh(%766) /* ty=Tensor[(324, 13), float64] */;
    (%767,)
  };
  %768(%var_5361) /* ty=(Tensor[(324, 13), float64],) */
}

def @func_1638() -> (Tensor[(4, 10, 16), float64],) {
  %771 = fn () -> (Tensor[(4, 10, 16), float64],) {
    %769 = @func_769() /* ty=(Tensor[(4, 10, 16), int32], Tensor[(4, 10, 16), float64]) */;
    %770 = %769.1;
    (%770,)
  };
  %771() /* ty=(Tensor[(4, 10, 16), float64],) */
}

def @func_672() -> (Tensor[(9, 9, 4), float32], Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32]) {
  @func_670() /* ty=(Tensor[(9, 9, 4), float32], Tensor[(9, 9, 4), float32], Tensor[(4, 10, 16), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen420/build/output.py", line 2017, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:15:56] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

