==========mod==========
#[version = "0.0.5"]
def @func_6508(%var_6503: float32, %var_6504: Tensor[(9, 10, 5), float32]) -> Tensor[(9, 10, 5), float32] {
  %0 = cast(%var_6503, dtype="float32") /* ty=float32 */;
  %1 = cast(%var_6504, dtype="float32") /* ty=Tensor[(9, 10, 5), float32] */;
  divide(%0, %1) /* ty=Tensor[(9, 10, 5), float32] */
}

def @func_2597() -> (Tensor[(10, 3, 8), float32],) {
  %2 = @func_1636() /* ty=Tensor[(10, 3, 8), float32] */;
  (%2,)
}

def @func_4638(%var_4604: Tensor[(14, 42), float64], %var_4634: uint8, %var_4635: Tensor[(2184), uint8]) -> (Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(14, 42), float64], Tensor[(14, 13, 12), float64], uint8, Tensor[(2184), uint8]) {
  %3 = @func_4315() /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), int16]) */;
  %4 = cast(%var_4604, dtype="float64") /* ty=Tensor[(14, 42), float64] */;
  %5 = reshape(%4, newshape=[588]) /* ty=Tensor[(588), float64] */;
  %6 = @func_1298(%5) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(42), float64], Tensor[(588), float64], Tensor[(42), float64], Tensor[(14, ?, 3), bool]) */;
  %7 = cast(%var_4634, dtype="uint8") /* ty=uint8 */;
  %8 = cast(%var_4635, dtype="uint8") /* ty=Tensor[(2184), uint8] */;
  %9 = reshape(%7, newshape=[]) /* ty=uint8 */;
  %10 = reshape(%8, newshape=[14, 13, 12]) /* ty=Tensor[(14, 13, 12), uint8] */;
  %11 = @func_1515(%9, %10) /* ty=(Tensor[(14, 13, 12), float64],) */;
  %12 = %3.0;
  %13 = %6.0;
  %14 = %11.0;
  (%12, %13, %var_4604, %14, %var_4634, %var_4635)
}

def @func_8265(%var_8254: Tensor[(312), float64]) -> (Tensor[(8, 12, 3), bool], Tensor[(10, 3, 8), float32], Tensor[(546, 1), float64], Tensor[(312), float64]) {
  %15 = @func_3597() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %16 = cast(%var_8254, dtype="float64") /* ty=Tensor[(312), float64] */;
  %17 = reshape(%16, newshape=[312]) /* ty=Tensor[(312), float64] */;
  %18 = @func_5050(%17) /* ty=(Tensor[(8, 12, 3), bool], Tensor[(10, 3, 8), float64], Tensor[(312), float64], Tensor[(312), float64], Tensor[(546, 1), float64], Tensor[(546, 1), float64]) */;
  %19 = @func_5821() /* ty=Tensor[(8, 12, 3), bool] */;
  %20 = %15.0;
  %21 = %18.4;
  (%19, %20, %21, %var_8254)
}

def @func_121(%var_112: Tensor[(14, 1, 3), float64]) -> (Tensor[(14, ?, 3), bool],) {
  %22 = cast(%var_112, dtype="float64") /* ty=Tensor[(14, 1, 3), float64] */;
  %23 = sinh(%22) /* ty=Tensor[(14, 1, 3), float64] */;
  %24 = cast(%var_112, dtype="bool") /* ty=Tensor[(14, 1, 3), bool] */;
  %25 = shape_of(%23, dtype="int32") /* ty=Tensor[(3), int32] */;
  %26 = cast(%23, dtype="bool") /* ty=Tensor[(14, 1, 3), bool] */;
  %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %28 = not_equal(%26, %27) /* ty=Tensor[(14, ?, 3), bool] */;
  (%28,)
}

def @func_2524() -> (Tensor[(10, 3, 8), float64], Tensor[(10, 3, 8), float32]) {
  %29 = @func_1166() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %30 = %29.0;
  %31 = cast(%30, dtype="float64") /* ty=Tensor[(10, 3, 8), float64] */;
  %32 = @func_1166() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %33 = acos(%31) /* ty=Tensor[(10, 3, 8), float64] */;
  %34 = %32.0;
  (%33, %34)
}

def @func_8599() -> (Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32]) {
  %35 = @func_2597() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %36 = @func_7508() /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32]) */;
  %37 = %35.0;
  %38 = %36.1;
  %39 = @func_1636() /* ty=Tensor[(10, 3, 8), float32] */;
  (%37, %38, %39)
}

def @func_2170(%var_2129: Tensor[(32), uint16]) -> (Tensor[(10, 3, 8), float32], Tensor[(42), float64], Tensor[(32), uint16], Tensor[(288, 1), uint16], Tensor[(588, 1), float64], Tensor[(14, ?, 3), bool]) {
  %40 = @func_1166() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %41 = cast(%var_2129, dtype="uint16") /* ty=Tensor[(32), uint16] */;
  %42 = cast(meta[relay.Constant][0] /* ty=Tensor[(288, 1), uint16] */, dtype="uint16") /* ty=Tensor[(288, 1), uint16] */;
  %43 = cast(meta[relay.Constant][1] /* ty=Tensor[(588, 1), float64] */, dtype="float64") /* ty=Tensor[(588, 1), float64] */;
  %44 = reshape(%41, newshape=[1, 4, 8]) /* ty=Tensor[(1, 4, 8), uint16] */;
  %45 = reshape(%42, newshape=[9, 4, 8]) /* ty=Tensor[(9, 4, 8), uint16] */;
  %46 = reshape(%43, newshape=[588]) /* ty=Tensor[(588), float64] */;
  %47 = @func_552(%44, %45, %46) /* ty=(Tensor[(588), float64], Tensor[(42), float64], Tensor[(9, 4, 8), int32], Tensor[(14, ?, 3), float32]) */;
  %48 = cast(meta[relay.Constant][1] /* ty=Tensor[(588, 1), float64] */, dtype="float64") /* ty=Tensor[(588, 1), float64] */;
  %49 = reshape(%48, newshape=[588]) /* ty=Tensor[(588), float64] */;
  %50 = @func_1298(%49) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(42), float64], Tensor[(588), float64], Tensor[(42), float64], Tensor[(14, ?, 3), bool]) */;
  %51 = %40.0;
  %52 = %47.1;
  %53 = %50.4;
  (%51, %52, %var_2129, meta[relay.Constant][0] /* ty=Tensor[(288, 1), uint16] */, meta[relay.Constant][1] /* ty=Tensor[(588, 1), float64] */, %53)
}

def @func_3528() -> Tensor[(8, 12, 3), bool] {
  @func_3146() /* ty=Tensor[(8, 12, 3), bool] */
}

def @func_5184(%var_5167: Tensor[(65, 7), float32], %var_5171: Tensor[(90), float32]) -> (Tensor[(10, 3, 8), float32], Tensor[(7, 13, 5), float32], Tensor[(65, 7), float32], Tensor[(588), float64], Tensor[(90), float32]) {
  %54 = @func_1175() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %55 = cast(%var_5167, dtype="float32") /* ty=Tensor[(65, 7), float32] */;
  %56 = reshape(%55, newshape=[7, 13, 5]) /* ty=Tensor[(7, 13, 5), float32] */;
  %57 = cast(%var_5171, dtype="float32") /* ty=Tensor[(90), float32] */;
  %58 = reshape(%57, newshape=[3, 6, 5]) /* ty=Tensor[(3, 6, 5), float32] */;
  %59 = @func_938(%58) /* ty=(Tensor[(588), float64], Tensor[(8, 4), uint16], Tensor[(288), uint16], Tensor[(588), float64], Tensor[(3, 6, 5), float64]) */;
  %60 = %54.0;
  %61 = @func_3935(%56) /* ty=Tensor[(7, 13, 5), float32] */;
  %62 = %59.0;
  (%60, %61, %var_5167, %62, %var_5171)
}

def @func_3581() -> (Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32]) {
  %63 = @func_2524() /* ty=(Tensor[(10, 3, 8), float64], Tensor[(10, 3, 8), float32]) */;
  %64 = @func_3504() /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32]) */;
  %65 = %63.1;
  %66 = %64.1;
  (%65, %66)
}

def @func_1230() -> (Tensor[(10, 3, 8), float32],) {
  %67 = @func_1175() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %68 = %67.0;
  (%68,)
}

def @func_8044() -> (Tensor[(10, 3, 8), float32],) {
  %69 = @func_4974() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %70 = %69.0;
  (%70,)
}

def @func_7367(%var_7337: Tensor[(13, 10, 5), int64], %var_7338: Tensor[(13, 10, 5), int64]) -> (Tensor[(13, 10, 5), int64],) {
  %71 = cast(%var_7338, dtype="int64") /* ty=Tensor[(13, 10, 5), int64] */;
  %72 = shape_of(%var_7337, dtype="int32") /* ty=Tensor[(3), int32] */;
  %73 = cast(%var_7337, dtype="int64") /* ty=Tensor[(13, 10, 5), int64] */;
  %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %75 = subtract(%73, %74) /* ty=Tensor[(13, 10, 5), int64] */;
  (%75,)
}

def @func_2270(%var_2187: Tensor[(312), float64], %var_2240: Tensor[(42), float64]) -> (Tensor[(13, 2, 12), float64], Tensor[(312), float64], Tensor[(10, 3, 8), float32], Tensor[(588), float64], Tensor[(90), float32], Tensor[(3, 6, 5), float64], Tensor[(14, ?, 3), bool], Tensor[(42), float64], Tensor[(14, ?, 3), bool], Tensor[(10, 3, 8), float32], Tensor[(15, 3, 6), float32]) {
  %76 = cast(%var_2187, dtype="float64") /* ty=Tensor[(312), float64] */;
  %77 = reshape(%76, newshape=[13, 2, 12]) /* ty=Tensor[(13, 2, 12), float64] */;
  %78 = @func_1175() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %79 = cast(meta[relay.Constant][2] /* ty=Tensor[(90), float32] */, dtype="float32") /* ty=Tensor[(90), float32] */;
  %80 = reshape(%79, newshape=[3, 6, 5]) /* ty=Tensor[(3, 6, 5), float32] */;
  %81 = @func_938(%80) /* ty=(Tensor[(588), float64], Tensor[(8, 4), uint16], Tensor[(288), uint16], Tensor[(588), float64], Tensor[(3, 6, 5), float64]) */;
  %82 = cast(meta[relay.Constant][2] /* ty=Tensor[(90), float32] */, dtype="float32") /* ty=Tensor[(90), float32] */;
  %83 = reshape(%82, newshape=[3, 6, 5]) /* ty=Tensor[(3, 6, 5), float32] */;
  %84 = @func_938(%83) /* ty=(Tensor[(588), float64], Tensor[(8, 4), uint16], Tensor[(288), uint16], Tensor[(588), float64], Tensor[(3, 6, 5), float64]) */;
  %85 = cast(%var_2240, dtype="float64") /* ty=Tensor[(42), float64] */;
  %86 = reshape(%85, newshape=[14, 1, 3]) /* ty=Tensor[(14, 1, 3), float64] */;
  %87 = @func_121(%86) /* ty=(Tensor[(14, ?, 3), bool],) */;
  %88 = %87.0;
  %89 = cast(%88, dtype="float64") /* ty=Tensor[(14, ?, 3), float64] */;
  %90 = reshape(%89, newshape=[14, 1, 3]) /* ty=Tensor[(14, 1, 3), float64] */;
  %91 = @func_121(%90) /* ty=(Tensor[(14, ?, 3), bool],) */;
  %92 = @func_1452() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %93 = cast(meta[relay.Constant][3] /* ty=Tensor[(15, 3, 6), float64] */, dtype="float64") /* ty=Tensor[(15, 3, 6), float64] */;
  %94 = log10(%93) /* ty=Tensor[(15, 3, 6), float64] */;
  %95 = cast(%94, dtype="float64") /* ty=Tensor[(15, 3, 6), float64] */;
  %96 = log2(%95) /* ty=Tensor[(15, 3, 6), float64] */;
  %97 = cast(meta[relay.Constant][3] /* ty=Tensor[(15, 3, 6), float64] */, dtype="float32") /* ty=Tensor[(15, 3, 6), float32] */;
  %98 = shape_of(%96, dtype="int32") /* ty=Tensor[(3), int32] */;
  %99 = cast(%96, dtype="float32") /* ty=Tensor[(15, 3, 6), float32] */;
  %100 = dyn.reshape(%97, %98, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %101 = @func_438(%77) /* ty=Tensor[(13, 2, 12), float64] */;
  %102 = %78.0;
  %103 = %81.3;
  %104 = %84.4;
  %105 = %91.0;
  %106 = %92.0;
  %107 = divide(%99, %100) /* ty=Tensor[(15, 3, 6), float32] */;
  (%101, %var_2187, %102, %103, meta[relay.Constant][2] /* ty=Tensor[(90), float32] */, %104, %88, %var_2240, %105, %106, %107)
}

def @func_4974() -> (Tensor[(10, 3, 8), float32],) {
  %108 = @func_1636() /* ty=Tensor[(10, 3, 8), float32] */;
  (%108,)
}

def @func_4100() -> (Tensor[(10, 3, 8), float32],) {
  %109 = @func_1865() /* ty=Tensor[(10, 3, 8), float32] */;
  (%109,)
}

def @func_7391() -> (Tensor[(10, 3, 8), float32],) {
  %110 = @func_1175() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %111 = %110.0;
  (%111,)
}

def @func_2440() -> Tensor[(10, 3, 8), float32] {
  %112 = @func_1175() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %112.0
}

def @func_3297(%var_3282: Tensor[(3, 5, 11), int16]) -> Tensor[(3, 5, 11), bool] {
  %113 = cast(meta[relay.Constant][4] /* ty=Tensor[(3, 5, 1), int16] */, dtype="bool") /* ty=Tensor[(3, 5, 1), bool] */;
  %114 = cast(%var_3282, dtype="bool") /* ty=Tensor[(3, 5, 11), bool] */;
  less(%113, %114) /* ty=Tensor[(3, 5, 11), bool] */
}

def @func_2398(%var_2376: int64) -> Tensor[(5, 12, 5), uint8] {
  %115 = cast(%var_2376, dtype="bool") /* ty=bool */;
  %116 = cast(meta[relay.Constant][5] /* ty=Tensor[(5, 12, 5), int64] */, dtype="bool") /* ty=Tensor[(5, 12, 5), bool] */;
  %117 = not_equal(%115, %116) /* ty=Tensor[(5, 12, 5), bool] */;
  %118 = cast(%117, dtype="uint8") /* ty=Tensor[(5, 12, 5), uint8] */;
  %119 = cast(%var_2376, dtype="uint8") /* ty=uint8 */;
  logical_xor(%118, %119) /* ty=Tensor[(5, 12, 5), uint8] */
}

def @func_2325(%var_2304: uint64, %var_2305: Tensor[(10, 4, 1), uint64]) -> (Tensor[(10, 4, 1), bool],) {
  %120 = cast(%var_2304, dtype="bool") /* ty=bool */;
  %121 = cast(%var_2305, dtype="bool") /* ty=Tensor[(10, 4, 1), bool] */;
  %122 = not_equal(%120, %121) /* ty=Tensor[(10, 4, 1), bool] */;
  %123 = cast(%var_2304, dtype="bool") /* ty=bool */;
  %124 = cast(%122, dtype="bool") /* ty=Tensor[(10, 4, 1), bool] */;
  %125 = less_equal(%123, %124) /* ty=Tensor[(10, 4, 1), bool] */;
  (%125,)
}

def @func_8330(%var_8309: Tensor[(15, 6), float32]) -> (Tensor[(10, 3, 8), float32], Tensor[(588), float64], Tensor[(15, 6), float32], Tensor[(10, 3, 8), float32]) {
  %126 = cast(%var_8309, dtype="float32") /* ty=Tensor[(15, 6), float32] */;
  %127 = reshape(%126, newshape=[3, 6, 5]) /* ty=Tensor[(3, 6, 5), float32] */;
  %128 = @func_938(%127) /* ty=(Tensor[(588), float64], Tensor[(8, 4), uint16], Tensor[(288), uint16], Tensor[(588), float64], Tensor[(3, 6, 5), float64]) */;
  %129 = @func_1166() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %130 = @func_2440() /* ty=Tensor[(10, 3, 8), float32] */;
  %131 = %128.0;
  %132 = %129.0;
  (%130, %131, %var_8309, %132)
}

def @func_5050(%var_5044: Tensor[(312), float64]) -> (Tensor[(8, 12, 3), bool], Tensor[(10, 3, 8), float64], Tensor[(312), float64], Tensor[(312), float64], Tensor[(546, 1), float64], Tensor[(546, 1), float64]) {
  %133 = @func_2524() /* ty=(Tensor[(10, 3, 8), float64], Tensor[(10, 3, 8), float32]) */;
  %134 = cast(%var_5044, dtype="float64") /* ty=Tensor[(312), float64] */;
  %135 = reshape(%134, newshape=[312]) /* ty=Tensor[(312), float64] */;
  %136 = @func_1692(%135) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(13, 2, 12), float64], Tensor[(312), float64]) */;
  %137 = cast(meta[relay.Constant][6] /* ty=Tensor[(546, 1), float64] */, dtype="float64") /* ty=Tensor[(546, 1), float64] */;
  %138 = reshape(%137, newshape=[546, 1]) /* ty=Tensor[(546, 1), float64] */;
  %139 = @func_2364(%138) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], float64, Tensor[(546, 1), float64]) */;
  %140 = @func_3146() /* ty=Tensor[(8, 12, 3), bool] */;
  %141 = %133.0;
  %142 = %136.2;
  %143 = %139.3;
  (%140, %141, %142, %var_5044, %143, meta[relay.Constant][6] /* ty=Tensor[(546, 1), float64] */)
}

def @func_2694(%var_2691: Tensor[(90), float32]) -> (Tensor[(10, 3, 8), int32], Tensor[(10, 3, 8), float32], Tensor[(588), float64], Tensor[(90), float32]) {
  %144 = @func_2524() /* ty=(Tensor[(10, 3, 8), float64], Tensor[(10, 3, 8), float32]) */;
  %145 = %144.1;
  %146 = cast(meta[relay.Constant][7] /* ty=Tensor[(10, 3, 8), float32] */, dtype="int32") /* ty=Tensor[(10, 3, 8), int32] */;
  %147 = shape_of(%145, dtype="int32") /* ty=Tensor[(3), int32] */;
  %148 = cast(%145, dtype="int32") /* ty=Tensor[(10, 3, 8), int32] */;
  %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %150 = cast(%145, dtype="float32") /* ty=Tensor[(10, 3, 8), float32] */;
  %151 = cast(%var_2691, dtype="float32") /* ty=Tensor[(90), float32] */;
  %152 = reshape(%151, newshape=[3, 6, 5]) /* ty=Tensor[(3, 6, 5), float32] */;
  %153 = @func_938(%152) /* ty=(Tensor[(588), float64], Tensor[(8, 4), uint16], Tensor[(288), uint16], Tensor[(588), float64], Tensor[(3, 6, 5), float64]) */;
  %154 = bitwise_xor(%148, %149) /* ty=Tensor[(10, 3, 8), int32] */;
  %155 = atan(%150) /* ty=Tensor[(10, 3, 8), float32] */;
  %156 = %153.3;
  (%154, %155, %156, %var_2691)
}

def @func_7536() -> Tensor[(8, 12, 3), bool] {
  @func_3146() /* ty=Tensor[(8, 12, 3), bool] */
}

def @func_8543() -> (Tensor[(10, 3, 8), float32],) {
  %157 = @func_4730() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %158 = %157.0;
  (%158,)
}

def @func_4315() -> (Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), int16]) {
  %159 = @func_2491() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %160 = %159.0;
  %161 = cast(%160, dtype="float32") /* ty=Tensor[(10, 3, 8), float32] */;
  %162 = reshape(%161, newshape=[10, 3, 8]) /* ty=Tensor[(10, 3, 8), float32] */;
  %163 = @func_3773(%162) /* ty=(Tensor[(10, 3, 8), int16],) */;
  %164 = %163.0;
  (%160, %164)
}

def @func_438(%var_429: Tensor[(13, 2, 12), float64]) -> Tensor[(13, 2, 12), float64] {
  %165 = cast(%var_429, dtype="float64") /* ty=Tensor[(13, 2, 12), float64] */;
  sqrt(%165) /* ty=Tensor[(13, 2, 12), float64] */
}

def @func_3146() -> Tensor[(8, 12, 3), bool] {
  %166 = cast(meta[relay.Constant][9] /* ty=Tensor[(8, 12, 3), float32] */, dtype="bool") /* ty=Tensor[(8, 12, 3), bool] */;
  %167 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(8, 12, 3), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %168 = cast(meta[relay.Constant][8] /* ty=Tensor[(8, 12, 3), float32] */, dtype="bool") /* ty=Tensor[(8, 12, 3), bool] */;
  %169 = dyn.reshape(%166, %167, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%168, %169) /* ty=Tensor[(8, 12, 3), bool] */
}

def @func_3876() -> (Tensor[(10, 3, 8), int8],) {
  %170 = @func_2850() /* ty=Tensor[(10, 3, 8), int8] */;
  (%170,)
}

def @func_6163() -> Tensor[(8, 12, 3), bool] {
  @func_3528() /* ty=Tensor[(8, 12, 3), bool] */
}

def @func_3723(%var_3699: float64) -> (Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], float64, Tensor[(546), float64], Tensor[(10, 3, 8), float64], Tensor[(5, 12, 5), uint8]) {
  %171 = @func_2491() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %172 = @func_2491() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %173 = @func_1175() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %174 = cast(%var_3699, dtype="float64") /* ty=float64 */;
  %175 = cast(meta[relay.Constant][10] /* ty=Tensor[(546), float64] */, dtype="float64") /* ty=Tensor[(546), float64] */;
  %176 = reshape(%174, newshape=[]) /* ty=float64 */;
  %177 = reshape(%175, newshape=[14, 13, 3]) /* ty=Tensor[(14, 13, 3), float64] */;
  %178 = @func_1820(%176, %177) /* ty=(Tensor[(14, 13, 3), float64], Tensor[(10, 3, 8), float32], Tensor[(14, ?, 3), bool], Tensor[(42), float64]) */;
  %179 = @func_2524() /* ty=(Tensor[(10, 3, 8), float64], Tensor[(10, 3, 8), float32]) */;
  %180 = cast(%var_3699, dtype="int64") /* ty=int64 */;
  %181 = reshape(%180, newshape=[]) /* ty=int64 */;
  %182 = %171.0;
  %183 = %172.0;
  %184 = %173.0;
  %185 = %178.1;
  %186 = %179.0;
  %187 = @func_2398(%181) /* ty=Tensor[(5, 12, 5), uint8] */;
  (%182, %183, %184, %185, %var_3699, meta[relay.Constant][10] /* ty=Tensor[(546), float64] */, %186, %187)
}

def @func_3470(%var_3365: Tensor[(165), int16], %var_3415: Tensor[(546), float64]) -> (Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(3, 5, 11), bool], Tensor[(165), int16], Tensor[(42), float64], Tensor[(588), float64], Tensor[(42), float64], Tensor[(10, 3, 8), float32], Tensor[(546), float64], Tensor[(5, 4, 13), float32], Tensor[(260), float32], Tensor[(10, 3, 8), float32], Tensor[(11, 10, 9), float64]) {
  %188 = @func_2491() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %189 = cast(%var_3365, dtype="int16") /* ty=Tensor[(165), int16] */;
  %190 = reshape(%189, newshape=[3, 5, 11]) /* ty=Tensor[(3, 5, 11), int16] */;
  %191 = cast(meta[relay.Constant][11] /* ty=Tensor[(588), float64] */, dtype="float64") /* ty=Tensor[(588), float64] */;
  %192 = cast(meta[relay.Constant][12] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
  %193 = cast(meta[relay.Constant][11] /* ty=Tensor[(588), float64] */, dtype="float64") /* ty=Tensor[(588), float64] */;
  %194 = reshape(%191, newshape=[14, 6, 7]) /* ty=Tensor[(14, 6, 7), float64] */;
  %195 = reshape(%192, newshape=[42]) /* ty=Tensor[(42), float64] */;
  %196 = reshape(%193, newshape=[14, 6, 7]) /* ty=Tensor[(14, 6, 7), float64] */;
  %197 = @func_310(%194, %195, %196) /* ty=(Tensor[(14, 6, 7), float64], Tensor[(14, ?, 3), bool], Tensor[(42), float64], Tensor[(14, 6, 7), int8], Tensor[(14, ?, 3), bool]) */;
  %198 = cast(%var_3415, dtype="float64") /* ty=Tensor[(546), float64] */;
  %199 = reshape(%198, newshape=[546, 1]) /* ty=Tensor[(546, 1), float64] */;
  %200 = @func_2364(%199) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], float64, Tensor[(546, 1), float64]) */;
  %201 = cast(meta[relay.Constant][13] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
  %202 = reshape(%201, newshape=[5, 4, 13]) /* ty=Tensor[(5, 4, 13), float32] */;
  %203 = @func_1438(%202) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(5, 4, 13), float32]) */;
  %204 = @func_2524() /* ty=(Tensor[(10, 3, 8), float64], Tensor[(10, 3, 8), float32]) */;
  %205 = cast(meta[relay.Constant][14] /* ty=Tensor[(11, 10, 9), float32] */, dtype="float32") /* ty=Tensor[(11, 10, 9), float32] */;
  %206 = atan(%205) /* ty=Tensor[(11, 10, 9), float32] */;
  %207 = cast(%206, dtype="float64") /* ty=Tensor[(11, 10, 9), float64] */;
  %208 = rsqrt(%207) /* ty=Tensor[(11, 10, 9), float64] */;
  %209 = cast(%208, dtype="float64") /* ty=Tensor[(11, 10, 9), float64] */;
  %210 = @func_3083() /* ty=Tensor[(10, 3, 8), float32] */;
  %211 = %188.0;
  %212 = @func_3297(%190) /* ty=Tensor[(3, 5, 11), bool] */;
  %213 = %197.2;
  %214 = %200.0;
  %215 = %203.1;
  %216 = %204.1;
  %217 = log10(%209) /* ty=Tensor[(11, 10, 9), float64] */;
  (%210, %211, %212, %var_3365, %213, meta[relay.Constant][11] /* ty=Tensor[(588), float64] */, meta[relay.Constant][12] /* ty=Tensor[(42), float64] */, %214, %var_3415, %215, meta[relay.Constant][13] /* ty=Tensor[(260), float32] */, %216, %217)
}

def @func_1865() -> Tensor[(10, 3, 8), float32] {
  %218 = @func_1175() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %218.0
}

def @func_7462() -> (Tensor[(10, 3, 8), bool],) {
  %219 = @func_1636() /* ty=Tensor[(10, 3, 8), float32] */;
  %220 = @func_3343() /* ty=Tensor[(10, 3, 8), float32] */;
  %221 = cast(%220, dtype="bool") /* ty=Tensor[(10, 3, 8), bool] */;
  %222 = shape_of(%219, dtype="int32") /* ty=Tensor[(3), int32] */;
  %223 = cast(%219, dtype="bool") /* ty=Tensor[(10, 3, 8), bool] */;
  %224 = dyn.reshape(%221, %222, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %225 = greater(%223, %224) /* ty=Tensor[(10, 3, 8), bool] */;
  (%225,)
}

def @func_8139() -> Tensor[(10, 3, 8), float64] {
  %226 = @func_2524() /* ty=(Tensor[(10, 3, 8), float64], Tensor[(10, 3, 8), float32]) */;
  %226.0
}

def @func_5986(%var_5970: Tensor[(7, 84), float64], %var_5981: uint8) -> (Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(7, 84), float64], Tensor[(14, 13, 12), float64], uint8, Tensor[(2184), uint8]) {
  %227 = @func_3504() /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32]) */;
  %228 = cast(%var_5970, dtype="float64") /* ty=Tensor[(7, 84), float64] */;
  %229 = reshape(%228, newshape=[588]) /* ty=Tensor[(588), float64] */;
  %230 = @func_1298(%229) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(42), float64], Tensor[(588), float64], Tensor[(42), float64], Tensor[(14, ?, 3), bool]) */;
  %231 = cast(%var_5981, dtype="uint8") /* ty=uint8 */;
  %232 = cast(meta[relay.Constant][15] /* ty=Tensor[(2184), uint8] */, dtype="uint8") /* ty=Tensor[(2184), uint8] */;
  %233 = reshape(%231, newshape=[]) /* ty=uint8 */;
  %234 = reshape(%232, newshape=[14, 13, 12]) /* ty=Tensor[(14, 13, 12), uint8] */;
  %235 = @func_1515(%233, %234) /* ty=(Tensor[(14, 13, 12), float64],) */;
  %236 = %227.1;
  %237 = %230.0;
  %238 = %235.0;
  (%236, %237, %var_5970, %238, %var_5981, meta[relay.Constant][15] /* ty=Tensor[(2184), uint8] */)
}

def @func_5845() -> Tensor[(10, 3, 8), int8] {
  %239 = @func_3876() /* ty=(Tensor[(10, 3, 8), int8],) */;
  %239.0
}

def @func_310(%var_273: Tensor[(14, 6, 7), float64], %var_277: Tensor[(42), float64], %var_289: Tensor[(14, 6, 7), float64]) -> (Tensor[(14, 6, 7), float64], Tensor[(14, ?, 3), bool], Tensor[(42), float64], Tensor[(14, 6, 7), int8], Tensor[(14, ?, 3), bool]) {
  %240 = cast(%var_273, dtype="float64") /* ty=Tensor[(14, 6, 7), float64] */;
  %241 = cast(%var_277, dtype="float64") /* ty=Tensor[(42), float64] */;
  %242 = reshape(%241, newshape=[14, 1, 3]) /* ty=Tensor[(14, 1, 3), float64] */;
  %243 = @func_121(%242) /* ty=(Tensor[(14, ?, 3), bool],) */;
  %244 = cast(%var_289, dtype="int8") /* ty=Tensor[(14, 6, 7), int8] */;
  %245 = shape_of(%var_273, dtype="int32") /* ty=Tensor[(3), int32] */;
  %246 = cast(%var_273, dtype="int8") /* ty=Tensor[(14, 6, 7), int8] */;
  %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %248 = cast(%var_277, dtype="float64") /* ty=Tensor[(42), float64] */;
  %249 = reshape(%248, newshape=[14, 1, 3]) /* ty=Tensor[(14, 1, 3), float64] */;
  %250 = @func_121(%249) /* ty=(Tensor[(14, ?, 3), bool],) */;
  %251 = sqrt(%240) /* ty=Tensor[(14, 6, 7), float64] */;
  %252 = %243.0;
  %253 = bitwise_xor(%246, %247) /* ty=Tensor[(14, 6, 7), int8] */;
  %254 = %250.0;
  (%251, %252, %var_277, %253, %254)
}

def @func_3322(%var_3305: Tensor[(7, 13, 6), float32]) -> Tensor[(7, 13, 6), float32] {
  %255 = cast(meta[relay.Constant][16] /* ty=Tensor[(7, 13, 6), float32] */, dtype="float32") /* ty=Tensor[(7, 13, 6), float32] */;
  %256 = shape_of(%var_3305, dtype="int32") /* ty=Tensor[(3), int32] */;
  %257 = cast(%var_3305, dtype="float32") /* ty=Tensor[(7, 13, 6), float32] */;
  %258 = dyn.reshape(%255, %256, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%257, %258) /* ty=Tensor[(7, 13, 6), float32] */
}

def @func_7705() -> (Tensor[(9, 11, 3), float32],) {
  %259 = cast(meta[relay.Constant][17] /* ty=Tensor[(9, 11, 3), float32] */, dtype="float32") /* ty=Tensor[(9, 11, 3), float32] */;
  %260 = asin(%259) /* ty=Tensor[(9, 11, 3), float32] */;
  (%260,)
}

def @func_3166() -> Tensor[(10, 3, 8), int8] {
  @func_2850() /* ty=Tensor[(10, 3, 8), int8] */
}

def @func_1636() -> Tensor[(10, 3, 8), float32] {
  %261 = @func_1452() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %261.0
}

def @func_5627() -> (Tensor[(10, 3, 8), int16], Tensor[(10, 3, 8), int8]) {
  %262 = @func_4315() /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), int16]) */;
  %263 = %262.1;
  %264 = @func_3166() /* ty=Tensor[(10, 3, 8), int8] */;
  (%263, %264)
}

def @func_4081(%var_4070: Tensor[(8, 11, 12), float64], %var_4071: Tensor[(8, 11, 12), float64]) -> (Tensor[(8, 11, 12), float64], Tensor[(10, 3, 8), float32]) {
  %265 = cast(%var_4071, dtype="float64") /* ty=Tensor[(8, 11, 12), float64] */;
  %266 = shape_of(%var_4070, dtype="int32") /* ty=Tensor[(3), int32] */;
  %267 = cast(%var_4070, dtype="float64") /* ty=Tensor[(8, 11, 12), float64] */;
  %268 = dyn.reshape(%265, %266, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %269 = @func_1175() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %270 = mod(%267, %268) /* ty=Tensor[(8, 11, 12), float64] */;
  %271 = %269.0;
  (%270, %271)
}

def @func_1166() -> (Tensor[(10, 3, 8), float32],) {
  %272 = cast(meta[relay.Constant][18] /* ty=Tensor[(10, 3, 8), float32] */, dtype="float32") /* ty=Tensor[(10, 3, 8), float32] */;
  %273 = sqrt(%272) /* ty=Tensor[(10, 3, 8), float32] */;
  (%273,)
}

def @func_3597() -> (Tensor[(10, 3, 8), float32],) {
  %274 = @func_3083() /* ty=Tensor[(10, 3, 8), float32] */;
  (%274,)
}

def @func_2911(%var_2883: Tensor[(7, 14, 6), int32], %var_2908: Tensor[(2700), uint32]) -> (Tensor[(7, 14, 6), float32], Tensor[(312), float64], Tensor[(2700), uint32], Tensor[(42), float64]) {
  %275 = cast(%var_2883, dtype="int32") /* ty=Tensor[(7, 14, 6), int32] */;
  %276 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(7, 14, 6), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %277 = cast(meta[relay.Constant][19] /* ty=Tensor[(7, 14, 6), int32] */, dtype="int32") /* ty=Tensor[(7, 14, 6), int32] */;
  %278 = dyn.reshape(%275, %276, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %279 = logical_xor(%277, %278) /* ty=Tensor[(7, 14, 6), int32] */;
  %280 = cast(%279, dtype="float64") /* ty=Tensor[(7, 14, 6), float64] */;
  %281 = asinh(%280) /* ty=Tensor[(7, 14, 6), float64] */;
  %282 = cast(%281, dtype="float32") /* ty=Tensor[(7, 14, 6), float32] */;
  %283 = cast(%var_2908, dtype="uint32") /* ty=Tensor[(2700), uint32] */;
  %284 = cast(meta[relay.Constant][20] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
  %285 = reshape(%283, newshape=[15, 15, 12]) /* ty=Tensor[(15, 15, 12), uint32] */;
  %286 = reshape(%284, newshape=[42]) /* ty=Tensor[(42), float64] */;
  %287 = @func_1783(%285, %286) /* ty=(Tensor[(15, 15, 12), uint32], Tensor[(14, ?, 3), bool], Tensor[(42), float64], Tensor[(13, 2, 12), float64], Tensor[(312), float64], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(14, 6, 7), int8], Tensor[(588), float64]) */;
  %288 = rsqrt(%282) /* ty=Tensor[(7, 14, 6), float32] */;
  %289 = %287.4;
  (%288, %289, %var_2908, meta[relay.Constant][20] /* ty=Tensor[(42), float64] */)
}

def @func_6442(%var_6418: Tensor[(3, 3), float32]) -> (Tensor[(3, 3), float32], Tensor[(2700), uint32], Tensor[(40), uint64]) {
  %290 = cast(%var_6418, dtype="float32") /* ty=Tensor[(3, 3), float32] */;
  %291 = cast(meta[relay.Constant][21] /* ty=Tensor[(40), uint64] */, dtype="uint64") /* ty=Tensor[(40), uint64] */;
  %292 = reshape(%291, newshape=[40]) /* ty=Tensor[(40), uint64] */;
  %293 = @func_4387(%292) /* ty=(Tensor[(8, 12, 3), float32], Tensor[(10, 4, 1), bool], uint64, Tensor[(40), uint64], uint64, Tensor[(256), float32], Tensor[(10, 3, 8), float32], Tensor[(2700), uint32], Tensor[(260), float32]) */;
  %294 = sin(%290) /* ty=Tensor[(3, 3), float32] */;
  %295 = %293.7;
  (%294, %295, meta[relay.Constant][21] /* ty=Tensor[(40), uint64] */)
}

def @func_3504() -> (Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32]) {
  %296 = @func_1230() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %297 = @func_1452() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %298 = %296.0;
  %299 = %297.0;
  (%298, %299)
}

def @func_5954(%var_5881: Tensor[(11, 5, 2), float64], %var_5897: float64, %var_5949: Tensor[(11, 5, 2), float32]) -> (Tensor[(10, 3, 8), float32], float64, Tensor[(546, 1), float64], Tensor[(14, 13, 3), float64], Tensor[(11, 5, 2), float64], Tensor[(14, 13, 3), float64], Tensor[(11, 5, 2), bool]) {
  %300 = cast(%var_5897, dtype="float64") /* ty=float64 */;
  %301 = cast(meta[relay.Constant][22] /* ty=Tensor[(546, 1), float64] */, dtype="float64") /* ty=Tensor[(546, 1), float64] */;
  %302 = reshape(%300, newshape=[]) /* ty=float64 */;
  %303 = reshape(%301, newshape=[14, 13, 3]) /* ty=Tensor[(14, 13, 3), float64] */;
  %304 = @func_1820(%302, %303) /* ty=(Tensor[(14, 13, 3), float64], Tensor[(10, 3, 8), float32], Tensor[(14, ?, 3), bool], Tensor[(42), float64]) */;
  %305 = %304.0;
  %306 = cast(%305, dtype="float64") /* ty=Tensor[(14, 13, 3), float64] */;
  %307 = cast(%var_5881, dtype="float64") /* ty=Tensor[(11, 5, 2), float64] */;
  %308 = cos(%307) /* ty=Tensor[(11, 5, 2), float64] */;
  %309 = cast(%308, dtype="float32") /* ty=Tensor[(11, 5, 2), float32] */;
  %310 = atanh(%309) /* ty=Tensor[(11, 5, 2), float32] */;
  %311 = cast(%310, dtype="float64") /* ty=Tensor[(11, 5, 2), float64] */;
  %312 = cast(meta[relay.Constant][23] /* ty=Tensor[(14, 13, 3), float64] */, dtype="float64") /* ty=Tensor[(14, 13, 3), float64] */;
  %313 = shape_of(%305, dtype="int32") /* ty=Tensor[(3), int32] */;
  %314 = cast(%305, dtype="float64") /* ty=Tensor[(14, 13, 3), float64] */;
  %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %316 = cast(%var_5949, dtype="bool") /* ty=Tensor[(11, 5, 2), bool] */;
  %317 = shape_of(%310, dtype="int32") /* ty=Tensor[(3), int32] */;
  %318 = cast(%310, dtype="bool") /* ty=Tensor[(11, 5, 2), bool] */;
  %319 = dyn.reshape(%316, %317, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %320 = @func_2440() /* ty=Tensor[(10, 3, 8), float32] */;
  %321 = atanh(%306) /* ty=Tensor[(14, 13, 3), float64] */;
  %322 = log2(%311) /* ty=Tensor[(11, 5, 2), float64] */;
  %323 = mod(%314, %315) /* ty=Tensor[(14, 13, 3), float64] */;
  %324 = equal(%318, %319) /* ty=Tensor[(11, 5, 2), bool] */;
  (%320, %var_5897, meta[relay.Constant][22] /* ty=Tensor[(546, 1), float64] */, %321, %322, %323, %324)
}

def @func_7691(%var_7656: Tensor[(8, 12, 3), float64]) -> (Tensor[(8, 12, 3), float32], Tensor[(455, 1), float32], Tensor[(455), float32], Tensor[(8, 12, 3), bool], Tensor[(8, 12, 3), uint8], Tensor[(10, 3, 8), float32], uint64, Tensor[(8, 12, 3), float64]) {
  %325 = @func_5821() /* ty=Tensor[(8, 12, 3), bool] */;
  %326 = cast(%325, dtype="float64") /* ty=Tensor[(8, 12, 3), float64] */;
  %327 = erf(%326) /* ty=Tensor[(8, 12, 3), float64] */;
  %328 = cast(%327, dtype="float32") /* ty=Tensor[(8, 12, 3), float32] */;
  %329 = cast(meta[relay.Constant][24] /* ty=Tensor[(455), float32] */, dtype="float32") /* ty=Tensor[(455), float32] */;
  %330 = reshape(%329, newshape=[455, 1]) /* ty=Tensor[(455, 1), float32] */;
  %331 = @func_6861(%330) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), int8], Tensor[(7, 13, 5), float32], Tensor[(455, 1), float32]) */;
  %332 = cast(%var_7656, dtype="bool") /* ty=Tensor[(8, 12, 3), bool] */;
  %333 = shape_of(%327, dtype="int32") /* ty=Tensor[(3), int32] */;
  %334 = cast(%327, dtype="bool") /* ty=Tensor[(8, 12, 3), bool] */;
  %335 = dyn.reshape(%332, %333, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %336 = cast(%325, dtype="uint8") /* ty=Tensor[(8, 12, 3), uint8] */;
  %337 = shape_of(%327, dtype="int32") /* ty=Tensor[(3), int32] */;
  %338 = cast(%327, dtype="uint8") /* ty=Tensor[(8, 12, 3), uint8] */;
  %339 = dyn.reshape(%336, %337, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %340 = @func_7508() /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32]) */;
  %341 = @func_6830() /* ty=(uint64,) */;
  %342 = cast(%325, dtype="float64") /* ty=Tensor[(8, 12, 3), float64] */;
  %343 = cosh(%328) /* ty=Tensor[(8, 12, 3), float32] */;
  %344 = %331.3;
  %345 = greater(%334, %335) /* ty=Tensor[(8, 12, 3), bool] */;
  %346 = bitwise_or(%338, %339) /* ty=Tensor[(8, 12, 3), uint8] */;
  %347 = %340.0;
  %348 = %341.0;
  %349 = acosh(%342) /* ty=Tensor[(8, 12, 3), float64] */;
  (%343, %344, meta[relay.Constant][24] /* ty=Tensor[(455), float32] */, %345, %346, %347, %348, %349)
}

def @func_8386(%var_8369: Tensor[(312), float64], %var_8379: Tensor[(144), float32]) -> (Tensor[(10, 3, 8), float32], Tensor[(312), float64], Tensor[(1, 9, 16), float32], Tensor[(546, 144), bool]) {
  %350 = @func_5436() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %351 = cast(%var_8379, dtype="float32") /* ty=Tensor[(144), float32] */;
  %352 = reshape(%351, newshape=[1, 9, 16]) /* ty=Tensor[(1, 9, 16), float32] */;
  %353 = cast(%var_8369, dtype="float64") /* ty=Tensor[(312), float64] */;
  %354 = reshape(%353, newshape=[312]) /* ty=Tensor[(312), float64] */;
  %355 = @func_8265(%354) /* ty=(Tensor[(8, 12, 3), bool], Tensor[(10, 3, 8), float32], Tensor[(546, 1), float64], Tensor[(312), float64]) */;
  %356 = %355.2;
  %357 = cast(%var_8379, dtype="bool") /* ty=Tensor[(144), bool] */;
  %358 = cast(%356, dtype="bool") /* ty=Tensor[(546, 1), bool] */;
  %359 = %350.0;
  %360 = @func_7249(%352) /* ty=Tensor[(1, 9, 16), float32] */;
  %361 = not_equal(%357, %358) /* ty=Tensor[(546, 144), bool] */;
  (%359, %var_8369, %360, %361)
}

def @func_2760(%var_2751: bool, %var_2752: Tensor[(16, 4, 14), bool]) -> Tensor[(16, 4, 14), bool] {
  %362 = cast(%var_2751, dtype="bool") /* ty=bool */;
  %363 = cast(%var_2752, dtype="bool") /* ty=Tensor[(16, 4, 14), bool] */;
  logical_or(%362, %363) /* ty=Tensor[(16, 4, 14), bool] */
}

def @func_6929(%var_6911: uint8) -> (Tensor[(10, 3, 8), int8], Tensor[(2184), uint8], Tensor[(588), float64], uint8, Tensor[(2184), uint8]) {
  %364 = cast(meta[relay.Constant][25] /* ty=Tensor[(588), float64] */, dtype="float64") /* ty=Tensor[(588), float64] */;
  %365 = cast(%var_6911, dtype="uint8") /* ty=uint8 */;
  %366 = cast(meta[relay.Constant][26] /* ty=Tensor[(2184), uint8] */, dtype="uint8") /* ty=Tensor[(2184), uint8] */;
  %367 = reshape(%364, newshape=[14, 42]) /* ty=Tensor[(14, 42), float64] */;
  %368 = reshape(%365, newshape=[]) /* ty=uint8 */;
  %369 = reshape(%366, newshape=[2184]) /* ty=Tensor[(2184), uint8] */;
  %370 = @func_4638(%367, %368, %369) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(14, 42), float64], Tensor[(14, 13, 12), float64], uint8, Tensor[(2184), uint8]) */;
  %371 = @func_5537() /* ty=Tensor[(10, 3, 8), int8] */;
  %372 = %370.5;
  (%371, %372, meta[relay.Constant][25] /* ty=Tensor[(588), float64] */, %var_6911, meta[relay.Constant][26] /* ty=Tensor[(2184), uint8] */)
}

def @func_7576() -> (Tensor[(10, 3, 8), int8],) {
  %373 = @func_5845() /* ty=Tensor[(10, 3, 8), int8] */;
  (%373,)
}

def @func_3215(%var_3208: Tensor[(10, 3, 8), float32]) -> Tensor[(10, 3, 8), float64] {
  %374 = @func_1452() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %375 = %374.0;
  %376 = cast(%var_3208, dtype="float64") /* ty=Tensor[(10, 3, 8), float64] */;
  %377 = shape_of(%375, dtype="int32") /* ty=Tensor[(3), int32] */;
  %378 = cast(%375, dtype="float64") /* ty=Tensor[(10, 3, 8), float64] */;
  %379 = dyn.reshape(%376, %377, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%378, %379) /* ty=Tensor[(10, 3, 8), float64] */
}

def @func_5573() -> (Tensor[(10, 3, 8), float32],) {
  %380 = @func_1175() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %381 = %380.0;
  (%381,)
}

def @func_7508() -> (Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32]) {
  %382 = @func_7391() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %383 = @func_5436() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %384 = %382.0;
  %385 = %383.0;
  (%384, %385)
}

def @func_4832(%var_4795: Tensor[(32), uint16], %var_4796: Tensor[(288), uint16], %var_4797: Tensor[(588), float64], %var_4828: Tensor[(312), float64]) -> (Tensor[(10, 3, 8), int8], Tensor[(14, ?, 3), float32], Tensor[(32), uint16], Tensor[(288), uint16], Tensor[(588), float32], Tensor[(15, 3, 6), float32], Tensor[(312), float64]) {
  %386 = cast(%var_4795, dtype="uint16") /* ty=Tensor[(32), uint16] */;
  %387 = cast(%var_4796, dtype="uint16") /* ty=Tensor[(288), uint16] */;
  %388 = cast(%var_4797, dtype="float64") /* ty=Tensor[(588), float64] */;
  %389 = reshape(%386, newshape=[32]) /* ty=Tensor[(32), uint16] */;
  %390 = reshape(%387, newshape=[288]) /* ty=Tensor[(288), uint16] */;
  %391 = reshape(%388, newshape=[588]) /* ty=Tensor[(588), float64] */;
  %392 = @func_1598(%389, %390, %391) /* ty=(Tensor[(10, 3, 8), int8], Tensor[(14, ?, 3), float32], Tensor[(32), uint16], Tensor[(288), uint16], Tensor[(588), float64], Tensor[(10, 3, 8), float32], Tensor[(588), float64], Tensor[(14, ?, 3), bool]) */;
  %393 = cast(%var_4797, dtype="float32") /* ty=Tensor[(588), float32] */;
  %394 = cast(%var_4828, dtype="float64") /* ty=Tensor[(312), float64] */;
  %395 = %392.1;
  %396 = cast(%395, dtype="float64") /* ty=Tensor[(14, ?, 3), float64] */;
  %397 = reshape(%394, newshape=[312]) /* ty=Tensor[(312), float64] */;
  %398 = reshape(%396, newshape=[42]) /* ty=Tensor[(42), float64] */;
  %399 = @func_2270(%397, %398) /* ty=(Tensor[(13, 2, 12), float64], Tensor[(312), float64], Tensor[(10, 3, 8), float32], Tensor[(588), float64], Tensor[(90), float32], Tensor[(3, 6, 5), float64], Tensor[(14, ?, 3), bool], Tensor[(42), float64], Tensor[(14, ?, 3), bool], Tensor[(10, 3, 8), float32], Tensor[(15, 3, 6), float32]) */;
  %400 = @func_3166() /* ty=Tensor[(10, 3, 8), int8] */;
  %401 = cos(%393) /* ty=Tensor[(588), float32] */;
  %402 = %399.10;
  (%400, %395, %var_4795, %var_4796, %401, %402, %var_4828)
}

def @func_3935(%var_3924: Tensor[(7, 13, 5), float32]) -> Tensor[(7, 13, 5), float32] {
  %403 = cast(%var_3924, dtype="float32") /* ty=Tensor[(7, 13, 5), float32] */;
  asin(%403) /* ty=Tensor[(7, 13, 5), float32] */
}

def @func_1515(%var_1503: uint8, %var_1504: Tensor[(14, 13, 12), uint8]) -> (Tensor[(14, 13, 12), float64],) {
  %404 = cast(%var_1503, dtype="uint8") /* ty=uint8 */;
  %405 = cast(%var_1504, dtype="uint8") /* ty=Tensor[(14, 13, 12), uint8] */;
  %406 = bitwise_xor(%404, %405) /* ty=Tensor[(14, 13, 12), uint8] */;
  %407 = cast(%406, dtype="float64") /* ty=Tensor[(14, 13, 12), float64] */;
  %408 = sin(%407) /* ty=Tensor[(14, 13, 12), float64] */;
  (%408,)
}

def @func_2491() -> (Tensor[(10, 3, 8), float32],) {
  %409 = @func_2440() /* ty=Tensor[(10, 3, 8), float32] */;
  (%409,)
}

def @func_2826(%var_2800: Tensor[(8, 8, 4), float32]) -> (Tensor[(8, 8, 4), float32], Tensor[(10, 4, 1), bool], uint64, Tensor[(40), uint64]) {
  %410 = cast(%var_2800, dtype="float32") /* ty=Tensor[(8, 8, 4), float32] */;
  %411 = cast(meta[relay.Constant][27] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %412 = cast(meta[relay.Constant][28] /* ty=Tensor[(40), uint64] */, dtype="uint64") /* ty=Tensor[(40), uint64] */;
  %413 = reshape(%411, newshape=[]) /* ty=uint64 */;
  %414 = reshape(%412, newshape=[10, 4, 1]) /* ty=Tensor[(10, 4, 1), uint64] */;
  %415 = @func_2325(%413, %414) /* ty=(Tensor[(10, 4, 1), bool],) */;
  %416 = acosh(%410) /* ty=Tensor[(8, 8, 4), float32] */;
  %417 = %415.0;
  (%416, %417, meta[relay.Constant][27] /* ty=uint64 */, meta[relay.Constant][28] /* ty=Tensor[(40), uint64] */)
}

def @func_3826() -> (Tensor[(10, 3, 8), int8],) {
  %418 = @func_2850() /* ty=Tensor[(10, 3, 8), int8] */;
  (%418,)
}

def @func_7173(%var_7075: Tensor[(15, 12, 3), bool], %var_7076: Tensor[(15, 12, 3), bool], %var_7092: Tensor[(15, 12, 3), bool], %var_7114: Tensor[(32), uint16], %var_7115: Tensor[(98, 6), float64], %var_7117: Tensor[(15, 12, 3), bool], %var_7145: Tensor[(546), float32]) -> (Tensor[(8, 12, 3), bool], Tensor[(10, 3, 8), float32], Tensor[(14, ?, 3), bool], Tensor[(32), uint16], Tensor[(98, 6), float64], Tensor[(15, 12, 3), float32], Tensor[(7, 13, 6), float32], Tensor[(546), float32], Tensor[(15, 12, 3), uint32], Tensor[(14, ?, 3), bool]) {
  %419 = cast(%var_7114, dtype="uint16") /* ty=Tensor[(32), uint16] */;
  %420 = @func_3528() /* ty=Tensor[(8, 12, 3), bool] */;
  %421 = cast(%420, dtype="uint16") /* ty=Tensor[(8, 12, 3), uint16] */;
  %422 = cast(%var_7115, dtype="float64") /* ty=Tensor[(98, 6), float64] */;
  %423 = reshape(%419, newshape=[32]) /* ty=Tensor[(32), uint16] */;
  %424 = reshape(%421, newshape=[288]) /* ty=Tensor[(288), uint16] */;
  %425 = reshape(%422, newshape=[588]) /* ty=Tensor[(588), float64] */;
  %426 = @func_1598(%423, %424, %425) /* ty=(Tensor[(10, 3, 8), int8], Tensor[(14, ?, 3), float32], Tensor[(32), uint16], Tensor[(288), uint16], Tensor[(588), float64], Tensor[(10, 3, 8), float32], Tensor[(588), float64], Tensor[(14, ?, 3), bool]) */;
  %427 = cast(%var_7117, dtype="float32") /* ty=Tensor[(15, 12, 3), float32] */;
  %428 = shape_of(%var_7092, dtype="int32") /* ty=Tensor[(3), int32] */;
  %429 = cast(%var_7092, dtype="float32") /* ty=Tensor[(15, 12, 3), float32] */;
  %430 = dyn.reshape(%427, %428, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %431 = cast(%var_7145, dtype="float32") /* ty=Tensor[(546), float32] */;
  %432 = reshape(%431, newshape=[7, 13, 6]) /* ty=Tensor[(7, 13, 6), float32] */;
  %433 = cast(%var_7076, dtype="bool") /* ty=Tensor[(15, 12, 3), bool] */;
  %434 = shape_of(%var_7075, dtype="int32") /* ty=Tensor[(3), int32] */;
  %435 = cast(%var_7075, dtype="bool") /* ty=Tensor[(15, 12, 3), bool] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %437 = logical_or(%435, %436) /* ty=Tensor[(15, 12, 3), bool] */;
  %438 = cast(%var_7092, dtype="int16") /* ty=Tensor[(15, 12, 3), int16] */;
  %439 = shape_of(%437, dtype="int32") /* ty=Tensor[(3), int32] */;
  %440 = cast(%437, dtype="int16") /* ty=Tensor[(15, 12, 3), int16] */;
  %441 = dyn.reshape(%438, %439, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %442 = right_shift(%440, %441) /* ty=Tensor[(15, 12, 3), int16] */;
  %443 = cast(%442, dtype="uint32") /* ty=Tensor[(15, 12, 3), uint32] */;
  %444 = shape_of(%437, dtype="int32") /* ty=Tensor[(3), int32] */;
  %445 = cast(%437, dtype="uint32") /* ty=Tensor[(15, 12, 3), uint32] */;
  %446 = dyn.reshape(%443, %444, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %447 = cast(%var_7115, dtype="float64") /* ty=Tensor[(98, 6), float64] */;
  %448 = %426.7;
  %449 = cast(%448, dtype="float64") /* ty=Tensor[(14, ?, 3), float64] */;
  %450 = cast(%var_7115, dtype="float64") /* ty=Tensor[(98, 6), float64] */;
  %451 = reshape(%447, newshape=[14, 6, 7]) /* ty=Tensor[(14, 6, 7), float64] */;
  %452 = reshape(%449, newshape=[42]) /* ty=Tensor[(42), float64] */;
  %453 = reshape(%450, newshape=[14, 6, 7]) /* ty=Tensor[(14, 6, 7), float64] */;
  %454 = @func_310(%451, %452, %453) /* ty=(Tensor[(14, 6, 7), float64], Tensor[(14, ?, 3), bool], Tensor[(42), float64], Tensor[(14, 6, 7), int8], Tensor[(14, ?, 3), bool]) */;
  %455 = @func_3276() /* ty=Tensor[(10, 3, 8), float32] */;
  %456 = floor_mod(%429, %430) /* ty=Tensor[(15, 12, 3), float32] */;
  %457 = @func_3322(%432) /* ty=Tensor[(7, 13, 6), float32] */;
  %458 = bitwise_and(%445, %446) /* ty=Tensor[(15, 12, 3), uint32] */;
  %459 = %454.4;
  (%420, %455, %448, %var_7114, %var_7115, %456, %457, %var_7145, %458, %459)
}

def @func_6662(%var_6627: Tensor[(3, 900), uint32], %var_6647: Tensor[(65, 4), float32]) -> (Tensor[(10, 3, 8), int8], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(3, 900), uint32], Tensor[(42), float64], Tensor[(8, 12, 3), float32], Tensor[(10, 3, 8), float32], Tensor[(819), bool], Tensor[(65, 4), float32], Tensor[(10, 3, 8), int8]) {
  %460 = @func_5627() /* ty=(Tensor[(10, 3, 8), int16], Tensor[(10, 3, 8), int8]) */;
  %461 = @func_1166() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %462 = @func_6066() /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32]) */;
  %463 = cast(%var_6627, dtype="uint32") /* ty=Tensor[(3, 900), uint32] */;
  %464 = cast(meta[relay.Constant][29] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
  %465 = reshape(%463, newshape=[15, 15, 12]) /* ty=Tensor[(15, 15, 12), uint32] */;
  %466 = reshape(%464, newshape=[42]) /* ty=Tensor[(42), float64] */;
  %467 = @func_1783(%465, %466) /* ty=(Tensor[(15, 15, 12), uint32], Tensor[(14, ?, 3), bool], Tensor[(42), float64], Tensor[(13, 2, 12), float64], Tensor[(312), float64], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(14, 6, 7), int8], Tensor[(588), float64]) */;
  %468 = @func_6163() /* ty=Tensor[(8, 12, 3), bool] */;
  %469 = cast(%468, dtype="float32") /* ty=Tensor[(8, 12, 3), float32] */;
  %470 = cast(meta[relay.Constant][30] /* ty=Tensor[(819), bool] */, dtype="bool") /* ty=Tensor[(819), bool] */;
  %471 = cast(%var_6627, dtype="uint32") /* ty=Tensor[(3, 900), uint32] */;
  %472 = cast(%var_6627, dtype="uint32") /* ty=Tensor[(3, 900), uint32] */;
  %473 = cast(%var_6647, dtype="float32") /* ty=Tensor[(65, 4), float32] */;
  %474 = reshape(%470, newshape=[7, 13, 9]) /* ty=Tensor[(7, 13, 9), bool] */;
  %475 = reshape(%471, newshape=[2700]) /* ty=Tensor[(2700), uint32] */;
  %476 = reshape(%472, newshape=[2700]) /* ty=Tensor[(2700), uint32] */;
  %477 = reshape(%473, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %478 = @func_3051(%474, %475, %476, %477) /* ty=(Tensor[(7, 13, 9), bool], Tensor[(10, 3, 8), float32], Tensor[(42), float64], Tensor[(2700), bool], Tensor[(5, 4, 13), float32], Tensor[(260), float32]) */;
  %479 = @func_3876() /* ty=(Tensor[(10, 3, 8), int8],) */;
  %480 = %460.1;
  %481 = %461.0;
  %482 = %462.0;
  %483 = %467.6;
  %484 = log2(%469) /* ty=Tensor[(8, 12, 3), float32] */;
  %485 = %478.1;
  %486 = %479.0;
  (%480, %481, %482, %483, %var_6627, meta[relay.Constant][29] /* ty=Tensor[(42), float64] */, %484, %485, meta[relay.Constant][30] /* ty=Tensor[(819), bool] */, %var_6647, %486)
}

def @func_4502(%var_4469: Tensor[(2700), uint32], %var_4470: Tensor[(65, 4), float32], %var_4495: Tensor[(2700), uint32]) -> (Tensor[(10, 3, 8), float32], Tensor[(1, 42), float64], Tensor[(65, 4), float32], Tensor[(2700), float64]) {
  %487 = cast(%var_4469, dtype="uint32") /* ty=Tensor[(2700), uint32] */;
  %488 = cast(%var_4470, dtype="float32") /* ty=Tensor[(65, 4), float32] */;
  %489 = reshape(%487, newshape=[2700]) /* ty=Tensor[(2700), uint32] */;
  %490 = reshape(%488, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %491 = @func_3637(%489, %490) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(588), float64], Tensor[(1, 42), float64], Tensor[(260), float32], Tensor[(819), bool], Tensor[(260), float32], Tensor[(2700), uint8], Tensor[(10, 3, 8), float64]) */;
  %492 = cast(%var_4495, dtype="float64") /* ty=Tensor[(2700), float64] */;
  %493 = shape_of(%var_4469, dtype="int32") /* ty=Tensor[(1), int32] */;
  %494 = cast(%var_4469, dtype="float64") /* ty=Tensor[(2700), float64] */;
  %495 = dyn.reshape(%492, %493, newshape=[]) /* ty=Tensor[(?), float64] */;
  %496 = @func_3083() /* ty=Tensor[(10, 3, 8), float32] */;
  %497 = %491.2;
  %498 = subtract(%494, %495) /* ty=Tensor[(2700), float64] */;
  (%496, %497, %var_4470, %498)
}

def @func_5312(%var_5266: Tensor[(546), float64], %var_5267: Tensor[(78, 4), float64], %var_5272: Tensor[(260), float32], %var_5297: Tensor[(78, 4), float64], %var_5309: Tensor[(588), float64]) -> (Tensor[(8, 12, 3), bool], Tensor[(10, 3, 8), float32], Tensor[(546), float64], float64, Tensor[(10, 3, 8), float64], Tensor[(18, 150), uint32], Tensor[(260), float32], Tensor[(90, 546), uint8], Tensor[(78, 4), uint8], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(588), float64]) {
  %499 = cast(meta[relay.Constant][31] /* ty=Tensor[(90, 1), float32] */, dtype="float32") /* ty=Tensor[(90, 1), float32] */;
  %500 = cast(-8.01624f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %501 = cast(%var_5266, dtype="float64") /* ty=Tensor[(546), float64] */;
  %502 = cast(%var_5267, dtype="float64") /* ty=Tensor[(78, 4), float64] */;
  %503 = @func_1636() /* ty=Tensor[(10, 3, 8), float32] */;
  %504 = cast(%503, dtype="float32") /* ty=Tensor[(10, 3, 8), float32] */;
  %505 = reshape(%499, newshape=[1, 90]) /* ty=Tensor[(1, 90), float32] */;
  %506 = reshape(%500, newshape=[]) /* ty=float64 */;
  %507 = reshape(%501, newshape=[546]) /* ty=Tensor[(546), float64] */;
  %508 = reshape(%502, newshape=[312]) /* ty=Tensor[(312), float64] */;
  %509 = reshape(%504, newshape=[10, 3, 8]) /* ty=Tensor[(10, 3, 8), float32] */;
  %510 = @func_4021(%505, %506, %507, %508, %509) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(8, 4), uint16], Tensor[(1, 90), float32], Tensor[(10, 3, 8), float32], float64, Tensor[(546), float64], Tensor[(13, 2, 12), float64], Tensor[(312), float64], Tensor[(7, 13, 5), float32], Tensor[(455, 1), float32], Tensor[(10, 3, 8), bool]) */;
  %511 = cast(meta[relay.Constant][32] /* ty=Tensor[(18, 150), uint32] */, dtype="uint32") /* ty=Tensor[(18, 150), uint32] */;
  %512 = cast(%var_5272, dtype="float32") /* ty=Tensor[(260), float32] */;
  %513 = reshape(%511, newshape=[2700]) /* ty=Tensor[(2700), uint32] */;
  %514 = reshape(%512, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %515 = @func_3637(%513, %514) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(588), float64], Tensor[(1, 42), float64], Tensor[(260), float32], Tensor[(819), bool], Tensor[(260), float32], Tensor[(2700), uint8], Tensor[(10, 3, 8), float64]) */;
  %516 = cast(%var_5266, dtype="uint8") /* ty=Tensor[(546), uint8] */;
  %517 = cast(meta[relay.Constant][31] /* ty=Tensor[(90, 1), float32] */, dtype="uint8") /* ty=Tensor[(90, 1), uint8] */;
  %518 = cast(%var_5297, dtype="uint8") /* ty=Tensor[(78, 4), uint8] */;
  %519 = shape_of(%var_5267, dtype="int32") /* ty=Tensor[(2), int32] */;
  %520 = cast(%var_5267, dtype="uint8") /* ty=Tensor[(78, 4), uint8] */;
  %521 = dyn.reshape(%518, %519, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %522 = @func_1452() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %523 = cast(%var_5309, dtype="float64") /* ty=Tensor[(588), float64] */;
  %524 = reshape(%523, newshape=[588]) /* ty=Tensor[(588), float64] */;
  %525 = @func_1298(%524) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(42), float64], Tensor[(588), float64], Tensor[(42), float64], Tensor[(14, ?, 3), bool]) */;
  %526 = @func_3146() /* ty=Tensor[(8, 12, 3), bool] */;
  %527 = %510.5;
  %528 = %515.7;
  %529 = left_shift(%516, %517) /* ty=Tensor[(90, 546), uint8] */;
  %530 = bitwise_xor(%520, %521) /* ty=Tensor[(78, 4), uint8] */;
  %531 = %522.0;
  %532 = %525.0;
  (%526, %503, %527, -8.01624f64 /* ty=float64 */, %528, meta[relay.Constant][32] /* ty=Tensor[(18, 150), uint32] */, %var_5272, %529, %530, %531, %532, %var_5309)
}

def @func_5537() -> Tensor[(10, 3, 8), int8] {
  @func_3166() /* ty=Tensor[(10, 3, 8), int8] */
}

def @func_1598(%var_1532: Tensor[(32), uint16], %var_1533: Tensor[(288), uint16], %var_1551: Tensor[(588), float64]) -> (Tensor[(10, 3, 8), int8], Tensor[(14, ?, 3), float32], Tensor[(32), uint16], Tensor[(288), uint16], Tensor[(588), float64], Tensor[(10, 3, 8), float32], Tensor[(588), float64], Tensor[(14, ?, 3), bool]) {
  %533 = @func_1166() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %534 = %533.0;
  %535 = cast(meta[relay.Constant][33] /* ty=Tensor[(10, 3, 8), float32] */, dtype="int8") /* ty=Tensor[(10, 3, 8), int8] */;
  %536 = shape_of(%534, dtype="int32") /* ty=Tensor[(3), int32] */;
  %537 = cast(%534, dtype="int8") /* ty=Tensor[(10, 3, 8), int8] */;
  %538 = dyn.reshape(%535, %536, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %539 = cast(%var_1532, dtype="uint16") /* ty=Tensor[(32), uint16] */;
  %540 = cast(%var_1533, dtype="uint16") /* ty=Tensor[(288), uint16] */;
  %541 = cast(meta[relay.Constant][34] /* ty=Tensor[(588), float64] */, dtype="float64") /* ty=Tensor[(588), float64] */;
  %542 = reshape(%539, newshape=[1, 4, 8]) /* ty=Tensor[(1, 4, 8), uint16] */;
  %543 = reshape(%540, newshape=[9, 4, 8]) /* ty=Tensor[(9, 4, 8), uint16] */;
  %544 = reshape(%541, newshape=[588]) /* ty=Tensor[(588), float64] */;
  %545 = @func_552(%542, %543, %544) /* ty=(Tensor[(588), float64], Tensor[(42), float64], Tensor[(9, 4, 8), int32], Tensor[(14, ?, 3), float32]) */;
  %546 = cast(%var_1551, dtype="float64") /* ty=Tensor[(588), float64] */;
  %547 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(588), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %548 = cast(meta[relay.Constant][34] /* ty=Tensor[(588), float64] */, dtype="float64") /* ty=Tensor[(588), float64] */;
  %549 = dyn.reshape(%546, %547, newshape=[]) /* ty=Tensor[(?), float64] */;
  %550 = @func_1452() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %551 = cast(%var_1532, dtype="uint16") /* ty=Tensor[(32), uint16] */;
  %552 = cast(%var_1533, dtype="uint16") /* ty=Tensor[(288), uint16] */;
  %553 = cast(%var_1551, dtype="float64") /* ty=Tensor[(588), float64] */;
  %554 = reshape(%551, newshape=[1, 4, 8]) /* ty=Tensor[(1, 4, 8), uint16] */;
  %555 = reshape(%552, newshape=[9, 4, 8]) /* ty=Tensor[(9, 4, 8), uint16] */;
  %556 = reshape(%553, newshape=[588]) /* ty=Tensor[(588), float64] */;
  %557 = @func_552(%554, %555, %556) /* ty=(Tensor[(588), float64], Tensor[(42), float64], Tensor[(9, 4, 8), int32], Tensor[(14, ?, 3), float32]) */;
  %558 = %545.3;
  %559 = cast(%558, dtype="float64") /* ty=Tensor[(14, ?, 3), float64] */;
  %560 = reshape(%559, newshape=[14, 1, 3]) /* ty=Tensor[(14, 1, 3), float64] */;
  %561 = @func_121(%560) /* ty=(Tensor[(14, ?, 3), bool],) */;
  %562 = logical_xor(%537, %538) /* ty=Tensor[(10, 3, 8), int8] */;
  %563 = floor_mod(%548, %549) /* ty=Tensor[(588), float64] */;
  %564 = %550.0;
  %565 = %557.0;
  %566 = %561.0;
  (%562, %558, %var_1532, %var_1533, %563, %564, %565, %566)
}

def @func_1692(%var_1688: Tensor[(312), float64]) -> (Tensor[(10, 3, 8), float32], Tensor[(13, 2, 12), float64], Tensor[(312), float64]) {
  %567 = @func_1230() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %568 = cast(%var_1688, dtype="float64") /* ty=Tensor[(312), float64] */;
  %569 = reshape(%568, newshape=[13, 2, 12]) /* ty=Tensor[(13, 2, 12), float64] */;
  %570 = %567.0;
  %571 = @func_438(%569) /* ty=Tensor[(13, 2, 12), float64] */;
  (%570, %571, %var_1688)
}

def @func_7052() -> (Tensor[(10, 3, 8), int8],) {
  %572 = @func_3826() /* ty=(Tensor[(10, 3, 8), int8],) */;
  %573 = %572.0;
  (%573,)
}

def @func_6087(%var_6073: Tensor[(9, 10, 8), float32]) -> (Tensor[(9, 10, 8), float32], Tensor[(8, 12, 3), float32], Tensor[(40), uint64]) {
  %574 = cast(%var_6073, dtype="float32") /* ty=Tensor[(9, 10, 8), float32] */;
  %575 = cast(meta[relay.Constant][35] /* ty=Tensor[(40), uint64] */, dtype="uint64") /* ty=Tensor[(40), uint64] */;
  %576 = reshape(%575, newshape=[40]) /* ty=Tensor[(40), uint64] */;
  %577 = @func_4387(%576) /* ty=(Tensor[(8, 12, 3), float32], Tensor[(10, 4, 1), bool], uint64, Tensor[(40), uint64], uint64, Tensor[(256), float32], Tensor[(10, 3, 8), float32], Tensor[(2700), uint32], Tensor[(260), float32]) */;
  %578 = acos(%574) /* ty=Tensor[(9, 10, 8), float32] */;
  %579 = %577.0;
  (%578, %579, meta[relay.Constant][35] /* ty=Tensor[(40), uint64] */)
}

def @func_4287() -> Tensor[(8, 12, 3), bool] {
  %580 = @func_4256() /* ty=(Tensor[(8, 12, 3), bool],) */;
  %580.0
}

def @func_2623(%var_2618: int64) -> (Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(5, 12, 5), uint8], int64) {
  %581 = @func_1452() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %582 = @func_2524() /* ty=(Tensor[(10, 3, 8), float64], Tensor[(10, 3, 8), float32]) */;
  %583 = cast(%var_2618, dtype="int64") /* ty=int64 */;
  %584 = reshape(%583, newshape=[]) /* ty=int64 */;
  %585 = %581.0;
  %586 = %582.1;
  %587 = @func_2398(%584) /* ty=Tensor[(5, 12, 5), uint8] */;
  (%585, %586, %587, %var_2618)
}

def @func_4730() -> (Tensor[(10, 3, 8), float32],) {
  %588 = @func_2491() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %589 = %588.0;
  (%589,)
}

def @func_7972(%var_7939: Tensor[(12, 13, 5), int16]) -> (uint64, Tensor[(780), int16], Tensor[(12, 13, 5), uint8], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32]) {
  %590 = @func_6830() /* ty=(uint64,) */;
  %591 = cast(meta[relay.Constant][36] /* ty=Tensor[(780), int16] */, dtype="int16") /* ty=Tensor[(780), int16] */;
  %592 = cast(meta[relay.Constant][36] /* ty=Tensor[(780), int16] */, dtype="int16") /* ty=Tensor[(780), int16] */;
  %593 = reshape(%591, newshape=[12, 13, 5]) /* ty=Tensor[(12, 13, 5), int16] */;
  %594 = reshape(%592, newshape=[12, 13, 5]) /* ty=Tensor[(12, 13, 5), int16] */;
  %595 = @func_7410(%593, %594) /* ty=(Tensor[(12, 13, 5), int16],) */;
  %596 = %595.0;
  %597 = cast(%var_7939, dtype="uint8") /* ty=Tensor[(12, 13, 5), uint8] */;
  %598 = shape_of(%596, dtype="int32") /* ty=Tensor[(3), int32] */;
  %599 = cast(%596, dtype="uint8") /* ty=Tensor[(12, 13, 5), uint8] */;
  %600 = dyn.reshape(%597, %598, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %601 = @func_3504() /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32]) */;
  %602 = %601.0;
  %603 = cast(%602, dtype="float32") /* ty=Tensor[(10, 3, 8), float32] */;
  %604 = %590.0;
  %605 = right_shift(%599, %600) /* ty=Tensor[(12, 13, 5), uint8] */;
  %606 = @func_3343() /* ty=Tensor[(10, 3, 8), float32] */;
  %607 = rsqrt(%603) /* ty=Tensor[(10, 3, 8), float32] */;
  (%604, meta[relay.Constant][36] /* ty=Tensor[(780), int16] */, %605, %606, %607)
}

def @func_3773(%var_3759: Tensor[(10, 3, 8), float32]) -> (Tensor[(10, 3, 8), int16],) {
  %608 = @func_2597() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %609 = %608.0;
  %610 = cast(%var_3759, dtype="int16") /* ty=Tensor[(10, 3, 8), int16] */;
  %611 = shape_of(%609, dtype="int32") /* ty=Tensor[(3), int32] */;
  %612 = cast(%609, dtype="int16") /* ty=Tensor[(10, 3, 8), int16] */;
  %613 = dyn.reshape(%610, %611, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %614 = bitwise_or(%612, %613) /* ty=Tensor[(10, 3, 8), int16] */;
  (%614,)
}

def @func_3276() -> Tensor[(10, 3, 8), float32] {
  @func_1636() /* ty=Tensor[(10, 3, 8), float32] */
}

def @func_5793(%var_5758: Tensor[(16, 5, 12), float64], %var_5779: float64) -> (Tensor[(16, 5, 12), float64], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], float64, Tensor[(14, 13, 3), float64], Tensor[(546), float64]) {
  %615 = cast(%var_5758, dtype="float64") /* ty=Tensor[(16, 5, 12), float64] */;
  %616 = cast(%var_5779, dtype="float64") /* ty=float64 */;
  %617 = reshape(%616, newshape=[]) /* ty=float64 */;
  %618 = @func_3723(%617) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], float64, Tensor[(546), float64], Tensor[(10, 3, 8), float64], Tensor[(5, 12, 5), uint8]) */;
  %619 = cast(%var_5779, dtype="float64") /* ty=float64 */;
  %620 = cast(meta[relay.Constant][37] /* ty=Tensor[(546), float64] */, dtype="float64") /* ty=Tensor[(546), float64] */;
  %621 = reshape(%619, newshape=[]) /* ty=float64 */;
  %622 = reshape(%620, newshape=[14, 13, 3]) /* ty=Tensor[(14, 13, 3), float64] */;
  %623 = @func_1820(%621, %622) /* ty=(Tensor[(14, 13, 3), float64], Tensor[(10, 3, 8), float32], Tensor[(14, ?, 3), bool], Tensor[(42), float64]) */;
  %624 = tan(%615) /* ty=Tensor[(16, 5, 12), float64] */;
  %625 = @func_2440() /* ty=Tensor[(10, 3, 8), float32] */;
  %626 = %618.1;
  %627 = %623.0;
  (%624, %625, %626, %var_5779, %627, meta[relay.Constant][37] /* ty=Tensor[(546), float64] */)
}

def @func_3637(%var_3606: Tensor[(2700), uint32], %var_3617: Tensor[(260), float32]) -> (Tensor[(10, 3, 8), float32], Tensor[(588), float64], Tensor[(1, 42), float64], Tensor[(260), float32], Tensor[(819), bool], Tensor[(260), float32], Tensor[(2700), uint8], Tensor[(10, 3, 8), float64]) {
  %628 = cast(%var_3606, dtype="uint32") /* ty=Tensor[(2700), uint32] */;
  %629 = cast(meta[relay.Constant][38] /* ty=Tensor[(1, 42), float64] */, dtype="float64") /* ty=Tensor[(1, 42), float64] */;
  %630 = reshape(%628, newshape=[15, 15, 12]) /* ty=Tensor[(15, 15, 12), uint32] */;
  %631 = reshape(%629, newshape=[42]) /* ty=Tensor[(42), float64] */;
  %632 = @func_1783(%630, %631) /* ty=(Tensor[(15, 15, 12), uint32], Tensor[(14, ?, 3), bool], Tensor[(42), float64], Tensor[(13, 2, 12), float64], Tensor[(312), float64], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(14, 6, 7), int8], Tensor[(588), float64]) */;
  %633 = cast(meta[relay.Constant][39] /* ty=Tensor[(819), bool] */, dtype="bool") /* ty=Tensor[(819), bool] */;
  %634 = cast(%var_3606, dtype="uint32") /* ty=Tensor[(2700), uint32] */;
  %635 = cast(%var_3606, dtype="uint32") /* ty=Tensor[(2700), uint32] */;
  %636 = cast(%var_3617, dtype="float32") /* ty=Tensor[(260), float32] */;
  %637 = reshape(%633, newshape=[7, 13, 9]) /* ty=Tensor[(7, 13, 9), bool] */;
  %638 = reshape(%634, newshape=[2700]) /* ty=Tensor[(2700), uint32] */;
  %639 = reshape(%635, newshape=[2700]) /* ty=Tensor[(2700), uint32] */;
  %640 = reshape(%636, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %641 = @func_3051(%637, %638, %639, %640) /* ty=(Tensor[(7, 13, 9), bool], Tensor[(10, 3, 8), float32], Tensor[(42), float64], Tensor[(2700), bool], Tensor[(5, 4, 13), float32], Tensor[(260), float32]) */;
  %642 = cast(meta[relay.Constant][40] /* ty=Tensor[(2700), uint32] */, dtype="uint8") /* ty=Tensor[(2700), uint8] */;
  %643 = shape_of(%var_3606, dtype="int32") /* ty=Tensor[(1), int32] */;
  %644 = cast(%var_3606, dtype="uint8") /* ty=Tensor[(2700), uint8] */;
  %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %646 = @func_2524() /* ty=(Tensor[(10, 3, 8), float64], Tensor[(10, 3, 8), float32]) */;
  %647 = @func_2440() /* ty=Tensor[(10, 3, 8), float32] */;
  %648 = %632.9;
  %649 = %641.5;
  %650 = bitwise_and(%644, %645) /* ty=Tensor[(2700), uint8] */;
  %651 = %646.0;
  (%647, %648, meta[relay.Constant][38] /* ty=Tensor[(1, 42), float64] */, %649, meta[relay.Constant][39] /* ty=Tensor[(819), bool] */, %var_3617, %650, %651)
}

def @func_7756(%var_7737: Tensor[(256), float32]) -> (Tensor[(10, 3, 8), int8], uint64, Tensor[(256), float32]) {
  %652 = cast(%var_7737, dtype="float32") /* ty=Tensor[(256), float32] */;
  %653 = reshape(%652, newshape=[8, 8, 4]) /* ty=Tensor[(8, 8, 4), float32] */;
  %654 = @func_2826(%653) /* ty=(Tensor[(8, 8, 4), float32], Tensor[(10, 4, 1), bool], uint64, Tensor[(40), uint64]) */;
  %655 = @func_5845() /* ty=Tensor[(10, 3, 8), int8] */;
  %656 = %654.2;
  (%655, %656, %var_7737)
}

def @func_7307(%var_7272: Tensor[(10, 3, 8), float32]) -> (Tensor[(10, 3, 8), int64], Tensor[(312), float64], Tensor[(312), float64]) {
  %657 = @func_6066() /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32]) */;
  %658 = %657.2;
  %659 = cast(%var_7272, dtype="int64") /* ty=Tensor[(10, 3, 8), int64] */;
  %660 = shape_of(%658, dtype="int32") /* ty=Tensor[(3), int32] */;
  %661 = cast(%658, dtype="int64") /* ty=Tensor[(10, 3, 8), int64] */;
  %662 = dyn.reshape(%659, %660, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %663 = cast(meta[relay.Constant][41] /* ty=Tensor[(312), float64] */, dtype="float64") /* ty=Tensor[(312), float64] */;
  %664 = reshape(%663, newshape=[312]) /* ty=Tensor[(312), float64] */;
  %665 = @func_5050(%664) /* ty=(Tensor[(8, 12, 3), bool], Tensor[(10, 3, 8), float64], Tensor[(312), float64], Tensor[(312), float64], Tensor[(546, 1), float64], Tensor[(546, 1), float64]) */;
  %666 = bitwise_and(%661, %662) /* ty=Tensor[(10, 3, 8), int64] */;
  %667 = %665.2;
  (%666, %667, meta[relay.Constant][41] /* ty=Tensor[(312), float64] */)
}

def @func_552(%var_496: Tensor[(1, 4, 8), uint16], %var_497: Tensor[(9, 4, 8), uint16], %var_513: Tensor[(588), float64]) -> (Tensor[(588), float64], Tensor[(42), float64], Tensor[(9, 4, 8), int32], Tensor[(14, ?, 3), float32]) {
  %668 = cast(%var_496, dtype="float64") /* ty=Tensor[(1, 4, 8), float64] */;
  %669 = tan(%668) /* ty=Tensor[(1, 4, 8), float64] */;
  %670 = cast(%var_496, dtype="bool") /* ty=Tensor[(1, 4, 8), bool] */;
  %671 = cast(%var_497, dtype="bool") /* ty=Tensor[(9, 4, 8), bool] */;
  %672 = less_equal(%670, %671) /* ty=Tensor[(9, 4, 8), bool] */;
  %673 = cast(%669, dtype="int32") /* ty=Tensor[(1, 4, 8), int32] */;
  %674 = cast(%672, dtype="int32") /* ty=Tensor[(9, 4, 8), int32] */;
  %675 = cast(%var_513, dtype="float64") /* ty=Tensor[(588), float64] */;
  %676 = cast(meta[relay.Constant][42] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
  %677 = cast(%var_513, dtype="float64") /* ty=Tensor[(588), float64] */;
  %678 = reshape(%675, newshape=[14, 6, 7]) /* ty=Tensor[(14, 6, 7), float64] */;
  %679 = reshape(%676, newshape=[42]) /* ty=Tensor[(42), float64] */;
  %680 = reshape(%677, newshape=[14, 6, 7]) /* ty=Tensor[(14, 6, 7), float64] */;
  %681 = @func_310(%678, %679, %680) /* ty=(Tensor[(14, 6, 7), float64], Tensor[(14, ?, 3), bool], Tensor[(42), float64], Tensor[(14, 6, 7), int8], Tensor[(14, ?, 3), bool]) */;
  %682 = %681.4;
  %683 = cast(%682, dtype="float32") /* ty=Tensor[(14, ?, 3), float32] */;
  %684 = subtract(%673, %674) /* ty=Tensor[(9, 4, 8), int32] */;
  %685 = cosh(%683) /* ty=Tensor[(14, ?, 3), float32] */;
  (%var_513, meta[relay.Constant][42] /* ty=Tensor[(42), float64] */, %684, %685)
}

def @func_7223() -> Tensor[(10, 3, 8), float32] {
  %686 = @func_4730() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %686.0
}

def @func_938(%var_918: Tensor[(3, 6, 5), float32]) -> (Tensor[(588), float64], Tensor[(8, 4), uint16], Tensor[(288), uint16], Tensor[(588), float64], Tensor[(3, 6, 5), float64]) {
  %687 = cast(meta[relay.Constant][43] /* ty=Tensor[(8, 4), uint16] */, dtype="uint16") /* ty=Tensor[(8, 4), uint16] */;
  %688 = cast(meta[relay.Constant][44] /* ty=Tensor[(288), uint16] */, dtype="uint16") /* ty=Tensor[(288), uint16] */;
  %689 = cast(meta[relay.Constant][45] /* ty=Tensor[(588), float64] */, dtype="float64") /* ty=Tensor[(588), float64] */;
  %690 = reshape(%687, newshape=[1, 4, 8]) /* ty=Tensor[(1, 4, 8), uint16] */;
  %691 = reshape(%688, newshape=[9, 4, 8]) /* ty=Tensor[(9, 4, 8), uint16] */;
  %692 = reshape(%689, newshape=[588]) /* ty=Tensor[(588), float64] */;
  %693 = @func_552(%690, %691, %692) /* ty=(Tensor[(588), float64], Tensor[(42), float64], Tensor[(9, 4, 8), int32], Tensor[(14, ?, 3), float32]) */;
  %694 = cast(%var_918, dtype="float32") /* ty=Tensor[(3, 6, 5), float32] */;
  %695 = rsqrt(%694) /* ty=Tensor[(3, 6, 5), float32] */;
  %696 = cast(%var_918, dtype="float64") /* ty=Tensor[(3, 6, 5), float64] */;
  %697 = shape_of(%695, dtype="int32") /* ty=Tensor[(3), int32] */;
  %698 = cast(%695, dtype="float64") /* ty=Tensor[(3, 6, 5), float64] */;
  %699 = dyn.reshape(%696, %697, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %700 = %693.0;
  %701 = floor_mod(%698, %699) /* ty=Tensor[(3, 6, 5), float64] */;
  (%700, meta[relay.Constant][43] /* ty=Tensor[(8, 4), uint16] */, meta[relay.Constant][44] /* ty=Tensor[(288), uint16] */, meta[relay.Constant][45] /* ty=Tensor[(588), float64] */, %701)
}

def @func_4387(%var_4351: Tensor[(40), uint64]) -> (Tensor[(8, 12, 3), float32], Tensor[(10, 4, 1), bool], uint64, Tensor[(40), uint64], uint64, Tensor[(256), float32], Tensor[(10, 3, 8), float32], Tensor[(2700), uint32], Tensor[(260), float32]) {
  %702 = @func_3528() /* ty=Tensor[(8, 12, 3), bool] */;
  %703 = cast(%702, dtype="float32") /* ty=Tensor[(8, 12, 3), float32] */;
  %704 = cast(meta[relay.Constant][46] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %705 = cast(%var_4351, dtype="uint64") /* ty=Tensor[(40), uint64] */;
  %706 = reshape(%704, newshape=[]) /* ty=uint64 */;
  %707 = reshape(%705, newshape=[10, 4, 1]) /* ty=Tensor[(10, 4, 1), uint64] */;
  %708 = @func_2325(%706, %707) /* ty=(Tensor[(10, 4, 1), bool],) */;
  %709 = cast(meta[relay.Constant][47] /* ty=Tensor[(256), float32] */, dtype="float32") /* ty=Tensor[(256), float32] */;
  %710 = reshape(%709, newshape=[8, 8, 4]) /* ty=Tensor[(8, 8, 4), float32] */;
  %711 = @func_2826(%710) /* ty=(Tensor[(8, 8, 4), float32], Tensor[(10, 4, 1), bool], uint64, Tensor[(40), uint64]) */;
  %712 = cast(meta[relay.Constant][48] /* ty=Tensor[(2700), uint32] */, dtype="uint32") /* ty=Tensor[(2700), uint32] */;
  %713 = cast(meta[relay.Constant][49] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
  %714 = reshape(%712, newshape=[2700]) /* ty=Tensor[(2700), uint32] */;
  %715 = reshape(%713, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %716 = @func_3637(%714, %715) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(588), float64], Tensor[(1, 42), float64], Tensor[(260), float32], Tensor[(819), bool], Tensor[(260), float32], Tensor[(2700), uint8], Tensor[(10, 3, 8), float64]) */;
  %717 = log10(%703) /* ty=Tensor[(8, 12, 3), float32] */;
  %718 = %708.0;
  %719 = %711.2;
  %720 = %716.0;
  (%717, %718, meta[relay.Constant][46] /* ty=uint64 */, %var_4351, %719, meta[relay.Constant][47] /* ty=Tensor[(256), float32] */, %720, meta[relay.Constant][48] /* ty=Tensor[(2700), uint32] */, meta[relay.Constant][49] /* ty=Tensor[(260), float32] */)
}

def @func_1783(%var_1734: Tensor[(15, 15, 12), uint32], %var_1740: Tensor[(42), float64]) -> (Tensor[(15, 15, 12), uint32], Tensor[(14, ?, 3), bool], Tensor[(42), float64], Tensor[(13, 2, 12), float64], Tensor[(312), float64], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(14, 6, 7), int8], Tensor[(588), float64]) {
  %721 = cast(meta[relay.Constant][50] /* ty=Tensor[(15, 15, 12), uint32] */, dtype="uint32") /* ty=Tensor[(15, 15, 12), uint32] */;
  %722 = shape_of(%var_1734, dtype="int32") /* ty=Tensor[(3), int32] */;
  %723 = cast(%var_1734, dtype="uint32") /* ty=Tensor[(15, 15, 12), uint32] */;
  %724 = dyn.reshape(%721, %722, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %725 = cast(%var_1740, dtype="float64") /* ty=Tensor[(42), float64] */;
  %726 = reshape(%725, newshape=[14, 1, 3]) /* ty=Tensor[(14, 1, 3), float64] */;
  %727 = @func_121(%726) /* ty=(Tensor[(14, ?, 3), bool],) */;
  %728 = cast(meta[relay.Constant][51] /* ty=Tensor[(312), float64] */, dtype="float64") /* ty=Tensor[(312), float64] */;
  %729 = reshape(%728, newshape=[13, 2, 12]) /* ty=Tensor[(13, 2, 12), float64] */;
  %730 = @func_1452() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %731 = @func_1166() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %732 = @func_1166() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %733 = %732.0;
  %734 = cast(%733, dtype="float32") /* ty=Tensor[(10, 3, 8), float32] */;
  %735 = cast(meta[relay.Constant][52] /* ty=Tensor[(588), float64] */, dtype="float64") /* ty=Tensor[(588), float64] */;
  %736 = %727.0;
  %737 = cast(%736, dtype="float64") /* ty=Tensor[(14, ?, 3), float64] */;
  %738 = cast(meta[relay.Constant][52] /* ty=Tensor[(588), float64] */, dtype="float64") /* ty=Tensor[(588), float64] */;
  %739 = reshape(%735, newshape=[14, 6, 7]) /* ty=Tensor[(14, 6, 7), float64] */;
  %740 = reshape(%737, newshape=[42]) /* ty=Tensor[(42), float64] */;
  %741 = reshape(%738, newshape=[14, 6, 7]) /* ty=Tensor[(14, 6, 7), float64] */;
  %742 = @func_310(%739, %740, %741) /* ty=(Tensor[(14, 6, 7), float64], Tensor[(14, ?, 3), bool], Tensor[(42), float64], Tensor[(14, 6, 7), int8], Tensor[(14, ?, 3), bool]) */;
  %743 = logical_xor(%723, %724) /* ty=Tensor[(15, 15, 12), uint32] */;
  %744 = @func_438(%729) /* ty=Tensor[(13, 2, 12), float64] */;
  %745 = %730.0;
  %746 = %731.0;
  %747 = sin(%734) /* ty=Tensor[(10, 3, 8), float32] */;
  %748 = %742.3;
  (%743, %736, %var_1740, %744, meta[relay.Constant][51] /* ty=Tensor[(312), float64] */, %745, %746, %747, %748, meta[relay.Constant][52] /* ty=Tensor[(588), float64] */)
}

def @func_8487() -> (Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32]) {
  %749 = @func_6066() /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32]) */;
  %750 = @func_1452() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %751 = %749.2;
  %752 = %750.0;
  (%751, %752)
}

def @func_2364(%var_2362: Tensor[(546, 1), float64]) -> (Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], float64, Tensor[(546, 1), float64]) {
  %753 = @func_1166() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %754 = cast(-0.271183f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %755 = cast(%var_2362, dtype="float64") /* ty=Tensor[(546, 1), float64] */;
  %756 = reshape(%754, newshape=[]) /* ty=float64 */;
  %757 = reshape(%755, newshape=[14, 13, 3]) /* ty=Tensor[(14, 13, 3), float64] */;
  %758 = @func_1820(%756, %757) /* ty=(Tensor[(14, 13, 3), float64], Tensor[(10, 3, 8), float32], Tensor[(14, ?, 3), bool], Tensor[(42), float64]) */;
  %759 = %753.0;
  %760 = %758.1;
  (%759, %760, -0.271183f64 /* ty=float64 */, %var_2362)
}

def @func_4543() -> (Tensor[(10, 3, 8), float32],) {
  %761 = @func_3597() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %762 = %761.0;
  (%762,)
}

def @func_3051(%var_3013: Tensor[(7, 13, 9), bool], %var_3022: Tensor[(2700), uint32], %var_3039: Tensor[(2700), uint32], %var_3048: Tensor[(260), float32]) -> (Tensor[(7, 13, 9), bool], Tensor[(10, 3, 8), float32], Tensor[(42), float64], Tensor[(2700), bool], Tensor[(5, 4, 13), float32], Tensor[(260), float32]) {
  %763 = cast(meta[relay.Constant][53] /* ty=Tensor[(7, 13, 9), bool] */, dtype="bool") /* ty=Tensor[(7, 13, 9), bool] */;
  %764 = shape_of(%var_3013, dtype="int32") /* ty=Tensor[(3), int32] */;
  %765 = cast(%var_3013, dtype="bool") /* ty=Tensor[(7, 13, 9), bool] */;
  %766 = dyn.reshape(%763, %764, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %767 = cast(%var_3022, dtype="uint32") /* ty=Tensor[(2700), uint32] */;
  %768 = cast(meta[relay.Constant][54] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
  %769 = reshape(%767, newshape=[15, 15, 12]) /* ty=Tensor[(15, 15, 12), uint32] */;
  %770 = reshape(%768, newshape=[42]) /* ty=Tensor[(42), float64] */;
  %771 = @func_1783(%769, %770) /* ty=(Tensor[(15, 15, 12), uint32], Tensor[(14, ?, 3), bool], Tensor[(42), float64], Tensor[(13, 2, 12), float64], Tensor[(312), float64], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(14, 6, 7), int8], Tensor[(588), float64]) */;
  %772 = cast(%var_3039, dtype="bool") /* ty=Tensor[(2700), bool] */;
  %773 = shape_of(%var_3022, dtype="int32") /* ty=Tensor[(1), int32] */;
  %774 = cast(%var_3022, dtype="bool") /* ty=Tensor[(2700), bool] */;
  %775 = dyn.reshape(%772, %773, newshape=[]) /* ty=Tensor[(?), bool] */;
  %776 = cast(%var_3048, dtype="float32") /* ty=Tensor[(260), float32] */;
  %777 = reshape(%776, newshape=[5, 4, 13]) /* ty=Tensor[(5, 4, 13), float32] */;
  %778 = @func_1438(%777) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(5, 4, 13), float32]) */;
  %779 = logical_and(%765, %766) /* ty=Tensor[(7, 13, 9), bool] */;
  %780 = %771.7;
  %781 = equal(%774, %775) /* ty=Tensor[(2700), bool] */;
  %782 = %778.1;
  (%779, %780, meta[relay.Constant][54] /* ty=Tensor[(42), float64] */, %781, %782, %var_3048)
}

def @main(%var_8628: Tensor[(11, 4, 8), float32]) -> (Tensor[(11, 4, 8), float32],) {
  %783 = cast(%var_8628, dtype="float32") /* ty=Tensor[(11, 4, 8), float32] */;
  %784 = sqrt(%783) /* ty=Tensor[(11, 4, 8), float32] */;
  (%784,)
}

def @func_1452() -> (Tensor[(10, 3, 8), float32],) {
  %785 = @func_1166() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %786 = %785.0;
  (%786,)
}

def @func_6251(%var_6193: Tensor[(10, 3, 8), int8]) -> (Tensor[(10, 3, 8), bool], Tensor[(10, 3, 8), float32]) {
  %787 = @func_5537() /* ty=Tensor[(10, 3, 8), int8] */;
  %788 = cast(%var_6193, dtype="bool") /* ty=Tensor[(10, 3, 8), bool] */;
  %789 = shape_of(%787, dtype="int32") /* ty=Tensor[(3), int32] */;
  %790 = cast(%787, dtype="bool") /* ty=Tensor[(10, 3, 8), bool] */;
  %791 = dyn.reshape(%788, %789, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %792 = @func_4543() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %793 = logical_and(%790, %791) /* ty=Tensor[(10, 3, 8), bool] */;
  %794 = %792.0;
  (%793, %794)
}

def @func_4256() -> (Tensor[(8, 12, 3), bool],) {
  %795 = @func_3146() /* ty=Tensor[(8, 12, 3), bool] */;
  (%795,)
}

def @func_3343() -> Tensor[(10, 3, 8), float32] {
  @func_1865() /* ty=Tensor[(10, 3, 8), float32] */
}

def @func_6304(%var_6268: Tensor[(10, 3, 8), float32], %var_6286: Tensor[(960), float64]) -> (Tensor[(10, 3, 8), float32], Tensor[(588), float64], Tensor[(15, 6), float32], Tensor[(10, 3, 8), float32], Tensor[(960), float64], float64) {
  %796 = @func_2597() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %797 = %796.0;
  %798 = cast(%var_6268, dtype="float32") /* ty=Tensor[(10, 3, 8), float32] */;
  %799 = shape_of(%797, dtype="int32") /* ty=Tensor[(3), int32] */;
  %800 = cast(%797, dtype="float32") /* ty=Tensor[(10, 3, 8), float32] */;
  %801 = dyn.reshape(%798, %799, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %802 = cast(meta[relay.Constant][55] /* ty=Tensor[(15, 6), float32] */, dtype="float32") /* ty=Tensor[(15, 6), float32] */;
  %803 = reshape(%802, newshape=[3, 6, 5]) /* ty=Tensor[(3, 6, 5), float32] */;
  %804 = @func_938(%803) /* ty=(Tensor[(588), float64], Tensor[(8, 4), uint16], Tensor[(288), uint16], Tensor[(588), float64], Tensor[(3, 6, 5), float64]) */;
  %805 = cast(%var_6286, dtype="float64") /* ty=Tensor[(960), float64] */;
  %806 = cast(-3.62576f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %807 = reshape(%805, newshape=[16, 5, 12]) /* ty=Tensor[(16, 5, 12), float64] */;
  %808 = reshape(%806, newshape=[]) /* ty=float64 */;
  %809 = @func_5793(%807, %808) /* ty=(Tensor[(16, 5, 12), float64], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], float64, Tensor[(14, 13, 3), float64], Tensor[(546), float64]) */;
  %810 = floor_divide(%800, %801) /* ty=Tensor[(10, 3, 8), float32] */;
  %811 = %804.0;
  %812 = %809.2;
  (%810, %811, meta[relay.Constant][55] /* ty=Tensor[(15, 6), float32] */, %812, %var_6286, -3.62576f64 /* ty=float64 */)
}

def @func_6414(%var_6366: Tensor[(2700), uint32]) -> (Tensor[(8, 12, 3), bool], Tensor[(42), float64], Tensor[(588), int32], Tensor[(2700), uint32], Tensor[(10, 3, 8), float32], Tensor[(8, 12, 3), bool], Tensor[(10, 3, 8), int8], Tensor[(10, 3, 8), int8], Tensor[(8, 12, 3), bool]) {
  %813 = cast(meta[relay.Constant][56] /* ty=Tensor[(588), int32] */, dtype="int32") /* ty=Tensor[(588), int32] */;
  %814 = cast(%var_6366, dtype="uint32") /* ty=Tensor[(2700), uint32] */;
  %815 = reshape(%813, newshape=[7, 14, 6]) /* ty=Tensor[(7, 14, 6), int32] */;
  %816 = reshape(%814, newshape=[2700]) /* ty=Tensor[(2700), uint32] */;
  %817 = @func_2911(%815, %816) /* ty=(Tensor[(7, 14, 6), float32], Tensor[(312), float64], Tensor[(2700), uint32], Tensor[(42), float64]) */;
  %818 = @func_2491() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %819 = @func_4256() /* ty=(Tensor[(8, 12, 3), bool],) */;
  %820 = @func_3146() /* ty=Tensor[(8, 12, 3), bool] */;
  %821 = %817.3;
  %822 = %818.0;
  %823 = @func_5821() /* ty=Tensor[(8, 12, 3), bool] */;
  %824 = @func_5537() /* ty=Tensor[(10, 3, 8), int8] */;
  %825 = @func_3166() /* ty=Tensor[(10, 3, 8), int8] */;
  %826 = %819.0;
  (%820, %821, meta[relay.Constant][56] /* ty=Tensor[(588), int32] */, %var_6366, %822, %823, %824, %825, %826)
}

def @func_7410(%var_7404: Tensor[(12, 13, 5), int16], %var_7405: Tensor[(12, 13, 5), int16]) -> (Tensor[(12, 13, 5), int16],) {
  %827 = cast(%var_7405, dtype="int16") /* ty=Tensor[(12, 13, 5), int16] */;
  %828 = shape_of(%var_7404, dtype="int32") /* ty=Tensor[(3), int32] */;
  %829 = cast(%var_7404, dtype="int16") /* ty=Tensor[(12, 13, 5), int16] */;
  %830 = dyn.reshape(%827, %828, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %831 = left_shift(%829, %830) /* ty=Tensor[(12, 13, 5), int16] */;
  (%831,)
}

def @func_1820(%var_1804: float64, %var_1805: Tensor[(14, 13, 3), float64]) -> (Tensor[(14, 13, 3), float64], Tensor[(10, 3, 8), float32], Tensor[(14, ?, 3), bool], Tensor[(42), float64]) {
  %832 = cast(%var_1804, dtype="float64") /* ty=float64 */;
  %833 = cast(%var_1805, dtype="float64") /* ty=Tensor[(14, 13, 3), float64] */;
  %834 = @func_1230() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %835 = cast(meta[relay.Constant][57] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
  %836 = reshape(%835, newshape=[14, 1, 3]) /* ty=Tensor[(14, 1, 3), float64] */;
  %837 = @func_121(%836) /* ty=(Tensor[(14, ?, 3), bool],) */;
  %838 = divide(%832, %833) /* ty=Tensor[(14, 13, 3), float64] */;
  %839 = %834.0;
  %840 = %837.0;
  (%838, %839, %840, meta[relay.Constant][57] /* ty=Tensor[(42), float64] */)
}

def @func_6066() -> (Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32]) {
  %841 = @func_4315() /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), int16]) */;
  %842 = @func_2491() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %843 = @func_1452() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %844 = %841.0;
  %845 = %842.0;
  %846 = %843.0;
  (%844, %845, %846)
}

def @func_4021(%var_3973: Tensor[(1, 90), float32], %var_3995: float64, %var_3996: Tensor[(546), float64], %var_4000: Tensor[(312), float64], %var_4012: Tensor[(10, 3, 8), float32]) -> (Tensor[(10, 3, 8), float32], Tensor[(8, 4), uint16], Tensor[(1, 90), float32], Tensor[(10, 3, 8), float32], float64, Tensor[(546), float64], Tensor[(13, 2, 12), float64], Tensor[(312), float64], Tensor[(7, 13, 5), float32], Tensor[(455, 1), float32], Tensor[(10, 3, 8), bool]) {
  %847 = @func_3597() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %848 = cast(%var_3973, dtype="float32") /* ty=Tensor[(1, 90), float32] */;
  %849 = reshape(%848, newshape=[3, 6, 5]) /* ty=Tensor[(3, 6, 5), float32] */;
  %850 = @func_938(%849) /* ty=(Tensor[(588), float64], Tensor[(8, 4), uint16], Tensor[(288), uint16], Tensor[(588), float64], Tensor[(3, 6, 5), float64]) */;
  %851 = @func_1166() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %852 = cast(%var_4000, dtype="float64") /* ty=Tensor[(312), float64] */;
  %853 = reshape(%852, newshape=[13, 2, 12]) /* ty=Tensor[(13, 2, 12), float64] */;
  %854 = cast(meta[relay.Constant][58] /* ty=Tensor[(455, 1), float32] */, dtype="float32") /* ty=Tensor[(455, 1), float32] */;
  %855 = reshape(%854, newshape=[7, 13, 5]) /* ty=Tensor[(7, 13, 5), float32] */;
  %856 = cast(%var_3995, dtype="float64") /* ty=float64 */;
  %857 = cast(%var_3996, dtype="float64") /* ty=Tensor[(546), float64] */;
  %858 = reshape(%856, newshape=[]) /* ty=float64 */;
  %859 = reshape(%857, newshape=[14, 13, 3]) /* ty=Tensor[(14, 13, 3), float64] */;
  %860 = @func_1820(%858, %859) /* ty=(Tensor[(14, 13, 3), float64], Tensor[(10, 3, 8), float32], Tensor[(14, ?, 3), bool], Tensor[(42), float64]) */;
  %861 = %860.1;
  %862 = cast(%var_4012, dtype="bool") /* ty=Tensor[(10, 3, 8), bool] */;
  %863 = shape_of(%861, dtype="int32") /* ty=Tensor[(3), int32] */;
  %864 = cast(%861, dtype="bool") /* ty=Tensor[(10, 3, 8), bool] */;
  %865 = dyn.reshape(%862, %863, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %866 = %847.0;
  %867 = %850.1;
  %868 = %851.0;
  %869 = @func_438(%853) /* ty=Tensor[(13, 2, 12), float64] */;
  %870 = @func_3935(%855) /* ty=Tensor[(7, 13, 5), float32] */;
  %871 = logical_or(%864, %865) /* ty=Tensor[(10, 3, 8), bool] */;
  (%866, %867, %var_3973, %868, %var_3995, %var_3996, %869, %var_4000, %870, meta[relay.Constant][58] /* ty=Tensor[(455, 1), float32] */, %871)
}

def @func_7879() -> Tensor[(10, 3, 8), float32] {
  %872 = @func_6066() /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32]) */;
  %872.1
}

def @func_1175() -> (Tensor[(10, 3, 8), float32],) {
  %873 = @func_1166() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %874 = %873.0;
  (%874,)
}

def @func_1298(%var_1285: Tensor[(588), float64]) -> (Tensor[(10, 3, 8), float32], Tensor[(42), float64], Tensor[(588), float64], Tensor[(42), float64], Tensor[(14, ?, 3), bool]) {
  %875 = @func_1175() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %876 = %875.0;
  %877 = cast(%876, dtype="float32") /* ty=Tensor[(10, 3, 8), float32] */;
  %878 = cast(%var_1285, dtype="float64") /* ty=Tensor[(588), float64] */;
  %879 = cast(meta[relay.Constant][59] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
  %880 = cast(%var_1285, dtype="float64") /* ty=Tensor[(588), float64] */;
  %881 = reshape(%878, newshape=[14, 6, 7]) /* ty=Tensor[(14, 6, 7), float64] */;
  %882 = reshape(%879, newshape=[42]) /* ty=Tensor[(42), float64] */;
  %883 = reshape(%880, newshape=[14, 6, 7]) /* ty=Tensor[(14, 6, 7), float64] */;
  %884 = @func_310(%881, %882, %883) /* ty=(Tensor[(14, 6, 7), float64], Tensor[(14, ?, 3), bool], Tensor[(42), float64], Tensor[(14, 6, 7), int8], Tensor[(14, ?, 3), bool]) */;
  %885 = cast(meta[relay.Constant][59] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
  %886 = reshape(%885, newshape=[14, 1, 3]) /* ty=Tensor[(14, 1, 3), float64] */;
  %887 = @func_121(%886) /* ty=(Tensor[(14, ?, 3), bool],) */;
  %888 = log2(%877) /* ty=Tensor[(10, 3, 8), float32] */;
  %889 = %884.2;
  %890 = %887.0;
  (%888, %889, %var_1285, meta[relay.Constant][59] /* ty=Tensor[(42), float64] */, %890)
}

def @func_6713(%var_6698: float64, %var_6699: Tensor[(5, 16, 11), float64]) -> (Tensor[(5, 16, 11), bool], Tensor[(5, 16, 11), float32]) {
  %891 = cast(%var_6698, dtype="bool") /* ty=bool */;
  %892 = cast(%var_6699, dtype="bool") /* ty=Tensor[(5, 16, 11), bool] */;
  %893 = cast(meta[relay.Constant][60] /* ty=Tensor[(5, 16, 11), float64] */, dtype="float32") /* ty=Tensor[(5, 16, 11), float32] */;
  %894 = shape_of(%var_6699, dtype="int32") /* ty=Tensor[(3), int32] */;
  %895 = cast(%var_6699, dtype="float32") /* ty=Tensor[(5, 16, 11), float32] */;
  %896 = dyn.reshape(%893, %894, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %897 = not_equal(%891, %892) /* ty=Tensor[(5, 16, 11), bool] */;
  %898 = multiply(%895, %896) /* ty=Tensor[(5, 16, 11), float32] */;
  (%897, %898)
}

def @func_5436() -> (Tensor[(10, 3, 8), float32],) {
  %899 = @func_4100() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %900 = %899.0;
  (%900,)
}

def @func_5722() -> Tensor[(10, 3, 8), float32] {
  %901 = @func_1452() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %901.0
}

def @func_6465(%var_6460: uint32, %var_6461: Tensor[(12, 7, 10), uint32]) -> (Tensor[(12, 7, 10), uint32],) {
  %902 = cast(%var_6460, dtype="uint32") /* ty=uint32 */;
  %903 = cast(%var_6461, dtype="uint32") /* ty=Tensor[(12, 7, 10), uint32] */;
  %904 = subtract(%902, %903) /* ty=Tensor[(12, 7, 10), uint32] */;
  (%904,)
}

def @func_6830() -> (uint64,) {
  %905 = @func_5240() /* ty=(Tensor[(10, 3, 8), float32], uint64, Tensor[(10, 4), uint64]) */;
  %906 = %905.1;
  (%906,)
}

def @func_2850() -> Tensor[(10, 3, 8), int8] {
  %907 = @func_2524() /* ty=(Tensor[(10, 3, 8), float64], Tensor[(10, 3, 8), float32]) */;
  %908 = %907.1;
  %909 = cast(meta[relay.Constant][61] /* ty=Tensor[(10, 3, 8), float32] */, dtype="int8") /* ty=Tensor[(10, 3, 8), int8] */;
  %910 = shape_of(%908, dtype="int32") /* ty=Tensor[(3), int32] */;
  %911 = cast(%908, dtype="int8") /* ty=Tensor[(10, 3, 8), int8] */;
  %912 = dyn.reshape(%909, %910, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  subtract(%911, %912) /* ty=Tensor[(10, 3, 8), int8] */
}

def @func_5086(%var_5071: Tensor[(14, 10, 13), float64]) -> (Tensor[(14, 10, 13), float64],) {
  %913 = cast(2.94303f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %914 = cast(%var_5071, dtype="float64") /* ty=Tensor[(14, 10, 13), float64] */;
  %915 = add(%913, %914) /* ty=Tensor[(14, 10, 13), float64] */;
  (%915,)
}

def @func_4240(%var_4198: Tensor[(8, 12, 3), bool]) -> (Tensor[(8, 12, 3), int16], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(7, 13, 5), bool], Tensor[(7, 13, 5), uint8]) {
  %916 = @func_3146() /* ty=Tensor[(8, 12, 3), bool] */;
  %917 = cast(%var_4198, dtype="int16") /* ty=Tensor[(8, 12, 3), int16] */;
  %918 = shape_of(%916, dtype="int32") /* ty=Tensor[(3), int32] */;
  %919 = cast(%916, dtype="int16") /* ty=Tensor[(8, 12, 3), int16] */;
  %920 = dyn.reshape(%917, %918, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %921 = @func_2524() /* ty=(Tensor[(10, 3, 8), float64], Tensor[(10, 3, 8), float32]) */;
  %922 = @func_4100() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %923 = cast(meta[relay.Constant][62] /* ty=Tensor[(455), float32] */, dtype="float32") /* ty=Tensor[(455), float32] */;
  %924 = reshape(%923, newshape=[7, 13, 5]) /* ty=Tensor[(7, 13, 5), float32] */;
  %925 = @func_3935(%924) /* ty=Tensor[(7, 13, 5), float32] */;
  %926 = cast(meta[relay.Constant][62] /* ty=Tensor[(455), float32] */, dtype="bool") /* ty=Tensor[(455), bool] */;
  %927 = shape_of(%925, dtype="int32") /* ty=Tensor[(3), int32] */;
  %928 = cast(%925, dtype="bool") /* ty=Tensor[(7, 13, 5), bool] */;
  %929 = dyn.reshape(%926, %927, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %930 = cast(meta[relay.Constant][62] /* ty=Tensor[(455), float32] */, dtype="uint8") /* ty=Tensor[(455), uint8] */;
  %931 = shape_of(%925, dtype="int32") /* ty=Tensor[(3), int32] */;
  %932 = cast(%925, dtype="uint8") /* ty=Tensor[(7, 13, 5), uint8] */;
  %933 = dyn.reshape(%930, %931, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %934 = multiply(%919, %920) /* ty=Tensor[(8, 12, 3), int16] */;
  %935 = %921.1;
  %936 = %922.0;
  %937 = greater_equal(%928, %929) /* ty=Tensor[(7, 13, 5), bool] */;
  %938 = multiply(%932, %933) /* ty=Tensor[(7, 13, 5), uint8] */;
  (%934, %935, %936, %937, %938)
}

def @func_8550() -> Tensor[(10, 3, 8), float32] {
  %939 = @func_3597() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %939.0
}

def @func_8089(%var_8083: uint8) -> (Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], uint8, uint8) {
  %940 = @func_4543() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %941 = cast(%var_8083, dtype="uint8") /* ty=uint8 */;
  %942 = reshape(%941, newshape=[]) /* ty=uint8 */;
  %943 = @func_6929(%942) /* ty=(Tensor[(10, 3, 8), int8], Tensor[(2184), uint8], Tensor[(588), float64], uint8, Tensor[(2184), uint8]) */;
  %944 = %940.0;
  %945 = @func_7879() /* ty=Tensor[(10, 3, 8), float32] */;
  %946 = %943.3;
  (%944, %945, %946, %var_8083)
}

def @func_7249(%var_7238: Tensor[(1, 9, 16), float32]) -> Tensor[(1, 9, 16), float32] {
  %947 = cast(%var_7238, dtype="float32") /* ty=Tensor[(1, 9, 16), float32] */;
  acosh(%947) /* ty=Tensor[(1, 9, 16), float32] */
}

def @func_8013(%var_7986: Tensor[(130, 6), int16], %var_7996: Tensor[(2700), uint32]) -> (Tensor[(8, 12, 3), bool], Tensor[(8, 12, 3), bool], Tensor[(2700), uint32], Tensor[(90), float32], Tensor[(78, 4), float64], Tensor[(42), float64], Tensor[(13, 2, 12), float64], Tensor[(130, 6), int8]) {
  %948 = cast(%var_7996, dtype="uint32") /* ty=Tensor[(2700), uint32] */;
  %949 = reshape(%948, newshape=[2700]) /* ty=Tensor[(2700), uint32] */;
  %950 = @func_6414(%949) /* ty=(Tensor[(8, 12, 3), bool], Tensor[(42), float64], Tensor[(588), int32], Tensor[(2700), uint32], Tensor[(10, 3, 8), float32], Tensor[(8, 12, 3), bool], Tensor[(10, 3, 8), int8], Tensor[(10, 3, 8), int8], Tensor[(8, 12, 3), bool]) */;
  %951 = cast(meta[relay.Constant][63] /* ty=Tensor[(78, 4), float64] */, dtype="float64") /* ty=Tensor[(78, 4), float64] */;
  %952 = cast(meta[relay.Constant][64] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
  %953 = reshape(%951, newshape=[312]) /* ty=Tensor[(312), float64] */;
  %954 = reshape(%952, newshape=[42]) /* ty=Tensor[(42), float64] */;
  %955 = @func_2270(%953, %954) /* ty=(Tensor[(13, 2, 12), float64], Tensor[(312), float64], Tensor[(10, 3, 8), float32], Tensor[(588), float64], Tensor[(90), float32], Tensor[(3, 6, 5), float64], Tensor[(14, ?, 3), bool], Tensor[(42), float64], Tensor[(14, ?, 3), bool], Tensor[(10, 3, 8), float32], Tensor[(15, 3, 6), float32]) */;
  %956 = cast(meta[relay.Constant][63] /* ty=Tensor[(78, 4), float64] */, dtype="float64") /* ty=Tensor[(78, 4), float64] */;
  %957 = reshape(%956, newshape=[13, 2, 12]) /* ty=Tensor[(13, 2, 12), float64] */;
  %958 = cast(%var_7986, dtype="int16") /* ty=Tensor[(130, 6), int16] */;
  %959 = cast(%var_7986, dtype="int16") /* ty=Tensor[(130, 6), int16] */;
  %960 = reshape(%958, newshape=[12, 13, 5]) /* ty=Tensor[(12, 13, 5), int16] */;
  %961 = reshape(%959, newshape=[12, 13, 5]) /* ty=Tensor[(12, 13, 5), int16] */;
  %962 = @func_7410(%960, %961) /* ty=(Tensor[(12, 13, 5), int16],) */;
  %963 = %962.0;
  %964 = cast(%963, dtype="int8") /* ty=Tensor[(12, 13, 5), int8] */;
  %965 = shape_of(%var_7986, dtype="int32") /* ty=Tensor[(2), int32] */;
  %966 = cast(%var_7986, dtype="int8") /* ty=Tensor[(130, 6), int8] */;
  %967 = dyn.reshape(%964, %965, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %968 = @func_3146() /* ty=Tensor[(8, 12, 3), bool] */;
  %969 = %950.8;
  %970 = %955.4;
  %971 = @func_438(%957) /* ty=Tensor[(13, 2, 12), float64] */;
  %972 = multiply(%966, %967) /* ty=Tensor[(130, 6), int8] */;
  (%968, %969, %var_7996, %970, meta[relay.Constant][63] /* ty=Tensor[(78, 4), float64] */, meta[relay.Constant][64] /* ty=Tensor[(42), float64] */, %971, %972)
}

def @func_3083() -> Tensor[(10, 3, 8), float32] {
  @func_2440() /* ty=Tensor[(10, 3, 8), float32] */
}

def @func_8522() -> (Tensor[(10, 3, 8), float32], Tensor[(14, ?, 3), bool], Tensor[(312), float64], Tensor[(42), float64], Tensor[(312), float64]) {
  %973 = @func_5573() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %974 = cast(meta[relay.Constant][65] /* ty=Tensor[(312), float64] */, dtype="float64") /* ty=Tensor[(312), float64] */;
  %975 = cast(meta[relay.Constant][66] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
  %976 = reshape(%974, newshape=[312]) /* ty=Tensor[(312), float64] */;
  %977 = reshape(%975, newshape=[42]) /* ty=Tensor[(42), float64] */;
  %978 = @func_2270(%976, %977) /* ty=(Tensor[(13, 2, 12), float64], Tensor[(312), float64], Tensor[(10, 3, 8), float32], Tensor[(588), float64], Tensor[(90), float32], Tensor[(3, 6, 5), float64], Tensor[(14, ?, 3), bool], Tensor[(42), float64], Tensor[(14, ?, 3), bool], Tensor[(10, 3, 8), float32], Tensor[(15, 3, 6), float32]) */;
  %979 = cast(meta[relay.Constant][65] /* ty=Tensor[(312), float64] */, dtype="float64") /* ty=Tensor[(312), float64] */;
  %980 = reshape(%979, newshape=[312]) /* ty=Tensor[(312), float64] */;
  %981 = @func_8265(%980) /* ty=(Tensor[(8, 12, 3), bool], Tensor[(10, 3, 8), float32], Tensor[(546, 1), float64], Tensor[(312), float64]) */;
  %982 = %973.0;
  %983 = %978.8;
  %984 = %981.3;
  (%982, %983, meta[relay.Constant][65] /* ty=Tensor[(312), float64] */, meta[relay.Constant][66] /* ty=Tensor[(42), float64] */, %984)
}

def @func_7835(%var_7830: float64) -> Tensor[(5, 7, 16), float64] {
  %985 = cast(%var_7830, dtype="float64") /* ty=float64 */;
  %986 = cast(meta[relay.Constant][67] /* ty=Tensor[(5, 7, 16), float64] */, dtype="float64") /* ty=Tensor[(5, 7, 16), float64] */;
  minimum(%985, %986) /* ty=Tensor[(5, 7, 16), float64] */
}

def @func_6861(%var_6859: Tensor[(455, 1), float32]) -> (Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), int8], Tensor[(7, 13, 5), float32], Tensor[(455, 1), float32]) {
  %987 = @func_2491() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %988 = cast(%var_6859, dtype="float32") /* ty=Tensor[(455, 1), float32] */;
  %989 = reshape(%988, newshape=[7, 13, 5]) /* ty=Tensor[(7, 13, 5), float32] */;
  %990 = %987.0;
  %991 = @func_5537() /* ty=Tensor[(10, 3, 8), int8] */;
  %992 = @func_3935(%989) /* ty=Tensor[(7, 13, 5), float32] */;
  (%990, %991, %992, %var_6859)
}

def @func_5240() -> (Tensor[(10, 3, 8), float32], uint64, Tensor[(10, 4), uint64]) {
  %993 = cast(meta[relay.Constant][68] /* ty=Tensor[(10, 4), uint64] */, dtype="uint64") /* ty=Tensor[(10, 4), uint64] */;
  %994 = reshape(%993, newshape=[40]) /* ty=Tensor[(40), uint64] */;
  %995 = @func_4387(%994) /* ty=(Tensor[(8, 12, 3), float32], Tensor[(10, 4, 1), bool], uint64, Tensor[(40), uint64], uint64, Tensor[(256), float32], Tensor[(10, 3, 8), float32], Tensor[(2700), uint32], Tensor[(260), float32]) */;
  %996 = @func_3276() /* ty=Tensor[(10, 3, 8), float32] */;
  %997 = %995.4;
  (%996, %997, meta[relay.Constant][68] /* ty=Tensor[(10, 4), uint64] */)
}

def @func_1438(%var_1422: Tensor[(5, 4, 13), float32]) -> (Tensor[(10, 3, 8), float32], Tensor[(5, 4, 13), float32]) {
  %998 = @func_1166() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %999 = cast(%var_1422, dtype="float32") /* ty=Tensor[(5, 4, 13), float32] */;
  %1000 = sqrt(%999) /* ty=Tensor[(5, 4, 13), float32] */;
  %1001 = cast(%1000, dtype="float32") /* ty=Tensor[(5, 4, 13), float32] */;
  %1002 = %998.0;
  %1003 = cosh(%1001) /* ty=Tensor[(5, 4, 13), float32] */;
  (%1002, %1003)
}

def @func_6549() -> Tensor[(10, 3, 8), float32] {
  %1004 = @func_1452() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %1004.0
}

def @func_5821() -> Tensor[(8, 12, 3), bool] {
  @func_3528() /* ty=Tensor[(8, 12, 3), bool] */
}

def @func_7824(%var_7782: Tensor[(8, 15, 11), uint64], %var_7790: float64) -> (Tensor[(8, 15, 11), bool], Tensor[(42), float64], float64, Tensor[(546), float64], Tensor[(8, 15, 11), float64]) {
  %1005 = cast(meta[relay.Constant][69] /* ty=Tensor[(8, 15, 11), uint64] */, dtype="bool") /* ty=Tensor[(8, 15, 11), bool] */;
  %1006 = shape_of(%var_7782, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1007 = cast(%var_7782, dtype="bool") /* ty=Tensor[(8, 15, 11), bool] */;
  %1008 = dyn.reshape(%1005, %1006, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1009 = cast(%var_7790, dtype="float64") /* ty=float64 */;
  %1010 = cast(meta[relay.Constant][70] /* ty=Tensor[(546), float64] */, dtype="float64") /* ty=Tensor[(546), float64] */;
  %1011 = reshape(%1009, newshape=[]) /* ty=float64 */;
  %1012 = reshape(%1010, newshape=[14, 13, 3]) /* ty=Tensor[(14, 13, 3), float64] */;
  %1013 = @func_1820(%1011, %1012) /* ty=(Tensor[(14, 13, 3), float64], Tensor[(10, 3, 8), float32], Tensor[(14, ?, 3), bool], Tensor[(42), float64]) */;
  %1014 = cast(meta[relay.Constant][69] /* ty=Tensor[(8, 15, 11), uint64] */, dtype="float64") /* ty=Tensor[(8, 15, 11), float64] */;
  %1015 = greater(%1007, %1008) /* ty=Tensor[(8, 15, 11), bool] */;
  %1016 = %1013.3;
  %1017 = log2(%1014) /* ty=Tensor[(8, 15, 11), float64] */;
  (%1015, %1016, %var_7790, meta[relay.Constant][70] /* ty=Tensor[(546), float64] */, %1017)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_441(%var_439: Tensor[(13, 2, 12), float64]) -> Tensor[(13, 2, 12), float64] {
  @func_438(%var_439) /* ty=Tensor[(13, 2, 12), float64] */
}

def @func_6304(%var_6268: Tensor[(10, 3, 8), float32], %var_6286: Tensor[(960), float64]) -> (Tensor[(10, 3, 8), float32], Tensor[(588), float64], Tensor[(15, 6), float32], Tensor[(10, 3, 8), float32], Tensor[(960), float64], float64) {
  %0 = @func_2597() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %1 = %0.0;
  %2 = cast(%var_6268, dtype="float32") /* ty=Tensor[(10, 3, 8), float32] */;
  %3 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
  %4 = cast(%1, dtype="float32") /* ty=Tensor[(10, 3, 8), float32] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(15, 6), float32] */, dtype="float32") /* ty=Tensor[(15, 6), float32] */;
  %7 = reshape(%6, newshape=[3, 6, 5]) /* ty=Tensor[(3, 6, 5), float32] */;
  %8 = @func_938(%7) /* ty=(Tensor[(588), float64], Tensor[(8, 4), uint16], Tensor[(288), uint16], Tensor[(588), float64], Tensor[(3, 6, 5), float64]) */;
  %9 = cast(%var_6286, dtype="float64") /* ty=Tensor[(960), float64] */;
  %10 = cast(-3.62576f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %11 = reshape(%9, newshape=[16, 5, 12]) /* ty=Tensor[(16, 5, 12), float64] */;
  %12 = reshape(%10, newshape=[]) /* ty=float64 */;
  %13 = @func_5793(%11, %12) /* ty=(Tensor[(16, 5, 12), float64], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], float64, Tensor[(14, 13, 3), float64], Tensor[(546), float64]) */;
  %14 = floor_divide(%4, %5) /* ty=Tensor[(10, 3, 8), float32] */;
  %15 = %8.0;
  %16 = %13.2;
  (%14, %15, meta[relay.Constant][0] /* ty=Tensor[(15, 6), float32] */, %16, %var_6286, -3.62576f64 /* ty=float64 */)
}

def @func_3299(%var_3298: Tensor[(3, 5, 11), int16]) -> Tensor[(3, 5, 11), bool] {
  %19 = fn (%var_3282: Tensor[(3, 5, 11), int16]) -> Tensor[(3, 5, 11), bool] {
    %17 = cast(meta[relay.Constant][1] /* ty=Tensor[(3, 5, 1), int16] */, dtype="bool") /* ty=Tensor[(3, 5, 1), bool] */;
    %18 = cast(%var_3282, dtype="bool") /* ty=Tensor[(3, 5, 11), bool] */;
    less(%17, %18) /* ty=Tensor[(3, 5, 11), bool] */
  };
  %19(%var_3298) /* ty=Tensor[(3, 5, 11), bool] */
}

def @func_3641(%var_3639: Tensor[(2700), uint32], %var_3640: Tensor[(260), float32]) -> (Tensor[(10, 3, 8), float32], Tensor[(588), float64], Tensor[(1, 42), float64], Tensor[(260), float32], Tensor[(819), bool], Tensor[(260), float32], Tensor[(2700), uint8], Tensor[(10, 3, 8), float64]) {
  @func_3637(%var_3639, %var_3640) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(588), float64], Tensor[(1, 42), float64], Tensor[(260), float32], Tensor[(819), bool], Tensor[(260), float32], Tensor[(2700), uint8], Tensor[(10, 3, 8), float64]) */
}

def @func_4081(%var_4070: Tensor[(8, 11, 12), float64], %var_4071: Tensor[(8, 11, 12), float64]) -> (Tensor[(8, 11, 12), float64], Tensor[(10, 3, 8), float32]) {
  %20 = cast(%var_4071, dtype="float64") /* ty=Tensor[(8, 11, 12), float64] */;
  %21 = shape_of(%var_4070, dtype="int32") /* ty=Tensor[(3), int32] */;
  %22 = cast(%var_4070, dtype="float64") /* ty=Tensor[(8, 11, 12), float64] */;
  %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %24 = @func_1175() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %25 = mod(%22, %23) /* ty=Tensor[(8, 11, 12), float64] */;
  %26 = %24.0;
  (%25, %26)
}

def @func_4506(%var_4503: Tensor[(2700), uint32], %var_4504: Tensor[(65, 4), float32], %var_4505: Tensor[(2700), uint32]) -> (Tensor[(10, 3, 8), float32], Tensor[(1, 42), float64], Tensor[(65, 4), float32], Tensor[(2700), float64]) {
  %39 = fn (%var_4469: Tensor[(2700), uint32], %var_4470: Tensor[(65, 4), float32], %var_4495: Tensor[(2700), uint32]) -> (Tensor[(10, 3, 8), float32], Tensor[(1, 42), float64], Tensor[(65, 4), float32], Tensor[(2700), float64]) {
    %27 = cast(%var_4469, dtype="uint32") /* ty=Tensor[(2700), uint32] */;
    %28 = cast(%var_4470, dtype="float32") /* ty=Tensor[(65, 4), float32] */;
    %29 = reshape(%27, newshape=[2700]) /* ty=Tensor[(2700), uint32] */;
    %30 = reshape(%28, newshape=[260]) /* ty=Tensor[(260), float32] */;
    %31 = @func_3637(%29, %30) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(588), float64], Tensor[(1, 42), float64], Tensor[(260), float32], Tensor[(819), bool], Tensor[(260), float32], Tensor[(2700), uint8], Tensor[(10, 3, 8), float64]) */;
    %32 = cast(%var_4495, dtype="float64") /* ty=Tensor[(2700), float64] */;
    %33 = shape_of(%var_4469, dtype="int32") /* ty=Tensor[(1), int32] */;
    %34 = cast(%var_4469, dtype="float64") /* ty=Tensor[(2700), float64] */;
    %35 = dyn.reshape(%32, %33, newshape=[]) /* ty=Tensor[(?), float64] */;
    %36 = @func_3083() /* ty=Tensor[(10, 3, 8), float32] */;
    %37 = %31.2;
    %38 = subtract(%34, %35) /* ty=Tensor[(2700), float64] */;
    (%36, %37, %var_4470, %38)
  };
  %39(%var_4503, %var_4504, %var_4505) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(1, 42), float64], Tensor[(65, 4), float32], Tensor[(2700), float64]) */
}

def @func_2270(%var_2187: Tensor[(312), float64], %var_2240: Tensor[(42), float64]) -> (Tensor[(13, 2, 12), float64], Tensor[(312), float64], Tensor[(10, 3, 8), float32], Tensor[(588), float64], Tensor[(90), float32], Tensor[(3, 6, 5), float64], Tensor[(14, ?, 3), bool], Tensor[(42), float64], Tensor[(14, ?, 3), bool], Tensor[(10, 3, 8), float32], Tensor[(15, 3, 6), float32]) {
  %40 = cast(%var_2187, dtype="float64") /* ty=Tensor[(312), float64] */;
  %41 = reshape(%40, newshape=[13, 2, 12]) /* ty=Tensor[(13, 2, 12), float64] */;
  %42 = @func_1175() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %43 = cast(meta[relay.Constant][2] /* ty=Tensor[(90), float32] */, dtype="float32") /* ty=Tensor[(90), float32] */;
  %44 = reshape(%43, newshape=[3, 6, 5]) /* ty=Tensor[(3, 6, 5), float32] */;
  %45 = @func_938(%44) /* ty=(Tensor[(588), float64], Tensor[(8, 4), uint16], Tensor[(288), uint16], Tensor[(588), float64], Tensor[(3, 6, 5), float64]) */;
  %46 = cast(meta[relay.Constant][2] /* ty=Tensor[(90), float32] */, dtype="float32") /* ty=Tensor[(90), float32] */;
  %47 = reshape(%46, newshape=[3, 6, 5]) /* ty=Tensor[(3, 6, 5), float32] */;
  %48 = @func_938(%47) /* ty=(Tensor[(588), float64], Tensor[(8, 4), uint16], Tensor[(288), uint16], Tensor[(588), float64], Tensor[(3, 6, 5), float64]) */;
  %49 = cast(%var_2240, dtype="float64") /* ty=Tensor[(42), float64] */;
  %50 = reshape(%49, newshape=[14, 1, 3]) /* ty=Tensor[(14, 1, 3), float64] */;
  %51 = @func_121(%50) /* ty=(Tensor[(14, ?, 3), bool],) */;
  %52 = %51.0;
  %53 = cast(%52, dtype="float64") /* ty=Tensor[(14, ?, 3), float64] */;
  %54 = reshape(%53, newshape=[14, 1, 3]) /* ty=Tensor[(14, 1, 3), float64] */;
  %55 = @func_121(%54) /* ty=(Tensor[(14, ?, 3), bool],) */;
  %56 = @func_1452() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %57 = cast(meta[relay.Constant][3] /* ty=Tensor[(15, 3, 6), float64] */, dtype="float64") /* ty=Tensor[(15, 3, 6), float64] */;
  %58 = log10(%57) /* ty=Tensor[(15, 3, 6), float64] */;
  %59 = cast(%58, dtype="float64") /* ty=Tensor[(15, 3, 6), float64] */;
  %60 = log2(%59) /* ty=Tensor[(15, 3, 6), float64] */;
  %61 = cast(meta[relay.Constant][3] /* ty=Tensor[(15, 3, 6), float64] */, dtype="float32") /* ty=Tensor[(15, 3, 6), float32] */;
  %62 = shape_of(%60, dtype="int32") /* ty=Tensor[(3), int32] */;
  %63 = cast(%60, dtype="float32") /* ty=Tensor[(15, 3, 6), float32] */;
  %64 = dyn.reshape(%61, %62, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %65 = @func_438(%41) /* ty=Tensor[(13, 2, 12), float64] */;
  %66 = %42.0;
  %67 = %45.3;
  %68 = %48.4;
  %69 = %55.0;
  %70 = %56.0;
  %71 = divide(%63, %64) /* ty=Tensor[(15, 3, 6), float32] */;
  (%65, %var_2187, %66, %67, meta[relay.Constant][2] /* ty=Tensor[(90), float32] */, %68, %52, %var_2240, %69, %70, %71)
}

def @func_3583() -> (Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32]) {
  @func_3581() /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32]) */
}

def @func_1603(%var_1600: Tensor[(32), uint16], %var_1601: Tensor[(288), uint16], %var_1602: Tensor[(588), float64]) -> (Tensor[(10, 3, 8), int8], Tensor[(14, ?, 3), float32], Tensor[(32), uint16], Tensor[(288), uint16], Tensor[(588), float64], Tensor[(10, 3, 8), float32], Tensor[(588), float64], Tensor[(14, ?, 3), bool]) {
  @func_1598(%var_1600, %var_1601, %var_1602) /* ty=(Tensor[(10, 3, 8), int8], Tensor[(14, ?, 3), float32], Tensor[(32), uint16], Tensor[(288), uint16], Tensor[(588), float64], Tensor[(10, 3, 8), float32], Tensor[(588), float64], Tensor[(14, ?, 3), bool]) */
}

def @func_3828() -> (Tensor[(10, 3, 8), int8],) {
  @func_3826() /* ty=(Tensor[(10, 3, 8), int8],) */
}

def @func_2398(%var_2376: int64) -> Tensor[(5, 12, 5), uint8] {
  %72 = cast(%var_2376, dtype="bool") /* ty=bool */;
  %73 = cast(meta[relay.Constant][4] /* ty=Tensor[(5, 12, 5), int64] */, dtype="bool") /* ty=Tensor[(5, 12, 5), bool] */;
  %74 = not_equal(%72, %73) /* ty=Tensor[(5, 12, 5), bool] */;
  %75 = cast(%74, dtype="uint8") /* ty=Tensor[(5, 12, 5), uint8] */;
  %76 = cast(%var_2376, dtype="uint8") /* ty=uint8 */;
  logical_xor(%75, %76) /* ty=Tensor[(5, 12, 5), uint8] */
}

def @func_4731() -> (Tensor[(10, 3, 8), float32],) {
  %79 = fn () -> (Tensor[(10, 3, 8), float32],) {
    %77 = @func_2491() /* ty=(Tensor[(10, 3, 8), float32],) */;
    %78 = %77.0;
    (%78,)
  };
  %79() /* ty=(Tensor[(10, 3, 8), float32],) */
}

def @func_5188(%var_5186: Tensor[(65, 7), float32], %var_5187: Tensor[(90), float32]) -> (Tensor[(10, 3, 8), float32], Tensor[(7, 13, 5), float32], Tensor[(65, 7), float32], Tensor[(588), float64], Tensor[(90), float32]) {
  @func_5184(%var_5186, %var_5187) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(7, 13, 5), float32], Tensor[(65, 7), float32], Tensor[(588), float64], Tensor[(90), float32]) */
}

def @func_1231() -> (Tensor[(10, 3, 8), float32],) {
  %82 = fn () -> (Tensor[(10, 3, 8), float32],) {
    %80 = @func_1175() /* ty=(Tensor[(10, 3, 8), float32],) */;
    %81 = %80.0;
    (%81,)
  };
  %82() /* ty=(Tensor[(10, 3, 8), float32],) */
}

def @func_2828(%var_2827: Tensor[(8, 8, 4), float32]) -> (Tensor[(8, 8, 4), float32], Tensor[(10, 4, 1), bool], uint64, Tensor[(40), uint64]) {
  %91 = fn (%var_2800: Tensor[(8, 8, 4), float32]) -> (Tensor[(8, 8, 4), float32], Tensor[(10, 4, 1), bool], uint64, Tensor[(40), uint64]) {
    %83 = cast(%var_2800, dtype="float32") /* ty=Tensor[(8, 8, 4), float32] */;
    %84 = cast(meta[relay.Constant][5] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %85 = cast(meta[relay.Constant][6] /* ty=Tensor[(40), uint64] */, dtype="uint64") /* ty=Tensor[(40), uint64] */;
    %86 = reshape(%84, newshape=[]) /* ty=uint64 */;
    %87 = reshape(%85, newshape=[10, 4, 1]) /* ty=Tensor[(10, 4, 1), uint64] */;
    %88 = @func_2325(%86, %87) /* ty=(Tensor[(10, 4, 1), bool],) */;
    %89 = acosh(%83) /* ty=Tensor[(8, 8, 4), float32] */;
    %90 = %88.0;
    (%89, %90, meta[relay.Constant][5] /* ty=uint64 */, meta[relay.Constant][6] /* ty=Tensor[(40), uint64] */)
  };
  %91(%var_2827) /* ty=(Tensor[(8, 8, 4), float32], Tensor[(10, 4, 1), bool], uint64, Tensor[(40), uint64]) */
}

def @func_4643(%var_4640: Tensor[(14, 42), float64], %var_4641: uint8, %var_4642: Tensor[(2184), uint8]) -> (Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(14, 42), float64], Tensor[(14, 13, 12), float64], uint8, Tensor[(2184), uint8]) {
  @func_4638(%var_4640, %var_4641, %var_4642) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(14, 42), float64], Tensor[(14, 13, 12), float64], uint8, Tensor[(2184), uint8]) */
}

def @func_7181(%var_7174: Tensor[(15, 12, 3), bool], %var_7175: Tensor[(15, 12, 3), bool], %var_7176: Tensor[(15, 12, 3), bool], %var_7177: Tensor[(32), uint16], %var_7178: Tensor[(98, 6), float64], %var_7179: Tensor[(15, 12, 3), bool], %var_7180: Tensor[(546), float32]) -> (Tensor[(8, 12, 3), bool], Tensor[(10, 3, 8), float32], Tensor[(14, ?, 3), bool], Tensor[(32), uint16], Tensor[(98, 6), float64], Tensor[(15, 12, 3), float32], Tensor[(7, 13, 6), float32], Tensor[(546), float32], Tensor[(15, 12, 3), uint32], Tensor[(14, ?, 3), bool]) {
  %133 = fn (%var_7075: Tensor[(15, 12, 3), bool], %var_7076: Tensor[(15, 12, 3), bool], %var_7092: Tensor[(15, 12, 3), bool], %var_7114: Tensor[(32), uint16], %var_7115: Tensor[(98, 6), float64], %var_7117: Tensor[(15, 12, 3), bool], %var_7145: Tensor[(546), float32]) -> (Tensor[(8, 12, 3), bool], Tensor[(10, 3, 8), float32], Tensor[(14, ?, 3), bool], Tensor[(32), uint16], Tensor[(98, 6), float64], Tensor[(15, 12, 3), float32], Tensor[(7, 13, 6), float32], Tensor[(546), float32], Tensor[(15, 12, 3), uint32], Tensor[(14, ?, 3), bool]) {
    %92 = cast(%var_7114, dtype="uint16") /* ty=Tensor[(32), uint16] */;
    %93 = @func_3528() /* ty=Tensor[(8, 12, 3), bool] */;
    %94 = cast(%93, dtype="uint16") /* ty=Tensor[(8, 12, 3), uint16] */;
    %95 = cast(%var_7115, dtype="float64") /* ty=Tensor[(98, 6), float64] */;
    %96 = reshape(%92, newshape=[32]) /* ty=Tensor[(32), uint16] */;
    %97 = reshape(%94, newshape=[288]) /* ty=Tensor[(288), uint16] */;
    %98 = reshape(%95, newshape=[588]) /* ty=Tensor[(588), float64] */;
    %99 = @func_1598(%96, %97, %98) /* ty=(Tensor[(10, 3, 8), int8], Tensor[(14, ?, 3), float32], Tensor[(32), uint16], Tensor[(288), uint16], Tensor[(588), float64], Tensor[(10, 3, 8), float32], Tensor[(588), float64], Tensor[(14, ?, 3), bool]) */;
    %100 = cast(%var_7117, dtype="float32") /* ty=Tensor[(15, 12, 3), float32] */;
    %101 = shape_of(%var_7092, dtype="int32") /* ty=Tensor[(3), int32] */;
    %102 = cast(%var_7092, dtype="float32") /* ty=Tensor[(15, 12, 3), float32] */;
    %103 = dyn.reshape(%100, %101, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %104 = cast(%var_7145, dtype="float32") /* ty=Tensor[(546), float32] */;
    %105 = reshape(%104, newshape=[7, 13, 6]) /* ty=Tensor[(7, 13, 6), float32] */;
    %106 = cast(%var_7076, dtype="bool") /* ty=Tensor[(15, 12, 3), bool] */;
    %107 = shape_of(%var_7075, dtype="int32") /* ty=Tensor[(3), int32] */;
    %108 = cast(%var_7075, dtype="bool") /* ty=Tensor[(15, 12, 3), bool] */;
    %109 = dyn.reshape(%106, %107, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %110 = logical_or(%108, %109) /* ty=Tensor[(15, 12, 3), bool] */;
    %111 = cast(%var_7092, dtype="int16") /* ty=Tensor[(15, 12, 3), int16] */;
    %112 = shape_of(%110, dtype="int32") /* ty=Tensor[(3), int32] */;
    %113 = cast(%110, dtype="int16") /* ty=Tensor[(15, 12, 3), int16] */;
    %114 = dyn.reshape(%111, %112, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %115 = right_shift(%113, %114) /* ty=Tensor[(15, 12, 3), int16] */;
    %116 = cast(%115, dtype="uint32") /* ty=Tensor[(15, 12, 3), uint32] */;
    %117 = shape_of(%110, dtype="int32") /* ty=Tensor[(3), int32] */;
    %118 = cast(%110, dtype="uint32") /* ty=Tensor[(15, 12, 3), uint32] */;
    %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %120 = cast(%var_7115, dtype="float64") /* ty=Tensor[(98, 6), float64] */;
    %121 = %99.7;
    %122 = cast(%121, dtype="float64") /* ty=Tensor[(14, ?, 3), float64] */;
    %123 = cast(%var_7115, dtype="float64") /* ty=Tensor[(98, 6), float64] */;
    %124 = reshape(%120, newshape=[14, 6, 7]) /* ty=Tensor[(14, 6, 7), float64] */;
    %125 = reshape(%122, newshape=[42]) /* ty=Tensor[(42), float64] */;
    %126 = reshape(%123, newshape=[14, 6, 7]) /* ty=Tensor[(14, 6, 7), float64] */;
    %127 = @func_310(%124, %125, %126) /* ty=(Tensor[(14, 6, 7), float64], Tensor[(14, ?, 3), bool], Tensor[(42), float64], Tensor[(14, 6, 7), int8], Tensor[(14, ?, 3), bool]) */;
    %128 = @func_3276() /* ty=Tensor[(10, 3, 8), float32] */;
    %129 = floor_mod(%102, %103) /* ty=Tensor[(15, 12, 3), float32] */;
    %130 = @func_3322(%105) /* ty=Tensor[(7, 13, 6), float32] */;
    %131 = bitwise_and(%118, %119) /* ty=Tensor[(15, 12, 3), uint32] */;
    %132 = %127.4;
    (%93, %128, %121, %var_7114, %var_7115, %129, %130, %var_7145, %131, %132)
  };
  %133(%var_7174, %var_7175, %var_7176, %var_7177, %var_7178, %var_7179, %var_7180) /* ty=(Tensor[(8, 12, 3), bool], Tensor[(10, 3, 8), float32], Tensor[(14, ?, 3), bool], Tensor[(32), uint16], Tensor[(98, 6), float64], Tensor[(15, 12, 3), float32], Tensor[(7, 13, 6), float32], Tensor[(546), float32], Tensor[(15, 12, 3), uint32], Tensor[(14, ?, 3), bool]) */
}

def @func_1298(%var_1285: Tensor[(588), float64]) -> (Tensor[(10, 3, 8), float32], Tensor[(42), float64], Tensor[(588), float64], Tensor[(42), float64], Tensor[(14, ?, 3), bool]) {
  %134 = @func_1175() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %135 = %134.0;
  %136 = cast(%135, dtype="float32") /* ty=Tensor[(10, 3, 8), float32] */;
  %137 = cast(%var_1285, dtype="float64") /* ty=Tensor[(588), float64] */;
  %138 = cast(meta[relay.Constant][7] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
  %139 = cast(%var_1285, dtype="float64") /* ty=Tensor[(588), float64] */;
  %140 = reshape(%137, newshape=[14, 6, 7]) /* ty=Tensor[(14, 6, 7), float64] */;
  %141 = reshape(%138, newshape=[42]) /* ty=Tensor[(42), float64] */;
  %142 = reshape(%139, newshape=[14, 6, 7]) /* ty=Tensor[(14, 6, 7), float64] */;
  %143 = @func_310(%140, %141, %142) /* ty=(Tensor[(14, 6, 7), float64], Tensor[(14, ?, 3), bool], Tensor[(42), float64], Tensor[(14, 6, 7), int8], Tensor[(14, ?, 3), bool]) */;
  %144 = cast(meta[relay.Constant][7] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
  %145 = reshape(%144, newshape=[14, 1, 3]) /* ty=Tensor[(14, 1, 3), float64] */;
  %146 = @func_121(%145) /* ty=(Tensor[(14, ?, 3), bool],) */;
  %147 = log2(%136) /* ty=Tensor[(10, 3, 8), float32] */;
  %148 = %143.2;
  %149 = %146.0;
  (%147, %148, %var_1285, meta[relay.Constant][7] /* ty=Tensor[(42), float64] */, %149)
}

def @func_6831() -> (uint64,) {
  %152 = fn () -> (uint64,) {
    %150 = @func_5240() /* ty=(Tensor[(10, 3, 8), float32], uint64, Tensor[(10, 4), uint64]) */;
    %151 = %150.1;
    (%151,)
  };
  %152() /* ty=(uint64,) */
}

def @func_5846() -> Tensor[(10, 3, 8), int8] {
  %154 = fn () -> Tensor[(10, 3, 8), int8] {
    %153 = @func_3876() /* ty=(Tensor[(10, 3, 8), int8],) */;
    %153.0
  };
  %154() /* ty=Tensor[(10, 3, 8), int8] */
}

def @func_6512(%var_6510: float32, %var_6511: Tensor[(9, 10, 5), float32]) -> Tensor[(9, 10, 5), float32] {
  @func_6508(%var_6510, %var_6511) /* ty=Tensor[(9, 10, 5), float32] */
}

def @func_8601() -> (Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32]) {
  @func_8599() /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32]) */
}

def @func_8333(%var_8331: Tensor[(15, 6), float32]) -> (Tensor[(10, 3, 8), float32], Tensor[(588), float64], Tensor[(15, 6), float32], Tensor[(10, 3, 8), float32]) {
  @func_8330(%var_8331) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(588), float64], Tensor[(15, 6), float32], Tensor[(10, 3, 8), float32]) */
}

def @func_2525() -> (Tensor[(10, 3, 8), float64], Tensor[(10, 3, 8), float32]) {
  %161 = fn () -> (Tensor[(10, 3, 8), float64], Tensor[(10, 3, 8), float32]) {
    %155 = @func_1166() /* ty=(Tensor[(10, 3, 8), float32],) */;
    %156 = %155.0;
    %157 = cast(%156, dtype="float64") /* ty=Tensor[(10, 3, 8), float64] */;
    %158 = @func_1166() /* ty=(Tensor[(10, 3, 8), float32],) */;
    %159 = acos(%157) /* ty=Tensor[(10, 3, 8), float64] */;
    %160 = %158.0;
    (%159, %160)
  };
  %161() /* ty=(Tensor[(10, 3, 8), float64], Tensor[(10, 3, 8), float32]) */
}

def @func_3938(%var_3936: Tensor[(7, 13, 5), float32]) -> Tensor[(7, 13, 5), float32] {
  @func_3935(%var_3936) /* ty=Tensor[(7, 13, 5), float32] */
}

def @func_6508(%var_6503: float32, %var_6504: Tensor[(9, 10, 5), float32]) -> Tensor[(9, 10, 5), float32] {
  %162 = cast(%var_6503, dtype="float32") /* ty=float32 */;
  %163 = cast(%var_6504, dtype="float32") /* ty=Tensor[(9, 10, 5), float32] */;
  divide(%162, %163) /* ty=Tensor[(9, 10, 5), float32] */
}

def @func_7706() -> (Tensor[(9, 11, 3), float32],) {
  %166 = fn () -> (Tensor[(9, 11, 3), float32],) {
    %164 = cast(meta[relay.Constant][8] /* ty=Tensor[(9, 11, 3), float32] */, dtype="float32") /* ty=Tensor[(9, 11, 3), float32] */;
    %165 = asin(%164) /* ty=Tensor[(9, 11, 3), float32] */;
    (%165,)
  };
  %166() /* ty=(Tensor[(9, 11, 3), float32],) */
}

def @func_8544() -> (Tensor[(10, 3, 8), float32],) {
  %169 = fn () -> (Tensor[(10, 3, 8), float32],) {
    %167 = @func_4730() /* ty=(Tensor[(10, 3, 8), float32],) */;
    %168 = %167.0;
    (%168,)
  };
  %169() /* ty=(Tensor[(10, 3, 8), float32],) */
}

def @func_3147() -> Tensor[(8, 12, 3), bool] {
  %174 = fn () -> Tensor[(8, 12, 3), bool] {
    %170 = cast(meta[relay.Constant][10] /* ty=Tensor[(8, 12, 3), float32] */, dtype="bool") /* ty=Tensor[(8, 12, 3), bool] */;
    %171 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(8, 12, 3), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %172 = cast(meta[relay.Constant][9] /* ty=Tensor[(8, 12, 3), float32] */, dtype="bool") /* ty=Tensor[(8, 12, 3), bool] */;
    %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater_equal(%172, %173) /* ty=Tensor[(8, 12, 3), bool] */
  };
  %174() /* ty=Tensor[(8, 12, 3), bool] */
}

def @func_1866() -> Tensor[(10, 3, 8), float32] {
  %176 = fn () -> Tensor[(10, 3, 8), float32] {
    %175 = @func_1175() /* ty=(Tensor[(10, 3, 8), float32],) */;
    %175.0
  };
  %176() /* ty=Tensor[(10, 3, 8), float32] */
}

def @func_6932(%var_6930: uint8) -> (Tensor[(10, 3, 8), int8], Tensor[(2184), uint8], Tensor[(588), float64], uint8, Tensor[(2184), uint8]) {
  @func_6929(%var_6930) /* ty=(Tensor[(10, 3, 8), int8], Tensor[(2184), uint8], Tensor[(588), float64], uint8, Tensor[(2184), uint8]) */
}

def @func_3057(%var_3053: Tensor[(7, 13, 9), bool], %var_3054: Tensor[(2700), uint32], %var_3055: Tensor[(2700), uint32], %var_3056: Tensor[(260), float32]) -> (Tensor[(7, 13, 9), bool], Tensor[(10, 3, 8), float32], Tensor[(42), float64], Tensor[(2700), bool], Tensor[(5, 4, 13), float32], Tensor[(260), float32]) {
  @func_3051(%var_3053, %var_3054, %var_3055, %var_3056) /* ty=(Tensor[(7, 13, 9), bool], Tensor[(10, 3, 8), float32], Tensor[(42), float64], Tensor[(2700), bool], Tensor[(5, 4, 13), float32], Tensor[(260), float32]) */
}

def @func_5628() -> (Tensor[(10, 3, 8), int16], Tensor[(10, 3, 8), int8]) {
  %180 = fn () -> (Tensor[(10, 3, 8), int16], Tensor[(10, 3, 8), int8]) {
    %177 = @func_4315() /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), int16]) */;
    %178 = %177.1;
    %179 = @func_3166() /* ty=Tensor[(10, 3, 8), int8] */;
    (%178, %179)
  };
  %180() /* ty=(Tensor[(10, 3, 8), int16], Tensor[(10, 3, 8), int8]) */
}

def @func_310(%var_273: Tensor[(14, 6, 7), float64], %var_277: Tensor[(42), float64], %var_289: Tensor[(14, 6, 7), float64]) -> (Tensor[(14, 6, 7), float64], Tensor[(14, ?, 3), bool], Tensor[(42), float64], Tensor[(14, 6, 7), int8], Tensor[(14, ?, 3), bool]) {
  %181 = cast(%var_273, dtype="float64") /* ty=Tensor[(14, 6, 7), float64] */;
  %182 = cast(%var_277, dtype="float64") /* ty=Tensor[(42), float64] */;
  %183 = reshape(%182, newshape=[14, 1, 3]) /* ty=Tensor[(14, 1, 3), float64] */;
  %184 = @func_121(%183) /* ty=(Tensor[(14, ?, 3), bool],) */;
  %185 = cast(%var_289, dtype="int8") /* ty=Tensor[(14, 6, 7), int8] */;
  %186 = shape_of(%var_273, dtype="int32") /* ty=Tensor[(3), int32] */;
  %187 = cast(%var_273, dtype="int8") /* ty=Tensor[(14, 6, 7), int8] */;
  %188 = dyn.reshape(%185, %186, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %189 = cast(%var_277, dtype="float64") /* ty=Tensor[(42), float64] */;
  %190 = reshape(%189, newshape=[14, 1, 3]) /* ty=Tensor[(14, 1, 3), float64] */;
  %191 = @func_121(%190) /* ty=(Tensor[(14, ?, 3), bool],) */;
  %192 = sqrt(%181) /* ty=Tensor[(14, 6, 7), float64] */;
  %193 = %184.0;
  %194 = bitwise_xor(%187, %188) /* ty=Tensor[(14, 6, 7), int8] */;
  %195 = %191.0;
  (%192, %193, %var_277, %194, %195)
}

def @func_6308(%var_6306: Tensor[(10, 3, 8), float32], %var_6307: Tensor[(960), float64]) -> (Tensor[(10, 3, 8), float32], Tensor[(588), float64], Tensor[(15, 6), float32], Tensor[(10, 3, 8), float32], Tensor[(960), float64], float64) {
  @func_6304(%var_6306, %var_6307) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(588), float64], Tensor[(15, 6), float32], Tensor[(10, 3, 8), float32], Tensor[(960), float64], float64) */
}

def @func_2172(%var_2171: Tensor[(32), uint16]) -> (Tensor[(10, 3, 8), float32], Tensor[(42), float64], Tensor[(32), uint16], Tensor[(288, 1), uint16], Tensor[(588, 1), float64], Tensor[(14, ?, 3), bool]) {
  %210 = fn (%var_2129: Tensor[(32), uint16]) -> (Tensor[(10, 3, 8), float32], Tensor[(42), float64], Tensor[(32), uint16], Tensor[(288, 1), uint16], Tensor[(588, 1), float64], Tensor[(14, ?, 3), bool]) {
    %196 = @func_1166() /* ty=(Tensor[(10, 3, 8), float32],) */;
    %197 = cast(%var_2129, dtype="uint16") /* ty=Tensor[(32), uint16] */;
    %198 = cast(meta[relay.Constant][11] /* ty=Tensor[(288, 1), uint16] */, dtype="uint16") /* ty=Tensor[(288, 1), uint16] */;
    %199 = cast(meta[relay.Constant][12] /* ty=Tensor[(588, 1), float64] */, dtype="float64") /* ty=Tensor[(588, 1), float64] */;
    %200 = reshape(%197, newshape=[1, 4, 8]) /* ty=Tensor[(1, 4, 8), uint16] */;
    %201 = reshape(%198, newshape=[9, 4, 8]) /* ty=Tensor[(9, 4, 8), uint16] */;
    %202 = reshape(%199, newshape=[588]) /* ty=Tensor[(588), float64] */;
    %203 = @func_552(%200, %201, %202) /* ty=(Tensor[(588), float64], Tensor[(42), float64], Tensor[(9, 4, 8), int32], Tensor[(14, ?, 3), float32]) */;
    %204 = cast(meta[relay.Constant][12] /* ty=Tensor[(588, 1), float64] */, dtype="float64") /* ty=Tensor[(588, 1), float64] */;
    %205 = reshape(%204, newshape=[588]) /* ty=Tensor[(588), float64] */;
    %206 = @func_1298(%205) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(42), float64], Tensor[(588), float64], Tensor[(42), float64], Tensor[(14, ?, 3), bool]) */;
    %207 = %196.0;
    %208 = %203.1;
    %209 = %206.4;
    (%207, %208, %var_2129, meta[relay.Constant][11] /* ty=Tensor[(288, 1), uint16] */, meta[relay.Constant][12] /* ty=Tensor[(588, 1), float64] */, %209)
  };
  %210(%var_2171) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(42), float64], Tensor[(32), uint16], Tensor[(288, 1), uint16], Tensor[(588, 1), float64], Tensor[(14, ?, 3), bool]) */
}

def @func_5318(%var_5313: Tensor[(546), float64], %var_5314: Tensor[(78, 4), float64], %var_5315: Tensor[(260), float32], %var_5316: Tensor[(78, 4), float64], %var_5317: Tensor[(588), float64]) -> (Tensor[(8, 12, 3), bool], Tensor[(10, 3, 8), float32], Tensor[(546), float64], float64, Tensor[(10, 3, 8), float64], Tensor[(18, 150), uint32], Tensor[(260), float32], Tensor[(90, 546), uint8], Tensor[(78, 4), uint8], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(588), float64]) {
  %245 = fn (%var_5266: Tensor[(546), float64], %var_5267: Tensor[(78, 4), float64], %var_5272: Tensor[(260), float32], %var_5297: Tensor[(78, 4), float64], %var_5309: Tensor[(588), float64]) -> (Tensor[(8, 12, 3), bool], Tensor[(10, 3, 8), float32], Tensor[(546), float64], float64, Tensor[(10, 3, 8), float64], Tensor[(18, 150), uint32], Tensor[(260), float32], Tensor[(90, 546), uint8], Tensor[(78, 4), uint8], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(588), float64]) {
    %211 = cast(meta[relay.Constant][13] /* ty=Tensor[(90, 1), float32] */, dtype="float32") /* ty=Tensor[(90, 1), float32] */;
    %212 = cast(-8.01624f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %213 = cast(%var_5266, dtype="float64") /* ty=Tensor[(546), float64] */;
    %214 = cast(%var_5267, dtype="float64") /* ty=Tensor[(78, 4), float64] */;
    %215 = @func_1636() /* ty=Tensor[(10, 3, 8), float32] */;
    %216 = cast(%215, dtype="float32") /* ty=Tensor[(10, 3, 8), float32] */;
    %217 = reshape(%211, newshape=[1, 90]) /* ty=Tensor[(1, 90), float32] */;
    %218 = reshape(%212, newshape=[]) /* ty=float64 */;
    %219 = reshape(%213, newshape=[546]) /* ty=Tensor[(546), float64] */;
    %220 = reshape(%214, newshape=[312]) /* ty=Tensor[(312), float64] */;
    %221 = reshape(%216, newshape=[10, 3, 8]) /* ty=Tensor[(10, 3, 8), float32] */;
    %222 = @func_4021(%217, %218, %219, %220, %221) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(8, 4), uint16], Tensor[(1, 90), float32], Tensor[(10, 3, 8), float32], float64, Tensor[(546), float64], Tensor[(13, 2, 12), float64], Tensor[(312), float64], Tensor[(7, 13, 5), float32], Tensor[(455, 1), float32], Tensor[(10, 3, 8), bool]) */;
    %223 = cast(meta[relay.Constant][14] /* ty=Tensor[(18, 150), uint32] */, dtype="uint32") /* ty=Tensor[(18, 150), uint32] */;
    %224 = cast(%var_5272, dtype="float32") /* ty=Tensor[(260), float32] */;
    %225 = reshape(%223, newshape=[2700]) /* ty=Tensor[(2700), uint32] */;
    %226 = reshape(%224, newshape=[260]) /* ty=Tensor[(260), float32] */;
    %227 = @func_3637(%225, %226) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(588), float64], Tensor[(1, 42), float64], Tensor[(260), float32], Tensor[(819), bool], Tensor[(260), float32], Tensor[(2700), uint8], Tensor[(10, 3, 8), float64]) */;
    %228 = cast(%var_5266, dtype="uint8") /* ty=Tensor[(546), uint8] */;
    %229 = cast(meta[relay.Constant][13] /* ty=Tensor[(90, 1), float32] */, dtype="uint8") /* ty=Tensor[(90, 1), uint8] */;
    %230 = cast(%var_5297, dtype="uint8") /* ty=Tensor[(78, 4), uint8] */;
    %231 = shape_of(%var_5267, dtype="int32") /* ty=Tensor[(2), int32] */;
    %232 = cast(%var_5267, dtype="uint8") /* ty=Tensor[(78, 4), uint8] */;
    %233 = dyn.reshape(%230, %231, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %234 = @func_1452() /* ty=(Tensor[(10, 3, 8), float32],) */;
    %235 = cast(%var_5309, dtype="float64") /* ty=Tensor[(588), float64] */;
    %236 = reshape(%235, newshape=[588]) /* ty=Tensor[(588), float64] */;
    %237 = @func_1298(%236) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(42), float64], Tensor[(588), float64], Tensor[(42), float64], Tensor[(14, ?, 3), bool]) */;
    %238 = @func_3146() /* ty=Tensor[(8, 12, 3), bool] */;
    %239 = %222.5;
    %240 = %227.7;
    %241 = left_shift(%228, %229) /* ty=Tensor[(90, 546), uint8] */;
    %242 = bitwise_xor(%232, %233) /* ty=Tensor[(78, 4), uint8] */;
    %243 = %234.0;
    %244 = %237.0;
    (%238, %215, %239, -8.01624f64 /* ty=float64 */, %240, meta[relay.Constant][14] /* ty=Tensor[(18, 150), uint32] */, %var_5272, %241, %242, %243, %244, %var_5309)
  };
  %245(%var_5313, %var_5314, %var_5315, %var_5316, %var_5317) /* ty=(Tensor[(8, 12, 3), bool], Tensor[(10, 3, 8), float32], Tensor[(546), float64], float64, Tensor[(10, 3, 8), float64], Tensor[(18, 150), uint32], Tensor[(260), float32], Tensor[(90, 546), uint8], Tensor[(78, 4), uint8], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(588), float64]) */
}

def @func_5990(%var_5988: Tensor[(7, 84), float64], %var_5989: uint8) -> (Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(7, 84), float64], Tensor[(14, 13, 12), float64], uint8, Tensor[(2184), uint8]) {
  @func_5986(%var_5988, %var_5989) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(7, 84), float64], Tensor[(14, 13, 12), float64], uint8, Tensor[(2184), uint8]) */
}

def @func_7693(%var_7692: Tensor[(8, 12, 3), float64]) -> (Tensor[(8, 12, 3), float32], Tensor[(455, 1), float32], Tensor[(455), float32], Tensor[(8, 12, 3), bool], Tensor[(8, 12, 3), uint8], Tensor[(10, 3, 8), float32], uint64, Tensor[(8, 12, 3), float64]) {
  %271 = fn (%var_7656: Tensor[(8, 12, 3), float64]) -> (Tensor[(8, 12, 3), float32], Tensor[(455, 1), float32], Tensor[(455), float32], Tensor[(8, 12, 3), bool], Tensor[(8, 12, 3), uint8], Tensor[(10, 3, 8), float32], uint64, Tensor[(8, 12, 3), float64]) {
    %246 = @func_5821() /* ty=Tensor[(8, 12, 3), bool] */;
    %247 = cast(%246, dtype="float64") /* ty=Tensor[(8, 12, 3), float64] */;
    %248 = erf(%247) /* ty=Tensor[(8, 12, 3), float64] */;
    %249 = cast(%248, dtype="float32") /* ty=Tensor[(8, 12, 3), float32] */;
    %250 = cast(meta[relay.Constant][15] /* ty=Tensor[(455), float32] */, dtype="float32") /* ty=Tensor[(455), float32] */;
    %251 = reshape(%250, newshape=[455, 1]) /* ty=Tensor[(455, 1), float32] */;
    %252 = @func_6861(%251) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), int8], Tensor[(7, 13, 5), float32], Tensor[(455, 1), float32]) */;
    %253 = cast(%var_7656, dtype="bool") /* ty=Tensor[(8, 12, 3), bool] */;
    %254 = shape_of(%248, dtype="int32") /* ty=Tensor[(3), int32] */;
    %255 = cast(%248, dtype="bool") /* ty=Tensor[(8, 12, 3), bool] */;
    %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %257 = cast(%246, dtype="uint8") /* ty=Tensor[(8, 12, 3), uint8] */;
    %258 = shape_of(%248, dtype="int32") /* ty=Tensor[(3), int32] */;
    %259 = cast(%248, dtype="uint8") /* ty=Tensor[(8, 12, 3), uint8] */;
    %260 = dyn.reshape(%257, %258, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %261 = @func_7508() /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32]) */;
    %262 = @func_6830() /* ty=(uint64,) */;
    %263 = cast(%246, dtype="float64") /* ty=Tensor[(8, 12, 3), float64] */;
    %264 = cosh(%249) /* ty=Tensor[(8, 12, 3), float32] */;
    %265 = %252.3;
    %266 = greater(%255, %256) /* ty=Tensor[(8, 12, 3), bool] */;
    %267 = bitwise_or(%259, %260) /* ty=Tensor[(8, 12, 3), uint8] */;
    %268 = %261.0;
    %269 = %262.0;
    %270 = acosh(%263) /* ty=Tensor[(8, 12, 3), float64] */;
    (%264, %265, meta[relay.Constant][15] /* ty=Tensor[(455), float32] */, %266, %267, %268, %269, %270)
  };
  %271(%var_7692) /* ty=(Tensor[(8, 12, 3), float32], Tensor[(455, 1), float32], Tensor[(455), float32], Tensor[(8, 12, 3), bool], Tensor[(8, 12, 3), uint8], Tensor[(10, 3, 8), float32], uint64, Tensor[(8, 12, 3), float64]) */
}

def @func_1824(%var_1822: float64, %var_1823: Tensor[(14, 13, 3), float64]) -> (Tensor[(14, 13, 3), float64], Tensor[(10, 3, 8), float32], Tensor[(14, ?, 3), bool], Tensor[(42), float64]) {
  @func_1820(%var_1822, %var_1823) /* ty=(Tensor[(14, 13, 3), float64], Tensor[(10, 3, 8), float32], Tensor[(14, ?, 3), bool], Tensor[(42), float64]) */
}

def @func_3637(%var_3606: Tensor[(2700), uint32], %var_3617: Tensor[(260), float32]) -> (Tensor[(10, 3, 8), float32], Tensor[(588), float64], Tensor[(1, 42), float64], Tensor[(260), float32], Tensor[(819), bool], Tensor[(260), float32], Tensor[(2700), uint8], Tensor[(10, 3, 8), float64]) {
  %272 = cast(%var_3606, dtype="uint32") /* ty=Tensor[(2700), uint32] */;
  %273 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 42), float64] */, dtype="float64") /* ty=Tensor[(1, 42), float64] */;
  %274 = reshape(%272, newshape=[15, 15, 12]) /* ty=Tensor[(15, 15, 12), uint32] */;
  %275 = reshape(%273, newshape=[42]) /* ty=Tensor[(42), float64] */;
  %276 = @func_1783(%274, %275) /* ty=(Tensor[(15, 15, 12), uint32], Tensor[(14, ?, 3), bool], Tensor[(42), float64], Tensor[(13, 2, 12), float64], Tensor[(312), float64], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(14, 6, 7), int8], Tensor[(588), float64]) */;
  %277 = cast(meta[relay.Constant][17] /* ty=Tensor[(819), bool] */, dtype="bool") /* ty=Tensor[(819), bool] */;
  %278 = cast(%var_3606, dtype="uint32") /* ty=Tensor[(2700), uint32] */;
  %279 = cast(%var_3606, dtype="uint32") /* ty=Tensor[(2700), uint32] */;
  %280 = cast(%var_3617, dtype="float32") /* ty=Tensor[(260), float32] */;
  %281 = reshape(%277, newshape=[7, 13, 9]) /* ty=Tensor[(7, 13, 9), bool] */;
  %282 = reshape(%278, newshape=[2700]) /* ty=Tensor[(2700), uint32] */;
  %283 = reshape(%279, newshape=[2700]) /* ty=Tensor[(2700), uint32] */;
  %284 = reshape(%280, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %285 = @func_3051(%281, %282, %283, %284) /* ty=(Tensor[(7, 13, 9), bool], Tensor[(10, 3, 8), float32], Tensor[(42), float64], Tensor[(2700), bool], Tensor[(5, 4, 13), float32], Tensor[(260), float32]) */;
  %286 = cast(meta[relay.Constant][18] /* ty=Tensor[(2700), uint32] */, dtype="uint8") /* ty=Tensor[(2700), uint8] */;
  %287 = shape_of(%var_3606, dtype="int32") /* ty=Tensor[(1), int32] */;
  %288 = cast(%var_3606, dtype="uint8") /* ty=Tensor[(2700), uint8] */;
  %289 = dyn.reshape(%286, %287, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %290 = @func_2524() /* ty=(Tensor[(10, 3, 8), float64], Tensor[(10, 3, 8), float32]) */;
  %291 = @func_2440() /* ty=Tensor[(10, 3, 8), float32] */;
  %292 = %276.9;
  %293 = %285.5;
  %294 = bitwise_and(%288, %289) /* ty=Tensor[(2700), uint8] */;
  %295 = %290.0;
  (%291, %292, meta[relay.Constant][16] /* ty=Tensor[(1, 42), float64] */, %293, meta[relay.Constant][17] /* ty=Tensor[(819), bool] */, %var_3617, %294, %295)
}

def @func_5184(%var_5167: Tensor[(65, 7), float32], %var_5171: Tensor[(90), float32]) -> (Tensor[(10, 3, 8), float32], Tensor[(7, 13, 5), float32], Tensor[(65, 7), float32], Tensor[(588), float64], Tensor[(90), float32]) {
  %296 = @func_1175() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %297 = cast(%var_5167, dtype="float32") /* ty=Tensor[(65, 7), float32] */;
  %298 = reshape(%297, newshape=[7, 13, 5]) /* ty=Tensor[(7, 13, 5), float32] */;
  %299 = cast(%var_5171, dtype="float32") /* ty=Tensor[(90), float32] */;
  %300 = reshape(%299, newshape=[3, 6, 5]) /* ty=Tensor[(3, 6, 5), float32] */;
  %301 = @func_938(%300) /* ty=(Tensor[(588), float64], Tensor[(8, 4), uint16], Tensor[(288), uint16], Tensor[(588), float64], Tensor[(3, 6, 5), float64]) */;
  %302 = %296.0;
  %303 = @func_3935(%298) /* ty=Tensor[(7, 13, 5), float32] */;
  %304 = %301.0;
  (%302, %303, %var_5167, %304, %var_5171)
}

def @func_7307(%var_7272: Tensor[(10, 3, 8), float32]) -> (Tensor[(10, 3, 8), int64], Tensor[(312), float64], Tensor[(312), float64]) {
  %305 = @func_6066() /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32]) */;
  %306 = %305.2;
  %307 = cast(%var_7272, dtype="int64") /* ty=Tensor[(10, 3, 8), int64] */;
  %308 = shape_of(%306, dtype="int32") /* ty=Tensor[(3), int32] */;
  %309 = cast(%306, dtype="int64") /* ty=Tensor[(10, 3, 8), int64] */;
  %310 = dyn.reshape(%307, %308, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %311 = cast(meta[relay.Constant][19] /* ty=Tensor[(312), float64] */, dtype="float64") /* ty=Tensor[(312), float64] */;
  %312 = reshape(%311, newshape=[312]) /* ty=Tensor[(312), float64] */;
  %313 = @func_5050(%312) /* ty=(Tensor[(8, 12, 3), bool], Tensor[(10, 3, 8), float64], Tensor[(312), float64], Tensor[(312), float64], Tensor[(546, 1), float64], Tensor[(546, 1), float64]) */;
  %314 = bitwise_and(%309, %310) /* ty=Tensor[(10, 3, 8), int64] */;
  %315 = %313.2;
  (%314, %315, meta[relay.Constant][19] /* ty=Tensor[(312), float64] */)
}

def @func_2492() -> (Tensor[(10, 3, 8), float32],) {
  %317 = fn () -> (Tensor[(10, 3, 8), float32],) {
    %316 = @func_2440() /* ty=Tensor[(10, 3, 8), float32] */;
    (%316,)
  };
  %317() /* ty=(Tensor[(10, 3, 8), float32],) */
}

def @func_8599() -> (Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32]) {
  %318 = @func_2597() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %319 = @func_7508() /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32]) */;
  %320 = %318.0;
  %321 = %319.1;
  %322 = @func_1636() /* ty=Tensor[(10, 3, 8), float32] */;
  (%320, %321, %322)
}

def @func_7538() -> Tensor[(8, 12, 3), bool] {
  @func_7536() /* ty=Tensor[(8, 12, 3), bool] */
}

def @func_3506() -> (Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32]) {
  @func_3504() /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32]) */
}

def @func_6253(%var_6252: Tensor[(10, 3, 8), int8]) -> (Tensor[(10, 3, 8), bool], Tensor[(10, 3, 8), float32]) {
  %331 = fn (%var_6193: Tensor[(10, 3, 8), int8]) -> (Tensor[(10, 3, 8), bool], Tensor[(10, 3, 8), float32]) {
    %323 = @func_5537() /* ty=Tensor[(10, 3, 8), int8] */;
    %324 = cast(%var_6193, dtype="bool") /* ty=Tensor[(10, 3, 8), bool] */;
    %325 = shape_of(%323, dtype="int32") /* ty=Tensor[(3), int32] */;
    %326 = cast(%323, dtype="bool") /* ty=Tensor[(10, 3, 8), bool] */;
    %327 = dyn.reshape(%324, %325, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %328 = @func_4543() /* ty=(Tensor[(10, 3, 8), float32],) */;
    %329 = logical_and(%326, %327) /* ty=Tensor[(10, 3, 8), bool] */;
    %330 = %328.0;
    (%329, %330)
  };
  %331(%var_6252) /* ty=(Tensor[(10, 3, 8), bool], Tensor[(10, 3, 8), float32]) */
}

def @func_3826() -> (Tensor[(10, 3, 8), int8],) {
  %332 = @func_2850() /* ty=Tensor[(10, 3, 8), int8] */;
  (%332,)
}

def @func_8091(%var_8090: uint8) -> (Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], uint8, uint8) {
  %340 = fn (%var_8083: uint8) -> (Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], uint8, uint8) {
    %333 = @func_4543() /* ty=(Tensor[(10, 3, 8), float32],) */;
    %334 = cast(%var_8083, dtype="uint8") /* ty=uint8 */;
    %335 = reshape(%334, newshape=[]) /* ty=uint8 */;
    %336 = @func_6929(%335) /* ty=(Tensor[(10, 3, 8), int8], Tensor[(2184), uint8], Tensor[(588), float64], uint8, Tensor[(2184), uint8]) */;
    %337 = %333.0;
    %338 = @func_7879() /* ty=Tensor[(10, 3, 8), float32] */;
    %339 = %336.3;
    (%337, %338, %339, %var_8083)
  };
  %340(%var_8090) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], uint8, uint8) */
}

def @func_8140() -> Tensor[(10, 3, 8), float64] {
  %342 = fn () -> Tensor[(10, 3, 8), float64] {
    %341 = @func_2524() /* ty=(Tensor[(10, 3, 8), float64], Tensor[(10, 3, 8), float32]) */;
    %341.0
  };
  %342() /* ty=Tensor[(10, 3, 8), float64] */
}

def @func_6929(%var_6911: uint8) -> (Tensor[(10, 3, 8), int8], Tensor[(2184), uint8], Tensor[(588), float64], uint8, Tensor[(2184), uint8]) {
  %343 = cast(meta[relay.Constant][20] /* ty=Tensor[(588), float64] */, dtype="float64") /* ty=Tensor[(588), float64] */;
  %344 = cast(%var_6911, dtype="uint8") /* ty=uint8 */;
  %345 = cast(meta[relay.Constant][21] /* ty=Tensor[(2184), uint8] */, dtype="uint8") /* ty=Tensor[(2184), uint8] */;
  %346 = reshape(%343, newshape=[14, 42]) /* ty=Tensor[(14, 42), float64] */;
  %347 = reshape(%344, newshape=[]) /* ty=uint8 */;
  %348 = reshape(%345, newshape=[2184]) /* ty=Tensor[(2184), uint8] */;
  %349 = @func_4638(%346, %347, %348) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(14, 42), float64], Tensor[(14, 13, 12), float64], uint8, Tensor[(2184), uint8]) */;
  %350 = @func_5537() /* ty=Tensor[(10, 3, 8), int8] */;
  %351 = %349.5;
  (%350, %351, meta[relay.Constant][20] /* ty=Tensor[(588), float64] */, %var_6911, meta[relay.Constant][21] /* ty=Tensor[(2184), uint8] */)
}

def @func_1820(%var_1804: float64, %var_1805: Tensor[(14, 13, 3), float64]) -> (Tensor[(14, 13, 3), float64], Tensor[(10, 3, 8), float32], Tensor[(14, ?, 3), bool], Tensor[(42), float64]) {
  %352 = cast(%var_1804, dtype="float64") /* ty=float64 */;
  %353 = cast(%var_1805, dtype="float64") /* ty=Tensor[(14, 13, 3), float64] */;
  %354 = @func_1230() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %355 = cast(meta[relay.Constant][22] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
  %356 = reshape(%355, newshape=[14, 1, 3]) /* ty=Tensor[(14, 1, 3), float64] */;
  %357 = @func_121(%356) /* ty=(Tensor[(14, ?, 3), bool],) */;
  %358 = divide(%352, %353) /* ty=Tensor[(14, 13, 3), float64] */;
  %359 = %354.0;
  %360 = %357.0;
  (%358, %359, %360, meta[relay.Constant][22] /* ty=Tensor[(42), float64] */)
}

def @func_5959(%var_5956: Tensor[(11, 5, 2), float64], %var_5957: float64, %var_5958: Tensor[(11, 5, 2), float32]) -> (Tensor[(10, 3, 8), float32], float64, Tensor[(546, 1), float64], Tensor[(14, 13, 3), float64], Tensor[(11, 5, 2), float64], Tensor[(14, 13, 3), float64], Tensor[(11, 5, 2), bool]) {
  @func_5954(%var_5956, %var_5957, %var_5958) /* ty=(Tensor[(10, 3, 8), float32], float64, Tensor[(546, 1), float64], Tensor[(14, 13, 3), float64], Tensor[(11, 5, 2), float64], Tensor[(14, 13, 3), float64], Tensor[(11, 5, 2), bool]) */
}

def @func_4021(%var_3973: Tensor[(1, 90), float32], %var_3995: float64, %var_3996: Tensor[(546), float64], %var_4000: Tensor[(312), float64], %var_4012: Tensor[(10, 3, 8), float32]) -> (Tensor[(10, 3, 8), float32], Tensor[(8, 4), uint16], Tensor[(1, 90), float32], Tensor[(10, 3, 8), float32], float64, Tensor[(546), float64], Tensor[(13, 2, 12), float64], Tensor[(312), float64], Tensor[(7, 13, 5), float32], Tensor[(455, 1), float32], Tensor[(10, 3, 8), bool]) {
  %361 = @func_3597() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %362 = cast(%var_3973, dtype="float32") /* ty=Tensor[(1, 90), float32] */;
  %363 = reshape(%362, newshape=[3, 6, 5]) /* ty=Tensor[(3, 6, 5), float32] */;
  %364 = @func_938(%363) /* ty=(Tensor[(588), float64], Tensor[(8, 4), uint16], Tensor[(288), uint16], Tensor[(588), float64], Tensor[(3, 6, 5), float64]) */;
  %365 = @func_1166() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %366 = cast(%var_4000, dtype="float64") /* ty=Tensor[(312), float64] */;
  %367 = reshape(%366, newshape=[13, 2, 12]) /* ty=Tensor[(13, 2, 12), float64] */;
  %368 = cast(meta[relay.Constant][23] /* ty=Tensor[(455, 1), float32] */, dtype="float32") /* ty=Tensor[(455, 1), float32] */;
  %369 = reshape(%368, newshape=[7, 13, 5]) /* ty=Tensor[(7, 13, 5), float32] */;
  %370 = cast(%var_3995, dtype="float64") /* ty=float64 */;
  %371 = cast(%var_3996, dtype="float64") /* ty=Tensor[(546), float64] */;
  %372 = reshape(%370, newshape=[]) /* ty=float64 */;
  %373 = reshape(%371, newshape=[14, 13, 3]) /* ty=Tensor[(14, 13, 3), float64] */;
  %374 = @func_1820(%372, %373) /* ty=(Tensor[(14, 13, 3), float64], Tensor[(10, 3, 8), float32], Tensor[(14, ?, 3), bool], Tensor[(42), float64]) */;
  %375 = %374.1;
  %376 = cast(%var_4012, dtype="bool") /* ty=Tensor[(10, 3, 8), bool] */;
  %377 = shape_of(%375, dtype="int32") /* ty=Tensor[(3), int32] */;
  %378 = cast(%375, dtype="bool") /* ty=Tensor[(10, 3, 8), bool] */;
  %379 = dyn.reshape(%376, %377, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %380 = %361.0;
  %381 = %364.1;
  %382 = %365.0;
  %383 = @func_438(%367) /* ty=Tensor[(13, 2, 12), float64] */;
  %384 = @func_3935(%369) /* ty=Tensor[(7, 13, 5), float32] */;
  %385 = logical_or(%378, %379) /* ty=Tensor[(10, 3, 8), bool] */;
  (%380, %381, %var_3973, %382, %var_3995, %var_3996, %383, %var_4000, %384, meta[relay.Constant][23] /* ty=Tensor[(455, 1), float32] */, %385)
}

def @func_6089(%var_6088: Tensor[(9, 10, 8), float32]) -> (Tensor[(9, 10, 8), float32], Tensor[(8, 12, 3), float32], Tensor[(40), uint64]) {
  %392 = fn (%var_6073: Tensor[(9, 10, 8), float32]) -> (Tensor[(9, 10, 8), float32], Tensor[(8, 12, 3), float32], Tensor[(40), uint64]) {
    %386 = cast(%var_6073, dtype="float32") /* ty=Tensor[(9, 10, 8), float32] */;
    %387 = cast(meta[relay.Constant][24] /* ty=Tensor[(40), uint64] */, dtype="uint64") /* ty=Tensor[(40), uint64] */;
    %388 = reshape(%387, newshape=[40]) /* ty=Tensor[(40), uint64] */;
    %389 = @func_4387(%388) /* ty=(Tensor[(8, 12, 3), float32], Tensor[(10, 4, 1), bool], uint64, Tensor[(40), uint64], uint64, Tensor[(256), float32], Tensor[(10, 3, 8), float32], Tensor[(2700), uint32], Tensor[(260), float32]) */;
    %390 = acos(%386) /* ty=Tensor[(9, 10, 8), float32] */;
    %391 = %389.0;
    (%390, %391, meta[relay.Constant][24] /* ty=Tensor[(40), uint64] */)
  };
  %392(%var_6088) /* ty=(Tensor[(9, 10, 8), float32], Tensor[(8, 12, 3), float32], Tensor[(40), uint64]) */
}

def @func_5089(%var_5087: Tensor[(14, 10, 13), float64]) -> (Tensor[(14, 10, 13), float64],) {
  @func_5086(%var_5087) /* ty=(Tensor[(14, 10, 13), float64],) */
}

def @func_2914(%var_2912: Tensor[(7, 14, 6), int32], %var_2913: Tensor[(2700), uint32]) -> (Tensor[(7, 14, 6), float32], Tensor[(312), float64], Tensor[(2700), uint32], Tensor[(42), float64]) {
  %408 = fn (%var_2883: Tensor[(7, 14, 6), int32], %var_2908: Tensor[(2700), uint32]) -> (Tensor[(7, 14, 6), float32], Tensor[(312), float64], Tensor[(2700), uint32], Tensor[(42), float64]) {
    %393 = cast(%var_2883, dtype="int32") /* ty=Tensor[(7, 14, 6), int32] */;
    %394 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(7, 14, 6), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %395 = cast(meta[relay.Constant][25] /* ty=Tensor[(7, 14, 6), int32] */, dtype="int32") /* ty=Tensor[(7, 14, 6), int32] */;
    %396 = dyn.reshape(%393, %394, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %397 = logical_xor(%395, %396) /* ty=Tensor[(7, 14, 6), int32] */;
    %398 = cast(%397, dtype="float64") /* ty=Tensor[(7, 14, 6), float64] */;
    %399 = asinh(%398) /* ty=Tensor[(7, 14, 6), float64] */;
    %400 = cast(%399, dtype="float32") /* ty=Tensor[(7, 14, 6), float32] */;
    %401 = cast(%var_2908, dtype="uint32") /* ty=Tensor[(2700), uint32] */;
    %402 = cast(meta[relay.Constant][26] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
    %403 = reshape(%401, newshape=[15, 15, 12]) /* ty=Tensor[(15, 15, 12), uint32] */;
    %404 = reshape(%402, newshape=[42]) /* ty=Tensor[(42), float64] */;
    %405 = @func_1783(%403, %404) /* ty=(Tensor[(15, 15, 12), uint32], Tensor[(14, ?, 3), bool], Tensor[(42), float64], Tensor[(13, 2, 12), float64], Tensor[(312), float64], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(14, 6, 7), int8], Tensor[(588), float64]) */;
    %406 = rsqrt(%400) /* ty=Tensor[(7, 14, 6), float32] */;
    %407 = %405.4;
    (%406, %407, %var_2908, meta[relay.Constant][26] /* ty=Tensor[(42), float64] */)
  };
  %408(%var_2912, %var_2913) /* ty=(Tensor[(7, 14, 6), float32], Tensor[(312), float64], Tensor[(2700), uint32], Tensor[(42), float64]) */
}

def @func_1787(%var_1785: Tensor[(15, 15, 12), uint32], %var_1786: Tensor[(42), float64]) -> (Tensor[(15, 15, 12), uint32], Tensor[(14, ?, 3), bool], Tensor[(42), float64], Tensor[(13, 2, 12), float64], Tensor[(312), float64], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(14, 6, 7), int8], Tensor[(588), float64]) {
  @func_1783(%var_1785, %var_1786) /* ty=(Tensor[(15, 15, 12), uint32], Tensor[(14, ?, 3), bool], Tensor[(42), float64], Tensor[(13, 2, 12), float64], Tensor[(312), float64], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(14, 6, 7), int8], Tensor[(588), float64]) */
}

def @func_2623(%var_2618: int64) -> (Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(5, 12, 5), uint8], int64) {
  %409 = @func_1452() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %410 = @func_2524() /* ty=(Tensor[(10, 3, 8), float64], Tensor[(10, 3, 8), float32]) */;
  %411 = cast(%var_2618, dtype="int64") /* ty=int64 */;
  %412 = reshape(%411, newshape=[]) /* ty=int64 */;
  %413 = %409.0;
  %414 = %410.1;
  %415 = @func_2398(%412) /* ty=Tensor[(5, 12, 5), uint8] */;
  (%413, %414, %415, %var_2618)
}

def @func_8489() -> (Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32]) {
  @func_8487() /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32]) */
}

def @func_6717(%var_6715: float64, %var_6716: Tensor[(5, 16, 11), float64]) -> (Tensor[(5, 16, 11), bool], Tensor[(5, 16, 11), float32]) {
  @func_6713(%var_6715, %var_6716) /* ty=(Tensor[(5, 16, 11), bool], Tensor[(5, 16, 11), float32]) */
}

def @func_5086(%var_5071: Tensor[(14, 10, 13), float64]) -> (Tensor[(14, 10, 13), float64],) {
  %416 = cast(2.94303f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %417 = cast(%var_5071, dtype="float64") /* ty=Tensor[(14, 10, 13), float64] */;
  %418 = add(%416, %417) /* ty=Tensor[(14, 10, 13), float64] */;
  (%418,)
}

def @func_2442() -> Tensor[(10, 3, 8), float32] {
  @func_2440() /* ty=Tensor[(10, 3, 8), float32] */
}

def @func_315(%var_312: Tensor[(14, 6, 7), float64], %var_313: Tensor[(42), float64], %var_314: Tensor[(14, 6, 7), float64]) -> (Tensor[(14, 6, 7), float64], Tensor[(14, ?, 3), bool], Tensor[(42), float64], Tensor[(14, 6, 7), int8], Tensor[(14, ?, 3), bool]) {
  @func_310(%var_312, %var_313, %var_314) /* ty=(Tensor[(14, 6, 7), float64], Tensor[(14, ?, 3), bool], Tensor[(42), float64], Tensor[(14, 6, 7), int8], Tensor[(14, ?, 3), bool]) */
}

def @func_2626(%var_2624: int64) -> (Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(5, 12, 5), uint8], int64) {
  @func_2623(%var_2624) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(5, 12, 5), uint8], int64) */
}

def @func_5052(%var_5051: Tensor[(312), float64]) -> (Tensor[(8, 12, 3), bool], Tensor[(10, 3, 8), float64], Tensor[(312), float64], Tensor[(312), float64], Tensor[(546, 1), float64], Tensor[(546, 1), float64]) {
  %430 = fn (%var_5044: Tensor[(312), float64]) -> (Tensor[(8, 12, 3), bool], Tensor[(10, 3, 8), float64], Tensor[(312), float64], Tensor[(312), float64], Tensor[(546, 1), float64], Tensor[(546, 1), float64]) {
    %419 = @func_2524() /* ty=(Tensor[(10, 3, 8), float64], Tensor[(10, 3, 8), float32]) */;
    %420 = cast(%var_5044, dtype="float64") /* ty=Tensor[(312), float64] */;
    %421 = reshape(%420, newshape=[312]) /* ty=Tensor[(312), float64] */;
    %422 = @func_1692(%421) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(13, 2, 12), float64], Tensor[(312), float64]) */;
    %423 = cast(meta[relay.Constant][27] /* ty=Tensor[(546, 1), float64] */, dtype="float64") /* ty=Tensor[(546, 1), float64] */;
    %424 = reshape(%423, newshape=[546, 1]) /* ty=Tensor[(546, 1), float64] */;
    %425 = @func_2364(%424) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], float64, Tensor[(546, 1), float64]) */;
    %426 = @func_3146() /* ty=Tensor[(8, 12, 3), bool] */;
    %427 = %419.0;
    %428 = %422.2;
    %429 = %425.3;
    (%426, %427, %428, %var_5044, %429, meta[relay.Constant][27] /* ty=Tensor[(546, 1), float64] */)
  };
  %430(%var_5051) /* ty=(Tensor[(8, 12, 3), bool], Tensor[(10, 3, 8), float64], Tensor[(312), float64], Tensor[(312), float64], Tensor[(546, 1), float64], Tensor[(546, 1), float64]) */
}

def @func_4316() -> (Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), int16]) {
  %437 = fn () -> (Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), int16]) {
    %431 = @func_2491() /* ty=(Tensor[(10, 3, 8), float32],) */;
    %432 = %431.0;
    %433 = cast(%432, dtype="float32") /* ty=Tensor[(10, 3, 8), float32] */;
    %434 = reshape(%433, newshape=[10, 3, 8]) /* ty=Tensor[(10, 3, 8), float32] */;
    %435 = @func_3773(%434) /* ty=(Tensor[(10, 3, 8), int16],) */;
    %436 = %435.0;
    (%432, %436)
  };
  %437() /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), int16]) */
}

def @func_7392() -> (Tensor[(10, 3, 8), float32],) {
  %440 = fn () -> (Tensor[(10, 3, 8), float32],) {
    %438 = @func_1175() /* ty=(Tensor[(10, 3, 8), float32],) */;
    %439 = %438.0;
    (%439,)
  };
  %440() /* ty=(Tensor[(10, 3, 8), float32],) */
}

def @func_6863(%var_6862: Tensor[(455, 1), float32]) -> (Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), int8], Tensor[(7, 13, 5), float32], Tensor[(455, 1), float32]) {
  %447 = fn (%var_6859: Tensor[(455, 1), float32]) -> (Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), int8], Tensor[(7, 13, 5), float32], Tensor[(455, 1), float32]) {
    %441 = @func_2491() /* ty=(Tensor[(10, 3, 8), float32],) */;
    %442 = cast(%var_6859, dtype="float32") /* ty=Tensor[(455, 1), float32] */;
    %443 = reshape(%442, newshape=[7, 13, 5]) /* ty=Tensor[(7, 13, 5), float32] */;
    %444 = %441.0;
    %445 = @func_5537() /* ty=Tensor[(10, 3, 8), int8] */;
    %446 = @func_3935(%443) /* ty=Tensor[(7, 13, 5), float32] */;
    (%444, %445, %446, %var_6859)
  };
  %447(%var_6862) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), int8], Tensor[(7, 13, 5), float32], Tensor[(455, 1), float32]) */
}

def @func_1519(%var_1517: uint8, %var_1518: Tensor[(14, 13, 12), uint8]) -> (Tensor[(14, 13, 12), float64],) {
  @func_1515(%var_1517, %var_1518) /* ty=(Tensor[(14, 13, 12), float64],) */
}

def @func_3324(%var_3323: Tensor[(7, 13, 6), float32]) -> Tensor[(7, 13, 6), float32] {
  %452 = fn (%var_3305: Tensor[(7, 13, 6), float32]) -> Tensor[(7, 13, 6), float32] {
    %448 = cast(meta[relay.Constant][28] /* ty=Tensor[(7, 13, 6), float32] */, dtype="float32") /* ty=Tensor[(7, 13, 6), float32] */;
    %449 = shape_of(%var_3305, dtype="int32") /* ty=Tensor[(3), int32] */;
    %450 = cast(%var_3305, dtype="float32") /* ty=Tensor[(7, 13, 6), float32] */;
    %451 = dyn.reshape(%448, %449, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    floor_mod(%450, %451) /* ty=Tensor[(7, 13, 6), float32] */
  };
  %452(%var_3323) /* ty=Tensor[(7, 13, 6), float32] */
}

def @func_1598(%var_1532: Tensor[(32), uint16], %var_1533: Tensor[(288), uint16], %var_1551: Tensor[(588), float64]) -> (Tensor[(10, 3, 8), int8], Tensor[(14, ?, 3), float32], Tensor[(32), uint16], Tensor[(288), uint16], Tensor[(588), float64], Tensor[(10, 3, 8), float32], Tensor[(588), float64], Tensor[(14, ?, 3), bool]) {
  %453 = @func_1166() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %454 = %453.0;
  %455 = cast(meta[relay.Constant][29] /* ty=Tensor[(10, 3, 8), float32] */, dtype="int8") /* ty=Tensor[(10, 3, 8), int8] */;
  %456 = shape_of(%454, dtype="int32") /* ty=Tensor[(3), int32] */;
  %457 = cast(%454, dtype="int8") /* ty=Tensor[(10, 3, 8), int8] */;
  %458 = dyn.reshape(%455, %456, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %459 = cast(%var_1532, dtype="uint16") /* ty=Tensor[(32), uint16] */;
  %460 = cast(%var_1533, dtype="uint16") /* ty=Tensor[(288), uint16] */;
  %461 = cast(meta[relay.Constant][30] /* ty=Tensor[(588), float64] */, dtype="float64") /* ty=Tensor[(588), float64] */;
  %462 = reshape(%459, newshape=[1, 4, 8]) /* ty=Tensor[(1, 4, 8), uint16] */;
  %463 = reshape(%460, newshape=[9, 4, 8]) /* ty=Tensor[(9, 4, 8), uint16] */;
  %464 = reshape(%461, newshape=[588]) /* ty=Tensor[(588), float64] */;
  %465 = @func_552(%462, %463, %464) /* ty=(Tensor[(588), float64], Tensor[(42), float64], Tensor[(9, 4, 8), int32], Tensor[(14, ?, 3), float32]) */;
  %466 = cast(%var_1551, dtype="float64") /* ty=Tensor[(588), float64] */;
  %467 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(588), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %468 = cast(meta[relay.Constant][30] /* ty=Tensor[(588), float64] */, dtype="float64") /* ty=Tensor[(588), float64] */;
  %469 = dyn.reshape(%466, %467, newshape=[]) /* ty=Tensor[(?), float64] */;
  %470 = @func_1452() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %471 = cast(%var_1532, dtype="uint16") /* ty=Tensor[(32), uint16] */;
  %472 = cast(%var_1533, dtype="uint16") /* ty=Tensor[(288), uint16] */;
  %473 = cast(%var_1551, dtype="float64") /* ty=Tensor[(588), float64] */;
  %474 = reshape(%471, newshape=[1, 4, 8]) /* ty=Tensor[(1, 4, 8), uint16] */;
  %475 = reshape(%472, newshape=[9, 4, 8]) /* ty=Tensor[(9, 4, 8), uint16] */;
  %476 = reshape(%473, newshape=[588]) /* ty=Tensor[(588), float64] */;
  %477 = @func_552(%474, %475, %476) /* ty=(Tensor[(588), float64], Tensor[(42), float64], Tensor[(9, 4, 8), int32], Tensor[(14, ?, 3), float32]) */;
  %478 = %465.3;
  %479 = cast(%478, dtype="float64") /* ty=Tensor[(14, ?, 3), float64] */;
  %480 = reshape(%479, newshape=[14, 1, 3]) /* ty=Tensor[(14, 1, 3), float64] */;
  %481 = @func_121(%480) /* ty=(Tensor[(14, ?, 3), bool],) */;
  %482 = logical_xor(%457, %458) /* ty=Tensor[(10, 3, 8), int8] */;
  %483 = floor_mod(%468, %469) /* ty=Tensor[(588), float64] */;
  %484 = %470.0;
  %485 = %477.0;
  %486 = %481.0;
  (%482, %478, %var_1532, %var_1533, %483, %484, %485, %486)
}

def @func_7413(%var_7411: Tensor[(12, 13, 5), int16], %var_7412: Tensor[(12, 13, 5), int16]) -> (Tensor[(12, 13, 5), int16],) {
  %492 = fn (%var_7404: Tensor[(12, 13, 5), int16], %var_7405: Tensor[(12, 13, 5), int16]) -> (Tensor[(12, 13, 5), int16],) {
    %487 = cast(%var_7405, dtype="int16") /* ty=Tensor[(12, 13, 5), int16] */;
    %488 = shape_of(%var_7404, dtype="int32") /* ty=Tensor[(3), int32] */;
    %489 = cast(%var_7404, dtype="int16") /* ty=Tensor[(12, 13, 5), int16] */;
    %490 = dyn.reshape(%487, %488, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %491 = left_shift(%489, %490) /* ty=Tensor[(12, 13, 5), int16] */;
    (%491,)
  };
  %492(%var_7411, %var_7412) /* ty=(Tensor[(12, 13, 5), int16],) */
}

def @func_7759(%var_7757: Tensor[(256), float32]) -> (Tensor[(10, 3, 8), int8], uint64, Tensor[(256), float32]) {
  @func_7756(%var_7757) /* ty=(Tensor[(10, 3, 8), int8], uint64, Tensor[(256), float32]) */
}

def @func_7828(%var_7826: Tensor[(8, 15, 11), uint64], %var_7827: float64) -> (Tensor[(8, 15, 11), bool], Tensor[(42), float64], float64, Tensor[(546), float64], Tensor[(8, 15, 11), float64]) {
  @func_7824(%var_7826, %var_7827) /* ty=(Tensor[(8, 15, 11), bool], Tensor[(42), float64], float64, Tensor[(546), float64], Tensor[(8, 15, 11), float64]) */
}

def @func_557(%var_554: Tensor[(1, 4, 8), uint16], %var_555: Tensor[(9, 4, 8), uint16], %var_556: Tensor[(588), float64]) -> (Tensor[(588), float64], Tensor[(42), float64], Tensor[(9, 4, 8), int32], Tensor[(14, ?, 3), float32]) {
  @func_552(%var_554, %var_555, %var_556) /* ty=(Tensor[(588), float64], Tensor[(42), float64], Tensor[(9, 4, 8), int32], Tensor[(14, ?, 3), float32]) */
}

def @func_7879() -> Tensor[(10, 3, 8), float32] {
  %493 = @func_6066() /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32]) */;
  %493.1
}

def @func_3217(%var_3216: Tensor[(10, 3, 8), float32]) -> Tensor[(10, 3, 8), float64] {
  %500 = fn (%var_3208: Tensor[(10, 3, 8), float32]) -> Tensor[(10, 3, 8), float64] {
    %494 = @func_1452() /* ty=(Tensor[(10, 3, 8), float32],) */;
    %495 = %494.0;
    %496 = cast(%var_3208, dtype="float64") /* ty=Tensor[(10, 3, 8), float64] */;
    %497 = shape_of(%495, dtype="int32") /* ty=Tensor[(3), int32] */;
    %498 = cast(%495, dtype="float64") /* ty=Tensor[(10, 3, 8), float64] */;
    %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    floor_mod(%498, %499) /* ty=Tensor[(10, 3, 8), float64] */
  };
  %500(%var_3216) /* ty=Tensor[(10, 3, 8), float64] */
}

def @func_5242() -> (Tensor[(10, 3, 8), float32], uint64, Tensor[(10, 4), uint64]) {
  @func_5240() /* ty=(Tensor[(10, 3, 8), float32], uint64, Tensor[(10, 4), uint64]) */
}

def @func_7536() -> Tensor[(8, 12, 3), bool] {
  @func_3146() /* ty=Tensor[(8, 12, 3), bool] */
}

def @func_3529() -> Tensor[(8, 12, 3), bool] {
  %501 = fn () -> Tensor[(8, 12, 3), bool] {
    @func_3146() /* ty=Tensor[(8, 12, 3), bool] */
  };
  %501() /* ty=Tensor[(8, 12, 3), bool] */
}

def @func_7756(%var_7737: Tensor[(256), float32]) -> (Tensor[(10, 3, 8), int8], uint64, Tensor[(256), float32]) {
  %502 = cast(%var_7737, dtype="float32") /* ty=Tensor[(256), float32] */;
  %503 = reshape(%502, newshape=[8, 8, 4]) /* ty=Tensor[(8, 8, 4), float32] */;
  %504 = @func_2826(%503) /* ty=(Tensor[(8, 8, 4), float32], Tensor[(10, 4, 1), bool], uint64, Tensor[(40), uint64]) */;
  %505 = @func_5845() /* ty=Tensor[(10, 3, 8), int8] */;
  %506 = %504.2;
  (%505, %506, %var_7737)
}

def @func_7223() -> Tensor[(10, 3, 8), float32] {
  %507 = @func_4730() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %507.0
}

def @func_3344() -> Tensor[(10, 3, 8), float32] {
  %508 = fn () -> Tensor[(10, 3, 8), float32] {
    @func_1865() /* ty=Tensor[(10, 3, 8), float32] */
  };
  %508() /* ty=Tensor[(10, 3, 8), float32] */
}

def @func_3166() -> Tensor[(10, 3, 8), int8] {
  @func_2850() /* ty=Tensor[(10, 3, 8), int8] */
}

def @func_4242(%var_4241: Tensor[(8, 12, 3), bool]) -> (Tensor[(8, 12, 3), int16], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(7, 13, 5), bool], Tensor[(7, 13, 5), uint8]) {
  %532 = fn (%var_4198: Tensor[(8, 12, 3), bool]) -> (Tensor[(8, 12, 3), int16], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(7, 13, 5), bool], Tensor[(7, 13, 5), uint8]) {
    %509 = @func_3146() /* ty=Tensor[(8, 12, 3), bool] */;
    %510 = cast(%var_4198, dtype="int16") /* ty=Tensor[(8, 12, 3), int16] */;
    %511 = shape_of(%509, dtype="int32") /* ty=Tensor[(3), int32] */;
    %512 = cast(%509, dtype="int16") /* ty=Tensor[(8, 12, 3), int16] */;
    %513 = dyn.reshape(%510, %511, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %514 = @func_2524() /* ty=(Tensor[(10, 3, 8), float64], Tensor[(10, 3, 8), float32]) */;
    %515 = @func_4100() /* ty=(Tensor[(10, 3, 8), float32],) */;
    %516 = cast(meta[relay.Constant][31] /* ty=Tensor[(455), float32] */, dtype="float32") /* ty=Tensor[(455), float32] */;
    %517 = reshape(%516, newshape=[7, 13, 5]) /* ty=Tensor[(7, 13, 5), float32] */;
    %518 = @func_3935(%517) /* ty=Tensor[(7, 13, 5), float32] */;
    %519 = cast(meta[relay.Constant][31] /* ty=Tensor[(455), float32] */, dtype="bool") /* ty=Tensor[(455), bool] */;
    %520 = shape_of(%518, dtype="int32") /* ty=Tensor[(3), int32] */;
    %521 = cast(%518, dtype="bool") /* ty=Tensor[(7, 13, 5), bool] */;
    %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %523 = cast(meta[relay.Constant][31] /* ty=Tensor[(455), float32] */, dtype="uint8") /* ty=Tensor[(455), uint8] */;
    %524 = shape_of(%518, dtype="int32") /* ty=Tensor[(3), int32] */;
    %525 = cast(%518, dtype="uint8") /* ty=Tensor[(7, 13, 5), uint8] */;
    %526 = dyn.reshape(%523, %524, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %527 = multiply(%512, %513) /* ty=Tensor[(8, 12, 3), int16] */;
    %528 = %514.1;
    %529 = %515.0;
    %530 = greater_equal(%521, %522) /* ty=Tensor[(7, 13, 5), bool] */;
    %531 = multiply(%525, %526) /* ty=Tensor[(7, 13, 5), uint8] */;
    (%527, %528, %529, %530, %531)
  };
  %532(%var_4241) /* ty=(Tensor[(8, 12, 3), int16], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(7, 13, 5), bool], Tensor[(7, 13, 5), uint8]) */
}

def @func_6165() -> Tensor[(8, 12, 3), bool] {
  @func_6163() /* ty=Tensor[(8, 12, 3), bool] */
}

def @func_4028(%var_4023: Tensor[(1, 90), float32], %var_4024: float64, %var_4025: Tensor[(546), float64], %var_4026: Tensor[(312), float64], %var_4027: Tensor[(10, 3, 8), float32]) -> (Tensor[(10, 3, 8), float32], Tensor[(8, 4), uint16], Tensor[(1, 90), float32], Tensor[(10, 3, 8), float32], float64, Tensor[(546), float64], Tensor[(13, 2, 12), float64], Tensor[(312), float64], Tensor[(7, 13, 5), float32], Tensor[(455, 1), float32], Tensor[(10, 3, 8), bool]) {
  @func_4021(%var_4023, %var_4024, %var_4025, %var_4026, %var_4027) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(8, 4), uint16], Tensor[(1, 90), float32], Tensor[(10, 3, 8), float32], float64, Tensor[(546), float64], Tensor[(13, 2, 12), float64], Tensor[(312), float64], Tensor[(7, 13, 5), float32], Tensor[(455, 1), float32], Tensor[(10, 3, 8), bool]) */
}

def @func_6444(%var_6443: Tensor[(3, 3), float32]) -> (Tensor[(3, 3), float32], Tensor[(2700), uint32], Tensor[(40), uint64]) {
  %539 = fn (%var_6418: Tensor[(3, 3), float32]) -> (Tensor[(3, 3), float32], Tensor[(2700), uint32], Tensor[(40), uint64]) {
    %533 = cast(%var_6418, dtype="float32") /* ty=Tensor[(3, 3), float32] */;
    %534 = cast(meta[relay.Constant][32] /* ty=Tensor[(40), uint64] */, dtype="uint64") /* ty=Tensor[(40), uint64] */;
    %535 = reshape(%534, newshape=[40]) /* ty=Tensor[(40), uint64] */;
    %536 = @func_4387(%535) /* ty=(Tensor[(8, 12, 3), float32], Tensor[(10, 4, 1), bool], uint64, Tensor[(40), uint64], uint64, Tensor[(256), float32], Tensor[(10, 3, 8), float32], Tensor[(2700), uint32], Tensor[(260), float32]) */;
    %537 = sin(%533) /* ty=Tensor[(3, 3), float32] */;
    %538 = %536.7;
    (%537, %538, meta[relay.Constant][32] /* ty=Tensor[(40), uint64] */)
  };
  %539(%var_6443) /* ty=(Tensor[(3, 3), float32], Tensor[(2700), uint32], Tensor[(40), uint64]) */
}

def @func_1783(%var_1734: Tensor[(15, 15, 12), uint32], %var_1740: Tensor[(42), float64]) -> (Tensor[(15, 15, 12), uint32], Tensor[(14, ?, 3), bool], Tensor[(42), float64], Tensor[(13, 2, 12), float64], Tensor[(312), float64], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(14, 6, 7), int8], Tensor[(588), float64]) {
  %540 = cast(meta[relay.Constant][33] /* ty=Tensor[(15, 15, 12), uint32] */, dtype="uint32") /* ty=Tensor[(15, 15, 12), uint32] */;
  %541 = shape_of(%var_1734, dtype="int32") /* ty=Tensor[(3), int32] */;
  %542 = cast(%var_1734, dtype="uint32") /* ty=Tensor[(15, 15, 12), uint32] */;
  %543 = dyn.reshape(%540, %541, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %544 = cast(%var_1740, dtype="float64") /* ty=Tensor[(42), float64] */;
  %545 = reshape(%544, newshape=[14, 1, 3]) /* ty=Tensor[(14, 1, 3), float64] */;
  %546 = @func_121(%545) /* ty=(Tensor[(14, ?, 3), bool],) */;
  %547 = cast(meta[relay.Constant][34] /* ty=Tensor[(312), float64] */, dtype="float64") /* ty=Tensor[(312), float64] */;
  %548 = reshape(%547, newshape=[13, 2, 12]) /* ty=Tensor[(13, 2, 12), float64] */;
  %549 = @func_1452() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %550 = @func_1166() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %551 = @func_1166() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %552 = %551.0;
  %553 = cast(%552, dtype="float32") /* ty=Tensor[(10, 3, 8), float32] */;
  %554 = cast(meta[relay.Constant][35] /* ty=Tensor[(588), float64] */, dtype="float64") /* ty=Tensor[(588), float64] */;
  %555 = %546.0;
  %556 = cast(%555, dtype="float64") /* ty=Tensor[(14, ?, 3), float64] */;
  %557 = cast(meta[relay.Constant][35] /* ty=Tensor[(588), float64] */, dtype="float64") /* ty=Tensor[(588), float64] */;
  %558 = reshape(%554, newshape=[14, 6, 7]) /* ty=Tensor[(14, 6, 7), float64] */;
  %559 = reshape(%556, newshape=[42]) /* ty=Tensor[(42), float64] */;
  %560 = reshape(%557, newshape=[14, 6, 7]) /* ty=Tensor[(14, 6, 7), float64] */;
  %561 = @func_310(%558, %559, %560) /* ty=(Tensor[(14, 6, 7), float64], Tensor[(14, ?, 3), bool], Tensor[(42), float64], Tensor[(14, 6, 7), int8], Tensor[(14, ?, 3), bool]) */;
  %562 = logical_xor(%542, %543) /* ty=Tensor[(15, 15, 12), uint32] */;
  %563 = @func_438(%548) /* ty=Tensor[(13, 2, 12), float64] */;
  %564 = %549.0;
  %565 = %550.0;
  %566 = sin(%553) /* ty=Tensor[(10, 3, 8), float32] */;
  %567 = %561.3;
  (%562, %555, %var_1740, %563, meta[relay.Constant][34] /* ty=Tensor[(312), float64] */, %564, %565, %566, %567, meta[relay.Constant][35] /* ty=Tensor[(588), float64] */)
}

def @func_3277() -> Tensor[(10, 3, 8), float32] {
  %568 = fn () -> Tensor[(10, 3, 8), float32] {
    @func_1636() /* ty=Tensor[(10, 3, 8), float32] */
  };
  %568() /* ty=Tensor[(10, 3, 8), float32] */
}

def @func_7509() -> (Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32]) {
  %573 = fn () -> (Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32]) {
    %569 = @func_7391() /* ty=(Tensor[(10, 3, 8), float32],) */;
    %570 = @func_5436() /* ty=(Tensor[(10, 3, 8), float32],) */;
    %571 = %569.0;
    %572 = %570.0;
    (%571, %572)
  };
  %573() /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32]) */
}

def @func_5438() -> (Tensor[(10, 3, 8), float32],) {
  @func_5436() /* ty=(Tensor[(10, 3, 8), float32],) */
}

def @func_4102() -> (Tensor[(10, 3, 8), float32],) {
  @func_4100() /* ty=(Tensor[(10, 3, 8), float32],) */
}

def @func_2597() -> (Tensor[(10, 3, 8), float32],) {
  %574 = @func_1636() /* ty=Tensor[(10, 3, 8), float32] */;
  (%574,)
}

def @func_7054() -> (Tensor[(10, 3, 8), int8],) {
  @func_7052() /* ty=(Tensor[(10, 3, 8), int8],) */
}

def @func_5539() -> Tensor[(10, 3, 8), int8] {
  @func_5537() /* ty=Tensor[(10, 3, 8), int8] */
}

def @func_7881() -> Tensor[(10, 3, 8), float32] {
  @func_7879() /* ty=Tensor[(10, 3, 8), float32] */
}

def @func_8016(%var_8014: Tensor[(130, 6), int16], %var_8015: Tensor[(2700), uint32]) -> (Tensor[(8, 12, 3), bool], Tensor[(8, 12, 3), bool], Tensor[(2700), uint32], Tensor[(90), float32], Tensor[(78, 4), float64], Tensor[(42), float64], Tensor[(13, 2, 12), float64], Tensor[(130, 6), int8]) {
  %600 = fn (%var_7986: Tensor[(130, 6), int16], %var_7996: Tensor[(2700), uint32]) -> (Tensor[(8, 12, 3), bool], Tensor[(8, 12, 3), bool], Tensor[(2700), uint32], Tensor[(90), float32], Tensor[(78, 4), float64], Tensor[(42), float64], Tensor[(13, 2, 12), float64], Tensor[(130, 6), int8]) {
    %575 = cast(%var_7996, dtype="uint32") /* ty=Tensor[(2700), uint32] */;
    %576 = reshape(%575, newshape=[2700]) /* ty=Tensor[(2700), uint32] */;
    %577 = @func_6414(%576) /* ty=(Tensor[(8, 12, 3), bool], Tensor[(42), float64], Tensor[(588), int32], Tensor[(2700), uint32], Tensor[(10, 3, 8), float32], Tensor[(8, 12, 3), bool], Tensor[(10, 3, 8), int8], Tensor[(10, 3, 8), int8], Tensor[(8, 12, 3), bool]) */;
    %578 = cast(meta[relay.Constant][36] /* ty=Tensor[(78, 4), float64] */, dtype="float64") /* ty=Tensor[(78, 4), float64] */;
    %579 = cast(meta[relay.Constant][37] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
    %580 = reshape(%578, newshape=[312]) /* ty=Tensor[(312), float64] */;
    %581 = reshape(%579, newshape=[42]) /* ty=Tensor[(42), float64] */;
    %582 = @func_2270(%580, %581) /* ty=(Tensor[(13, 2, 12), float64], Tensor[(312), float64], Tensor[(10, 3, 8), float32], Tensor[(588), float64], Tensor[(90), float32], Tensor[(3, 6, 5), float64], Tensor[(14, ?, 3), bool], Tensor[(42), float64], Tensor[(14, ?, 3), bool], Tensor[(10, 3, 8), float32], Tensor[(15, 3, 6), float32]) */;
    %583 = cast(meta[relay.Constant][36] /* ty=Tensor[(78, 4), float64] */, dtype="float64") /* ty=Tensor[(78, 4), float64] */;
    %584 = reshape(%583, newshape=[13, 2, 12]) /* ty=Tensor[(13, 2, 12), float64] */;
    %585 = cast(%var_7986, dtype="int16") /* ty=Tensor[(130, 6), int16] */;
    %586 = cast(%var_7986, dtype="int16") /* ty=Tensor[(130, 6), int16] */;
    %587 = reshape(%585, newshape=[12, 13, 5]) /* ty=Tensor[(12, 13, 5), int16] */;
    %588 = reshape(%586, newshape=[12, 13, 5]) /* ty=Tensor[(12, 13, 5), int16] */;
    %589 = @func_7410(%587, %588) /* ty=(Tensor[(12, 13, 5), int16],) */;
    %590 = %589.0;
    %591 = cast(%590, dtype="int8") /* ty=Tensor[(12, 13, 5), int8] */;
    %592 = shape_of(%var_7986, dtype="int32") /* ty=Tensor[(2), int32] */;
    %593 = cast(%var_7986, dtype="int8") /* ty=Tensor[(130, 6), int8] */;
    %594 = dyn.reshape(%591, %592, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
    %595 = @func_3146() /* ty=Tensor[(8, 12, 3), bool] */;
    %596 = %577.8;
    %597 = %582.4;
    %598 = @func_438(%584) /* ty=Tensor[(13, 2, 12), float64] */;
    %599 = multiply(%593, %594) /* ty=Tensor[(130, 6), int8] */;
    (%595, %596, %var_7996, %597, meta[relay.Constant][36] /* ty=Tensor[(78, 4), float64] */, meta[relay.Constant][37] /* ty=Tensor[(42), float64] */, %598, %599)
  };
  %600(%var_8014, %var_8015) /* ty=(Tensor[(8, 12, 3), bool], Tensor[(8, 12, 3), bool], Tensor[(2700), uint32], Tensor[(90), float32], Tensor[(78, 4), float64], Tensor[(42), float64], Tensor[(13, 2, 12), float64], Tensor[(130, 6), int8]) */
}

def @func_8268(%var_8266: Tensor[(312), float64]) -> (Tensor[(8, 12, 3), bool], Tensor[(10, 3, 8), float32], Tensor[(546, 1), float64], Tensor[(312), float64]) {
  @func_8265(%var_8266) /* ty=(Tensor[(8, 12, 3), bool], Tensor[(10, 3, 8), float32], Tensor[(546, 1), float64], Tensor[(312), float64]) */
}

def @func_2328(%var_2326: uint64, %var_2327: Tensor[(10, 4, 1), uint64]) -> (Tensor[(10, 4, 1), bool],) {
  %607 = fn (%var_2304: uint64, %var_2305: Tensor[(10, 4, 1), uint64]) -> (Tensor[(10, 4, 1), bool],) {
    %601 = cast(%var_2304, dtype="bool") /* ty=bool */;
    %602 = cast(%var_2305, dtype="bool") /* ty=Tensor[(10, 4, 1), bool] */;
    %603 = not_equal(%601, %602) /* ty=Tensor[(10, 4, 1), bool] */;
    %604 = cast(%var_2304, dtype="bool") /* ty=bool */;
    %605 = cast(%603, dtype="bool") /* ty=Tensor[(10, 4, 1), bool] */;
    %606 = less_equal(%604, %605) /* ty=Tensor[(10, 4, 1), bool] */;
    (%606,)
  };
  %607(%var_2326, %var_2327) /* ty=(Tensor[(10, 4, 1), bool],) */
}

def @func_2599() -> (Tensor[(10, 3, 8), float32],) {
  @func_2597() /* ty=(Tensor[(10, 3, 8), float32],) */
}

def @func_2274(%var_2272: Tensor[(312), float64], %var_2273: Tensor[(42), float64]) -> (Tensor[(13, 2, 12), float64], Tensor[(312), float64], Tensor[(10, 3, 8), float32], Tensor[(588), float64], Tensor[(90), float32], Tensor[(3, 6, 5), float64], Tensor[(14, ?, 3), bool], Tensor[(42), float64], Tensor[(14, ?, 3), bool], Tensor[(10, 3, 8), float32], Tensor[(15, 3, 6), float32]) {
  @func_2270(%var_2272, %var_2273) /* ty=(Tensor[(13, 2, 12), float64], Tensor[(312), float64], Tensor[(10, 3, 8), float32], Tensor[(588), float64], Tensor[(90), float32], Tensor[(3, 6, 5), float64], Tensor[(14, ?, 3), bool], Tensor[(42), float64], Tensor[(14, ?, 3), bool], Tensor[(10, 3, 8), float32], Tensor[(15, 3, 6), float32]) */
}

def @func_7251(%var_7250: Tensor[(1, 9, 16), float32]) -> Tensor[(1, 9, 16), float32] {
  %609 = fn (%var_7238: Tensor[(1, 9, 16), float32]) -> Tensor[(1, 9, 16), float32] {
    %608 = cast(%var_7238, dtype="float32") /* ty=Tensor[(1, 9, 16), float32] */;
    acosh(%608) /* ty=Tensor[(1, 9, 16), float32] */
  };
  %609(%var_7250) /* ty=Tensor[(1, 9, 16), float32] */
}

def @func_7367(%var_7337: Tensor[(13, 10, 5), int64], %var_7338: Tensor[(13, 10, 5), int64]) -> (Tensor[(13, 10, 5), int64],) {
  %610 = cast(%var_7338, dtype="int64") /* ty=Tensor[(13, 10, 5), int64] */;
  %611 = shape_of(%var_7337, dtype="int32") /* ty=Tensor[(3), int32] */;
  %612 = cast(%var_7337, dtype="int64") /* ty=Tensor[(13, 10, 5), int64] */;
  %613 = dyn.reshape(%610, %611, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %614 = subtract(%612, %613) /* ty=Tensor[(13, 10, 5), int64] */;
  (%614,)
}

def @func_3168() -> Tensor[(10, 3, 8), int8] {
  @func_3166() /* ty=Tensor[(10, 3, 8), int8] */
}

def @func_3597() -> (Tensor[(10, 3, 8), float32],) {
  %615 = @func_3083() /* ty=Tensor[(10, 3, 8), float32] */;
  (%615,)
}

def @func_6163() -> Tensor[(8, 12, 3), bool] {
  @func_3528() /* ty=Tensor[(8, 12, 3), bool] */
}

def @func_8389(%var_8387: Tensor[(312), float64], %var_8388: Tensor[(144), float32]) -> (Tensor[(10, 3, 8), float32], Tensor[(312), float64], Tensor[(1, 9, 16), float32], Tensor[(546, 144), bool]) {
  %628 = fn (%var_8369: Tensor[(312), float64], %var_8379: Tensor[(144), float32]) -> (Tensor[(10, 3, 8), float32], Tensor[(312), float64], Tensor[(1, 9, 16), float32], Tensor[(546, 144), bool]) {
    %616 = @func_5436() /* ty=(Tensor[(10, 3, 8), float32],) */;
    %617 = cast(%var_8379, dtype="float32") /* ty=Tensor[(144), float32] */;
    %618 = reshape(%617, newshape=[1, 9, 16]) /* ty=Tensor[(1, 9, 16), float32] */;
    %619 = cast(%var_8369, dtype="float64") /* ty=Tensor[(312), float64] */;
    %620 = reshape(%619, newshape=[312]) /* ty=Tensor[(312), float64] */;
    %621 = @func_8265(%620) /* ty=(Tensor[(8, 12, 3), bool], Tensor[(10, 3, 8), float32], Tensor[(546, 1), float64], Tensor[(312), float64]) */;
    %622 = %621.2;
    %623 = cast(%var_8379, dtype="bool") /* ty=Tensor[(144), bool] */;
    %624 = cast(%622, dtype="bool") /* ty=Tensor[(546, 1), bool] */;
    %625 = %616.0;
    %626 = @func_7249(%618) /* ty=Tensor[(1, 9, 16), float32] */;
    %627 = not_equal(%623, %624) /* ty=Tensor[(546, 144), bool] */;
    (%625, %var_8369, %626, %627)
  };
  %628(%var_8387, %var_8388) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(312), float64], Tensor[(1, 9, 16), float32], Tensor[(546, 144), bool]) */
}

def @func_4100() -> (Tensor[(10, 3, 8), float32],) {
  %629 = @func_1865() /* ty=Tensor[(10, 3, 8), float32] */;
  (%629,)
}

def @func_438(%var_429: Tensor[(13, 2, 12), float64]) -> Tensor[(13, 2, 12), float64] {
  %630 = cast(%var_429, dtype="float64") /* ty=Tensor[(13, 2, 12), float64] */;
  sqrt(%630) /* ty=Tensor[(13, 2, 12), float64] */
}

def @func_3599() -> (Tensor[(10, 3, 8), float32],) {
  @func_3597() /* ty=(Tensor[(10, 3, 8), float32],) */
}

def @func_6469(%var_6467: uint32, %var_6468: Tensor[(12, 7, 10), uint32]) -> (Tensor[(12, 7, 10), uint32],) {
  @func_6465(%var_6467, %var_6468) /* ty=(Tensor[(12, 7, 10), uint32],) */
}

def @func_7052() -> (Tensor[(10, 3, 8), int8],) {
  %631 = @func_3826() /* ty=(Tensor[(10, 3, 8), int8],) */;
  %632 = %631.0;
  (%632,)
}

def @func_1515(%var_1503: uint8, %var_1504: Tensor[(14, 13, 12), uint8]) -> (Tensor[(14, 13, 12), float64],) {
  %633 = cast(%var_1503, dtype="uint8") /* ty=uint8 */;
  %634 = cast(%var_1504, dtype="uint8") /* ty=Tensor[(14, 13, 12), uint8] */;
  %635 = bitwise_xor(%633, %634) /* ty=Tensor[(14, 13, 12), uint8] */;
  %636 = cast(%635, dtype="float64") /* ty=Tensor[(14, 13, 12), float64] */;
  %637 = sin(%636) /* ty=Tensor[(14, 13, 12), float64] */;
  (%637,)
}

def @func_2763(%var_2761: bool, %var_2762: Tensor[(16, 4, 14), bool]) -> Tensor[(16, 4, 14), bool] {
  %640 = fn (%var_2751: bool, %var_2752: Tensor[(16, 4, 14), bool]) -> Tensor[(16, 4, 14), bool] {
    %638 = cast(%var_2751, dtype="bool") /* ty=bool */;
    %639 = cast(%var_2752, dtype="bool") /* ty=Tensor[(16, 4, 14), bool] */;
    logical_or(%638, %639) /* ty=Tensor[(16, 4, 14), bool] */
  };
  %640(%var_2761, %var_2762) /* ty=Tensor[(16, 4, 14), bool] */
}

def @func_1638() -> Tensor[(10, 3, 8), float32] {
  @func_1636() /* ty=Tensor[(10, 3, 8), float32] */
}

def @func_3725(%var_3724: float64) -> (Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], float64, Tensor[(546), float64], Tensor[(10, 3, 8), float64], Tensor[(5, 12, 5), uint8]) {
  %658 = fn (%var_3699: float64) -> (Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], float64, Tensor[(546), float64], Tensor[(10, 3, 8), float64], Tensor[(5, 12, 5), uint8]) {
    %641 = @func_2491() /* ty=(Tensor[(10, 3, 8), float32],) */;
    %642 = @func_2491() /* ty=(Tensor[(10, 3, 8), float32],) */;
    %643 = @func_1175() /* ty=(Tensor[(10, 3, 8), float32],) */;
    %644 = cast(%var_3699, dtype="float64") /* ty=float64 */;
    %645 = cast(meta[relay.Constant][38] /* ty=Tensor[(546), float64] */, dtype="float64") /* ty=Tensor[(546), float64] */;
    %646 = reshape(%644, newshape=[]) /* ty=float64 */;
    %647 = reshape(%645, newshape=[14, 13, 3]) /* ty=Tensor[(14, 13, 3), float64] */;
    %648 = @func_1820(%646, %647) /* ty=(Tensor[(14, 13, 3), float64], Tensor[(10, 3, 8), float32], Tensor[(14, ?, 3), bool], Tensor[(42), float64]) */;
    %649 = @func_2524() /* ty=(Tensor[(10, 3, 8), float64], Tensor[(10, 3, 8), float32]) */;
    %650 = cast(%var_3699, dtype="int64") /* ty=int64 */;
    %651 = reshape(%650, newshape=[]) /* ty=int64 */;
    %652 = %641.0;
    %653 = %642.0;
    %654 = %643.0;
    %655 = %648.1;
    %656 = %649.0;
    %657 = @func_2398(%651) /* ty=Tensor[(5, 12, 5), uint8] */;
    (%652, %653, %654, %655, %var_3699, meta[relay.Constant][38] /* ty=Tensor[(546), float64] */, %656, %657)
  };
  %658(%var_3724) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], float64, Tensor[(546), float64], Tensor[(10, 3, 8), float64], Tensor[(5, 12, 5), uint8]) */
}

def @func_5986(%var_5970: Tensor[(7, 84), float64], %var_5981: uint8) -> (Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(7, 84), float64], Tensor[(14, 13, 12), float64], uint8, Tensor[(2184), uint8]) {
  %659 = @func_3504() /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32]) */;
  %660 = cast(%var_5970, dtype="float64") /* ty=Tensor[(7, 84), float64] */;
  %661 = reshape(%660, newshape=[588]) /* ty=Tensor[(588), float64] */;
  %662 = @func_1298(%661) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(42), float64], Tensor[(588), float64], Tensor[(42), float64], Tensor[(14, ?, 3), bool]) */;
  %663 = cast(%var_5981, dtype="uint8") /* ty=uint8 */;
  %664 = cast(meta[relay.Constant][39] /* ty=Tensor[(2184), uint8] */, dtype="uint8") /* ty=Tensor[(2184), uint8] */;
  %665 = reshape(%663, newshape=[]) /* ty=uint8 */;
  %666 = reshape(%664, newshape=[14, 13, 12]) /* ty=Tensor[(14, 13, 12), uint8] */;
  %667 = @func_1515(%665, %666) /* ty=(Tensor[(14, 13, 12), float64],) */;
  %668 = %659.1;
  %669 = %662.0;
  %670 = %667.0;
  (%668, %669, %var_5970, %670, %var_5981, meta[relay.Constant][39] /* ty=Tensor[(2184), uint8] */)
}

def @func_7310(%var_7308: Tensor[(10, 3, 8), float32]) -> (Tensor[(10, 3, 8), int64], Tensor[(312), float64], Tensor[(312), float64]) {
  @func_7307(%var_7308) /* ty=(Tensor[(10, 3, 8), int64], Tensor[(312), float64], Tensor[(312), float64]) */
}

def @func_4257() -> (Tensor[(8, 12, 3), bool],) {
  %672 = fn () -> (Tensor[(8, 12, 3), bool],) {
    %671 = @func_3146() /* ty=Tensor[(8, 12, 3), bool] */;
    (%671,)
  };
  %672() /* ty=(Tensor[(8, 12, 3), bool],) */
}

def @func_5954(%var_5881: Tensor[(11, 5, 2), float64], %var_5897: float64, %var_5949: Tensor[(11, 5, 2), float32]) -> (Tensor[(10, 3, 8), float32], float64, Tensor[(546, 1), float64], Tensor[(14, 13, 3), float64], Tensor[(11, 5, 2), float64], Tensor[(14, 13, 3), float64], Tensor[(11, 5, 2), bool]) {
  %673 = cast(%var_5897, dtype="float64") /* ty=float64 */;
  %674 = cast(meta[relay.Constant][40] /* ty=Tensor[(546, 1), float64] */, dtype="float64") /* ty=Tensor[(546, 1), float64] */;
  %675 = reshape(%673, newshape=[]) /* ty=float64 */;
  %676 = reshape(%674, newshape=[14, 13, 3]) /* ty=Tensor[(14, 13, 3), float64] */;
  %677 = @func_1820(%675, %676) /* ty=(Tensor[(14, 13, 3), float64], Tensor[(10, 3, 8), float32], Tensor[(14, ?, 3), bool], Tensor[(42), float64]) */;
  %678 = %677.0;
  %679 = cast(%678, dtype="float64") /* ty=Tensor[(14, 13, 3), float64] */;
  %680 = cast(%var_5881, dtype="float64") /* ty=Tensor[(11, 5, 2), float64] */;
  %681 = cos(%680) /* ty=Tensor[(11, 5, 2), float64] */;
  %682 = cast(%681, dtype="float32") /* ty=Tensor[(11, 5, 2), float32] */;
  %683 = atanh(%682) /* ty=Tensor[(11, 5, 2), float32] */;
  %684 = cast(%683, dtype="float64") /* ty=Tensor[(11, 5, 2), float64] */;
  %685 = cast(meta[relay.Constant][41] /* ty=Tensor[(14, 13, 3), float64] */, dtype="float64") /* ty=Tensor[(14, 13, 3), float64] */;
  %686 = shape_of(%678, dtype="int32") /* ty=Tensor[(3), int32] */;
  %687 = cast(%678, dtype="float64") /* ty=Tensor[(14, 13, 3), float64] */;
  %688 = dyn.reshape(%685, %686, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %689 = cast(%var_5949, dtype="bool") /* ty=Tensor[(11, 5, 2), bool] */;
  %690 = shape_of(%683, dtype="int32") /* ty=Tensor[(3), int32] */;
  %691 = cast(%683, dtype="bool") /* ty=Tensor[(11, 5, 2), bool] */;
  %692 = dyn.reshape(%689, %690, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %693 = @func_2440() /* ty=Tensor[(10, 3, 8), float32] */;
  %694 = atanh(%679) /* ty=Tensor[(14, 13, 3), float64] */;
  %695 = log2(%684) /* ty=Tensor[(11, 5, 2), float64] */;
  %696 = mod(%687, %688) /* ty=Tensor[(14, 13, 3), float64] */;
  %697 = equal(%691, %692) /* ty=Tensor[(11, 5, 2), bool] */;
  (%693, %var_5897, meta[relay.Constant][40] /* ty=Tensor[(546, 1), float64] */, %694, %695, %696, %697)
}

def @func_8487() -> (Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32]) {
  %698 = @func_6066() /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32]) */;
  %699 = @func_1452() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %700 = %698.2;
  %701 = %699.0;
  (%700, %701)
}

def @func_5240() -> (Tensor[(10, 3, 8), float32], uint64, Tensor[(10, 4), uint64]) {
  %702 = cast(meta[relay.Constant][42] /* ty=Tensor[(10, 4), uint64] */, dtype="uint64") /* ty=Tensor[(10, 4), uint64] */;
  %703 = reshape(%702, newshape=[40]) /* ty=Tensor[(40), uint64] */;
  %704 = @func_4387(%703) /* ty=(Tensor[(8, 12, 3), float32], Tensor[(10, 4, 1), bool], uint64, Tensor[(40), uint64], uint64, Tensor[(256), float32], Tensor[(10, 3, 8), float32], Tensor[(2700), uint32], Tensor[(260), float32]) */;
  %705 = @func_3276() /* ty=Tensor[(10, 3, 8), float32] */;
  %706 = %704.4;
  (%705, %706, meta[relay.Constant][42] /* ty=Tensor[(10, 4), uint64] */)
}

def @func_3474(%var_3472: Tensor[(165), int16], %var_3473: Tensor[(546), float64]) -> (Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(3, 5, 11), bool], Tensor[(165), int16], Tensor[(42), float64], Tensor[(588), float64], Tensor[(42), float64], Tensor[(10, 3, 8), float32], Tensor[(546), float64], Tensor[(5, 4, 13), float32], Tensor[(260), float32], Tensor[(10, 3, 8), float32], Tensor[(11, 10, 9), float64]) {
  @func_3470(%var_3472, %var_3473) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(3, 5, 11), bool], Tensor[(165), int16], Tensor[(42), float64], Tensor[(588), float64], Tensor[(42), float64], Tensor[(10, 3, 8), float32], Tensor[(546), float64], Tensor[(5, 4, 13), float32], Tensor[(260), float32], Tensor[(10, 3, 8), float32], Tensor[(11, 10, 9), float64]) */
}

def @func_6713(%var_6698: float64, %var_6699: Tensor[(5, 16, 11), float64]) -> (Tensor[(5, 16, 11), bool], Tensor[(5, 16, 11), float32]) {
  %707 = cast(%var_6698, dtype="bool") /* ty=bool */;
  %708 = cast(%var_6699, dtype="bool") /* ty=Tensor[(5, 16, 11), bool] */;
  %709 = cast(meta[relay.Constant][43] /* ty=Tensor[(5, 16, 11), float64] */, dtype="float32") /* ty=Tensor[(5, 16, 11), float32] */;
  %710 = shape_of(%var_6699, dtype="int32") /* ty=Tensor[(3), int32] */;
  %711 = cast(%var_6699, dtype="float32") /* ty=Tensor[(5, 16, 11), float32] */;
  %712 = dyn.reshape(%709, %710, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %713 = not_equal(%707, %708) /* ty=Tensor[(5, 16, 11), bool] */;
  %714 = multiply(%711, %712) /* ty=Tensor[(5, 16, 11), float32] */;
  (%713, %714)
}

def @func_2694(%var_2691: Tensor[(90), float32]) -> (Tensor[(10, 3, 8), int32], Tensor[(10, 3, 8), float32], Tensor[(588), float64], Tensor[(90), float32]) {
  %715 = @func_2524() /* ty=(Tensor[(10, 3, 8), float64], Tensor[(10, 3, 8), float32]) */;
  %716 = %715.1;
  %717 = cast(meta[relay.Constant][44] /* ty=Tensor[(10, 3, 8), float32] */, dtype="int32") /* ty=Tensor[(10, 3, 8), int32] */;
  %718 = shape_of(%716, dtype="int32") /* ty=Tensor[(3), int32] */;
  %719 = cast(%716, dtype="int32") /* ty=Tensor[(10, 3, 8), int32] */;
  %720 = dyn.reshape(%717, %718, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %721 = cast(%716, dtype="float32") /* ty=Tensor[(10, 3, 8), float32] */;
  %722 = cast(%var_2691, dtype="float32") /* ty=Tensor[(90), float32] */;
  %723 = reshape(%722, newshape=[3, 6, 5]) /* ty=Tensor[(3, 6, 5), float32] */;
  %724 = @func_938(%723) /* ty=(Tensor[(588), float64], Tensor[(8, 4), uint16], Tensor[(288), uint16], Tensor[(588), float64], Tensor[(3, 6, 5), float64]) */;
  %725 = bitwise_xor(%719, %720) /* ty=Tensor[(10, 3, 8), int32] */;
  %726 = atan(%721) /* ty=Tensor[(10, 3, 8), float32] */;
  %727 = %724.3;
  (%725, %726, %727, %var_2691)
}

def @func_8551() -> Tensor[(10, 3, 8), float32] {
  %729 = fn () -> Tensor[(10, 3, 8), float32] {
    %728 = @func_3597() /* ty=(Tensor[(10, 3, 8), float32],) */;
    %728.0
  };
  %729() /* ty=Tensor[(10, 3, 8), float32] */
}

def @func_941(%var_939: Tensor[(3, 6, 5), float32]) -> (Tensor[(588), float64], Tensor[(8, 4), uint16], Tensor[(288), uint16], Tensor[(588), float64], Tensor[(3, 6, 5), float64]) {
  @func_938(%var_939) /* ty=(Tensor[(588), float64], Tensor[(8, 4), uint16], Tensor[(288), uint16], Tensor[(588), float64], Tensor[(3, 6, 5), float64]) */
}

def @func_3581() -> (Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32]) {
  %730 = @func_2524() /* ty=(Tensor[(10, 3, 8), float64], Tensor[(10, 3, 8), float32]) */;
  %731 = @func_3504() /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32]) */;
  %732 = %730.1;
  %733 = %731.1;
  (%732, %733)
}

def @func_4288() -> Tensor[(8, 12, 3), bool] {
  %735 = fn () -> Tensor[(8, 12, 3), bool] {
    %734 = @func_4256() /* ty=(Tensor[(8, 12, 3), bool],) */;
    %734.0
  };
  %735() /* ty=Tensor[(8, 12, 3), bool] */
}

def @func_4543() -> (Tensor[(10, 3, 8), float32],) {
  %736 = @func_3597() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %737 = %736.0;
  (%737,)
}

def @func_3935(%var_3924: Tensor[(7, 13, 5), float32]) -> Tensor[(7, 13, 5), float32] {
  %738 = cast(%var_3924, dtype="float32") /* ty=Tensor[(7, 13, 5), float32] */;
  asin(%738) /* ty=Tensor[(7, 13, 5), float32] */
}

def @func_5822() -> Tensor[(8, 12, 3), bool] {
  %739 = fn () -> Tensor[(8, 12, 3), bool] {
    @func_3528() /* ty=Tensor[(8, 12, 3), bool] */
  };
  %739() /* ty=Tensor[(8, 12, 3), bool] */
}

def @func_3775(%var_3774: Tensor[(10, 3, 8), float32]) -> (Tensor[(10, 3, 8), int16],) {
  %747 = fn (%var_3759: Tensor[(10, 3, 8), float32]) -> (Tensor[(10, 3, 8), int16],) {
    %740 = @func_2597() /* ty=(Tensor[(10, 3, 8), float32],) */;
    %741 = %740.0;
    %742 = cast(%var_3759, dtype="int16") /* ty=Tensor[(10, 3, 8), int16] */;
    %743 = shape_of(%741, dtype="int32") /* ty=Tensor[(3), int32] */;
    %744 = cast(%741, dtype="int16") /* ty=Tensor[(10, 3, 8), int16] */;
    %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %746 = bitwise_or(%744, %745) /* ty=Tensor[(10, 3, 8), int16] */;
    (%746,)
  };
  %747(%var_3774) /* ty=(Tensor[(10, 3, 8), int16],) */
}

def @func_5537() -> Tensor[(10, 3, 8), int8] {
  @func_3166() /* ty=Tensor[(10, 3, 8), int8] */
}

def @func_938(%var_918: Tensor[(3, 6, 5), float32]) -> (Tensor[(588), float64], Tensor[(8, 4), uint16], Tensor[(288), uint16], Tensor[(588), float64], Tensor[(3, 6, 5), float64]) {
  %748 = cast(meta[relay.Constant][45] /* ty=Tensor[(8, 4), uint16] */, dtype="uint16") /* ty=Tensor[(8, 4), uint16] */;
  %749 = cast(meta[relay.Constant][46] /* ty=Tensor[(288), uint16] */, dtype="uint16") /* ty=Tensor[(288), uint16] */;
  %750 = cast(meta[relay.Constant][47] /* ty=Tensor[(588), float64] */, dtype="float64") /* ty=Tensor[(588), float64] */;
  %751 = reshape(%748, newshape=[1, 4, 8]) /* ty=Tensor[(1, 4, 8), uint16] */;
  %752 = reshape(%749, newshape=[9, 4, 8]) /* ty=Tensor[(9, 4, 8), uint16] */;
  %753 = reshape(%750, newshape=[588]) /* ty=Tensor[(588), float64] */;
  %754 = @func_552(%751, %752, %753) /* ty=(Tensor[(588), float64], Tensor[(42), float64], Tensor[(9, 4, 8), int32], Tensor[(14, ?, 3), float32]) */;
  %755 = cast(%var_918, dtype="float32") /* ty=Tensor[(3, 6, 5), float32] */;
  %756 = rsqrt(%755) /* ty=Tensor[(3, 6, 5), float32] */;
  %757 = cast(%var_918, dtype="float64") /* ty=Tensor[(3, 6, 5), float64] */;
  %758 = shape_of(%756, dtype="int32") /* ty=Tensor[(3), int32] */;
  %759 = cast(%756, dtype="float64") /* ty=Tensor[(3, 6, 5), float64] */;
  %760 = dyn.reshape(%757, %758, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %761 = %754.0;
  %762 = floor_mod(%759, %760) /* ty=Tensor[(3, 6, 5), float64] */;
  (%761, meta[relay.Constant][45] /* ty=Tensor[(8, 4), uint16] */, meta[relay.Constant][46] /* ty=Tensor[(288), uint16] */, meta[relay.Constant][47] /* ty=Tensor[(588), float64] */, %762)
}

def @func_7974(%var_7973: Tensor[(12, 13, 5), int16]) -> (uint64, Tensor[(780), int16], Tensor[(12, 13, 5), uint8], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32]) {
  %781 = fn (%var_7939: Tensor[(12, 13, 5), int16]) -> (uint64, Tensor[(780), int16], Tensor[(12, 13, 5), uint8], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32]) {
    %763 = @func_6830() /* ty=(uint64,) */;
    %764 = cast(meta[relay.Constant][48] /* ty=Tensor[(780), int16] */, dtype="int16") /* ty=Tensor[(780), int16] */;
    %765 = cast(meta[relay.Constant][48] /* ty=Tensor[(780), int16] */, dtype="int16") /* ty=Tensor[(780), int16] */;
    %766 = reshape(%764, newshape=[12, 13, 5]) /* ty=Tensor[(12, 13, 5), int16] */;
    %767 = reshape(%765, newshape=[12, 13, 5]) /* ty=Tensor[(12, 13, 5), int16] */;
    %768 = @func_7410(%766, %767) /* ty=(Tensor[(12, 13, 5), int16],) */;
    %769 = %768.0;
    %770 = cast(%var_7939, dtype="uint8") /* ty=Tensor[(12, 13, 5), uint8] */;
    %771 = shape_of(%769, dtype="int32") /* ty=Tensor[(3), int32] */;
    %772 = cast(%769, dtype="uint8") /* ty=Tensor[(12, 13, 5), uint8] */;
    %773 = dyn.reshape(%770, %771, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %774 = @func_3504() /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32]) */;
    %775 = %774.0;
    %776 = cast(%775, dtype="float32") /* ty=Tensor[(10, 3, 8), float32] */;
    %777 = %763.0;
    %778 = right_shift(%772, %773) /* ty=Tensor[(12, 13, 5), uint8] */;
    %779 = @func_3343() /* ty=Tensor[(10, 3, 8), float32] */;
    %780 = rsqrt(%776) /* ty=Tensor[(10, 3, 8), float32] */;
    (%777, meta[relay.Constant][48] /* ty=Tensor[(780), int16] */, %778, %779, %780)
  };
  %781(%var_7973) /* ty=(uint64, Tensor[(780), int16], Tensor[(12, 13, 5), uint8], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32]) */
}

def @func_5436() -> (Tensor[(10, 3, 8), float32],) {
  %782 = @func_4100() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %783 = %782.0;
  (%783,)
}

def @func_8522() -> (Tensor[(10, 3, 8), float32], Tensor[(14, ?, 3), bool], Tensor[(312), float64], Tensor[(42), float64], Tensor[(312), float64]) {
  %784 = @func_5573() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %785 = cast(meta[relay.Constant][49] /* ty=Tensor[(312), float64] */, dtype="float64") /* ty=Tensor[(312), float64] */;
  %786 = cast(meta[relay.Constant][50] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
  %787 = reshape(%785, newshape=[312]) /* ty=Tensor[(312), float64] */;
  %788 = reshape(%786, newshape=[42]) /* ty=Tensor[(42), float64] */;
  %789 = @func_2270(%787, %788) /* ty=(Tensor[(13, 2, 12), float64], Tensor[(312), float64], Tensor[(10, 3, 8), float32], Tensor[(588), float64], Tensor[(90), float32], Tensor[(3, 6, 5), float64], Tensor[(14, ?, 3), bool], Tensor[(42), float64], Tensor[(14, ?, 3), bool], Tensor[(10, 3, 8), float32], Tensor[(15, 3, 6), float32]) */;
  %790 = cast(meta[relay.Constant][49] /* ty=Tensor[(312), float64] */, dtype="float64") /* ty=Tensor[(312), float64] */;
  %791 = reshape(%790, newshape=[312]) /* ty=Tensor[(312), float64] */;
  %792 = @func_8265(%791) /* ty=(Tensor[(8, 12, 3), bool], Tensor[(10, 3, 8), float32], Tensor[(546, 1), float64], Tensor[(312), float64]) */;
  %793 = %784.0;
  %794 = %789.8;
  %795 = %792.3;
  (%793, %794, meta[relay.Constant][49] /* ty=Tensor[(312), float64] */, meta[relay.Constant][50] /* ty=Tensor[(42), float64] */, %795)
}

def @func_3504() -> (Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32]) {
  %796 = @func_1230() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %797 = @func_1452() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %798 = %796.0;
  %799 = %797.0;
  (%798, %799)
}

def @func_3084() -> Tensor[(10, 3, 8), float32] {
  %800 = fn () -> Tensor[(10, 3, 8), float32] {
    @func_2440() /* ty=Tensor[(10, 3, 8), float32] */
  };
  %800() /* ty=Tensor[(10, 3, 8), float32] */
}

def @func_8330(%var_8309: Tensor[(15, 6), float32]) -> (Tensor[(10, 3, 8), float32], Tensor[(588), float64], Tensor[(15, 6), float32], Tensor[(10, 3, 8), float32]) {
  %801 = cast(%var_8309, dtype="float32") /* ty=Tensor[(15, 6), float32] */;
  %802 = reshape(%801, newshape=[3, 6, 5]) /* ty=Tensor[(3, 6, 5), float32] */;
  %803 = @func_938(%802) /* ty=(Tensor[(588), float64], Tensor[(8, 4), uint16], Tensor[(288), uint16], Tensor[(588), float64], Tensor[(3, 6, 5), float64]) */;
  %804 = @func_1166() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %805 = @func_2440() /* ty=Tensor[(10, 3, 8), float32] */;
  %806 = %803.0;
  %807 = %804.0;
  (%805, %806, %var_8309, %807)
}

def @func_2401(%var_2399: int64) -> Tensor[(5, 12, 5), uint8] {
  @func_2398(%var_2399) /* ty=Tensor[(5, 12, 5), uint8] */
}

def @func_123(%var_122: Tensor[(14, 1, 3), float64]) -> (Tensor[(14, ?, 3), bool],) {
  %815 = fn (%var_112: Tensor[(14, 1, 3), float64]) -> (Tensor[(14, ?, 3), bool],) {
    %808 = cast(%var_112, dtype="float64") /* ty=Tensor[(14, 1, 3), float64] */;
    %809 = sinh(%808) /* ty=Tensor[(14, 1, 3), float64] */;
    %810 = cast(%var_112, dtype="bool") /* ty=Tensor[(14, 1, 3), bool] */;
    %811 = shape_of(%809, dtype="int32") /* ty=Tensor[(3), int32] */;
    %812 = cast(%809, dtype="bool") /* ty=Tensor[(14, 1, 3), bool] */;
    %813 = dyn.reshape(%810, %811, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %814 = not_equal(%812, %813) /* ty=Tensor[(14, ?, 3), bool] */;
    (%814,)
  };
  %815(%var_122) /* ty=(Tensor[(14, ?, 3), bool],) */
}

def @func_5574() -> (Tensor[(10, 3, 8), float32],) {
  %818 = fn () -> (Tensor[(10, 3, 8), float32],) {
    %816 = @func_1175() /* ty=(Tensor[(10, 3, 8), float32],) */;
    %817 = %816.0;
    (%817,)
  };
  %818() /* ty=(Tensor[(10, 3, 8), float32],) */
}

def @func_8044() -> (Tensor[(10, 3, 8), float32],) {
  %819 = @func_4974() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %820 = %819.0;
  (%820,)
}

def @func_1167() -> (Tensor[(10, 3, 8), float32],) {
  %823 = fn () -> (Tensor[(10, 3, 8), float32],) {
    %821 = cast(meta[relay.Constant][51] /* ty=Tensor[(10, 3, 8), float32] */, dtype="float32") /* ty=Tensor[(10, 3, 8), float32] */;
    %822 = sqrt(%821) /* ty=Tensor[(10, 3, 8), float32] */;
    (%822,)
  };
  %823() /* ty=(Tensor[(10, 3, 8), float32],) */
}

def @func_4638(%var_4604: Tensor[(14, 42), float64], %var_4634: uint8, %var_4635: Tensor[(2184), uint8]) -> (Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(14, 42), float64], Tensor[(14, 13, 12), float64], uint8, Tensor[(2184), uint8]) {
  %824 = @func_4315() /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), int16]) */;
  %825 = cast(%var_4604, dtype="float64") /* ty=Tensor[(14, 42), float64] */;
  %826 = reshape(%825, newshape=[588]) /* ty=Tensor[(588), float64] */;
  %827 = @func_1298(%826) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(42), float64], Tensor[(588), float64], Tensor[(42), float64], Tensor[(14, ?, 3), bool]) */;
  %828 = cast(%var_4634, dtype="uint8") /* ty=uint8 */;
  %829 = cast(%var_4635, dtype="uint8") /* ty=Tensor[(2184), uint8] */;
  %830 = reshape(%828, newshape=[]) /* ty=uint8 */;
  %831 = reshape(%829, newshape=[14, 13, 12]) /* ty=Tensor[(14, 13, 12), uint8] */;
  %832 = @func_1515(%830, %831) /* ty=(Tensor[(14, 13, 12), float64],) */;
  %833 = %824.0;
  %834 = %827.0;
  %835 = %832.0;
  (%833, %834, %var_4604, %835, %var_4634, %var_4635)
}

def @func_1176() -> (Tensor[(10, 3, 8), float32],) {
  %838 = fn () -> (Tensor[(10, 3, 8), float32],) {
    %836 = @func_1166() /* ty=(Tensor[(10, 3, 8), float32],) */;
    %837 = %836.0;
    (%837,)
  };
  %838() /* ty=(Tensor[(10, 3, 8), float32],) */
}

def @func_7225() -> Tensor[(10, 3, 8), float32] {
  @func_7223() /* ty=Tensor[(10, 3, 8), float32] */
}

def @func_8524() -> (Tensor[(10, 3, 8), float32], Tensor[(14, ?, 3), bool], Tensor[(312), float64], Tensor[(42), float64], Tensor[(312), float64]) {
  @func_8522() /* ty=(Tensor[(10, 3, 8), float32], Tensor[(14, ?, 3), bool], Tensor[(312), float64], Tensor[(42), float64], Tensor[(312), float64]) */
}

def @func_1636() -> Tensor[(10, 3, 8), float32] {
  %839 = @func_1452() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %839.0
}

def @func_4389(%var_4388: Tensor[(40), uint64]) -> (Tensor[(8, 12, 3), float32], Tensor[(10, 4, 1), bool], uint64, Tensor[(40), uint64], uint64, Tensor[(256), float32], Tensor[(10, 3, 8), float32], Tensor[(2700), uint32], Tensor[(260), float32]) {
  %859 = fn (%var_4351: Tensor[(40), uint64]) -> (Tensor[(8, 12, 3), float32], Tensor[(10, 4, 1), bool], uint64, Tensor[(40), uint64], uint64, Tensor[(256), float32], Tensor[(10, 3, 8), float32], Tensor[(2700), uint32], Tensor[(260), float32]) {
    %840 = @func_3528() /* ty=Tensor[(8, 12, 3), bool] */;
    %841 = cast(%840, dtype="float32") /* ty=Tensor[(8, 12, 3), float32] */;
    %842 = cast(meta[relay.Constant][52] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %843 = cast(%var_4351, dtype="uint64") /* ty=Tensor[(40), uint64] */;
    %844 = reshape(%842, newshape=[]) /* ty=uint64 */;
    %845 = reshape(%843, newshape=[10, 4, 1]) /* ty=Tensor[(10, 4, 1), uint64] */;
    %846 = @func_2325(%844, %845) /* ty=(Tensor[(10, 4, 1), bool],) */;
    %847 = cast(meta[relay.Constant][53] /* ty=Tensor[(256), float32] */, dtype="float32") /* ty=Tensor[(256), float32] */;
    %848 = reshape(%847, newshape=[8, 8, 4]) /* ty=Tensor[(8, 8, 4), float32] */;
    %849 = @func_2826(%848) /* ty=(Tensor[(8, 8, 4), float32], Tensor[(10, 4, 1), bool], uint64, Tensor[(40), uint64]) */;
    %850 = cast(meta[relay.Constant][54] /* ty=Tensor[(2700), uint32] */, dtype="uint32") /* ty=Tensor[(2700), uint32] */;
    %851 = cast(meta[relay.Constant][55] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
    %852 = reshape(%850, newshape=[2700]) /* ty=Tensor[(2700), uint32] */;
    %853 = reshape(%851, newshape=[260]) /* ty=Tensor[(260), float32] */;
    %854 = @func_3637(%852, %853) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(588), float64], Tensor[(1, 42), float64], Tensor[(260), float32], Tensor[(819), bool], Tensor[(260), float32], Tensor[(2700), uint8], Tensor[(10, 3, 8), float64]) */;
    %855 = log10(%841) /* ty=Tensor[(8, 12, 3), float32] */;
    %856 = %846.0;
    %857 = %849.2;
    %858 = %854.0;
    (%855, %856, meta[relay.Constant][52] /* ty=uint64 */, %var_4351, %857, meta[relay.Constant][53] /* ty=Tensor[(256), float32] */, %858, meta[relay.Constant][54] /* ty=Tensor[(2700), uint32] */, meta[relay.Constant][55] /* ty=Tensor[(260), float32] */)
  };
  %859(%var_4388) /* ty=(Tensor[(8, 12, 3), float32], Tensor[(10, 4, 1), bool], uint64, Tensor[(40), uint64], uint64, Tensor[(256), float32], Tensor[(10, 3, 8), float32], Tensor[(2700), uint32], Tensor[(260), float32]) */
}

def @func_2697(%var_2695: Tensor[(90), float32]) -> (Tensor[(10, 3, 8), int32], Tensor[(10, 3, 8), float32], Tensor[(588), float64], Tensor[(90), float32]) {
  @func_2694(%var_2695) /* ty=(Tensor[(10, 3, 8), int32], Tensor[(10, 3, 8), float32], Tensor[(588), float64], Tensor[(90), float32]) */
}

def @func_4976() -> (Tensor[(10, 3, 8), float32],) {
  @func_4974() /* ty=(Tensor[(10, 3, 8), float32],) */
}

def @func_1694(%var_1693: Tensor[(312), float64]) -> (Tensor[(10, 3, 8), float32], Tensor[(13, 2, 12), float64], Tensor[(312), float64]) {
  %865 = fn (%var_1688: Tensor[(312), float64]) -> (Tensor[(10, 3, 8), float32], Tensor[(13, 2, 12), float64], Tensor[(312), float64]) {
    %860 = @func_1230() /* ty=(Tensor[(10, 3, 8), float32],) */;
    %861 = cast(%var_1688, dtype="float64") /* ty=Tensor[(312), float64] */;
    %862 = reshape(%861, newshape=[13, 2, 12]) /* ty=Tensor[(13, 2, 12), float64] */;
    %863 = %860.0;
    %864 = @func_438(%862) /* ty=Tensor[(13, 2, 12), float64] */;
    (%863, %864, %var_1688)
  };
  %865(%var_1693) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(13, 2, 12), float64], Tensor[(312), float64]) */
}

def @func_3051(%var_3013: Tensor[(7, 13, 9), bool], %var_3022: Tensor[(2700), uint32], %var_3039: Tensor[(2700), uint32], %var_3048: Tensor[(260), float32]) -> (Tensor[(7, 13, 9), bool], Tensor[(10, 3, 8), float32], Tensor[(42), float64], Tensor[(2700), bool], Tensor[(5, 4, 13), float32], Tensor[(260), float32]) {
  %866 = cast(meta[relay.Constant][56] /* ty=Tensor[(7, 13, 9), bool] */, dtype="bool") /* ty=Tensor[(7, 13, 9), bool] */;
  %867 = shape_of(%var_3013, dtype="int32") /* ty=Tensor[(3), int32] */;
  %868 = cast(%var_3013, dtype="bool") /* ty=Tensor[(7, 13, 9), bool] */;
  %869 = dyn.reshape(%866, %867, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %870 = cast(%var_3022, dtype="uint32") /* ty=Tensor[(2700), uint32] */;
  %871 = cast(meta[relay.Constant][57] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
  %872 = reshape(%870, newshape=[15, 15, 12]) /* ty=Tensor[(15, 15, 12), uint32] */;
  %873 = reshape(%871, newshape=[42]) /* ty=Tensor[(42), float64] */;
  %874 = @func_1783(%872, %873) /* ty=(Tensor[(15, 15, 12), uint32], Tensor[(14, ?, 3), bool], Tensor[(42), float64], Tensor[(13, 2, 12), float64], Tensor[(312), float64], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(14, 6, 7), int8], Tensor[(588), float64]) */;
  %875 = cast(%var_3039, dtype="bool") /* ty=Tensor[(2700), bool] */;
  %876 = shape_of(%var_3022, dtype="int32") /* ty=Tensor[(1), int32] */;
  %877 = cast(%var_3022, dtype="bool") /* ty=Tensor[(2700), bool] */;
  %878 = dyn.reshape(%875, %876, newshape=[]) /* ty=Tensor[(?), bool] */;
  %879 = cast(%var_3048, dtype="float32") /* ty=Tensor[(260), float32] */;
  %880 = reshape(%879, newshape=[5, 4, 13]) /* ty=Tensor[(5, 4, 13), float32] */;
  %881 = @func_1438(%880) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(5, 4, 13), float32]) */;
  %882 = logical_and(%868, %869) /* ty=Tensor[(7, 13, 9), bool] */;
  %883 = %874.7;
  %884 = equal(%877, %878) /* ty=Tensor[(2700), bool] */;
  %885 = %881.1;
  (%882, %883, meta[relay.Constant][57] /* ty=Tensor[(42), float64] */, %884, %885, %var_3048)
}

def @func_4974() -> (Tensor[(10, 3, 8), float32],) {
  %886 = @func_1636() /* ty=Tensor[(10, 3, 8), float32] */;
  (%886,)
}

def @func_7837(%var_7836: float64) -> Tensor[(5, 7, 16), float64] {
  %889 = fn (%var_7830: float64) -> Tensor[(5, 7, 16), float64] {
    %887 = cast(%var_7830, dtype="float64") /* ty=float64 */;
    %888 = cast(meta[relay.Constant][58] /* ty=Tensor[(5, 7, 16), float64] */, dtype="float64") /* ty=Tensor[(5, 7, 16), float64] */;
    minimum(%887, %888) /* ty=Tensor[(5, 7, 16), float64] */
  };
  %889(%var_7836) /* ty=Tensor[(5, 7, 16), float64] */
}

def @func_2850() -> Tensor[(10, 3, 8), int8] {
  %890 = @func_2524() /* ty=(Tensor[(10, 3, 8), float64], Tensor[(10, 3, 8), float32]) */;
  %891 = %890.1;
  %892 = cast(meta[relay.Constant][59] /* ty=Tensor[(10, 3, 8), float32] */, dtype="int8") /* ty=Tensor[(10, 3, 8), int8] */;
  %893 = shape_of(%891, dtype="int32") /* ty=Tensor[(3), int32] */;
  %894 = cast(%891, dtype="int8") /* ty=Tensor[(10, 3, 8), int8] */;
  %895 = dyn.reshape(%892, %893, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  subtract(%894, %895) /* ty=Tensor[(10, 3, 8), int8] */
}

def @func_7371(%var_7369: Tensor[(13, 10, 5), int64], %var_7370: Tensor[(13, 10, 5), int64]) -> (Tensor[(13, 10, 5), int64],) {
  @func_7367(%var_7369, %var_7370) /* ty=(Tensor[(13, 10, 5), int64],) */
}

def @func_7824(%var_7782: Tensor[(8, 15, 11), uint64], %var_7790: float64) -> (Tensor[(8, 15, 11), bool], Tensor[(42), float64], float64, Tensor[(546), float64], Tensor[(8, 15, 11), float64]) {
  %896 = cast(meta[relay.Constant][60] /* ty=Tensor[(8, 15, 11), uint64] */, dtype="bool") /* ty=Tensor[(8, 15, 11), bool] */;
  %897 = shape_of(%var_7782, dtype="int32") /* ty=Tensor[(3), int32] */;
  %898 = cast(%var_7782, dtype="bool") /* ty=Tensor[(8, 15, 11), bool] */;
  %899 = dyn.reshape(%896, %897, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %900 = cast(%var_7790, dtype="float64") /* ty=float64 */;
  %901 = cast(meta[relay.Constant][61] /* ty=Tensor[(546), float64] */, dtype="float64") /* ty=Tensor[(546), float64] */;
  %902 = reshape(%900, newshape=[]) /* ty=float64 */;
  %903 = reshape(%901, newshape=[14, 13, 3]) /* ty=Tensor[(14, 13, 3), float64] */;
  %904 = @func_1820(%902, %903) /* ty=(Tensor[(14, 13, 3), float64], Tensor[(10, 3, 8), float32], Tensor[(14, ?, 3), bool], Tensor[(42), float64]) */;
  %905 = cast(meta[relay.Constant][60] /* ty=Tensor[(8, 15, 11), uint64] */, dtype="float64") /* ty=Tensor[(8, 15, 11), float64] */;
  %906 = greater(%898, %899) /* ty=Tensor[(8, 15, 11), bool] */;
  %907 = %904.3;
  %908 = log2(%905) /* ty=Tensor[(8, 15, 11), float64] */;
  (%906, %907, %var_7790, meta[relay.Constant][61] /* ty=Tensor[(546), float64] */, %908)
}

def @func_1453() -> (Tensor[(10, 3, 8), float32],) {
  %911 = fn () -> (Tensor[(10, 3, 8), float32],) {
    %909 = @func_1166() /* ty=(Tensor[(10, 3, 8), float32],) */;
    %910 = %909.0;
    (%910,)
  };
  %911() /* ty=(Tensor[(10, 3, 8), float32],) */
}

def @func_6465(%var_6460: uint32, %var_6461: Tensor[(12, 7, 10), uint32]) -> (Tensor[(12, 7, 10), uint32],) {
  %912 = cast(%var_6460, dtype="uint32") /* ty=uint32 */;
  %913 = cast(%var_6461, dtype="uint32") /* ty=Tensor[(12, 7, 10), uint32] */;
  %914 = subtract(%912, %913) /* ty=Tensor[(12, 7, 10), uint32] */;
  (%914,)
}

def @func_552(%var_496: Tensor[(1, 4, 8), uint16], %var_497: Tensor[(9, 4, 8), uint16], %var_513: Tensor[(588), float64]) -> (Tensor[(588), float64], Tensor[(42), float64], Tensor[(9, 4, 8), int32], Tensor[(14, ?, 3), float32]) {
  %915 = cast(%var_496, dtype="float64") /* ty=Tensor[(1, 4, 8), float64] */;
  %916 = tan(%915) /* ty=Tensor[(1, 4, 8), float64] */;
  %917 = cast(%var_496, dtype="bool") /* ty=Tensor[(1, 4, 8), bool] */;
  %918 = cast(%var_497, dtype="bool") /* ty=Tensor[(9, 4, 8), bool] */;
  %919 = less_equal(%917, %918) /* ty=Tensor[(9, 4, 8), bool] */;
  %920 = cast(%916, dtype="int32") /* ty=Tensor[(1, 4, 8), int32] */;
  %921 = cast(%919, dtype="int32") /* ty=Tensor[(9, 4, 8), int32] */;
  %922 = cast(%var_513, dtype="float64") /* ty=Tensor[(588), float64] */;
  %923 = cast(meta[relay.Constant][62] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
  %924 = cast(%var_513, dtype="float64") /* ty=Tensor[(588), float64] */;
  %925 = reshape(%922, newshape=[14, 6, 7]) /* ty=Tensor[(14, 6, 7), float64] */;
  %926 = reshape(%923, newshape=[42]) /* ty=Tensor[(42), float64] */;
  %927 = reshape(%924, newshape=[14, 6, 7]) /* ty=Tensor[(14, 6, 7), float64] */;
  %928 = @func_310(%925, %926, %927) /* ty=(Tensor[(14, 6, 7), float64], Tensor[(14, ?, 3), bool], Tensor[(42), float64], Tensor[(14, 6, 7), int8], Tensor[(14, ?, 3), bool]) */;
  %929 = %928.4;
  %930 = cast(%929, dtype="float32") /* ty=Tensor[(14, ?, 3), float32] */;
  %931 = subtract(%920, %921) /* ty=Tensor[(9, 4, 8), int32] */;
  %932 = cosh(%930) /* ty=Tensor[(14, ?, 3), float32] */;
  (%var_513, meta[relay.Constant][62] /* ty=Tensor[(42), float64] */, %931, %932)
}

def @func_1301(%var_1299: Tensor[(588), float64]) -> (Tensor[(10, 3, 8), float32], Tensor[(42), float64], Tensor[(588), float64], Tensor[(42), float64], Tensor[(14, ?, 3), bool]) {
  @func_1298(%var_1299) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(42), float64], Tensor[(588), float64], Tensor[(42), float64], Tensor[(14, ?, 3), bool]) */
}

def @func_3470(%var_3365: Tensor[(165), int16], %var_3415: Tensor[(546), float64]) -> (Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(3, 5, 11), bool], Tensor[(165), int16], Tensor[(42), float64], Tensor[(588), float64], Tensor[(42), float64], Tensor[(10, 3, 8), float32], Tensor[(546), float64], Tensor[(5, 4, 13), float32], Tensor[(260), float32], Tensor[(10, 3, 8), float32], Tensor[(11, 10, 9), float64]) {
  %933 = @func_2491() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %934 = cast(%var_3365, dtype="int16") /* ty=Tensor[(165), int16] */;
  %935 = reshape(%934, newshape=[3, 5, 11]) /* ty=Tensor[(3, 5, 11), int16] */;
  %936 = cast(meta[relay.Constant][63] /* ty=Tensor[(588), float64] */, dtype="float64") /* ty=Tensor[(588), float64] */;
  %937 = cast(meta[relay.Constant][64] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
  %938 = cast(meta[relay.Constant][63] /* ty=Tensor[(588), float64] */, dtype="float64") /* ty=Tensor[(588), float64] */;
  %939 = reshape(%936, newshape=[14, 6, 7]) /* ty=Tensor[(14, 6, 7), float64] */;
  %940 = reshape(%937, newshape=[42]) /* ty=Tensor[(42), float64] */;
  %941 = reshape(%938, newshape=[14, 6, 7]) /* ty=Tensor[(14, 6, 7), float64] */;
  %942 = @func_310(%939, %940, %941) /* ty=(Tensor[(14, 6, 7), float64], Tensor[(14, ?, 3), bool], Tensor[(42), float64], Tensor[(14, 6, 7), int8], Tensor[(14, ?, 3), bool]) */;
  %943 = cast(%var_3415, dtype="float64") /* ty=Tensor[(546), float64] */;
  %944 = reshape(%943, newshape=[546, 1]) /* ty=Tensor[(546, 1), float64] */;
  %945 = @func_2364(%944) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], float64, Tensor[(546, 1), float64]) */;
  %946 = cast(meta[relay.Constant][65] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
  %947 = reshape(%946, newshape=[5, 4, 13]) /* ty=Tensor[(5, 4, 13), float32] */;
  %948 = @func_1438(%947) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(5, 4, 13), float32]) */;
  %949 = @func_2524() /* ty=(Tensor[(10, 3, 8), float64], Tensor[(10, 3, 8), float32]) */;
  %950 = cast(meta[relay.Constant][66] /* ty=Tensor[(11, 10, 9), float32] */, dtype="float32") /* ty=Tensor[(11, 10, 9), float32] */;
  %951 = atan(%950) /* ty=Tensor[(11, 10, 9), float32] */;
  %952 = cast(%951, dtype="float64") /* ty=Tensor[(11, 10, 9), float64] */;
  %953 = rsqrt(%952) /* ty=Tensor[(11, 10, 9), float64] */;
  %954 = cast(%953, dtype="float64") /* ty=Tensor[(11, 10, 9), float64] */;
  %955 = @func_3083() /* ty=Tensor[(10, 3, 8), float32] */;
  %956 = %933.0;
  %957 = @func_3297(%935) /* ty=Tensor[(3, 5, 11), bool] */;
  %958 = %942.2;
  %959 = %945.0;
  %960 = %948.1;
  %961 = %949.1;
  %962 = log10(%954) /* ty=Tensor[(11, 10, 9), float64] */;
  (%955, %956, %957, %var_3365, %958, meta[relay.Constant][63] /* ty=Tensor[(588), float64] */, meta[relay.Constant][64] /* ty=Tensor[(42), float64] */, %959, %var_3415, %960, meta[relay.Constant][65] /* ty=Tensor[(260), float32] */, %961, %962)
}

def @main(%var_8628: Tensor[(11, 4, 8), float32]) -> (Tensor[(11, 4, 8), float32],) {
  %963 = cast(%var_8628, dtype="float32") /* ty=Tensor[(11, 4, 8), float32] */;
  %964 = sqrt(%963) /* ty=Tensor[(11, 4, 8), float32] */;
  (%964,)
}

def @func_8265(%var_8254: Tensor[(312), float64]) -> (Tensor[(8, 12, 3), bool], Tensor[(10, 3, 8), float32], Tensor[(546, 1), float64], Tensor[(312), float64]) {
  %965 = @func_3597() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %966 = cast(%var_8254, dtype="float64") /* ty=Tensor[(312), float64] */;
  %967 = reshape(%966, newshape=[312]) /* ty=Tensor[(312), float64] */;
  %968 = @func_5050(%967) /* ty=(Tensor[(8, 12, 3), bool], Tensor[(10, 3, 8), float64], Tensor[(312), float64], Tensor[(312), float64], Tensor[(546, 1), float64], Tensor[(546, 1), float64]) */;
  %969 = @func_5821() /* ty=Tensor[(8, 12, 3), bool] */;
  %970 = %965.0;
  %971 = %968.4;
  (%969, %970, %971, %var_8254)
}

def @func_7463() -> (Tensor[(10, 3, 8), bool],) {
  %979 = fn () -> (Tensor[(10, 3, 8), bool],) {
    %972 = @func_1636() /* ty=Tensor[(10, 3, 8), float32] */;
    %973 = @func_3343() /* ty=Tensor[(10, 3, 8), float32] */;
    %974 = cast(%973, dtype="bool") /* ty=Tensor[(10, 3, 8), bool] */;
    %975 = shape_of(%972, dtype="int32") /* ty=Tensor[(3), int32] */;
    %976 = cast(%972, dtype="bool") /* ty=Tensor[(10, 3, 8), bool] */;
    %977 = dyn.reshape(%974, %975, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %978 = greater(%976, %977) /* ty=Tensor[(10, 3, 8), bool] */;
    (%978,)
  };
  %979() /* ty=(Tensor[(10, 3, 8), bool],) */
}

def @func_6550() -> Tensor[(10, 3, 8), float32] {
  %981 = fn () -> Tensor[(10, 3, 8), float32] {
    %980 = @func_1452() /* ty=(Tensor[(10, 3, 8), float32],) */;
    %980.0
  };
  %981() /* ty=Tensor[(10, 3, 8), float32] */
}

def @func_5796(%var_5794: Tensor[(16, 5, 12), float64], %var_5795: float64) -> (Tensor[(16, 5, 12), float64], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], float64, Tensor[(14, 13, 3), float64], Tensor[(546), float64]) {
  %995 = fn (%var_5758: Tensor[(16, 5, 12), float64], %var_5779: float64) -> (Tensor[(16, 5, 12), float64], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], float64, Tensor[(14, 13, 3), float64], Tensor[(546), float64]) {
    %982 = cast(%var_5758, dtype="float64") /* ty=Tensor[(16, 5, 12), float64] */;
    %983 = cast(%var_5779, dtype="float64") /* ty=float64 */;
    %984 = reshape(%983, newshape=[]) /* ty=float64 */;
    %985 = @func_3723(%984) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], float64, Tensor[(546), float64], Tensor[(10, 3, 8), float64], Tensor[(5, 12, 5), uint8]) */;
    %986 = cast(%var_5779, dtype="float64") /* ty=float64 */;
    %987 = cast(meta[relay.Constant][67] /* ty=Tensor[(546), float64] */, dtype="float64") /* ty=Tensor[(546), float64] */;
    %988 = reshape(%986, newshape=[]) /* ty=float64 */;
    %989 = reshape(%987, newshape=[14, 13, 3]) /* ty=Tensor[(14, 13, 3), float64] */;
    %990 = @func_1820(%988, %989) /* ty=(Tensor[(14, 13, 3), float64], Tensor[(10, 3, 8), float32], Tensor[(14, ?, 3), bool], Tensor[(42), float64]) */;
    %991 = tan(%982) /* ty=Tensor[(16, 5, 12), float64] */;
    %992 = @func_2440() /* ty=Tensor[(10, 3, 8), float32] */;
    %993 = %985.1;
    %994 = %990.0;
    (%991, %992, %993, %var_5779, %994, meta[relay.Constant][67] /* ty=Tensor[(546), float64] */)
  };
  %995(%var_5794, %var_5795) /* ty=(Tensor[(16, 5, 12), float64], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], float64, Tensor[(14, 13, 3), float64], Tensor[(546), float64]) */
}

def @func_6665(%var_6663: Tensor[(3, 900), uint32], %var_6664: Tensor[(65, 4), float32]) -> (Tensor[(10, 3, 8), int8], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(3, 900), uint32], Tensor[(42), float64], Tensor[(8, 12, 3), float32], Tensor[(10, 3, 8), float32], Tensor[(819), bool], Tensor[(65, 4), float32], Tensor[(10, 3, 8), int8]) {
  %1023 = fn (%var_6627: Tensor[(3, 900), uint32], %var_6647: Tensor[(65, 4), float32]) -> (Tensor[(10, 3, 8), int8], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(3, 900), uint32], Tensor[(42), float64], Tensor[(8, 12, 3), float32], Tensor[(10, 3, 8), float32], Tensor[(819), bool], Tensor[(65, 4), float32], Tensor[(10, 3, 8), int8]) {
    %996 = @func_5627() /* ty=(Tensor[(10, 3, 8), int16], Tensor[(10, 3, 8), int8]) */;
    %997 = @func_1166() /* ty=(Tensor[(10, 3, 8), float32],) */;
    %998 = @func_6066() /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32]) */;
    %999 = cast(%var_6627, dtype="uint32") /* ty=Tensor[(3, 900), uint32] */;
    %1000 = cast(meta[relay.Constant][68] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
    %1001 = reshape(%999, newshape=[15, 15, 12]) /* ty=Tensor[(15, 15, 12), uint32] */;
    %1002 = reshape(%1000, newshape=[42]) /* ty=Tensor[(42), float64] */;
    %1003 = @func_1783(%1001, %1002) /* ty=(Tensor[(15, 15, 12), uint32], Tensor[(14, ?, 3), bool], Tensor[(42), float64], Tensor[(13, 2, 12), float64], Tensor[(312), float64], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(14, 6, 7), int8], Tensor[(588), float64]) */;
    %1004 = @func_6163() /* ty=Tensor[(8, 12, 3), bool] */;
    %1005 = cast(%1004, dtype="float32") /* ty=Tensor[(8, 12, 3), float32] */;
    %1006 = cast(meta[relay.Constant][69] /* ty=Tensor[(819), bool] */, dtype="bool") /* ty=Tensor[(819), bool] */;
    %1007 = cast(%var_6627, dtype="uint32") /* ty=Tensor[(3, 900), uint32] */;
    %1008 = cast(%var_6627, dtype="uint32") /* ty=Tensor[(3, 900), uint32] */;
    %1009 = cast(%var_6647, dtype="float32") /* ty=Tensor[(65, 4), float32] */;
    %1010 = reshape(%1006, newshape=[7, 13, 9]) /* ty=Tensor[(7, 13, 9), bool] */;
    %1011 = reshape(%1007, newshape=[2700]) /* ty=Tensor[(2700), uint32] */;
    %1012 = reshape(%1008, newshape=[2700]) /* ty=Tensor[(2700), uint32] */;
    %1013 = reshape(%1009, newshape=[260]) /* ty=Tensor[(260), float32] */;
    %1014 = @func_3051(%1010, %1011, %1012, %1013) /* ty=(Tensor[(7, 13, 9), bool], Tensor[(10, 3, 8), float32], Tensor[(42), float64], Tensor[(2700), bool], Tensor[(5, 4, 13), float32], Tensor[(260), float32]) */;
    %1015 = @func_3876() /* ty=(Tensor[(10, 3, 8), int8],) */;
    %1016 = %996.1;
    %1017 = %997.0;
    %1018 = %998.0;
    %1019 = %1003.6;
    %1020 = log2(%1005) /* ty=Tensor[(8, 12, 3), float32] */;
    %1021 = %1014.1;
    %1022 = %1015.0;
    (%1016, %1017, %1018, %1019, %var_6627, meta[relay.Constant][68] /* ty=Tensor[(42), float64] */, %1020, %1021, meta[relay.Constant][69] /* ty=Tensor[(819), bool] */, %var_6647, %1022)
  };
  %1023(%var_6663, %var_6664) /* ty=(Tensor[(10, 3, 8), int8], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(3, 900), uint32], Tensor[(42), float64], Tensor[(8, 12, 3), float32], Tensor[(10, 3, 8), float32], Tensor[(819), bool], Tensor[(65, 4), float32], Tensor[(10, 3, 8), int8]) */
}

def @func_2440() -> Tensor[(10, 3, 8), float32] {
  %1024 = @func_1175() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %1024.0
}

def @func_1440(%var_1439: Tensor[(5, 4, 13), float32]) -> (Tensor[(10, 3, 8), float32], Tensor[(5, 4, 13), float32]) {
  %1031 = fn (%var_1422: Tensor[(5, 4, 13), float32]) -> (Tensor[(10, 3, 8), float32], Tensor[(5, 4, 13), float32]) {
    %1025 = @func_1166() /* ty=(Tensor[(10, 3, 8), float32],) */;
    %1026 = cast(%var_1422, dtype="float32") /* ty=Tensor[(5, 4, 13), float32] */;
    %1027 = sqrt(%1026) /* ty=Tensor[(5, 4, 13), float32] */;
    %1028 = cast(%1027, dtype="float32") /* ty=Tensor[(5, 4, 13), float32] */;
    %1029 = %1025.0;
    %1030 = cosh(%1028) /* ty=Tensor[(5, 4, 13), float32] */;
    (%1029, %1030)
  };
  %1031(%var_1439) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(5, 4, 13), float32]) */
}

def @func_2366(%var_2365: Tensor[(546, 1), float64]) -> (Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], float64, Tensor[(546, 1), float64]) {
  %1040 = fn (%var_2362: Tensor[(546, 1), float64]) -> (Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], float64, Tensor[(546, 1), float64]) {
    %1032 = @func_1166() /* ty=(Tensor[(10, 3, 8), float32],) */;
    %1033 = cast(-0.271183f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %1034 = cast(%var_2362, dtype="float64") /* ty=Tensor[(546, 1), float64] */;
    %1035 = reshape(%1033, newshape=[]) /* ty=float64 */;
    %1036 = reshape(%1034, newshape=[14, 13, 3]) /* ty=Tensor[(14, 13, 3), float64] */;
    %1037 = @func_1820(%1035, %1036) /* ty=(Tensor[(14, 13, 3), float64], Tensor[(10, 3, 8), float32], Tensor[(14, ?, 3), bool], Tensor[(42), float64]) */;
    %1038 = %1032.0;
    %1039 = %1037.1;
    (%1038, %1039, -0.271183f64 /* ty=float64 */, %var_2362)
  };
  %1040(%var_2365) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], float64, Tensor[(546, 1), float64]) */
}

def @func_2852() -> Tensor[(10, 3, 8), int8] {
  @func_2850() /* ty=Tensor[(10, 3, 8), int8] */
}

def @func_8046() -> (Tensor[(10, 3, 8), float32],) {
  @func_8044() /* ty=(Tensor[(10, 3, 8), float32],) */
}

def @func_7577() -> (Tensor[(10, 3, 8), int8],) {
  %1042 = fn () -> (Tensor[(10, 3, 8), int8],) {
    %1041 = @func_5845() /* ty=Tensor[(10, 3, 8), int8] */;
    (%1041,)
  };
  %1042() /* ty=(Tensor[(10, 3, 8), int8],) */
}

def @func_4085(%var_4083: Tensor[(8, 11, 12), float64], %var_4084: Tensor[(8, 11, 12), float64]) -> (Tensor[(8, 11, 12), float64], Tensor[(10, 3, 8), float32]) {
  @func_4081(%var_4083, %var_4084) /* ty=(Tensor[(8, 11, 12), float64], Tensor[(10, 3, 8), float32]) */
}

def @func_3877() -> (Tensor[(10, 3, 8), int8],) {
  %1044 = fn () -> (Tensor[(10, 3, 8), int8],) {
    %1043 = @func_2850() /* ty=Tensor[(10, 3, 8), int8] */;
    (%1043,)
  };
  %1044() /* ty=(Tensor[(10, 3, 8), int8],) */
}

def @func_6068() -> (Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32]) {
  @func_6066() /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32]) */
}

def @func_4545() -> (Tensor[(10, 3, 8), float32],) {
  @func_4543() /* ty=(Tensor[(10, 3, 8), float32],) */
}

def @func_4832(%var_4795: Tensor[(32), uint16], %var_4796: Tensor[(288), uint16], %var_4797: Tensor[(588), float64], %var_4828: Tensor[(312), float64]) -> (Tensor[(10, 3, 8), int8], Tensor[(14, ?, 3), float32], Tensor[(32), uint16], Tensor[(288), uint16], Tensor[(588), float32], Tensor[(15, 3, 6), float32], Tensor[(312), float64]) {
  %1045 = cast(%var_4795, dtype="uint16") /* ty=Tensor[(32), uint16] */;
  %1046 = cast(%var_4796, dtype="uint16") /* ty=Tensor[(288), uint16] */;
  %1047 = cast(%var_4797, dtype="float64") /* ty=Tensor[(588), float64] */;
  %1048 = reshape(%1045, newshape=[32]) /* ty=Tensor[(32), uint16] */;
  %1049 = reshape(%1046, newshape=[288]) /* ty=Tensor[(288), uint16] */;
  %1050 = reshape(%1047, newshape=[588]) /* ty=Tensor[(588), float64] */;
  %1051 = @func_1598(%1048, %1049, %1050) /* ty=(Tensor[(10, 3, 8), int8], Tensor[(14, ?, 3), float32], Tensor[(32), uint16], Tensor[(288), uint16], Tensor[(588), float64], Tensor[(10, 3, 8), float32], Tensor[(588), float64], Tensor[(14, ?, 3), bool]) */;
  %1052 = cast(%var_4797, dtype="float32") /* ty=Tensor[(588), float32] */;
  %1053 = cast(%var_4828, dtype="float64") /* ty=Tensor[(312), float64] */;
  %1054 = %1051.1;
  %1055 = cast(%1054, dtype="float64") /* ty=Tensor[(14, ?, 3), float64] */;
  %1056 = reshape(%1053, newshape=[312]) /* ty=Tensor[(312), float64] */;
  %1057 = reshape(%1055, newshape=[42]) /* ty=Tensor[(42), float64] */;
  %1058 = @func_2270(%1056, %1057) /* ty=(Tensor[(13, 2, 12), float64], Tensor[(312), float64], Tensor[(10, 3, 8), float32], Tensor[(588), float64], Tensor[(90), float32], Tensor[(3, 6, 5), float64], Tensor[(14, ?, 3), bool], Tensor[(42), float64], Tensor[(14, ?, 3), bool], Tensor[(10, 3, 8), float32], Tensor[(15, 3, 6), float32]) */;
  %1059 = @func_3166() /* ty=Tensor[(10, 3, 8), int8] */;
  %1060 = cos(%1052) /* ty=Tensor[(588), float32] */;
  %1061 = %1058.10;
  (%1059, %1054, %var_4795, %var_4796, %1060, %1061, %var_4828)
}

def @func_6416(%var_6415: Tensor[(2700), uint32]) -> (Tensor[(8, 12, 3), bool], Tensor[(42), float64], Tensor[(588), int32], Tensor[(2700), uint32], Tensor[(10, 3, 8), float32], Tensor[(8, 12, 3), bool], Tensor[(10, 3, 8), int8], Tensor[(10, 3, 8), int8], Tensor[(8, 12, 3), bool]) {
  %1076 = fn (%var_6366: Tensor[(2700), uint32]) -> (Tensor[(8, 12, 3), bool], Tensor[(42), float64], Tensor[(588), int32], Tensor[(2700), uint32], Tensor[(10, 3, 8), float32], Tensor[(8, 12, 3), bool], Tensor[(10, 3, 8), int8], Tensor[(10, 3, 8), int8], Tensor[(8, 12, 3), bool]) {
    %1062 = cast(meta[relay.Constant][70] /* ty=Tensor[(588), int32] */, dtype="int32") /* ty=Tensor[(588), int32] */;
    %1063 = cast(%var_6366, dtype="uint32") /* ty=Tensor[(2700), uint32] */;
    %1064 = reshape(%1062, newshape=[7, 14, 6]) /* ty=Tensor[(7, 14, 6), int32] */;
    %1065 = reshape(%1063, newshape=[2700]) /* ty=Tensor[(2700), uint32] */;
    %1066 = @func_2911(%1064, %1065) /* ty=(Tensor[(7, 14, 6), float32], Tensor[(312), float64], Tensor[(2700), uint32], Tensor[(42), float64]) */;
    %1067 = @func_2491() /* ty=(Tensor[(10, 3, 8), float32],) */;
    %1068 = @func_4256() /* ty=(Tensor[(8, 12, 3), bool],) */;
    %1069 = @func_3146() /* ty=Tensor[(8, 12, 3), bool] */;
    %1070 = %1066.3;
    %1071 = %1067.0;
    %1072 = @func_5821() /* ty=Tensor[(8, 12, 3), bool] */;
    %1073 = @func_5537() /* ty=Tensor[(10, 3, 8), int8] */;
    %1074 = @func_3166() /* ty=Tensor[(10, 3, 8), int8] */;
    %1075 = %1068.0;
    (%1069, %1070, meta[relay.Constant][70] /* ty=Tensor[(588), int32] */, %var_6366, %1071, %1072, %1073, %1074, %1075)
  };
  %1076(%var_6415) /* ty=(Tensor[(8, 12, 3), bool], Tensor[(42), float64], Tensor[(588), int32], Tensor[(2700), uint32], Tensor[(10, 3, 8), float32], Tensor[(8, 12, 3), bool], Tensor[(10, 3, 8), int8], Tensor[(10, 3, 8), int8], Tensor[(8, 12, 3), bool]) */
}

def @func_4838(%var_4834: Tensor[(32), uint16], %var_4835: Tensor[(288), uint16], %var_4836: Tensor[(588), float64], %var_4837: Tensor[(312), float64]) -> (Tensor[(10, 3, 8), int8], Tensor[(14, ?, 3), float32], Tensor[(32), uint16], Tensor[(288), uint16], Tensor[(588), float32], Tensor[(15, 3, 6), float32], Tensor[(312), float64]) {
  @func_4832(%var_4834, %var_4835, %var_4836, %var_4837) /* ty=(Tensor[(10, 3, 8), int8], Tensor[(14, ?, 3), float32], Tensor[(32), uint16], Tensor[(288), uint16], Tensor[(588), float32], Tensor[(15, 3, 6), float32], Tensor[(312), float64]) */
}

def @func_6066() -> (Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), float32]) {
  %1077 = @func_4315() /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), int16]) */;
  %1078 = @func_2491() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %1079 = @func_1452() /* ty=(Tensor[(10, 3, 8), float32],) */;
  %1080 = %1077.0;
  %1081 = %1078.0;
  %1082 = %1079.0;
  (%1080, %1081, %1082)
}

def @func_5723() -> Tensor[(10, 3, 8), float32] {
  %1084 = fn () -> Tensor[(10, 3, 8), float32] {
    %1083 = @func_1452() /* ty=(Tensor[(10, 3, 8), float32],) */;
    %1083.0
  };
  %1084() /* ty=Tensor[(10, 3, 8), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen275/build/output.py:2825: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen275/build/output.py", line 2830, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(352) tvmgen_default_fused_sqrt_kernel0(float* __restrict__ T_sqrt, float* __restrict__ placeholder) {
  T_sqrt[(((int)threadIdx.x))] = sqrtf(placeholder[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

