import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_1309 = relay.var("var_1309", dtype = "int16", shape = (10, 5, 5))#candidate|1309|(10, 5, 5)|var|int16
const_1310 = relay.const([[[10,8,-8,10,-3],[6,-1,3,-9,6],[10,-2,3,3,5],[7,-5,5,4,-5],[-2,-6,-4,-9,-6]],[[8,10,-6,-10,-2],[-6,10,4,7,3],[-4,4,10,-10,3],[-3,-3,-9,-7,-8],[5,9,-7,1,10]],[[5,10,5,9,8],[-1,-3,3,3,-2],[-2,7,2,-6,-6],[-8,-2,2,8,-3],[1,7,-10,5,-4]],[[-4,-4,8,3,-9],[-2,-3,5,2,-5],[10,-10,-2,-9,4],[8,10,7,7,1],[2,-5,10,10,-5]],[[-6,5,-4,-6,5],[-6,8,-6,3,-8],[1,10,4,-10,-3],[-1,10,6,-2,6],[-2,2,-10,6,2]],[[-2,3,3,-1,2],[-7,-2,9,-10,-10],[-10,-3,-4,-1,-10],[4,9,3,5,-6],[7,-9,10,-9,-9]],[[-1,3,1,8,-8],[6,10,9,9,7],[-10,9,-5,7,1],[3,5,5,3,-8],[4,1,9,-5,-4]],[[4,-9,3,-1,-8],[-8,-4,6,9,-5],[-8,-2,4,1,-2],[4,-8,8,-4,4],[1,2,-5,7,8]],[[2,2,7,5,-5],[-4,2,1,7,-1],[7,5,7,8,5],[-7,-3,10,5,9],[-4,-1,7,10,-9]],[[-7,3,8,1,4],[-3,6,2,-6,-3],[8,-10,-8,3,2],[-7,10,10,-9,-3],[10,6,2,2,-4]]], dtype = "int16")#candidate|1310|(10, 5, 5)|const|int16
bop_1311 = relay.right_shift(var_1309.astype('int16'), relay.reshape(const_1310.astype('int16'), relay.shape_of(var_1309))) # shape=(10, 5, 5)
output = relay.Tuple([bop_1311,])
output2 = relay.Tuple([bop_1311,])
func_1345 = relay.Function([var_1309,], output)
mod['func_1345'] = func_1345
mod = relay.transform.InferType()(mod)
mutated_mod['func_1345'] = func_1345
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1346 = relay.var("var_1346", dtype = "int16", shape = (10, 5, 5))#candidate|1346|(10, 5, 5)|var|int16
func_1345_call = mutated_mod.get_global_var('func_1345')
call_1347 = func_1345_call(var_1346)
output = call_1347
func_1348 = relay.Function([var_1346], output)
mutated_mod['func_1348'] = func_1348
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1416 = relay.var("var_1416", dtype = "int64", shape = ())#candidate|1416|()|var|int64
var_1417 = relay.var("var_1417", dtype = "int64", shape = (15, 5, 1))#candidate|1417|(15, 5, 1)|var|int64
bop_1418 = relay.subtract(var_1416.astype('int64'), var_1417.astype('int64')) # shape=(15, 5, 1)
func_1345_call = mod.get_global_var('func_1345')
func_1348_call = mutated_mod.get_global_var('func_1348')
var_1424 = relay.var("var_1424", dtype = "int16", shape = (125, 2))#candidate|1424|(125, 2)|var|int16
call_1423 = relay.TupleGetItem(func_1345_call(relay.reshape(var_1424.astype('int16'), [10, 5, 5])), 0)
call_1425 = relay.TupleGetItem(func_1348_call(relay.reshape(var_1424.astype('int16'), [10, 5, 5])), 0)
func_1345_call = mod.get_global_var('func_1345')
func_1348_call = mutated_mod.get_global_var('func_1348')
call_1453 = relay.TupleGetItem(func_1345_call(relay.reshape(call_1423.astype('int16'), [10, 5, 5])), 0)
call_1454 = relay.TupleGetItem(func_1348_call(relay.reshape(call_1423.astype('int16'), [10, 5, 5])), 0)
bop_1455 = relay.bitwise_and(call_1423.astype('uint32'), relay.reshape(var_1424.astype('uint32'), relay.shape_of(call_1423))) # shape=(10, 5, 5)
bop_1458 = relay.bitwise_and(call_1425.astype('uint32'), relay.reshape(var_1424.astype('uint32'), relay.shape_of(call_1425))) # shape=(10, 5, 5)
output = relay.Tuple([bop_1418,call_1453,bop_1455,])
output2 = relay.Tuple([bop_1418,call_1454,bop_1458,])
func_1462 = relay.Function([var_1416,var_1417,var_1424,], output)
mod['func_1462'] = func_1462
mod = relay.transform.InferType()(mod)
mutated_mod['func_1462'] = func_1462
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1462_call = mutated_mod.get_global_var('func_1462')
var_1464 = relay.var("var_1464", dtype = "int64", shape = ())#candidate|1464|()|var|int64
var_1465 = relay.var("var_1465", dtype = "int64", shape = (15, 5, 1))#candidate|1465|(15, 5, 1)|var|int64
var_1466 = relay.var("var_1466", dtype = "int16", shape = (125, 2))#candidate|1466|(125, 2)|var|int16
call_1463 = func_1462_call(var_1464,var_1465,var_1466,)
output = call_1463
func_1467 = relay.Function([var_1464,var_1465,var_1466,], output)
mutated_mod['func_1467'] = func_1467
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1845 = relay.var("var_1845", dtype = "float32", shape = (2, 1, 8))#candidate|1845|(2, 1, 8)|var|float32
uop_1846 = relay.log2(var_1845.astype('float32')) # shape=(2, 1, 8)
output = uop_1846
output2 = uop_1846
func_1860 = relay.Function([var_1845,], output)
mod['func_1860'] = func_1860
mod = relay.transform.InferType()(mod)
var_1861 = relay.var("var_1861", dtype = "float32", shape = (2, 1, 8))#candidate|1861|(2, 1, 8)|var|float32
output = func_1860(var_1861)
func_1862 = relay.Function([var_1861], output)
mutated_mod['func_1862'] = func_1862
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2122 = relay.var("var_2122", dtype = "float64", shape = (3, 1, 1))#candidate|2122|(3, 1, 1)|var|float64
var_2123 = relay.var("var_2123", dtype = "float64", shape = (3, 1, 11))#candidate|2123|(3, 1, 11)|var|float64
bop_2124 = relay.floor_mod(var_2122.astype('float64'), var_2123.astype('float64')) # shape=(3, 1, 11)
func_1345_call = mod.get_global_var('func_1345')
func_1348_call = mutated_mod.get_global_var('func_1348')
var_2139 = relay.var("var_2139", dtype = "int16", shape = (250,))#candidate|2139|(250,)|var|int16
call_2138 = relay.TupleGetItem(func_1345_call(relay.reshape(var_2139.astype('int16'), [10, 5, 5])), 0)
call_2140 = relay.TupleGetItem(func_1348_call(relay.reshape(var_2139.astype('int16'), [10, 5, 5])), 0)
bop_2141 = relay.equal(call_2138.astype('bool'), relay.reshape(var_2139.astype('bool'), relay.shape_of(call_2138))) # shape=(10, 5, 5)
bop_2144 = relay.equal(call_2140.astype('bool'), relay.reshape(var_2139.astype('bool'), relay.shape_of(call_2140))) # shape=(10, 5, 5)
output = relay.Tuple([bop_2124,bop_2141,])
output2 = relay.Tuple([bop_2124,bop_2144,])
func_2152 = relay.Function([var_2122,var_2123,var_2139,], output)
mod['func_2152'] = func_2152
mod = relay.transform.InferType()(mod)
var_2153 = relay.var("var_2153", dtype = "float64", shape = (3, 1, 1))#candidate|2153|(3, 1, 1)|var|float64
var_2154 = relay.var("var_2154", dtype = "float64", shape = (3, 1, 11))#candidate|2154|(3, 1, 11)|var|float64
var_2155 = relay.var("var_2155", dtype = "int16", shape = (250,))#candidate|2155|(250,)|var|int16
output = func_2152(var_2153,var_2154,var_2155,)
func_2156 = relay.Function([var_2153,var_2154,var_2155,], output)
mutated_mod['func_2156'] = func_2156
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3366 = relay.var("var_3366", dtype = "float64", shape = (6, 2, 6))#candidate|3366|(6, 2, 6)|var|float64
uop_3367 = relay.atanh(var_3366.astype('float64')) # shape=(6, 2, 6)
output = uop_3367
output2 = uop_3367
func_3372 = relay.Function([var_3366,], output)
mod['func_3372'] = func_3372
mod = relay.transform.InferType()(mod)
mutated_mod['func_3372'] = func_3372
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3373 = relay.var("var_3373", dtype = "float64", shape = (6, 2, 6))#candidate|3373|(6, 2, 6)|var|float64
func_3372_call = mutated_mod.get_global_var('func_3372')
call_3374 = func_3372_call(var_3373)
output = call_3374
func_3375 = relay.Function([var_3373], output)
mutated_mod['func_3375'] = func_3375
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3640 = relay.var("var_3640", dtype = "float32", shape = (9, 11, 4))#candidate|3640|(9, 11, 4)|var|float32
var_3641 = relay.var("var_3641", dtype = "float32", shape = (9, 11, 4))#candidate|3641|(9, 11, 4)|var|float32
bop_3642 = relay.floor_mod(var_3640.astype('float32'), relay.reshape(var_3641.astype('float32'), relay.shape_of(var_3640))) # shape=(9, 11, 4)
output = relay.Tuple([bop_3642,])
output2 = relay.Tuple([bop_3642,])
func_3645 = relay.Function([var_3640,var_3641,], output)
mod['func_3645'] = func_3645
mod = relay.transform.InferType()(mod)
mutated_mod['func_3645'] = func_3645
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3645_call = mutated_mod.get_global_var('func_3645')
var_3647 = relay.var("var_3647", dtype = "float32", shape = (9, 11, 4))#candidate|3647|(9, 11, 4)|var|float32
var_3648 = relay.var("var_3648", dtype = "float32", shape = (9, 11, 4))#candidate|3648|(9, 11, 4)|var|float32
call_3646 = func_3645_call(var_3647,var_3648,)
output = call_3646
func_3649 = relay.Function([var_3647,var_3648,], output)
mutated_mod['func_3649'] = func_3649
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3863 = relay.var("var_3863", dtype = "float64", shape = (14, 2, 1))#candidate|3863|(14, 2, 1)|var|float64
uop_3864 = relay.asin(var_3863.astype('float64')) # shape=(14, 2, 1)
func_1860_call = mod.get_global_var('func_1860')
func_1862_call = mutated_mod.get_global_var('func_1862')
const_3872 = relay.const([-2.153038,-2.218678,-9.280857,2.069856,8.740563,-2.543917,6.764823,-7.020958,-6.941688,7.314706,-5.567582,-1.744101,-0.499168,-7.236891,4.293899,3.747869], dtype = "float32")#candidate|3872|(16,)|const|float32
call_3871 = func_1860_call(relay.reshape(const_3872.astype('float32'), [2, 1, 8]))
call_3873 = func_1860_call(relay.reshape(const_3872.astype('float32'), [2, 1, 8]))
output = relay.Tuple([uop_3864,call_3871,const_3872,])
output2 = relay.Tuple([uop_3864,call_3873,const_3872,])
func_3876 = relay.Function([var_3863,], output)
mod['func_3876'] = func_3876
mod = relay.transform.InferType()(mod)
mutated_mod['func_3876'] = func_3876
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3877 = relay.var("var_3877", dtype = "float64", shape = (14, 2, 1))#candidate|3877|(14, 2, 1)|var|float64
func_3876_call = mutated_mod.get_global_var('func_3876')
call_3878 = func_3876_call(var_3877)
output = call_3878
func_3879 = relay.Function([var_3877], output)
mutated_mod['func_3879'] = func_3879
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4151 = relay.var("var_4151", dtype = "float32", shape = ())#candidate|4151|()|var|float32
var_4152 = relay.var("var_4152", dtype = "float32", shape = (15, 8, 16))#candidate|4152|(15, 8, 16)|var|float32
bop_4153 = relay.greater(var_4151.astype('bool'), var_4152.astype('bool')) # shape=(15, 8, 16)
output = relay.Tuple([bop_4153,])
output2 = relay.Tuple([bop_4153,])
func_4158 = relay.Function([var_4151,var_4152,], output)
mod['func_4158'] = func_4158
mod = relay.transform.InferType()(mod)
mutated_mod['func_4158'] = func_4158
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4158_call = mutated_mod.get_global_var('func_4158')
var_4160 = relay.var("var_4160", dtype = "float32", shape = ())#candidate|4160|()|var|float32
var_4161 = relay.var("var_4161", dtype = "float32", shape = (15, 8, 16))#candidate|4161|(15, 8, 16)|var|float32
call_4159 = func_4158_call(var_4160,var_4161,)
output = call_4159
func_4162 = relay.Function([var_4160,var_4161,], output)
mutated_mod['func_4162'] = func_4162
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4275 = relay.var("var_4275", dtype = "uint8", shape = (4, 14, 5))#candidate|4275|(4, 14, 5)|var|uint8
var_4276 = relay.var("var_4276", dtype = "uint8", shape = (4, 14, 5))#candidate|4276|(4, 14, 5)|var|uint8
bop_4277 = relay.greater(var_4275.astype('bool'), relay.reshape(var_4276.astype('bool'), relay.shape_of(var_4275))) # shape=(4, 14, 5)
uop_4297 = relay.exp(bop_4277.astype('float32')) # shape=(4, 14, 5)
func_1462_call = mod.get_global_var('func_1462')
func_1467_call = mutated_mod.get_global_var('func_1467')
var_4302 = relay.var("var_4302", dtype = "int64", shape = ())#candidate|4302|()|var|int64
const_4303 = relay.const([-4,-10,-1,-2,-5,6,-7,-10,9,2,-4,-1,3,-4,-10,-7,10,-5,-8,-6,5,-10,6,9,-9,-3,5,10,6,5,6,10,1,-5,-2,1,-6,8,-10,9,8,-2,6,1,5,7,9,-7,3,-1,-6,10,5,4,-7,-5,-5,-9,1,2,-7,-9,-6,-9,10,-4,4,8,6,-5,7,7,6,-2,8], dtype = "int64")#candidate|4303|(75,)|const|int64
const_4304 = relay.const([[3,-10],[3,-10],[6,7],[4,6],[1,3],[7,7],[-8,-2],[-8,5],[-2,2],[7,-10],[-1,4],[5,3],[1,6],[-1,-2],[5,1],[4,-7],[-3,4],[5,4],[-2,-9],[10,3],[-7,9],[-1,6],[-5,-3],[3,5],[-1,5],[-4,-1],[-7,3],[4,1],[6,-1],[9,7],[4,-4],[10,-4],[-8,-8],[-8,-9],[1,4],[-2,7],[5,7],[5,9],[-3,-8],[-2,-5],[-1,-5],[4,-8],[7,-10],[-9,7],[7,7],[9,3],[8,-5],[4,-1],[3,-6],[1,1],[5,9],[8,-7],[1,7],[9,1],[1,-6],[-4,-10],[4,-3],[1,4],[-5,10],[-8,-8],[-1,8],[5,7],[-3,-1],[-3,-7],[8,-3],[4,-6],[10,-4],[-5,9],[9,5],[-7,10],[-7,-1],[3,-7],[-8,1],[-10,2],[-3,8],[9,3],[5,2],[2,3],[4,-10],[-2,1],[9,-1],[-10,-9],[-9,10],[-4,-8],[5,-10],[1,-6],[9,-1],[5,8],[-3,-3],[6,-6],[8,-5],[-3,1],[2,-4],[-9,7],[6,-7],[-9,5],[8,6],[7,-8],[-10,-7],[-7,-10],[4,-9],[4,-10],[-3,1],[4,5],[3,5],[-5,-7],[8,-9],[-6,4],[-3,-2],[-1,7],[-9,-8],[-4,4],[-6,9],[6,8],[4,10],[6,-8],[9,6],[-2,3],[-1,4],[-8,5],[9,-7],[2,10],[-1,-3],[-4,-6],[3,-2]], dtype = "int16")#candidate|4304|(125, 2)|const|int16
call_4301 = relay.TupleGetItem(func_1462_call(relay.reshape(var_4302.astype('int64'), []), relay.reshape(const_4303.astype('int64'), [15, 5, 1]), relay.reshape(const_4304.astype('int16'), [125, 2]), ), 1)
call_4305 = relay.TupleGetItem(func_1467_call(relay.reshape(var_4302.astype('int64'), []), relay.reshape(const_4303.astype('int64'), [15, 5, 1]), relay.reshape(const_4304.astype('int16'), [125, 2]), ), 1)
output = relay.Tuple([uop_4297,call_4301,var_4302,const_4303,const_4304,])
output2 = relay.Tuple([uop_4297,call_4305,var_4302,const_4303,const_4304,])
func_4330 = relay.Function([var_4275,var_4276,var_4302,], output)
mod['func_4330'] = func_4330
mod = relay.transform.InferType()(mod)
mutated_mod['func_4330'] = func_4330
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4330_call = mutated_mod.get_global_var('func_4330')
var_4332 = relay.var("var_4332", dtype = "uint8", shape = (4, 14, 5))#candidate|4332|(4, 14, 5)|var|uint8
var_4333 = relay.var("var_4333", dtype = "uint8", shape = (4, 14, 5))#candidate|4333|(4, 14, 5)|var|uint8
var_4334 = relay.var("var_4334", dtype = "int64", shape = ())#candidate|4334|()|var|int64
call_4331 = func_4330_call(var_4332,var_4333,var_4334,)
output = call_4331
func_4335 = relay.Function([var_4332,var_4333,var_4334,], output)
mutated_mod['func_4335'] = func_4335
mutated_mod = relay.transform.InferType()(mutated_mod)
const_4410 = relay.const([[[-8,10,-5,-9],[4,-9,10,7]],[[4,-2,-9,2],[-4,6,-3,-4]],[[5,5,2,8],[6,8,3,5]],[[-9,10,3,5],[8,3,-8,-10]],[[-3,-6,-1,-3],[-2,-4,-6,-2]],[[9,2,3,7],[-9,-3,-9,1]],[[-10,-7,1,-9],[-10,-10,1,3]],[[6,-9,-3,2],[-1,8,-10,2]],[[-5,-4,-10,1],[-3,6,5,-5]],[[5,3,4,-7],[-2,3,-3,3]],[[-7,-4,9,6],[-6,-7,2,-3]],[[-8,4,-2,5],[7,6,-4,-9]],[[8,-7,-1,-9],[7,-8,-8,7]],[[-7,-5,5,3],[-7,-3,-9,-5]],[[8,-4,-5,5],[-8,3,6,-9]],[[-3,4,-4,10],[-7,6,5,-5]]], dtype = "int8")#candidate|4410|(16, 2, 4)|const|int8
var_4411 = relay.var("var_4411", dtype = "int8", shape = (16, 2, 4))#candidate|4411|(16, 2, 4)|var|int8
bop_4412 = relay.left_shift(const_4410.astype('int8'), relay.reshape(var_4411.astype('int8'), relay.shape_of(const_4410))) # shape=(16, 2, 4)
output = bop_4412
output2 = bop_4412
func_4419 = relay.Function([var_4411,], output)
mod['func_4419'] = func_4419
mod = relay.transform.InferType()(mod)
var_4420 = relay.var("var_4420", dtype = "int8", shape = (16, 2, 4))#candidate|4420|(16, 2, 4)|var|int8
output = func_4419(var_4420)
func_4421 = relay.Function([var_4420], output)
mutated_mod['func_4421'] = func_4421
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4435 = relay.var("var_4435", dtype = "bool", shape = (16, 11, 12))#candidate|4435|(16, 11, 12)|var|bool
var_4436 = relay.var("var_4436", dtype = "bool", shape = (16, 11, 12))#candidate|4436|(16, 11, 12)|var|bool
bop_4437 = relay.logical_and(var_4435.astype('bool'), relay.reshape(var_4436.astype('bool'), relay.shape_of(var_4435))) # shape=(16, 11, 12)
func_4158_call = mod.get_global_var('func_4158')
func_4162_call = mutated_mod.get_global_var('func_4162')
const_4449 = relay.const(-2.393932, dtype = "float32")#candidate|4449|()|const|float32
const_4450 = relay.const([7.875723,4.632056,1.850745,6.433824,-0.856827,-1.259328,1.006995,-8.221860,1.595185,1.619944,-8.969362,-2.549514,-3.243254,-9.968033,-5.002054,-3.676738,6.561785,-0.067910,-8.476095,2.517535,4.135486,8.015742,5.700912,5.073741,0.090428,-9.094650,9.017543,6.119954,-0.694185,-5.366976,1.247024,-3.331527,-9.069559,9.700030,-2.331368,-2.831957,-2.346248,-7.000954,8.351717,-2.428113,-4.382545,2.900610,6.608504,-7.918766,-1.083423,-7.740831,9.145028,-6.913898,-8.340129,-5.980057,-2.058508,-2.212606,-3.366158,-2.140233,-8.538728,-8.403470,-2.484807,8.283213,-5.159564,9.942840,-2.572586,-1.030732,-4.333919,5.481927,-3.393176,3.132921,-7.078673,-4.278512,-2.060680,7.167565,5.045496,-7.751305,3.822097,-3.464842,4.743165,-9.036416,3.315294,3.953789,3.013492,-0.659832,-0.484004,-9.708487,3.747110,4.153319,7.117267,6.720321,7.370402,-6.845392,1.459614,-1.230002,-9.359698,-0.888418,-6.467634,6.521281,-1.616216,9.216452,6.092801,-4.868886,-4.667835,2.861300,-7.152792,7.692594,-4.111259,-5.664161,-3.488819,-6.704339,5.719104,-2.007011,-7.916758,8.538362,-8.786142,7.797058,-4.146855,-6.801057,9.754895,-8.469454,-2.843962,6.797121,-4.254143,-6.935990,4.095434,3.504910,7.359991,-6.736222,-7.204223,1.777799,-0.400384,-2.179676,-8.953655,-5.570254,-0.222276,6.800017,-3.293426,1.634179,-7.957106,6.118710,-7.281544,-5.206053,-2.070954,2.725518,-7.368195,7.794196,4.117796,7.901577,7.440078,-5.551102,-5.316645,-5.554713,-0.294117,7.945209,-3.077775,-5.448356,-5.413819,-4.690039,7.162745,2.832205,-9.870701,8.576803,-4.838635,1.167374,-6.386670,-8.736523,8.360692,1.007174,-9.372211,-7.750081,9.075144,-1.476642,8.174429,-5.734787,-8.965579,-4.270280,9.851463,2.972537,-9.099717,9.584792,-6.600940,-2.803720,-7.332672,5.849854,-6.768077,1.453535,8.730882,5.407695,6.580218,0.867757,3.243365,-6.648869,0.397591,1.374615,5.594662,-3.811787,-4.203692,4.673175,-0.856097,1.482342,7.098067,-5.004979,-5.409118,1.717409,-5.132394,-1.320299,2.282889,-1.882060,-7.494435,-5.474010,-1.663257,3.910629,8.535859,2.037220,2.442773,6.488502,-2.609106,8.341532,5.274029,-5.034239,-9.802620,-0.380597,5.527313,-2.907146,-1.090379,0.780791,-1.682372,1.662838,-2.954140,3.533797,4.591692,-1.189778,9.907385,6.385734,-8.773682,-1.780228,-7.889484,-8.691197,6.355222,0.630480,-1.531908,-9.944973,6.395959,-3.057602,-2.576256,0.506947,-3.018113,9.069775,-9.005148,9.143981,-4.684726,0.248094,-4.997506,9.811068,-3.030179,3.571154,4.803412,8.933950,7.978575,-0.394901,-8.748136,9.210616,6.336188,-1.241935,4.113590,5.666287,5.533204,-3.267085,-4.941383,2.783448,-3.580621,3.332880,-4.924428,-6.688782,4.216052,1.643163,5.895020,-9.057957,-6.840380,-7.165170,-1.672042,4.892488,-3.789069,6.860201,7.163012,9.325307,7.222337,-0.700933,-6.352774,9.425588,0.163851,3.376758,-9.917132,-9.590606,-6.638914,-4.333063,-4.947402,-9.451097,-0.834965,6.454682,-5.222252,6.030103,-2.219321,5.910370,4.316318,-7.966949,8.621849,3.943381,4.474316,-9.196303,-3.578363,3.194767,6.138697,5.527631,4.256416,0.519517,9.162914,-6.280565,-1.715821,-6.598595,-6.629505,1.901588,-9.177729,7.555482,-8.809183,7.707692,3.567732,4.453192,-9.820929,-9.424336,0.653457,1.621223,-2.629623,-0.113910,4.381596,-0.705269,5.035867,-4.028859,-3.946644,-6.250218,9.553935,0.701492,-2.002556,0.709488,0.243025,-7.378839,-6.675619,-7.687211,0.882306,6.717842,6.166280,1.173138,8.711446,4.215322,3.188509,-2.036282,3.079487,2.826226,-9.522749,3.460994,-4.754203,5.246906,6.357591,-0.824031,-2.178581,-0.438412,2.668687,3.741880,2.357416,2.628543,-6.053887,1.946747,5.671255,6.483400,-5.437812,-4.580185,-2.439552,1.212237,8.145764,3.804828,5.410609,9.501401,2.180082,-5.311503,3.054428,0.310544,6.449541,-3.499010,-0.251349,8.491732,-9.608229,3.982023,0.356809,-7.551630,-6.837916,-1.789984,8.431880,7.653831,-5.373113,1.394057,8.678124,7.245288,-1.596490,8.075305,4.031969,6.071543,-5.214243,0.128076,1.136340,-8.068760,2.679355,8.954819,2.864818,2.080110,-6.308766,6.099966,5.647997,7.313448,-9.183271,-6.379113,5.924487,7.952704,7.309299,6.755849,2.023597,-0.348694,-2.925087,0.432773,-4.242366,-8.592644,-1.356549,-4.919496,-5.376560,3.831284,4.343434,9.331522,6.606370,-9.667526,7.976487,1.251509,-3.518312,5.923297,2.436519,-9.995158,8.105584,7.056818,-8.874379,7.982925,8.114354,-5.834395,4.489986,9.008269,-5.496194,4.591020,2.514725,-1.313663,-9.102303,-1.972029,0.289422,-6.945465,9.705767,-2.251646,2.153577,9.077348,-6.818553,7.318982,7.949136,-8.109489,3.577686,4.419542,-8.785781,-1.765215,9.112344,-9.414015,1.023753,3.049056,-6.288906,-7.883463,7.252979,-5.416580,6.041705,1.129545,-9.030811,1.233153,0.821444,-5.037395,-5.168807,9.625499,-0.202461,-6.914012,-9.324539,-7.836333,9.628743,-4.266309,-9.337320,-5.775842,7.032427,-5.365474,8.165535,9.217313,-8.241699,-3.804149,-6.805383,-7.916608,-1.897037,-3.320420,-7.909236,5.519612,0.893584,6.978624,3.308864,-5.498188,3.713753,-3.558940,-4.882212,-9.739129,-8.633405,0.697707,-0.233461,8.247353,6.557915,6.859871,-4.993037,4.088548,-6.117285,-6.401915,9.043483,-8.794308,7.944198,5.018265,-8.929092,0.042717,8.337933,3.779122,-6.084972,-3.994072,-3.829016,-3.205802,-8.892564,3.285843,-5.138677,-3.663281,-5.943494,-6.193858,-7.460696,5.001971,8.508452,4.592722,0.110216,-8.180196,5.716273,2.859936,-8.805106,-4.837466,-7.482155,-7.950666,7.894620,-0.087263,9.109618,-4.828948,-4.597872,6.770476,-9.896691,-8.903039,8.384494,7.198346,5.704747,9.698014,-2.883113,0.442448,1.010085,8.725553,-5.779788,-4.600681,4.526530,6.094298,-9.359986,8.339493,5.624786,-5.154865,8.531927,1.750350,9.168241,-6.192349,5.349848,-1.657684,8.935680,5.456909,3.167351,-2.252921,-8.214611,-8.739599,-7.712622,7.550086,-4.445656,-4.364732,-4.789944,-8.155732,-7.393820,1.270309,-3.111933,-9.618763,-4.288755,-4.510811,8.025037,-8.526215,-0.905084,-9.786775,-3.461866,9.421642,-0.131691,-2.118096,6.115974,-2.480796,-5.819842,4.632410,0.072452,-8.815746,-2.959466,5.873999,6.571858,8.730127,-1.165890,-8.549321,-5.959159,6.346064,-6.597404,0.705658,2.683893,1.515931,2.569778,-3.068929,1.845087,-1.836286,6.049413,6.412512,1.605111,1.629431,4.642603,1.625506,8.740094,-2.805599,-2.741577,1.013100,6.554031,9.470890,-3.625919,5.467664,1.524809,2.211488,9.624775,8.392062,7.825039,-5.307978,6.268850,-9.978238,7.558142,-4.168458,-3.621090,4.438363,-9.706164,8.552059,-4.036948,-7.631065,-4.043898,7.368678,5.098544,4.978905,2.393302,7.551449,7.932653,0.913403,-3.975259,-4.624181,7.325259,-7.685313,4.861535,-9.257903,-6.932383,3.498795,-1.310693,-3.581953,0.363040,0.443738,8.934201,1.794602,-4.509146,1.631781,-4.001124,-8.438876,8.295375,-4.619669,-7.701669,5.896473,3.338530,5.921989,2.596118,6.831369,0.266116,6.814733,3.461276,2.989429,2.185956,-9.873246,1.928913,7.070756,5.808518,0.341488,1.402591,-9.752475,5.289191,-0.147033,0.094126,4.902375,-8.618506,-6.199615,-8.211267,-9.503123,-0.709782,5.351757,7.411558,3.789552,-8.250161,-7.706768,8.826043,9.611412,-9.512800,3.208700,3.832168,9.892724,0.853556,-4.309704,8.986876,6.309287,6.894420,3.472442,7.717556,-1.368804,0.703471,2.649039,5.246447,1.736463,9.116474,-5.035633,-9.009670,-9.345568,9.120641,5.761895,3.820854,-6.631074,1.392236,4.569556,-4.834134,7.090702,-4.070458,-2.763087,7.880591,-0.027663,-0.923721,4.171944,-7.606387,-6.950110,-5.524823,-5.862267,-9.461865,4.519493,0.021467,5.538410,-7.130999,9.979858,4.806258,-0.304395,-6.077235,0.176535,1.928161,2.847919,3.764560,2.624486,0.406070,4.636194,0.671998,8.564475,-3.377599,-5.683022,1.139789,2.932142,-8.057054,4.375335,-5.824625,2.063756,-3.604998,2.023849,1.115300,0.811401,3.778536,-2.234252,6.808658,1.189382,-9.157348,-8.139835,9.228985,2.714036,-8.906071,-2.226841,3.149366,-1.304379,-1.624319,6.336698,2.059637,-4.818929,-2.565106,0.042588,6.187149,0.844054,-5.524470,2.391424,8.736644,0.185359,-2.371493,9.503053,-9.186437,1.404552,1.306202,-3.096888,1.881580,9.498919,9.745530,-8.295118,6.591738,7.318164,0.830904,-8.320830,2.998606,-5.196194,4.435231,9.646815,-3.689435,6.256094,-5.221260,-7.491069,-8.471038,3.303845,-8.187146,-6.579753,1.516937,8.646057,8.295785,1.234837,-6.950435,-9.068890,8.151312,9.533585,-6.061909,-0.508746,-5.296509,-5.069516,-0.219534,-1.561091,2.339151,5.562686,-4.736594,-2.569343,-6.340108,-9.902338,2.234178,-6.751886,9.224672,-8.627764,-7.211978,-5.566716,8.142617,-6.698177,-1.312644,-6.479488,0.021503,-5.397389,5.481981,4.879198,-3.624972,-6.816562,-4.434607,2.915372,-4.067593,8.844173,-3.525425,5.606112,7.290585,1.943179,-7.104601,8.063751,7.611562,-8.353333,-9.573935,-2.639729,0.085253,5.084997,-2.408341,1.052563,-5.911688,9.055261,-7.862033,6.747813,-2.029764,7.128116,-1.283564,6.340620,-1.714612,-5.217647,6.381113,-0.599844,8.858893,2.661211,-4.215374,-8.200179,2.441108,0.023135,-3.534526,9.275648,2.481104,-1.946915,-8.190708,-1.900923,9.252750,2.398518,6.277928,3.195919,2.615037,-1.211942,-3.000887,8.967949,9.722281,1.290807,1.159444,-5.640262,-6.639529,-1.967706,-3.134980,0.934362,-7.592503,8.912706,-0.122947,-5.363017,2.352180,4.247109,-9.495409,4.519705,0.645909,3.046550,-3.364896,-5.999721,-4.018398,5.823800,1.855125,-7.794081,8.060439,7.252921,2.642238,-7.717239,5.507315,-0.094428,-5.919835,8.152407,-3.818782,-0.225354,-5.606312,7.072632,9.692541,-1.650207,-7.424958,-2.077109,-4.589244,0.127928,-4.846100,-8.620072,-0.067691,9.275147,-0.545099,-7.693563,3.296960,8.669993,4.588228,6.411929,7.294446,8.342969,-6.432421,-6.998793,-5.492553,-5.197780,4.681096,-2.677018,7.622655,-1.438298,-4.349597,1.730184,1.649684,1.453161,0.337928,0.166376,-0.394129,-6.855294,4.983792,7.096833,5.857230,-7.065260,-3.035049,-5.421893,-8.880150,-7.697032,5.611759,-8.660697,-1.356325,-9.436869,-5.591377,6.934155,-9.118612,-7.267078,-3.452306,2.710621,6.469363,-4.981494,-9.332778,-5.555644,5.340721,9.246688,-1.039320,6.386005,-3.171824,-8.824865,2.885249,7.594975,-8.680068,9.117969,-7.049761,-5.044066,-5.823927,3.291641,1.791918,7.516626,-6.555084,0.550750,4.393812,-9.997616,-7.990073,-3.979655,-2.816913,-5.205716,3.391480,0.296187,-1.436664,-1.123717,-9.894407,-5.787624,6.356571,-4.165300,-5.899569,-6.162769,-7.873065,6.449769,3.228327,-5.830918,-8.114830,-6.646319,2.342308,2.076139,6.074760,-3.168687,7.513193,7.738655,7.667622,8.488213,-0.100726,1.409129,-8.945083,7.368563,-4.593478,3.119872,-8.269498,7.019311,4.027427,-0.566557,-9.071538,-8.242335,5.835332,-7.760678,5.234421,-2.923278,8.474692,-9.223920,7.029439,1.785016,7.087036,-6.214666,7.360713,9.902053,-4.381714,1.128393,6.578597,-4.057966,-5.224206,2.510377,-8.779959,9.007186,6.252452,4.457148,5.438727,-2.380790,6.717672,7.984190,-3.848481,2.071114,-1.599315,1.988103,-7.651045,-6.277174,-1.312872,-1.169815,9.402765,-9.633885,5.135380,5.627862,9.423299,-9.082319,-1.455729,3.931033,-4.492230,2.464642,1.525632,-9.374911,6.289447,-3.861147,-7.531436,-3.870481,-4.718319,-0.245432,9.908207,5.879011,-6.991324,3.578075,2.790146,7.731409,-7.836074,-0.428027,-9.220562,6.033584,0.232951,3.300591,8.513761,5.579241,8.795897,4.800268,-0.577127,6.567919,-5.682212,1.131450,0.335314,-7.741262,-0.101537,8.882436,3.128298,-9.517919,8.906291,3.828576,1.235868,-6.848528,-6.160062,3.026884,-8.079289,1.797856,-0.714877,-5.707983,-1.993906,5.295171,2.177808,8.150420,9.483189,1.066657,0.100095,8.910989,-0.457600,1.685654,-5.945323,1.128928,6.040934,3.353646,2.424315,4.932528,-1.065400,-3.276595,-4.215622,0.752451,4.788188,-4.921736,8.529532,-8.762754,0.839256,-7.241855,-2.690005,0.156213,4.342797,1.283239,-9.269630,-6.864788,9.228317,8.991817,-7.097169,-7.128705,2.017493,-6.353871,-5.441588,-3.228616,7.188798,1.878117,-3.217830,7.016649,-1.536592,8.277543,-3.992251,6.511106,-0.517355,9.635185,6.017758,7.281781,-7.602849,6.016730,-1.913387,-6.953638,7.854193,1.552986,-6.018676,7.714273,-5.394146,-8.821157,-4.190853,-7.909165,-1.538205,5.346537,5.543681,-0.469565,-8.317297,3.601510,-2.954951,-7.851930,6.151326,1.507249,8.213605,-8.593567,3.088772,-6.596105,7.012689,3.929054,-6.330819,6.377056,7.115073,4.796698,-1.122547,-9.360171,-4.468553,-2.436598,-6.042213,-6.491124,-5.239090,7.967053,0.177656,5.293589,4.373481,-1.210012,3.253858,2.874456,8.430457,-6.703504,2.655731,-5.635095,-0.134809,-9.973484,4.053098,-5.565495,4.069330,9.893005,5.787893,9.975202,2.241880,-6.214249,-5.777618,1.698973,-5.744765,1.315638,-6.904938,9.107746,-5.136334,-5.315856,-1.451299,5.659191,-4.385737,-7.126677,7.860935,-8.483824,8.563967,5.996110,6.128465,-8.518418,-8.285746,1.273184,6.816484,4.348475,-8.961083,4.354995,-7.635508,5.019841,-2.594090,-5.957430,5.604415,-5.557132,5.234993,-5.801505,6.077232,-7.924524,-9.119816,-8.255720,3.952916,1.106228,6.265861,-3.560856,2.847642,8.964590,-7.603080,0.706562,-9.766586,-5.961429,4.869392,-4.752444,2.036679,8.028466,9.174711,-4.251805,5.413465,-2.000630,-5.780747,4.099053,-3.261153,0.021626,-1.133600,0.307083,1.077812,1.442994,-0.024194,2.761819,-2.836680,-7.713114,-0.566878,-0.193142,-3.481778,0.225249,-2.222127,1.999878,7.976259,9.941036,5.796604,-3.878308,-4.353303,-8.875038,-2.927446,8.992216,-0.849716,-4.913207,-4.263748,-8.278042,5.403950,1.625760,-8.410837,1.767166,-7.467222,-9.221909,6.677229,-0.845922,-2.660628,-6.373187,-5.834281,2.955102,4.784800,9.045950,2.846739,4.846230,2.090207,-5.361648,2.419077,3.399976,-3.282757,5.644461,4.145865,3.355444,-8.337682,-9.950236,8.274624,5.270558,6.075021,-9.239768,5.246754,7.724790,5.914817,-6.811161,4.715994,-4.895662,4.071029,4.782176,1.909247,-3.552334,0.061469,-8.747898,2.757695,5.982508,-2.625924,5.010732,6.022378,3.900551,-7.267922,1.637470,2.011541,8.290058,-0.619697,4.588929,4.482962,2.701752,-4.970315,-3.564082,-6.763788,-4.014905,6.604681,-6.943363,3.226142,5.424375,3.378729,9.385320,-7.447612,-3.920741,-8.156098,-4.595583,6.438664,-8.814035,1.637533,1.597196,-5.894790,7.614259,1.029324,0.815542,3.986905,-3.777074,6.685716,0.165817,-8.275789,-0.197353,-4.530114,3.782222,7.248029,9.599309,-2.432789,-9.161683,0.010127,-3.195033,4.436314,6.119164,9.043765,2.250376,7.601616,-7.964453,-3.013766,-3.396854,-8.052727,4.343681,1.692046,-2.600247,7.221784,7.278880,-7.232848,-6.320074,2.325659,-1.748050,4.397565,7.160840,2.297102,8.061563,7.585476,-8.408605,3.586760,0.572644,-1.061048,-5.172991,-2.775092,-8.367716,9.463494,-6.080056,-0.454959,8.453186,-3.986268,7.442643,9.823995,-7.546430,-0.769577,-2.050460,-5.783644,9.490619,4.459658,-9.521946,5.144485,3.573196,1.231874,0.302906,-6.514363,-8.170699,0.446315,-2.653890,-7.974628,3.589960,9.240210,-1.129176,2.082235,5.483720,3.888292,-3.652002,-7.451127,9.575371,6.713947,-1.119329,-2.021414,1.637388,-9.853774,-9.661230,-1.360068,1.787191,5.910429,6.189745,4.797447,3.944883,-9.701763,8.542559,0.075715,9.999340,4.362266,1.999150,-9.719109,-9.207478,-0.715465,5.008002,-7.334918,7.286756,-3.386378,5.496531,1.703657,-2.501670,-4.391546,-4.494426,-1.264386,2.220519,6.700317,8.170226,8.465102,-9.761992,-6.422043,-4.066752,8.421532,-3.867595,-4.266398,8.184232,0.263500,2.653973,-6.205061,4.820944,5.772053,-3.479506,1.430949,-8.668924,9.047369,4.906383,-9.100570,6.522864,2.761978,9.603325,7.211563,3.882337,-9.669600,-0.879141,-1.859076,-0.663097,-5.229151,5.403958,-2.608503,-7.021122,-8.026386,-3.268830,5.098143,-6.499231,5.366231,-0.521029,2.058652,1.164937,5.895413,-7.231976,-8.928402,9.129511,9.130001,-5.499988,2.210750,-3.077557,-2.612224,-1.474016,-2.834792,-0.408633,6.089820,-1.612487,-6.897142,-9.709013,9.798011,-5.667438,7.583736,3.710576,-9.866018,4.832973,-5.233758,4.910037,-7.345739,6.065370,5.361395,-9.959323,-8.429313,4.072852,1.265208,-3.769101,-1.606780,-9.252275,8.650463,-2.549614,0.744428,1.813536,7.898861,6.622478,-5.650875,-2.160005,-1.237090,-4.231107,6.884268,-2.743390,-7.280060,-5.777453,4.056158,-2.900444,-7.677475,-8.534418,-4.128042,5.247134,-3.478243,8.996227,1.669812,-0.593076,7.393410,4.329906,-8.909316,2.501771,-5.440940,6.410074,-0.100898,-4.911671,6.499549,-8.035641,-2.469225,6.568413,-4.319330,-7.328106,8.520697,-0.713042,3.396226,6.159984,7.310181,-9.101896,-6.392360,5.342150,-8.108476,3.082132,-0.775136,2.797192,-0.688928,8.395886,-6.181578,-0.388579,8.599573,-9.393258,-0.081343,-2.812553,-2.753950,-3.481449,0.758670,2.866691,9.829255,2.528152,-6.006240,9.741910,3.889288,-1.666549,-5.839208,6.014520,7.947092,-2.235703,-6.347115,4.935235,-6.375108,5.550046,2.125054,5.404357,-9.838779,-3.300583,4.045090,0.598920,-3.678270,-6.005892,-9.350808,-8.933850,7.422514,-2.238493,-4.743770,-3.784237,1.537849,-2.878807,-3.125243,5.620408,-3.787772,-9.769700,1.891264,-2.891630,5.760818,-3.875979,8.123158,1.711000,-9.153345,-9.747393,0.856224,3.724397,-6.414708,2.339852,1.323265,8.256689,-3.138929,1.619796,2.513343,4.063259,7.954230,3.924132,6.259404,0.579028,-3.368200,-1.997052,1.829791,-1.218600,7.518865,-8.078348,-5.164368,-7.647785,2.715141,1.606236,8.049572,2.028749,-9.387470,1.776235,2.964140,2.447729,-1.929152,2.823686,0.073279,-6.648915,5.096883,1.963476,-9.048195,-4.197310,-4.199460,2.311686,9.816839,-9.095871,7.733138,6.679595,-2.269086,-6.027209,-1.279124,-4.857687,4.136201,-2.953450,-6.533129,-1.710503,6.647932,-5.859169,-0.051291,7.638723,3.715719,-1.766978,-2.062284,0.882701,-7.424642,3.139543,-8.363930,0.069865,-6.577009,-6.195313,4.175863,-2.364234,-6.228817,-5.070625,-9.690287,-4.524041,4.447089,-7.854919,-7.339998,1.596182,2.110951,2.458084,-4.938575,0.076851,-2.177890,3.834020,-6.684872,-4.852722,9.471590,-7.591620,-3.724065,6.509964,8.843471,2.174757,6.236572,-9.652788,-3.334545,-1.717116,-6.423487,2.781237,-8.331656,3.864444,-3.152050,0.999301,-7.996829,8.074008,-9.210118,7.315426,-9.435207,4.269097,5.372919,-7.030876,6.815473,-3.513750,-1.081539,-9.455649,5.540484,-9.375084,3.220135,6.320394,5.520916,-7.140496,3.103028,4.321769,8.115730,9.837522,-7.970330,-9.832037,0.933335,-2.217464,-1.369278,-0.733323,-1.793194,-4.740618,-4.857318,2.699261,-8.712841,8.856998,2.484977,-1.129367,6.687509,1.557929,8.326097,4.490854,3.452389,4.317600,-2.136622,7.810504,-4.856531,-3.392219,7.496852,-1.409445,7.249639,3.344872,-1.222570,7.934602,7.398181,0.027212,-7.254736,2.321288,-1.112933,-8.208814,-7.419411,3.029527,2.829344,9.493614,-4.013790,-1.023208,7.037739,-8.264108,2.818520,6.752889,6.249227,-7.997217,9.530641,8.889788,-0.825699,-0.478888,5.747032,0.167282,6.642194,4.271619,-8.802454,-2.634774,7.508226,8.331278,-8.638163,1.316271,9.306560,-9.239078,-7.473451,0.830338,5.914617,4.831440,0.637021,8.843640], dtype = "float32")#candidate|4450|(1920,)|const|float32
call_4448 = relay.TupleGetItem(func_4158_call(relay.reshape(const_4449.astype('float32'), []), relay.reshape(const_4450.astype('float32'), [15, 8, 16]), ), 0)
call_4451 = relay.TupleGetItem(func_4162_call(relay.reshape(const_4449.astype('float32'), []), relay.reshape(const_4450.astype('float32'), [15, 8, 16]), ), 0)
func_4330_call = mod.get_global_var('func_4330')
func_4335_call = mutated_mod.get_global_var('func_4335')
const_4455 = relay.const([-8,-6,-8,-4,5,4,4,1,-4,6,-8,6,5,7,6,3,8,10,-2,-7,-6,8,-2,-7,7,4,-2,-7,-8,-2,8,-8,-7,-2,-1,-5,-10,1,3,2,-3,7,-7,-4,-1,-1,2,-5,8,-7,8,9,6,-2,8,-10,10,-6,-2,-4,-7,-1,-4,7,6,2,5,-4,1,-9,-1,2,6,10,8,-8,1,-5,8,9,-5,9,-2,10,-10,6,10,5,-8,2,1,3,1,-8,-10,-4,8,5,-8,-7,8,10,-3,-1,-1,7,7,5,7,-9,-10,4,-8,-2,-5,-5,-2,10,9,6,-6,-2,-2,1,10,-10,4,-2,4,9,3,-2,-8,-2,-6,6,1,5,5,-7,-5,-9,1,-1,5,6,-3,-5,-3,-7,7,-10,-1,4,-10,-3,9,6,-3,-7,-9,6,-1,5,10,-2,-5,-5,-7,2,-3,-6,7,4,-1,8,-6,-3,7,-3,-10,-4,-7,-1,2,-4,2,-9,4,-9,-6,6,-3,-1,5,-9,-6,9,-6,10,8,4,5,-9,9,-5,-6,7,8,-4,-9,-1,8,2,2,3,-7,-10,-2,-3,-6,6,-9,-3,-10,-1,10,7,2,5,1,-6,6,-3,2,7,-4,9,-5,-10,9,-5,-5,-10,-2,-3,-2,-1,2,7,10,1,7,9,2,9,3,4,-6,7,1,3,8,2,-8,5,4,-5,-5,5,6,-3,-9,8,-3,-5,4,8,2,3], dtype = "uint8")#candidate|4455|(280,)|const|uint8
call_4454 = relay.TupleGetItem(func_4330_call(relay.reshape(const_4455.astype('uint8'), [4, 14, 5]), relay.reshape(const_4455.astype('uint8'), [4, 14, 5]), relay.reshape(const_4449.astype('int64'), []), ), 2)
call_4456 = relay.TupleGetItem(func_4335_call(relay.reshape(const_4455.astype('uint8'), [4, 14, 5]), relay.reshape(const_4455.astype('uint8'), [4, 14, 5]), relay.reshape(const_4449.astype('int64'), []), ), 2)
output = relay.Tuple([bop_4437,call_4448,const_4449,const_4450,call_4454,const_4455,])
output2 = relay.Tuple([bop_4437,call_4451,const_4449,const_4450,call_4456,const_4455,])
func_4458 = relay.Function([var_4435,var_4436,], output)
mod['func_4458'] = func_4458
mod = relay.transform.InferType()(mod)
var_4459 = relay.var("var_4459", dtype = "bool", shape = (16, 11, 12))#candidate|4459|(16, 11, 12)|var|bool
var_4460 = relay.var("var_4460", dtype = "bool", shape = (16, 11, 12))#candidate|4460|(16, 11, 12)|var|bool
output = func_4458(var_4459,var_4460,)
func_4461 = relay.Function([var_4459,var_4460,], output)
mutated_mod['func_4461'] = func_4461
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4567 = relay.var("var_4567", dtype = "int32", shape = (14, 13, 8))#candidate|4567|(14, 13, 8)|var|int32
const_4568 = relay.const([[[2,-4,2,-9,8,1,-2,4],[5,-5,9,-3,10,-2,2,8],[1,10,5,-8,-9,-6,-5,4],[4,-6,5,-8,7,-3,-9,4],[3,3,-3,1,-9,3,-5,-4],[8,-4,7,7,1,6,3,9],[-6,-3,5,-3,1,8,4,-7],[-10,-7,-2,-5,-6,-2,-1,-4],[7,-5,3,5,-3,2,-5,-2],[-1,-3,3,7,-7,8,-3,-6],[-4,-3,9,3,-2,-9,-3,9],[-10,-8,-10,-2,-5,6,7,-8],[-3,7,8,-1,-4,-5,-1,-2]],[[9,-4,4,-8,10,-7,-6,-7],[-6,10,-6,-6,3,-7,8,-7],[-9,5,-7,-4,-7,-4,-8,3],[-7,9,5,-4,-7,-7,2,1],[3,7,-9,8,4,10,-3,7],[7,3,-1,2,-10,2,-3,5],[1,9,-5,-7,-9,10,-1,3],[-2,9,5,-3,2,-9,8,-2],[-6,-10,-8,-1,-5,10,-9,-3],[-1,-6,6,3,5,-1,-6,4],[4,4,-3,8,7,8,-2,8],[-3,-4,-4,-7,1,-3,-10,10],[3,5,-10,-5,-2,-2,4,-10]],[[6,8,-2,-10,2,9,-2,-8],[-4,10,6,2,10,4,6,3],[-9,2,3,-4,7,6,4,-4],[-7,-4,-2,4,-10,6,-2,6],[9,5,-3,-8,4,-2,10,-9],[-10,1,-7,4,3,3,-10,-9],[8,10,4,-4,1,-1,1,9],[2,5,-7,9,10,7,1,-6],[1,2,5,-6,-1,-7,-6,4],[-8,-7,8,5,8,-8,8,-9],[4,-6,7,-5,-10,9,-1,-4],[-1,-2,-9,-9,-8,5,2,5],[-5,-3,3,-9,2,-9,-2,-2]],[[3,4,-2,8,-9,-6,-7,7],[1,4,-9,5,4,4,6,-9],[-1,-9,-7,5,-10,-6,-1,10],[-4,4,-9,5,-4,9,7,8],[-4,-5,6,6,-10,-4,7,10],[8,5,6,3,2,-9,4,9],[6,7,-3,-7,-5,-1,-7,-6],[-9,-4,-2,5,3,-5,1,4],[-9,1,-6,-4,-1,5,-7,3],[-1,-1,8,-9,9,-9,-9,10],[-6,7,-9,-2,5,8,-8,10],[-10,4,-4,-8,-6,-3,-9,-10],[-4,-6,-9,3,6,10,10,3]],[[8,7,-10,-6,1,-3,4,7],[2,9,10,7,-3,9,-6,5],[-8,7,7,-6,5,-1,3,-7],[1,-6,9,-8,2,-8,-8,2],[5,-5,7,3,9,2,-3,-4],[-6,7,8,8,1,-8,-6,6],[-4,-6,-10,-2,4,-8,-5,-1],[-7,-6,2,-4,-9,3,-3,-9],[-7,7,-3,-6,-4,-1,-9,8],[3,-8,8,-7,4,-2,-8,-5],[5,4,-10,-2,7,3,-10,-9],[-7,-5,8,-1,3,-3,-6,9],[10,-9,6,-7,9,-6,-1,9]],[[1,-2,-7,5,-8,-4,-5,-8],[-6,7,10,-2,4,-5,2,-2],[7,6,-6,-7,-9,1,-4,1],[9,2,2,8,2,10,9,-1],[-5,-4,7,-9,2,2,-2,4],[1,-1,-9,-10,4,7,3,4],[4,-2,9,7,1,7,-2,-3],[8,7,-4,-10,-8,-4,6,8],[-7,-3,2,-10,-9,6,-10,6],[4,-7,2,-9,-8,-1,2,-6],[-10,7,-7,6,-6,9,3,3],[-9,-8,-10,9,-9,-2,-2,1],[-7,5,-5,-10,-3,-6,4,-6]],[[4,2,-2,-3,3,-3,6,-6],[-2,5,-2,-10,-5,1,-10,2],[2,7,7,6,-5,-7,-5,-4],[-6,6,-5,10,5,-1,8,-8],[-7,4,-4,4,-1,2,5,-3],[-4,-8,-5,3,10,6,5,-8],[-8,-6,3,4,2,8,-2,8],[-9,-9,5,-6,-5,-2,-6,-5],[-3,9,-1,-9,-8,10,-9,-10],[-5,5,-2,-2,5,9,4,-8],[-3,10,9,-8,-8,1,-9,8],[-1,-1,-5,-9,-8,-6,2,-7],[10,-10,-9,-7,9,4,8,-9]],[[6,9,-4,6,7,-4,5,-4],[9,5,4,-4,-8,8,-2,-5],[8,2,4,-6,9,10,1,8],[-9,7,4,6,-2,10,-3,6],[8,-3,-5,3,-9,7,-8,2],[-7,3,-2,3,-3,-10,7,6],[-4,-8,-10,-5,6,10,9,3],[1,-9,-3,7,-5,-10,4,8],[9,-9,8,9,-9,8,-3,6],[-7,8,-7,-5,3,7,-3,5],[2,10,-9,-4,2,-6,4,-10],[7,8,3,6,-9,3,-7,-4],[4,9,-7,-2,6,3,-2,-9]],[[-10,-2,-2,-9,1,-5,-2,-9],[4,-2,4,9,3,-10,-4,-3],[7,9,6,-2,-2,9,-5,2],[10,-2,7,-4,5,5,-2,6],[-8,1,-3,-10,10,-10,-10,8],[-6,4,-2,-4,-2,-6,1,-6],[-7,10,-1,-8,2,8,10,-1],[6,10,2,3,-2,8,3,2],[-2,1,-5,-6,8,-8,-10,5],[-4,2,-8,2,7,5,8,9],[10,-5,2,-9,-5,-9,7,1],[-10,1,-9,9,-5,-6,-2,2],[9,-6,-9,1,3,1,5,-3]],[[-4,-2,9,10,8,6,-3,1],[-8,-4,1,2,-7,-5,-2,5],[5,10,-1,-10,6,-8,-6,4],[-7,2,-6,-3,5,3,-8,-5],[10,-1,-6,1,-6,-5,-9,6],[-7,-5,3,6,-7,7,-1,-2],[-2,3,3,1,2,-2,5,10],[-8,-9,-4,9,7,-1,-2,1],[-8,-1,-8,-10,10,-5,2,1],[10,-9,4,-8,-5,9,-3,-1],[-5,-10,5,-5,-2,10,-6,3],[10,10,1,-4,8,4,-6,-10],[7,5,-2,7,-3,-9,9,-4]],[[-8,-2,4,-5,-1,-6,6,-1],[-8,7,9,5,2,-10,7,-1],[-10,-4,-10,9,-2,10,2,2],[-8,-1,2,10,9,-6,-3,3],[-1,8,-8,3,-1,-7,-4,5],[6,10,10,-4,9,-9,-9,6],[9,-9,10,-4,-7,-5,8,7],[-4,1,-7,6,7,8,6,-5],[-5,-10,10,-7,-3,-10,-2,6],[-3,1,4,-6,3,-8,-6,-3],[-1,8,-9,10,7,4,8,7],[-6,1,-8,-2,1,-1,5,9],[-9,9,4,-9,-9,2,2,7]],[[2,10,7,10,-2,-6,-4,-4],[4,10,-3,10,-1,-7,6,3],[-4,-7,-2,2,7,-4,-4,6],[4,-7,7,6,2,3,7,-5],[8,5,-8,-6,4,-9,-10,6],[3,8,-3,-9,8,-4,-9,-8],[-10,7,-10,4,-4,-10,-10,-6],[-2,-4,-9,-9,-5,1,-1,-1],[4,10,2,5,8,10,-6,2],[5,2,-9,10,-5,9,2,8],[9,-9,1,-7,-3,-9,-7,6],[7,7,-10,-9,10,10,10,-9],[5,10,-3,-5,7,-5,4,-6]],[[1,4,-2,8,-5,-5,6,1],[-3,-9,7,-5,9,9,-3,-4],[-2,-8,3,6,4,-2,7,-6],[-4,1,9,8,-7,-1,5,9],[-4,-2,2,-7,-9,-9,-4,-1],[9,2,7,8,-10,-8,-4,4],[3,9,4,-2,-6,-1,7,9],[-1,4,2,4,10,-8,-9,6],[-6,5,-2,-3,9,1,6,-10],[10,7,-5,-5,-2,-3,3,3],[6,-1,5,9,10,10,9,-2],[-5,2,-9,8,9,-4,-1,-4],[-5,7,1,-5,-5,6,6,-4]],[[5,2,-2,7,10,-4,8,-9],[-4,-2,2,7,-2,-5,1,1],[5,1,-4,7,-2,6,-8,3],[-1,1,2,-3,3,5,7,-9],[9,-8,-10,6,7,-2,-7,8],[-9,1,9,8,-4,-5,8,3],[-5,10,-9,7,-10,-10,-3,-5],[9,4,2,9,6,8,7,-3],[6,8,-2,9,4,-9,10,-7],[-1,-9,4,10,-4,-6,-4,5],[-4,3,-8,10,-6,8,2,-6],[-8,-8,7,-2,8,1,-9,-10],[-9,-1,-9,-8,-1,-10,-2,7]]], dtype = "int32")#candidate|4568|(14, 13, 8)|const|int32
bop_4569 = relay.less_equal(var_4567.astype('bool'), relay.reshape(const_4568.astype('bool'), relay.shape_of(var_4567))) # shape=(14, 13, 8)
output = bop_4569
output2 = bop_4569
func_4584 = relay.Function([var_4567,], output)
mod['func_4584'] = func_4584
mod = relay.transform.InferType()(mod)
var_4585 = relay.var("var_4585", dtype = "int32", shape = (14, 13, 8))#candidate|4585|(14, 13, 8)|var|int32
output = func_4584(var_4585)
func_4586 = relay.Function([var_4585], output)
mutated_mod['func_4586'] = func_4586
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4725 = relay.var("var_4725", dtype = "bool", shape = (8, 7, 1))#candidate|4725|(8, 7, 1)|var|bool
var_4726 = relay.var("var_4726", dtype = "bool", shape = (8, 7, 7))#candidate|4726|(8, 7, 7)|var|bool
bop_4727 = relay.logical_or(var_4725.astype('bool'), var_4726.astype('bool')) # shape=(8, 7, 7)
func_2152_call = mod.get_global_var('func_2152')
func_2156_call = mutated_mod.get_global_var('func_2156')
const_4733 = relay.const([5.246730,-3.007567,7.308420], dtype = "float64")#candidate|4733|(3,)|const|float64
const_4734 = relay.const([5.438253,-8.199623,-9.703223,-0.721379,-3.713355,5.394136,7.796958,-8.475715,-8.791198,6.502248,5.628016,-9.913209,-5.263637,-6.386716,-6.941773,-9.403118,-6.719468,-4.374746,0.494631,2.022410,6.039930,-2.271515,9.436457,1.740407,-8.240904,9.008228,5.461203,2.437945,2.589166,-0.231911,6.060136,5.649137,2.240123], dtype = "float64")#candidate|4734|(33,)|const|float64
var_4735 = relay.var("var_4735", dtype = "int16", shape = (250,))#candidate|4735|(250,)|var|int16
call_4732 = relay.TupleGetItem(func_2152_call(relay.reshape(const_4733.astype('float64'), [3, 1, 1]), relay.reshape(const_4734.astype('float64'), [3, 1, 11]), relay.reshape(var_4735.astype('int16'), [250,]), ), 1)
call_4736 = relay.TupleGetItem(func_2156_call(relay.reshape(const_4733.astype('float64'), [3, 1, 1]), relay.reshape(const_4734.astype('float64'), [3, 1, 11]), relay.reshape(var_4735.astype('int16'), [250,]), ), 1)
bop_4737 = relay.bitwise_xor(const_4734.astype('uint8'), var_4725.astype('uint8')) # shape=(8, 7, 33)
func_1345_call = mod.get_global_var('func_1345')
func_1348_call = mutated_mod.get_global_var('func_1348')
call_4743 = relay.TupleGetItem(func_1345_call(relay.reshape(var_4735.astype('int16'), [10, 5, 5])), 0)
call_4744 = relay.TupleGetItem(func_1348_call(relay.reshape(var_4735.astype('int16'), [10, 5, 5])), 0)
func_1860_call = mod.get_global_var('func_1860')
func_1862_call = mutated_mod.get_global_var('func_1862')
var_4751 = relay.var("var_4751", dtype = "float32", shape = (16,))#candidate|4751|(16,)|var|float32
call_4750 = func_1860_call(relay.reshape(var_4751.astype('float32'), [2, 1, 8]))
call_4752 = func_1860_call(relay.reshape(var_4751.astype('float32'), [2, 1, 8]))
uop_4764 = relay.exp(call_4743.astype('float64')) # shape=(10, 5, 5)
uop_4766 = relay.exp(call_4744.astype('float64')) # shape=(10, 5, 5)
bop_4784 = relay.less(const_4734.astype('bool'), bop_4737.astype('bool')) # shape=(8, 7, 33)
func_4584_call = mod.get_global_var('func_4584')
func_4586_call = mutated_mod.get_global_var('func_4586')
const_4794 = relay.const([-2,3,-4,3,1,6,8,5,9,4,-2,-2,7,2,-2,7,1,4,-5,9,-10,-9,5,6,-4,9,-1,2,5,-3,-10,1,-10,-7,3,2,-5,10,5,-3,8,-4,2,-1,10,4,-4,-1,1,1,6,-7,-6,-10,-7,-9,-4,8,-7,-3,-2,-8,1,3,1,-7,-9,9,-5,6,1,-9,-6,-3,3,-3,10,-3,3,6,-2,-1,9,-6,-9,8,-8,9,3,1,5,-3,5,9,-4,2,-7,-6,-4,-5,-7,-5,2,-10,-5,5,3,6,-5,-6,7,4,-4,4,-3,1,2,6,9,10,-5,3,-2,7,-3,6,-2,7,1,4,-8,5,-2,-5,6,-4,-10,-10,7,4,2,-1,2,-2,7,8,-2,7,-3,4,8,2,-6,-4,10,4,-8,6,-3,3,-6,-7,-4,-10,-7,-6,-4,-4,-1,-7,4,4,-8,-2,-9,-3,3,-3,6,-4,10,9,10,-8,2,5,7,-2,10,-6,-8,-5,-2,-8,2,5,-3,9,8,6,3,9,-1,-6,4,9,4,-3,-2,7,4,-9,-4,2,-6,-5,-2,-2,7,3,10,5,5,10,-10,3,-7,-3,-1,-7,5,-9,-8,1,6,9,5,-2,2,10,-9,8,-7,8,-7,-6,-7,-1,-5,10,-6,9,-3,-4,3,6,10,7,-6,5,10,-6,-8,3,1,7,2,-1,-7,1,2,3,1,9,-4,1,-8,2,5,-1,9,-6,-4,-8,-3,-2,-6,6,4,7,10,4,4,-5,-9,7,-4,1,-1,10,7,10,-8,1,2,10,5,-1,9,-9,-2,-8,-1,-6,-7,-10,-10,-6,-9,-10,4,-4,-3,-7,2,-3,-4,1,-10,-2,5,1,-4,-4,3,-5,-4,-7,7,3,2,4,-7,-5,-1,-3,-1,-2,1,-8,-1,-3,-6,-4,-4,2,3,6,-8,6,-8,-8,3,-3,-7,9,6,5,-4,-4,-7,6,10,-9,-5,-2,6,-1,3,3,7,-9,8,4,2,10,-6,-7,-10,-7,-3,-7,10,-10,-4,-4,-7,-3,-5,-6,-8,-6,5,-1,2,-10,-8,6,7,-2,8,-1,8,-1,2,10,6,-4,-1,-7,-4,8,4,-3,-9,-1,2,-2,-3,-3,-2,4,-9,10,5,3,-4,3,-6,-8,-3,9,-8,-4,-6,7,2,-6,2,-10,-1,8,5,-3,10,-3,-10,-10,5,-3,-3,-1,-4,5,-2,4,-10,-1,6,4,-5,10,-3,-6,-4,-1,9,-9,8,-2,-9,-6,-9,-3,-10,10,6,-3,-8,-9,-9,-9,-2,-5,2,-3,-4,-9,-3,-9,-9,-10,-10,-6,-5,-3,5,5,8,-10,-7,-1,-1,5,1,8,-4,-5,-5,-5,5,-5,7,10,1,-8,-4,-1,-9,8,2,-2,-6,3,7,2,-5,4,8,-1,-3,-9,-8,-1,-9,-1,-7,-9,9,6,1,9,6,8,-7,-7,8,7,-6,-6,-7,6,-7,9,-7,3,-5,-4,6,-9,2,3,-1,9,1,4,2,4,-5,7,-9,9,-5,-9,6,-5,-3,10,1,3,3,-9,-7,6,7,-3,-4,-4,-7,1,10,-2,6,-9,1,8,9,-1,-2,8,8,8,6,-4,-7,-6,3,-2,-2,-8,4,7,5,2,2,-7,-1,-6,-10,-10,5,4,4,9,-8,8,-2,7,-2,-5,9,7,-10,7,-3,-5,-10,10,-6,1,7,5,-4,-7,1,1,5,-10,-2,2,-1,-8,7,-7,9,6,5,5,6,-6,-3,9,-6,10,-3,7,-1,-4,-3,1,7,7,-3,-3,-2,7,5,-3,2,-1,8,-8,-3,7,-3,7,8,-4,-6,-1,4,-6,-6,2,-4,5,-10,-3,5,-10,-8,8,3,-8,-7,-7,-9,-9,-2,2,-3,10,-10,-8,-2,-3,7,8,-1,7,5,8,7,-8,-8,4,7,-7,-6,-2,-3,-7,-4,10,-1,-5,3,2,-1,-8,1,2,-6,7,-4,-8,-3,7,2,-7,6,-1,5,10,2,-7,-10,2,-10,7,7,-10,2,10,-7,-7,6,4,1,-9,4,7,7,-9,6,10,3,4,9,9,10,1,-6,-9,-10,10,-6,-7,6,-1,-4,-6,3,4,5,-8,-3,-2,5,-8,10,1,6,-1,6,5,-1,10,-2,-5,-10,-3,-3,2,6,5,9,-4,-5,-5,4,-2,-2,10,7,-2,-10,1,-10,1,4,-4,3,-6,-2,1,3,-3,-8,-1,-8,-5,10,2,-9,-5,-1,4,8,4,2,-6,-1,-4,-1,7,9,-8,5,8,10,-7,-4,-7,-4,10,8,-3,-4,9,1,3,-7,-9,-8,6,-10,-1,7,-7,-10,-7,5,-7,-8,-2,-2,8,-7,-4,4,7,5,2,-7,-3,8,-3,-1,-1,9,-7,-2,2,2,4,-6,-3,10,-4,-4,2,-8,-4,7,7,1,-7,-9,-10,-5,-10,-7,1,-6,-4,2,2,-5,9,2,-10,-2,-3,5,3,-2,-10,-3,8,-8,2,2,-1,10,9,-8,4,5,10,-3,-2,5,3,5,-1,-6,4,-5,-5,5,-7,-4,-2,8,-10,4,-5,-8,-10,2,7,-2,-5,3,4,-5,-10,9,7,3,-10,1,-9,6,1,9,-5,8,10,2,-1,4,-4,-5,-2,-8,7,-8,8,4,-1,9,5,-7,-1,8,4,7,-5,-8,-1,1,-6,4,2,-3,-4,10,2,-4,-6,6,4,-9,6,-8,-4,4,-8,3,-10,-5,-1,-4,2,-5,-10,-8,4,5,-5,-6,-4,8,-1,-1,7,5,-1,-10,-7,-1,6,3,-9,10,5,-2,6,-10,10,10,-9,7,6,-3,4,1,-5,10,5,7,-3,9,-8,-8,2,8,-7,-1,6,-5,10,-10,10,-9,9,-5,5,-4,2,-3,-4,-8,-8,3,5,-4,-5,9,4,10,-2,-8,8,-9,-5,-5,-5,-9,3,9,-1,-2,7,10,9,-5,-7,-9,-6,-3,3,2,-2,3,3,3,2,8,9,1,2,-1,10,1,-2,-6,6,-5,7,4,-7,-5,4,-10,-5,-1,8,3,-3,1,3,-10,-5,7,-2,-3,-10,10,4,-7,5,-6,-1,1,7,9,1,-7,4,-8,7,-5,-2,2,-7,8,6,-4,-5,9,9,2,-7,4,-4,-8,-6,9,8,-7,-8,-6,9,1,5,7,-10,-1,7,8,2,4,9,-7,5,-1,-8,-9,-6,-10,10,4,6,7,-3,-7,-3,2,-6,-8,-4,4,-7,-9,-3,2,8,-5,1,8,-7,10,5,1,-2,2,9,10,-1,8,9,9,-6,-10,6,-5,-4,-4,-7,-2,-5,9,-2,-9,7,7,7,-1,-8,-4,-10,7,3,5,-6,3,9,7,-8,-4,-4,-10,7,-8,4,-1,-10,-10,-2,5,10,-1,-9,-2,-5,-1,-7,1,-2,-9,10,5,-8,7,10,10,-9,2,-7,4,-1,2,5,2,-4,-6,-2,-6,-5,-2,4,-6,-1,10,3,2,8,3,-7,1,-7,6,7,2,5,-7,-4,-4,3,2,10,1,-8,-3,1,-8,2,-10,8,-1,3,-3,-2,3,3,-1,-1,-4,9,6,5,10,10,8,-1,-2,-6,-5,-4,-4,-4,-1,-7,4,6,8,3,-9,-8,-10,6,7,-7,-2,9,-7,1,5,-6,-6,8,4,-1,-4,-1,-10,-4,-1,-7,1,1,8,7,1,-2,-4,2,2,2,-2,8,-10,-9,3,-5,2,2,7,-5,3,-7,6,6,3,-3,10,9,4,-2,3,-3,1,-7,7,7,7,-8,3,2,3,-3,7,-7,-9,9,-6,7,2,-6,-5,-10,6,9], dtype = "int32")#candidate|4794|(1456,)|const|int32
call_4793 = func_4584_call(relay.reshape(const_4794.astype('int32'), [14, 13, 8]))
call_4795 = func_4584_call(relay.reshape(const_4794.astype('int32'), [14, 13, 8]))
uop_4798 = relay.tan(uop_4764.astype('float32')) # shape=(10, 5, 5)
uop_4800 = relay.tan(uop_4766.astype('float32')) # shape=(10, 5, 5)
func_4158_call = mod.get_global_var('func_4158')
func_4162_call = mutated_mod.get_global_var('func_4162')
var_4802 = relay.var("var_4802", dtype = "float32", shape = ())#candidate|4802|()|var|float32
var_4803 = relay.var("var_4803", dtype = "float32", shape = (96, 20))#candidate|4803|(96, 20)|var|float32
call_4801 = relay.TupleGetItem(func_4158_call(relay.reshape(var_4802.astype('float32'), []), relay.reshape(var_4803.astype('float32'), [15, 8, 16]), ), 0)
call_4804 = relay.TupleGetItem(func_4162_call(relay.reshape(var_4802.astype('float32'), []), relay.reshape(var_4803.astype('float32'), [15, 8, 16]), ), 0)
func_2152_call = mod.get_global_var('func_2152')
func_2156_call = mutated_mod.get_global_var('func_2156')
call_4807 = relay.TupleGetItem(func_2152_call(relay.reshape(const_4733.astype('float64'), [3, 1, 1]), relay.reshape(const_4734.astype('float64'), [3, 1, 11]), relay.reshape(uop_4798.astype('int16'), [250,]), ), 1)
call_4808 = relay.TupleGetItem(func_2156_call(relay.reshape(const_4733.astype('float64'), [3, 1, 1]), relay.reshape(const_4734.astype('float64'), [3, 1, 11]), relay.reshape(uop_4798.astype('int16'), [250,]), ), 1)
func_4458_call = mod.get_global_var('func_4458')
func_4461_call = mutated_mod.get_global_var('func_4461')
var_4811 = relay.var("var_4811", dtype = "bool", shape = (2112,))#candidate|4811|(2112,)|var|bool
call_4810 = relay.TupleGetItem(func_4458_call(relay.reshape(var_4811.astype('bool'), [16, 11, 12]), relay.reshape(var_4811.astype('bool'), [16, 11, 12]), ), 3)
call_4812 = relay.TupleGetItem(func_4461_call(relay.reshape(var_4811.astype('bool'), [16, 11, 12]), relay.reshape(var_4811.astype('bool'), [16, 11, 12]), ), 3)
output = relay.Tuple([bop_4727,call_4732,const_4733,var_4735,call_4750,var_4751,bop_4784,call_4793,const_4794,uop_4798,call_4801,var_4802,var_4803,call_4807,call_4810,var_4811,])
output2 = relay.Tuple([bop_4727,call_4736,const_4733,var_4735,call_4752,var_4751,bop_4784,call_4795,const_4794,uop_4800,call_4804,var_4802,var_4803,call_4808,call_4812,var_4811,])
func_4813 = relay.Function([var_4725,var_4726,var_4735,var_4751,var_4802,var_4803,var_4811,], output)
mod['func_4813'] = func_4813
mod = relay.transform.InferType()(mod)
mutated_mod['func_4813'] = func_4813
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4813_call = mutated_mod.get_global_var('func_4813')
var_4815 = relay.var("var_4815", dtype = "bool", shape = (8, 7, 1))#candidate|4815|(8, 7, 1)|var|bool
var_4816 = relay.var("var_4816", dtype = "bool", shape = (8, 7, 7))#candidate|4816|(8, 7, 7)|var|bool
var_4817 = relay.var("var_4817", dtype = "int16", shape = (250,))#candidate|4817|(250,)|var|int16
var_4818 = relay.var("var_4818", dtype = "float32", shape = (16,))#candidate|4818|(16,)|var|float32
var_4819 = relay.var("var_4819", dtype = "float32", shape = ())#candidate|4819|()|var|float32
var_4820 = relay.var("var_4820", dtype = "float32", shape = (96, 20))#candidate|4820|(96, 20)|var|float32
var_4821 = relay.var("var_4821", dtype = "bool", shape = (2112,))#candidate|4821|(2112,)|var|bool
call_4814 = func_4813_call(var_4815,var_4816,var_4817,var_4818,var_4819,var_4820,var_4821,)
output = call_4814
func_4822 = relay.Function([var_4815,var_4816,var_4817,var_4818,var_4819,var_4820,var_4821,], output)
mutated_mod['func_4822'] = func_4822
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5464 = relay.var("var_5464", dtype = "float64", shape = (10, 1, 11))#candidate|5464|(10, 1, 11)|var|float64
uop_5465 = relay.sinh(var_5464.astype('float64')) # shape=(10, 1, 11)
bop_5474 = relay.bitwise_xor(var_5464.astype('uint16'), relay.reshape(uop_5465.astype('uint16'), relay.shape_of(var_5464))) # shape=(10, 1, 11)
output = relay.Tuple([bop_5474,])
output2 = relay.Tuple([bop_5474,])
func_5477 = relay.Function([var_5464,], output)
mod['func_5477'] = func_5477
mod = relay.transform.InferType()(mod)
var_5478 = relay.var("var_5478", dtype = "float64", shape = (10, 1, 11))#candidate|5478|(10, 1, 11)|var|float64
output = func_5477(var_5478)
func_5479 = relay.Function([var_5478], output)
mutated_mod['func_5479'] = func_5479
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5627 = relay.var("var_5627", dtype = "uint16", shape = ())#candidate|5627|()|var|uint16
var_5628 = relay.var("var_5628", dtype = "uint16", shape = (14, 11, 11))#candidate|5628|(14, 11, 11)|var|uint16
bop_5629 = relay.not_equal(var_5627.astype('bool'), var_5628.astype('bool')) # shape=(14, 11, 11)
output = relay.Tuple([bop_5629,])
output2 = relay.Tuple([bop_5629,])
func_5643 = relay.Function([var_5627,var_5628,], output)
mod['func_5643'] = func_5643
mod = relay.transform.InferType()(mod)
var_5644 = relay.var("var_5644", dtype = "uint16", shape = ())#candidate|5644|()|var|uint16
var_5645 = relay.var("var_5645", dtype = "uint16", shape = (14, 11, 11))#candidate|5645|(14, 11, 11)|var|uint16
output = func_5643(var_5644,var_5645,)
func_5646 = relay.Function([var_5644,var_5645,], output)
mutated_mod['func_5646'] = func_5646
mutated_mod = relay.transform.InferType()(mutated_mod)
const_6438 = relay.const([[[-6.847603,-8.976247,-5.695577,-0.189763,5.706119,3.973608,8.595029,-8.373369,-4.335206,-3.365879],[8.987993,5.381655,-4.745592,-8.286330,-6.468623,6.981320,-3.813933,5.362354,-6.108607,-0.603808],[-8.792426,-7.307275,4.770141,-8.148746,-8.191127,-0.137527,3.016304,-0.314943,7.350656,-3.142940],[-5.473659,-6.922622,-0.324465,4.062481,-1.461116,-8.614061,-8.065402,-3.555587,8.544333,3.734743],[5.064905,-8.356988,6.805823,1.222944,6.059886,-5.051561,2.413068,4.443029,-4.849661,-1.462916],[-5.727095,-2.118968,6.197404,-3.410790,3.005438,-1.278756,1.638797,4.297781,-5.535174,1.361368],[0.593501,6.348965,-4.134970,-6.299787,-0.187373,3.908918,3.526615,4.052129,-8.693113,-8.613485],[7.167026,7.561330,4.631117,6.066259,8.737516,5.881172,-3.546906,7.653969,7.854467,-3.956985],[-3.628088,-4.387230,9.419152,-7.740064,1.609019,3.759780,-7.702268,5.823741,3.924271,8.185227],[3.716550,4.278163,0.826135,7.470755,-2.591583,-5.246310,3.900304,4.495780,-5.438058,0.934326],[-4.721425,-7.713336,2.865891,-3.579365,-3.496681,8.645185,-3.265983,-7.292740,8.741707,5.263089],[0.212027,-2.061742,-0.651993,7.569799,6.654843,2.651191,4.582647,-6.282370,6.534184,5.446892],[-0.034248,-0.544119,-2.915297,1.937969,-2.010615,3.575794,-6.874068,-9.488387,9.403882,-2.131873],[-0.025126,-3.831432,7.890267,-5.334210,6.857500,4.731579,-7.782580,0.626445,-9.068023,-8.538518]],[[4.539029,-1.139158,6.196396,-7.270781,-4.316726,-4.251064,-4.302712,-1.081853,3.292923,7.398455],[-9.455345,6.908240,-6.850437,5.412199,1.826521,7.744903,-5.658833,-0.884318,-2.414428,-8.108181],[7.358053,-2.960308,-0.280019,-0.634056,9.644723,-0.884409,-9.596668,2.486069,-6.603192,1.041840],[-4.025779,-5.593081,-4.542531,8.443218,-8.773608,8.487343,-2.725748,3.703306,-1.253952,-5.516094],[4.682227,4.402328,-9.942669,-7.909861,-0.742512,-6.399278,-4.831651,3.146435,-3.238454,-6.719302],[-2.163043,-4.943360,8.171796,8.489741,0.942990,5.254835,2.897797,-0.834303,3.232996,-1.883637],[-2.359448,2.040812,-8.647853,2.686489,6.139432,5.335777,7.053234,-0.179811,3.003248,-5.434484],[0.131588,-6.761161,1.545686,1.402458,7.898304,-9.298937,-2.431674,5.715411,-0.588824,8.442442],[-8.195915,2.653802,5.588590,-1.280101,-4.290503,4.060368,-8.843261,-7.790043,6.468992,2.666151],[4.972347,-9.282462,9.411111,-5.456076,1.639587,9.600553,-6.305643,5.255093,-1.292616,1.249250],[9.539461,-1.122553,-4.901952,2.064435,-5.920633,-7.019825,-7.625739,-2.666233,-5.075227,4.075192],[-6.731370,8.531971,8.679606,-0.785708,-8.100633,-4.497672,2.096610,-1.071038,2.761595,2.126180],[-0.170196,-4.996511,-4.009689,-1.500607,6.000921,-7.118012,-4.087374,3.865179,8.395520,5.851364],[2.735745,7.688591,-5.994796,-9.952464,9.524408,-2.065057,0.084796,-1.971882,8.330816,2.557956]],[[-5.305581,-2.492296,1.200380,-7.202641,-5.947344,0.039446,-5.849215,-6.725544,-5.047327,-2.406866],[-2.005803,1.823654,1.476837,8.727469,-3.091859,-7.401147,6.384536,8.717580,-2.796302,8.625709],[3.840858,-6.603124,1.577653,-1.765743,6.738682,8.339808,0.434892,6.655535,-6.667700,0.111051],[4.635070,3.344781,4.851818,-4.621607,-1.678370,-0.099570,-7.522467,3.550639,1.172597,1.955832],[8.009529,-9.281110,9.494202,7.731053,-0.092700,-1.767097,-1.083764,-7.832518,-4.800828,2.380230],[-5.472725,-9.480842,-0.886938,-9.127228,2.131364,-2.038341,-7.715883,-5.860251,0.283871,7.529633],[-0.146193,9.505145,6.918350,-8.882510,-0.678553,9.099244,9.194269,2.389443,2.034291,3.521211],[0.977105,5.175571,-3.135009,4.161027,-8.933140,-7.392104,-4.114604,0.457544,0.106356,9.352049],[-7.718940,1.385837,-3.091844,4.237399,-4.450183,1.080878,2.364842,-4.363744,-1.024280,4.685220],[-4.292875,1.760704,3.638310,9.680386,1.255212,1.055357,9.711407,7.644591,4.254285,0.215045],[-4.832542,-6.580919,-1.586121,9.071085,-8.918752,6.529290,-3.657932,-7.549536,4.337098,4.850814],[-3.684475,-6.786979,6.808209,-9.333722,4.973970,-3.716235,-5.238828,2.807959,1.925184,5.516845],[6.635201,7.666660,5.802113,6.280636,9.473500,2.283634,5.965521,6.155935,-8.134564,-4.134592],[4.229155,4.255356,8.744862,-5.037596,1.062564,-6.652143,-4.799794,1.972976,1.387575,6.835217]],[[6.464012,5.120055,-9.804062,3.216640,-3.825255,-8.458451,-5.993998,9.719455,-5.021045,6.280531],[8.856580,-6.751788,5.191691,4.511376,7.140396,9.081900,-4.344048,2.806223,3.305464,4.761134],[-2.305918,4.041903,5.167147,-5.050195,7.038786,5.158065,-8.536026,-2.521143,1.190819,-2.647075],[-6.281873,3.002300,-4.105369,-8.674382,6.500331,4.832937,6.672336,1.892317,3.620133,8.230491],[5.311039,8.372615,-7.485319,6.460769,-8.475956,-0.904455,9.538847,5.540066,2.950609,4.300698],[5.586692,-3.145107,8.469851,4.381780,-5.350423,6.658466,8.849029,6.212323,2.669510,-0.490311],[-3.016958,-8.762366,-7.657172,-5.585879,7.903466,3.443465,-8.855894,-5.617453,6.790411,2.883616],[-8.982132,0.136756,6.907588,6.353048,2.312417,-3.694729,0.987294,0.806100,-4.856968,0.032239],[5.126810,-0.782757,-2.288711,7.958397,-6.136046,1.923861,-7.488733,2.314105,1.574411,-0.373162],[-5.629082,1.288019,8.182441,8.189042,-6.515952,-3.211390,4.050201,1.920389,6.440425,8.623676],[9.719109,-2.261868,9.613604,-3.734738,-8.172399,8.186413,0.658774,-6.874577,3.619420,0.100601],[-7.467943,1.718752,-5.644953,-3.715219,-7.840887,-0.296348,-8.355381,9.520029,-0.678436,1.652048],[-4.190150,9.043558,8.266500,-9.625291,3.372485,-6.438565,4.738956,-7.885558,-6.881361,7.801799],[-0.299105,6.425649,-9.972671,1.114414,-1.005181,-3.851418,9.520625,-9.710908,5.908841,-4.770149]],[[-5.991334,2.326557,-7.340980,-3.596350,-9.340873,0.022780,0.960387,6.049643,3.595985,-7.252201],[2.874952,-6.139120,-2.578656,2.478188,-8.066323,-1.707787,-9.855209,-9.631475,2.935159,-1.547918],[8.551828,3.449233,-0.147640,-6.142938,1.079994,8.039554,7.595625,0.950538,-5.118475,-6.205610],[-2.466302,-4.219867,-6.042309,-9.540842,3.777365,9.355905,-6.102308,0.522675,5.104835,2.453606],[-3.425158,-2.596887,-7.699836,5.124800,-8.612348,2.074649,-0.448586,-7.580134,3.100462,7.132869],[3.395063,0.696908,8.253516,-2.422516,-4.890783,8.536415,-1.380188,6.055178,7.724752,4.818475],[-9.851451,2.261484,-4.029174,2.832503,-2.679998,-4.178220,8.333400,3.002040,-6.985691,9.652397],[1.818096,4.336237,-0.060047,6.539079,6.890158,-7.447098,2.843182,2.772227,1.464782,2.529342],[9.025540,0.170851,7.057470,9.094793,-7.777989,7.965401,3.345702,0.250037,1.652207,8.428814],[5.327293,-1.745940,6.539134,2.289217,-7.034182,-4.110210,-5.401737,-4.265419,9.673178,-3.380601],[-4.849606,2.801490,-7.139263,-4.318765,7.474850,4.775126,4.952758,-8.075564,6.033303,5.985770],[-9.285307,3.467759,6.363709,2.887792,8.408047,-2.226049,1.688084,1.902147,-5.515716,9.140162],[2.840260,-7.025581,-9.448832,-0.578878,-9.193527,0.406929,4.550230,-8.617321,-0.626778,4.736117],[5.625814,5.916182,-9.718224,-3.053306,-4.764589,-7.934097,-0.266259,-2.280413,7.758108,-0.701301]],[[-8.812350,2.852803,-5.558931,-1.758934,0.906747,-7.360361,2.832780,1.011009,-2.860777,-7.409537],[1.216450,8.617886,-3.102778,-8.048548,-6.015968,7.528014,-6.781799,-6.818714,-5.897961,1.069683],[2.021042,-9.233268,2.739955,-9.003317,-8.928865,0.187769,1.379887,3.779448,-7.169884,-8.120214],[3.386118,-7.597680,-4.970396,-5.878680,5.262349,-6.933365,-0.843291,-3.558117,-1.583797,5.619710],[6.839751,-7.848847,4.873779,-5.807560,1.998807,-3.010048,5.533984,-5.106119,-3.977081,-9.125304],[-8.638542,-3.764671,-3.456244,-4.536787,7.132101,5.138957,-5.542716,4.227624,6.602401,-6.788294],[-9.155302,4.518691,7.761095,1.590047,3.687386,5.076381,-9.429154,-1.999834,-1.923863,1.465398],[-4.740102,5.015804,-3.953960,1.730196,-5.789928,-7.277617,-0.741386,-0.984306,2.228653,6.730025],[-7.519355,-8.459886,-6.412097,4.258931,-4.731709,-3.325633,5.680498,6.861315,0.347252,6.196249],[-0.172544,-0.854741,-4.271001,-0.412876,5.570354,-7.309313,4.379118,-8.296004,3.368116,-6.136131],[6.827617,-1.318471,-0.647245,-7.955500,-6.999228,-3.405716,-7.867972,-6.470653,7.097003,-3.122417],[-0.139566,-5.392920,-5.372545,-7.004468,-7.135292,1.779184,2.680219,-2.986769,8.718974,6.943052],[5.516650,5.604186,7.375270,-4.353564,-6.322140,3.325564,4.466868,-9.893907,-2.785599,0.173309],[-0.055420,-7.086279,-5.779876,2.699519,-7.119355,-7.168274,-0.606063,9.777598,6.260118,6.978592]],[[-9.807016,-2.315836,-8.743182,5.411592,1.130560,-3.276537,2.436003,-2.551321,0.749080,-4.272007],[-7.523825,5.979435,-2.471471,-0.311046,-5.424193,4.119915,-9.605848,-5.871327,9.466600,-8.262702],[-4.437234,-4.631229,0.257850,-3.688500,-5.926456,-8.396938,3.603926,-4.840389,-0.299104,6.025056],[-4.362763,-5.707388,-4.688923,0.649093,-9.642713,0.482100,-6.776377,0.271468,-0.181353,7.767507],[-3.269031,3.552674,9.160703,7.797864,5.245003,1.819564,3.147742,-3.091539,-5.689233,0.517888],[1.216698,-4.160109,-8.993937,-6.657521,5.911435,-3.489381,7.358099,3.070120,5.953738,6.571120],[4.744985,-6.459038,-7.910013,-3.749020,-6.714020,4.355102,-3.878835,-8.462542,5.261088,3.086817],[-4.705242,-4.300200,-2.405063,-0.217762,-8.830446,-9.830654,-8.263253,4.542506,3.134893,-6.539610],[5.101155,-7.251359,9.290362,8.843605,5.153166,0.507878,-9.210922,7.025418,1.246903,-4.655313],[5.662899,0.542871,3.122648,-5.846994,-7.953937,-0.628785,3.348200,-8.880323,0.885424,7.424960],[-2.406308,-4.643541,4.311136,8.054881,-9.936957,-4.907352,-9.344237,7.867373,-8.768257,7.053914],[-8.289280,8.358206,-9.632039,-6.259485,1.689114,-2.873314,-8.354812,-4.444705,-4.248474,-9.524976],[9.372386,4.760372,-9.873741,5.138172,-3.513861,-0.135700,-9.281502,-3.605422,3.706095,3.074376],[8.648537,-7.263335,-1.449883,8.026068,7.216650,8.308894,-9.589050,-4.160288,-5.789368,-5.146257]],[[-6.441557,1.171108,-3.243221,8.405183,2.339959,-6.841201,-8.878798,-5.199955,2.307599,-0.930211],[-3.020500,3.024151,-7.584684,0.654430,1.837870,7.970566,-3.462958,-6.578014,2.501551,-6.027749],[-8.611256,4.922378,-1.911296,-6.953742,5.038615,-3.910232,-4.551477,-7.048589,6.261241,8.306588],[7.673880,7.924565,-0.006312,-7.912189,9.779357,-1.075600,6.983899,5.174051,5.855758,2.895134],[-7.062700,-9.713232,8.205382,0.533847,1.317372,6.603564,5.663469,-3.165036,3.921376,7.869286],[-5.835132,-0.684714,8.462021,4.313933,6.811178,2.338285,-5.586290,4.041865,1.542548,-9.341267],[0.412696,7.451272,-9.726257,-3.545867,5.481455,3.694207,9.108476,8.485042,3.683135,-6.782698],[-7.507413,-0.285912,7.421267,-3.063288,-6.902574,3.025724,3.848468,-4.943950,5.657563,4.233479],[9.929820,-7.850794,-5.448881,3.342353,-9.231363,8.406108,-6.219823,8.461692,7.066256,-7.138951],[-7.420179,8.169175,-8.893963,-2.762868,6.440626,-4.569489,-6.447251,1.306437,4.008344,-4.927898],[-4.039598,-8.987548,7.523127,7.878852,7.092222,-1.326270,8.770343,5.006852,9.088557,4.325896],[3.542763,6.774889,-7.210796,1.225101,-7.266114,3.933562,2.353316,3.442564,7.194438,3.766998],[-5.085312,4.580814,7.956392,6.221621,-5.512818,3.075581,4.924892,5.386454,-7.655341,7.833548],[-6.025970,0.535679,-3.493253,-3.385778,1.898244,-1.302748,7.436073,-3.542152,3.395925,1.261848]],[[-6.199652,7.491684,-5.764635,-9.495138,4.933540,6.850401,-8.402031,1.124048,2.442722,6.810052],[6.076260,-4.739521,5.492798,-2.543615,-9.790010,-3.973011,-2.868212,-4.719399,-0.571323,9.159609],[-7.354109,0.577867,-0.122487,8.202904,-6.198416,-6.630123,1.426060,-5.171631,4.648026,1.940223],[-6.142621,4.948494,5.064826,1.914232,-7.758327,-0.233110,2.589355,2.517353,-3.465325,3.953170],[6.026094,6.405469,-1.795846,5.354272,-6.957964,-7.894238,-1.055811,6.729343,3.154841,5.154010],[-0.750510,1.271657,4.402518,5.274754,8.707186,-4.056794,-3.535805,4.688270,2.012366,9.736089],[8.744310,2.646032,7.473265,-6.771079,9.846749,-6.544809,3.503262,-5.939776,-4.123074,-8.736771],[-4.087450,4.643124,-9.936560,-6.680619,9.133415,4.367576,9.787177,9.550798,-8.936273,0.944757],[7.201710,0.621491,2.759901,-3.610910,1.019065,-0.022000,9.012957,-1.882784,-5.369819,-5.869980],[-9.172968,3.246880,-4.112945,-2.025058,-1.443382,-7.210786,0.941044,-6.007935,9.656834,0.061610],[5.830328,3.426407,2.195056,9.530438,-0.028049,8.342429,9.300597,-1.865879,8.499222,-8.595170],[-4.698078,-1.973313,-7.265481,3.755191,6.264308,-1.781698,-3.621179,4.286643,-1.911705,2.300244],[-4.718761,6.691925,1.417144,8.883701,3.121587,-2.775684,0.537259,0.867743,4.158574,4.129351],[7.861379,-2.908779,8.826108,8.895562,-6.710004,-0.984651,-0.769608,-8.006947,4.022685,-2.836833]],[[-7.036660,8.845739,8.287277,4.466657,8.880088,7.915300,4.632840,-0.356710,-1.993076,-1.762306],[-9.108499,7.858766,-3.332324,9.383877,-1.774022,-9.531088,-3.863480,-4.906081,4.295734,9.778496],[-6.812271,7.363046,-6.081968,7.690240,-5.268868,7.136970,-7.529875,0.304674,-3.075683,0.227436],[-8.654262,6.552508,7.428985,8.557965,-0.254541,0.642383,2.803453,-2.204479,-0.103725,-8.082134],[9.398819,6.959863,8.021066,-0.015204,7.019330,-2.379422,-5.979799,4.687054,1.948699,-5.576694],[8.561127,-8.196160,-3.557104,-2.960233,-0.466599,8.617832,-0.635321,-4.176384,7.401278,3.386527],[-1.936205,6.851517,-7.444977,-0.716763,1.190764,4.375581,-7.600740,1.016180,-3.489654,6.288710],[7.254990,-2.574184,7.465077,2.835817,2.231318,-0.661156,-3.733242,-3.448373,-9.362964,-4.138005],[9.285199,-5.539298,9.740011,5.446901,9.419359,6.146088,9.864231,-6.487309,-3.830380,-1.584412],[-5.117456,4.186396,-3.720710,3.300269,-5.978963,-9.008804,6.901887,0.412823,-4.461259,-5.069797],[0.262865,-2.014196,3.038072,6.448074,-0.813848,-3.060901,-8.771731,7.376625,4.138102,5.705381],[-9.582228,-8.246612,-1.229593,4.146761,-1.080350,-0.842868,0.548288,-5.280762,8.804744,-1.096607],[9.000980,2.904758,-3.895131,-8.355269,6.893375,6.501938,1.651830,-6.571526,9.310795,3.023049],[9.761959,9.958891,-5.229816,-0.578994,5.519531,-2.436212,6.514872,2.415548,-0.640696,5.612222]],[[7.607443,-7.475771,-2.657696,5.858553,-6.189137,9.031877,-3.934291,-7.401545,1.205830,0.463490],[5.582421,7.400072,7.359842,-3.179096,3.823914,7.986334,-3.311610,2.810157,-8.341540,-2.238500],[9.698618,6.629059,-7.538646,7.803662,-5.504181,-9.608503,-5.828298,-6.252171,-8.089228,8.718089],[-3.959171,8.087439,-1.116769,-6.235241,8.058029,2.397132,-9.833187,-4.203488,-1.341211,-4.620957],[-5.961564,-8.055293,3.926351,-4.478971,8.078272,8.480985,7.572416,-4.691504,0.715420,-6.335781],[5.026444,-1.670670,-5.393738,-0.658557,-0.707934,9.192574,-1.028432,5.959738,-2.041475,1.677471],[1.651588,-9.419391,2.800450,7.776822,4.491773,5.656142,3.589962,-2.625839,2.366399,0.791895],[-9.994822,-8.054672,-5.827157,-5.147128,-0.358077,5.398915,-3.026710,-6.282774,-2.288975,-7.704537],[9.434895,4.161596,5.741063,6.294309,-3.715246,-9.021485,4.167588,8.771463,-4.539220,5.315841],[-6.145501,8.689907,-0.315412,-2.662201,9.134386,-5.513482,6.992899,9.826033,7.527629,6.569276],[2.098344,-1.480936,-5.377401,6.074852,7.386117,5.944206,1.034347,-2.631394,-2.703748,-2.577332],[-8.718046,4.593188,-5.697316,-8.430674,3.044088,-4.082422,-7.717338,3.608672,-9.053758,5.932076],[5.376693,4.415921,2.408364,-8.496376,2.941413,1.231685,8.766541,8.997206,-6.877171,-3.097698],[7.003829,-7.933221,1.593816,-9.882205,-1.717520,-8.086698,7.395446,-0.526015,3.374303,-3.873291]]], dtype = "float32")#candidate|6438|(11, 14, 10)|const|float32
uop_6439 = relay.erf(const_6438.astype('float32')) # shape=(11, 14, 10)
output = relay.Tuple([uop_6439,])
output2 = relay.Tuple([uop_6439,])
func_6445 = relay.Function([], output)
mod['func_6445'] = func_6445
mod = relay.transform.InferType()(mod)
mutated_mod['func_6445'] = func_6445
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6445_call = mutated_mod.get_global_var('func_6445')
call_6446 = func_6445_call()
output = call_6446
func_6447 = relay.Function([], output)
mutated_mod['func_6447'] = func_6447
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6445_call = mod.get_global_var('func_6445')
func_6447_call = mutated_mod.get_global_var('func_6447')
call_6479 = relay.TupleGetItem(func_6445_call(), 0)
call_6480 = relay.TupleGetItem(func_6447_call(), 0)
output = call_6479
output2 = call_6480
func_6492 = relay.Function([], output)
mod['func_6492'] = func_6492
mod = relay.transform.InferType()(mod)
mutated_mod['func_6492'] = func_6492
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6492_call = mutated_mod.get_global_var('func_6492')
call_6493 = func_6492_call()
output = call_6493
func_6494 = relay.Function([], output)
mutated_mod['func_6494'] = func_6494
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6492_call = mod.get_global_var('func_6492')
func_6494_call = mutated_mod.get_global_var('func_6494')
call_6525 = func_6492_call()
call_6526 = func_6492_call()
func_4158_call = mod.get_global_var('func_4158')
func_4162_call = mutated_mod.get_global_var('func_4162')
const_6528 = relay.const(-5.653513, dtype = "float32")#candidate|6528|()|const|float32
const_6529 = relay.const([4.246807,-7.012478,-6.587907,-4.663194,4.785955,-0.212269,8.161062,-7.431729,-6.058955,5.274863,-3.884610,4.729110,5.972245,6.223931,-2.414394,-2.262475,-2.736715,5.173123,-6.324137,-2.783928,3.545363,-0.543084,2.032456,2.043969,5.838343,-9.367141,-0.572368,9.911696,8.745000,-9.406658,-2.599465,2.698753,6.253946,-8.051353,-9.633725,-0.880603,1.794832,-7.326674,4.797276,-4.582474,-1.974286,-5.236638,1.666444,-6.277908,-8.937837,-0.937050,6.294325,-6.825911,-0.032002,0.568489,8.744402,6.125238,-3.543946,9.460919,1.030001,-3.508521,-2.609535,-2.859130,2.023461,-9.229920,-5.803240,-9.248857,-5.953690,-8.094831,9.972923,8.809766,5.165467,9.010705,-3.294969,-1.814029,8.685549,1.786225,8.503189,7.468074,0.961527,0.304580,-0.631300,0.592841,-6.749904,9.053969,0.435431,-2.049071,5.566987,2.381742,-3.455273,8.391449,-2.253731,1.263431,1.602297,-7.946813,-3.136115,-2.282026,-3.215180,2.164790,3.749790,-8.325037,3.749409,-9.601470,6.985368,-6.859553,5.898261,4.230311,-4.345374,5.464703,3.770950,-0.414678,3.881379,-4.197192,3.040735,-9.737928,-4.714972,9.930881,9.805500,5.813632,2.751479,-7.051000,4.041845,0.257778,-8.648943,6.928675,-7.091160,2.382945,-4.504924,3.578043,7.109961,9.090058,2.857117,7.898885,-7.712268,9.155877,-6.978162,-3.774494,6.190322,-4.834143,-7.218351,6.581689,3.088882,0.436756,-9.106975,8.457908,-5.035224,8.173494,-1.857547,0.303919,5.127296,-5.024202,-1.341734,-6.463506,-7.781336,-8.579758,-0.355208,-5.428354,-9.147629,-9.359244,-7.734205,7.793491,-4.167208,-1.733803,2.418808,8.305769,-7.249984,2.188408,-3.793154,-7.280885,-4.669729,6.013194,-3.250970,-6.706185,2.050527,7.547415,6.929205,1.965436,-6.830812,-4.732746,2.911191,-0.073227,6.959573,-5.590202,6.229609,2.707349,2.047341,5.856302,-2.002857,1.889378,-9.144547,3.972884,0.690322,7.072895,6.420915,4.838263,5.154859,-2.219369,7.603378,-7.826192,-2.183811,-8.842004,-0.262335,4.171709,-8.700644,3.540572,-3.191594,-1.062704,9.298322,1.041206,6.780623,5.215557,-0.551303,7.820947,-3.100708,2.839499,3.915161,9.985202,2.823090,-6.889647,8.551369,-3.108038,6.758579,2.128748,-8.827677,2.630492,8.974702,-1.093046,-3.294663,-0.531125,8.399606,1.056074,5.890626,-1.559974,-4.228684,-3.714928,-1.255777,8.813177,5.246772,-5.285573,4.382598,3.199967,-2.203837,-9.648664,-7.221243,-2.128745,-2.885039,-3.772842,-6.161729,-3.420910,-5.778668,-2.864077,8.862858,-9.462903,-9.458774,-0.688010,-0.732857,-6.974369,0.289714,7.181782,7.087121,9.622259,-5.209876,-4.475579,4.882510,3.687119,4.093020,-4.305130,5.594580,-1.563446,-1.518021,4.571467,-5.122039,8.621671,-6.206200,2.143694,-1.194991,-2.985790,6.261952,6.203640,4.576071,-8.321530,-0.824440,-1.445380,8.754785,6.119289,2.633527,-6.321180,5.341523,-5.581370,-4.790532,9.672795,-1.270941,4.327029,-0.402812,-3.814192,5.662017,9.167521,-4.751740,1.466099,-5.756881,3.200668,6.434997,4.139785,3.737275,0.912257,-3.211578,2.070857,-3.576185,-9.579505,5.207202,-4.195225,7.029181,4.452425,5.475052,9.616792,8.560994,-0.664615,-3.204725,4.159343,4.241602,6.375462,-1.122025,-0.028932,-2.781744,4.064497,-2.029936,-0.786831,4.977685,4.496939,7.295011,-9.877088,1.444060,7.289789,9.062672,7.160007,3.958662,-2.781882,0.470932,-4.122468,0.326148,-9.725161,-9.469658,7.274940,-8.440005,-6.768144,4.422305,-5.730509,2.730450,-0.337170,1.157712,7.724311,-8.798812,-8.068745,8.858041,6.934596,-8.395318,-3.660872,4.201290,5.240665,-8.992856,3.208732,-1.096013,-6.130364,7.062577,-0.298401,-0.606461,-9.740769,8.179615,6.352226,9.576097,2.230059,-9.497792,-3.300835,7.758592,0.478954,-1.374794,9.275371,-6.702878,-7.450502,-5.726035,-0.004966,7.833235,-8.670780,1.230548,7.417545,-2.125618,3.938838,-8.129736,-9.556194,0.780483,4.829423,-0.855693,-7.896410,-7.203577,9.930756,-9.811285,1.687347,-6.388864,-1.607441,6.910557,-8.546557,1.157212,-8.378753,-1.842270,1.643836,-4.392849,1.740906,-7.594655,-6.565956,-7.617093,5.691876,9.867085,-9.649998,-6.097005,-3.713220,-7.408372,-8.165687,-1.401483,4.977555,1.849615,-5.300454,9.031831,2.166918,3.869893,-2.313744,9.732956,-2.589609,6.778432,-8.078583,-8.023413,0.075149,7.841874,-5.348173,0.523394,-4.197258,-4.130085,-4.472350,-2.842514,5.657796,6.512990,-9.661279,-0.438204,-6.314917,8.318498,8.038447,6.158143,4.645214,-1.300473,-9.692541,5.906006,2.133024,3.447315,-6.957355,2.579851,2.278196,8.691588,5.765924,1.307541,5.564186,-4.922718,-5.790355,-9.039062,-8.688257,6.391856,-9.139379,-3.411083,-8.441914,2.453238,0.947533,4.297412,-5.731610,-4.418624,-7.485858,5.069420,1.208193,-0.979686,2.954799,1.303125,-1.169906,-2.762886,7.627076,-5.099217,-6.492733,-4.929712,-3.787629,-8.820476,0.150616,-8.654149,-7.049886,8.454576,1.525308,4.490115,-0.492603,-3.906913,4.971891,1.197216,6.718695,0.812940,-6.870841,-6.208858,9.650230,3.484042,3.650607,-1.388431,1.291127,1.342263,5.649950,5.717121,8.452279,-8.651807,-6.723273,-5.044417,3.865610,2.881214,4.117254,-2.638264,-8.588455,4.746733,8.033632,-5.327907,-0.056302,0.717909,-9.091477,1.054667,7.580942,2.729932,-7.174199,8.245117,2.447445,5.233956,-8.806718,8.864561,5.135899,7.597225,-2.766902,2.959709,1.362666,-5.977876,6.172117,-0.488065,-4.503316,-3.740358,0.606812,-0.596331,-1.264731,0.868244,-9.304919,3.639382,-2.562951,-2.167647,-5.118455,2.428746,9.045070,-4.188217,3.843850,6.358148,-7.643392,-4.909979,7.693183,-4.614297,-9.064439,9.115686,-9.095955,-6.638801,6.047908,4.744771,-7.122603,7.298858,-5.864792,-6.807492,-9.471220,9.584616,0.872847,-4.622828,9.089553,-8.499987,7.278716,-3.845031,1.683241,-0.115376,0.743693,-5.951489,-2.881863,4.782466,7.988678,-6.567832,2.049775,-1.231401,-0.123474,-7.115881,1.782636,1.591866,-2.970414,-3.141204,2.116780,-8.256126,-0.105455,-3.629912,-4.538581,-1.841798,-2.141246,-9.932933,-9.808284,-4.612386,1.848236,-8.928767,-7.706299,5.236244,6.488871,-3.652924,-8.047999,-5.204623,0.090182,5.818439,-5.704088,-5.932851,4.484103,0.499422,3.066862,-0.983675,-5.530349,-8.706436,-4.048944,6.023760,8.029728,-6.878199,-6.356924,2.404561,-1.051823,5.607666,-5.306510,7.803694,-9.622713,4.632881,-4.362132,7.768069,0.383197,7.226428,9.232019,4.410645,-9.276813,3.584450,-5.192047,0.501873,8.049468,-1.335472,-7.191598,3.492513,-3.160149,-2.548598,-5.875858,1.271341,8.779480,-4.726214,3.563008,-4.099371,3.465529,-3.104908,-4.651178,-1.313007,-9.949283,9.607191,-9.341864,-5.557889,2.411750,-8.402599,-7.859545,8.622796,-2.476394,-8.161367,-6.577599,-4.478895,-2.484556,3.308328,-9.051276,0.999068,-0.823481,3.398757,3.350521,6.400367,-9.992260,3.639775,0.187557,9.654243,-8.430548,1.478907,-5.261246,-4.756808,-8.780214,3.408475,-2.880932,-8.254514,6.597354,6.030920,4.772092,1.783020,-5.893920,-3.778765,-6.568265,-9.874484,0.571141,2.885590,9.012707,0.174182,8.472325,-5.901526,2.626354,3.661213,-7.598784,0.713507,0.593353,9.501760,4.278424,-0.460944,5.558819,-1.286256,-3.768528,-0.256509,-2.810023,-9.212678,-7.507299,4.305973,5.430275,-8.692770,7.179179,1.313568,6.016868,8.582246,-0.990408,-1.125292,-9.870368,-5.674055,-5.555783,-9.094748,-2.370717,-6.776876,3.120817,-3.402138,-5.303584,-4.331444,5.955280,3.530472,-5.353497,0.031938,-3.933695,1.645215,4.732616,7.140163,-6.216375,-1.215839,-1.055436,-7.236967,-9.509592,-2.146086,8.848303,-1.171733,-2.945291,9.039099,-4.306242,6.985317,-0.207943,2.250609,3.244803,6.732519,-7.433494,-5.014776,4.913008,-6.814121,-4.422101,-4.663932,1.056584,-8.016176,-6.689258,5.185543,-7.444149,7.888947,6.506462,-8.984206,-1.095308,-3.723545,1.123711,9.542776,2.570533,-9.440076,4.281299,-0.557416,-4.610826,-1.178523,-7.891240,8.820832,1.243043,-0.765357,-0.901239,5.934180,-3.652282,2.509525,-0.887257,-4.396478,3.999343,6.910319,-9.090347,6.216877,-5.961231,0.170439,3.130536,-0.602669,-4.745896,3.713339,6.525184,5.756569,8.648155,-3.579504,1.090504,8.286923,8.947528,6.606216,-9.993071,-1.272016,9.782451,-6.575727,3.422335,1.193906,4.369784,-6.095512,7.973002,-1.647083,-8.469364,-8.251269,-2.374055,-7.095882,8.850359,6.639389,0.287420,-8.363690,9.681125,5.021435,3.433340,-8.601728,-0.690934,-8.149896,-7.606183,-1.008574,8.553270,5.515547,-0.378002,1.624391,2.943433,-4.346168,4.230642,8.948209,4.165124,9.736941,7.157072,3.369904,-6.153197,4.432756,-9.599797,8.690897,6.905688,6.023117,5.853893,9.965119,8.426974,1.796296,-9.584433,-8.615000,1.013396,3.945929,4.716945,-3.793807,-0.340045,4.505377,7.525160,-3.666048,1.121877,3.757583,-0.558291,5.368950,-3.897226,-5.033958,-5.080295,-2.279457,-5.135108,-3.268219,-0.425529,6.390167,5.848299,7.545862,-0.262538,2.818809,-4.160853,-1.249603,2.460761,-0.247662,-4.641528,-4.139162,5.204916,-5.440441,-6.256635,-7.532507,-7.582185,0.209639,-8.917095,-4.765657,-5.632061,-8.554944,-2.162022,-5.252162,-5.515408,6.974496,2.226955,4.076039,-0.756793,1.031229,8.881299,9.896917,2.374526,2.756122,-4.451278,-3.655376,5.052828,5.589451,3.480751,6.700733,-1.326966,-8.807603,-5.120167,8.786447,-4.693687,-1.309391,-6.672989,5.548369,-6.858217,0.157828,-8.192368,-1.042356,-5.132664,-9.979129,4.113446,1.944884,-0.243296,3.098789,-3.033879,-4.101679,9.609800,-7.169690,-6.812892,-0.955422,-0.633935,5.112540,5.165811,-7.101430,4.536536,-6.331173,-8.679569,4.764674,0.076261,9.587679,3.998627,-7.284733,-5.846612,-0.550802,-6.604507,-0.204584,-4.756804,-1.756921,5.132395,8.049737,8.623528,6.701128,7.273113,-3.625161,1.716756,-3.558555,6.225971,-0.404780,2.340588,0.186073,1.288916,-4.247555,3.672162,4.188366,6.471378,-5.931855,-3.702588,-5.746332,-8.856771,9.051406,3.053909,-4.884914,-8.129318,-4.366121,4.464631,-9.572740,4.055893,-3.453720,0.340674,7.273857,-4.587390,6.737360,2.998992,-2.986516,-6.065853,-5.132094,-7.811229,9.749128,5.383909,-5.136810,4.154959,7.059217,-4.108032,7.048019,7.802049,-5.616726,-8.347341,3.540970,-8.497917,9.075597,8.263588,-9.016389,-9.143857,-9.354812,3.638375,-3.097443,4.048652,-3.547837,7.248478,2.834198,-6.048607,-0.088696,0.860288,4.343800,-4.658491,0.435508,-7.950373,6.609186,8.263502,-1.557379,-8.811468,3.451787,-7.807666,2.968794,3.654081,-2.962508,8.830697,2.027229,-6.553009,-6.245255,4.268788,-5.327013,3.996673,9.370210,-9.699840,1.510466,-7.713721,-1.138123,-8.369341,2.463685,8.807640,-8.368091,-1.961991,4.590816,-8.992195,5.875307,7.946437,8.291244,4.416214,9.435091,-5.577025,3.117591,4.841702,1.751599,6.750828,-4.423539,-4.977670,6.610442,-1.311496,-1.209130,-8.642752,-7.245893,5.597156,-4.083622,-0.823272,-6.098511,6.499765,-7.654112,-5.097761,-9.304680,-0.075080,-8.508547,1.436001,5.453585,-3.888726,-2.450066,-0.010212,9.164752,-1.949343,-8.856199,2.485082,7.762823,-1.160663,-2.866149,1.863076,8.080168,1.890234,8.475559,3.364824,-8.969441,-8.419977,6.574702,2.804499,-8.142693,-7.927553,0.961836,-5.801637,-9.563397,-3.585923,9.668808,-9.789938,9.579240,-6.342890,-7.686174,5.660110,5.429510,-4.509728,-0.278677,6.771160,3.825569,-5.363430,-4.376023,-0.888609,6.365649,5.380019,-3.295026,2.177538,3.352858,-3.033386,-7.581339,-9.344862,2.980783,-4.841540,-2.401349,8.199099,3.382023,-5.097748,-6.054296,1.973389,9.554293,-4.809228,-1.627319,6.233757,5.015037,5.738315,-5.045696,0.077485,-4.444601,8.961350,-9.256056,3.329128,-3.239185,9.813248,-0.880074,6.211605,6.713028,0.891522,9.435990,1.103412,6.410465,-9.735934,-6.283243,6.285025,2.708420,8.503919,7.327840,-7.358868,0.244083,-2.808850,-0.639531,5.842956,9.506474,4.795987,-9.759162,3.615869,5.067847,6.262263,-9.406657,9.833619,0.578486,2.741272,4.861384,6.924326,7.330261,-4.344884,4.136280,1.159455,-4.541716,4.281370,0.460348,-0.008195,0.992474,-0.653769,4.409810,1.083217,-9.095565,3.002968,-5.410276,-8.833986,8.885335,7.453743,2.357321,4.008056,9.357148,-3.750982,-2.369744,-4.616978,-4.338546,6.343035,-5.100261,-7.338433,3.821096,-2.448578,-7.829760,2.043761,3.473774,-8.751725,4.363802,-0.314246,5.319298,0.800233,-8.572593,2.604401,-3.903294,-6.470853,7.624175,3.904872,-6.671445,2.103511,0.307477,-0.003111,0.197113,2.713689,1.819452,-8.702196,-3.289413,-6.357403,3.021027,7.297538,-4.507519,-7.236524,-3.256360,-7.546345,8.150335,-4.045676,-4.226186,2.052942,8.495475,-5.708871,-6.601399,5.421897,-2.575110,0.279472,0.213871,8.976712,-0.288168,-2.870361,2.140106,-9.052390,-8.146267,9.465054,3.609786,-2.597676,8.077050,2.929020,1.024490,-5.374936,-9.354826,0.044643,-4.137066,9.620140,-6.598758,-7.501648,-7.534521,-7.272395,1.269605,7.807996,-2.112714,9.275390,-2.068539,-8.939777,-8.959074,0.207740,-4.157520,-0.012121,4.828046,-6.370964,5.702055,-2.063027,1.282738,-7.002535,-2.175614,0.238154,-6.369740,5.390117,-7.867161,-2.826752,-7.858792,4.509840,9.623532,-2.929057,-6.647017,-0.445406,1.506296,1.552673,-8.462618,3.782567,-4.106590,0.871629,4.013131,4.469374,-6.864083,-9.331939,-8.575851,-5.219157,-5.870399,-7.104233,4.159432,-4.362199,9.265403,5.035869,-0.491581,7.504630,9.646085,2.584952,7.202996,-6.614757,-0.183403,-4.059674,8.916911,-6.192739,8.090811,-0.273347,-9.695223,1.093507,-7.506815,7.204355,6.130509,7.470125,8.894414,-3.924428,-1.011375,2.917815,5.745846,2.881723,-1.467041,-0.530658,-3.939311,-5.003501,-7.305769,0.220472,-8.047226,0.304661,6.122573,-3.320656,5.844954,8.354734,-1.325250,-0.043665,-5.443312,-0.912308,-6.260944,8.669990,3.200955,9.141825,7.979962,-8.380216,4.783272,-5.406203,1.391526,5.713297,6.858045,-5.432847,9.104611,6.479849,-3.296614,-1.206857,4.100149,8.994744,2.235515,-0.050479,1.380104,-2.306661,-4.220145,6.543975,-5.855247,-3.523054,6.085359,5.703020,7.479541,8.447840,-4.322976,-1.337378,3.786248,-3.975826,-0.347166,2.978616,5.215347,-4.189439,-0.274902,1.889035,4.777425,-4.134132,-1.136029,0.905864,3.928490,9.905027,4.269419,3.317885,-1.203214,6.926468,-0.621003,-6.380293,8.526927,8.052740,6.596047,-1.320010,-0.456255,1.873012,-1.252463,-7.268214,8.741536,6.739642,-8.855133,9.978081,-1.088583,3.402883,-3.709384,-2.747967,8.427362,1.802182,2.641033,3.343665,9.268990,-9.741104,4.332575,7.635207,3.341141,8.119001,1.914642,-1.545270,-9.991300,-1.767249,5.354754,-5.839970,-5.199636,2.341011,9.152875,0.071541,-5.908733,-2.491527,-0.038813,-1.630131,-6.352195,7.634196,8.919396,1.619157,-8.159621,-3.798381,-2.635587,-3.737268,-4.525008,-1.038391,-7.825849,-7.494259,-5.910003,-9.958424,-7.514353,-4.528525,2.607971,-7.940720,9.319394,-3.500184,2.919517,9.230104,6.540515,-7.489529,-5.805077,5.498674,-3.249153,9.648667,-4.601230,-2.192424,-8.874152,1.136850,-1.813532,-8.498126,5.564887,7.208841,8.662810,-9.190368,-1.940440,4.845987,-3.615498,0.857474,-1.447206,7.394900,8.666589,-9.726400,-9.961040,5.692235,9.629956,-4.090846,-5.979918,-9.019681,-2.635050,-2.460931,8.952455,4.307047,-0.623242,1.614055,5.632412,1.262714,-6.390818,7.344844,1.036685,6.558939,-1.865129,0.391263,-8.183176,5.110837,-8.804426,9.081519,1.251777,9.549965,-0.650934,-7.366849,7.749684,-6.234035,6.297107,-2.246147,-8.205448,-7.620601,4.741088,7.560686,5.614423,0.930168,-6.574568,0.862802,9.847031,8.674721,5.818787,-0.772011,0.693486,-9.985516,-6.385677,0.853381,6.263255,4.151601,5.120831,-4.259805,9.509008,-2.079247,-5.595926,4.743089,5.740072,4.768624,6.694422,7.037872,-5.915514,0.702883,4.640643,6.729298,-3.753307,1.945982,4.562018,-9.193231,3.100190,-2.003227,5.098821,-2.002603,-8.993402,7.365834,6.179930,-1.955581,0.566193,-1.119438,-9.476525,7.048087,-2.466871,-1.105137,-0.239977,8.289862,-6.725995,8.573825,7.867572,-9.491556,-3.865972,6.068077,-7.795175,3.068742,-1.958654,-6.840660,-0.376514,8.824986,5.799132,-6.244189,8.632441,6.392524,-3.634461,1.753748,-2.338671,3.291793,5.487996,-2.571661,4.535573,1.641756,4.238710,-5.289796,8.862213,3.146191,-4.562032,-3.498708,8.714383,3.586908,2.837469,3.900718,-7.213475,-2.363847,-5.595731,9.679598,-5.781314,6.700600,2.641146,5.374026,3.903334,7.894142,4.835816,5.381015,7.566035,-6.836455,3.912212,5.026856,-5.675739,-2.805466,-4.067078,-1.202852,-9.524220,2.916373,-5.385786,1.669503,5.124296,3.442712,-4.556390,9.036146,6.846794,-3.638338,8.858737,-4.255111,2.351965,-6.245170,-0.911056,1.918397,-3.626174,-1.240655,3.658950,9.555919,-4.386406,8.199831,1.048739,8.498084,-3.819105,-1.298421,9.403438,-8.807811,2.625659,-6.609603,8.674789,-9.999705,-2.563450,-4.286974,-2.893804,-5.202409,-5.823670,-8.861852,-6.655650,-6.142954,3.307445,4.151906,5.432091,-6.186517,-1.921463,4.944405,-9.255743,-8.075107,-0.408905,-1.032271,-2.474764,-0.903534,8.490874,-8.094939,-1.861440,-0.547589,0.982505,-4.601065,9.025510,1.721376,1.711448,-2.008268,1.643018,8.775774,5.733925,-9.512033,-5.558131,5.090917,7.559258,-8.412232,-3.175490,-2.014374,-1.317952,9.720592,9.080879,1.755835,0.938670,-8.356219,-1.280909,-2.021160,8.545730,3.262749,6.902611,4.473982,4.336658,-8.095623,8.969599,3.638278,3.014725,4.257343,-3.855259,-0.062833,-3.210160,-0.488314,-6.324706,8.099526,9.402748,1.167830,7.732527,-3.663692,-6.512210,-5.841042,5.020826,3.585126,-7.027678,9.922926,-0.928292,-6.679445,-6.710785,5.317759,-6.537181,-8.300328,-4.221820,-3.397187,0.889069,-2.666350,-4.225238,7.406836,-9.684786,-5.743115,2.240227,5.197842,7.279097,4.208026,-4.237014,-3.072991,2.251224,6.407108,8.611898,2.147548,-2.012868,-7.349526,-0.673338,-2.299307,2.859917,-6.002464,-5.625945,-6.448190,9.006548,6.066546,-1.528787,-2.909978,-6.412235,4.912475,-6.696597,-5.050039,-8.066783,0.308607,-3.950033,-6.113241,-3.408054,0.838754,-2.713086,3.974573,1.393415,-2.818592,-4.222819,9.867469,-3.493954,-5.763434,4.903569,9.957280,-2.669911,-7.081670,-4.367038,-4.699758,1.278620,9.679869,3.037652,-7.606583,7.671775,-4.992407,1.067723,-2.857476,7.974561,-1.310680,-5.399352,-6.228973,-8.150505,4.773076,7.255622,-6.478171,7.949738,1.272763,-3.332150,9.638603,-2.325867,0.774453,1.144132,8.137167,2.157638,9.704186,0.434617,-4.744294,8.174966,-3.132874,8.337136,3.261283,-8.989816,8.240873,-5.324860,-5.064586,-7.180900,7.731680,3.501378,-1.117987,-7.395465,-3.380321,-1.766438,-2.741272,9.131342,-8.846333,7.646440,8.785815,-9.690351,-9.827794,-6.702776,3.895329,-6.353142,-1.713966,6.384586,-9.756147,9.198330,0.650858,4.077185,2.820756,-9.802493,8.111411,4.039532,2.482375,3.009525,3.003760,-7.433320,7.509175,4.368487,8.610645,-7.974148,-1.952827,-1.161179,8.221853,5.542430,-4.390632,9.547187,0.139240,0.696434,-7.067293,-5.283810,-5.282755,8.611152,-9.297113,4.172552,4.109581,0.136384,4.107883,-4.609138,-0.063533,2.739161,2.207960,-8.253821,-2.038402,-3.643501,4.325885,-3.634771,7.099415,3.683970,-8.766503,1.524003,-7.936622,7.504653,1.906470,1.214460,-5.203268,-6.896060,7.005459,-4.817084,-1.282741,-2.949872,-1.195496,0.898865,-0.097524], dtype = "float32")#candidate|6529|(1920,)|const|float32
call_6527 = relay.TupleGetItem(func_4158_call(relay.reshape(const_6528.astype('float32'), []), relay.reshape(const_6529.astype('float32'), [15, 8, 16]), ), 0)
call_6530 = relay.TupleGetItem(func_4162_call(relay.reshape(const_6528.astype('float32'), []), relay.reshape(const_6529.astype('float32'), [15, 8, 16]), ), 0)
output = relay.Tuple([call_6525,call_6527,const_6528,const_6529,])
output2 = relay.Tuple([call_6526,call_6530,const_6528,const_6529,])
func_6532 = relay.Function([], output)
mod['func_6532'] = func_6532
mod = relay.transform.InferType()(mod)
output = func_6532()
func_6533 = relay.Function([], output)
mutated_mod['func_6533'] = func_6533
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6445_call = mod.get_global_var('func_6445')
func_6447_call = mutated_mod.get_global_var('func_6447')
call_6575 = relay.TupleGetItem(func_6445_call(), 0)
call_6576 = relay.TupleGetItem(func_6447_call(), 0)
func_4458_call = mod.get_global_var('func_4458')
func_4461_call = mutated_mod.get_global_var('func_4461')
var_6596 = relay.var("var_6596", dtype = "bool", shape = (2112,))#candidate|6596|(2112,)|var|bool
call_6595 = relay.TupleGetItem(func_4458_call(relay.reshape(var_6596.astype('bool'), [16, 11, 12]), relay.reshape(var_6596.astype('bool'), [16, 11, 12]), ), 4)
call_6597 = relay.TupleGetItem(func_4461_call(relay.reshape(var_6596.astype('bool'), [16, 11, 12]), relay.reshape(var_6596.astype('bool'), [16, 11, 12]), ), 4)
output = relay.Tuple([call_6575,call_6595,var_6596,])
output2 = relay.Tuple([call_6576,call_6597,var_6596,])
func_6606 = relay.Function([var_6596,], output)
mod['func_6606'] = func_6606
mod = relay.transform.InferType()(mod)
mutated_mod['func_6606'] = func_6606
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6607 = relay.var("var_6607", dtype = "bool", shape = (2112,))#candidate|6607|(2112,)|var|bool
func_6606_call = mutated_mod.get_global_var('func_6606')
call_6608 = func_6606_call(var_6607)
output = call_6608
func_6609 = relay.Function([var_6607], output)
mutated_mod['func_6609'] = func_6609
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6445_call = mod.get_global_var('func_6445')
func_6447_call = mutated_mod.get_global_var('func_6447')
call_6690 = relay.TupleGetItem(func_6445_call(), 0)
call_6691 = relay.TupleGetItem(func_6447_call(), 0)
func_5643_call = mod.get_global_var('func_5643')
func_5646_call = mutated_mod.get_global_var('func_5646')
const_6695 = relay.const(-4, dtype = "uint16")#candidate|6695|()|const|uint16
const_6696 = relay.const([[-9],[4],[-10],[-4],[8],[-8],[2],[4],[-4],[-4],[-7],[-4],[-8],[5],[8],[9],[-2],[5],[-8],[6],[-2],[10],[-6],[2],[1],[10],[10],[-8],[6],[-6],[-5],[-4],[-8],[9],[-9],[1],[9],[-5],[-6],[-6],[5],[-7],[-1],[3],[8],[-6],[6],[10],[-8],[-1],[-5],[-10],[6],[1],[2],[-10],[-5],[-4],[-2],[6],[8],[-3],[-1],[-8],[3],[9],[4],[2],[5],[-3],[-3],[6],[10],[4],[4],[-1],[3],[7],[-6],[-4],[8],[5],[-3],[3],[2],[-4],[1],[-1],[-7],[2],[-7],[6],[-5],[-4],[1],[10],[-3],[1],[-3],[3],[2],[-10],[-5],[-3],[-8],[-6],[10],[-4],[6],[-7],[-10],[-6],[3],[-1],[4],[6],[1],[-9],[9],[-1],[-1],[-3],[-8],[5],[9],[-10],[-1],[3],[6],[2],[8],[-5],[6],[-5],[8],[-3],[10],[7],[4],[-3],[5],[1],[-2],[10],[8],[7],[2],[3],[6],[2],[-4],[10],[-2],[4],[-10],[-9],[2],[1],[-6],[-5],[4],[8],[-4],[3],[-1],[-1],[-1],[-8],[9],[-1],[1],[-3],[1],[9],[2],[-2],[6],[4],[3],[9],[4],[10],[2],[-10],[-10],[-9],[10],[5],[4],[9],[-8],[6],[-2],[-3],[8],[10],[3],[-7],[8],[5],[6],[-10],[-7],[-10],[-9],[-9],[-1],[-2],[-5],[-8],[8],[-3],[8],[5],[7],[5],[-7],[2],[7],[5],[2],[-4],[10],[5],[-2],[8],[-9],[-10],[-3],[2],[-6],[-3],[-1],[5],[10],[6],[5],[-6],[6],[10],[-2],[-8],[1],[9],[-3],[-2],[-9],[2],[-4],[10],[6],[-8],[7],[-7],[3],[1],[-8],[-8],[6],[-3],[-10],[8],[1],[-1],[-6],[1],[-6],[4],[-2],[6],[-10],[3],[-7],[7],[2],[-2],[4],[-4],[-1],[-2],[-4],[8],[3],[-5],[5],[-10],[-8],[1],[8],[9],[-7],[-2],[3],[7],[-1],[-1],[-3],[6],[3],[3],[-3],[-2],[-8],[8],[-10],[-5],[10],[-9],[-3],[8],[-5],[-8],[-2],[-8],[-6],[-4],[6],[1],[7],[-1],[6],[8],[-1],[-2],[-1],[-6],[-1],[-9],[-9],[-7],[-8],[5],[5],[9],[5],[2],[3],[-1],[5],[1],[-2],[-6],[-3],[6],[-2],[8],[-6],[-3],[9],[4],[1],[7],[-6],[-10],[-10],[10],[-10],[-6],[9],[-7],[-9],[-2],[-10],[-5],[-6],[-4],[6],[3],[-10],[4],[-4],[5],[-9],[8],[-5],[1],[-2],[8],[-8],[10],[1],[-3],[5],[-9],[-8],[6],[-9],[7],[4],[-8],[-2],[4],[3],[-7],[-4],[-7],[3],[1],[7],[-5],[-5],[9],[4],[2],[3],[8],[10],[-3],[-3],[-6],[-7],[3],[4],[-8],[-6],[-5],[5],[-6],[2],[-8],[9],[-2],[7],[4],[6],[-8],[-2],[3],[-3],[-4],[-7],[1],[-5],[-3],[-5],[3],[9],[5],[-3],[-6],[8],[1],[3],[3],[-8],[-6],[-9],[7],[5],[2],[2],[-6],[-3],[5],[-9],[-4],[-4],[-6],[-1],[-4],[7],[2],[-10],[10],[10],[5],[-9],[3],[1],[9],[-10],[8],[10],[-3],[-4],[-9],[-1],[-7],[-1],[-6],[10],[3],[2],[3],[-3],[-7],[7],[-6],[-1],[7],[-8],[-6],[-9],[-9],[1],[1],[7],[-1],[1],[4],[8],[6],[-9],[2],[3],[-5],[6],[-9],[-6],[7],[-4],[-7],[4],[9],[5],[9],[7],[9],[-8],[-5],[-10],[2],[-4],[3],[1],[-5],[10],[-5],[-3],[-10],[-2],[-2],[-4],[4],[-3],[1],[-3],[-3],[5],[-7],[8],[1],[-8],[-10],[3],[-9],[-9],[-3],[-5],[-5],[7],[-4],[-10],[-7],[5],[-1],[-10],[10],[-9],[8],[2],[-6],[-10],[6],[-5],[4],[8],[2],[8],[-2],[5],[-5],[6],[-2],[-6],[8],[10],[1],[-2],[-5],[-7],[-8],[-10],[-2],[10],[-1],[-9],[-10],[2],[1],[-2],[7],[2],[2],[-6],[-10],[-8],[7],[-9],[-6],[5],[5],[-4],[1],[5],[-5],[1],[-9],[-10],[7],[-7],[-1],[3],[3],[-9],[2],[4],[9],[2],[-3],[4],[-4],[-10],[7],[3],[7],[9],[7],[6],[-6],[6],[-10],[-7],[10],[3],[-6],[1],[-1],[4],[-10],[4],[-9],[5],[-6],[5],[-7],[-4],[-3],[10],[-10],[-9],[9],[6],[-1],[-9],[-9],[10],[5],[3],[8],[7],[-1],[6],[2],[9],[8],[-8],[-8],[-6],[7],[1],[6],[6],[-7],[-7],[9],[4],[-5],[-3],[-4],[-10],[-2],[9],[3],[8],[9],[-7],[-1],[10],[-4],[-4],[-1],[2],[-7],[-4],[9],[5],[-4],[-1],[2],[-8],[9],[7],[8],[7],[-2],[-4],[9],[8],[1],[1],[10],[1],[-2],[3],[-2],[-4],[6],[-10],[-9],[-6],[-9],[-4],[6],[-6],[-8],[7],[3],[-1],[2],[9],[-5],[-6],[4],[-7],[4],[4],[4],[4],[3],[-5],[5],[10],[1],[10],[-5],[9],[2],[1],[3],[9],[-1],[-3],[-2],[-5],[4],[-6],[3],[4],[-7],[-9],[-5],[-4],[-4],[-3],[5],[4],[-4],[1],[3],[10],[7],[6],[-2],[-5],[-7],[1],[5],[-1],[2],[-5],[7],[-3],[6],[8],[1],[7],[-4],[9],[3],[4],[10],[-4],[-3],[-3],[-2],[-2],[-8],[1],[-8],[-5],[6],[8],[-3],[3],[4],[-8],[3],[1],[-8],[10],[5],[-10],[-6],[8],[1],[-6],[3],[7],[2],[-4],[9],[1],[3],[-9],[8],[-2],[3],[7],[6],[-5],[9],[5],[5],[10],[6],[-4],[-5],[9],[8],[-8],[9],[-9],[-5],[-2],[-2],[-9],[6],[4],[10],[7],[-9],[8],[-7],[-1],[-5],[3],[-10],[-6],[1],[-7],[3],[-5],[-2],[10],[-7],[5],[-9],[10],[-2],[-3],[10],[2],[-8],[-7],[6],[-3],[10],[10],[9],[1],[7],[1],[-10],[2],[-2],[10],[-10],[-3],[1],[-1],[-2],[6],[4],[-3],[5],[8],[1],[-8],[2],[5],[-8],[7],[-7],[8],[8],[3],[-4],[1],[6],[-1],[-7],[5],[-10],[-1],[4],[8],[10],[9],[6],[3],[9],[-6],[-8],[2],[-3],[5],[4],[10],[-2],[10],[-6],[9],[4],[1],[-9],[5],[-2],[-4],[-10],[-4],[-9],[-2],[8],[1],[-2],[9],[9],[-2],[-10],[-4],[9],[9],[-2],[4],[7],[-6],[-9],[-3],[2],[-9],[3],[2],[8],[5],[-9],[6],[-10],[-3],[-8],[-8],[-5],[3],[-5],[-10],[-10],[-1],[9],[-5],[9],[6],[10],[-8],[-9],[-7],[-8],[-3],[-9],[4],[3],[-9],[3],[6],[-3],[-8],[2],[2],[7],[4],[-1],[-2],[4],[-1],[-2],[-7],[8],[-9],[-5],[-2],[7],[-3],[-5],[-1],[-7],[8],[-6],[6],[-8],[4],[-1],[-6],[-6],[10],[2],[-2],[-4],[-8],[-9],[1],[5],[-3],[-2],[4],[-7],[9],[-9],[9],[-1],[-7],[-2],[4],[3],[5],[4],[-8],[-7],[-2],[2],[-8],[-4],[9],[3],[-1],[8],[9],[-8],[-4],[-6],[2],[6],[9],[-3],[-2],[-6],[-7],[9],[-8],[-5],[-7],[8],[1],[-9],[-4],[5],[-3],[10],[-4],[-4],[9],[7],[2],[2],[-8],[-8],[10],[-3],[9],[-5],[6],[-3],[-10],[-2],[5],[1],[4],[9],[-5],[6],[10],[2],[-8],[-10],[-4],[-2],[-6],[1],[5],[10],[-7],[-3],[10],[9],[-3],[-1],[-8],[2],[8],[3],[-6],[4],[9],[7],[7],[1],[10],[-7],[5],[8],[-10],[2],[3],[-4],[-3],[-3],[-1],[10],[2],[-1],[7],[-5],[7],[9],[-5],[-2],[7],[-2],[6],[-1],[2],[-10],[3],[-10],[-7],[6],[-6],[-3],[2],[-7],[-1],[1],[-2],[10],[9],[-1],[-7],[4],[8],[7],[-7],[-3],[3],[-8],[-10],[-1],[3],[-2],[-6],[-7],[4],[-8],[6],[1],[5],[3],[-10],[-7],[-2],[5],[9],[4],[-9],[-8],[-9],[-2],[2],[5],[9],[4],[-5],[-10],[-1],[7],[3],[7],[9],[5],[-10],[-3],[-10],[3],[2],[-8],[6],[-8],[6],[8],[-4],[-3],[9],[8],[-3],[-8],[-8],[1],[5],[-7],[-4],[1],[-8],[-2],[7],[-4],[-7],[10],[8],[7],[-3],[-4],[7],[8],[-9],[-10],[-2],[4],[-2],[-6],[8],[-1],[-8],[-4],[9],[10],[6],[2],[7],[-5],[6],[1],[10],[10],[4],[10],[6],[9],[-4],[-2],[4],[-4],[4],[-4],[-7],[1],[-8],[-1],[-10],[10],[-7],[-7],[4],[6],[-1],[-1],[-10],[7],[-1],[9],[2],[1],[-4],[6],[-5],[9],[-7],[-2],[-4],[-10],[-7],[-2],[-4],[-3],[10],[4],[1],[1],[2],[-1],[-6],[-7],[-7],[-5],[-9],[8],[4],[5],[8],[6],[9],[1],[-7],[-9],[-10],[4],[-1],[8],[-1],[-10],[7],[-6],[-9],[2],[8],[-7],[-8],[-1],[9],[-6],[10],[-4],[2],[-10],[-6],[-3],[10],[8],[2],[-7],[8],[9],[10],[-2],[10],[9],[-9],[-3],[-6],[6],[-3],[7],[-10],[-1],[4],[3],[1],[7],[4],[4],[7],[-5],[8],[-9],[-1],[8],[-4],[5],[9],[6],[-5],[-5],[-3],[-2],[4],[-2],[-9],[7],[-7],[2],[1],[-1],[-5],[9],[-4],[9],[-6],[-8],[9],[-7],[-5],[-3],[-7],[2],[9],[3],[-3],[5],[3],[-6],[-8],[6],[1],[4],[-3],[-4],[9],[-3],[-10],[-2],[8],[-8],[-10],[-1],[-6],[-9],[1],[-10],[-1],[-4],[-7],[-5],[6],[5],[-2],[2],[2],[10],[-3],[-8],[9],[-3],[5],[5],[-10],[-4],[-7],[-3],[4],[8],[7],[-5],[2],[-3],[-8],[3],[-10],[-10],[-2],[3],[-3],[-8],[4],[7],[1],[6],[-7],[-7],[8],[-5],[-2],[-6],[5],[-7],[10],[-10],[7],[-7],[-1],[-10],[10],[-10],[-7],[-8],[-8],[-1],[-1],[1],[10],[4],[8],[-5],[4],[-7],[-6],[9],[3],[3],[-8],[-2],[3],[-7],[10],[-10],[-7],[-2],[-10],[1],[9],[-1],[3],[9],[9],[5],[-2],[-4],[-10],[-9],[8],[-1],[-6],[10],[-10],[-10],[-9],[1],[10],[9],[3],[-7],[-10],[-2],[-1],[-1],[10],[5],[-4],[2],[6],[-2],[4],[8],[-5],[-3],[10],[5],[-2],[-10],[-6],[3],[-2],[-4],[3],[-2],[-9],[-5],[-8],[-6],[9],[-3],[-9],[7],[-5],[-6],[10],[9],[-6],[-10],[-8],[-10],[-7],[-9],[-10],[-9],[-2],[8],[-1],[5],[-3],[-7],[10],[5],[-8],[7],[-7],[4],[-1],[-8],[5],[10],[2],[-3],[4],[-8],[-8],[-10],[-2],[4],[-1],[-7],[-7],[-2],[-1],[-1],[-2],[8],[-10],[6],[10],[3],[-9],[-8],[-7],[1],[5],[-6],[-7],[3],[3],[-8],[7],[-6],[8],[3],[5],[8],[8],[-3],[8],[4],[-1],[6],[-3],[8],[4],[-8],[2],[10],[-7],[8],[8],[4],[-1],[2],[2],[-3],[-8],[-1],[-9],[-4],[4],[4],[9],[8],[6],[6],[3],[1],[-6],[1],[10],[-10],[-4],[-7],[1],[4],[7],[-3],[-1],[-10],[8],[-2],[-5],[-3],[7],[-10],[-2],[5],[-3],[-9],[-6],[-10],[-2],[-9],[6],[9],[-5],[-5],[5],[1],[3],[-10],[2],[-1],[10],[9],[-4],[10]], dtype = "uint16")#candidate|6696|(1694, 1)|const|uint16
call_6694 = relay.TupleGetItem(func_5643_call(relay.reshape(const_6695.astype('uint16'), []), relay.reshape(const_6696.astype('uint16'), [14, 11, 11]), ), 0)
call_6697 = relay.TupleGetItem(func_5646_call(relay.reshape(const_6695.astype('uint16'), []), relay.reshape(const_6696.astype('uint16'), [14, 11, 11]), ), 0)
func_3645_call = mod.get_global_var('func_3645')
func_3649_call = mutated_mod.get_global_var('func_3649')
const_6704 = relay.const([-5.198290,-3.178607,1.184893,9.967835,-9.153302,5.629557,-7.023453,6.643965,6.471284,-0.464923,3.055851,2.323253,-2.109164,-3.679631,6.361176,-3.512860,5.132312,5.276213,-0.898984,7.832151,-9.591692,7.484953,-9.387357,-6.576571,-2.613978,-3.273480,5.324244,-2.727733,-7.091298,-9.954933,-8.548395,0.279459,7.459066,-2.899943,-0.464330,8.801128,-1.018127,9.018725,7.779078,8.941959,8.087101,0.795422,1.308207,-5.569184,-9.978785,0.725989,-9.747692,-9.998520,2.012178,5.703008,3.607108,-4.244611,5.221722,-3.117672,6.761155,-2.596935,4.150429,-7.445146,-8.534470,-0.216335,7.142518,7.266640,7.850157,1.465090,0.049740,-8.860391,9.626592,-4.719236,-5.060445,2.447671,-9.056999,-2.386229,-9.037233,-5.483414,-9.446485,2.010344,-3.478760,6.501242,8.525005,-3.241748,9.503550,1.136031,2.830955,8.991458,-0.666001,-3.781439,1.907449,-0.473035,2.190455,-2.282159,-0.824368,7.672959,-6.211493,-6.072816,4.468501,-9.593944,0.380835,-5.486198,-3.143481,-9.364864,-7.464641,7.953716,-3.760477,0.089698,5.250341,0.873285,-2.859264,-9.412458,0.256404,-6.266475,-0.362165,7.834162,-6.680862,-0.813579,4.764740,4.976595,0.494683,9.588358,-5.378392,9.760611,-4.238263,8.858700,5.630658,-7.776969,-5.812216,-4.231287,1.364670,-9.251901,5.791557,-2.583381,-9.684003,-6.308767,8.436787,9.310823,7.701433,1.646052,3.906426,-1.550254,-4.929353,7.545610,7.950661,0.813073,4.540001,-5.875746,9.411553,3.023258,-5.182453,2.533637,-8.826415,8.280780,-2.418323,6.621484,-1.987873,-7.052550,-0.961143,6.905210,8.055188,4.421300,8.010226,5.065648,-0.131774,-9.565997,3.218795,-3.901564,-5.023459,5.043762,-5.292327,-1.428931,-5.050412,-7.599477,-0.145658,-3.583228,-6.066363,-8.053160,0.894892,-1.114860,-8.331372,-7.269369,7.810961,4.064695,-8.779758,-2.780679,-1.720621,3.902103,9.978800,1.475386,-2.224511,-3.128509,5.169289,-5.658182,-2.717746,0.808541,0.058030,-6.869731,-5.428590,-0.566664,-7.383232,-3.916743,2.073716,1.510622,5.360389,-9.369206,-0.131284,-7.988028,1.345113,-2.207024,-5.585006,-4.801677,9.459937,-5.747241,9.320318,7.183225,9.536526,-7.071793,1.377603,7.717434,-5.762777,-9.521997,-4.363862,5.092885,8.420614,-7.584782,2.291843,8.059879,3.967940,-2.235737,-5.291086,5.388972,4.521455,-0.216150,1.960477,3.944150,6.174907,8.317790,5.007164,2.068728,-1.627957,-9.465579,6.043472,2.641342,1.041945,8.614417,7.769519,9.345044,-2.303257,9.895550,7.735984,9.149877,9.038856,2.647882,6.981914,8.176304,-6.660313,9.790991,-4.379354,-4.798457,8.697514,4.518167,-0.560582,6.552435,4.845383,9.941009,-6.281981,3.467349,1.101332,-6.311188,-8.455671,-3.892888,5.986637,-9.399809,-3.782460,6.043465,-2.121083,-4.013195,4.578376,6.952397,3.135141,5.159880,7.543091,1.337678,0.933320,-4.471587,9.267985,-1.097855,-3.809734,-2.890410,-7.161954,-2.551648,1.882576,2.290403,0.113340,1.900651,1.128659,-9.185694,9.338432,1.931590,4.073444,-2.382834,6.891987,6.501575,4.405397,-7.810915,2.946044,-5.390295,-2.343077,5.153677,-9.199183,-4.479773,7.459238,7.487134,-8.682133,-3.506744,-3.848119,-9.058038,8.350511,4.526745,-3.516505,-8.019444,4.260447,-6.055508,6.354596,5.305940,-8.141282,4.511862,-4.515708,-0.988829,-3.776138,-6.529381,-9.538035,-6.987896,-6.809093,-6.473288,8.859594,-1.098671,-3.946747,-6.877411,-7.860364,4.691697,4.037433,-4.701130,0.815221,-5.439226,3.847775,-8.603241,-6.485471,-7.064557,8.447163,3.896339,7.012507,7.043249,-0.896732,1.827119,7.292068,6.557821,-0.001194,-3.639588,-9.600521,9.240672,4.781662,0.820997,-9.500595,-8.824952,0.424613,-0.963717,3.740291,-7.427480,-0.085824,-5.012728,-3.326131,-9.628220,1.591564,8.909092,-4.660932,-9.134472,-3.594692,3.564729,8.412609,-7.893750,5.540298,8.204176,-1.145716,-2.472494,-9.796590,-9.840815,-1.901838,4.384416,3.697888,2.590210,1.338272,8.739332,-3.633022,-0.822214,-2.224447,-4.021685,9.255631,-3.317258], dtype = "float32")#candidate|6704|(396,)|const|float32
call_6703 = relay.TupleGetItem(func_3645_call(relay.reshape(const_6704.astype('float32'), [9, 11, 4]), relay.reshape(const_6704.astype('float32'), [9, 11, 4]), ), 0)
call_6705 = relay.TupleGetItem(func_3649_call(relay.reshape(const_6704.astype('float32'), [9, 11, 4]), relay.reshape(const_6704.astype('float32'), [9, 11, 4]), ), 0)
output = relay.Tuple([call_6690,call_6694,const_6695,const_6696,call_6703,const_6704,])
output2 = relay.Tuple([call_6691,call_6697,const_6695,const_6696,call_6705,const_6704,])
func_6714 = relay.Function([], output)
mod['func_6714'] = func_6714
mod = relay.transform.InferType()(mod)
output = func_6714()
func_6715 = relay.Function([], output)
mutated_mod['func_6715'] = func_6715
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6492_call = mod.get_global_var('func_6492')
func_6494_call = mutated_mod.get_global_var('func_6494')
call_6765 = func_6492_call()
call_6766 = func_6492_call()
output = call_6765
output2 = call_6766
func_6793 = relay.Function([], output)
mod['func_6793'] = func_6793
mod = relay.transform.InferType()(mod)
output = func_6793()
func_6794 = relay.Function([], output)
mutated_mod['func_6794'] = func_6794
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6793_call = mod.get_global_var('func_6793')
func_6794_call = mutated_mod.get_global_var('func_6794')
call_6821 = func_6793_call()
call_6822 = func_6793_call()
output = relay.Tuple([call_6821,])
output2 = relay.Tuple([call_6822,])
func_6833 = relay.Function([], output)
mod['func_6833'] = func_6833
mod = relay.transform.InferType()(mod)
mutated_mod['func_6833'] = func_6833
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6833_call = mutated_mod.get_global_var('func_6833')
call_6834 = func_6833_call()
output = call_6834
func_6835 = relay.Function([], output)
mutated_mod['func_6835'] = func_6835
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6833_call = mod.get_global_var('func_6833')
func_6835_call = mutated_mod.get_global_var('func_6835')
call_6867 = relay.TupleGetItem(func_6833_call(), 0)
call_6868 = relay.TupleGetItem(func_6835_call(), 0)
output = relay.Tuple([call_6867,])
output2 = relay.Tuple([call_6868,])
func_6873 = relay.Function([], output)
mod['func_6873'] = func_6873
mod = relay.transform.InferType()(mod)
mutated_mod['func_6873'] = func_6873
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6873_call = mutated_mod.get_global_var('func_6873')
call_6874 = func_6873_call()
output = call_6874
func_6875 = relay.Function([], output)
mutated_mod['func_6875'] = func_6875
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6873_call = mod.get_global_var('func_6873')
func_6875_call = mutated_mod.get_global_var('func_6875')
call_6900 = relay.TupleGetItem(func_6873_call(), 0)
call_6901 = relay.TupleGetItem(func_6875_call(), 0)
output = call_6900
output2 = call_6901
func_6913 = relay.Function([], output)
mod['func_6913'] = func_6913
mod = relay.transform.InferType()(mod)
mutated_mod['func_6913'] = func_6913
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6913_call = mutated_mod.get_global_var('func_6913')
call_6914 = func_6913_call()
output = call_6914
func_6915 = relay.Function([], output)
mutated_mod['func_6915'] = func_6915
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6445_call = mod.get_global_var('func_6445')
func_6447_call = mutated_mod.get_global_var('func_6447')
call_6950 = relay.TupleGetItem(func_6445_call(), 0)
call_6951 = relay.TupleGetItem(func_6447_call(), 0)
output = call_6950
output2 = call_6951
func_6964 = relay.Function([], output)
mod['func_6964'] = func_6964
mod = relay.transform.InferType()(mod)
output = func_6964()
func_6965 = relay.Function([], output)
mutated_mod['func_6965'] = func_6965
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6532_call = mod.get_global_var('func_6532')
func_6533_call = mutated_mod.get_global_var('func_6533')
call_6995 = relay.TupleGetItem(func_6532_call(), 3)
call_6996 = relay.TupleGetItem(func_6533_call(), 3)
output = relay.Tuple([call_6995,])
output2 = relay.Tuple([call_6996,])
func_7001 = relay.Function([], output)
mod['func_7001'] = func_7001
mod = relay.transform.InferType()(mod)
output = func_7001()
func_7002 = relay.Function([], output)
mutated_mod['func_7002'] = func_7002
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7001_call = mod.get_global_var('func_7001')
func_7002_call = mutated_mod.get_global_var('func_7002')
call_7046 = relay.TupleGetItem(func_7001_call(), 0)
call_7047 = relay.TupleGetItem(func_7002_call(), 0)
output = call_7046
output2 = call_7047
func_7060 = relay.Function([], output)
mod['func_7060'] = func_7060
mod = relay.transform.InferType()(mod)
mutated_mod['func_7060'] = func_7060
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7060_call = mutated_mod.get_global_var('func_7060')
call_7061 = func_7060_call()
output = call_7061
func_7062 = relay.Function([], output)
mutated_mod['func_7062'] = func_7062
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6714_call = mod.get_global_var('func_6714')
func_6715_call = mutated_mod.get_global_var('func_6715')
call_7114 = relay.TupleGetItem(func_6714_call(), 4)
call_7115 = relay.TupleGetItem(func_6715_call(), 4)
uop_7130 = relay.sinh(call_7114.astype('float32')) # shape=(9, 11, 4)
uop_7132 = relay.sinh(call_7115.astype('float32')) # shape=(9, 11, 4)
func_7060_call = mod.get_global_var('func_7060')
func_7062_call = mutated_mod.get_global_var('func_7062')
call_7146 = func_7060_call()
call_7147 = func_7060_call()
output = relay.Tuple([uop_7130,call_7146,])
output2 = relay.Tuple([uop_7132,call_7147,])
func_7152 = relay.Function([], output)
mod['func_7152'] = func_7152
mod = relay.transform.InferType()(mod)
output = func_7152()
func_7153 = relay.Function([], output)
mutated_mod['func_7153'] = func_7153
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6793_call = mod.get_global_var('func_6793')
func_6794_call = mutated_mod.get_global_var('func_6794')
call_7156 = func_6793_call()
call_7157 = func_6793_call()
func_6714_call = mod.get_global_var('func_6714')
func_6715_call = mutated_mod.get_global_var('func_6715')
call_7177 = relay.TupleGetItem(func_6714_call(), 5)
call_7178 = relay.TupleGetItem(func_6715_call(), 5)
func_6714_call = mod.get_global_var('func_6714')
func_6715_call = mutated_mod.get_global_var('func_6715')
call_7191 = relay.TupleGetItem(func_6714_call(), 5)
call_7192 = relay.TupleGetItem(func_6715_call(), 5)
output = relay.Tuple([call_7156,call_7177,call_7191,])
output2 = relay.Tuple([call_7157,call_7178,call_7192,])
func_7194 = relay.Function([], output)
mod['func_7194'] = func_7194
mod = relay.transform.InferType()(mod)
output = func_7194()
func_7195 = relay.Function([], output)
mutated_mod['func_7195'] = func_7195
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7201 = relay.var("var_7201", dtype = "float32", shape = (2, 3, 4))#candidate|7201|(2, 3, 4)|var|float32
uop_7202 = relay.log2(var_7201.astype('float32')) # shape=(2, 3, 4)
func_4458_call = mod.get_global_var('func_4458')
func_4461_call = mutated_mod.get_global_var('func_4461')
var_7215 = relay.var("var_7215", dtype = "bool", shape = (2112,))#candidate|7215|(2112,)|var|bool
call_7214 = relay.TupleGetItem(func_4458_call(relay.reshape(var_7215.astype('bool'), [16, 11, 12]), relay.reshape(var_7215.astype('bool'), [16, 11, 12]), ), 1)
call_7216 = relay.TupleGetItem(func_4461_call(relay.reshape(var_7215.astype('bool'), [16, 11, 12]), relay.reshape(var_7215.astype('bool'), [16, 11, 12]), ), 1)
uop_7217 = relay.sin(uop_7202.astype('float32')) # shape=(2, 3, 4)
func_4419_call = mod.get_global_var('func_4419')
func_4421_call = mutated_mod.get_global_var('func_4421')
var_7226 = relay.var("var_7226", dtype = "int8", shape = (128,))#candidate|7226|(128,)|var|int8
call_7225 = func_4419_call(relay.reshape(var_7226.astype('int8'), [16, 2, 4]))
call_7227 = func_4419_call(relay.reshape(var_7226.astype('int8'), [16, 2, 4]))
func_5643_call = mod.get_global_var('func_5643')
func_5646_call = mutated_mod.get_global_var('func_5646')
const_7237 = relay.const(-9, dtype = "uint16")#candidate|7237|()|const|uint16
const_7238 = relay.const([-6,-2,8,7,-4,4,1,3,-7,10,-7,-8,-6,7,3,-1,-4,8,-4,8,3,7,3,-9,2,-8,10,6,-2,-5,2,6,8,10,6,-1,9,4,7,6,3,-10,10,10,8,9,-1,8,8,3,-5,4,2,7,1,1,-7,-8,-9,-1,6,-7,-4,6,4,-7,-4,2,-8,7,2,5,9,6,-2,4,-8,4,-9,-5,10,9,-2,-1,-10,2,-4,-3,10,2,-6,-9,9,-6,4,9,-3,1,1,-6,8,-5,4,-7,9,6,8,-10,1,-3,-9,-10,-3,8,2,-7,1,-5,1,-9,3,-6,5,8,-5,-10,3,7,-10,2,-10,-2,-10,-5,-9,9,-2,-3,-2,10,1,-2,-9,-2,5,-10,-2,5,9,3,4,2,-9,-2,7,6,3,4,-8,-2,-10,-7,7,4,-2,6,9,2,4,-6,-10,-6,-2,-7,-7,-3,-3,9,4,6,10,-10,9,-6,-9,-1,-7,-2,-9,1,-9,-5,9,-10,9,7,-7,8,-2,-8,-9,10,8,-6,2,-5,6,-1,7,-5,9,-8,2,6,-10,-5,-5,-6,-6,2,-4,8,10,-2,-5,3,-1,-4,-7,-7,3,8,6,1,-8,1,-1,-1,-10,-7,-2,-9,-1,7,1,5,-7,-4,-8,-6,-9,10,6,10,-4,9,7,-8,10,6,-1,-7,-7,3,5,6,6,5,-7,6,-4,-9,2,3,5,1,-2,6,9,-7,-9,-10,8,5,-2,9,5,-1,5,8,3,6,10,-7,1,3,8,3,1,-3,2,-1,10,-5,-5,-5,-4,6,-2,3,10,3,1,3,-7,-5,8,5,1,3,3,-6,10,1,8,7,-9,-3,-6,2,-5,-2,4,-1,7,1,-5,-7,1,-8,1,5,6,10,-8,-7,9,8,-7,10,-4,-4,-10,-3,-10,-1,6,2,-6,6,-5,9,-2,-1,5,-1,-2,9,7,-4,4,-7,-1,-4,1,5,3,-2,-10,-2,-4,-7,9,10,-9,-10,-2,-3,7,-4,-9,6,4,7,-3,-10,-1,3,2,-5,-2,3,-3,8,6,-6,-2,7,2,-9,-2,-10,-7,-4,-10,1,-3,5,3,-3,7,5,4,5,-5,-1,-5,-1,-5,3,-3,5,-7,3,-6,-8,-8,2,7,9,2,-1,10,9,-9,3,5,2,-10,3,-1,-9,-5,2,8,4,-1,5,8,-1,6,-3,-1,6,-9,-9,1,-9,9,-6,5,5,6,-9,5,5,3,-6,-2,8,-1,-2,-5,7,-4,-8,-7,-5,4,7,-6,-5,-10,-5,-3,-6,10,-5,8,-8,8,-3,3,-6,-4,8,-7,10,4,-2,10,9,5,-6,9,7,-4,-2,8,3,3,3,4,1,-9,-5,2,-1,-2,-10,-5,-8,-9,5,8,-9,-9,5,6,-3,1,-7,2,8,7,4,-8,10,-3,-5,2,4,-8,7,4,-10,8,6,7,3,-5,-5,-1,10,-1,5,-9,-7,5,-3,-3,-4,2,10,-3,1,-4,-10,-5,-7,5,2,-10,-3,2,-5,-10,-8,6,-10,-5,-8,-1,-1,1,5,-1,-2,-5,-7,-4,5,-9,4,1,6,-7,4,-5,4,-5,3,-5,9,1,-8,8,9,-6,-5,-9,4,7,5,1,9,-8,1,7,-3,6,5,5,-1,7,10,7,3,10,-6,-7,6,-7,-9,9,-5,5,10,4,-1,-9,8,-4,10,8,4,2,3,1,8,-5,-6,2,2,-9,-8,3,4,8,-1,3,4,-5,7,-2,-5,-7,-9,9,9,-4,8,-5,-7,8,9,-1,-7,3,-4,10,-2,-2,-7,10,-3,-3,2,-3,10,6,1,4,6,3,-2,1,9,5,-8,-4,-9,-2,-6,1,4,-7,7,-4,-1,-2,1,7,9,-8,8,8,8,2,4,-9,-1,5,8,-10,8,1,7,9,-9,7,-6,7,-4,5,-2,-6,1,-10,1,-5,4,-8,4,-1,4,-2,-2,4,8,5,6,-3,-5,3,5,-6,-5,-3,4,4,3,-8,-7,-4,4,4,-3,4,-10,-5,-8,-5,7,-2,2,-9,-5,2,9,-6,-3,2,7,-5,4,1,1,5,-4,7,4,-2,2,3,-8,-4,-1,-9,2,-5,-4,-8,-2,2,-9,-3,6,-4,-7,-10,7,-8,-10,-5,10,9,-8,-10,-10,-8,3,2,7,8,4,-1,-3,9,5,-8,-6,9,-3,-4,-3,-2,4,-4,3,-4,-1,7,-3,9,-2,3,3,-10,2,1,-6,2,10,-10,-9,9,-1,-5,-5,-2,-1,-5,-8,-3,10,-6,1,-4,-3,4,-9,3,3,4,-2,7,3,8,-8,2,6,-2,-7,10,1,3,6,1,3,7,6,-7,-7,-10,5,-1,-1,10,1,9,3,-5,-7,-10,4,4,-3,-8,-5,5,2,4,9,3,-5,2,-6,9,-3,-2,8,8,-8,-2,-7,-4,3,4,4,-1,-2,7,2,-1,-4,-6,10,4,10,-2,4,-8,4,8,1,-6,-4,1,10,-3,-7,-7,-2,-9,-10,1,-7,-9,-1,8,8,-5,9,-8,-9,3,9,7,4,6,-6,-6,-6,-3,-5,6,-7,6,8,6,7,5,1,9,-7,9,-2,4,1,-2,8,-10,1,-2,-9,4,10,-2,-3,-6,6,4,2,3,-7,10,4,-2,-5,2,7,-8,7,-7,2,1,-9,-5,4,4,4,-9,-5,1,-9,4,1,10,3,-10,-1,3,7,10,-8,5,2,8,6,9,-4,-1,8,-5,-1,8,-6,-1,-10,6,-9,8,6,-9,9,10,-5,-8,-4,-4,8,6,-2,6,-2,-10,5,2,-7,-6,1,8,8,-6,1,-9,1,-2,6,7,-2,9,-6,-9,-2,-9,-10,8,7,2,6,-6,7,-2,-5,1,5,-3,8,7,-6,4,5,5,8,9,-9,10,10,10,-10,-3,8,-9,-1,-8,-3,4,-4,10,-6,-5,4,2,-7,1,1,4,3,8,10,-10,8,-10,3,-2,9,-6,3,6,8,7,3,-1,-5,-8,-4,-5,-2,-5,-7,6,6,-8,7,1,3,-7,9,3,-6,8,-1,6,-10,-8,10,2,3,-7,7,-8,-5,-7,4,8,-2,1,9,-7,-8,5,-9,6,-10,4,8,-8,-8,7,6,1,-2,-3,10,2,-7,8,6,9,6,1,-5,8,3,-5,-3,-9,9,-9,-4,-8,8,6,-9,-1,-8,10,-3,-7,6,-7,8,-5,2,5,3,-6,1,-8,-6,-7,3,-8,-8,3,10,-2,-10,5,-10,-7,-6,-7,-4,7,-4,-6,4,1,2,-5,-8,9,5,-9,6,10,-6,9,2,3,2,10,3,9,7,-8,-4,-10,-2,-6,4,8,-2,1,-3,-7,4,-3,1,4,8,3,-8,-1,-4,9,-2,8,-4,-6,-5,-3,2,-6,8,3,2,9,8,10,-6,10,6,2,10,6,-2,-4,7,-9,2,2,-5,3,1,-7,-2,7,-8,-7,-6,2,4,-2,6,5,-3,-1,9,4,-7,9,10,9,-4,4,1,-5,4,5,1,7,8,10,3,-9,7,-2,-3,-4,-7,-6,6,3,-1,9,10,-3,5,-8,-9,9,-5,2,-1,-7,-7,-7,4,-3,10,-6,10,-3,-3,5,7,10,6,2,-8,-8,-9,10,-6,-8,-6,1,4,-3,4,-10,4,3,-2,7,-1,7,-9,3,9,-4,-8,1,8,10,1,-10,-10,5,7,3,7,8,-6,-3,-6,10,-3,-5,-4,-10,-7,-10,-5,-10,-6,-8,3,-1,9,-6,5,9,6,7,-1,4,9,-2,6,-7,-4,-7,3,10,6,-8,-1,-6,-3,6,4,-9,-4,9,4,4,3,9,-1,-9,-2,-7,6,-9,-8,2,-6,7,3,-10,4,-8,-5,-4,-5,-3,-1,-1,6,9,-6,-8,-3,10,2,4,-4,-2,9,-7,-10,3,-3,-10,4,-2,10,1,-4,-1,3,-4,-8,-7,-4,-3,-7,6,9,-10,7,3,2,3,7,6,-9,-8,-7,-6,-1,3,-5,9,-7,9,1,-3,8,-2,-10,-6,7,8,8,4,4,7,-8,-5,5,1,6,8,-2,8,9,2,7,-1,-3,2,4,-7,6,-1,6,5,-8,5,-5,3,-8,-1,5,9,7,-5,1,-5,-6,5,10,3,7,7,4,8,-5,6,-9,7,-4,-6,6,1,-10,5,10,-8,-9,-9,-7,2,3,1,1,-9,2,-2,-9,-2,1,8,7,-6,-1,7,1,-9,7,8,7,3,-5,8,9,-4,7,-10,8,-1,3,8,-7,-10,-6,-10,-8,-4,9,-8,4,-9,-7,-7,6,-5,-6,-3,-9,-7,3,-10,2,5,-6,2,-8,10,7,-10,3,-2,-8,4,-9,-4,8,-3,-6,4,3,9,-6,-7,-4,5,-4,-10,3,-2,3,-5,10,3,-8,7,2], dtype = "uint16")#candidate|7238|(1694,)|const|uint16
call_7236 = relay.TupleGetItem(func_5643_call(relay.reshape(const_7237.astype('uint16'), []), relay.reshape(const_7238.astype('uint16'), [14, 11, 11]), ), 0)
call_7239 = relay.TupleGetItem(func_5646_call(relay.reshape(const_7237.astype('uint16'), []), relay.reshape(const_7238.astype('uint16'), [14, 11, 11]), ), 0)
func_4419_call = mod.get_global_var('func_4419')
func_4421_call = mutated_mod.get_global_var('func_4421')
call_7243 = func_4419_call(relay.reshape(call_7225.astype('int8'), [16, 2, 4]))
call_7244 = func_4419_call(relay.reshape(call_7225.astype('int8'), [16, 2, 4]))
func_7194_call = mod.get_global_var('func_7194')
func_7195_call = mutated_mod.get_global_var('func_7195')
call_7251 = relay.TupleGetItem(func_7194_call(), 0)
call_7252 = relay.TupleGetItem(func_7195_call(), 0)
uop_7257 = relay.sqrt(uop_7202.astype('float32')) # shape=(2, 3, 4)
output = relay.Tuple([call_7214,var_7215,uop_7217,call_7225,var_7226,call_7236,const_7237,const_7238,call_7243,call_7251,uop_7257,])
output2 = relay.Tuple([call_7216,var_7215,uop_7217,call_7227,var_7226,call_7239,const_7237,const_7238,call_7244,call_7252,uop_7257,])
func_7271 = relay.Function([var_7201,var_7215,var_7226,], output)
mod['func_7271'] = func_7271
mod = relay.transform.InferType()(mod)
mutated_mod['func_7271'] = func_7271
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7271_call = mutated_mod.get_global_var('func_7271')
var_7273 = relay.var("var_7273", dtype = "float32", shape = (2, 3, 4))#candidate|7273|(2, 3, 4)|var|float32
var_7274 = relay.var("var_7274", dtype = "bool", shape = (2112,))#candidate|7274|(2112,)|var|bool
var_7275 = relay.var("var_7275", dtype = "int8", shape = (128,))#candidate|7275|(128,)|var|int8
call_7272 = func_7271_call(var_7273,var_7274,var_7275,)
output = call_7272
func_7276 = relay.Function([var_7273,var_7274,var_7275,], output)
mutated_mod['func_7276'] = func_7276
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6492_call = mod.get_global_var('func_6492')
func_6494_call = mutated_mod.get_global_var('func_6494')
call_7294 = func_6492_call()
call_7295 = func_6492_call()
const_7325 = relay.const([[[2.005283,-1.390229,2.802754,-5.201517,4.289102,5.044317,-0.246207,0.335533,1.855920,-7.011064],[-5.483495,9.781052,-9.940804,5.449623,9.814999,5.524469,-5.263818,3.651084,4.114633,-0.974914],[-1.331951,-4.360183,5.776182,0.396641,3.018675,-4.320398,-4.727254,-9.581341,-4.844722,0.356968],[-7.659760,-5.105350,5.106032,2.474760,-6.044525,0.098912,6.122984,5.289353,2.320667,-6.643707],[5.705148,-1.054638,-6.822193,-5.728337,-8.200000,-3.144373,-5.662069,-7.916466,6.046832,1.237363],[5.216357,-8.432971,-6.172587,6.082472,-2.441236,-9.262122,6.598208,6.646713,-9.930169,-4.279412],[-9.357658,8.684730,3.969313,-3.164160,8.331095,-0.037454,-6.609013,-9.272782,7.347217,-6.957299],[6.332612,3.193230,8.097081,-5.282917,-2.556714,-2.318072,-0.357744,0.602796,7.074370,-1.137406],[9.308666,8.957259,3.248883,9.135684,-0.872318,5.583103,-4.744138,-0.476993,8.557881,4.594516],[1.834159,-3.110053,-7.063198,2.306701,5.575982,-2.571123,8.245268,-8.683862,2.727588,5.756967],[4.074335,8.528795,5.647009,3.883330,0.155379,-8.481573,0.114583,-7.286812,-0.502838,0.125768],[2.167983,0.289381,-2.457524,9.790565,1.619876,8.337107,8.339633,-0.515073,-0.061185,-2.564013],[7.646423,-4.311596,0.911774,-0.247396,-0.893587,-9.607915,0.905242,-7.141219,0.030660,-7.019649],[-7.368923,-8.953155,-3.300312,-3.109758,-8.576514,-1.907288,4.600127,-2.884572,4.436403,1.240214]],[[1.689258,5.324312,6.575989,-2.727856,-5.301910,0.105579,-2.327124,-6.047839,-5.596586,8.297167],[8.188041,-6.032287,-1.772454,-8.840212,5.381742,9.574348,5.678645,-5.896608,5.852665,9.268392],[2.596947,-3.678707,-3.261365,-9.680191,-1.873110,-5.428936,-2.385625,-0.350341,9.698182,-5.394034],[-2.374400,2.034593,5.452932,-3.471658,-3.652286,-5.241889,-3.416937,0.898377,4.929886,-2.142999],[3.081569,-5.203890,2.108537,-1.814414,9.960592,-2.474499,0.721870,1.412414,9.772118,5.426716],[7.117257,3.089731,-3.618937,9.249931,-7.936797,4.250210,-1.283210,3.816075,6.052928,-5.120067],[7.300784,-8.309375,0.159765,3.937425,-4.480660,-8.988796,-7.168073,5.485912,0.825403,-4.226537],[-4.400609,1.988641,2.858188,0.939164,4.993283,5.153471,-8.530254,1.129065,3.865939,-1.565277],[5.082278,-2.886093,-5.915591,-6.536683,-3.281078,0.845398,9.090981,0.076269,-0.834885,8.939985],[-3.247467,-0.844603,-2.105924,-9.446079,-1.798825,4.846311,-4.045327,0.731173,-0.783328,-0.352643],[-9.749723,0.327117,-7.113756,3.675123,5.477137,-3.559392,5.122160,-3.567765,-0.633743,-2.687913],[4.840284,-1.072688,8.825604,-4.086206,-5.176730,-7.627851,1.255710,-9.630981,-2.300166,-5.334388],[-5.626090,3.621991,3.606274,8.513029,4.200254,-0.508746,-8.491281,-1.594481,-1.923967,3.308324],[2.753676,3.383398,3.350364,-6.985564,1.110055,-4.642489,-0.152059,-7.393826,0.189311,1.144569]],[[7.182910,-0.280571,3.989892,6.446868,0.735598,-5.118263,-6.145322,6.182932,8.155313,8.436415],[-0.031801,-2.958788,4.650102,-5.642196,-2.918429,2.599203,4.614462,3.517576,-1.828148,-3.694084],[5.812706,-8.956200,8.682469,-2.068248,-2.969752,2.074725,3.468755,0.357163,-5.172840,0.441204],[8.804980,-5.713903,-0.928546,0.946270,-7.270515,8.622800,-7.129061,9.702317,9.117900,-6.980620],[0.697424,0.076169,4.584691,-4.974550,-4.258800,4.377318,-2.334349,0.583102,5.313823,-1.811228],[-4.530189,-4.600719,6.614452,-2.136430,6.471242,-1.724926,5.955467,6.180419,-8.631960,-9.940488],[9.455671,9.711101,-1.539130,1.770921,2.530524,0.023331,9.445295,8.611900,-8.252314,0.729562],[-6.765391,-4.745033,6.523574,1.382263,3.965234,5.459069,0.710163,2.714498,1.265652,9.805604],[-3.530520,-5.490759,-4.408960,-0.359264,-5.394598,-9.803445,-9.023001,-2.462085,-9.907051,6.000256],[1.124905,8.005836,6.792498,-0.794643,9.209566,-5.913958,2.519134,6.179258,-0.960736,-7.936692],[7.684235,8.424549,7.595780,-8.995103,9.233832,-9.174385,-9.846286,1.715740,-7.714149,-2.358353],[-1.435771,9.202854,0.643293,5.784832,-3.816259,-0.405067,2.139739,1.285218,4.060947,-2.192776],[-6.131790,-7.091475,-7.203969,-7.528703,5.740980,-9.647447,3.724054,9.878116,-0.635125,-1.613102],[-3.548854,4.900091,2.562286,3.455010,-9.418378,3.582721,-0.868112,2.094250,-1.260907,9.362819]],[[-6.712219,8.873188,5.543546,-3.235603,9.835496,-8.053662,-1.530961,7.812111,2.643508,-6.491524],[0.241355,-9.525966,8.396946,-6.971237,7.248877,-5.234248,-8.246457,-6.160117,-5.551838,9.097702],[1.822754,-1.224721,4.307190,5.197629,-9.289303,-8.594667,-4.774148,3.238658,-1.521411,3.921938],[6.131157,3.039890,0.105560,7.498534,2.772975,5.984232,-5.950465,-5.324271,-3.103614,-4.393241],[2.428614,-0.445691,3.901009,-7.927515,9.857038,-4.289520,5.935065,-5.067804,8.894739,-6.424958],[5.015575,2.787413,2.513167,0.294604,-1.059279,-6.166380,4.761004,1.851947,-2.216123,-1.756501],[3.240231,-3.251702,8.804194,5.119014,-3.003239,4.635995,1.752215,-6.176919,-1.653714,-7.629689],[3.996879,-1.072003,9.113479,-2.356109,0.902779,-1.688329,1.390672,9.526880,3.614051,5.791339],[2.059240,7.372523,3.215095,9.087192,-1.876010,-1.258994,5.432273,-4.778016,-7.642529,-9.280751],[3.902532,-1.302526,-8.039512,1.968443,-9.909788,2.920292,7.404272,5.492115,-8.918188,-3.569834],[-3.158980,4.072946,-3.361854,4.718027,-2.697914,-3.920956,-6.546129,-4.066193,4.008628,-3.013395],[-4.015865,8.490173,8.118407,-9.564639,0.800446,-0.595259,-6.541393,2.961362,4.294379,2.822103],[7.497415,1.401705,6.378927,-4.290935,-3.022574,-7.987694,-1.782780,-2.511356,-2.843439,-4.948329],[-1.044459,-3.058059,-0.094151,7.487461,-7.700416,4.494727,-6.084939,0.560775,-5.306058,-3.086508]],[[-3.449309,3.558504,-3.360136,-4.081587,-1.838385,2.341685,6.251873,8.765991,7.393575,6.717701],[-6.998944,8.364338,-4.296998,-4.814536,-4.517475,1.817981,9.091501,-8.179307,-6.734369,9.828281],[4.411248,0.277582,-8.665577,-6.694585,7.233003,8.459507,-4.162333,4.948243,9.413452,6.451067],[-8.370326,-7.997543,5.878426,-6.597733,-3.546849,-7.630679,-7.467927,-7.708682,6.208428,-3.892411],[8.399541,-3.897259,3.304584,-1.242736,7.812625,-5.537710,-9.374342,4.989282,9.713741,9.200589],[7.743978,2.362245,-1.148222,-0.818017,-5.884729,-1.944999,-4.154593,0.230784,-0.487817,-1.035522],[8.606740,-9.065771,-5.186646,4.939811,5.545633,5.467328,9.348507,-8.769930,-8.971537,6.310433],[1.636610,-0.442039,-2.854606,6.921906,7.628675,-9.574441,4.235666,-0.175652,-2.590745,8.069303],[4.521094,6.803608,-9.784452,-0.382202,-5.585208,1.959229,9.450936,-3.442811,-5.128216,2.852320],[5.196952,-2.116788,-4.847374,-1.665206,4.761171,-7.558241,-4.041182,8.344420,7.434396,-4.756088],[9.902206,1.565895,0.384664,-1.548310,-6.262749,-8.540606,9.135725,-8.266623,0.619300,-9.934858],[-9.770120,2.171613,-6.185162,0.628404,-6.285093,-7.687515,-0.060994,2.249186,8.207580,0.527038],[7.498803,3.722500,-6.195000,-4.479364,0.719534,-5.765290,7.052013,-1.003317,-1.595921,5.215642],[4.891047,-3.549053,7.584211,-1.977991,4.956189,-6.530452,9.807298,7.819020,8.414003,5.982042]],[[7.291861,7.938779,-9.225431,-2.636592,4.311763,8.439887,0.816887,-9.398823,8.204655,9.102550],[-3.985267,0.739051,-8.829987,-5.289746,-1.338457,-1.346079,0.863976,-4.589471,4.115756,4.015887],[-9.329333,-6.633509,-4.331677,8.733182,4.655133,5.333914,-1.679486,1.057662,9.754433,4.890324],[1.396796,4.752366,9.433610,-6.622357,8.028611,4.866658,9.292871,4.746478,2.289670,4.726609],[-1.683584,-9.157178,-7.942131,1.142115,1.909989,6.170499,-4.692759,-9.444696,6.751558,-8.518517],[-8.334842,-0.344309,2.468747,7.406798,-1.182285,5.473287,5.760906,-8.045145,6.001992,-8.820183],[-4.522578,-6.777247,-4.930927,-1.416001,8.273085,-4.963619,-4.274900,6.520031,3.277849,-9.637285],[-1.936912,-7.796848,-3.684100,0.555657,-3.629705,-1.177453,7.000813,7.361055,5.420858,1.934666],[-0.793276,-9.422746,7.049312,8.258029,1.151060,-7.542075,6.102160,4.616530,3.450487,-8.554027],[-7.087298,-8.664036,8.467499,-0.208077,2.316810,8.133530,4.190940,4.863613,-8.801459,0.635120],[-5.308977,7.142912,-7.933727,4.506501,6.746516,0.308846,1.807863,9.763761,0.745520,3.449517],[-5.294083,5.989488,5.798134,-9.742443,8.363600,1.921827,8.840309,1.186969,2.768193,-9.244235],[-5.758419,3.625394,6.135678,-0.513681,-1.449187,-4.344738,2.075514,-8.302892,-8.810801,-8.912847],[3.023045,1.132115,-3.080670,-8.296078,-2.807535,-0.762343,8.021625,-8.758912,-5.042609,1.058361]],[[-1.097760,1.523641,3.757440,-8.831903,-9.462922,7.177087,-0.002106,6.624942,-5.903499,5.037166],[-2.096060,6.455638,5.448795,-8.386235,0.345607,-7.250058,6.053648,4.890759,8.047046,-5.549308],[-6.141198,1.801570,6.665544,5.659946,6.426404,-6.843982,-7.831979,1.397423,9.633452,5.041556],[2.617586,-6.992199,-0.237068,-6.013342,-5.060531,0.104912,-4.941974,8.451236,1.870313,5.970155],[4.708084,-0.792128,-8.191099,8.654506,-6.367638,-9.542586,-1.692739,-1.176895,-5.675281,8.423170],[-6.709044,5.274862,2.862668,-0.237488,5.079174,0.262027,7.339415,-5.695264,2.673816,7.940266],[-9.214721,-6.875064,-0.441723,7.990830,3.740604,9.771345,-3.468067,-0.331222,-1.767976,-0.087051],[6.110517,-3.164989,-8.179212,-4.280458,1.649324,8.408441,6.010530,-0.760416,-0.276326,-8.180149],[-5.537516,0.007831,-6.725131,8.835304,-1.673947,-5.767650,7.420988,-2.888645,6.398689,-0.808784],[-0.224070,-9.982466,4.616932,-7.524636,8.939099,5.725909,-7.124537,-8.053100,-8.803120,4.464796],[4.588457,-0.628547,0.801494,-8.945384,6.826124,6.972109,-5.482391,0.121012,-8.768920,-0.143904],[-7.883064,-1.115491,-7.263831,3.646922,-2.047761,-0.454691,-5.755770,-0.503420,3.198667,-5.269275],[3.489828,9.587066,-5.432239,2.501475,-1.011549,-2.138427,4.790818,2.835149,3.263035,8.201058],[-2.935348,1.329243,-3.728938,-8.321458,9.257129,9.899693,-4.718329,-1.959197,3.137194,8.288439]],[[9.029285,0.563451,-4.296467,1.012118,5.545626,2.088702,-1.080956,0.277462,3.386884,-2.173709],[-2.121480,6.531835,-0.873662,1.741757,-2.374605,8.724837,-4.382128,-1.292110,-3.030924,-2.379710],[-8.027847,0.422336,6.201414,-1.701163,-7.604345,7.177116,-7.782049,7.725439,-7.734811,-1.365617],[0.937941,4.128704,-3.057970,8.319563,3.543350,1.937440,7.985957,-4.699856,4.027985,4.196798],[7.261460,-0.128142,-1.940259,4.864631,3.501069,9.860833,5.339673,-2.427186,-7.468561,-4.790847],[-6.964412,-0.753288,-0.241273,-3.476184,6.982099,3.641027,-5.276493,-1.796777,3.915329,3.671071],[1.887630,-5.750179,6.980423,2.844142,-0.492429,2.694976,8.626332,-4.179212,-7.950586,7.896502],[3.655989,4.880655,-6.173571,-4.490350,9.522957,-9.207168,-5.465702,4.957046,-2.545706,7.296716],[2.537838,9.527939,-6.989027,-5.124059,-5.343289,-0.243912,4.163561,5.782301,7.280999,6.948226],[5.945795,-3.026508,-7.600149,-6.380964,-0.571460,1.574786,-9.244908,-8.647106,3.480565,-0.445662],[-1.970529,0.411915,-3.747520,7.632754,-1.130901,-2.993597,4.306973,6.310998,-8.484266,-9.361996],[4.963659,-8.310095,-1.154355,5.094702,-9.974769,1.914020,-2.416342,-1.253148,2.514505,0.798397],[-4.225655,3.703663,-1.959023,-7.685504,-6.956354,4.835715,-3.923423,-3.393862,-8.342075,-6.667416],[3.415955,1.638311,-8.851158,-0.266997,2.176994,5.020430,9.846404,4.006274,2.027266,-7.098446]],[[-8.708554,-9.821745,-0.985056,8.552955,-9.769486,0.311769,7.693471,1.330116,-3.010906,7.603467],[1.304332,4.111986,-1.187549,-7.286258,-3.497985,8.624773,-3.239820,-3.166816,-1.662670,1.069893],[6.990222,-2.526973,6.000247,6.011412,7.201632,-1.004210,0.222397,2.664424,-9.423457,-9.234420],[0.855436,-6.640626,5.561327,-5.846661,-4.786265,-4.990429,-4.486775,4.981313,-3.112856,7.988447],[5.241529,5.314462,4.105724,-3.900427,-1.394441,6.210307,0.602949,-1.442292,-6.632173,-6.727549],[-7.897272,-1.118576,-9.441877,9.235737,-3.323006,-2.266174,-9.165815,5.991596,2.193130,5.147168],[-5.044285,6.200635,-2.157594,-9.009339,-7.441602,-9.852990,8.125420,4.477534,-6.717726,-5.460722],[6.785933,-6.004552,-2.623753,5.994897,-7.356845,-6.347569,7.029764,-9.185835,6.088863,-4.959457],[8.992028,-9.728585,-4.462535,-6.617671,-0.656046,1.874549,-0.597964,5.798949,4.473597,-8.253107],[-2.059412,-8.564685,-0.200129,5.728281,4.924305,3.445510,-4.463651,6.739671,2.797040,2.222975],[6.391573,0.732123,9.019848,-3.116071,6.337171,-6.022445,0.844441,-9.752994,4.319753,7.058504],[9.712008,6.781856,1.904404,-0.348362,6.382162,-3.286840,4.084983,-1.333963,8.844678,3.285587],[6.989223,-8.205462,9.986246,-7.863055,-2.686808,8.629642,-4.728780,-9.169886,-1.196585,-2.834169],[-5.127052,-3.917664,-9.257217,-3.021189,5.295902,-8.148522,0.923366,-8.429379,6.040074,1.087848]],[[-8.294513,-6.169665,-3.113529,-7.394553,8.677265,-5.372411,-8.608039,5.663180,6.782418,-8.999855],[-2.508054,2.859262,3.782324,-4.695062,-8.830880,-0.057345,-9.689613,3.931841,7.074803,6.702985],[-5.419440,9.451553,-3.822794,4.030871,-8.091985,2.707225,-1.123805,7.398464,-6.207287,7.929711],[7.827775,8.273031,-4.790982,-3.392335,2.684870,-4.191415,6.975271,-1.786015,8.847262,8.082666],[5.016879,-9.393087,9.693479,5.958575,9.337192,-4.058184,-2.231944,-3.875418,-2.683119,4.114980],[5.795468,2.226661,7.043846,-3.458928,0.093216,-3.809215,-3.314664,7.365012,-9.062307,2.414121],[5.394047,1.480822,-6.422071,-5.594955,-0.706453,-7.295816,5.220404,0.881380,6.038645,4.729414],[2.507163,4.280357,-2.565032,-8.994145,0.172095,-3.092866,9.819220,-4.578150,-5.323861,2.176695],[-4.034707,-3.576120,5.131871,-2.420255,3.634054,-0.747999,-0.628786,9.182019,-9.066329,3.463258],[6.198018,-1.272394,9.797119,-4.593634,3.576319,1.796730,3.975477,0.266343,5.068205,2.564048],[-5.550638,1.820582,9.719221,1.113775,-3.456294,0.438518,8.395724,6.865782,6.121277,-3.842635],[9.192390,-1.639421,5.296920,0.863051,-2.372551,9.804944,-1.914239,4.785688,1.922097,8.390855],[0.616002,-1.141436,-7.357258,-2.377833,6.317925,-3.019880,-2.028380,-1.997397,5.563023,-2.610998],[-7.571334,-3.701441,-2.831875,1.944469,-9.527777,-8.778072,8.058967,-9.342025,-4.706927,9.942186]],[[6.202084,-5.788240,7.815664,8.365855,-4.582995,-9.071973,-6.623534,-1.355372,-7.994521,-5.025157],[-2.194245,-6.315686,7.506756,-4.837828,5.485833,-9.198783,2.874639,-6.547466,8.249207,1.560031],[8.784343,-4.727571,-3.959779,1.786821,-0.033594,-5.961726,-5.498540,2.456578,1.449113,6.962317],[2.471845,-9.512325,-1.455995,3.417601,-8.195117,7.250040,-9.609428,9.740704,-4.746088,3.708665],[8.261874,-2.547164,5.531034,7.897775,7.171874,4.449438,-5.205200,7.446478,5.570978,-3.043009],[-3.933344,2.085781,-0.183517,7.477485,4.905053,2.180036,-7.878400,-4.074758,3.617391,0.333369],[-9.288295,-3.050852,-7.513742,5.613482,-8.547220,8.754697,-3.610081,-4.783981,-9.781411,1.110054],[-4.160614,-8.619183,-3.285764,-2.384752,-4.540095,-1.273983,9.229396,-3.859719,0.506692,6.442009],[4.250615,-8.492557,1.633330,-7.301841,-9.075921,-5.983901,2.284872,-9.874026,6.505035,4.489933],[-5.408835,5.476850,-4.150201,9.131652,7.051043,-1.006846,5.593188,-5.960386,8.229137,-3.879760],[3.020177,-8.152009,6.996664,-9.465663,-3.632818,8.480483,-9.141562,-8.658496,-3.883400,-3.229780],[-2.999081,-7.562512,1.878576,-9.528712,-2.691891,-8.548605,5.298143,-1.123227,9.400218,-6.964163],[-6.106915,-5.167294,-4.349731,-9.703035,-2.015971,-3.694903,4.208586,0.691751,-9.824000,1.536559],[-9.422435,-7.567989,-7.532755,6.047335,1.269459,5.162458,2.024250,-6.841571,-4.844812,-5.865795]]], dtype = "float32")#candidate|7325|(11, 14, 10)|const|float32
bop_7326 = relay.greater_equal(call_7294.astype('bool'), relay.reshape(const_7325.astype('bool'), relay.shape_of(call_7294))) # shape=(11, 14, 10)
bop_7329 = relay.greater_equal(call_7295.astype('bool'), relay.reshape(const_7325.astype('bool'), relay.shape_of(call_7295))) # shape=(11, 14, 10)
func_2152_call = mod.get_global_var('func_2152')
func_2156_call = mutated_mod.get_global_var('func_2156')
const_7340 = relay.const([6.543615,-1.944099,-9.210367], dtype = "float64")#candidate|7340|(3,)|const|float64
const_7341 = relay.const([7.166321,-6.581169,-5.025123,-7.835156,-0.325941,-0.140554,-0.622843,-0.147870,1.830348,8.064097,8.442876,-7.666154,4.075328,-2.865872,-7.955857,7.617108,-0.411033,4.422261,-8.229900,8.751529,-9.293814,7.633736,-1.973272,-3.591209,-0.473479,1.678119,-0.236262,7.875746,-6.606043,0.291459,7.533182,9.207717,-1.517634], dtype = "float64")#candidate|7341|(33,)|const|float64
var_7342 = relay.var("var_7342", dtype = "int16", shape = (25, 10))#candidate|7342|(25, 10)|var|int16
call_7339 = relay.TupleGetItem(func_2152_call(relay.reshape(const_7340.astype('float64'), [3, 1, 1]), relay.reshape(const_7341.astype('float64'), [3, 1, 11]), relay.reshape(var_7342.astype('int16'), [250,]), ), 1)
call_7343 = relay.TupleGetItem(func_2156_call(relay.reshape(const_7340.astype('float64'), [3, 1, 1]), relay.reshape(const_7341.astype('float64'), [3, 1, 11]), relay.reshape(var_7342.astype('int16'), [250,]), ), 1)
func_4419_call = mod.get_global_var('func_4419')
func_4421_call = mutated_mod.get_global_var('func_4421')
const_7357 = relay.const([6,3,5,4,-10,1,4,9,-1,7,6,-5,-5,-4,-5,2,-4,1,-6,9,7,-9,-2,-6,-5,-10,6,-5,-2,-6,3,8,-7,-9,5,-9,6,5,10,-2,4,-7,-7,-1,-9,-6,9,4,-5,6,-10,4,7,-5,-1,-4,-7,7,-3,-3,-7,7,-2,-1,3,-9,-4,-1,2,-10,1,10,-4,3,5,-2,-4,-8,9,5,7,-6,-7,-6,3,2,1,-5,8,4,6,6,4,-8,5,6,-5,7,-9,3,-10,-9,6,9,2,7,-9,7,1,8,-9,10,-7,8,-1,-2,-5,-5,5,-6,9,-4,-8,-4,8,-7,-6,-3], dtype = "int8")#candidate|7357|(128,)|const|int8
call_7356 = func_4419_call(relay.reshape(const_7357.astype('int8'), [16, 2, 4]))
call_7358 = func_4419_call(relay.reshape(const_7357.astype('int8'), [16, 2, 4]))
func_3876_call = mod.get_global_var('func_3876')
func_3879_call = mutated_mod.get_global_var('func_3879')
const_7364 = relay.const([5.538106,8.655482,4.978338,-9.092921,-5.497295,5.259409,-4.211803,-5.817538,4.227653,3.860127,-0.911694,-7.928650,1.572218,2.920490,-3.785262,4.636705,8.481142,3.448143,-9.250665,2.849696,-3.171108,5.033311,-1.545793,-3.130272,5.522601,-9.237038,-8.942699,6.696740], dtype = "float64")#candidate|7364|(28,)|const|float64
call_7363 = relay.TupleGetItem(func_3876_call(relay.reshape(const_7364.astype('float64'), [14, 2, 1])), 0)
call_7365 = relay.TupleGetItem(func_3879_call(relay.reshape(const_7364.astype('float64'), [14, 2, 1])), 0)
func_6833_call = mod.get_global_var('func_6833')
func_6835_call = mutated_mod.get_global_var('func_6835')
call_7368 = relay.TupleGetItem(func_6833_call(), 0)
call_7369 = relay.TupleGetItem(func_6835_call(), 0)
func_4419_call = mod.get_global_var('func_4419')
func_4421_call = mutated_mod.get_global_var('func_4421')
call_7370 = func_4419_call(relay.reshape(const_7357.astype('int8'), [16, 2, 4]))
call_7371 = func_4419_call(relay.reshape(const_7357.astype('int8'), [16, 2, 4]))
output = relay.Tuple([bop_7326,call_7339,const_7340,const_7341,var_7342,call_7356,const_7357,call_7363,const_7364,call_7368,call_7370,])
output2 = relay.Tuple([bop_7329,call_7343,const_7340,const_7341,var_7342,call_7358,const_7357,call_7365,const_7364,call_7369,call_7371,])
func_7372 = relay.Function([var_7342,], output)
mod['func_7372'] = func_7372
mod = relay.transform.InferType()(mod)
var_7373 = relay.var("var_7373", dtype = "int16", shape = (25, 10))#candidate|7373|(25, 10)|var|int16
output = func_7372(var_7373)
func_7374 = relay.Function([var_7373], output)
mutated_mod['func_7374'] = func_7374
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6492_call = mod.get_global_var('func_6492')
func_6494_call = mutated_mod.get_global_var('func_6494')
call_7423 = func_6492_call()
call_7424 = func_6492_call()
func_5477_call = mod.get_global_var('func_5477')
func_5479_call = mutated_mod.get_global_var('func_5479')
const_7441 = relay.const([-5.382061,7.923205,7.487303,-9.132848,-4.477227,-0.593169,-9.253608,1.109632,3.288085,8.069171,9.544344,8.203642,8.627855,7.383243,6.427180,-9.791588,-9.288969,3.947167,7.911155,-5.686924,0.724976,-6.598074,2.800698,-4.107456,3.099949,6.235181,1.209566,-1.387500,-6.732722,8.512645,0.082713,-8.981118,4.598202,7.805008,0.876791,-6.762340,-7.750242,8.979489,3.274508,-5.610233,6.210922,0.175502,8.722072,0.376643,0.302352,1.177741,0.906816,-3.710000,4.431495,5.389292,1.947570,8.938588,5.832032,4.199834,-8.868934,0.567385,0.433200,-6.406016,-8.860646,3.887017,-2.871279,-3.505834,-4.741568,-7.108391,-2.840339,-6.578291,-3.475812,3.629734,-9.643757,-9.948215,3.800526,0.389231,-8.537725,1.632772,9.417253,-3.050640,6.610393,6.411347,-7.195562,4.806669,-2.100080,-0.425018,8.015407,-4.319336,8.686137,-1.553916,-1.694547,4.693733,-7.668415,1.940101,5.198744,6.407943,-3.075007,-6.397252,9.398002,4.247749,-8.324872,-9.767299,0.749139,8.603886,5.789963,6.116849,2.832466,-1.878530,1.062357,-0.912282,2.081058,0.611352,-3.284758,-8.815480], dtype = "float64")#candidate|7441|(110,)|const|float64
call_7440 = relay.TupleGetItem(func_5477_call(relay.reshape(const_7441.astype('float64'), [10, 1, 11])), 0)
call_7442 = relay.TupleGetItem(func_5479_call(relay.reshape(const_7441.astype('float64'), [10, 1, 11])), 0)
var_7450 = relay.var("var_7450", dtype = "float32", shape = (11, 14, 10))#candidate|7450|(11, 14, 10)|var|float32
bop_7451 = relay.add(call_7423.astype('uint64'), relay.reshape(var_7450.astype('uint64'), relay.shape_of(call_7423))) # shape=(11, 14, 10)
bop_7454 = relay.add(call_7424.astype('uint64'), relay.reshape(var_7450.astype('uint64'), relay.shape_of(call_7424))) # shape=(11, 14, 10)
output = relay.Tuple([call_7440,const_7441,bop_7451,])
output2 = relay.Tuple([call_7442,const_7441,bop_7454,])
func_7459 = relay.Function([var_7450,], output)
mod['func_7459'] = func_7459
mod = relay.transform.InferType()(mod)
var_7460 = relay.var("var_7460", dtype = "float32", shape = (11, 14, 10))#candidate|7460|(11, 14, 10)|var|float32
output = func_7459(var_7460)
func_7461 = relay.Function([var_7460], output)
mutated_mod['func_7461'] = func_7461
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7001_call = mod.get_global_var('func_7001')
func_7002_call = mutated_mod.get_global_var('func_7002')
call_7463 = relay.TupleGetItem(func_7001_call(), 0)
call_7464 = relay.TupleGetItem(func_7002_call(), 0)
output = relay.Tuple([call_7463,])
output2 = relay.Tuple([call_7464,])
func_7472 = relay.Function([], output)
mod['func_7472'] = func_7472
mod = relay.transform.InferType()(mod)
mutated_mod['func_7472'] = func_7472
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7472_call = mutated_mod.get_global_var('func_7472')
call_7473 = func_7472_call()
output = call_7473
func_7474 = relay.Function([], output)
mutated_mod['func_7474'] = func_7474
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6445_call = mod.get_global_var('func_6445')
func_6447_call = mutated_mod.get_global_var('func_6447')
call_7482 = relay.TupleGetItem(func_6445_call(), 0)
call_7483 = relay.TupleGetItem(func_6447_call(), 0)
func_4458_call = mod.get_global_var('func_4458')
func_4461_call = mutated_mod.get_global_var('func_4461')
const_7485 = relay.const([True,True,True,False,True,False,False,True,False,False,False,False,False,True,False,True,False,True,False,True,False,False,True,True,False,True,True,False,False,True,True,True,False,False,True,False,True,True,True,True,True,True,True,True,False,True,False,False,False,False,False,False,False,True,False,False,True,True,True,True,False,False,False,True,False,True,True,True,False,False,True,True,True,False,False,True,False,False,False,False,False,False,True,True,True,True,True,False,False,False,True,False,False,True,True,True,False,False,False,False,False,True,True,True,False,True,True,False,True,True,False,False,True,True,True,False,False,False,True,False,True,False,True,True,False,False,False,False,True,True,True,True,False,False,True,False,False,False,False,True,True,True,True,False,False,False,False,True,True,True,True,False,False,False,True,False,True,False,False,False,True,True,True,True,False,False,False,False,False,False,True,True,True,True,True,False,True,False,True,False,True,False,False,True,True,False,True,False,False,False,False,True,True,True,False,True,False,False,True,False,True,True,False,False,False,True,False,True,True,True,False,True,False,False,False,True,False,False,True,False,False,True,True,True,False,False,True,False,False,False,True,True,True,True,False,True,False,False,True,False,False,True,True,False,True,True,True,False,True,False,False,True,True,False,True,True,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,True,True,False,True,True,True,True,False,True,True,False,False,True,True,False,True,True,False,False,True,True,False,True,True,False,True,True,False,True,False,True,True,True,True,False,False,True,True,True,False,False,True,True,False,False,True,True,True,True,True,False,False,True,False,True,True,True,False,False,False,False,True,True,False,False,True,False,True,False,True,False,True,False,True,True,False,False,False,True,True,False,False,True,True,False,False,True,True,False,True,True,True,False,True,True,False,False,True,False,True,True,False,False,True,True,True,False,True,True,True,False,True,True,True,True,True,True,False,False,True,True,False,False,True,True,True,True,True,True,True,False,False,True,False,True,False,True,True,True,True,True,True,False,False,False,True,False,True,True,False,True,False,False,True,True,True,True,True,True,False,False,True,False,False,False,True,False,True,True,False,False,False,True,True,False,False,False,False,True,False,True,False,False,True,False,False,True,True,True,False,True,True,True,True,True,True,False,False,True,True,False,True,True,True,False,False,True,True,False,True,True,True,True,True,True,True,True,False,False,False,False,True,False,True,False,True,True,True,True,False,False,True,True,False,True,False,False,False,True,False,True,False,False,True,True,True,False,True,True,True,True,True,False,True,False,True,True,True,False,False,True,False,False,True,False,True,True,False,True,False,True,True,False,True,False,True,False,False,False,True,True,False,False,False,True,False,True,False,False,True,True,True,True,True,False,False,False,True,False,True,True,True,False,True,False,False,True,False,True,True,True,False,True,True,False,True,False,True,True,False,False,False,True,False,True,False,False,True,True,False,True,True,False,True,False,False,False,True,True,True,True,False,True,False,False,False,True,False,True,True,False,False,True,True,False,True,True,False,False,True,False,True,False,False,True,False,True,True,False,False,False,True,False,True,True,False,True,True,False,True,False,False,True,True,False,True,False,True,True,True,False,True,False,False,False,True,True,True,False,True,True,False,False,True,False,True,False,True,False,False,False,False,True,True,False,True,False,False,False,True,True,True,True,False,True,True,True,False,False,False,True,True,False,True,False,False,True,False,False,True,True,False,False,False,False,False,True,False,False,True,False,False,False,True,False,False,False,True,False,False,True,False,True,False,True,True,False,False,False,False,False,True,True,False,True,True,False,False,True,False,True,True,False,False,False,False,False,False,False,False,False,True,False,True,True,False,True,False,False,True,False,False,False,True,False,True,False,False,True,False,True,False,True,True,False,False,False,False,False,False,True,True,True,True,False,True,True,True,True,False,False,True,False,False,True,True,True,True,True,False,True,False,True,True,False,True,True,False,False,True,False,True,False,True,False,True,False,False,False,True,False,True,True,False,True,False,True,True,True,True,True,True,True,False,False,True,False,True,True,False,False,True,True,True,True,True,False,True,True,False,True,True,True,False,False,True,False,True,False,True,False,True,False,False,False,False,True,False,True,True,False,False,False,True,True,True,False,True,True,False,True,False,True,True,False,True,False,False,True,False,True,True,True,False,True,True,False,True,True,False,False,True,False,False,False,True,False,True,False,True,True,True,True,False,False,True,False,False,True,True,False,False,False,False,False,False,True,True,True,True,True,True,False,True,True,True,False,True,False,False,False,True,True,True,True,False,False,True,False,True,False,True,False,True,True,False,True,False,True,False,True,False,True,False,True,False,True,True,False,True,True,False,False,True,False,True,True,False,True,True,False,True,False,False,False,True,False,True,False,False,True,True,False,False,True,False,True,False,True,True,True,True,True,True,False,True,True,True,False,False,False,False,True,True,False,False,False,False,True,False,False,True,False,True,True,True,True,False,False,False,True,True,True,True,True,True,False,False,False,False,False,True,False,True,False,False,True,False,True,True,True,True,False,True,False,True,False,True,False,False,False,True,False,True,False,True,True,True,True,True,True,True,False,False,False,False,False,False,True,True,True,False,True,True,True,True,False,True,True,False,False,True,False,False,False,False,True,True,True,False,True,True,True,True,True,True,False,True,True,True,True,False,True,False,True,False,True,False,True,False,False,True,True,False,True,False,True,False,True,False,False,False,True,True,False,False,True,False,False,False,True,True,True,False,True,False,False,False,False,True,True,True,True,False,True,False,False,False,True,False,True,True,False,False,True,False,True,False,False,True,False,True,False,True,True,True,False,True,True,False,True,False,True,False,True,True,False,True,True,True,True,False,True,False,True,False,False,False,False,True,True,False,False,True,False,False,False,False,True,True,False,False,False,False,False,True,True,True,False,False,False,False,True,True,False,False,True,False,False,True,True,True,False,False,False,False,False,False,False,True,True,False,False,True,False,False,False,True,True,True,False,False,True,True,True,True,True,True,True,True,False,True,False,False,True,False,False,True,False,False,False,True,True,False,True,True,True,True,True,False,False,True,False,True,False,False,False,True,True,False,False,True,True,False,False,False,False,False,True,False,True,True,True,False,False,False,True,True,False,False,True,False,True,False,False,True,False,False,False,True,False,False,False,True,False,False,True,False,True,False,False,False,False,False,False,False,False,True,True,False,False,False,True,True,False,True,True,False,True,True,True,False,False,False,True,False,False,True,True,True,True,True,True,True,True,True,True,False,True,False,False,True,True,True,False,True,False,True,False,False,True,True,False,True,True,True,True,False,False,False,True,False,False,True,True,True,False,True,True,True,True,False,False,False,True,True,False,False,False,False,False,True,True,False,False,True,True,False,True,False,False,False,False,False,True,True,False,False,False,True,True,False,True,False,False,True,True,False,True,True,False,True,True,False,True,True,True,False,True,False,False,False,False,False,False,False,False,False,False,False,False,True,False,True,True,True,False,False,True,True,False,False,False,True,False,True,False,True,False,False,True,False,False,True,True,False,True,True,True,True,True,True,True,False,False,False,True,True,True,False,False,True,False,True,False,False,False,False,True,False,False,False,True,False,False,False,True,True,True,False,True,False,True,False,False,True,False,True,False,True,False,True,False,False,False,False,True,False,True,False,True,True,True,False,False,True,False,True,False,True,True,True,True,False,True,False,True,False,True,False,True,True,True,False,False,True,False,True,True,True,True,False,True,False,False,True,True,False,False,False,True,True,True,True,True,True,True,False,True,False,False,False,False,True,False,False,False,True,True,False,False,False,False,True,True,True,False,False,True,False,False,True,True,False,False,False,True,True,True,False,True,True,False,True,True,True,True,True,False,False,True,False,True,False,False,False,True,False,False,False,True,True,True,False,True,True,True,False,False,False,False,False,True,False,True,False,True,True,False,True,True,True,False,False,True,False,False,False,False,True,True,True,False,False,False,True,False,True,True,False,True,True,False,False,True,False,True,True,True,True,False,False,False,False,True,False,False,True,False,True,False,True,False,False,False,False,True,False,True,False,False,False,True,True,True,True,True,False,False,False,True,False,False,True,True,True,True,True,True,False,False,True,True,True,False,True,True,True,True,True,False,False,True,True,True,False,False,False,False,False,False,True,True,False,True,False,False,False,True,True,False,False,False,False,True,False,True,False,False,True,True,False,True,True,True,False,True,False,False,False,False,False,True,True,False,False,True,False,True,True,True,True,True,False,True,False,False,True,False,False,False,False,False,True,True,False,True,False,False,True,False,False,True,False,False,True,False,True,False,True,False,True,True,True,True,False,True,False,True,False,False,True,False,True,False,True,True,True,True,True,False,False,True,True,False,True,True,False,True,True,False,True,False,True,True,False,True,False,False,True,False,False,False,False,True,True,True,False,False,True,True,True,True,True,False,True,False,True,True,True,False,True,True,True,False,False,True,False,False,True,True,True,True,True,True,True,False,True,True,True,False,True,False,True,False,False,False,False,False,True,False,False,True,True,True,True,True,False,True,True,True,False,False,True,False,False,False,False,True,True,True,True,False,True,False,False,False,False,True,False,True,True,False,False,False,False,False,True,False,True,False,False,False,True,True,False,True,True,False,False,False,False,True,True,True,True,True,True,True,False,True,False,True,False,True,True,False,True,False,False,False,True,False,False,False,True,False,True,False,True,True,True,True,False,False,False,True,True,False,False,False,True,False,True,True,True,True,True,False,True,False,True,False,False,True,False,False,False,True,False,True,False,True,False,False,True,False,True,True,False,True,True,False,False,False,True,True,True,True,False,True,True,True,True,True,False,False,True,False,True,False,True,False,True,True,False,True,False,False,False,False,True,True,False,True,True,False,True,True,True,True,False,False,False,True,True,False,True,True,True,True,True,False,True,False,False,True,True,False,True,True,False,True,False,True,False,False,True,True,True], dtype = "bool")#candidate|7485|(2112,)|const|bool
call_7484 = relay.TupleGetItem(func_4458_call(relay.reshape(const_7485.astype('bool'), [16, 11, 12]), relay.reshape(const_7485.astype('bool'), [16, 11, 12]), ), 2)
call_7486 = relay.TupleGetItem(func_4461_call(relay.reshape(const_7485.astype('bool'), [16, 11, 12]), relay.reshape(const_7485.astype('bool'), [16, 11, 12]), ), 2)
output = relay.Tuple([call_7482,call_7484,const_7485,])
output2 = relay.Tuple([call_7483,call_7486,const_7485,])
func_7491 = relay.Function([], output)
mod['func_7491'] = func_7491
mod = relay.transform.InferType()(mod)
output = func_7491()
func_7492 = relay.Function([], output)
mutated_mod['func_7492'] = func_7492
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6833_call = mod.get_global_var('func_6833')
func_6835_call = mutated_mod.get_global_var('func_6835')
call_7517 = relay.TupleGetItem(func_6833_call(), 0)
call_7518 = relay.TupleGetItem(func_6835_call(), 0)
func_6873_call = mod.get_global_var('func_6873')
func_6875_call = mutated_mod.get_global_var('func_6875')
call_7519 = relay.TupleGetItem(func_6873_call(), 0)
call_7520 = relay.TupleGetItem(func_6875_call(), 0)
func_7152_call = mod.get_global_var('func_7152')
func_7153_call = mutated_mod.get_global_var('func_7153')
call_7521 = relay.TupleGetItem(func_7152_call(), 0)
call_7522 = relay.TupleGetItem(func_7153_call(), 0)
output = relay.Tuple([call_7517,call_7519,call_7521,])
output2 = relay.Tuple([call_7518,call_7520,call_7522,])
func_7538 = relay.Function([], output)
mod['func_7538'] = func_7538
mod = relay.transform.InferType()(mod)
mutated_mod['func_7538'] = func_7538
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7538_call = mutated_mod.get_global_var('func_7538')
call_7539 = func_7538_call()
output = call_7539
func_7540 = relay.Function([], output)
mutated_mod['func_7540'] = func_7540
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7001_call = mod.get_global_var('func_7001')
func_7002_call = mutated_mod.get_global_var('func_7002')
call_7602 = relay.TupleGetItem(func_7001_call(), 0)
call_7603 = relay.TupleGetItem(func_7002_call(), 0)
func_4158_call = mod.get_global_var('func_4158')
func_4162_call = mutated_mod.get_global_var('func_4162')
var_7605 = relay.var("var_7605", dtype = "float32", shape = ())#candidate|7605|()|var|float32
call_7604 = relay.TupleGetItem(func_4158_call(relay.reshape(var_7605.astype('float32'), []), relay.reshape(call_7602.astype('float32'), [15, 8, 16]), ), 0)
call_7606 = relay.TupleGetItem(func_4162_call(relay.reshape(var_7605.astype('float32'), []), relay.reshape(call_7602.astype('float32'), [15, 8, 16]), ), 0)
func_7194_call = mod.get_global_var('func_7194')
func_7195_call = mutated_mod.get_global_var('func_7195')
call_7621 = relay.TupleGetItem(func_7194_call(), 1)
call_7622 = relay.TupleGetItem(func_7195_call(), 1)
func_4419_call = mod.get_global_var('func_4419')
func_4421_call = mutated_mod.get_global_var('func_4421')
var_7639 = relay.var("var_7639", dtype = "int8", shape = (128,))#candidate|7639|(128,)|var|int8
call_7638 = func_4419_call(relay.reshape(var_7639.astype('int8'), [16, 2, 4]))
call_7640 = func_4419_call(relay.reshape(var_7639.astype('int8'), [16, 2, 4]))
bop_7644 = relay.bitwise_and(call_7604.astype('uint16'), var_7605.astype('uint16')) # shape=(15, 8, 16)
bop_7647 = relay.bitwise_and(call_7606.astype('uint16'), var_7605.astype('uint16')) # shape=(15, 8, 16)
output = relay.Tuple([call_7602,call_7621,call_7638,var_7639,bop_7644,])
output2 = relay.Tuple([call_7603,call_7622,call_7640,var_7639,bop_7647,])
func_7659 = relay.Function([var_7605,var_7639,], output)
mod['func_7659'] = func_7659
mod = relay.transform.InferType()(mod)
var_7660 = relay.var("var_7660", dtype = "float32", shape = ())#candidate|7660|()|var|float32
var_7661 = relay.var("var_7661", dtype = "int8", shape = (128,))#candidate|7661|(128,)|var|int8
output = func_7659(var_7660,var_7661,)
func_7662 = relay.Function([var_7660,var_7661,], output)
mutated_mod['func_7662'] = func_7662
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6964_call = mod.get_global_var('func_6964')
func_6965_call = mutated_mod.get_global_var('func_6965')
call_7670 = func_6964_call()
call_7671 = func_6964_call()
uop_7704 = relay.sigmoid(call_7670.astype('float64')) # shape=(11, 14, 10)
uop_7706 = relay.sigmoid(call_7671.astype('float64')) # shape=(11, 14, 10)
output = uop_7704
output2 = uop_7706
func_7714 = relay.Function([], output)
mod['func_7714'] = func_7714
mod = relay.transform.InferType()(mod)
mutated_mod['func_7714'] = func_7714
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7714_call = mutated_mod.get_global_var('func_7714')
call_7715 = func_7714_call()
output = call_7715
func_7716 = relay.Function([], output)
mutated_mod['func_7716'] = func_7716
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7714_call = mod.get_global_var('func_7714')
func_7716_call = mutated_mod.get_global_var('func_7716')
call_7738 = func_7714_call()
call_7739 = func_7714_call()
output = call_7738
output2 = call_7739
func_7751 = relay.Function([], output)
mod['func_7751'] = func_7751
mod = relay.transform.InferType()(mod)
output = func_7751()
func_7752 = relay.Function([], output)
mutated_mod['func_7752'] = func_7752
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7491_call = mod.get_global_var('func_7491')
func_7492_call = mutated_mod.get_global_var('func_7492')
call_7759 = relay.TupleGetItem(func_7491_call(), 0)
call_7760 = relay.TupleGetItem(func_7492_call(), 0)
func_4330_call = mod.get_global_var('func_4330')
func_4335_call = mutated_mod.get_global_var('func_4335')
const_7777 = relay.const([[-2],[10],[10],[-9],[2],[5],[4],[-1],[9],[2],[7],[1],[-1],[-8],[8],[4],[2],[9],[5],[-10],[-3],[-1],[9],[6],[7],[-1],[3],[4],[2],[1],[-4],[2],[-10],[10],[3],[4],[-3],[3],[-8],[1],[4],[-2],[5],[1],[10],[1],[-10],[1],[-6],[-5],[1],[4],[-6],[-9],[5],[-2],[5],[8],[-1],[-9],[-2],[4],[5],[-1],[-6],[-1],[8],[4],[-2],[10],[4],[-6],[7],[-1],[2],[7],[2],[7],[-7],[-10],[7],[-4],[7],[-2],[-1],[-6],[-6],[6],[-6],[-2],[-6],[-6],[10],[-6],[4],[-10],[7],[9],[-1],[3],[-3],[1],[-1],[5],[-3],[-10],[5],[9],[-1],[-10],[3],[5],[3],[-2],[-5],[8],[-3],[-1],[5],[4],[10],[9],[9],[-1],[-7],[5],[-1],[9],[-6],[-10],[-5],[-1],[7],[-5],[-8],[2],[-2],[-3],[1],[3],[-5],[7],[1],[-1],[7],[10],[-2],[-2],[-4],[3],[5],[-10],[-6],[-10],[-7],[6],[-5],[9],[9],[5],[-3],[-7],[7],[-6],[-6],[1],[-4],[-10],[3],[7],[5],[3],[6],[-6],[-4],[-10],[5],[4],[9],[-2],[-10],[-8],[-3],[-5],[8],[-10],[5],[3],[-7],[-6],[-9],[8],[6],[-5],[-5],[-1],[2],[-9],[6],[3],[6],[-7],[9],[2],[-8],[-9],[-7],[-2],[-10],[-9],[5],[-9],[-7],[-4],[-2],[7],[2],[-9],[-5],[-9],[3],[1],[-6],[6],[-1],[2],[-5],[5],[-1],[7],[5],[3],[9],[10],[-7],[6],[-8],[2],[1],[1],[-1],[1],[4],[-9],[4],[10],[1],[1],[-5],[5],[-4],[2],[9],[6],[-9],[1],[-10],[7],[-10],[-8],[-2],[6],[-10],[-5],[-9],[-7],[-3],[-5],[-2],[-2],[9],[-5],[8],[10],[-8],[-2],[7],[-6],[-8],[3]], dtype = "uint8")#candidate|7777|(280, 1)|const|uint8
const_7778 = relay.const(-8, dtype = "int64")#candidate|7778|()|const|int64
call_7776 = relay.TupleGetItem(func_4330_call(relay.reshape(const_7777.astype('uint8'), [4, 14, 5]), relay.reshape(const_7777.astype('uint8'), [4, 14, 5]), relay.reshape(const_7778.astype('int64'), []), ), 2)
call_7779 = relay.TupleGetItem(func_4335_call(relay.reshape(const_7777.astype('uint8'), [4, 14, 5]), relay.reshape(const_7777.astype('uint8'), [4, 14, 5]), relay.reshape(const_7778.astype('int64'), []), ), 2)
func_6532_call = mod.get_global_var('func_6532')
func_6533_call = mutated_mod.get_global_var('func_6533')
call_7780 = relay.TupleGetItem(func_6532_call(), 0)
call_7781 = relay.TupleGetItem(func_6533_call(), 0)
output = relay.Tuple([call_7759,call_7776,const_7777,const_7778,call_7780,])
output2 = relay.Tuple([call_7760,call_7779,const_7777,const_7778,call_7781,])
func_7783 = relay.Function([], output)
mod['func_7783'] = func_7783
mod = relay.transform.InferType()(mod)
output = func_7783()
func_7784 = relay.Function([], output)
mutated_mod['func_7784'] = func_7784
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7714_call = mod.get_global_var('func_7714')
func_7716_call = mutated_mod.get_global_var('func_7716')
call_7823 = func_7714_call()
call_7824 = func_7714_call()
output = relay.Tuple([call_7823,])
output2 = relay.Tuple([call_7824,])
func_7825 = relay.Function([], output)
mod['func_7825'] = func_7825
mod = relay.transform.InferType()(mod)
mutated_mod['func_7825'] = func_7825
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7825_call = mutated_mod.get_global_var('func_7825')
call_7826 = func_7825_call()
output = call_7826
func_7827 = relay.Function([], output)
mutated_mod['func_7827'] = func_7827
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7060_call = mod.get_global_var('func_7060')
func_7062_call = mutated_mod.get_global_var('func_7062')
call_7839 = func_7060_call()
call_7840 = func_7060_call()
output = call_7839
output2 = call_7840
func_7868 = relay.Function([], output)
mod['func_7868'] = func_7868
mod = relay.transform.InferType()(mod)
mutated_mod['func_7868'] = func_7868
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7868_call = mutated_mod.get_global_var('func_7868')
call_7869 = func_7868_call()
output = call_7869
func_7870 = relay.Function([], output)
mutated_mod['func_7870'] = func_7870
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6833_call = mod.get_global_var('func_6833')
func_6835_call = mutated_mod.get_global_var('func_6835')
call_7876 = relay.TupleGetItem(func_6833_call(), 0)
call_7877 = relay.TupleGetItem(func_6835_call(), 0)
func_6492_call = mod.get_global_var('func_6492')
func_6494_call = mutated_mod.get_global_var('func_6494')
call_7878 = func_6492_call()
call_7879 = func_6492_call()
output = relay.Tuple([call_7876,call_7878,])
output2 = relay.Tuple([call_7877,call_7879,])
func_7880 = relay.Function([], output)
mod['func_7880'] = func_7880
mod = relay.transform.InferType()(mod)
mutated_mod['func_7880'] = func_7880
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7880_call = mutated_mod.get_global_var('func_7880')
call_7881 = func_7880_call()
output = call_7881
func_7882 = relay.Function([], output)
mutated_mod['func_7882'] = func_7882
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7868_call = mod.get_global_var('func_7868')
func_7870_call = mutated_mod.get_global_var('func_7870')
call_7883 = func_7868_call()
call_7884 = func_7868_call()
output = call_7883
output2 = call_7884
func_7887 = relay.Function([], output)
mod['func_7887'] = func_7887
mod = relay.transform.InferType()(mod)
mutated_mod['func_7887'] = func_7887
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7887_call = mutated_mod.get_global_var('func_7887')
call_7888 = func_7887_call()
output = call_7888
func_7889 = relay.Function([], output)
mutated_mod['func_7889'] = func_7889
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6873_call = mod.get_global_var('func_6873')
func_6875_call = mutated_mod.get_global_var('func_6875')
call_7904 = relay.TupleGetItem(func_6873_call(), 0)
call_7905 = relay.TupleGetItem(func_6875_call(), 0)
func_4458_call = mod.get_global_var('func_4458')
func_4461_call = mutated_mod.get_global_var('func_4461')
const_7911 = relay.const([True,True,True,True,False,True,True,True,False,True,True,False,True,False,False,True,True,True,True,False,False,True,True,True,False,False,False,True,False,True,True,False,False,True,True,False,False,False,False,False,True,True,False,True,True,True,False,False,False,True,False,False,True,True,False,True,True,False,False,False,True,False,False,True,True,True,False,True,True,False,False,True,True,False,False,False,True,False,False,False,True,True,False,False,False,False,True,False,True,False,False,False,False,False,False,True,True,False,False,False,False,False,True,True,True,True,True,False,True,True,False,True,False,True,True,True,True,True,True,False,True,True,True,True,True,True,False,False,True,False,False,True,True,False,False,False,True,True,False,True,False,True,False,True,False,True,False,True,False,True,False,True,False,True,False,True,False,False,True,True,True,True,False,False,True,False,False,True,True,False,False,True,True,False,False,True,True,False,True,False,True,True,True,True,False,False,False,False,False,True,True,True,True,True,True,False,True,True,True,False,False,True,True,True,True,False,True,True,False,False,True,False,True,False,True,True,False,False,True,True,True,False,False,False,True,False,True,False,True,False,False,True,False,True,True,True,True,False,False,False,False,True,False,True,False,True,False,False,True,True,True,True,True,False,True,False,False,False,False,True,True,False,True,True,True,False,False,True,False,True,True,False,False,True,True,False,False,True,True,False,False,False,True,True,False,False,True,False,True,True,False,False,True,True,True,False,True,True,True,True,False,False,True,True,True,False,True,False,True,False,False,True,True,True,False,True,True,True,False,False,False,False,False,True,True,True,True,False,True,True,True,True,True,False,False,True,False,False,True,True,False,True,False,True,False,False,True,True,True,True,False,True,True,False,False,False,False,True,False,True,False,True,False,False,True,True,True,True,True,False,False,True,True,False,True,True,False,False,False,True,True,False,False,False,True,False,False,True,True,False,False,False,True,False,False,False,True,True,True,False,True,True,False,False,True,True,True,True,True,True,False,False,False,False,False,True,False,False,False,True,False,False,True,True,False,True,True,False,False,False,False,True,True,False,True,False,True,False,True,False,False,True,False,False,True,False,True,True,False,True,False,False,True,False,True,True,True,False,True,False,False,False,True,True,False,True,True,False,True,False,False,True,True,True,True,False,True,False,True,False,True,False,False,False,False,False,False,True,False,True,True,True,True,True,False,False,False,False,False,True,False,False,True,False,True,False,False,True,True,False,True,False,False,True,True,False,True,True,True,False,False,True,True,False,False,True,False,False,True,False,True,False,False,False,False,False,True,False,True,False,False,False,False,False,True,True,False,True,False,False,True,True,True,False,True,True,True,True,True,True,True,False,True,True,True,True,True,False,True,False,False,False,False,False,False,False,False,True,True,False,True,False,True,False,False,False,True,True,True,False,False,False,False,True,False,True,False,True,True,False,False,True,False,False,False,False,False,False,True,True,False,False,True,False,False,True,False,True,True,False,True,True,False,False,True,False,True,True,False,True,True,False,False,True,False,False,False,True,False,True,False,True,False,False,True,False,True,True,False,False,True,True,False,False,True,True,False,True,False,False,False,False,False,False,True,True,True,True,False,True,True,False,False,True,False,True,True,False,True,True,False,False,True,False,False,False,True,True,True,False,True,True,False,False,False,True,True,True,True,True,False,False,True,True,True,False,False,False,False,True,False,False,False,True,True,False,True,False,True,True,False,True,False,False,True,False,False,False,True,True,True,False,True,False,True,False,False,True,False,False,True,False,True,True,True,False,True,True,False,True,False,True,False,False,True,True,True,True,True,False,False,False,False,True,False,True,True,True,True,False,True,False,False,False,True,False,False,False,True,True,True,True,False,True,True,True,False,False,True,True,True,True,True,True,True,False,True,False,True,False,False,False,False,True,True,True,True,True,True,False,False,True,True,False,False,False,False,True,True,True,False,False,False,False,True,True,False,False,False,True,False,False,True,False,True,False,True,False,False,True,False,False,False,True,True,False,False,True,True,True,False,False,True,False,False,False,False,False,True,False,True,True,False,False,False,False,True,True,False,True,False,True,True,False,False,False,True,False,True,False,True,True,False,False,False,False,True,False,False,False,False,True,True,False,False,True,False,True,True,True,False,True,False,True,False,False,False,True,True,True,True,False,True,False,True,True,False,False,True,True,False,True,False,True,True,False,True,False,True,False,True,True,True,True,True,True,True,True,False,False,False,False,True,True,False,False,False,False,False,True,True,False,False,False,True,False,False,False,False,False,False,True,True,False,False,False,True,True,True,False,False,False,False,True,True,False,True,False,False,True,True,False,True,False,False,False,False,False,True,False,False,True,True,False,True,True,False,True,False,False,True,False,False,True,True,True,True,False,True,True,True,True,True,False,True,True,True,True,False,False,True,False,True,False,False,True,True,True,False,True,True,True,False,True,False,True,False,True,False,False,False,True,True,False,False,False,True,True,True,True,True,False,False,False,False,False,True,True,True,True,False,False,False,False,True,False,False,False,True,False,False,False,True,True,False,True,True,True,False,False,True,True,False,True,False,False,True,True,True,True,True,True,True,True,False,True,False,False,True,True,False,True,True,True,False,True,True,True,True,True,True,False,True,True,True,True,True,False,False,False,True,True,True,True,True,True,False,True,True,True,False,True,False,False,True,False,True,False,True,False,True,False,False,False,True,True,True,False,False,False,False,True,True,True,False,False,True,False,True,False,True,False,False,True,False,True,True,True,True,False,False,False,False,False,True,True,False,False,True,False,False,True,True,False,True,False,False,False,False,False,False,False,False,False,True,False,True,True,True,False,True,True,True,False,False,False,True,False,False,True,False,True,False,True,True,True,True,True,True,False,True,False,False,True,False,True,True,False,False,True,False,False,False,True,False,False,True,True,False,False,False,False,True,True,False,False,False,True,True,False,True,True,False,True,False,False,True,False,False,True,True,True,True,True,False,True,False,False,True,False,False,True,True,True,False,True,True,True,False,False,True,False,True,True,True,False,True,False,False,False,False,True,True,True,False,True,True,False,True,False,True,True,True,False,False,False,True,True,True,True,False,False,True,True,True,True,True,False,True,True,False,True,False,True,True,True,True,False,True,False,False,False,False,True,False,False,True,True,False,False,True,False,False,False,True,True,True,True,False,True,False,False,False,True,False,True,False,True,True,True,True,True,False,True,True,False,False,False,False,False,True,True,False,True,True,True,True,True,False,True,False,True,True,False,False,True,False,False,False,True,True,False,True,True,True,False,False,True,False,False,True,True,True,True,True,False,True,False,True,True,True,True,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,True,True,True,True,True,False,False,False,True,True,True,True,False,True,False,False,True,True,False,False,True,False,False,True,True,False,False,False,False,False,False,True,True,True,True,False,False,True,True,True,False,False,True,True,True,True,True,True,False,True,True,True,True,True,True,False,False,True,False,False,True,True,True,False,False,False,True,False,False,False,False,False,False,True,True,False,False,False,True,True,True,False,False,False,True,True,True,True,False,True,True,True,False,True,False,True,True,True,True,True,True,True,False,True,False,True,True,True,False,False,False,True,False,False,False,False,False,True,True,False,False,True,False,True,False,False,False,True,True,True,True,False,True,True,True,True,False,True,False,False,True,False,False,False,True,False,False,True,True,True,True,True,False,True,False,False,True,False,False,False,False,True,False,True,False,False,False,False,True,True,True,False,True,True,False,False,True,False,True,False,False,True,True,False,False,False,True,False,False,True,False,False,False,True,True,False,True,False,False,False,True,True,False,False,False,True,True,True,True,False,True,True,True,True,False,False,True,True,False,True,False,False,False,False,True,True,False,False,True,False,False,False,False,True,True,False,False,False,False,True,False,True,True,False,False,True,False,True,False,False,True,False,False,True,False,False,False,False,False,False,False,True,False,False,False,True,True,False,True,True,True,False,False,False,False,True,True,False,False,True,False,True,True,False,False,True,False,True,True,True,True,False,False,True,False,False,True,True,False,False,False,True,False,True,False,False,False,True,False,False,True,False,False,False,True,False,False,True,True,True,False,False,True,False,False,False,False,True,True,False,True,False,False,False,True,False,False,True,True,True,True,False,True,True,True,False,False,True,False,True,False,False,False,False,True,False,False,True,True,True,False,False,True,False,False,False,False,True,True,True,False,True,False,True,False,True,False,False,False,False,False,False,False,False,False,True,False,False,True,True,False,True,True,True,True,False,False,True,True,True,False,True,False,False,False,True,True,False,True,True,False,True,False,True,True,False,False,True,True,True,False,True,False,False,False,True,False,False,False,True,False,True,False,False,True,False,True,True,True,True,False,True,False,False,False,False,True,True,True,False,False,False,True,True,False,True,False,False,False,True,True,False,False,True,False,True,True,False,False,False,True,True,False,True,True,False,True,False,True,True,False,False,True,True,True,True,True,True,True,True,False,False,True,False,True,True,False,False,True,False,True,False,True,True,False,True,True,True,True,True,False,False,True,True,True,False,False,False,True,True,True,False,True,False,False,False,False,False,True,True,True,False,False,False,True,False,True,False,True,True,True,False,True,False,True,False,False,False,True,False,True,False,False,True,True,False,True,True,True,False,False,False,False,False,False,True,False,False,False,False,True,True,False,False,False,True,False,False,True,True,False,True,False,False,False,True,True,True,False,False,False,False,False,False,True,False,False,True,False,False,True,True,True,True,True,True,True,False,False,False,True,False,True,True,True,True,False,False,True,False,False,True,True,False,True,False,False,True,True,True,True,True,False,True,False,False,False,True,False,False,False,True,True,True,True,False,True,True,False,False,False,False,True,True,False,False,True,False,False,False,True,True,True,False,False,False,False,True,True,False,True,True,True,False,True,False,False,False,False,False,False,False,False,True,True], dtype = "bool")#candidate|7911|(2112,)|const|bool
call_7910 = relay.TupleGetItem(func_4458_call(relay.reshape(const_7911.astype('bool'), [16, 11, 12]), relay.reshape(const_7911.astype('bool'), [16, 11, 12]), ), 2)
call_7912 = relay.TupleGetItem(func_4461_call(relay.reshape(const_7911.astype('bool'), [16, 11, 12]), relay.reshape(const_7911.astype('bool'), [16, 11, 12]), ), 2)
uop_7937 = relay.log2(const_7911.astype('float64')) # shape=(2112,)
uop_7947 = relay.log10(uop_7937.astype('float32')) # shape=(2112,)
func_7887_call = mod.get_global_var('func_7887')
func_7889_call = mutated_mod.get_global_var('func_7889')
call_7960 = func_7887_call()
call_7961 = func_7887_call()
output = relay.Tuple([call_7904,call_7910,uop_7947,call_7960,])
output2 = relay.Tuple([call_7905,call_7912,uop_7947,call_7961,])
func_7968 = relay.Function([], output)
mod['func_7968'] = func_7968
mod = relay.transform.InferType()(mod)
output = func_7968()
func_7969 = relay.Function([], output)
mutated_mod['func_7969'] = func_7969
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8099 = relay.var("var_8099", dtype = "float32", shape = (13, 9, 6))#candidate|8099|(13, 9, 6)|var|float32
uop_8100 = relay.asin(var_8099.astype('float32')) # shape=(13, 9, 6)
func_7001_call = mod.get_global_var('func_7001')
func_7002_call = mutated_mod.get_global_var('func_7002')
call_8102 = relay.TupleGetItem(func_7001_call(), 0)
call_8103 = relay.TupleGetItem(func_7002_call(), 0)
func_2152_call = mod.get_global_var('func_2152')
func_2156_call = mutated_mod.get_global_var('func_2156')
var_8119 = relay.var("var_8119", dtype = "float64", shape = (3,))#candidate|8119|(3,)|var|float64
var_8120 = relay.var("var_8120", dtype = "float64", shape = (33,))#candidate|8120|(33,)|var|float64
const_8121 = relay.const([-8,-10,-6,1,3,8,1,7,3,7,-1,-8,8,4,-2,4,4,8,-4,-4,4,-9,2,-9,9,8,6,7,-9,-4,6,2,3,1,-9,-4,-7,-10,-8,-3,-4,7,10,-5,-4,2,6,1,-4,-7,-9,7,-6,4,-5,-1,9,-8,1,-10,2,-7,3,-6,-2,1,-3,-9,3,-3,2,7,3,2,9,-10,-1,-9,-5,-3,-7,-10,1,1,3,-2,9,6,-5,7,8,6,2,-6,-10,6,5,10,-5,10,7,3,-1,10,-7,3,2,-7,-5,-5,-3,-2,9,4,5,4,-8,-7,-5,-7,4,10,-9,4,1,1,-10,-4,-7,5,-2,1,3,1,7,-2,9,-8,-10,-4,-2,7,-8,-3,7,4,-4,-1,4,-6,-1,-1,10,-9,-4,1,6,9,7,8,7,-5,-6,9,8,3,2,2,-5,-2,3,-4,1,4,3,-4,-1,-3,-7,9,8,7,-5,-3,9,9,9,3,-7,10,7,2,4,7,10,9,7,7,4,-2,5,4,-5,6,2,-3,3,-8,-3,-10,-2,-10,-4,1,-6,2,-6,-5,-3,-4,8,-5,3,10,10,-10,9,-9,6,3,-5,-3,-9,-4,1,9,-5,2,8,3,-2,-8,2,3,9,10,-1,7,-5,-4], dtype = "int16")#candidate|8121|(250,)|const|int16
call_8118 = relay.TupleGetItem(func_2152_call(relay.reshape(var_8119.astype('float64'), [3, 1, 1]), relay.reshape(var_8120.astype('float64'), [3, 1, 11]), relay.reshape(const_8121.astype('int16'), [250,]), ), 0)
call_8122 = relay.TupleGetItem(func_2156_call(relay.reshape(var_8119.astype('float64'), [3, 1, 1]), relay.reshape(var_8120.astype('float64'), [3, 1, 11]), relay.reshape(const_8121.astype('int16'), [250,]), ), 0)
func_7472_call = mod.get_global_var('func_7472')
func_7474_call = mutated_mod.get_global_var('func_7474')
call_8124 = relay.TupleGetItem(func_7472_call(), 0)
call_8125 = relay.TupleGetItem(func_7474_call(), 0)
func_7459_call = mod.get_global_var('func_7459')
func_7461_call = mutated_mod.get_global_var('func_7461')
const_8127 = relay.const([5.020568,4.214375,-2.662889,6.516663,4.449184,-9.682204,5.733158,1.883554,6.694463,-5.946946,-5.235190,4.502904,-7.875060,-1.035329,5.015766,-3.628690,8.608452,3.772026,9.969579,-1.813406,6.540297,-8.122762,-1.307043,-0.317590,8.557616,6.531329,-8.625668,-6.312283,-5.570301,-8.172877,-4.830041,-5.411274,-9.371959,8.620907,-1.427554,-0.806562,-2.991493,2.372911,5.071231,-3.897019,-0.587190,-1.900345,-7.291152,2.831522,2.690394,8.667477,5.229163,0.077519,8.982358,1.603506,-4.158530,8.949181,9.818527,-0.912911,-0.120073,5.392564,-5.786765,2.608876,-3.106147,3.815843,-7.133029,5.775679,-3.565850,-6.766448,3.653467,-0.598916,6.803452,-3.275742,-7.327070,5.553495,-6.606911,1.577081,-1.246851,3.012755,-6.334925,-7.679532,6.936543,-8.947711,-5.251674,7.865892,-4.426179,-1.996833,7.874773,-9.812002,7.988410,-7.084739,-1.654040,-6.000485,-7.163915,2.929519,-5.891355,-4.239080,7.478428,0.126193,1.689998,3.236379,-7.961091,4.459247,4.301301,3.590861,-2.994534,-4.701385,-3.756901,0.070049,-7.521657,1.250659,8.235483,5.118034,-6.519060,-5.108205,9.954199,2.948622,6.969593,-7.060341,7.999063,5.367051,7.962973,-3.191469,-9.116847,3.683697,6.218403,9.538451,-7.255304,0.241548,-6.453380,-0.309877,-5.918148,9.476233,-2.029218,-8.269604,-2.473041,5.997519,1.521611,1.325531,-9.272208,-3.201950,4.378087,-0.641470,-3.874972,-3.969859,1.466729,2.247153,-5.622667,-8.900331,-0.284725,-6.743595,-8.139074,-1.743762,-4.354017,-8.400456,-8.701168,-1.027509,-1.623596,7.828045,-9.421431,0.702757,-0.190659,1.657177,-6.551975,-5.787545,-0.949151,7.635995,-9.193272,-7.323963,9.536192,7.719338,-8.402491,8.412916,-0.899338,8.307797,-7.163604,3.870894,5.209944,5.302998,-2.289405,-4.602735,1.756269,2.414217,-0.380726,-4.118566,-8.007701,9.264605,5.309230,-7.992035,-9.057924,-7.291854,-5.823870,7.627839,5.797015,0.029229,-0.323690,-7.349370,6.928172,-7.468808,-1.631182,4.618135,-2.366149,7.886341,2.602313,-1.537299,6.080809,-6.717293,-6.908099,-3.653763,9.813690,5.190978,6.503061,3.998712,0.681867,-3.495483,-8.233387,6.445246,8.893766,-7.441681,-2.627025,-5.345375,5.433339,7.620462,-4.595649,6.739098,-4.537757,-5.720982,8.665583,-1.570047,2.921480,-1.647457,7.407269,-0.415221,-0.467616,6.092524,6.230470,-7.845377,9.482267,-5.506355,8.296065,1.884398,-5.364778,-7.038224,4.534875,2.910511,9.383940,-7.866623,8.183467,4.575587,1.709164,-1.565028,-4.568444,5.641961,-5.385055,-0.201062,-1.055120,6.748955,5.013574,-6.464278,7.130372,0.835331,8.398177,0.290060,-2.742848,-5.774007,0.605114,9.361676,7.967172,3.452621,-3.879452,-3.535399,8.535862,-8.648640,0.655569,4.166370,-3.518278,0.538879,-8.455950,-5.793001,-1.638888,-4.870435,8.098797,3.639647,7.552070,-7.905734,-4.407098,-1.225494,2.418520,-9.655768,3.759592,4.242132,-8.425241,7.926190,6.218476,-3.668442,-1.673179,3.883040,-5.744270,-8.391658,-6.919486,6.091208,4.962880,-9.563717,-0.014094,5.884912,1.450822,8.170192,-6.772848,-7.377605,-8.000563,9.372744,-1.610614,-6.371063,2.496117,-6.792043,-2.495558,1.255379,2.939794,-7.949440,-6.952851,5.060061,-0.975843,-5.094107,7.678558,-7.076414,4.928718,-3.028205,-4.508613,-9.299805,3.962175,6.242573,-5.571396,-0.148223,5.921640,-2.919708,-5.455253,9.115256,-0.341349,8.537446,-8.214399,-0.213648,5.407448,9.085449,3.954148,-5.328494,-0.559302,-3.185616,-6.826950,-8.601328,9.993558,9.004976,-3.118234,-5.671589,-0.662169,-3.312610,9.940815,-8.805689,0.518161,8.818554,7.343333,-3.195324,7.737839,4.209683,8.164721,0.512333,-9.450134,-0.462322,3.644693,9.842334,4.774448,9.339308,-4.655924,7.269196,5.227021,0.794038,-0.545299,3.104294,-8.071949,8.798812,-0.420549,7.677175,-8.590762,-7.430158,-7.712479,5.331241,1.182015,7.462391,1.718426,-7.814008,9.396137,8.009645,5.294943,8.007618,1.102618,2.375731,-9.170199,-4.022269,-6.303473,-4.111243,6.158442,-9.728800,-2.620553,-4.352748,7.867126,4.919470,-2.486888,-7.113669,5.398502,-4.535781,2.749118,-0.396867,-8.102021,-4.342635,5.481007,7.736951,-8.975103,-8.333923,8.678526,-1.966070,4.832539,2.452970,5.535286,2.321564,-9.866151,1.982222,5.086839,3.789766,8.375968,-0.625896,-1.555339,1.724864,-5.128369,-3.729888,-4.038957,-0.026785,-7.103885,-2.160892,8.686989,-0.003665,0.298565,1.187783,3.118871,-0.741662,-5.628637,-4.960128,-2.705272,-1.522806,6.049660,8.025726,2.418100,9.074273,8.560830,5.210428,8.343820,-2.636336,-4.276095,4.206113,-4.444549,-4.426315,-5.198729,-8.071563,-3.189018,3.520083,2.997297,1.399854,-7.741598,-7.104334,-5.860770,3.978276,6.741828,-2.517146,8.081079,3.679202,9.493719,4.643417,-3.200080,2.472885,-0.105426,-5.629263,9.729622,-3.526722,-3.826454,3.950799,9.649209,-7.332186,2.082034,-9.161622,-3.664642,-5.597688,4.916559,-7.708100,4.732105,-2.584190,-3.715372,4.994166,-3.270664,-1.522103,-5.237664,-9.228474,-2.871718,-6.510097,6.088442,-5.111140,1.089645,-1.524654,-7.982462,-6.249944,-5.066955,6.508406,-7.799382,-1.731085,7.518629,7.723679,-1.219013,9.724948,4.735351,-5.527010,-0.709756,-1.620402,-7.886571,-6.306870,0.798673,-5.470256,6.024529,2.063543,8.701372,-7.783404,-8.534617,-4.246258,6.513676,5.867588,-5.024487,-0.394645,-5.045635,-3.228545,9.492813,-9.187600,0.476799,-4.447462,-3.690702,-4.763550,0.678401,-7.066121,3.113443,-7.829848,-7.512610,6.191344,-9.969492,4.852805,-0.503383,4.564751,-9.981286,8.183982,-5.209914,-3.896605,2.374188,-2.062915,-6.680380,-6.134154,-2.666103,-2.177451,-7.562678,3.976116,7.584099,8.947638,-7.539701,8.182302,-5.486261,-0.121194,-5.578497,-4.353114,-8.690007,-7.800722,8.442062,-4.411629,-0.229956,4.433866,-3.160546,8.015057,4.669403,8.854005,1.788780,7.067925,7.499537,-0.872299,-5.914634,4.908171,-7.793361,7.829396,-0.906778,4.652259,6.559627,9.420586,9.927238,7.339182,-3.977365,-7.962295,-4.594542,8.665934,6.992643,9.358801,-4.865409,-3.784409,3.683803,8.336119,4.379008,-1.799253,8.726347,-0.222534,-8.156961,7.208850,4.815895,-9.089615,8.555788,7.290719,3.279694,4.558596,-8.319064,-5.581255,8.292959,0.943637,-6.369782,6.797958,-0.104940,-0.061972,-9.747467,3.769459,7.941940,5.988558,6.327188,-1.317643,6.744888,1.232677,7.276579,4.154835,9.401000,-5.338739,-1.604775,7.250983,2.531245,5.435411,2.839595,1.677061,-5.377593,-4.930190,-1.855900,9.469877,-7.790584,6.851556,-0.446148,-2.149660,3.470680,-7.253437,2.790353,-0.011646,5.102907,-1.126110,-4.175841,-1.937705,-5.055884,9.335737,8.683477,-9.998852,3.261319,4.877586,7.603917,2.968341,-3.177782,-4.894390,9.505577,3.262416,5.713216,2.179647,2.528635,-5.803861,-6.196490,-4.027648,-0.809870,7.015509,-9.833026,-5.721184,0.630389,5.552560,5.865584,4.698670,-1.893711,9.266043,-1.689221,-0.734073,-5.157705,9.025519,-4.011443,-8.518452,-9.569909,-8.705632,7.325247,-3.510924,-8.180780,-2.320661,-2.758640,-6.059005,-6.208762,-0.168281,-2.797252,0.642816,8.939518,-1.631126,-0.915471,1.335861,-1.528001,-0.742403,-5.994122,-7.696673,-6.864359,-4.219735,-1.006324,8.082090,-8.869348,3.005618,-9.617301,-3.314168,3.747188,4.172755,1.079816,6.040424,-4.179302,9.103334,-8.775345,3.852003,7.264117,6.046815,-0.965696,-8.570672,-0.265770,-5.663086,-0.884976,8.730618,7.124905,-2.665091,1.126806,-7.405925,5.045790,-4.315317,-9.064502,-3.253944,7.027782,2.006478,-9.755925,-3.802074,-2.367585,-6.378272,1.552749,-7.297537,-7.174165,-2.737018,-9.237451,-3.432503,-3.303627,-2.521523,-3.722878,-9.858162,-2.971734,-9.576255,-1.260335,-2.449930,6.824763,2.642635,-8.454534,3.043857,-2.295784,-8.886770,-2.644210,-9.838152,9.374385,6.430378,3.134730,4.401586,-8.584038,1.534375,-7.354280,9.740834,-8.241106,8.322933,-4.573980,7.799041,-9.201617,-8.558312,-7.361426,7.884553,8.880073,-7.562453,8.393189,-2.854057,4.056218,-6.351179,4.109489,2.583777,-4.121867,-1.449351,2.850740,-1.111339,9.995772,-9.678729,7.146629,6.373013,8.691883,-9.015459,9.735379,-0.221444,-3.075144,5.652791,-7.989578,1.087511,0.581750,2.303591,4.779020,-0.669818,-9.503666,4.242281,-9.117857,-0.199437,-8.825818,-5.823457,-9.588990,-6.194976,7.786387,-9.665559,-1.595215,3.415508,-5.603774,-5.417496,-9.480799,-2.741015,6.364413,-9.143278,7.047200,2.018398,0.069386,1.140772,-0.695668,-5.360637,1.104487,7.170999,-7.485335,5.339784,-7.866206,9.939572,-6.230819,3.877727,0.950131,-0.746833,8.513232,-9.373987,9.660655,-2.555414,7.536090,-4.421118,7.052254,-3.407335,-3.835318,-4.531159,6.032669,7.165450,-6.220727,8.319499,-2.221335,-9.831227,-9.898167,0.519501,-8.940019,2.194607,-3.221198,5.404893,-9.946025,-1.037121,3.797659,0.124181,-4.746816,4.543503,7.627115,-4.678326,-1.666459,3.092982,9.268004,-9.582973,-1.944741,4.825046,3.271633,2.685170,-4.341265,-6.329931,-1.095850,-1.624672,-5.917019,1.879206,-8.394949,-0.657009,-9.723700,7.067094,-2.815598,-4.836980,-9.119242,9.882634,-5.623268,9.039625,-6.593445,-0.318976,4.075112,2.181716,-0.852863,8.050864,-3.581358,4.709845,-5.864400,-4.349070,9.599188,7.848544,-3.265972,1.227667,0.938403,5.298375,9.752415,0.776999,-5.294762,-0.985529,5.369844,-5.077289,8.462260,2.009459,-6.399191,-6.661751,-7.135749,8.453690,2.171907,3.840114,1.293197,-7.764550,-4.568962,3.413871,6.657938,-1.664694,-9.256220,-7.509307,-6.199590,3.826094,-3.397276,-2.227312,5.134204,5.127050,7.029134,-3.834987,-4.420731,7.755743,-4.049759,0.774375,-6.802476,-2.901272,-3.768777,2.095485,-1.647152,-5.511899,-9.045697,1.238423,-7.785292,-7.693585,0.634137,2.690613,-4.694940,2.386928,4.555315,-3.038219,-4.665659,-2.303106,1.833994,0.331472,-7.461662,-9.176188,6.510074,5.758985,6.801666,0.826407,-5.334473,-2.058495,9.202091,6.466352,-1.274411,-3.532937,-8.451967,-4.625567,-7.012326,-9.456192,7.465792,-3.310026,-9.593356,-5.805475,2.967693,7.246445,-0.937374,-6.501643,8.982183,8.871239,7.901051,-5.407393,-3.750751,-9.383764,-8.887342,-8.905210,1.137584,-9.726816,-6.128291,9.580115,-9.337020,9.290994,-4.187581,-8.844553,0.281176,-4.366085,-5.543758,-0.477383,1.715735,3.352551,9.617929,8.710097,-3.596819,5.794966,-5.336175,7.022652,3.918771,-7.071775,-7.764784,0.064986,-5.456981,3.695886,-2.548418,4.558689,-3.637080,8.766245,-7.570778,-1.291880,6.858537,3.460113,7.380476,-8.449272,4.884666,-4.844707,-9.471102,4.853649,8.274330,6.129145,4.096997,7.554975,3.402887,3.519919,9.242513,5.759147,8.120348,4.167467,0.062415,1.605639,-2.755270,-2.020032,7.969857,1.100298,-1.821422,-1.127381,1.330899,8.338952,4.287346,3.081618,2.884674,6.213053,2.634298,3.150956,-7.285528,-7.953539,-1.375944,5.554302,-9.946336,0.021903,6.882206,-6.032893,1.121951,-1.598262,4.516106,-3.083306,-5.497054,9.607296,-1.944987,-6.977447,-3.678217,5.771990,7.100612,-1.364790,6.855268,1.763591,-7.319608,6.446134,2.267187,-9.016748,5.140731,1.635181,-2.005947,-6.091181,5.638965,3.149359,1.860158,3.317642,-1.431468,-3.123913,2.591651,-2.533748,-5.968997,5.838905,9.137503,-3.400552,-9.765451,-1.024632,-1.394175,9.115337,3.550737,0.632972,2.928520,-4.548409,5.648617,9.001743,-1.795597,-1.103808,-6.090210,-1.013581,1.885237,-0.945927,4.127688,-6.440023,3.421323,6.542405,-0.819807,7.363987,0.262051,7.077686,5.784568,0.511729,0.687815,-4.867973,-9.865367,6.354043,8.791509,0.694698,5.000356,-0.748256,-7.295572,0.652309,7.272462,-7.713185,-8.201906,9.033128,3.950041,9.285661,-2.922043,-5.314086,2.359628,-5.178776,0.689416,5.636202,2.229619,-1.817688,6.118618,-2.284410,-5.002104,-8.574363,4.958271,-1.541780,-1.381442,8.328962,2.257042,8.800854,7.615720,8.784302,-3.772090,2.028499,3.538118,4.068633,-6.729024,9.934088,-5.990941,0.538572,6.302722,-5.382329,-5.704058,-6.111152,4.659746,-1.737073,6.303998,-3.793632,-4.211253,5.156746,0.188778,-8.983078,-7.422212,-8.770821,9.703701,-8.594375,-5.166267,9.504227,-8.937013,-6.060523,7.739822,3.542817,8.279325,-1.664523,3.049517,2.080632,-9.449865,-7.954704,5.307393,-5.527961,7.843010,7.399286,1.571275,-7.314575,-2.996956,-4.011330,4.941290,-9.053972,7.199980,-3.752983,-3.704866,1.504572,4.797652,0.976363,-4.537435,-8.670115,3.798085,7.109251,-0.645324,-2.886390,0.287480,-3.941508,-8.181301,9.811276,-2.918305,0.965869,6.412388,1.982385,-5.960996,2.283323,-5.781407,-8.072397,5.677646,5.047334,1.751843,-6.680509,-3.786949,8.294037,0.163664,-7.346152,-3.010734,-3.989097,-6.769207,7.535900,-4.194646,2.729015,-9.036622,-6.278799,-8.594757,4.922348,-3.242288,-0.287769,-6.677759,0.149881,-0.504297,0.631162,8.093876,-4.568208,-5.800421,1.690452,-0.914660,8.596540,-5.049524,-1.311668,5.688657,9.487964,3.919310,-9.840352,3.081197,9.431308,4.599273,5.271299,-2.317821,-0.141012,4.183175,9.171518,9.720310,-7.237824,2.209501,-3.781283,-6.752122,-4.232705,0.682664,2.728890,-8.064507,-8.277016,-9.260189,5.696028,9.946195,3.413197,3.668849,-4.202060,1.483925,-7.968714,1.189497,-5.659944,-0.344158,5.729722,9.288987,8.889252,8.210093,-5.733927,2.093124,-8.007975,6.196561,6.687568,-7.394749,0.336852,-9.839428,-4.846292,-1.822374,1.757709,0.079283,-8.642253,3.712338,8.471371,6.800159,-0.381258,7.840118,7.279856,-1.701439,8.521156,-7.869957,0.987017,-3.157351,-9.323215,-7.307298,-5.763858,-0.603449,-8.295876,-3.565350,-8.939246,2.286519,-6.487410,1.748819,-9.691308,-1.292727,1.924995,-8.353641,7.543209,-2.204684,-8.138820,9.978414,7.000837,4.502496,1.856585,9.950676,-3.384543,8.228965,7.598989,-4.894341,-9.920178,3.633248,-2.018287,-9.133603,-7.702107,5.608246,5.603333,8.604715,9.578333,7.491839,-3.645484,-0.281545,5.354619,5.602356,8.318691,-9.996464,-9.527314,2.184528,-1.317063,-1.972351,-3.257126,4.272930,-4.827671,-2.451829,6.705009,8.206803,-9.085379,-4.798582,1.864238,-0.257281,-3.764562,-3.925941,-5.312107,8.071853,-9.219934,-8.342919,2.449600,-5.248892,-1.410815,6.496912,-7.609952,-4.650154,9.430426,2.745870,-0.895498,6.986283,-3.501565,-3.895114,4.886250,9.066472,6.822721,-8.199406,3.187580,9.297626,-9.748733,-6.480551,8.074675,6.842160,1.777643,7.045423,2.428616,-0.014866,-2.319781,-1.654998,-2.401658,1.593603,1.772566,0.229121,8.697723,2.492469,1.061671,-3.924100,-6.411601,7.532454,-2.722916,5.425512,9.202543,-6.338099,-0.139226,4.699099,-8.476636,7.719023,0.843218,0.604304,3.918903,-4.760975,-9.753526,5.545978,-2.880134,-4.124281,4.069611,-9.273622,-1.437602,-9.108340,-8.742021,5.095214,9.782060,-5.677590,8.526838,1.901940,-1.654106,-6.635510,-8.919237,9.891250,-6.381500,-7.216133,-8.207626,5.496913,4.021101,1.284774,4.812355,-0.959587,2.355822,4.108121,-5.853180,8.301443,-5.930995,2.359032,9.763848,-4.628534,9.389974,8.903272,0.912220,-7.523738,3.460504,-0.224701,-7.306211,5.218550,-1.030847,8.998780,8.464894,9.363550,-9.607980,-5.024934,-4.116982,4.320021,3.674841,9.813073,1.668669,6.790157,0.328768,-7.143388,3.806396,-6.156532,-2.611738,-8.761288,-0.791574,-5.178589,2.744732,9.019807,5.699501,2.509048,1.205173,9.388999,-4.023716,8.868549,0.049619,8.489836,7.124926,-8.079112,1.631401,8.292122,-0.270179,-8.153521,5.430928,5.504280,1.586657,2.590756,2.413752,4.962541,-5.778875,-0.356200,-8.502514,-2.878841,7.563508,-7.307645,8.413373,-7.314725,1.648705], dtype = "float32")#candidate|8127|(1540,)|const|float32
call_8126 = relay.TupleGetItem(func_7459_call(relay.reshape(const_8127.astype('float32'), [11, 14, 10])), 2)
call_8128 = relay.TupleGetItem(func_7461_call(relay.reshape(const_8127.astype('float32'), [11, 14, 10])), 2)
uop_8136 = relay.log(uop_8100.astype('float64')) # shape=(13, 9, 6)
output = relay.Tuple([call_8102,call_8118,var_8119,var_8120,const_8121,call_8124,call_8126,const_8127,uop_8136,])
output2 = relay.Tuple([call_8103,call_8122,var_8119,var_8120,const_8121,call_8125,call_8128,const_8127,uop_8136,])
func_8140 = relay.Function([var_8099,var_8119,var_8120,], output)
mod['func_8140'] = func_8140
mod = relay.transform.InferType()(mod)
var_8141 = relay.var("var_8141", dtype = "float32", shape = (13, 9, 6))#candidate|8141|(13, 9, 6)|var|float32
var_8142 = relay.var("var_8142", dtype = "float64", shape = (3,))#candidate|8142|(3,)|var|float64
var_8143 = relay.var("var_8143", dtype = "float64", shape = (33,))#candidate|8143|(33,)|var|float64
output = func_8140(var_8141,var_8142,var_8143,)
func_8144 = relay.Function([var_8141,var_8142,var_8143,], output)
mutated_mod['func_8144'] = func_8144
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6913_call = mod.get_global_var('func_6913')
func_6915_call = mutated_mod.get_global_var('func_6915')
call_8146 = func_6913_call()
call_8147 = func_6913_call()
func_6492_call = mod.get_global_var('func_6492')
func_6494_call = mutated_mod.get_global_var('func_6494')
call_8153 = func_6492_call()
call_8154 = func_6492_call()
func_7194_call = mod.get_global_var('func_7194')
func_7195_call = mutated_mod.get_global_var('func_7195')
call_8159 = relay.TupleGetItem(func_7194_call(), 0)
call_8160 = relay.TupleGetItem(func_7195_call(), 0)
func_7271_call = mod.get_global_var('func_7271')
func_7276_call = mutated_mod.get_global_var('func_7276')
var_8177 = relay.var("var_8177", dtype = "float32", shape = (24,))#candidate|8177|(24,)|var|float32
var_8178 = relay.var("var_8178", dtype = "bool", shape = (2, 1056))#candidate|8178|(2, 1056)|var|bool
const_8179 = relay.const([5,-9,8,-1,-10,6,-2,2,6,-3,8,1,-4,-4,-8,-4,-9,-7,-7,-8,1,-10,6,10,-5,-2,-4,-10,3,-5,-2,-5,-2,-8,3,5,-3,-9,-6,-10,2,3,-6,4,-8,4,8,1,-4,-8,-6,-2,-7,-5,-10,3,6,7,8,3,10,5,9,-7,-6,1,-9,10,-2,10,-9,-3,6,9,1,9,-9,9,-4,-10,-3,-2,-4,10,-7,-9,3,1,1,-3,-2,-4,-9,-1,-1,-5,4,1,-2,-5,1,-5,-5,4,-8,10,1,1,1,3,4,8,-5,-7,10,-8,-5,5,-1,10,8,-7,6,-9,3,8,-1,-7], dtype = "int8")#candidate|8179|(128,)|const|int8
call_8176 = relay.TupleGetItem(func_7271_call(relay.reshape(var_8177.astype('float32'), [2, 3, 4]), relay.reshape(var_8178.astype('bool'), [2112,]), relay.reshape(const_8179.astype('int8'), [128,]), ), 0)
call_8180 = relay.TupleGetItem(func_7276_call(relay.reshape(var_8177.astype('float32'), [2, 3, 4]), relay.reshape(var_8178.astype('bool'), [2112,]), relay.reshape(const_8179.astype('int8'), [128,]), ), 0)
func_7714_call = mod.get_global_var('func_7714')
func_7716_call = mutated_mod.get_global_var('func_7716')
call_8188 = func_7714_call()
call_8189 = func_7714_call()
output = relay.Tuple([call_8146,call_8153,call_8159,call_8176,var_8177,var_8178,const_8179,call_8188,])
output2 = relay.Tuple([call_8147,call_8154,call_8160,call_8180,var_8177,var_8178,const_8179,call_8189,])
func_8193 = relay.Function([var_8177,var_8178,], output)
mod['func_8193'] = func_8193
mod = relay.transform.InferType()(mod)
var_8194 = relay.var("var_8194", dtype = "float32", shape = (24,))#candidate|8194|(24,)|var|float32
var_8195 = relay.var("var_8195", dtype = "bool", shape = (2, 1056))#candidate|8195|(2, 1056)|var|bool
output = func_8193(var_8194,var_8195,)
func_8196 = relay.Function([var_8194,var_8195,], output)
mutated_mod['func_8196'] = func_8196
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6833_call = mod.get_global_var('func_6833')
func_6835_call = mutated_mod.get_global_var('func_6835')
call_8275 = relay.TupleGetItem(func_6833_call(), 0)
call_8276 = relay.TupleGetItem(func_6835_call(), 0)
func_7001_call = mod.get_global_var('func_7001')
func_7002_call = mutated_mod.get_global_var('func_7002')
call_8282 = relay.TupleGetItem(func_7001_call(), 0)
call_8283 = relay.TupleGetItem(func_7002_call(), 0)
func_6913_call = mod.get_global_var('func_6913')
func_6915_call = mutated_mod.get_global_var('func_6915')
call_8288 = func_6913_call()
call_8289 = func_6913_call()
func_7714_call = mod.get_global_var('func_7714')
func_7716_call = mutated_mod.get_global_var('func_7716')
call_8290 = func_7714_call()
call_8291 = func_7714_call()
output = relay.Tuple([call_8275,call_8282,call_8288,call_8290,])
output2 = relay.Tuple([call_8276,call_8283,call_8289,call_8291,])
func_8302 = relay.Function([], output)
mod['func_8302'] = func_8302
mod = relay.transform.InferType()(mod)
mutated_mod['func_8302'] = func_8302
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8302_call = mutated_mod.get_global_var('func_8302')
call_8303 = func_8302_call()
output = call_8303
func_8304 = relay.Function([], output)
mutated_mod['func_8304'] = func_8304
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7152_call = mod.get_global_var('func_7152')
func_7153_call = mutated_mod.get_global_var('func_7153')
call_8389 = relay.TupleGetItem(func_7152_call(), 0)
call_8390 = relay.TupleGetItem(func_7153_call(), 0)
output = call_8389
output2 = call_8390
func_8395 = relay.Function([], output)
mod['func_8395'] = func_8395
mod = relay.transform.InferType()(mod)
output = func_8395()
func_8396 = relay.Function([], output)
mutated_mod['func_8396'] = func_8396
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7060_call = mod.get_global_var('func_7060')
func_7062_call = mutated_mod.get_global_var('func_7062')
call_8410 = func_7060_call()
call_8411 = func_7060_call()
func_1860_call = mod.get_global_var('func_1860')
func_1862_call = mutated_mod.get_global_var('func_1862')
const_8430 = relay.const([3.708833,0.635263,-2.988242,-4.779403,9.207982,-8.109909,7.765625,4.046032,9.198855,8.048953,3.437551,-9.401287,-2.967434,2.387217,-8.319667,0.762429], dtype = "float32")#candidate|8430|(16,)|const|float32
call_8429 = func_1860_call(relay.reshape(const_8430.astype('float32'), [2, 1, 8]))
call_8431 = func_1860_call(relay.reshape(const_8430.astype('float32'), [2, 1, 8]))
output = relay.Tuple([call_8410,call_8429,const_8430,])
output2 = relay.Tuple([call_8411,call_8431,const_8430,])
func_8458 = relay.Function([], output)
mod['func_8458'] = func_8458
mod = relay.transform.InferType()(mod)
output = func_8458()
func_8459 = relay.Function([], output)
mutated_mod['func_8459'] = func_8459
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7783_call = mod.get_global_var('func_7783')
func_7784_call = mutated_mod.get_global_var('func_7784')
call_8460 = relay.TupleGetItem(func_7783_call(), 0)
call_8461 = relay.TupleGetItem(func_7784_call(), 0)
func_7868_call = mod.get_global_var('func_7868')
func_7870_call = mutated_mod.get_global_var('func_7870')
call_8463 = func_7868_call()
call_8464 = func_7868_call()
output = relay.Tuple([call_8460,call_8463,])
output2 = relay.Tuple([call_8461,call_8464,])
func_8484 = relay.Function([], output)
mod['func_8484'] = func_8484
mod = relay.transform.InferType()(mod)
output = func_8484()
func_8485 = relay.Function([], output)
mutated_mod['func_8485'] = func_8485
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7152_call = mod.get_global_var('func_7152')
func_7153_call = mutated_mod.get_global_var('func_7153')
call_8586 = relay.TupleGetItem(func_7152_call(), 0)
call_8587 = relay.TupleGetItem(func_7153_call(), 0)
func_6606_call = mod.get_global_var('func_6606')
func_6609_call = mutated_mod.get_global_var('func_6609')
var_8604 = relay.var("var_8604", dtype = "bool", shape = (44, 48))#candidate|8604|(44, 48)|var|bool
call_8603 = relay.TupleGetItem(func_6606_call(relay.reshape(var_8604.astype('bool'), [2112,])), 0)
call_8605 = relay.TupleGetItem(func_6609_call(relay.reshape(var_8604.astype('bool'), [2112,])), 0)
uop_8619 = relay.acos(var_8604.astype('float32')) # shape=(44, 48)
output = relay.Tuple([call_8586,call_8603,uop_8619,])
output2 = relay.Tuple([call_8587,call_8605,uop_8619,])
func_8624 = relay.Function([var_8604,], output)
mod['func_8624'] = func_8624
mod = relay.transform.InferType()(mod)
var_8625 = relay.var("var_8625", dtype = "bool", shape = (44, 48))#candidate|8625|(44, 48)|var|bool
output = func_8624(var_8625)
func_8626 = relay.Function([var_8625], output)
mutated_mod['func_8626'] = func_8626
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8458_call = mod.get_global_var('func_8458')
func_8459_call = mutated_mod.get_global_var('func_8459')
call_8631 = relay.TupleGetItem(func_8458_call(), 1)
call_8632 = relay.TupleGetItem(func_8459_call(), 1)
func_7714_call = mod.get_global_var('func_7714')
func_7716_call = mutated_mod.get_global_var('func_7716')
call_8639 = func_7714_call()
call_8640 = func_7714_call()
func_8193_call = mod.get_global_var('func_8193')
func_8196_call = mutated_mod.get_global_var('func_8196')
var_8650 = relay.var("var_8650", dtype = "float32", shape = (24,))#candidate|8650|(24,)|var|float32
var_8651 = relay.var("var_8651", dtype = "bool", shape = (264, 8))#candidate|8651|(264, 8)|var|bool
call_8649 = relay.TupleGetItem(func_8193_call(relay.reshape(var_8650.astype('float32'), [24,]), relay.reshape(var_8651.astype('bool'), [2, 1056]), ), 3)
call_8652 = relay.TupleGetItem(func_8196_call(relay.reshape(var_8650.astype('float32'), [24,]), relay.reshape(var_8651.astype('bool'), [2, 1056]), ), 3)
bop_8663 = relay.multiply(var_8651.astype('int8'), call_8631.astype('int8')) # shape=(2, 264, 8)
bop_8666 = relay.multiply(var_8651.astype('int8'), call_8632.astype('int8')) # shape=(2, 264, 8)
output = relay.Tuple([call_8639,call_8649,var_8650,bop_8663,])
output2 = relay.Tuple([call_8640,call_8652,var_8650,bop_8666,])
func_8667 = relay.Function([var_8650,var_8651,], output)
mod['func_8667'] = func_8667
mod = relay.transform.InferType()(mod)
mutated_mod['func_8667'] = func_8667
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8667_call = mutated_mod.get_global_var('func_8667')
var_8669 = relay.var("var_8669", dtype = "float32", shape = (24,))#candidate|8669|(24,)|var|float32
var_8670 = relay.var("var_8670", dtype = "bool", shape = (264, 8))#candidate|8670|(264, 8)|var|bool
call_8668 = func_8667_call(var_8669,var_8670,)
output = call_8668
func_8671 = relay.Function([var_8669,var_8670,], output)
mutated_mod['func_8671'] = func_8671
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7538_call = mod.get_global_var('func_7538')
func_7540_call = mutated_mod.get_global_var('func_7540')
call_8686 = relay.TupleGetItem(func_7538_call(), 0)
call_8687 = relay.TupleGetItem(func_7540_call(), 0)
output = relay.Tuple([call_8686,])
output2 = relay.Tuple([call_8687,])
func_8700 = relay.Function([], output)
mod['func_8700'] = func_8700
mod = relay.transform.InferType()(mod)
mutated_mod['func_8700'] = func_8700
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8700_call = mutated_mod.get_global_var('func_8700')
call_8701 = func_8700_call()
output = call_8701
func_8702 = relay.Function([], output)
mutated_mod['func_8702'] = func_8702
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6964_call = mod.get_global_var('func_6964')
func_6965_call = mutated_mod.get_global_var('func_6965')
call_8739 = func_6964_call()
call_8740 = func_6964_call()
output = call_8739
output2 = call_8740
func_8742 = relay.Function([], output)
mod['func_8742'] = func_8742
mod = relay.transform.InferType()(mod)
output = func_8742()
func_8743 = relay.Function([], output)
mutated_mod['func_8743'] = func_8743
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6714_call = mod.get_global_var('func_6714')
func_6715_call = mutated_mod.get_global_var('func_6715')
call_8759 = relay.TupleGetItem(func_6714_call(), 1)
call_8760 = relay.TupleGetItem(func_6715_call(), 1)
func_6793_call = mod.get_global_var('func_6793')
func_6794_call = mutated_mod.get_global_var('func_6794')
call_8765 = func_6793_call()
call_8766 = func_6793_call()
func_4584_call = mod.get_global_var('func_4584')
func_4586_call = mutated_mod.get_global_var('func_4586')
var_8774 = relay.var("var_8774", dtype = "int32", shape = (1456,))#candidate|8774|(1456,)|var|int32
call_8773 = func_4584_call(relay.reshape(var_8774.astype('int32'), [14, 13, 8]))
call_8775 = func_4584_call(relay.reshape(var_8774.astype('int32'), [14, 13, 8]))
output = relay.Tuple([call_8759,call_8765,call_8773,var_8774,])
output2 = relay.Tuple([call_8760,call_8766,call_8775,var_8774,])
func_8776 = relay.Function([var_8774,], output)
mod['func_8776'] = func_8776
mod = relay.transform.InferType()(mod)
var_8777 = relay.var("var_8777", dtype = "int32", shape = (1456,))#candidate|8777|(1456,)|var|int32
output = func_8776(var_8777)
func_8778 = relay.Function([var_8777], output)
mutated_mod['func_8778'] = func_8778
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7751_call = mod.get_global_var('func_7751')
func_7752_call = mutated_mod.get_global_var('func_7752')
call_8790 = func_7751_call()
call_8791 = func_7751_call()
func_7538_call = mod.get_global_var('func_7538')
func_7540_call = mutated_mod.get_global_var('func_7540')
call_8794 = relay.TupleGetItem(func_7538_call(), 1)
call_8795 = relay.TupleGetItem(func_7540_call(), 1)
func_7714_call = mod.get_global_var('func_7714')
func_7716_call = mutated_mod.get_global_var('func_7716')
call_8796 = func_7714_call()
call_8797 = func_7714_call()
func_7825_call = mod.get_global_var('func_7825')
func_7827_call = mutated_mod.get_global_var('func_7827')
call_8808 = relay.TupleGetItem(func_7825_call(), 0)
call_8809 = relay.TupleGetItem(func_7827_call(), 0)
output = relay.Tuple([call_8790,call_8794,call_8796,call_8808,])
output2 = relay.Tuple([call_8791,call_8795,call_8797,call_8809,])
func_8821 = relay.Function([], output)
mod['func_8821'] = func_8821
mod = relay.transform.InferType()(mod)
mutated_mod['func_8821'] = func_8821
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8821_call = mutated_mod.get_global_var('func_8821')
call_8822 = func_8821_call()
output = call_8822
func_8823 = relay.Function([], output)
mutated_mod['func_8823'] = func_8823
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7714_call = mod.get_global_var('func_7714')
func_7716_call = mutated_mod.get_global_var('func_7716')
call_8826 = func_7714_call()
call_8827 = func_7714_call()
func_8700_call = mod.get_global_var('func_8700')
func_8702_call = mutated_mod.get_global_var('func_8702')
call_8846 = relay.TupleGetItem(func_8700_call(), 0)
call_8847 = relay.TupleGetItem(func_8702_call(), 0)
func_8395_call = mod.get_global_var('func_8395')
func_8396_call = mutated_mod.get_global_var('func_8396')
call_8853 = func_8395_call()
call_8854 = func_8395_call()
func_7868_call = mod.get_global_var('func_7868')
func_7870_call = mutated_mod.get_global_var('func_7870')
call_8856 = func_7868_call()
call_8857 = func_7868_call()
output = relay.Tuple([call_8826,call_8846,call_8853,call_8856,])
output2 = relay.Tuple([call_8827,call_8847,call_8854,call_8857,])
func_8863 = relay.Function([], output)
mod['func_8863'] = func_8863
mod = relay.transform.InferType()(mod)
output = func_8863()
func_8864 = relay.Function([], output)
mutated_mod['func_8864'] = func_8864
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6445_call = mod.get_global_var('func_6445')
func_6447_call = mutated_mod.get_global_var('func_6447')
call_8905 = relay.TupleGetItem(func_6445_call(), 0)
call_8906 = relay.TupleGetItem(func_6447_call(), 0)
output = relay.Tuple([call_8905,])
output2 = relay.Tuple([call_8906,])
func_8913 = relay.Function([], output)
mod['func_8913'] = func_8913
mod = relay.transform.InferType()(mod)
mutated_mod['func_8913'] = func_8913
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8913_call = mutated_mod.get_global_var('func_8913')
call_8914 = func_8913_call()
output = call_8914
func_8915 = relay.Function([], output)
mutated_mod['func_8915'] = func_8915
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6532_call = mod.get_global_var('func_6532')
func_6533_call = mutated_mod.get_global_var('func_6533')
call_8945 = relay.TupleGetItem(func_6532_call(), 3)
call_8946 = relay.TupleGetItem(func_6533_call(), 3)
func_7459_call = mod.get_global_var('func_7459')
func_7461_call = mutated_mod.get_global_var('func_7461')
const_8948 = relay.const([9.672942,-8.114275,-7.200611,9.510928,8.468745,-8.056290,-5.820453,-4.599613,3.636946,-0.858013,3.863949,-0.148438,1.586197,5.525767,4.575772,-8.501947,4.818699,-4.498112,-7.515518,3.066254,-1.194898,-2.100204,6.715036,-8.883934,7.112083,-6.921376,-7.945641,-3.920070,8.481569,-5.375344,-7.276560,0.409047,1.628161,1.584720,-0.776356,-5.616560,-9.146360,8.115483,4.885099,-0.425707,2.717659,9.351205,0.378284,6.687754,-2.538604,7.108518,-3.349690,-2.600303,-4.847523,2.966638,-0.378639,-7.034288,0.781114,-7.239477,4.367642,4.037697,2.722972,-6.695094,-8.846742,5.086793,-5.097843,2.061352,-5.662173,-7.093593,4.292444,5.742313,7.228175,-9.649463,7.185616,1.025717,6.276525,9.947609,-3.990168,8.384814,9.653072,7.583143,-4.934047,7.420681,-5.204261,1.639260,9.269699,-5.207278,-1.770097,6.199204,6.708341,-4.358709,4.408829,-7.130493,-9.001956,8.323458,-1.017606,5.375713,6.592572,9.555853,-2.812111,-2.469207,9.158142,9.262192,4.638449,-2.287269,8.250410,-2.457566,-4.238741,-3.331620,-4.171218,1.691663,-2.565085,7.625396,7.144859,-5.501280,-3.499906,3.444759,8.328353,2.903874,-5.545237,1.372285,0.557523,-1.007795,-3.505640,-5.710066,-7.763133,-6.550738,-3.090990,4.591967,-2.128759,9.492446,-4.381036,0.834493,8.790384,-2.689431,-1.484740,-6.083650,3.503975,3.399200,8.699714,4.306731,9.200102,5.786503,6.292866,4.518647,-6.471564,-5.308893,-6.603198,-6.327085,6.886781,2.127225,-5.932861,2.114048,-2.267854,-3.482380,-3.160771,-6.112360,1.550267,1.218708,-5.043877,-2.066629,8.397924,9.756836,-4.562387,-2.670397,-5.253385,6.494473,1.383259,6.273818,-8.450013,9.246835,4.434637,-7.136745,4.985742,2.667635,6.472384,-0.561697,9.804912,-1.358916,2.246763,9.579485,-9.496399,4.743817,3.874214,8.061146,-9.362361,-3.820557,-6.842472,-8.403112,-3.413629,2.808397,4.575406,-7.773024,2.667148,8.763008,0.184272,4.181691,2.045701,9.570964,6.742673,-2.901910,-3.133136,8.743169,-0.990033,-1.053716,2.166358,-7.707462,-1.468713,5.945845,4.279024,-6.350381,4.243691,-4.232801,-1.560981,2.915458,-8.751790,7.348518,-5.319215,-8.650479,-8.039531,0.832135,-5.221343,4.269907,2.013045,7.045599,9.619739,0.246586,9.757615,4.106689,-0.790570,4.295757,9.972723,5.594714,0.399345,-1.161721,-9.725361,3.180186,7.214026,9.985023,-1.937922,6.646626,8.374142,-2.006700,-7.516343,-4.025932,5.440417,5.913894,8.755040,-9.478061,-9.492349,-6.739265,3.653445,-8.367356,-2.369725,3.210933,-3.479175,-2.227349,2.559013,-2.104068,2.203979,-2.951676,-1.861507,5.681600,-1.973371,-8.654598,-9.805267,-2.863473,-5.937621,-1.384468,-4.642385,8.784733,-3.451505,-4.291046,3.370119,6.090582,-6.993133,4.601218,1.703841,-1.972249,-9.948386,6.824054,5.109427,-1.541480,-0.935272,9.005175,-4.400730,5.360815,-3.337861,2.970314,-7.297509,-6.332101,-5.450121,7.446204,-7.002758,-6.861670,-6.658113,1.229838,8.308791,5.635355,-5.675712,-8.456628,-8.626714,7.996259,-0.296182,-8.577799,3.248771,8.835971,-9.485318,-0.538891,-4.198509,4.033266,-1.406984,-2.161255,6.932016,5.666909,-4.209289,-4.661960,3.226287,-0.290433,-6.886954,-3.117447,1.811335,-0.294165,-1.277043,3.476927,4.124060,3.384771,8.209994,0.613702,1.467477,0.675549,-7.617065,-8.141929,5.493985,5.621955,2.920899,-1.726340,1.090628,-6.974209,8.167360,-5.991911,4.688652,-2.396708,-3.532959,9.100773,-1.419530,8.399002,-4.609277,-2.766708,-8.949363,-5.290883,4.482228,1.797141,9.930943,-3.980997,7.560145,2.052270,-1.134763,9.799359,0.553019,-3.705554,2.599358,-2.974451,-2.978392,-4.090014,6.414012,-3.343966,3.083262,2.851331,-1.412693,0.344030,2.275243,-7.159580,-1.372291,-5.721501,-2.073835,1.404283,-6.723476,9.204577,-4.905195,-0.200381,-6.783694,-0.687348,-9.861859,-5.958453,4.266891,-3.378428,-1.105694,-5.199256,-3.329656,-4.895867,8.789235,0.837414,-6.511240,-8.011404,-2.246078,-6.079412,-3.442153,-6.149636,-7.460584,5.699917,-0.545586,-4.828371,-0.640238,2.632395,0.705028,9.552927,6.808541,7.325230,0.788075,-4.352699,-4.167219,0.622817,5.012634,2.213182,-9.928582,8.335909,-8.363398,-7.068334,-9.648429,7.693998,9.934888,-1.105203,1.247474,-6.021076,-4.139476,-6.232177,0.987748,0.167754,7.684986,0.193288,4.619778,-1.138706,-3.659742,-4.457484,-3.313092,9.988170,-5.632900,-4.473942,2.323638,-2.299726,4.441983,-1.094954,-8.803031,7.386738,-1.089153,-5.903710,2.626816,2.631405,2.031450,-7.841008,1.964529,8.270648,-8.250366,-3.192429,9.331901,7.078014,7.061304,0.919949,5.044861,-8.208651,3.873614,0.421074,3.096898,8.875535,-4.645202,1.760541,1.044365,1.463277,-7.360531,6.742339,-7.056774,2.082558,-0.494798,-7.496880,4.794694,0.334816,5.722079,-6.466726,2.103667,4.012004,0.314294,5.482354,4.119366,-2.373492,-2.782095,7.979465,-4.490282,3.440401,-0.439470,-2.453392,-5.388051,-5.865402,-9.159935,-1.030141,-2.201313,8.933093,-3.080973,-9.819938,7.045416,-9.411924,-5.264321,3.188352,-9.304177,6.239025,-0.083285,-6.685457,9.775493,-2.003450,5.120596,4.580092,-4.685952,-3.841917,-3.340212,-1.247977,3.854448,7.623548,7.383978,6.651350,2.741454,-4.574267,-4.038864,-5.590635,8.167932,-0.490316,-5.994619,4.817162,-0.367451,5.166586,-7.431470,6.883545,-8.562043,-4.511464,8.304704,3.604058,-0.140502,-0.302272,4.348423,5.478250,8.734211,5.543023,8.158389,-2.789379,-8.449331,-4.577492,6.898004,5.385287,2.948342,1.995878,0.056649,2.190159,-2.370834,-8.450272,8.629547,0.368414,0.004777,-9.508447,5.715396,4.653971,-7.435177,-6.477003,1.844512,-0.664663,8.557180,8.069279,-9.329411,6.573298,-1.551947,-0.240338,7.703082,-2.767813,8.497039,2.816340,3.867668,-2.546061,1.170251,4.668639,-3.869421,2.715900,-4.145410,-1.109864,0.659248,4.931105,-0.643022,1.302187,8.142289,-6.792228,-2.585993,8.769146,-8.411836,-3.321495,9.081892,-9.192335,4.558968,4.890492,-8.707108,-1.429833,6.894507,2.333936,-1.064086,4.913678,-1.570741,-2.386079,-5.614377,-8.237290,8.264952,-6.767117,9.072241,8.277634,-9.507659,-7.415858,-6.457199,-4.230142,-0.854102,6.304593,7.552533,7.759164,1.028057,-9.766636,2.208617,-5.900370,6.931073,1.278547,-8.960047,3.024444,-4.048016,4.355746,1.538397,-1.755459,-5.319547,-9.992306,3.757022,7.345975,6.699112,-4.065519,4.957710,3.900411,9.021315,6.145792,9.623306,-0.292339,-4.884002,6.135485,0.362807,0.054545,0.452397,2.183947,5.904997,1.394896,3.842838,-8.774585,0.725083,7.044045,-8.491165,-1.815159,-9.728941,4.730542,-3.753866,-1.718296,0.601494,8.094724,4.835549,9.003615,-8.831564,7.103818,-9.363342,-3.131546,5.600714,-3.567692,-0.353499,-3.568386,7.863495,1.256094,-2.899356,5.847964,5.878798,-9.975608,-4.236968,-0.963034,4.225515,-8.260921,0.548889,8.208105,-9.733886,-4.121816,-8.980389,4.898671,8.147635,6.746609,-1.313596,0.506102,-6.671030,-8.373414,0.572986,8.155067,-2.721872,-5.488918,-1.458293,5.880590,8.002983,9.150206,-7.965757,9.081813,5.594841,3.875155,2.875390,7.341698,-2.696302,-8.013088,-9.428148,-0.294458,0.322610,-7.341443,-1.326675,7.650921,-0.358185,8.467352,2.854255,-2.325032,-7.738172,2.774188,-1.730491,2.187507,-6.959742,-6.806719,5.216475,-6.043678,7.569593,-8.922038,-3.992594,4.279611,-4.431733,7.651921,4.954526,-0.229341,4.912154,4.356776,-9.823426,-7.887690,3.096659,-9.399317,-7.128085,6.459747,2.557026,7.716802,7.165797,-6.335768,-4.544909,-7.370410,5.718328,8.908364,-2.494192,-9.145129,4.778787,9.305317,4.928676,9.345883,-0.132032,9.094442,-8.659371,0.145171,1.862913,7.029789,0.806680,3.099720,-7.140718,6.918606,-7.494659,1.728072,9.358271,-1.506439,-8.483349,-0.004907,-6.833314,9.592788,-3.580049,3.129318,-2.078228,1.639047,-9.259509,7.065544,6.191489,9.576521,-6.740791,3.680514,5.872349,3.934896,8.499928,8.701332,2.411310,-7.956167,5.756782,-5.902033,-9.726546,-7.066406,-9.279488,2.836250,-1.923640,1.591142,-8.192930,-6.198190,-9.573839,7.730801,2.223283,-8.795091,9.554310,2.522709,-7.816877,7.569708,1.523788,7.764684,0.230607,-5.483814,3.706567,-7.847440,-4.991778,5.786646,-5.537907,1.999809,7.722447,3.792027,-0.063991,-6.448522,-5.099674,-6.986379,8.407413,3.406968,-9.546940,-3.686421,-3.994085,9.704626,-3.658789,8.972983,-2.585015,-8.120944,-4.432913,-9.968417,-0.366406,2.849792,-6.126890,9.680611,7.025928,-1.450368,-1.192190,0.220898,-3.886190,3.595910,-0.139328,3.267874,4.955575,-0.773781,9.494576,4.848712,6.391927,-9.965506,-9.895020,6.945359,3.121167,4.871134,6.598855,-7.235347,-9.270598,-2.768014,-9.570258,2.479232,5.543013,-6.004764,-5.085463,0.712730,-5.916859,-8.520477,7.493162,8.534087,5.437586,-3.972170,9.176036,-6.927155,-4.709939,-8.442082,7.945147,1.375642,-7.091957,5.438257,1.083058,-1.517694,3.129232,-9.828900,3.824458,7.286685,-6.242555,4.636830,-3.510015,4.185445,-5.778927,1.055733,6.402627,-5.279646,-5.517357,4.673801,-9.717543,-6.829055,-4.577914,-9.295052,-0.599927,-2.130550,0.696104,-5.336248,-3.050234,0.535573,-7.098145,-5.510472,7.387634,2.475817,-3.662011,6.770495,-6.951567,-4.074742,-0.704217,-1.329014,-1.736255,5.735139,-3.356429,4.650476,-2.555645,4.051505,-0.591763,-8.695807,5.478303,2.858748,-0.996414,-4.896764,-4.837167,8.565592,-5.966210,8.087896,2.656523,-3.433688,8.573570,-2.148992,-2.764558,-2.061262,5.457648,-1.859420,-8.491964,-5.931282,-9.797028,9.258252,-5.839841,2.207168,7.774155,5.132175,-8.089661,-2.252651,-8.128151,1.205589,6.522500,4.382330,-1.564713,7.703289,6.945282,-1.698352,-0.601147,2.820162,-8.587292,9.223117,5.573606,-3.575719,1.400166,3.761929,2.809073,-1.983636,-4.186917,1.934866,-2.936422,9.780658,6.966329,0.109064,-0.358688,-6.508160,-5.484399,-6.755125,-6.923405,6.922552,9.630225,5.606591,2.336128,7.293720,4.535031,-4.439343,2.484375,-2.908250,1.028422,4.715684,-0.237044,2.641933,3.587440,-4.766276,-4.038790,9.613087,2.834129,4.138335,5.489299,-7.242723,8.517511,-1.268104,0.983237,2.055327,-5.606263,-3.200241,-6.592654,4.264746,7.122732,-3.515034,6.133570,3.792659,-6.678027,6.067414,-0.873422,1.971665,6.225925,-2.672092,-6.070233,1.415138,-6.279087,1.178821,7.405554,6.408890,-5.688775,8.538251,1.281870,-5.773741,7.256229,6.235313,-0.923262,0.905739,-0.316621,-8.809494,-7.365387,-9.695410,9.739748,1.117562,-3.901811,3.952750,-2.820251,5.795257,1.402587,-0.713495,9.482201,-6.742281,-8.733466,0.114331,-7.354647,9.348999,-3.793987,5.353329,4.440930,-8.026190,3.956601,-6.392555,-9.622333,-0.827436,-3.171270,-1.159950,-7.625383,9.566520,7.193020,-2.949502,-1.326288,-3.816496,1.483999,-1.356853,-5.654911,-1.587505,-3.768434,-7.100652,-8.743110,-7.458586,1.807972,3.269834,-3.231660,-6.328262,4.786040,1.651999,-3.818604,-6.908774,4.703140,-8.889869,-0.987665,-8.606438,1.313706,4.707169,9.609888,-0.084553,8.467614,-6.077088,-3.075215,8.320401,7.633088,9.558285,-7.370148,4.328033,-1.509122,0.270804,8.960051,1.729929,-5.368915,-7.725217,9.868593,-0.132053,-8.591499,-2.666620,3.555169,3.931458,-3.599577,-7.429214,-4.195224,-5.403044,3.149907,3.791278,5.566281,-7.166107,-8.750527,6.251009,3.151820,-3.249800,4.061903,3.570900,-9.543970,2.071706,0.771210,2.849080,-9.715634,5.547203,1.178190,-6.270315,5.197323,4.310695,6.879062,6.354584,-3.909892,3.604147,-8.835839,5.864670,6.353138,1.064093,-5.754328,-2.655895,4.020620,0.249232,4.310826,3.546843,-6.847479,-9.766719,-8.928110,-9.452741,3.453799,-8.487904,-4.135071,-3.337435,-8.903612,6.671275,-1.530572,0.167228,8.309043,-5.133540,-6.641930,0.415653,-7.882638,0.260933,-4.845983,-2.767852,9.790666,6.502939,-1.744157,4.912203,-6.797263,9.993727,-0.603879,-4.889398,7.549321,-7.493014,-2.178791,-1.899646,9.329505,4.085053,-7.598938,1.308599,-2.724088,4.578229,-5.147886,-2.156166,2.865133,5.012787,-1.428150,8.868331,4.728486,-3.401839,-3.759189,-6.849246,-2.115370,8.626487,1.587541,-0.085279,9.132239,-1.730088,-7.025330,-3.135114,5.423077,2.987372,1.634814,5.499015,7.943651,1.526071,4.363698,5.266824,1.543209,-6.483504,-3.998365,0.348804,-2.578837,4.204559,-9.991232,7.192921,-8.686541,8.120465,3.743214,-7.174577,-8.888041,-7.893272,6.351074,8.634634,-4.962351,-3.977497,-3.607796,3.699585,0.917956,3.706654,-2.822630,1.095806,-9.654123,7.044614,-8.924283,-9.175121,8.223693,-1.828978,-5.851011,5.433612,7.628581,8.106223,4.636883,-9.402785,-2.576311,-4.688927,-4.169777,7.597899,3.460738,0.646314,-2.652237,-0.439575,-3.757032,-0.761678,7.380241,-0.568627,4.546669,-8.277919,-9.819883,-9.353563,0.765627,2.275551,-9.593181,-9.367198,0.501350,0.189571,5.132538,2.338515,-2.067075,-5.665807,-3.323242,-9.156684,6.171089,-0.635399,-2.963946,-9.754526,-9.912971,3.530677,-5.755387,-0.681317,8.038834,1.776276,8.596704,0.655835,-9.186504,5.329556,-8.097595,1.436917,6.195703,5.273001,-5.346176,5.805760,8.247897,2.972328,-8.663360,-8.650763,-6.201304,-4.031003,-9.378669,9.840569,7.418352,3.763094,1.229382,6.004268,8.641108,-2.578688,-4.656807,-6.438278,-3.888408,5.328584,7.441832,9.737799,2.295530,8.627630,2.333217,8.049406,-9.728253,-5.119877,9.606008,-8.753447,-5.964787,-7.971961,-1.599335,-0.390437,-5.523908,0.979555,8.843123,8.016880,-2.256427,9.777927,-8.799069,-5.980659,8.699228,-3.225426,7.801598,2.231178,5.943627,-0.159420,-5.267402,-8.401465,6.579378,-4.138947,-8.188866,2.372342,6.279924,-0.703437,6.747737,-1.422510,0.257181,1.698416,5.882816,-0.782976,-4.484118,-3.678767,-3.619259,-8.281394,-9.160503,-5.318481,-1.430463,5.345839,-2.212533,0.499076,-4.230997,9.801377,-3.510857,-4.092095,2.708276,-4.139790,-2.674971,4.702088,-6.181711,-7.918747,-3.140736,7.849647,-8.953994,-7.501572,3.692726,7.994369,9.762251,5.021809,6.076248,7.503363,1.906891,1.502910,-1.244722,-7.248292,-5.708721,3.514855,4.476415,8.007028,4.937019,9.277580,-2.818665,0.882763,7.714231,4.499712,-6.063723,7.496649,9.240965,1.428799,1.645262,-3.687205,-8.743223,2.015304,-3.008228,-8.925730,-6.843334,-6.436583,-6.695968,5.686695,8.095177,-0.901902,4.624992,6.389370,-9.082064,4.629576,-6.117387,3.344499,3.975574,-0.456227,-8.773127,-2.086857,-9.809602,8.761504,-1.537400,-3.091965,9.257850,9.059111,5.419973,4.522963,-6.814635,2.875690,-3.970144,8.779022,0.587790,-0.406699,-2.046326,4.026369,4.999248,7.789766,2.424648,3.259870,3.786957,9.878879,5.933110,-8.462225,9.630249,-5.624136,1.658955,-9.074278,-7.734996,-2.173350,8.915860,4.612260,-1.934027,-2.121234,3.720112,-0.120950,-2.342874,2.000495,0.453421,6.226006,1.211532,-7.154297,-9.276246,-8.906831,5.431313,1.775023,-3.872480,-2.448365,-0.117034,-3.908054,-0.713070,-5.254532,-5.884205,2.631437,7.897325,8.429988,-0.188155,8.900612,-7.644567,0.040396,-5.542057,-7.138789,-8.980070,7.846857,6.131325,-7.218587,9.494440,-6.987304,-7.955768,5.460003,7.635418,-1.526544,-2.968323,-5.808469,9.493327,5.127731,-9.600343,-5.809506,-8.916223,2.587094,9.612499,6.038060,-4.457006,0.960410,8.564050,3.035451,1.004293,1.061102,8.888724,-0.634178,5.315250,3.056514,7.978219,-7.983802,4.815237,4.842619,0.238956,3.701618,-2.457410,-0.728634,3.828386,-8.804286,-3.787726,0.872553,6.528687,-6.415753,4.612371,0.591250,-6.475802,-0.356869,2.284139,-0.067031,-3.276221,2.354616,-0.393232,7.536749], dtype = "float32")#candidate|8948|(1540,)|const|float32
call_8947 = relay.TupleGetItem(func_7459_call(relay.reshape(const_8948.astype('float32'), [11, 14, 10])), 1)
call_8949 = relay.TupleGetItem(func_7461_call(relay.reshape(const_8948.astype('float32'), [11, 14, 10])), 1)
uop_8960 = relay.sin(const_8948.astype('float32')) # shape=(1540,)
output = relay.Tuple([call_8945,call_8947,uop_8960,])
output2 = relay.Tuple([call_8946,call_8949,uop_8960,])
func_8967 = relay.Function([], output)
mod['func_8967'] = func_8967
mod = relay.transform.InferType()(mod)
output = func_8967()
func_8968 = relay.Function([], output)
mutated_mod['func_8968'] = func_8968
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6532_call = mod.get_global_var('func_6532')
func_6533_call = mutated_mod.get_global_var('func_6533')
call_8998 = relay.TupleGetItem(func_6532_call(), 2)
call_8999 = relay.TupleGetItem(func_6533_call(), 2)
output = call_8998
output2 = call_8999
func_9002 = relay.Function([], output)
mod['func_9002'] = func_9002
mod = relay.transform.InferType()(mod)
mutated_mod['func_9002'] = func_9002
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9002_call = mutated_mod.get_global_var('func_9002')
call_9003 = func_9002_call()
output = call_9003
func_9004 = relay.Function([], output)
mutated_mod['func_9004'] = func_9004
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7714_call = mod.get_global_var('func_7714')
func_7716_call = mutated_mod.get_global_var('func_7716')
call_9013 = func_7714_call()
call_9014 = func_7714_call()
func_7060_call = mod.get_global_var('func_7060')
func_7062_call = mutated_mod.get_global_var('func_7062')
call_9047 = func_7060_call()
call_9048 = func_7060_call()
func_6445_call = mod.get_global_var('func_6445')
func_6447_call = mutated_mod.get_global_var('func_6447')
call_9049 = relay.TupleGetItem(func_6445_call(), 0)
call_9050 = relay.TupleGetItem(func_6447_call(), 0)
func_6793_call = mod.get_global_var('func_6793')
func_6794_call = mutated_mod.get_global_var('func_6794')
call_9059 = func_6793_call()
call_9060 = func_6793_call()
output = relay.Tuple([call_9013,call_9047,call_9049,call_9059,])
output2 = relay.Tuple([call_9014,call_9048,call_9050,call_9060,])
func_9078 = relay.Function([], output)
mod['func_9078'] = func_9078
mod = relay.transform.InferType()(mod)
output = func_9078()
func_9079 = relay.Function([], output)
mutated_mod['func_9079'] = func_9079
mutated_mod = relay.transform.InferType()(mutated_mod)
var_9088 = relay.var("var_9088", dtype = "float32", shape = (5, 15, 6))#candidate|9088|(5, 15, 6)|var|float32
uop_9089 = relay.sinh(var_9088.astype('float32')) # shape=(5, 15, 6)
output = uop_9089
output2 = uop_9089
func_9094 = relay.Function([var_9088,], output)
mod['func_9094'] = func_9094
mod = relay.transform.InferType()(mod)
var_9095 = relay.var("var_9095", dtype = "float32", shape = (5, 15, 6))#candidate|9095|(5, 15, 6)|var|float32
output = func_9094(var_9095)
func_9096 = relay.Function([var_9095], output)
mutated_mod['func_9096'] = func_9096
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8395_call = mod.get_global_var('func_8395')
func_8396_call = mutated_mod.get_global_var('func_8396')
call_9105 = func_8395_call()
call_9106 = func_8395_call()
func_7194_call = mod.get_global_var('func_7194')
func_7195_call = mutated_mod.get_global_var('func_7195')
call_9114 = relay.TupleGetItem(func_7194_call(), 0)
call_9115 = relay.TupleGetItem(func_7195_call(), 0)
func_8913_call = mod.get_global_var('func_8913')
func_8915_call = mutated_mod.get_global_var('func_8915')
call_9117 = relay.TupleGetItem(func_8913_call(), 0)
call_9118 = relay.TupleGetItem(func_8915_call(), 0)
func_6873_call = mod.get_global_var('func_6873')
func_6875_call = mutated_mod.get_global_var('func_6875')
call_9121 = relay.TupleGetItem(func_6873_call(), 0)
call_9122 = relay.TupleGetItem(func_6875_call(), 0)
output = relay.Tuple([call_9105,call_9114,call_9117,call_9121,])
output2 = relay.Tuple([call_9106,call_9115,call_9118,call_9122,])
func_9124 = relay.Function([], output)
mod['func_9124'] = func_9124
mod = relay.transform.InferType()(mod)
mutated_mod['func_9124'] = func_9124
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9124_call = mutated_mod.get_global_var('func_9124')
call_9125 = func_9124_call()
output = call_9125
func_9126 = relay.Function([], output)
mutated_mod['func_9126'] = func_9126
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7887_call = mod.get_global_var('func_7887')
func_7889_call = mutated_mod.get_global_var('func_7889')
call_9148 = func_7887_call()
call_9149 = func_7887_call()
func_8302_call = mod.get_global_var('func_8302')
func_8304_call = mutated_mod.get_global_var('func_8304')
call_9160 = relay.TupleGetItem(func_8302_call(), 0)
call_9161 = relay.TupleGetItem(func_8304_call(), 0)
func_7152_call = mod.get_global_var('func_7152')
func_7153_call = mutated_mod.get_global_var('func_7153')
call_9163 = relay.TupleGetItem(func_7152_call(), 0)
call_9164 = relay.TupleGetItem(func_7153_call(), 0)
func_6793_call = mod.get_global_var('func_6793')
func_6794_call = mutated_mod.get_global_var('func_6794')
call_9174 = func_6793_call()
call_9175 = func_6793_call()
output = relay.Tuple([call_9148,call_9160,call_9163,call_9174,])
output2 = relay.Tuple([call_9149,call_9161,call_9164,call_9175,])
func_9176 = relay.Function([], output)
mod['func_9176'] = func_9176
mod = relay.transform.InferType()(mod)
mutated_mod['func_9176'] = func_9176
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9176_call = mutated_mod.get_global_var('func_9176')
call_9177 = func_9176_call()
output = call_9177
func_9178 = relay.Function([], output)
mutated_mod['func_9178'] = func_9178
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9176_call = mod.get_global_var('func_9176')
func_9178_call = mutated_mod.get_global_var('func_9178')
call_9262 = relay.TupleGetItem(func_9176_call(), 0)
call_9263 = relay.TupleGetItem(func_9178_call(), 0)
func_8193_call = mod.get_global_var('func_8193')
func_8196_call = mutated_mod.get_global_var('func_8196')
var_9292 = relay.var("var_9292", dtype = "float32", shape = (24,))#candidate|9292|(24,)|var|float32
const_9293 = relay.const([False,False,False,True,True,True,False,False,False,True,False,False,False,True,False,True,True,False,False,True,True,True,False,True,True,True,False,False,False,False,False,False,False,True,True,False,False,True,False,False,True,False,False,True,False,True,True,True,True,True,False,False,False,False,True,True,True,False,False,True,False,False,True,True,True,False,True,True,False,True,True,True,True,False,False,True,True,True,True,False,True,True,True,True,False,False,True,True,False,True,True,True,True,False,False,True,True,True,False,True,False,False,False,True,False,False,True,True,False,False,True,True,True,False,False,True,True,True,True,True,False,False,False,False,False,False,True,True,True,True,False,True,True,False,True,True,True,False,False,True,False,False,False,True,False,False,True,True,False,False,True,False,False,True,False,False,False,True,False,True,True,False,True,False,True,False,False,False,False,False,True,False,False,True,True,True,True,False,False,True,False,True,False,False,True,False,True,True,False,True,False,True,True,True,True,False,True,True,False,True,False,True,True,False,False,True,True,False,True,False,True,False,True,True,False,False,False,True,True,False,False,False,True,False,True,False,False,True,False,True,False,False,False,False,False,True,True,False,True,False,False,False,False,True,False,True,False,False,False,True,False,True,True,True,True,True,True,True,False,True,False,False,True,True,False,False,False,True,False,True,False,False,True,False,True,True,True,True,True,False,True,True,True,False,False,False,True,False,True,True,True,False,False,True,True,False,True,True,False,True,False,False,True,True,False,False,True,False,False,False,False,True,False,True,True,False,True,True,False,False,False,False,False,False,True,True,True,False,False,True,True,False,True,False,False,True,False,True,True,False,True,True,True,True,False,True,False,True,False,False,False,False,False,False,True,True,False,False,True,False,True,False,True,False,False,True,True,True,False,True,True,True,False,True,True,True,False,True,False,False,True,False,False,False,True,True,True,True,True,True,True,False,True,False,False,False,True,False,True,True,True,False,True,True,True,False,False,True,True,True,True,False,True,False,False,False,True,False,True,True,True,True,True,False,True,False,False,True,False,True,False,True,False,True,False,True,True,True,True,False,False,False,True,True,False,True,False,False,True,True,True,False,False,False,True,False,False,True,True,False,True,True,True,True,True,False,False,False,True,True,True,True,False,False,False,False,True,False,False,True,False,True,True,False,False,False,False,False,False,True,True,True,True,False,False,False,False,False,False,True,False,True,False,False,True,True,False,True,True,True,False,True,False,True,False,False,False,False,True,False,False,False,True,True,False,True,True,True,True,True,False,True,True,True,True,False,False,False,True,True,True,True,True,True,True,True,False,True,True,True,True,True,True,False,False,True,True,True,False,False,True,True,False,False,False,True,False,False,True,False,True,False,True,False,False,False,True,False,True,True,True,False,False,False,False,True,True,True,False,False,False,True,True,False,True,True,True,False,True,True,False,False,True,True,True,True,False,False,True,True,True,False,False,False,False,False,True,False,False,True,False,False,True,True,False,False,False,True,False,True,False,False,True,False,False,False,True,False,True,True,True,False,True,True,False,False,False,True,False,False,True,False,False,False,True,False,False,True,True,True,False,False,True,True,False,True,False,True,True,True,False,True,True,False,False,False,False,False,True,False,False,False,False,False,False,True,False,True,False,False,False,False,False,True,True,False,True,True,True,False,False,False,True,False,False,False,False,False,False,True,False,True,False,False,True,False,True,False,True,True,False,True,True,False,True,False,False,False,False,True,False,False,True,False,False,True,False,False,True,False,False,True,True,False,True,True,False,False,True,False,True,True,True,False,True,False,True,True,False,True,False,True,True,False,True,False,True,True,False,True,True,False,False,True,False,False,False,True,False,True,True,False,False,False,False,True,True,True,False,True,False,False,False,False,False,True,False,False,False,False,True,False,True,True,True,True,True,True,False,False,False,True,False,False,False,False,True,True,False,True,False,False,True,True,False,False,False,False,False,True,True,True,True,False,False,False,True,False,True,False,False,True,True,False,True,True,False,False,False,False,True,True,True,False,False,True,False,False,False,False,True,True,True,False,True,False,False,False,False,True,False,False,False,False,False,True,True,False,True,False,True,False,True,False,True,True,True,True,True,True,False,True,False,True,True,True,True,False,False,True,True,False,True,False,False,True,True,False,False,True,False,True,True,True,True,False,False,False,False,True,False,False,False,False,True,False,False,True,False,False,False,True,False,False,True,True,True,True,True,True,False,True,False,True,False,True,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,True,True,True,True,True,False,False,False,True,False,False,False,False,True,False,False,True,False,False,True,True,False,True,True,False,True,True,True,True,True,True,False,True,False,True,False,False,False,False,True,False,False,True,False,True,True,False,True,True,False,False,True,False,False,False,True,True,False,False,False,True,True,True,False,False,False,False,False,False,False,False,False,False,True,True,False,True,True,True,False,False,True,True,False,True,False,True,False,False,True,True,True,True,False,False,True,False,False,True,True,True,True,True,True,True,False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,True,True,True,False,True,True,True,True,False,True,False,True,False,False,False,True,False,False,True,False,False,False,False,False,False,True,False,False,True,False,False,False,True,True,True,False,True,False,True,True,True,False,False,False,False,False,True,False,False,True,True,True,True,True,True,True,False,True,True,True,True,True,False,False,False,True,False,True,True,False,False,True,False,False,True,False,True,False,False,True,True,True,False,False,True,False,True,True,True,False,True,True,True,True,True,False,False,False,True,True,False,False,False,False,False,True,False,True,False,False,True,True,False,True,False,True,True,True,False,True,False,True,False,True,False,True,True,False,True,True,False,True,True,False,True,True,False,True,True,False,False,False,True,False,True,True,True,True,True,True,False,True,True,False,False,True,True,False,False,True,True,False,False,False,False,False,True,False,True,False,False,True,False,False,True,False,True,False,True,False,False,True,True,True,True,False,False,False,False,False,True,True,False,False,True,True,False,False,True,True,True,False,True,True,False,False,True,True,True,False,False,True,True,True,False,False,True,False,True,True,True,False,False,True,False,True,False,False,False,False,False,True,False,True,False,False,True,False,True,False,False,True,True,False,True,True,False,False,False,True,False,True,False,False,False,False,False,True,True,False,True,True,True,True,False,True,True,True,True,False,False,False,False,True,False,True,True,False,True,True,False,True,False,False,False,False,False,False,True,True,False,False,False,True,True,False,False,False,False,False,True,False,False,True,True,False,False,False,False,True,True,False,True,True,False,True,False,True,True,True,False,True,False,True,False,True,True,False,False,True,False,True,True,False,False,True,False,False,True,True,True,True,True,False,False,False,True,False,True,False,False,True,True,False,False,True,True,False,False,True,True,False,False,True,True,False,False,True,False,True,False,False,False,False,False,True,False,False,True,True,False,True,False,False,True,True,True,True,True,True,False,False,False,True,True,True,True,True,False,False,True,True,False,True,True,False,False,True,False,False,False,True,True,False,True,True,True,False,False,False,False,False,True,False,True,False,True,True,False,True,True,True,False,True,False,True,True,True,False,False,True,False,True,False,True,False,True,False,False,True,True,False,False,False,False,True,False,True,False,False,True,True,True,True,False,False,True,False,True,True,False,False,False,True,False,True,True,False,True,True,True,False,False,True,False,False,True,True,False,True,True,True,True,True,False,True,True,True,True,False,True,True,False,True,False,False,False,True,False,True,True,False,False,True,True,False,True,False,True,True,False,True,False,True,False,True,False,True,False,False,True,True,True,True,False,False,True,False,True,False,False,False,False,False,True,True,False,True,False,False,False,False,True,True,True,True,False,True,False,False,True,True,False,True,False,False,True,True,True,False,True,True,True,True,True,False,True,True,True,True,True,False,True,False,True,False,True,True,True,True,True,True,False,True,False,False,False,True,False,True,True,True,False,False,True,True,True,False,False,False,True,False,False,False,False,True,False,False,False,True,True,False,False,False,True,False,False,True,True,False,False,True,False,False,True,True,True,False,True,False,True,False,False,True,False,False,True,False,False,True,True,False,True,False,False,True,False,False,False,False,True,True,True,True,True,False,False,True,True,True,True,False,True,True,True,True,True,False,True,False,False,False,False,True,False,False,False,True,False,True,True,True,False,False,False,True,False,False,False,True,True,True,True,False,False,True,True,False,True,False,False,True,True,False,True,True,False,True,False,False,False,True,False,False,True,False,False,False,True,False,True,False,False,True,True,False,False,False,False,True,True,False,True,False,False,False,True,False,True,False,True,False,True,True,False,True,True,False,True,False,True,False,True,True,True,False,True,True,False,False,True,True,False,False,True,True,False,True,True,True,True,False,True,False,True,False,True,True,False,False,True,True,True,False,False,False,False,False,False,True,False,True,False,False,True,False,True,True,True,True,False,False,True,False,False,True,False,False,False,False,False,True,False,True,False,False,False,False,False,False,True,False,True,False,True,False,False,False,True,True,True,True,True,True,True,True,False,True,True,False,False,False,True,False,True,True,False,True,False,True,True,True,True,False,True,False,False,True,True,True,False,False,True,True,True,False,True,True,False,False,True,False,False,True,False,False,False,False,True,False,True,True,False,True,True,True,True,False,True,False,True,True,True,False,True,False,True,False,False,True,False,True,True,True,False,True,True,True,True,False,True,True,True,True,False,True,True,True,True,False,False,False,True,True,True,False,True,False,False,True,True,True,True,False,False,True,True,True,False,False,True,False,True,True,True,True,False,False,True,True,False,True,True,False,False,False,False,True,False,True,True,True,False,False,True,False,True,False,True,False,True,False,False,False,True,True,False,True,False,True,False,False,False,False,False,False,False,True,True,True,False,False,False,False,False,False,False,False,False,True,False,True,True,False,False,True,True,False,False,True,True,True,False,True,True,False,True,True,True,False,False], dtype = "bool")#candidate|9293|(2112,)|const|bool
call_9291 = relay.TupleGetItem(func_8193_call(relay.reshape(var_9292.astype('float32'), [24,]), relay.reshape(const_9293.astype('bool'), [2, 1056]), ), 5)
call_9294 = relay.TupleGetItem(func_8196_call(relay.reshape(var_9292.astype('float32'), [24,]), relay.reshape(const_9293.astype('bool'), [2, 1056]), ), 5)
bop_9295 = relay.bitwise_or(call_9291.astype('uint8'), relay.reshape(const_9293.astype('uint8'), relay.shape_of(call_9291))) # shape=(2, 1056)
bop_9298 = relay.bitwise_or(call_9294.astype('uint8'), relay.reshape(const_9293.astype('uint8'), relay.shape_of(call_9294))) # shape=(2, 1056)
bop_9301 = relay.greater(bop_9295.astype('bool'), relay.reshape(const_9293.astype('bool'), relay.shape_of(bop_9295))) # shape=(2, 1056)
bop_9304 = relay.greater(bop_9298.astype('bool'), relay.reshape(const_9293.astype('bool'), relay.shape_of(bop_9298))) # shape=(2, 1056)
uop_9330 = relay.cos(bop_9295.astype('float32')) # shape=(2, 1056)
uop_9332 = relay.cos(bop_9298.astype('float32')) # shape=(2, 1056)
const_9344 = relay.const([[False,False,True,True,False,False,False,True,True,True,True,False,True,True,False,False,False,False,False,True,True,False,True,True,True,False,False,True,True,True,True,False,True,False,True,True,True,False,False,False,True,True,True,False,False,True,True,True,True,True,False,False,True,True,True,True,True,True,False,True,False,False,True,True,False,False,False,True,False,False,False,True,True,True,False,True,False,True,False,True,False,False,True,False,True,False,True,True,True,True,False,True,True,True,False,False,True,False,True,False,False,True,True,True,False,True,False,False,False,True,True,True,True,False,True,True,False,False,False,True,True,False,False,True,True,False,True,False,False,False,False,False,False,False,True,False,True,False,True,False,True,False,True,False,True,False,True,True,False,True,True,True,True,True,False,False,False,True,True,False,False,True,True,False,True,False,False,True,False,True,True,True,False,False,False,True,False,True,False,False,True,True,True,False,True,False,True,True,True,False,True,True,True,False,True,True,True,False,False,True,True,True,True,True,True,True,False,True,False,True,True,True,False,False,False,True,False,True,False,False,True,False,True,False,False,True,True,True,True,True,True,False,False,False,False,True,True,False,False,True,True,True,True,False,False,True,True,False,False,False,False,True,False,False,True,False,True,True,False,False,False,True,False,True,True,False,False,False,True,True,True,False,False,False,False,False,True,False,True,True,False,True,False,False,True,False,False,False,True,False,False,True,True,True,False,False,True,True,False,False,False,False,True,False,False,True,True,False,True,False,True,True,True,False,True,True,False,False,True,True,False,False,False,False,True,True,False,False,False,True,True,False,True,False,False,True,True,True,True,True,True,True,False,True,True,False,False,True,False,True,False,False,True,False,False,False,True,True,True,True,False,False,True,True,False,False,False,True,True,False,False,True,True,True,False,False,True,False,True,True,True,True,True,True,True,False,True,True,True,False,False,True,False,False,False,False,False,False,False,True,False,False,False,True,True,False,True,False,False,False,True,False,True,True,True,True,True,False,False,False,True,False,True,True,False,True,False,False,True,False,False,False,False,False,True,False,True,True,False,True,True,False,True,True,True,False,False,False,True,False,False,False,False,True,True,True,False,True,True,True,True,True,True,False,False,True,False,True,False,False,False,True,False,False,False,True,False,False,True,True,False,True,True,True,False,True,False,False,False,True,False,False,True,True,False,True,False,False,False,False,False,False,False,True,False,False,False,True,True,False,False,True,True,False,False,False,True,False,False,True,False,False,True,True,False,True,False,False,True,False,True,False,False,True,True,True,True,True,False,False,True,False,False,True,False,False,True,True,True,True,True,True,False,False,False,False,False,False,False,True,False,True,True,False,False,False,True,False,False,True,False,True,False,False,False,False,True,True,False,False,True,True,True,True,True,True,True,True,True,True,True,True,True,False,True,True,True,True,True,True,False,False,False,False,False,True,True,True,False,True,True,True,False,False,False,True,True,True,True,False,True,False,True,False,False,True,True,True,False,True,False,False,True,True,True,True,False,False,True,False,True,False,False,True,True,False,False,False,False,True,True,True,True,False,True,False,True,False,True,True,True,False,False,False,True,True,False,True,True,True,True,False,True,True,True,False,False,True,True,False,True,False,True,False,False,False,False,False,False,False,True,False,False,True,False,True,False,False,False,True,True,True,True,True,True,False,True,True,False,False,True,True,False,False,True,True,False,False,True,False,False,False,False,False,False,True,True,False,True,True,False,True,False,True,False,True,False,True,False,False,False,True,True,False,True,False,True,True,False,False,False,False,True,False,False,True,True,True,True,True,False,True,False,True,True,False,False,True,True,True,True,True,False,False,False,False,False,True,True,True,False,True,True,True,False,False,False,True,True,True,False,False,True,False,True,False,False,True,True,False,False,False,True,True,False,True,True,False,True,False,True,True,False,True,False,False,True,False,True,False,True,False,False,False,False,True,False,True,True,True,True,True,True,False,False,True,False,True,False,True,False,True,False,False,False,False,False,True,False,True,False,True,True,False,False,False,False,False,True,True,False,False,False,True,False,True,True,False,False,True,True,False,False,True,False,True,True,False,False,True,False,False,True,True,True,True,True,True,True,False,False,True,False,False,True,True,True,False,True,False,True,True,False,True,False,True,False,False,True,True,True,True,True,False,True,False,True,False,True,True,True,True,False,True,False,True,False,True,True,False,True,False,True,False,False,True,True,False,True,False,True,True,False,True,True,True,True,True,True,True,False,False,False,False,False,False,False,False,False,True,False,True,False,True,True,False,True,False,False,False,True,False,True,True,True,True,False,False,False,True,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,True,False,False,False,True,False,True,False,True,False,False,False,False,True,True,False,True,True,True,True,False,True,False,False,True,True,False,True,True,False,True,True,False,False,True,True,False,False,True,False,True,True,False,True,False,True,False,False,True,True,True,True,False,True,True,False,False,False,True],[False,False,True,True,False,True,False,True,True,False,False,True,True,True,True,True,True,True,True,True,False,False,True,True,False,False,False,False,True,False,False,True,False,True,False,False,False,False,True,True,False,True,True,False,False,False,True,False,True,False,True,True,False,False,False,False,True,True,True,False,True,True,True,False,False,True,False,False,True,False,True,True,True,False,True,False,True,False,False,False,False,True,False,False,False,False,True,True,True,False,True,True,True,False,True,True,True,True,True,False,True,False,True,True,True,True,True,False,True,True,False,False,False,False,False,False,True,True,True,False,True,False,True,False,False,False,True,True,False,False,True,True,True,True,False,False,False,True,False,True,False,False,True,True,True,False,True,False,True,True,False,True,True,False,True,False,False,True,True,False,True,True,False,False,False,False,False,False,False,False,True,False,True,True,True,False,True,True,False,False,False,False,True,True,False,True,True,True,False,True,True,True,False,True,False,False,False,False,False,False,True,True,False,False,False,False,False,True,True,False,False,True,False,True,False,True,False,False,False,False,True,True,False,True,True,False,True,True,False,True,True,True,False,True,True,True,True,True,False,False,True,False,True,False,False,False,True,False,False,True,True,True,False,True,False,True,True,True,False,True,False,True,True,False,True,False,True,False,False,False,True,True,False,False,True,False,False,False,True,False,True,False,True,False,True,True,True,False,False,False,True,False,True,False,True,False,True,False,True,True,False,False,False,True,False,False,True,True,False,False,True,False,False,True,False,True,False,True,True,True,True,True,True,True,True,False,True,False,True,False,True,True,False,False,False,True,False,False,False,False,False,True,False,True,False,False,False,True,False,False,False,True,True,True,False,False,False,False,True,True,False,False,False,True,False,True,False,False,True,False,True,True,True,True,False,False,False,True,True,False,True,True,True,False,False,False,False,False,False,True,True,False,False,False,True,False,True,True,True,False,True,False,True,True,True,False,True,True,True,False,True,False,True,True,False,True,True,False,False,True,False,True,True,False,True,True,False,False,False,True,False,False,True,False,True,True,False,False,False,True,False,False,True,True,True,True,False,False,True,False,True,True,False,False,True,True,True,False,False,False,True,False,False,True,False,True,False,False,True,False,True,True,False,False,False,True,True,False,True,True,True,False,False,True,True,False,False,False,False,False,False,True,True,False,False,True,True,False,False,False,True,True,True,True,False,True,True,True,False,False,False,True,True,True,False,False,True,False,False,True,True,True,False,False,True,True,True,True,True,True,True,False,True,True,False,True,False,True,False,False,True,True,True,False,False,True,False,True,False,True,False,True,False,False,True,True,True,False,False,True,False,False,True,True,True,True,False,True,False,False,False,False,True,True,False,True,True,True,False,True,False,False,False,False,True,True,True,False,True,False,True,True,False,True,False,True,False,False,False,True,True,False,True,False,False,True,False,True,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,False,True,False,True,True,True,True,False,False,False,True,False,False,True,False,True,True,True,True,False,False,True,False,False,False,False,False,False,False,False,False,False,True,True,True,True,False,True,True,False,True,True,False,True,False,True,False,True,False,True,True,False,False,False,False,False,False,False,False,True,True,True,True,False,False,True,True,False,False,True,False,True,False,False,False,False,True,False,True,True,True,True,True,True,True,True,True,True,False,True,False,True,False,False,True,False,True,True,False,True,False,False,False,False,True,False,False,False,False,True,False,True,False,True,False,True,True,True,True,True,False,True,False,True,True,True,True,False,False,False,True,False,False,True,False,True,True,False,False,True,False,False,False,False,True,False,False,False,True,True,True,False,False,True,True,False,True,False,False,True,False,False,False,True,True,False,False,True,True,False,False,True,False,True,True,False,True,True,False,True,False,False,True,True,True,False,True,False,False,True,False,True,True,False,False,True,False,False,False,True,True,False,False,True,True,False,True,True,True,False,False,False,False,True,True,True,True,False,False,True,True,False,False,True,False,False,False,False,True,False,False,False,False,False,True,False,False,True,True,False,True,True,False,True,False,True,False,True,True,False,False,False,False,True,True,False,True,True,True,False,True,True,False,False,True,False,False,False,True,True,False,False,False,False,True,False,True,True,True,False,False,True,False,False,False,False,True,False,True,False,False,True,True,True,True,False,True,True,False,False,False,False,False,False,False,True,False,True,False,True,True,False,False,False,True,True,False,False,True,True,False,True,False,True,False,True,True,True,False,False,True,False,False,True,False,True,False,False,False,True,True,False,True,False,False,False,True,False,False,False,True,False,True,False,True,False,True,True,True,False,True,True,False,True,False,True,False,True,True,True,False,True,True,True,True,True,False,False,True,False,False,False,True,True,False,False,True,False,True,True,False,False,False,False,False,False,True,False,True,True,True,True,False,False,True,True,True,True,True,False,True,True,True,False,False,True,True,False,True,False,True,True,True,True,False,True,True,True,True,True,False,True,False]], dtype = "bool")#candidate|9344|(2, 1056)|const|bool
bop_9345 = relay.floor_divide(call_9291.astype('float32'), relay.reshape(const_9344.astype('float32'), relay.shape_of(call_9291))) # shape=(2, 1056)
bop_9348 = relay.floor_divide(call_9294.astype('float32'), relay.reshape(const_9344.astype('float32'), relay.shape_of(call_9294))) # shape=(2, 1056)
output = relay.Tuple([call_9262,var_9292,bop_9301,uop_9330,bop_9345,])
output2 = relay.Tuple([call_9263,var_9292,bop_9304,uop_9332,bop_9348,])
func_9352 = relay.Function([var_9292,], output)
mod['func_9352'] = func_9352
mod = relay.transform.InferType()(mod)
mutated_mod['func_9352'] = func_9352
mutated_mod = relay.transform.InferType()(mutated_mod)
var_9353 = relay.var("var_9353", dtype = "float32", shape = (24,))#candidate|9353|(24,)|var|float32
func_9352_call = mutated_mod.get_global_var('func_9352')
call_9354 = func_9352_call(var_9353)
output = call_9354
func_9355 = relay.Function([var_9353], output)
mutated_mod['func_9355'] = func_9355
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6492_call = mod.get_global_var('func_6492')
func_6494_call = mutated_mod.get_global_var('func_6494')
call_9369 = func_6492_call()
call_9370 = func_6492_call()
output = call_9369
output2 = call_9370
func_9372 = relay.Function([], output)
mod['func_9372'] = func_9372
mod = relay.transform.InferType()(mod)
output = func_9372()
func_9373 = relay.Function([], output)
mutated_mod['func_9373'] = func_9373
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7060_call = mod.get_global_var('func_7060')
func_7062_call = mutated_mod.get_global_var('func_7062')
call_9409 = func_7060_call()
call_9410 = func_7060_call()
output = relay.Tuple([call_9409,])
output2 = relay.Tuple([call_9410,])
func_9437 = relay.Function([], output)
mod['func_9437'] = func_9437
mod = relay.transform.InferType()(mod)
mutated_mod['func_9437'] = func_9437
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9437_call = mutated_mod.get_global_var('func_9437')
call_9438 = func_9437_call()
output = call_9438
func_9439 = relay.Function([], output)
mutated_mod['func_9439'] = func_9439
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7968_call = mod.get_global_var('func_7968')
func_7969_call = mutated_mod.get_global_var('func_7969')
call_9452 = relay.TupleGetItem(func_7968_call(), 0)
call_9453 = relay.TupleGetItem(func_7969_call(), 0)
output = call_9452
output2 = call_9453
func_9479 = relay.Function([], output)
mod['func_9479'] = func_9479
mod = relay.transform.InferType()(mod)
output = func_9479()
func_9480 = relay.Function([], output)
mutated_mod['func_9480'] = func_9480
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7880_call = mod.get_global_var('func_7880')
func_7882_call = mutated_mod.get_global_var('func_7882')
call_9524 = relay.TupleGetItem(func_7880_call(), 1)
call_9525 = relay.TupleGetItem(func_7882_call(), 1)
func_6964_call = mod.get_global_var('func_6964')
func_6965_call = mutated_mod.get_global_var('func_6965')
call_9533 = func_6964_call()
call_9534 = func_6964_call()
output = relay.Tuple([call_9524,call_9533,])
output2 = relay.Tuple([call_9525,call_9534,])
func_9537 = relay.Function([], output)
mod['func_9537'] = func_9537
mod = relay.transform.InferType()(mod)
mutated_mod['func_9537'] = func_9537
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9537_call = mutated_mod.get_global_var('func_9537')
call_9538 = func_9537_call()
output = call_9538
func_9539 = relay.Function([], output)
mutated_mod['func_9539'] = func_9539
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6964_call = mod.get_global_var('func_6964')
func_6965_call = mutated_mod.get_global_var('func_6965')
call_9551 = func_6964_call()
call_9552 = func_6964_call()
func_8395_call = mod.get_global_var('func_8395')
func_8396_call = mutated_mod.get_global_var('func_8396')
call_9557 = func_8395_call()
call_9558 = func_8395_call()
func_8395_call = mod.get_global_var('func_8395')
func_8396_call = mutated_mod.get_global_var('func_8396')
call_9559 = func_8395_call()
call_9560 = func_8395_call()
output = relay.Tuple([call_9551,call_9557,call_9559,])
output2 = relay.Tuple([call_9552,call_9558,call_9560,])
func_9567 = relay.Function([], output)
mod['func_9567'] = func_9567
mod = relay.transform.InferType()(mod)
output = func_9567()
func_9568 = relay.Function([], output)
mutated_mod['func_9568'] = func_9568
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9537_call = mod.get_global_var('func_9537')
func_9539_call = mutated_mod.get_global_var('func_9539')
call_9723 = relay.TupleGetItem(func_9537_call(), 0)
call_9724 = relay.TupleGetItem(func_9539_call(), 0)
func_5477_call = mod.get_global_var('func_5477')
func_5479_call = mutated_mod.get_global_var('func_5479')
var_9728 = relay.var("var_9728", dtype = "float64", shape = (110,))#candidate|9728|(110,)|var|float64
call_9727 = relay.TupleGetItem(func_5477_call(relay.reshape(var_9728.astype('float64'), [10, 1, 11])), 0)
call_9729 = relay.TupleGetItem(func_5479_call(relay.reshape(var_9728.astype('float64'), [10, 1, 11])), 0)
uop_9746 = relay.log(call_9727.astype('float64')) # shape=(10, 1, 11)
uop_9748 = relay.log(call_9729.astype('float64')) # shape=(10, 1, 11)
func_9124_call = mod.get_global_var('func_9124')
func_9126_call = mutated_mod.get_global_var('func_9126')
call_9750 = relay.TupleGetItem(func_9124_call(), 1)
call_9751 = relay.TupleGetItem(func_9126_call(), 1)
bop_9752 = relay.multiply(uop_9746.astype('uint32'), relay.reshape(var_9728.astype('uint32'), relay.shape_of(uop_9746))) # shape=(10, 1, 11)
bop_9755 = relay.multiply(uop_9748.astype('uint32'), relay.reshape(var_9728.astype('uint32'), relay.shape_of(uop_9748))) # shape=(10, 1, 11)
uop_9762 = relay.tan(uop_9746.astype('float32')) # shape=(10, 1, 11)
uop_9764 = relay.tan(uop_9748.astype('float32')) # shape=(10, 1, 11)
output = relay.Tuple([call_9723,call_9750,bop_9752,uop_9762,])
output2 = relay.Tuple([call_9724,call_9751,bop_9755,uop_9764,])
func_9771 = relay.Function([var_9728,], output)
mod['func_9771'] = func_9771
mod = relay.transform.InferType()(mod)
mutated_mod['func_9771'] = func_9771
mutated_mod = relay.transform.InferType()(mutated_mod)
var_9772 = relay.var("var_9772", dtype = "float64", shape = (110,))#candidate|9772|(110,)|var|float64
func_9771_call = mutated_mod.get_global_var('func_9771')
call_9773 = func_9771_call(var_9772)
output = call_9773
func_9774 = relay.Function([var_9772], output)
mutated_mod['func_9774'] = func_9774
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8913_call = mod.get_global_var('func_8913')
func_8915_call = mutated_mod.get_global_var('func_8915')
call_9790 = relay.TupleGetItem(func_8913_call(), 0)
call_9791 = relay.TupleGetItem(func_8915_call(), 0)
uop_9800 = relay.asinh(call_9790.astype('float64')) # shape=(11, 14, 10)
uop_9802 = relay.asinh(call_9791.astype('float64')) # shape=(11, 14, 10)
func_6606_call = mod.get_global_var('func_6606')
func_6609_call = mutated_mod.get_global_var('func_6609')
var_9823 = relay.var("var_9823", dtype = "bool", shape = (2112,))#candidate|9823|(2112,)|var|bool
call_9822 = relay.TupleGetItem(func_6606_call(relay.reshape(var_9823.astype('bool'), [2112,])), 1)
call_9824 = relay.TupleGetItem(func_6609_call(relay.reshape(var_9823.astype('bool'), [2112,])), 1)
output = relay.Tuple([uop_9800,call_9822,var_9823,])
output2 = relay.Tuple([uop_9802,call_9824,var_9823,])
func_9825 = relay.Function([var_9823,], output)
mod['func_9825'] = func_9825
mod = relay.transform.InferType()(mod)
var_9826 = relay.var("var_9826", dtype = "bool", shape = (2112,))#candidate|9826|(2112,)|var|bool
output = func_9825(var_9826)
func_9827 = relay.Function([var_9826], output)
mutated_mod['func_9827'] = func_9827
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7968_call = mod.get_global_var('func_7968')
func_7969_call = mutated_mod.get_global_var('func_7969')
call_9839 = relay.TupleGetItem(func_7968_call(), 2)
call_9840 = relay.TupleGetItem(func_7969_call(), 2)
output = call_9839
output2 = call_9840
func_9851 = relay.Function([], output)
mod['func_9851'] = func_9851
mod = relay.transform.InferType()(mod)
output = func_9851()
func_9852 = relay.Function([], output)
mutated_mod['func_9852'] = func_9852
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7714_call = mod.get_global_var('func_7714')
func_7716_call = mutated_mod.get_global_var('func_7716')
call_9930 = func_7714_call()
call_9931 = func_7714_call()
output = call_9930
output2 = call_9931
func_9936 = relay.Function([], output)
mod['func_9936'] = func_9936
mod = relay.transform.InferType()(mod)
mutated_mod['func_9936'] = func_9936
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9936_call = mutated_mod.get_global_var('func_9936')
call_9937 = func_9936_call()
output = call_9937
func_9938 = relay.Function([], output)
mutated_mod['func_9938'] = func_9938
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8484_call = mod.get_global_var('func_8484')
func_8485_call = mutated_mod.get_global_var('func_8485')
call_9964 = relay.TupleGetItem(func_8484_call(), 0)
call_9965 = relay.TupleGetItem(func_8485_call(), 0)
output = relay.Tuple([call_9964,])
output2 = relay.Tuple([call_9965,])
func_9968 = relay.Function([], output)
mod['func_9968'] = func_9968
mod = relay.transform.InferType()(mod)
mutated_mod['func_9968'] = func_9968
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9968_call = mutated_mod.get_global_var('func_9968')
call_9969 = func_9968_call()
output = call_9969
func_9970 = relay.Function([], output)
mutated_mod['func_9970'] = func_9970
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9851_call = mod.get_global_var('func_9851')
func_9852_call = mutated_mod.get_global_var('func_9852')
call_10019 = func_9851_call()
call_10020 = func_9851_call()
func_3645_call = mod.get_global_var('func_3645')
func_3649_call = mutated_mod.get_global_var('func_3649')
const_10024 = relay.const([[9.149021,2.454290],[2.256446,-3.991367],[7.905765,-8.876084],[-9.800869,-2.801694],[4.874492,0.922439],[-7.498028,5.326555],[8.126293,8.790572],[0.893148,-0.464603],[-1.539911,3.436786],[5.966381,0.127065],[1.212100,7.352164],[-2.060202,-1.658558],[3.760762,9.800185],[-7.429696,-1.365528],[8.770261,9.350626],[-3.124537,8.450550],[5.356321,-8.802174],[-0.130903,-4.960289],[-2.609168,4.241765],[8.044503,-8.363250],[9.738115,-5.074433],[-7.698821,3.555854],[-8.868241,4.319705],[6.261586,-3.163918],[5.935083,2.334804],[-8.514921,4.647568],[1.693567,6.278033],[1.749879,8.358974],[-1.273046,-1.895680],[-7.616992,-4.304707],[-9.177673,6.316060],[1.697012,-8.734652],[-4.323652,-7.130548],[3.158106,2.679991],[4.874234,5.502605],[1.494030,1.801468],[-7.472400,-4.509959],[-1.748368,-0.839292],[-3.665485,-1.411003],[1.544398,6.400545],[-3.615958,-5.824357],[2.724850,-6.772523],[-2.876843,2.384461],[-8.815584,2.393799],[-5.455317,1.685752],[1.035831,0.259069],[8.455758,7.087811],[5.688872,-7.424676],[-6.049569,7.127970],[0.980266,-9.059779],[-9.697237,4.603289],[2.592148,0.866895],[-7.848129,-5.313179],[-8.905613,-5.043687],[0.302084,-6.435720],[-7.506774,-7.765598],[0.958831,-7.873563],[2.392854,9.294341],[2.380263,-5.855746],[7.645789,-0.966516],[-3.673383,3.571505],[8.437735,-0.933823],[5.458761,7.077490],[5.087725,3.408677],[7.036937,0.466940],[-3.329424,-2.214797],[8.518924,-9.491669],[7.989353,6.234367],[0.281249,-7.668477],[-0.676263,2.422324],[-5.016338,5.173867],[-5.574632,-8.997151],[-6.041665,-3.869573],[-9.988021,-0.243195],[4.704987,3.213101],[-2.457721,-7.098298],[0.815801,-3.137929],[7.805538,-1.617946],[-8.584869,-7.823236],[-1.732987,-2.075608],[-2.131672,0.293343],[-5.076389,7.254812],[1.343636,-2.939847],[8.960211,6.835559],[7.430280,-7.092710],[-4.187452,-3.962915],[-4.670116,0.063398],[-2.571809,6.814564],[2.478347,7.695756],[8.796407,6.045057],[2.501828,-0.712544],[6.309481,-5.755597],[6.617331,4.020563],[6.710195,-5.051042],[-6.775112,-6.119490],[0.249903,-2.009366],[-6.787471,-3.240016],[-5.189322,-0.692458],[1.132403,-8.405819],[0.595542,-1.824597],[8.598318,-0.308013],[0.170849,-1.744959],[-2.076498,-0.816966],[-2.142490,-9.137475],[2.344483,-8.736219],[6.648110,0.656708],[8.328124,4.807651],[-1.570107,3.534529],[7.485958,-7.805986],[-8.121805,7.231177],[8.597301,9.720041],[-4.377103,3.747085],[-7.139205,5.161714],[-0.824211,8.618845],[-5.222606,-6.424919],[-1.148225,-0.518517],[7.683880,-7.267030],[5.387680,2.500788],[-2.490041,-3.839078],[-4.084167,-7.367959],[-1.648923,-5.447729],[-5.248692,-1.189773],[-5.985519,-7.213287],[7.701125,8.082598],[2.245145,-5.334857],[6.088614,-2.122403],[-8.823107,-5.866445],[-9.950121,-3.356584],[-1.885662,2.693279],[-7.120362,9.876441],[9.113575,3.960558],[-9.444533,3.053892],[-2.082204,-4.867973],[2.417969,1.153684],[3.440437,4.032962],[-5.938671,-0.788650],[-3.736361,-3.410505],[-5.660273,-2.758430],[3.362154,-1.833230],[-9.847517,5.826286],[5.322588,-4.860055],[-9.474739,0.654069],[9.780190,4.826899],[-2.816167,-6.688604],[-5.722090,3.741637],[-8.765159,-1.399473],[0.533280,8.492874],[-1.650882,-2.824261],[-7.318282,1.436023],[0.819255,-3.904735],[4.801285,-5.352158],[-9.496384,-8.031829],[2.646597,1.445534],[5.486319,2.672328],[-1.170281,-0.903369],[-7.175883,-0.748085],[9.301382,1.693262],[-0.732308,5.249278],[-1.149998,5.997301],[-0.140838,9.510882],[3.620588,4.971134],[-5.026255,0.340023],[4.562741,3.010011],[9.387238,-7.914836],[6.051335,3.466205],[-3.842377,2.616367],[-1.809540,1.273428],[8.896045,5.658623],[9.254828,9.426212],[8.202499,-1.349520],[8.321883,-3.180418],[3.493737,9.881404],[7.442041,9.667812],[-3.874738,-3.207678],[7.258921,3.046484],[-2.096081,-2.276035],[-9.499310,9.327778],[-5.997370,-9.639402],[1.413319,-9.558081],[-9.782296,-1.819110],[-2.315753,1.153127],[-4.990248,-2.436943],[5.441679,-6.132928],[-3.876303,4.363551],[7.684454,-5.916263],[-6.592088,6.256265],[-9.396366,-3.921502],[2.098789,-4.111059],[-3.893391,-2.864195],[2.540005,5.291348],[2.228072,-1.712716],[-1.837040,-9.637522],[-1.401405,0.761095],[8.778589,-3.757378],[8.479886,-6.183424],[0.645409,-3.489145],[-5.371528,5.605891],[7.558435,-4.129308]], dtype = "float32")#candidate|10024|(198, 2)|const|float32
call_10023 = relay.TupleGetItem(func_3645_call(relay.reshape(const_10024.astype('float32'), [9, 11, 4]), relay.reshape(const_10024.astype('float32'), [9, 11, 4]), ), 0)
call_10025 = relay.TupleGetItem(func_3649_call(relay.reshape(const_10024.astype('float32'), [9, 11, 4]), relay.reshape(const_10024.astype('float32'), [9, 11, 4]), ), 0)
bop_10035 = relay.greater(const_10024.astype('bool'), relay.reshape(call_10023.astype('bool'), relay.shape_of(const_10024))) # shape=(198, 2)
bop_10038 = relay.greater(const_10024.astype('bool'), relay.reshape(call_10025.astype('bool'), relay.shape_of(const_10024))) # shape=(198, 2)
func_8700_call = mod.get_global_var('func_8700')
func_8702_call = mutated_mod.get_global_var('func_8702')
call_10040 = relay.TupleGetItem(func_8700_call(), 0)
call_10041 = relay.TupleGetItem(func_8702_call(), 0)
func_7459_call = mod.get_global_var('func_7459')
func_7461_call = mutated_mod.get_global_var('func_7461')
call_10045 = relay.TupleGetItem(func_7459_call(relay.reshape(call_10040.astype('float32'), [11, 14, 10])), 2)
call_10046 = relay.TupleGetItem(func_7461_call(relay.reshape(call_10040.astype('float32'), [11, 14, 10])), 2)
output = relay.Tuple([call_10019,bop_10035,call_10040,call_10045,])
output2 = relay.Tuple([call_10020,bop_10038,call_10041,call_10046,])
func_10047 = relay.Function([], output)
mod['func_10047'] = func_10047
mod = relay.transform.InferType()(mod)
output = func_10047()
func_10048 = relay.Function([], output)
mutated_mod['func_10048'] = func_10048
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7001_call = mod.get_global_var('func_7001')
func_7002_call = mutated_mod.get_global_var('func_7002')
call_10071 = relay.TupleGetItem(func_7001_call(), 0)
call_10072 = relay.TupleGetItem(func_7002_call(), 0)
output = call_10071
output2 = call_10072
func_10074 = relay.Function([], output)
mod['func_10074'] = func_10074
mod = relay.transform.InferType()(mod)
output = func_10074()
func_10075 = relay.Function([], output)
mutated_mod['func_10075'] = func_10075
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8967_call = mod.get_global_var('func_8967')
func_8968_call = mutated_mod.get_global_var('func_8968')
call_10112 = relay.TupleGetItem(func_8967_call(), 0)
call_10113 = relay.TupleGetItem(func_8968_call(), 0)
output = call_10112
output2 = call_10113
func_10127 = relay.Function([], output)
mod['func_10127'] = func_10127
mod = relay.transform.InferType()(mod)
output = func_10127()
func_10128 = relay.Function([], output)
mutated_mod['func_10128'] = func_10128
mutated_mod = relay.transform.InferType()(mutated_mod)
var_10160 = relay.var("var_10160", dtype = "float64", shape = (10, 8, 5))#candidate|10160|(10, 8, 5)|var|float64
var_10161 = relay.var("var_10161", dtype = "float64", shape = (10, 8, 5))#candidate|10161|(10, 8, 5)|var|float64
bop_10162 = relay.power(var_10160.astype('float64'), relay.reshape(var_10161.astype('float64'), relay.shape_of(var_10160))) # shape=(10, 8, 5)
output = bop_10162
output2 = bop_10162
func_10165 = relay.Function([var_10160,var_10161,], output)
mod['func_10165'] = func_10165
mod = relay.transform.InferType()(mod)
mutated_mod['func_10165'] = func_10165
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10165_call = mutated_mod.get_global_var('func_10165')
var_10167 = relay.var("var_10167", dtype = "float64", shape = (10, 8, 5))#candidate|10167|(10, 8, 5)|var|float64
var_10168 = relay.var("var_10168", dtype = "float64", shape = (10, 8, 5))#candidate|10168|(10, 8, 5)|var|float64
call_10166 = func_10165_call(var_10167,var_10168,)
output = call_10166
func_10169 = relay.Function([var_10167,var_10168,], output)
mutated_mod['func_10169'] = func_10169
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9124_call = mod.get_global_var('func_9124')
func_9126_call = mutated_mod.get_global_var('func_9126')
call_10181 = relay.TupleGetItem(func_9124_call(), 0)
call_10182 = relay.TupleGetItem(func_9126_call(), 0)
output = relay.Tuple([call_10181,])
output2 = relay.Tuple([call_10182,])
func_10184 = relay.Function([], output)
mod['func_10184'] = func_10184
mod = relay.transform.InferType()(mod)
output = func_10184()
func_10185 = relay.Function([], output)
mutated_mod['func_10185'] = func_10185
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7001_call = mod.get_global_var('func_7001')
func_7002_call = mutated_mod.get_global_var('func_7002')
call_10276 = relay.TupleGetItem(func_7001_call(), 0)
call_10277 = relay.TupleGetItem(func_7002_call(), 0)
output = relay.Tuple([call_10276,])
output2 = relay.Tuple([call_10277,])
func_10289 = relay.Function([], output)
mod['func_10289'] = func_10289
mod = relay.transform.InferType()(mod)
mutated_mod['func_10289'] = func_10289
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10289_call = mutated_mod.get_global_var('func_10289')
call_10290 = func_10289_call()
output = call_10290
func_10291 = relay.Function([], output)
mutated_mod['func_10291'] = func_10291
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8458_call = mod.get_global_var('func_8458')
func_8459_call = mutated_mod.get_global_var('func_8459')
call_10296 = relay.TupleGetItem(func_8458_call(), 2)
call_10297 = relay.TupleGetItem(func_8459_call(), 2)
output = call_10296
output2 = call_10297
func_10308 = relay.Function([], output)
mod['func_10308'] = func_10308
mod = relay.transform.InferType()(mod)
output = func_10308()
func_10309 = relay.Function([], output)
mutated_mod['func_10309'] = func_10309
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6873_call = mod.get_global_var('func_6873')
func_6875_call = mutated_mod.get_global_var('func_6875')
call_10367 = relay.TupleGetItem(func_6873_call(), 0)
call_10368 = relay.TupleGetItem(func_6875_call(), 0)
func_6964_call = mod.get_global_var('func_6964')
func_6965_call = mutated_mod.get_global_var('func_6965')
call_10379 = func_6964_call()
call_10380 = func_6964_call()
func_7868_call = mod.get_global_var('func_7868')
func_7870_call = mutated_mod.get_global_var('func_7870')
call_10388 = func_7868_call()
call_10389 = func_7868_call()
output = relay.Tuple([call_10367,call_10379,call_10388,])
output2 = relay.Tuple([call_10368,call_10380,call_10389,])
func_10399 = relay.Function([], output)
mod['func_10399'] = func_10399
mod = relay.transform.InferType()(mod)
mutated_mod['func_10399'] = func_10399
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10399_call = mutated_mod.get_global_var('func_10399')
call_10400 = func_10399_call()
output = call_10400
func_10401 = relay.Function([], output)
mutated_mod['func_10401'] = func_10401
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6833_call = mod.get_global_var('func_6833')
func_6835_call = mutated_mod.get_global_var('func_6835')
call_10429 = relay.TupleGetItem(func_6833_call(), 0)
call_10430 = relay.TupleGetItem(func_6835_call(), 0)
uop_10431 = relay.log(call_10429.astype('float64')) # shape=(11, 14, 10)
uop_10433 = relay.log(call_10430.astype('float64')) # shape=(11, 14, 10)
output = uop_10431
output2 = uop_10433
func_10439 = relay.Function([], output)
mod['func_10439'] = func_10439
mod = relay.transform.InferType()(mod)
output = func_10439()
func_10440 = relay.Function([], output)
mutated_mod['func_10440'] = func_10440
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10127_call = mod.get_global_var('func_10127')
func_10128_call = mutated_mod.get_global_var('func_10128')
call_10448 = func_10127_call()
call_10449 = func_10127_call()
output = call_10448
output2 = call_10449
func_10453 = relay.Function([], output)
mod['func_10453'] = func_10453
mod = relay.transform.InferType()(mod)
output = func_10453()
func_10454 = relay.Function([], output)
mutated_mod['func_10454'] = func_10454
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8967_call = mod.get_global_var('func_8967')
func_8968_call = mutated_mod.get_global_var('func_8968')
call_10479 = relay.TupleGetItem(func_8967_call(), 1)
call_10480 = relay.TupleGetItem(func_8968_call(), 1)
func_10047_call = mod.get_global_var('func_10047')
func_10048_call = mutated_mod.get_global_var('func_10048')
call_10482 = relay.TupleGetItem(func_10047_call(), 2)
call_10483 = relay.TupleGetItem(func_10048_call(), 2)
output = relay.Tuple([call_10479,call_10482,])
output2 = relay.Tuple([call_10480,call_10483,])
func_10484 = relay.Function([], output)
mod['func_10484'] = func_10484
mod = relay.transform.InferType()(mod)
output = func_10484()
func_10485 = relay.Function([], output)
mutated_mod['func_10485'] = func_10485
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9437_call = mod.get_global_var('func_9437')
func_9439_call = mutated_mod.get_global_var('func_9439')
call_10488 = relay.TupleGetItem(func_9437_call(), 0)
call_10489 = relay.TupleGetItem(func_9439_call(), 0)
func_7751_call = mod.get_global_var('func_7751')
func_7752_call = mutated_mod.get_global_var('func_7752')
call_10496 = func_7751_call()
call_10497 = func_7751_call()
output = relay.Tuple([call_10488,call_10496,])
output2 = relay.Tuple([call_10489,call_10497,])
func_10529 = relay.Function([], output)
mod['func_10529'] = func_10529
mod = relay.transform.InferType()(mod)
output = func_10529()
func_10530 = relay.Function([], output)
mutated_mod['func_10530'] = func_10530
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8742_call = mod.get_global_var('func_8742')
func_8743_call = mutated_mod.get_global_var('func_8743')
call_10570 = func_8742_call()
call_10571 = func_8742_call()
output = relay.Tuple([call_10570,])
output2 = relay.Tuple([call_10571,])
func_10572 = relay.Function([], output)
mod['func_10572'] = func_10572
mod = relay.transform.InferType()(mod)
output = func_10572()
func_10573 = relay.Function([], output)
mutated_mod['func_10573'] = func_10573
mutated_mod = relay.transform.InferType()(mutated_mod)
var_10683 = relay.var("var_10683", dtype = "float32", shape = (14, 1, 8))#candidate|10683|(14, 1, 8)|var|float32
uop_10684 = relay.log10(var_10683.astype('float32')) # shape=(14, 1, 8)
output = uop_10684
output2 = uop_10684
func_10689 = relay.Function([var_10683,], output)
mod['func_10689'] = func_10689
mod = relay.transform.InferType()(mod)
mutated_mod['func_10689'] = func_10689
mutated_mod = relay.transform.InferType()(mutated_mod)
var_10690 = relay.var("var_10690", dtype = "float32", shape = (14, 1, 8))#candidate|10690|(14, 1, 8)|var|float32
func_10689_call = mutated_mod.get_global_var('func_10689')
call_10691 = func_10689_call(var_10690)
output = call_10691
func_10692 = relay.Function([var_10690], output)
mutated_mod['func_10692'] = func_10692
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7825_call = mod.get_global_var('func_7825')
func_7827_call = mutated_mod.get_global_var('func_7827')
call_10717 = relay.TupleGetItem(func_7825_call(), 0)
call_10718 = relay.TupleGetItem(func_7827_call(), 0)
func_6445_call = mod.get_global_var('func_6445')
func_6447_call = mutated_mod.get_global_var('func_6447')
call_10733 = relay.TupleGetItem(func_6445_call(), 0)
call_10734 = relay.TupleGetItem(func_6447_call(), 0)
output = relay.Tuple([call_10717,call_10733,])
output2 = relay.Tuple([call_10718,call_10734,])
func_10738 = relay.Function([], output)
mod['func_10738'] = func_10738
mod = relay.transform.InferType()(mod)
mutated_mod['func_10738'] = func_10738
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10738_call = mutated_mod.get_global_var('func_10738')
call_10739 = func_10738_call()
output = call_10739
func_10740 = relay.Function([], output)
mutated_mod['func_10740'] = func_10740
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9002_call = mod.get_global_var('func_9002')
func_9004_call = mutated_mod.get_global_var('func_9004')
call_10741 = func_9002_call()
call_10742 = func_9002_call()
func_9567_call = mod.get_global_var('func_9567')
func_9568_call = mutated_mod.get_global_var('func_9568')
call_10782 = relay.TupleGetItem(func_9567_call(), 0)
call_10783 = relay.TupleGetItem(func_9568_call(), 0)
output = relay.Tuple([call_10741,call_10782,])
output2 = relay.Tuple([call_10742,call_10783,])
func_10796 = relay.Function([], output)
mod['func_10796'] = func_10796
mod = relay.transform.InferType()(mod)
output = func_10796()
func_10797 = relay.Function([], output)
mutated_mod['func_10797'] = func_10797
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10047_call = mod.get_global_var('func_10047')
func_10048_call = mutated_mod.get_global_var('func_10048')
call_10812 = relay.TupleGetItem(func_10047_call(), 2)
call_10813 = relay.TupleGetItem(func_10048_call(), 2)
func_8863_call = mod.get_global_var('func_8863')
func_8864_call = mutated_mod.get_global_var('func_8864')
call_10814 = relay.TupleGetItem(func_8863_call(), 1)
call_10815 = relay.TupleGetItem(func_8864_call(), 1)
output = relay.Tuple([call_10812,call_10814,])
output2 = relay.Tuple([call_10813,call_10815,])
func_10817 = relay.Function([], output)
mod['func_10817'] = func_10817
mod = relay.transform.InferType()(mod)
mutated_mod['func_10817'] = func_10817
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10817_call = mutated_mod.get_global_var('func_10817')
call_10818 = func_10817_call()
output = call_10818
func_10819 = relay.Function([], output)
mutated_mod['func_10819'] = func_10819
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10817_call = mod.get_global_var('func_10817')
func_10819_call = mutated_mod.get_global_var('func_10819')
call_10833 = relay.TupleGetItem(func_10817_call(), 1)
call_10834 = relay.TupleGetItem(func_10819_call(), 1)
func_9936_call = mod.get_global_var('func_9936')
func_9938_call = mutated_mod.get_global_var('func_9938')
call_10843 = func_9936_call()
call_10844 = func_9936_call()
func_6532_call = mod.get_global_var('func_6532')
func_6533_call = mutated_mod.get_global_var('func_6533')
call_10855 = relay.TupleGetItem(func_6532_call(), 3)
call_10856 = relay.TupleGetItem(func_6533_call(), 3)
func_7491_call = mod.get_global_var('func_7491')
func_7492_call = mutated_mod.get_global_var('func_7492')
call_10863 = relay.TupleGetItem(func_7491_call(), 0)
call_10864 = relay.TupleGetItem(func_7492_call(), 0)
func_10165_call = mod.get_global_var('func_10165')
func_10169_call = mutated_mod.get_global_var('func_10169')
const_10880 = relay.const([[9.768053,-3.246206],[-7.033557,-5.630278],[3.313606,-9.292216],[9.922234,-5.338170],[-1.238345,-1.827406],[-2.917542,8.131727],[-5.807072,-6.224941],[-5.130470,-5.938804],[-3.334770,-1.347825],[7.527549,7.781250],[7.623402,2.185155],[7.257739,-7.782619],[8.728023,1.462440],[-7.505860,-2.682396],[4.050483,4.886914],[0.522181,-1.516829],[7.851466,-3.505168],[9.008192,6.483191],[2.826734,-9.007300],[-7.164818,-3.702410],[5.873928,6.945844],[-8.375790,-6.109896],[-5.800820,4.828492],[-4.296864,-1.031482],[5.032887,-4.313302],[-2.106224,8.902569],[-5.373996,-6.513461],[-8.589350,-5.611939],[1.374493,2.294383],[9.154829,7.658103],[-8.814008,8.140826],[-7.554740,-4.570471],[-1.216674,5.070126],[-2.199141,5.056933],[-2.836549,5.110768],[-8.718837,-7.140519],[6.591387,-4.993443],[7.433207,-1.143470],[-4.338116,-7.048527],[0.645942,-8.514512],[1.088580,-6.036787],[-3.418644,-7.341766],[-9.969398,-4.731728],[-7.167596,-0.321343],[-6.743550,-7.502637],[-1.622115,2.252385],[9.275230,-6.809386],[-6.973798,-0.900178],[-7.220452,9.632118],[-9.212311,5.413281],[8.160464,-4.241004],[-4.034709,0.877462],[0.530343,-0.950996],[1.438066,-2.773000],[-9.270582,0.347013],[-4.584377,-6.176888],[8.308105,6.507141],[-2.279114,-6.413067],[-9.876539,8.563412],[4.277848,-4.693822],[-1.935696,-9.540613],[-5.266844,-3.860175],[2.815247,-9.429748],[-7.653142,-1.364108],[-2.999495,2.464244],[-6.962324,6.505642],[-6.225979,1.495632],[1.017281,-2.613512],[7.425823,1.939595],[-8.252202,-2.127411],[-8.660471,9.984513],[3.217953,-4.324438],[9.179785,-7.942012],[7.217193,1.912548],[-0.673059,2.816575],[-3.893941,-9.570736],[-6.283178,9.168855],[8.777712,2.469775],[-0.554319,-8.233442],[-7.030112,-7.315593],[7.398351,-3.496386],[-3.691476,-4.158636],[-8.336570,-5.386976],[-8.825978,-8.056268],[4.634970,5.482121],[7.973521,-3.574786],[2.582508,-5.718626],[4.635283,4.165760],[2.176329,0.285527],[3.653118,6.828589],[2.059261,-2.672121],[-1.757370,-5.902742],[5.879688,-7.138240],[-4.097876,-1.954479],[-9.815502,-6.263610],[4.695987,-1.477358],[9.669158,-3.584518],[0.162989,-6.796226],[-1.342455,-5.474036],[-7.864956,-5.306721],[-6.291947,-4.186286],[9.512702,-5.821851],[9.245100,1.392453],[4.333862,-8.319253],[7.164174,6.827616],[-9.208992,5.488659],[3.229767,0.948845],[-4.795755,1.695283],[-1.861801,-4.794528],[-0.948185,8.488881],[6.901451,7.024101],[-3.339512,0.360124],[-9.424181,2.292177],[-9.500864,2.506200],[-1.730883,1.210598],[-7.045798,-6.046217],[2.844613,-5.628678],[3.972344,3.251278],[-5.057526,4.784347],[-7.296671,-9.336292],[-6.858845,2.096442],[-4.353617,-0.184363],[9.284744,-8.698166],[-0.558564,2.883211],[3.015670,3.688019],[9.895162,1.810421],[1.668064,5.276162],[3.149885,1.384763],[1.688110,-3.035423],[8.557904,-7.665205],[7.376616,2.335824],[6.888541,5.890865],[-0.921225,-5.629834],[8.697352,-4.246861],[-8.978956,3.390198],[3.496267,3.202870],[8.985777,4.039106],[-3.125772,-5.496240],[-1.993681,8.238680],[-6.356231,-2.285012],[-8.479249,-6.071417],[-3.784237,-8.981795],[-4.716382,-0.303222],[-0.486272,-3.856578],[1.002599,9.824057],[-3.465147,3.680943],[4.476295,-6.576192],[1.195959,-6.740565],[7.320255,-6.485412],[6.048293,2.751419],[-9.406048,-2.814373],[8.689642,-1.496472],[-5.118596,7.197047],[6.472952,1.108739],[3.348332,-3.912451],[-1.699411,-1.433148],[-2.141072,9.340525],[-2.991957,7.710876],[-2.417748,5.726936],[5.941706,-1.102969],[9.099804,-9.281625],[0.531813,3.008056],[4.315918,8.258188],[1.040901,-1.737368],[-6.399553,9.208848],[-0.071498,2.605989],[-1.400009,-6.320114],[6.348555,6.009359],[-2.287704,0.707261],[2.323776,5.445643],[6.702279,-6.649935],[-3.777647,-5.151418],[-7.297588,3.805681],[-3.763881,0.757194],[-0.813584,-4.582841],[7.325595,-2.822844],[0.974394,5.356459],[0.710356,-3.123463],[8.385443,0.141628],[0.152319,7.455360],[0.205201,-8.393858],[7.493671,6.307745],[6.156667,3.111831],[7.686203,5.103741],[-6.438755,-9.835049],[2.659451,-0.133091],[2.606364,-0.985911],[9.741069,6.884967],[3.297671,-2.588194],[7.036750,-1.779160],[-4.398801,9.540857],[4.467600,-1.718216],[1.147550,8.955651],[4.931017,-4.251170],[8.448603,4.464137],[-2.866698,-6.447531],[-1.348451,-0.359953],[-0.753062,3.270702],[3.680626,-5.163725],[6.952771,-5.034627]], dtype = "float64")#candidate|10880|(200, 2)|const|float64
call_10879 = func_10165_call(relay.reshape(const_10880.astype('float64'), [10, 8, 5]), relay.reshape(const_10880.astype('float64'), [10, 8, 5]), )
call_10881 = func_10165_call(relay.reshape(const_10880.astype('float64'), [10, 8, 5]), relay.reshape(const_10880.astype('float64'), [10, 8, 5]), )
output = relay.Tuple([call_10833,call_10843,call_10855,call_10863,call_10879,const_10880,])
output2 = relay.Tuple([call_10834,call_10844,call_10856,call_10864,call_10881,const_10880,])
func_10885 = relay.Function([], output)
mod['func_10885'] = func_10885
mod = relay.transform.InferType()(mod)
output = func_10885()
func_10886 = relay.Function([], output)
mutated_mod['func_10886'] = func_10886
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10439_call = mod.get_global_var('func_10439')
func_10440_call = mutated_mod.get_global_var('func_10440')
call_10887 = func_10439_call()
call_10888 = func_10439_call()
output = relay.Tuple([call_10887,])
output2 = relay.Tuple([call_10888,])
func_10891 = relay.Function([], output)
mod['func_10891'] = func_10891
mod = relay.transform.InferType()(mod)
mutated_mod['func_10891'] = func_10891
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10891_call = mutated_mod.get_global_var('func_10891')
call_10892 = func_10891_call()
output = call_10892
func_10893 = relay.Function([], output)
mutated_mod['func_10893'] = func_10893
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7001_call = mod.get_global_var('func_7001')
func_7002_call = mutated_mod.get_global_var('func_7002')
call_10925 = relay.TupleGetItem(func_7001_call(), 0)
call_10926 = relay.TupleGetItem(func_7002_call(), 0)
func_6793_call = mod.get_global_var('func_6793')
func_6794_call = mutated_mod.get_global_var('func_6794')
call_10936 = func_6793_call()
call_10937 = func_6793_call()
output = relay.Tuple([call_10925,call_10936,])
output2 = relay.Tuple([call_10926,call_10937,])
func_10945 = relay.Function([], output)
mod['func_10945'] = func_10945
mod = relay.transform.InferType()(mod)
output = func_10945()
func_10946 = relay.Function([], output)
mutated_mod['func_10946'] = func_10946
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9479_call = mod.get_global_var('func_9479')
func_9480_call = mutated_mod.get_global_var('func_9480')
call_10983 = func_9479_call()
call_10984 = func_9479_call()
func_9968_call = mod.get_global_var('func_9968')
func_9970_call = mutated_mod.get_global_var('func_9970')
call_11004 = relay.TupleGetItem(func_9968_call(), 0)
call_11005 = relay.TupleGetItem(func_9970_call(), 0)
func_6714_call = mod.get_global_var('func_6714')
func_6715_call = mutated_mod.get_global_var('func_6715')
call_11008 = relay.TupleGetItem(func_6714_call(), 3)
call_11009 = relay.TupleGetItem(func_6715_call(), 3)
func_10529_call = mod.get_global_var('func_10529')
func_10530_call = mutated_mod.get_global_var('func_10530')
call_11010 = relay.TupleGetItem(func_10529_call(), 1)
call_11011 = relay.TupleGetItem(func_10530_call(), 1)
func_9936_call = mod.get_global_var('func_9936')
func_9938_call = mutated_mod.get_global_var('func_9938')
call_11025 = func_9936_call()
call_11026 = func_9936_call()
func_9479_call = mod.get_global_var('func_9479')
func_9480_call = mutated_mod.get_global_var('func_9480')
call_11039 = func_9479_call()
call_11040 = func_9479_call()
func_7880_call = mod.get_global_var('func_7880')
func_7882_call = mutated_mod.get_global_var('func_7882')
call_11045 = relay.TupleGetItem(func_7880_call(), 0)
call_11046 = relay.TupleGetItem(func_7882_call(), 0)
output = relay.Tuple([call_10983,call_11004,call_11008,call_11010,call_11025,call_11039,call_11045,])
output2 = relay.Tuple([call_10984,call_11005,call_11009,call_11011,call_11026,call_11040,call_11046,])
func_11053 = relay.Function([], output)
mod['func_11053'] = func_11053
mod = relay.transform.InferType()(mod)
mutated_mod['func_11053'] = func_11053
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11053_call = mutated_mod.get_global_var('func_11053')
call_11054 = func_11053_call()
output = call_11054
func_11055 = relay.Function([], output)
mutated_mod['func_11055'] = func_11055
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7887_call = mod.get_global_var('func_7887')
func_7889_call = mutated_mod.get_global_var('func_7889')
call_11098 = func_7887_call()
call_11099 = func_7887_call()
func_1462_call = mod.get_global_var('func_1462')
func_1467_call = mutated_mod.get_global_var('func_1467')
const_11128 = relay.const(-9, dtype = "int64")#candidate|11128|()|const|int64
var_11129 = relay.var("var_11129", dtype = "int64", shape = (75,))#candidate|11129|(75,)|var|int64
const_11130 = relay.const([[-6],[-7],[1],[-5],[-10],[-10],[-4],[2],[6],[-3],[-7],[9],[8],[-4],[1],[-8],[-10],[-3],[-6],[7],[-1],[9],[-9],[5],[10],[-2],[-8],[2],[6],[-3],[-5],[-4],[-7],[-9],[9],[-1],[5],[8],[-10],[-9],[-3],[-5],[10],[5],[3],[-5],[-2],[-7],[-7],[-1],[2],[-9],[-1],[1],[1],[2],[-1],[-5],[4],[8],[-1],[-10],[-1],[-1],[1],[7],[6],[-2],[-2],[-8],[5],[7],[9],[-6],[3],[2],[7],[6],[-9],[6],[-8],[5],[8],[1],[-2],[-3],[1],[2],[5],[2],[-4],[-3],[-8],[-8],[-3],[-9],[9],[5],[3],[9],[6],[-2],[-3],[6],[-4],[5],[3],[-10],[-6],[-10],[-3],[2],[-2],[1],[-4],[1],[-2],[7],[-9],[3],[-1],[3],[8],[-5],[-2],[-5],[-3],[-8],[5],[-2],[-10],[9],[8],[-7],[-10],[2],[1],[-3],[1],[-5],[-4],[-7],[-7],[-4],[6],[3],[1],[-8],[-9],[7],[9],[9],[7],[1],[4],[10],[-6],[5],[-3],[6],[-2],[-5],[-1],[1],[-2],[-1],[8],[-3],[4],[2],[1],[3],[10],[-1],[-4],[-2],[7],[1],[-2],[10],[-1],[-7],[1],[-5],[-5],[2],[-10],[3],[3],[-2],[-2],[7],[-2],[7],[-1],[2],[-6],[-2],[-10],[-1],[-7],[-2],[9],[6],[1],[3],[2],[1],[8],[-2],[5],[-2],[2],[9],[4],[-10],[4],[-7],[-9],[-7],[3],[-4],[-9],[9],[-4],[-8],[-4],[1],[6],[-1],[-1],[-1],[-10],[10],[-1],[10],[6],[-9],[8],[2],[-10],[1],[1],[-1],[2],[-7],[-10],[10],[5],[1]], dtype = "int16")#candidate|11130|(250, 1)|const|int16
call_11127 = relay.TupleGetItem(func_1462_call(relay.reshape(const_11128.astype('int64'), []), relay.reshape(var_11129.astype('int64'), [15, 5, 1]), relay.reshape(const_11130.astype('int16'), [125, 2]), ), 0)
call_11131 = relay.TupleGetItem(func_1467_call(relay.reshape(const_11128.astype('int64'), []), relay.reshape(var_11129.astype('int64'), [15, 5, 1]), relay.reshape(const_11130.astype('int16'), [125, 2]), ), 0)
func_10439_call = mod.get_global_var('func_10439')
func_10440_call = mutated_mod.get_global_var('func_10440')
call_11144 = func_10439_call()
call_11145 = func_10439_call()
uop_11166 = relay.cos(call_11127.astype('float32')) # shape=(15, 5, 1)
uop_11168 = relay.cos(call_11131.astype('float32')) # shape=(15, 5, 1)
func_3645_call = mod.get_global_var('func_3645')
func_3649_call = mutated_mod.get_global_var('func_3649')
var_11177 = relay.var("var_11177", dtype = "float32", shape = (396,))#candidate|11177|(396,)|var|float32
call_11176 = relay.TupleGetItem(func_3645_call(relay.reshape(var_11177.astype('float32'), [9, 11, 4]), relay.reshape(var_11177.astype('float32'), [9, 11, 4]), ), 0)
call_11178 = relay.TupleGetItem(func_3649_call(relay.reshape(var_11177.astype('float32'), [9, 11, 4]), relay.reshape(var_11177.astype('float32'), [9, 11, 4]), ), 0)
func_10453_call = mod.get_global_var('func_10453')
func_10454_call = mutated_mod.get_global_var('func_10454')
call_11182 = func_10453_call()
call_11183 = func_10453_call()
output = relay.Tuple([call_11098,const_11128,var_11129,const_11130,call_11144,uop_11166,call_11176,var_11177,call_11182,])
output2 = relay.Tuple([call_11099,const_11128,var_11129,const_11130,call_11145,uop_11168,call_11178,var_11177,call_11183,])
func_11191 = relay.Function([var_11129,var_11177,], output)
mod['func_11191'] = func_11191
mod = relay.transform.InferType()(mod)
mutated_mod['func_11191'] = func_11191
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11191_call = mutated_mod.get_global_var('func_11191')
var_11193 = relay.var("var_11193", dtype = "int64", shape = (75,))#candidate|11193|(75,)|var|int64
var_11194 = relay.var("var_11194", dtype = "float32", shape = (396,))#candidate|11194|(396,)|var|float32
call_11192 = func_11191_call(var_11193,var_11194,)
output = call_11192
func_11195 = relay.Function([var_11193,var_11194,], output)
mutated_mod['func_11195'] = func_11195
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8913_call = mod.get_global_var('func_8913')
func_8915_call = mutated_mod.get_global_var('func_8915')
call_11229 = relay.TupleGetItem(func_8913_call(), 0)
call_11230 = relay.TupleGetItem(func_8915_call(), 0)
output = relay.Tuple([call_11229,])
output2 = relay.Tuple([call_11230,])
func_11244 = relay.Function([], output)
mod['func_11244'] = func_11244
mod = relay.transform.InferType()(mod)
output = func_11244()
func_11245 = relay.Function([], output)
mutated_mod['func_11245'] = func_11245
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8863_call = mod.get_global_var('func_8863')
func_8864_call = mutated_mod.get_global_var('func_8864')
call_11246 = relay.TupleGetItem(func_8863_call(), 0)
call_11247 = relay.TupleGetItem(func_8864_call(), 0)
func_9771_call = mod.get_global_var('func_9771')
func_9774_call = mutated_mod.get_global_var('func_9774')
const_11267 = relay.const([[5.277873,7.081605,9.852001,-7.537422,-5.974396,-7.710934,-4.323395,7.266344,0.230085,-5.767636],[-3.734892,7.269601,-9.529867,-3.128557,-9.188824,6.973278,1.447569,-1.240125,-9.465398,-5.953166],[-4.511026,-4.531703,-4.470607,2.873811,8.736519,3.651053,3.700386,-3.586432,9.798628,-7.112949],[8.835757,-8.497520,-9.689529,-7.190816,6.233473,-1.839667,3.608989,-4.043311,-0.026552,1.170072],[-8.466468,-0.084747,-6.565563,7.461660,4.171670,0.355275,8.380690,7.869108,-9.357199,-9.312679],[-0.268532,6.157563,-8.964880,6.825438,-9.560004,-3.226385,6.173044,-0.180820,1.401339,-5.299540],[-3.482263,-5.410161,8.539626,5.747522,2.600168,2.338338,-1.840238,9.664460,5.410649,-7.064698],[4.714319,-8.787980,0.079099,-5.291950,-9.166638,3.937224,9.805278,-3.504942,-1.865914,-7.817116],[-3.772345,9.823098,5.069848,1.451630,-8.378071,-6.694138,-5.126038,-1.123076,4.121593,9.955413],[2.090662,-4.570290,-5.809567,7.659773,3.990046,-5.411170,-1.837577,-5.105915,-9.399682,-0.961520],[4.194832,-2.799444,6.543340,8.610442,-2.815805,-4.490103,-2.483575,-1.865313,8.424328,6.446161]], dtype = "float64")#candidate|11267|(11, 10)|const|float64
call_11266 = relay.TupleGetItem(func_9771_call(relay.reshape(const_11267.astype('float64'), [110,])), 2)
call_11268 = relay.TupleGetItem(func_9774_call(relay.reshape(const_11267.astype('float64'), [110,])), 2)
output = relay.Tuple([call_11246,call_11266,const_11267,])
output2 = relay.Tuple([call_11247,call_11268,const_11267,])
func_11288 = relay.Function([], output)
mod['func_11288'] = func_11288
mod = relay.transform.InferType()(mod)
mutated_mod['func_11288'] = func_11288
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11288_call = mutated_mod.get_global_var('func_11288')
call_11289 = func_11288_call()
output = call_11289
func_11290 = relay.Function([], output)
mutated_mod['func_11290'] = func_11290
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7060_call = mod.get_global_var('func_7060')
func_7062_call = mutated_mod.get_global_var('func_7062')
call_11309 = func_7060_call()
call_11310 = func_7060_call()
output = relay.Tuple([call_11309,])
output2 = relay.Tuple([call_11310,])
func_11313 = relay.Function([], output)
mod['func_11313'] = func_11313
mod = relay.transform.InferType()(mod)
output = func_11313()
func_11314 = relay.Function([], output)
mutated_mod['func_11314'] = func_11314
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10184_call = mod.get_global_var('func_10184')
func_10185_call = mutated_mod.get_global_var('func_10185')
call_11335 = relay.TupleGetItem(func_10184_call(), 0)
call_11336 = relay.TupleGetItem(func_10185_call(), 0)
output = relay.Tuple([call_11335,])
output2 = relay.Tuple([call_11336,])
func_11344 = relay.Function([], output)
mod['func_11344'] = func_11344
mod = relay.transform.InferType()(mod)
mutated_mod['func_11344'] = func_11344
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11344_call = mutated_mod.get_global_var('func_11344')
call_11345 = func_11344_call()
output = call_11345
func_11346 = relay.Function([], output)
mutated_mod['func_11346'] = func_11346
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8913_call = mod.get_global_var('func_8913')
func_8915_call = mutated_mod.get_global_var('func_8915')
call_11390 = relay.TupleGetItem(func_8913_call(), 0)
call_11391 = relay.TupleGetItem(func_8915_call(), 0)
func_10165_call = mod.get_global_var('func_10165')
func_10169_call = mutated_mod.get_global_var('func_10169')
const_11396 = relay.const([-1.052996,-5.783189,6.909876,-1.952491,-9.523360,7.539481,-9.246049,-4.376193,0.319912,6.090256,-4.228702,-8.102729,5.329015,5.906035,1.098549,-4.370218,9.599427,-7.045939,-2.304069,-6.136466,-4.357489,2.493394,5.294692,6.736480,-2.052679,-8.925354,2.797725,-2.294182,1.957530,8.614417,-8.463473,-2.526125,4.525823,-1.888990,8.519873,-1.203840,-0.441959,0.085632,2.489908,-7.247434,0.284322,-7.837891,-1.795976,3.777442,-8.544100,-0.493577,9.522260,-2.504537,6.001824,-9.198865,-3.742232,-8.977266,-8.799226,-0.298658,-8.638631,3.798770,-8.360578,-8.988404,-8.721737,-0.270955,8.288867,6.489758,-4.109679,6.577708,-0.186456,-1.133267,-3.191508,2.504536,-9.353530,-5.480270,3.763630,9.852207,-7.045545,-6.396015,0.564862,3.021948,7.668966,8.109765,8.222068,2.830984,5.781303,-9.849497,4.914495,-1.480556,5.500640,-1.421183,9.312147,-1.993701,-7.636860,-2.674747,-4.368900,-6.118483,6.367103,1.462304,-8.005287,-2.527657,-4.000663,2.758848,0.607999,-6.843899,-3.388007,8.190859,-8.696598,0.947051,-2.639296,-4.552439,-8.269162,-4.524055,2.400385,-6.081028,-5.391675,4.968543,4.319900,-5.381290,-9.698305,4.677707,-5.673160,-9.996718,0.146349,4.977734,-9.157698,-0.064290,-7.119005,-2.197136,-8.220176,0.480106,4.310884,8.975904,4.503681,0.920497,-3.528182,-8.642055,2.695715,3.056815,4.510014,-0.867485,4.763939,-1.085009,1.110891,9.210106,2.699577,6.363408,6.872548,0.889189,-5.857302,-7.843014,1.262290,1.099379,-8.384605,1.233144,9.140396,7.172626,-5.642406,-6.778974,-2.446178,1.218605,-9.888121,-3.924602,-0.475564,-5.176103,7.252595,1.450275,-3.360761,7.426362,-2.481799,-8.905882,2.738638,-0.169860,4.520592,6.524016,-5.993372,2.645816,2.689208,-8.705233,0.979227,2.209945,6.502767,6.209712,4.661757,-2.084299,-4.676077,-9.138190,-6.657726,5.846477,7.220411,3.903466,-0.449698,3.877910,7.626461,9.909096,-5.658875,6.894211,2.374895,2.151258,1.606154,-6.514414,-6.091478,5.181873,1.260097,-7.506017,-6.189459,-1.801139,-0.591657,-6.387875,1.149831,-8.587803,-9.781392,-1.503089,9.108814,9.666422,7.686161,-4.291723,-3.880973,5.700412,-7.342132,-4.366196,6.654063,4.389237,-3.169283,7.950977,0.167242,-2.945262,3.937282,-7.395718,-5.508307,-2.676875,3.706596,-2.144762,-6.658724,-0.943462,9.180449,6.338001,4.776498,4.367095,9.561431,-0.608564,-7.696348,-6.896497,8.817579,-5.855175,-6.011696,5.502384,3.509021,8.670149,2.223889,8.841307,0.647938,-4.189552,6.552774,-3.076249,-4.780343,-7.618257,3.879600,8.173398,5.256617,5.223867,-5.296218,9.763974,-0.028849,0.314994,-5.743615,-3.383826,-4.410166,3.502774,-7.722279,-3.820386,-0.009817,-3.716247,1.074692,-4.478282,1.644521,8.918928,-8.345693,-8.099366,1.046876,4.249626,-4.310346,9.795397,-2.654437,-7.493468,7.069519,8.438009,7.894694,2.788819,9.001544,7.567935,8.840012,-7.553952,-2.101604,-3.193217,7.501881,3.040009,-6.377267,-7.362690,7.256745,6.509175,2.517143,-2.017689,-7.417072,8.694906,9.354226,1.625703,2.883026,4.285920,-2.910890,-7.036890,3.488967,5.663753,-4.562638,-7.608397,-9.757684,-9.453206,-6.698896,8.057246,9.674734,2.386779,3.210686,2.735814,-8.563948,-3.795010,1.587212,-4.140033,3.607758,-1.942412,9.314757,9.176965,-3.685776,9.508948,8.425912,-0.095666,-3.416737,2.164761,-2.024339,-5.395214,7.353604,0.452810,8.644359,2.414029,8.664223,0.685446,-7.839260,-6.522679,-7.650935,-3.158072,-8.626338,-3.611749,-3.310898,1.155608,0.391615,9.160729,-6.181089,6.453450,8.807627,-4.932519,-1.917196,6.993477,4.494192,9.512286,-8.403861,1.204746,-0.633961,2.037329,3.192561,7.915551,-5.393708,-3.824272,3.102484,1.710943,-3.120141,4.240669,2.518685,-9.167647,8.466646,-0.134091,5.278053,-4.784092,-2.784152,-3.620996,-2.471405,-8.651696,-8.208658,-9.108516,-2.649596,-7.554702,6.073489,3.168867,9.129980,7.272013,3.574556,-9.151963,9.620276,5.106425,-4.959198,-4.247910,0.153072,5.891917,4.254874,-3.500424,8.000724,-1.927227], dtype = "float64")#candidate|11396|(400,)|const|float64
call_11395 = func_10165_call(relay.reshape(const_11396.astype('float64'), [10, 8, 5]), relay.reshape(const_11396.astype('float64'), [10, 8, 5]), )
call_11397 = func_10165_call(relay.reshape(const_11396.astype('float64'), [10, 8, 5]), relay.reshape(const_11396.astype('float64'), [10, 8, 5]), )
output = relay.Tuple([call_11390,call_11395,const_11396,])
output2 = relay.Tuple([call_11391,call_11397,const_11396,])
func_11398 = relay.Function([], output)
mod['func_11398'] = func_11398
mod = relay.transform.InferType()(mod)
mutated_mod['func_11398'] = func_11398
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11398_call = mutated_mod.get_global_var('func_11398')
call_11399 = func_11398_call()
output = call_11399
func_11400 = relay.Function([], output)
mutated_mod['func_11400'] = func_11400
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9176_call = mod.get_global_var('func_9176')
func_9178_call = mutated_mod.get_global_var('func_9178')
call_11435 = relay.TupleGetItem(func_9176_call(), 1)
call_11436 = relay.TupleGetItem(func_9178_call(), 1)
func_10689_call = mod.get_global_var('func_10689')
func_10692_call = mutated_mod.get_global_var('func_10692')
var_11438 = relay.var("var_11438", dtype = "float32", shape = (112, 1))#candidate|11438|(112, 1)|var|float32
call_11437 = func_10689_call(relay.reshape(var_11438.astype('float32'), [14, 1, 8]))
call_11439 = func_10689_call(relay.reshape(var_11438.astype('float32'), [14, 1, 8]))
output = relay.Tuple([call_11435,call_11437,var_11438,])
output2 = relay.Tuple([call_11436,call_11439,var_11438,])
func_11449 = relay.Function([var_11438,], output)
mod['func_11449'] = func_11449
mod = relay.transform.InferType()(mod)
var_11450 = relay.var("var_11450", dtype = "float32", shape = (112, 1))#candidate|11450|(112, 1)|var|float32
output = func_11449(var_11450)
func_11451 = relay.Function([var_11450], output)
mutated_mod['func_11451'] = func_11451
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7714_call = mod.get_global_var('func_7714')
func_7716_call = mutated_mod.get_global_var('func_7716')
call_11472 = func_7714_call()
call_11473 = func_7714_call()
func_8484_call = mod.get_global_var('func_8484')
func_8485_call = mutated_mod.get_global_var('func_8485')
call_11478 = relay.TupleGetItem(func_8484_call(), 1)
call_11479 = relay.TupleGetItem(func_8485_call(), 1)
func_6532_call = mod.get_global_var('func_6532')
func_6533_call = mutated_mod.get_global_var('func_6533')
call_11480 = relay.TupleGetItem(func_6532_call(), 3)
call_11481 = relay.TupleGetItem(func_6533_call(), 3)
func_7001_call = mod.get_global_var('func_7001')
func_7002_call = mutated_mod.get_global_var('func_7002')
call_11493 = relay.TupleGetItem(func_7001_call(), 0)
call_11494 = relay.TupleGetItem(func_7002_call(), 0)
func_9936_call = mod.get_global_var('func_9936')
func_9938_call = mutated_mod.get_global_var('func_9938')
call_11497 = func_9936_call()
call_11498 = func_9936_call()
const_11500 = relay.const([-7.569730,-1.564398,2.632249,-3.477691,-4.112278,-0.718163,-2.392438,7.529021,-1.696042,6.208048,3.300289,7.914910,2.476444,-6.400406,-4.296189,7.107794,6.435282,0.913894,-5.625027,-6.989442,8.856095,5.537764,4.511409,5.947006,9.266599,3.088348,-2.075962,-9.202927,-2.013858,6.171213,-2.733716,9.557735,7.627130,-3.462641,-4.098775,-9.949332,8.528518,7.148889,-3.436669,-6.202024,3.368783,-0.586553,4.748002,2.845236,-5.566227,-1.331034,2.800910,-3.690592,-5.516835,1.936228,-4.203295,1.801635,9.519359,-3.979319,9.329953,2.212165,1.484675,7.191046,-8.993283,-6.637276,7.545394,4.176758,-8.784274,5.944793,-4.051895,7.788659,-7.831819,-6.211499,1.967825,-3.741495,0.860460,9.750564,8.911677,6.426332,7.403898,-7.837346,8.328403,1.101135,-2.493194,-0.338045,2.476333,7.515735,-8.791473,3.083504,-4.180511,6.800455,1.393435,-6.620758,6.189513,-1.537734,4.330978,7.126758,-8.159025,-1.549855,-3.699296,5.638995,-7.204858,1.664060,-7.438953,-7.486496,-4.440309,0.358722,-6.115766,7.182091,6.052583,-8.867330,-5.325283,5.584256,2.772353,6.729541,7.612214,8.927098,7.256475,-7.178614,-4.205099,8.168878,-0.615094,-3.205814,-6.140773,-1.830607,-7.303924,7.663292,2.026402,6.681734,-0.060522,-9.910167,-4.511923,-0.952538,-0.551530,7.059394,0.101345,-1.634104,7.355375,2.165023,-9.952153,-3.932130,-7.959335,9.340898,-2.944504,-3.502670,-3.416381,-5.645174,6.407799,-9.597371,-9.987240,-9.462196,-8.408150,4.979913,8.946944,-3.706771,9.488004,-0.086372,-8.637115,3.597827,2.714942,1.606534,-2.992710,-0.231221,-4.466097,3.544499,-3.597461,7.719971,-4.562120,4.229438,5.322696,3.556227,-7.291902,-7.537013,-8.358889,1.670758,-6.432337,9.235249,0.801320,-4.231137,-2.223620,-8.195752,1.829226,-3.366756,-2.086160,2.979378,9.174487,-1.949259,6.312652,-0.544959,-1.014426,8.629695,-3.079874,2.898206,-1.268941,-4.591011,-5.032229,8.948117,-3.071069,7.015593,7.601699,-8.871322,-3.560374,-9.742823,6.506719,5.415423,2.855068,-1.787270,4.006134,3.983383,2.324425,-5.318185,-0.575684,0.493217,7.398805,2.052200,-2.508351,1.442621,3.188891,-5.461798,-1.201546,-5.394362,-8.876079,-5.181045,7.896349,5.473869,5.353565,-2.660372,0.886891,-1.771956,-9.186844,-4.991478,0.866899,0.614035,4.666645,9.121772,7.982930,1.740506,1.571848,1.831511,1.179207,6.273085,3.526943,-6.861531,-7.247160,7.130517,3.597506,2.846884,-5.686737,1.283392,-9.355381,6.812329,-2.237233,4.971683,-4.396221,-1.839819,5.175091,-0.419294,4.870635,3.709110,2.773146,4.270911,-2.346300,1.809134,0.288284,7.521723,-8.421536,-6.109200,2.335428,-6.051044,-6.092568,-5.256393,-0.605778,-3.090908,9.702444,2.033784,8.195710,0.765611,9.699186,-9.174092,9.423752,-2.641242,-1.058625,9.649430,-4.320800,-0.033924,-3.078989,-9.195988,4.849516,2.181389,7.700825,-4.571626,1.279329,-9.717508,-6.249782,5.342963,-9.094000,6.838138,-2.780750,3.547743,-7.955969,-7.210205,-4.747032,-3.169530,3.390397,-4.877521,-2.896670,5.132765,0.084404,5.908051,-0.772204,3.418121,-3.433667,-2.565591,2.946831,-5.986947,5.157219,7.270399,9.254579,8.946476,1.585036,9.382863,-2.765157,0.980465,1.320374,-5.370095,0.331729,-2.405654,-0.653239,6.913745,-5.802872,-9.147218,-7.547044,6.582460,7.417395,-4.618895,9.622267,-7.813988,4.011090,7.428872,-0.835852,-7.901653,0.974259,-5.814405,3.671489,-0.635970,3.606312,1.992778,-9.095095,8.478159,-4.968624,-5.129735,-2.816187,8.331091,-7.442008,-1.273467,-4.866637,-9.652158,2.093978,-4.070833,-2.851172,4.205547,5.366266,6.673277,1.662039,9.140185,4.139721,4.335233,-1.851092,2.722423,4.122129,-7.444558,-9.444959,-8.277353,6.175611,3.603991,7.644459,2.724251,6.556590,-8.518230,5.524916,-2.186585,5.274954,-8.174109,5.839410,-5.915563,0.349503,-2.239069,1.682396,-4.415539,7.684260,8.588157,-1.966028,3.298592,9.600932,-0.193387,7.094716,3.551209,1.854052,5.544102,0.455999,3.339180,-2.552796,7.354900,-1.837942,-2.590371,3.021808,-2.905880,-0.399282,9.864275,6.291011,-5.222182,8.504948,2.850124,-7.253444,2.912570,-7.514208,-1.459313,-2.960156,0.951881,2.977533,5.432409,5.470411,-1.456285,6.165556,9.053799,-4.757728,-4.387360,-3.311833,-9.582205,-7.008282,-8.116664,-0.481526,3.388684,-6.530557,-0.893590,-0.233934,-1.684859,2.588181,0.445529,1.332910,-9.768303,-5.499665,6.423352,-8.508594,1.951348,0.825238,-8.864902,2.617150,-5.137054,-8.352343,9.550552,-3.293639,-3.637611,8.641815,0.201422,-4.522341,-0.493606,-1.445790,5.143499,2.550635,3.023026,6.392123,-8.716491,6.674772,-7.965444,8.430425,-6.143817,-5.891866,-8.079780,-4.668634,-9.121034,9.976100,2.413901,-6.848288,-1.873055,-1.469865,-7.818674,5.218248,-2.227091,7.719565,-3.973208,-8.051808,1.017089,1.980303,-5.748924,2.428157,8.893064,5.629917,-0.885598,6.370954,2.180420,-2.209862,9.665577,7.956453,-2.443776,0.150824,8.353045,2.031477,-5.495892,-9.648943,-4.323217,4.054416,-0.957194,-8.886695,-8.204921,-7.272072,6.392127,3.460736,-9.176692,-5.262559,2.357677,-2.904222,-6.475796,5.984019,-2.346411,5.209832,8.213045,-0.210416,-3.378950,-5.582203,5.623081,-4.764813,6.111079,9.252524,-3.996051,-8.246580,0.126227,2.950880,-6.291381,-9.550158,-9.191033,1.984517,-1.445422,-6.764532,8.820338,9.695839,2.268020,9.743398,0.820517,-7.669232,7.113463,-3.466100,7.903186,-1.053291,-1.059777,0.784140,-2.357266,7.709265,-2.110389,7.581368,-2.566774,-1.230396,2.470341,6.288642,3.638826,-7.713735,-8.899838,2.760313,-3.372424,-6.638829,0.050266,-7.339234,-7.716778,-2.812181,3.935253,-8.843000,7.392398,1.314766,3.908316,4.569195,-6.042983,5.104082,-6.261311,3.293110,-7.069094,-4.061120,0.499727,0.059055,-5.681972,-6.930379,-5.072897,0.689239,-3.829924,-9.553238,9.947793,-1.164292,4.470280,9.957880,-8.198094,0.136701,-6.902000,-0.271503,-6.315023,4.531771,-8.666377,-5.253670,3.579748,-4.014458,-0.617995,7.020747,-9.823318,7.283117,6.513346,-8.096723,2.531583,-2.806085,9.186062,6.952683,-1.617116,-3.624384,2.097590,4.304300,-1.568004,-4.306791,-4.401176,4.584990,9.533755,7.385187,8.459386,-8.678204,1.962311,-9.526132,-3.342724,-9.371391,-8.957417,8.850537,3.958570,-1.566702,-7.511327,-2.364627,-2.154794,0.720152,-1.338211,-7.864044,-1.575891,7.798356,6.831262,-1.674233,3.120538,0.538151,8.194888,1.636608,4.565362,9.272139,-6.253072,8.486526,2.034461,-8.158093,8.449561,8.578360,-3.387891,2.490044,-0.041722,3.663261,-7.434380,2.326974,9.811693,-1.021673,6.401190,-4.828370,7.730270,-9.266361,-0.833640,-2.063301,-8.834577,-0.814633,-7.883002,-6.029207,1.167046,9.929721,-7.817322,-4.684782,4.462349,6.820364,-3.292543,2.820347,3.126245,-4.050776,-4.540004,6.040458,-2.764407,7.914459,0.284706,8.090307,0.696749,-4.298197,1.198178,0.715559,9.001636,1.012903,-3.821929,7.006112,6.623538,-8.244967,-2.302104,-8.458770,7.817328,-5.627616,6.374831,8.032394,-8.158890,9.627642,-0.934454,-4.560635,2.782394,9.157846,-4.523256,1.623059,-4.882044,-0.354302,9.583552,5.121804,-2.578038,7.372865,1.378927,1.758503,-7.516733,-3.342030,4.877553,-8.221840,-4.574622,7.070974,-1.674865,-8.608789,-4.845776,2.351100,5.100227,-9.987119,-0.867883,-3.842876,-5.590981,6.196176,-5.194390,-3.722081,6.942559,-4.260717,-6.215403,-5.179938,-8.680008,-9.406805,1.019431,-1.987695,-4.503031,5.942957,-5.633609,9.397493,7.917112,2.537927,-1.460220,7.481495,-1.740887,1.583429,7.810264,7.977642,9.418216,-5.485872,2.315587,9.382911,8.286433,9.160782,-3.834874,3.200122,2.205245,1.898359,-5.240722,0.007290,-9.895393,1.887904,0.726225,6.803094,-9.320834,3.873938,-0.807518,-4.530028,9.171015,4.169971,-5.902920,1.687719,3.359315,7.454180,-9.469093,-6.112585,4.394974,-5.904198,-6.199592,2.238303,-3.866491,6.872598,-8.585919,-8.878612,9.770018,3.408928,-1.596064,5.927387,-2.110401,7.242922,-9.678412,4.788812,-2.358552,-5.751544,-0.142695,9.612796,-3.705056,8.553652,-8.825473,1.214697,-1.042619,0.160796,1.033741,-1.800346,5.579494,-8.956105,-1.712093,-8.955108,-0.914743,9.698154,-9.775465,9.771898,1.751051,0.318345,-4.054391,5.340965,-4.755920,-8.417108,-8.335553,9.006046,-3.169725,4.403240,9.625353,2.206459,-9.590862,-0.970359,-7.130885,1.010444,6.524299,2.408635,9.166311,-7.321226,-7.635461,-1.129500,4.861514,-6.191808,4.030482,-0.500794,2.413675,-6.031232,9.353523,5.082270,-9.594566,6.341222,8.671697,-2.651754,-2.964501,-2.086570,9.938319,1.918249,-2.229434,-2.764175,6.407350,9.876091,5.377361,-2.222685,-6.057109,-8.622543,-3.100398,-8.417146,-7.239602,1.782222,7.956685,7.385121,-8.412687,-3.465218,5.758904,-1.702317,8.435627,4.396312,-2.192945,0.263637,6.119502,7.944333,-6.430497,-5.459809,-9.595912,6.831529,0.565724,-8.091129,3.284321,4.668762,-0.390727,0.002981,1.594985,-9.093492,-8.039050,-4.653904,7.164407,0.067919,-0.953377,-5.582093,5.429678,-5.356599,6.442575,-1.165451,7.516756,6.576879,-3.989864,-4.995440,4.289049,6.945216,-8.752544,-3.473406,1.623009,7.005478,5.472616,5.004086,1.198033,7.238424,-5.884039,4.975627,3.313758,0.873250,3.102059,1.319359,-9.814726,-9.328512,0.080103,-1.133276,1.476309,-4.102266,-4.621681,5.240442,0.602636,-8.736075,4.168267,-8.564732,-1.726410,-5.763619,0.341383,-9.136259,-8.548720,-9.248158,0.306733,-2.715553,6.180248,1.835157,-1.112240,4.426162,-1.644417,-4.725939,-1.100100,-4.175085,-0.845729,-1.696097,9.730888,-4.972741,-0.266800,0.198822,5.290592,-8.610477,-5.286849,-9.797091,-1.280826,-0.754577,2.976750,-0.224022,9.246155,-7.194915,1.688174,6.330569,-7.155143,-0.244758,7.765541,-2.694038,-7.173323,4.267052,0.973071,8.707993,9.359052,-5.549395,-8.543631,-4.119670,8.814479,-7.188466,-2.094457,5.810155,0.855319,2.845342,4.654876,3.883997,-4.486036,-6.537970,8.211437,1.404607,-0.847627,9.362871,0.743796,-0.709994,1.174546,0.655668,7.628848,-1.162889,2.672749,5.408363,9.976899,-9.727051,8.369487,9.380278,-0.520559,7.867190,-8.287636,-1.541485,0.168800,7.784886,7.974658,-2.172557,6.630154,5.329619,-7.524357,-6.921713,6.427389,5.201152,9.930174,7.109737,8.761420,-6.696974,-2.229023,0.174315,-6.976861,-9.738524,-4.373166,-8.590963,8.591780,-0.294227,-5.013113,8.780442,9.521918,-2.311043,-1.561871,-5.883135,-5.359625,4.343667,2.585422,-0.495504,4.061162,2.755723,6.054321,-9.387332,0.075683,-7.237610,0.754574,-9.593385,-5.287016,1.804328,-7.759619,1.901833,1.349146,3.363821,9.241283,-8.292733,-5.728599,-4.007323,2.660398,-5.603177,0.266232,-7.410811,6.679039,0.723750,6.818586,-8.321526,9.374567,-7.617255,-5.351578,8.814611,-4.420071,3.032054,-1.882397,-4.309711,-1.978103,-5.695587,-8.043498,-6.055458,5.653248,0.163419,-2.629968,8.762578,2.299867,-4.700509,0.600157,-9.496890,0.636070,8.714800,4.063177,9.310103,-6.244628,-9.669772,-3.076179,-9.500807,-4.693889,-9.841068,9.646618,-4.076710,-6.496326,1.073703,4.284254,7.537180,5.653870,-4.555061,-7.762367,-6.825459,3.375983,6.649148,0.584407,-8.533790,-1.500522,-5.156854,-0.825597,-6.323011,-5.887324,-7.785102,2.591094,-6.834392,-7.781839,-3.445196,9.812917,-3.566569,1.327693,-4.414882,9.801445,-7.860474,-0.494256,-2.022830,-6.433154,1.107725,-3.763592,-2.510950,2.166136,-8.775638,0.269316,-6.849740,5.672799,7.048471,9.238584,7.912701,-2.520802,-7.604767,-8.283872,1.404539,7.909994,9.035091,3.361406,-2.248024,1.858527,-6.615452,6.212303,0.557442,2.012985,7.340781,-6.211474,-7.587706,-5.730535,4.908205,1.623377,8.607266,3.661699,-4.326573,-7.679398,6.120889,5.167058,-3.173510,1.171743,2.705219,6.807798,7.693938,2.201866,-3.686767,-3.753044,-3.314332,7.247446,-1.175716,1.614555,2.201156,6.222872,7.382076,-7.957532,0.412390,7.430582,1.985986,3.574402,-4.259549,-2.554296,3.367370,8.949189,-3.576073,4.023735,1.723465,5.700263,1.502683,-4.965431,1.018456,-2.394100,-7.792047,4.393858,-8.686438,-6.131464,5.438698,-1.077018,1.695907,-0.907065,-7.801058,-3.265631,-1.278419,-1.115634,1.137261,-0.570037,2.514418,7.633915,-5.377727,3.307504,-1.508191,-2.636687,-1.061173,-1.076458,-7.737329,0.717605,-4.419542,-1.993219,6.374683,-0.937282,6.455217,3.184316,-3.371177,-2.610122,4.299149,9.516767,5.638215,2.154521,-0.562392,6.926726,0.132277,0.558911,7.345745,-1.632774,-7.445560,4.593889,-8.512011,1.626203,6.079315,0.710706,2.868249,-0.485439,-4.720275,9.748335,6.088620,4.096363,5.595529,2.856302,7.350142,-7.950330,-3.320244,2.121826,-9.742974,9.139865,2.543467,1.583085,-7.631977,5.351581,8.338041,9.492836,-9.704160,0.911690,-4.886268,-7.533324,2.529642,5.576763,-7.063107,-5.722788,7.638560,-2.234777,-0.667401,-7.425098,-8.744144,-6.802677,-7.275811,-9.822932,-0.378517,-5.123897,-3.293113,-3.543422,8.816254,-0.700786,3.004359,0.195739,-5.871549,0.838017,8.770126,0.485413,8.146343,9.878761,-1.652928,-7.091088,-1.897094,2.377204,0.057770,-1.898840,5.236610,-9.747640,1.134361,-9.821448,-3.111281,-4.256637,1.292065,2.676905,5.886745,-4.067478,-5.221827,3.833508,6.164202,-3.958091,-6.158243,-3.988497,2.632622,-5.056044,-5.504996,-3.512887,-5.029331,-9.137077,7.314805,4.236692,-2.559418,-0.942032,-4.146648,2.757593,-6.068070,6.688256,-9.075701,-0.550954,-9.547065,-8.119414,1.391465,9.507450,-9.783536,0.894523,9.356085,-6.990969,-9.828497,4.826942,-7.630555,7.751249,-2.918665,-4.418164,-4.596216,-1.869210,4.370894,7.526100,6.188464,1.105813,-2.676090,9.078072,0.886289,9.756036,-5.759131,-1.609878,-9.657375,6.776127,-1.354850,4.908572,8.042970,-6.389755,7.943491,0.854046,-4.590651,-3.214015,-6.702704,9.654612,2.523176,6.949948,0.348554,4.596872,8.428603,-0.545188,-7.599811,-8.673923,8.284009,-6.034226,-8.212144,3.825945,-3.225613,3.009084,-7.557239,-7.856398,-3.387090,2.077642,-2.801080,3.738128,-0.905291,5.026753,6.112854,-5.350216,-3.880368,4.319916,-8.802726,-2.556864,-8.932161,5.691827,-5.843264,6.716054,-7.624396,-6.543267,3.846691,-9.485763,4.337627,-0.497844,-1.448784,0.269161,4.933065,3.040051,1.010798,2.353060,-9.231648,-4.442504,-2.681138,5.806849,4.551286,0.986025,2.248338,-4.518680,-9.021153,3.910364,8.792205,6.488270,-1.587769,-8.560805,-6.060635,0.096572,7.931166,0.167662,2.623830,-5.054854,-4.219766,7.927258,2.382701,-8.276198,-1.926727,-8.254526,-2.611105,0.163431,1.156099,1.294592,5.391132,-2.509570,-2.412080,-1.978097,-3.766577,-0.180748,3.029152,-0.068386,6.577305,-2.071624,-2.332202,1.353703,-8.823310,5.431453,6.351146,-9.345765,-8.914444,2.565572,-3.319936,-0.677690,-2.780490,-9.115221,2.210850,-9.259709,0.084891,-2.935944,-0.475705,1.467682,-6.216034,-8.448857,5.374425,-6.393372,7.694198,-4.175121,-0.773486,-4.529821,-3.723190,-9.313990,3.876910,-5.554766,2.607882,-1.547385,8.014492,-8.535480,3.193105,9.504104,0.849831,-8.934107,2.051647,7.106148,1.823121,-5.535870,-0.310814,6.967153,0.929583,-6.092813,8.756566,-9.638502,-0.072916,-2.861048,5.555699,-3.051802,-3.946484,0.331909,-9.363397,9.301761,-5.385384,0.066802,-3.750762,-6.356487,-9.124917,-3.263201,-2.528762,-8.595949,2.804511,-8.821379,-4.713463,-0.792120,4.041090,-3.405013,-4.559743,6.767312,6.372635,4.216142,-2.619574,-9.137737,-3.444590,-2.123724,1.024903,-7.197406,2.966212,-0.866748,5.034937,-0.543463,-1.301670,-4.336577,-1.895814,-4.665021,-8.240879,2.228604,9.076361,-7.653915,-5.168384,-0.016732,4.395133,7.057148,4.036863,9.091721,-6.974186,7.530513,-3.285687,9.771554,-4.795475,3.249131,1.177187,4.609711,-7.034067,-3.969554,-3.825854,-0.702101,2.057179,-8.783411,5.505276,-5.718057,-4.020274,3.241312,6.101326,7.420659,-1.532077,7.605809,-0.657409,-4.769689,-4.432958,8.160026,-5.117152,-3.320951,0.331051,-6.260810,-5.949254,-3.293760,1.936702,-8.649418,-2.174949,-7.919533,-9.917230,-8.591642,-0.492997,9.597329,-8.986667,5.068625,-2.716616,-0.127704,-2.674400,3.663206,5.934504,9.289999,4.770427,-7.952858,-2.136602,-9.018053,-5.022867,4.195319,7.213769,4.415657,8.561490,-5.540214,-2.615272,-9.009237,-5.120469,-4.235120,3.196663,-5.037129,8.066189,4.818242,1.446649,-8.300474,-3.500838,-6.596825,-3.895746,5.733599,-7.006072,7.436311,1.597546,2.809770,0.706521,2.403736,-6.100811,6.360027,-9.980762,7.231662,-0.574082,5.561080,6.136226,7.873157,7.064461,4.784805,-7.935957,9.585784,-7.130022,8.714803,-0.972649,1.123639,-8.900625,-3.860511,7.962182,-2.947649,6.158996,-6.424032,3.117611,-3.536535,7.706190,-6.790435,-2.727120,2.328808,2.764916,2.570197,7.214095,-8.428642,4.560028,2.989207,-9.284470,6.078445,2.012024,-7.676286,2.148583,-5.918628,-9.878538,-7.475665,-0.782621,-0.421989,0.254292,5.596744,-1.924567,-5.102576,-8.649228,-3.350532,-8.818057,-2.121284,7.632146,-0.641292,3.733444,8.082539,-0.148497,-8.358141,5.863557,-4.228351,-7.350919,-6.914688,9.443724,6.351936,-6.107161,-1.886910,4.511591,-5.139003,1.727221,0.386835,8.258001,-8.524039,-0.591777,-7.302904,5.103459,-7.327149,-7.519055,-9.802893,-4.643532,6.654809,4.925322,7.666337,-3.352538,-8.448983,-2.794032,-5.540638,-5.232807,9.247338,-7.907176,4.770692,-0.239627,4.805895,-8.338264,-8.186381,4.461541,4.877963,8.927119,0.579360,-6.032186,5.110183,1.043154,6.010575,6.939406,5.975043,-5.984317,5.526497,-4.498243,-3.519488,9.084314,2.688073,-8.552039,9.835802,8.282151,-5.532083,-4.392090,7.368404,7.306907,-8.437168,7.972515,-1.527438,-1.508236,7.451214,6.657812,2.410478,-5.890488,3.736863,4.713763,6.709828,-4.069166,-4.701086,9.711235,-1.744760,-8.990051,7.291992,-6.203391,-4.526176,-2.147616,-8.467426,1.740277,-9.177410,-2.869859,-1.267399,-1.461571,3.471713,7.904554,-9.586310,3.499672,-1.632081,6.307095,8.641197,9.798383,-8.655148,3.540853,9.811773,-0.379449,8.923389,-6.796534,-0.175300,6.192805,6.096137,9.090246,8.694538,-7.220958,9.567855,-4.713279,-3.199017,-0.186102,5.400958,2.525320,-1.778862,-1.344352,-3.948131,0.006221,7.624806,-3.538999,-4.530631,-8.562615,-6.382926,9.987825,-2.470551,8.355568,8.118936,3.050108,4.181021,-7.961032,-4.086640,8.127617,5.637803,4.988643,6.634142,4.045406,-9.505605,-1.977509,-9.099434,-9.196272,6.314166,1.537984,7.317119,4.593382,0.222576,-8.186251,-5.089867,5.655100,-9.355442,-3.324362,-9.756835,1.817221,-9.164660,-1.256768,9.308452,1.070800,-0.208707,-4.915381,-9.916444,-2.940066,6.592623,2.569153,1.265361,9.811344,-6.695341,4.948159,0.529696,9.389744,-9.087919,-5.050546,-2.155931,-3.514997,6.897658,-4.029375,-5.245358,0.121057,5.891433,7.461819,3.309391,-7.499110,5.068285,1.898153,7.015403,-8.909785,-7.416120,5.655428,-5.558415,7.871702,-1.644467,3.551977,-1.289271,-5.493040,-2.668753,-8.781336,-5.513677,6.903927,3.308495,-7.267684,4.133913,-3.137372,-8.419777,-6.558280,-3.712519,-0.026650,3.894289,5.018725,-3.997839,9.404285,-3.946639,7.763103,-6.119428,-7.593401,4.406328,-2.349151,4.258236,-0.725818,5.149256,-1.449928,-3.100177,-8.173657,7.297814,1.295181,-0.603162,-6.590432,8.148024,6.554146,-3.151898,2.613068,6.768418,-8.920481,-0.707447,-9.511597,5.809704,4.235569,1.209310,0.446511,-2.622832], dtype = "float32")#candidate|11500|(1920,)|const|float32
bop_11501 = relay.less(call_11478.astype('bool'), relay.reshape(const_11500.astype('bool'), relay.shape_of(call_11478))) # shape=(1920,)
bop_11504 = relay.less(call_11479.astype('bool'), relay.reshape(const_11500.astype('bool'), relay.shape_of(call_11479))) # shape=(1920,)
func_1462_call = mod.get_global_var('func_1462')
func_1467_call = mutated_mod.get_global_var('func_1467')
var_11507 = relay.var("var_11507", dtype = "int64", shape = ())#candidate|11507|()|var|int64
const_11508 = relay.const([[1,-8,7,9,-9],[-8,10,-10,8,-6],[-1,-1,-1,-3,-8],[6,-4,-4,6,-2],[-10,-7,-6,7,2],[-2,-8,-8,-7,-9],[-3,4,-1,-10,-4],[9,1,-4,6,-2],[5,-1,-8,-1,1],[-1,6,4,4,4],[4,-1,1,3,-7],[8,-2,6,-8,-6],[8,3,-3,-3,9],[-6,-3,10,-4,-3],[-2,4,10,4,8]], dtype = "int64")#candidate|11508|(15, 5)|const|int64
var_11509 = relay.var("var_11509", dtype = "int16", shape = (250,))#candidate|11509|(250,)|var|int16
call_11506 = relay.TupleGetItem(func_1462_call(relay.reshape(var_11507.astype('int64'), []), relay.reshape(const_11508.astype('int64'), [15, 5, 1]), relay.reshape(var_11509.astype('int16'), [125, 2]), ), 0)
call_11510 = relay.TupleGetItem(func_1467_call(relay.reshape(var_11507.astype('int64'), []), relay.reshape(const_11508.astype('int64'), [15, 5, 1]), relay.reshape(var_11509.astype('int16'), [125, 2]), ), 0)
output = relay.Tuple([call_11472,call_11480,call_11493,call_11497,bop_11501,call_11506,var_11507,const_11508,var_11509,])
output2 = relay.Tuple([call_11473,call_11481,call_11494,call_11498,bop_11504,call_11510,var_11507,const_11508,var_11509,])
func_11512 = relay.Function([var_11507,var_11509,], output)
mod['func_11512'] = func_11512
mod = relay.transform.InferType()(mod)
var_11513 = relay.var("var_11513", dtype = "int64", shape = ())#candidate|11513|()|var|int64
var_11514 = relay.var("var_11514", dtype = "int16", shape = (250,))#candidate|11514|(250,)|var|int16
output = func_11512(var_11513,var_11514,)
func_11515 = relay.Function([var_11513,var_11514,], output)
mutated_mod['func_11515'] = func_11515
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7714_call = mod.get_global_var('func_7714')
func_7716_call = mutated_mod.get_global_var('func_7716')
call_11520 = func_7714_call()
call_11521 = func_7714_call()
func_4419_call = mod.get_global_var('func_4419')
func_4421_call = mutated_mod.get_global_var('func_4421')
var_11532 = relay.var("var_11532", dtype = "int8", shape = (128,))#candidate|11532|(128,)|var|int8
call_11531 = func_4419_call(relay.reshape(var_11532.astype('int8'), [16, 2, 4]))
call_11533 = func_4419_call(relay.reshape(var_11532.astype('int8'), [16, 2, 4]))
output = relay.Tuple([call_11520,call_11531,var_11532,])
output2 = relay.Tuple([call_11521,call_11533,var_11532,])
func_11548 = relay.Function([var_11532,], output)
mod['func_11548'] = func_11548
mod = relay.transform.InferType()(mod)
var_11549 = relay.var("var_11549", dtype = "int8", shape = (128,))#candidate|11549|(128,)|var|int8
output = func_11548(var_11549)
func_11550 = relay.Function([var_11549], output)
mutated_mod['func_11550'] = func_11550
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6532_call = mod.get_global_var('func_6532')
func_6533_call = mutated_mod.get_global_var('func_6533')
call_11561 = relay.TupleGetItem(func_6532_call(), 3)
call_11562 = relay.TupleGetItem(func_6533_call(), 3)
output = relay.Tuple([call_11561,])
output2 = relay.Tuple([call_11562,])
func_11570 = relay.Function([], output)
mod['func_11570'] = func_11570
mod = relay.transform.InferType()(mod)
output = func_11570()
func_11571 = relay.Function([], output)
mutated_mod['func_11571'] = func_11571
mutated_mod = relay.transform.InferType()(mutated_mod)
var_11598 = relay.var("var_11598", dtype = "float64", shape = (6, 2, 16))#candidate|11598|(6, 2, 16)|var|float64
uop_11599 = relay.log10(var_11598.astype('float64')) # shape=(6, 2, 16)
func_4458_call = mod.get_global_var('func_4458')
func_4461_call = mutated_mod.get_global_var('func_4461')
var_11602 = relay.var("var_11602", dtype = "bool", shape = (2112,))#candidate|11602|(2112,)|var|bool
call_11601 = relay.TupleGetItem(func_4458_call(relay.reshape(var_11602.astype('bool'), [16, 11, 12]), relay.reshape(var_11602.astype('bool'), [16, 11, 12]), ), 5)
call_11603 = relay.TupleGetItem(func_4461_call(relay.reshape(var_11602.astype('bool'), [16, 11, 12]), relay.reshape(var_11602.astype('bool'), [16, 11, 12]), ), 5)
func_9537_call = mod.get_global_var('func_9537')
func_9539_call = mutated_mod.get_global_var('func_9539')
call_11610 = relay.TupleGetItem(func_9537_call(), 1)
call_11611 = relay.TupleGetItem(func_9539_call(), 1)
output = relay.Tuple([uop_11599,call_11601,var_11602,call_11610,])
output2 = relay.Tuple([uop_11599,call_11603,var_11602,call_11611,])
func_11624 = relay.Function([var_11598,var_11602,], output)
mod['func_11624'] = func_11624
mod = relay.transform.InferType()(mod)
var_11625 = relay.var("var_11625", dtype = "float64", shape = (6, 2, 16))#candidate|11625|(6, 2, 16)|var|float64
var_11626 = relay.var("var_11626", dtype = "bool", shape = (2112,))#candidate|11626|(2112,)|var|bool
output = func_11624(var_11625,var_11626,)
func_11627 = relay.Function([var_11625,var_11626,], output)
mutated_mod['func_11627'] = func_11627
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6793_call = mod.get_global_var('func_6793')
func_6794_call = mutated_mod.get_global_var('func_6794')
call_11707 = func_6793_call()
call_11708 = func_6793_call()
func_10817_call = mod.get_global_var('func_10817')
func_10819_call = mutated_mod.get_global_var('func_10819')
call_11717 = relay.TupleGetItem(func_10817_call(), 0)
call_11718 = relay.TupleGetItem(func_10819_call(), 0)
func_11313_call = mod.get_global_var('func_11313')
func_11314_call = mutated_mod.get_global_var('func_11314')
call_11724 = relay.TupleGetItem(func_11313_call(), 0)
call_11725 = relay.TupleGetItem(func_11314_call(), 0)
func_8742_call = mod.get_global_var('func_8742')
func_8743_call = mutated_mod.get_global_var('func_8743')
call_11732 = func_8742_call()
call_11733 = func_8742_call()
output = relay.Tuple([call_11707,call_11717,call_11724,call_11732,])
output2 = relay.Tuple([call_11708,call_11718,call_11725,call_11733,])
func_11756 = relay.Function([], output)
mod['func_11756'] = func_11756
mod = relay.transform.InferType()(mod)
output = func_11756()
func_11757 = relay.Function([], output)
mutated_mod['func_11757'] = func_11757
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11398_call = mod.get_global_var('func_11398')
func_11400_call = mutated_mod.get_global_var('func_11400')
call_11846 = relay.TupleGetItem(func_11398_call(), 0)
call_11847 = relay.TupleGetItem(func_11400_call(), 0)
output = relay.Tuple([call_11846,])
output2 = relay.Tuple([call_11847,])
func_11856 = relay.Function([], output)
mod['func_11856'] = func_11856
mod = relay.transform.InferType()(mod)
output = func_11856()
func_11857 = relay.Function([], output)
mutated_mod['func_11857'] = func_11857
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11398_call = mod.get_global_var('func_11398')
func_11400_call = mutated_mod.get_global_var('func_11400')
call_11900 = relay.TupleGetItem(func_11398_call(), 2)
call_11901 = relay.TupleGetItem(func_11400_call(), 2)
func_11244_call = mod.get_global_var('func_11244')
func_11245_call = mutated_mod.get_global_var('func_11245')
call_11902 = relay.TupleGetItem(func_11244_call(), 0)
call_11903 = relay.TupleGetItem(func_11245_call(), 0)
func_9124_call = mod.get_global_var('func_9124')
func_9126_call = mutated_mod.get_global_var('func_9126')
call_11904 = relay.TupleGetItem(func_9124_call(), 3)
call_11905 = relay.TupleGetItem(func_9126_call(), 3)
output = relay.Tuple([call_11900,call_11902,call_11904,])
output2 = relay.Tuple([call_11901,call_11903,call_11905,])
func_11918 = relay.Function([], output)
mod['func_11918'] = func_11918
mod = relay.transform.InferType()(mod)
output = func_11918()
func_11919 = relay.Function([], output)
mutated_mod['func_11919'] = func_11919
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11053_call = mod.get_global_var('func_11053')
func_11055_call = mutated_mod.get_global_var('func_11055')
call_11995 = relay.TupleGetItem(func_11053_call(), 1)
call_11996 = relay.TupleGetItem(func_11055_call(), 1)
output = call_11995
output2 = call_11996
func_12003 = relay.Function([], output)
mod['func_12003'] = func_12003
mod = relay.transform.InferType()(mod)
output = func_12003()
func_12004 = relay.Function([], output)
mutated_mod['func_12004'] = func_12004
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7472_call = mod.get_global_var('func_7472')
func_7474_call = mutated_mod.get_global_var('func_7474')
call_12048 = relay.TupleGetItem(func_7472_call(), 0)
call_12049 = relay.TupleGetItem(func_7474_call(), 0)
output = relay.Tuple([call_12048,])
output2 = relay.Tuple([call_12049,])
func_12054 = relay.Function([], output)
mod['func_12054'] = func_12054
mod = relay.transform.InferType()(mod)
mutated_mod['func_12054'] = func_12054
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12054_call = mutated_mod.get_global_var('func_12054')
call_12055 = func_12054_call()
output = call_12055
func_12056 = relay.Function([], output)
mutated_mod['func_12056'] = func_12056
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9936_call = mod.get_global_var('func_9936')
func_9938_call = mutated_mod.get_global_var('func_9938')
call_12066 = func_9936_call()
call_12067 = func_9936_call()
output = relay.Tuple([call_12066,])
output2 = relay.Tuple([call_12067,])
func_12073 = relay.Function([], output)
mod['func_12073'] = func_12073
mod = relay.transform.InferType()(mod)
output = func_12073()
func_12074 = relay.Function([], output)
mutated_mod['func_12074'] = func_12074
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11918_call = mod.get_global_var('func_11918')
func_11919_call = mutated_mod.get_global_var('func_11919')
call_12095 = relay.TupleGetItem(func_11918_call(), 0)
call_12096 = relay.TupleGetItem(func_11919_call(), 0)
func_9002_call = mod.get_global_var('func_9002')
func_9004_call = mutated_mod.get_global_var('func_9004')
call_12101 = func_9002_call()
call_12102 = func_9002_call()
func_7887_call = mod.get_global_var('func_7887')
func_7889_call = mutated_mod.get_global_var('func_7889')
call_12106 = func_7887_call()
call_12107 = func_7887_call()
output = relay.Tuple([call_12095,call_12101,call_12106,])
output2 = relay.Tuple([call_12096,call_12102,call_12107,])
func_12117 = relay.Function([], output)
mod['func_12117'] = func_12117
mod = relay.transform.InferType()(mod)
mutated_mod['func_12117'] = func_12117
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12117_call = mutated_mod.get_global_var('func_12117')
call_12118 = func_12117_call()
output = call_12118
func_12119 = relay.Function([], output)
mutated_mod['func_12119'] = func_12119
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10453_call = mod.get_global_var('func_10453')
func_10454_call = mutated_mod.get_global_var('func_10454')
call_12129 = func_10453_call()
call_12130 = func_10453_call()
output = call_12129
output2 = call_12130
func_12140 = relay.Function([], output)
mod['func_12140'] = func_12140
mod = relay.transform.InferType()(mod)
output = func_12140()
func_12141 = relay.Function([], output)
mutated_mod['func_12141'] = func_12141
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7751_call = mod.get_global_var('func_7751')
func_7752_call = mutated_mod.get_global_var('func_7752')
call_12153 = func_7751_call()
call_12154 = func_7751_call()
func_8395_call = mod.get_global_var('func_8395')
func_8396_call = mutated_mod.get_global_var('func_8396')
call_12171 = func_8395_call()
call_12172 = func_8395_call()
func_12117_call = mod.get_global_var('func_12117')
func_12119_call = mutated_mod.get_global_var('func_12119')
call_12175 = relay.TupleGetItem(func_12117_call(), 1)
call_12176 = relay.TupleGetItem(func_12119_call(), 1)
func_9372_call = mod.get_global_var('func_9372')
func_9373_call = mutated_mod.get_global_var('func_9373')
call_12183 = func_9372_call()
call_12184 = func_9372_call()
func_11191_call = mod.get_global_var('func_11191')
func_11195_call = mutated_mod.get_global_var('func_11195')
var_12194 = relay.var("var_12194", dtype = "int64", shape = (75,))#candidate|12194|(75,)|var|int64
call_12193 = relay.TupleGetItem(func_11191_call(relay.reshape(var_12194.astype('int64'), [75,]), relay.reshape(call_12171.astype('float32'), [396,]), ), 0)
call_12195 = relay.TupleGetItem(func_11195_call(relay.reshape(var_12194.astype('int64'), [75,]), relay.reshape(call_12171.astype('float32'), [396,]), ), 0)
func_9479_call = mod.get_global_var('func_9479')
func_9480_call = mutated_mod.get_global_var('func_9480')
call_12204 = func_9479_call()
call_12205 = func_9479_call()
func_7271_call = mod.get_global_var('func_7271')
func_7276_call = mutated_mod.get_global_var('func_7276')
var_12207 = relay.var("var_12207", dtype = "float32", shape = (24,))#candidate|12207|(24,)|var|float32
var_12208 = relay.var("var_12208", dtype = "bool", shape = (2112,))#candidate|12208|(2112,)|var|bool
var_12209 = relay.var("var_12209", dtype = "int8", shape = (128,))#candidate|12209|(128,)|var|int8
call_12206 = relay.TupleGetItem(func_7271_call(relay.reshape(var_12207.astype('float32'), [2, 3, 4]), relay.reshape(var_12208.astype('bool'), [2112,]), relay.reshape(var_12209.astype('int8'), [128,]), ), 2)
call_12210 = relay.TupleGetItem(func_7276_call(relay.reshape(var_12207.astype('float32'), [2, 3, 4]), relay.reshape(var_12208.astype('bool'), [2112,]), relay.reshape(var_12209.astype('int8'), [128,]), ), 2)
output = relay.Tuple([call_12153,call_12171,call_12175,call_12183,call_12193,var_12194,call_12204,call_12206,var_12207,var_12208,var_12209,])
output2 = relay.Tuple([call_12154,call_12172,call_12176,call_12184,call_12195,var_12194,call_12205,call_12210,var_12207,var_12208,var_12209,])
func_12213 = relay.Function([var_12194,var_12207,var_12208,var_12209,], output)
mod['func_12213'] = func_12213
mod = relay.transform.InferType()(mod)
var_12214 = relay.var("var_12214", dtype = "int64", shape = (75,))#candidate|12214|(75,)|var|int64
var_12215 = relay.var("var_12215", dtype = "float32", shape = (24,))#candidate|12215|(24,)|var|float32
var_12216 = relay.var("var_12216", dtype = "bool", shape = (2112,))#candidate|12216|(2112,)|var|bool
var_12217 = relay.var("var_12217", dtype = "int8", shape = (128,))#candidate|12217|(128,)|var|int8
output = func_12213(var_12214,var_12215,var_12216,var_12217,)
func_12218 = relay.Function([var_12214,var_12215,var_12216,var_12217,], output)
mutated_mod['func_12218'] = func_12218
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9479_call = mod.get_global_var('func_9479')
func_9480_call = mutated_mod.get_global_var('func_9480')
call_12228 = func_9479_call()
call_12229 = func_9479_call()
func_8863_call = mod.get_global_var('func_8863')
func_8864_call = mutated_mod.get_global_var('func_8864')
call_12230 = relay.TupleGetItem(func_8863_call(), 3)
call_12231 = relay.TupleGetItem(func_8864_call(), 3)
output = relay.Tuple([call_12228,call_12230,])
output2 = relay.Tuple([call_12229,call_12231,])
func_12251 = relay.Function([], output)
mod['func_12251'] = func_12251
mod = relay.transform.InferType()(mod)
output = func_12251()
func_12252 = relay.Function([], output)
mutated_mod['func_12252'] = func_12252
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9002_call = mod.get_global_var('func_9002')
func_9004_call = mutated_mod.get_global_var('func_9004')
call_12259 = func_9002_call()
call_12260 = func_9002_call()
output = call_12259
output2 = call_12260
func_12266 = relay.Function([], output)
mod['func_12266'] = func_12266
mod = relay.transform.InferType()(mod)
output = func_12266()
func_12267 = relay.Function([], output)
mutated_mod['func_12267'] = func_12267
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11053_call = mod.get_global_var('func_11053')
func_11055_call = mutated_mod.get_global_var('func_11055')
call_12276 = relay.TupleGetItem(func_11053_call(), 4)
call_12277 = relay.TupleGetItem(func_11055_call(), 4)
const_12300 = relay.const([[[-3.558122,-2.899188,8.241480,3.982704,7.449083,-5.398985,-8.330333,-3.175419,0.752356,6.669168],[-8.751857,3.646080,-3.517958,0.647898,-5.301700,-7.050019,-6.593980,-8.289529,5.629147,-6.716238],[-4.210114,-4.696514,-3.315117,0.582790,-9.389070,-0.809350,7.873719,-0.810676,-2.683179,-7.915858],[-5.016278,1.143948,1.422907,2.743475,-8.128661,1.569712,-0.105607,6.276321,-6.322608,3.809727],[1.553205,9.021201,4.778156,-4.814697,-2.313562,-4.261240,6.586447,0.404004,-2.714222,9.000569],[-0.321873,2.426566,-9.462079,-4.194231,8.772505,-6.693096,3.750228,3.365185,7.002557,5.591684],[-2.481906,9.123989,0.457442,6.308514,8.470540,-0.173864,2.024755,-2.011260,-5.248812,1.946876],[-7.779611,-9.411805,8.503007,-0.365852,2.290284,-3.885549,-7.385293,0.669712,6.275526,9.594638],[-9.777894,-2.877532,4.347283,5.558996,4.553290,5.328349,-9.675390,-2.028724,-8.425462,3.637020],[-7.765694,6.833458,6.460123,-6.218160,3.776459,3.434765,-1.242821,-5.263413,-1.266745,0.640568],[-4.812509,-8.093941,4.448040,-6.707819,3.167648,5.721015,-8.179827,-3.345265,-8.692128,-7.425726],[-8.082346,9.149221,3.182451,-0.529958,8.870911,-8.120398,1.970432,2.472108,0.303851,-7.589141],[3.798530,-0.798898,-8.370143,8.002461,0.294888,1.345138,2.989159,-8.514091,-5.248268,-1.244932],[6.007955,8.159774,2.211951,7.643123,-9.094879,-1.368270,5.867865,3.816766,1.719680,-6.391498]],[[-3.953824,7.695881,-3.140090,8.864481,-5.558413,1.240643,-7.832139,-9.322600,0.219992,-3.180046],[0.913883,8.220452,7.075795,9.497658,4.537367,5.573392,5.835518,2.469089,7.064854,-0.079482],[-4.795643,1.986140,-4.915706,8.408041,4.947028,0.078581,-4.444118,9.706127,-0.172038,-7.769038],[1.384490,5.609512,-8.802981,-9.347590,4.893093,-8.892808,-8.587451,-0.013903,0.104432,-1.139260],[3.611895,-8.779102,-0.646809,3.859566,-4.302259,-8.186061,-5.918625,-4.386514,-5.357780,-9.739102],[1.075028,-4.538520,-6.785467,-3.962257,-1.632372,-8.280706,-1.410614,0.021837,-7.948565,1.562660],[-6.783156,-4.162428,-1.223641,-6.504686,-4.025724,-4.717756,1.640540,5.941348,-7.946425,4.505160],[3.188300,-0.767523,-5.505304,-1.593954,0.302499,3.384529,-5.604172,-3.586915,-9.840949,4.848411],[6.246842,-4.190870,-1.662449,-6.885796,7.466270,0.298411,7.910373,0.521663,3.223213,-0.423139],[0.124778,7.853560,-7.951813,-0.250135,-3.421528,3.483793,-4.648398,-5.631547,6.494809,3.945199],[-5.420743,5.941442,-2.119202,-2.147579,9.693366,-4.308450,-6.738409,-2.810081,4.250266,-1.969964],[-7.424321,0.975692,0.949577,-1.254551,-2.811207,-7.827263,-5.993727,-9.589791,-6.598466,0.523949],[-2.598855,-5.252838,4.416527,8.882345,-7.889256,-4.234768,0.410899,1.281558,9.185228,4.741088],[2.463990,-2.321723,-5.452310,-6.715036,2.542607,-8.888069,-5.148236,2.231551,9.866436,-9.809469]],[[-4.226106,-3.950581,4.440328,-5.094203,6.658104,-3.254061,6.038980,4.020687,-2.507274,-7.439401],[3.471584,1.122875,-4.172064,3.013373,3.833990,6.311841,-0.770159,8.987228,4.326532,-1.296731],[8.616277,3.933839,2.504321,-9.314716,-9.022465,-0.058293,6.109211,4.409214,-3.958287,4.725292],[1.406293,1.531313,9.151295,5.477777,-7.572278,5.188792,-4.258654,2.479281,6.613370,8.657876],[-9.562801,5.946257,3.439589,7.771628,8.854055,4.599606,6.002047,-0.174884,6.607849,5.376652],[3.230851,-0.258938,7.314870,-3.967794,9.216633,6.688755,7.980326,-7.345339,9.766302,-4.280317],[-0.224983,0.725123,-3.067225,-1.131517,3.091008,2.292770,4.722081,7.286917,0.395621,3.859401],[7.263315,0.842315,-4.225114,-9.114438,1.858456,-7.269786,-4.322577,-4.826098,-0.887934,9.810351],[-5.079701,-7.290644,-7.278002,1.551527,9.186407,-4.481992,2.646046,6.642237,2.880873,9.047085],[-5.751053,2.371216,-7.964692,8.276823,-8.389724,-2.594944,-7.029286,-0.066133,-8.019047,-6.662294],[2.890569,2.468673,-1.462400,-8.872819,-5.784668,9.942748,6.639545,8.598021,-8.595405,-7.983257],[7.914942,7.462378,-4.980906,-4.946205,5.217522,-8.673454,-7.370487,9.303166,3.632898,-0.559093],[-1.069217,-4.271565,-7.004986,5.785333,1.282772,-2.394388,-0.976177,-3.238641,0.739246,-0.165793],[6.598653,6.204454,-4.556955,3.883874,-9.588692,6.799432,0.361765,8.859565,8.602331,-7.457990]],[[-4.054102,-5.404744,-1.373253,6.402436,0.845629,3.524697,5.452014,-5.441222,1.289699,4.673062],[-1.836047,-1.725439,-8.056348,2.256454,-3.415193,-4.771752,-5.813436,-5.885905,1.621310,5.891459],[1.803685,-7.555717,5.927622,-7.372322,-8.082158,4.847376,-0.782636,-5.736972,0.863022,-7.256310],[7.027012,-5.017271,5.446118,-7.039874,4.851282,-5.752747,-0.561265,3.509771,4.741494,0.255412],[9.387143,-6.010117,-2.925795,-0.530582,1.207335,-6.164369,-6.569734,-5.562220,9.420094,-5.465798],[-0.846092,2.405446,1.261533,2.456601,-3.165993,-5.008407,7.681048,2.281738,6.140757,3.779762],[-0.161803,8.189981,-4.635337,2.926140,7.446748,-2.644440,-8.140270,-5.032757,-8.935364,-0.843671],[-2.199222,-9.580598,-0.523074,-2.163657,-8.810529,-3.213028,9.155192,0.711592,8.149617,3.325227],[-0.642030,5.849884,2.184907,9.223505,5.368861,-1.311243,-4.198579,0.057654,-3.782569,3.869170],[1.003260,8.018023,0.311220,-2.322602,3.588666,7.013251,-4.440546,-0.391227,1.106091,6.011974],[-0.291401,-5.649101,1.477139,1.690331,6.487435,-2.626742,-6.901336,0.315073,-6.290242,-5.881377],[7.339366,9.056039,-8.145771,3.961252,9.671256,-5.420596,-5.319234,6.262967,-6.100831,2.724281],[8.215377,-3.638547,-7.881055,4.694441,-7.263467,-2.071248,-3.145528,8.469779,-9.531713,-6.491454],[2.982325,0.746013,0.437808,3.185711,2.620243,-4.509604,-1.188325,-6.055969,-5.093482,3.938727]],[[8.548753,7.349342,-4.161498,5.450671,0.506992,-2.366903,-6.271114,7.232732,-8.577798,-7.674442],[2.367726,-5.539806,8.363471,-1.890522,2.568699,-8.843551,-4.498148,-8.706335,-5.916375,0.914662],[1.029199,3.234543,4.169707,0.868180,6.161024,6.177641,-9.051463,5.243346,-3.066436,-7.128439],[8.488372,-5.393341,-0.418743,-8.779531,-3.008334,-7.058183,-2.415111,-6.061103,-1.952352,0.086714],[9.241640,6.099175,0.291060,7.304864,-0.447205,6.761987,7.158869,8.097862,-5.415742,-9.001679],[2.310011,-6.670223,-5.442263,7.578741,-2.125217,7.406150,6.172528,-9.558174,8.720078,-8.759906],[5.578345,2.279505,-0.170575,-1.354276,5.105531,5.659342,6.641908,-9.364765,-7.097417,2.259330],[-3.820810,-9.166847,0.276684,-5.400175,4.785971,-0.409866,-1.431890,8.769649,5.508096,7.624868],[-8.834339,5.293756,-1.448440,-7.382580,-9.275213,-8.810173,-7.242630,-1.315015,3.438167,-2.132772],[-5.103995,5.684793,-3.565849,0.957979,-7.483768,-1.981549,7.799094,-1.944890,8.829565,5.596430],[-2.005602,9.682624,-4.563137,-4.872062,-4.205794,-9.850182,-9.713014,-3.461970,-5.977657,-4.531493],[-3.093216,-0.512909,-9.660157,-9.499852,0.065851,8.768636,0.188234,-6.210247,6.006665,6.313854],[1.451282,-9.867621,4.780067,-3.741134,-0.119128,-0.288368,-9.657577,-2.242118,5.070149,-4.041389],[-7.994549,1.018606,-4.232909,-0.079973,-8.610939,-5.390953,9.934004,0.338859,4.021200,9.117034]],[[-9.722948,-6.894253,-0.689948,-9.437943,5.533831,-9.206867,-9.484481,8.935840,5.884511,-7.472550],[7.357399,2.421510,2.205927,8.992049,-7.783397,-3.714859,-7.077542,6.936463,-5.845683,2.543503],[5.526059,9.989793,1.473186,-7.456193,-3.842913,-3.663298,4.381980,1.453214,5.937885,9.951412],[5.900599,-7.507652,5.286477,-9.680948,0.533558,8.878036,3.731610,8.871191,-0.374748,6.833773],[-5.118973,-9.404311,9.870446,0.839089,2.452912,-9.474892,-1.343347,-6.402194,3.062744,9.095547],[-8.227359,9.222123,-0.320071,-4.905517,-1.847999,6.958474,-4.214367,5.502404,8.253600,-5.793602],[4.651732,3.706643,1.502631,7.257394,-1.744146,-0.459765,-3.459601,-7.816158,-2.852291,2.515727],[-5.951103,1.265667,-6.962223,-2.964352,0.409214,-3.958255,-5.378033,3.671782,-3.059530,-5.777444],[5.662905,9.738389,-3.083319,-6.782282,6.049088,2.541297,3.188529,-8.666868,9.767110,2.145782],[9.937468,-3.839781,-3.348007,3.568669,-0.322197,4.478855,-2.538173,3.360503,8.112983,3.201305],[5.486624,-1.883628,-0.298462,0.672465,-3.696631,-9.940267,-7.180071,2.037478,-4.013145,7.012169],[-3.916458,0.650030,-2.555431,5.371691,-9.104329,-2.273919,1.010588,-5.275935,5.518188,-1.552323],[8.440087,8.025820,4.892933,-8.793660,1.849269,-8.388878,-7.176685,6.295685,6.185115,-7.906112],[9.565624,3.422260,-8.765719,-9.595091,0.248396,7.387885,-8.156098,2.702655,4.590126,2.385532]],[[7.766983,-2.337129,1.716559,-4.726562,-9.936759,2.147336,3.907665,-1.052382,-9.180866,4.175849],[6.379292,-3.916344,9.449876,4.248315,5.510507,-0.178330,6.005709,2.902457,-9.665864,0.892596],[-2.967916,-0.989547,5.749065,4.858060,-2.925371,-5.244571,4.332896,8.026040,-8.520696,8.091212],[0.253439,-9.211089,-7.439411,-8.569822,-7.981233,2.721878,-3.180969,-0.114715,4.595548,0.875016],[3.547418,5.220756,5.276330,4.033167,-9.960664,4.766608,-9.166389,-1.165528,6.583926,7.110725],[-6.912020,1.798291,1.247073,-2.187147,6.806673,-1.361372,0.687889,-4.113027,-2.353693,-1.000494],[-5.427651,-2.946341,-4.528559,-0.880961,9.699873,3.196271,-7.077094,-7.864089,-3.474461,-7.307733],[2.865555,-2.245278,4.245540,4.664637,4.290756,-1.060655,9.639486,-5.676401,8.585707,-5.120091],[1.480096,-6.604072,-7.847056,8.452155,1.078559,-7.222864,-2.910252,-7.503979,8.486987,7.643159],[9.363062,8.936297,-9.756472,-9.988348,-2.646248,6.664304,-9.031124,9.843321,-5.827901,-5.060869],[0.335310,-1.556774,1.157360,1.370521,-9.094271,8.331276,-5.061773,2.303387,7.551162,-2.537193],[-6.701323,2.481916,5.910804,0.448729,4.981237,3.475823,-4.292355,-0.178099,-2.889819,3.273221],[-1.367084,4.044424,7.277242,6.907573,-0.261295,-2.076815,4.580439,-7.486144,-1.316076,6.987984],[9.778711,-2.630070,-2.778904,5.192647,-0.360303,-0.852460,-9.923128,6.202884,-6.277154,-0.402280]],[[-4.142456,5.351632,-9.627238,-5.941379,3.173053,-5.641033,6.309552,-3.002056,5.560995,-8.495568],[-1.652409,-6.676381,-3.112823,-6.002369,-1.685489,-2.534007,9.920639,9.169521,9.803560,7.142225],[2.365744,7.038226,-9.737010,-0.606226,8.990111,-0.219009,8.308846,-7.947370,-6.699032,-6.702110],[7.200250,-2.994180,-7.392906,-5.768458,3.297038,-9.807506,0.579481,7.368514,-4.597813,9.240415],[0.695252,5.745885,-0.677352,-7.980406,2.652786,-1.325575,3.733344,7.128906,-4.443077,9.456256],[4.059423,-5.100555,2.572857,1.276533,2.722262,-5.306603,-2.850523,-2.533725,1.021944,8.086567],[1.991706,-0.708759,-3.132696,8.828788,1.936800,8.476173,-9.888442,-3.316036,5.699360,7.601382],[-7.787368,4.021677,-6.957360,-4.829447,5.145098,-2.087701,8.625224,7.940229,-0.486188,-3.523388],[-4.145912,4.312902,5.050918,-5.695273,5.663637,0.656215,2.289863,-7.578765,-1.807519,-9.491142],[-9.502236,7.354939,1.901956,-4.445563,7.814652,3.299110,-7.312369,-3.968775,-7.591583,-5.249211],[5.260587,-7.395986,7.795555,-1.830460,9.408264,2.831202,6.591240,7.305406,3.550215,-2.540402],[-4.440640,-5.701520,-9.463092,-7.430856,-3.416469,-4.656180,-9.504911,-2.882483,8.492936,-6.853865],[8.148592,3.870937,-9.349423,1.662432,-7.949795,-3.548129,-3.867209,0.418238,1.852312,7.196711],[-9.778782,5.856321,-0.109285,-3.179167,-4.158900,-3.691209,-3.460646,-6.752611,-3.347899,2.881613]],[[-9.375407,7.255845,-2.994018,6.469282,-4.980720,7.915901,4.956055,-2.550567,3.677046,5.396499],[6.156582,0.524515,2.207496,-5.178807,-9.654015,-4.879959,3.054349,0.802390,-3.872952,5.372669],[0.589850,-9.224250,-4.806484,3.429064,2.503423,2.129438,-2.977741,1.729369,3.033135,-7.483896],[0.036480,-5.995669,-8.161542,-3.842061,-6.552455,-5.303606,9.306810,-3.149985,9.310905,2.890885],[8.402028,6.600366,2.299918,2.346757,-6.602193,-1.200186,6.469933,-8.174616,-7.241750,-8.717089],[-7.362587,7.996199,8.174642,2.770587,8.781662,-1.138412,-9.883103,-3.096767,-4.775032,-5.608533],[8.920849,-3.415107,8.741400,1.647366,8.249789,-1.866832,-3.729543,0.302109,-0.305080,-8.839095],[4.391466,-5.968479,-4.964232,-5.570734,-3.275240,1.876789,6.921594,-2.151926,-3.013819,4.989592],[-5.214152,2.115943,1.163962,-3.982243,-2.532066,7.592552,9.744251,0.330750,-4.704829,-6.159679],[-4.482626,4.586671,5.435936,-5.710079,0.086829,-3.263164,9.969595,-0.506308,-6.805803,-7.806972],[2.479688,0.323291,3.395419,-3.142800,-5.189137,1.002782,-8.298153,-1.290878,-6.443422,0.483674],[-7.130113,5.434418,5.734256,-5.012735,8.043391,-6.569930,-7.484032,5.537262,-8.129976,-2.693848],[3.235331,2.573439,-4.678179,8.827893,-3.007857,-0.356233,-1.802513,7.255882,3.237616,-5.959450],[-1.905522,7.968157,-5.035607,1.671335,-3.413090,2.579039,2.758989,9.164488,-4.305557,-5.184484]],[[7.107206,-9.464378,2.465743,9.454056,3.147653,9.913501,8.447714,7.335790,2.208255,-2.796767],[-9.188721,4.531681,0.124580,5.949953,-5.238066,-5.831875,-6.175882,7.384256,-0.905197,-7.163561],[-9.997188,-5.069423,-5.916858,8.104454,-4.956390,7.233022,1.494841,-1.468739,8.984667,1.588749],[8.829664,7.579214,-4.002899,3.983451,0.264849,-2.350674,5.521712,2.758606,-9.524018,-2.033605],[8.781476,7.061307,-8.266641,9.422345,6.011628,7.426233,-6.045183,-2.732477,-8.626809,-9.499009],[3.341815,9.535289,1.987460,-2.855994,-7.419508,-7.145189,-2.140677,-0.961244,7.453759,-2.483266],[-7.332828,9.937235,-0.191308,3.001832,-6.233969,5.468901,9.566469,-0.176585,1.254049,-2.359759],[7.579961,9.689074,0.871888,4.786793,8.682458,9.444891,8.429899,1.334254,7.715000,-3.363726],[-8.466891,8.153457,7.907338,-8.112809,8.890335,-1.366749,7.770460,-5.565308,2.554673,6.397923],[-1.342598,2.199033,5.068766,4.484752,5.913854,-8.019753,5.954898,3.865942,-9.885075,-1.173116],[5.577383,-7.253384,-1.406714,9.539199,-3.965130,9.106067,3.224027,7.947643,7.962830,3.299513],[-2.858163,-2.910026,-4.899302,-3.455416,5.735942,-0.740507,0.994450,8.700712,0.444127,-9.749137],[8.102308,-5.037975,-6.060110,5.678897,9.560261,-0.800061,4.365732,9.487521,4.516504,-3.766327],[-7.455951,9.198179,3.407973,-5.834114,8.730956,8.621032,-9.807278,7.177206,1.090186,-1.190202]],[[-4.020330,-2.299977,4.067563,8.397460,-5.340089,9.208900,-5.486153,-8.614655,1.850172,-2.049934],[6.353374,7.492776,-0.205588,-1.146520,9.962008,-5.792891,-4.391055,3.432436,-5.953211,-8.284889],[-7.920296,-4.332100,-8.901653,3.443537,0.421927,-9.315428,8.046339,-4.191653,-9.335314,8.278092],[2.662994,8.644709,-6.213665,6.014814,1.989073,6.048411,4.600755,-6.101471,9.213263,9.584692],[-7.111987,1.655321,0.417424,9.687492,7.329437,1.629483,-9.629369,-3.399997,-3.958328,6.168919],[1.665108,0.082703,-4.626685,-8.923808,2.532506,-5.569387,7.127477,2.312634,3.756009,-1.860974],[3.864681,1.181266,2.067199,3.843496,5.798015,2.555260,6.465878,1.153596,3.589066,7.044112],[2.380717,-1.038107,-6.791056,7.327611,-3.048885,-0.963552,-6.663285,2.776232,7.660842,6.533095],[2.215387,3.747590,1.469885,4.857096,-6.544603,-9.986929,-2.585757,-5.041429,-0.161795,2.482336],[2.640090,3.897156,6.562878,4.371524,7.175515,-5.873992,-0.214986,7.595222,-1.030933,-7.747468],[-6.256492,2.389425,9.683270,6.541564,7.143024,-1.707653,-1.166066,-0.288640,-6.260523,-6.302300],[-1.356096,-6.370926,-6.752635,6.165478,-8.510378,9.563963,-3.454483,-2.430812,-8.977118,4.319940],[-3.087801,-3.931351,9.672385,-1.345904,7.109846,3.030406,4.238078,-5.350366,-3.895614,2.115578],[3.064200,0.732474,4.838472,9.317170,8.519239,3.738883,-5.696670,-9.714887,4.389839,2.336299]]], dtype = "float64")#candidate|12300|(11, 14, 10)|const|float64
bop_12301 = relay.subtract(call_12276.astype('float32'), relay.reshape(const_12300.astype('float32'), relay.shape_of(call_12276))) # shape=(11, 14, 10)
bop_12304 = relay.subtract(call_12277.astype('float32'), relay.reshape(const_12300.astype('float32'), relay.shape_of(call_12277))) # shape=(11, 14, 10)
output = bop_12301
output2 = bop_12304
func_12309 = relay.Function([], output)
mod['func_12309'] = func_12309
mod = relay.transform.InferType()(mod)
output = func_12309()
func_12310 = relay.Function([], output)
mutated_mod['func_12310'] = func_12310
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9968_call = mod.get_global_var('func_9968')
func_9970_call = mutated_mod.get_global_var('func_9970')
call_12392 = relay.TupleGetItem(func_9968_call(), 0)
call_12393 = relay.TupleGetItem(func_9970_call(), 0)
func_9936_call = mod.get_global_var('func_9936')
func_9938_call = mutated_mod.get_global_var('func_9938')
call_12411 = func_9936_call()
call_12412 = func_9936_call()
output = relay.Tuple([call_12392,call_12411,])
output2 = relay.Tuple([call_12393,call_12412,])
func_12415 = relay.Function([], output)
mod['func_12415'] = func_12415
mod = relay.transform.InferType()(mod)
output = func_12415()
func_12416 = relay.Function([], output)
mutated_mod['func_12416'] = func_12416
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6492_call = mod.get_global_var('func_6492')
func_6494_call = mutated_mod.get_global_var('func_6494')
call_12420 = func_6492_call()
call_12421 = func_6492_call()
func_10945_call = mod.get_global_var('func_10945')
func_10946_call = mutated_mod.get_global_var('func_10946')
call_12422 = relay.TupleGetItem(func_10945_call(), 1)
call_12423 = relay.TupleGetItem(func_10946_call(), 1)
output = relay.Tuple([call_12420,call_12422,])
output2 = relay.Tuple([call_12421,call_12423,])
func_12439 = relay.Function([], output)
mod['func_12439'] = func_12439
mod = relay.transform.InferType()(mod)
mutated_mod['func_12439'] = func_12439
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12439_call = mutated_mod.get_global_var('func_12439')
call_12440 = func_12439_call()
output = call_12440
func_12441 = relay.Function([], output)
mutated_mod['func_12441'] = func_12441
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9479_call = mod.get_global_var('func_9479')
func_9480_call = mutated_mod.get_global_var('func_9480')
call_12445 = func_9479_call()
call_12446 = func_9479_call()
func_9567_call = mod.get_global_var('func_9567')
func_9568_call = mutated_mod.get_global_var('func_9568')
call_12456 = relay.TupleGetItem(func_9567_call(), 1)
call_12457 = relay.TupleGetItem(func_9568_call(), 1)
func_9002_call = mod.get_global_var('func_9002')
func_9004_call = mutated_mod.get_global_var('func_9004')
call_12466 = func_9002_call()
call_12467 = func_9002_call()
output = relay.Tuple([call_12445,call_12456,call_12466,])
output2 = relay.Tuple([call_12446,call_12457,call_12467,])
func_12471 = relay.Function([], output)
mod['func_12471'] = func_12471
mod = relay.transform.InferType()(mod)
output = func_12471()
func_12472 = relay.Function([], output)
mutated_mod['func_12472'] = func_12472
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6793_call = mod.get_global_var('func_6793')
func_6794_call = mutated_mod.get_global_var('func_6794')
call_12483 = func_6793_call()
call_12484 = func_6793_call()
func_8967_call = mod.get_global_var('func_8967')
func_8968_call = mutated_mod.get_global_var('func_8968')
call_12488 = relay.TupleGetItem(func_8967_call(), 1)
call_12489 = relay.TupleGetItem(func_8968_call(), 1)
output = relay.Tuple([call_12483,call_12488,])
output2 = relay.Tuple([call_12484,call_12489,])
func_12506 = relay.Function([], output)
mod['func_12506'] = func_12506
mod = relay.transform.InferType()(mod)
mutated_mod['func_12506'] = func_12506
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12506_call = mutated_mod.get_global_var('func_12506')
call_12507 = func_12506_call()
output = call_12507
func_12508 = relay.Function([], output)
mutated_mod['func_12508'] = func_12508
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9537_call = mod.get_global_var('func_9537')
func_9539_call = mutated_mod.get_global_var('func_9539')
call_12535 = relay.TupleGetItem(func_9537_call(), 0)
call_12536 = relay.TupleGetItem(func_9539_call(), 0)
output = call_12535
output2 = call_12536
func_12577 = relay.Function([], output)
mod['func_12577'] = func_12577
mod = relay.transform.InferType()(mod)
output = func_12577()
func_12578 = relay.Function([], output)
mutated_mod['func_12578'] = func_12578
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8700_call = mod.get_global_var('func_8700')
func_8702_call = mutated_mod.get_global_var('func_8702')
call_12589 = relay.TupleGetItem(func_8700_call(), 0)
call_12590 = relay.TupleGetItem(func_8702_call(), 0)
output = call_12589
output2 = call_12590
func_12591 = relay.Function([], output)
mod['func_12591'] = func_12591
mod = relay.transform.InferType()(mod)
output = func_12591()
func_12592 = relay.Function([], output)
mutated_mod['func_12592'] = func_12592
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6913_call = mod.get_global_var('func_6913')
func_6915_call = mutated_mod.get_global_var('func_6915')
call_12670 = func_6913_call()
call_12671 = func_6913_call()
output = call_12670
output2 = call_12671
func_12683 = relay.Function([], output)
mod['func_12683'] = func_12683
mod = relay.transform.InferType()(mod)
output = func_12683()
func_12684 = relay.Function([], output)
mutated_mod['func_12684'] = func_12684
mutated_mod = relay.transform.InferType()(mutated_mod)
var_12719 = relay.var("var_12719", dtype = "bool", shape = (14, 5, 1))#candidate|12719|(14, 5, 1)|var|bool
var_12720 = relay.var("var_12720", dtype = "bool", shape = (14, 5, 11))#candidate|12720|(14, 5, 11)|var|bool
bop_12721 = relay.logical_and(var_12719.astype('bool'), var_12720.astype('bool')) # shape=(14, 5, 11)
uop_12728 = relay.asin(bop_12721.astype('float64')) # shape=(14, 5, 11)
uop_12757 = relay.tan(var_12720.astype('float64')) # shape=(14, 5, 11)
output = relay.Tuple([uop_12728,uop_12757,])
output2 = relay.Tuple([uop_12728,uop_12757,])
func_12761 = relay.Function([var_12719,var_12720,], output)
mod['func_12761'] = func_12761
mod = relay.transform.InferType()(mod)
var_12762 = relay.var("var_12762", dtype = "bool", shape = (14, 5, 1))#candidate|12762|(14, 5, 1)|var|bool
var_12763 = relay.var("var_12763", dtype = "bool", shape = (14, 5, 11))#candidate|12763|(14, 5, 11)|var|bool
output = func_12761(var_12762,var_12763,)
func_12764 = relay.Function([var_12762,var_12763,], output)
mutated_mod['func_12764'] = func_12764
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12439_call = mod.get_global_var('func_12439')
func_12441_call = mutated_mod.get_global_var('func_12441')
call_12790 = relay.TupleGetItem(func_12439_call(), 0)
call_12791 = relay.TupleGetItem(func_12441_call(), 0)
output = relay.Tuple([call_12790,])
output2 = relay.Tuple([call_12791,])
func_12797 = relay.Function([], output)
mod['func_12797'] = func_12797
mod = relay.transform.InferType()(mod)
mutated_mod['func_12797'] = func_12797
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12797_call = mutated_mod.get_global_var('func_12797')
call_12798 = func_12797_call()
output = call_12798
func_12799 = relay.Function([], output)
mutated_mod['func_12799'] = func_12799
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7060_call = mod.get_global_var('func_7060')
func_7062_call = mutated_mod.get_global_var('func_7062')
call_12847 = func_7060_call()
call_12848 = func_7060_call()
output = call_12847
output2 = call_12848
func_12885 = relay.Function([], output)
mod['func_12885'] = func_12885
mod = relay.transform.InferType()(mod)
output = func_12885()
func_12886 = relay.Function([], output)
mutated_mod['func_12886'] = func_12886
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12439_call = mod.get_global_var('func_12439')
func_12441_call = mutated_mod.get_global_var('func_12441')
call_12893 = relay.TupleGetItem(func_12439_call(), 0)
call_12894 = relay.TupleGetItem(func_12441_call(), 0)
output = call_12893
output2 = call_12894
func_12895 = relay.Function([], output)
mod['func_12895'] = func_12895
mod = relay.transform.InferType()(mod)
mutated_mod['func_12895'] = func_12895
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12895_call = mutated_mod.get_global_var('func_12895')
call_12896 = func_12895_call()
output = call_12896
func_12897 = relay.Function([], output)
mutated_mod['func_12897'] = func_12897
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6873_call = mod.get_global_var('func_6873')
func_6875_call = mutated_mod.get_global_var('func_6875')
call_12962 = relay.TupleGetItem(func_6873_call(), 0)
call_12963 = relay.TupleGetItem(func_6875_call(), 0)
func_4584_call = mod.get_global_var('func_4584')
func_4586_call = mutated_mod.get_global_var('func_4586')
var_12971 = relay.var("var_12971", dtype = "int32", shape = (1456,))#candidate|12971|(1456,)|var|int32
call_12970 = func_4584_call(relay.reshape(var_12971.astype('int32'), [14, 13, 8]))
call_12972 = func_4584_call(relay.reshape(var_12971.astype('int32'), [14, 13, 8]))
output = relay.Tuple([call_12962,call_12970,var_12971,])
output2 = relay.Tuple([call_12963,call_12972,var_12971,])
func_12975 = relay.Function([var_12971,], output)
mod['func_12975'] = func_12975
mod = relay.transform.InferType()(mod)
mutated_mod['func_12975'] = func_12975
mutated_mod = relay.transform.InferType()(mutated_mod)
var_12976 = relay.var("var_12976", dtype = "int32", shape = (1456,))#candidate|12976|(1456,)|var|int32
func_12975_call = mutated_mod.get_global_var('func_12975')
call_12977 = func_12975_call(var_12976)
output = call_12977
func_12978 = relay.Function([var_12976], output)
mutated_mod['func_12978'] = func_12978
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10945_call = mod.get_global_var('func_10945')
func_10946_call = mutated_mod.get_global_var('func_10946')
call_12990 = relay.TupleGetItem(func_10945_call(), 0)
call_12991 = relay.TupleGetItem(func_10946_call(), 0)
output = relay.Tuple([call_12990,])
output2 = relay.Tuple([call_12991,])
func_12998 = relay.Function([], output)
mod['func_12998'] = func_12998
mod = relay.transform.InferType()(mod)
output = func_12998()
func_12999 = relay.Function([], output)
mutated_mod['func_12999'] = func_12999
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10308_call = mod.get_global_var('func_10308')
func_10309_call = mutated_mod.get_global_var('func_10309')
call_13080 = func_10308_call()
call_13081 = func_10308_call()
output = call_13080
output2 = call_13081
func_13086 = relay.Function([], output)
mod['func_13086'] = func_13086
mod = relay.transform.InferType()(mod)
output = func_13086()
func_13087 = relay.Function([], output)
mutated_mod['func_13087'] = func_13087
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10074_call = mod.get_global_var('func_10074')
func_10075_call = mutated_mod.get_global_var('func_10075')
call_13100 = func_10074_call()
call_13101 = func_10074_call()
output = call_13100
output2 = call_13101
func_13110 = relay.Function([], output)
mod['func_13110'] = func_13110
mod = relay.transform.InferType()(mod)
mutated_mod['func_13110'] = func_13110
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13110_call = mutated_mod.get_global_var('func_13110')
call_13111 = func_13110_call()
output = call_13111
func_13112 = relay.Function([], output)
mutated_mod['func_13112'] = func_13112
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10399_call = mod.get_global_var('func_10399')
func_10401_call = mutated_mod.get_global_var('func_10401')
call_13184 = relay.TupleGetItem(func_10399_call(), 2)
call_13185 = relay.TupleGetItem(func_10401_call(), 2)
func_9537_call = mod.get_global_var('func_9537')
func_9539_call = mutated_mod.get_global_var('func_9539')
call_13190 = relay.TupleGetItem(func_9537_call(), 1)
call_13191 = relay.TupleGetItem(func_9539_call(), 1)
func_11398_call = mod.get_global_var('func_11398')
func_11400_call = mutated_mod.get_global_var('func_11400')
call_13199 = relay.TupleGetItem(func_11398_call(), 1)
call_13200 = relay.TupleGetItem(func_11400_call(), 1)
output = relay.Tuple([call_13184,call_13190,call_13199,])
output2 = relay.Tuple([call_13185,call_13191,call_13200,])
func_13228 = relay.Function([], output)
mod['func_13228'] = func_13228
mod = relay.transform.InferType()(mod)
mutated_mod['func_13228'] = func_13228
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13228_call = mutated_mod.get_global_var('func_13228')
call_13229 = func_13228_call()
output = call_13229
func_13230 = relay.Function([], output)
mutated_mod['func_13230'] = func_13230
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12885_call = mod.get_global_var('func_12885')
func_12886_call = mutated_mod.get_global_var('func_12886')
call_13270 = func_12885_call()
call_13271 = func_12885_call()
func_11548_call = mod.get_global_var('func_11548')
func_11550_call = mutated_mod.get_global_var('func_11550')
const_13293 = relay.const([[-1,1,-9,9,-6,10,-4,-2,9,-1,1,4,-8,3,4,-10,-8,-10,-8,5,-10,5,-7,-2,1,5,-7,-9,5,-10,1,8,8,8,-1,-9,-7,-4,-3,1,8,-5,5,3,-8,-3,-10,10,-10,-6,-1,-1,3,-3,10,10,1,6,-3,-8,-9,-2,1,-6],[2,4,-1,2,-8,8,-10,-7,-8,-7,-9,2,5,6,-7,8,6,-3,-7,-9,-1,-3,9,-3,3,6,6,-10,1,8,-8,-7,10,-3,6,-2,-3,9,-6,-7,-6,-1,-10,-3,6,-10,10,3,9,9,-10,-2,7,-4,-8,2,-3,-4,7,-3,1,-9,3,4]], dtype = "int8")#candidate|13293|(2, 64)|const|int8
call_13292 = relay.TupleGetItem(func_11548_call(relay.reshape(const_13293.astype('int8'), [128,])), 0)
call_13294 = relay.TupleGetItem(func_11550_call(relay.reshape(const_13293.astype('int8'), [128,])), 0)
var_13306 = relay.var("var_13306", dtype = "int8", shape = (2, 64))#candidate|13306|(2, 64)|var|int8
bop_13307 = relay.multiply(const_13293.astype('int64'), relay.reshape(var_13306.astype('int64'), relay.shape_of(const_13293))) # shape=(2, 64)
output = relay.Tuple([call_13270,call_13292,bop_13307,])
output2 = relay.Tuple([call_13271,call_13294,bop_13307,])
func_13316 = relay.Function([var_13306,], output)
mod['func_13316'] = func_13316
mod = relay.transform.InferType()(mod)
var_13317 = relay.var("var_13317", dtype = "int8", shape = (2, 64))#candidate|13317|(2, 64)|var|int8
output = func_13316(var_13317)
func_13318 = relay.Function([var_13317], output)
mutated_mod['func_13318'] = func_13318
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12415_call = mod.get_global_var('func_12415')
func_12416_call = mutated_mod.get_global_var('func_12416')
call_13333 = relay.TupleGetItem(func_12415_call(), 1)
call_13334 = relay.TupleGetItem(func_12416_call(), 1)
output = relay.Tuple([call_13333,])
output2 = relay.Tuple([call_13334,])
func_13351 = relay.Function([], output)
mod['func_13351'] = func_13351
mod = relay.transform.InferType()(mod)
output = func_13351()
func_13352 = relay.Function([], output)
mutated_mod['func_13352'] = func_13352
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7880_call = mod.get_global_var('func_7880')
func_7882_call = mutated_mod.get_global_var('func_7882')
call_13376 = relay.TupleGetItem(func_7880_call(), 0)
call_13377 = relay.TupleGetItem(func_7882_call(), 0)
output = relay.Tuple([call_13376,])
output2 = relay.Tuple([call_13377,])
func_13398 = relay.Function([], output)
mod['func_13398'] = func_13398
mod = relay.transform.InferType()(mod)
mutated_mod['func_13398'] = func_13398
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13398_call = mutated_mod.get_global_var('func_13398')
call_13399 = func_13398_call()
output = call_13399
func_13400 = relay.Function([], output)
mutated_mod['func_13400'] = func_13400
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6964_call = mod.get_global_var('func_6964')
func_6965_call = mutated_mod.get_global_var('func_6965')
call_13411 = func_6964_call()
call_13412 = func_6964_call()
output = relay.Tuple([call_13411,])
output2 = relay.Tuple([call_13412,])
func_13421 = relay.Function([], output)
mod['func_13421'] = func_13421
mod = relay.transform.InferType()(mod)
mutated_mod['func_13421'] = func_13421
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13421_call = mutated_mod.get_global_var('func_13421')
call_13422 = func_13421_call()
output = call_13422
func_13423 = relay.Function([], output)
mutated_mod['func_13423'] = func_13423
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12117_call = mod.get_global_var('func_12117')
func_12119_call = mutated_mod.get_global_var('func_12119')
call_13477 = relay.TupleGetItem(func_12117_call(), 1)
call_13478 = relay.TupleGetItem(func_12119_call(), 1)
output = call_13477
output2 = call_13478
func_13483 = relay.Function([], output)
mod['func_13483'] = func_13483
mod = relay.transform.InferType()(mod)
mutated_mod['func_13483'] = func_13483
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13483_call = mutated_mod.get_global_var('func_13483')
call_13484 = func_13483_call()
output = call_13484
func_13485 = relay.Function([], output)
mutated_mod['func_13485'] = func_13485
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7538_call = mod.get_global_var('func_7538')
func_7540_call = mutated_mod.get_global_var('func_7540')
call_13507 = relay.TupleGetItem(func_7538_call(), 1)
call_13508 = relay.TupleGetItem(func_7540_call(), 1)
func_12073_call = mod.get_global_var('func_12073')
func_12074_call = mutated_mod.get_global_var('func_12074')
call_13514 = relay.TupleGetItem(func_12073_call(), 0)
call_13515 = relay.TupleGetItem(func_12074_call(), 0)
output = relay.Tuple([call_13507,call_13514,])
output2 = relay.Tuple([call_13508,call_13515,])
func_13519 = relay.Function([], output)
mod['func_13519'] = func_13519
mod = relay.transform.InferType()(mod)
mutated_mod['func_13519'] = func_13519
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13519_call = mutated_mod.get_global_var('func_13519')
call_13520 = func_13519_call()
output = call_13520
func_13521 = relay.Function([], output)
mutated_mod['func_13521'] = func_13521
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10796_call = mod.get_global_var('func_10796')
func_10797_call = mutated_mod.get_global_var('func_10797')
call_13535 = relay.TupleGetItem(func_10796_call(), 0)
call_13536 = relay.TupleGetItem(func_10797_call(), 0)
output = call_13535
output2 = call_13536
func_13547 = relay.Function([], output)
mod['func_13547'] = func_13547
mod = relay.transform.InferType()(mod)
output = func_13547()
func_13548 = relay.Function([], output)
mutated_mod['func_13548'] = func_13548
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10453_call = mod.get_global_var('func_10453')
func_10454_call = mutated_mod.get_global_var('func_10454')
call_13549 = func_10453_call()
call_13550 = func_10453_call()
func_13316_call = mod.get_global_var('func_13316')
func_13318_call = mutated_mod.get_global_var('func_13318')
const_13552 = relay.const([2,10,9,-9,-9,3,-1,7,5,4,3,6,-2,8,-1,-7,-8,9,10,10,8,1,-8,-1,2,5,-3,-9,-3,4,-7,-4,-9,4,-1,-1,8,8,2,-7,5,4,-4,-2,7,8,6,-10,-7,4,-7,-6,-7,-10,-6,-5,-2,8,9,2,5,-1,6,-5,6,-10,6,-7,-2,4,-6,8,10,-4,5,9,10,2,1,-8,9,-1,3,10,7,-3,6,10,7,-7,2,2,-5,-7,-2,-5,-2,-7,-4,-10,4,-1,5,6,-7,-4,-8,4,-1,-10,-5,-5,1,2,3,-6,7,7,1,6,8,-1,-8,-10,6,-3,6,8], dtype = "int8")#candidate|13552|(128,)|const|int8
call_13551 = relay.TupleGetItem(func_13316_call(relay.reshape(const_13552.astype('int8'), [2, 64])), 0)
call_13553 = relay.TupleGetItem(func_13318_call(relay.reshape(const_13552.astype('int8'), [2, 64])), 0)
func_7491_call = mod.get_global_var('func_7491')
func_7492_call = mutated_mod.get_global_var('func_7492')
call_13608 = relay.TupleGetItem(func_7491_call(), 2)
call_13609 = relay.TupleGetItem(func_7492_call(), 2)
var_13613 = relay.var("var_13613", dtype = "bool", shape = (2112,))#candidate|13613|(2112,)|var|bool
bop_13614 = relay.bitwise_and(call_13608.astype('int64'), relay.reshape(var_13613.astype('int64'), relay.shape_of(call_13608))) # shape=(2112,)
bop_13617 = relay.bitwise_and(call_13609.astype('int64'), relay.reshape(var_13613.astype('int64'), relay.shape_of(call_13609))) # shape=(2112,)
func_1860_call = mod.get_global_var('func_1860')
func_1862_call = mutated_mod.get_global_var('func_1862')
var_13642 = relay.var("var_13642", dtype = "float32", shape = (16, 1))#candidate|13642|(16, 1)|var|float32
call_13641 = func_1860_call(relay.reshape(var_13642.astype('float32'), [2, 1, 8]))
call_13643 = func_1860_call(relay.reshape(var_13642.astype('float32'), [2, 1, 8]))
output = relay.Tuple([call_13549,call_13551,const_13552,bop_13614,call_13641,var_13642,])
output2 = relay.Tuple([call_13550,call_13553,const_13552,bop_13617,call_13643,var_13642,])
func_13644 = relay.Function([var_13613,var_13642,], output)
mod['func_13644'] = func_13644
mod = relay.transform.InferType()(mod)
var_13645 = relay.var("var_13645", dtype = "bool", shape = (2112,))#candidate|13645|(2112,)|var|bool
var_13646 = relay.var("var_13646", dtype = "float32", shape = (16, 1))#candidate|13646|(16, 1)|var|float32
output = func_13644(var_13645,var_13646,)
func_13647 = relay.Function([var_13645,var_13646,], output)
mutated_mod['func_13647'] = func_13647
mutated_mod = relay.transform.InferType()(mutated_mod)
var_13649 = relay.var("var_13649", dtype = "uint16", shape = (10, 1, 11))#candidate|13649|(10, 1, 11)|var|uint16
const_13650 = relay.const([[[-9,-7,-5,-10,-6,-10,6,-4,3,4,2],[7,10,2,8,-1,3,6,2,4,4,2],[5,5,-6,9,4,7,-5,9,1,2,5],[5,-3,7,4,-9,7,-10,-4,10,4,2],[-8,-5,-1,4,-5,5,-7,-5,-4,-1,-10],[-4,7,10,3,3,5,4,-4,-3,-7,-5],[3,-7,-6,-7,-7,-1,-7,10,-5,5,8],[5,8,-1,6,-1,-7,7,-5,10,-7,8]],[[1,8,-10,5,2,2,-10,5,8,-7,2],[-8,8,1,-6,1,-9,-5,-2,7,-2,4],[-1,-10,-4,-3,10,-5,9,4,-9,5,4],[6,-2,-9,-3,8,1,4,4,-4,-1,3],[-7,7,9,-3,-2,8,2,-10,-8,9,-6],[-5,-2,-5,9,3,2,-1,2,6,3,-9],[9,9,8,7,3,-4,-2,-6,-6,9,8],[1,-4,-5,-8,1,4,5,10,-5,7,-5]],[[-8,-1,1,4,-10,9,-1,2,-9,-9,4],[6,-7,4,10,-2,-2,3,-3,-1,2,-6],[4,-2,-10,7,-6,-6,4,6,1,2,-3],[7,10,6,9,4,-9,-8,9,4,10,8],[-2,-8,4,-8,-5,-10,4,8,9,9,-10],[10,-4,-7,-4,10,3,1,-10,-4,-6,1],[-2,5,10,-3,3,-4,-8,1,7,-8,-9],[-8,7,-3,8,-5,10,-4,-4,-5,-10,1]],[[-9,10,4,-6,6,-2,-8,8,-7,-8,10],[9,1,-10,10,-1,-6,5,-10,2,9,-10],[9,4,-8,-2,6,-4,-7,10,-10,8,-3],[-7,-6,-8,3,3,-6,7,-7,4,-2,10],[5,-9,-2,-10,-2,9,-5,2,-7,-1,1],[-6,-9,-2,1,2,-6,10,10,5,6,-9],[-3,1,7,2,2,-6,10,-1,2,6,6],[7,7,-7,8,-6,-8,-10,10,3,-1,10]],[[7,-10,-7,-8,-4,3,7,-8,8,7,-10],[-1,10,-2,-2,-10,-6,-1,-1,-9,6,-8],[-2,9,10,-5,2,3,-9,10,-7,-2,3],[5,-2,10,-4,10,-7,-5,-4,9,6,7],[9,9,-8,-9,2,-6,8,-2,-6,-10,3],[10,-8,5,-3,3,10,7,3,-10,10,1],[3,2,-8,-2,2,10,1,7,-8,5,2],[-5,-8,10,-4,-7,4,8,-6,3,-2,-9]],[[10,6,-6,-7,5,-3,-8,2,-4,1,-10],[10,-7,3,7,2,-8,7,-3,4,8,-10],[10,10,-3,-4,10,-1,8,-8,-8,4,3],[3,8,2,5,-4,-6,-1,-7,-5,8,6],[2,10,-6,-9,8,3,-9,3,10,9,4],[-6,2,8,9,-5,-9,2,-9,-4,-5,4],[5,6,-7,-1,4,1,-3,5,4,3,-4],[9,-10,-10,-4,-8,6,-6,8,3,7,9]],[[5,-1,5,2,-1,-3,-8,5,-1,-2,-7],[-7,6,-9,6,-4,-4,-1,1,8,-6,4],[-8,-5,1,4,-6,5,3,-6,1,-3,6],[-6,7,8,7,-5,-10,1,-10,9,8,-9],[-9,-1,6,7,-7,-9,-7,8,-7,-6,-5],[-8,2,2,-3,-10,-7,-3,8,-5,3,9],[-10,-1,-2,-4,3,-4,1,-6,7,7,8],[7,9,1,5,-1,9,-2,10,9,-1,-10]],[[-9,9,2,-9,7,6,-7,10,-7,9,-3],[-8,-10,-8,-10,-3,5,-4,-9,7,7,2],[10,-10,-2,-4,1,-10,1,-1,-6,-9,-8],[8,-3,1,-8,-6,4,-5,4,-3,-3,7],[9,-4,-4,-6,5,-2,-6,-10,8,3,3],[-8,9,-3,4,-6,-10,8,5,-8,9,-1],[-3,-1,9,2,-2,-1,2,5,6,9,-4],[-9,2,-9,7,7,-1,8,-10,5,3,-5]],[[2,10,-1,-3,7,-4,-9,-1,-5,6,-5],[-7,7,1,8,4,5,-9,3,5,-3,-1],[4,-1,-10,-4,-3,4,-4,9,-10,-3,7],[3,-3,-1,7,-1,6,9,-10,3,-7,5],[-9,-3,-7,3,-10,5,-5,2,-10,5,6],[4,-9,1,-1,7,-1,10,-9,-6,-9,4],[9,8,-10,7,-8,-4,-7,5,3,1,-4],[-6,2,-4,2,9,-6,5,1,-4,5,8]],[[-6,2,-6,-5,-2,3,-2,-8,-7,-10,-3],[2,6,-5,-5,3,-7,-3,5,-1,-1,-4],[-3,9,-7,-6,-3,6,-4,10,-3,5,7],[-1,7,3,8,1,8,-3,1,9,8,3],[6,5,8,9,5,-10,-4,10,-10,5,-3],[7,10,7,-1,1,-4,7,4,7,-8,6],[2,5,-9,2,-1,-7,6,8,-2,5,7],[10,-7,-5,-6,6,6,-1,-2,-6,-5,3]]], dtype = "uint16")#candidate|13650|(10, 8, 11)|const|uint16
bop_13651 = relay.subtract(var_13649.astype('uint16'), const_13650.astype('uint16')) # shape=(10, 8, 11)
output = bop_13651
output2 = bop_13651
func_13663 = relay.Function([var_13649,], output)
mod['func_13663'] = func_13663
mod = relay.transform.InferType()(mod)
var_13664 = relay.var("var_13664", dtype = "uint16", shape = (10, 1, 11))#candidate|13664|(10, 1, 11)|var|uint16
output = func_13663(var_13664)
func_13665 = relay.Function([var_13664], output)
mutated_mod['func_13665'] = func_13665
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12140_call = mod.get_global_var('func_12140')
func_12141_call = mutated_mod.get_global_var('func_12141')
call_13725 = func_12140_call()
call_13726 = func_12140_call()
output = call_13725
output2 = call_13726
func_13731 = relay.Function([], output)
mod['func_13731'] = func_13731
mod = relay.transform.InferType()(mod)
mutated_mod['func_13731'] = func_13731
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13731_call = mutated_mod.get_global_var('func_13731')
call_13732 = func_13731_call()
output = call_13732
func_13733 = relay.Function([], output)
mutated_mod['func_13733'] = func_13733
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10572_call = mod.get_global_var('func_10572')
func_10573_call = mutated_mod.get_global_var('func_10573')
call_13775 = relay.TupleGetItem(func_10572_call(), 0)
call_13776 = relay.TupleGetItem(func_10573_call(), 0)
output = relay.Tuple([call_13775,])
output2 = relay.Tuple([call_13776,])
func_13786 = relay.Function([], output)
mod['func_13786'] = func_13786
mod = relay.transform.InferType()(mod)
mutated_mod['func_13786'] = func_13786
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13786_call = mutated_mod.get_global_var('func_13786')
call_13787 = func_13786_call()
output = call_13787
func_13788 = relay.Function([], output)
mutated_mod['func_13788'] = func_13788
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13228_call = mod.get_global_var('func_13228')
func_13230_call = mutated_mod.get_global_var('func_13230')
call_13789 = relay.TupleGetItem(func_13228_call(), 1)
call_13790 = relay.TupleGetItem(func_13230_call(), 1)
func_13228_call = mod.get_global_var('func_13228')
func_13230_call = mutated_mod.get_global_var('func_13230')
call_13812 = relay.TupleGetItem(func_13228_call(), 1)
call_13813 = relay.TupleGetItem(func_13230_call(), 1)
output = relay.Tuple([call_13789,call_13812,])
output2 = relay.Tuple([call_13790,call_13813,])
func_13814 = relay.Function([], output)
mod['func_13814'] = func_13814
mod = relay.transform.InferType()(mod)
output = func_13814()
func_13815 = relay.Function([], output)
mutated_mod['func_13815'] = func_13815
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12471_call = mod.get_global_var('func_12471')
func_12472_call = mutated_mod.get_global_var('func_12472')
call_13926 = relay.TupleGetItem(func_12471_call(), 0)
call_13927 = relay.TupleGetItem(func_12472_call(), 0)
func_7714_call = mod.get_global_var('func_7714')
func_7716_call = mutated_mod.get_global_var('func_7716')
call_13933 = func_7714_call()
call_13934 = func_7714_call()
output = relay.Tuple([call_13926,call_13933,])
output2 = relay.Tuple([call_13927,call_13934,])
func_13989 = relay.Function([], output)
mod['func_13989'] = func_13989
mod = relay.transform.InferType()(mod)
mutated_mod['func_13989'] = func_13989
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13989_call = mutated_mod.get_global_var('func_13989')
call_13990 = func_13989_call()
output = call_13990
func_13991 = relay.Function([], output)
mutated_mod['func_13991'] = func_13991
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6913_call = mod.get_global_var('func_6913')
func_6915_call = mutated_mod.get_global_var('func_6915')
call_13992 = func_6913_call()
call_13993 = func_6913_call()
output = call_13992
output2 = call_13993
func_13994 = relay.Function([], output)
mod['func_13994'] = func_13994
mod = relay.transform.InferType()(mod)
output = func_13994()
func_13995 = relay.Function([], output)
mutated_mod['func_13995'] = func_13995
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11344_call = mod.get_global_var('func_11344')
func_11346_call = mutated_mod.get_global_var('func_11346')
call_14008 = relay.TupleGetItem(func_11344_call(), 0)
call_14009 = relay.TupleGetItem(func_11346_call(), 0)
func_9825_call = mod.get_global_var('func_9825')
func_9827_call = mutated_mod.get_global_var('func_9827')
const_14013 = relay.const([False,True,True,False,False,True,False,True,True,True,False,True,False,True,True,False,True,True,True,False,False,True,False,False,True,True,False,True,False,False,False,False,True,True,False,True,False,False,False,True,True,True,True,True,False,False,False,True,True,True,False,False,False,False,False,True,True,False,False,True,True,True,False,False,False,False,False,True,True,False,False,False,True,True,False,False,True,False,True,True,True,True,True,False,True,True,True,False,False,False,False,True,True,False,True,True,False,True,False,True,False,True,False,True,False,False,True,False,False,True,True,True,False,False,True,False,True,True,False,True,True,False,False,False,False,False,True,True,True,False,False,True,True,False,True,True,False,False,True,False,True,False,False,False,False,True,False,False,False,False,True,True,True,False,True,True,False,True,False,True,True,True,True,False,True,False,True,False,False,True,False,False,True,False,False,False,False,False,False,False,False,True,False,True,True,True,True,True,False,True,True,True,False,False,True,False,False,True,False,False,False,False,False,True,True,False,True,True,False,True,True,True,True,True,False,False,True,True,False,True,True,True,True,True,True,False,True,True,True,True,True,True,False,False,True,True,False,False,False,True,False,True,False,True,True,False,True,False,False,True,True,True,False,False,False,True,True,False,False,False,True,False,False,True,False,True,False,False,True,False,True,True,False,True,False,True,False,False,True,False,True,False,True,False,True,True,True,False,True,False,False,True,False,False,False,False,True,True,False,True,True,False,False,True,True,True,False,True,True,True,True,False,False,False,False,True,False,False,True,True,False,True,False,False,False,True,False,True,False,False,False,True,False,True,True,False,False,True,True,True,True,True,True,True,True,False,False,True,False,True,True,False,False,True,False,False,False,False,False,False,False,False,False,True,True,True,True,True,False,False,False,True,True,False,False,True,False,False,False,False,True,True,False,False,True,False,False,True,False,False,False,False,True,False,True,False,True,False,False,True,True,False,True,False,False,True,True,False,False,False,False,True,True,False,True,False,False,False,False,False,False,False,True,True,False,False,False,True,True,False,False,False,False,True,False,True,True,False,True,True,False,False,False,True,False,False,False,True,False,False,True,False,False,False,False,False,True,False,True,False,False,True,False,False,True,False,True,False,False,True,True,False,True,True,False,True,True,False,False,True,False,False,False,False,False,False,False,True,False,True,True,False,False,True,False,True,False,False,True,False,True,False,True,False,False,True,True,True,True,False,True,True,False,True,True,False,True,True,False,True,False,True,True,False,True,True,False,True,True,True,True,False,False,False,False,False,True,False,True,False,False,False,True,False,True,False,False,False,True,False,True,True,False,False,False,True,False,False,False,True,True,True,False,True,False,False,True,True,False,True,False,False,True,True,False,True,False,True,True,True,True,True,True,True,True,True,False,True,True,False,True,False,False,True,False,False,True,True,True,False,False,True,False,False,True,True,True,True,False,False,False,True,True,True,True,True,False,True,False,True,False,True,False,False,False,False,False,False,True,True,False,False,True,False,False,False,True,True,True,True,True,True,True,True,True,False,False,True,True,False,True,True,False,True,True,False,True,True,False,False,True,False,False,False,True,False,False,False,True,True,False,True,False,True,False,True,True,False,True,False,False,False,False,False,True,True,True,False,True,True,False,False,False,True,False,True,True,False,True,True,True,True,False,True,False,False,True,True,False,False,False,False,False,False,True,True,True,False,True,False,True,True,False,True,False,False,False,False,False,False,True,True,True,True,True,False,True,False,True,True,False,True,True,False,True,False,True,True,False,False,True,False,True,False,True,False,False,False,False,True,False,True,False,True,False,True,True,True,True,True,False,True,False,True,True,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,True,True,False,True,False,True,False,False,True,False,True,False,False,True,True,True,False,True,False,False,True,False,False,True,True,False,True,True,False,False,False,False,True,False,True,True,True,True,True,False,True,True,True,False,False,False,True,False,True,True,True,True,False,True,False,True,False,False,True,False,False,True,False,False,True,True,True,False,False,True,True,False,False,False,False,False,False,True,True,True,True,False,False,True,True,True,False,True,True,True,False,True,False,False,True,True,False,True,False,False,False,True,False,False,True,False,False,True,False,True,False,True,True,True,False,True,False,False,False,True,False,False,False,False,True,False,False,True,True,False,True,True,True,False,True,False,False,True,True,False,True,True,True,False,False,True,True,False,False,False,True,False,False,False,False,True,False,False,False,True,False,False,False,True,False,True,True,False,False,False,True,True,False,False,False,False,False,True,True,False,True,False,False,False,False,False,True,False,True,False,True,True,False,True,True,False,False,False,False,True,True,True,False,True,False,False,True,False,False,False,False,True,True,False,True,True,False,True,False,True,True,True,True,True,True,False,True,True,False,True,False,True,True,True,False,True,True,False,True,True,False,True,True,True,True,False,True,True,True,True,True,False,False,False,True,True,False,False,True,False,False,True,False,True,False,False,False,False,False,True,True,True,False,False,False,True,True,True,False,False,False,True,True,True,True,False,False,True,True,True,False,True,True,False,False,True,False,False,True,True,True,True,False,True,True,False,False,False,False,False,True,False,False,False,True,True,False,False,True,True,True,True,False,False,True,False,False,True,False,True,False,True,False,False,False,False,True,False,False,True,True,True,True,True,True,True,False,False,True,True,True,False,False,False,True,True,False,True,True,True,False,True,False,True,False,True,True,True,True,True,False,False,True,True,True,False,False,False,False,True,True,False,False,False,False,True,True,False,False,False,True,False,False,False,True,False,True,False,True,False,False,True,True,True,False,False,True,True,False,False,False,False,False,False,False,False,True,True,False,True,False,False,False,False,False,True,False,True,False,True,True,False,False,False,True,False,True,False,True,True,False,False,True,False,False,True,False,False,True,True,True,True,True,True,True,True,True,True,False,True,False,True,True,False,False,False,False,True,False,False,False,True,False,False,True,False,True,False,False,False,True,False,True,False,True,False,True,False,True,True,True,True,False,False,True,False,False,False,True,True,False,False,False,False,False,True,False,True,True,True,False,False,True,True,False,False,False,True,True,True,False,False,True,True,True,False,True,True,False,True,False,False,True,False,False,True,False,True,False,True,False,False,False,True,False,False,True,False,False,False,True,False,True,False,True,False,True,True,True,True,False,False,False,True,False,False,False,False,True,False,False,True,True,False,False,True,False,False,True,False,False,False,True,True,True,False,True,False,True,True,True,True,True,True,False,True,False,False,False,True,True,False,True,False,False,True,True,False,True,False,True,False,False,False,True,True,False,True,True,False,False,True,True,True,False,False,False,False,False,False,False,True,False,True,True,False,False,False,True,False,False,False,False,True,False,True,False,False,False,False,False,False,True,False,True,True,False,False,False,False,False,False,False,True,True,True,True,True,False,False,True,False,False,True,True,False,True,False,True,True,False,True,False,True,True,True,False,True,True,False,False,False,False,False,True,True,True,False,True,True,True,False,False,True,False,True,False,True,True,True,False,True,False,False,False,False,False,True,True,True,True,True,True,False,True,False,True,True,True,False,False,False,True,False,True,True,False,True,False,True,False,False,True,True,True,True,True,True,False,False,False,False,False,False,False,True,False,True,False,True,False,True,True,True,True,True,False,True,False,False,True,True,False,False,False,True,True,True,False,False,True,True,False,True,True,False,True,True,True,True,True,True,False,False,False,False,True,False,True,False,False,False,True,True,False,True,False,False,False,True,False,True,False,False,True,True,False,False,False,True,True,True,True,False,False,True,False,True,False,True,True,False,False,False,True,False,True,False,False,True,True,False,True,True,False,False,False,False,False,False,False,True,False,True,True,False,False,True,True,False,True,True,True,True,True,False,True,True,False,False,False,True,False,True,False,True,True,False,True,True,True,True,True,True,False,False,True,True,False,False,True,True,True,False,False,True,True,True,False,True,True,False,True,False,False,True,True,True,False,False,True,True,False,False,False,False,False,True,True,False,True,True,True,True,True,True,False,False,True,False,False,False,False,True,False,False,False,True,False,False,False,True,True,False,True,True,False,True,False,False,False,False,True,True,True,False,True,True,True,False,True,True,False,True,False,True,False,False,False,False,True,False,True,False,False,False,False,True,True,False,True,True,False,False,True,True,False,False,False,True,False,True,False,False,True,False,True,True,True,False,True,False,False,False,False,True,False,False,False,True,True,True,True,True,True,False,True,True,False,True,True,False,True,True,False,False,False,False,True,True,False,False,True,False,False,True,True,False,False,True,True,True,False,False,False,True,False,True,True,False,True,False,False,False,True,True,False,True,True,True,False,True,True,True,True,True,True,True,True,True,False,False,False,True,True,False,False,True,False,True,False,True,True,False,True,True,True,True,False,False,False,True,True,True,False,True,False,True,False,True,False,False,True,False,True,False,True,False,False,True,True,False,False,True,False,True,False,False,False,False,False,False,True,False,True,False,True,True,True,True,False,False,True,True,False,True,False,True,True,False,False,False,False,False,True,False,True,True,False,True,False,True,True,True,True,False,True,False,True,True,True,True,True,False,True,True,True,True,True,False,True,True,True,True,False,False,True,True,False,False,True,False,True,False,True,False,True,True,False,False,False,True,False,True,True,True,False,True,False,True,True,True,True,False,False,True,True,True,False,True,True,True,True,False,False,False,False,True,True,False,True,True,True,True,False,True,False,True,False,False,False,True,True,True,False,True,False,True,True,True,False,False,False,True,True,False,True,True,True,True,False,True,False,True,False,True,False,True,False,False,True,False,False,True,False,False,False,False,True,True,True,True,False,False,False,True,False,True,False,False,False,False,True,True,False,True,False,False,False,False,True,False,False,True,True,False,True,True,True,False,True,False,True,True,False,True,False,True,False,False,True,True,True,False,False,True,True,False], dtype = "bool")#candidate|14013|(2112,)|const|bool
call_14012 = relay.TupleGetItem(func_9825_call(relay.reshape(const_14013.astype('bool'), [2112,])), 1)
call_14014 = relay.TupleGetItem(func_9827_call(relay.reshape(const_14013.astype('bool'), [2112,])), 1)
func_12577_call = mod.get_global_var('func_12577')
func_12578_call = mutated_mod.get_global_var('func_12578')
call_14018 = func_12577_call()
call_14019 = func_12577_call()
output = relay.Tuple([call_14008,call_14012,const_14013,call_14018,])
output2 = relay.Tuple([call_14009,call_14014,const_14013,call_14019,])
func_14022 = relay.Function([], output)
mod['func_14022'] = func_14022
mod = relay.transform.InferType()(mod)
mutated_mod['func_14022'] = func_14022
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14022_call = mutated_mod.get_global_var('func_14022')
call_14023 = func_14022_call()
output = call_14023
func_14024 = relay.Function([], output)
mutated_mod['func_14024'] = func_14024
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10439_call = mod.get_global_var('func_10439')
func_10440_call = mutated_mod.get_global_var('func_10440')
call_14037 = func_10439_call()
call_14038 = func_10439_call()
output = call_14037
output2 = call_14038
func_14041 = relay.Function([], output)
mod['func_14041'] = func_14041
mod = relay.transform.InferType()(mod)
output = func_14041()
func_14042 = relay.Function([], output)
mutated_mod['func_14042'] = func_14042
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9176_call = mod.get_global_var('func_9176')
func_9178_call = mutated_mod.get_global_var('func_9178')
call_14051 = relay.TupleGetItem(func_9176_call(), 0)
call_14052 = relay.TupleGetItem(func_9178_call(), 0)
output = call_14051
output2 = call_14052
func_14113 = relay.Function([], output)
mod['func_14113'] = func_14113
mod = relay.transform.InferType()(mod)
mutated_mod['func_14113'] = func_14113
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14113_call = mutated_mod.get_global_var('func_14113')
call_14114 = func_14113_call()
output = call_14114
func_14115 = relay.Function([], output)
mutated_mod['func_14115'] = func_14115
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10796_call = mod.get_global_var('func_10796')
func_10797_call = mutated_mod.get_global_var('func_10797')
call_14123 = relay.TupleGetItem(func_10796_call(), 1)
call_14124 = relay.TupleGetItem(func_10797_call(), 1)
output = call_14123
output2 = call_14124
func_14128 = relay.Function([], output)
mod['func_14128'] = func_14128
mod = relay.transform.InferType()(mod)
mutated_mod['func_14128'] = func_14128
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14128_call = mutated_mod.get_global_var('func_14128')
call_14129 = func_14128_call()
output = call_14129
func_14130 = relay.Function([], output)
mutated_mod['func_14130'] = func_14130
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11053_call = mod.get_global_var('func_11053')
func_11055_call = mutated_mod.get_global_var('func_11055')
call_14156 = relay.TupleGetItem(func_11053_call(), 2)
call_14157 = relay.TupleGetItem(func_11055_call(), 2)
var_14164 = relay.var("var_14164", dtype = "uint16", shape = (1694, 14))#candidate|14164|(1694, 14)|var|uint16
bop_14165 = relay.power(call_14156.astype('float32'), var_14164.astype('float32')) # shape=(1694, 14)
bop_14168 = relay.power(call_14157.astype('float32'), var_14164.astype('float32')) # shape=(1694, 14)
var_14174 = relay.var("var_14174", dtype = "float32", shape = (1694, 14))#candidate|14174|(1694, 14)|var|float32
bop_14175 = relay.maximum(bop_14165.astype('uint64'), relay.reshape(var_14174.astype('uint64'), relay.shape_of(bop_14165))) # shape=(1694, 14)
bop_14178 = relay.maximum(bop_14168.astype('uint64'), relay.reshape(var_14174.astype('uint64'), relay.shape_of(bop_14168))) # shape=(1694, 14)
bop_14180 = relay.logical_and(bop_14175.astype('bool'), relay.reshape(var_14174.astype('bool'), relay.shape_of(bop_14175))) # shape=(1694, 14)
bop_14183 = relay.logical_and(bop_14178.astype('bool'), relay.reshape(var_14174.astype('bool'), relay.shape_of(bop_14178))) # shape=(1694, 14)
output = relay.Tuple([bop_14180,])
output2 = relay.Tuple([bop_14183,])
func_14204 = relay.Function([var_14164,var_14174,], output)
mod['func_14204'] = func_14204
mod = relay.transform.InferType()(mod)
mutated_mod['func_14204'] = func_14204
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14204_call = mutated_mod.get_global_var('func_14204')
var_14206 = relay.var("var_14206", dtype = "uint16", shape = (1694, 14))#candidate|14206|(1694, 14)|var|uint16
var_14207 = relay.var("var_14207", dtype = "float32", shape = (1694, 14))#candidate|14207|(1694, 14)|var|float32
call_14205 = func_14204_call(var_14206,var_14207,)
output = call_14205
func_14208 = relay.Function([var_14206,var_14207,], output)
mutated_mod['func_14208'] = func_14208
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12797_call = mod.get_global_var('func_12797')
func_12799_call = mutated_mod.get_global_var('func_12799')
call_14222 = relay.TupleGetItem(func_12797_call(), 0)
call_14223 = relay.TupleGetItem(func_12799_call(), 0)
func_10885_call = mod.get_global_var('func_10885')
func_10886_call = mutated_mod.get_global_var('func_10886')
call_14228 = relay.TupleGetItem(func_10885_call(), 0)
call_14229 = relay.TupleGetItem(func_10886_call(), 0)
output = relay.Tuple([call_14222,call_14228,])
output2 = relay.Tuple([call_14223,call_14229,])
func_14237 = relay.Function([], output)
mod['func_14237'] = func_14237
mod = relay.transform.InferType()(mod)
mutated_mod['func_14237'] = func_14237
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14237_call = mutated_mod.get_global_var('func_14237')
call_14238 = func_14237_call()
output = call_14238
func_14239 = relay.Function([], output)
mutated_mod['func_14239'] = func_14239
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7868_call = mod.get_global_var('func_7868')
func_7870_call = mutated_mod.get_global_var('func_7870')
call_14333 = func_7868_call()
call_14334 = func_7868_call()
func_14204_call = mod.get_global_var('func_14204')
func_14208_call = mutated_mod.get_global_var('func_14208')
const_14336 = relay.const([[1,6,-8,10,-7,-3,9,-4,5,7,-3,5,-9,-5,-8,3,-10,7,-1,10,-7,-2,-7,1,6,-1,-6,-8,-9,4,-3,9,6,-3,-3,7,-8,-6,-7,-8,4,-4,8,-5,-5,6,-6,5,-1,8,-3,-3,8,-5,8,-8,5,-3,5,9,9,-10,-10,-4,3,-6,1,-5,-1,-1,-6,-3,4,1,6,-9,-7,7,-2,-10,-6,-1,-8,-3,-9,-9,-7,5,8,9,9,-6,-7,-6,5,5,-4,8,7,4,10,-2,-8,8,-4,-10,7,9,-1,4,-3,-9,7,1,-3,-1,-8,9,1,-2,4,-8,-9,6,2,-8,-9,1,8,-2,-7,-1,-8,-3,-8,4,6,-5,-6,7,-1,10,3,7,-5,2,2,9,6,8,6,7,3,8,-5,7,9,-7,3,4,3,-10,-1,-6,10,10,8,-7,-1,2,10,-3,9,1,-2,-7,-3,9,-5,-1,-8,10,-10,7,-2,9,-8,-8,10,10,4,-6,-6,1,1,6,-4,-5,1,-10,-3,-4,-3,10,4,7,9,7,10,7,-1,-1,7,-1,-2,-3,2,-5,-2,10,9,3,3,-3,9,4,-3,5,3,-8,1,-9,9,-7,3,6,-5,9,-1,10,-2,-10],[-3,5,-4,-10,-4,-7,-5,3,-4,-9,2,-6,2,-4,4,9,10,-5,7,-9,-6,-4,-1,-10,-6,3,-9,-10,8,-5,-10,2,-10,-4,2,-8,2,-9,8,9,10,-1,-2,2,-7,-4,3,6,-3,-2,6,3,-1,2,-4,1,-2,3,-7,7,3,-10,-7,2,1,-5,2,-6,10,2,6,8,-8,-3,7,1,-1,-6,9,10,-10,8,3,-6,-1,-7,-2,8,-5,6,-1,1,8,-4,-5,-1,-1,8,-3,7,5,-3,-10,-10,2,-8,-3,-8,-6,1,7,8,-1,2,-3,9,4,6,5,-10,3,1,-6,-8,1,6,1,6,10,-7,-8,2,8,-5,-5,-1,2,4,-3,4,4,-4,4,9,9,-9,-2,-8,-3,5,-9,-6,-8,-2,-5,-7,-6,5,10,-4,-10,5,-5,4,5,6,6,6,4,-9,2,-9,-4,8,8,4,-6,2,1,9,-5,-1,-7,-9,4,-2,-1,-7,-7,2,9,-5,-4,-6,3,2,-8,-1,9,-8,5,1,2,2,3,5,9,-6,-7,9,-8,7,3,3,-7,4,2,9,-3,3,4,-9,8,-7,8,4,-8,-3,9,4,-6,8,-6,-2,-6,9,3,-5,3,-5,-2,8],[7,3,-7,2,7,-3,-4,4,-2,-2,-10,7,10,8,-10,-2,-10,-5,-1,-2,4,1,-2,8,9,10,-6,5,-8,8,1,-7,4,-8,8,5,-5,9,-3,-1,8,10,-6,-10,9,-2,-9,-1,-10,9,-9,9,-1,1,-7,6,2,1,-2,4,-10,-2,-5,3,-4,-5,-1,6,5,5,10,9,-9,1,1,3,-2,-2,9,-4,2,-5,4,-4,-1,-2,2,6,-10,-3,2,4,-4,-5,-6,8,-8,10,8,-2,-4,-1,-6,8,-6,8,-10,4,-1,-8,7,6,1,-1,9,-8,-8,9,-8,9,-1,-1,-1,4,-3,-10,8,-10,-1,8,4,3,6,5,1,7,-1,5,-5,-4,3,1,-10,-10,1,9,5,7,-5,5,-6,-10,-1,9,-5,-4,-6,10,7,-7,2,-6,-9,6,7,2,2,-10,-6,-8,-1,9,-7,-5,3,-5,-1,9,3,-6,7,-4,7,-3,-5,5,-5,-5,-7,9,4,4,4,-5,-9,9,-6,-8,-9,7,-3,-1,-9,3,7,-4,5,-4,3,7,-8,-9,-9,9,-9,-5,-1,1,3,3,-5,10,-7,10,-4,4,-1,-8,10,-2,6,-1,4,-6,-7,6,8,-3,-10,6,8,-8],[3,-3,7,-3,-3,-9,-8,5,-4,9,-8,-8,5,-4,6,-4,-10,-1,10,-10,-10,-1,2,6,-8,-9,-1,-5,-2,9,-1,-6,-10,9,-3,-5,8,3,-4,7,8,-8,-2,3,-10,-2,7,-3,5,7,1,-10,9,-2,-4,7,-4,9,6,1,-6,8,-1,8,-2,-3,-8,3,-8,-2,-3,-4,-4,4,7,-5,-8,-6,-1,-2,-1,8,-2,9,-6,-4,-2,6,3,3,5,5,-8,-2,-7,-3,-3,-10,-2,5,-1,-4,9,-6,-2,-4,-6,2,-2,-6,1,9,-10,7,7,-9,10,9,7,-4,4,-6,9,-6,-2,-1,-2,7,9,-6,-5,-7,2,6,3,8,10,-8,4,1,6,1,4,10,9,2,-10,-10,-6,2,8,9,-6,8,-10,-7,3,-4,3,2,9,9,4,-4,8,10,-7,-4,5,-2,1,3,5,-2,-1,-4,8,-2,3,-3,-3,6,3,1,-2,-4,2,10,9,6,4,-2,3,3,9,4,-8,-2,-10,8,7,8,3,7,-8,2,4,4,-8,-1,2,1,-8,2,7,2,6,-3,8,1,-4,-9,8,6,-10,-5,4,6,-10,-10,10,2,3,-5,7,8,8,10,1,-2,-2,-5],[4,10,10,2,3,-6,-1,-7,4,10,3,9,-5,-6,7,-7,5,-6,9,-4,2,-9,8,1,-3,7,-10,-1,5,-4,-9,5,6,10,9,-8,-4,6,-6,6,-6,5,-7,-1,-2,-7,3,6,5,-7,-9,-7,-3,-5,-8,8,5,-9,8,7,4,4,9,-1,7,9,4,-9,9,-5,6,-2,-7,-3,3,-8,7,-8,-3,9,6,5,5,6,9,-2,5,8,-5,6,5,6,-5,8,-3,7,6,9,8,-7,7,6,1,3,-6,-5,2,-3,-6,-4,-8,8,2,7,-3,1,-4,-1,2,3,2,1,9,-8,6,4,2,10,-9,8,-1,-1,5,-2,-5,-6,-2,8,2,-6,1,-2,4,-9,-9,7,3,5,-2,-8,1,-6,1,-4,-4,-1,4,6,-5,3,1,4,-9,-5,-7,2,4,-2,-1,-10,-1,-8,4,3,10,-5,-7,6,-9,1,-1,-5,8,-4,6,-4,4,-1,9,-10,-1,9,-4,-4,-7,1,7,-6,5,-5,-1,9,-2,-6,6,9,10,5,-4,-7,3,10,-5,-4,4,5,-10,-3,-7,-3,-4,10,10,-8,-4,7,2,-7,2,9,-3,-3,9,5,-4,8,-1,-10,4,7,-2,5],[-2,4,4,-1,-10,-1,-10,-4,5,10,10,6,9,-2,-8,6,-7,-5,4,1,-10,-2,7,5,-9,7,-7,3,-8,7,-10,-5,3,-2,-6,10,3,8,-7,-3,8,-6,-5,-10,-4,9,10,-4,6,2,7,9,4,-2,-10,9,-9,2,-6,6,-9,-5,-1,-6,5,8,-7,-3,-6,-4,-2,-6,-8,4,3,3,5,3,-8,-2,6,-4,10,-6,2,5,-10,4,1,1,8,-6,-3,10,7,-6,-3,-7,-10,1,10,-8,9,10,10,2,7,-2,6,-6,3,7,4,8,7,-6,7,1,5,-4,5,2,3,-4,5,3,2,3,5,8,3,1,7,4,3,7,-5,10,3,8,-6,4,-4,-3,-10,-1,6,-3,-3,-5,4,-4,10,-8,2,9,-8,3,1,10,-7,-4,-2,8,-3,-2,6,7,-2,9,2,9,4,-1,9,6,-2,-1,-9,-2,1,-3,-9,-2,-7,6,-2,7,-10,1,-10,7,1,-6,8,-5,1,-7,10,5,2,-7,6,-2,-4,8,-2,-6,5,-5,10,-2,-10,5,-8,-7,10,7,-8,6,2,6,9,8,3,-4,3,-6,-5,-3,1,-5,4,9,-3,-5,-9,10,4,9,-1,-2],[9,7,9,8,10,1,7,5,6,-6,3,-2,-4,-4,-6,-9,-4,-10,6,5,3,-7,7,-10,-4,-10,2,5,3,-1,6,3,-6,-3,2,6,5,6,7,-6,2,-1,-8,-10,-6,1,1,-1,10,9,3,5,-9,9,7,-1,1,-3,8,3,6,-5,-1,-6,-2,1,10,-3,-9,9,8,-4,1,10,-5,-3,-9,10,7,-1,10,-4,9,3,10,3,1,-6,7,4,-1,2,7,1,9,3,-3,-4,-4,8,9,3,9,4,7,9,-5,1,-5,8,-4,3,-9,10,4,-9,-9,2,-2,-5,4,-7,5,5,-10,-3,-3,2,3,-5,-9,-9,7,-8,10,7,7,7,4,1,-4,-10,1,8,3,-3,10,-9,-5,-7,10,1,2,1,-7,-1,9,7,-1,-5,10,5,2,-8,-4,-10,-3,-4,-8,-10,-7,7,10,7,-8,-8,-2,10,-10,9,-5,8,1,-10,5,3,1,-10,-3,-6,1,1,8,7,10,-10,8,-1,-10,-7,3,8,1,6,-5,9,6,-9,-3,-2,2,-8,-2,9,-1,6,8,7,2,-3,8,2,2,-10,-6,8,4,10,4,-9,-6,1,1,-3,-3,-9,-8,5,-10,7,-7,6],[10,1,-5,-10,-5,7,9,6,-8,-3,6,8,-4,4,9,-7,5,-4,-6,5,7,7,4,10,-10,6,-2,4,9,-1,7,9,4,4,10,-1,-1,-5,-4,5,-9,-10,7,-8,1,7,5,-9,1,-1,3,10,-10,9,1,8,8,10,3,6,-5,-3,10,3,7,2,6,6,-6,-2,2,4,9,7,-2,-9,5,9,-5,-7,-6,6,1,-8,8,4,1,2,-4,3,4,-4,5,6,-6,6,-2,-4,4,-1,-3,4,7,-5,7,-8,1,9,5,-7,8,5,-4,4,2,-2,-2,-10,-4,-9,-2,-1,-9,10,-8,5,10,6,8,4,5,6,4,-8,8,1,-6,-4,5,-7,2,-8,3,-8,6,-2,10,10,-1,-2,6,2,6,-7,1,-5,-7,5,7,-2,7,-3,1,3,-2,2,10,1,9,8,-1,2,6,-9,-3,7,4,-1,5,-6,8,-6,3,6,-5,-1,7,-6,3,5,8,-9,2,-7,1,6,3,-2,9,-8,2,3,-5,2,6,-7,1,-7,4,-2,7,-6,9,-7,-6,5,4,-7,6,-6,-1,9,9,-7,-1,-7,6,-1,3,-5,10,-7,5,3,7,8,-4,-10,-6,-3,-7,-7],[8,-9,-7,10,-4,2,-10,5,-6,-5,-1,-1,-3,5,-9,-2,2,5,-6,7,-1,1,5,1,8,-10,-1,5,-7,2,5,-2,7,-6,-2,5,3,-7,10,8,3,7,8,8,4,-3,5,-6,3,-5,5,10,-6,6,2,5,3,9,-4,9,6,7,-7,6,-2,-5,-3,-9,-2,6,-9,9,-3,-5,5,6,-6,-7,-3,3,5,6,-2,8,10,-10,-3,2,7,-4,9,-8,-1,8,-9,3,10,4,4,8,4,-2,-6,4,2,-8,5,8,2,-4,-8,6,6,-9,-10,4,-4,-2,3,-4,3,7,-9,-6,2,5,-8,-9,-9,-5,-5,4,9,10,3,8,5,3,-2,-6,-10,-6,1,3,4,-10,10,10,1,1,3,7,-5,-3,-1,3,1,-2,-5,-2,-4,1,8,1,-3,-3,-2,-6,5,5,-8,7,-8,-10,3,-5,6,-1,9,-4,-4,9,-1,4,4,-2,-8,2,8,-2,-5,10,-2,6,10,-2,-10,2,-7,5,-6,4,6,1,-7,8,9,-5,-6,-10,2,-3,-4,4,-1,-3,-8,2,-2,-9,-7,2,3,-5,-10,-7,7,-7,-5,4,-1,-7,-1,-2,-4,-3,10,-7,5,-3,-6,-9],[10,-6,6,3,7,8,-10,3,3,-5,1,7,-3,-1,1,-4,8,8,-1,3,2,6,-2,-6,-4,8,-2,-1,5,5,-6,9,-10,7,-7,-1,-10,10,5,6,8,7,1,4,2,4,-10,-9,7,2,-6,4,10,-9,2,8,-3,10,3,-2,5,2,-6,-6,8,-8,10,4,7,-9,-3,9,-2,-10,6,9,-5,-7,-3,-5,-2,9,4,-6,-9,2,-1,-7,-1,-7,8,-8,-8,-5,9,-4,-4,7,-6,-1,-7,8,3,3,2,-10,-8,5,-5,-7,-2,-7,3,4,-6,-6,-5,1,10,1,5,-4,10,-7,2,9,-4,-2,-10,-8,-1,-9,1,-6,5,-4,-9,-1,10,1,-1,-9,9,-4,8,-7,-8,-7,8,3,1,2,-6,8,-5,1,9,3,-9,-9,10,-8,-4,-9,-10,-4,10,2,2,-5,7,3,3,-8,-2,1,-4,-10,6,1,-4,9,-2,1,9,1,9,5,-9,-4,1,2,-6,6,-4,10,-3,-1,9,8,-5,7,-2,-5,7,-1,5,-6,8,5,-8,-7,3,5,-9,2,-4,5,1,-9,9,7,-5,-7,2,2,-6,-2,-8,-2,1,-8,-3,3,5,2,-1,-10,-9,-9,10,4],[2,-6,2,5,10,-8,-8,-8,-2,7,-9,-10,-7,-1,10,-2,1,1,3,-9,-9,9,8,10,-6,-3,-5,3,-2,8,2,-4,-9,-8,-9,7,-6,5,4,5,-2,4,3,-3,6,7,-3,-2,-6,-5,9,-4,10,8,5,-3,2,-8,7,-10,-3,10,7,-6,-2,9,5,-6,-3,7,6,6,-7,2,8,-8,10,6,-2,2,5,5,5,5,6,7,-1,-1,-9,-6,-7,-7,2,4,-6,-8,-8,-1,6,10,-7,5,1,-10,-1,7,-1,-4,-6,7,-5,-2,-9,5,-10,-9,-3,9,-2,-4,5,2,-6,9,5,3,-10,-2,-10,6,5,9,2,3,6,9,-1,-7,7,8,-3,-1,-5,-4,1,7,5,-5,-3,-1,8,-2,10,5,-7,-7,-3,5,-1,-5,7,10,7,1,6,10,-1,-4,-2,-6,1,1,-10,-1,3,5,7,6,-1,-5,6,-4,8,5,8,-10,5,-2,-8,-7,-1,3,-8,-6,-3,-7,-8,5,8,5,3,4,9,-2,2,-7,2,3,-8,-8,-9,9,5,-3,-8,-8,8,-7,-1,-1,10,8,-8,3,-1,7,7,7,-4,6,1,-2,-7,5,10,3,-5,-6,-3,1,2,-3],[-7,-3,-3,2,-5,4,-3,-2,-6,-7,-7,4,-3,-3,4,-6,-8,-4,7,8,10,6,10,10,-4,-7,-9,-10,-9,-7,-10,-3,-1,-1,5,-10,3,10,-3,-1,9,-7,-10,-1,1,1,-1,10,-3,10,-4,5,-6,1,7,-6,2,5,10,1,5,3,-10,8,5,1,8,-7,1,4,1,-6,-1,7,8,3,3,9,-8,-7,3,-4,-4,-7,-10,4,-1,6,-1,5,2,3,3,-9,7,6,3,-2,1,-3,10,-4,-8,-3,5,8,-6,-5,1,2,9,9,-7,7,2,-1,-9,-1,7,-6,4,2,-5,8,10,-5,7,-8,-8,-4,-7,1,2,-3,-10,3,-4,-3,-1,-6,-1,9,6,-6,-6,-3,7,-1,9,-10,-2,2,-8,-5,-6,-2,-2,6,-10,-2,-5,9,10,1,-3,-10,-3,-3,7,-10,10,9,2,-2,10,-9,9,-4,-10,-2,-5,-2,-5,7,-4,3,8,-8,9,-1,3,1,9,-3,-2,2,7,6,-8,4,-2,5,-10,10,-2,8,10,9,7,-8,9,8,3,-10,1,-2,4,4,-2,-3,5,2,-1,5,-5,8,-3,1,-2,-9,-6,7,2,-4,-6,-1,-8,-6,-5,8,-6,-3],[-5,-6,-7,2,-8,5,-10,4,-6,7,-1,-5,-4,6,1,10,8,-5,-3,-8,7,2,-4,3,5,-6,-3,-3,-5,-8,2,4,-5,3,-7,-2,-6,-2,-1,2,5,2,-10,4,4,4,9,6,-7,6,1,8,2,-10,3,1,-10,5,-8,7,-10,-9,-9,6,3,-1,10,2,9,9,3,-1,2,5,4,3,-5,2,-7,-1,10,3,-3,-6,-8,-6,4,6,-3,8,-2,-3,3,-10,-4,9,7,8,8,4,-6,6,10,-7,-2,-2,6,-1,1,-1,4,-2,3,-3,-1,-8,-7,-8,6,-2,10,3,9,7,7,8,-10,-4,-10,6,6,-10,-6,-2,6,1,7,-2,-9,-8,-6,10,7,-9,-3,-2,-8,-3,-3,-9,8,4,5,2,4,-10,6,-8,-6,-4,5,9,8,-10,-7,-9,8,-10,9,6,-2,8,6,5,-7,10,-4,-5,-1,3,-3,-2,-6,-5,6,10,8,8,-6,-6,3,-4,5,7,-4,3,-3,-8,9,5,5,-3,-5,-8,5,3,10,-3,7,-2,-10,-8,-1,-3,-2,-6,-2,-1,-10,-8,-5,-3,10,-1,-7,8,9,2,4,10,2,2,-5,-2,4,-1,1,-3,1,-8,8,-6],[3,6,-1,-3,4,-6,-10,5,-8,-2,-10,2,2,8,7,6,-1,-7,-1,-5,6,4,-10,2,5,9,-3,-7,-10,-3,-10,-6,3,1,-6,9,-10,9,-1,-9,7,2,-8,4,-5,-4,-8,-3,-6,5,3,-3,8,-2,-5,7,-9,-3,-9,3,-6,6,9,-4,-6,-6,-4,1,-3,3,3,3,1,9,4,4,10,1,1,-4,-6,-7,9,4,-2,3,9,7,1,1,-7,3,-9,7,-2,1,1,-8,-6,4,9,3,-3,-1,-6,10,-9,3,9,-2,-2,9,-8,4,9,-4,-5,-10,7,3,-4,-1,7,-3,-5,-9,7,-8,5,1,-2,-4,-9,-7,6,4,-4,4,-8,-2,-3,9,9,5,1,-9,10,-2,-10,7,-1,-5,-5,-8,8,-7,-1,1,4,-3,1,-2,5,-1,-4,-10,-9,-10,6,9,-8,-4,-1,-8,-2,-3,-2,5,-10,-4,-5,7,-1,-10,5,-10,-6,-3,-9,5,3,-4,5,-4,-6,-9,-5,6,-5,3,-8,4,-5,-2,-7,8,4,-5,-3,-6,-9,1,3,-10,-6,10,-3,-5,-9,-7,-3,-4,-8,8,8,-2,10,1,-3,-4,3,2,-8,8,-5,4,1,4,9,-3,-7,3],[2,-5,-6,-3,-2,-7,-3,8,2,-5,1,2,-3,-6,2,2,-3,9,5,-8,-9,9,-2,10,-8,4,-4,9,3,-10,3,1,6,-7,3,9,-2,6,5,5,10,-3,10,-4,7,10,-5,-10,-2,-3,4,-9,-10,10,2,9,7,-10,7,-9,-7,6,9,-4,-3,-8,-3,-3,3,-8,-7,8,-2,10,-2,4,6,-3,6,-8,6,-3,-2,-2,10,-9,-1,-10,3,4,8,5,8,3,-7,10,-6,2,1,-10,-8,-7,-5,-5,8,-6,-7,-2,-10,8,5,-1,-3,8,9,-7,8,9,5,-2,3,-1,10,7,10,5,5,6,-9,4,-2,-6,-8,-4,10,6,-5,-6,-2,-4,8,8,3,1,-6,-1,-9,1,-3,8,2,-7,-3,-3,-7,9,-6,9,1,-1,-9,9,1,-3,6,8,-7,6,-9,9,8,3,7,3,-4,-6,9,2,5,4,9,9,6,-8,-6,3,4,-8,-8,8,-7,8,10,-6,3,6,10,8,3,-3,4,3,-3,-1,-3,-4,3,-4,10,-8,8,7,-1,5,4,3,5,-5,8,-9,5,9,5,-3,-3,-10,-6,10,3,-9,5,-4,-7,-1,5,6,-5,-7,10,7,-2,-6],[-5,6,-4,-6,7,1,9,1,-2,-3,3,9,-2,5,-5,-2,7,-2,-3,10,-10,-5,3,-4,-2,3,-9,-7,1,6,-4,10,-6,-2,3,-8,3,2,9,10,-3,9,7,6,9,-8,2,-6,-10,-9,10,-4,3,6,1,5,1,7,-1,10,5,-5,-3,7,-9,6,4,-10,-5,-8,6,-2,7,-7,-2,-10,-2,-6,-4,-10,-9,-2,-6,9,1,-10,1,4,-3,8,-7,-6,3,-7,7,2,4,1,6,-3,-7,4,7,10,10,-7,8,9,5,8,1,-10,-2,5,8,7,-3,7,-10,1,-7,-10,-2,-4,-4,1,-2,10,-9,-4,-7,6,1,-1,10,-4,10,2,2,1,10,-1,2,-6,10,-9,2,-6,-9,-5,-9,-8,2,3,7,10,-7,-8,4,-9,6,1,3,1,4,-3,-5,-4,-2,-3,-2,-4,3,9,8,6,-7,-3,6,-4,-2,-3,-9,-5,5,-8,10,7,4,5,-3,-9,7,3,-6,4,-4,-6,-4,-4,9,-6,-3,-2,-9,2,-7,-4,-1,-6,6,6,6,4,2,-1,-9,-10,9,1,1,2,4,-2,5,-3,-9,10,10,-7,10,-3,-6,3,-7,5,-8,5,5,7,5,-8],[1,-10,-1,-3,-5,-2,-1,8,1,-5,-2,-1,8,-6,1,5,-3,-3,2,-7,-4,9,8,-5,-3,-8,-1,-10,8,-1,-10,-1,3,-9,-9,3,-7,-1,2,-2,6,-9,-10,7,-5,-8,-7,9,-2,5,5,5,4,7,-1,2,10,4,10,-9,-10,-3,-6,6,-1,9,3,-9,1,-3,-8,10,6,-9,7,-3,-3,-5,1,6,4,-9,1,-4,-6,5,-5,2,-10,8,-9,4,9,10,1,-1,1,-4,8,5,8,-7,-6,2,2,-3,5,2,9,6,-9,-6,9,-3,9,-2,-7,-8,10,8,4,-4,9,6,9,9,-1,8,-5,8,8,-9,-8,7,10,1,-7,4,-10,-5,2,-9,-6,-4,8,5,3,3,2,1,-5,6,9,7,10,-10,-3,5,6,2,-3,-1,4,10,-4,-10,7,-1,5,8,8,-8,-9,-4,-4,10,-5,6,5,-7,-8,7,2,4,4,3,-9,6,-3,2,9,7,-3,5,-10,6,-7,5,-1,-7,10,10,10,-7,6,-2,-1,9,3,-1,-6,5,10,-1,1,-7,-7,-10,2,-9,9,5,10,4,-10,10,-2,7,5,4,-7,6,-7,-10,6,-9,-1,-4,10,6,-5,-4],[-1,8,1,3,2,-2,8,9,-1,6,3,-5,-10,-3,-9,-1,-9,6,2,2,1,-4,-7,-10,1,10,-7,-9,6,-1,10,-5,10,3,-3,5,-8,-10,2,-3,7,9,8,3,3,-9,6,3,5,8,-2,1,-4,7,4,-10,-3,7,8,-5,5,-3,-6,-7,-4,-1,9,-8,-5,-10,-7,2,-9,1,-10,-8,10,6,-10,9,7,2,-1,1,-7,7,-1,-6,-9,-8,3,3,-7,-1,1,1,-9,-6,-7,-10,-9,-10,9,1,-1,6,4,1,-10,8,-2,9,-6,-6,3,-7,7,3,1,4,4,10,-1,1,3,3,10,1,-9,9,4,-2,-3,-7,-10,8,2,4,-7,7,4,-7,1,2,-4,-2,9,1,1,-4,-10,-7,-10,-6,-5,9,2,-4,4,3,-9,10,10,-7,1,4,-6,4,3,3,10,5,-9,-4,-7,5,-3,1,6,6,9,-1,-2,-1,2,3,9,3,-9,1,8,-1,10,-6,-9,-6,-2,-5,9,-1,3,4,-4,-10,-5,-10,-8,4,2,-6,10,-1,-8,-9,6,9,-6,1,-9,-4,1,-5,-6,7,-7,-10,5,-3,10,2,-4,5,-2,-9,-5,-5,-8,5,9,1,-3,7],[4,10,2,10,-3,-5,1,-7,-8,5,3,9,10,-2,-2,-2,8,2,4,-5,9,3,7,-8,-2,-2,-1,-9,-4,-7,-9,-5,-10,9,1,2,-6,-1,3,-8,2,-10,-3,-7,1,3,10,-6,-5,6,-9,-5,3,9,-7,1,-9,2,1,8,3,1,-1,6,4,-1,10,9,4,-9,9,10,-4,-1,-4,-6,-2,10,6,9,-6,2,-10,1,-2,-5,-4,-8,-9,-3,8,10,6,5,-6,1,-7,-9,-5,1,3,-6,-2,5,-3,-6,8,1,8,6,-10,-5,10,-4,-6,-2,-10,8,-3,5,1,-7,7,-3,-5,8,-5,-4,7,-10,2,2,10,-6,-4,1,2,6,-9,6,-9,-1,5,1,-5,5,-3,-9,-10,8,-6,1,8,-9,8,10,8,-4,-9,7,6,-1,-10,3,-7,-3,-1,-1,2,5,3,-9,-1,6,-10,3,-4,6,-7,3,2,-7,10,10,-5,-2,-2,-9,-6,2,7,-1,-4,-4,-7,-4,-3,-2,6,5,-8,-2,-9,-3,6,-10,-3,-4,9,-7,-5,7,-2,2,-10,-3,-5,-9,6,9,9,4,10,10,-8,-8,-10,2,2,3,-1,10,-9,-10,1,6,-9,-2,10,10,9,-2],[3,-2,-10,-6,-9,-6,-3,3,8,-6,10,9,9,10,9,8,8,4,-7,8,5,4,2,4,7,-10,7,8,9,6,10,8,8,-5,-2,-10,-8,-7,-4,-2,-2,-7,-2,-6,3,-8,10,4,-2,10,3,-3,6,1,2,10,-6,2,2,-10,2,1,-8,7,-3,3,10,-6,5,-6,-3,-2,3,-6,4,1,5,-7,4,-10,2,2,-7,-8,-6,-1,1,7,-9,-9,10,-8,-2,8,8,3,-1,-4,1,-3,8,-5,9,-3,4,1,3,-9,-4,-1,4,6,8,4,-4,8,4,1,5,2,-7,5,2,-5,10,-3,-9,-10,9,-6,-4,4,-8,-9,-10,-4,4,5,3,6,-5,10,6,-8,-3,-7,-1,-2,8,3,4,5,9,6,9,7,-1,-7,-4,-1,1,5,2,2,1,-8,-3,5,-2,-3,-2,-6,-7,9,7,-10,1,10,-3,3,-8,-10,-3,-4,-7,7,-9,-4,3,-8,5,-9,-1,10,-1,-9,6,-9,-8,4,-10,-7,-4,-5,-6,9,9,10,7,6,-4,7,6,-9,-9,-10,-5,-9,-9,10,-7,1,-7,8,2,1,8,-6,-4,-9,-7,3,7,3,-8,5,1,1,-6,1,-2,-6],[2,5,4,-10,-4,-4,-7,-8,1,-10,1,10,10,-7,-6,1,2,8,9,-10,-3,3,-3,-4,-6,9,-6,5,2,8,-5,-8,6,-7,-3,7,3,-7,1,-3,8,6,-10,-1,5,2,10,-8,-5,-1,-4,-6,8,-3,5,-10,7,6,-5,10,8,-9,-2,-7,6,7,8,-4,5,9,-5,-10,3,10,4,-9,3,-3,8,2,-1,3,2,-8,-7,4,8,-4,3,10,-5,-10,-10,3,-4,-2,-6,4,4,-3,-1,-3,-5,9,-3,3,-1,-6,7,-8,6,8,7,-10,-6,-2,-3,5,3,4,-4,-6,4,-5,-1,4,5,9,-3,-2,3,-5,2,2,5,-3,-7,-5,9,3,-3,7,-10,1,-7,-2,9,-5,-9,-8,7,5,-10,-6,-8,-1,8,10,-8,1,4,-4,-3,7,9,6,7,-9,-10,8,-4,3,-10,-9,-4,2,4,-4,-8,-6,-4,-3,4,10,9,-3,10,4,-9,-8,1,-2,7,-1,6,-2,-2,3,-8,-1,4,9,-10,-4,6,-3,-2,-6,-10,6,6,8,4,5,6,-1,10,4,5,-10,-8,1,-9,-10,4,4,-1,-2,-4,9,3,-2,-9,6,4,4,10,-3,2,7,-7,-8],[3,-5,6,-9,-3,-5,-7,4,-8,5,-6,6,-10,-6,4,-5,-3,-8,-4,2,-9,-10,10,10,-4,8,1,-8,7,-6,-7,1,-3,2,7,-5,-3,-3,-8,-10,5,-2,4,-7,-3,3,6,-9,5,6,-5,8,-7,10,-3,-8,2,7,2,-6,-9,-5,7,3,7,-3,4,10,-4,7,-5,-8,-6,3,-2,-3,10,-7,-1,-6,-2,1,-2,-7,5,4,10,-9,10,6,-10,3,6,4,10,8,-1,-10,-1,-9,-3,-10,-8,9,10,-10,-4,-10,-4,-10,6,-8,6,-4,-7,7,8,2,6,-4,9,-9,-8,3,-5,6,-8,2,2,-3,9,-8,-7,2,4,-2,-9,-3,-1,-9,-9,2,9,3,10,-2,-6,-7,-3,-6,5,7,8,3,8,6,6,7,1,-9,-8,1,1,6,-7,10,-10,-9,7,-8,5,4,-1,9,1,-3,6,4,4,-3,4,-4,-10,-5,-7,4,8,-5,9,10,-9,10,9,-7,3,3,-3,4,-9,2,3,-8,-4,-7,-7,4,2,-3,7,3,2,-9,-2,-8,-3,1,-6,6,-3,2,2,6,-9,6,-1,-6,-4,7,10,-10,-6,1,-9,-4,2,2,4,-9,-9,9,-3,-4],[-1,-6,6,6,-7,8,5,-10,-7,-2,-10,-4,-5,10,9,6,3,-3,-8,-3,-9,2,-2,-1,-5,-2,4,-4,10,-7,-8,-10,-3,-1,5,5,-4,6,-1,7,-9,-1,-6,10,-10,6,9,8,1,4,-3,8,8,-5,10,-5,2,2,2,5,-2,-8,9,3,-5,-5,-8,8,-6,4,-5,-9,-6,7,4,10,7,6,-5,-5,8,9,-3,-3,-9,9,8,3,10,2,3,1,-9,3,8,4,-10,-1,1,-5,10,6,-3,-2,8,6,-5,9,-2,7,4,5,8,8,1,-2,9,-1,-7,-5,8,-6,6,6,-2,9,8,-2,3,10,5,-5,9,7,10,3,-3,10,4,1,-2,-2,8,1,-5,-3,2,-5,5,-9,5,-2,10,-2,-1,10,5,6,-7,-3,5,-3,6,-7,3,6,9,8,2,-2,3,8,8,-9,10,-9,8,1,-1,4,6,4,8,5,-2,-6,-10,2,6,-5,3,-1,-6,-6,-3,-3,-10,6,-6,1,7,2,-10,7,6,-4,8,2,10,-2,-8,-3,9,8,10,5,5,-9,4,2,-10,10,2,1,-2,6,-8,-8,-10,-2,4,-10,-7,-3,-6,2,1,-3,6,6,9,-5],[1,-1,10,3,-3,4,-3,2,3,-5,-5,-1,4,-8,9,9,-1,-3,6,-6,9,10,10,-1,-5,9,-7,-5,-10,-6,-8,-1,5,-9,-1,1,-6,2,-4,-1,9,1,2,7,-8,-1,7,-5,-7,5,-9,8,1,3,4,4,-8,1,2,-2,-2,7,6,-4,-6,10,7,-5,9,4,4,9,5,-1,-8,7,5,-9,-8,5,2,-3,5,-9,-8,10,-1,5,8,2,9,6,-5,-7,6,1,9,-10,2,1,-2,-1,1,-10,-1,5,-4,-6,-3,-4,-8,10,-8,2,-8,9,3,5,-7,-10,-7,-10,5,-10,2,-9,6,6,8,6,-10,-7,7,6,5,4,-3,3,-2,-8,4,5,-7,-7,-10,10,-6,-2,9,8,-7,7,7,-8,2,5,3,7,-2,4,7,-1,-3,7,2,7,8,-9,-4,7,-3,4,-4,-6,7,-8,6,-7,-2,-2,-2,4,-2,8,-10,-4,7,10,8,6,8,10,-3,4,3,-10,2,6,6,2,7,10,-1,-5,-6,4,7,7,-1,7,-4,9,-2,-2,9,6,-7,1,-5,-6,-9,5,4,-8,-5,-1,2,7,-6,-4,-2,-10,5,8,10,-2,-6,-7,-1,7,9,-4],[-7,9,-1,-8,-3,3,-2,9,5,-2,-8,-1,-3,-4,-6,7,9,-7,-9,5,-3,-2,-7,6,-2,-5,7,-1,6,-5,4,-6,-8,-5,-7,-8,9,5,1,-10,-10,-5,-2,-5,2,1,-2,10,9,8,8,-6,8,-2,3,-1,-8,-7,-3,-7,4,2,4,-7,-1,-8,-3,-5,6,-9,3,1,8,-10,-10,-7,-4,10,3,2,4,-3,6,5,9,-10,-4,4,9,-3,2,1,9,5,-1,-5,6,-10,-8,-6,-1,-9,-9,6,-6,5,3,5,1,3,8,-7,-8,9,-3,2,1,-8,-4,-6,-7,10,1,1,7,4,-6,8,-7,7,-1,-6,10,-3,-10,7,-2,-9,-2,4,6,3,-8,-3,9,7,-3,-2,-6,-7,6,6,-1,-2,5,10,-6,3,-5,9,10,-4,8,6,-3,-2,9,6,5,2,-5,-3,-7,-5,7,-8,1,-10,2,-4,-10,-3,-4,-8,-8,-1,5,4,-2,-6,-2,-6,8,1,-1,-4,-9,10,5,-6,-8,-6,1,-5,-8,4,5,2,-5,3,5,-6,4,2,2,4,5,1,1,-10,6,8,3,5,2,3,7,4,5,-5,-3,7,3,3,5,-3,-9,-2,-3,-2,7,2],[5,7,1,-7,3,2,3,9,1,8,-7,6,-7,4,-4,-8,-4,10,-1,10,2,-9,9,4,-2,-4,3,8,6,4,2,-10,-10,-4,7,2,-7,-6,-1,-6,1,1,-10,3,-2,-6,10,-3,-6,9,10,-3,-6,-1,9,9,9,-5,-10,-5,-7,9,8,-8,-8,8,-2,-2,9,-3,-5,8,4,-5,2,-9,2,6,9,-2,3,-4,10,1,-1,10,9,-4,-1,-7,8,4,3,9,6,-8,1,3,-8,-5,-1,9,-10,6,9,-6,1,-6,-2,8,-6,6,-8,3,3,9,10,7,8,-3,9,5,-1,-4,-7,10,9,-5,3,7,5,-4,-3,-6,6,-9,1,3,-4,-7,-9,6,-1,7,6,-3,-9,5,10,2,-3,9,4,7,2,10,-1,1,7,7,3,6,7,-5,-5,2,-9,-3,4,-2,-6,-8,-1,8,-9,1,6,-6,-1,1,8,-3,2,-2,5,-3,-8,-7,-1,7,1,2,7,2,8,3,5,-7,-1,-5,4,-9,-2,1,1,-3,-8,-10,4,-1,5,2,-10,-9,7,9,-6,4,-3,9,-5,-6,7,5,10,-6,2,5,7,2,9,-5,-8,-1,4,-4,-2,1,8,3,-4,5],[6,-7,-5,7,8,9,1,-4,-1,5,1,-7,3,-1,10,2,-5,1,6,5,1,10,5,-6,-4,-4,-6,8,-10,6,-4,-9,7,-10,-9,-9,-9,2,-2,-2,9,3,-4,5,-1,-7,-9,-3,-6,1,8,-6,6,-10,-6,7,8,-1,3,10,6,9,4,4,-7,-5,-3,-1,-9,-9,5,2,-6,-8,10,-4,-5,-4,5,9,2,-6,-7,6,-7,-2,-1,-8,9,9,-3,-6,6,-9,7,-2,4,-6,4,-8,8,-3,-6,7,6,5,-7,-2,-2,-3,-1,-9,-4,7,-6,-8,6,-3,-4,-8,-6,-4,5,-7,8,-7,6,5,1,-7,6,-3,-9,-5,-9,-7,-7,10,-6,-10,-9,-5,-2,-7,2,-2,-1,9,3,5,8,-7,-3,-8,5,7,-4,9,3,-1,-9,-3,9,-2,-7,-6,-1,1,-1,-4,6,10,-4,-8,-6,5,-3,8,2,6,-9,8,7,-3,-8,-7,-10,4,10,4,10,-3,-8,7,-3,3,5,-1,9,-5,2,-1,10,8,-9,8,-10,4,-4,-9,-4,-8,-4,-3,2,1,-9,8,-8,-3,-9,-6,-2,8,-1,-2,1,-4,-8,9,-7,5,3,-7,-10,-9,1,-7,-8,-8,3,-4],[7,-9,-6,-6,9,9,3,-4,-6,1,10,10,-2,-7,-8,1,-8,2,-1,7,8,-3,-1,5,1,5,-3,-9,3,1,-8,7,-5,2,-5,-5,4,-5,6,-2,-5,8,2,-6,5,6,-10,-9,-2,-10,-9,-10,-2,8,7,6,-7,-2,4,-5,5,-2,4,1,-2,3,-5,-4,9,6,-2,-10,9,-9,1,-1,5,3,-5,-7,7,-2,-2,1,10,9,-2,-10,-10,3,5,8,-7,1,-9,-3,-8,-9,1,4,-7,-3,2,9,4,-3,-8,-7,4,-9,6,-9,6,7,-6,-9,3,-2,-5,7,5,-8,-3,-7,5,-9,-7,7,6,1,6,5,-1,-6,-1,8,3,10,1,2,-5,-8,1,6,-9,9,8,-5,-2,7,-4,-9,1,4,7,7,-8,6,10,7,10,7,10,9,4,3,-3,6,2,-7,7,10,-8,-5,8,-2,-7,-8,-10,1,3,4,8,9,2,-8,-9,-4,-7,-9,-10,5,9,-8,-10,-5,-3,-8,-10,9,-4,-1,-7,4,-4,9,4,-5,7,4,-10,-10,-7,-2,-9,1,9,-10,6,10,-9,-8,-5,5,-6,-9,7,9,-10,-3,3,-2,-5,-1,-6,-3,-2,-7,-3,8,3,-4],[-5,-6,-4,-3,4,-1,10,10,-3,-1,3,1,-2,5,-6,-8,4,7,-5,-6,8,8,9,3,10,-8,-4,2,10,3,-8,7,7,1,4,2,7,9,-7,-2,6,3,1,-6,-3,-4,-2,-3,7,-2,5,5,4,-10,6,-8,-3,2,6,-2,-7,-8,-9,7,-6,1,2,5,-9,7,-8,10,5,3,2,-8,4,-9,8,-1,6,8,-7,6,-8,3,-7,7,-9,-5,6,9,1,2,-5,-6,4,-8,8,7,6,-2,-5,7,1,-4,-7,-8,-10,-10,3,5,-1,-8,-7,-5,-5,6,-7,-5,-6,7,1,-2,6,-7,9,6,-6,-10,-9,6,3,-5,8,1,8,-7,-3,-3,10,-8,3,8,-10,2,3,-3,-3,-9,10,-5,7,-1,-1,-1,-6,10,5,-1,-8,4,5,8,-8,9,6,-8,5,5,-6,5,-5,5,4,-7,-3,4,10,5,8,8,7,-6,7,-6,-8,-7,7,3,8,-4,10,-8,-7,-8,7,8,4,-6,-5,-4,-5,-8,-10,6,2,10,5,2,-1,8,10,1,9,-5,-2,-1,-9,-1,-9,-9,-6,-3,-7,2,9,5,5,-3,5,-3,6,-8,-1,4,-8,1,1,5,-2,5],[7,1,8,-8,-2,4,3,3,-2,5,9,2,-1,8,-3,5,5,-2,9,-9,-1,1,4,-7,8,-6,8,-6,4,2,-9,9,-4,8,-3,6,-2,7,10,2,-5,-4,-6,-2,6,-10,-3,-8,2,-2,-5,-6,-7,2,-6,-3,3,-4,10,3,-3,9,-4,5,-5,8,7,-4,8,10,-2,-4,4,6,-5,-8,-2,4,-5,1,-8,-7,-4,9,-9,-5,-4,6,9,2,2,4,-6,-9,9,-1,8,2,-3,3,10,2,9,3,-1,3,2,5,-6,-3,6,-2,3,6,4,5,9,9,-5,-7,-5,10,-6,9,1,8,3,-2,3,2,7,-1,-5,4,1,8,2,5,-5,1,-4,5,-7,6,5,7,-3,8,-9,2,6,5,-10,-5,5,-2,2,-8,2,-1,10,-9,-6,-5,-1,-4,6,2,-2,-2,-2,-7,10,5,9,-1,6,4,-8,7,-3,-4,-2,9,-5,10,3,-4,-3,9,7,-1,-1,-4,-1,8,-2,6,-1,6,4,-5,-5,4,-2,-2,-4,-1,-5,3,6,3,-4,-1,-4,4,7,6,10,2,2,10,-6,-10,8,8,-5,-1,9,-5,-1,10,-10,-1,-8,-2,-6,6,-3,-4,10,-4],[-4,5,9,8,-10,-9,7,-1,-3,-5,5,-3,-10,9,9,-6,-8,-8,-4,10,-5,6,-9,6,2,-4,-5,-5,-4,-4,8,7,2,7,-2,-1,4,-8,4,8,7,3,9,-4,2,7,9,-10,-9,-6,1,-7,-5,-9,-1,5,1,8,5,2,-4,-9,-4,4,5,-6,9,1,-10,-3,9,9,-3,9,-2,5,-1,9,-5,-1,-4,7,2,-7,2,5,5,3,-4,-8,-5,-2,-9,-4,-5,7,3,5,3,2,-2,-9,3,-7,-2,5,7,-4,10,5,2,-7,7,10,5,-7,9,6,-6,10,7,7,-3,-4,-8,10,-10,-7,-8,9,1,10,4,3,-8,-1,-10,-1,-1,8,4,1,3,-5,5,6,-1,-5,4,-6,2,-1,6,-5,-9,-6,1,10,-5,6,-8,5,3,-6,-9,3,-2,6,-6,-6,-6,-7,10,-10,2,-7,2,-2,4,-4,-4,6,1,5,5,-10,2,7,-7,-8,-4,-9,-7,-1,-9,-3,4,-9,3,10,-3,-8,-10,-8,-3,5,-1,4,-3,6,2,5,1,10,-7,-2,1,-7,7,9,2,-7,-6,1,-8,3,8,-7,-3,-1,-7,3,2,-2,-5,-1,5,-10,-9,-2,7,10],[-3,-2,-5,-9,7,2,-1,-10,-3,3,-7,9,-1,-6,6,4,2,-6,-1,9,6,-7,4,-3,-6,-7,7,-2,8,-9,-3,-4,10,-2,-6,9,2,10,1,5,8,-4,-9,-5,4,1,-8,-2,6,9,7,-3,4,-5,7,-6,-5,9,-7,-2,10,-8,-10,-9,4,-8,8,10,-7,8,-8,-8,-5,6,3,2,-3,6,-1,-8,4,8,9,5,4,9,-8,-4,6,-6,7,-6,8,-4,4,-6,9,-2,1,-4,9,-6,2,1,-1,9,-4,-8,5,-1,-3,-9,10,-1,-7,5,-8,-4,-2,-8,-3,-3,-10,-1,-3,5,-9,10,-4,-10,6,6,10,-6,-6,-5,3,-5,-9,9,-9,1,7,-9,4,1,-7,-6,8,9,-10,2,-4,-8,5,6,10,-6,-1,-7,6,-5,-6,10,-6,-7,-7,10,7,-4,-5,-8,10,-3,9,-7,9,-8,4,-6,-10,9,-1,-9,-8,3,-5,-8,7,9,-3,-10,8,-7,9,5,6,9,2,6,-10,3,1,4,5,3,10,2,5,-10,-1,-8,-6,4,4,8,-10,1,4,-9,-1,-1,-8,-6,-10,-9,-9,8,3,-5,-4,1,6,7,-9,3,9,-10,-4,-3,-3,5],[-1,-9,-7,-9,9,-8,4,-7,2,-5,-1,-1,1,9,-6,8,-9,10,-1,-10,-3,-5,4,1,1,8,-5,9,2,-10,4,6,4,1,6,-4,-8,7,-1,7,-6,-4,-3,-7,-2,-3,-6,10,-6,-5,-2,3,-10,-1,9,-2,4,-6,-10,-4,-3,-1,-6,8,1,6,4,3,-8,-6,-4,-1,-6,-9,-1,1,10,2,-4,-9,6,8,3,-6,8,5,10,-2,5,5,4,10,7,-1,-4,5,6,-2,7,-9,9,8,-1,4,-4,2,4,-2,-3,3,3,-7,-3,7,6,4,-1,-3,-3,-10,7,-4,1,-3,9,2,-5,-3,8,8,-8,-9,7,5,10,-8,5,-7,10,-1,-7,-2,-1,-3,-5,-3,7,3,-4,5,-2,-3,5,-3,2,-3,-8,3,8,-8,-9,5,3,-8,-6,2,-6,-5,5,-5,6,7,-2,3,6,-2,-4,-9,-7,-5,1,-1,4,-7,7,-7,-9,5,7,-3,1,8,-4,-2,7,6,-7,-5,6,-10,-4,-4,-3,8,8,3,-7,-5,-1,6,6,-7,10,4,4,8,4,4,-10,-7,4,-10,-4,-5,-3,4,2,2,5,-9,3,8,-9,3,7,-10,4,3,6,-5,-7,-8],[-2,3,8,6,-9,-7,7,10,1,-6,-9,-3,4,-3,8,-4,-2,8,8,9,6,-8,7,-10,7,5,4,-10,-7,1,-4,6,1,6,-5,1,-1,8,-6,-8,4,-8,3,-7,2,-6,5,4,7,9,3,7,8,1,6,6,3,8,-3,6,7,4,5,9,-6,-4,-8,-4,-6,10,-4,-2,10,3,-7,1,-1,5,2,8,4,-8,10,-1,-7,-8,9,2,-10,-5,3,10,-2,2,2,-4,1,-1,4,-9,2,5,-7,-3,1,-3,-5,-10,9,10,1,8,-6,3,10,10,-9,-5,2,-3,-5,7,1,-6,-9,-2,10,2,-8,3,-7,9,-10,2,2,4,2,-9,9,3,-2,2,-6,8,-1,1,-6,6,7,-9,-3,-8,6,-10,-5,-7,-2,10,3,-2,-9,-2,5,4,-6,-1,-7,6,8,-8,-10,1,2,-10,7,9,6,2,7,-3,8,4,5,-9,-5,-6,-2,7,-8,8,8,3,7,5,-3,1,-2,-9,2,-10,4,1,4,-7,4,10,-3,4,-10,7,7,7,10,6,3,-10,5,1,9,4,5,3,-6,-1,-6,-10,-4,-2,-4,-8,-8,3,10,-5,-4,-2,2,1,4,4,8,-3],[-4,1,-7,4,7,-1,1,-6,4,6,-3,5,8,-7,5,3,9,7,10,1,9,4,7,-7,-10,-6,1,-10,1,9,1,7,-5,4,-8,-5,-7,10,-1,-5,-1,5,2,-5,5,1,6,-4,6,6,-4,-2,-10,-3,9,-3,8,-4,-3,5,3,-6,6,7,9,-8,4,4,-4,8,-4,6,9,4,9,4,5,-10,-9,3,-4,-10,10,-4,-10,8,5,8,3,10,1,-5,-1,7,6,9,-8,-8,-3,-3,-7,9,-4,-8,10,1,1,8,-3,-3,3,-8,-2,-1,1,8,-4,3,-5,-7,8,-4,5,2,-5,8,-8,-10,5,5,-5,7,1,9,1,-9,-3,-10,7,6,-9,-1,-3,5,-4,5,3,-1,1,10,-6,-3,-4,-9,6,-2,-10,-10,-5,2,-7,-1,10,-7,-3,-5,8,10,-2,2,4,1,-8,-8,7,-4,-8,7,8,9,2,2,3,-9,-3,-10,-6,3,-3,-9,-3,-7,10,9,9,-1,3,1,7,10,3,-7,3,3,2,-8,-4,6,-8,-6,-6,-8,-10,6,10,-5,7,2,-1,8,6,6,9,-8,10,6,8,-4,4,6,-5,-9,-3,4,5,-7,6,-4,7,3,-3,3],[4,2,7,-4,-10,-7,-3,9,3,-10,9,-5,6,-6,-1,-2,6,3,-3,10,-1,6,-9,1,-1,2,-6,6,9,1,-1,-4,-9,2,5,5,8,9,6,-1,2,-7,-2,-10,-7,10,-6,-4,-1,-6,8,-2,3,-4,-3,6,-8,-4,7,3,5,-1,6,-5,-4,5,10,-10,3,2,1,-9,-2,-1,-5,5,6,2,-3,-2,5,1,-9,8,5,5,-1,-6,7,4,-2,3,-4,1,-9,-4,-2,-2,6,-10,2,-10,10,-6,3,-1,8,2,-9,1,8,6,2,9,-8,2,6,4,6,-3,9,-6,9,3,3,-10,1,2,-2,3,2,1,-7,-4,-5,4,2,-5,7,9,-3,-4,-2,10,-7,-7,10,7,-3,10,9,-5,3,-1,7,-2,-8,-7,-1,8,3,9,3,3,-8,-5,-7,7,10,10,-8,10,-9,10,-7,7,4,-5,3,-5,1,7,10,-7,2,8,10,-7,8,-8,-8,6,3,8,-9,7,3,-9,-10,1,-6,3,10,4,9,-2,-6,-8,-10,-7,9,3,9,-3,8,10,-7,-9,-3,5,-6,-9,-7,-3,3,-8,-3,-2,-2,-1,1,6,2,-4,-10,-9,6,-9,4,2,2,-8],[2,9,-5,6,-2,3,-2,1,4,8,-7,-4,1,-8,7,-9,-6,-5,-1,-8,-7,-6,-5,-1,-6,-10,-6,-6,2,1,10,2,-10,-8,10,-1,6,-6,-6,-10,3,-7,-8,-7,7,-2,8,4,1,-9,9,-9,-9,3,-1,-8,-7,-5,-8,-5,-2,1,-1,10,-6,-2,-10,9,6,-7,-9,1,-9,-8,1,-9,10,-3,-4,2,1,-6,-7,-2,-9,9,-3,-3,-1,9,-4,-4,-8,-3,9,6,-9,5,-9,8,8,-7,2,-3,-1,-2,1,-7,-5,5,8,-8,-6,-5,-1,-5,2,10,-10,-4,7,5,-6,-1,5,-6,7,-9,6,8,-7,-4,4,3,-9,6,7,-4,-6,-1,-10,3,1,-2,8,-4,-4,-5,4,-6,-7,9,-6,4,-9,-4,-3,8,-2,1,-4,-6,3,1,-9,10,-9,-1,-1,8,1,-1,-10,-8,-3,2,-4,-6,-10,-2,-3,-9,1,-1,5,4,-3,2,-6,-8,1,-4,10,2,8,1,8,6,-9,4,8,4,3,-5,-8,7,2,-6,5,2,-6,7,-4,3,-1,9,-5,1,9,-6,-8,8,-6,4,-6,5,1,4,-6,-7,6,-8,-9,8,4,4,-8,-6,1,-8,-6,7],[-6,1,9,-10,-5,3,-7,1,6,-5,-2,-1,-9,-7,3,-2,-4,2,2,8,2,3,-4,-1,2,5,5,6,-6,-8,-7,-7,-5,4,-2,-7,6,2,-6,10,-6,-3,-2,6,-2,-8,-7,9,3,1,8,10,10,1,4,4,-8,-3,-6,10,-3,4,-3,-4,-6,4,5,-5,-5,-10,2,8,-1,-2,-10,-2,3,5,-10,-4,3,10,1,2,-6,4,-6,-7,5,-3,-6,-10,-2,-4,-3,1,-8,6,8,5,10,-1,-2,-3,-10,2,3,4,6,-10,-8,-8,1,6,-4,5,-10,10,5,-9,-2,-2,2,2,7,8,4,4,10,9,2,-7,8,-4,-3,-1,-3,-1,10,4,9,3,-6,1,6,9,1,10,-3,6,7,-2,10,-7,9,10,-3,-1,9,-6,-1,-4,-1,6,9,2,7,10,9,2,1,6,-4,-5,-1,1,-6,-6,1,10,4,-10,8,-2,9,5,-5,-4,-7,3,9,-10,1,1,10,2,5,-4,-1,-10,-10,10,3,4,4,8,1,10,3,-4,7,6,-9,7,-9,-10,-1,2,-6,-3,-4,-8,10,9,-1,8,-2,-2,-7,10,-5,2,-3,-9,1,-1,-7,-1,9,10,-6,10],[3,6,-2,-3,-9,4,-9,2,8,-6,4,-2,9,5,-10,-3,8,10,-8,-10,10,-8,10,3,-3,5,-8,10,-6,-5,1,-9,7,-10,4,1,-7,-5,9,7,6,-1,6,2,-6,10,4,6,-7,-8,10,7,10,-4,-7,-3,4,7,-5,4,7,9,-1,5,-3,1,4,-1,-9,3,10,10,10,-4,8,4,-1,-1,10,-2,-8,-6,-2,-7,6,6,-6,7,-4,8,-8,9,7,-4,5,10,1,-8,-7,-2,2,6,-6,1,6,2,-4,-5,-3,8,7,3,-5,10,5,4,2,7,-5,-8,10,6,2,-2,2,-5,7,-4,-9,4,-6,3,-8,-6,9,-3,5,-10,1,-2,-4,-2,6,-5,10,-1,10,6,4,-1,7,1,-5,7,-5,-1,-7,-1,-8,-10,-6,7,-2,-3,5,9,-10,-4,-1,3,1,4,6,2,2,4,-2,-3,2,-1,10,10,10,8,-4,-7,6,4,-7,-8,10,-6,-1,-7,2,3,-9,5,7,-1,6,-6,9,4,8,-4,4,-1,8,-9,5,4,4,-3,5,-2,4,-3,9,1,-1,-8,-7,-1,6,-5,3,6,1,8,5,-8,7,-4,-9,6,1,5,10,1,6,-8],[7,6,-3,-7,4,7,-5,10,5,-1,7,-4,-2,4,5,8,-3,-2,-9,-5,2,-6,3,10,1,4,-9,-6,7,2,-1,-4,5,1,4,-8,-7,5,2,8,9,3,2,3,-1,-1,-3,7,10,-1,5,3,6,2,5,3,-3,6,-8,-7,3,-9,3,-4,5,9,7,-4,2,-4,5,3,-4,5,9,10,2,-6,-7,-9,-10,-4,2,1,-3,1,2,8,-6,-9,7,-4,-1,3,3,-10,-2,-9,10,8,-6,-1,-4,8,4,-4,-9,7,1,7,5,8,-10,2,8,3,-1,-6,-3,-7,-4,-7,9,4,-7,-5,-6,10,9,-6,-3,3,-5,-9,5,-7,-8,3,-8,9,-8,8,7,-2,9,3,8,6,-7,2,-2,3,1,7,-3,-7,-1,6,10,-4,5,10,7,5,-10,8,-5,-2,-6,-8,-7,1,9,-8,7,-9,-3,-6,-5,-6,9,9,-6,-2,1,-3,-6,-8,6,-5,10,-5,-3,3,5,6,-5,10,7,-4,-6,9,-5,-9,3,-4,-10,-5,-4,-4,8,-3,-5,4,8,4,-9,10,-10,-7,-4,7,1,-6,2,4,-10,-5,-3,-10,-1,7,-5,-3,5,-9,2,3,-2,8,9,-6],[-10,-5,-1,6,-7,-1,-9,1,-6,-2,-8,2,4,-4,4,3,2,-9,-2,5,7,6,-4,-7,-7,9,-4,5,-2,4,-10,2,-6,7,5,1,-9,5,2,-4,-2,6,5,-5,-2,-5,-7,-6,-9,3,4,5,1,-7,-1,-3,7,1,1,-10,-7,9,5,9,8,-5,5,8,-9,10,9,5,3,7,-5,8,4,-8,-3,-1,10,-5,-8,-3,-1,9,8,-5,3,6,-9,-2,2,-1,8,7,-2,4,-9,-8,-2,10,4,-3,-5,5,-1,-6,8,7,-1,-3,-9,10,-6,8,-7,9,2,-6,-9,1,-9,-3,6,2,-6,-8,-4,3,-9,9,9,-7,8,-8,-6,6,-9,4,-1,-1,-5,-6,-9,10,-9,-6,-7,-9,-6,-9,-9,-2,6,-2,-4,7,-5,-10,-1,-4,1,1,3,-2,-9,3,-8,4,3,-2,-2,8,-2,-2,1,5,4,-10,8,-7,-5,-4,-5,6,8,-5,-8,6,1,5,1,-6,8,3,-7,4,1,4,10,-6,-9,7,-5,-7,10,-8,2,10,-1,-7,-5,10,-10,-6,6,9,4,-1,10,3,10,2,7,-3,7,7,-2,10,3,4,-9,-5,8,9,-3,-7,8,-2,-3,3],[6,4,1,10,1,5,7,-2,-3,-5,5,-9,3,-8,-8,-8,5,10,7,9,-6,-9,-2,9,2,-4,-4,-10,4,-5,10,-7,-5,-10,9,-10,4,9,10,5,-10,9,-4,2,8,2,-1,5,-6,-6,-6,1,8,8,-5,-10,-4,10,-9,-5,10,-6,-6,6,-8,10,-3,-4,10,8,6,2,-10,-7,-5,-7,2,7,-6,2,7,8,3,-8,-5,-10,-8,-1,5,9,-2,8,-2,2,7,-4,7,2,-5,3,-1,-8,-5,7,-9,-9,-5,-5,-1,-6,2,-3,-3,9,9,7,4,1,4,-9,-6,-4,-7,-7,7,-9,5,-7,8,6,9,1,9,-5,10,8,4,9,2,-10,-1,-7,2,3,-2,-9,-2,-4,-2,6,5,-2,-7,-10,6,7,2,4,-7,-4,-7,10,5,2,5,1,-1,8,-1,6,-2,-7,-6,8,7,2,7,3,8,-9,-3,-2,3,-6,-2,-4,-5,1,-1,5,-9,1,-9,-7,-2,-9,-7,3,4,-4,2,-3,8,-10,-10,-8,4,-6,8,9,10,-6,10,4,-9,-10,-6,-9,8,-7,6,9,7,-4,-9,-4,10,5,-9,6,9,8,1,-2,-1,-7,-4,-9,-4,-5,-6,1],[7,8,6,4,9,1,-1,1,1,9,4,8,10,10,-10,-2,8,-5,-3,10,-2,6,-5,5,2,-3,3,4,-3,-9,-7,2,-10,-2,5,-7,-4,-10,7,-4,3,-7,9,2,-8,-6,10,2,6,-3,7,-8,2,-1,7,-9,-5,9,-8,5,-1,-2,-1,-3,10,10,7,-2,9,-9,9,9,2,7,8,-5,4,-2,-2,4,2,-1,3,9,7,6,-5,9,2,7,-7,-1,-2,8,9,-9,-7,1,4,-1,9,8,-4,-1,-4,-8,-3,-3,-5,2,-4,-6,-1,-2,8,-7,-1,-1,3,-1,2,-7,-2,1,-1,1,4,-10,-6,-10,-6,-3,2,-1,-6,2,-6,5,7,-5,-9,-8,6,5,-10,8,2,4,5,-10,10,1,9,3,-1,8,5,-2,4,4,-4,2,4,-3,1,-4,-5,8,10,-2,10,-1,-6,7,-2,-5,-5,-4,3,10,1,7,-10,10,6,10,-1,-10,-6,6,10,-6,-8,-4,8,-5,1,-2,6,-8,3,-8,-1,-1,7,-4,-9,-2,3,-8,-3,9,-8,2,5,8,-9,4,7,6,-3,3,-3,10,2,-6,-2,6,7,4,7,2,10,-6,1,3,2,-5,10,10,3,4],[2,7,-7,1,-5,-9,-9,2,-7,-4,-10,4,4,9,-2,5,2,-3,-5,2,-9,4,8,-10,2,5,-2,-9,5,-6,-10,2,2,-10,2,-6,-7,-1,-8,-9,4,2,3,10,3,6,6,-7,5,-9,1,8,-8,2,-1,-8,-7,8,-6,-9,-6,-2,4,5,7,6,1,-6,4,-7,-1,9,7,-9,8,2,2,8,-3,5,7,10,5,7,5,6,10,5,3,-2,9,-6,-8,-9,7,3,-5,-4,-8,-2,8,1,3,7,10,-6,-3,-4,-7,6,-8,2,1,-6,10,3,5,-3,-2,4,-10,-2,3,8,8,-5,-10,-10,4,9,1,9,-6,4,-3,-1,-9,7,-7,-3,8,1,-5,-8,-4,-3,1,-1,-4,-6,-3,1,-7,3,5,9,4,-3,9,-9,10,-8,-2,7,-5,-3,7,-10,4,10,-9,-5,1,3,-9,2,2,8,2,8,-8,6,6,-2,9,-4,-3,1,-6,3,-7,-7,-9,-1,-2,-8,3,-8,10,-1,-1,7,-5,7,5,9,5,8,-10,-4,-1,3,-6,3,10,-5,1,9,4,-7,4,-10,-1,4,1,-4,-10,-4,-9,-10,-1,3,9,-7,-8,4,2,2,4,5,-3,6],[9,8,7,8,-7,1,3,-10,4,-2,6,10,-1,5,-5,7,-1,1,-7,7,1,9,-7,4,1,-10,1,10,6,-6,-6,-6,-2,-8,-7,2,-4,2,9,5,-2,-8,-6,5,-4,4,5,-1,-6,-5,-6,10,5,-1,6,6,-2,10,-5,-9,-5,-2,-4,7,-4,4,-9,-7,-6,1,-6,-1,1,8,8,6,-2,-6,-1,-8,-5,-2,9,-9,10,9,6,6,-3,5,2,7,-8,-2,-5,-4,3,5,5,-6,-7,-5,-7,2,7,-3,9,-5,-2,5,-9,8,-5,3,10,-9,6,-9,6,3,7,4,-6,2,-8,-5,-8,-9,5,-4,-3,1,-8,-2,-2,-10,3,-4,3,-6,4,9,4,6,-2,-6,7,6,-10,2,7,10,5,10,-3,-2,10,1,-9,-3,9,-8,1,-4,6,2,7,5,9,4,2,8,-7,-3,-6,-9,-10,-3,-5,-1,-2,-4,6,-5,-3,-4,4,6,-1,-10,-9,-3,-8,-9,3,3,2,8,-7,2,1,6,8,-7,-4,7,7,-4,8,7,-3,9,-8,-3,10,-6,1,-6,-7,-9,9,-6,-8,1,-4,-7,9,-2,3,-1,-1,3,10,-3,2,7,10,8,-4,1,-7,6],[-4,-2,-6,-1,-1,-10,-2,7,-9,-5,-8,6,-4,-1,-5,9,-7,-8,6,-1,2,8,-6,-9,-9,-3,-9,-2,-6,-6,-2,-2,-5,-2,-10,8,4,-9,10,7,-2,8,-1,-2,5,-10,2,6,4,10,10,-7,5,7,4,7,-8,5,7,-6,7,9,-8,9,-2,-6,-9,7,1,-9,9,10,3,7,-5,2,1,-3,6,-10,3,9,3,7,-9,10,4,-7,5,7,-9,6,-10,-8,3,3,8,-9,7,4,6,-5,-3,-9,8,-2,5,-4,5,3,10,3,7,8,9,1,-5,6,-1,-8,-3,4,6,-4,2,10,-3,-1,-4,8,10,-1,-6,-4,-3,5,-3,-3,9,-2,5,2,-5,-2,-1,-4,-10,9,-3,-4,-7,2,10,-1,-5,9,-4,-9,5,8,2,10,-9,7,-1,-10,-1,-10,-8,-9,1,4,-10,-4,4,2,6,-7,10,8,-8,2,1,-8,3,3,-5,9,9,10,-5,-1,-4,-7,6,-8,6,-4,1,7,9,-8,-6,-10,2,2,4,-10,6,5,-5,-6,2,-5,2,-9,-3,-7,-7,7,9,-9,-3,-3,8,-10,-10,1,8,7,9,3,6,-2,9,2,-7,2,2,10,3,3],[10,-5,2,-10,-9,-5,-5,8,6,-1,-5,-4,10,8,-8,7,5,-6,-6,-9,9,2,1,-7,1,2,3,-4,-2,6,-3,7,7,-6,10,-7,-9,3,10,9,-8,-9,8,3,6,-1,-4,-9,-2,3,-10,8,-1,1,1,-5,10,-9,9,-10,3,6,-8,8,9,9,-2,-9,10,-6,-10,1,7,10,-3,-3,-10,4,5,7,3,-3,6,10,2,8,-7,1,8,9,2,8,10,-9,3,-9,5,-3,-4,7,-1,7,4,9,1,-3,-10,4,-2,5,10,-4,-3,-6,-2,-2,-9,-10,-7,7,8,1,-1,-6,-10,8,4,-7,-1,-4,7,7,-5,9,7,-1,7,3,-7,-1,-1,-8,-3,1,-9,10,-3,2,-5,1,8,-6,-4,-3,7,1,-4,-2,6,-2,10,-9,-10,-2,-1,-6,-5,-3,3,-3,1,8,-4,2,-6,3,8,-9,-2,-3,4,-3,6,-1,4,-9,9,-10,-10,1,9,-1,5,-5,-1,-3,2,5,3,-6,1,2,5,-2,-4,-2,-6,-10,-3,1,5,-10,-7,-6,-2,-7,-10,-2,1,-1,-7,-8,3,6,-2,9,-1,6,-5,-8,7,-1,-8,-3,9,6,4,-10,1,-5,5,2],[-5,3,3,9,9,-8,-5,8,4,1,-7,6,-7,10,-7,7,3,5,1,9,-6,-9,-7,-6,-8,-10,7,2,9,5,6,-1,2,-6,-10,5,1,8,8,10,8,-2,6,-9,5,2,-8,10,-6,2,-3,-3,-10,4,-2,5,-6,5,10,8,1,-7,-2,-8,-3,-6,7,1,-8,-7,-1,2,-9,9,2,5,7,2,-8,8,3,8,-1,9,-3,-2,9,2,-1,-7,8,6,-5,5,-1,5,-6,3,-1,9,-7,10,4,-3,-5,-8,6,10,-4,-5,7,8,2,-3,4,-8,-2,8,-10,-1,-3,8,6,-1,3,7,5,-5,7,-9,-1,-3,-5,1,1,-2,2,4,-10,-10,10,-4,3,1,7,-10,-8,1,1,9,-5,-8,1,-7,-8,3,-4,-4,-6,6,6,-4,-8,-6,-9,3,-5,3,3,-6,-6,-9,-6,9,8,7,-1,8,6,-10,-10,8,-2,-1,10,-3,8,9,5,-8,-5,-6,-4,8,10,-4,9,-6,-3,-5,6,-9,2,-8,8,-9,-1,-9,-1,6,5,2,3,6,-4,-7,2,3,-6,10,-9,6,6,-4,4,-10,1,4,9,8,-4,-4,-10,8,-9,9,9,-7,-3,-4,2,-6],[8,-5,-4,2,9,-4,-4,7,3,1,-1,7,-1,1,-6,4,-10,1,-3,2,9,-3,10,-6,7,-3,8,-4,-10,10,-3,8,-5,-7,-3,10,-7,-7,-4,8,-2,2,10,7,-1,5,-3,-7,-5,-5,-5,2,-2,9,-2,9,-9,-2,-9,10,-7,-3,-10,-7,7,5,10,4,-6,8,-9,10,8,-6,4,-6,-10,1,3,7,3,4,9,3,-10,-3,-8,6,8,4,9,-3,2,1,6,-5,-1,-10,8,8,-4,8,6,7,-7,6,-2,-7,6,10,-7,9,-6,2,2,-4,1,-8,6,-2,8,-1,10,-7,-5,6,-3,-1,6,5,-3,4,-8,2,-10,9,6,-10,-5,1,-5,-3,4,7,7,-7,10,-6,-6,4,-5,-5,2,-7,2,10,-7,-6,-7,10,-7,-6,-10,7,1,1,-6,-6,2,9,1,3,-2,-8,4,-3,-7,-9,-1,3,2,7,10,8,7,8,-9,-8,2,8,-6,-8,-9,-3,7,-2,2,7,-5,6,4,-1,-8,4,7,-7,-4,-7,6,-5,8,2,-9,1,-5,5,4,-4,5,4,9,-4,-8,8,-2,5,-10,-7,-7,10,-9,5,1,8,9,-9,-3,3,-5,-3,2,7],[6,-9,-4,9,6,-1,-5,-4,-10,3,5,5,5,-6,-8,8,-9,-9,8,8,-1,-10,7,9,6,-1,9,2,3,-2,-3,5,9,-6,-1,10,5,-8,-3,-10,-10,3,-6,-3,5,8,-6,-1,-6,-2,3,-8,-2,-1,-3,6,-1,-5,6,-5,-5,-8,-5,-6,5,-7,9,-7,10,-8,8,-10,-4,5,5,10,5,1,-6,1,6,-2,-1,-8,4,8,1,-10,-3,7,-6,-7,5,-3,4,4,1,-7,-4,7,-2,-9,-3,1,5,5,5,4,-10,2,-2,6,-4,-6,-9,-6,8,-7,6,8,-6,-3,-2,2,6,8,4,-1,-8,-9,-2,9,2,-10,3,-10,-8,1,-1,-4,9,-5,7,-1,3,-1,9,-4,7,9,-1,-9,3,-2,3,1,7,4,2,-8,-9,1,-8,-7,8,-5,7,1,-5,4,7,1,1,-10,3,7,5,-8,-2,10,-4,-2,-2,-3,-6,-7,2,8,5,6,4,-10,3,5,-6,9,1,-3,4,2,-2,-2,-8,8,8,1,-1,-4,10,2,-4,8,-4,-10,4,8,-2,-10,1,-4,-4,-3,-8,1,-6,-6,6,8,2,8,-2,3,5,4,1,-8,-5,-2,-10,10,6,6],[9,-9,4,8,4,-9,7,6,3,5,-5,-10,-7,-10,-8,2,10,10,-1,-7,-2,-3,-2,-6,-2,-3,-7,-3,3,7,8,9,-3,2,-7,-8,-7,-9,1,-6,-6,2,-1,-10,-6,6,-6,-4,3,-4,6,1,-4,-2,6,8,6,7,-2,-4,4,4,6,-1,-3,1,-7,-3,-5,-6,5,-4,1,-10,10,5,3,-6,-7,-10,-3,10,-5,3,-7,2,-2,-3,-10,7,-7,6,2,-1,-10,-9,-1,-5,1,-8,-6,2,-7,-10,-10,-6,1,-8,-5,-10,-1,-10,-10,-1,-4,1,9,9,-8,2,-7,-6,-10,9,-7,-10,2,1,6,2,4,1,7,-1,8,5,-2,4,-9,-7,6,5,1,7,-9,-7,-4,-8,8,-8,-3,-2,7,-6,10,1,5,3,3,3,-3,-6,-9,-8,4,-3,-10,-1,-2,-3,4,-10,1,7,5,5,2,-5,-6,10,-10,6,-10,6,7,6,-3,-2,-2,-6,1,-7,3,-4,4,10,6,3,-4,-8,10,4,-2,8,7,1,7,1,-9,-10,10,8,-5,-4,1,2,5,5,-4,1,6,1,3,5,6,6,3,-4,6,9,-9,1,7,-3,-8,4,10,9,-7,5,8,-1],[-5,1,-10,-1,1,5,5,-1,-2,-6,8,6,-8,9,10,8,5,-9,10,-6,-9,9,6,-8,2,-3,-1,-8,-7,6,-6,-5,4,8,3,6,-4,7,-4,-2,-10,9,-3,-10,-3,-8,-1,-10,8,-10,3,-2,-1,-8,-3,-1,5,-2,-8,-9,-9,10,3,-6,9,1,-3,10,1,9,10,8,-4,4,-5,1,-1,5,-10,-4,-8,-2,7,7,1,3,-7,-7,-1,1,5,9,4,1,-6,6,9,7,9,3,9,1,4,7,10,-1,-3,-2,-8,-2,9,10,-5,5,10,-3,-3,5,4,-5,3,9,10,-2,4,1,-1,3,-8,9,4,7,10,-5,7,7,7,5,-7,4,-2,-5,7,-8,-6,-3,2,-10,-3,5,6,-7,7,-10,10,6,-10,4,10,-2,-8,7,-4,-10,-3,-4,-8,3,4,8,7,5,-4,5,-10,10,-2,8,5,1,-7,-8,10,8,7,10,-1,-3,4,1,-7,-2,8,-2,-9,3,-2,9,-6,-5,-7,9,10,3,10,-5,-4,5,-6,7,2,3,4,-3,1,3,3,-5,4,4,-3,2,-8,1,3,-1,-9,8,-6,-6,-1,6,3,-6,1,-10,2,2,-8,-2,-3,8],[7,7,-9,2,-6,-5,-2,-5,-4,7,-8,4,6,-6,10,10,10,-3,-4,8,-5,-6,-5,-2,-5,-2,10,8,-3,4,8,1,3,8,8,7,10,-2,6,3,3,-6,-3,-10,1,-10,-7,-9,-2,2,-3,-5,4,-8,-1,4,6,10,4,-6,3,-4,-6,5,-9,9,-5,3,-2,-10,1,1,-1,9,-1,10,2,6,-6,5,7,-5,8,10,10,5,3,1,8,-1,6,5,-5,5,4,-5,3,1,-10,1,2,-3,5,1,3,-4,-5,-8,-4,10,-4,6,6,9,10,-8,-10,-9,7,10,-4,-1,-5,-7,-2,6,-3,3,2,5,-4,4,6,-8,-3,-2,-5,6,-4,1,-10,-1,-9,-2,8,3,-10,5,10,8,-4,-2,7,-10,-1,-6,8,-5,4,8,-5,-4,-7,3,-4,1,-5,-8,-1,3,9,-4,-9,-4,6,-4,10,-6,-9,-4,-9,-3,-10,-7,1,-4,9,7,-6,-10,-10,1,-4,-9,-5,-8,-10,9,3,-2,5,-3,5,-10,-1,-3,-7,-1,3,-8,2,3,8,-3,-9,5,2,-6,-10,-8,-9,9,5,-10,1,7,3,-9,-3,2,-9,3,7,-10,8,-5,9,2,8,-4,-10,-4],[10,-4,6,-4,4,-8,-7,-5,6,-1,-6,1,-6,2,-6,9,-8,1,-10,8,-4,-5,5,-7,2,8,-2,-3,-5,-4,-9,-1,5,-10,-8,-9,5,5,-5,-10,10,-4,-8,1,-2,-4,-6,-10,6,-8,-10,-7,2,-6,-4,-4,6,-9,5,-6,4,7,-5,-3,-9,-5,7,-6,6,7,-8,-4,-9,9,-2,-10,-4,-6,-4,-10,-9,3,-9,-6,1,-4,-4,-3,1,6,6,-2,3,-1,-7,9,8,-4,1,3,-5,10,7,-2,-7,4,4,-8,-3,3,2,6,4,-10,-1,-8,9,-8,3,-7,-10,-8,6,-1,-6,9,-8,7,-8,-8,9,-7,-4,-7,9,-1,-4,5,-6,-10,-3,-10,5,-3,-4,2,-7,-6,-8,-1,-6,5,-3,9,-7,2,8,-10,-9,6,4,-1,-10,5,9,-2,10,4,-8,-5,-3,-6,10,6,9,-7,1,-7,4,-7,-7,7,-6,3,5,10,6,1,-2,-5,10,-5,1,-3,5,7,1,-1,6,-3,-1,-9,9,-1,8,1,10,-8,-9,6,-1,7,-9,-10,-10,6,-4,-6,-6,3,5,-1,-1,7,-9,5,8,-3,8,-1,-6,2,1,-4,-7,2,-10,-10,-1,-2,-2,4],[9,-6,-3,-7,-4,-1,-9,4,2,1,-9,5,-7,-2,-6,-8,4,-1,-3,-5,1,1,-1,-7,3,6,-6,1,8,2,-8,8,-6,-8,-1,-3,-1,2,1,6,5,5,-3,-7,-8,6,1,9,-4,4,1,10,4,-3,-1,-3,1,10,-4,6,7,-9,5,-4,6,8,7,-9,-10,-10,-3,7,-10,-9,-5,-6,6,-1,-7,4,4,1,8,4,6,8,6,-5,-6,9,-9,6,-4,8,1,-5,2,6,-9,9,-4,-7,4,-7,6,2,2,-1,-2,-8,-9,-9,8,-2,-8,2,-7,4,-1,-10,8,-4,-9,-9,-6,-5,1,-7,-1,-5,1,5,-8,-1,-2,8,4,-4,-9,-3,1,1,4,-10,8,-6,-7,-10,1,-6,4,-5,-7,1,-2,-2,-4,7,-2,3,-4,-2,-1,8,6,3,7,10,6,2,8,3,1,-8,-6,-5,-1,3,-1,-1,2,-9,-3,5,-10,9,2,-8,1,8,-8,-2,-1,-2,-6,9,9,9,5,-5,-2,3,-8,9,-8,9,-9,8,5,-10,2,-1,9,7,5,-1,6,-10,-4,6,-5,1,-5,2,6,3,3,-1,3,6,-9,4,10,10,3,7,2,-10,6,8,-3,-2],[-6,-9,-2,-6,4,8,4,-10,-5,-4,7,-3,5,-7,-4,-7,5,-9,2,9,5,-2,7,-5,10,-9,-3,-2,-8,9,9,2,1,-2,-9,1,-10,5,4,10,-1,-1,-5,-3,1,5,-7,3,-10,-2,-5,7,7,-3,-1,-7,5,-7,2,-3,3,2,-9,-7,-1,10,-6,-3,8,-6,-10,3,2,8,-1,6,1,3,6,-10,3,-4,6,1,-3,5,1,-1,-10,-10,9,7,5,-1,2,-9,1,3,1,3,1,9,10,9,-6,2,-5,5,-1,-3,6,-9,5,6,3,10,-9,-10,-7,-10,-7,8,1,4,-8,6,-8,2,-4,9,-10,-5,-8,-10,5,-7,2,6,7,-7,8,-2,10,-2,-2,4,-10,1,-6,-2,-10,-5,4,-6,-3,9,-8,-8,5,-3,-10,9,9,-7,-10,8,-8,2,4,5,1,-7,-5,7,6,6,-10,8,-4,4,4,6,5,-5,6,-4,-6,-7,-9,-10,8,-3,-1,-8,3,-1,-4,-10,4,7,9,-8,4,7,-4,8,-3,10,1,-10,-10,3,7,2,-3,1,10,-7,7,-10,1,2,-1,7,-10,6,8,-5,-3,6,6,7,9,2,8,-6,2,-10,-2,-2,-5,-4],[8,-10,8,8,-5,2,9,-9,-6,3,-5,-10,1,9,2,1,-5,-2,6,7,-5,3,-2,8,-9,7,-3,1,3,-1,5,7,-10,-5,1,8,-10,7,-5,-2,-5,8,-8,-1,9,7,4,4,-3,10,10,7,1,3,-10,-2,-6,10,-9,6,-4,2,5,2,6,3,2,-7,5,-10,-9,-7,-3,10,9,-10,6,-1,-9,-2,-4,2,-4,-8,-10,-3,1,3,-8,-5,-8,-2,-6,-9,3,-7,-4,-1,-9,7,-9,8,10,-5,-6,-5,-5,3,7,4,1,7,2,4,-8,1,-1,9,-2,-8,-5,7,10,-9,9,-7,7,-8,3,-10,-4,10,10,7,-4,-4,-9,-6,10,8,-9,2,10,-4,-1,-3,3,-10,-5,-7,-3,-5,-2,3,-8,-1,-5,-2,-2,-9,-1,8,8,-9,5,1,6,10,8,-10,-2,3,4,6,2,-7,-8,6,-2,-10,-10,-5,-6,4,6,-10,5,-8,7,-4,-9,-1,-5,4,2,6,-2,8,-6,2,8,-2,3,1,4,-10,-6,2,8,3,-10,1,10,10,2,9,1,-5,1,-6,-3,2,9,-3,9,-6,4,9,-7,-1,-10,-10,-2,-7,1,10,2,-3,5,8,1,1],[1,9,-10,4,-1,-10,9,5,-3,-4,-8,-5,-5,7,7,3,-7,-6,5,6,6,6,-3,5,-8,2,8,-9,2,-10,3,9,-8,-8,4,-8,9,-6,-6,10,-10,2,-2,10,8,-5,5,-2,8,5,-1,2,8,-2,-7,-2,5,-4,6,10,-3,-4,8,3,-5,6,3,6,6,-10,10,-9,-6,3,6,-8,8,-9,-8,-2,3,9,-8,9,-2,-6,-9,-9,-9,-8,6,5,-8,2,-9,10,-2,7,-3,3,-5,10,-5,10,-1,-8,6,5,-10,-9,9,2,-8,3,-5,-9,-5,-4,-7,-2,-5,-7,4,5,9,4,5,1,-6,9,1,2,6,-4,-2,-3,-7,-8,-2,-6,8,9,7,-9,6,-4,5,-1,-4,3,-1,3,-7,-2,5,-10,-9,8,-10,-9,-4,-1,9,-9,-7,8,-9,10,5,6,10,-5,-6,-5,10,3,4,-3,8,-7,4,-4,8,10,-6,3,2,-2,-3,-5,10,-6,-3,-9,-3,-5,2,2,3,-3,-10,-4,-6,-3,5,1,7,8,-8,-1,3,-10,5,-5,7,9,4,-4,-2,-1,-6,-10,2,2,-7,3,-9,5,8,-4,7,2,7,-4,-2,7,7,-10,-7,1,7,8],[-10,2,4,-2,-9,2,2,-6,9,2,-3,7,9,6,3,-4,6,10,1,-10,-8,-8,-8,-5,-10,-5,1,2,1,10,3,-6,1,10,-9,4,-3,-6,-9,-8,-9,-3,-4,-2,5,8,7,7,-3,8,7,9,-4,-9,-7,-3,9,-7,-1,7,-3,5,10,-6,1,4,7,8,-10,8,5,4,-7,8,-1,5,-1,-4,2,-3,-7,1,-10,-9,7,8,7,5,-4,-6,-7,9,-3,6,-6,-8,-7,8,9,10,3,7,1,-7,-2,-9,4,-6,2,2,-2,2,-3,-7,-8,-8,6,-4,-5,1,2,8,-8,2,-6,-10,7,8,-4,2,-3,-2,4,-3,7,-8,-3,-6,9,-3,-2,-5,-6,-9,-7,10,-1,-8,-10,-4,4,5,-8,-8,-9,-4,-3,2,-2,-10,3,-1,-6,-9,-10,3,-7,-1,9,2,8,9,-4,3,-3,7,6,-10,4,9,2,-8,-10,4,6,-5,1,-10,-4,-3,7,-3,-7,-5,2,-7,-6,3,-3,5,-2,-8,4,-2,-10,-7,6,-1,-3,-5,2,7,-6,4,-9,1,-9,4,4,6,-2,4,-3,10,1,10,7,1,-10,-3,4,-10,-2,10,2,-3,-9,10,-9,-9,-6,-6],[-6,6,-2,5,-4,2,-9,3,8,-6,2,10,-6,4,8,3,-6,10,-10,7,9,-2,-4,2,3,-1,-3,6,2,9,9,5,-3,-7,-9,-8,6,1,-7,3,10,-2,-7,-10,10,10,-3,7,10,-8,-2,1,8,-9,-4,4,-6,-9,-7,-3,-10,6,-8,9,1,-8,6,3,1,1,-2,-1,3,1,-1,-7,-7,-4,10,-4,-3,-3,2,-4,-6,10,10,-8,3,3,2,-5,-4,6,2,-4,2,3,3,-9,-2,9,-4,3,6,3,7,-9,-9,-7,-4,-8,-10,10,-8,-4,-10,10,-10,1,-2,-6,-2,-2,-9,-2,9,9,10,-3,-8,9,-2,10,-6,9,-5,7,-9,8,7,3,9,7,3,10,-9,-9,-9,-2,-2,-3,6,-4,-6,-5,4,10,3,-3,-9,8,-1,8,10,5,1,-10,-5,-1,9,-5,-7,-6,-2,5,-1,9,3,-4,-9,4,-6,-8,1,5,7,-2,-4,-3,7,-8,-2,-4,8,8,6,9,8,-6,-7,8,-8,-8,-9,1,-8,6,-7,7,-8,-3,6,-8,-9,1,3,10,10,-6,-9,-6,-5,9,1,-9,8,3,6,-8,6,-1,-1,-10,6,-1,-2,-2,-7,1,6,9],[4,9,5,-4,-7,2,5,10,-8,8,5,-9,4,4,-7,-5,-7,10,-4,-7,-1,-10,10,10,10,-10,-2,9,6,-6,-8,-6,7,-9,2,3,-4,2,4,2,1,-9,10,7,-3,10,5,-8,-4,5,-4,1,-3,2,4,9,5,-8,-8,-2,9,-4,-10,7,1,1,-10,3,-5,1,8,-5,-10,9,-2,-10,-5,-7,9,10,-8,7,-3,-3,3,8,-4,6,9,-1,-8,-2,-9,9,-3,-10,-2,-8,5,-5,-5,-2,7,-10,-3,5,-4,-6,8,-1,-6,1,-5,-3,2,3,-1,4,-2,4,7,-9,-8,6,-10,-6,-7,4,-8,4,-7,7,1,5,8,-3,9,-10,6,-3,-2,-5,-4,10,-6,-3,-3,-10,-2,10,-4,-8,4,2,-3,-8,-1,-3,2,8,10,-2,2,7,-8,-5,-9,-7,-3,5,-3,-1,6,9,7,-7,-9,-10,-10,4,-6,-2,3,10,-10,2,-9,-8,-6,2,-6,-10,9,-5,-9,-9,-9,-1,-4,-10,9,-8,6,-3,4,-6,6,5,-6,-4,-1,-9,6,7,-3,4,3,-10,9,3,-9,-4,-3,-10,-1,-3,7,-7,1,1,-2,-8,7,4,-1,9,-6,-7,-2,-9,1,-9],[3,1,9,2,7,8,9,-1,-1,-2,-1,-7,4,-10,-7,3,-5,5,-8,-7,6,10,7,6,10,-4,-7,-8,4,-5,-4,-10,5,-5,2,-8,7,-4,7,-2,-9,10,5,6,5,-2,-4,-10,-10,9,-6,10,5,10,5,-1,-8,2,-8,-5,-2,1,-1,-4,-5,3,-2,-7,-9,10,-8,-10,-1,-10,-3,-3,-1,-10,7,-3,8,6,-1,6,-9,-5,7,-3,-10,-9,-7,-9,-1,1,4,2,4,-2,2,-6,-2,10,-8,10,-4,-4,-3,1,3,-2,10,9,-2,8,6,-5,-6,-10,5,-4,-10,4,-1,-9,-7,-9,5,-8,8,-10,-1,-5,-9,-1,6,7,-4,-1,-6,-7,-3,7,-6,-6,-4,-9,3,-1,-8,1,8,9,-1,-6,1,9,10,4,4,10,-8,2,-10,6,-7,-3,-8,-6,-3,7,6,9,-3,-3,3,-6,2,-2,1,4,8,-3,-8,-7,-3,-8,-10,6,10,-4,-5,-5,8,-3,9,7,3,-4,-10,5,-5,4,-9,-3,-2,-5,-7,7,-10,-4,-8,-4,2,-3,1,6,10,-3,2,10,-5,2,5,-7,10,2,2,-10,-8,-7,-2,4,4,-2,5,10,-7,2,-4,7,-8,-3],[-6,5,9,-2,-8,2,6,-8,-6,-1,-5,-4,-9,4,-1,2,-3,1,10,10,10,9,7,-6,-10,-5,7,-3,-2,8,7,1,6,9,-7,-5,2,-4,-5,-2,-5,-9,8,-3,-10,-4,-2,6,-8,5,3,-4,-5,-6,9,5,-4,-8,-8,-3,-3,-7,3,-4,-8,8,-10,8,3,8,-1,5,9,8,-6,8,-7,6,-10,-10,-9,10,3,9,-4,-7,1,-2,7,10,10,-3,-4,-6,-9,-3,-7,2,-4,7,9,3,-7,-2,5,-8,-1,2,1,-10,-4,-1,-7,-2,-5,9,4,1,8,-6,5,-8,6,-2,5,9,6,-10,-6,-1,3,2,3,9,-9,2,2,10,9,-6,5,-6,9,3,-10,4,-6,1,10,-9,-8,4,-3,9,-8,8,2,6,2,7,-8,5,7,-3,7,-7,5,6,-8,3,2,1,5,-5,1,-7,5,10,10,-3,7,6,3,-3,-9,-7,6,-2,7,8,-3,6,-8,2,-2,-7,-6,3,6,-10,-10,3,5,9,-7,2,3,-8,6,1,4,7,4,9,5,3,6,-5,3,5,-10,-8,6,-6,-5,-10,-8,10,10,9,7,-3,10,-4,-2,3,-9,-9,-8,-7,3,-3],[-8,-4,-10,-4,-7,-2,6,9,8,-2,-4,9,-5,4,-8,2,10,4,8,-9,-8,-1,-10,2,4,-2,-6,-10,-9,-10,1,-5,-7,1,1,-10,2,3,4,7,-9,6,-1,-6,-1,9,10,1,5,3,-3,-4,2,6,-3,4,3,7,8,-4,4,1,9,1,5,9,5,-2,3,5,-2,-7,-10,-8,-2,7,6,-9,-9,9,4,-1,-3,10,-2,1,-5,-10,-5,-5,-1,-2,-8,1,1,1,-8,-8,7,9,2,-7,10,-6,-6,-1,-1,3,4,-9,2,2,-4,4,-8,-5,3,-1,-9,-10,-8,-9,6,10,-6,6,-1,-9,-9,-10,-6,-1,-7,3,-9,-9,4,6,2,9,-5,5,3,2,-4,3,7,8,4,8,-4,8,6,7,10,-3,1,10,1,8,-6,7,4,-7,-9,-2,3,1,6,7,-4,-2,10,8,5,9,8,-5,1,3,-9,3,6,1,-1,-1,-1,-9,4,4,-5,1,9,8,-9,2,-5,-2,-6,-7,3,2,-9,-9,-8,2,-6,-9,-2,6,7,1,-10,4,-6,-3,-7,5,5,10,-6,9,7,6,-6,-1,10,-6,5,-8,-1,1,7,-5,-1,8,-7,-9,8,6,-10,10],[10,-10,-5,5,-9,-5,4,1,-5,3,7,-8,7,-10,2,-7,-5,7,-7,-8,-1,-5,3,10,-4,-1,5,7,-3,1,8,-8,-6,2,9,2,-3,5,-2,7,6,-8,-7,-4,-1,-8,2,-1,-10,4,5,9,2,5,9,-9,-9,-7,-1,7,-4,2,-10,6,7,1,-7,-1,4,-2,-7,-9,9,5,7,-5,-8,8,-1,-9,-8,10,3,-4,-7,-2,-1,-5,9,2,1,-8,6,6,-4,-6,7,6,9,-9,-8,5,3,10,7,7,-9,8,1,-3,-10,5,-8,9,3,-6,-10,10,10,-3,-10,-8,5,4,-9,-3,7,10,1,5,-9,6,-1,-1,4,9,-8,5,-2,-1,8,-1,4,-2,-1,10,9,9,2,-2,-6,2,-9,-7,-6,1,-2,2,-4,-10,3,-2,8,2,-3,-6,-7,-3,5,-7,-10,-8,-1,-8,-5,7,-2,10,-2,10,9,4,-6,2,1,-6,-8,-3,3,3,4,7,2,-6,2,-2,3,6,-5,5,-10,8,3,6,-7,-5,-10,6,10,6,9,-2,4,-6,-8,8,9,-5,-7,10,1,-4,-8,3,-2,1,-7,-6,4,-1,-2,-2,2,5,10,3,3,-2,-8,10,-4,-3],[-5,-1,2,1,10,9,3,-5,-1,4,-6,6,1,-5,-6,-3,1,10,-5,-1,6,-1,4,-2,4,1,-2,5,-3,-6,3,2,3,-9,-4,-7,8,9,-4,1,5,-10,-8,-8,-7,2,6,-4,-5,-1,-3,9,-6,5,7,8,7,9,-2,8,5,-1,-5,2,-8,-1,1,2,10,7,-3,-1,2,-6,1,6,-6,-9,-2,3,3,-8,-3,2,-8,-3,2,1,-6,-10,5,-2,-3,-1,1,-4,7,-9,-2,4,-9,-3,10,7,-5,2,-5,10,-5,-4,5,3,9,2,4,-3,4,-6,-4,-2,-1,8,1,7,-8,-6,-6,7,-2,9,9,-9,-10,9,9,2,8,-10,-7,-8,-8,10,-1,1,7,9,4,1,4,-7,-3,-7,-8,-1,3,-9,-4,-5,5,-8,6,10,-7,5,1,6,-10,7,9,-2,-9,-1,10,-8,2,9,3,-9,10,-2,5,-5,1,4,9,-10,8,1,-9,-3,3,8,-3,8,10,-4,-10,-9,-10,8,-10,-8,-4,-6,-8,-2,5,8,-9,-1,6,4,-6,-4,-10,6,5,-8,-4,9,-5,2,-3,8,-7,-2,8,-9,-1,-1,-7,10,-4,2,3,10,4,-10,2,-10,-8,-2],[-8,-1,3,-9,10,6,-6,-3,-10,10,7,-1,-7,10,5,2,-4,-2,4,1,9,-9,4,7,-7,7,5,6,3,7,-9,-1,9,-2,-5,10,-8,2,-3,9,-5,7,-6,-2,-9,7,8,-1,-1,2,3,1,-3,7,-1,-7,3,-6,6,-10,-7,-1,6,3,-4,-5,-9,2,9,-9,8,-7,-1,-1,-1,10,-1,4,-4,5,4,-8,-6,6,-10,8,-2,-10,-7,1,-4,-7,-3,-10,-10,6,-3,-8,3,-6,10,2,8,6,-2,5,-8,-1,-5,-8,8,-8,6,-1,1,-5,-1,4,8,-7,9,-10,-4,7,-4,6,-9,-2,-2,8,-10,6,-10,3,10,-2,-9,5,-3,-7,-9,6,9,5,-3,-5,-5,-6,-1,5,-6,10,7,-3,10,-5,2,9,3,1,8,-1,-8,8,-8,3,-7,-3,10,5,3,1,5,-7,5,-6,-7,-3,-8,4,-1,-1,-10,5,8,2,-3,-9,4,-9,-5,9,4,4,-5,7,7,-6,-10,-1,-4,2,-5,-6,-6,-7,9,-2,9,4,-6,10,9,-4,-9,-7,-7,10,9,-2,-10,7,-4,4,-5,-7,-9,8,-5,7,7,-6,-3,8,-4,-1,9,6,7,9,8,4],[-3,5,5,1,-6,-8,-3,2,-7,2,3,3,7,3,-8,-5,1,8,-2,10,5,-8,4,-8,5,1,9,7,4,3,8,4,8,7,-10,-1,-5,-7,-10,-10,-8,-4,-4,5,2,-1,-6,2,-6,5,4,-5,4,7,-9,-1,-9,6,-6,1,-8,8,7,9,9,-1,9,-3,10,-7,9,7,-2,1,-3,6,5,5,-4,-5,-8,7,4,8,-9,2,4,-6,-2,2,7,7,2,6,-6,-2,-9,2,8,-5,7,-5,-9,-7,5,-8,-9,-6,9,-10,3,1,-10,5,-5,5,2,-4,10,-3,3,9,10,-3,-9,6,-5,-6,-2,-3,5,-10,7,-7,-5,3,-4,10,-10,-3,-7,3,-7,-7,1,-5,-9,3,-9,2,-3,-2,7,-10,-6,-6,-5,-7,9,1,-5,6,3,9,-10,-6,5,-1,-3,-9,-6,-3,3,3,-5,2,5,5,7,-10,4,1,7,2,-3,-8,-6,-1,-1,1,-1,8,-10,3,-7,-8,10,-10,1,8,3,-6,7,7,2,-5,-10,-6,-6,-8,4,3,7,-3,-7,4,-7,8,8,1,5,2,1,-6,8,9,1,-6,-7,-7,-1,4,-3,-1,10,-10,10,-8,9,7,7,-9],[-9,-5,3,-1,-4,2,7,-8,-5,-10,10,5,4,-9,9,-9,3,7,7,2,-2,7,-8,-8,3,10,-8,5,7,2,9,4,-7,-10,8,-6,-6,2,7,-7,-10,6,-1,1,-2,-6,4,5,-3,-4,4,-3,-2,-4,-7,-1,-7,-4,-5,-6,7,10,-2,-1,-9,-5,-6,5,5,8,10,6,6,6,6,10,6,5,4,-2,-2,8,-7,-5,-2,-2,-2,-10,2,-10,9,-4,-10,4,6,1,-5,7,1,4,-4,-6,7,-3,-3,9,-4,9,-3,-2,-9,8,-9,7,6,-5,-10,-5,6,-7,-2,5,3,-10,8,-7,4,-2,10,-4,1,-7,10,-7,1,-7,2,8,7,2,-1,-4,-4,-9,6,-3,3,-9,1,9,-1,6,10,1,-4,-3,-1,2,-3,-2,-4,-7,6,-8,-3,-8,3,8,-9,-1,1,10,10,9,-4,-2,9,-3,-7,-9,-10,-5,-2,6,-3,6,10,-7,-9,6,9,-10,-9,-1,-8,9,1,10,-8,-7,-3,6,-1,8,1,-3,-1,-9,8,9,4,3,-3,-1,9,-3,-2,-10,3,-3,1,5,9,-4,-5,2,-2,-7,7,-7,7,-1,-2,2,-8,-10,-8,-10,-8,-5,-9,4],[-3,-8,6,-7,9,2,10,7,-8,8,9,-5,4,9,7,5,-4,-10,-10,5,-6,1,10,5,-4,-6,-3,-9,10,-8,-3,7,-6,10,-6,5,2,2,-5,-2,2,-9,10,9,8,-9,10,10,4,4,-3,-6,9,8,4,1,9,-10,10,1,7,-2,-7,-5,-10,-3,-1,9,6,2,-1,-8,4,1,7,5,3,3,8,1,10,-3,4,1,-3,-1,-7,-5,7,7,10,-2,-7,-1,6,5,7,-6,-1,-10,-9,9,10,-7,1,-2,5,-2,-10,9,6,-3,3,-1,-4,1,1,-9,5,7,1,-5,-7,1,1,-5,-6,-7,6,5,10,-7,-7,2,-4,8,-2,2,-9,7,2,6,-10,7,2,8,-8,-4,3,9,-9,-3,-9,8,-9,-7,-7,-1,5,-3,-1,-2,9,-6,-4,-10,-9,3,1,5,6,-2,-6,-2,-4,9,-9,4,6,10,4,-2,4,-10,-7,-4,-10,8,3,6,-6,-1,-5,2,-5,-3,2,-4,3,9,1,-4,2,-7,-3,-10,-10,-5,6,-10,10,1,-9,8,1,1,-1,-4,-9,7,6,5,10,4,-9,-8,8,-3,-6,-8,-8,-10,-5,3,-5,-8,-2,10,-2,10,1,-10],[-9,3,-4,2,-1,3,7,10,10,5,-10,4,1,3,1,-10,-8,6,5,4,-2,-2,4,-1,3,-4,4,6,1,-9,5,-3,-2,7,-8,-5,-9,-9,10,-7,9,5,1,-9,3,5,5,2,-8,7,1,8,9,-3,1,-4,-3,-4,-2,-7,10,2,-3,-5,5,-8,-3,6,-6,-3,-9,7,-5,6,-3,10,-8,-9,1,3,7,10,-8,4,-5,2,1,8,10,3,1,-5,8,-10,-1,4,-4,9,-3,7,9,4,9,-8,-7,2,-4,9,-2,-2,-3,2,1,9,-4,1,-8,-3,-8,7,2,5,8,-8,4,3,6,-5,7,-8,4,4,6,-10,8,2,-9,-6,3,-5,-3,6,-6,-6,-5,-3,6,1,-5,-8,10,-5,-9,4,-4,-2,-9,-6,-7,9,-7,-3,10,-4,-6,-1,2,-5,-6,6,-8,-7,-5,4,-7,6,-5,-6,-4,3,-5,-6,2,-10,10,8,-2,-7,-10,-1,-5,-1,-7,-9,-9,10,-9,-1,-10,9,6,-8,-2,5,7,1,2,-2,10,9,4,-5,10,3,-8,-9,-8,3,3,4,-4,2,6,5,5,-5,-5,-1,-8,-4,5,-1,10,4,1,-3,-10,9,9,2,-7,-3],[9,9,10,-6,-7,-7,10,-2,9,4,-10,-5,-8,-3,6,-9,-3,4,2,-6,4,7,7,5,-5,-5,-5,-6,-7,-9,-6,-8,9,-10,-2,1,2,-2,-7,4,7,9,-10,-4,-3,-2,1,7,1,-10,-6,1,-1,8,9,2,-3,-9,-5,2,3,-8,-3,4,-4,9,7,9,-2,-6,3,8,-8,-9,-9,2,4,-8,-4,-4,-1,10,2,8,10,-6,1,-7,2,-3,-8,7,-4,10,1,8,-7,-10,10,5,-3,3,7,-4,-7,-2,-1,-8,3,-2,-1,6,9,-7,5,8,-2,-1,-2,-8,3,5,-8,-8,-10,5,3,9,7,-2,7,10,3,-8,6,4,-5,-3,10,4,-4,-1,-10,8,4,10,9,3,-9,7,-9,5,9,-9,-1,-9,3,1,-10,-9,-8,8,-8,1,5,5,10,2,-9,-8,-5,5,-9,-1,5,3,-10,-3,3,-8,-4,2,4,-1,6,-5,-8,-9,9,4,-2,7,10,-2,6,1,4,3,-9,5,6,6,-2,-3,-7,-3,5,-2,-2,8,-6,-9,4,8,-8,9,-3,-2,-2,-6,-1,9,-10,1,-9,3,9,4,6,7,5,10,2,2,4,-4,-6,-2,-8,-2,3,-10],[7,-6,-8,-7,-10,2,6,6,2,6,5,-8,-3,9,6,-8,7,-6,-6,7,-1,-6,3,-8,3,6,-3,2,5,-2,5,5,-2,7,5,4,5,2,1,4,7,-4,4,-6,1,1,-8,10,-9,-7,-2,-10,-10,-6,6,9,-10,2,10,5,6,1,-2,3,7,6,3,-8,-2,-8,-2,10,9,-8,-1,-4,8,-2,-6,2,7,5,-5,6,5,6,8,-1,-7,8,1,5,-5,2,4,-5,3,2,2,7,-2,5,8,-7,-7,3,6,9,-6,5,4,-10,9,-9,2,8,-9,-3,9,4,-6,-3,-6,6,-3,2,10,-4,-6,9,1,3,8,-6,10,4,6,10,10,-4,4,10,-7,-2,9,2,-7,-9,5,-4,7,2,-7,-5,-8,-10,4,6,-4,4,-10,-3,-5,3,-8,-6,-7,8,9,-1,-2,-9,10,-8,6,10,-2,4,-5,-9,6,-10,2,-6,-1,7,-7,2,4,2,1,7,-6,1,9,-4,3,-7,2,-7,-10,10,3,-5,-9,-10,-10,4,-9,7,4,1,7,-2,1,4,6,-1,6,-7,-4,5,-3,9,-3,7,10,-5,-10,-8,6,4,-7,-10,-8,6,-3,5,-10,-7,-3,-10],[-6,1,-2,7,-2,2,4,10,9,6,-9,-8,-9,1,1,6,6,1,6,-6,9,-8,7,6,6,-10,5,5,4,6,9,3,1,1,-2,-6,2,3,-1,-9,-1,3,8,-9,-4,-6,-9,8,2,7,-6,-4,-6,10,-8,-6,10,6,-7,-8,2,-4,4,-10,3,2,-2,-8,5,-10,8,1,-5,-4,4,3,-8,8,1,10,-7,3,-9,10,10,-9,3,-8,9,-1,6,8,3,7,5,-7,-2,-2,1,6,-9,2,5,2,-4,6,9,5,1,5,3,-6,2,5,9,9,-6,-2,2,6,1,5,5,1,6,-2,9,2,-8,-7,10,-5,-8,9,2,-6,-5,-2,-3,-8,8,7,-10,1,8,4,-5,-6,5,2,1,2,-1,10,-7,4,-10,7,2,9,5,9,10,2,3,7,-4,-1,3,-8,10,10,-2,10,-2,-5,-2,-8,2,-2,-7,-8,-7,-3,-8,3,-4,-10,9,-2,10,-9,-2,5,-8,-6,5,6,-2,-10,-2,10,5,2,-1,4,-2,4,-1,-5,-5,6,6,9,2,10,-4,10,2,5,8,5,-4,3,5,8,10,1,7,6,1,5,-8,-7,9,-4,-1,9,5,3,-2,3],[7,10,3,-3,-3,2,-3,10,8,1,10,-5,3,-6,-8,-9,-2,-9,6,-9,-2,8,7,9,1,-7,1,-9,-1,-1,3,-6,-8,10,-8,-3,-10,-8,-9,4,-9,5,6,-6,1,6,5,1,-8,7,9,-8,1,8,3,1,5,-1,2,-8,5,6,-7,-3,-7,-2,-10,-7,-4,-10,9,6,1,-6,7,5,9,1,-10,2,-7,-8,-5,-8,10,-6,3,-4,1,7,-4,-9,-6,9,-5,7,-7,8,8,9,-8,-8,8,3,-1,-9,-5,-10,-1,10,1,-9,-10,8,-5,-7,-5,3,-8,5,9,8,6,-6,6,4,-3,6,10,-1,-3,7,7,1,6,-7,-2,10,3,-5,-4,-6,10,10,6,-6,-2,-6,2,-4,-3,-3,8,-5,1,-9,8,4,9,-9,-5,-5,7,8,9,8,-5,-9,6,1,5,-4,7,-3,10,-3,-7,4,10,-3,-3,4,-2,8,-8,-7,1,6,-9,-6,10,-6,8,3,1,10,7,-2,9,-10,3,10,9,3,2,7,-9,-1,2,-8,1,8,1,8,-2,-5,-6,-8,-10,2,-2,-5,1,-9,-1,-7,2,10,-7,-3,7,-5,-4,9,-6,5,-10,-7,10,6,-3,-4],[10,10,2,-6,3,3,4,1,-3,-8,-9,-5,-2,-10,6,2,8,1,7,-1,1,-8,-8,-5,-7,5,7,-7,-1,-4,3,-10,7,-2,-3,5,-1,-8,-3,-1,7,10,-5,5,-6,-2,-4,-1,-6,-7,8,-2,6,9,5,2,3,6,-9,-4,9,-3,8,5,-8,4,4,-8,-6,-10,4,-2,3,7,-10,-6,-6,-3,-4,-10,-1,-10,-2,5,-5,10,-8,8,-2,-1,7,1,-6,-8,3,5,-4,-8,3,-6,-2,-10,1,-10,-5,5,-8,-5,-1,5,3,-7,-4,5,2,-8,10,-3,-7,3,-3,4,-7,6,-2,-1,8,3,-6,-1,-10,3,8,10,-10,-9,-1,6,2,5,2,10,-7,4,-1,-4,-6,2,6,1,-5,2,-3,-6,-10,-10,1,6,5,3,-7,-9,-5,-8,5,8,-8,-7,-9,-6,4,-3,10,-4,9,10,-4,8,-4,-10,-4,8,-9,2,6,4,6,6,7,10,7,2,3,-3,-6,3,-3,3,5,-7,5,-2,1,6,10,-3,-6,-2,-5,-5,8,-1,8,-1,9,-6,1,5,8,1,-7,-6,-7,3,3,-3,5,-2,-9,-10,2,3,1,-7,-1,-8,-1,3,-3,2,-6,7],[-10,-6,1,-9,1,-8,2,-3,2,-1,-6,-2,3,-4,-2,10,-9,3,4,5,-6,8,-6,10,10,2,-6,-4,-2,-7,9,-6,-4,2,-3,-3,-10,6,10,6,7,-6,2,-3,-8,9,-8,10,6,-9,-9,-7,-1,-4,8,3,-6,8,8,-6,-2,6,2,1,7,8,-2,4,-9,-4,-6,2,-5,4,2,2,5,-5,5,4,5,10,8,-1,-10,-3,2,-10,6,2,2,-3,1,3,-5,10,8,5,1,4,-3,-10,2,3,4,5,7,-4,-9,6,3,-2,-3,-8,5,8,8,-2,-5,-8,10,6,5,-8,4,-6,10,-7,-9,9,-8,-1,-2,7,-7,8,-10,7,-2,-2,10,3,-8,-3,9,10,-9,-4,-3,2,-9,9,5,-7,-4,-7,-6,4,-3,10,9,9,-10,-10,-7,-5,3,6,-2,6,1,-10,-4,-3,-1,10,3,-7,4,8,-10,-6,8,10,6,-8,7,-5,2,9,9,5,-9,-6,2,4,8,-4,3,-6,7,-7,-4,7,-8,-1,-8,-10,-1,-9,2,-6,5,-7,-1,9,-9,-4,7,-8,10,4,8,-4,-2,-3,-8,7,6,-4,-6,-4,-9,7,2,3,-7,-7,-10,-3,3,9],[4,5,-1,-8,1,-4,-2,6,-8,-5,5,7,2,10,-7,-7,6,-2,10,-3,-6,1,8,2,-8,9,9,-9,-10,-8,-7,-10,6,7,4,9,5,-9,-9,8,-10,-1,7,-1,6,-3,-2,-3,7,-8,-9,2,-1,8,-2,9,7,10,-7,-10,10,-7,8,-3,-9,-5,-10,-6,-10,10,3,3,-9,-4,5,1,-7,8,-8,10,3,-10,6,5,10,-5,7,5,-4,4,2,5,-6,7,-5,3,-6,-5,9,-6,7,4,-1,2,9,-7,3,-4,-6,-3,10,10,-1,6,-5,10,6,-6,4,-4,-3,-6,2,5,3,-8,-6,-10,-3,6,1,-2,2,3,7,1,-8,-6,8,-10,-9,-5,7,1,-2,-10,5,-9,1,4,-9,5,1,10,3,2,8,-7,3,-7,-7,9,8,-10,9,-6,-9,8,4,-1,9,9,1,2,-3,10,-7,-9,-4,-5,-3,1,-2,1,-8,1,6,-5,-5,2,8,-6,-10,2,-6,-6,8,8,-8,-3,1,-4,-7,3,-7,-10,4,2,2,7,10,8,3,-7,-5,9,-8,3,3,-7,-1,-7,-2,-1,2,-4,-3,4,8,-1,4,1,3,7,-3,6,1,1,10,-10,9,-9],[-6,-10,-4,9,1,10,-7,-7,1,-4,-7,-4,4,1,7,8,5,-10,-9,7,-3,3,5,-10,-5,7,-9,9,6,-9,-2,-10,6,-7,1,6,-2,3,1,4,-10,-10,-5,-4,-10,7,1,10,7,4,-1,1,-9,3,-2,10,9,2,-8,6,-1,-2,10,10,9,-5,-4,6,-5,-7,-7,10,8,1,-10,4,9,6,7,-7,1,9,-10,-1,5,1,-7,-1,5,-1,-10,-8,2,-8,-9,-7,9,-8,-10,-4,-8,-10,-8,-2,-2,9,1,-1,-9,-3,-6,-1,-6,-3,-9,-3,4,4,4,-6,-2,-8,-10,5,2,2,-8,-4,-1,1,4,6,9,1,-7,-10,9,1,9,-3,-4,10,9,6,-10,9,-3,3,9,5,-8,7,1,1,4,2,8,-7,3,-6,-2,-9,3,7,6,8,-5,5,2,7,-9,-1,-10,-5,-4,7,9,-3,10,4,1,3,-8,-3,4,4,10,4,6,4,4,7,9,-8,9,-6,4,8,10,2,-5,9,4,7,5,-1,3,4,8,-3,-4,7,10,1,9,4,-10,9,-8,-3,8,-4,9,-4,-10,4,-8,1,10,-10,3,-3,8,-6,-8,9,-10,8,-1,-8,9,-4],[-7,-7,-4,4,-10,2,-8,-4,7,4,-8,-9,-3,9,-9,1,7,10,4,1,-2,-3,1,-9,-1,-6,-3,8,-9,10,-10,-5,8,10,-1,9,4,-6,-7,3,-5,-7,-3,-4,1,-4,4,10,5,7,1,-3,-8,-9,-3,-5,3,-9,-6,-3,-9,-10,6,-9,1,1,4,4,3,6,-8,-4,-2,9,8,-7,-9,-9,8,-8,-6,9,-10,-9,-10,9,-8,1,8,10,-4,-10,-3,-7,-9,-9,1,4,-3,-6,-9,-1,8,7,-3,-9,-3,9,-1,6,-1,-4,5,8,10,10,-7,-6,-4,10,-1,2,1,1,-10,-2,4,-5,-6,6,7,7,1,-8,8,2,-10,-7,-8,2,9,-8,2,3,-6,-7,-9,6,8,4,-3,-9,-3,-1,7,8,9,-1,9,10,3,8,-2,1,-10,7,-1,6,3,2,3,5,6,-3,-10,-2,-10,6,-7,-1,-1,-10,-5,4,-6,-7,8,8,-8,1,-6,10,5,8,-2,-1,-9,3,9,-9,6,3,8,10,-4,3,-3,-8,10,4,-6,6,10,-7,-9,-6,-4,8,2,-7,8,8,4,4,3,7,5,-5,3,3,-10,-6,10,4,4,10,-1,3,-6,1,-5,9],[2,-4,-3,8,6,6,9,-7,3,-3,8,2,-5,3,1,-9,-5,-9,-9,-2,10,10,1,-2,-7,-9,-3,10,5,-9,7,-1,-8,-1,-9,2,4,-9,-1,7,10,-4,-8,2,-10,-2,-6,9,5,-2,4,4,-8,-3,7,-7,-8,9,-5,-1,-9,-2,-8,-2,-5,-9,-2,9,5,-9,1,-9,-6,7,7,-8,5,-5,3,7,-4,8,-7,-6,-8,7,2,10,-2,3,7,10,-1,4,-4,3,7,-4,8,-9,8,8,1,9,-5,7,-2,-5,-1,7,9,-3,-1,3,10,8,9,7,-3,7,1,-1,10,5,4,7,4,-2,-9,-6,8,-7,9,-8,2,-10,9,5,-7,9,6,5,-7,7,-1,-7,7,3,-7,8,-6,2,2,-5,10,10,-1,4,-1,4,-3,8,-4,-8,6,2,-6,9,2,9,-7,5,-6,-8,1,-9,-4,6,10,10,-10,7,-9,-6,-10,2,-7,-7,-8,-8,-6,5,3,-9,3,-10,2,-1,-6,1,-3,3,-1,-3,-7,2,-9,5,-6,7,-4,4,-6,8,-1,6,-3,4,-3,-7,-7,4,-5,9,3,-3,-3,-2,2,-1,-8,-7,-7,-7,9,1,-10,-3,5,-6,-8,-3],[8,1,5,2,-10,4,-3,10,-2,9,7,9,-2,10,6,2,-1,3,-5,-9,8,-4,2,-3,4,-8,-2,5,-2,7,-8,-1,1,5,2,5,-7,9,3,-6,3,-10,-1,-2,-9,10,-7,-6,-6,6,-5,6,-10,-1,-8,-7,-1,8,1,-2,9,8,2,4,-5,5,-1,-3,-7,-1,-9,10,7,-1,-9,1,-4,2,2,-3,-6,10,1,-8,6,-7,-2,-7,4,9,1,-1,-8,-1,9,-1,4,4,-3,-6,-4,7,2,4,2,-1,-3,5,5,4,-2,1,-6,-1,-9,-9,-2,8,-10,9,-8,-2,3,2,3,-4,-3,-1,1,-8,-3,-3,3,10,-6,5,1,2,-7,4,4,-7,2,-4,3,1,-8,2,6,7,1,5,-1,6,3,8,-7,-4,4,-1,-9,3,-9,-1,5,8,-9,-9,-1,-6,6,-4,10,3,-6,-1,9,2,-6,-4,10,8,6,-10,2,-1,-2,3,-3,-8,-9,1,2,7,-6,-1,-4,6,6,-6,1,-9,2,-7,-6,-3,-1,-4,-10,10,-1,-4,10,4,-5,-4,-8,9,5,-7,8,-8,4,3,3,2,4,1,-4,-2,5,-5,-1,5,10,-6,1,1,-8,-1,-10,6],[-9,-10,10,-3,-7,10,-5,-3,4,-5,-5,-2,3,-3,8,-6,4,3,-7,-1,-5,2,3,-6,7,5,10,-5,3,-5,-7,8,-7,7,7,10,-8,-3,10,-1,-3,-8,-2,-7,3,5,-4,-5,-6,-7,-10,-9,9,-1,-3,5,7,-10,-8,-7,10,-5,7,-5,10,-7,7,1,10,-5,6,-9,-3,5,10,4,-4,-6,9,-5,3,1,10,8,-8,10,-4,9,2,1,-4,1,6,-10,-9,5,-6,4,10,3,6,4,-4,7,4,7,-3,-7,-6,-5,1,6,6,-3,-3,-6,2,9,2,-4,-4,-6,9,-9,2,9,1,9,9,-4,10,3,2,8,10,10,-2,4,-2,6,4,-5,5,4,8,6,10,8,1,-3,9,-6,10,4,-10,5,-8,-3,-4,4,-5,-10,10,-6,-5,2,4,8,-8,7,-1,-6,-1,-1,-3,9,-5,-4,8,-6,1,-8,5,-9,8,-3,-8,-9,5,6,-5,8,5,-5,-4,-5,-10,-9,8,-10,-4,5,-1,1,-4,-5,-5,1,7,-10,-8,5,9,-4,2,5,-8,-9,7,-4,10,-2,-4,-2,8,3,8,-5,-2,6,-5,-3,3,4,4,3,-7,9,-5,-4,5,-10],[-5,-2,5,2,-10,5,-7,-5,6,6,-2,-7,-4,-1,-10,3,-5,-2,-4,-10,-1,8,-3,10,-1,-5,9,-10,-4,-3,-10,-10,3,5,8,10,10,9,10,-7,6,-4,5,-8,-2,5,-9,-7,9,-8,7,6,7,-5,5,-10,5,5,-5,-10,6,-9,2,-9,-9,-8,6,-4,-1,2,10,-6,5,4,6,8,-1,9,4,4,5,-10,6,-4,4,3,-7,10,2,-3,-9,-2,-8,6,9,5,-2,4,10,4,-3,9,-10,3,4,2,-7,-6,5,8,3,-7,10,-4,-9,-6,7,-4,4,-1,-5,2,9,-8,-1,8,10,9,-7,2,-3,-10,-2,9,2,-4,7,1,-3,10,-5,-10,-6,-7,-3,-10,-5,-7,3,-5,-10,-5,7,10,-3,6,1,-5,6,-1,-8,5,1,4,-10,10,2,-6,1,8,8,-4,-9,-7,8,4,-1,3,1,-6,10,2,1,-8,-5,8,2,4,10,6,1,6,-7,2,8,-10,5,-10,-9,1,-5,-7,1,-8,-5,9,-4,-8,5,10,9,4,3,10,-2,-6,-8,-6,4,-9,10,-5,-4,9,2,-5,-1,-4,-2,-6,5,-5,-5,-5,-7,-8,-2,-3,-5,-6,-2,-9],[-1,-9,9,-9,-9,1,-5,5,-1,-1,5,9,-6,8,-7,3,1,-3,9,-7,6,10,-4,-5,7,8,-10,3,-6,-6,-9,-3,2,3,7,8,9,9,3,10,2,6,-7,-9,-2,-5,3,3,5,-7,-5,-10,-2,-8,2,9,-6,-5,-3,-5,9,-8,-10,-8,-5,7,-9,-2,5,8,-8,1,-9,6,-1,9,-10,10,5,5,4,-10,9,2,4,1,-6,-5,-9,8,-1,-9,1,-3,9,8,9,4,2,4,-7,-9,9,7,6,-9,-10,9,8,-2,9,-10,-10,10,2,7,1,10,9,-10,-3,-1,5,-8,4,-2,10,3,8,-3,7,10,7,10,9,2,-6,7,-4,8,5,-1,2,6,-5,-10,8,-2,10,-10,9,1,4,9,-2,-6,-7,-1,-10,8,-5,-10,6,7,-2,-7,8,6,-5,-4,4,-4,-8,1,-4,-3,-7,2,-3,-1,8,5,5,10,10,9,-3,-8,-9,-6,8,-4,4,-8,6,3,-7,-8,4,4,-1,10,5,-4,7,-9,-3,9,10,-4,9,8,8,10,-5,7,-7,-1,-7,1,7,8,-5,-5,6,-9,9,-3,-3,-8,-7,-6,4,-1,2,-4,1,7,10,-9,3,1],[5,-10,7,9,-5,-10,-10,-9,-2,1,6,9,2,-2,8,-9,-7,3,9,10,7,-2,-3,-9,-3,-8,8,4,-7,-7,2,-10,-6,-5,-7,8,4,-10,10,-2,8,1,9,-8,-2,3,-2,2,-8,-1,-1,8,9,-4,7,-2,-8,-3,-10,3,-5,-5,9,-4,-6,3,-6,-7,-1,5,-9,-5,2,3,-10,-4,-3,1,-8,-1,2,2,-5,2,-9,3,4,6,5,-7,-8,-1,2,4,-9,-4,7,6,6,7,6,5,8,-7,-1,-10,-7,-9,-3,9,-6,-10,9,-6,-5,-10,4,3,7,5,-6,6,-3,2,-7,-7,-2,-7,-4,-5,7,2,-1,3,6,-3,-2,6,3,1,-9,-3,7,3,5,2,5,5,-10,-1,8,-7,-4,-6,-2,-7,7,-3,1,4,8,-10,-2,7,7,6,-4,4,9,5,6,2,3,8,5,-2,9,-6,-8,1,-2,1,-4,-6,-4,4,-4,-5,-6,-2,4,4,5,2,-4,9,4,4,4,2,-10,9,-5,-2,5,9,-6,-3,-6,4,-10,8,4,3,-1,-5,-1,4,9,4,9,-3,8,-8,1,-4,7,-4,-1,9,1,-2,10,-6,-3,-3,4,7,-4,-8,-7,5],[-2,6,-7,7,3,-10,-7,-4,-9,-3,4,6,-5,2,-5,-7,-7,4,8,-4,3,5,-2,-10,-5,3,3,7,4,-9,6,7,8,9,-5,8,7,-9,10,10,-2,-5,2,4,-1,4,8,-3,5,4,-5,9,8,10,7,3,3,-8,-2,-1,-5,2,-6,-4,1,2,-2,7,-9,8,-7,9,1,-6,-10,-5,2,10,6,-9,-2,2,-2,-4,6,-8,2,-4,5,-5,-7,-7,10,6,-1,-3,-8,5,-2,10,10,2,5,5,7,2,10,4,-9,6,-7,-1,3,-6,6,6,6,-9,5,-1,-6,8,-4,-8,5,3,4,-9,-1,-4,3,-2,-8,-9,7,-7,5,-10,10,-2,-1,-6,-8,-2,2,-5,-5,-1,1,6,-10,-10,-8,3,-8,2,-1,-4,5,-7,1,-1,2,7,-4,9,6,10,-2,2,10,-9,4,2,-9,-6,5,-5,1,-8,7,-8,1,-8,3,-4,6,5,-7,9,8,-6,-5,9,5,9,-7,6,7,10,4,2,-7,7,-6,2,2,-6,-1,2,-2,-7,-10,-6,6,6,2,-7,-4,5,-1,-3,-6,-1,-4,2,-6,5,-3,2,7,-9,-5,-7,1,9,2,-8,-3,-5,3,-4],[-8,4,10,-1,3,7,6,-7,10,2,9,10,10,10,-5,-2,-3,-6,-2,3,9,-3,6,4,7,-7,8,10,-3,1,5,4,-2,1,9,1,-4,5,-4,5,6,8,9,2,-8,-1,10,9,8,-8,-5,-5,3,10,-10,9,-7,10,4,-10,-6,-5,8,8,7,-3,5,3,9,-7,10,-4,4,-5,-7,3,7,2,4,-1,6,-3,-3,2,10,10,-7,9,10,4,-8,-3,-6,2,4,9,9,-4,-8,2,-8,-10,-9,-8,2,8,-8,-6,-7,4,-4,-3,5,-3,6,1,-2,-8,-7,-1,8,-8,4,1,-4,5,8,-9,7,-5,1,-6,-6,-5,-1,-1,-10,7,7,-5,5,-7,10,-5,9,-2,6,5,-4,-5,9,-6,-9,2,3,4,-9,-10,-6,6,6,10,-7,4,-5,8,8,-2,-9,4,-4,-7,-1,2,3,-5,-7,1,-9,-5,5,-10,-9,4,9,-7,6,3,-2,-5,2,-2,-6,-5,7,1,5,-8,8,-2,8,9,7,3,9,-2,9,-2,-6,-2,-6,8,-8,8,8,10,-1,-2,-3,8,3,2,6,9,-10,-7,-5,8,1,9,7,-5,-10,-9,-2,-4,-6,6,-10,-4,-5,-7],[-5,-6,-2,-8,-6,-9,10,9,4,-6,10,10,7,10,-6,4,3,-10,5,-4,-10,9,-1,-3,-4,3,1,3,1,7,10,9,-1,6,6,9,5,8,-8,10,10,-3,-9,8,-10,5,6,3,2,7,3,6,6,1,6,6,-5,8,7,-5,-1,-9,6,-8,3,-10,1,-4,1,1,-9,5,5,-9,9,1,6,-9,-2,-3,-10,3,9,10,-3,9,-7,-5,8,-5,9,7,6,10,-2,-4,7,6,3,6,-7,9,9,-8,-9,6,-9,-7,-10,2,1,-6,3,4,8,-3,7,10,-5,5,-1,6,-5,-6,8,-8,-6,-7,8,7,3,2,-4,-6,-1,5,-3,4,3,-4,8,2,-8,-2,-2,2,-9,-7,-7,3,3,1,-8,5,-3,-4,3,-2,5,-9,3,4,6,-4,-6,4,-5,-7,-8,-6,-1,1,-6,-5,8,-2,5,-2,9,7,-5,5,4,4,-2,6,-3,-7,1,-2,6,-2,9,-4,-2,-2,-2,6,6,-1,-2,-4,-3,6,5,-4,1,3,-2,8,8,8,8,-7,5,5,-4,-6,1,2,1,6,4,4,6,7,-4,5,2,-8,-3,-6,-3,-3,-6,10,-1,-9,-4,10,-7,-6],[-3,-2,-7,3,5,-7,4,1,-5,5,-7,-10,9,3,-8,-6,-3,7,1,2,-9,-4,-8,-1,6,-8,4,6,-9,-9,9,7,8,-6,4,-4,-6,6,-3,-9,-4,-4,9,4,-10,-5,10,2,8,6,-5,-2,7,7,6,-1,-4,-1,-4,1,7,2,9,-5,4,-8,-10,-2,-10,-8,-4,7,5,-1,2,-2,7,6,2,3,-1,-4,1,9,-4,8,-8,-6,-2,2,8,-10,-10,10,-8,-7,-6,-9,7,-10,6,9,-2,7,-1,-5,4,3,-4,7,10,10,-5,4,-8,10,-10,-10,-3,6,9,-4,-9,-9,4,4,10,-9,-4,8,5,9,-9,10,7,8,9,9,1,-10,5,-8,-9,-1,-9,-6,7,2,6,7,-9,-1,7,6,-9,-2,10,9,-6,-2,-7,9,-6,9,-4,7,-1,4,8,7,-8,-2,-8,10,9,-1,4,2,1,-4,-8,-2,9,9,8,7,-3,-6,9,-9,10,7,-9,6,10,7,-10,9,5,-9,1,8,-6,-7,2,5,3,10,1,-2,-5,-1,9,6,-7,8,-4,2,-3,-7,6,-1,-4,-10,6,-7,4,7,9,7,10,-2,4,-4,-4,3,3,-8,4,1,4,2],[10,-1,-3,-5,-6,7,2,6,-2,-7,-5,-1,4,1,-2,8,-2,-10,-9,-8,-3,-6,8,-4,-3,7,-5,8,-10,9,-2,3,6,-9,-10,4,3,10,-6,-4,-3,-8,9,10,-3,-1,-6,6,-10,8,3,-5,4,10,10,-8,4,3,-9,3,2,6,-10,9,-1,-2,-1,-1,-2,4,6,5,9,3,1,-2,2,10,-4,4,5,10,-2,-10,1,-6,-7,6,9,4,9,-2,5,7,-10,-5,-8,3,-5,6,-9,4,3,2,3,-3,-1,5,6,7,2,3,4,-10,8,-4,8,3,-10,-5,-10,-3,-3,8,8,-7,5,10,5,10,-4,10,-4,5,-7,-5,1,5,6,-5,-9,7,-2,5,7,-1,-10,4,6,-8,-10,-8,-10,-6,8,-5,6,1,10,-7,1,-7,1,-7,-1,-7,-7,-3,-10,5,10,7,3,4,-5,-10,1,9,1,8,-10,-4,-2,4,-7,1,1,5,-7,-9,2,-9,1,4,2,3,-6,9,-7,1,-3,5,-2,2,-1,-2,-2,-7,-6,4,-10,-2,-5,4,7,8,-10,8,3,-1,-10,-9,-3,5,5,9,-6,4,5,5,-5,-4,8,-7,9,-7,-3,1,-3,7,-6,5],[-1,-3,-9,8,3,-1,3,2,-7,3,5,10,-2,6,-5,-2,-2,-3,-5,-6,-5,1,-4,4,-4,-5,-2,-7,-2,-4,5,-3,1,1,9,6,4,-3,-2,4,-3,5,4,10,4,-4,10,-10,-5,6,-8,-9,-10,1,-1,-6,-3,-10,2,4,-7,-6,8,-7,7,-9,6,7,2,5,-2,8,3,-4,-1,2,-9,-3,4,-1,3,-6,-8,2,1,-3,-2,10,-8,-2,-5,7,3,-2,-1,-10,3,-1,10,-10,5,-6,4,-4,-4,-3,1,2,9,-2,7,5,9,2,3,2,7,7,-6,4,-7,1,-7,3,9,8,-7,-7,-1,8,2,2,-8,1,-9,-5,3,6,9,6,5,3,9,10,10,3,-8,1,3,-9,8,1,-2,-9,-8,-8,-3,7,-2,9,7,-3,-7,10,-6,-2,-6,6,-10,8,4,-1,6,6,-8,-7,-8,-9,-5,-5,-9,7,-8,3,10,5,5,8,5,9,-10,8,9,3,8,6,2,3,6,9,-7,-7,-2,8,-10,1,-5,8,-6,-7,8,2,-9,-4,-2,1,9,6,5,-1,10,7,-8,-9,-7,-9,-2,-6,5,-5,3,8,4,-5,7,7,7,1,10,-2,-8,3],[1,10,9,2,-9,-6,-4,3,-1,7,4,-5,-1,1,-7,9,4,-3,5,7,-6,7,7,3,2,-6,-9,-3,10,-10,-10,5,10,-7,3,-7,8,-3,7,3,-6,-8,-1,-7,-4,-8,-8,8,-2,1,10,6,-5,5,5,-3,-10,-5,-1,2,9,-2,4,5,7,-3,5,7,10,-5,-1,-3,-9,-1,-9,10,2,5,1,2,-7,5,6,-5,3,9,-6,4,-1,10,8,9,1,6,5,8,-6,-5,4,-9,10,10,10,-3,-8,2,2,-6,7,-5,-3,-8,5,-1,3,-5,-6,1,8,9,-7,-10,4,4,-9,8,1,10,9,-6,-1,-7,3,-5,2,-6,8,-9,-3,6,9,5,1,-7,-9,5,3,9,10,6,-1,-2,-10,1,-2,-7,-2,3,2,-4,-3,2,-2,2,6,-5,-2,-4,-8,6,-6,2,-7,-1,-5,9,5,3,-2,-1,-3,-3,-5,-7,-6,2,-6,-9,-1,2,-9,-3,-2,-4,-9,1,3,-7,5,-1,7,-2,-10,-5,-1,-5,8,5,-4,4,-5,-7,3,5,8,-8,9,-7,8,10,-1,-2,-4,-10,-7,4,-1,8,-7,-9,-1,9,4,-1,-1,6,5,-10,-6,-9,-5,4],[-4,-10,-7,5,6,8,-3,6,9,4,9,-4,6,-5,6,9,-2,-10,-9,-9,-2,-7,-7,7,-3,1,-8,-7,10,-9,3,-6,-8,6,-5,10,-1,2,-10,-5,1,6,-2,-6,-7,9,-3,-5,-5,-8,-5,8,7,-5,1,1,7,-3,-2,-3,6,-7,1,1,2,-6,10,-6,-6,-6,-2,-10,6,-9,-4,5,4,-8,3,-1,-1,-5,-3,-9,-1,-5,-2,1,-8,-6,3,-2,-5,-4,-10,-5,-3,1,9,-6,-5,-3,-8,6,-7,10,-4,-8,5,-7,-8,5,3,9,5,2,10,8,-4,-6,5,-10,10,-9,-10,9,9,1,-3,-5,8,10,-5,-6,1,9,-9,6,-4,6,1,4,-3,-3,-7,-5,-8,-5,-1,1,4,-9,-6,4,-10,-8,8,-3,8,7,6,2,-5,8,-7,-10,-8,4,4,8,10,4,-9,-9,7,-4,-6,-9,-3,-8,6,1,-7,-10,5,-4,3,3,9,8,-5,-10,-9,5,6,4,1,5,-2,-10,10,-2,-2,-4,-4,-6,5,4,-5,-7,2,2,-9,-3,2,10,7,-7,-4,9,-3,10,1,1,-3,-6,2,-10,6,5,-7,4,-6,5,3,-9,1,4,3,7,-8,1],[-4,2,-4,-10,2,7,6,-8,-5,7,6,7,9,-5,8,6,7,-4,6,2,-9,-6,10,-5,-2,-3,4,-2,-6,9,-3,8,6,8,7,2,10,2,-3,-9,1,-7,-3,-9,6,-7,-6,8,8,-4,8,10,5,10,-8,6,10,-6,2,4,-3,8,7,-1,-4,9,-2,-1,-8,6,-9,-7,6,4,7,8,10,-9,-2,3,5,7,8,4,-1,3,-3,-1,-4,-6,2,2,8,10,-4,-5,4,8,-1,7,5,2,-2,4,7,-8,-4,2,4,1,6,10,-7,1,3,10,9,3,-4,-7,6,9,-8,1,2,3,-9,7,9,6,5,9,7,-7,-6,-1,2,4,10,5,9,-1,8,6,5,1,-7,7,-10,-4,-9,-3,-6,2,-2,9,4,4,9,9,-2,-7,-1,-1,-7,1,4,8,1,-8,-6,6,9,1,-10,4,-3,8,-3,6,8,7,-1,1,-4,7,-8,-9,-5,-6,1,6,3,7,-5,-8,-2,4,-10,7,6,4,-9,10,3,8,8,-7,7,6,9,-6,1,-4,7,-2,7,8,9,1,-5,-6,-2,3,7,5,5,4,-3,6,-2,-4,4,-7,1,-5,-7,-1,-3,10,6,-5],[7,9,-10,10,1,4,-8,-10,-9,7,-5,-4,-1,-10,10,-9,5,-6,3,10,4,1,5,2,6,1,-8,-2,1,-7,7,9,4,-10,5,-2,4,-2,-5,-4,-6,4,1,-2,-10,-3,-4,1,-10,-6,-1,-6,2,-3,-2,7,3,9,-9,-4,9,8,-4,1,9,10,6,4,-2,2,-7,4,-2,2,4,-2,7,-6,8,4,-5,-7,8,8,2,6,10,-7,-2,6,7,9,-10,5,-4,-5,-1,1,-6,1,-8,-5,-6,-3,-3,4,-10,6,-2,6,-9,-5,3,-2,-5,-7,10,3,6,4,-6,-9,-3,-6,5,-1,5,5,-3,9,9,-1,7,3,-2,1,5,-6,-9,5,4,-10,-3,-7,3,-4,-1,9,1,-1,1,2,-4,-8,9,-6,-1,-2,-1,-9,-4,-7,8,-2,10,-3,-5,-10,-1,3,2,-5,-6,-7,7,-3,1,-7,-6,9,2,10,4,8,6,7,1,-3,10,-5,-10,-9,6,9,5,-9,-9,-8,-7,-10,8,-5,9,7,1,-6,10,-9,1,10,7,5,-8,-3,-9,-2,-2,7,6,-3,-6,8,-4,2,-7,3,2,4,-1,7,-9,9,5,-5,2,9,-6,-3,2,-6,-10,4],[7,1,4,9,6,-7,6,1,-7,-5,7,-3,-5,-9,10,-6,3,8,-5,3,7,-2,1,10,-4,-10,2,10,-6,4,-4,4,8,-7,9,2,-1,8,8,9,-10,4,6,-3,5,-8,-8,8,-4,-8,-4,-8,5,-8,-3,-8,8,9,8,-6,-9,-1,7,-10,-4,-6,9,5,10,-10,10,8,-7,-4,6,7,-6,-2,-10,6,3,4,5,-7,-3,-10,4,-3,-4,6,-8,-7,3,-7,-4,-7,-4,8,-10,-4,1,-6,-1,-5,-5,-7,8,-5,-3,-4,-5,1,-3,9,-5,6,7,2,8,-5,2,6,-5,-1,-3,-7,-9,10,-9,-5,1,2,-1,8,-4,4,6,-6,-9,1,-3,4,9,3,-2,2,-8,-1,-1,-10,-3,-10,2,-2,-2,-7,-3,8,3,-8,10,8,6,-8,-10,9,3,-4,5,10,-1,6,-5,6,6,5,-5,3,-4,-8,9,2,1,9,-4,-5,5,10,6,2,-3,-5,3,2,8,4,1,1,3,-8,-10,-3,4,9,-3,-9,9,5,-1,9,-8,7,8,9,-2,8,10,9,9,4,-6,-6,-7,4,9,7,6,-7,6,8,3,-9,9,6,3,-10,1,5,9,7,-5,-5],[10,7,-8,-1,-1,1,-8,10,5,2,5,5,7,10,-8,-4,7,-4,4,-3,8,9,-2,-7,6,-4,-7,3,-3,-9,-1,7,2,-2,-9,-3,2,-10,10,1,9,7,4,-3,4,-8,-2,-5,-8,-1,4,1,8,10,1,4,-7,-7,2,10,1,-2,-4,-7,4,1,-4,7,6,-1,-9,8,-7,-8,6,-6,-5,9,-5,-4,-4,10,9,-1,-5,3,-9,-9,-9,-7,5,1,-2,-1,-5,-8,2,-7,3,6,-10,1,4,-8,-9,8,-6,3,-9,5,-9,-3,10,10,9,3,-6,9,-8,-3,-1,10,1,-5,10,-6,-4,-10,10,10,-7,-9,1,5,6,-6,-2,-6,4,3,3,10,10,-4,1,2,-8,3,2,9,-7,-6,-5,-1,-4,-10,-6,6,4,10,3,3,4,3,3,5,10,10,6,4,-8,8,-9,-1,4,8,5,3,7,-7,-9,-4,-8,6,-6,3,-9,7,7,2,-3,-1,2,-10,-7,1,3,-6,-10,4,-5,9,10,-3,-5,-8,-3,-9,-10,-4,-7,-4,-10,1,7,5,2,7,9,-7,-2,5,4,10,2,-1,-1,-1,-9,1,10,7,8,-4,-3,1,5,-1,-9,-3,7,2]], dtype = "uint16")#candidate|14336|(98, 242)|const|uint16
call_14335 = relay.TupleGetItem(func_14204_call(relay.reshape(const_14336.astype('uint16'), [1694, 14]), relay.reshape(const_14336.astype('float32'), [1694, 14]), ), 0)
call_14337 = relay.TupleGetItem(func_14208_call(relay.reshape(const_14336.astype('uint16'), [1694, 14]), relay.reshape(const_14336.astype('float32'), [1694, 14]), ), 0)
uop_14341 = relay.sin(const_14336.astype('float32')) # shape=(98, 242)
func_9002_call = mod.get_global_var('func_9002')
func_9004_call = mutated_mod.get_global_var('func_9004')
call_14364 = func_9002_call()
call_14365 = func_9002_call()
func_10165_call = mod.get_global_var('func_10165')
func_10169_call = mutated_mod.get_global_var('func_10169')
var_14367 = relay.var("var_14367", dtype = "float64", shape = (400,))#candidate|14367|(400,)|var|float64
call_14366 = func_10165_call(relay.reshape(var_14367.astype('float64'), [10, 8, 5]), relay.reshape(var_14367.astype('float64'), [10, 8, 5]), )
call_14368 = func_10165_call(relay.reshape(var_14367.astype('float64'), [10, 8, 5]), relay.reshape(var_14367.astype('float64'), [10, 8, 5]), )
uop_14379 = relay.log2(uop_14341.astype('float32')) # shape=(98, 242)
uop_14386 = relay.exp(uop_14379.astype('float64')) # shape=(98, 242)
uop_14389 = relay.asin(uop_14386.astype('float64')) # shape=(98, 242)
output = relay.Tuple([call_14333,call_14335,call_14364,call_14366,var_14367,uop_14389,])
output2 = relay.Tuple([call_14334,call_14337,call_14365,call_14368,var_14367,uop_14389,])
func_14397 = relay.Function([var_14367,], output)
mod['func_14397'] = func_14397
mod = relay.transform.InferType()(mod)
var_14398 = relay.var("var_14398", dtype = "float64", shape = (400,))#candidate|14398|(400,)|var|float64
output = func_14397(var_14398)
func_14399 = relay.Function([var_14398], output)
mutated_mod['func_14399'] = func_14399
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9372_call = mod.get_global_var('func_9372')
func_9373_call = mutated_mod.get_global_var('func_9373')
call_14428 = func_9372_call()
call_14429 = func_9372_call()
output = relay.Tuple([call_14428,])
output2 = relay.Tuple([call_14429,])
func_14453 = relay.Function([], output)
mod['func_14453'] = func_14453
mod = relay.transform.InferType()(mod)
output = func_14453()
func_14454 = relay.Function([], output)
mutated_mod['func_14454'] = func_14454
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7887_call = mod.get_global_var('func_7887')
func_7889_call = mutated_mod.get_global_var('func_7889')
call_14468 = func_7887_call()
call_14469 = func_7887_call()
func_6714_call = mod.get_global_var('func_6714')
func_6715_call = mutated_mod.get_global_var('func_6715')
call_14470 = relay.TupleGetItem(func_6714_call(), 5)
call_14471 = relay.TupleGetItem(func_6715_call(), 5)
func_7880_call = mod.get_global_var('func_7880')
func_7882_call = mutated_mod.get_global_var('func_7882')
call_14492 = relay.TupleGetItem(func_7880_call(), 0)
call_14493 = relay.TupleGetItem(func_7882_call(), 0)
func_12117_call = mod.get_global_var('func_12117')
func_12119_call = mutated_mod.get_global_var('func_12119')
call_14515 = relay.TupleGetItem(func_12117_call(), 1)
call_14516 = relay.TupleGetItem(func_12119_call(), 1)
output = relay.Tuple([call_14468,call_14470,call_14492,call_14515,])
output2 = relay.Tuple([call_14469,call_14471,call_14493,call_14516,])
func_14546 = relay.Function([], output)
mod['func_14546'] = func_14546
mod = relay.transform.InferType()(mod)
output = func_14546()
func_14547 = relay.Function([], output)
mutated_mod['func_14547'] = func_14547
mutated_mod = relay.transform.InferType()(mutated_mod)
const_14620 = relay.const([[[-3.229363,-9.182303,-1.506432,-2.091184,3.796932,6.815726,8.321678,1.672686,3.843204,3.062263,6.597881,6.480035,-7.080111,-4.711965],[-3.269398,-8.135001,5.622900,1.434034,7.100568,-0.699363,-7.256000,-1.441029,1.514141,1.256703,1.618136,-7.002028,-3.397312,8.740553],[3.018404,-4.243894,5.091870,-2.697486,3.805637,-4.230552,2.881108,8.105580,9.386819,-3.316901,-1.511465,8.133868,-8.704657,-8.906513],[8.099045,1.172759,3.402934,-9.663044,-3.118778,4.500517,-7.562332,2.518173,8.364587,7.481371,-3.378946,2.650469,7.097420,5.850345],[-4.103153,0.159571,1.563053,0.931526,-8.403656,6.355305,-4.314252,-9.068311,-8.173589,3.945902,3.235665,-7.558263,-5.647698,-2.338588],[-2.470482,0.913514,9.126222,-8.201695,9.245130,3.864062,8.615927,5.825953,-8.203432,8.492519,9.324415,-0.279820,0.761408,-8.115282],[-7.951102,-9.806255,-6.254049,6.209458,-7.614264,-4.870304,3.237033,4.036447,-4.346001,8.284885,-6.809481,-3.860908,0.125294,-1.420567],[8.571102,-4.050032,6.721407,4.251654,-9.100684,1.715515,-8.197958,-4.985714,-8.337697,4.801181,-0.575778,8.281935,1.406147,-1.285704],[-7.548016,0.261033,-9.630780,0.988579,-6.484361,2.662270,5.937676,3.828491,0.439370,-2.920582,5.561033,-8.235052,-0.867311,7.794707],[6.476231,-5.066514,-9.900039,-9.651171,1.446058,0.948408,-3.223753,-4.832859,2.035044,8.576071,4.863330,-2.782789,4.091171,6.390813],[-0.032935,2.439929,-6.085012,5.016663,-2.986773,2.030577,9.480779,3.564728,-8.864975,-8.578487,-0.304551,-2.356166,7.506117,-8.670464],[2.290533,-7.687846,-6.735063,-6.828441,4.007089,-6.286244,0.622921,2.611932,-5.369370,-6.704502,-6.172948,-9.222510,-7.968690,-9.466995],[-1.687405,1.794496,-8.895997,7.056741,3.089823,-0.681754,-2.444764,-0.487676,-5.760340,-5.440012,8.592357,0.889632,1.792546,-8.643621],[-1.709881,7.013604,7.597367,9.779869,-6.845542,2.080321,-2.880824,-6.792389,-8.836403,-0.846813,-8.164845,1.522984,9.267509,8.722208]],[[-1.773380,-6.674431,1.792672,5.907001,-9.391910,-8.165161,-9.504046,6.272648,3.931713,1.257410,-7.208697,8.536788,-5.801373,-1.583273],[6.333121,0.972957,0.291851,7.857636,7.066471,-2.147817,0.818472,5.583704,-8.671612,-5.860896,-4.252341,6.634475,2.459048,-4.260090],[0.436536,4.963795,-4.615673,-7.256743,-6.885065,-7.766165,2.560291,-6.981006,-4.917145,-2.977372,-3.820599,-7.486516,-8.851230,9.196361],[-7.148295,5.665807,7.314378,9.374595,9.853499,5.903248,0.539672,-4.092784,-5.461678,6.909114,-8.705195,3.804081,-2.357010,9.085481],[6.349466,-2.732901,-8.415048,4.567644,-1.090351,-7.294054,8.078742,1.995739,6.399359,5.386288,-9.923899,-1.414797,-8.497649,7.389065],[-2.430408,9.317999,-6.342718,0.312442,0.792242,-0.421783,0.968908,-9.441454,-2.519856,2.543138,1.519769,-5.432167,1.806369,-6.667070],[-6.398019,-8.395848,-6.522952,5.289044,7.355517,-2.356479,8.841969,-3.243264,0.110250,9.047925,4.594023,4.149979,5.394962,-5.840538],[2.659162,-7.249441,2.521090,-7.864316,-7.155141,-0.334442,-4.518263,5.274254,5.239598,6.795977,-3.755516,-0.376255,2.233253,-4.743546],[8.688693,-3.834010,4.635657,2.203784,4.265758,-3.570302,3.278114,-8.366848,4.518978,2.676036,3.881410,7.057849,-7.063639,7.436543],[-3.396509,-1.303929,0.793396,-7.549428,-6.344949,2.737995,1.993781,2.299281,-4.209122,-1.083046,1.963253,-9.124770,-3.352605,-9.443776],[0.843538,4.728519,5.428496,-4.085104,-5.890946,0.513726,-0.601477,-3.132368,5.386482,-3.001701,7.864173,7.064921,-1.321031,-4.957523],[-1.204973,2.066485,-0.353566,7.717540,7.099497,-1.454910,-6.640066,-5.934488,-2.006570,-0.447968,-4.226008,1.231509,9.019119,6.337486],[-5.944755,3.467383,-4.338990,4.642474,9.676304,8.925257,-7.662894,-8.434320,7.503597,1.628479,2.581745,1.962564,-6.413798,-0.729256],[-1.970800,4.483144,3.323967,8.029908,-7.255874,-4.837328,0.680837,-4.121509,-9.940529,-2.239712,3.616894,8.476253,0.912710,-7.399151]]], dtype = "float32")#candidate|14620|(2, 14, 14)|const|float32
uop_14621 = relay.sigmoid(const_14620.astype('float32')) # shape=(2, 14, 14)
output = uop_14621
output2 = uop_14621
func_14627 = relay.Function([], output)
mod['func_14627'] = func_14627
mod = relay.transform.InferType()(mod)
output = func_14627()
func_14628 = relay.Function([], output)
mutated_mod['func_14628'] = func_14628
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6714_call = mod.get_global_var('func_6714')
func_6715_call = mutated_mod.get_global_var('func_6715')
call_14636 = relay.TupleGetItem(func_6714_call(), 4)
call_14637 = relay.TupleGetItem(func_6715_call(), 4)
func_13519_call = mod.get_global_var('func_13519')
func_13521_call = mutated_mod.get_global_var('func_13521')
call_14653 = relay.TupleGetItem(func_13519_call(), 0)
call_14654 = relay.TupleGetItem(func_13521_call(), 0)
func_12117_call = mod.get_global_var('func_12117')
func_12119_call = mutated_mod.get_global_var('func_12119')
call_14655 = relay.TupleGetItem(func_12117_call(), 2)
call_14656 = relay.TupleGetItem(func_12119_call(), 2)
func_6913_call = mod.get_global_var('func_6913')
func_6915_call = mutated_mod.get_global_var('func_6915')
call_14658 = func_6913_call()
call_14659 = func_6913_call()
func_12998_call = mod.get_global_var('func_12998')
func_12999_call = mutated_mod.get_global_var('func_12999')
call_14676 = relay.TupleGetItem(func_12998_call(), 0)
call_14677 = relay.TupleGetItem(func_12999_call(), 0)
output = relay.Tuple([call_14636,call_14653,call_14655,call_14658,call_14676,])
output2 = relay.Tuple([call_14637,call_14654,call_14656,call_14659,call_14677,])
func_14680 = relay.Function([], output)
mod['func_14680'] = func_14680
mod = relay.transform.InferType()(mod)
mutated_mod['func_14680'] = func_14680
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14680_call = mutated_mod.get_global_var('func_14680')
call_14681 = func_14680_call()
output = call_14681
func_14682 = relay.Function([], output)
mutated_mod['func_14682'] = func_14682
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10738_call = mod.get_global_var('func_10738')
func_10740_call = mutated_mod.get_global_var('func_10740')
call_14708 = relay.TupleGetItem(func_10738_call(), 0)
call_14709 = relay.TupleGetItem(func_10740_call(), 0)
output = call_14708
output2 = call_14709
func_14715 = relay.Function([], output)
mod['func_14715'] = func_14715
mod = relay.transform.InferType()(mod)
mutated_mod['func_14715'] = func_14715
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14715_call = mutated_mod.get_global_var('func_14715')
call_14716 = func_14715_call()
output = call_14716
func_14717 = relay.Function([], output)
mutated_mod['func_14717'] = func_14717
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9479_call = mod.get_global_var('func_9479')
func_9480_call = mutated_mod.get_global_var('func_9480')
call_14753 = func_9479_call()
call_14754 = func_9479_call()
output = relay.Tuple([call_14753,])
output2 = relay.Tuple([call_14754,])
func_14760 = relay.Function([], output)
mod['func_14760'] = func_14760
mod = relay.transform.InferType()(mod)
mutated_mod['func_14760'] = func_14760
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14760_call = mutated_mod.get_global_var('func_14760')
call_14761 = func_14760_call()
output = call_14761
func_14762 = relay.Function([], output)
mutated_mod['func_14762'] = func_14762
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7060_call = mod.get_global_var('func_7060')
func_7062_call = mutated_mod.get_global_var('func_7062')
call_14774 = func_7060_call()
call_14775 = func_7060_call()
output = relay.Tuple([call_14774,])
output2 = relay.Tuple([call_14775,])
func_14799 = relay.Function([], output)
mod['func_14799'] = func_14799
mod = relay.transform.InferType()(mod)
output = func_14799()
func_14800 = relay.Function([], output)
mutated_mod['func_14800'] = func_14800
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7880_call = mod.get_global_var('func_7880')
func_7882_call = mutated_mod.get_global_var('func_7882')
call_14819 = relay.TupleGetItem(func_7880_call(), 1)
call_14820 = relay.TupleGetItem(func_7882_call(), 1)
output = call_14819
output2 = call_14820
func_14832 = relay.Function([], output)
mod['func_14832'] = func_14832
mod = relay.transform.InferType()(mod)
output = func_14832()
func_14833 = relay.Function([], output)
mutated_mod['func_14833'] = func_14833
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6873_call = mod.get_global_var('func_6873')
func_6875_call = mutated_mod.get_global_var('func_6875')
call_14865 = relay.TupleGetItem(func_6873_call(), 0)
call_14866 = relay.TupleGetItem(func_6875_call(), 0)
output = relay.Tuple([call_14865,])
output2 = relay.Tuple([call_14866,])
func_14896 = relay.Function([], output)
mod['func_14896'] = func_14896
mod = relay.transform.InferType()(mod)
output = func_14896()
func_14897 = relay.Function([], output)
mutated_mod['func_14897'] = func_14897
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13519_call = mod.get_global_var('func_13519')
func_13521_call = mutated_mod.get_global_var('func_13521')
call_14908 = relay.TupleGetItem(func_13519_call(), 1)
call_14909 = relay.TupleGetItem(func_13521_call(), 1)
output = call_14908
output2 = call_14909
func_14942 = relay.Function([], output)
mod['func_14942'] = func_14942
mod = relay.transform.InferType()(mod)
mutated_mod['func_14942'] = func_14942
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14942_call = mutated_mod.get_global_var('func_14942')
call_14943 = func_14942_call()
output = call_14943
func_14944 = relay.Function([], output)
mutated_mod['func_14944'] = func_14944
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14128_call = mod.get_global_var('func_14128')
func_14130_call = mutated_mod.get_global_var('func_14130')
call_14945 = func_14128_call()
call_14946 = func_14128_call()
func_8624_call = mod.get_global_var('func_8624')
func_8626_call = mutated_mod.get_global_var('func_8626')
const_14958 = relay.const([[True,True,False,True,False,True,True,True,False,True,True,True,True,False,False,False,True,True,False,True,False,True,False,True,False,True,True,True,True,False,False,False,True,False,True,False,True,False,True,True,True,False,True,False,True,True,False,False,True,True,False,True,False,False,False,False,True,True,True,False,True,True,False,True,True,True,True,False,True,False,False,False,False,True,True,True,False,True,False,True,False,False,False,True,False,False,True,True,True,True,True,True,False,True,False,False],[False,True,False,True,True,False,True,True,True,False,True,False,False,True,True,False,True,False,True,True,False,True,False,False,False,True,True,False,False,True,False,False,False,True,True,True,True,False,False,True,True,True,True,True,False,False,True,True,False,True,False,True,False,False,True,False,True,False,False,True,True,True,True,True,False,False,False,True,True,False,False,False,False,True,True,False,False,False,False,False,True,False,True,True,True,False,True,False,False,False,False,True,True,True,False,True],[False,False,False,True,True,True,True,True,False,False,True,False,False,True,True,False,False,False,True,True,True,True,True,True,True,True,True,False,True,True,True,True,False,True,False,True,False,True,False,True,True,True,True,True,True,False,True,True,True,True,False,False,False,True,True,True,True,False,True,False,False,False,True,False,True,True,True,False,False,True,True,True,False,False,False,True,True,False,False,False,True,False,False,True,False,True,False,True,False,True,True,False,True,False,False,False],[True,True,False,True,False,True,False,False,False,False,False,True,False,False,True,True,True,True,False,True,False,False,False,False,True,True,False,False,True,False,True,False,True,True,True,True,True,True,False,True,True,False,False,False,False,True,True,True,False,False,False,False,False,False,True,False,True,True,False,False,False,True,False,True,True,True,True,False,False,True,True,False,True,True,False,True,False,True,True,False,True,True,False,False,False,True,False,True,True,False,False,True,False,False,False,True],[False,True,True,False,False,False,False,True,True,False,True,True,False,False,True,True,True,True,True,True,True,True,True,False,False,True,True,False,True,True,True,True,True,False,False,True,False,False,True,True,True,False,False,True,False,True,False,True,False,False,True,True,True,False,True,True,True,False,True,False,False,False,False,True,False,False,False,False,False,True,True,True,True,True,False,True,False,True,True,True,True,False,False,False,False,False,False,True,False,True,True,False,False,True,True,False],[True,False,True,False,True,False,True,True,False,False,False,False,True,True,True,False,True,False,False,True,False,False,False,False,False,False,True,False,True,False,False,True,False,True,True,False,False,False,True,False,False,True,False,True,True,False,True,False,False,False,False,False,False,False,False,False,False,True,False,False,False,True,True,False,False,False,False,False,False,True,False,True,True,True,False,False,True,False,False,True,False,False,True,False,True,True,True,True,True,True,True,True,False,False,True,True],[False,False,True,True,True,False,False,False,True,False,False,False,False,True,True,False,True,False,True,False,True,False,False,False,True,True,True,False,False,True,True,False,True,False,True,False,False,True,True,True,False,True,True,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,True,False,True,False,False,False,True,False,False,True,True,True,True,True,True,False,False,True,True,True,True,True,True,False,True,True,False,False,False,False,False,False,False,True,False,True,True,True],[True,True,True,False,True,False,False,False,False,False,True,True,True,True,True,False,True,False,True,True,False,True,False,False,True,False,True,False,True,False,True,False,False,False,True,True,False,True,True,True,True,False,False,False,True,True,False,False,False,True,False,False,False,False,True,False,False,False,False,False,True,True,False,True,False,True,False,False,False,True,True,True,True,False,True,True,True,True,True,True,False,True,False,True,True,True,True,False,True,True,False,False,False,False,True,False],[False,True,True,False,False,False,False,False,False,True,True,False,True,False,True,True,False,True,False,True,False,True,True,False,False,True,False,True,False,False,True,False,True,False,False,False,True,False,False,True,False,True,True,True,True,True,False,True,False,True,True,True,False,False,True,True,False,True,False,False,True,True,False,True,False,False,True,True,True,True,False,True,False,False,False,True,True,False,True,True,True,False,False,False,False,True,True,False,True,True,False,False,False,False,True,False],[True,False,True,False,True,False,True,True,False,True,True,True,True,False,False,True,False,True,True,False,False,False,True,True,True,True,False,True,False,True,False,True,False,True,True,True,True,False,True,True,True,False,False,False,False,True,True,False,False,False,False,False,False,True,False,True,True,False,True,True,True,True,False,True,False,True,True,False,True,False,True,False,False,False,False,False,True,False,False,True,False,False,True,True,False,True,False,True,True,True,False,True,False,False,False,True],[True,True,True,False,True,False,False,True,False,False,True,True,False,True,False,True,False,False,False,False,True,False,True,True,False,True,False,False,True,False,True,False,False,False,False,True,True,False,True,True,False,False,True,True,False,True,False,False,True,False,False,True,False,True,False,False,False,False,True,True,False,False,True,False,True,True,False,False,True,True,True,True,True,False,False,True,False,False,True,True,False,True,False,True,False,False,True,False,False,False,True,True,True,False,True,False],[True,True,False,False,False,True,False,False,False,False,True,False,True,True,True,True,False,False,False,True,False,False,True,True,False,True,False,True,True,True,True,True,True,True,True,True,True,True,True,True,False,True,True,True,False,False,False,False,False,True,True,True,True,True,False,True,False,False,True,True,True,False,False,False,False,False,False,True,True,True,False,True,False,True,False,False,True,True,True,False,False,False,True,True,True,True,False,True,True,True,True,False,False,True,True,False],[True,True,True,True,False,True,False,True,False,True,True,True,False,False,True,False,True,False,True,False,True,True,False,False,True,True,True,True,False,False,True,False,True,False,True,True,True,True,False,True,False,False,False,False,False,False,False,True,False,True,False,False,True,False,False,False,True,True,True,True,True,False,True,False,False,False,False,True,False,False,False,False,False,False,True,True,False,True,False,True,True,False,True,False,False,True,False,True,True,True,True,False,True,False,True,True],[True,True,False,True,True,False,True,False,False,False,True,True,False,True,False,True,False,True,True,False,False,True,False,True,False,True,False,True,True,True,False,False,False,False,True,True,False,True,True,False,True,False,True,True,False,True,False,False,False,True,False,True,False,False,False,False,True,False,True,True,True,True,True,True,True,True,True,True,False,False,False,True,True,True,True,True,True,True,True,True,True,True,False,True,False,True,False,True,True,True,False,True,True,False,False,False],[True,True,False,True,False,False,False,True,True,True,False,False,True,True,False,False,False,False,True,False,True,True,False,True,True,False,False,False,False,False,False,True,False,False,False,False,False,True,True,False,False,True,False,True,False,False,True,False,True,True,True,False,False,True,True,True,True,True,True,False,False,False,True,False,False,False,False,True,True,True,True,True,False,True,True,False,False,False,False,True,True,True,True,False,False,True,True,False,False,True,False,False,True,True,False,True],[True,False,False,False,True,True,False,True,True,True,True,True,True,False,False,True,True,True,True,False,False,False,False,True,True,False,True,False,True,False,False,True,False,False,True,False,False,True,True,True,False,True,False,False,True,False,True,False,True,False,False,False,False,False,True,False,False,False,False,False,False,False,True,True,True,False,True,True,False,False,False,False,True,False,False,False,False,True,True,True,True,True,True,False,False,False,False,False,True,False,False,True,True,True,False,False],[False,True,True,False,False,True,False,True,True,True,False,True,False,True,False,False,False,False,False,False,False,False,True,True,False,True,True,True,True,True,True,True,True,False,True,True,True,True,False,False,False,False,True,True,True,False,True,False,False,True,False,False,True,True,False,True,True,True,True,False,False,False,True,True,True,False,False,False,True,True,True,False,True,False,True,True,False,False,True,False,True,True,True,False,True,True,True,False,False,False,False,False,True,True,False,False],[True,False,False,False,True,True,False,True,False,True,False,False,True,True,True,False,False,False,False,True,True,False,True,True,False,True,True,True,False,True,True,True,False,False,False,True,True,False,False,True,False,False,False,True,True,True,False,False,True,False,True,False,False,True,True,True,False,False,False,True,False,False,False,False,False,False,True,True,True,False,True,True,False,True,False,False,False,False,False,True,True,True,True,True,False,False,False,True,False,True,False,False,True,False,False,True],[True,False,False,False,False,True,True,False,False,True,False,False,False,False,True,True,False,False,False,False,False,True,True,True,False,True,True,True,False,False,False,True,False,False,True,False,False,False,False,False,True,True,True,True,True,False,False,True,True,True,False,True,False,True,False,False,True,False,True,True,False,True,False,False,True,True,False,True,True,False,False,False,True,True,False,True,True,False,False,False,True,False,False,True,False,False,True,True,False,False,False,False,True,False,False,True],[True,False,False,False,True,False,False,False,True,False,True,True,True,False,True,False,False,True,False,False,False,True,True,False,False,True,True,True,True,True,False,False,False,True,False,True,True,True,True,True,True,True,False,False,True,True,True,True,True,True,False,True,False,True,True,False,True,False,False,False,False,False,True,False,True,True,True,True,False,False,False,False,True,False,False,False,True,True,False,False,False,False,True,True,True,True,True,False,True,True,True,True,False,False,True,True],[True,False,False,False,True,False,False,False,False,False,True,False,False,True,False,False,True,False,True,False,True,True,True,False,False,False,False,False,False,True,False,True,False,False,True,True,True,True,True,True,False,False,True,False,True,False,False,False,False,False,True,True,True,False,True,True,False,True,False,False,True,False,True,True,False,True,False,True,False,True,True,False,False,False,False,True,False,True,False,False,True,True,True,False,True,True,True,True,False,True,True,True,True,False,False,False],[True,False,True,False,False,False,False,False,True,True,True,True,False,True,False,True,False,True,True,True,False,False,False,True,False,True,False,True,False,True,True,True,True,True,True,True,True,False,True,False,True,True,False,True,False,False,False,True,True,True,False,False,True,True,True,True,False,True,True,False,False,False,False,False,True,True,True,True,True,True,True,False,False,True,True,False,True,True,True,True,False,False,True,False,True,False,True,True,True,False,False,False,True,False,False,False]], dtype = "bool")#candidate|14958|(22, 96)|const|bool
call_14957 = relay.TupleGetItem(func_8624_call(relay.reshape(const_14958.astype('bool'), [44, 48])), 2)
call_14959 = relay.TupleGetItem(func_8626_call(relay.reshape(const_14958.astype('bool'), [44, 48])), 2)
func_6833_call = mod.get_global_var('func_6833')
func_6835_call = mutated_mod.get_global_var('func_6835')
call_14964 = relay.TupleGetItem(func_6833_call(), 0)
call_14965 = relay.TupleGetItem(func_6835_call(), 0)
func_13663_call = mod.get_global_var('func_13663')
func_13665_call = mutated_mod.get_global_var('func_13665')
const_14973 = relay.const([5,-9,-7,3,-7,2,-5,-9,3,-3,-6,-10,10,9,-9,2,2,6,6,-9,-10,10,-5,10,-3,-7,-4,7,-3,5,3,-5,-9,-2,-10,-9,-4,-8,5,9,10,7,4,-2,-2,-6,-4,-8,2,9,3,-6,6,9,1,1,5,7,-2,6,-6,9,-5,-5,6,-3,-4,9,-3,3,-6,7,-2,3,-3,-10,-3,-9,5,-9,9,-4,-1,5,9,9,-2,-9,9,10,8,1,8,-4,-5,8,3,1,4,9,5,1,4,-2,9,-5,2,2,7,5], dtype = "uint16")#candidate|14973|(110,)|const|uint16
call_14972 = func_13663_call(relay.reshape(const_14973.astype('uint16'), [10, 1, 11]))
call_14974 = func_13663_call(relay.reshape(const_14973.astype('uint16'), [10, 1, 11]))
bop_14990 = relay.greater(call_14957.astype('bool'), relay.reshape(const_14958.astype('bool'), relay.shape_of(call_14957))) # shape=(44, 48)
bop_14993 = relay.greater(call_14959.astype('bool'), relay.reshape(const_14958.astype('bool'), relay.shape_of(call_14959))) # shape=(44, 48)
output = relay.Tuple([call_14945,call_14964,call_14972,const_14973,bop_14990,])
output2 = relay.Tuple([call_14946,call_14965,call_14974,const_14973,bop_14993,])
func_14998 = relay.Function([], output)
mod['func_14998'] = func_14998
mod = relay.transform.InferType()(mod)
output = func_14998()
func_14999 = relay.Function([], output)
mutated_mod['func_14999'] = func_14999
mutated_mod = relay.transform.InferType()(mutated_mod)
var_15000 = relay.var("var_15000", dtype = "float32", shape = (5, 10, 3))#candidate|15000|(5, 10, 3)|var|float32
uop_15001 = relay.cos(var_15000.astype('float32')) # shape=(5, 10, 3)
output = relay.Tuple([uop_15001,])
output2 = relay.Tuple([uop_15001,])
func_15029 = relay.Function([var_15000,], output)
mod['func_15029'] = func_15029
mod = relay.transform.InferType()(mod)
mutated_mod['func_15029'] = func_15029
mutated_mod = relay.transform.InferType()(mutated_mod)
var_15030 = relay.var("var_15030", dtype = "float32", shape = (5, 10, 3))#candidate|15030|(5, 10, 3)|var|float32
func_15029_call = mutated_mod.get_global_var('func_15029')
call_15031 = func_15029_call(var_15030)
output = call_15031
func_15032 = relay.Function([var_15030], output)
mutated_mod['func_15032'] = func_15032
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13110_call = mod.get_global_var('func_13110')
func_13112_call = mutated_mod.get_global_var('func_13112')
call_15062 = func_13110_call()
call_15063 = func_13110_call()
func_13228_call = mod.get_global_var('func_13228')
func_13230_call = mutated_mod.get_global_var('func_13230')
call_15071 = relay.TupleGetItem(func_13228_call(), 2)
call_15072 = relay.TupleGetItem(func_13230_call(), 2)
output = relay.Tuple([call_15062,call_15071,])
output2 = relay.Tuple([call_15063,call_15072,])
func_15078 = relay.Function([], output)
mod['func_15078'] = func_15078
mod = relay.transform.InferType()(mod)
output = func_15078()
func_15079 = relay.Function([], output)
mutated_mod['func_15079'] = func_15079
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11570_call = mod.get_global_var('func_11570')
func_11571_call = mutated_mod.get_global_var('func_11571')
call_15163 = relay.TupleGetItem(func_11570_call(), 0)
call_15164 = relay.TupleGetItem(func_11571_call(), 0)
func_9537_call = mod.get_global_var('func_9537')
func_9539_call = mutated_mod.get_global_var('func_9539')
call_15193 = relay.TupleGetItem(func_9537_call(), 1)
call_15194 = relay.TupleGetItem(func_9539_call(), 1)
func_7887_call = mod.get_global_var('func_7887')
func_7889_call = mutated_mod.get_global_var('func_7889')
call_15209 = func_7887_call()
call_15210 = func_7887_call()
output = relay.Tuple([call_15163,call_15193,call_15209,])
output2 = relay.Tuple([call_15164,call_15194,call_15210,])
func_15240 = relay.Function([], output)
mod['func_15240'] = func_15240
mod = relay.transform.InferType()(mod)
output = func_15240()
func_15241 = relay.Function([], output)
mutated_mod['func_15241'] = func_15241
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14237_call = mod.get_global_var('func_14237')
func_14239_call = mutated_mod.get_global_var('func_14239')
call_15278 = relay.TupleGetItem(func_14237_call(), 0)
call_15279 = relay.TupleGetItem(func_14239_call(), 0)
output = call_15278
output2 = call_15279
func_15281 = relay.Function([], output)
mod['func_15281'] = func_15281
mod = relay.transform.InferType()(mod)
output = func_15281()
func_15282 = relay.Function([], output)
mutated_mod['func_15282'] = func_15282
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9851_call = mod.get_global_var('func_9851')
func_9852_call = mutated_mod.get_global_var('func_9852')
call_15291 = func_9851_call()
call_15292 = func_9851_call()
func_7868_call = mod.get_global_var('func_7868')
func_7870_call = mutated_mod.get_global_var('func_7870')
call_15306 = func_7868_call()
call_15307 = func_7868_call()
func_8863_call = mod.get_global_var('func_8863')
func_8864_call = mutated_mod.get_global_var('func_8864')
call_15323 = relay.TupleGetItem(func_8863_call(), 1)
call_15324 = relay.TupleGetItem(func_8864_call(), 1)
func_9825_call = mod.get_global_var('func_9825')
func_9827_call = mutated_mod.get_global_var('func_9827')
call_15344 = relay.TupleGetItem(func_9825_call(relay.reshape(call_15291.astype('bool'), [2112,])), 1)
call_15345 = relay.TupleGetItem(func_9827_call(relay.reshape(call_15291.astype('bool'), [2112,])), 1)
func_13644_call = mod.get_global_var('func_13644')
func_13647_call = mutated_mod.get_global_var('func_13647')
var_15352 = relay.var("var_15352", dtype = "float32", shape = (16,))#candidate|15352|(16,)|var|float32
call_15351 = relay.TupleGetItem(func_13644_call(relay.reshape(call_15291.astype('bool'), [2112,]), relay.reshape(var_15352.astype('float32'), [16, 1]), ), 5)
call_15353 = relay.TupleGetItem(func_13647_call(relay.reshape(call_15291.astype('bool'), [2112,]), relay.reshape(var_15352.astype('float32'), [16, 1]), ), 5)
output = relay.Tuple([call_15291,call_15306,call_15323,call_15344,call_15351,var_15352,])
output2 = relay.Tuple([call_15292,call_15307,call_15324,call_15345,call_15353,var_15352,])
func_15354 = relay.Function([var_15352,], output)
mod['func_15354'] = func_15354
mod = relay.transform.InferType()(mod)
var_15355 = relay.var("var_15355", dtype = "float32", shape = (16,))#candidate|15355|(16,)|var|float32
output = func_15354(var_15355)
func_15356 = relay.Function([var_15355], output)
mutated_mod['func_15356'] = func_15356
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8967_call = mod.get_global_var('func_8967')
func_8968_call = mutated_mod.get_global_var('func_8968')
call_15384 = relay.TupleGetItem(func_8967_call(), 0)
call_15385 = relay.TupleGetItem(func_8968_call(), 0)
func_8624_call = mod.get_global_var('func_8624')
func_8626_call = mutated_mod.get_global_var('func_8626')
const_15409 = relay.const([True,False,False,True,True,True,True,True,False,False,False,True,True,True,True,False,False,True,True,False,False,False,False,False,True,True,True,False,False,True,True,True,False,True,False,True,True,True,False,True,True,False,True,False,True,False,True,True,False,False,False,False,False,False,False,True,True,True,True,True,True,True,False,True,False,True,False,True,False,False,True,False,False,False,False,True,False,True,True,False,True,True,True,True,True,True,True,False,True,False,True,False,True,True,True,False,False,True,True,True,True,False,True,True,False,True,False,True,True,True,True,False,False,False,False,True,False,True,True,True,True,False,True,True,False,False,True,False,True,False,True,False,True,False,True,True,False,True,False,True,True,False,True,True,False,True,True,False,False,False,True,False,True,False,True,True,False,False,True,True,False,True,True,True,True,False,True,True,False,True,False,True,True,False,False,False,True,True,False,False,False,False,False,True,False,True,False,True,True,True,False,True,False,False,True,False,False,False,True,False,True,False,True,True,False,False,True,True,True,True,True,True,True,True,False,False,False,False,True,True,False,True,True,False,True,False,False,False,False,False,False,True,False,False,False,False,False,True,True,True,True,True,True,False,False,True,False,True,False,True,False,False,True,True,False,False,True,True,False,True,True,True,True,True,True,True,True,True,True,False,False,False,True,True,False,False,True,True,True,True,False,True,True,True,True,True,False,False,False,False,False,True,True,True,False,False,False,True,True,True,False,False,True,True,True,False,True,False,True,False,True,True,False,False,True,True,False,True,True,False,True,True,False,True,False,False,True,True,False,True,False,False,True,False,True,False,False,True,True,True,True,False,False,True,True,True,False,True,False,False,True,False,True,True,True,False,False,False,True,False,True,True,False,False,True,True,True,True,False,False,False,False,False,True,True,True,False,False,False,True,False,False,True,True,True,False,True,True,False,False,True,False,False,True,False,True,True,True,True,True,True,True,True,False,False,True,True,True,True,False,False,True,False,True,False,True,True,False,True,True,False,False,True,False,False,False,False,True,True,True,False,True,False,False,True,True,True,False,False,False,False,False,True,False,True,True,False,False,True,True,True,False,True,True,False,True,True,False,False,False,True,True,True,False,True,False,True,False,True,True,False,True,True,True,False,False,False,False,False,False,True,True,False,False,False,False,False,True,True,False,False,False,True,True,False,False,False,True,False,True,False,False,False,True,True,False,True,False,False,True,False,True,True,False,False,True,False,False,True,True,False,True,False,False,False,False,False,False,False,True,True,False,True,False,False,True,False,True,True,True,True,True,False,False,True,False,True,True,False,False,True,True,True,True,True,False,True,True,False,True,False,False,False,False,False,False,True,False,True,False,True,False,True,False,False,False,False,False,True,True,False,False,False,False,True,True,False,True,False,False,False,True,False,False,True,False,False,False,True,False,False,False,False,True,False,True,True,True,True,False,False,True,True,False,True,False,True,True,True,True,False,False,False,False,False,True,True,True,True,False,True,True,False,True,False,True,False,True,False,True,False,False,True,True,False,False,True,True,False,True,False,False,True,True,False,True,False,True,False,False,True,True,True,False,True,False,True,True,True,True,True,True,True,False,False,True,False,False,False,False,True,False,False,False,True,True,True,False,False,False,False,False,True,True,False,False,True,True,False,True,False,True,False,True,True,True,False,True,True,False,False,False,False,False,False,False,True,True,False,False,True,False,False,True,True,False,True,True,True,True,False,True,False,False,False,True,True,False,True,False,False,True,False,False,True,False,False,True,False,False,True,True,False,True,False,False,True,False,True,False,True,True,True,False,True,True,True,True,True,False,True,True,True,False,True,True,False,False,False,False,False,True,False,True,False,False,True,True,False,False,True,False,True,False,False,False,True,True,True,False,False,True,True,True,True,False,False,True,False,False,False,True,True,False,False,True,False,True,False,True,True,True,True,False,True,True,False,False,False,False,False,False,True,True,False,False,False,False,True,False,True,True,True,False,True,True,False,False,False,False,True,True,False,False,True,True,True,False,False,True,False,False,False,True,False,False,True,False,False,False,False,True,False,False,False,True,True,False,True,False,False,False,True,False,False,True,False,True,True,False,True,True,False,True,False,False,True,True,False,True,True,True,True,True,True,True,True,False,True,False,False,True,True,False,False,True,True,False,True,False,False,False,True,False,True,True,True,False,False,True,True,True,False,False,True,True,True,False,False,False,False,False,False,True,False,False,True,True,False,False,True,False,False,False,False,True,True,True,True,True,True,False,True,True,True,False,True,False,False,True,True,False,True,True,False,False,True,True,True,True,True,True,True,True,True,True,False,True,True,True,False,False,True,True,True,False,True,False,True,True,True,False,False,True,True,False,True,False,True,False,True,False,True,False,True,True,True,True,False,False,False,False,False,True,False,False,False,True,False,True,True,False,True,True,True,False,True,False,False,False,False,True,False,False,True,True,True,False,False,True,True,False,True,True,True,True,True,True,True,False,False,False,False,True,True,True,True,False,True,True,False,True,False,False,True,True,True,False,False,True,True,True,True,True,False,False,False,False,False,True,False,False,True,False,False,False,True,True,False,False,True,False,True,True,False,True,True,True,True,True,False,True,False,True,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,True,True,True,True,False,True,False,True,True,True,False,True,False,False,True,False,True,True,True,True,True,True,False,True,False,False,False,False,False,False,True,True,True,False,False,True,True,False,True,False,False,True,False,False,False,True,True,True,False,False,False,True,True,False,False,True,True,False,False,True,False,True,False,True,True,True,True,False,True,False,True,True,True,True,False,True,False,True,False,False,True,True,True,False,True,True,True,False,False,True,True,False,False,False,False,True,True,True,False,False,True,True,False,False,False,False,False,False,True,False,False,False,True,True,False,True,False,True,True,False,True,True,True,True,True,True,True,False,False,True,False,True,False,False,True,False,False,True,False,True,False,False,True,True,True,True,False,True,True,False,False,False,True,True,True,False,False,False,False,False,True,False,True,True,True,False,True,True,False,True,True,False,True,False,True,False,False,False,False,True,False,False,True,True,True,False,True,True,True,True,True,False,True,False,False,False,False,True,False,False,True,True,False,False,True,False,True,True,False,True,False,False,True,True,True,False,False,False,True,True,True,False,True,False,False,True,True,False,True,True,True,False,False,True,False,True,True,True,True,True,False,True,True,True,True,False,True,True,False,False,False,True,False,True,False,False,True,True,True,False,False,False,False,False,True,False,True,True,False,False,False,False,False,False,False,True,False,True,False,True,False,False,False,False,True,False,True,False,True,False,False,True,False,False,True,True,True,True,False,True,True,True,True,True,True,True,False,True,True,False,False,True,False,True,True,False,True,False,False,True,False,True,False,False,True,False,False,False,True,False,True,False,True,True,False,False,False,False,False,True,True,False,False,True,True,False,True,True,False,False,False,True,True,False,True,False,False,True,True,True,False,False,False,True,True,False,False,False,False,False,True,True,False,False,True,False,False,False,True,False,False,True,True,True,True,True,False,False,False,True,True,False,True,True,False,True,True,False,True,False,False,False,True,False,False,False,False,False,True,True,True,True,False,False,True,False,True,True,False,False,False,True,False,True,True,False,False,False,False,True,False,False,False,False,True,False,False,True,True,True,True,False,True,True,False,False,True,False,True,True,False,True,True,False,False,False,True,True,False,True,False,True,False,False,True,True,True,True,False,False,True,True,False,False,True,False,False,False,False,True,False,False,False,True,True,False,True,False,True,True,True,False,False,True,False,True,False,True,True,True,True,False,False,True,False,True,False,False,False,False,True,False,True,True,True,False,True,False,False,True,True,True,True,False,True,True,True,True,True,False,False,False,False,True,False,False,False,False,False,False,False,True,False,True,False,True,True,False,True,True,True,True,True,False,True,False,True,False,True,False,True,False,True,True,True,True,False,True,True,False,False,True,False,False,True,False,False,False,False,True,False,True,False,True,True,True,True,True,False,False,True,True,False,False,False,True,True,False,True,False,True,True,False,True,True,True,True,True,True,False,True,True,True,True,False,True,True,True,False,True,False,True,False,False,False,False,False,True,True,True,False,False,False,False,True,True,True,False,True,False,False,False,False,False,True,False,True,False,False,True,True,False,False,True,False,False,False,False,False,True,True,False,True,True,False,False,True,True,False,False,True,True,False,True,True,True,False,False,False,False,True,True,False,True,True,False,False,True,True,False,False,False,False,True,False,False,True,True,True,True,True,False,False,True,False,True,False,False,True,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,True,False,False,False,True,True,True,False,True,False,True,True,True,True,True,True,False,True,True,False,True,True,True,False,True,True,True,True,True,True,True,False,True,True,False,False,False,True,False,False,True,True,True,True,True,True,False,True,False,True,True,False,True,False,False,False,True,True,False,False,True,True,False,False,True,False,True,True,True,True,True,True,True,True,False,False,False,False,True,False,True,False,False,False,False,False,True,True,False,True,True,True,False,True,True,True,True,False,True,False,False,False,True,True,True,True,True,True,True,False,False,True,False,False,True,False,True,False,True,True,True,False,False,False,True,True,True,False,False,False,False,False,True,False,True,False,True,False,False,True,False,False,False,False,False,True,False,True,False,True,False,True,True,False,True,False,False,True,False,False,True,False,False,False,False,True,True,False,True,True,True,True,True,True,True,True,False,True,True,False,False,True,False,True,False,True,True,False,False,True,False,False,True,False,False,False,True,True,False,False,False,True,True,True,False,False,True,False,True,False,True,True,True,True,False,True,False,True,True,True,False,True,True,True,True,True,True,False,True,True,False,True,False,True,True,False,True,False,True,False,False,False,True,True,True,True,True,True,False,False,False,False,False,True,False,True,True,True], dtype = "bool")#candidate|15409|(2112,)|const|bool
call_15408 = relay.TupleGetItem(func_8624_call(relay.reshape(const_15409.astype('bool'), [44, 48])), 2)
call_15410 = relay.TupleGetItem(func_8626_call(relay.reshape(const_15409.astype('bool'), [44, 48])), 2)
func_11624_call = mod.get_global_var('func_11624')
func_11627_call = mutated_mod.get_global_var('func_11627')
const_15412 = relay.const([[1.128196,0.551839,1.908327,-4.992482],[3.820353,-2.607869,6.275575,7.291269],[-1.390320,-3.462488,1.033002,5.918563],[-5.808072,-3.284177,-5.501482,-8.910330],[-1.625779,9.409190,9.450859,-3.446785],[-3.737563,9.988523,-5.438666,8.643337],[-6.081957,-4.257135,4.687733,1.688282],[-6.840146,2.576215,6.534833,-0.160661],[5.088778,4.198620,-8.901665,-3.811752],[-1.038411,-1.004309,-0.396844,6.850981],[1.244638,-3.708458,6.064936,-1.825923],[1.211089,-8.857232,-8.185703,8.579777],[-0.922948,-0.633476,-3.561919,-5.707720],[-8.864710,2.123053,-1.302652,9.790638],[-9.383989,4.710679,-8.768131,-9.593365],[3.066321,-8.644581,8.685179,4.187972],[-9.740662,-8.630584,-7.327960,3.528113],[7.579454,-5.677498,2.762990,-0.894035],[2.021061,8.009611,2.972886,-2.121203],[-3.803376,-2.955801,-8.435661,-5.128338],[5.681308,9.938017,0.989009,-9.122185],[-5.290212,-2.554033,1.525808,5.861954],[-3.056716,-9.611872,-5.045214,-4.702734],[4.668937,6.034314,7.814977,-5.372643],[-8.754148,-8.325129,-4.127881,2.903139],[8.385858,-2.215180,-2.105045,-5.355738],[-3.499183,-3.478617,4.120730,5.141860],[-2.999554,-7.622910,-9.932480,-3.945987],[-7.863330,-6.413043,-4.333434,2.567434],[-4.191634,-8.643336,-2.887172,1.162175],[1.664838,5.075176,6.438637,7.129980],[2.368572,1.136703,-6.422320,5.472289],[-6.225464,1.102044,0.748571,1.993885],[-4.043306,-4.171223,-9.513553,5.000601],[4.714445,-7.342301,5.201927,-0.127232],[0.471994,8.168830,-2.292898,-6.419610],[-4.587744,1.982480,7.409586,9.154297],[-7.761717,-5.239407,-4.166986,-5.873409],[-2.219280,-8.339797,-0.232234,4.809389],[-8.422658,8.174866,0.782390,7.068179],[2.599281,5.145663,1.704160,-7.729510],[-5.142568,-1.478337,-0.679038,-0.292275],[4.010658,-1.300381,-9.082903,2.828584],[-7.554852,2.858221,7.233890,-0.737169],[8.469958,7.591691,-3.093375,-8.469377],[-0.157731,1.183297,7.808122,6.453114],[-4.509303,-7.946358,7.749641,9.602443],[-8.730880,6.204396,-1.510768,-8.093816]], dtype = "float64")#candidate|15412|(48, 4)|const|float64
call_15411 = relay.TupleGetItem(func_11624_call(relay.reshape(const_15412.astype('float64'), [6, 2, 16]), relay.reshape(const_15409.astype('bool'), [2112,]), ), 3)
call_15413 = relay.TupleGetItem(func_11627_call(relay.reshape(const_15412.astype('float64'), [6, 2, 16]), relay.reshape(const_15409.astype('bool'), [2112,]), ), 3)
func_14041_call = mod.get_global_var('func_14041')
func_14042_call = mutated_mod.get_global_var('func_14042')
call_15416 = func_14041_call()
call_15417 = func_14041_call()
uop_15418 = relay.sin(call_15408.astype('float64')) # shape=(44, 48)
uop_15420 = relay.sin(call_15410.astype('float64')) # shape=(44, 48)
func_7714_call = mod.get_global_var('func_7714')
func_7716_call = mutated_mod.get_global_var('func_7716')
call_15431 = func_7714_call()
call_15432 = func_7714_call()
output = relay.Tuple([call_15384,const_15409,call_15411,const_15412,call_15416,uop_15418,call_15431,])
output2 = relay.Tuple([call_15385,const_15409,call_15413,const_15412,call_15417,uop_15420,call_15432,])
func_15441 = relay.Function([], output)
mod['func_15441'] = func_15441
mod = relay.transform.InferType()(mod)
mutated_mod['func_15441'] = func_15441
mutated_mod = relay.transform.InferType()(mutated_mod)
func_15441_call = mutated_mod.get_global_var('func_15441')
call_15442 = func_15441_call()
output = call_15442
func_15443 = relay.Function([], output)
mutated_mod['func_15443'] = func_15443
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10738_call = mod.get_global_var('func_10738')
func_10740_call = mutated_mod.get_global_var('func_10740')
call_15494 = relay.TupleGetItem(func_10738_call(), 1)
call_15495 = relay.TupleGetItem(func_10740_call(), 1)
output = call_15494
output2 = call_15495
func_15500 = relay.Function([], output)
mod['func_15500'] = func_15500
mod = relay.transform.InferType()(mod)
mutated_mod['func_15500'] = func_15500
mutated_mod = relay.transform.InferType()(mutated_mod)
func_15500_call = mutated_mod.get_global_var('func_15500')
call_15501 = func_15500_call()
output = call_15501
func_15502 = relay.Function([], output)
mutated_mod['func_15502'] = func_15502
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12506_call = mod.get_global_var('func_12506')
func_12508_call = mutated_mod.get_global_var('func_12508')
call_15520 = relay.TupleGetItem(func_12506_call(), 1)
call_15521 = relay.TupleGetItem(func_12508_call(), 1)
output = call_15520
output2 = call_15521
func_15522 = relay.Function([], output)
mod['func_15522'] = func_15522
mod = relay.transform.InferType()(mod)
output = func_15522()
func_15523 = relay.Function([], output)
mutated_mod['func_15523'] = func_15523
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14832_call = mod.get_global_var('func_14832')
func_14833_call = mutated_mod.get_global_var('func_14833')
call_15578 = func_14832_call()
call_15579 = func_14832_call()
func_13519_call = mod.get_global_var('func_13519')
func_13521_call = mutated_mod.get_global_var('func_13521')
call_15583 = relay.TupleGetItem(func_13519_call(), 1)
call_15584 = relay.TupleGetItem(func_13521_call(), 1)
output = relay.Tuple([call_15578,call_15583,])
output2 = relay.Tuple([call_15579,call_15584,])
func_15592 = relay.Function([], output)
mod['func_15592'] = func_15592
mod = relay.transform.InferType()(mod)
mutated_mod['func_15592'] = func_15592
mutated_mod = relay.transform.InferType()(mutated_mod)
func_15592_call = mutated_mod.get_global_var('func_15592')
call_15593 = func_15592_call()
output = call_15593
func_15594 = relay.Function([], output)
mutated_mod['func_15594'] = func_15594
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12140_call = mod.get_global_var('func_12140')
func_12141_call = mutated_mod.get_global_var('func_12141')
call_15604 = func_12140_call()
call_15605 = func_12140_call()
output = call_15604
output2 = call_15605
func_15606 = relay.Function([], output)
mod['func_15606'] = func_15606
mod = relay.transform.InferType()(mod)
mutated_mod['func_15606'] = func_15606
mutated_mod = relay.transform.InferType()(mutated_mod)
func_15606_call = mutated_mod.get_global_var('func_15606')
call_15607 = func_15606_call()
output = call_15607
func_15608 = relay.Function([], output)
mutated_mod['func_15608'] = func_15608
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12683_call = mod.get_global_var('func_12683')
func_12684_call = mutated_mod.get_global_var('func_12684')
call_15718 = func_12683_call()
call_15719 = func_12683_call()
func_1345_call = mod.get_global_var('func_1345')
func_1348_call = mutated_mod.get_global_var('func_1348')
var_15722 = relay.var("var_15722", dtype = "int16", shape = (250,))#candidate|15722|(250,)|var|int16
call_15721 = relay.TupleGetItem(func_1345_call(relay.reshape(var_15722.astype('int16'), [10, 5, 5])), 0)
call_15723 = relay.TupleGetItem(func_1348_call(relay.reshape(var_15722.astype('int16'), [10, 5, 5])), 0)
output = relay.Tuple([call_15718,call_15721,var_15722,])
output2 = relay.Tuple([call_15719,call_15723,var_15722,])
func_15744 = relay.Function([var_15722,], output)
mod['func_15744'] = func_15744
mod = relay.transform.InferType()(mod)
mutated_mod['func_15744'] = func_15744
mutated_mod = relay.transform.InferType()(mutated_mod)
var_15745 = relay.var("var_15745", dtype = "int16", shape = (250,))#candidate|15745|(250,)|var|int16
func_15744_call = mutated_mod.get_global_var('func_15744')
call_15746 = func_15744_call(var_15745)
output = call_15746
func_15747 = relay.Function([var_15745], output)
mutated_mod['func_15747'] = func_15747
mutated_mod = relay.transform.InferType()(mutated_mod)
var_15755 = relay.var("var_15755", dtype = "bool", shape = (12, 6, 12))#candidate|15755|(12, 6, 12)|var|bool
var_15756 = relay.var("var_15756", dtype = "bool", shape = (12, 6, 12))#candidate|15756|(12, 6, 12)|var|bool
bop_15757 = relay.logical_and(var_15755.astype('bool'), relay.reshape(var_15756.astype('bool'), relay.shape_of(var_15755))) # shape=(12, 6, 12)
func_9479_call = mod.get_global_var('func_9479')
func_9480_call = mutated_mod.get_global_var('func_9480')
call_15760 = func_9479_call()
call_15761 = func_9479_call()
func_8624_call = mod.get_global_var('func_8624')
func_8626_call = mutated_mod.get_global_var('func_8626')
const_15769 = relay.const([[True,True],[True,False],[True,False],[True,False],[False,False],[False,True],[True,False],[True,False],[True,True],[False,False],[True,False],[False,False],[False,True],[False,True],[True,False],[True,False],[True,False],[True,False],[False,False],[False,False],[False,False],[True,True],[False,True],[True,True],[False,True],[True,True],[False,True],[True,False],[False,False],[True,False],[False,False],[False,True],[False,True],[True,True],[True,True],[True,True],[True,True],[False,True],[False,True],[True,False],[True,False],[False,True],[False,True],[True,False],[True,False],[False,True],[False,True],[False,False],[False,True],[True,False],[False,True],[True,True],[False,False],[True,False],[True,False],[False,False],[False,False],[True,False],[False,False],[True,True],[False,True],[True,False],[False,True],[True,True],[True,False],[True,True],[True,False],[True,True],[False,False],[True,False],[False,False],[False,False],[False,False],[True,False],[False,False],[False,True],[True,True],[True,False],[False,False],[True,True],[True,False],[True,False],[False,False],[False,True],[False,True],[True,False],[True,True],[False,False],[True,True],[False,False],[True,False],[True,True],[True,False],[True,False],[True,False],[True,False],[False,False],[False,False],[False,False],[True,False],[False,False],[False,True],[False,True],[True,True],[False,False],[True,False],[False,False],[True,False],[True,False],[False,False],[False,True],[False,False],[False,False],[False,False],[True,False],[True,True],[False,True],[False,False],[False,False],[False,True],[False,True],[True,False],[False,False],[False,True],[False,False],[True,False],[False,True],[False,False],[True,False],[False,False],[False,True],[True,True],[True,False],[True,True],[False,True],[False,False],[True,True],[False,True],[True,True],[False,True],[True,True],[True,True],[False,True],[True,True],[False,False],[False,False],[True,True],[True,False],[True,True],[False,True],[False,False],[True,True],[False,False],[False,True],[True,False],[True,False],[True,False],[False,True],[False,True],[True,False],[True,True],[False,True],[False,False],[True,False],[True,True],[True,True],[False,True],[True,False],[True,True],[True,False],[False,False],[False,True],[True,False],[True,True],[False,False],[True,True],[True,True],[False,True],[True,False],[True,False],[True,True],[False,True],[False,True],[True,True],[False,True],[True,False],[True,True],[False,False],[False,True],[True,False],[True,False],[True,False],[False,False],[True,True],[False,True],[False,True],[False,False],[True,False],[True,False],[True,True],[True,False],[False,True],[True,False],[True,True],[True,True],[True,False],[True,True],[False,True],[True,True],[True,True],[False,True],[False,False],[True,True],[False,False],[False,True],[True,True],[True,True],[False,True],[True,False],[False,False],[True,False],[False,False],[True,False],[False,False],[False,True],[True,False],[False,True],[True,True],[True,True],[True,True],[True,False],[False,False],[False,True],[True,True],[True,False],[False,False],[False,False],[False,True],[True,False],[True,True],[True,False],[True,True],[True,False],[False,False],[False,True],[True,True],[False,False],[True,False],[True,True],[True,False],[True,True],[False,True],[False,False],[False,True],[True,True],[False,False],[True,True],[False,False],[False,False],[True,False],[False,False],[True,False],[False,False],[False,True],[True,True],[True,False],[True,True],[True,True],[False,True],[False,True],[False,False],[True,True],[True,True],[False,True],[False,True],[True,False],[True,False],[False,False],[True,False],[True,False],[True,True],[True,False],[False,False],[True,False],[False,True],[True,False],[True,True],[False,True],[False,False],[False,False],[True,False],[False,False],[False,False],[False,True],[False,False],[False,False],[True,True],[False,True],[True,False],[False,True],[True,True],[False,True],[False,False],[False,True],[False,False],[True,True],[False,False],[True,True],[False,False],[False,True],[False,False],[True,True],[True,True],[False,True],[True,False],[False,True],[False,False],[False,False],[False,False],[True,False],[False,True],[True,True],[True,True],[False,True],[True,False],[False,True],[True,True],[False,False],[True,False],[True,False],[True,False],[True,True],[False,True],[True,True],[True,True],[True,False],[False,True],[True,True],[False,True],[False,True],[True,True],[False,False],[False,False],[True,True],[False,False],[False,True],[False,True],[False,True],[True,False],[False,False],[True,True],[False,True],[False,True],[False,False],[False,False],[True,False],[True,True],[False,False],[True,True],[True,False],[False,True],[True,False],[True,False],[True,False],[False,True],[False,True],[True,True],[False,True],[False,False],[False,True],[False,True],[True,False],[True,True],[False,False],[True,True],[False,True],[True,False],[True,False],[False,True],[False,False],[False,False],[True,True],[True,True],[True,False],[True,True],[True,True],[False,False],[True,True],[True,True],[False,False],[True,False],[True,False],[False,True],[False,False],[False,False],[False,False],[False,True],[False,False],[False,True],[False,True],[False,True],[True,False],[True,False],[False,False],[False,False],[True,True],[False,False],[True,True],[True,True],[True,True],[True,False],[False,True],[True,False],[True,False],[True,True],[True,True],[False,False],[True,True],[True,True],[False,True],[True,True],[False,False],[True,True],[True,True],[False,False],[False,True],[False,False],[False,False],[False,False],[False,True],[True,True],[False,False],[False,False],[True,True],[True,True],[False,True],[False,False],[True,False],[True,False],[True,True],[False,True],[False,True],[False,False],[True,False],[False,True],[False,False],[False,False],[False,False],[False,True],[True,False],[True,True],[True,True],[True,False],[True,False],[False,False],[True,False],[False,True],[True,False],[False,False],[False,False],[True,False],[False,False],[True,False],[False,True],[False,False],[True,True],[True,False],[False,True],[False,False],[True,False],[False,True],[True,False],[False,False],[False,False],[True,True],[True,False],[True,True],[False,False],[False,True],[False,False],[True,True],[True,False],[False,True],[True,False],[True,True],[True,False],[False,False],[False,False],[False,True],[True,True],[False,False],[False,True],[True,False],[False,True],[True,False],[True,False],[True,False],[True,True],[False,False],[False,True],[True,True],[True,True],[True,False],[False,True],[True,True],[True,True],[True,True],[False,False],[True,False],[False,True],[False,True],[True,False],[False,False],[True,False],[True,True],[True,False],[False,True],[False,True],[True,False],[True,False],[True,False],[True,False],[True,True],[False,False],[False,False],[True,False],[False,True],[False,False],[True,False],[False,False],[True,True],[True,False],[False,True],[True,True],[True,False],[True,False],[False,False],[False,True],[False,False],[False,False],[True,True],[False,True],[False,True],[True,False],[True,True],[False,False],[False,True],[False,True],[False,False],[False,True],[False,False],[True,True],[False,True],[False,False],[False,False],[False,True],[False,True],[False,False],[False,True],[False,True],[False,True],[True,False],[False,False],[True,True],[False,False],[False,False],[False,False],[True,False],[True,False],[True,True],[False,True],[False,False],[False,False],[True,False],[True,True],[True,True],[False,True],[False,True],[True,True],[False,True],[True,False],[True,True],[False,True],[False,False],[True,True],[True,True],[False,False],[False,True],[False,True],[True,False],[False,True],[True,True],[False,True],[False,True],[True,False],[False,False],[False,True],[False,True],[False,False],[True,True],[True,False],[True,True],[False,True],[False,True],[False,False],[True,False],[True,False],[True,True],[False,True],[False,True],[True,False],[True,False],[True,True],[True,False],[True,False],[True,False],[False,False],[False,True],[True,False],[False,True],[False,True],[False,True],[True,True],[False,True],[True,False],[False,False],[False,False],[False,False],[True,True],[False,True],[True,True],[True,False],[False,True],[True,True],[False,True],[True,False],[False,True],[False,True],[False,False],[True,True],[True,True],[False,True],[True,False],[True,True],[False,True],[False,True],[True,True],[True,True],[True,False],[False,True],[True,True],[True,True],[False,True],[True,True],[False,False],[False,True],[True,False],[False,True],[True,False],[False,True],[True,False],[False,False],[True,False],[True,False],[False,False],[True,False],[True,True],[True,False],[False,False],[True,False],[False,True],[True,False],[False,False],[True,True],[False,True],[False,True],[True,False],[False,False],[False,True],[True,True],[True,False],[True,True],[True,False],[True,False],[True,False],[False,True],[True,False],[True,True],[False,False],[False,False],[True,False],[True,False],[True,True],[True,True],[True,False],[False,False],[False,True],[True,False],[False,False],[False,True],[False,False],[False,False],[False,False],[True,False],[False,False],[False,False],[False,False],[False,True],[True,True],[True,False],[True,True],[True,False],[True,False],[False,True],[True,False],[False,True],[False,False],[True,True],[False,True],[True,True],[True,False],[True,True],[False,True],[True,True],[True,False],[False,False],[True,True],[False,False],[True,False],[True,False],[False,True],[False,True],[False,True],[False,False],[False,True],[True,True],[True,False],[True,True],[False,False],[True,True],[False,True],[True,True],[False,False],[False,True],[False,True],[False,True],[True,False],[False,True],[True,False],[True,False],[True,True],[True,True],[True,False],[False,True],[False,True],[False,False],[False,False],[False,False],[False,False],[False,False],[True,False],[True,False],[False,True],[True,True],[True,True],[True,True],[False,True],[False,True],[True,False],[True,False],[False,True],[False,False],[True,False],[True,True],[False,True],[False,False],[True,True],[False,True],[True,False],[False,False],[True,False],[True,True],[True,True],[False,False],[False,True],[False,False],[True,True],[False,False],[True,True],[False,False],[False,False],[False,True],[True,False],[False,False],[False,True],[True,True],[True,False],[False,False],[False,True],[False,False],[False,True],[False,True],[False,False],[False,True],[False,False],[True,False],[False,True],[False,True],[False,False],[False,False],[True,True],[False,False],[True,False],[False,True],[True,True],[True,False],[False,True],[True,False],[False,True],[True,False],[True,True],[False,True],[False,False],[True,False],[True,True],[True,False],[False,True],[True,True],[True,True],[True,True],[False,False],[True,False],[False,False],[False,False],[False,False],[False,True],[True,False],[True,True],[True,False],[False,False],[True,True],[False,True],[False,True],[False,True],[True,True],[False,True],[False,True],[False,False],[False,False],[False,False],[False,False],[True,True],[False,False],[True,True],[False,True],[True,True],[False,False],[False,False],[True,True],[True,False],[False,False],[False,False],[True,False],[False,True],[False,False],[True,True],[False,True],[False,True],[True,True],[False,False],[False,False],[True,False],[False,False],[False,True],[True,False],[False,True],[False,False],[False,True],[False,False],[True,False],[True,False],[True,True],[True,False],[False,True],[True,True],[True,False],[True,False],[False,True],[False,True],[False,True],[True,False],[True,True],[False,True],[False,False],[True,True],[True,False],[False,False],[False,True],[False,False],[False,False],[True,True],[False,False],[False,False],[True,False],[True,False],[False,False],[False,True],[True,True],[False,False],[True,True],[True,False],[False,True],[True,False],[True,True],[False,True],[True,False],[True,True],[False,True],[False,False],[True,True],[False,True],[False,False],[False,True],[True,False],[True,True],[False,True],[True,False],[False,False],[False,True],[False,False],[True,True],[False,False],[True,True],[True,True],[True,False],[False,True],[False,False],[True,False],[False,True],[True,True],[False,True],[False,True],[True,True],[False,True],[False,False],[True,True],[True,False],[True,False],[True,False],[True,False],[True,False],[True,True],[False,False],[True,False],[True,False],[False,True],[True,False],[True,False],[True,True],[True,False],[True,True],[True,False],[True,True],[True,False],[True,False],[False,False],[False,True],[True,True],[True,True],[True,True],[True,True],[False,True],[False,True],[True,True],[False,True],[True,True],[False,True],[False,True],[False,True],[True,True],[True,True],[False,False],[False,True],[True,True],[False,False],[False,False],[False,True],[True,False],[False,False],[True,True],[True,True],[False,True],[False,False],[False,False],[True,True],[True,True],[False,True],[True,False],[True,False],[False,True],[False,False],[True,False],[True,False],[False,False],[True,False],[True,False],[True,True],[False,True],[False,False],[True,True],[False,False],[False,False],[False,True],[True,True],[True,True],[False,False],[True,False],[False,True],[False,True],[True,True],[True,False],[False,False],[True,False],[True,True],[False,False],[True,False],[False,True],[True,False],[True,False],[True,False],[True,False],[False,False],[False,True],[True,False],[False,False],[False,True],[False,False],[True,False],[False,False],[True,False],[False,False],[True,False],[False,False],[True,True],[False,False],[True,True],[False,False],[True,False],[True,True],[True,True],[True,True],[False,False],[True,True],[False,True],[True,True],[True,True]], dtype = "bool")#candidate|15769|(1056, 2)|const|bool
call_15768 = relay.TupleGetItem(func_8624_call(relay.reshape(const_15769.astype('bool'), [44, 48])), 0)
call_15770 = relay.TupleGetItem(func_8626_call(relay.reshape(const_15769.astype('bool'), [44, 48])), 0)
var_15783 = relay.var("var_15783", dtype = "bool", shape = (1056, 2))#candidate|15783|(1056, 2)|var|bool
bop_15784 = relay.multiply(const_15769.astype('int8'), relay.reshape(var_15783.astype('int8'), relay.shape_of(const_15769))) # shape=(1056, 2)
bop_15791 = relay.right_shift(const_15769.astype('uint8'), relay.reshape(var_15783.astype('uint8'), relay.shape_of(const_15769))) # shape=(1056, 2)
output = relay.Tuple([bop_15757,call_15760,call_15768,bop_15784,bop_15791,])
output2 = relay.Tuple([bop_15757,call_15761,call_15770,bop_15784,bop_15791,])
func_15799 = relay.Function([var_15755,var_15756,var_15783,], output)
mod['func_15799'] = func_15799
mod = relay.transform.InferType()(mod)
var_15800 = relay.var("var_15800", dtype = "bool", shape = (12, 6, 12))#candidate|15800|(12, 6, 12)|var|bool
var_15801 = relay.var("var_15801", dtype = "bool", shape = (12, 6, 12))#candidate|15801|(12, 6, 12)|var|bool
var_15802 = relay.var("var_15802", dtype = "bool", shape = (1056, 2))#candidate|15802|(1056, 2)|var|bool
output = func_15799(var_15800,var_15801,var_15802,)
func_15803 = relay.Function([var_15800,var_15801,var_15802,], output)
mutated_mod['func_15803'] = func_15803
mutated_mod = relay.transform.InferType()(mutated_mod)
func_15500_call = mod.get_global_var('func_15500')
func_15502_call = mutated_mod.get_global_var('func_15502')
call_15900 = func_15500_call()
call_15901 = func_15500_call()
func_11624_call = mod.get_global_var('func_11624')
func_11627_call = mutated_mod.get_global_var('func_11627')
const_15909 = relay.const([[-8.659270,5.154395],[8.879090,2.966580],[-5.758956,-1.877587],[-1.087612,8.507040],[-1.087777,5.597065],[2.239387,-3.268897],[-4.142701,-0.752447],[-1.967951,-1.285458],[0.465601,-8.442855],[-4.697727,5.469319],[2.544558,-5.969997],[6.798820,4.240657],[-3.856840,7.403287],[8.713635,-5.625114],[4.388613,-2.480739],[-3.555498,-6.274519],[-2.774827,-5.765403],[-8.253317,-5.545186],[4.522256,4.925016],[-2.051465,-5.739915],[-8.929833,-5.333409],[-5.411849,8.684864],[9.274543,7.558438],[1.664328,8.043906],[-1.982432,-8.303145],[-8.862277,-4.878933],[0.305088,-7.994351],[1.940042,1.326371],[-3.247052,0.623157],[-1.550960,7.009541],[-1.436994,1.154136],[-9.624548,0.022747],[-0.116237,-5.708179],[-6.131068,-8.004809],[-1.027540,3.673043],[-5.180720,3.004955],[-5.674183,6.739211],[-8.543554,2.888697],[6.365121,-7.805456],[1.387092,-1.540488],[3.546626,-9.398600],[2.787686,-9.827527],[-2.454423,4.785595],[-4.405122,5.737258],[5.599903,3.279519],[5.585112,-2.707379],[1.502618,6.628382],[1.020024,-3.670225],[-4.700528,-7.241597],[3.184388,2.836456],[8.156223,-3.787854],[-3.562473,-6.564920],[-0.141702,7.208986],[-9.825759,-1.943186],[-4.836694,1.532985],[0.243931,-8.748072],[-1.480126,-8.309910],[6.650671,7.987584],[-8.066636,-5.037077],[-7.230029,2.431355],[-7.710334,-7.237565],[-9.121664,-3.467557],[-1.741945,-5.529189],[1.658085,3.086200],[-3.516915,-2.739276],[-3.224445,-7.266472],[8.273172,7.284265],[4.220434,5.865385],[9.222145,8.775060],[-9.442006,-2.655578],[8.797432,0.003857],[3.929388,-1.614177],[-9.642476,-3.546497],[2.603134,9.701274],[9.252023,-9.624164],[3.003506,7.641833],[8.920199,8.359485],[-7.288478,9.858529],[-4.760036,8.830777],[7.572043,8.778852],[-1.390762,-2.391862],[-2.091192,-2.169614],[-6.496377,4.686535],[-3.696343,-5.125859],[5.655074,-6.957635],[7.249304,8.573479],[-7.573381,-7.227361],[-2.094141,1.629787],[6.565092,-6.011388],[0.545611,2.044554],[7.224864,-6.034890],[5.598423,-6.492982],[-0.121806,0.099143],[-4.694271,7.331201],[4.194952,-0.277723],[-3.720987,-1.413431]], dtype = "float64")#candidate|15909|(96, 2)|const|float64
var_15910 = relay.var("var_15910", dtype = "bool", shape = (2112,))#candidate|15910|(2112,)|var|bool
call_15908 = relay.TupleGetItem(func_11624_call(relay.reshape(const_15909.astype('float64'), [6, 2, 16]), relay.reshape(var_15910.astype('bool'), [2112,]), ), 3)
call_15911 = relay.TupleGetItem(func_11627_call(relay.reshape(const_15909.astype('float64'), [6, 2, 16]), relay.reshape(var_15910.astype('bool'), [2112,]), ), 3)
func_13814_call = mod.get_global_var('func_13814')
func_13815_call = mutated_mod.get_global_var('func_13815')
call_15925 = relay.TupleGetItem(func_13814_call(), 1)
call_15926 = relay.TupleGetItem(func_13815_call(), 1)
output = relay.Tuple([call_15900,call_15908,const_15909,var_15910,call_15925,])
output2 = relay.Tuple([call_15901,call_15911,const_15909,var_15910,call_15926,])
func_15938 = relay.Function([var_15910,], output)
mod['func_15938'] = func_15938
mod = relay.transform.InferType()(mod)
var_15939 = relay.var("var_15939", dtype = "bool", shape = (2112,))#candidate|15939|(2112,)|var|bool
output = func_15938(var_15939)
func_15940 = relay.Function([var_15939], output)
mutated_mod['func_15940'] = func_15940
mutated_mod = relay.transform.InferType()(mutated_mod)
var_16068 = relay.var("var_16068", dtype = "uint32", shape = (5, 14, 7))#candidate|16068|(5, 14, 7)|var|uint32
var_16069 = relay.var("var_16069", dtype = "uint32", shape = (5, 14, 7))#candidate|16069|(5, 14, 7)|var|uint32
bop_16070 = relay.bitwise_and(var_16068.astype('uint32'), relay.reshape(var_16069.astype('uint32'), relay.shape_of(var_16068))) # shape=(5, 14, 7)
func_6833_call = mod.get_global_var('func_6833')
func_6835_call = mutated_mod.get_global_var('func_6835')
call_16084 = relay.TupleGetItem(func_6833_call(), 0)
call_16085 = relay.TupleGetItem(func_6835_call(), 0)
uop_16105 = relay.acosh(var_16069.astype('float64')) # shape=(5, 14, 7)
func_9936_call = mod.get_global_var('func_9936')
func_9938_call = mutated_mod.get_global_var('func_9938')
call_16110 = func_9936_call()
call_16111 = func_9936_call()
output = relay.Tuple([bop_16070,call_16084,uop_16105,call_16110,])
output2 = relay.Tuple([bop_16070,call_16085,uop_16105,call_16111,])
func_16117 = relay.Function([var_16068,var_16069,], output)
mod['func_16117'] = func_16117
mod = relay.transform.InferType()(mod)
mutated_mod['func_16117'] = func_16117
mutated_mod = relay.transform.InferType()(mutated_mod)
func_16117_call = mutated_mod.get_global_var('func_16117')
var_16119 = relay.var("var_16119", dtype = "uint32", shape = (5, 14, 7))#candidate|16119|(5, 14, 7)|var|uint32
var_16120 = relay.var("var_16120", dtype = "uint32", shape = (5, 14, 7))#candidate|16120|(5, 14, 7)|var|uint32
call_16118 = func_16117_call(var_16119,var_16120,)
output = call_16118
func_16121 = relay.Function([var_16119,var_16120,], output)
mutated_mod['func_16121'] = func_16121
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12266_call = mod.get_global_var('func_12266')
func_12267_call = mutated_mod.get_global_var('func_12267')
call_16131 = func_12266_call()
call_16132 = func_12266_call()
output = relay.Tuple([call_16131,])
output2 = relay.Tuple([call_16132,])
func_16161 = relay.Function([], output)
mod['func_16161'] = func_16161
mod = relay.transform.InferType()(mod)
output = func_16161()
func_16162 = relay.Function([], output)
mutated_mod['func_16162'] = func_16162
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13519_call = mod.get_global_var('func_13519')
func_13521_call = mutated_mod.get_global_var('func_13521')
call_16189 = relay.TupleGetItem(func_13519_call(), 1)
call_16190 = relay.TupleGetItem(func_13521_call(), 1)
output = call_16189
output2 = call_16190
func_16205 = relay.Function([], output)
mod['func_16205'] = func_16205
mod = relay.transform.InferType()(mod)
mutated_mod['func_16205'] = func_16205
mutated_mod = relay.transform.InferType()(mutated_mod)
func_16205_call = mutated_mod.get_global_var('func_16205')
call_16206 = func_16205_call()
output = call_16206
func_16207 = relay.Function([], output)
mutated_mod['func_16207'] = func_16207
mutated_mod = relay.transform.InferType()(mutated_mod)
var_16217 = relay.var("var_16217", dtype = "int8", shape = (3, 13, 14))#candidate|16217|(3, 13, 14)|var|int8
var_16218 = relay.var("var_16218", dtype = "int8", shape = (3, 13, 14))#candidate|16218|(3, 13, 14)|var|int8
bop_16219 = relay.logical_xor(var_16217.astype('int8'), relay.reshape(var_16218.astype('int8'), relay.shape_of(var_16217))) # shape=(3, 13, 14)
output = relay.Tuple([bop_16219,])
output2 = relay.Tuple([bop_16219,])
func_16224 = relay.Function([var_16217,var_16218,], output)
mod['func_16224'] = func_16224
mod = relay.transform.InferType()(mod)
mutated_mod['func_16224'] = func_16224
mutated_mod = relay.transform.InferType()(mutated_mod)
func_16224_call = mutated_mod.get_global_var('func_16224')
var_16226 = relay.var("var_16226", dtype = "int8", shape = (3, 13, 14))#candidate|16226|(3, 13, 14)|var|int8
var_16227 = relay.var("var_16227", dtype = "int8", shape = (3, 13, 14))#candidate|16227|(3, 13, 14)|var|int8
call_16225 = func_16224_call(var_16226,var_16227,)
output = call_16225
func_16228 = relay.Function([var_16226,var_16227,], output)
mutated_mod['func_16228'] = func_16228
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9078_call = mod.get_global_var('func_9078')
func_9079_call = mutated_mod.get_global_var('func_9079')
call_16297 = relay.TupleGetItem(func_9078_call(), 2)
call_16298 = relay.TupleGetItem(func_9079_call(), 2)
func_12140_call = mod.get_global_var('func_12140')
func_12141_call = mutated_mod.get_global_var('func_12141')
call_16300 = func_12140_call()
call_16301 = func_12140_call()
func_11856_call = mod.get_global_var('func_11856')
func_11857_call = mutated_mod.get_global_var('func_11857')
call_16322 = relay.TupleGetItem(func_11856_call(), 0)
call_16323 = relay.TupleGetItem(func_11857_call(), 0)
func_12683_call = mod.get_global_var('func_12683')
func_12684_call = mutated_mod.get_global_var('func_12684')
call_16339 = func_12683_call()
call_16340 = func_12683_call()
func_9002_call = mod.get_global_var('func_9002')
func_9004_call = mutated_mod.get_global_var('func_9004')
call_16362 = func_9002_call()
call_16363 = func_9002_call()
output = relay.Tuple([call_16297,call_16300,call_16322,call_16339,call_16362,])
output2 = relay.Tuple([call_16298,call_16301,call_16323,call_16340,call_16363,])
func_16366 = relay.Function([], output)
mod['func_16366'] = func_16366
mod = relay.transform.InferType()(mod)
output = func_16366()
func_16367 = relay.Function([], output)
mutated_mod['func_16367'] = func_16367
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9567_call = mod.get_global_var('func_9567')
func_9568_call = mutated_mod.get_global_var('func_9568')
call_16371 = relay.TupleGetItem(func_9567_call(), 1)
call_16372 = relay.TupleGetItem(func_9568_call(), 1)
var_16373 = relay.var("var_16373", dtype = "float32", shape = (9, 11, 4))#candidate|16373|(9, 11, 4)|var|float32
bop_16374 = relay.greater_equal(call_16371.astype('bool'), relay.reshape(var_16373.astype('bool'), relay.shape_of(call_16371))) # shape=(9, 11, 4)
bop_16377 = relay.greater_equal(call_16372.astype('bool'), relay.reshape(var_16373.astype('bool'), relay.shape_of(call_16372))) # shape=(9, 11, 4)
func_16117_call = mod.get_global_var('func_16117')
func_16121_call = mutated_mod.get_global_var('func_16121')
var_16379 = relay.var("var_16379", dtype = "uint32", shape = (7, 70))#candidate|16379|(7, 70)|var|uint32
call_16378 = relay.TupleGetItem(func_16117_call(relay.reshape(var_16379.astype('uint32'), [5, 14, 7]), relay.reshape(var_16379.astype('uint32'), [5, 14, 7]), ), 1)
call_16380 = relay.TupleGetItem(func_16121_call(relay.reshape(var_16379.astype('uint32'), [5, 14, 7]), relay.reshape(var_16379.astype('uint32'), [5, 14, 7]), ), 1)
func_11570_call = mod.get_global_var('func_11570')
func_11571_call = mutated_mod.get_global_var('func_11571')
call_16386 = relay.TupleGetItem(func_11570_call(), 0)
call_16387 = relay.TupleGetItem(func_11571_call(), 0)
func_1462_call = mod.get_global_var('func_1462')
func_1467_call = mutated_mod.get_global_var('func_1467')
var_16389 = relay.var("var_16389", dtype = "int64", shape = ())#candidate|16389|()|var|int64
var_16390 = relay.var("var_16390", dtype = "int64", shape = (75,))#candidate|16390|(75,)|var|int64
const_16391 = relay.const([-5,9,6,7,2,5,-8,-2,6,8,-4,-4,-2,3,7,3,4,7,-3,-9,4,1,-8,-4,-2,-4,9,-9,9,4,-1,-9,10,-5,2,8,-8,1,3,2,-10,-10,-4,-1,-10,-8,-3,-5,5,-3,-4,5,1,-7,1,-10,4,9,10,3,-4,-10,-8,-9,-5,-1,5,-10,-2,-3,-6,4,-6,10,-3,-5,-3,-6,-9,5,-7,-2,2,1,1,-7,-10,7,-3,9,9,5,-8,-5,3,-3,-6,-3,9,4,-1,-6,-9,-4,-1,8,-8,6,-3,-2,-10,-9,10,-9,-7,10,2,-6,1,5,4,4,8,7,-10,10,-6,8,-10,-6,10,4,1,4,1,-6,5,-6,-1,-4,3,-2,-2,4,9,-8,5,-10,-1,10,4,-6,5,1,6,8,-1,8,-1,7,2,9,-9,-6,1,-2,-2,-3,-4,-5,-10,-10,1,6,2,-2,-1,4,9,-10,-7,-7,-5,-6,-5,-7,-3,-5,7,-8,5,5,-2,3,10,4,-8,-4,1,1,-4,10,7,4,9,5,6,9,9,-1,-7,-4,-6,-7,-2,-5,-7,4,2,-10,-1,-4,-4,-7,5,2,5,-7,6,-9,4,-5,-1,-5,-6,-6,9,-6,-5,4,2,-1,3,7,-6,10,-4,-1,5,-10], dtype = "int16")#candidate|16391|(250,)|const|int16
call_16388 = relay.TupleGetItem(func_1462_call(relay.reshape(var_16389.astype('int64'), []), relay.reshape(var_16390.astype('int64'), [15, 5, 1]), relay.reshape(const_16391.astype('int16'), [125, 2]), ), 1)
call_16392 = relay.TupleGetItem(func_1467_call(relay.reshape(var_16389.astype('int64'), []), relay.reshape(var_16390.astype('int64'), [15, 5, 1]), relay.reshape(const_16391.astype('int16'), [125, 2]), ), 1)
uop_16401 = relay.atan(call_16388.astype('float32')) # shape=(10, 5, 5)
uop_16403 = relay.atan(call_16392.astype('float32')) # shape=(10, 5, 5)
func_12266_call = mod.get_global_var('func_12266')
func_12267_call = mutated_mod.get_global_var('func_12267')
call_16408 = func_12266_call()
call_16409 = func_12266_call()
output = relay.Tuple([bop_16374,call_16378,var_16379,call_16386,var_16389,var_16390,const_16391,uop_16401,call_16408,])
output2 = relay.Tuple([bop_16377,call_16380,var_16379,call_16387,var_16389,var_16390,const_16391,uop_16403,call_16409,])
func_16417 = relay.Function([var_16373,var_16379,var_16389,var_16390,], output)
mod['func_16417'] = func_16417
mod = relay.transform.InferType()(mod)
var_16418 = relay.var("var_16418", dtype = "float32", shape = (9, 11, 4))#candidate|16418|(9, 11, 4)|var|float32
var_16419 = relay.var("var_16419", dtype = "uint32", shape = (7, 70))#candidate|16419|(7, 70)|var|uint32
var_16420 = relay.var("var_16420", dtype = "int64", shape = ())#candidate|16420|()|var|int64
var_16421 = relay.var("var_16421", dtype = "int64", shape = (75,))#candidate|16421|(75,)|var|int64
output = func_16417(var_16418,var_16419,var_16420,var_16421,)
func_16422 = relay.Function([var_16418,var_16419,var_16420,var_16421,], output)
mutated_mod['func_16422'] = func_16422
mutated_mod = relay.transform.InferType()(mutated_mod)
func_15500_call = mod.get_global_var('func_15500')
func_15502_call = mutated_mod.get_global_var('func_15502')
call_16506 = func_15500_call()
call_16507 = func_15500_call()
func_11313_call = mod.get_global_var('func_11313')
func_11314_call = mutated_mod.get_global_var('func_11314')
call_16537 = relay.TupleGetItem(func_11313_call(), 0)
call_16538 = relay.TupleGetItem(func_11314_call(), 0)
output = relay.Tuple([call_16506,call_16537,])
output2 = relay.Tuple([call_16507,call_16538,])
func_16580 = relay.Function([], output)
mod['func_16580'] = func_16580
mod = relay.transform.InferType()(mod)
mutated_mod['func_16580'] = func_16580
mutated_mod = relay.transform.InferType()(mutated_mod)
func_16580_call = mutated_mod.get_global_var('func_16580')
call_16581 = func_16580_call()
output = call_16581
func_16582 = relay.Function([], output)
mutated_mod['func_16582'] = func_16582
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12471_call = mod.get_global_var('func_12471')
func_12472_call = mutated_mod.get_global_var('func_12472')
call_16610 = relay.TupleGetItem(func_12471_call(), 1)
call_16611 = relay.TupleGetItem(func_12472_call(), 1)
output = relay.Tuple([call_16610,])
output2 = relay.Tuple([call_16611,])
func_16622 = relay.Function([], output)
mod['func_16622'] = func_16622
mod = relay.transform.InferType()(mod)
output = func_16622()
func_16623 = relay.Function([], output)
mutated_mod['func_16623'] = func_16623
mutated_mod = relay.transform.InferType()(mutated_mod)
var_16640 = relay.var("var_16640", dtype = "float64", shape = (8, 4, 2))#candidate|16640|(8, 4, 2)|var|float64
uop_16641 = relay.rsqrt(var_16640.astype('float64')) # shape=(8, 4, 2)
func_16161_call = mod.get_global_var('func_16161')
func_16162_call = mutated_mod.get_global_var('func_16162')
call_16645 = relay.TupleGetItem(func_16161_call(), 0)
call_16646 = relay.TupleGetItem(func_16162_call(), 0)
func_9968_call = mod.get_global_var('func_9968')
func_9970_call = mutated_mod.get_global_var('func_9970')
call_16666 = relay.TupleGetItem(func_9968_call(), 0)
call_16667 = relay.TupleGetItem(func_9970_call(), 0)
output = relay.Tuple([uop_16641,call_16645,call_16666,])
output2 = relay.Tuple([uop_16641,call_16646,call_16667,])
func_16668 = relay.Function([var_16640,], output)
mod['func_16668'] = func_16668
mod = relay.transform.InferType()(mod)
var_16669 = relay.var("var_16669", dtype = "float64", shape = (8, 4, 2))#candidate|16669|(8, 4, 2)|var|float64
output = func_16668(var_16669)
func_16670 = relay.Function([var_16669], output)
mutated_mod['func_16670'] = func_16670
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14715_call = mod.get_global_var('func_14715')
func_14717_call = mutated_mod.get_global_var('func_14717')
call_16719 = func_14715_call()
call_16720 = func_14715_call()
output = call_16719
output2 = call_16720
func_16742 = relay.Function([], output)
mod['func_16742'] = func_16742
mod = relay.transform.InferType()(mod)
mutated_mod['func_16742'] = func_16742
mutated_mod = relay.transform.InferType()(mutated_mod)
func_16742_call = mutated_mod.get_global_var('func_16742')
call_16743 = func_16742_call()
output = call_16743
func_16744 = relay.Function([], output)
mutated_mod['func_16744'] = func_16744
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11053_call = mod.get_global_var('func_11053')
func_11055_call = mutated_mod.get_global_var('func_11055')
call_16745 = relay.TupleGetItem(func_11053_call(), 4)
call_16746 = relay.TupleGetItem(func_11055_call(), 4)
func_14546_call = mod.get_global_var('func_14546')
func_14547_call = mutated_mod.get_global_var('func_14547')
call_16748 = relay.TupleGetItem(func_14546_call(), 3)
call_16749 = relay.TupleGetItem(func_14547_call(), 3)
func_12975_call = mod.get_global_var('func_12975')
func_12978_call = mutated_mod.get_global_var('func_12978')
const_16800 = relay.const([-5,8,-5,-2,6,-4,4,-3,-10,-7,-4,-7,1,9,9,-4,9,2,-6,6,8,7,1,-4,2,1,4,-10,8,-6,1,3,4,5,10,2,-3,-10,8,7,-7,-8,10,7,7,-3,5,-2,1,-1,-1,9,-3,-10,4,2,8,4,8,-6,-5,7,6,1,9,10,-8,-5,9,3,-5,-5,-5,-10,8,-1,-6,-5,8,-10,9,-8,-1,7,10,-3,6,-7,7,-5,-5,8,-5,-4,8,-1,-5,3,3,8,-3,-8,9,10,-5,10,1,1,-10,10,-8,6,-3,-1,-10,-2,10,-10,7,4,6,2,-2,5,10,2,8,3,-7,-10,3,-10,1,-9,-1,-10,9,-6,7,-4,9,-6,6,-8,6,-9,-9,-10,-10,-7,-4,-10,9,5,-7,4,7,-3,-1,-5,1,4,5,-8,-4,8,4,-2,-3,-10,6,-6,-5,-5,2,-3,-7,10,-10,-9,-7,-4,-4,-5,-1,-7,10,9,2,2,-5,-4,-2,6,-7,8,-3,-7,7,6,-9,-5,8,-6,10,-4,-3,-9,5,6,-2,7,5,4,10,-1,5,-9,2,3,3,8,6,-10,-3,-4,-1,2,-9,-9,10,-7,8,8,-1,-1,-8,10,-6,-4,7,6,1,3,8,-8,-3,-3,-10,8,-4,6,8,8,4,-5,-2,-8,-10,-4,4,7,4,8,-3,-5,-7,-10,7,-9,2,2,4,8,3,-4,-1,-4,-1,8,9,2,4,-1,2,2,5,-9,-5,4,-8,-5,-7,3,-1,3,-4,-8,-9,-9,-2,-8,-2,5,-3,-5,7,-1,1,4,6,-6,4,-1,6,7,-9,-2,-1,10,7,-6,-7,1,-10,-2,4,-7,3,-1,-5,4,3,-7,-6,-10,-2,9,1,9,-5,-8,-2,-7,-4,-3,-9,3,6,6,-6,-5,3,10,-4,-7,-4,9,-3,-1,9,6,-3,-9,10,1,4,-4,1,-2,5,-5,-8,2,-3,8,9,9,2,10,-7,-8,6,7,6,-4,3,-9,-6,-2,-6,-2,-4,-4,10,8,5,-8,8,8,-7,6,-4,2,-5,-8,5,-5,-2,5,3,9,1,-8,-5,4,1,-3,-4,4,9,10,3,-3,6,-8,3,-6,-7,7,5,3,3,10,10,7,-7,3,4,-4,4,-9,1,3,-2,-9,2,-2,7,10,-7,7,8,3,-6,2,10,6,9,-1,-8,9,-2,4,-4,-9,3,-4,-7,-5,-5,-10,-10,-8,6,1,10,5,-10,1,3,-2,7,-9,2,-7,1,-2,6,2,-9,-7,3,-1,10,5,-4,-10,-5,-7,-1,4,4,2,7,-3,7,5,3,-10,-8,4,4,-2,3,7,-4,7,-8,9,5,4,-3,1,-7,-8,-10,8,8,-4,-9,-6,-2,2,-4,-7,-4,-10,-2,-4,-5,-5,-7,-8,2,8,3,-6,-7,-6,3,9,-6,6,-3,8,-3,3,-5,6,3,9,-8,-2,7,-7,1,8,6,-9,4,-6,-2,8,-10,-3,10,10,10,6,-9,-8,10,2,-1,4,-8,-4,-9,-6,-9,-3,-4,1,-4,1,-10,8,6,6,8,-5,-10,7,-1,10,5,-3,6,-2,8,6,4,-6,3,-10,-1,9,1,-3,-10,-6,-4,-1,10,-3,-7,-6,2,-3,-3,-5,-5,-8,-10,-1,-1,3,-6,8,-10,-4,-9,-9,-4,5,3,-4,4,-7,10,-5,6,8,4,8,6,-2,4,-7,4,-8,4,9,1,-4,-5,3,7,-3,-7,5,-7,-10,8,1,-3,-3,10,-7,-8,-1,-10,-4,6,-5,10,-8,-5,-8,-10,-7,8,10,-1,-9,7,-2,4,1,-3,3,-6,-10,1,-6,-7,-2,2,-10,-8,-4,9,-2,-1,-3,9,10,6,6,8,-8,4,9,-3,-1,-10,-6,10,-1,10,5,-9,3,-5,-5,-9,-5,5,1,4,1,-6,10,4,6,7,-1,6,-4,-3,1,5,4,-1,10,-6,7,7,-7,1,4,5,-4,1,2,-10,5,1,5,-6,-7,-7,6,2,-4,-9,10,-6,-6,4,-1,3,10,-7,7,-2,-8,9,-5,-9,5,-9,-3,1,2,-9,2,8,7,-8,1,-9,1,2,10,-6,1,-3,-10,8,-2,6,-1,7,-4,-4,-5,3,-2,1,-8,10,2,-6,10,8,-2,-7,1,-3,-8,-1,10,8,-10,-6,8,10,9,-4,-1,-10,-7,6,-10,-4,-3,-1,8,5,-8,6,6,6,3,4,-2,-7,-3,8,9,2,-8,5,2,-4,2,8,8,-7,6,5,8,-7,-2,-6,9,-10,-1,-3,-6,7,6,10,-9,-5,8,3,9,-9,-6,-1,-3,10,-8,8,9,-6,1,1,10,-7,5,6,-1,-6,-8,-10,7,-4,4,-1,-7,1,10,10,-9,2,-6,-9,-1,-1,-9,-1,-4,1,7,2,8,4,5,-10,10,8,10,2,-2,2,6,8,-8,-8,1,-1,-1,-7,-10,1,-10,-3,-6,-2,7,-8,9,3,-4,-2,-8,4,-9,-8,-9,-8,-5,9,-5,-8,7,7,3,-3,10,-2,10,10,6,-8,-4,-3,-7,-10,5,5,5,10,-2,5,-8,-2,2,8,9,-2,-4,4,9,-6,-6,-8,2,9,9,-6,8,5,-2,-7,-1,-6,5,-8,5,-1,-4,-2,-5,2,4,10,8,1,10,-8,10,-10,5,-1,2,3,-1,2,-5,-9,-2,10,-6,-7,10,1,-1,-7,9,-9,10,-6,-7,6,-3,-9,-5,5,2,10,-1,-4,-4,-1,6,3,-1,6,7,10,-6,5,9,-3,-3,-3,-5,-7,7,-1,7,1,-1,6,1,-8,-4,-8,-4,-4,-3,-3,5,9,-9,4,-2,-4,2,-1,-5,-9,1,-3,-8,1,-7,2,-6,3,1,1,-2,8,-6,-8,7,1,-5,-2,5,-6,8,4,1,9,-5,-7,5,5,-6,4,2,-1,2,-2,7,-9,6,-10,9,10,10,-2,-7,-6,-10,6,8,9,-1,6,6,4,7,10,-1,-1,-2,-8,8,9,6,9,5,3,8,-3,-5,10,-8,9,3,-2,2,3,6,9,-9,6,-8,-7,8,-5,-6,-6,-7,6,6,-6,-8,10,1,5,-10,2,-10,8,-1,-3,-10,-1,-6,9,-5,-2,-2,-8,-4,2,2,3,7,9,6,4,3,-3,10,-4,-6,9,-9,-2,-8,8,-2,-3,4,-6,-8,-6,-4,1,-10,-1,9,6,-7,-2,5,-6,-1,-6,4,5,10,2,-10,-10,-6,-9,-10,-5,-3,3,-7,7,-1,4,6,-7,1,-2,10,1,2,-1,5,1,-4,-8,-5,-10,-9,-2,-4,-1,6,-3,-5,2,-6,-4,-2,-9,-1,-9,1,3,-4,4,1,2,-1,6,3,5,-3,-8,-4,-1,-1,1,2,1,6,5,-3,7,-3,-9,-2,-6,5,-2,-1,6,-5,-6,-1,-2,-4,-6,-5,-10,7,7,-6,-4,4,-2,9,9,-4,-1,-3,2,10,-4,-5,3,8,1,10,-6,3,3,5,8,-6,4,9,-7,-8,-4,-9,-4,7,-10,-5,5,-6,10,8,-1,-6,-4,-5,-6,3,-3,-6,-9,4,-2,-6,7,-5,3,6,8,1,8,4,-8,-3,1,-9,4,10,4,-3,7,-9,-1,-6,-6,-2,4,8,7,4,1,-8,9,-1,3,-6,-3,-3,-2,5,8,4,-7,4,2,-10,1,9,6,-7,-5,-1,1,-5,3,-3,-9,-10,9,-8,4,-5,-8,7,4,4,8,-10,-7,2,-4,10,-1,-10,6,1,-8,7,1,-9,-9,-6,8,5,-10,-7,1,-10], dtype = "int32")#candidate|16800|(1456,)|const|int32
call_16799 = relay.TupleGetItem(func_12975_call(relay.reshape(const_16800.astype('int32'), [1456,])), 0)
call_16801 = relay.TupleGetItem(func_12978_call(relay.reshape(const_16800.astype('int32'), [1456,])), 0)
output = relay.Tuple([call_16745,call_16748,call_16799,const_16800,])
output2 = relay.Tuple([call_16746,call_16749,call_16801,const_16800,])
func_16803 = relay.Function([], output)
mod['func_16803'] = func_16803
mod = relay.transform.InferType()(mod)
output = func_16803()
func_16804 = relay.Function([], output)
mutated_mod['func_16804'] = func_16804
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14680_call = mod.get_global_var('func_14680')
func_14682_call = mutated_mod.get_global_var('func_14682')
call_16805 = relay.TupleGetItem(func_14680_call(), 2)
call_16806 = relay.TupleGetItem(func_14682_call(), 2)
func_15500_call = mod.get_global_var('func_15500')
func_15502_call = mutated_mod.get_global_var('func_15502')
call_16813 = func_15500_call()
call_16814 = func_15500_call()
output = relay.Tuple([call_16805,call_16813,])
output2 = relay.Tuple([call_16806,call_16814,])
func_16827 = relay.Function([], output)
mod['func_16827'] = func_16827
mod = relay.transform.InferType()(mod)
output = func_16827()
func_16828 = relay.Function([], output)
mutated_mod['func_16828'] = func_16828
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12577_call = mod.get_global_var('func_12577')
func_12578_call = mutated_mod.get_global_var('func_12578')
call_16829 = func_12577_call()
call_16830 = func_12577_call()
output = relay.Tuple([call_16829,])
output2 = relay.Tuple([call_16830,])
func_16833 = relay.Function([], output)
mod['func_16833'] = func_16833
mod = relay.transform.InferType()(mod)
mutated_mod['func_16833'] = func_16833
mutated_mod = relay.transform.InferType()(mutated_mod)
func_16833_call = mutated_mod.get_global_var('func_16833')
call_16834 = func_16833_call()
output = call_16834
func_16835 = relay.Function([], output)
mutated_mod['func_16835'] = func_16835
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14760_call = mod.get_global_var('func_14760')
func_14762_call = mutated_mod.get_global_var('func_14762')
call_16848 = relay.TupleGetItem(func_14760_call(), 0)
call_16849 = relay.TupleGetItem(func_14762_call(), 0)
output = relay.Tuple([call_16848,])
output2 = relay.Tuple([call_16849,])
func_16858 = relay.Function([], output)
mod['func_16858'] = func_16858
mod = relay.transform.InferType()(mod)
mutated_mod['func_16858'] = func_16858
mutated_mod = relay.transform.InferType()(mutated_mod)
func_16858_call = mutated_mod.get_global_var('func_16858')
call_16859 = func_16858_call()
output = call_16859
func_16860 = relay.Function([], output)
mutated_mod['func_16860'] = func_16860
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10453_call = mod.get_global_var('func_10453')
func_10454_call = mutated_mod.get_global_var('func_10454')
call_16870 = func_10453_call()
call_16871 = func_10453_call()
func_8967_call = mod.get_global_var('func_8967')
func_8968_call = mutated_mod.get_global_var('func_8968')
call_16872 = relay.TupleGetItem(func_8967_call(), 1)
call_16873 = relay.TupleGetItem(func_8968_call(), 1)
output = relay.Tuple([call_16870,call_16872,])
output2 = relay.Tuple([call_16871,call_16873,])
func_16886 = relay.Function([], output)
mod['func_16886'] = func_16886
mod = relay.transform.InferType()(mod)
output = func_16886()
func_16887 = relay.Function([], output)
mutated_mod['func_16887'] = func_16887
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10184_call = mod.get_global_var('func_10184')
func_10185_call = mutated_mod.get_global_var('func_10185')
call_16894 = relay.TupleGetItem(func_10184_call(), 0)
call_16895 = relay.TupleGetItem(func_10185_call(), 0)
func_10184_call = mod.get_global_var('func_10184')
func_10185_call = mutated_mod.get_global_var('func_10185')
call_16903 = relay.TupleGetItem(func_10184_call(), 0)
call_16904 = relay.TupleGetItem(func_10185_call(), 0)
output = relay.Tuple([call_16894,call_16903,])
output2 = relay.Tuple([call_16895,call_16904,])
func_16911 = relay.Function([], output)
mod['func_16911'] = func_16911
mod = relay.transform.InferType()(mod)
mutated_mod['func_16911'] = func_16911
mutated_mod = relay.transform.InferType()(mutated_mod)
func_16911_call = mutated_mod.get_global_var('func_16911')
call_16912 = func_16911_call()
output = call_16912
func_16913 = relay.Function([], output)
mutated_mod['func_16913'] = func_16913
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11288_call = mod.get_global_var('func_11288')
func_11290_call = mutated_mod.get_global_var('func_11290')
call_16946 = relay.TupleGetItem(func_11288_call(), 2)
call_16947 = relay.TupleGetItem(func_11290_call(), 2)
func_7491_call = mod.get_global_var('func_7491')
func_7492_call = mutated_mod.get_global_var('func_7492')
call_16948 = relay.TupleGetItem(func_7491_call(), 2)
call_16949 = relay.TupleGetItem(func_7492_call(), 2)
func_14896_call = mod.get_global_var('func_14896')
func_14897_call = mutated_mod.get_global_var('func_14897')
call_16950 = relay.TupleGetItem(func_14896_call(), 0)
call_16951 = relay.TupleGetItem(func_14897_call(), 0)
func_10891_call = mod.get_global_var('func_10891')
func_10893_call = mutated_mod.get_global_var('func_10893')
call_16965 = relay.TupleGetItem(func_10891_call(), 0)
call_16966 = relay.TupleGetItem(func_10893_call(), 0)
func_16742_call = mod.get_global_var('func_16742')
func_16744_call = mutated_mod.get_global_var('func_16744')
call_16970 = func_16742_call()
call_16971 = func_16742_call()
output = relay.Tuple([call_16946,call_16948,call_16950,call_16965,call_16970,])
output2 = relay.Tuple([call_16947,call_16949,call_16951,call_16966,call_16971,])
func_16975 = relay.Function([], output)
mod['func_16975'] = func_16975
mod = relay.transform.InferType()(mod)
mutated_mod['func_16975'] = func_16975
mutated_mod = relay.transform.InferType()(mutated_mod)
func_16975_call = mutated_mod.get_global_var('func_16975')
call_16976 = func_16975_call()
output = call_16976
func_16977 = relay.Function([], output)
mutated_mod['func_16977'] = func_16977
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10074_call = mod.get_global_var('func_10074')
func_10075_call = mutated_mod.get_global_var('func_10075')
call_17015 = func_10074_call()
call_17016 = func_10074_call()
output = relay.Tuple([call_17015,])
output2 = relay.Tuple([call_17016,])
func_17019 = relay.Function([], output)
mod['func_17019'] = func_17019
mod = relay.transform.InferType()(mod)
mutated_mod['func_17019'] = func_17019
mutated_mod = relay.transform.InferType()(mutated_mod)
func_17019_call = mutated_mod.get_global_var('func_17019')
call_17020 = func_17019_call()
output = call_17020
func_17021 = relay.Function([], output)
mutated_mod['func_17021'] = func_17021
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6714_call = mod.get_global_var('func_6714')
func_6715_call = mutated_mod.get_global_var('func_6715')
call_17048 = relay.TupleGetItem(func_6714_call(), 4)
call_17049 = relay.TupleGetItem(func_6715_call(), 4)
output = call_17048
output2 = call_17049
func_17050 = relay.Function([], output)
mod['func_17050'] = func_17050
mod = relay.transform.InferType()(mod)
output = func_17050()
func_17051 = relay.Function([], output)
mutated_mod['func_17051'] = func_17051
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7152_call = mod.get_global_var('func_7152')
func_7153_call = mutated_mod.get_global_var('func_7153')
call_17058 = relay.TupleGetItem(func_7152_call(), 1)
call_17059 = relay.TupleGetItem(func_7153_call(), 1)
output = call_17058
output2 = call_17059
func_17066 = relay.Function([], output)
mod['func_17066'] = func_17066
mod = relay.transform.InferType()(mod)
mutated_mod['func_17066'] = func_17066
mutated_mod = relay.transform.InferType()(mutated_mod)
func_17066_call = mutated_mod.get_global_var('func_17066')
call_17067 = func_17066_call()
output = call_17067
func_17068 = relay.Function([], output)
mutated_mod['func_17068'] = func_17068
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12140_call = mod.get_global_var('func_12140')
func_12141_call = mutated_mod.get_global_var('func_12141')
call_17073 = func_12140_call()
call_17074 = func_12140_call()
func_7271_call = mod.get_global_var('func_7271')
func_7276_call = mutated_mod.get_global_var('func_7276')
const_17077 = relay.const([-0.482125,1.262731,6.712394,-9.768480,-7.344648,-2.172985,-9.150581,-4.759506,-3.225378,-6.485212,-3.152758,-6.787702,9.609519,8.003749,-3.162454,-6.588579,1.593696,-6.027868,-7.711905,-8.108700,-9.647637,2.581884,-7.118796,9.618846], dtype = "float32")#candidate|17077|(24,)|const|float32
var_17078 = relay.var("var_17078", dtype = "bool", shape = (2112, 1))#candidate|17078|(2112, 1)|var|bool
const_17079 = relay.const([2,-9,-3,-4,3,-10,6,7,-8,9,-6,-10,-7,2,-9,6,-9,8,5,3,-6,6,-8,5,4,3,-5,6,1,1,-5,3,1,7,7,-3,4,7,4,7,6,-7,2,-6,3,7,4,1,-3,-1,-8,-3,4,4,4,10,-1,2,2,8,-5,3,-5,5,5,-8,10,7,1,-6,3,4,2,-7,4,-10,-10,-8,-1,3,-9,-9,2,5,-7,8,-6,4,-10,4,8,-3,-9,5,6,-4,-9,-5,10,4,-10,7,-7,-6,4,1,4,-2,6,2,5,8,10,-5,-1,8,-5,1,-6,9,9,-3,7,-7,-3,7,-5,-2], dtype = "int8")#candidate|17079|(128,)|const|int8
call_17076 = relay.TupleGetItem(func_7271_call(relay.reshape(const_17077.astype('float32'), [2, 3, 4]), relay.reshape(var_17078.astype('bool'), [2112,]), relay.reshape(const_17079.astype('int8'), [128,]), ), 5)
call_17080 = relay.TupleGetItem(func_7276_call(relay.reshape(const_17077.astype('float32'), [2, 3, 4]), relay.reshape(var_17078.astype('bool'), [2112,]), relay.reshape(const_17079.astype('int8'), [128,]), ), 5)
var_17107 = relay.var("var_17107", dtype = "bool", shape = (14, 11, 11))#candidate|17107|(14, 11, 11)|var|bool
bop_17108 = relay.greater(call_17076.astype('bool'), relay.reshape(var_17107.astype('bool'), relay.shape_of(call_17076))) # shape=(14, 11, 11)
bop_17111 = relay.greater(call_17080.astype('bool'), relay.reshape(var_17107.astype('bool'), relay.shape_of(call_17080))) # shape=(14, 11, 11)
output = relay.Tuple([call_17073,const_17077,var_17078,const_17079,bop_17108,])
output2 = relay.Tuple([call_17074,const_17077,var_17078,const_17079,bop_17111,])
func_17112 = relay.Function([var_17078,var_17107,], output)
mod['func_17112'] = func_17112
mod = relay.transform.InferType()(mod)
var_17113 = relay.var("var_17113", dtype = "bool", shape = (2112, 1))#candidate|17113|(2112, 1)|var|bool
var_17114 = relay.var("var_17114", dtype = "bool", shape = (14, 11, 11))#candidate|17114|(14, 11, 11)|var|bool
output = func_17112(var_17113,var_17114,)
func_17115 = relay.Function([var_17113,var_17114,], output)
mutated_mod['func_17115'] = func_17115
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12266_call = mod.get_global_var('func_12266')
func_12267_call = mutated_mod.get_global_var('func_12267')
call_17147 = func_12266_call()
call_17148 = func_12266_call()
func_10689_call = mod.get_global_var('func_10689')
func_10692_call = mutated_mod.get_global_var('func_10692')
const_17174 = relay.const([-1.457703,-9.366949,-5.972875,-8.625058,1.991977,9.928877,-1.674962,8.999604,-0.899721,-6.249107,-5.894134,-0.237509,8.025872,4.125285,-4.055113,0.837746,-2.216598,5.747602,-3.480708,8.963534,8.398318,5.137762,-1.094147,-3.389609,-4.831794,-2.593934,-7.177744,-3.199297,4.248872,-5.254184,4.019626,-5.291679,7.167228,4.327705,-9.996027,1.574416,2.296391,3.246067,-8.274957,7.412046,-3.904734,3.203528,-1.634834,8.689218,8.929495,5.806648,8.000266,-1.714289,4.983137,-5.034808,-3.989216,8.662950,1.553023,-3.449596,-9.494531,-5.764559,3.556703,-2.869858,9.912926,7.202613,5.064211,-4.876757,-1.398262,-7.459264,-3.733458,3.667475,-3.708989,-5.462149,-2.045624,8.219487,-1.561993,3.720772,0.434557,4.276743,2.449613,6.534199,9.653380,-8.329534,9.997853,1.025772,6.299640,-9.690326,-3.716614,5.137357,4.362308,1.145744,-7.088816,3.139339,-8.876598,5.360423,4.603469,1.857794,-0.926188,6.078146,-7.861597,5.424643,8.674604,6.314111,-4.197873,-5.202519,-3.842495,-4.473684,2.211061,-1.705082,-8.773371,3.414721,8.263237,2.225485,-4.500513,7.463294,8.091166,0.949678], dtype = "float32")#candidate|17174|(112,)|const|float32
call_17173 = func_10689_call(relay.reshape(const_17174.astype('float32'), [14, 1, 8]))
call_17175 = func_10689_call(relay.reshape(const_17174.astype('float32'), [14, 1, 8]))
output = relay.Tuple([call_17147,call_17173,const_17174,])
output2 = relay.Tuple([call_17148,call_17175,const_17174,])
func_17182 = relay.Function([], output)
mod['func_17182'] = func_17182
mod = relay.transform.InferType()(mod)
output = func_17182()
func_17183 = relay.Function([], output)
mutated_mod['func_17183'] = func_17183
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10891_call = mod.get_global_var('func_10891')
func_10893_call = mutated_mod.get_global_var('func_10893')
call_17201 = relay.TupleGetItem(func_10891_call(), 0)
call_17202 = relay.TupleGetItem(func_10893_call(), 0)
output = relay.Tuple([call_17201,])
output2 = relay.Tuple([call_17202,])
func_17204 = relay.Function([], output)
mod['func_17204'] = func_17204
mod = relay.transform.InferType()(mod)
mutated_mod['func_17204'] = func_17204
mutated_mod = relay.transform.InferType()(mutated_mod)
func_17204_call = mutated_mod.get_global_var('func_17204')
call_17205 = func_17204_call()
output = call_17205
func_17206 = relay.Function([], output)
mutated_mod['func_17206'] = func_17206
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8484_call = mod.get_global_var('func_8484')
func_8485_call = mutated_mod.get_global_var('func_8485')
call_17242 = relay.TupleGetItem(func_8484_call(), 1)
call_17243 = relay.TupleGetItem(func_8485_call(), 1)
output = relay.Tuple([call_17242,])
output2 = relay.Tuple([call_17243,])
func_17250 = relay.Function([], output)
mod['func_17250'] = func_17250
mod = relay.transform.InferType()(mod)
output = func_17250()
func_17251 = relay.Function([], output)
mutated_mod['func_17251'] = func_17251
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13398_call = mod.get_global_var('func_13398')
func_13400_call = mutated_mod.get_global_var('func_13400')
call_17252 = relay.TupleGetItem(func_13398_call(), 0)
call_17253 = relay.TupleGetItem(func_13400_call(), 0)
func_14453_call = mod.get_global_var('func_14453')
func_14454_call = mutated_mod.get_global_var('func_14454')
call_17257 = relay.TupleGetItem(func_14453_call(), 0)
call_17258 = relay.TupleGetItem(func_14454_call(), 0)
output = relay.Tuple([call_17252,call_17257,])
output2 = relay.Tuple([call_17253,call_17258,])
func_17263 = relay.Function([], output)
mod['func_17263'] = func_17263
mod = relay.transform.InferType()(mod)
output = func_17263()
func_17264 = relay.Function([], output)
mutated_mod['func_17264'] = func_17264
mutated_mod = relay.transform.InferType()(mutated_mod)
func_16366_call = mod.get_global_var('func_16366')
func_16367_call = mutated_mod.get_global_var('func_16367')
call_17287 = relay.TupleGetItem(func_16366_call(), 0)
call_17288 = relay.TupleGetItem(func_16367_call(), 0)
output = call_17287
output2 = call_17288
func_17307 = relay.Function([], output)
mod['func_17307'] = func_17307
mod = relay.transform.InferType()(mod)
output = func_17307()
func_17308 = relay.Function([], output)
mutated_mod['func_17308'] = func_17308
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14041_call = mod.get_global_var('func_14041')
func_14042_call = mutated_mod.get_global_var('func_14042')
call_17311 = func_14041_call()
call_17312 = func_14041_call()
func_16833_call = mod.get_global_var('func_16833')
func_16835_call = mutated_mod.get_global_var('func_16835')
call_17320 = relay.TupleGetItem(func_16833_call(), 0)
call_17321 = relay.TupleGetItem(func_16835_call(), 0)
output = relay.Tuple([call_17311,call_17320,])
output2 = relay.Tuple([call_17312,call_17321,])
func_17333 = relay.Function([], output)
mod['func_17333'] = func_17333
mod = relay.transform.InferType()(mod)
mutated_mod['func_17333'] = func_17333
mutated_mod = relay.transform.InferType()(mutated_mod)
func_17333_call = mutated_mod.get_global_var('func_17333')
call_17334 = func_17333_call()
output = call_17334
func_17335 = relay.Function([], output)
mutated_mod['func_17335'] = func_17335
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14627_call = mod.get_global_var('func_14627')
func_14628_call = mutated_mod.get_global_var('func_14628')
call_17343 = func_14627_call()
call_17344 = func_14627_call()
output = call_17343
output2 = call_17344
func_17347 = relay.Function([], output)
mod['func_17347'] = func_17347
mod = relay.transform.InferType()(mod)
output = func_17347()
func_17348 = relay.Function([], output)
mutated_mod['func_17348'] = func_17348
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11244_call = mod.get_global_var('func_11244')
func_11245_call = mutated_mod.get_global_var('func_11245')
call_17353 = relay.TupleGetItem(func_11244_call(), 0)
call_17354 = relay.TupleGetItem(func_11245_call(), 0)
func_12797_call = mod.get_global_var('func_12797')
func_12799_call = mutated_mod.get_global_var('func_12799')
call_17356 = relay.TupleGetItem(func_12797_call(), 0)
call_17357 = relay.TupleGetItem(func_12799_call(), 0)
output = relay.Tuple([call_17353,call_17356,])
output2 = relay.Tuple([call_17354,call_17357,])
func_17358 = relay.Function([], output)
mod['func_17358'] = func_17358
mod = relay.transform.InferType()(mod)
mutated_mod['func_17358'] = func_17358
mutated_mod = relay.transform.InferType()(mutated_mod)
func_17358_call = mutated_mod.get_global_var('func_17358')
call_17359 = func_17358_call()
output = call_17359
func_17360 = relay.Function([], output)
mutated_mod['func_17360'] = func_17360
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12054_call = mod.get_global_var('func_12054')
func_12056_call = mutated_mod.get_global_var('func_12056')
call_17423 = relay.TupleGetItem(func_12054_call(), 0)
call_17424 = relay.TupleGetItem(func_12056_call(), 0)
func_12073_call = mod.get_global_var('func_12073')
func_12074_call = mutated_mod.get_global_var('func_12074')
call_17428 = relay.TupleGetItem(func_12073_call(), 0)
call_17429 = relay.TupleGetItem(func_12074_call(), 0)
func_4158_call = mod.get_global_var('func_4158')
func_4162_call = mutated_mod.get_global_var('func_4162')
var_17444 = relay.var("var_17444", dtype = "float32", shape = ())#candidate|17444|()|var|float32
call_17443 = relay.TupleGetItem(func_4158_call(relay.reshape(var_17444.astype('float32'), []), relay.reshape(call_17423.astype('float32'), [15, 8, 16]), ), 0)
call_17445 = relay.TupleGetItem(func_4162_call(relay.reshape(var_17444.astype('float32'), []), relay.reshape(call_17423.astype('float32'), [15, 8, 16]), ), 0)
output = relay.Tuple([call_17423,call_17428,call_17443,var_17444,])
output2 = relay.Tuple([call_17424,call_17429,call_17445,var_17444,])
func_17454 = relay.Function([var_17444,], output)
mod['func_17454'] = func_17454
mod = relay.transform.InferType()(mod)
var_17455 = relay.var("var_17455", dtype = "float32", shape = ())#candidate|17455|()|var|float32
output = func_17454(var_17455)
func_17456 = relay.Function([var_17455], output)
mutated_mod['func_17456'] = func_17456
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7194_call = mod.get_global_var('func_7194')
func_7195_call = mutated_mod.get_global_var('func_7195')
call_17458 = relay.TupleGetItem(func_7194_call(), 0)
call_17459 = relay.TupleGetItem(func_7195_call(), 0)
func_1860_call = mod.get_global_var('func_1860')
func_1862_call = mutated_mod.get_global_var('func_1862')
var_17464 = relay.var("var_17464", dtype = "float32", shape = (4, 4))#candidate|17464|(4, 4)|var|float32
call_17463 = func_1860_call(relay.reshape(var_17464.astype('float32'), [2, 1, 8]))
call_17465 = func_1860_call(relay.reshape(var_17464.astype('float32'), [2, 1, 8]))
func_12251_call = mod.get_global_var('func_12251')
func_12252_call = mutated_mod.get_global_var('func_12252')
call_17479 = relay.TupleGetItem(func_12251_call(), 1)
call_17480 = relay.TupleGetItem(func_12252_call(), 1)
func_4330_call = mod.get_global_var('func_4330')
func_4335_call = mutated_mod.get_global_var('func_4335')
var_17485 = relay.var("var_17485", dtype = "uint8", shape = (280,))#candidate|17485|(280,)|var|uint8
const_17486 = relay.const(-5, dtype = "int64")#candidate|17486|()|const|int64
call_17484 = relay.TupleGetItem(func_4330_call(relay.reshape(var_17485.astype('uint8'), [4, 14, 5]), relay.reshape(var_17485.astype('uint8'), [4, 14, 5]), relay.reshape(const_17486.astype('int64'), []), ), 0)
call_17487 = relay.TupleGetItem(func_4335_call(relay.reshape(var_17485.astype('uint8'), [4, 14, 5]), relay.reshape(var_17485.astype('uint8'), [4, 14, 5]), relay.reshape(const_17486.astype('int64'), []), ), 0)
bop_17489 = relay.less(call_17484.astype('bool'), relay.reshape(var_17485.astype('bool'), relay.shape_of(call_17484))) # shape=(4, 14, 5)
bop_17492 = relay.less(call_17487.astype('bool'), relay.reshape(var_17485.astype('bool'), relay.shape_of(call_17487))) # shape=(4, 14, 5)
output = relay.Tuple([call_17458,call_17463,var_17464,call_17479,const_17486,bop_17489,])
output2 = relay.Tuple([call_17459,call_17465,var_17464,call_17480,const_17486,bop_17492,])
func_17513 = relay.Function([var_17464,var_17485,], output)
mod['func_17513'] = func_17513
mod = relay.transform.InferType()(mod)
mutated_mod['func_17513'] = func_17513
mutated_mod = relay.transform.InferType()(mutated_mod)
func_17513_call = mutated_mod.get_global_var('func_17513')
var_17515 = relay.var("var_17515", dtype = "float32", shape = (4, 4))#candidate|17515|(4, 4)|var|float32
var_17516 = relay.var("var_17516", dtype = "uint8", shape = (280,))#candidate|17516|(280,)|var|uint8
call_17514 = func_17513_call(var_17515,var_17516,)
output = call_17514
func_17517 = relay.Function([var_17515,var_17516,], output)
mutated_mod['func_17517'] = func_17517
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12140_call = mod.get_global_var('func_12140')
func_12141_call = mutated_mod.get_global_var('func_12141')
call_17553 = func_12140_call()
call_17554 = func_12140_call()
func_3645_call = mod.get_global_var('func_3645')
func_3649_call = mutated_mod.get_global_var('func_3649')
const_17579 = relay.const([-1.207139,-0.017507,1.980891,9.568731,4.341247,0.717413,6.148505,5.650094,-2.305821,1.626404,7.862507,-9.358069,8.315817,-3.795079,5.789882,-2.391709,7.921468,-9.441660,-2.019015,1.419235,8.165840,9.905190,0.996661,-1.564596,-7.544440,5.446781,-4.128332,-2.261696,7.050867,-3.843917,6.873854,-1.541313,4.810681,5.187944,6.842075,-1.788363,9.868444,6.025725,-8.831944,-7.541958,8.820698,-2.185667,5.008306,-4.946632,4.483893,-4.657620,3.632245,-7.355052,2.251187,-9.423313,-7.930928,-4.852158,0.019857,-4.330829,0.899698,-5.011314,-1.115365,-2.859204,1.496863,-6.816950,7.730487,9.070237,-4.736122,3.712940,3.839847,-2.046498,-4.907369,6.196068,-4.646965,0.248256,-8.901217,4.341726,-7.199232,8.404353,-3.503744,1.996572,-9.006889,-7.981825,-9.754582,-4.291081,-1.070604,6.093771,5.909536,-6.704642,7.412832,0.019167,4.908812,-5.489658,-7.675267,5.508033,-0.076870,-0.583636,4.011832,8.449494,6.755889,0.388136,-2.370687,-2.261264,4.923886,5.731584,4.648430,-4.297684,8.451088,-1.304116,-5.949250,-0.488222,-1.485260,3.934115,-5.405729,2.839392,1.198344,3.974214,-4.701587,7.439095,-8.214973,-0.136094,-7.631899,-9.368016,0.121110,6.244423,-8.421119,-6.350097,6.512691,-0.396182,-2.143463,1.763327,-0.796275,3.589098,-1.502056,-5.091396,-4.071642,-5.596381,1.696683,-6.650785,-0.053947,1.838874,-5.995652,8.503304,3.191140,5.407368,-3.853860,4.693930,8.741044,5.228159,-2.307598,-6.455826,-2.284576,5.733442,9.780209,-3.800482,5.595199,-1.652711,-5.374169,9.448951,0.222049,7.035948,3.995326,-3.461984,-1.145856,5.005852,2.610208,0.686788,-8.962496,4.281403,-8.696094,5.959824,2.583663,5.843705,-3.949418,-0.550614,2.179538,5.571271,-8.465698,2.879536,7.898404,8.566062,-7.931813,-6.185911,7.223409,-8.718413,7.531095,-4.905022,0.057103,-7.449624,-5.913857,0.221926,0.372253,4.626410,-4.159827,-8.488308,8.105322,-4.907271,-7.820771,-4.074351,1.738178,4.167284,6.431050,9.694564,-3.212768,-9.116851,-1.426489,-0.752783,-1.950390,-7.949419,5.042968,-6.599820,-5.578167,-0.378510,0.803944,2.419721,-2.938879,5.846287,-8.747570,-2.244798,8.333271,0.058783,1.846335,3.227977,9.441606,-3.238105,-3.637981,6.222748,-3.135322,4.847486,5.128359,-3.493869,8.298175,9.999914,-0.118393,-9.440918,-6.095017,-6.025238,-2.112022,8.746121,7.984412,-6.307981,-4.309499,-6.274411,9.143267,-1.848583,-8.801695,-8.037214,-0.079204,5.812220,-8.120259,-8.104136,-4.547548,-2.121246,-4.927550,-1.431916,1.744983,4.154861,9.175212,-9.482242,2.138646,9.435540,1.022270,-2.483900,4.780150,3.256664,7.797983,-4.130611,-7.368363,-6.602512,-3.317802,-6.490897,3.297926,7.165632,0.320631,-8.967350,-9.740947,1.163300,7.390066,3.692481,6.144122,-7.137953,6.562816,-6.432456,4.862664,-0.956313,-6.131497,-7.214755,6.086009,-9.895527,2.664980,6.232623,-5.414966,-7.361841,-5.739292,-5.191486,-2.012405,9.655174,2.568163,6.039375,-3.780350,-5.668246,-3.217879,7.870709,-0.376632,-3.059861,-0.001070,6.876796,-4.160301,-6.862016,1.570282,3.402291,-2.516533,8.000526,-2.681204,-7.590645,0.129551,0.293231,6.426856,3.143504,-2.902271,-3.300769,5.253031,9.250874,0.067305,5.894126,-0.659395,-0.480935,6.506734,-7.475071,-1.231439,-3.076400,2.398755,5.790443,-7.004472,-9.005591,-3.964014,1.658346,-7.800961,-7.543509,0.588682,1.665362,-3.695768,-9.524294,9.347122,8.547485,9.762504,0.672147,-6.308903,-1.355624,7.208419,1.168431,7.620322,-1.690089,-4.975407,1.405678,-9.228163,3.210112,-9.301186,-8.950357,7.228492,5.438795,0.013023,6.170330,9.148010,7.662477,8.313387,-6.604355,4.521407,-9.907870,5.399714,3.382234,-1.975466,-9.997659,-0.471961,6.206547,8.533437,9.709095,8.874345,-1.362455,-5.039947,-1.723356,-8.761113,-9.307566,4.641870,6.526957,-7.658121,-2.061325,-9.016180,0.877128,8.896434,-3.367260,6.234606,3.418875,-0.636579,8.119958,8.996042,-9.674412,-1.737157,-4.384681,-1.856815,4.740158], dtype = "float32")#candidate|17579|(396,)|const|float32
call_17578 = relay.TupleGetItem(func_3645_call(relay.reshape(const_17579.astype('float32'), [9, 11, 4]), relay.reshape(const_17579.astype('float32'), [9, 11, 4]), ), 0)
call_17580 = relay.TupleGetItem(func_3649_call(relay.reshape(const_17579.astype('float32'), [9, 11, 4]), relay.reshape(const_17579.astype('float32'), [9, 11, 4]), ), 0)
output = relay.Tuple([call_17553,call_17578,const_17579,])
output2 = relay.Tuple([call_17554,call_17580,const_17579,])
func_17591 = relay.Function([], output)
mod['func_17591'] = func_17591
mod = relay.transform.InferType()(mod)
output = func_17591()
func_17592 = relay.Function([], output)
mutated_mod['func_17592'] = func_17592
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13786_call = mod.get_global_var('func_13786')
func_13788_call = mutated_mod.get_global_var('func_13788')
call_17620 = relay.TupleGetItem(func_13786_call(), 0)
call_17621 = relay.TupleGetItem(func_13788_call(), 0)
func_4584_call = mod.get_global_var('func_4584')
func_4586_call = mutated_mod.get_global_var('func_4586')
const_17627 = relay.const([6,-5,5,-3,-9,-2,-1,1,5,-4,-2,-2,3,8,6,2,-5,10,-10,-8,-6,-5,-1,5,-4,6,6,-2,7,-4,1,-6,4,6,-3,-4,-7,3,9,-5,7,-6,1,-9,-10,-1,8,7,5,7,-10,-4,1,-4,-5,1,2,4,-7,-10,-5,-10,-8,6,-10,3,3,-4,7,5,1,-6,5,-6,1,3,-7,-1,-8,2,8,-8,3,5,2,-1,-6,-5,7,7,-7,5,1,-1,-1,-9,-8,-9,-8,10,4,2,10,-3,7,4,10,8,-3,2,-3,4,7,2,-8,7,6,4,-7,3,-8,-7,-8,2,7,-7,7,2,5,-1,-6,6,8,-8,-10,-8,-9,7,-2,-9,4,-1,-9,5,7,-6,-6,5,-6,-8,3,5,1,-9,10,5,-6,-5,9,7,-7,9,9,7,8,-2,-1,4,8,8,3,-3,8,-2,-7,-3,5,-10,-9,-2,4,1,-8,7,10,5,9,-2,4,-3,6,9,-1,8,8,8,-1,-7,-4,4,-10,-7,4,7,5,3,8,-3,-3,-9,-8,-2,6,7,-4,5,-9,-4,-4,-5,10,10,-9,7,1,-2,-4,7,4,9,-4,-1,-9,-8,-3,-1,10,-1,2,3,-5,-4,1,-9,5,10,-4,-4,3,7,-2,9,10,3,9,7,10,2,-3,6,-9,-9,9,-8,-5,10,-5,-1,10,-9,7,2,-9,3,-5,2,-7,-1,-2,1,-5,-5,4,5,10,-3,-2,-6,-9,-3,-10,-10,-5,5,1,-7,9,-7,7,-6,-6,6,6,-8,-3,-1,7,-9,-4,2,-10,-2,-10,-3,10,6,10,3,3,1,6,6,5,6,10,5,-6,1,5,-2,5,1,9,-1,9,6,-6,-9,-8,10,-2,9,3,3,-6,-5,5,8,3,-6,-3,-6,-7,-10,9,-4,-7,2,-5,-10,-1,3,2,-2,3,7,-2,-5,-7,5,-4,-10,4,-1,-6,1,7,-5,-7,3,-7,-6,-3,-8,-5,-10,-4,10,-4,-8,-1,10,-4,6,-4,-1,-9,-9,-9,7,-2,5,-7,5,-5,2,3,-3,-8,6,9,-4,6,3,10,3,4,7,2,-5,-6,-2,-10,4,3,-2,9,1,9,5,3,-1,-4,10,-2,-3,-3,-7,-10,-5,-3,5,2,1,1,3,4,3,-4,-5,10,-7,3,-8,-7,7,-9,-3,-10,6,-10,7,5,-1,-3,-7,4,-5,-10,-1,-7,6,-1,-1,-3,4,6,-7,-9,9,-7,-4,2,2,-4,6,1,9,1,5,-7,-7,-10,1,5,3,6,-4,7,-10,-9,6,8,-2,-5,5,5,2,-8,-7,5,-6,-5,9,8,-7,-6,9,-8,5,9,5,1,1,2,-2,-6,-8,-1,-5,8,8,-4,-10,-7,6,-4,-1,-10,-4,-8,1,-7,5,6,8,3,-8,2,-9,-2,6,8,2,-8,2,7,2,-10,5,-10,-2,9,-9,-9,-2,3,-8,5,-9,-10,-1,-4,-2,-1,-2,10,-3,5,1,-10,4,1,6,-4,9,8,1,-2,-6,-10,3,4,8,-7,5,4,-1,-1,-10,-2,1,8,9,6,4,-6,7,-4,1,-6,7,6,-2,2,6,-1,-3,-10,9,-8,4,-2,5,-6,5,5,-1,-9,9,-6,-7,-1,-6,-3,-9,-9,-6,-3,-7,9,2,-6,-6,7,8,10,2,8,-2,-6,3,-3,-8,-1,-5,7,-6,-2,9,8,3,-5,-9,5,-5,2,6,-8,-10,-1,3,4,-2,2,6,-9,9,-7,8,-10,3,-2,7,-5,-10,6,4,-3,-6,8,-8,-4,2,5,-3,4,1,7,7,-5,-8,-2,-10,-1,-1,-2,-5,-8,-10,-6,10,-1,5,8,-1,10,-5,4,-9,-6,3,1,-4,2,2,7,7,4,5,5,-7,7,-9,-9,-5,9,1,-5,-7,-3,6,-2,9,4,-5,1,-6,-6,-9,-3,8,-4,2,-7,8,-9,-9,7,4,-3,-10,3,-1,1,1,-6,-6,9,-4,8,-6,8,7,-5,-5,-1,1,1,2,5,3,-6,4,8,4,1,4,-7,-3,1,-1,4,-6,-7,4,6,3,-10,-7,-6,4,-1,7,9,-2,-9,-3,-6,-6,1,-5,1,9,7,-10,9,10,-4,9,6,-4,-6,-8,9,-7,5,-9,2,-8,6,-1,3,4,-10,-1,-4,-1,-3,5,4,4,6,8,1,-6,-5,1,-2,-5,8,9,10,-4,-1,-5,-3,-4,2,6,9,2,10,-2,-8,5,1,-10,7,4,-7,3,-9,8,9,7,-5,-2,2,-9,10,-10,1,-4,6,-6,-6,-2,6,-6,-3,4,2,6,1,8,-1,-4,8,1,-5,-8,4,6,9,6,5,-1,6,-2,-5,10,-7,-10,-4,1,-8,10,9,3,-8,-4,-8,9,-4,-1,-9,7,-5,3,8,9,-2,-9,5,-3,-2,5,1,4,-4,6,-5,-3,8,2,-9,3,9,4,-5,-8,-3,-6,10,-2,6,10,-9,-6,9,4,-8,-9,10,-5,-2,3,-8,2,1,-4,1,10,7,10,3,-3,-2,10,-6,8,-7,-3,-2,-5,-10,3,3,3,1,-5,9,5,-8,5,9,-4,-6,5,2,4,9,3,-1,1,2,-6,3,4,10,7,-5,-8,-8,1,-3,1,-10,-1,3,-5,-7,7,6,-1,-9,6,9,-4,-8,-8,8,10,-6,-3,6,-5,8,-3,1,1,-4,5,2,10,-6,9,-10,4,-4,6,-4,3,4,8,-1,7,-5,-7,-4,7,9,-4,8,4,6,2,-2,-3,2,-10,-10,6,-1,-4,-4,-7,-8,-10,2,8,4,7,6,10,1,1,-1,7,-10,9,2,6,8,6,-10,7,6,-9,5,-2,-3,6,-10,8,-3,-3,-4,7,-5,-3,9,10,-7,2,2,6,7,-9,-6,8,-3,-6,-1,2,-8,-2,6,-6,3,-5,-2,-10,5,-7,-8,2,-7,10,-3,-4,9,10,10,-10,-4,9,8,-8,-3,-5,1,2,-6,-3,-7,10,5,-3,5,-1,10,4,1,2,8,-5,-5,-6,3,9,-8,-8,-6,1,6,-10,-2,-4,-8,-7,6,-5,10,1,3,-5,-7,-6,-4,4,-9,-6,-9,-3,9,-3,-5,5,2,-1,5,5,-7,-7,-10,-10,-7,9,9,5,6,-2,-10,6,-4,-6,1,3,6,10,4,6,-8,-1,9,-4,6,3,4,10,6,-9,1,8,3,-5,10,10,6,-7,-9,-9,-9,-3,-4,3,10,1,-3,7,7,-4,-3,6,-8,-4,4,-2,-6,7,7,-1,9,6,-1,9,7,4,8,9,3,-10,9,-3,6,-6,-8,-10,9,1,1,7,-3,-7,-2,-6,-2,-5,10,-7,-6,1,-9,4,-7,9,5,5,8,-1,-10,5,-5,4,-8,4,-3,-9,8,-2,8,-2,-9,3,10,-8,-10,6,-5,3,-1,-7,-3,-9,-8,5,-4,1,5,1,-9,-8,3,-4,-4,10,-1,-10,-1,-5,-1,9,7,-1,5,8,2,-2,-9,1,-1,-7,-8,-9,9,2,-6,7,2,-8,9,-10,3,6,-8,3,8,2,-10,-8,6,-9,10,6,4,-10,1,6,2,5,-8,9,-10,-3,3,9,1,2,4,3,3,2,3,-7,7,7,2,-1,-9,3,6,-1,-2,8,2,-5,-7,10,-3,7,1,-7,-1,5,5,-2,-2,9,8,1,1,7,-2,-7,6,-9,9,-9,-6,-10,4,3,-7,-1,2,-6,-7,2,-2,6,-7,6,-1,-6,-1,8,-8,-1,-7,-9,6,3,-8,5], dtype = "int32")#candidate|17627|(1456,)|const|int32
call_17626 = func_4584_call(relay.reshape(const_17627.astype('int32'), [14, 13, 8]))
call_17628 = func_4584_call(relay.reshape(const_17627.astype('int32'), [14, 13, 8]))
func_12683_call = mod.get_global_var('func_12683')
func_12684_call = mutated_mod.get_global_var('func_12684')
call_17631 = func_12683_call()
call_17632 = func_12683_call()
func_9825_call = mod.get_global_var('func_9825')
func_9827_call = mutated_mod.get_global_var('func_9827')
var_17646 = relay.var("var_17646", dtype = "bool", shape = (2, 1056))#candidate|17646|(2, 1056)|var|bool
call_17645 = relay.TupleGetItem(func_9825_call(relay.reshape(var_17646.astype('bool'), [2112,])), 2)
call_17647 = relay.TupleGetItem(func_9827_call(relay.reshape(var_17646.astype('bool'), [2112,])), 2)
output = relay.Tuple([call_17620,call_17626,const_17627,call_17631,call_17645,var_17646,])
output2 = relay.Tuple([call_17621,call_17628,const_17627,call_17632,call_17647,var_17646,])
func_17650 = relay.Function([var_17646,], output)
mod['func_17650'] = func_17650
mod = relay.transform.InferType()(mod)
var_17651 = relay.var("var_17651", dtype = "bool", shape = (2, 1056))#candidate|17651|(2, 1056)|var|bool
output = func_17650(var_17651)
func_17652 = relay.Function([var_17651], output)
mutated_mod['func_17652'] = func_17652
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10184_call = mod.get_global_var('func_10184')
func_10185_call = mutated_mod.get_global_var('func_10185')
call_17686 = relay.TupleGetItem(func_10184_call(), 0)
call_17687 = relay.TupleGetItem(func_10185_call(), 0)
uop_17690 = relay.asin(call_17686.astype('float64')) # shape=(9, 11, 4)
uop_17692 = relay.asin(call_17687.astype('float64')) # shape=(9, 11, 4)
output = relay.Tuple([uop_17690,])
output2 = relay.Tuple([uop_17692,])
func_17699 = relay.Function([], output)
mod['func_17699'] = func_17699
mod = relay.transform.InferType()(mod)
mutated_mod['func_17699'] = func_17699
mutated_mod = relay.transform.InferType()(mutated_mod)
func_17699_call = mutated_mod.get_global_var('func_17699')
call_17700 = func_17699_call()
output = call_17700
func_17701 = relay.Function([], output)
mutated_mod['func_17701'] = func_17701
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11288_call = mod.get_global_var('func_11288')
func_11290_call = mutated_mod.get_global_var('func_11290')
call_17729 = relay.TupleGetItem(func_11288_call(), 1)
call_17730 = relay.TupleGetItem(func_11290_call(), 1)
func_4330_call = mod.get_global_var('func_4330')
func_4335_call = mutated_mod.get_global_var('func_4335')
var_17739 = relay.var("var_17739", dtype = "uint8", shape = (280,))#candidate|17739|(280,)|var|uint8
var_17740 = relay.var("var_17740", dtype = "int64", shape = ())#candidate|17740|()|var|int64
call_17738 = relay.TupleGetItem(func_4330_call(relay.reshape(var_17739.astype('uint8'), [4, 14, 5]), relay.reshape(var_17739.astype('uint8'), [4, 14, 5]), relay.reshape(var_17740.astype('int64'), []), ), 3)
call_17741 = relay.TupleGetItem(func_4335_call(relay.reshape(var_17739.astype('uint8'), [4, 14, 5]), relay.reshape(var_17739.astype('uint8'), [4, 14, 5]), relay.reshape(var_17740.astype('int64'), []), ), 3)
uop_17744 = relay.asinh(call_17729.astype('float64')) # shape=(10, 1, 11)
uop_17746 = relay.asinh(call_17730.astype('float64')) # shape=(10, 1, 11)
func_14546_call = mod.get_global_var('func_14546')
func_14547_call = mutated_mod.get_global_var('func_14547')
call_17747 = relay.TupleGetItem(func_14546_call(), 0)
call_17748 = relay.TupleGetItem(func_14547_call(), 0)
func_10891_call = mod.get_global_var('func_10891')
func_10893_call = mutated_mod.get_global_var('func_10893')
call_17752 = relay.TupleGetItem(func_10891_call(), 0)
call_17753 = relay.TupleGetItem(func_10893_call(), 0)
output = relay.Tuple([call_17738,var_17739,var_17740,uop_17744,call_17747,call_17752,])
output2 = relay.Tuple([call_17741,var_17739,var_17740,uop_17746,call_17748,call_17753,])
func_17754 = relay.Function([var_17739,var_17740,], output)
mod['func_17754'] = func_17754
mod = relay.transform.InferType()(mod)
mutated_mod['func_17754'] = func_17754
mutated_mod = relay.transform.InferType()(mutated_mod)
func_17754_call = mutated_mod.get_global_var('func_17754')
var_17756 = relay.var("var_17756", dtype = "uint8", shape = (280,))#candidate|17756|(280,)|var|uint8
var_17757 = relay.var("var_17757", dtype = "int64", shape = ())#candidate|17757|()|var|int64
call_17755 = func_17754_call(var_17756,var_17757,)
output = call_17755
func_17758 = relay.Function([var_17756,var_17757,], output)
mutated_mod['func_17758'] = func_17758
mutated_mod = relay.transform.InferType()(mutated_mod)
func_17591_call = mod.get_global_var('func_17591')
func_17592_call = mutated_mod.get_global_var('func_17592')
call_17897 = relay.TupleGetItem(func_17591_call(), 0)
call_17898 = relay.TupleGetItem(func_17592_call(), 0)
output = relay.Tuple([call_17897,])
output2 = relay.Tuple([call_17898,])
func_17909 = relay.Function([], output)
mod['func_17909'] = func_17909
mod = relay.transform.InferType()(mod)
output = func_17909()
func_17910 = relay.Function([], output)
mutated_mod['func_17910'] = func_17910
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11398_call = mod.get_global_var('func_11398')
func_11400_call = mutated_mod.get_global_var('func_11400')
call_17958 = relay.TupleGetItem(func_11398_call(), 1)
call_17959 = relay.TupleGetItem(func_11400_call(), 1)
output = call_17958
output2 = call_17959
func_17970 = relay.Function([], output)
mod['func_17970'] = func_17970
mod = relay.transform.InferType()(mod)
output = func_17970()
func_17971 = relay.Function([], output)
mutated_mod['func_17971'] = func_17971
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12439_call = mod.get_global_var('func_12439')
func_12441_call = mutated_mod.get_global_var('func_12441')
call_17995 = relay.TupleGetItem(func_12439_call(), 1)
call_17996 = relay.TupleGetItem(func_12441_call(), 1)
output = relay.Tuple([call_17995,])
output2 = relay.Tuple([call_17996,])
func_18004 = relay.Function([], output)
mod['func_18004'] = func_18004
mod = relay.transform.InferType()(mod)
output = func_18004()
func_18005 = relay.Function([], output)
mutated_mod['func_18005'] = func_18005
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13786_call = mod.get_global_var('func_13786')
func_13788_call = mutated_mod.get_global_var('func_13788')
call_18009 = relay.TupleGetItem(func_13786_call(), 0)
call_18010 = relay.TupleGetItem(func_13788_call(), 0)
output = relay.Tuple([call_18009,])
output2 = relay.Tuple([call_18010,])
func_18038 = relay.Function([], output)
mod['func_18038'] = func_18038
mod = relay.transform.InferType()(mod)
output = func_18038()
func_18039 = relay.Function([], output)
mutated_mod['func_18039'] = func_18039
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8458_call = mod.get_global_var('func_8458')
func_8459_call = mutated_mod.get_global_var('func_8459')
call_18040 = relay.TupleGetItem(func_8458_call(), 0)
call_18041 = relay.TupleGetItem(func_8459_call(), 0)
func_15240_call = mod.get_global_var('func_15240')
func_15241_call = mutated_mod.get_global_var('func_15241')
call_18048 = relay.TupleGetItem(func_15240_call(), 0)
call_18049 = relay.TupleGetItem(func_15241_call(), 0)
output = relay.Tuple([call_18040,call_18048,])
output2 = relay.Tuple([call_18041,call_18049,])
func_18065 = relay.Function([], output)
mod['func_18065'] = func_18065
mod = relay.transform.InferType()(mod)
output = func_18065()
func_18066 = relay.Function([], output)
mutated_mod['func_18066'] = func_18066
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12439_call = mod.get_global_var('func_12439')
func_12441_call = mutated_mod.get_global_var('func_12441')
call_18122 = relay.TupleGetItem(func_12439_call(), 0)
call_18123 = relay.TupleGetItem(func_12441_call(), 0)
output = call_18122
output2 = call_18123
func_18125 = relay.Function([], output)
mod['func_18125'] = func_18125
mod = relay.transform.InferType()(mod)
mutated_mod['func_18125'] = func_18125
mutated_mod = relay.transform.InferType()(mutated_mod)
func_18125_call = mutated_mod.get_global_var('func_18125')
call_18126 = func_18125_call()
output = call_18126
func_18127 = relay.Function([], output)
mutated_mod['func_18127'] = func_18127
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8821_call = mod.get_global_var('func_8821')
func_8823_call = mutated_mod.get_global_var('func_8823')
call_18147 = relay.TupleGetItem(func_8821_call(), 1)
call_18148 = relay.TupleGetItem(func_8823_call(), 1)
func_13086_call = mod.get_global_var('func_13086')
func_13087_call = mutated_mod.get_global_var('func_13087')
call_18166 = func_13086_call()
call_18167 = func_13086_call()
output = relay.Tuple([call_18147,call_18166,])
output2 = relay.Tuple([call_18148,call_18167,])
func_18171 = relay.Function([], output)
mod['func_18171'] = func_18171
mod = relay.transform.InferType()(mod)
mutated_mod['func_18171'] = func_18171
mutated_mod = relay.transform.InferType()(mutated_mod)
func_18171_call = mutated_mod.get_global_var('func_18171')
call_18172 = func_18171_call()
output = call_18172
func_18173 = relay.Function([], output)
mutated_mod['func_18173'] = func_18173
mutated_mod = relay.transform.InferType()(mutated_mod)
func_15441_call = mod.get_global_var('func_15441')
func_15443_call = mutated_mod.get_global_var('func_15443')
call_18186 = relay.TupleGetItem(func_15441_call(), 0)
call_18187 = relay.TupleGetItem(func_15443_call(), 0)
func_7060_call = mod.get_global_var('func_7060')
func_7062_call = mutated_mod.get_global_var('func_7062')
call_18231 = func_7060_call()
call_18232 = func_7060_call()
func_12683_call = mod.get_global_var('func_12683')
func_12684_call = mutated_mod.get_global_var('func_12684')
call_18237 = func_12683_call()
call_18238 = func_12683_call()
func_7714_call = mod.get_global_var('func_7714')
func_7716_call = mutated_mod.get_global_var('func_7716')
call_18254 = func_7714_call()
call_18255 = func_7714_call()
output = relay.Tuple([call_18186,call_18231,call_18237,call_18254,])
output2 = relay.Tuple([call_18187,call_18232,call_18238,call_18255,])
func_18267 = relay.Function([], output)
mod['func_18267'] = func_18267
mod = relay.transform.InferType()(mod)
mutated_mod['func_18267'] = func_18267
mutated_mod = relay.transform.InferType()(mutated_mod)
func_18267_call = mutated_mod.get_global_var('func_18267')
call_18268 = func_18267_call()
output = call_18268
func_18269 = relay.Function([], output)
mutated_mod['func_18269'] = func_18269
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7825_call = mod.get_global_var('func_7825')
func_7827_call = mutated_mod.get_global_var('func_7827')
call_18315 = relay.TupleGetItem(func_7825_call(), 0)
call_18316 = relay.TupleGetItem(func_7827_call(), 0)
func_17050_call = mod.get_global_var('func_17050')
func_17051_call = mutated_mod.get_global_var('func_17051')
call_18321 = func_17050_call()
call_18322 = func_17050_call()
func_8913_call = mod.get_global_var('func_8913')
func_8915_call = mutated_mod.get_global_var('func_8915')
call_18328 = relay.TupleGetItem(func_8913_call(), 0)
call_18329 = relay.TupleGetItem(func_8915_call(), 0)
output = relay.Tuple([call_18315,call_18321,call_18328,])
output2 = relay.Tuple([call_18316,call_18322,call_18329,])
func_18340 = relay.Function([], output)
mod['func_18340'] = func_18340
mod = relay.transform.InferType()(mod)
output = func_18340()
func_18341 = relay.Function([], output)
mutated_mod['func_18341'] = func_18341
mutated_mod = relay.transform.InferType()(mutated_mod)
func_16833_call = mod.get_global_var('func_16833')
func_16835_call = mutated_mod.get_global_var('func_16835')
call_18532 = relay.TupleGetItem(func_16833_call(), 0)
call_18533 = relay.TupleGetItem(func_16835_call(), 0)
func_2152_call = mod.get_global_var('func_2152')
func_2156_call = mutated_mod.get_global_var('func_2156')
const_18535 = relay.const([6.313828,6.660678,9.265950], dtype = "float64")#candidate|18535|(3,)|const|float64
var_18536 = relay.var("var_18536", dtype = "float64", shape = (33,))#candidate|18536|(33,)|var|float64
const_18537 = relay.const([-2,2,7,8,7,-7,3,-10,7,5,6,-5,9,-4,-5,-2,5,-9,-5,8,6,-8,1,4,-9,-2,-2,-9,-1,9,-1,3,2,-8,-8,-10,2,-5,-7,1,-9,-10,-1,1,3,10,-8,9,6,8,6,8,7,10,-2,7,-5,-2,5,10,3,1,-4,3,2,2,1,-5,-3,2,8,-9,-8,1,6,3,-1,1,7,-3,-9,-6,-7,1,-5,-7,6,-8,-7,-8,-10,2,-5,5,9,2,5,10,-8,1,-6,10,4,-6,7,-6,7,8,-3,6,3,1,10,1,2,3,10,-10,3,9,-2,-7,-3,10,8,-7,8,8,-9,5,-10,-1,-6,-9,9,-9,3,1,-10,1,9,-8,7,-6,-6,-8,-1,-9,2,-6,-5,3,10,3,4,-8,3,-3,-4,7,-10,-6,-5,-8,10,9,8,3,-5,7,-2,6,1,-8,-8,4,-1,1,-3,3,4,1,4,-7,2,-2,-1,2,10,8,4,-10,-2,10,-1,-3,5,-4,-7,1,6,-4,4,8,5,-5,-8,5,-5,7,8,-8,1,-5,4,-10,1,-7,9,2,3,-2,-2,1,1,-1,6,-5,5,9,-8,-2,-10,-6,6,2,5,8,-2,5,9,-6,7,-3,-1,-2,1,8,2,-2], dtype = "int16")#candidate|18537|(250,)|const|int16
call_18534 = relay.TupleGetItem(func_2152_call(relay.reshape(const_18535.astype('float64'), [3, 1, 1]), relay.reshape(var_18536.astype('float64'), [3, 1, 11]), relay.reshape(const_18537.astype('int16'), [250,]), ), 0)
call_18538 = relay.TupleGetItem(func_2156_call(relay.reshape(const_18535.astype('float64'), [3, 1, 1]), relay.reshape(var_18536.astype('float64'), [3, 1, 11]), relay.reshape(const_18537.astype('int16'), [250,]), ), 0)
func_13110_call = mod.get_global_var('func_13110')
func_13112_call = mutated_mod.get_global_var('func_13112')
call_18542 = func_13110_call()
call_18543 = func_13110_call()
output = relay.Tuple([call_18532,call_18534,const_18535,var_18536,const_18537,call_18542,])
output2 = relay.Tuple([call_18533,call_18538,const_18535,var_18536,const_18537,call_18543,])
func_18577 = relay.Function([var_18536,], output)
mod['func_18577'] = func_18577
mod = relay.transform.InferType()(mod)
var_18578 = relay.var("var_18578", dtype = "float64", shape = (33,))#candidate|18578|(33,)|var|float64
output = func_18577(var_18578)
func_18579 = relay.Function([var_18578], output)
mutated_mod['func_18579'] = func_18579
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8863_call = mod.get_global_var('func_8863')
func_8864_call = mutated_mod.get_global_var('func_8864')
call_18602 = relay.TupleGetItem(func_8863_call(), 0)
call_18603 = relay.TupleGetItem(func_8864_call(), 0)
func_10885_call = mod.get_global_var('func_10885')
func_10886_call = mutated_mod.get_global_var('func_10886')
call_18606 = relay.TupleGetItem(func_10885_call(), 4)
call_18607 = relay.TupleGetItem(func_10886_call(), 4)
output = relay.Tuple([call_18602,call_18606,])
output2 = relay.Tuple([call_18603,call_18607,])
func_18611 = relay.Function([], output)
mod['func_18611'] = func_18611
mod = relay.transform.InferType()(mod)
mutated_mod['func_18611'] = func_18611
mutated_mod = relay.transform.InferType()(mutated_mod)
func_18611_call = mutated_mod.get_global_var('func_18611')
call_18612 = func_18611_call()
output = call_18612
func_18613 = relay.Function([], output)
mutated_mod['func_18613'] = func_18613
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12439_call = mod.get_global_var('func_12439')
func_12441_call = mutated_mod.get_global_var('func_12441')
call_18631 = relay.TupleGetItem(func_12439_call(), 0)
call_18632 = relay.TupleGetItem(func_12441_call(), 0)
func_8742_call = mod.get_global_var('func_8742')
func_8743_call = mutated_mod.get_global_var('func_8743')
call_18634 = func_8742_call()
call_18635 = func_8742_call()
output = relay.Tuple([call_18631,call_18634,])
output2 = relay.Tuple([call_18632,call_18635,])
func_18640 = relay.Function([], output)
mod['func_18640'] = func_18640
mod = relay.transform.InferType()(mod)
output = func_18640()
func_18641 = relay.Function([], output)
mutated_mod['func_18641'] = func_18641
mutated_mod = relay.transform.InferType()(mutated_mod)
func_17333_call = mod.get_global_var('func_17333')
func_17335_call = mutated_mod.get_global_var('func_17335')
call_18660 = relay.TupleGetItem(func_17333_call(), 0)
call_18661 = relay.TupleGetItem(func_17335_call(), 0)
output = call_18660
output2 = call_18661
func_18677 = relay.Function([], output)
mod['func_18677'] = func_18677
mod = relay.transform.InferType()(mod)
output = func_18677()
func_18678 = relay.Function([], output)
mutated_mod['func_18678'] = func_18678
mutated_mod = relay.transform.InferType()(mutated_mod)
func_18640_call = mod.get_global_var('func_18640')
func_18641_call = mutated_mod.get_global_var('func_18641')
call_18745 = relay.TupleGetItem(func_18640_call(), 0)
call_18746 = relay.TupleGetItem(func_18641_call(), 0)
output = call_18745
output2 = call_18746
func_18759 = relay.Function([], output)
mod['func_18759'] = func_18759
mod = relay.transform.InferType()(mod)
mutated_mod['func_18759'] = func_18759
mutated_mod = relay.transform.InferType()(mutated_mod)
func_18759_call = mutated_mod.get_global_var('func_18759')
call_18760 = func_18759_call()
output = call_18760
func_18761 = relay.Function([], output)
mutated_mod['func_18761'] = func_18761
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12439_call = mod.get_global_var('func_12439')
func_12441_call = mutated_mod.get_global_var('func_12441')
call_18881 = relay.TupleGetItem(func_12439_call(), 0)
call_18882 = relay.TupleGetItem(func_12441_call(), 0)
output = relay.Tuple([call_18881,])
output2 = relay.Tuple([call_18882,])
func_18915 = relay.Function([], output)
mod['func_18915'] = func_18915
mod = relay.transform.InferType()(mod)
mutated_mod['func_18915'] = func_18915
mutated_mod = relay.transform.InferType()(mutated_mod)
func_18915_call = mutated_mod.get_global_var('func_18915')
call_18916 = func_18915_call()
output = call_18916
func_18917 = relay.Function([], output)
mutated_mod['func_18917'] = func_18917
mutated_mod = relay.transform.InferType()(mutated_mod)
var_18934 = relay.var("var_18934", dtype = "float64", shape = ())#candidate|18934|()|var|float64
const_18935 = relay.const([[[-3.830533,5.588237,3.135864,4.602623,1.764284,-5.884358,7.875103,3.985776,8.851745,5.225182]],[[-6.263927,9.240465,6.714504,-4.770940,-8.074518,-1.259937,3.208012,3.021217,7.914554,1.684060]],[[-9.747547,-0.128036,-3.911131,-0.882877,-2.685927,6.976174,-5.223976,1.782277,3.114763,7.544998]],[[7.592078,2.384698,7.320621,8.687696,3.166670,2.842324,-3.996214,5.506078,-6.049656,-5.313959]],[[7.308143,1.553934,-2.457948,-2.106253,-0.365807,-8.131521,6.385035,2.860266,-0.478486,2.801133]],[[3.631561,5.184845,-8.966626,-9.930565,2.603452,5.901482,-6.471981,-6.936768,1.387196,4.746019]],[[-6.998029,-7.334846,6.698791,-0.133704,-8.859626,7.172251,1.173612,-3.541790,-5.743172,-2.017996]],[[0.420944,-5.631216,-8.757523,8.556342,6.146732,6.284870,-7.330153,5.600599,5.354774,8.552658]],[[1.001687,2.365523,6.506870,-9.979879,5.597526,5.832333,-6.907331,-7.118356,-3.302383,7.653685]],[[-8.518216,1.722342,-6.750938,-9.434494,7.753923,8.591274,0.136881,5.059295,-9.573350,-4.255618]],[[-3.024556,9.630994,6.871117,5.897742,4.247567,-4.924969,5.031036,-8.894940,-2.922172,-3.462041]],[[-1.658506,8.693802,-1.162549,-9.296592,-6.766292,-8.724669,8.496810,-4.123619,-3.848740,-3.259755]],[[-5.132097,0.253942,0.785395,8.586468,1.297531,2.780339,2.560270,9.001200,9.416133,8.878316]],[[-9.881948,-3.344865,1.946288,-4.329075,-0.266760,6.120604,6.656069,-2.497808,-6.233408,2.434953]]], dtype = "float64")#candidate|18935|(14, 1, 10)|const|float64
bop_18936 = relay.power(var_18934.astype('float64'), const_18935.astype('float64')) # shape=(14, 1, 10)
output = bop_18936
output2 = bop_18936
func_18939 = relay.Function([var_18934,], output)
mod['func_18939'] = func_18939
mod = relay.transform.InferType()(mod)
mutated_mod['func_18939'] = func_18939
mutated_mod = relay.transform.InferType()(mutated_mod)
var_18940 = relay.var("var_18940", dtype = "float64", shape = ())#candidate|18940|()|var|float64
func_18939_call = mutated_mod.get_global_var('func_18939')
call_18941 = func_18939_call(var_18940)
output = call_18941
func_18942 = relay.Function([var_18940], output)
mutated_mod['func_18942'] = func_18942
mutated_mod = relay.transform.InferType()(mutated_mod)
var_18959 = relay.var("var_18959", dtype = "int32", shape = (2, 14, 6))#candidate|18959|(2, 14, 6)|var|int32
var_18960 = relay.var("var_18960", dtype = "int32", shape = (2, 14, 6))#candidate|18960|(2, 14, 6)|var|int32
bop_18961 = relay.less(var_18959.astype('bool'), relay.reshape(var_18960.astype('bool'), relay.shape_of(var_18959))) # shape=(2, 14, 6)
output = relay.Tuple([bop_18961,])
output2 = relay.Tuple([bop_18961,])
func_18964 = relay.Function([var_18959,var_18960,], output)
mod['func_18964'] = func_18964
mod = relay.transform.InferType()(mod)
var_18965 = relay.var("var_18965", dtype = "int32", shape = (2, 14, 6))#candidate|18965|(2, 14, 6)|var|int32
var_18966 = relay.var("var_18966", dtype = "int32", shape = (2, 14, 6))#candidate|18966|(2, 14, 6)|var|int32
output = func_18964(var_18965,var_18966,)
func_18967 = relay.Function([var_18965,var_18966,], output)
mutated_mod['func_18967'] = func_18967
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13086_call = mod.get_global_var('func_13086')
func_13087_call = mutated_mod.get_global_var('func_13087')
call_18995 = func_13086_call()
call_18996 = func_13086_call()
output = relay.Tuple([call_18995,])
output2 = relay.Tuple([call_18996,])
func_19027 = relay.Function([], output)
mod['func_19027'] = func_19027
mod = relay.transform.InferType()(mod)
output = func_19027()
func_19028 = relay.Function([], output)
mutated_mod['func_19028'] = func_19028
mutated_mod = relay.transform.InferType()(mutated_mod)
func_17019_call = mod.get_global_var('func_17019')
func_17021_call = mutated_mod.get_global_var('func_17021')
call_19061 = relay.TupleGetItem(func_17019_call(), 0)
call_19062 = relay.TupleGetItem(func_17021_call(), 0)
output = call_19061
output2 = call_19062
func_19068 = relay.Function([], output)
mod['func_19068'] = func_19068
mod = relay.transform.InferType()(mod)
mutated_mod['func_19068'] = func_19068
mutated_mod = relay.transform.InferType()(mutated_mod)
func_19068_call = mutated_mod.get_global_var('func_19068')
call_19069 = func_19068_call()
output = call_19069
func_19070 = relay.Function([], output)
mutated_mod['func_19070'] = func_19070
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10127_call = mod.get_global_var('func_10127')
func_10128_call = mutated_mod.get_global_var('func_10128')
call_19082 = func_10127_call()
call_19083 = func_10127_call()
output = relay.Tuple([call_19082,])
output2 = relay.Tuple([call_19083,])
func_19091 = relay.Function([], output)
mod['func_19091'] = func_19091
mod = relay.transform.InferType()(mod)
output = func_19091()
func_19092 = relay.Function([], output)
mutated_mod['func_19092'] = func_19092
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12439_call = mod.get_global_var('func_12439')
func_12441_call = mutated_mod.get_global_var('func_12441')
call_19123 = relay.TupleGetItem(func_12439_call(), 1)
call_19124 = relay.TupleGetItem(func_12441_call(), 1)
output = relay.Tuple([call_19123,])
output2 = relay.Tuple([call_19124,])
func_19134 = relay.Function([], output)
mod['func_19134'] = func_19134
mod = relay.transform.InferType()(mod)
output = func_19134()
func_19135 = relay.Function([], output)
mutated_mod['func_19135'] = func_19135
mutated_mod = relay.transform.InferType()(mutated_mod)
var_19145 = relay.var("var_19145", dtype = "int16", shape = ())#candidate|19145|()|var|int16
var_19146 = relay.var("var_19146", dtype = "int16", shape = (2, 2, 3))#candidate|19146|(2, 2, 3)|var|int16
bop_19147 = relay.subtract(var_19145.astype('int16'), var_19146.astype('int16')) # shape=(2, 2, 3)
func_7968_call = mod.get_global_var('func_7968')
func_7969_call = mutated_mod.get_global_var('func_7969')
call_19151 = relay.TupleGetItem(func_7968_call(), 1)
call_19152 = relay.TupleGetItem(func_7969_call(), 1)
output = relay.Tuple([bop_19147,call_19151,])
output2 = relay.Tuple([bop_19147,call_19152,])
func_19154 = relay.Function([var_19145,var_19146,], output)
mod['func_19154'] = func_19154
mod = relay.transform.InferType()(mod)
mutated_mod['func_19154'] = func_19154
mutated_mod = relay.transform.InferType()(mutated_mod)
func_19154_call = mutated_mod.get_global_var('func_19154')
var_19156 = relay.var("var_19156", dtype = "int16", shape = ())#candidate|19156|()|var|int16
var_19157 = relay.var("var_19157", dtype = "int16", shape = (2, 2, 3))#candidate|19157|(2, 2, 3)|var|int16
call_19155 = func_19154_call(var_19156,var_19157,)
output = call_19155
func_19158 = relay.Function([var_19156,var_19157,], output)
mutated_mod['func_19158'] = func_19158
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7887_call = mod.get_global_var('func_7887')
func_7889_call = mutated_mod.get_global_var('func_7889')
call_19200 = func_7887_call()
call_19201 = func_7887_call()
output = call_19200
output2 = call_19201
func_19203 = relay.Function([], output)
mod['func_19203'] = func_19203
mod = relay.transform.InferType()(mod)
output = func_19203()
func_19204 = relay.Function([], output)
mutated_mod['func_19204'] = func_19204
mutated_mod = relay.transform.InferType()(mutated_mod)
var_19226 = relay.var("var_19226", dtype = "float32", shape = (8, 11, 11))#candidate|19226|(8, 11, 11)|var|float32
uop_19227 = relay.acos(var_19226.astype('float32')) # shape=(8, 11, 11)
output = relay.Tuple([uop_19227,])
output2 = relay.Tuple([uop_19227,])
func_19239 = relay.Function([var_19226,], output)
mod['func_19239'] = func_19239
mod = relay.transform.InferType()(mod)
mutated_mod['func_19239'] = func_19239
mutated_mod = relay.transform.InferType()(mutated_mod)
var_19240 = relay.var("var_19240", dtype = "float32", shape = (8, 11, 11))#candidate|19240|(8, 11, 11)|var|float32
func_19239_call = mutated_mod.get_global_var('func_19239')
call_19241 = func_19239_call(var_19240)
output = call_19241
func_19242 = relay.Function([var_19240], output)
mutated_mod['func_19242'] = func_19242
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11918_call = mod.get_global_var('func_11918')
func_11919_call = mutated_mod.get_global_var('func_11919')
call_19251 = relay.TupleGetItem(func_11918_call(), 1)
call_19252 = relay.TupleGetItem(func_11919_call(), 1)
func_8624_call = mod.get_global_var('func_8624')
func_8626_call = mutated_mod.get_global_var('func_8626')
const_19274 = relay.const([[True,True],[False,False],[True,True],[True,False],[True,True],[False,False],[True,False],[False,False],[True,True],[True,True],[False,False],[True,True],[False,False],[True,False],[False,False],[True,True],[False,True],[False,True],[True,True],[False,False],[False,False],[False,False],[False,False],[False,True],[False,True],[False,False],[False,True],[True,False],[True,False],[False,True],[False,True],[True,False],[True,True],[False,False],[False,False],[False,True],[False,True],[True,False],[True,True],[True,True],[True,True],[True,True],[True,False],[True,False],[False,True],[False,True],[True,True],[True,False],[False,True],[False,False],[True,False],[True,True],[True,False],[True,True],[False,False],[False,True],[False,False],[False,True],[False,True],[True,True],[False,True],[False,True],[False,True],[True,False],[True,True],[True,False],[False,False],[False,True],[True,True],[False,True],[False,True],[False,False],[True,False],[True,True],[True,False],[False,True],[False,False],[True,False],[False,False],[True,True],[False,False],[True,False],[False,True],[True,True],[True,False],[False,True],[True,False],[True,False],[False,False],[True,True],[False,False],[True,False],[False,False],[True,False],[False,False],[True,False],[False,True],[False,False],[False,False],[False,True],[False,False],[False,True],[True,True],[True,True],[True,False],[True,False],[False,False],[False,True],[False,True],[True,False],[True,True],[True,True],[False,True],[False,False],[True,False],[False,True],[False,False],[False,True],[False,True],[True,True],[False,False],[True,False],[False,False],[True,False],[True,True],[False,True],[False,True],[False,False],[True,False],[False,False],[False,False],[False,True],[True,False],[False,True],[False,True],[False,False],[True,False],[False,True],[False,False],[True,True],[True,False],[False,True],[True,True],[True,False],[True,True],[True,False],[False,True],[True,True],[True,True],[False,True],[True,False],[True,False],[False,False],[False,False],[False,True],[False,True],[True,False],[False,True],[True,True],[True,True],[False,False],[True,False],[True,False],[True,True],[True,True],[False,False],[False,False],[True,False],[False,True],[True,False],[False,True],[True,False],[True,True],[True,True],[False,False],[False,False],[True,True],[True,False],[True,False],[True,False],[False,False],[True,False],[False,False],[False,False],[True,True],[False,True],[False,True],[True,False],[False,False],[True,False],[True,True],[False,False],[False,True],[False,True],[False,False],[True,False],[False,False],[False,False],[False,False],[False,True],[False,False],[True,False],[True,False],[False,True],[True,True],[True,False],[False,True],[False,False],[True,False],[True,True],[False,True],[True,False],[True,True],[False,False],[True,False],[True,True],[False,False],[False,True],[True,False],[False,False],[False,True],[False,False],[True,False],[True,False],[False,False],[True,True],[True,False],[True,True],[True,False],[True,False],[False,False],[False,True],[True,False],[False,False],[False,True],[False,False],[False,False],[True,True],[False,False],[True,False],[False,False],[True,False],[False,True],[True,True],[True,False],[False,True],[False,False],[False,True],[False,True],[True,False],[False,True],[True,False],[True,False],[False,True],[False,True],[False,False],[False,True],[False,False],[False,True],[False,True],[True,False],[True,False],[False,True],[True,False],[False,True],[False,False],[False,True],[True,False],[True,True],[True,True],[False,True],[False,False],[True,False],[True,True],[False,True],[True,True],[True,False],[True,True],[True,True],[True,False],[False,True],[False,False],[True,True],[False,False],[False,False],[False,True],[True,False],[True,False],[False,False],[False,False],[True,True],[False,False],[True,True],[True,False],[False,False],[False,False],[False,True],[True,True],[False,True],[True,True],[True,True],[False,True],[True,True],[True,False],[False,True],[False,True],[False,False],[False,True],[False,True],[False,False],[False,False],[True,False],[True,False],[True,False],[True,False],[True,True],[False,True],[False,True],[False,True],[True,False],[True,False],[False,True],[False,False],[True,False],[True,True],[True,True],[True,False],[True,True],[False,False],[True,True],[True,False],[False,True],[True,False],[False,True],[False,False],[False,True],[False,False],[False,False],[False,True],[True,True],[False,False],[True,False],[False,False],[True,False],[True,False],[True,False],[False,False],[True,True],[False,True],[False,False],[True,False],[True,True],[False,False],[False,False],[True,True],[False,False],[True,True],[False,True],[True,True],[True,False],[True,False],[False,True],[False,True],[False,True],[True,False],[True,False],[True,True],[False,True],[True,False],[False,False],[True,False],[False,False],[True,False],[True,False],[True,False],[True,False],[False,True],[True,True],[True,True],[False,False],[False,True],[False,True],[False,False],[False,True],[False,False],[False,True],[False,False],[True,True],[True,False],[False,False],[False,True],[True,True],[False,False],[False,True],[False,False],[True,False],[True,False],[True,False],[False,True],[True,True],[False,True],[False,False],[False,False],[False,True],[False,False],[True,True],[True,False],[False,True],[True,False],[True,True],[False,False],[True,True],[False,False],[True,True],[True,True],[False,True],[False,False],[False,False],[False,False],[True,True],[False,True],[False,True],[True,False],[False,False],[False,True],[True,False],[False,False],[True,False],[False,True],[True,False],[False,True],[True,False],[False,True],[True,False],[True,False],[True,True],[True,True],[False,True],[True,True],[True,True],[False,True],[True,False],[True,True],[True,False],[False,False],[False,False],[False,True],[False,False],[True,True],[False,False],[False,False],[False,True],[True,False],[False,True],[True,False],[False,False],[True,False],[False,False],[True,True],[False,True],[False,False],[True,False],[False,True],[False,True],[True,False],[True,True],[False,True],[False,False],[False,True],[True,True],[True,True],[True,False],[True,False],[False,False],[True,True],[True,True],[True,False],[True,True],[False,True],[False,True],[False,False],[False,False],[True,False],[False,True],[True,True],[True,False],[True,False],[False,False],[False,True],[True,False],[False,False],[True,True],[True,True],[True,True],[False,True],[False,False],[True,False],[True,True],[False,True],[False,False],[True,True],[False,False],[False,True],[False,False],[False,True],[False,False],[False,False],[True,True],[True,False],[False,True],[False,False],[False,True],[False,True],[False,False],[False,True],[False,True],[False,True],[True,False],[False,False],[True,False],[True,True],[False,True],[True,True],[False,False],[False,False],[False,False],[False,False],[True,False],[True,False],[True,True],[True,True],[True,True],[False,False],[False,False],[False,True],[False,False],[False,False],[True,False],[False,False],[False,False],[False,False],[False,True],[False,True],[True,True],[True,False],[True,False],[False,False],[False,False],[False,False],[True,True],[True,True],[True,True],[False,False],[True,False],[False,False],[False,True],[False,False],[False,True],[True,True],[False,True],[False,True],[True,False],[True,True],[False,False],[True,True],[True,False],[True,False],[False,True],[False,True],[True,True],[True,True],[False,False],[True,False],[True,False],[True,True],[True,True],[True,True],[True,False],[False,False],[False,False],[True,True],[False,False],[True,False],[True,False],[False,False],[True,True],[True,True],[True,False],[True,False],[True,False],[False,False],[False,True],[True,True],[True,False],[True,False],[False,True],[True,False],[True,True],[True,True],[True,True],[True,False],[False,True],[True,False],[True,False],[False,False],[False,False],[True,False],[True,False],[False,True],[False,True],[True,False],[False,False],[True,False],[True,False],[True,False],[True,False],[False,True],[True,True],[True,True],[True,False],[True,False],[False,False],[False,False],[True,False],[True,True],[False,False],[False,False],[False,True],[False,False],[True,True],[False,False],[False,True],[True,True],[False,True],[False,False],[True,False],[False,True],[False,False],[True,True],[True,False],[True,True],[False,True],[True,True],[False,False],[True,True],[True,True],[True,True],[False,False],[True,True],[True,True],[True,False],[True,True],[False,False],[True,True],[True,False],[False,False],[True,False],[True,True],[True,True],[True,False],[False,False],[False,True],[False,False],[False,True],[True,True],[False,False],[False,False],[True,False],[False,True],[True,True],[True,True],[False,True],[False,True],[False,True],[True,True],[False,True],[True,False],[True,True],[False,True],[False,False],[False,True],[False,False],[True,False],[False,True],[True,False],[False,False],[True,False],[True,True],[False,True],[True,True],[False,True],[False,False],[True,True],[True,True],[False,False],[True,True],[True,False],[True,False],[False,False],[True,True],[False,True],[True,True],[False,True],[True,False],[False,False],[True,True],[True,True],[True,False],[True,False],[True,True],[False,True],[False,True],[True,False],[True,True],[False,False],[False,False],[False,True],[True,False],[False,False],[False,True],[False,True],[False,True],[False,True],[True,True],[True,True],[True,False],[False,True],[True,True],[True,True],[False,True],[True,False],[True,True],[True,True],[True,False],[True,True],[True,False],[False,True],[True,True],[False,True],[False,True],[False,True],[True,False],[True,True],[True,False],[False,True],[False,True],[True,True],[True,False],[False,False],[False,False],[False,True],[False,False],[False,True],[True,False],[False,False],[False,False],[True,True],[False,False],[False,True],[True,False],[False,True],[False,True],[False,True],[False,True],[True,False],[True,True],[False,True],[False,False],[False,True],[True,True],[True,True],[True,True],[False,False],[True,True],[True,False],[True,False],[True,True],[True,False],[False,True],[True,False],[False,False],[True,False],[True,True],[False,True],[True,True],[False,False],[False,False],[True,True],[False,True],[False,True],[True,True],[True,True],[True,True],[True,True],[False,False],[True,False],[False,True],[False,True],[False,True],[False,True],[False,True],[False,True],[True,True],[False,True],[False,False],[False,False],[True,False],[True,False],[True,False],[False,True],[False,True],[False,False],[False,False],[True,True],[True,True],[False,False],[False,False],[True,True],[False,True],[False,False],[True,True],[False,False],[True,True],[True,False],[True,True],[True,True],[False,True],[True,True],[False,False],[False,True],[False,False],[True,False],[True,False],[False,True],[True,False],[True,False],[True,False],[True,False],[True,False],[False,True],[True,False],[False,True],[True,False],[False,True],[False,False],[True,False],[True,False],[True,False],[True,True],[True,False],[True,False],[True,True],[False,False],[True,False],[False,False],[True,True],[False,True],[False,True],[True,True],[True,False],[True,False],[False,False],[False,True],[False,True],[False,True],[False,False],[False,True],[True,False],[True,False],[False,True],[False,True],[False,False],[True,False],[False,False],[True,True],[False,True],[True,True],[True,True],[False,False],[True,True],[True,True],[True,True],[False,False],[False,True],[False,False],[False,True],[False,False],[True,True],[False,True],[True,False],[False,False],[True,True],[True,False],[True,True],[False,False],[False,False],[True,True],[True,True],[True,True],[False,False],[False,False],[True,False],[False,False],[True,False],[False,False],[False,False],[False,True],[False,True],[False,True],[True,False],[True,True],[False,False],[True,False],[True,False],[True,True],[False,True],[True,True],[True,True],[False,False],[True,False],[True,False],[False,True],[True,False],[True,True],[True,False],[False,False],[True,False],[False,False],[False,True],[True,False],[False,True],[True,True],[True,True],[False,True],[True,False],[True,False],[False,True],[False,True],[False,True],[True,True],[True,True],[False,False],[True,False],[True,False],[False,False],[False,False],[True,True],[False,False],[False,False],[True,False],[False,False],[False,False],[False,False],[False,False],[True,True],[True,False],[False,True],[True,True],[False,False],[True,False],[False,True],[False,True],[True,False],[False,True],[True,True],[True,True],[False,False],[False,False],[False,False],[False,False],[True,True],[False,True],[True,True],[False,True],[True,False],[True,True],[True,True],[True,False],[False,True],[False,True],[False,True],[False,False],[True,False],[False,False],[False,False],[False,True],[False,False],[False,True],[False,True],[False,True],[True,True],[True,False],[False,False],[True,False],[True,True],[True,True],[False,False],[False,False],[False,False],[False,True],[True,False],[False,True],[False,True],[False,False],[False,False],[False,True],[True,True],[True,True],[True,False],[False,False],[True,True],[True,False],[True,True],[False,False],[False,False],[True,True],[False,True],[False,False],[False,False],[True,False],[False,True],[True,True],[False,True],[False,True],[True,False],[True,True],[False,False],[True,True],[False,True],[True,False],[True,False],[True,True],[False,True],[True,False],[True,False],[True,True],[True,False],[False,True],[True,False],[False,True],[True,True],[False,True],[False,True],[False,False],[False,False],[False,True],[False,True],[False,False],[False,True],[True,True],[False,False],[False,True],[False,False],[True,False],[False,True],[True,True]], dtype = "bool")#candidate|19274|(1056, 2)|const|bool
call_19273 = relay.TupleGetItem(func_8624_call(relay.reshape(const_19274.astype('bool'), [44, 48])), 2)
call_19275 = relay.TupleGetItem(func_8626_call(relay.reshape(const_19274.astype('bool'), [44, 48])), 2)
func_18677_call = mod.get_global_var('func_18677')
func_18678_call = mutated_mod.get_global_var('func_18678')
call_19288 = func_18677_call()
call_19289 = func_18677_call()
output = relay.Tuple([call_19251,call_19273,const_19274,call_19288,])
output2 = relay.Tuple([call_19252,call_19275,const_19274,call_19289,])
func_19300 = relay.Function([], output)
mod['func_19300'] = func_19300
mod = relay.transform.InferType()(mod)
output = func_19300()
func_19301 = relay.Function([], output)
mutated_mod['func_19301'] = func_19301
mutated_mod = relay.transform.InferType()(mutated_mod)
func_16366_call = mod.get_global_var('func_16366')
func_16367_call = mutated_mod.get_global_var('func_16367')
call_19347 = relay.TupleGetItem(func_16366_call(), 4)
call_19348 = relay.TupleGetItem(func_16367_call(), 4)
output = relay.Tuple([call_19347,])
output2 = relay.Tuple([call_19348,])
func_19379 = relay.Function([], output)
mod['func_19379'] = func_19379
mod = relay.transform.InferType()(mod)
mutated_mod['func_19379'] = func_19379
mutated_mod = relay.transform.InferType()(mutated_mod)
func_19379_call = mutated_mod.get_global_var('func_19379')
call_19380 = func_19379_call()
output = call_19380
func_19381 = relay.Function([], output)
mutated_mod['func_19381'] = func_19381
mutated_mod = relay.transform.InferType()(mutated_mod)
var_19384 = relay.var("var_19384", dtype = "uint8", shape = ())#candidate|19384|()|var|uint8
var_19385 = relay.var("var_19385", dtype = "uint8", shape = (15, 5, 5))#candidate|19385|(15, 5, 5)|var|uint8
bop_19386 = relay.greater_equal(var_19384.astype('bool'), var_19385.astype('bool')) # shape=(15, 5, 5)
func_19091_call = mod.get_global_var('func_19091')
func_19092_call = mutated_mod.get_global_var('func_19092')
call_19395 = relay.TupleGetItem(func_19091_call(), 0)
call_19396 = relay.TupleGetItem(func_19092_call(), 0)
func_14453_call = mod.get_global_var('func_14453')
func_14454_call = mutated_mod.get_global_var('func_14454')
call_19401 = relay.TupleGetItem(func_14453_call(), 0)
call_19402 = relay.TupleGetItem(func_14454_call(), 0)
output = relay.Tuple([bop_19386,call_19395,call_19401,])
output2 = relay.Tuple([bop_19386,call_19396,call_19402,])
func_19427 = relay.Function([var_19384,var_19385,], output)
mod['func_19427'] = func_19427
mod = relay.transform.InferType()(mod)
mutated_mod['func_19427'] = func_19427
mutated_mod = relay.transform.InferType()(mutated_mod)
func_19427_call = mutated_mod.get_global_var('func_19427')
var_19429 = relay.var("var_19429", dtype = "uint8", shape = ())#candidate|19429|()|var|uint8
var_19430 = relay.var("var_19430", dtype = "uint8", shape = (15, 5, 5))#candidate|19430|(15, 5, 5)|var|uint8
call_19428 = func_19427_call(var_19429,var_19430,)
output = call_19428
func_19431 = relay.Function([var_19429,var_19430,], output)
mutated_mod['func_19431'] = func_19431
mutated_mod = relay.transform.InferType()(mutated_mod)
var_19433 = relay.var("var_19433", dtype = "float64", shape = (3, 2, 13))#candidate|19433|(3, 2, 13)|var|float64
const_19434 = relay.const([[[-7.518993,-9.394465,4.174699,-4.236098,7.175858,8.184201,8.637139,5.893459,8.451398,9.174752,0.366398,-6.477847,6.117000],[-3.676218,-2.919376,7.631591,5.205480,4.646683,9.081532,4.741797,8.866734,5.058136,-8.757836,0.966304,8.035569,7.408703]],[[-3.972634,-7.606934,2.457992,-6.885856,-5.436945,-6.301782,-0.791117,0.620315,4.714068,-9.620202,4.372660,4.413691,-8.312782],[8.209068,5.397737,-7.789497,-1.276780,5.001240,-5.305054,3.655607,-2.428567,-8.588491,-2.787083,-2.038881,0.129056,-4.577449]],[[-7.096671,-5.825429,9.219858,-3.100411,-4.853327,-1.906746,-7.255275,-8.784928,1.017534,2.559316,2.070757,-0.821367,5.216407],[4.033706,-7.057325,9.784856,-2.154005,0.293839,0.578431,-1.913197,9.752561,-1.539398,7.039773,-8.177336,5.663043,-0.745204]]], dtype = "float64")#candidate|19434|(3, 2, 13)|const|float64
bop_19435 = relay.greater_equal(var_19433.astype('bool'), relay.reshape(const_19434.astype('bool'), relay.shape_of(var_19433))) # shape=(3, 2, 13)
func_16205_call = mod.get_global_var('func_16205')
func_16207_call = mutated_mod.get_global_var('func_16207')
call_19446 = func_16205_call()
call_19447 = func_16205_call()
func_12471_call = mod.get_global_var('func_12471')
func_12472_call = mutated_mod.get_global_var('func_12472')
call_19453 = relay.TupleGetItem(func_12471_call(), 2)
call_19454 = relay.TupleGetItem(func_12472_call(), 2)
func_17591_call = mod.get_global_var('func_17591')
func_17592_call = mutated_mod.get_global_var('func_17592')
call_19466 = relay.TupleGetItem(func_17591_call(), 2)
call_19467 = relay.TupleGetItem(func_17592_call(), 2)
func_14022_call = mod.get_global_var('func_14022')
func_14024_call = mutated_mod.get_global_var('func_14024')
call_19482 = relay.TupleGetItem(func_14022_call(), 2)
call_19483 = relay.TupleGetItem(func_14024_call(), 2)
uop_19490 = relay.log2(var_19433.astype('float64')) # shape=(3, 2, 13)
output = relay.Tuple([bop_19435,call_19446,call_19453,call_19466,call_19482,uop_19490,])
output2 = relay.Tuple([bop_19435,call_19447,call_19454,call_19467,call_19483,uop_19490,])
func_19493 = relay.Function([var_19433,], output)
mod['func_19493'] = func_19493
mod = relay.transform.InferType()(mod)
var_19494 = relay.var("var_19494", dtype = "float64", shape = (3, 2, 13))#candidate|19494|(3, 2, 13)|var|float64
output = func_19493(var_19494)
func_19495 = relay.Function([var_19494], output)
mutated_mod['func_19495'] = func_19495
mutated_mod = relay.transform.InferType()(mutated_mod)
func_18267_call = mod.get_global_var('func_18267')
func_18269_call = mutated_mod.get_global_var('func_18269')
call_19513 = relay.TupleGetItem(func_18267_call(), 0)
call_19514 = relay.TupleGetItem(func_18269_call(), 0)
output = relay.Tuple([call_19513,])
output2 = relay.Tuple([call_19514,])
func_19550 = relay.Function([], output)
mod['func_19550'] = func_19550
mod = relay.transform.InferType()(mod)
mutated_mod['func_19550'] = func_19550
mutated_mod = relay.transform.InferType()(mutated_mod)
func_19550_call = mutated_mod.get_global_var('func_19550')
call_19551 = func_19550_call()
output = call_19551
func_19552 = relay.Function([], output)
mutated_mod['func_19552'] = func_19552
mutated_mod = relay.transform.InferType()(mutated_mod)
func_18640_call = mod.get_global_var('func_18640')
func_18641_call = mutated_mod.get_global_var('func_18641')
call_19600 = relay.TupleGetItem(func_18640_call(), 0)
call_19601 = relay.TupleGetItem(func_18641_call(), 0)
output = relay.Tuple([call_19600,])
output2 = relay.Tuple([call_19601,])
func_19607 = relay.Function([], output)
mod['func_19607'] = func_19607
mod = relay.transform.InferType()(mod)
output = func_19607()
func_19608 = relay.Function([], output)
mutated_mod['func_19608'] = func_19608
mutated_mod = relay.transform.InferType()(mutated_mod)
func_17591_call = mod.get_global_var('func_17591')
func_17592_call = mutated_mod.get_global_var('func_17592')
call_19624 = relay.TupleGetItem(func_17591_call(), 2)
call_19625 = relay.TupleGetItem(func_17592_call(), 2)
output = relay.Tuple([call_19624,])
output2 = relay.Tuple([call_19625,])
func_19647 = relay.Function([], output)
mod['func_19647'] = func_19647
mod = relay.transform.InferType()(mod)
mutated_mod['func_19647'] = func_19647
mutated_mod = relay.transform.InferType()(mutated_mod)
func_19647_call = mutated_mod.get_global_var('func_19647')
call_19648 = func_19647_call()
output = call_19648
func_19649 = relay.Function([], output)
mutated_mod['func_19649'] = func_19649
mutated_mod = relay.transform.InferType()(mutated_mod)
const_19690 = relay.const([[[-1.678149,-5.777366,9.484455,5.438810,-3.066816,2.566178,-3.493668,9.454261,-3.160489],[-5.862114,-2.806649,1.950601,-1.121988,-2.633160,1.136905,0.240326,5.893987,-6.175458],[1.115536,8.504818,1.445188,-5.496308,7.061540,-1.872778,-3.785032,-5.929047,0.027990],[-3.589552,0.155710,5.830193,-0.177759,-9.957225,6.305564,-8.166297,-1.289383,-4.186671],[-8.867015,-4.297259,-0.027295,-6.069039,4.987422,3.692741,-6.610328,9.731856,1.483845],[-9.470802,8.423896,7.402086,0.490676,3.834762,-8.556927,-9.641846,-8.376077,-0.399949],[4.070073,-4.359833,6.990212,6.052885,3.469564,0.267376,-0.909246,1.645551,3.822127],[-1.954941,-8.830484,-0.727023,2.270817,-6.977636,7.825090,1.420584,2.514186,-2.452303],[1.431824,-1.447332,-2.862778,0.718153,-6.979245,-0.268504,-7.868510,-6.737441,-4.625155],[2.850354,1.971990,-6.355654,-1.436515,3.417940,6.133589,0.389237,-1.530128,7.170331],[1.165017,2.117072,4.175969,5.621885,-2.872940,6.275714,2.860658,-6.479722,-3.362459],[4.871269,-5.412754,-8.584107,-2.642433,7.485161,5.472380,9.780787,6.556385,-3.936460],[-8.042680,-5.286512,-7.349640,-7.553845,-7.915222,-7.418061,5.948014,-0.323276,0.612319],[8.183495,-3.944923,-5.437395,4.620520,-2.890500,-9.429775,-3.127470,4.514509,5.217388]],[[-2.530197,4.590803,-6.046552,3.475227,6.821159,-8.358400,-1.916559,1.979484,-1.051624],[-7.021563,6.613396,-6.307060,-9.177375,9.866899,-2.981597,6.440854,-1.865210,4.509931],[-0.122839,-5.955346,-4.996158,-1.309395,-9.721704,5.468702,9.814678,-5.729141,2.087738],[-6.790222,7.077455,3.587992,-1.903463,-2.244073,9.691675,-4.032895,-3.956685,8.833443],[2.059772,3.485758,7.167308,-3.688760,7.400545,-8.740353,4.349909,-3.978913,-3.001910],[-0.108142,-5.481121,4.777524,8.833797,9.211432,-3.163905,-5.837374,9.619855,9.337185],[5.755971,5.046810,-3.001085,2.293673,8.003010,1.819001,4.657167,-5.519366,-1.690639],[3.361034,0.481911,-8.413303,8.844803,5.497176,-0.582326,-3.289017,-9.153766,-1.279617],[9.103814,7.688034,5.668358,-7.460436,-8.237586,-4.160195,-1.842474,-2.653964,3.490819],[0.846658,-3.842252,0.136310,7.386766,-1.867139,2.011085,-8.802135,-9.159771,0.313101],[-0.606853,-7.565551,0.526551,-9.074986,-1.586534,7.497546,1.117754,-4.231418,-1.069503],[-1.295130,3.192144,0.548913,-9.348726,4.854680,5.691504,-6.315682,-4.387903,8.867049],[-7.266762,8.488321,-1.392821,-2.008944,4.048570,5.157127,-0.035627,4.976611,-2.441869],[-8.632739,1.524428,2.885793,8.991155,-3.263362,-9.281802,7.741293,3.191152,9.335714]],[[0.134086,6.509127,9.135946,-5.963291,5.085445,1.631943,2.814051,-4.036424,-9.547317],[2.864636,8.852200,0.489042,5.988560,-4.702881,-3.700765,6.956803,2.171393,-8.292488],[6.640136,-3.402472,5.820945,2.127344,-0.543136,6.172630,3.778885,-9.388301,-1.619469],[5.071596,-0.231015,9.138773,3.681381,-0.290009,9.857567,5.756451,-7.250987,3.564965],[-9.747656,-9.389714,-7.697952,4.196395,-0.584076,8.821440,9.835637,7.368161,-7.885547],[-4.618437,1.289837,2.285634,-0.195681,5.850175,-0.995560,-7.042485,7.728140,3.086757],[-7.475518,-2.383816,-2.191887,8.218555,-1.846860,4.303726,7.020808,-6.387876,0.301051],[-1.046538,8.260680,-7.954460,-8.828914,-1.957791,6.391528,-5.648014,-1.873926,-7.782158],[-3.614679,-6.545022,-0.215020,1.469866,-3.793929,-2.317947,3.967868,1.458025,3.082605],[7.621794,-3.478154,1.367152,7.427638,1.860439,-9.656659,9.673331,7.337999,2.159194],[0.256584,-4.571209,9.673139,6.899977,8.346388,6.925831,-2.395934,-9.111152,-0.366824],[-8.461632,3.141191,3.083022,-9.536848,-5.970466,-9.197381,4.320710,9.956472,5.141533],[3.578953,8.430493,9.135748,8.280524,4.063764,-0.844498,2.639578,-3.938721,-2.494057],[3.589244,-8.051408,6.824032,2.962522,-6.291764,-0.375043,5.487003,7.558291,-6.885410]],[[4.563992,-2.818074,3.467927,-5.973929,-0.781390,-7.695970,-2.956221,7.616744,9.622897],[-2.612636,4.001676,2.568096,-4.720621,1.610923,-5.539175,6.538731,9.721826,-9.653913],[-5.989452,-8.728808,9.833846,-4.653375,-6.272573,-2.453086,-7.284511,-1.951325,-2.494370],[3.817201,2.347203,-1.323287,-7.894580,6.366016,3.980184,-8.359188,9.104712,-0.143399],[6.497085,-1.619668,-4.400224,-3.181403,7.434836,7.270750,-6.918505,7.140254,6.026659],[0.380689,5.489891,-3.775971,0.321122,-5.782448,1.904052,8.019391,5.743032,-6.673010],[4.141506,-0.951008,1.726346,-5.767421,-4.754779,5.978803,0.280862,8.997342,-2.519895],[4.675381,6.704102,-0.070042,9.260769,5.204446,0.054045,-8.193225,-9.555072,-9.422124],[-1.441831,-7.650417,-0.430864,5.711858,-7.705593,-8.741270,-5.575020,-6.751348,4.680939],[-8.741717,3.770661,-5.565861,8.482337,7.368062,2.344634,8.301011,-2.487260,1.274837],[-2.009345,-9.694799,7.015670,6.825668,-3.648734,1.547044,-6.466657,-9.556770,-1.620926],[-9.123388,-5.998460,5.520324,2.312908,5.971277,-5.265052,-9.907677,4.547332,-7.069570],[7.832906,-4.183479,1.294999,-8.467477,0.750003,1.387061,5.708288,1.426667,7.735646],[0.219433,-5.262028,-8.839734,5.782651,2.904866,0.909207,-9.959616,7.227837,4.163988]],[[-3.533584,-6.766102,-7.298837,8.613762,6.483218,2.560144,-9.330388,-3.205634,-1.555472],[0.844096,0.123921,-7.738669,-7.910934,-6.165190,-6.880788,5.562177,0.540367,-4.156140],[7.221344,4.289210,8.922962,-0.436889,1.696485,-1.918539,3.419251,-5.578679,-1.744372],[-9.057514,4.727405,-7.885031,-0.463630,-8.415313,7.897388,6.730324,2.859671,9.178954],[-7.784307,-1.219617,-5.064146,4.359213,-2.682263,4.917910,-9.440116,-7.585384,-9.443286],[9.458071,-2.919070,-8.727045,1.435514,-8.028067,-4.851334,0.241692,1.707290,-2.937411],[-2.014537,-9.564547,6.237326,2.424993,9.506604,4.262006,-9.809854,-9.069799,3.736435],[-5.441504,-1.317984,5.958982,-1.786741,3.747354,-5.582373,-5.646162,1.702880,8.219470],[-6.000738,5.017818,-4.216942,3.672901,0.341140,6.362066,-1.957981,4.063376,7.260292],[7.390596,2.434092,3.050133,-3.469653,-7.834111,-3.650752,3.622213,-1.169522,-6.852398],[1.119257,1.860312,1.429930,9.865792,-7.491041,4.474714,7.510510,-4.586927,7.588200],[-5.015168,2.771236,-2.105759,5.409864,-2.655430,-5.266283,-3.341557,-5.456986,-9.191342],[9.054699,2.703028,0.592906,3.082239,5.935219,6.493379,3.900057,-2.039458,9.632917],[8.615990,-4.085178,-0.076647,-2.743454,0.272488,9.633397,5.064883,7.113248,-9.976936]],[[3.240063,-9.778521,4.146935,6.869181,8.695447,9.707471,-7.662734,9.778004,-1.052485],[6.000847,5.953970,3.734947,8.734717,2.515046,8.507184,1.257468,0.549886,9.974842],[9.088631,6.787366,5.228726,3.544557,4.841764,-1.112557,6.701694,2.679834,-5.701953],[0.293185,3.514548,0.386667,-1.634969,5.180970,-3.654307,0.291443,7.466091,-6.726820],[0.983228,1.739828,2.539839,9.467699,6.397458,5.316188,1.816206,1.479217,6.139404],[-2.389201,3.040332,8.656751,-9.909173,-5.729187,1.164820,-0.584696,-5.555811,-7.743173],[-8.373663,-4.158644,-4.394565,1.859306,-1.662785,-6.289241,6.820440,-9.328337,-2.505905],[-6.165319,-8.329578,-3.214673,-4.375713,-4.834168,-2.532756,-7.698009,-6.267839,9.627277],[-6.185180,8.466033,9.736336,-3.934045,-1.420636,-4.514434,-8.269963,9.885126,8.912377],[-3.719085,0.530030,-8.512935,1.597602,-9.763026,-1.907603,-4.884336,-2.070687,8.965722],[0.596083,9.619316,-4.545523,-2.576912,-3.537369,7.725338,-1.733724,4.806229,8.996450],[1.030160,-8.564499,-3.558343,5.154143,2.027997,-4.215688,-6.536053,-7.205345,0.283089],[5.254180,9.011398,-5.606417,0.648487,7.149229,-3.365263,-8.166734,0.157005,6.570534],[4.763099,0.994277,-9.764809,-7.391302,8.354535,-2.699749,5.427046,0.269812,-4.775408]],[[-9.416774,-6.974854,-1.541488,-0.815542,-8.229677,-4.298864,7.210807,8.665283,-1.246627],[8.734834,-8.510278,-9.880545,1.910285,-2.452571,-9.172625,-6.107366,-8.857940,-7.660534],[1.061090,8.921451,0.698014,9.709590,-9.089412,2.776446,6.593866,3.110703,7.406259],[-6.282014,9.568151,4.612981,8.748481,-4.605541,-0.998465,6.168153,7.907855,-1.811298],[-0.380802,-6.622159,-7.414722,7.924777,-0.282554,4.890415,-3.716464,-7.509728,-9.395338],[-4.713629,-0.694191,6.271855,0.591331,-6.917029,7.987109,3.902331,4.502359,-1.028087],[9.266460,5.173760,-0.085137,-2.163838,-1.198424,3.824746,-7.624760,5.569662,-9.516365],[-3.774040,7.353872,5.867375,4.685277,-3.348511,-9.408688,-1.924670,-4.271322,2.177940],[-4.520284,-6.238840,-1.026198,6.410497,8.692552,3.375872,5.051975,8.113126,6.400856],[3.254427,-8.471351,2.336552,0.712097,-0.453157,4.021847,-0.391365,0.787038,-0.485330],[-8.838732,7.673813,-6.309650,-3.090411,-3.801482,-7.226245,-9.249457,-2.230435,9.109184],[6.440321,2.239836,5.150235,8.918934,-0.381229,-0.039082,-3.857037,-1.473456,-7.509033],[8.546224,-0.396534,-0.603861,0.417478,-5.911653,2.777164,7.035134,-7.230775,7.420180],[6.612890,-5.652929,5.245468,-5.505628,6.740855,9.911789,-3.669049,-0.926574,-7.423642]],[[2.112561,8.638520,9.861239,-1.050535,0.469994,6.719337,-8.628996,3.270862,-0.180335],[2.279567,2.187628,9.192358,-8.346907,3.609753,-8.740703,4.419007,8.199484,-2.342594],[-5.406282,8.049854,4.146476,-9.190888,0.559647,-2.135226,-8.658075,-6.315565,3.326759],[0.119630,1.988109,-6.452899,-3.526612,-5.980841,1.746173,7.004267,1.611882,1.113934],[9.250415,-7.856036,-5.128731,0.633693,-9.092343,-2.835128,0.520734,7.487226,-1.117041],[0.544701,6.937503,-9.868245,-2.774099,-6.023988,-5.099347,-8.686441,6.186217,-3.949919],[-5.546657,4.103899,9.387886,-0.307610,0.416136,-8.213019,0.810981,-4.118222,5.185110],[3.594733,-8.800637,0.912970,-7.372785,6.746863,-4.038074,3.807873,1.319429,9.690450],[-1.450136,5.802679,8.441365,2.599488,8.030709,2.823402,-1.450753,-5.427369,0.044757],[6.287131,-7.016180,4.119817,-2.318774,7.471687,0.166516,-3.568364,-9.235327,4.797326],[3.876409,-4.198573,5.207019,5.703537,3.104633,-3.710785,0.844811,-1.235522,-5.993085],[-4.958296,-3.975006,-4.782722,-0.860096,0.784274,8.080620,-1.006785,0.100185,2.378875],[5.072262,-4.663010,2.724188,0.810836,-6.661182,-7.736245,7.074279,5.184215,-0.401115],[-0.253021,-5.817318,8.322151,-9.747087,9.560656,-7.044930,-9.496110,4.888235,-2.863684]],[[-3.438051,-7.649427,1.397390,2.164738,0.596615,-2.163092,8.683719,1.991514,-7.079192],[9.896634,-0.467111,-7.135620,7.949455,-5.663381,5.263538,7.297453,-2.619568,-2.656690],[-9.918055,0.493191,-3.334467,7.446380,-2.278603,-4.708277,1.292406,8.394326,-1.383913],[1.450017,3.212374,-1.897413,-6.449725,-8.182059,4.061803,6.633559,-2.579964,-5.306653],[-1.737004,-5.333744,-5.236565,-4.582306,-6.297809,0.036014,6.998071,5.119587,2.247616],[-7.608168,7.907828,-0.704505,6.314127,9.663932,-1.377269,0.205112,6.073457,1.269561],[-7.833443,-2.952332,-5.205564,2.858809,-0.559322,-6.050074,-4.723675,6.832141,2.548242],[2.832254,3.873203,-1.090915,-6.008451,6.476709,-7.380614,5.342381,-6.150179,2.574104],[3.356191,-8.468938,5.127882,5.547971,8.651011,-0.883285,4.107840,-0.344171,-8.024462],[-8.109138,-6.836641,-0.552192,9.943071,5.166690,5.618211,-3.355064,0.248215,-7.009933],[6.542568,-8.157837,7.351514,6.220186,-0.556908,8.404108,-7.570826,2.931349,2.352199],[9.615888,8.210609,-6.794393,-3.949202,-1.769911,-2.817312,-1.095829,-5.039522,-6.810928],[3.160701,-4.199819,2.676235,-2.156486,-6.161203,-7.474577,-8.380609,-1.036062,-9.067657],[-0.200897,0.302384,-2.095693,-6.832112,5.912151,-2.101593,-6.171687,6.675327,0.617490]],[[-0.270773,-3.249470,-1.737285,4.438723,6.309018,-4.281871,-0.082880,-8.106482,7.668649],[9.236525,5.999297,2.746361,6.386391,-5.967116,-1.151537,6.239786,6.419569,8.420767],[1.330565,-5.743881,-4.263324,-4.754888,-9.576385,-4.181430,-3.924322,3.467165,-0.165246],[0.502820,-6.933166,-9.077593,9.284205,5.008298,-5.969690,-7.865470,8.288760,-9.563818],[-2.771798,9.846624,0.824115,-3.773866,6.916532,5.906769,-2.009583,0.285578,-0.657836],[-3.590570,-2.901232,1.363345,-4.774514,-6.867087,-5.144743,-2.907953,0.891061,3.054724],[8.929361,-0.666561,5.143229,8.277654,-8.341578,-9.824143,-1.971988,7.368387,7.764751],[2.707299,-7.758094,1.358759,-7.134042,3.871200,2.727535,-1.978424,2.276261,-0.556891],[8.070080,-6.961252,-7.360987,-9.416766,6.481876,4.009769,-5.137282,9.245893,-5.595311],[-8.550268,-5.095864,6.188127,-3.138634,-8.985823,-4.902466,7.233266,-7.810041,-9.035286],[-3.526964,-9.720426,-0.643163,-4.407753,-3.937083,6.507112,8.504556,-6.957793,-7.511559],[7.394562,9.584815,-7.248809,-2.691525,4.173053,9.346322,-3.028420,6.694140,-2.646270],[-8.893992,-4.282314,-1.686598,-9.152991,5.456901,3.343710,-6.398164,7.310547,-6.035696],[4.984060,9.156051,-6.428218,-1.203028,-1.103660,1.325686,9.494090,-7.767535,-7.293478]],[[-8.990399,-1.707648,5.818911,4.967278,-7.206744,-5.315855,-6.427932,-0.951060,-6.122838],[-9.784573,1.011004,-4.456496,7.858430,-4.627443,-1.039069,-3.921875,9.566620,-4.101224],[-4.323227,-6.475065,-6.099887,-5.316018,7.771014,-3.669831,4.687075,-0.074725,-7.053322],[2.984683,6.453476,2.727190,-8.492946,-2.299830,-6.497462,4.358676,-1.632160,1.200631],[-4.867332,1.556619,-0.545053,9.035637,-7.606310,-7.813910,0.493814,5.124609,-6.800066],[-7.143794,-7.690388,-1.899521,1.963886,-3.687038,-1.269471,8.195423,2.529087,-2.331680],[-6.352586,4.734079,5.382869,6.853201,2.518730,3.272212,1.549776,-7.709107,-3.408890],[-9.047875,-9.475522,9.922219,7.788371,3.376332,8.287522,-2.407257,-9.537991,4.620300],[-2.241665,-7.896256,7.206330,5.342429,2.121983,-5.235296,-8.880106,7.201565,2.590575],[0.320454,8.092991,6.837229,-2.587495,0.939980,2.093873,4.461555,1.726165,5.309502],[0.184760,-3.398659,7.357730,7.006502,7.375362,-6.422528,4.039342,3.711475,7.333580],[-9.243004,6.691889,-4.352161,-2.648718,-6.450516,5.526270,-8.607470,-7.894402,8.959458],[6.618498,0.597541,6.824464,-0.586862,-7.896124,-4.356756,-8.262610,3.945651,-4.062932],[6.516682,4.007446,-6.188334,9.958563,-8.455077,1.650571,5.096681,-2.311619,-2.268842]],[[1.510945,-0.250366,-3.640114,2.649740,3.947640,-1.133800,-8.413109,-9.242629,2.271547],[-8.420259,9.278514,-6.229675,-5.538666,-0.423323,2.925108,-5.576546,2.597372,-9.605578],[3.363502,-3.381209,-1.708962,-0.305106,-4.692416,8.011398,-1.633669,4.505844,-2.643624],[-2.060484,7.227295,9.922962,6.398110,7.526089,-1.457947,0.709900,5.567748,8.493474],[-3.721711,-5.673080,-1.863016,6.908440,2.532179,6.013177,-8.143437,-4.121510,-8.529041],[-8.375025,-1.869339,-6.482285,3.917527,-8.380117,2.962284,7.461700,-5.388163,6.177629],[1.128095,8.917867,8.965144,-6.602801,-5.290096,7.961377,-4.741317,6.001466,-8.436579],[6.149662,9.112688,-5.810137,2.830499,-3.604039,-1.297903,3.362264,-3.342261,-7.852081],[4.630535,-9.167301,-3.041204,-8.205401,0.666186,3.831556,1.823925,-4.401796,-9.632640],[6.512368,-8.368265,4.566860,5.971598,-3.198200,0.220213,0.900261,1.792588,5.311340],[-7.841514,-2.265498,9.413534,0.713982,-2.132891,3.148918,-4.942387,3.000633,-3.598174],[5.514355,3.912078,-2.781937,4.762030,5.090899,3.443250,-5.710823,-1.970839,1.088118],[-3.731702,-5.987787,-0.611928,3.089673,-7.183124,2.815018,-2.081438,2.877082,-7.325143],[-7.623080,1.499859,-6.202153,-6.790490,-3.866466,7.082891,-4.502651,-0.464925,7.081887]],[[-7.727208,-8.814092,1.673471,-6.965146,-2.977102,1.448261,5.406977,-8.477020,6.739225],[4.204169,2.030128,-7.195309,5.016869,-0.342842,8.108144,4.423945,5.290139,-8.048190],[3.119985,-6.317918,-0.168266,5.081851,6.657223,1.202241,-3.120590,5.423431,-9.269021],[3.101424,-0.319785,-8.013739,7.310872,-0.853701,4.049097,0.662665,3.540375,-4.118366],[9.634358,1.253431,-6.525329,9.917185,7.199338,-4.965213,-1.253829,4.546172,-9.292059],[-7.857240,0.541572,-2.906257,9.578033,-0.948160,9.125913,4.269111,-7.882304,6.609668],[8.055775,1.016200,0.218260,-5.082135,8.637212,3.036480,1.916081,4.389010,-8.194920],[3.289299,3.465244,-0.391178,7.018659,2.917617,-4.477195,-3.157494,4.673905,-7.147897],[3.428897,-9.459595,-8.372854,-1.423937,1.506600,2.219005,0.363399,-3.997355,-4.377030],[4.581182,-5.581154,6.363725,-1.727703,-0.609280,4.212928,-4.169949,3.920591,-4.232504],[-5.903749,-3.048820,-1.304608,2.750009,-5.503085,5.903475,-3.529630,-9.187030,9.701985],[8.958832,4.125595,-0.373519,-3.775702,-9.786417,2.621739,-7.199273,3.858214,-0.489919],[-7.093646,-4.586926,5.303338,6.361718,-6.540774,-8.926552,3.263454,2.172188,1.371014],[8.348670,5.955202,7.687629,-6.098632,-0.534714,-8.531530,-1.416851,0.860320,-3.802588]]], dtype = "float64")#candidate|19690|(13, 14, 9)|const|float64
uop_19691 = relay.log(const_19690.astype('float64')) # shape=(13, 14, 9)
output = relay.Tuple([uop_19691,])
output2 = relay.Tuple([uop_19691,])
func_19702 = relay.Function([], output)
mod['func_19702'] = func_19702
mod = relay.transform.InferType()(mod)
mutated_mod['func_19702'] = func_19702
mutated_mod = relay.transform.InferType()(mutated_mod)
func_19702_call = mutated_mod.get_global_var('func_19702')
call_19703 = func_19702_call()
output = call_19703
func_19704 = relay.Function([], output)
mutated_mod['func_19704'] = func_19704
mutated_mod = relay.transform.InferType()(mutated_mod)
func_18125_call = mod.get_global_var('func_18125')
func_18127_call = mutated_mod.get_global_var('func_18127')
call_19750 = func_18125_call()
call_19751 = func_18125_call()
output = call_19750
output2 = call_19751
func_19754 = relay.Function([], output)
mod['func_19754'] = func_19754
mod = relay.transform.InferType()(mod)
output = func_19754()
func_19755 = relay.Function([], output)
mutated_mod['func_19755'] = func_19755
mutated_mod = relay.transform.InferType()(mutated_mod)
func_15522_call = mod.get_global_var('func_15522')
func_15523_call = mutated_mod.get_global_var('func_15523')
call_19788 = func_15522_call()
call_19789 = func_15522_call()
output = relay.Tuple([call_19788,])
output2 = relay.Tuple([call_19789,])
func_19794 = relay.Function([], output)
mod['func_19794'] = func_19794
mod = relay.transform.InferType()(mod)
output = func_19794()
func_19795 = relay.Function([], output)
mutated_mod['func_19795'] = func_19795
mutated_mod = relay.transform.InferType()(mutated_mod)
func_17263_call = mod.get_global_var('func_17263')
func_17264_call = mutated_mod.get_global_var('func_17264')
call_19802 = relay.TupleGetItem(func_17263_call(), 0)
call_19803 = relay.TupleGetItem(func_17264_call(), 0)
output = call_19802
output2 = call_19803
func_19806 = relay.Function([], output)
mod['func_19806'] = func_19806
mod = relay.transform.InferType()(mod)
mutated_mod['func_19806'] = func_19806
mutated_mod = relay.transform.InferType()(mutated_mod)
func_19806_call = mutated_mod.get_global_var('func_19806')
call_19807 = func_19806_call()
output = call_19807
func_19808 = relay.Function([], output)
mutated_mod['func_19808'] = func_19808
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6833_call = mod.get_global_var('func_6833')
func_6835_call = mutated_mod.get_global_var('func_6835')
call_19841 = relay.TupleGetItem(func_6833_call(), 0)
call_19842 = relay.TupleGetItem(func_6835_call(), 0)
func_15522_call = mod.get_global_var('func_15522')
func_15523_call = mutated_mod.get_global_var('func_15523')
call_19877 = func_15522_call()
call_19878 = func_15522_call()
output = relay.Tuple([call_19841,call_19877,])
output2 = relay.Tuple([call_19842,call_19878,])
func_19884 = relay.Function([], output)
mod['func_19884'] = func_19884
mod = relay.transform.InferType()(mod)
mutated_mod['func_19884'] = func_19884
mutated_mod = relay.transform.InferType()(mutated_mod)
func_19884_call = mutated_mod.get_global_var('func_19884')
call_19885 = func_19884_call()
output = call_19885
func_19886 = relay.Function([], output)
mutated_mod['func_19886'] = func_19886
mutated_mod = relay.transform.InferType()(mutated_mod)
func_18171_call = mod.get_global_var('func_18171')
func_18173_call = mutated_mod.get_global_var('func_18173')
call_19899 = relay.TupleGetItem(func_18171_call(), 1)
call_19900 = relay.TupleGetItem(func_18173_call(), 1)
func_7825_call = mod.get_global_var('func_7825')
func_7827_call = mutated_mod.get_global_var('func_7827')
call_19907 = relay.TupleGetItem(func_7825_call(), 0)
call_19908 = relay.TupleGetItem(func_7827_call(), 0)
func_16161_call = mod.get_global_var('func_16161')
func_16162_call = mutated_mod.get_global_var('func_16162')
call_19920 = relay.TupleGetItem(func_16161_call(), 0)
call_19921 = relay.TupleGetItem(func_16162_call(), 0)
func_16205_call = mod.get_global_var('func_16205')
func_16207_call = mutated_mod.get_global_var('func_16207')
call_19925 = func_16205_call()
call_19926 = func_16205_call()
func_18677_call = mod.get_global_var('func_18677')
func_18678_call = mutated_mod.get_global_var('func_18678')
call_19932 = func_18677_call()
call_19933 = func_18677_call()
func_4584_call = mod.get_global_var('func_4584')
func_4586_call = mutated_mod.get_global_var('func_4586')
var_19937 = relay.var("var_19937", dtype = "int32", shape = (56, 26))#candidate|19937|(56, 26)|var|int32
call_19936 = func_4584_call(relay.reshape(var_19937.astype('int32'), [14, 13, 8]))
call_19938 = func_4584_call(relay.reshape(var_19937.astype('int32'), [14, 13, 8]))
output = relay.Tuple([call_19899,call_19907,call_19920,call_19925,call_19932,call_19936,var_19937,])
output2 = relay.Tuple([call_19900,call_19908,call_19921,call_19926,call_19933,call_19938,var_19937,])
func_19941 = relay.Function([var_19937,], output)
mod['func_19941'] = func_19941
mod = relay.transform.InferType()(mod)
mutated_mod['func_19941'] = func_19941
mutated_mod = relay.transform.InferType()(mutated_mod)
var_19942 = relay.var("var_19942", dtype = "int32", shape = (56, 26))#candidate|19942|(56, 26)|var|int32
func_19941_call = mutated_mod.get_global_var('func_19941')
call_19943 = func_19941_call(var_19942)
output = call_19943
func_19944 = relay.Function([var_19942], output)
mutated_mod['func_19944'] = func_19944
mutated_mod = relay.transform.InferType()(mutated_mod)
var_19991 = relay.var("var_19991", dtype = "float64", shape = (4, 1, 2))#candidate|19991|(4, 1, 2)|var|float64
uop_19992 = relay.log10(var_19991.astype('float64')) # shape=(4, 1, 2)
output = uop_19992
output2 = uop_19992
func_20027 = relay.Function([var_19991,], output)
mod['func_20027'] = func_20027
mod = relay.transform.InferType()(mod)
var_20028 = relay.var("var_20028", dtype = "float64", shape = (4, 1, 2))#candidate|20028|(4, 1, 2)|var|float64
output = func_20027(var_20028)
func_20029 = relay.Function([var_20028], output)
mutated_mod['func_20029'] = func_20029
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14760_call = mod.get_global_var('func_14760')
func_14762_call = mutated_mod.get_global_var('func_14762')
call_20140 = relay.TupleGetItem(func_14760_call(), 0)
call_20141 = relay.TupleGetItem(func_14762_call(), 0)
func_17358_call = mod.get_global_var('func_17358')
func_17360_call = mutated_mod.get_global_var('func_17360')
call_20142 = relay.TupleGetItem(func_17358_call(), 0)
call_20143 = relay.TupleGetItem(func_17360_call(), 0)
func_10453_call = mod.get_global_var('func_10453')
func_10454_call = mutated_mod.get_global_var('func_10454')
call_20146 = func_10453_call()
call_20147 = func_10453_call()
func_16742_call = mod.get_global_var('func_16742')
func_16744_call = mutated_mod.get_global_var('func_16744')
call_20151 = func_16742_call()
call_20152 = func_16742_call()
func_18611_call = mod.get_global_var('func_18611')
func_18613_call = mutated_mod.get_global_var('func_18613')
call_20171 = relay.TupleGetItem(func_18611_call(), 1)
call_20172 = relay.TupleGetItem(func_18613_call(), 1)
uop_20215 = relay.cosh(call_20171.astype('float32')) # shape=(10, 8, 5)
uop_20217 = relay.cosh(call_20172.astype('float32')) # shape=(10, 8, 5)
output = relay.Tuple([call_20140,call_20142,call_20146,call_20151,uop_20215,])
output2 = relay.Tuple([call_20141,call_20143,call_20147,call_20152,uop_20217,])
func_20233 = relay.Function([], output)
mod['func_20233'] = func_20233
mod = relay.transform.InferType()(mod)
mutated_mod['func_20233'] = func_20233
mutated_mod = relay.transform.InferType()(mutated_mod)
func_20233_call = mutated_mod.get_global_var('func_20233')
call_20234 = func_20233_call()
output = call_20234
func_20235 = relay.Function([], output)
mutated_mod['func_20235'] = func_20235
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14128_call = mod.get_global_var('func_14128')
func_14130_call = mutated_mod.get_global_var('func_14130')
call_20287 = func_14128_call()
call_20288 = func_14128_call()
func_17263_call = mod.get_global_var('func_17263')
func_17264_call = mutated_mod.get_global_var('func_17264')
call_20294 = relay.TupleGetItem(func_17263_call(), 0)
call_20295 = relay.TupleGetItem(func_17264_call(), 0)
output = relay.Tuple([call_20287,call_20294,])
output2 = relay.Tuple([call_20288,call_20295,])
func_20296 = relay.Function([], output)
mod['func_20296'] = func_20296
mod = relay.transform.InferType()(mod)
output = func_20296()
func_20297 = relay.Function([], output)
mutated_mod['func_20297'] = func_20297
mutated_mod = relay.transform.InferType()(mutated_mod)
func_19754_call = mod.get_global_var('func_19754')
func_19755_call = mutated_mod.get_global_var('func_19755')
call_20300 = func_19754_call()
call_20301 = func_19754_call()
output = relay.Tuple([call_20300,])
output2 = relay.Tuple([call_20301,])
func_20311 = relay.Function([], output)
mod['func_20311'] = func_20311
mod = relay.transform.InferType()(mod)
mutated_mod['func_20311'] = func_20311
mutated_mod = relay.transform.InferType()(mutated_mod)
func_20311_call = mutated_mod.get_global_var('func_20311')
call_20312 = func_20311_call()
output = call_20312
func_20313 = relay.Function([], output)
mutated_mod['func_20313'] = func_20313
mutated_mod = relay.transform.InferType()(mutated_mod)
func_17307_call = mod.get_global_var('func_17307')
func_17308_call = mutated_mod.get_global_var('func_17308')
call_20339 = func_17307_call()
call_20340 = func_17307_call()
func_17333_call = mod.get_global_var('func_17333')
func_17335_call = mutated_mod.get_global_var('func_17335')
call_20344 = relay.TupleGetItem(func_17333_call(), 0)
call_20345 = relay.TupleGetItem(func_17335_call(), 0)
output = relay.Tuple([call_20339,call_20344,])
output2 = relay.Tuple([call_20340,call_20345,])
func_20346 = relay.Function([], output)
mod['func_20346'] = func_20346
mod = relay.transform.InferType()(mod)
mutated_mod['func_20346'] = func_20346
mutated_mod = relay.transform.InferType()(mutated_mod)
func_20346_call = mutated_mod.get_global_var('func_20346')
call_20347 = func_20346_call()
output = call_20347
func_20348 = relay.Function([], output)
mutated_mod['func_20348'] = func_20348
mutated_mod = relay.transform.InferType()(mutated_mod)
func_17066_call = mod.get_global_var('func_17066')
func_17068_call = mutated_mod.get_global_var('func_17068')
call_20363 = func_17066_call()
call_20364 = func_17066_call()
func_17307_call = mod.get_global_var('func_17307')
func_17308_call = mutated_mod.get_global_var('func_17308')
call_20365 = func_17307_call()
call_20366 = func_17307_call()
func_18964_call = mod.get_global_var('func_18964')
func_18967_call = mutated_mod.get_global_var('func_18967')
var_20372 = relay.var("var_20372", dtype = "int32", shape = (168,))#candidate|20372|(168,)|var|int32
call_20371 = relay.TupleGetItem(func_18964_call(relay.reshape(var_20372.astype('int32'), [2, 14, 6]), relay.reshape(var_20372.astype('int32'), [2, 14, 6]), ), 0)
call_20373 = relay.TupleGetItem(func_18967_call(relay.reshape(var_20372.astype('int32'), [2, 14, 6]), relay.reshape(var_20372.astype('int32'), [2, 14, 6]), ), 0)
func_10738_call = mod.get_global_var('func_10738')
func_10740_call = mutated_mod.get_global_var('func_10740')
call_20382 = relay.TupleGetItem(func_10738_call(), 1)
call_20383 = relay.TupleGetItem(func_10740_call(), 1)
output = relay.Tuple([call_20363,call_20365,call_20371,var_20372,call_20382,])
output2 = relay.Tuple([call_20364,call_20366,call_20373,var_20372,call_20383,])
func_20389 = relay.Function([var_20372,], output)
mod['func_20389'] = func_20389
mod = relay.transform.InferType()(mod)
mutated_mod['func_20389'] = func_20389
mutated_mod = relay.transform.InferType()(mutated_mod)
var_20390 = relay.var("var_20390", dtype = "int32", shape = (168,))#candidate|20390|(168,)|var|int32
func_20389_call = mutated_mod.get_global_var('func_20389')
call_20391 = func_20389_call(var_20390)
output = call_20391
func_20392 = relay.Function([var_20390], output)
mutated_mod['func_20392'] = func_20392
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14627_call = mod.get_global_var('func_14627')
func_14628_call = mutated_mod.get_global_var('func_14628')
call_20437 = func_14627_call()
call_20438 = func_14627_call()
output = relay.Tuple([call_20437,])
output2 = relay.Tuple([call_20438,])
func_20449 = relay.Function([], output)
mod['func_20449'] = func_20449
mod = relay.transform.InferType()(mod)
output = func_20449()
func_20450 = relay.Function([], output)
mutated_mod['func_20450'] = func_20450
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13110_call = mod.get_global_var('func_13110')
func_13112_call = mutated_mod.get_global_var('func_13112')
call_20530 = func_13110_call()
call_20531 = func_13110_call()
output = relay.Tuple([call_20530,])
output2 = relay.Tuple([call_20531,])
func_20532 = relay.Function([], output)
mod['func_20532'] = func_20532
mod = relay.transform.InferType()(mod)
mutated_mod['func_20532'] = func_20532
mutated_mod = relay.transform.InferType()(mutated_mod)
func_20532_call = mutated_mod.get_global_var('func_20532')
call_20533 = func_20532_call()
output = call_20533
func_20534 = relay.Function([], output)
mutated_mod['func_20534'] = func_20534
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12683_call = mod.get_global_var('func_12683')
func_12684_call = mutated_mod.get_global_var('func_12684')
call_20535 = func_12683_call()
call_20536 = func_12683_call()
func_11449_call = mod.get_global_var('func_11449')
func_11451_call = mutated_mod.get_global_var('func_11451')
const_20615 = relay.const([[3.195133,-9.471818,3.352983,-7.473755,-2.485094,5.463419,-4.500975,-7.008716,5.788389,3.787417,-2.904952,-9.313159,9.380886,4.948561,7.895888,6.983309,-7.546170,2.959165,2.427781,-1.991544,6.593038,9.543433,-5.056435,3.531652,6.119557,6.288470,9.930694,6.107583,-5.604377,9.805481,4.010762,-7.100620,-8.191134,8.549296,7.548837,4.131427,-7.277155,-9.533947,7.568821,-9.520028,-8.153437,-0.788625,0.817472,-8.357366,5.015476,1.373901,-3.282086,-2.302269,5.794604,2.215560,1.851569,0.316250,1.252754,-3.881672,-5.710128,8.225285,4.085549,-6.977926,7.183884,-9.689514,-3.208869,1.025242,6.356035,-1.538842,1.721383,5.942055,-1.785110,-5.481644,-7.936997,-7.099738,8.752869,9.123613,-4.332501,6.094306,-7.892074,-6.434190,-9.015132,3.864758,3.319999,-5.224349,0.108083,-8.598247,8.972816,5.939066,1.019245,-1.044451,4.833410,1.143384,4.098227,7.735145,-9.722728,5.362481,9.931930,-2.336995,-9.649077,-1.458437,-7.691450,6.376629,8.159491,2.272943,9.528195,-2.080905,6.781563,-7.908732,-9.761359,-6.339484,5.418626,0.528321,2.690916,5.826101,8.989130,2.160008]], dtype = "float32")#candidate|20615|(1, 112)|const|float32
call_20614 = relay.TupleGetItem(func_11449_call(relay.reshape(const_20615.astype('float32'), [112, 1])), 0)
call_20616 = relay.TupleGetItem(func_11451_call(relay.reshape(const_20615.astype('float32'), [112, 1])), 0)
func_18577_call = mod.get_global_var('func_18577')
func_18579_call = mutated_mod.get_global_var('func_18579')
const_20618 = relay.const([[9.459866,-2.264407,6.421475,5.571770,-9.253263,6.067885,-2.841107,4.699002,-1.592713,-2.046577,-1.515832,9.715464,-9.694100,-4.472440,-9.469535,4.938514,1.820867,7.788316,-8.253832,7.151614,-0.349667,-2.636280,2.334502,-2.838622,5.703620,5.818638,-0.102172,-8.936709,8.260508,6.842431,8.350366,8.788854,-2.803215]], dtype = "float64")#candidate|20618|(1, 33)|const|float64
call_20617 = relay.TupleGetItem(func_18577_call(relay.reshape(const_20618.astype('float64'), [33,])), 5)
call_20619 = relay.TupleGetItem(func_18579_call(relay.reshape(const_20618.astype('float64'), [33,])), 5)
output = relay.Tuple([call_20535,call_20614,const_20615,call_20617,const_20618,])
output2 = relay.Tuple([call_20536,call_20616,const_20615,call_20619,const_20618,])
func_20626 = relay.Function([], output)
mod['func_20626'] = func_20626
mod = relay.transform.InferType()(mod)
output = func_20626()
func_20627 = relay.Function([], output)
mutated_mod['func_20627'] = func_20627
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13519_call = mod.get_global_var('func_13519')
func_13521_call = mutated_mod.get_global_var('func_13521')
call_20701 = relay.TupleGetItem(func_13519_call(), 1)
call_20702 = relay.TupleGetItem(func_13521_call(), 1)
func_6873_call = mod.get_global_var('func_6873')
func_6875_call = mutated_mod.get_global_var('func_6875')
call_20720 = relay.TupleGetItem(func_6873_call(), 0)
call_20721 = relay.TupleGetItem(func_6875_call(), 0)
output = relay.Tuple([call_20701,call_20720,])
output2 = relay.Tuple([call_20702,call_20721,])
func_20723 = relay.Function([], output)
mod['func_20723'] = func_20723
mod = relay.transform.InferType()(mod)
mutated_mod['func_20723'] = func_20723
mutated_mod = relay.transform.InferType()(mutated_mod)
func_20723_call = mutated_mod.get_global_var('func_20723')
call_20724 = func_20723_call()
output = call_20724
func_20725 = relay.Function([], output)
mutated_mod['func_20725'] = func_20725
mutated_mod = relay.transform.InferType()(mutated_mod)
func_15281_call = mod.get_global_var('func_15281')
func_15282_call = mutated_mod.get_global_var('func_15282')
call_20732 = func_15281_call()
call_20733 = func_15281_call()
func_19068_call = mod.get_global_var('func_19068')
func_19070_call = mutated_mod.get_global_var('func_19070')
call_20751 = func_19068_call()
call_20752 = func_19068_call()
func_7714_call = mod.get_global_var('func_7714')
func_7716_call = mutated_mod.get_global_var('func_7716')
call_20753 = func_7714_call()
call_20754 = func_7714_call()
func_18577_call = mod.get_global_var('func_18577')
func_18579_call = mutated_mod.get_global_var('func_18579')
const_20782 = relay.const([4.215815,9.420634,-6.065475,3.135123,-1.652749,1.990274,-6.115682,5.630768,-2.020882,-2.161286,7.225925,-4.878423,-3.272230,3.700654,7.858798,7.813630,-8.101425,-4.481135,7.458647,7.518388,4.075073,6.650171,6.133638,5.067767,-9.281213,-3.713139,7.267021,8.509321,9.505737,4.793681,-9.806524,3.204748,6.122206], dtype = "float64")#candidate|20782|(33,)|const|float64
call_20781 = relay.TupleGetItem(func_18577_call(relay.reshape(const_20782.astype('float64'), [33,])), 1)
call_20783 = relay.TupleGetItem(func_18579_call(relay.reshape(const_20782.astype('float64'), [33,])), 1)
output = relay.Tuple([call_20732,call_20751,call_20753,call_20781,const_20782,])
output2 = relay.Tuple([call_20733,call_20752,call_20754,call_20783,const_20782,])
func_20809 = relay.Function([], output)
mod['func_20809'] = func_20809
mod = relay.transform.InferType()(mod)
output = func_20809()
func_20810 = relay.Function([], output)
mutated_mod['func_20810'] = func_20810
mutated_mod = relay.transform.InferType()(mutated_mod)
func_20233_call = mod.get_global_var('func_20233')
func_20235_call = mutated_mod.get_global_var('func_20235')
call_20820 = relay.TupleGetItem(func_20233_call(), 0)
call_20821 = relay.TupleGetItem(func_20235_call(), 0)
output = relay.Tuple([call_20820,])
output2 = relay.Tuple([call_20821,])
func_20827 = relay.Function([], output)
mod['func_20827'] = func_20827
mod = relay.transform.InferType()(mod)
output = func_20827()
func_20828 = relay.Function([], output)
mutated_mod['func_20828'] = func_20828
mutated_mod = relay.transform.InferType()(mutated_mod)
func_18677_call = mod.get_global_var('func_18677')
func_18678_call = mutated_mod.get_global_var('func_18678')
call_20858 = func_18677_call()
call_20859 = func_18677_call()
output = call_20858
output2 = call_20859
func_20876 = relay.Function([], output)
mod['func_20876'] = func_20876
mod = relay.transform.InferType()(mod)
output = func_20876()
func_20877 = relay.Function([], output)
mutated_mod['func_20877'] = func_20877
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9437_call = mod.get_global_var('func_9437')
func_9439_call = mutated_mod.get_global_var('func_9439')
call_20880 = relay.TupleGetItem(func_9437_call(), 0)
call_20881 = relay.TupleGetItem(func_9439_call(), 0)
func_19239_call = mod.get_global_var('func_19239')
func_19242_call = mutated_mod.get_global_var('func_19242')
const_20910 = relay.const([[7.752563],[4.271707],[-1.240288],[-9.410077],[-1.695242],[7.509362],[5.265957],[-7.089674],[3.666979],[7.781203],[1.834759],[3.397859],[-5.802459],[-7.281237],[-7.978888],[-9.128858],[4.507529],[3.822192],[9.118711],[-6.265242],[7.116655],[-6.070936],[-3.972489],[4.897004],[8.058891],[-0.223607],[-5.884008],[8.367548],[-1.517277],[-7.728160],[-6.528165],[-7.520355],[-6.622530],[7.060877],[2.286887],[9.231132],[0.131494],[2.410694],[-1.529104],[-6.771903],[-4.967599],[-7.910414],[-8.454591],[5.878867],[8.090441],[-0.036207],[-7.887895],[-6.811601],[-9.727537],[9.599979],[8.005313],[9.655129],[-2.948370],[-3.599118],[9.464603],[-3.607008],[0.836875],[-9.866954],[-7.031121],[4.177108],[7.599626],[6.939838],[-8.194414],[-1.369676],[5.691605],[0.225546],[7.344640],[8.507761],[6.751400],[-2.002868],[-7.436452],[-3.874090],[-0.919488],[-4.465021],[0.208792],[-5.012807],[9.424836],[-4.014764],[0.440542],[-3.491147],[-9.541345],[-3.484280],[-8.920375],[6.533659],[8.105579],[-3.829668],[-8.767998],[-0.351139],[-6.778723],[7.406426],[-2.271070],[-7.585160],[3.925549],[2.224228],[-6.261767],[6.557615],[3.791852],[-7.740367],[-1.713362],[-1.532364],[5.060130],[1.315831],[0.053073],[-6.632905],[-5.981100],[2.884103],[-4.224505],[-1.504988],[5.074050],[-4.439949],[-8.388089],[-5.151300],[5.959198],[2.380544],[8.154366],[-2.713513],[7.184463],[-1.932214],[3.812194],[-2.655364],[0.323130],[-3.030369],[8.952137],[8.825326],[-5.765309],[-3.346714],[-3.062400],[7.419522],[7.041965],[7.881729],[-0.547095],[-8.379895],[8.536668],[-4.343297],[7.784990],[0.910004],[4.882725],[-7.254685],[-5.715129],[0.664800],[-1.560090],[9.358374],[-8.861550],[-0.518755],[-8.422206],[-5.754968],[7.276944],[-1.905693],[-9.338550],[2.067428],[6.624489],[-8.793714],[-7.156584],[6.874246],[-8.065616],[-4.877563],[8.771607],[9.843281],[-1.134103],[5.487173],[2.986475],[4.202700],[-7.251476],[-0.653974],[-8.100077],[2.234780],[-7.816154],[-2.411392],[-2.337933],[2.127357],[-7.581903],[5.123860],[-9.426563],[-1.721337],[5.109731],[1.965761],[5.461729],[4.223913],[-5.773329],[-9.465183],[-6.518085],[-1.988574],[2.500412],[0.849752],[-1.836182],[0.598210],[-2.049443],[-6.072440],[0.808026],[2.422814],[8.417438],[-1.367106],[5.203720],[-0.310106],[7.540686],[7.957777],[-8.925304],[-3.622933],[-0.233546],[-2.479870],[-3.874280],[-3.509035],[-2.509691],[4.135123],[4.239758],[-3.643727],[6.787986],[8.240605],[6.284311],[-9.725316],[7.226004],[-6.062164],[4.287488],[3.873131],[-0.348109],[3.654261],[7.822385],[-0.202064],[-3.188501],[-3.412338],[-1.268699],[-8.778689],[9.718803],[0.816563],[-7.531397],[0.543406],[9.617036],[7.649524],[-5.295949],[-3.839438],[-9.815592],[8.590888],[8.655928],[-4.095446],[-3.965254],[3.662396],[0.512377],[-6.594836],[-2.493160],[7.884839],[-2.196081],[-3.422576],[-7.489096],[-4.043867],[-9.547700],[-3.947125],[-4.343793],[3.924011],[7.431347],[-3.548573],[-1.562713],[-5.670830],[6.768299],[-1.625750],[-5.773822],[-8.402737],[-5.569422],[-5.392705],[5.256821],[2.708807],[-7.401681],[-6.132361],[5.482558],[-7.972577],[9.441054],[-4.617644],[8.910644],[-3.418108],[-7.406452],[-2.796082],[-8.449401],[8.743135],[4.763060],[-0.727478],[-4.335909],[-2.797570],[8.351884],[-8.184495],[-1.051412],[3.392642],[8.345058],[3.582520],[-5.325804],[5.141988],[-0.484638],[-7.955599],[0.831284],[2.077612],[3.701887],[8.494959],[9.121300],[-0.301126],[-4.240910],[-3.144902],[-9.010046],[4.624663],[6.247936],[-2.193545],[-1.109237],[-3.567081],[8.703037],[6.731255],[-9.113902],[9.549556],[-3.355990],[-2.467637],[-8.551305],[-1.517682],[4.374522],[-4.752311],[-3.277925],[1.113852],[-3.628954],[-8.409718],[7.629314],[-9.996157],[0.588978],[5.945823],[-7.405949],[5.123317],[2.214375],[4.353522],[8.961786],[0.805968],[-4.237348],[-3.200589],[6.022253],[-0.107313],[8.973913],[-3.380224],[-0.584095],[1.997668],[-5.186483],[6.844286],[0.642784],[-7.127981],[-5.920086],[-7.841007],[7.941975],[-4.686039],[6.936974],[0.441344],[-5.817452],[2.528111],[-8.796807],[4.189648],[-9.632846],[-3.781728],[0.506408],[7.235509],[-9.668206],[-1.337136],[4.008953],[-1.589504],[-9.115053],[-7.987214],[2.844320],[-2.749657],[-5.675018],[0.820944],[8.738975],[1.779060],[4.439245],[-2.060338],[6.776839],[1.316196],[4.117790],[7.978559],[3.615492],[-3.435056],[-7.759681],[5.342780],[-4.119786],[-8.685893],[3.220031],[0.055491],[-4.404860],[-3.395625],[-8.057596],[-4.073683],[8.986236],[1.567517],[1.712795],[3.889188],[0.253364],[-4.758611],[4.408569],[0.051713],[0.101226],[-2.035970],[-7.272759],[4.777522],[-6.685715],[-7.179162],[6.315613],[-4.327701],[6.545160],[7.994667],[-9.620112],[4.737305],[-7.801136],[-1.200530],[6.464137],[0.859547],[8.886927],[-1.055519],[3.190071],[-9.355717],[9.421451],[-4.417149],[8.283046],[4.213392],[5.567481],[-3.294847],[-5.193867],[6.137143],[5.037007],[-3.797629],[3.986370],[-6.460870],[9.348702],[-1.102569],[-0.498664],[-2.343122],[-5.935006],[-0.649798],[9.123580],[-7.927438],[0.234598],[9.856449],[-5.773274],[-4.773686],[-7.406024],[-8.467897],[4.052843],[-7.031228],[4.664216],[0.999476],[7.662863],[-9.734585],[4.843887],[9.404652],[-6.014164],[8.018501],[-7.502143],[2.946559],[5.709913],[3.208186],[-0.508483],[8.155903],[-7.663610],[-9.014913],[7.370756],[7.737257],[0.461193],[-7.809472],[4.673761],[-6.418054],[2.157531],[2.759441],[-2.195512],[-4.785461],[-5.279201],[6.753168],[6.560802],[-3.667264],[-4.831178],[-7.345296],[4.568327],[-7.009822],[0.878032],[9.898232],[-0.706654],[-1.536692],[6.000083],[-0.693364],[6.963449],[4.723824],[-2.132851],[-4.885626],[4.334557],[9.038876],[-8.680887],[9.662133],[9.895939],[-9.257826],[-1.711481],[9.062581],[4.951774],[-3.823638],[8.512218],[-4.655203],[9.208702],[1.530924],[-7.173693],[-9.025934],[-2.867288],[7.196921],[1.789252],[-2.606975],[-7.884238],[8.833808],[-4.313740],[-4.043900],[-1.427597],[-3.301409],[0.424395],[-2.495919],[-9.628127],[-1.310665],[-3.003386],[9.317173],[-7.526195],[7.186092],[6.247126],[-0.285119],[-5.598166],[2.749015],[7.590666],[4.398302],[-2.934478],[1.120007],[-7.522169],[6.436948],[7.079290],[-4.391803],[-1.267687],[9.075434],[-2.301150],[-3.914434],[-3.392435],[-8.918550],[-3.514981],[-4.425997],[0.133455],[8.088972],[7.085803],[2.357214],[9.657913],[2.143759],[-0.043445],[-3.126746],[3.180826],[2.894312],[-7.557137],[8.878012],[-7.736816],[5.277271],[7.858829],[-9.701092],[9.406112],[6.713985],[2.001812],[4.368575],[9.595876],[8.115496],[-9.904653],[-3.694020],[0.007085],[0.420412],[3.470687],[3.736016],[-6.558265],[-4.746108],[-0.643095],[-5.841605],[-0.106132],[-9.692388],[-9.728390],[-6.157527],[-7.331022],[1.152997],[6.795500],[-1.252863],[7.849504],[-6.380253],[6.558219],[5.485349],[3.763972],[5.452611],[-1.562338],[6.942614],[6.254246],[-2.920618],[4.740843],[2.390555],[0.059832],[-2.036749],[-4.376848],[0.626057],[3.833617],[-3.683744],[3.781249],[-0.871079],[4.045547],[-7.766106],[-2.134098],[6.653396],[-4.538495],[5.094536],[-7.321651],[9.228437],[-6.676822],[0.227160],[4.137783],[-4.842844],[-0.642133],[6.969915],[-6.229189],[-2.460755],[1.040665],[-9.809859],[9.511246],[-1.914916],[6.232415],[7.846429],[-9.465137],[0.219899],[9.250105],[-5.143656],[-1.837833],[0.643008],[8.649429],[-2.510512],[-9.275352],[-7.875670],[-1.322005],[8.923918],[-0.573775],[0.388333],[-2.727694],[1.724697],[8.952716],[6.539485],[3.146808],[5.366733],[-9.504150],[9.476647],[2.384975],[-7.263384],[-9.749188],[-2.785741],[0.908955],[-8.396458],[1.037418],[2.336816],[3.624471],[-6.062568],[-8.616857],[5.760664],[8.684404],[9.449729],[0.158290],[-7.853198],[-4.179643],[-8.555950],[5.518112],[6.247587],[4.763998],[-6.994402],[8.146204],[-4.224776],[-7.894803],[-2.627568],[-5.214370],[2.690567],[-5.198356],[6.352786],[1.121040],[5.649195],[-2.498239],[-6.662029],[-3.328412],[-5.308649],[-0.442486],[-6.766727],[1.953875],[-0.458346],[4.730651],[-3.261617],[-5.895107],[-9.729447],[-1.244116],[-4.269152],[5.423176],[9.862504],[9.890890],[7.560469],[-8.810647],[3.109891],[-0.764180],[-6.795187],[-6.692624],[4.315778],[0.278793],[7.629315],[7.729579],[1.744546],[-8.138014],[6.851534],[1.579073],[3.223932],[5.157112],[-9.893517],[3.179309],[-0.280805],[0.461262],[1.812870],[7.149152],[2.381940],[-1.868396],[-4.391016],[-2.946253],[4.844220],[4.132864],[-5.267929],[0.242016],[3.134763],[-5.930447],[-8.229860],[-4.422593],[9.067423],[-1.762618],[6.263738],[-2.620158],[-0.649475],[-8.025633],[-7.282046],[-6.873426],[1.801084],[0.139466],[-7.264359],[9.291582],[3.709364],[2.224638],[9.573894],[-3.545870],[0.387229],[0.619389],[-7.880868],[-3.262813],[-6.846509],[0.892220],[4.484230],[-7.397202],[6.736880],[7.691550],[0.719094],[8.463357],[-1.655362],[-3.210986],[-6.918347],[4.075070],[3.723420],[4.680664],[-7.721322],[7.784978],[-6.710603],[5.620309],[-7.584879],[-6.774972],[0.417078],[-3.347669],[-1.002133],[5.049933],[-3.370850],[9.273194],[-9.988434],[2.502765],[7.087680],[3.904081],[-5.044312],[8.832962],[1.950872],[-0.543295],[-0.240659],[5.509308],[-5.467225],[-0.765196],[-2.236032],[-0.387319],[-8.680538],[0.969066],[-7.666362],[-1.349932],[1.156844],[7.500207],[-6.927764],[-6.693124],[1.214916],[-1.925623],[2.960621],[-2.950486],[0.093930],[4.661740],[-4.809478],[-8.537147],[9.925756],[-6.519472],[-3.682143],[5.281194],[-7.914202],[1.804010],[7.728096],[4.857229],[8.907158],[3.353216],[2.023925],[-0.375474],[-1.643429],[-1.239218],[7.590633],[9.965856],[5.570030],[-8.299180],[2.854101],[1.559441],[-5.917954],[-6.885369],[4.949137],[3.418345],[0.468114],[3.982255],[-1.119118],[5.361010],[0.624129],[7.362716],[9.197674],[1.137265],[-9.255959],[-0.918137],[-2.916262],[-1.404457],[4.223906],[-9.404453],[-5.027248],[0.317857],[-6.193220],[-3.361009],[-0.184289],[-3.415809],[-8.922558],[8.626008],[-4.290579],[-1.302808],[-4.046618],[-5.421571],[-0.118862],[-0.696021],[-4.607159],[-0.083246],[-2.526179],[-6.091492],[8.421093],[9.179230],[5.852348],[4.517784],[9.780346],[9.564623],[-9.457057],[8.905994],[-0.200275],[9.989838],[-6.488914],[-0.349505],[-3.686170],[3.758584],[-8.807680],[-4.191089],[-9.426237],[-4.409718],[3.136533],[2.705246],[-5.169382],[-9.670304],[-2.751305],[8.670819],[-0.988522],[-4.844310],[-0.882688],[5.011620],[9.450766],[5.983510],[-9.736659],[4.633595],[4.201489],[-5.091058],[-4.196903],[-3.368279],[-2.580104],[1.342395],[-7.210750],[-4.878862],[6.901848],[1.168112],[8.803276],[-1.034158],[3.502497],[5.468229],[2.897965],[-8.626595],[-7.725133],[5.871152],[4.046253],[4.723394],[5.096521],[-4.917690],[7.441816],[-2.068984],[7.246483],[9.418474],[-6.680205],[-8.302871],[9.623932],[0.785774],[-3.803483],[-3.385800],[8.811725],[7.679949],[8.140022],[-7.121475],[6.786184],[-6.397396],[8.982549],[0.150227],[-9.979212],[-9.045046],[5.551204],[-0.417683],[-8.325448],[2.934308],[2.653046],[0.834279],[-4.652770],[1.542281],[1.155528],[-2.068895],[3.596005],[6.986340],[0.094156],[2.943566],[2.219964],[-3.047669],[-4.308437],[-8.763992],[-5.394480],[-4.121402],[4.827119],[-9.945925],[-9.614957],[4.978760],[-2.557677],[5.077015],[-4.485976],[-8.394463],[3.205518],[0.259434],[3.127081],[1.262624],[-7.547142],[-1.323993],[-5.000017],[-1.562739],[-9.930014],[2.214184],[3.821356],[-6.929171],[-1.819627]], dtype = "float32")#candidate|20910|(968, 1)|const|float32
call_20909 = relay.TupleGetItem(func_19239_call(relay.reshape(const_20910.astype('float32'), [8, 11, 11])), 0)
call_20911 = relay.TupleGetItem(func_19242_call(relay.reshape(const_20910.astype('float32'), [8, 11, 11])), 0)
bop_20924 = relay.bitwise_or(const_20910.astype('uint64'), call_20880.astype('uint64')) # shape=(968, 1920)
bop_20927 = relay.bitwise_or(const_20910.astype('uint64'), call_20881.astype('uint64')) # shape=(968, 1920)
output = relay.Tuple([call_20909,bop_20924,])
output2 = relay.Tuple([call_20911,bop_20927,])
func_20931 = relay.Function([], output)
mod['func_20931'] = func_20931
mod = relay.transform.InferType()(mod)
mutated_mod['func_20931'] = func_20931
mutated_mod = relay.transform.InferType()(mutated_mod)
func_20931_call = mutated_mod.get_global_var('func_20931')
call_20932 = func_20931_call()
output = call_20932
func_20933 = relay.Function([], output)
mutated_mod['func_20933'] = func_20933
mutated_mod = relay.transform.InferType()(mutated_mod)
func_12003_call = mod.get_global_var('func_12003')
func_12004_call = mutated_mod.get_global_var('func_12004')
call_20934 = func_12003_call()
call_20935 = func_12003_call()
func_19754_call = mod.get_global_var('func_19754')
func_19755_call = mutated_mod.get_global_var('func_19755')
call_20940 = func_19754_call()
call_20941 = func_19754_call()
output = relay.Tuple([call_20934,call_20940,])
output2 = relay.Tuple([call_20935,call_20941,])
func_20944 = relay.Function([], output)
mod['func_20944'] = func_20944
mod = relay.transform.InferType()(mod)
output = func_20944()
func_20945 = relay.Function([], output)
mutated_mod['func_20945'] = func_20945
mutated_mod = relay.transform.InferType()(mutated_mod)
func_18340_call = mod.get_global_var('func_18340')
func_18341_call = mutated_mod.get_global_var('func_18341')
call_21043 = relay.TupleGetItem(func_18340_call(), 0)
call_21044 = relay.TupleGetItem(func_18341_call(), 0)
func_10885_call = mod.get_global_var('func_10885')
func_10886_call = mutated_mod.get_global_var('func_10886')
call_21056 = relay.TupleGetItem(func_10885_call(), 0)
call_21057 = relay.TupleGetItem(func_10886_call(), 0)
output = relay.Tuple([call_21043,call_21056,])
output2 = relay.Tuple([call_21044,call_21057,])
func_21084 = relay.Function([], output)
mod['func_21084'] = func_21084
mod = relay.transform.InferType()(mod)
output = func_21084()
func_21085 = relay.Function([], output)
mutated_mod['func_21085'] = func_21085
mutated_mod = relay.transform.InferType()(mutated_mod)
func_20931_call = mod.get_global_var('func_20931')
func_20933_call = mutated_mod.get_global_var('func_20933')
call_21109 = relay.TupleGetItem(func_20931_call(), 1)
call_21110 = relay.TupleGetItem(func_20933_call(), 1)
uop_21117 = relay.sinh(call_21109.astype('float64')) # shape=(968, 1920)
uop_21119 = relay.sinh(call_21110.astype('float64')) # shape=(968, 1920)
output = uop_21117
output2 = uop_21119
func_21126 = relay.Function([], output)
mod['func_21126'] = func_21126
mod = relay.transform.InferType()(mod)
mutated_mod['func_21126'] = func_21126
mutated_mod = relay.transform.InferType()(mutated_mod)
func_21126_call = mutated_mod.get_global_var('func_21126')
call_21127 = func_21126_call()
output = call_21127
func_21128 = relay.Function([], output)
mutated_mod['func_21128'] = func_21128
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14041_call = mod.get_global_var('func_14041')
func_14042_call = mutated_mod.get_global_var('func_14042')
call_21207 = func_14041_call()
call_21208 = func_14041_call()
output = relay.Tuple([call_21207,])
output2 = relay.Tuple([call_21208,])
func_21222 = relay.Function([], output)
mod['func_21222'] = func_21222
mod = relay.transform.InferType()(mod)
output = func_21222()
func_21223 = relay.Function([], output)
mutated_mod['func_21223'] = func_21223
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14453_call = mod.get_global_var('func_14453')
func_14454_call = mutated_mod.get_global_var('func_14454')
call_21332 = relay.TupleGetItem(func_14453_call(), 0)
call_21333 = relay.TupleGetItem(func_14454_call(), 0)
output = relay.Tuple([call_21332,])
output2 = relay.Tuple([call_21333,])
func_21345 = relay.Function([], output)
mod['func_21345'] = func_21345
mod = relay.transform.InferType()(mod)
mutated_mod['func_21345'] = func_21345
mutated_mod = relay.transform.InferType()(mutated_mod)
func_21345_call = mutated_mod.get_global_var('func_21345')
call_21346 = func_21345_call()
output = call_21346
func_21347 = relay.Function([], output)
mutated_mod['func_21347'] = func_21347
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13731_call = mod.get_global_var('func_13731')
func_13733_call = mutated_mod.get_global_var('func_13733')
call_21385 = func_13731_call()
call_21386 = func_13731_call()
output = relay.Tuple([call_21385,])
output2 = relay.Tuple([call_21386,])
func_21394 = relay.Function([], output)
mod['func_21394'] = func_21394
mod = relay.transform.InferType()(mod)
output = func_21394()
func_21395 = relay.Function([], output)
mutated_mod['func_21395'] = func_21395
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7968_call = mod.get_global_var('func_7968')
func_7969_call = mutated_mod.get_global_var('func_7969')
call_21398 = relay.TupleGetItem(func_7968_call(), 3)
call_21399 = relay.TupleGetItem(func_7969_call(), 3)
output = relay.Tuple([call_21398,])
output2 = relay.Tuple([call_21399,])
func_21402 = relay.Function([], output)
mod['func_21402'] = func_21402
mod = relay.transform.InferType()(mod)
output = func_21402()
func_21403 = relay.Function([], output)
mutated_mod['func_21403'] = func_21403
mutated_mod = relay.transform.InferType()(mutated_mod)
var_21426 = relay.var("var_21426", dtype = "float64", shape = (9, 11, 3))#candidate|21426|(9, 11, 3)|var|float64
uop_21427 = relay.cosh(var_21426.astype('float64')) # shape=(9, 11, 3)
output = relay.Tuple([uop_21427,])
output2 = relay.Tuple([uop_21427,])
func_21450 = relay.Function([var_21426,], output)
mod['func_21450'] = func_21450
mod = relay.transform.InferType()(mod)
mutated_mod['func_21450'] = func_21450
mutated_mod = relay.transform.InferType()(mutated_mod)
var_21451 = relay.var("var_21451", dtype = "float64", shape = (9, 11, 3))#candidate|21451|(9, 11, 3)|var|float64
func_21450_call = mutated_mod.get_global_var('func_21450')
call_21452 = func_21450_call(var_21451)
output = call_21452
func_21453 = relay.Function([var_21451], output)
mutated_mod['func_21453'] = func_21453
mutated_mod = relay.transform.InferType()(mutated_mod)
func_19794_call = mod.get_global_var('func_19794')
func_19795_call = mutated_mod.get_global_var('func_19795')
call_21500 = relay.TupleGetItem(func_19794_call(), 0)
call_21501 = relay.TupleGetItem(func_19795_call(), 0)
output = call_21500
output2 = call_21501
func_21511 = relay.Function([], output)
mod['func_21511'] = func_21511
mod = relay.transform.InferType()(mod)
output = func_21511()
func_21512 = relay.Function([], output)
mutated_mod['func_21512'] = func_21512
mutated_mod = relay.transform.InferType()(mutated_mod)
func_11756_call = mod.get_global_var('func_11756')
func_11757_call = mutated_mod.get_global_var('func_11757')
call_21556 = relay.TupleGetItem(func_11756_call(), 1)
call_21557 = relay.TupleGetItem(func_11757_call(), 1)
output = call_21556
output2 = call_21557
func_21560 = relay.Function([], output)
mod['func_21560'] = func_21560
mod = relay.transform.InferType()(mod)
mutated_mod['func_21560'] = func_21560
mutated_mod = relay.transform.InferType()(mutated_mod)
func_21560_call = mutated_mod.get_global_var('func_21560')
call_21561 = func_21560_call()
output = call_21561
func_21562 = relay.Function([], output)
mutated_mod['func_21562'] = func_21562
mutated_mod = relay.transform.InferType()(mutated_mod)
func_18611_call = mod.get_global_var('func_18611')
func_18613_call = mutated_mod.get_global_var('func_18613')
call_21566 = relay.TupleGetItem(func_18611_call(), 1)
call_21567 = relay.TupleGetItem(func_18613_call(), 1)
func_16886_call = mod.get_global_var('func_16886')
func_16887_call = mutated_mod.get_global_var('func_16887')
call_21568 = relay.TupleGetItem(func_16886_call(), 1)
call_21569 = relay.TupleGetItem(func_16887_call(), 1)
var_21572 = relay.var("var_21572", dtype = "float64", shape = (10, 8, 5))#candidate|21572|(10, 8, 5)|var|float64
bop_21573 = relay.logical_and(call_21566.astype('bool'), relay.reshape(var_21572.astype('bool'), relay.shape_of(call_21566))) # shape=(10, 8, 5)
bop_21576 = relay.logical_and(call_21567.astype('bool'), relay.reshape(var_21572.astype('bool'), relay.shape_of(call_21567))) # shape=(10, 8, 5)
output = relay.Tuple([call_21568,bop_21573,])
output2 = relay.Tuple([call_21569,bop_21576,])
F = relay.Function([var_21572,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_21572,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
