==========mod==========
#[version = "0.0.5"]
def @func_7450(%var_7429: Tensor[(9, 3, 1), int16], %var_7430: Tensor[(9, 3, 12), int16]) -> (Tensor[(9, 3, 12), int16], Tensor[(15, 7, 15), float32]) {
  %0 = cast(%var_7429, dtype="int16") /* ty=Tensor[(9, 3, 1), int16] */;
  %1 = cast(%var_7430, dtype="int16") /* ty=Tensor[(9, 3, 12), int16] */;
  %2 = @func_4199() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(1584), int16]) */;
  %3 = bitwise_and(%0, %1) /* ty=Tensor[(9, 3, 12), int16] */;
  %4 = %2.0;
  (%3, %4)
}

def @func_962() -> (Tensor[(15, 7, 15), float64],) {
  %5 = @func_855() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64]) */;
  %6 = %5.1;
  (%6,)
}

def @func_7675() -> (Tensor[(1, 15, 1), float32],) {
  %7 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 15, 1), float32] */, dtype="float32") /* ty=Tensor[(1, 15, 1), float32] */;
  %8 = acos(%7) /* ty=Tensor[(1, 15, 1), float32] */;
  (%8,)
}

def @func_4574(%var_4553: Tensor[(12, 132), int16]) -> (Tensor[(12, 132), bool], Tensor[(12, 132), int8], Tensor[(11, 16, 9), float64]) {
  %9 = @func_3335() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(12, 132), int16]) */;
  %10 = %9.1;
  %11 = cast(%var_4553, dtype="bool") /* ty=Tensor[(12, 132), bool] */;
  %12 = shape_of(%10, dtype="int32") /* ty=Tensor[(2), int32] */;
  %13 = cast(%10, dtype="bool") /* ty=Tensor[(12, 132), bool] */;
  %14 = dyn.reshape(%11, %12, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %15 = cast(%10, dtype="int8") /* ty=Tensor[(12, 132), int8] */;
  %16 = shape_of(%var_4553, dtype="int32") /* ty=Tensor[(2), int32] */;
  %17 = cast(%var_4553, dtype="int8") /* ty=Tensor[(12, 132), int8] */;
  %18 = dyn.reshape(%15, %16, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %19 = @func_3930() /* ty=(Tensor[(1584), float64], Tensor[(11, 16, 9), float64], Tensor[(140), bool], Tensor[(15, 7, 15), float32]) */;
  %20 = less_equal(%13, %14) /* ty=Tensor[(12, 132), bool] */;
  %21 = bitwise_and(%17, %18) /* ty=Tensor[(12, 132), int8] */;
  %22 = %19.1;
  (%20, %21, %22)
}

def @func_6263() -> (Tensor[(15, 7, 15), uint32],) {
  %23 = @func_2195() /* ty=(Tensor[(15, 7, 15), uint32], Tensor[(12, 132), int16], Tensor[(15, 7, 15), float64]) */;
  %24 = %23.0;
  (%24,)
}

def @func_7779() -> Tensor[(15, 7, 15), uint32] {
  %25 = @func_6263() /* ty=(Tensor[(15, 7, 15), uint32],) */;
  %25.0
}

def @func_3869() -> (Tensor[(11, 16, 9), float32],) {
  %26 = @func_3766() /* ty=(Tensor[(140), bool], Tensor[(11, 16, 9), int16]) */;
  %27 = %26.1;
  %28 = cast(%27, dtype="float32") /* ty=Tensor[(11, 16, 9), float32] */;
  %29 = sinh(%28) /* ty=Tensor[(11, 16, 9), float32] */;
  (%29,)
}

def @func_3766() -> (Tensor[(140), bool], Tensor[(11, 16, 9), int16]) {
  %30 = @func_2920() /* ty=(Tensor[(11, 16, 9), int16], Tensor[(11, 16, 9), float64], Tensor[(140), bool]) */;
  %31 = @func_1161() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(9, 10, 5), bool], Tensor[(450), int16], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16], Tensor[(12, 132), int16]) */;
  %32 = %30.2;
  %33 = %31.5;
  (%32, %33)
}

def @func_3335() -> (Tensor[(15, 7, 15), float64], Tensor[(12, 132), int16]) {
  %34 = @func_3256() /* ty=(Tensor[(11, 16, 9), int16], Tensor[(11, 16, 9), int16], Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), float64]) */;
  %35 = @func_1161() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(9, 10, 5), bool], Tensor[(450), int16], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16], Tensor[(12, 132), int16]) */;
  %36 = %34.2;
  %37 = %35.6;
  (%36, %37)
}

def @func_7742() -> (Tensor[(15, 7, 15), float64], Tensor[(1584), int16]) {
  %38 = @func_4750() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(1584), int16], Tensor[(1584), int16]) */;
  %39 = @func_1956() /* ty=Tensor[(15, 7, 15), float64] */;
  %40 = %38.1;
  (%39, %40)
}

def @func_1956() -> Tensor[(15, 7, 15), float64] {
  %41 = @func_962() /* ty=(Tensor[(15, 7, 15), float64],) */;
  %41.0
}

def @func_8673(%var_8652: Tensor[(128), bool], %var_8653: Tensor[(1152), bool]) -> (Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), uint32], Tensor[(15, 7, 15), float32], Tensor[(1584), int16], Tensor[(11, 16, 9), float32], Tensor[(15, 7, 15), uint32], Tensor[(15, 7, 15), float32], Tensor[(128), bool], Tensor[(1152), bool], Tensor[(12, 132), int8]) {
  %42 = @func_4832() /* ty=Tensor[(15, 7, 15), float32] */;
  %43 = cast(%42, dtype="float64") /* ty=Tensor[(15, 7, 15), float64] */;
  %44 = reshape(%43, newshape=[15, 7, 15]) /* ty=Tensor[(15, 7, 15), float64] */;
  %45 = @func_3038(%44) /* ty=(Tensor[(15, 7, 15), uint16], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32]) */;
  %46 = @func_4807() /* ty=(Tensor[(1584), int16], Tensor[(11, 16, 9), int16]) */;
  %47 = @func_6907() /* ty=(Tensor[(11, 16, 9), float32], Tensor[(11, 16, 9), int16], Tensor[(130, 1), float64], Tensor[(11, 16, 9), uint8]) */;
  %48 = @func_4379() /* ty=(Tensor[(11, 16, 9), int16], Tensor[(15, 7, 15), uint32]) */;
  %49 = cast(%var_8652, dtype="bool") /* ty=Tensor[(128), bool] */;
  %50 = cast(%var_8653, dtype="bool") /* ty=Tensor[(1152), bool] */;
  %51 = reshape(%49, newshape=[1, 8, 16]) /* ty=Tensor[(1, 8, 16), bool] */;
  %52 = reshape(%50, newshape=[9, 8, 16]) /* ty=Tensor[(9, 8, 16), bool] */;
  %53 = @func_8334(%51, %52) /* ty=(Tensor[(9, 8, 16), bool], Tensor[(11, 16, 9), int16], Tensor[(15, 7, 15), float32], Tensor[(9, 8, 16), float64], Tensor[(1584), uint16], Tensor[(15, 7, 15), float32], Tensor[(9, 8, 16), float64]) */;
  %54 = %47.0;
  %55 = cast(%54, dtype="int16") /* ty=Tensor[(11, 16, 9), int16] */;
  %56 = reshape(%55, newshape=[12, 132]) /* ty=Tensor[(12, 132), int16] */;
  %57 = @func_4574(%56) /* ty=(Tensor[(12, 132), bool], Tensor[(12, 132), int8], Tensor[(11, 16, 9), float64]) */;
  %58 = @func_8599() /* ty=Tensor[(15, 7, 15), uint32] */;
  %59 = %45.2;
  %60 = %46.0;
  %61 = %48.1;
  %62 = %53.2;
  %63 = %57.1;
  (%42, %58, %59, %60, %54, %61, %62, %var_8652, %var_8653, %63)
}

def @func_5030(%var_5023: Tensor[(11, 16, 9), int16]) -> (Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), bool]) {
  %64 = @func_3335() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(12, 132), int16]) */;
  %65 = @func_1635() /* ty=(Tensor[(11, 16, 9), int16], Tensor[(11, 16, 9), int16]) */;
  %66 = %65.1;
  %67 = cast(%var_5023, dtype="bool") /* ty=Tensor[(11, 16, 9), bool] */;
  %68 = shape_of(%66, dtype="int32") /* ty=Tensor[(3), int32] */;
  %69 = cast(%66, dtype="bool") /* ty=Tensor[(11, 16, 9), bool] */;
  %70 = dyn.reshape(%67, %68, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %71 = %64.0;
  %72 = equal(%69, %70) /* ty=Tensor[(11, 16, 9), bool] */;
  (%71, %72)
}

def @func_1487() -> (Tensor[(15, 7, 15), float32],) {
  %73 = @func_855() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64]) */;
  %74 = %73.0;
  (%74,)
}

def @func_8524(%var_8519: Tensor[(140), bool]) -> (Tensor[(140), bool],) {
  %75 = @func_6230() /* ty=(Tensor[(140), bool],) */;
  %76 = %75.0;
  %77 = cast(%var_8519, dtype="bool") /* ty=Tensor[(140), bool] */;
  %78 = shape_of(%76, dtype="int32") /* ty=Tensor[(1), int32] */;
  %79 = cast(%76, dtype="bool") /* ty=Tensor[(140), bool] */;
  %80 = dyn.reshape(%77, %78, newshape=[]) /* ty=Tensor[(?), bool] */;
  %81 = logical_and(%79, %80) /* ty=Tensor[(140), bool] */;
  (%81,)
}

def @func_2003(%var_1989: Tensor[(15, 7, 15), float32]) -> Tensor[(15, 7, 15), bool] {
  %82 = @func_1487() /* ty=(Tensor[(15, 7, 15), float32],) */;
  %83 = %82.0;
  %84 = cast(%var_1989, dtype="bool") /* ty=Tensor[(15, 7, 15), bool] */;
  %85 = shape_of(%83, dtype="int32") /* ty=Tensor[(3), int32] */;
  %86 = cast(%83, dtype="bool") /* ty=Tensor[(15, 7, 15), bool] */;
  %87 = dyn.reshape(%84, %85, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%86, %87) /* ty=Tensor[(15, 7, 15), bool] */
}

def @func_6514() -> (Tensor[(15, 7, 15), float32],) {
  %88 = @func_4750() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(1584), int16], Tensor[(1584), int16]) */;
  %89 = %88.0;
  (%89,)
}

def @func_2825() -> Tensor[(11, 16, 9), int16] {
  %90 = @func_2621() /* ty=(Tensor[(11, 16, 9), int16],) */;
  %90.0
}

def @func_4329(%var_4292: Tensor[(11, 16, 9), int16]) -> Tensor[(11, 16, 9), uint8] {
  %91 = @func_3256() /* ty=(Tensor[(11, 16, 9), int16], Tensor[(11, 16, 9), int16], Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), float64]) */;
  %92 = %91.1;
  %93 = cast(%var_4292, dtype="bool") /* ty=Tensor[(11, 16, 9), bool] */;
  %94 = shape_of(%92, dtype="int32") /* ty=Tensor[(3), int32] */;
  %95 = cast(%92, dtype="bool") /* ty=Tensor[(11, 16, 9), bool] */;
  %96 = dyn.reshape(%93, %94, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %97 = greater(%95, %96) /* ty=Tensor[(11, 16, 9), bool] */;
  %98 = cast(%var_4292, dtype="uint8") /* ty=Tensor[(11, 16, 9), uint8] */;
  %99 = shape_of(%97, dtype="int32") /* ty=Tensor[(3), int32] */;
  %100 = cast(%97, dtype="uint8") /* ty=Tensor[(11, 16, 9), uint8] */;
  %101 = dyn.reshape(%98, %99, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  left_shift(%100, %101) /* ty=Tensor[(11, 16, 9), uint8] */
}

def @func_7285() -> (Tensor[(15, 7, 15), float32],) {
  %102 = @func_6634() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(4, 15, 15), bool]) */;
  %103 = %102.0;
  (%103,)
}

def @func_2337(%var_2279: Tensor[(15, 7, 15), float32]) -> (Tensor[(15, 7, 15), bool], Tensor[(15, 7, 15), float32], Tensor[(1584), int16], Tensor[(9, 10, 5), bool]) {
  %104 = @func_1078() /* ty=(Tensor[(15, 7, 15), float32],) */;
  %105 = %104.0;
  %106 = cast(%var_2279, dtype="int32") /* ty=Tensor[(15, 7, 15), int32] */;
  %107 = shape_of(%105, dtype="int32") /* ty=Tensor[(3), int32] */;
  %108 = cast(%105, dtype="int32") /* ty=Tensor[(15, 7, 15), int32] */;
  %109 = dyn.reshape(%106, %107, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %110 = maximum(%108, %109) /* ty=Tensor[(15, 7, 15), int32] */;
  %111 = cast(%var_2279, dtype="bool") /* ty=Tensor[(15, 7, 15), bool] */;
  %112 = shape_of(%110, dtype="int32") /* ty=Tensor[(3), int32] */;
  %113 = cast(%110, dtype="bool") /* ty=Tensor[(15, 7, 15), bool] */;
  %114 = dyn.reshape(%111, %112, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %115 = cast(%var_2279, dtype="float32") /* ty=Tensor[(15, 7, 15), float32] */;
  %116 = @func_1260() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(1584), int16]) */;
  %117 = @func_1161() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(9, 10, 5), bool], Tensor[(450), int16], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16], Tensor[(12, 132), int16]) */;
  %118 = less_equal(%113, %114) /* ty=Tensor[(15, 7, 15), bool] */;
  %119 = rsqrt(%115) /* ty=Tensor[(15, 7, 15), float32] */;
  %120 = %116.1;
  %121 = %117.1;
  (%118, %119, %120, %121)
}

def @func_7007(%var_6975: Tensor[(36), float64]) -> (Tensor[(15, 7, 15), uint32], Tensor[(450), int16], Tensor[(450), int16], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), float32], Tensor[(36), float64], Tensor[(11, 13, 14), float64], Tensor[(2002), int64], Tensor[(15, 7, 15), uint16]) {
  %122 = @func_2864() /* ty=(Tensor[(15, 7, 15), uint32],) */;
  %123 = cast(meta[relay.Constant][1] /* ty=Tensor[(450), int16] */, dtype="int16") /* ty=Tensor[(450), int16] */;
  %124 = reshape(%123, newshape=[450]) /* ty=Tensor[(450), int16] */;
  %125 = @func_1695(%124) /* ty=(Tensor[(15, 7, 15), float64], Tensor[(450), int16], Tensor[(450), int16]) */;
  %126 = @func_2470() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), float32], Tensor[(15, 7, 15), bool], Tensor[(15, 7, 15), float32]) */;
  %127 = @func_4448() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), uint32]) */;
  %128 = cast(%var_6975, dtype="float64") /* ty=Tensor[(36), float64] */;
  %129 = reshape(%128, newshape=[36]) /* ty=Tensor[(36), float64] */;
  %130 = @func_5985(%129) /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32], Tensor[(3, 1, 12), float64], Tensor[(36), float64]) */;
  %131 = cast(meta[relay.Constant][2] /* ty=Tensor[(2002), int64] */, dtype="int64") /* ty=Tensor[(2002), int64] */;
  %132 = cast(meta[relay.Constant][2] /* ty=Tensor[(2002), int64] */, dtype="int64") /* ty=Tensor[(2002), int64] */;
  %133 = reshape(%131, newshape=[11, 13, 14]) /* ty=Tensor[(11, 13, 14), int64] */;
  %134 = reshape(%132, newshape=[11, 13, 14]) /* ty=Tensor[(11, 13, 14), int64] */;
  %135 = @func_4516(%133, %134) /* ty=(Tensor[(11, 13, 14), float64], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32], Tensor[(1584), int16], Tensor[(11, 13, 14), float32], Tensor[(15, 7, 15), float64]) */;
  %136 = @func_3622() /* ty=(Tensor[(15, 7, 15), uint16], Tensor[(11, 16, 9), float64], Tensor[(1584), int16]) */;
  %137 = %122.0;
  %138 = %125.2;
  %139 = %126.3;
  %140 = %127.0;
  %141 = %130.0;
  %142 = %135.0;
  %143 = %136.0;
  (%137, %138, meta[relay.Constant][1] /* ty=Tensor[(450), int16] */, %139, %140, %141, %var_6975, %142, meta[relay.Constant][2] /* ty=Tensor[(2002), int64] */, %143)
}

def @func_2470() -> (Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), float32], Tensor[(15, 7, 15), bool], Tensor[(15, 7, 15), float32]) {
  %144 = @func_1110() /* ty=(Tensor[(15, 7, 15), float64],) */;
  %145 = @func_2158() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(11, 16, 9), float32]) */;
  %146 = %144.0;
  %147 = cast(%146, dtype="float32") /* ty=Tensor[(15, 7, 15), float32] */;
  %148 = reshape(%147, newshape=[15, 7, 15]) /* ty=Tensor[(15, 7, 15), float32] */;
  %149 = @func_2088() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(1584), float64], Tensor[(15, 7, 15), float32]) */;
  %150 = %145.1;
  %151 = @func_2003(%148) /* ty=Tensor[(15, 7, 15), bool] */;
  %152 = %149.2;
  (%146, %150, %151, %152)
}

def @func_1388(%var_1381: Tensor[(15, 7, 15), float32]) -> Tensor[(15, 7, 15), bool] {
  %153 = @func_1161() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(9, 10, 5), bool], Tensor[(450), int16], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16], Tensor[(12, 132), int16]) */;
  %154 = %153.0;
  %155 = cast(%var_1381, dtype="bool") /* ty=Tensor[(15, 7, 15), bool] */;
  %156 = shape_of(%154, dtype="int32") /* ty=Tensor[(3), int32] */;
  %157 = cast(%154, dtype="bool") /* ty=Tensor[(15, 7, 15), bool] */;
  %158 = dyn.reshape(%155, %156, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%157, %158) /* ty=Tensor[(15, 7, 15), bool] */
}

def @func_7099() -> Tensor[(11, 16, 9), int16] {
  %159 = @func_2621() /* ty=(Tensor[(11, 16, 9), int16],) */;
  %159.0
}

def @func_4179() -> (Tensor[(15, 7, 15), float64], Tensor[(1584), int16]) {
  %160 = @func_3590() /* ty=(Tensor[(1584), int16], Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), float64]) */;
  %161 = @func_1956() /* ty=Tensor[(15, 7, 15), float64] */;
  %162 = %160.0;
  (%161, %162)
}

def @func_7885() -> Tensor[(15, 7, 15), uint32] {
  %163 = @func_2864() /* ty=(Tensor[(15, 7, 15), uint32],) */;
  %163.0
}

def @func_3662() -> (Tensor[(15, 7, 15), float64],) {
  %164 = @func_3256() /* ty=(Tensor[(11, 16, 9), int16], Tensor[(11, 16, 9), int16], Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), float64]) */;
  %165 = %164.2;
  (%165,)
}

def @func_2621() -> (Tensor[(11, 16, 9), int16],) {
  %166 = @func_984() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16], Tensor[(1584), int16]) */;
  %167 = %166.1;
  (%167,)
}

def @func_4232() -> Tensor[(15, 7, 15), float32] {
  %168 = @func_2158() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(11, 16, 9), float32]) */;
  %168.0
}

def @func_984() -> (Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16], Tensor[(1584), int16]) {
  %169 = @func_827() /* ty=(Tensor[(15, 7, 15), float32],) */;
  %170 = %169.0;
  %171 = cast(%170, dtype="float64") /* ty=Tensor[(15, 7, 15), float64] */;
  %172 = cast(meta[relay.Constant][3] /* ty=Tensor[(1584), int16] */, dtype="int16") /* ty=Tensor[(1584), int16] */;
  %173 = cast(meta[relay.Constant][3] /* ty=Tensor[(1584), int16] */, dtype="int16") /* ty=Tensor[(1584), int16] */;
  %174 = reshape(%172, newshape=[11, 16, 9]) /* ty=Tensor[(11, 16, 9), int16] */;
  %175 = reshape(%173, newshape=[11, 16, 9]) /* ty=Tensor[(11, 16, 9), int16] */;
  %176 = @func_917(%174, %175) /* ty=(Tensor[(11, 16, 9), int16],) */;
  %177 = cos(%171) /* ty=Tensor[(15, 7, 15), float64] */;
  %178 = %176.0;
  (%177, %178, meta[relay.Constant][3] /* ty=Tensor[(1584), int16] */)
}

def @func_3981() -> (Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), bool]) {
  %179 = @func_2158() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(11, 16, 9), float32]) */;
  %180 = @func_2375() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64]) */;
  %181 = %180.0;
  %182 = cast(%181, dtype="float32") /* ty=Tensor[(15, 7, 15), float32] */;
  %183 = reshape(%182, newshape=[15, 7, 15]) /* ty=Tensor[(15, 7, 15), float32] */;
  %184 = %179.0;
  %185 = @func_1884(%183) /* ty=Tensor[(15, 7, 15), bool] */;
  (%184, %181, %185)
}

def @func_7844(%var_7833: Tensor[(8, 7, 3), int64]) -> Tensor[(8, 7, 3), float64] {
  %186 = cast(meta[relay.Constant][4] /* ty=Tensor[(8, 1, 3), int64] */, dtype="bool") /* ty=Tensor[(8, 1, 3), bool] */;
  %187 = cast(%var_7833, dtype="bool") /* ty=Tensor[(8, 7, 3), bool] */;
  %188 = greater(%186, %187) /* ty=Tensor[(8, 7, 3), bool] */;
  %189 = cast(%188, dtype="float64") /* ty=Tensor[(8, 7, 3), float64] */;
  sqrt(%189) /* ty=Tensor[(8, 7, 3), float64] */
}

def @func_2158() -> (Tensor[(15, 7, 15), float32], Tensor[(11, 16, 9), float32]) {
  %190 = @func_2088() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(1584), float64], Tensor[(15, 7, 15), float32]) */;
  %191 = %190.2;
  %192 = cast(%191, dtype="float64") /* ty=Tensor[(15, 7, 15), float64] */;
  %193 = reshape(%192, newshape=[15, 7, 15]) /* ty=Tensor[(15, 7, 15), float64] */;
  %194 = @func_1603(%193) /* ty=(Tensor[(11, 16, 9), float32], Tensor[(15, 7, 15), float64]) */;
  %195 = %194.0;
  (%191, %195)
}

def @func_2944() -> (Tensor[(15, 7, 15), float32],) {
  %196 = @func_1487() /* ty=(Tensor[(15, 7, 15), float32],) */;
  %197 = %196.0;
  (%197,)
}

def @func_7187(%var_7174: Tensor[(130, 11), float64]) -> (Tensor[(130, 11), uint8],) {
  %198 = @func_6907() /* ty=(Tensor[(11, 16, 9), float32], Tensor[(11, 16, 9), int16], Tensor[(130, 1), float64], Tensor[(11, 16, 9), uint8]) */;
  %199 = %198.2;
  %200 = cast(%199, dtype="uint8") /* ty=Tensor[(130, 1), uint8] */;
  %201 = cast(%var_7174, dtype="uint8") /* ty=Tensor[(130, 11), uint8] */;
  %202 = maximum(%200, %201) /* ty=Tensor[(130, 11), uint8] */;
  (%202,)
}

def @func_6492() -> (Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64]) {
  %203 = @func_855() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64]) */;
  %204 = @func_4179() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(1584), int16]) */;
  %205 = @func_3491() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32], Tensor[(450), int16], Tensor[(450), int16]) */;
  %206 = @func_3335() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(12, 132), int16]) */;
  %207 = %203.1;
  %208 = %204.0;
  %209 = %205.1;
  %210 = %206.0;
  (%207, %208, %209, %210)
}

def @func_4199() -> (Tensor[(15, 7, 15), float32], Tensor[(1584), int16]) {
  %211 = @func_3491() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32], Tensor[(450), int16], Tensor[(450), int16]) */;
  %212 = @func_2665() /* ty=(Tensor[(1584), int16],) */;
  %213 = %211.0;
  %214 = %212.0;
  (%213, %214)
}

def @func_812() -> Tensor[(15, 7, 15), float32] {
  %215 = cast(meta[relay.Constant][5] /* ty=Tensor[(15, 7, 15), float64] */, dtype="float64") /* ty=Tensor[(15, 7, 15), float64] */;
  %216 = cosh(%215) /* ty=Tensor[(15, 7, 15), float64] */;
  %217 = cast(%216, dtype="float32") /* ty=Tensor[(15, 7, 15), float32] */;
  tan(%217) /* ty=Tensor[(15, 7, 15), float32] */
}

def @func_2665() -> (Tensor[(1584), int16],) {
  %218 = @func_984() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16], Tensor[(1584), int16]) */;
  %219 = %218.2;
  (%219,)
}

def @func_2936() -> (Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32]) {
  %220 = @func_827() /* ty=(Tensor[(15, 7, 15), float32],) */;
  %221 = @func_855() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64]) */;
  %222 = %220.0;
  %223 = %221.0;
  (%222, %223)
}

def @main(%var_8760: Tensor[(15, 12, 1), float32], %var_8770: Tensor[(4, 15, 15), bool], %var_8781: Tensor[(4, 15, 15), uint16]) -> (Tensor[(15, 12, 1), float64], Tensor[(4, 15, 15), int8]) {
  %224 = cast(%var_8760, dtype="float32") /* ty=Tensor[(15, 12, 1), float32] */;
  %225 = acos(%224) /* ty=Tensor[(15, 12, 1), float32] */;
  %226 = cast(%225, dtype="float64") /* ty=Tensor[(15, 12, 1), float64] */;
  %227 = @func_6634() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(4, 15, 15), bool]) */;
  %228 = %227.1;
  %229 = cast(%var_8770, dtype="uint16") /* ty=Tensor[(4, 15, 15), uint16] */;
  %230 = shape_of(%228, dtype="int32") /* ty=Tensor[(3), int32] */;
  %231 = cast(%228, dtype="uint16") /* ty=Tensor[(4, 15, 15), uint16] */;
  %232 = dyn.reshape(%229, %230, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %233 = logical_xor(%231, %232) /* ty=Tensor[(4, 15, 15), uint16] */;
  %234 = cast(%var_8781, dtype="int8") /* ty=Tensor[(4, 15, 15), int8] */;
  %235 = shape_of(%233, dtype="int32") /* ty=Tensor[(3), int32] */;
  %236 = cast(%233, dtype="int8") /* ty=Tensor[(4, 15, 15), int8] */;
  %237 = dyn.reshape(%234, %235, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %238 = tan(%226) /* ty=Tensor[(15, 12, 1), float64] */;
  %239 = right_shift(%236, %237) /* ty=Tensor[(4, 15, 15), int8] */;
  (%238, %239)
}

def @func_2854() -> (Tensor[(11, 16, 9), float32], Tensor[(15, 7, 15), float64], Tensor[(1584), int16], Tensor[(1584), int16]) {
  %240 = @func_2158() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(11, 16, 9), float32]) */;
  %241 = @func_1260() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(1584), int16]) */;
  %242 = %241.0;
  %243 = cast(%242, dtype="float32") /* ty=Tensor[(15, 7, 15), float32] */;
  %244 = reshape(%243, newshape=[15, 7, 15]) /* ty=Tensor[(15, 7, 15), float32] */;
  %245 = @func_2337(%244) /* ty=(Tensor[(15, 7, 15), bool], Tensor[(15, 7, 15), float32], Tensor[(1584), int16], Tensor[(9, 10, 5), bool]) */;
  %246 = @func_2665() /* ty=(Tensor[(1584), int16],) */;
  %247 = %240.1;
  %248 = %245.2;
  %249 = %246.0;
  (%247, %242, %248, %249)
}

def @func_1161() -> (Tensor[(15, 7, 15), float32], Tensor[(9, 10, 5), bool], Tensor[(450), int16], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16], Tensor[(12, 132), int16]) {
  %250 = @func_827() /* ty=(Tensor[(15, 7, 15), float32],) */;
  %251 = cast(meta[relay.Constant][6] /* ty=Tensor[(450), int16] */, dtype="int16") /* ty=Tensor[(450), int16] */;
  %252 = reshape(%251, newshape=[9, 10, 5]) /* ty=Tensor[(9, 10, 5), int16] */;
  %253 = @func_724(%252) /* ty=(Tensor[(9, 10, 5), bool],) */;
  %254 = @func_855() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64]) */;
  %255 = @func_962() /* ty=(Tensor[(15, 7, 15), float64],) */;
  %256 = cast(meta[relay.Constant][7] /* ty=Tensor[(12, 132), int16] */, dtype="int16") /* ty=Tensor[(12, 132), int16] */;
  %257 = cast(meta[relay.Constant][7] /* ty=Tensor[(12, 132), int16] */, dtype="int16") /* ty=Tensor[(12, 132), int16] */;
  %258 = reshape(%256, newshape=[11, 16, 9]) /* ty=Tensor[(11, 16, 9), int16] */;
  %259 = reshape(%257, newshape=[11, 16, 9]) /* ty=Tensor[(11, 16, 9), int16] */;
  %260 = @func_917(%258, %259) /* ty=(Tensor[(11, 16, 9), int16],) */;
  %261 = %250.0;
  %262 = %253.0;
  %263 = %254.0;
  %264 = %255.0;
  %265 = %260.0;
  (%261, %262, meta[relay.Constant][6] /* ty=Tensor[(450), int16] */, %263, %264, %265, meta[relay.Constant][7] /* ty=Tensor[(12, 132), int16] */)
}

def @func_3390() -> (Tensor[(11, 16, 9), int16],) {
  %266 = @func_2621() /* ty=(Tensor[(11, 16, 9), int16],) */;
  %267 = %266.0;
  (%267,)
}

def @func_2864() -> (Tensor[(15, 7, 15), uint32],) {
  %268 = @func_2195() /* ty=(Tensor[(15, 7, 15), uint32], Tensor[(12, 132), int16], Tensor[(15, 7, 15), float64]) */;
  %269 = %268.0;
  (%269,)
}

def @func_3913(%var_3888: Tensor[(13, 3, 7), int64]) -> (Tensor[(15, 7, 15), float32], Tensor[(13, 3, 7), float32], Tensor[(15, 7, 15), float32]) {
  %270 = cast(meta[relay.Constant][8] /* ty=Tensor[(13, 3, 7), int64] */, dtype="bool") /* ty=Tensor[(13, 3, 7), bool] */;
  %271 = shape_of(%var_3888, dtype="int32") /* ty=Tensor[(3), int32] */;
  %272 = cast(%var_3888, dtype="bool") /* ty=Tensor[(13, 3, 7), bool] */;
  %273 = dyn.reshape(%270, %271, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %274 = greater_equal(%272, %273) /* ty=Tensor[(13, 3, 7), bool] */;
  %275 = cast(%274, dtype="float32") /* ty=Tensor[(13, 3, 7), float32] */;
  %276 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(13, 3, 7), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %277 = cast(meta[relay.Constant][8] /* ty=Tensor[(13, 3, 7), int64] */, dtype="float32") /* ty=Tensor[(13, 3, 7), float32] */;
  %278 = dyn.reshape(%275, %276, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %279 = @func_2936() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32]) */;
  %280 = @func_3687() /* ty=Tensor[(15, 7, 15), float32] */;
  %281 = mod(%277, %278) /* ty=Tensor[(13, 3, 7), float32] */;
  %282 = %279.0;
  (%280, %281, %282)
}

def @func_3491() -> (Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32], Tensor[(450), int16], Tensor[(450), int16]) {
  %283 = @func_827() /* ty=(Tensor[(15, 7, 15), float32],) */;
  %284 = @func_827() /* ty=(Tensor[(15, 7, 15), float32],) */;
  %285 = cast(meta[relay.Constant][9] /* ty=Tensor[(450), int16] */, dtype="int16") /* ty=Tensor[(450), int16] */;
  %286 = reshape(%285, newshape=[450]) /* ty=Tensor[(450), int16] */;
  %287 = @func_1695(%286) /* ty=(Tensor[(15, 7, 15), float64], Tensor[(450), int16], Tensor[(450), int16]) */;
  %288 = %283.0;
  %289 = %284.0;
  %290 = %287.2;
  (%288, %289, %290, meta[relay.Constant][9] /* ty=Tensor[(450), int16] */)
}

def @func_7312(%var_7303: Tensor[(1, 3, 4), bool], %var_7304: Tensor[(13, 3, 4), bool]) -> Tensor[(13, 3, 4), bool] {
  %291 = cast(%var_7303, dtype="bool") /* ty=Tensor[(1, 3, 4), bool] */;
  %292 = cast(%var_7304, dtype="bool") /* ty=Tensor[(13, 3, 4), bool] */;
  logical_or(%291, %292) /* ty=Tensor[(13, 3, 4), bool] */
}

def @func_6594() -> Tensor[(11, 16, 9), int16] {
  %293 = @func_1635() /* ty=(Tensor[(11, 16, 9), int16], Tensor[(11, 16, 9), int16]) */;
  %293.0
}

def @func_3009() -> (Tensor[(15, 7, 15), float32],) {
  %294 = @func_1956() /* ty=Tensor[(15, 7, 15), float64] */;
  %295 = cast(%294, dtype="float32") /* ty=Tensor[(15, 7, 15), float32] */;
  %296 = atan(%295) /* ty=Tensor[(15, 7, 15), float32] */;
  (%296,)
}

def @func_3038(%var_3023: Tensor[(15, 7, 15), float64]) -> (Tensor[(15, 7, 15), uint16], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32]) {
  %297 = @func_1921() /* ty=Tensor[(15, 7, 15), float64] */;
  %298 = cast(%var_3023, dtype="uint16") /* ty=Tensor[(15, 7, 15), uint16] */;
  %299 = shape_of(%297, dtype="int32") /* ty=Tensor[(3), int32] */;
  %300 = cast(%297, dtype="uint16") /* ty=Tensor[(15, 7, 15), uint16] */;
  %301 = dyn.reshape(%298, %299, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %302 = @func_827() /* ty=(Tensor[(15, 7, 15), float32],) */;
  %303 = bitwise_xor(%300, %301) /* ty=Tensor[(15, 7, 15), uint16] */;
  %304 = @func_812() /* ty=Tensor[(15, 7, 15), float32] */;
  %305 = %302.0;
  (%303, %304, %305)
}

def @func_8739(%var_8684: Tensor[(15, 7, 15), float64]) -> (Tensor[(15, 7, 15), bool], Tensor[(140), bool], Tensor[(15, 7, 15), uint32], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32], float32, Tensor[(13, 121), float32]) {
  %306 = @func_2195() /* ty=(Tensor[(15, 7, 15), uint32], Tensor[(12, 132), int16], Tensor[(15, 7, 15), float64]) */;
  %307 = %306.2;
  %308 = cast(%var_8684, dtype="bool") /* ty=Tensor[(15, 7, 15), bool] */;
  %309 = shape_of(%307, dtype="int32") /* ty=Tensor[(3), int32] */;
  %310 = cast(%307, dtype="bool") /* ty=Tensor[(15, 7, 15), bool] */;
  %311 = dyn.reshape(%308, %309, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %312 = @func_6230() /* ty=(Tensor[(140), bool],) */;
  %313 = @func_3416() /* ty=(Tensor[(15, 7, 15), uint32],) */;
  %314 = @func_2944() /* ty=(Tensor[(15, 7, 15), float32],) */;
  %315 = @func_2944() /* ty=(Tensor[(15, 7, 15), float32],) */;
  %316 = cast(meta[relay.Constant][10] /* ty=Tensor[(13, 121), float32] */, dtype="float32") /* ty=Tensor[(13, 121), float32] */;
  %317 = reshape(%316, newshape=[1573]) /* ty=Tensor[(1573), float32] */;
  %318 = @func_6856(%317) /* ty=(Tensor[(15, 7, 15), float64], Tensor[(11, 13, 11), float32], float32, Tensor[(1573), float32]) */;
  %319 = less(%310, %311) /* ty=Tensor[(15, 7, 15), bool] */;
  %320 = %312.0;
  %321 = %313.0;
  %322 = %314.0;
  %323 = %315.0;
  %324 = %318.2;
  (%319, %320, %321, %322, %323, %324, meta[relay.Constant][10] /* ty=Tensor[(13, 121), float32] */)
}

def @func_1365(%var_1349: Tensor[(15, 7, 15), float64], %var_1355: Tensor[(450), int16]) -> (Tensor[(15, 7, 15), uint16], Tensor[(9, 10, 5), bool], Tensor[(450), int16]) {
  %325 = @func_1110() /* ty=(Tensor[(15, 7, 15), float64],) */;
  %326 = %325.0;
  %327 = cast(%var_1349, dtype="uint16") /* ty=Tensor[(15, 7, 15), uint16] */;
  %328 = shape_of(%326, dtype="int32") /* ty=Tensor[(3), int32] */;
  %329 = cast(%326, dtype="uint16") /* ty=Tensor[(15, 7, 15), uint16] */;
  %330 = dyn.reshape(%327, %328, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %331 = cast(%var_1355, dtype="int16") /* ty=Tensor[(450), int16] */;
  %332 = reshape(%331, newshape=[9, 10, 5]) /* ty=Tensor[(9, 10, 5), int16] */;
  %333 = @func_724(%332) /* ty=(Tensor[(9, 10, 5), bool],) */;
  %334 = right_shift(%329, %330) /* ty=Tensor[(15, 7, 15), uint16] */;
  %335 = %333.0;
  (%334, %335, %var_1355)
}

def @func_7266(%var_7250: Tensor[(11, 16, 9), float64]) -> (Tensor[(11, 16, 9), float32], Tensor[(9, 10, 5), float32], Tensor[(15, 7, 15), float32], Tensor[(11, 16, 9), bool]) {
  %336 = @func_2158() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(11, 16, 9), float32]) */;
  %337 = @func_3727() /* ty=(Tensor[(15, 7, 15), uint32], Tensor[(9, 10, 5), bool], Tensor[(450), int16], Tensor[(1584), int16]) */;
  %338 = %337.1;
  %339 = cast(%338, dtype="float32") /* ty=Tensor[(9, 10, 5), float32] */;
  %340 = @func_6750() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32]) */;
  %341 = %336.1;
  %342 = cast(%341, dtype="int16") /* ty=Tensor[(11, 16, 9), int16] */;
  %343 = reshape(%342, newshape=[12, 132]) /* ty=Tensor[(12, 132), int16] */;
  %344 = @func_4574(%343) /* ty=(Tensor[(12, 132), bool], Tensor[(12, 132), int8], Tensor[(11, 16, 9), float64]) */;
  %345 = %344.2;
  %346 = cast(%var_7250, dtype="bool") /* ty=Tensor[(11, 16, 9), bool] */;
  %347 = shape_of(%345, dtype="int32") /* ty=Tensor[(3), int32] */;
  %348 = cast(%345, dtype="bool") /* ty=Tensor[(11, 16, 9), bool] */;
  %349 = dyn.reshape(%346, %347, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %350 = sinh(%339) /* ty=Tensor[(9, 10, 5), float32] */;
  %351 = %340.1;
  %352 = greater_equal(%348, %349) /* ty=Tensor[(11, 16, 9), bool] */;
  (%341, %350, %351, %352)
}

def @func_3622() -> (Tensor[(15, 7, 15), uint16], Tensor[(11, 16, 9), float64], Tensor[(1584), int16]) {
  %353 = @func_962() /* ty=(Tensor[(15, 7, 15), float64],) */;
  %354 = %353.0;
  %355 = cast(%354, dtype="float32") /* ty=Tensor[(15, 7, 15), float32] */;
  %356 = reshape(%355, newshape=[15, 7, 15]) /* ty=Tensor[(15, 7, 15), float32] */;
  %357 = @func_1440(%356) /* ty=(Tensor[(15, 7, 15), bool],) */;
  %358 = %357.0;
  %359 = cast(%354, dtype="uint16") /* ty=Tensor[(15, 7, 15), uint16] */;
  %360 = shape_of(%358, dtype="int32") /* ty=Tensor[(3), int32] */;
  %361 = cast(%358, dtype="uint16") /* ty=Tensor[(15, 7, 15), uint16] */;
  %362 = dyn.reshape(%359, %360, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %363 = @func_1418() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16]) */;
  %364 = %363.1;
  %365 = cast(%364, dtype="float64") /* ty=Tensor[(11, 16, 9), float64] */;
  %366 = @func_2854() /* ty=(Tensor[(11, 16, 9), float32], Tensor[(15, 7, 15), float64], Tensor[(1584), int16], Tensor[(1584), int16]) */;
  %367 = logical_xor(%361, %362) /* ty=Tensor[(15, 7, 15), uint16] */;
  %368 = sigmoid(%365) /* ty=Tensor[(11, 16, 9), float64] */;
  %369 = %366.2;
  (%367, %368, %369)
}

def @func_8209(%var_8203: Tensor[(450), int16]) -> (Tensor[(15, 7, 15), float64], Tensor[(12, 7, 12), uint64], Tensor[(1008), uint64], Tensor[(450), int16]) {
  %370 = @func_1260() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(1584), int16]) */;
  %371 = cast(meta[relay.Constant][11] /* ty=Tensor[(1008), uint64] */, dtype="uint64") /* ty=Tensor[(1008), uint64] */;
  %372 = cast(%var_8203, dtype="int16") /* ty=Tensor[(450), int16] */;
  %373 = reshape(%371, newshape=[12, 7, 12]) /* ty=Tensor[(12, 7, 12), uint64] */;
  %374 = reshape(%372, newshape=[450]) /* ty=Tensor[(450), int16] */;
  %375 = @func_3147(%373, %374) /* ty=(Tensor[(12, 7, 12), uint64], Tensor[(15, 7, 15), float64], Tensor[(450), int16]) */;
  %376 = %370.0;
  %377 = %375.0;
  (%376, %377, meta[relay.Constant][11] /* ty=Tensor[(1008), uint64] */, %var_8203)
}

def @func_1072(%var_1041: Tensor[(150, 3), int16]) -> (Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32], Tensor[(9, 10, 5), bool], Tensor[(150, 3), int16], Tensor[(15, 7, 15), float32], Tensor[(11, 16, 9), int16], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64]) {
  %378 = @func_827() /* ty=(Tensor[(15, 7, 15), float32],) */;
  %379 = cast(%var_1041, dtype="int16") /* ty=Tensor[(150, 3), int16] */;
  %380 = reshape(%379, newshape=[9, 10, 5]) /* ty=Tensor[(9, 10, 5), int16] */;
  %381 = @func_724(%380) /* ty=(Tensor[(9, 10, 5), bool],) */;
  %382 = @func_984() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16], Tensor[(1584), int16]) */;
  %383 = @func_812() /* ty=Tensor[(15, 7, 15), float32] */;
  %384 = cast(%383, dtype="float64") /* ty=Tensor[(15, 7, 15), float64] */;
  %385 = log2(%384) /* ty=Tensor[(15, 7, 15), float64] */;
  %386 = cast(%385, dtype="float32") /* ty=Tensor[(15, 7, 15), float32] */;
  %387 = @func_962() /* ty=(Tensor[(15, 7, 15), float64],) */;
  %388 = %378.0;
  %389 = @func_812() /* ty=Tensor[(15, 7, 15), float32] */;
  %390 = %381.0;
  %391 = @func_812() /* ty=Tensor[(15, 7, 15), float32] */;
  %392 = %382.1;
  %393 = asinh(%386) /* ty=Tensor[(15, 7, 15), float32] */;
  %394 = %387.0;
  (%388, %389, %390, %var_1041, %391, %392, %393, %394)
}

def @func_2088() -> (Tensor[(15, 7, 15), float64], Tensor[(1584), float64], Tensor[(15, 7, 15), float32]) {
  %395 = @func_1260() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(1584), int16]) */;
  %396 = @func_1260() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(1584), int16]) */;
  %397 = %396.1;
  %398 = cast(%397, dtype="float64") /* ty=Tensor[(1584), float64] */;
  %399 = %395.0;
  %400 = exp(%398) /* ty=Tensor[(1584), float64] */;
  %401 = @func_812() /* ty=Tensor[(15, 7, 15), float32] */;
  (%399, %400, %401)
}

def @func_5141() -> Tensor[(15, 7, 15), float32] {
  %402 = @func_3930() /* ty=(Tensor[(1584), float64], Tensor[(11, 16, 9), float64], Tensor[(140), bool], Tensor[(15, 7, 15), float32]) */;
  %402.3
}

def @func_7969() -> (Tensor[(15, 7, 15), uint32], Tensor[(15, 7, 15), float32], Tensor[(1584), uint16]) {
  %403 = @func_2854() /* ty=(Tensor[(11, 16, 9), float32], Tensor[(15, 7, 15), float64], Tensor[(1584), int16], Tensor[(1584), int16]) */;
  %404 = %403.3;
  %405 = cast(%404, dtype="float64") /* ty=Tensor[(1584), float64] */;
  %406 = asinh(%405) /* ty=Tensor[(1584), float64] */;
  %407 = cast(meta[relay.Constant][12] /* ty=Tensor[(1584), float64] */, dtype="uint16") /* ty=Tensor[(1584), uint16] */;
  %408 = shape_of(%406, dtype="int32") /* ty=Tensor[(1), int32] */;
  %409 = cast(%406, dtype="uint16") /* ty=Tensor[(1584), uint16] */;
  %410 = dyn.reshape(%407, %408, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %411 = @func_7779() /* ty=Tensor[(15, 7, 15), uint32] */;
  %412 = @func_5141() /* ty=Tensor[(15, 7, 15), float32] */;
  %413 = left_shift(%409, %410) /* ty=Tensor[(1584), uint16] */;
  (%411, %412, %413)
}

def @func_4880() -> (Tensor[(11, 16, 9), float64],) {
  %414 = @func_3622() /* ty=(Tensor[(15, 7, 15), uint16], Tensor[(11, 16, 9), float64], Tensor[(1584), int16]) */;
  %415 = %414.1;
  (%415,)
}

def @func_5985(%var_5983: Tensor[(36), float64]) -> (Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32], Tensor[(3, 1, 12), float64], Tensor[(36), float64]) {
  %416 = @func_855() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64]) */;
  %417 = @func_1161() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(9, 10, 5), bool], Tensor[(450), int16], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16], Tensor[(12, 132), int16]) */;
  %418 = cast(%var_5983, dtype="float64") /* ty=Tensor[(36), float64] */;
  %419 = %416.0;
  %420 = cast(%419, dtype="float64") /* ty=Tensor[(15, 7, 15), float64] */;
  %421 = reshape(%418, newshape=[3, 1, 12]) /* ty=Tensor[(3, 1, 12), float64] */;
  %422 = reshape(%420, newshape=[5, 315]) /* ty=Tensor[(5, 315), float64] */;
  %423 = @func_3458(%421, %422) /* ty=(Tensor[(3, 1, 12), float64], Tensor[(15, 7, 15), float32], Tensor[(5, 315), float64], Tensor[(15, 7, 15), float32]) */;
  %424 = %417.3;
  %425 = %423.0;
  (%419, %424, %425, %var_5983)
}

def @func_1921() -> Tensor[(15, 7, 15), float64] {
  %426 = @func_1110() /* ty=(Tensor[(15, 7, 15), float64],) */;
  %426.0
}

def @func_1787(%var_1785: Tensor[(450), int16]) -> (Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64], Tensor[(450), int16]) {
  %427 = @func_1487() /* ty=(Tensor[(15, 7, 15), float32],) */;
  %428 = %427.0;
  %429 = cast(%428, dtype="float32") /* ty=Tensor[(15, 7, 15), float32] */;
  %430 = cast(%var_1785, dtype="int16") /* ty=Tensor[(450), int16] */;
  %431 = reshape(%430, newshape=[450]) /* ty=Tensor[(450), int16] */;
  %432 = @func_1695(%431) /* ty=(Tensor[(15, 7, 15), float64], Tensor[(450), int16], Tensor[(450), int16]) */;
  %433 = sin(%429) /* ty=Tensor[(15, 7, 15), float32] */;
  %434 = %432.0;
  (%433, %434, %var_1785)
}

def @func_2920() -> (Tensor[(11, 16, 9), int16], Tensor[(11, 16, 9), float64], Tensor[(140), bool]) {
  %435 = @func_2621() /* ty=(Tensor[(11, 16, 9), int16],) */;
  %436 = cast(meta[relay.Constant][13] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
  %437 = cast(meta[relay.Constant][13] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
  %438 = reshape(%436, newshape=[4, 5, 7]) /* ty=Tensor[(4, 5, 7), bool] */;
  %439 = reshape(%437, newshape=[4, 5, 7]) /* ty=Tensor[(4, 5, 7), bool] */;
  %440 = @func_2549(%438, %439) /* ty=(Tensor[(4, 5, 7), bool], Tensor[(11, 16, 9), float64]) */;
  %441 = %435.0;
  %442 = %440.1;
  (%441, %442, meta[relay.Constant][13] /* ty=Tensor[(140), bool] */)
}

def @func_4832() -> Tensor[(15, 7, 15), float32] {
  %443 = @func_1487() /* ty=(Tensor[(15, 7, 15), float32],) */;
  %443.0
}

def @func_4448() -> (Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), uint32]) {
  %444 = @func_1956() /* ty=Tensor[(15, 7, 15), float64] */;
  %445 = cast(%444, dtype="float64") /* ty=Tensor[(15, 7, 15), float64] */;
  %446 = reshape(%445, newshape=[15, 7, 15]) /* ty=Tensor[(15, 7, 15), float64] */;
  %447 = @func_1212(%446) /* ty=(Tensor[(12, 132), int16], Tensor[(15, 7, 15), uint32], Tensor[(15, 7, 15), float32]) */;
  %448 = %447.1;
  (%444, %448)
}

def @func_6656(%var_6643: Tensor[(10, 1, 12), float32]) -> Tensor[(10, 1, 12), float32] {
  %449 = cast(%var_6643, dtype="float32") /* ty=Tensor[(10, 1, 12), float32] */;
  cosh(%449) /* ty=Tensor[(10, 1, 12), float32] */
}

def @func_1603(%var_1580: Tensor[(15, 7, 15), float64]) -> (Tensor[(11, 16, 9), float32], Tensor[(15, 7, 15), float64]) {
  %450 = @func_984() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16], Tensor[(1584), int16]) */;
  %451 = %450.1;
  %452 = cast(%451, dtype="float32") /* ty=Tensor[(11, 16, 9), float32] */;
  %453 = @func_1110() /* ty=(Tensor[(15, 7, 15), float64],) */;
  %454 = %453.0;
  %455 = cast(%var_1580, dtype="float64") /* ty=Tensor[(15, 7, 15), float64] */;
  %456 = shape_of(%454, dtype="int32") /* ty=Tensor[(3), int32] */;
  %457 = cast(%454, dtype="float64") /* ty=Tensor[(15, 7, 15), float64] */;
  %458 = dyn.reshape(%455, %456, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %459 = log10(%452) /* ty=Tensor[(11, 16, 9), float32] */;
  %460 = divide(%457, %458) /* ty=Tensor[(15, 7, 15), float64] */;
  (%459, %460)
}

def @func_2881(%var_2877: Tensor[(1584), int16]) -> (Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16], Tensor[(1584), int16]) {
  %461 = @func_962() /* ty=(Tensor[(15, 7, 15), float64],) */;
  %462 = cast(%var_2877, dtype="int16") /* ty=Tensor[(1584), int16] */;
  %463 = cast(%var_2877, dtype="int16") /* ty=Tensor[(1584), int16] */;
  %464 = reshape(%462, newshape=[11, 16, 9]) /* ty=Tensor[(11, 16, 9), int16] */;
  %465 = reshape(%463, newshape=[11, 16, 9]) /* ty=Tensor[(11, 16, 9), int16] */;
  %466 = @func_917(%464, %465) /* ty=(Tensor[(11, 16, 9), int16],) */;
  %467 = %461.0;
  %468 = %466.0;
  (%467, %468, %var_2877)
}

def @func_5951() -> (Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), bool], Tensor[(?, 7, 3), int16], Tensor[(21), int16], Tensor[(15, 7, 15), float32]) {
  %469 = @func_812() /* ty=Tensor[(15, 7, 15), float32] */;
  %470 = cast(%469, dtype="float32") /* ty=Tensor[(15, 7, 15), float32] */;
  %471 = reshape(%470, newshape=[15, 7, 15]) /* ty=Tensor[(15, 7, 15), float32] */;
  %472 = cast(meta[relay.Constant][14] /* ty=Tensor[(21), int16] */, dtype="int16") /* ty=Tensor[(21), int16] */;
  %473 = reshape(%472, newshape=[1, 7, 3]) /* ty=Tensor[(1, 7, 3), int16] */;
  %474 = @func_2003(%471) /* ty=Tensor[(15, 7, 15), bool] */;
  %475 = @func_3073(%473) /* ty=Tensor[(?, 7, 3), int16] */;
  %476 = @func_4232() /* ty=Tensor[(15, 7, 15), float32] */;
  (%469, %474, %475, meta[relay.Constant][14] /* ty=Tensor[(21), int16] */, %476)
}

def @func_724(%var_719: Tensor[(9, 10, 5), int16]) -> (Tensor[(9, 10, 5), bool],) {
  %477 = cast(meta[relay.Constant][15] /* ty=Tensor[(9, 10, 5), int16] */, dtype="bool") /* ty=Tensor[(9, 10, 5), bool] */;
  %478 = shape_of(%var_719, dtype="int32") /* ty=Tensor[(3), int32] */;
  %479 = cast(%var_719, dtype="bool") /* ty=Tensor[(9, 10, 5), bool] */;
  %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %481 = greater(%479, %480) /* ty=Tensor[(9, 10, 5), bool] */;
  (%481,)
}

def @func_6020() -> (Tensor[(15, 7, 15), float32],) {
  %482 = @func_827() /* ty=(Tensor[(15, 7, 15), float32],) */;
  %483 = %482.0;
  (%483,)
}

def @func_2549(%var_2531: Tensor[(4, 5, 7), bool], %var_2532: Tensor[(4, 5, 7), bool]) -> (Tensor[(4, 5, 7), bool], Tensor[(11, 16, 9), float64]) {
  %484 = cast(%var_2532, dtype="bool") /* ty=Tensor[(4, 5, 7), bool] */;
  %485 = shape_of(%var_2531, dtype="int32") /* ty=Tensor[(3), int32] */;
  %486 = cast(%var_2531, dtype="bool") /* ty=Tensor[(4, 5, 7), bool] */;
  %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %488 = @func_1635() /* ty=(Tensor[(11, 16, 9), int16], Tensor[(11, 16, 9), int16]) */;
  %489 = %488.0;
  %490 = cast(%489, dtype="float64") /* ty=Tensor[(11, 16, 9), float64] */;
  %491 = logical_or(%486, %487) /* ty=Tensor[(4, 5, 7), bool] */;
  %492 = asinh(%490) /* ty=Tensor[(11, 16, 9), float64] */;
  (%491, %492)
}

def @func_6634() -> (Tensor[(15, 7, 15), float32], Tensor[(4, 15, 15), bool]) {
  %493 = @func_4232() /* ty=Tensor[(15, 7, 15), float32] */;
  %494 = @func_4411() /* ty=Tensor[(4, 15, 15), bool] */;
  (%493, %494)
}

def @func_3458(%var_3444: Tensor[(3, 1, 12), float64], %var_3454: Tensor[(5, 315), float64]) -> (Tensor[(3, 1, 12), float64], Tensor[(15, 7, 15), float32], Tensor[(5, 315), float64], Tensor[(15, 7, 15), float32]) {
  %495 = cast(%var_3444, dtype="float64") /* ty=Tensor[(3, 1, 12), float64] */;
  %496 = cast(%var_3454, dtype="float64") /* ty=Tensor[(5, 315), float64] */;
  %497 = reshape(%496, newshape=[15, 7, 15]) /* ty=Tensor[(15, 7, 15), float64] */;
  %498 = @func_1212(%497) /* ty=(Tensor[(12, 132), int16], Tensor[(15, 7, 15), uint32], Tensor[(15, 7, 15), float32]) */;
  %499 = @func_2944() /* ty=(Tensor[(15, 7, 15), float32],) */;
  %500 = rsqrt(%495) /* ty=Tensor[(3, 1, 12), float64] */;
  %501 = %498.2;
  %502 = %499.0;
  (%500, %501, %var_3454, %502)
}

def @func_917(%var_908: Tensor[(11, 16, 9), int16], %var_909: Tensor[(11, 16, 9), int16]) -> (Tensor[(11, 16, 9), int16],) {
  %503 = cast(%var_909, dtype="int16") /* ty=Tensor[(11, 16, 9), int16] */;
  %504 = shape_of(%var_908, dtype="int32") /* ty=Tensor[(3), int32] */;
  %505 = cast(%var_908, dtype="int16") /* ty=Tensor[(11, 16, 9), int16] */;
  %506 = dyn.reshape(%503, %504, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %507 = bitwise_xor(%505, %506) /* ty=Tensor[(11, 16, 9), int16] */;
  (%507,)
}

def @func_5575(%var_5519: Tensor[(13, 1, 10), float64]) -> (Tensor[(13, 1, 10), float64], Tensor[(11, 16, 9), int16], Tensor[(15, 7, 15), float64]) {
  %508 = cast(%var_5519, dtype="float64") /* ty=Tensor[(13, 1, 10), float64] */;
  %509 = @func_1161() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(9, 10, 5), bool], Tensor[(450), int16], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16], Tensor[(12, 132), int16]) */;
  %510 = @func_1260() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(1584), int16]) */;
  %511 = sin(%508) /* ty=Tensor[(13, 1, 10), float64] */;
  %512 = %509.5;
  %513 = %510.0;
  (%511, %512, %513)
}

def @func_3687() -> Tensor[(15, 7, 15), float32] {
  %514 = @func_1078() /* ty=(Tensor[(15, 7, 15), float32],) */;
  %514.0
}

def @func_4706() -> (Tensor[(11, 16, 9), float32],) {
  %515 = @func_2621() /* ty=(Tensor[(11, 16, 9), int16],) */;
  %516 = %515.0;
  %517 = cast(%516, dtype="float32") /* ty=Tensor[(11, 16, 9), float32] */;
  %518 = acosh(%517) /* ty=Tensor[(11, 16, 9), float32] */;
  (%518,)
}

def @func_5400() -> Tensor[(12, 2, 4), float64] {
  %519 = cast(meta[relay.Constant][16] /* ty=Tensor[(12, 2, 4), float64] */, dtype="float64") /* ty=Tensor[(12, 2, 4), float64] */;
  exp(%519) /* ty=Tensor[(12, 2, 4), float64] */
}

def @func_7529() -> (Tensor[(11, 16, 9), int16],) {
  %520 = @func_2825() /* ty=Tensor[(11, 16, 9), int16] */;
  (%520,)
}

def @func_2576() -> Tensor[(15, 7, 15), float32] {
  %521 = @func_1487() /* ty=(Tensor[(15, 7, 15), float32],) */;
  %522 = %521.0;
  %523 = cast(%522, dtype="float32") /* ty=Tensor[(15, 7, 15), float32] */;
  exp(%523) /* ty=Tensor[(15, 7, 15), float32] */
}

def @func_1695(%var_1693: Tensor[(450), int16]) -> (Tensor[(15, 7, 15), float64], Tensor[(450), int16], Tensor[(450), int16]) {
  %524 = @func_1260() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(1584), int16]) */;
  %525 = %524.0;
  %526 = cast(%525, dtype="float64") /* ty=Tensor[(15, 7, 15), float64] */;
  %527 = cast(%var_1693, dtype="int16") /* ty=Tensor[(450), int16] */;
  %528 = reshape(%526, newshape=[15, 7, 15]) /* ty=Tensor[(15, 7, 15), float64] */;
  %529 = reshape(%527, newshape=[450]) /* ty=Tensor[(450), int16] */;
  %530 = @func_1365(%528, %529) /* ty=(Tensor[(15, 7, 15), uint16], Tensor[(9, 10, 5), bool], Tensor[(450), int16]) */;
  %531 = %530.2;
  (%525, %531, %var_1693)
}

def @func_3256() -> (Tensor[(11, 16, 9), int16], Tensor[(11, 16, 9), int16], Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), float64]) {
  %532 = @func_2621() /* ty=(Tensor[(11, 16, 9), int16],) */;
  %533 = %532.0;
  %534 = cast(%533, dtype="int16") /* ty=Tensor[(11, 16, 9), int16] */;
  %535 = reshape(%534, newshape=[1584]) /* ty=Tensor[(1584), int16] */;
  %536 = @func_2881(%535) /* ty=(Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16], Tensor[(1584), int16]) */;
  %537 = @func_1260() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(1584), int16]) */;
  %538 = %537.0;
  %539 = cast(%538, dtype="float32") /* ty=Tensor[(15, 7, 15), float32] */;
  %540 = reshape(%539, newshape=[15, 7, 15]) /* ty=Tensor[(15, 7, 15), float32] */;
  %541 = @func_1388(%540) /* ty=Tensor[(15, 7, 15), bool] */;
  %542 = cast(%541, dtype="float64") /* ty=Tensor[(15, 7, 15), float64] */;
  %543 = shape_of(%538, dtype="int32") /* ty=Tensor[(3), int32] */;
  %544 = cast(%538, dtype="float64") /* ty=Tensor[(15, 7, 15), float64] */;
  %545 = dyn.reshape(%542, %543, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %546 = %536.1;
  %547 = floor_divide(%544, %545) /* ty=Tensor[(15, 7, 15), float64] */;
  %548 = @func_1956() /* ty=Tensor[(15, 7, 15), float64] */;
  (%533, %546, %547, %548)
}

def @func_4379() -> (Tensor[(11, 16, 9), int16], Tensor[(15, 7, 15), uint32]) {
  %549 = @func_3766() /* ty=(Tensor[(140), bool], Tensor[(11, 16, 9), int16]) */;
  %550 = @func_2864() /* ty=(Tensor[(15, 7, 15), uint32],) */;
  %551 = %549.1;
  %552 = %550.0;
  (%551, %552)
}

def @func_6750() -> (Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32]) {
  %553 = @func_5141() /* ty=Tensor[(15, 7, 15), float32] */;
  %554 = @func_4832() /* ty=Tensor[(15, 7, 15), float32] */;
  (%553, %554)
}

def @func_5655(%var_5606: Tensor[(12, 11, 9), float32], %var_5607: Tensor[(12, 11, 9), float32], %var_5636: int32) -> (Tensor[(12, 11, 9), float32], Tensor[(15, 7, 15), float32], Tensor[(12, 11, 9), int64], Tensor[(8, 15, 1), bool], int32, Tensor[(12, 11, 9), float32]) {
  %555 = cast(%var_5607, dtype="float32") /* ty=Tensor[(12, 11, 9), float32] */;
  %556 = shape_of(%var_5606, dtype="int32") /* ty=Tensor[(3), int32] */;
  %557 = cast(%var_5606, dtype="float32") /* ty=Tensor[(12, 11, 9), float32] */;
  %558 = dyn.reshape(%555, %556, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %559 = @func_2936() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32]) */;
  %560 = cast(%var_5606, dtype="int64") /* ty=Tensor[(12, 11, 9), int64] */;
  %561 = shape_of(%var_5607, dtype="int32") /* ty=Tensor[(3), int32] */;
  %562 = cast(%var_5607, dtype="int64") /* ty=Tensor[(12, 11, 9), int64] */;
  %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %564 = cast(%var_5636, dtype="int32") /* ty=int32 */;
  %565 = reshape(%564, newshape=[]) /* ty=int32 */;
  %566 = cast(%var_5606, dtype="float32") /* ty=Tensor[(12, 11, 9), float32] */;
  %567 = multiply(%557, %558) /* ty=Tensor[(12, 11, 9), float32] */;
  %568 = %559.0;
  %569 = bitwise_xor(%562, %563) /* ty=Tensor[(12, 11, 9), int64] */;
  %570 = @func_4774(%565) /* ty=Tensor[(8, 15, 1), bool] */;
  %571 = sigmoid(%566) /* ty=Tensor[(12, 11, 9), float32] */;
  (%567, %568, %569, %570, %var_5636, %571)
}

def @func_8599() -> Tensor[(15, 7, 15), uint32] {
  %572 = @func_6263() /* ty=(Tensor[(15, 7, 15), uint32],) */;
  %572.0
}

def @func_7618() -> Tensor[(15, 7, 15), float64] {
  %573 = @func_2375() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64]) */;
  %573.1
}

def @func_5795(%var_5777: float32, %var_5778: Tensor[(11, 13, 11), float32]) -> (Tensor[(11, 13, 11), float32],) {
  %574 = cast(%var_5777, dtype="float32") /* ty=float32 */;
  %575 = cast(%var_5778, dtype="float32") /* ty=Tensor[(11, 13, 11), float32] */;
  %576 = mod(%574, %575) /* ty=Tensor[(11, 13, 11), float32] */;
  (%576,)
}

def @func_1884(%var_1878: Tensor[(15, 7, 15), float32]) -> Tensor[(15, 7, 15), bool] {
  %577 = @func_827() /* ty=(Tensor[(15, 7, 15), float32],) */;
  %578 = %577.0;
  %579 = cast(%var_1878, dtype="bool") /* ty=Tensor[(15, 7, 15), bool] */;
  %580 = shape_of(%578, dtype="int32") /* ty=Tensor[(3), int32] */;
  %581 = cast(%578, dtype="bool") /* ty=Tensor[(15, 7, 15), bool] */;
  %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%581, %582) /* ty=Tensor[(15, 7, 15), bool] */
}

def @func_3073(%var_3060: Tensor[(1, 7, 3), int16]) -> Tensor[(?, 7, 3), int16] {
  %583 = cast(%var_3060, dtype="int16") /* ty=Tensor[(1, 7, 3), int16] */;
  %584 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(1, 7, 3), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %585 = cast(meta[relay.Constant][17] /* ty=Tensor[(1, 7, 3), int16] */, dtype="int16") /* ty=Tensor[(1, 7, 3), int16] */;
  %586 = dyn.reshape(%583, %584, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  right_shift(%585, %586) /* ty=Tensor[(?, 7, 3), int16] */
}

def @func_1440(%var_1434: Tensor[(15, 7, 15), float32]) -> (Tensor[(15, 7, 15), bool],) {
  %587 = @func_1078() /* ty=(Tensor[(15, 7, 15), float32],) */;
  %588 = %587.0;
  %589 = cast(%var_1434, dtype="bool") /* ty=Tensor[(15, 7, 15), bool] */;
  %590 = shape_of(%588, dtype="int32") /* ty=Tensor[(3), int32] */;
  %591 = cast(%588, dtype="bool") /* ty=Tensor[(15, 7, 15), bool] */;
  %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %593 = logical_or(%591, %592) /* ty=Tensor[(15, 7, 15), bool] */;
  (%593,)
}

def @func_6401(%var_6358: float64, %var_6359: Tensor[(12, 8, 2), float64], %var_6382: Tensor[(10, 4, 4), float64]) -> (Tensor[(12, 8, 2), float64], Tensor[(10, 4, 4), float32], Tensor[(12, 8, 2), float32], Tensor[(15, 7, 15), float64]) {
  %594 = cast(%var_6358, dtype="float64") /* ty=float64 */;
  %595 = cast(%var_6359, dtype="float64") /* ty=Tensor[(12, 8, 2), float64] */;
  %596 = cast(%var_6358, dtype="float32") /* ty=float32 */;
  %597 = cast(%var_6382, dtype="float32") /* ty=Tensor[(10, 4, 4), float32] */;
  %598 = cast(%var_6359, dtype="float32") /* ty=Tensor[(12, 8, 2), float32] */;
  %599 = acosh(%598) /* ty=Tensor[(12, 8, 2), float32] */;
  %600 = cast(%599, dtype="float32") /* ty=Tensor[(12, 8, 2), float32] */;
  %601 = @func_3335() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(12, 132), int16]) */;
  %602 = subtract(%594, %595) /* ty=Tensor[(12, 8, 2), float64] */;
  %603 = floor_mod(%596, %597) /* ty=Tensor[(10, 4, 4), float32] */;
  %604 = log10(%600) /* ty=Tensor[(12, 8, 2), float32] */;
  %605 = %601.0;
  (%602, %603, %604, %605)
}

def @func_5346(%var_5304: int32) -> (Tensor[(450), int16], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), bool], Tensor[(15, 7, 15), float32], Tensor[(11, 16, 9), bool], Tensor[(11, 16, 9), float64], Tensor[(4, 15, 15), bool], Tensor[(8, 15, 1), bool], int32, Tensor[(1584), int16]) {
  %606 = @func_3727() /* ty=(Tensor[(15, 7, 15), uint32], Tensor[(9, 10, 5), bool], Tensor[(450), int16], Tensor[(1584), int16]) */;
  %607 = @func_1418() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16]) */;
  %608 = @func_3687() /* ty=Tensor[(15, 7, 15), float32] */;
  %609 = cast(%608, dtype="float32") /* ty=Tensor[(15, 7, 15), float32] */;
  %610 = reshape(%609, newshape=[15, 7, 15]) /* ty=Tensor[(15, 7, 15), float32] */;
  %611 = @func_4706() /* ty=(Tensor[(11, 16, 9), float32],) */;
  %612 = %611.0;
  %613 = cast(%612, dtype="float32") /* ty=Tensor[(11, 16, 9), float32] */;
  %614 = log(%613) /* ty=Tensor[(11, 16, 9), float32] */;
  %615 = cast(%612, dtype="bool") /* ty=Tensor[(11, 16, 9), bool] */;
  %616 = shape_of(%614, dtype="int32") /* ty=Tensor[(3), int32] */;
  %617 = cast(%614, dtype="bool") /* ty=Tensor[(11, 16, 9), bool] */;
  %618 = dyn.reshape(%615, %616, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %619 = cast(%612, dtype="float64") /* ty=Tensor[(11, 16, 9), float64] */;
  %620 = cast(%var_5304, dtype="int32") /* ty=int32 */;
  %621 = reshape(%620, newshape=[]) /* ty=int32 */;
  %622 = @func_4750() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(1584), int16], Tensor[(1584), int16]) */;
  %623 = %606.2;
  %624 = %607.0;
  %625 = @func_1388(%610) /* ty=Tensor[(15, 7, 15), bool] */;
  %626 = @func_2576() /* ty=Tensor[(15, 7, 15), float32] */;
  %627 = less_equal(%617, %618) /* ty=Tensor[(11, 16, 9), bool] */;
  %628 = exp(%619) /* ty=Tensor[(11, 16, 9), float64] */;
  %629 = @func_4411() /* ty=Tensor[(4, 15, 15), bool] */;
  %630 = @func_4774(%621) /* ty=Tensor[(8, 15, 1), bool] */;
  %631 = %622.2;
  (%623, %608, %624, %625, %626, %627, %628, %629, %630, %var_5304, %631)
}

def @func_6907() -> (Tensor[(11, 16, 9), float32], Tensor[(11, 16, 9), int16], Tensor[(130, 1), float64], Tensor[(11, 16, 9), uint8]) {
  %632 = @func_2470() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), float32], Tensor[(15, 7, 15), bool], Tensor[(15, 7, 15), float32]) */;
  %633 = cast(meta[relay.Constant][18] /* ty=Tensor[(130, 1), float64] */, dtype="float64") /* ty=Tensor[(130, 1), float64] */;
  %634 = reshape(%633, newshape=[13, 1, 10]) /* ty=Tensor[(13, 1, 10), float64] */;
  %635 = @func_5575(%634) /* ty=(Tensor[(13, 1, 10), float64], Tensor[(11, 16, 9), int16], Tensor[(15, 7, 15), float64]) */;
  %636 = %632.1;
  %637 = cast(%636, dtype="int16") /* ty=Tensor[(11, 16, 9), int16] */;
  %638 = reshape(%637, newshape=[11, 16, 9]) /* ty=Tensor[(11, 16, 9), int16] */;
  %639 = %635.1;
  %640 = @func_4329(%638) /* ty=Tensor[(11, 16, 9), uint8] */;
  (%636, %639, meta[relay.Constant][18] /* ty=Tensor[(130, 1), float64] */, %640)
}

def @func_4100(%var_4093: Tensor[(1584), int16]) -> (Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64], Tensor[(1584), int16], Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), float32]) {
  %641 = @func_855() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64]) */;
  %642 = cast(%var_4093, dtype="int16") /* ty=Tensor[(1584), int16] */;
  %643 = reshape(%642, newshape=[1584]) /* ty=Tensor[(1584), int16] */;
  %644 = @func_2881(%643) /* ty=(Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16], Tensor[(1584), int16]) */;
  %645 = @func_2195() /* ty=(Tensor[(15, 7, 15), uint32], Tensor[(12, 132), int16], Tensor[(15, 7, 15), float64]) */;
  %646 = @func_827() /* ty=(Tensor[(15, 7, 15), float32],) */;
  %647 = %641.0;
  %648 = %644.0;
  %649 = %645.2;
  %650 = %646.0;
  (%647, %648, %var_4093, %649, %650)
}

def @func_7762() -> Tensor[(15, 7, 15), float32] {
  %651 = @func_7285() /* ty=(Tensor[(15, 7, 15), float32],) */;
  %651.0
}

def @func_1110() -> (Tensor[(15, 7, 15), float64],) {
  %652 = @func_984() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16], Tensor[(1584), int16]) */;
  %653 = %652.0;
  (%653,)
}

def @func_3421() -> (Tensor[(15, 7, 15), float64],) {
  %654 = @func_1418() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16]) */;
  %655 = %654.0;
  (%655,)
}

def @func_4962() -> (Tensor[(15, 7, 15), float64], Tensor[(3, 1, 12), float64], Tensor[(3, 12), float64], Tensor[(15, 7, 15), float64], Tensor[(12, 132), float32]) {
  %656 = @func_1110() /* ty=(Tensor[(15, 7, 15), float64],) */;
  %657 = cast(meta[relay.Constant][19] /* ty=Tensor[(3, 12), float64] */, dtype="float64") /* ty=Tensor[(3, 12), float64] */;
  %658 = %656.0;
  %659 = cast(%658, dtype="float64") /* ty=Tensor[(15, 7, 15), float64] */;
  %660 = reshape(%657, newshape=[3, 1, 12]) /* ty=Tensor[(3, 1, 12), float64] */;
  %661 = reshape(%659, newshape=[5, 315]) /* ty=Tensor[(5, 315), float64] */;
  %662 = @func_3458(%660, %661) /* ty=(Tensor[(3, 1, 12), float64], Tensor[(15, 7, 15), float32], Tensor[(5, 315), float64], Tensor[(15, 7, 15), float32]) */;
  %663 = @func_1418() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16]) */;
  %664 = %663.0;
  %665 = cast(%664, dtype="float64") /* ty=Tensor[(15, 7, 15), float64] */;
  %666 = cast(%658, dtype="float64") /* ty=Tensor[(15, 7, 15), float64] */;
  %667 = reshape(%666, newshape=[15, 7, 15]) /* ty=Tensor[(15, 7, 15), float64] */;
  %668 = @func_1212(%667) /* ty=(Tensor[(12, 132), int16], Tensor[(15, 7, 15), uint32], Tensor[(15, 7, 15), float32]) */;
  %669 = %668.0;
  %670 = cast(%669, dtype="float64") /* ty=Tensor[(12, 132), float64] */;
  %671 = sqrt(%670) /* ty=Tensor[(12, 132), float64] */;
  %672 = cast(%671, dtype="float32") /* ty=Tensor[(12, 132), float32] */;
  %673 = %662.0;
  %674 = acos(%665) /* ty=Tensor[(15, 7, 15), float64] */;
  %675 = sigmoid(%672) /* ty=Tensor[(12, 132), float32] */;
  (%658, %673, meta[relay.Constant][19] /* ty=Tensor[(3, 12), float64] */, %674, %675)
}

def @func_7830() -> Tensor[(12, 2, 4), int64] {
  %676 = @func_5400() /* ty=Tensor[(12, 2, 4), float64] */;
  %677 = cast(meta[relay.Constant][20] /* ty=Tensor[(12, 2, 4), float64] */, dtype="int64") /* ty=Tensor[(12, 2, 4), int64] */;
  %678 = shape_of(%676, dtype="int32") /* ty=Tensor[(3), int32] */;
  %679 = cast(%676, dtype="int64") /* ty=Tensor[(12, 2, 4), int64] */;
  %680 = dyn.reshape(%677, %678, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_xor(%679, %680) /* ty=Tensor[(12, 2, 4), int64] */
}

def @func_2375() -> (Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64]) {
  %681 = @func_1487() /* ty=(Tensor[(15, 7, 15), float32],) */;
  %682 = @func_1110() /* ty=(Tensor[(15, 7, 15), float64],) */;
  %683 = %681.0;
  %684 = %682.0;
  (%683, %684)
}

def @func_8334(%var_8231: Tensor[(1, 8, 16), bool], %var_8232: Tensor[(9, 8, 16), bool]) -> (Tensor[(9, 8, 16), bool], Tensor[(11, 16, 9), int16], Tensor[(15, 7, 15), float32], Tensor[(9, 8, 16), float64], Tensor[(1584), uint16], Tensor[(15, 7, 15), float32], Tensor[(9, 8, 16), float64]) {
  %685 = cast(%var_8231, dtype="bool") /* ty=Tensor[(1, 8, 16), bool] */;
  %686 = cast(%var_8232, dtype="bool") /* ty=Tensor[(9, 8, 16), bool] */;
  %687 = @func_3766() /* ty=(Tensor[(140), bool], Tensor[(11, 16, 9), int16]) */;
  %688 = @func_2470() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), float32], Tensor[(15, 7, 15), bool], Tensor[(15, 7, 15), float32]) */;
  %689 = cast(%var_8232, dtype="float64") /* ty=Tensor[(9, 8, 16), float64] */;
  %690 = @func_7969() /* ty=(Tensor[(15, 7, 15), uint32], Tensor[(15, 7, 15), float32], Tensor[(1584), uint16]) */;
  %691 = %688.3;
  %692 = cast(%691, dtype="float64") /* ty=Tensor[(15, 7, 15), float64] */;
  %693 = reshape(%692, newshape=[15, 7, 15]) /* ty=Tensor[(15, 7, 15), float64] */;
  %694 = @func_1212(%693) /* ty=(Tensor[(12, 132), int16], Tensor[(15, 7, 15), uint32], Tensor[(15, 7, 15), float32]) */;
  %695 = cast(%var_8232, dtype="float64") /* ty=Tensor[(9, 8, 16), float64] */;
  %696 = logical_or(%685, %686) /* ty=Tensor[(9, 8, 16), bool] */;
  %697 = %687.1;
  %698 = exp(%689) /* ty=Tensor[(9, 8, 16), float64] */;
  %699 = %690.2;
  %700 = %694.2;
  %701 = sqrt(%695) /* ty=Tensor[(9, 8, 16), float64] */;
  (%696, %697, %691, %698, %699, %700, %701)
}

def @func_8394(%var_8385: Tensor[(9, 15, 9), uint16]) -> (Tensor[(9, 15, 9), bool],) {
  %702 = cast(%var_8385, dtype="bool") /* ty=Tensor[(9, 15, 9), bool] */;
  %703 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(9, 15, 9), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %704 = cast(meta[relay.Constant][21] /* ty=Tensor[(9, 15, 9), uint16] */, dtype="bool") /* ty=Tensor[(9, 15, 9), bool] */;
  %705 = dyn.reshape(%702, %703, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %706 = greater_equal(%704, %705) /* ty=Tensor[(9, 15, 9), bool] */;
  (%706,)
}

def @func_5109() -> Tensor[(11, 16, 9), float32] {
  %707 = @func_2825() /* ty=Tensor[(11, 16, 9), int16] */;
  %708 = cast(%707, dtype="float32") /* ty=Tensor[(11, 16, 9), float32] */;
  sqrt(%708) /* ty=Tensor[(11, 16, 9), float32] */
}

def @func_3727() -> (Tensor[(15, 7, 15), uint32], Tensor[(9, 10, 5), bool], Tensor[(450), int16], Tensor[(1584), int16]) {
  %709 = @func_2864() /* ty=(Tensor[(15, 7, 15), uint32],) */;
  %710 = cast(meta[relay.Constant][22] /* ty=Tensor[(450), int16] */, dtype="int16") /* ty=Tensor[(450), int16] */;
  %711 = reshape(%710, newshape=[150, 3]) /* ty=Tensor[(150, 3), int16] */;
  %712 = @func_1072(%711) /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32], Tensor[(9, 10, 5), bool], Tensor[(150, 3), int16], Tensor[(15, 7, 15), float32], Tensor[(11, 16, 9), int16], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64]) */;
  %713 = @func_3590() /* ty=(Tensor[(1584), int16], Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), float64]) */;
  %714 = %709.0;
  %715 = %712.2;
  %716 = %713.0;
  (%714, %715, meta[relay.Constant][22] /* ty=Tensor[(450), int16] */, %716)
}

def @func_4411() -> Tensor[(4, 15, 15), bool] {
  %717 = cast(meta[relay.Constant][24] /* ty=Tensor[(4, 15, 15), int64] */, dtype="bool") /* ty=Tensor[(4, 15, 15), bool] */;
  %718 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(4, 15, 15), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %719 = cast(meta[relay.Constant][23] /* ty=Tensor[(4, 15, 15), int64] */, dtype="bool") /* ty=Tensor[(4, 15, 15), bool] */;
  %720 = dyn.reshape(%717, %718, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%719, %720) /* ty=Tensor[(4, 15, 15), bool] */
}

def @func_6112(%var_6080: Tensor[(450), int16], %var_6106: Tensor[(15, 7, 15), float64]) -> (Tensor[(15, 7, 15), float32], Tensor[(450), int16], Tensor[(450), int16], Tensor[(15, 7, 15), uint32]) {
  %721 = @func_855() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64]) */;
  %722 = cast(%var_6080, dtype="int16") /* ty=Tensor[(450), int16] */;
  %723 = reshape(%722, newshape=[450]) /* ty=Tensor[(450), int16] */;
  %724 = @func_1787(%723) /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64], Tensor[(450), int16]) */;
  %725 = @func_3590() /* ty=(Tensor[(1584), int16], Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), float64]) */;
  %726 = %725.1;
  %727 = cast(%var_6106, dtype="uint32") /* ty=Tensor[(15, 7, 15), uint32] */;
  %728 = shape_of(%726, dtype="int32") /* ty=Tensor[(3), int32] */;
  %729 = cast(%726, dtype="uint32") /* ty=Tensor[(15, 7, 15), uint32] */;
  %730 = dyn.reshape(%727, %728, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %731 = %721.0;
  %732 = %724.2;
  %733 = multiply(%729, %730) /* ty=Tensor[(15, 7, 15), uint32] */;
  (%731, %732, %var_6080, %733)
}

def @func_1635() -> (Tensor[(11, 16, 9), int16], Tensor[(11, 16, 9), int16]) {
  %734 = @func_984() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16], Tensor[(1584), int16]) */;
  %735 = %734.1;
  %736 = cast(%735, dtype="int16") /* ty=Tensor[(11, 16, 9), int16] */;
  %737 = cast(%735, dtype="int16") /* ty=Tensor[(11, 16, 9), int16] */;
  %738 = reshape(%736, newshape=[11, 16, 9]) /* ty=Tensor[(11, 16, 9), int16] */;
  %739 = reshape(%737, newshape=[11, 16, 9]) /* ty=Tensor[(11, 16, 9), int16] */;
  %740 = @func_917(%738, %739) /* ty=(Tensor[(11, 16, 9), int16],) */;
  %741 = %740.0;
  (%735, %741)
}

def @func_4807() -> (Tensor[(1584), int16], Tensor[(11, 16, 9), int16]) {
  %742 = @func_4750() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(1584), int16], Tensor[(1584), int16]) */;
  %743 = @func_2920() /* ty=(Tensor[(11, 16, 9), int16], Tensor[(11, 16, 9), float64], Tensor[(140), bool]) */;
  %744 = %742.2;
  %745 = %743.0;
  (%744, %745)
}

def @func_6230() -> (Tensor[(140), bool],) {
  %746 = @func_2920() /* ty=(Tensor[(11, 16, 9), int16], Tensor[(11, 16, 9), float64], Tensor[(140), bool]) */;
  %747 = %746.2;
  (%747,)
}

def @func_8058() -> Tensor[(15, 7, 15), float64] {
  %748 = @func_3335() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(12, 132), int16]) */;
  %748.0
}

def @func_1212(%var_1198: Tensor[(15, 7, 15), float64]) -> (Tensor[(12, 132), int16], Tensor[(15, 7, 15), uint32], Tensor[(15, 7, 15), float32]) {
  %749 = @func_1161() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(9, 10, 5), bool], Tensor[(450), int16], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16], Tensor[(12, 132), int16]) */;
  %750 = @func_855() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64]) */;
  %751 = %750.1;
  %752 = cast(%var_1198, dtype="uint32") /* ty=Tensor[(15, 7, 15), uint32] */;
  %753 = shape_of(%751, dtype="int32") /* ty=Tensor[(3), int32] */;
  %754 = cast(%751, dtype="uint32") /* ty=Tensor[(15, 7, 15), uint32] */;
  %755 = dyn.reshape(%752, %753, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %756 = cast(%751, dtype="float32") /* ty=Tensor[(15, 7, 15), float32] */;
  %757 = shape_of(%var_1198, dtype="int32") /* ty=Tensor[(3), int32] */;
  %758 = cast(%var_1198, dtype="float32") /* ty=Tensor[(15, 7, 15), float32] */;
  %759 = dyn.reshape(%756, %757, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %760 = %749.6;
  %761 = bitwise_and(%754, %755) /* ty=Tensor[(15, 7, 15), uint32] */;
  %762 = floor_mod(%758, %759) /* ty=Tensor[(15, 7, 15), float32] */;
  (%760, %761, %762)
}

def @func_8184() -> (Tensor[(12, 2, 4), float64],) {
  %763 = @func_5400() /* ty=Tensor[(12, 2, 4), float64] */;
  (%763,)
}

def @func_8159() -> (Tensor[(12, 2, 4), float64], Tensor[(1584), int16]) {
  %764 = @func_7742() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(1584), int16]) */;
  %765 = @func_5400() /* ty=Tensor[(12, 2, 4), float64] */;
  %766 = %764.1;
  (%765, %766)
}

def @func_3147(%var_3140: Tensor[(12, 7, 12), uint64], %var_3145: Tensor[(450), int16]) -> (Tensor[(12, 7, 12), uint64], Tensor[(15, 7, 15), float64], Tensor[(450), int16]) {
  %767 = cast(%var_3140, dtype="uint64") /* ty=Tensor[(12, 7, 12), uint64] */;
  %768 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(12, 7, 12), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %769 = cast(meta[relay.Constant][25] /* ty=Tensor[(12, 7, 12), uint64] */, dtype="uint64") /* ty=Tensor[(12, 7, 12), uint64] */;
  %770 = dyn.reshape(%767, %768, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %771 = cast(%var_3145, dtype="int16") /* ty=Tensor[(450), int16] */;
  %772 = reshape(%771, newshape=[450]) /* ty=Tensor[(450), int16] */;
  %773 = @func_1695(%772) /* ty=(Tensor[(15, 7, 15), float64], Tensor[(450), int16], Tensor[(450), int16]) */;
  %774 = bitwise_or(%769, %770) /* ty=Tensor[(12, 7, 12), uint64] */;
  %775 = %773.0;
  (%774, %775, %var_3145)
}

def @func_4654() -> (Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32]) {
  %776 = @func_1487() /* ty=(Tensor[(15, 7, 15), float32],) */;
  %777 = @func_1418() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16]) */;
  %778 = %777.0;
  %779 = cast(%778, dtype="float32") /* ty=Tensor[(15, 7, 15), float32] */;
  %780 = %776.0;
  %781 = log10(%779) /* ty=Tensor[(15, 7, 15), float32] */;
  (%780, %781)
}

def @func_4750() -> (Tensor[(15, 7, 15), float32], Tensor[(1584), int16], Tensor[(1584), int16]) {
  %782 = @func_827() /* ty=(Tensor[(15, 7, 15), float32],) */;
  %783 = %782.0;
  %784 = cast(meta[relay.Constant][26] /* ty=Tensor[(15, 7, 15), float32] */, dtype="float32") /* ty=Tensor[(15, 7, 15), float32] */;
  %785 = shape_of(%783, dtype="int32") /* ty=Tensor[(3), int32] */;
  %786 = cast(%783, dtype="float32") /* ty=Tensor[(15, 7, 15), float32] */;
  %787 = dyn.reshape(%784, %785, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %788 = cast(meta[relay.Constant][27] /* ty=Tensor[(1584), int16] */, dtype="int16") /* ty=Tensor[(1584), int16] */;
  %789 = reshape(%788, newshape=[1584]) /* ty=Tensor[(1584), int16] */;
  %790 = @func_2881(%789) /* ty=(Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16], Tensor[(1584), int16]) */;
  %791 = minimum(%786, %787) /* ty=Tensor[(15, 7, 15), float32] */;
  %792 = %790.2;
  (%791, %792, meta[relay.Constant][27] /* ty=Tensor[(1584), int16] */)
}

def @func_5732(%var_5701: Tensor[(12, 3, 1), bool]) -> (Tensor[(12, 3, ?), bool], Tensor[(12, 3, 16), int8], Tensor[(12, 3, 16), float32]) {
  %793 = cast(%var_5701, dtype="bool") /* ty=Tensor[(12, 3, 1), bool] */;
  %794 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(12, 3, 1), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %795 = cast(meta[relay.Constant][28] /* ty=Tensor[(12, 3, 1), bool] */, dtype="bool") /* ty=Tensor[(12, 3, 1), bool] */;
  %796 = dyn.reshape(%793, %794, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %797 = cast(%var_5701, dtype="int8") /* ty=Tensor[(12, 3, 1), int8] */;
  %798 = cast(meta[relay.Constant][29] /* ty=Tensor[(12, 3, 16), bool] */, dtype="int8") /* ty=Tensor[(12, 3, 16), int8] */;
  %799 = cast(meta[relay.Constant][28] /* ty=Tensor[(12, 3, 1), bool] */, dtype="bool") /* ty=Tensor[(12, 3, 1), bool] */;
  %800 = cast(meta[relay.Constant][29] /* ty=Tensor[(12, 3, 16), bool] */, dtype="bool") /* ty=Tensor[(12, 3, 16), bool] */;
  %801 = logical_and(%799, %800) /* ty=Tensor[(12, 3, 16), bool] */;
  %802 = cast(%801, dtype="float32") /* ty=Tensor[(12, 3, 16), float32] */;
  %803 = cast(%var_5701, dtype="float32") /* ty=Tensor[(12, 3, 1), float32] */;
  %804 = less(%795, %796) /* ty=Tensor[(12, 3, ?), bool] */;
  %805 = maximum(%797, %798) /* ty=Tensor[(12, 3, 16), int8] */;
  %806 = mod(%802, %803) /* ty=Tensor[(12, 3, 16), float32] */;
  (%804, %805, %806)
}

def @func_5505() -> Tensor[(15, 7, 15), uint32] {
  %807 = @func_3416() /* ty=(Tensor[(15, 7, 15), uint32],) */;
  %807.0
}

def @func_1260() -> (Tensor[(15, 7, 15), float64], Tensor[(1584), int16]) {
  %808 = @func_962() /* ty=(Tensor[(15, 7, 15), float64],) */;
  %809 = @func_984() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16], Tensor[(1584), int16]) */;
  %810 = %808.0;
  %811 = %809.2;
  (%810, %811)
}

def @func_5764(%var_5757: Tensor[(14, 15, 14), float64], %var_5758: Tensor[(14, 15, 14), float64]) -> (Tensor[(14, 15, 14), float64],) {
  %812 = cast(%var_5758, dtype="float64") /* ty=Tensor[(14, 15, 14), float64] */;
  %813 = shape_of(%var_5757, dtype="int32") /* ty=Tensor[(3), int32] */;
  %814 = cast(%var_5757, dtype="float64") /* ty=Tensor[(14, 15, 14), float64] */;
  %815 = dyn.reshape(%812, %813, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %816 = power(%814, %815) /* ty=Tensor[(14, 15, 14), float64] */;
  (%816,)
}

def @func_3416() -> (Tensor[(15, 7, 15), uint32],) {
  %817 = @func_2864() /* ty=(Tensor[(15, 7, 15), uint32],) */;
  %818 = %817.0;
  (%818,)
}

def @func_1078() -> (Tensor[(15, 7, 15), float32],) {
  %819 = @func_827() /* ty=(Tensor[(15, 7, 15), float32],) */;
  %820 = %819.0;
  (%820,)
}

def @func_6856(%var_6852: Tensor[(1573), float32]) -> (Tensor[(15, 7, 15), float64], Tensor[(11, 13, 11), float32], float32, Tensor[(1573), float32]) {
  %821 = cast(-8.59288f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %822 = cast(%var_6852, dtype="float32") /* ty=Tensor[(1573), float32] */;
  %823 = reshape(%821, newshape=[]) /* ty=float32 */;
  %824 = reshape(%822, newshape=[11, 13, 11]) /* ty=Tensor[(11, 13, 11), float32] */;
  %825 = @func_5795(%823, %824) /* ty=(Tensor[(11, 13, 11), float32],) */;
  %826 = @func_1956() /* ty=Tensor[(15, 7, 15), float64] */;
  %827 = %825.0;
  (%826, %827, -8.59288f /* ty=float32 */, %var_6852)
}

def @func_4774(%var_4765: int32) -> Tensor[(8, 15, 1), bool] {
  %828 = cast(%var_4765, dtype="bool") /* ty=bool */;
  %829 = cast(meta[relay.Constant][30] /* ty=Tensor[(8, 15, 1), int32] */, dtype="bool") /* ty=Tensor[(8, 15, 1), bool] */;
  not_equal(%828, %829) /* ty=Tensor[(8, 15, 1), bool] */
}

def @func_8537() -> (Tensor[(15, 7, 15), float64],) {
  %830 = @func_4448() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), uint32]) */;
  %831 = %830.0;
  (%831,)
}

def @func_4516(%var_4458: Tensor[(11, 13, 14), int64], %var_4459: Tensor[(11, 13, 14), int64]) -> (Tensor[(11, 13, 14), float64], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32], Tensor[(1584), int16], Tensor[(11, 13, 14), float32], Tensor[(15, 7, 15), float64]) {
  %832 = cast(%var_4458, dtype="float64") /* ty=Tensor[(11, 13, 14), float64] */;
  %833 = @func_2936() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32]) */;
  %834 = @func_2665() /* ty=(Tensor[(1584), int16],) */;
  %835 = cast(%var_4459, dtype="int64") /* ty=Tensor[(11, 13, 14), int64] */;
  %836 = shape_of(%var_4458, dtype="int32") /* ty=Tensor[(3), int32] */;
  %837 = cast(%var_4458, dtype="int64") /* ty=Tensor[(11, 13, 14), int64] */;
  %838 = dyn.reshape(%835, %836, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %839 = add(%837, %838) /* ty=Tensor[(11, 13, 14), int64] */;
  %840 = cast(%839, dtype="float64") /* ty=Tensor[(11, 13, 14), float64] */;
  %841 = rsqrt(%840) /* ty=Tensor[(11, 13, 14), float64] */;
  %842 = cast(meta[relay.Constant][31] /* ty=Tensor[(11, 13, 14), float64] */, dtype="int64") /* ty=Tensor[(11, 13, 14), int64] */;
  %843 = shape_of(%841, dtype="int32") /* ty=Tensor[(3), int32] */;
  %844 = cast(%841, dtype="int64") /* ty=Tensor[(11, 13, 14), int64] */;
  %845 = dyn.reshape(%842, %843, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %846 = bitwise_and(%844, %845) /* ty=Tensor[(11, 13, 14), int64] */;
  %847 = cast(%846, dtype="float32") /* ty=Tensor[(11, 13, 14), float32] */;
  %848 = @func_3256() /* ty=(Tensor[(11, 16, 9), int16], Tensor[(11, 16, 9), int16], Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), float64]) */;
  %849 = atanh(%832) /* ty=Tensor[(11, 13, 14), float64] */;
  %850 = %833.1;
  %851 = @func_4232() /* ty=Tensor[(15, 7, 15), float32] */;
  %852 = @func_2576() /* ty=Tensor[(15, 7, 15), float32] */;
  %853 = %834.0;
  %854 = acosh(%847) /* ty=Tensor[(11, 13, 14), float32] */;
  %855 = %848.2;
  (%849, %850, %851, %852, %853, %854, %855)
}

def @func_8015(%var_8010: Tensor[(8, 13, 12), uint64], %var_8011: Tensor[(8, 13, 12), uint64]) -> Tensor[(8, 13, 12), uint64] {
  %856 = cast(%var_8011, dtype="uint64") /* ty=Tensor[(8, 13, 12), uint64] */;
  %857 = shape_of(%var_8010, dtype="int32") /* ty=Tensor[(3), int32] */;
  %858 = cast(%var_8010, dtype="uint64") /* ty=Tensor[(8, 13, 12), uint64] */;
  %859 = dyn.reshape(%856, %857, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  minimum(%858, %859) /* ty=Tensor[(8, 13, 12), uint64] */
}

def @func_4762() -> Tensor[(15, 7, 15), float32] {
  %860 = @func_2936() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32]) */;
  %860.1
}

def @func_1418() -> (Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16]) {
  %861 = @func_1110() /* ty=(Tensor[(15, 7, 15), float64],) */;
  %862 = @func_984() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16], Tensor[(1584), int16]) */;
  %863 = %861.0;
  %864 = %862.1;
  (%863, %864)
}

def @func_855() -> (Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64]) {
  %865 = @func_827() /* ty=(Tensor[(15, 7, 15), float32],) */;
  %866 = @func_827() /* ty=(Tensor[(15, 7, 15), float32],) */;
  %867 = %866.0;
  %868 = cast(%867, dtype="float64") /* ty=Tensor[(15, 7, 15), float64] */;
  %869 = %865.0;
  %870 = acosh(%868) /* ty=Tensor[(15, 7, 15), float64] */;
  (%869, %870)
}

def @func_6712(%var_6696: Tensor[(1584), int16]) -> (Tensor[(15, 7, 15), float32], Tensor[(1584), bool]) {
  %871 = @func_4179() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(1584), int16]) */;
  %872 = %871.1;
  %873 = cast(%var_6696, dtype="bool") /* ty=Tensor[(1584), bool] */;
  %874 = shape_of(%872, dtype="int32") /* ty=Tensor[(1), int32] */;
  %875 = cast(%872, dtype="bool") /* ty=Tensor[(1584), bool] */;
  %876 = dyn.reshape(%873, %874, newshape=[]) /* ty=Tensor[(?), bool] */;
  %877 = @func_2576() /* ty=Tensor[(15, 7, 15), float32] */;
  %878 = greater(%875, %876) /* ty=Tensor[(1584), bool] */;
  (%877, %878)
}

def @func_827() -> (Tensor[(15, 7, 15), float32],) {
  %879 = @func_812() /* ty=Tensor[(15, 7, 15), float32] */;
  (%879,)
}

def @func_3590() -> (Tensor[(1584), int16], Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), float64]) {
  %880 = @func_2665() /* ty=(Tensor[(1584), int16],) */;
  %881 = @func_855() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64]) */;
  %882 = %881.0;
  %883 = cast(%882, dtype="float64") /* ty=Tensor[(15, 7, 15), float64] */;
  %884 = %880.0;
  %885 = asin(%883) /* ty=Tensor[(15, 7, 15), float64] */;
  %886 = @func_1921() /* ty=Tensor[(15, 7, 15), float64] */;
  (%884, %885, %886)
}

def @func_2195() -> (Tensor[(15, 7, 15), uint32], Tensor[(12, 132), int16], Tensor[(15, 7, 15), float64]) {
  %887 = @func_827() /* ty=(Tensor[(15, 7, 15), float32],) */;
  %888 = %887.0;
  %889 = cast(meta[relay.Constant][32] /* ty=Tensor[(15, 7, 15), float32] */, dtype="uint32") /* ty=Tensor[(15, 7, 15), uint32] */;
  %890 = shape_of(%888, dtype="int32") /* ty=Tensor[(3), int32] */;
  %891 = cast(%888, dtype="uint32") /* ty=Tensor[(15, 7, 15), uint32] */;
  %892 = dyn.reshape(%889, %890, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %893 = cast(meta[relay.Constant][32] /* ty=Tensor[(15, 7, 15), float32] */, dtype="float64") /* ty=Tensor[(15, 7, 15), float64] */;
  %894 = reshape(%893, newshape=[15, 7, 15]) /* ty=Tensor[(15, 7, 15), float64] */;
  %895 = @func_1212(%894) /* ty=(Tensor[(12, 132), int16], Tensor[(15, 7, 15), uint32], Tensor[(15, 7, 15), float32]) */;
  %896 = bitwise_or(%891, %892) /* ty=Tensor[(15, 7, 15), uint32] */;
  %897 = %895.0;
  %898 = @func_1921() /* ty=Tensor[(15, 7, 15), float64] */;
  (%896, %897, %898)
}

def @func_3930() -> (Tensor[(1584), float64], Tensor[(11, 16, 9), float64], Tensor[(140), bool], Tensor[(15, 7, 15), float32]) {
  %899 = @func_2088() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(1584), float64], Tensor[(15, 7, 15), float32]) */;
  %900 = cast(meta[relay.Constant][33] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
  %901 = cast(meta[relay.Constant][33] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
  %902 = reshape(%900, newshape=[4, 5, 7]) /* ty=Tensor[(4, 5, 7), bool] */;
  %903 = reshape(%901, newshape=[4, 5, 7]) /* ty=Tensor[(4, 5, 7), bool] */;
  %904 = @func_2549(%902, %903) /* ty=(Tensor[(4, 5, 7), bool], Tensor[(11, 16, 9), float64]) */;
  %905 = @func_2158() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(11, 16, 9), float32]) */;
  %906 = %899.1;
  %907 = %904.1;
  %908 = %905.0;
  (%906, %907, meta[relay.Constant][33] /* ty=Tensor[(140), bool] */, %908)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_3729() -> (Tensor[(15, 7, 15), uint32], Tensor[(9, 10, 5), bool], Tensor[(450), int16], Tensor[(1584), int16]) {
  @func_3727() /* ty=(Tensor[(15, 7, 15), uint32], Tensor[(9, 10, 5), bool], Tensor[(450), int16], Tensor[(1584), int16]) */
}

def @func_6115(%var_6113: Tensor[(450), int16], %var_6114: Tensor[(15, 7, 15), float64]) -> (Tensor[(15, 7, 15), float32], Tensor[(450), int16], Tensor[(450), int16], Tensor[(15, 7, 15), uint32]) {
  %13 = fn (%var_6080: Tensor[(450), int16], %var_6106: Tensor[(15, 7, 15), float64]) -> (Tensor[(15, 7, 15), float32], Tensor[(450), int16], Tensor[(450), int16], Tensor[(15, 7, 15), uint32]) {
    %0 = @func_855() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64]) */;
    %1 = cast(%var_6080, dtype="int16") /* ty=Tensor[(450), int16] */;
    %2 = reshape(%1, newshape=[450]) /* ty=Tensor[(450), int16] */;
    %3 = @func_1787(%2) /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64], Tensor[(450), int16]) */;
    %4 = @func_3590() /* ty=(Tensor[(1584), int16], Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), float64]) */;
    %5 = %4.1;
    %6 = cast(%var_6106, dtype="uint32") /* ty=Tensor[(15, 7, 15), uint32] */;
    %7 = shape_of(%5, dtype="int32") /* ty=Tensor[(3), int32] */;
    %8 = cast(%5, dtype="uint32") /* ty=Tensor[(15, 7, 15), uint32] */;
    %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %10 = %0.0;
    %11 = %3.2;
    %12 = multiply(%8, %9) /* ty=Tensor[(15, 7, 15), uint32] */;
    (%10, %11, %var_6080, %12)
  };
  %13(%var_6113, %var_6114) /* ty=(Tensor[(15, 7, 15), float32], Tensor[(450), int16], Tensor[(450), int16], Tensor[(15, 7, 15), uint32]) */
}

def @func_1488() -> (Tensor[(15, 7, 15), float32],) {
  %16 = fn () -> (Tensor[(15, 7, 15), float32],) {
    %14 = @func_855() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64]) */;
    %15 = %14.0;
    (%15,)
  };
  %16() /* ty=(Tensor[(15, 7, 15), float32],) */
}

def @func_4331(%var_4330: Tensor[(11, 16, 9), int16]) -> Tensor[(11, 16, 9), uint8] {
  %28 = fn (%var_4292: Tensor[(11, 16, 9), int16]) -> Tensor[(11, 16, 9), uint8] {
    %17 = @func_3256() /* ty=(Tensor[(11, 16, 9), int16], Tensor[(11, 16, 9), int16], Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), float64]) */;
    %18 = %17.1;
    %19 = cast(%var_4292, dtype="bool") /* ty=Tensor[(11, 16, 9), bool] */;
    %20 = shape_of(%18, dtype="int32") /* ty=Tensor[(3), int32] */;
    %21 = cast(%18, dtype="bool") /* ty=Tensor[(11, 16, 9), bool] */;
    %22 = dyn.reshape(%19, %20, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %23 = greater(%21, %22) /* ty=Tensor[(11, 16, 9), bool] */;
    %24 = cast(%var_4292, dtype="uint8") /* ty=Tensor[(11, 16, 9), uint8] */;
    %25 = shape_of(%23, dtype="int32") /* ty=Tensor[(3), int32] */;
    %26 = cast(%23, dtype="uint8") /* ty=Tensor[(11, 16, 9), uint8] */;
    %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    left_shift(%26, %27) /* ty=Tensor[(11, 16, 9), uint8] */
  };
  %28(%var_4330) /* ty=Tensor[(11, 16, 9), uint8] */
}

def @func_1695(%var_1693: Tensor[(450), int16]) -> (Tensor[(15, 7, 15), float64], Tensor[(450), int16], Tensor[(450), int16]) {
  %29 = @func_1260() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(1584), int16]) */;
  %30 = %29.0;
  %31 = cast(%30, dtype="float64") /* ty=Tensor[(15, 7, 15), float64] */;
  %32 = cast(%var_1693, dtype="int16") /* ty=Tensor[(450), int16] */;
  %33 = reshape(%31, newshape=[15, 7, 15]) /* ty=Tensor[(15, 7, 15), float64] */;
  %34 = reshape(%32, newshape=[450]) /* ty=Tensor[(450), int16] */;
  %35 = @func_1365(%33, %34) /* ty=(Tensor[(15, 7, 15), uint16], Tensor[(9, 10, 5), bool], Tensor[(450), int16]) */;
  %36 = %35.2;
  (%30, %36, %var_1693)
}

def @func_3421() -> (Tensor[(15, 7, 15), float64],) {
  %37 = @func_1418() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16]) */;
  %38 = %37.0;
  (%38,)
}

def @func_7847(%var_7845: Tensor[(8, 7, 3), int64]) -> Tensor[(8, 7, 3), float64] {
  @func_7844(%var_7845) /* ty=Tensor[(8, 7, 3), float64] */
}

def @func_6752() -> (Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32]) {
  @func_6750() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32]) */
}

def @func_7454(%var_7452: Tensor[(9, 3, 1), int16], %var_7453: Tensor[(9, 3, 12), int16]) -> (Tensor[(9, 3, 12), int16], Tensor[(15, 7, 15), float32]) {
  @func_7450(%var_7452, %var_7453) /* ty=(Tensor[(9, 3, 12), int16], Tensor[(15, 7, 15), float32]) */
}

def @func_8741(%var_8740: Tensor[(15, 7, 15), float64]) -> (Tensor[(15, 7, 15), bool], Tensor[(140), bool], Tensor[(15, 7, 15), uint32], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32], float32, Tensor[(13, 121), float32]) {
  %58 = fn (%var_8684: Tensor[(15, 7, 15), float64]) -> (Tensor[(15, 7, 15), bool], Tensor[(140), bool], Tensor[(15, 7, 15), uint32], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32], float32, Tensor[(13, 121), float32]) {
    %39 = @func_2195() /* ty=(Tensor[(15, 7, 15), uint32], Tensor[(12, 132), int16], Tensor[(15, 7, 15), float64]) */;
    %40 = %39.2;
    %41 = cast(%var_8684, dtype="bool") /* ty=Tensor[(15, 7, 15), bool] */;
    %42 = shape_of(%40, dtype="int32") /* ty=Tensor[(3), int32] */;
    %43 = cast(%40, dtype="bool") /* ty=Tensor[(15, 7, 15), bool] */;
    %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %45 = @func_6230() /* ty=(Tensor[(140), bool],) */;
    %46 = @func_3416() /* ty=(Tensor[(15, 7, 15), uint32],) */;
    %47 = @func_2944() /* ty=(Tensor[(15, 7, 15), float32],) */;
    %48 = @func_2944() /* ty=(Tensor[(15, 7, 15), float32],) */;
    %49 = cast(meta[relay.Constant][0] /* ty=Tensor[(13, 121), float32] */, dtype="float32") /* ty=Tensor[(13, 121), float32] */;
    %50 = reshape(%49, newshape=[1573]) /* ty=Tensor[(1573), float32] */;
    %51 = @func_6856(%50) /* ty=(Tensor[(15, 7, 15), float64], Tensor[(11, 13, 11), float32], float32, Tensor[(1573), float32]) */;
    %52 = less(%43, %44) /* ty=Tensor[(15, 7, 15), bool] */;
    %53 = %45.0;
    %54 = %46.0;
    %55 = %47.0;
    %56 = %48.0;
    %57 = %51.2;
    (%52, %53, %54, %55, %56, %57, meta[relay.Constant][0] /* ty=Tensor[(13, 121), float32] */)
  };
  %58(%var_8740) /* ty=(Tensor[(15, 7, 15), bool], Tensor[(140), bool], Tensor[(15, 7, 15), uint32], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32], float32, Tensor[(13, 121), float32]) */
}

def @func_3423() -> (Tensor[(15, 7, 15), float64],) {
  @func_3421() /* ty=(Tensor[(15, 7, 15), float64],) */
}

def @func_4764() -> Tensor[(15, 7, 15), float32] {
  @func_4762() /* ty=Tensor[(15, 7, 15), float32] */
}

def @func_3458(%var_3444: Tensor[(3, 1, 12), float64], %var_3454: Tensor[(5, 315), float64]) -> (Tensor[(3, 1, 12), float64], Tensor[(15, 7, 15), float32], Tensor[(5, 315), float64], Tensor[(15, 7, 15), float32]) {
  %59 = cast(%var_3444, dtype="float64") /* ty=Tensor[(3, 1, 12), float64] */;
  %60 = cast(%var_3454, dtype="float64") /* ty=Tensor[(5, 315), float64] */;
  %61 = reshape(%60, newshape=[15, 7, 15]) /* ty=Tensor[(15, 7, 15), float64] */;
  %62 = @func_1212(%61) /* ty=(Tensor[(12, 132), int16], Tensor[(15, 7, 15), uint32], Tensor[(15, 7, 15), float32]) */;
  %63 = @func_2944() /* ty=(Tensor[(15, 7, 15), float32],) */;
  %64 = rsqrt(%59) /* ty=Tensor[(3, 1, 12), float64] */;
  %65 = %62.2;
  %66 = %63.0;
  (%64, %65, %var_3454, %66)
}

def @func_3151(%var_3149: Tensor[(12, 7, 12), uint64], %var_3150: Tensor[(450), int16]) -> (Tensor[(12, 7, 12), uint64], Tensor[(15, 7, 15), float64], Tensor[(450), int16]) {
  @func_3147(%var_3149, %var_3150) /* ty=(Tensor[(12, 7, 12), uint64], Tensor[(15, 7, 15), float64], Tensor[(450), int16]) */
}

def @func_8185() -> (Tensor[(12, 2, 4), float64],) {
  %68 = fn () -> (Tensor[(12, 2, 4), float64],) {
    %67 = @func_5400() /* ty=Tensor[(12, 2, 4), float64] */;
    (%67,)
  };
  %68() /* ty=(Tensor[(12, 2, 4), float64],) */
}

def @func_1388(%var_1381: Tensor[(15, 7, 15), float32]) -> Tensor[(15, 7, 15), bool] {
  %69 = @func_1161() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(9, 10, 5), bool], Tensor[(450), int16], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16], Tensor[(12, 132), int16]) */;
  %70 = %69.0;
  %71 = cast(%var_1381, dtype="bool") /* ty=Tensor[(15, 7, 15), bool] */;
  %72 = shape_of(%70, dtype="int32") /* ty=Tensor[(3), int32] */;
  %73 = cast(%70, dtype="bool") /* ty=Tensor[(15, 7, 15), bool] */;
  %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%73, %74) /* ty=Tensor[(15, 7, 15), bool] */
}

def @func_1698(%var_1696: Tensor[(450), int16]) -> (Tensor[(15, 7, 15), float64], Tensor[(450), int16], Tensor[(450), int16]) {
  @func_1695(%var_1696) /* ty=(Tensor[(15, 7, 15), float64], Tensor[(450), int16], Tensor[(450), int16]) */
}

def @func_6636() -> (Tensor[(15, 7, 15), float32], Tensor[(4, 15, 15), bool]) {
  @func_6634() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(4, 15, 15), bool]) */
}

def @func_1443(%var_1441: Tensor[(15, 7, 15), float32]) -> (Tensor[(15, 7, 15), bool],) {
  @func_1440(%var_1441) /* ty=(Tensor[(15, 7, 15), bool],) */
}

def @func_7189(%var_7188: Tensor[(130, 11), float64]) -> (Tensor[(130, 11), uint8],) {
  %80 = fn (%var_7174: Tensor[(130, 11), float64]) -> (Tensor[(130, 11), uint8],) {
    %75 = @func_6907() /* ty=(Tensor[(11, 16, 9), float32], Tensor[(11, 16, 9), int16], Tensor[(130, 1), float64], Tensor[(11, 16, 9), uint8]) */;
    %76 = %75.2;
    %77 = cast(%76, dtype="uint8") /* ty=Tensor[(130, 1), uint8] */;
    %78 = cast(%var_7174, dtype="uint8") /* ty=Tensor[(130, 11), uint8] */;
    %79 = maximum(%77, %78) /* ty=Tensor[(130, 11), uint8] */;
    (%79,)
  };
  %80(%var_7188) /* ty=(Tensor[(130, 11), uint8],) */
}

def @func_3915(%var_3914: Tensor[(13, 3, 7), int64]) -> (Tensor[(15, 7, 15), float32], Tensor[(13, 3, 7), float32], Tensor[(15, 7, 15), float32]) {
  %94 = fn (%var_3888: Tensor[(13, 3, 7), int64]) -> (Tensor[(15, 7, 15), float32], Tensor[(13, 3, 7), float32], Tensor[(15, 7, 15), float32]) {
    %81 = cast(meta[relay.Constant][1] /* ty=Tensor[(13, 3, 7), int64] */, dtype="bool") /* ty=Tensor[(13, 3, 7), bool] */;
    %82 = shape_of(%var_3888, dtype="int32") /* ty=Tensor[(3), int32] */;
    %83 = cast(%var_3888, dtype="bool") /* ty=Tensor[(13, 3, 7), bool] */;
    %84 = dyn.reshape(%81, %82, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %85 = greater_equal(%83, %84) /* ty=Tensor[(13, 3, 7), bool] */;
    %86 = cast(%85, dtype="float32") /* ty=Tensor[(13, 3, 7), float32] */;
    %87 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(13, 3, 7), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %88 = cast(meta[relay.Constant][1] /* ty=Tensor[(13, 3, 7), int64] */, dtype="float32") /* ty=Tensor[(13, 3, 7), float32] */;
    %89 = dyn.reshape(%86, %87, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %90 = @func_2936() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32]) */;
    %91 = @func_3687() /* ty=Tensor[(15, 7, 15), float32] */;
    %92 = mod(%88, %89) /* ty=Tensor[(13, 3, 7), float32] */;
    %93 = %90.0;
    (%91, %92, %93)
  };
  %94(%var_3914) /* ty=(Tensor[(15, 7, 15), float32], Tensor[(13, 3, 7), float32], Tensor[(15, 7, 15), float32]) */
}

def @func_3076(%var_3074: Tensor[(1, 7, 3), int16]) -> Tensor[(?, 7, 3), int16] {
  @func_3073(%var_3074) /* ty=Tensor[(?, 7, 3), int16] */
}

def @func_8015(%var_8010: Tensor[(8, 13, 12), uint64], %var_8011: Tensor[(8, 13, 12), uint64]) -> Tensor[(8, 13, 12), uint64] {
  %95 = cast(%var_8011, dtype="uint64") /* ty=Tensor[(8, 13, 12), uint64] */;
  %96 = shape_of(%var_8010, dtype="int32") /* ty=Tensor[(3), int32] */;
  %97 = cast(%var_8010, dtype="uint64") /* ty=Tensor[(8, 13, 12), uint64] */;
  %98 = dyn.reshape(%95, %96, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  minimum(%97, %98) /* ty=Tensor[(8, 13, 12), uint64] */
}

def @func_6231() -> (Tensor[(140), bool],) {
  %101 = fn () -> (Tensor[(140), bool],) {
    %99 = @func_2920() /* ty=(Tensor[(11, 16, 9), int16], Tensor[(11, 16, 9), float64], Tensor[(140), bool]) */;
    %100 = %99.2;
    (%100,)
  };
  %101() /* ty=(Tensor[(140), bool],) */
}

def @func_7764() -> Tensor[(15, 7, 15), float32] {
  @func_7762() /* ty=Tensor[(15, 7, 15), float32] */
}

def @func_4707() -> (Tensor[(11, 16, 9), float32],) {
  %106 = fn () -> (Tensor[(11, 16, 9), float32],) {
    %102 = @func_2621() /* ty=(Tensor[(11, 16, 9), int16],) */;
    %103 = %102.0;
    %104 = cast(%103, dtype="float32") /* ty=Tensor[(11, 16, 9), float32] */;
    %105 = acosh(%104) /* ty=Tensor[(11, 16, 9), float32] */;
    (%105,)
  };
  %106() /* ty=(Tensor[(11, 16, 9), float32],) */
}

def @func_3767() -> (Tensor[(140), bool], Tensor[(11, 16, 9), int16]) {
  %111 = fn () -> (Tensor[(140), bool], Tensor[(11, 16, 9), int16]) {
    %107 = @func_2920() /* ty=(Tensor[(11, 16, 9), int16], Tensor[(11, 16, 9), float64], Tensor[(140), bool]) */;
    %108 = @func_1161() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(9, 10, 5), bool], Tensor[(450), int16], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16], Tensor[(12, 132), int16]) */;
    %109 = %107.2;
    %110 = %108.5;
    (%109, %110)
  };
  %111() /* ty=(Tensor[(140), bool], Tensor[(11, 16, 9), int16]) */
}

def @func_6634() -> (Tensor[(15, 7, 15), float32], Tensor[(4, 15, 15), bool]) {
  %112 = @func_4232() /* ty=Tensor[(15, 7, 15), float32] */;
  %113 = @func_4411() /* ty=Tensor[(4, 15, 15), bool] */;
  (%112, %113)
}

def @func_8161() -> (Tensor[(12, 2, 4), float64], Tensor[(1584), int16]) {
  @func_8159() /* ty=(Tensor[(12, 2, 4), float64], Tensor[(1584), int16]) */
}

def @func_8338(%var_8336: Tensor[(1, 8, 16), bool], %var_8337: Tensor[(9, 8, 16), bool]) -> (Tensor[(9, 8, 16), bool], Tensor[(11, 16, 9), int16], Tensor[(15, 7, 15), float32], Tensor[(9, 8, 16), float64], Tensor[(1584), uint16], Tensor[(15, 7, 15), float32], Tensor[(9, 8, 16), float64]) {
  @func_8334(%var_8336, %var_8337) /* ty=(Tensor[(9, 8, 16), bool], Tensor[(11, 16, 9), int16], Tensor[(15, 7, 15), float32], Tensor[(9, 8, 16), float64], Tensor[(1584), uint16], Tensor[(15, 7, 15), float32], Tensor[(9, 8, 16), float64]) */
}

def @func_726(%var_725: Tensor[(9, 10, 5), int16]) -> (Tensor[(9, 10, 5), bool],) {
  %119 = fn (%var_719: Tensor[(9, 10, 5), int16]) -> (Tensor[(9, 10, 5), bool],) {
    %114 = cast(meta[relay.Constant][2] /* ty=Tensor[(9, 10, 5), int16] */, dtype="bool") /* ty=Tensor[(9, 10, 5), bool] */;
    %115 = shape_of(%var_719, dtype="int32") /* ty=Tensor[(3), int32] */;
    %116 = cast(%var_719, dtype="bool") /* ty=Tensor[(9, 10, 5), bool] */;
    %117 = dyn.reshape(%114, %115, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %118 = greater(%116, %117) /* ty=Tensor[(9, 10, 5), bool] */;
    (%118,)
  };
  %119(%var_725) /* ty=(Tensor[(9, 10, 5), bool],) */
}

def @func_2340(%var_2338: Tensor[(15, 7, 15), float32]) -> (Tensor[(15, 7, 15), bool], Tensor[(15, 7, 15), float32], Tensor[(1584), int16], Tensor[(9, 10, 5), bool]) {
  @func_2337(%var_2338) /* ty=(Tensor[(15, 7, 15), bool], Tensor[(15, 7, 15), float32], Tensor[(1584), int16], Tensor[(9, 10, 5), bool]) */
}

def @func_6401(%var_6358: float64, %var_6359: Tensor[(12, 8, 2), float64], %var_6382: Tensor[(10, 4, 4), float64]) -> (Tensor[(12, 8, 2), float64], Tensor[(10, 4, 4), float32], Tensor[(12, 8, 2), float32], Tensor[(15, 7, 15), float64]) {
  %120 = cast(%var_6358, dtype="float64") /* ty=float64 */;
  %121 = cast(%var_6359, dtype="float64") /* ty=Tensor[(12, 8, 2), float64] */;
  %122 = cast(%var_6358, dtype="float32") /* ty=float32 */;
  %123 = cast(%var_6382, dtype="float32") /* ty=Tensor[(10, 4, 4), float32] */;
  %124 = cast(%var_6359, dtype="float32") /* ty=Tensor[(12, 8, 2), float32] */;
  %125 = acosh(%124) /* ty=Tensor[(12, 8, 2), float32] */;
  %126 = cast(%125, dtype="float32") /* ty=Tensor[(12, 8, 2), float32] */;
  %127 = @func_3335() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(12, 132), int16]) */;
  %128 = subtract(%120, %121) /* ty=Tensor[(12, 8, 2), float64] */;
  %129 = floor_mod(%122, %123) /* ty=Tensor[(10, 4, 4), float32] */;
  %130 = log10(%126) /* ty=Tensor[(12, 8, 2), float32] */;
  %131 = %127.0;
  (%128, %129, %130, %131)
}

def @func_1112() -> (Tensor[(15, 7, 15), float64],) {
  @func_1110() /* ty=(Tensor[(15, 7, 15), float64],) */
}

def @func_5987(%var_5986: Tensor[(36), float64]) -> (Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32], Tensor[(3, 1, 12), float64], Tensor[(36), float64]) {
  %142 = fn (%var_5983: Tensor[(36), float64]) -> (Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32], Tensor[(3, 1, 12), float64], Tensor[(36), float64]) {
    %132 = @func_855() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64]) */;
    %133 = @func_1161() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(9, 10, 5), bool], Tensor[(450), int16], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16], Tensor[(12, 132), int16]) */;
    %134 = cast(%var_5983, dtype="float64") /* ty=Tensor[(36), float64] */;
    %135 = %132.0;
    %136 = cast(%135, dtype="float64") /* ty=Tensor[(15, 7, 15), float64] */;
    %137 = reshape(%134, newshape=[3, 1, 12]) /* ty=Tensor[(3, 1, 12), float64] */;
    %138 = reshape(%136, newshape=[5, 315]) /* ty=Tensor[(5, 315), float64] */;
    %139 = @func_3458(%137, %138) /* ty=(Tensor[(3, 1, 12), float64], Tensor[(15, 7, 15), float32], Tensor[(5, 315), float64], Tensor[(15, 7, 15), float32]) */;
    %140 = %133.3;
    %141 = %139.0;
    (%135, %140, %141, %var_5983)
  };
  %142(%var_5986) /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32], Tensor[(3, 1, 12), float64], Tensor[(36), float64]) */
}

def @func_5110() -> Tensor[(11, 16, 9), float32] {
  %145 = fn () -> Tensor[(11, 16, 9), float32] {
    %143 = @func_2825() /* ty=Tensor[(11, 16, 9), int16] */;
    %144 = cast(%143, dtype="float32") /* ty=Tensor[(11, 16, 9), float32] */;
    sqrt(%144) /* ty=Tensor[(11, 16, 9), float32] */
  };
  %145() /* ty=Tensor[(11, 16, 9), float32] */
}

def @func_7677() -> (Tensor[(1, 15, 1), float32],) {
  @func_7675() /* ty=(Tensor[(1, 15, 1), float32],) */
}

def @func_1440(%var_1434: Tensor[(15, 7, 15), float32]) -> (Tensor[(15, 7, 15), bool],) {
  %146 = @func_1078() /* ty=(Tensor[(15, 7, 15), float32],) */;
  %147 = %146.0;
  %148 = cast(%var_1434, dtype="bool") /* ty=Tensor[(15, 7, 15), bool] */;
  %149 = shape_of(%147, dtype="int32") /* ty=Tensor[(3), int32] */;
  %150 = cast(%147, dtype="bool") /* ty=Tensor[(15, 7, 15), bool] */;
  %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %152 = logical_or(%150, %151) /* ty=Tensor[(15, 7, 15), bool] */;
  (%152,)
}

def @func_8334(%var_8231: Tensor[(1, 8, 16), bool], %var_8232: Tensor[(9, 8, 16), bool]) -> (Tensor[(9, 8, 16), bool], Tensor[(11, 16, 9), int16], Tensor[(15, 7, 15), float32], Tensor[(9, 8, 16), float64], Tensor[(1584), uint16], Tensor[(15, 7, 15), float32], Tensor[(9, 8, 16), float64]) {
  %153 = cast(%var_8231, dtype="bool") /* ty=Tensor[(1, 8, 16), bool] */;
  %154 = cast(%var_8232, dtype="bool") /* ty=Tensor[(9, 8, 16), bool] */;
  %155 = @func_3766() /* ty=(Tensor[(140), bool], Tensor[(11, 16, 9), int16]) */;
  %156 = @func_2470() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), float32], Tensor[(15, 7, 15), bool], Tensor[(15, 7, 15), float32]) */;
  %157 = cast(%var_8232, dtype="float64") /* ty=Tensor[(9, 8, 16), float64] */;
  %158 = @func_7969() /* ty=(Tensor[(15, 7, 15), uint32], Tensor[(15, 7, 15), float32], Tensor[(1584), uint16]) */;
  %159 = %156.3;
  %160 = cast(%159, dtype="float64") /* ty=Tensor[(15, 7, 15), float64] */;
  %161 = reshape(%160, newshape=[15, 7, 15]) /* ty=Tensor[(15, 7, 15), float64] */;
  %162 = @func_1212(%161) /* ty=(Tensor[(12, 132), int16], Tensor[(15, 7, 15), uint32], Tensor[(15, 7, 15), float32]) */;
  %163 = cast(%var_8232, dtype="float64") /* ty=Tensor[(9, 8, 16), float64] */;
  %164 = logical_or(%153, %154) /* ty=Tensor[(9, 8, 16), bool] */;
  %165 = %155.1;
  %166 = exp(%157) /* ty=Tensor[(9, 8, 16), float64] */;
  %167 = %158.2;
  %168 = %162.2;
  %169 = sqrt(%163) /* ty=Tensor[(9, 8, 16), float64] */;
  (%164, %165, %159, %166, %167, %168, %169)
}

def @func_7762() -> Tensor[(15, 7, 15), float32] {
  %170 = @func_7285() /* ty=(Tensor[(15, 7, 15), float32],) */;
  %170.0
}

def @func_6908() -> (Tensor[(11, 16, 9), float32], Tensor[(11, 16, 9), int16], Tensor[(130, 1), float64], Tensor[(11, 16, 9), uint8]) {
  %180 = fn () -> (Tensor[(11, 16, 9), float32], Tensor[(11, 16, 9), int16], Tensor[(130, 1), float64], Tensor[(11, 16, 9), uint8]) {
    %171 = @func_2470() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), float32], Tensor[(15, 7, 15), bool], Tensor[(15, 7, 15), float32]) */;
    %172 = cast(meta[relay.Constant][3] /* ty=Tensor[(130, 1), float64] */, dtype="float64") /* ty=Tensor[(130, 1), float64] */;
    %173 = reshape(%172, newshape=[13, 1, 10]) /* ty=Tensor[(13, 1, 10), float64] */;
    %174 = @func_5575(%173) /* ty=(Tensor[(13, 1, 10), float64], Tensor[(11, 16, 9), int16], Tensor[(15, 7, 15), float64]) */;
    %175 = %171.1;
    %176 = cast(%175, dtype="int16") /* ty=Tensor[(11, 16, 9), int16] */;
    %177 = reshape(%176, newshape=[11, 16, 9]) /* ty=Tensor[(11, 16, 9), int16] */;
    %178 = %174.1;
    %179 = @func_4329(%177) /* ty=Tensor[(11, 16, 9), uint8] */;
    (%175, %178, meta[relay.Constant][3] /* ty=Tensor[(130, 1), float64] */, %179)
  };
  %180() /* ty=(Tensor[(11, 16, 9), float32], Tensor[(11, 16, 9), int16], Tensor[(130, 1), float64], Tensor[(11, 16, 9), uint8]) */
}

def @func_3491() -> (Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32], Tensor[(450), int16], Tensor[(450), int16]) {
  %181 = @func_827() /* ty=(Tensor[(15, 7, 15), float32],) */;
  %182 = @func_827() /* ty=(Tensor[(15, 7, 15), float32],) */;
  %183 = cast(meta[relay.Constant][4] /* ty=Tensor[(450), int16] */, dtype="int16") /* ty=Tensor[(450), int16] */;
  %184 = reshape(%183, newshape=[450]) /* ty=Tensor[(450), int16] */;
  %185 = @func_1695(%184) /* ty=(Tensor[(15, 7, 15), float64], Tensor[(450), int16], Tensor[(450), int16]) */;
  %186 = %181.0;
  %187 = %182.0;
  %188 = %185.2;
  (%186, %187, %188, meta[relay.Constant][4] /* ty=Tensor[(450), int16] */)
}

def @func_5143() -> Tensor[(15, 7, 15), float32] {
  @func_5141() /* ty=Tensor[(15, 7, 15), float32] */
}

def @func_857() -> (Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64]) {
  @func_855() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64]) */
}

def @func_8524(%var_8519: Tensor[(140), bool]) -> (Tensor[(140), bool],) {
  %189 = @func_6230() /* ty=(Tensor[(140), bool],) */;
  %190 = %189.0;
  %191 = cast(%var_8519, dtype="bool") /* ty=Tensor[(140), bool] */;
  %192 = shape_of(%190, dtype="int32") /* ty=Tensor[(1), int32] */;
  %193 = cast(%190, dtype="bool") /* ty=Tensor[(140), bool] */;
  %194 = dyn.reshape(%191, %192, newshape=[]) /* ty=Tensor[(?), bool] */;
  %195 = logical_and(%193, %194) /* ty=Tensor[(140), bool] */;
  (%195,)
}

def @func_2159() -> (Tensor[(15, 7, 15), float32], Tensor[(11, 16, 9), float32]) {
  %202 = fn () -> (Tensor[(15, 7, 15), float32], Tensor[(11, 16, 9), float32]) {
    %196 = @func_2088() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(1584), float64], Tensor[(15, 7, 15), float32]) */;
    %197 = %196.2;
    %198 = cast(%197, dtype="float64") /* ty=Tensor[(15, 7, 15), float64] */;
    %199 = reshape(%198, newshape=[15, 7, 15]) /* ty=Tensor[(15, 7, 15), float64] */;
    %200 = @func_1603(%199) /* ty=(Tensor[(11, 16, 9), float32], Tensor[(15, 7, 15), float64]) */;
    %201 = %200.0;
    (%197, %201)
  };
  %202() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(11, 16, 9), float32]) */
}

def @func_3010() -> (Tensor[(15, 7, 15), float32],) {
  %206 = fn () -> (Tensor[(15, 7, 15), float32],) {
    %203 = @func_1956() /* ty=Tensor[(15, 7, 15), float64] */;
    %204 = cast(%203, dtype="float32") /* ty=Tensor[(15, 7, 15), float32] */;
    %205 = atan(%204) /* ty=Tensor[(15, 7, 15), float32] */;
    (%205,)
  };
  %206() /* ty=(Tensor[(15, 7, 15), float32],) */
}

def @func_3390() -> (Tensor[(11, 16, 9), int16],) {
  %207 = @func_2621() /* ty=(Tensor[(11, 16, 9), int16],) */;
  %208 = %207.0;
  (%208,)
}

def @func_3462(%var_3460: Tensor[(3, 1, 12), float64], %var_3461: Tensor[(5, 315), float64]) -> (Tensor[(3, 1, 12), float64], Tensor[(15, 7, 15), float32], Tensor[(5, 315), float64], Tensor[(15, 7, 15), float32]) {
  @func_3458(%var_3460, %var_3461) /* ty=(Tensor[(3, 1, 12), float64], Tensor[(15, 7, 15), float32], Tensor[(5, 315), float64], Tensor[(15, 7, 15), float32]) */
}

def @func_6656(%var_6643: Tensor[(10, 1, 12), float32]) -> Tensor[(10, 1, 12), float32] {
  %209 = cast(%var_6643, dtype="float32") /* ty=Tensor[(10, 1, 12), float32] */;
  cosh(%209) /* ty=Tensor[(10, 1, 12), float32] */
}

def @func_5141() -> Tensor[(15, 7, 15), float32] {
  %210 = @func_3930() /* ty=(Tensor[(1584), float64], Tensor[(11, 16, 9), float64], Tensor[(140), bool], Tensor[(15, 7, 15), float32]) */;
  %210.3
}

def @func_5578(%var_5576: Tensor[(13, 1, 10), float64]) -> (Tensor[(13, 1, 10), float64], Tensor[(11, 16, 9), int16], Tensor[(15, 7, 15), float64]) {
  @func_5575(%var_5576) /* ty=(Tensor[(13, 1, 10), float64], Tensor[(11, 16, 9), int16], Tensor[(15, 7, 15), float64]) */
}

def @func_5655(%var_5606: Tensor[(12, 11, 9), float32], %var_5607: Tensor[(12, 11, 9), float32], %var_5636: int32) -> (Tensor[(12, 11, 9), float32], Tensor[(15, 7, 15), float32], Tensor[(12, 11, 9), int64], Tensor[(8, 15, 1), bool], int32, Tensor[(12, 11, 9), float32]) {
  %211 = cast(%var_5607, dtype="float32") /* ty=Tensor[(12, 11, 9), float32] */;
  %212 = shape_of(%var_5606, dtype="int32") /* ty=Tensor[(3), int32] */;
  %213 = cast(%var_5606, dtype="float32") /* ty=Tensor[(12, 11, 9), float32] */;
  %214 = dyn.reshape(%211, %212, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %215 = @func_2936() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32]) */;
  %216 = cast(%var_5606, dtype="int64") /* ty=Tensor[(12, 11, 9), int64] */;
  %217 = shape_of(%var_5607, dtype="int32") /* ty=Tensor[(3), int32] */;
  %218 = cast(%var_5607, dtype="int64") /* ty=Tensor[(12, 11, 9), int64] */;
  %219 = dyn.reshape(%216, %217, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %220 = cast(%var_5636, dtype="int32") /* ty=int32 */;
  %221 = reshape(%220, newshape=[]) /* ty=int32 */;
  %222 = cast(%var_5606, dtype="float32") /* ty=Tensor[(12, 11, 9), float32] */;
  %223 = multiply(%213, %214) /* ty=Tensor[(12, 11, 9), float32] */;
  %224 = %215.0;
  %225 = bitwise_xor(%218, %219) /* ty=Tensor[(12, 11, 9), int64] */;
  %226 = @func_4774(%221) /* ty=Tensor[(8, 15, 1), bool] */;
  %227 = sigmoid(%222) /* ty=Tensor[(12, 11, 9), float32] */;
  (%223, %224, %225, %226, %var_5636, %227)
}

def @func_5732(%var_5701: Tensor[(12, 3, 1), bool]) -> (Tensor[(12, 3, ?), bool], Tensor[(12, 3, 16), int8], Tensor[(12, 3, 16), float32]) {
  %228 = cast(%var_5701, dtype="bool") /* ty=Tensor[(12, 3, 1), bool] */;
  %229 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(12, 3, 1), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %230 = cast(meta[relay.Constant][5] /* ty=Tensor[(12, 3, 1), bool] */, dtype="bool") /* ty=Tensor[(12, 3, 1), bool] */;
  %231 = dyn.reshape(%228, %229, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %232 = cast(%var_5701, dtype="int8") /* ty=Tensor[(12, 3, 1), int8] */;
  %233 = cast(meta[relay.Constant][6] /* ty=Tensor[(12, 3, 16), bool] */, dtype="int8") /* ty=Tensor[(12, 3, 16), int8] */;
  %234 = cast(meta[relay.Constant][5] /* ty=Tensor[(12, 3, 1), bool] */, dtype="bool") /* ty=Tensor[(12, 3, 1), bool] */;
  %235 = cast(meta[relay.Constant][6] /* ty=Tensor[(12, 3, 16), bool] */, dtype="bool") /* ty=Tensor[(12, 3, 16), bool] */;
  %236 = logical_and(%234, %235) /* ty=Tensor[(12, 3, 16), bool] */;
  %237 = cast(%236, dtype="float32") /* ty=Tensor[(12, 3, 16), float32] */;
  %238 = cast(%var_5701, dtype="float32") /* ty=Tensor[(12, 3, 1), float32] */;
  %239 = less(%230, %231) /* ty=Tensor[(12, 3, ?), bool] */;
  %240 = maximum(%232, %233) /* ty=Tensor[(12, 3, 16), int8] */;
  %241 = mod(%237, %238) /* ty=Tensor[(12, 3, 16), float32] */;
  (%239, %240, %241)
}

def @func_8019(%var_8017: Tensor[(8, 13, 12), uint64], %var_8018: Tensor[(8, 13, 12), uint64]) -> Tensor[(8, 13, 12), uint64] {
  @func_8015(%var_8017, %var_8018) /* ty=Tensor[(8, 13, 12), uint64] */
}

def @func_4100(%var_4093: Tensor[(1584), int16]) -> (Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64], Tensor[(1584), int16], Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), float32]) {
  %242 = @func_855() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64]) */;
  %243 = cast(%var_4093, dtype="int16") /* ty=Tensor[(1584), int16] */;
  %244 = reshape(%243, newshape=[1584]) /* ty=Tensor[(1584), int16] */;
  %245 = @func_2881(%244) /* ty=(Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16], Tensor[(1584), int16]) */;
  %246 = @func_2195() /* ty=(Tensor[(15, 7, 15), uint32], Tensor[(12, 132), int16], Tensor[(15, 7, 15), float64]) */;
  %247 = @func_827() /* ty=(Tensor[(15, 7, 15), float32],) */;
  %248 = %242.0;
  %249 = %245.0;
  %250 = %246.2;
  %251 = %247.0;
  (%248, %249, %var_4093, %250, %251)
}

def @func_8527(%var_8525: Tensor[(140), bool]) -> (Tensor[(140), bool],) {
  @func_8524(%var_8525) /* ty=(Tensor[(140), bool],) */
}

def @func_1074(%var_1073: Tensor[(150, 3), int16]) -> (Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32], Tensor[(9, 10, 5), bool], Tensor[(150, 3), int16], Tensor[(15, 7, 15), float32], Tensor[(11, 16, 9), int16], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64]) {
  %269 = fn (%var_1041: Tensor[(150, 3), int16]) -> (Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32], Tensor[(9, 10, 5), bool], Tensor[(150, 3), int16], Tensor[(15, 7, 15), float32], Tensor[(11, 16, 9), int16], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64]) {
    %252 = @func_827() /* ty=(Tensor[(15, 7, 15), float32],) */;
    %253 = cast(%var_1041, dtype="int16") /* ty=Tensor[(150, 3), int16] */;
    %254 = reshape(%253, newshape=[9, 10, 5]) /* ty=Tensor[(9, 10, 5), int16] */;
    %255 = @func_724(%254) /* ty=(Tensor[(9, 10, 5), bool],) */;
    %256 = @func_984() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16], Tensor[(1584), int16]) */;
    %257 = @func_812() /* ty=Tensor[(15, 7, 15), float32] */;
    %258 = cast(%257, dtype="float64") /* ty=Tensor[(15, 7, 15), float64] */;
    %259 = log2(%258) /* ty=Tensor[(15, 7, 15), float64] */;
    %260 = cast(%259, dtype="float32") /* ty=Tensor[(15, 7, 15), float32] */;
    %261 = @func_962() /* ty=(Tensor[(15, 7, 15), float64],) */;
    %262 = %252.0;
    %263 = @func_812() /* ty=Tensor[(15, 7, 15), float32] */;
    %264 = %255.0;
    %265 = @func_812() /* ty=Tensor[(15, 7, 15), float32] */;
    %266 = %256.1;
    %267 = asinh(%260) /* ty=Tensor[(15, 7, 15), float32] */;
    %268 = %261.0;
    (%262, %263, %264, %var_1041, %265, %266, %267, %268)
  };
  %269(%var_1073) /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32], Tensor[(9, 10, 5), bool], Tensor[(150, 3), int16], Tensor[(15, 7, 15), float32], Tensor[(11, 16, 9), int16], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64]) */
}

def @func_4776(%var_4775: int32) -> Tensor[(8, 15, 1), bool] {
  %272 = fn (%var_4765: int32) -> Tensor[(8, 15, 1), bool] {
    %270 = cast(%var_4765, dtype="bool") /* ty=bool */;
    %271 = cast(meta[relay.Constant][7] /* ty=Tensor[(8, 15, 1), int32] */, dtype="bool") /* ty=Tensor[(8, 15, 1), bool] */;
    not_equal(%270, %271) /* ty=Tensor[(8, 15, 1), bool] */
  };
  %272(%var_4775) /* ty=Tensor[(8, 15, 1), bool] */
}

def @func_8538() -> (Tensor[(15, 7, 15), float64],) {
  %275 = fn () -> (Tensor[(15, 7, 15), float64],) {
    %273 = @func_4448() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), uint32]) */;
    %274 = %273.0;
    (%274,)
  };
  %275() /* ty=(Tensor[(15, 7, 15), float64],) */
}

def @func_1418() -> (Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16]) {
  %276 = @func_1110() /* ty=(Tensor[(15, 7, 15), float64],) */;
  %277 = @func_984() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16], Tensor[(1584), int16]) */;
  %278 = %276.0;
  %279 = %277.1;
  (%278, %279)
}

def @func_3073(%var_3060: Tensor[(1, 7, 3), int16]) -> Tensor[(?, 7, 3), int16] {
  %280 = cast(%var_3060, dtype="int16") /* ty=Tensor[(1, 7, 3), int16] */;
  %281 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(1, 7, 3), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %282 = cast(meta[relay.Constant][8] /* ty=Tensor[(1, 7, 3), int16] */, dtype="int16") /* ty=Tensor[(1, 7, 3), int16] */;
  %283 = dyn.reshape(%280, %281, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  right_shift(%282, %283) /* ty=Tensor[(?, 7, 3), int16] */
}

def @func_3727() -> (Tensor[(15, 7, 15), uint32], Tensor[(9, 10, 5), bool], Tensor[(450), int16], Tensor[(1584), int16]) {
  %284 = @func_2864() /* ty=(Tensor[(15, 7, 15), uint32],) */;
  %285 = cast(meta[relay.Constant][9] /* ty=Tensor[(450), int16] */, dtype="int16") /* ty=Tensor[(450), int16] */;
  %286 = reshape(%285, newshape=[150, 3]) /* ty=Tensor[(150, 3), int16] */;
  %287 = @func_1072(%286) /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32], Tensor[(9, 10, 5), bool], Tensor[(150, 3), int16], Tensor[(15, 7, 15), float32], Tensor[(11, 16, 9), int16], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64]) */;
  %288 = @func_3590() /* ty=(Tensor[(1584), int16], Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), float64]) */;
  %289 = %284.0;
  %290 = %287.2;
  %291 = %288.0;
  (%289, %290, meta[relay.Constant][9] /* ty=Tensor[(450), int16] */, %291)
}

def @func_3147(%var_3140: Tensor[(12, 7, 12), uint64], %var_3145: Tensor[(450), int16]) -> (Tensor[(12, 7, 12), uint64], Tensor[(15, 7, 15), float64], Tensor[(450), int16]) {
  %292 = cast(%var_3140, dtype="uint64") /* ty=Tensor[(12, 7, 12), uint64] */;
  %293 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(12, 7, 12), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %294 = cast(meta[relay.Constant][10] /* ty=Tensor[(12, 7, 12), uint64] */, dtype="uint64") /* ty=Tensor[(12, 7, 12), uint64] */;
  %295 = dyn.reshape(%292, %293, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %296 = cast(%var_3145, dtype="int16") /* ty=Tensor[(450), int16] */;
  %297 = reshape(%296, newshape=[450]) /* ty=Tensor[(450), int16] */;
  %298 = @func_1695(%297) /* ty=(Tensor[(15, 7, 15), float64], Tensor[(450), int16], Tensor[(450), int16]) */;
  %299 = bitwise_or(%294, %295) /* ty=Tensor[(12, 7, 12), uint64] */;
  %300 = %298.0;
  (%299, %300, %var_3145)
}

def @func_7844(%var_7833: Tensor[(8, 7, 3), int64]) -> Tensor[(8, 7, 3), float64] {
  %301 = cast(meta[relay.Constant][11] /* ty=Tensor[(8, 1, 3), int64] */, dtype="bool") /* ty=Tensor[(8, 1, 3), bool] */;
  %302 = cast(%var_7833, dtype="bool") /* ty=Tensor[(8, 7, 3), bool] */;
  %303 = greater(%301, %302) /* ty=Tensor[(8, 7, 3), bool] */;
  %304 = cast(%303, dtype="float64") /* ty=Tensor[(8, 7, 3), float64] */;
  sqrt(%304) /* ty=Tensor[(8, 7, 3), float64] */
}

def @func_2883(%var_2882: Tensor[(1584), int16]) -> (Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16], Tensor[(1584), int16]) {
  %313 = fn (%var_2877: Tensor[(1584), int16]) -> (Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16], Tensor[(1584), int16]) {
    %305 = @func_962() /* ty=(Tensor[(15, 7, 15), float64],) */;
    %306 = cast(%var_2877, dtype="int16") /* ty=Tensor[(1584), int16] */;
    %307 = cast(%var_2877, dtype="int16") /* ty=Tensor[(1584), int16] */;
    %308 = reshape(%306, newshape=[11, 16, 9]) /* ty=Tensor[(11, 16, 9), int16] */;
    %309 = reshape(%307, newshape=[11, 16, 9]) /* ty=Tensor[(11, 16, 9), int16] */;
    %310 = @func_917(%308, %309) /* ty=(Tensor[(11, 16, 9), int16],) */;
    %311 = %305.0;
    %312 = %310.0;
    (%311, %312, %var_2877)
  };
  %313(%var_2882) /* ty=(Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16], Tensor[(1584), int16]) */
}

def @func_6514() -> (Tensor[(15, 7, 15), float32],) {
  %314 = @func_4750() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(1584), int16], Tensor[(1584), int16]) */;
  %315 = %314.0;
  (%315,)
}

def @func_5798(%var_5796: float32, %var_5797: Tensor[(11, 13, 11), float32]) -> (Tensor[(11, 13, 11), float32],) {
  %319 = fn (%var_5777: float32, %var_5778: Tensor[(11, 13, 11), float32]) -> (Tensor[(11, 13, 11), float32],) {
    %316 = cast(%var_5777, dtype="float32") /* ty=float32 */;
    %317 = cast(%var_5778, dtype="float32") /* ty=Tensor[(11, 13, 11), float32] */;
    %318 = mod(%316, %317) /* ty=Tensor[(11, 13, 11), float32] */;
    (%318,)
  };
  %319(%var_5796, %var_5797) /* ty=(Tensor[(11, 13, 11), float32],) */
}

def @func_6264() -> (Tensor[(15, 7, 15), uint32],) {
  %322 = fn () -> (Tensor[(15, 7, 15), uint32],) {
    %320 = @func_2195() /* ty=(Tensor[(15, 7, 15), uint32], Tensor[(12, 132), int16], Tensor[(15, 7, 15), float64]) */;
    %321 = %320.0;
    (%321,)
  };
  %322() /* ty=(Tensor[(15, 7, 15), uint32],) */
}

def @func_7744() -> (Tensor[(15, 7, 15), float64], Tensor[(1584), int16]) {
  @func_7742() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(1584), int16]) */
}

def @func_2666() -> (Tensor[(1584), int16],) {
  %325 = fn () -> (Tensor[(1584), int16],) {
    %323 = @func_984() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16], Tensor[(1584), int16]) */;
    %324 = %323.2;
    (%324,)
  };
  %325() /* ty=(Tensor[(1584), int16],) */
}

def @func_4881() -> (Tensor[(11, 16, 9), float64],) {
  %328 = fn () -> (Tensor[(11, 16, 9), float64],) {
    %326 = @func_3622() /* ty=(Tensor[(15, 7, 15), uint16], Tensor[(11, 16, 9), float64], Tensor[(1584), int16]) */;
    %327 = %326.1;
    (%327,)
  };
  %328() /* ty=(Tensor[(11, 16, 9), float64],) */
}

def @func_5735(%var_5733: Tensor[(12, 3, 1), bool]) -> (Tensor[(12, 3, ?), bool], Tensor[(12, 3, 16), int8], Tensor[(12, 3, 16), float32]) {
  @func_5732(%var_5733) /* ty=(Tensor[(12, 3, ?), bool], Tensor[(12, 3, 16), int8], Tensor[(12, 3, 16), float32]) */
}

def @func_8601() -> Tensor[(15, 7, 15), uint32] {
  @func_8599() /* ty=Tensor[(15, 7, 15), uint32] */
}

def @func_1261() -> (Tensor[(15, 7, 15), float64], Tensor[(1584), int16]) {
  %333 = fn () -> (Tensor[(15, 7, 15), float64], Tensor[(1584), int16]) {
    %329 = @func_962() /* ty=(Tensor[(15, 7, 15), float64],) */;
    %330 = @func_984() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16], Tensor[(1584), int16]) */;
    %331 = %329.0;
    %332 = %330.2;
    (%331, %332)
  };
  %333() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(1584), int16]) */
}

def @func_3869() -> (Tensor[(11, 16, 9), float32],) {
  %334 = @func_3766() /* ty=(Tensor[(140), bool], Tensor[(11, 16, 9), int16]) */;
  %335 = %334.1;
  %336 = cast(%335, dtype="float32") /* ty=Tensor[(11, 16, 9), float32] */;
  %337 = sinh(%336) /* ty=Tensor[(11, 16, 9), float32] */;
  (%337,)
}

def @func_7742() -> (Tensor[(15, 7, 15), float64], Tensor[(1584), int16]) {
  %338 = @func_4750() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(1584), int16], Tensor[(1584), int16]) */;
  %339 = @func_1956() /* ty=Tensor[(15, 7, 15), float64] */;
  %340 = %338.1;
  (%339, %340)
}

def @func_6750() -> (Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32]) {
  %341 = @func_5141() /* ty=Tensor[(15, 7, 15), float32] */;
  %342 = @func_4832() /* ty=Tensor[(15, 7, 15), float32] */;
  (%341, %342)
}

def @func_7269(%var_7267: Tensor[(11, 16, 9), float64]) -> (Tensor[(11, 16, 9), float32], Tensor[(9, 10, 5), float32], Tensor[(15, 7, 15), float32], Tensor[(11, 16, 9), bool]) {
  @func_7266(%var_7267) /* ty=(Tensor[(11, 16, 9), float32], Tensor[(9, 10, 5), float32], Tensor[(15, 7, 15), float32], Tensor[(11, 16, 9), bool]) */
}

def @func_1605(%var_1604: Tensor[(15, 7, 15), float64]) -> (Tensor[(11, 16, 9), float32], Tensor[(15, 7, 15), float64]) {
  %354 = fn (%var_1580: Tensor[(15, 7, 15), float64]) -> (Tensor[(11, 16, 9), float32], Tensor[(15, 7, 15), float64]) {
    %343 = @func_984() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16], Tensor[(1584), int16]) */;
    %344 = %343.1;
    %345 = cast(%344, dtype="float32") /* ty=Tensor[(11, 16, 9), float32] */;
    %346 = @func_1110() /* ty=(Tensor[(15, 7, 15), float64],) */;
    %347 = %346.0;
    %348 = cast(%var_1580, dtype="float64") /* ty=Tensor[(15, 7, 15), float64] */;
    %349 = shape_of(%347, dtype="int32") /* ty=Tensor[(3), int32] */;
    %350 = cast(%347, dtype="float64") /* ty=Tensor[(15, 7, 15), float64] */;
    %351 = dyn.reshape(%348, %349, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %352 = log10(%345) /* ty=Tensor[(11, 16, 9), float32] */;
    %353 = divide(%350, %351) /* ty=Tensor[(15, 7, 15), float64] */;
    (%352, %353)
  };
  %354(%var_1604) /* ty=(Tensor[(11, 16, 9), float32], Tensor[(15, 7, 15), float64]) */
}

def @func_1162() -> (Tensor[(15, 7, 15), float32], Tensor[(9, 10, 5), bool], Tensor[(450), int16], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16], Tensor[(12, 132), int16]) {
  %371 = fn () -> (Tensor[(15, 7, 15), float32], Tensor[(9, 10, 5), bool], Tensor[(450), int16], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16], Tensor[(12, 132), int16]) {
    %355 = @func_827() /* ty=(Tensor[(15, 7, 15), float32],) */;
    %356 = cast(meta[relay.Constant][12] /* ty=Tensor[(450), int16] */, dtype="int16") /* ty=Tensor[(450), int16] */;
    %357 = reshape(%356, newshape=[9, 10, 5]) /* ty=Tensor[(9, 10, 5), int16] */;
    %358 = @func_724(%357) /* ty=(Tensor[(9, 10, 5), bool],) */;
    %359 = @func_855() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64]) */;
    %360 = @func_962() /* ty=(Tensor[(15, 7, 15), float64],) */;
    %361 = cast(meta[relay.Constant][13] /* ty=Tensor[(12, 132), int16] */, dtype="int16") /* ty=Tensor[(12, 132), int16] */;
    %362 = cast(meta[relay.Constant][13] /* ty=Tensor[(12, 132), int16] */, dtype="int16") /* ty=Tensor[(12, 132), int16] */;
    %363 = reshape(%361, newshape=[11, 16, 9]) /* ty=Tensor[(11, 16, 9), int16] */;
    %364 = reshape(%362, newshape=[11, 16, 9]) /* ty=Tensor[(11, 16, 9), int16] */;
    %365 = @func_917(%363, %364) /* ty=(Tensor[(11, 16, 9), int16],) */;
    %366 = %355.0;
    %367 = %358.0;
    %368 = %359.0;
    %369 = %360.0;
    %370 = %365.0;
    (%366, %367, meta[relay.Constant][12] /* ty=Tensor[(450), int16] */, %368, %369, %370, meta[relay.Constant][13] /* ty=Tensor[(12, 132), int16] */)
  };
  %371() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(9, 10, 5), bool], Tensor[(450), int16], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16], Tensor[(12, 132), int16]) */
}

def @func_2578() -> Tensor[(15, 7, 15), float32] {
  @func_2576() /* ty=Tensor[(15, 7, 15), float32] */
}

def @func_2938() -> (Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32]) {
  @func_2936() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32]) */
}

def @func_1790(%var_1788: Tensor[(450), int16]) -> (Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64], Tensor[(450), int16]) {
  @func_1787(%var_1788) /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64], Tensor[(450), int16]) */
}

def @func_1391(%var_1389: Tensor[(15, 7, 15), float32]) -> Tensor[(15, 7, 15), bool] {
  @func_1388(%var_1389) /* ty=Tensor[(15, 7, 15), bool] */
}

def @func_4379() -> (Tensor[(11, 16, 9), int16], Tensor[(15, 7, 15), uint32]) {
  %372 = @func_3766() /* ty=(Tensor[(140), bool], Tensor[(11, 16, 9), int16]) */;
  %373 = @func_2864() /* ty=(Tensor[(15, 7, 15), uint32],) */;
  %374 = %372.1;
  %375 = %373.0;
  (%374, %375)
}

def @func_2944() -> (Tensor[(15, 7, 15), float32],) {
  %376 = @func_1487() /* ty=(Tensor[(15, 7, 15), float32],) */;
  %377 = %376.0;
  (%377,)
}

def @func_1110() -> (Tensor[(15, 7, 15), float64],) {
  %378 = @func_984() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16], Tensor[(1584), int16]) */;
  %379 = %378.0;
  (%379,)
}

def @func_4574(%var_4553: Tensor[(12, 132), int16]) -> (Tensor[(12, 132), bool], Tensor[(12, 132), int8], Tensor[(11, 16, 9), float64]) {
  %380 = @func_3335() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(12, 132), int16]) */;
  %381 = %380.1;
  %382 = cast(%var_4553, dtype="bool") /* ty=Tensor[(12, 132), bool] */;
  %383 = shape_of(%381, dtype="int32") /* ty=Tensor[(2), int32] */;
  %384 = cast(%381, dtype="bool") /* ty=Tensor[(12, 132), bool] */;
  %385 = dyn.reshape(%382, %383, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %386 = cast(%381, dtype="int8") /* ty=Tensor[(12, 132), int8] */;
  %387 = shape_of(%var_4553, dtype="int32") /* ty=Tensor[(2), int32] */;
  %388 = cast(%var_4553, dtype="int8") /* ty=Tensor[(12, 132), int8] */;
  %389 = dyn.reshape(%386, %387, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %390 = @func_3930() /* ty=(Tensor[(1584), float64], Tensor[(11, 16, 9), float64], Tensor[(140), bool], Tensor[(15, 7, 15), float32]) */;
  %391 = less_equal(%384, %385) /* ty=Tensor[(12, 132), bool] */;
  %392 = bitwise_and(%388, %389) /* ty=Tensor[(12, 132), int8] */;
  %393 = %390.1;
  (%391, %392, %393)
}

def @func_2826() -> Tensor[(11, 16, 9), int16] {
  %395 = fn () -> Tensor[(11, 16, 9), int16] {
    %394 = @func_2621() /* ty=(Tensor[(11, 16, 9), int16],) */;
    %394.0
  };
  %395() /* ty=Tensor[(11, 16, 9), int16] */
}

def @func_2472() -> (Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), float32], Tensor[(15, 7, 15), bool], Tensor[(15, 7, 15), float32]) {
  @func_2470() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), float32], Tensor[(15, 7, 15), bool], Tensor[(15, 7, 15), float32]) */
}

def @func_1369(%var_1367: Tensor[(15, 7, 15), float64], %var_1368: Tensor[(450), int16]) -> (Tensor[(15, 7, 15), uint16], Tensor[(9, 10, 5), bool], Tensor[(450), int16]) {
  @func_1365(%var_1367, %var_1368) /* ty=(Tensor[(15, 7, 15), uint16], Tensor[(9, 10, 5), bool], Tensor[(450), int16]) */
}

def @func_5575(%var_5519: Tensor[(13, 1, 10), float64]) -> (Tensor[(13, 1, 10), float64], Tensor[(11, 16, 9), int16], Tensor[(15, 7, 15), float64]) {
  %396 = cast(%var_5519, dtype="float64") /* ty=Tensor[(13, 1, 10), float64] */;
  %397 = @func_1161() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(9, 10, 5), bool], Tensor[(450), int16], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16], Tensor[(12, 132), int16]) */;
  %398 = @func_1260() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(1584), int16]) */;
  %399 = sin(%396) /* ty=Tensor[(13, 1, 10), float64] */;
  %400 = %397.5;
  %401 = %398.0;
  (%399, %400, %401)
}

def @func_4762() -> Tensor[(15, 7, 15), float32] {
  %402 = @func_2936() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32]) */;
  %402.1
}

def @func_4412() -> Tensor[(4, 15, 15), bool] {
  %407 = fn () -> Tensor[(4, 15, 15), bool] {
    %403 = cast(meta[relay.Constant][15] /* ty=Tensor[(4, 15, 15), int64] */, dtype="bool") /* ty=Tensor[(4, 15, 15), bool] */;
    %404 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(4, 15, 15), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %405 = cast(meta[relay.Constant][14] /* ty=Tensor[(4, 15, 15), int64] */, dtype="bool") /* ty=Tensor[(4, 15, 15), bool] */;
    %406 = dyn.reshape(%403, %404, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    equal(%405, %406) /* ty=Tensor[(4, 15, 15), bool] */
  };
  %407() /* ty=Tensor[(4, 15, 15), bool] */
}

def @func_1886(%var_1885: Tensor[(15, 7, 15), float32]) -> Tensor[(15, 7, 15), bool] {
  %414 = fn (%var_1878: Tensor[(15, 7, 15), float32]) -> Tensor[(15, 7, 15), bool] {
    %408 = @func_827() /* ty=(Tensor[(15, 7, 15), float32],) */;
    %409 = %408.0;
    %410 = cast(%var_1878, dtype="bool") /* ty=Tensor[(15, 7, 15), bool] */;
    %411 = shape_of(%409, dtype="int32") /* ty=Tensor[(3), int32] */;
    %412 = cast(%409, dtype="bool") /* ty=Tensor[(15, 7, 15), bool] */;
    %413 = dyn.reshape(%410, %411, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_and(%412, %413) /* ty=Tensor[(15, 7, 15), bool] */
  };
  %414(%var_1885) /* ty=Tensor[(15, 7, 15), bool] */
}

def @func_5349(%var_5347: int32) -> (Tensor[(450), int16], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), bool], Tensor[(15, 7, 15), float32], Tensor[(11, 16, 9), bool], Tensor[(11, 16, 9), float64], Tensor[(4, 15, 15), bool], Tensor[(8, 15, 1), bool], int32, Tensor[(1584), int16]) {
  @func_5346(%var_5347) /* ty=(Tensor[(450), int16], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), bool], Tensor[(15, 7, 15), float32], Tensor[(11, 16, 9), bool], Tensor[(11, 16, 9), float64], Tensor[(4, 15, 15), bool], Tensor[(8, 15, 1), bool], int32, Tensor[(1584), int16]) */
}

def @func_4962() -> (Tensor[(15, 7, 15), float64], Tensor[(3, 1, 12), float64], Tensor[(3, 12), float64], Tensor[(15, 7, 15), float64], Tensor[(12, 132), float32]) {
  %415 = @func_1110() /* ty=(Tensor[(15, 7, 15), float64],) */;
  %416 = cast(meta[relay.Constant][16] /* ty=Tensor[(3, 12), float64] */, dtype="float64") /* ty=Tensor[(3, 12), float64] */;
  %417 = %415.0;
  %418 = cast(%417, dtype="float64") /* ty=Tensor[(15, 7, 15), float64] */;
  %419 = reshape(%416, newshape=[3, 1, 12]) /* ty=Tensor[(3, 1, 12), float64] */;
  %420 = reshape(%418, newshape=[5, 315]) /* ty=Tensor[(5, 315), float64] */;
  %421 = @func_3458(%419, %420) /* ty=(Tensor[(3, 1, 12), float64], Tensor[(15, 7, 15), float32], Tensor[(5, 315), float64], Tensor[(15, 7, 15), float32]) */;
  %422 = @func_1418() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16]) */;
  %423 = %422.0;
  %424 = cast(%423, dtype="float64") /* ty=Tensor[(15, 7, 15), float64] */;
  %425 = cast(%417, dtype="float64") /* ty=Tensor[(15, 7, 15), float64] */;
  %426 = reshape(%425, newshape=[15, 7, 15]) /* ty=Tensor[(15, 7, 15), float64] */;
  %427 = @func_1212(%426) /* ty=(Tensor[(12, 132), int16], Tensor[(15, 7, 15), uint32], Tensor[(15, 7, 15), float32]) */;
  %428 = %427.0;
  %429 = cast(%428, dtype="float64") /* ty=Tensor[(12, 132), float64] */;
  %430 = sqrt(%429) /* ty=Tensor[(12, 132), float64] */;
  %431 = cast(%430, dtype="float32") /* ty=Tensor[(12, 132), float32] */;
  %432 = %421.0;
  %433 = acos(%424) /* ty=Tensor[(15, 7, 15), float64] */;
  %434 = sigmoid(%431) /* ty=Tensor[(12, 132), float32] */;
  (%417, %432, meta[relay.Constant][16] /* ty=Tensor[(3, 12), float64] */, %433, %434)
}

def @func_8159() -> (Tensor[(12, 2, 4), float64], Tensor[(1584), int16]) {
  %435 = @func_7742() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(1584), int16]) */;
  %436 = @func_5400() /* ty=Tensor[(12, 2, 4), float64] */;
  %437 = %435.1;
  (%436, %437)
}

def @func_8599() -> Tensor[(15, 7, 15), uint32] {
  %438 = @func_6263() /* ty=(Tensor[(15, 7, 15), uint32],) */;
  %438.0
}

def @func_6020() -> (Tensor[(15, 7, 15), float32],) {
  %439 = @func_827() /* ty=(Tensor[(15, 7, 15), float32],) */;
  %440 = %439.0;
  (%440,)
}

def @func_7530() -> (Tensor[(11, 16, 9), int16],) {
  %442 = fn () -> (Tensor[(11, 16, 9), int16],) {
    %441 = @func_2825() /* ty=Tensor[(11, 16, 9), int16] */;
    (%441,)
  };
  %442() /* ty=(Tensor[(11, 16, 9), int16],) */
}

def @func_1957() -> Tensor[(15, 7, 15), float64] {
  %444 = fn () -> Tensor[(15, 7, 15), float64] {
    %443 = @func_962() /* ty=(Tensor[(15, 7, 15), float64],) */;
    %443.0
  };
  %444() /* ty=Tensor[(15, 7, 15), float64] */
}

def @func_962() -> (Tensor[(15, 7, 15), float64],) {
  %445 = @func_855() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64]) */;
  %446 = %445.1;
  (%446,)
}

def @func_2576() -> Tensor[(15, 7, 15), float32] {
  %447 = @func_1487() /* ty=(Tensor[(15, 7, 15), float32],) */;
  %448 = %447.0;
  %449 = cast(%448, dtype="float32") /* ty=Tensor[(15, 7, 15), float32] */;
  exp(%449) /* ty=Tensor[(15, 7, 15), float32] */
}

def @func_6022() -> (Tensor[(15, 7, 15), float32],) {
  @func_6020() /* ty=(Tensor[(15, 7, 15), float32],) */
}

def @func_6856(%var_6852: Tensor[(1573), float32]) -> (Tensor[(15, 7, 15), float64], Tensor[(11, 13, 11), float32], float32, Tensor[(1573), float32]) {
  %450 = cast(-8.59288f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %451 = cast(%var_6852, dtype="float32") /* ty=Tensor[(1573), float32] */;
  %452 = reshape(%450, newshape=[]) /* ty=float32 */;
  %453 = reshape(%451, newshape=[11, 13, 11]) /* ty=Tensor[(11, 13, 11), float32] */;
  %454 = @func_5795(%452, %453) /* ty=(Tensor[(11, 13, 11), float32],) */;
  %455 = @func_1956() /* ty=Tensor[(15, 7, 15), float64] */;
  %456 = %454.0;
  (%455, %456, -8.59288f /* ty=float32 */, %var_6852)
}

def @func_2470() -> (Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), float32], Tensor[(15, 7, 15), bool], Tensor[(15, 7, 15), float32]) {
  %457 = @func_1110() /* ty=(Tensor[(15, 7, 15), float64],) */;
  %458 = @func_2158() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(11, 16, 9), float32]) */;
  %459 = %457.0;
  %460 = cast(%459, dtype="float32") /* ty=Tensor[(15, 7, 15), float32] */;
  %461 = reshape(%460, newshape=[15, 7, 15]) /* ty=Tensor[(15, 7, 15), float32] */;
  %462 = @func_2088() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(1584), float64], Tensor[(15, 7, 15), float32]) */;
  %463 = %458.1;
  %464 = @func_2003(%461) /* ty=Tensor[(15, 7, 15), bool] */;
  %465 = %462.2;
  (%459, %463, %464, %465)
}

def @func_920(%var_918: Tensor[(11, 16, 9), int16], %var_919: Tensor[(11, 16, 9), int16]) -> (Tensor[(11, 16, 9), int16],) {
  %471 = fn (%var_908: Tensor[(11, 16, 9), int16], %var_909: Tensor[(11, 16, 9), int16]) -> (Tensor[(11, 16, 9), int16],) {
    %466 = cast(%var_909, dtype="int16") /* ty=Tensor[(11, 16, 9), int16] */;
    %467 = shape_of(%var_908, dtype="int32") /* ty=Tensor[(3), int32] */;
    %468 = cast(%var_908, dtype="int16") /* ty=Tensor[(11, 16, 9), int16] */;
    %469 = dyn.reshape(%466, %467, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %470 = bitwise_xor(%468, %469) /* ty=Tensor[(11, 16, 9), int16] */;
    (%470,)
  };
  %471(%var_918, %var_919) /* ty=(Tensor[(11, 16, 9), int16],) */
}

def @func_7312(%var_7303: Tensor[(1, 3, 4), bool], %var_7304: Tensor[(13, 3, 4), bool]) -> Tensor[(13, 3, 4), bool] {
  %472 = cast(%var_7303, dtype="bool") /* ty=Tensor[(1, 3, 4), bool] */;
  %473 = cast(%var_7304, dtype="bool") /* ty=Tensor[(13, 3, 4), bool] */;
  logical_or(%472, %473) /* ty=Tensor[(13, 3, 4), bool] */
}

def @func_7780() -> Tensor[(15, 7, 15), uint32] {
  %475 = fn () -> Tensor[(15, 7, 15), uint32] {
    %474 = @func_6263() /* ty=(Tensor[(15, 7, 15), uint32],) */;
    %474.0
  };
  %475() /* ty=Tensor[(15, 7, 15), uint32] */
}

def @func_7887() -> Tensor[(15, 7, 15), uint32] {
  @func_7885() /* ty=Tensor[(15, 7, 15), uint32] */
}

def @func_3257() -> (Tensor[(11, 16, 9), int16], Tensor[(11, 16, 9), int16], Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), float64]) {
  %493 = fn () -> (Tensor[(11, 16, 9), int16], Tensor[(11, 16, 9), int16], Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), float64]) {
    %476 = @func_2621() /* ty=(Tensor[(11, 16, 9), int16],) */;
    %477 = %476.0;
    %478 = cast(%477, dtype="int16") /* ty=Tensor[(11, 16, 9), int16] */;
    %479 = reshape(%478, newshape=[1584]) /* ty=Tensor[(1584), int16] */;
    %480 = @func_2881(%479) /* ty=(Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16], Tensor[(1584), int16]) */;
    %481 = @func_1260() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(1584), int16]) */;
    %482 = %481.0;
    %483 = cast(%482, dtype="float32") /* ty=Tensor[(15, 7, 15), float32] */;
    %484 = reshape(%483, newshape=[15, 7, 15]) /* ty=Tensor[(15, 7, 15), float32] */;
    %485 = @func_1388(%484) /* ty=Tensor[(15, 7, 15), bool] */;
    %486 = cast(%485, dtype="float64") /* ty=Tensor[(15, 7, 15), float64] */;
    %487 = shape_of(%482, dtype="int32") /* ty=Tensor[(3), int32] */;
    %488 = cast(%482, dtype="float64") /* ty=Tensor[(15, 7, 15), float64] */;
    %489 = dyn.reshape(%486, %487, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %490 = %480.1;
    %491 = floor_divide(%488, %489) /* ty=Tensor[(15, 7, 15), float64] */;
    %492 = @func_1956() /* ty=Tensor[(15, 7, 15), float64] */;
    (%477, %490, %491, %492)
  };
  %493() /* ty=(Tensor[(11, 16, 9), int16], Tensor[(11, 16, 9), int16], Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), float64]) */
}

def @func_812() -> Tensor[(15, 7, 15), float32] {
  %494 = cast(meta[relay.Constant][17] /* ty=Tensor[(15, 7, 15), float64] */, dtype="float64") /* ty=Tensor[(15, 7, 15), float64] */;
  %495 = cosh(%494) /* ty=Tensor[(15, 7, 15), float64] */;
  %496 = cast(%495, dtype="float32") /* ty=Tensor[(15, 7, 15), float32] */;
  tan(%496) /* ty=Tensor[(15, 7, 15), float32] */
}

def @func_3392() -> (Tensor[(11, 16, 9), int16],) {
  @func_3390() /* ty=(Tensor[(11, 16, 9), int16],) */
}

def @func_1787(%var_1785: Tensor[(450), int16]) -> (Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64], Tensor[(450), int16]) {
  %497 = @func_1487() /* ty=(Tensor[(15, 7, 15), float32],) */;
  %498 = %497.0;
  %499 = cast(%498, dtype="float32") /* ty=Tensor[(15, 7, 15), float32] */;
  %500 = cast(%var_1785, dtype="int16") /* ty=Tensor[(450), int16] */;
  %501 = reshape(%500, newshape=[450]) /* ty=Tensor[(450), int16] */;
  %502 = @func_1695(%501) /* ty=(Tensor[(15, 7, 15), float64], Tensor[(450), int16], Tensor[(450), int16]) */;
  %503 = sin(%499) /* ty=Tensor[(15, 7, 15), float32] */;
  %504 = %502.0;
  (%503, %504, %var_1785)
}

def @func_5030(%var_5023: Tensor[(11, 16, 9), int16]) -> (Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), bool]) {
  %505 = @func_3335() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(12, 132), int16]) */;
  %506 = @func_1635() /* ty=(Tensor[(11, 16, 9), int16], Tensor[(11, 16, 9), int16]) */;
  %507 = %506.1;
  %508 = cast(%var_5023, dtype="bool") /* ty=Tensor[(11, 16, 9), bool] */;
  %509 = shape_of(%507, dtype="int32") /* ty=Tensor[(3), int32] */;
  %510 = cast(%507, dtype="bool") /* ty=Tensor[(11, 16, 9), bool] */;
  %511 = dyn.reshape(%508, %509, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %512 = %505.0;
  %513 = equal(%510, %511) /* ty=Tensor[(11, 16, 9), bool] */;
  (%512, %513)
}

def @func_4103(%var_4101: Tensor[(1584), int16]) -> (Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64], Tensor[(1584), int16], Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), float32]) {
  @func_4100(%var_4101) /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64], Tensor[(1584), int16], Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), float32]) */
}

def @func_8059() -> Tensor[(15, 7, 15), float64] {
  %515 = fn () -> Tensor[(15, 7, 15), float64] {
    %514 = @func_3335() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(12, 132), int16]) */;
    %514.0
  };
  %515() /* ty=Tensor[(15, 7, 15), float64] */
}

def @func_3590() -> (Tensor[(1584), int16], Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), float64]) {
  %516 = @func_2665() /* ty=(Tensor[(1584), int16],) */;
  %517 = @func_855() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64]) */;
  %518 = %517.0;
  %519 = cast(%518, dtype="float64") /* ty=Tensor[(15, 7, 15), float64] */;
  %520 = %516.0;
  %521 = asin(%519) /* ty=Tensor[(15, 7, 15), float64] */;
  %522 = @func_1921() /* ty=Tensor[(15, 7, 15), float64] */;
  (%520, %521, %522)
}

def @func_2855() -> (Tensor[(11, 16, 9), float32], Tensor[(15, 7, 15), float64], Tensor[(1584), int16], Tensor[(1584), int16]) {
  %533 = fn () -> (Tensor[(11, 16, 9), float32], Tensor[(15, 7, 15), float64], Tensor[(1584), int16], Tensor[(1584), int16]) {
    %523 = @func_2158() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(11, 16, 9), float32]) */;
    %524 = @func_1260() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(1584), int16]) */;
    %525 = %524.0;
    %526 = cast(%525, dtype="float32") /* ty=Tensor[(15, 7, 15), float32] */;
    %527 = reshape(%526, newshape=[15, 7, 15]) /* ty=Tensor[(15, 7, 15), float32] */;
    %528 = @func_2337(%527) /* ty=(Tensor[(15, 7, 15), bool], Tensor[(15, 7, 15), float32], Tensor[(1584), int16], Tensor[(9, 10, 5), bool]) */;
    %529 = @func_2665() /* ty=(Tensor[(1584), int16],) */;
    %530 = %523.1;
    %531 = %528.2;
    %532 = %529.0;
    (%530, %525, %531, %532)
  };
  %533() /* ty=(Tensor[(11, 16, 9), float32], Tensor[(15, 7, 15), float64], Tensor[(1584), int16], Tensor[(1584), int16]) */
}

def @func_2195() -> (Tensor[(15, 7, 15), uint32], Tensor[(12, 132), int16], Tensor[(15, 7, 15), float64]) {
  %534 = @func_827() /* ty=(Tensor[(15, 7, 15), float32],) */;
  %535 = %534.0;
  %536 = cast(meta[relay.Constant][18] /* ty=Tensor[(15, 7, 15), float32] */, dtype="uint32") /* ty=Tensor[(15, 7, 15), uint32] */;
  %537 = shape_of(%535, dtype="int32") /* ty=Tensor[(3), int32] */;
  %538 = cast(%535, dtype="uint32") /* ty=Tensor[(15, 7, 15), uint32] */;
  %539 = dyn.reshape(%536, %537, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %540 = cast(meta[relay.Constant][18] /* ty=Tensor[(15, 7, 15), float32] */, dtype="float64") /* ty=Tensor[(15, 7, 15), float64] */;
  %541 = reshape(%540, newshape=[15, 7, 15]) /* ty=Tensor[(15, 7, 15), float64] */;
  %542 = @func_1212(%541) /* ty=(Tensor[(12, 132), int16], Tensor[(15, 7, 15), uint32], Tensor[(15, 7, 15), float32]) */;
  %543 = bitwise_or(%538, %539) /* ty=Tensor[(15, 7, 15), uint32] */;
  %544 = %542.0;
  %545 = @func_1921() /* ty=Tensor[(15, 7, 15), float64] */;
  (%543, %544, %545)
}

def @func_7100() -> Tensor[(11, 16, 9), int16] {
  %547 = fn () -> Tensor[(11, 16, 9), int16] {
    %546 = @func_2621() /* ty=(Tensor[(11, 16, 9), int16],) */;
    %546.0
  };
  %547() /* ty=Tensor[(11, 16, 9), int16] */
}

def @func_2553(%var_2551: Tensor[(4, 5, 7), bool], %var_2552: Tensor[(4, 5, 7), bool]) -> (Tensor[(4, 5, 7), bool], Tensor[(11, 16, 9), float64]) {
  @func_2549(%var_2551, %var_2552) /* ty=(Tensor[(4, 5, 7), bool], Tensor[(11, 16, 9), float64]) */
}

def @func_4577(%var_4575: Tensor[(12, 132), int16]) -> (Tensor[(12, 132), bool], Tensor[(12, 132), int8], Tensor[(11, 16, 9), float64]) {
  @func_4574(%var_4575) /* ty=(Tensor[(12, 132), bool], Tensor[(12, 132), int8], Tensor[(11, 16, 9), float64]) */
}

def @func_4519(%var_4517: Tensor[(11, 13, 14), int64], %var_4518: Tensor[(11, 13, 14), int64]) -> (Tensor[(11, 13, 14), float64], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32], Tensor[(1584), int16], Tensor[(11, 13, 14), float32], Tensor[(15, 7, 15), float64]) {
  %572 = fn (%var_4458: Tensor[(11, 13, 14), int64], %var_4459: Tensor[(11, 13, 14), int64]) -> (Tensor[(11, 13, 14), float64], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32], Tensor[(1584), int16], Tensor[(11, 13, 14), float32], Tensor[(15, 7, 15), float64]) {
    %548 = cast(%var_4458, dtype="float64") /* ty=Tensor[(11, 13, 14), float64] */;
    %549 = @func_2936() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32]) */;
    %550 = @func_2665() /* ty=(Tensor[(1584), int16],) */;
    %551 = cast(%var_4459, dtype="int64") /* ty=Tensor[(11, 13, 14), int64] */;
    %552 = shape_of(%var_4458, dtype="int32") /* ty=Tensor[(3), int32] */;
    %553 = cast(%var_4458, dtype="int64") /* ty=Tensor[(11, 13, 14), int64] */;
    %554 = dyn.reshape(%551, %552, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %555 = add(%553, %554) /* ty=Tensor[(11, 13, 14), int64] */;
    %556 = cast(%555, dtype="float64") /* ty=Tensor[(11, 13, 14), float64] */;
    %557 = rsqrt(%556) /* ty=Tensor[(11, 13, 14), float64] */;
    %558 = cast(meta[relay.Constant][19] /* ty=Tensor[(11, 13, 14), float64] */, dtype="int64") /* ty=Tensor[(11, 13, 14), int64] */;
    %559 = shape_of(%557, dtype="int32") /* ty=Tensor[(3), int32] */;
    %560 = cast(%557, dtype="int64") /* ty=Tensor[(11, 13, 14), int64] */;
    %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %562 = bitwise_and(%560, %561) /* ty=Tensor[(11, 13, 14), int64] */;
    %563 = cast(%562, dtype="float32") /* ty=Tensor[(11, 13, 14), float32] */;
    %564 = @func_3256() /* ty=(Tensor[(11, 16, 9), int16], Tensor[(11, 16, 9), int16], Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), float64]) */;
    %565 = atanh(%548) /* ty=Tensor[(11, 13, 14), float64] */;
    %566 = %549.1;
    %567 = @func_4232() /* ty=Tensor[(15, 7, 15), float32] */;
    %568 = @func_2576() /* ty=Tensor[(15, 7, 15), float32] */;
    %569 = %550.0;
    %570 = acosh(%563) /* ty=Tensor[(11, 13, 14), float32] */;
    %571 = %564.2;
    (%565, %566, %567, %568, %569, %570, %571)
  };
  %572(%var_4517, %var_4518) /* ty=(Tensor[(11, 13, 14), float64], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32], Tensor[(1584), int16], Tensor[(11, 13, 14), float32], Tensor[(15, 7, 15), float64]) */
}

def @func_1365(%var_1349: Tensor[(15, 7, 15), float64], %var_1355: Tensor[(450), int16]) -> (Tensor[(15, 7, 15), uint16], Tensor[(9, 10, 5), bool], Tensor[(450), int16]) {
  %573 = @func_1110() /* ty=(Tensor[(15, 7, 15), float64],) */;
  %574 = %573.0;
  %575 = cast(%var_1349, dtype="uint16") /* ty=Tensor[(15, 7, 15), uint16] */;
  %576 = shape_of(%574, dtype="int32") /* ty=Tensor[(3), int32] */;
  %577 = cast(%574, dtype="uint16") /* ty=Tensor[(15, 7, 15), uint16] */;
  %578 = dyn.reshape(%575, %576, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %579 = cast(%var_1355, dtype="int16") /* ty=Tensor[(450), int16] */;
  %580 = reshape(%579, newshape=[9, 10, 5]) /* ty=Tensor[(9, 10, 5), int16] */;
  %581 = @func_724(%580) /* ty=(Tensor[(9, 10, 5), bool],) */;
  %582 = right_shift(%577, %578) /* ty=Tensor[(15, 7, 15), uint16] */;
  %583 = %581.0;
  (%582, %583, %var_1355)
}

def @func_3040(%var_3039: Tensor[(15, 7, 15), float64]) -> (Tensor[(15, 7, 15), uint16], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32]) {
  %593 = fn (%var_3023: Tensor[(15, 7, 15), float64]) -> (Tensor[(15, 7, 15), uint16], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32]) {
    %584 = @func_1921() /* ty=Tensor[(15, 7, 15), float64] */;
    %585 = cast(%var_3023, dtype="uint16") /* ty=Tensor[(15, 7, 15), uint16] */;
    %586 = shape_of(%584, dtype="int32") /* ty=Tensor[(3), int32] */;
    %587 = cast(%584, dtype="uint16") /* ty=Tensor[(15, 7, 15), uint16] */;
    %588 = dyn.reshape(%585, %586, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %589 = @func_827() /* ty=(Tensor[(15, 7, 15), float32],) */;
    %590 = bitwise_xor(%587, %588) /* ty=Tensor[(15, 7, 15), uint16] */;
    %591 = @func_812() /* ty=Tensor[(15, 7, 15), float32] */;
    %592 = %589.0;
    (%590, %591, %592)
  };
  %593(%var_3039) /* ty=(Tensor[(15, 7, 15), uint16], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32]) */
}

def @func_8209(%var_8203: Tensor[(450), int16]) -> (Tensor[(15, 7, 15), float64], Tensor[(12, 7, 12), uint64], Tensor[(1008), uint64], Tensor[(450), int16]) {
  %594 = @func_1260() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(1584), int16]) */;
  %595 = cast(meta[relay.Constant][20] /* ty=Tensor[(1008), uint64] */, dtype="uint64") /* ty=Tensor[(1008), uint64] */;
  %596 = cast(%var_8203, dtype="int16") /* ty=Tensor[(450), int16] */;
  %597 = reshape(%595, newshape=[12, 7, 12]) /* ty=Tensor[(12, 7, 12), uint64] */;
  %598 = reshape(%596, newshape=[450]) /* ty=Tensor[(450), int16] */;
  %599 = @func_3147(%597, %598) /* ty=(Tensor[(12, 7, 12), uint64], Tensor[(15, 7, 15), float64], Tensor[(450), int16]) */;
  %600 = %594.0;
  %601 = %599.0;
  (%600, %601, meta[relay.Constant][20] /* ty=Tensor[(1008), uint64] */, %var_8203)
}

def @func_7831() -> Tensor[(12, 2, 4), int64] {
  %607 = fn () -> Tensor[(12, 2, 4), int64] {
    %602 = @func_5400() /* ty=Tensor[(12, 2, 4), float64] */;
    %603 = cast(meta[relay.Constant][21] /* ty=Tensor[(12, 2, 4), float64] */, dtype="int64") /* ty=Tensor[(12, 2, 4), int64] */;
    %604 = shape_of(%602, dtype="int32") /* ty=Tensor[(3), int32] */;
    %605 = cast(%602, dtype="int64") /* ty=Tensor[(12, 2, 4), int64] */;
    %606 = dyn.reshape(%603, %604, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    bitwise_xor(%605, %606) /* ty=Tensor[(12, 2, 4), int64] */
  };
  %607() /* ty=Tensor[(12, 2, 4), int64] */
}

def @func_7969() -> (Tensor[(15, 7, 15), uint32], Tensor[(15, 7, 15), float32], Tensor[(1584), uint16]) {
  %608 = @func_2854() /* ty=(Tensor[(11, 16, 9), float32], Tensor[(15, 7, 15), float64], Tensor[(1584), int16], Tensor[(1584), int16]) */;
  %609 = %608.3;
  %610 = cast(%609, dtype="float64") /* ty=Tensor[(1584), float64] */;
  %611 = asinh(%610) /* ty=Tensor[(1584), float64] */;
  %612 = cast(meta[relay.Constant][22] /* ty=Tensor[(1584), float64] */, dtype="uint16") /* ty=Tensor[(1584), uint16] */;
  %613 = shape_of(%611, dtype="int32") /* ty=Tensor[(1), int32] */;
  %614 = cast(%611, dtype="uint16") /* ty=Tensor[(1584), uint16] */;
  %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %616 = @func_7779() /* ty=Tensor[(15, 7, 15), uint32] */;
  %617 = @func_5141() /* ty=Tensor[(15, 7, 15), float32] */;
  %618 = left_shift(%614, %615) /* ty=Tensor[(1584), uint16] */;
  (%616, %617, %618)
}

def @func_8396(%var_8395: Tensor[(9, 15, 9), uint16]) -> (Tensor[(9, 15, 9), bool],) {
  %624 = fn (%var_8385: Tensor[(9, 15, 9), uint16]) -> (Tensor[(9, 15, 9), bool],) {
    %619 = cast(%var_8385, dtype="bool") /* ty=Tensor[(9, 15, 9), bool] */;
    %620 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(9, 15, 9), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %621 = cast(meta[relay.Constant][23] /* ty=Tensor[(9, 15, 9), uint16] */, dtype="bool") /* ty=Tensor[(9, 15, 9), bool] */;
    %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %623 = greater_equal(%621, %622) /* ty=Tensor[(9, 15, 9), bool] */;
    (%623,)
  };
  %624(%var_8395) /* ty=(Tensor[(9, 15, 9), bool],) */
}

def @func_1922() -> Tensor[(15, 7, 15), float64] {
  %626 = fn () -> Tensor[(15, 7, 15), float64] {
    %625 = @func_1110() /* ty=(Tensor[(15, 7, 15), float64],) */;
    %625.0
  };
  %626() /* ty=Tensor[(15, 7, 15), float64] */
}

def @func_2922() -> (Tensor[(11, 16, 9), int16], Tensor[(11, 16, 9), float64], Tensor[(140), bool]) {
  @func_2920() /* ty=(Tensor[(11, 16, 9), int16], Tensor[(11, 16, 9), float64], Tensor[(140), bool]) */
}

def @func_7971() -> (Tensor[(15, 7, 15), uint32], Tensor[(15, 7, 15), float32], Tensor[(1584), uint16]) {
  @func_7969() /* ty=(Tensor[(15, 7, 15), uint32], Tensor[(15, 7, 15), float32], Tensor[(1584), uint16]) */
}

def @func_1212(%var_1198: Tensor[(15, 7, 15), float64]) -> (Tensor[(12, 132), int16], Tensor[(15, 7, 15), uint32], Tensor[(15, 7, 15), float32]) {
  %627 = @func_1161() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(9, 10, 5), bool], Tensor[(450), int16], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16], Tensor[(12, 132), int16]) */;
  %628 = @func_855() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64]) */;
  %629 = %628.1;
  %630 = cast(%var_1198, dtype="uint32") /* ty=Tensor[(15, 7, 15), uint32] */;
  %631 = shape_of(%629, dtype="int32") /* ty=Tensor[(3), int32] */;
  %632 = cast(%629, dtype="uint32") /* ty=Tensor[(15, 7, 15), uint32] */;
  %633 = dyn.reshape(%630, %631, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %634 = cast(%629, dtype="float32") /* ty=Tensor[(15, 7, 15), float32] */;
  %635 = shape_of(%var_1198, dtype="int32") /* ty=Tensor[(3), int32] */;
  %636 = cast(%var_1198, dtype="float32") /* ty=Tensor[(15, 7, 15), float32] */;
  %637 = dyn.reshape(%634, %635, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %638 = %627.6;
  %639 = bitwise_and(%632, %633) /* ty=Tensor[(15, 7, 15), uint32] */;
  %640 = floor_mod(%636, %637) /* ty=Tensor[(15, 7, 15), float32] */;
  (%638, %639, %640)
}

def @func_2946() -> (Tensor[(15, 7, 15), float32],) {
  @func_2944() /* ty=(Tensor[(15, 7, 15), float32],) */
}

def @func_2197() -> (Tensor[(15, 7, 15), uint32], Tensor[(12, 132), int16], Tensor[(15, 7, 15), float64]) {
  @func_2195() /* ty=(Tensor[(15, 7, 15), uint32], Tensor[(12, 132), int16], Tensor[(15, 7, 15), float64]) */
}

def @func_2622() -> (Tensor[(11, 16, 9), int16],) {
  %643 = fn () -> (Tensor[(11, 16, 9), int16],) {
    %641 = @func_984() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16], Tensor[(1584), int16]) */;
    %642 = %641.1;
    (%642,)
  };
  %643() /* ty=(Tensor[(11, 16, 9), int16],) */
}

def @func_2866() -> (Tensor[(15, 7, 15), uint32],) {
  @func_2864() /* ty=(Tensor[(15, 7, 15), uint32],) */
}

def @func_6594() -> Tensor[(11, 16, 9), int16] {
  %644 = @func_1635() /* ty=(Tensor[(11, 16, 9), int16], Tensor[(11, 16, 9), int16]) */;
  %644.0
}

def @func_5402() -> Tensor[(12, 2, 4), float64] {
  @func_5400() /* ty=Tensor[(12, 2, 4), float64] */
}

def @func_1079() -> (Tensor[(15, 7, 15), float32],) {
  %647 = fn () -> (Tensor[(15, 7, 15), float32],) {
    %645 = @func_827() /* ty=(Tensor[(15, 7, 15), float32],) */;
    %646 = %645.0;
    (%646,)
  };
  %647() /* ty=(Tensor[(15, 7, 15), float32],) */
}

def @func_3931() -> (Tensor[(1584), float64], Tensor[(11, 16, 9), float64], Tensor[(140), bool], Tensor[(15, 7, 15), float32]) {
  %658 = fn () -> (Tensor[(1584), float64], Tensor[(11, 16, 9), float64], Tensor[(140), bool], Tensor[(15, 7, 15), float32]) {
    %648 = @func_2088() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(1584), float64], Tensor[(15, 7, 15), float32]) */;
    %649 = cast(meta[relay.Constant][24] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
    %650 = cast(meta[relay.Constant][24] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
    %651 = reshape(%649, newshape=[4, 5, 7]) /* ty=Tensor[(4, 5, 7), bool] */;
    %652 = reshape(%650, newshape=[4, 5, 7]) /* ty=Tensor[(4, 5, 7), bool] */;
    %653 = @func_2549(%651, %652) /* ty=(Tensor[(4, 5, 7), bool], Tensor[(11, 16, 9), float64]) */;
    %654 = @func_2158() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(11, 16, 9), float32]) */;
    %655 = %648.1;
    %656 = %653.1;
    %657 = %654.0;
    (%655, %656, meta[relay.Constant][24] /* ty=Tensor[(140), bool] */, %657)
  };
  %658() /* ty=(Tensor[(1584), float64], Tensor[(11, 16, 9), float64], Tensor[(140), bool], Tensor[(15, 7, 15), float32]) */
}

def @func_2936() -> (Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32]) {
  %659 = @func_827() /* ty=(Tensor[(15, 7, 15), float32],) */;
  %660 = @func_855() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64]) */;
  %661 = %659.0;
  %662 = %660.0;
  (%661, %662)
}

def @func_3663() -> (Tensor[(15, 7, 15), float64],) {
  %665 = fn () -> (Tensor[(15, 7, 15), float64],) {
    %663 = @func_3256() /* ty=(Tensor[(11, 16, 9), int16], Tensor[(11, 16, 9), int16], Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), float64]) */;
    %664 = %663.2;
    (%664,)
  };
  %665() /* ty=(Tensor[(15, 7, 15), float64],) */
}

def @func_4381() -> (Tensor[(11, 16, 9), int16], Tensor[(15, 7, 15), uint32]) {
  @func_4379() /* ty=(Tensor[(11, 16, 9), int16], Tensor[(15, 7, 15), uint32]) */
}

def @func_7316(%var_7314: Tensor[(1, 3, 4), bool], %var_7315: Tensor[(13, 3, 4), bool]) -> Tensor[(13, 3, 4), bool] {
  @func_7312(%var_7314, %var_7315) /* ty=Tensor[(13, 3, 4), bool] */
}

def @func_2089() -> (Tensor[(15, 7, 15), float64], Tensor[(1584), float64], Tensor[(15, 7, 15), float32]) {
  %673 = fn () -> (Tensor[(15, 7, 15), float64], Tensor[(1584), float64], Tensor[(15, 7, 15), float32]) {
    %666 = @func_1260() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(1584), int16]) */;
    %667 = @func_1260() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(1584), int16]) */;
    %668 = %667.1;
    %669 = cast(%668, dtype="float64") /* ty=Tensor[(1584), float64] */;
    %670 = %666.0;
    %671 = exp(%669) /* ty=Tensor[(1584), float64] */;
    %672 = @func_812() /* ty=Tensor[(15, 7, 15), float32] */;
    (%670, %671, %672)
  };
  %673() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(1584), float64], Tensor[(15, 7, 15), float32]) */
}

def @func_7287() -> (Tensor[(15, 7, 15), float32],) {
  @func_7285() /* ty=(Tensor[(15, 7, 15), float32],) */
}

def @func_7450(%var_7429: Tensor[(9, 3, 1), int16], %var_7430: Tensor[(9, 3, 12), int16]) -> (Tensor[(9, 3, 12), int16], Tensor[(15, 7, 15), float32]) {
  %674 = cast(%var_7429, dtype="int16") /* ty=Tensor[(9, 3, 1), int16] */;
  %675 = cast(%var_7430, dtype="int16") /* ty=Tensor[(9, 3, 12), int16] */;
  %676 = @func_4199() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(1584), int16]) */;
  %677 = bitwise_and(%674, %675) /* ty=Tensor[(9, 3, 12), int16] */;
  %678 = %676.0;
  (%677, %678)
}

def @func_1636() -> (Tensor[(11, 16, 9), int16], Tensor[(11, 16, 9), int16]) {
  %687 = fn () -> (Tensor[(11, 16, 9), int16], Tensor[(11, 16, 9), int16]) {
    %679 = @func_984() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16], Tensor[(1584), int16]) */;
    %680 = %679.1;
    %681 = cast(%680, dtype="int16") /* ty=Tensor[(11, 16, 9), int16] */;
    %682 = cast(%680, dtype="int16") /* ty=Tensor[(11, 16, 9), int16] */;
    %683 = reshape(%681, newshape=[11, 16, 9]) /* ty=Tensor[(11, 16, 9), int16] */;
    %684 = reshape(%682, newshape=[11, 16, 9]) /* ty=Tensor[(11, 16, 9), int16] */;
    %685 = @func_917(%683, %684) /* ty=(Tensor[(11, 16, 9), int16],) */;
    %686 = %685.0;
    (%680, %686)
  };
  %687() /* ty=(Tensor[(11, 16, 9), int16], Tensor[(11, 16, 9), int16]) */
}

def @func_6859(%var_6857: Tensor[(1573), float32]) -> (Tensor[(15, 7, 15), float64], Tensor[(11, 13, 11), float32], float32, Tensor[(1573), float32]) {
  @func_6856(%var_6857) /* ty=(Tensor[(15, 7, 15), float64], Tensor[(11, 13, 11), float32], float32, Tensor[(1573), float32]) */
}

def @func_2377() -> (Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64]) {
  @func_2375() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64]) */
}

def @func_3592() -> (Tensor[(1584), int16], Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), float64]) {
  @func_3590() /* ty=(Tensor[(1584), int16], Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), float64]) */
}

def @func_7007(%var_6975: Tensor[(36), float64]) -> (Tensor[(15, 7, 15), uint32], Tensor[(450), int16], Tensor[(450), int16], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), float32], Tensor[(36), float64], Tensor[(11, 13, 14), float64], Tensor[(2002), int64], Tensor[(15, 7, 15), uint16]) {
  %688 = @func_2864() /* ty=(Tensor[(15, 7, 15), uint32],) */;
  %689 = cast(meta[relay.Constant][25] /* ty=Tensor[(450), int16] */, dtype="int16") /* ty=Tensor[(450), int16] */;
  %690 = reshape(%689, newshape=[450]) /* ty=Tensor[(450), int16] */;
  %691 = @func_1695(%690) /* ty=(Tensor[(15, 7, 15), float64], Tensor[(450), int16], Tensor[(450), int16]) */;
  %692 = @func_2470() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), float32], Tensor[(15, 7, 15), bool], Tensor[(15, 7, 15), float32]) */;
  %693 = @func_4448() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), uint32]) */;
  %694 = cast(%var_6975, dtype="float64") /* ty=Tensor[(36), float64] */;
  %695 = reshape(%694, newshape=[36]) /* ty=Tensor[(36), float64] */;
  %696 = @func_5985(%695) /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32], Tensor[(3, 1, 12), float64], Tensor[(36), float64]) */;
  %697 = cast(meta[relay.Constant][26] /* ty=Tensor[(2002), int64] */, dtype="int64") /* ty=Tensor[(2002), int64] */;
  %698 = cast(meta[relay.Constant][26] /* ty=Tensor[(2002), int64] */, dtype="int64") /* ty=Tensor[(2002), int64] */;
  %699 = reshape(%697, newshape=[11, 13, 14]) /* ty=Tensor[(11, 13, 14), int64] */;
  %700 = reshape(%698, newshape=[11, 13, 14]) /* ty=Tensor[(11, 13, 14), int64] */;
  %701 = @func_4516(%699, %700) /* ty=(Tensor[(11, 13, 14), float64], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32], Tensor[(1584), int16], Tensor[(11, 13, 14), float32], Tensor[(15, 7, 15), float64]) */;
  %702 = @func_3622() /* ty=(Tensor[(15, 7, 15), uint16], Tensor[(11, 16, 9), float64], Tensor[(1584), int16]) */;
  %703 = %688.0;
  %704 = %691.2;
  %705 = %692.3;
  %706 = %693.0;
  %707 = %696.0;
  %708 = %701.0;
  %709 = %702.0;
  (%703, %704, meta[relay.Constant][25] /* ty=Tensor[(450), int16] */, %705, %706, %707, %var_6975, %708, meta[relay.Constant][26] /* ty=Tensor[(2002), int64] */, %709)
}

def @func_5033(%var_5031: Tensor[(11, 16, 9), int16]) -> (Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), bool]) {
  @func_5030(%var_5031) /* ty=(Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), bool]) */
}

def @func_5660(%var_5657: Tensor[(12, 11, 9), float32], %var_5658: Tensor[(12, 11, 9), float32], %var_5659: int32) -> (Tensor[(12, 11, 9), float32], Tensor[(15, 7, 15), float32], Tensor[(12, 11, 9), int64], Tensor[(8, 15, 1), bool], int32, Tensor[(12, 11, 9), float32]) {
  @func_5655(%var_5657, %var_5658, %var_5659) /* ty=(Tensor[(12, 11, 9), float32], Tensor[(15, 7, 15), float32], Tensor[(12, 11, 9), int64], Tensor[(8, 15, 1), bool], int32, Tensor[(12, 11, 9), float32]) */
}

def @func_6596() -> Tensor[(11, 16, 9), int16] {
  @func_6594() /* ty=Tensor[(11, 16, 9), int16] */
}

def @func_1215(%var_1213: Tensor[(15, 7, 15), float64]) -> (Tensor[(12, 132), int16], Tensor[(15, 7, 15), uint32], Tensor[(15, 7, 15), float32]) {
  @func_1212(%var_1213) /* ty=(Tensor[(12, 132), int16], Tensor[(15, 7, 15), uint32], Tensor[(15, 7, 15), float32]) */
}

def @func_7619() -> Tensor[(15, 7, 15), float64] {
  %711 = fn () -> Tensor[(15, 7, 15), float64] {
    %710 = @func_2375() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64]) */;
    %710.1
  };
  %711() /* ty=Tensor[(15, 7, 15), float64] */
}

def @main(%var_8760: Tensor[(15, 12, 1), float32], %var_8770: Tensor[(4, 15, 15), bool], %var_8781: Tensor[(4, 15, 15), uint16]) -> (Tensor[(15, 12, 1), float64], Tensor[(4, 15, 15), int8]) {
  %712 = cast(%var_8760, dtype="float32") /* ty=Tensor[(15, 12, 1), float32] */;
  %713 = acos(%712) /* ty=Tensor[(15, 12, 1), float32] */;
  %714 = cast(%713, dtype="float64") /* ty=Tensor[(15, 12, 1), float64] */;
  %715 = @func_6636() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(4, 15, 15), bool]) */;
  %716 = %715.1;
  %717 = cast(%var_8770, dtype="uint16") /* ty=Tensor[(4, 15, 15), uint16] */;
  %718 = shape_of(%716, dtype="int32") /* ty=Tensor[(3), int32] */;
  %719 = cast(%716, dtype="uint16") /* ty=Tensor[(4, 15, 15), uint16] */;
  %720 = dyn.reshape(%717, %718, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %721 = logical_xor(%719, %720) /* ty=Tensor[(4, 15, 15), uint16] */;
  %722 = cast(%var_8781, dtype="int8") /* ty=Tensor[(4, 15, 15), int8] */;
  %723 = shape_of(%721, dtype="int32") /* ty=Tensor[(3), int32] */;
  %724 = cast(%721, dtype="int8") /* ty=Tensor[(4, 15, 15), int8] */;
  %725 = dyn.reshape(%722, %723, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %726 = tan(%714) /* ty=Tensor[(15, 12, 1), float64] */;
  %727 = right_shift(%724, %725) /* ty=Tensor[(4, 15, 15), int8] */;
  (%726, %727)
}

def @func_2375() -> (Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64]) {
  %728 = @func_1487() /* ty=(Tensor[(15, 7, 15), float32],) */;
  %729 = @func_1110() /* ty=(Tensor[(15, 7, 15), float64],) */;
  %730 = %728.0;
  %731 = %729.0;
  (%730, %731)
}

def @func_3981() -> (Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), bool]) {
  %732 = @func_2158() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(11, 16, 9), float32]) */;
  %733 = @func_2375() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64]) */;
  %734 = %733.0;
  %735 = cast(%734, dtype="float32") /* ty=Tensor[(15, 7, 15), float32] */;
  %736 = reshape(%735, newshape=[15, 7, 15]) /* ty=Tensor[(15, 7, 15), float32] */;
  %737 = %732.0;
  %738 = @func_1884(%736) /* ty=Tensor[(15, 7, 15), bool] */;
  (%737, %734, %738)
}

def @func_3623() -> (Tensor[(15, 7, 15), uint16], Tensor[(11, 16, 9), float64], Tensor[(1584), int16]) {
  %756 = fn () -> (Tensor[(15, 7, 15), uint16], Tensor[(11, 16, 9), float64], Tensor[(1584), int16]) {
    %739 = @func_962() /* ty=(Tensor[(15, 7, 15), float64],) */;
    %740 = %739.0;
    %741 = cast(%740, dtype="float32") /* ty=Tensor[(15, 7, 15), float32] */;
    %742 = reshape(%741, newshape=[15, 7, 15]) /* ty=Tensor[(15, 7, 15), float32] */;
    %743 = @func_1440(%742) /* ty=(Tensor[(15, 7, 15), bool],) */;
    %744 = %743.0;
    %745 = cast(%740, dtype="uint16") /* ty=Tensor[(15, 7, 15), uint16] */;
    %746 = shape_of(%744, dtype="int32") /* ty=Tensor[(3), int32] */;
    %747 = cast(%744, dtype="uint16") /* ty=Tensor[(15, 7, 15), uint16] */;
    %748 = dyn.reshape(%745, %746, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %749 = @func_1418() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16]) */;
    %750 = %749.1;
    %751 = cast(%750, dtype="float64") /* ty=Tensor[(11, 16, 9), float64] */;
    %752 = @func_2854() /* ty=(Tensor[(11, 16, 9), float32], Tensor[(15, 7, 15), float64], Tensor[(1584), int16], Tensor[(1584), int16]) */;
    %753 = logical_xor(%747, %748) /* ty=Tensor[(15, 7, 15), uint16] */;
    %754 = sigmoid(%751) /* ty=Tensor[(11, 16, 9), float64] */;
    %755 = %752.2;
    (%753, %754, %755)
  };
  %756() /* ty=(Tensor[(15, 7, 15), uint16], Tensor[(11, 16, 9), float64], Tensor[(1584), int16]) */
}

def @func_6516() -> (Tensor[(15, 7, 15), float32],) {
  @func_6514() /* ty=(Tensor[(15, 7, 15), float32],) */
}

def @func_4199() -> (Tensor[(15, 7, 15), float32], Tensor[(1584), int16]) {
  %757 = @func_3491() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32], Tensor[(450), int16], Tensor[(450), int16]) */;
  %758 = @func_2665() /* ty=(Tensor[(1584), int16],) */;
  %759 = %757.0;
  %760 = %758.0;
  (%759, %760)
}

def @func_855() -> (Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64]) {
  %761 = @func_827() /* ty=(Tensor[(15, 7, 15), float32],) */;
  %762 = @func_827() /* ty=(Tensor[(15, 7, 15), float32],) */;
  %763 = %762.0;
  %764 = cast(%763, dtype="float64") /* ty=Tensor[(15, 7, 15), float64] */;
  %765 = %761.0;
  %766 = acosh(%764) /* ty=Tensor[(15, 7, 15), float64] */;
  (%765, %766)
}

def @func_1420() -> (Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16]) {
  @func_1418() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16]) */
}

def @func_3871() -> (Tensor[(11, 16, 9), float32],) {
  @func_3869() /* ty=(Tensor[(11, 16, 9), float32],) */
}

def @func_4654() -> (Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32]) {
  %767 = @func_1487() /* ty=(Tensor[(15, 7, 15), float32],) */;
  %768 = @func_1418() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16]) */;
  %769 = %768.0;
  %770 = cast(%769, dtype="float32") /* ty=Tensor[(15, 7, 15), float32] */;
  %771 = %767.0;
  %772 = log10(%770) /* ty=Tensor[(15, 7, 15), float32] */;
  (%771, %772)
}

def @func_814() -> Tensor[(15, 7, 15), float32] {
  @func_812() /* ty=Tensor[(15, 7, 15), float32] */
}

def @func_4201() -> (Tensor[(15, 7, 15), float32], Tensor[(1584), int16]) {
  @func_4199() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(1584), int16]) */
}

def @func_4656() -> (Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32]) {
  @func_4654() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32]) */
}

def @func_3336() -> (Tensor[(15, 7, 15), float64], Tensor[(12, 132), int16]) {
  %777 = fn () -> (Tensor[(15, 7, 15), float64], Tensor[(12, 132), int16]) {
    %773 = @func_3256() /* ty=(Tensor[(11, 16, 9), int16], Tensor[(11, 16, 9), int16], Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), float64]) */;
    %774 = @func_1161() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(9, 10, 5), bool], Tensor[(450), int16], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16], Tensor[(12, 132), int16]) */;
    %775 = %773.2;
    %776 = %774.6;
    (%775, %776)
  };
  %777() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(12, 132), int16]) */
}

def @func_4964() -> (Tensor[(15, 7, 15), float64], Tensor[(3, 1, 12), float64], Tensor[(3, 12), float64], Tensor[(15, 7, 15), float64], Tensor[(12, 132), float32]) {
  @func_4962() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(3, 1, 12), float64], Tensor[(3, 12), float64], Tensor[(15, 7, 15), float64], Tensor[(12, 132), float32]) */
}

def @func_5506() -> Tensor[(15, 7, 15), uint32] {
  %779 = fn () -> Tensor[(15, 7, 15), uint32] {
    %778 = @func_3416() /* ty=(Tensor[(15, 7, 15), uint32],) */;
    %778.0
  };
  %779() /* ty=Tensor[(15, 7, 15), uint32] */
}

def @func_4751() -> (Tensor[(15, 7, 15), float32], Tensor[(1584), int16], Tensor[(1584), int16]) {
  %791 = fn () -> (Tensor[(15, 7, 15), float32], Tensor[(1584), int16], Tensor[(1584), int16]) {
    %780 = @func_827() /* ty=(Tensor[(15, 7, 15), float32],) */;
    %781 = %780.0;
    %782 = cast(meta[relay.Constant][27] /* ty=Tensor[(15, 7, 15), float32] */, dtype="float32") /* ty=Tensor[(15, 7, 15), float32] */;
    %783 = shape_of(%781, dtype="int32") /* ty=Tensor[(3), int32] */;
    %784 = cast(%781, dtype="float32") /* ty=Tensor[(15, 7, 15), float32] */;
    %785 = dyn.reshape(%782, %783, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %786 = cast(meta[relay.Constant][28] /* ty=Tensor[(1584), int16] */, dtype="int16") /* ty=Tensor[(1584), int16] */;
    %787 = reshape(%786, newshape=[1584]) /* ty=Tensor[(1584), int16] */;
    %788 = @func_2881(%787) /* ty=(Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16], Tensor[(1584), int16]) */;
    %789 = minimum(%784, %785) /* ty=Tensor[(15, 7, 15), float32] */;
    %790 = %788.2;
    (%789, %790, meta[relay.Constant][28] /* ty=Tensor[(1584), int16] */)
  };
  %791() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(1584), int16], Tensor[(1584), int16]) */
}

def @func_6715(%var_6713: Tensor[(1584), int16]) -> (Tensor[(15, 7, 15), float32], Tensor[(1584), bool]) {
  @func_6712(%var_6713) /* ty=(Tensor[(15, 7, 15), float32], Tensor[(1584), bool]) */
}

def @func_964() -> (Tensor[(15, 7, 15), float64],) {
  @func_962() /* ty=(Tensor[(15, 7, 15), float64],) */
}

def @func_985() -> (Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16], Tensor[(1584), int16]) {
  %802 = fn () -> (Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16], Tensor[(1584), int16]) {
    %792 = @func_827() /* ty=(Tensor[(15, 7, 15), float32],) */;
    %793 = %792.0;
    %794 = cast(%793, dtype="float64") /* ty=Tensor[(15, 7, 15), float64] */;
    %795 = cast(meta[relay.Constant][29] /* ty=Tensor[(1584), int16] */, dtype="int16") /* ty=Tensor[(1584), int16] */;
    %796 = cast(meta[relay.Constant][29] /* ty=Tensor[(1584), int16] */, dtype="int16") /* ty=Tensor[(1584), int16] */;
    %797 = reshape(%795, newshape=[11, 16, 9]) /* ty=Tensor[(11, 16, 9), int16] */;
    %798 = reshape(%796, newshape=[11, 16, 9]) /* ty=Tensor[(11, 16, 9), int16] */;
    %799 = @func_917(%797, %798) /* ty=(Tensor[(11, 16, 9), int16],) */;
    %800 = cos(%794) /* ty=Tensor[(15, 7, 15), float64] */;
    %801 = %799.0;
    (%800, %801, meta[relay.Constant][29] /* ty=Tensor[(1584), int16] */)
  };
  %802() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16], Tensor[(1584), int16]) */
}

def @func_8673(%var_8652: Tensor[(128), bool], %var_8653: Tensor[(1152), bool]) -> (Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), uint32], Tensor[(15, 7, 15), float32], Tensor[(1584), int16], Tensor[(11, 16, 9), float32], Tensor[(15, 7, 15), uint32], Tensor[(15, 7, 15), float32], Tensor[(128), bool], Tensor[(1152), bool], Tensor[(12, 132), int8]) {
  %803 = @func_4832() /* ty=Tensor[(15, 7, 15), float32] */;
  %804 = cast(%803, dtype="float64") /* ty=Tensor[(15, 7, 15), float64] */;
  %805 = reshape(%804, newshape=[15, 7, 15]) /* ty=Tensor[(15, 7, 15), float64] */;
  %806 = @func_3038(%805) /* ty=(Tensor[(15, 7, 15), uint16], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32]) */;
  %807 = @func_4807() /* ty=(Tensor[(1584), int16], Tensor[(11, 16, 9), int16]) */;
  %808 = @func_6907() /* ty=(Tensor[(11, 16, 9), float32], Tensor[(11, 16, 9), int16], Tensor[(130, 1), float64], Tensor[(11, 16, 9), uint8]) */;
  %809 = @func_4379() /* ty=(Tensor[(11, 16, 9), int16], Tensor[(15, 7, 15), uint32]) */;
  %810 = cast(%var_8652, dtype="bool") /* ty=Tensor[(128), bool] */;
  %811 = cast(%var_8653, dtype="bool") /* ty=Tensor[(1152), bool] */;
  %812 = reshape(%810, newshape=[1, 8, 16]) /* ty=Tensor[(1, 8, 16), bool] */;
  %813 = reshape(%811, newshape=[9, 8, 16]) /* ty=Tensor[(9, 8, 16), bool] */;
  %814 = @func_8334(%812, %813) /* ty=(Tensor[(9, 8, 16), bool], Tensor[(11, 16, 9), int16], Tensor[(15, 7, 15), float32], Tensor[(9, 8, 16), float64], Tensor[(1584), uint16], Tensor[(15, 7, 15), float32], Tensor[(9, 8, 16), float64]) */;
  %815 = %808.0;
  %816 = cast(%815, dtype="int16") /* ty=Tensor[(11, 16, 9), int16] */;
  %817 = reshape(%816, newshape=[12, 132]) /* ty=Tensor[(12, 132), int16] */;
  %818 = @func_4574(%817) /* ty=(Tensor[(12, 132), bool], Tensor[(12, 132), int8], Tensor[(11, 16, 9), float64]) */;
  %819 = @func_8599() /* ty=Tensor[(15, 7, 15), uint32] */;
  %820 = %806.2;
  %821 = %807.0;
  %822 = %809.1;
  %823 = %814.2;
  %824 = %818.1;
  (%803, %819, %820, %821, %815, %822, %823, %var_8652, %var_8653, %824)
}

def @func_6659(%var_6657: Tensor[(10, 1, 12), float32]) -> Tensor[(10, 1, 12), float32] {
  @func_6656(%var_6657) /* ty=Tensor[(10, 1, 12), float32] */
}

def @func_8212(%var_8210: Tensor[(450), int16]) -> (Tensor[(15, 7, 15), float64], Tensor[(12, 7, 12), uint64], Tensor[(1008), uint64], Tensor[(450), int16]) {
  @func_8209(%var_8210) /* ty=(Tensor[(15, 7, 15), float64], Tensor[(12, 7, 12), uint64], Tensor[(1008), uint64], Tensor[(450), int16]) */
}

def @func_6492() -> (Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64]) {
  %825 = @func_855() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64]) */;
  %826 = @func_4179() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(1584), int16]) */;
  %827 = @func_3491() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32], Tensor[(450), int16], Tensor[(450), int16]) */;
  %828 = @func_3335() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(12, 132), int16]) */;
  %829 = %825.1;
  %830 = %826.0;
  %831 = %827.1;
  %832 = %828.0;
  (%829, %830, %831, %832)
}

def @func_6712(%var_6696: Tensor[(1584), int16]) -> (Tensor[(15, 7, 15), float32], Tensor[(1584), bool]) {
  %833 = @func_4179() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(1584), int16]) */;
  %834 = %833.1;
  %835 = cast(%var_6696, dtype="bool") /* ty=Tensor[(1584), bool] */;
  %836 = shape_of(%834, dtype="int32") /* ty=Tensor[(1), int32] */;
  %837 = cast(%834, dtype="bool") /* ty=Tensor[(1584), bool] */;
  %838 = dyn.reshape(%835, %836, newshape=[]) /* ty=Tensor[(?), bool] */;
  %839 = @func_2576() /* ty=Tensor[(15, 7, 15), float32] */;
  %840 = greater(%837, %838) /* ty=Tensor[(1584), bool] */;
  (%839, %840)
}

def @func_3687() -> Tensor[(15, 7, 15), float32] {
  %841 = @func_1078() /* ty=(Tensor[(15, 7, 15), float32],) */;
  %841.0
}

def @func_4179() -> (Tensor[(15, 7, 15), float64], Tensor[(1584), int16]) {
  %842 = @func_3590() /* ty=(Tensor[(1584), int16], Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), float64]) */;
  %843 = @func_1956() /* ty=Tensor[(15, 7, 15), float64] */;
  %844 = %842.0;
  (%843, %844)
}

def @func_5400() -> Tensor[(12, 2, 4), float64] {
  %845 = cast(meta[relay.Constant][30] /* ty=Tensor[(12, 2, 4), float64] */, dtype="float64") /* ty=Tensor[(12, 2, 4), float64] */;
  exp(%845) /* ty=Tensor[(12, 2, 4), float64] */
}

def @func_3417() -> (Tensor[(15, 7, 15), uint32],) {
  %848 = fn () -> (Tensor[(15, 7, 15), uint32],) {
    %846 = @func_2864() /* ty=(Tensor[(15, 7, 15), uint32],) */;
    %847 = %846.0;
    (%847,)
  };
  %848() /* ty=(Tensor[(15, 7, 15), uint32],) */
}

def @func_8677(%var_8675: Tensor[(128), bool], %var_8676: Tensor[(1152), bool]) -> (Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), uint32], Tensor[(15, 7, 15), float32], Tensor[(1584), int16], Tensor[(11, 16, 9), float32], Tensor[(15, 7, 15), uint32], Tensor[(15, 7, 15), float32], Tensor[(128), bool], Tensor[(1152), bool], Tensor[(12, 132), int8]) {
  @func_8673(%var_8675, %var_8676) /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), uint32], Tensor[(15, 7, 15), float32], Tensor[(1584), int16], Tensor[(11, 16, 9), float32], Tensor[(15, 7, 15), uint32], Tensor[(15, 7, 15), float32], Tensor[(128), bool], Tensor[(1152), bool], Tensor[(12, 132), int8]) */
}

def @func_2549(%var_2531: Tensor[(4, 5, 7), bool], %var_2532: Tensor[(4, 5, 7), bool]) -> (Tensor[(4, 5, 7), bool], Tensor[(11, 16, 9), float64]) {
  %849 = cast(%var_2532, dtype="bool") /* ty=Tensor[(4, 5, 7), bool] */;
  %850 = shape_of(%var_2531, dtype="int32") /* ty=Tensor[(3), int32] */;
  %851 = cast(%var_2531, dtype="bool") /* ty=Tensor[(4, 5, 7), bool] */;
  %852 = dyn.reshape(%849, %850, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %853 = @func_1635() /* ty=(Tensor[(11, 16, 9), int16], Tensor[(11, 16, 9), int16]) */;
  %854 = %853.0;
  %855 = cast(%854, dtype="float64") /* ty=Tensor[(11, 16, 9), float64] */;
  %856 = logical_or(%851, %852) /* ty=Tensor[(4, 5, 7), bool] */;
  %857 = asinh(%855) /* ty=Tensor[(11, 16, 9), float64] */;
  (%856, %857)
}

def @func_2005(%var_2004: Tensor[(15, 7, 15), float32]) -> Tensor[(15, 7, 15), bool] {
  %864 = fn (%var_1989: Tensor[(15, 7, 15), float32]) -> Tensor[(15, 7, 15), bool] {
    %858 = @func_1487() /* ty=(Tensor[(15, 7, 15), float32],) */;
    %859 = %858.0;
    %860 = cast(%var_1989, dtype="bool") /* ty=Tensor[(15, 7, 15), bool] */;
    %861 = shape_of(%859, dtype="int32") /* ty=Tensor[(3), int32] */;
    %862 = cast(%859, dtype="bool") /* ty=Tensor[(15, 7, 15), bool] */;
    %863 = dyn.reshape(%860, %861, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater(%862, %863) /* ty=Tensor[(15, 7, 15), bool] */
  };
  %864(%var_2004) /* ty=Tensor[(15, 7, 15), bool] */
}

def @func_2864() -> (Tensor[(15, 7, 15), uint32],) {
  %865 = @func_2195() /* ty=(Tensor[(15, 7, 15), uint32], Tensor[(12, 132), int16], Tensor[(15, 7, 15), float64]) */;
  %866 = %865.0;
  (%866,)
}

def @func_3983() -> (Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), bool]) {
  @func_3981() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), bool]) */
}

def @func_3689() -> Tensor[(15, 7, 15), float32] {
  @func_3687() /* ty=Tensor[(15, 7, 15), float32] */
}

def @func_4449() -> (Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), uint32]) {
  %872 = fn () -> (Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), uint32]) {
    %867 = @func_1956() /* ty=Tensor[(15, 7, 15), float64] */;
    %868 = cast(%867, dtype="float64") /* ty=Tensor[(15, 7, 15), float64] */;
    %869 = reshape(%868, newshape=[15, 7, 15]) /* ty=Tensor[(15, 7, 15), float64] */;
    %870 = @func_1212(%869) /* ty=(Tensor[(12, 132), int16], Tensor[(15, 7, 15), uint32], Tensor[(15, 7, 15), float32]) */;
    %871 = %870.1;
    (%867, %871)
  };
  %872() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), uint32]) */
}

def @func_6406(%var_6403: float64, %var_6404: Tensor[(12, 8, 2), float64], %var_6405: Tensor[(10, 4, 4), float64]) -> (Tensor[(12, 8, 2), float64], Tensor[(10, 4, 4), float32], Tensor[(12, 8, 2), float32], Tensor[(15, 7, 15), float64]) {
  @func_6401(%var_6403, %var_6404, %var_6405) /* ty=(Tensor[(12, 8, 2), float64], Tensor[(10, 4, 4), float32], Tensor[(12, 8, 2), float32], Tensor[(15, 7, 15), float64]) */
}

def @func_4181() -> (Tensor[(15, 7, 15), float64], Tensor[(1584), int16]) {
  @func_4179() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(1584), int16]) */
}

def @func_7010(%var_7008: Tensor[(36), float64]) -> (Tensor[(15, 7, 15), uint32], Tensor[(450), int16], Tensor[(450), int16], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), float32], Tensor[(36), float64], Tensor[(11, 13, 14), float64], Tensor[(2002), int64], Tensor[(15, 7, 15), uint16]) {
  @func_7007(%var_7008) /* ty=(Tensor[(15, 7, 15), uint32], Tensor[(450), int16], Tensor[(450), int16], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), float32], Tensor[(36), float64], Tensor[(11, 13, 14), float64], Tensor[(2002), int64], Tensor[(15, 7, 15), uint16]) */
}

def @func_4233() -> Tensor[(15, 7, 15), float32] {
  %874 = fn () -> Tensor[(15, 7, 15), float32] {
    %873 = @func_2158() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(11, 16, 9), float32]) */;
    %873.0
  };
  %874() /* ty=Tensor[(15, 7, 15), float32] */
}

def @func_3493() -> (Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32], Tensor[(450), int16], Tensor[(450), int16]) {
  @func_3491() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32], Tensor[(450), int16], Tensor[(450), int16]) */
}

def @func_7266(%var_7250: Tensor[(11, 16, 9), float64]) -> (Tensor[(11, 16, 9), float32], Tensor[(9, 10, 5), float32], Tensor[(15, 7, 15), float32], Tensor[(11, 16, 9), bool]) {
  %875 = @func_2158() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(11, 16, 9), float32]) */;
  %876 = @func_3727() /* ty=(Tensor[(15, 7, 15), uint32], Tensor[(9, 10, 5), bool], Tensor[(450), int16], Tensor[(1584), int16]) */;
  %877 = %876.1;
  %878 = cast(%877, dtype="float32") /* ty=Tensor[(9, 10, 5), float32] */;
  %879 = @func_6750() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float32]) */;
  %880 = %875.1;
  %881 = cast(%880, dtype="int16") /* ty=Tensor[(11, 16, 9), int16] */;
  %882 = reshape(%881, newshape=[12, 132]) /* ty=Tensor[(12, 132), int16] */;
  %883 = @func_4574(%882) /* ty=(Tensor[(12, 132), bool], Tensor[(12, 132), int8], Tensor[(11, 16, 9), float64]) */;
  %884 = %883.2;
  %885 = cast(%var_7250, dtype="bool") /* ty=Tensor[(11, 16, 9), bool] */;
  %886 = shape_of(%884, dtype="int32") /* ty=Tensor[(3), int32] */;
  %887 = cast(%884, dtype="bool") /* ty=Tensor[(11, 16, 9), bool] */;
  %888 = dyn.reshape(%885, %886, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %889 = sinh(%878) /* ty=Tensor[(9, 10, 5), float32] */;
  %890 = %879.1;
  %891 = greater_equal(%887, %888) /* ty=Tensor[(11, 16, 9), bool] */;
  (%880, %889, %890, %891)
}

def @func_2920() -> (Tensor[(11, 16, 9), int16], Tensor[(11, 16, 9), float64], Tensor[(140), bool]) {
  %892 = @func_2621() /* ty=(Tensor[(11, 16, 9), int16],) */;
  %893 = cast(meta[relay.Constant][31] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
  %894 = cast(meta[relay.Constant][31] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
  %895 = reshape(%893, newshape=[4, 5, 7]) /* ty=Tensor[(4, 5, 7), bool] */;
  %896 = reshape(%894, newshape=[4, 5, 7]) /* ty=Tensor[(4, 5, 7), bool] */;
  %897 = @func_2549(%895, %896) /* ty=(Tensor[(4, 5, 7), bool], Tensor[(11, 16, 9), float64]) */;
  %898 = %892.0;
  %899 = %897.1;
  (%898, %899, meta[relay.Constant][31] /* ty=Tensor[(140), bool] */)
}

def @func_7885() -> Tensor[(15, 7, 15), uint32] {
  %900 = @func_2864() /* ty=(Tensor[(15, 7, 15), uint32],) */;
  %900.0
}

def @func_5346(%var_5304: int32) -> (Tensor[(450), int16], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), bool], Tensor[(15, 7, 15), float32], Tensor[(11, 16, 9), bool], Tensor[(11, 16, 9), float64], Tensor[(4, 15, 15), bool], Tensor[(8, 15, 1), bool], int32, Tensor[(1584), int16]) {
  %901 = @func_3727() /* ty=(Tensor[(15, 7, 15), uint32], Tensor[(9, 10, 5), bool], Tensor[(450), int16], Tensor[(1584), int16]) */;
  %902 = @func_1418() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16]) */;
  %903 = @func_3687() /* ty=Tensor[(15, 7, 15), float32] */;
  %904 = cast(%903, dtype="float32") /* ty=Tensor[(15, 7, 15), float32] */;
  %905 = reshape(%904, newshape=[15, 7, 15]) /* ty=Tensor[(15, 7, 15), float32] */;
  %906 = @func_4706() /* ty=(Tensor[(11, 16, 9), float32],) */;
  %907 = %906.0;
  %908 = cast(%907, dtype="float32") /* ty=Tensor[(11, 16, 9), float32] */;
  %909 = log(%908) /* ty=Tensor[(11, 16, 9), float32] */;
  %910 = cast(%907, dtype="bool") /* ty=Tensor[(11, 16, 9), bool] */;
  %911 = shape_of(%909, dtype="int32") /* ty=Tensor[(3), int32] */;
  %912 = cast(%909, dtype="bool") /* ty=Tensor[(11, 16, 9), bool] */;
  %913 = dyn.reshape(%910, %911, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %914 = cast(%907, dtype="float64") /* ty=Tensor[(11, 16, 9), float64] */;
  %915 = cast(%var_5304, dtype="int32") /* ty=int32 */;
  %916 = reshape(%915, newshape=[]) /* ty=int32 */;
  %917 = @func_4750() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(1584), int16], Tensor[(1584), int16]) */;
  %918 = %901.2;
  %919 = %902.0;
  %920 = @func_1388(%905) /* ty=Tensor[(15, 7, 15), bool] */;
  %921 = @func_2576() /* ty=Tensor[(15, 7, 15), float32] */;
  %922 = less_equal(%912, %913) /* ty=Tensor[(11, 16, 9), bool] */;
  %923 = exp(%914) /* ty=Tensor[(11, 16, 9), float64] */;
  %924 = @func_4411() /* ty=Tensor[(4, 15, 15), bool] */;
  %925 = @func_4774(%916) /* ty=Tensor[(8, 15, 1), bool] */;
  %926 = %917.2;
  (%918, %903, %919, %920, %921, %922, %923, %924, %925, %var_5304, %926)
}

def @func_4808() -> (Tensor[(1584), int16], Tensor[(11, 16, 9), int16]) {
  %931 = fn () -> (Tensor[(1584), int16], Tensor[(11, 16, 9), int16]) {
    %927 = @func_4750() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(1584), int16], Tensor[(1584), int16]) */;
    %928 = @func_2920() /* ty=(Tensor[(11, 16, 9), int16], Tensor[(11, 16, 9), float64], Tensor[(140), bool]) */;
    %929 = %927.2;
    %930 = %928.0;
    (%929, %930)
  };
  %931() /* ty=(Tensor[(1584), int16], Tensor[(11, 16, 9), int16]) */
}

def @func_2337(%var_2279: Tensor[(15, 7, 15), float32]) -> (Tensor[(15, 7, 15), bool], Tensor[(15, 7, 15), float32], Tensor[(1584), int16], Tensor[(9, 10, 5), bool]) {
  %932 = @func_1078() /* ty=(Tensor[(15, 7, 15), float32],) */;
  %933 = %932.0;
  %934 = cast(%var_2279, dtype="int32") /* ty=Tensor[(15, 7, 15), int32] */;
  %935 = shape_of(%933, dtype="int32") /* ty=Tensor[(3), int32] */;
  %936 = cast(%933, dtype="int32") /* ty=Tensor[(15, 7, 15), int32] */;
  %937 = dyn.reshape(%934, %935, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %938 = maximum(%936, %937) /* ty=Tensor[(15, 7, 15), int32] */;
  %939 = cast(%var_2279, dtype="bool") /* ty=Tensor[(15, 7, 15), bool] */;
  %940 = shape_of(%938, dtype="int32") /* ty=Tensor[(3), int32] */;
  %941 = cast(%938, dtype="bool") /* ty=Tensor[(15, 7, 15), bool] */;
  %942 = dyn.reshape(%939, %940, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %943 = cast(%var_2279, dtype="float32") /* ty=Tensor[(15, 7, 15), float32] */;
  %944 = @func_1260() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(1584), int16]) */;
  %945 = @func_1161() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(9, 10, 5), bool], Tensor[(450), int16], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64], Tensor[(11, 16, 9), int16], Tensor[(12, 132), int16]) */;
  %946 = less_equal(%941, %942) /* ty=Tensor[(15, 7, 15), bool] */;
  %947 = rsqrt(%943) /* ty=Tensor[(15, 7, 15), float32] */;
  %948 = %944.1;
  %949 = %945.1;
  (%946, %947, %948, %949)
}

def @func_7285() -> (Tensor[(15, 7, 15), float32],) {
  %950 = @func_6634() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(4, 15, 15), bool]) */;
  %951 = %950.0;
  (%951,)
}

def @func_828() -> (Tensor[(15, 7, 15), float32],) {
  %953 = fn () -> (Tensor[(15, 7, 15), float32],) {
    %952 = @func_812() /* ty=Tensor[(15, 7, 15), float32] */;
    (%952,)
  };
  %953() /* ty=(Tensor[(15, 7, 15), float32],) */
}

def @func_5952() -> (Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), bool], Tensor[(?, 7, 3), int16], Tensor[(21), int16], Tensor[(15, 7, 15), float32]) {
  %962 = fn () -> (Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), bool], Tensor[(?, 7, 3), int16], Tensor[(21), int16], Tensor[(15, 7, 15), float32]) {
    %954 = @func_812() /* ty=Tensor[(15, 7, 15), float32] */;
    %955 = cast(%954, dtype="float32") /* ty=Tensor[(15, 7, 15), float32] */;
    %956 = reshape(%955, newshape=[15, 7, 15]) /* ty=Tensor[(15, 7, 15), float32] */;
    %957 = cast(meta[relay.Constant][32] /* ty=Tensor[(21), int16] */, dtype="int16") /* ty=Tensor[(21), int16] */;
    %958 = reshape(%957, newshape=[1, 7, 3]) /* ty=Tensor[(1, 7, 3), int16] */;
    %959 = @func_2003(%956) /* ty=Tensor[(15, 7, 15), bool] */;
    %960 = @func_3073(%958) /* ty=Tensor[(?, 7, 3), int16] */;
    %961 = @func_4232() /* ty=Tensor[(15, 7, 15), float32] */;
    (%954, %959, %960, meta[relay.Constant][32] /* ty=Tensor[(21), int16] */, %961)
  };
  %962() /* ty=(Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), bool], Tensor[(?, 7, 3), int16], Tensor[(21), int16], Tensor[(15, 7, 15), float32]) */
}

def @func_5767(%var_5765: Tensor[(14, 15, 14), float64], %var_5766: Tensor[(14, 15, 14), float64]) -> (Tensor[(14, 15, 14), float64],) {
  %968 = fn (%var_5757: Tensor[(14, 15, 14), float64], %var_5758: Tensor[(14, 15, 14), float64]) -> (Tensor[(14, 15, 14), float64],) {
    %963 = cast(%var_5758, dtype="float64") /* ty=Tensor[(14, 15, 14), float64] */;
    %964 = shape_of(%var_5757, dtype="int32") /* ty=Tensor[(3), int32] */;
    %965 = cast(%var_5757, dtype="float64") /* ty=Tensor[(14, 15, 14), float64] */;
    %966 = dyn.reshape(%963, %964, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %967 = power(%965, %966) /* ty=Tensor[(14, 15, 14), float64] */;
    (%967,)
  };
  %968(%var_5765, %var_5766) /* ty=(Tensor[(14, 15, 14), float64],) */
}

def @func_4833() -> Tensor[(15, 7, 15), float32] {
  %970 = fn () -> Tensor[(15, 7, 15), float32] {
    %969 = @func_1487() /* ty=(Tensor[(15, 7, 15), float32],) */;
    %969.0
  };
  %970() /* ty=Tensor[(15, 7, 15), float32] */
}

def @func_7675() -> (Tensor[(1, 15, 1), float32],) {
  %971 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 15, 1), float32] */, dtype="float32") /* ty=Tensor[(1, 15, 1), float32] */;
  %972 = acos(%971) /* ty=Tensor[(1, 15, 1), float32] */;
  (%972,)
}

def @func_6494() -> (Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64]) {
  @func_6492() /* ty=(Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), float64], Tensor[(15, 7, 15), float32], Tensor[(15, 7, 15), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen112/build/output.py", line 2935, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:50:35] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

