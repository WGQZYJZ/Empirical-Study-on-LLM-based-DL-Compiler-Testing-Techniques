==========mod==========
#[version = "0.0.5"]
def @func_2267() -> Tensor[(2, 15, 6), float64] {
  %0 = @func_1133() /* ty=(Tensor[(180), float64], Tensor[(2, 15, 6), float64]) */;
  %0.1
}

def @func_5038() -> (Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) {
  %1 = @func_3926() /* ty=(Tensor[(5, 4, 6), bool],) */;
  %2 = @func_2499() /* ty=(Tensor[(180), float64], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */;
  %3 = %1.0;
  %4 = %2.1;
  %5 = @func_1992() /* ty=Tensor[(180), float64] */;
  (%3, %4, %5)
}

def @func_2583(%var_2567: Tensor[(4, 6, 4), float64]) -> Tensor[(4, 6, 4), float64] {
  %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(4, 6, 4), float64] */, dtype="float64") /* ty=Tensor[(4, 6, 4), float64] */;
  %7 = shape_of(%var_2567, dtype="int32") /* ty=Tensor[(3), int32] */;
  %8 = cast(%var_2567, dtype="float64") /* ty=Tensor[(4, 6, 4), float64] */;
  %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%8, %9) /* ty=Tensor[(4, 6, 4), float64] */
}

def @func_3290() -> (Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float64], Tensor[(180), float64]) {
  %10 = @func_1133() /* ty=(Tensor[(180), float64], Tensor[(2, 15, 6), float64]) */;
  %11 = %10.1;
  %12 = cast(%11, dtype="float32") /* ty=Tensor[(2, 15, 6), float32] */;
  %13 = reshape(%12, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), float32] */;
  %14 = @func_735(%13) /* ty=(Tensor[(2, 15, 6), float64],) */;
  %15 = @func_478() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(3, 14, 8), float64], Tensor[(336), float64], Tensor[(180), float64], Tensor[(5, 4, 6), bool], Tensor[(180), float64]) */;
  %16 = %14.0;
  %17 = %15.5;
  (%11, %16, %17)
}

def @func_5485(%var_5426: Tensor[(11, 15, 1), float32]) -> (Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float64], Tensor[(11, 15, ?), uint32], Tensor[(11, 15, ?), int16], Tensor[(2, 15, 6), float32], Tensor[(11, 15, ?), float64]) {
  %18 = @func_4011() /* ty=(Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */;
  %19 = cast(%var_5426, dtype="float32") /* ty=Tensor[(11, 15, 1), float32] */;
  %20 = exp(%19) /* ty=Tensor[(11, 15, 1), float32] */;
  %21 = cast(%var_5426, dtype="uint32") /* ty=Tensor[(11, 15, 1), uint32] */;
  %22 = shape_of(%20, dtype="int32") /* ty=Tensor[(3), int32] */;
  %23 = cast(%20, dtype="uint32") /* ty=Tensor[(11, 15, 1), uint32] */;
  %24 = dyn.reshape(%21, %22, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %25 = maximum(%23, %24) /* ty=Tensor[(11, 15, ?), uint32] */;
  %26 = cast(%20, dtype="uint64") /* ty=Tensor[(11, 15, 1), uint64] */;
  %27 = shape_of(%25, dtype="int32") /* ty=Tensor[(3), int32] */;
  %28 = cast(%25, dtype="uint64") /* ty=Tensor[(11, 15, ?), uint64] */;
  %29 = dyn.reshape(%26, %27, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %30 = left_shift(%28, %29) /* ty=Tensor[(11, 15, ?), uint64] */;
  %31 = cast(%30, dtype="uint32") /* ty=Tensor[(11, 15, ?), uint32] */;
  %32 = shape_of(%20, dtype="int32") /* ty=Tensor[(3), int32] */;
  %33 = cast(%20, dtype="uint32") /* ty=Tensor[(11, 15, 1), uint32] */;
  %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %35 = cast(%var_5426, dtype="bool") /* ty=Tensor[(11, 15, 1), bool] */;
  %36 = shape_of(%20, dtype="int32") /* ty=Tensor[(3), int32] */;
  %37 = cast(%20, dtype="bool") /* ty=Tensor[(11, 15, 1), bool] */;
  %38 = dyn.reshape(%35, %36, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %39 = logical_and(%37, %38) /* ty=Tensor[(11, 15, ?), bool] */;
  %40 = cast(%39, dtype="int16") /* ty=Tensor[(11, 15, ?), int16] */;
  %41 = shape_of(%30, dtype="int32") /* ty=Tensor[(3), int32] */;
  %42 = cast(%30, dtype="int16") /* ty=Tensor[(11, 15, ?), int16] */;
  %43 = dyn.reshape(%40, %41, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %44 = cast(%30, dtype="float64") /* ty=Tensor[(11, 15, ?), float64] */;
  %45 = shape_of(%25, dtype="int32") /* ty=Tensor[(3), int32] */;
  %46 = cast(%25, dtype="float64") /* ty=Tensor[(11, 15, ?), float64] */;
  %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %48 = %18.2;
  %49 = @func_1684() /* ty=Tensor[(2, 15, 6), float64] */;
  %50 = @func_3420() /* ty=Tensor[(2, 15, 6), float64] */;
  %51 = minimum(%33, %34) /* ty=Tensor[(11, 15, ?), uint32] */;
  %52 = right_shift(%42, %43) /* ty=Tensor[(11, 15, ?), int16] */;
  %53 = @func_2213() /* ty=Tensor[(2, 15, 6), float32] */;
  %54 = mod(%46, %47) /* ty=Tensor[(11, 15, ?), float64] */;
  (%48, %49, %50, %51, %52, %53, %54)
}

def @func_7320(%var_7317: Tensor[(156), float64]) -> (Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(2, 15, 6), float32], Tensor[(156), float64]) {
  %55 = @func_3057() /* ty=(Tensor[(2, 15, 6), float32],) */;
  %56 = @func_3290() /* ty=(Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float64], Tensor[(180), float64]) */;
  %57 = cast(%var_7317, dtype="float64") /* ty=Tensor[(156), float64] */;
  %58 = reshape(%57, newshape=[1, 12, 13]) /* ty=Tensor[(1, 12, 13), float64] */;
  %59 = @func_159(%58) /* ty=(Tensor[(1, 12, 13), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
  %60 = %55.0;
  %61 = %56.2;
  %62 = %59.1;
  (%60, %61, %62, %var_7317)
}

def @func_1006(%var_986: Tensor[(5, 4, 6), bool]) -> (Tensor[(5, 4, 6), int8], Tensor[(336), float64], Tensor[(180), float32]) {
  %63 = @func_652() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(180), float64], Tensor[(156), float64]) */;
  %64 = %63.0;
  %65 = cast(%var_986, dtype="int8") /* ty=Tensor[(5, 4, 6), int8] */;
  %66 = shape_of(%64, dtype="int32") /* ty=Tensor[(3), int32] */;
  %67 = cast(%64, dtype="int8") /* ty=Tensor[(5, 4, 6), int8] */;
  %68 = dyn.reshape(%65, %66, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %69 = cast(meta[relay.Constant][1] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %70 = reshape(%69, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), float32] */;
  %71 = @func_867(%70) /* ty=(Tensor[(2, 15, 6), float32], Tensor[(5, 4, 6), bool], Tensor[(3, 14, 8), float64], Tensor[(336), float64], Tensor[(3, 14, 8), float64]) */;
  %72 = bitwise_xor(%67, %68) /* ty=Tensor[(5, 4, 6), int8] */;
  %73 = %71.3;
  (%72, %73, meta[relay.Constant][1] /* ty=Tensor[(180), float32] */)
}

def @func_7203() -> (Tensor[(2, 15, 6), float64],) {
  %74 = @func_2429() /* ty=(Tensor[(2, 15, 6), float64], Tensor[(3, 14, 8), float64], Tensor[(3, 14, 8), float32]) */;
  %75 = %74.0;
  (%75,)
}

def @func_5282() -> Tensor[(2, 15, 6), float32] {
  %76 = @func_1922() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */;
  %76.2
}

def @func_2356() -> (Tensor[(336, 12), float32],) {
  %77 = @func_2138() /* ty=(Tensor[(336, 12), float32], Tensor[(336, ?), float64]) */;
  %78 = %77.0;
  (%78,)
}

def @func_2138() -> (Tensor[(336, 12), float32], Tensor[(336, ?), float64]) {
  %79 = @func_1800() /* ty=(Tensor[(336, 1), float64],) */;
  %80 = %79.0;
  %81 = cast(%80, dtype="float32") /* ty=Tensor[(336, 1), float32] */;
  %82 = asin(%81) /* ty=Tensor[(336, 1), float32] */;
  %83 = cast(%82, dtype="float64") /* ty=Tensor[(336, 1), float64] */;
  %84 = cast(meta[relay.Constant][2] /* ty=Tensor[(336, 12), float32] */, dtype="float64") /* ty=Tensor[(336, 12), float64] */;
  %85 = minimum(%83, %84) /* ty=Tensor[(336, 12), float64] */;
  %86 = cast(%85, dtype="float32") /* ty=Tensor[(336, 12), float32] */;
  %87 = cast(%82, dtype="float64") /* ty=Tensor[(336, 1), float64] */;
  %88 = tan(%87) /* ty=Tensor[(336, 1), float64] */;
  %89 = cast(%88, dtype="float32") /* ty=Tensor[(336, 1), float32] */;
  %90 = acos(%89) /* ty=Tensor[(336, 1), float32] */;
  %91 = cast(%90, dtype="float64") /* ty=Tensor[(336, 1), float64] */;
  %92 = cosh(%91) /* ty=Tensor[(336, 1), float64] */;
  %93 = cast(%82, dtype="bool") /* ty=Tensor[(336, 1), bool] */;
  %94 = shape_of(%90, dtype="int32") /* ty=Tensor[(2), int32] */;
  %95 = cast(%90, dtype="bool") /* ty=Tensor[(336, 1), bool] */;
  %96 = dyn.reshape(%93, %94, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %97 = less(%95, %96) /* ty=Tensor[(336, ?), bool] */;
  %98 = cast(%97, dtype="float64") /* ty=Tensor[(336, ?), float64] */;
  %99 = shape_of(%92, dtype="int32") /* ty=Tensor[(2), int32] */;
  %100 = cast(%92, dtype="float64") /* ty=Tensor[(336, 1), float64] */;
  %101 = dyn.reshape(%98, %99, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %102 = sin(%86) /* ty=Tensor[(336, 12), float32] */;
  %103 = floor_divide(%100, %101) /* ty=Tensor[(336, ?), float64] */;
  (%102, %103)
}

def @func_5310(%var_5306: Tensor[(1, 126), uint8]) -> (Tensor[(2, 15, 6), float32], Tensor[(336, 12), float32], Tensor[(1, 126), uint8]) {
  %104 = @func_389() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
  %105 = cast(%var_5306, dtype="uint8") /* ty=Tensor[(1, 126), uint8] */;
  %106 = reshape(%105, newshape=[7, 3, 6]) /* ty=Tensor[(7, 3, 6), uint8] */;
  %107 = @func_2869(%106) /* ty=(Tensor[(7, 3, 6), bool], Tensor[(14, 4, 15), float64], Tensor[(2, 15, 6), float32], Tensor[(336), float64], Tensor[(336, 12), float32]) */;
  %108 = %104.1;
  %109 = %107.4;
  (%108, %109, %var_5306)
}

def @func_6345() -> Tensor[(2, 15, 6), float32] {
  @func_5282() /* ty=Tensor[(2, 15, 6), float32] */
}

def @func_7339() -> (Tensor[(2, 15, 6), float64], Tensor[(4, 6, 4), float64], Tensor[(96), float64]) {
  %110 = cast(meta[relay.Constant][3] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
  %111 = reshape(%110, newshape=[4, 6, 4]) /* ty=Tensor[(4, 6, 4), float64] */;
  %112 = @func_3420() /* ty=Tensor[(2, 15, 6), float64] */;
  %113 = @func_2583(%111) /* ty=Tensor[(4, 6, 4), float64] */;
  (%112, %113, meta[relay.Constant][3] /* ty=Tensor[(96), float64] */)
}

def @func_3840() -> (Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32], Tensor[(336, 12), float32], Tensor[(2, 15, 6), float32]) {
  %114 = @func_2374() /* ty=(Tensor[(2, 15, 6), float32],) */;
  %115 = @func_1133() /* ty=(Tensor[(180), float64], Tensor[(2, 15, 6), float64]) */;
  %116 = @func_389() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
  %117 = @func_2356() /* ty=(Tensor[(336, 12), float32],) */;
  %118 = @func_3129() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
  %119 = %118.0;
  %120 = cast(%119, dtype="float32") /* ty=Tensor[(2, 15, 6), float32] */;
  %121 = %114.0;
  %122 = %115.1;
  %123 = %116.1;
  %124 = %117.0;
  %125 = asin(%120) /* ty=Tensor[(2, 15, 6), float32] */;
  (%121, %122, %123, %124, %125)
}

def @func_1322() -> (Tensor[(336), float64],) {
  %126 = @func_478() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(3, 14, 8), float64], Tensor[(336), float64], Tensor[(180), float64], Tensor[(5, 4, 6), bool], Tensor[(180), float64]) */;
  %127 = %126.4;
  (%127,)
}

def @func_2194() -> Tensor[(180), float64] {
  %128 = @func_1568() /* ty=(Tensor[(180), float64], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32]) */;
  %128.0
}

def @func_1484() -> (Tensor[(180), float64], Tensor[(180), float64], Tensor[(2, 15, 6), float32]) {
  %129 = @func_652() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(180), float64], Tensor[(156), float64]) */;
  %130 = @func_1157() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
  %131 = @func_1312() /* ty=Tensor[(2, 15, 6), float32] */;
  %132 = cast(%131, dtype="float32") /* ty=Tensor[(2, 15, 6), float32] */;
  %133 = %129.3;
  %134 = %130.2;
  %135 = erf(%132) /* ty=Tensor[(2, 15, 6), float32] */;
  (%133, %134, %135)
}

def @func_8212(%var_8196: Tensor[(16, 15, 10), float32]) -> (Tensor[(16, 15, 10), bool], Tensor[(14, 4, 15), float64]) {
  %136 = cast(meta[relay.Constant][4] /* ty=Tensor[(16, 15, 10), float32] */, dtype="float32") /* ty=Tensor[(16, 15, 10), float32] */;
  %137 = sqrt(%136) /* ty=Tensor[(16, 15, 10), float32] */;
  %138 = cast(%var_8196, dtype="bool") /* ty=Tensor[(16, 15, 10), bool] */;
  %139 = shape_of(%137, dtype="int32") /* ty=Tensor[(3), int32] */;
  %140 = cast(%137, dtype="bool") /* ty=Tensor[(16, 15, 10), bool] */;
  %141 = dyn.reshape(%138, %139, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %142 = @func_2727() /* ty=(Tensor[(14, 4, 15), float64],) */;
  %143 = equal(%140, %141) /* ty=Tensor[(16, 15, 10), bool] */;
  %144 = %142.0;
  (%143, %144)
}

def @func_3239(%var_3203: Tensor[(2, 3, 15), float32], %var_3214: Tensor[(2, 3, 15), float32]) -> (Tensor[(2, 15, 6), float32], Tensor[(126, 1), uint8], Tensor[(2, 3, 15), float64], Tensor[(2, 3, 15), bool], Tensor[(2, 3, 15), float32], Tensor[(180), float64]) {
  %145 = cast(meta[relay.Constant][5] /* ty=Tensor[(126, 1), uint8] */, dtype="uint8") /* ty=Tensor[(126, 1), uint8] */;
  %146 = reshape(%145, newshape=[7, 3, 6]) /* ty=Tensor[(7, 3, 6), uint8] */;
  %147 = @func_2869(%146) /* ty=(Tensor[(7, 3, 6), bool], Tensor[(14, 4, 15), float64], Tensor[(2, 15, 6), float32], Tensor[(336), float64], Tensor[(336, 12), float32]) */;
  %148 = cast(%var_3203, dtype="float32") /* ty=Tensor[(2, 3, 15), float32] */;
  %149 = acosh(%148) /* ty=Tensor[(2, 3, 15), float32] */;
  %150 = cast(%var_3203, dtype="float64") /* ty=Tensor[(2, 3, 15), float64] */;
  %151 = shape_of(%149, dtype="int32") /* ty=Tensor[(3), int32] */;
  %152 = cast(%149, dtype="float64") /* ty=Tensor[(2, 3, 15), float64] */;
  %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %154 = cast(%var_3214, dtype="bool") /* ty=Tensor[(2, 3, 15), bool] */;
  %155 = shape_of(%149, dtype="int32") /* ty=Tensor[(3), int32] */;
  %156 = cast(%149, dtype="bool") /* ty=Tensor[(2, 3, 15), bool] */;
  %157 = dyn.reshape(%154, %155, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %158 = cast(%149, dtype="float32") /* ty=Tensor[(2, 3, 15), float32] */;
  %159 = @func_2499() /* ty=(Tensor[(180), float64], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */;
  %160 = %147.2;
  %161 = mod(%152, %153) /* ty=Tensor[(2, 3, 15), float64] */;
  %162 = logical_and(%156, %157) /* ty=Tensor[(2, 3, 15), bool] */;
  %163 = cosh(%158) /* ty=Tensor[(2, 3, 15), float32] */;
  %164 = %159.0;
  (%160, meta[relay.Constant][5] /* ty=Tensor[(126, 1), uint8] */, %161, %162, %163, %164)
}

def @func_2499() -> (Tensor[(180), float64], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) {
  %165 = @func_1157() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
  %166 = @func_1922() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */;
  %167 = @func_681() /* ty=(Tensor[(2, 15, 6), float32],) */;
  %168 = %165.2;
  %169 = %166.0;
  %170 = @func_2213() /* ty=Tensor[(2, 15, 6), float32] */;
  %171 = %167.0;
  (%168, %169, %170, %171)
}

def @func_2011() -> (Tensor[(180), float64],) {
  %172 = @func_937() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(336, 1), float64]) */;
  %173 = %172.1;
  (%173,)
}

def @func_7355() -> Tensor[(180), float64] {
  %174 = @func_1133() /* ty=(Tensor[(180), float64], Tensor[(2, 15, 6), float64]) */;
  %174.0
}

def @func_2869(%var_2844: Tensor[(7, 3, 6), uint8]) -> (Tensor[(7, 3, 6), bool], Tensor[(14, 4, 15), float64], Tensor[(2, 15, 6), float32], Tensor[(336), float64], Tensor[(336, 12), float32]) {
  %175 = cast(%var_2844, dtype="bool") /* ty=Tensor[(7, 3, 6), bool] */;
  %176 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(7, 3, 6), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %177 = cast(meta[relay.Constant][6] /* ty=Tensor[(7, 3, 6), uint8] */, dtype="bool") /* ty=Tensor[(7, 3, 6), bool] */;
  %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %179 = @func_1157() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
  %180 = cast(meta[relay.Constant][7] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %181 = cast(meta[relay.Constant][7] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %182 = reshape(%180, newshape=[3, 14, 8]) /* ty=Tensor[(3, 14, 8), float64] */;
  %183 = reshape(%181, newshape=[3, 14, 8]) /* ty=Tensor[(3, 14, 8), float64] */;
  %184 = @func_62(%182, %183) /* ty=(Tensor[(3, 14, 8), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(3, 14, 8), float64]) */;
  %185 = @func_2356() /* ty=(Tensor[(336, 12), float32],) */;
  %186 = greater(%177, %178) /* ty=Tensor[(7, 3, 6), bool] */;
  %187 = %179.0;
  %188 = %184.1;
  %189 = %185.0;
  (%186, %187, %188, meta[relay.Constant][7] /* ty=Tensor[(336), float64] */, %189)
}

def @func_5159() -> (Tensor[(2, 15, 6), float32],) {
  %190 = @func_1157() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
  %191 = %190.1;
  (%191,)
}

def @func_8006() -> (Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32], Tensor[(3, 14, 8), float64]) {
  %192 = @func_2834() /* ty=(Tensor[(2, 15, 6), float32],) */;
  %193 = @func_2821() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */;
  %194 = @func_1684() /* ty=Tensor[(2, 15, 6), float64] */;
  %195 = cast(%194, dtype="float32") /* ty=Tensor[(2, 15, 6), float32] */;
  %196 = reshape(%195, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), float32] */;
  %197 = @func_867(%196) /* ty=(Tensor[(2, 15, 6), float32], Tensor[(5, 4, 6), bool], Tensor[(3, 14, 8), float64], Tensor[(336), float64], Tensor[(3, 14, 8), float64]) */;
  %198 = @func_4184() /* ty=Tensor[(2, 15, 6), float64] */;
  %199 = @func_4184() /* ty=Tensor[(2, 15, 6), float64] */;
  %200 = %192.0;
  %201 = %193.0;
  %202 = %197.4;
  (%198, %199, %200, %194, %201, %202)
}

def @func_4892(%var_4885: Tensor[(336, 16), float64]) -> (Tensor[(2, 15, 6), float32], Tensor[(336, 16), int64]) {
  %203 = @func_2067() /* ty=Tensor[(336, 1), float64] */;
  %204 = cast(%203, dtype="int64") /* ty=Tensor[(336, 1), int64] */;
  %205 = cast(%var_4885, dtype="int64") /* ty=Tensor[(336, 16), int64] */;
  %206 = @func_1381() /* ty=Tensor[(2, 15, 6), float32] */;
  %207 = right_shift(%204, %205) /* ty=Tensor[(336, 16), int64] */;
  (%206, %207)
}

def @func_4527(%var_4489: Tensor[(16, 5, 1), float64], %var_4511: Tensor[(336, 12), float64]) -> (Tensor[(16, 5, 1), float64], Tensor[(2, 15, 6), float64], Tensor[(336, 12), uint64], Tensor[(16, 5, 9), uint8]) {
  %208 = cast(%var_4489, dtype="float64") /* ty=Tensor[(16, 5, 1), float64] */;
  %209 = @func_4479() /* ty=(Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float64]) */;
  %210 = @func_3768() /* ty=(Tensor[(336, 1), float64], Tensor[(180), float64]) */;
  %211 = %210.0;
  %212 = cast(%211, dtype="uint64") /* ty=Tensor[(336, 1), uint64] */;
  %213 = cast(%var_4511, dtype="uint64") /* ty=Tensor[(336, 12), uint64] */;
  %214 = cast(%var_4489, dtype="uint8") /* ty=Tensor[(16, 5, 1), uint8] */;
  %215 = cast(meta[relay.Constant][8] /* ty=Tensor[(16, 5, 9), float64] */, dtype="uint8") /* ty=Tensor[(16, 5, 9), uint8] */;
  %216 = erf(%208) /* ty=Tensor[(16, 5, 1), float64] */;
  %217 = %209.1;
  %218 = add(%212, %213) /* ty=Tensor[(336, 12), uint64] */;
  %219 = left_shift(%214, %215) /* ty=Tensor[(16, 5, 9), uint8] */;
  (%216, %217, %218, %219)
}

def @func_4544() -> Tensor[(2, 15, 6), float64] {
  @func_3420() /* ty=Tensor[(2, 15, 6), float64] */
}

def @func_3587() -> (Tensor[(2, 15, 6), bool],) {
  %220 = @func_2302() /* ty=Tensor[(2, 15, 6), float32] */;
  %221 = cast(meta[relay.Constant][9] /* ty=Tensor[(2, 15, 6), float32] */, dtype="bool") /* ty=Tensor[(2, 15, 6), bool] */;
  %222 = shape_of(%220, dtype="int32") /* ty=Tensor[(3), int32] */;
  %223 = cast(%220, dtype="bool") /* ty=Tensor[(2, 15, 6), bool] */;
  %224 = dyn.reshape(%221, %222, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %225 = not_equal(%223, %224) /* ty=Tensor[(2, 15, 6), bool] */;
  (%225,)
}

def @func_62(%var_40: Tensor[(3, 14, 8), float64], %var_41: Tensor[(3, 14, 8), float64]) -> (Tensor[(3, 14, 8), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(3, 14, 8), float64]) {
  %226 = cast(%var_41, dtype="float64") /* ty=Tensor[(3, 14, 8), float64] */;
  %227 = shape_of(%var_40, dtype="int32") /* ty=Tensor[(3), int32] */;
  %228 = cast(%var_40, dtype="float64") /* ty=Tensor[(3, 14, 8), float64] */;
  %229 = dyn.reshape(%226, %227, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %230 = cast(meta[relay.Constant][10] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %231 = cast(meta[relay.Constant][10] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %232 = reshape(%230, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), float64] */;
  %233 = reshape(%231, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), float64] */;
  %234 = @func_19(%232, %233) /* ty=(Tensor[(2, 15, 6), float32],) */;
  %235 = cast(%var_40, dtype="float64") /* ty=Tensor[(3, 14, 8), float64] */;
  %236 = maximum(%228, %229) /* ty=Tensor[(3, 14, 8), float64] */;
  %237 = %234.0;
  %238 = sqrt(%235) /* ty=Tensor[(3, 14, 8), float64] */;
  (%236, %237, meta[relay.Constant][10] /* ty=Tensor[(180), float64] */, %238)
}

def @func_6242(%var_6204: Tensor[(5, 12, 8), float32], %var_6238: Tensor[(30, 6), float64]) -> (Tensor[(5, 12, 8), float32], Tensor[(360), float32], Tensor[(5, 12, 8), uint8], Tensor[(8, 15, 3), float64], Tensor[(180), bool], Tensor[(30, 6), float64]) {
  %239 = cast(%var_6204, dtype="float32") /* ty=Tensor[(5, 12, 8), float32] */;
  %240 = cast(%var_6204, dtype="float32") /* ty=Tensor[(5, 12, 8), float32] */;
  %241 = atan(%240) /* ty=Tensor[(5, 12, 8), float32] */;
  %242 = cast(%241, dtype="uint8") /* ty=Tensor[(5, 12, 8), uint8] */;
  %243 = cast(3.26398f /* ty=float32 */, dtype="uint8") /* ty=uint8 */;
  %244 = cast(3.26398f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %245 = cast(meta[relay.Constant][11] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
  %246 = reshape(%244, newshape=[]) /* ty=float32 */;
  %247 = reshape(%245, newshape=[8, 15, 3]) /* ty=Tensor[(8, 15, 3), float32] */;
  %248 = @func_4607(%246, %247) /* ty=(Tensor[(8, 15, 3), float32], Tensor[(8, 15, 3), float64]) */;
  %249 = %248.0;
  %250 = cast(%249, dtype="float64") /* ty=Tensor[(8, 15, 3), float64] */;
  %251 = cast(%var_6238, dtype="float64") /* ty=Tensor[(30, 6), float64] */;
  %252 = reshape(%251, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %253 = @func_5605(%252) /* ty=(Tensor[(180), bool],) */;
  %254 = sigmoid(%239) /* ty=Tensor[(5, 12, 8), float32] */;
  %255 = right_shift(%242, %243) /* ty=Tensor[(5, 12, 8), uint8] */;
  %256 = sigmoid(%250) /* ty=Tensor[(8, 15, 3), float64] */;
  %257 = %253.0;
  (%254, meta[relay.Constant][11] /* ty=Tensor[(360), float32] */, %255, %256, %257, %var_6238)
}

def @func_8403() -> Tensor[(180), float64] {
  %258 = @func_6177() /* ty=(Tensor[(180), float64],) */;
  %258.0
}

def @func_2429() -> (Tensor[(2, 15, 6), float64], Tensor[(3, 14, 8), float64], Tensor[(3, 14, 8), float32]) {
  %259 = @func_2374() /* ty=(Tensor[(2, 15, 6), float32],) */;
  %260 = %259.0;
  %261 = @func_1157() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
  %262 = %261.1;
  %263 = cast(%262, dtype="float64") /* ty=Tensor[(2, 15, 6), float64] */;
  %264 = shape_of(%260, dtype="int32") /* ty=Tensor[(3), int32] */;
  %265 = cast(%260, dtype="float64") /* ty=Tensor[(2, 15, 6), float64] */;
  %266 = dyn.reshape(%263, %264, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %267 = cast(%260, dtype="float32") /* ty=Tensor[(2, 15, 6), float32] */;
  %268 = reshape(%267, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), float32] */;
  %269 = @func_867(%268) /* ty=(Tensor[(2, 15, 6), float32], Tensor[(5, 4, 6), bool], Tensor[(3, 14, 8), float64], Tensor[(336), float64], Tensor[(3, 14, 8), float64]) */;
  %270 = %269.4;
  %271 = cast(%270, dtype="float64") /* ty=Tensor[(3, 14, 8), float64] */;
  %272 = cast(%270, dtype="float64") /* ty=Tensor[(3, 14, 8), float64] */;
  %273 = reshape(%271, newshape=[3, 14, 8]) /* ty=Tensor[(3, 14, 8), float64] */;
  %274 = reshape(%272, newshape=[3, 14, 8]) /* ty=Tensor[(3, 14, 8), float64] */;
  %275 = @func_62(%273, %274) /* ty=(Tensor[(3, 14, 8), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(3, 14, 8), float64]) */;
  %276 = cast(%270, dtype="float32") /* ty=Tensor[(3, 14, 8), float32] */;
  %277 = divide(%265, %266) /* ty=Tensor[(2, 15, 6), float64] */;
  %278 = %275.0;
  %279 = cosh(%276) /* ty=Tensor[(3, 14, 8), float32] */;
  (%277, %278, %279)
}

def @func_6421() -> (Tensor[(5, 4, 6), bool], Tensor[(8, 5, 11), float64]) {
  %280 = @func_3926() /* ty=(Tensor[(5, 4, 6), bool],) */;
  %281 = cast(meta[relay.Constant][12] /* ty=Tensor[(8, 5, 11), float32] */, dtype="float32") /* ty=Tensor[(8, 5, 11), float32] */;
  %282 = asin(%281) /* ty=Tensor[(8, 5, 11), float32] */;
  %283 = cast(%282, dtype="float64") /* ty=Tensor[(8, 5, 11), float64] */;
  %284 = %280.0;
  %285 = cosh(%283) /* ty=Tensor[(8, 5, 11), float64] */;
  (%284, %285)
}

def @func_4283(%var_4275: Tensor[(10, 12, 15), uint32]) -> (Tensor[(10, 12, 15), uint32], Tensor[(2, 15, 6), float32]) {
  %286 = cast(%var_4275, dtype="uint32") /* ty=Tensor[(10, 12, 15), uint32] */;
  %287 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(10, 12, 15), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %288 = cast(meta[relay.Constant][13] /* ty=Tensor[(10, 12, 15), uint32] */, dtype="uint32") /* ty=Tensor[(10, 12, 15), uint32] */;
  %289 = dyn.reshape(%286, %287, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %290 = @func_3398() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */;
  %291 = subtract(%288, %289) /* ty=Tensor[(10, 12, 15), uint32] */;
  %292 = %290.1;
  (%291, %292)
}

def @func_159(%var_143: Tensor[(1, 12, 13), float64]) -> (Tensor[(1, 12, 13), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) {
  %293 = cast(%var_143, dtype="float64") /* ty=Tensor[(1, 12, 13), float64] */;
  %294 = cast(meta[relay.Constant][14] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %295 = cast(meta[relay.Constant][14] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %296 = reshape(%294, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), float64] */;
  %297 = reshape(%295, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), float64] */;
  %298 = @func_19(%296, %297) /* ty=(Tensor[(2, 15, 6), float32],) */;
  %299 = log10(%293) /* ty=Tensor[(1, 12, 13), float64] */;
  %300 = %298.0;
  (%299, %300, meta[relay.Constant][14] /* ty=Tensor[(180), float64] */)
}

def @func_1312() -> Tensor[(2, 15, 6), float32] {
  %301 = @func_937() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(336, 1), float64]) */;
  %301.0
}

def @func_4819(%var_4811: Tensor[(360), float32]) -> (Tensor[(180), float64], Tensor[(14, 4, 15), float64], Tensor[(8, 15, 3), float32], float32, Tensor[(360), float32]) {
  %302 = @func_3715() /* ty=(Tensor[(180), float64],) */;
  %303 = @func_1763() /* ty=(Tensor[(180), float64], Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(336), float64], Tensor[(14, 4, 15), float64]) */;
  %304 = cast(0.81885f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %305 = cast(%var_4811, dtype="float32") /* ty=Tensor[(360), float32] */;
  %306 = reshape(%304, newshape=[]) /* ty=float32 */;
  %307 = reshape(%305, newshape=[8, 15, 3]) /* ty=Tensor[(8, 15, 3), float32] */;
  %308 = @func_4607(%306, %307) /* ty=(Tensor[(8, 15, 3), float32], Tensor[(8, 15, 3), float64]) */;
  %309 = %302.0;
  %310 = %303.4;
  %311 = %308.0;
  (%309, %310, %311, 0.81885f /* ty=float32 */, %var_4811)
}

def @func_5724() -> (Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32]) {
  %312 = @func_1133() /* ty=(Tensor[(180), float64], Tensor[(2, 15, 6), float64]) */;
  %313 = @func_3398() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */;
  %314 = %312.1;
  %315 = %313.0;
  (%314, %315)
}

def @func_7181() -> (Tensor[(180), float64], Tensor[(336), float64]) {
  %316 = @func_2194() /* ty=Tensor[(180), float64] */;
  %317 = cast(%316, dtype="float32") /* ty=Tensor[(180), float32] */;
  %318 = reshape(%317, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), float32] */;
  %319 = @func_867(%318) /* ty=(Tensor[(2, 15, 6), float32], Tensor[(5, 4, 6), bool], Tensor[(3, 14, 8), float64], Tensor[(336), float64], Tensor[(3, 14, 8), float64]) */;
  %320 = %319.3;
  (%316, %320)
}

def @func_574() -> (Tensor[(180), float64], Tensor[(180), float64]) {
  %321 = @func_478() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(3, 14, 8), float64], Tensor[(336), float64], Tensor[(180), float64], Tensor[(5, 4, 6), bool], Tensor[(180), float64]) */;
  %322 = @func_389() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
  %323 = %321.2;
  %324 = %322.2;
  (%323, %324)
}

def @func_4184() -> Tensor[(2, 15, 6), float64] {
  %325 = @func_1568() /* ty=(Tensor[(180), float64], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32]) */;
  %325.1
}

def @func_3129() -> (Tensor[(2, 15, 6), float32], Tensor[(180), float64]) {
  %326 = @func_2499() /* ty=(Tensor[(180), float64], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */;
  %327 = @func_937() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(336, 1), float64]) */;
  %328 = %326.1;
  %329 = %327.1;
  (%328, %329)
}

def @func_5098() -> (Tensor[(2, 15, 6), float32],) {
  %330 = @func_2374() /* ty=(Tensor[(2, 15, 6), float32],) */;
  %331 = %330.0;
  (%331,)
}

def @func_7225() -> Tensor[(2, 15, 6), float32] {
  %332 = @func_3398() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */;
  %332.1
}

def @func_7113(%var_7088: int64, %var_7089: Tensor[(16, 1, 16), int64]) -> (Tensor[(16, 1, 16), int64], Tensor[(3, 14, 8), float64], Tensor[(1, 336), float64]) {
  %333 = cast(%var_7088, dtype="int64") /* ty=int64 */;
  %334 = cast(%var_7089, dtype="int64") /* ty=Tensor[(16, 1, 16), int64] */;
  %335 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 336), float64] */, dtype="float64") /* ty=Tensor[(1, 336), float64] */;
  %336 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 336), float64] */, dtype="float64") /* ty=Tensor[(1, 336), float64] */;
  %337 = reshape(%335, newshape=[3, 14, 8]) /* ty=Tensor[(3, 14, 8), float64] */;
  %338 = reshape(%336, newshape=[3, 14, 8]) /* ty=Tensor[(3, 14, 8), float64] */;
  %339 = @func_62(%337, %338) /* ty=(Tensor[(3, 14, 8), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(3, 14, 8), float64]) */;
  %340 = maximum(%333, %334) /* ty=Tensor[(16, 1, 16), int64] */;
  %341 = %339.0;
  (%340, %341, meta[relay.Constant][15] /* ty=Tensor[(1, 336), float64] */)
}

def @func_1671() -> (Tensor[(2, 15, 6), float32], Tensor[(180), float32], Tensor[(120), bool], Tensor[(180), float64], Tensor[(156), float64]) {
  %342 = cast(meta[relay.Constant][16] /* ty=Tensor[(120), bool] */, dtype="bool") /* ty=Tensor[(120), bool] */;
  %343 = reshape(%342, newshape=[5, 4, 6]) /* ty=Tensor[(5, 4, 6), bool] */;
  %344 = @func_1006(%343) /* ty=(Tensor[(5, 4, 6), int8], Tensor[(336), float64], Tensor[(180), float32]) */;
  %345 = cast(meta[relay.Constant][17] /* ty=Tensor[(156), float64] */, dtype="float64") /* ty=Tensor[(156), float64] */;
  %346 = reshape(%345, newshape=[1, 12, 13]) /* ty=Tensor[(1, 12, 13), float64] */;
  %347 = @func_159(%346) /* ty=(Tensor[(1, 12, 13), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
  %348 = @func_1312() /* ty=Tensor[(2, 15, 6), float32] */;
  %349 = %344.2;
  %350 = %347.2;
  (%348, %349, meta[relay.Constant][16] /* ty=Tensor[(120), bool] */, %350, meta[relay.Constant][17] /* ty=Tensor[(156), float64] */)
}

def @func_7470(%var_7428: Tensor[(1800), uint32], %var_7433: Tensor[(1800), uint32]) -> (Tensor[(2, 15, 6), float64], Tensor[(156), float64], Tensor[(2, 15, 6), float32], Tensor[(1, 12, 13), float64], Tensor[(2, 15, 6), float32], Tensor[(1800), float64]) {
  %351 = @func_3290() /* ty=(Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float64], Tensor[(180), float64]) */;
  %352 = @func_6483() /* ty=(Tensor[(156), float64], Tensor[(336, 12), float32]) */;
  %353 = cast(%var_7428, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %354 = reshape(%353, newshape=[10, 12, 15]) /* ty=Tensor[(10, 12, 15), uint32] */;
  %355 = @func_4283(%354) /* ty=(Tensor[(10, 12, 15), uint32], Tensor[(2, 15, 6), float32]) */;
  %356 = %352.0;
  %357 = cast(%356, dtype="float64") /* ty=Tensor[(156), float64] */;
  %358 = reshape(%357, newshape=[1, 12, 13]) /* ty=Tensor[(1, 12, 13), float64] */;
  %359 = @func_159(%358) /* ty=(Tensor[(1, 12, 13), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
  %360 = cast(%var_7433, dtype="bool") /* ty=Tensor[(1800), bool] */;
  %361 = shape_of(%var_7428, dtype="int32") /* ty=Tensor[(1), int32] */;
  %362 = cast(%var_7428, dtype="bool") /* ty=Tensor[(1800), bool] */;
  %363 = dyn.reshape(%360, %361, newshape=[]) /* ty=Tensor[(?), bool] */;
  %364 = less(%362, %363) /* ty=Tensor[(1800), bool] */;
  %365 = cast(%364, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %366 = %351.1;
  %367 = %355.1;
  %368 = %359.0;
  %369 = @func_2302() /* ty=Tensor[(2, 15, 6), float32] */;
  %370 = sigmoid(%365) /* ty=Tensor[(1800), float64] */;
  (%366, %356, %367, %368, %369, %370)
}

def @func_7915() -> (Tensor[(2, 15, 6), float64], Tensor[(5, 4, 6), int8], Tensor[(1, 640), int32], Tensor[(15, 1, 5), float32], Tensor[(10, 12, 15), uint32], Tensor[(1800), uint32], Tensor[(2, 15, 6), float32]) {
  %371 = @func_2429() /* ty=(Tensor[(2, 15, 6), float64], Tensor[(3, 14, 8), float64], Tensor[(3, 14, 8), float32]) */;
  %372 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 640), int32] */, dtype="int32") /* ty=Tensor[(1, 640), int32] */;
  %373 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 640), int32] */, dtype="int32") /* ty=Tensor[(1, 640), int32] */;
  %374 = reshape(%372, newshape=[8, 10, 8]) /* ty=Tensor[(8, 10, 8), int32] */;
  %375 = reshape(%373, newshape=[8, 10, 8]) /* ty=Tensor[(8, 10, 8), int32] */;
  %376 = @func_1080(%374, %375) /* ty=(Tensor[(8, 10, 8), int32], Tensor[(180), float64], Tensor[(5, 4, 6), int8], Tensor[(120), bool], Tensor[(180), float64], Tensor[(8, 10, 8), bool], Tensor[(2, 15, 6), float32]) */;
  %377 = @func_2048() /* ty=(Tensor[(15, 1, 5), float32], Tensor[(2, 15, 6), float32]) */;
  %378 = cast(meta[relay.Constant][19] /* ty=Tensor[(1800), uint32] */, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %379 = reshape(%378, newshape=[10, 12, 15]) /* ty=Tensor[(10, 12, 15), uint32] */;
  %380 = @func_4283(%379) /* ty=(Tensor[(10, 12, 15), uint32], Tensor[(2, 15, 6), float32]) */;
  %381 = @func_2374() /* ty=(Tensor[(2, 15, 6), float32],) */;
  %382 = %371.0;
  %383 = %376.2;
  %384 = %377.0;
  %385 = %380.0;
  %386 = %381.0;
  (%382, %383, meta[relay.Constant][18] /* ty=Tensor[(1, 640), int32] */, %384, %385, meta[relay.Constant][19] /* ty=Tensor[(1800), uint32] */, %386)
}

def @func_7787() -> (Tensor[(180), uint32], Tensor[(336, 1), float32]) {
  %387 = @func_1992() /* ty=Tensor[(180), float64] */;
  %388 = cast(%387, dtype="float64") /* ty=Tensor[(180), float64] */;
  %389 = asinh(%388) /* ty=Tensor[(180), float64] */;
  %390 = cast(%387, dtype="uint32") /* ty=Tensor[(180), uint32] */;
  %391 = shape_of(%389, dtype="int32") /* ty=Tensor[(1), int32] */;
  %392 = cast(%389, dtype="uint32") /* ty=Tensor[(180), uint32] */;
  %393 = dyn.reshape(%390, %391, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %394 = @func_3311() /* ty=(Tensor[(336, 1), float32],) */;
  %395 = add(%392, %393) /* ty=Tensor[(180), uint32] */;
  %396 = %394.0;
  (%395, %396)
}

def @func_8284() -> (Tensor[(2, 15, 6), float32],) {
  %397 = @func_1568() /* ty=(Tensor[(180), float64], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32]) */;
  %398 = %397.2;
  (%398,)
}

def @main(%var_8603: Tensor[(336, 15), float32]) -> (Tensor[(2, 15, 6), float32], Tensor[(336, 15), int64]) {
  %399 = @func_8006() /* ty=(Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32], Tensor[(3, 14, 8), float64]) */;
  %400 = @func_7787() /* ty=(Tensor[(180), uint32], Tensor[(336, 1), float32]) */;
  %401 = %400.1;
  %402 = cast(%401, dtype="uint32") /* ty=Tensor[(336, 1), uint32] */;
  %403 = cast(%var_8603, dtype="uint32") /* ty=Tensor[(336, 15), uint32] */;
  %404 = left_shift(%402, %403) /* ty=Tensor[(336, 15), uint32] */;
  %405 = cast(%var_8603, dtype="int64") /* ty=Tensor[(336, 15), int64] */;
  %406 = shape_of(%404, dtype="int32") /* ty=Tensor[(2), int32] */;
  %407 = cast(%404, dtype="int64") /* ty=Tensor[(336, 15), int64] */;
  %408 = dyn.reshape(%405, %406, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %409 = %399.4;
  %410 = bitwise_xor(%407, %408) /* ty=Tensor[(336, 15), int64] */;
  (%409, %410)
}

def @func_4607(%var_4591: float32, %var_4592: Tensor[(8, 15, 3), float32]) -> (Tensor[(8, 15, 3), float32], Tensor[(8, 15, 3), float64]) {
  %411 = cast(%var_4591, dtype="float32") /* ty=float32 */;
  %412 = cast(%var_4592, dtype="float32") /* ty=Tensor[(8, 15, 3), float32] */;
  %413 = cast(%var_4592, dtype="float64") /* ty=Tensor[(8, 15, 3), float64] */;
  %414 = acos(%413) /* ty=Tensor[(8, 15, 3), float64] */;
  %415 = cast(%414, dtype="float64") /* ty=Tensor[(8, 15, 3), float64] */;
  %416 = minimum(%411, %412) /* ty=Tensor[(8, 15, 3), float32] */;
  %417 = sqrt(%415) /* ty=Tensor[(8, 15, 3), float64] */;
  (%416, %417)
}

def @func_7879() -> (Tensor[(180), float64], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32]) {
  %418 = @func_3715() /* ty=(Tensor[(180), float64],) */;
  %419 = @func_5898() /* ty=(Tensor[(2, 15, 6), float32],) */;
  %420 = @func_4011() /* ty=(Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */;
  %421 = %418.0;
  %422 = %419.0;
  %423 = @func_6903() /* ty=Tensor[(2, 15, 6), float64] */;
  %424 = %420.1;
  (%421, %422, %423, %424)
}

def @func_7685(%var_7676: Tensor[(1, 1, 7), float64], %var_7677: Tensor[(9, 3, 7), float64]) -> (Tensor[(9, 3, 7), float64], Tensor[(9, 3, 7), float32]) {
  %425 = cast(%var_7676, dtype="float64") /* ty=Tensor[(1, 1, 7), float64] */;
  %426 = cast(%var_7677, dtype="float64") /* ty=Tensor[(9, 3, 7), float64] */;
  %427 = cast(%var_7677, dtype="float32") /* ty=Tensor[(9, 3, 7), float32] */;
  %428 = cast(%var_7676, dtype="float32") /* ty=Tensor[(1, 1, 7), float32] */;
  %429 = power(%425, %426) /* ty=Tensor[(9, 3, 7), float64] */;
  %430 = minimum(%427, %428) /* ty=Tensor[(9, 3, 7), float32] */;
  (%429, %430)
}

def @func_5401(%var_5377: Tensor[(120), bool]) -> (Tensor[(180), float64], Tensor[(180), float32], Tensor[(120), bool], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float64]) {
  %431 = cast(%var_5377, dtype="bool") /* ty=Tensor[(120), bool] */;
  %432 = reshape(%431, newshape=[5, 4, 6]) /* ty=Tensor[(5, 4, 6), bool] */;
  %433 = @func_1006(%432) /* ty=(Tensor[(5, 4, 6), int8], Tensor[(336), float64], Tensor[(180), float32]) */;
  %434 = @func_4440() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(126), uint8], Tensor[(336), float64], Tensor[(2, 15, 6), float32]) */;
  %435 = %434.4;
  %436 = cast(meta[relay.Constant][20] /* ty=Tensor[(2, 15, 6), float32] */, dtype="float64") /* ty=Tensor[(2, 15, 6), float64] */;
  %437 = shape_of(%435, dtype="int32") /* ty=Tensor[(3), int32] */;
  %438 = cast(%435, dtype="float64") /* ty=Tensor[(2, 15, 6), float64] */;
  %439 = dyn.reshape(%436, %437, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %440 = @func_1992() /* ty=Tensor[(180), float64] */;
  %441 = %433.2;
  %442 = @func_3100() /* ty=Tensor[(2, 15, 6), float64] */;
  %443 = multiply(%438, %439) /* ty=Tensor[(2, 15, 6), float64] */;
  (%440, %441, %var_5377, %442, %443)
}

def @func_3913() -> Tensor[(336, 1), float64] {
  @func_2067() /* ty=Tensor[(336, 1), float64] */
}

def @func_867(%var_830: Tensor[(2, 15, 6), float32]) -> (Tensor[(2, 15, 6), float32], Tensor[(5, 4, 6), bool], Tensor[(3, 14, 8), float64], Tensor[(336), float64], Tensor[(3, 14, 8), float64]) {
  %444 = @func_681() /* ty=(Tensor[(2, 15, 6), float32],) */;
  %445 = %444.0;
  %446 = cast(%var_830, dtype="float32") /* ty=Tensor[(2, 15, 6), float32] */;
  %447 = shape_of(%445, dtype="int32") /* ty=Tensor[(3), int32] */;
  %448 = cast(%445, dtype="float32") /* ty=Tensor[(2, 15, 6), float32] */;
  %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %450 = @func_389() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
  %451 = %450.0;
  %452 = cast(meta[relay.Constant][21] /* ty=Tensor[(5, 4, 6), bool] */, dtype="bool") /* ty=Tensor[(5, 4, 6), bool] */;
  %453 = shape_of(%451, dtype="int32") /* ty=Tensor[(3), int32] */;
  %454 = cast(%451, dtype="bool") /* ty=Tensor[(5, 4, 6), bool] */;
  %455 = dyn.reshape(%452, %453, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %456 = cast(meta[relay.Constant][22] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %457 = cast(meta[relay.Constant][22] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %458 = reshape(%456, newshape=[3, 14, 8]) /* ty=Tensor[(3, 14, 8), float64] */;
  %459 = reshape(%457, newshape=[3, 14, 8]) /* ty=Tensor[(3, 14, 8), float64] */;
  %460 = @func_62(%458, %459) /* ty=(Tensor[(3, 14, 8), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(3, 14, 8), float64]) */;
  %461 = %460.0;
  %462 = cast(%461, dtype="float64") /* ty=Tensor[(3, 14, 8), float64] */;
  %463 = cast(%461, dtype="float64") /* ty=Tensor[(3, 14, 8), float64] */;
  %464 = reshape(%462, newshape=[3, 14, 8]) /* ty=Tensor[(3, 14, 8), float64] */;
  %465 = reshape(%463, newshape=[3, 14, 8]) /* ty=Tensor[(3, 14, 8), float64] */;
  %466 = @func_62(%464, %465) /* ty=(Tensor[(3, 14, 8), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(3, 14, 8), float64]) */;
  %467 = minimum(%448, %449) /* ty=Tensor[(2, 15, 6), float32] */;
  %468 = greater(%454, %455) /* ty=Tensor[(5, 4, 6), bool] */;
  %469 = %466.0;
  (%467, %468, %461, meta[relay.Constant][22] /* ty=Tensor[(336), float64] */, %469)
}

def @func_6627(%var_6612: int32, %var_6613: Tensor[(7, 1, 5), int32]) -> (Tensor[(7, 1, 5), int32], Tensor[(336, 12), float32]) {
  %470 = cast(%var_6612, dtype="int32") /* ty=int32 */;
  %471 = cast(%var_6613, dtype="int32") /* ty=Tensor[(7, 1, 5), int32] */;
  %472 = @func_2356() /* ty=(Tensor[(336, 12), float32],) */;
  %473 = bitwise_xor(%470, %471) /* ty=Tensor[(7, 1, 5), int32] */;
  %474 = %472.0;
  (%473, %474)
}

def @func_4355() -> (Tensor[(180), float64],) {
  %475 = @func_3715() /* ty=(Tensor[(180), float64],) */;
  %476 = %475.0;
  (%476,)
}

def @func_1157() -> (Tensor[(14, 4, 15), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) {
  %477 = cast(meta[relay.Constant][23] /* ty=Tensor[(14, 4, 15), float64] */, dtype="float64") /* ty=Tensor[(14, 4, 15), float64] */;
  %478 = cast(meta[relay.Constant][24] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %479 = cast(meta[relay.Constant][24] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %480 = reshape(%478, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), float64] */;
  %481 = reshape(%479, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), float64] */;
  %482 = @func_19(%480, %481) /* ty=(Tensor[(2, 15, 6), float32],) */;
  %483 = log2(%477) /* ty=Tensor[(14, 4, 15), float64] */;
  %484 = %482.0;
  (%483, %484, meta[relay.Constant][24] /* ty=Tensor[(180), float64] */)
}

def @func_6903() -> Tensor[(2, 15, 6), float64] {
  %485 = @func_6757() /* ty=(Tensor[(2, 15, 6), float64], Tensor[(33, 5), float64]) */;
  %485.0
}

def @func_2727() -> (Tensor[(14, 4, 15), float64],) {
  %486 = @func_1157() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
  %487 = %486.0;
  (%487,)
}

def @func_3311() -> (Tensor[(336, 1), float32],) {
  %488 = @func_2067() /* ty=Tensor[(336, 1), float64] */;
  %489 = cast(%488, dtype="float32") /* ty=Tensor[(336, 1), float32] */;
  %490 = log10(%489) /* ty=Tensor[(336, 1), float32] */;
  (%490,)
}

def @func_1080(%var_1016: Tensor[(8, 10, 8), int32], %var_1068: Tensor[(8, 10, 8), int32]) -> (Tensor[(8, 10, 8), int32], Tensor[(180), float64], Tensor[(5, 4, 6), int8], Tensor[(120), bool], Tensor[(180), float64], Tensor[(8, 10, 8), bool], Tensor[(2, 15, 6), float32]) {
  %491 = cast(meta[relay.Constant][25] /* ty=Tensor[(8, 10, 8), int32] */, dtype="int32") /* ty=Tensor[(8, 10, 8), int32] */;
  %492 = shape_of(%var_1016, dtype="int32") /* ty=Tensor[(3), int32] */;
  %493 = cast(%var_1016, dtype="int32") /* ty=Tensor[(8, 10, 8), int32] */;
  %494 = dyn.reshape(%491, %492, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %495 = @func_389() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
  %496 = cast(meta[relay.Constant][26] /* ty=Tensor[(120), bool] */, dtype="bool") /* ty=Tensor[(120), bool] */;
  %497 = reshape(%496, newshape=[5, 4, 6]) /* ty=Tensor[(5, 4, 6), bool] */;
  %498 = @func_1006(%497) /* ty=(Tensor[(5, 4, 6), int8], Tensor[(336), float64], Tensor[(180), float32]) */;
  %499 = @func_937() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(336, 1), float64]) */;
  %500 = cast(%var_1068, dtype="bool") /* ty=Tensor[(8, 10, 8), bool] */;
  %501 = shape_of(%var_1016, dtype="int32") /* ty=Tensor[(3), int32] */;
  %502 = cast(%var_1016, dtype="bool") /* ty=Tensor[(8, 10, 8), bool] */;
  %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %504 = @func_478() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(3, 14, 8), float64], Tensor[(336), float64], Tensor[(180), float64], Tensor[(5, 4, 6), bool], Tensor[(180), float64]) */;
  %505 = right_shift(%493, %494) /* ty=Tensor[(8, 10, 8), int32] */;
  %506 = %495.2;
  %507 = %498.0;
  %508 = %499.1;
  %509 = less_equal(%502, %503) /* ty=Tensor[(8, 10, 8), bool] */;
  %510 = %504.1;
  (%505, %506, %507, meta[relay.Constant][26] /* ty=Tensor[(120), bool] */, %508, %509, %510)
}

def @func_2821() -> (Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) {
  %511 = @func_1484() /* ty=(Tensor[(180), float64], Tensor[(180), float64], Tensor[(2, 15, 6), float32]) */;
  %512 = %511.2;
  %513 = @func_2213() /* ty=Tensor[(2, 15, 6), float32] */;
  (%512, %513)
}

def @func_7380() -> Tensor[(2, 15, 6), float64] {
  @func_4184() /* ty=Tensor[(2, 15, 6), float64] */
}

def @func_7499() -> Tensor[(2, 15, 6), float32] {
  @func_7225() /* ty=Tensor[(2, 15, 6), float32] */
}

def @func_2067() -> Tensor[(336, 1), float64] {
  %514 = @func_1800() /* ty=(Tensor[(336, 1), float64],) */;
  %514.0
}

def @func_389() -> (Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) {
  %515 = cast(meta[relay.Constant][28] /* ty=Tensor[(5, 4, 6), bool] */, dtype="bool") /* ty=Tensor[(5, 4, 6), bool] */;
  %516 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(5, 4, 6), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %517 = cast(meta[relay.Constant][27] /* ty=Tensor[(5, 4, 6), bool] */, dtype="bool") /* ty=Tensor[(5, 4, 6), bool] */;
  %518 = dyn.reshape(%515, %516, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %519 = cast(meta[relay.Constant][29] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %520 = cast(meta[relay.Constant][29] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %521 = reshape(%519, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), float64] */;
  %522 = reshape(%520, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), float64] */;
  %523 = @func_19(%521, %522) /* ty=(Tensor[(2, 15, 6), float32],) */;
  %524 = logical_and(%517, %518) /* ty=Tensor[(5, 4, 6), bool] */;
  %525 = %523.0;
  (%524, %525, meta[relay.Constant][29] /* ty=Tensor[(180), float64] */)
}

def @func_6067(%var_6047: Tensor[(3, 16, 4), float64]) -> (Tensor[(3, 16, 4), float64], Tensor[(2, 15, 6), float32]) {
  %526 = cast(%var_6047, dtype="float64") /* ty=Tensor[(3, 16, 4), float64] */;
  %527 = @func_4967() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32]) */;
  %528 = tan(%526) /* ty=Tensor[(3, 16, 4), float64] */;
  %529 = %527.0;
  (%528, %529)
}

def @func_7672(%var_7656: Tensor[(10, 1, 9), float64]) -> (Tensor[(10, 1, 9), float64], Tensor[(2, 15, 6), float32]) {
  %530 = cast(%var_7656, dtype="float64") /* ty=Tensor[(10, 1, 9), float64] */;
  %531 = @func_5159() /* ty=(Tensor[(2, 15, 6), float32],) */;
  %532 = log2(%530) /* ty=Tensor[(10, 1, 9), float64] */;
  %533 = %531.0;
  (%532, %533)
}

def @func_8315(%var_8304: Tensor[(7, 3, 4), float32]) -> (Tensor[(7, 3, 4), float32],) {
  %534 = cast(%var_8304, dtype="float32") /* ty=Tensor[(7, 3, 4), float32] */;
  %535 = cos(%534) /* ty=Tensor[(7, 3, 4), float32] */;
  (%535,)
}

def @func_3768() -> (Tensor[(336, 1), float64], Tensor[(180), float64]) {
  %536 = @func_2067() /* ty=Tensor[(336, 1), float64] */;
  %537 = @func_1992() /* ty=Tensor[(180), float64] */;
  (%536, %537)
}

def @func_6169(%var_6164: Tensor[(80), float64]) -> (Tensor[(2, 15, 6), float32], Tensor[(336, 12), uint64], Tensor[(80), float64], Tensor[(48, 84), float64]) {
  %538 = @func_5658() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */;
  %539 = cast(%var_6164, dtype="float64") /* ty=Tensor[(80), float64] */;
  %540 = cast(meta[relay.Constant][30] /* ty=Tensor[(48, 84), float64] */, dtype="float64") /* ty=Tensor[(48, 84), float64] */;
  %541 = reshape(%539, newshape=[16, 5, 1]) /* ty=Tensor[(16, 5, 1), float64] */;
  %542 = reshape(%540, newshape=[336, 12]) /* ty=Tensor[(336, 12), float64] */;
  %543 = @func_4527(%541, %542) /* ty=(Tensor[(16, 5, 1), float64], Tensor[(2, 15, 6), float64], Tensor[(336, 12), uint64], Tensor[(16, 5, 9), uint8]) */;
  %544 = %538.0;
  %545 = %543.2;
  (%544, %545, %var_6164, meta[relay.Constant][30] /* ty=Tensor[(48, 84), float64] */)
}

def @func_6483() -> (Tensor[(156), float64], Tensor[(336, 12), float32]) {
  %546 = @func_1671() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(180), float32], Tensor[(120), bool], Tensor[(180), float64], Tensor[(156), float64]) */;
  %547 = @func_2356() /* ty=(Tensor[(336, 12), float32],) */;
  %548 = %546.4;
  %549 = %547.0;
  (%548, %549)
}

def @func_1381() -> Tensor[(2, 15, 6), float32] {
  @func_1312() /* ty=Tensor[(2, 15, 6), float32] */
}

def @func_6329(%var_6301: Tensor[(15, 16, 2), float32], %var_6302: Tensor[(15, 16, 2), float32]) -> (Tensor[(2, 15, 6), float32], Tensor[(15, 16, 2), int16], Tensor[(15, 16, 2), float64], Tensor[(2, 15, 6), float32]) {
  %550 = @func_1922() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */;
  %551 = cast(%var_6301, dtype="float32") /* ty=Tensor[(15, 16, 2), float32] */;
  %552 = cosh(%551) /* ty=Tensor[(15, 16, 2), float32] */;
  %553 = cast(%var_6302, dtype="float32") /* ty=Tensor[(15, 16, 2), float32] */;
  %554 = shape_of(%var_6301, dtype="int32") /* ty=Tensor[(3), int32] */;
  %555 = cast(%var_6301, dtype="float32") /* ty=Tensor[(15, 16, 2), float32] */;
  %556 = dyn.reshape(%553, %554, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %557 = mod(%555, %556) /* ty=Tensor[(15, 16, 2), float32] */;
  %558 = cast(%557, dtype="int16") /* ty=Tensor[(15, 16, 2), int16] */;
  %559 = shape_of(%552, dtype="int32") /* ty=Tensor[(3), int32] */;
  %560 = cast(%552, dtype="int16") /* ty=Tensor[(15, 16, 2), int16] */;
  %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %562 = cast(%552, dtype="float32") /* ty=Tensor[(15, 16, 2), float32] */;
  %563 = sqrt(%562) /* ty=Tensor[(15, 16, 2), float32] */;
  %564 = cast(%563, dtype="float64") /* ty=Tensor[(15, 16, 2), float64] */;
  %565 = @func_2499() /* ty=(Tensor[(180), float64], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */;
  %566 = %550.1;
  %567 = minimum(%560, %561) /* ty=Tensor[(15, 16, 2), int16] */;
  %568 = atan(%564) /* ty=Tensor[(15, 16, 2), float64] */;
  %569 = %565.3;
  (%566, %567, %568, %569)
}

def @func_7147(%var_7119: Tensor[(3, 1, 2), uint16], %var_7120: Tensor[(3, 5, 2), uint16], %var_7132: Tensor[(80), float64]) -> (Tensor[(180), float64], Tensor[(2, 15, 6), float32], Tensor[(80), float64], Tensor[(3, 5, 2), uint16], Tensor[(14, 4, 15), float64]) {
  %570 = @func_1133() /* ty=(Tensor[(180), float64], Tensor[(2, 15, 6), float64]) */;
  %571 = cast(%var_7132, dtype="float64") /* ty=Tensor[(80), float64] */;
  %572 = reshape(%571, newshape=[80]) /* ty=Tensor[(80), float64] */;
  %573 = @func_6169(%572) /* ty=(Tensor[(2, 15, 6), float32], Tensor[(336, 12), uint64], Tensor[(80), float64], Tensor[(48, 84), float64]) */;
  %574 = cast(%var_7119, dtype="uint16") /* ty=Tensor[(3, 1, 2), uint16] */;
  %575 = cast(%var_7120, dtype="uint16") /* ty=Tensor[(3, 5, 2), uint16] */;
  %576 = right_shift(%574, %575) /* ty=Tensor[(3, 5, 2), uint16] */;
  %577 = cast(%var_7120, dtype="uint16") /* ty=Tensor[(3, 5, 2), uint16] */;
  %578 = shape_of(%576, dtype="int32") /* ty=Tensor[(3), int32] */;
  %579 = cast(%576, dtype="uint16") /* ty=Tensor[(3, 5, 2), uint16] */;
  %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %581 = @func_2727() /* ty=(Tensor[(14, 4, 15), float64],) */;
  %582 = %570.0;
  %583 = %573.0;
  %584 = left_shift(%579, %580) /* ty=Tensor[(3, 5, 2), uint16] */;
  %585 = %581.0;
  (%582, %583, %var_7132, %584, %585)
}

def @func_681() -> (Tensor[(2, 15, 6), float32],) {
  %586 = @func_389() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
  %587 = %586.1;
  (%587,)
}

def @func_2374() -> (Tensor[(2, 15, 6), float32],) {
  %588 = @func_1484() /* ty=(Tensor[(180), float64], Tensor[(180), float64], Tensor[(2, 15, 6), float32]) */;
  %589 = %588.2;
  (%589,)
}

def @func_5898() -> (Tensor[(2, 15, 6), float32],) {
  %590 = @func_5098() /* ty=(Tensor[(2, 15, 6), float32],) */;
  %591 = %590.0;
  (%591,)
}

def @func_1922() -> (Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) {
  %592 = @func_1568() /* ty=(Tensor[(180), float64], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32]) */;
  %593 = @func_1247() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32]) */;
  %594 = @func_1568() /* ty=(Tensor[(180), float64], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32]) */;
  %595 = %592.2;
  %596 = %593.4;
  %597 = %594.2;
  (%595, %596, %597)
}

def @func_8553(%var_8470: Tensor[(10, 14, 15), int64], %var_8471: Tensor[(10, 14, 15), int64]) -> (Tensor[(2, 15, 6), float32], Tensor[(10, 14, 15), int64]) {
  %598 = @func_7879() /* ty=(Tensor[(180), float64], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32]) */;
  %599 = cast(%var_8471, dtype="int64") /* ty=Tensor[(10, 14, 15), int64] */;
  %600 = shape_of(%var_8470, dtype="int32") /* ty=Tensor[(3), int32] */;
  %601 = cast(%var_8470, dtype="int64") /* ty=Tensor[(10, 14, 15), int64] */;
  %602 = dyn.reshape(%599, %600, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %603 = right_shift(%601, %602) /* ty=Tensor[(10, 14, 15), int64] */;
  %604 = cast(%var_8470, dtype="uint16") /* ty=Tensor[(10, 14, 15), uint16] */;
  %605 = shape_of(%603, dtype="int32") /* ty=Tensor[(3), int32] */;
  %606 = cast(%603, dtype="uint16") /* ty=Tensor[(10, 14, 15), uint16] */;
  %607 = dyn.reshape(%604, %605, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %608 = multiply(%606, %607) /* ty=Tensor[(10, 14, 15), uint16] */;
  %609 = cast(%608, dtype="float64") /* ty=Tensor[(10, 14, 15), float64] */;
  %610 = sqrt(%609) /* ty=Tensor[(10, 14, 15), float64] */;
  %611 = cast(%610, dtype="float32") /* ty=Tensor[(10, 14, 15), float32] */;
  %612 = log2(%611) /* ty=Tensor[(10, 14, 15), float32] */;
  %613 = cast(%608, dtype="int64") /* ty=Tensor[(10, 14, 15), int64] */;
  %614 = shape_of(%612, dtype="int32") /* ty=Tensor[(3), int32] */;
  %615 = cast(%612, dtype="int64") /* ty=Tensor[(10, 14, 15), int64] */;
  %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %617 = %598.3;
  %618 = logical_xor(%615, %616) /* ty=Tensor[(10, 14, 15), int64] */;
  (%617, %618)
}

def @func_478() -> (Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(3, 14, 8), float64], Tensor[(336), float64], Tensor[(180), float64], Tensor[(5, 4, 6), bool], Tensor[(180), float64]) {
  %619 = @func_389() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
  %620 = cast(meta[relay.Constant][31] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %621 = cast(meta[relay.Constant][31] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %622 = reshape(%620, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), float64] */;
  %623 = reshape(%621, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), float64] */;
  %624 = @func_19(%622, %623) /* ty=(Tensor[(2, 15, 6), float32],) */;
  %625 = cast(meta[relay.Constant][32] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %626 = cast(meta[relay.Constant][32] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %627 = reshape(%625, newshape=[3, 14, 8]) /* ty=Tensor[(3, 14, 8), float64] */;
  %628 = reshape(%626, newshape=[3, 14, 8]) /* ty=Tensor[(3, 14, 8), float64] */;
  %629 = @func_62(%627, %628) /* ty=(Tensor[(3, 14, 8), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(3, 14, 8), float64]) */;
  %630 = @func_389() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
  %631 = @func_389() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
  %632 = cast(meta[relay.Constant][32] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %633 = %629.3;
  %634 = cast(%633, dtype="float64") /* ty=Tensor[(3, 14, 8), float64] */;
  %635 = reshape(%632, newshape=[3, 14, 8]) /* ty=Tensor[(3, 14, 8), float64] */;
  %636 = reshape(%634, newshape=[3, 14, 8]) /* ty=Tensor[(3, 14, 8), float64] */;
  %637 = @func_62(%635, %636) /* ty=(Tensor[(3, 14, 8), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(3, 14, 8), float64]) */;
  %638 = %619.0;
  %639 = %624.0;
  %640 = %630.2;
  %641 = %631.0;
  %642 = %637.2;
  (%638, %639, meta[relay.Constant][31] /* ty=Tensor[(180), float64] */, %633, meta[relay.Constant][32] /* ty=Tensor[(336), float64] */, %640, %641, %642)
}

def @func_4110() -> (Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(180), float32], Tensor[(336), float64]) {
  %643 = @func_1568() /* ty=(Tensor[(180), float64], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32]) */;
  %644 = @func_3290() /* ty=(Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float64], Tensor[(180), float64]) */;
  %645 = @func_3715() /* ty=(Tensor[(180), float64],) */;
  %646 = %645.0;
  %647 = cast(%646, dtype="float32") /* ty=Tensor[(180), float32] */;
  %648 = @func_1322() /* ty=(Tensor[(336), float64],) */;
  %649 = %643.2;
  %650 = %644.0;
  %651 = rsqrt(%647) /* ty=Tensor[(180), float32] */;
  %652 = %648.0;
  (%649, %650, %651, %652)
}

def @func_4967() -> (Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32]) {
  %653 = @func_3398() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */;
  %654 = @func_3451() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */;
  %655 = %653.0;
  %656 = @func_2267() /* ty=Tensor[(2, 15, 6), float64] */;
  %657 = %654.1;
  (%655, %656, %657)
}

def @func_2302() -> Tensor[(2, 15, 6), float32] {
  %658 = @func_478() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(3, 14, 8), float64], Tensor[(336), float64], Tensor[(180), float64], Tensor[(5, 4, 6), bool], Tensor[(180), float64]) */;
  %658.1
}

def @func_652() -> (Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(180), float64], Tensor[(156), float64]) {
  %659 = @func_389() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
  %660 = @func_389() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
  %661 = @func_478() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(3, 14, 8), float64], Tensor[(336), float64], Tensor[(180), float64], Tensor[(5, 4, 6), bool], Tensor[(180), float64]) */;
  %662 = %661.1;
  %663 = cast(%662, dtype="float64") /* ty=Tensor[(2, 15, 6), float64] */;
  %664 = atan(%663) /* ty=Tensor[(2, 15, 6), float64] */;
  %665 = cast(%664, dtype="float64") /* ty=Tensor[(2, 15, 6), float64] */;
  %666 = cast(meta[relay.Constant][33] /* ty=Tensor[(156), float64] */, dtype="float64") /* ty=Tensor[(156), float64] */;
  %667 = reshape(%666, newshape=[1, 12, 13]) /* ty=Tensor[(1, 12, 13), float64] */;
  %668 = @func_159(%667) /* ty=(Tensor[(1, 12, 13), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
  %669 = %659.0;
  %670 = %660.1;
  %671 = acosh(%665) /* ty=Tensor[(2, 15, 6), float64] */;
  %672 = %668.2;
  (%669, %670, %671, %672, meta[relay.Constant][33] /* ty=Tensor[(156), float64] */)
}

def @func_4011() -> (Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) {
  %673 = @func_3129() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
  %674 = @func_3100() /* ty=Tensor[(2, 15, 6), float64] */;
  %675 = %673.0;
  %676 = @func_2213() /* ty=Tensor[(2, 15, 6), float32] */;
  (%674, %675, %676)
}

def @func_4639(%var_4631: int64, %var_4632: Tensor[(1, 13, 3), int64]) -> (Tensor[(1, 13, 3), int64],) {
  %677 = cast(%var_4631, dtype="int64") /* ty=int64 */;
  %678 = cast(%var_4632, dtype="int64") /* ty=Tensor[(1, 13, 3), int64] */;
  %679 = maximum(%677, %678) /* ty=Tensor[(1, 13, 3), int64] */;
  (%679,)
}

def @func_5956(%var_5938: Tensor[(1, 360), float32]) -> (Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32], Tensor[(126), uint8], Tensor[(2, 15, 6), float32], Tensor[(8, 15, 3), float64], float32, Tensor[(1, 360), float32], Tensor[(2, 15, 6), float64]) {
  %680 = @func_1922() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */;
  %681 = cast(meta[relay.Constant][34] /* ty=Tensor[(126), uint8] */, dtype="uint8") /* ty=Tensor[(126), uint8] */;
  %682 = reshape(%681, newshape=[1, 126]) /* ty=Tensor[(1, 126), uint8] */;
  %683 = @func_5310(%682) /* ty=(Tensor[(2, 15, 6), float32], Tensor[(336, 12), float32], Tensor[(1, 126), uint8]) */;
  %684 = @func_2952() /* ty=(Tensor[(2, 15, 6), float32],) */;
  %685 = cast(-7.73119f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %686 = cast(%var_5938, dtype="float32") /* ty=Tensor[(1, 360), float32] */;
  %687 = reshape(%685, newshape=[]) /* ty=float32 */;
  %688 = reshape(%686, newshape=[8, 15, 3]) /* ty=Tensor[(8, 15, 3), float32] */;
  %689 = @func_4607(%687, %688) /* ty=(Tensor[(8, 15, 3), float32], Tensor[(8, 15, 3), float64]) */;
  %690 = %680.0;
  %691 = %683.0;
  %692 = %684.0;
  %693 = %689.1;
  %694 = @func_1684() /* ty=Tensor[(2, 15, 6), float64] */;
  (%690, %691, meta[relay.Constant][34] /* ty=Tensor[(126), uint8] */, %692, %693, -7.73119f /* ty=float32 */, %var_5938, %694)
}

def @func_6757() -> (Tensor[(2, 15, 6), float64], Tensor[(33, 5), float64]) {
  %695 = cast(meta[relay.Constant][35] /* ty=Tensor[(33, 5), float32] */, dtype="float32") /* ty=Tensor[(33, 5), float32] */;
  %696 = reshape(%695, newshape=[11, 15, 1]) /* ty=Tensor[(11, 15, 1), float32] */;
  %697 = @func_5485(%696) /* ty=(Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float64], Tensor[(11, 15, ?), uint32], Tensor[(11, 15, ?), int16], Tensor[(2, 15, 6), float32], Tensor[(11, 15, ?), float64]) */;
  %698 = %697.6;
  %699 = cast(%698, dtype="float64") /* ty=Tensor[(11, 15, ?), float64] */;
  %700 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(33, 5), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %701 = cast(meta[relay.Constant][35] /* ty=Tensor[(33, 5), float32] */, dtype="float64") /* ty=Tensor[(33, 5), float64] */;
  %702 = dyn.reshape(%699, %700, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %703 = @func_4544() /* ty=Tensor[(2, 15, 6), float64] */;
  %704 = mod(%701, %702) /* ty=Tensor[(33, 5), float64] */;
  (%703, %704)
}

def @func_5811(%var_5808: Tensor[(14, 4, 11), float64]) -> (Tensor[(14, 4, 11), float64],) {
  %705 = cast(%var_5808, dtype="float64") /* ty=Tensor[(14, 4, 11), float64] */;
  %706 = cosh(%705) /* ty=Tensor[(14, 4, 11), float64] */;
  (%706,)
}

def @func_7620(%var_7543: Tensor[(120), bool]) -> (Tensor[(14, 4, 15), float64], Tensor[(120), bool], Tensor[(5, 4, 6), float64], Tensor[(5, 4, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32]) {
  %707 = @func_1157() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
  %708 = cast(%var_7543, dtype="bool") /* ty=Tensor[(120), bool] */;
  %709 = reshape(%708, newshape=[5, 4, 6]) /* ty=Tensor[(5, 4, 6), bool] */;
  %710 = @func_1006(%709) /* ty=(Tensor[(5, 4, 6), int8], Tensor[(336), float64], Tensor[(180), float32]) */;
  %711 = %710.0;
  %712 = cast(%711, dtype="float64") /* ty=Tensor[(5, 4, 6), float64] */;
  %713 = cast(%711, dtype="float32") /* ty=Tensor[(5, 4, 6), float32] */;
  %714 = @func_7203() /* ty=(Tensor[(2, 15, 6), float64],) */;
  %715 = @func_5658() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */;
  %716 = %707.0;
  %717 = tan(%712) /* ty=Tensor[(5, 4, 6), float64] */;
  %718 = rsqrt(%713) /* ty=Tensor[(5, 4, 6), float32] */;
  %719 = %714.0;
  %720 = %715.0;
  (%716, %var_7543, %717, %718, %719, %720)
}

def @func_1992() -> Tensor[(180), float64] {
  %721 = @func_1671() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(180), float32], Tensor[(120), bool], Tensor[(180), float64], Tensor[(156), float64]) */;
  %721.3
}

def @func_3451() -> (Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) {
  %722 = @func_3398() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */;
  %723 = @func_2048() /* ty=(Tensor[(15, 1, 5), float32], Tensor[(2, 15, 6), float32]) */;
  %724 = %722.0;
  %725 = %723.1;
  (%724, %725)
}

def @func_6827() -> Tensor[(3, 14, 8), float32] {
  @func_4038() /* ty=Tensor[(3, 14, 8), float32] */
}

def @func_2048() -> (Tensor[(15, 1, 5), float32], Tensor[(2, 15, 6), float32]) {
  %726 = cast(meta[relay.Constant][36] /* ty=Tensor[(15, 1, 5), float32] */, dtype="float32") /* ty=Tensor[(15, 1, 5), float32] */;
  %727 = @func_1157() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
  %728 = erf(%726) /* ty=Tensor[(15, 1, 5), float32] */;
  %729 = %727.1;
  (%728, %729)
}

def @func_8452(%var_8433: Tensor[(13, 13, 14), float64], %var_8438: Tensor[(180), float64]) -> (Tensor[(8, 15, 3), float64], Tensor[(8, 60), float32], Tensor[(180), float64], Tensor[(13, 13, 14), uint32]) {
  %730 = cast(meta[relay.Constant][37] /* ty=Tensor[(8, 60), float32] */, dtype="float32") /* ty=Tensor[(8, 60), float32] */;
  %731 = cast(%var_8438, dtype="float64") /* ty=Tensor[(180), float64] */;
  %732 = reshape(%730, newshape=[5, 12, 8]) /* ty=Tensor[(5, 12, 8), float32] */;
  %733 = reshape(%731, newshape=[30, 6]) /* ty=Tensor[(30, 6), float64] */;
  %734 = @func_6242(%732, %733) /* ty=(Tensor[(5, 12, 8), float32], Tensor[(360), float32], Tensor[(5, 12, 8), uint8], Tensor[(8, 15, 3), float64], Tensor[(180), bool], Tensor[(30, 6), float64]) */;
  %735 = cast(%var_8433, dtype="float64") /* ty=Tensor[(13, 13, 14), float64] */;
  %736 = asinh(%735) /* ty=Tensor[(13, 13, 14), float64] */;
  %737 = cast(%var_8433, dtype="uint32") /* ty=Tensor[(13, 13, 14), uint32] */;
  %738 = shape_of(%736, dtype="int32") /* ty=Tensor[(3), int32] */;
  %739 = cast(%736, dtype="uint32") /* ty=Tensor[(13, 13, 14), uint32] */;
  %740 = dyn.reshape(%737, %738, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %741 = %734.3;
  %742 = left_shift(%739, %740) /* ty=Tensor[(13, 13, 14), uint32] */;
  (%741, meta[relay.Constant][37] /* ty=Tensor[(8, 60), float32] */, %var_8438, %742)
}

def @func_1247() -> (Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32]) {
  %743 = @func_937() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(336, 1), float64]) */;
  %744 = %743.0;
  %745 = cast(%744, dtype="float32") /* ty=Tensor[(2, 15, 6), float32] */;
  %746 = @func_652() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(180), float64], Tensor[(156), float64]) */;
  %747 = %746.3;
  %748 = cast(%747, dtype="float32") /* ty=Tensor[(180), float32] */;
  %749 = reshape(%748, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), float32] */;
  %750 = @func_735(%749) /* ty=(Tensor[(2, 15, 6), float64],) */;
  %751 = @func_1133() /* ty=(Tensor[(180), float64], Tensor[(2, 15, 6), float64]) */;
  %752 = @func_652() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(180), float64], Tensor[(156), float64]) */;
  %753 = cosh(%745) /* ty=Tensor[(2, 15, 6), float32] */;
  %754 = %750.0;
  %755 = %751.1;
  %756 = %752.1;
  (%753, %747, %754, %755, %756)
}

def @func_1133() -> (Tensor[(180), float64], Tensor[(2, 15, 6), float64]) {
  %757 = @func_389() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
  %758 = %757.2;
  %759 = cast(%758, dtype="float32") /* ty=Tensor[(180), float32] */;
  %760 = reshape(%759, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), float32] */;
  %761 = @func_735(%760) /* ty=(Tensor[(2, 15, 6), float64],) */;
  %762 = %761.0;
  (%758, %762)
}

def @func_7398() -> (Tensor[(180), float64],) {
  %763 = @func_1671() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(180), float32], Tensor[(120), bool], Tensor[(180), float64], Tensor[(156), float64]) */;
  %764 = %763.3;
  (%764,)
}

def @func_1684() -> Tensor[(2, 15, 6), float64] {
  %765 = @func_1133() /* ty=(Tensor[(180), float64], Tensor[(2, 15, 6), float64]) */;
  %765.1
}

def @func_1763() -> (Tensor[(180), float64], Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(336), float64], Tensor[(14, 4, 15), float64]) {
  %766 = @func_1133() /* ty=(Tensor[(180), float64], Tensor[(2, 15, 6), float64]) */;
  %767 = @func_652() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(180), float64], Tensor[(156), float64]) */;
  %768 = @func_389() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
  %769 = @func_1322() /* ty=(Tensor[(336), float64],) */;
  %770 = @func_1157() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
  %771 = %766.0;
  %772 = %767.0;
  %773 = %768.1;
  %774 = %769.0;
  %775 = %770.0;
  (%771, %772, %773, %774, %775)
}

def @func_3100() -> Tensor[(2, 15, 6), float64] {
  %776 = @func_389() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
  %777 = %776.1;
  %778 = cast(%777, dtype="float64") /* ty=Tensor[(2, 15, 6), float64] */;
  log(%778) /* ty=Tensor[(2, 15, 6), float64] */
}

def @func_19(%var_7: Tensor[(2, 15, 6), float64], %var_8: Tensor[(2, 15, 6), float64]) -> (Tensor[(2, 15, 6), float32],) {
  %779 = cast(%var_8, dtype="float64") /* ty=Tensor[(2, 15, 6), float64] */;
  %780 = shape_of(%var_7, dtype="int32") /* ty=Tensor[(3), int32] */;
  %781 = cast(%var_7, dtype="float64") /* ty=Tensor[(2, 15, 6), float64] */;
  %782 = dyn.reshape(%779, %780, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %783 = power(%781, %782) /* ty=Tensor[(2, 15, 6), float64] */;
  %784 = cast(%783, dtype="float32") /* ty=Tensor[(2, 15, 6), float32] */;
  %785 = tan(%784) /* ty=Tensor[(2, 15, 6), float32] */;
  (%785,)
}

def @func_5658() -> (Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) {
  %786 = @func_2821() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */;
  %787 = @func_4440() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(126), uint8], Tensor[(336), float64], Tensor[(2, 15, 6), float32]) */;
  %788 = %786.0;
  %789 = %787.0;
  (%788, %789)
}

def @func_937() -> (Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(336, 1), float64]) {
  %790 = @func_478() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(3, 14, 8), float64], Tensor[(336), float64], Tensor[(180), float64], Tensor[(5, 4, 6), bool], Tensor[(180), float64]) */;
  %791 = %790.1;
  %792 = cast(%791, dtype="float32") /* ty=Tensor[(2, 15, 6), float32] */;
  %793 = cast(meta[relay.Constant][38] /* ty=Tensor[(336, 1), float64] */, dtype="float64") /* ty=Tensor[(336, 1), float64] */;
  %794 = cast(meta[relay.Constant][38] /* ty=Tensor[(336, 1), float64] */, dtype="float64") /* ty=Tensor[(336, 1), float64] */;
  %795 = reshape(%793, newshape=[3, 14, 8]) /* ty=Tensor[(3, 14, 8), float64] */;
  %796 = reshape(%794, newshape=[3, 14, 8]) /* ty=Tensor[(3, 14, 8), float64] */;
  %797 = @func_62(%795, %796) /* ty=(Tensor[(3, 14, 8), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(3, 14, 8), float64]) */;
  %798 = rsqrt(%792) /* ty=Tensor[(2, 15, 6), float32] */;
  %799 = %797.2;
  (%798, %799, meta[relay.Constant][38] /* ty=Tensor[(336, 1), float64] */)
}

def @func_1985(%var_1953: int8, %var_1954: Tensor[(15, 5, 3), int8]) -> Tensor[(15, 5, 3), bool] {
  %800 = cast(%var_1953, dtype="bool") /* ty=bool */;
  %801 = cast(%var_1954, dtype="bool") /* ty=Tensor[(15, 5, 3), bool] */;
  less_equal(%800, %801) /* ty=Tensor[(15, 5, 3), bool] */
}

def @func_6962() -> (Tensor[(336, 1), float64], Tensor[(180), bool], Tensor[(180), float64], Tensor[(8, 15, 3), float32], float32, Tensor[(360), float32], Tensor[(2, 15, 6), float64]) {
  %802 = cast(meta[relay.Constant][39] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %803 = reshape(%802, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %804 = @func_5605(%803) /* ty=(Tensor[(180), bool],) */;
  %805 = cast(4.94737f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %806 = cast(meta[relay.Constant][40] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
  %807 = reshape(%805, newshape=[]) /* ty=float32 */;
  %808 = reshape(%806, newshape=[8, 15, 3]) /* ty=Tensor[(8, 15, 3), float32] */;
  %809 = @func_4607(%807, %808) /* ty=(Tensor[(8, 15, 3), float32], Tensor[(8, 15, 3), float64]) */;
  %810 = @func_3913() /* ty=Tensor[(336, 1), float64] */;
  %811 = %804.0;
  %812 = %809.0;
  %813 = @func_3420() /* ty=Tensor[(2, 15, 6), float64] */;
  (%810, %811, meta[relay.Constant][39] /* ty=Tensor[(180), float64] */, %812, 4.94737f /* ty=float32 */, meta[relay.Constant][40] /* ty=Tensor[(360), float32] */, %813)
}

def @func_3715() -> (Tensor[(180), float64],) {
  %814 = @func_3290() /* ty=(Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float64], Tensor[(180), float64]) */;
  %815 = %814.2;
  (%815,)
}

def @func_3057() -> (Tensor[(2, 15, 6), float32],) {
  %816 = @func_937() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(336, 1), float64]) */;
  %817 = %816.0;
  (%817,)
}

def @func_3420() -> Tensor[(2, 15, 6), float64] {
  @func_3100() /* ty=Tensor[(2, 15, 6), float64] */
}

def @func_5759() -> (Tensor[(3, 14, 8), float32], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) {
  %818 = @func_2952() /* ty=(Tensor[(2, 15, 6), float32],) */;
  %819 = @func_2834() /* ty=(Tensor[(2, 15, 6), float32],) */;
  %820 = @func_4038() /* ty=Tensor[(3, 14, 8), float32] */;
  %821 = %818.0;
  %822 = %819.0;
  (%820, %821, %822)
}

def @func_6515() -> (Tensor[(2, 15, 6), float64], Tensor[(5, 4, 6), bool], Tensor[(14, 4, 11), float64], Tensor[(616), float64]) {
  %823 = @func_652() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(180), float64], Tensor[(156), float64]) */;
  %824 = cast(meta[relay.Constant][41] /* ty=Tensor[(616), float64] */, dtype="float64") /* ty=Tensor[(616), float64] */;
  %825 = reshape(%824, newshape=[14, 4, 11]) /* ty=Tensor[(14, 4, 11), float64] */;
  %826 = @func_5811(%825) /* ty=(Tensor[(14, 4, 11), float64],) */;
  %827 = @func_2267() /* ty=Tensor[(2, 15, 6), float64] */;
  %828 = %823.0;
  %829 = %826.0;
  (%827, %828, %829, meta[relay.Constant][41] /* ty=Tensor[(616), float64] */)
}

def @func_2213() -> Tensor[(2, 15, 6), float32] {
  %830 = @func_681() /* ty=(Tensor[(2, 15, 6), float32],) */;
  %830.0
}

def @func_3398() -> (Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) {
  %831 = @func_681() /* ty=(Tensor[(2, 15, 6), float32],) */;
  %832 = @func_3057() /* ty=(Tensor[(2, 15, 6), float32],) */;
  %833 = %831.0;
  %834 = %832.0;
  (%833, %834)
}

def @func_7046() -> Tensor[(2, 15, 6), float32] {
  %835 = @func_389() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
  %835.1
}

def @func_2834() -> (Tensor[(2, 15, 6), float32],) {
  %836 = @func_2821() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */;
  %837 = %836.1;
  (%837,)
}

def @func_2952() -> (Tensor[(2, 15, 6), float32],) {
  %838 = @func_2834() /* ty=(Tensor[(2, 15, 6), float32],) */;
  %839 = %838.0;
  (%839,)
}

def @func_7286() -> Tensor[(180), float64] {
  @func_2194() /* ty=Tensor[(180), float64] */
}

def @func_3926() -> (Tensor[(5, 4, 6), bool],) {
  %840 = @func_389() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
  %841 = %840.0;
  (%841,)
}

def @func_4479() -> (Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float64]) {
  %842 = @func_4344() /* ty=(Tensor[(2, 15, 6), float64],) */;
  %843 = %842.0;
  %844 = @func_3100() /* ty=Tensor[(2, 15, 6), float64] */;
  (%843, %844)
}

def @func_6531() -> (Tensor[(13, 13, 8), bool], Tensor[(2, 15, 6), float64]) {
  %845 = cast(meta[relay.Constant][42] /* ty=Tensor[(13, 13, 8), float32] */, dtype="float32") /* ty=Tensor[(13, 13, 8), float32] */;
  %846 = asin(%845) /* ty=Tensor[(13, 13, 8), float32] */;
  %847 = cast(meta[relay.Constant][42] /* ty=Tensor[(13, 13, 8), float32] */, dtype="bool") /* ty=Tensor[(13, 13, 8), bool] */;
  %848 = shape_of(%846, dtype="int32") /* ty=Tensor[(3), int32] */;
  %849 = cast(%846, dtype="bool") /* ty=Tensor[(13, 13, 8), bool] */;
  %850 = dyn.reshape(%847, %848, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %851 = equal(%849, %850) /* ty=Tensor[(13, 13, 8), bool] */;
  %852 = @func_1684() /* ty=Tensor[(2, 15, 6), float64] */;
  (%851, %852)
}

def @func_6177() -> (Tensor[(180), float64],) {
  %853 = @func_5038() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
  %854 = %853.2;
  (%854,)
}

def @func_1568() -> (Tensor[(180), float64], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32]) {
  %855 = @func_478() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(3, 14, 8), float64], Tensor[(336), float64], Tensor[(180), float64], Tensor[(5, 4, 6), bool], Tensor[(180), float64]) */;
  %856 = %855.5;
  %857 = cast(%856, dtype="float32") /* ty=Tensor[(180), float32] */;
  %858 = reshape(%857, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), float32] */;
  %859 = @func_735(%858) /* ty=(Tensor[(2, 15, 6), float64],) */;
  %860 = %859.0;
  %861 = @func_1381() /* ty=Tensor[(2, 15, 6), float32] */;
  (%856, %860, %861)
}

def @func_4038() -> Tensor[(3, 14, 8), float32] {
  %862 = @func_2429() /* ty=(Tensor[(2, 15, 6), float64], Tensor[(3, 14, 8), float64], Tensor[(3, 14, 8), float32]) */;
  %862.2
}

def @func_1800() -> (Tensor[(336, 1), float64],) {
  %863 = @func_937() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(336, 1), float64]) */;
  %864 = %863.2;
  (%864,)
}

def @func_4344() -> (Tensor[(2, 15, 6), float64],) {
  %865 = @func_4184() /* ty=Tensor[(2, 15, 6), float64] */;
  (%865,)
}

def @func_5605(%var_5599: Tensor[(180), float64]) -> (Tensor[(180), bool],) {
  %866 = @func_1157() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
  %867 = %866.2;
  %868 = cast(%var_5599, dtype="bool") /* ty=Tensor[(180), bool] */;
  %869 = shape_of(%867, dtype="int32") /* ty=Tensor[(1), int32] */;
  %870 = cast(%867, dtype="bool") /* ty=Tensor[(180), bool] */;
  %871 = dyn.reshape(%868, %869, newshape=[]) /* ty=Tensor[(?), bool] */;
  %872 = logical_or(%870, %871) /* ty=Tensor[(180), bool] */;
  (%872,)
}

def @func_735(%var_727: Tensor[(2, 15, 6), float32]) -> (Tensor[(2, 15, 6), float64],) {
  %873 = @func_681() /* ty=(Tensor[(2, 15, 6), float32],) */;
  %874 = %873.0;
  %875 = cast(%var_727, dtype="float64") /* ty=Tensor[(2, 15, 6), float64] */;
  %876 = shape_of(%874, dtype="int32") /* ty=Tensor[(3), int32] */;
  %877 = cast(%874, dtype="float64") /* ty=Tensor[(2, 15, 6), float64] */;
  %878 = dyn.reshape(%875, %876, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %879 = mod(%877, %878) /* ty=Tensor[(2, 15, 6), float64] */;
  (%879,)
}

def @func_4440() -> (Tensor[(2, 15, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(126), uint8], Tensor[(336), float64], Tensor[(2, 15, 6), float32]) {
  %880 = @func_3398() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */;
  %881 = cast(meta[relay.Constant][43] /* ty=Tensor[(126), uint8] */, dtype="uint8") /* ty=Tensor[(126), uint8] */;
  %882 = reshape(%881, newshape=[7, 3, 6]) /* ty=Tensor[(7, 3, 6), uint8] */;
  %883 = @func_2869(%882) /* ty=(Tensor[(7, 3, 6), bool], Tensor[(14, 4, 15), float64], Tensor[(2, 15, 6), float32], Tensor[(336), float64], Tensor[(336, 12), float32]) */;
  %884 = @func_1322() /* ty=(Tensor[(336), float64],) */;
  %885 = @func_2952() /* ty=(Tensor[(2, 15, 6), float32],) */;
  %886 = %880.1;
  %887 = %883.1;
  %888 = %884.0;
  %889 = %885.0;
  (%886, %887, meta[relay.Constant][43] /* ty=Tensor[(126), uint8] */, %888, %889)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2375() -> (Tensor[(2, 15, 6), float32],) {
  %2 = fn () -> (Tensor[(2, 15, 6), float32],) {
    %0 = @func_1484() /* ty=(Tensor[(180), float64], Tensor[(180), float64], Tensor[(2, 15, 6), float32]) */;
    %1 = %0.2;
    (%1,)
  };
  %2() /* ty=(Tensor[(2, 15, 6), float32],) */
}

def @func_5487(%var_5486: Tensor[(11, 15, 1), float32]) -> (Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float64], Tensor[(11, 15, ?), uint32], Tensor[(11, 15, ?), int16], Tensor[(2, 15, 6), float32], Tensor[(11, 15, ?), float64]) {
  %40 = fn (%var_5426: Tensor[(11, 15, 1), float32]) -> (Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float64], Tensor[(11, 15, ?), uint32], Tensor[(11, 15, ?), int16], Tensor[(2, 15, 6), float32], Tensor[(11, 15, ?), float64]) {
    %3 = @func_4011() /* ty=(Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */;
    %4 = cast(%var_5426, dtype="float32") /* ty=Tensor[(11, 15, 1), float32] */;
    %5 = exp(%4) /* ty=Tensor[(11, 15, 1), float32] */;
    %6 = cast(%var_5426, dtype="uint32") /* ty=Tensor[(11, 15, 1), uint32] */;
    %7 = shape_of(%5, dtype="int32") /* ty=Tensor[(3), int32] */;
    %8 = cast(%5, dtype="uint32") /* ty=Tensor[(11, 15, 1), uint32] */;
    %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %10 = maximum(%8, %9) /* ty=Tensor[(11, 15, ?), uint32] */;
    %11 = cast(%5, dtype="uint64") /* ty=Tensor[(11, 15, 1), uint64] */;
    %12 = shape_of(%10, dtype="int32") /* ty=Tensor[(3), int32] */;
    %13 = cast(%10, dtype="uint64") /* ty=Tensor[(11, 15, ?), uint64] */;
    %14 = dyn.reshape(%11, %12, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %15 = left_shift(%13, %14) /* ty=Tensor[(11, 15, ?), uint64] */;
    %16 = cast(%15, dtype="uint32") /* ty=Tensor[(11, 15, ?), uint32] */;
    %17 = shape_of(%5, dtype="int32") /* ty=Tensor[(3), int32] */;
    %18 = cast(%5, dtype="uint32") /* ty=Tensor[(11, 15, 1), uint32] */;
    %19 = dyn.reshape(%16, %17, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %20 = cast(%var_5426, dtype="bool") /* ty=Tensor[(11, 15, 1), bool] */;
    %21 = shape_of(%5, dtype="int32") /* ty=Tensor[(3), int32] */;
    %22 = cast(%5, dtype="bool") /* ty=Tensor[(11, 15, 1), bool] */;
    %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %24 = logical_and(%22, %23) /* ty=Tensor[(11, 15, ?), bool] */;
    %25 = cast(%24, dtype="int16") /* ty=Tensor[(11, 15, ?), int16] */;
    %26 = shape_of(%15, dtype="int32") /* ty=Tensor[(3), int32] */;
    %27 = cast(%15, dtype="int16") /* ty=Tensor[(11, 15, ?), int16] */;
    %28 = dyn.reshape(%25, %26, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %29 = cast(%15, dtype="float64") /* ty=Tensor[(11, 15, ?), float64] */;
    %30 = shape_of(%10, dtype="int32") /* ty=Tensor[(3), int32] */;
    %31 = cast(%10, dtype="float64") /* ty=Tensor[(11, 15, ?), float64] */;
    %32 = dyn.reshape(%29, %30, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %33 = %3.2;
    %34 = @func_1684() /* ty=Tensor[(2, 15, 6), float64] */;
    %35 = @func_3420() /* ty=Tensor[(2, 15, 6), float64] */;
    %36 = minimum(%18, %19) /* ty=Tensor[(11, 15, ?), uint32] */;
    %37 = right_shift(%27, %28) /* ty=Tensor[(11, 15, ?), int16] */;
    %38 = @func_2213() /* ty=Tensor[(2, 15, 6), float32] */;
    %39 = mod(%31, %32) /* ty=Tensor[(11, 15, ?), float64] */;
    (%33, %34, %35, %36, %37, %38, %39)
  };
  %40(%var_5486) /* ty=(Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float64], Tensor[(11, 15, ?), uint32], Tensor[(11, 15, ?), int16], Tensor[(2, 15, 6), float32], Tensor[(11, 15, ?), float64]) */
}

def @func_2727() -> (Tensor[(14, 4, 15), float64],) {
  %41 = @func_1157() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
  %42 = %41.0;
  (%42,)
}

def @func_5959(%var_5957: Tensor[(1, 360), float32]) -> (Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32], Tensor[(126), uint8], Tensor[(2, 15, 6), float32], Tensor[(8, 15, 3), float64], float32, Tensor[(1, 360), float32], Tensor[(2, 15, 6), float64]) {
  @func_5956(%var_5957) /* ty=(Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32], Tensor[(126), uint8], Tensor[(2, 15, 6), float32], Tensor[(8, 15, 3), float64], float32, Tensor[(1, 360), float32], Tensor[(2, 15, 6), float64]) */
}

def @func_4639(%var_4631: int64, %var_4632: Tensor[(1, 13, 3), int64]) -> (Tensor[(1, 13, 3), int64],) {
  %43 = cast(%var_4631, dtype="int64") /* ty=int64 */;
  %44 = cast(%var_4632, dtype="int64") /* ty=Tensor[(1, 13, 3), int64] */;
  %45 = maximum(%43, %44) /* ty=Tensor[(1, 13, 3), int64] */;
  (%45,)
}

def @func_5658() -> (Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) {
  %46 = @func_2821() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */;
  %47 = @func_4440() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(126), uint8], Tensor[(336), float64], Tensor[(2, 15, 6), float32]) */;
  %48 = %46.0;
  %49 = %47.0;
  (%48, %49)
}

def @func_4481() -> (Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float64]) {
  @func_4479() /* ty=(Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float64]) */
}

def @func_576() -> (Tensor[(180), float64], Tensor[(180), float64]) {
  @func_574() /* ty=(Tensor[(180), float64], Tensor[(180), float64]) */
}

def @func_1993() -> Tensor[(180), float64] {
  %51 = fn () -> Tensor[(180), float64] {
    %50 = @func_1671() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(180), float32], Tensor[(120), bool], Tensor[(180), float64], Tensor[(156), float64]) */;
    %50.3
  };
  %51() /* ty=Tensor[(180), float64] */
}

def @func_4286(%var_4284: Tensor[(10, 12, 15), uint32]) -> (Tensor[(10, 12, 15), uint32], Tensor[(2, 15, 6), float32]) {
  @func_4283(%var_4284) /* ty=(Tensor[(10, 12, 15), uint32], Tensor[(2, 15, 6), float32]) */
}

def @func_652() -> (Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(180), float64], Tensor[(156), float64]) {
  %52 = @func_389() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
  %53 = @func_389() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
  %54 = @func_478() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(3, 14, 8), float64], Tensor[(336), float64], Tensor[(180), float64], Tensor[(5, 4, 6), bool], Tensor[(180), float64]) */;
  %55 = %54.1;
  %56 = cast(%55, dtype="float64") /* ty=Tensor[(2, 15, 6), float64] */;
  %57 = atan(%56) /* ty=Tensor[(2, 15, 6), float64] */;
  %58 = cast(%57, dtype="float64") /* ty=Tensor[(2, 15, 6), float64] */;
  %59 = cast(meta[relay.Constant][0] /* ty=Tensor[(156), float64] */, dtype="float64") /* ty=Tensor[(156), float64] */;
  %60 = reshape(%59, newshape=[1, 12, 13]) /* ty=Tensor[(1, 12, 13), float64] */;
  %61 = @func_159(%60) /* ty=(Tensor[(1, 12, 13), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
  %62 = %52.0;
  %63 = %53.1;
  %64 = acosh(%58) /* ty=Tensor[(2, 15, 6), float64] */;
  %65 = %61.2;
  (%62, %63, %64, %65, meta[relay.Constant][0] /* ty=Tensor[(156), float64] */)
}

def @func_4607(%var_4591: float32, %var_4592: Tensor[(8, 15, 3), float32]) -> (Tensor[(8, 15, 3), float32], Tensor[(8, 15, 3), float64]) {
  %66 = cast(%var_4591, dtype="float32") /* ty=float32 */;
  %67 = cast(%var_4592, dtype="float32") /* ty=Tensor[(8, 15, 3), float32] */;
  %68 = cast(%var_4592, dtype="float64") /* ty=Tensor[(8, 15, 3), float64] */;
  %69 = acos(%68) /* ty=Tensor[(8, 15, 3), float64] */;
  %70 = cast(%69, dtype="float64") /* ty=Tensor[(8, 15, 3), float64] */;
  %71 = minimum(%66, %67) /* ty=Tensor[(8, 15, 3), float32] */;
  %72 = sqrt(%70) /* ty=Tensor[(8, 15, 3), float64] */;
  (%71, %72)
}

def @func_6517() -> (Tensor[(2, 15, 6), float64], Tensor[(5, 4, 6), bool], Tensor[(14, 4, 11), float64], Tensor[(616), float64]) {
  @func_6515() /* ty=(Tensor[(2, 15, 6), float64], Tensor[(5, 4, 6), bool], Tensor[(14, 4, 11), float64], Tensor[(616), float64]) */
}

def @func_2069() -> Tensor[(336, 1), float64] {
  @func_2067() /* ty=Tensor[(336, 1), float64] */
}

def @func_7622(%var_7621: Tensor[(120), bool]) -> (Tensor[(14, 4, 15), float64], Tensor[(120), bool], Tensor[(5, 4, 6), float64], Tensor[(5, 4, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32]) {
  %87 = fn (%var_7543: Tensor[(120), bool]) -> (Tensor[(14, 4, 15), float64], Tensor[(120), bool], Tensor[(5, 4, 6), float64], Tensor[(5, 4, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32]) {
    %73 = @func_1157() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
    %74 = cast(%var_7543, dtype="bool") /* ty=Tensor[(120), bool] */;
    %75 = reshape(%74, newshape=[5, 4, 6]) /* ty=Tensor[(5, 4, 6), bool] */;
    %76 = @func_1006(%75) /* ty=(Tensor[(5, 4, 6), int8], Tensor[(336), float64], Tensor[(180), float32]) */;
    %77 = %76.0;
    %78 = cast(%77, dtype="float64") /* ty=Tensor[(5, 4, 6), float64] */;
    %79 = cast(%77, dtype="float32") /* ty=Tensor[(5, 4, 6), float32] */;
    %80 = @func_7203() /* ty=(Tensor[(2, 15, 6), float64],) */;
    %81 = @func_5658() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */;
    %82 = %73.0;
    %83 = tan(%78) /* ty=Tensor[(5, 4, 6), float64] */;
    %84 = rsqrt(%79) /* ty=Tensor[(5, 4, 6), float32] */;
    %85 = %80.0;
    %86 = %81.0;
    (%82, %var_7543, %83, %84, %85, %86)
  };
  %87(%var_7621) /* ty=(Tensor[(14, 4, 15), float64], Tensor[(120), bool], Tensor[(5, 4, 6), float64], Tensor[(5, 4, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32]) */
}

def @func_4012() -> (Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) {
  %92 = fn () -> (Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) {
    %88 = @func_3129() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
    %89 = @func_3100() /* ty=Tensor[(2, 15, 6), float64] */;
    %90 = %88.0;
    %91 = @func_2213() /* ty=Tensor[(2, 15, 6), float32] */;
    (%89, %90, %91)
  };
  %92() /* ty=(Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */
}

def @func_1157() -> (Tensor[(14, 4, 15), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) {
  %93 = cast(meta[relay.Constant][1] /* ty=Tensor[(14, 4, 15), float64] */, dtype="float64") /* ty=Tensor[(14, 4, 15), float64] */;
  %94 = cast(meta[relay.Constant][2] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %95 = cast(meta[relay.Constant][2] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %96 = reshape(%94, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), float64] */;
  %97 = reshape(%95, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), float64] */;
  %98 = @func_19(%96, %97) /* ty=(Tensor[(2, 15, 6), float32],) */;
  %99 = log2(%93) /* ty=Tensor[(14, 4, 15), float64] */;
  %100 = %98.0;
  (%99, %100, meta[relay.Constant][2] /* ty=Tensor[(180), float64] */)
}

def @func_3102() -> Tensor[(2, 15, 6), float64] {
  @func_3100() /* ty=Tensor[(2, 15, 6), float64] */
}

def @main(%var_8603: Tensor[(336, 15), float32]) -> (Tensor[(2, 15, 6), float32], Tensor[(336, 15), int64]) {
  %101 = @func_8008() /* ty=(Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32], Tensor[(3, 14, 8), float64]) */;
  %102 = @func_7789() /* ty=(Tensor[(180), uint32], Tensor[(336, 1), float32]) */;
  %103 = %102.1;
  %104 = cast(%103, dtype="uint32") /* ty=Tensor[(336, 1), uint32] */;
  %105 = cast(%var_8603, dtype="uint32") /* ty=Tensor[(336, 15), uint32] */;
  %106 = left_shift(%104, %105) /* ty=Tensor[(336, 15), uint32] */;
  %107 = cast(%var_8603, dtype="int64") /* ty=Tensor[(336, 15), int64] */;
  %108 = shape_of(%106, dtype="int32") /* ty=Tensor[(2), int32] */;
  %109 = cast(%106, dtype="int64") /* ty=Tensor[(336, 15), int64] */;
  %110 = dyn.reshape(%107, %108, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %111 = %101.4;
  %112 = bitwise_xor(%109, %110) /* ty=Tensor[(336, 15), int64] */;
  (%111, %112)
}

def @func_2140() -> (Tensor[(336, 12), float32], Tensor[(336, ?), float64]) {
  @func_2138() /* ty=(Tensor[(336, 12), float32], Tensor[(336, ?), float64]) */
}

def @func_2430() -> (Tensor[(2, 15, 6), float64], Tensor[(3, 14, 8), float64], Tensor[(3, 14, 8), float32]) {
  %134 = fn () -> (Tensor[(2, 15, 6), float64], Tensor[(3, 14, 8), float64], Tensor[(3, 14, 8), float32]) {
    %113 = @func_2374() /* ty=(Tensor[(2, 15, 6), float32],) */;
    %114 = %113.0;
    %115 = @func_1157() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
    %116 = %115.1;
    %117 = cast(%116, dtype="float64") /* ty=Tensor[(2, 15, 6), float64] */;
    %118 = shape_of(%114, dtype="int32") /* ty=Tensor[(3), int32] */;
    %119 = cast(%114, dtype="float64") /* ty=Tensor[(2, 15, 6), float64] */;
    %120 = dyn.reshape(%117, %118, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %121 = cast(%114, dtype="float32") /* ty=Tensor[(2, 15, 6), float32] */;
    %122 = reshape(%121, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), float32] */;
    %123 = @func_867(%122) /* ty=(Tensor[(2, 15, 6), float32], Tensor[(5, 4, 6), bool], Tensor[(3, 14, 8), float64], Tensor[(336), float64], Tensor[(3, 14, 8), float64]) */;
    %124 = %123.4;
    %125 = cast(%124, dtype="float64") /* ty=Tensor[(3, 14, 8), float64] */;
    %126 = cast(%124, dtype="float64") /* ty=Tensor[(3, 14, 8), float64] */;
    %127 = reshape(%125, newshape=[3, 14, 8]) /* ty=Tensor[(3, 14, 8), float64] */;
    %128 = reshape(%126, newshape=[3, 14, 8]) /* ty=Tensor[(3, 14, 8), float64] */;
    %129 = @func_62(%127, %128) /* ty=(Tensor[(3, 14, 8), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(3, 14, 8), float64]) */;
    %130 = cast(%124, dtype="float32") /* ty=Tensor[(3, 14, 8), float32] */;
    %131 = divide(%119, %120) /* ty=Tensor[(2, 15, 6), float64] */;
    %132 = %129.0;
    %133 = cosh(%130) /* ty=Tensor[(3, 14, 8), float32] */;
    (%131, %132, %133)
  };
  %134() /* ty=(Tensor[(2, 15, 6), float64], Tensor[(3, 14, 8), float64], Tensor[(3, 14, 8), float32]) */
}

def @func_7381() -> Tensor[(2, 15, 6), float64] {
  %135 = fn () -> Tensor[(2, 15, 6), float64] {
    @func_4184() /* ty=Tensor[(2, 15, 6), float64] */
  };
  %135() /* ty=Tensor[(2, 15, 6), float64] */
}

def @func_7880() -> (Tensor[(180), float64], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32]) {
  %143 = fn () -> (Tensor[(180), float64], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32]) {
    %136 = @func_3715() /* ty=(Tensor[(180), float64],) */;
    %137 = @func_5898() /* ty=(Tensor[(2, 15, 6), float32],) */;
    %138 = @func_4011() /* ty=(Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */;
    %139 = %136.0;
    %140 = %137.0;
    %141 = @func_6903() /* ty=Tensor[(2, 15, 6), float64] */;
    %142 = %138.1;
    (%139, %140, %141, %142)
  };
  %143() /* ty=(Tensor[(180), float64], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32]) */
}

def @func_5899() -> (Tensor[(2, 15, 6), float32],) {
  %146 = fn () -> (Tensor[(2, 15, 6), float32],) {
    %144 = @func_5098() /* ty=(Tensor[(2, 15, 6), float32],) */;
    %145 = %144.0;
    (%145,)
  };
  %146() /* ty=(Tensor[(2, 15, 6), float32],) */
}

def @func_1247() -> (Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32]) {
  %147 = @func_937() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(336, 1), float64]) */;
  %148 = %147.0;
  %149 = cast(%148, dtype="float32") /* ty=Tensor[(2, 15, 6), float32] */;
  %150 = @func_652() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(180), float64], Tensor[(156), float64]) */;
  %151 = %150.3;
  %152 = cast(%151, dtype="float32") /* ty=Tensor[(180), float32] */;
  %153 = reshape(%152, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), float32] */;
  %154 = @func_735(%153) /* ty=(Tensor[(2, 15, 6), float64],) */;
  %155 = @func_1133() /* ty=(Tensor[(180), float64], Tensor[(2, 15, 6), float64]) */;
  %156 = @func_652() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(180), float64], Tensor[(156), float64]) */;
  %157 = cosh(%149) /* ty=Tensor[(2, 15, 6), float32] */;
  %158 = %154.0;
  %159 = %155.1;
  %160 = %156.1;
  (%157, %151, %158, %159, %160)
}

def @func_1922() -> (Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) {
  %161 = @func_1568() /* ty=(Tensor[(180), float64], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32]) */;
  %162 = @func_1247() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32]) */;
  %163 = @func_1568() /* ty=(Tensor[(180), float64], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32]) */;
  %164 = %161.2;
  %165 = %162.4;
  %166 = %163.2;
  (%164, %165, %166)
}

def @func_6630(%var_6628: int32, %var_6629: Tensor[(7, 1, 5), int32]) -> (Tensor[(7, 1, 5), int32], Tensor[(336, 12), float32]) {
  %172 = fn (%var_6612: int32, %var_6613: Tensor[(7, 1, 5), int32]) -> (Tensor[(7, 1, 5), int32], Tensor[(336, 12), float32]) {
    %167 = cast(%var_6612, dtype="int32") /* ty=int32 */;
    %168 = cast(%var_6613, dtype="int32") /* ty=Tensor[(7, 1, 5), int32] */;
    %169 = @func_2356() /* ty=(Tensor[(336, 12), float32],) */;
    %170 = bitwise_xor(%167, %168) /* ty=Tensor[(7, 1, 5), int32] */;
    %171 = %169.0;
    (%170, %171)
  };
  %172(%var_6628, %var_6629) /* ty=(Tensor[(7, 1, 5), int32], Tensor[(336, 12), float32]) */
}

def @func_8405() -> Tensor[(180), float64] {
  @func_8403() /* ty=Tensor[(180), float64] */
}

def @func_7501() -> Tensor[(2, 15, 6), float32] {
  @func_7499() /* ty=Tensor[(2, 15, 6), float32] */
}

def @func_938() -> (Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(336, 1), float64]) {
  %183 = fn () -> (Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(336, 1), float64]) {
    %173 = @func_478() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(3, 14, 8), float64], Tensor[(336), float64], Tensor[(180), float64], Tensor[(5, 4, 6), bool], Tensor[(180), float64]) */;
    %174 = %173.1;
    %175 = cast(%174, dtype="float32") /* ty=Tensor[(2, 15, 6), float32] */;
    %176 = cast(meta[relay.Constant][3] /* ty=Tensor[(336, 1), float64] */, dtype="float64") /* ty=Tensor[(336, 1), float64] */;
    %177 = cast(meta[relay.Constant][3] /* ty=Tensor[(336, 1), float64] */, dtype="float64") /* ty=Tensor[(336, 1), float64] */;
    %178 = reshape(%176, newshape=[3, 14, 8]) /* ty=Tensor[(3, 14, 8), float64] */;
    %179 = reshape(%177, newshape=[3, 14, 8]) /* ty=Tensor[(3, 14, 8), float64] */;
    %180 = @func_62(%178, %179) /* ty=(Tensor[(3, 14, 8), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(3, 14, 8), float64]) */;
    %181 = rsqrt(%175) /* ty=Tensor[(2, 15, 6), float32] */;
    %182 = %180.2;
    (%181, %182, meta[relay.Constant][3] /* ty=Tensor[(336, 1), float64] */)
  };
  %183() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(336, 1), float64]) */
}

def @func_6758() -> (Tensor[(2, 15, 6), float64], Tensor[(33, 5), float64]) {
  %194 = fn () -> (Tensor[(2, 15, 6), float64], Tensor[(33, 5), float64]) {
    %184 = cast(meta[relay.Constant][4] /* ty=Tensor[(33, 5), float32] */, dtype="float32") /* ty=Tensor[(33, 5), float32] */;
    %185 = reshape(%184, newshape=[11, 15, 1]) /* ty=Tensor[(11, 15, 1), float32] */;
    %186 = @func_5485(%185) /* ty=(Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float64], Tensor[(11, 15, ?), uint32], Tensor[(11, 15, ?), int16], Tensor[(2, 15, 6), float32], Tensor[(11, 15, ?), float64]) */;
    %187 = %186.6;
    %188 = cast(%187, dtype="float64") /* ty=Tensor[(11, 15, ?), float64] */;
    %189 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(33, 5), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %190 = cast(meta[relay.Constant][4] /* ty=Tensor[(33, 5), float32] */, dtype="float64") /* ty=Tensor[(33, 5), float64] */;
    %191 = dyn.reshape(%188, %189, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %192 = @func_4544() /* ty=Tensor[(2, 15, 6), float64] */;
    %193 = mod(%190, %191) /* ty=Tensor[(33, 5), float64] */;
    (%192, %193)
  };
  %194() /* ty=(Tensor[(2, 15, 6), float64], Tensor[(33, 5), float64]) */
}

def @func_3716() -> (Tensor[(180), float64],) {
  %197 = fn () -> (Tensor[(180), float64],) {
    %195 = @func_3290() /* ty=(Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float64], Tensor[(180), float64]) */;
    %196 = %195.2;
    (%196,)
  };
  %197() /* ty=(Tensor[(180), float64],) */
}

def @func_479() -> (Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(3, 14, 8), float64], Tensor[(336), float64], Tensor[(180), float64], Tensor[(5, 4, 6), bool], Tensor[(180), float64]) {
  %222 = fn () -> (Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(3, 14, 8), float64], Tensor[(336), float64], Tensor[(180), float64], Tensor[(5, 4, 6), bool], Tensor[(180), float64]) {
    %198 = @func_389() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
    %199 = cast(meta[relay.Constant][5] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
    %200 = cast(meta[relay.Constant][5] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
    %201 = reshape(%199, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), float64] */;
    %202 = reshape(%200, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), float64] */;
    %203 = @func_19(%201, %202) /* ty=(Tensor[(2, 15, 6), float32],) */;
    %204 = cast(meta[relay.Constant][6] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
    %205 = cast(meta[relay.Constant][6] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
    %206 = reshape(%204, newshape=[3, 14, 8]) /* ty=Tensor[(3, 14, 8), float64] */;
    %207 = reshape(%205, newshape=[3, 14, 8]) /* ty=Tensor[(3, 14, 8), float64] */;
    %208 = @func_62(%206, %207) /* ty=(Tensor[(3, 14, 8), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(3, 14, 8), float64]) */;
    %209 = @func_389() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
    %210 = @func_389() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
    %211 = cast(meta[relay.Constant][6] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
    %212 = %208.3;
    %213 = cast(%212, dtype="float64") /* ty=Tensor[(3, 14, 8), float64] */;
    %214 = reshape(%211, newshape=[3, 14, 8]) /* ty=Tensor[(3, 14, 8), float64] */;
    %215 = reshape(%213, newshape=[3, 14, 8]) /* ty=Tensor[(3, 14, 8), float64] */;
    %216 = @func_62(%214, %215) /* ty=(Tensor[(3, 14, 8), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(3, 14, 8), float64]) */;
    %217 = %198.0;
    %218 = %203.0;
    %219 = %209.2;
    %220 = %210.0;
    %221 = %216.2;
    (%217, %218, meta[relay.Constant][5] /* ty=Tensor[(180), float64] */, %212, meta[relay.Constant][6] /* ty=Tensor[(336), float64] */, %219, %220, %221)
  };
  %222() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(3, 14, 8), float64], Tensor[(336), float64], Tensor[(180), float64], Tensor[(5, 4, 6), bool], Tensor[(180), float64]) */
}

def @func_4112() -> (Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(180), float32], Tensor[(336), float64]) {
  @func_4110() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(180), float32], Tensor[(336), float64]) */
}

def @func_6345() -> Tensor[(2, 15, 6), float32] {
  @func_5282() /* ty=Tensor[(2, 15, 6), float32] */
}

def @func_7323(%var_7321: Tensor[(156), float64]) -> (Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(2, 15, 6), float32], Tensor[(156), float64]) {
  @func_7320(%var_7321) /* ty=(Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(2, 15, 6), float32], Tensor[(156), float64]) */
}

def @func_7339() -> (Tensor[(2, 15, 6), float64], Tensor[(4, 6, 4), float64], Tensor[(96), float64]) {
  %223 = cast(meta[relay.Constant][7] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
  %224 = reshape(%223, newshape=[4, 6, 4]) /* ty=Tensor[(4, 6, 4), float64] */;
  %225 = @func_3420() /* ty=Tensor[(2, 15, 6), float64] */;
  %226 = @func_2583(%224) /* ty=Tensor[(4, 6, 4), float64] */;
  (%225, %226, meta[relay.Constant][7] /* ty=Tensor[(96), float64] */)
}

def @func_1764() -> (Tensor[(180), float64], Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(336), float64], Tensor[(14, 4, 15), float64]) {
  %237 = fn () -> (Tensor[(180), float64], Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(336), float64], Tensor[(14, 4, 15), float64]) {
    %227 = @func_1133() /* ty=(Tensor[(180), float64], Tensor[(2, 15, 6), float64]) */;
    %228 = @func_652() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(180), float64], Tensor[(156), float64]) */;
    %229 = @func_389() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
    %230 = @func_1322() /* ty=(Tensor[(336), float64],) */;
    %231 = @func_1157() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
    %232 = %227.0;
    %233 = %228.0;
    %234 = %229.1;
    %235 = %230.0;
    %236 = %231.0;
    (%232, %233, %234, %235, %236)
  };
  %237() /* ty=(Tensor[(180), float64], Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(336), float64], Tensor[(14, 4, 15), float64]) */
}

def @func_1924() -> (Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) {
  @func_1922() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */
}

def @func_4611(%var_4609: float32, %var_4610: Tensor[(8, 15, 3), float32]) -> (Tensor[(8, 15, 3), float32], Tensor[(8, 15, 3), float64]) {
  @func_4607(%var_4609, %var_4610) /* ty=(Tensor[(8, 15, 3), float32], Tensor[(8, 15, 3), float64]) */
}

def @func_1988(%var_1986: int8, %var_1987: Tensor[(15, 5, 3), int8]) -> Tensor[(15, 5, 3), bool] {
  %240 = fn (%var_1953: int8, %var_1954: Tensor[(15, 5, 3), int8]) -> Tensor[(15, 5, 3), bool] {
    %238 = cast(%var_1953, dtype="bool") /* ty=bool */;
    %239 = cast(%var_1954, dtype="bool") /* ty=Tensor[(15, 5, 3), bool] */;
    less_equal(%238, %239) /* ty=Tensor[(15, 5, 3), bool] */
  };
  %240(%var_1986, %var_1987) /* ty=Tensor[(15, 5, 3), bool] */
}

def @func_2586(%var_2584: Tensor[(4, 6, 4), float64]) -> Tensor[(4, 6, 4), float64] {
  @func_2583(%var_2584) /* ty=Tensor[(4, 6, 4), float64] */
}

def @func_2729() -> (Tensor[(14, 4, 15), float64],) {
  @func_2727() /* ty=(Tensor[(14, 4, 15), float64],) */
}

def @func_5401(%var_5377: Tensor[(120), bool]) -> (Tensor[(180), float64], Tensor[(180), float32], Tensor[(120), bool], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float64]) {
  %241 = cast(%var_5377, dtype="bool") /* ty=Tensor[(120), bool] */;
  %242 = reshape(%241, newshape=[5, 4, 6]) /* ty=Tensor[(5, 4, 6), bool] */;
  %243 = @func_1006(%242) /* ty=(Tensor[(5, 4, 6), int8], Tensor[(336), float64], Tensor[(180), float32]) */;
  %244 = @func_4440() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(126), uint8], Tensor[(336), float64], Tensor[(2, 15, 6), float32]) */;
  %245 = %244.4;
  %246 = cast(meta[relay.Constant][8] /* ty=Tensor[(2, 15, 6), float32] */, dtype="float64") /* ty=Tensor[(2, 15, 6), float64] */;
  %247 = shape_of(%245, dtype="int32") /* ty=Tensor[(3), int32] */;
  %248 = cast(%245, dtype="float64") /* ty=Tensor[(2, 15, 6), float64] */;
  %249 = dyn.reshape(%246, %247, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %250 = @func_1992() /* ty=Tensor[(180), float64] */;
  %251 = %243.2;
  %252 = @func_3100() /* ty=Tensor[(2, 15, 6), float64] */;
  %253 = multiply(%248, %249) /* ty=Tensor[(2, 15, 6), float64] */;
  (%250, %251, %var_5377, %252, %253)
}

def @func_5099() -> (Tensor[(2, 15, 6), float32],) {
  %256 = fn () -> (Tensor[(2, 15, 6), float32],) {
    %254 = @func_2374() /* ty=(Tensor[(2, 15, 6), float32],) */;
    %255 = %254.0;
    (%255,)
  };
  %256() /* ty=(Tensor[(2, 15, 6), float32],) */
}

def @func_1382() -> Tensor[(2, 15, 6), float32] {
  %257 = fn () -> Tensor[(2, 15, 6), float32] {
    @func_1312() /* ty=Tensor[(2, 15, 6), float32] */
  };
  %257() /* ty=Tensor[(2, 15, 6), float32] */
}

def @func_6347() -> Tensor[(2, 15, 6), float32] {
  @func_6345() /* ty=Tensor[(2, 15, 6), float32] */
}

def @func_2304() -> Tensor[(2, 15, 6), float32] {
  @func_2302() /* ty=Tensor[(2, 15, 6), float32] */
}

def @func_8452(%var_8433: Tensor[(13, 13, 14), float64], %var_8438: Tensor[(180), float64]) -> (Tensor[(8, 15, 3), float64], Tensor[(8, 60), float32], Tensor[(180), float64], Tensor[(13, 13, 14), uint32]) {
  %258 = cast(meta[relay.Constant][9] /* ty=Tensor[(8, 60), float32] */, dtype="float32") /* ty=Tensor[(8, 60), float32] */;
  %259 = cast(%var_8438, dtype="float64") /* ty=Tensor[(180), float64] */;
  %260 = reshape(%258, newshape=[5, 12, 8]) /* ty=Tensor[(5, 12, 8), float32] */;
  %261 = reshape(%259, newshape=[30, 6]) /* ty=Tensor[(30, 6), float64] */;
  %262 = @func_6242(%260, %261) /* ty=(Tensor[(5, 12, 8), float32], Tensor[(360), float32], Tensor[(5, 12, 8), uint8], Tensor[(8, 15, 3), float64], Tensor[(180), bool], Tensor[(30, 6), float64]) */;
  %263 = cast(%var_8433, dtype="float64") /* ty=Tensor[(13, 13, 14), float64] */;
  %264 = asinh(%263) /* ty=Tensor[(13, 13, 14), float64] */;
  %265 = cast(%var_8433, dtype="uint32") /* ty=Tensor[(13, 13, 14), uint32] */;
  %266 = shape_of(%264, dtype="int32") /* ty=Tensor[(3), int32] */;
  %267 = cast(%264, dtype="uint32") /* ty=Tensor[(13, 13, 14), uint32] */;
  %268 = dyn.reshape(%265, %266, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %269 = %262.3;
  %270 = left_shift(%267, %268) /* ty=Tensor[(13, 13, 14), uint32] */;
  (%269, meta[relay.Constant][9] /* ty=Tensor[(8, 60), float32] */, %var_8438, %270)
}

def @func_1486() -> (Tensor[(180), float64], Tensor[(180), float64], Tensor[(2, 15, 6), float32]) {
  @func_1484() /* ty=(Tensor[(180), float64], Tensor[(180), float64], Tensor[(2, 15, 6), float32]) */
}

def @func_7474(%var_7472: Tensor[(1800), uint32], %var_7473: Tensor[(1800), uint32]) -> (Tensor[(2, 15, 6), float64], Tensor[(156), float64], Tensor[(2, 15, 6), float32], Tensor[(1, 12, 13), float64], Tensor[(2, 15, 6), float32], Tensor[(1800), float64]) {
  @func_7470(%var_7472, %var_7473) /* ty=(Tensor[(2, 15, 6), float64], Tensor[(156), float64], Tensor[(2, 15, 6), float32], Tensor[(1, 12, 13), float64], Tensor[(2, 15, 6), float32], Tensor[(1800), float64]) */
}

def @func_5161() -> (Tensor[(2, 15, 6), float32],) {
  @func_5159() /* ty=(Tensor[(2, 15, 6), float32],) */
}

def @func_7916() -> (Tensor[(2, 15, 6), float64], Tensor[(5, 4, 6), int8], Tensor[(1, 640), int32], Tensor[(15, 1, 5), float32], Tensor[(10, 12, 15), uint32], Tensor[(1800), uint32], Tensor[(2, 15, 6), float32]) {
  %287 = fn () -> (Tensor[(2, 15, 6), float64], Tensor[(5, 4, 6), int8], Tensor[(1, 640), int32], Tensor[(15, 1, 5), float32], Tensor[(10, 12, 15), uint32], Tensor[(1800), uint32], Tensor[(2, 15, 6), float32]) {
    %271 = @func_2429() /* ty=(Tensor[(2, 15, 6), float64], Tensor[(3, 14, 8), float64], Tensor[(3, 14, 8), float32]) */;
    %272 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 640), int32] */, dtype="int32") /* ty=Tensor[(1, 640), int32] */;
    %273 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 640), int32] */, dtype="int32") /* ty=Tensor[(1, 640), int32] */;
    %274 = reshape(%272, newshape=[8, 10, 8]) /* ty=Tensor[(8, 10, 8), int32] */;
    %275 = reshape(%273, newshape=[8, 10, 8]) /* ty=Tensor[(8, 10, 8), int32] */;
    %276 = @func_1080(%274, %275) /* ty=(Tensor[(8, 10, 8), int32], Tensor[(180), float64], Tensor[(5, 4, 6), int8], Tensor[(120), bool], Tensor[(180), float64], Tensor[(8, 10, 8), bool], Tensor[(2, 15, 6), float32]) */;
    %277 = @func_2048() /* ty=(Tensor[(15, 1, 5), float32], Tensor[(2, 15, 6), float32]) */;
    %278 = cast(meta[relay.Constant][11] /* ty=Tensor[(1800), uint32] */, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
    %279 = reshape(%278, newshape=[10, 12, 15]) /* ty=Tensor[(10, 12, 15), uint32] */;
    %280 = @func_4283(%279) /* ty=(Tensor[(10, 12, 15), uint32], Tensor[(2, 15, 6), float32]) */;
    %281 = @func_2374() /* ty=(Tensor[(2, 15, 6), float32],) */;
    %282 = %271.0;
    %283 = %276.2;
    %284 = %277.0;
    %285 = %280.0;
    %286 = %281.0;
    (%282, %283, meta[relay.Constant][10] /* ty=Tensor[(1, 640), int32] */, %284, %285, meta[relay.Constant][11] /* ty=Tensor[(1800), uint32] */, %286)
  };
  %287() /* ty=(Tensor[(2, 15, 6), float64], Tensor[(5, 4, 6), int8], Tensor[(1, 640), int32], Tensor[(15, 1, 5), float32], Tensor[(10, 12, 15), uint32], Tensor[(1800), uint32], Tensor[(2, 15, 6), float32]) */
}

def @func_6828() -> Tensor[(3, 14, 8), float32] {
  %288 = fn () -> Tensor[(3, 14, 8), float32] {
    @func_4038() /* ty=Tensor[(3, 14, 8), float32] */
  };
  %288() /* ty=Tensor[(3, 14, 8), float32] */
}

def @func_3057() -> (Tensor[(2, 15, 6), float32],) {
  %289 = @func_937() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(336, 1), float64]) */;
  %290 = %289.0;
  (%290,)
}

def @func_4479() -> (Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float64]) {
  %291 = @func_4344() /* ty=(Tensor[(2, 15, 6), float64],) */;
  %292 = %291.0;
  %293 = @func_3100() /* ty=Tensor[(2, 15, 6), float64] */;
  (%292, %293)
}

def @func_3769() -> (Tensor[(336, 1), float64], Tensor[(180), float64]) {
  %296 = fn () -> (Tensor[(336, 1), float64], Tensor[(180), float64]) {
    %294 = @func_2067() /* ty=Tensor[(336, 1), float64] */;
    %295 = @func_1992() /* ty=Tensor[(180), float64] */;
    (%294, %295)
  };
  %296() /* ty=(Tensor[(336, 1), float64], Tensor[(180), float64]) */
}

def @func_2049() -> (Tensor[(15, 1, 5), float32], Tensor[(2, 15, 6), float32]) {
  %301 = fn () -> (Tensor[(15, 1, 5), float32], Tensor[(2, 15, 6), float32]) {
    %297 = cast(meta[relay.Constant][12] /* ty=Tensor[(15, 1, 5), float32] */, dtype="float32") /* ty=Tensor[(15, 1, 5), float32] */;
    %298 = @func_1157() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
    %299 = erf(%297) /* ty=Tensor[(15, 1, 5), float32] */;
    %300 = %298.1;
    (%299, %300)
  };
  %301() /* ty=(Tensor[(15, 1, 5), float32], Tensor[(2, 15, 6), float32]) */
}

def @func_3100() -> Tensor[(2, 15, 6), float64] {
  %302 = @func_389() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
  %303 = %302.1;
  %304 = cast(%303, dtype="float64") /* ty=Tensor[(2, 15, 6), float64] */;
  log(%304) /* ty=Tensor[(2, 15, 6), float64] */
}

def @func_3421() -> Tensor[(2, 15, 6), float64] {
  %305 = fn () -> Tensor[(2, 15, 6), float64] {
    @func_3100() /* ty=Tensor[(2, 15, 6), float64] */
  };
  %305() /* ty=Tensor[(2, 15, 6), float64] */
}

def @func_6515() -> (Tensor[(2, 15, 6), float64], Tensor[(5, 4, 6), bool], Tensor[(14, 4, 11), float64], Tensor[(616), float64]) {
  %306 = @func_652() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(180), float64], Tensor[(156), float64]) */;
  %307 = cast(meta[relay.Constant][13] /* ty=Tensor[(616), float64] */, dtype="float64") /* ty=Tensor[(616), float64] */;
  %308 = reshape(%307, newshape=[14, 4, 11]) /* ty=Tensor[(14, 4, 11), float64] */;
  %309 = @func_5811(%308) /* ty=(Tensor[(14, 4, 11), float64],) */;
  %310 = @func_2267() /* ty=Tensor[(2, 15, 6), float64] */;
  %311 = %306.0;
  %312 = %309.0;
  (%310, %311, %312, meta[relay.Constant][13] /* ty=Tensor[(616), float64] */)
}

def @func_2067() -> Tensor[(336, 1), float64] {
  %313 = @func_1800() /* ty=(Tensor[(336, 1), float64],) */;
  %313.0
}

def @func_2583(%var_2567: Tensor[(4, 6, 4), float64]) -> Tensor[(4, 6, 4), float64] {
  %314 = cast(meta[relay.Constant][14] /* ty=Tensor[(4, 6, 4), float64] */, dtype="float64") /* ty=Tensor[(4, 6, 4), float64] */;
  %315 = shape_of(%var_2567, dtype="int32") /* ty=Tensor[(3), int32] */;
  %316 = cast(%var_2567, dtype="float64") /* ty=Tensor[(4, 6, 4), float64] */;
  %317 = dyn.reshape(%314, %315, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%316, %317) /* ty=Tensor[(4, 6, 4), float64] */
}

def @func_4643(%var_4641: int64, %var_4642: Tensor[(1, 13, 3), int64]) -> (Tensor[(1, 13, 3), int64],) {
  @func_4639(%var_4641, %var_4642) /* ty=(Tensor[(1, 13, 3), int64],) */
}

def @func_6179() -> (Tensor[(180), float64],) {
  @func_6177() /* ty=(Tensor[(180), float64],) */
}

def @func_5608(%var_5606: Tensor[(180), float64]) -> (Tensor[(180), bool],) {
  @func_5605(%var_5606) /* ty=(Tensor[(180), bool],) */
}

def @func_7182() -> (Tensor[(180), float64], Tensor[(336), float64]) {
  %323 = fn () -> (Tensor[(180), float64], Tensor[(336), float64]) {
    %318 = @func_2194() /* ty=Tensor[(180), float64] */;
    %319 = cast(%318, dtype="float32") /* ty=Tensor[(180), float32] */;
    %320 = reshape(%319, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), float32] */;
    %321 = @func_867(%320) /* ty=(Tensor[(2, 15, 6), float32], Tensor[(5, 4, 6), bool], Tensor[(3, 14, 8), float64], Tensor[(336), float64], Tensor[(3, 14, 8), float64]) */;
    %322 = %321.3;
    (%318, %322)
  };
  %323() /* ty=(Tensor[(180), float64], Tensor[(336), float64]) */
}

def @func_66(%var_64: Tensor[(3, 14, 8), float64], %var_65: Tensor[(3, 14, 8), float64]) -> (Tensor[(3, 14, 8), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(3, 14, 8), float64]) {
  @func_62(%var_64, %var_65) /* ty=(Tensor[(3, 14, 8), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(3, 14, 8), float64]) */
}

def @func_3131() -> (Tensor[(2, 15, 6), float32], Tensor[(180), float64]) {
  @func_3129() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */
}

def @func_6485() -> (Tensor[(156), float64], Tensor[(336, 12), float32]) {
  @func_6483() /* ty=(Tensor[(156), float64], Tensor[(336, 12), float32]) */
}

def @func_389() -> (Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) {
  %324 = cast(meta[relay.Constant][16] /* ty=Tensor[(5, 4, 6), bool] */, dtype="bool") /* ty=Tensor[(5, 4, 6), bool] */;
  %325 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(5, 4, 6), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %326 = cast(meta[relay.Constant][15] /* ty=Tensor[(5, 4, 6), bool] */, dtype="bool") /* ty=Tensor[(5, 4, 6), bool] */;
  %327 = dyn.reshape(%324, %325, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %328 = cast(meta[relay.Constant][17] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %329 = cast(meta[relay.Constant][17] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %330 = reshape(%328, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), float64] */;
  %331 = reshape(%329, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), float64] */;
  %332 = @func_19(%330, %331) /* ty=(Tensor[(2, 15, 6), float32],) */;
  %333 = logical_and(%326, %327) /* ty=Tensor[(5, 4, 6), bool] */;
  %334 = %332.0;
  (%333, %334, meta[relay.Constant][17] /* ty=Tensor[(180), float64] */)
}

def @func_6177() -> (Tensor[(180), float64],) {
  %335 = @func_5038() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
  %336 = %335.2;
  (%336,)
}

def @func_7226() -> Tensor[(2, 15, 6), float32] {
  %338 = fn () -> Tensor[(2, 15, 6), float32] {
    %337 = @func_3398() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */;
    %337.1
  };
  %338() /* ty=Tensor[(2, 15, 6), float32] */
}

def @func_867(%var_830: Tensor[(2, 15, 6), float32]) -> (Tensor[(2, 15, 6), float32], Tensor[(5, 4, 6), bool], Tensor[(3, 14, 8), float64], Tensor[(336), float64], Tensor[(3, 14, 8), float64]) {
  %339 = @func_681() /* ty=(Tensor[(2, 15, 6), float32],) */;
  %340 = %339.0;
  %341 = cast(%var_830, dtype="float32") /* ty=Tensor[(2, 15, 6), float32] */;
  %342 = shape_of(%340, dtype="int32") /* ty=Tensor[(3), int32] */;
  %343 = cast(%340, dtype="float32") /* ty=Tensor[(2, 15, 6), float32] */;
  %344 = dyn.reshape(%341, %342, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %345 = @func_389() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
  %346 = %345.0;
  %347 = cast(meta[relay.Constant][18] /* ty=Tensor[(5, 4, 6), bool] */, dtype="bool") /* ty=Tensor[(5, 4, 6), bool] */;
  %348 = shape_of(%346, dtype="int32") /* ty=Tensor[(3), int32] */;
  %349 = cast(%346, dtype="bool") /* ty=Tensor[(5, 4, 6), bool] */;
  %350 = dyn.reshape(%347, %348, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %351 = cast(meta[relay.Constant][19] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %352 = cast(meta[relay.Constant][19] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %353 = reshape(%351, newshape=[3, 14, 8]) /* ty=Tensor[(3, 14, 8), float64] */;
  %354 = reshape(%352, newshape=[3, 14, 8]) /* ty=Tensor[(3, 14, 8), float64] */;
  %355 = @func_62(%353, %354) /* ty=(Tensor[(3, 14, 8), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(3, 14, 8), float64]) */;
  %356 = %355.0;
  %357 = cast(%356, dtype="float64") /* ty=Tensor[(3, 14, 8), float64] */;
  %358 = cast(%356, dtype="float64") /* ty=Tensor[(3, 14, 8), float64] */;
  %359 = reshape(%357, newshape=[3, 14, 8]) /* ty=Tensor[(3, 14, 8), float64] */;
  %360 = reshape(%358, newshape=[3, 14, 8]) /* ty=Tensor[(3, 14, 8), float64] */;
  %361 = @func_62(%359, %360) /* ty=(Tensor[(3, 14, 8), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(3, 14, 8), float64]) */;
  %362 = minimum(%343, %344) /* ty=Tensor[(2, 15, 6), float32] */;
  %363 = greater(%349, %350) /* ty=Tensor[(5, 4, 6), bool] */;
  %364 = %361.0;
  (%362, %363, %356, meta[relay.Constant][19] /* ty=Tensor[(336), float64] */, %364)
}

def @func_3453() -> (Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) {
  @func_3451() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */
}

def @func_3588() -> (Tensor[(2, 15, 6), bool],) {
  %371 = fn () -> (Tensor[(2, 15, 6), bool],) {
    %365 = @func_2302() /* ty=Tensor[(2, 15, 6), float32] */;
    %366 = cast(meta[relay.Constant][20] /* ty=Tensor[(2, 15, 6), float32] */, dtype="bool") /* ty=Tensor[(2, 15, 6), bool] */;
    %367 = shape_of(%365, dtype="int32") /* ty=Tensor[(3), int32] */;
    %368 = cast(%365, dtype="bool") /* ty=Tensor[(2, 15, 6), bool] */;
    %369 = dyn.reshape(%366, %367, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %370 = not_equal(%368, %369) /* ty=Tensor[(2, 15, 6), bool] */;
    (%370,)
  };
  %371() /* ty=(Tensor[(2, 15, 6), bool],) */
}

def @func_4531(%var_4529: Tensor[(16, 5, 1), float64], %var_4530: Tensor[(336, 12), float64]) -> (Tensor[(16, 5, 1), float64], Tensor[(2, 15, 6), float64], Tensor[(336, 12), uint64], Tensor[(16, 5, 9), uint8]) {
  @func_4527(%var_4529, %var_4530) /* ty=(Tensor[(16, 5, 1), float64], Tensor[(2, 15, 6), float64], Tensor[(336, 12), uint64], Tensor[(16, 5, 9), uint8]) */
}

def @func_4545() -> Tensor[(2, 15, 6), float64] {
  %372 = fn () -> Tensor[(2, 15, 6), float64] {
    @func_3420() /* ty=Tensor[(2, 15, 6), float64] */
  };
  %372() /* ty=Tensor[(2, 15, 6), float64] */
}

def @func_6962() -> (Tensor[(336, 1), float64], Tensor[(180), bool], Tensor[(180), float64], Tensor[(8, 15, 3), float32], float32, Tensor[(360), float32], Tensor[(2, 15, 6), float64]) {
  %373 = cast(meta[relay.Constant][21] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %374 = reshape(%373, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %375 = @func_5605(%374) /* ty=(Tensor[(180), bool],) */;
  %376 = cast(4.94737f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %377 = cast(meta[relay.Constant][22] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
  %378 = reshape(%376, newshape=[]) /* ty=float32 */;
  %379 = reshape(%377, newshape=[8, 15, 3]) /* ty=Tensor[(8, 15, 3), float32] */;
  %380 = @func_4607(%378, %379) /* ty=(Tensor[(8, 15, 3), float32], Tensor[(8, 15, 3), float64]) */;
  %381 = @func_3913() /* ty=Tensor[(336, 1), float64] */;
  %382 = %375.0;
  %383 = %380.0;
  %384 = @func_3420() /* ty=Tensor[(2, 15, 6), float64] */;
  (%381, %382, meta[relay.Constant][21] /* ty=Tensor[(180), float64] */, %383, 4.94737f /* ty=float32 */, meta[relay.Constant][22] /* ty=Tensor[(360), float32] */, %384)
}

def @func_4819(%var_4811: Tensor[(360), float32]) -> (Tensor[(180), float64], Tensor[(14, 4, 15), float64], Tensor[(8, 15, 3), float32], float32, Tensor[(360), float32]) {
  %385 = @func_3715() /* ty=(Tensor[(180), float64],) */;
  %386 = @func_1763() /* ty=(Tensor[(180), float64], Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(336), float64], Tensor[(14, 4, 15), float64]) */;
  %387 = cast(0.81885f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %388 = cast(%var_4811, dtype="float32") /* ty=Tensor[(360), float32] */;
  %389 = reshape(%387, newshape=[]) /* ty=float32 */;
  %390 = reshape(%388, newshape=[8, 15, 3]) /* ty=Tensor[(8, 15, 3), float32] */;
  %391 = @func_4607(%389, %390) /* ty=(Tensor[(8, 15, 3), float32], Tensor[(8, 15, 3), float64]) */;
  %392 = %385.0;
  %393 = %386.4;
  %394 = %391.0;
  (%392, %393, %394, 0.81885f /* ty=float32 */, %var_4811)
}

def @func_1159() -> (Tensor[(14, 4, 15), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) {
  @func_1157() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */
}

def @func_7399() -> (Tensor[(180), float64],) {
  %397 = fn () -> (Tensor[(180), float64],) {
    %395 = @func_1671() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(180), float32], Tensor[(120), bool], Tensor[(180), float64], Tensor[(156), float64]) */;
    %396 = %395.3;
    (%396,)
  };
  %397() /* ty=(Tensor[(180), float64],) */
}

def @func_2869(%var_2844: Tensor[(7, 3, 6), uint8]) -> (Tensor[(7, 3, 6), bool], Tensor[(14, 4, 15), float64], Tensor[(2, 15, 6), float32], Tensor[(336), float64], Tensor[(336, 12), float32]) {
  %398 = cast(%var_2844, dtype="bool") /* ty=Tensor[(7, 3, 6), bool] */;
  %399 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(7, 3, 6), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %400 = cast(meta[relay.Constant][23] /* ty=Tensor[(7, 3, 6), uint8] */, dtype="bool") /* ty=Tensor[(7, 3, 6), bool] */;
  %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %402 = @func_1157() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
  %403 = cast(meta[relay.Constant][24] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %404 = cast(meta[relay.Constant][24] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %405 = reshape(%403, newshape=[3, 14, 8]) /* ty=Tensor[(3, 14, 8), float64] */;
  %406 = reshape(%404, newshape=[3, 14, 8]) /* ty=Tensor[(3, 14, 8), float64] */;
  %407 = @func_62(%405, %406) /* ty=(Tensor[(3, 14, 8), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(3, 14, 8), float64]) */;
  %408 = @func_2356() /* ty=(Tensor[(336, 12), float32],) */;
  %409 = greater(%400, %401) /* ty=Tensor[(7, 3, 6), bool] */;
  %410 = %402.0;
  %411 = %407.1;
  %412 = %408.0;
  (%409, %410, %411, meta[relay.Constant][24] /* ty=Tensor[(336), float64] */, %412)
}

def @func_737(%var_736: Tensor[(2, 15, 6), float32]) -> (Tensor[(2, 15, 6), float64],) {
  %420 = fn (%var_727: Tensor[(2, 15, 6), float32]) -> (Tensor[(2, 15, 6), float64],) {
    %413 = @func_681() /* ty=(Tensor[(2, 15, 6), float32],) */;
    %414 = %413.0;
    %415 = cast(%var_727, dtype="float64") /* ty=Tensor[(2, 15, 6), float64] */;
    %416 = shape_of(%414, dtype="int32") /* ty=Tensor[(3), int32] */;
    %417 = cast(%414, dtype="float64") /* ty=Tensor[(2, 15, 6), float64] */;
    %418 = dyn.reshape(%415, %416, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %419 = mod(%417, %418) /* ty=Tensor[(2, 15, 6), float64] */;
    (%419,)
  };
  %420(%var_736) /* ty=(Tensor[(2, 15, 6), float64],) */
}

def @func_7287() -> Tensor[(180), float64] {
  %421 = fn () -> Tensor[(180), float64] {
    @func_2194() /* ty=Tensor[(180), float64] */
  };
  %421() /* ty=Tensor[(180), float64] */
}

def @func_8456(%var_8454: Tensor[(13, 13, 14), float64], %var_8455: Tensor[(180), float64]) -> (Tensor[(8, 15, 3), float64], Tensor[(8, 60), float32], Tensor[(180), float64], Tensor[(13, 13, 14), uint32]) {
  @func_8452(%var_8454, %var_8455) /* ty=(Tensor[(8, 15, 3), float64], Tensor[(8, 60), float32], Tensor[(180), float64], Tensor[(13, 13, 14), uint32]) */
}

def @func_6246(%var_6244: Tensor[(5, 12, 8), float32], %var_6245: Tensor[(30, 6), float64]) -> (Tensor[(5, 12, 8), float32], Tensor[(360), float32], Tensor[(5, 12, 8), uint8], Tensor[(8, 15, 3), float64], Tensor[(180), bool], Tensor[(30, 6), float64]) {
  @func_6242(%var_6244, %var_6245) /* ty=(Tensor[(5, 12, 8), float32], Tensor[(360), float32], Tensor[(5, 12, 8), uint8], Tensor[(8, 15, 3), float64], Tensor[(180), bool], Tensor[(30, 6), float64]) */
}

def @func_3243(%var_3241: Tensor[(2, 3, 15), float32], %var_3242: Tensor[(2, 3, 15), float32]) -> (Tensor[(2, 15, 6), float32], Tensor[(126, 1), uint8], Tensor[(2, 3, 15), float64], Tensor[(2, 3, 15), bool], Tensor[(2, 3, 15), float32], Tensor[(180), float64]) {
  @func_3239(%var_3241, %var_3242) /* ty=(Tensor[(2, 15, 6), float32], Tensor[(126, 1), uint8], Tensor[(2, 3, 15), float64], Tensor[(2, 3, 15), bool], Tensor[(2, 3, 15), float32], Tensor[(180), float64]) */
}

def @func_1006(%var_986: Tensor[(5, 4, 6), bool]) -> (Tensor[(5, 4, 6), int8], Tensor[(336), float64], Tensor[(180), float32]) {
  %422 = @func_652() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(180), float64], Tensor[(156), float64]) */;
  %423 = %422.0;
  %424 = cast(%var_986, dtype="int8") /* ty=Tensor[(5, 4, 6), int8] */;
  %425 = shape_of(%423, dtype="int32") /* ty=Tensor[(3), int32] */;
  %426 = cast(%423, dtype="int8") /* ty=Tensor[(5, 4, 6), int8] */;
  %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %428 = cast(meta[relay.Constant][25] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %429 = reshape(%428, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), float32] */;
  %430 = @func_867(%429) /* ty=(Tensor[(2, 15, 6), float32], Tensor[(5, 4, 6), bool], Tensor[(3, 14, 8), float64], Tensor[(336), float64], Tensor[(3, 14, 8), float64]) */;
  %431 = bitwise_xor(%426, %427) /* ty=Tensor[(5, 4, 6), int8] */;
  %432 = %430.3;
  (%431, %432, meta[relay.Constant][25] /* ty=Tensor[(180), float32] */)
}

def @func_3398() -> (Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) {
  %433 = @func_681() /* ty=(Tensor[(2, 15, 6), float32],) */;
  %434 = @func_3057() /* ty=(Tensor[(2, 15, 6), float32],) */;
  %435 = %433.0;
  %436 = %434.0;
  (%435, %436)
}

def @func_7203() -> (Tensor[(2, 15, 6), float64],) {
  %437 = @func_2429() /* ty=(Tensor[(2, 15, 6), float64], Tensor[(3, 14, 8), float64], Tensor[(3, 14, 8), float32]) */;
  %438 = %437.0;
  (%438,)
}

def @func_2501() -> (Tensor[(180), float64], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) {
  @func_2499() /* ty=(Tensor[(180), float64], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */
}

def @func_3927() -> (Tensor[(5, 4, 6), bool],) {
  %441 = fn () -> (Tensor[(5, 4, 6), bool],) {
    %439 = @func_389() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
    %440 = %439.0;
    (%440,)
  };
  %441() /* ty=(Tensor[(5, 4, 6), bool],) */
}

def @func_3400() -> (Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) {
  @func_3398() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */
}

def @func_4186() -> Tensor[(2, 15, 6), float64] {
  @func_4184() /* ty=Tensor[(2, 15, 6), float64] */
}

def @func_2011() -> (Tensor[(180), float64],) {
  %442 = @func_937() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(336, 1), float64]) */;
  %443 = %442.1;
  (%443,)
}

def @func_1324() -> (Tensor[(336), float64],) {
  @func_1322() /* ty=(Tensor[(336), float64],) */
}

def @func_8317(%var_8316: Tensor[(7, 3, 4), float32]) -> (Tensor[(7, 3, 4), float32],) {
  %446 = fn (%var_8304: Tensor[(7, 3, 4), float32]) -> (Tensor[(7, 3, 4), float32],) {
    %444 = cast(%var_8304, dtype="float32") /* ty=Tensor[(7, 3, 4), float32] */;
    %445 = cos(%444) /* ty=Tensor[(7, 3, 4), float32] */;
    (%445,)
  };
  %446(%var_8316) /* ty=(Tensor[(7, 3, 4), float32],) */
}

def @func_391() -> (Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) {
  @func_389() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */
}

def @func_1313() -> Tensor[(2, 15, 6), float32] {
  %448 = fn () -> Tensor[(2, 15, 6), float32] {
    %447 = @func_937() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(336, 1), float64]) */;
    %447.0
  };
  %448() /* ty=Tensor[(2, 15, 6), float32] */
}

def @func_4894(%var_4893: Tensor[(336, 16), float64]) -> (Tensor[(2, 15, 6), float32], Tensor[(336, 16), int64]) {
  %454 = fn (%var_4885: Tensor[(336, 16), float64]) -> (Tensor[(2, 15, 6), float32], Tensor[(336, 16), int64]) {
    %449 = @func_2067() /* ty=Tensor[(336, 1), float64] */;
    %450 = cast(%449, dtype="int64") /* ty=Tensor[(336, 1), int64] */;
    %451 = cast(%var_4885, dtype="int64") /* ty=Tensor[(336, 16), int64] */;
    %452 = @func_1381() /* ty=Tensor[(2, 15, 6), float32] */;
    %453 = right_shift(%450, %451) /* ty=Tensor[(336, 16), int64] */;
    (%452, %453)
  };
  %454(%var_4893) /* ty=(Tensor[(2, 15, 6), float32], Tensor[(336, 16), int64]) */
}

def @func_1672() -> (Tensor[(2, 15, 6), float32], Tensor[(180), float32], Tensor[(120), bool], Tensor[(180), float64], Tensor[(156), float64]) {
  %464 = fn () -> (Tensor[(2, 15, 6), float32], Tensor[(180), float32], Tensor[(120), bool], Tensor[(180), float64], Tensor[(156), float64]) {
    %455 = cast(meta[relay.Constant][26] /* ty=Tensor[(120), bool] */, dtype="bool") /* ty=Tensor[(120), bool] */;
    %456 = reshape(%455, newshape=[5, 4, 6]) /* ty=Tensor[(5, 4, 6), bool] */;
    %457 = @func_1006(%456) /* ty=(Tensor[(5, 4, 6), int8], Tensor[(336), float64], Tensor[(180), float32]) */;
    %458 = cast(meta[relay.Constant][27] /* ty=Tensor[(156), float64] */, dtype="float64") /* ty=Tensor[(156), float64] */;
    %459 = reshape(%458, newshape=[1, 12, 13]) /* ty=Tensor[(1, 12, 13), float64] */;
    %460 = @func_159(%459) /* ty=(Tensor[(1, 12, 13), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
    %461 = @func_1312() /* ty=Tensor[(2, 15, 6), float32] */;
    %462 = %457.2;
    %463 = %460.2;
    (%461, %462, meta[relay.Constant][26] /* ty=Tensor[(120), bool] */, %463, meta[relay.Constant][27] /* ty=Tensor[(156), float64] */)
  };
  %464() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(180), float32], Tensor[(120), bool], Tensor[(180), float64], Tensor[(156), float64]) */
}

def @func_2196() -> Tensor[(180), float64] {
  @func_2194() /* ty=Tensor[(180), float64] */
}

def @func_8006() -> (Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32], Tensor[(3, 14, 8), float64]) {
  %465 = @func_2834() /* ty=(Tensor[(2, 15, 6), float32],) */;
  %466 = @func_2821() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */;
  %467 = @func_1684() /* ty=Tensor[(2, 15, 6), float64] */;
  %468 = cast(%467, dtype="float32") /* ty=Tensor[(2, 15, 6), float32] */;
  %469 = reshape(%468, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), float32] */;
  %470 = @func_867(%469) /* ty=(Tensor[(2, 15, 6), float32], Tensor[(5, 4, 6), bool], Tensor[(3, 14, 8), float64], Tensor[(336), float64], Tensor[(3, 14, 8), float64]) */;
  %471 = @func_4184() /* ty=Tensor[(2, 15, 6), float64] */;
  %472 = @func_4184() /* ty=Tensor[(2, 15, 6), float64] */;
  %473 = %465.0;
  %474 = %466.0;
  %475 = %470.4;
  (%471, %472, %473, %467, %474, %475)
}

def @func_3059() -> (Tensor[(2, 15, 6), float32],) {
  @func_3057() /* ty=(Tensor[(2, 15, 6), float32],) */
}

def @func_62(%var_40: Tensor[(3, 14, 8), float64], %var_41: Tensor[(3, 14, 8), float64]) -> (Tensor[(3, 14, 8), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(3, 14, 8), float64]) {
  %476 = cast(%var_41, dtype="float64") /* ty=Tensor[(3, 14, 8), float64] */;
  %477 = shape_of(%var_40, dtype="int32") /* ty=Tensor[(3), int32] */;
  %478 = cast(%var_40, dtype="float64") /* ty=Tensor[(3, 14, 8), float64] */;
  %479 = dyn.reshape(%476, %477, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %480 = cast(meta[relay.Constant][28] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %481 = cast(meta[relay.Constant][28] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %482 = reshape(%480, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), float64] */;
  %483 = reshape(%481, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), float64] */;
  %484 = @func_19(%482, %483) /* ty=(Tensor[(2, 15, 6), float32],) */;
  %485 = cast(%var_40, dtype="float64") /* ty=Tensor[(3, 14, 8), float64] */;
  %486 = maximum(%478, %479) /* ty=Tensor[(3, 14, 8), float64] */;
  %487 = %484.0;
  %488 = sqrt(%485) /* ty=Tensor[(3, 14, 8), float64] */;
  (%486, %487, meta[relay.Constant][28] /* ty=Tensor[(180), float64] */, %488)
}

def @func_3312() -> (Tensor[(336, 1), float32],) {
  %492 = fn () -> (Tensor[(336, 1), float32],) {
    %489 = @func_2067() /* ty=Tensor[(336, 1), float64] */;
    %490 = cast(%489, dtype="float32") /* ty=Tensor[(336, 1), float32] */;
    %491 = log10(%490) /* ty=Tensor[(336, 1), float32] */;
    (%491,)
  };
  %492() /* ty=(Tensor[(336, 1), float32],) */
}

def @func_6421() -> (Tensor[(5, 4, 6), bool], Tensor[(8, 5, 11), float64]) {
  %493 = @func_3926() /* ty=(Tensor[(5, 4, 6), bool],) */;
  %494 = cast(meta[relay.Constant][29] /* ty=Tensor[(8, 5, 11), float32] */, dtype="float32") /* ty=Tensor[(8, 5, 11), float32] */;
  %495 = asin(%494) /* ty=Tensor[(8, 5, 11), float32] */;
  %496 = cast(%495, dtype="float64") /* ty=Tensor[(8, 5, 11), float64] */;
  %497 = %493.0;
  %498 = cosh(%496) /* ty=Tensor[(8, 5, 11), float64] */;
  (%497, %498)
}

def @func_7341() -> (Tensor[(2, 15, 6), float64], Tensor[(4, 6, 4), float64], Tensor[(96), float64]) {
  @func_7339() /* ty=(Tensor[(2, 15, 6), float64], Tensor[(4, 6, 4), float64], Tensor[(96), float64]) */
}

def @func_8215(%var_8213: Tensor[(16, 15, 10), float32]) -> (Tensor[(16, 15, 10), bool], Tensor[(14, 4, 15), float64]) {
  @func_8212(%var_8213) /* ty=(Tensor[(16, 15, 10), bool], Tensor[(14, 4, 15), float64]) */
}

def @func_6483() -> (Tensor[(156), float64], Tensor[(336, 12), float32]) {
  %499 = @func_1671() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(180), float32], Tensor[(120), bool], Tensor[(180), float64], Tensor[(156), float64]) */;
  %500 = @func_2356() /* ty=(Tensor[(336, 12), float32],) */;
  %501 = %499.4;
  %502 = %500.0;
  (%501, %502)
}

def @func_8285() -> (Tensor[(2, 15, 6), float32],) {
  %505 = fn () -> (Tensor[(2, 15, 6), float32],) {
    %503 = @func_1568() /* ty=(Tensor[(180), float64], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32]) */;
    %504 = %503.2;
    (%504,)
  };
  %505() /* ty=(Tensor[(2, 15, 6), float32],) */
}

def @func_2872(%var_2870: Tensor[(7, 3, 6), uint8]) -> (Tensor[(7, 3, 6), bool], Tensor[(14, 4, 15), float64], Tensor[(2, 15, 6), float32], Tensor[(336), float64], Tensor[(336, 12), float32]) {
  @func_2869(%var_2870) /* ty=(Tensor[(7, 3, 6), bool], Tensor[(14, 4, 15), float64], Tensor[(2, 15, 6), float32], Tensor[(336), float64], Tensor[(336, 12), float32]) */
}

def @func_161(%var_160: Tensor[(1, 12, 13), float64]) -> (Tensor[(1, 12, 13), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) {
  %514 = fn (%var_143: Tensor[(1, 12, 13), float64]) -> (Tensor[(1, 12, 13), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) {
    %506 = cast(%var_143, dtype="float64") /* ty=Tensor[(1, 12, 13), float64] */;
    %507 = cast(meta[relay.Constant][30] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
    %508 = cast(meta[relay.Constant][30] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
    %509 = reshape(%507, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), float64] */;
    %510 = reshape(%508, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), float64] */;
    %511 = @func_19(%509, %510) /* ty=(Tensor[(2, 15, 6), float32],) */;
    %512 = log10(%506) /* ty=Tensor[(1, 12, 13), float64] */;
    %513 = %511.0;
    (%512, %513, meta[relay.Constant][30] /* ty=Tensor[(180), float64] */)
  };
  %514(%var_160) /* ty=(Tensor[(1, 12, 13), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */
}

def @func_4038() -> Tensor[(3, 14, 8), float32] {
  %515 = @func_2429() /* ty=(Tensor[(2, 15, 6), float64], Tensor[(3, 14, 8), float64], Tensor[(3, 14, 8), float32]) */;
  %515.2
}

def @func_5283() -> Tensor[(2, 15, 6), float32] {
  %517 = fn () -> Tensor[(2, 15, 6), float32] {
    %516 = @func_1922() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */;
    %516.2
  };
  %517() /* ty=Tensor[(2, 15, 6), float32] */
}

def @func_6423() -> (Tensor[(5, 4, 6), bool], Tensor[(8, 5, 11), float64]) {
  @func_6421() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(8, 5, 11), float64]) */
}

def @func_6531() -> (Tensor[(13, 13, 8), bool], Tensor[(2, 15, 6), float64]) {
  %518 = cast(meta[relay.Constant][31] /* ty=Tensor[(13, 13, 8), float32] */, dtype="float32") /* ty=Tensor[(13, 13, 8), float32] */;
  %519 = asin(%518) /* ty=Tensor[(13, 13, 8), float32] */;
  %520 = cast(meta[relay.Constant][31] /* ty=Tensor[(13, 13, 8), float32] */, dtype="bool") /* ty=Tensor[(13, 13, 8), bool] */;
  %521 = shape_of(%519, dtype="int32") /* ty=Tensor[(3), int32] */;
  %522 = cast(%519, dtype="bool") /* ty=Tensor[(13, 13, 8), bool] */;
  %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %524 = equal(%522, %523) /* ty=Tensor[(13, 13, 8), bool] */;
  %525 = @func_1684() /* ty=Tensor[(2, 15, 6), float64] */;
  (%524, %525)
}

def @func_8008() -> (Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32], Tensor[(3, 14, 8), float64]) {
  @func_8006() /* ty=(Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32], Tensor[(3, 14, 8), float64]) */
}

def @func_5159() -> (Tensor[(2, 15, 6), float32],) {
  %526 = @func_1157() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
  %527 = %526.1;
  (%527,)
}

def @func_7113(%var_7088: int64, %var_7089: Tensor[(16, 1, 16), int64]) -> (Tensor[(16, 1, 16), int64], Tensor[(3, 14, 8), float64], Tensor[(1, 336), float64]) {
  %528 = cast(%var_7088, dtype="int64") /* ty=int64 */;
  %529 = cast(%var_7089, dtype="int64") /* ty=Tensor[(16, 1, 16), int64] */;
  %530 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 336), float64] */, dtype="float64") /* ty=Tensor[(1, 336), float64] */;
  %531 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 336), float64] */, dtype="float64") /* ty=Tensor[(1, 336), float64] */;
  %532 = reshape(%530, newshape=[3, 14, 8]) /* ty=Tensor[(3, 14, 8), float64] */;
  %533 = reshape(%531, newshape=[3, 14, 8]) /* ty=Tensor[(3, 14, 8), float64] */;
  %534 = @func_62(%532, %533) /* ty=(Tensor[(3, 14, 8), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(3, 14, 8), float64]) */;
  %535 = maximum(%528, %529) /* ty=Tensor[(16, 1, 16), int64] */;
  %536 = %534.0;
  (%535, %536, meta[relay.Constant][32] /* ty=Tensor[(1, 336), float64] */)
}

def @func_3290() -> (Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float64], Tensor[(180), float64]) {
  %537 = @func_1133() /* ty=(Tensor[(180), float64], Tensor[(2, 15, 6), float64]) */;
  %538 = %537.1;
  %539 = cast(%538, dtype="float32") /* ty=Tensor[(2, 15, 6), float32] */;
  %540 = reshape(%539, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), float32] */;
  %541 = @func_735(%540) /* ty=(Tensor[(2, 15, 6), float64],) */;
  %542 = @func_478() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(3, 14, 8), float64], Tensor[(336), float64], Tensor[(180), float64], Tensor[(5, 4, 6), bool], Tensor[(180), float64]) */;
  %543 = %541.0;
  %544 = %542.5;
  (%538, %543, %544)
}

def @func_2267() -> Tensor[(2, 15, 6), float64] {
  %545 = @func_1133() /* ty=(Tensor[(180), float64], Tensor[(2, 15, 6), float64]) */;
  %545.1
}

def @func_4345() -> (Tensor[(2, 15, 6), float64],) {
  %547 = fn () -> (Tensor[(2, 15, 6), float64],) {
    %546 = @func_4184() /* ty=Tensor[(2, 15, 6), float64] */;
    (%546,)
  };
  %547() /* ty=(Tensor[(2, 15, 6), float64],) */
}

def @func_6070(%var_6068: Tensor[(3, 16, 4), float64]) -> (Tensor[(3, 16, 4), float64], Tensor[(2, 15, 6), float32]) {
  @func_6067(%var_6068) /* ty=(Tensor[(3, 16, 4), float64], Tensor[(2, 15, 6), float32]) */
}

def @func_4442() -> (Tensor[(2, 15, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(126), uint8], Tensor[(336), float64], Tensor[(2, 15, 6), float32]) {
  @func_4440() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(126), uint8], Tensor[(336), float64], Tensor[(2, 15, 6), float32]) */
}

def @func_8403() -> Tensor[(180), float64] {
  %548 = @func_6177() /* ty=(Tensor[(180), float64],) */;
  %548.0
}

def @func_1133() -> (Tensor[(180), float64], Tensor[(2, 15, 6), float64]) {
  %549 = @func_389() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
  %550 = %549.2;
  %551 = cast(%550, dtype="float32") /* ty=Tensor[(180), float32] */;
  %552 = reshape(%551, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), float32] */;
  %553 = @func_735(%552) /* ty=(Tensor[(2, 15, 6), float64],) */;
  %554 = %553.0;
  (%550, %554)
}

def @func_574() -> (Tensor[(180), float64], Tensor[(180), float64]) {
  %555 = @func_478() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(3, 14, 8), float64], Tensor[(336), float64], Tensor[(180), float64], Tensor[(5, 4, 6), bool], Tensor[(180), float64]) */;
  %556 = @func_389() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
  %557 = %555.2;
  %558 = %556.2;
  (%557, %558)
}

def @func_6172(%var_6170: Tensor[(80), float64]) -> (Tensor[(2, 15, 6), float32], Tensor[(336, 12), uint64], Tensor[(80), float64], Tensor[(48, 84), float64]) {
  @func_6169(%var_6170) /* ty=(Tensor[(2, 15, 6), float32], Tensor[(336, 12), uint64], Tensor[(80), float64], Tensor[(48, 84), float64]) */
}

def @func_7117(%var_7115: int64, %var_7116: Tensor[(16, 1, 16), int64]) -> (Tensor[(16, 1, 16), int64], Tensor[(3, 14, 8), float64], Tensor[(1, 336), float64]) {
  @func_7113(%var_7115, %var_7116) /* ty=(Tensor[(16, 1, 16), int64], Tensor[(3, 14, 8), float64], Tensor[(1, 336), float64]) */
}

def @func_1322() -> (Tensor[(336), float64],) {
  %559 = @func_478() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(3, 14, 8), float64], Tensor[(336), float64], Tensor[(180), float64], Tensor[(5, 4, 6), bool], Tensor[(180), float64]) */;
  %560 = %559.4;
  (%560,)
}

def @func_5660() -> (Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) {
  @func_5658() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */
}

def @func_6904() -> Tensor[(2, 15, 6), float64] {
  %562 = fn () -> Tensor[(2, 15, 6), float64] {
    %561 = @func_6757() /* ty=(Tensor[(2, 15, 6), float64], Tensor[(33, 5), float64]) */;
    %561.0
  };
  %562() /* ty=Tensor[(2, 15, 6), float64] */
}

def @func_4357() -> (Tensor[(180), float64],) {
  @func_4355() /* ty=(Tensor[(180), float64],) */
}

def @func_7356() -> Tensor[(180), float64] {
  %564 = fn () -> Tensor[(180), float64] {
    %563 = @func_1133() /* ty=(Tensor[(180), float64], Tensor[(2, 15, 6), float64]) */;
    %563.0
  };
  %564() /* ty=Tensor[(180), float64] */
}

def @func_2269() -> Tensor[(2, 15, 6), float64] {
  @func_2267() /* ty=Tensor[(2, 15, 6), float64] */
}

def @func_5956(%var_5938: Tensor[(1, 360), float32]) -> (Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32], Tensor[(126), uint8], Tensor[(2, 15, 6), float32], Tensor[(8, 15, 3), float64], float32, Tensor[(1, 360), float32], Tensor[(2, 15, 6), float64]) {
  %565 = @func_1922() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */;
  %566 = cast(meta[relay.Constant][33] /* ty=Tensor[(126), uint8] */, dtype="uint8") /* ty=Tensor[(126), uint8] */;
  %567 = reshape(%566, newshape=[1, 126]) /* ty=Tensor[(1, 126), uint8] */;
  %568 = @func_5310(%567) /* ty=(Tensor[(2, 15, 6), float32], Tensor[(336, 12), float32], Tensor[(1, 126), uint8]) */;
  %569 = @func_2952() /* ty=(Tensor[(2, 15, 6), float32],) */;
  %570 = cast(-7.73119f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %571 = cast(%var_5938, dtype="float32") /* ty=Tensor[(1, 360), float32] */;
  %572 = reshape(%570, newshape=[]) /* ty=float32 */;
  %573 = reshape(%571, newshape=[8, 15, 3]) /* ty=Tensor[(8, 15, 3), float32] */;
  %574 = @func_4607(%572, %573) /* ty=(Tensor[(8, 15, 3), float32], Tensor[(8, 15, 3), float64]) */;
  %575 = %565.0;
  %576 = %568.0;
  %577 = %569.0;
  %578 = %574.1;
  %579 = @func_1684() /* ty=Tensor[(2, 15, 6), float64] */;
  (%575, %576, meta[relay.Constant][33] /* ty=Tensor[(126), uint8] */, %577, %578, -7.73119f /* ty=float32 */, %var_5938, %579)
}

def @func_7047() -> Tensor[(2, 15, 6), float32] {
  %581 = fn () -> Tensor[(2, 15, 6), float32] {
    %580 = @func_389() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
    %580.1
  };
  %581() /* ty=Tensor[(2, 15, 6), float32] */
}

def @func_5605(%var_5599: Tensor[(180), float64]) -> (Tensor[(180), bool],) {
  %582 = @func_1157() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
  %583 = %582.2;
  %584 = cast(%var_5599, dtype="bool") /* ty=Tensor[(180), bool] */;
  %585 = shape_of(%583, dtype="int32") /* ty=Tensor[(1), int32] */;
  %586 = cast(%583, dtype="bool") /* ty=Tensor[(180), bool] */;
  %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?), bool] */;
  %588 = logical_or(%586, %587) /* ty=Tensor[(180), bool] */;
  (%588,)
}

def @func_3129() -> (Tensor[(2, 15, 6), float32], Tensor[(180), float64]) {
  %589 = @func_2499() /* ty=(Tensor[(180), float64], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */;
  %590 = @func_937() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(336, 1), float64]) */;
  %591 = %589.1;
  %592 = %590.1;
  (%591, %592)
}

def @func_4968() -> (Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32]) {
  %598 = fn () -> (Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32]) {
    %593 = @func_3398() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */;
    %594 = @func_3451() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */;
    %595 = %593.0;
    %596 = @func_2267() /* ty=Tensor[(2, 15, 6), float64] */;
    %597 = %594.1;
    (%595, %596, %597)
  };
  %598() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32]) */
}

def @func_7470(%var_7428: Tensor[(1800), uint32], %var_7433: Tensor[(1800), uint32]) -> (Tensor[(2, 15, 6), float64], Tensor[(156), float64], Tensor[(2, 15, 6), float32], Tensor[(1, 12, 13), float64], Tensor[(2, 15, 6), float32], Tensor[(1800), float64]) {
  %599 = @func_3290() /* ty=(Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float64], Tensor[(180), float64]) */;
  %600 = @func_6483() /* ty=(Tensor[(156), float64], Tensor[(336, 12), float32]) */;
  %601 = cast(%var_7428, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %602 = reshape(%601, newshape=[10, 12, 15]) /* ty=Tensor[(10, 12, 15), uint32] */;
  %603 = @func_4283(%602) /* ty=(Tensor[(10, 12, 15), uint32], Tensor[(2, 15, 6), float32]) */;
  %604 = %600.0;
  %605 = cast(%604, dtype="float64") /* ty=Tensor[(156), float64] */;
  %606 = reshape(%605, newshape=[1, 12, 13]) /* ty=Tensor[(1, 12, 13), float64] */;
  %607 = @func_159(%606) /* ty=(Tensor[(1, 12, 13), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
  %608 = cast(%var_7433, dtype="bool") /* ty=Tensor[(1800), bool] */;
  %609 = shape_of(%var_7428, dtype="int32") /* ty=Tensor[(1), int32] */;
  %610 = cast(%var_7428, dtype="bool") /* ty=Tensor[(1800), bool] */;
  %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?), bool] */;
  %612 = less(%610, %611) /* ty=Tensor[(1800), bool] */;
  %613 = cast(%612, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %614 = %599.1;
  %615 = %603.1;
  %616 = %607.0;
  %617 = @func_2302() /* ty=Tensor[(2, 15, 6), float32] */;
  %618 = sigmoid(%613) /* ty=Tensor[(1800), float64] */;
  (%614, %604, %615, %616, %617, %618)
}

def @func_3239(%var_3203: Tensor[(2, 3, 15), float32], %var_3214: Tensor[(2, 3, 15), float32]) -> (Tensor[(2, 15, 6), float32], Tensor[(126, 1), uint8], Tensor[(2, 3, 15), float64], Tensor[(2, 3, 15), bool], Tensor[(2, 3, 15), float32], Tensor[(180), float64]) {
  %619 = cast(meta[relay.Constant][34] /* ty=Tensor[(126, 1), uint8] */, dtype="uint8") /* ty=Tensor[(126, 1), uint8] */;
  %620 = reshape(%619, newshape=[7, 3, 6]) /* ty=Tensor[(7, 3, 6), uint8] */;
  %621 = @func_2869(%620) /* ty=(Tensor[(7, 3, 6), bool], Tensor[(14, 4, 15), float64], Tensor[(2, 15, 6), float32], Tensor[(336), float64], Tensor[(336, 12), float32]) */;
  %622 = cast(%var_3203, dtype="float32") /* ty=Tensor[(2, 3, 15), float32] */;
  %623 = acosh(%622) /* ty=Tensor[(2, 3, 15), float32] */;
  %624 = cast(%var_3203, dtype="float64") /* ty=Tensor[(2, 3, 15), float64] */;
  %625 = shape_of(%623, dtype="int32") /* ty=Tensor[(3), int32] */;
  %626 = cast(%623, dtype="float64") /* ty=Tensor[(2, 3, 15), float64] */;
  %627 = dyn.reshape(%624, %625, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %628 = cast(%var_3214, dtype="bool") /* ty=Tensor[(2, 3, 15), bool] */;
  %629 = shape_of(%623, dtype="int32") /* ty=Tensor[(3), int32] */;
  %630 = cast(%623, dtype="bool") /* ty=Tensor[(2, 3, 15), bool] */;
  %631 = dyn.reshape(%628, %629, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %632 = cast(%623, dtype="float32") /* ty=Tensor[(2, 3, 15), float32] */;
  %633 = @func_2499() /* ty=(Tensor[(180), float64], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */;
  %634 = %621.2;
  %635 = mod(%626, %627) /* ty=Tensor[(2, 3, 15), float64] */;
  %636 = logical_and(%630, %631) /* ty=Tensor[(2, 3, 15), bool] */;
  %637 = cosh(%632) /* ty=Tensor[(2, 3, 15), float32] */;
  %638 = %633.0;
  (%634, meta[relay.Constant][34] /* ty=Tensor[(126, 1), uint8] */, %635, %636, %637, %638)
}

def @func_7205() -> (Tensor[(2, 15, 6), float64],) {
  @func_7203() /* ty=(Tensor[(2, 15, 6), float64],) */
}

def @func_1009(%var_1007: Tensor[(5, 4, 6), bool]) -> (Tensor[(5, 4, 6), int8], Tensor[(336), float64], Tensor[(180), float32]) {
  @func_1006(%var_1007) /* ty=(Tensor[(5, 4, 6), int8], Tensor[(336), float64], Tensor[(180), float32]) */
}

def @func_3451() -> (Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) {
  %639 = @func_3398() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */;
  %640 = @func_2048() /* ty=(Tensor[(15, 1, 5), float32], Tensor[(2, 15, 6), float32]) */;
  %641 = %639.0;
  %642 = %640.1;
  (%641, %642)
}

def @func_2194() -> Tensor[(180), float64] {
  %643 = @func_1568() /* ty=(Tensor[(180), float64], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32]) */;
  %643.0
}

def @func_4440() -> (Tensor[(2, 15, 6), float32], Tensor[(14, 4, 15), float64], Tensor[(126), uint8], Tensor[(336), float64], Tensor[(2, 15, 6), float32]) {
  %644 = @func_3398() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */;
  %645 = cast(meta[relay.Constant][35] /* ty=Tensor[(126), uint8] */, dtype="uint8") /* ty=Tensor[(126), uint8] */;
  %646 = reshape(%645, newshape=[7, 3, 6]) /* ty=Tensor[(7, 3, 6), uint8] */;
  %647 = @func_2869(%646) /* ty=(Tensor[(7, 3, 6), bool], Tensor[(14, 4, 15), float64], Tensor[(2, 15, 6), float32], Tensor[(336), float64], Tensor[(336, 12), float32]) */;
  %648 = @func_1322() /* ty=(Tensor[(336), float64],) */;
  %649 = @func_2952() /* ty=(Tensor[(2, 15, 6), float32],) */;
  %650 = %644.1;
  %651 = %647.1;
  %652 = %648.0;
  %653 = %649.0;
  (%650, %651, meta[relay.Constant][35] /* ty=Tensor[(126), uint8] */, %652, %653)
}

def @func_7674(%var_7673: Tensor[(10, 1, 9), float64]) -> (Tensor[(10, 1, 9), float64], Tensor[(2, 15, 6), float32]) {
  %658 = fn (%var_7656: Tensor[(10, 1, 9), float64]) -> (Tensor[(10, 1, 9), float64], Tensor[(2, 15, 6), float32]) {
    %654 = cast(%var_7656, dtype="float64") /* ty=Tensor[(10, 1, 9), float64] */;
    %655 = @func_5159() /* ty=(Tensor[(2, 15, 6), float32],) */;
    %656 = log2(%654) /* ty=Tensor[(10, 1, 9), float64] */;
    %657 = %655.0;
    (%656, %657)
  };
  %658(%var_7673) /* ty=(Tensor[(10, 1, 9), float64], Tensor[(2, 15, 6), float32]) */
}

def @func_5725() -> (Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32]) {
  %663 = fn () -> (Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32]) {
    %659 = @func_1133() /* ty=(Tensor[(180), float64], Tensor[(2, 15, 6), float64]) */;
    %660 = @func_3398() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */;
    %661 = %659.1;
    %662 = %660.0;
    (%661, %662)
  };
  %663() /* ty=(Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32]) */
}

def @func_2952() -> (Tensor[(2, 15, 6), float32],) {
  %664 = @func_2834() /* ty=(Tensor[(2, 15, 6), float32],) */;
  %665 = %664.0;
  (%665,)
}

def @func_3841() -> (Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32], Tensor[(336, 12), float32], Tensor[(2, 15, 6), float32]) {
  %678 = fn () -> (Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32], Tensor[(336, 12), float32], Tensor[(2, 15, 6), float32]) {
    %666 = @func_2374() /* ty=(Tensor[(2, 15, 6), float32],) */;
    %667 = @func_1133() /* ty=(Tensor[(180), float64], Tensor[(2, 15, 6), float64]) */;
    %668 = @func_389() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
    %669 = @func_2356() /* ty=(Tensor[(336, 12), float32],) */;
    %670 = @func_3129() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
    %671 = %670.0;
    %672 = cast(%671, dtype="float32") /* ty=Tensor[(2, 15, 6), float32] */;
    %673 = %666.0;
    %674 = %667.1;
    %675 = %668.1;
    %676 = %669.0;
    %677 = asin(%672) /* ty=Tensor[(2, 15, 6), float32] */;
    (%673, %674, %675, %676, %677)
  };
  %678() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32], Tensor[(336, 12), float32], Tensor[(2, 15, 6), float32]) */
}

def @func_1135() -> (Tensor[(180), float64], Tensor[(2, 15, 6), float64]) {
  @func_1133() /* ty=(Tensor[(180), float64], Tensor[(2, 15, 6), float64]) */
}

def @func_7151(%var_7148: Tensor[(3, 1, 2), uint16], %var_7149: Tensor[(3, 5, 2), uint16], %var_7150: Tensor[(80), float64]) -> (Tensor[(180), float64], Tensor[(2, 15, 6), float32], Tensor[(80), float64], Tensor[(3, 5, 2), uint16], Tensor[(14, 4, 15), float64]) {
  %695 = fn (%var_7119: Tensor[(3, 1, 2), uint16], %var_7120: Tensor[(3, 5, 2), uint16], %var_7132: Tensor[(80), float64]) -> (Tensor[(180), float64], Tensor[(2, 15, 6), float32], Tensor[(80), float64], Tensor[(3, 5, 2), uint16], Tensor[(14, 4, 15), float64]) {
    %679 = @func_1133() /* ty=(Tensor[(180), float64], Tensor[(2, 15, 6), float64]) */;
    %680 = cast(%var_7132, dtype="float64") /* ty=Tensor[(80), float64] */;
    %681 = reshape(%680, newshape=[80]) /* ty=Tensor[(80), float64] */;
    %682 = @func_6169(%681) /* ty=(Tensor[(2, 15, 6), float32], Tensor[(336, 12), uint64], Tensor[(80), float64], Tensor[(48, 84), float64]) */;
    %683 = cast(%var_7119, dtype="uint16") /* ty=Tensor[(3, 1, 2), uint16] */;
    %684 = cast(%var_7120, dtype="uint16") /* ty=Tensor[(3, 5, 2), uint16] */;
    %685 = right_shift(%683, %684) /* ty=Tensor[(3, 5, 2), uint16] */;
    %686 = cast(%var_7120, dtype="uint16") /* ty=Tensor[(3, 5, 2), uint16] */;
    %687 = shape_of(%685, dtype="int32") /* ty=Tensor[(3), int32] */;
    %688 = cast(%685, dtype="uint16") /* ty=Tensor[(3, 5, 2), uint16] */;
    %689 = dyn.reshape(%686, %687, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %690 = @func_2727() /* ty=(Tensor[(14, 4, 15), float64],) */;
    %691 = %679.0;
    %692 = %682.0;
    %693 = left_shift(%688, %689) /* ty=Tensor[(3, 5, 2), uint16] */;
    %694 = %690.0;
    (%691, %692, %var_7132, %693, %694)
  };
  %695(%var_7148, %var_7149, %var_7150) /* ty=(Tensor[(180), float64], Tensor[(2, 15, 6), float32], Tensor[(80), float64], Tensor[(3, 5, 2), uint16], Tensor[(14, 4, 15), float64]) */
}

def @func_4040() -> Tensor[(3, 14, 8), float32] {
  @func_4038() /* ty=Tensor[(3, 14, 8), float32] */
}

def @func_2013() -> (Tensor[(180), float64],) {
  @func_2011() /* ty=(Tensor[(180), float64],) */
}

def @func_6067(%var_6047: Tensor[(3, 16, 4), float64]) -> (Tensor[(3, 16, 4), float64], Tensor[(2, 15, 6), float32]) {
  %696 = cast(%var_6047, dtype="float64") /* ty=Tensor[(3, 16, 4), float64] */;
  %697 = @func_4967() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32]) */;
  %698 = tan(%696) /* ty=Tensor[(3, 16, 4), float64] */;
  %699 = %697.0;
  (%698, %699)
}

def @func_8556(%var_8554: Tensor[(10, 14, 15), int64], %var_8555: Tensor[(10, 14, 15), int64]) -> (Tensor[(2, 15, 6), float32], Tensor[(10, 14, 15), int64]) {
  %721 = fn (%var_8470: Tensor[(10, 14, 15), int64], %var_8471: Tensor[(10, 14, 15), int64]) -> (Tensor[(2, 15, 6), float32], Tensor[(10, 14, 15), int64]) {
    %700 = @func_7879() /* ty=(Tensor[(180), float64], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32]) */;
    %701 = cast(%var_8471, dtype="int64") /* ty=Tensor[(10, 14, 15), int64] */;
    %702 = shape_of(%var_8470, dtype="int32") /* ty=Tensor[(3), int32] */;
    %703 = cast(%var_8470, dtype="int64") /* ty=Tensor[(10, 14, 15), int64] */;
    %704 = dyn.reshape(%701, %702, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %705 = right_shift(%703, %704) /* ty=Tensor[(10, 14, 15), int64] */;
    %706 = cast(%var_8470, dtype="uint16") /* ty=Tensor[(10, 14, 15), uint16] */;
    %707 = shape_of(%705, dtype="int32") /* ty=Tensor[(3), int32] */;
    %708 = cast(%705, dtype="uint16") /* ty=Tensor[(10, 14, 15), uint16] */;
    %709 = dyn.reshape(%706, %707, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %710 = multiply(%708, %709) /* ty=Tensor[(10, 14, 15), uint16] */;
    %711 = cast(%710, dtype="float64") /* ty=Tensor[(10, 14, 15), float64] */;
    %712 = sqrt(%711) /* ty=Tensor[(10, 14, 15), float64] */;
    %713 = cast(%712, dtype="float32") /* ty=Tensor[(10, 14, 15), float32] */;
    %714 = log2(%713) /* ty=Tensor[(10, 14, 15), float32] */;
    %715 = cast(%710, dtype="int64") /* ty=Tensor[(10, 14, 15), int64] */;
    %716 = shape_of(%714, dtype="int32") /* ty=Tensor[(3), int32] */;
    %717 = cast(%714, dtype="int64") /* ty=Tensor[(10, 14, 15), int64] */;
    %718 = dyn.reshape(%715, %716, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %719 = %700.3;
    %720 = logical_xor(%717, %718) /* ty=Tensor[(10, 14, 15), int64] */;
    (%719, %720)
  };
  %721(%var_8554, %var_8555) /* ty=(Tensor[(2, 15, 6), float32], Tensor[(10, 14, 15), int64]) */
}

def @func_4110() -> (Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(180), float32], Tensor[(336), float64]) {
  %722 = @func_1568() /* ty=(Tensor[(180), float64], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32]) */;
  %723 = @func_3290() /* ty=(Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float64], Tensor[(180), float64]) */;
  %724 = @func_3715() /* ty=(Tensor[(180), float64],) */;
  %725 = %724.0;
  %726 = cast(%725, dtype="float32") /* ty=Tensor[(180), float32] */;
  %727 = @func_1322() /* ty=(Tensor[(336), float64],) */;
  %728 = %722.2;
  %729 = %723.0;
  %730 = rsqrt(%726) /* ty=Tensor[(180), float32] */;
  %731 = %727.0;
  (%728, %729, %730, %731)
}

def @func_654() -> (Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(180), float64], Tensor[(156), float64]) {
  @func_652() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(180), float64], Tensor[(156), float64]) */
}

def @func_4527(%var_4489: Tensor[(16, 5, 1), float64], %var_4511: Tensor[(336, 12), float64]) -> (Tensor[(16, 5, 1), float64], Tensor[(2, 15, 6), float64], Tensor[(336, 12), uint64], Tensor[(16, 5, 9), uint8]) {
  %732 = cast(%var_4489, dtype="float64") /* ty=Tensor[(16, 5, 1), float64] */;
  %733 = @func_4479() /* ty=(Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float64]) */;
  %734 = @func_3768() /* ty=(Tensor[(336, 1), float64], Tensor[(180), float64]) */;
  %735 = %734.0;
  %736 = cast(%735, dtype="uint64") /* ty=Tensor[(336, 1), uint64] */;
  %737 = cast(%var_4511, dtype="uint64") /* ty=Tensor[(336, 12), uint64] */;
  %738 = cast(%var_4489, dtype="uint8") /* ty=Tensor[(16, 5, 1), uint8] */;
  %739 = cast(meta[relay.Constant][36] /* ty=Tensor[(16, 5, 9), float64] */, dtype="uint8") /* ty=Tensor[(16, 5, 9), uint8] */;
  %740 = erf(%732) /* ty=Tensor[(16, 5, 1), float64] */;
  %741 = %733.1;
  %742 = add(%736, %737) /* ty=Tensor[(336, 12), uint64] */;
  %743 = left_shift(%738, %739) /* ty=Tensor[(16, 5, 9), uint8] */;
  (%740, %741, %742, %743)
}

def @func_1484() -> (Tensor[(180), float64], Tensor[(180), float64], Tensor[(2, 15, 6), float32]) {
  %744 = @func_652() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float64], Tensor[(180), float64], Tensor[(156), float64]) */;
  %745 = @func_1157() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
  %746 = @func_1312() /* ty=Tensor[(2, 15, 6), float32] */;
  %747 = cast(%746, dtype="float32") /* ty=Tensor[(2, 15, 6), float32] */;
  %748 = %744.3;
  %749 = %745.2;
  %750 = erf(%747) /* ty=Tensor[(2, 15, 6), float32] */;
  (%748, %749, %750)
}

def @func_1568() -> (Tensor[(180), float64], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32]) {
  %751 = @func_478() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(3, 14, 8), float64], Tensor[(336), float64], Tensor[(180), float64], Tensor[(5, 4, 6), bool], Tensor[(180), float64]) */;
  %752 = %751.5;
  %753 = cast(%752, dtype="float32") /* ty=Tensor[(180), float32] */;
  %754 = reshape(%753, newshape=[2, 15, 6]) /* ty=Tensor[(2, 15, 6), float32] */;
  %755 = @func_735(%754) /* ty=(Tensor[(2, 15, 6), float64],) */;
  %756 = %755.0;
  %757 = @func_1381() /* ty=Tensor[(2, 15, 6), float32] */;
  (%752, %756, %757)
}

def @func_7320(%var_7317: Tensor[(156), float64]) -> (Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(2, 15, 6), float32], Tensor[(156), float64]) {
  %758 = @func_3057() /* ty=(Tensor[(2, 15, 6), float32],) */;
  %759 = @func_3290() /* ty=(Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float64], Tensor[(180), float64]) */;
  %760 = cast(%var_7317, dtype="float64") /* ty=Tensor[(156), float64] */;
  %761 = reshape(%760, newshape=[1, 12, 13]) /* ty=Tensor[(1, 12, 13), float64] */;
  %762 = @func_159(%761) /* ty=(Tensor[(1, 12, 13), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
  %763 = %758.0;
  %764 = %759.2;
  %765 = %762.1;
  (%763, %764, %765, %var_7317)
}

def @func_7789() -> (Tensor[(180), uint32], Tensor[(336, 1), float32]) {
  @func_7787() /* ty=(Tensor[(180), uint32], Tensor[(336, 1), float32]) */
}

def @func_6332(%var_6330: Tensor[(15, 16, 2), float32], %var_6331: Tensor[(15, 16, 2), float32]) -> (Tensor[(2, 15, 6), float32], Tensor[(15, 16, 2), int16], Tensor[(15, 16, 2), float64], Tensor[(2, 15, 6), float32]) {
  %786 = fn (%var_6301: Tensor[(15, 16, 2), float32], %var_6302: Tensor[(15, 16, 2), float32]) -> (Tensor[(2, 15, 6), float32], Tensor[(15, 16, 2), int16], Tensor[(15, 16, 2), float64], Tensor[(2, 15, 6), float32]) {
    %766 = @func_1922() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */;
    %767 = cast(%var_6301, dtype="float32") /* ty=Tensor[(15, 16, 2), float32] */;
    %768 = cosh(%767) /* ty=Tensor[(15, 16, 2), float32] */;
    %769 = cast(%var_6302, dtype="float32") /* ty=Tensor[(15, 16, 2), float32] */;
    %770 = shape_of(%var_6301, dtype="int32") /* ty=Tensor[(3), int32] */;
    %771 = cast(%var_6301, dtype="float32") /* ty=Tensor[(15, 16, 2), float32] */;
    %772 = dyn.reshape(%769, %770, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %773 = mod(%771, %772) /* ty=Tensor[(15, 16, 2), float32] */;
    %774 = cast(%773, dtype="int16") /* ty=Tensor[(15, 16, 2), int16] */;
    %775 = shape_of(%768, dtype="int32") /* ty=Tensor[(3), int32] */;
    %776 = cast(%768, dtype="int16") /* ty=Tensor[(15, 16, 2), int16] */;
    %777 = dyn.reshape(%774, %775, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %778 = cast(%768, dtype="float32") /* ty=Tensor[(15, 16, 2), float32] */;
    %779 = sqrt(%778) /* ty=Tensor[(15, 16, 2), float32] */;
    %780 = cast(%779, dtype="float64") /* ty=Tensor[(15, 16, 2), float64] */;
    %781 = @func_2499() /* ty=(Tensor[(180), float64], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */;
    %782 = %766.1;
    %783 = minimum(%776, %777) /* ty=Tensor[(15, 16, 2), int16] */;
    %784 = atan(%780) /* ty=Tensor[(15, 16, 2), float64] */;
    %785 = %781.3;
    (%782, %783, %784, %785)
  };
  %786(%var_6330, %var_6331) /* ty=(Tensor[(2, 15, 6), float32], Tensor[(15, 16, 2), int16], Tensor[(15, 16, 2), float64], Tensor[(2, 15, 6), float32]) */
}

def @func_1083(%var_1081: Tensor[(8, 10, 8), int32], %var_1082: Tensor[(8, 10, 8), int32]) -> (Tensor[(8, 10, 8), int32], Tensor[(180), float64], Tensor[(5, 4, 6), int8], Tensor[(120), bool], Tensor[(180), float64], Tensor[(8, 10, 8), bool], Tensor[(2, 15, 6), float32]) {
  %807 = fn (%var_1016: Tensor[(8, 10, 8), int32], %var_1068: Tensor[(8, 10, 8), int32]) -> (Tensor[(8, 10, 8), int32], Tensor[(180), float64], Tensor[(5, 4, 6), int8], Tensor[(120), bool], Tensor[(180), float64], Tensor[(8, 10, 8), bool], Tensor[(2, 15, 6), float32]) {
    %787 = cast(meta[relay.Constant][37] /* ty=Tensor[(8, 10, 8), int32] */, dtype="int32") /* ty=Tensor[(8, 10, 8), int32] */;
    %788 = shape_of(%var_1016, dtype="int32") /* ty=Tensor[(3), int32] */;
    %789 = cast(%var_1016, dtype="int32") /* ty=Tensor[(8, 10, 8), int32] */;
    %790 = dyn.reshape(%787, %788, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %791 = @func_389() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
    %792 = cast(meta[relay.Constant][38] /* ty=Tensor[(120), bool] */, dtype="bool") /* ty=Tensor[(120), bool] */;
    %793 = reshape(%792, newshape=[5, 4, 6]) /* ty=Tensor[(5, 4, 6), bool] */;
    %794 = @func_1006(%793) /* ty=(Tensor[(5, 4, 6), int8], Tensor[(336), float64], Tensor[(180), float32]) */;
    %795 = @func_937() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(336, 1), float64]) */;
    %796 = cast(%var_1068, dtype="bool") /* ty=Tensor[(8, 10, 8), bool] */;
    %797 = shape_of(%var_1016, dtype="int32") /* ty=Tensor[(3), int32] */;
    %798 = cast(%var_1016, dtype="bool") /* ty=Tensor[(8, 10, 8), bool] */;
    %799 = dyn.reshape(%796, %797, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %800 = @func_478() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(3, 14, 8), float64], Tensor[(336), float64], Tensor[(180), float64], Tensor[(5, 4, 6), bool], Tensor[(180), float64]) */;
    %801 = right_shift(%789, %790) /* ty=Tensor[(8, 10, 8), int32] */;
    %802 = %791.2;
    %803 = %794.0;
    %804 = %795.1;
    %805 = less_equal(%798, %799) /* ty=Tensor[(8, 10, 8), bool] */;
    %806 = %800.1;
    (%801, %802, %803, meta[relay.Constant][38] /* ty=Tensor[(120), bool] */, %804, %805, %806)
  };
  %807(%var_1081, %var_1082) /* ty=(Tensor[(8, 10, 8), int32], Tensor[(180), float64], Tensor[(5, 4, 6), int8], Tensor[(120), bool], Tensor[(180), float64], Tensor[(8, 10, 8), bool], Tensor[(2, 15, 6), float32]) */
}

def @func_3292() -> (Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float64], Tensor[(180), float64]) {
  @func_3290() /* ty=(Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float64], Tensor[(180), float64]) */
}

def @func_5760() -> (Tensor[(3, 14, 8), float32], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) {
  %813 = fn () -> (Tensor[(3, 14, 8), float32], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) {
    %808 = @func_2952() /* ty=(Tensor[(2, 15, 6), float32],) */;
    %809 = @func_2834() /* ty=(Tensor[(2, 15, 6), float32],) */;
    %810 = @func_4038() /* ty=Tensor[(3, 14, 8), float32] */;
    %811 = %808.0;
    %812 = %809.0;
    (%810, %811, %812)
  };
  %813() /* ty=(Tensor[(3, 14, 8), float32], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */
}

def @func_7787() -> (Tensor[(180), uint32], Tensor[(336, 1), float32]) {
  %814 = @func_1992() /* ty=Tensor[(180), float64] */;
  %815 = cast(%814, dtype="float64") /* ty=Tensor[(180), float64] */;
  %816 = asinh(%815) /* ty=Tensor[(180), float64] */;
  %817 = cast(%814, dtype="uint32") /* ty=Tensor[(180), uint32] */;
  %818 = shape_of(%816, dtype="int32") /* ty=Tensor[(1), int32] */;
  %819 = cast(%816, dtype="uint32") /* ty=Tensor[(180), uint32] */;
  %820 = dyn.reshape(%817, %818, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %821 = @func_3311() /* ty=(Tensor[(336, 1), float32],) */;
  %822 = add(%819, %820) /* ty=Tensor[(180), uint32] */;
  %823 = %821.0;
  (%822, %823)
}

def @func_2357() -> (Tensor[(336, 12), float32],) {
  %826 = fn () -> (Tensor[(336, 12), float32],) {
    %824 = @func_2138() /* ty=(Tensor[(336, 12), float32], Tensor[(336, ?), float64]) */;
    %825 = %824.0;
    (%825,)
  };
  %826() /* ty=(Tensor[(336, 12), float32],) */
}

def @func_7689(%var_7687: Tensor[(1, 1, 7), float64], %var_7688: Tensor[(9, 3, 7), float64]) -> (Tensor[(9, 3, 7), float64], Tensor[(9, 3, 7), float32]) {
  @func_7685(%var_7687, %var_7688) /* ty=(Tensor[(9, 3, 7), float64], Tensor[(9, 3, 7), float32]) */
}

def @func_2499() -> (Tensor[(180), float64], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) {
  %827 = @func_1157() /* ty=(Tensor[(14, 4, 15), float64], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
  %828 = @func_1922() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */;
  %829 = @func_681() /* ty=(Tensor[(2, 15, 6), float32],) */;
  %830 = %827.2;
  %831 = %828.0;
  %832 = @func_2213() /* ty=Tensor[(2, 15, 6), float32] */;
  %833 = %829.0;
  (%830, %831, %832, %833)
}

def @func_4283(%var_4275: Tensor[(10, 12, 15), uint32]) -> (Tensor[(10, 12, 15), uint32], Tensor[(2, 15, 6), float32]) {
  %834 = cast(%var_4275, dtype="uint32") /* ty=Tensor[(10, 12, 15), uint32] */;
  %835 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(10, 12, 15), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %836 = cast(meta[relay.Constant][39] /* ty=Tensor[(10, 12, 15), uint32] */, dtype="uint32") /* ty=Tensor[(10, 12, 15), uint32] */;
  %837 = dyn.reshape(%834, %835, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %838 = @func_3398() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */;
  %839 = subtract(%836, %837) /* ty=Tensor[(10, 12, 15), uint32] */;
  %840 = %838.1;
  (%839, %840)
}

def @func_870(%var_868: Tensor[(2, 15, 6), float32]) -> (Tensor[(2, 15, 6), float32], Tensor[(5, 4, 6), bool], Tensor[(3, 14, 8), float64], Tensor[(336), float64], Tensor[(3, 14, 8), float64]) {
  @func_867(%var_868) /* ty=(Tensor[(2, 15, 6), float32], Tensor[(5, 4, 6), bool], Tensor[(3, 14, 8), float64], Tensor[(336), float64], Tensor[(3, 14, 8), float64]) */
}

def @func_3914() -> Tensor[(336, 1), float64] {
  %841 = fn () -> Tensor[(336, 1), float64] {
    @func_2067() /* ty=Tensor[(336, 1), float64] */
  };
  %841() /* ty=Tensor[(336, 1), float64] */
}

def @func_5404(%var_5402: Tensor[(120), bool]) -> (Tensor[(180), float64], Tensor[(180), float32], Tensor[(120), bool], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float64]) {
  @func_5401(%var_5402) /* ty=(Tensor[(180), float64], Tensor[(180), float32], Tensor[(120), bool], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float64]) */
}

def @func_5813(%var_5812: Tensor[(14, 4, 11), float64]) -> (Tensor[(14, 4, 11), float64],) {
  %844 = fn (%var_5808: Tensor[(14, 4, 11), float64]) -> (Tensor[(14, 4, 11), float64],) {
    %842 = cast(%var_5808, dtype="float64") /* ty=Tensor[(14, 4, 11), float64] */;
    %843 = cosh(%842) /* ty=Tensor[(14, 4, 11), float64] */;
    (%843,)
  };
  %844(%var_5812) /* ty=(Tensor[(14, 4, 11), float64],) */
}

def @func_4822(%var_4820: Tensor[(360), float32]) -> (Tensor[(180), float64], Tensor[(14, 4, 15), float64], Tensor[(8, 15, 3), float32], float32, Tensor[(360), float32]) {
  @func_4819(%var_4820) /* ty=(Tensor[(180), float64], Tensor[(14, 4, 15), float64], Tensor[(8, 15, 3), float32], float32, Tensor[(360), float32]) */
}

def @func_6533() -> (Tensor[(13, 13, 8), bool], Tensor[(2, 15, 6), float64]) {
  @func_6531() /* ty=(Tensor[(13, 13, 8), bool], Tensor[(2, 15, 6), float64]) */
}

def @func_1249() -> (Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32]) {
  @func_1247() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32]) */
}

def @func_7499() -> Tensor[(2, 15, 6), float32] {
  @func_7225() /* ty=Tensor[(2, 15, 6), float32] */
}

def @func_6964() -> (Tensor[(336, 1), float64], Tensor[(180), bool], Tensor[(180), float64], Tensor[(8, 15, 3), float32], float32, Tensor[(360), float32], Tensor[(2, 15, 6), float64]) {
  @func_6962() /* ty=(Tensor[(336, 1), float64], Tensor[(180), bool], Tensor[(180), float64], Tensor[(8, 15, 3), float32], float32, Tensor[(360), float32], Tensor[(2, 15, 6), float64]) */
}

def @func_2836() -> (Tensor[(2, 15, 6), float32],) {
  @func_2834() /* ty=(Tensor[(2, 15, 6), float32],) */
}

def @func_4355() -> (Tensor[(180), float64],) {
  %845 = @func_3715() /* ty=(Tensor[(180), float64],) */;
  %846 = %845.0;
  (%846,)
}

def @func_7685(%var_7676: Tensor[(1, 1, 7), float64], %var_7677: Tensor[(9, 3, 7), float64]) -> (Tensor[(9, 3, 7), float64], Tensor[(9, 3, 7), float32]) {
  %847 = cast(%var_7676, dtype="float64") /* ty=Tensor[(1, 1, 7), float64] */;
  %848 = cast(%var_7677, dtype="float64") /* ty=Tensor[(9, 3, 7), float64] */;
  %849 = cast(%var_7677, dtype="float32") /* ty=Tensor[(9, 3, 7), float32] */;
  %850 = cast(%var_7676, dtype="float32") /* ty=Tensor[(1, 1, 7), float32] */;
  %851 = power(%847, %848) /* ty=Tensor[(9, 3, 7), float64] */;
  %852 = minimum(%849, %850) /* ty=Tensor[(9, 3, 7), float32] */;
  (%851, %852)
}

def @func_8212(%var_8196: Tensor[(16, 15, 10), float32]) -> (Tensor[(16, 15, 10), bool], Tensor[(14, 4, 15), float64]) {
  %853 = cast(meta[relay.Constant][40] /* ty=Tensor[(16, 15, 10), float32] */, dtype="float32") /* ty=Tensor[(16, 15, 10), float32] */;
  %854 = sqrt(%853) /* ty=Tensor[(16, 15, 10), float32] */;
  %855 = cast(%var_8196, dtype="bool") /* ty=Tensor[(16, 15, 10), bool] */;
  %856 = shape_of(%854, dtype="int32") /* ty=Tensor[(3), int32] */;
  %857 = cast(%854, dtype="bool") /* ty=Tensor[(16, 15, 10), bool] */;
  %858 = dyn.reshape(%855, %856, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %859 = @func_2727() /* ty=(Tensor[(14, 4, 15), float64],) */;
  %860 = equal(%857, %858) /* ty=Tensor[(16, 15, 10), bool] */;
  %861 = %859.0;
  (%860, %861)
}

def @func_6242(%var_6204: Tensor[(5, 12, 8), float32], %var_6238: Tensor[(30, 6), float64]) -> (Tensor[(5, 12, 8), float32], Tensor[(360), float32], Tensor[(5, 12, 8), uint8], Tensor[(8, 15, 3), float64], Tensor[(180), bool], Tensor[(30, 6), float64]) {
  %862 = cast(%var_6204, dtype="float32") /* ty=Tensor[(5, 12, 8), float32] */;
  %863 = cast(%var_6204, dtype="float32") /* ty=Tensor[(5, 12, 8), float32] */;
  %864 = atan(%863) /* ty=Tensor[(5, 12, 8), float32] */;
  %865 = cast(%864, dtype="uint8") /* ty=Tensor[(5, 12, 8), uint8] */;
  %866 = cast(3.26398f /* ty=float32 */, dtype="uint8") /* ty=uint8 */;
  %867 = cast(3.26398f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %868 = cast(meta[relay.Constant][41] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
  %869 = reshape(%867, newshape=[]) /* ty=float32 */;
  %870 = reshape(%868, newshape=[8, 15, 3]) /* ty=Tensor[(8, 15, 3), float32] */;
  %871 = @func_4607(%869, %870) /* ty=(Tensor[(8, 15, 3), float32], Tensor[(8, 15, 3), float64]) */;
  %872 = %871.0;
  %873 = cast(%872, dtype="float64") /* ty=Tensor[(8, 15, 3), float64] */;
  %874 = cast(%var_6238, dtype="float64") /* ty=Tensor[(30, 6), float64] */;
  %875 = reshape(%874, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %876 = @func_5605(%875) /* ty=(Tensor[(180), bool],) */;
  %877 = sigmoid(%862) /* ty=Tensor[(5, 12, 8), float32] */;
  %878 = right_shift(%865, %866) /* ty=Tensor[(5, 12, 8), uint8] */;
  %879 = sigmoid(%873) /* ty=Tensor[(8, 15, 3), float64] */;
  %880 = %876.0;
  (%877, meta[relay.Constant][41] /* ty=Tensor[(360), float32] */, %878, %879, %880, %var_6238)
}

def @func_2954() -> (Tensor[(2, 15, 6), float32],) {
  @func_2952() /* ty=(Tensor[(2, 15, 6), float32],) */
}

def @func_1685() -> Tensor[(2, 15, 6), float64] {
  %882 = fn () -> Tensor[(2, 15, 6), float64] {
    %881 = @func_1133() /* ty=(Tensor[(180), float64], Tensor[(2, 15, 6), float64]) */;
    %881.1
  };
  %882() /* ty=Tensor[(2, 15, 6), float64] */
}

def @func_682() -> (Tensor[(2, 15, 6), float32],) {
  %885 = fn () -> (Tensor[(2, 15, 6), float32],) {
    %883 = @func_389() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
    %884 = %883.1;
    (%884,)
  };
  %885() /* ty=(Tensor[(2, 15, 6), float32],) */
}

def @func_2822() -> (Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) {
  %889 = fn () -> (Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) {
    %886 = @func_1484() /* ty=(Tensor[(180), float64], Tensor[(180), float64], Tensor[(2, 15, 6), float32]) */;
    %887 = %886.2;
    %888 = @func_2213() /* ty=Tensor[(2, 15, 6), float32] */;
    (%887, %888)
  };
  %889() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */
}

def @func_22(%var_20: Tensor[(2, 15, 6), float64], %var_21: Tensor[(2, 15, 6), float64]) -> (Tensor[(2, 15, 6), float32],) {
  %897 = fn (%var_7: Tensor[(2, 15, 6), float64], %var_8: Tensor[(2, 15, 6), float64]) -> (Tensor[(2, 15, 6), float32],) {
    %890 = cast(%var_8, dtype="float64") /* ty=Tensor[(2, 15, 6), float64] */;
    %891 = shape_of(%var_7, dtype="int32") /* ty=Tensor[(3), int32] */;
    %892 = cast(%var_7, dtype="float64") /* ty=Tensor[(2, 15, 6), float64] */;
    %893 = dyn.reshape(%890, %891, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %894 = power(%892, %893) /* ty=Tensor[(2, 15, 6), float64] */;
    %895 = cast(%894, dtype="float32") /* ty=Tensor[(2, 15, 6), float32] */;
    %896 = tan(%895) /* ty=Tensor[(2, 15, 6), float32] */;
    (%896,)
  };
  %897(%var_20, %var_21) /* ty=(Tensor[(2, 15, 6), float32],) */
}

def @func_1801() -> (Tensor[(336, 1), float64],) {
  %900 = fn () -> (Tensor[(336, 1), float64],) {
    %898 = @func_937() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(336, 1), float64]) */;
    %899 = %898.2;
    (%899,)
  };
  %900() /* ty=(Tensor[(336, 1), float64],) */
}

def @func_5312(%var_5311: Tensor[(1, 126), uint8]) -> (Tensor[(2, 15, 6), float32], Tensor[(336, 12), float32], Tensor[(1, 126), uint8]) {
  %907 = fn (%var_5306: Tensor[(1, 126), uint8]) -> (Tensor[(2, 15, 6), float32], Tensor[(336, 12), float32], Tensor[(1, 126), uint8]) {
    %901 = @func_389() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */;
    %902 = cast(%var_5306, dtype="uint8") /* ty=Tensor[(1, 126), uint8] */;
    %903 = reshape(%902, newshape=[7, 3, 6]) /* ty=Tensor[(7, 3, 6), uint8] */;
    %904 = @func_2869(%903) /* ty=(Tensor[(7, 3, 6), bool], Tensor[(14, 4, 15), float64], Tensor[(2, 15, 6), float32], Tensor[(336), float64], Tensor[(336, 12), float32]) */;
    %905 = %901.1;
    %906 = %904.4;
    (%905, %906, %var_5306)
  };
  %907(%var_5311) /* ty=(Tensor[(2, 15, 6), float32], Tensor[(336, 12), float32], Tensor[(1, 126), uint8]) */
}

def @func_2834() -> (Tensor[(2, 15, 6), float32],) {
  %908 = @func_2821() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */;
  %909 = %908.1;
  (%909,)
}

def @func_2302() -> Tensor[(2, 15, 6), float32] {
  %910 = @func_478() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64], Tensor[(3, 14, 8), float64], Tensor[(336), float64], Tensor[(180), float64], Tensor[(5, 4, 6), bool], Tensor[(180), float64]) */;
  %910.1
}

def @func_5039() -> (Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) {
  %916 = fn () -> (Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) {
    %911 = @func_3926() /* ty=(Tensor[(5, 4, 6), bool],) */;
    %912 = @func_2499() /* ty=(Tensor[(180), float64], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */;
    %913 = %911.0;
    %914 = %912.1;
    %915 = @func_1992() /* ty=Tensor[(180), float64] */;
    (%913, %914, %915)
  };
  %916() /* ty=(Tensor[(5, 4, 6), bool], Tensor[(2, 15, 6), float32], Tensor[(180), float64]) */
}

def @func_2214() -> Tensor[(2, 15, 6), float32] {
  %918 = fn () -> Tensor[(2, 15, 6), float32] {
    %917 = @func_681() /* ty=(Tensor[(2, 15, 6), float32],) */;
    %917.0
  };
  %918() /* ty=Tensor[(2, 15, 6), float32] */
}

def @func_4184() -> Tensor[(2, 15, 6), float64] {
  %919 = @func_1568() /* ty=(Tensor[(180), float64], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32]) */;
  %919.1
}

def @func_1570() -> (Tensor[(180), float64], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32]) {
  @func_1568() /* ty=(Tensor[(180), float64], Tensor[(2, 15, 6), float64], Tensor[(2, 15, 6), float32]) */
}

def @func_6169(%var_6164: Tensor[(80), float64]) -> (Tensor[(2, 15, 6), float32], Tensor[(336, 12), uint64], Tensor[(80), float64], Tensor[(48, 84), float64]) {
  %920 = @func_5658() /* ty=(Tensor[(2, 15, 6), float32], Tensor[(2, 15, 6), float32]) */;
  %921 = cast(%var_6164, dtype="float64") /* ty=Tensor[(80), float64] */;
  %922 = cast(meta[relay.Constant][42] /* ty=Tensor[(48, 84), float64] */, dtype="float64") /* ty=Tensor[(48, 84), float64] */;
  %923 = reshape(%921, newshape=[16, 5, 1]) /* ty=Tensor[(16, 5, 1), float64] */;
  %924 = reshape(%922, newshape=[336, 12]) /* ty=Tensor[(336, 12), float64] */;
  %925 = @func_4527(%923, %924) /* ty=(Tensor[(16, 5, 1), float64], Tensor[(2, 15, 6), float64], Tensor[(336, 12), uint64], Tensor[(16, 5, 9), uint8]) */;
  %926 = %920.0;
  %927 = %925.2;
  (%926, %927, %var_6164, meta[relay.Constant][42] /* ty=Tensor[(48, 84), float64] */)
}

def @func_2138() -> (Tensor[(336, 12), float32], Tensor[(336, ?), float64]) {
  %928 = @func_1800() /* ty=(Tensor[(336, 1), float64],) */;
  %929 = %928.0;
  %930 = cast(%929, dtype="float32") /* ty=Tensor[(336, 1), float32] */;
  %931 = asin(%930) /* ty=Tensor[(336, 1), float32] */;
  %932 = cast(%931, dtype="float64") /* ty=Tensor[(336, 1), float64] */;
  %933 = cast(meta[relay.Constant][43] /* ty=Tensor[(336, 12), float32] */, dtype="float64") /* ty=Tensor[(336, 12), float64] */;
  %934 = minimum(%932, %933) /* ty=Tensor[(336, 12), float64] */;
  %935 = cast(%934, dtype="float32") /* ty=Tensor[(336, 12), float32] */;
  %936 = cast(%931, dtype="float64") /* ty=Tensor[(336, 1), float64] */;
  %937 = tan(%936) /* ty=Tensor[(336, 1), float64] */;
  %938 = cast(%937, dtype="float32") /* ty=Tensor[(336, 1), float32] */;
  %939 = acos(%938) /* ty=Tensor[(336, 1), float32] */;
  %940 = cast(%939, dtype="float64") /* ty=Tensor[(336, 1), float64] */;
  %941 = cosh(%940) /* ty=Tensor[(336, 1), float64] */;
  %942 = cast(%931, dtype="bool") /* ty=Tensor[(336, 1), bool] */;
  %943 = shape_of(%939, dtype="int32") /* ty=Tensor[(2), int32] */;
  %944 = cast(%939, dtype="bool") /* ty=Tensor[(336, 1), bool] */;
  %945 = dyn.reshape(%942, %943, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %946 = less(%944, %945) /* ty=Tensor[(336, ?), bool] */;
  %947 = cast(%946, dtype="float64") /* ty=Tensor[(336, ?), float64] */;
  %948 = shape_of(%941, dtype="int32") /* ty=Tensor[(2), int32] */;
  %949 = cast(%941, dtype="float64") /* ty=Tensor[(336, 1), float64] */;
  %950 = dyn.reshape(%947, %948, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %951 = sin(%935) /* ty=Tensor[(336, 12), float32] */;
  %952 = floor_divide(%949, %950) /* ty=Tensor[(336, ?), float64] */;
  (%951, %952)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen336/build/output.py", line 2794, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:08:10] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

