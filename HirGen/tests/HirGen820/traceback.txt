==========mod==========
#[version = "0.0.5"]
def @func_6640() -> Tensor[(7, 14, 4), float32] {
  @func_6597() /* ty=Tensor[(7, 14, 4), float32] */
}

def @func_931(%var_929: Tensor[(390, 2), uint8]) -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(13, 10, 6), uint8], Tensor[(390, 2), uint8]) {
  %0 = @func_856() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %1 = @func_856() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %2 = cast(%var_929, dtype="uint8") /* ty=Tensor[(390, 2), uint8] */;
  %3 = reshape(%2, newshape=[13, 10, 6]) /* ty=Tensor[(13, 10, 6), uint8] */;
  %4 = %0.0;
  %5 = %1.0;
  %6 = @func_647(%3) /* ty=Tensor[(13, 10, 6), uint8] */;
  (%4, %5, %6, %var_929)
}

def @func_6671() -> (Tensor[(10, 3, 13), float64],) {
  %7 = @func_5781() /* ty=(Tensor[(10, 3, 13), float64],) */;
  %8 = %7.0;
  %9 = cast(%8, dtype="float64") /* ty=Tensor[(10, 3, 13), float64] */;
  %10 = log2(%9) /* ty=Tensor[(10, 3, 13), float64] */;
  (%10,)
}

def @func_3681() -> (Tensor[(7, 14, 4), float32],) {
  %11 = @func_988() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %12 = %11.0;
  (%12,)
}

def @func_7813() -> Tensor[(7, 14, 4), float32] {
  @func_1673() /* ty=Tensor[(7, 14, 4), float32] */
}

def @func_8362() -> (Tensor[(7, 14, 4), float32], Tensor[(11, 11, 7), int32], Tensor[(7, 14, 4), float32]) {
  %13 = @func_856() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %14 = %13.0;
  %15 = cast(%14, dtype="float32") /* ty=Tensor[(7, 14, 4), float32] */;
  %16 = reshape(%15, newshape=[7, 14, 4]) /* ty=Tensor[(7, 14, 4), float32] */;
  %17 = @func_1279(%16) /* ty=(Tensor[(7, 14, 4), uint16], Tensor[(11, 11, 7), int32], Tensor[(847), int32]) */;
  %18 = %17.1;
  %19 = @func_2511() /* ty=Tensor[(7, 14, 4), float32] */;
  (%14, %18, %19)
}

def @func_2247(%var_2207: Tensor[(847), int32]) -> (Tensor[(7, 14, 4), float32], Tensor[(60), float64], Tensor[(7, 14, 4), float64], Tensor[(11, 11, 7), int32], Tensor[(847), int32], Tensor[(10, 6, 1), float32], Tensor[(7, 14, 4), float32]) {
  %20 = @func_856() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %21 = cast(%var_2207, dtype="int32") /* ty=Tensor[(847), int32] */;
  %22 = reshape(%21, newshape=[847]) /* ty=Tensor[(847), int32] */;
  %23 = @func_1087(%22) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(11, 11, 7), int32], Tensor[(847), int32], Tensor[(7, 14, 4), float32]) */;
  %24 = cast(meta[relay.Constant][0] /* ty=Tensor[(60), float64] */, dtype="float64") /* ty=Tensor[(60), float64] */;
  %25 = reshape(%24, newshape=[10, 6, 1]) /* ty=Tensor[(10, 6, 1), float64] */;
  %26 = @func_1577(%25) /* ty=Tensor[(10, 6, 1), float64] */;
  %27 = cast(%26, dtype="float32") /* ty=Tensor[(10, 6, 1), float32] */;
  %28 = cast(%var_2207, dtype="int32") /* ty=Tensor[(847), int32] */;
  %29 = reshape(%28, newshape=[847]) /* ty=Tensor[(847), int32] */;
  %30 = @func_1222(%29) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(847), uint64]) */;
  %31 = %20.0;
  %32 = @func_1322() /* ty=Tensor[(7, 14, 4), float64] */;
  %33 = %23.1;
  %34 = log(%27) /* ty=Tensor[(10, 6, 1), float32] */;
  %35 = %30.1;
  (%31, meta[relay.Constant][0] /* ty=Tensor[(60), float64] */, %32, %33, %var_2207, %34, %35)
}

def @func_7587() -> (Tensor[(7, 14, 4), float32], Tensor[(780), uint8], Tensor[(847), float32], Tensor[(7, 14, 4), float32], Tensor[(60), float64], Tensor[(60, 1), float64]) {
  %36 = @func_1126() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %37 = cast(meta[relay.Constant][1] /* ty=Tensor[(847), int32] */, dtype="int32") /* ty=Tensor[(847), int32] */;
  %38 = reshape(%37, newshape=[847]) /* ty=Tensor[(847), int32] */;
  %39 = @func_1426(%38) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(780), uint8], Tensor[(780), uint8], Tensor[(63, 2), uint8], Tensor[(7, 14, 4), float32], Tensor[(847), int32]) */;
  %40 = cast(meta[relay.Constant][1] /* ty=Tensor[(847), int32] */, dtype="float32") /* ty=Tensor[(847), float32] */;
  %41 = cast(meta[relay.Constant][2] /* ty=Tensor[(60, 1), float64] */, dtype="float64") /* ty=Tensor[(60, 1), float64] */;
  %42 = log10(%40) /* ty=Tensor[(847), float32] */;
  %43 = cast(%42, dtype="int32") /* ty=Tensor[(847), int32] */;
  %44 = reshape(%41, newshape=[60]) /* ty=Tensor[(60), float64] */;
  %45 = reshape(%43, newshape=[847]) /* ty=Tensor[(847), int32] */;
  %46 = @func_6460(%44, %45) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(1755), int8], Tensor[(7, 14, 4), float32], Tensor[(660), float64], Tensor[(60), float64], Tensor[(780), uint8], Tensor[(847), int32]) */;
  %47 = %36.0;
  %48 = %39.2;
  %49 = @func_5279() /* ty=Tensor[(7, 14, 4), float32] */;
  %50 = %46.5;
  (%47, %48, %42, %49, %50, meta[relay.Constant][2] /* ty=Tensor[(60, 1), float64] */)
}

def @func_647(%var_642: Tensor[(13, 10, 6), uint8]) -> Tensor[(13, 10, 6), uint8] {
  %51 = cast(meta[relay.Constant][3] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %52 = cast(%var_642, dtype="uint8") /* ty=Tensor[(13, 10, 6), uint8] */;
  bitwise_or(%51, %52) /* ty=Tensor[(13, 10, 6), uint8] */
}

def @func_1126() -> (Tensor[(7, 14, 4), float32],) {
  %53 = @func_856() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %54 = %53.0;
  (%54,)
}

def @func_2607() -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) {
  %55 = @func_2049() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64]) */;
  %56 = @func_2468() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %57 = @func_1303() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %58 = %57.0;
  %59 = cast(%58, dtype="float32") /* ty=Tensor[(7, 14, 4), float32] */;
  %60 = %55.0;
  %61 = %56.0;
  %62 = sin(%59) /* ty=Tensor[(7, 14, 4), float32] */;
  %63 = @func_1749() /* ty=Tensor[(7, 14, 4), float32] */;
  (%60, %61, %62, %63)
}

def @func_3884() -> Tensor[(7, 14, 4), float32] {
  @func_1626() /* ty=Tensor[(7, 14, 4), float32] */
}

def @func_1038(%var_1029: Tensor[(9, 7, 2), uint8], %var_1036: Tensor[(780), uint8]) -> (Tensor[(9, 7, 2), uint8], Tensor[(13, 10, 6), uint8], Tensor[(780), uint8]) {
  %64 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 7, 2), uint8] */, dtype="uint8") /* ty=Tensor[(1, 7, 2), uint8] */;
  %65 = cast(%var_1029, dtype="uint8") /* ty=Tensor[(9, 7, 2), uint8] */;
  %66 = cast(%var_1036, dtype="uint8") /* ty=Tensor[(780), uint8] */;
  %67 = reshape(%66, newshape=[390, 2]) /* ty=Tensor[(390, 2), uint8] */;
  %68 = @func_931(%67) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(13, 10, 6), uint8], Tensor[(390, 2), uint8]) */;
  %69 = bitwise_xor(%64, %65) /* ty=Tensor[(9, 7, 2), uint8] */;
  %70 = %68.2;
  (%69, %70, %var_1036)
}

def @func_7675() -> (Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), uint16]) {
  %71 = @func_2049() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64]) */;
  %72 = @func_7205() /* ty=(Tensor[(7, 14, 4), uint16],) */;
  %73 = %71.1;
  %74 = %72.0;
  (%73, %74)
}

def @func_2168(%var_2103: float32, %var_2104: Tensor[(1, 9, 12), float32]) -> (Tensor[(1, 9, 12), bool], Tensor[(7, 14, 4), float64], Tensor[(?, 9, 12), float64]) {
  %75 = cast(%var_2103, dtype="bool") /* ty=bool */;
  %76 = cast(%var_2104, dtype="bool") /* ty=Tensor[(1, 9, 12), bool] */;
  %77 = cast(%var_2104, dtype="float64") /* ty=Tensor[(1, 9, 12), float64] */;
  %78 = log(%77) /* ty=Tensor[(1, 9, 12), float64] */;
  %79 = cast(%var_2104, dtype="float64") /* ty=Tensor[(1, 9, 12), float64] */;
  %80 = shape_of(%78, dtype="int32") /* ty=Tensor[(3), int32] */;
  %81 = cast(%78, dtype="float64") /* ty=Tensor[(1, 9, 12), float64] */;
  %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %83 = equal(%75, %76) /* ty=Tensor[(1, 9, 12), bool] */;
  %84 = @func_1322() /* ty=Tensor[(7, 14, 4), float64] */;
  %85 = floor_divide(%81, %82) /* ty=Tensor[(?, 9, 12), float64] */;
  (%83, %84, %85)
}

def @func_1553(%var_1469: Tensor[(77, 11), int32], %var_1508: Tensor[(77, 11), float32]) -> (Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32], Tensor[(77, 11), float32], Tensor[(7, 14, 4), float32], Tensor[(780), uint8], Tensor[(77, 11), bool], Tensor[(780), uint8], Tensor[(77, 11), float32], Tensor[(77, 11), float32]) {
  %86 = cast(%var_1469, dtype="int32") /* ty=Tensor[(77, 11), int32] */;
  %87 = reshape(%86, newshape=[847]) /* ty=Tensor[(847), int32] */;
  %88 = @func_1426(%87) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(780), uint8], Tensor[(780), uint8], Tensor[(63, 2), uint8], Tensor[(7, 14, 4), float32], Tensor[(847), int32]) */;
  %89 = cast(meta[relay.Constant][5] /* ty=Tensor[(77, 11), int32] */, dtype="float32") /* ty=Tensor[(77, 11), float32] */;
  %90 = shape_of(%var_1469, dtype="int32") /* ty=Tensor[(2), int32] */;
  %91 = cast(%var_1469, dtype="float32") /* ty=Tensor[(77, 11), float32] */;
  %92 = dyn.reshape(%89, %90, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %93 = cast(meta[relay.Constant][6] /* ty=Tensor[(780), uint8] */, dtype="uint8") /* ty=Tensor[(780), uint8] */;
  %94 = reshape(%93, newshape=[390, 2]) /* ty=Tensor[(390, 2), uint8] */;
  %95 = @func_931(%94) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(13, 10, 6), uint8], Tensor[(390, 2), uint8]) */;
  %96 = cast(meta[relay.Constant][5] /* ty=Tensor[(77, 11), int32] */, dtype="float32") /* ty=Tensor[(77, 11), float32] */;
  %97 = sin(%96) /* ty=Tensor[(77, 11), float32] */;
  %98 = cast(meta[relay.Constant][5] /* ty=Tensor[(77, 11), int32] */, dtype="float32") /* ty=Tensor[(77, 11), float32] */;
  %99 = shape_of(%97, dtype="int32") /* ty=Tensor[(2), int32] */;
  %100 = cast(%97, dtype="float32") /* ty=Tensor[(77, 11), float32] */;
  %101 = dyn.reshape(%98, %99, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %102 = floor_mod(%100, %101) /* ty=Tensor[(77, 11), float32] */;
  %103 = cast(%var_1508, dtype="bool") /* ty=Tensor[(77, 11), bool] */;
  %104 = shape_of(%102, dtype="int32") /* ty=Tensor[(2), int32] */;
  %105 = cast(%102, dtype="bool") /* ty=Tensor[(77, 11), bool] */;
  %106 = dyn.reshape(%103, %104, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %107 = divide(%91, %92) /* ty=Tensor[(77, 11), float32] */;
  %108 = cast(%107, dtype="int32") /* ty=Tensor[(77, 11), int32] */;
  %109 = reshape(%108, newshape=[847]) /* ty=Tensor[(847), int32] */;
  %110 = @func_1426(%109) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(780), uint8], Tensor[(780), uint8], Tensor[(63, 2), uint8], Tensor[(7, 14, 4), float32], Tensor[(847), int32]) */;
  %111 = cast(%var_1469, dtype="float32") /* ty=Tensor[(77, 11), float32] */;
  %112 = cast(%97, dtype="float32") /* ty=Tensor[(77, 11), float32] */;
  %113 = @func_1322() /* ty=Tensor[(7, 14, 4), float64] */;
  %114 = %88.0;
  %115 = %95.0;
  %116 = not_equal(%105, %106) /* ty=Tensor[(77, 11), bool] */;
  %117 = %110.2;
  %118 = atan(%111) /* ty=Tensor[(77, 11), float32] */;
  %119 = log(%112) /* ty=Tensor[(77, 11), float32] */;
  (%113, %114, %107, %115, meta[relay.Constant][6] /* ty=Tensor[(780), uint8] */, %116, %117, %118, %119)
}

def @func_7194() -> (Tensor[(10, 3, 13), float32], Tensor[(780, 5), bool], Tensor[(3900), uint8]) {
  %120 = cast(meta[relay.Constant][7] /* ty=Tensor[(3900), uint8] */, dtype="uint8") /* ty=Tensor[(3900), uint8] */;
  %121 = reshape(%120, newshape=[780, 5]) /* ty=Tensor[(780, 5), uint8] */;
  %122 = @func_2954(%121) /* ty=(Tensor[(780, 5), bool],) */;
  %123 = @func_4758() /* ty=Tensor[(10, 3, 13), float32] */;
  %124 = %122.0;
  (%123, %124, meta[relay.Constant][7] /* ty=Tensor[(3900), uint8] */)
}

def @func_7222(%var_7208: Tensor[(1, 15, 15), int16]) -> (Tensor[(?, 15, 15), bool], Tensor[(?, 15, 15), bool], Tensor[(7, 14, 4), float32], Tensor[(1, 660), float64]) {
  %125 = cast(meta[relay.Constant][8] /* ty=Tensor[(1, 15, 15), int16] */, dtype="bool") /* ty=Tensor[(1, 15, 15), bool] */;
  %126 = shape_of(%var_7208, dtype="int32") /* ty=Tensor[(3), int32] */;
  %127 = cast(%var_7208, dtype="bool") /* ty=Tensor[(1, 15, 15), bool] */;
  %128 = dyn.reshape(%125, %126, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %129 = cast(meta[relay.Constant][8] /* ty=Tensor[(1, 15, 15), int16] */, dtype="bool") /* ty=Tensor[(1, 15, 15), bool] */;
  %130 = shape_of(%var_7208, dtype="int32") /* ty=Tensor[(3), int32] */;
  %131 = cast(%var_7208, dtype="bool") /* ty=Tensor[(1, 15, 15), bool] */;
  %132 = dyn.reshape(%129, %130, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %133 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 660), float64] */, dtype="float64") /* ty=Tensor[(1, 660), float64] */;
  %134 = reshape(%133, newshape=[11, 12, 5]) /* ty=Tensor[(11, 12, 5), float64] */;
  %135 = @func_2321(%134) /* ty=(Tensor[(11, 12, 5), float64], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32]) */;
  %136 = not_equal(%127, %128) /* ty=Tensor[(?, 15, 15), bool] */;
  %137 = less(%131, %132) /* ty=Tensor[(?, 15, 15), bool] */;
  %138 = %135.3;
  (%136, %137, %138, meta[relay.Constant][9] /* ty=Tensor[(1, 660), float64] */)
}

def @func_1279(%var_1255: Tensor[(7, 14, 4), float32]) -> (Tensor[(7, 14, 4), uint16], Tensor[(11, 11, 7), int32], Tensor[(847), int32]) {
  %139 = @func_856() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %140 = %139.0;
  %141 = cast(%var_1255, dtype="uint16") /* ty=Tensor[(7, 14, 4), uint16] */;
  %142 = shape_of(%140, dtype="int32") /* ty=Tensor[(3), int32] */;
  %143 = cast(%140, dtype="uint16") /* ty=Tensor[(7, 14, 4), uint16] */;
  %144 = dyn.reshape(%141, %142, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %145 = cast(meta[relay.Constant][10] /* ty=Tensor[(847), int32] */, dtype="int32") /* ty=Tensor[(847), int32] */;
  %146 = reshape(%145, newshape=[11, 11, 7]) /* ty=Tensor[(11, 11, 7), int32] */;
  %147 = bitwise_or(%143, %144) /* ty=Tensor[(7, 14, 4), uint16] */;
  %148 = @func_807(%146) /* ty=Tensor[(11, 11, 7), int32] */;
  (%147, %148, meta[relay.Constant][10] /* ty=Tensor[(847), int32] */)
}

def @func_2379() -> (Tensor[(7, 14, 4), float32], Tensor[(13, 10, 6), uint8], Tensor[(780, 1), uint8]) {
  %149 = @func_2049() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64]) */;
  %150 = cast(meta[relay.Constant][11] /* ty=Tensor[(780, 1), uint8] */, dtype="uint8") /* ty=Tensor[(780, 1), uint8] */;
  %151 = reshape(%150, newshape=[13, 10, 6]) /* ty=Tensor[(13, 10, 6), uint8] */;
  %152 = %149.0;
  %153 = @func_647(%151) /* ty=Tensor[(13, 10, 6), uint8] */;
  (%152, %153, meta[relay.Constant][11] /* ty=Tensor[(780, 1), uint8] */)
}

def @func_9089() -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(780, ?), bool]) {
  %154 = @func_2881() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %155 = @func_6130() /* ty=Tensor[(780, 1), uint8] */;
  %156 = cast(%155, dtype="float32") /* ty=Tensor[(780, 1), float32] */;
  %157 = cos(%156) /* ty=Tensor[(780, 1), float32] */;
  %158 = cast(%155, dtype="float32") /* ty=Tensor[(780, 1), float32] */;
  %159 = shape_of(%157, dtype="int32") /* ty=Tensor[(2), int32] */;
  %160 = cast(%157, dtype="float32") /* ty=Tensor[(780, 1), float32] */;
  %161 = dyn.reshape(%158, %159, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %162 = floor_mod(%160, %161) /* ty=Tensor[(780, ?), float32] */;
  %163 = cast(%157, dtype="bool") /* ty=Tensor[(780, 1), bool] */;
  %164 = shape_of(%162, dtype="int32") /* ty=Tensor[(2), int32] */;
  %165 = cast(%162, dtype="bool") /* ty=Tensor[(780, ?), bool] */;
  %166 = dyn.reshape(%163, %164, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %167 = @func_1626() /* ty=Tensor[(7, 14, 4), float32] */;
  %168 = %154.0;
  %169 = greater(%165, %166) /* ty=Tensor[(780, ?), bool] */;
  (%167, %168, %169)
}

def @func_8988() -> Tensor[(7, 14, 4), float32] {
  %170 = @func_7442() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */;
  %170.0
}

def @func_2263() -> Tensor[(7, 14, 4), float32] {
  @func_1673() /* ty=Tensor[(7, 14, 4), float32] */
}

def @func_1664(%var_1644: Tensor[(7, 14, 4), float64]) -> Tensor[(7, 14, 4), bool] {
  %171 = @func_1322() /* ty=Tensor[(7, 14, 4), float64] */;
  %172 = cast(%var_1644, dtype="bool") /* ty=Tensor[(7, 14, 4), bool] */;
  %173 = shape_of(%171, dtype="int32") /* ty=Tensor[(3), int32] */;
  %174 = cast(%171, dtype="bool") /* ty=Tensor[(7, 14, 4), bool] */;
  %175 = dyn.reshape(%172, %173, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%174, %175) /* ty=Tensor[(7, 14, 4), bool] */
}

def @func_2707(%var_2637: Tensor[(9, 15, 13), int8], %var_2638: Tensor[(9, 15, 13), int8]) -> (Tensor[(9, 15, 13), int32], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32]) {
  %176 = cast(%var_2638, dtype="bool") /* ty=Tensor[(9, 15, 13), bool] */;
  %177 = shape_of(%var_2637, dtype="int32") /* ty=Tensor[(3), int32] */;
  %178 = cast(%var_2637, dtype="bool") /* ty=Tensor[(9, 15, 13), bool] */;
  %179 = dyn.reshape(%176, %177, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %180 = less(%178, %179) /* ty=Tensor[(9, 15, 13), bool] */;
  %181 = cast(meta[relay.Constant][12] /* ty=Tensor[(9, 15, 13), bool] */, dtype="int32") /* ty=Tensor[(9, 15, 13), int32] */;
  %182 = shape_of(%180, dtype="int32") /* ty=Tensor[(3), int32] */;
  %183 = cast(%180, dtype="int32") /* ty=Tensor[(9, 15, 13), int32] */;
  %184 = dyn.reshape(%181, %182, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %185 = @func_988() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %186 = bitwise_or(%183, %184) /* ty=Tensor[(9, 15, 13), int32] */;
  %187 = @func_1322() /* ty=Tensor[(7, 14, 4), float64] */;
  %188 = %185.0;
  (%186, %187, %188)
}

def @func_8692(%var_8688: Tensor[(10, 66), float64]) -> (Tensor[(780, 1), uint8], Tensor[(7, 14, 4), float32], Tensor[(10, 66), float64], Tensor[(7800), float32]) {
  %189 = @func_2444() /* ty=(Tensor[(780, 1), uint8],) */;
  %190 = cast(%var_8688, dtype="float64") /* ty=Tensor[(10, 66), float64] */;
  %191 = cast(meta[relay.Constant][13] /* ty=Tensor[(7800), float32] */, dtype="float32") /* ty=Tensor[(7800), float32] */;
  %192 = reshape(%190, newshape=[660]) /* ty=Tensor[(660), float64] */;
  %193 = reshape(%191, newshape=[7800]) /* ty=Tensor[(7800), float32] */;
  %194 = @func_3845(%192, %193) /* ty=(Tensor[(7, 14, 4), bool], Tensor[(11, 12, 5), float64], Tensor[(660), float64], Tensor[(7, 14, 4), float32], Tensor[(7800), float64], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7800), float64]) */;
  %195 = %189.0;
  %196 = %194.5;
  (%195, %196, %var_8688, meta[relay.Constant][13] /* ty=Tensor[(7800), float32] */)
}

def @func_4675() -> (Tensor[(780, ?), bool],) {
  %197 = @func_2379() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(13, 10, 6), uint8], Tensor[(780, 1), uint8]) */;
  %198 = %197.2;
  %199 = cast(%198, dtype="float32") /* ty=Tensor[(780, 1), float32] */;
  %200 = log10(%199) /* ty=Tensor[(780, 1), float32] */;
  %201 = cast(%198, dtype="bool") /* ty=Tensor[(780, 1), bool] */;
  %202 = shape_of(%200, dtype="int32") /* ty=Tensor[(2), int32] */;
  %203 = cast(%200, dtype="bool") /* ty=Tensor[(780, 1), bool] */;
  %204 = dyn.reshape(%201, %202, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %205 = greater_equal(%203, %204) /* ty=Tensor[(780, ?), bool] */;
  (%205,)
}

def @func_1087(%var_1050: Tensor[(847), int32]) -> (Tensor[(7, 14, 4), float32], Tensor[(11, 11, 7), int32], Tensor[(847), int32], Tensor[(7, 14, 4), float32]) {
  %206 = @func_856() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %207 = cast(%var_1050, dtype="int32") /* ty=Tensor[(847), int32] */;
  %208 = reshape(%207, newshape=[11, 11, 7]) /* ty=Tensor[(11, 11, 7), int32] */;
  %209 = @func_856() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %210 = %206.0;
  %211 = @func_807(%208) /* ty=Tensor[(11, 11, 7), int32] */;
  %212 = %209.0;
  (%210, %211, %var_1050, %212)
}

def @func_3722() -> Tensor[(10, 3, 13), bool] {
  %213 = cast(meta[relay.Constant][15] /* ty=Tensor[(10, 3, 13), int16] */, dtype="bool") /* ty=Tensor[(10, 3, 13), bool] */;
  %214 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(10, 3, 13), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %215 = cast(meta[relay.Constant][14] /* ty=Tensor[(10, 3, 13), int16] */, dtype="bool") /* ty=Tensor[(10, 3, 13), bool] */;
  %216 = dyn.reshape(%213, %214, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%215, %216) /* ty=Tensor[(10, 3, 13), bool] */
}

def @func_2444() -> (Tensor[(780, 1), uint8],) {
  %217 = @func_2379() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(13, 10, 6), uint8], Tensor[(780, 1), uint8]) */;
  %218 = %217.2;
  (%218,)
}

def @func_5842() -> (Tensor[(7, 14, 4), float32],) {
  %219 = @func_5242() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %220 = %219.0;
  (%220,)
}

def @func_2894() -> (Tensor[(7, 14, 4), float32], Tensor[(63, 2), uint8], Tensor[(847), int32], Tensor[(7, 14, 4), float32]) {
  %221 = @func_2881() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %222 = cast(meta[relay.Constant][16] /* ty=Tensor[(847), int32] */, dtype="int32") /* ty=Tensor[(847), int32] */;
  %223 = reshape(%222, newshape=[847]) /* ty=Tensor[(847), int32] */;
  %224 = @func_1426(%223) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(780), uint8], Tensor[(780), uint8], Tensor[(63, 2), uint8], Tensor[(7, 14, 4), float32], Tensor[(847), int32]) */;
  %225 = @func_1931() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(13, 10, 6), uint8], Tensor[(780), uint8], Tensor[(7, 14, 4), uint16]) */;
  %226 = %221.0;
  %227 = %224.4;
  %228 = %225.1;
  (%226, %227, meta[relay.Constant][16] /* ty=Tensor[(847), int32] */, %228)
}

def @func_5279() -> Tensor[(7, 14, 4), float32] {
  @func_4990() /* ty=Tensor[(7, 14, 4), float32] */
}

def @func_6597() -> Tensor[(7, 14, 4), float32] {
  %229 = @func_988() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %229.0
}

def @func_4975() -> (Tensor[(7, 14, 4), float32],) {
  %230 = @func_988() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %231 = %230.0;
  (%231,)
}

def @func_4214(%var_4206: Tensor[(1755), int8]) -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32], Tensor[(1755), int8]) {
  %232 = @func_2881() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %233 = @func_1822() /* ty=(Tensor[(11, 11, 7), int32], Tensor[(847), int32], Tensor[(7, 14, 4), uint64], Tensor[(7, 14, 4), float64]) */;
  %234 = cast(%var_4206, dtype="int8") /* ty=Tensor[(1755), int8] */;
  %235 = cast(%var_4206, dtype="int8") /* ty=Tensor[(1755), int8] */;
  %236 = reshape(%234, newshape=[9, 15, 13]) /* ty=Tensor[(9, 15, 13), int8] */;
  %237 = reshape(%235, newshape=[9, 15, 13]) /* ty=Tensor[(9, 15, 13), int8] */;
  %238 = @func_2707(%236, %237) /* ty=(Tensor[(9, 15, 13), int32], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32]) */;
  %239 = %232.0;
  %240 = %233.3;
  %241 = %238.2;
  (%239, %240, %241, %var_4206)
}

def @func_7394(%var_7376: Tensor[(60), float64], %var_7378: Tensor[(847), int32], %var_7379: Tensor[(3900), uint8]) -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32], Tensor[(60), float64], Tensor[(780, 1), uint8], Tensor[(847), int32], Tensor[(3900), uint8], Tensor[(7, 14, 4), float32]) {
  %242 = @func_3884() /* ty=Tensor[(7, 14, 4), float32] */;
  %243 = cast(%242, dtype="float32") /* ty=Tensor[(7, 14, 4), float32] */;
  %244 = reshape(%243, newshape=[7, 14, 4]) /* ty=Tensor[(7, 14, 4), float32] */;
  %245 = @func_6177(%244) /* ty=(Tensor[(7, 14, 4), bool], Tensor[(780, ?), int8], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64]) */;
  %246 = @func_5242() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %247 = cast(%var_7376, dtype="float64") /* ty=Tensor[(60), float64] */;
  %248 = cast(meta[relay.Constant][17] /* ty=Tensor[(780, 1), uint8] */, dtype="uint8") /* ty=Tensor[(780, 1), uint8] */;
  %249 = cast(%var_7378, dtype="int32") /* ty=Tensor[(847), int32] */;
  %250 = cast(%var_7379, dtype="uint8") /* ty=Tensor[(3900), uint8] */;
  %251 = cast(%var_7378, dtype="float32") /* ty=Tensor[(847), float32] */;
  %252 = reshape(%247, newshape=[60]) /* ty=Tensor[(60), float64] */;
  %253 = reshape(%248, newshape=[780]) /* ty=Tensor[(780), uint8] */;
  %254 = reshape(%249, newshape=[847]) /* ty=Tensor[(847), int32] */;
  %255 = reshape(%250, newshape=[3900]) /* ty=Tensor[(3900), uint8] */;
  %256 = reshape(%251, newshape=[847]) /* ty=Tensor[(847), float32] */;
  %257 = @func_7077(%252, %253, %254, %255, %256) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7800), float32], Tensor[(60), float64], Tensor[(780), uint8], Tensor[(7, 14, 4), float32], Tensor[(3900), uint8], Tensor[(847), float64], Tensor[(847), float64]) */;
  %258 = %245.4;
  %259 = %246.0;
  %260 = @func_1322() /* ty=Tensor[(7, 14, 4), float64] */;
  %261 = %257.0;
  %262 = @func_5122() /* ty=Tensor[(7, 14, 4), float32] */;
  (%242, %258, %259, %260, %261, %var_7376, meta[relay.Constant][17] /* ty=Tensor[(780, 1), uint8] */, %var_7378, %var_7379, %262)
}

def @func_6503(%var_6488: Tensor[(847), int32]) -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(847, ?), int64], Tensor[(847), int32], Tensor[(7, 14, 4), uint16]) {
  %263 = @func_2881() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %264 = cast(%var_6488, dtype="int32") /* ty=Tensor[(847), int32] */;
  %265 = reshape(%264, newshape=[847, 1]) /* ty=Tensor[(847, 1), int32] */;
  %266 = @func_5437(%265) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(847, ?), int64]) */;
  %267 = @func_6125() /* ty=(Tensor[(7, 14, 4), uint16],) */;
  %268 = %263.0;
  %269 = @func_3884() /* ty=Tensor[(7, 14, 4), float32] */;
  %270 = %266.2;
  %271 = %267.0;
  (%268, %269, %270, %var_6488, %271)
}

def @func_8051() -> Tensor[(7, 14, 4), float32] {
  %272 = @func_2881() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %272.0
}

def @func_8892() -> (Tensor[(121), int64],) {
  %273 = @func_8502() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(11, 11, 15), int64], Tensor[(121), int64], Tensor[(1815), int64]) */;
  %274 = %273.5;
  (%274,)
}

def @func_5178() -> (Tensor[(7, 14, 4), uint16],) {
  %275 = @func_1931() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(13, 10, 6), uint8], Tensor[(780), uint8], Tensor[(7, 14, 4), uint16]) */;
  %276 = %275.4;
  (%276,)
}

def @func_6047(%var_5983: Tensor[(11, 11, 1), int64], %var_5984: Tensor[(11, 11, 15), int64]) -> (Tensor[(11, 11, 15), int64], Tensor[(11, 11, 15), float32], Tensor[(11, 11, 15), bool], Tensor[(13, 10, 6), uint8], Tensor[(5, 156), uint8]) {
  %277 = cast(%var_5983, dtype="int64") /* ty=Tensor[(11, 11, 1), int64] */;
  %278 = cast(%var_5984, dtype="int64") /* ty=Tensor[(11, 11, 15), int64] */;
  %279 = cast(%var_5984, dtype="float32") /* ty=Tensor[(11, 11, 15), float32] */;
  %280 = cast(%var_5983, dtype="float32") /* ty=Tensor[(11, 11, 1), float32] */;
  %281 = log(%280) /* ty=Tensor[(11, 11, 1), float32] */;
  %282 = cast(%281, dtype="bool") /* ty=Tensor[(11, 11, 1), bool] */;
  %283 = cast(%var_5984, dtype="bool") /* ty=Tensor[(11, 11, 15), bool] */;
  %284 = cast(meta[relay.Constant][18] /* ty=Tensor[(5, 156), uint8] */, dtype="uint8") /* ty=Tensor[(5, 156), uint8] */;
  %285 = reshape(%284, newshape=[13, 10, 6]) /* ty=Tensor[(13, 10, 6), uint8] */;
  %286 = bitwise_and(%277, %278) /* ty=Tensor[(11, 11, 15), int64] */;
  %287 = atanh(%279) /* ty=Tensor[(11, 11, 15), float32] */;
  %288 = greater_equal(%282, %283) /* ty=Tensor[(11, 11, 15), bool] */;
  %289 = @func_647(%285) /* ty=Tensor[(13, 10, 6), uint8] */;
  (%286, %287, %288, %289, meta[relay.Constant][18] /* ty=Tensor[(5, 156), uint8] */)
}

def @func_3005() -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) {
  %290 = @func_1126() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %291 = @func_1673() /* ty=Tensor[(7, 14, 4), float32] */;
  %292 = @func_2263() /* ty=Tensor[(7, 14, 4), float32] */;
  %293 = %290.0;
  (%291, %292, %293)
}

def @func_9610() -> Tensor[(7, 14, 4), float32] {
  %294 = @func_8502() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(11, 11, 15), int64], Tensor[(121), int64], Tensor[(1815), int64]) */;
  %294.1
}

def @func_2881() -> (Tensor[(7, 14, 4), float32],) {
  %295 = @func_2511() /* ty=Tensor[(7, 14, 4), float32] */;
  (%295,)
}

def @func_7312(%var_7268: float32, %var_7269: Tensor[(108), float32]) -> (Tensor[(847), int32], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32], Tensor[(1, 9, 12), bool], float32, Tensor[(108), float32], Tensor[(7, 14, 4), float32], Tensor[(780, 1), uint8]) {
  %296 = @func_4386() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */;
  %297 = %296.1;
  %298 = cast(%297, dtype="float32") /* ty=Tensor[(7, 14, 4), float32] */;
  %299 = reshape(%298, newshape=[7, 14, 4]) /* ty=Tensor[(7, 14, 4), float32] */;
  %300 = @func_1279(%299) /* ty=(Tensor[(7, 14, 4), uint16], Tensor[(11, 11, 7), int32], Tensor[(847), int32]) */;
  %301 = cast(%297, dtype="float64") /* ty=Tensor[(7, 14, 4), float64] */;
  %302 = cast(%var_7268, dtype="float32") /* ty=float32 */;
  %303 = cast(%var_7269, dtype="float32") /* ty=Tensor[(108), float32] */;
  %304 = reshape(%302, newshape=[]) /* ty=float32 */;
  %305 = reshape(%303, newshape=[1, 9, 12]) /* ty=Tensor[(1, 9, 12), float32] */;
  %306 = @func_2168(%304, %305) /* ty=(Tensor[(1, 9, 12), bool], Tensor[(7, 14, 4), float64], Tensor[(?, 9, 12), float64]) */;
  %307 = %300.2;
  %308 = cast(%307, dtype="int32") /* ty=Tensor[(847), int32] */;
  %309 = reshape(%308, newshape=[847]) /* ty=Tensor[(847), int32] */;
  %310 = @func_2247(%309) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(60), float64], Tensor[(7, 14, 4), float64], Tensor[(11, 11, 7), int32], Tensor[(847), int32], Tensor[(10, 6, 1), float32], Tensor[(7, 14, 4), float32]) */;
  %311 = @func_2379() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(13, 10, 6), uint8], Tensor[(780, 1), uint8]) */;
  %312 = atanh(%301) /* ty=Tensor[(7, 14, 4), float64] */;
  %313 = @func_2263() /* ty=Tensor[(7, 14, 4), float32] */;
  %314 = %306.0;
  %315 = %310.0;
  %316 = %311.2;
  (%307, %312, %313, %314, %var_7268, %var_7269, %315, %316)
}

def @func_8826() -> (Tensor[(7, 14, 4), float32],) {
  %317 = @func_4118() /* ty=Tensor[(7, 14, 4), float32] */;
  (%317,)
}

def @func_5122() -> Tensor[(7, 14, 4), float32] {
  @func_4990() /* ty=Tensor[(7, 14, 4), float32] */
}

def @func_10036() -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), uint16], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) {
  %318 = @func_5608() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */;
  %319 = @func_7472() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(390, 2), uint8], Tensor[(780), uint8], Tensor[(7, 14, 4), uint16]) */;
  %320 = @func_5940() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */;
  %321 = @func_1126() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %322 = %318.0;
  %323 = %319.4;
  %324 = %320.0;
  %325 = %321.0;
  (%322, %323, %324, %325)
}

def @func_3293(%var_3277: Tensor[(3900), uint8], %var_3288: Tensor[(780, 5), bool]) -> (Tensor[(13, 10, 6), uint8], Tensor[(3900), uint8], Tensor[(780, 5), bool]) {
  %326 = @func_2379() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(13, 10, 6), uint8], Tensor[(780, 1), uint8]) */;
  %327 = cast(%var_3277, dtype="uint8") /* ty=Tensor[(3900), uint8] */;
  %328 = reshape(%327, newshape=[780, 5]) /* ty=Tensor[(780, 5), uint8] */;
  %329 = @func_2954(%328) /* ty=(Tensor[(780, 5), bool],) */;
  %330 = %329.0;
  %331 = cast(%var_3288, dtype="bool") /* ty=Tensor[(780, 5), bool] */;
  %332 = shape_of(%330, dtype="int32") /* ty=Tensor[(2), int32] */;
  %333 = cast(%330, dtype="bool") /* ty=Tensor[(780, 5), bool] */;
  %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %335 = %326.1;
  %336 = less_equal(%333, %334) /* ty=Tensor[(780, 5), bool] */;
  (%335, %var_3277, %336)
}

def @func_5742(%var_5711: Tensor[(7, 14, 4), float32]) -> (Tensor[(7, 14, 4), uint64], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), int8], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) {
  %337 = @func_1822() /* ty=(Tensor[(11, 11, 7), int32], Tensor[(847), int32], Tensor[(7, 14, 4), uint64], Tensor[(7, 14, 4), float64]) */;
  %338 = @func_3005() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */;
  %339 = @func_3929() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %340 = %339.0;
  %341 = cast(%340, dtype="float32") /* ty=Tensor[(7, 14, 4), float32] */;
  %342 = erf(%341) /* ty=Tensor[(7, 14, 4), float32] */;
  %343 = cast(%var_5711, dtype="int8") /* ty=Tensor[(7, 14, 4), int8] */;
  %344 = shape_of(%342, dtype="int32") /* ty=Tensor[(3), int32] */;
  %345 = cast(%342, dtype="int8") /* ty=Tensor[(7, 14, 4), int8] */;
  %346 = dyn.reshape(%343, %344, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %347 = @func_3005() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */;
  %348 = %337.2;
  %349 = %338.2;
  %350 = @func_4990() /* ty=Tensor[(7, 14, 4), float32] */;
  %351 = @func_1322() /* ty=Tensor[(7, 14, 4), float64] */;
  %352 = right_shift(%345, %346) /* ty=Tensor[(7, 14, 4), int8] */;
  %353 = @func_4990() /* ty=Tensor[(7, 14, 4), float32] */;
  %354 = %347.1;
  (%348, %349, %350, %351, %352, %353, %354)
}

def @func_9347() -> Tensor[(7, 14, 4), float32] {
  %355 = @func_4743() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %355.0
}

def @func_3929() -> (Tensor[(7, 14, 4), float32],) {
  %356 = @func_1126() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %357 = %356.0;
  (%357,)
}

def @func_6223() -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) {
  %358 = @func_988() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %359 = @func_856() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %360 = %358.0;
  %361 = %359.0;
  (%360, %361)
}

def @func_9820() -> Tensor[(7, 14, 4), float32] {
  %362 = @func_6802() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(10, 3, 13), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */;
  %362.0
}

def @func_8067() -> (Tensor[(7, 14, 4), float32],) {
  %363 = @func_7508() /* ty=Tensor[(7, 14, 4), float32] */;
  (%363,)
}

def @func_5608() -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) {
  %364 = @func_2511() /* ty=Tensor[(7, 14, 4), float32] */;
  %365 = @func_3884() /* ty=Tensor[(7, 14, 4), float32] */;
  (%364, %365)
}

def @func_4758() -> Tensor[(10, 3, 13), float32] {
  %366 = @func_3722() /* ty=Tensor[(10, 3, 13), bool] */;
  %367 = cast(%366, dtype="float32") /* ty=Tensor[(10, 3, 13), float32] */;
  log10(%367) /* ty=Tensor[(10, 3, 13), float32] */
}

def @func_2842() -> (Tensor[(7, 14, 4), bool], Tensor[(7, 14, 4), bool]) {
  %368 = @func_1322() /* ty=Tensor[(7, 14, 4), float64] */;
  %369 = cast(meta[relay.Constant][19] /* ty=Tensor[(7, 14, 4), float64] */, dtype="bool") /* ty=Tensor[(7, 14, 4), bool] */;
  %370 = shape_of(%368, dtype="int32") /* ty=Tensor[(3), int32] */;
  %371 = cast(%368, dtype="bool") /* ty=Tensor[(7, 14, 4), bool] */;
  %372 = dyn.reshape(%369, %370, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %373 = @func_2801() /* ty=(Tensor[(7, 14, 4), bool], Tensor[(11, 12, 5), float64], Tensor[(660), float64], Tensor[(7, 14, 4), float32], Tensor[(847), int32], Tensor[(7, 14, 4), float32]) */;
  %374 = greater(%371, %372) /* ty=Tensor[(7, 14, 4), bool] */;
  %375 = %373.0;
  (%374, %375)
}

def @func_1426(%var_1413: Tensor[(847), int32]) -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(780), uint8], Tensor[(780), uint8], Tensor[(63, 2), uint8], Tensor[(7, 14, 4), float32], Tensor[(847), int32]) {
  %376 = @func_1126() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %377 = cast(meta[relay.Constant][20] /* ty=Tensor[(780), uint8] */, dtype="uint8") /* ty=Tensor[(780), uint8] */;
  %378 = reshape(%377, newshape=[390, 2]) /* ty=Tensor[(390, 2), uint8] */;
  %379 = @func_931(%378) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(13, 10, 6), uint8], Tensor[(390, 2), uint8]) */;
  %380 = cast(meta[relay.Constant][21] /* ty=Tensor[(63, 2), uint8] */, dtype="uint8") /* ty=Tensor[(63, 2), uint8] */;
  %381 = cast(meta[relay.Constant][20] /* ty=Tensor[(780), uint8] */, dtype="uint8") /* ty=Tensor[(780), uint8] */;
  %382 = reshape(%380, newshape=[9, 7, 2]) /* ty=Tensor[(9, 7, 2), uint8] */;
  %383 = reshape(%381, newshape=[780]) /* ty=Tensor[(780), uint8] */;
  %384 = @func_1038(%382, %383) /* ty=(Tensor[(9, 7, 2), uint8], Tensor[(13, 10, 6), uint8], Tensor[(780), uint8]) */;
  %385 = cast(%var_1413, dtype="int32") /* ty=Tensor[(847), int32] */;
  %386 = reshape(%385, newshape=[847]) /* ty=Tensor[(847), int32] */;
  %387 = @func_1222(%386) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(847), uint64]) */;
  %388 = %376.0;
  %389 = %379.0;
  %390 = %384.2;
  %391 = %387.0;
  (%388, %389, meta[relay.Constant][20] /* ty=Tensor[(780), uint8] */, %390, meta[relay.Constant][21] /* ty=Tensor[(63, 2), uint8] */, %391, %var_1413)
}

def @func_1749() -> Tensor[(7, 14, 4), float32] {
  %392 = @func_1126() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %392.0
}

def @func_4862() -> Tensor[(10, 3, 13), float64] {
  %393 = @func_3749() /* ty=Tensor[(10, 3, 13), bool] */;
  %394 = cast(%393, dtype="float64") /* ty=Tensor[(10, 3, 13), float64] */;
  tan(%394) /* ty=Tensor[(10, 3, 13), float64] */
}

def @func_6309(%var_6257: Tensor[(16, 13, 12), float32]) -> (Tensor[(16, 13, 12), float32], Tensor[(7, 14, 4), float64], Tensor[(392), float32], Tensor[(7, 14, 4), float64], float32, Tensor[(18, 6), float32], Tensor[(7, 14, 4), float32]) {
  %395 = cast(%var_6257, dtype="float32") /* ty=Tensor[(16, 13, 12), float32] */;
  %396 = cast(meta[relay.Constant][22] /* ty=Tensor[(392), float32] */, dtype="float32") /* ty=Tensor[(392), float32] */;
  %397 = reshape(%396, newshape=[7, 14, 4]) /* ty=Tensor[(7, 14, 4), float32] */;
  %398 = @func_6177(%397) /* ty=(Tensor[(7, 14, 4), bool], Tensor[(780, ?), int8], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64]) */;
  %399 = cast(-9.65667f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %400 = cast(meta[relay.Constant][23] /* ty=Tensor[(18, 6), float32] */, dtype="float32") /* ty=Tensor[(18, 6), float32] */;
  %401 = reshape(%399, newshape=[]) /* ty=float32 */;
  %402 = reshape(%400, newshape=[1, 9, 12]) /* ty=Tensor[(1, 9, 12), float32] */;
  %403 = @func_2168(%401, %402) /* ty=(Tensor[(1, 9, 12), bool], Tensor[(7, 14, 4), float64], Tensor[(?, 9, 12), float64]) */;
  %404 = @func_2607() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */;
  %405 = atanh(%395) /* ty=Tensor[(16, 13, 12), float32] */;
  %406 = %398.3;
  %407 = %403.1;
  %408 = %404.1;
  (%405, %406, meta[relay.Constant][22] /* ty=Tensor[(392), float32] */, %407, -9.65667f /* ty=float32 */, meta[relay.Constant][23] /* ty=Tensor[(18, 6), float32] */, %408)
}

def @func_7178() -> (Tensor[(7, 14, 4), float32], Tensor[(780), uint8], Tensor[(847), int32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), uint16], Tensor[(7, 14, 4), float32]) {
  %409 = @func_2468() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %410 = cast(meta[relay.Constant][24] /* ty=Tensor[(847), int32] */, dtype="int32") /* ty=Tensor[(847), int32] */;
  %411 = cast(meta[relay.Constant][24] /* ty=Tensor[(847), int32] */, dtype="float32") /* ty=Tensor[(847), float32] */;
  %412 = reshape(%410, newshape=[77, 11]) /* ty=Tensor[(77, 11), int32] */;
  %413 = reshape(%411, newshape=[77, 11]) /* ty=Tensor[(77, 11), float32] */;
  %414 = @func_1553(%412, %413) /* ty=(Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32], Tensor[(77, 11), float32], Tensor[(7, 14, 4), float32], Tensor[(780), uint8], Tensor[(77, 11), bool], Tensor[(780), uint8], Tensor[(77, 11), float32], Tensor[(77, 11), float32]) */;
  %415 = cast(meta[relay.Constant][24] /* ty=Tensor[(847), int32] */, dtype="int32") /* ty=Tensor[(847), int32] */;
  %416 = cast(meta[relay.Constant][24] /* ty=Tensor[(847), int32] */, dtype="float32") /* ty=Tensor[(847), float32] */;
  %417 = reshape(%415, newshape=[77, 11]) /* ty=Tensor[(77, 11), int32] */;
  %418 = reshape(%416, newshape=[77, 11]) /* ty=Tensor[(77, 11), float32] */;
  %419 = @func_1553(%417, %418) /* ty=(Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32], Tensor[(77, 11), float32], Tensor[(7, 14, 4), float32], Tensor[(780), uint8], Tensor[(77, 11), bool], Tensor[(780), uint8], Tensor[(77, 11), float32], Tensor[(77, 11), float32]) */;
  %420 = @func_4743() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %421 = @func_1931() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(13, 10, 6), uint8], Tensor[(780), uint8], Tensor[(7, 14, 4), uint16]) */;
  %422 = %409.0;
  %423 = %414.6;
  %424 = %419.1;
  %425 = %420.0;
  %426 = %421.4;
  %427 = @func_3884() /* ty=Tensor[(7, 14, 4), float32] */;
  (%422, %423, meta[relay.Constant][24] /* ty=Tensor[(847), int32] */, %424, %425, %426, %427)
}

def @func_9491() -> (Tensor[(847), int32],) {
  %428 = @func_8329() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(847), int32]) */;
  %429 = %428.2;
  (%429,)
}

def @func_5201(%var_5195: Tensor[(13, 4, 4), float32]) -> (Tensor[(13, 4, 4), float32],) {
  %430 = cast(%var_5195, dtype="float32") /* ty=Tensor[(13, 4, 4), float32] */;
  %431 = sinh(%430) /* ty=Tensor[(13, 4, 4), float32] */;
  (%431,)
}

def @func_5542() -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), bool], Tensor[(7, 14, 4), float32]) {
  %432 = @func_2842() /* ty=(Tensor[(7, 14, 4), bool], Tensor[(7, 14, 4), bool]) */;
  %433 = @func_5279() /* ty=Tensor[(7, 14, 4), float32] */;
  %434 = %432.0;
  %435 = @func_5279() /* ty=Tensor[(7, 14, 4), float32] */;
  (%433, %434, %435)
}

def @func_6125() -> (Tensor[(7, 14, 4), uint16],) {
  %436 = @func_5178() /* ty=(Tensor[(7, 14, 4), uint16],) */;
  %437 = %436.0;
  (%437,)
}

def @func_7508() -> Tensor[(7, 14, 4), float32] {
  %438 = @func_5608() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */;
  %438.1
}

def @func_7986() -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), uint16], Tensor[(7, 14, 4), bool], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) {
  %439 = @func_2607() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */;
  %440 = @func_5178() /* ty=(Tensor[(7, 14, 4), uint16],) */;
  %441 = @func_2842() /* ty=(Tensor[(7, 14, 4), bool], Tensor[(7, 14, 4), bool]) */;
  %442 = @func_6223() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */;
  %443 = %439.1;
  %444 = %440.0;
  %445 = %441.1;
  %446 = @func_7813() /* ty=Tensor[(7, 14, 4), float32] */;
  %447 = %442.0;
  %448 = @func_2263() /* ty=Tensor[(7, 14, 4), float32] */;
  (%443, %444, %445, %446, %447, %448)
}

def @func_7616(%var_7594: Tensor[(14, 12, 8), uint16], %var_7595: Tensor[(14, 12, 8), uint16], %var_7603: float32, %var_7604: Tensor[(108), float32]) -> (Tensor[(14, 12, 8), uint16], Tensor[(7, 14, 4), float32], Tensor[(108), float32], float32, Tensor[(108), float32]) {
  %449 = cast(%var_7595, dtype="uint16") /* ty=Tensor[(14, 12, 8), uint16] */;
  %450 = shape_of(%var_7594, dtype="int32") /* ty=Tensor[(3), int32] */;
  %451 = cast(%var_7594, dtype="uint16") /* ty=Tensor[(14, 12, 8), uint16] */;
  %452 = dyn.reshape(%449, %450, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %453 = cast(%var_7603, dtype="float32") /* ty=float32 */;
  %454 = cast(%var_7604, dtype="float32") /* ty=Tensor[(108), float32] */;
  %455 = reshape(%453, newshape=[]) /* ty=float32 */;
  %456 = reshape(%454, newshape=[108]) /* ty=Tensor[(108), float32] */;
  %457 = @func_7312(%455, %456) /* ty=(Tensor[(847), int32], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32], Tensor[(1, 9, 12), bool], float32, Tensor[(108), float32], Tensor[(7, 14, 4), float32], Tensor[(780, 1), uint8]) */;
  %458 = left_shift(%451, %452) /* ty=Tensor[(14, 12, 8), uint16] */;
  %459 = @func_6597() /* ty=Tensor[(7, 14, 4), float32] */;
  %460 = %457.5;
  (%458, %459, %460, %var_7603, %var_7604)
}

def @main(%var_10052: Tensor[(60), float64], %var_10054: Tensor[(847), int32]) -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), uint16], Tensor[(660), float64], Tensor[(60), float64], Tensor[(847), int32], Tensor[(13, 10, 6), uint8], Tensor[(3, 42), uint8], Tensor[(780, 60), float32]) {
  %461 = @func_5178() /* ty=(Tensor[(7, 14, 4), uint16],) */;
  %462 = cast(%var_10052, dtype="float64") /* ty=Tensor[(60), float64] */;
  %463 = cast(meta[relay.Constant][25] /* ty=Tensor[(780, 1), uint8] */, dtype="uint8") /* ty=Tensor[(780, 1), uint8] */;
  %464 = cast(%var_10054, dtype="int32") /* ty=Tensor[(847), int32] */;
  %465 = reshape(%462, newshape=[60]) /* ty=Tensor[(60), float64] */;
  %466 = reshape(%463, newshape=[780]) /* ty=Tensor[(780), uint8] */;
  %467 = reshape(%464, newshape=[847]) /* ty=Tensor[(847), int32] */;
  %468 = @func_4009(%465, %466, %467) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(60), float64], Tensor[(60), float64], Tensor[(780), uint8], Tensor[(7, 14, 4), bool], Tensor[(780, 5), bool], Tensor[(660), float64], Tensor[(7800), float32], Tensor[(77, 11), float32], Tensor[(847), int32], Tensor[(780), uint8]) */;
  %469 = cast(meta[relay.Constant][26] /* ty=Tensor[(3, 42), uint8] */, dtype="uint8") /* ty=Tensor[(3, 42), uint8] */;
  %470 = cast(meta[relay.Constant][25] /* ty=Tensor[(780, 1), uint8] */, dtype="uint8") /* ty=Tensor[(780, 1), uint8] */;
  %471 = reshape(%469, newshape=[9, 7, 2]) /* ty=Tensor[(9, 7, 2), uint8] */;
  %472 = reshape(%470, newshape=[780]) /* ty=Tensor[(780), uint8] */;
  %473 = @func_1038(%471, %472) /* ty=(Tensor[(9, 7, 2), uint8], Tensor[(13, 10, 6), uint8], Tensor[(780), uint8]) */;
  %474 = cast(%var_10052, dtype="float64") /* ty=Tensor[(60), float64] */;
  %475 = cast(meta[relay.Constant][25] /* ty=Tensor[(780, 1), uint8] */, dtype="uint8") /* ty=Tensor[(780, 1), uint8] */;
  %476 = cast(%var_10054, dtype="int32") /* ty=Tensor[(847), int32] */;
  %477 = reshape(%474, newshape=[60]) /* ty=Tensor[(60), float64] */;
  %478 = reshape(%475, newshape=[780]) /* ty=Tensor[(780), uint8] */;
  %479 = reshape(%476, newshape=[847]) /* ty=Tensor[(847), int32] */;
  %480 = @func_4009(%477, %478, %479) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(60), float64], Tensor[(60), float64], Tensor[(780), uint8], Tensor[(7, 14, 4), bool], Tensor[(780, 5), bool], Tensor[(660), float64], Tensor[(7800), float32], Tensor[(77, 11), float32], Tensor[(847), int32], Tensor[(780), uint8]) */;
  %481 = %480.2;
  %482 = cast(%481, dtype="float32") /* ty=Tensor[(60), float32] */;
  %483 = cast(meta[relay.Constant][25] /* ty=Tensor[(780, 1), uint8] */, dtype="float32") /* ty=Tensor[(780, 1), float32] */;
  %484 = @func_5122() /* ty=Tensor[(7, 14, 4), float32] */;
  %485 = %461.0;
  %486 = %468.6;
  %487 = %473.1;
  %488 = subtract(%482, %483) /* ty=Tensor[(780, 60), float32] */;
  (%484, %485, %486, %var_10052, %var_10054, %487, meta[relay.Constant][26] /* ty=Tensor[(3, 42), uint8] */, %488)
}

def @func_1222(%var_1203: Tensor[(847), int32]) -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(847), uint64]) {
  %489 = @func_856() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %490 = cast(meta[relay.Constant][27] /* ty=Tensor[(847), int32] */, dtype="int32") /* ty=Tensor[(847), int32] */;
  %491 = reshape(%490, newshape=[847]) /* ty=Tensor[(847), int32] */;
  %492 = @func_1087(%491) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(11, 11, 7), int32], Tensor[(847), int32], Tensor[(7, 14, 4), float32]) */;
  %493 = cast(%var_1203, dtype="uint64") /* ty=Tensor[(847), uint64] */;
  %494 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(847), int32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %495 = cast(meta[relay.Constant][27] /* ty=Tensor[(847), int32] */, dtype="uint64") /* ty=Tensor[(847), uint64] */;
  %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %497 = %489.0;
  %498 = %492.0;
  %499 = right_shift(%495, %496) /* ty=Tensor[(847), uint64] */;
  (%497, %498, %499)
}

def @func_988() -> (Tensor[(7, 14, 4), float32],) {
  %500 = @func_856() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %501 = %500.0;
  (%501,)
}

def @func_5781() -> (Tensor[(10, 3, 13), float64],) {
  %502 = @func_4862() /* ty=Tensor[(10, 3, 13), float64] */;
  (%502,)
}

def @func_5940() -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) {
  %503 = @func_1126() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %504 = @func_3929() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %505 = %503.0;
  %506 = %504.0;
  (%505, %506)
}

def @func_4657(%var_4624: Tensor[(2, 847), int32]) -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(2, 847), bool], Tensor[(2, 847), float32], Tensor[(13, 10, 6), uint8], Tensor[(3900), uint8]) {
  %507 = @func_3681() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %508 = cast(meta[relay.Constant][28] /* ty=Tensor[(1, 847), int32] */, dtype="int32") /* ty=Tensor[(1, 847), int32] */;
  %509 = reshape(%508, newshape=[847]) /* ty=Tensor[(847), int32] */;
  %510 = @func_1222(%509) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(847), uint64]) */;
  %511 = cast(%var_4624, dtype="float32") /* ty=Tensor[(2, 847), float32] */;
  %512 = erf(%511) /* ty=Tensor[(2, 847), float32] */;
  %513 = cast(meta[relay.Constant][28] /* ty=Tensor[(1, 847), int32] */, dtype="bool") /* ty=Tensor[(1, 847), bool] */;
  %514 = cast(%var_4624, dtype="bool") /* ty=Tensor[(2, 847), bool] */;
  %515 = less(%513, %514) /* ty=Tensor[(2, 847), bool] */;
  %516 = cast(%515, dtype="bool") /* ty=Tensor[(2, 847), bool] */;
  %517 = shape_of(%512, dtype="int32") /* ty=Tensor[(2), int32] */;
  %518 = cast(%512, dtype="bool") /* ty=Tensor[(2, 847), bool] */;
  %519 = dyn.reshape(%516, %517, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %520 = cast(%512, dtype="float32") /* ty=Tensor[(2, 847), float32] */;
  %521 = cast(meta[relay.Constant][29] /* ty=Tensor[(3900), uint8] */, dtype="uint8") /* ty=Tensor[(3900), uint8] */;
  %522 = cast(meta[relay.Constant][29] /* ty=Tensor[(3900), uint8] */, dtype="bool") /* ty=Tensor[(3900), bool] */;
  %523 = reshape(%521, newshape=[3900]) /* ty=Tensor[(3900), uint8] */;
  %524 = reshape(%522, newshape=[780, 5]) /* ty=Tensor[(780, 5), bool] */;
  %525 = @func_3293(%523, %524) /* ty=(Tensor[(13, 10, 6), uint8], Tensor[(3900), uint8], Tensor[(780, 5), bool]) */;
  %526 = %507.0;
  %527 = %510.1;
  %528 = @func_2263() /* ty=Tensor[(7, 14, 4), float32] */;
  %529 = greater_equal(%518, %519) /* ty=Tensor[(2, 847), bool] */;
  %530 = cos(%520) /* ty=Tensor[(2, 847), float32] */;
  %531 = %525.0;
  (%526, %527, %528, %529, %530, %531, meta[relay.Constant][29] /* ty=Tensor[(3900), uint8] */)
}

def @func_4743() -> (Tensor[(7, 14, 4), float32],) {
  %532 = @func_2894() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(63, 2), uint8], Tensor[(847), int32], Tensor[(7, 14, 4), float32]) */;
  %533 = %532.3;
  (%533,)
}

def @func_2049() -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64]) {
  %534 = @func_1749() /* ty=Tensor[(7, 14, 4), float32] */;
  %535 = cast(%534, dtype="float64") /* ty=Tensor[(7, 14, 4), float64] */;
  %536 = @func_1626() /* ty=Tensor[(7, 14, 4), float32] */;
  %537 = rsqrt(%535) /* ty=Tensor[(7, 14, 4), float64] */;
  (%536, %537)
}

def @func_6092(%var_6084: Tensor[(13, 12, 16), int64], %var_6085: Tensor[(13, 12, 16), int64]) -> (Tensor[(13, 12, 16), int64],) {
  %538 = cast(%var_6085, dtype="int64") /* ty=Tensor[(13, 12, 16), int64] */;
  %539 = shape_of(%var_6084, dtype="int32") /* ty=Tensor[(3), int32] */;
  %540 = cast(%var_6084, dtype="int64") /* ty=Tensor[(13, 12, 16), int64] */;
  %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %542 = left_shift(%540, %541) /* ty=Tensor[(13, 12, 16), int64] */;
  (%542,)
}

def @func_2801() -> (Tensor[(7, 14, 4), bool], Tensor[(11, 12, 5), float64], Tensor[(660), float64], Tensor[(7, 14, 4), float32], Tensor[(847), int32], Tensor[(7, 14, 4), float32]) {
  %543 = @func_1673() /* ty=Tensor[(7, 14, 4), float32] */;
  %544 = cast(meta[relay.Constant][30] /* ty=Tensor[(7, 14, 4), float32] */, dtype="bool") /* ty=Tensor[(7, 14, 4), bool] */;
  %545 = shape_of(%543, dtype="int32") /* ty=Tensor[(3), int32] */;
  %546 = cast(%543, dtype="bool") /* ty=Tensor[(7, 14, 4), bool] */;
  %547 = dyn.reshape(%544, %545, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %548 = cast(meta[relay.Constant][31] /* ty=Tensor[(660), float64] */, dtype="float64") /* ty=Tensor[(660), float64] */;
  %549 = reshape(%548, newshape=[11, 12, 5]) /* ty=Tensor[(11, 12, 5), float64] */;
  %550 = @func_2321(%549) /* ty=(Tensor[(11, 12, 5), float64], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32]) */;
  %551 = cast(meta[relay.Constant][32] /* ty=Tensor[(847), int32] */, dtype="int32") /* ty=Tensor[(847), int32] */;
  %552 = reshape(%551, newshape=[847]) /* ty=Tensor[(847), int32] */;
  %553 = @func_1222(%552) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(847), uint64]) */;
  %554 = @func_2468() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %555 = equal(%546, %547) /* ty=Tensor[(7, 14, 4), bool] */;
  %556 = %550.0;
  %557 = %553.0;
  %558 = %554.0;
  (%555, %556, meta[relay.Constant][31] /* ty=Tensor[(660), float64] */, %557, meta[relay.Constant][32] /* ty=Tensor[(847), int32] */, %558)
}

def @func_7077(%var_7049: Tensor[(60), float64], %var_7050: Tensor[(780), uint8], %var_7051: Tensor[(847), int32], %var_7060: Tensor[(3900), uint8], %var_7064: Tensor[(847), float32]) -> (Tensor[(7, 14, 4), float32], Tensor[(7800), float32], Tensor[(60), float64], Tensor[(780), uint8], Tensor[(7, 14, 4), float32], Tensor[(3900), uint8], Tensor[(847), float64], Tensor[(847), float64]) {
  %559 = cast(%var_7049, dtype="float64") /* ty=Tensor[(60), float64] */;
  %560 = cast(%var_7050, dtype="uint8") /* ty=Tensor[(780), uint8] */;
  %561 = cast(%var_7051, dtype="int32") /* ty=Tensor[(847), int32] */;
  %562 = reshape(%559, newshape=[60]) /* ty=Tensor[(60), float64] */;
  %563 = reshape(%560, newshape=[780]) /* ty=Tensor[(780), uint8] */;
  %564 = reshape(%561, newshape=[847]) /* ty=Tensor[(847), int32] */;
  %565 = @func_4009(%562, %563, %564) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(60), float64], Tensor[(60), float64], Tensor[(780), uint8], Tensor[(7, 14, 4), bool], Tensor[(780, 5), bool], Tensor[(660), float64], Tensor[(7800), float32], Tensor[(77, 11), float32], Tensor[(847), int32], Tensor[(780), uint8]) */;
  %566 = cast(%var_7060, dtype="uint8") /* ty=Tensor[(3900), uint8] */;
  %567 = reshape(%566, newshape=[1950, 2]) /* ty=Tensor[(1950, 2), uint8] */;
  %568 = @func_4428(%567) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(3900), uint8], Tensor[(1950, 2), float64]) */;
  %569 = cast(%var_7051, dtype="float32") /* ty=Tensor[(847), float32] */;
  %570 = sin(%569) /* ty=Tensor[(847), float32] */;
  %571 = cast(%var_7064, dtype="float64") /* ty=Tensor[(847), float64] */;
  %572 = shape_of(%570, dtype="int32") /* ty=Tensor[(1), int32] */;
  %573 = cast(%570, dtype="float64") /* ty=Tensor[(847), float64] */;
  %574 = dyn.reshape(%571, %572, newshape=[]) /* ty=Tensor[(?), float64] */;
  %575 = cast(%570, dtype="float64") /* ty=Tensor[(847), float64] */;
  %576 = @func_5279() /* ty=Tensor[(7, 14, 4), float32] */;
  %577 = %565.7;
  %578 = %568.0;
  %579 = add(%573, %574) /* ty=Tensor[(847), float64] */;
  %580 = sqrt(%575) /* ty=Tensor[(847), float64] */;
  (%576, %577, %var_7049, %var_7050, %578, %var_7060, %579, %580)
}

def @func_9954() -> Tensor[(7, 14, 4), float32] {
  @func_8226() /* ty=Tensor[(7, 14, 4), float32] */
}

def @func_9974() -> (Tensor[(10, 3, 13), bool],) {
  %581 = @func_5878() /* ty=(Tensor[(10, 3, 13), bool],) */;
  %582 = %581.0;
  (%582,)
}

def @func_8029() -> (Tensor[(10, 3, 13), float64], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(847), int32]) {
  %583 = @func_6251() /* ty=(Tensor[(10, 3, 13), float64],) */;
  %584 = cast(meta[relay.Constant][33] /* ty=Tensor[(847), int32] */, dtype="int32") /* ty=Tensor[(847), int32] */;
  %585 = reshape(%584, newshape=[847]) /* ty=Tensor[(847), int32] */;
  %586 = @func_1087(%585) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(11, 11, 7), int32], Tensor[(847), int32], Tensor[(7, 14, 4), float32]) */;
  %587 = %583.0;
  %588 = @func_5122() /* ty=Tensor[(7, 14, 4), float32] */;
  %589 = %586.3;
  (%587, %588, %589, meta[relay.Constant][33] /* ty=Tensor[(847), int32] */)
}

def @func_4386() -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) {
  %590 = @func_2263() /* ty=Tensor[(7, 14, 4), float32] */;
  %591 = @func_3884() /* ty=Tensor[(7, 14, 4), float32] */;
  (%590, %591)
}

def @func_6939() -> (Tensor[(7, 14, 4), float32], Tensor[(11, 11, 7), int32], Tensor[(10, 3, 13), float64]) {
  %592 = @func_1822() /* ty=(Tensor[(11, 11, 7), int32], Tensor[(847), int32], Tensor[(7, 14, 4), uint64], Tensor[(7, 14, 4), float64]) */;
  %593 = @func_4462() /* ty=Tensor[(7, 14, 4), float32] */;
  %594 = %592.0;
  %595 = @func_4862() /* ty=Tensor[(10, 3, 13), float64] */;
  (%593, %594, %595)
}

def @func_9327() -> (Tensor[(10, 3, 13), float32], Tensor[(7, 14, 4), float32]) {
  %596 = @func_5842() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %597 = @func_4758() /* ty=Tensor[(10, 3, 13), float32] */;
  %598 = %596.0;
  (%597, %598)
}

def @func_1456(%var_1452: Tensor[(1, 780), uint8]) -> (Tensor[(7, 14, 4), float32], Tensor[(9, 7, 2), uint8], Tensor[(126), uint8], Tensor[(1, 780), uint8]) {
  %599 = @func_1126() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %600 = cast(meta[relay.Constant][34] /* ty=Tensor[(126), uint8] */, dtype="uint8") /* ty=Tensor[(126), uint8] */;
  %601 = cast(%var_1452, dtype="uint8") /* ty=Tensor[(1, 780), uint8] */;
  %602 = reshape(%600, newshape=[9, 7, 2]) /* ty=Tensor[(9, 7, 2), uint8] */;
  %603 = reshape(%601, newshape=[780]) /* ty=Tensor[(780), uint8] */;
  %604 = @func_1038(%602, %603) /* ty=(Tensor[(9, 7, 2), uint8], Tensor[(13, 10, 6), uint8], Tensor[(780), uint8]) */;
  %605 = %599.0;
  %606 = %604.0;
  (%605, %606, meta[relay.Constant][34] /* ty=Tensor[(126), uint8] */, %var_1452)
}

def @func_1822() -> (Tensor[(11, 11, 7), int32], Tensor[(847), int32], Tensor[(7, 14, 4), uint64], Tensor[(7, 14, 4), float64]) {
  %607 = cast(meta[relay.Constant][35] /* ty=Tensor[(847), int32] */, dtype="int32") /* ty=Tensor[(847), int32] */;
  %608 = reshape(%607, newshape=[11, 11, 7]) /* ty=Tensor[(11, 11, 7), int32] */;
  %609 = @func_1749() /* ty=Tensor[(7, 14, 4), float32] */;
  %610 = cast(%609, dtype="float32") /* ty=Tensor[(7, 14, 4), float32] */;
  %611 = acos(%610) /* ty=Tensor[(7, 14, 4), float32] */;
  %612 = cast(%609, dtype="uint64") /* ty=Tensor[(7, 14, 4), uint64] */;
  %613 = shape_of(%611, dtype="int32") /* ty=Tensor[(3), int32] */;
  %614 = cast(%611, dtype="uint64") /* ty=Tensor[(7, 14, 4), uint64] */;
  %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %616 = cast(%609, dtype="float32") /* ty=Tensor[(7, 14, 4), float32] */;
  %617 = log(%616) /* ty=Tensor[(7, 14, 4), float32] */;
  %618 = cast(%617, dtype="float64") /* ty=Tensor[(7, 14, 4), float64] */;
  %619 = @func_807(%608) /* ty=Tensor[(11, 11, 7), int32] */;
  %620 = minimum(%614, %615) /* ty=Tensor[(7, 14, 4), uint64] */;
  %621 = tan(%618) /* ty=Tensor[(7, 14, 4), float64] */;
  (%619, meta[relay.Constant][35] /* ty=Tensor[(847), int32] */, %620, %621)
}

def @func_9803() -> (Tensor[(7, 14, 4), float32],) {
  %622 = @func_8826() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %623 = %622.0;
  (%623,)
}

def @func_7793() -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) {
  %624 = @func_2881() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %625 = %624.0;
  %626 = @func_4118() /* ty=Tensor[(7, 14, 4), float32] */;
  (%625, %626)
}

def @func_9214(%var_9119: Tensor[(780), uint8], %var_9121: Tensor[(3900), uint8]) -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(60), float64], Tensor[(780), uint8], Tensor[(847), int32], Tensor[(3900), uint8], Tensor[(847), int32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(780, 1), uint8], Tensor[(3, 20), bool]) {
  %627 = @func_2881() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %628 = cast(meta[relay.Constant][36] /* ty=Tensor[(3, 20), float64] */, dtype="float64") /* ty=Tensor[(3, 20), float64] */;
  %629 = cast(%var_9119, dtype="uint8") /* ty=Tensor[(780), uint8] */;
  %630 = cast(meta[relay.Constant][37] /* ty=Tensor[(847), int32] */, dtype="int32") /* ty=Tensor[(847), int32] */;
  %631 = cast(%var_9121, dtype="uint8") /* ty=Tensor[(3900), uint8] */;
  %632 = cast(meta[relay.Constant][37] /* ty=Tensor[(847), int32] */, dtype="float32") /* ty=Tensor[(847), float32] */;
  %633 = reshape(%628, newshape=[60]) /* ty=Tensor[(60), float64] */;
  %634 = reshape(%629, newshape=[780]) /* ty=Tensor[(780), uint8] */;
  %635 = reshape(%630, newshape=[847]) /* ty=Tensor[(847), int32] */;
  %636 = reshape(%631, newshape=[3900]) /* ty=Tensor[(3900), uint8] */;
  %637 = reshape(%632, newshape=[847]) /* ty=Tensor[(847), float32] */;
  %638 = @func_7077(%633, %634, %635, %636, %637) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7800), float32], Tensor[(60), float64], Tensor[(780), uint8], Tensor[(7, 14, 4), float32], Tensor[(3900), uint8], Tensor[(847), float64], Tensor[(847), float64]) */;
  %639 = cast(meta[relay.Constant][37] /* ty=Tensor[(847), int32] */, dtype="int32") /* ty=Tensor[(847), int32] */;
  %640 = reshape(%639, newshape=[847]) /* ty=Tensor[(847), int32] */;
  %641 = @func_6503(%640) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(847, ?), int64], Tensor[(847), int32], Tensor[(7, 14, 4), uint16]) */;
  %642 = cast(meta[relay.Constant][36] /* ty=Tensor[(3, 20), float64] */, dtype="float32") /* ty=Tensor[(3, 20), float32] */;
  %643 = atan(%642) /* ty=Tensor[(3, 20), float32] */;
  %644 = cast(meta[relay.Constant][36] /* ty=Tensor[(3, 20), float64] */, dtype="bool") /* ty=Tensor[(3, 20), bool] */;
  %645 = shape_of(%643, dtype="int32") /* ty=Tensor[(2), int32] */;
  %646 = cast(%643, dtype="bool") /* ty=Tensor[(3, 20), bool] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %648 = @func_6640() /* ty=Tensor[(7, 14, 4), float32] */;
  %649 = %627.0;
  %650 = %638.2;
  %651 = %641.3;
  %652 = @func_8226() /* ty=Tensor[(7, 14, 4), float32] */;
  %653 = @func_6597() /* ty=Tensor[(7, 14, 4), float32] */;
  %654 = @func_6130() /* ty=Tensor[(780, 1), uint8] */;
  %655 = logical_or(%646, %647) /* ty=Tensor[(3, 20), bool] */;
  (%648, %649, %650, %var_9119, meta[relay.Constant][37] /* ty=Tensor[(847), int32] */, %var_9121, %651, %652, %653, %654, %655)
}

def @func_6130() -> Tensor[(780, 1), uint8] {
  %656 = @func_2444() /* ty=(Tensor[(780, 1), uint8],) */;
  %656.0
}

def @func_4428(%var_4418: Tensor[(1950, 2), uint8]) -> (Tensor[(7, 14, 4), float32], Tensor[(3900), uint8], Tensor[(1950, 2), float64]) {
  %657 = cast(%var_4418, dtype="uint8") /* ty=Tensor[(1950, 2), uint8] */;
  %658 = cast(%var_4418, dtype="bool") /* ty=Tensor[(1950, 2), bool] */;
  %659 = reshape(%657, newshape=[3900]) /* ty=Tensor[(3900), uint8] */;
  %660 = reshape(%658, newshape=[780, 5]) /* ty=Tensor[(780, 5), bool] */;
  %661 = @func_3293(%659, %660) /* ty=(Tensor[(13, 10, 6), uint8], Tensor[(3900), uint8], Tensor[(780, 5), bool]) */;
  %662 = cast(%var_4418, dtype="float64") /* ty=Tensor[(1950, 2), float64] */;
  %663 = @func_2511() /* ty=Tensor[(7, 14, 4), float32] */;
  %664 = %661.1;
  %665 = erf(%662) /* ty=Tensor[(1950, 2), float64] */;
  (%663, %664, %665)
}

def @func_1673() -> Tensor[(7, 14, 4), float32] {
  @func_1626() /* ty=Tensor[(7, 14, 4), float32] */
}

def @func_4067(%var_4055: Tensor[(10, 1, 3), float32]) -> (Tensor[(10, 1, 3), float32], Tensor[(10, 1, 3), float64]) {
  %666 = cast(%var_4055, dtype="float32") /* ty=Tensor[(10, 1, 3), float32] */;
  %667 = cast(%var_4055, dtype="float64") /* ty=Tensor[(10, 1, 3), float64] */;
  %668 = rsqrt(%666) /* ty=Tensor[(10, 1, 3), float32] */;
  %669 = erf(%667) /* ty=Tensor[(10, 1, 3), float64] */;
  (%668, %669)
}

def @func_6460(%var_6449: Tensor[(60), float64], %var_6451: Tensor[(847), int32]) -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(1755), int8], Tensor[(7, 14, 4), float32], Tensor[(660), float64], Tensor[(60), float64], Tensor[(780), uint8], Tensor[(847), int32]) {
  %670 = @func_5242() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %671 = cast(meta[relay.Constant][38] /* ty=Tensor[(1755), int8] */, dtype="int8") /* ty=Tensor[(1755), int8] */;
  %672 = reshape(%671, newshape=[1755]) /* ty=Tensor[(1755), int8] */;
  %673 = @func_4214(%672) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32], Tensor[(1755), int8]) */;
  %674 = @func_3929() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %675 = cast(%var_6449, dtype="float64") /* ty=Tensor[(60), float64] */;
  %676 = cast(meta[relay.Constant][39] /* ty=Tensor[(780), uint8] */, dtype="uint8") /* ty=Tensor[(780), uint8] */;
  %677 = cast(%var_6451, dtype="int32") /* ty=Tensor[(847), int32] */;
  %678 = reshape(%675, newshape=[60]) /* ty=Tensor[(60), float64] */;
  %679 = reshape(%676, newshape=[780]) /* ty=Tensor[(780), uint8] */;
  %680 = reshape(%677, newshape=[847]) /* ty=Tensor[(847), int32] */;
  %681 = @func_4009(%678, %679, %680) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(60), float64], Tensor[(60), float64], Tensor[(780), uint8], Tensor[(7, 14, 4), bool], Tensor[(780, 5), bool], Tensor[(660), float64], Tensor[(7800), float32], Tensor[(77, 11), float32], Tensor[(847), int32], Tensor[(780), uint8]) */;
  %682 = %670.0;
  %683 = %673.2;
  %684 = %674.0;
  %685 = %681.6;
  (%682, %683, meta[relay.Constant][38] /* ty=Tensor[(1755), int8] */, %684, %685, %var_6449, meta[relay.Constant][39] /* ty=Tensor[(780), uint8] */, %var_6451)
}

def @func_9694(%var_9665: Tensor[(3, 3, 7), uint8]) -> (Tensor[(3, 3, 7), bool], Tensor[(7, 14, 4), float32], Tensor[(126), uint8], Tensor[(780), uint8]) {
  %686 = cast(meta[relay.Constant][40] /* ty=Tensor[(3, 3, 7), uint8] */, dtype="bool") /* ty=Tensor[(3, 3, 7), bool] */;
  %687 = shape_of(%var_9665, dtype="int32") /* ty=Tensor[(3), int32] */;
  %688 = cast(%var_9665, dtype="bool") /* ty=Tensor[(3, 3, 7), bool] */;
  %689 = dyn.reshape(%686, %687, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %690 = cast(meta[relay.Constant][41] /* ty=Tensor[(780), uint8] */, dtype="uint8") /* ty=Tensor[(780), uint8] */;
  %691 = reshape(%690, newshape=[1, 780]) /* ty=Tensor[(1, 780), uint8] */;
  %692 = @func_1456(%691) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(9, 7, 2), uint8], Tensor[(126), uint8], Tensor[(1, 780), uint8]) */;
  %693 = less(%688, %689) /* ty=Tensor[(3, 3, 7), bool] */;
  %694 = @func_5279() /* ty=Tensor[(7, 14, 4), float32] */;
  %695 = %692.2;
  (%693, %694, %695, meta[relay.Constant][41] /* ty=Tensor[(780), uint8] */)
}

def @func_5242() -> (Tensor[(7, 14, 4), float32],) {
  %696 = @func_2511() /* ty=Tensor[(7, 14, 4), float32] */;
  (%696,)
}

def @func_4462() -> Tensor[(7, 14, 4), float32] {
  @func_2263() /* ty=Tensor[(7, 14, 4), float32] */
}

def @func_3749() -> Tensor[(10, 3, 13), bool] {
  @func_3722() /* ty=Tensor[(10, 3, 13), bool] */
}

def @func_9898() -> (Tensor[(7, 14, 4), uint16], Tensor[(10, 3, 13), float64], Tensor[(7, 14, 4), float32]) {
  %697 = @func_7675() /* ty=(Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), uint16]) */;
  %698 = @func_3681() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %699 = %697.1;
  %700 = @func_8219() /* ty=Tensor[(10, 3, 13), float64] */;
  %701 = %698.0;
  (%699, %700, %701)
}

def @func_2954(%var_2944: Tensor[(780, 5), uint8]) -> (Tensor[(780, 5), bool],) {
  %702 = @func_2444() /* ty=(Tensor[(780, 1), uint8],) */;
  %703 = %702.0;
  %704 = cast(%703, dtype="bool") /* ty=Tensor[(780, 1), bool] */;
  %705 = cast(%var_2944, dtype="bool") /* ty=Tensor[(780, 5), bool] */;
  %706 = greater_equal(%704, %705) /* ty=Tensor[(780, 5), bool] */;
  (%706,)
}

def @func_3503(%var_3394: Tensor[(660), float64], %var_3481: Tensor[(780, 10), float32]) -> (Tensor[(11, 12, 5), float64], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), bool], Tensor[(780, 660), bool], Tensor[(780, 5), bool], Tensor[(3900), uint8], Tensor[(13, 10, 6), uint8], Tensor[(7, 14, 4), float32], Tensor[(780, ?), uint16], Tensor[(780, 10), float32]) {
  %707 = cast(%var_3394, dtype="float64") /* ty=Tensor[(660), float64] */;
  %708 = reshape(%707, newshape=[11, 12, 5]) /* ty=Tensor[(11, 12, 5), float64] */;
  %709 = @func_2321(%708) /* ty=(Tensor[(11, 12, 5), float64], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32]) */;
  %710 = @func_2049() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64]) */;
  %711 = %710.0;
  %712 = cast(%711, dtype="float64") /* ty=Tensor[(7, 14, 4), float64] */;
  %713 = reshape(%712, newshape=[7, 14, 4]) /* ty=Tensor[(7, 14, 4), float64] */;
  %714 = @func_2379() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(13, 10, 6), uint8], Tensor[(780, 1), uint8]) */;
  %715 = %714.2;
  %716 = cast(%715, dtype="float64") /* ty=Tensor[(780, 1), float64] */;
  %717 = log2(%716) /* ty=Tensor[(780, 1), float64] */;
  %718 = cast(%717, dtype="float32") /* ty=Tensor[(780, 1), float32] */;
  %719 = cast(%var_3394, dtype="float32") /* ty=Tensor[(660), float32] */;
  %720 = floor_divide(%718, %719) /* ty=Tensor[(780, 660), float32] */;
  %721 = cast(%720, dtype="bool") /* ty=Tensor[(780, 660), bool] */;
  %722 = cast(%717, dtype="bool") /* ty=Tensor[(780, 1), bool] */;
  %723 = cast(meta[relay.Constant][42] /* ty=Tensor[(3900), uint8] */, dtype="uint8") /* ty=Tensor[(3900), uint8] */;
  %724 = cast(meta[relay.Constant][42] /* ty=Tensor[(3900), uint8] */, dtype="bool") /* ty=Tensor[(3900), bool] */;
  %725 = reshape(%723, newshape=[3900]) /* ty=Tensor[(3900), uint8] */;
  %726 = reshape(%724, newshape=[780, 5]) /* ty=Tensor[(780, 5), bool] */;
  %727 = @func_3293(%725, %726) /* ty=(Tensor[(13, 10, 6), uint8], Tensor[(3900), uint8], Tensor[(780, 5), bool]) */;
  %728 = %727.2;
  %729 = cast(%728, dtype="uint8") /* ty=Tensor[(780, 5), uint8] */;
  %730 = cast(%728, dtype="bool") /* ty=Tensor[(780, 5), bool] */;
  %731 = reshape(%729, newshape=[3900]) /* ty=Tensor[(3900), uint8] */;
  %732 = reshape(%730, newshape=[780, 5]) /* ty=Tensor[(780, 5), bool] */;
  %733 = @func_3293(%731, %732) /* ty=(Tensor[(13, 10, 6), uint8], Tensor[(3900), uint8], Tensor[(780, 5), bool]) */;
  %734 = @func_2607() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */;
  %735 = %734.3;
  %736 = cast(%735, dtype="float32") /* ty=Tensor[(7, 14, 4), float32] */;
  %737 = exp(%736) /* ty=Tensor[(7, 14, 4), float32] */;
  %738 = cast(%737, dtype="float32") /* ty=Tensor[(7, 14, 4), float32] */;
  %739 = cast(%717, dtype="float32") /* ty=Tensor[(780, 1), float32] */;
  %740 = log(%739) /* ty=Tensor[(780, 1), float32] */;
  %741 = cast(%717, dtype="uint16") /* ty=Tensor[(780, 1), uint16] */;
  %742 = shape_of(%740, dtype="int32") /* ty=Tensor[(2), int32] */;
  %743 = cast(%740, dtype="uint16") /* ty=Tensor[(780, 1), uint16] */;
  %744 = dyn.reshape(%741, %742, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %745 = cast(%740, dtype="float32") /* ty=Tensor[(780, 1), float32] */;
  %746 = tan(%745) /* ty=Tensor[(780, 1), float32] */;
  %747 = cast(%746, dtype="float32") /* ty=Tensor[(780, 1), float32] */;
  %748 = cast(%var_3481, dtype="float32") /* ty=Tensor[(780, 10), float32] */;
  %749 = %709.0;
  %750 = @func_1664(%713) /* ty=Tensor[(7, 14, 4), bool] */;
  %751 = equal(%721, %722) /* ty=Tensor[(780, 660), bool] */;
  %752 = %733.0;
  %753 = cos(%738) /* ty=Tensor[(7, 14, 4), float32] */;
  %754 = add(%743, %744) /* ty=Tensor[(780, ?), uint16] */;
  %755 = divide(%747, %748) /* ty=Tensor[(780, 10), float32] */;
  (%749, %711, %750, %751, %728, meta[relay.Constant][42] /* ty=Tensor[(3900), uint8] */, %752, %753, %754, %755)
}

def @func_4356(%var_4328: Tensor[(847), int32]) -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(847), int32], Tensor[(150, 26), int8], Tensor[(7, 14, 4), float32]) {
  %756 = @func_2468() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %757 = cast(%var_4328, dtype="int32") /* ty=Tensor[(847), int32] */;
  %758 = reshape(%757, newshape=[847]) /* ty=Tensor[(847), int32] */;
  %759 = @func_1426(%758) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(780), uint8], Tensor[(780), uint8], Tensor[(63, 2), uint8], Tensor[(7, 14, 4), float32], Tensor[(847), int32]) */;
  %760 = cast(meta[relay.Constant][43] /* ty=Tensor[(150, 26), uint8] */, dtype="uint8") /* ty=Tensor[(150, 26), uint8] */;
  %761 = cast(meta[relay.Constant][43] /* ty=Tensor[(150, 26), uint8] */, dtype="bool") /* ty=Tensor[(150, 26), bool] */;
  %762 = reshape(%760, newshape=[3900]) /* ty=Tensor[(3900), uint8] */;
  %763 = reshape(%761, newshape=[780, 5]) /* ty=Tensor[(780, 5), bool] */;
  %764 = @func_3293(%762, %763) /* ty=(Tensor[(13, 10, 6), uint8], Tensor[(3900), uint8], Tensor[(780, 5), bool]) */;
  %765 = %764.2;
  %766 = cast(%765, dtype="float64") /* ty=Tensor[(780, 5), float64] */;
  %767 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(150, 26), uint8] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %768 = cast(meta[relay.Constant][43] /* ty=Tensor[(150, 26), uint8] */, dtype="float64") /* ty=Tensor[(150, 26), float64] */;
  %769 = dyn.reshape(%766, %767, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %770 = floor_divide(%768, %769) /* ty=Tensor[(150, 26), float64] */;
  %771 = cast(%770, dtype="float64") /* ty=Tensor[(150, 26), float64] */;
  %772 = atan(%771) /* ty=Tensor[(150, 26), float64] */;
  %773 = cast(%770, dtype="int8") /* ty=Tensor[(150, 26), int8] */;
  %774 = shape_of(%772, dtype="int32") /* ty=Tensor[(2), int32] */;
  %775 = cast(%772, dtype="int8") /* ty=Tensor[(150, 26), int8] */;
  %776 = dyn.reshape(%773, %774, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %777 = @func_3681() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %778 = %756.0;
  %779 = %759.1;
  %780 = add(%775, %776) /* ty=Tensor[(150, 26), int8] */;
  %781 = %777.0;
  (%778, %779, %var_4328, %780, %781)
}

def @func_8660() -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(10, 3, 13), bool], Tensor[(11, 11, 7), int32], Tensor[(10, 3, 13), float32], Tensor[(7, 14, 4), float32], Tensor[(847), float64], Tensor[(7, 14, 4), float32], Tensor[(780, ?), bool]) {
  %782 = @func_7793() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */;
  %783 = @func_8029() /* ty=(Tensor[(10, 3, 13), float64], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(847), int32]) */;
  %784 = @func_5878() /* ty=(Tensor[(10, 3, 13), bool],) */;
  %785 = cast(meta[relay.Constant][44] /* ty=Tensor[(847), int32] */, dtype="int32") /* ty=Tensor[(847), int32] */;
  %786 = reshape(%785, newshape=[11, 11, 7]) /* ty=Tensor[(11, 11, 7), int32] */;
  %787 = @func_7194() /* ty=(Tensor[(10, 3, 13), float32], Tensor[(780, 5), bool], Tensor[(3900), uint8]) */;
  %788 = @func_2881() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %789 = cast(meta[relay.Constant][44] /* ty=Tensor[(847), int32] */, dtype="float64") /* ty=Tensor[(847), float64] */;
  %790 = @func_4675() /* ty=(Tensor[(780, ?), bool],) */;
  %791 = %782.0;
  %792 = %783.1;
  %793 = %784.0;
  %794 = @func_807(%786) /* ty=Tensor[(11, 11, 7), int32] */;
  %795 = %787.0;
  %796 = %788.0;
  %797 = asinh(%789) /* ty=Tensor[(847), float64] */;
  %798 = @func_8226() /* ty=Tensor[(7, 14, 4), float32] */;
  %799 = %790.0;
  (%791, %792, %793, %794, %795, %796, %797, %798, %799)
}

def @func_6177(%var_6170: Tensor[(7, 14, 4), float32]) -> (Tensor[(7, 14, 4), bool], Tensor[(780, ?), int8], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64]) {
  %800 = @func_988() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %801 = %800.0;
  %802 = cast(%801, dtype="float64") /* ty=Tensor[(7, 14, 4), float64] */;
  %803 = reshape(%802, newshape=[7, 14, 4]) /* ty=Tensor[(7, 14, 4), float64] */;
  %804 = @func_2444() /* ty=(Tensor[(780, 1), uint8],) */;
  %805 = %804.0;
  %806 = cast(%805, dtype="float64") /* ty=Tensor[(780, 1), float64] */;
  %807 = rsqrt(%806) /* ty=Tensor[(780, 1), float64] */;
  %808 = cast(%805, dtype="int8") /* ty=Tensor[(780, 1), int8] */;
  %809 = shape_of(%807, dtype="int32") /* ty=Tensor[(2), int32] */;
  %810 = cast(%807, dtype="int8") /* ty=Tensor[(780, 1), int8] */;
  %811 = dyn.reshape(%808, %809, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %812 = cast(%801, dtype="float32") /* ty=Tensor[(7, 14, 4), float32] */;
  %813 = @func_2894() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(63, 2), uint8], Tensor[(847), int32], Tensor[(7, 14, 4), float32]) */;
  %814 = cast(%var_6170, dtype="float64") /* ty=Tensor[(7, 14, 4), float64] */;
  %815 = shape_of(%801, dtype="int32") /* ty=Tensor[(3), int32] */;
  %816 = cast(%801, dtype="float64") /* ty=Tensor[(7, 14, 4), float64] */;
  %817 = dyn.reshape(%814, %815, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %818 = @func_1664(%803) /* ty=Tensor[(7, 14, 4), bool] */;
  %819 = bitwise_and(%810, %811) /* ty=Tensor[(780, ?), int8] */;
  %820 = asin(%812) /* ty=Tensor[(7, 14, 4), float32] */;
  %821 = @func_1322() /* ty=Tensor[(7, 14, 4), float64] */;
  %822 = %813.0;
  %823 = mod(%816, %817) /* ty=Tensor[(7, 14, 4), float64] */;
  (%818, %819, %820, %821, %822, %823)
}

def @func_5878() -> (Tensor[(10, 3, 13), bool],) {
  %824 = @func_3722() /* ty=Tensor[(10, 3, 13), bool] */;
  (%824,)
}

def @func_3845(%var_3781: Tensor[(660), float64], %var_3817: Tensor[(7800), float32]) -> (Tensor[(7, 14, 4), bool], Tensor[(11, 12, 5), float64], Tensor[(660), float64], Tensor[(7, 14, 4), float32], Tensor[(7800), float64], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7800), float64]) {
  %825 = @func_2842() /* ty=(Tensor[(7, 14, 4), bool], Tensor[(7, 14, 4), bool]) */;
  %826 = cast(%var_3781, dtype="float64") /* ty=Tensor[(660), float64] */;
  %827 = cast(meta[relay.Constant][45] /* ty=Tensor[(7800), float32] */, dtype="float32") /* ty=Tensor[(7800), float32] */;
  %828 = reshape(%826, newshape=[660]) /* ty=Tensor[(660), float64] */;
  %829 = reshape(%827, newshape=[780, 10]) /* ty=Tensor[(780, 10), float32] */;
  %830 = @func_3503(%828, %829) /* ty=(Tensor[(11, 12, 5), float64], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), bool], Tensor[(780, 660), bool], Tensor[(780, 5), bool], Tensor[(3900), uint8], Tensor[(13, 10, 6), uint8], Tensor[(7, 14, 4), float32], Tensor[(780, ?), uint16], Tensor[(780, 10), float32]) */;
  %831 = @func_856() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %832 = cast(meta[relay.Constant][46] /* ty=Tensor[(7800), float32] */, dtype="float64") /* ty=Tensor[(7800), float64] */;
  %833 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(7800), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %834 = cast(meta[relay.Constant][45] /* ty=Tensor[(7800), float32] */, dtype="float64") /* ty=Tensor[(7800), float64] */;
  %835 = dyn.reshape(%832, %833, newshape=[]) /* ty=Tensor[(?), float64] */;
  %836 = @func_2894() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(63, 2), uint8], Tensor[(847), int32], Tensor[(7, 14, 4), float32]) */;
  %837 = cast(meta[relay.Constant][45] /* ty=Tensor[(7800), float32] */, dtype="float32") /* ty=Tensor[(7800), float32] */;
  %838 = sqrt(%837) /* ty=Tensor[(7800), float32] */;
  %839 = cast(%var_3817, dtype="float64") /* ty=Tensor[(7800), float64] */;
  %840 = shape_of(%838, dtype="int32") /* ty=Tensor[(1), int32] */;
  %841 = cast(%838, dtype="float64") /* ty=Tensor[(7800), float64] */;
  %842 = dyn.reshape(%839, %840, newshape=[]) /* ty=Tensor[(?), float64] */;
  %843 = %825.1;
  %844 = %830.0;
  %845 = %831.0;
  %846 = floor_divide(%834, %835) /* ty=Tensor[(7800), float64] */;
  %847 = @func_1626() /* ty=Tensor[(7, 14, 4), float32] */;
  %848 = %836.3;
  %849 = mod(%841, %842) /* ty=Tensor[(7800), float64] */;
  (%843, %844, %var_3781, %845, %846, %847, %848, %849)
}

def @func_1931() -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(13, 10, 6), uint8], Tensor[(780), uint8], Tensor[(7, 14, 4), uint16]) {
  %850 = @func_1303() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %851 = cast(meta[relay.Constant][47] /* ty=Tensor[(780), uint8] */, dtype="uint8") /* ty=Tensor[(780), uint8] */;
  %852 = reshape(%851, newshape=[390, 2]) /* ty=Tensor[(390, 2), uint8] */;
  %853 = @func_931(%852) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(13, 10, 6), uint8], Tensor[(390, 2), uint8]) */;
  %854 = @func_1322() /* ty=Tensor[(7, 14, 4), float64] */;
  %855 = cast(meta[relay.Constant][48] /* ty=Tensor[(7, 14, 4), float64] */, dtype="uint16") /* ty=Tensor[(7, 14, 4), uint16] */;
  %856 = shape_of(%854, dtype="int32") /* ty=Tensor[(3), int32] */;
  %857 = cast(%854, dtype="uint16") /* ty=Tensor[(7, 14, 4), uint16] */;
  %858 = dyn.reshape(%855, %856, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %859 = @func_1626() /* ty=Tensor[(7, 14, 4), float32] */;
  %860 = %850.0;
  %861 = %853.2;
  %862 = multiply(%857, %858) /* ty=Tensor[(7, 14, 4), uint16] */;
  (%859, %860, %861, meta[relay.Constant][47] /* ty=Tensor[(780), uint8] */, %862)
}

def @func_1577(%var_1565: Tensor[(10, 6, 1), float64]) -> Tensor[(10, 6, 1), float64] {
  %863 = cast(%var_1565, dtype="float64") /* ty=Tensor[(10, 6, 1), float64] */;
  sinh(%863) /* ty=Tensor[(10, 6, 1), float64] */
}

def @func_9727() -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), bool]) {
  %864 = @func_4975() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %865 = @func_8785() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %866 = %864.0;
  %867 = cast(%866, dtype="float64") /* ty=Tensor[(7, 14, 4), float64] */;
  %868 = reshape(%867, newshape=[7, 14, 4]) /* ty=Tensor[(7, 14, 4), float64] */;
  %869 = @func_7813() /* ty=Tensor[(7, 14, 4), float32] */;
  %870 = %865.0;
  %871 = @func_1664(%868) /* ty=Tensor[(7, 14, 4), bool] */;
  (%866, %869, %870, %871)
}

def @func_8575() -> Tensor[(7, 14, 4), float32] {
  %872 = @func_2049() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64]) */;
  %872.0
}

def @func_2321(%var_2291: Tensor[(11, 12, 5), float64]) -> (Tensor[(11, 12, 5), float64], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32]) {
  %873 = cast(%var_2291, dtype="float64") /* ty=Tensor[(11, 12, 5), float64] */;
  %874 = @func_1822() /* ty=(Tensor[(11, 11, 7), int32], Tensor[(847), int32], Tensor[(7, 14, 4), uint64], Tensor[(7, 14, 4), float64]) */;
  %875 = @func_1822() /* ty=(Tensor[(11, 11, 7), int32], Tensor[(847), int32], Tensor[(7, 14, 4), uint64], Tensor[(7, 14, 4), float64]) */;
  %876 = sin(%873) /* ty=Tensor[(11, 12, 5), float64] */;
  %877 = %874.3;
  %878 = %875.3;
  %879 = @func_1749() /* ty=Tensor[(7, 14, 4), float32] */;
  (%876, %877, %878, %879)
}

def @func_1714(%var_1695: Tensor[(60), float64], %var_1705: Tensor[(13, 10, 6), uint8]) -> (Tensor[(7, 14, 4), float64], Tensor[(780), uint8], Tensor[(60), float64], Tensor[(10, 6, 126), bool], Tensor[(13, 10, 6), int32]) {
  %880 = cast(%var_1695, dtype="float64") /* ty=Tensor[(60), float64] */;
  %881 = reshape(%880, newshape=[10, 6, 1]) /* ty=Tensor[(10, 6, 1), float64] */;
  %882 = @func_1577(%881) /* ty=Tensor[(10, 6, 1), float64] */;
  %883 = cast(meta[relay.Constant][50] /* ty=Tensor[(126), uint8] */, dtype="bool") /* ty=Tensor[(126), bool] */;
  %884 = cast(%882, dtype="bool") /* ty=Tensor[(10, 6, 1), bool] */;
  %885 = cast(meta[relay.Constant][50] /* ty=Tensor[(126), uint8] */, dtype="uint8") /* ty=Tensor[(126), uint8] */;
  %886 = cast(meta[relay.Constant][49] /* ty=Tensor[(780), uint8] */, dtype="uint8") /* ty=Tensor[(780), uint8] */;
  %887 = reshape(%885, newshape=[9, 7, 2]) /* ty=Tensor[(9, 7, 2), uint8] */;
  %888 = reshape(%886, newshape=[780]) /* ty=Tensor[(780), uint8] */;
  %889 = @func_1038(%887, %888) /* ty=(Tensor[(9, 7, 2), uint8], Tensor[(13, 10, 6), uint8], Tensor[(780), uint8]) */;
  %890 = %889.1;
  %891 = cast(%var_1705, dtype="int32") /* ty=Tensor[(13, 10, 6), int32] */;
  %892 = shape_of(%890, dtype="int32") /* ty=Tensor[(3), int32] */;
  %893 = cast(%890, dtype="int32") /* ty=Tensor[(13, 10, 6), int32] */;
  %894 = dyn.reshape(%891, %892, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %895 = @func_1322() /* ty=Tensor[(7, 14, 4), float64] */;
  %896 = logical_and(%883, %884) /* ty=Tensor[(10, 6, 126), bool] */;
  %897 = bitwise_xor(%893, %894) /* ty=Tensor[(13, 10, 6), int32] */;
  (%895, meta[relay.Constant][49] /* ty=Tensor[(780), uint8] */, %var_1695, %896, %897)
}

def @func_2468() -> (Tensor[(7, 14, 4), float32],) {
  %898 = @func_2379() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(13, 10, 6), uint8], Tensor[(780, 1), uint8]) */;
  %899 = %898.0;
  (%899,)
}

def @func_6802() -> (Tensor[(7, 14, 4), float32], Tensor[(10, 3, 13), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) {
  %900 = @func_2049() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64]) */;
  %901 = @func_2468() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %902 = @func_1749() /* ty=Tensor[(7, 14, 4), float32] */;
  %903 = @func_4758() /* ty=Tensor[(10, 3, 13), float32] */;
  %904 = %900.0;
  %905 = %901.0;
  (%902, %903, %904, %905)
}

def @func_4118() -> Tensor[(7, 14, 4), float32] {
  %906 = @func_2468() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %906.0
}

def @func_8901() -> (Tensor[(7, 14, 4), float64], Tensor[(10, 3, 13), float64]) {
  %907 = @func_8029() /* ty=(Tensor[(10, 3, 13), float64], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(847), int32]) */;
  %908 = @func_1322() /* ty=Tensor[(7, 14, 4), float64] */;
  %909 = %907.0;
  (%908, %909)
}

def @func_7205() -> (Tensor[(7, 14, 4), uint16],) {
  %910 = @func_5178() /* ty=(Tensor[(7, 14, 4), uint16],) */;
  %911 = %910.0;
  (%911,)
}

def @func_2511() -> Tensor[(7, 14, 4), float32] {
  @func_2263() /* ty=Tensor[(7, 14, 4), float32] */
}

def @func_8553(%var_8504: Tensor[(5, 5, 10), int64], %var_8528: Tensor[(847), int32]) -> (Tensor[(5, 5, 10), int64], Tensor[(7, 14, 4), uint16], Tensor[(7, 14, 4), float32], Tensor[(780), uint8], Tensor[(1, 60), float64], Tensor[(847), int32], Tensor[(7, 14, 4), float32]) {
  %912 = cast(meta[relay.Constant][51] /* ty=Tensor[(5, 5, 10), int64] */, dtype="int64") /* ty=Tensor[(5, 5, 10), int64] */;
  %913 = shape_of(%var_8504, dtype="int32") /* ty=Tensor[(3), int32] */;
  %914 = cast(%var_8504, dtype="int64") /* ty=Tensor[(5, 5, 10), int64] */;
  %915 = dyn.reshape(%912, %913, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %916 = @func_5178() /* ty=(Tensor[(7, 14, 4), uint16],) */;
  %917 = @func_7178() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(780), uint8], Tensor[(847), int32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), uint16], Tensor[(7, 14, 4), float32]) */;
  %918 = cast(meta[relay.Constant][52] /* ty=Tensor[(1, 60), float64] */, dtype="float64") /* ty=Tensor[(1, 60), float64] */;
  %919 = cast(%var_8528, dtype="int32") /* ty=Tensor[(847), int32] */;
  %920 = reshape(%918, newshape=[60]) /* ty=Tensor[(60), float64] */;
  %921 = reshape(%919, newshape=[847]) /* ty=Tensor[(847), int32] */;
  %922 = @func_6460(%920, %921) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(1755), int8], Tensor[(7, 14, 4), float32], Tensor[(660), float64], Tensor[(60), float64], Tensor[(780), uint8], Tensor[(847), int32]) */;
  %923 = @func_7442() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */;
  %924 = maximum(%914, %915) /* ty=Tensor[(5, 5, 10), int64] */;
  %925 = %916.0;
  %926 = %917.3;
  %927 = %922.6;
  %928 = %923.1;
  (%924, %925, %926, %927, meta[relay.Constant][52] /* ty=Tensor[(1, 60), float64] */, %var_8528, %928)
}

def @func_856() -> (Tensor[(7, 14, 4), float32],) {
  %929 = cast(8.47204f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %930 = cast(meta[relay.Constant][53] /* ty=Tensor[(7, 14, 4), float32] */, dtype="float32") /* ty=Tensor[(7, 14, 4), float32] */;
  %931 = floor_divide(%929, %930) /* ty=Tensor[(7, 14, 4), float32] */;
  (%931,)
}

def @func_6251() -> (Tensor[(10, 3, 13), float64],) {
  %932 = @func_3722() /* ty=Tensor[(10, 3, 13), bool] */;
  %933 = cast(%932, dtype="float64") /* ty=Tensor[(10, 3, 13), float64] */;
  %934 = atan(%933) /* ty=Tensor[(10, 3, 13), float64] */;
  (%934,)
}

def @func_7472() -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(390, 2), uint8], Tensor[(780), uint8], Tensor[(7, 14, 4), uint16]) {
  %935 = @func_2607() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */;
  %936 = @func_1303() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %937 = cast(meta[relay.Constant][54] /* ty=Tensor[(780), uint8] */, dtype="uint8") /* ty=Tensor[(780), uint8] */;
  %938 = reshape(%937, newshape=[390, 2]) /* ty=Tensor[(390, 2), uint8] */;
  %939 = @func_931(%938) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(13, 10, 6), uint8], Tensor[(390, 2), uint8]) */;
  %940 = @func_7205() /* ty=(Tensor[(7, 14, 4), uint16],) */;
  %941 = %935.2;
  %942 = %936.0;
  %943 = %939.3;
  %944 = %940.0;
  (%941, %942, %943, meta[relay.Constant][54] /* ty=Tensor[(780), uint8] */, %944)
}

def @func_8502() -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(11, 11, 15), int64], Tensor[(121), int64], Tensor[(1815), int64]) {
  %945 = @func_7793() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */;
  %946 = @func_7442() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */;
  %947 = %946.0;
  %948 = cast(%947, dtype="float32") /* ty=Tensor[(7, 14, 4), float32] */;
  %949 = reshape(%948, newshape=[7, 14, 4]) /* ty=Tensor[(7, 14, 4), float32] */;
  %950 = @func_6177(%949) /* ty=(Tensor[(7, 14, 4), bool], Tensor[(780, ?), int8], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64]) */;
  %951 = @func_2607() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */;
  %952 = cast(meta[relay.Constant][55] /* ty=Tensor[(121), int64] */, dtype="int64") /* ty=Tensor[(121), int64] */;
  %953 = cast(meta[relay.Constant][56] /* ty=Tensor[(1815), int64] */, dtype="int64") /* ty=Tensor[(1815), int64] */;
  %954 = reshape(%952, newshape=[11, 11, 1]) /* ty=Tensor[(11, 11, 1), int64] */;
  %955 = reshape(%953, newshape=[11, 11, 15]) /* ty=Tensor[(11, 11, 15), int64] */;
  %956 = @func_6047(%954, %955) /* ty=(Tensor[(11, 11, 15), int64], Tensor[(11, 11, 15), float32], Tensor[(11, 11, 15), bool], Tensor[(13, 10, 6), uint8], Tensor[(5, 156), uint8]) */;
  %957 = %945.1;
  %958 = %950.2;
  %959 = %951.0;
  %960 = %956.0;
  (%957, %947, %958, %959, %960, meta[relay.Constant][55] /* ty=Tensor[(121), int64] */, meta[relay.Constant][56] /* ty=Tensor[(1815), int64] */)
}

def @func_9755() -> Tensor[(7, 14, 4), float32] {
  %961 = @func_2049() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64]) */;
  %961.0
}

def @func_7859(%var_7840: Tensor[(1, 60), float64]) -> (Tensor[(7, 14, 4), float32], Tensor[(847), int32], Tensor[(1, 60), float64], Tensor[(847), int32], Tensor[(7, 14, 4), float32]) {
  %962 = @func_2894() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(63, 2), uint8], Tensor[(847), int32], Tensor[(7, 14, 4), float32]) */;
  %963 = cast(%var_7840, dtype="float64") /* ty=Tensor[(1, 60), float64] */;
  %964 = cast(meta[relay.Constant][57] /* ty=Tensor[(847), int32] */, dtype="int32") /* ty=Tensor[(847), int32] */;
  %965 = reshape(%963, newshape=[60]) /* ty=Tensor[(60), float64] */;
  %966 = reshape(%964, newshape=[847]) /* ty=Tensor[(847), int32] */;
  %967 = @func_6460(%965, %966) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(1755), int8], Tensor[(7, 14, 4), float32], Tensor[(660), float64], Tensor[(60), float64], Tensor[(780), uint8], Tensor[(847), int32]) */;
  %968 = @func_856() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %969 = %962.0;
  %970 = %967.7;
  %971 = %968.0;
  (%969, %970, %var_7840, meta[relay.Constant][57] /* ty=Tensor[(847), int32] */, %971)
}

def @func_8864(%var_8844: Tensor[(3, 9, 13), float64]) -> (Tensor[(3, 9, 13), float64], Tensor[(7, 14, 4), float32]) {
  %972 = cast(%var_8844, dtype="float64") /* ty=Tensor[(3, 9, 13), float64] */;
  %973 = sqrt(%972) /* ty=Tensor[(3, 9, 13), float64] */;
  %974 = @func_4118() /* ty=Tensor[(7, 14, 4), float32] */;
  (%973, %974)
}

def @func_4009(%var_3985: Tensor[(60), float64], %var_3986: Tensor[(780), uint8], %var_3999: Tensor[(847), int32]) -> (Tensor[(7, 14, 4), float32], Tensor[(60), float64], Tensor[(60), float64], Tensor[(780), uint8], Tensor[(7, 14, 4), bool], Tensor[(780, 5), bool], Tensor[(660), float64], Tensor[(7800), float32], Tensor[(77, 11), float32], Tensor[(847), int32], Tensor[(780), uint8]) {
  %975 = @func_2468() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %976 = cast(%var_3985, dtype="float64") /* ty=Tensor[(60), float64] */;
  %977 = cast(%var_3986, dtype="uint8") /* ty=Tensor[(780), uint8] */;
  %978 = reshape(%976, newshape=[60]) /* ty=Tensor[(60), float64] */;
  %979 = reshape(%977, newshape=[13, 10, 6]) /* ty=Tensor[(13, 10, 6), uint8] */;
  %980 = @func_1714(%978, %979) /* ty=(Tensor[(7, 14, 4), float64], Tensor[(780), uint8], Tensor[(60), float64], Tensor[(10, 6, 126), bool], Tensor[(13, 10, 6), int32]) */;
  %981 = @func_2842() /* ty=(Tensor[(7, 14, 4), bool], Tensor[(7, 14, 4), bool]) */;
  %982 = cast(meta[relay.Constant][58] /* ty=Tensor[(660), float64] */, dtype="float64") /* ty=Tensor[(660), float64] */;
  %983 = cast(meta[relay.Constant][59] /* ty=Tensor[(7800), float32] */, dtype="float32") /* ty=Tensor[(7800), float32] */;
  %984 = reshape(%982, newshape=[660]) /* ty=Tensor[(660), float64] */;
  %985 = reshape(%983, newshape=[780, 10]) /* ty=Tensor[(780, 10), float32] */;
  %986 = @func_3503(%984, %985) /* ty=(Tensor[(11, 12, 5), float64], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), bool], Tensor[(780, 660), bool], Tensor[(780, 5), bool], Tensor[(3900), uint8], Tensor[(13, 10, 6), uint8], Tensor[(7, 14, 4), float32], Tensor[(780, ?), uint16], Tensor[(780, 10), float32]) */;
  %987 = cast(%var_3999, dtype="int32") /* ty=Tensor[(847), int32] */;
  %988 = cast(%var_3999, dtype="float32") /* ty=Tensor[(847), float32] */;
  %989 = reshape(%987, newshape=[77, 11]) /* ty=Tensor[(77, 11), int32] */;
  %990 = reshape(%988, newshape=[77, 11]) /* ty=Tensor[(77, 11), float32] */;
  %991 = @func_1553(%989, %990) /* ty=(Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32], Tensor[(77, 11), float32], Tensor[(7, 14, 4), float32], Tensor[(780), uint8], Tensor[(77, 11), bool], Tensor[(780), uint8], Tensor[(77, 11), float32], Tensor[(77, 11), float32]) */;
  %992 = %991.7;
  %993 = cast(%992, dtype="int32") /* ty=Tensor[(77, 11), int32] */;
  %994 = reshape(%993, newshape=[847]) /* ty=Tensor[(847), int32] */;
  %995 = @func_1426(%994) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(780), uint8], Tensor[(780), uint8], Tensor[(63, 2), uint8], Tensor[(7, 14, 4), float32], Tensor[(847), int32]) */;
  %996 = %975.0;
  %997 = %980.2;
  %998 = %981.0;
  %999 = %986.4;
  %1000 = %995.3;
  (%996, %997, %var_3985, %var_3986, %998, %999, meta[relay.Constant][58] /* ty=Tensor[(660), float64] */, meta[relay.Constant][59] /* ty=Tensor[(7800), float32] */, %992, %var_3999, %1000)
}

def @func_1303() -> (Tensor[(7, 14, 4), float32],) {
  %1001 = @func_856() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %1002 = %1001.0;
  (%1002,)
}

def @func_4990() -> Tensor[(7, 14, 4), float32] {
  %1003 = @func_3681() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %1003.0
}

def @func_8226() -> Tensor[(7, 14, 4), float32] {
  %1004 = @func_5842() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %1004.0
}

def @func_1322() -> Tensor[(7, 14, 4), float64] {
  %1005 = @func_988() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %1006 = %1005.0;
  %1007 = cast(%1006, dtype="float64") /* ty=Tensor[(7, 14, 4), float64] */;
  asinh(%1007) /* ty=Tensor[(7, 14, 4), float64] */
}

def @func_5357() -> Tensor[(7, 14, 4), float32] {
  @func_3884() /* ty=Tensor[(7, 14, 4), float32] */
}

def @func_7442() -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) {
  %1008 = @func_4975() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %1009 = @func_988() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %1010 = %1008.0;
  %1011 = %1009.0;
  (%1010, %1011)
}

def @func_9441() -> (Tensor[(10, 3, 13), bool], Tensor[(7, 14, 4), float32]) {
  %1012 = @func_5878() /* ty=(Tensor[(10, 3, 13), bool],) */;
  %1013 = %1012.0;
  %1014 = @func_8575() /* ty=Tensor[(7, 14, 4), float32] */;
  (%1013, %1014)
}

def @func_5437(%var_5378: Tensor[(847, 1), int32]) -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(847, ?), int64]) {
  %1015 = @func_4386() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */;
  %1016 = @func_2881() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %1017 = cast(%var_5378, dtype="int32") /* ty=Tensor[(847, 1), int32] */;
  %1018 = reshape(%1017, newshape=[847]) /* ty=Tensor[(847), int32] */;
  %1019 = @func_1087(%1018) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(11, 11, 7), int32], Tensor[(847), int32], Tensor[(7, 14, 4), float32]) */;
  %1020 = %1019.1;
  %1021 = cast(%1020, dtype="uint16") /* ty=Tensor[(11, 11, 7), uint16] */;
  %1022 = shape_of(%var_5378, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1023 = cast(%var_5378, dtype="uint16") /* ty=Tensor[(847, 1), uint16] */;
  %1024 = dyn.reshape(%1021, %1022, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %1025 = left_shift(%1023, %1024) /* ty=Tensor[(847, ?), uint16] */;
  %1026 = cast(%1025, dtype="float64") /* ty=Tensor[(847, ?), float64] */;
  %1027 = erf(%1026) /* ty=Tensor[(847, ?), float64] */;
  %1028 = cast(%var_5378, dtype="int64") /* ty=Tensor[(847, 1), int64] */;
  %1029 = shape_of(%1027, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1030 = cast(%1027, dtype="int64") /* ty=Tensor[(847, ?), int64] */;
  %1031 = dyn.reshape(%1028, %1029, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %1032 = %1015.0;
  %1033 = %1016.0;
  %1034 = bitwise_and(%1030, %1031) /* ty=Tensor[(847, ?), int64] */;
  (%1032, %1033, %1034)
}

def @func_5486(%var_5462: Tensor[(7, 5, 13), float32]) -> (Tensor[(7, 5, 13), float64], Tensor[(13, 4, 4), float32], Tensor[(208), float32]) {
  %1035 = cast(%var_5462, dtype="float32") /* ty=Tensor[(7, 5, 13), float32] */;
  %1036 = log10(%1035) /* ty=Tensor[(7, 5, 13), float32] */;
  %1037 = cast(%1036, dtype="float64") /* ty=Tensor[(7, 5, 13), float64] */;
  %1038 = shape_of(%var_5462, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1039 = cast(%var_5462, dtype="float64") /* ty=Tensor[(7, 5, 13), float64] */;
  %1040 = dyn.reshape(%1037, %1038, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1041 = cast(meta[relay.Constant][60] /* ty=Tensor[(208), float32] */, dtype="float32") /* ty=Tensor[(208), float32] */;
  %1042 = reshape(%1041, newshape=[13, 4, 4]) /* ty=Tensor[(13, 4, 4), float32] */;
  %1043 = @func_5201(%1042) /* ty=(Tensor[(13, 4, 4), float32],) */;
  %1044 = floor_divide(%1039, %1040) /* ty=Tensor[(7, 5, 13), float64] */;
  %1045 = %1043.0;
  (%1044, %1045, meta[relay.Constant][60] /* ty=Tensor[(208), float32] */)
}

def @func_8329() -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(847), int32]) {
  %1046 = @func_3929() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %1047 = cast(meta[relay.Constant][61] /* ty=Tensor[(847), int32] */, dtype="int32") /* ty=Tensor[(847), int32] */;
  %1048 = reshape(%1047, newshape=[847]) /* ty=Tensor[(847), int32] */;
  %1049 = @func_4356(%1048) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(847), int32], Tensor[(150, 26), int8], Tensor[(7, 14, 4), float32]) */;
  %1050 = %1046.0;
  %1051 = %1049.0;
  (%1050, %1051, meta[relay.Constant][61] /* ty=Tensor[(847), int32] */)
}

def @func_1626() -> Tensor[(7, 14, 4), float32] {
  %1052 = @func_1303() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %1052.0
}

def @func_9997() -> (Tensor[(7, 14, 4), float32],) {
  %1053 = @func_4462() /* ty=Tensor[(7, 14, 4), float32] */;
  (%1053,)
}

def @func_8219() -> Tensor[(10, 3, 13), float64] {
  %1054 = @func_8029() /* ty=(Tensor[(10, 3, 13), float64], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(847), int32]) */;
  %1054.0
}

def @func_8171() -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) {
  %1055 = @func_5122() /* ty=Tensor[(7, 14, 4), float32] */;
  %1056 = @func_2511() /* ty=Tensor[(7, 14, 4), float32] */;
  (%1055, %1056)
}

def @func_807(%var_798: Tensor[(11, 11, 7), int32]) -> Tensor[(11, 11, 7), int32] {
  %1057 = cast(%var_798, dtype="int32") /* ty=Tensor[(11, 11, 7), int32] */;
  %1058 = shape_of(meta[relay.Constant][62] /* ty=Tensor[(11, 11, 7), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1059 = cast(meta[relay.Constant][62] /* ty=Tensor[(11, 11, 7), int32] */, dtype="int32") /* ty=Tensor[(11, 11, 7), int32] */;
  %1060 = dyn.reshape(%1057, %1058, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  subtract(%1059, %1060) /* ty=Tensor[(11, 11, 7), int32] */
}

def @func_8785() -> (Tensor[(7, 14, 4), float32],) {
  %1061 = @func_4990() /* ty=Tensor[(7, 14, 4), float32] */;
  (%1061,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_6505(%var_6504: Tensor[(847), int32]) -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(847, ?), int64], Tensor[(847), int32], Tensor[(7, 14, 4), uint16]) {
  %9 = fn (%var_6488: Tensor[(847), int32]) -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(847, ?), int64], Tensor[(847), int32], Tensor[(7, 14, 4), uint16]) {
    %0 = @func_2881() /* ty=(Tensor[(7, 14, 4), float32],) */;
    %1 = cast(%var_6488, dtype="int32") /* ty=Tensor[(847), int32] */;
    %2 = reshape(%1, newshape=[847, 1]) /* ty=Tensor[(847, 1), int32] */;
    %3 = @func_5437(%2) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(847, ?), int64]) */;
    %4 = @func_6125() /* ty=(Tensor[(7, 14, 4), uint16],) */;
    %5 = %0.0;
    %6 = @func_3884() /* ty=Tensor[(7, 14, 4), float32] */;
    %7 = %3.2;
    %8 = %4.0;
    (%5, %6, %7, %var_6488, %8)
  };
  %9(%var_6504) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(847, ?), int64], Tensor[(847), int32], Tensor[(7, 14, 4), uint16]) */
}

def @func_2801() -> (Tensor[(7, 14, 4), bool], Tensor[(11, 12, 5), float64], Tensor[(660), float64], Tensor[(7, 14, 4), float32], Tensor[(847), int32], Tensor[(7, 14, 4), float32]) {
  %10 = @func_1673() /* ty=Tensor[(7, 14, 4), float32] */;
  %11 = cast(meta[relay.Constant][0] /* ty=Tensor[(7, 14, 4), float32] */, dtype="bool") /* ty=Tensor[(7, 14, 4), bool] */;
  %12 = shape_of(%10, dtype="int32") /* ty=Tensor[(3), int32] */;
  %13 = cast(%10, dtype="bool") /* ty=Tensor[(7, 14, 4), bool] */;
  %14 = dyn.reshape(%11, %12, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %15 = cast(meta[relay.Constant][1] /* ty=Tensor[(660), float64] */, dtype="float64") /* ty=Tensor[(660), float64] */;
  %16 = reshape(%15, newshape=[11, 12, 5]) /* ty=Tensor[(11, 12, 5), float64] */;
  %17 = @func_2321(%16) /* ty=(Tensor[(11, 12, 5), float64], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32]) */;
  %18 = cast(meta[relay.Constant][2] /* ty=Tensor[(847), int32] */, dtype="int32") /* ty=Tensor[(847), int32] */;
  %19 = reshape(%18, newshape=[847]) /* ty=Tensor[(847), int32] */;
  %20 = @func_1222(%19) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(847), uint64]) */;
  %21 = @func_2468() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %22 = equal(%13, %14) /* ty=Tensor[(7, 14, 4), bool] */;
  %23 = %17.0;
  %24 = %20.0;
  %25 = %21.0;
  (%22, %23, meta[relay.Constant][1] /* ty=Tensor[(660), float64] */, %24, meta[relay.Constant][2] /* ty=Tensor[(847), int32] */, %25)
}

def @func_2895() -> (Tensor[(7, 14, 4), float32], Tensor[(63, 2), uint8], Tensor[(847), int32], Tensor[(7, 14, 4), float32]) {
  %34 = fn () -> (Tensor[(7, 14, 4), float32], Tensor[(63, 2), uint8], Tensor[(847), int32], Tensor[(7, 14, 4), float32]) {
    %26 = @func_2881() /* ty=(Tensor[(7, 14, 4), float32],) */;
    %27 = cast(meta[relay.Constant][3] /* ty=Tensor[(847), int32] */, dtype="int32") /* ty=Tensor[(847), int32] */;
    %28 = reshape(%27, newshape=[847]) /* ty=Tensor[(847), int32] */;
    %29 = @func_1426(%28) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(780), uint8], Tensor[(780), uint8], Tensor[(63, 2), uint8], Tensor[(7, 14, 4), float32], Tensor[(847), int32]) */;
    %30 = @func_1931() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(13, 10, 6), uint8], Tensor[(780), uint8], Tensor[(7, 14, 4), uint16]) */;
    %31 = %26.0;
    %32 = %29.4;
    %33 = %30.1;
    (%31, %32, meta[relay.Constant][3] /* ty=Tensor[(847), int32] */, %33)
  };
  %34() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(63, 2), uint8], Tensor[(847), int32], Tensor[(7, 14, 4), float32]) */
}

def @func_2513() -> Tensor[(7, 14, 4), float32] {
  @func_2511() /* ty=Tensor[(7, 14, 4), float32] */
}

def @func_8069() -> (Tensor[(7, 14, 4), float32],) {
  @func_8067() /* ty=(Tensor[(7, 14, 4), float32],) */
}

def @func_1127() -> (Tensor[(7, 14, 4), float32],) {
  %37 = fn () -> (Tensor[(7, 14, 4), float32],) {
    %35 = @func_856() /* ty=(Tensor[(7, 14, 4), float32],) */;
    %36 = %35.0;
    (%36,)
  };
  %37() /* ty=(Tensor[(7, 14, 4), float32],) */
}

def @func_807(%var_798: Tensor[(11, 11, 7), int32]) -> Tensor[(11, 11, 7), int32] {
  %38 = cast(%var_798, dtype="int32") /* ty=Tensor[(11, 11, 7), int32] */;
  %39 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(11, 11, 7), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %40 = cast(meta[relay.Constant][4] /* ty=Tensor[(11, 11, 7), int32] */, dtype="int32") /* ty=Tensor[(11, 11, 7), int32] */;
  %41 = dyn.reshape(%38, %39, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  subtract(%40, %41) /* ty=Tensor[(11, 11, 7), int32] */
}

def @func_7813() -> Tensor[(7, 14, 4), float32] {
  @func_1673() /* ty=Tensor[(7, 14, 4), float32] */
}

def @func_5488(%var_5487: Tensor[(7, 5, 13), float32]) -> (Tensor[(7, 5, 13), float64], Tensor[(13, 4, 4), float32], Tensor[(208), float32]) {
  %53 = fn (%var_5462: Tensor[(7, 5, 13), float32]) -> (Tensor[(7, 5, 13), float64], Tensor[(13, 4, 4), float32], Tensor[(208), float32]) {
    %42 = cast(%var_5462, dtype="float32") /* ty=Tensor[(7, 5, 13), float32] */;
    %43 = log10(%42) /* ty=Tensor[(7, 5, 13), float32] */;
    %44 = cast(%43, dtype="float64") /* ty=Tensor[(7, 5, 13), float64] */;
    %45 = shape_of(%var_5462, dtype="int32") /* ty=Tensor[(3), int32] */;
    %46 = cast(%var_5462, dtype="float64") /* ty=Tensor[(7, 5, 13), float64] */;
    %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %48 = cast(meta[relay.Constant][5] /* ty=Tensor[(208), float32] */, dtype="float32") /* ty=Tensor[(208), float32] */;
    %49 = reshape(%48, newshape=[13, 4, 4]) /* ty=Tensor[(13, 4, 4), float32] */;
    %50 = @func_5201(%49) /* ty=(Tensor[(13, 4, 4), float32],) */;
    %51 = floor_divide(%46, %47) /* ty=Tensor[(7, 5, 13), float64] */;
    %52 = %50.0;
    (%51, %52, meta[relay.Constant][5] /* ty=Tensor[(208), float32] */)
  };
  %53(%var_5487) /* ty=(Tensor[(7, 5, 13), float64], Tensor[(13, 4, 4), float32], Tensor[(208), float32]) */
}

def @func_6802() -> (Tensor[(7, 14, 4), float32], Tensor[(10, 3, 13), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) {
  %54 = @func_2049() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64]) */;
  %55 = @func_2468() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %56 = @func_1749() /* ty=Tensor[(7, 14, 4), float32] */;
  %57 = @func_4758() /* ty=Tensor[(10, 3, 13), float32] */;
  %58 = %54.0;
  %59 = %55.0;
  (%56, %57, %58, %59)
}

def @func_8172() -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) {
  %62 = fn () -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) {
    %60 = @func_5122() /* ty=Tensor[(7, 14, 4), float32] */;
    %61 = @func_2511() /* ty=Tensor[(7, 14, 4), float32] */;
    (%60, %61)
  };
  %62() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */
}

def @func_6599() -> Tensor[(7, 14, 4), float32] {
  @func_6597() /* ty=Tensor[(7, 14, 4), float32] */
}

def @func_5608() -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) {
  %63 = @func_2511() /* ty=Tensor[(7, 14, 4), float32] */;
  %64 = @func_3884() /* ty=Tensor[(7, 14, 4), float32] */;
  (%63, %64)
}

def @func_9443() -> (Tensor[(10, 3, 13), bool], Tensor[(7, 14, 4), float32]) {
  @func_9441() /* ty=(Tensor[(10, 3, 13), bool], Tensor[(7, 14, 4), float32]) */
}

def @func_2511() -> Tensor[(7, 14, 4), float32] {
  @func_2263() /* ty=Tensor[(7, 14, 4), float32] */
}

def @func_6940() -> (Tensor[(7, 14, 4), float32], Tensor[(11, 11, 7), int32], Tensor[(10, 3, 13), float64]) {
  %69 = fn () -> (Tensor[(7, 14, 4), float32], Tensor[(11, 11, 7), int32], Tensor[(10, 3, 13), float64]) {
    %65 = @func_1822() /* ty=(Tensor[(11, 11, 7), int32], Tensor[(847), int32], Tensor[(7, 14, 4), uint64], Tensor[(7, 14, 4), float64]) */;
    %66 = @func_4462() /* ty=Tensor[(7, 14, 4), float32] */;
    %67 = %65.0;
    %68 = @func_4862() /* ty=Tensor[(10, 3, 13), float64] */;
    (%66, %67, %68)
  };
  %69() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(11, 11, 7), int32], Tensor[(10, 3, 13), float64]) */
}

def @func_1666(%var_1665: Tensor[(7, 14, 4), float64]) -> Tensor[(7, 14, 4), bool] {
  %75 = fn (%var_1644: Tensor[(7, 14, 4), float64]) -> Tensor[(7, 14, 4), bool] {
    %70 = @func_1322() /* ty=Tensor[(7, 14, 4), float64] */;
    %71 = cast(%var_1644, dtype="bool") /* ty=Tensor[(7, 14, 4), bool] */;
    %72 = shape_of(%70, dtype="int32") /* ty=Tensor[(3), int32] */;
    %73 = cast(%70, dtype="bool") /* ty=Tensor[(7, 14, 4), bool] */;
    %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less_equal(%73, %74) /* ty=Tensor[(7, 14, 4), bool] */
  };
  %75(%var_1665) /* ty=Tensor[(7, 14, 4), bool] */
}

def @func_7988() -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), uint16], Tensor[(7, 14, 4), bool], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) {
  @func_7986() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), uint16], Tensor[(7, 14, 4), bool], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */
}

def @func_1087(%var_1050: Tensor[(847), int32]) -> (Tensor[(7, 14, 4), float32], Tensor[(11, 11, 7), int32], Tensor[(847), int32], Tensor[(7, 14, 4), float32]) {
  %76 = @func_856() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %77 = cast(%var_1050, dtype="int32") /* ty=Tensor[(847), int32] */;
  %78 = reshape(%77, newshape=[11, 11, 7]) /* ty=Tensor[(11, 11, 7), int32] */;
  %79 = @func_856() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %80 = %76.0;
  %81 = @func_807(%78) /* ty=Tensor[(11, 11, 7), int32] */;
  %82 = %79.0;
  (%80, %81, %var_1050, %82)
}

def @func_1931() -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(13, 10, 6), uint8], Tensor[(780), uint8], Tensor[(7, 14, 4), uint16]) {
  %83 = @func_1303() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %84 = cast(meta[relay.Constant][6] /* ty=Tensor[(780), uint8] */, dtype="uint8") /* ty=Tensor[(780), uint8] */;
  %85 = reshape(%84, newshape=[390, 2]) /* ty=Tensor[(390, 2), uint8] */;
  %86 = @func_931(%85) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(13, 10, 6), uint8], Tensor[(390, 2), uint8]) */;
  %87 = @func_1322() /* ty=Tensor[(7, 14, 4), float64] */;
  %88 = cast(meta[relay.Constant][7] /* ty=Tensor[(7, 14, 4), float64] */, dtype="uint16") /* ty=Tensor[(7, 14, 4), uint16] */;
  %89 = shape_of(%87, dtype="int32") /* ty=Tensor[(3), int32] */;
  %90 = cast(%87, dtype="uint16") /* ty=Tensor[(7, 14, 4), uint16] */;
  %91 = dyn.reshape(%88, %89, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %92 = @func_1626() /* ty=Tensor[(7, 14, 4), float32] */;
  %93 = %83.0;
  %94 = %86.2;
  %95 = multiply(%90, %91) /* ty=Tensor[(7, 14, 4), uint16] */;
  (%92, %93, %94, meta[relay.Constant][6] /* ty=Tensor[(780), uint8] */, %95)
}

def @func_3929() -> (Tensor[(7, 14, 4), float32],) {
  %96 = @func_1126() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %97 = %96.0;
  (%97,)
}

def @func_1933() -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(13, 10, 6), uint8], Tensor[(780), uint8], Tensor[(7, 14, 4), uint16]) {
  @func_1931() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(13, 10, 6), uint8], Tensor[(780), uint8], Tensor[(7, 14, 4), uint16]) */
}

def @func_4070(%var_4068: Tensor[(10, 1, 3), float32]) -> (Tensor[(10, 1, 3), float32], Tensor[(10, 1, 3), float64]) {
  @func_4067(%var_4068) /* ty=(Tensor[(10, 1, 3), float32], Tensor[(10, 1, 3), float64]) */
}

def @func_5742(%var_5711: Tensor[(7, 14, 4), float32]) -> (Tensor[(7, 14, 4), uint64], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), int8], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) {
  %98 = @func_1822() /* ty=(Tensor[(11, 11, 7), int32], Tensor[(847), int32], Tensor[(7, 14, 4), uint64], Tensor[(7, 14, 4), float64]) */;
  %99 = @func_3005() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */;
  %100 = @func_3929() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %101 = %100.0;
  %102 = cast(%101, dtype="float32") /* ty=Tensor[(7, 14, 4), float32] */;
  %103 = erf(%102) /* ty=Tensor[(7, 14, 4), float32] */;
  %104 = cast(%var_5711, dtype="int8") /* ty=Tensor[(7, 14, 4), int8] */;
  %105 = shape_of(%103, dtype="int32") /* ty=Tensor[(3), int32] */;
  %106 = cast(%103, dtype="int8") /* ty=Tensor[(7, 14, 4), int8] */;
  %107 = dyn.reshape(%104, %105, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %108 = @func_3005() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */;
  %109 = %98.2;
  %110 = %99.2;
  %111 = @func_4990() /* ty=Tensor[(7, 14, 4), float32] */;
  %112 = @func_1322() /* ty=Tensor[(7, 14, 4), float64] */;
  %113 = right_shift(%106, %107) /* ty=Tensor[(7, 14, 4), int8] */;
  %114 = @func_4990() /* ty=Tensor[(7, 14, 4), float32] */;
  %115 = %108.1;
  (%109, %110, %111, %112, %113, %114, %115)
}

def @func_1717(%var_1715: Tensor[(60), float64], %var_1716: Tensor[(13, 10, 6), uint8]) -> (Tensor[(7, 14, 4), float64], Tensor[(780), uint8], Tensor[(60), float64], Tensor[(10, 6, 126), bool], Tensor[(13, 10, 6), int32]) {
  %134 = fn (%var_1695: Tensor[(60), float64], %var_1705: Tensor[(13, 10, 6), uint8]) -> (Tensor[(7, 14, 4), float64], Tensor[(780), uint8], Tensor[(60), float64], Tensor[(10, 6, 126), bool], Tensor[(13, 10, 6), int32]) {
    %116 = cast(%var_1695, dtype="float64") /* ty=Tensor[(60), float64] */;
    %117 = reshape(%116, newshape=[10, 6, 1]) /* ty=Tensor[(10, 6, 1), float64] */;
    %118 = @func_1577(%117) /* ty=Tensor[(10, 6, 1), float64] */;
    %119 = cast(meta[relay.Constant][9] /* ty=Tensor[(126), uint8] */, dtype="bool") /* ty=Tensor[(126), bool] */;
    %120 = cast(%118, dtype="bool") /* ty=Tensor[(10, 6, 1), bool] */;
    %121 = cast(meta[relay.Constant][9] /* ty=Tensor[(126), uint8] */, dtype="uint8") /* ty=Tensor[(126), uint8] */;
    %122 = cast(meta[relay.Constant][8] /* ty=Tensor[(780), uint8] */, dtype="uint8") /* ty=Tensor[(780), uint8] */;
    %123 = reshape(%121, newshape=[9, 7, 2]) /* ty=Tensor[(9, 7, 2), uint8] */;
    %124 = reshape(%122, newshape=[780]) /* ty=Tensor[(780), uint8] */;
    %125 = @func_1038(%123, %124) /* ty=(Tensor[(9, 7, 2), uint8], Tensor[(13, 10, 6), uint8], Tensor[(780), uint8]) */;
    %126 = %125.1;
    %127 = cast(%var_1705, dtype="int32") /* ty=Tensor[(13, 10, 6), int32] */;
    %128 = shape_of(%126, dtype="int32") /* ty=Tensor[(3), int32] */;
    %129 = cast(%126, dtype="int32") /* ty=Tensor[(13, 10, 6), int32] */;
    %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %131 = @func_1322() /* ty=Tensor[(7, 14, 4), float64] */;
    %132 = logical_and(%119, %120) /* ty=Tensor[(10, 6, 126), bool] */;
    %133 = bitwise_xor(%129, %130) /* ty=Tensor[(13, 10, 6), int32] */;
    (%131, meta[relay.Constant][8] /* ty=Tensor[(780), uint8] */, %var_1695, %132, %133)
  };
  %134(%var_1715, %var_1716) /* ty=(Tensor[(7, 14, 4), float64], Tensor[(780), uint8], Tensor[(60), float64], Tensor[(10, 6, 126), bool], Tensor[(13, 10, 6), int32]) */
}

def @func_5940() -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) {
  %135 = @func_1126() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %136 = @func_3929() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %137 = %135.0;
  %138 = %136.0;
  (%137, %138)
}

def @func_1322() -> Tensor[(7, 14, 4), float64] {
  %139 = @func_988() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %140 = %139.0;
  %141 = cast(%140, dtype="float64") /* ty=Tensor[(7, 14, 4), float64] */;
  asinh(%141) /* ty=Tensor[(7, 14, 4), float64] */
}

def @func_1824() -> (Tensor[(11, 11, 7), int32], Tensor[(847), int32], Tensor[(7, 14, 4), uint64], Tensor[(7, 14, 4), float64]) {
  @func_1822() /* ty=(Tensor[(11, 11, 7), int32], Tensor[(847), int32], Tensor[(7, 14, 4), uint64], Tensor[(7, 14, 4), float64]) */
}

def @func_8053() -> Tensor[(7, 14, 4), float32] {
  @func_8051() /* ty=Tensor[(7, 14, 4), float32] */
}

def @func_7077(%var_7049: Tensor[(60), float64], %var_7050: Tensor[(780), uint8], %var_7051: Tensor[(847), int32], %var_7060: Tensor[(3900), uint8], %var_7064: Tensor[(847), float32]) -> (Tensor[(7, 14, 4), float32], Tensor[(7800), float32], Tensor[(60), float64], Tensor[(780), uint8], Tensor[(7, 14, 4), float32], Tensor[(3900), uint8], Tensor[(847), float64], Tensor[(847), float64]) {
  %142 = cast(%var_7049, dtype="float64") /* ty=Tensor[(60), float64] */;
  %143 = cast(%var_7050, dtype="uint8") /* ty=Tensor[(780), uint8] */;
  %144 = cast(%var_7051, dtype="int32") /* ty=Tensor[(847), int32] */;
  %145 = reshape(%142, newshape=[60]) /* ty=Tensor[(60), float64] */;
  %146 = reshape(%143, newshape=[780]) /* ty=Tensor[(780), uint8] */;
  %147 = reshape(%144, newshape=[847]) /* ty=Tensor[(847), int32] */;
  %148 = @func_4009(%145, %146, %147) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(60), float64], Tensor[(60), float64], Tensor[(780), uint8], Tensor[(7, 14, 4), bool], Tensor[(780, 5), bool], Tensor[(660), float64], Tensor[(7800), float32], Tensor[(77, 11), float32], Tensor[(847), int32], Tensor[(780), uint8]) */;
  %149 = cast(%var_7060, dtype="uint8") /* ty=Tensor[(3900), uint8] */;
  %150 = reshape(%149, newshape=[1950, 2]) /* ty=Tensor[(1950, 2), uint8] */;
  %151 = @func_4428(%150) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(3900), uint8], Tensor[(1950, 2), float64]) */;
  %152 = cast(%var_7051, dtype="float32") /* ty=Tensor[(847), float32] */;
  %153 = sin(%152) /* ty=Tensor[(847), float32] */;
  %154 = cast(%var_7064, dtype="float64") /* ty=Tensor[(847), float64] */;
  %155 = shape_of(%153, dtype="int32") /* ty=Tensor[(1), int32] */;
  %156 = cast(%153, dtype="float64") /* ty=Tensor[(847), float64] */;
  %157 = dyn.reshape(%154, %155, newshape=[]) /* ty=Tensor[(?), float64] */;
  %158 = cast(%153, dtype="float64") /* ty=Tensor[(847), float64] */;
  %159 = @func_5279() /* ty=Tensor[(7, 14, 4), float32] */;
  %160 = %148.7;
  %161 = %151.0;
  %162 = add(%156, %157) /* ty=Tensor[(847), float64] */;
  %163 = sqrt(%158) /* ty=Tensor[(847), float64] */;
  (%159, %160, %var_7049, %var_7050, %161, %var_7060, %162, %163)
}

def @func_6095(%var_6093: Tensor[(13, 12, 16), int64], %var_6094: Tensor[(13, 12, 16), int64]) -> (Tensor[(13, 12, 16), int64],) {
  %169 = fn (%var_6084: Tensor[(13, 12, 16), int64], %var_6085: Tensor[(13, 12, 16), int64]) -> (Tensor[(13, 12, 16), int64],) {
    %164 = cast(%var_6085, dtype="int64") /* ty=Tensor[(13, 12, 16), int64] */;
    %165 = shape_of(%var_6084, dtype="int32") /* ty=Tensor[(3), int32] */;
    %166 = cast(%var_6084, dtype="int64") /* ty=Tensor[(13, 12, 16), int64] */;
    %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %168 = left_shift(%166, %167) /* ty=Tensor[(13, 12, 16), int64] */;
    (%168,)
  };
  %169(%var_6093, %var_6094) /* ty=(Tensor[(13, 12, 16), int64],) */
}

def @func_8867(%var_8865: Tensor[(3, 9, 13), float64]) -> (Tensor[(3, 9, 13), float64], Tensor[(7, 14, 4), float32]) {
  @func_8864(%var_8865) /* ty=(Tensor[(3, 9, 13), float64], Tensor[(7, 14, 4), float32]) */
}

def @func_1579(%var_1578: Tensor[(10, 6, 1), float64]) -> Tensor[(10, 6, 1), float64] {
  %171 = fn (%var_1565: Tensor[(10, 6, 1), float64]) -> Tensor[(10, 6, 1), float64] {
    %170 = cast(%var_1565, dtype="float64") /* ty=Tensor[(10, 6, 1), float64] */;
    sinh(%170) /* ty=Tensor[(10, 6, 1), float64] */
  };
  %171(%var_1578) /* ty=Tensor[(10, 6, 1), float64] */
}

def @func_8557(%var_8555: Tensor[(5, 5, 10), int64], %var_8556: Tensor[(847), int32]) -> (Tensor[(5, 5, 10), int64], Tensor[(7, 14, 4), uint16], Tensor[(7, 14, 4), float32], Tensor[(780), uint8], Tensor[(1, 60), float64], Tensor[(847), int32], Tensor[(7, 14, 4), float32]) {
  @func_8553(%var_8555, %var_8556) /* ty=(Tensor[(5, 5, 10), int64], Tensor[(7, 14, 4), uint16], Tensor[(7, 14, 4), float32], Tensor[(780), uint8], Tensor[(1, 60), float64], Tensor[(847), int32], Tensor[(7, 14, 4), float32]) */
}

def @func_2051() -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64]) {
  @func_2049() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64]) */
}

def @func_4990() -> Tensor[(7, 14, 4), float32] {
  %172 = @func_3681() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %172.0
}

def @func_6463(%var_6461: Tensor[(60), float64], %var_6462: Tensor[(847), int32]) -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(1755), int8], Tensor[(7, 14, 4), float32], Tensor[(660), float64], Tensor[(60), float64], Tensor[(780), uint8], Tensor[(847), int32]) {
  %189 = fn (%var_6449: Tensor[(60), float64], %var_6451: Tensor[(847), int32]) -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(1755), int8], Tensor[(7, 14, 4), float32], Tensor[(660), float64], Tensor[(60), float64], Tensor[(780), uint8], Tensor[(847), int32]) {
    %173 = @func_5242() /* ty=(Tensor[(7, 14, 4), float32],) */;
    %174 = cast(meta[relay.Constant][10] /* ty=Tensor[(1755), int8] */, dtype="int8") /* ty=Tensor[(1755), int8] */;
    %175 = reshape(%174, newshape=[1755]) /* ty=Tensor[(1755), int8] */;
    %176 = @func_4214(%175) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32], Tensor[(1755), int8]) */;
    %177 = @func_3929() /* ty=(Tensor[(7, 14, 4), float32],) */;
    %178 = cast(%var_6449, dtype="float64") /* ty=Tensor[(60), float64] */;
    %179 = cast(meta[relay.Constant][11] /* ty=Tensor[(780), uint8] */, dtype="uint8") /* ty=Tensor[(780), uint8] */;
    %180 = cast(%var_6451, dtype="int32") /* ty=Tensor[(847), int32] */;
    %181 = reshape(%178, newshape=[60]) /* ty=Tensor[(60), float64] */;
    %182 = reshape(%179, newshape=[780]) /* ty=Tensor[(780), uint8] */;
    %183 = reshape(%180, newshape=[847]) /* ty=Tensor[(847), int32] */;
    %184 = @func_4009(%181, %182, %183) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(60), float64], Tensor[(60), float64], Tensor[(780), uint8], Tensor[(7, 14, 4), bool], Tensor[(780, 5), bool], Tensor[(660), float64], Tensor[(7800), float32], Tensor[(77, 11), float32], Tensor[(847), int32], Tensor[(780), uint8]) */;
    %185 = %173.0;
    %186 = %176.2;
    %187 = %177.0;
    %188 = %184.6;
    (%185, %186, meta[relay.Constant][10] /* ty=Tensor[(1755), int8] */, %187, %188, %var_6449, meta[relay.Constant][11] /* ty=Tensor[(780), uint8] */, %var_6451)
  };
  %189(%var_6461, %var_6462) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(1755), int8], Tensor[(7, 14, 4), float32], Tensor[(660), float64], Tensor[(60), float64], Tensor[(780), uint8], Tensor[(847), int32]) */
}

def @func_9090() -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(780, ?), bool]) {
  %206 = fn () -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(780, ?), bool]) {
    %190 = @func_2881() /* ty=(Tensor[(7, 14, 4), float32],) */;
    %191 = @func_6130() /* ty=Tensor[(780, 1), uint8] */;
    %192 = cast(%191, dtype="float32") /* ty=Tensor[(780, 1), float32] */;
    %193 = cos(%192) /* ty=Tensor[(780, 1), float32] */;
    %194 = cast(%191, dtype="float32") /* ty=Tensor[(780, 1), float32] */;
    %195 = shape_of(%193, dtype="int32") /* ty=Tensor[(2), int32] */;
    %196 = cast(%193, dtype="float32") /* ty=Tensor[(780, 1), float32] */;
    %197 = dyn.reshape(%194, %195, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %198 = floor_mod(%196, %197) /* ty=Tensor[(780, ?), float32] */;
    %199 = cast(%193, dtype="bool") /* ty=Tensor[(780, 1), bool] */;
    %200 = shape_of(%198, dtype="int32") /* ty=Tensor[(2), int32] */;
    %201 = cast(%198, dtype="bool") /* ty=Tensor[(780, ?), bool] */;
    %202 = dyn.reshape(%199, %200, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %203 = @func_1626() /* ty=Tensor[(7, 14, 4), float32] */;
    %204 = %190.0;
    %205 = greater(%201, %202) /* ty=Tensor[(780, ?), bool] */;
    (%203, %204, %205)
  };
  %206() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(780, ?), bool]) */
}

def @func_810(%var_808: Tensor[(11, 11, 7), int32]) -> Tensor[(11, 11, 7), int32] {
  @func_807(%var_808) /* ty=Tensor[(11, 11, 7), int32] */
}

def @func_8577() -> Tensor[(7, 14, 4), float32] {
  @func_8575() /* ty=Tensor[(7, 14, 4), float32] */
}

def @func_9347() -> Tensor[(7, 14, 4), float32] {
  %207 = @func_4743() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %207.0
}

def @func_4009(%var_3985: Tensor[(60), float64], %var_3986: Tensor[(780), uint8], %var_3999: Tensor[(847), int32]) -> (Tensor[(7, 14, 4), float32], Tensor[(60), float64], Tensor[(60), float64], Tensor[(780), uint8], Tensor[(7, 14, 4), bool], Tensor[(780, 5), bool], Tensor[(660), float64], Tensor[(7800), float32], Tensor[(77, 11), float32], Tensor[(847), int32], Tensor[(780), uint8]) {
  %208 = @func_2468() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %209 = cast(%var_3985, dtype="float64") /* ty=Tensor[(60), float64] */;
  %210 = cast(%var_3986, dtype="uint8") /* ty=Tensor[(780), uint8] */;
  %211 = reshape(%209, newshape=[60]) /* ty=Tensor[(60), float64] */;
  %212 = reshape(%210, newshape=[13, 10, 6]) /* ty=Tensor[(13, 10, 6), uint8] */;
  %213 = @func_1714(%211, %212) /* ty=(Tensor[(7, 14, 4), float64], Tensor[(780), uint8], Tensor[(60), float64], Tensor[(10, 6, 126), bool], Tensor[(13, 10, 6), int32]) */;
  %214 = @func_2842() /* ty=(Tensor[(7, 14, 4), bool], Tensor[(7, 14, 4), bool]) */;
  %215 = cast(meta[relay.Constant][12] /* ty=Tensor[(660), float64] */, dtype="float64") /* ty=Tensor[(660), float64] */;
  %216 = cast(meta[relay.Constant][13] /* ty=Tensor[(7800), float32] */, dtype="float32") /* ty=Tensor[(7800), float32] */;
  %217 = reshape(%215, newshape=[660]) /* ty=Tensor[(660), float64] */;
  %218 = reshape(%216, newshape=[780, 10]) /* ty=Tensor[(780, 10), float32] */;
  %219 = @func_3503(%217, %218) /* ty=(Tensor[(11, 12, 5), float64], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), bool], Tensor[(780, 660), bool], Tensor[(780, 5), bool], Tensor[(3900), uint8], Tensor[(13, 10, 6), uint8], Tensor[(7, 14, 4), float32], Tensor[(780, ?), uint16], Tensor[(780, 10), float32]) */;
  %220 = cast(%var_3999, dtype="int32") /* ty=Tensor[(847), int32] */;
  %221 = cast(%var_3999, dtype="float32") /* ty=Tensor[(847), float32] */;
  %222 = reshape(%220, newshape=[77, 11]) /* ty=Tensor[(77, 11), int32] */;
  %223 = reshape(%221, newshape=[77, 11]) /* ty=Tensor[(77, 11), float32] */;
  %224 = @func_1553(%222, %223) /* ty=(Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32], Tensor[(77, 11), float32], Tensor[(7, 14, 4), float32], Tensor[(780), uint8], Tensor[(77, 11), bool], Tensor[(780), uint8], Tensor[(77, 11), float32], Tensor[(77, 11), float32]) */;
  %225 = %224.7;
  %226 = cast(%225, dtype="int32") /* ty=Tensor[(77, 11), int32] */;
  %227 = reshape(%226, newshape=[847]) /* ty=Tensor[(847), int32] */;
  %228 = @func_1426(%227) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(780), uint8], Tensor[(780), uint8], Tensor[(63, 2), uint8], Tensor[(7, 14, 4), float32], Tensor[(847), int32]) */;
  %229 = %208.0;
  %230 = %213.2;
  %231 = %214.0;
  %232 = %219.4;
  %233 = %228.3;
  (%229, %230, %var_3985, %var_3986, %231, %232, meta[relay.Constant][12] /* ty=Tensor[(660), float64] */, meta[relay.Constant][13] /* ty=Tensor[(7800), float32] */, %225, %var_3999, %233)
}

def @func_7178() -> (Tensor[(7, 14, 4), float32], Tensor[(780), uint8], Tensor[(847), int32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), uint16], Tensor[(7, 14, 4), float32]) {
  %234 = @func_2468() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %235 = cast(meta[relay.Constant][14] /* ty=Tensor[(847), int32] */, dtype="int32") /* ty=Tensor[(847), int32] */;
  %236 = cast(meta[relay.Constant][14] /* ty=Tensor[(847), int32] */, dtype="float32") /* ty=Tensor[(847), float32] */;
  %237 = reshape(%235, newshape=[77, 11]) /* ty=Tensor[(77, 11), int32] */;
  %238 = reshape(%236, newshape=[77, 11]) /* ty=Tensor[(77, 11), float32] */;
  %239 = @func_1553(%237, %238) /* ty=(Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32], Tensor[(77, 11), float32], Tensor[(7, 14, 4), float32], Tensor[(780), uint8], Tensor[(77, 11), bool], Tensor[(780), uint8], Tensor[(77, 11), float32], Tensor[(77, 11), float32]) */;
  %240 = cast(meta[relay.Constant][14] /* ty=Tensor[(847), int32] */, dtype="int32") /* ty=Tensor[(847), int32] */;
  %241 = cast(meta[relay.Constant][14] /* ty=Tensor[(847), int32] */, dtype="float32") /* ty=Tensor[(847), float32] */;
  %242 = reshape(%240, newshape=[77, 11]) /* ty=Tensor[(77, 11), int32] */;
  %243 = reshape(%241, newshape=[77, 11]) /* ty=Tensor[(77, 11), float32] */;
  %244 = @func_1553(%242, %243) /* ty=(Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32], Tensor[(77, 11), float32], Tensor[(7, 14, 4), float32], Tensor[(780), uint8], Tensor[(77, 11), bool], Tensor[(780), uint8], Tensor[(77, 11), float32], Tensor[(77, 11), float32]) */;
  %245 = @func_4743() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %246 = @func_1931() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(13, 10, 6), uint8], Tensor[(780), uint8], Tensor[(7, 14, 4), uint16]) */;
  %247 = %234.0;
  %248 = %239.6;
  %249 = %244.1;
  %250 = %245.0;
  %251 = %246.4;
  %252 = @func_3884() /* ty=Tensor[(7, 14, 4), float32] */;
  (%247, %248, meta[relay.Constant][14] /* ty=Tensor[(847), int32] */, %249, %250, %251, %252)
}

def @func_9757() -> Tensor[(7, 14, 4), float32] {
  @func_9755() /* ty=Tensor[(7, 14, 4), float32] */
}

def @func_9898() -> (Tensor[(7, 14, 4), uint16], Tensor[(10, 3, 13), float64], Tensor[(7, 14, 4), float32]) {
  %253 = @func_7675() /* ty=(Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), uint16]) */;
  %254 = @func_3681() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %255 = %253.1;
  %256 = @func_8219() /* ty=Tensor[(10, 3, 13), float64] */;
  %257 = %254.0;
  (%255, %256, %257)
}

def @func_1750() -> Tensor[(7, 14, 4), float32] {
  %259 = fn () -> Tensor[(7, 14, 4), float32] {
    %258 = @func_1126() /* ty=(Tensor[(7, 14, 4), float32],) */;
    %258.0
  };
  %259() /* ty=Tensor[(7, 14, 4), float32] */
}

def @func_988() -> (Tensor[(7, 14, 4), float32],) {
  %260 = @func_856() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %261 = %260.0;
  (%261,)
}

def @func_9900() -> (Tensor[(7, 14, 4), uint16], Tensor[(10, 3, 13), float64], Tensor[(7, 14, 4), float32]) {
  @func_9898() /* ty=(Tensor[(7, 14, 4), uint16], Tensor[(10, 3, 13), float64], Tensor[(7, 14, 4), float32]) */
}

def @func_1459(%var_1457: Tensor[(1, 780), uint8]) -> (Tensor[(7, 14, 4), float32], Tensor[(9, 7, 2), uint8], Tensor[(126), uint8], Tensor[(1, 780), uint8]) {
  @func_1456(%var_1457) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(9, 7, 2), uint8], Tensor[(126), uint8], Tensor[(1, 780), uint8]) */
}

def @func_2711(%var_2709: Tensor[(9, 15, 13), int8], %var_2710: Tensor[(9, 15, 13), int8]) -> (Tensor[(9, 15, 13), int32], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32]) {
  @func_2707(%var_2709, %var_2710) /* ty=(Tensor[(9, 15, 13), int32], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32]) */
}

def @func_9822() -> Tensor[(7, 14, 4), float32] {
  @func_9820() /* ty=Tensor[(7, 14, 4), float32] */
}

def @func_8661() -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(10, 3, 13), bool], Tensor[(11, 11, 7), int32], Tensor[(10, 3, 13), float32], Tensor[(7, 14, 4), float32], Tensor[(847), float64], Tensor[(7, 14, 4), float32], Tensor[(780, ?), bool]) {
  %280 = fn () -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(10, 3, 13), bool], Tensor[(11, 11, 7), int32], Tensor[(10, 3, 13), float32], Tensor[(7, 14, 4), float32], Tensor[(847), float64], Tensor[(7, 14, 4), float32], Tensor[(780, ?), bool]) {
    %262 = @func_7793() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */;
    %263 = @func_8029() /* ty=(Tensor[(10, 3, 13), float64], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(847), int32]) */;
    %264 = @func_5878() /* ty=(Tensor[(10, 3, 13), bool],) */;
    %265 = cast(meta[relay.Constant][15] /* ty=Tensor[(847), int32] */, dtype="int32") /* ty=Tensor[(847), int32] */;
    %266 = reshape(%265, newshape=[11, 11, 7]) /* ty=Tensor[(11, 11, 7), int32] */;
    %267 = @func_7194() /* ty=(Tensor[(10, 3, 13), float32], Tensor[(780, 5), bool], Tensor[(3900), uint8]) */;
    %268 = @func_2881() /* ty=(Tensor[(7, 14, 4), float32],) */;
    %269 = cast(meta[relay.Constant][15] /* ty=Tensor[(847), int32] */, dtype="float64") /* ty=Tensor[(847), float64] */;
    %270 = @func_4675() /* ty=(Tensor[(780, ?), bool],) */;
    %271 = %262.0;
    %272 = %263.1;
    %273 = %264.0;
    %274 = @func_807(%266) /* ty=Tensor[(11, 11, 7), int32] */;
    %275 = %267.0;
    %276 = %268.0;
    %277 = asinh(%269) /* ty=Tensor[(847), float64] */;
    %278 = @func_8226() /* ty=Tensor[(7, 14, 4), float32] */;
    %279 = %270.0;
    (%271, %272, %273, %274, %275, %276, %277, %278, %279)
  };
  %280() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(10, 3, 13), bool], Tensor[(11, 11, 7), int32], Tensor[(10, 3, 13), float32], Tensor[(7, 14, 4), float32], Tensor[(847), float64], Tensor[(7, 14, 4), float32], Tensor[(780, ?), bool]) */
}

def @func_1222(%var_1203: Tensor[(847), int32]) -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(847), uint64]) {
  %281 = @func_856() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %282 = cast(meta[relay.Constant][16] /* ty=Tensor[(847), int32] */, dtype="int32") /* ty=Tensor[(847), int32] */;
  %283 = reshape(%282, newshape=[847]) /* ty=Tensor[(847), int32] */;
  %284 = @func_1087(%283) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(11, 11, 7), int32], Tensor[(847), int32], Tensor[(7, 14, 4), float32]) */;
  %285 = cast(%var_1203, dtype="uint64") /* ty=Tensor[(847), uint64] */;
  %286 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(847), int32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %287 = cast(meta[relay.Constant][16] /* ty=Tensor[(847), int32] */, dtype="uint64") /* ty=Tensor[(847), uint64] */;
  %288 = dyn.reshape(%285, %286, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %289 = %281.0;
  %290 = %284.0;
  %291 = right_shift(%287, %288) /* ty=Tensor[(847), uint64] */;
  (%289, %290, %291)
}

def @func_2379() -> (Tensor[(7, 14, 4), float32], Tensor[(13, 10, 6), uint8], Tensor[(780, 1), uint8]) {
  %292 = @func_2049() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64]) */;
  %293 = cast(meta[relay.Constant][17] /* ty=Tensor[(780, 1), uint8] */, dtype="uint8") /* ty=Tensor[(780, 1), uint8] */;
  %294 = reshape(%293, newshape=[13, 10, 6]) /* ty=Tensor[(13, 10, 6), uint8] */;
  %295 = %292.0;
  %296 = @func_647(%294) /* ty=Tensor[(13, 10, 6), uint8] */;
  (%295, %296, meta[relay.Constant][17] /* ty=Tensor[(780, 1), uint8] */)
}

def @func_3886() -> Tensor[(7, 14, 4), float32] {
  @func_3884() /* ty=Tensor[(7, 14, 4), float32] */
}

def @func_8694(%var_8693: Tensor[(10, 66), float64]) -> (Tensor[(780, 1), uint8], Tensor[(7, 14, 4), float32], Tensor[(10, 66), float64], Tensor[(7800), float32]) {
  %305 = fn (%var_8688: Tensor[(10, 66), float64]) -> (Tensor[(780, 1), uint8], Tensor[(7, 14, 4), float32], Tensor[(10, 66), float64], Tensor[(7800), float32]) {
    %297 = @func_2444() /* ty=(Tensor[(780, 1), uint8],) */;
    %298 = cast(%var_8688, dtype="float64") /* ty=Tensor[(10, 66), float64] */;
    %299 = cast(meta[relay.Constant][18] /* ty=Tensor[(7800), float32] */, dtype="float32") /* ty=Tensor[(7800), float32] */;
    %300 = reshape(%298, newshape=[660]) /* ty=Tensor[(660), float64] */;
    %301 = reshape(%299, newshape=[7800]) /* ty=Tensor[(7800), float32] */;
    %302 = @func_3845(%300, %301) /* ty=(Tensor[(7, 14, 4), bool], Tensor[(11, 12, 5), float64], Tensor[(660), float64], Tensor[(7, 14, 4), float32], Tensor[(7800), float64], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7800), float64]) */;
    %303 = %297.0;
    %304 = %302.5;
    (%303, %304, %var_8688, meta[relay.Constant][18] /* ty=Tensor[(7800), float32] */)
  };
  %305(%var_8693) /* ty=(Tensor[(780, 1), uint8], Tensor[(7, 14, 4), float32], Tensor[(10, 66), float64], Tensor[(7800), float32]) */
}

def @func_4217(%var_4215: Tensor[(1755), int8]) -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32], Tensor[(1755), int8]) {
  @func_4214(%var_4215) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32], Tensor[(1755), int8]) */
}

def @func_7815() -> Tensor[(7, 14, 4), float32] {
  @func_7813() /* ty=Tensor[(7, 14, 4), float32] */
}

def @func_2049() -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64]) {
  %306 = @func_1749() /* ty=Tensor[(7, 14, 4), float32] */;
  %307 = cast(%306, dtype="float64") /* ty=Tensor[(7, 14, 4), float64] */;
  %308 = @func_1626() /* ty=Tensor[(7, 14, 4), float32] */;
  %309 = rsqrt(%307) /* ty=Tensor[(7, 14, 4), float64] */;
  (%308, %309)
}

def @func_3682() -> (Tensor[(7, 14, 4), float32],) {
  %312 = fn () -> (Tensor[(7, 14, 4), float32],) {
    %310 = @func_988() /* ty=(Tensor[(7, 14, 4), float32],) */;
    %311 = %310.0;
    (%311,)
  };
  %312() /* ty=(Tensor[(7, 14, 4), float32],) */
}

def @func_4014(%var_4011: Tensor[(60), float64], %var_4012: Tensor[(780), uint8], %var_4013: Tensor[(847), int32]) -> (Tensor[(7, 14, 4), float32], Tensor[(60), float64], Tensor[(60), float64], Tensor[(780), uint8], Tensor[(7, 14, 4), bool], Tensor[(780, 5), bool], Tensor[(660), float64], Tensor[(7800), float32], Tensor[(77, 11), float32], Tensor[(847), int32], Tensor[(780), uint8]) {
  @func_4009(%var_4011, %var_4012, %var_4013) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(60), float64], Tensor[(60), float64], Tensor[(780), uint8], Tensor[(7, 14, 4), bool], Tensor[(780, 5), bool], Tensor[(660), float64], Tensor[(7800), float32], Tensor[(77, 11), float32], Tensor[(847), int32], Tensor[(780), uint8]) */
}

def @func_8503() -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(11, 11, 15), int64], Tensor[(121), int64], Tensor[(1815), int64]) {
  %329 = fn () -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(11, 11, 15), int64], Tensor[(121), int64], Tensor[(1815), int64]) {
    %313 = @func_7793() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */;
    %314 = @func_7442() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */;
    %315 = %314.0;
    %316 = cast(%315, dtype="float32") /* ty=Tensor[(7, 14, 4), float32] */;
    %317 = reshape(%316, newshape=[7, 14, 4]) /* ty=Tensor[(7, 14, 4), float32] */;
    %318 = @func_6177(%317) /* ty=(Tensor[(7, 14, 4), bool], Tensor[(780, ?), int8], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64]) */;
    %319 = @func_2607() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */;
    %320 = cast(meta[relay.Constant][19] /* ty=Tensor[(121), int64] */, dtype="int64") /* ty=Tensor[(121), int64] */;
    %321 = cast(meta[relay.Constant][20] /* ty=Tensor[(1815), int64] */, dtype="int64") /* ty=Tensor[(1815), int64] */;
    %322 = reshape(%320, newshape=[11, 11, 1]) /* ty=Tensor[(11, 11, 1), int64] */;
    %323 = reshape(%321, newshape=[11, 11, 15]) /* ty=Tensor[(11, 11, 15), int64] */;
    %324 = @func_6047(%322, %323) /* ty=(Tensor[(11, 11, 15), int64], Tensor[(11, 11, 15), float32], Tensor[(11, 11, 15), bool], Tensor[(13, 10, 6), uint8], Tensor[(5, 156), uint8]) */;
    %325 = %313.1;
    %326 = %318.2;
    %327 = %319.0;
    %328 = %324.0;
    (%325, %315, %326, %327, %328, meta[relay.Constant][19] /* ty=Tensor[(121), int64] */, meta[relay.Constant][20] /* ty=Tensor[(1815), int64] */)
  };
  %329() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(11, 11, 15), int64], Tensor[(121), int64], Tensor[(1815), int64]) */
}

def @func_5179() -> (Tensor[(7, 14, 4), uint16],) {
  %332 = fn () -> (Tensor[(7, 14, 4), uint16],) {
    %330 = @func_1931() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(13, 10, 6), uint8], Tensor[(780), uint8], Tensor[(7, 14, 4), uint16]) */;
    %331 = %330.4;
    (%331,)
  };
  %332() /* ty=(Tensor[(7, 14, 4), uint16],) */
}

def @func_3005() -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) {
  %333 = @func_1126() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %334 = @func_1673() /* ty=Tensor[(7, 14, 4), float32] */;
  %335 = @func_2263() /* ty=Tensor[(7, 14, 4), float32] */;
  %336 = %333.0;
  (%334, %335, %336)
}

def @func_6671() -> (Tensor[(10, 3, 13), float64],) {
  %337 = @func_5781() /* ty=(Tensor[(10, 3, 13), float64],) */;
  %338 = %337.0;
  %339 = cast(%338, dtype="float64") /* ty=Tensor[(10, 3, 13), float64] */;
  %340 = log2(%339) /* ty=Tensor[(10, 3, 13), float64] */;
  (%340,)
}

def @func_4386() -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) {
  %341 = @func_2263() /* ty=Tensor[(7, 14, 4), float32] */;
  %342 = @func_3884() /* ty=Tensor[(7, 14, 4), float32] */;
  (%341, %342)
}

def @func_7205() -> (Tensor[(7, 14, 4), uint16],) {
  %343 = @func_5178() /* ty=(Tensor[(7, 14, 4), uint16],) */;
  %344 = %343.0;
  (%344,)
}

def @func_8219() -> Tensor[(10, 3, 13), float64] {
  %345 = @func_8029() /* ty=(Tensor[(10, 3, 13), float64], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(847), int32]) */;
  %345.0
}

def @func_3724() -> Tensor[(10, 3, 13), bool] {
  @func_3722() /* ty=Tensor[(10, 3, 13), bool] */
}

def @func_7588() -> (Tensor[(7, 14, 4), float32], Tensor[(780), uint8], Tensor[(847), float32], Tensor[(7, 14, 4), float32], Tensor[(60), float64], Tensor[(60, 1), float64]) {
  %361 = fn () -> (Tensor[(7, 14, 4), float32], Tensor[(780), uint8], Tensor[(847), float32], Tensor[(7, 14, 4), float32], Tensor[(60), float64], Tensor[(60, 1), float64]) {
    %346 = @func_1126() /* ty=(Tensor[(7, 14, 4), float32],) */;
    %347 = cast(meta[relay.Constant][21] /* ty=Tensor[(847), int32] */, dtype="int32") /* ty=Tensor[(847), int32] */;
    %348 = reshape(%347, newshape=[847]) /* ty=Tensor[(847), int32] */;
    %349 = @func_1426(%348) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(780), uint8], Tensor[(780), uint8], Tensor[(63, 2), uint8], Tensor[(7, 14, 4), float32], Tensor[(847), int32]) */;
    %350 = cast(meta[relay.Constant][21] /* ty=Tensor[(847), int32] */, dtype="float32") /* ty=Tensor[(847), float32] */;
    %351 = cast(meta[relay.Constant][22] /* ty=Tensor[(60, 1), float64] */, dtype="float64") /* ty=Tensor[(60, 1), float64] */;
    %352 = log10(%350) /* ty=Tensor[(847), float32] */;
    %353 = cast(%352, dtype="int32") /* ty=Tensor[(847), int32] */;
    %354 = reshape(%351, newshape=[60]) /* ty=Tensor[(60), float64] */;
    %355 = reshape(%353, newshape=[847]) /* ty=Tensor[(847), int32] */;
    %356 = @func_6460(%354, %355) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(1755), int8], Tensor[(7, 14, 4), float32], Tensor[(660), float64], Tensor[(60), float64], Tensor[(780), uint8], Tensor[(847), int32]) */;
    %357 = %346.0;
    %358 = %349.2;
    %359 = @func_5279() /* ty=Tensor[(7, 14, 4), float32] */;
    %360 = %356.5;
    (%357, %358, %352, %359, %360, meta[relay.Constant][22] /* ty=Tensor[(60, 1), float64] */)
  };
  %361() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(780), uint8], Tensor[(847), float32], Tensor[(7, 14, 4), float32], Tensor[(60), float64], Tensor[(60, 1), float64]) */
}

def @func_8787() -> (Tensor[(7, 14, 4), float32],) {
  @func_8785() /* ty=(Tensor[(7, 14, 4), float32],) */
}

def @func_5782() -> (Tensor[(10, 3, 13), float64],) {
  %363 = fn () -> (Tensor[(10, 3, 13), float64],) {
    %362 = @func_4862() /* ty=Tensor[(10, 3, 13), float64] */;
    (%362,)
  };
  %363() /* ty=(Tensor[(10, 3, 13), float64],) */
}

def @func_9954() -> Tensor[(7, 14, 4), float32] {
  @func_8226() /* ty=Tensor[(7, 14, 4), float32] */
}

def @func_8363() -> (Tensor[(7, 14, 4), float32], Tensor[(11, 11, 7), int32], Tensor[(7, 14, 4), float32]) {
  %371 = fn () -> (Tensor[(7, 14, 4), float32], Tensor[(11, 11, 7), int32], Tensor[(7, 14, 4), float32]) {
    %364 = @func_856() /* ty=(Tensor[(7, 14, 4), float32],) */;
    %365 = %364.0;
    %366 = cast(%365, dtype="float32") /* ty=Tensor[(7, 14, 4), float32] */;
    %367 = reshape(%366, newshape=[7, 14, 4]) /* ty=Tensor[(7, 14, 4), float32] */;
    %368 = @func_1279(%367) /* ty=(Tensor[(7, 14, 4), uint16], Tensor[(11, 11, 7), int32], Tensor[(847), int32]) */;
    %369 = %368.1;
    %370 = @func_2511() /* ty=Tensor[(7, 14, 4), float32] */;
    (%365, %369, %370)
  };
  %371() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(11, 11, 7), int32], Tensor[(7, 14, 4), float32]) */
}

def @func_2883() -> (Tensor[(7, 14, 4), float32],) {
  @func_2881() /* ty=(Tensor[(7, 14, 4), float32],) */
}

def @func_6050(%var_6048: Tensor[(11, 11, 1), int64], %var_6049: Tensor[(11, 11, 15), int64]) -> (Tensor[(11, 11, 15), int64], Tensor[(11, 11, 15), float32], Tensor[(11, 11, 15), bool], Tensor[(13, 10, 6), uint8], Tensor[(5, 156), uint8]) {
  %385 = fn (%var_5983: Tensor[(11, 11, 1), int64], %var_5984: Tensor[(11, 11, 15), int64]) -> (Tensor[(11, 11, 15), int64], Tensor[(11, 11, 15), float32], Tensor[(11, 11, 15), bool], Tensor[(13, 10, 6), uint8], Tensor[(5, 156), uint8]) {
    %372 = cast(%var_5983, dtype="int64") /* ty=Tensor[(11, 11, 1), int64] */;
    %373 = cast(%var_5984, dtype="int64") /* ty=Tensor[(11, 11, 15), int64] */;
    %374 = cast(%var_5984, dtype="float32") /* ty=Tensor[(11, 11, 15), float32] */;
    %375 = cast(%var_5983, dtype="float32") /* ty=Tensor[(11, 11, 1), float32] */;
    %376 = log(%375) /* ty=Tensor[(11, 11, 1), float32] */;
    %377 = cast(%376, dtype="bool") /* ty=Tensor[(11, 11, 1), bool] */;
    %378 = cast(%var_5984, dtype="bool") /* ty=Tensor[(11, 11, 15), bool] */;
    %379 = cast(meta[relay.Constant][23] /* ty=Tensor[(5, 156), uint8] */, dtype="uint8") /* ty=Tensor[(5, 156), uint8] */;
    %380 = reshape(%379, newshape=[13, 10, 6]) /* ty=Tensor[(13, 10, 6), uint8] */;
    %381 = bitwise_and(%372, %373) /* ty=Tensor[(11, 11, 15), int64] */;
    %382 = atanh(%374) /* ty=Tensor[(11, 11, 15), float32] */;
    %383 = greater_equal(%377, %378) /* ty=Tensor[(11, 11, 15), bool] */;
    %384 = @func_647(%380) /* ty=Tensor[(13, 10, 6), uint8] */;
    (%381, %382, %383, %384, meta[relay.Constant][23] /* ty=Tensor[(5, 156), uint8] */)
  };
  %385(%var_6048, %var_6049) /* ty=(Tensor[(11, 11, 15), int64], Tensor[(11, 11, 15), float32], Tensor[(11, 11, 15), bool], Tensor[(13, 10, 6), uint8], Tensor[(5, 156), uint8]) */
}

def @func_7443() -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) {
  %390 = fn () -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) {
    %386 = @func_4975() /* ty=(Tensor[(7, 14, 4), float32],) */;
    %387 = @func_988() /* ty=(Tensor[(7, 14, 4), float32],) */;
    %388 = %386.0;
    %389 = %387.0;
    (%388, %389)
  };
  %390() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */
}

def @func_5280() -> Tensor[(7, 14, 4), float32] {
  %391 = fn () -> Tensor[(7, 14, 4), float32] {
    @func_4990() /* ty=Tensor[(7, 14, 4), float32] */
  };
  %391() /* ty=Tensor[(7, 14, 4), float32] */
}

def @func_9728() -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), bool]) {
  %400 = fn () -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), bool]) {
    %392 = @func_4975() /* ty=(Tensor[(7, 14, 4), float32],) */;
    %393 = @func_8785() /* ty=(Tensor[(7, 14, 4), float32],) */;
    %394 = %392.0;
    %395 = cast(%394, dtype="float64") /* ty=Tensor[(7, 14, 4), float64] */;
    %396 = reshape(%395, newshape=[7, 14, 4]) /* ty=Tensor[(7, 14, 4), float64] */;
    %397 = @func_7813() /* ty=Tensor[(7, 14, 4), float32] */;
    %398 = %393.0;
    %399 = @func_1664(%396) /* ty=Tensor[(7, 14, 4), bool] */;
    (%394, %397, %398, %399)
  };
  %400() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), bool]) */
}

def @func_6804() -> (Tensor[(7, 14, 4), float32], Tensor[(10, 3, 13), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) {
  @func_6802() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(10, 3, 13), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */
}

def @func_3722() -> Tensor[(10, 3, 13), bool] {
  %401 = cast(meta[relay.Constant][25] /* ty=Tensor[(10, 3, 13), int16] */, dtype="bool") /* ty=Tensor[(10, 3, 13), bool] */;
  %402 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(10, 3, 13), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %403 = cast(meta[relay.Constant][24] /* ty=Tensor[(10, 3, 13), int16] */, dtype="bool") /* ty=Tensor[(10, 3, 13), bool] */;
  %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%403, %404) /* ty=Tensor[(10, 3, 13), bool] */
}

def @func_2247(%var_2207: Tensor[(847), int32]) -> (Tensor[(7, 14, 4), float32], Tensor[(60), float64], Tensor[(7, 14, 4), float64], Tensor[(11, 11, 7), int32], Tensor[(847), int32], Tensor[(10, 6, 1), float32], Tensor[(7, 14, 4), float32]) {
  %405 = @func_856() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %406 = cast(%var_2207, dtype="int32") /* ty=Tensor[(847), int32] */;
  %407 = reshape(%406, newshape=[847]) /* ty=Tensor[(847), int32] */;
  %408 = @func_1087(%407) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(11, 11, 7), int32], Tensor[(847), int32], Tensor[(7, 14, 4), float32]) */;
  %409 = cast(meta[relay.Constant][26] /* ty=Tensor[(60), float64] */, dtype="float64") /* ty=Tensor[(60), float64] */;
  %410 = reshape(%409, newshape=[10, 6, 1]) /* ty=Tensor[(10, 6, 1), float64] */;
  %411 = @func_1577(%410) /* ty=Tensor[(10, 6, 1), float64] */;
  %412 = cast(%411, dtype="float32") /* ty=Tensor[(10, 6, 1), float32] */;
  %413 = cast(%var_2207, dtype="int32") /* ty=Tensor[(847), int32] */;
  %414 = reshape(%413, newshape=[847]) /* ty=Tensor[(847), int32] */;
  %415 = @func_1222(%414) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(847), uint64]) */;
  %416 = %405.0;
  %417 = @func_1322() /* ty=Tensor[(7, 14, 4), float64] */;
  %418 = %408.1;
  %419 = log(%412) /* ty=Tensor[(10, 6, 1), float32] */;
  %420 = %415.1;
  (%416, meta[relay.Constant][26] /* ty=Tensor[(60), float64] */, %417, %418, %var_2207, %419, %420)
}

def @func_5358() -> Tensor[(7, 14, 4), float32] {
  %421 = fn () -> Tensor[(7, 14, 4), float32] {
    @func_3884() /* ty=Tensor[(7, 14, 4), float32] */
  };
  %421() /* ty=Tensor[(7, 14, 4), float32] */
}

def @func_7180() -> (Tensor[(7, 14, 4), float32], Tensor[(780), uint8], Tensor[(847), int32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), uint16], Tensor[(7, 14, 4), float32]) {
  @func_7178() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(780), uint8], Tensor[(847), int32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), uint16], Tensor[(7, 14, 4), float32]) */
}

def @func_9697(%var_9695: Tensor[(3, 3, 7), uint8]) -> (Tensor[(3, 3, 7), bool], Tensor[(7, 14, 4), float32], Tensor[(126), uint8], Tensor[(780), uint8]) {
  @func_9694(%var_9695) /* ty=(Tensor[(3, 3, 7), bool], Tensor[(7, 14, 4), float32], Tensor[(126), uint8], Tensor[(780), uint8]) */
}

def @func_3007() -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) {
  @func_3005() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */
}

def @func_6127() -> (Tensor[(7, 14, 4), uint16],) {
  @func_6125() /* ty=(Tensor[(7, 14, 4), uint16],) */
}

def @func_2469() -> (Tensor[(7, 14, 4), float32],) {
  %424 = fn () -> (Tensor[(7, 14, 4), float32],) {
    %422 = @func_2379() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(13, 10, 6), uint8], Tensor[(780, 1), uint8]) */;
    %423 = %422.0;
    (%423,)
  };
  %424() /* ty=(Tensor[(7, 14, 4), float32],) */
}

def @func_7508() -> Tensor[(7, 14, 4), float32] {
  %425 = @func_5608() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */;
  %425.1
}

def @func_5201(%var_5195: Tensor[(13, 4, 4), float32]) -> (Tensor[(13, 4, 4), float32],) {
  %426 = cast(%var_5195, dtype="float32") /* ty=Tensor[(13, 4, 4), float32] */;
  %427 = sinh(%426) /* ty=Tensor[(13, 4, 4), float32] */;
  (%427,)
}

def @func_5610() -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) {
  @func_5608() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */
}

def @func_5204(%var_5202: Tensor[(13, 4, 4), float32]) -> (Tensor[(13, 4, 4), float32],) {
  @func_5201(%var_5202) /* ty=(Tensor[(13, 4, 4), float32],) */
}

def @func_4975() -> (Tensor[(7, 14, 4), float32],) {
  %428 = @func_988() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %429 = %428.0;
  (%429,)
}

def @func_7225(%var_7223: Tensor[(1, 15, 15), int16]) -> (Tensor[(?, 15, 15), bool], Tensor[(?, 15, 15), bool], Tensor[(7, 14, 4), float32], Tensor[(1, 660), float64]) {
  @func_7222(%var_7223) /* ty=(Tensor[(?, 15, 15), bool], Tensor[(?, 15, 15), bool], Tensor[(7, 14, 4), float32], Tensor[(1, 660), float64]) */
}

def @func_3884() -> Tensor[(7, 14, 4), float32] {
  @func_1626() /* ty=Tensor[(7, 14, 4), float32] */
}

def @func_6673() -> (Tensor[(10, 3, 13), float64],) {
  @func_6671() /* ty=(Tensor[(10, 3, 13), float64],) */
}

def @func_2707(%var_2637: Tensor[(9, 15, 13), int8], %var_2638: Tensor[(9, 15, 13), int8]) -> (Tensor[(9, 15, 13), int32], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32]) {
  %430 = cast(%var_2638, dtype="bool") /* ty=Tensor[(9, 15, 13), bool] */;
  %431 = shape_of(%var_2637, dtype="int32") /* ty=Tensor[(3), int32] */;
  %432 = cast(%var_2637, dtype="bool") /* ty=Tensor[(9, 15, 13), bool] */;
  %433 = dyn.reshape(%430, %431, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %434 = less(%432, %433) /* ty=Tensor[(9, 15, 13), bool] */;
  %435 = cast(meta[relay.Constant][27] /* ty=Tensor[(9, 15, 13), bool] */, dtype="int32") /* ty=Tensor[(9, 15, 13), int32] */;
  %436 = shape_of(%434, dtype="int32") /* ty=Tensor[(3), int32] */;
  %437 = cast(%434, dtype="int32") /* ty=Tensor[(9, 15, 13), int32] */;
  %438 = dyn.reshape(%435, %436, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %439 = @func_988() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %440 = bitwise_or(%437, %438) /* ty=Tensor[(9, 15, 13), int32] */;
  %441 = @func_1322() /* ty=Tensor[(7, 14, 4), float64] */;
  %442 = %439.0;
  (%440, %441, %442)
}

def @func_2321(%var_2291: Tensor[(11, 12, 5), float64]) -> (Tensor[(11, 12, 5), float64], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32]) {
  %443 = cast(%var_2291, dtype="float64") /* ty=Tensor[(11, 12, 5), float64] */;
  %444 = @func_1822() /* ty=(Tensor[(11, 11, 7), int32], Tensor[(847), int32], Tensor[(7, 14, 4), uint64], Tensor[(7, 14, 4), float64]) */;
  %445 = @func_1822() /* ty=(Tensor[(11, 11, 7), int32], Tensor[(847), int32], Tensor[(7, 14, 4), uint64], Tensor[(7, 14, 4), float64]) */;
  %446 = sin(%443) /* ty=Tensor[(11, 12, 5), float64] */;
  %447 = %444.3;
  %448 = %445.3;
  %449 = @func_1749() /* ty=Tensor[(7, 14, 4), float32] */;
  (%446, %447, %448, %449)
}

def @func_7794() -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) {
  %453 = fn () -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) {
    %450 = @func_2881() /* ty=(Tensor[(7, 14, 4), float32],) */;
    %451 = %450.0;
    %452 = @func_4118() /* ty=Tensor[(7, 14, 4), float32] */;
    (%451, %452)
  };
  %453() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */
}

def @func_5745(%var_5743: Tensor[(7, 14, 4), float32]) -> (Tensor[(7, 14, 4), uint64], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), int8], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) {
  @func_5742(%var_5743) /* ty=(Tensor[(7, 14, 4), uint64], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), int8], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */
}

def @func_2956(%var_2955: Tensor[(780, 5), uint8]) -> (Tensor[(780, 5), bool],) {
  %459 = fn (%var_2944: Tensor[(780, 5), uint8]) -> (Tensor[(780, 5), bool],) {
    %454 = @func_2444() /* ty=(Tensor[(780, 1), uint8],) */;
    %455 = %454.0;
    %456 = cast(%455, dtype="bool") /* ty=Tensor[(780, 1), bool] */;
    %457 = cast(%var_2944, dtype="bool") /* ty=Tensor[(780, 5), bool] */;
    %458 = greater_equal(%456, %457) /* ty=Tensor[(780, 5), bool] */;
    (%458,)
  };
  %459(%var_2955) /* ty=(Tensor[(780, 5), bool],) */
}

def @func_7474() -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(390, 2), uint8], Tensor[(780), uint8], Tensor[(7, 14, 4), uint16]) {
  @func_7472() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(390, 2), uint8], Tensor[(780), uint8], Tensor[(7, 14, 4), uint16]) */
}

def @func_3931() -> (Tensor[(7, 14, 4), float32],) {
  @func_3929() /* ty=(Tensor[(7, 14, 4), float32],) */
}

def @func_7196() -> (Tensor[(10, 3, 13), float32], Tensor[(780, 5), bool], Tensor[(3900), uint8]) {
  @func_7194() /* ty=(Tensor[(10, 3, 13), float32], Tensor[(780, 5), bool], Tensor[(3900), uint8]) */
}

def @func_8030() -> (Tensor[(10, 3, 13), float64], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(847), int32]) {
  %467 = fn () -> (Tensor[(10, 3, 13), float64], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(847), int32]) {
    %460 = @func_6251() /* ty=(Tensor[(10, 3, 13), float64],) */;
    %461 = cast(meta[relay.Constant][28] /* ty=Tensor[(847), int32] */, dtype="int32") /* ty=Tensor[(847), int32] */;
    %462 = reshape(%461, newshape=[847]) /* ty=Tensor[(847), int32] */;
    %463 = @func_1087(%462) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(11, 11, 7), int32], Tensor[(847), int32], Tensor[(7, 14, 4), float32]) */;
    %464 = %460.0;
    %465 = @func_5122() /* ty=Tensor[(7, 14, 4), float32] */;
    %466 = %463.3;
    (%464, %465, %466, meta[relay.Constant][28] /* ty=Tensor[(847), int32] */)
  };
  %467() /* ty=(Tensor[(10, 3, 13), float64], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(847), int32]) */
}

def @func_4657(%var_4624: Tensor[(2, 847), int32]) -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(2, 847), bool], Tensor[(2, 847), float32], Tensor[(13, 10, 6), uint8], Tensor[(3900), uint8]) {
  %468 = @func_3681() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %469 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 847), int32] */, dtype="int32") /* ty=Tensor[(1, 847), int32] */;
  %470 = reshape(%469, newshape=[847]) /* ty=Tensor[(847), int32] */;
  %471 = @func_1222(%470) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(847), uint64]) */;
  %472 = cast(%var_4624, dtype="float32") /* ty=Tensor[(2, 847), float32] */;
  %473 = erf(%472) /* ty=Tensor[(2, 847), float32] */;
  %474 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 847), int32] */, dtype="bool") /* ty=Tensor[(1, 847), bool] */;
  %475 = cast(%var_4624, dtype="bool") /* ty=Tensor[(2, 847), bool] */;
  %476 = less(%474, %475) /* ty=Tensor[(2, 847), bool] */;
  %477 = cast(%476, dtype="bool") /* ty=Tensor[(2, 847), bool] */;
  %478 = shape_of(%473, dtype="int32") /* ty=Tensor[(2), int32] */;
  %479 = cast(%473, dtype="bool") /* ty=Tensor[(2, 847), bool] */;
  %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %481 = cast(%473, dtype="float32") /* ty=Tensor[(2, 847), float32] */;
  %482 = cast(meta[relay.Constant][30] /* ty=Tensor[(3900), uint8] */, dtype="uint8") /* ty=Tensor[(3900), uint8] */;
  %483 = cast(meta[relay.Constant][30] /* ty=Tensor[(3900), uint8] */, dtype="bool") /* ty=Tensor[(3900), bool] */;
  %484 = reshape(%482, newshape=[3900]) /* ty=Tensor[(3900), uint8] */;
  %485 = reshape(%483, newshape=[780, 5]) /* ty=Tensor[(780, 5), bool] */;
  %486 = @func_3293(%484, %485) /* ty=(Tensor[(13, 10, 6), uint8], Tensor[(3900), uint8], Tensor[(780, 5), bool]) */;
  %487 = %468.0;
  %488 = %471.1;
  %489 = @func_2263() /* ty=Tensor[(7, 14, 4), float32] */;
  %490 = greater_equal(%479, %480) /* ty=Tensor[(2, 847), bool] */;
  %491 = cos(%481) /* ty=Tensor[(2, 847), float32] */;
  %492 = %486.0;
  (%487, %488, %489, %490, %491, %492, meta[relay.Constant][30] /* ty=Tensor[(3900), uint8] */)
}

def @func_2324(%var_2322: Tensor[(11, 12, 5), float64]) -> (Tensor[(11, 12, 5), float64], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32]) {
  @func_2321(%var_2322) /* ty=(Tensor[(11, 12, 5), float64], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32]) */
}

def @func_8990() -> Tensor[(7, 14, 4), float32] {
  @func_8988() /* ty=Tensor[(7, 14, 4), float32] */
}

def @func_7862(%var_7860: Tensor[(1, 60), float64]) -> (Tensor[(7, 14, 4), float32], Tensor[(847), int32], Tensor[(1, 60), float64], Tensor[(847), int32], Tensor[(7, 14, 4), float32]) {
  @func_7859(%var_7860) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(847), int32], Tensor[(1, 60), float64], Tensor[(847), int32], Tensor[(7, 14, 4), float32]) */
}

def @func_8067() -> (Tensor[(7, 14, 4), float32],) {
  %493 = @func_7508() /* ty=Tensor[(7, 14, 4), float32] */;
  (%493,)
}

def @func_2609() -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) {
  @func_2607() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */
}

def @func_9328() -> (Tensor[(10, 3, 13), float32], Tensor[(7, 14, 4), float32]) {
  %497 = fn () -> (Tensor[(10, 3, 13), float32], Tensor[(7, 14, 4), float32]) {
    %494 = @func_5842() /* ty=(Tensor[(7, 14, 4), float32],) */;
    %495 = @func_4758() /* ty=Tensor[(10, 3, 13), float32] */;
    %496 = %494.0;
    (%495, %496)
  };
  %497() /* ty=(Tensor[(10, 3, 13), float32], Tensor[(7, 14, 4), float32]) */
}

def @func_2172(%var_2170: float32, %var_2171: Tensor[(1, 9, 12), float32]) -> (Tensor[(1, 9, 12), bool], Tensor[(7, 14, 4), float64], Tensor[(?, 9, 12), float64]) {
  @func_2168(%var_2170, %var_2171) /* ty=(Tensor[(1, 9, 12), bool], Tensor[(7, 14, 4), float64], Tensor[(?, 9, 12), float64]) */
}

def @func_9694(%var_9665: Tensor[(3, 3, 7), uint8]) -> (Tensor[(3, 3, 7), bool], Tensor[(7, 14, 4), float32], Tensor[(126), uint8], Tensor[(780), uint8]) {
  %498 = cast(meta[relay.Constant][31] /* ty=Tensor[(3, 3, 7), uint8] */, dtype="bool") /* ty=Tensor[(3, 3, 7), bool] */;
  %499 = shape_of(%var_9665, dtype="int32") /* ty=Tensor[(3), int32] */;
  %500 = cast(%var_9665, dtype="bool") /* ty=Tensor[(3, 3, 7), bool] */;
  %501 = dyn.reshape(%498, %499, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %502 = cast(meta[relay.Constant][32] /* ty=Tensor[(780), uint8] */, dtype="uint8") /* ty=Tensor[(780), uint8] */;
  %503 = reshape(%502, newshape=[1, 780]) /* ty=Tensor[(1, 780), uint8] */;
  %504 = @func_1456(%503) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(9, 7, 2), uint8], Tensor[(126), uint8], Tensor[(1, 780), uint8]) */;
  %505 = less(%500, %501) /* ty=Tensor[(3, 3, 7), bool] */;
  %506 = @func_5279() /* ty=Tensor[(7, 14, 4), float32] */;
  %507 = %504.2;
  (%505, %506, %507, meta[relay.Constant][32] /* ty=Tensor[(780), uint8] */)
}

def @func_3749() -> Tensor[(10, 3, 13), bool] {
  @func_3722() /* ty=Tensor[(10, 3, 13), bool] */
}

def @func_9976() -> (Tensor[(10, 3, 13), bool],) {
  @func_9974() /* ty=(Tensor[(10, 3, 13), bool],) */
}

def @func_9755() -> Tensor[(7, 14, 4), float32] {
  %508 = @func_2049() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64]) */;
  %508.0
}

def @func_9804() -> (Tensor[(7, 14, 4), float32],) {
  %511 = fn () -> (Tensor[(7, 14, 4), float32],) {
    %509 = @func_8826() /* ty=(Tensor[(7, 14, 4), float32],) */;
    %510 = %509.0;
    (%510,)
  };
  %511() /* ty=(Tensor[(7, 14, 4), float32],) */
}

def @func_9956() -> Tensor[(7, 14, 4), float32] {
  @func_9954() /* ty=Tensor[(7, 14, 4), float32] */
}

def @func_7315(%var_7313: float32, %var_7314: Tensor[(108), float32]) -> (Tensor[(847), int32], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32], Tensor[(1, 9, 12), bool], float32, Tensor[(108), float32], Tensor[(7, 14, 4), float32], Tensor[(780, 1), uint8]) {
  %533 = fn (%var_7268: float32, %var_7269: Tensor[(108), float32]) -> (Tensor[(847), int32], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32], Tensor[(1, 9, 12), bool], float32, Tensor[(108), float32], Tensor[(7, 14, 4), float32], Tensor[(780, 1), uint8]) {
    %512 = @func_4386() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */;
    %513 = %512.1;
    %514 = cast(%513, dtype="float32") /* ty=Tensor[(7, 14, 4), float32] */;
    %515 = reshape(%514, newshape=[7, 14, 4]) /* ty=Tensor[(7, 14, 4), float32] */;
    %516 = @func_1279(%515) /* ty=(Tensor[(7, 14, 4), uint16], Tensor[(11, 11, 7), int32], Tensor[(847), int32]) */;
    %517 = cast(%513, dtype="float64") /* ty=Tensor[(7, 14, 4), float64] */;
    %518 = cast(%var_7268, dtype="float32") /* ty=float32 */;
    %519 = cast(%var_7269, dtype="float32") /* ty=Tensor[(108), float32] */;
    %520 = reshape(%518, newshape=[]) /* ty=float32 */;
    %521 = reshape(%519, newshape=[1, 9, 12]) /* ty=Tensor[(1, 9, 12), float32] */;
    %522 = @func_2168(%520, %521) /* ty=(Tensor[(1, 9, 12), bool], Tensor[(7, 14, 4), float64], Tensor[(?, 9, 12), float64]) */;
    %523 = %516.2;
    %524 = cast(%523, dtype="int32") /* ty=Tensor[(847), int32] */;
    %525 = reshape(%524, newshape=[847]) /* ty=Tensor[(847), int32] */;
    %526 = @func_2247(%525) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(60), float64], Tensor[(7, 14, 4), float64], Tensor[(11, 11, 7), int32], Tensor[(847), int32], Tensor[(10, 6, 1), float32], Tensor[(7, 14, 4), float32]) */;
    %527 = @func_2379() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(13, 10, 6), uint8], Tensor[(780, 1), uint8]) */;
    %528 = atanh(%517) /* ty=Tensor[(7, 14, 4), float64] */;
    %529 = @func_2263() /* ty=Tensor[(7, 14, 4), float32] */;
    %530 = %522.0;
    %531 = %526.0;
    %532 = %527.2;
    (%523, %528, %529, %530, %var_7268, %var_7269, %531, %532)
  };
  %533(%var_7313, %var_7314) /* ty=(Tensor[(847), int32], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32], Tensor[(1, 9, 12), bool], float32, Tensor[(108), float32], Tensor[(7, 14, 4), float32], Tensor[(780, 1), uint8]) */
}

def @func_1090(%var_1088: Tensor[(847), int32]) -> (Tensor[(7, 14, 4), float32], Tensor[(11, 11, 7), int32], Tensor[(847), int32], Tensor[(7, 14, 4), float32]) {
  @func_1087(%var_1088) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(11, 11, 7), int32], Tensor[(847), int32], Tensor[(7, 14, 4), float32]) */
}

def @func_4977() -> (Tensor[(7, 14, 4), float32],) {
  @func_4975() /* ty=(Tensor[(7, 14, 4), float32],) */
}

def @func_5543() -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), bool], Tensor[(7, 14, 4), float32]) {
  %538 = fn () -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), bool], Tensor[(7, 14, 4), float32]) {
    %534 = @func_2842() /* ty=(Tensor[(7, 14, 4), bool], Tensor[(7, 14, 4), bool]) */;
    %535 = @func_5279() /* ty=Tensor[(7, 14, 4), float32] */;
    %536 = %534.0;
    %537 = @func_5279() /* ty=Tensor[(7, 14, 4), float32] */;
    (%535, %536, %537)
  };
  %538() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), bool], Tensor[(7, 14, 4), float32]) */
}

def @func_6177(%var_6170: Tensor[(7, 14, 4), float32]) -> (Tensor[(7, 14, 4), bool], Tensor[(780, ?), int8], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64]) {
  %539 = @func_988() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %540 = %539.0;
  %541 = cast(%540, dtype="float64") /* ty=Tensor[(7, 14, 4), float64] */;
  %542 = reshape(%541, newshape=[7, 14, 4]) /* ty=Tensor[(7, 14, 4), float64] */;
  %543 = @func_2444() /* ty=(Tensor[(780, 1), uint8],) */;
  %544 = %543.0;
  %545 = cast(%544, dtype="float64") /* ty=Tensor[(780, 1), float64] */;
  %546 = rsqrt(%545) /* ty=Tensor[(780, 1), float64] */;
  %547 = cast(%544, dtype="int8") /* ty=Tensor[(780, 1), int8] */;
  %548 = shape_of(%546, dtype="int32") /* ty=Tensor[(2), int32] */;
  %549 = cast(%546, dtype="int8") /* ty=Tensor[(780, 1), int8] */;
  %550 = dyn.reshape(%547, %548, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %551 = cast(%540, dtype="float32") /* ty=Tensor[(7, 14, 4), float32] */;
  %552 = @func_2894() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(63, 2), uint8], Tensor[(847), int32], Tensor[(7, 14, 4), float32]) */;
  %553 = cast(%var_6170, dtype="float64") /* ty=Tensor[(7, 14, 4), float64] */;
  %554 = shape_of(%540, dtype="int32") /* ty=Tensor[(3), int32] */;
  %555 = cast(%540, dtype="float64") /* ty=Tensor[(7, 14, 4), float64] */;
  %556 = dyn.reshape(%553, %554, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %557 = @func_1664(%542) /* ty=Tensor[(7, 14, 4), bool] */;
  %558 = bitwise_and(%549, %550) /* ty=Tensor[(780, ?), int8] */;
  %559 = asin(%551) /* ty=Tensor[(7, 14, 4), float32] */;
  %560 = @func_1322() /* ty=Tensor[(7, 14, 4), float64] */;
  %561 = %552.0;
  %562 = mod(%555, %556) /* ty=Tensor[(7, 14, 4), float64] */;
  (%557, %558, %559, %560, %561, %562)
}

def @func_4745() -> (Tensor[(7, 14, 4), float32],) {
  @func_4743() /* ty=(Tensor[(7, 14, 4), float32],) */
}

def @func_7986() -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), uint16], Tensor[(7, 14, 4), bool], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) {
  %563 = @func_2607() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */;
  %564 = @func_5178() /* ty=(Tensor[(7, 14, 4), uint16],) */;
  %565 = @func_2842() /* ty=(Tensor[(7, 14, 4), bool], Tensor[(7, 14, 4), bool]) */;
  %566 = @func_6223() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */;
  %567 = %563.1;
  %568 = %564.0;
  %569 = %565.1;
  %570 = @func_7813() /* ty=Tensor[(7, 14, 4), float32] */;
  %571 = %566.0;
  %572 = @func_2263() /* ty=Tensor[(7, 14, 4), float32] */;
  (%567, %568, %569, %570, %571, %572)
}

def @main(%var_10052: Tensor[(60), float64], %var_10054: Tensor[(847), int32]) -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), uint16], Tensor[(660), float64], Tensor[(60), float64], Tensor[(847), int32], Tensor[(13, 10, 6), uint8], Tensor[(3, 42), uint8], Tensor[(780, 60), float32]) {
  %573 = @func_5179() /* ty=(Tensor[(7, 14, 4), uint16],) */;
  %574 = cast(%var_10052, dtype="float64") /* ty=Tensor[(60), float64] */;
  %575 = cast(meta[relay.Constant][33] /* ty=Tensor[(780, 1), uint8] */, dtype="uint8") /* ty=Tensor[(780, 1), uint8] */;
  %576 = cast(%var_10054, dtype="int32") /* ty=Tensor[(847), int32] */;
  %577 = reshape(%574, newshape=[60]) /* ty=Tensor[(60), float64] */;
  %578 = reshape(%575, newshape=[780]) /* ty=Tensor[(780), uint8] */;
  %579 = reshape(%576, newshape=[847]) /* ty=Tensor[(847), int32] */;
  %580 = @func_4014(%577, %578, %579) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(60), float64], Tensor[(60), float64], Tensor[(780), uint8], Tensor[(7, 14, 4), bool], Tensor[(780, 5), bool], Tensor[(660), float64], Tensor[(7800), float32], Tensor[(77, 11), float32], Tensor[(847), int32], Tensor[(780), uint8]) */;
  %581 = cast(meta[relay.Constant][34] /* ty=Tensor[(3, 42), uint8] */, dtype="uint8") /* ty=Tensor[(3, 42), uint8] */;
  %582 = cast(meta[relay.Constant][33] /* ty=Tensor[(780, 1), uint8] */, dtype="uint8") /* ty=Tensor[(780, 1), uint8] */;
  %583 = reshape(%581, newshape=[9, 7, 2]) /* ty=Tensor[(9, 7, 2), uint8] */;
  %584 = reshape(%582, newshape=[780]) /* ty=Tensor[(780), uint8] */;
  %585 = @func_1041(%583, %584) /* ty=(Tensor[(9, 7, 2), uint8], Tensor[(13, 10, 6), uint8], Tensor[(780), uint8]) */;
  %586 = cast(%var_10052, dtype="float64") /* ty=Tensor[(60), float64] */;
  %587 = cast(meta[relay.Constant][33] /* ty=Tensor[(780, 1), uint8] */, dtype="uint8") /* ty=Tensor[(780, 1), uint8] */;
  %588 = cast(%var_10054, dtype="int32") /* ty=Tensor[(847), int32] */;
  %589 = reshape(%586, newshape=[60]) /* ty=Tensor[(60), float64] */;
  %590 = reshape(%587, newshape=[780]) /* ty=Tensor[(780), uint8] */;
  %591 = reshape(%588, newshape=[847]) /* ty=Tensor[(847), int32] */;
  %592 = @func_4014(%589, %590, %591) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(60), float64], Tensor[(60), float64], Tensor[(780), uint8], Tensor[(7, 14, 4), bool], Tensor[(780, 5), bool], Tensor[(660), float64], Tensor[(7800), float32], Tensor[(77, 11), float32], Tensor[(847), int32], Tensor[(780), uint8]) */;
  %593 = %592.2;
  %594 = cast(%593, dtype="float32") /* ty=Tensor[(60), float32] */;
  %595 = cast(meta[relay.Constant][33] /* ty=Tensor[(780, 1), uint8] */, dtype="float32") /* ty=Tensor[(780, 1), float32] */;
  %596 = @func_5122() /* ty=Tensor[(7, 14, 4), float32] */;
  %597 = %573.0;
  %598 = %580.6;
  %599 = %585.1;
  %600 = subtract(%594, %595) /* ty=Tensor[(780, 60), float32] */;
  (%596, %597, %598, %var_10052, %var_10054, %599, meta[relay.Constant][34] /* ty=Tensor[(3, 42), uint8] */, %600)
}

def @func_6597() -> Tensor[(7, 14, 4), float32] {
  %601 = @func_988() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %601.0
}

def @func_5843() -> (Tensor[(7, 14, 4), float32],) {
  %604 = fn () -> (Tensor[(7, 14, 4), float32],) {
    %602 = @func_5242() /* ty=(Tensor[(7, 14, 4), float32],) */;
    %603 = %602.0;
    (%603,)
  };
  %604() /* ty=(Tensor[(7, 14, 4), float32],) */
}

def @func_4430(%var_4429: Tensor[(1950, 2), uint8]) -> (Tensor[(7, 14, 4), float32], Tensor[(3900), uint8], Tensor[(1950, 2), float64]) {
  %614 = fn (%var_4418: Tensor[(1950, 2), uint8]) -> (Tensor[(7, 14, 4), float32], Tensor[(3900), uint8], Tensor[(1950, 2), float64]) {
    %605 = cast(%var_4418, dtype="uint8") /* ty=Tensor[(1950, 2), uint8] */;
    %606 = cast(%var_4418, dtype="bool") /* ty=Tensor[(1950, 2), bool] */;
    %607 = reshape(%605, newshape=[3900]) /* ty=Tensor[(3900), uint8] */;
    %608 = reshape(%606, newshape=[780, 5]) /* ty=Tensor[(780, 5), bool] */;
    %609 = @func_3293(%607, %608) /* ty=(Tensor[(13, 10, 6), uint8], Tensor[(3900), uint8], Tensor[(780, 5), bool]) */;
    %610 = cast(%var_4418, dtype="float64") /* ty=Tensor[(1950, 2), float64] */;
    %611 = @func_2511() /* ty=Tensor[(7, 14, 4), float32] */;
    %612 = %609.1;
    %613 = erf(%610) /* ty=Tensor[(1950, 2), float64] */;
    (%611, %612, %613)
  };
  %614(%var_4429) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(3900), uint8], Tensor[(1950, 2), float64]) */
}

def @func_1041(%var_1039: Tensor[(9, 7, 2), uint8], %var_1040: Tensor[(780), uint8]) -> (Tensor[(9, 7, 2), uint8], Tensor[(13, 10, 6), uint8], Tensor[(780), uint8]) {
  %622 = fn (%var_1029: Tensor[(9, 7, 2), uint8], %var_1036: Tensor[(780), uint8]) -> (Tensor[(9, 7, 2), uint8], Tensor[(13, 10, 6), uint8], Tensor[(780), uint8]) {
    %615 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 7, 2), uint8] */, dtype="uint8") /* ty=Tensor[(1, 7, 2), uint8] */;
    %616 = cast(%var_1029, dtype="uint8") /* ty=Tensor[(9, 7, 2), uint8] */;
    %617 = cast(%var_1036, dtype="uint8") /* ty=Tensor[(780), uint8] */;
    %618 = reshape(%617, newshape=[390, 2]) /* ty=Tensor[(390, 2), uint8] */;
    %619 = @func_931(%618) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(13, 10, 6), uint8], Tensor[(390, 2), uint8]) */;
    %620 = bitwise_xor(%615, %616) /* ty=Tensor[(9, 7, 2), uint8] */;
    %621 = %619.2;
    (%620, %621, %var_1036)
  };
  %622(%var_1039, %var_1040) /* ty=(Tensor[(9, 7, 2), uint8], Tensor[(13, 10, 6), uint8], Tensor[(780), uint8]) */
}

def @func_2264() -> Tensor[(7, 14, 4), float32] {
  %623 = fn () -> Tensor[(7, 14, 4), float32] {
    @func_1673() /* ty=Tensor[(7, 14, 4), float32] */
  };
  %623() /* ty=Tensor[(7, 14, 4), float32] */
}

def @func_8553(%var_8504: Tensor[(5, 5, 10), int64], %var_8528: Tensor[(847), int32]) -> (Tensor[(5, 5, 10), int64], Tensor[(7, 14, 4), uint16], Tensor[(7, 14, 4), float32], Tensor[(780), uint8], Tensor[(1, 60), float64], Tensor[(847), int32], Tensor[(7, 14, 4), float32]) {
  %624 = cast(meta[relay.Constant][36] /* ty=Tensor[(5, 5, 10), int64] */, dtype="int64") /* ty=Tensor[(5, 5, 10), int64] */;
  %625 = shape_of(%var_8504, dtype="int32") /* ty=Tensor[(3), int32] */;
  %626 = cast(%var_8504, dtype="int64") /* ty=Tensor[(5, 5, 10), int64] */;
  %627 = dyn.reshape(%624, %625, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %628 = @func_5178() /* ty=(Tensor[(7, 14, 4), uint16],) */;
  %629 = @func_7178() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(780), uint8], Tensor[(847), int32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), uint16], Tensor[(7, 14, 4), float32]) */;
  %630 = cast(meta[relay.Constant][37] /* ty=Tensor[(1, 60), float64] */, dtype="float64") /* ty=Tensor[(1, 60), float64] */;
  %631 = cast(%var_8528, dtype="int32") /* ty=Tensor[(847), int32] */;
  %632 = reshape(%630, newshape=[60]) /* ty=Tensor[(60), float64] */;
  %633 = reshape(%631, newshape=[847]) /* ty=Tensor[(847), int32] */;
  %634 = @func_6460(%632, %633) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(1755), int8], Tensor[(7, 14, 4), float32], Tensor[(660), float64], Tensor[(60), float64], Tensor[(780), uint8], Tensor[(847), int32]) */;
  %635 = @func_7442() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */;
  %636 = maximum(%626, %627) /* ty=Tensor[(5, 5, 10), int64] */;
  %637 = %628.0;
  %638 = %629.3;
  %639 = %634.6;
  %640 = %635.1;
  (%636, %637, %638, %639, meta[relay.Constant][37] /* ty=Tensor[(1, 60), float64] */, %var_8528, %640)
}

def @func_9441() -> (Tensor[(10, 3, 13), bool], Tensor[(7, 14, 4), float32]) {
  %641 = @func_5878() /* ty=(Tensor[(10, 3, 13), bool],) */;
  %642 = %641.0;
  %643 = @func_8575() /* ty=Tensor[(7, 14, 4), float32] */;
  (%642, %643)
}

def @func_9610() -> Tensor[(7, 14, 4), float32] {
  %644 = @func_8502() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(11, 11, 15), int64], Tensor[(121), int64], Tensor[(1815), int64]) */;
  %644.1
}

def @func_1279(%var_1255: Tensor[(7, 14, 4), float32]) -> (Tensor[(7, 14, 4), uint16], Tensor[(11, 11, 7), int32], Tensor[(847), int32]) {
  %645 = @func_856() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %646 = %645.0;
  %647 = cast(%var_1255, dtype="uint16") /* ty=Tensor[(7, 14, 4), uint16] */;
  %648 = shape_of(%646, dtype="int32") /* ty=Tensor[(3), int32] */;
  %649 = cast(%646, dtype="uint16") /* ty=Tensor[(7, 14, 4), uint16] */;
  %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %651 = cast(meta[relay.Constant][38] /* ty=Tensor[(847), int32] */, dtype="int32") /* ty=Tensor[(847), int32] */;
  %652 = reshape(%651, newshape=[11, 11, 7]) /* ty=Tensor[(11, 11, 7), int32] */;
  %653 = bitwise_or(%649, %650) /* ty=Tensor[(7, 14, 4), uint16] */;
  %654 = @func_807(%652) /* ty=Tensor[(11, 11, 7), int32] */;
  (%653, %654, meta[relay.Constant][38] /* ty=Tensor[(847), int32] */)
}

def @func_1428(%var_1427: Tensor[(847), int32]) -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(780), uint8], Tensor[(780), uint8], Tensor[(63, 2), uint8], Tensor[(7, 14, 4), float32], Tensor[(847), int32]) {
  %671 = fn (%var_1413: Tensor[(847), int32]) -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(780), uint8], Tensor[(780), uint8], Tensor[(63, 2), uint8], Tensor[(7, 14, 4), float32], Tensor[(847), int32]) {
    %655 = @func_1126() /* ty=(Tensor[(7, 14, 4), float32],) */;
    %656 = cast(meta[relay.Constant][39] /* ty=Tensor[(780), uint8] */, dtype="uint8") /* ty=Tensor[(780), uint8] */;
    %657 = reshape(%656, newshape=[390, 2]) /* ty=Tensor[(390, 2), uint8] */;
    %658 = @func_931(%657) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(13, 10, 6), uint8], Tensor[(390, 2), uint8]) */;
    %659 = cast(meta[relay.Constant][40] /* ty=Tensor[(63, 2), uint8] */, dtype="uint8") /* ty=Tensor[(63, 2), uint8] */;
    %660 = cast(meta[relay.Constant][39] /* ty=Tensor[(780), uint8] */, dtype="uint8") /* ty=Tensor[(780), uint8] */;
    %661 = reshape(%659, newshape=[9, 7, 2]) /* ty=Tensor[(9, 7, 2), uint8] */;
    %662 = reshape(%660, newshape=[780]) /* ty=Tensor[(780), uint8] */;
    %663 = @func_1038(%661, %662) /* ty=(Tensor[(9, 7, 2), uint8], Tensor[(13, 10, 6), uint8], Tensor[(780), uint8]) */;
    %664 = cast(%var_1413, dtype="int32") /* ty=Tensor[(847), int32] */;
    %665 = reshape(%664, newshape=[847]) /* ty=Tensor[(847), int32] */;
    %666 = @func_1222(%665) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(847), uint64]) */;
    %667 = %655.0;
    %668 = %658.0;
    %669 = %663.2;
    %670 = %666.0;
    (%667, %668, meta[relay.Constant][39] /* ty=Tensor[(780), uint8] */, %669, meta[relay.Constant][40] /* ty=Tensor[(63, 2), uint8] */, %670, %var_1413)
  };
  %671(%var_1427) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(780), uint8], Tensor[(780), uint8], Tensor[(63, 2), uint8], Tensor[(7, 14, 4), float32], Tensor[(847), int32]) */
}

def @func_4660(%var_4658: Tensor[(2, 847), int32]) -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(2, 847), bool], Tensor[(2, 847), float32], Tensor[(13, 10, 6), uint8], Tensor[(3900), uint8]) {
  @func_4657(%var_4658) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(2, 847), bool], Tensor[(2, 847), float32], Tensor[(13, 10, 6), uint8], Tensor[(3900), uint8]) */
}

def @func_8330() -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(847), int32]) {
  %678 = fn () -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(847), int32]) {
    %672 = @func_3929() /* ty=(Tensor[(7, 14, 4), float32],) */;
    %673 = cast(meta[relay.Constant][41] /* ty=Tensor[(847), int32] */, dtype="int32") /* ty=Tensor[(847), int32] */;
    %674 = reshape(%673, newshape=[847]) /* ty=Tensor[(847), int32] */;
    %675 = @func_4356(%674) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(847), int32], Tensor[(150, 26), int8], Tensor[(7, 14, 4), float32]) */;
    %676 = %672.0;
    %677 = %675.0;
    (%676, %677, meta[relay.Constant][41] /* ty=Tensor[(847), int32] */)
  };
  %678() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(847), int32]) */
}

def @func_5124() -> Tensor[(7, 14, 4), float32] {
  @func_5122() /* ty=Tensor[(7, 14, 4), float32] */
}

def @func_7676() -> (Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), uint16]) {
  %683 = fn () -> (Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), uint16]) {
    %679 = @func_2049() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64]) */;
    %680 = @func_7205() /* ty=(Tensor[(7, 14, 4), uint16],) */;
    %681 = %679.1;
    %682 = %680.0;
    (%681, %682)
  };
  %683() /* ty=(Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), uint16]) */
}

def @func_3297(%var_3295: Tensor[(3900), uint8], %var_3296: Tensor[(780, 5), bool]) -> (Tensor[(13, 10, 6), uint8], Tensor[(3900), uint8], Tensor[(780, 5), bool]) {
  @func_3293(%var_3295, %var_3296) /* ty=(Tensor[(13, 10, 6), uint8], Tensor[(3900), uint8], Tensor[(780, 5), bool]) */
}

def @func_1627() -> Tensor[(7, 14, 4), float32] {
  %685 = fn () -> Tensor[(7, 14, 4), float32] {
    %684 = @func_1303() /* ty=(Tensor[(7, 14, 4), float32],) */;
    %684.0
  };
  %685() /* ty=Tensor[(7, 14, 4), float32] */
}

def @func_931(%var_929: Tensor[(390, 2), uint8]) -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(13, 10, 6), uint8], Tensor[(390, 2), uint8]) {
  %686 = @func_856() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %687 = @func_856() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %688 = cast(%var_929, dtype="uint8") /* ty=Tensor[(390, 2), uint8] */;
  %689 = reshape(%688, newshape=[13, 10, 6]) /* ty=Tensor[(13, 10, 6), uint8] */;
  %690 = %686.0;
  %691 = %687.0;
  %692 = @func_647(%689) /* ty=Tensor[(13, 10, 6), uint8] */;
  (%690, %691, %692, %var_929)
}

def @func_7859(%var_7840: Tensor[(1, 60), float64]) -> (Tensor[(7, 14, 4), float32], Tensor[(847), int32], Tensor[(1, 60), float64], Tensor[(847), int32], Tensor[(7, 14, 4), float32]) {
  %693 = @func_2894() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(63, 2), uint8], Tensor[(847), int32], Tensor[(7, 14, 4), float32]) */;
  %694 = cast(%var_7840, dtype="float64") /* ty=Tensor[(1, 60), float64] */;
  %695 = cast(meta[relay.Constant][42] /* ty=Tensor[(847), int32] */, dtype="int32") /* ty=Tensor[(847), int32] */;
  %696 = reshape(%694, newshape=[60]) /* ty=Tensor[(60), float64] */;
  %697 = reshape(%695, newshape=[847]) /* ty=Tensor[(847), int32] */;
  %698 = @func_6460(%696, %697) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(1755), int8], Tensor[(7, 14, 4), float32], Tensor[(660), float64], Tensor[(60), float64], Tensor[(780), uint8], Tensor[(847), int32]) */;
  %699 = @func_856() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %700 = %693.0;
  %701 = %698.7;
  %702 = %699.0;
  (%700, %701, %var_7840, meta[relay.Constant][42] /* ty=Tensor[(847), int32] */, %702)
}

def @func_2881() -> (Tensor[(7, 14, 4), float32],) {
  %703 = @func_2511() /* ty=Tensor[(7, 14, 4), float32] */;
  (%703,)
}

def @func_8827() -> (Tensor[(7, 14, 4), float32],) {
  %705 = fn () -> (Tensor[(7, 14, 4), float32],) {
    %704 = @func_4118() /* ty=Tensor[(7, 14, 4), float32] */;
    (%704,)
  };
  %705() /* ty=(Tensor[(7, 14, 4), float32],) */
}

def @func_9612() -> Tensor[(7, 14, 4), float32] {
  @func_9610() /* ty=Tensor[(7, 14, 4), float32] */
}

def @func_2843() -> (Tensor[(7, 14, 4), bool], Tensor[(7, 14, 4), bool]) {
  %714 = fn () -> (Tensor[(7, 14, 4), bool], Tensor[(7, 14, 4), bool]) {
    %706 = @func_1322() /* ty=Tensor[(7, 14, 4), float64] */;
    %707 = cast(meta[relay.Constant][43] /* ty=Tensor[(7, 14, 4), float64] */, dtype="bool") /* ty=Tensor[(7, 14, 4), bool] */;
    %708 = shape_of(%706, dtype="int32") /* ty=Tensor[(3), int32] */;
    %709 = cast(%706, dtype="bool") /* ty=Tensor[(7, 14, 4), bool] */;
    %710 = dyn.reshape(%707, %708, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %711 = @func_2801() /* ty=(Tensor[(7, 14, 4), bool], Tensor[(11, 12, 5), float64], Tensor[(660), float64], Tensor[(7, 14, 4), float32], Tensor[(847), int32], Tensor[(7, 14, 4), float32]) */;
    %712 = greater(%709, %710) /* ty=Tensor[(7, 14, 4), bool] */;
    %713 = %711.0;
    (%712, %713)
  };
  %714() /* ty=(Tensor[(7, 14, 4), bool], Tensor[(7, 14, 4), bool]) */
}

def @func_8864(%var_8844: Tensor[(3, 9, 13), float64]) -> (Tensor[(3, 9, 13), float64], Tensor[(7, 14, 4), float32]) {
  %715 = cast(%var_8844, dtype="float64") /* ty=Tensor[(3, 9, 13), float64] */;
  %716 = sqrt(%715) /* ty=Tensor[(3, 9, 13), float64] */;
  %717 = @func_4118() /* ty=Tensor[(7, 14, 4), float32] */;
  (%716, %717)
}

def @func_858() -> (Tensor[(7, 14, 4), float32],) {
  @func_856() /* ty=(Tensor[(7, 14, 4), float32],) */
}

def @func_5439(%var_5438: Tensor[(847, 1), int32]) -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(847, ?), int64]) {
  %738 = fn (%var_5378: Tensor[(847, 1), int32]) -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(847, ?), int64]) {
    %718 = @func_4386() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */;
    %719 = @func_2881() /* ty=(Tensor[(7, 14, 4), float32],) */;
    %720 = cast(%var_5378, dtype="int32") /* ty=Tensor[(847, 1), int32] */;
    %721 = reshape(%720, newshape=[847]) /* ty=Tensor[(847), int32] */;
    %722 = @func_1087(%721) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(11, 11, 7), int32], Tensor[(847), int32], Tensor[(7, 14, 4), float32]) */;
    %723 = %722.1;
    %724 = cast(%723, dtype="uint16") /* ty=Tensor[(11, 11, 7), uint16] */;
    %725 = shape_of(%var_5378, dtype="int32") /* ty=Tensor[(2), int32] */;
    %726 = cast(%var_5378, dtype="uint16") /* ty=Tensor[(847, 1), uint16] */;
    %727 = dyn.reshape(%724, %725, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    %728 = left_shift(%726, %727) /* ty=Tensor[(847, ?), uint16] */;
    %729 = cast(%728, dtype="float64") /* ty=Tensor[(847, ?), float64] */;
    %730 = erf(%729) /* ty=Tensor[(847, ?), float64] */;
    %731 = cast(%var_5378, dtype="int64") /* ty=Tensor[(847, 1), int64] */;
    %732 = shape_of(%730, dtype="int32") /* ty=Tensor[(2), int32] */;
    %733 = cast(%730, dtype="int64") /* ty=Tensor[(847, ?), int64] */;
    %734 = dyn.reshape(%731, %732, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
    %735 = %718.0;
    %736 = %719.0;
    %737 = bitwise_and(%733, %734) /* ty=Tensor[(847, ?), int64] */;
    (%735, %736, %737)
  };
  %738(%var_5438) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(847, ?), int64]) */
}

def @func_3848(%var_3846: Tensor[(660), float64], %var_3847: Tensor[(7800), float32]) -> (Tensor[(7, 14, 4), bool], Tensor[(11, 12, 5), float64], Tensor[(660), float64], Tensor[(7, 14, 4), float32], Tensor[(7800), float64], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7800), float64]) {
  %764 = fn (%var_3781: Tensor[(660), float64], %var_3817: Tensor[(7800), float32]) -> (Tensor[(7, 14, 4), bool], Tensor[(11, 12, 5), float64], Tensor[(660), float64], Tensor[(7, 14, 4), float32], Tensor[(7800), float64], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7800), float64]) {
    %739 = @func_2842() /* ty=(Tensor[(7, 14, 4), bool], Tensor[(7, 14, 4), bool]) */;
    %740 = cast(%var_3781, dtype="float64") /* ty=Tensor[(660), float64] */;
    %741 = cast(meta[relay.Constant][44] /* ty=Tensor[(7800), float32] */, dtype="float32") /* ty=Tensor[(7800), float32] */;
    %742 = reshape(%740, newshape=[660]) /* ty=Tensor[(660), float64] */;
    %743 = reshape(%741, newshape=[780, 10]) /* ty=Tensor[(780, 10), float32] */;
    %744 = @func_3503(%742, %743) /* ty=(Tensor[(11, 12, 5), float64], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), bool], Tensor[(780, 660), bool], Tensor[(780, 5), bool], Tensor[(3900), uint8], Tensor[(13, 10, 6), uint8], Tensor[(7, 14, 4), float32], Tensor[(780, ?), uint16], Tensor[(780, 10), float32]) */;
    %745 = @func_856() /* ty=(Tensor[(7, 14, 4), float32],) */;
    %746 = cast(meta[relay.Constant][45] /* ty=Tensor[(7800), float32] */, dtype="float64") /* ty=Tensor[(7800), float64] */;
    %747 = shape_of(meta[relay.Constant][44] /* ty=Tensor[(7800), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %748 = cast(meta[relay.Constant][44] /* ty=Tensor[(7800), float32] */, dtype="float64") /* ty=Tensor[(7800), float64] */;
    %749 = dyn.reshape(%746, %747, newshape=[]) /* ty=Tensor[(?), float64] */;
    %750 = @func_2894() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(63, 2), uint8], Tensor[(847), int32], Tensor[(7, 14, 4), float32]) */;
    %751 = cast(meta[relay.Constant][44] /* ty=Tensor[(7800), float32] */, dtype="float32") /* ty=Tensor[(7800), float32] */;
    %752 = sqrt(%751) /* ty=Tensor[(7800), float32] */;
    %753 = cast(%var_3817, dtype="float64") /* ty=Tensor[(7800), float64] */;
    %754 = shape_of(%752, dtype="int32") /* ty=Tensor[(1), int32] */;
    %755 = cast(%752, dtype="float64") /* ty=Tensor[(7800), float64] */;
    %756 = dyn.reshape(%753, %754, newshape=[]) /* ty=Tensor[(?), float64] */;
    %757 = %739.1;
    %758 = %744.0;
    %759 = %745.0;
    %760 = floor_divide(%748, %749) /* ty=Tensor[(7800), float64] */;
    %761 = @func_1626() /* ty=Tensor[(7, 14, 4), float32] */;
    %762 = %750.3;
    %763 = mod(%755, %756) /* ty=Tensor[(7800), float64] */;
    (%757, %758, %var_3781, %759, %760, %761, %762, %763)
  };
  %764(%var_3846, %var_3847) /* ty=(Tensor[(7, 14, 4), bool], Tensor[(11, 12, 5), float64], Tensor[(660), float64], Tensor[(7, 14, 4), float32], Tensor[(7800), float64], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7800), float64]) */
}

def @func_7399(%var_7396: Tensor[(60), float64], %var_7397: Tensor[(847), int32], %var_7398: Tensor[(3900), uint8]) -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32], Tensor[(60), float64], Tensor[(780, 1), uint8], Tensor[(847), int32], Tensor[(3900), uint8], Tensor[(7, 14, 4), float32]) {
  @func_7394(%var_7396, %var_7397, %var_7398) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32], Tensor[(60), float64], Tensor[(780, 1), uint8], Tensor[(847), int32], Tensor[(3900), uint8], Tensor[(7, 14, 4), float32]) */
}

def @func_3506(%var_3504: Tensor[(660), float64], %var_3505: Tensor[(780, 10), float32]) -> (Tensor[(11, 12, 5), float64], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), bool], Tensor[(780, 660), bool], Tensor[(780, 5), bool], Tensor[(3900), uint8], Tensor[(13, 10, 6), uint8], Tensor[(7, 14, 4), float32], Tensor[(780, ?), uint16], Tensor[(780, 10), float32]) {
  %814 = fn (%var_3394: Tensor[(660), float64], %var_3481: Tensor[(780, 10), float32]) -> (Tensor[(11, 12, 5), float64], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), bool], Tensor[(780, 660), bool], Tensor[(780, 5), bool], Tensor[(3900), uint8], Tensor[(13, 10, 6), uint8], Tensor[(7, 14, 4), float32], Tensor[(780, ?), uint16], Tensor[(780, 10), float32]) {
    %765 = cast(%var_3394, dtype="float64") /* ty=Tensor[(660), float64] */;
    %766 = reshape(%765, newshape=[11, 12, 5]) /* ty=Tensor[(11, 12, 5), float64] */;
    %767 = @func_2321(%766) /* ty=(Tensor[(11, 12, 5), float64], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32]) */;
    %768 = @func_2049() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64]) */;
    %769 = %768.0;
    %770 = cast(%769, dtype="float64") /* ty=Tensor[(7, 14, 4), float64] */;
    %771 = reshape(%770, newshape=[7, 14, 4]) /* ty=Tensor[(7, 14, 4), float64] */;
    %772 = @func_2379() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(13, 10, 6), uint8], Tensor[(780, 1), uint8]) */;
    %773 = %772.2;
    %774 = cast(%773, dtype="float64") /* ty=Tensor[(780, 1), float64] */;
    %775 = log2(%774) /* ty=Tensor[(780, 1), float64] */;
    %776 = cast(%775, dtype="float32") /* ty=Tensor[(780, 1), float32] */;
    %777 = cast(%var_3394, dtype="float32") /* ty=Tensor[(660), float32] */;
    %778 = floor_divide(%776, %777) /* ty=Tensor[(780, 660), float32] */;
    %779 = cast(%778, dtype="bool") /* ty=Tensor[(780, 660), bool] */;
    %780 = cast(%775, dtype="bool") /* ty=Tensor[(780, 1), bool] */;
    %781 = cast(meta[relay.Constant][46] /* ty=Tensor[(3900), uint8] */, dtype="uint8") /* ty=Tensor[(3900), uint8] */;
    %782 = cast(meta[relay.Constant][46] /* ty=Tensor[(3900), uint8] */, dtype="bool") /* ty=Tensor[(3900), bool] */;
    %783 = reshape(%781, newshape=[3900]) /* ty=Tensor[(3900), uint8] */;
    %784 = reshape(%782, newshape=[780, 5]) /* ty=Tensor[(780, 5), bool] */;
    %785 = @func_3293(%783, %784) /* ty=(Tensor[(13, 10, 6), uint8], Tensor[(3900), uint8], Tensor[(780, 5), bool]) */;
    %786 = %785.2;
    %787 = cast(%786, dtype="uint8") /* ty=Tensor[(780, 5), uint8] */;
    %788 = cast(%786, dtype="bool") /* ty=Tensor[(780, 5), bool] */;
    %789 = reshape(%787, newshape=[3900]) /* ty=Tensor[(3900), uint8] */;
    %790 = reshape(%788, newshape=[780, 5]) /* ty=Tensor[(780, 5), bool] */;
    %791 = @func_3293(%789, %790) /* ty=(Tensor[(13, 10, 6), uint8], Tensor[(3900), uint8], Tensor[(780, 5), bool]) */;
    %792 = @func_2607() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */;
    %793 = %792.3;
    %794 = cast(%793, dtype="float32") /* ty=Tensor[(7, 14, 4), float32] */;
    %795 = exp(%794) /* ty=Tensor[(7, 14, 4), float32] */;
    %796 = cast(%795, dtype="float32") /* ty=Tensor[(7, 14, 4), float32] */;
    %797 = cast(%775, dtype="float32") /* ty=Tensor[(780, 1), float32] */;
    %798 = log(%797) /* ty=Tensor[(780, 1), float32] */;
    %799 = cast(%775, dtype="uint16") /* ty=Tensor[(780, 1), uint16] */;
    %800 = shape_of(%798, dtype="int32") /* ty=Tensor[(2), int32] */;
    %801 = cast(%798, dtype="uint16") /* ty=Tensor[(780, 1), uint16] */;
    %802 = dyn.reshape(%799, %800, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    %803 = cast(%798, dtype="float32") /* ty=Tensor[(780, 1), float32] */;
    %804 = tan(%803) /* ty=Tensor[(780, 1), float32] */;
    %805 = cast(%804, dtype="float32") /* ty=Tensor[(780, 1), float32] */;
    %806 = cast(%var_3481, dtype="float32") /* ty=Tensor[(780, 10), float32] */;
    %807 = %767.0;
    %808 = @func_1664(%771) /* ty=Tensor[(7, 14, 4), bool] */;
    %809 = equal(%779, %780) /* ty=Tensor[(780, 660), bool] */;
    %810 = %791.0;
    %811 = cos(%796) /* ty=Tensor[(7, 14, 4), float32] */;
    %812 = add(%801, %802) /* ty=Tensor[(780, ?), uint16] */;
    %813 = divide(%805, %806) /* ty=Tensor[(780, 10), float32] */;
    (%807, %769, %808, %809, %786, meta[relay.Constant][46] /* ty=Tensor[(3900), uint8] */, %810, %811, %812, %813)
  };
  %814(%var_3504, %var_3505) /* ty=(Tensor[(11, 12, 5), float64], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), bool], Tensor[(780, 660), bool], Tensor[(780, 5), bool], Tensor[(3900), uint8], Tensor[(13, 10, 6), uint8], Tensor[(7, 14, 4), float32], Tensor[(780, ?), uint16], Tensor[(780, 10), float32]) */
}

def @func_2250(%var_2248: Tensor[(847), int32]) -> (Tensor[(7, 14, 4), float32], Tensor[(60), float64], Tensor[(7, 14, 4), float64], Tensor[(11, 11, 7), int32], Tensor[(847), int32], Tensor[(10, 6, 1), float32], Tensor[(7, 14, 4), float32]) {
  @func_2247(%var_2248) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(60), float64], Tensor[(7, 14, 4), float64], Tensor[(11, 11, 7), int32], Tensor[(847), int32], Tensor[(10, 6, 1), float32], Tensor[(7, 14, 4), float32]) */
}

def @func_2803() -> (Tensor[(7, 14, 4), bool], Tensor[(11, 12, 5), float64], Tensor[(660), float64], Tensor[(7, 14, 4), float32], Tensor[(847), int32], Tensor[(7, 14, 4), float32]) {
  @func_2801() /* ty=(Tensor[(7, 14, 4), bool], Tensor[(11, 12, 5), float64], Tensor[(660), float64], Tensor[(7, 14, 4), float32], Tensor[(847), int32], Tensor[(7, 14, 4), float32]) */
}

def @func_990() -> (Tensor[(7, 14, 4), float32],) {
  @func_988() /* ty=(Tensor[(7, 14, 4), float32],) */
}

def @func_8227() -> Tensor[(7, 14, 4), float32] {
  %816 = fn () -> Tensor[(7, 14, 4), float32] {
    %815 = @func_5842() /* ty=(Tensor[(7, 14, 4), float32],) */;
    %815.0
  };
  %816() /* ty=Tensor[(7, 14, 4), float32] */
}

def @func_4992() -> Tensor[(7, 14, 4), float32] {
  @func_4990() /* ty=Tensor[(7, 14, 4), float32] */
}

def @func_8894() -> (Tensor[(121), int64],) {
  @func_8892() /* ty=(Tensor[(121), int64],) */
}

def @func_8988() -> Tensor[(7, 14, 4), float32] {
  %817 = @func_7442() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */;
  %817.0
}

def @func_9974() -> (Tensor[(10, 3, 13), bool],) {
  %818 = @func_5878() /* ty=(Tensor[(10, 3, 13), bool],) */;
  %819 = %818.0;
  (%819,)
}

def @func_4462() -> Tensor[(7, 14, 4), float32] {
  @func_2263() /* ty=Tensor[(7, 14, 4), float32] */
}

def @func_4120() -> Tensor[(7, 14, 4), float32] {
  @func_4118() /* ty=Tensor[(7, 14, 4), float32] */
}

def @func_1556(%var_1554: Tensor[(77, 11), int32], %var_1555: Tensor[(77, 11), float32]) -> (Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32], Tensor[(77, 11), float32], Tensor[(7, 14, 4), float32], Tensor[(780), uint8], Tensor[(77, 11), bool], Tensor[(780), uint8], Tensor[(77, 11), float32], Tensor[(77, 11), float32]) {
  %854 = fn (%var_1469: Tensor[(77, 11), int32], %var_1508: Tensor[(77, 11), float32]) -> (Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32], Tensor[(77, 11), float32], Tensor[(7, 14, 4), float32], Tensor[(780), uint8], Tensor[(77, 11), bool], Tensor[(780), uint8], Tensor[(77, 11), float32], Tensor[(77, 11), float32]) {
    %820 = cast(%var_1469, dtype="int32") /* ty=Tensor[(77, 11), int32] */;
    %821 = reshape(%820, newshape=[847]) /* ty=Tensor[(847), int32] */;
    %822 = @func_1426(%821) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(780), uint8], Tensor[(780), uint8], Tensor[(63, 2), uint8], Tensor[(7, 14, 4), float32], Tensor[(847), int32]) */;
    %823 = cast(meta[relay.Constant][47] /* ty=Tensor[(77, 11), int32] */, dtype="float32") /* ty=Tensor[(77, 11), float32] */;
    %824 = shape_of(%var_1469, dtype="int32") /* ty=Tensor[(2), int32] */;
    %825 = cast(%var_1469, dtype="float32") /* ty=Tensor[(77, 11), float32] */;
    %826 = dyn.reshape(%823, %824, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %827 = cast(meta[relay.Constant][48] /* ty=Tensor[(780), uint8] */, dtype="uint8") /* ty=Tensor[(780), uint8] */;
    %828 = reshape(%827, newshape=[390, 2]) /* ty=Tensor[(390, 2), uint8] */;
    %829 = @func_931(%828) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(13, 10, 6), uint8], Tensor[(390, 2), uint8]) */;
    %830 = cast(meta[relay.Constant][47] /* ty=Tensor[(77, 11), int32] */, dtype="float32") /* ty=Tensor[(77, 11), float32] */;
    %831 = sin(%830) /* ty=Tensor[(77, 11), float32] */;
    %832 = cast(meta[relay.Constant][47] /* ty=Tensor[(77, 11), int32] */, dtype="float32") /* ty=Tensor[(77, 11), float32] */;
    %833 = shape_of(%831, dtype="int32") /* ty=Tensor[(2), int32] */;
    %834 = cast(%831, dtype="float32") /* ty=Tensor[(77, 11), float32] */;
    %835 = dyn.reshape(%832, %833, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %836 = floor_mod(%834, %835) /* ty=Tensor[(77, 11), float32] */;
    %837 = cast(%var_1508, dtype="bool") /* ty=Tensor[(77, 11), bool] */;
    %838 = shape_of(%836, dtype="int32") /* ty=Tensor[(2), int32] */;
    %839 = cast(%836, dtype="bool") /* ty=Tensor[(77, 11), bool] */;
    %840 = dyn.reshape(%837, %838, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %841 = divide(%825, %826) /* ty=Tensor[(77, 11), float32] */;
    %842 = cast(%841, dtype="int32") /* ty=Tensor[(77, 11), int32] */;
    %843 = reshape(%842, newshape=[847]) /* ty=Tensor[(847), int32] */;
    %844 = @func_1426(%843) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(780), uint8], Tensor[(780), uint8], Tensor[(63, 2), uint8], Tensor[(7, 14, 4), float32], Tensor[(847), int32]) */;
    %845 = cast(%var_1469, dtype="float32") /* ty=Tensor[(77, 11), float32] */;
    %846 = cast(%831, dtype="float32") /* ty=Tensor[(77, 11), float32] */;
    %847 = @func_1322() /* ty=Tensor[(7, 14, 4), float64] */;
    %848 = %822.0;
    %849 = %829.0;
    %850 = not_equal(%839, %840) /* ty=Tensor[(77, 11), bool] */;
    %851 = %844.2;
    %852 = atan(%845) /* ty=Tensor[(77, 11), float32] */;
    %853 = log(%846) /* ty=Tensor[(77, 11), float32] */;
    (%847, %848, %841, %849, meta[relay.Constant][48] /* ty=Tensor[(780), uint8] */, %850, %851, %852, %853)
  };
  %854(%var_1554, %var_1555) /* ty=(Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32], Tensor[(77, 11), float32], Tensor[(7, 14, 4), float32], Tensor[(780), uint8], Tensor[(77, 11), bool], Tensor[(780), uint8], Tensor[(77, 11), float32], Tensor[(77, 11), float32]) */
}

def @func_6224() -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) {
  %859 = fn () -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) {
    %855 = @func_988() /* ty=(Tensor[(7, 14, 4), float32],) */;
    %856 = @func_856() /* ty=(Tensor[(7, 14, 4), float32],) */;
    %857 = %855.0;
    %858 = %856.0;
    (%857, %858)
  };
  %859() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */
}

def @func_649(%var_648: Tensor[(13, 10, 6), uint8]) -> Tensor[(13, 10, 6), uint8] {
  %862 = fn (%var_642: Tensor[(13, 10, 6), uint8]) -> Tensor[(13, 10, 6), uint8] {
    %860 = cast(meta[relay.Constant][49] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %861 = cast(%var_642, dtype="uint8") /* ty=Tensor[(13, 10, 6), uint8] */;
    bitwise_or(%860, %861) /* ty=Tensor[(13, 10, 6), uint8] */
  };
  %862(%var_648) /* ty=Tensor[(13, 10, 6), uint8] */
}

def @func_856() -> (Tensor[(7, 14, 4), float32],) {
  %863 = cast(8.47204f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %864 = cast(meta[relay.Constant][50] /* ty=Tensor[(7, 14, 4), float32] */, dtype="float32") /* ty=Tensor[(7, 14, 4), float32] */;
  %865 = floor_divide(%863, %864) /* ty=Tensor[(7, 14, 4), float32] */;
  (%865,)
}

def @func_3293(%var_3277: Tensor[(3900), uint8], %var_3288: Tensor[(780, 5), bool]) -> (Tensor[(13, 10, 6), uint8], Tensor[(3900), uint8], Tensor[(780, 5), bool]) {
  %866 = @func_2379() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(13, 10, 6), uint8], Tensor[(780, 1), uint8]) */;
  %867 = cast(%var_3277, dtype="uint8") /* ty=Tensor[(3900), uint8] */;
  %868 = reshape(%867, newshape=[780, 5]) /* ty=Tensor[(780, 5), uint8] */;
  %869 = @func_2954(%868) /* ty=(Tensor[(780, 5), bool],) */;
  %870 = %869.0;
  %871 = cast(%var_3288, dtype="bool") /* ty=Tensor[(780, 5), bool] */;
  %872 = shape_of(%870, dtype="int32") /* ty=Tensor[(2), int32] */;
  %873 = cast(%870, dtype="bool") /* ty=Tensor[(780, 5), bool] */;
  %874 = dyn.reshape(%871, %872, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %875 = %866.1;
  %876 = less_equal(%873, %874) /* ty=Tensor[(780, 5), bool] */;
  (%875, %var_3277, %876)
}

def @func_1674() -> Tensor[(7, 14, 4), float32] {
  %877 = fn () -> Tensor[(7, 14, 4), float32] {
    @func_1626() /* ty=Tensor[(7, 14, 4), float32] */
  };
  %877() /* ty=Tensor[(7, 14, 4), float32] */
}

def @func_4388() -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) {
  @func_4386() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */
}

def @func_5942() -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) {
  @func_5940() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */
}

def @func_6311(%var_6310: Tensor[(16, 13, 12), float32]) -> (Tensor[(16, 13, 12), float32], Tensor[(7, 14, 4), float64], Tensor[(392), float32], Tensor[(7, 14, 4), float64], float32, Tensor[(18, 6), float32], Tensor[(7, 14, 4), float32]) {
  %892 = fn (%var_6257: Tensor[(16, 13, 12), float32]) -> (Tensor[(16, 13, 12), float32], Tensor[(7, 14, 4), float64], Tensor[(392), float32], Tensor[(7, 14, 4), float64], float32, Tensor[(18, 6), float32], Tensor[(7, 14, 4), float32]) {
    %878 = cast(%var_6257, dtype="float32") /* ty=Tensor[(16, 13, 12), float32] */;
    %879 = cast(meta[relay.Constant][51] /* ty=Tensor[(392), float32] */, dtype="float32") /* ty=Tensor[(392), float32] */;
    %880 = reshape(%879, newshape=[7, 14, 4]) /* ty=Tensor[(7, 14, 4), float32] */;
    %881 = @func_6177(%880) /* ty=(Tensor[(7, 14, 4), bool], Tensor[(780, ?), int8], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64]) */;
    %882 = cast(-9.65667f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %883 = cast(meta[relay.Constant][52] /* ty=Tensor[(18, 6), float32] */, dtype="float32") /* ty=Tensor[(18, 6), float32] */;
    %884 = reshape(%882, newshape=[]) /* ty=float32 */;
    %885 = reshape(%883, newshape=[1, 9, 12]) /* ty=Tensor[(1, 9, 12), float32] */;
    %886 = @func_2168(%884, %885) /* ty=(Tensor[(1, 9, 12), bool], Tensor[(7, 14, 4), float64], Tensor[(?, 9, 12), float64]) */;
    %887 = @func_2607() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */;
    %888 = atanh(%878) /* ty=Tensor[(16, 13, 12), float32] */;
    %889 = %881.3;
    %890 = %886.1;
    %891 = %887.1;
    (%888, %889, meta[relay.Constant][51] /* ty=Tensor[(392), float32] */, %890, -9.65667f /* ty=float32 */, meta[relay.Constant][52] /* ty=Tensor[(18, 6), float32] */, %891)
  };
  %892(%var_6310) /* ty=(Tensor[(16, 13, 12), float32], Tensor[(7, 14, 4), float64], Tensor[(392), float32], Tensor[(7, 14, 4), float64], float32, Tensor[(18, 6), float32], Tensor[(7, 14, 4), float32]) */
}

def @func_8575() -> Tensor[(7, 14, 4), float32] {
  %893 = @func_2049() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64]) */;
  %893.0
}

def @func_1282(%var_1280: Tensor[(7, 14, 4), float32]) -> (Tensor[(7, 14, 4), uint16], Tensor[(11, 11, 7), int32], Tensor[(847), int32]) {
  @func_1279(%var_1280) /* ty=(Tensor[(7, 14, 4), uint16], Tensor[(11, 11, 7), int32], Tensor[(847), int32]) */
}

def @func_2168(%var_2103: float32, %var_2104: Tensor[(1, 9, 12), float32]) -> (Tensor[(1, 9, 12), bool], Tensor[(7, 14, 4), float64], Tensor[(?, 9, 12), float64]) {
  %894 = cast(%var_2103, dtype="bool") /* ty=bool */;
  %895 = cast(%var_2104, dtype="bool") /* ty=Tensor[(1, 9, 12), bool] */;
  %896 = cast(%var_2104, dtype="float64") /* ty=Tensor[(1, 9, 12), float64] */;
  %897 = log(%896) /* ty=Tensor[(1, 9, 12), float64] */;
  %898 = cast(%var_2104, dtype="float64") /* ty=Tensor[(1, 9, 12), float64] */;
  %899 = shape_of(%897, dtype="int32") /* ty=Tensor[(3), int32] */;
  %900 = cast(%897, dtype="float64") /* ty=Tensor[(1, 9, 12), float64] */;
  %901 = dyn.reshape(%898, %899, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %902 = equal(%894, %895) /* ty=Tensor[(1, 9, 12), bool] */;
  %903 = @func_1322() /* ty=Tensor[(7, 14, 4), float64] */;
  %904 = floor_divide(%900, %901) /* ty=Tensor[(?, 9, 12), float64] */;
  (%902, %903, %904)
}

def @func_4067(%var_4055: Tensor[(10, 1, 3), float32]) -> (Tensor[(10, 1, 3), float32], Tensor[(10, 1, 3), float64]) {
  %905 = cast(%var_4055, dtype="float32") /* ty=Tensor[(10, 1, 3), float32] */;
  %906 = cast(%var_4055, dtype="float64") /* ty=Tensor[(10, 1, 3), float64] */;
  %907 = rsqrt(%905) /* ty=Tensor[(10, 1, 3), float32] */;
  %908 = erf(%906) /* ty=Tensor[(10, 1, 3), float64] */;
  (%907, %908)
}

def @func_4464() -> Tensor[(7, 14, 4), float32] {
  @func_4462() /* ty=Tensor[(7, 14, 4), float32] */
}

def @func_6252() -> (Tensor[(10, 3, 13), float64],) {
  %912 = fn () -> (Tensor[(10, 3, 13), float64],) {
    %909 = @func_3722() /* ty=Tensor[(10, 3, 13), bool] */;
    %910 = cast(%909, dtype="float64") /* ty=Tensor[(10, 3, 13), float64] */;
    %911 = atan(%910) /* ty=Tensor[(10, 3, 13), float64] */;
    (%911,)
  };
  %912() /* ty=(Tensor[(10, 3, 13), float64],) */
}

def @func_5122() -> Tensor[(7, 14, 4), float32] {
  @func_4990() /* ty=Tensor[(7, 14, 4), float32] */
}

def @func_6642() -> Tensor[(7, 14, 4), float32] {
  @func_6640() /* ty=Tensor[(7, 14, 4), float32] */
}

def @func_8785() -> (Tensor[(7, 14, 4), float32],) {
  %913 = @func_4990() /* ty=Tensor[(7, 14, 4), float32] */;
  (%913,)
}

def @func_9491() -> (Tensor[(847), int32],) {
  %914 = @func_8329() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(847), int32]) */;
  %915 = %914.2;
  (%915,)
}

def @func_9998() -> (Tensor[(7, 14, 4), float32],) {
  %917 = fn () -> (Tensor[(7, 14, 4), float32],) {
    %916 = @func_4462() /* ty=Tensor[(7, 14, 4), float32] */;
    (%916,)
  };
  %917() /* ty=(Tensor[(7, 14, 4), float32],) */
}

def @func_7510() -> Tensor[(7, 14, 4), float32] {
  @func_7508() /* ty=Tensor[(7, 14, 4), float32] */
}

def @func_4743() -> (Tensor[(7, 14, 4), float32],) {
  %918 = @func_2894() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(63, 2), uint8], Tensor[(847), int32], Tensor[(7, 14, 4), float32]) */;
  %919 = %918.3;
  (%919,)
}

def @func_7207() -> (Tensor[(7, 14, 4), uint16],) {
  @func_7205() /* ty=(Tensor[(7, 14, 4), uint16],) */
}

def @func_5879() -> (Tensor[(10, 3, 13), bool],) {
  %921 = fn () -> (Tensor[(10, 3, 13), bool],) {
    %920 = @func_3722() /* ty=Tensor[(10, 3, 13), bool] */;
    (%920,)
  };
  %921() /* ty=(Tensor[(10, 3, 13), bool],) */
}

def @func_7084(%var_7079: Tensor[(60), float64], %var_7080: Tensor[(780), uint8], %var_7081: Tensor[(847), int32], %var_7082: Tensor[(3900), uint8], %var_7083: Tensor[(847), float32]) -> (Tensor[(7, 14, 4), float32], Tensor[(7800), float32], Tensor[(60), float64], Tensor[(780), uint8], Tensor[(7, 14, 4), float32], Tensor[(3900), uint8], Tensor[(847), float64], Tensor[(847), float64]) {
  @func_7077(%var_7079, %var_7080, %var_7081, %var_7082, %var_7083) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7800), float32], Tensor[(60), float64], Tensor[(780), uint8], Tensor[(7, 14, 4), float32], Tensor[(3900), uint8], Tensor[(847), float64], Tensor[(847), float64]) */
}

def @func_7194() -> (Tensor[(10, 3, 13), float32], Tensor[(780, 5), bool], Tensor[(3900), uint8]) {
  %922 = cast(meta[relay.Constant][53] /* ty=Tensor[(3900), uint8] */, dtype="uint8") /* ty=Tensor[(3900), uint8] */;
  %923 = reshape(%922, newshape=[780, 5]) /* ty=Tensor[(780, 5), uint8] */;
  %924 = @func_2954(%923) /* ty=(Tensor[(780, 5), bool],) */;
  %925 = @func_4758() /* ty=Tensor[(10, 3, 13), float32] */;
  %926 = %924.0;
  (%925, %926, meta[relay.Constant][53] /* ty=Tensor[(3900), uint8] */)
}

def @func_4676() -> (Tensor[(780, ?), bool],) {
  %936 = fn () -> (Tensor[(780, ?), bool],) {
    %927 = @func_2379() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(13, 10, 6), uint8], Tensor[(780, 1), uint8]) */;
    %928 = %927.2;
    %929 = cast(%928, dtype="float32") /* ty=Tensor[(780, 1), float32] */;
    %930 = log10(%929) /* ty=Tensor[(780, 1), float32] */;
    %931 = cast(%928, dtype="bool") /* ty=Tensor[(780, 1), bool] */;
    %932 = shape_of(%930, dtype="int32") /* ty=Tensor[(2), int32] */;
    %933 = cast(%930, dtype="bool") /* ty=Tensor[(780, 1), bool] */;
    %934 = dyn.reshape(%931, %932, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %935 = greater_equal(%933, %934) /* ty=Tensor[(780, ?), bool] */;
    (%935,)
  };
  %936() /* ty=(Tensor[(780, ?), bool],) */
}

def @func_4863() -> Tensor[(10, 3, 13), float64] {
  %939 = fn () -> Tensor[(10, 3, 13), float64] {
    %937 = @func_3749() /* ty=Tensor[(10, 3, 13), bool] */;
    %938 = cast(%937, dtype="float64") /* ty=Tensor[(10, 3, 13), float64] */;
    tan(%938) /* ty=Tensor[(10, 3, 13), float64] */
  };
  %939() /* ty=Tensor[(10, 3, 13), float64] */
}

def @func_7472() -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(390, 2), uint8], Tensor[(780), uint8], Tensor[(7, 14, 4), uint16]) {
  %940 = @func_2607() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */;
  %941 = @func_1303() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %942 = cast(meta[relay.Constant][54] /* ty=Tensor[(780), uint8] */, dtype="uint8") /* ty=Tensor[(780), uint8] */;
  %943 = reshape(%942, newshape=[390, 2]) /* ty=Tensor[(390, 2), uint8] */;
  %944 = @func_931(%943) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(13, 10, 6), uint8], Tensor[(390, 2), uint8]) */;
  %945 = @func_7205() /* ty=(Tensor[(7, 14, 4), uint16],) */;
  %946 = %940.2;
  %947 = %941.0;
  %948 = %944.3;
  %949 = %945.0;
  (%946, %947, %948, meta[relay.Constant][54] /* ty=Tensor[(780), uint8] */, %949)
}

def @func_9214(%var_9119: Tensor[(780), uint8], %var_9121: Tensor[(3900), uint8]) -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(60), float64], Tensor[(780), uint8], Tensor[(847), int32], Tensor[(3900), uint8], Tensor[(847), int32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(780, 1), uint8], Tensor[(3, 20), bool]) {
  %950 = @func_2881() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %951 = cast(meta[relay.Constant][55] /* ty=Tensor[(3, 20), float64] */, dtype="float64") /* ty=Tensor[(3, 20), float64] */;
  %952 = cast(%var_9119, dtype="uint8") /* ty=Tensor[(780), uint8] */;
  %953 = cast(meta[relay.Constant][56] /* ty=Tensor[(847), int32] */, dtype="int32") /* ty=Tensor[(847), int32] */;
  %954 = cast(%var_9121, dtype="uint8") /* ty=Tensor[(3900), uint8] */;
  %955 = cast(meta[relay.Constant][56] /* ty=Tensor[(847), int32] */, dtype="float32") /* ty=Tensor[(847), float32] */;
  %956 = reshape(%951, newshape=[60]) /* ty=Tensor[(60), float64] */;
  %957 = reshape(%952, newshape=[780]) /* ty=Tensor[(780), uint8] */;
  %958 = reshape(%953, newshape=[847]) /* ty=Tensor[(847), int32] */;
  %959 = reshape(%954, newshape=[3900]) /* ty=Tensor[(3900), uint8] */;
  %960 = reshape(%955, newshape=[847]) /* ty=Tensor[(847), float32] */;
  %961 = @func_7077(%956, %957, %958, %959, %960) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7800), float32], Tensor[(60), float64], Tensor[(780), uint8], Tensor[(7, 14, 4), float32], Tensor[(3900), uint8], Tensor[(847), float64], Tensor[(847), float64]) */;
  %962 = cast(meta[relay.Constant][56] /* ty=Tensor[(847), int32] */, dtype="int32") /* ty=Tensor[(847), int32] */;
  %963 = reshape(%962, newshape=[847]) /* ty=Tensor[(847), int32] */;
  %964 = @func_6503(%963) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(847, ?), int64], Tensor[(847), int32], Tensor[(7, 14, 4), uint16]) */;
  %965 = cast(meta[relay.Constant][55] /* ty=Tensor[(3, 20), float64] */, dtype="float32") /* ty=Tensor[(3, 20), float32] */;
  %966 = atan(%965) /* ty=Tensor[(3, 20), float32] */;
  %967 = cast(meta[relay.Constant][55] /* ty=Tensor[(3, 20), float64] */, dtype="bool") /* ty=Tensor[(3, 20), bool] */;
  %968 = shape_of(%966, dtype="int32") /* ty=Tensor[(2), int32] */;
  %969 = cast(%966, dtype="bool") /* ty=Tensor[(3, 20), bool] */;
  %970 = dyn.reshape(%967, %968, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %971 = @func_6640() /* ty=Tensor[(7, 14, 4), float32] */;
  %972 = %950.0;
  %973 = %961.2;
  %974 = %964.3;
  %975 = @func_8226() /* ty=Tensor[(7, 14, 4), float32] */;
  %976 = @func_6597() /* ty=Tensor[(7, 14, 4), float32] */;
  %977 = @func_6130() /* ty=Tensor[(780, 1), uint8] */;
  %978 = logical_or(%969, %970) /* ty=Tensor[(3, 20), bool] */;
  (%971, %972, %973, %var_9119, meta[relay.Constant][56] /* ty=Tensor[(847), int32] */, %var_9121, %974, %975, %976, %977, %978)
}

def @func_5243() -> (Tensor[(7, 14, 4), float32],) {
  %980 = fn () -> (Tensor[(7, 14, 4), float32],) {
    %979 = @func_2511() /* ty=Tensor[(7, 14, 4), float32] */;
    (%979,)
  };
  %980() /* ty=(Tensor[(7, 14, 4), float32],) */
}

def @func_1822() -> (Tensor[(11, 11, 7), int32], Tensor[(847), int32], Tensor[(7, 14, 4), uint64], Tensor[(7, 14, 4), float64]) {
  %981 = cast(meta[relay.Constant][57] /* ty=Tensor[(847), int32] */, dtype="int32") /* ty=Tensor[(847), int32] */;
  %982 = reshape(%981, newshape=[11, 11, 7]) /* ty=Tensor[(11, 11, 7), int32] */;
  %983 = @func_1749() /* ty=Tensor[(7, 14, 4), float32] */;
  %984 = cast(%983, dtype="float32") /* ty=Tensor[(7, 14, 4), float32] */;
  %985 = acos(%984) /* ty=Tensor[(7, 14, 4), float32] */;
  %986 = cast(%983, dtype="uint64") /* ty=Tensor[(7, 14, 4), uint64] */;
  %987 = shape_of(%985, dtype="int32") /* ty=Tensor[(3), int32] */;
  %988 = cast(%985, dtype="uint64") /* ty=Tensor[(7, 14, 4), uint64] */;
  %989 = dyn.reshape(%986, %987, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %990 = cast(%983, dtype="float32") /* ty=Tensor[(7, 14, 4), float32] */;
  %991 = log(%990) /* ty=Tensor[(7, 14, 4), float32] */;
  %992 = cast(%991, dtype="float64") /* ty=Tensor[(7, 14, 4), float64] */;
  %993 = @func_807(%982) /* ty=Tensor[(11, 11, 7), int32] */;
  %994 = minimum(%988, %989) /* ty=Tensor[(7, 14, 4), uint64] */;
  %995 = tan(%992) /* ty=Tensor[(7, 14, 4), float64] */;
  (%993, meta[relay.Constant][57] /* ty=Tensor[(847), int32] */, %994, %995)
}

def @func_6131() -> Tensor[(780, 1), uint8] {
  %997 = fn () -> Tensor[(780, 1), uint8] {
    %996 = @func_2444() /* ty=(Tensor[(780, 1), uint8],) */;
    %996.0
  };
  %997() /* ty=Tensor[(780, 1), uint8] */
}

def @func_9218(%var_9216: Tensor[(780), uint8], %var_9217: Tensor[(3900), uint8]) -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(60), float64], Tensor[(780), uint8], Tensor[(847), int32], Tensor[(3900), uint8], Tensor[(847), int32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(780, 1), uint8], Tensor[(3, 20), bool]) {
  @func_9214(%var_9216, %var_9217) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(60), float64], Tensor[(780), uint8], Tensor[(847), int32], Tensor[(3900), uint8], Tensor[(847), int32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(780, 1), uint8], Tensor[(3, 20), bool]) */
}

def @func_1324() -> Tensor[(7, 14, 4), float64] {
  @func_1322() /* ty=Tensor[(7, 14, 4), float64] */
}

def @func_8051() -> Tensor[(7, 14, 4), float32] {
  %998 = @func_2881() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %998.0
}

def @func_8221() -> Tensor[(10, 3, 13), float64] {
  @func_8219() /* ty=Tensor[(10, 3, 13), float64] */
}

def @func_4214(%var_4206: Tensor[(1755), int8]) -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32], Tensor[(1755), int8]) {
  %999 = @func_2881() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %1000 = @func_1822() /* ty=(Tensor[(11, 11, 7), int32], Tensor[(847), int32], Tensor[(7, 14, 4), uint64], Tensor[(7, 14, 4), float64]) */;
  %1001 = cast(%var_4206, dtype="int8") /* ty=Tensor[(1755), int8] */;
  %1002 = cast(%var_4206, dtype="int8") /* ty=Tensor[(1755), int8] */;
  %1003 = reshape(%1001, newshape=[9, 15, 13]) /* ty=Tensor[(9, 15, 13), int8] */;
  %1004 = reshape(%1002, newshape=[9, 15, 13]) /* ty=Tensor[(9, 15, 13), int8] */;
  %1005 = @func_2707(%1003, %1004) /* ty=(Tensor[(9, 15, 13), int32], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32]) */;
  %1006 = %999.0;
  %1007 = %1000.3;
  %1008 = %1005.2;
  (%1006, %1007, %1008, %var_4206)
}

def @func_9349() -> Tensor[(7, 14, 4), float32] {
  @func_9347() /* ty=Tensor[(7, 14, 4), float32] */
}

def @func_8902() -> (Tensor[(7, 14, 4), float64], Tensor[(10, 3, 13), float64]) {
  %1012 = fn () -> (Tensor[(7, 14, 4), float64], Tensor[(10, 3, 13), float64]) {
    %1009 = @func_8029() /* ty=(Tensor[(10, 3, 13), float64], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(847), int32]) */;
    %1010 = @func_1322() /* ty=Tensor[(7, 14, 4), float64] */;
    %1011 = %1009.0;
    (%1010, %1011)
  };
  %1012() /* ty=(Tensor[(7, 14, 4), float64], Tensor[(10, 3, 13), float64]) */
}

def @func_2381() -> (Tensor[(7, 14, 4), float32], Tensor[(13, 10, 6), uint8], Tensor[(780, 1), uint8]) {
  @func_2379() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(13, 10, 6), uint8], Tensor[(780, 1), uint8]) */
}

def @func_2607() -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) {
  %1013 = @func_2049() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64]) */;
  %1014 = @func_2468() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %1015 = @func_1303() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %1016 = %1015.0;
  %1017 = cast(%1016, dtype="float32") /* ty=Tensor[(7, 14, 4), float32] */;
  %1018 = %1013.0;
  %1019 = %1014.0;
  %1020 = sin(%1017) /* ty=Tensor[(7, 14, 4), float32] */;
  %1021 = @func_1749() /* ty=Tensor[(7, 14, 4), float32] */;
  (%1018, %1019, %1020, %1021)
}

def @func_4118() -> Tensor[(7, 14, 4), float32] {
  %1022 = @func_2468() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %1022.0
}

def @func_4358(%var_4357: Tensor[(847), int32]) -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(847), int32], Tensor[(150, 26), int8], Tensor[(7, 14, 4), float32]) {
  %1049 = fn (%var_4328: Tensor[(847), int32]) -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(847), int32], Tensor[(150, 26), int8], Tensor[(7, 14, 4), float32]) {
    %1023 = @func_2468() /* ty=(Tensor[(7, 14, 4), float32],) */;
    %1024 = cast(%var_4328, dtype="int32") /* ty=Tensor[(847), int32] */;
    %1025 = reshape(%1024, newshape=[847]) /* ty=Tensor[(847), int32] */;
    %1026 = @func_1426(%1025) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(780), uint8], Tensor[(780), uint8], Tensor[(63, 2), uint8], Tensor[(7, 14, 4), float32], Tensor[(847), int32]) */;
    %1027 = cast(meta[relay.Constant][58] /* ty=Tensor[(150, 26), uint8] */, dtype="uint8") /* ty=Tensor[(150, 26), uint8] */;
    %1028 = cast(meta[relay.Constant][58] /* ty=Tensor[(150, 26), uint8] */, dtype="bool") /* ty=Tensor[(150, 26), bool] */;
    %1029 = reshape(%1027, newshape=[3900]) /* ty=Tensor[(3900), uint8] */;
    %1030 = reshape(%1028, newshape=[780, 5]) /* ty=Tensor[(780, 5), bool] */;
    %1031 = @func_3293(%1029, %1030) /* ty=(Tensor[(13, 10, 6), uint8], Tensor[(3900), uint8], Tensor[(780, 5), bool]) */;
    %1032 = %1031.2;
    %1033 = cast(%1032, dtype="float64") /* ty=Tensor[(780, 5), float64] */;
    %1034 = shape_of(meta[relay.Constant][58] /* ty=Tensor[(150, 26), uint8] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1035 = cast(meta[relay.Constant][58] /* ty=Tensor[(150, 26), uint8] */, dtype="float64") /* ty=Tensor[(150, 26), float64] */;
    %1036 = dyn.reshape(%1033, %1034, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %1037 = floor_divide(%1035, %1036) /* ty=Tensor[(150, 26), float64] */;
    %1038 = cast(%1037, dtype="float64") /* ty=Tensor[(150, 26), float64] */;
    %1039 = atan(%1038) /* ty=Tensor[(150, 26), float64] */;
    %1040 = cast(%1037, dtype="int8") /* ty=Tensor[(150, 26), int8] */;
    %1041 = shape_of(%1039, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1042 = cast(%1039, dtype="int8") /* ty=Tensor[(150, 26), int8] */;
    %1043 = dyn.reshape(%1040, %1041, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
    %1044 = @func_3681() /* ty=(Tensor[(7, 14, 4), float32],) */;
    %1045 = %1023.0;
    %1046 = %1026.1;
    %1047 = add(%1042, %1043) /* ty=Tensor[(150, 26), int8] */;
    %1048 = %1044.0;
    (%1045, %1046, %var_4328, %1047, %1048)
  };
  %1049(%var_4357) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(847), int32], Tensor[(150, 26), int8], Tensor[(7, 14, 4), float32]) */
}

def @func_6640() -> Tensor[(7, 14, 4), float32] {
  @func_6597() /* ty=Tensor[(7, 14, 4), float32] */
}

def @func_7394(%var_7376: Tensor[(60), float64], %var_7378: Tensor[(847), int32], %var_7379: Tensor[(3900), uint8]) -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32], Tensor[(60), float64], Tensor[(780, 1), uint8], Tensor[(847), int32], Tensor[(3900), uint8], Tensor[(7, 14, 4), float32]) {
  %1050 = @func_3884() /* ty=Tensor[(7, 14, 4), float32] */;
  %1051 = cast(%1050, dtype="float32") /* ty=Tensor[(7, 14, 4), float32] */;
  %1052 = reshape(%1051, newshape=[7, 14, 4]) /* ty=Tensor[(7, 14, 4), float32] */;
  %1053 = @func_6177(%1052) /* ty=(Tensor[(7, 14, 4), bool], Tensor[(780, ?), int8], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64]) */;
  %1054 = @func_5242() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %1055 = cast(%var_7376, dtype="float64") /* ty=Tensor[(60), float64] */;
  %1056 = cast(meta[relay.Constant][59] /* ty=Tensor[(780, 1), uint8] */, dtype="uint8") /* ty=Tensor[(780, 1), uint8] */;
  %1057 = cast(%var_7378, dtype="int32") /* ty=Tensor[(847), int32] */;
  %1058 = cast(%var_7379, dtype="uint8") /* ty=Tensor[(3900), uint8] */;
  %1059 = cast(%var_7378, dtype="float32") /* ty=Tensor[(847), float32] */;
  %1060 = reshape(%1055, newshape=[60]) /* ty=Tensor[(60), float64] */;
  %1061 = reshape(%1056, newshape=[780]) /* ty=Tensor[(780), uint8] */;
  %1062 = reshape(%1057, newshape=[847]) /* ty=Tensor[(847), int32] */;
  %1063 = reshape(%1058, newshape=[3900]) /* ty=Tensor[(3900), uint8] */;
  %1064 = reshape(%1059, newshape=[847]) /* ty=Tensor[(847), float32] */;
  %1065 = @func_7077(%1060, %1061, %1062, %1063, %1064) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7800), float32], Tensor[(60), float64], Tensor[(780), uint8], Tensor[(7, 14, 4), float32], Tensor[(3900), uint8], Tensor[(847), float64], Tensor[(847), float64]) */;
  %1066 = %1053.4;
  %1067 = %1054.0;
  %1068 = @func_1322() /* ty=Tensor[(7, 14, 4), float64] */;
  %1069 = %1065.0;
  %1070 = @func_5122() /* ty=Tensor[(7, 14, 4), float32] */;
  (%1050, %1066, %1067, %1068, %1069, %var_7376, meta[relay.Constant][59] /* ty=Tensor[(780, 1), uint8] */, %var_7378, %var_7379, %1070)
}

def @func_1304() -> (Tensor[(7, 14, 4), float32],) {
  %1073 = fn () -> (Tensor[(7, 14, 4), float32],) {
    %1071 = @func_856() /* ty=(Tensor[(7, 14, 4), float32],) */;
    %1072 = %1071.0;
    (%1072,)
  };
  %1073() /* ty=(Tensor[(7, 14, 4), float32],) */
}

def @func_6180(%var_6178: Tensor[(7, 14, 4), float32]) -> (Tensor[(7, 14, 4), bool], Tensor[(780, ?), int8], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64]) {
  @func_6177(%var_6178) /* ty=(Tensor[(7, 14, 4), bool], Tensor[(780, ?), int8], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float64]) */
}

def @func_7222(%var_7208: Tensor[(1, 15, 15), int16]) -> (Tensor[(?, 15, 15), bool], Tensor[(?, 15, 15), bool], Tensor[(7, 14, 4), float32], Tensor[(1, 660), float64]) {
  %1074 = cast(meta[relay.Constant][60] /* ty=Tensor[(1, 15, 15), int16] */, dtype="bool") /* ty=Tensor[(1, 15, 15), bool] */;
  %1075 = shape_of(%var_7208, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1076 = cast(%var_7208, dtype="bool") /* ty=Tensor[(1, 15, 15), bool] */;
  %1077 = dyn.reshape(%1074, %1075, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1078 = cast(meta[relay.Constant][60] /* ty=Tensor[(1, 15, 15), int16] */, dtype="bool") /* ty=Tensor[(1, 15, 15), bool] */;
  %1079 = shape_of(%var_7208, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1080 = cast(%var_7208, dtype="bool") /* ty=Tensor[(1, 15, 15), bool] */;
  %1081 = dyn.reshape(%1078, %1079, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1082 = cast(meta[relay.Constant][61] /* ty=Tensor[(1, 660), float64] */, dtype="float64") /* ty=Tensor[(1, 660), float64] */;
  %1083 = reshape(%1082, newshape=[11, 12, 5]) /* ty=Tensor[(11, 12, 5), float64] */;
  %1084 = @func_2321(%1083) /* ty=(Tensor[(11, 12, 5), float64], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32]) */;
  %1085 = not_equal(%1076, %1077) /* ty=Tensor[(?, 15, 15), bool] */;
  %1086 = less(%1080, %1081) /* ty=Tensor[(?, 15, 15), bool] */;
  %1087 = %1084.3;
  (%1085, %1086, %1087, meta[relay.Constant][61] /* ty=Tensor[(1, 660), float64] */)
}

def @func_7621(%var_7617: Tensor[(14, 12, 8), uint16], %var_7618: Tensor[(14, 12, 8), uint16], %var_7619: float32, %var_7620: Tensor[(108), float32]) -> (Tensor[(14, 12, 8), uint16], Tensor[(7, 14, 4), float32], Tensor[(108), float32], float32, Tensor[(108), float32]) {
  %1100 = fn (%var_7594: Tensor[(14, 12, 8), uint16], %var_7595: Tensor[(14, 12, 8), uint16], %var_7603: float32, %var_7604: Tensor[(108), float32]) -> (Tensor[(14, 12, 8), uint16], Tensor[(7, 14, 4), float32], Tensor[(108), float32], float32, Tensor[(108), float32]) {
    %1088 = cast(%var_7595, dtype="uint16") /* ty=Tensor[(14, 12, 8), uint16] */;
    %1089 = shape_of(%var_7594, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1090 = cast(%var_7594, dtype="uint16") /* ty=Tensor[(14, 12, 8), uint16] */;
    %1091 = dyn.reshape(%1088, %1089, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %1092 = cast(%var_7603, dtype="float32") /* ty=float32 */;
    %1093 = cast(%var_7604, dtype="float32") /* ty=Tensor[(108), float32] */;
    %1094 = reshape(%1092, newshape=[]) /* ty=float32 */;
    %1095 = reshape(%1093, newshape=[108]) /* ty=Tensor[(108), float32] */;
    %1096 = @func_7312(%1094, %1095) /* ty=(Tensor[(847), int32], Tensor[(7, 14, 4), float64], Tensor[(7, 14, 4), float32], Tensor[(1, 9, 12), bool], float32, Tensor[(108), float32], Tensor[(7, 14, 4), float32], Tensor[(780, 1), uint8]) */;
    %1097 = left_shift(%1090, %1091) /* ty=Tensor[(14, 12, 8), uint16] */;
    %1098 = @func_6597() /* ty=Tensor[(7, 14, 4), float32] */;
    %1099 = %1096.5;
    (%1097, %1098, %1099, %var_7603, %var_7604)
  };
  %1100(%var_7617, %var_7618, %var_7619, %var_7620) /* ty=(Tensor[(14, 12, 8), uint16], Tensor[(7, 14, 4), float32], Tensor[(108), float32], float32, Tensor[(108), float32]) */
}

def @func_2445() -> (Tensor[(780, 1), uint8],) {
  %1103 = fn () -> (Tensor[(780, 1), uint8],) {
    %1101 = @func_2379() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(13, 10, 6), uint8], Tensor[(780, 1), uint8]) */;
    %1102 = %1101.2;
    (%1102,)
  };
  %1103() /* ty=(Tensor[(780, 1), uint8],) */
}

def @func_934(%var_932: Tensor[(390, 2), uint8]) -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(13, 10, 6), uint8], Tensor[(390, 2), uint8]) {
  @func_931(%var_932) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(13, 10, 6), uint8], Tensor[(390, 2), uint8]) */
}

def @func_9493() -> (Tensor[(847), int32],) {
  @func_9491() /* ty=(Tensor[(847), int32],) */
}

def @func_1225(%var_1223: Tensor[(847), int32]) -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(847), uint64]) {
  @func_1222(%var_1223) /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(847), uint64]) */
}

def @func_6125() -> (Tensor[(7, 14, 4), uint16],) {
  %1104 = @func_5178() /* ty=(Tensor[(7, 14, 4), uint16],) */;
  %1105 = %1104.0;
  (%1105,)
}

def @func_1456(%var_1452: Tensor[(1, 780), uint8]) -> (Tensor[(7, 14, 4), float32], Tensor[(9, 7, 2), uint8], Tensor[(126), uint8], Tensor[(1, 780), uint8]) {
  %1106 = @func_1126() /* ty=(Tensor[(7, 14, 4), float32],) */;
  %1107 = cast(meta[relay.Constant][62] /* ty=Tensor[(126), uint8] */, dtype="uint8") /* ty=Tensor[(126), uint8] */;
  %1108 = cast(%var_1452, dtype="uint8") /* ty=Tensor[(1, 780), uint8] */;
  %1109 = reshape(%1107, newshape=[9, 7, 2]) /* ty=Tensor[(9, 7, 2), uint8] */;
  %1110 = reshape(%1108, newshape=[780]) /* ty=Tensor[(780), uint8] */;
  %1111 = @func_1038(%1109, %1110) /* ty=(Tensor[(9, 7, 2), uint8], Tensor[(13, 10, 6), uint8], Tensor[(780), uint8]) */;
  %1112 = %1106.0;
  %1113 = %1111.0;
  (%1112, %1113, meta[relay.Constant][62] /* ty=Tensor[(126), uint8] */, %var_1452)
}

def @func_9820() -> Tensor[(7, 14, 4), float32] {
  %1114 = @func_6802() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(10, 3, 13), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */;
  %1114.0
}

def @func_10037() -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), uint16], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) {
  %1123 = fn () -> (Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), uint16], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) {
    %1115 = @func_5608() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */;
    %1116 = @func_7472() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(390, 2), uint8], Tensor[(780), uint8], Tensor[(7, 14, 4), uint16]) */;
    %1117 = @func_5940() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */;
    %1118 = @func_1126() /* ty=(Tensor[(7, 14, 4), float32],) */;
    %1119 = %1115.0;
    %1120 = %1116.4;
    %1121 = %1117.0;
    %1122 = %1118.0;
    (%1119, %1120, %1121, %1122)
  };
  %1123() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), uint16], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32]) */
}

def @func_4759() -> Tensor[(10, 3, 13), float32] {
  %1126 = fn () -> Tensor[(10, 3, 13), float32] {
    %1124 = @func_3722() /* ty=Tensor[(10, 3, 13), bool] */;
    %1125 = cast(%1124, dtype="float32") /* ty=Tensor[(10, 3, 13), float32] */;
    log10(%1125) /* ty=Tensor[(10, 3, 13), float32] */
  };
  %1126() /* ty=Tensor[(10, 3, 13), float32] */
}

def @func_3751() -> Tensor[(10, 3, 13), bool] {
  @func_3749() /* ty=Tensor[(10, 3, 13), bool] */
}

def @func_8892() -> (Tensor[(121), int64],) {
  %1127 = @func_8502() /* ty=(Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(7, 14, 4), float32], Tensor[(11, 11, 15), int64], Tensor[(121), int64], Tensor[(1815), int64]) */;
  %1128 = %1127.5;
  (%1128,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen820/build/output.py", line 3270, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [14:21:06] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

