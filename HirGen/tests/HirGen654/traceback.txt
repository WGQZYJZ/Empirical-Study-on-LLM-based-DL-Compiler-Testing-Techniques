==========mod==========
#[version = "0.0.5"]
def @func_11024(%var_10986: Tensor[(15, 9, 10), float32], %var_11014: Tensor[(24), bool], %var_11015: Tensor[(1, 224), float64]) -> (Tensor[(15, 9, 10), float32], Tensor[(16, 9, 5), uint8], Tensor[(12, 60), float64], Tensor[(16, 7, 2), uint32], bool, Tensor[(24), bool], Tensor[(1, 224), float64], Tensor[(16, 7, 2), uint32]) {
  %0 = cast(%var_10986, dtype="float32") /* ty=Tensor[(15, 9, 10), float32] */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(12, 60), float64] */, dtype="float64") /* ty=Tensor[(12, 60), float64] */;
  %2 = reshape(%1, newshape=[16, 9, 5]) /* ty=Tensor[(16, 9, 5), float64] */;
  %3 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %4 = cast(%var_11014, dtype="bool") /* ty=Tensor[(24), bool] */;
  %5 = cast(%var_11015, dtype="float64") /* ty=Tensor[(1, 224), float64] */;
  %6 = reshape(%3, newshape=[]) /* ty=bool */;
  %7 = reshape(%4, newshape=[1, 8, 3]) /* ty=Tensor[(1, 8, 3), bool] */;
  %8 = reshape(%5, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %9 = @func_590(%6, %7, %8) /* ty=(Tensor[(1, 8, 3), bool], Tensor[(2, 2, 6), float32], Tensor[(224), float64], Tensor[(16, 7, 2), uint32], Tensor[(12, 14, 9), float64], Tensor[(1512, 1), float64]) */;
  %10 = @func_9318() /* ty=(Tensor[(16, 7, 2), uint32], Tensor[(9, 12, 9), bool], Tensor[(972), float64]) */;
  %11 = log10(%0) /* ty=Tensor[(15, 9, 10), float32] */;
  %12 = @func_6547(%2) /* ty=Tensor[(16, 9, 5), uint8] */;
  %13 = %9.3;
  %14 = %10.0;
  (%11, %12, meta[relay.Constant][0] /* ty=Tensor[(12, 60), float64] */, %13, True /* ty=bool */, %var_11014, %var_11015, %14)
}

def @func_10738(%var_10734: Tensor[(11), int8]) -> (Tensor[(24), bool], Tensor[(16, 1, 5), float64], Tensor[(11), int8], float64) {
  %15 = cast(%var_10734, dtype="int8") /* ty=Tensor[(11), int8] */;
  %16 = reshape(%15, newshape=[11]) /* ty=Tensor[(11), int8] */;
  %17 = @func_8147(%16) /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(1, 11, 1), int8], Tensor[(11), int8]) */;
  %18 = @func_10614() /* ty=Tensor[(24), bool] */;
  %19 = cast(%18, dtype="bool") /* ty=Tensor[(24), bool] */;
  %20 = reshape(%19, newshape=[24]) /* ty=Tensor[(24), bool] */;
  %21 = @func_6248(%20) /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(4, 7, 8), bool], Tensor[(32, 224), int16], Tensor[(24), bool], Tensor[(24), bool], float64, Tensor[(16, 14, 11), float32], Tensor[(2464), float64]) */;
  %22 = %17.0;
  %23 = %21.6;
  (%18, %22, %var_10734, %23)
}

def @func_10495(%var_10457: Tensor[(16, 4, 5), float64]) -> (Tensor[(16, 6, 5), float64], Tensor[(16, 4, 5), int16]) {
  %24 = @func_9672() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 9, 5), uint8], Tensor[(720), float64], Tensor[(9, 12, 9), bool], Tensor[(16, 1, 5), float64]) */;
  %25 = %24.4;
  %26 = cast(%25, dtype="float64") /* ty=Tensor[(16, 1, 5), float64] */;
  %27 = cast(meta[relay.Constant][1] /* ty=Tensor[(16, 6, 5), float64] */, dtype="float64") /* ty=Tensor[(16, 6, 5), float64] */;
  %28 = cast(%25, dtype="int16") /* ty=Tensor[(16, 1, 5), int16] */;
  %29 = cast(%var_10457, dtype="int16") /* ty=Tensor[(16, 4, 5), int16] */;
  %30 = maximum(%26, %27) /* ty=Tensor[(16, 6, 5), float64] */;
  %31 = multiply(%28, %29) /* ty=Tensor[(16, 4, 5), int16] */;
  (%30, %31)
}

def @func_6866() -> Tensor[(16, 1, 5), float64] {
  %32 = @func_5938() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %33 = %32.0;
  %34 = cast(%33, dtype="float64") /* ty=Tensor[(16, 1, 5), float64] */;
  tan(%34) /* ty=Tensor[(16, 1, 5), float64] */
}

def @func_6926(%var_6900: Tensor[(16, 7, 5), float64]) -> (Tensor[(16, 2, 5), uint64], Tensor[(6, 4, 16), float64], Tensor[(384), float64], Tensor[(16, 7, 5), float32]) {
  %35 = @func_6114() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %36 = %35.0;
  %37 = cast(%36, dtype="uint64") /* ty=Tensor[(16, 1, 5), uint64] */;
  %38 = cast(meta[relay.Constant][2] /* ty=Tensor[(16, 2, 5), float64] */, dtype="uint64") /* ty=Tensor[(16, 2, 5), uint64] */;
  %39 = cast(meta[relay.Constant][3] /* ty=Tensor[(384), float64] */, dtype="float64") /* ty=Tensor[(384), float64] */;
  %40 = reshape(%39, newshape=[6, 4, 16]) /* ty=Tensor[(6, 4, 16), float64] */;
  %41 = cast(%36, dtype="float32") /* ty=Tensor[(16, 1, 5), float32] */;
  %42 = cast(%var_6900, dtype="float32") /* ty=Tensor[(16, 7, 5), float32] */;
  %43 = floor_divide(%41, %42) /* ty=Tensor[(16, 7, 5), float32] */;
  %44 = cast(%43, dtype="float32") /* ty=Tensor[(16, 7, 5), float32] */;
  %45 = cast(%36, dtype="float32") /* ty=Tensor[(16, 1, 5), float32] */;
  %46 = bitwise_xor(%37, %38) /* ty=Tensor[(16, 2, 5), uint64] */;
  %47 = @func_4258(%40) /* ty=Tensor[(6, 4, 16), float64] */;
  %48 = add(%44, %45) /* ty=Tensor[(16, 7, 5), float32] */;
  (%46, %47, meta[relay.Constant][3] /* ty=Tensor[(384), float64] */, %48)
}

def @func_2859(%var_2819: Tensor[(6, 3, 14), float32], %var_2833: Tensor[(224), uint16], %var_2854: Tensor[(24), bool]) -> (Tensor[(6, 3, 14), float64], Tensor[(4, 7, 8), bool], Tensor[(32), uint16], Tensor[(224), uint16], Tensor[(13, 4, 13), float64], float64, Tensor[(676), float64], Tensor[(16, 7, 2), uint32], Tensor[(260), int32], Tensor[(24), bool]) {
  %49 = cast(%var_2819, dtype="float32") /* ty=Tensor[(6, 3, 14), float32] */;
  %50 = tan(%49) /* ty=Tensor[(6, 3, 14), float32] */;
  %51 = cast(%var_2819, dtype="float64") /* ty=Tensor[(6, 3, 14), float64] */;
  %52 = shape_of(%50, dtype="int32") /* ty=Tensor[(3), int32] */;
  %53 = cast(%50, dtype="float64") /* ty=Tensor[(6, 3, 14), float64] */;
  %54 = dyn.reshape(%51, %52, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %55 = cast(meta[relay.Constant][4] /* ty=Tensor[(32), uint16] */, dtype="uint16") /* ty=Tensor[(32), uint16] */;
  %56 = cast(%var_2833, dtype="uint16") /* ty=Tensor[(224), uint16] */;
  %57 = reshape(%55, newshape=[4, 1, 8]) /* ty=Tensor[(4, 1, 8), uint16] */;
  %58 = reshape(%56, newshape=[4, 7, 8]) /* ty=Tensor[(4, 7, 8), uint16] */;
  %59 = @func_2693(%57, %58) /* ty=(Tensor[(4, 7, 8), bool],) */;
  %60 = cast(-6.23818f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %61 = cast(meta[relay.Constant][5] /* ty=Tensor[(676), float64] */, dtype="float64") /* ty=Tensor[(676), float64] */;
  %62 = reshape(%60, newshape=[]) /* ty=float64 */;
  %63 = reshape(%61, newshape=[13, 4, 13]) /* ty=Tensor[(13, 4, 13), float64] */;
  %64 = @func_1172(%62, %63) /* ty=(Tensor[(13, 4, 13), float64],) */;
  %65 = cast(meta[relay.Constant][6] /* ty=Tensor[(260), int32] */, dtype="int32") /* ty=Tensor[(260), int32] */;
  %66 = cast(meta[relay.Constant][6] /* ty=Tensor[(260), int32] */, dtype="int32") /* ty=Tensor[(260), int32] */;
  %67 = cast(%var_2854, dtype="bool") /* ty=Tensor[(24), bool] */;
  %68 = cast(-6.23818f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %69 = cast(%var_2833, dtype="float64") /* ty=Tensor[(224), float64] */;
  %70 = reshape(%65, newshape=[2, 10, 13]) /* ty=Tensor[(2, 10, 13), int32] */;
  %71 = reshape(%66, newshape=[2, 10, 13]) /* ty=Tensor[(2, 10, 13), int32] */;
  %72 = reshape(%67, newshape=[24]) /* ty=Tensor[(24), bool] */;
  %73 = reshape(%68, newshape=[]) /* ty=float64 */;
  %74 = reshape(%69, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %75 = @func_2223(%70, %71, %72, %73, %74) /* ty=(Tensor[(2, 10, 13), bool], Tensor[(1512), float32], Tensor[(24), bool], float64, Tensor[(224), float64], Tensor[(16, 7, 2), uint32], Tensor[(12, 14, 9), float64]) */;
  %76 = divide(%53, %54) /* ty=Tensor[(6, 3, 14), float64] */;
  %77 = %59.0;
  %78 = %64.0;
  %79 = %75.5;
  (%76, %77, meta[relay.Constant][4] /* ty=Tensor[(32), uint16] */, %var_2833, %78, -6.23818f64 /* ty=float64 */, meta[relay.Constant][5] /* ty=Tensor[(676), float64] */, %79, meta[relay.Constant][6] /* ty=Tensor[(260), int32] */, %var_2854)
}

def @func_6547(%var_6538: Tensor[(16, 9, 5), float64]) -> Tensor[(16, 9, 5), uint8] {
  %80 = @func_5938() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %81 = %80.0;
  %82 = cast(%81, dtype="uint8") /* ty=Tensor[(16, 1, 5), uint8] */;
  %83 = cast(%var_6538, dtype="uint8") /* ty=Tensor[(16, 9, 5), uint8] */;
  bitwise_and(%82, %83) /* ty=Tensor[(16, 9, 5), uint8] */
}

def @func_9001(%var_8960: Tensor[(12, 12, 6), float32], %var_8970: Tensor[(324, 3), float64], %var_8994: float64, %var_8998: Tensor[(1512), float64]) -> (Tensor[(12, 12, 6), float32], Tensor[(324, 3), bool], Tensor[(16, 1, 5), float64], Tensor[(196), float64], float64, Tensor[(224), float64], Tensor[(196), float64], Tensor[(520), float64], Tensor[(1512), float64], Tensor[(135), float32]) {
  %84 = cast(%var_8960, dtype="float32") /* ty=Tensor[(12, 12, 6), float32] */;
  %85 = cast(%var_8970, dtype="float64") /* ty=Tensor[(324, 3), float64] */;
  %86 = cast(%var_8970, dtype="float64") /* ty=Tensor[(324, 3), float64] */;
  %87 = reshape(%85, newshape=[9, 12, 9]) /* ty=Tensor[(9, 12, 9), float64] */;
  %88 = reshape(%86, newshape=[9, 12, 9]) /* ty=Tensor[(9, 12, 9), float64] */;
  %89 = @func_2634(%87, %88) /* ty=Tensor[(9, 12, 9), bool] */;
  %90 = cast(%89, dtype="bool") /* ty=Tensor[(9, 12, 9), bool] */;
  %91 = shape_of(%var_8970, dtype="int32") /* ty=Tensor[(2), int32] */;
  %92 = cast(%var_8970, dtype="bool") /* ty=Tensor[(324, 3), bool] */;
  %93 = dyn.reshape(%90, %91, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %94 = @func_6617() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %95 = cast(%var_8994, dtype="float64") /* ty=float64 */;
  %96 = cast(meta[relay.Constant][7] /* ty=Tensor[(224), float64] */, dtype="float64") /* ty=Tensor[(224), float64] */;
  %97 = cast(meta[relay.Constant][8] /* ty=Tensor[(196), float64] */, dtype="float64") /* ty=Tensor[(196), float64] */;
  %98 = cast(meta[relay.Constant][9] /* ty=Tensor[(520), float64] */, dtype="float64") /* ty=Tensor[(520), float64] */;
  %99 = cast(%var_8998, dtype="float64") /* ty=Tensor[(1512), float64] */;
  %100 = cast(meta[relay.Constant][10] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %101 = reshape(%95, newshape=[]) /* ty=float64 */;
  %102 = reshape(%96, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %103 = reshape(%97, newshape=[196]) /* ty=Tensor[(196), float64] */;
  %104 = reshape(%98, newshape=[520]) /* ty=Tensor[(520), float64] */;
  %105 = reshape(%99, newshape=[1512]) /* ty=Tensor[(1512), float64] */;
  %106 = reshape(%100, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %107 = @func_7083(%101, %102, %103, %104, %105, %106) /* ty=(float64, Tensor[(12, 2), bool], Tensor[(224), float64], Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(4, 7, 7), float64], Tensor[(196), float64], Tensor[(16, 1, 5), float64], Tensor[(4, 10, 13), float64], Tensor[(520), float64], Tensor[(12, 14, 9), float64], Tensor[(1512), float64], Tensor[(3, 5, 9), float32], Tensor[(135), float32]) */;
  %108 = sqrt(%84) /* ty=Tensor[(12, 12, 6), float32] */;
  %109 = greater_equal(%92, %93) /* ty=Tensor[(324, 3), bool] */;
  %110 = %94.0;
  %111 = %107.6;
  (%108, %109, %110, %111, %var_8994, meta[relay.Constant][7] /* ty=Tensor[(224), float64] */, meta[relay.Constant][8] /* ty=Tensor[(196), float64] */, meta[relay.Constant][9] /* ty=Tensor[(520), float64] */, %var_8998, meta[relay.Constant][10] /* ty=Tensor[(135), float32] */)
}

def @func_7083(%var_6990: float64, %var_6991: Tensor[(224), float64], %var_7019: Tensor[(196), float64], %var_7034: Tensor[(520), float64], %var_7056: Tensor[(1512), float64], %var_7081: Tensor[(135), float32]) -> (float64, Tensor[(12, 2), bool], Tensor[(224), float64], Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(4, 7, 7), float64], Tensor[(196), float64], Tensor[(16, 1, 5), float64], Tensor[(4, 10, 13), float64], Tensor[(520), float64], Tensor[(12, 14, 9), float64], Tensor[(1512), float64], Tensor[(3, 5, 9), float32], Tensor[(135), float32]) {
  %112 = cast(meta[relay.Constant][11] /* ty=Tensor[(12, 2), bool] */, dtype="bool") /* ty=Tensor[(12, 2), bool] */;
  %113 = cast(meta[relay.Constant][11] /* ty=Tensor[(12, 2), bool] */, dtype="bool") /* ty=Tensor[(12, 2), bool] */;
  %114 = cast(%var_6990, dtype="float64") /* ty=float64 */;
  %115 = cast(%var_6991, dtype="float64") /* ty=Tensor[(224), float64] */;
  %116 = reshape(%112, newshape=[2, 2, 6]) /* ty=Tensor[(2, 2, 6), bool] */;
  %117 = reshape(%113, newshape=[2, 2, 6]) /* ty=Tensor[(2, 2, 6), bool] */;
  %118 = reshape(%114, newshape=[]) /* ty=float64 */;
  %119 = reshape(%115, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %120 = @func_236(%116, %117, %118, %119) /* ty=(Tensor[(2, 2, 6), bool], Tensor[(12, 14, 9), float64], Tensor[(2, 2, 6), float32], Tensor[(16, 7, 2), uint32], float64, Tensor[(224), float64], Tensor[(1512), float32]) */;
  %121 = @func_6617() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %122 = @func_5938() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %123 = cast(%var_7019, dtype="float64") /* ty=Tensor[(196), float64] */;
  %124 = reshape(%123, newshape=[4, 7, 7]) /* ty=Tensor[(4, 7, 7), float64] */;
  %125 = @func_6492() /* ty=Tensor[(16, 1, 5), float64] */;
  %126 = cast(%125, dtype="uint32") /* ty=Tensor[(16, 1, 5), uint32] */;
  %127 = cast(%var_6990, dtype="uint32") /* ty=uint32 */;
  %128 = minimum(%126, %127) /* ty=Tensor[(16, 1, 5), uint32] */;
  %129 = cast(%128, dtype="float64") /* ty=Tensor[(16, 1, 5), float64] */;
  %130 = cast(%var_7034, dtype="float64") /* ty=Tensor[(520), float64] */;
  %131 = reshape(%130, newshape=[4, 10, 13]) /* ty=Tensor[(4, 10, 13), float64] */;
  %132 = @func_3003(%131) /* ty=(Tensor[(4, 10, 13), float64],) */;
  %133 = cast(%var_7056, dtype="float64") /* ty=Tensor[(1512), float64] */;
  %134 = reshape(%133, newshape=[12, 14, 9]) /* ty=Tensor[(12, 14, 9), float64] */;
  %135 = %120.4;
  %136 = cast(%135, dtype="float32") /* ty=float32 */;
  %137 = cast(%var_7081, dtype="float32") /* ty=Tensor[(135), float32] */;
  %138 = reshape(%136, newshape=[]) /* ty=float32 */;
  %139 = reshape(%137, newshape=[3, 5, 9]) /* ty=Tensor[(3, 5, 9), float32] */;
  %140 = %121.0;
  %141 = %122.0;
  %142 = @func_746(%124) /* ty=Tensor[(4, 7, 7), float64] */;
  %143 = cosh(%129) /* ty=Tensor[(16, 1, 5), float64] */;
  %144 = %132.0;
  %145 = @func_31(%134) /* ty=Tensor[(12, 14, 9), float64] */;
  %146 = @func_2721(%138, %139) /* ty=Tensor[(3, 5, 9), float32] */;
  (%135, meta[relay.Constant][11] /* ty=Tensor[(12, 2), bool] */, %var_6991, %140, %141, %142, %var_7019, %143, %144, %var_7034, %145, %var_7056, %146, %var_7081)
}

def @func_9881() -> (Tensor[(16, 1, 5), float64], Tensor[(12, 32), float32]) {
  %147 = @func_6709() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(12, 32), float32], Tensor[(12, 32), float32]) */;
  %148 = @func_6492() /* ty=Tensor[(16, 1, 5), float64] */;
  %149 = %147.2;
  (%148, %149)
}

def @func_2324(%var_2319: Tensor[(1, 11, 1), int8]) -> (Tensor[(1, 11, 1), int8],) {
  %150 = cast(meta[relay.Constant][12] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %151 = cast(%var_2319, dtype="int8") /* ty=Tensor[(1, 11, 1), int8] */;
  %152 = bitwise_and(%150, %151) /* ty=Tensor[(1, 11, 1), int8] */;
  (%152,)
}

def @func_9672() -> (Tensor[(16, 1, 5), float64], Tensor[(16, 9, 5), uint8], Tensor[(720), float64], Tensor[(9, 12, 9), bool], Tensor[(16, 1, 5), float64]) {
  %153 = @func_6756() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %154 = cast(meta[relay.Constant][13] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %155 = reshape(%154, newshape=[16, 9, 5]) /* ty=Tensor[(16, 9, 5), float64] */;
  %156 = @func_9318() /* ty=(Tensor[(16, 7, 2), uint32], Tensor[(9, 12, 9), bool], Tensor[(972), float64]) */;
  %157 = @func_8457() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %158 = %153.0;
  %159 = @func_6547(%155) /* ty=Tensor[(16, 9, 5), uint8] */;
  %160 = %156.1;
  %161 = %157.0;
  (%158, %159, meta[relay.Constant][13] /* ty=Tensor[(720), float64] */, %160, %161)
}

def @func_10350() -> Tensor[(12, 32), float64] {
  %162 = @func_9013() /* ty=(Tensor[(12, 32), float64],) */;
  %162.0
}

def @func_2223(%var_2193: Tensor[(2, 10, 13), int32], %var_2194: Tensor[(2, 10, 13), int32], %var_2203: Tensor[(24), bool], %var_2204: float64, %var_2205: Tensor[(224), float64]) -> (Tensor[(2, 10, 13), bool], Tensor[(1512), float32], Tensor[(24), bool], float64, Tensor[(224), float64], Tensor[(16, 7, 2), uint32], Tensor[(12, 14, 9), float64]) {
  %163 = cast(%var_2194, dtype="bool") /* ty=Tensor[(2, 10, 13), bool] */;
  %164 = shape_of(%var_2193, dtype="int32") /* ty=Tensor[(3), int32] */;
  %165 = cast(%var_2193, dtype="bool") /* ty=Tensor[(2, 10, 13), bool] */;
  %166 = dyn.reshape(%163, %164, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %167 = cast(%var_2203, dtype="bool") /* ty=Tensor[(24), bool] */;
  %168 = cast(%var_2203, dtype="bool") /* ty=Tensor[(24), bool] */;
  %169 = cast(%var_2204, dtype="float64") /* ty=float64 */;
  %170 = cast(%var_2205, dtype="float64") /* ty=Tensor[(224), float64] */;
  %171 = reshape(%167, newshape=[2, 2, 6]) /* ty=Tensor[(2, 2, 6), bool] */;
  %172 = reshape(%168, newshape=[2, 2, 6]) /* ty=Tensor[(2, 2, 6), bool] */;
  %173 = reshape(%169, newshape=[]) /* ty=float64 */;
  %174 = reshape(%170, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %175 = @func_236(%171, %172, %173, %174) /* ty=(Tensor[(2, 2, 6), bool], Tensor[(12, 14, 9), float64], Tensor[(2, 2, 6), float32], Tensor[(16, 7, 2), uint32], float64, Tensor[(224), float64], Tensor[(1512), float32]) */;
  %176 = cast(%var_2204, dtype="bool") /* ty=bool */;
  %177 = cast(%var_2203, dtype="bool") /* ty=Tensor[(24), bool] */;
  %178 = cast(%var_2205, dtype="float64") /* ty=Tensor[(224), float64] */;
  %179 = reshape(%176, newshape=[]) /* ty=bool */;
  %180 = reshape(%177, newshape=[1, 8, 3]) /* ty=Tensor[(1, 8, 3), bool] */;
  %181 = reshape(%178, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %182 = @func_590(%179, %180, %181) /* ty=(Tensor[(1, 8, 3), bool], Tensor[(2, 2, 6), float32], Tensor[(224), float64], Tensor[(16, 7, 2), uint32], Tensor[(12, 14, 9), float64], Tensor[(1512, 1), float64]) */;
  %183 = %175.6;
  %184 = cast(%183, dtype="float64") /* ty=Tensor[(1512), float64] */;
  %185 = reshape(%184, newshape=[12, 14, 9]) /* ty=Tensor[(12, 14, 9), float64] */;
  %186 = greater(%165, %166) /* ty=Tensor[(2, 10, 13), bool] */;
  %187 = %182.3;
  %188 = @func_31(%185) /* ty=Tensor[(12, 14, 9), float64] */;
  (%186, %183, %var_2203, %var_2204, %var_2205, %187, %188)
}

def @func_10257() -> (Tensor[(16, 1, 5), float64],) {
  %189 = @func_6114() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %190 = %189.0;
  (%190,)
}

def @func_6404(%var_6398: Tensor[(224), float64]) -> (Tensor[(16, 1, 5), float64], Tensor[(16, 7, 2), uint32], Tensor[(24), bool], float64, Tensor[(224), float64]) {
  %191 = @func_5938() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %192 = cast(meta[relay.Constant][14] /* ty=Tensor[(24), bool] */, dtype="bool") /* ty=Tensor[(24), bool] */;
  %193 = cast(meta[relay.Constant][14] /* ty=Tensor[(24), bool] */, dtype="bool") /* ty=Tensor[(24), bool] */;
  %194 = cast(-2.10176f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %195 = cast(%var_6398, dtype="float64") /* ty=Tensor[(224), float64] */;
  %196 = reshape(%192, newshape=[2, 2, 6]) /* ty=Tensor[(2, 2, 6), bool] */;
  %197 = reshape(%193, newshape=[2, 2, 6]) /* ty=Tensor[(2, 2, 6), bool] */;
  %198 = reshape(%194, newshape=[]) /* ty=float64 */;
  %199 = reshape(%195, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %200 = @func_236(%196, %197, %198, %199) /* ty=(Tensor[(2, 2, 6), bool], Tensor[(12, 14, 9), float64], Tensor[(2, 2, 6), float32], Tensor[(16, 7, 2), uint32], float64, Tensor[(224), float64], Tensor[(1512), float32]) */;
  %201 = %191.0;
  %202 = %200.3;
  (%201, %202, meta[relay.Constant][14] /* ty=Tensor[(24), bool] */, -2.10176f64 /* ty=float64 */, %var_6398)
}

def @func_2693(%var_2674: Tensor[(4, 1, 8), uint16], %var_2675: Tensor[(4, 7, 8), uint16]) -> (Tensor[(4, 7, 8), bool],) {
  %203 = cast(%var_2674, dtype="bool") /* ty=Tensor[(4, 1, 8), bool] */;
  %204 = cast(%var_2675, dtype="bool") /* ty=Tensor[(4, 7, 8), bool] */;
  %205 = not_equal(%203, %204) /* ty=Tensor[(4, 7, 8), bool] */;
  (%205,)
}

def @func_10405() -> Tensor[(16, 1, 5), float64] {
  %206 = @func_9568() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(9, 12, 9), uint32], Tensor[(9, 12, 9), float32]) */;
  %206.0
}

def @func_10580() -> Tensor[(56, 8), int32] {
  @func_10234() /* ty=Tensor[(56, 8), int32] */
}

def @func_1172(%var_1155: float64, %var_1156: Tensor[(13, 4, 13), float64]) -> (Tensor[(13, 4, 13), float64],) {
  %207 = cast(%var_1155, dtype="float64") /* ty=float64 */;
  %208 = cast(%var_1156, dtype="float64") /* ty=Tensor[(13, 4, 13), float64] */;
  %209 = mod(%207, %208) /* ty=Tensor[(13, 4, 13), float64] */;
  (%209,)
}

def @func_7159() -> Tensor[(16, 1, 5), float64] {
  %210 = @func_6756() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %210.0
}

def @func_7655() -> Tensor[(16, 1, 5), float64] {
  @func_6492() /* ty=Tensor[(16, 1, 5), float64] */
}

def @func_10707(%var_10644: Tensor[(2, 160), float64]) -> (Tensor[(16, 1, 5), float64], Tensor[(16, 6, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(2, 160), float64]) {
  %211 = cast(%var_10644, dtype="float64") /* ty=Tensor[(2, 160), float64] */;
  %212 = reshape(%211, newshape=[16, 4, 5]) /* ty=Tensor[(16, 4, 5), float64] */;
  %213 = @func_10495(%212) /* ty=(Tensor[(16, 6, 5), float64], Tensor[(16, 4, 5), int16]) */;
  %214 = @func_6756() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %215 = cast(%var_10644, dtype="float64") /* ty=Tensor[(2, 160), float64] */;
  %216 = @func_6600() /* ty=Tensor[(16, 1, 5), float64] */;
  %217 = %213.0;
  %218 = %214.0;
  %219 = sinh(%215) /* ty=Tensor[(2, 160), float64] */;
  (%216, %217, %218, %219)
}

def @func_94(%var_73: float64, %var_74: Tensor[(16, 7, 2), float64]) -> Tensor[(16, 7, 2), uint32] {
  %220 = cast(%var_73, dtype="float64") /* ty=float64 */;
  %221 = cast(%var_74, dtype="float64") /* ty=Tensor[(16, 7, 2), float64] */;
  %222 = divide(%220, %221) /* ty=Tensor[(16, 7, 2), float64] */;
  %223 = cast(%222, dtype="uint32") /* ty=Tensor[(16, 7, 2), uint32] */;
  %224 = shape_of(%var_74, dtype="int32") /* ty=Tensor[(3), int32] */;
  %225 = cast(%var_74, dtype="uint32") /* ty=Tensor[(16, 7, 2), uint32] */;
  %226 = dyn.reshape(%223, %224, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  right_shift(%225, %226) /* ty=Tensor[(16, 7, 2), uint32] */
}

def @func_10932(%var_10852: Tensor[(480), float64], %var_10863: Tensor[(12, 32), float32]) -> (Tensor[(12, 8, 5), float32], Tensor[(480), float64], Tensor[(12, 32), int16], Tensor[(16, 1, 5), float64], Tensor[(12, 32), int16], float64, float64) {
  %227 = cast(%var_10852, dtype="float64") /* ty=Tensor[(480), float64] */;
  %228 = reshape(%227, newshape=[12, 8, 5]) /* ty=Tensor[(12, 8, 5), float64] */;
  %229 = @func_8405(%228) /* ty=(Tensor[(12, 8, 5), float32],) */;
  %230 = @func_9881() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(12, 32), float32]) */;
  %231 = %230.1;
  %232 = cast(%var_10863, dtype="int16") /* ty=Tensor[(12, 32), int16] */;
  %233 = shape_of(%231, dtype="int32") /* ty=Tensor[(2), int32] */;
  %234 = cast(%231, dtype="int16") /* ty=Tensor[(12, 32), int16] */;
  %235 = dyn.reshape(%232, %233, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %236 = @func_8457() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %237 = cast(%231, dtype="int16") /* ty=Tensor[(12, 32), int16] */;
  %238 = shape_of(%var_10863, dtype="int32") /* ty=Tensor[(2), int32] */;
  %239 = cast(%var_10863, dtype="int16") /* ty=Tensor[(12, 32), int16] */;
  %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %241 = cast(%231, dtype="float64") /* ty=Tensor[(12, 32), float64] */;
  %242 = cast(8.32085f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %243 = reshape(%241, newshape=[12, 32]) /* ty=Tensor[(12, 32), float64] */;
  %244 = reshape(%242, newshape=[]) /* ty=float64 */;
  %245 = @func_9163(%243, %244) /* ty=(Tensor[(224), float64], Tensor[(12, 32), uint32], Tensor[(16, 7, 2), uint32], float64) */;
  %246 = %229.0;
  %247 = right_shift(%234, %235) /* ty=Tensor[(12, 32), int16] */;
  %248 = %236.0;
  %249 = maximum(%239, %240) /* ty=Tensor[(12, 32), int16] */;
  %250 = %245.3;
  (%246, %var_10852, %247, %248, %249, %250, 8.32085f64 /* ty=float64 */)
}

def @func_6114() -> (Tensor[(16, 1, 5), float64],) {
  %251 = @func_5938() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %252 = %251.0;
  (%252,)
}

def @func_6709() -> (Tensor[(16, 1, 5), float64], Tensor[(12, 32), float32], Tensor[(12, 32), float32]) {
  %253 = @func_6114() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %254 = cast(meta[relay.Constant][15] /* ty=Tensor[(12, 32), float64] */, dtype="float64") /* ty=Tensor[(12, 32), float64] */;
  %255 = reshape(%254, newshape=[6, 4, 16]) /* ty=Tensor[(6, 4, 16), float64] */;
  %256 = @func_4258(%255) /* ty=Tensor[(6, 4, 16), float64] */;
  %257 = cast(%256, dtype="bool") /* ty=Tensor[(6, 4, 16), bool] */;
  %258 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(12, 32), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %259 = cast(meta[relay.Constant][15] /* ty=Tensor[(12, 32), float64] */, dtype="bool") /* ty=Tensor[(12, 32), bool] */;
  %260 = dyn.reshape(%257, %258, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %261 = greater(%259, %260) /* ty=Tensor[(12, 32), bool] */;
  %262 = cast(%261, dtype="float32") /* ty=Tensor[(12, 32), float32] */;
  %263 = cast(meta[relay.Constant][15] /* ty=Tensor[(12, 32), float64] */, dtype="float32") /* ty=Tensor[(12, 32), float32] */;
  %264 = %253.0;
  %265 = atanh(%262) /* ty=Tensor[(12, 32), float32] */;
  %266 = log2(%263) /* ty=Tensor[(12, 32), float32] */;
  (%264, %265, %266)
}

def @func_9318() -> (Tensor[(16, 7, 2), uint32], Tensor[(9, 12, 9), bool], Tensor[(972), float64]) {
  %267 = @func_7360() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 7, 2), uint32], float64, Tensor[(224), float64], Tensor[(16, 1, 5), float64]) */;
  %268 = cast(meta[relay.Constant][16] /* ty=Tensor[(972), float64] */, dtype="float64") /* ty=Tensor[(972), float64] */;
  %269 = cast(meta[relay.Constant][16] /* ty=Tensor[(972), float64] */, dtype="float64") /* ty=Tensor[(972), float64] */;
  %270 = reshape(%268, newshape=[9, 12, 9]) /* ty=Tensor[(9, 12, 9), float64] */;
  %271 = reshape(%269, newshape=[9, 12, 9]) /* ty=Tensor[(9, 12, 9), float64] */;
  %272 = %267.1;
  %273 = @func_2634(%270, %271) /* ty=Tensor[(9, 12, 9), bool] */;
  (%272, %273, meta[relay.Constant][16] /* ty=Tensor[(972), float64] */)
}

def @func_4664(%var_4611: Tensor[(5, 6, 8), float64]) -> (Tensor[(5, 6, 8), float32],) {
  %274 = cast(%var_4611, dtype="float64") /* ty=Tensor[(5, 6, 8), float64] */;
  %275 = tan(%274) /* ty=Tensor[(5, 6, 8), float64] */;
  %276 = cast(%275, dtype="float32") /* ty=Tensor[(5, 6, 8), float32] */;
  %277 = sigmoid(%276) /* ty=Tensor[(5, 6, 8), float32] */;
  (%277,)
}

def @func_8007() -> Tensor[(12, 32), float32] {
  %278 = @func_7979() /* ty=(Tensor[(12, 32), float64], Tensor[(12, 32), float64]) */;
  %279 = %278.1;
  %280 = cast(%279, dtype="float32") /* ty=Tensor[(12, 32), float32] */;
  %281 = sinh(%280) /* ty=Tensor[(12, 32), float32] */;
  %282 = cast(%281, dtype="float32") /* ty=Tensor[(12, 32), float32] */;
  acos(%282) /* ty=Tensor[(12, 32), float32] */
}

def @func_7549() -> (Tensor[(16, 1, 5), float64],) {
  %283 = @func_6756() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %284 = %283.0;
  (%284,)
}

def @func_9408() -> Tensor[(16, ?, 5), bool] {
  %285 = @func_8025() /* ty=(Tensor[(16, ?, 5), bool], Tensor[(12, 32), float32]) */;
  %285.0
}

def @func_7854(%var_7844: Tensor[(13, 15, 3), float32]) -> (Tensor[(13, 15, 3), float32], Tensor[(4, 7, 7), float64], Tensor[(196), float64]) {
  %286 = cast(%var_7844, dtype="float32") /* ty=Tensor[(13, 15, 3), float32] */;
  %287 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(13, 15, 3), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %288 = cast(meta[relay.Constant][17] /* ty=Tensor[(13, 15, 3), float32] */, dtype="float32") /* ty=Tensor[(13, 15, 3), float32] */;
  %289 = dyn.reshape(%286, %287, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %290 = cast(meta[relay.Constant][18] /* ty=Tensor[(196), float64] */, dtype="float64") /* ty=Tensor[(196), float64] */;
  %291 = reshape(%290, newshape=[196]) /* ty=Tensor[(196), float64] */;
  %292 = @func_7104(%291) /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(4, 7, 7), float64], Tensor[(196), float64]) */;
  %293 = divide(%288, %289) /* ty=Tensor[(13, 15, 3), float32] */;
  %294 = %292.2;
  (%293, %294, meta[relay.Constant][18] /* ty=Tensor[(196), float64] */)
}

def @func_8457() -> (Tensor[(16, 1, 5), float64],) {
  %295 = @func_6114() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %296 = %295.0;
  (%296,)
}

def @func_9033() -> (Tensor[(16, 7, 2), uint32],) {
  %297 = @func_7360() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 7, 2), uint32], float64, Tensor[(224), float64], Tensor[(16, 1, 5), float64]) */;
  %298 = %297.1;
  (%298,)
}

def @func_6015(%var_5985: Tensor[(196), float64], %var_5996: Tensor[(4, 7, 7), float64]) -> (Tensor[(16, 1, 5), float64], Tensor[(196), float64], Tensor[(4, 7, 7), float32]) {
  %299 = @func_5938() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %300 = cast(%var_5985, dtype="float64") /* ty=Tensor[(196), float64] */;
  %301 = reshape(%300, newshape=[4, 7, 7]) /* ty=Tensor[(4, 7, 7), float64] */;
  %302 = @func_746(%301) /* ty=Tensor[(4, 7, 7), float64] */;
  %303 = cast(%var_5996, dtype="float32") /* ty=Tensor[(4, 7, 7), float32] */;
  %304 = shape_of(%302, dtype="int32") /* ty=Tensor[(3), int32] */;
  %305 = cast(%302, dtype="float32") /* ty=Tensor[(4, 7, 7), float32] */;
  %306 = dyn.reshape(%303, %304, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %307 = %299.0;
  %308 = divide(%305, %306) /* ty=Tensor[(4, 7, 7), float32] */;
  (%307, %var_5985, %308)
}

def @func_6266() -> Tensor[(16, 1, 5), float64] {
  %309 = @func_5938() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %309.0
}

def @func_3983(%var_3912: Tensor[(12, 7, 11), bool], %var_3931: Tensor[(24), bool], %var_3941: Tensor[(112, 4), int32]) -> (Tensor[(12, 7, 11), bool], Tensor[(12, 14, 9), float64], Tensor[(24), bool], Tensor[(224), float64], Tensor[(9, 12, 9), bool], Tensor[(972), float64], Tensor[(112, 4), int32], Tensor[(1512), int32], Tensor[(9, 12, 9), bool], Tensor[(13, 4, 13), bool]) {
  %310 = cast(%var_3912, dtype="bool") /* ty=Tensor[(12, 7, 11), bool] */;
  %311 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(12, 7, 11), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %312 = cast(meta[relay.Constant][19] /* ty=Tensor[(12, 7, 11), bool] */, dtype="bool") /* ty=Tensor[(12, 7, 11), bool] */;
  %313 = dyn.reshape(%310, %311, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %314 = cast(%var_3931, dtype="bool") /* ty=Tensor[(24), bool] */;
  %315 = cast(%var_3931, dtype="bool") /* ty=Tensor[(24), bool] */;
  %316 = cast(-3.29575f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %317 = cast(meta[relay.Constant][20] /* ty=Tensor[(224), float64] */, dtype="float64") /* ty=Tensor[(224), float64] */;
  %318 = reshape(%314, newshape=[2, 2, 6]) /* ty=Tensor[(2, 2, 6), bool] */;
  %319 = reshape(%315, newshape=[2, 2, 6]) /* ty=Tensor[(2, 2, 6), bool] */;
  %320 = reshape(%316, newshape=[]) /* ty=float64 */;
  %321 = reshape(%317, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %322 = @func_236(%318, %319, %320, %321) /* ty=(Tensor[(2, 2, 6), bool], Tensor[(12, 14, 9), float64], Tensor[(2, 2, 6), float32], Tensor[(16, 7, 2), uint32], float64, Tensor[(224), float64], Tensor[(1512), float32]) */;
  %323 = cast(meta[relay.Constant][21] /* ty=Tensor[(972), float64] */, dtype="float64") /* ty=Tensor[(972), float64] */;
  %324 = cast(meta[relay.Constant][21] /* ty=Tensor[(972), float64] */, dtype="float64") /* ty=Tensor[(972), float64] */;
  %325 = reshape(%323, newshape=[9, 12, 9]) /* ty=Tensor[(9, 12, 9), float64] */;
  %326 = reshape(%324, newshape=[9, 12, 9]) /* ty=Tensor[(9, 12, 9), float64] */;
  %327 = cast(%var_3931, dtype="bool") /* ty=Tensor[(24), bool] */;
  %328 = cast(%var_3931, dtype="bool") /* ty=Tensor[(24), bool] */;
  %329 = cast(-3.29575f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %330 = cast(meta[relay.Constant][20] /* ty=Tensor[(224), float64] */, dtype="float64") /* ty=Tensor[(224), float64] */;
  %331 = reshape(%327, newshape=[2, 2, 6]) /* ty=Tensor[(2, 2, 6), bool] */;
  %332 = reshape(%328, newshape=[2, 2, 6]) /* ty=Tensor[(2, 2, 6), bool] */;
  %333 = reshape(%329, newshape=[]) /* ty=float64 */;
  %334 = reshape(%330, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %335 = @func_236(%331, %332, %333, %334) /* ty=(Tensor[(2, 2, 6), bool], Tensor[(12, 14, 9), float64], Tensor[(2, 2, 6), float32], Tensor[(16, 7, 2), uint32], float64, Tensor[(224), float64], Tensor[(1512), float32]) */;
  %336 = %335.6;
  %337 = cast(%336, dtype="int32") /* ty=Tensor[(1512), int32] */;
  %338 = cast(-3.29575f64 /* ty=float64 */, dtype="int32") /* ty=int32 */;
  %339 = cast(meta[relay.Constant][21] /* ty=Tensor[(972), float64] */, dtype="float64") /* ty=Tensor[(972), float64] */;
  %340 = @func_2634(%325, %326) /* ty=Tensor[(9, 12, 9), bool] */;
  %341 = cast(%340, dtype="float64") /* ty=Tensor[(9, 12, 9), float64] */;
  %342 = reshape(%339, newshape=[9, 12, 9]) /* ty=Tensor[(9, 12, 9), float64] */;
  %343 = reshape(%341, newshape=[9, 12, 9]) /* ty=Tensor[(9, 12, 9), float64] */;
  %344 = cast(%var_3941, dtype="int32") /* ty=Tensor[(112, 4), int32] */;
  %345 = cast(%var_3931, dtype="bool") /* ty=Tensor[(24), bool] */;
  %346 = reshape(%344, newshape=[14, 16, 2]) /* ty=Tensor[(14, 16, 2), int32] */;
  %347 = reshape(%345, newshape=[2, 12]) /* ty=Tensor[(2, 12), bool] */;
  %348 = @func_3396(%346, %347) /* ty=(Tensor[(14, 16, 2), int32], Tensor[(13, 4, 13), float64], Tensor[(252), float32], Tensor[(224), uint16], Tensor[(2, 12), bool]) */;
  %349 = %348.1;
  %350 = cast(%349, dtype="bool") /* ty=Tensor[(13, 4, 13), bool] */;
  %351 = cast(-3.29575f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
  %352 = logical_or(%312, %313) /* ty=Tensor[(12, 7, 11), bool] */;
  %353 = %322.1;
  %354 = logical_xor(%337, %338) /* ty=Tensor[(1512), int32] */;
  %355 = @func_2634(%342, %343) /* ty=Tensor[(9, 12, 9), bool] */;
  %356 = logical_and(%350, %351) /* ty=Tensor[(13, 4, 13), bool] */;
  (%352, %353, %var_3931, meta[relay.Constant][20] /* ty=Tensor[(224), float64] */, %340, meta[relay.Constant][21] /* ty=Tensor[(972), float64] */, %var_3941, %354, %355, %356)
}

def @func_10088() -> Tensor[(12, 32), float32] {
  %357 = @func_8025() /* ty=(Tensor[(16, ?, 5), bool], Tensor[(12, 32), float32]) */;
  %357.1
}

def @func_4868(%var_4850: Tensor[(3, 4, 2), float32]) -> Tensor[(3, 4, 2), bool] {
  %358 = cast(%var_4850, dtype="float32") /* ty=Tensor[(3, 4, 2), float32] */;
  %359 = log2(%358) /* ty=Tensor[(3, 4, 2), float32] */;
  %360 = cast(%var_4850, dtype="bool") /* ty=Tensor[(3, 4, 2), bool] */;
  %361 = shape_of(%359, dtype="int32") /* ty=Tensor[(3), int32] */;
  %362 = cast(%359, dtype="bool") /* ty=Tensor[(3, 4, 2), bool] */;
  %363 = dyn.reshape(%360, %361, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%362, %363) /* ty=Tensor[(3, 4, 2), bool] */
}

def @func_11056() -> (Tensor[(224), float64],) {
  %364 = @func_7360() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 7, 2), uint32], float64, Tensor[(224), float64], Tensor[(16, 1, 5), float64]) */;
  %365 = %364.3;
  (%365,)
}

def @func_9739(%var_9714: Tensor[(12, 4, 13), float64]) -> (Tensor[(12, 4, 13), float64], Tensor[(56, 8), int32]) {
  %366 = cast(%var_9714, dtype="float64") /* ty=Tensor[(12, 4, 13), float64] */;
  %367 = atan(%366) /* ty=Tensor[(12, 4, 13), float64] */;
  %368 = cast(%367, dtype="float64") /* ty=Tensor[(12, 4, 13), float64] */;
  %369 = shape_of(%var_9714, dtype="int32") /* ty=Tensor[(3), int32] */;
  %370 = cast(%var_9714, dtype="float64") /* ty=Tensor[(12, 4, 13), float64] */;
  %371 = dyn.reshape(%368, %369, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %372 = @func_8709() /* ty=(Tensor[(56, 8), int32], Tensor[(13, 14, 16), float32], Tensor[(2912), float32]) */;
  %373 = mod(%370, %371) /* ty=Tensor[(12, 4, 13), float64] */;
  %374 = %372.0;
  (%373, %374)
}

def @func_9163(%var_9149: Tensor[(12, 32), float64], %var_9159: float64) -> (Tensor[(224), float64], Tensor[(12, 32), uint32], Tensor[(16, 7, 2), uint32], float64) {
  %375 = @func_7360() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 7, 2), uint32], float64, Tensor[(224), float64], Tensor[(16, 1, 5), float64]) */;
  %376 = @func_7979() /* ty=(Tensor[(12, 32), float64], Tensor[(12, 32), float64]) */;
  %377 = %376.1;
  %378 = cast(%377, dtype="float64") /* ty=Tensor[(12, 32), float64] */;
  %379 = acosh(%378) /* ty=Tensor[(12, 32), float64] */;
  %380 = cast(%var_9149, dtype="uint32") /* ty=Tensor[(12, 32), uint32] */;
  %381 = shape_of(%379, dtype="int32") /* ty=Tensor[(2), int32] */;
  %382 = cast(%379, dtype="uint32") /* ty=Tensor[(12, 32), uint32] */;
  %383 = dyn.reshape(%380, %381, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %384 = cast(%var_9159, dtype="float64") /* ty=float64 */;
  %385 = %375.3;
  %386 = cast(%385, dtype="float64") /* ty=Tensor[(224), float64] */;
  %387 = reshape(%384, newshape=[]) /* ty=float64 */;
  %388 = reshape(%386, newshape=[16, 7, 2]) /* ty=Tensor[(16, 7, 2), float64] */;
  %389 = minimum(%382, %383) /* ty=Tensor[(12, 32), uint32] */;
  %390 = @func_94(%387, %388) /* ty=Tensor[(16, 7, 2), uint32] */;
  (%385, %389, %390, %var_9159)
}

def @func_8551(%var_8544: Tensor[(12, 2), float32]) -> (Tensor[(16, ?, 5), int64], Tensor[(3, 4, 2), bool], Tensor[(12, 2), float32]) {
  %391 = @func_7159() /* ty=Tensor[(16, 1, 5), float64] */;
  %392 = cast(%391, dtype="float64") /* ty=Tensor[(16, 1, 5), float64] */;
  %393 = log(%392) /* ty=Tensor[(16, 1, 5), float64] */;
  %394 = @func_5938() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %395 = %394.0;
  %396 = cast(%395, dtype="int64") /* ty=Tensor[(16, 1, 5), int64] */;
  %397 = shape_of(%393, dtype="int32") /* ty=Tensor[(3), int32] */;
  %398 = cast(%393, dtype="int64") /* ty=Tensor[(16, 1, 5), int64] */;
  %399 = dyn.reshape(%396, %397, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %400 = cast(%var_8544, dtype="float32") /* ty=Tensor[(12, 2), float32] */;
  %401 = reshape(%400, newshape=[3, 4, 2]) /* ty=Tensor[(3, 4, 2), float32] */;
  %402 = subtract(%398, %399) /* ty=Tensor[(16, ?, 5), int64] */;
  %403 = @func_4868(%401) /* ty=Tensor[(3, 4, 2), bool] */;
  (%402, %403, %var_8544)
}

def @func_236(%var_169: Tensor[(2, 2, 6), bool], %var_170: Tensor[(2, 2, 6), bool], %var_222: float64, %var_223: Tensor[(224), float64]) -> (Tensor[(2, 2, 6), bool], Tensor[(12, 14, 9), float64], Tensor[(2, 2, 6), float32], Tensor[(16, 7, 2), uint32], float64, Tensor[(224), float64], Tensor[(1512), float32]) {
  %404 = cast(%var_170, dtype="bool") /* ty=Tensor[(2, 2, 6), bool] */;
  %405 = shape_of(%var_169, dtype="int32") /* ty=Tensor[(3), int32] */;
  %406 = cast(%var_169, dtype="bool") /* ty=Tensor[(2, 2, 6), bool] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %408 = cast(meta[relay.Constant][22] /* ty=Tensor[(1512), float64] */, dtype="float64") /* ty=Tensor[(1512), float64] */;
  %409 = reshape(%408, newshape=[12, 14, 9]) /* ty=Tensor[(12, 14, 9), float64] */;
  %410 = cast(%var_169, dtype="float32") /* ty=Tensor[(2, 2, 6), float32] */;
  %411 = cast(%var_222, dtype="float64") /* ty=float64 */;
  %412 = cast(%var_223, dtype="float64") /* ty=Tensor[(224), float64] */;
  %413 = reshape(%411, newshape=[]) /* ty=float64 */;
  %414 = reshape(%412, newshape=[16, 7, 2]) /* ty=Tensor[(16, 7, 2), float64] */;
  %415 = cast(meta[relay.Constant][22] /* ty=Tensor[(1512), float64] */, dtype="float32") /* ty=Tensor[(1512), float32] */;
  %416 = log(%415) /* ty=Tensor[(1512), float32] */;
  %417 = cast(%416, dtype="float32") /* ty=Tensor[(1512), float32] */;
  %418 = logical_and(%406, %407) /* ty=Tensor[(2, 2, 6), bool] */;
  %419 = @func_31(%409) /* ty=Tensor[(12, 14, 9), float64] */;
  %420 = asin(%410) /* ty=Tensor[(2, 2, 6), float32] */;
  %421 = @func_94(%413, %414) /* ty=Tensor[(16, 7, 2), uint32] */;
  %422 = erf(%417) /* ty=Tensor[(1512), float32] */;
  (%418, %419, %420, %421, %var_222, %var_223, %422)
}

def @func_6756() -> (Tensor[(16, 1, 5), float64],) {
  %423 = @func_6709() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(12, 32), float32], Tensor[(12, 32), float32]) */;
  %424 = %423.0;
  (%424,)
}

def @func_9841() -> (Tensor[(16, 1, 5), float64], Tensor[(4, 6, 14), int32], Tensor[(2, 168), float32]) {
  %425 = cast(meta[relay.Constant][23] /* ty=Tensor[(2, 168), float32] */, dtype="float32") /* ty=Tensor[(2, 168), float32] */;
  %426 = reshape(%425, newshape=[4, 6, 14]) /* ty=Tensor[(4, 6, 14), float32] */;
  %427 = @func_7159() /* ty=Tensor[(16, 1, 5), float64] */;
  %428 = @func_9379(%426) /* ty=Tensor[(4, 6, 14), int32] */;
  (%427, %428, meta[relay.Constant][23] /* ty=Tensor[(2, 168), float32] */)
}

def @func_7690() -> (Tensor[(16, 1, 5), float64],) {
  %429 = @func_7549() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %430 = %429.0;
  (%430,)
}

def @func_3003(%var_2989: Tensor[(4, 10, 13), float64]) -> (Tensor[(4, 10, 13), float64],) {
  %431 = cast(%var_2989, dtype="float64") /* ty=Tensor[(4, 10, 13), float64] */;
  %432 = acosh(%431) /* ty=Tensor[(4, 10, 13), float64] */;
  (%432,)
}

def @func_9568() -> (Tensor[(16, 1, 5), float64], Tensor[(9, 12, 9), uint32], Tensor[(9, 12, 9), float32]) {
  %433 = @func_9318() /* ty=(Tensor[(16, 7, 2), uint32], Tensor[(9, 12, 9), bool], Tensor[(972), float64]) */;
  %434 = %433.1;
  %435 = cast(meta[relay.Constant][24] /* ty=Tensor[(9, 12, 9), bool] */, dtype="float32") /* ty=Tensor[(9, 12, 9), float32] */;
  %436 = shape_of(%434, dtype="int32") /* ty=Tensor[(3), int32] */;
  %437 = cast(%434, dtype="float32") /* ty=Tensor[(9, 12, 9), float32] */;
  %438 = dyn.reshape(%435, %436, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %439 = mod(%437, %438) /* ty=Tensor[(9, 12, 9), float32] */;
  %440 = cast(%434, dtype="uint32") /* ty=Tensor[(9, 12, 9), uint32] */;
  %441 = shape_of(%439, dtype="int32") /* ty=Tensor[(3), int32] */;
  %442 = cast(%439, dtype="uint32") /* ty=Tensor[(9, 12, 9), uint32] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %444 = cast(meta[relay.Constant][24] /* ty=Tensor[(9, 12, 9), bool] */, dtype="float32") /* ty=Tensor[(9, 12, 9), float32] */;
  %445 = @func_9294() /* ty=Tensor[(16, 1, 5), float64] */;
  %446 = minimum(%442, %443) /* ty=Tensor[(9, 12, 9), uint32] */;
  %447 = rsqrt(%444) /* ty=Tensor[(9, 12, 9), float32] */;
  (%445, %446, %447)
}

def @func_8377() -> (Tensor[(16, 1, 5), float64],) {
  %448 = @func_5938() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %449 = %448.0;
  (%449,)
}

def @func_6492() -> Tensor[(16, 1, 5), float64] {
  %450 = @func_5938() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %450.0
}

def @func_7234(%var_7211: Tensor[(24), bool]) -> (Tensor[(16, 1, 5), float64], Tensor[(1512), int32], Tensor[(924), bool], Tensor[(24), bool], Tensor[(448), int32], Tensor[(16, 1, 5), float64]) {
  %451 = @func_6617() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %452 = cast(meta[relay.Constant][25] /* ty=Tensor[(924), bool] */, dtype="bool") /* ty=Tensor[(924), bool] */;
  %453 = cast(%var_7211, dtype="bool") /* ty=Tensor[(24), bool] */;
  %454 = cast(meta[relay.Constant][26] /* ty=Tensor[(448), int32] */, dtype="int32") /* ty=Tensor[(448), int32] */;
  %455 = reshape(%452, newshape=[12, 7, 11]) /* ty=Tensor[(12, 7, 11), bool] */;
  %456 = reshape(%453, newshape=[24]) /* ty=Tensor[(24), bool] */;
  %457 = reshape(%454, newshape=[112, 4]) /* ty=Tensor[(112, 4), int32] */;
  %458 = @func_3983(%455, %456, %457) /* ty=(Tensor[(12, 7, 11), bool], Tensor[(12, 14, 9), float64], Tensor[(24), bool], Tensor[(224), float64], Tensor[(9, 12, 9), bool], Tensor[(972), float64], Tensor[(112, 4), int32], Tensor[(1512), int32], Tensor[(9, 12, 9), bool], Tensor[(13, 4, 13), bool]) */;
  %459 = @func_6114() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %460 = %451.0;
  %461 = %458.7;
  %462 = %459.0;
  (%460, %461, meta[relay.Constant][25] /* ty=Tensor[(924), bool] */, %var_7211, meta[relay.Constant][26] /* ty=Tensor[(448), int32] */, %462)
}

def @func_4730(%var_4715: Tensor[(24), bool], %var_4716: float64, %var_4717: Tensor[(224), float64]) -> (Tensor[(1512), float32], Tensor[(24), bool], float64, Tensor[(224), float64], Tensor[(9, 3, 10), int32]) {
  %463 = cast(%var_4715, dtype="bool") /* ty=Tensor[(24), bool] */;
  %464 = cast(%var_4715, dtype="bool") /* ty=Tensor[(24), bool] */;
  %465 = cast(%var_4716, dtype="float64") /* ty=float64 */;
  %466 = cast(%var_4717, dtype="float64") /* ty=Tensor[(224), float64] */;
  %467 = reshape(%463, newshape=[2, 2, 6]) /* ty=Tensor[(2, 2, 6), bool] */;
  %468 = reshape(%464, newshape=[2, 2, 6]) /* ty=Tensor[(2, 2, 6), bool] */;
  %469 = reshape(%465, newshape=[]) /* ty=float64 */;
  %470 = reshape(%466, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %471 = @func_236(%467, %468, %469, %470) /* ty=(Tensor[(2, 2, 6), bool], Tensor[(12, 14, 9), float64], Tensor[(2, 2, 6), float32], Tensor[(16, 7, 2), uint32], float64, Tensor[(224), float64], Tensor[(1512), float32]) */;
  %472 = cast(meta[relay.Constant][27] /* ty=Tensor[(9, 3, 10), float32] */, dtype="float32") /* ty=Tensor[(9, 3, 10), float32] */;
  %473 = sqrt(%472) /* ty=Tensor[(9, 3, 10), float32] */;
  %474 = cast(meta[relay.Constant][27] /* ty=Tensor[(9, 3, 10), float32] */, dtype="int32") /* ty=Tensor[(9, 3, 10), int32] */;
  %475 = shape_of(%473, dtype="int32") /* ty=Tensor[(3), int32] */;
  %476 = cast(%473, dtype="int32") /* ty=Tensor[(9, 3, 10), int32] */;
  %477 = dyn.reshape(%474, %475, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %478 = %471.6;
  %479 = multiply(%476, %477) /* ty=Tensor[(9, 3, 10), int32] */;
  (%478, %var_4715, %var_4716, %var_4717, %479)
}

def @func_8709() -> (Tensor[(56, 8), int32], Tensor[(13, 14, 16), float32], Tensor[(2912), float32]) {
  %480 = @func_7517() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(24), bool], Tensor[(252), float32], Tensor[(56, 8), int32]) */;
  %481 = cast(meta[relay.Constant][28] /* ty=Tensor[(2912), float32] */, dtype="float32") /* ty=Tensor[(2912), float32] */;
  %482 = reshape(%481, newshape=[13, 14, 16]) /* ty=Tensor[(13, 14, 16), float32] */;
  %483 = %480.4;
  %484 = @func_1021(%482) /* ty=Tensor[(13, 14, 16), float32] */;
  (%483, %484, meta[relay.Constant][28] /* ty=Tensor[(2912), float32] */)
}

def @func_10154(%var_10143: Tensor[(16, 7, 5), float64]) -> (Tensor[(16, 7, 5), bool],) {
  %485 = @func_6734() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64]) */;
  %486 = %485.0;
  %487 = cast(%486, dtype="bool") /* ty=Tensor[(16, 1, 5), bool] */;
  %488 = cast(%var_10143, dtype="bool") /* ty=Tensor[(16, 7, 5), bool] */;
  %489 = logical_or(%487, %488) /* ty=Tensor[(16, 7, 5), bool] */;
  (%489,)
}

def @func_7104(%var_7101: Tensor[(196), float64]) -> (Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(4, 7, 7), float64], Tensor[(196), float64]) {
  %490 = @func_5938() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %491 = cast(%var_7101, dtype="float64") /* ty=Tensor[(196), float64] */;
  %492 = reshape(%491, newshape=[4, 7, 7]) /* ty=Tensor[(4, 7, 7), float64] */;
  %493 = %490.0;
  %494 = @func_6866() /* ty=Tensor[(16, 1, 5), float64] */;
  %495 = @func_746(%492) /* ty=Tensor[(4, 7, 7), float64] */;
  (%493, %494, %495, %var_7101)
}

def @func_10527(%var_10516: float64, %var_10517: Tensor[(1, 5), float64]) -> Tensor[(1, 5), bool] {
  %496 = cast(%var_10516, dtype="bool") /* ty=bool */;
  %497 = cast(%var_10517, dtype="bool") /* ty=Tensor[(1, 5), bool] */;
  equal(%496, %497) /* ty=Tensor[(1, 5), bool] */
}

def @func_10614() -> Tensor[(24), bool] {
  %498 = @func_7517() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(24), bool], Tensor[(252), float32], Tensor[(56, 8), int32]) */;
  %498.2
}

def @func_8147(%var_8145: Tensor[(11), int8]) -> (Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(1, 11, 1), int8], Tensor[(11), int8]) {
  %499 = cast(%var_8145, dtype="int8") /* ty=Tensor[(11), int8] */;
  %500 = reshape(%499, newshape=[1, 11, 1]) /* ty=Tensor[(1, 11, 1), int8] */;
  %501 = @func_2324(%500) /* ty=(Tensor[(1, 11, 1), int8],) */;
  %502 = @func_7159() /* ty=Tensor[(16, 1, 5), float64] */;
  %503 = @func_6492() /* ty=Tensor[(16, 1, 5), float64] */;
  %504 = %501.0;
  (%502, %503, %504, %var_8145)
}

def @func_7774(%var_7754: Tensor[(560), float64]) -> (Tensor[(16, 1, 5), float64], Tensor[(6, 4, 16), float64], Tensor[(560), float64]) {
  %505 = cast(%var_7754, dtype="float64") /* ty=Tensor[(560), float64] */;
  %506 = reshape(%505, newshape=[16, 7, 5]) /* ty=Tensor[(16, 7, 5), float64] */;
  %507 = @func_6926(%506) /* ty=(Tensor[(16, 2, 5), uint64], Tensor[(6, 4, 16), float64], Tensor[(384), float64], Tensor[(16, 7, 5), float32]) */;
  %508 = @func_6866() /* ty=Tensor[(16, 1, 5), float64] */;
  %509 = %507.1;
  (%508, %509, %var_7754)
}

def @func_6734() -> (Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64]) {
  %510 = @func_6600() /* ty=Tensor[(16, 1, 5), float64] */;
  %511 = @func_6266() /* ty=Tensor[(16, 1, 5), float64] */;
  (%510, %511)
}

def @func_9379(%var_9351: Tensor[(4, 6, 14), float32]) -> Tensor[(4, 6, 14), int32] {
  %512 = cast(%var_9351, dtype="float32") /* ty=Tensor[(4, 6, 14), float32] */;
  %513 = cosh(%512) /* ty=Tensor[(4, 6, 14), float32] */;
  %514 = cast(meta[relay.Constant][29] /* ty=Tensor[(4, 6, 14), float32] */, dtype="int32") /* ty=Tensor[(4, 6, 14), int32] */;
  %515 = shape_of(%513, dtype="int32") /* ty=Tensor[(3), int32] */;
  %516 = cast(%513, dtype="int32") /* ty=Tensor[(4, 6, 14), int32] */;
  %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  maximum(%516, %517) /* ty=Tensor[(4, 6, 14), int32] */
}

def @func_8940(%var_8891: Tensor[(11, 1), int8]) -> (Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(11, 1), int8]) {
  %518 = @func_6617() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %519 = cast(%var_8891, dtype="int8") /* ty=Tensor[(11, 1), int8] */;
  %520 = reshape(%519, newshape=[11]) /* ty=Tensor[(11), int8] */;
  %521 = @func_8147(%520) /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(1, 11, 1), int8], Tensor[(11), int8]) */;
  %522 = %518.0;
  %523 = %521.1;
  (%522, %523, %var_8891)
}

def @func_672(%var_664: Tensor[(2, 5, 6), uint16], %var_665: Tensor[(2, 5, 6), uint16]) -> Tensor[(2, 5, 6), uint16] {
  %524 = cast(%var_665, dtype="uint16") /* ty=Tensor[(2, 5, 6), uint16] */;
  %525 = shape_of(%var_664, dtype="int32") /* ty=Tensor[(3), int32] */;
  %526 = cast(%var_664, dtype="uint16") /* ty=Tensor[(2, 5, 6), uint16] */;
  %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  minimum(%526, %527) /* ty=Tensor[(2, 5, 6), uint16] */
}

def @func_4244(%var_4230: Tensor[(14, 6, 6), uint32], %var_4231: Tensor[(14, 6, 6), uint32]) -> (Tensor[(14, 6, 6), bool],) {
  %528 = cast(%var_4231, dtype="bool") /* ty=Tensor[(14, 6, 6), bool] */;
  %529 = shape_of(%var_4230, dtype="int32") /* ty=Tensor[(3), int32] */;
  %530 = cast(%var_4230, dtype="bool") /* ty=Tensor[(14, 6, 6), bool] */;
  %531 = dyn.reshape(%528, %529, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %532 = greater(%530, %531) /* ty=Tensor[(14, 6, 6), bool] */;
  (%532,)
}

def @func_8276(%var_8251: Tensor[(14, 9, 3), uint16]) -> (Tensor[(14, 9, 3), uint64], Tensor[(14, 9, 3), float32]) {
  %533 = cast(%var_8251, dtype="bool") /* ty=Tensor[(14, 9, 3), bool] */;
  %534 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(14, 9, 3), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %535 = cast(meta[relay.Constant][30] /* ty=Tensor[(14, 9, 3), uint16] */, dtype="bool") /* ty=Tensor[(14, 9, 3), bool] */;
  %536 = dyn.reshape(%533, %534, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %537 = greater_equal(%535, %536) /* ty=Tensor[(14, 9, 3), bool] */;
  %538 = cast(meta[relay.Constant][30] /* ty=Tensor[(14, 9, 3), uint16] */, dtype="uint64") /* ty=Tensor[(14, 9, 3), uint64] */;
  %539 = shape_of(%537, dtype="int32") /* ty=Tensor[(3), int32] */;
  %540 = cast(%537, dtype="uint64") /* ty=Tensor[(14, 9, 3), uint64] */;
  %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %542 = cast(%537, dtype="float32") /* ty=Tensor[(14, 9, 3), float32] */;
  %543 = left_shift(%540, %541) /* ty=Tensor[(14, 9, 3), uint64] */;
  %544 = sqrt(%542) /* ty=Tensor[(14, 9, 3), float32] */;
  (%543, %544)
}

def @func_9971() -> Tensor[(56, 8), int32] {
  %545 = @func_7517() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(24), bool], Tensor[(252), float32], Tensor[(56, 8), int32]) */;
  %545.4
}

def @main(%var_11091: Tensor[(13, 11, 11), uint32]) -> (Tensor[(13, 11, 11), uint32],) {
  %546 = cast(%var_11091, dtype="uint32") /* ty=Tensor[(13, 11, 11), uint32] */;
  %547 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(13, 11, 11), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %548 = cast(meta[relay.Constant][31] /* ty=Tensor[(13, 11, 11), uint32] */, dtype="uint32") /* ty=Tensor[(13, 11, 11), uint32] */;
  %549 = dyn.reshape(%546, %547, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %550 = left_shift(%548, %549) /* ty=Tensor[(13, 11, 11), uint32] */;
  (%550,)
}

def @func_6617() -> (Tensor[(16, 1, 5), float64],) {
  %551 = @func_5938() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %552 = %551.0;
  (%552,)
}

def @func_875(%var_869: Tensor[(9, 6, 13), float64]) -> (Tensor[(9, 6, 13), float64],) {
  %553 = cast(%var_869, dtype="float64") /* ty=Tensor[(9, 6, 13), float64] */;
  %554 = erf(%553) /* ty=Tensor[(9, 6, 13), float64] */;
  (%554,)
}

def @func_7979() -> (Tensor[(12, 32), float64], Tensor[(12, 32), float64]) {
  %555 = @func_6709() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(12, 32), float32], Tensor[(12, 32), float32]) */;
  %556 = %555.1;
  %557 = cast(%556, dtype="float64") /* ty=Tensor[(12, 32), float64] */;
  %558 = cast(%556, dtype="float64") /* ty=Tensor[(12, 32), float64] */;
  %559 = asinh(%557) /* ty=Tensor[(12, 32), float64] */;
  %560 = sigmoid(%558) /* ty=Tensor[(12, 32), float64] */;
  (%559, %560)
}

def @func_746(%var_738: Tensor[(4, 7, 7), float64]) -> Tensor[(4, 7, 7), float64] {
  %561 = cast(%var_738, dtype="float64") /* ty=Tensor[(4, 7, 7), float64] */;
  %562 = sqrt(%561) /* ty=Tensor[(4, 7, 7), float64] */;
  %563 = cast(%562, dtype="float64") /* ty=Tensor[(4, 7, 7), float64] */;
  sin(%563) /* ty=Tensor[(4, 7, 7), float64] */
}

def @func_9815(%var_9797: Tensor[(60), uint16]) -> (Tensor[(16, 1, 5), float64], Tensor[(2, 5, 6), uint16], Tensor[(60), uint16], Tensor[(4, 120), bool]) {
  %564 = @func_7549() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %565 = cast(%var_9797, dtype="uint16") /* ty=Tensor[(60), uint16] */;
  %566 = cast(%var_9797, dtype="uint16") /* ty=Tensor[(60), uint16] */;
  %567 = reshape(%565, newshape=[2, 5, 6]) /* ty=Tensor[(2, 5, 6), uint16] */;
  %568 = reshape(%566, newshape=[2, 5, 6]) /* ty=Tensor[(2, 5, 6), uint16] */;
  %569 = cast(meta[relay.Constant][32] /* ty=Tensor[(4, 120), float64] */, dtype="float32") /* ty=Tensor[(4, 120), float32] */;
  %570 = exp(%569) /* ty=Tensor[(4, 120), float32] */;
  %571 = cast(%570, dtype="float64") /* ty=Tensor[(4, 120), float64] */;
  %572 = sigmoid(%571) /* ty=Tensor[(4, 120), float64] */;
  %573 = cast(meta[relay.Constant][32] /* ty=Tensor[(4, 120), float64] */, dtype="float64") /* ty=Tensor[(4, 120), float64] */;
  %574 = reshape(%573, newshape=[12, 8, 5]) /* ty=Tensor[(12, 8, 5), float64] */;
  %575 = @func_8405(%574) /* ty=(Tensor[(12, 8, 5), float32],) */;
  %576 = %575.0;
  %577 = cast(%576, dtype="uint16") /* ty=Tensor[(12, 8, 5), uint16] */;
  %578 = shape_of(%572, dtype="int32") /* ty=Tensor[(2), int32] */;
  %579 = cast(%572, dtype="uint16") /* ty=Tensor[(4, 120), uint16] */;
  %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %581 = right_shift(%579, %580) /* ty=Tensor[(4, 120), uint16] */;
  %582 = cast(%570, dtype="bool") /* ty=Tensor[(4, 120), bool] */;
  %583 = shape_of(%581, dtype="int32") /* ty=Tensor[(2), int32] */;
  %584 = cast(%581, dtype="bool") /* ty=Tensor[(4, 120), bool] */;
  %585 = dyn.reshape(%582, %583, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %586 = %564.0;
  %587 = @func_672(%567, %568) /* ty=Tensor[(2, 5, 6), uint16] */;
  %588 = logical_and(%584, %585) /* ty=Tensor[(4, 120), bool] */;
  (%586, %587, %var_9797, %588)
}

def @func_2634(%var_2627: Tensor[(9, 12, 9), float64], %var_2628: Tensor[(9, 12, 9), float64]) -> Tensor[(9, 12, 9), bool] {
  %589 = cast(%var_2628, dtype="bool") /* ty=Tensor[(9, 12, 9), bool] */;
  %590 = shape_of(%var_2627, dtype="int32") /* ty=Tensor[(3), int32] */;
  %591 = cast(%var_2627, dtype="bool") /* ty=Tensor[(9, 12, 9), bool] */;
  %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%591, %592) /* ty=Tensor[(9, 12, 9), bool] */
}

def @func_10817() -> (Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(12, 32), float32]) {
  %593 = @func_6114() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %594 = %593.0;
  %595 = @func_6492() /* ty=Tensor[(16, 1, 5), float64] */;
  %596 = @func_8007() /* ty=Tensor[(12, 32), float32] */;
  (%594, %595, %596)
}

def @func_8833(%var_8773: Tensor[(16, 3, 5), float64], %var_8791: Tensor[(24), bool], %var_8813: Tensor[(98, 2), float64]) -> (Tensor[(16, 3, 5), uint32], float64, Tensor[(24), bool], float64, Tensor[(224), float64], Tensor[(4, 7, 7), float64], Tensor[(98, 2), float64], Tensor[(16, 1, 5), float64]) {
  %597 = @func_5938() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %598 = %597.0;
  %599 = cast(%598, dtype="uint32") /* ty=Tensor[(16, 1, 5), uint32] */;
  %600 = cast(%var_8773, dtype="uint32") /* ty=Tensor[(16, 3, 5), uint32] */;
  %601 = cast(%var_8791, dtype="bool") /* ty=Tensor[(24), bool] */;
  %602 = cast(%var_8791, dtype="bool") /* ty=Tensor[(24), bool] */;
  %603 = cast(-9.39859f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %604 = cast(meta[relay.Constant][33] /* ty=Tensor[(224), float64] */, dtype="float64") /* ty=Tensor[(224), float64] */;
  %605 = reshape(%601, newshape=[2, 2, 6]) /* ty=Tensor[(2, 2, 6), bool] */;
  %606 = reshape(%602, newshape=[2, 2, 6]) /* ty=Tensor[(2, 2, 6), bool] */;
  %607 = reshape(%603, newshape=[]) /* ty=float64 */;
  %608 = reshape(%604, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %609 = @func_236(%605, %606, %607, %608) /* ty=(Tensor[(2, 2, 6), bool], Tensor[(12, 14, 9), float64], Tensor[(2, 2, 6), float32], Tensor[(16, 7, 2), uint32], float64, Tensor[(224), float64], Tensor[(1512), float32]) */;
  %610 = cast(%var_8813, dtype="float64") /* ty=Tensor[(98, 2), float64] */;
  %611 = reshape(%610, newshape=[196]) /* ty=Tensor[(196), float64] */;
  %612 = @func_7104(%611) /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(4, 7, 7), float64], Tensor[(196), float64]) */;
  %613 = @func_6734() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64]) */;
  %614 = bitwise_or(%599, %600) /* ty=Tensor[(16, 3, 5), uint32] */;
  %615 = %609.4;
  %616 = %612.2;
  %617 = %613.1;
  (%614, %615, %var_8791, -9.39859f64 /* ty=float64 */, meta[relay.Constant][33] /* ty=Tensor[(224), float64] */, %616, %var_8813, %617)
}

def @func_6600() -> Tensor[(16, 1, 5), float64] {
  %618 = @func_5938() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %618.0
}

def @func_6248(%var_6221: Tensor[(24), bool]) -> (Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(4, 7, 8), bool], Tensor[(32, 224), int16], Tensor[(24), bool], Tensor[(24), bool], float64, Tensor[(16, 14, 11), float32], Tensor[(2464), float64]) {
  %619 = @func_6114() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %620 = @func_6114() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %621 = cast(meta[relay.Constant][34] /* ty=Tensor[(32, 1), uint16] */, dtype="uint16") /* ty=Tensor[(32, 1), uint16] */;
  %622 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 224), uint16] */, dtype="uint16") /* ty=Tensor[(1, 224), uint16] */;
  %623 = reshape(%621, newshape=[4, 1, 8]) /* ty=Tensor[(4, 1, 8), uint16] */;
  %624 = reshape(%622, newshape=[4, 7, 8]) /* ty=Tensor[(4, 7, 8), uint16] */;
  %625 = @func_2693(%623, %624) /* ty=(Tensor[(4, 7, 8), bool],) */;
  %626 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 224), uint16] */, dtype="int16") /* ty=Tensor[(1, 224), int16] */;
  %627 = cast(meta[relay.Constant][34] /* ty=Tensor[(32, 1), uint16] */, dtype="int16") /* ty=Tensor[(32, 1), int16] */;
  %628 = cast(%var_6221, dtype="bool") /* ty=Tensor[(24), bool] */;
  %629 = cast(8.99978f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %630 = %625.0;
  %631 = cast(%630, dtype="float64") /* ty=Tensor[(4, 7, 8), float64] */;
  %632 = reshape(%628, newshape=[24]) /* ty=Tensor[(24), bool] */;
  %633 = reshape(%629, newshape=[]) /* ty=float64 */;
  %634 = reshape(%631, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %635 = @func_4730(%632, %633, %634) /* ty=(Tensor[(1512), float32], Tensor[(24), bool], float64, Tensor[(224), float64], Tensor[(9, 3, 10), int32]) */;
  %636 = cast(meta[relay.Constant][36] /* ty=Tensor[(2464), float64] */, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %637 = cast(meta[relay.Constant][36] /* ty=Tensor[(2464), float64] */, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %638 = reshape(%636, newshape=[16, 14, 11]) /* ty=Tensor[(16, 14, 11), float64] */;
  %639 = reshape(%637, newshape=[16, 14, 11]) /* ty=Tensor[(16, 14, 11), float64] */;
  %640 = @func_3290(%638, %639) /* ty=(Tensor[(16, 14, 11), float64], Tensor[(16, 14, 11), float32]) */;
  %641 = %619.0;
  %642 = %620.0;
  %643 = bitwise_and(%626, %627) /* ty=Tensor[(32, 224), int16] */;
  %644 = %635.1;
  %645 = %640.1;
  (%641, %642, %630, %643, %644, %var_6221, 8.99978f64 /* ty=float64 */, %645, meta[relay.Constant][36] /* ty=Tensor[(2464), float64] */)
}

def @func_9422() -> Tensor[(16, 1, 5), float64] {
  %646 = @func_6709() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(12, 32), float32], Tensor[(12, 32), float32]) */;
  %646.0
}

def @func_590(%var_542: bool, %var_543: Tensor[(1, 8, 3), bool], %var_548: Tensor[(224), float64]) -> (Tensor[(1, 8, 3), bool], Tensor[(2, 2, 6), float32], Tensor[(224), float64], Tensor[(16, 7, 2), uint32], Tensor[(12, 14, 9), float64], Tensor[(1512, 1), float64]) {
  %647 = cast(%var_542, dtype="bool") /* ty=bool */;
  %648 = cast(%var_543, dtype="bool") /* ty=Tensor[(1, 8, 3), bool] */;
  %649 = cast(%var_543, dtype="bool") /* ty=Tensor[(1, 8, 3), bool] */;
  %650 = logical_and(%647, %648) /* ty=Tensor[(1, 8, 3), bool] */;
  %651 = cast(%650, dtype="bool") /* ty=Tensor[(1, 8, 3), bool] */;
  %652 = cast(%var_542, dtype="float64") /* ty=float64 */;
  %653 = cast(%var_548, dtype="float64") /* ty=Tensor[(224), float64] */;
  %654 = reshape(%649, newshape=[2, 2, 6]) /* ty=Tensor[(2, 2, 6), bool] */;
  %655 = reshape(%651, newshape=[2, 2, 6]) /* ty=Tensor[(2, 2, 6), bool] */;
  %656 = reshape(%652, newshape=[]) /* ty=float64 */;
  %657 = reshape(%653, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %658 = @func_236(%654, %655, %656, %657) /* ty=(Tensor[(2, 2, 6), bool], Tensor[(12, 14, 9), float64], Tensor[(2, 2, 6), float32], Tensor[(16, 7, 2), uint32], float64, Tensor[(224), float64], Tensor[(1512), float32]) */;
  %659 = cast(%var_542, dtype="float64") /* ty=float64 */;
  %660 = cast(%var_548, dtype="float64") /* ty=Tensor[(224), float64] */;
  %661 = reshape(%659, newshape=[]) /* ty=float64 */;
  %662 = reshape(%660, newshape=[16, 7, 2]) /* ty=Tensor[(16, 7, 2), float64] */;
  %663 = cast(meta[relay.Constant][37] /* ty=Tensor[(1512, 1), float64] */, dtype="float64") /* ty=Tensor[(1512, 1), float64] */;
  %664 = reshape(%663, newshape=[12, 14, 9]) /* ty=Tensor[(12, 14, 9), float64] */;
  %665 = %658.2;
  %666 = @func_94(%661, %662) /* ty=Tensor[(16, 7, 2), uint32] */;
  %667 = @func_31(%664) /* ty=Tensor[(12, 14, 9), float64] */;
  (%650, %665, %var_548, %666, %667, meta[relay.Constant][37] /* ty=Tensor[(1512, 1), float64] */)
}

def @func_8405(%var_8393: Tensor[(12, 8, 5), float64]) -> (Tensor[(12, 8, 5), float32],) {
  %668 = cast(%var_8393, dtype="float64") /* ty=Tensor[(12, 8, 5), float64] */;
  %669 = tan(%668) /* ty=Tensor[(12, 8, 5), float64] */;
  %670 = cast(%669, dtype="float32") /* ty=Tensor[(12, 8, 5), float32] */;
  %671 = rsqrt(%670) /* ty=Tensor[(12, 8, 5), float32] */;
  %672 = cast(%671, dtype="float32") /* ty=Tensor[(12, 8, 5), float32] */;
  %673 = erf(%672) /* ty=Tensor[(12, 8, 5), float32] */;
  (%673,)
}

def @func_1021(%var_1014: Tensor[(13, 14, 16), float32]) -> Tensor[(13, 14, 16), float32] {
  %674 = cast(%var_1014, dtype="float32") /* ty=Tensor[(13, 14, 16), float32] */;
  atan(%674) /* ty=Tensor[(13, 14, 16), float32] */
}

def @func_10234() -> Tensor[(56, 8), int32] {
  @func_9971() /* ty=Tensor[(56, 8), int32] */
}

def @func_4258(%var_4255: Tensor[(6, 4, 16), float64]) -> Tensor[(6, 4, 16), float64] {
  %675 = cast(%var_4255, dtype="float64") /* ty=Tensor[(6, 4, 16), float64] */;
  sigmoid(%675) /* ty=Tensor[(6, 4, 16), float64] */
}

def @func_9109() -> Tensor[(16, 1, 5), float64] {
  @func_7159() /* ty=Tensor[(16, 1, 5), float64] */
}

def @func_9696() -> Tensor[(16, 1, 5), float64] {
  %676 = @func_7549() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %676.0
}

def @func_8064() -> (Tensor[(16, 1, 5), float64],) {
  %677 = @func_6866() /* ty=Tensor[(16, 1, 5), float64] */;
  (%677,)
}

def @func_8670() -> (Tensor[(16, 1, 5), float64], Tensor[(6, 84), uint32], Tensor[(14, 6, 6), int8]) {
  %678 = @func_6734() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64]) */;
  %679 = cast(meta[relay.Constant][38] /* ty=Tensor[(6, 84), uint32] */, dtype="uint32") /* ty=Tensor[(6, 84), uint32] */;
  %680 = cast(meta[relay.Constant][38] /* ty=Tensor[(6, 84), uint32] */, dtype="uint32") /* ty=Tensor[(6, 84), uint32] */;
  %681 = reshape(%679, newshape=[14, 6, 6]) /* ty=Tensor[(14, 6, 6), uint32] */;
  %682 = reshape(%680, newshape=[14, 6, 6]) /* ty=Tensor[(14, 6, 6), uint32] */;
  %683 = @func_4244(%681, %682) /* ty=(Tensor[(14, 6, 6), bool],) */;
  %684 = %683.0;
  %685 = cast(meta[relay.Constant][39] /* ty=Tensor[(14, 6, 6), bool] */, dtype="int8") /* ty=Tensor[(14, 6, 6), int8] */;
  %686 = shape_of(%684, dtype="int32") /* ty=Tensor[(3), int32] */;
  %687 = cast(%684, dtype="int8") /* ty=Tensor[(14, 6, 6), int8] */;
  %688 = dyn.reshape(%685, %686, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %689 = %678.0;
  %690 = subtract(%687, %688) /* ty=Tensor[(14, 6, 6), int8] */;
  (%689, meta[relay.Constant][38] /* ty=Tensor[(6, 84), uint32] */, %690)
}

def @func_7415(%var_7372: Tensor[(2, 11, 14), int16], %var_7373: Tensor[(2, 11, 14), int16]) -> Tensor[(2, 11, 14), float32] {
  %691 = cast(%var_7373, dtype="bool") /* ty=Tensor[(2, 11, 14), bool] */;
  %692 = shape_of(%var_7372, dtype="int32") /* ty=Tensor[(3), int32] */;
  %693 = cast(%var_7372, dtype="bool") /* ty=Tensor[(2, 11, 14), bool] */;
  %694 = dyn.reshape(%691, %692, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %695 = less(%693, %694) /* ty=Tensor[(2, 11, 14), bool] */;
  %696 = cast(%695, dtype="float64") /* ty=Tensor[(2, 11, 14), float64] */;
  %697 = atanh(%696) /* ty=Tensor[(2, 11, 14), float64] */;
  %698 = cast(%697, dtype="float32") /* ty=Tensor[(2, 11, 14), float32] */;
  asinh(%698) /* ty=Tensor[(2, 11, 14), float32] */
}

def @func_7517() -> (Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(24), bool], Tensor[(252), float32], Tensor[(56, 8), int32]) {
  %699 = cast(meta[relay.Constant][40] /* ty=Tensor[(24), bool] */, dtype="bool") /* ty=Tensor[(24), bool] */;
  %700 = reshape(%699, newshape=[24]) /* ty=Tensor[(24), bool] */;
  %701 = @func_7234(%700) /* ty=(Tensor[(16, 1, 5), float64], Tensor[(1512), int32], Tensor[(924), bool], Tensor[(24), bool], Tensor[(448), int32], Tensor[(16, 1, 5), float64]) */;
  %702 = cast(meta[relay.Constant][41] /* ty=Tensor[(56, 8), int32] */, dtype="int32") /* ty=Tensor[(56, 8), int32] */;
  %703 = cast(meta[relay.Constant][40] /* ty=Tensor[(24), bool] */, dtype="bool") /* ty=Tensor[(24), bool] */;
  %704 = reshape(%702, newshape=[14, 16, 2]) /* ty=Tensor[(14, 16, 2), int32] */;
  %705 = reshape(%703, newshape=[2, 12]) /* ty=Tensor[(2, 12), bool] */;
  %706 = @func_3396(%704, %705) /* ty=(Tensor[(14, 16, 2), int32], Tensor[(13, 4, 13), float64], Tensor[(252), float32], Tensor[(224), uint16], Tensor[(2, 12), bool]) */;
  %707 = @func_7159() /* ty=Tensor[(16, 1, 5), float64] */;
  %708 = %701.5;
  %709 = %706.2;
  (%707, %708, meta[relay.Constant][40] /* ty=Tensor[(24), bool] */, %709, meta[relay.Constant][41] /* ty=Tensor[(56, 8), int32] */)
}

def @func_5938() -> (Tensor[(16, 1, 5), float64],) {
  %710 = cast(meta[relay.Constant][42] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %711 = cast(meta[relay.Constant][43] /* ty=Tensor[(16, 1, 5), uint32] */, dtype="uint32") /* ty=Tensor[(16, 1, 5), uint32] */;
  %712 = left_shift(%710, %711) /* ty=Tensor[(16, 1, 5), uint32] */;
  %713 = cast(%712, dtype="float64") /* ty=Tensor[(16, 1, 5), float64] */;
  %714 = cos(%713) /* ty=Tensor[(16, 1, 5), float64] */;
  (%714,)
}

def @func_9013() -> (Tensor[(12, 32), float64],) {
  %715 = @func_7979() /* ty=(Tensor[(12, 32), float64], Tensor[(12, 32), float64]) */;
  %716 = %715.1;
  (%716,)
}

def @func_9978() -> (Tensor[(16, 1, 5), float64],) {
  %717 = @func_8377() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %718 = %717.0;
  (%718,)
}

def @func_9605() -> Tensor[(16, 7, 2), uint32] {
  %719 = @func_9318() /* ty=(Tensor[(16, 7, 2), uint32], Tensor[(9, 12, 9), bool], Tensor[(972), float64]) */;
  %719.0
}

def @func_10061() -> (Tensor[(16, 1, 5), float64],) {
  %720 = @func_6600() /* ty=Tensor[(16, 1, 5), float64] */;
  (%720,)
}

def @func_9294() -> Tensor[(16, 1, 5), float64] {
  @func_6866() /* ty=Tensor[(16, 1, 5), float64] */
}

def @func_31(%var_11: Tensor[(12, 14, 9), float64]) -> Tensor[(12, 14, 9), float64] {
  %721 = cast(%var_11, dtype="float64") /* ty=Tensor[(12, 14, 9), float64] */;
  sin(%721) /* ty=Tensor[(12, 14, 9), float64] */
}

def @func_3396(%var_3379: Tensor[(14, 16, 2), int32], %var_3394: Tensor[(2, 12), bool]) -> (Tensor[(14, 16, 2), int32], Tensor[(13, 4, 13), float64], Tensor[(252), float32], Tensor[(224), uint16], Tensor[(2, 12), bool]) {
  %722 = cast(-1 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %723 = cast(%var_3379, dtype="int32") /* ty=Tensor[(14, 16, 2), int32] */;
  %724 = cast(meta[relay.Constant][44] /* ty=Tensor[(252), float32] */, dtype="float32") /* ty=Tensor[(252), float32] */;
  %725 = cast(meta[relay.Constant][45] /* ty=Tensor[(224), uint16] */, dtype="uint16") /* ty=Tensor[(224), uint16] */;
  %726 = cast(%var_3394, dtype="bool") /* ty=Tensor[(2, 12), bool] */;
  %727 = reshape(%724, newshape=[6, 3, 14]) /* ty=Tensor[(6, 3, 14), float32] */;
  %728 = reshape(%725, newshape=[224]) /* ty=Tensor[(224), uint16] */;
  %729 = reshape(%726, newshape=[24]) /* ty=Tensor[(24), bool] */;
  %730 = @func_2859(%727, %728, %729) /* ty=(Tensor[(6, 3, 14), float64], Tensor[(4, 7, 8), bool], Tensor[(32), uint16], Tensor[(224), uint16], Tensor[(13, 4, 13), float64], float64, Tensor[(676), float64], Tensor[(16, 7, 2), uint32], Tensor[(260), int32], Tensor[(24), bool]) */;
  %731 = bitwise_and(%722, %723) /* ty=Tensor[(14, 16, 2), int32] */;
  %732 = %730.4;
  (%731, %732, meta[relay.Constant][44] /* ty=Tensor[(252), float32] */, meta[relay.Constant][45] /* ty=Tensor[(224), uint16] */, %var_3394)
}

def @func_9937(%var_9923: Tensor[(585), float32]) -> (Tensor[(56, 8), float32], Tensor[(585), uint16], Tensor[(16, 1, 5), float64]) {
  %733 = @func_8709() /* ty=(Tensor[(56, 8), int32], Tensor[(13, 14, 16), float32], Tensor[(2912), float32]) */;
  %734 = %733.0;
  %735 = cast(%734, dtype="float32") /* ty=Tensor[(56, 8), float32] */;
  %736 = cast(%var_9923, dtype="float32") /* ty=Tensor[(585), float32] */;
  %737 = reshape(%736, newshape=[13, 15, 3]) /* ty=Tensor[(13, 15, 3), float32] */;
  %738 = @func_7854(%737) /* ty=(Tensor[(13, 15, 3), float32], Tensor[(4, 7, 7), float64], Tensor[(196), float64]) */;
  %739 = %738.0;
  %740 = cast(%739, dtype="uint16") /* ty=Tensor[(13, 15, 3), uint16] */;
  %741 = shape_of(%var_9923, dtype="int32") /* ty=Tensor[(1), int32] */;
  %742 = cast(%var_9923, dtype="uint16") /* ty=Tensor[(585), uint16] */;
  %743 = dyn.reshape(%740, %741, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %744 = log10(%735) /* ty=Tensor[(56, 8), float32] */;
  %745 = subtract(%742, %743) /* ty=Tensor[(585), uint16] */;
  %746 = @func_9109() /* ty=Tensor[(16, 1, 5), float64] */;
  (%744, %745, %746)
}

def @func_3290(%var_3277: Tensor[(16, 14, 11), float64], %var_3278: Tensor[(16, 14, 11), float64]) -> (Tensor[(16, 14, 11), float64], Tensor[(16, 14, 11), float32]) {
  %747 = cast(%var_3278, dtype="float64") /* ty=Tensor[(16, 14, 11), float64] */;
  %748 = shape_of(%var_3277, dtype="int32") /* ty=Tensor[(3), int32] */;
  %749 = cast(%var_3277, dtype="float64") /* ty=Tensor[(16, 14, 11), float64] */;
  %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %751 = cast(%var_3277, dtype="float64") /* ty=Tensor[(16, 14, 11), float64] */;
  %752 = erf(%751) /* ty=Tensor[(16, 14, 11), float64] */;
  %753 = cast(%752, dtype="float32") /* ty=Tensor[(16, 14, 11), float32] */;
  %754 = divide(%749, %750) /* ty=Tensor[(16, 14, 11), float64] */;
  %755 = exp(%753) /* ty=Tensor[(16, 14, 11), float32] */;
  (%754, %755)
}

def @func_10214() -> (Tensor[(16, 1, 5), float64], Tensor[(16, ?, 5), uint8]) {
  %756 = @func_6734() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64]) */;
  %757 = %756.0;
  %758 = @func_6734() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64]) */;
  %759 = %758.1;
  %760 = cast(%759, dtype="uint8") /* ty=Tensor[(16, 1, 5), uint8] */;
  %761 = shape_of(%757, dtype="int32") /* ty=Tensor[(3), int32] */;
  %762 = cast(%757, dtype="uint8") /* ty=Tensor[(16, 1, 5), uint8] */;
  %763 = dyn.reshape(%760, %761, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %764 = @func_7655() /* ty=Tensor[(16, 1, 5), float64] */;
  %765 = maximum(%762, %763) /* ty=Tensor[(16, ?, 5), uint8] */;
  (%764, %765)
}

def @func_2721(%var_2710: float32, %var_2711: Tensor[(3, 5, 9), float32]) -> Tensor[(3, 5, 9), float32] {
  %766 = cast(%var_2710, dtype="float32") /* ty=float32 */;
  %767 = cast(%var_2711, dtype="float32") /* ty=Tensor[(3, 5, 9), float32] */;
  floor_mod(%766, %767) /* ty=Tensor[(3, 5, 9), float32] */
}

def @func_7360() -> (Tensor[(16, 1, 5), float64], Tensor[(16, 7, 2), uint32], float64, Tensor[(224), float64], Tensor[(16, 1, 5), float64]) {
  %768 = @func_6709() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(12, 32), float32], Tensor[(12, 32), float32]) */;
  %769 = cast(-1.32598f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %770 = cast(meta[relay.Constant][46] /* ty=Tensor[(224), float64] */, dtype="float64") /* ty=Tensor[(224), float64] */;
  %771 = reshape(%769, newshape=[]) /* ty=float64 */;
  %772 = reshape(%770, newshape=[16, 7, 2]) /* ty=Tensor[(16, 7, 2), float64] */;
  %773 = %768.0;
  %774 = @func_94(%771, %772) /* ty=Tensor[(16, 7, 2), uint32] */;
  %775 = @func_6266() /* ty=Tensor[(16, 1, 5), float64] */;
  (%773, %774, -1.32598f64 /* ty=float64 */, meta[relay.Constant][46] /* ty=Tensor[(224), float64] */, %775)
}

def @func_8025() -> (Tensor[(16, ?, 5), bool], Tensor[(12, 32), float32]) {
  %776 = @func_6266() /* ty=Tensor[(16, 1, 5), float64] */;
  %777 = cast(meta[relay.Constant][47] /* ty=Tensor[(16, 1, 5), float64] */, dtype="bool") /* ty=Tensor[(16, 1, 5), bool] */;
  %778 = shape_of(%776, dtype="int32") /* ty=Tensor[(3), int32] */;
  %779 = cast(%776, dtype="bool") /* ty=Tensor[(16, 1, 5), bool] */;
  %780 = dyn.reshape(%777, %778, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %781 = greater_equal(%779, %780) /* ty=Tensor[(16, ?, 5), bool] */;
  %782 = @func_8007() /* ty=Tensor[(12, 32), float32] */;
  (%781, %782)
}

def @func_9466() -> (Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64]) {
  %783 = @func_9422() /* ty=Tensor[(16, 1, 5), float64] */;
  %784 = @func_9294() /* ty=Tensor[(16, 1, 5), float64] */;
  (%783, %784)
}

def @func_9278(%var_9255: Tensor[(16, 4, 5), float64]) -> (Tensor[(16, 4, 5), bool],) {
  %785 = @func_6617() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %786 = %785.0;
  %787 = cast(%786, dtype="bool") /* ty=Tensor[(16, 1, 5), bool] */;
  %788 = cast(%var_9255, dtype="bool") /* ty=Tensor[(16, 4, 5), bool] */;
  %789 = less(%787, %788) /* ty=Tensor[(16, 4, 5), bool] */;
  (%789,)
}

def @func_5042(%var_5019: Tensor[(11, 16, 1), float32], %var_5038: Tensor[(24), bool], %var_5040: Tensor[(1, 224), float64]) -> (Tensor[(11, 16, 1), float32], float64, Tensor[(24), bool], float64, Tensor[(1, 224), float64]) {
  %790 = cast(%var_5019, dtype="float32") /* ty=Tensor[(11, 16, 1), float32] */;
  %791 = atan(%790) /* ty=Tensor[(11, 16, 1), float32] */;
  %792 = cast(%791, dtype="float32") /* ty=Tensor[(11, 16, 1), float32] */;
  %793 = cast(%var_5038, dtype="bool") /* ty=Tensor[(24), bool] */;
  %794 = cast(9.52509f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %795 = cast(%var_5040, dtype="float64") /* ty=Tensor[(1, 224), float64] */;
  %796 = reshape(%793, newshape=[24]) /* ty=Tensor[(24), bool] */;
  %797 = reshape(%794, newshape=[]) /* ty=float64 */;
  %798 = reshape(%795, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %799 = @func_4730(%796, %797, %798) /* ty=(Tensor[(1512), float32], Tensor[(24), bool], float64, Tensor[(224), float64], Tensor[(9, 3, 10), int32]) */;
  %800 = erf(%792) /* ty=Tensor[(11, 16, 1), float32] */;
  %801 = %799.2;
  (%800, %801, %var_5038, 9.52509f64 /* ty=float64 */, %var_5040)
}

def @func_8229() -> (Tensor[(16, 1, 5), float64],) {
  %802 = @func_6600() /* ty=Tensor[(16, 1, 5), float64] */;
  (%802,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_9278(%var_9255: Tensor[(16, 4, 5), float64]) -> (Tensor[(16, 4, 5), bool],) {
  %0 = @func_6617() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %1 = %0.0;
  %2 = cast(%1, dtype="bool") /* ty=Tensor[(16, 1, 5), bool] */;
  %3 = cast(%var_9255, dtype="bool") /* ty=Tensor[(16, 4, 5), bool] */;
  %4 = less(%2, %3) /* ty=Tensor[(16, 4, 5), bool] */;
  (%4,)
}

def @func_8279(%var_8277: Tensor[(14, 9, 3), uint16]) -> (Tensor[(14, 9, 3), uint64], Tensor[(14, 9, 3), float32]) {
  @func_8276(%var_8277) /* ty=(Tensor[(14, 9, 3), uint64], Tensor[(14, 9, 3), float32]) */
}

def @func_5939() -> (Tensor[(16, 1, 5), float64],) {
  %10 = fn () -> (Tensor[(16, 1, 5), float64],) {
    %5 = cast(meta[relay.Constant][0] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %6 = cast(meta[relay.Constant][1] /* ty=Tensor[(16, 1, 5), uint32] */, dtype="uint32") /* ty=Tensor[(16, 1, 5), uint32] */;
    %7 = left_shift(%5, %6) /* ty=Tensor[(16, 1, 5), uint32] */;
    %8 = cast(%7, dtype="float64") /* ty=Tensor[(16, 1, 5), float64] */;
    %9 = cos(%8) /* ty=Tensor[(16, 1, 5), float64] */;
    (%9,)
  };
  %10() /* ty=(Tensor[(16, 1, 5), float64],) */
}

def @func_590(%var_542: bool, %var_543: Tensor[(1, 8, 3), bool], %var_548: Tensor[(224), float64]) -> (Tensor[(1, 8, 3), bool], Tensor[(2, 2, 6), float32], Tensor[(224), float64], Tensor[(16, 7, 2), uint32], Tensor[(12, 14, 9), float64], Tensor[(1512, 1), float64]) {
  %11 = cast(%var_542, dtype="bool") /* ty=bool */;
  %12 = cast(%var_543, dtype="bool") /* ty=Tensor[(1, 8, 3), bool] */;
  %13 = cast(%var_543, dtype="bool") /* ty=Tensor[(1, 8, 3), bool] */;
  %14 = logical_and(%11, %12) /* ty=Tensor[(1, 8, 3), bool] */;
  %15 = cast(%14, dtype="bool") /* ty=Tensor[(1, 8, 3), bool] */;
  %16 = cast(%var_542, dtype="float64") /* ty=float64 */;
  %17 = cast(%var_548, dtype="float64") /* ty=Tensor[(224), float64] */;
  %18 = reshape(%13, newshape=[2, 2, 6]) /* ty=Tensor[(2, 2, 6), bool] */;
  %19 = reshape(%15, newshape=[2, 2, 6]) /* ty=Tensor[(2, 2, 6), bool] */;
  %20 = reshape(%16, newshape=[]) /* ty=float64 */;
  %21 = reshape(%17, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %22 = @func_236(%18, %19, %20, %21) /* ty=(Tensor[(2, 2, 6), bool], Tensor[(12, 14, 9), float64], Tensor[(2, 2, 6), float32], Tensor[(16, 7, 2), uint32], float64, Tensor[(224), float64], Tensor[(1512), float32]) */;
  %23 = cast(%var_542, dtype="float64") /* ty=float64 */;
  %24 = cast(%var_548, dtype="float64") /* ty=Tensor[(224), float64] */;
  %25 = reshape(%23, newshape=[]) /* ty=float64 */;
  %26 = reshape(%24, newshape=[16, 7, 2]) /* ty=Tensor[(16, 7, 2), float64] */;
  %27 = cast(meta[relay.Constant][2] /* ty=Tensor[(1512, 1), float64] */, dtype="float64") /* ty=Tensor[(1512, 1), float64] */;
  %28 = reshape(%27, newshape=[12, 14, 9]) /* ty=Tensor[(12, 14, 9), float64] */;
  %29 = %22.2;
  %30 = @func_94(%25, %26) /* ty=Tensor[(16, 7, 2), uint32] */;
  %31 = @func_31(%28) /* ty=Tensor[(12, 14, 9), float64] */;
  (%14, %29, %var_548, %30, %31, meta[relay.Constant][2] /* ty=Tensor[(1512, 1), float64] */)
}

def @func_10215() -> (Tensor[(16, 1, 5), float64], Tensor[(16, ?, 5), uint8]) {
  %42 = fn () -> (Tensor[(16, 1, 5), float64], Tensor[(16, ?, 5), uint8]) {
    %32 = @func_6734() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64]) */;
    %33 = %32.0;
    %34 = @func_6734() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64]) */;
    %35 = %34.1;
    %36 = cast(%35, dtype="uint8") /* ty=Tensor[(16, 1, 5), uint8] */;
    %37 = shape_of(%33, dtype="int32") /* ty=Tensor[(3), int32] */;
    %38 = cast(%33, dtype="uint8") /* ty=Tensor[(16, 1, 5), uint8] */;
    %39 = dyn.reshape(%36, %37, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %40 = @func_7655() /* ty=Tensor[(16, 1, 5), float64] */;
    %41 = maximum(%38, %39) /* ty=Tensor[(16, ?, 5), uint8] */;
    (%40, %41)
  };
  %42() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, ?, 5), uint8]) */
}

def @func_10616() -> Tensor[(24), bool] {
  @func_10614() /* ty=Tensor[(24), bool] */
}

def @func_7236(%var_7235: Tensor[(24), bool]) -> (Tensor[(16, 1, 5), float64], Tensor[(1512), int32], Tensor[(924), bool], Tensor[(24), bool], Tensor[(448), int32], Tensor[(16, 1, 5), float64]) {
  %55 = fn (%var_7211: Tensor[(24), bool]) -> (Tensor[(16, 1, 5), float64], Tensor[(1512), int32], Tensor[(924), bool], Tensor[(24), bool], Tensor[(448), int32], Tensor[(16, 1, 5), float64]) {
    %43 = @func_6617() /* ty=(Tensor[(16, 1, 5), float64],) */;
    %44 = cast(meta[relay.Constant][3] /* ty=Tensor[(924), bool] */, dtype="bool") /* ty=Tensor[(924), bool] */;
    %45 = cast(%var_7211, dtype="bool") /* ty=Tensor[(24), bool] */;
    %46 = cast(meta[relay.Constant][4] /* ty=Tensor[(448), int32] */, dtype="int32") /* ty=Tensor[(448), int32] */;
    %47 = reshape(%44, newshape=[12, 7, 11]) /* ty=Tensor[(12, 7, 11), bool] */;
    %48 = reshape(%45, newshape=[24]) /* ty=Tensor[(24), bool] */;
    %49 = reshape(%46, newshape=[112, 4]) /* ty=Tensor[(112, 4), int32] */;
    %50 = @func_3983(%47, %48, %49) /* ty=(Tensor[(12, 7, 11), bool], Tensor[(12, 14, 9), float64], Tensor[(24), bool], Tensor[(224), float64], Tensor[(9, 12, 9), bool], Tensor[(972), float64], Tensor[(112, 4), int32], Tensor[(1512), int32], Tensor[(9, 12, 9), bool], Tensor[(13, 4, 13), bool]) */;
    %51 = @func_6114() /* ty=(Tensor[(16, 1, 5), float64],) */;
    %52 = %43.0;
    %53 = %50.7;
    %54 = %51.0;
    (%52, %53, meta[relay.Constant][3] /* ty=Tensor[(924), bool] */, %var_7211, meta[relay.Constant][4] /* ty=Tensor[(448), int32] */, %54)
  };
  %55(%var_7235) /* ty=(Tensor[(16, 1, 5), float64], Tensor[(1512), int32], Tensor[(924), bool], Tensor[(24), bool], Tensor[(448), int32], Tensor[(16, 1, 5), float64]) */
}

def @func_10527(%var_10516: float64, %var_10517: Tensor[(1, 5), float64]) -> Tensor[(1, 5), bool] {
  %56 = cast(%var_10516, dtype="bool") /* ty=bool */;
  %57 = cast(%var_10517, dtype="bool") /* ty=Tensor[(1, 5), bool] */;
  equal(%56, %57) /* ty=Tensor[(1, 5), bool] */
}

def @func_7692() -> (Tensor[(16, 1, 5), float64],) {
  @func_7690() /* ty=(Tensor[(16, 1, 5), float64],) */
}

def @func_6251(%var_6249: Tensor[(24), bool]) -> (Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(4, 7, 8), bool], Tensor[(32, 224), int16], Tensor[(24), bool], Tensor[(24), bool], float64, Tensor[(16, 14, 11), float32], Tensor[(2464), float64]) {
  @func_6248(%var_6249) /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(4, 7, 8), bool], Tensor[(32, 224), int16], Tensor[(24), bool], Tensor[(24), bool], float64, Tensor[(16, 14, 11), float32], Tensor[(2464), float64]) */
}

def @func_4244(%var_4230: Tensor[(14, 6, 6), uint32], %var_4231: Tensor[(14, 6, 6), uint32]) -> (Tensor[(14, 6, 6), bool],) {
  %58 = cast(%var_4231, dtype="bool") /* ty=Tensor[(14, 6, 6), bool] */;
  %59 = shape_of(%var_4230, dtype="int32") /* ty=Tensor[(3), int32] */;
  %60 = cast(%var_4230, dtype="bool") /* ty=Tensor[(14, 6, 6), bool] */;
  %61 = dyn.reshape(%58, %59, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %62 = greater(%60, %61) /* ty=Tensor[(14, 6, 6), bool] */;
  (%62,)
}

def @func_9697() -> Tensor[(16, 1, 5), float64] {
  %64 = fn () -> Tensor[(16, 1, 5), float64] {
    %63 = @func_7549() /* ty=(Tensor[(16, 1, 5), float64],) */;
    %63.0
  };
  %64() /* ty=Tensor[(16, 1, 5), float64] */
}

def @func_7854(%var_7844: Tensor[(13, 15, 3), float32]) -> (Tensor[(13, 15, 3), float32], Tensor[(4, 7, 7), float64], Tensor[(196), float64]) {
  %65 = cast(%var_7844, dtype="float32") /* ty=Tensor[(13, 15, 3), float32] */;
  %66 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(13, 15, 3), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %67 = cast(meta[relay.Constant][5] /* ty=Tensor[(13, 15, 3), float32] */, dtype="float32") /* ty=Tensor[(13, 15, 3), float32] */;
  %68 = dyn.reshape(%65, %66, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %69 = cast(meta[relay.Constant][6] /* ty=Tensor[(196), float64] */, dtype="float64") /* ty=Tensor[(196), float64] */;
  %70 = reshape(%69, newshape=[196]) /* ty=Tensor[(196), float64] */;
  %71 = @func_7104(%70) /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(4, 7, 7), float64], Tensor[(196), float64]) */;
  %72 = divide(%67, %68) /* ty=Tensor[(13, 15, 3), float32] */;
  %73 = %71.2;
  (%72, %73, meta[relay.Constant][6] /* ty=Tensor[(196), float64] */)
}

def @func_2634(%var_2627: Tensor[(9, 12, 9), float64], %var_2628: Tensor[(9, 12, 9), float64]) -> Tensor[(9, 12, 9), bool] {
  %74 = cast(%var_2628, dtype="bool") /* ty=Tensor[(9, 12, 9), bool] */;
  %75 = shape_of(%var_2627, dtype="int32") /* ty=Tensor[(3), int32] */;
  %76 = cast(%var_2627, dtype="bool") /* ty=Tensor[(9, 12, 9), bool] */;
  %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%76, %77) /* ty=Tensor[(9, 12, 9), bool] */
}

def @func_9673() -> (Tensor[(16, 1, 5), float64], Tensor[(16, 9, 5), uint8], Tensor[(720), float64], Tensor[(9, 12, 9), bool], Tensor[(16, 1, 5), float64]) {
  %87 = fn () -> (Tensor[(16, 1, 5), float64], Tensor[(16, 9, 5), uint8], Tensor[(720), float64], Tensor[(9, 12, 9), bool], Tensor[(16, 1, 5), float64]) {
    %78 = @func_6756() /* ty=(Tensor[(16, 1, 5), float64],) */;
    %79 = cast(meta[relay.Constant][7] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
    %80 = reshape(%79, newshape=[16, 9, 5]) /* ty=Tensor[(16, 9, 5), float64] */;
    %81 = @func_9318() /* ty=(Tensor[(16, 7, 2), uint32], Tensor[(9, 12, 9), bool], Tensor[(972), float64]) */;
    %82 = @func_8457() /* ty=(Tensor[(16, 1, 5), float64],) */;
    %83 = %78.0;
    %84 = @func_6547(%80) /* ty=Tensor[(16, 9, 5), uint8] */;
    %85 = %81.1;
    %86 = %82.0;
    (%83, %84, meta[relay.Constant][7] /* ty=Tensor[(720), float64] */, %85, %86)
  };
  %87() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 9, 5), uint8], Tensor[(720), float64], Tensor[(9, 12, 9), bool], Tensor[(16, 1, 5), float64]) */
}

def @func_3294(%var_3292: Tensor[(16, 14, 11), float64], %var_3293: Tensor[(16, 14, 11), float64]) -> (Tensor[(16, 14, 11), float64], Tensor[(16, 14, 11), float32]) {
  @func_3290(%var_3292, %var_3293) /* ty=(Tensor[(16, 14, 11), float64], Tensor[(16, 14, 11), float32]) */
}

def @func_10531(%var_10529: float64, %var_10530: Tensor[(1, 5), float64]) -> Tensor[(1, 5), bool] {
  @func_10527(%var_10529, %var_10530) /* ty=Tensor[(1, 5), bool] */
}

def @func_1176(%var_1174: float64, %var_1175: Tensor[(13, 4, 13), float64]) -> (Tensor[(13, 4, 13), float64],) {
  @func_1172(%var_1174, %var_1175) /* ty=(Tensor[(13, 4, 13), float64],) */
}

def @func_7857(%var_7855: Tensor[(13, 15, 3), float32]) -> (Tensor[(13, 15, 3), float32], Tensor[(4, 7, 7), float64], Tensor[(196), float64]) {
  @func_7854(%var_7855) /* ty=(Tensor[(13, 15, 3), float32], Tensor[(4, 7, 7), float64], Tensor[(196), float64]) */
}

def @func_9015() -> (Tensor[(12, 32), float64],) {
  @func_9013() /* ty=(Tensor[(12, 32), float64],) */
}

def @func_6709() -> (Tensor[(16, 1, 5), float64], Tensor[(12, 32), float32], Tensor[(12, 32), float32]) {
  %88 = @func_6114() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %89 = cast(meta[relay.Constant][8] /* ty=Tensor[(12, 32), float64] */, dtype="float64") /* ty=Tensor[(12, 32), float64] */;
  %90 = reshape(%89, newshape=[6, 4, 16]) /* ty=Tensor[(6, 4, 16), float64] */;
  %91 = @func_4258(%90) /* ty=Tensor[(6, 4, 16), float64] */;
  %92 = cast(%91, dtype="bool") /* ty=Tensor[(6, 4, 16), bool] */;
  %93 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(12, 32), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %94 = cast(meta[relay.Constant][8] /* ty=Tensor[(12, 32), float64] */, dtype="bool") /* ty=Tensor[(12, 32), bool] */;
  %95 = dyn.reshape(%92, %93, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %96 = greater(%94, %95) /* ty=Tensor[(12, 32), bool] */;
  %97 = cast(%96, dtype="float32") /* ty=Tensor[(12, 32), float32] */;
  %98 = cast(meta[relay.Constant][8] /* ty=Tensor[(12, 32), float64] */, dtype="float32") /* ty=Tensor[(12, 32), float32] */;
  %99 = %88.0;
  %100 = atanh(%97) /* ty=Tensor[(12, 32), float32] */;
  %101 = log2(%98) /* ty=Tensor[(12, 32), float32] */;
  (%99, %100, %101)
}

def @func_7360() -> (Tensor[(16, 1, 5), float64], Tensor[(16, 7, 2), uint32], float64, Tensor[(224), float64], Tensor[(16, 1, 5), float64]) {
  %102 = @func_6709() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(12, 32), float32], Tensor[(12, 32), float32]) */;
  %103 = cast(-1.32598f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %104 = cast(meta[relay.Constant][9] /* ty=Tensor[(224), float64] */, dtype="float64") /* ty=Tensor[(224), float64] */;
  %105 = reshape(%103, newshape=[]) /* ty=float64 */;
  %106 = reshape(%104, newshape=[16, 7, 2]) /* ty=Tensor[(16, 7, 2), float64] */;
  %107 = %102.0;
  %108 = @func_94(%105, %106) /* ty=Tensor[(16, 7, 2), uint32] */;
  %109 = @func_6266() /* ty=Tensor[(16, 1, 5), float64] */;
  (%107, %108, -1.32598f64 /* ty=float64 */, meta[relay.Constant][9] /* ty=Tensor[(224), float64] */, %109)
}

def @func_9422() -> Tensor[(16, 1, 5), float64] {
  %110 = @func_6709() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(12, 32), float32], Tensor[(12, 32), float32]) */;
  %110.0
}

def @func_10154(%var_10143: Tensor[(16, 7, 5), float64]) -> (Tensor[(16, 7, 5), bool],) {
  %111 = @func_6734() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64]) */;
  %112 = %111.0;
  %113 = cast(%112, dtype="bool") /* ty=Tensor[(16, 1, 5), bool] */;
  %114 = cast(%var_10143, dtype="bool") /* ty=Tensor[(16, 7, 5), bool] */;
  %115 = logical_or(%113, %114) /* ty=Tensor[(16, 7, 5), bool] */;
  (%115,)
}

def @func_7549() -> (Tensor[(16, 1, 5), float64],) {
  %116 = @func_6756() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %117 = %116.0;
  (%117,)
}

def @func_10234() -> Tensor[(56, 8), int32] {
  @func_9971() /* ty=Tensor[(56, 8), int32] */
}

def @func_6404(%var_6398: Tensor[(224), float64]) -> (Tensor[(16, 1, 5), float64], Tensor[(16, 7, 2), uint32], Tensor[(24), bool], float64, Tensor[(224), float64]) {
  %118 = @func_5938() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %119 = cast(meta[relay.Constant][10] /* ty=Tensor[(24), bool] */, dtype="bool") /* ty=Tensor[(24), bool] */;
  %120 = cast(meta[relay.Constant][10] /* ty=Tensor[(24), bool] */, dtype="bool") /* ty=Tensor[(24), bool] */;
  %121 = cast(-2.10176f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %122 = cast(%var_6398, dtype="float64") /* ty=Tensor[(224), float64] */;
  %123 = reshape(%119, newshape=[2, 2, 6]) /* ty=Tensor[(2, 2, 6), bool] */;
  %124 = reshape(%120, newshape=[2, 2, 6]) /* ty=Tensor[(2, 2, 6), bool] */;
  %125 = reshape(%121, newshape=[]) /* ty=float64 */;
  %126 = reshape(%122, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %127 = @func_236(%123, %124, %125, %126) /* ty=(Tensor[(2, 2, 6), bool], Tensor[(12, 14, 9), float64], Tensor[(2, 2, 6), float32], Tensor[(16, 7, 2), uint32], float64, Tensor[(224), float64], Tensor[(1512), float32]) */;
  %128 = %118.0;
  %129 = %127.3;
  (%128, %129, meta[relay.Constant][10] /* ty=Tensor[(24), bool] */, -2.10176f64 /* ty=float64 */, %var_6398)
}

def @func_9883() -> (Tensor[(16, 1, 5), float64], Tensor[(12, 32), float32]) {
  @func_9881() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(12, 32), float32]) */
}

def @func_9110() -> Tensor[(16, 1, 5), float64] {
  %130 = fn () -> Tensor[(16, 1, 5), float64] {
    @func_7159() /* ty=Tensor[(16, 1, 5), float64] */
  };
  %130() /* ty=Tensor[(16, 1, 5), float64] */
}

def @func_6115() -> (Tensor[(16, 1, 5), float64],) {
  %133 = fn () -> (Tensor[(16, 1, 5), float64],) {
    %131 = @func_5938() /* ty=(Tensor[(16, 1, 5), float64],) */;
    %132 = %131.0;
    (%132,)
  };
  %133() /* ty=(Tensor[(16, 1, 5), float64],) */
}

def @func_9972() -> Tensor[(56, 8), int32] {
  %135 = fn () -> Tensor[(56, 8), int32] {
    %134 = @func_7517() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(24), bool], Tensor[(252), float32], Tensor[(56, 8), int32]) */;
    %134.4
  };
  %135() /* ty=Tensor[(56, 8), int32] */
}

def @func_6268() -> Tensor[(16, 1, 5), float64] {
  @func_6266() /* ty=Tensor[(16, 1, 5), float64] */
}

def @func_9281(%var_9279: Tensor[(16, 4, 5), float64]) -> (Tensor[(16, 4, 5), bool],) {
  @func_9278(%var_9279) /* ty=(Tensor[(16, 4, 5), bool],) */
}

def @func_8066() -> (Tensor[(16, 1, 5), float64],) {
  @func_8064() /* ty=(Tensor[(16, 1, 5), float64],) */
}

def @func_4664(%var_4611: Tensor[(5, 6, 8), float64]) -> (Tensor[(5, 6, 8), float32],) {
  %136 = cast(%var_4611, dtype="float64") /* ty=Tensor[(5, 6, 8), float64] */;
  %137 = tan(%136) /* ty=Tensor[(5, 6, 8), float64] */;
  %138 = cast(%137, dtype="float32") /* ty=Tensor[(5, 6, 8), float32] */;
  %139 = sigmoid(%138) /* ty=Tensor[(5, 6, 8), float32] */;
  (%139,)
}

def @func_8405(%var_8393: Tensor[(12, 8, 5), float64]) -> (Tensor[(12, 8, 5), float32],) {
  %140 = cast(%var_8393, dtype="float64") /* ty=Tensor[(12, 8, 5), float64] */;
  %141 = tan(%140) /* ty=Tensor[(12, 8, 5), float64] */;
  %142 = cast(%141, dtype="float32") /* ty=Tensor[(12, 8, 5), float32] */;
  %143 = rsqrt(%142) /* ty=Tensor[(12, 8, 5), float32] */;
  %144 = cast(%143, dtype="float32") /* ty=Tensor[(12, 8, 5), float32] */;
  %145 = erf(%144) /* ty=Tensor[(12, 8, 5), float32] */;
  (%145,)
}

def @func_4248(%var_4246: Tensor[(14, 6, 6), uint32], %var_4247: Tensor[(14, 6, 6), uint32]) -> (Tensor[(14, 6, 6), bool],) {
  @func_4244(%var_4246, %var_4247) /* ty=(Tensor[(14, 6, 6), bool],) */
}

def @func_9001(%var_8960: Tensor[(12, 12, 6), float32], %var_8970: Tensor[(324, 3), float64], %var_8994: float64, %var_8998: Tensor[(1512), float64]) -> (Tensor[(12, 12, 6), float32], Tensor[(324, 3), bool], Tensor[(16, 1, 5), float64], Tensor[(196), float64], float64, Tensor[(224), float64], Tensor[(196), float64], Tensor[(520), float64], Tensor[(1512), float64], Tensor[(135), float32]) {
  %146 = cast(%var_8960, dtype="float32") /* ty=Tensor[(12, 12, 6), float32] */;
  %147 = cast(%var_8970, dtype="float64") /* ty=Tensor[(324, 3), float64] */;
  %148 = cast(%var_8970, dtype="float64") /* ty=Tensor[(324, 3), float64] */;
  %149 = reshape(%147, newshape=[9, 12, 9]) /* ty=Tensor[(9, 12, 9), float64] */;
  %150 = reshape(%148, newshape=[9, 12, 9]) /* ty=Tensor[(9, 12, 9), float64] */;
  %151 = @func_2634(%149, %150) /* ty=Tensor[(9, 12, 9), bool] */;
  %152 = cast(%151, dtype="bool") /* ty=Tensor[(9, 12, 9), bool] */;
  %153 = shape_of(%var_8970, dtype="int32") /* ty=Tensor[(2), int32] */;
  %154 = cast(%var_8970, dtype="bool") /* ty=Tensor[(324, 3), bool] */;
  %155 = dyn.reshape(%152, %153, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %156 = @func_6617() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %157 = cast(%var_8994, dtype="float64") /* ty=float64 */;
  %158 = cast(meta[relay.Constant][11] /* ty=Tensor[(224), float64] */, dtype="float64") /* ty=Tensor[(224), float64] */;
  %159 = cast(meta[relay.Constant][12] /* ty=Tensor[(196), float64] */, dtype="float64") /* ty=Tensor[(196), float64] */;
  %160 = cast(meta[relay.Constant][13] /* ty=Tensor[(520), float64] */, dtype="float64") /* ty=Tensor[(520), float64] */;
  %161 = cast(%var_8998, dtype="float64") /* ty=Tensor[(1512), float64] */;
  %162 = cast(meta[relay.Constant][14] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %163 = reshape(%157, newshape=[]) /* ty=float64 */;
  %164 = reshape(%158, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %165 = reshape(%159, newshape=[196]) /* ty=Tensor[(196), float64] */;
  %166 = reshape(%160, newshape=[520]) /* ty=Tensor[(520), float64] */;
  %167 = reshape(%161, newshape=[1512]) /* ty=Tensor[(1512), float64] */;
  %168 = reshape(%162, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %169 = @func_7083(%163, %164, %165, %166, %167, %168) /* ty=(float64, Tensor[(12, 2), bool], Tensor[(224), float64], Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(4, 7, 7), float64], Tensor[(196), float64], Tensor[(16, 1, 5), float64], Tensor[(4, 10, 13), float64], Tensor[(520), float64], Tensor[(12, 14, 9), float64], Tensor[(1512), float64], Tensor[(3, 5, 9), float32], Tensor[(135), float32]) */;
  %170 = sqrt(%146) /* ty=Tensor[(12, 12, 6), float32] */;
  %171 = greater_equal(%154, %155) /* ty=Tensor[(324, 3), bool] */;
  %172 = %156.0;
  %173 = %169.6;
  (%170, %171, %172, %173, %var_8994, meta[relay.Constant][11] /* ty=Tensor[(224), float64] */, meta[relay.Constant][12] /* ty=Tensor[(196), float64] */, meta[relay.Constant][13] /* ty=Tensor[(520), float64] */, %var_8998, meta[relay.Constant][14] /* ty=Tensor[(135), float32] */)
}

def @func_6602() -> Tensor[(16, 1, 5), float64] {
  @func_6600() /* ty=Tensor[(16, 1, 5), float64] */
}

def @func_8008() -> Tensor[(12, 32), float32] {
  %179 = fn () -> Tensor[(12, 32), float32] {
    %174 = @func_7979() /* ty=(Tensor[(12, 32), float64], Tensor[(12, 32), float64]) */;
    %175 = %174.1;
    %176 = cast(%175, dtype="float32") /* ty=Tensor[(12, 32), float32] */;
    %177 = sinh(%176) /* ty=Tensor[(12, 32), float32] */;
    %178 = cast(%177, dtype="float32") /* ty=Tensor[(12, 32), float32] */;
    acos(%178) /* ty=Tensor[(12, 32), float32] */
  };
  %179() /* ty=Tensor[(12, 32), float32] */
}

def @func_8554(%var_8552: Tensor[(12, 2), float32]) -> (Tensor[(16, ?, 5), int64], Tensor[(3, 4, 2), bool], Tensor[(12, 2), float32]) {
  @func_8551(%var_8552) /* ty=(Tensor[(16, ?, 5), int64], Tensor[(3, 4, 2), bool], Tensor[(12, 2), float32]) */
}

def @func_9409() -> Tensor[(16, ?, 5), bool] {
  %181 = fn () -> Tensor[(16, ?, 5), bool] {
    %180 = @func_8025() /* ty=(Tensor[(16, ?, 5), bool], Tensor[(12, 32), float32]) */;
    %180.0
  };
  %181() /* ty=Tensor[(16, ?, 5), bool] */
}

def @func_8408(%var_8406: Tensor[(12, 8, 5), float64]) -> (Tensor[(12, 8, 5), float32],) {
  @func_8405(%var_8406) /* ty=(Tensor[(12, 8, 5), float32],) */
}

def @func_9382(%var_9380: Tensor[(4, 6, 14), float32]) -> Tensor[(4, 6, 14), int32] {
  @func_9379(%var_9380) /* ty=Tensor[(4, 6, 14), int32] */
}

def @func_7656() -> Tensor[(16, 1, 5), float64] {
  %182 = fn () -> Tensor[(16, 1, 5), float64] {
    @func_6492() /* ty=Tensor[(16, 1, 5), float64] */
  };
  %182() /* ty=Tensor[(16, 1, 5), float64] */
}

def @func_8459() -> (Tensor[(16, 1, 5), float64],) {
  @func_8457() /* ty=(Tensor[(16, 1, 5), float64],) */
}

def @func_98(%var_96: float64, %var_97: Tensor[(16, 7, 2), float64]) -> Tensor[(16, 7, 2), uint32] {
  @func_94(%var_96, %var_97) /* ty=Tensor[(16, 7, 2), uint32] */
}

def @func_7415(%var_7372: Tensor[(2, 11, 14), int16], %var_7373: Tensor[(2, 11, 14), int16]) -> Tensor[(2, 11, 14), float32] {
  %183 = cast(%var_7373, dtype="bool") /* ty=Tensor[(2, 11, 14), bool] */;
  %184 = shape_of(%var_7372, dtype="int32") /* ty=Tensor[(3), int32] */;
  %185 = cast(%var_7372, dtype="bool") /* ty=Tensor[(2, 11, 14), bool] */;
  %186 = dyn.reshape(%183, %184, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %187 = less(%185, %186) /* ty=Tensor[(2, 11, 14), bool] */;
  %188 = cast(%187, dtype="float64") /* ty=Tensor[(2, 11, 14), float64] */;
  %189 = atanh(%188) /* ty=Tensor[(2, 11, 14), float64] */;
  %190 = cast(%189, dtype="float32") /* ty=Tensor[(2, 11, 14), float32] */;
  asinh(%190) /* ty=Tensor[(2, 11, 14), float32] */
}

def @func_8378() -> (Tensor[(16, 1, 5), float64],) {
  %193 = fn () -> (Tensor[(16, 1, 5), float64],) {
    %191 = @func_5938() /* ty=(Tensor[(16, 1, 5), float64],) */;
    %192 = %191.0;
    (%192,)
  };
  %193() /* ty=(Tensor[(16, 1, 5), float64],) */
}

def @func_31(%var_11: Tensor[(12, 14, 9), float64]) -> Tensor[(12, 14, 9), float64] {
  %194 = cast(%var_11, dtype="float64") /* ty=Tensor[(12, 14, 9), float64] */;
  sin(%194) /* ty=Tensor[(12, 14, 9), float64] */
}

def @func_6266() -> Tensor[(16, 1, 5), float64] {
  %195 = @func_5938() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %195.0
}

def @func_878(%var_876: Tensor[(9, 6, 13), float64]) -> (Tensor[(9, 6, 13), float64],) {
  @func_875(%var_876) /* ty=(Tensor[(9, 6, 13), float64],) */
}

def @func_9007(%var_9003: Tensor[(12, 12, 6), float32], %var_9004: Tensor[(324, 3), float64], %var_9005: float64, %var_9006: Tensor[(1512), float64]) -> (Tensor[(12, 12, 6), float32], Tensor[(324, 3), bool], Tensor[(16, 1, 5), float64], Tensor[(196), float64], float64, Tensor[(224), float64], Tensor[(196), float64], Tensor[(520), float64], Tensor[(1512), float64], Tensor[(135), float32]) {
  @func_9001(%var_9003, %var_9004, %var_9005, %var_9006) /* ty=(Tensor[(12, 12, 6), float32], Tensor[(324, 3), bool], Tensor[(16, 1, 5), float64], Tensor[(196), float64], float64, Tensor[(224), float64], Tensor[(196), float64], Tensor[(520), float64], Tensor[(1512), float64], Tensor[(135), float32]) */
}

def @func_9294() -> Tensor[(16, 1, 5), float64] {
  @func_6866() /* ty=Tensor[(16, 1, 5), float64] */
}

def @func_3983(%var_3912: Tensor[(12, 7, 11), bool], %var_3931: Tensor[(24), bool], %var_3941: Tensor[(112, 4), int32]) -> (Tensor[(12, 7, 11), bool], Tensor[(12, 14, 9), float64], Tensor[(24), bool], Tensor[(224), float64], Tensor[(9, 12, 9), bool], Tensor[(972), float64], Tensor[(112, 4), int32], Tensor[(1512), int32], Tensor[(9, 12, 9), bool], Tensor[(13, 4, 13), bool]) {
  %196 = cast(%var_3912, dtype="bool") /* ty=Tensor[(12, 7, 11), bool] */;
  %197 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(12, 7, 11), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %198 = cast(meta[relay.Constant][15] /* ty=Tensor[(12, 7, 11), bool] */, dtype="bool") /* ty=Tensor[(12, 7, 11), bool] */;
  %199 = dyn.reshape(%196, %197, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %200 = cast(%var_3931, dtype="bool") /* ty=Tensor[(24), bool] */;
  %201 = cast(%var_3931, dtype="bool") /* ty=Tensor[(24), bool] */;
  %202 = cast(-3.29575f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %203 = cast(meta[relay.Constant][16] /* ty=Tensor[(224), float64] */, dtype="float64") /* ty=Tensor[(224), float64] */;
  %204 = reshape(%200, newshape=[2, 2, 6]) /* ty=Tensor[(2, 2, 6), bool] */;
  %205 = reshape(%201, newshape=[2, 2, 6]) /* ty=Tensor[(2, 2, 6), bool] */;
  %206 = reshape(%202, newshape=[]) /* ty=float64 */;
  %207 = reshape(%203, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %208 = @func_236(%204, %205, %206, %207) /* ty=(Tensor[(2, 2, 6), bool], Tensor[(12, 14, 9), float64], Tensor[(2, 2, 6), float32], Tensor[(16, 7, 2), uint32], float64, Tensor[(224), float64], Tensor[(1512), float32]) */;
  %209 = cast(meta[relay.Constant][17] /* ty=Tensor[(972), float64] */, dtype="float64") /* ty=Tensor[(972), float64] */;
  %210 = cast(meta[relay.Constant][17] /* ty=Tensor[(972), float64] */, dtype="float64") /* ty=Tensor[(972), float64] */;
  %211 = reshape(%209, newshape=[9, 12, 9]) /* ty=Tensor[(9, 12, 9), float64] */;
  %212 = reshape(%210, newshape=[9, 12, 9]) /* ty=Tensor[(9, 12, 9), float64] */;
  %213 = cast(%var_3931, dtype="bool") /* ty=Tensor[(24), bool] */;
  %214 = cast(%var_3931, dtype="bool") /* ty=Tensor[(24), bool] */;
  %215 = cast(-3.29575f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %216 = cast(meta[relay.Constant][16] /* ty=Tensor[(224), float64] */, dtype="float64") /* ty=Tensor[(224), float64] */;
  %217 = reshape(%213, newshape=[2, 2, 6]) /* ty=Tensor[(2, 2, 6), bool] */;
  %218 = reshape(%214, newshape=[2, 2, 6]) /* ty=Tensor[(2, 2, 6), bool] */;
  %219 = reshape(%215, newshape=[]) /* ty=float64 */;
  %220 = reshape(%216, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %221 = @func_236(%217, %218, %219, %220) /* ty=(Tensor[(2, 2, 6), bool], Tensor[(12, 14, 9), float64], Tensor[(2, 2, 6), float32], Tensor[(16, 7, 2), uint32], float64, Tensor[(224), float64], Tensor[(1512), float32]) */;
  %222 = %221.6;
  %223 = cast(%222, dtype="int32") /* ty=Tensor[(1512), int32] */;
  %224 = cast(-3.29575f64 /* ty=float64 */, dtype="int32") /* ty=int32 */;
  %225 = cast(meta[relay.Constant][17] /* ty=Tensor[(972), float64] */, dtype="float64") /* ty=Tensor[(972), float64] */;
  %226 = @func_2634(%211, %212) /* ty=Tensor[(9, 12, 9), bool] */;
  %227 = cast(%226, dtype="float64") /* ty=Tensor[(9, 12, 9), float64] */;
  %228 = reshape(%225, newshape=[9, 12, 9]) /* ty=Tensor[(9, 12, 9), float64] */;
  %229 = reshape(%227, newshape=[9, 12, 9]) /* ty=Tensor[(9, 12, 9), float64] */;
  %230 = cast(%var_3941, dtype="int32") /* ty=Tensor[(112, 4), int32] */;
  %231 = cast(%var_3931, dtype="bool") /* ty=Tensor[(24), bool] */;
  %232 = reshape(%230, newshape=[14, 16, 2]) /* ty=Tensor[(14, 16, 2), int32] */;
  %233 = reshape(%231, newshape=[2, 12]) /* ty=Tensor[(2, 12), bool] */;
  %234 = @func_3396(%232, %233) /* ty=(Tensor[(14, 16, 2), int32], Tensor[(13, 4, 13), float64], Tensor[(252), float32], Tensor[(224), uint16], Tensor[(2, 12), bool]) */;
  %235 = %234.1;
  %236 = cast(%235, dtype="bool") /* ty=Tensor[(13, 4, 13), bool] */;
  %237 = cast(-3.29575f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
  %238 = logical_or(%198, %199) /* ty=Tensor[(12, 7, 11), bool] */;
  %239 = %208.1;
  %240 = logical_xor(%223, %224) /* ty=Tensor[(1512), int32] */;
  %241 = @func_2634(%228, %229) /* ty=Tensor[(9, 12, 9), bool] */;
  %242 = logical_and(%236, %237) /* ty=Tensor[(13, 4, 13), bool] */;
  (%238, %239, %var_3931, meta[relay.Constant][16] /* ty=Tensor[(224), float64] */, %226, meta[relay.Constant][17] /* ty=Tensor[(972), float64] */, %var_3941, %240, %241, %242)
}

def @func_8710() -> (Tensor[(56, 8), int32], Tensor[(13, 14, 16), float32], Tensor[(2912), float32]) {
  %248 = fn () -> (Tensor[(56, 8), int32], Tensor[(13, 14, 16), float32], Tensor[(2912), float32]) {
    %243 = @func_7517() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(24), bool], Tensor[(252), float32], Tensor[(56, 8), int32]) */;
    %244 = cast(meta[relay.Constant][18] /* ty=Tensor[(2912), float32] */, dtype="float32") /* ty=Tensor[(2912), float32] */;
    %245 = reshape(%244, newshape=[13, 14, 16]) /* ty=Tensor[(13, 14, 16), float32] */;
    %246 = %243.4;
    %247 = @func_1021(%245) /* ty=Tensor[(13, 14, 16), float32] */;
    (%246, %247, meta[relay.Constant][18] /* ty=Tensor[(2912), float32] */)
  };
  %248() /* ty=(Tensor[(56, 8), int32], Tensor[(13, 14, 16), float32], Tensor[(2912), float32]) */
}

def @func_10088() -> Tensor[(12, 32), float32] {
  %249 = @func_8025() /* ty=(Tensor[(16, ?, 5), bool], Tensor[(12, 32), float32]) */;
  %249.1
}

def @func_8551(%var_8544: Tensor[(12, 2), float32]) -> (Tensor[(16, ?, 5), int64], Tensor[(3, 4, 2), bool], Tensor[(12, 2), float32]) {
  %250 = @func_7159() /* ty=Tensor[(16, 1, 5), float64] */;
  %251 = cast(%250, dtype="float64") /* ty=Tensor[(16, 1, 5), float64] */;
  %252 = log(%251) /* ty=Tensor[(16, 1, 5), float64] */;
  %253 = @func_5938() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %254 = %253.0;
  %255 = cast(%254, dtype="int64") /* ty=Tensor[(16, 1, 5), int64] */;
  %256 = shape_of(%252, dtype="int32") /* ty=Tensor[(3), int32] */;
  %257 = cast(%252, dtype="int64") /* ty=Tensor[(16, 1, 5), int64] */;
  %258 = dyn.reshape(%255, %256, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %259 = cast(%var_8544, dtype="float32") /* ty=Tensor[(12, 2), float32] */;
  %260 = reshape(%259, newshape=[3, 4, 2]) /* ty=Tensor[(3, 4, 2), float32] */;
  %261 = subtract(%257, %258) /* ty=Tensor[(16, ?, 5), int64] */;
  %262 = @func_4868(%260) /* ty=Tensor[(3, 4, 2), bool] */;
  (%261, %262, %var_8544)
}

def @func_2859(%var_2819: Tensor[(6, 3, 14), float32], %var_2833: Tensor[(224), uint16], %var_2854: Tensor[(24), bool]) -> (Tensor[(6, 3, 14), float64], Tensor[(4, 7, 8), bool], Tensor[(32), uint16], Tensor[(224), uint16], Tensor[(13, 4, 13), float64], float64, Tensor[(676), float64], Tensor[(16, 7, 2), uint32], Tensor[(260), int32], Tensor[(24), bool]) {
  %263 = cast(%var_2819, dtype="float32") /* ty=Tensor[(6, 3, 14), float32] */;
  %264 = tan(%263) /* ty=Tensor[(6, 3, 14), float32] */;
  %265 = cast(%var_2819, dtype="float64") /* ty=Tensor[(6, 3, 14), float64] */;
  %266 = shape_of(%264, dtype="int32") /* ty=Tensor[(3), int32] */;
  %267 = cast(%264, dtype="float64") /* ty=Tensor[(6, 3, 14), float64] */;
  %268 = dyn.reshape(%265, %266, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %269 = cast(meta[relay.Constant][19] /* ty=Tensor[(32), uint16] */, dtype="uint16") /* ty=Tensor[(32), uint16] */;
  %270 = cast(%var_2833, dtype="uint16") /* ty=Tensor[(224), uint16] */;
  %271 = reshape(%269, newshape=[4, 1, 8]) /* ty=Tensor[(4, 1, 8), uint16] */;
  %272 = reshape(%270, newshape=[4, 7, 8]) /* ty=Tensor[(4, 7, 8), uint16] */;
  %273 = @func_2693(%271, %272) /* ty=(Tensor[(4, 7, 8), bool],) */;
  %274 = cast(-6.23818f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %275 = cast(meta[relay.Constant][20] /* ty=Tensor[(676), float64] */, dtype="float64") /* ty=Tensor[(676), float64] */;
  %276 = reshape(%274, newshape=[]) /* ty=float64 */;
  %277 = reshape(%275, newshape=[13, 4, 13]) /* ty=Tensor[(13, 4, 13), float64] */;
  %278 = @func_1172(%276, %277) /* ty=(Tensor[(13, 4, 13), float64],) */;
  %279 = cast(meta[relay.Constant][21] /* ty=Tensor[(260), int32] */, dtype="int32") /* ty=Tensor[(260), int32] */;
  %280 = cast(meta[relay.Constant][21] /* ty=Tensor[(260), int32] */, dtype="int32") /* ty=Tensor[(260), int32] */;
  %281 = cast(%var_2854, dtype="bool") /* ty=Tensor[(24), bool] */;
  %282 = cast(-6.23818f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %283 = cast(%var_2833, dtype="float64") /* ty=Tensor[(224), float64] */;
  %284 = reshape(%279, newshape=[2, 10, 13]) /* ty=Tensor[(2, 10, 13), int32] */;
  %285 = reshape(%280, newshape=[2, 10, 13]) /* ty=Tensor[(2, 10, 13), int32] */;
  %286 = reshape(%281, newshape=[24]) /* ty=Tensor[(24), bool] */;
  %287 = reshape(%282, newshape=[]) /* ty=float64 */;
  %288 = reshape(%283, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %289 = @func_2223(%284, %285, %286, %287, %288) /* ty=(Tensor[(2, 10, 13), bool], Tensor[(1512), float32], Tensor[(24), bool], float64, Tensor[(224), float64], Tensor[(16, 7, 2), uint32], Tensor[(12, 14, 9), float64]) */;
  %290 = divide(%267, %268) /* ty=Tensor[(6, 3, 14), float64] */;
  %291 = %273.0;
  %292 = %278.0;
  %293 = %289.5;
  (%290, %291, meta[relay.Constant][19] /* ty=Tensor[(32), uint16] */, %var_2833, %292, -6.23818f64 /* ty=float64 */, meta[relay.Constant][20] /* ty=Tensor[(676), float64] */, %293, meta[relay.Constant][21] /* ty=Tensor[(260), int32] */, %var_2854)
}

def @func_8457() -> (Tensor[(16, 1, 5), float64],) {
  %294 = @func_6114() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %295 = %294.0;
  (%295,)
}

def @func_9570() -> (Tensor[(16, 1, 5), float64], Tensor[(9, 12, 9), uint32], Tensor[(9, 12, 9), float32]) {
  @func_9568() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(9, 12, 9), uint32], Tensor[(9, 12, 9), float32]) */
}

def @func_6928(%var_6927: Tensor[(16, 7, 5), float64]) -> (Tensor[(16, 2, 5), uint64], Tensor[(6, 4, 16), float64], Tensor[(384), float64], Tensor[(16, 7, 5), float32]) {
  %310 = fn (%var_6900: Tensor[(16, 7, 5), float64]) -> (Tensor[(16, 2, 5), uint64], Tensor[(6, 4, 16), float64], Tensor[(384), float64], Tensor[(16, 7, 5), float32]) {
    %296 = @func_6114() /* ty=(Tensor[(16, 1, 5), float64],) */;
    %297 = %296.0;
    %298 = cast(%297, dtype="uint64") /* ty=Tensor[(16, 1, 5), uint64] */;
    %299 = cast(meta[relay.Constant][22] /* ty=Tensor[(16, 2, 5), float64] */, dtype="uint64") /* ty=Tensor[(16, 2, 5), uint64] */;
    %300 = cast(meta[relay.Constant][23] /* ty=Tensor[(384), float64] */, dtype="float64") /* ty=Tensor[(384), float64] */;
    %301 = reshape(%300, newshape=[6, 4, 16]) /* ty=Tensor[(6, 4, 16), float64] */;
    %302 = cast(%297, dtype="float32") /* ty=Tensor[(16, 1, 5), float32] */;
    %303 = cast(%var_6900, dtype="float32") /* ty=Tensor[(16, 7, 5), float32] */;
    %304 = floor_divide(%302, %303) /* ty=Tensor[(16, 7, 5), float32] */;
    %305 = cast(%304, dtype="float32") /* ty=Tensor[(16, 7, 5), float32] */;
    %306 = cast(%297, dtype="float32") /* ty=Tensor[(16, 1, 5), float32] */;
    %307 = bitwise_xor(%298, %299) /* ty=Tensor[(16, 2, 5), uint64] */;
    %308 = @func_4258(%301) /* ty=Tensor[(6, 4, 16), float64] */;
    %309 = add(%305, %306) /* ty=Tensor[(16, 7, 5), float32] */;
    (%307, %308, meta[relay.Constant][23] /* ty=Tensor[(384), float64] */, %309)
  };
  %310(%var_6927) /* ty=(Tensor[(16, 2, 5), uint64], Tensor[(6, 4, 16), float64], Tensor[(384), float64], Tensor[(16, 7, 5), float32]) */
}

def @func_8276(%var_8251: Tensor[(14, 9, 3), uint16]) -> (Tensor[(14, 9, 3), uint64], Tensor[(14, 9, 3), float32]) {
  %311 = cast(%var_8251, dtype="bool") /* ty=Tensor[(14, 9, 3), bool] */;
  %312 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(14, 9, 3), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %313 = cast(meta[relay.Constant][24] /* ty=Tensor[(14, 9, 3), uint16] */, dtype="bool") /* ty=Tensor[(14, 9, 3), bool] */;
  %314 = dyn.reshape(%311, %312, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %315 = greater_equal(%313, %314) /* ty=Tensor[(14, 9, 3), bool] */;
  %316 = cast(meta[relay.Constant][24] /* ty=Tensor[(14, 9, 3), uint16] */, dtype="uint64") /* ty=Tensor[(14, 9, 3), uint64] */;
  %317 = shape_of(%315, dtype="int32") /* ty=Tensor[(3), int32] */;
  %318 = cast(%315, dtype="uint64") /* ty=Tensor[(14, 9, 3), uint64] */;
  %319 = dyn.reshape(%316, %317, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %320 = cast(%315, dtype="float32") /* ty=Tensor[(14, 9, 3), float32] */;
  %321 = left_shift(%318, %319) /* ty=Tensor[(14, 9, 3), uint64] */;
  %322 = sqrt(%320) /* ty=Tensor[(14, 9, 3), float32] */;
  (%321, %322)
}

def @func_10498(%var_10496: Tensor[(16, 4, 5), float64]) -> (Tensor[(16, 6, 5), float64], Tensor[(16, 4, 5), int16]) {
  @func_10495(%var_10496) /* ty=(Tensor[(16, 6, 5), float64], Tensor[(16, 4, 5), int16]) */
}

def @func_10236() -> Tensor[(56, 8), int32] {
  @func_10234() /* ty=Tensor[(56, 8), int32] */
}

def @func_6407(%var_6405: Tensor[(224), float64]) -> (Tensor[(16, 1, 5), float64], Tensor[(16, 7, 2), uint32], Tensor[(24), bool], float64, Tensor[(224), float64]) {
  @func_6404(%var_6405) /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 7, 2), uint32], Tensor[(24), bool], float64, Tensor[(224), float64]) */
}

def @func_8942(%var_8941: Tensor[(11, 1), int8]) -> (Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(11, 1), int8]) {
  %329 = fn (%var_8891: Tensor[(11, 1), int8]) -> (Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(11, 1), int8]) {
    %323 = @func_6617() /* ty=(Tensor[(16, 1, 5), float64],) */;
    %324 = cast(%var_8891, dtype="int8") /* ty=Tensor[(11, 1), int8] */;
    %325 = reshape(%324, newshape=[11]) /* ty=Tensor[(11), int8] */;
    %326 = @func_8147(%325) /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(1, 11, 1), int8], Tensor[(11), int8]) */;
    %327 = %323.0;
    %328 = %326.1;
    (%327, %328, %var_8891)
  };
  %329(%var_8941) /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(11, 1), int8]) */
}

def @func_8025() -> (Tensor[(16, ?, 5), bool], Tensor[(12, 32), float32]) {
  %330 = @func_6266() /* ty=Tensor[(16, 1, 5), float64] */;
  %331 = cast(meta[relay.Constant][25] /* ty=Tensor[(16, 1, 5), float64] */, dtype="bool") /* ty=Tensor[(16, 1, 5), bool] */;
  %332 = shape_of(%330, dtype="int32") /* ty=Tensor[(3), int32] */;
  %333 = cast(%330, dtype="bool") /* ty=Tensor[(16, 1, 5), bool] */;
  %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %335 = greater_equal(%333, %334) /* ty=Tensor[(16, ?, 5), bool] */;
  %336 = @func_8007() /* ty=Tensor[(12, 32), float32] */;
  (%335, %336)
}

def @func_8027() -> (Tensor[(16, ?, 5), bool], Tensor[(12, 32), float32]) {
  @func_8025() /* ty=(Tensor[(16, ?, 5), bool], Tensor[(12, 32), float32]) */
}

def @func_10495(%var_10457: Tensor[(16, 4, 5), float64]) -> (Tensor[(16, 6, 5), float64], Tensor[(16, 4, 5), int16]) {
  %337 = @func_9672() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 9, 5), uint8], Tensor[(720), float64], Tensor[(9, 12, 9), bool], Tensor[(16, 1, 5), float64]) */;
  %338 = %337.4;
  %339 = cast(%338, dtype="float64") /* ty=Tensor[(16, 1, 5), float64] */;
  %340 = cast(meta[relay.Constant][26] /* ty=Tensor[(16, 6, 5), float64] */, dtype="float64") /* ty=Tensor[(16, 6, 5), float64] */;
  %341 = cast(%338, dtype="int16") /* ty=Tensor[(16, 1, 5), int16] */;
  %342 = cast(%var_10457, dtype="int16") /* ty=Tensor[(16, 4, 5), int16] */;
  %343 = maximum(%339, %340) /* ty=Tensor[(16, 6, 5), float64] */;
  %344 = multiply(%341, %342) /* ty=Tensor[(16, 4, 5), int16] */;
  (%343, %344)
}

def @func_9424() -> Tensor[(16, 1, 5), float64] {
  @func_9422() /* ty=Tensor[(16, 1, 5), float64] */
}

def @func_749(%var_747: Tensor[(4, 7, 7), float64]) -> Tensor[(4, 7, 7), float64] {
  @func_746(%var_747) /* ty=Tensor[(4, 7, 7), float64] */
}

def @func_9163(%var_9149: Tensor[(12, 32), float64], %var_9159: float64) -> (Tensor[(224), float64], Tensor[(12, 32), uint32], Tensor[(16, 7, 2), uint32], float64) {
  %345 = @func_7360() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 7, 2), uint32], float64, Tensor[(224), float64], Tensor[(16, 1, 5), float64]) */;
  %346 = @func_7979() /* ty=(Tensor[(12, 32), float64], Tensor[(12, 32), float64]) */;
  %347 = %346.1;
  %348 = cast(%347, dtype="float64") /* ty=Tensor[(12, 32), float64] */;
  %349 = acosh(%348) /* ty=Tensor[(12, 32), float64] */;
  %350 = cast(%var_9149, dtype="uint32") /* ty=Tensor[(12, 32), uint32] */;
  %351 = shape_of(%349, dtype="int32") /* ty=Tensor[(2), int32] */;
  %352 = cast(%349, dtype="uint32") /* ty=Tensor[(12, 32), uint32] */;
  %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %354 = cast(%var_9159, dtype="float64") /* ty=float64 */;
  %355 = %345.3;
  %356 = cast(%355, dtype="float64") /* ty=Tensor[(224), float64] */;
  %357 = reshape(%354, newshape=[]) /* ty=float64 */;
  %358 = reshape(%356, newshape=[16, 7, 2]) /* ty=Tensor[(16, 7, 2), float64] */;
  %359 = minimum(%352, %353) /* ty=Tensor[(12, 32), uint32] */;
  %360 = @func_94(%357, %358) /* ty=Tensor[(16, 7, 2), uint32] */;
  (%355, %359, %360, %var_9159)
}

def @func_8671() -> (Tensor[(16, 1, 5), float64], Tensor[(6, 84), uint32], Tensor[(14, 6, 6), int8]) {
  %374 = fn () -> (Tensor[(16, 1, 5), float64], Tensor[(6, 84), uint32], Tensor[(14, 6, 6), int8]) {
    %361 = @func_6734() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64]) */;
    %362 = cast(meta[relay.Constant][27] /* ty=Tensor[(6, 84), uint32] */, dtype="uint32") /* ty=Tensor[(6, 84), uint32] */;
    %363 = cast(meta[relay.Constant][27] /* ty=Tensor[(6, 84), uint32] */, dtype="uint32") /* ty=Tensor[(6, 84), uint32] */;
    %364 = reshape(%362, newshape=[14, 6, 6]) /* ty=Tensor[(14, 6, 6), uint32] */;
    %365 = reshape(%363, newshape=[14, 6, 6]) /* ty=Tensor[(14, 6, 6), uint32] */;
    %366 = @func_4244(%364, %365) /* ty=(Tensor[(14, 6, 6), bool],) */;
    %367 = %366.0;
    %368 = cast(meta[relay.Constant][28] /* ty=Tensor[(14, 6, 6), bool] */, dtype="int8") /* ty=Tensor[(14, 6, 6), int8] */;
    %369 = shape_of(%367, dtype="int32") /* ty=Tensor[(3), int32] */;
    %370 = cast(%367, dtype="int8") /* ty=Tensor[(14, 6, 6), int8] */;
    %371 = dyn.reshape(%368, %369, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %372 = %361.0;
    %373 = subtract(%370, %371) /* ty=Tensor[(14, 6, 6), int8] */;
    (%372, meta[relay.Constant][27] /* ty=Tensor[(6, 84), uint32] */, %373)
  };
  %374() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(6, 84), uint32], Tensor[(14, 6, 6), int8]) */
}

def @func_10582() -> Tensor[(56, 8), int32] {
  @func_10580() /* ty=Tensor[(56, 8), int32] */
}

def @func_9167(%var_9165: Tensor[(12, 32), float64], %var_9166: float64) -> (Tensor[(224), float64], Tensor[(12, 32), uint32], Tensor[(16, 7, 2), uint32], float64) {
  @func_9163(%var_9165, %var_9166) /* ty=(Tensor[(224), float64], Tensor[(12, 32), uint32], Tensor[(16, 7, 2), uint32], float64) */
}

def @func_8150(%var_8148: Tensor[(11), int8]) -> (Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(1, 11, 1), int8], Tensor[(11), int8]) {
  @func_8147(%var_8148) /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(1, 11, 1), int8], Tensor[(11), int8]) */
}

def @func_34(%var_32: Tensor[(12, 14, 9), float64]) -> Tensor[(12, 14, 9), float64] {
  @func_31(%var_32) /* ty=Tensor[(12, 14, 9), float64] */
}

def @func_7104(%var_7101: Tensor[(196), float64]) -> (Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(4, 7, 7), float64], Tensor[(196), float64]) {
  %375 = @func_5938() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %376 = cast(%var_7101, dtype="float64") /* ty=Tensor[(196), float64] */;
  %377 = reshape(%376, newshape=[4, 7, 7]) /* ty=Tensor[(4, 7, 7), float64] */;
  %378 = %375.0;
  %379 = @func_6866() /* ty=Tensor[(16, 1, 5), float64] */;
  %380 = @func_746(%377) /* ty=Tensor[(4, 7, 7), float64] */;
  (%378, %379, %380, %var_7101)
}

def @func_4258(%var_4255: Tensor[(6, 4, 16), float64]) -> Tensor[(6, 4, 16), float64] {
  %381 = cast(%var_4255, dtype="float64") /* ty=Tensor[(6, 4, 16), float64] */;
  sigmoid(%381) /* ty=Tensor[(6, 4, 16), float64] */
}

def @func_3399(%var_3397: Tensor[(14, 16, 2), int32], %var_3398: Tensor[(2, 12), bool]) -> (Tensor[(14, 16, 2), int32], Tensor[(13, 4, 13), float64], Tensor[(252), float32], Tensor[(224), uint16], Tensor[(2, 12), bool]) {
  %393 = fn (%var_3379: Tensor[(14, 16, 2), int32], %var_3394: Tensor[(2, 12), bool]) -> (Tensor[(14, 16, 2), int32], Tensor[(13, 4, 13), float64], Tensor[(252), float32], Tensor[(224), uint16], Tensor[(2, 12), bool]) {
    %382 = cast(-1 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %383 = cast(%var_3379, dtype="int32") /* ty=Tensor[(14, 16, 2), int32] */;
    %384 = cast(meta[relay.Constant][29] /* ty=Tensor[(252), float32] */, dtype="float32") /* ty=Tensor[(252), float32] */;
    %385 = cast(meta[relay.Constant][30] /* ty=Tensor[(224), uint16] */, dtype="uint16") /* ty=Tensor[(224), uint16] */;
    %386 = cast(%var_3394, dtype="bool") /* ty=Tensor[(2, 12), bool] */;
    %387 = reshape(%384, newshape=[6, 3, 14]) /* ty=Tensor[(6, 3, 14), float32] */;
    %388 = reshape(%385, newshape=[224]) /* ty=Tensor[(224), uint16] */;
    %389 = reshape(%386, newshape=[24]) /* ty=Tensor[(24), bool] */;
    %390 = @func_2859(%387, %388, %389) /* ty=(Tensor[(6, 3, 14), float64], Tensor[(4, 7, 8), bool], Tensor[(32), uint16], Tensor[(224), uint16], Tensor[(13, 4, 13), float64], float64, Tensor[(676), float64], Tensor[(16, 7, 2), uint32], Tensor[(260), int32], Tensor[(24), bool]) */;
    %391 = bitwise_and(%382, %383) /* ty=Tensor[(14, 16, 2), int32] */;
    %392 = %390.4;
    (%391, %392, meta[relay.Constant][29] /* ty=Tensor[(252), float32] */, meta[relay.Constant][30] /* ty=Tensor[(224), uint16] */, %var_3394)
  };
  %393(%var_3397, %var_3398) /* ty=(Tensor[(14, 16, 2), int32], Tensor[(13, 4, 13), float64], Tensor[(252), float32], Tensor[(224), uint16], Tensor[(2, 12), bool]) */
}

def @func_6600() -> Tensor[(16, 1, 5), float64] {
  %394 = @func_5938() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %394.0
}

def @func_10157(%var_10155: Tensor[(16, 7, 5), float64]) -> (Tensor[(16, 7, 5), bool],) {
  @func_10154(%var_10155) /* ty=(Tensor[(16, 7, 5), bool],) */
}

def @func_9939(%var_9938: Tensor[(585), float32]) -> (Tensor[(56, 8), float32], Tensor[(585), uint16], Tensor[(16, 1, 5), float64]) {
  %409 = fn (%var_9923: Tensor[(585), float32]) -> (Tensor[(56, 8), float32], Tensor[(585), uint16], Tensor[(16, 1, 5), float64]) {
    %395 = @func_8709() /* ty=(Tensor[(56, 8), int32], Tensor[(13, 14, 16), float32], Tensor[(2912), float32]) */;
    %396 = %395.0;
    %397 = cast(%396, dtype="float32") /* ty=Tensor[(56, 8), float32] */;
    %398 = cast(%var_9923, dtype="float32") /* ty=Tensor[(585), float32] */;
    %399 = reshape(%398, newshape=[13, 15, 3]) /* ty=Tensor[(13, 15, 3), float32] */;
    %400 = @func_7854(%399) /* ty=(Tensor[(13, 15, 3), float32], Tensor[(4, 7, 7), float64], Tensor[(196), float64]) */;
    %401 = %400.0;
    %402 = cast(%401, dtype="uint16") /* ty=Tensor[(13, 15, 3), uint16] */;
    %403 = shape_of(%var_9923, dtype="int32") /* ty=Tensor[(1), int32] */;
    %404 = cast(%var_9923, dtype="uint16") /* ty=Tensor[(585), uint16] */;
    %405 = dyn.reshape(%402, %403, newshape=[]) /* ty=Tensor[(?), uint16] */;
    %406 = log10(%397) /* ty=Tensor[(56, 8), float32] */;
    %407 = subtract(%404, %405) /* ty=Tensor[(585), uint16] */;
    %408 = @func_9109() /* ty=Tensor[(16, 1, 5), float64] */;
    (%406, %407, %408)
  };
  %409(%var_9938) /* ty=(Tensor[(56, 8), float32], Tensor[(585), uint16], Tensor[(16, 1, 5), float64]) */
}

def @func_241(%var_237: Tensor[(2, 2, 6), bool], %var_238: Tensor[(2, 2, 6), bool], %var_239: float64, %var_240: Tensor[(224), float64]) -> (Tensor[(2, 2, 6), bool], Tensor[(12, 14, 9), float64], Tensor[(2, 2, 6), float32], Tensor[(16, 7, 2), uint32], float64, Tensor[(224), float64], Tensor[(1512), float32]) {
  %429 = fn (%var_169: Tensor[(2, 2, 6), bool], %var_170: Tensor[(2, 2, 6), bool], %var_222: float64, %var_223: Tensor[(224), float64]) -> (Tensor[(2, 2, 6), bool], Tensor[(12, 14, 9), float64], Tensor[(2, 2, 6), float32], Tensor[(16, 7, 2), uint32], float64, Tensor[(224), float64], Tensor[(1512), float32]) {
    %410 = cast(%var_170, dtype="bool") /* ty=Tensor[(2, 2, 6), bool] */;
    %411 = shape_of(%var_169, dtype="int32") /* ty=Tensor[(3), int32] */;
    %412 = cast(%var_169, dtype="bool") /* ty=Tensor[(2, 2, 6), bool] */;
    %413 = dyn.reshape(%410, %411, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %414 = cast(meta[relay.Constant][31] /* ty=Tensor[(1512), float64] */, dtype="float64") /* ty=Tensor[(1512), float64] */;
    %415 = reshape(%414, newshape=[12, 14, 9]) /* ty=Tensor[(12, 14, 9), float64] */;
    %416 = cast(%var_169, dtype="float32") /* ty=Tensor[(2, 2, 6), float32] */;
    %417 = cast(%var_222, dtype="float64") /* ty=float64 */;
    %418 = cast(%var_223, dtype="float64") /* ty=Tensor[(224), float64] */;
    %419 = reshape(%417, newshape=[]) /* ty=float64 */;
    %420 = reshape(%418, newshape=[16, 7, 2]) /* ty=Tensor[(16, 7, 2), float64] */;
    %421 = cast(meta[relay.Constant][31] /* ty=Tensor[(1512), float64] */, dtype="float32") /* ty=Tensor[(1512), float32] */;
    %422 = log(%421) /* ty=Tensor[(1512), float32] */;
    %423 = cast(%422, dtype="float32") /* ty=Tensor[(1512), float32] */;
    %424 = logical_and(%412, %413) /* ty=Tensor[(2, 2, 6), bool] */;
    %425 = @func_31(%415) /* ty=Tensor[(12, 14, 9), float64] */;
    %426 = asin(%416) /* ty=Tensor[(2, 2, 6), float32] */;
    %427 = @func_94(%419, %420) /* ty=Tensor[(16, 7, 2), uint32] */;
    %428 = erf(%423) /* ty=Tensor[(1512), float32] */;
    (%424, %425, %426, %427, %var_222, %var_223, %428)
  };
  %429(%var_237, %var_238, %var_239, %var_240) /* ty=(Tensor[(2, 2, 6), bool], Tensor[(12, 14, 9), float64], Tensor[(2, 2, 6), float32], Tensor[(16, 7, 2), uint32], float64, Tensor[(224), float64], Tensor[(1512), float32]) */
}

def @func_9978() -> (Tensor[(16, 1, 5), float64],) {
  %430 = @func_8377() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %431 = %430.0;
  (%431,)
}

def @func_7419(%var_7417: Tensor[(2, 11, 14), int16], %var_7418: Tensor[(2, 11, 14), int16]) -> Tensor[(2, 11, 14), float32] {
  @func_7415(%var_7417, %var_7418) /* ty=Tensor[(2, 11, 14), float32] */
}

def @func_2223(%var_2193: Tensor[(2, 10, 13), int32], %var_2194: Tensor[(2, 10, 13), int32], %var_2203: Tensor[(24), bool], %var_2204: float64, %var_2205: Tensor[(224), float64]) -> (Tensor[(2, 10, 13), bool], Tensor[(1512), float32], Tensor[(24), bool], float64, Tensor[(224), float64], Tensor[(16, 7, 2), uint32], Tensor[(12, 14, 9), float64]) {
  %432 = cast(%var_2194, dtype="bool") /* ty=Tensor[(2, 10, 13), bool] */;
  %433 = shape_of(%var_2193, dtype="int32") /* ty=Tensor[(3), int32] */;
  %434 = cast(%var_2193, dtype="bool") /* ty=Tensor[(2, 10, 13), bool] */;
  %435 = dyn.reshape(%432, %433, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %436 = cast(%var_2203, dtype="bool") /* ty=Tensor[(24), bool] */;
  %437 = cast(%var_2203, dtype="bool") /* ty=Tensor[(24), bool] */;
  %438 = cast(%var_2204, dtype="float64") /* ty=float64 */;
  %439 = cast(%var_2205, dtype="float64") /* ty=Tensor[(224), float64] */;
  %440 = reshape(%436, newshape=[2, 2, 6]) /* ty=Tensor[(2, 2, 6), bool] */;
  %441 = reshape(%437, newshape=[2, 2, 6]) /* ty=Tensor[(2, 2, 6), bool] */;
  %442 = reshape(%438, newshape=[]) /* ty=float64 */;
  %443 = reshape(%439, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %444 = @func_236(%440, %441, %442, %443) /* ty=(Tensor[(2, 2, 6), bool], Tensor[(12, 14, 9), float64], Tensor[(2, 2, 6), float32], Tensor[(16, 7, 2), uint32], float64, Tensor[(224), float64], Tensor[(1512), float32]) */;
  %445 = cast(%var_2204, dtype="bool") /* ty=bool */;
  %446 = cast(%var_2203, dtype="bool") /* ty=Tensor[(24), bool] */;
  %447 = cast(%var_2205, dtype="float64") /* ty=Tensor[(224), float64] */;
  %448 = reshape(%445, newshape=[]) /* ty=bool */;
  %449 = reshape(%446, newshape=[1, 8, 3]) /* ty=Tensor[(1, 8, 3), bool] */;
  %450 = reshape(%447, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %451 = @func_590(%448, %449, %450) /* ty=(Tensor[(1, 8, 3), bool], Tensor[(2, 2, 6), float32], Tensor[(224), float64], Tensor[(16, 7, 2), uint32], Tensor[(12, 14, 9), float64], Tensor[(1512, 1), float64]) */;
  %452 = %444.6;
  %453 = cast(%452, dtype="float64") /* ty=Tensor[(1512), float64] */;
  %454 = reshape(%453, newshape=[12, 14, 9]) /* ty=Tensor[(12, 14, 9), float64] */;
  %455 = greater(%434, %435) /* ty=Tensor[(2, 10, 13), bool] */;
  %456 = %451.3;
  %457 = @func_31(%454) /* ty=Tensor[(12, 14, 9), float64] */;
  (%455, %452, %var_2203, %var_2204, %var_2205, %456, %457)
}

def @func_3988(%var_3985: Tensor[(12, 7, 11), bool], %var_3986: Tensor[(24), bool], %var_3987: Tensor[(112, 4), int32]) -> (Tensor[(12, 7, 11), bool], Tensor[(12, 14, 9), float64], Tensor[(24), bool], Tensor[(224), float64], Tensor[(9, 12, 9), bool], Tensor[(972), float64], Tensor[(112, 4), int32], Tensor[(1512), int32], Tensor[(9, 12, 9), bool], Tensor[(13, 4, 13), bool]) {
  @func_3983(%var_3985, %var_3986, %var_3987) /* ty=(Tensor[(12, 7, 11), bool], Tensor[(12, 14, 9), float64], Tensor[(24), bool], Tensor[(224), float64], Tensor[(9, 12, 9), bool], Tensor[(972), float64], Tensor[(112, 4), int32], Tensor[(1512), int32], Tensor[(9, 12, 9), bool], Tensor[(13, 4, 13), bool]) */
}

def @func_10090() -> Tensor[(12, 32), float32] {
  @func_10088() /* ty=Tensor[(12, 32), float32] */
}

def @func_2721(%var_2710: float32, %var_2711: Tensor[(3, 5, 9), float32]) -> Tensor[(3, 5, 9), float32] {
  %458 = cast(%var_2710, dtype="float32") /* ty=float32 */;
  %459 = cast(%var_2711, dtype="float32") /* ty=Tensor[(3, 5, 9), float32] */;
  floor_mod(%458, %459) /* ty=Tensor[(3, 5, 9), float32] */
}

def @func_9034() -> (Tensor[(16, 7, 2), uint32],) {
  %462 = fn () -> (Tensor[(16, 7, 2), uint32],) {
    %460 = @func_7360() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 7, 2), uint32], float64, Tensor[(224), float64], Tensor[(16, 1, 5), float64]) */;
    %461 = %460.1;
    (%461,)
  };
  %462() /* ty=(Tensor[(16, 7, 2), uint32],) */
}

def @func_10258() -> (Tensor[(16, 1, 5), float64],) {
  %465 = fn () -> (Tensor[(16, 1, 5), float64],) {
    %463 = @func_6114() /* ty=(Tensor[(16, 1, 5), float64],) */;
    %464 = %463.0;
    (%464,)
  };
  %465() /* ty=(Tensor[(16, 1, 5), float64],) */
}

def @func_6735() -> (Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64]) {
  %468 = fn () -> (Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64]) {
    %466 = @func_6600() /* ty=Tensor[(16, 1, 5), float64] */;
    %467 = @func_6266() /* ty=Tensor[(16, 1, 5), float64] */;
    (%466, %467)
  };
  %468() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64]) */
}

def @func_4261(%var_4259: Tensor[(6, 4, 16), float64]) -> Tensor[(6, 4, 16), float64] {
  @func_4258(%var_4259) /* ty=Tensor[(6, 4, 16), float64] */
}

def @func_2725(%var_2723: float32, %var_2724: Tensor[(3, 5, 9), float32]) -> Tensor[(3, 5, 9), float32] {
  @func_2721(%var_2723, %var_2724) /* ty=Tensor[(3, 5, 9), float32] */
}

def @func_6549(%var_6548: Tensor[(16, 9, 5), float64]) -> Tensor[(16, 9, 5), uint8] {
  %473 = fn (%var_6538: Tensor[(16, 9, 5), float64]) -> Tensor[(16, 9, 5), uint8] {
    %469 = @func_5938() /* ty=(Tensor[(16, 1, 5), float64],) */;
    %470 = %469.0;
    %471 = cast(%470, dtype="uint8") /* ty=Tensor[(16, 1, 5), uint8] */;
    %472 = cast(%var_6538, dtype="uint8") /* ty=Tensor[(16, 9, 5), uint8] */;
    bitwise_and(%471, %472) /* ty=Tensor[(16, 9, 5), uint8] */
  };
  %473(%var_6548) /* ty=Tensor[(16, 9, 5), uint8] */
}

def @func_6618() -> (Tensor[(16, 1, 5), float64],) {
  %476 = fn () -> (Tensor[(16, 1, 5), float64],) {
    %474 = @func_5938() /* ty=(Tensor[(16, 1, 5), float64],) */;
    %475 = %474.0;
    (%475,)
  };
  %476() /* ty=(Tensor[(16, 1, 5), float64],) */
}

def @func_8064() -> (Tensor[(16, 1, 5), float64],) {
  %477 = @func_6866() /* ty=Tensor[(16, 1, 5), float64] */;
  (%477,)
}

def @func_4735(%var_4732: Tensor[(24), bool], %var_4733: float64, %var_4734: Tensor[(224), float64]) -> (Tensor[(1512), float32], Tensor[(24), bool], float64, Tensor[(224), float64], Tensor[(9, 3, 10), int32]) {
  @func_4730(%var_4732, %var_4733, %var_4734) /* ty=(Tensor[(1512), float32], Tensor[(24), bool], float64, Tensor[(224), float64], Tensor[(9, 3, 10), int32]) */
}

def @func_9606() -> Tensor[(16, 7, 2), uint32] {
  %479 = fn () -> Tensor[(16, 7, 2), uint32] {
    %478 = @func_9318() /* ty=(Tensor[(16, 7, 2), uint32], Tensor[(9, 12, 9), bool], Tensor[(972), float64]) */;
    %478.0
  };
  %479() /* ty=Tensor[(16, 7, 2), uint32] */
}

def @func_6867() -> Tensor[(16, 1, 5), float64] {
  %483 = fn () -> Tensor[(16, 1, 5), float64] {
    %480 = @func_5938() /* ty=(Tensor[(16, 1, 5), float64],) */;
    %481 = %480.0;
    %482 = cast(%481, dtype="float64") /* ty=Tensor[(16, 1, 5), float64] */;
    tan(%482) /* ty=Tensor[(16, 1, 5), float64] */
  };
  %483() /* ty=Tensor[(16, 1, 5), float64] */
}

def @func_1172(%var_1155: float64, %var_1156: Tensor[(13, 4, 13), float64]) -> (Tensor[(13, 4, 13), float64],) {
  %484 = cast(%var_1155, dtype="float64") /* ty=float64 */;
  %485 = cast(%var_1156, dtype="float64") /* ty=Tensor[(13, 4, 13), float64] */;
  %486 = mod(%484, %485) /* ty=Tensor[(13, 4, 13), float64] */;
  (%486,)
}

def @func_4667(%var_4665: Tensor[(5, 6, 8), float64]) -> (Tensor[(5, 6, 8), float32],) {
  @func_4664(%var_4665) /* ty=(Tensor[(5, 6, 8), float32],) */
}

def @func_10406() -> Tensor[(16, 1, 5), float64] {
  %488 = fn () -> Tensor[(16, 1, 5), float64] {
    %487 = @func_9568() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(9, 12, 9), uint32], Tensor[(9, 12, 9), float32]) */;
    %487.0
  };
  %488() /* ty=Tensor[(16, 1, 5), float64] */
}

def @func_3005(%var_3004: Tensor[(4, 10, 13), float64]) -> (Tensor[(4, 10, 13), float64],) {
  %491 = fn (%var_2989: Tensor[(4, 10, 13), float64]) -> (Tensor[(4, 10, 13), float64],) {
    %489 = cast(%var_2989, dtype="float64") /* ty=Tensor[(4, 10, 13), float64] */;
    %490 = acosh(%489) /* ty=Tensor[(4, 10, 13), float64] */;
    (%490,)
  };
  %491(%var_3004) /* ty=(Tensor[(4, 10, 13), float64],) */
}

def @func_6248(%var_6221: Tensor[(24), bool]) -> (Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(4, 7, 8), bool], Tensor[(32, 224), int16], Tensor[(24), bool], Tensor[(24), bool], float64, Tensor[(16, 14, 11), float32], Tensor[(2464), float64]) {
  %492 = @func_6114() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %493 = @func_6114() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %494 = cast(meta[relay.Constant][32] /* ty=Tensor[(32, 1), uint16] */, dtype="uint16") /* ty=Tensor[(32, 1), uint16] */;
  %495 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 224), uint16] */, dtype="uint16") /* ty=Tensor[(1, 224), uint16] */;
  %496 = reshape(%494, newshape=[4, 1, 8]) /* ty=Tensor[(4, 1, 8), uint16] */;
  %497 = reshape(%495, newshape=[4, 7, 8]) /* ty=Tensor[(4, 7, 8), uint16] */;
  %498 = @func_2693(%496, %497) /* ty=(Tensor[(4, 7, 8), bool],) */;
  %499 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 224), uint16] */, dtype="int16") /* ty=Tensor[(1, 224), int16] */;
  %500 = cast(meta[relay.Constant][32] /* ty=Tensor[(32, 1), uint16] */, dtype="int16") /* ty=Tensor[(32, 1), int16] */;
  %501 = cast(%var_6221, dtype="bool") /* ty=Tensor[(24), bool] */;
  %502 = cast(8.99978f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %503 = %498.0;
  %504 = cast(%503, dtype="float64") /* ty=Tensor[(4, 7, 8), float64] */;
  %505 = reshape(%501, newshape=[24]) /* ty=Tensor[(24), bool] */;
  %506 = reshape(%502, newshape=[]) /* ty=float64 */;
  %507 = reshape(%504, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %508 = @func_4730(%505, %506, %507) /* ty=(Tensor[(1512), float32], Tensor[(24), bool], float64, Tensor[(224), float64], Tensor[(9, 3, 10), int32]) */;
  %509 = cast(meta[relay.Constant][34] /* ty=Tensor[(2464), float64] */, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %510 = cast(meta[relay.Constant][34] /* ty=Tensor[(2464), float64] */, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %511 = reshape(%509, newshape=[16, 14, 11]) /* ty=Tensor[(16, 14, 11), float64] */;
  %512 = reshape(%510, newshape=[16, 14, 11]) /* ty=Tensor[(16, 14, 11), float64] */;
  %513 = @func_3290(%511, %512) /* ty=(Tensor[(16, 14, 11), float64], Tensor[(16, 14, 11), float32]) */;
  %514 = %492.0;
  %515 = %493.0;
  %516 = bitwise_and(%499, %500) /* ty=Tensor[(32, 224), int16] */;
  %517 = %508.1;
  %518 = %513.1;
  (%514, %515, %503, %516, %517, %var_6221, 8.99978f64 /* ty=float64 */, %518, meta[relay.Constant][34] /* ty=Tensor[(2464), float64] */)
}

def @func_9817(%var_9816: Tensor[(60), uint16]) -> (Tensor[(16, 1, 5), float64], Tensor[(2, 5, 6), uint16], Tensor[(60), uint16], Tensor[(4, 120), bool]) {
  %544 = fn (%var_9797: Tensor[(60), uint16]) -> (Tensor[(16, 1, 5), float64], Tensor[(2, 5, 6), uint16], Tensor[(60), uint16], Tensor[(4, 120), bool]) {
    %519 = @func_7549() /* ty=(Tensor[(16, 1, 5), float64],) */;
    %520 = cast(%var_9797, dtype="uint16") /* ty=Tensor[(60), uint16] */;
    %521 = cast(%var_9797, dtype="uint16") /* ty=Tensor[(60), uint16] */;
    %522 = reshape(%520, newshape=[2, 5, 6]) /* ty=Tensor[(2, 5, 6), uint16] */;
    %523 = reshape(%521, newshape=[2, 5, 6]) /* ty=Tensor[(2, 5, 6), uint16] */;
    %524 = cast(meta[relay.Constant][35] /* ty=Tensor[(4, 120), float64] */, dtype="float32") /* ty=Tensor[(4, 120), float32] */;
    %525 = exp(%524) /* ty=Tensor[(4, 120), float32] */;
    %526 = cast(%525, dtype="float64") /* ty=Tensor[(4, 120), float64] */;
    %527 = sigmoid(%526) /* ty=Tensor[(4, 120), float64] */;
    %528 = cast(meta[relay.Constant][35] /* ty=Tensor[(4, 120), float64] */, dtype="float64") /* ty=Tensor[(4, 120), float64] */;
    %529 = reshape(%528, newshape=[12, 8, 5]) /* ty=Tensor[(12, 8, 5), float64] */;
    %530 = @func_8405(%529) /* ty=(Tensor[(12, 8, 5), float32],) */;
    %531 = %530.0;
    %532 = cast(%531, dtype="uint16") /* ty=Tensor[(12, 8, 5), uint16] */;
    %533 = shape_of(%527, dtype="int32") /* ty=Tensor[(2), int32] */;
    %534 = cast(%527, dtype="uint16") /* ty=Tensor[(4, 120), uint16] */;
    %535 = dyn.reshape(%532, %533, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    %536 = right_shift(%534, %535) /* ty=Tensor[(4, 120), uint16] */;
    %537 = cast(%525, dtype="bool") /* ty=Tensor[(4, 120), bool] */;
    %538 = shape_of(%536, dtype="int32") /* ty=Tensor[(2), int32] */;
    %539 = cast(%536, dtype="bool") /* ty=Tensor[(4, 120), bool] */;
    %540 = dyn.reshape(%537, %538, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %541 = %519.0;
    %542 = @func_672(%522, %523) /* ty=Tensor[(2, 5, 6), uint16] */;
    %543 = logical_and(%539, %540) /* ty=Tensor[(4, 120), bool] */;
    (%541, %542, %var_9797, %543)
  };
  %544(%var_9816) /* ty=(Tensor[(16, 1, 5), float64], Tensor[(2, 5, 6), uint16], Tensor[(60), uint16], Tensor[(4, 120), bool]) */
}

def @func_6018(%var_6016: Tensor[(196), float64], %var_6017: Tensor[(4, 7, 7), float64]) -> (Tensor[(16, 1, 5), float64], Tensor[(196), float64], Tensor[(4, 7, 7), float32]) {
  %555 = fn (%var_5985: Tensor[(196), float64], %var_5996: Tensor[(4, 7, 7), float64]) -> (Tensor[(16, 1, 5), float64], Tensor[(196), float64], Tensor[(4, 7, 7), float32]) {
    %545 = @func_5938() /* ty=(Tensor[(16, 1, 5), float64],) */;
    %546 = cast(%var_5985, dtype="float64") /* ty=Tensor[(196), float64] */;
    %547 = reshape(%546, newshape=[4, 7, 7]) /* ty=Tensor[(4, 7, 7), float64] */;
    %548 = @func_746(%547) /* ty=Tensor[(4, 7, 7), float64] */;
    %549 = cast(%var_5996, dtype="float32") /* ty=Tensor[(4, 7, 7), float32] */;
    %550 = shape_of(%548, dtype="int32") /* ty=Tensor[(3), int32] */;
    %551 = cast(%548, dtype="float32") /* ty=Tensor[(4, 7, 7), float32] */;
    %552 = dyn.reshape(%549, %550, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %553 = %545.0;
    %554 = divide(%551, %552) /* ty=Tensor[(4, 7, 7), float32] */;
    (%553, %var_5985, %554)
  };
  %555(%var_6016, %var_6017) /* ty=(Tensor[(16, 1, 5), float64], Tensor[(196), float64], Tensor[(4, 7, 7), float32]) */
}

def @func_2326(%var_2325: Tensor[(1, 11, 1), int8]) -> (Tensor[(1, 11, 1), int8],) {
  %559 = fn (%var_2319: Tensor[(1, 11, 1), int8]) -> (Tensor[(1, 11, 1), int8],) {
    %556 = cast(meta[relay.Constant][36] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %557 = cast(%var_2319, dtype="int8") /* ty=Tensor[(1, 11, 1), int8] */;
    %558 = bitwise_and(%556, %557) /* ty=Tensor[(1, 11, 1), int8] */;
    (%558,)
  };
  %559(%var_2325) /* ty=(Tensor[(1, 11, 1), int8],) */
}

def @func_7551() -> (Tensor[(16, 1, 5), float64],) {
  @func_7549() /* ty=(Tensor[(16, 1, 5), float64],) */
}

def @func_9013() -> (Tensor[(12, 32), float64],) {
  %560 = @func_7979() /* ty=(Tensor[(12, 32), float64], Tensor[(12, 32), float64]) */;
  %561 = %560.1;
  (%561,)
}

def @func_10351() -> Tensor[(12, 32), float64] {
  %563 = fn () -> Tensor[(12, 32), float64] {
    %562 = @func_9013() /* ty=(Tensor[(12, 32), float64],) */;
    %562.0
  };
  %563() /* ty=Tensor[(12, 32), float64] */
}

def @func_4730(%var_4715: Tensor[(24), bool], %var_4716: float64, %var_4717: Tensor[(224), float64]) -> (Tensor[(1512), float32], Tensor[(24), bool], float64, Tensor[(224), float64], Tensor[(9, 3, 10), int32]) {
  %564 = cast(%var_4715, dtype="bool") /* ty=Tensor[(24), bool] */;
  %565 = cast(%var_4715, dtype="bool") /* ty=Tensor[(24), bool] */;
  %566 = cast(%var_4716, dtype="float64") /* ty=float64 */;
  %567 = cast(%var_4717, dtype="float64") /* ty=Tensor[(224), float64] */;
  %568 = reshape(%564, newshape=[2, 2, 6]) /* ty=Tensor[(2, 2, 6), bool] */;
  %569 = reshape(%565, newshape=[2, 2, 6]) /* ty=Tensor[(2, 2, 6), bool] */;
  %570 = reshape(%566, newshape=[]) /* ty=float64 */;
  %571 = reshape(%567, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %572 = @func_236(%568, %569, %570, %571) /* ty=(Tensor[(2, 2, 6), bool], Tensor[(12, 14, 9), float64], Tensor[(2, 2, 6), float32], Tensor[(16, 7, 2), uint32], float64, Tensor[(224), float64], Tensor[(1512), float32]) */;
  %573 = cast(meta[relay.Constant][37] /* ty=Tensor[(9, 3, 10), float32] */, dtype="float32") /* ty=Tensor[(9, 3, 10), float32] */;
  %574 = sqrt(%573) /* ty=Tensor[(9, 3, 10), float32] */;
  %575 = cast(meta[relay.Constant][37] /* ty=Tensor[(9, 3, 10), float32] */, dtype="int32") /* ty=Tensor[(9, 3, 10), int32] */;
  %576 = shape_of(%574, dtype="int32") /* ty=Tensor[(3), int32] */;
  %577 = cast(%574, dtype="int32") /* ty=Tensor[(9, 3, 10), int32] */;
  %578 = dyn.reshape(%575, %576, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %579 = %572.6;
  %580 = multiply(%577, %578) /* ty=Tensor[(9, 3, 10), int32] */;
  (%579, %var_4715, %var_4716, %var_4717, %580)
}

def @func_10935(%var_10933: Tensor[(480), float64], %var_10934: Tensor[(12, 32), float32]) -> (Tensor[(12, 8, 5), float32], Tensor[(480), float64], Tensor[(12, 32), int16], Tensor[(16, 1, 5), float64], Tensor[(12, 32), int16], float64, float64) {
  %605 = fn (%var_10852: Tensor[(480), float64], %var_10863: Tensor[(12, 32), float32]) -> (Tensor[(12, 8, 5), float32], Tensor[(480), float64], Tensor[(12, 32), int16], Tensor[(16, 1, 5), float64], Tensor[(12, 32), int16], float64, float64) {
    %581 = cast(%var_10852, dtype="float64") /* ty=Tensor[(480), float64] */;
    %582 = reshape(%581, newshape=[12, 8, 5]) /* ty=Tensor[(12, 8, 5), float64] */;
    %583 = @func_8405(%582) /* ty=(Tensor[(12, 8, 5), float32],) */;
    %584 = @func_9881() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(12, 32), float32]) */;
    %585 = %584.1;
    %586 = cast(%var_10863, dtype="int16") /* ty=Tensor[(12, 32), int16] */;
    %587 = shape_of(%585, dtype="int32") /* ty=Tensor[(2), int32] */;
    %588 = cast(%585, dtype="int16") /* ty=Tensor[(12, 32), int16] */;
    %589 = dyn.reshape(%586, %587, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %590 = @func_8457() /* ty=(Tensor[(16, 1, 5), float64],) */;
    %591 = cast(%585, dtype="int16") /* ty=Tensor[(12, 32), int16] */;
    %592 = shape_of(%var_10863, dtype="int32") /* ty=Tensor[(2), int32] */;
    %593 = cast(%var_10863, dtype="int16") /* ty=Tensor[(12, 32), int16] */;
    %594 = dyn.reshape(%591, %592, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %595 = cast(%585, dtype="float64") /* ty=Tensor[(12, 32), float64] */;
    %596 = cast(8.32085f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %597 = reshape(%595, newshape=[12, 32]) /* ty=Tensor[(12, 32), float64] */;
    %598 = reshape(%596, newshape=[]) /* ty=float64 */;
    %599 = @func_9163(%597, %598) /* ty=(Tensor[(224), float64], Tensor[(12, 32), uint32], Tensor[(16, 7, 2), uint32], float64) */;
    %600 = %583.0;
    %601 = right_shift(%588, %589) /* ty=Tensor[(12, 32), int16] */;
    %602 = %590.0;
    %603 = maximum(%593, %594) /* ty=Tensor[(12, 32), int16] */;
    %604 = %599.3;
    (%600, %var_10852, %601, %602, %603, %604, 8.32085f64 /* ty=float64 */)
  };
  %605(%var_10933, %var_10934) /* ty=(Tensor[(12, 8, 5), float32], Tensor[(480), float64], Tensor[(12, 32), int16], Tensor[(16, 1, 5), float64], Tensor[(12, 32), int16], float64, float64) */
}

def @func_10817() -> (Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(12, 32), float32]) {
  %606 = @func_6114() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %607 = %606.0;
  %608 = @func_6492() /* ty=Tensor[(16, 1, 5), float64] */;
  %609 = @func_8007() /* ty=Tensor[(12, 32), float32] */;
  (%607, %608, %609)
}

def @func_7160() -> Tensor[(16, 1, 5), float64] {
  %611 = fn () -> Tensor[(16, 1, 5), float64] {
    %610 = @func_6756() /* ty=(Tensor[(16, 1, 5), float64],) */;
    %610.0
  };
  %611() /* ty=Tensor[(16, 1, 5), float64] */
}

def @func_7091(%var_7085: float64, %var_7086: Tensor[(224), float64], %var_7087: Tensor[(196), float64], %var_7088: Tensor[(520), float64], %var_7089: Tensor[(1512), float64], %var_7090: Tensor[(135), float32]) -> (float64, Tensor[(12, 2), bool], Tensor[(224), float64], Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(4, 7, 7), float64], Tensor[(196), float64], Tensor[(16, 1, 5), float64], Tensor[(4, 10, 13), float64], Tensor[(520), float64], Tensor[(12, 14, 9), float64], Tensor[(1512), float64], Tensor[(3, 5, 9), float32], Tensor[(135), float32]) {
  @func_7083(%var_7085, %var_7086, %var_7087, %var_7088, %var_7089, %var_7090) /* ty=(float64, Tensor[(12, 2), bool], Tensor[(224), float64], Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(4, 7, 7), float64], Tensor[(196), float64], Tensor[(16, 1, 5), float64], Tensor[(4, 10, 13), float64], Tensor[(520), float64], Tensor[(12, 14, 9), float64], Tensor[(1512), float64], Tensor[(3, 5, 9), float32], Tensor[(135), float32]) */
}

def @func_10819() -> (Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(12, 32), float32]) {
  @func_10817() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(12, 32), float32]) */
}

def @func_9980() -> (Tensor[(16, 1, 5), float64],) {
  @func_9978() /* ty=(Tensor[(16, 1, 5), float64],) */
}

def @func_672(%var_664: Tensor[(2, 5, 6), uint16], %var_665: Tensor[(2, 5, 6), uint16]) -> Tensor[(2, 5, 6), uint16] {
  %612 = cast(%var_665, dtype="uint16") /* ty=Tensor[(2, 5, 6), uint16] */;
  %613 = shape_of(%var_664, dtype="int32") /* ty=Tensor[(3), int32] */;
  %614 = cast(%var_664, dtype="uint16") /* ty=Tensor[(2, 5, 6), uint16] */;
  %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  minimum(%614, %615) /* ty=Tensor[(2, 5, 6), uint16] */
}

def @main(%var_11091: Tensor[(13, 11, 11), uint32]) -> (Tensor[(13, 11, 11), uint32],) {
  %616 = cast(%var_11091, dtype="uint32") /* ty=Tensor[(13, 11, 11), uint32] */;
  %617 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(13, 11, 11), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %618 = cast(meta[relay.Constant][38] /* ty=Tensor[(13, 11, 11), uint32] */, dtype="uint32") /* ty=Tensor[(13, 11, 11), uint32] */;
  %619 = dyn.reshape(%616, %617, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %620 = left_shift(%618, %619) /* ty=Tensor[(13, 11, 11), uint32] */;
  (%620,)
}

def @func_9881() -> (Tensor[(16, 1, 5), float64], Tensor[(12, 32), float32]) {
  %621 = @func_6709() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(12, 32), float32], Tensor[(12, 32), float32]) */;
  %622 = @func_6492() /* ty=Tensor[(16, 1, 5), float64] */;
  %623 = %621.2;
  (%622, %623)
}

def @func_2864(%var_2861: Tensor[(6, 3, 14), float32], %var_2862: Tensor[(224), uint16], %var_2863: Tensor[(24), bool]) -> (Tensor[(6, 3, 14), float64], Tensor[(4, 7, 8), bool], Tensor[(32), uint16], Tensor[(224), uint16], Tensor[(13, 4, 13), float64], float64, Tensor[(676), float64], Tensor[(16, 7, 2), uint32], Tensor[(260), int32], Tensor[(24), bool]) {
  @func_2859(%var_2861, %var_2862, %var_2863) /* ty=(Tensor[(6, 3, 14), float64], Tensor[(4, 7, 8), bool], Tensor[(32), uint16], Tensor[(224), uint16], Tensor[(13, 4, 13), float64], float64, Tensor[(676), float64], Tensor[(16, 7, 2), uint32], Tensor[(260), int32], Tensor[(24), bool]) */
}

def @func_3290(%var_3277: Tensor[(16, 14, 11), float64], %var_3278: Tensor[(16, 14, 11), float64]) -> (Tensor[(16, 14, 11), float64], Tensor[(16, 14, 11), float32]) {
  %624 = cast(%var_3278, dtype="float64") /* ty=Tensor[(16, 14, 11), float64] */;
  %625 = shape_of(%var_3277, dtype="int32") /* ty=Tensor[(3), int32] */;
  %626 = cast(%var_3277, dtype="float64") /* ty=Tensor[(16, 14, 11), float64] */;
  %627 = dyn.reshape(%624, %625, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %628 = cast(%var_3277, dtype="float64") /* ty=Tensor[(16, 14, 11), float64] */;
  %629 = erf(%628) /* ty=Tensor[(16, 14, 11), float64] */;
  %630 = cast(%629, dtype="float32") /* ty=Tensor[(16, 14, 11), float32] */;
  %631 = divide(%626, %627) /* ty=Tensor[(16, 14, 11), float64] */;
  %632 = exp(%630) /* ty=Tensor[(16, 14, 11), float32] */;
  (%631, %632)
}

def @func_7362() -> (Tensor[(16, 1, 5), float64], Tensor[(16, 7, 2), uint32], float64, Tensor[(224), float64], Tensor[(16, 1, 5), float64]) {
  @func_7360() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 7, 2), uint32], float64, Tensor[(224), float64], Tensor[(16, 1, 5), float64]) */
}

def @func_9296() -> Tensor[(16, 1, 5), float64] {
  @func_9294() /* ty=Tensor[(16, 1, 5), float64] */
}

def @func_2696(%var_2694: Tensor[(4, 1, 8), uint16], %var_2695: Tensor[(4, 7, 8), uint16]) -> (Tensor[(4, 7, 8), bool],) {
  %636 = fn (%var_2674: Tensor[(4, 1, 8), uint16], %var_2675: Tensor[(4, 7, 8), uint16]) -> (Tensor[(4, 7, 8), bool],) {
    %633 = cast(%var_2674, dtype="bool") /* ty=Tensor[(4, 1, 8), bool] */;
    %634 = cast(%var_2675, dtype="bool") /* ty=Tensor[(4, 7, 8), bool] */;
    %635 = not_equal(%633, %634) /* ty=Tensor[(4, 7, 8), bool] */;
    (%635,)
  };
  %636(%var_2694, %var_2695) /* ty=(Tensor[(4, 7, 8), bool],) */
}

def @func_6711() -> (Tensor[(16, 1, 5), float64], Tensor[(12, 32), float32], Tensor[(12, 32), float32]) {
  @func_6709() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(12, 32), float32], Tensor[(12, 32), float32]) */
}

def @func_7083(%var_6990: float64, %var_6991: Tensor[(224), float64], %var_7019: Tensor[(196), float64], %var_7034: Tensor[(520), float64], %var_7056: Tensor[(1512), float64], %var_7081: Tensor[(135), float32]) -> (float64, Tensor[(12, 2), bool], Tensor[(224), float64], Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(4, 7, 7), float64], Tensor[(196), float64], Tensor[(16, 1, 5), float64], Tensor[(4, 10, 13), float64], Tensor[(520), float64], Tensor[(12, 14, 9), float64], Tensor[(1512), float64], Tensor[(3, 5, 9), float32], Tensor[(135), float32]) {
  %637 = cast(meta[relay.Constant][39] /* ty=Tensor[(12, 2), bool] */, dtype="bool") /* ty=Tensor[(12, 2), bool] */;
  %638 = cast(meta[relay.Constant][39] /* ty=Tensor[(12, 2), bool] */, dtype="bool") /* ty=Tensor[(12, 2), bool] */;
  %639 = cast(%var_6990, dtype="float64") /* ty=float64 */;
  %640 = cast(%var_6991, dtype="float64") /* ty=Tensor[(224), float64] */;
  %641 = reshape(%637, newshape=[2, 2, 6]) /* ty=Tensor[(2, 2, 6), bool] */;
  %642 = reshape(%638, newshape=[2, 2, 6]) /* ty=Tensor[(2, 2, 6), bool] */;
  %643 = reshape(%639, newshape=[]) /* ty=float64 */;
  %644 = reshape(%640, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %645 = @func_236(%641, %642, %643, %644) /* ty=(Tensor[(2, 2, 6), bool], Tensor[(12, 14, 9), float64], Tensor[(2, 2, 6), float32], Tensor[(16, 7, 2), uint32], float64, Tensor[(224), float64], Tensor[(1512), float32]) */;
  %646 = @func_6617() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %647 = @func_5938() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %648 = cast(%var_7019, dtype="float64") /* ty=Tensor[(196), float64] */;
  %649 = reshape(%648, newshape=[4, 7, 7]) /* ty=Tensor[(4, 7, 7), float64] */;
  %650 = @func_6492() /* ty=Tensor[(16, 1, 5), float64] */;
  %651 = cast(%650, dtype="uint32") /* ty=Tensor[(16, 1, 5), uint32] */;
  %652 = cast(%var_6990, dtype="uint32") /* ty=uint32 */;
  %653 = minimum(%651, %652) /* ty=Tensor[(16, 1, 5), uint32] */;
  %654 = cast(%653, dtype="float64") /* ty=Tensor[(16, 1, 5), float64] */;
  %655 = cast(%var_7034, dtype="float64") /* ty=Tensor[(520), float64] */;
  %656 = reshape(%655, newshape=[4, 10, 13]) /* ty=Tensor[(4, 10, 13), float64] */;
  %657 = @func_3003(%656) /* ty=(Tensor[(4, 10, 13), float64],) */;
  %658 = cast(%var_7056, dtype="float64") /* ty=Tensor[(1512), float64] */;
  %659 = reshape(%658, newshape=[12, 14, 9]) /* ty=Tensor[(12, 14, 9), float64] */;
  %660 = %645.4;
  %661 = cast(%660, dtype="float32") /* ty=float32 */;
  %662 = cast(%var_7081, dtype="float32") /* ty=Tensor[(135), float32] */;
  %663 = reshape(%661, newshape=[]) /* ty=float32 */;
  %664 = reshape(%662, newshape=[3, 5, 9]) /* ty=Tensor[(3, 5, 9), float32] */;
  %665 = %646.0;
  %666 = %647.0;
  %667 = @func_746(%649) /* ty=Tensor[(4, 7, 7), float64] */;
  %668 = cosh(%654) /* ty=Tensor[(16, 1, 5), float64] */;
  %669 = %657.0;
  %670 = @func_31(%659) /* ty=Tensor[(12, 14, 9), float64] */;
  %671 = @func_2721(%663, %664) /* ty=Tensor[(3, 5, 9), float32] */;
  (%660, meta[relay.Constant][39] /* ty=Tensor[(12, 2), bool] */, %var_6991, %665, %666, %667, %var_7019, %668, %669, %var_7034, %670, %var_7056, %671, %var_7081)
}

def @func_10580() -> Tensor[(56, 8), int32] {
  @func_10234() /* ty=Tensor[(56, 8), int32] */
}

def @func_2230(%var_2225: Tensor[(2, 10, 13), int32], %var_2226: Tensor[(2, 10, 13), int32], %var_2227: Tensor[(24), bool], %var_2228: float64, %var_2229: Tensor[(224), float64]) -> (Tensor[(2, 10, 13), bool], Tensor[(1512), float32], Tensor[(24), bool], float64, Tensor[(224), float64], Tensor[(16, 7, 2), uint32], Tensor[(12, 14, 9), float64]) {
  @func_2223(%var_2225, %var_2226, %var_2227, %var_2228, %var_2229) /* ty=(Tensor[(2, 10, 13), bool], Tensor[(1512), float32], Tensor[(24), bool], float64, Tensor[(224), float64], Tensor[(16, 7, 2), uint32], Tensor[(12, 14, 9), float64]) */
}

def @func_9843() -> (Tensor[(16, 1, 5), float64], Tensor[(4, 6, 14), int32], Tensor[(2, 168), float32]) {
  @func_9841() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(4, 6, 14), int32], Tensor[(2, 168), float32]) */
}

def @func_8147(%var_8145: Tensor[(11), int8]) -> (Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(1, 11, 1), int8], Tensor[(11), int8]) {
  %672 = cast(%var_8145, dtype="int8") /* ty=Tensor[(11), int8] */;
  %673 = reshape(%672, newshape=[1, 11, 1]) /* ty=Tensor[(1, 11, 1), int8] */;
  %674 = @func_2324(%673) /* ty=(Tensor[(1, 11, 1), int8],) */;
  %675 = @func_7159() /* ty=Tensor[(16, 1, 5), float64] */;
  %676 = @func_6492() /* ty=Tensor[(16, 1, 5), float64] */;
  %677 = %674.0;
  (%675, %676, %677, %var_8145)
}

def @func_11024(%var_10986: Tensor[(15, 9, 10), float32], %var_11014: Tensor[(24), bool], %var_11015: Tensor[(1, 224), float64]) -> (Tensor[(15, 9, 10), float32], Tensor[(16, 9, 5), uint8], Tensor[(12, 60), float64], Tensor[(16, 7, 2), uint32], bool, Tensor[(24), bool], Tensor[(1, 224), float64], Tensor[(16, 7, 2), uint32]) {
  %678 = cast(%var_10986, dtype="float32") /* ty=Tensor[(15, 9, 10), float32] */;
  %679 = cast(meta[relay.Constant][40] /* ty=Tensor[(12, 60), float64] */, dtype="float64") /* ty=Tensor[(12, 60), float64] */;
  %680 = reshape(%679, newshape=[16, 9, 5]) /* ty=Tensor[(16, 9, 5), float64] */;
  %681 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %682 = cast(%var_11014, dtype="bool") /* ty=Tensor[(24), bool] */;
  %683 = cast(%var_11015, dtype="float64") /* ty=Tensor[(1, 224), float64] */;
  %684 = reshape(%681, newshape=[]) /* ty=bool */;
  %685 = reshape(%682, newshape=[1, 8, 3]) /* ty=Tensor[(1, 8, 3), bool] */;
  %686 = reshape(%683, newshape=[224]) /* ty=Tensor[(224), float64] */;
  %687 = @func_590(%684, %685, %686) /* ty=(Tensor[(1, 8, 3), bool], Tensor[(2, 2, 6), float32], Tensor[(224), float64], Tensor[(16, 7, 2), uint32], Tensor[(12, 14, 9), float64], Tensor[(1512, 1), float64]) */;
  %688 = @func_9318() /* ty=(Tensor[(16, 7, 2), uint32], Tensor[(9, 12, 9), bool], Tensor[(972), float64]) */;
  %689 = log10(%678) /* ty=Tensor[(15, 9, 10), float32] */;
  %690 = @func_6547(%680) /* ty=Tensor[(16, 9, 5), uint8] */;
  %691 = %687.3;
  %692 = %688.0;
  (%689, %690, meta[relay.Constant][40] /* ty=Tensor[(12, 60), float64] */, %691, True /* ty=bool */, %var_11014, %var_11015, %692)
}

def @func_2638(%var_2636: Tensor[(9, 12, 9), float64], %var_2637: Tensor[(9, 12, 9), float64]) -> Tensor[(9, 12, 9), bool] {
  @func_2634(%var_2636, %var_2637) /* ty=Tensor[(9, 12, 9), bool] */
}

def @func_10614() -> Tensor[(24), bool] {
  %693 = @func_7517() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(24), bool], Tensor[(252), float32], Tensor[(56, 8), int32]) */;
  %693.2
}

def @func_6493() -> Tensor[(16, 1, 5), float64] {
  %695 = fn () -> Tensor[(16, 1, 5), float64] {
    %694 = @func_5938() /* ty=(Tensor[(16, 1, 5), float64],) */;
    %694.0
  };
  %695() /* ty=Tensor[(16, 1, 5), float64] */
}

def @func_10741(%var_10739: Tensor[(11), int8]) -> (Tensor[(24), bool], Tensor[(16, 1, 5), float64], Tensor[(11), int8], float64) {
  @func_10738(%var_10739) /* ty=(Tensor[(24), bool], Tensor[(16, 1, 5), float64], Tensor[(11), int8], float64) */
}

def @func_10061() -> (Tensor[(16, 1, 5), float64],) {
  %696 = @func_6600() /* ty=Tensor[(16, 1, 5), float64] */;
  (%696,)
}

def @func_11056() -> (Tensor[(224), float64],) {
  %697 = @func_7360() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 7, 2), uint32], float64, Tensor[(224), float64], Tensor[(16, 1, 5), float64]) */;
  %698 = %697.3;
  (%698,)
}

def @func_7107(%var_7105: Tensor[(196), float64]) -> (Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(4, 7, 7), float64], Tensor[(196), float64]) {
  @func_7104(%var_7105) /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(4, 7, 7), float64], Tensor[(196), float64]) */
}

def @func_9568() -> (Tensor[(16, 1, 5), float64], Tensor[(9, 12, 9), uint32], Tensor[(9, 12, 9), float32]) {
  %699 = @func_9318() /* ty=(Tensor[(16, 7, 2), uint32], Tensor[(9, 12, 9), bool], Tensor[(972), float64]) */;
  %700 = %699.1;
  %701 = cast(meta[relay.Constant][41] /* ty=Tensor[(9, 12, 9), bool] */, dtype="float32") /* ty=Tensor[(9, 12, 9), float32] */;
  %702 = shape_of(%700, dtype="int32") /* ty=Tensor[(3), int32] */;
  %703 = cast(%700, dtype="float32") /* ty=Tensor[(9, 12, 9), float32] */;
  %704 = dyn.reshape(%701, %702, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %705 = mod(%703, %704) /* ty=Tensor[(9, 12, 9), float32] */;
  %706 = cast(%700, dtype="uint32") /* ty=Tensor[(9, 12, 9), uint32] */;
  %707 = shape_of(%705, dtype="int32") /* ty=Tensor[(3), int32] */;
  %708 = cast(%705, dtype="uint32") /* ty=Tensor[(9, 12, 9), uint32] */;
  %709 = dyn.reshape(%706, %707, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %710 = cast(meta[relay.Constant][41] /* ty=Tensor[(9, 12, 9), bool] */, dtype="float32") /* ty=Tensor[(9, 12, 9), float32] */;
  %711 = @func_9294() /* ty=Tensor[(16, 1, 5), float64] */;
  %712 = minimum(%708, %709) /* ty=Tensor[(9, 12, 9), uint32] */;
  %713 = rsqrt(%710) /* ty=Tensor[(9, 12, 9), float32] */;
  (%711, %712, %713)
}

def @func_7774(%var_7754: Tensor[(560), float64]) -> (Tensor[(16, 1, 5), float64], Tensor[(6, 4, 16), float64], Tensor[(560), float64]) {
  %714 = cast(%var_7754, dtype="float64") /* ty=Tensor[(560), float64] */;
  %715 = reshape(%714, newshape=[16, 7, 5]) /* ty=Tensor[(16, 7, 5), float64] */;
  %716 = @func_6926(%715) /* ty=(Tensor[(16, 2, 5), uint64], Tensor[(6, 4, 16), float64], Tensor[(384), float64], Tensor[(16, 7, 5), float32]) */;
  %717 = @func_6866() /* ty=Tensor[(16, 1, 5), float64] */;
  %718 = %716.1;
  (%717, %718, %var_7754)
}

def @func_9379(%var_9351: Tensor[(4, 6, 14), float32]) -> Tensor[(4, 6, 14), int32] {
  %719 = cast(%var_9351, dtype="float32") /* ty=Tensor[(4, 6, 14), float32] */;
  %720 = cosh(%719) /* ty=Tensor[(4, 6, 14), float32] */;
  %721 = cast(meta[relay.Constant][42] /* ty=Tensor[(4, 6, 14), float32] */, dtype="int32") /* ty=Tensor[(4, 6, 14), int32] */;
  %722 = shape_of(%720, dtype="int32") /* ty=Tensor[(3), int32] */;
  %723 = cast(%720, dtype="int32") /* ty=Tensor[(4, 6, 14), int32] */;
  %724 = dyn.reshape(%721, %722, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  maximum(%723, %724) /* ty=Tensor[(4, 6, 14), int32] */
}

def @func_746(%var_738: Tensor[(4, 7, 7), float64]) -> Tensor[(4, 7, 7), float64] {
  %725 = cast(%var_738, dtype="float64") /* ty=Tensor[(4, 7, 7), float64] */;
  %726 = sqrt(%725) /* ty=Tensor[(4, 7, 7), float64] */;
  %727 = cast(%726, dtype="float64") /* ty=Tensor[(4, 7, 7), float64] */;
  sin(%727) /* ty=Tensor[(4, 7, 7), float64] */
}

def @func_10709(%var_10708: Tensor[(2, 160), float64]) -> (Tensor[(16, 1, 5), float64], Tensor[(16, 6, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(2, 160), float64]) {
  %737 = fn (%var_10644: Tensor[(2, 160), float64]) -> (Tensor[(16, 1, 5), float64], Tensor[(16, 6, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(2, 160), float64]) {
    %728 = cast(%var_10644, dtype="float64") /* ty=Tensor[(2, 160), float64] */;
    %729 = reshape(%728, newshape=[16, 4, 5]) /* ty=Tensor[(16, 4, 5), float64] */;
    %730 = @func_10495(%729) /* ty=(Tensor[(16, 6, 5), float64], Tensor[(16, 4, 5), int16]) */;
    %731 = @func_6756() /* ty=(Tensor[(16, 1, 5), float64],) */;
    %732 = cast(%var_10644, dtype="float64") /* ty=Tensor[(2, 160), float64] */;
    %733 = @func_6600() /* ty=Tensor[(16, 1, 5), float64] */;
    %734 = %730.0;
    %735 = %731.0;
    %736 = sinh(%732) /* ty=Tensor[(2, 160), float64] */;
    (%733, %734, %735, %736)
  };
  %737(%var_10708) /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 6, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(2, 160), float64]) */
}

def @func_11029(%var_11026: Tensor[(15, 9, 10), float32], %var_11027: Tensor[(24), bool], %var_11028: Tensor[(1, 224), float64]) -> (Tensor[(15, 9, 10), float32], Tensor[(16, 9, 5), uint8], Tensor[(12, 60), float64], Tensor[(16, 7, 2), uint32], bool, Tensor[(24), bool], Tensor[(1, 224), float64], Tensor[(16, 7, 2), uint32]) {
  @func_11024(%var_11026, %var_11027, %var_11028) /* ty=(Tensor[(15, 9, 10), float32], Tensor[(16, 9, 5), uint8], Tensor[(12, 60), float64], Tensor[(16, 7, 2), uint32], bool, Tensor[(24), bool], Tensor[(1, 224), float64], Tensor[(16, 7, 2), uint32]) */
}

def @func_8230() -> (Tensor[(16, 1, 5), float64],) {
  %739 = fn () -> (Tensor[(16, 1, 5), float64],) {
    %738 = @func_6600() /* ty=Tensor[(16, 1, 5), float64] */;
    (%738,)
  };
  %739() /* ty=(Tensor[(16, 1, 5), float64],) */
}

def @func_9841() -> (Tensor[(16, 1, 5), float64], Tensor[(4, 6, 14), int32], Tensor[(2, 168), float32]) {
  %740 = cast(meta[relay.Constant][43] /* ty=Tensor[(2, 168), float32] */, dtype="float32") /* ty=Tensor[(2, 168), float32] */;
  %741 = reshape(%740, newshape=[4, 6, 14]) /* ty=Tensor[(4, 6, 14), float32] */;
  %742 = @func_7159() /* ty=Tensor[(16, 1, 5), float64] */;
  %743 = @func_9379(%741) /* ty=Tensor[(4, 6, 14), int32] */;
  (%742, %743, meta[relay.Constant][43] /* ty=Tensor[(2, 168), float32] */)
}

def @func_6757() -> (Tensor[(16, 1, 5), float64],) {
  %746 = fn () -> (Tensor[(16, 1, 5), float64],) {
    %744 = @func_6709() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(12, 32), float32], Tensor[(12, 32), float32]) */;
    %745 = %744.0;
    (%745,)
  };
  %746() /* ty=(Tensor[(16, 1, 5), float64],) */
}

def @func_9467() -> (Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64]) {
  %749 = fn () -> (Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64]) {
    %747 = @func_9422() /* ty=Tensor[(16, 1, 5), float64] */;
    %748 = @func_9294() /* ty=Tensor[(16, 1, 5), float64] */;
    (%747, %748)
  };
  %749() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64]) */
}

def @func_595(%var_592: bool, %var_593: Tensor[(1, 8, 3), bool], %var_594: Tensor[(224), float64]) -> (Tensor[(1, 8, 3), bool], Tensor[(2, 2, 6), float32], Tensor[(224), float64], Tensor[(16, 7, 2), uint32], Tensor[(12, 14, 9), float64], Tensor[(1512, 1), float64]) {
  @func_590(%var_592, %var_593, %var_594) /* ty=(Tensor[(1, 8, 3), bool], Tensor[(2, 2, 6), float32], Tensor[(224), float64], Tensor[(16, 7, 2), uint32], Tensor[(12, 14, 9), float64], Tensor[(1512, 1), float64]) */
}

def @func_7980() -> (Tensor[(12, 32), float64], Tensor[(12, 32), float64]) {
  %756 = fn () -> (Tensor[(12, 32), float64], Tensor[(12, 32), float64]) {
    %750 = @func_6709() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(12, 32), float32], Tensor[(12, 32), float32]) */;
    %751 = %750.1;
    %752 = cast(%751, dtype="float64") /* ty=Tensor[(12, 32), float64] */;
    %753 = cast(%751, dtype="float64") /* ty=Tensor[(12, 32), float64] */;
    %754 = asinh(%752) /* ty=Tensor[(12, 32), float64] */;
    %755 = sigmoid(%753) /* ty=Tensor[(12, 32), float64] */;
    (%754, %755)
  };
  %756() /* ty=(Tensor[(12, 32), float64], Tensor[(12, 32), float64]) */
}

def @func_1023(%var_1022: Tensor[(13, 14, 16), float32]) -> Tensor[(13, 14, 16), float32] {
  %758 = fn (%var_1014: Tensor[(13, 14, 16), float32]) -> Tensor[(13, 14, 16), float32] {
    %757 = cast(%var_1014, dtype="float32") /* ty=Tensor[(13, 14, 16), float32] */;
    atan(%757) /* ty=Tensor[(13, 14, 16), float32] */
  };
  %758(%var_1022) /* ty=Tensor[(13, 14, 16), float32] */
}

def @func_5046(%var_5043: Tensor[(11, 16, 1), float32], %var_5044: Tensor[(24), bool], %var_5045: Tensor[(1, 224), float64]) -> (Tensor[(11, 16, 1), float32], float64, Tensor[(24), bool], float64, Tensor[(1, 224), float64]) {
  %771 = fn (%var_5019: Tensor[(11, 16, 1), float32], %var_5038: Tensor[(24), bool], %var_5040: Tensor[(1, 224), float64]) -> (Tensor[(11, 16, 1), float32], float64, Tensor[(24), bool], float64, Tensor[(1, 224), float64]) {
    %759 = cast(%var_5019, dtype="float32") /* ty=Tensor[(11, 16, 1), float32] */;
    %760 = atan(%759) /* ty=Tensor[(11, 16, 1), float32] */;
    %761 = cast(%760, dtype="float32") /* ty=Tensor[(11, 16, 1), float32] */;
    %762 = cast(%var_5038, dtype="bool") /* ty=Tensor[(24), bool] */;
    %763 = cast(9.52509f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %764 = cast(%var_5040, dtype="float64") /* ty=Tensor[(1, 224), float64] */;
    %765 = reshape(%762, newshape=[24]) /* ty=Tensor[(24), bool] */;
    %766 = reshape(%763, newshape=[]) /* ty=float64 */;
    %767 = reshape(%764, newshape=[224]) /* ty=Tensor[(224), float64] */;
    %768 = @func_4730(%765, %766, %767) /* ty=(Tensor[(1512), float32], Tensor[(24), bool], float64, Tensor[(224), float64], Tensor[(9, 3, 10), int32]) */;
    %769 = erf(%761) /* ty=Tensor[(11, 16, 1), float32] */;
    %770 = %768.2;
    (%769, %770, %var_5038, 9.52509f64 /* ty=float64 */, %var_5040)
  };
  %771(%var_5043, %var_5044, %var_5045) /* ty=(Tensor[(11, 16, 1), float32], float64, Tensor[(24), bool], float64, Tensor[(1, 224), float64]) */
}

def @func_875(%var_869: Tensor[(9, 6, 13), float64]) -> (Tensor[(9, 6, 13), float64],) {
  %772 = cast(%var_869, dtype="float64") /* ty=Tensor[(9, 6, 13), float64] */;
  %773 = erf(%772) /* ty=Tensor[(9, 6, 13), float64] */;
  (%773,)
}

def @func_10738(%var_10734: Tensor[(11), int8]) -> (Tensor[(24), bool], Tensor[(16, 1, 5), float64], Tensor[(11), int8], float64) {
  %774 = cast(%var_10734, dtype="int8") /* ty=Tensor[(11), int8] */;
  %775 = reshape(%774, newshape=[11]) /* ty=Tensor[(11), int8] */;
  %776 = @func_8147(%775) /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(1, 11, 1), int8], Tensor[(11), int8]) */;
  %777 = @func_10614() /* ty=Tensor[(24), bool] */;
  %778 = cast(%777, dtype="bool") /* ty=Tensor[(24), bool] */;
  %779 = reshape(%778, newshape=[24]) /* ty=Tensor[(24), bool] */;
  %780 = @func_6248(%779) /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(4, 7, 8), bool], Tensor[(32, 224), int16], Tensor[(24), bool], Tensor[(24), bool], float64, Tensor[(16, 14, 11), float32], Tensor[(2464), float64]) */;
  %781 = %776.0;
  %782 = %780.6;
  (%777, %781, %var_10734, %782)
}

def @func_676(%var_674: Tensor[(2, 5, 6), uint16], %var_675: Tensor[(2, 5, 6), uint16]) -> Tensor[(2, 5, 6), uint16] {
  @func_672(%var_674, %var_675) /* ty=Tensor[(2, 5, 6), uint16] */
}

def @func_7777(%var_7775: Tensor[(560), float64]) -> (Tensor[(16, 1, 5), float64], Tensor[(6, 4, 16), float64], Tensor[(560), float64]) {
  @func_7774(%var_7775) /* ty=(Tensor[(16, 1, 5), float64], Tensor[(6, 4, 16), float64], Tensor[(560), float64]) */
}

def @func_7690() -> (Tensor[(16, 1, 5), float64],) {
  %783 = @func_7549() /* ty=(Tensor[(16, 1, 5), float64],) */;
  %784 = %783.0;
  (%784,)
}

def @func_4870(%var_4869: Tensor[(3, 4, 2), float32]) -> Tensor[(3, 4, 2), bool] {
  %791 = fn (%var_4850: Tensor[(3, 4, 2), float32]) -> Tensor[(3, 4, 2), bool] {
    %785 = cast(%var_4850, dtype="float32") /* ty=Tensor[(3, 4, 2), float32] */;
    %786 = log2(%785) /* ty=Tensor[(3, 4, 2), float32] */;
    %787 = cast(%var_4850, dtype="bool") /* ty=Tensor[(3, 4, 2), bool] */;
    %788 = shape_of(%786, dtype="int32") /* ty=Tensor[(3), int32] */;
    %789 = cast(%786, dtype="bool") /* ty=Tensor[(3, 4, 2), bool] */;
    %790 = dyn.reshape(%787, %788, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    equal(%789, %790) /* ty=Tensor[(3, 4, 2), bool] */
  };
  %791(%var_4869) /* ty=Tensor[(3, 4, 2), bool] */
}

def @func_9318() -> (Tensor[(16, 7, 2), uint32], Tensor[(9, 12, 9), bool], Tensor[(972), float64]) {
  %792 = @func_7360() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 7, 2), uint32], float64, Tensor[(224), float64], Tensor[(16, 1, 5), float64]) */;
  %793 = cast(meta[relay.Constant][44] /* ty=Tensor[(972), float64] */, dtype="float64") /* ty=Tensor[(972), float64] */;
  %794 = cast(meta[relay.Constant][44] /* ty=Tensor[(972), float64] */, dtype="float64") /* ty=Tensor[(972), float64] */;
  %795 = reshape(%793, newshape=[9, 12, 9]) /* ty=Tensor[(9, 12, 9), float64] */;
  %796 = reshape(%794, newshape=[9, 12, 9]) /* ty=Tensor[(9, 12, 9), float64] */;
  %797 = %792.1;
  %798 = @func_2634(%795, %796) /* ty=Tensor[(9, 12, 9), bool] */;
  (%797, %798, meta[relay.Constant][44] /* ty=Tensor[(972), float64] */)
}

def @func_9741(%var_9740: Tensor[(12, 4, 13), float64]) -> (Tensor[(12, 4, 13), float64], Tensor[(56, 8), int32]) {
  %808 = fn (%var_9714: Tensor[(12, 4, 13), float64]) -> (Tensor[(12, 4, 13), float64], Tensor[(56, 8), int32]) {
    %799 = cast(%var_9714, dtype="float64") /* ty=Tensor[(12, 4, 13), float64] */;
    %800 = atan(%799) /* ty=Tensor[(12, 4, 13), float64] */;
    %801 = cast(%800, dtype="float64") /* ty=Tensor[(12, 4, 13), float64] */;
    %802 = shape_of(%var_9714, dtype="int32") /* ty=Tensor[(3), int32] */;
    %803 = cast(%var_9714, dtype="float64") /* ty=Tensor[(12, 4, 13), float64] */;
    %804 = dyn.reshape(%801, %802, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %805 = @func_8709() /* ty=(Tensor[(56, 8), int32], Tensor[(13, 14, 16), float32], Tensor[(2912), float32]) */;
    %806 = mod(%803, %804) /* ty=Tensor[(12, 4, 13), float64] */;
    %807 = %805.0;
    (%806, %807)
  };
  %808(%var_9740) /* ty=(Tensor[(12, 4, 13), float64], Tensor[(56, 8), int32]) */
}

def @func_10063() -> (Tensor[(16, 1, 5), float64],) {
  @func_10061() /* ty=(Tensor[(16, 1, 5), float64],) */
}

def @func_11058() -> (Tensor[(224), float64],) {
  @func_11056() /* ty=(Tensor[(224), float64],) */
}

def @func_9320() -> (Tensor[(16, 7, 2), uint32], Tensor[(9, 12, 9), bool], Tensor[(972), float64]) {
  @func_9318() /* ty=(Tensor[(16, 7, 2), uint32], Tensor[(9, 12, 9), bool], Tensor[(972), float64]) */
}

def @func_8837(%var_8834: Tensor[(16, 3, 5), float64], %var_8835: Tensor[(24), bool], %var_8836: Tensor[(98, 2), float64]) -> (Tensor[(16, 3, 5), uint32], float64, Tensor[(24), bool], float64, Tensor[(224), float64], Tensor[(4, 7, 7), float64], Tensor[(98, 2), float64], Tensor[(16, 1, 5), float64]) {
  %830 = fn (%var_8773: Tensor[(16, 3, 5), float64], %var_8791: Tensor[(24), bool], %var_8813: Tensor[(98, 2), float64]) -> (Tensor[(16, 3, 5), uint32], float64, Tensor[(24), bool], float64, Tensor[(224), float64], Tensor[(4, 7, 7), float64], Tensor[(98, 2), float64], Tensor[(16, 1, 5), float64]) {
    %809 = @func_5938() /* ty=(Tensor[(16, 1, 5), float64],) */;
    %810 = %809.0;
    %811 = cast(%810, dtype="uint32") /* ty=Tensor[(16, 1, 5), uint32] */;
    %812 = cast(%var_8773, dtype="uint32") /* ty=Tensor[(16, 3, 5), uint32] */;
    %813 = cast(%var_8791, dtype="bool") /* ty=Tensor[(24), bool] */;
    %814 = cast(%var_8791, dtype="bool") /* ty=Tensor[(24), bool] */;
    %815 = cast(-9.39859f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %816 = cast(meta[relay.Constant][45] /* ty=Tensor[(224), float64] */, dtype="float64") /* ty=Tensor[(224), float64] */;
    %817 = reshape(%813, newshape=[2, 2, 6]) /* ty=Tensor[(2, 2, 6), bool] */;
    %818 = reshape(%814, newshape=[2, 2, 6]) /* ty=Tensor[(2, 2, 6), bool] */;
    %819 = reshape(%815, newshape=[]) /* ty=float64 */;
    %820 = reshape(%816, newshape=[224]) /* ty=Tensor[(224), float64] */;
    %821 = @func_236(%817, %818, %819, %820) /* ty=(Tensor[(2, 2, 6), bool], Tensor[(12, 14, 9), float64], Tensor[(2, 2, 6), float32], Tensor[(16, 7, 2), uint32], float64, Tensor[(224), float64], Tensor[(1512), float32]) */;
    %822 = cast(%var_8813, dtype="float64") /* ty=Tensor[(98, 2), float64] */;
    %823 = reshape(%822, newshape=[196]) /* ty=Tensor[(196), float64] */;
    %824 = @func_7104(%823) /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(4, 7, 7), float64], Tensor[(196), float64]) */;
    %825 = @func_6734() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64]) */;
    %826 = bitwise_or(%811, %812) /* ty=Tensor[(16, 3, 5), uint32] */;
    %827 = %821.4;
    %828 = %824.2;
    %829 = %825.1;
    (%826, %827, %var_8791, -9.39859f64 /* ty=float64 */, meta[relay.Constant][45] /* ty=Tensor[(224), float64] */, %828, %var_8813, %829)
  };
  %830(%var_8834, %var_8835, %var_8836) /* ty=(Tensor[(16, 3, 5), uint32], float64, Tensor[(24), bool], float64, Tensor[(224), float64], Tensor[(4, 7, 7), float64], Tensor[(98, 2), float64], Tensor[(16, 1, 5), float64]) */
}

def @func_7518() -> (Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(24), bool], Tensor[(252), float32], Tensor[(56, 8), int32]) {
  %842 = fn () -> (Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(24), bool], Tensor[(252), float32], Tensor[(56, 8), int32]) {
    %831 = cast(meta[relay.Constant][46] /* ty=Tensor[(24), bool] */, dtype="bool") /* ty=Tensor[(24), bool] */;
    %832 = reshape(%831, newshape=[24]) /* ty=Tensor[(24), bool] */;
    %833 = @func_7234(%832) /* ty=(Tensor[(16, 1, 5), float64], Tensor[(1512), int32], Tensor[(924), bool], Tensor[(24), bool], Tensor[(448), int32], Tensor[(16, 1, 5), float64]) */;
    %834 = cast(meta[relay.Constant][47] /* ty=Tensor[(56, 8), int32] */, dtype="int32") /* ty=Tensor[(56, 8), int32] */;
    %835 = cast(meta[relay.Constant][46] /* ty=Tensor[(24), bool] */, dtype="bool") /* ty=Tensor[(24), bool] */;
    %836 = reshape(%834, newshape=[14, 16, 2]) /* ty=Tensor[(14, 16, 2), int32] */;
    %837 = reshape(%835, newshape=[2, 12]) /* ty=Tensor[(2, 12), bool] */;
    %838 = @func_3396(%836, %837) /* ty=(Tensor[(14, 16, 2), int32], Tensor[(13, 4, 13), float64], Tensor[(252), float32], Tensor[(224), uint16], Tensor[(2, 12), bool]) */;
    %839 = @func_7159() /* ty=Tensor[(16, 1, 5), float64] */;
    %840 = %833.5;
    %841 = %838.2;
    (%839, %840, meta[relay.Constant][46] /* ty=Tensor[(24), bool] */, %841, meta[relay.Constant][47] /* ty=Tensor[(56, 8), int32] */)
  };
  %842() /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float64], Tensor[(24), bool], Tensor[(252), float32], Tensor[(56, 8), int32]) */
}

def @func_94(%var_73: float64, %var_74: Tensor[(16, 7, 2), float64]) -> Tensor[(16, 7, 2), uint32] {
  %843 = cast(%var_73, dtype="float64") /* ty=float64 */;
  %844 = cast(%var_74, dtype="float64") /* ty=Tensor[(16, 7, 2), float64] */;
  %845 = divide(%843, %844) /* ty=Tensor[(16, 7, 2), float64] */;
  %846 = cast(%845, dtype="uint32") /* ty=Tensor[(16, 7, 2), uint32] */;
  %847 = shape_of(%var_74, dtype="int32") /* ty=Tensor[(3), int32] */;
  %848 = cast(%var_74, dtype="uint32") /* ty=Tensor[(16, 7, 2), uint32] */;
  %849 = dyn.reshape(%846, %847, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  right_shift(%848, %849) /* ty=Tensor[(16, 7, 2), uint32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen654/build/output.py:2276: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen654/build/output.py", line 2281, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(1024) tvmgen_default_fused_reshape_left_shift_kernel0(uint* __restrict__ T_left_shift, uint* __restrict__ placeholder, uint* __restrict__ placeholder1) {
  if (((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) < 1573) {
    T_left_shift[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))] = (placeholder[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))] << placeholder1[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))]);
  }
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

