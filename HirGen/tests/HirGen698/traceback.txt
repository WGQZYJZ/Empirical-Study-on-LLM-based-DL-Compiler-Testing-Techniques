==========mod==========
#[version = "0.0.5"]
def @func_3044() -> (Tensor[(1, 13, 9), float64],) {
  %0 = @func_2442() /* ty=(Tensor[(1, 13, 9), float64],) */;
  %1 = %0.0;
  (%1,)
}

def @func_1978() -> (Tensor[(3, 14, 10), float64],) {
  %2 = @func_1119() /* ty=(Tensor[(3, 14, 10), float64],) */;
  %3 = %2.0;
  (%3,)
}

def @func_3603() -> (Tensor[(1, 13, 9), float64],) {
  %4 = @func_1379() /* ty=Tensor[(1, 13, 9), float64] */;
  (%4,)
}

def @func_2312(%var_2290: Tensor[(512), float64]) -> (Tensor[(3, 14, 10), float32], Tensor[(8, 4, 16), float64], Tensor[(512), int8], Tensor[(1, 13, 9), float64], Tensor[(4, 6, 11), int16], Tensor[(44), int16], Tensor[(264), int16]) {
  %5 = @func_1917() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) */;
  %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(512), float64] */, dtype="float64") /* ty=Tensor[(512), float64] */;
  %7 = reshape(%6, newshape=[8, 4, 16]) /* ty=Tensor[(8, 4, 16), float64] */;
  %8 = @func_387(%7) /* ty=(Tensor[(8, 4, 16), float64],) */;
  %9 = cast(%var_2290, dtype="int8") /* ty=Tensor[(512), int8] */;
  %10 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(512), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %11 = cast(meta[relay.Constant][0] /* ty=Tensor[(512), float64] */, dtype="int8") /* ty=Tensor[(512), int8] */;
  %12 = dyn.reshape(%9, %10, newshape=[]) /* ty=Tensor[(?), int8] */;
  %13 = @func_1623() /* ty=(Tensor[(1, 13, 9), float64],) */;
  %14 = cast(meta[relay.Constant][1] /* ty=Tensor[(44), int16] */, dtype="int16") /* ty=Tensor[(44), int16] */;
  %15 = cast(meta[relay.Constant][2] /* ty=Tensor[(264), int16] */, dtype="int16") /* ty=Tensor[(264), int16] */;
  %16 = reshape(%14, newshape=[4, 1, 11]) /* ty=Tensor[(4, 1, 11), int16] */;
  %17 = reshape(%15, newshape=[4, 6, 11]) /* ty=Tensor[(4, 6, 11), int16] */;
  %18 = @func_1395(%16, %17) /* ty=(Tensor[(4, 6, 11), int16],) */;
  %19 = %5.0;
  %20 = %8.0;
  %21 = right_shift(%11, %12) /* ty=Tensor[(512), int8] */;
  %22 = %13.0;
  %23 = %18.0;
  (%19, %20, %21, %22, %23, meta[relay.Constant][1] /* ty=Tensor[(44), int16] */, meta[relay.Constant][2] /* ty=Tensor[(264), int16] */)
}

def @func_1354() -> (Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], float64, Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], Tensor[(1296), int64]) {
  %24 = @func_842() /* ty=(Tensor[(3, 14, 10), float64],) */;
  %25 = cast(-6.66692f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %26 = reshape(%25, newshape=[]) /* ty=float64 */;
  %27 = @func_866() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64]) */;
  %28 = cast(meta[relay.Constant][3] /* ty=Tensor[(1296), int64] */, dtype="int64") /* ty=Tensor[(1296), int64] */;
  %29 = cast(meta[relay.Constant][3] /* ty=Tensor[(1296), int64] */, dtype="int64") /* ty=Tensor[(1296), int64] */;
  %30 = cast(-6.66692f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %31 = reshape(%28, newshape=[9, 9, 16]) /* ty=Tensor[(9, 9, 16), int64] */;
  %32 = reshape(%29, newshape=[9, 9, 16]) /* ty=Tensor[(9, 9, 16), int64] */;
  %33 = reshape(%30, newshape=[]) /* ty=float64 */;
  %34 = @func_511(%31, %32, %33) /* ty=(Tensor[(9, 9, 16), int64], Tensor[(1, 13, 9), float64], float64) */;
  %35 = %24.0;
  %36 = @func_438(%26) /* ty=Tensor[(1, 13, 9), float64] */;
  %37 = %27.0;
  %38 = %34.1;
  (%35, %36, -6.66692f64 /* ty=float64 */, %37, %38, meta[relay.Constant][3] /* ty=Tensor[(1296), int64] */)
}

def @func_5847(%var_5796: Tensor[(264), int16], %var_5806: Tensor[(648), int8], %var_5839: Tensor[(1296), float64]) -> (Tensor[(8, 4, 16), float32], Tensor[(4, 6, 11), int16], Tensor[(44), int16], Tensor[(264), int16], Tensor[(648), int8], Tensor[(1296), float64]) {
  %39 = cast(meta[relay.Constant][4] /* ty=Tensor[(44), int16] */, dtype="int16") /* ty=Tensor[(44), int16] */;
  %40 = cast(%var_5796, dtype="int16") /* ty=Tensor[(264), int16] */;
  %41 = reshape(%39, newshape=[4, 1, 11]) /* ty=Tensor[(4, 1, 11), int16] */;
  %42 = reshape(%40, newshape=[4, 6, 11]) /* ty=Tensor[(4, 6, 11), int16] */;
  %43 = @func_1395(%41, %42) /* ty=(Tensor[(4, 6, 11), int16],) */;
  %44 = cast(%var_5806, dtype="int8") /* ty=Tensor[(648), int8] */;
  %45 = reshape(%44, newshape=[9, 9, 8]) /* ty=Tensor[(9, 9, 8), int8] */;
  %46 = @func_4277(%45) /* ty=(Tensor[(9, 9, 8), int8], Tensor[(9, 9, 16), int64], Tensor[(1296), int64], float64, Tensor[(3, 14, 10), float32], Tensor[(9, 9, 8), float64]) */;
  %47 = %46.2;
  %48 = cast(%47, dtype="float64") /* ty=Tensor[(1296), float64] */;
  %49 = asin(%48) /* ty=Tensor[(1296), float64] */;
  %50 = cast(%var_5839, dtype="float64") /* ty=Tensor[(1296), float64] */;
  %51 = shape_of(%49, dtype="int32") /* ty=Tensor[(1), int32] */;
  %52 = cast(%49, dtype="float64") /* ty=Tensor[(1296), float64] */;
  %53 = dyn.reshape(%50, %51, newshape=[]) /* ty=Tensor[(?), float64] */;
  %54 = @func_3305() /* ty=Tensor[(8, 4, 16), float32] */;
  %55 = %43.0;
  %56 = floor_divide(%52, %53) /* ty=Tensor[(1296), float64] */;
  (%54, %55, meta[relay.Constant][4] /* ty=Tensor[(44), int16] */, %var_5796, %var_5806, %56)
}

def @func_7517() -> (Tensor[(11, 4, 7), float64], Tensor[(14, 14, 5), int32], Tensor[(980), int32]) {
  %57 = cast(meta[relay.Constant][5] /* ty=Tensor[(980), int32] */, dtype="int32") /* ty=Tensor[(980), int32] */;
  %58 = cast(meta[relay.Constant][5] /* ty=Tensor[(980), int32] */, dtype="int32") /* ty=Tensor[(980), int32] */;
  %59 = reshape(%57, newshape=[14, 14, 5]) /* ty=Tensor[(14, 14, 5), int32] */;
  %60 = reshape(%58, newshape=[14, 14, 5]) /* ty=Tensor[(14, 14, 5), int32] */;
  %61 = @func_681(%59, %60) /* ty=(Tensor[(14, 14, 5), int32],) */;
  %62 = @func_1803() /* ty=Tensor[(11, 4, 7), float64] */;
  %63 = %61.0;
  (%62, %63, meta[relay.Constant][5] /* ty=Tensor[(980), int32] */)
}

def @func_1168() -> (Tensor[(3, 14, 10), float32],) {
  %64 = @func_938() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */;
  %65 = %64.0;
  (%65,)
}

def @func_917() -> Tensor[(3, 14, 10), float32] {
  %66 = @func_866() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64]) */;
  %67 = %66.1;
  %68 = cast(meta[relay.Constant][6] /* ty=Tensor[(3, 14, 10), float64] */, dtype="float32") /* ty=Tensor[(3, 14, 10), float32] */;
  %69 = shape_of(%67, dtype="int32") /* ty=Tensor[(3), int32] */;
  %70 = cast(%67, dtype="float32") /* ty=Tensor[(3, 14, 10), float32] */;
  %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  maximum(%70, %71) /* ty=Tensor[(3, 14, 10), float32] */
}

def @func_438(%var_425: float64) -> Tensor[(1, 13, 9), float64] {
  %72 = cast(%var_425, dtype="float64") /* ty=float64 */;
  %73 = cast(meta[relay.Constant][7] /* ty=Tensor[(1, 13, 9), float64] */, dtype="float64") /* ty=Tensor[(1, 13, 9), float64] */;
  mod(%72, %73) /* ty=Tensor[(1, 13, 9), float64] */
}

def @func_14860() -> (Tensor[(3, 14, 10), bool], Tensor[(3, 14, 10), float64]) {
  %74 = @func_7977() /* ty=(Tensor[(512), float64], Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), bool], Tensor[(420), float32], Tensor[(3, 14, 10), float32]) */;
  %75 = @func_13809() /* ty=(Tensor[(3, 14, 10), float64],) */;
  %76 = %74.2;
  %77 = %75.0;
  (%76, %77)
}

def @func_6087(%var_6038: Tensor[(3, 15, 15), float32], %var_6066: Tensor[(1170), float64], %var_6078: float64) -> (Tensor[(3, 15, 15), float32], Tensor[(2, 10, 8), float32], Tensor[(160, 1), float32], Tensor[(3, 14, 10), float64], Tensor[(15, 13, 6), float64], Tensor[(1170), float64], Tensor[(1, 13, 9), float64], float64, Tensor[(3, 14, 10), float64]) {
  %78 = cast(%var_6038, dtype="float32") /* ty=Tensor[(3, 15, 15), float32] */;
  %79 = cast(meta[relay.Constant][8] /* ty=Tensor[(160, 1), float32] */, dtype="float32") /* ty=Tensor[(160, 1), float32] */;
  %80 = reshape(%79, newshape=[2, 10, 8]) /* ty=Tensor[(2, 10, 8), float32] */;
  %81 = @func_4912(%80) /* ty=(Tensor[(2, 10, 8), float32], Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64]) */;
  %82 = @func_2152() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64], Tensor[(8, 4, 16), float64], Tensor[(512), float64]) */;
  %83 = cast(%var_6066, dtype="float64") /* ty=Tensor[(1170), float64] */;
  %84 = reshape(%83, newshape=[15, 13, 6]) /* ty=Tensor[(15, 13, 6), float64] */;
  %85 = cast(%var_6078, dtype="float64") /* ty=float64 */;
  %86 = reshape(%85, newshape=[]) /* ty=float64 */;
  %87 = asinh(%78) /* ty=Tensor[(3, 15, 15), float32] */;
  %88 = %81.0;
  %89 = %82.1;
  %90 = @func_3692(%84) /* ty=Tensor[(15, 13, 6), float64] */;
  %91 = @func_438(%86) /* ty=Tensor[(1, 13, 9), float64] */;
  %92 = @func_813() /* ty=Tensor[(3, 14, 10), float64] */;
  (%87, %88, meta[relay.Constant][8] /* ty=Tensor[(160, 1), float32] */, %89, %90, %var_6066, %91, %var_6078, %92)
}

def @func_10252() -> Tensor[(3, 14, 10), float64] {
  %93 = @func_10246() /* ty=(Tensor[(3, 14, 10), float64],) */;
  %93.0
}

def @main(%var_15441: uint64, %var_15442: Tensor[(144), uint64], %var_15443: Tensor[(36, 36), int64]) -> (Tensor[(1, 13, 9), float64], Tensor[(3, 12, 4), bool], uint64, Tensor[(144), uint64], Tensor[(11, 4, 7), float64], Tensor[(8, 4, 16), float32], Tensor[(36, 36), float32]) {
  %94 = cast(%var_15441, dtype="uint64") /* ty=uint64 */;
  %95 = cast(%var_15442, dtype="uint64") /* ty=Tensor[(144), uint64] */;
  %96 = cast(%var_15443, dtype="int64") /* ty=Tensor[(36, 36), int64] */;
  %97 = reshape(%94, newshape=[]) /* ty=uint64 */;
  %98 = reshape(%95, newshape=[3, 12, 4]) /* ty=Tensor[(3, 12, 4), uint64] */;
  %99 = reshape(%96, newshape=[1296]) /* ty=Tensor[(1296), int64] */;
  %100 = @func_3769(%97, %98, %99) /* ty=(Tensor[(3, 12, 4), bool], Tensor[(1296), int8], Tensor[(1296), int64]) */;
  %101 = cast(%var_15443, dtype="float32") /* ty=Tensor[(36, 36), float32] */;
  %102 = @func_11624() /* ty=Tensor[(1, 13, 9), float64] */;
  %103 = %100.0;
  %104 = @func_11884() /* ty=Tensor[(11, 4, 7), float64] */;
  %105 = @func_3923() /* ty=Tensor[(8, 4, 16), float32] */;
  %106 = cosh(%101) /* ty=Tensor[(36, 36), float32] */;
  (%102, %103, %var_15441, %var_15442, %104, %105, %106)
}

def @func_3241(%var_3217: Tensor[(2, 10, 3), float32]) -> (Tensor[(2, 10, 3), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) {
  %107 = cast(%var_3217, dtype="float32") /* ty=Tensor[(2, 10, 3), float32] */;
  %108 = @func_1008() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */;
  %109 = @func_2390() /* ty=(Tensor[(512), float64], Tensor[(3, 14, 10), float32]) */;
  %110 = sigmoid(%107) /* ty=Tensor[(2, 10, 3), float32] */;
  %111 = %108.1;
  %112 = %109.1;
  (%110, %111, %112)
}

def @func_2253() -> Tensor[(3, 14, 10), float32] {
  %113 = @func_917() /* ty=Tensor[(3, 14, 10), float32] */;
  %114 = cast(%113, dtype="float32") /* ty=Tensor[(3, 14, 10), float32] */;
  erf(%114) /* ty=Tensor[(3, 14, 10), float32] */
}

def @func_4858(%var_4780: Tensor[(980, 1), int32], %var_4818: Tensor[(648), int8]) -> (Tensor[(3, 14, 10), float64], Tensor[(14, 14, 5), int32], Tensor[(16, ?, 14), uint16], Tensor[(980, 6), uint32], Tensor[(3, 14, 10), float32], Tensor[(1296), int64], Tensor[(9, 9, 8), int8], Tensor[(648), int8], Tensor[(16, ?, 14), uint16], Tensor[(3, 14, 10), float64], Tensor[(980, 224), float32]) {
  %115 = @func_1354() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], float64, Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], Tensor[(1296), int64]) */;
  %116 = cast(%var_4780, dtype="int32") /* ty=Tensor[(980, 1), int32] */;
  %117 = cast(%var_4780, dtype="int32") /* ty=Tensor[(980, 1), int32] */;
  %118 = reshape(%116, newshape=[14, 14, 5]) /* ty=Tensor[(14, 14, 5), int32] */;
  %119 = reshape(%117, newshape=[14, 14, 5]) /* ty=Tensor[(14, 14, 5), int32] */;
  %120 = @func_681(%118, %119) /* ty=(Tensor[(14, 14, 5), int32],) */;
  %121 = cast(meta[relay.Constant][9] /* ty=Tensor[(224), uint16] */, dtype="uint16") /* ty=Tensor[(224), uint16] */;
  %122 = reshape(%121, newshape=[16, 1, 14]) /* ty=Tensor[(16, 1, 14), uint16] */;
  %123 = @func_4321(%122) /* ty=(Tensor[(16, ?, 14), uint16],) */;
  %124 = cast(%var_4780, dtype="int32") /* ty=Tensor[(980, 1), int32] */;
  %125 = cast(meta[relay.Constant][10] /* ty=Tensor[(980, 6), int32] */, dtype="int32") /* ty=Tensor[(980, 6), int32] */;
  %126 = subtract(%124, %125) /* ty=Tensor[(980, 6), int32] */;
  %127 = cast(%var_4780, dtype="uint32") /* ty=Tensor[(980, 1), uint32] */;
  %128 = cast(%126, dtype="uint32") /* ty=Tensor[(980, 6), uint32] */;
  %129 = @func_2928() /* ty=(Tensor[(1296), int64], Tensor[(2, 256), int32], Tensor[(4, 6, 11), float64], Tensor[(44), int16], Tensor[(132, 2), int16]) */;
  %130 = cast(%var_4818, dtype="int8") /* ty=Tensor[(648), int8] */;
  %131 = reshape(%130, newshape=[9, 9, 8]) /* ty=Tensor[(9, 9, 8), int8] */;
  %132 = @func_4277(%131) /* ty=(Tensor[(9, 9, 8), int8], Tensor[(9, 9, 16), int64], Tensor[(1296), int64], float64, Tensor[(3, 14, 10), float32], Tensor[(9, 9, 8), float64]) */;
  %133 = %123.0;
  %134 = cast(%133, dtype="uint16") /* ty=Tensor[(16, ?, 14), uint16] */;
  %135 = reshape(%134, newshape=[16, 1, 14]) /* ty=Tensor[(16, 1, 14), uint16] */;
  %136 = @func_4321(%135) /* ty=(Tensor[(16, ?, 14), uint16],) */;
  %137 = @func_3838() /* ty=(float64, Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) */;
  %138 = cast(meta[relay.Constant][9] /* ty=Tensor[(224), uint16] */, dtype="float32") /* ty=Tensor[(224), float32] */;
  %139 = cast(%var_4780, dtype="float32") /* ty=Tensor[(980, 1), float32] */;
  %140 = %115.3;
  %141 = %120.0;
  %142 = right_shift(%127, %128) /* ty=Tensor[(980, 6), uint32] */;
  %143 = @func_917() /* ty=Tensor[(3, 14, 10), float32] */;
  %144 = %129.0;
  %145 = %132.0;
  %146 = %136.0;
  %147 = %137.3;
  %148 = mod(%138, %139) /* ty=Tensor[(980, 224), float32] */;
  (%140, %141, %133, %142, %143, %144, %145, %var_4818, %146, %147, %148)
}

def @func_15191() -> (Tensor[(3, 14, 10), bool], Tensor[(8, 4, 16), float64], Tensor[(117), float64], Tensor[(3, 14, 10), float32]) {
  %149 = @func_5619() /* ty=(Tensor[(3, 14, 10), bool], Tensor[(1, 13, 9), float64], Tensor[(1, 13, 9), float64]) */;
  %150 = @func_4441() /* ty=(Tensor[(8, 4, 16), float64], Tensor[(8, 4, 16), float64]) */;
  %151 = @func_12542() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(117), float64]) */;
  %152 = @func_938() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */;
  %153 = %149.0;
  %154 = %150.0;
  %155 = %151.1;
  %156 = %152.0;
  (%153, %154, %155, %156)
}

def @func_13350() -> Tensor[(3, 14, 10), float32] {
  @func_2801() /* ty=Tensor[(3, 14, 10), float32] */
}

def @func_12304() -> Tensor[(3, 14, 10), float32] {
  %157 = @func_12036() /* ty=(Tensor[(512), float64], Tensor[(3, 14, 10), float32]) */;
  %157.1
}

def @func_11254() -> Tensor[(3, 14, 10), float32] {
  @func_2965() /* ty=Tensor[(3, 14, 10), float32] */
}

def @func_10801() -> (Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64], Tensor[(60), float64], Tensor[(117), float64], Tensor[(3, 14, 10), float64], Tensor[(8, 4, 16), float64]) {
  %158 = cast(meta[relay.Constant][11] /* ty=Tensor[(60), float64] */, dtype="float64") /* ty=Tensor[(60), float64] */;
  %159 = cast(meta[relay.Constant][12] /* ty=Tensor[(117), float64] */, dtype="float64") /* ty=Tensor[(117), float64] */;
  %160 = reshape(%158, newshape=[4, 3, 5]) /* ty=Tensor[(4, 3, 5), float64] */;
  %161 = reshape(%159, newshape=[1, 13, 9]) /* ty=Tensor[(1, 13, 9), float64] */;
  %162 = @func_7475(%160, %161) /* ty=(Tensor[(4, 3, 5), float64], Tensor[(1, 13, 9), float64], Tensor[(?, 13, 9), bool], Tensor[(3, 14, 10), uint32], Tensor[(420), float32], Tensor[(8, 30), bool], Tensor[(1, 13, 9), float64]) */;
  %163 = @func_2152() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64], Tensor[(8, 4, 16), float64], Tensor[(512), float64]) */;
  %164 = @func_2965() /* ty=Tensor[(3, 14, 10), float32] */;
  %165 = %162.1;
  %166 = @func_1778() /* ty=Tensor[(3, 14, 10), float64] */;
  %167 = %163.2;
  (%164, %165, meta[relay.Constant][11] /* ty=Tensor[(60), float64] */, meta[relay.Constant][12] /* ty=Tensor[(117), float64] */, %166, %167)
}

def @func_1623() -> (Tensor[(1, 13, 9), float64],) {
  %168 = @func_1379() /* ty=Tensor[(1, 13, 9), float64] */;
  (%168,)
}

def @func_9049() -> Tensor[(3, 14, 10), float64] {
  @func_5406() /* ty=Tensor[(3, 14, 10), float64] */
}

def @func_9505() -> (Tensor[(3, 14, 10), float64],) {
  %169 = @func_813() /* ty=Tensor[(3, 14, 10), float64] */;
  (%169,)
}

def @func_2414() -> (Tensor[(9, 13, 9), bool], Tensor[(8, 4, 16), float64]) {
  %170 = @func_1379() /* ty=Tensor[(1, 13, 9), float64] */;
  %171 = cast(%170, dtype="bool") /* ty=Tensor[(1, 13, 9), bool] */;
  %172 = cast(meta[relay.Constant][13] /* ty=Tensor[(9, 13, 9), float64] */, dtype="bool") /* ty=Tensor[(9, 13, 9), bool] */;
  %173 = @func_2352() /* ty=(Tensor[(8, 4, 16), float64],) */;
  %174 = logical_and(%171, %172) /* ty=Tensor[(9, 13, 9), bool] */;
  %175 = %173.0;
  (%174, %175)
}

def @func_2801() -> Tensor[(3, 14, 10), float32] {
  %176 = @func_2390() /* ty=(Tensor[(512), float64], Tensor[(3, 14, 10), float32]) */;
  %176.1
}

def @func_5757(%var_5722: Tensor[(7, 1, 7), float32]) -> (Tensor[(7, 1, 7), float32], Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) {
  %177 = cast(%var_5722, dtype="float32") /* ty=Tensor[(7, 1, 7), float32] */;
  %178 = @func_4676() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], Tensor[(1, 13, 9), float64]) */;
  %179 = @func_1463() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %180 = @func_1008() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */;
  %181 = asinh(%177) /* ty=Tensor[(7, 1, 7), float32] */;
  %182 = %178.1;
  %183 = %179.0;
  %184 = %180.1;
  (%181, %182, %183, %184)
}

def @func_12727() -> (Tensor[(1, 13, 9), float64], Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float32], Tensor[(8, 4, 16), float64]) {
  %185 = @func_4676() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], Tensor[(1, 13, 9), float64]) */;
  %186 = @func_11737() /* ty=(Tensor[(1, 13, 9), float64], Tensor[(8, 4, 16), float64]) */;
  %187 = @func_4507() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %188 = @func_7415() /* ty=(Tensor[(8, 4, 16), float64],) */;
  %189 = %185.2;
  %190 = %186.0;
  %191 = %187.0;
  %192 = @func_12090() /* ty=Tensor[(1, 13, 9), float32] */;
  %193 = %188.0;
  (%189, %190, %191, %192, %193)
}

def @func_10554() -> Tensor[(3, 14, 10), float64] {
  %194 = @func_1917() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) */;
  %194.1
}

def @func_8926() -> Tensor[(3, 14, 10), float64] {
  %195 = @func_842() /* ty=(Tensor[(3, 14, 10), float64],) */;
  %195.0
}

def @func_12144(%var_12128: Tensor[(44), int16], %var_12129: Tensor[(264), int16]) -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(4, 6, 11), int16], Tensor[(44), int16], Tensor[(264), int16]) {
  %196 = @func_9630() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %197 = @func_1614() /* ty=(float64, Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float32]) */;
  %198 = cast(%var_12128, dtype="int16") /* ty=Tensor[(44), int16] */;
  %199 = cast(%var_12129, dtype="int16") /* ty=Tensor[(264), int16] */;
  %200 = reshape(%198, newshape=[4, 1, 11]) /* ty=Tensor[(4, 1, 11), int16] */;
  %201 = reshape(%199, newshape=[4, 6, 11]) /* ty=Tensor[(4, 6, 11), int16] */;
  %202 = @func_1395(%200, %201) /* ty=(Tensor[(4, 6, 11), int16],) */;
  %203 = %196.0;
  %204 = %197.3;
  %205 = %202.0;
  (%203, %204, %205, %var_12128, %var_12129)
}

def @func_7415() -> (Tensor[(8, 4, 16), float64],) {
  %206 = @func_6269() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(8, 4, 16), float64], Tensor[(8, 4, 16), float32]) */;
  %207 = %206.1;
  (%207,)
}

def @func_1395(%var_1384: Tensor[(4, 1, 11), int16], %var_1385: Tensor[(4, 6, 11), int16]) -> (Tensor[(4, 6, 11), int16],) {
  %208 = cast(%var_1384, dtype="int16") /* ty=Tensor[(4, 1, 11), int16] */;
  %209 = cast(%var_1385, dtype="int16") /* ty=Tensor[(4, 6, 11), int16] */;
  %210 = logical_xor(%208, %209) /* ty=Tensor[(4, 6, 11), int16] */;
  (%210,)
}

def @func_6495() -> (Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64], Tensor[(512), float64], Tensor[(8, 4, 16), float64]) {
  %211 = @func_4145() /* ty=(Tensor[(512), float64], Tensor[(1, 13, 9), float32]) */;
  %212 = @func_2352() /* ty=(Tensor[(8, 4, 16), float64],) */;
  %213 = @func_917() /* ty=Tensor[(3, 14, 10), float32] */;
  %214 = @func_5356() /* ty=Tensor[(1, 13, 9), float64] */;
  %215 = %211.0;
  %216 = %212.0;
  (%213, %214, %215, %216)
}

def @func_11094() -> (Tensor[(3, 14, 10), float32], Tensor[(1296), int64]) {
  %217 = @func_10011() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(11, 4, 7), float32], Tensor[(1, 13, 9), float32]) */;
  %218 = %217.0;
  %219 = @func_6559() /* ty=Tensor[(1296), int64] */;
  (%218, %219)
}

def @func_5931(%var_5907: Tensor[(980), int32], %var_5908: Tensor[(648), int8]) -> (Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), float64], Tensor[(980), int32], Tensor[(648), int8], Tensor[(3, 14, 10), float32]) {
  %220 = @func_2414() /* ty=(Tensor[(9, 13, 9), bool], Tensor[(8, 4, 16), float64]) */;
  %221 = cast(%var_5907, dtype="int32") /* ty=Tensor[(980), int32] */;
  %222 = cast(%var_5908, dtype="int8") /* ty=Tensor[(648), int8] */;
  %223 = reshape(%221, newshape=[980, 1]) /* ty=Tensor[(980, 1), int32] */;
  %224 = reshape(%222, newshape=[648]) /* ty=Tensor[(648), int8] */;
  %225 = @func_4858(%223, %224) /* ty=(Tensor[(3, 14, 10), float64], Tensor[(14, 14, 5), int32], Tensor[(16, ?, 14), uint16], Tensor[(980, 6), uint32], Tensor[(3, 14, 10), float32], Tensor[(1296), int64], Tensor[(9, 9, 8), int8], Tensor[(648), int8], Tensor[(16, ?, 14), uint16], Tensor[(3, 14, 10), float64], Tensor[(980, 224), float32]) */;
  %226 = @func_3266() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), bool]) */;
  %227 = %220.1;
  %228 = %225.0;
  %229 = %226.0;
  (%227, %228, %var_5907, %var_5908, %229)
}

def @func_9392() -> (Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float32]) {
  %230 = @func_5710() /* ty=(Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float64]) */;
  %231 = @func_4567() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(8, 4, 16), float64]) */;
  %232 = %230.1;
  %233 = %231.0;
  (%232, %233)
}

def @func_11056() -> (Tensor[(3, 14, 10), float64],) {
  %234 = @func_8926() /* ty=Tensor[(3, 14, 10), float64] */;
  (%234,)
}

def @func_826() -> Tensor[(3, 14, 10), float64] {
  @func_813() /* ty=Tensor[(3, 14, 10), float64] */
}

def @func_8560() -> Tensor[(3, 14, 10), float32] {
  %235 = @func_4507() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %235.0
}

def @func_13439() -> (Tensor[(3, 14, 10), float64], Tensor[(8, 4, 16), float64]) {
  %236 = @func_866() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64]) */;
  %237 = @func_2414() /* ty=(Tensor[(9, 13, 9), bool], Tensor[(8, 4, 16), float64]) */;
  %238 = %236.1;
  %239 = %237.1;
  (%238, %239)
}

def @func_8211() -> Tensor[(3, 14, 10), float32] {
  @func_2953() /* ty=Tensor[(3, 14, 10), float32] */
}

def @func_842() -> (Tensor[(3, 14, 10), float64],) {
  %240 = @func_813() /* ty=Tensor[(3, 14, 10), float64] */;
  (%240,)
}

def @func_9398() -> Tensor[(1, 13, 9), float64] {
  %241 = @func_1614() /* ty=(float64, Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float32]) */;
  %241.2
}

def @func_9212() -> (Tensor[(1, 13, 9), float32], Tensor[(3, 14, 10), float64]) {
  %242 = @func_4145() /* ty=(Tensor[(512), float64], Tensor[(1, 13, 9), float32]) */;
  %243 = @func_6681() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */;
  %244 = %242.1;
  %245 = %243.0;
  (%244, %245)
}

def @func_6386(%var_6359: Tensor[(3, 14, 10), float32], %var_6376: Tensor[(240), bool]) -> (Tensor[(3, 14, 10), uint32], Tensor[(8, 4, 16), float64], Tensor[(8, 2, 15), bool], Tensor[(240), bool], Tensor[(8, 2, 15), bool]) {
  %246 = @func_4507() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %247 = %246.0;
  %248 = cast(%var_6359, dtype="uint32") /* ty=Tensor[(3, 14, 10), uint32] */;
  %249 = shape_of(%247, dtype="int32") /* ty=Tensor[(3), int32] */;
  %250 = cast(%247, dtype="uint32") /* ty=Tensor[(3, 14, 10), uint32] */;
  %251 = dyn.reshape(%248, %249, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %252 = @func_3040() /* ty=(Tensor[(8, 4, 16), float64],) */;
  %253 = cast(%var_6376, dtype="bool") /* ty=Tensor[(240), bool] */;
  %254 = cast(%var_6376, dtype="bool") /* ty=Tensor[(240), bool] */;
  %255 = reshape(%253, newshape=[8, 2, 15]) /* ty=Tensor[(8, 2, 15), bool] */;
  %256 = reshape(%254, newshape=[8, 2, 15]) /* ty=Tensor[(8, 2, 15), bool] */;
  %257 = @func_3946(%255, %256) /* ty=Tensor[(8, 2, 15), bool] */;
  %258 = cast(%257, dtype="bool") /* ty=Tensor[(8, 2, 15), bool] */;
  %259 = cast(%257, dtype="bool") /* ty=Tensor[(8, 2, 15), bool] */;
  %260 = reshape(%258, newshape=[8, 2, 15]) /* ty=Tensor[(8, 2, 15), bool] */;
  %261 = reshape(%259, newshape=[8, 2, 15]) /* ty=Tensor[(8, 2, 15), bool] */;
  %262 = right_shift(%250, %251) /* ty=Tensor[(3, 14, 10), uint32] */;
  %263 = %252.0;
  %264 = @func_3946(%260, %261) /* ty=Tensor[(8, 2, 15), bool] */;
  (%262, %263, %257, %var_6376, %264)
}

def @func_10440() -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) {
  %265 = @func_9630() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %266 = %265.0;
  %267 = @func_2965() /* ty=Tensor[(3, 14, 10), float32] */;
  %268 = @func_10252() /* ty=Tensor[(3, 14, 10), float64] */;
  (%266, %267, %268)
}

def @func_11336(%var_11300: Tensor[(14, 5, 10), uint16], %var_11301: Tensor[(14, 5, 10), uint16], %var_11308: Tensor[(4, 156), float32]) -> (Tensor[(14, 5, 10), uint16], Tensor[(13, 6, 8), float32], Tensor[(4, 156), float32], Tensor[(3, 14, 10), float32], Tensor[(14, 5, 10), float64]) {
  %269 = cast(%var_11301, dtype="uint16") /* ty=Tensor[(14, 5, 10), uint16] */;
  %270 = shape_of(%var_11300, dtype="int32") /* ty=Tensor[(3), int32] */;
  %271 = cast(%var_11300, dtype="uint16") /* ty=Tensor[(14, 5, 10), uint16] */;
  %272 = dyn.reshape(%269, %270, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %273 = cast(%var_11308, dtype="float32") /* ty=Tensor[(4, 156), float32] */;
  %274 = reshape(%273, newshape=[13, 6, 8]) /* ty=Tensor[(13, 6, 8), float32] */;
  %275 = @func_8725(%274) /* ty=(Tensor[(13, 6, 8), float32],) */;
  %276 = cast(%var_11301, dtype="float64") /* ty=Tensor[(14, 5, 10), float64] */;
  %277 = erf(%276) /* ty=Tensor[(14, 5, 10), float64] */;
  %278 = cast(%277, dtype="float64") /* ty=Tensor[(14, 5, 10), float64] */;
  %279 = minimum(%271, %272) /* ty=Tensor[(14, 5, 10), uint16] */;
  %280 = %275.0;
  %281 = @func_2965() /* ty=Tensor[(3, 14, 10), float32] */;
  %282 = tan(%278) /* ty=Tensor[(14, 5, 10), float64] */;
  (%279, %280, %var_11308, %281, %282)
}

def @func_12883(%var_12878: Tensor[(900), int64]) -> (Tensor[(8, 4, 16), float64], Tensor[(15, 6, 10), bool], int64, Tensor[(900), int64]) {
  %283 = @func_11450() /* ty=(Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64]) */;
  %284 = cast(2 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %285 = cast(%var_12878, dtype="int64") /* ty=Tensor[(900), int64] */;
  %286 = reshape(%284, newshape=[]) /* ty=int64 */;
  %287 = reshape(%285, newshape=[15, 6, 10]) /* ty=Tensor[(15, 6, 10), int64] */;
  %288 = @func_5217(%286, %287) /* ty=(Tensor[(15, 6, 10), bool], Tensor[(3, 14, 10), float32]) */;
  %289 = %283.0;
  %290 = %288.0;
  (%289, %290, 2 /* ty=int64 */, %var_12878)
}

def @func_12997(%var_12964: Tensor[(2, 14, 4), uint32], %var_12976: uint32) -> (Tensor[(15, 4, 8), bool], uint32, Tensor[(2, 14, 4), int16]) {
  %291 = cast(%var_12976, dtype="uint32") /* ty=uint32 */;
  %292 = reshape(%291, newshape=[]) /* ty=uint32 */;
  %293 = @func_8505(%292) /* ty=(Tensor[(15, 4, 8), bool], Tensor[(10, 42), uint8]) */;
  %294 = cast(%var_12964, dtype="float32") /* ty=Tensor[(2, 14, 4), float32] */;
  %295 = cosh(%294) /* ty=Tensor[(2, 14, 4), float32] */;
  %296 = cast(meta[relay.Constant][14] /* ty=Tensor[(2, 14, 4), uint32] */, dtype="bool") /* ty=Tensor[(2, 14, 4), bool] */;
  %297 = shape_of(%var_12964, dtype="int32") /* ty=Tensor[(3), int32] */;
  %298 = cast(%var_12964, dtype="bool") /* ty=Tensor[(2, 14, 4), bool] */;
  %299 = dyn.reshape(%296, %297, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %300 = equal(%298, %299) /* ty=Tensor[(2, 14, 4), bool] */;
  %301 = cast(%300, dtype="int16") /* ty=Tensor[(2, 14, 4), int16] */;
  %302 = shape_of(%295, dtype="int32") /* ty=Tensor[(3), int32] */;
  %303 = cast(%295, dtype="int16") /* ty=Tensor[(2, 14, 4), int16] */;
  %304 = dyn.reshape(%301, %302, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %305 = %293.0;
  %306 = bitwise_or(%303, %304) /* ty=Tensor[(2, 14, 4), int16] */;
  (%305, %var_12976, %306)
}

def @func_10502() -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64]) {
  %307 = @func_1422() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %308 = @func_10104() /* ty=(Tensor[(3, 14, 10), float64],) */;
  %309 = %307.0;
  %310 = %308.0;
  %311 = @func_8926() /* ty=Tensor[(3, 14, 10), float64] */;
  (%309, %310, %311)
}

def @func_2152() -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64], Tensor[(8, 4, 16), float64], Tensor[(512), float64]) {
  %312 = @func_1463() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %313 = cast(meta[relay.Constant][15] /* ty=Tensor[(512), float64] */, dtype="float64") /* ty=Tensor[(512), float64] */;
  %314 = reshape(%313, newshape=[8, 4, 16]) /* ty=Tensor[(8, 4, 16), float64] */;
  %315 = @func_387(%314) /* ty=(Tensor[(8, 4, 16), float64],) */;
  %316 = %312.0;
  %317 = @func_813() /* ty=Tensor[(3, 14, 10), float64] */;
  %318 = %315.0;
  (%316, %317, %318, meta[relay.Constant][15] /* ty=Tensor[(512), float64] */)
}

def @func_13861() -> (Tensor[(3, 14, 10), float32],) {
  %319 = @func_4507() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %320 = %319.0;
  (%320,)
}

def @func_7334() -> (Tensor[(1, 13, 9), float64],) {
  %321 = @func_5619() /* ty=(Tensor[(3, 14, 10), bool], Tensor[(1, 13, 9), float64], Tensor[(1, 13, 9), float64]) */;
  %322 = %321.1;
  (%322,)
}

def @func_866() -> (Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64]) {
  %323 = @func_842() /* ty=(Tensor[(3, 14, 10), float64],) */;
  %324 = %323.0;
  %325 = @func_826() /* ty=Tensor[(3, 14, 10), float64] */;
  (%324, %325)
}

def @func_8084() -> (Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float32]) {
  %326 = @func_5619() /* ty=(Tensor[(3, 14, 10), bool], Tensor[(1, 13, 9), float64], Tensor[(1, 13, 9), float64]) */;
  %327 = @func_6018() /* ty=(Tensor[(12, 9, 6), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */;
  %328 = @func_7606() /* ty=(Tensor[(1, 13, 9), float32],) */;
  %329 = %326.2;
  %330 = %327.3;
  %331 = %328.0;
  (%329, %330, %331)
}

def @func_4145() -> (Tensor[(512), float64], Tensor[(1, 13, 9), float32]) {
  %332 = @func_2390() /* ty=(Tensor[(512), float64], Tensor[(3, 14, 10), float32]) */;
  %333 = cast(7.99367f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %334 = reshape(%333, newshape=[]) /* ty=float64 */;
  %335 = @func_438(%334) /* ty=Tensor[(1, 13, 9), float64] */;
  %336 = cast(%335, dtype="float32") /* ty=Tensor[(1, 13, 9), float32] */;
  %337 = cast(7.99367f64 /* ty=float64 */, dtype="float32") /* ty=float32 */;
  %338 = %332.0;
  %339 = floor_divide(%336, %337) /* ty=Tensor[(1, 13, 9), float32] */;
  (%338, %339)
}

def @func_14142() -> Tensor[(3, 14, 10), float64] {
  %340 = @func_7716() /* ty=(Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float64]) */;
  %340.1
}

def @func_5061(%var_5050: Tensor[(160), float32]) -> (Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float32], Tensor[(160), float32]) {
  %341 = @func_1354() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], float64, Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], Tensor[(1296), int64]) */;
  %342 = cast(%var_5050, dtype="float32") /* ty=Tensor[(160), float32] */;
  %343 = reshape(%342, newshape=[2, 10, 8]) /* ty=Tensor[(2, 10, 8), float32] */;
  %344 = @func_4912(%343) /* ty=(Tensor[(2, 10, 8), float32], Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64]) */;
  %345 = %341.0;
  %346 = %344.1;
  (%345, %346, %var_5050)
}

def @func_11450() -> (Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64]) {
  %347 = @func_7401() /* ty=Tensor[(8, 4, 16), float64] */;
  %348 = @func_9049() /* ty=Tensor[(3, 14, 10), float64] */;
  %349 = @func_1778() /* ty=Tensor[(3, 14, 10), float64] */;
  (%347, %348, %349)
}

def @func_13390() -> (Tensor[(3, 14, 10), float32], Tensor[(1296), int64]) {
  %350 = @func_8211() /* ty=Tensor[(3, 14, 10), float32] */;
  %351 = @func_6559() /* ty=Tensor[(1296), int64] */;
  (%350, %351)
}

def @func_14823() -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) {
  %352 = @func_2953() /* ty=Tensor[(3, 14, 10), float32] */;
  %353 = @func_826() /* ty=Tensor[(3, 14, 10), float64] */;
  (%352, %353)
}

def @func_9907() -> (Tensor[(3, 14, 10), float64],) {
  %354 = @func_7551() /* ty=Tensor[(3, 14, 10), float64] */;
  (%354,)
}

def @func_14698() -> (Tensor[(8, 4, 16), float64],) {
  %355 = @func_10801() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64], Tensor[(60), float64], Tensor[(117), float64], Tensor[(3, 14, 10), float64], Tensor[(8, 4, 16), float64]) */;
  %356 = %355.5;
  (%356,)
}

def @func_14951(%var_14945: Tensor[(3, 8, 3), bool], %var_14946: Tensor[(3, 8, 3), bool]) -> Tensor[(3, 8, 3), bool] {
  %357 = cast(%var_14946, dtype="bool") /* ty=Tensor[(3, 8, 3), bool] */;
  %358 = shape_of(%var_14945, dtype="int32") /* ty=Tensor[(3), int32] */;
  %359 = cast(%var_14945, dtype="bool") /* ty=Tensor[(3, 8, 3), bool] */;
  %360 = dyn.reshape(%357, %358, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%359, %360) /* ty=Tensor[(3, 8, 3), bool] */
}

def @func_5098(%var_5093: Tensor[(14, 15, 15), float64], %var_5094: Tensor[(14, 15, 15), float64]) -> (Tensor[(14, 15, 15), float64],) {
  %361 = cast(%var_5094, dtype="float64") /* ty=Tensor[(14, 15, 15), float64] */;
  %362 = shape_of(%var_5093, dtype="int32") /* ty=Tensor[(3), int32] */;
  %363 = cast(%var_5093, dtype="float64") /* ty=Tensor[(14, 15, 15), float64] */;
  %364 = dyn.reshape(%361, %362, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %365 = floor_mod(%363, %364) /* ty=Tensor[(14, 15, 15), float64] */;
  (%365,)
}

def @func_11884() -> Tensor[(11, 4, 7), float64] {
  @func_1803() /* ty=Tensor[(11, 4, 7), float64] */
}

def @func_1422() -> (Tensor[(3, 14, 10), float32],) {
  %366 = @func_938() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */;
  %367 = %366.1;
  (%367,)
}

def @func_11689() -> Tensor[(3, 14, 10), float32] {
  @func_3426() /* ty=Tensor[(3, 14, 10), float32] */
}

def @func_12202() -> Tensor[(3, 14, 10), uint16] {
  %368 = @func_11837() /* ty=(Tensor[(3, 14, 10), uint16], Tensor[(3, 14, 10), float32]) */;
  %368.0
}

def @func_10246() -> (Tensor[(3, 14, 10), float64],) {
  %369 = @func_2261() /* ty=Tensor[(3, 14, 10), float64] */;
  (%369,)
}

def @func_6333() -> (Tensor[(3, 14, 10), float64], Tensor[(980), int32], Tensor[(980), int32], Tensor[(648), int8]) {
  %370 = cast(meta[relay.Constant][16] /* ty=Tensor[(980), int32] */, dtype="int32") /* ty=Tensor[(980), int32] */;
  %371 = cast(meta[relay.Constant][17] /* ty=Tensor[(648), int8] */, dtype="int8") /* ty=Tensor[(648), int8] */;
  %372 = reshape(%370, newshape=[980]) /* ty=Tensor[(980), int32] */;
  %373 = reshape(%371, newshape=[648]) /* ty=Tensor[(648), int8] */;
  %374 = @func_5931(%372, %373) /* ty=(Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), float64], Tensor[(980), int32], Tensor[(648), int8], Tensor[(3, 14, 10), float32]) */;
  %375 = @func_813() /* ty=Tensor[(3, 14, 10), float64] */;
  %376 = %374.2;
  (%375, %376, meta[relay.Constant][16] /* ty=Tensor[(980), int32] */, meta[relay.Constant][17] /* ty=Tensor[(648), int8] */)
}

def @func_7760() -> (Tensor[(8, 4, 16), float64], Tensor[(10, 42), uint8]) {
  %377 = @func_4441() /* ty=(Tensor[(8, 4, 16), float64], Tensor[(8, 4, 16), float64]) */;
  %378 = cast(meta[relay.Constant][18] /* ty=Tensor[(10, 42), float64] */, dtype="float64") /* ty=Tensor[(10, 42), float64] */;
  %379 = reshape(%378, newshape=[3, 14, 10]) /* ty=Tensor[(3, 14, 10), float64] */;
  %380 = @func_2428(%379) /* ty=(Tensor[(3, 14, 10), uint8],) */;
  %381 = %380.0;
  %382 = cast(%381, dtype="uint8") /* ty=Tensor[(3, 14, 10), uint8] */;
  %383 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(10, 42), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %384 = cast(meta[relay.Constant][18] /* ty=Tensor[(10, 42), float64] */, dtype="uint8") /* ty=Tensor[(10, 42), uint8] */;
  %385 = dyn.reshape(%382, %383, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %386 = %377.0;
  %387 = right_shift(%384, %385) /* ty=Tensor[(10, 42), uint8] */;
  (%386, %387)
}

def @func_7815(%var_7765: Tensor[(1, 14, 7), float32], %var_7784: Tensor[(1, 44), int16], %var_7785: Tensor[(264), int16], %var_7809: Tensor[(12, 44), int16]) -> (Tensor[(11, 14, 7), uint16], Tensor[(44), int16], Tensor[(264), int16], Tensor[(3, 14, 10), uint8], Tensor[(420), float64], Tensor[(3, 13, 9), int32], Tensor[(8, 4, 16), float32], Tensor[(12, 44), bool]) {
  %388 = cast(%var_7765, dtype="float32") /* ty=Tensor[(1, 14, 7), float32] */;
  %389 = log10(%388) /* ty=Tensor[(1, 14, 7), float32] */;
  %390 = cast(%389, dtype="uint16") /* ty=Tensor[(1, 14, 7), uint16] */;
  %391 = cast(meta[relay.Constant][19] /* ty=Tensor[(11, 14, 7), float32] */, dtype="uint16") /* ty=Tensor[(11, 14, 7), uint16] */;
  %392 = cast(%var_7784, dtype="int16") /* ty=Tensor[(1, 44), int16] */;
  %393 = cast(%var_7785, dtype="int16") /* ty=Tensor[(264), int16] */;
  %394 = reshape(%392, newshape=[44]) /* ty=Tensor[(44), int16] */;
  %395 = reshape(%393, newshape=[264]) /* ty=Tensor[(264), int16] */;
  %396 = @func_2536(%394, %395) /* ty=(Tensor[(1, 13, 9), float64], Tensor[(44), int16], Tensor[(264), int16], Tensor[(4, 6, 11), float64], Tensor[(3, 14, 10), float64]) */;
  %397 = cast(meta[relay.Constant][20] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %398 = reshape(%397, newshape=[3, 14, 10]) /* ty=Tensor[(3, 14, 10), float64] */;
  %399 = @func_2428(%398) /* ty=(Tensor[(3, 14, 10), uint8],) */;
  %400 = @func_1623() /* ty=(Tensor[(1, 13, 9), float64],) */;
  %401 = %400.0;
  %402 = cast(%401, dtype="int32") /* ty=Tensor[(1, 13, 9), int32] */;
  %403 = cast(meta[relay.Constant][21] /* ty=Tensor[(3, 13, 9), float64] */, dtype="int32") /* ty=Tensor[(3, 13, 9), int32] */;
  %404 = cast(%var_7784, dtype="bool") /* ty=Tensor[(1, 44), bool] */;
  %405 = cast(%var_7809, dtype="bool") /* ty=Tensor[(12, 44), bool] */;
  %406 = subtract(%390, %391) /* ty=Tensor[(11, 14, 7), uint16] */;
  %407 = %396.1;
  %408 = %399.0;
  %409 = left_shift(%402, %403) /* ty=Tensor[(3, 13, 9), int32] */;
  %410 = @func_3305() /* ty=Tensor[(8, 4, 16), float32] */;
  %411 = logical_or(%404, %405) /* ty=Tensor[(12, 44), bool] */;
  (%406, %407, %var_7785, %408, meta[relay.Constant][20] /* ty=Tensor[(420), float64] */, %409, %410, %411)
}

def @func_2261() -> Tensor[(3, 14, 10), float64] {
  %412 = @func_1917() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) */;
  %412.1
}

def @func_9131(%var_9090: Tensor[(15, 16, 12), uint32], %var_9091: Tensor[(15, 16, 12), uint32], %var_9097: Tensor[(15, 16, 12), uint32]) -> (Tensor[(15, 16, 12), int16], Tensor[(15, 16, 12), uint16], Tensor[(3, 14, 10), float32]) {
  %413 = cast(%var_9091, dtype="uint32") /* ty=Tensor[(15, 16, 12), uint32] */;
  %414 = shape_of(%var_9090, dtype="int32") /* ty=Tensor[(3), int32] */;
  %415 = cast(%var_9090, dtype="uint32") /* ty=Tensor[(15, 16, 12), uint32] */;
  %416 = dyn.reshape(%413, %414, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %417 = add(%415, %416) /* ty=Tensor[(15, 16, 12), uint32] */;
  %418 = cast(%var_9097, dtype="int16") /* ty=Tensor[(15, 16, 12), int16] */;
  %419 = shape_of(%417, dtype="int32") /* ty=Tensor[(3), int32] */;
  %420 = cast(%417, dtype="int16") /* ty=Tensor[(15, 16, 12), int16] */;
  %421 = dyn.reshape(%418, %419, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %422 = cast(%var_9091, dtype="uint16") /* ty=Tensor[(15, 16, 12), uint16] */;
  %423 = shape_of(%417, dtype="int32") /* ty=Tensor[(3), int32] */;
  %424 = cast(%417, dtype="uint16") /* ty=Tensor[(15, 16, 12), uint16] */;
  %425 = dyn.reshape(%422, %423, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %426 = @func_1168() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %427 = bitwise_xor(%420, %421) /* ty=Tensor[(15, 16, 12), int16] */;
  %428 = left_shift(%424, %425) /* ty=Tensor[(15, 16, 12), uint16] */;
  %429 = %426.0;
  (%427, %428, %429)
}

def @func_2390() -> (Tensor[(512), float64], Tensor[(3, 14, 10), float32]) {
  %430 = @func_2152() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64], Tensor[(8, 4, 16), float64], Tensor[(512), float64]) */;
  %431 = @func_1422() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %432 = %430.3;
  %433 = %431.0;
  (%432, %433)
}

def @func_5217(%var_5200: int64, %var_5201: Tensor[(15, 6, 10), int64]) -> (Tensor[(15, 6, 10), bool], Tensor[(3, 14, 10), float32]) {
  %434 = cast(%var_5200, dtype="bool") /* ty=bool */;
  %435 = cast(%var_5201, dtype="bool") /* ty=Tensor[(15, 6, 10), bool] */;
  %436 = @func_1422() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %437 = not_equal(%434, %435) /* ty=Tensor[(15, 6, 10), bool] */;
  %438 = %436.0;
  (%437, %438)
}

def @func_938() -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) {
  %439 = @func_866() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64]) */;
  %440 = %439.0;
  %441 = cast(%440, dtype="float32") /* ty=Tensor[(3, 14, 10), float32] */;
  %442 = atan(%441) /* ty=Tensor[(3, 14, 10), float32] */;
  %443 = @func_917() /* ty=Tensor[(3, 14, 10), float32] */;
  (%442, %443)
}

def @func_13735(%var_13729: Tensor[(2, 13, 9), float32]) -> (Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64], Tensor[(12, 9, 6), float32], Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float32], Tensor[(2, 13, 9), bool]) {
  %444 = @func_11393() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %445 = @func_4676() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], Tensor[(1, 13, 9), float64]) */;
  %446 = @func_1008() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */;
  %447 = @func_8084() /* ty=(Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float32]) */;
  %448 = @func_5356() /* ty=Tensor[(1, 13, 9), float64] */;
  %449 = cast(%448, dtype="float32") /* ty=Tensor[(1, 13, 9), float32] */;
  %450 = rsqrt(%449) /* ty=Tensor[(1, 13, 9), float32] */;
  %451 = cast(%450, dtype="bool") /* ty=Tensor[(1, 13, 9), bool] */;
  %452 = cast(%var_13729, dtype="bool") /* ty=Tensor[(2, 13, 9), bool] */;
  %453 = %444.0;
  %454 = %445.2;
  %455 = @func_3618() /* ty=Tensor[(12, 9, 6), float32] */;
  %456 = %446.1;
  %457 = %447.2;
  %458 = less(%451, %452) /* ty=Tensor[(2, 13, 9), bool] */;
  (%453, %454, %455, %456, %457, %458)
}

def @func_12814() -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) {
  %459 = @func_2253() /* ty=Tensor[(3, 14, 10), float32] */;
  %460 = @func_3426() /* ty=Tensor[(3, 14, 10), float32] */;
  (%459, %460)
}

def @func_15234() -> Tensor[(3, 14, 10), float64] {
  @func_5406() /* ty=Tensor[(3, 14, 10), float64] */
}

def @func_511(%var_489: Tensor[(9, 9, 16), int64], %var_490: Tensor[(9, 9, 16), int64], %var_500: float64) -> (Tensor[(9, 9, 16), int64], Tensor[(1, 13, 9), float64], float64) {
  %461 = cast(%var_490, dtype="int64") /* ty=Tensor[(9, 9, 16), int64] */;
  %462 = shape_of(%var_489, dtype="int32") /* ty=Tensor[(3), int32] */;
  %463 = cast(%var_489, dtype="int64") /* ty=Tensor[(9, 9, 16), int64] */;
  %464 = dyn.reshape(%461, %462, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %465 = cast(%var_500, dtype="float64") /* ty=float64 */;
  %466 = reshape(%465, newshape=[]) /* ty=float64 */;
  %467 = bitwise_xor(%463, %464) /* ty=Tensor[(9, 9, 16), int64] */;
  %468 = @func_438(%466) /* ty=Tensor[(1, 13, 9), float64] */;
  (%467, %468, %var_500)
}

def @func_11521() -> Tensor[(1170), float64] {
  %469 = @func_10931() /* ty=(Tensor[(3, 14, 10), bool], Tensor[(8, 4, 16), float64], float64, Tensor[(1170), float64]) */;
  %469.3
}

def @func_1849() -> (Tensor[(11, 4, 7), float32],) {
  %470 = @func_1803() /* ty=Tensor[(11, 4, 7), float64] */;
  %471 = cast(meta[relay.Constant][22] /* ty=Tensor[(11, 4, 7), float64] */, dtype="float32") /* ty=Tensor[(11, 4, 7), float32] */;
  %472 = shape_of(%470, dtype="int32") /* ty=Tensor[(3), int32] */;
  %473 = cast(%470, dtype="float32") /* ty=Tensor[(11, 4, 7), float32] */;
  %474 = dyn.reshape(%471, %472, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %475 = mod(%473, %474) /* ty=Tensor[(11, 4, 7), float32] */;
  (%475,)
}

def @func_2655(%var_2624: Tensor[(1296), int64], %var_2640: Tensor[(1296), int64]) -> (Tensor[(8, 4, 16), float64], Tensor[(1296), int64], Tensor[(8, 4, 16), float64], Tensor[(1296), int8]) {
  %476 = @func_2414() /* ty=(Tensor[(9, 13, 9), bool], Tensor[(8, 4, 16), float64]) */;
  %477 = @func_1354() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], float64, Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], Tensor[(1296), int64]) */;
  %478 = %477.5;
  %479 = cast(%var_2624, dtype="int64") /* ty=Tensor[(1296), int64] */;
  %480 = shape_of(%478, dtype="int32") /* ty=Tensor[(1), int32] */;
  %481 = cast(%478, dtype="int64") /* ty=Tensor[(1296), int64] */;
  %482 = dyn.reshape(%479, %480, newshape=[]) /* ty=Tensor[(?), int64] */;
  %483 = %476.1;
  %484 = cast(%483, dtype="float64") /* ty=Tensor[(8, 4, 16), float64] */;
  %485 = reshape(%484, newshape=[8, 4, 16]) /* ty=Tensor[(8, 4, 16), float64] */;
  %486 = @func_387(%485) /* ty=(Tensor[(8, 4, 16), float64],) */;
  %487 = cast(%var_2640, dtype="int8") /* ty=Tensor[(1296), int8] */;
  %488 = shape_of(%478, dtype="int32") /* ty=Tensor[(1), int32] */;
  %489 = cast(%478, dtype="int8") /* ty=Tensor[(1296), int8] */;
  %490 = dyn.reshape(%487, %488, newshape=[]) /* ty=Tensor[(?), int8] */;
  %491 = left_shift(%481, %482) /* ty=Tensor[(1296), int64] */;
  %492 = %486.0;
  %493 = minimum(%489, %490) /* ty=Tensor[(1296), int8] */;
  (%483, %491, %492, %493)
}

def @func_6747() -> (Tensor[(8, 4, 16), float64], float64) {
  %494 = @func_3305() /* ty=Tensor[(8, 4, 16), float32] */;
  %495 = cast(%494, dtype="float64") /* ty=Tensor[(8, 4, 16), float64] */;
  %496 = @func_3838() /* ty=(float64, Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) */;
  %497 = sin(%495) /* ty=Tensor[(8, 4, 16), float64] */;
  %498 = %496.0;
  (%497, %498)
}

def @func_15220() -> (Tensor[(3, 14, 10), float64],) {
  %499 = @func_5406() /* ty=Tensor[(3, 14, 10), float64] */;
  (%499,)
}

def @func_12036() -> (Tensor[(512), float64], Tensor[(3, 14, 10), float32]) {
  %500 = @func_2152() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64], Tensor[(8, 4, 16), float64], Tensor[(512), float64]) */;
  %501 = @func_8220() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %502 = %500.3;
  %503 = %501.0;
  (%502, %503)
}

def @func_7977() -> (Tensor[(512), float64], Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), bool], Tensor[(420), float32], Tensor[(3, 14, 10), float32]) {
  %504 = @func_6495() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64], Tensor[(512), float64], Tensor[(8, 4, 16), float64]) */;
  %505 = cast(meta[relay.Constant][23] /* ty=Tensor[(420), float32] */, dtype="float32") /* ty=Tensor[(420), float32] */;
  %506 = reshape(%505, newshape=[3, 14, 10]) /* ty=Tensor[(3, 14, 10), float32] */;
  %507 = %504.2;
  %508 = @func_3649() /* ty=Tensor[(1, 13, 9), float64] */;
  %509 = @func_2048(%506) /* ty=Tensor[(3, 14, 10), bool] */;
  %510 = @func_1232() /* ty=Tensor[(3, 14, 10), float32] */;
  (%507, %508, %509, meta[relay.Constant][23] /* ty=Tensor[(420), float32] */, %510)
}

def @func_4912(%var_4893: Tensor[(2, 10, 8), float32]) -> (Tensor[(2, 10, 8), float32], Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64]) {
  %511 = cast(%var_4893, dtype="float32") /* ty=Tensor[(2, 10, 8), float32] */;
  %512 = @func_3414() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %513 = @func_4291() /* ty=(Tensor[(1, 13, 9), float64],) */;
  %514 = atanh(%511) /* ty=Tensor[(2, 10, 8), float32] */;
  %515 = %512.0;
  %516 = %513.0;
  (%514, %515, %516)
}

def @func_3414() -> (Tensor[(3, 14, 10), float32],) {
  %517 = @func_3266() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), bool]) */;
  %518 = %517.0;
  (%518,)
}

def @func_5619() -> (Tensor[(3, 14, 10), bool], Tensor[(1, 13, 9), float64], Tensor[(1, 13, 9), float64]) {
  %519 = @func_1008() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */;
  %520 = %519.1;
  %521 = cast(meta[relay.Constant][24] /* ty=Tensor[(3, 14, 10), float32] */, dtype="bool") /* ty=Tensor[(3, 14, 10), bool] */;
  %522 = shape_of(%520, dtype="int32") /* ty=Tensor[(3), int32] */;
  %523 = cast(%520, dtype="bool") /* ty=Tensor[(3, 14, 10), bool] */;
  %524 = dyn.reshape(%521, %522, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %525 = @func_4291() /* ty=(Tensor[(1, 13, 9), float64],) */;
  %526 = not_equal(%523, %524) /* ty=Tensor[(3, 14, 10), bool] */;
  %527 = @func_3649() /* ty=Tensor[(1, 13, 9), float64] */;
  %528 = %525.0;
  (%526, %527, %528)
}

def @func_7260() -> (Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float64]) {
  %529 = @func_5889() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64]) */;
  %530 = %529.1;
  %531 = @func_1778() /* ty=Tensor[(3, 14, 10), float64] */;
  (%530, %531)
}

def @func_8725(%var_8721: Tensor[(13, 6, 8), float32]) -> (Tensor[(13, 6, 8), float32],) {
  %532 = cast(%var_8721, dtype="float32") /* ty=Tensor[(13, 6, 8), float32] */;
  %533 = cosh(%532) /* ty=Tensor[(13, 6, 8), float32] */;
  (%533,)
}

def @func_9173(%var_9160: Tensor[(60), float64], %var_9161: Tensor[(117), float64]) -> (Tensor[(9, 13, 9), bool], Tensor[(1, 13, 9), float64], Tensor[(60), float64], Tensor[(117), float64]) {
  %534 = @func_2414() /* ty=(Tensor[(9, 13, 9), bool], Tensor[(8, 4, 16), float64]) */;
  %535 = cast(%var_9160, dtype="float64") /* ty=Tensor[(60), float64] */;
  %536 = cast(%var_9161, dtype="float64") /* ty=Tensor[(117), float64] */;
  %537 = reshape(%535, newshape=[4, 3, 5]) /* ty=Tensor[(4, 3, 5), float64] */;
  %538 = reshape(%536, newshape=[1, 13, 9]) /* ty=Tensor[(1, 13, 9), float64] */;
  %539 = @func_7475(%537, %538) /* ty=(Tensor[(4, 3, 5), float64], Tensor[(1, 13, 9), float64], Tensor[(?, 13, 9), bool], Tensor[(3, 14, 10), uint32], Tensor[(420), float32], Tensor[(8, 30), bool], Tensor[(1, 13, 9), float64]) */;
  %540 = %534.0;
  %541 = %539.1;
  (%540, %541, %var_9160, %var_9161)
}

def @func_3923() -> Tensor[(8, 4, 16), float32] {
  %542 = @func_2698() /* ty=(Tensor[(8, 4, 16), float32],) */;
  %542.0
}

def @func_8174(%var_8133: Tensor[(3150), float64]) -> (Tensor[(8, 4, 16), float64], Tensor[(8, 4, 16), float64], Tensor[(14, 15, 15), float64], Tensor[(3150), float64]) {
  %543 = @func_6747() /* ty=(Tensor[(8, 4, 16), float64], float64) */;
  %544 = @func_3838() /* ty=(float64, Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) */;
  %545 = cast(%var_8133, dtype="float64") /* ty=Tensor[(3150), float64] */;
  %546 = cast(%var_8133, dtype="float64") /* ty=Tensor[(3150), float64] */;
  %547 = reshape(%545, newshape=[14, 15, 15]) /* ty=Tensor[(14, 15, 15), float64] */;
  %548 = reshape(%546, newshape=[14, 15, 15]) /* ty=Tensor[(14, 15, 15), float64] */;
  %549 = @func_5098(%547, %548) /* ty=(Tensor[(14, 15, 15), float64],) */;
  %550 = %543.0;
  %551 = %544.1;
  %552 = %549.0;
  (%550, %551, %552, %var_8133)
}

def @func_14523() -> (Tensor[(3, 14, 10), float32], Tensor[(13, 6, 8), float32], Tensor[(624), float32]) {
  %553 = @func_13667() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %554 = cast(meta[relay.Constant][25] /* ty=Tensor[(624), float32] */, dtype="float32") /* ty=Tensor[(624), float32] */;
  %555 = reshape(%554, newshape=[13, 6, 8]) /* ty=Tensor[(13, 6, 8), float32] */;
  %556 = @func_8725(%555) /* ty=(Tensor[(13, 6, 8), float32],) */;
  %557 = %553.0;
  %558 = %556.0;
  (%557, %558, meta[relay.Constant][25] /* ty=Tensor[(624), float32] */)
}

def @func_7614() -> Tensor[(11, 4, 7), float64] {
  @func_1803() /* ty=Tensor[(11, 4, 7), float64] */
}

def @func_1260() -> Tensor[(3, 14, 10), float32] {
  %559 = @func_813() /* ty=Tensor[(3, 14, 10), float64] */;
  %560 = cast(%559, dtype="float32") /* ty=Tensor[(3, 14, 10), float32] */;
  atanh(%560) /* ty=Tensor[(3, 14, 10), float32] */
}

def @func_12645() -> (Tensor[(3, 14, 10), float64], Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), bool], Tensor[(3, 14, 10), uint16]) {
  %561 = @func_8917() /* ty=(Tensor[(8, 4, 16), float64],) */;
  %562 = @func_5619() /* ty=(Tensor[(3, 14, 10), bool], Tensor[(1, 13, 9), float64], Tensor[(1, 13, 9), float64]) */;
  %563 = @func_7551() /* ty=Tensor[(3, 14, 10), float64] */;
  %564 = %561.0;
  %565 = %562.0;
  %566 = @func_12202() /* ty=Tensor[(3, 14, 10), uint16] */;
  (%563, %564, %565, %566)
}

def @func_1917() -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) {
  %567 = @func_1422() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %568 = @func_938() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */;
  %569 = %568.0;
  %570 = cast(%569, dtype="float64") /* ty=Tensor[(3, 14, 10), float64] */;
  %571 = %567.0;
  %572 = sqrt(%570) /* ty=Tensor[(3, 14, 10), float64] */;
  (%571, %572)
}

def @func_2536(%var_2499: Tensor[(44), int16], %var_2500: Tensor[(264), int16]) -> (Tensor[(1, 13, 9), float64], Tensor[(44), int16], Tensor[(264), int16], Tensor[(4, 6, 11), float64], Tensor[(3, 14, 10), float64]) {
  %573 = @func_1614() /* ty=(float64, Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float32]) */;
  %574 = cast(%var_2499, dtype="int16") /* ty=Tensor[(44), int16] */;
  %575 = cast(%var_2500, dtype="int16") /* ty=Tensor[(264), int16] */;
  %576 = reshape(%574, newshape=[4, 1, 11]) /* ty=Tensor[(4, 1, 11), int16] */;
  %577 = reshape(%575, newshape=[4, 6, 11]) /* ty=Tensor[(4, 6, 11), int16] */;
  %578 = @func_1395(%576, %577) /* ty=(Tensor[(4, 6, 11), int16],) */;
  %579 = %578.0;
  %580 = cast(%579, dtype="float64") /* ty=Tensor[(4, 6, 11), float64] */;
  %581 = %573.2;
  %582 = rsqrt(%580) /* ty=Tensor[(4, 6, 11), float64] */;
  %583 = @func_2261() /* ty=Tensor[(3, 14, 10), float64] */;
  (%581, %var_2499, %var_2500, %582, %583)
}

def @func_11873(%var_11853: Tensor[(980), int32]) -> (Tensor[(1, 13, 9), float64], Tensor[(14, 14, 5), int32], Tensor[(980), int32]) {
  %584 = @func_5889() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64]) */;
  %585 = cast(%var_11853, dtype="int32") /* ty=Tensor[(980), int32] */;
  %586 = cast(%var_11853, dtype="int32") /* ty=Tensor[(980), int32] */;
  %587 = reshape(%585, newshape=[14, 14, 5]) /* ty=Tensor[(14, 14, 5), int32] */;
  %588 = reshape(%586, newshape=[14, 14, 5]) /* ty=Tensor[(14, 14, 5), int32] */;
  %589 = @func_681(%587, %588) /* ty=(Tensor[(14, 14, 5), int32],) */;
  %590 = %584.1;
  %591 = %589.0;
  (%590, %591, %var_11853)
}

def @func_13469() -> Tensor[(9, 13, 9), bool] {
  %592 = @func_2414() /* ty=(Tensor[(9, 13, 9), bool], Tensor[(8, 4, 16), float64]) */;
  %592.0
}

def @func_13008() -> (Tensor[(1, 13, 9), float64],) {
  %593 = @func_11590() /* ty=(Tensor[(1, 13, 9), float64],) */;
  %594 = %593.0;
  (%594,)
}

def @func_5772() -> (Tensor[(8, 4, 16), float64],) {
  %595 = @func_3040() /* ty=(Tensor[(8, 4, 16), float64],) */;
  %596 = %595.0;
  (%596,)
}

def @func_10192() -> Tensor[(3, 14, 10), bool] {
  %597 = @func_4507() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %598 = %597.0;
  %599 = @func_2261() /* ty=Tensor[(3, 14, 10), float64] */;
  %600 = cast(%599, dtype="bool") /* ty=Tensor[(3, 14, 10), bool] */;
  %601 = shape_of(%598, dtype="int32") /* ty=Tensor[(3), int32] */;
  %602 = cast(%598, dtype="bool") /* ty=Tensor[(3, 14, 10), bool] */;
  %603 = dyn.reshape(%600, %601, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%602, %603) /* ty=Tensor[(3, 14, 10), bool] */
}

def @func_14794(%var_14788: Tensor[(1, 5, 13), float64]) -> Tensor[(1, 5, 13), float64] {
  %604 = cast(%var_14788, dtype="float64") /* ty=Tensor[(1, 5, 13), float64] */;
  acos(%604) /* ty=Tensor[(1, 5, 13), float64] */
}

def @func_2587(%var_2579: float64) -> (Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64], float64, Tensor[(3, 14, 10), float64]) {
  %605 = @func_2442() /* ty=(Tensor[(1, 13, 9), float64],) */;
  %606 = @func_2390() /* ty=(Tensor[(512), float64], Tensor[(3, 14, 10), float32]) */;
  %607 = cast(%var_2579, dtype="float64") /* ty=float64 */;
  %608 = reshape(%607, newshape=[]) /* ty=float64 */;
  %609 = %605.0;
  %610 = %606.1;
  %611 = @func_438(%608) /* ty=Tensor[(1, 13, 9), float64] */;
  %612 = @func_813() /* ty=Tensor[(3, 14, 10), float64] */;
  (%609, %610, %611, %var_2579, %612)
}

def @func_5356() -> Tensor[(1, 13, 9), float64] {
  %613 = @func_3044() /* ty=(Tensor[(1, 13, 9), float64],) */;
  %613.0
}

def @func_1778() -> Tensor[(3, 14, 10), float64] {
  @func_813() /* ty=Tensor[(3, 14, 10), float64] */
}

def @func_11787(%var_11782: Tensor[(60), float64], %var_11783: Tensor[(117), float64]) -> (Tensor[(3, 14, 10), float32], Tensor[(4, 3, 5), float64], Tensor[(60), float64], Tensor[(117), float64], Tensor[(9, 13, 9), bool]) {
  %614 = @func_11393() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %615 = cast(%var_11782, dtype="float64") /* ty=Tensor[(60), float64] */;
  %616 = cast(%var_11783, dtype="float64") /* ty=Tensor[(117), float64] */;
  %617 = reshape(%615, newshape=[4, 3, 5]) /* ty=Tensor[(4, 3, 5), float64] */;
  %618 = reshape(%616, newshape=[1, 13, 9]) /* ty=Tensor[(1, 13, 9), float64] */;
  %619 = @func_7475(%617, %618) /* ty=(Tensor[(4, 3, 5), float64], Tensor[(1, 13, 9), float64], Tensor[(?, 13, 9), bool], Tensor[(3, 14, 10), uint32], Tensor[(420), float32], Tensor[(8, 30), bool], Tensor[(1, 13, 9), float64]) */;
  %620 = @func_2414() /* ty=(Tensor[(9, 13, 9), bool], Tensor[(8, 4, 16), float64]) */;
  %621 = %614.0;
  %622 = %619.0;
  %623 = %620.0;
  (%621, %622, %var_11782, %var_11783, %623)
}

def @func_2352() -> (Tensor[(8, 4, 16), float64],) {
  %624 = @func_2152() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64], Tensor[(8, 4, 16), float64], Tensor[(512), float64]) */;
  %625 = %624.2;
  (%625,)
}

def @func_3718(%var_3703: Tensor[(4, 10, 10), float32]) -> (Tensor[(4, 10, 10), float32],) {
  %626 = cast(%var_3703, dtype="float32") /* ty=Tensor[(4, 10, 10), float32] */;
  %627 = rsqrt(%626) /* ty=Tensor[(4, 10, 10), float32] */;
  (%627,)
}

def @func_4567() -> (Tensor[(3, 14, 10), float32], Tensor[(8, 4, 16), float64]) {
  %628 = @func_3266() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), bool]) */;
  %629 = %628.0;
  %630 = cast(%629, dtype="float32") /* ty=Tensor[(3, 14, 10), float32] */;
  %631 = @func_3353() /* ty=(Tensor[(8, 4, 16), float64], Tensor[(8, 4, 16), float64], Tensor[(420), float64], Tensor[(3, 14, 10), float32]) */;
  %632 = asinh(%630) /* ty=Tensor[(3, 14, 10), float32] */;
  %633 = %631.0;
  (%632, %633)
}

def @func_11991() -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) {
  %634 = @func_10440() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) */;
  %635 = @func_7598() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */;
  %636 = %634.0;
  %637 = @func_6293() /* ty=Tensor[(3, 14, 10), float32] */;
  %638 = %635.1;
  (%636, %637, %638)
}

def @func_1232() -> Tensor[(3, 14, 10), float32] {
  %639 = @func_1008() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */;
  %639.0
}

def @func_13260() -> (Tensor[(1, 13, 9), float64],) {
  %640 = @func_11624() /* ty=Tensor[(1, 13, 9), float64] */;
  (%640,)
}

def @func_12001() -> (Tensor[(8, 4, 16), float64],) {
  %641 = @func_3645() /* ty=Tensor[(8, 4, 16), float64] */;
  (%641,)
}

def @func_6681() -> (Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) {
  %642 = @func_938() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */;
  %643 = @func_4567() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(8, 4, 16), float64]) */;
  %644 = @func_813() /* ty=Tensor[(3, 14, 10), float64] */;
  %645 = @func_1778() /* ty=Tensor[(3, 14, 10), float64] */;
  %646 = %642.1;
  %647 = @func_2965() /* ty=Tensor[(3, 14, 10), float32] */;
  %648 = %643.0;
  (%644, %645, %646, %647, %648)
}

def @func_11961(%var_11940: Tensor[(160), float32]) -> (Tensor[(8, 4, 16), float64], Tensor[(8, 4, 16), float32], Tensor[(3, 14, 10), float32], Tensor[(160), float32]) {
  %649 = @func_4567() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(8, 4, 16), float64]) */;
  %650 = @func_8460() /* ty=(Tensor[(8, 4, 16), float32],) */;
  %651 = cast(%var_11940, dtype="float32") /* ty=Tensor[(160), float32] */;
  %652 = reshape(%651, newshape=[160]) /* ty=Tensor[(160), float32] */;
  %653 = @func_5061(%652) /* ty=(Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float32], Tensor[(160), float32]) */;
  %654 = %649.1;
  %655 = %650.0;
  %656 = %653.1;
  (%654, %655, %656, %var_11940)
}

def @func_6018() -> (Tensor[(12, 9, 6), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) {
  %657 = @func_1463() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %658 = @func_3414() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %659 = @func_938() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */;
  %660 = @func_3618() /* ty=Tensor[(12, 9, 6), float32] */;
  %661 = %657.0;
  %662 = %658.0;
  %663 = %659.0;
  (%660, %661, %662, %663)
}

def @func_1379() -> Tensor[(1, 13, 9), float64] {
  %664 = @func_1354() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], float64, Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], Tensor[(1296), int64]) */;
  %664.1
}

def @func_3838() -> (float64, Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) {
  %665 = @func_1614() /* ty=(float64, Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float32]) */;
  %666 = @func_2352() /* ty=(Tensor[(8, 4, 16), float64],) */;
  %667 = @func_1463() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %668 = @func_1119() /* ty=(Tensor[(3, 14, 10), float64],) */;
  %669 = %665.0;
  %670 = %666.0;
  %671 = %667.0;
  %672 = %668.0;
  (%669, %670, %671, %672)
}

def @func_8005() -> (Tensor[(8, 4, 16), float64],) {
  %673 = @func_6747() /* ty=(Tensor[(8, 4, 16), float64], float64) */;
  %674 = %673.0;
  (%674,)
}

def @func_4507() -> (Tensor[(3, 14, 10), float32],) {
  %675 = @func_2953() /* ty=Tensor[(3, 14, 10), float32] */;
  (%675,)
}

def @func_6996(%var_6954: Tensor[(15, 13, 9), float64]) -> (Tensor[(8, 4, 16), float32], Tensor[(15, 13, 9), float32]) {
  %676 = @func_5356() /* ty=Tensor[(1, 13, 9), float64] */;
  %677 = cast(%676, dtype="float32") /* ty=Tensor[(1, 13, 9), float32] */;
  %678 = cast(%var_6954, dtype="float32") /* ty=Tensor[(15, 13, 9), float32] */;
  %679 = @func_3923() /* ty=Tensor[(8, 4, 16), float32] */;
  %680 = mod(%677, %678) /* ty=Tensor[(15, 13, 9), float32] */;
  (%679, %680)
}

def @func_9630() -> (Tensor[(3, 14, 10), float32],) {
  %681 = @func_2965() /* ty=Tensor[(3, 14, 10), float32] */;
  (%681,)
}

def @func_10363() -> (Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64]) {
  %682 = @func_1119() /* ty=(Tensor[(3, 14, 10), float64],) */;
  %683 = @func_4291() /* ty=(Tensor[(1, 13, 9), float64],) */;
  %684 = %682.0;
  %685 = %683.0;
  (%684, %685)
}

def @func_11590() -> (Tensor[(1, 13, 9), float64],) {
  %686 = @func_5356() /* ty=Tensor[(1, 13, 9), float64] */;
  (%686,)
}

def @func_13172() -> (Tensor[(3, 14, 10), float64],) {
  %687 = @func_5345() /* ty=Tensor[(3, 14, 10), float64] */;
  (%687,)
}

def @func_5889() -> (Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64]) {
  %688 = @func_1168() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %689 = @func_1614() /* ty=(float64, Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float32]) */;
  %690 = %688.0;
  %691 = %689.2;
  (%690, %691)
}

def @func_14904() -> (Tensor[(3, 14, 10), float32],) {
  %692 = @func_6535() /* ty=Tensor[(3, 14, 10), float32] */;
  (%692,)
}

def @func_1081(%var_1075: Tensor[(512), float64]) -> (Tensor[(3, 14, 10), float64], Tensor[(980), int32], Tensor[(8, 4, 16), float64], Tensor[(512), float64], Tensor[(14, 14, 5), float32]) {
  %693 = @func_842() /* ty=(Tensor[(3, 14, 10), float64],) */;
  %694 = cast(%var_1075, dtype="float64") /* ty=Tensor[(512), float64] */;
  %695 = reshape(%694, newshape=[8, 4, 16]) /* ty=Tensor[(8, 4, 16), float64] */;
  %696 = @func_387(%695) /* ty=(Tensor[(8, 4, 16), float64],) */;
  %697 = cast(meta[relay.Constant][26] /* ty=Tensor[(980), int32] */, dtype="int32") /* ty=Tensor[(980), int32] */;
  %698 = cast(meta[relay.Constant][26] /* ty=Tensor[(980), int32] */, dtype="int32") /* ty=Tensor[(980), int32] */;
  %699 = reshape(%697, newshape=[14, 14, 5]) /* ty=Tensor[(14, 14, 5), int32] */;
  %700 = reshape(%698, newshape=[14, 14, 5]) /* ty=Tensor[(14, 14, 5), int32] */;
  %701 = @func_681(%699, %700) /* ty=(Tensor[(14, 14, 5), int32],) */;
  %702 = %701.0;
  %703 = cast(%702, dtype="float32") /* ty=Tensor[(14, 14, 5), float32] */;
  %704 = %693.0;
  %705 = %696.0;
  %706 = sinh(%703) /* ty=Tensor[(14, 14, 5), float32] */;
  (%704, meta[relay.Constant][26] /* ty=Tensor[(980), int32] */, %705, %var_1075, %706)
}

def @func_6535() -> Tensor[(3, 14, 10), float32] {
  %707 = @func_4206() /* ty=(Tensor[(?, 13, 9), int8], Tensor[(3, 14, 10), float32]) */;
  %707.1
}

def @func_15152(%var_15139: Tensor[(44), int16], %var_15140: Tensor[(264), int16]) -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(12, 10, 11), float32], Tensor[(264), int16], Tensor[(44), int16], Tensor[(264), int16], Tensor[(3, 14, 10), float64], Tensor[(?, 13, 9), uint32]) {
  %708 = @func_9630() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %709 = @func_9630() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %710 = cast(%var_15139, dtype="int16") /* ty=Tensor[(44), int16] */;
  %711 = cast(%var_15140, dtype="int16") /* ty=Tensor[(264), int16] */;
  %712 = reshape(%710, newshape=[44]) /* ty=Tensor[(44), int16] */;
  %713 = reshape(%711, newshape=[264]) /* ty=Tensor[(264), int16] */;
  %714 = @func_12144(%712, %713) /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(4, 6, 11), int16], Tensor[(44), int16], Tensor[(264), int16]) */;
  %715 = @func_1354() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], float64, Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], Tensor[(1296), int64]) */;
  %716 = %715.1;
  %717 = cast(%716, dtype="float32") /* ty=Tensor[(1, 13, 9), float32] */;
  %718 = asinh(%717) /* ty=Tensor[(1, 13, 9), float32] */;
  %719 = cast(%716, dtype="uint32") /* ty=Tensor[(1, 13, 9), uint32] */;
  %720 = shape_of(%718, dtype="int32") /* ty=Tensor[(3), int32] */;
  %721 = cast(%718, dtype="uint32") /* ty=Tensor[(1, 13, 9), uint32] */;
  %722 = dyn.reshape(%719, %720, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %723 = %708.0;
  %724 = %709.0;
  %725 = @func_917() /* ty=Tensor[(3, 14, 10), float32] */;
  %726 = @func_11501() /* ty=Tensor[(12, 10, 11), float32] */;
  %727 = %714.4;
  %728 = @func_8034() /* ty=Tensor[(3, 14, 10), float64] */;
  %729 = bitwise_or(%721, %722) /* ty=Tensor[(?, 13, 9), uint32] */;
  (%723, %724, %725, %726, %727, %var_15139, %var_15140, %728, %729)
}

def @func_2442() -> (Tensor[(1, 13, 9), float64],) {
  %730 = @func_1379() /* ty=Tensor[(1, 13, 9), float64] */;
  (%730,)
}

def @func_11737() -> (Tensor[(1, 13, 9), float64], Tensor[(8, 4, 16), float64]) {
  %731 = @func_3649() /* ty=Tensor[(1, 13, 9), float64] */;
  %732 = @func_3645() /* ty=Tensor[(8, 4, 16), float64] */;
  (%731, %732)
}

def @func_8477() -> (Tensor[(3, 14, 10), float64],) {
  %733 = @func_1119() /* ty=(Tensor[(3, 14, 10), float64],) */;
  %734 = %733.0;
  (%734,)
}

def @func_3692(%var_3686: Tensor[(15, 13, 6), float64]) -> Tensor[(15, 13, 6), float64] {
  %735 = cast(%var_3686, dtype="float64") /* ty=Tensor[(15, 13, 6), float64] */;
  tan(%735) /* ty=Tensor[(15, 13, 6), float64] */
}

def @func_11624() -> Tensor[(1, 13, 9), float64] {
  %736 = @func_8084() /* ty=(Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float32]) */;
  %736.0
}

def @func_15385() -> (Tensor[(8, 4, 16), float64], Tensor[(1, 13, 9), float32], Tensor[(234), float32], Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64], Tensor[(1, 13, 9), float64]) {
  %737 = @func_4441() /* ty=(Tensor[(8, 4, 16), float64], Tensor[(8, 4, 16), float64]) */;
  %738 = cast(meta[relay.Constant][27] /* ty=Tensor[(234), float32] */, dtype="float32") /* ty=Tensor[(234), float32] */;
  %739 = reshape(%738, newshape=[2, 13, 9]) /* ty=Tensor[(2, 13, 9), float32] */;
  %740 = @func_13735(%739) /* ty=(Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64], Tensor[(12, 9, 6), float32], Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float32], Tensor[(2, 13, 9), bool]) */;
  %741 = @func_2442() /* ty=(Tensor[(1, 13, 9), float64],) */;
  %742 = @func_7239() /* ty=(Tensor[(8, 4, 16), float64], Tensor[(1, 13, 9), float64], Tensor[(11, 4, 7), float64], Tensor[(980), int32], Tensor[(1, 13, 9), float64]) */;
  %743 = %737.1;
  %744 = %740.4;
  %745 = @func_6535() /* ty=Tensor[(3, 14, 10), float32] */;
  %746 = %741.0;
  %747 = %742.4;
  (%743, %744, meta[relay.Constant][27] /* ty=Tensor[(234), float32] */, %745, %746, %747)
}

def @func_1008() -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) {
  %748 = @func_917() /* ty=Tensor[(3, 14, 10), float32] */;
  %749 = cast(%748, dtype="float32") /* ty=Tensor[(3, 14, 10), float32] */;
  %750 = @func_826() /* ty=Tensor[(3, 14, 10), float64] */;
  %751 = cast(%750, dtype="float32") /* ty=Tensor[(3, 14, 10), float32] */;
  %752 = log2(%749) /* ty=Tensor[(3, 14, 10), float32] */;
  %753 = cosh(%751) /* ty=Tensor[(3, 14, 10), float32] */;
  (%752, %753)
}

def @func_1614() -> (float64, Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float32]) {
  %754 = @func_1354() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], float64, Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], Tensor[(1296), int64]) */;
  %755 = %754.2;
  %756 = cast(%755, dtype="float64") /* ty=float64 */;
  %757 = reshape(%756, newshape=[]) /* ty=float64 */;
  %758 = @func_1463() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %759 = @func_1232() /* ty=Tensor[(3, 14, 10), float32] */;
  %760 = @func_438(%757) /* ty=Tensor[(1, 13, 9), float64] */;
  %761 = %758.0;
  (%755, %759, %760, %761)
}

def @func_2928() -> (Tensor[(1296), int64], Tensor[(2, 256), int32], Tensor[(4, 6, 11), float64], Tensor[(44), int16], Tensor[(132, 2), int16]) {
  %762 = @func_1354() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], float64, Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], Tensor[(1296), int64]) */;
  %763 = cast(meta[relay.Constant][28] /* ty=Tensor[(2, 256), float64] */, dtype="float64") /* ty=Tensor[(2, 256), float64] */;
  %764 = reshape(%763, newshape=[8, 4, 16]) /* ty=Tensor[(8, 4, 16), float64] */;
  %765 = @func_387(%764) /* ty=(Tensor[(8, 4, 16), float64],) */;
  %766 = %765.0;
  %767 = cast(%766, dtype="int32") /* ty=Tensor[(8, 4, 16), int32] */;
  %768 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(2, 256), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %769 = cast(meta[relay.Constant][28] /* ty=Tensor[(2, 256), float64] */, dtype="int32") /* ty=Tensor[(2, 256), int32] */;
  %770 = dyn.reshape(%767, %768, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %771 = cast(meta[relay.Constant][29] /* ty=Tensor[(44), int16] */, dtype="int16") /* ty=Tensor[(44), int16] */;
  %772 = cast(meta[relay.Constant][30] /* ty=Tensor[(132, 2), int16] */, dtype="int16") /* ty=Tensor[(132, 2), int16] */;
  %773 = reshape(%771, newshape=[44]) /* ty=Tensor[(44), int16] */;
  %774 = reshape(%772, newshape=[264]) /* ty=Tensor[(264), int16] */;
  %775 = @func_2536(%773, %774) /* ty=(Tensor[(1, 13, 9), float64], Tensor[(44), int16], Tensor[(264), int16], Tensor[(4, 6, 11), float64], Tensor[(3, 14, 10), float64]) */;
  %776 = %762.5;
  %777 = left_shift(%769, %770) /* ty=Tensor[(2, 256), int32] */;
  %778 = %775.3;
  (%776, %777, %778, meta[relay.Constant][29] /* ty=Tensor[(44), int16] */, meta[relay.Constant][30] /* ty=Tensor[(132, 2), int16] */)
}

def @func_12542() -> (Tensor[(3, 14, 10), float32], Tensor[(117), float64]) {
  %779 = @func_10801() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64], Tensor[(60), float64], Tensor[(117), float64], Tensor[(3, 14, 10), float64], Tensor[(8, 4, 16), float64]) */;
  %780 = @func_12304() /* ty=Tensor[(3, 14, 10), float32] */;
  %781 = %779.3;
  (%780, %781)
}

def @func_6158() -> (Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), float32]) {
  %782 = @func_5772() /* ty=(Tensor[(8, 4, 16), float64],) */;
  %783 = @func_4567() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(8, 4, 16), float64]) */;
  %784 = %782.0;
  %785 = %783.0;
  (%784, %785)
}

def @func_8250() -> (Tensor[(3, 14, 10), float64], Tensor[(8, 4, 16), float64]) {
  %786 = @func_842() /* ty=(Tensor[(3, 14, 10), float64],) */;
  %787 = %786.0;
  %788 = @func_3645() /* ty=Tensor[(8, 4, 16), float64] */;
  (%787, %788)
}

def @func_10931() -> (Tensor[(3, 14, 10), bool], Tensor[(8, 4, 16), float64], float64, Tensor[(1170), float64]) {
  %789 = @func_3266() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), bool]) */;
  %790 = @func_8005() /* ty=(Tensor[(8, 4, 16), float64],) */;
  %791 = cast(meta[relay.Constant][31] /* ty=Tensor[(1170), float64] */, dtype="float64") /* ty=Tensor[(1170), float64] */;
  %792 = reshape(%791, newshape=[1170]) /* ty=Tensor[(1170), float64] */;
  %793 = @func_7686(%792) /* ty=(Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float64], Tensor[(675), float32], Tensor[(1170), float64], float64, Tensor[(3, 14, 10), float32], Tensor[(8, 4, 16), float32], Tensor[(3, 14, 10), float64], Tensor[(8, 4, 16), float64]) */;
  %794 = %789.1;
  %795 = %790.0;
  %796 = %793.4;
  (%794, %795, %796, meta[relay.Constant][31] /* ty=Tensor[(1170), float64] */)
}

def @func_813() -> Tensor[(3, 14, 10), float64] {
  %797 = cast(meta[relay.Constant][32] /* ty=Tensor[(3, 14, 10), float64] */, dtype="float64") /* ty=Tensor[(3, 14, 10), float64] */;
  rsqrt(%797) /* ty=Tensor[(3, 14, 10), float64] */
}

def @func_8711(%var_8657: Tensor[(1296), float64]) -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(4, 6, 11), int16], Tensor[(264), int16], Tensor[(3, 216), int8], Tensor[(1296), float64], Tensor[(8, 4, 16), float64], Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float32]) {
  %798 = @func_4507() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %799 = cast(meta[relay.Constant][33] /* ty=Tensor[(264), int16] */, dtype="int16") /* ty=Tensor[(264), int16] */;
  %800 = cast(meta[relay.Constant][34] /* ty=Tensor[(3, 216), int8] */, dtype="int8") /* ty=Tensor[(3, 216), int8] */;
  %801 = cast(%var_8657, dtype="float64") /* ty=Tensor[(1296), float64] */;
  %802 = reshape(%799, newshape=[264]) /* ty=Tensor[(264), int16] */;
  %803 = reshape(%800, newshape=[648]) /* ty=Tensor[(648), int8] */;
  %804 = reshape(%801, newshape=[1296]) /* ty=Tensor[(1296), float64] */;
  %805 = @func_5847(%802, %803, %804) /* ty=(Tensor[(8, 4, 16), float32], Tensor[(4, 6, 11), int16], Tensor[(44), int16], Tensor[(264), int16], Tensor[(648), int8], Tensor[(1296), float64]) */;
  %806 = cast(%var_8657, dtype="float32") /* ty=Tensor[(1296), float32] */;
  %807 = log10(%806) /* ty=Tensor[(1296), float32] */;
  %808 = cast(%807, dtype="float64") /* ty=Tensor[(1296), float64] */;
  %809 = @func_8005() /* ty=(Tensor[(8, 4, 16), float64],) */;
  %810 = @func_5619() /* ty=(Tensor[(3, 14, 10), bool], Tensor[(1, 13, 9), float64], Tensor[(1, 13, 9), float64]) */;
  %811 = %798.0;
  %812 = @func_1260() /* ty=Tensor[(3, 14, 10), float32] */;
  %813 = %805.1;
  %814 = cos(%808) /* ty=Tensor[(1296), float64] */;
  %815 = %809.0;
  %816 = %810.2;
  %817 = @func_8560() /* ty=Tensor[(3, 14, 10), float32] */;
  (%811, %812, %813, meta[relay.Constant][33] /* ty=Tensor[(264), int16] */, meta[relay.Constant][34] /* ty=Tensor[(3, 216), int8] */, %814, %815, %816, %817)
}

def @func_10641() -> (Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float32]) {
  %818 = @func_1917() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) */;
  %819 = @func_7260() /* ty=(Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float64]) */;
  %820 = @func_10502() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64]) */;
  %821 = %818.1;
  %822 = %819.1;
  %823 = %820.2;
  %824 = @func_2965() /* ty=Tensor[(3, 14, 10), float32] */;
  (%821, %822, %823, %824)
}

def @func_9819(%var_9796: Tensor[(900), int64]) -> (Tensor[(1, 13, 9), float64], Tensor[(15, 6, 10), bool], int64, Tensor[(900), int64]) {
  %825 = @func_2442() /* ty=(Tensor[(1, 13, 9), float64],) */;
  %826 = cast(5 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %827 = cast(%var_9796, dtype="int64") /* ty=Tensor[(900), int64] */;
  %828 = reshape(%826, newshape=[]) /* ty=int64 */;
  %829 = reshape(%827, newshape=[15, 6, 10]) /* ty=Tensor[(15, 6, 10), int64] */;
  %830 = @func_5217(%828, %829) /* ty=(Tensor[(15, 6, 10), bool], Tensor[(3, 14, 10), float32]) */;
  %831 = %825.0;
  %832 = %830.0;
  (%831, %832, 5 /* ty=int64 */, %var_9796)
}

def @func_5345() -> Tensor[(3, 14, 10), float64] {
  %833 = @func_917() /* ty=Tensor[(3, 14, 10), float32] */;
  %834 = cast(%833, dtype="float64") /* ty=Tensor[(3, 14, 10), float64] */;
  sinh(%834) /* ty=Tensor[(3, 14, 10), float64] */
}

def @func_11501() -> Tensor[(12, 10, 11), float32] {
  %835 = cast(meta[relay.Constant][35] /* ty=Tensor[(12, 10, 11), float32] */, dtype="float32") /* ty=Tensor[(12, 10, 11), float32] */;
  log2(%835) /* ty=Tensor[(12, 10, 11), float32] */
}

def @func_12523(%var_12495: Tensor[(624), float32]) -> (Tensor[(3, 14, 10), float32], Tensor[(624), uint32]) {
  %836 = @func_3266() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), bool]) */;
  %837 = cast(%var_12495, dtype="float32") /* ty=Tensor[(624), float32] */;
  %838 = reshape(%837, newshape=[13, 6, 8]) /* ty=Tensor[(13, 6, 8), float32] */;
  %839 = @func_8725(%838) /* ty=(Tensor[(13, 6, 8), float32],) */;
  %840 = %839.0;
  %841 = cast(%840, dtype="uint32") /* ty=Tensor[(13, 6, 8), uint32] */;
  %842 = shape_of(%var_12495, dtype="int32") /* ty=Tensor[(1), int32] */;
  %843 = cast(%var_12495, dtype="uint32") /* ty=Tensor[(624), uint32] */;
  %844 = dyn.reshape(%841, %842, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %845 = %836.0;
  %846 = bitwise_and(%843, %844) /* ty=Tensor[(624), uint32] */;
  (%845, %846)
}

def @func_387(%var_374: Tensor[(8, 4, 16), float64]) -> (Tensor[(8, 4, 16), float64],) {
  %847 = cast(%var_374, dtype="float64") /* ty=Tensor[(8, 4, 16), float64] */;
  %848 = sinh(%847) /* ty=Tensor[(8, 4, 16), float64] */;
  (%848,)
}

def @func_2048(%var_2039: Tensor[(3, 14, 10), float32]) -> Tensor[(3, 14, 10), bool] {
  %849 = @func_917() /* ty=Tensor[(3, 14, 10), float32] */;
  %850 = cast(%var_2039, dtype="bool") /* ty=Tensor[(3, 14, 10), bool] */;
  %851 = shape_of(%849, dtype="int32") /* ty=Tensor[(3), int32] */;
  %852 = cast(%849, dtype="bool") /* ty=Tensor[(3, 14, 10), bool] */;
  %853 = dyn.reshape(%850, %851, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%852, %853) /* ty=Tensor[(3, 14, 10), bool] */
}

def @func_4277(%var_4236: Tensor[(9, 9, 8), int8]) -> (Tensor[(9, 9, 8), int8], Tensor[(9, 9, 16), int64], Tensor[(1296), int64], float64, Tensor[(3, 14, 10), float32], Tensor[(9, 9, 8), float64]) {
  %854 = cast(%var_4236, dtype="int8") /* ty=Tensor[(9, 9, 8), int8] */;
  %855 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(9, 9, 8), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %856 = cast(meta[relay.Constant][36] /* ty=Tensor[(9, 9, 8), int8] */, dtype="int8") /* ty=Tensor[(9, 9, 8), int8] */;
  %857 = dyn.reshape(%854, %855, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %858 = cast(meta[relay.Constant][37] /* ty=Tensor[(1296), int64] */, dtype="int64") /* ty=Tensor[(1296), int64] */;
  %859 = cast(meta[relay.Constant][37] /* ty=Tensor[(1296), int64] */, dtype="int64") /* ty=Tensor[(1296), int64] */;
  %860 = cast(8.83299f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %861 = reshape(%858, newshape=[9, 9, 16]) /* ty=Tensor[(9, 9, 16), int64] */;
  %862 = reshape(%859, newshape=[9, 9, 16]) /* ty=Tensor[(9, 9, 16), int64] */;
  %863 = reshape(%860, newshape=[]) /* ty=float64 */;
  %864 = @func_511(%861, %862, %863) /* ty=(Tensor[(9, 9, 16), int64], Tensor[(1, 13, 9), float64], float64) */;
  %865 = cast(meta[relay.Constant][36] /* ty=Tensor[(9, 9, 8), int8] */, dtype="float64") /* ty=Tensor[(9, 9, 8), float64] */;
  %866 = exp(%865) /* ty=Tensor[(9, 9, 8), float64] */;
  %867 = cast(%var_4236, dtype="float64") /* ty=Tensor[(9, 9, 8), float64] */;
  %868 = shape_of(%866, dtype="int32") /* ty=Tensor[(3), int32] */;
  %869 = cast(%866, dtype="float64") /* ty=Tensor[(9, 9, 8), float64] */;
  %870 = dyn.reshape(%867, %868, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %871 = bitwise_or(%856, %857) /* ty=Tensor[(9, 9, 8), int8] */;
  %872 = %864.0;
  %873 = @func_2953() /* ty=Tensor[(3, 14, 10), float32] */;
  %874 = maximum(%869, %870) /* ty=Tensor[(9, 9, 8), float64] */;
  (%871, %872, meta[relay.Constant][37] /* ty=Tensor[(1296), int64] */, 8.83299f64 /* ty=float64 */, %873, %874)
}

def @func_4676() -> (Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], Tensor[(1, 13, 9), float64]) {
  %875 = @func_4153() /* ty=(Tensor[(1, 13, 9), float64],) */;
  %876 = @func_3603() /* ty=(Tensor[(1, 13, 9), float64],) */;
  %877 = @func_813() /* ty=Tensor[(3, 14, 10), float64] */;
  %878 = %875.0;
  %879 = %876.0;
  (%877, %878, %879)
}

def @func_7686(%var_7629: Tensor[(1170), float64]) -> (Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float64], Tensor[(675), float32], Tensor[(1170), float64], float64, Tensor[(3, 14, 10), float32], Tensor[(8, 4, 16), float32], Tensor[(3, 14, 10), float64], Tensor[(8, 4, 16), float64]) {
  %880 = @func_1354() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], float64, Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], Tensor[(1296), int64]) */;
  %881 = cast(meta[relay.Constant][38] /* ty=Tensor[(675), float32] */, dtype="float32") /* ty=Tensor[(675), float32] */;
  %882 = cast(%var_7629, dtype="float64") /* ty=Tensor[(1170), float64] */;
  %883 = cast(0.735838f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %884 = reshape(%881, newshape=[3, 15, 15]) /* ty=Tensor[(3, 15, 15), float32] */;
  %885 = reshape(%882, newshape=[1170]) /* ty=Tensor[(1170), float64] */;
  %886 = reshape(%883, newshape=[]) /* ty=float64 */;
  %887 = @func_6087(%884, %885, %886) /* ty=(Tensor[(3, 15, 15), float32], Tensor[(2, 10, 8), float32], Tensor[(160, 1), float32], Tensor[(3, 14, 10), float64], Tensor[(15, 13, 6), float64], Tensor[(1170), float64], Tensor[(1, 13, 9), float64], float64, Tensor[(3, 14, 10), float64]) */;
  %888 = @func_6681() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */;
  %889 = @func_1978() /* ty=(Tensor[(3, 14, 10), float64],) */;
  %890 = @func_6158() /* ty=(Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), float32]) */;
  %891 = %880.4;
  %892 = %887.3;
  %893 = %888.2;
  %894 = @func_3923() /* ty=Tensor[(8, 4, 16), float32] */;
  %895 = %889.0;
  %896 = %890.0;
  (%891, %892, meta[relay.Constant][38] /* ty=Tensor[(675), float32] */, %var_7629, 0.735838f64 /* ty=float64 */, %893, %894, %895, %896)
}

def @func_3649() -> Tensor[(1, 13, 9), float64] {
  %897 = @func_1623() /* ty=(Tensor[(1, 13, 9), float64],) */;
  %897.0
}

def @func_10406() -> (Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), float64], Tensor[(512), float64], Tensor[(8, 4, 16), float64]) {
  %898 = @func_2390() /* ty=(Tensor[(512), float64], Tensor[(3, 14, 10), float32]) */;
  %899 = @func_6747() /* ty=(Tensor[(8, 4, 16), float64], float64) */;
  %900 = @func_3645() /* ty=Tensor[(8, 4, 16), float64] */;
  %901 = @func_8926() /* ty=Tensor[(3, 14, 10), float64] */;
  %902 = %898.0;
  %903 = %899.0;
  (%900, %901, %902, %903)
}

def @func_12596() -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) {
  %904 = @func_1008() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */;
  %905 = @func_1917() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) */;
  %906 = %904.0;
  %907 = %905.0;
  (%906, %907)
}

def @func_3353() -> (Tensor[(8, 4, 16), float64], Tensor[(8, 4, 16), float64], Tensor[(420), float64], Tensor[(3, 14, 10), float32]) {
  %908 = @func_3040() /* ty=(Tensor[(8, 4, 16), float64],) */;
  %909 = %908.0;
  %910 = cast(%909, dtype="float64") /* ty=Tensor[(8, 4, 16), float64] */;
  %911 = reshape(%910, newshape=[8, 4, 16]) /* ty=Tensor[(8, 4, 16), float64] */;
  %912 = @func_387(%911) /* ty=(Tensor[(8, 4, 16), float64],) */;
  %913 = cast(meta[relay.Constant][39] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %914 = reshape(%913, newshape=[3, 14, 10]) /* ty=Tensor[(3, 14, 10), float64] */;
  %915 = @func_2428(%914) /* ty=(Tensor[(3, 14, 10), uint8],) */;
  %916 = %915.0;
  %917 = cast(%916, dtype="float32") /* ty=Tensor[(3, 14, 10), float32] */;
  %918 = %912.0;
  %919 = sin(%917) /* ty=Tensor[(3, 14, 10), float32] */;
  (%909, %918, meta[relay.Constant][39] /* ty=Tensor[(420), float64] */, %919)
}

def @func_8380() -> (Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64], Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), float64]) {
  %920 = @func_4441() /* ty=(Tensor[(8, 4, 16), float64], Tensor[(8, 4, 16), float64]) */;
  %921 = %920.0;
  %922 = cast(%921, dtype="float64") /* ty=Tensor[(8, 4, 16), float64] */;
  %923 = reshape(%922, newshape=[8, 4, 16]) /* ty=Tensor[(8, 4, 16), float64] */;
  %924 = @func_387(%923) /* ty=(Tensor[(8, 4, 16), float64],) */;
  %925 = @func_7716() /* ty=(Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float64]) */;
  %926 = @func_2965() /* ty=Tensor[(3, 14, 10), float32] */;
  %927 = @func_7551() /* ty=Tensor[(3, 14, 10), float64] */;
  %928 = %924.0;
  %929 = %925.1;
  (%921, %926, %927, %928, %929)
}

def @func_13063() -> Tensor[(1, 13, 9), float32] {
  %930 = @func_7606() /* ty=(Tensor[(1, 13, 9), float32],) */;
  %930.0
}

def @func_11393() -> (Tensor[(3, 14, 10), float32],) {
  %931 = @func_4507() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %932 = %931.0;
  (%932,)
}

def @func_2953() -> Tensor[(3, 14, 10), float32] {
  %933 = @func_1917() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) */;
  %933.0
}

def @func_8269() -> (Tensor[(648), int8],) {
  %934 = @func_6333() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(980), int32], Tensor[(980), int32], Tensor[(648), int8]) */;
  %935 = %934.3;
  (%935,)
}

def @func_1803() -> Tensor[(11, 4, 7), float64] {
  %936 = cast(meta[relay.Constant][40] /* ty=Tensor[(11, 4, 7), float64] */, dtype="float64") /* ty=Tensor[(11, 4, 7), float64] */;
  atanh(%936) /* ty=Tensor[(11, 4, 7), float64] */
}

def @func_7568() -> Tensor[(3, 14, 10), float64] {
  %937 = @func_2152() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64], Tensor[(8, 4, 16), float64], Tensor[(512), float64]) */;
  %937.1
}

def @func_13963() -> (Tensor[(3, 14, 10), float32],) {
  %938 = @func_10332() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */;
  %939 = %938.0;
  (%939,)
}

def @func_11480(%var_11468: Tensor[(8, 1, 12), uint64], %var_11469: Tensor[(8, 6, 12), uint64]) -> Tensor[(8, 6, 12), bool] {
  %940 = cast(%var_11468, dtype="bool") /* ty=Tensor[(8, 1, 12), bool] */;
  %941 = cast(%var_11469, dtype="bool") /* ty=Tensor[(8, 6, 12), bool] */;
  not_equal(%940, %941) /* ty=Tensor[(8, 6, 12), bool] */
}

def @func_14093() -> Tensor[(3, 14, 10), float64] {
  @func_2261() /* ty=Tensor[(3, 14, 10), float64] */
}

def @func_5710() -> (Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float64]) {
  %942 = @func_5619() /* ty=(Tensor[(3, 14, 10), bool], Tensor[(1, 13, 9), float64], Tensor[(1, 13, 9), float64]) */;
  %943 = %942.2;
  %944 = @func_1778() /* ty=Tensor[(3, 14, 10), float64] */;
  (%943, %944)
}

def @func_6293() -> Tensor[(3, 14, 10), float32] {
  %945 = @func_1168() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %945.0
}

def @func_12791() -> Tensor[(3, 14, 10), float32] {
  %946 = @func_9630() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %946.0
}

def @func_3040() -> (Tensor[(8, 4, 16), float64],) {
  %947 = @func_2352() /* ty=(Tensor[(8, 4, 16), float64],) */;
  %948 = %947.0;
  (%948,)
}

def @func_12090() -> Tensor[(1, 13, 9), float32] {
  %949 = @func_4145() /* ty=(Tensor[(512), float64], Tensor[(1, 13, 9), float32]) */;
  %949.1
}

def @func_5486(%var_5481: Tensor[(16, 13, 9), float64]) -> (Tensor[(3, 14, 10), float64], Tensor[(11, 4, 7), float64], Tensor[(16, 13, 9), bool]) {
  %950 = @func_1354() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], float64, Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], Tensor[(1296), int64]) */;
  %951 = @func_4153() /* ty=(Tensor[(1, 13, 9), float64],) */;
  %952 = %951.0;
  %953 = cast(%952, dtype="bool") /* ty=Tensor[(1, 13, 9), bool] */;
  %954 = cast(%var_5481, dtype="bool") /* ty=Tensor[(16, 13, 9), bool] */;
  %955 = %950.3;
  %956 = @func_1803() /* ty=Tensor[(11, 4, 7), float64] */;
  %957 = logical_or(%953, %954) /* ty=Tensor[(16, 13, 9), bool] */;
  (%955, %956, %957)
}

def @func_8917() -> (Tensor[(8, 4, 16), float64],) {
  %958 = @func_8005() /* ty=(Tensor[(8, 4, 16), float64],) */;
  %959 = %958.0;
  (%959,)
}

def @func_10011() -> (Tensor[(3, 14, 10), float32], Tensor[(11, 4, 7), float32], Tensor[(1, 13, 9), float32]) {
  %960 = @func_1463() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %961 = @func_1849() /* ty=(Tensor[(11, 4, 7), float32],) */;
  %962 = @func_7606() /* ty=(Tensor[(1, 13, 9), float32],) */;
  %963 = %960.0;
  %964 = %961.0;
  %965 = %962.0;
  (%963, %964, %965)
}

def @func_3618() -> Tensor[(12, 9, 6), float32] {
  %966 = cast(meta[relay.Constant][41] /* ty=Tensor[(12, 9, 6), float32] */, dtype="float32") /* ty=Tensor[(12, 9, 6), float32] */;
  log2(%966) /* ty=Tensor[(12, 9, 6), float32] */
}

def @func_6579(%var_6572: Tensor[(1, 15, 3), float64]) -> (Tensor[(1, 15, 3), float64],) {
  %967 = cast(%var_6572, dtype="float64") /* ty=Tensor[(1, 15, 3), float64] */;
  %968 = log2(%967) /* ty=Tensor[(1, 15, 3), float64] */;
  (%968,)
}

def @func_6559() -> Tensor[(1296), int64] {
  %969 = @func_2928() /* ty=(Tensor[(1296), int64], Tensor[(2, 256), int32], Tensor[(4, 6, 11), float64], Tensor[(44), int16], Tensor[(132, 2), int16]) */;
  %969.0
}

def @func_4397() -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) {
  %970 = @func_2390() /* ty=(Tensor[(512), float64], Tensor[(3, 14, 10), float32]) */;
  %971 = %970.1;
  %972 = @func_1778() /* ty=Tensor[(3, 14, 10), float64] */;
  (%971, %972)
}

def @func_14209() -> (Tensor[(1, 13, 9), float64], Tensor[(13, 6, 8), float32], Tensor[(624), float32]) {
  %973 = @func_13260() /* ty=(Tensor[(1, 13, 9), float64],) */;
  %974 = cast(meta[relay.Constant][42] /* ty=Tensor[(624), float32] */, dtype="float32") /* ty=Tensor[(624), float32] */;
  %975 = reshape(%974, newshape=[13, 6, 8]) /* ty=Tensor[(13, 6, 8), float32] */;
  %976 = @func_8725(%975) /* ty=(Tensor[(13, 6, 8), float32],) */;
  %977 = %973.0;
  %978 = %976.0;
  (%977, %978, meta[relay.Constant][42] /* ty=Tensor[(624), float32] */)
}

def @func_10332() -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) {
  %979 = @func_1917() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) */;
  %980 = @func_7598() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */;
  %981 = @func_2953() /* ty=Tensor[(3, 14, 10), float32] */;
  %982 = %979.0;
  %983 = %980.1;
  (%981, %982, %983)
}

def @func_9017() -> (Tensor[(12, 9, 6), float32], Tensor[(3, 14, 10), float64], Tensor[(15, 45), float32], Tensor[(1, 13, 9), float64], Tensor[(1170), float64]) {
  %984 = cast(meta[relay.Constant][43] /* ty=Tensor[(15, 45), float32] */, dtype="float32") /* ty=Tensor[(15, 45), float32] */;
  %985 = cast(meta[relay.Constant][44] /* ty=Tensor[(1170), float64] */, dtype="float64") /* ty=Tensor[(1170), float64] */;
  %986 = cast(-0.225062f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %987 = reshape(%984, newshape=[3, 15, 15]) /* ty=Tensor[(3, 15, 15), float32] */;
  %988 = reshape(%985, newshape=[1170]) /* ty=Tensor[(1170), float64] */;
  %989 = reshape(%986, newshape=[]) /* ty=float64 */;
  %990 = @func_6087(%987, %988, %989) /* ty=(Tensor[(3, 15, 15), float32], Tensor[(2, 10, 8), float32], Tensor[(160, 1), float32], Tensor[(3, 14, 10), float64], Tensor[(15, 13, 6), float64], Tensor[(1170), float64], Tensor[(1, 13, 9), float64], float64, Tensor[(3, 14, 10), float64]) */;
  %991 = cast(meta[relay.Constant][44] /* ty=Tensor[(1170), float64] */, dtype="float64") /* ty=Tensor[(1170), float64] */;
  %992 = cast(-0.225062f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %993 = @func_3618() /* ty=Tensor[(12, 9, 6), float32] */;
  %994 = %990.3;
  %995 = @func_3649() /* ty=Tensor[(1, 13, 9), float64] */;
  %996 = multiply(%991, %992) /* ty=Tensor[(1170), float64] */;
  (%993, %994, meta[relay.Constant][43] /* ty=Tensor[(15, 45), float32] */, %995, %996)
}

def @func_11837() -> (Tensor[(3, 14, 10), uint16], Tensor[(3, 14, 10), float32]) {
  %997 = @func_11056() /* ty=(Tensor[(3, 14, 10), float64],) */;
  %998 = %997.0;
  %999 = @func_813() /* ty=Tensor[(3, 14, 10), float64] */;
  %1000 = cast(%999, dtype="uint16") /* ty=Tensor[(3, 14, 10), uint16] */;
  %1001 = shape_of(%998, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1002 = cast(%998, dtype="uint16") /* ty=Tensor[(3, 14, 10), uint16] */;
  %1003 = dyn.reshape(%1000, %1001, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %1004 = multiply(%1002, %1003) /* ty=Tensor[(3, 14, 10), uint16] */;
  %1005 = @func_2253() /* ty=Tensor[(3, 14, 10), float32] */;
  (%1004, %1005)
}

def @func_3266() -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), bool]) {
  %1006 = @func_1168() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %1007 = %1006.0;
  %1008 = cast(%1007, dtype="float32") /* ty=Tensor[(3, 14, 10), float32] */;
  %1009 = reshape(%1008, newshape=[3, 14, 10]) /* ty=Tensor[(3, 14, 10), float32] */;
  %1010 = @func_2048(%1009) /* ty=Tensor[(3, 14, 10), bool] */;
  (%1007, %1010)
}

def @func_8189(%var_8181: bool, %var_8182: Tensor[(11, 13, 8), bool]) -> (Tensor[(11, 13, 8), bool],) {
  %1011 = cast(%var_8181, dtype="bool") /* ty=bool */;
  %1012 = cast(%var_8182, dtype="bool") /* ty=Tensor[(11, 13, 8), bool] */;
  %1013 = logical_or(%1011, %1012) /* ty=Tensor[(11, 13, 8), bool] */;
  (%1013,)
}

def @func_8220() -> (Tensor[(3, 14, 10), float32],) {
  %1014 = @func_2801() /* ty=Tensor[(3, 14, 10), float32] */;
  (%1014,)
}

def @func_8034() -> Tensor[(3, 14, 10), float64] {
  @func_7551() /* ty=Tensor[(3, 14, 10), float64] */
}

def @func_14649(%var_14621: bool, %var_14622: Tensor[(1144), bool], %var_14628: Tensor[(648), int8]) -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64], Tensor[(2, 8, 15), float64], Tensor[(240), float64], Tensor[(1, 13, 9), float64], Tensor[(1, 13, 9), float64], Tensor[(11, 13, 8), bool], bool, Tensor[(1144), bool], Tensor[(3, 14, 10), float64], Tensor[(980), int32], Tensor[(648), int8], Tensor[(3, 14, 10), float32]) {
  %1015 = @func_1463() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %1016 = %1015.0;
  %1017 = cast(%1016, dtype="float32") /* ty=Tensor[(3, 14, 10), float32] */;
  %1018 = @func_1917() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) */;
  %1019 = @func_8477() /* ty=(Tensor[(3, 14, 10), float64],) */;
  %1020 = cast(meta[relay.Constant][45] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %1021 = reshape(%1020, newshape=[2, 8, 15]) /* ty=Tensor[(2, 8, 15), float64] */;
  %1022 = @func_11590() /* ty=(Tensor[(1, 13, 9), float64],) */;
  %1023 = @func_2442() /* ty=(Tensor[(1, 13, 9), float64],) */;
  %1024 = cast(%var_14621, dtype="bool") /* ty=bool */;
  %1025 = cast(%var_14622, dtype="bool") /* ty=Tensor[(1144), bool] */;
  %1026 = reshape(%1024, newshape=[]) /* ty=bool */;
  %1027 = reshape(%1025, newshape=[11, 13, 8]) /* ty=Tensor[(11, 13, 8), bool] */;
  %1028 = @func_8189(%1026, %1027) /* ty=(Tensor[(11, 13, 8), bool],) */;
  %1029 = cast(meta[relay.Constant][46] /* ty=Tensor[(980), int32] */, dtype="int32") /* ty=Tensor[(980), int32] */;
  %1030 = cast(%var_14628, dtype="int8") /* ty=Tensor[(648), int8] */;
  %1031 = reshape(%1029, newshape=[980, 1]) /* ty=Tensor[(980, 1), int32] */;
  %1032 = reshape(%1030, newshape=[648]) /* ty=Tensor[(648), int8] */;
  %1033 = @func_4858(%1031, %1032) /* ty=(Tensor[(3, 14, 10), float64], Tensor[(14, 14, 5), int32], Tensor[(16, ?, 14), uint16], Tensor[(980, 6), uint32], Tensor[(3, 14, 10), float32], Tensor[(1296), int64], Tensor[(9, 9, 8), int8], Tensor[(648), int8], Tensor[(16, ?, 14), uint16], Tensor[(3, 14, 10), float64], Tensor[(980, 224), float32]) */;
  %1034 = @func_10011() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(11, 4, 7), float32], Tensor[(1, 13, 9), float32]) */;
  %1035 = acos(%1017) /* ty=Tensor[(3, 14, 10), float32] */;
  %1036 = %1018.0;
  %1037 = %1019.0;
  %1038 = @func_9147(%1021) /* ty=Tensor[(2, 8, 15), float64] */;
  %1039 = %1022.0;
  %1040 = %1023.0;
  %1041 = %1028.0;
  %1042 = %1033.9;
  %1043 = %1034.0;
  (%1035, %1036, %1037, %1038, meta[relay.Constant][45] /* ty=Tensor[(240), float64] */, %1039, %1040, %1041, %var_14621, %var_14622, %1042, meta[relay.Constant][46] /* ty=Tensor[(980), int32] */, %var_14628, %1043)
}

def @func_3305() -> Tensor[(8, 4, 16), float32] {
  %1044 = @func_2698() /* ty=(Tensor[(8, 4, 16), float32],) */;
  %1044.0
}

def @func_681(%var_672: Tensor[(14, 14, 5), int32], %var_673: Tensor[(14, 14, 5), int32]) -> (Tensor[(14, 14, 5), int32],) {
  %1045 = cast(%var_673, dtype="int32") /* ty=Tensor[(14, 14, 5), int32] */;
  %1046 = shape_of(%var_672, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1047 = cast(%var_672, dtype="int32") /* ty=Tensor[(14, 14, 5), int32] */;
  %1048 = dyn.reshape(%1045, %1046, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %1049 = bitwise_xor(%1047, %1048) /* ty=Tensor[(14, 14, 5), int32] */;
  (%1049,)
}

def @func_7475(%var_7434: Tensor[(4, 3, 5), float64], %var_7447: Tensor[(1, 13, 9), float64]) -> (Tensor[(4, 3, 5), float64], Tensor[(1, 13, 9), float64], Tensor[(?, 13, 9), bool], Tensor[(3, 14, 10), uint32], Tensor[(420), float32], Tensor[(8, 30), bool], Tensor[(1, 13, 9), float64]) {
  %1050 = cast(%var_7434, dtype="float64") /* ty=Tensor[(4, 3, 5), float64] */;
  %1051 = @func_4153() /* ty=(Tensor[(1, 13, 9), float64],) */;
  %1052 = @func_7334() /* ty=(Tensor[(1, 13, 9), float64],) */;
  %1053 = %1052.0;
  %1054 = cast(%var_7447, dtype="bool") /* ty=Tensor[(1, 13, 9), bool] */;
  %1055 = shape_of(%1053, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1056 = cast(%1053, dtype="bool") /* ty=Tensor[(1, 13, 9), bool] */;
  %1057 = dyn.reshape(%1054, %1055, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1058 = cast(meta[relay.Constant][47] /* ty=Tensor[(420), float32] */, dtype="float32") /* ty=Tensor[(420), float32] */;
  %1059 = cast(meta[relay.Constant][48] /* ty=Tensor[(8, 30), bool] */, dtype="bool") /* ty=Tensor[(8, 30), bool] */;
  %1060 = reshape(%1058, newshape=[3, 14, 10]) /* ty=Tensor[(3, 14, 10), float32] */;
  %1061 = reshape(%1059, newshape=[240]) /* ty=Tensor[(240), bool] */;
  %1062 = @func_6386(%1060, %1061) /* ty=(Tensor[(3, 14, 10), uint32], Tensor[(8, 4, 16), float64], Tensor[(8, 2, 15), bool], Tensor[(240), bool], Tensor[(8, 2, 15), bool]) */;
  %1063 = @func_4676() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], Tensor[(1, 13, 9), float64]) */;
  %1064 = exp(%1050) /* ty=Tensor[(4, 3, 5), float64] */;
  %1065 = %1051.0;
  %1066 = logical_and(%1056, %1057) /* ty=Tensor[(?, 13, 9), bool] */;
  %1067 = %1062.0;
  %1068 = %1063.2;
  (%1064, %1065, %1066, %1067, meta[relay.Constant][47] /* ty=Tensor[(420), float32] */, meta[relay.Constant][48] /* ty=Tensor[(8, 30), bool] */, %1068)
}

def @func_3426() -> Tensor[(3, 14, 10), float32] {
  @func_2953() /* ty=Tensor[(3, 14, 10), float32] */
}

def @func_14436(%var_14395: Tensor[(400), float32]) -> (Tensor[(3, 14, 10), float32], Tensor[(400), float32], Tensor[(3, 14, 10), float32], Tensor[(4, 10, 10), uint32]) {
  %1069 = @func_8220() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %1070 = @func_4567() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(8, 4, 16), float64]) */;
  %1071 = cast(%var_14395, dtype="float32") /* ty=Tensor[(400), float32] */;
  %1072 = reshape(%1071, newshape=[4, 10, 10]) /* ty=Tensor[(4, 10, 10), float32] */;
  %1073 = @func_3718(%1072) /* ty=(Tensor[(4, 10, 10), float32],) */;
  %1074 = %1073.0;
  %1075 = cast(%1074, dtype="float32") /* ty=Tensor[(4, 10, 10), float32] */;
  %1076 = atan(%1075) /* ty=Tensor[(4, 10, 10), float32] */;
  %1077 = cast(%1074, dtype="uint32") /* ty=Tensor[(4, 10, 10), uint32] */;
  %1078 = shape_of(%1076, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1079 = cast(%1076, dtype="uint32") /* ty=Tensor[(4, 10, 10), uint32] */;
  %1080 = dyn.reshape(%1077, %1078, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %1081 = %1069.0;
  %1082 = %1070.0;
  %1083 = add(%1079, %1080) /* ty=Tensor[(4, 10, 10), uint32] */;
  (%1081, %var_14395, %1082, %1083)
}

def @func_14920() -> Tensor[(9, 13, 9), bool] {
  @func_13469() /* ty=Tensor[(9, 13, 9), bool] */
}

def @func_2965() -> Tensor[(3, 14, 10), float32] {
  @func_2253() /* ty=Tensor[(3, 14, 10), float32] */
}

def @func_15436() -> Tensor[(3, 14, 10), float32] {
  %1084 = @func_13963() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %1084.0
}

def @func_7551() -> Tensor[(3, 14, 10), float64] {
  @func_5345() /* ty=Tensor[(3, 14, 10), float64] */
}

def @func_4206() -> (Tensor[(?, 13, 9), int8], Tensor[(3, 14, 10), float32]) {
  %1085 = @func_1623() /* ty=(Tensor[(1, 13, 9), float64],) */;
  %1086 = %1085.0;
  %1087 = @func_3649() /* ty=Tensor[(1, 13, 9), float64] */;
  %1088 = cast(%1087, dtype="int8") /* ty=Tensor[(1, 13, 9), int8] */;
  %1089 = shape_of(%1086, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1090 = cast(%1086, dtype="int8") /* ty=Tensor[(1, 13, 9), int8] */;
  %1091 = dyn.reshape(%1088, %1089, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %1092 = @func_1463() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %1093 = add(%1090, %1091) /* ty=Tensor[(?, 13, 9), int8] */;
  %1094 = %1092.0;
  (%1093, %1094)
}

def @func_10104() -> (Tensor[(3, 14, 10), float64],) {
  %1095 = @func_826() /* ty=Tensor[(3, 14, 10), float64] */;
  (%1095,)
}

def @func_5251() -> (Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64]) {
  %1096 = @func_1917() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) */;
  %1097 = %1096.1;
  %1098 = @func_826() /* ty=Tensor[(3, 14, 10), float64] */;
  (%1097, %1098)
}

def @func_4153() -> (Tensor[(1, 13, 9), float64],) {
  %1099 = @func_3044() /* ty=(Tensor[(1, 13, 9), float64],) */;
  %1100 = %1099.0;
  (%1100,)
}

def @func_7716() -> (Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float64]) {
  %1101 = @func_1614() /* ty=(float64, Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float32]) */;
  %1102 = @func_1917() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) */;
  %1103 = %1101.2;
  %1104 = %1102.1;
  (%1103, %1104)
}

def @func_7606() -> (Tensor[(1, 13, 9), float32],) {
  %1105 = @func_4145() /* ty=(Tensor[(512), float64], Tensor[(1, 13, 9), float32]) */;
  %1106 = %1105.1;
  (%1106,)
}

def @func_6269() -> (Tensor[(3, 14, 10), float32], Tensor[(8, 4, 16), float64], Tensor[(8, 4, 16), float32]) {
  %1107 = @func_6158() /* ty=(Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), float32]) */;
  %1108 = @func_4441() /* ty=(Tensor[(8, 4, 16), float64], Tensor[(8, 4, 16), float64]) */;
  %1109 = @func_2698() /* ty=(Tensor[(8, 4, 16), float32],) */;
  %1110 = %1107.1;
  %1111 = %1108.1;
  %1112 = %1109.0;
  (%1110, %1111, %1112)
}

def @func_5406() -> Tensor[(3, 14, 10), float64] {
  %1113 = @func_842() /* ty=(Tensor[(3, 14, 10), float64],) */;
  %1113.0
}

def @func_1463() -> (Tensor[(3, 14, 10), float32],) {
  %1114 = @func_938() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */;
  %1115 = %1114.1;
  (%1115,)
}

def @func_7239() -> (Tensor[(8, 4, 16), float64], Tensor[(1, 13, 9), float64], Tensor[(11, 4, 7), float64], Tensor[(980), int32], Tensor[(1, 13, 9), float64]) {
  %1116 = @func_3353() /* ty=(Tensor[(8, 4, 16), float64], Tensor[(8, 4, 16), float64], Tensor[(420), float64], Tensor[(3, 14, 10), float32]) */;
  %1117 = @func_4291() /* ty=(Tensor[(1, 13, 9), float64],) */;
  %1118 = @func_6333() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(980), int32], Tensor[(980), int32], Tensor[(648), int8]) */;
  %1119 = @func_4153() /* ty=(Tensor[(1, 13, 9), float64],) */;
  %1120 = %1116.0;
  %1121 = %1117.0;
  %1122 = @func_1803() /* ty=Tensor[(11, 4, 7), float64] */;
  %1123 = %1118.1;
  %1124 = %1119.0;
  (%1120, %1121, %1122, %1123, %1124)
}

def @func_8876() -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64], Tensor[(1296), int64]) {
  %1125 = @func_6681() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */;
  %1126 = @func_7026() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %1127 = %1126.0;
  %1128 = cast(%1127, dtype="float64") /* ty=Tensor[(3, 14, 10), float64] */;
  %1129 = %1125.2;
  %1130 = log(%1128) /* ty=Tensor[(3, 14, 10), float64] */;
  %1131 = @func_6559() /* ty=Tensor[(1296), int64] */;
  (%1129, %1130, %1131)
}

def @func_13809() -> (Tensor[(3, 14, 10), float64],) {
  %1132 = @func_10104() /* ty=(Tensor[(3, 14, 10), float64],) */;
  %1133 = %1132.0;
  (%1133,)
}

def @func_3769(%var_3754: uint64, %var_3755: Tensor[(3, 12, 4), uint64], %var_3760: Tensor[(1296), int64]) -> (Tensor[(3, 12, 4), bool], Tensor[(1296), int8], Tensor[(1296), int64]) {
  %1134 = cast(%var_3754, dtype="bool") /* ty=bool */;
  %1135 = cast(%var_3755, dtype="bool") /* ty=Tensor[(3, 12, 4), bool] */;
  %1136 = cast(%var_3760, dtype="int64") /* ty=Tensor[(1296), int64] */;
  %1137 = cast(%var_3760, dtype="int64") /* ty=Tensor[(1296), int64] */;
  %1138 = reshape(%1136, newshape=[1296]) /* ty=Tensor[(1296), int64] */;
  %1139 = reshape(%1137, newshape=[1296]) /* ty=Tensor[(1296), int64] */;
  %1140 = @func_2655(%1138, %1139) /* ty=(Tensor[(8, 4, 16), float64], Tensor[(1296), int64], Tensor[(8, 4, 16), float64], Tensor[(1296), int8]) */;
  %1141 = equal(%1134, %1135) /* ty=Tensor[(3, 12, 4), bool] */;
  %1142 = %1140.3;
  (%1141, %1142, %var_3760)
}

def @func_2428(%var_2420: Tensor[(3, 14, 10), float64]) -> (Tensor[(3, 14, 10), uint8],) {
  %1143 = @func_2261() /* ty=Tensor[(3, 14, 10), float64] */;
  %1144 = cast(%var_2420, dtype="uint8") /* ty=Tensor[(3, 14, 10), uint8] */;
  %1145 = shape_of(%1143, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1146 = cast(%1143, dtype="uint8") /* ty=Tensor[(3, 14, 10), uint8] */;
  %1147 = dyn.reshape(%1144, %1145, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %1148 = bitwise_and(%1146, %1147) /* ty=Tensor[(3, 14, 10), uint8] */;
  (%1148,)
}

def @func_9282() -> (Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64], Tensor[(240), bool], Tensor[(8, 2, 15), float64]) {
  %1149 = @func_1917() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) */;
  %1150 = %1149.1;
  %1151 = cast(%1150, dtype="float32") /* ty=Tensor[(3, 14, 10), float32] */;
  %1152 = cast(meta[relay.Constant][49] /* ty=Tensor[(240), bool] */, dtype="bool") /* ty=Tensor[(240), bool] */;
  %1153 = reshape(%1151, newshape=[3, 14, 10]) /* ty=Tensor[(3, 14, 10), float32] */;
  %1154 = reshape(%1152, newshape=[240]) /* ty=Tensor[(240), bool] */;
  %1155 = @func_6386(%1153, %1154) /* ty=(Tensor[(3, 14, 10), uint32], Tensor[(8, 4, 16), float64], Tensor[(8, 2, 15), bool], Tensor[(240), bool], Tensor[(8, 2, 15), bool]) */;
  %1156 = %1155.4;
  %1157 = cast(%1156, dtype="float64") /* ty=Tensor[(8, 2, 15), float64] */;
  %1158 = @func_8034() /* ty=Tensor[(3, 14, 10), float64] */;
  %1159 = sqrt(%1157) /* ty=Tensor[(8, 2, 15), float64] */;
  (%1158, %1150, meta[relay.Constant][49] /* ty=Tensor[(240), bool] */, %1159)
}

def @func_9147(%var_9144: Tensor[(2, 8, 15), float64]) -> Tensor[(2, 8, 15), float64] {
  %1160 = cast(%var_9144, dtype="float64") /* ty=Tensor[(2, 8, 15), float64] */;
  log2(%1160) /* ty=Tensor[(2, 8, 15), float64] */
}

def @func_8460() -> (Tensor[(8, 4, 16), float32],) {
  %1161 = @func_2698() /* ty=(Tensor[(8, 4, 16), float32],) */;
  %1162 = %1161.0;
  (%1162,)
}

def @func_13667() -> (Tensor[(3, 14, 10), float32],) {
  %1163 = @func_2801() /* ty=Tensor[(3, 14, 10), float32] */;
  (%1163,)
}

def @func_5163(%var_5138: Tensor[(80, 2), float32]) -> (Tensor[(13, 3, 12), float32], Tensor[(8, 4, 16), float32], Tensor[(80, 2), bool], Tensor[(3, 14, 10), uint8], Tensor[(70, 6), float64]) {
  %1164 = cast(meta[relay.Constant][50] /* ty=Tensor[(13, 3, 12), float32] */, dtype="float32") /* ty=Tensor[(13, 3, 12), float32] */;
  %1165 = @func_2698() /* ty=(Tensor[(8, 4, 16), float32],) */;
  %1166 = cast(%var_5138, dtype="float32") /* ty=Tensor[(80, 2), float32] */;
  %1167 = reshape(%1166, newshape=[160]) /* ty=Tensor[(160), float32] */;
  %1168 = @func_5061(%1167) /* ty=(Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float32], Tensor[(160), float32]) */;
  %1169 = %1168.2;
  %1170 = cast(%1169, dtype="bool") /* ty=Tensor[(160), bool] */;
  %1171 = shape_of(%var_5138, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1172 = cast(%var_5138, dtype="bool") /* ty=Tensor[(80, 2), bool] */;
  %1173 = dyn.reshape(%1170, %1171, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %1174 = cast(meta[relay.Constant][51] /* ty=Tensor[(70, 6), float64] */, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
  %1175 = reshape(%1174, newshape=[3, 14, 10]) /* ty=Tensor[(3, 14, 10), float64] */;
  %1176 = @func_2428(%1175) /* ty=(Tensor[(3, 14, 10), uint8],) */;
  %1177 = acosh(%1164) /* ty=Tensor[(13, 3, 12), float32] */;
  %1178 = %1165.0;
  %1179 = equal(%1172, %1173) /* ty=Tensor[(80, 2), bool] */;
  %1180 = %1176.0;
  (%1177, %1178, %1179, %1180, meta[relay.Constant][51] /* ty=Tensor[(70, 6), float64] */)
}

def @func_9491(%var_9489: Tensor[(54, 12), int8]) -> (Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), float32], Tensor[(8, 4, 16), float64], Tensor[(98, 10), int32], Tensor[(54, 12), int8]) {
  %1181 = @func_4397() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) */;
  %1182 = cast(meta[relay.Constant][52] /* ty=Tensor[(98, 10), int32] */, dtype="int32") /* ty=Tensor[(98, 10), int32] */;
  %1183 = cast(%var_9489, dtype="int8") /* ty=Tensor[(54, 12), int8] */;
  %1184 = reshape(%1182, newshape=[980]) /* ty=Tensor[(980), int32] */;
  %1185 = reshape(%1183, newshape=[648]) /* ty=Tensor[(648), int8] */;
  %1186 = @func_5931(%1184, %1185) /* ty=(Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), float64], Tensor[(980), int32], Tensor[(648), int8], Tensor[(3, 14, 10), float32]) */;
  %1187 = @func_3645() /* ty=Tensor[(8, 4, 16), float64] */;
  %1188 = %1181.0;
  %1189 = %1186.0;
  (%1187, %1188, %1189, meta[relay.Constant][52] /* ty=Tensor[(98, 10), int32] */, %var_9489)
}

def @func_6522() -> (Tensor[(3, 14, 10), float32],) {
  %1190 = @func_6293() /* ty=Tensor[(3, 14, 10), float32] */;
  %1191 = cast(%1190, dtype="float32") /* ty=Tensor[(3, 14, 10), float32] */;
  %1192 = log10(%1191) /* ty=Tensor[(3, 14, 10), float32] */;
  (%1192,)
}

def @func_7401() -> Tensor[(8, 4, 16), float64] {
  %1193 = @func_2414() /* ty=(Tensor[(9, 13, 9), bool], Tensor[(8, 4, 16), float64]) */;
  %1193.1
}

def @func_2698() -> (Tensor[(8, 4, 16), float32],) {
  %1194 = @func_2414() /* ty=(Tensor[(9, 13, 9), bool], Tensor[(8, 4, 16), float64]) */;
  %1195 = %1194.1;
  %1196 = cast(%1195, dtype="float32") /* ty=Tensor[(8, 4, 16), float32] */;
  %1197 = sqrt(%1196) /* ty=Tensor[(8, 4, 16), float32] */;
  %1198 = cast(%1197, dtype="float32") /* ty=Tensor[(8, 4, 16), float32] */;
  %1199 = shape_of(%1195, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1200 = cast(%1195, dtype="float32") /* ty=Tensor[(8, 4, 16), float32] */;
  %1201 = dyn.reshape(%1198, %1199, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1202 = power(%1200, %1201) /* ty=Tensor[(8, 4, 16), float32] */;
  (%1202,)
}

def @func_3645() -> Tensor[(8, 4, 16), float64] {
  %1203 = @func_2414() /* ty=(Tensor[(9, 13, 9), bool], Tensor[(8, 4, 16), float64]) */;
  %1203.1
}

def @func_4321(%var_4309: Tensor[(16, 1, 14), uint16]) -> (Tensor[(16, ?, 14), uint16],) {
  %1204 = cast(%var_4309, dtype="uint16") /* ty=Tensor[(16, 1, 14), uint16] */;
  %1205 = shape_of(meta[relay.Constant][53] /* ty=Tensor[(16, 1, 14), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1206 = cast(meta[relay.Constant][53] /* ty=Tensor[(16, 1, 14), uint16] */, dtype="uint16") /* ty=Tensor[(16, 1, 14), uint16] */;
  %1207 = dyn.reshape(%1204, %1205, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %1208 = multiply(%1206, %1207) /* ty=Tensor[(16, ?, 14), uint16] */;
  (%1208,)
}

def @func_3946(%var_3938: Tensor[(8, 2, 15), bool], %var_3939: Tensor[(8, 2, 15), bool]) -> Tensor[(8, 2, 15), bool] {
  %1209 = cast(%var_3939, dtype="bool") /* ty=Tensor[(8, 2, 15), bool] */;
  %1210 = shape_of(%var_3938, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1211 = cast(%var_3938, dtype="bool") /* ty=Tensor[(8, 2, 15), bool] */;
  %1212 = dyn.reshape(%1209, %1210, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%1211, %1212) /* ty=Tensor[(8, 2, 15), bool] */
}

def @func_8505(%var_8488: uint32) -> (Tensor[(15, 4, 8), bool], Tensor[(10, 42), uint8]) {
  %1213 = cast(%var_8488, dtype="bool") /* ty=bool */;
  %1214 = cast(meta[relay.Constant][54] /* ty=Tensor[(15, 4, 8), uint32] */, dtype="bool") /* ty=Tensor[(15, 4, 8), bool] */;
  %1215 = @func_7760() /* ty=(Tensor[(8, 4, 16), float64], Tensor[(10, 42), uint8]) */;
  %1216 = equal(%1213, %1214) /* ty=Tensor[(15, 4, 8), bool] */;
  %1217 = %1215.1;
  (%1216, %1217)
}

def @func_1119() -> (Tensor[(3, 14, 10), float64],) {
  %1218 = @func_866() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64]) */;
  %1219 = %1218.0;
  (%1219,)
}

def @func_4441() -> (Tensor[(8, 4, 16), float64], Tensor[(8, 4, 16), float64]) {
  %1220 = @func_2152() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64], Tensor[(8, 4, 16), float64], Tensor[(512), float64]) */;
  %1221 = %1220.2;
  %1222 = cast(%1221, dtype="float64") /* ty=Tensor[(8, 4, 16), float64] */;
  %1223 = reshape(%1222, newshape=[512]) /* ty=Tensor[(512), float64] */;
  %1224 = @func_2312(%1223) /* ty=(Tensor[(3, 14, 10), float32], Tensor[(8, 4, 16), float64], Tensor[(512), int8], Tensor[(1, 13, 9), float64], Tensor[(4, 6, 11), int16], Tensor[(44), int16], Tensor[(264), int16]) */;
  %1225 = %1224.1;
  (%1221, %1225)
}

def @func_7026() -> (Tensor[(3, 14, 10), float32],) {
  %1226 = @func_1260() /* ty=Tensor[(3, 14, 10), float32] */;
  (%1226,)
}

def @func_4291() -> (Tensor[(1, 13, 9), float64],) {
  %1227 = @func_3649() /* ty=Tensor[(1, 13, 9), float64] */;
  (%1227,)
}

def @func_7598() -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) {
  %1228 = @func_938() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */;
  %1229 = %1228.0;
  %1230 = @func_917() /* ty=Tensor[(3, 14, 10), float32] */;
  (%1229, %1230)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_387(%var_374: Tensor[(8, 4, 16), float64]) -> (Tensor[(8, 4, 16), float64],) {
  %0 = cast(%var_374, dtype="float64") /* ty=Tensor[(8, 4, 16), float64] */;
  %1 = sinh(%0) /* ty=Tensor[(8, 4, 16), float64] */;
  (%1,)
}

def @func_14093() -> Tensor[(3, 14, 10), float64] {
  @func_2261() /* ty=Tensor[(3, 14, 10), float64] */
}

def @func_13350() -> Tensor[(3, 14, 10), float32] {
  @func_2801() /* ty=Tensor[(3, 14, 10), float32] */
}

def @func_11393() -> (Tensor[(3, 14, 10), float32],) {
  %2 = @func_4507() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %3 = %2.0;
  (%3,)
}

def @func_3950(%var_3948: Tensor[(8, 2, 15), bool], %var_3949: Tensor[(8, 2, 15), bool]) -> Tensor[(8, 2, 15), bool] {
  @func_3946(%var_3948, %var_3949) /* ty=Tensor[(8, 2, 15), bool] */
}

def @func_11837() -> (Tensor[(3, 14, 10), uint16], Tensor[(3, 14, 10), float32]) {
  %4 = @func_11056() /* ty=(Tensor[(3, 14, 10), float64],) */;
  %5 = %4.0;
  %6 = @func_813() /* ty=Tensor[(3, 14, 10), float64] */;
  %7 = cast(%6, dtype="uint16") /* ty=Tensor[(3, 14, 10), uint16] */;
  %8 = shape_of(%5, dtype="int32") /* ty=Tensor[(3), int32] */;
  %9 = cast(%5, dtype="uint16") /* ty=Tensor[(3, 14, 10), uint16] */;
  %10 = dyn.reshape(%7, %8, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %11 = multiply(%9, %10) /* ty=Tensor[(3, 14, 10), uint16] */;
  %12 = @func_2253() /* ty=Tensor[(3, 14, 10), float32] */;
  (%11, %12)
}

def @func_11395() -> (Tensor[(3, 14, 10), float32],) {
  @func_11393() /* ty=(Tensor[(3, 14, 10), float32],) */
}

def @func_684(%var_682: Tensor[(14, 14, 5), int32], %var_683: Tensor[(14, 14, 5), int32]) -> (Tensor[(14, 14, 5), int32],) {
  %18 = fn (%var_672: Tensor[(14, 14, 5), int32], %var_673: Tensor[(14, 14, 5), int32]) -> (Tensor[(14, 14, 5), int32],) {
    %13 = cast(%var_673, dtype="int32") /* ty=Tensor[(14, 14, 5), int32] */;
    %14 = shape_of(%var_672, dtype="int32") /* ty=Tensor[(3), int32] */;
    %15 = cast(%var_672, dtype="int32") /* ty=Tensor[(14, 14, 5), int32] */;
    %16 = dyn.reshape(%13, %14, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %17 = bitwise_xor(%15, %16) /* ty=Tensor[(14, 14, 5), int32] */;
    (%17,)
  };
  %18(%var_682, %var_683) /* ty=(Tensor[(14, 14, 5), int32],) */
}

def @func_6749() -> (Tensor[(8, 4, 16), float64], float64) {
  @func_6747() /* ty=(Tensor[(8, 4, 16), float64], float64) */
}

def @func_7569() -> Tensor[(3, 14, 10), float64] {
  %20 = fn () -> Tensor[(3, 14, 10), float64] {
    %19 = @func_2152() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64], Tensor[(8, 4, 16), float64], Tensor[(512), float64]) */;
    %19.1
  };
  %20() /* ty=Tensor[(3, 14, 10), float64] */
}

def @func_10194() -> Tensor[(3, 14, 10), bool] {
  @func_10192() /* ty=Tensor[(3, 14, 10), bool] */
}

def @func_9632() -> (Tensor[(3, 14, 10), float32],) {
  @func_9630() /* ty=(Tensor[(3, 14, 10), float32],) */
}

def @func_3426() -> Tensor[(3, 14, 10), float32] {
  @func_2953() /* ty=Tensor[(3, 14, 10), float32] */
}

def @func_11523() -> Tensor[(1170), float64] {
  @func_11521() /* ty=Tensor[(1170), float64] */
}

def @func_11738() -> (Tensor[(1, 13, 9), float64], Tensor[(8, 4, 16), float64]) {
  %23 = fn () -> (Tensor[(1, 13, 9), float64], Tensor[(8, 4, 16), float64]) {
    %21 = @func_3649() /* ty=Tensor[(1, 13, 9), float64] */;
    %22 = @func_3645() /* ty=Tensor[(8, 4, 16), float64] */;
    (%21, %22)
  };
  %23() /* ty=(Tensor[(1, 13, 9), float64], Tensor[(8, 4, 16), float64]) */
}

def @main(%var_15441: uint64, %var_15442: Tensor[(144), uint64], %var_15443: Tensor[(36, 36), int64]) -> (Tensor[(1, 13, 9), float64], Tensor[(3, 12, 4), bool], uint64, Tensor[(144), uint64], Tensor[(11, 4, 7), float64], Tensor[(8, 4, 16), float32], Tensor[(36, 36), float32]) {
  %24 = cast(%var_15441, dtype="uint64") /* ty=uint64 */;
  %25 = cast(%var_15442, dtype="uint64") /* ty=Tensor[(144), uint64] */;
  %26 = cast(%var_15443, dtype="int64") /* ty=Tensor[(36, 36), int64] */;
  %27 = reshape(%24, newshape=[]) /* ty=uint64 */;
  %28 = reshape(%25, newshape=[3, 12, 4]) /* ty=Tensor[(3, 12, 4), uint64] */;
  %29 = reshape(%26, newshape=[1296]) /* ty=Tensor[(1296), int64] */;
  %30 = @func_3774(%27, %28, %29) /* ty=(Tensor[(3, 12, 4), bool], Tensor[(1296), int8], Tensor[(1296), int64]) */;
  %31 = cast(%var_15443, dtype="float32") /* ty=Tensor[(36, 36), float32] */;
  %32 = @func_11624() /* ty=Tensor[(1, 13, 9), float64] */;
  %33 = %30.0;
  %34 = @func_11884() /* ty=Tensor[(11, 4, 7), float64] */;
  %35 = @func_3923() /* ty=Tensor[(8, 4, 16), float32] */;
  %36 = cosh(%31) /* ty=Tensor[(36, 36), float32] */;
  (%32, %33, %var_15441, %var_15442, %34, %35, %36)
}

def @func_12886(%var_12884: Tensor[(900), int64]) -> (Tensor[(8, 4, 16), float64], Tensor[(15, 6, 10), bool], int64, Tensor[(900), int64]) {
  @func_12883(%var_12884) /* ty=(Tensor[(8, 4, 16), float64], Tensor[(15, 6, 10), bool], int64, Tensor[(900), int64]) */
}

def @func_12791() -> Tensor[(3, 14, 10), float32] {
  %37 = @func_9630() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %37.0
}

def @func_14654(%var_14651: bool, %var_14652: Tensor[(1144), bool], %var_14653: Tensor[(648), int8]) -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64], Tensor[(2, 8, 15), float64], Tensor[(240), float64], Tensor[(1, 13, 9), float64], Tensor[(1, 13, 9), float64], Tensor[(11, 13, 8), bool], bool, Tensor[(1144), bool], Tensor[(3, 14, 10), float64], Tensor[(980), int32], Tensor[(648), int8], Tensor[(3, 14, 10), float32]) {
  @func_14649(%var_14651, %var_14652, %var_14653) /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64], Tensor[(2, 8, 15), float64], Tensor[(240), float64], Tensor[(1, 13, 9), float64], Tensor[(1, 13, 9), float64], Tensor[(11, 13, 8), bool], bool, Tensor[(1144), bool], Tensor[(3, 14, 10), float64], Tensor[(980), int32], Tensor[(648), int8], Tensor[(3, 14, 10), float32]) */
}

def @func_8725(%var_8721: Tensor[(13, 6, 8), float32]) -> (Tensor[(13, 6, 8), float32],) {
  %38 = cast(%var_8721, dtype="float32") /* ty=Tensor[(13, 6, 8), float32] */;
  %39 = cosh(%38) /* ty=Tensor[(13, 6, 8), float32] */;
  (%39,)
}

def @func_8919() -> (Tensor[(8, 4, 16), float64],) {
  @func_8917() /* ty=(Tensor[(8, 4, 16), float64],) */
}

def @func_7240() -> (Tensor[(8, 4, 16), float64], Tensor[(1, 13, 9), float64], Tensor[(11, 4, 7), float64], Tensor[(980), int32], Tensor[(1, 13, 9), float64]) {
  %49 = fn () -> (Tensor[(8, 4, 16), float64], Tensor[(1, 13, 9), float64], Tensor[(11, 4, 7), float64], Tensor[(980), int32], Tensor[(1, 13, 9), float64]) {
    %40 = @func_3353() /* ty=(Tensor[(8, 4, 16), float64], Tensor[(8, 4, 16), float64], Tensor[(420), float64], Tensor[(3, 14, 10), float32]) */;
    %41 = @func_4291() /* ty=(Tensor[(1, 13, 9), float64],) */;
    %42 = @func_6333() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(980), int32], Tensor[(980), int32], Tensor[(648), int8]) */;
    %43 = @func_4153() /* ty=(Tensor[(1, 13, 9), float64],) */;
    %44 = %40.0;
    %45 = %41.0;
    %46 = @func_1803() /* ty=Tensor[(11, 4, 7), float64] */;
    %47 = %42.1;
    %48 = %43.0;
    (%44, %45, %46, %47, %48)
  };
  %49() /* ty=(Tensor[(8, 4, 16), float64], Tensor[(1, 13, 9), float64], Tensor[(11, 4, 7), float64], Tensor[(980), int32], Tensor[(1, 13, 9), float64]) */
}

def @func_14698() -> (Tensor[(8, 4, 16), float64],) {
  %50 = @func_10801() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64], Tensor[(60), float64], Tensor[(117), float64], Tensor[(3, 14, 10), float64], Tensor[(8, 4, 16), float64]) */;
  %51 = %50.5;
  (%51,)
}

def @func_11690() -> Tensor[(3, 14, 10), float32] {
  %52 = fn () -> Tensor[(3, 14, 10), float32] {
    @func_3426() /* ty=Tensor[(3, 14, 10), float32] */
  };
  %52() /* ty=Tensor[(3, 14, 10), float32] */
}

def @func_14794(%var_14788: Tensor[(1, 5, 13), float64]) -> Tensor[(1, 5, 13), float64] {
  %53 = cast(%var_14788, dtype="float64") /* ty=Tensor[(1, 5, 13), float64] */;
  acos(%53) /* ty=Tensor[(1, 5, 13), float64] */
}

def @func_15192() -> (Tensor[(3, 14, 10), bool], Tensor[(8, 4, 16), float64], Tensor[(117), float64], Tensor[(3, 14, 10), float32]) {
  %62 = fn () -> (Tensor[(3, 14, 10), bool], Tensor[(8, 4, 16), float64], Tensor[(117), float64], Tensor[(3, 14, 10), float32]) {
    %54 = @func_5619() /* ty=(Tensor[(3, 14, 10), bool], Tensor[(1, 13, 9), float64], Tensor[(1, 13, 9), float64]) */;
    %55 = @func_4441() /* ty=(Tensor[(8, 4, 16), float64], Tensor[(8, 4, 16), float64]) */;
    %56 = @func_12542() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(117), float64]) */;
    %57 = @func_938() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */;
    %58 = %54.0;
    %59 = %55.0;
    %60 = %56.1;
    %61 = %57.0;
    (%58, %59, %60, %61)
  };
  %62() /* ty=(Tensor[(3, 14, 10), bool], Tensor[(8, 4, 16), float64], Tensor[(117), float64], Tensor[(3, 14, 10), float32]) */
}

def @func_516(%var_513: Tensor[(9, 9, 16), int64], %var_514: Tensor[(9, 9, 16), int64], %var_515: float64) -> (Tensor[(9, 9, 16), int64], Tensor[(1, 13, 9), float64], float64) {
  @func_511(%var_513, %var_514, %var_515) /* ty=(Tensor[(9, 9, 16), int64], Tensor[(1, 13, 9), float64], float64) */
}

def @func_7760() -> (Tensor[(8, 4, 16), float64], Tensor[(10, 42), uint8]) {
  %63 = @func_4441() /* ty=(Tensor[(8, 4, 16), float64], Tensor[(8, 4, 16), float64]) */;
  %64 = cast(meta[relay.Constant][0] /* ty=Tensor[(10, 42), float64] */, dtype="float64") /* ty=Tensor[(10, 42), float64] */;
  %65 = reshape(%64, newshape=[3, 14, 10]) /* ty=Tensor[(3, 14, 10), float64] */;
  %66 = @func_2428(%65) /* ty=(Tensor[(3, 14, 10), uint8],) */;
  %67 = %66.0;
  %68 = cast(%67, dtype="uint8") /* ty=Tensor[(3, 14, 10), uint8] */;
  %69 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(10, 42), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %70 = cast(meta[relay.Constant][0] /* ty=Tensor[(10, 42), float64] */, dtype="uint8") /* ty=Tensor[(10, 42), uint8] */;
  %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %72 = %63.0;
  %73 = right_shift(%70, %71) /* ty=Tensor[(10, 42), uint8] */;
  (%72, %73)
}

def @func_2590(%var_2588: float64) -> (Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64], float64, Tensor[(3, 14, 10), float64]) {
  @func_2587(%var_2588) /* ty=(Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64], float64, Tensor[(3, 14, 10), float64]) */
}

def @func_6091(%var_6088: Tensor[(3, 15, 15), float32], %var_6089: Tensor[(1170), float64], %var_6090: float64) -> (Tensor[(3, 15, 15), float32], Tensor[(2, 10, 8), float32], Tensor[(160, 1), float32], Tensor[(3, 14, 10), float64], Tensor[(15, 13, 6), float64], Tensor[(1170), float64], Tensor[(1, 13, 9), float64], float64, Tensor[(3, 14, 10), float64]) {
  %89 = fn (%var_6038: Tensor[(3, 15, 15), float32], %var_6066: Tensor[(1170), float64], %var_6078: float64) -> (Tensor[(3, 15, 15), float32], Tensor[(2, 10, 8), float32], Tensor[(160, 1), float32], Tensor[(3, 14, 10), float64], Tensor[(15, 13, 6), float64], Tensor[(1170), float64], Tensor[(1, 13, 9), float64], float64, Tensor[(3, 14, 10), float64]) {
    %74 = cast(%var_6038, dtype="float32") /* ty=Tensor[(3, 15, 15), float32] */;
    %75 = cast(meta[relay.Constant][1] /* ty=Tensor[(160, 1), float32] */, dtype="float32") /* ty=Tensor[(160, 1), float32] */;
    %76 = reshape(%75, newshape=[2, 10, 8]) /* ty=Tensor[(2, 10, 8), float32] */;
    %77 = @func_4912(%76) /* ty=(Tensor[(2, 10, 8), float32], Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64]) */;
    %78 = @func_2152() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64], Tensor[(8, 4, 16), float64], Tensor[(512), float64]) */;
    %79 = cast(%var_6066, dtype="float64") /* ty=Tensor[(1170), float64] */;
    %80 = reshape(%79, newshape=[15, 13, 6]) /* ty=Tensor[(15, 13, 6), float64] */;
    %81 = cast(%var_6078, dtype="float64") /* ty=float64 */;
    %82 = reshape(%81, newshape=[]) /* ty=float64 */;
    %83 = asinh(%74) /* ty=Tensor[(3, 15, 15), float32] */;
    %84 = %77.0;
    %85 = %78.1;
    %86 = @func_3692(%80) /* ty=Tensor[(15, 13, 6), float64] */;
    %87 = @func_438(%82) /* ty=Tensor[(1, 13, 9), float64] */;
    %88 = @func_813() /* ty=Tensor[(3, 14, 10), float64] */;
    (%83, %84, meta[relay.Constant][1] /* ty=Tensor[(160, 1), float32] */, %85, %86, %var_6066, %87, %var_6078, %88)
  };
  %89(%var_6088, %var_6089, %var_6090) /* ty=(Tensor[(3, 15, 15), float32], Tensor[(2, 10, 8), float32], Tensor[(160, 1), float32], Tensor[(3, 14, 10), float64], Tensor[(15, 13, 6), float64], Tensor[(1170), float64], Tensor[(1, 13, 9), float64], float64, Tensor[(3, 14, 10), float64]) */
}

def @func_6579(%var_6572: Tensor[(1, 15, 3), float64]) -> (Tensor[(1, 15, 3), float64],) {
  %90 = cast(%var_6572, dtype="float64") /* ty=Tensor[(1, 15, 3), float64] */;
  %91 = log2(%90) /* ty=Tensor[(1, 15, 3), float64] */;
  (%91,)
}

def @func_11450() -> (Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64]) {
  %92 = @func_7401() /* ty=Tensor[(8, 4, 16), float64] */;
  %93 = @func_9049() /* ty=Tensor[(3, 14, 10), float64] */;
  %94 = @func_1778() /* ty=Tensor[(3, 14, 10), float64] */;
  (%92, %93, %94)
}

def @func_6293() -> Tensor[(3, 14, 10), float32] {
  %95 = @func_1168() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %95.0
}

def @func_866() -> (Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64]) {
  %96 = @func_842() /* ty=(Tensor[(3, 14, 10), float64],) */;
  %97 = %96.0;
  %98 = @func_826() /* ty=Tensor[(3, 14, 10), float64] */;
  (%97, %98)
}

def @func_6333() -> (Tensor[(3, 14, 10), float64], Tensor[(980), int32], Tensor[(980), int32], Tensor[(648), int8]) {
  %99 = cast(meta[relay.Constant][2] /* ty=Tensor[(980), int32] */, dtype="int32") /* ty=Tensor[(980), int32] */;
  %100 = cast(meta[relay.Constant][3] /* ty=Tensor[(648), int8] */, dtype="int8") /* ty=Tensor[(648), int8] */;
  %101 = reshape(%99, newshape=[980]) /* ty=Tensor[(980), int32] */;
  %102 = reshape(%100, newshape=[648]) /* ty=Tensor[(648), int8] */;
  %103 = @func_5931(%101, %102) /* ty=(Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), float64], Tensor[(980), int32], Tensor[(648), int8], Tensor[(3, 14, 10), float32]) */;
  %104 = @func_813() /* ty=Tensor[(3, 14, 10), float64] */;
  %105 = %103.2;
  (%104, %105, meta[relay.Constant][2] /* ty=Tensor[(980), int32] */, meta[relay.Constant][3] /* ty=Tensor[(648), int8] */)
}

def @func_2659(%var_2657: Tensor[(1296), int64], %var_2658: Tensor[(1296), int64]) -> (Tensor[(8, 4, 16), float64], Tensor[(1296), int64], Tensor[(8, 4, 16), float64], Tensor[(1296), int8]) {
  @func_2655(%var_2657, %var_2658) /* ty=(Tensor[(8, 4, 16), float64], Tensor[(1296), int64], Tensor[(8, 4, 16), float64], Tensor[(1296), int8]) */
}

def @func_11873(%var_11853: Tensor[(980), int32]) -> (Tensor[(1, 13, 9), float64], Tensor[(14, 14, 5), int32], Tensor[(980), int32]) {
  %106 = @func_5889() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64]) */;
  %107 = cast(%var_11853, dtype="int32") /* ty=Tensor[(980), int32] */;
  %108 = cast(%var_11853, dtype="int32") /* ty=Tensor[(980), int32] */;
  %109 = reshape(%107, newshape=[14, 14, 5]) /* ty=Tensor[(14, 14, 5), int32] */;
  %110 = reshape(%108, newshape=[14, 14, 5]) /* ty=Tensor[(14, 14, 5), int32] */;
  %111 = @func_681(%109, %110) /* ty=(Tensor[(14, 14, 5), int32],) */;
  %112 = %106.1;
  %113 = %111.0;
  (%112, %113, %var_11853)
}

def @func_13261() -> (Tensor[(1, 13, 9), float64],) {
  %115 = fn () -> (Tensor[(1, 13, 9), float64],) {
    %114 = @func_11624() /* ty=Tensor[(1, 13, 9), float64] */;
    (%114,)
  };
  %115() /* ty=(Tensor[(1, 13, 9), float64],) */
}

def @func_7608() -> (Tensor[(1, 13, 9), float32],) {
  @func_7606() /* ty=(Tensor[(1, 13, 9), float32],) */
}

def @func_12727() -> (Tensor[(1, 13, 9), float64], Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float32], Tensor[(8, 4, 16), float64]) {
  %116 = @func_4676() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], Tensor[(1, 13, 9), float64]) */;
  %117 = @func_11737() /* ty=(Tensor[(1, 13, 9), float64], Tensor[(8, 4, 16), float64]) */;
  %118 = @func_4507() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %119 = @func_7415() /* ty=(Tensor[(8, 4, 16), float64],) */;
  %120 = %116.2;
  %121 = %117.0;
  %122 = %118.0;
  %123 = @func_12090() /* ty=Tensor[(1, 13, 9), float32] */;
  %124 = %119.0;
  (%120, %121, %122, %123, %124)
}

def @func_3646() -> Tensor[(8, 4, 16), float64] {
  %126 = fn () -> Tensor[(8, 4, 16), float64] {
    %125 = @func_2414() /* ty=(Tensor[(9, 13, 9), bool], Tensor[(8, 4, 16), float64]) */;
    %125.1
  };
  %126() /* ty=Tensor[(8, 4, 16), float64] */
}

def @func_3355() -> (Tensor[(8, 4, 16), float64], Tensor[(8, 4, 16), float64], Tensor[(420), float64], Tensor[(3, 14, 10), float32]) {
  @func_3353() /* ty=(Tensor[(8, 4, 16), float64], Tensor[(8, 4, 16), float64], Tensor[(420), float64], Tensor[(3, 14, 10), float32]) */
}

def @func_6582(%var_6580: Tensor[(1, 15, 3), float64]) -> (Tensor[(1, 15, 3), float64],) {
  @func_6579(%var_6580) /* ty=(Tensor[(1, 15, 3), float64],) */
}

def @func_8461() -> (Tensor[(8, 4, 16), float32],) {
  %129 = fn () -> (Tensor[(8, 4, 16), float32],) {
    %127 = @func_2698() /* ty=(Tensor[(8, 4, 16), float32],) */;
    %128 = %127.0;
    (%128,)
  };
  %129() /* ty=(Tensor[(8, 4, 16), float32],) */
}

def @func_3041() -> (Tensor[(8, 4, 16), float64],) {
  %132 = fn () -> (Tensor[(8, 4, 16), float64],) {
    %130 = @func_2352() /* ty=(Tensor[(8, 4, 16), float64],) */;
    %131 = %130.0;
    (%131,)
  };
  %132() /* ty=(Tensor[(8, 4, 16), float64],) */
}

def @func_6386(%var_6359: Tensor[(3, 14, 10), float32], %var_6376: Tensor[(240), bool]) -> (Tensor[(3, 14, 10), uint32], Tensor[(8, 4, 16), float64], Tensor[(8, 2, 15), bool], Tensor[(240), bool], Tensor[(8, 2, 15), bool]) {
  %133 = @func_4507() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %134 = %133.0;
  %135 = cast(%var_6359, dtype="uint32") /* ty=Tensor[(3, 14, 10), uint32] */;
  %136 = shape_of(%134, dtype="int32") /* ty=Tensor[(3), int32] */;
  %137 = cast(%134, dtype="uint32") /* ty=Tensor[(3, 14, 10), uint32] */;
  %138 = dyn.reshape(%135, %136, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %139 = @func_3040() /* ty=(Tensor[(8, 4, 16), float64],) */;
  %140 = cast(%var_6376, dtype="bool") /* ty=Tensor[(240), bool] */;
  %141 = cast(%var_6376, dtype="bool") /* ty=Tensor[(240), bool] */;
  %142 = reshape(%140, newshape=[8, 2, 15]) /* ty=Tensor[(8, 2, 15), bool] */;
  %143 = reshape(%141, newshape=[8, 2, 15]) /* ty=Tensor[(8, 2, 15), bool] */;
  %144 = @func_3946(%142, %143) /* ty=Tensor[(8, 2, 15), bool] */;
  %145 = cast(%144, dtype="bool") /* ty=Tensor[(8, 2, 15), bool] */;
  %146 = cast(%144, dtype="bool") /* ty=Tensor[(8, 2, 15), bool] */;
  %147 = reshape(%145, newshape=[8, 2, 15]) /* ty=Tensor[(8, 2, 15), bool] */;
  %148 = reshape(%146, newshape=[8, 2, 15]) /* ty=Tensor[(8, 2, 15), bool] */;
  %149 = right_shift(%137, %138) /* ty=Tensor[(3, 14, 10), uint32] */;
  %150 = %139.0;
  %151 = @func_3946(%147, %148) /* ty=Tensor[(8, 2, 15), bool] */;
  (%149, %150, %144, %var_6376, %151)
}

def @func_5712() -> (Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float64]) {
  @func_5710() /* ty=(Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float64]) */
}

def @func_7552() -> Tensor[(3, 14, 10), float64] {
  %152 = fn () -> Tensor[(3, 14, 10), float64] {
    @func_5345() /* ty=Tensor[(3, 14, 10), float64] */
  };
  %152() /* ty=Tensor[(3, 14, 10), float64] */
}

def @func_6269() -> (Tensor[(3, 14, 10), float32], Tensor[(8, 4, 16), float64], Tensor[(8, 4, 16), float32]) {
  %153 = @func_6158() /* ty=(Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), float32]) */;
  %154 = @func_4441() /* ty=(Tensor[(8, 4, 16), float64], Tensor[(8, 4, 16), float64]) */;
  %155 = @func_2698() /* ty=(Tensor[(8, 4, 16), float32],) */;
  %156 = %153.1;
  %157 = %154.1;
  %158 = %155.0;
  (%156, %157, %158)
}

def @func_13862() -> (Tensor[(3, 14, 10), float32],) {
  %161 = fn () -> (Tensor[(3, 14, 10), float32],) {
    %159 = @func_4507() /* ty=(Tensor[(3, 14, 10), float32],) */;
    %160 = %159.0;
    (%160,)
  };
  %161() /* ty=(Tensor[(3, 14, 10), float32],) */
}

def @func_5489(%var_5487: Tensor[(16, 13, 9), float64]) -> (Tensor[(3, 14, 10), float64], Tensor[(11, 4, 7), float64], Tensor[(16, 13, 9), bool]) {
  @func_5486(%var_5487) /* ty=(Tensor[(3, 14, 10), float64], Tensor[(11, 4, 7), float64], Tensor[(16, 13, 9), bool]) */
}

def @func_8928() -> Tensor[(3, 14, 10), float64] {
  @func_8926() /* ty=Tensor[(3, 14, 10), float64] */
}

def @func_10803() -> (Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64], Tensor[(60), float64], Tensor[(117), float64], Tensor[(3, 14, 10), float64], Tensor[(8, 4, 16), float64]) {
  @func_10801() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64], Tensor[(60), float64], Tensor[(117), float64], Tensor[(3, 14, 10), float64], Tensor[(8, 4, 16), float64]) */
}

def @func_4145() -> (Tensor[(512), float64], Tensor[(1, 13, 9), float32]) {
  %162 = @func_2390() /* ty=(Tensor[(512), float64], Tensor[(3, 14, 10), float32]) */;
  %163 = cast(7.99367f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %164 = reshape(%163, newshape=[]) /* ty=float64 */;
  %165 = @func_438(%164) /* ty=Tensor[(1, 13, 9), float64] */;
  %166 = cast(%165, dtype="float32") /* ty=Tensor[(1, 13, 9), float32] */;
  %167 = cast(7.99367f64 /* ty=float64 */, dtype="float32") /* ty=float32 */;
  %168 = %162.0;
  %169 = floor_divide(%166, %167) /* ty=Tensor[(1, 13, 9), float32] */;
  (%168, %169)
}

def @func_2414() -> (Tensor[(9, 13, 9), bool], Tensor[(8, 4, 16), float64]) {
  %170 = @func_1379() /* ty=Tensor[(1, 13, 9), float64] */;
  %171 = cast(%170, dtype="bool") /* ty=Tensor[(1, 13, 9), bool] */;
  %172 = cast(meta[relay.Constant][4] /* ty=Tensor[(9, 13, 9), float64] */, dtype="bool") /* ty=Tensor[(9, 13, 9), bool] */;
  %173 = @func_2352() /* ty=(Tensor[(8, 4, 16), float64],) */;
  %174 = logical_and(%171, %172) /* ty=Tensor[(9, 13, 9), bool] */;
  %175 = %173.0;
  (%174, %175)
}

def @func_13065() -> Tensor[(1, 13, 9), float32] {
  @func_13063() /* ty=Tensor[(1, 13, 9), float32] */
}

def @func_8560() -> Tensor[(3, 14, 10), float32] {
  %176 = @func_4507() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %176.0
}

def @func_2928() -> (Tensor[(1296), int64], Tensor[(2, 256), int32], Tensor[(4, 6, 11), float64], Tensor[(44), int16], Tensor[(132, 2), int16]) {
  %177 = @func_1354() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], float64, Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], Tensor[(1296), int64]) */;
  %178 = cast(meta[relay.Constant][5] /* ty=Tensor[(2, 256), float64] */, dtype="float64") /* ty=Tensor[(2, 256), float64] */;
  %179 = reshape(%178, newshape=[8, 4, 16]) /* ty=Tensor[(8, 4, 16), float64] */;
  %180 = @func_387(%179) /* ty=(Tensor[(8, 4, 16), float64],) */;
  %181 = %180.0;
  %182 = cast(%181, dtype="int32") /* ty=Tensor[(8, 4, 16), int32] */;
  %183 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(2, 256), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %184 = cast(meta[relay.Constant][5] /* ty=Tensor[(2, 256), float64] */, dtype="int32") /* ty=Tensor[(2, 256), int32] */;
  %185 = dyn.reshape(%182, %183, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %186 = cast(meta[relay.Constant][6] /* ty=Tensor[(44), int16] */, dtype="int16") /* ty=Tensor[(44), int16] */;
  %187 = cast(meta[relay.Constant][7] /* ty=Tensor[(132, 2), int16] */, dtype="int16") /* ty=Tensor[(132, 2), int16] */;
  %188 = reshape(%186, newshape=[44]) /* ty=Tensor[(44), int16] */;
  %189 = reshape(%187, newshape=[264]) /* ty=Tensor[(264), int16] */;
  %190 = @func_2536(%188, %189) /* ty=(Tensor[(1, 13, 9), float64], Tensor[(44), int16], Tensor[(264), int16], Tensor[(4, 6, 11), float64], Tensor[(3, 14, 10), float64]) */;
  %191 = %177.5;
  %192 = left_shift(%184, %185) /* ty=Tensor[(2, 256), int32] */;
  %193 = %190.3;
  (%191, %192, %193, meta[relay.Constant][6] /* ty=Tensor[(44), int16] */, meta[relay.Constant][7] /* ty=Tensor[(132, 2), int16] */)
}

def @func_8478() -> (Tensor[(3, 14, 10), float64],) {
  %196 = fn () -> (Tensor[(3, 14, 10), float64],) {
    %194 = @func_1119() /* ty=(Tensor[(3, 14, 10), float64],) */;
    %195 = %194.0;
    (%195,)
  };
  %196() /* ty=(Tensor[(3, 14, 10), float64],) */
}

def @func_15386() -> (Tensor[(8, 4, 16), float64], Tensor[(1, 13, 9), float32], Tensor[(234), float32], Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64], Tensor[(1, 13, 9), float64]) {
  %208 = fn () -> (Tensor[(8, 4, 16), float64], Tensor[(1, 13, 9), float32], Tensor[(234), float32], Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64], Tensor[(1, 13, 9), float64]) {
    %197 = @func_4441() /* ty=(Tensor[(8, 4, 16), float64], Tensor[(8, 4, 16), float64]) */;
    %198 = cast(meta[relay.Constant][8] /* ty=Tensor[(234), float32] */, dtype="float32") /* ty=Tensor[(234), float32] */;
    %199 = reshape(%198, newshape=[2, 13, 9]) /* ty=Tensor[(2, 13, 9), float32] */;
    %200 = @func_13735(%199) /* ty=(Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64], Tensor[(12, 9, 6), float32], Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float32], Tensor[(2, 13, 9), bool]) */;
    %201 = @func_2442() /* ty=(Tensor[(1, 13, 9), float64],) */;
    %202 = @func_7239() /* ty=(Tensor[(8, 4, 16), float64], Tensor[(1, 13, 9), float64], Tensor[(11, 4, 7), float64], Tensor[(980), int32], Tensor[(1, 13, 9), float64]) */;
    %203 = %197.1;
    %204 = %200.4;
    %205 = @func_6535() /* ty=Tensor[(3, 14, 10), float32] */;
    %206 = %201.0;
    %207 = %202.4;
    (%203, %204, meta[relay.Constant][8] /* ty=Tensor[(234), float32] */, %205, %206, %207)
  };
  %208() /* ty=(Tensor[(8, 4, 16), float64], Tensor[(1, 13, 9), float32], Tensor[(234), float32], Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64], Tensor[(1, 13, 9), float64]) */
}

def @func_9212() -> (Tensor[(1, 13, 9), float32], Tensor[(3, 14, 10), float64]) {
  %209 = @func_4145() /* ty=(Tensor[(512), float64], Tensor[(1, 13, 9), float32]) */;
  %210 = @func_6681() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */;
  %211 = %209.1;
  %212 = %210.0;
  (%211, %212)
}

def @func_8917() -> (Tensor[(8, 4, 16), float64],) {
  %213 = @func_8005() /* ty=(Tensor[(8, 4, 16), float64],) */;
  %214 = %213.0;
  (%214,)
}

def @func_15437() -> Tensor[(3, 14, 10), float32] {
  %216 = fn () -> Tensor[(3, 14, 10), float32] {
    %215 = @func_13963() /* ty=(Tensor[(3, 14, 10), float32],) */;
    %215.0
  };
  %216() /* ty=Tensor[(3, 14, 10), float32] */
}

def @func_7475(%var_7434: Tensor[(4, 3, 5), float64], %var_7447: Tensor[(1, 13, 9), float64]) -> (Tensor[(4, 3, 5), float64], Tensor[(1, 13, 9), float64], Tensor[(?, 13, 9), bool], Tensor[(3, 14, 10), uint32], Tensor[(420), float32], Tensor[(8, 30), bool], Tensor[(1, 13, 9), float64]) {
  %217 = cast(%var_7434, dtype="float64") /* ty=Tensor[(4, 3, 5), float64] */;
  %218 = @func_4153() /* ty=(Tensor[(1, 13, 9), float64],) */;
  %219 = @func_7334() /* ty=(Tensor[(1, 13, 9), float64],) */;
  %220 = %219.0;
  %221 = cast(%var_7447, dtype="bool") /* ty=Tensor[(1, 13, 9), bool] */;
  %222 = shape_of(%220, dtype="int32") /* ty=Tensor[(3), int32] */;
  %223 = cast(%220, dtype="bool") /* ty=Tensor[(1, 13, 9), bool] */;
  %224 = dyn.reshape(%221, %222, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %225 = cast(meta[relay.Constant][9] /* ty=Tensor[(420), float32] */, dtype="float32") /* ty=Tensor[(420), float32] */;
  %226 = cast(meta[relay.Constant][10] /* ty=Tensor[(8, 30), bool] */, dtype="bool") /* ty=Tensor[(8, 30), bool] */;
  %227 = reshape(%225, newshape=[3, 14, 10]) /* ty=Tensor[(3, 14, 10), float32] */;
  %228 = reshape(%226, newshape=[240]) /* ty=Tensor[(240), bool] */;
  %229 = @func_6386(%227, %228) /* ty=(Tensor[(3, 14, 10), uint32], Tensor[(8, 4, 16), float64], Tensor[(8, 2, 15), bool], Tensor[(240), bool], Tensor[(8, 2, 15), bool]) */;
  %230 = @func_4676() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], Tensor[(1, 13, 9), float64]) */;
  %231 = exp(%217) /* ty=Tensor[(4, 3, 5), float64] */;
  %232 = %218.0;
  %233 = logical_and(%223, %224) /* ty=Tensor[(?, 13, 9), bool] */;
  %234 = %229.0;
  %235 = %230.2;
  (%231, %232, %233, %234, meta[relay.Constant][9] /* ty=Tensor[(420), float32] */, meta[relay.Constant][10] /* ty=Tensor[(8, 30), bool] */, %235)
}

def @func_1261() -> Tensor[(3, 14, 10), float32] {
  %238 = fn () -> Tensor[(3, 14, 10), float32] {
    %236 = @func_813() /* ty=Tensor[(3, 14, 10), float64] */;
    %237 = cast(%236, dtype="float32") /* ty=Tensor[(3, 14, 10), float32] */;
    atanh(%237) /* ty=Tensor[(3, 14, 10), float32] */
  };
  %238() /* ty=Tensor[(3, 14, 10), float32] */
}

def @func_814() -> Tensor[(3, 14, 10), float64] {
  %240 = fn () -> Tensor[(3, 14, 10), float64] {
    %239 = cast(meta[relay.Constant][11] /* ty=Tensor[(3, 14, 10), float64] */, dtype="float64") /* ty=Tensor[(3, 14, 10), float64] */;
    rsqrt(%239) /* ty=Tensor[(3, 14, 10), float64] */
  };
  %240() /* ty=Tensor[(3, 14, 10), float64] */
}

def @func_6497() -> (Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64], Tensor[(512), float64], Tensor[(8, 4, 16), float64]) {
  @func_6495() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64], Tensor[(512), float64], Tensor[(8, 4, 16), float64]) */
}

def @func_5252() -> (Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64]) {
  %244 = fn () -> (Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64]) {
    %241 = @func_1917() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) */;
    %242 = %241.1;
    %243 = @func_826() /* ty=Tensor[(3, 14, 10), float64] */;
    (%242, %243)
  };
  %244() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64]) */
}

def @func_8728(%var_8726: Tensor[(13, 6, 8), float32]) -> (Tensor[(13, 6, 8), float32],) {
  @func_8725(%var_8726) /* ty=(Tensor[(13, 6, 8), float32],) */
}

def @func_2153() -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64], Tensor[(8, 4, 16), float64], Tensor[(512), float64]) {
  %252 = fn () -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64], Tensor[(8, 4, 16), float64], Tensor[(512), float64]) {
    %245 = @func_1463() /* ty=(Tensor[(3, 14, 10), float32],) */;
    %246 = cast(meta[relay.Constant][12] /* ty=Tensor[(512), float64] */, dtype="float64") /* ty=Tensor[(512), float64] */;
    %247 = reshape(%246, newshape=[8, 4, 16]) /* ty=Tensor[(8, 4, 16), float64] */;
    %248 = @func_387(%247) /* ty=(Tensor[(8, 4, 16), float64],) */;
    %249 = %245.0;
    %250 = @func_813() /* ty=Tensor[(3, 14, 10), float64] */;
    %251 = %248.0;
    (%249, %250, %251, meta[relay.Constant][12] /* ty=Tensor[(512), float64] */)
  };
  %252() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64], Tensor[(8, 4, 16), float64], Tensor[(512), float64]) */
}

def @func_6747() -> (Tensor[(8, 4, 16), float64], float64) {
  %253 = @func_3305() /* ty=Tensor[(8, 4, 16), float32] */;
  %254 = cast(%253, dtype="float64") /* ty=Tensor[(8, 4, 16), float64] */;
  %255 = @func_3838() /* ty=(float64, Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) */;
  %256 = sin(%254) /* ty=Tensor[(8, 4, 16), float64] */;
  %257 = %255.0;
  (%256, %257)
}

def @func_13392() -> (Tensor[(3, 14, 10), float32], Tensor[(1296), int64]) {
  @func_13390() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(1296), int64]) */
}

def @func_1803() -> Tensor[(11, 4, 7), float64] {
  %258 = cast(meta[relay.Constant][13] /* ty=Tensor[(11, 4, 7), float64] */, dtype="float64") /* ty=Tensor[(11, 4, 7), float64] */;
  atanh(%258) /* ty=Tensor[(11, 4, 7), float64] */
}

def @func_7403() -> Tensor[(8, 4, 16), float64] {
  @func_7401() /* ty=Tensor[(8, 4, 16), float64] */
}

def @func_10332() -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) {
  %259 = @func_1917() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) */;
  %260 = @func_7598() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */;
  %261 = @func_2953() /* ty=Tensor[(3, 14, 10), float32] */;
  %262 = %259.0;
  %263 = %260.1;
  (%261, %262, %263)
}

def @func_1779() -> Tensor[(3, 14, 10), float64] {
  %264 = fn () -> Tensor[(3, 14, 10), float64] {
    @func_813() /* ty=Tensor[(3, 14, 10), float64] */
  };
  %264() /* ty=Tensor[(3, 14, 10), float64] */
}

def @func_6158() -> (Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), float32]) {
  %265 = @func_5772() /* ty=(Tensor[(8, 4, 16), float64],) */;
  %266 = @func_4567() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(8, 4, 16), float64]) */;
  %267 = %265.0;
  %268 = %266.0;
  (%267, %268)
}

def @func_4207() -> (Tensor[(?, 13, 9), int8], Tensor[(3, 14, 10), float32]) {
  %279 = fn () -> (Tensor[(?, 13, 9), int8], Tensor[(3, 14, 10), float32]) {
    %269 = @func_1623() /* ty=(Tensor[(1, 13, 9), float64],) */;
    %270 = %269.0;
    %271 = @func_3649() /* ty=Tensor[(1, 13, 9), float64] */;
    %272 = cast(%271, dtype="int8") /* ty=Tensor[(1, 13, 9), int8] */;
    %273 = shape_of(%270, dtype="int32") /* ty=Tensor[(3), int32] */;
    %274 = cast(%270, dtype="int8") /* ty=Tensor[(1, 13, 9), int8] */;
    %275 = dyn.reshape(%272, %273, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %276 = @func_1463() /* ty=(Tensor[(3, 14, 10), float32],) */;
    %277 = add(%274, %275) /* ty=Tensor[(?, 13, 9), int8] */;
    %278 = %276.0;
    (%277, %278)
  };
  %279() /* ty=(Tensor[(?, 13, 9), int8], Tensor[(3, 14, 10), float32]) */
}

def @func_13737(%var_13736: Tensor[(2, 13, 9), float32]) -> (Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64], Tensor[(12, 9, 6), float32], Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float32], Tensor[(2, 13, 9), bool]) {
  %295 = fn (%var_13729: Tensor[(2, 13, 9), float32]) -> (Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64], Tensor[(12, 9, 6), float32], Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float32], Tensor[(2, 13, 9), bool]) {
    %280 = @func_11393() /* ty=(Tensor[(3, 14, 10), float32],) */;
    %281 = @func_4676() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], Tensor[(1, 13, 9), float64]) */;
    %282 = @func_1008() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */;
    %283 = @func_8084() /* ty=(Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float32]) */;
    %284 = @func_5356() /* ty=Tensor[(1, 13, 9), float64] */;
    %285 = cast(%284, dtype="float32") /* ty=Tensor[(1, 13, 9), float32] */;
    %286 = rsqrt(%285) /* ty=Tensor[(1, 13, 9), float32] */;
    %287 = cast(%286, dtype="bool") /* ty=Tensor[(1, 13, 9), bool] */;
    %288 = cast(%var_13729, dtype="bool") /* ty=Tensor[(2, 13, 9), bool] */;
    %289 = %280.0;
    %290 = %281.2;
    %291 = @func_3618() /* ty=Tensor[(12, 9, 6), float32] */;
    %292 = %282.1;
    %293 = %283.2;
    %294 = less(%287, %288) /* ty=Tensor[(2, 13, 9), bool] */;
    (%289, %290, %291, %292, %293, %294)
  };
  %295(%var_13736) /* ty=(Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64], Tensor[(12, 9, 6), float32], Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float32], Tensor[(2, 13, 9), bool]) */
}

def @func_2354() -> (Tensor[(8, 4, 16), float64],) {
  @func_2352() /* ty=(Tensor[(8, 4, 16), float64],) */
}

def @func_8877() -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64], Tensor[(1296), int64]) {
  %303 = fn () -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64], Tensor[(1296), int64]) {
    %296 = @func_6681() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */;
    %297 = @func_7026() /* ty=(Tensor[(3, 14, 10), float32],) */;
    %298 = %297.0;
    %299 = cast(%298, dtype="float64") /* ty=Tensor[(3, 14, 10), float64] */;
    %300 = %296.2;
    %301 = log(%299) /* ty=Tensor[(3, 14, 10), float64] */;
    %302 = @func_6559() /* ty=Tensor[(1296), int64] */;
    (%300, %301, %302)
  };
  %303() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64], Tensor[(1296), int64]) */
}

def @func_1850() -> (Tensor[(11, 4, 7), float32],) {
  %310 = fn () -> (Tensor[(11, 4, 7), float32],) {
    %304 = @func_1803() /* ty=Tensor[(11, 4, 7), float64] */;
    %305 = cast(meta[relay.Constant][14] /* ty=Tensor[(11, 4, 7), float64] */, dtype="float32") /* ty=Tensor[(11, 4, 7), float32] */;
    %306 = shape_of(%304, dtype="int32") /* ty=Tensor[(3), int32] */;
    %307 = cast(%304, dtype="float32") /* ty=Tensor[(11, 4, 7), float32] */;
    %308 = dyn.reshape(%305, %306, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %309 = mod(%307, %308) /* ty=Tensor[(11, 4, 7), float32] */;
    (%309,)
  };
  %310() /* ty=(Tensor[(11, 4, 7), float32],) */
}

def @func_9505() -> (Tensor[(3, 14, 10), float64],) {
  %311 = @func_813() /* ty=Tensor[(3, 14, 10), float64] */;
  (%311,)
}

def @func_2442() -> (Tensor[(1, 13, 9), float64],) {
  %312 = @func_1379() /* ty=Tensor[(1, 13, 9), float64] */;
  (%312,)
}

def @func_9507() -> (Tensor[(3, 14, 10), float64],) {
  @func_9505() /* ty=(Tensor[(3, 14, 10), float64],) */
}

def @func_9131(%var_9090: Tensor[(15, 16, 12), uint32], %var_9091: Tensor[(15, 16, 12), uint32], %var_9097: Tensor[(15, 16, 12), uint32]) -> (Tensor[(15, 16, 12), int16], Tensor[(15, 16, 12), uint16], Tensor[(3, 14, 10), float32]) {
  %313 = cast(%var_9091, dtype="uint32") /* ty=Tensor[(15, 16, 12), uint32] */;
  %314 = shape_of(%var_9090, dtype="int32") /* ty=Tensor[(3), int32] */;
  %315 = cast(%var_9090, dtype="uint32") /* ty=Tensor[(15, 16, 12), uint32] */;
  %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %317 = add(%315, %316) /* ty=Tensor[(15, 16, 12), uint32] */;
  %318 = cast(%var_9097, dtype="int16") /* ty=Tensor[(15, 16, 12), int16] */;
  %319 = shape_of(%317, dtype="int32") /* ty=Tensor[(3), int32] */;
  %320 = cast(%317, dtype="int16") /* ty=Tensor[(15, 16, 12), int16] */;
  %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %322 = cast(%var_9091, dtype="uint16") /* ty=Tensor[(15, 16, 12), uint16] */;
  %323 = shape_of(%317, dtype="int32") /* ty=Tensor[(3), int32] */;
  %324 = cast(%317, dtype="uint16") /* ty=Tensor[(15, 16, 12), uint16] */;
  %325 = dyn.reshape(%322, %323, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %326 = @func_1168() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %327 = bitwise_xor(%320, %321) /* ty=Tensor[(15, 16, 12), int16] */;
  %328 = left_shift(%324, %325) /* ty=Tensor[(15, 16, 12), uint16] */;
  %329 = %326.0;
  (%327, %328, %329)
}

def @func_11521() -> Tensor[(1170), float64] {
  %330 = @func_10931() /* ty=(Tensor[(3, 14, 10), bool], Tensor[(8, 4, 16), float64], float64, Tensor[(1170), float64]) */;
  %330.3
}

def @func_14922() -> Tensor[(9, 13, 9), bool] {
  @func_14920() /* ty=Tensor[(9, 13, 9), bool] */
}

def @func_1918() -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) {
  %337 = fn () -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) {
    %331 = @func_1422() /* ty=(Tensor[(3, 14, 10), float32],) */;
    %332 = @func_938() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */;
    %333 = %332.0;
    %334 = cast(%333, dtype="float64") /* ty=Tensor[(3, 14, 10), float64] */;
    %335 = %331.0;
    %336 = sqrt(%334) /* ty=Tensor[(3, 14, 10), float64] */;
    (%335, %336)
  };
  %337() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) */
}

def @func_1422() -> (Tensor[(3, 14, 10), float32],) {
  %338 = @func_938() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */;
  %339 = %338.1;
  (%339,)
}

def @func_12997(%var_12964: Tensor[(2, 14, 4), uint32], %var_12976: uint32) -> (Tensor[(15, 4, 8), bool], uint32, Tensor[(2, 14, 4), int16]) {
  %340 = cast(%var_12976, dtype="uint32") /* ty=uint32 */;
  %341 = reshape(%340, newshape=[]) /* ty=uint32 */;
  %342 = @func_8505(%341) /* ty=(Tensor[(15, 4, 8), bool], Tensor[(10, 42), uint8]) */;
  %343 = cast(%var_12964, dtype="float32") /* ty=Tensor[(2, 14, 4), float32] */;
  %344 = cosh(%343) /* ty=Tensor[(2, 14, 4), float32] */;
  %345 = cast(meta[relay.Constant][15] /* ty=Tensor[(2, 14, 4), uint32] */, dtype="bool") /* ty=Tensor[(2, 14, 4), bool] */;
  %346 = shape_of(%var_12964, dtype="int32") /* ty=Tensor[(3), int32] */;
  %347 = cast(%var_12964, dtype="bool") /* ty=Tensor[(2, 14, 4), bool] */;
  %348 = dyn.reshape(%345, %346, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %349 = equal(%347, %348) /* ty=Tensor[(2, 14, 4), bool] */;
  %350 = cast(%349, dtype="int16") /* ty=Tensor[(2, 14, 4), int16] */;
  %351 = shape_of(%344, dtype="int32") /* ty=Tensor[(3), int32] */;
  %352 = cast(%344, dtype="int16") /* ty=Tensor[(2, 14, 4), int16] */;
  %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %354 = %342.0;
  %355 = bitwise_or(%352, %353) /* ty=Tensor[(2, 14, 4), int16] */;
  (%354, %var_12976, %355)
}

def @func_8381() -> (Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64], Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), float64]) {
  %366 = fn () -> (Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64], Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), float64]) {
    %356 = @func_4441() /* ty=(Tensor[(8, 4, 16), float64], Tensor[(8, 4, 16), float64]) */;
    %357 = %356.0;
    %358 = cast(%357, dtype="float64") /* ty=Tensor[(8, 4, 16), float64] */;
    %359 = reshape(%358, newshape=[8, 4, 16]) /* ty=Tensor[(8, 4, 16), float64] */;
    %360 = @func_387(%359) /* ty=(Tensor[(8, 4, 16), float64],) */;
    %361 = @func_7716() /* ty=(Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float64]) */;
    %362 = @func_2965() /* ty=Tensor[(3, 14, 10), float32] */;
    %363 = @func_7551() /* ty=Tensor[(3, 14, 10), float64] */;
    %364 = %360.0;
    %365 = %361.1;
    (%357, %362, %363, %364, %365)
  };
  %366() /* ty=(Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64], Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), float64]) */
}

def @func_3651() -> Tensor[(1, 13, 9), float64] {
  @func_3649() /* ty=Tensor[(1, 13, 9), float64] */
}

def @func_8035() -> Tensor[(3, 14, 10), float64] {
  %367 = fn () -> Tensor[(3, 14, 10), float64] {
    @func_7551() /* ty=Tensor[(3, 14, 10), float64] */
  };
  %367() /* ty=Tensor[(3, 14, 10), float64] */
}

def @func_14861() -> (Tensor[(3, 14, 10), bool], Tensor[(3, 14, 10), float64]) {
  %372 = fn () -> (Tensor[(3, 14, 10), bool], Tensor[(3, 14, 10), float64]) {
    %368 = @func_7977() /* ty=(Tensor[(512), float64], Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), bool], Tensor[(420), float32], Tensor[(3, 14, 10), float32]) */;
    %369 = @func_13809() /* ty=(Tensor[(3, 14, 10), float64],) */;
    %370 = %368.2;
    %371 = %369.0;
    (%370, %371)
  };
  %372() /* ty=(Tensor[(3, 14, 10), bool], Tensor[(3, 14, 10), float64]) */
}

def @func_9214() -> (Tensor[(1, 13, 9), float32], Tensor[(3, 14, 10), float64]) {
  @func_9212() /* ty=(Tensor[(1, 13, 9), float32], Tensor[(3, 14, 10), float64]) */
}

def @func_15236() -> Tensor[(3, 14, 10), float64] {
  @func_15234() /* ty=Tensor[(3, 14, 10), float64] */
}

def @func_12597() -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) {
  %377 = fn () -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) {
    %373 = @func_1008() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */;
    %374 = @func_1917() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) */;
    %375 = %373.0;
    %376 = %374.0;
    (%375, %376)
  };
  %377() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */
}

def @func_9907() -> (Tensor[(3, 14, 10), float64],) {
  %378 = @func_7551() /* ty=Tensor[(3, 14, 10), float64] */;
  (%378,)
}

def @func_12036() -> (Tensor[(512), float64], Tensor[(3, 14, 10), float32]) {
  %379 = @func_2152() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64], Tensor[(8, 4, 16), float64], Tensor[(512), float64]) */;
  %380 = @func_8220() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %381 = %379.3;
  %382 = %380.0;
  (%381, %382)
}

def @func_1424() -> (Tensor[(3, 14, 10), float32],) {
  @func_1422() /* ty=(Tensor[(3, 14, 10), float32],) */
}

def @func_7260() -> (Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float64]) {
  %383 = @func_5889() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64]) */;
  %384 = %383.1;
  %385 = @func_1778() /* ty=Tensor[(3, 14, 10), float64] */;
  (%384, %385)
}

def @func_7688(%var_7687: Tensor[(1170), float64]) -> (Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float64], Tensor[(675), float32], Tensor[(1170), float64], float64, Tensor[(3, 14, 10), float32], Tensor[(8, 4, 16), float32], Tensor[(3, 14, 10), float64], Tensor[(8, 4, 16), float64]) {
  %403 = fn (%var_7629: Tensor[(1170), float64]) -> (Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float64], Tensor[(675), float32], Tensor[(1170), float64], float64, Tensor[(3, 14, 10), float32], Tensor[(8, 4, 16), float32], Tensor[(3, 14, 10), float64], Tensor[(8, 4, 16), float64]) {
    %386 = @func_1354() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], float64, Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], Tensor[(1296), int64]) */;
    %387 = cast(meta[relay.Constant][16] /* ty=Tensor[(675), float32] */, dtype="float32") /* ty=Tensor[(675), float32] */;
    %388 = cast(%var_7629, dtype="float64") /* ty=Tensor[(1170), float64] */;
    %389 = cast(0.735838f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %390 = reshape(%387, newshape=[3, 15, 15]) /* ty=Tensor[(3, 15, 15), float32] */;
    %391 = reshape(%388, newshape=[1170]) /* ty=Tensor[(1170), float64] */;
    %392 = reshape(%389, newshape=[]) /* ty=float64 */;
    %393 = @func_6087(%390, %391, %392) /* ty=(Tensor[(3, 15, 15), float32], Tensor[(2, 10, 8), float32], Tensor[(160, 1), float32], Tensor[(3, 14, 10), float64], Tensor[(15, 13, 6), float64], Tensor[(1170), float64], Tensor[(1, 13, 9), float64], float64, Tensor[(3, 14, 10), float64]) */;
    %394 = @func_6681() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */;
    %395 = @func_1978() /* ty=(Tensor[(3, 14, 10), float64],) */;
    %396 = @func_6158() /* ty=(Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), float32]) */;
    %397 = %386.4;
    %398 = %393.3;
    %399 = %394.2;
    %400 = @func_3923() /* ty=Tensor[(8, 4, 16), float32] */;
    %401 = %395.0;
    %402 = %396.0;
    (%397, %398, meta[relay.Constant][16] /* ty=Tensor[(675), float32] */, %var_7629, 0.735838f64 /* ty=float64 */, %399, %400, %401, %402)
  };
  %403(%var_7687) /* ty=(Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float64], Tensor[(675), float32], Tensor[(1170), float64], float64, Tensor[(3, 14, 10), float32], Tensor[(8, 4, 16), float32], Tensor[(3, 14, 10), float64], Tensor[(8, 4, 16), float64]) */
}

def @func_3718(%var_3703: Tensor[(4, 10, 10), float32]) -> (Tensor[(4, 10, 10), float32],) {
  %404 = cast(%var_3703, dtype="float32") /* ty=Tensor[(4, 10, 10), float32] */;
  %405 = rsqrt(%404) /* ty=Tensor[(4, 10, 10), float32] */;
  (%405,)
}

def @func_5934(%var_5932: Tensor[(980), int32], %var_5933: Tensor[(648), int8]) -> (Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), float64], Tensor[(980), int32], Tensor[(648), int8], Tensor[(3, 14, 10), float32]) {
  %416 = fn (%var_5907: Tensor[(980), int32], %var_5908: Tensor[(648), int8]) -> (Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), float64], Tensor[(980), int32], Tensor[(648), int8], Tensor[(3, 14, 10), float32]) {
    %406 = @func_2414() /* ty=(Tensor[(9, 13, 9), bool], Tensor[(8, 4, 16), float64]) */;
    %407 = cast(%var_5907, dtype="int32") /* ty=Tensor[(980), int32] */;
    %408 = cast(%var_5908, dtype="int8") /* ty=Tensor[(648), int8] */;
    %409 = reshape(%407, newshape=[980, 1]) /* ty=Tensor[(980, 1), int32] */;
    %410 = reshape(%408, newshape=[648]) /* ty=Tensor[(648), int8] */;
    %411 = @func_4858(%409, %410) /* ty=(Tensor[(3, 14, 10), float64], Tensor[(14, 14, 5), int32], Tensor[(16, ?, 14), uint16], Tensor[(980, 6), uint32], Tensor[(3, 14, 10), float32], Tensor[(1296), int64], Tensor[(9, 9, 8), int8], Tensor[(648), int8], Tensor[(16, ?, 14), uint16], Tensor[(3, 14, 10), float64], Tensor[(980, 224), float32]) */;
    %412 = @func_3266() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), bool]) */;
    %413 = %406.1;
    %414 = %411.0;
    %415 = %412.0;
    (%413, %414, %var_5907, %var_5908, %415)
  };
  %416(%var_5932, %var_5933) /* ty=(Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), float64], Tensor[(980), int32], Tensor[(648), int8], Tensor[(3, 14, 10), float32]) */
}

def @func_4292() -> (Tensor[(1, 13, 9), float64],) {
  %418 = fn () -> (Tensor[(1, 13, 9), float64],) {
    %417 = @func_3649() /* ty=Tensor[(1, 13, 9), float64] */;
    (%417,)
  };
  %418() /* ty=(Tensor[(1, 13, 9), float64],) */
}

def @func_8505(%var_8488: uint32) -> (Tensor[(15, 4, 8), bool], Tensor[(10, 42), uint8]) {
  %419 = cast(%var_8488, dtype="bool") /* ty=bool */;
  %420 = cast(meta[relay.Constant][17] /* ty=Tensor[(15, 4, 8), uint32] */, dtype="bool") /* ty=Tensor[(15, 4, 8), bool] */;
  %421 = @func_7760() /* ty=(Tensor[(8, 4, 16), float64], Tensor[(10, 42), uint8]) */;
  %422 = equal(%419, %420) /* ty=Tensor[(15, 4, 8), bool] */;
  %423 = %421.1;
  (%422, %423)
}

def @func_9173(%var_9160: Tensor[(60), float64], %var_9161: Tensor[(117), float64]) -> (Tensor[(9, 13, 9), bool], Tensor[(1, 13, 9), float64], Tensor[(60), float64], Tensor[(117), float64]) {
  %424 = @func_2414() /* ty=(Tensor[(9, 13, 9), bool], Tensor[(8, 4, 16), float64]) */;
  %425 = cast(%var_9160, dtype="float64") /* ty=Tensor[(60), float64] */;
  %426 = cast(%var_9161, dtype="float64") /* ty=Tensor[(117), float64] */;
  %427 = reshape(%425, newshape=[4, 3, 5]) /* ty=Tensor[(4, 3, 5), float64] */;
  %428 = reshape(%426, newshape=[1, 13, 9]) /* ty=Tensor[(1, 13, 9), float64] */;
  %429 = @func_7475(%427, %428) /* ty=(Tensor[(4, 3, 5), float64], Tensor[(1, 13, 9), float64], Tensor[(?, 13, 9), bool], Tensor[(3, 14, 10), uint32], Tensor[(420), float32], Tensor[(8, 30), bool], Tensor[(1, 13, 9), float64]) */;
  %430 = %424.0;
  %431 = %429.1;
  (%430, %431, %var_9160, %var_9161)
}

def @func_9136(%var_9133: Tensor[(15, 16, 12), uint32], %var_9134: Tensor[(15, 16, 12), uint32], %var_9135: Tensor[(15, 16, 12), uint32]) -> (Tensor[(15, 16, 12), int16], Tensor[(15, 16, 12), uint16], Tensor[(3, 14, 10), float32]) {
  @func_9131(%var_9133, %var_9134, %var_9135) /* ty=(Tensor[(15, 16, 12), int16], Tensor[(15, 16, 12), uint16], Tensor[(3, 14, 10), float32]) */
}

def @func_10364() -> (Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64]) {
  %436 = fn () -> (Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64]) {
    %432 = @func_1119() /* ty=(Tensor[(3, 14, 10), float64],) */;
    %433 = @func_4291() /* ty=(Tensor[(1, 13, 9), float64],) */;
    %434 = %432.0;
    %435 = %433.0;
    (%434, %435)
  };
  %436() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64]) */
}

def @func_7401() -> Tensor[(8, 4, 16), float64] {
  %437 = @func_2414() /* ty=(Tensor[(9, 13, 9), bool], Tensor[(8, 4, 16), float64]) */;
  %437.1
}

def @func_2314(%var_2313: Tensor[(512), float64]) -> (Tensor[(3, 14, 10), float32], Tensor[(8, 4, 16), float64], Tensor[(512), int8], Tensor[(1, 13, 9), float64], Tensor[(4, 6, 11), int16], Tensor[(44), int16], Tensor[(264), int16]) {
  %457 = fn (%var_2290: Tensor[(512), float64]) -> (Tensor[(3, 14, 10), float32], Tensor[(8, 4, 16), float64], Tensor[(512), int8], Tensor[(1, 13, 9), float64], Tensor[(4, 6, 11), int16], Tensor[(44), int16], Tensor[(264), int16]) {
    %438 = @func_1917() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) */;
    %439 = cast(meta[relay.Constant][18] /* ty=Tensor[(512), float64] */, dtype="float64") /* ty=Tensor[(512), float64] */;
    %440 = reshape(%439, newshape=[8, 4, 16]) /* ty=Tensor[(8, 4, 16), float64] */;
    %441 = @func_387(%440) /* ty=(Tensor[(8, 4, 16), float64],) */;
    %442 = cast(%var_2290, dtype="int8") /* ty=Tensor[(512), int8] */;
    %443 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(512), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %444 = cast(meta[relay.Constant][18] /* ty=Tensor[(512), float64] */, dtype="int8") /* ty=Tensor[(512), int8] */;
    %445 = dyn.reshape(%442, %443, newshape=[]) /* ty=Tensor[(?), int8] */;
    %446 = @func_1623() /* ty=(Tensor[(1, 13, 9), float64],) */;
    %447 = cast(meta[relay.Constant][19] /* ty=Tensor[(44), int16] */, dtype="int16") /* ty=Tensor[(44), int16] */;
    %448 = cast(meta[relay.Constant][20] /* ty=Tensor[(264), int16] */, dtype="int16") /* ty=Tensor[(264), int16] */;
    %449 = reshape(%447, newshape=[4, 1, 11]) /* ty=Tensor[(4, 1, 11), int16] */;
    %450 = reshape(%448, newshape=[4, 6, 11]) /* ty=Tensor[(4, 6, 11), int16] */;
    %451 = @func_1395(%449, %450) /* ty=(Tensor[(4, 6, 11), int16],) */;
    %452 = %438.0;
    %453 = %441.0;
    %454 = right_shift(%444, %445) /* ty=Tensor[(512), int8] */;
    %455 = %446.0;
    %456 = %451.0;
    (%452, %453, %454, %455, %456, meta[relay.Constant][19] /* ty=Tensor[(44), int16] */, meta[relay.Constant][20] /* ty=Tensor[(264), int16] */)
  };
  %457(%var_2313) /* ty=(Tensor[(3, 14, 10), float32], Tensor[(8, 4, 16), float64], Tensor[(512), int8], Tensor[(1, 13, 9), float64], Tensor[(4, 6, 11), int16], Tensor[(44), int16], Tensor[(264), int16]) */
}

def @func_1233() -> Tensor[(3, 14, 10), float32] {
  %459 = fn () -> Tensor[(3, 14, 10), float32] {
    %458 = @func_1008() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */;
    %458.0
  };
  %459() /* ty=Tensor[(3, 14, 10), float32] */
}

def @func_6682() -> (Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) {
  %467 = fn () -> (Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) {
    %460 = @func_938() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */;
    %461 = @func_4567() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(8, 4, 16), float64]) */;
    %462 = @func_813() /* ty=Tensor[(3, 14, 10), float64] */;
    %463 = @func_1778() /* ty=Tensor[(3, 14, 10), float64] */;
    %464 = %460.1;
    %465 = @func_2965() /* ty=Tensor[(3, 14, 10), float32] */;
    %466 = %461.0;
    (%462, %463, %464, %465, %466)
  };
  %467() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */
}

def @func_6019() -> (Tensor[(12, 9, 6), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) {
  %475 = fn () -> (Tensor[(12, 9, 6), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) {
    %468 = @func_1463() /* ty=(Tensor[(3, 14, 10), float32],) */;
    %469 = @func_3414() /* ty=(Tensor[(3, 14, 10), float32],) */;
    %470 = @func_938() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */;
    %471 = @func_3618() /* ty=Tensor[(12, 9, 6), float32] */;
    %472 = %468.0;
    %473 = %469.0;
    %474 = %470.0;
    (%471, %472, %473, %474)
  };
  %475() /* ty=(Tensor[(12, 9, 6), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */
}

def @func_9821(%var_9820: Tensor[(900), int64]) -> (Tensor[(1, 13, 9), float64], Tensor[(15, 6, 10), bool], int64, Tensor[(900), int64]) {
  %484 = fn (%var_9796: Tensor[(900), int64]) -> (Tensor[(1, 13, 9), float64], Tensor[(15, 6, 10), bool], int64, Tensor[(900), int64]) {
    %476 = @func_2442() /* ty=(Tensor[(1, 13, 9), float64],) */;
    %477 = cast(5 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %478 = cast(%var_9796, dtype="int64") /* ty=Tensor[(900), int64] */;
    %479 = reshape(%477, newshape=[]) /* ty=int64 */;
    %480 = reshape(%478, newshape=[15, 6, 10]) /* ty=Tensor[(15, 6, 10), int64] */;
    %481 = @func_5217(%479, %480) /* ty=(Tensor[(15, 6, 10), bool], Tensor[(3, 14, 10), float32]) */;
    %482 = %476.0;
    %483 = %481.0;
    (%482, %483, 5 /* ty=int64 */, %var_9796)
  };
  %484(%var_9820) /* ty=(Tensor[(1, 13, 9), float64], Tensor[(15, 6, 10), bool], int64, Tensor[(900), int64]) */
}

def @func_10192() -> Tensor[(3, 14, 10), bool] {
  %485 = @func_4507() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %486 = %485.0;
  %487 = @func_2261() /* ty=Tensor[(3, 14, 10), float64] */;
  %488 = cast(%487, dtype="bool") /* ty=Tensor[(3, 14, 10), bool] */;
  %489 = shape_of(%486, dtype="int32") /* ty=Tensor[(3), int32] */;
  %490 = cast(%486, dtype="bool") /* ty=Tensor[(3, 14, 10), bool] */;
  %491 = dyn.reshape(%488, %489, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%490, %491) /* ty=Tensor[(3, 14, 10), bool] */
}

def @func_14524() -> (Tensor[(3, 14, 10), float32], Tensor[(13, 6, 8), float32], Tensor[(624), float32]) {
  %498 = fn () -> (Tensor[(3, 14, 10), float32], Tensor[(13, 6, 8), float32], Tensor[(624), float32]) {
    %492 = @func_13667() /* ty=(Tensor[(3, 14, 10), float32],) */;
    %493 = cast(meta[relay.Constant][21] /* ty=Tensor[(624), float32] */, dtype="float32") /* ty=Tensor[(624), float32] */;
    %494 = reshape(%493, newshape=[13, 6, 8]) /* ty=Tensor[(13, 6, 8), float32] */;
    %495 = @func_8725(%494) /* ty=(Tensor[(13, 6, 8), float32],) */;
    %496 = %492.0;
    %497 = %495.0;
    (%496, %497, meta[relay.Constant][21] /* ty=Tensor[(624), float32] */)
  };
  %498() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(13, 6, 8), float32], Tensor[(624), float32]) */
}

def @func_5165(%var_5164: Tensor[(80, 2), float32]) -> (Tensor[(13, 3, 12), float32], Tensor[(8, 4, 16), float32], Tensor[(80, 2), bool], Tensor[(3, 14, 10), uint8], Tensor[(70, 6), float64]) {
  %516 = fn (%var_5138: Tensor[(80, 2), float32]) -> (Tensor[(13, 3, 12), float32], Tensor[(8, 4, 16), float32], Tensor[(80, 2), bool], Tensor[(3, 14, 10), uint8], Tensor[(70, 6), float64]) {
    %499 = cast(meta[relay.Constant][22] /* ty=Tensor[(13, 3, 12), float32] */, dtype="float32") /* ty=Tensor[(13, 3, 12), float32] */;
    %500 = @func_2698() /* ty=(Tensor[(8, 4, 16), float32],) */;
    %501 = cast(%var_5138, dtype="float32") /* ty=Tensor[(80, 2), float32] */;
    %502 = reshape(%501, newshape=[160]) /* ty=Tensor[(160), float32] */;
    %503 = @func_5061(%502) /* ty=(Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float32], Tensor[(160), float32]) */;
    %504 = %503.2;
    %505 = cast(%504, dtype="bool") /* ty=Tensor[(160), bool] */;
    %506 = shape_of(%var_5138, dtype="int32") /* ty=Tensor[(2), int32] */;
    %507 = cast(%var_5138, dtype="bool") /* ty=Tensor[(80, 2), bool] */;
    %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %509 = cast(meta[relay.Constant][23] /* ty=Tensor[(70, 6), float64] */, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
    %510 = reshape(%509, newshape=[3, 14, 10]) /* ty=Tensor[(3, 14, 10), float64] */;
    %511 = @func_2428(%510) /* ty=(Tensor[(3, 14, 10), uint8],) */;
    %512 = acosh(%499) /* ty=Tensor[(13, 3, 12), float32] */;
    %513 = %500.0;
    %514 = equal(%507, %508) /* ty=Tensor[(80, 2), bool] */;
    %515 = %511.0;
    (%512, %513, %514, %515, meta[relay.Constant][23] /* ty=Tensor[(70, 6), float64] */)
  };
  %516(%var_5164) /* ty=(Tensor[(13, 3, 12), float32], Tensor[(8, 4, 16), float32], Tensor[(80, 2), bool], Tensor[(3, 14, 10), uint8], Tensor[(70, 6), float64]) */
}

def @func_7615() -> Tensor[(11, 4, 7), float64] {
  %517 = fn () -> Tensor[(11, 4, 7), float64] {
    @func_1803() /* ty=Tensor[(11, 4, 7), float64] */
  };
  %517() /* ty=Tensor[(11, 4, 7), float64] */
}

def @func_5406() -> Tensor[(3, 14, 10), float64] {
  %518 = @func_842() /* ty=(Tensor[(3, 14, 10), float64],) */;
  %518.0
}

def @func_12883(%var_12878: Tensor[(900), int64]) -> (Tensor[(8, 4, 16), float64], Tensor[(15, 6, 10), bool], int64, Tensor[(900), int64]) {
  %519 = @func_11450() /* ty=(Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64]) */;
  %520 = cast(2 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %521 = cast(%var_12878, dtype="int64") /* ty=Tensor[(900), int64] */;
  %522 = reshape(%520, newshape=[]) /* ty=int64 */;
  %523 = reshape(%521, newshape=[15, 6, 10]) /* ty=Tensor[(15, 6, 10), int64] */;
  %524 = @func_5217(%522, %523) /* ty=(Tensor[(15, 6, 10), bool], Tensor[(3, 14, 10), float32]) */;
  %525 = %519.0;
  %526 = %524.0;
  (%525, %526, 2 /* ty=int64 */, %var_12878)
}

def @func_8508(%var_8506: uint32) -> (Tensor[(15, 4, 8), bool], Tensor[(10, 42), uint8]) {
  @func_8505(%var_8506) /* ty=(Tensor[(15, 4, 8), bool], Tensor[(10, 42), uint8]) */
}

def @func_13469() -> Tensor[(9, 13, 9), bool] {
  %527 = @func_2414() /* ty=(Tensor[(9, 13, 9), bool], Tensor[(8, 4, 16), float64]) */;
  %527.0
}

def @func_9399() -> Tensor[(1, 13, 9), float64] {
  %529 = fn () -> Tensor[(1, 13, 9), float64] {
    %528 = @func_1614() /* ty=(float64, Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float32]) */;
    %528.2
  };
  %529() /* ty=Tensor[(1, 13, 9), float64] */
}

def @func_7820(%var_7816: Tensor[(1, 14, 7), float32], %var_7817: Tensor[(1, 44), int16], %var_7818: Tensor[(264), int16], %var_7819: Tensor[(12, 44), int16]) -> (Tensor[(11, 14, 7), uint16], Tensor[(44), int16], Tensor[(264), int16], Tensor[(3, 14, 10), uint8], Tensor[(420), float64], Tensor[(3, 13, 9), int32], Tensor[(8, 4, 16), float32], Tensor[(12, 44), bool]) {
  %554 = fn (%var_7765: Tensor[(1, 14, 7), float32], %var_7784: Tensor[(1, 44), int16], %var_7785: Tensor[(264), int16], %var_7809: Tensor[(12, 44), int16]) -> (Tensor[(11, 14, 7), uint16], Tensor[(44), int16], Tensor[(264), int16], Tensor[(3, 14, 10), uint8], Tensor[(420), float64], Tensor[(3, 13, 9), int32], Tensor[(8, 4, 16), float32], Tensor[(12, 44), bool]) {
    %530 = cast(%var_7765, dtype="float32") /* ty=Tensor[(1, 14, 7), float32] */;
    %531 = log10(%530) /* ty=Tensor[(1, 14, 7), float32] */;
    %532 = cast(%531, dtype="uint16") /* ty=Tensor[(1, 14, 7), uint16] */;
    %533 = cast(meta[relay.Constant][24] /* ty=Tensor[(11, 14, 7), float32] */, dtype="uint16") /* ty=Tensor[(11, 14, 7), uint16] */;
    %534 = cast(%var_7784, dtype="int16") /* ty=Tensor[(1, 44), int16] */;
    %535 = cast(%var_7785, dtype="int16") /* ty=Tensor[(264), int16] */;
    %536 = reshape(%534, newshape=[44]) /* ty=Tensor[(44), int16] */;
    %537 = reshape(%535, newshape=[264]) /* ty=Tensor[(264), int16] */;
    %538 = @func_2536(%536, %537) /* ty=(Tensor[(1, 13, 9), float64], Tensor[(44), int16], Tensor[(264), int16], Tensor[(4, 6, 11), float64], Tensor[(3, 14, 10), float64]) */;
    %539 = cast(meta[relay.Constant][25] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
    %540 = reshape(%539, newshape=[3, 14, 10]) /* ty=Tensor[(3, 14, 10), float64] */;
    %541 = @func_2428(%540) /* ty=(Tensor[(3, 14, 10), uint8],) */;
    %542 = @func_1623() /* ty=(Tensor[(1, 13, 9), float64],) */;
    %543 = %542.0;
    %544 = cast(%543, dtype="int32") /* ty=Tensor[(1, 13, 9), int32] */;
    %545 = cast(meta[relay.Constant][26] /* ty=Tensor[(3, 13, 9), float64] */, dtype="int32") /* ty=Tensor[(3, 13, 9), int32] */;
    %546 = cast(%var_7784, dtype="bool") /* ty=Tensor[(1, 44), bool] */;
    %547 = cast(%var_7809, dtype="bool") /* ty=Tensor[(12, 44), bool] */;
    %548 = subtract(%532, %533) /* ty=Tensor[(11, 14, 7), uint16] */;
    %549 = %538.1;
    %550 = %541.0;
    %551 = left_shift(%544, %545) /* ty=Tensor[(3, 13, 9), int32] */;
    %552 = @func_3305() /* ty=Tensor[(8, 4, 16), float32] */;
    %553 = logical_or(%546, %547) /* ty=Tensor[(12, 44), bool] */;
    (%548, %549, %var_7785, %550, meta[relay.Constant][25] /* ty=Tensor[(420), float64] */, %551, %552, %553)
  };
  %554(%var_7816, %var_7817, %var_7818, %var_7819) /* ty=(Tensor[(11, 14, 7), uint16], Tensor[(44), int16], Tensor[(264), int16], Tensor[(3, 14, 10), uint8], Tensor[(420), float64], Tensor[(3, 13, 9), int32], Tensor[(8, 4, 16), float32], Tensor[(12, 44), bool]) */
}

def @func_14797(%var_14795: Tensor[(1, 5, 13), float64]) -> Tensor[(1, 5, 13), float64] {
  @func_14794(%var_14795) /* ty=Tensor[(1, 5, 13), float64] */
}

def @func_8221() -> (Tensor[(3, 14, 10), float32],) {
  %556 = fn () -> (Tensor[(3, 14, 10), float32],) {
    %555 = @func_2801() /* ty=Tensor[(3, 14, 10), float32] */;
    (%555,)
  };
  %556() /* ty=(Tensor[(3, 14, 10), float32],) */
}

def @func_9630() -> (Tensor[(3, 14, 10), float32],) {
  %557 = @func_2965() /* ty=Tensor[(3, 14, 10), float32] */;
  (%557,)
}

def @func_9177(%var_9175: Tensor[(60), float64], %var_9176: Tensor[(117), float64]) -> (Tensor[(9, 13, 9), bool], Tensor[(1, 13, 9), float64], Tensor[(60), float64], Tensor[(117), float64]) {
  @func_9173(%var_9175, %var_9176) /* ty=(Tensor[(9, 13, 9), bool], Tensor[(1, 13, 9), float64], Tensor[(60), float64], Tensor[(117), float64]) */
}

def @func_1119() -> (Tensor[(3, 14, 10), float64],) {
  %558 = @func_866() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64]) */;
  %559 = %558.0;
  (%559,)
}

def @func_3046() -> (Tensor[(1, 13, 9), float64],) {
  @func_3044() /* ty=(Tensor[(1, 13, 9), float64],) */
}

def @func_6160() -> (Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), float32]) {
  @func_6158() /* ty=(Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), float32]) */
}

def @func_6390(%var_6388: Tensor[(3, 14, 10), float32], %var_6389: Tensor[(240), bool]) -> (Tensor[(3, 14, 10), uint32], Tensor[(8, 4, 16), float64], Tensor[(8, 2, 15), bool], Tensor[(240), bool], Tensor[(8, 2, 15), bool]) {
  @func_6386(%var_6388, %var_6389) /* ty=(Tensor[(3, 14, 10), uint32], Tensor[(8, 4, 16), float64], Tensor[(8, 2, 15), bool], Tensor[(240), bool], Tensor[(8, 2, 15), bool]) */
}

def @func_14700() -> (Tensor[(8, 4, 16), float64],) {
  @func_14698() /* ty=(Tensor[(8, 4, 16), float64],) */
}

def @func_14920() -> Tensor[(9, 13, 9), bool] {
  @func_13469() /* ty=Tensor[(9, 13, 9), bool] */
}

def @func_1979() -> (Tensor[(3, 14, 10), float64],) {
  %562 = fn () -> (Tensor[(3, 14, 10), float64],) {
    %560 = @func_1119() /* ty=(Tensor[(3, 14, 10), float64],) */;
    %561 = %560.0;
    (%561,)
  };
  %562() /* ty=(Tensor[(3, 14, 10), float64],) */
}

def @func_2655(%var_2624: Tensor[(1296), int64], %var_2640: Tensor[(1296), int64]) -> (Tensor[(8, 4, 16), float64], Tensor[(1296), int64], Tensor[(8, 4, 16), float64], Tensor[(1296), int8]) {
  %563 = @func_2414() /* ty=(Tensor[(9, 13, 9), bool], Tensor[(8, 4, 16), float64]) */;
  %564 = @func_1354() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], float64, Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], Tensor[(1296), int64]) */;
  %565 = %564.5;
  %566 = cast(%var_2624, dtype="int64") /* ty=Tensor[(1296), int64] */;
  %567 = shape_of(%565, dtype="int32") /* ty=Tensor[(1), int32] */;
  %568 = cast(%565, dtype="int64") /* ty=Tensor[(1296), int64] */;
  %569 = dyn.reshape(%566, %567, newshape=[]) /* ty=Tensor[(?), int64] */;
  %570 = %563.1;
  %571 = cast(%570, dtype="float64") /* ty=Tensor[(8, 4, 16), float64] */;
  %572 = reshape(%571, newshape=[8, 4, 16]) /* ty=Tensor[(8, 4, 16), float64] */;
  %573 = @func_387(%572) /* ty=(Tensor[(8, 4, 16), float64],) */;
  %574 = cast(%var_2640, dtype="int8") /* ty=Tensor[(1296), int8] */;
  %575 = shape_of(%565, dtype="int32") /* ty=Tensor[(1), int32] */;
  %576 = cast(%565, dtype="int8") /* ty=Tensor[(1296), int8] */;
  %577 = dyn.reshape(%574, %575, newshape=[]) /* ty=Tensor[(?), int8] */;
  %578 = left_shift(%568, %569) /* ty=Tensor[(1296), int64] */;
  %579 = %573.0;
  %580 = minimum(%576, %577) /* ty=Tensor[(1296), int8] */;
  (%570, %578, %579, %580)
}

def @func_7028() -> (Tensor[(3, 14, 10), float32],) {
  @func_7026() /* ty=(Tensor[(3, 14, 10), float32],) */
}

def @func_13471() -> Tensor[(9, 13, 9), bool] {
  @func_13469() /* ty=Tensor[(9, 13, 9), bool] */
}

def @func_918() -> Tensor[(3, 14, 10), float32] {
  %587 = fn () -> Tensor[(3, 14, 10), float32] {
    %581 = @func_866() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64]) */;
    %582 = %581.1;
    %583 = cast(meta[relay.Constant][27] /* ty=Tensor[(3, 14, 10), float64] */, dtype="float32") /* ty=Tensor[(3, 14, 10), float32] */;
    %584 = shape_of(%582, dtype="int32") /* ty=Tensor[(3), int32] */;
    %585 = cast(%582, dtype="float32") /* ty=Tensor[(3, 14, 10), float32] */;
    %586 = dyn.reshape(%583, %584, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    maximum(%585, %586) /* ty=Tensor[(3, 14, 10), float32] */
  };
  %587() /* ty=Tensor[(3, 14, 10), float32] */
}

def @func_9050() -> Tensor[(3, 14, 10), float64] {
  %588 = fn () -> Tensor[(3, 14, 10), float64] {
    @func_5406() /* ty=Tensor[(3, 14, 10), float64] */
  };
  %588() /* ty=Tensor[(3, 14, 10), float64] */
}

def @func_390(%var_388: Tensor[(8, 4, 16), float64]) -> (Tensor[(8, 4, 16), float64],) {
  @func_387(%var_388) /* ty=(Tensor[(8, 4, 16), float64],) */
}

def @func_11336(%var_11300: Tensor[(14, 5, 10), uint16], %var_11301: Tensor[(14, 5, 10), uint16], %var_11308: Tensor[(4, 156), float32]) -> (Tensor[(14, 5, 10), uint16], Tensor[(13, 6, 8), float32], Tensor[(4, 156), float32], Tensor[(3, 14, 10), float32], Tensor[(14, 5, 10), float64]) {
  %589 = cast(%var_11301, dtype="uint16") /* ty=Tensor[(14, 5, 10), uint16] */;
  %590 = shape_of(%var_11300, dtype="int32") /* ty=Tensor[(3), int32] */;
  %591 = cast(%var_11300, dtype="uint16") /* ty=Tensor[(14, 5, 10), uint16] */;
  %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %593 = cast(%var_11308, dtype="float32") /* ty=Tensor[(4, 156), float32] */;
  %594 = reshape(%593, newshape=[13, 6, 8]) /* ty=Tensor[(13, 6, 8), float32] */;
  %595 = @func_8725(%594) /* ty=(Tensor[(13, 6, 8), float32],) */;
  %596 = cast(%var_11301, dtype="float64") /* ty=Tensor[(14, 5, 10), float64] */;
  %597 = erf(%596) /* ty=Tensor[(14, 5, 10), float64] */;
  %598 = cast(%597, dtype="float64") /* ty=Tensor[(14, 5, 10), float64] */;
  %599 = minimum(%591, %592) /* ty=Tensor[(14, 5, 10), uint16] */;
  %600 = %595.0;
  %601 = @func_2965() /* ty=Tensor[(3, 14, 10), float32] */;
  %602 = tan(%598) /* ty=Tensor[(14, 5, 10), float64] */;
  (%599, %600, %var_11308, %601, %602)
}

def @func_1081(%var_1075: Tensor[(512), float64]) -> (Tensor[(3, 14, 10), float64], Tensor[(980), int32], Tensor[(8, 4, 16), float64], Tensor[(512), float64], Tensor[(14, 14, 5), float32]) {
  %603 = @func_842() /* ty=(Tensor[(3, 14, 10), float64],) */;
  %604 = cast(%var_1075, dtype="float64") /* ty=Tensor[(512), float64] */;
  %605 = reshape(%604, newshape=[8, 4, 16]) /* ty=Tensor[(8, 4, 16), float64] */;
  %606 = @func_387(%605) /* ty=(Tensor[(8, 4, 16), float64],) */;
  %607 = cast(meta[relay.Constant][28] /* ty=Tensor[(980), int32] */, dtype="int32") /* ty=Tensor[(980), int32] */;
  %608 = cast(meta[relay.Constant][28] /* ty=Tensor[(980), int32] */, dtype="int32") /* ty=Tensor[(980), int32] */;
  %609 = reshape(%607, newshape=[14, 14, 5]) /* ty=Tensor[(14, 14, 5), int32] */;
  %610 = reshape(%608, newshape=[14, 14, 5]) /* ty=Tensor[(14, 14, 5), int32] */;
  %611 = @func_681(%609, %610) /* ty=(Tensor[(14, 14, 5), int32],) */;
  %612 = %611.0;
  %613 = cast(%612, dtype="float32") /* ty=Tensor[(14, 14, 5), float32] */;
  %614 = %603.0;
  %615 = %606.0;
  %616 = sinh(%613) /* ty=Tensor[(14, 14, 5), float32] */;
  (%614, meta[relay.Constant][28] /* ty=Tensor[(980), int32] */, %615, %var_1075, %616)
}

def @func_1084(%var_1082: Tensor[(512), float64]) -> (Tensor[(3, 14, 10), float64], Tensor[(980), int32], Tensor[(8, 4, 16), float64], Tensor[(512), float64], Tensor[(14, 14, 5), float32]) {
  @func_1081(%var_1082) /* ty=(Tensor[(3, 14, 10), float64], Tensor[(980), int32], Tensor[(8, 4, 16), float64], Tensor[(512), float64], Tensor[(14, 14, 5), float32]) */
}

def @func_5346() -> Tensor[(3, 14, 10), float64] {
  %619 = fn () -> Tensor[(3, 14, 10), float64] {
    %617 = @func_917() /* ty=Tensor[(3, 14, 10), float32] */;
    %618 = cast(%617, dtype="float64") /* ty=Tensor[(3, 14, 10), float64] */;
    sinh(%618) /* ty=Tensor[(3, 14, 10), float64] */
  };
  %619() /* ty=Tensor[(3, 14, 10), float64] */
}

def @func_2352() -> (Tensor[(8, 4, 16), float64],) {
  %620 = @func_2152() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64], Tensor[(8, 4, 16), float64], Tensor[(512), float64]) */;
  %621 = %620.2;
  (%621,)
}

def @func_12543() -> (Tensor[(3, 14, 10), float32], Tensor[(117), float64]) {
  %625 = fn () -> (Tensor[(3, 14, 10), float32], Tensor[(117), float64]) {
    %622 = @func_10801() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64], Tensor[(60), float64], Tensor[(117), float64], Tensor[(3, 14, 10), float64], Tensor[(8, 4, 16), float64]) */;
    %623 = @func_12304() /* ty=Tensor[(3, 14, 10), float32] */;
    %624 = %622.3;
    (%623, %624)
  };
  %625() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(117), float64]) */
}

def @func_13668() -> (Tensor[(3, 14, 10), float32],) {
  %627 = fn () -> (Tensor[(3, 14, 10), float32],) {
    %626 = @func_2801() /* ty=Tensor[(3, 14, 10), float32] */;
    (%626,)
  };
  %627() /* ty=(Tensor[(3, 14, 10), float32],) */
}

def @func_7718() -> (Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float64]) {
  @func_7716() /* ty=(Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float64]) */
}

def @func_5620() -> (Tensor[(3, 14, 10), bool], Tensor[(1, 13, 9), float64], Tensor[(1, 13, 9), float64]) {
  %638 = fn () -> (Tensor[(3, 14, 10), bool], Tensor[(1, 13, 9), float64], Tensor[(1, 13, 9), float64]) {
    %628 = @func_1008() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */;
    %629 = %628.1;
    %630 = cast(meta[relay.Constant][29] /* ty=Tensor[(3, 14, 10), float32] */, dtype="bool") /* ty=Tensor[(3, 14, 10), bool] */;
    %631 = shape_of(%629, dtype="int32") /* ty=Tensor[(3), int32] */;
    %632 = cast(%629, dtype="bool") /* ty=Tensor[(3, 14, 10), bool] */;
    %633 = dyn.reshape(%630, %631, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %634 = @func_4291() /* ty=(Tensor[(1, 13, 9), float64],) */;
    %635 = not_equal(%632, %633) /* ty=Tensor[(3, 14, 10), bool] */;
    %636 = @func_3649() /* ty=Tensor[(1, 13, 9), float64] */;
    %637 = %634.0;
    (%635, %636, %637)
  };
  %638() /* ty=(Tensor[(3, 14, 10), bool], Tensor[(1, 13, 9), float64], Tensor[(1, 13, 9), float64]) */
}

def @func_7977() -> (Tensor[(512), float64], Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), bool], Tensor[(420), float32], Tensor[(3, 14, 10), float32]) {
  %639 = @func_6495() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64], Tensor[(512), float64], Tensor[(8, 4, 16), float64]) */;
  %640 = cast(meta[relay.Constant][30] /* ty=Tensor[(420), float32] */, dtype="float32") /* ty=Tensor[(420), float32] */;
  %641 = reshape(%640, newshape=[3, 14, 10]) /* ty=Tensor[(3, 14, 10), float32] */;
  %642 = %639.2;
  %643 = @func_3649() /* ty=Tensor[(1, 13, 9), float64] */;
  %644 = @func_2048(%641) /* ty=Tensor[(3, 14, 10), bool] */;
  %645 = @func_1232() /* ty=Tensor[(3, 14, 10), float32] */;
  (%642, %643, %644, meta[relay.Constant][30] /* ty=Tensor[(420), float32] */, %645)
}

def @func_2254() -> Tensor[(3, 14, 10), float32] {
  %648 = fn () -> Tensor[(3, 14, 10), float32] {
    %646 = @func_917() /* ty=Tensor[(3, 14, 10), float32] */;
    %647 = cast(%646, dtype="float32") /* ty=Tensor[(3, 14, 10), float32] */;
    erf(%647) /* ty=Tensor[(3, 14, 10), float32] */
  };
  %648() /* ty=Tensor[(3, 14, 10), float32] */
}

def @func_14824() -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) {
  %651 = fn () -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) {
    %649 = @func_2953() /* ty=Tensor[(3, 14, 10), float32] */;
    %650 = @func_826() /* ty=Tensor[(3, 14, 10), float64] */;
    (%649, %650)
  };
  %651() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) */
}

def @func_4280(%var_4278: Tensor[(9, 9, 8), int8]) -> (Tensor[(9, 9, 8), int8], Tensor[(9, 9, 16), int64], Tensor[(1296), int64], float64, Tensor[(3, 14, 10), float32], Tensor[(9, 9, 8), float64]) {
  @func_4277(%var_4278) /* ty=(Tensor[(9, 9, 8), int8], Tensor[(9, 9, 16), int64], Tensor[(1296), int64], float64, Tensor[(3, 14, 10), float32], Tensor[(9, 9, 8), float64]) */
}

def @func_12002() -> (Tensor[(8, 4, 16), float64],) {
  %653 = fn () -> (Tensor[(8, 4, 16), float64],) {
    %652 = @func_3645() /* ty=Tensor[(8, 4, 16), float64] */;
    (%652,)
  };
  %653() /* ty=(Tensor[(8, 4, 16), float64],) */
}

def @func_10643() -> (Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float32]) {
  @func_10641() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float32]) */
}

def @func_11058() -> (Tensor[(3, 14, 10), float64],) {
  @func_11056() /* ty=(Tensor[(3, 14, 10), float64],) */
}

def @func_14906() -> (Tensor[(3, 14, 10), float32],) {
  @func_14904() /* ty=(Tensor[(3, 14, 10), float32],) */
}

def @func_4323(%var_4322: Tensor[(16, 1, 14), uint16]) -> (Tensor[(16, ?, 14), uint16],) {
  %659 = fn (%var_4309: Tensor[(16, 1, 14), uint16]) -> (Tensor[(16, ?, 14), uint16],) {
    %654 = cast(%var_4309, dtype="uint16") /* ty=Tensor[(16, 1, 14), uint16] */;
    %655 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(16, 1, 14), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %656 = cast(meta[relay.Constant][31] /* ty=Tensor[(16, 1, 14), uint16] */, dtype="uint16") /* ty=Tensor[(16, 1, 14), uint16] */;
    %657 = dyn.reshape(%654, %655, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %658 = multiply(%656, %657) /* ty=Tensor[(16, ?, 14), uint16] */;
    (%658,)
  };
  %659(%var_4322) /* ty=(Tensor[(16, ?, 14), uint16],) */
}

def @func_826() -> Tensor[(3, 14, 10), float64] {
  @func_813() /* ty=Tensor[(3, 14, 10), float64] */
}

def @func_3692(%var_3686: Tensor[(15, 13, 6), float64]) -> Tensor[(15, 13, 6), float64] {
  %660 = cast(%var_3686, dtype="float64") /* ty=Tensor[(15, 13, 6), float64] */;
  tan(%660) /* ty=Tensor[(15, 13, 6), float64] */
}

def @func_12793() -> Tensor[(3, 14, 10), float32] {
  @func_12791() /* ty=Tensor[(3, 14, 10), float32] */
}

def @func_1624() -> (Tensor[(1, 13, 9), float64],) {
  %662 = fn () -> (Tensor[(1, 13, 9), float64],) {
    %661 = @func_1379() /* ty=Tensor[(1, 13, 9), float64] */;
    (%661,)
  };
  %662() /* ty=(Tensor[(1, 13, 9), float64],) */
}

def @func_14438(%var_14437: Tensor[(400), float32]) -> (Tensor[(3, 14, 10), float32], Tensor[(400), float32], Tensor[(3, 14, 10), float32], Tensor[(4, 10, 10), uint32]) {
  %678 = fn (%var_14395: Tensor[(400), float32]) -> (Tensor[(3, 14, 10), float32], Tensor[(400), float32], Tensor[(3, 14, 10), float32], Tensor[(4, 10, 10), uint32]) {
    %663 = @func_8220() /* ty=(Tensor[(3, 14, 10), float32],) */;
    %664 = @func_4567() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(8, 4, 16), float64]) */;
    %665 = cast(%var_14395, dtype="float32") /* ty=Tensor[(400), float32] */;
    %666 = reshape(%665, newshape=[4, 10, 10]) /* ty=Tensor[(4, 10, 10), float32] */;
    %667 = @func_3718(%666) /* ty=(Tensor[(4, 10, 10), float32],) */;
    %668 = %667.0;
    %669 = cast(%668, dtype="float32") /* ty=Tensor[(4, 10, 10), float32] */;
    %670 = atan(%669) /* ty=Tensor[(4, 10, 10), float32] */;
    %671 = cast(%668, dtype="uint32") /* ty=Tensor[(4, 10, 10), uint32] */;
    %672 = shape_of(%670, dtype="int32") /* ty=Tensor[(3), int32] */;
    %673 = cast(%670, dtype="uint32") /* ty=Tensor[(4, 10, 10), uint32] */;
    %674 = dyn.reshape(%671, %672, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %675 = %663.0;
    %676 = %664.0;
    %677 = add(%673, %674) /* ty=Tensor[(4, 10, 10), uint32] */;
    (%675, %var_14395, %676, %677)
  };
  %678(%var_14437) /* ty=(Tensor[(3, 14, 10), float32], Tensor[(400), float32], Tensor[(3, 14, 10), float32], Tensor[(4, 10, 10), uint32]) */
}

def @func_1168() -> (Tensor[(3, 14, 10), float32],) {
  %679 = @func_938() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */;
  %680 = %679.0;
  (%680,)
}

def @func_3244(%var_3242: Tensor[(2, 10, 3), float32]) -> (Tensor[(2, 10, 3), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) {
  @func_3241(%var_3242) /* ty=(Tensor[(2, 10, 3), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */
}

def @func_10013() -> (Tensor[(3, 14, 10), float32], Tensor[(11, 4, 7), float32], Tensor[(1, 13, 9), float32]) {
  @func_10011() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(11, 4, 7), float32], Tensor[(1, 13, 9), float32]) */
}

def @func_2416() -> (Tensor[(9, 13, 9), bool], Tensor[(8, 4, 16), float64]) {
  @func_2414() /* ty=(Tensor[(9, 13, 9), bool], Tensor[(8, 4, 16), float64]) */
}

def @func_11484(%var_11482: Tensor[(8, 1, 12), uint64], %var_11483: Tensor[(8, 6, 12), uint64]) -> Tensor[(8, 6, 12), bool] {
  @func_11480(%var_11482, %var_11483) /* ty=Tensor[(8, 6, 12), bool] */
}

def @func_4277(%var_4236: Tensor[(9, 9, 8), int8]) -> (Tensor[(9, 9, 8), int8], Tensor[(9, 9, 16), int64], Tensor[(1296), int64], float64, Tensor[(3, 14, 10), float32], Tensor[(9, 9, 8), float64]) {
  %681 = cast(%var_4236, dtype="int8") /* ty=Tensor[(9, 9, 8), int8] */;
  %682 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(9, 9, 8), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %683 = cast(meta[relay.Constant][32] /* ty=Tensor[(9, 9, 8), int8] */, dtype="int8") /* ty=Tensor[(9, 9, 8), int8] */;
  %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %685 = cast(meta[relay.Constant][33] /* ty=Tensor[(1296), int64] */, dtype="int64") /* ty=Tensor[(1296), int64] */;
  %686 = cast(meta[relay.Constant][33] /* ty=Tensor[(1296), int64] */, dtype="int64") /* ty=Tensor[(1296), int64] */;
  %687 = cast(8.83299f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %688 = reshape(%685, newshape=[9, 9, 16]) /* ty=Tensor[(9, 9, 16), int64] */;
  %689 = reshape(%686, newshape=[9, 9, 16]) /* ty=Tensor[(9, 9, 16), int64] */;
  %690 = reshape(%687, newshape=[]) /* ty=float64 */;
  %691 = @func_511(%688, %689, %690) /* ty=(Tensor[(9, 9, 16), int64], Tensor[(1, 13, 9), float64], float64) */;
  %692 = cast(meta[relay.Constant][32] /* ty=Tensor[(9, 9, 8), int8] */, dtype="float64") /* ty=Tensor[(9, 9, 8), float64] */;
  %693 = exp(%692) /* ty=Tensor[(9, 9, 8), float64] */;
  %694 = cast(%var_4236, dtype="float64") /* ty=Tensor[(9, 9, 8), float64] */;
  %695 = shape_of(%693, dtype="int32") /* ty=Tensor[(3), int32] */;
  %696 = cast(%693, dtype="float64") /* ty=Tensor[(9, 9, 8), float64] */;
  %697 = dyn.reshape(%694, %695, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %698 = bitwise_or(%683, %684) /* ty=Tensor[(9, 9, 8), int8] */;
  %699 = %691.0;
  %700 = @func_2953() /* ty=Tensor[(3, 14, 10), float32] */;
  %701 = maximum(%696, %697) /* ty=Tensor[(9, 9, 8), float64] */;
  (%698, %699, meta[relay.Constant][33] /* ty=Tensor[(1296), int64] */, 8.83299f64 /* ty=float64 */, %700, %701)
}

def @func_511(%var_489: Tensor[(9, 9, 16), int64], %var_490: Tensor[(9, 9, 16), int64], %var_500: float64) -> (Tensor[(9, 9, 16), int64], Tensor[(1, 13, 9), float64], float64) {
  %702 = cast(%var_490, dtype="int64") /* ty=Tensor[(9, 9, 16), int64] */;
  %703 = shape_of(%var_489, dtype="int32") /* ty=Tensor[(3), int32] */;
  %704 = cast(%var_489, dtype="int64") /* ty=Tensor[(9, 9, 16), int64] */;
  %705 = dyn.reshape(%702, %703, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %706 = cast(%var_500, dtype="float64") /* ty=float64 */;
  %707 = reshape(%706, newshape=[]) /* ty=float64 */;
  %708 = bitwise_xor(%704, %705) /* ty=Tensor[(9, 9, 16), int64] */;
  %709 = @func_438(%707) /* ty=Tensor[(1, 13, 9), float64] */;
  (%708, %709, %var_500)
}

def @func_6495() -> (Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64], Tensor[(512), float64], Tensor[(8, 4, 16), float64]) {
  %710 = @func_4145() /* ty=(Tensor[(512), float64], Tensor[(1, 13, 9), float32]) */;
  %711 = @func_2352() /* ty=(Tensor[(8, 4, 16), float64],) */;
  %712 = @func_917() /* ty=Tensor[(3, 14, 10), float32] */;
  %713 = @func_5356() /* ty=Tensor[(1, 13, 9), float64] */;
  %714 = %710.0;
  %715 = %711.0;
  (%712, %713, %714, %715)
}

def @func_7335() -> (Tensor[(1, 13, 9), float64],) {
  %718 = fn () -> (Tensor[(1, 13, 9), float64],) {
    %716 = @func_5619() /* ty=(Tensor[(3, 14, 10), bool], Tensor[(1, 13, 9), float64], Tensor[(1, 13, 9), float64]) */;
    %717 = %716.1;
    (%717,)
  };
  %718() /* ty=(Tensor[(1, 13, 9), float64],) */
}

def @func_438(%var_425: float64) -> Tensor[(1, 13, 9), float64] {
  %719 = cast(%var_425, dtype="float64") /* ty=float64 */;
  %720 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 13, 9), float64] */, dtype="float64") /* ty=Tensor[(1, 13, 9), float64] */;
  mod(%719, %720) /* ty=Tensor[(1, 13, 9), float64] */
}

def @func_8562() -> Tensor[(3, 14, 10), float32] {
  @func_8560() /* ty=Tensor[(3, 14, 10), float32] */
}

def @func_9909() -> (Tensor[(3, 14, 10), float64],) {
  @func_9907() /* ty=(Tensor[(3, 14, 10), float64],) */
}

def @func_9282() -> (Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64], Tensor[(240), bool], Tensor[(8, 2, 15), float64]) {
  %721 = @func_1917() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) */;
  %722 = %721.1;
  %723 = cast(%722, dtype="float32") /* ty=Tensor[(3, 14, 10), float32] */;
  %724 = cast(meta[relay.Constant][35] /* ty=Tensor[(240), bool] */, dtype="bool") /* ty=Tensor[(240), bool] */;
  %725 = reshape(%723, newshape=[3, 14, 10]) /* ty=Tensor[(3, 14, 10), float32] */;
  %726 = reshape(%724, newshape=[240]) /* ty=Tensor[(240), bool] */;
  %727 = @func_6386(%725, %726) /* ty=(Tensor[(3, 14, 10), uint32], Tensor[(8, 4, 16), float64], Tensor[(8, 2, 15), bool], Tensor[(240), bool], Tensor[(8, 2, 15), bool]) */;
  %728 = %727.4;
  %729 = cast(%728, dtype="float64") /* ty=Tensor[(8, 2, 15), float64] */;
  %730 = @func_8034() /* ty=Tensor[(3, 14, 10), float64] */;
  %731 = sqrt(%729) /* ty=Tensor[(8, 2, 15), float64] */;
  (%730, %722, meta[relay.Constant][35] /* ty=Tensor[(240), bool] */, %731)
}

def @func_13009() -> (Tensor[(1, 13, 9), float64],) {
  %734 = fn () -> (Tensor[(1, 13, 9), float64],) {
    %732 = @func_11590() /* ty=(Tensor[(1, 13, 9), float64],) */;
    %733 = %732.0;
    (%733,)
  };
  %734() /* ty=(Tensor[(1, 13, 9), float64],) */
}

def @func_11452() -> (Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64]) {
  @func_11450() /* ty=(Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64]) */
}

def @func_3604() -> (Tensor[(1, 13, 9), float64],) {
  %736 = fn () -> (Tensor[(1, 13, 9), float64],) {
    %735 = @func_1379() /* ty=Tensor[(1, 13, 9), float64] */;
    (%735,)
  };
  %736() /* ty=(Tensor[(1, 13, 9), float64],) */
}

def @func_5063(%var_5062: Tensor[(160), float32]) -> (Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float32], Tensor[(160), float32]) {
  %743 = fn (%var_5050: Tensor[(160), float32]) -> (Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float32], Tensor[(160), float32]) {
    %737 = @func_1354() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], float64, Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], Tensor[(1296), int64]) */;
    %738 = cast(%var_5050, dtype="float32") /* ty=Tensor[(160), float32] */;
    %739 = reshape(%738, newshape=[2, 10, 8]) /* ty=Tensor[(2, 10, 8), float32] */;
    %740 = @func_4912(%739) /* ty=(Tensor[(2, 10, 8), float32], Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64]) */;
    %741 = %737.0;
    %742 = %740.1;
    (%741, %742, %var_5050)
  };
  %743(%var_5062) /* ty=(Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float32], Tensor[(160), float32]) */
}

def @func_7479(%var_7477: Tensor[(4, 3, 5), float64], %var_7478: Tensor[(1, 13, 9), float64]) -> (Tensor[(4, 3, 5), float64], Tensor[(1, 13, 9), float64], Tensor[(?, 13, 9), bool], Tensor[(3, 14, 10), uint32], Tensor[(420), float32], Tensor[(8, 30), bool], Tensor[(1, 13, 9), float64]) {
  @func_7475(%var_7477, %var_7478) /* ty=(Tensor[(4, 3, 5), float64], Tensor[(1, 13, 9), float64], Tensor[(?, 13, 9), bool], Tensor[(3, 14, 10), uint32], Tensor[(420), float32], Tensor[(8, 30), bool], Tensor[(1, 13, 9), float64]) */
}

def @func_15152(%var_15139: Tensor[(44), int16], %var_15140: Tensor[(264), int16]) -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(12, 10, 11), float32], Tensor[(264), int16], Tensor[(44), int16], Tensor[(264), int16], Tensor[(3, 14, 10), float64], Tensor[(?, 13, 9), uint32]) {
  %744 = @func_9630() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %745 = @func_9630() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %746 = cast(%var_15139, dtype="int16") /* ty=Tensor[(44), int16] */;
  %747 = cast(%var_15140, dtype="int16") /* ty=Tensor[(264), int16] */;
  %748 = reshape(%746, newshape=[44]) /* ty=Tensor[(44), int16] */;
  %749 = reshape(%747, newshape=[264]) /* ty=Tensor[(264), int16] */;
  %750 = @func_12144(%748, %749) /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(4, 6, 11), int16], Tensor[(44), int16], Tensor[(264), int16]) */;
  %751 = @func_1354() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], float64, Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], Tensor[(1296), int64]) */;
  %752 = %751.1;
  %753 = cast(%752, dtype="float32") /* ty=Tensor[(1, 13, 9), float32] */;
  %754 = asinh(%753) /* ty=Tensor[(1, 13, 9), float32] */;
  %755 = cast(%752, dtype="uint32") /* ty=Tensor[(1, 13, 9), uint32] */;
  %756 = shape_of(%754, dtype="int32") /* ty=Tensor[(3), int32] */;
  %757 = cast(%754, dtype="uint32") /* ty=Tensor[(1, 13, 9), uint32] */;
  %758 = dyn.reshape(%755, %756, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %759 = %744.0;
  %760 = %745.0;
  %761 = @func_917() /* ty=Tensor[(3, 14, 10), float32] */;
  %762 = @func_11501() /* ty=Tensor[(12, 10, 11), float32] */;
  %763 = %750.4;
  %764 = @func_8034() /* ty=Tensor[(3, 14, 10), float64] */;
  %765 = bitwise_or(%757, %758) /* ty=Tensor[(?, 13, 9), uint32] */;
  (%759, %760, %761, %762, %763, %var_15139, %var_15140, %764, %765)
}

def @func_6271() -> (Tensor[(3, 14, 10), float32], Tensor[(8, 4, 16), float64], Tensor[(8, 4, 16), float32]) {
  @func_6269() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(8, 4, 16), float64], Tensor[(8, 4, 16), float32]) */
}

def @func_868() -> (Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64]) {
  @func_866() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64]) */
}

def @func_4915(%var_4913: Tensor[(2, 10, 8), float32]) -> (Tensor[(2, 10, 8), float32], Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64]) {
  @func_4912(%var_4913) /* ty=(Tensor[(2, 10, 8), float32], Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64]) */
}

def @func_2587(%var_2579: float64) -> (Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64], float64, Tensor[(3, 14, 10), float64]) {
  %766 = @func_2442() /* ty=(Tensor[(1, 13, 9), float64],) */;
  %767 = @func_2390() /* ty=(Tensor[(512), float64], Tensor[(3, 14, 10), float32]) */;
  %768 = cast(%var_2579, dtype="float64") /* ty=float64 */;
  %769 = reshape(%768, newshape=[]) /* ty=float64 */;
  %770 = %766.0;
  %771 = %767.1;
  %772 = @func_438(%769) /* ty=Tensor[(1, 13, 9), float64] */;
  %773 = @func_813() /* ty=Tensor[(3, 14, 10), float64] */;
  (%770, %771, %772, %var_2579, %773)
}

def @func_3649() -> Tensor[(1, 13, 9), float64] {
  %774 = @func_1623() /* ty=(Tensor[(1, 13, 9), float64],) */;
  %774.0
}

def @func_10641() -> (Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float32]) {
  %775 = @func_1917() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) */;
  %776 = @func_7260() /* ty=(Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float64]) */;
  %777 = @func_10502() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64]) */;
  %778 = %775.1;
  %779 = %776.1;
  %780 = %777.2;
  %781 = @func_2965() /* ty=Tensor[(3, 14, 10), float32] */;
  (%778, %779, %780, %781)
}

def @func_3353() -> (Tensor[(8, 4, 16), float64], Tensor[(8, 4, 16), float64], Tensor[(420), float64], Tensor[(3, 14, 10), float32]) {
  %782 = @func_3040() /* ty=(Tensor[(8, 4, 16), float64],) */;
  %783 = %782.0;
  %784 = cast(%783, dtype="float64") /* ty=Tensor[(8, 4, 16), float64] */;
  %785 = reshape(%784, newshape=[8, 4, 16]) /* ty=Tensor[(8, 4, 16), float64] */;
  %786 = @func_387(%785) /* ty=(Tensor[(8, 4, 16), float64],) */;
  %787 = cast(meta[relay.Constant][36] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %788 = reshape(%787, newshape=[3, 14, 10]) /* ty=Tensor[(3, 14, 10), float64] */;
  %789 = @func_2428(%788) /* ty=(Tensor[(3, 14, 10), uint8],) */;
  %790 = %789.0;
  %791 = cast(%790, dtype="float32") /* ty=Tensor[(3, 14, 10), float32] */;
  %792 = %786.0;
  %793 = sin(%791) /* ty=Tensor[(3, 14, 10), float32] */;
  (%783, %792, meta[relay.Constant][36] /* ty=Tensor[(420), float64] */, %793)
}

def @func_2803() -> Tensor[(3, 14, 10), float32] {
  @func_2801() /* ty=Tensor[(3, 14, 10), float32] */
}

def @func_2428(%var_2420: Tensor[(3, 14, 10), float64]) -> (Tensor[(3, 14, 10), uint8],) {
  %794 = @func_2261() /* ty=Tensor[(3, 14, 10), float64] */;
  %795 = cast(%var_2420, dtype="uint8") /* ty=Tensor[(3, 14, 10), uint8] */;
  %796 = shape_of(%794, dtype="int32") /* ty=Tensor[(3), int32] */;
  %797 = cast(%794, dtype="uint8") /* ty=Tensor[(3, 14, 10), uint8] */;
  %798 = dyn.reshape(%795, %796, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %799 = bitwise_and(%797, %798) /* ty=Tensor[(3, 14, 10), uint8] */;
  (%799,)
}

def @func_7716() -> (Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float64]) {
  %800 = @func_1614() /* ty=(float64, Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float32]) */;
  %801 = @func_1917() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) */;
  %802 = %800.2;
  %803 = %801.1;
  (%802, %803)
}

def @func_5773() -> (Tensor[(8, 4, 16), float64],) {
  %806 = fn () -> (Tensor[(8, 4, 16), float64],) {
    %804 = @func_3040() /* ty=(Tensor[(8, 4, 16), float64],) */;
    %805 = %804.0;
    (%805,)
  };
  %806() /* ty=(Tensor[(8, 4, 16), float64],) */
}

def @func_10408() -> (Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), float64], Tensor[(512), float64], Tensor[(8, 4, 16), float64]) {
  @func_10406() /* ty=(Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), float64], Tensor[(512), float64], Tensor[(8, 4, 16), float64]) */
}

def @func_1398(%var_1396: Tensor[(4, 1, 11), int16], %var_1397: Tensor[(4, 6, 11), int16]) -> (Tensor[(4, 6, 11), int16],) {
  %810 = fn (%var_1384: Tensor[(4, 1, 11), int16], %var_1385: Tensor[(4, 6, 11), int16]) -> (Tensor[(4, 6, 11), int16],) {
    %807 = cast(%var_1384, dtype="int16") /* ty=Tensor[(4, 1, 11), int16] */;
    %808 = cast(%var_1385, dtype="int16") /* ty=Tensor[(4, 6, 11), int16] */;
    %809 = logical_xor(%807, %808) /* ty=Tensor[(4, 6, 11), int16] */;
    (%809,)
  };
  %810(%var_1396, %var_1397) /* ty=(Tensor[(4, 6, 11), int16],) */
}

def @func_5408() -> Tensor[(3, 14, 10), float64] {
  @func_5406() /* ty=Tensor[(3, 14, 10), float64] */
}

def @func_6295() -> Tensor[(3, 14, 10), float32] {
  @func_6293() /* ty=Tensor[(3, 14, 10), float32] */
}

def @func_14143() -> Tensor[(3, 14, 10), float64] {
  %812 = fn () -> Tensor[(3, 14, 10), float64] {
    %811 = @func_7716() /* ty=(Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float64]) */;
    %811.1
  };
  %812() /* ty=Tensor[(3, 14, 10), float64] */
}

def @func_11624() -> Tensor[(1, 13, 9), float64] {
  %813 = @func_8084() /* ty=(Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float32]) */;
  %813.0
}

def @func_10252() -> Tensor[(3, 14, 10), float64] {
  %814 = @func_10246() /* ty=(Tensor[(3, 14, 10), float64],) */;
  %814.0
}

def @func_8926() -> Tensor[(3, 14, 10), float64] {
  %815 = @func_842() /* ty=(Tensor[(3, 14, 10), float64],) */;
  %815.0
}

def @func_5486(%var_5481: Tensor[(16, 13, 9), float64]) -> (Tensor[(3, 14, 10), float64], Tensor[(11, 4, 7), float64], Tensor[(16, 13, 9), bool]) {
  %816 = @func_1354() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], float64, Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], Tensor[(1296), int64]) */;
  %817 = @func_4153() /* ty=(Tensor[(1, 13, 9), float64],) */;
  %818 = %817.0;
  %819 = cast(%818, dtype="bool") /* ty=Tensor[(1, 13, 9), bool] */;
  %820 = cast(%var_5481, dtype="bool") /* ty=Tensor[(16, 13, 9), bool] */;
  %821 = %816.3;
  %822 = @func_1803() /* ty=Tensor[(11, 4, 7), float64] */;
  %823 = logical_or(%819, %820) /* ty=Tensor[(16, 13, 9), bool] */;
  (%821, %822, %823)
}

def @func_14095() -> Tensor[(3, 14, 10), float64] {
  @func_14093() /* ty=Tensor[(3, 14, 10), float64] */
}

def @func_11502() -> Tensor[(12, 10, 11), float32] {
  %825 = fn () -> Tensor[(12, 10, 11), float32] {
    %824 = cast(meta[relay.Constant][37] /* ty=Tensor[(12, 10, 11), float32] */, dtype="float32") /* ty=Tensor[(12, 10, 11), float32] */;
    log2(%824) /* ty=Tensor[(12, 10, 11), float32] */
  };
  %825() /* ty=Tensor[(12, 10, 11), float32] */
}

def @func_11480(%var_11468: Tensor[(8, 1, 12), uint64], %var_11469: Tensor[(8, 6, 12), uint64]) -> Tensor[(8, 6, 12), bool] {
  %826 = cast(%var_11468, dtype="bool") /* ty=Tensor[(8, 1, 12), bool] */;
  %827 = cast(%var_11469, dtype="bool") /* ty=Tensor[(8, 6, 12), bool] */;
  not_equal(%826, %827) /* ty=Tensor[(8, 6, 12), bool] */
}

def @func_7979() -> (Tensor[(512), float64], Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), bool], Tensor[(420), float32], Tensor[(3, 14, 10), float32]) {
  @func_7977() /* ty=(Tensor[(512), float64], Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), bool], Tensor[(420), float32], Tensor[(3, 14, 10), float32]) */
}

def @func_12815() -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) {
  %830 = fn () -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) {
    %828 = @func_2253() /* ty=Tensor[(3, 14, 10), float32] */;
    %829 = @func_3426() /* ty=Tensor[(3, 14, 10), float32] */;
    (%828, %829)
  };
  %830() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */
}

def @func_14649(%var_14621: bool, %var_14622: Tensor[(1144), bool], %var_14628: Tensor[(648), int8]) -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64], Tensor[(2, 8, 15), float64], Tensor[(240), float64], Tensor[(1, 13, 9), float64], Tensor[(1, 13, 9), float64], Tensor[(11, 13, 8), bool], bool, Tensor[(1144), bool], Tensor[(3, 14, 10), float64], Tensor[(980), int32], Tensor[(648), int8], Tensor[(3, 14, 10), float32]) {
  %831 = @func_1463() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %832 = %831.0;
  %833 = cast(%832, dtype="float32") /* ty=Tensor[(3, 14, 10), float32] */;
  %834 = @func_1917() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) */;
  %835 = @func_8477() /* ty=(Tensor[(3, 14, 10), float64],) */;
  %836 = cast(meta[relay.Constant][38] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %837 = reshape(%836, newshape=[2, 8, 15]) /* ty=Tensor[(2, 8, 15), float64] */;
  %838 = @func_11590() /* ty=(Tensor[(1, 13, 9), float64],) */;
  %839 = @func_2442() /* ty=(Tensor[(1, 13, 9), float64],) */;
  %840 = cast(%var_14621, dtype="bool") /* ty=bool */;
  %841 = cast(%var_14622, dtype="bool") /* ty=Tensor[(1144), bool] */;
  %842 = reshape(%840, newshape=[]) /* ty=bool */;
  %843 = reshape(%841, newshape=[11, 13, 8]) /* ty=Tensor[(11, 13, 8), bool] */;
  %844 = @func_8189(%842, %843) /* ty=(Tensor[(11, 13, 8), bool],) */;
  %845 = cast(meta[relay.Constant][39] /* ty=Tensor[(980), int32] */, dtype="int32") /* ty=Tensor[(980), int32] */;
  %846 = cast(%var_14628, dtype="int8") /* ty=Tensor[(648), int8] */;
  %847 = reshape(%845, newshape=[980, 1]) /* ty=Tensor[(980, 1), int32] */;
  %848 = reshape(%846, newshape=[648]) /* ty=Tensor[(648), int8] */;
  %849 = @func_4858(%847, %848) /* ty=(Tensor[(3, 14, 10), float64], Tensor[(14, 14, 5), int32], Tensor[(16, ?, 14), uint16], Tensor[(980, 6), uint32], Tensor[(3, 14, 10), float32], Tensor[(1296), int64], Tensor[(9, 9, 8), int8], Tensor[(648), int8], Tensor[(16, ?, 14), uint16], Tensor[(3, 14, 10), float64], Tensor[(980, 224), float32]) */;
  %850 = @func_10011() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(11, 4, 7), float32], Tensor[(1, 13, 9), float32]) */;
  %851 = acos(%833) /* ty=Tensor[(3, 14, 10), float32] */;
  %852 = %834.0;
  %853 = %835.0;
  %854 = @func_9147(%837) /* ty=Tensor[(2, 8, 15), float64] */;
  %855 = %838.0;
  %856 = %839.0;
  %857 = %844.0;
  %858 = %849.9;
  %859 = %850.0;
  (%851, %852, %853, %854, meta[relay.Constant][38] /* ty=Tensor[(240), float64] */, %855, %856, %857, %var_14621, %var_14622, %858, meta[relay.Constant][39] /* ty=Tensor[(980), int32] */, %var_14628, %859)
}

def @func_5757(%var_5722: Tensor[(7, 1, 7), float32]) -> (Tensor[(7, 1, 7), float32], Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) {
  %860 = cast(%var_5722, dtype="float32") /* ty=Tensor[(7, 1, 7), float32] */;
  %861 = @func_4676() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], Tensor[(1, 13, 9), float64]) */;
  %862 = @func_1463() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %863 = @func_1008() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */;
  %864 = asinh(%860) /* ty=Tensor[(7, 1, 7), float32] */;
  %865 = %861.1;
  %866 = %862.0;
  %867 = %863.1;
  (%864, %865, %866, %867)
}

def @func_15221() -> (Tensor[(3, 14, 10), float64],) {
  %869 = fn () -> (Tensor[(3, 14, 10), float64],) {
    %868 = @func_5406() /* ty=Tensor[(3, 14, 10), float64] */;
    (%868,)
  };
  %869() /* ty=(Tensor[(3, 14, 10), float64],) */
}

def @func_3946(%var_3938: Tensor[(8, 2, 15), bool], %var_3939: Tensor[(8, 2, 15), bool]) -> Tensor[(8, 2, 15), bool] {
  %870 = cast(%var_3939, dtype="bool") /* ty=Tensor[(8, 2, 15), bool] */;
  %871 = shape_of(%var_3938, dtype="int32") /* ty=Tensor[(3), int32] */;
  %872 = cast(%var_3938, dtype="bool") /* ty=Tensor[(8, 2, 15), bool] */;
  %873 = dyn.reshape(%870, %871, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%872, %873) /* ty=Tensor[(8, 2, 15), bool] */
}

def @func_828() -> Tensor[(3, 14, 10), float64] {
  @func_826() /* ty=Tensor[(3, 14, 10), float64] */
}

def @func_11256() -> Tensor[(3, 14, 10), float32] {
  @func_11254() /* ty=Tensor[(3, 14, 10), float32] */
}

def @func_12202() -> Tensor[(3, 14, 10), uint16] {
  %874 = @func_11837() /* ty=(Tensor[(3, 14, 10), uint16], Tensor[(3, 14, 10), float32]) */;
  %874.0
}

def @func_7262() -> (Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float64]) {
  @func_7260() /* ty=(Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float64]) */
}

def @func_1009() -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) {
  %881 = fn () -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) {
    %875 = @func_917() /* ty=Tensor[(3, 14, 10), float32] */;
    %876 = cast(%875, dtype="float32") /* ty=Tensor[(3, 14, 10), float32] */;
    %877 = @func_826() /* ty=Tensor[(3, 14, 10), float64] */;
    %878 = cast(%877, dtype="float32") /* ty=Tensor[(3, 14, 10), float32] */;
    %879 = log2(%876) /* ty=Tensor[(3, 14, 10), float32] */;
    %880 = cosh(%878) /* ty=Tensor[(3, 14, 10), float32] */;
    (%879, %880)
  };
  %881() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */
}

def @func_3774(%var_3771: uint64, %var_3772: Tensor[(3, 12, 4), uint64], %var_3773: Tensor[(1296), int64]) -> (Tensor[(3, 12, 4), bool], Tensor[(1296), int8], Tensor[(1296), int64]) {
  @func_3769(%var_3771, %var_3772, %var_3773) /* ty=(Tensor[(3, 12, 4), bool], Tensor[(1296), int8], Tensor[(1296), int64]) */
}

def @func_5101(%var_5099: Tensor[(14, 15, 15), float64], %var_5100: Tensor[(14, 15, 15), float64]) -> (Tensor[(14, 15, 15), float64],) {
  %887 = fn (%var_5093: Tensor[(14, 15, 15), float64], %var_5094: Tensor[(14, 15, 15), float64]) -> (Tensor[(14, 15, 15), float64],) {
    %882 = cast(%var_5094, dtype="float64") /* ty=Tensor[(14, 15, 15), float64] */;
    %883 = shape_of(%var_5093, dtype="int32") /* ty=Tensor[(3), int32] */;
    %884 = cast(%var_5093, dtype="float64") /* ty=Tensor[(14, 15, 15), float64] */;
    %885 = dyn.reshape(%882, %883, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %886 = floor_mod(%884, %885) /* ty=Tensor[(14, 15, 15), float64] */;
    (%886,)
  };
  %887(%var_5099, %var_5100) /* ty=(Tensor[(14, 15, 15), float64],) */
}

def @func_3923() -> Tensor[(8, 4, 16), float32] {
  %888 = @func_2698() /* ty=(Tensor[(8, 4, 16), float32],) */;
  %888.0
}

def @func_7606() -> (Tensor[(1, 13, 9), float32],) {
  %889 = @func_4145() /* ty=(Tensor[(512), float64], Tensor[(1, 13, 9), float32]) */;
  %890 = %889.1;
  (%890,)
}

def @func_11626() -> Tensor[(1, 13, 9), float64] {
  @func_11624() /* ty=Tensor[(1, 13, 9), float64] */
}

def @func_5890() -> (Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64]) {
  %895 = fn () -> (Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64]) {
    %891 = @func_1168() /* ty=(Tensor[(3, 14, 10), float32],) */;
    %892 = @func_1614() /* ty=(float64, Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float32]) */;
    %893 = %891.0;
    %894 = %892.2;
    (%893, %894)
  };
  %895() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64]) */
}

def @func_10556() -> Tensor[(3, 14, 10), float64] {
  @func_10554() /* ty=Tensor[(3, 14, 10), float64] */
}

def @func_10554() -> Tensor[(3, 14, 10), float64] {
  %896 = @func_1917() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) */;
  %896.1
}

def @func_5220(%var_5218: int64, %var_5219: Tensor[(15, 6, 10), int64]) -> (Tensor[(15, 6, 10), bool], Tensor[(3, 14, 10), float32]) {
  %902 = fn (%var_5200: int64, %var_5201: Tensor[(15, 6, 10), int64]) -> (Tensor[(15, 6, 10), bool], Tensor[(3, 14, 10), float32]) {
    %897 = cast(%var_5200, dtype="bool") /* ty=bool */;
    %898 = cast(%var_5201, dtype="bool") /* ty=Tensor[(15, 6, 10), bool] */;
    %899 = @func_1422() /* ty=(Tensor[(3, 14, 10), float32],) */;
    %900 = not_equal(%897, %898) /* ty=Tensor[(15, 6, 10), bool] */;
    %901 = %899.0;
    (%900, %901)
  };
  %902(%var_5218, %var_5219) /* ty=(Tensor[(15, 6, 10), bool], Tensor[(3, 14, 10), float32]) */
}

def @func_7599() -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) {
  %906 = fn () -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) {
    %903 = @func_938() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */;
    %904 = %903.0;
    %905 = @func_917() /* ty=Tensor[(3, 14, 10), float32] */;
    (%904, %905)
  };
  %906() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */
}

def @func_3044() -> (Tensor[(1, 13, 9), float64],) {
  %907 = @func_2442() /* ty=(Tensor[(1, 13, 9), float64],) */;
  %908 = %907.0;
  (%908,)
}

def @func_14951(%var_14945: Tensor[(3, 8, 3), bool], %var_14946: Tensor[(3, 8, 3), bool]) -> Tensor[(3, 8, 3), bool] {
  %909 = cast(%var_14946, dtype="bool") /* ty=Tensor[(3, 8, 3), bool] */;
  %910 = shape_of(%var_14945, dtype="int32") /* ty=Tensor[(3), int32] */;
  %911 = cast(%var_14945, dtype="bool") /* ty=Tensor[(3, 8, 3), bool] */;
  %912 = dyn.reshape(%909, %910, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%911, %912) /* ty=Tensor[(3, 8, 3), bool] */
}

def @func_8084() -> (Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float32]) {
  %913 = @func_5619() /* ty=(Tensor[(3, 14, 10), bool], Tensor[(1, 13, 9), float64], Tensor[(1, 13, 9), float64]) */;
  %914 = @func_6018() /* ty=(Tensor[(12, 9, 6), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */;
  %915 = @func_7606() /* ty=(Tensor[(1, 13, 9), float32],) */;
  %916 = %913.2;
  %917 = %914.3;
  %918 = %915.0;
  (%916, %917, %918)
}

def @func_4147() -> (Tensor[(512), float64], Tensor[(1, 13, 9), float32]) {
  @func_4145() /* ty=(Tensor[(512), float64], Tensor[(1, 13, 9), float32]) */
}

def @func_4442() -> (Tensor[(8, 4, 16), float64], Tensor[(8, 4, 16), float64]) {
  %925 = fn () -> (Tensor[(8, 4, 16), float64], Tensor[(8, 4, 16), float64]) {
    %919 = @func_2152() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64], Tensor[(8, 4, 16), float64], Tensor[(512), float64]) */;
    %920 = %919.2;
    %921 = cast(%920, dtype="float64") /* ty=Tensor[(8, 4, 16), float64] */;
    %922 = reshape(%921, newshape=[512]) /* ty=Tensor[(512), float64] */;
    %923 = @func_2312(%922) /* ty=(Tensor[(3, 14, 10), float32], Tensor[(8, 4, 16), float64], Tensor[(512), int8], Tensor[(1, 13, 9), float64], Tensor[(4, 6, 11), int16], Tensor[(44), int16], Tensor[(264), int16]) */;
    %924 = %923.1;
    (%920, %924)
  };
  %925() /* ty=(Tensor[(8, 4, 16), float64], Tensor[(8, 4, 16), float64]) */
}

def @func_8006() -> (Tensor[(8, 4, 16), float64],) {
  %928 = fn () -> (Tensor[(8, 4, 16), float64],) {
    %926 = @func_6747() /* ty=(Tensor[(8, 4, 16), float64], float64) */;
    %927 = %926.0;
    (%927,)
  };
  %928() /* ty=(Tensor[(8, 4, 16), float64],) */
}

def @func_10247() -> (Tensor[(3, 14, 10), float64],) {
  %930 = fn () -> (Tensor[(3, 14, 10), float64],) {
    %929 = @func_2261() /* ty=Tensor[(3, 14, 10), float64] */;
    (%929,)
  };
  %930() /* ty=(Tensor[(3, 14, 10), float64],) */
}

def @func_3306() -> Tensor[(8, 4, 16), float32] {
  %932 = fn () -> Tensor[(8, 4, 16), float32] {
    %931 = @func_2698() /* ty=(Tensor[(8, 4, 16), float32],) */;
    %931.0
  };
  %932() /* ty=Tensor[(8, 4, 16), float32] */
}

def @func_1805() -> Tensor[(11, 4, 7), float64] {
  @func_1803() /* ty=Tensor[(11, 4, 7), float64] */
}

def @func_1464() -> (Tensor[(3, 14, 10), float32],) {
  %935 = fn () -> (Tensor[(3, 14, 10), float32],) {
    %933 = @func_938() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */;
    %934 = %933.1;
    (%934,)
  };
  %935() /* ty=(Tensor[(3, 14, 10), float32],) */
}

def @func_12038() -> (Tensor[(512), float64], Tensor[(3, 14, 10), float32]) {
  @func_12036() /* ty=(Tensor[(512), float64], Tensor[(3, 14, 10), float32]) */
}

def @func_12525(%var_12524: Tensor[(624), float32]) -> (Tensor[(3, 14, 10), float32], Tensor[(624), uint32]) {
  %947 = fn (%var_12495: Tensor[(624), float32]) -> (Tensor[(3, 14, 10), float32], Tensor[(624), uint32]) {
    %936 = @func_3266() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), bool]) */;
    %937 = cast(%var_12495, dtype="float32") /* ty=Tensor[(624), float32] */;
    %938 = reshape(%937, newshape=[13, 6, 8]) /* ty=Tensor[(13, 6, 8), float32] */;
    %939 = @func_8725(%938) /* ty=(Tensor[(13, 6, 8), float32],) */;
    %940 = %939.0;
    %941 = cast(%940, dtype="uint32") /* ty=Tensor[(13, 6, 8), uint32] */;
    %942 = shape_of(%var_12495, dtype="int32") /* ty=Tensor[(1), int32] */;
    %943 = cast(%var_12495, dtype="uint32") /* ty=Tensor[(624), uint32] */;
    %944 = dyn.reshape(%941, %942, newshape=[]) /* ty=Tensor[(?), uint32] */;
    %945 = %936.0;
    %946 = bitwise_and(%943, %944) /* ty=Tensor[(624), uint32] */;
    (%945, %946)
  };
  %947(%var_12524) /* ty=(Tensor[(3, 14, 10), float32], Tensor[(624), uint32]) */
}

def @func_8251() -> (Tensor[(3, 14, 10), float64], Tensor[(8, 4, 16), float64]) {
  %951 = fn () -> (Tensor[(3, 14, 10), float64], Tensor[(8, 4, 16), float64]) {
    %948 = @func_842() /* ty=(Tensor[(3, 14, 10), float64],) */;
    %949 = %948.0;
    %950 = @func_3645() /* ty=Tensor[(8, 4, 16), float64] */;
    (%949, %950)
  };
  %951() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(8, 4, 16), float64]) */
}

def @func_5851(%var_5848: Tensor[(264), int16], %var_5849: Tensor[(648), int8], %var_5850: Tensor[(1296), float64]) -> (Tensor[(8, 4, 16), float32], Tensor[(4, 6, 11), int16], Tensor[(44), int16], Tensor[(264), int16], Tensor[(648), int8], Tensor[(1296), float64]) {
  %970 = fn (%var_5796: Tensor[(264), int16], %var_5806: Tensor[(648), int8], %var_5839: Tensor[(1296), float64]) -> (Tensor[(8, 4, 16), float32], Tensor[(4, 6, 11), int16], Tensor[(44), int16], Tensor[(264), int16], Tensor[(648), int8], Tensor[(1296), float64]) {
    %952 = cast(meta[relay.Constant][40] /* ty=Tensor[(44), int16] */, dtype="int16") /* ty=Tensor[(44), int16] */;
    %953 = cast(%var_5796, dtype="int16") /* ty=Tensor[(264), int16] */;
    %954 = reshape(%952, newshape=[4, 1, 11]) /* ty=Tensor[(4, 1, 11), int16] */;
    %955 = reshape(%953, newshape=[4, 6, 11]) /* ty=Tensor[(4, 6, 11), int16] */;
    %956 = @func_1395(%954, %955) /* ty=(Tensor[(4, 6, 11), int16],) */;
    %957 = cast(%var_5806, dtype="int8") /* ty=Tensor[(648), int8] */;
    %958 = reshape(%957, newshape=[9, 9, 8]) /* ty=Tensor[(9, 9, 8), int8] */;
    %959 = @func_4277(%958) /* ty=(Tensor[(9, 9, 8), int8], Tensor[(9, 9, 16), int64], Tensor[(1296), int64], float64, Tensor[(3, 14, 10), float32], Tensor[(9, 9, 8), float64]) */;
    %960 = %959.2;
    %961 = cast(%960, dtype="float64") /* ty=Tensor[(1296), float64] */;
    %962 = asin(%961) /* ty=Tensor[(1296), float64] */;
    %963 = cast(%var_5839, dtype="float64") /* ty=Tensor[(1296), float64] */;
    %964 = shape_of(%962, dtype="int32") /* ty=Tensor[(1), int32] */;
    %965 = cast(%962, dtype="float64") /* ty=Tensor[(1296), float64] */;
    %966 = dyn.reshape(%963, %964, newshape=[]) /* ty=Tensor[(?), float64] */;
    %967 = @func_3305() /* ty=Tensor[(8, 4, 16), float32] */;
    %968 = %956.0;
    %969 = floor_divide(%965, %966) /* ty=Tensor[(1296), float64] */;
    (%967, %968, meta[relay.Constant][40] /* ty=Tensor[(44), int16] */, %var_5796, %var_5806, %969)
  };
  %970(%var_5848, %var_5849, %var_5850) /* ty=(Tensor[(8, 4, 16), float32], Tensor[(4, 6, 11), int16], Tensor[(44), int16], Tensor[(264), int16], Tensor[(648), int8], Tensor[(1296), float64]) */
}

def @func_7519() -> (Tensor[(11, 4, 7), float64], Tensor[(14, 14, 5), int32], Tensor[(980), int32]) {
  @func_7517() /* ty=(Tensor[(11, 4, 7), float64], Tensor[(14, 14, 5), int32], Tensor[(980), int32]) */
}

def @func_13001(%var_12999: Tensor[(2, 14, 4), uint32], %var_13000: uint32) -> (Tensor[(15, 4, 8), bool], uint32, Tensor[(2, 14, 4), int16]) {
  @func_12997(%var_12999, %var_13000) /* ty=(Tensor[(15, 4, 8), bool], uint32, Tensor[(2, 14, 4), int16]) */
}

def @func_2801() -> Tensor[(3, 14, 10), float32] {
  %971 = @func_2390() /* ty=(Tensor[(512), float64], Tensor[(3, 14, 10), float32]) */;
  %971.1
}

def @func_10105() -> (Tensor[(3, 14, 10), float64],) {
  %973 = fn () -> (Tensor[(3, 14, 10), float64],) {
    %972 = @func_826() /* ty=Tensor[(3, 14, 10), float64] */;
    (%972,)
  };
  %973() /* ty=(Tensor[(3, 14, 10), float64],) */
}

def @func_11839() -> (Tensor[(3, 14, 10), uint16], Tensor[(3, 14, 10), float32]) {
  @func_11837() /* ty=(Tensor[(3, 14, 10), uint16], Tensor[(3, 14, 10), float32]) */
}

def @func_3925() -> Tensor[(8, 4, 16), float32] {
  @func_3923() /* ty=Tensor[(8, 4, 16), float32] */
}

def @func_3619() -> Tensor[(12, 9, 6), float32] {
  %975 = fn () -> Tensor[(12, 9, 6), float32] {
    %974 = cast(meta[relay.Constant][41] /* ty=Tensor[(12, 9, 6), float32] */, dtype="float32") /* ty=Tensor[(12, 9, 6), float32] */;
    log2(%974) /* ty=Tensor[(12, 9, 6), float32] */
  };
  %975() /* ty=Tensor[(12, 9, 6), float32] */
}

def @func_2954() -> Tensor[(3, 14, 10), float32] {
  %977 = fn () -> Tensor[(3, 14, 10), float32] {
    %976 = @func_1917() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) */;
    %976.0
  };
  %977() /* ty=Tensor[(3, 14, 10), float32] */
}

def @func_4861(%var_4859: Tensor[(980, 1), int32], %var_4860: Tensor[(648), int8]) -> (Tensor[(3, 14, 10), float64], Tensor[(14, 14, 5), int32], Tensor[(16, ?, 14), uint16], Tensor[(980, 6), uint32], Tensor[(3, 14, 10), float32], Tensor[(1296), int64], Tensor[(9, 9, 8), int8], Tensor[(648), int8], Tensor[(16, ?, 14), uint16], Tensor[(3, 14, 10), float64], Tensor[(980, 224), float32]) {
  %1012 = fn (%var_4780: Tensor[(980, 1), int32], %var_4818: Tensor[(648), int8]) -> (Tensor[(3, 14, 10), float64], Tensor[(14, 14, 5), int32], Tensor[(16, ?, 14), uint16], Tensor[(980, 6), uint32], Tensor[(3, 14, 10), float32], Tensor[(1296), int64], Tensor[(9, 9, 8), int8], Tensor[(648), int8], Tensor[(16, ?, 14), uint16], Tensor[(3, 14, 10), float64], Tensor[(980, 224), float32]) {
    %978 = @func_1354() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], float64, Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], Tensor[(1296), int64]) */;
    %979 = cast(%var_4780, dtype="int32") /* ty=Tensor[(980, 1), int32] */;
    %980 = cast(%var_4780, dtype="int32") /* ty=Tensor[(980, 1), int32] */;
    %981 = reshape(%979, newshape=[14, 14, 5]) /* ty=Tensor[(14, 14, 5), int32] */;
    %982 = reshape(%980, newshape=[14, 14, 5]) /* ty=Tensor[(14, 14, 5), int32] */;
    %983 = @func_681(%981, %982) /* ty=(Tensor[(14, 14, 5), int32],) */;
    %984 = cast(meta[relay.Constant][42] /* ty=Tensor[(224), uint16] */, dtype="uint16") /* ty=Tensor[(224), uint16] */;
    %985 = reshape(%984, newshape=[16, 1, 14]) /* ty=Tensor[(16, 1, 14), uint16] */;
    %986 = @func_4321(%985) /* ty=(Tensor[(16, ?, 14), uint16],) */;
    %987 = cast(%var_4780, dtype="int32") /* ty=Tensor[(980, 1), int32] */;
    %988 = cast(meta[relay.Constant][43] /* ty=Tensor[(980, 6), int32] */, dtype="int32") /* ty=Tensor[(980, 6), int32] */;
    %989 = subtract(%987, %988) /* ty=Tensor[(980, 6), int32] */;
    %990 = cast(%var_4780, dtype="uint32") /* ty=Tensor[(980, 1), uint32] */;
    %991 = cast(%989, dtype="uint32") /* ty=Tensor[(980, 6), uint32] */;
    %992 = @func_2928() /* ty=(Tensor[(1296), int64], Tensor[(2, 256), int32], Tensor[(4, 6, 11), float64], Tensor[(44), int16], Tensor[(132, 2), int16]) */;
    %993 = cast(%var_4818, dtype="int8") /* ty=Tensor[(648), int8] */;
    %994 = reshape(%993, newshape=[9, 9, 8]) /* ty=Tensor[(9, 9, 8), int8] */;
    %995 = @func_4277(%994) /* ty=(Tensor[(9, 9, 8), int8], Tensor[(9, 9, 16), int64], Tensor[(1296), int64], float64, Tensor[(3, 14, 10), float32], Tensor[(9, 9, 8), float64]) */;
    %996 = %986.0;
    %997 = cast(%996, dtype="uint16") /* ty=Tensor[(16, ?, 14), uint16] */;
    %998 = reshape(%997, newshape=[16, 1, 14]) /* ty=Tensor[(16, 1, 14), uint16] */;
    %999 = @func_4321(%998) /* ty=(Tensor[(16, ?, 14), uint16],) */;
    %1000 = @func_3838() /* ty=(float64, Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) */;
    %1001 = cast(meta[relay.Constant][42] /* ty=Tensor[(224), uint16] */, dtype="float32") /* ty=Tensor[(224), float32] */;
    %1002 = cast(%var_4780, dtype="float32") /* ty=Tensor[(980, 1), float32] */;
    %1003 = %978.3;
    %1004 = %983.0;
    %1005 = right_shift(%990, %991) /* ty=Tensor[(980, 6), uint32] */;
    %1006 = @func_917() /* ty=Tensor[(3, 14, 10), float32] */;
    %1007 = %992.0;
    %1008 = %995.0;
    %1009 = %999.0;
    %1010 = %1000.3;
    %1011 = mod(%1001, %1002) /* ty=Tensor[(980, 224), float32] */;
    (%1003, %1004, %996, %1005, %1006, %1007, %1008, %var_4818, %1009, %1010, %1011)
  };
  %1012(%var_4859, %var_4860) /* ty=(Tensor[(3, 14, 10), float64], Tensor[(14, 14, 5), int32], Tensor[(16, ?, 14), uint16], Tensor[(980, 6), uint32], Tensor[(3, 14, 10), float32], Tensor[(1296), int64], Tensor[(9, 9, 8), int8], Tensor[(648), int8], Tensor[(16, ?, 14), uint16], Tensor[(3, 14, 10), float64], Tensor[(980, 224), float32]) */
}

def @func_11790(%var_11788: Tensor[(60), float64], %var_11789: Tensor[(117), float64]) -> (Tensor[(3, 14, 10), float32], Tensor[(4, 3, 5), float64], Tensor[(60), float64], Tensor[(117), float64], Tensor[(9, 13, 9), bool]) {
  %1023 = fn (%var_11782: Tensor[(60), float64], %var_11783: Tensor[(117), float64]) -> (Tensor[(3, 14, 10), float32], Tensor[(4, 3, 5), float64], Tensor[(60), float64], Tensor[(117), float64], Tensor[(9, 13, 9), bool]) {
    %1013 = @func_11393() /* ty=(Tensor[(3, 14, 10), float32],) */;
    %1014 = cast(%var_11782, dtype="float64") /* ty=Tensor[(60), float64] */;
    %1015 = cast(%var_11783, dtype="float64") /* ty=Tensor[(117), float64] */;
    %1016 = reshape(%1014, newshape=[4, 3, 5]) /* ty=Tensor[(4, 3, 5), float64] */;
    %1017 = reshape(%1015, newshape=[1, 13, 9]) /* ty=Tensor[(1, 13, 9), float64] */;
    %1018 = @func_7475(%1016, %1017) /* ty=(Tensor[(4, 3, 5), float64], Tensor[(1, 13, 9), float64], Tensor[(?, 13, 9), bool], Tensor[(3, 14, 10), uint32], Tensor[(420), float32], Tensor[(8, 30), bool], Tensor[(1, 13, 9), float64]) */;
    %1019 = @func_2414() /* ty=(Tensor[(9, 13, 9), bool], Tensor[(8, 4, 16), float64]) */;
    %1020 = %1013.0;
    %1021 = %1018.0;
    %1022 = %1019.0;
    (%1020, %1021, %var_11782, %var_11783, %1022)
  };
  %1023(%var_11788, %var_11789) /* ty=(Tensor[(3, 14, 10), float32], Tensor[(4, 3, 5), float64], Tensor[(60), float64], Tensor[(117), float64], Tensor[(9, 13, 9), bool]) */
}

def @func_1354() -> (Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], float64, Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], Tensor[(1296), int64]) {
  %1024 = @func_842() /* ty=(Tensor[(3, 14, 10), float64],) */;
  %1025 = cast(-6.66692f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %1026 = reshape(%1025, newshape=[]) /* ty=float64 */;
  %1027 = @func_866() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64]) */;
  %1028 = cast(meta[relay.Constant][44] /* ty=Tensor[(1296), int64] */, dtype="int64") /* ty=Tensor[(1296), int64] */;
  %1029 = cast(meta[relay.Constant][44] /* ty=Tensor[(1296), int64] */, dtype="int64") /* ty=Tensor[(1296), int64] */;
  %1030 = cast(-6.66692f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %1031 = reshape(%1028, newshape=[9, 9, 16]) /* ty=Tensor[(9, 9, 16), int64] */;
  %1032 = reshape(%1029, newshape=[9, 9, 16]) /* ty=Tensor[(9, 9, 16), int64] */;
  %1033 = reshape(%1030, newshape=[]) /* ty=float64 */;
  %1034 = @func_511(%1031, %1032, %1033) /* ty=(Tensor[(9, 9, 16), int64], Tensor[(1, 13, 9), float64], float64) */;
  %1035 = %1024.0;
  %1036 = @func_438(%1026) /* ty=Tensor[(1, 13, 9), float64] */;
  %1037 = %1027.0;
  %1038 = %1034.1;
  (%1035, %1036, -6.66692f64 /* ty=float64 */, %1037, %1038, meta[relay.Constant][44] /* ty=Tensor[(1296), int64] */)
}

def @func_8271() -> (Tensor[(648), int8],) {
  @func_8269() /* ty=(Tensor[(648), int8],) */
}

def @func_13352() -> Tensor[(3, 14, 10), float32] {
  @func_13350() /* ty=Tensor[(3, 14, 10), float32] */
}

def @func_15156(%var_15154: Tensor[(44), int16], %var_15155: Tensor[(264), int16]) -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(12, 10, 11), float32], Tensor[(264), int16], Tensor[(44), int16], Tensor[(264), int16], Tensor[(3, 14, 10), float64], Tensor[(?, 13, 9), uint32]) {
  @func_15152(%var_15154, %var_15155) /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(12, 10, 11), float32], Tensor[(264), int16], Tensor[(44), int16], Tensor[(264), int16], Tensor[(3, 14, 10), float64], Tensor[(?, 13, 9), uint32]) */
}

def @func_11876(%var_11874: Tensor[(980), int32]) -> (Tensor[(1, 13, 9), float64], Tensor[(14, 14, 5), int32], Tensor[(980), int32]) {
  @func_11873(%var_11874) /* ty=(Tensor[(1, 13, 9), float64], Tensor[(14, 14, 5), int32], Tensor[(980), int32]) */
}

def @func_10504() -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64]) {
  @func_10502() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64]) */
}

def @func_3241(%var_3217: Tensor[(2, 10, 3), float32]) -> (Tensor[(2, 10, 3), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) {
  %1039 = cast(%var_3217, dtype="float32") /* ty=Tensor[(2, 10, 3), float32] */;
  %1040 = @func_1008() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */;
  %1041 = @func_2390() /* ty=(Tensor[(512), float64], Tensor[(3, 14, 10), float32]) */;
  %1042 = sigmoid(%1039) /* ty=Tensor[(2, 10, 3), float32] */;
  %1043 = %1040.1;
  %1044 = %1041.1;
  (%1042, %1043, %1044)
}

def @func_2699() -> (Tensor[(8, 4, 16), float32],) {
  %1054 = fn () -> (Tensor[(8, 4, 16), float32],) {
    %1045 = @func_2414() /* ty=(Tensor[(9, 13, 9), bool], Tensor[(8, 4, 16), float64]) */;
    %1046 = %1045.1;
    %1047 = cast(%1046, dtype="float32") /* ty=Tensor[(8, 4, 16), float32] */;
    %1048 = sqrt(%1047) /* ty=Tensor[(8, 4, 16), float32] */;
    %1049 = cast(%1048, dtype="float32") /* ty=Tensor[(8, 4, 16), float32] */;
    %1050 = shape_of(%1046, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1051 = cast(%1046, dtype="float32") /* ty=Tensor[(8, 4, 16), float32] */;
    %1052 = dyn.reshape(%1049, %1050, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %1053 = power(%1051, %1052) /* ty=Tensor[(8, 4, 16), float32] */;
    (%1053,)
  };
  %1054() /* ty=(Tensor[(8, 4, 16), float32],) */
}

def @func_441(%var_439: float64) -> Tensor[(1, 13, 9), float64] {
  @func_438(%var_439) /* ty=Tensor[(1, 13, 9), float64] */
}

def @func_4153() -> (Tensor[(1, 13, 9), float64],) {
  %1055 = @func_3044() /* ty=(Tensor[(1, 13, 9), float64],) */;
  %1056 = %1055.0;
  (%1056,)
}

def @func_6536() -> Tensor[(3, 14, 10), float32] {
  %1058 = fn () -> Tensor[(3, 14, 10), float32] {
    %1057 = @func_4206() /* ty=(Tensor[(?, 13, 9), int8], Tensor[(3, 14, 10), float32]) */;
    %1057.1
  };
  %1058() /* ty=Tensor[(3, 14, 10), float32] */
}

def @func_11254() -> Tensor[(3, 14, 10), float32] {
  @func_2965() /* ty=Tensor[(3, 14, 10), float32] */
}

def @func_9147(%var_9144: Tensor[(2, 8, 15), float64]) -> Tensor[(2, 8, 15), float64] {
  %1059 = cast(%var_9144, dtype="float64") /* ty=Tensor[(2, 8, 15), float64] */;
  log2(%1059) /* ty=Tensor[(2, 8, 15), float64] */
}

def @func_10932() -> (Tensor[(3, 14, 10), bool], Tensor[(8, 4, 16), float64], float64, Tensor[(1170), float64]) {
  %1068 = fn () -> (Tensor[(3, 14, 10), bool], Tensor[(8, 4, 16), float64], float64, Tensor[(1170), float64]) {
    %1060 = @func_3266() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), bool]) */;
    %1061 = @func_8005() /* ty=(Tensor[(8, 4, 16), float64],) */;
    %1062 = cast(meta[relay.Constant][45] /* ty=Tensor[(1170), float64] */, dtype="float64") /* ty=Tensor[(1170), float64] */;
    %1063 = reshape(%1062, newshape=[1170]) /* ty=Tensor[(1170), float64] */;
    %1064 = @func_7686(%1063) /* ty=(Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float64], Tensor[(675), float32], Tensor[(1170), float64], float64, Tensor[(3, 14, 10), float32], Tensor[(8, 4, 16), float32], Tensor[(3, 14, 10), float64], Tensor[(8, 4, 16), float64]) */;
    %1065 = %1060.1;
    %1066 = %1061.0;
    %1067 = %1064.4;
    (%1065, %1066, %1067, meta[relay.Constant][45] /* ty=Tensor[(1170), float64] */)
  };
  %1068() /* ty=(Tensor[(3, 14, 10), bool], Tensor[(8, 4, 16), float64], float64, Tensor[(1170), float64]) */
}

def @func_4912(%var_4893: Tensor[(2, 10, 8), float32]) -> (Tensor[(2, 10, 8), float32], Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64]) {
  %1069 = cast(%var_4893, dtype="float32") /* ty=Tensor[(2, 10, 8), float32] */;
  %1070 = @func_3414() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %1071 = @func_4291() /* ty=(Tensor[(1, 13, 9), float64],) */;
  %1072 = atanh(%1069) /* ty=Tensor[(2, 10, 8), float32] */;
  %1073 = %1070.0;
  %1074 = %1071.0;
  (%1072, %1073, %1074)
}

def @func_10011() -> (Tensor[(3, 14, 10), float32], Tensor[(11, 4, 7), float32], Tensor[(1, 13, 9), float32]) {
  %1075 = @func_1463() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %1076 = @func_1849() /* ty=(Tensor[(11, 4, 7), float32],) */;
  %1077 = @func_7606() /* ty=(Tensor[(1, 13, 9), float32],) */;
  %1078 = %1075.0;
  %1079 = %1076.0;
  %1080 = %1077.0;
  (%1078, %1079, %1080)
}

def @func_11963(%var_11962: Tensor[(160), float32]) -> (Tensor[(8, 4, 16), float64], Tensor[(8, 4, 16), float32], Tensor[(3, 14, 10), float32], Tensor[(160), float32]) {
  %1089 = fn (%var_11940: Tensor[(160), float32]) -> (Tensor[(8, 4, 16), float64], Tensor[(8, 4, 16), float32], Tensor[(3, 14, 10), float32], Tensor[(160), float32]) {
    %1081 = @func_4567() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(8, 4, 16), float64]) */;
    %1082 = @func_8460() /* ty=(Tensor[(8, 4, 16), float32],) */;
    %1083 = cast(%var_11940, dtype="float32") /* ty=Tensor[(160), float32] */;
    %1084 = reshape(%1083, newshape=[160]) /* ty=Tensor[(160), float32] */;
    %1085 = @func_5061(%1084) /* ty=(Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float32], Tensor[(160), float32]) */;
    %1086 = %1081.1;
    %1087 = %1082.0;
    %1088 = %1085.1;
    (%1086, %1087, %1088, %var_11940)
  };
  %1089(%var_11962) /* ty=(Tensor[(8, 4, 16), float64], Tensor[(8, 4, 16), float32], Tensor[(3, 14, 10), float32], Tensor[(160), float32]) */
}

def @func_11341(%var_11338: Tensor[(14, 5, 10), uint16], %var_11339: Tensor[(14, 5, 10), uint16], %var_11340: Tensor[(4, 156), float32]) -> (Tensor[(14, 5, 10), uint16], Tensor[(13, 6, 8), float32], Tensor[(4, 156), float32], Tensor[(3, 14, 10), float32], Tensor[(14, 5, 10), float64]) {
  @func_11336(%var_11338, %var_11339, %var_11340) /* ty=(Tensor[(14, 5, 10), uint16], Tensor[(13, 6, 8), float32], Tensor[(4, 156), float32], Tensor[(3, 14, 10), float32], Tensor[(14, 5, 10), float64]) */
}

def @func_14904() -> (Tensor[(3, 14, 10), float32],) {
  %1090 = @func_6535() /* ty=Tensor[(3, 14, 10), float32] */;
  (%1090,)
}

def @func_3839() -> (float64, Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) {
  %1099 = fn () -> (float64, Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) {
    %1091 = @func_1614() /* ty=(float64, Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float32]) */;
    %1092 = @func_2352() /* ty=(Tensor[(8, 4, 16), float64],) */;
    %1093 = @func_1463() /* ty=(Tensor[(3, 14, 10), float32],) */;
    %1094 = @func_1119() /* ty=(Tensor[(3, 14, 10), float64],) */;
    %1095 = %1091.0;
    %1096 = %1092.0;
    %1097 = %1093.0;
    %1098 = %1094.0;
    (%1095, %1096, %1097, %1098)
  };
  %1099() /* ty=(float64, Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) */
}

def @func_13172() -> (Tensor[(3, 14, 10), float64],) {
  %1100 = @func_5345() /* ty=Tensor[(3, 14, 10), float64] */;
  (%1100,)
}

def @func_12148(%var_12146: Tensor[(44), int16], %var_12147: Tensor[(264), int16]) -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(4, 6, 11), int16], Tensor[(44), int16], Tensor[(264), int16]) {
  @func_12144(%var_12146, %var_12147) /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(4, 6, 11), int16], Tensor[(44), int16], Tensor[(264), int16]) */
}

def @func_10334() -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) {
  @func_10332() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */
}

def @func_11886() -> Tensor[(11, 4, 7), float64] {
  @func_11884() /* ty=Tensor[(11, 4, 7), float64] */
}

def @func_12090() -> Tensor[(1, 13, 9), float32] {
  %1101 = @func_4145() /* ty=(Tensor[(512), float64], Tensor[(1, 13, 9), float32]) */;
  %1101.1
}

def @func_6524() -> (Tensor[(3, 14, 10), float32],) {
  @func_6522() /* ty=(Tensor[(3, 14, 10), float32],) */
}

def @func_12645() -> (Tensor[(3, 14, 10), float64], Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), bool], Tensor[(3, 14, 10), uint16]) {
  %1102 = @func_8917() /* ty=(Tensor[(8, 4, 16), float64],) */;
  %1103 = @func_5619() /* ty=(Tensor[(3, 14, 10), bool], Tensor[(1, 13, 9), float64], Tensor[(1, 13, 9), float64]) */;
  %1104 = @func_7551() /* ty=Tensor[(3, 14, 10), float64] */;
  %1105 = %1102.0;
  %1106 = %1103.0;
  %1107 = @func_12202() /* ty=Tensor[(3, 14, 10), uint16] */;
  (%1104, %1105, %1106, %1107)
}

def @func_8711(%var_8657: Tensor[(1296), float64]) -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(4, 6, 11), int16], Tensor[(264), int16], Tensor[(3, 216), int8], Tensor[(1296), float64], Tensor[(8, 4, 16), float64], Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float32]) {
  %1108 = @func_4507() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %1109 = cast(meta[relay.Constant][46] /* ty=Tensor[(264), int16] */, dtype="int16") /* ty=Tensor[(264), int16] */;
  %1110 = cast(meta[relay.Constant][47] /* ty=Tensor[(3, 216), int8] */, dtype="int8") /* ty=Tensor[(3, 216), int8] */;
  %1111 = cast(%var_8657, dtype="float64") /* ty=Tensor[(1296), float64] */;
  %1112 = reshape(%1109, newshape=[264]) /* ty=Tensor[(264), int16] */;
  %1113 = reshape(%1110, newshape=[648]) /* ty=Tensor[(648), int8] */;
  %1114 = reshape(%1111, newshape=[1296]) /* ty=Tensor[(1296), float64] */;
  %1115 = @func_5847(%1112, %1113, %1114) /* ty=(Tensor[(8, 4, 16), float32], Tensor[(4, 6, 11), int16], Tensor[(44), int16], Tensor[(264), int16], Tensor[(648), int8], Tensor[(1296), float64]) */;
  %1116 = cast(%var_8657, dtype="float32") /* ty=Tensor[(1296), float32] */;
  %1117 = log10(%1116) /* ty=Tensor[(1296), float32] */;
  %1118 = cast(%1117, dtype="float64") /* ty=Tensor[(1296), float64] */;
  %1119 = @func_8005() /* ty=(Tensor[(8, 4, 16), float64],) */;
  %1120 = @func_5619() /* ty=(Tensor[(3, 14, 10), bool], Tensor[(1, 13, 9), float64], Tensor[(1, 13, 9), float64]) */;
  %1121 = %1108.0;
  %1122 = @func_1260() /* ty=Tensor[(3, 14, 10), float32] */;
  %1123 = %1115.1;
  %1124 = cos(%1118) /* ty=Tensor[(1296), float64] */;
  %1125 = %1119.0;
  %1126 = %1120.2;
  %1127 = @func_8560() /* ty=Tensor[(3, 14, 10), float32] */;
  (%1121, %1122, %1123, meta[relay.Constant][46] /* ty=Tensor[(264), int16] */, meta[relay.Constant][47] /* ty=Tensor[(3, 216), int8] */, %1124, %1125, %1126, %1127)
}

def @func_11094() -> (Tensor[(3, 14, 10), float32], Tensor[(1296), int64]) {
  %1128 = @func_10011() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(11, 4, 7), float32], Tensor[(1, 13, 9), float32]) */;
  %1129 = %1128.0;
  %1130 = @func_6559() /* ty=Tensor[(1296), int64] */;
  (%1129, %1130)
}

def @func_3416() -> (Tensor[(3, 14, 10), float32],) {
  @func_3414() /* ty=(Tensor[(3, 14, 10), float32],) */
}

def @func_13440() -> (Tensor[(3, 14, 10), float64], Tensor[(8, 4, 16), float64]) {
  %1135 = fn () -> (Tensor[(3, 14, 10), float64], Tensor[(8, 4, 16), float64]) {
    %1131 = @func_866() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64]) */;
    %1132 = @func_2414() /* ty=(Tensor[(9, 13, 9), bool], Tensor[(8, 4, 16), float64]) */;
    %1133 = %1131.1;
    %1134 = %1132.1;
    (%1133, %1134)
  };
  %1135() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(8, 4, 16), float64]) */
}

def @func_8176(%var_8175: Tensor[(3150), float64]) -> (Tensor[(8, 4, 16), float64], Tensor[(8, 4, 16), float64], Tensor[(14, 15, 15), float64], Tensor[(3150), float64]) {
  %1146 = fn (%var_8133: Tensor[(3150), float64]) -> (Tensor[(8, 4, 16), float64], Tensor[(8, 4, 16), float64], Tensor[(14, 15, 15), float64], Tensor[(3150), float64]) {
    %1136 = @func_6747() /* ty=(Tensor[(8, 4, 16), float64], float64) */;
    %1137 = @func_3838() /* ty=(float64, Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) */;
    %1138 = cast(%var_8133, dtype="float64") /* ty=Tensor[(3150), float64] */;
    %1139 = cast(%var_8133, dtype="float64") /* ty=Tensor[(3150), float64] */;
    %1140 = reshape(%1138, newshape=[14, 15, 15]) /* ty=Tensor[(14, 15, 15), float64] */;
    %1141 = reshape(%1139, newshape=[14, 15, 15]) /* ty=Tensor[(14, 15, 15), float64] */;
    %1142 = @func_5098(%1140, %1141) /* ty=(Tensor[(14, 15, 15), float64],) */;
    %1143 = %1136.0;
    %1144 = %1137.1;
    %1145 = %1142.0;
    (%1143, %1144, %1145, %var_8133)
  };
  %1146(%var_8175) /* ty=(Tensor[(8, 4, 16), float64], Tensor[(8, 4, 16), float64], Tensor[(14, 15, 15), float64], Tensor[(3150), float64]) */
}

def @func_7416() -> (Tensor[(8, 4, 16), float64],) {
  %1149 = fn () -> (Tensor[(8, 4, 16), float64],) {
    %1147 = @func_6269() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(8, 4, 16), float64], Tensor[(8, 4, 16), float32]) */;
    %1148 = %1147.1;
    (%1148,)
  };
  %1149() /* ty=(Tensor[(8, 4, 16), float64],) */
}

def @func_6561() -> Tensor[(1296), int64] {
  @func_6559() /* ty=Tensor[(1296), int64] */
}

def @func_15234() -> Tensor[(3, 14, 10), float64] {
  @func_5406() /* ty=Tensor[(3, 14, 10), float64] */
}

def @func_7517() -> (Tensor[(11, 4, 7), float64], Tensor[(14, 14, 5), int32], Tensor[(980), int32]) {
  %1150 = cast(meta[relay.Constant][48] /* ty=Tensor[(980), int32] */, dtype="int32") /* ty=Tensor[(980), int32] */;
  %1151 = cast(meta[relay.Constant][48] /* ty=Tensor[(980), int32] */, dtype="int32") /* ty=Tensor[(980), int32] */;
  %1152 = reshape(%1150, newshape=[14, 14, 5]) /* ty=Tensor[(14, 14, 5), int32] */;
  %1153 = reshape(%1151, newshape=[14, 14, 5]) /* ty=Tensor[(14, 14, 5), int32] */;
  %1154 = @func_681(%1152, %1153) /* ty=(Tensor[(14, 14, 5), int32],) */;
  %1155 = @func_1803() /* ty=Tensor[(11, 4, 7), float64] */;
  %1156 = %1154.0;
  (%1155, %1156, meta[relay.Constant][48] /* ty=Tensor[(980), int32] */)
}

def @func_10406() -> (Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), float64], Tensor[(512), float64], Tensor[(8, 4, 16), float64]) {
  %1157 = @func_2390() /* ty=(Tensor[(512), float64], Tensor[(3, 14, 10), float32]) */;
  %1158 = @func_6747() /* ty=(Tensor[(8, 4, 16), float64], float64) */;
  %1159 = @func_3645() /* ty=Tensor[(8, 4, 16), float64] */;
  %1160 = @func_8926() /* ty=Tensor[(3, 14, 10), float64] */;
  %1161 = %1157.0;
  %1162 = %1158.0;
  (%1159, %1160, %1161, %1162)
}

def @func_940() -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) {
  @func_938() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */
}

def @func_11991() -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) {
  %1163 = @func_10440() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) */;
  %1164 = @func_7598() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */;
  %1165 = %1163.0;
  %1166 = @func_6293() /* ty=Tensor[(3, 14, 10), float32] */;
  %1167 = %1164.1;
  (%1165, %1166, %1167)
}

def @func_3267() -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), bool]) {
  %1173 = fn () -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), bool]) {
    %1168 = @func_1168() /* ty=(Tensor[(3, 14, 10), float32],) */;
    %1169 = %1168.0;
    %1170 = cast(%1169, dtype="float32") /* ty=Tensor[(3, 14, 10), float32] */;
    %1171 = reshape(%1170, newshape=[3, 14, 10]) /* ty=Tensor[(3, 14, 10), float32] */;
    %1172 = @func_2048(%1171) /* ty=Tensor[(3, 14, 10), bool] */;
    (%1169, %1172)
  };
  %1173() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), bool]) */
}

def @func_8714(%var_8712: Tensor[(1296), float64]) -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(4, 6, 11), int16], Tensor[(264), int16], Tensor[(3, 216), int8], Tensor[(1296), float64], Tensor[(8, 4, 16), float64], Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float32]) {
  @func_8711(%var_8712) /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(4, 6, 11), int16], Tensor[(264), int16], Tensor[(3, 216), int8], Tensor[(1296), float64], Tensor[(8, 4, 16), float64], Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float32]) */
}

def @func_13964() -> (Tensor[(3, 14, 10), float32],) {
  %1176 = fn () -> (Tensor[(3, 14, 10), float32],) {
    %1174 = @func_10332() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */;
    %1175 = %1174.0;
    (%1175,)
  };
  %1176() /* ty=(Tensor[(3, 14, 10), float32],) */
}

def @func_12729() -> (Tensor[(1, 13, 9), float64], Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float32], Tensor[(8, 4, 16), float64]) {
  @func_12727() /* ty=(Tensor[(1, 13, 9), float64], Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float32], Tensor[(8, 4, 16), float64]) */
}

def @func_8189(%var_8181: bool, %var_8182: Tensor[(11, 13, 8), bool]) -> (Tensor[(11, 13, 8), bool],) {
  %1177 = cast(%var_8181, dtype="bool") /* ty=bool */;
  %1178 = cast(%var_8182, dtype="bool") /* ty=Tensor[(11, 13, 8), bool] */;
  %1179 = logical_or(%1177, %1178) /* ty=Tensor[(11, 13, 8), bool] */;
  (%1179,)
}

def @func_9150(%var_9148: Tensor[(2, 8, 15), float64]) -> Tensor[(2, 8, 15), float64] {
  @func_9147(%var_9148) /* ty=Tensor[(2, 8, 15), float64] */
}

def @func_5356() -> Tensor[(1, 13, 9), float64] {
  %1180 = @func_3044() /* ty=(Tensor[(1, 13, 9), float64],) */;
  %1180.0
}

def @func_13063() -> Tensor[(1, 13, 9), float32] {
  %1181 = @func_7606() /* ty=(Tensor[(1, 13, 9), float32],) */;
  %1181.0
}

def @func_12092() -> Tensor[(1, 13, 9), float32] {
  @func_12090() /* ty=Tensor[(1, 13, 9), float32] */
}

def @func_2444() -> (Tensor[(1, 13, 9), float64],) {
  @func_2442() /* ty=(Tensor[(1, 13, 9), float64],) */
}

def @func_11056() -> (Tensor[(3, 14, 10), float64],) {
  %1182 = @func_8926() /* ty=Tensor[(3, 14, 10), float64] */;
  (%1182,)
}

def @func_13810() -> (Tensor[(3, 14, 10), float64],) {
  %1185 = fn () -> (Tensor[(3, 14, 10), float64],) {
    %1183 = @func_10104() /* ty=(Tensor[(3, 14, 10), float64],) */;
    %1184 = %1183.0;
    (%1184,)
  };
  %1185() /* ty=(Tensor[(3, 14, 10), float64],) */
}

def @func_2966() -> Tensor[(3, 14, 10), float32] {
  %1186 = fn () -> Tensor[(3, 14, 10), float32] {
    @func_2253() /* ty=Tensor[(3, 14, 10), float32] */
  };
  %1186() /* ty=Tensor[(3, 14, 10), float32] */
}

def @func_2262() -> Tensor[(3, 14, 10), float64] {
  %1188 = fn () -> Tensor[(3, 14, 10), float64] {
    %1187 = @func_1917() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) */;
    %1187.1
  };
  %1188() /* ty=Tensor[(3, 14, 10), float64] */
}

def @func_3769(%var_3754: uint64, %var_3755: Tensor[(3, 12, 4), uint64], %var_3760: Tensor[(1296), int64]) -> (Tensor[(3, 12, 4), bool], Tensor[(1296), int8], Tensor[(1296), int64]) {
  %1189 = cast(%var_3754, dtype="bool") /* ty=bool */;
  %1190 = cast(%var_3755, dtype="bool") /* ty=Tensor[(3, 12, 4), bool] */;
  %1191 = cast(%var_3760, dtype="int64") /* ty=Tensor[(1296), int64] */;
  %1192 = cast(%var_3760, dtype="int64") /* ty=Tensor[(1296), int64] */;
  %1193 = reshape(%1191, newshape=[1296]) /* ty=Tensor[(1296), int64] */;
  %1194 = reshape(%1192, newshape=[1296]) /* ty=Tensor[(1296), int64] */;
  %1195 = @func_2655(%1193, %1194) /* ty=(Tensor[(8, 4, 16), float64], Tensor[(1296), int64], Tensor[(8, 4, 16), float64], Tensor[(1296), int8]) */;
  %1196 = equal(%1189, %1190) /* ty=Tensor[(3, 12, 4), bool] */;
  %1197 = %1195.3;
  (%1196, %1197, %var_3760)
}

def @func_4676() -> (Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], Tensor[(1, 13, 9), float64]) {
  %1198 = @func_4153() /* ty=(Tensor[(1, 13, 9), float64],) */;
  %1199 = @func_3603() /* ty=(Tensor[(1, 13, 9), float64],) */;
  %1200 = @func_813() /* ty=Tensor[(3, 14, 10), float64] */;
  %1201 = %1198.0;
  %1202 = %1199.0;
  (%1200, %1201, %1202)
}

def @func_8269() -> (Tensor[(648), int8],) {
  %1203 = @func_6333() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(980), int32], Tensor[(980), int32], Tensor[(648), int8]) */;
  %1204 = %1203.3;
  (%1204,)
}

def @func_14955(%var_14953: Tensor[(3, 8, 3), bool], %var_14954: Tensor[(3, 8, 3), bool]) -> Tensor[(3, 8, 3), bool] {
  @func_14951(%var_14953, %var_14954) /* ty=Tensor[(3, 8, 3), bool] */
}

def @func_10502() -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64]) {
  %1205 = @func_1422() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %1206 = @func_10104() /* ty=(Tensor[(3, 14, 10), float64],) */;
  %1207 = %1205.0;
  %1208 = %1206.0;
  %1209 = @func_8926() /* ty=Tensor[(3, 14, 10), float64] */;
  (%1207, %1208, %1209)
}

def @func_13390() -> (Tensor[(3, 14, 10), float32], Tensor[(1296), int64]) {
  %1210 = @func_8211() /* ty=Tensor[(3, 14, 10), float32] */;
  %1211 = @func_6559() /* ty=Tensor[(1296), int64] */;
  (%1210, %1211)
}

def @func_2050(%var_2049: Tensor[(3, 14, 10), float32]) -> Tensor[(3, 14, 10), bool] {
  %1217 = fn (%var_2039: Tensor[(3, 14, 10), float32]) -> Tensor[(3, 14, 10), bool] {
    %1212 = @func_917() /* ty=Tensor[(3, 14, 10), float32] */;
    %1213 = cast(%var_2039, dtype="bool") /* ty=Tensor[(3, 14, 10), bool] */;
    %1214 = shape_of(%1212, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1215 = cast(%1212, dtype="bool") /* ty=Tensor[(3, 14, 10), bool] */;
    %1216 = dyn.reshape(%1213, %1214, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_and(%1215, %1216) /* ty=Tensor[(3, 14, 10), bool] */
  };
  %1217(%var_2049) /* ty=Tensor[(3, 14, 10), bool] */
}

def @func_12204() -> Tensor[(3, 14, 10), uint16] {
  @func_12202() /* ty=Tensor[(3, 14, 10), uint16] */
}

def @func_6559() -> Tensor[(1296), int64] {
  %1218 = @func_2928() /* ty=(Tensor[(1296), int64], Tensor[(2, 256), int32], Tensor[(4, 6, 11), float64], Tensor[(44), int16], Tensor[(132, 2), int16]) */;
  %1218.0
}

def @func_3428() -> Tensor[(3, 14, 10), float32] {
  @func_3426() /* ty=Tensor[(3, 14, 10), float32] */
}

def @func_9018() -> (Tensor[(12, 9, 6), float32], Tensor[(3, 14, 10), float64], Tensor[(15, 45), float32], Tensor[(1, 13, 9), float64], Tensor[(1170), float64]) {
  %1232 = fn () -> (Tensor[(12, 9, 6), float32], Tensor[(3, 14, 10), float64], Tensor[(15, 45), float32], Tensor[(1, 13, 9), float64], Tensor[(1170), float64]) {
    %1219 = cast(meta[relay.Constant][49] /* ty=Tensor[(15, 45), float32] */, dtype="float32") /* ty=Tensor[(15, 45), float32] */;
    %1220 = cast(meta[relay.Constant][50] /* ty=Tensor[(1170), float64] */, dtype="float64") /* ty=Tensor[(1170), float64] */;
    %1221 = cast(-0.225062f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %1222 = reshape(%1219, newshape=[3, 15, 15]) /* ty=Tensor[(3, 15, 15), float32] */;
    %1223 = reshape(%1220, newshape=[1170]) /* ty=Tensor[(1170), float64] */;
    %1224 = reshape(%1221, newshape=[]) /* ty=float64 */;
    %1225 = @func_6087(%1222, %1223, %1224) /* ty=(Tensor[(3, 15, 15), float32], Tensor[(2, 10, 8), float32], Tensor[(160, 1), float32], Tensor[(3, 14, 10), float64], Tensor[(15, 13, 6), float64], Tensor[(1170), float64], Tensor[(1, 13, 9), float64], float64, Tensor[(3, 14, 10), float64]) */;
    %1226 = cast(meta[relay.Constant][50] /* ty=Tensor[(1170), float64] */, dtype="float64") /* ty=Tensor[(1170), float64] */;
    %1227 = cast(-0.225062f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %1228 = @func_3618() /* ty=Tensor[(12, 9, 6), float32] */;
    %1229 = %1225.3;
    %1230 = @func_3649() /* ty=Tensor[(1, 13, 9), float64] */;
    %1231 = multiply(%1226, %1227) /* ty=Tensor[(1170), float64] */;
    (%1228, %1229, meta[relay.Constant][49] /* ty=Tensor[(15, 45), float32] */, %1230, %1231)
  };
  %1232() /* ty=(Tensor[(12, 9, 6), float32], Tensor[(3, 14, 10), float64], Tensor[(15, 45), float32], Tensor[(1, 13, 9), float64], Tensor[(1170), float64]) */
}

def @func_9393() -> (Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float32]) {
  %1237 = fn () -> (Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float32]) {
    %1233 = @func_5710() /* ty=(Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float64]) */;
    %1234 = @func_4567() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(8, 4, 16), float64]) */;
    %1235 = %1233.1;
    %1236 = %1234.0;
    (%1235, %1236)
  };
  %1237() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float32]) */
}

def @func_7026() -> (Tensor[(3, 14, 10), float32],) {
  %1238 = @func_1260() /* ty=Tensor[(3, 14, 10), float32] */;
  (%1238,)
}

def @func_4398() -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) {
  %1242 = fn () -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) {
    %1239 = @func_2390() /* ty=(Tensor[(512), float64], Tensor[(3, 14, 10), float32]) */;
    %1240 = %1239.1;
    %1241 = @func_1778() /* ty=Tensor[(3, 14, 10), float64] */;
    (%1240, %1241)
  };
  %1242() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) */
}

def @func_12144(%var_12128: Tensor[(44), int16], %var_12129: Tensor[(264), int16]) -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(4, 6, 11), int16], Tensor[(44), int16], Tensor[(264), int16]) {
  %1243 = @func_9630() /* ty=(Tensor[(3, 14, 10), float32],) */;
  %1244 = @func_1614() /* ty=(float64, Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float32]) */;
  %1245 = cast(%var_12128, dtype="int16") /* ty=Tensor[(44), int16] */;
  %1246 = cast(%var_12129, dtype="int16") /* ty=Tensor[(264), int16] */;
  %1247 = reshape(%1245, newshape=[4, 1, 11]) /* ty=Tensor[(4, 1, 11), int16] */;
  %1248 = reshape(%1246, newshape=[4, 6, 11]) /* ty=Tensor[(4, 6, 11), int16] */;
  %1249 = @func_1395(%1247, %1248) /* ty=(Tensor[(4, 6, 11), int16],) */;
  %1250 = %1243.0;
  %1251 = %1244.3;
  %1252 = %1249.0;
  (%1250, %1251, %1252, %var_12128, %var_12129)
}

def @func_2431(%var_2429: Tensor[(3, 14, 10), float64]) -> (Tensor[(3, 14, 10), uint8],) {
  @func_2428(%var_2429) /* ty=(Tensor[(3, 14, 10), uint8],) */
}

def @func_1380() -> Tensor[(1, 13, 9), float64] {
  %1254 = fn () -> Tensor[(1, 13, 9), float64] {
    %1253 = @func_1354() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], float64, Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], Tensor[(1296), int64]) */;
    %1253.1
  };
  %1254() /* ty=Tensor[(1, 13, 9), float64] */
}

def @func_10254() -> Tensor[(3, 14, 10), float64] {
  @func_10252() /* ty=Tensor[(3, 14, 10), float64] */
}

def @func_8193(%var_8191: bool, %var_8192: Tensor[(11, 13, 8), bool]) -> (Tensor[(11, 13, 8), bool],) {
  @func_8189(%var_8191, %var_8192) /* ty=(Tensor[(11, 13, 8), bool],) */
}

def @func_6335() -> (Tensor[(3, 14, 10), float64], Tensor[(980), int32], Tensor[(980), int32], Tensor[(648), int8]) {
  @func_6333() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(980), int32], Tensor[(980), int32], Tensor[(648), int8]) */
}

def @func_3721(%var_3719: Tensor[(4, 10, 10), float32]) -> (Tensor[(4, 10, 10), float32],) {
  @func_3718(%var_3719) /* ty=(Tensor[(4, 10, 10), float32],) */
}

def @func_11591() -> (Tensor[(1, 13, 9), float64],) {
  %1256 = fn () -> (Tensor[(1, 13, 9), float64],) {
    %1255 = @func_5356() /* ty=Tensor[(1, 13, 9), float64] */;
    (%1255,)
  };
  %1256() /* ty=(Tensor[(1, 13, 9), float64],) */
}

def @func_2539(%var_2537: Tensor[(44), int16], %var_2538: Tensor[(264), int16]) -> (Tensor[(1, 13, 9), float64], Tensor[(44), int16], Tensor[(264), int16], Tensor[(4, 6, 11), float64], Tensor[(3, 14, 10), float64]) {
  %1268 = fn (%var_2499: Tensor[(44), int16], %var_2500: Tensor[(264), int16]) -> (Tensor[(1, 13, 9), float64], Tensor[(44), int16], Tensor[(264), int16], Tensor[(4, 6, 11), float64], Tensor[(3, 14, 10), float64]) {
    %1257 = @func_1614() /* ty=(float64, Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float32]) */;
    %1258 = cast(%var_2499, dtype="int16") /* ty=Tensor[(44), int16] */;
    %1259 = cast(%var_2500, dtype="int16") /* ty=Tensor[(264), int16] */;
    %1260 = reshape(%1258, newshape=[4, 1, 11]) /* ty=Tensor[(4, 1, 11), int16] */;
    %1261 = reshape(%1259, newshape=[4, 6, 11]) /* ty=Tensor[(4, 6, 11), int16] */;
    %1262 = @func_1395(%1260, %1261) /* ty=(Tensor[(4, 6, 11), int16],) */;
    %1263 = %1262.0;
    %1264 = cast(%1263, dtype="float64") /* ty=Tensor[(4, 6, 11), float64] */;
    %1265 = %1257.2;
    %1266 = rsqrt(%1264) /* ty=Tensor[(4, 6, 11), float64] */;
    %1267 = @func_2261() /* ty=Tensor[(3, 14, 10), float64] */;
    (%1265, %var_2499, %var_2500, %1266, %1267)
  };
  %1268(%var_2537, %var_2538) /* ty=(Tensor[(1, 13, 9), float64], Tensor[(44), int16], Tensor[(264), int16], Tensor[(4, 6, 11), float64], Tensor[(3, 14, 10), float64]) */
}

def @func_1356() -> (Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], float64, Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], Tensor[(1296), int64]) {
  @func_1354() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], float64, Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], Tensor[(1296), int64]) */
}

def @func_3695(%var_3693: Tensor[(15, 13, 6), float64]) -> Tensor[(15, 13, 6), float64] {
  @func_3692(%var_3693) /* ty=Tensor[(15, 13, 6), float64] */
}

def @func_1170() -> (Tensor[(3, 14, 10), float32],) {
  @func_1168() /* ty=(Tensor[(3, 14, 10), float32],) */
}

def @func_12647() -> (Tensor[(3, 14, 10), float64], Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), bool], Tensor[(3, 14, 10), uint16]) {
  @func_12645() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), bool], Tensor[(3, 14, 10), uint16]) */
}

def @func_2930() -> (Tensor[(1296), int64], Tensor[(2, 256), int32], Tensor[(4, 6, 11), float64], Tensor[(44), int16], Tensor[(132, 2), int16]) {
  @func_2928() /* ty=(Tensor[(1296), int64], Tensor[(2, 256), int32], Tensor[(4, 6, 11), float64], Tensor[(44), int16], Tensor[(132, 2), int16]) */
}

def @func_3414() -> (Tensor[(3, 14, 10), float32],) {
  %1269 = @func_3266() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), bool]) */;
  %1270 = %1269.0;
  (%1270,)
}

def @func_8212() -> Tensor[(3, 14, 10), float32] {
  %1271 = fn () -> Tensor[(3, 14, 10), float32] {
    @func_2953() /* ty=Tensor[(3, 14, 10), float32] */
  };
  %1271() /* ty=Tensor[(3, 14, 10), float32] */
}

def @func_1615() -> (float64, Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float32]) {
  %1280 = fn () -> (float64, Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float32]) {
    %1272 = @func_1354() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], float64, Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], Tensor[(1296), int64]) */;
    %1273 = %1272.2;
    %1274 = cast(%1273, dtype="float64") /* ty=float64 */;
    %1275 = reshape(%1274, newshape=[]) /* ty=float64 */;
    %1276 = @func_1463() /* ty=(Tensor[(3, 14, 10), float32],) */;
    %1277 = @func_1232() /* ty=Tensor[(3, 14, 10), float32] */;
    %1278 = @func_438(%1275) /* ty=Tensor[(1, 13, 9), float64] */;
    %1279 = %1276.0;
    (%1273, %1277, %1278, %1279)
  };
  %1280() /* ty=(float64, Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float32]) */
}

def @func_9284() -> (Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64], Tensor[(240), bool], Tensor[(8, 2, 15), float64]) {
  @func_9282() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64], Tensor[(240), bool], Tensor[(8, 2, 15), float64]) */
}

def @func_4678() -> (Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], Tensor[(1, 13, 9), float64]) {
  @func_4676() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(1, 13, 9), float64], Tensor[(1, 13, 9), float64]) */
}

def @func_4567() -> (Tensor[(3, 14, 10), float32], Tensor[(8, 4, 16), float64]) {
  %1281 = @func_3266() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), bool]) */;
  %1282 = %1281.0;
  %1283 = cast(%1282, dtype="float32") /* ty=Tensor[(3, 14, 10), float32] */;
  %1284 = @func_3353() /* ty=(Tensor[(8, 4, 16), float64], Tensor[(8, 4, 16), float64], Tensor[(420), float64], Tensor[(3, 14, 10), float32]) */;
  %1285 = asinh(%1283) /* ty=Tensor[(3, 14, 10), float32] */;
  %1286 = %1284.0;
  (%1285, %1286)
}

def @func_10801() -> (Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float64], Tensor[(60), float64], Tensor[(117), float64], Tensor[(3, 14, 10), float64], Tensor[(8, 4, 16), float64]) {
  %1287 = cast(meta[relay.Constant][51] /* ty=Tensor[(60), float64] */, dtype="float64") /* ty=Tensor[(60), float64] */;
  %1288 = cast(meta[relay.Constant][52] /* ty=Tensor[(117), float64] */, dtype="float64") /* ty=Tensor[(117), float64] */;
  %1289 = reshape(%1287, newshape=[4, 3, 5]) /* ty=Tensor[(4, 3, 5), float64] */;
  %1290 = reshape(%1288, newshape=[1, 13, 9]) /* ty=Tensor[(1, 13, 9), float64] */;
  %1291 = @func_7475(%1289, %1290) /* ty=(Tensor[(4, 3, 5), float64], Tensor[(1, 13, 9), float64], Tensor[(?, 13, 9), bool], Tensor[(3, 14, 10), uint32], Tensor[(420), float32], Tensor[(8, 30), bool], Tensor[(1, 13, 9), float64]) */;
  %1292 = @func_2152() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64], Tensor[(8, 4, 16), float64], Tensor[(512), float64]) */;
  %1293 = @func_2965() /* ty=Tensor[(3, 14, 10), float32] */;
  %1294 = %1291.1;
  %1295 = @func_1778() /* ty=Tensor[(3, 14, 10), float64] */;
  %1296 = %1292.2;
  (%1293, %1294, meta[relay.Constant][51] /* ty=Tensor[(60), float64] */, meta[relay.Constant][52] /* ty=Tensor[(117), float64] */, %1295, %1296)
}

def @func_6522() -> (Tensor[(3, 14, 10), float32],) {
  %1297 = @func_6293() /* ty=Tensor[(3, 14, 10), float32] */;
  %1298 = cast(%1297, dtype="float32") /* ty=Tensor[(3, 14, 10), float32] */;
  %1299 = log10(%1298) /* ty=Tensor[(3, 14, 10), float32] */;
  (%1299,)
}

def @func_13174() -> (Tensor[(3, 14, 10), float64],) {
  @func_13172() /* ty=(Tensor[(3, 14, 10), float64],) */
}

def @func_10441() -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) {
  %1304 = fn () -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) {
    %1300 = @func_9630() /* ty=(Tensor[(3, 14, 10), float32],) */;
    %1301 = %1300.0;
    %1302 = @func_2965() /* ty=Tensor[(3, 14, 10), float32] */;
    %1303 = @func_10252() /* ty=Tensor[(3, 14, 10), float64] */;
    (%1301, %1302, %1303)
  };
  %1304() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) */
}

def @func_5760(%var_5758: Tensor[(7, 1, 7), float32]) -> (Tensor[(7, 1, 7), float32], Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) {
  @func_5757(%var_5758) /* ty=(Tensor[(7, 1, 7), float32], Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */
}

def @func_12305() -> Tensor[(3, 14, 10), float32] {
  %1306 = fn () -> Tensor[(3, 14, 10), float32] {
    %1305 = @func_12036() /* ty=(Tensor[(512), float64], Tensor[(3, 14, 10), float32]) */;
    %1305.1
  };
  %1306() /* ty=Tensor[(3, 14, 10), float32] */
}

def @func_11096() -> (Tensor[(3, 14, 10), float32], Tensor[(1296), int64]) {
  @func_11094() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(1296), int64]) */
}

def @func_5358() -> Tensor[(1, 13, 9), float64] {
  @func_5356() /* ty=Tensor[(1, 13, 9), float64] */
}

def @func_11884() -> Tensor[(11, 4, 7), float64] {
  @func_1803() /* ty=Tensor[(11, 4, 7), float64] */
}

def @func_4569() -> (Tensor[(3, 14, 10), float32], Tensor[(8, 4, 16), float64]) {
  @func_4567() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(8, 4, 16), float64]) */
}

def @func_938() -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) {
  %1307 = @func_866() /* ty=(Tensor[(3, 14, 10), float64], Tensor[(3, 14, 10), float64]) */;
  %1308 = %1307.0;
  %1309 = cast(%1308, dtype="float32") /* ty=Tensor[(3, 14, 10), float32] */;
  %1310 = atan(%1309) /* ty=Tensor[(3, 14, 10), float32] */;
  %1311 = @func_917() /* ty=Tensor[(3, 14, 10), float32] */;
  (%1310, %1311)
}

def @func_1121() -> (Tensor[(3, 14, 10), float64],) {
  @func_1119() /* ty=(Tensor[(3, 14, 10), float64],) */
}

def @func_14210() -> (Tensor[(1, 13, 9), float64], Tensor[(13, 6, 8), float32], Tensor[(624), float32]) {
  %1318 = fn () -> (Tensor[(1, 13, 9), float64], Tensor[(13, 6, 8), float32], Tensor[(624), float32]) {
    %1312 = @func_13260() /* ty=(Tensor[(1, 13, 9), float64],) */;
    %1313 = cast(meta[relay.Constant][53] /* ty=Tensor[(624), float32] */, dtype="float32") /* ty=Tensor[(624), float32] */;
    %1314 = reshape(%1313, newshape=[13, 6, 8]) /* ty=Tensor[(13, 6, 8), float32] */;
    %1315 = @func_8725(%1314) /* ty=(Tensor[(13, 6, 8), float32],) */;
    %1316 = %1312.0;
    %1317 = %1315.0;
    (%1316, %1317, meta[relay.Constant][53] /* ty=Tensor[(624), float32] */)
  };
  %1318() /* ty=(Tensor[(1, 13, 9), float64], Tensor[(13, 6, 8), float32], Tensor[(624), float32]) */
}

def @func_8086() -> (Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float32]) {
  @func_8084() /* ty=(Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float32], Tensor[(1, 13, 9), float32]) */
}

def @func_5710() -> (Tensor[(1, 13, 9), float64], Tensor[(3, 14, 10), float64]) {
  %1319 = @func_5619() /* ty=(Tensor[(3, 14, 10), bool], Tensor[(1, 13, 9), float64], Tensor[(1, 13, 9), float64]) */;
  %1320 = %1319.2;
  %1321 = @func_1778() /* ty=Tensor[(3, 14, 10), float64] */;
  (%1320, %1321)
}

def @func_9493(%var_9492: Tensor[(54, 12), int8]) -> (Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), float32], Tensor[(8, 4, 16), float64], Tensor[(98, 10), int32], Tensor[(54, 12), int8]) {
  %1331 = fn (%var_9489: Tensor[(54, 12), int8]) -> (Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), float32], Tensor[(8, 4, 16), float64], Tensor[(98, 10), int32], Tensor[(54, 12), int8]) {
    %1322 = @func_4397() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64]) */;
    %1323 = cast(meta[relay.Constant][54] /* ty=Tensor[(98, 10), int32] */, dtype="int32") /* ty=Tensor[(98, 10), int32] */;
    %1324 = cast(%var_9489, dtype="int8") /* ty=Tensor[(54, 12), int8] */;
    %1325 = reshape(%1323, newshape=[980]) /* ty=Tensor[(980), int32] */;
    %1326 = reshape(%1324, newshape=[648]) /* ty=Tensor[(648), int8] */;
    %1327 = @func_5931(%1325, %1326) /* ty=(Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), float64], Tensor[(980), int32], Tensor[(648), int8], Tensor[(3, 14, 10), float32]) */;
    %1328 = @func_3645() /* ty=Tensor[(8, 4, 16), float64] */;
    %1329 = %1322.0;
    %1330 = %1327.0;
    (%1328, %1329, %1330, meta[relay.Constant][54] /* ty=Tensor[(98, 10), int32] */, %var_9489)
  };
  %1331(%var_9492) /* ty=(Tensor[(8, 4, 16), float64], Tensor[(3, 14, 10), float32], Tensor[(8, 4, 16), float64], Tensor[(98, 10), int32], Tensor[(54, 12), int8]) */
}

def @func_6998(%var_6997: Tensor[(15, 13, 9), float64]) -> (Tensor[(8, 4, 16), float32], Tensor[(15, 13, 9), float32]) {
  %1337 = fn (%var_6954: Tensor[(15, 13, 9), float64]) -> (Tensor[(8, 4, 16), float32], Tensor[(15, 13, 9), float32]) {
    %1332 = @func_5356() /* ty=Tensor[(1, 13, 9), float64] */;
    %1333 = cast(%1332, dtype="float32") /* ty=Tensor[(1, 13, 9), float32] */;
    %1334 = cast(%var_6954, dtype="float32") /* ty=Tensor[(15, 13, 9), float32] */;
    %1335 = @func_3923() /* ty=Tensor[(8, 4, 16), float32] */;
    %1336 = mod(%1333, %1334) /* ty=Tensor[(15, 13, 9), float32] */;
    (%1335, %1336)
  };
  %1337(%var_6997) /* ty=(Tensor[(8, 4, 16), float32], Tensor[(15, 13, 9), float32]) */
}

def @func_7762() -> (Tensor[(8, 4, 16), float64], Tensor[(10, 42), uint8]) {
  @func_7760() /* ty=(Tensor[(8, 4, 16), float64], Tensor[(10, 42), uint8]) */
}

def @func_2391() -> (Tensor[(512), float64], Tensor[(3, 14, 10), float32]) {
  %1342 = fn () -> (Tensor[(512), float64], Tensor[(3, 14, 10), float32]) {
    %1338 = @func_2152() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float64], Tensor[(8, 4, 16), float64], Tensor[(512), float64]) */;
    %1339 = @func_1422() /* ty=(Tensor[(3, 14, 10), float32],) */;
    %1340 = %1338.3;
    %1341 = %1339.0;
    (%1340, %1341)
  };
  %1342() /* ty=(Tensor[(512), float64], Tensor[(3, 14, 10), float32]) */
}

def @func_4508() -> (Tensor[(3, 14, 10), float32],) {
  %1344 = fn () -> (Tensor[(3, 14, 10), float32],) {
    %1343 = @func_2953() /* ty=Tensor[(3, 14, 10), float32] */;
    (%1343,)
  };
  %1344() /* ty=(Tensor[(3, 14, 10), float32],) */
}

def @func_843() -> (Tensor[(3, 14, 10), float64],) {
  %1346 = fn () -> (Tensor[(3, 14, 10), float64],) {
    %1345 = @func_813() /* ty=Tensor[(3, 14, 10), float64] */;
    (%1345,)
  };
  %1346() /* ty=(Tensor[(3, 14, 10), float64],) */
}

def @func_4155() -> (Tensor[(1, 13, 9), float64],) {
  @func_4153() /* ty=(Tensor[(1, 13, 9), float64],) */
}

def @func_11993() -> (Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) {
  @func_11991() /* ty=(Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32], Tensor[(3, 14, 10), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen698/build/output.py", line 4859, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:54:51] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

