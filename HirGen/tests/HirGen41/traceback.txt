==========mod==========
#[version = "0.0.5"]
def @func_4415() -> (Tensor[(8, 2, 7), float32],) {
  %0 = @func_4154() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(8, 2, 7), int16], Tensor[(112), int16], Tensor[(7, 16, 8), bool]) */;
  %1 = %0.1;
  %2 = cast(%1, dtype="float32") /* ty=Tensor[(8, 2, 7), float32] */;
  %3 = cosh(%2) /* ty=Tensor[(8, 2, 7), float32] */;
  (%3,)
}

def @func_3669(%var_3651: Tensor[(16, 13, 7), int32]) -> (Tensor[(7, 16, 8), uint64], Tensor[(16, 13, 7), int32]) {
  %4 = @func_2164() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), uint64], Tensor[(112), int16]) */;
  %5 = cast(meta[relay.Constant][0] /* ty=Tensor[(16, 13, 7), int32] */, dtype="int32") /* ty=Tensor[(16, 13, 7), int32] */;
  %6 = shape_of(%var_3651, dtype="int32") /* ty=Tensor[(3), int32] */;
  %7 = cast(%var_3651, dtype="int32") /* ty=Tensor[(16, 13, 7), int32] */;
  %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %9 = bitwise_xor(%7, %8) /* ty=Tensor[(16, 13, 7), int32] */;
  %10 = cast(meta[relay.Constant][0] /* ty=Tensor[(16, 13, 7), int32] */, dtype="int32") /* ty=Tensor[(16, 13, 7), int32] */;
  %11 = shape_of(%9, dtype="int32") /* ty=Tensor[(3), int32] */;
  %12 = cast(%9, dtype="int32") /* ty=Tensor[(16, 13, 7), int32] */;
  %13 = dyn.reshape(%10, %11, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %14 = %4.1;
  %15 = logical_xor(%12, %13) /* ty=Tensor[(16, 13, 7), int32] */;
  (%14, %15)
}

def @func_1944() -> (Tensor[(7, 16, 8), float64],) {
  %16 = @func_1602() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(11, 4, 10), float64], Tensor[(440), float64]) */;
  %17 = %16.1;
  (%17,)
}

def @func_3857(%var_3834: Tensor[(11, 4, 10), float64]) -> (Tensor[(11, 4, 10), int32], Tensor[(896), float32]) {
  %18 = @func_3781() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(112), uint8], Tensor[(11, 4, 10), float64], Tensor[(440), float64], Tensor[(7, 16, 8), float32]) */;
  %19 = %18.2;
  %20 = cast(%var_3834, dtype="float32") /* ty=Tensor[(11, 4, 10), float32] */;
  %21 = shape_of(%19, dtype="int32") /* ty=Tensor[(3), int32] */;
  %22 = cast(%19, dtype="float32") /* ty=Tensor[(11, 4, 10), float32] */;
  %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %24 = floor_mod(%22, %23) /* ty=Tensor[(11, 4, 10), float32] */;
  %25 = cast(%19, dtype="int32") /* ty=Tensor[(11, 4, 10), int32] */;
  %26 = shape_of(%24, dtype="int32") /* ty=Tensor[(3), int32] */;
  %27 = cast(%24, dtype="int32") /* ty=Tensor[(11, 4, 10), int32] */;
  %28 = dyn.reshape(%25, %26, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %29 = cast(meta[relay.Constant][1] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
  %30 = reshape(%29, newshape=[7, 16, 8]) /* ty=Tensor[(7, 16, 8), float64] */;
  %31 = @func_3170(%30) /* ty=(Tensor[(7, 16, 8), float64],) */;
  %32 = %31.0;
  %33 = cast(%32, dtype="bool") /* ty=Tensor[(7, 16, 8), bool] */;
  %34 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(896), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %35 = cast(meta[relay.Constant][1] /* ty=Tensor[(896), float64] */, dtype="bool") /* ty=Tensor[(896), bool] */;
  %36 = dyn.reshape(%33, %34, newshape=[]) /* ty=Tensor[(?), bool] */;
  %37 = logical_and(%35, %36) /* ty=Tensor[(896), bool] */;
  %38 = @func_1578() /* ty=(Tensor[(7, 16, 8), float32], Tensor[(7, 16, 8), float64]) */;
  %39 = %38.0;
  %40 = cast(%39, dtype="float32") /* ty=Tensor[(7, 16, 8), float32] */;
  %41 = shape_of(%37, dtype="int32") /* ty=Tensor[(1), int32] */;
  %42 = cast(%37, dtype="float32") /* ty=Tensor[(896), float32] */;
  %43 = dyn.reshape(%40, %41, newshape=[]) /* ty=Tensor[(?), float32] */;
  %44 = minimum(%27, %28) /* ty=Tensor[(11, 4, 10), int32] */;
  %45 = divide(%42, %43) /* ty=Tensor[(896), float32] */;
  (%44, %45)
}

def @func_2634() -> Tensor[(7, 16, 8), float64] {
  %46 = @func_2075() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64]) */;
  %46.0
}

def @func_2857(%var_2749: Tensor[(9, 11, 10), float64], %var_2783: Tensor[(1, 216), float64], %var_2784: Tensor[(112), int16]) -> (Tensor[(6, 13, 11), float64], Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(9, 3, 8), float64], Tensor[(1, 216), float64], Tensor[(112), int16], Tensor[(7, 16, 8), float64], Tensor[(9, 11, 10), uint8], Tensor[(7, 16, 8), float64], Tensor[(9, 11, 10), float64], Tensor[(7, 16, 8), float64], Tensor[(9, 11, 10), float64], Tensor[(9, 11, 10), int32]) {
  %47 = @func_2661() /* ty=(Tensor[(6, 13, 11), float64], Tensor[(7, 16, 8), float32]) */;
  %48 = @func_1616() /* ty=(Tensor[(7, 16, 8), float64],) */;
  %49 = @func_1944() /* ty=(Tensor[(7, 16, 8), float64],) */;
  %50 = cast(%var_2783, dtype="float64") /* ty=Tensor[(1, 216), float64] */;
  %51 = cast(%var_2784, dtype="int16") /* ty=Tensor[(112), int16] */;
  %52 = reshape(%50, newshape=[9, 3, 8]) /* ty=Tensor[(9, 3, 8), float64] */;
  %53 = reshape(%51, newshape=[112]) /* ty=Tensor[(112), int16] */;
  %54 = @func_1082(%52, %53) /* ty=(Tensor[(9, 3, 8), float64], Tensor[(8, 2, 7), int16], Tensor[(112), int16], Tensor[(8, 2, 7), int16]) */;
  %55 = cast(%var_2749, dtype="float64") /* ty=Tensor[(9, 11, 10), float64] */;
  %56 = acosh(%55) /* ty=Tensor[(9, 11, 10), float64] */;
  %57 = cast(%var_2749, dtype="float64") /* ty=Tensor[(9, 11, 10), float64] */;
  %58 = shape_of(%56, dtype="int32") /* ty=Tensor[(3), int32] */;
  %59 = cast(%56, dtype="float64") /* ty=Tensor[(9, 11, 10), float64] */;
  %60 = dyn.reshape(%57, %58, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %61 = mod(%59, %60) /* ty=Tensor[(9, 11, 10), float64] */;
  %62 = cast(%61, dtype="int32") /* ty=Tensor[(9, 11, 10), int32] */;
  %63 = shape_of(%56, dtype="int32") /* ty=Tensor[(3), int32] */;
  %64 = cast(%56, dtype="int32") /* ty=Tensor[(9, 11, 10), int32] */;
  %65 = dyn.reshape(%62, %63, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %66 = right_shift(%64, %65) /* ty=Tensor[(9, 11, 10), int32] */;
  %67 = cast(%66, dtype="uint8") /* ty=Tensor[(9, 11, 10), uint8] */;
  %68 = shape_of(%56, dtype="int32") /* ty=Tensor[(3), int32] */;
  %69 = cast(%56, dtype="uint8") /* ty=Tensor[(9, 11, 10), uint8] */;
  %70 = dyn.reshape(%67, %68, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %71 = @func_1926() /* ty=(Tensor[(7, 16, 8), float64],) */;
  %72 = cast(%66, dtype="float64") /* ty=Tensor[(9, 11, 10), float64] */;
  %73 = acos(%72) /* ty=Tensor[(9, 11, 10), float64] */;
  %74 = cast(%73, dtype="float64") /* ty=Tensor[(9, 11, 10), float64] */;
  %75 = @func_1522() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(112), int16]) */;
  %76 = cast(%73, dtype="float64") /* ty=Tensor[(9, 11, 10), float64] */;
  %77 = cast(%61, dtype="int32") /* ty=Tensor[(9, 11, 10), int32] */;
  %78 = shape_of(%73, dtype="int32") /* ty=Tensor[(3), int32] */;
  %79 = cast(%73, dtype="int32") /* ty=Tensor[(9, 11, 10), int32] */;
  %80 = dyn.reshape(%77, %78, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %81 = %47.0;
  %82 = %48.0;
  %83 = %49.0;
  %84 = %54.0;
  %85 = @func_1124() /* ty=Tensor[(7, 16, 8), float64] */;
  %86 = multiply(%69, %70) /* ty=Tensor[(9, 11, 10), uint8] */;
  %87 = %71.0;
  %88 = tan(%74) /* ty=Tensor[(9, 11, 10), float64] */;
  %89 = %75.1;
  %90 = cosh(%76) /* ty=Tensor[(9, 11, 10), float64] */;
  %91 = bitwise_or(%79, %80) /* ty=Tensor[(9, 11, 10), int32] */;
  (%81, %82, %83, %84, %var_2783, %var_2784, %85, %86, %87, %88, %89, %90, %91)
}

def @func_2021(%var_2016: Tensor[(7, 16, 8), float64]) -> (Tensor[(7, 16, 8), bool],) {
  %92 = @func_1944() /* ty=(Tensor[(7, 16, 8), float64],) */;
  %93 = %92.0;
  %94 = cast(%var_2016, dtype="bool") /* ty=Tensor[(7, 16, 8), bool] */;
  %95 = shape_of(%93, dtype="int32") /* ty=Tensor[(3), int32] */;
  %96 = cast(%93, dtype="bool") /* ty=Tensor[(7, 16, 8), bool] */;
  %97 = dyn.reshape(%94, %95, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %98 = equal(%96, %97) /* ty=Tensor[(7, 16, 8), bool] */;
  (%98,)
}

def @func_3572(%var_3545: Tensor[(384), uint32], %var_3546: Tensor[(112, 8), bool], %var_3553: Tensor[(7, 112), float32]) -> (Tensor[(112), int16], Tensor[(384), uint32], Tensor[(112, 8), bool], Tensor[(7, 112), float64]) {
  %99 = @func_2164() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), uint64], Tensor[(112), int16]) */;
  %100 = cast(%var_3545, dtype="uint32") /* ty=Tensor[(384), uint32] */;
  %101 = %99.2;
  %102 = cast(%101, dtype="int16") /* ty=Tensor[(112), int16] */;
  %103 = cast(%var_3546, dtype="bool") /* ty=Tensor[(112, 8), bool] */;
  %104 = reshape(%100, newshape=[384]) /* ty=Tensor[(384), uint32] */;
  %105 = reshape(%102, newshape=[1, 112]) /* ty=Tensor[(1, 112), int16] */;
  %106 = reshape(%103, newshape=[7, 16, 8]) /* ty=Tensor[(7, 16, 8), bool] */;
  %107 = @func_2257(%104, %105, %106) /* ty=(Tensor[(7, 16, 8), uint8], Tensor[(4, 6, 16), int8], Tensor[(384), uint32], Tensor[(7, 16, 8), float64], Tensor[(1, 112), int16], Tensor[(7, 16, 8), int64], Tensor[(7, 16, 8), bool], Tensor[(7, 16, 8), uint64], Tensor[(8, 2, 7), int16]) */;
  %108 = %107.4;
  %109 = cast(%108, dtype="float32") /* ty=Tensor[(1, 112), float32] */;
  %110 = erf(%109) /* ty=Tensor[(1, 112), float32] */;
  %111 = cast(%110, dtype="float64") /* ty=Tensor[(1, 112), float64] */;
  %112 = cast(%var_3553, dtype="float64") /* ty=Tensor[(7, 112), float64] */;
  %113 = floor_divide(%111, %112) /* ty=Tensor[(7, 112), float64] */;
  (%101, %var_3545, %var_3546, %113)
}

def @func_6237() -> (Tensor[(11, 15, 5), int8], Tensor[(7, 16, 8), bool], Tensor[(224, 4), float64]) {
  %114 = cast(meta[relay.Constant][3] /* ty=Tensor[(11, 15, 5), int8] */, dtype="int8") /* ty=Tensor[(11, 15, 5), int8] */;
  %115 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(11, 15, 5), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %116 = cast(meta[relay.Constant][2] /* ty=Tensor[(11, 15, 5), int8] */, dtype="int8") /* ty=Tensor[(11, 15, 5), int8] */;
  %117 = dyn.reshape(%114, %115, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %118 = cast(meta[relay.Constant][4] /* ty=Tensor[(224, 4), float64] */, dtype="float64") /* ty=Tensor[(224, 4), float64] */;
  %119 = reshape(%118, newshape=[7, 16, 8]) /* ty=Tensor[(7, 16, 8), float64] */;
  %120 = @func_2284(%119) /* ty=(Tensor[(7, 16, 8), bool],) */;
  %121 = bitwise_xor(%116, %117) /* ty=Tensor[(11, 15, 5), int8] */;
  %122 = %120.0;
  (%121, %122, meta[relay.Constant][4] /* ty=Tensor[(224, 4), float64] */)
}

def @func_2164() -> (Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), uint64], Tensor[(112), int16]) {
  %123 = @func_1926() /* ty=(Tensor[(7, 16, 8), float64],) */;
  %124 = cast(meta[relay.Constant][5] /* ty=Tensor[(112), int16] */, dtype="int16") /* ty=Tensor[(112), int16] */;
  %125 = reshape(%124, newshape=[112]) /* ty=Tensor[(112), int16] */;
  %126 = @func_1801(%125) /* ty=(Tensor[(7, 16, 8), float32], Tensor[(7, 16, 8), uint64], Tensor[(112), int16]) */;
  %127 = %123.0;
  %128 = %126.1;
  (%127, %128, meta[relay.Constant][5] /* ty=Tensor[(112), int16] */)
}

def @func_2284(%var_2279: Tensor[(7, 16, 8), float64]) -> (Tensor[(7, 16, 8), bool],) {
  %129 = @func_1602() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(11, 4, 10), float64], Tensor[(440), float64]) */;
  %130 = %129.1;
  %131 = cast(%var_2279, dtype="bool") /* ty=Tensor[(7, 16, 8), bool] */;
  %132 = shape_of(%130, dtype="int32") /* ty=Tensor[(3), int32] */;
  %133 = cast(%130, dtype="bool") /* ty=Tensor[(7, 16, 8), bool] */;
  %134 = dyn.reshape(%131, %132, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %135 = logical_or(%133, %134) /* ty=Tensor[(7, 16, 8), bool] */;
  (%135,)
}

def @func_1082(%var_1057: Tensor[(9, 3, 8), float64], %var_1077: Tensor[(112), int16]) -> (Tensor[(9, 3, 8), float64], Tensor[(8, 2, 7), int16], Tensor[(112), int16], Tensor[(8, 2, 7), int16]) {
  %136 = cast(%var_1057, dtype="float64") /* ty=Tensor[(9, 3, 8), float64] */;
  %137 = cast(%var_1077, dtype="int16") /* ty=Tensor[(112), int16] */;
  %138 = reshape(%137, newshape=[8, 2, 7]) /* ty=Tensor[(8, 2, 7), int16] */;
  %139 = @func_1042(%138) /* ty=(Tensor[(8, 2, 7), int16], Tensor[(15, 7, 8), float64], Tensor[(840), float32]) */;
  %140 = %139.0;
  %141 = cast(%140, dtype="int16") /* ty=Tensor[(8, 2, 7), int16] */;
  %142 = reshape(%141, newshape=[8, 2, 7]) /* ty=Tensor[(8, 2, 7), int16] */;
  %143 = @func_1042(%142) /* ty=(Tensor[(8, 2, 7), int16], Tensor[(15, 7, 8), float64], Tensor[(840), float32]) */;
  %144 = erf(%136) /* ty=Tensor[(9, 3, 8), float64] */;
  %145 = %143.0;
  (%144, %140, %var_1077, %145)
}

def @func_1241(%var_1224: Tensor[(7, 16, 8), float64], %var_1233: Tensor[(1, 112), int16]) -> (Tensor[(7, 16, 8), uint64], Tensor[(8, 2, 7), int16], Tensor[(216), float64], Tensor[(1, 112), int16]) {
  %146 = @func_1124() /* ty=Tensor[(7, 16, 8), float64] */;
  %147 = cast(%var_1224, dtype="uint64") /* ty=Tensor[(7, 16, 8), uint64] */;
  %148 = shape_of(%146, dtype="int32") /* ty=Tensor[(3), int32] */;
  %149 = cast(%146, dtype="uint64") /* ty=Tensor[(7, 16, 8), uint64] */;
  %150 = dyn.reshape(%147, %148, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %151 = cast(meta[relay.Constant][6] /* ty=Tensor[(216), float64] */, dtype="float64") /* ty=Tensor[(216), float64] */;
  %152 = cast(%var_1233, dtype="int16") /* ty=Tensor[(1, 112), int16] */;
  %153 = reshape(%151, newshape=[9, 3, 8]) /* ty=Tensor[(9, 3, 8), float64] */;
  %154 = reshape(%152, newshape=[112]) /* ty=Tensor[(112), int16] */;
  %155 = @func_1082(%153, %154) /* ty=(Tensor[(9, 3, 8), float64], Tensor[(8, 2, 7), int16], Tensor[(112), int16], Tensor[(8, 2, 7), int16]) */;
  %156 = bitwise_xor(%149, %150) /* ty=Tensor[(7, 16, 8), uint64] */;
  %157 = %155.3;
  (%156, %157, meta[relay.Constant][6] /* ty=Tensor[(216), float64] */, %var_1233)
}

def @func_4515(%var_4506: Tensor[(9, 6, 6), uint16], %var_4507: Tensor[(9, 6, 6), uint16]) -> (Tensor[(9, 6, 6), uint16], Tensor[(9, 6, 6), float32]) {
  %158 = cast(%var_4507, dtype="uint16") /* ty=Tensor[(9, 6, 6), uint16] */;
  %159 = shape_of(%var_4506, dtype="int32") /* ty=Tensor[(3), int32] */;
  %160 = cast(%var_4506, dtype="uint16") /* ty=Tensor[(9, 6, 6), uint16] */;
  %161 = dyn.reshape(%158, %159, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %162 = cast(%var_4506, dtype="float32") /* ty=Tensor[(9, 6, 6), float32] */;
  %163 = minimum(%160, %161) /* ty=Tensor[(9, 6, 6), uint16] */;
  %164 = log10(%162) /* ty=Tensor[(9, 6, 6), float32] */;
  (%163, %164)
}

def @func_1655(%var_1645: Tensor[(4, 28), int16], %var_1648: Tensor[(7, 16, 8), float32]) -> (Tensor[(8, 2, 7), int16], Tensor[(4, 28), int16], Tensor[(7, 16, 8), float64]) {
  %165 = cast(%var_1645, dtype="int16") /* ty=Tensor[(4, 28), int16] */;
  %166 = reshape(%165, newshape=[8, 2, 7]) /* ty=Tensor[(8, 2, 7), int16] */;
  %167 = @func_1042(%166) /* ty=(Tensor[(8, 2, 7), int16], Tensor[(15, 7, 8), float64], Tensor[(840), float32]) */;
  %168 = @func_1616() /* ty=(Tensor[(7, 16, 8), float64],) */;
  %169 = %168.0;
  %170 = cast(%169, dtype="float32") /* ty=Tensor[(7, 16, 8), float32] */;
  %171 = sin(%170) /* ty=Tensor[(7, 16, 8), float32] */;
  %172 = cast(%var_1648, dtype="float64") /* ty=Tensor[(7, 16, 8), float64] */;
  %173 = shape_of(%171, dtype="int32") /* ty=Tensor[(3), int32] */;
  %174 = cast(%171, dtype="float64") /* ty=Tensor[(7, 16, 8), float64] */;
  %175 = dyn.reshape(%172, %173, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %176 = %167.0;
  %177 = mod(%174, %175) /* ty=Tensor[(7, 16, 8), float64] */;
  (%176, %var_1645, %177)
}

def @func_3636(%var_3593: Tensor[(2, 5, 4), float32]) -> (Tensor[(2, 5, 4), float32], Tensor[(15, 7, 8), float64], Tensor[(12, 70), float32]) {
  %178 = cast(%var_3593, dtype="float32") /* ty=Tensor[(2, 5, 4), float32] */;
  %179 = cast(meta[relay.Constant][7] /* ty=Tensor[(12, 70), float32] */, dtype="float32") /* ty=Tensor[(12, 70), float32] */;
  %180 = reshape(%179, newshape=[15, 7, 8]) /* ty=Tensor[(15, 7, 8), float32] */;
  %181 = log10(%178) /* ty=Tensor[(2, 5, 4), float32] */;
  %182 = @func_273(%180) /* ty=Tensor[(15, 7, 8), float64] */;
  (%181, %182, meta[relay.Constant][7] /* ty=Tensor[(12, 70), float32] */)
}

def @func_4865(%var_4835: Tensor[(14, 10, 9), float32]) -> (Tensor[(14, 10, 9), bool], Tensor[(7, 16, 8), float64]) {
  %183 = cast(%var_4835, dtype="float32") /* ty=Tensor[(14, 10, 9), float32] */;
  %184 = asinh(%183) /* ty=Tensor[(14, 10, 9), float32] */;
  %185 = cast(%var_4835, dtype="bool") /* ty=Tensor[(14, 10, 9), bool] */;
  %186 = shape_of(%184, dtype="int32") /* ty=Tensor[(3), int32] */;
  %187 = cast(%184, dtype="bool") /* ty=Tensor[(14, 10, 9), bool] */;
  %188 = dyn.reshape(%185, %186, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %189 = @func_3270() /* ty=(Tensor[(7, 16, 8), uint32],) */;
  %190 = %189.0;
  %191 = cast(%190, dtype="float64") /* ty=Tensor[(7, 16, 8), float64] */;
  %192 = not_equal(%187, %188) /* ty=Tensor[(14, 10, 9), bool] */;
  %193 = log10(%191) /* ty=Tensor[(7, 16, 8), float64] */;
  (%192, %193)
}

def @func_6517(%var_6466: Tensor[(6, 3, 6), float64], %var_6467: Tensor[(6, 3, 6), float64]) -> (Tensor[(896), float32], Tensor[(220, 2), float64], Tensor[(7, 16, 8), float64], Tensor[(6, 3, 6), uint8], Tensor[(6, 3, 6), float32], Tensor[(112), int16], Tensor[(384), uint32], Tensor[(784), float32], Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), uint32]) {
  %194 = cast(meta[relay.Constant][8] /* ty=Tensor[(220, 2), float64] */, dtype="float64") /* ty=Tensor[(220, 2), float64] */;
  %195 = reshape(%194, newshape=[11, 4, 10]) /* ty=Tensor[(11, 4, 10), float64] */;
  %196 = @func_3857(%195) /* ty=(Tensor[(11, 4, 10), int32], Tensor[(896), float32]) */;
  %197 = @func_2075() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64]) */;
  %198 = cast(%var_6467, dtype="bool") /* ty=Tensor[(6, 3, 6), bool] */;
  %199 = shape_of(%var_6466, dtype="int32") /* ty=Tensor[(3), int32] */;
  %200 = cast(%var_6466, dtype="bool") /* ty=Tensor[(6, 3, 6), bool] */;
  %201 = dyn.reshape(%198, %199, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %202 = not_equal(%200, %201) /* ty=Tensor[(6, 3, 6), bool] */;
  %203 = cast(%202, dtype="uint8") /* ty=Tensor[(6, 3, 6), uint8] */;
  %204 = shape_of(%var_6466, dtype="int32") /* ty=Tensor[(3), int32] */;
  %205 = cast(%var_6466, dtype="uint8") /* ty=Tensor[(6, 3, 6), uint8] */;
  %206 = dyn.reshape(%203, %204, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %207 = cast(%var_6467, dtype="float32") /* ty=Tensor[(6, 3, 6), float32] */;
  %208 = cast(meta[relay.Constant][9] /* ty=Tensor[(384), uint32] */, dtype="uint32") /* ty=Tensor[(384), uint32] */;
  %209 = %197.1;
  %210 = cast(%209, dtype="bool") /* ty=Tensor[(7, 16, 8), bool] */;
  %211 = cast(meta[relay.Constant][10] /* ty=Tensor[(784), float32] */, dtype="float32") /* ty=Tensor[(784), float32] */;
  %212 = reshape(%208, newshape=[384]) /* ty=Tensor[(384), uint32] */;
  %213 = reshape(%210, newshape=[112, 8]) /* ty=Tensor[(112, 8), bool] */;
  %214 = reshape(%211, newshape=[7, 112]) /* ty=Tensor[(7, 112), float32] */;
  %215 = @func_3572(%212, %213, %214) /* ty=(Tensor[(112), int16], Tensor[(384), uint32], Tensor[(112, 8), bool], Tensor[(7, 112), float64]) */;
  %216 = @func_4021() /* ty=(Tensor[(7, 16, 8), float64],) */;
  %217 = @func_4651() /* ty=(Tensor[(7, 16, 8), uint32],) */;
  %218 = %196.1;
  %219 = multiply(%205, %206) /* ty=Tensor[(6, 3, 6), uint8] */;
  %220 = tan(%207) /* ty=Tensor[(6, 3, 6), float32] */;
  %221 = %215.0;
  %222 = %216.0;
  %223 = %217.0;
  (%218, meta[relay.Constant][8] /* ty=Tensor[(220, 2), float64] */, %209, %219, %220, %221, meta[relay.Constant][9] /* ty=Tensor[(384), uint32] */, meta[relay.Constant][10] /* ty=Tensor[(784), float32] */, %222, %223)
}

def @func_6701() -> Tensor[(8, 2, 7), float32] {
  %224 = @func_4415() /* ty=(Tensor[(8, 2, 7), float32],) */;
  %224.0
}

def @func_2661() -> (Tensor[(6, 13, 11), float64], Tensor[(7, 16, 8), float32]) {
  %225 = cast(meta[relay.Constant][11] /* ty=Tensor[(6, 13, 11), float64] */, dtype="float64") /* ty=Tensor[(6, 13, 11), float64] */;
  %226 = @func_1578() /* ty=(Tensor[(7, 16, 8), float32], Tensor[(7, 16, 8), float64]) */;
  %227 = sinh(%225) /* ty=Tensor[(6, 13, 11), float64] */;
  %228 = %226.0;
  (%227, %228)
}

def @func_1578() -> (Tensor[(7, 16, 8), float32], Tensor[(7, 16, 8), float64]) {
  %229 = @func_1124() /* ty=Tensor[(7, 16, 8), float64] */;
  %230 = cast(meta[relay.Constant][12] /* ty=Tensor[(7, 16, 8), float64] */, dtype="float32") /* ty=Tensor[(7, 16, 8), float32] */;
  %231 = shape_of(%229, dtype="int32") /* ty=Tensor[(3), int32] */;
  %232 = cast(%229, dtype="float32") /* ty=Tensor[(7, 16, 8), float32] */;
  %233 = dyn.reshape(%230, %231, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %234 = cast(meta[relay.Constant][12] /* ty=Tensor[(7, 16, 8), float64] */, dtype="float64") /* ty=Tensor[(7, 16, 8), float64] */;
  %235 = floor_divide(%232, %233) /* ty=Tensor[(7, 16, 8), float32] */;
  %236 = atan(%234) /* ty=Tensor[(7, 16, 8), float64] */;
  (%235, %236)
}

def @func_6428() -> (Tensor[(15, 13, 4), float32],) {
  %237 = cast(meta[relay.Constant][13] /* ty=uint32 */, dtype="bool") /* ty=bool */;
  %238 = cast(meta[relay.Constant][14] /* ty=Tensor[(15, 13, 4), uint32] */, dtype="bool") /* ty=Tensor[(15, 13, 4), bool] */;
  %239 = equal(%237, %238) /* ty=Tensor[(15, 13, 4), bool] */;
  %240 = cast(%239, dtype="float32") /* ty=Tensor[(15, 13, 4), float32] */;
  %241 = sigmoid(%240) /* ty=Tensor[(15, 13, 4), float32] */;
  (%241,)
}

def @func_5576(%var_5571: int8, %var_5572: Tensor[(1, 6, 15), int8]) -> Tensor[(1, 6, 15), int8] {
  %242 = cast(%var_5571, dtype="int8") /* ty=int8 */;
  %243 = cast(%var_5572, dtype="int8") /* ty=Tensor[(1, 6, 15), int8] */;
  add(%242, %243) /* ty=Tensor[(1, 6, 15), int8] */
}

def @func_4622() -> (Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64]) {
  %244 = @func_3088() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64]) */;
  %245 = @func_1616() /* ty=(Tensor[(7, 16, 8), float64],) */;
  %246 = %244.0;
  %247 = %245.0;
  (%246, %247)
}

def @func_6810() -> (Tensor[(7, 16, 8), float32],) {
  %248 = @func_2164() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), uint64], Tensor[(112), int16]) */;
  %249 = %248.0;
  %250 = cast(%249, dtype="float32") /* ty=Tensor[(7, 16, 8), float32] */;
  %251 = log(%250) /* ty=Tensor[(7, 16, 8), float32] */;
  (%251,)
}

def @func_4021() -> (Tensor[(7, 16, 8), float64],) {
  %252 = @func_1926() /* ty=(Tensor[(7, 16, 8), float64],) */;
  %253 = %252.0;
  (%253,)
}

def @func_5355(%var_5342: Tensor[(7, 3, 12), float64]) -> Tensor[(7, 3, 12), float64] {
  %254 = cast(%var_5342, dtype="float64") /* ty=Tensor[(7, 3, 12), float64] */;
  cosh(%254) /* ty=Tensor[(7, 3, 12), float64] */
}

def @func_3270() -> (Tensor[(7, 16, 8), uint32],) {
  %255 = @func_3193() /* ty=(Tensor[(7, 16, 8), float64],) */;
  %256 = %255.0;
  %257 = @func_3088() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64]) */;
  %258 = %257.0;
  %259 = cast(%258, dtype="uint32") /* ty=Tensor[(7, 16, 8), uint32] */;
  %260 = shape_of(%256, dtype="int32") /* ty=Tensor[(3), int32] */;
  %261 = cast(%256, dtype="uint32") /* ty=Tensor[(7, 16, 8), uint32] */;
  %262 = dyn.reshape(%259, %260, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %263 = bitwise_or(%261, %262) /* ty=Tensor[(7, 16, 8), uint32] */;
  (%263,)
}

def @func_3193() -> (Tensor[(7, 16, 8), float64],) {
  %264 = @func_1944() /* ty=(Tensor[(7, 16, 8), float64],) */;
  %265 = %264.0;
  (%265,)
}

def @func_2952(%var_2944: Tensor[(112), int16]) -> (Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(112), int16]) {
  %266 = @func_1522() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(112), int16]) */;
  %267 = cast(%var_2944, dtype="int16") /* ty=Tensor[(112), int16] */;
  %268 = reshape(%267, newshape=[112]) /* ty=Tensor[(112), int16] */;
  %269 = @func_2430(%268) /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), bool], Tensor[(112), int16]) */;
  %270 = %266.0;
  %271 = %269.0;
  (%270, %271, %var_2944)
}

def @func_1191(%var_1183: Tensor[(28, 4), int16]) -> (Tensor[(7, 16, 8), float64], Tensor[(8, 2, 7), int16], Tensor[(28, 4), int16]) {
  %272 = cast(%var_1183, dtype="int16") /* ty=Tensor[(28, 4), int16] */;
  %273 = reshape(%272, newshape=[8, 2, 7]) /* ty=Tensor[(8, 2, 7), int16] */;
  %274 = @func_1042(%273) /* ty=(Tensor[(8, 2, 7), int16], Tensor[(15, 7, 8), float64], Tensor[(840), float32]) */;
  %275 = @func_1124() /* ty=Tensor[(7, 16, 8), float64] */;
  %276 = %274.0;
  (%275, %276, %var_1183)
}

def @func_3999(%var_3988: Tensor[(112, 1), int16], %var_3997: Tensor[(1456), int32]) -> (Tensor[(7, 16, 8), float64], Tensor[(7, 112), float64], Tensor[(784), float32], Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float32], Tensor[(7, 16, 8), float64], Tensor[(112, 384), float32], Tensor[(7, 16, 8), uint64], Tensor[(1456), int32]) {
  %277 = @func_1616() /* ty=(Tensor[(7, 16, 8), float64],) */;
  %278 = cast(meta[relay.Constant][15] /* ty=Tensor[(384), uint32] */, dtype="uint32") /* ty=Tensor[(384), uint32] */;
  %279 = %277.0;
  %280 = cast(%279, dtype="bool") /* ty=Tensor[(7, 16, 8), bool] */;
  %281 = cast(meta[relay.Constant][16] /* ty=Tensor[(784), float32] */, dtype="float32") /* ty=Tensor[(784), float32] */;
  %282 = reshape(%278, newshape=[384]) /* ty=Tensor[(384), uint32] */;
  %283 = reshape(%280, newshape=[112, 8]) /* ty=Tensor[(112, 8), bool] */;
  %284 = reshape(%281, newshape=[7, 112]) /* ty=Tensor[(7, 112), float32] */;
  %285 = @func_3572(%282, %283, %284) /* ty=(Tensor[(112), int16], Tensor[(384), uint32], Tensor[(112, 8), bool], Tensor[(7, 112), float64]) */;
  %286 = @func_3193() /* ty=(Tensor[(7, 16, 8), float64],) */;
  %287 = @func_2455() /* ty=(Tensor[(7, 16, 8), float32],) */;
  %288 = cast(%var_3988, dtype="int16") /* ty=Tensor[(112, 1), int16] */;
  %289 = %286.0;
  %290 = cast(%289, dtype="float32") /* ty=Tensor[(7, 16, 8), float32] */;
  %291 = reshape(%288, newshape=[4, 28]) /* ty=Tensor[(4, 28), int16] */;
  %292 = reshape(%290, newshape=[7, 16, 8]) /* ty=Tensor[(7, 16, 8), float32] */;
  %293 = @func_1655(%291, %292) /* ty=(Tensor[(8, 2, 7), int16], Tensor[(4, 28), int16], Tensor[(7, 16, 8), float64]) */;
  %294 = cast(meta[relay.Constant][15] /* ty=Tensor[(384), uint32] */, dtype="float32") /* ty=Tensor[(384), float32] */;
  %295 = cast(%var_3988, dtype="float32") /* ty=Tensor[(112, 1), float32] */;
  %296 = cast(%var_3997, dtype="int32") /* ty=Tensor[(1456), int32] */;
  %297 = reshape(%296, newshape=[16, 13, 7]) /* ty=Tensor[(16, 13, 7), int32] */;
  %298 = @func_3669(%297) /* ty=(Tensor[(7, 16, 8), uint64], Tensor[(16, 13, 7), int32]) */;
  %299 = %285.3;
  %300 = %287.0;
  %301 = %293.2;
  %302 = floor_mod(%294, %295) /* ty=Tensor[(112, 384), float32] */;
  %303 = %298.0;
  (%279, %299, meta[relay.Constant][16] /* ty=Tensor[(784), float32] */, %289, %300, %301, %302, %303, %var_3997)
}

def @func_2430(%var_2425: Tensor[(112), int16]) -> (Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), bool], Tensor[(112), int16]) {
  %304 = @func_1678() /* ty=Tensor[(7, 16, 8), float64] */;
  %305 = cast(%304, dtype="float64") /* ty=Tensor[(7, 16, 8), float64] */;
  %306 = cast(%var_2425, dtype="int16") /* ty=Tensor[(112), int16] */;
  %307 = reshape(%305, newshape=[7, 16, 8]) /* ty=Tensor[(7, 16, 8), float64] */;
  %308 = reshape(%306, newshape=[112]) /* ty=Tensor[(112), int16] */;
  %309 = @func_1426(%307, %308) /* ty=(Tensor[(7, 16, 8), bool], Tensor[(7, 16, 8), int16], Tensor[(7, 16, 8), uint64], Tensor[(112), int16]) */;
  %310 = @func_1124() /* ty=Tensor[(7, 16, 8), float64] */;
  %311 = %309.0;
  (%310, %304, %311, %var_2425)
}

def @func_2075() -> (Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64]) {
  %312 = @func_1926() /* ty=(Tensor[(7, 16, 8), float64],) */;
  %313 = @func_1678() /* ty=Tensor[(7, 16, 8), float64] */;
  %314 = %312.0;
  (%313, %314)
}

def @func_3397() -> Tensor[(7, 16, 8), float64] {
  %315 = @func_1944() /* ty=(Tensor[(7, 16, 8), float64],) */;
  %316 = %315.0;
  %317 = cast(%316, dtype="float64") /* ty=Tensor[(7, 16, 8), float64] */;
  cosh(%317) /* ty=Tensor[(7, 16, 8), float64] */
}

def @func_6777(%var_6769: Tensor[(216), float64]) -> (Tensor[(15, 13, 4), float32], Tensor[(7, 16, 8), float64], Tensor[(216), float64], Tensor[(112), int16]) {
  %318 = @func_6428() /* ty=(Tensor[(15, 13, 4), float32],) */;
  %319 = cast(%var_6769, dtype="float64") /* ty=Tensor[(216), float64] */;
  %320 = cast(%var_6769, dtype="float64") /* ty=Tensor[(216), float64] */;
  %321 = cast(meta[relay.Constant][17] /* ty=Tensor[(112), int16] */, dtype="int16") /* ty=Tensor[(112), int16] */;
  %322 = reshape(%319, newshape=[9, 8, 3]) /* ty=Tensor[(9, 8, 3), float64] */;
  %323 = reshape(%320, newshape=[9, 8, 3]) /* ty=Tensor[(9, 8, 3), float64] */;
  %324 = reshape(%321, newshape=[112]) /* ty=Tensor[(112), int16] */;
  %325 = @func_1344(%322, %323, %324) /* ty=(Tensor[(9, 8, 3), bool], Tensor[(9, 8, 3), float32], Tensor[(7, 16, 8), float64], Tensor[(112), int16], Tensor[(8, 2, 7), int16]) */;
  %326 = %318.0;
  %327 = %325.2;
  (%326, %327, %var_6769, meta[relay.Constant][17] /* ty=Tensor[(112), int16] */)
}

def @func_1426(%var_1397: Tensor[(7, 16, 8), float64], %var_1422: Tensor[(112), int16]) -> (Tensor[(7, 16, 8), bool], Tensor[(7, 16, 8), int16], Tensor[(7, 16, 8), uint64], Tensor[(112), int16]) {
  %328 = @func_1124() /* ty=Tensor[(7, 16, 8), float64] */;
  %329 = cast(%var_1397, dtype="bool") /* ty=Tensor[(7, 16, 8), bool] */;
  %330 = shape_of(%328, dtype="int32") /* ty=Tensor[(3), int32] */;
  %331 = cast(%328, dtype="bool") /* ty=Tensor[(7, 16, 8), bool] */;
  %332 = dyn.reshape(%329, %330, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %333 = cast(%var_1397, dtype="int16") /* ty=Tensor[(7, 16, 8), int16] */;
  %334 = shape_of(%328, dtype="int32") /* ty=Tensor[(3), int32] */;
  %335 = cast(%328, dtype="int16") /* ty=Tensor[(7, 16, 8), int16] */;
  %336 = dyn.reshape(%333, %334, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %337 = logical_xor(%335, %336) /* ty=Tensor[(7, 16, 8), int16] */;
  %338 = cast(%337, dtype="float64") /* ty=Tensor[(7, 16, 8), float64] */;
  %339 = cast(%var_1422, dtype="int16") /* ty=Tensor[(112), int16] */;
  %340 = reshape(%338, newshape=[7, 16, 8]) /* ty=Tensor[(7, 16, 8), float64] */;
  %341 = reshape(%339, newshape=[1, 112]) /* ty=Tensor[(1, 112), int16] */;
  %342 = @func_1241(%340, %341) /* ty=(Tensor[(7, 16, 8), uint64], Tensor[(8, 2, 7), int16], Tensor[(216), float64], Tensor[(1, 112), int16]) */;
  %343 = less(%331, %332) /* ty=Tensor[(7, 16, 8), bool] */;
  %344 = %342.0;
  (%343, %337, %344, %var_1422)
}

def @func_5598() -> (Tensor[(7, 16, 8), uint32], Tensor[(7, 16, 8), float64]) {
  %345 = @func_4651() /* ty=(Tensor[(7, 16, 8), uint32],) */;
  %346 = @func_5523() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), bool]) */;
  %347 = %345.0;
  %348 = %346.0;
  (%347, %348)
}

def @func_4083(%var_4077: Tensor[(8, 10, 9), uint16]) -> (Tensor[(8, 10, 9), uint16], Tensor[(7, 16, 8), float64]) {
  %349 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 10, 9), uint16] */, dtype="uint16") /* ty=Tensor[(1, 10, 9), uint16] */;
  %350 = cast(%var_4077, dtype="uint16") /* ty=Tensor[(8, 10, 9), uint16] */;
  %351 = bitwise_xor(%349, %350) /* ty=Tensor[(8, 10, 9), uint16] */;
  %352 = @func_3313() /* ty=Tensor[(7, 16, 8), float64] */;
  (%351, %352)
}

def @func_1616() -> (Tensor[(7, 16, 8), float64],) {
  %353 = @func_1578() /* ty=(Tensor[(7, 16, 8), float32], Tensor[(7, 16, 8), float64]) */;
  %354 = %353.1;
  (%354,)
}

def @func_1846(%var_1840: Tensor[(7, 16, 8), float64]) -> (Tensor[(7, 16, 8), bool],) {
  %355 = @func_1602() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(11, 4, 10), float64], Tensor[(440), float64]) */;
  %356 = %355.0;
  %357 = cast(%var_1840, dtype="bool") /* ty=Tensor[(7, 16, 8), bool] */;
  %358 = shape_of(%356, dtype="int32") /* ty=Tensor[(3), int32] */;
  %359 = cast(%356, dtype="bool") /* ty=Tensor[(7, 16, 8), bool] */;
  %360 = dyn.reshape(%357, %358, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %361 = not_equal(%359, %360) /* ty=Tensor[(7, 16, 8), bool] */;
  (%361,)
}

def @func_6186() -> Tensor[(7, 16, 8), float64] {
  @func_2634() /* ty=Tensor[(7, 16, 8), float64] */
}

def @func_1042(%var_1010: Tensor[(8, 2, 7), int16]) -> (Tensor[(8, 2, 7), int16], Tensor[(15, 7, 8), float64], Tensor[(840), float32]) {
  %362 = cast(%var_1010, dtype="int16") /* ty=Tensor[(8, 2, 7), int16] */;
  %363 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(8, 2, 7), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %364 = cast(meta[relay.Constant][19] /* ty=Tensor[(8, 2, 7), int16] */, dtype="int16") /* ty=Tensor[(8, 2, 7), int16] */;
  %365 = dyn.reshape(%362, %363, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %366 = cast(meta[relay.Constant][20] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %367 = reshape(%366, newshape=[15, 7, 8]) /* ty=Tensor[(15, 7, 8), float32] */;
  %368 = bitwise_and(%364, %365) /* ty=Tensor[(8, 2, 7), int16] */;
  %369 = @func_273(%367) /* ty=Tensor[(15, 7, 8), float64] */;
  (%368, %369, meta[relay.Constant][20] /* ty=Tensor[(840), float32] */)
}

def @func_6409(%var_6379: Tensor[(3, 14, 1), int8], %var_6380: Tensor[(3, 14, 3), int8]) -> Tensor[(3, 14, 3), int16] {
  %370 = cast(%var_6379, dtype="int8") /* ty=Tensor[(3, 14, 1), int8] */;
  %371 = cast(%var_6380, dtype="int8") /* ty=Tensor[(3, 14, 3), int8] */;
  %372 = add(%370, %371) /* ty=Tensor[(3, 14, 3), int8] */;
  %373 = cast(%372, dtype="int16") /* ty=Tensor[(3, 14, 3), int16] */;
  %374 = cast(%var_6379, dtype="int16") /* ty=Tensor[(3, 14, 1), int16] */;
  bitwise_and(%373, %374) /* ty=Tensor[(3, 14, 3), int16] */
}

def @func_6542() -> (Tensor[(7, 16, 8), float64],) {
  %375 = @func_3397() /* ty=Tensor[(7, 16, 8), float64] */;
  (%375,)
}

def @func_1536(%var_1533: Tensor[(11, 4, 10), float64]) -> (Tensor[(11, 4, 10), float64],) {
  %376 = cast(%var_1533, dtype="float64") /* ty=Tensor[(11, 4, 10), float64] */;
  %377 = acos(%376) /* ty=Tensor[(11, 4, 10), float64] */;
  (%377,)
}

def @func_6592() -> (Tensor[(7, 16, 8), float64],) {
  %378 = @func_1124() /* ty=Tensor[(7, 16, 8), float64] */;
  (%378,)
}

def @func_4651() -> (Tensor[(7, 16, 8), uint32],) {
  %379 = @func_3270() /* ty=(Tensor[(7, 16, 8), uint32],) */;
  %380 = %379.0;
  (%380,)
}

def @func_3088() -> (Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64]) {
  %381 = @func_2075() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64]) */;
  %382 = @func_1616() /* ty=(Tensor[(7, 16, 8), float64],) */;
  %383 = %381.0;
  %384 = %382.0;
  (%383, %384)
}

def @func_5696() -> (Tensor[(7, 16, 8), float32],) {
  %385 = @func_2455() /* ty=(Tensor[(7, 16, 8), float32],) */;
  %386 = %385.0;
  (%386,)
}

def @func_1751(%var_1723: Tensor[(4, 6, 16), uint32], %var_1724: Tensor[(4, 6, 16), uint32]) -> (Tensor[(4, 6, 16), int8],) {
  %387 = cast(%var_1723, dtype="float64") /* ty=Tensor[(4, 6, 16), float64] */;
  %388 = asin(%387) /* ty=Tensor[(4, 6, 16), float64] */;
  %389 = cast(%var_1724, dtype="uint32") /* ty=Tensor[(4, 6, 16), uint32] */;
  %390 = shape_of(%var_1723, dtype="int32") /* ty=Tensor[(3), int32] */;
  %391 = cast(%var_1723, dtype="uint32") /* ty=Tensor[(4, 6, 16), uint32] */;
  %392 = dyn.reshape(%389, %390, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %393 = left_shift(%391, %392) /* ty=Tensor[(4, 6, 16), uint32] */;
  %394 = cast(%393, dtype="bool") /* ty=Tensor[(4, 6, 16), bool] */;
  %395 = shape_of(%388, dtype="int32") /* ty=Tensor[(3), int32] */;
  %396 = cast(%388, dtype="bool") /* ty=Tensor[(4, 6, 16), bool] */;
  %397 = dyn.reshape(%394, %395, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %398 = equal(%396, %397) /* ty=Tensor[(4, 6, 16), bool] */;
  %399 = cast(%393, dtype="int8") /* ty=Tensor[(4, 6, 16), int8] */;
  %400 = shape_of(%398, dtype="int32") /* ty=Tensor[(3), int32] */;
  %401 = cast(%398, dtype="int8") /* ty=Tensor[(4, 6, 16), int8] */;
  %402 = dyn.reshape(%399, %400, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %403 = minimum(%401, %402) /* ty=Tensor[(4, 6, 16), int8] */;
  (%403,)
}

def @func_2257(%var_2204: Tensor[(384), uint32], %var_2218: Tensor[(1, 112), int16], %var_2222: Tensor[(7, 16, 8), bool]) -> (Tensor[(7, 16, 8), uint8], Tensor[(4, 6, 16), int8], Tensor[(384), uint32], Tensor[(7, 16, 8), float64], Tensor[(1, 112), int16], Tensor[(7, 16, 8), int64], Tensor[(7, 16, 8), bool], Tensor[(7, 16, 8), uint64], Tensor[(8, 2, 7), int16]) {
  %404 = @func_2075() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64]) */;
  %405 = %404.1;
  %406 = cast(%405, dtype="float64") /* ty=Tensor[(7, 16, 8), float64] */;
  %407 = reshape(%406, newshape=[7, 16, 8]) /* ty=Tensor[(7, 16, 8), float64] */;
  %408 = @func_2021(%407) /* ty=(Tensor[(7, 16, 8), bool],) */;
  %409 = %408.0;
  %410 = cast(%409, dtype="uint8") /* ty=Tensor[(7, 16, 8), uint8] */;
  %411 = shape_of(%405, dtype="int32") /* ty=Tensor[(3), int32] */;
  %412 = cast(%405, dtype="uint8") /* ty=Tensor[(7, 16, 8), uint8] */;
  %413 = dyn.reshape(%410, %411, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %414 = cast(%var_2204, dtype="uint32") /* ty=Tensor[(384), uint32] */;
  %415 = cast(%var_2204, dtype="uint32") /* ty=Tensor[(384), uint32] */;
  %416 = reshape(%414, newshape=[4, 6, 16]) /* ty=Tensor[(4, 6, 16), uint32] */;
  %417 = reshape(%415, newshape=[4, 6, 16]) /* ty=Tensor[(4, 6, 16), uint32] */;
  %418 = @func_1751(%416, %417) /* ty=(Tensor[(4, 6, 16), int8],) */;
  %419 = cast(%var_2218, dtype="int16") /* ty=Tensor[(1, 112), int16] */;
  %420 = cast(%405, dtype="float32") /* ty=Tensor[(7, 16, 8), float32] */;
  %421 = reshape(%419, newshape=[4, 28]) /* ty=Tensor[(4, 28), int16] */;
  %422 = reshape(%420, newshape=[7, 16, 8]) /* ty=Tensor[(7, 16, 8), float32] */;
  %423 = @func_1655(%421, %422) /* ty=(Tensor[(8, 2, 7), int16], Tensor[(4, 28), int16], Tensor[(7, 16, 8), float64]) */;
  %424 = cast(%var_2222, dtype="int64") /* ty=Tensor[(7, 16, 8), int64] */;
  %425 = shape_of(%409, dtype="int32") /* ty=Tensor[(3), int32] */;
  %426 = cast(%409, dtype="int64") /* ty=Tensor[(7, 16, 8), int64] */;
  %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %428 = bitwise_and(%426, %427) /* ty=Tensor[(7, 16, 8), int64] */;
  %429 = cast(%428, dtype="float64") /* ty=Tensor[(7, 16, 8), float64] */;
  %430 = reshape(%429, newshape=[7, 16, 8]) /* ty=Tensor[(7, 16, 8), float64] */;
  %431 = @func_2021(%430) /* ty=(Tensor[(7, 16, 8), bool],) */;
  %432 = @func_2164() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), uint64], Tensor[(112), int16]) */;
  %433 = cast(%var_2218, dtype="int16") /* ty=Tensor[(1, 112), int16] */;
  %434 = reshape(%433, newshape=[28, 4]) /* ty=Tensor[(28, 4), int16] */;
  %435 = @func_1191(%434) /* ty=(Tensor[(7, 16, 8), float64], Tensor[(8, 2, 7), int16], Tensor[(28, 4), int16]) */;
  %436 = right_shift(%412, %413) /* ty=Tensor[(7, 16, 8), uint8] */;
  %437 = %418.0;
  %438 = %423.2;
  %439 = %431.0;
  %440 = %432.1;
  %441 = %435.1;
  (%436, %437, %var_2204, %438, %var_2218, %428, %439, %440, %441)
}

def @func_273(%var_228: Tensor[(15, 7, 8), float32]) -> Tensor[(15, 7, 8), float64] {
  %442 = cast(%var_228, dtype="float32") /* ty=Tensor[(15, 7, 8), float32] */;
  %443 = log10(%442) /* ty=Tensor[(15, 7, 8), float32] */;
  %444 = cast(%443, dtype="float32") /* ty=Tensor[(15, 7, 8), float32] */;
  %445 = sigmoid(%444) /* ty=Tensor[(15, 7, 8), float32] */;
  %446 = cast(%445, dtype="float64") /* ty=Tensor[(15, 7, 8), float64] */;
  exp(%446) /* ty=Tensor[(15, 7, 8), float64] */
}

def @func_2645() -> Tensor[(7, 16, 8), float32] {
  %447 = @func_1578() /* ty=(Tensor[(7, 16, 8), float32], Tensor[(7, 16, 8), float64]) */;
  %447.0
}

def @func_5255() -> (Tensor[(7, 16, 8), bool],) {
  %448 = @func_4754() /* ty=(Tensor[(7, 16, 8), bool],) */;
  %449 = %448.0;
  (%449,)
}

def @func_5928(%var_5911: Tensor[(12, 10, 1), float32], %var_5912: Tensor[(12, 10, 11), float32]) -> (Tensor[(12, 10, 11), bool],) {
  %450 = cast(%var_5911, dtype="float32") /* ty=Tensor[(12, 10, 1), float32] */;
  %451 = cast(%var_5912, dtype="float32") /* ty=Tensor[(12, 10, 11), float32] */;
  %452 = mod(%450, %451) /* ty=Tensor[(12, 10, 11), float32] */;
  %453 = cast(%var_5911, dtype="bool") /* ty=Tensor[(12, 10, 1), bool] */;
  %454 = cast(%452, dtype="bool") /* ty=Tensor[(12, 10, 11), bool] */;
  %455 = logical_and(%453, %454) /* ty=Tensor[(12, 10, 11), bool] */;
  (%455,)
}

def @func_5812() -> Tensor[(7, 16, 8), float64] {
  %456 = @func_1616() /* ty=(Tensor[(7, 16, 8), float64],) */;
  %456.0
}

def @main(%var_6900: Tensor[(112), int16]) -> (Tensor[(7, 16, 8), float32], Tensor[(9, 6, 6), uint16], Tensor[(324), uint16], Tensor[(112), float32], Tensor[(7, 16, 8), uint32]) {
  %457 = @func_6810() /* ty=(Tensor[(7, 16, 8), float32],) */;
  %458 = cast(meta[relay.Constant][21] /* ty=Tensor[(324), uint16] */, dtype="uint16") /* ty=Tensor[(324), uint16] */;
  %459 = cast(meta[relay.Constant][21] /* ty=Tensor[(324), uint16] */, dtype="uint16") /* ty=Tensor[(324), uint16] */;
  %460 = reshape(%458, newshape=[9, 6, 6]) /* ty=Tensor[(9, 6, 6), uint16] */;
  %461 = reshape(%459, newshape=[9, 6, 6]) /* ty=Tensor[(9, 6, 6), uint16] */;
  %462 = @func_4515(%460, %461) /* ty=(Tensor[(9, 6, 6), uint16], Tensor[(9, 6, 6), float32]) */;
  %463 = @func_2164() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), uint64], Tensor[(112), int16]) */;
  %464 = %463.2;
  %465 = cast(%var_6900, dtype="float32") /* ty=Tensor[(112), float32] */;
  %466 = shape_of(%464, dtype="int32") /* ty=Tensor[(1), int32] */;
  %467 = cast(%464, dtype="float32") /* ty=Tensor[(112), float32] */;
  %468 = dyn.reshape(%465, %466, newshape=[]) /* ty=Tensor[(?), float32] */;
  %469 = @func_6186() /* ty=Tensor[(7, 16, 8), float64] */;
  %470 = @func_1522() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(112), int16]) */;
  %471 = %470.0;
  %472 = cast(%471, dtype="uint32") /* ty=Tensor[(7, 16, 8), uint32] */;
  %473 = shape_of(%469, dtype="int32") /* ty=Tensor[(3), int32] */;
  %474 = cast(%469, dtype="uint32") /* ty=Tensor[(7, 16, 8), uint32] */;
  %475 = dyn.reshape(%472, %473, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %476 = %457.0;
  %477 = %462.0;
  %478 = divide(%467, %468) /* ty=Tensor[(112), float32] */;
  %479 = left_shift(%474, %475) /* ty=Tensor[(7, 16, 8), uint32] */;
  (%476, %477, meta[relay.Constant][21] /* ty=Tensor[(324), uint16] */, %478, %479)
}

def @func_6098(%var_6049: Tensor[(112), int16]) -> (Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), bool], Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float32], Tensor[(11, 4, 10), int8], Tensor[(440), float64], Tensor[(112), int16], Tensor[(7, 16, 8), float64], Tensor[(9, 140), float64], Tensor[(9, 140), float64], Tensor[(7, 16, 8), float64], Tensor[(9, 140), float64]) {
  %480 = @func_5598() /* ty=(Tensor[(7, 16, 8), uint32], Tensor[(7, 16, 8), float64]) */;
  %481 = cast(meta[relay.Constant][22] /* ty=Tensor[(9, 140), float32] */, dtype="float32") /* ty=Tensor[(9, 140), float32] */;
  %482 = reshape(%481, newshape=[14, 10, 9]) /* ty=Tensor[(14, 10, 9), float32] */;
  %483 = @func_4865(%482) /* ty=(Tensor[(14, 10, 9), bool], Tensor[(7, 16, 8), float64]) */;
  %484 = @func_3193() /* ty=(Tensor[(7, 16, 8), float64],) */;
  %485 = %484.0;
  %486 = cast(%485, dtype="float64") /* ty=Tensor[(7, 16, 8), float64] */;
  %487 = reshape(%486, newshape=[7, 16, 8]) /* ty=Tensor[(7, 16, 8), float64] */;
  %488 = @func_2284(%487) /* ty=(Tensor[(7, 16, 8), bool],) */;
  %489 = @func_3790() /* ty=(Tensor[(7, 16, 8), float64],) */;
  %490 = cast(%485, dtype="float32") /* ty=Tensor[(7, 16, 8), float32] */;
  %491 = cast(meta[relay.Constant][23] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
  %492 = cast(%var_6049, dtype="int16") /* ty=Tensor[(112), int16] */;
  %493 = reshape(%491, newshape=[11, 4, 10]) /* ty=Tensor[(11, 4, 10), float64] */;
  %494 = reshape(%492, newshape=[112]) /* ty=Tensor[(112), int16] */;
  %495 = @func_2351(%493, %494) /* ty=(Tensor[(11, 4, 10), int8], Tensor[(8, 2, 7), int16], Tensor[(896), float64], Tensor[(112), int16], Tensor[(7, 16, 8), float64]) */;
  %496 = cast(meta[relay.Constant][22] /* ty=Tensor[(9, 140), float32] */, dtype="float64") /* ty=Tensor[(9, 140), float64] */;
  %497 = acosh(%496) /* ty=Tensor[(9, 140), float64] */;
  %498 = cast(%497, dtype="float64") /* ty=Tensor[(9, 140), float64] */;
  %499 = cast(%497, dtype="float64") /* ty=Tensor[(9, 140), float64] */;
  %500 = @func_3790() /* ty=(Tensor[(7, 16, 8), float64],) */;
  %501 = cast(%497, dtype="float64") /* ty=Tensor[(9, 140), float64] */;
  %502 = %480.1;
  %503 = %483.1;
  %504 = %488.0;
  %505 = %489.0;
  %506 = asinh(%490) /* ty=Tensor[(7, 16, 8), float32] */;
  %507 = %495.0;
  %508 = @func_3397() /* ty=Tensor[(7, 16, 8), float64] */;
  %509 = sqrt(%498) /* ty=Tensor[(9, 140), float64] */;
  %510 = log10(%499) /* ty=Tensor[(9, 140), float64] */;
  %511 = %500.0;
  %512 = log2(%501) /* ty=Tensor[(9, 140), float64] */;
  (%502, %503, %504, %505, %506, %507, meta[relay.Constant][23] /* ty=Tensor[(440), float64] */, %var_6049, %508, %509, %510, %511, %512)
}

def @func_1602() -> (Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(11, 4, 10), float64], Tensor[(440), float64]) {
  %513 = cast(meta[relay.Constant][24] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
  %514 = reshape(%513, newshape=[11, 4, 10]) /* ty=Tensor[(11, 4, 10), float64] */;
  %515 = @func_1536(%514) /* ty=(Tensor[(11, 4, 10), float64],) */;
  %516 = @func_1124() /* ty=Tensor[(7, 16, 8), float64] */;
  %517 = @func_1124() /* ty=Tensor[(7, 16, 8), float64] */;
  %518 = %515.0;
  (%516, %517, %518, meta[relay.Constant][24] /* ty=Tensor[(440), float64] */)
}

def @func_1926() -> (Tensor[(7, 16, 8), float64],) {
  %519 = @func_1678() /* ty=Tensor[(7, 16, 8), float64] */;
  (%519,)
}

def @func_1344(%var_1309: Tensor[(9, 8, 3), float64], %var_1310: Tensor[(9, 8, 3), float64], %var_1323: Tensor[(112), int16]) -> (Tensor[(9, 8, 3), bool], Tensor[(9, 8, 3), float32], Tensor[(7, 16, 8), float64], Tensor[(112), int16], Tensor[(8, 2, 7), int16]) {
  %520 = cast(%var_1310, dtype="bool") /* ty=Tensor[(9, 8, 3), bool] */;
  %521 = shape_of(%var_1309, dtype="int32") /* ty=Tensor[(3), int32] */;
  %522 = cast(%var_1309, dtype="bool") /* ty=Tensor[(9, 8, 3), bool] */;
  %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %524 = cast(%var_1309, dtype="float32") /* ty=Tensor[(9, 8, 3), float32] */;
  %525 = cast(%var_1323, dtype="int16") /* ty=Tensor[(112), int16] */;
  %526 = reshape(%525, newshape=[28, 4]) /* ty=Tensor[(28, 4), int16] */;
  %527 = @func_1191(%526) /* ty=(Tensor[(7, 16, 8), float64], Tensor[(8, 2, 7), int16], Tensor[(28, 4), int16]) */;
  %528 = cast(%var_1323, dtype="int16") /* ty=Tensor[(112), int16] */;
  %529 = reshape(%528, newshape=[8, 2, 7]) /* ty=Tensor[(8, 2, 7), int16] */;
  %530 = @func_1042(%529) /* ty=(Tensor[(8, 2, 7), int16], Tensor[(15, 7, 8), float64], Tensor[(840), float32]) */;
  %531 = equal(%522, %523) /* ty=Tensor[(9, 8, 3), bool] */;
  %532 = atan(%524) /* ty=Tensor[(9, 8, 3), float32] */;
  %533 = %527.0;
  %534 = %530.0;
  (%531, %532, %533, %var_1323, %534)
}

def @func_3781() -> (Tensor[(7, 16, 8), float64], Tensor[(112), uint8], Tensor[(11, 4, 10), float64], Tensor[(440), float64], Tensor[(7, 16, 8), float32]) {
  %535 = cast(meta[relay.Constant][25] /* ty=Tensor[(112), int16] */, dtype="int16") /* ty=Tensor[(112), int16] */;
  %536 = reshape(%535, newshape=[112]) /* ty=Tensor[(112), int16] */;
  %537 = @func_2952(%536) /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(112), int16]) */;
  %538 = %537.2;
  %539 = cast(meta[relay.Constant][25] /* ty=Tensor[(112), int16] */, dtype="uint8") /* ty=Tensor[(112), uint8] */;
  %540 = shape_of(%538, dtype="int32") /* ty=Tensor[(1), int32] */;
  %541 = cast(%538, dtype="uint8") /* ty=Tensor[(112), uint8] */;
  %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %543 = cast(meta[relay.Constant][26] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
  %544 = reshape(%543, newshape=[11, 4, 10]) /* ty=Tensor[(11, 4, 10), float64] */;
  %545 = @func_1536(%544) /* ty=(Tensor[(11, 4, 10), float64],) */;
  %546 = @func_2455() /* ty=(Tensor[(7, 16, 8), float32],) */;
  %547 = @func_3514() /* ty=Tensor[(7, 16, 8), float64] */;
  %548 = logical_xor(%541, %542) /* ty=Tensor[(112), uint8] */;
  %549 = %545.0;
  %550 = %546.0;
  (%547, %548, %549, meta[relay.Constant][26] /* ty=Tensor[(440), float64] */, %550)
}

def @func_1522() -> (Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(112), int16]) {
  %551 = cast(meta[relay.Constant][27] /* ty=Tensor[(112), int16] */, dtype="int16") /* ty=Tensor[(112), int16] */;
  %552 = reshape(%551, newshape=[28, 4]) /* ty=Tensor[(28, 4), int16] */;
  %553 = @func_1191(%552) /* ty=(Tensor[(7, 16, 8), float64], Tensor[(8, 2, 7), int16], Tensor[(28, 4), int16]) */;
  %554 = @func_1124() /* ty=Tensor[(7, 16, 8), float64] */;
  %555 = %553.0;
  (%554, %555, meta[relay.Constant][27] /* ty=Tensor[(112), int16] */)
}

def @func_5886(%var_5879: Tensor[(112, 1), int16]) -> (Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), uint8], Tensor[(384), uint32], Tensor[(112, 1), int16], Tensor[(8, 2, 7), float32]) {
  %556 = @func_1578() /* ty=(Tensor[(7, 16, 8), float32], Tensor[(7, 16, 8), float64]) */;
  %557 = cast(meta[relay.Constant][28] /* ty=Tensor[(384), uint32] */, dtype="uint32") /* ty=Tensor[(384), uint32] */;
  %558 = cast(%var_5879, dtype="int16") /* ty=Tensor[(112, 1), int16] */;
  %559 = %556.1;
  %560 = cast(%559, dtype="bool") /* ty=Tensor[(7, 16, 8), bool] */;
  %561 = reshape(%557, newshape=[384]) /* ty=Tensor[(384), uint32] */;
  %562 = reshape(%558, newshape=[1, 112]) /* ty=Tensor[(1, 112), int16] */;
  %563 = reshape(%560, newshape=[7, 16, 8]) /* ty=Tensor[(7, 16, 8), bool] */;
  %564 = @func_2257(%561, %562, %563) /* ty=(Tensor[(7, 16, 8), uint8], Tensor[(4, 6, 16), int8], Tensor[(384), uint32], Tensor[(7, 16, 8), float64], Tensor[(1, 112), int16], Tensor[(7, 16, 8), int64], Tensor[(7, 16, 8), bool], Tensor[(7, 16, 8), uint64], Tensor[(8, 2, 7), int16]) */;
  %565 = @func_4415() /* ty=(Tensor[(8, 2, 7), float32],) */;
  %566 = %564.0;
  %567 = %565.0;
  (%559, %566, meta[relay.Constant][28] /* ty=Tensor[(384), uint32] */, %var_5879, %567)
}

def @func_6254() -> (Tensor[(7, 16, 8), bool], Tensor[(7, 16, 8), float32]) {
  %568 = @func_5523() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), bool]) */;
  %569 = @func_5696() /* ty=(Tensor[(7, 16, 8), float32],) */;
  %570 = %568.1;
  %571 = %569.0;
  (%570, %571)
}

def @func_6005(%var_5996: Tensor[(120), float32], %var_5997: Tensor[(1320), float32]) -> (Tensor[(7, 16, 8), float32], Tensor[(12, 10, 11), bool], Tensor[(120), float32], Tensor[(1320), float32]) {
  %572 = cast(%var_5996, dtype="float32") /* ty=Tensor[(120), float32] */;
  %573 = cast(%var_5997, dtype="float32") /* ty=Tensor[(1320), float32] */;
  %574 = reshape(%572, newshape=[12, 10, 1]) /* ty=Tensor[(12, 10, 1), float32] */;
  %575 = reshape(%573, newshape=[12, 10, 11]) /* ty=Tensor[(12, 10, 11), float32] */;
  %576 = @func_5928(%574, %575) /* ty=(Tensor[(12, 10, 11), bool],) */;
  %577 = @func_2645() /* ty=Tensor[(7, 16, 8), float32] */;
  %578 = %576.0;
  (%577, %578, %var_5996, %var_5997)
}

def @func_1678() -> Tensor[(7, 16, 8), float64] {
  %579 = @func_1616() /* ty=(Tensor[(7, 16, 8), float64],) */;
  %579.0
}

def @func_2351(%var_2334: Tensor[(11, 4, 10), float64], %var_2342: Tensor[(112), int16]) -> (Tensor[(11, 4, 10), int8], Tensor[(8, 2, 7), int16], Tensor[(896), float64], Tensor[(112), int16], Tensor[(7, 16, 8), float64]) {
  %580 = @func_1602() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(11, 4, 10), float64], Tensor[(440), float64]) */;
  %581 = %580.2;
  %582 = cast(%var_2334, dtype="int8") /* ty=Tensor[(11, 4, 10), int8] */;
  %583 = shape_of(%581, dtype="int32") /* ty=Tensor[(3), int32] */;
  %584 = cast(%581, dtype="int8") /* ty=Tensor[(11, 4, 10), int8] */;
  %585 = dyn.reshape(%582, %583, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %586 = cast(meta[relay.Constant][29] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
  %587 = cast(%var_2342, dtype="int16") /* ty=Tensor[(112), int16] */;
  %588 = reshape(%586, newshape=[7, 16, 8]) /* ty=Tensor[(7, 16, 8), float64] */;
  %589 = reshape(%587, newshape=[1, 112]) /* ty=Tensor[(1, 112), int16] */;
  %590 = @func_1241(%588, %589) /* ty=(Tensor[(7, 16, 8), uint64], Tensor[(8, 2, 7), int16], Tensor[(216), float64], Tensor[(1, 112), int16]) */;
  %591 = cast(%var_2342, dtype="int16") /* ty=Tensor[(112), int16] */;
  %592 = reshape(%591, newshape=[28, 4]) /* ty=Tensor[(28, 4), int16] */;
  %593 = @func_1191(%592) /* ty=(Tensor[(7, 16, 8), float64], Tensor[(8, 2, 7), int16], Tensor[(28, 4), int16]) */;
  %594 = bitwise_xor(%584, %585) /* ty=Tensor[(11, 4, 10), int8] */;
  %595 = %590.1;
  %596 = %593.0;
  (%594, %595, meta[relay.Constant][29] /* ty=Tensor[(896), float64] */, %var_2342, %596)
}

def @func_4754() -> (Tensor[(7, 16, 8), bool],) {
  %597 = @func_1926() /* ty=(Tensor[(7, 16, 8), float64],) */;
  %598 = %597.0;
  %599 = @func_4154() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(8, 2, 7), int16], Tensor[(112), int16], Tensor[(7, 16, 8), bool]) */;
  %600 = %599.0;
  %601 = cast(%600, dtype="bool") /* ty=Tensor[(7, 16, 8), bool] */;
  %602 = shape_of(%598, dtype="int32") /* ty=Tensor[(3), int32] */;
  %603 = cast(%598, dtype="bool") /* ty=Tensor[(7, 16, 8), bool] */;
  %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %605 = greater(%603, %604) /* ty=Tensor[(7, 16, 8), bool] */;
  (%605,)
}

def @func_3790() -> (Tensor[(7, 16, 8), float64],) {
  %606 = @func_3781() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(112), uint8], Tensor[(11, 4, 10), float64], Tensor[(440), float64], Tensor[(7, 16, 8), float32]) */;
  %607 = %606.0;
  (%607,)
}

def @func_1885(%var_1870: Tensor[(216), float64], %var_1871: Tensor[(112), int16]) -> (Tensor[(7, 16, 8), float64], Tensor[(9, 3, 8), float64], Tensor[(216), float64], Tensor[(112), int16], Tensor[(7, 16, 8), float64]) {
  %608 = @func_1678() /* ty=Tensor[(7, 16, 8), float64] */;
  %609 = cast(%608, dtype="float64") /* ty=Tensor[(7, 16, 8), float64] */;
  %610 = cast(%var_1870, dtype="float64") /* ty=Tensor[(216), float64] */;
  %611 = cast(%var_1871, dtype="int16") /* ty=Tensor[(112), int16] */;
  %612 = reshape(%610, newshape=[9, 3, 8]) /* ty=Tensor[(9, 3, 8), float64] */;
  %613 = reshape(%611, newshape=[112]) /* ty=Tensor[(112), int16] */;
  %614 = @func_1082(%612, %613) /* ty=(Tensor[(9, 3, 8), float64], Tensor[(8, 2, 7), int16], Tensor[(112), int16], Tensor[(8, 2, 7), int16]) */;
  %615 = @func_1522() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(112), int16]) */;
  %616 = sinh(%609) /* ty=Tensor[(7, 16, 8), float64] */;
  %617 = %614.0;
  %618 = %615.1;
  (%616, %617, %var_1870, %var_1871, %618)
}

def @func_6171(%var_6160: Tensor[(1456), int32]) -> (Tensor[(40), float32], Tensor[(7, 16, 8), uint32], Tensor[(7, 16, 8), float64], Tensor[(112), int16], Tensor[(9, 3, 8), float64], Tensor[(216, 1), float64], Tensor[(7, 16, 8), uint64], Tensor[(1456), int32]) {
  %619 = @func_1926() /* ty=(Tensor[(7, 16, 8), float64],) */;
  %620 = %619.0;
  %621 = cast(%620, dtype="float64") /* ty=Tensor[(7, 16, 8), float64] */;
  %622 = cast(meta[relay.Constant][30] /* ty=Tensor[(40), float32] */, dtype="float32") /* ty=Tensor[(40), float32] */;
  %623 = reshape(%621, newshape=[896]) /* ty=Tensor[(896), float64] */;
  %624 = reshape(%622, newshape=[40]) /* ty=Tensor[(40), float32] */;
  %625 = @func_4469(%623, %624) /* ty=(Tensor[(112), int16], Tensor[(7, 16, 8), bool], Tensor[(896), float64], Tensor[(15, 7, 8), float64], Tensor[(40), float32], Tensor[(7, 16, 8), float64]) */;
  %626 = %625.1;
  %627 = cast(%620, dtype="uint32") /* ty=Tensor[(7, 16, 8), uint32] */;
  %628 = shape_of(%626, dtype="int32") /* ty=Tensor[(3), int32] */;
  %629 = cast(%626, dtype="uint32") /* ty=Tensor[(7, 16, 8), uint32] */;
  %630 = dyn.reshape(%627, %628, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %631 = cast(meta[relay.Constant][31] /* ty=Tensor[(112), int16] */, dtype="int16") /* ty=Tensor[(112), int16] */;
  %632 = reshape(%631, newshape=[112]) /* ty=Tensor[(112), int16] */;
  %633 = @func_2430(%632) /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), bool], Tensor[(112), int16]) */;
  %634 = cast(meta[relay.Constant][32] /* ty=Tensor[(216, 1), float64] */, dtype="float64") /* ty=Tensor[(216, 1), float64] */;
  %635 = cast(meta[relay.Constant][31] /* ty=Tensor[(112), int16] */, dtype="int16") /* ty=Tensor[(112), int16] */;
  %636 = reshape(%634, newshape=[9, 3, 8]) /* ty=Tensor[(9, 3, 8), float64] */;
  %637 = reshape(%635, newshape=[112]) /* ty=Tensor[(112), int16] */;
  %638 = @func_1082(%636, %637) /* ty=(Tensor[(9, 3, 8), float64], Tensor[(8, 2, 7), int16], Tensor[(112), int16], Tensor[(8, 2, 7), int16]) */;
  %639 = cast(%var_6160, dtype="int32") /* ty=Tensor[(1456), int32] */;
  %640 = reshape(%639, newshape=[16, 13, 7]) /* ty=Tensor[(16, 13, 7), int32] */;
  %641 = @func_3669(%640) /* ty=(Tensor[(7, 16, 8), uint64], Tensor[(16, 13, 7), int32]) */;
  %642 = subtract(%629, %630) /* ty=Tensor[(7, 16, 8), uint32] */;
  %643 = %633.0;
  %644 = %638.0;
  %645 = %641.0;
  (meta[relay.Constant][30] /* ty=Tensor[(40), float32] */, %642, %643, meta[relay.Constant][31] /* ty=Tensor[(112), int16] */, %644, meta[relay.Constant][32] /* ty=Tensor[(216, 1), float64] */, %645, %var_6160)
}

def @func_4664() -> Tensor[(7, 16, 8), float64] {
  %646 = @func_1602() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(11, 4, 10), float64], Tensor[(440), float64]) */;
  %646.1
}

def @func_4469(%var_4444: Tensor[(896), float64], %var_4455: Tensor[(40), float32]) -> (Tensor[(112), int16], Tensor[(7, 16, 8), bool], Tensor[(896), float64], Tensor[(15, 7, 8), float64], Tensor[(40), float32], Tensor[(7, 16, 8), float64]) {
  %647 = @func_4154() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(8, 2, 7), int16], Tensor[(112), int16], Tensor[(7, 16, 8), bool]) */;
  %648 = cast(%var_4444, dtype="float64") /* ty=Tensor[(896), float64] */;
  %649 = reshape(%648, newshape=[7, 16, 8]) /* ty=Tensor[(7, 16, 8), float64] */;
  %650 = @func_1846(%649) /* ty=(Tensor[(7, 16, 8), bool],) */;
  %651 = cast(%var_4455, dtype="float32") /* ty=Tensor[(40), float32] */;
  %652 = reshape(%651, newshape=[2, 5, 4]) /* ty=Tensor[(2, 5, 4), float32] */;
  %653 = @func_3636(%652) /* ty=(Tensor[(2, 5, 4), float32], Tensor[(15, 7, 8), float64], Tensor[(12, 70), float32]) */;
  %654 = @func_1944() /* ty=(Tensor[(7, 16, 8), float64],) */;
  %655 = %647.2;
  %656 = %650.0;
  %657 = %653.1;
  %658 = %654.0;
  (%655, %656, %var_4444, %657, %var_4455, %658)
}

def @func_4094() -> (Tensor[(7, 16, 8), float64],) {
  %659 = @func_2075() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64]) */;
  %660 = %659.0;
  (%660,)
}

def @func_4936() -> (Tensor[(7, 16, 8), float32], Tensor[(7, 16, 8), float64]) {
  %661 = @func_2455() /* ty=(Tensor[(7, 16, 8), float32],) */;
  %662 = %661.0;
  %663 = @func_1124() /* ty=Tensor[(7, 16, 8), float64] */;
  (%662, %663)
}

def @func_1124() -> Tensor[(7, 16, 8), float64] {
  %664 = cast(meta[relay.Constant][33] /* ty=Tensor[(7, 16, 8), float64] */, dtype="float64") /* ty=Tensor[(7, 16, 8), float64] */;
  log2(%664) /* ty=Tensor[(7, 16, 8), float64] */
}

def @func_5147() -> (Tensor[(7, 16, 8), float64],) {
  %665 = @func_4021() /* ty=(Tensor[(7, 16, 8), float64],) */;
  %666 = %665.0;
  %667 = cast(%666, dtype="float64") /* ty=Tensor[(7, 16, 8), float64] */;
  %668 = atanh(%667) /* ty=Tensor[(7, 16, 8), float64] */;
  (%668,)
}

def @func_4028(%var_4023: Tensor[(12, 4, 3), uint32], %var_4024: Tensor[(12, 4, 3), uint32]) -> (Tensor[(12, 4, 3), uint32],) {
  %669 = cast(%var_4024, dtype="uint32") /* ty=Tensor[(12, 4, 3), uint32] */;
  %670 = shape_of(%var_4023, dtype="int32") /* ty=Tensor[(3), int32] */;
  %671 = cast(%var_4023, dtype="uint32") /* ty=Tensor[(12, 4, 3), uint32] */;
  %672 = dyn.reshape(%669, %670, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %673 = bitwise_or(%671, %672) /* ty=Tensor[(12, 4, 3), uint32] */;
  (%673,)
}

def @func_5523() -> (Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), bool]) {
  %674 = @func_3514() /* ty=Tensor[(7, 16, 8), float64] */;
  %675 = cast(%674, dtype="float64") /* ty=Tensor[(7, 16, 8), float64] */;
  %676 = reshape(%675, newshape=[7, 16, 8]) /* ty=Tensor[(7, 16, 8), float64] */;
  %677 = @func_2021(%676) /* ty=(Tensor[(7, 16, 8), bool],) */;
  %678 = %677.0;
  (%674, %678)
}

def @func_3170(%var_3164: Tensor[(7, 16, 8), float64]) -> (Tensor[(7, 16, 8), float64],) {
  %679 = @func_2565() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), uint64]) */;
  %680 = %679.0;
  %681 = cast(%var_3164, dtype="float64") /* ty=Tensor[(7, 16, 8), float64] */;
  %682 = shape_of(%680, dtype="int32") /* ty=Tensor[(3), int32] */;
  %683 = cast(%680, dtype="float64") /* ty=Tensor[(7, 16, 8), float64] */;
  %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %685 = maximum(%683, %684) /* ty=Tensor[(7, 16, 8), float64] */;
  (%685,)
}

def @func_4181(%var_4169: Tensor[(7, 16, 8), float64]) -> (Tensor[(7, 16, 8), bool],) {
  %686 = @func_1124() /* ty=Tensor[(7, 16, 8), float64] */;
  %687 = cast(%var_4169, dtype="bool") /* ty=Tensor[(7, 16, 8), bool] */;
  %688 = shape_of(%686, dtype="int32") /* ty=Tensor[(3), int32] */;
  %689 = cast(%686, dtype="bool") /* ty=Tensor[(7, 16, 8), bool] */;
  %690 = dyn.reshape(%687, %688, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %691 = logical_and(%689, %690) /* ty=Tensor[(7, 16, 8), bool] */;
  (%691,)
}

def @func_1801(%var_1799: Tensor[(112), int16]) -> (Tensor[(7, 16, 8), float32], Tensor[(7, 16, 8), uint64], Tensor[(112), int16]) {
  %692 = @func_1124() /* ty=Tensor[(7, 16, 8), float64] */;
  %693 = cast(meta[relay.Constant][34] /* ty=Tensor[(7, 16, 8), float64] */, dtype="float32") /* ty=Tensor[(7, 16, 8), float32] */;
  %694 = shape_of(%692, dtype="int32") /* ty=Tensor[(3), int32] */;
  %695 = cast(%692, dtype="float32") /* ty=Tensor[(7, 16, 8), float32] */;
  %696 = dyn.reshape(%693, %694, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %697 = floor_mod(%695, %696) /* ty=Tensor[(7, 16, 8), float32] */;
  %698 = cast(%697, dtype="float64") /* ty=Tensor[(7, 16, 8), float64] */;
  %699 = cast(%var_1799, dtype="int16") /* ty=Tensor[(112), int16] */;
  %700 = reshape(%698, newshape=[7, 16, 8]) /* ty=Tensor[(7, 16, 8), float64] */;
  %701 = reshape(%699, newshape=[1, 112]) /* ty=Tensor[(1, 112), int16] */;
  %702 = @func_1241(%700, %701) /* ty=(Tensor[(7, 16, 8), uint64], Tensor[(8, 2, 7), int16], Tensor[(216), float64], Tensor[(1, 112), int16]) */;
  %703 = %702.0;
  (%697, %703, %var_1799)
}

def @func_3369() -> (Tensor[(7, 16, 8), float32], Tensor[(7, 16, 8), float32]) {
  %704 = @func_1926() /* ty=(Tensor[(7, 16, 8), float64],) */;
  %705 = %704.0;
  %706 = cast(%705, dtype="float32") /* ty=Tensor[(7, 16, 8), float32] */;
  %707 = @func_2455() /* ty=(Tensor[(7, 16, 8), float32],) */;
  %708 = cos(%706) /* ty=Tensor[(7, 16, 8), float32] */;
  %709 = %707.0;
  (%708, %709)
}

def @func_5418(%var_5408: Tensor[(112), int16], %var_5409: Tensor[(1456), int32]) -> (Tensor[(7, 16, 8), float64], Tensor[(784), float32], Tensor[(112), int16], Tensor[(1456), int32]) {
  %710 = @func_3790() /* ty=(Tensor[(7, 16, 8), float64],) */;
  %711 = cast(%var_5408, dtype="int16") /* ty=Tensor[(112), int16] */;
  %712 = cast(%var_5409, dtype="int32") /* ty=Tensor[(1456), int32] */;
  %713 = reshape(%711, newshape=[112, 1]) /* ty=Tensor[(112, 1), int16] */;
  %714 = reshape(%712, newshape=[1456]) /* ty=Tensor[(1456), int32] */;
  %715 = @func_3999(%713, %714) /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 112), float64], Tensor[(784), float32], Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float32], Tensor[(7, 16, 8), float64], Tensor[(112, 384), float32], Tensor[(7, 16, 8), uint64], Tensor[(1456), int32]) */;
  %716 = %710.0;
  %717 = %715.2;
  (%716, %717, %var_5408, %var_5409)
}

def @func_4273() -> (Tensor[(112), int16], Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64]) {
  %718 = @func_1522() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(112), int16]) */;
  %719 = @func_2645() /* ty=Tensor[(7, 16, 8), float32] */;
  %720 = cast(%719, dtype="float64") /* ty=Tensor[(7, 16, 8), float64] */;
  %721 = @func_1578() /* ty=(Tensor[(7, 16, 8), float32], Tensor[(7, 16, 8), float64]) */;
  %722 = cast(%719, dtype="float64") /* ty=Tensor[(7, 16, 8), float64] */;
  %723 = %718.2;
  %724 = sqrt(%720) /* ty=Tensor[(7, 16, 8), float64] */;
  %725 = %721.1;
  %726 = rsqrt(%722) /* ty=Tensor[(7, 16, 8), float64] */;
  (%723, %724, %725, %726)
}

def @func_5065(%var_5055: uint16, %var_5056: Tensor[(11, 2, 1), uint16]) -> (Tensor[(11, 2, 1), uint16],) {
  %727 = cast(%var_5055, dtype="uint16") /* ty=uint16 */;
  %728 = cast(%var_5056, dtype="uint16") /* ty=Tensor[(11, 2, 1), uint16] */;
  %729 = subtract(%727, %728) /* ty=Tensor[(11, 2, 1), uint16] */;
  (%729,)
}

def @func_3313() -> Tensor[(7, 16, 8), float64] {
  @func_2634() /* ty=Tensor[(7, 16, 8), float64] */
}

def @func_3037(%var_3030: Tensor[(216), float64]) -> (Tensor[(6, 13, 11), float64], Tensor[(7, 16, 8), float32], Tensor[(9, 3, 8), float64], Tensor[(216), float64], Tensor[(112), int16]) {
  %730 = @func_2661() /* ty=(Tensor[(6, 13, 11), float64], Tensor[(7, 16, 8), float32]) */;
  %731 = @func_2661() /* ty=(Tensor[(6, 13, 11), float64], Tensor[(7, 16, 8), float32]) */;
  %732 = %731.1;
  %733 = cast(%732, dtype="float32") /* ty=Tensor[(7, 16, 8), float32] */;
  %734 = acos(%733) /* ty=Tensor[(7, 16, 8), float32] */;
  %735 = cast(%734, dtype="float64") /* ty=Tensor[(7, 16, 8), float64] */;
  %736 = asin(%735) /* ty=Tensor[(7, 16, 8), float64] */;
  %737 = @func_1578() /* ty=(Tensor[(7, 16, 8), float32], Tensor[(7, 16, 8), float64]) */;
  %738 = %737.0;
  %739 = cast(%738, dtype="float32") /* ty=Tensor[(7, 16, 8), float32] */;
  %740 = shape_of(%736, dtype="int32") /* ty=Tensor[(3), int32] */;
  %741 = cast(%736, dtype="float32") /* ty=Tensor[(7, 16, 8), float32] */;
  %742 = dyn.reshape(%739, %740, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %743 = cast(%var_3030, dtype="float64") /* ty=Tensor[(216), float64] */;
  %744 = cast(meta[relay.Constant][35] /* ty=Tensor[(112), int16] */, dtype="int16") /* ty=Tensor[(112), int16] */;
  %745 = reshape(%743, newshape=[216]) /* ty=Tensor[(216), float64] */;
  %746 = reshape(%744, newshape=[112]) /* ty=Tensor[(112), int16] */;
  %747 = @func_1885(%745, %746) /* ty=(Tensor[(7, 16, 8), float64], Tensor[(9, 3, 8), float64], Tensor[(216), float64], Tensor[(112), int16], Tensor[(7, 16, 8), float64]) */;
  %748 = %730.0;
  %749 = power(%741, %742) /* ty=Tensor[(7, 16, 8), float32] */;
  %750 = %747.1;
  (%748, %749, %750, %var_3030, meta[relay.Constant][35] /* ty=Tensor[(112), int16] */)
}

def @func_6684() -> (Tensor[(9, 6, 6), uint16], Tensor[(324), uint16], Tensor[(6, 5, 3), int16]) {
  %751 = cast(meta[relay.Constant][36] /* ty=Tensor[(324), uint16] */, dtype="uint16") /* ty=Tensor[(324), uint16] */;
  %752 = cast(meta[relay.Constant][36] /* ty=Tensor[(324), uint16] */, dtype="uint16") /* ty=Tensor[(324), uint16] */;
  %753 = reshape(%751, newshape=[9, 6, 6]) /* ty=Tensor[(9, 6, 6), uint16] */;
  %754 = reshape(%752, newshape=[9, 6, 6]) /* ty=Tensor[(9, 6, 6), uint16] */;
  %755 = @func_4515(%753, %754) /* ty=(Tensor[(9, 6, 6), uint16], Tensor[(9, 6, 6), float32]) */;
  %756 = cast(meta[relay.Constant][37] /* ty=Tensor[(6, 5, 3), uint16] */, dtype="float64") /* ty=Tensor[(6, 5, 3), float64] */;
  %757 = sigmoid(%756) /* ty=Tensor[(6, 5, 3), float64] */;
  %758 = cast(meta[relay.Constant][37] /* ty=Tensor[(6, 5, 3), uint16] */, dtype="uint16") /* ty=Tensor[(6, 5, 3), uint16] */;
  %759 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(6, 5, 3), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %760 = cast(meta[relay.Constant][38] /* ty=Tensor[(6, 5, 3), uint16] */, dtype="uint16") /* ty=Tensor[(6, 5, 3), uint16] */;
  %761 = dyn.reshape(%758, %759, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %762 = subtract(%760, %761) /* ty=Tensor[(6, 5, 3), uint16] */;
  %763 = cast(%762, dtype="int16") /* ty=Tensor[(6, 5, 3), int16] */;
  %764 = shape_of(%757, dtype="int32") /* ty=Tensor[(3), int32] */;
  %765 = cast(%757, dtype="int16") /* ty=Tensor[(6, 5, 3), int16] */;
  %766 = dyn.reshape(%763, %764, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %767 = %755.0;
  %768 = bitwise_or(%765, %766) /* ty=Tensor[(6, 5, 3), int16] */;
  (%767, meta[relay.Constant][36] /* ty=Tensor[(324), uint16] */, %768)
}

def @func_4154() -> (Tensor[(7, 16, 8), float64], Tensor[(8, 2, 7), int16], Tensor[(112), int16], Tensor[(7, 16, 8), bool]) {
  %769 = @func_1616() /* ty=(Tensor[(7, 16, 8), float64],) */;
  %770 = cast(meta[relay.Constant][39] /* ty=Tensor[(112), int16] */, dtype="int16") /* ty=Tensor[(112), int16] */;
  %771 = reshape(%770, newshape=[8, 2, 7]) /* ty=Tensor[(8, 2, 7), int16] */;
  %772 = @func_1042(%771) /* ty=(Tensor[(8, 2, 7), int16], Tensor[(15, 7, 8), float64], Tensor[(840), float32]) */;
  %773 = %769.0;
  %774 = cast(%773, dtype="float64") /* ty=Tensor[(7, 16, 8), float64] */;
  %775 = reshape(%774, newshape=[7, 16, 8]) /* ty=Tensor[(7, 16, 8), float64] */;
  %776 = @func_2284(%775) /* ty=(Tensor[(7, 16, 8), bool],) */;
  %777 = %772.0;
  %778 = %776.0;
  (%773, %777, meta[relay.Constant][39] /* ty=Tensor[(112), int16] */, %778)
}

def @func_2455() -> (Tensor[(7, 16, 8), float32],) {
  %779 = @func_1578() /* ty=(Tensor[(7, 16, 8), float32], Tensor[(7, 16, 8), float64]) */;
  %780 = %779.0;
  (%780,)
}

def @func_5550() -> (Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64]) {
  %781 = @func_3088() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64]) */;
  %782 = %781.1;
  %783 = @func_3313() /* ty=Tensor[(7, 16, 8), float64] */;
  (%782, %783)
}

def @func_6321() -> Tensor[(7, 16, 8), float64] {
  %784 = @func_1616() /* ty=(Tensor[(7, 16, 8), float64],) */;
  %784.0
}

def @func_3491(%var_3482: int64, %var_3483: Tensor[(3, 1, 4), int64]) -> (Tensor[(3, 1, 4), int64],) {
  %785 = cast(%var_3482, dtype="int64") /* ty=int64 */;
  %786 = cast(%var_3483, dtype="int64") /* ty=Tensor[(3, 1, 4), int64] */;
  %787 = bitwise_or(%785, %786) /* ty=Tensor[(3, 1, 4), int64] */;
  (%787,)
}

def @func_6358(%var_6347: Tensor[(112), int16]) -> (Tensor[(7, 16, 8), bool], Tensor[(9, 3, 8), float64], Tensor[(216), float64], Tensor[(112), int16]) {
  %788 = @func_6254() /* ty=(Tensor[(7, 16, 8), bool], Tensor[(7, 16, 8), float32]) */;
  %789 = cast(meta[relay.Constant][40] /* ty=Tensor[(216), float64] */, dtype="float64") /* ty=Tensor[(216), float64] */;
  %790 = cast(%var_6347, dtype="int16") /* ty=Tensor[(112), int16] */;
  %791 = reshape(%789, newshape=[216]) /* ty=Tensor[(216), float64] */;
  %792 = reshape(%790, newshape=[112]) /* ty=Tensor[(112), int16] */;
  %793 = @func_1885(%791, %792) /* ty=(Tensor[(7, 16, 8), float64], Tensor[(9, 3, 8), float64], Tensor[(216), float64], Tensor[(112), int16], Tensor[(7, 16, 8), float64]) */;
  %794 = %788.0;
  %795 = %793.1;
  (%794, %795, meta[relay.Constant][40] /* ty=Tensor[(216), float64] */, %var_6347)
}

def @func_3514() -> Tensor[(7, 16, 8), float64] {
  %796 = @func_2164() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), uint64], Tensor[(112), int16]) */;
  %796.0
}

def @func_2590(%var_2568: Tensor[(12, 16, 7), float32], %var_2579: Tensor[(896), float64], %var_2580: Tensor[(28, 4), int16]) -> (Tensor[(12, 16, 7), float32], Tensor[(8, 2, 7), int16], Tensor[(896), float64], Tensor[(28, 4), int16]) {
  %797 = cast(%var_2568, dtype="float32") /* ty=Tensor[(12, 16, 7), float32] */;
  %798 = cast(%var_2579, dtype="float64") /* ty=Tensor[(896), float64] */;
  %799 = cast(%var_2580, dtype="int16") /* ty=Tensor[(28, 4), int16] */;
  %800 = reshape(%798, newshape=[7, 16, 8]) /* ty=Tensor[(7, 16, 8), float64] */;
  %801 = reshape(%799, newshape=[1, 112]) /* ty=Tensor[(1, 112), int16] */;
  %802 = @func_1241(%800, %801) /* ty=(Tensor[(7, 16, 8), uint64], Tensor[(8, 2, 7), int16], Tensor[(216), float64], Tensor[(1, 112), int16]) */;
  %803 = tan(%797) /* ty=Tensor[(12, 16, 7), float32] */;
  %804 = %802.1;
  (%803, %804, %var_2579, %var_2580)
}

def @func_6638() -> (Tensor[(7, 16, 8), float32], Tensor[(7, 16, 8), float64], Tensor[(112), int16]) {
  %805 = @func_3369() /* ty=(Tensor[(7, 16, 8), float32], Tensor[(7, 16, 8), float32]) */;
  %806 = cast(meta[relay.Constant][41] /* ty=Tensor[(112), int16] */, dtype="int16") /* ty=Tensor[(112), int16] */;
  %807 = reshape(%806, newshape=[112]) /* ty=Tensor[(112), int16] */;
  %808 = @func_6098(%807) /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), bool], Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float32], Tensor[(11, 4, 10), int8], Tensor[(440), float64], Tensor[(112), int16], Tensor[(7, 16, 8), float64], Tensor[(9, 140), float64], Tensor[(9, 140), float64], Tensor[(7, 16, 8), float64], Tensor[(9, 140), float64]) */;
  %809 = %805.0;
  %810 = %808.8;
  (%809, %810, meta[relay.Constant][41] /* ty=Tensor[(112), int16] */)
}

def @func_6719() -> (Tensor[(7, 4, 8), float32], Tensor[(7, 4, 8), float64]) {
  %811 = cast(meta[relay.Constant][42] /* ty=Tensor[(7, 4, 8), float32] */, dtype="float32") /* ty=Tensor[(7, 4, 8), float32] */;
  %812 = cast(meta[relay.Constant][42] /* ty=Tensor[(7, 4, 8), float32] */, dtype="float64") /* ty=Tensor[(7, 4, 8), float64] */;
  %813 = atan(%811) /* ty=Tensor[(7, 4, 8), float32] */;
  %814 = asin(%812) /* ty=Tensor[(7, 4, 8), float64] */;
  (%813, %814)
}

def @func_5673(%var_5668: Tensor[(8, 2, 7), float32]) -> (Tensor[(7, 16, 8), uint64], Tensor[(8, 2, 7), uint32]) {
  %815 = @func_2565() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), uint64]) */;
  %816 = @func_4415() /* ty=(Tensor[(8, 2, 7), float32],) */;
  %817 = %816.0;
  %818 = cast(%var_5668, dtype="uint32") /* ty=Tensor[(8, 2, 7), uint32] */;
  %819 = shape_of(%817, dtype="int32") /* ty=Tensor[(3), int32] */;
  %820 = cast(%817, dtype="uint32") /* ty=Tensor[(8, 2, 7), uint32] */;
  %821 = dyn.reshape(%818, %819, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %822 = %815.1;
  %823 = add(%820, %821) /* ty=Tensor[(8, 2, 7), uint32] */;
  (%822, %823)
}

def @func_2565() -> (Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), uint64]) {
  %824 = @func_2164() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), uint64], Tensor[(112), int16]) */;
  %825 = @func_1678() /* ty=Tensor[(7, 16, 8), float64] */;
  %826 = %824.1;
  (%825, %826)
}

def @func_5338(%var_5327: Tensor[(720), uint16]) -> (Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(720), uint16]) {
  %827 = @func_1578() /* ty=(Tensor[(7, 16, 8), float32], Tensor[(7, 16, 8), float64]) */;
  %828 = %827.1;
  %829 = cast(%828, dtype="float32") /* ty=Tensor[(7, 16, 8), float32] */;
  %830 = exp(%829) /* ty=Tensor[(7, 16, 8), float32] */;
  %831 = cast(%828, dtype="float64") /* ty=Tensor[(7, 16, 8), float64] */;
  %832 = shape_of(%830, dtype="int32") /* ty=Tensor[(3), int32] */;
  %833 = cast(%830, dtype="float64") /* ty=Tensor[(7, 16, 8), float64] */;
  %834 = dyn.reshape(%831, %832, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %835 = @func_1522() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(112), int16]) */;
  %836 = cast(%var_5327, dtype="uint16") /* ty=Tensor[(720), uint16] */;
  %837 = reshape(%836, newshape=[8, 10, 9]) /* ty=Tensor[(8, 10, 9), uint16] */;
  %838 = @func_4083(%837) /* ty=(Tensor[(8, 10, 9), uint16], Tensor[(7, 16, 8), float64]) */;
  %839 = divide(%833, %834) /* ty=Tensor[(7, 16, 8), float64] */;
  %840 = %835.1;
  %841 = %838.1;
  (%839, %840, %841, %var_5327)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5065(%var_5055: uint16, %var_5056: Tensor[(11, 2, 1), uint16]) -> (Tensor[(11, 2, 1), uint16],) {
  %0 = cast(%var_5055, dtype="uint16") /* ty=uint16 */;
  %1 = cast(%var_5056, dtype="uint16") /* ty=Tensor[(11, 2, 1), uint16] */;
  %2 = subtract(%0, %1) /* ty=Tensor[(11, 2, 1), uint16] */;
  (%2,)
}

def @func_4022() -> (Tensor[(7, 16, 8), float64],) {
  %5 = fn () -> (Tensor[(7, 16, 8), float64],) {
    %3 = @func_1926() /* ty=(Tensor[(7, 16, 8), float64],) */;
    %4 = %3.0;
    (%4,)
  };
  %5() /* ty=(Tensor[(7, 16, 8), float64],) */
}

def @func_6358(%var_6347: Tensor[(112), int16]) -> (Tensor[(7, 16, 8), bool], Tensor[(9, 3, 8), float64], Tensor[(216), float64], Tensor[(112), int16]) {
  %6 = @func_6254() /* ty=(Tensor[(7, 16, 8), bool], Tensor[(7, 16, 8), float32]) */;
  %7 = cast(meta[relay.Constant][0] /* ty=Tensor[(216), float64] */, dtype="float64") /* ty=Tensor[(216), float64] */;
  %8 = cast(%var_6347, dtype="int16") /* ty=Tensor[(112), int16] */;
  %9 = reshape(%7, newshape=[216]) /* ty=Tensor[(216), float64] */;
  %10 = reshape(%8, newshape=[112]) /* ty=Tensor[(112), int16] */;
  %11 = @func_1885(%9, %10) /* ty=(Tensor[(7, 16, 8), float64], Tensor[(9, 3, 8), float64], Tensor[(216), float64], Tensor[(112), int16], Tensor[(7, 16, 8), float64]) */;
  %12 = %6.0;
  %13 = %11.1;
  (%12, %13, meta[relay.Constant][0] /* ty=Tensor[(216), float64] */, %var_6347)
}

def @func_3859(%var_3858: Tensor[(11, 4, 10), float64]) -> (Tensor[(11, 4, 10), int32], Tensor[(896), float32]) {
  %42 = fn (%var_3834: Tensor[(11, 4, 10), float64]) -> (Tensor[(11, 4, 10), int32], Tensor[(896), float32]) {
    %14 = @func_3781() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(112), uint8], Tensor[(11, 4, 10), float64], Tensor[(440), float64], Tensor[(7, 16, 8), float32]) */;
    %15 = %14.2;
    %16 = cast(%var_3834, dtype="float32") /* ty=Tensor[(11, 4, 10), float32] */;
    %17 = shape_of(%15, dtype="int32") /* ty=Tensor[(3), int32] */;
    %18 = cast(%15, dtype="float32") /* ty=Tensor[(11, 4, 10), float32] */;
    %19 = dyn.reshape(%16, %17, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %20 = floor_mod(%18, %19) /* ty=Tensor[(11, 4, 10), float32] */;
    %21 = cast(%15, dtype="int32") /* ty=Tensor[(11, 4, 10), int32] */;
    %22 = shape_of(%20, dtype="int32") /* ty=Tensor[(3), int32] */;
    %23 = cast(%20, dtype="int32") /* ty=Tensor[(11, 4, 10), int32] */;
    %24 = dyn.reshape(%21, %22, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %25 = cast(meta[relay.Constant][1] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
    %26 = reshape(%25, newshape=[7, 16, 8]) /* ty=Tensor[(7, 16, 8), float64] */;
    %27 = @func_3170(%26) /* ty=(Tensor[(7, 16, 8), float64],) */;
    %28 = %27.0;
    %29 = cast(%28, dtype="bool") /* ty=Tensor[(7, 16, 8), bool] */;
    %30 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(896), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %31 = cast(meta[relay.Constant][1] /* ty=Tensor[(896), float64] */, dtype="bool") /* ty=Tensor[(896), bool] */;
    %32 = dyn.reshape(%29, %30, newshape=[]) /* ty=Tensor[(?), bool] */;
    %33 = logical_and(%31, %32) /* ty=Tensor[(896), bool] */;
    %34 = @func_1578() /* ty=(Tensor[(7, 16, 8), float32], Tensor[(7, 16, 8), float64]) */;
    %35 = %34.0;
    %36 = cast(%35, dtype="float32") /* ty=Tensor[(7, 16, 8), float32] */;
    %37 = shape_of(%33, dtype="int32") /* ty=Tensor[(1), int32] */;
    %38 = cast(%33, dtype="float32") /* ty=Tensor[(896), float32] */;
    %39 = dyn.reshape(%36, %37, newshape=[]) /* ty=Tensor[(?), float32] */;
    %40 = minimum(%23, %24) /* ty=Tensor[(11, 4, 10), int32] */;
    %41 = divide(%38, %39) /* ty=Tensor[(896), float32] */;
    (%40, %41)
  };
  %42(%var_3858) /* ty=(Tensor[(11, 4, 10), int32], Tensor[(896), float32]) */
}

def @func_3170(%var_3164: Tensor[(7, 16, 8), float64]) -> (Tensor[(7, 16, 8), float64],) {
  %43 = @func_2565() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), uint64]) */;
  %44 = %43.0;
  %45 = cast(%var_3164, dtype="float64") /* ty=Tensor[(7, 16, 8), float64] */;
  %46 = shape_of(%44, dtype="int32") /* ty=Tensor[(3), int32] */;
  %47 = cast(%44, dtype="float64") /* ty=Tensor[(7, 16, 8), float64] */;
  %48 = dyn.reshape(%45, %46, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %49 = maximum(%47, %48) /* ty=Tensor[(7, 16, 8), float64] */;
  (%49,)
}

def @func_3193() -> (Tensor[(7, 16, 8), float64],) {
  %50 = @func_1944() /* ty=(Tensor[(7, 16, 8), float64],) */;
  %51 = %50.0;
  (%51,)
}

def @func_3514() -> Tensor[(7, 16, 8), float64] {
  %52 = @func_2164() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), uint64], Tensor[(112), int16]) */;
  %52.0
}

def @func_6009(%var_6007: Tensor[(120), float32], %var_6008: Tensor[(1320), float32]) -> (Tensor[(7, 16, 8), float32], Tensor[(12, 10, 11), bool], Tensor[(120), float32], Tensor[(1320), float32]) {
  @func_6005(%var_6007, %var_6008) /* ty=(Tensor[(7, 16, 8), float32], Tensor[(12, 10, 11), bool], Tensor[(120), float32], Tensor[(1320), float32]) */
}

def @func_2165() -> (Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), uint64], Tensor[(112), int16]) {
  %59 = fn () -> (Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), uint64], Tensor[(112), int16]) {
    %53 = @func_1926() /* ty=(Tensor[(7, 16, 8), float64],) */;
    %54 = cast(meta[relay.Constant][2] /* ty=Tensor[(112), int16] */, dtype="int16") /* ty=Tensor[(112), int16] */;
    %55 = reshape(%54, newshape=[112]) /* ty=Tensor[(112), int16] */;
    %56 = @func_1801(%55) /* ty=(Tensor[(7, 16, 8), float32], Tensor[(7, 16, 8), uint64], Tensor[(112), int16]) */;
    %57 = %53.0;
    %58 = %56.1;
    (%57, %58, meta[relay.Constant][2] /* ty=Tensor[(112), int16] */)
  };
  %59() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), uint64], Tensor[(112), int16]) */
}

def @func_4028(%var_4023: Tensor[(12, 4, 3), uint32], %var_4024: Tensor[(12, 4, 3), uint32]) -> (Tensor[(12, 4, 3), uint32],) {
  %60 = cast(%var_4024, dtype="uint32") /* ty=Tensor[(12, 4, 3), uint32] */;
  %61 = shape_of(%var_4023, dtype="int32") /* ty=Tensor[(3), int32] */;
  %62 = cast(%var_4023, dtype="uint32") /* ty=Tensor[(12, 4, 3), uint32] */;
  %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %64 = bitwise_or(%62, %63) /* ty=Tensor[(12, 4, 3), uint32] */;
  (%64,)
}

def @func_4515(%var_4506: Tensor[(9, 6, 6), uint16], %var_4507: Tensor[(9, 6, 6), uint16]) -> (Tensor[(9, 6, 6), uint16], Tensor[(9, 6, 6), float32]) {
  %65 = cast(%var_4507, dtype="uint16") /* ty=Tensor[(9, 6, 6), uint16] */;
  %66 = shape_of(%var_4506, dtype="int32") /* ty=Tensor[(3), int32] */;
  %67 = cast(%var_4506, dtype="uint16") /* ty=Tensor[(9, 6, 6), uint16] */;
  %68 = dyn.reshape(%65, %66, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %69 = cast(%var_4506, dtype="float32") /* ty=Tensor[(9, 6, 6), float32] */;
  %70 = minimum(%67, %68) /* ty=Tensor[(9, 6, 6), uint16] */;
  %71 = log10(%69) /* ty=Tensor[(9, 6, 6), float32] */;
  (%70, %71)
}

def @func_4651() -> (Tensor[(7, 16, 8), uint32],) {
  %72 = @func_3270() /* ty=(Tensor[(7, 16, 8), uint32],) */;
  %73 = %72.0;
  (%73,)
}

def @func_2284(%var_2279: Tensor[(7, 16, 8), float64]) -> (Tensor[(7, 16, 8), bool],) {
  %74 = @func_1602() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(11, 4, 10), float64], Tensor[(440), float64]) */;
  %75 = %74.1;
  %76 = cast(%var_2279, dtype="bool") /* ty=Tensor[(7, 16, 8), bool] */;
  %77 = shape_of(%75, dtype="int32") /* ty=Tensor[(3), int32] */;
  %78 = cast(%75, dtype="bool") /* ty=Tensor[(7, 16, 8), bool] */;
  %79 = dyn.reshape(%76, %77, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %80 = logical_or(%78, %79) /* ty=Tensor[(7, 16, 8), bool] */;
  (%80,)
}

def @main(%var_6900: Tensor[(112), int16]) -> (Tensor[(7, 16, 8), float32], Tensor[(9, 6, 6), uint16], Tensor[(324), uint16], Tensor[(112), float32], Tensor[(7, 16, 8), uint32]) {
  %81 = @func_6812() /* ty=(Tensor[(7, 16, 8), float32],) */;
  %82 = cast(meta[relay.Constant][3] /* ty=Tensor[(324), uint16] */, dtype="uint16") /* ty=Tensor[(324), uint16] */;
  %83 = cast(meta[relay.Constant][3] /* ty=Tensor[(324), uint16] */, dtype="uint16") /* ty=Tensor[(324), uint16] */;
  %84 = reshape(%82, newshape=[9, 6, 6]) /* ty=Tensor[(9, 6, 6), uint16] */;
  %85 = reshape(%83, newshape=[9, 6, 6]) /* ty=Tensor[(9, 6, 6), uint16] */;
  %86 = @func_4519(%84, %85) /* ty=(Tensor[(9, 6, 6), uint16], Tensor[(9, 6, 6), float32]) */;
  %87 = @func_2165() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), uint64], Tensor[(112), int16]) */;
  %88 = %87.2;
  %89 = cast(%var_6900, dtype="float32") /* ty=Tensor[(112), float32] */;
  %90 = shape_of(%88, dtype="int32") /* ty=Tensor[(1), int32] */;
  %91 = cast(%88, dtype="float32") /* ty=Tensor[(112), float32] */;
  %92 = dyn.reshape(%89, %90, newshape=[]) /* ty=Tensor[(?), float32] */;
  %93 = @func_6186() /* ty=Tensor[(7, 16, 8), float64] */;
  %94 = @func_1524() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(112), int16]) */;
  %95 = %94.0;
  %96 = cast(%95, dtype="uint32") /* ty=Tensor[(7, 16, 8), uint32] */;
  %97 = shape_of(%93, dtype="int32") /* ty=Tensor[(3), int32] */;
  %98 = cast(%93, dtype="uint32") /* ty=Tensor[(7, 16, 8), uint32] */;
  %99 = dyn.reshape(%96, %97, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %100 = %81.0;
  %101 = %86.0;
  %102 = divide(%91, %92) /* ty=Tensor[(112), float32] */;
  %103 = left_shift(%98, %99) /* ty=Tensor[(7, 16, 8), uint32] */;
  (%100, %101, meta[relay.Constant][3] /* ty=Tensor[(324), uint16] */, %102, %103)
}

def @func_4519(%var_4517: Tensor[(9, 6, 6), uint16], %var_4518: Tensor[(9, 6, 6), uint16]) -> (Tensor[(9, 6, 6), uint16], Tensor[(9, 6, 6), float32]) {
  @func_4515(%var_4517, %var_4518) /* ty=(Tensor[(9, 6, 6), uint16], Tensor[(9, 6, 6), float32]) */
}

def @func_6720() -> (Tensor[(7, 4, 8), float32], Tensor[(7, 4, 8), float64]) {
  %108 = fn () -> (Tensor[(7, 4, 8), float32], Tensor[(7, 4, 8), float64]) {
    %104 = cast(meta[relay.Constant][4] /* ty=Tensor[(7, 4, 8), float32] */, dtype="float32") /* ty=Tensor[(7, 4, 8), float32] */;
    %105 = cast(meta[relay.Constant][4] /* ty=Tensor[(7, 4, 8), float32] */, dtype="float64") /* ty=Tensor[(7, 4, 8), float64] */;
    %106 = atan(%104) /* ty=Tensor[(7, 4, 8), float32] */;
    %107 = asin(%105) /* ty=Tensor[(7, 4, 8), float64] */;
    (%106, %107)
  };
  %108() /* ty=(Tensor[(7, 4, 8), float32], Tensor[(7, 4, 8), float64]) */
}

def @func_1241(%var_1224: Tensor[(7, 16, 8), float64], %var_1233: Tensor[(1, 112), int16]) -> (Tensor[(7, 16, 8), uint64], Tensor[(8, 2, 7), int16], Tensor[(216), float64], Tensor[(1, 112), int16]) {
  %109 = @func_1124() /* ty=Tensor[(7, 16, 8), float64] */;
  %110 = cast(%var_1224, dtype="uint64") /* ty=Tensor[(7, 16, 8), uint64] */;
  %111 = shape_of(%109, dtype="int32") /* ty=Tensor[(3), int32] */;
  %112 = cast(%109, dtype="uint64") /* ty=Tensor[(7, 16, 8), uint64] */;
  %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %114 = cast(meta[relay.Constant][5] /* ty=Tensor[(216), float64] */, dtype="float64") /* ty=Tensor[(216), float64] */;
  %115 = cast(%var_1233, dtype="int16") /* ty=Tensor[(1, 112), int16] */;
  %116 = reshape(%114, newshape=[9, 3, 8]) /* ty=Tensor[(9, 3, 8), float64] */;
  %117 = reshape(%115, newshape=[112]) /* ty=Tensor[(112), int16] */;
  %118 = @func_1082(%116, %117) /* ty=(Tensor[(9, 3, 8), float64], Tensor[(8, 2, 7), int16], Tensor[(112), int16], Tensor[(8, 2, 7), int16]) */;
  %119 = bitwise_xor(%112, %113) /* ty=Tensor[(7, 16, 8), uint64] */;
  %120 = %118.3;
  (%119, %120, meta[relay.Constant][5] /* ty=Tensor[(216), float64] */, %var_1233)
}

def @func_6702() -> Tensor[(8, 2, 7), float32] {
  %122 = fn () -> Tensor[(8, 2, 7), float32] {
    %121 = @func_4415() /* ty=(Tensor[(8, 2, 7), float32],) */;
    %121.0
  };
  %122() /* ty=Tensor[(8, 2, 7), float32] */
}

def @func_2023(%var_2022: Tensor[(7, 16, 8), float64]) -> (Tensor[(7, 16, 8), bool],) {
  %130 = fn (%var_2016: Tensor[(7, 16, 8), float64]) -> (Tensor[(7, 16, 8), bool],) {
    %123 = @func_1944() /* ty=(Tensor[(7, 16, 8), float64],) */;
    %124 = %123.0;
    %125 = cast(%var_2016, dtype="bool") /* ty=Tensor[(7, 16, 8), bool] */;
    %126 = shape_of(%124, dtype="int32") /* ty=Tensor[(3), int32] */;
    %127 = cast(%124, dtype="bool") /* ty=Tensor[(7, 16, 8), bool] */;
    %128 = dyn.reshape(%125, %126, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %129 = equal(%127, %128) /* ty=Tensor[(7, 16, 8), bool] */;
    (%129,)
  };
  %130(%var_2022) /* ty=(Tensor[(7, 16, 8), bool],) */
}

def @func_5675(%var_5674: Tensor[(8, 2, 7), float32]) -> (Tensor[(7, 16, 8), uint64], Tensor[(8, 2, 7), uint32]) {
  %140 = fn (%var_5668: Tensor[(8, 2, 7), float32]) -> (Tensor[(7, 16, 8), uint64], Tensor[(8, 2, 7), uint32]) {
    %131 = @func_2565() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), uint64]) */;
    %132 = @func_4415() /* ty=(Tensor[(8, 2, 7), float32],) */;
    %133 = %132.0;
    %134 = cast(%var_5668, dtype="uint32") /* ty=Tensor[(8, 2, 7), uint32] */;
    %135 = shape_of(%133, dtype="int32") /* ty=Tensor[(3), int32] */;
    %136 = cast(%133, dtype="uint32") /* ty=Tensor[(8, 2, 7), uint32] */;
    %137 = dyn.reshape(%134, %135, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %138 = %131.1;
    %139 = add(%136, %137) /* ty=Tensor[(8, 2, 7), uint32] */;
    (%138, %139)
  };
  %140(%var_5674) /* ty=(Tensor[(7, 16, 8), uint64], Tensor[(8, 2, 7), uint32]) */
}

def @func_6321() -> Tensor[(7, 16, 8), float64] {
  %141 = @func_1616() /* ty=(Tensor[(7, 16, 8), float64],) */;
  %141.0
}

def @func_2857(%var_2749: Tensor[(9, 11, 10), float64], %var_2783: Tensor[(1, 216), float64], %var_2784: Tensor[(112), int16]) -> (Tensor[(6, 13, 11), float64], Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(9, 3, 8), float64], Tensor[(1, 216), float64], Tensor[(112), int16], Tensor[(7, 16, 8), float64], Tensor[(9, 11, 10), uint8], Tensor[(7, 16, 8), float64], Tensor[(9, 11, 10), float64], Tensor[(7, 16, 8), float64], Tensor[(9, 11, 10), float64], Tensor[(9, 11, 10), int32]) {
  %142 = @func_2661() /* ty=(Tensor[(6, 13, 11), float64], Tensor[(7, 16, 8), float32]) */;
  %143 = @func_1616() /* ty=(Tensor[(7, 16, 8), float64],) */;
  %144 = @func_1944() /* ty=(Tensor[(7, 16, 8), float64],) */;
  %145 = cast(%var_2783, dtype="float64") /* ty=Tensor[(1, 216), float64] */;
  %146 = cast(%var_2784, dtype="int16") /* ty=Tensor[(112), int16] */;
  %147 = reshape(%145, newshape=[9, 3, 8]) /* ty=Tensor[(9, 3, 8), float64] */;
  %148 = reshape(%146, newshape=[112]) /* ty=Tensor[(112), int16] */;
  %149 = @func_1082(%147, %148) /* ty=(Tensor[(9, 3, 8), float64], Tensor[(8, 2, 7), int16], Tensor[(112), int16], Tensor[(8, 2, 7), int16]) */;
  %150 = cast(%var_2749, dtype="float64") /* ty=Tensor[(9, 11, 10), float64] */;
  %151 = acosh(%150) /* ty=Tensor[(9, 11, 10), float64] */;
  %152 = cast(%var_2749, dtype="float64") /* ty=Tensor[(9, 11, 10), float64] */;
  %153 = shape_of(%151, dtype="int32") /* ty=Tensor[(3), int32] */;
  %154 = cast(%151, dtype="float64") /* ty=Tensor[(9, 11, 10), float64] */;
  %155 = dyn.reshape(%152, %153, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %156 = mod(%154, %155) /* ty=Tensor[(9, 11, 10), float64] */;
  %157 = cast(%156, dtype="int32") /* ty=Tensor[(9, 11, 10), int32] */;
  %158 = shape_of(%151, dtype="int32") /* ty=Tensor[(3), int32] */;
  %159 = cast(%151, dtype="int32") /* ty=Tensor[(9, 11, 10), int32] */;
  %160 = dyn.reshape(%157, %158, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %161 = right_shift(%159, %160) /* ty=Tensor[(9, 11, 10), int32] */;
  %162 = cast(%161, dtype="uint8") /* ty=Tensor[(9, 11, 10), uint8] */;
  %163 = shape_of(%151, dtype="int32") /* ty=Tensor[(3), int32] */;
  %164 = cast(%151, dtype="uint8") /* ty=Tensor[(9, 11, 10), uint8] */;
  %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %166 = @func_1926() /* ty=(Tensor[(7, 16, 8), float64],) */;
  %167 = cast(%161, dtype="float64") /* ty=Tensor[(9, 11, 10), float64] */;
  %168 = acos(%167) /* ty=Tensor[(9, 11, 10), float64] */;
  %169 = cast(%168, dtype="float64") /* ty=Tensor[(9, 11, 10), float64] */;
  %170 = @func_1522() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(112), int16]) */;
  %171 = cast(%168, dtype="float64") /* ty=Tensor[(9, 11, 10), float64] */;
  %172 = cast(%156, dtype="int32") /* ty=Tensor[(9, 11, 10), int32] */;
  %173 = shape_of(%168, dtype="int32") /* ty=Tensor[(3), int32] */;
  %174 = cast(%168, dtype="int32") /* ty=Tensor[(9, 11, 10), int32] */;
  %175 = dyn.reshape(%172, %173, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %176 = %142.0;
  %177 = %143.0;
  %178 = %144.0;
  %179 = %149.0;
  %180 = @func_1124() /* ty=Tensor[(7, 16, 8), float64] */;
  %181 = multiply(%164, %165) /* ty=Tensor[(9, 11, 10), uint8] */;
  %182 = %166.0;
  %183 = tan(%169) /* ty=Tensor[(9, 11, 10), float64] */;
  %184 = %170.1;
  %185 = cosh(%171) /* ty=Tensor[(9, 11, 10), float64] */;
  %186 = bitwise_or(%174, %175) /* ty=Tensor[(9, 11, 10), int32] */;
  (%176, %177, %178, %179, %var_2783, %var_2784, %180, %181, %182, %183, %184, %185, %186)
}

def @func_2862(%var_2859: Tensor[(9, 11, 10), float64], %var_2860: Tensor[(1, 216), float64], %var_2861: Tensor[(112), int16]) -> (Tensor[(6, 13, 11), float64], Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(9, 3, 8), float64], Tensor[(1, 216), float64], Tensor[(112), int16], Tensor[(7, 16, 8), float64], Tensor[(9, 11, 10), uint8], Tensor[(7, 16, 8), float64], Tensor[(9, 11, 10), float64], Tensor[(7, 16, 8), float64], Tensor[(9, 11, 10), float64], Tensor[(9, 11, 10), int32]) {
  @func_2857(%var_2859, %var_2860, %var_2861) /* ty=(Tensor[(6, 13, 11), float64], Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(9, 3, 8), float64], Tensor[(1, 216), float64], Tensor[(112), int16], Tensor[(7, 16, 8), float64], Tensor[(9, 11, 10), uint8], Tensor[(7, 16, 8), float64], Tensor[(9, 11, 10), float64], Tensor[(7, 16, 8), float64], Tensor[(9, 11, 10), float64], Tensor[(9, 11, 10), int32]) */
}

def @func_4756() -> (Tensor[(7, 16, 8), bool],) {
  @func_4754() /* ty=(Tensor[(7, 16, 8), bool],) */
}

def @func_1580() -> (Tensor[(7, 16, 8), float32], Tensor[(7, 16, 8), float64]) {
  @func_1578() /* ty=(Tensor[(7, 16, 8), float32], Tensor[(7, 16, 8), float64]) */
}

def @func_1679() -> Tensor[(7, 16, 8), float64] {
  %188 = fn () -> Tensor[(7, 16, 8), float64] {
    %187 = @func_1616() /* ty=(Tensor[(7, 16, 8), float64],) */;
    %187.0
  };
  %188() /* ty=Tensor[(7, 16, 8), float64] */
}

def @func_1945() -> (Tensor[(7, 16, 8), float64],) {
  %191 = fn () -> (Tensor[(7, 16, 8), float64],) {
    %189 = @func_1602() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(11, 4, 10), float64], Tensor[(440), float64]) */;
    %190 = %189.1;
    (%190,)
  };
  %191() /* ty=(Tensor[(7, 16, 8), float64],) */
}

def @func_1849(%var_1847: Tensor[(7, 16, 8), float64]) -> (Tensor[(7, 16, 8), bool],) {
  @func_1846(%var_1847) /* ty=(Tensor[(7, 16, 8), bool],) */
}

def @func_3791() -> (Tensor[(7, 16, 8), float64],) {
  %194 = fn () -> (Tensor[(7, 16, 8), float64],) {
    %192 = @func_3781() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(112), uint8], Tensor[(11, 4, 10), float64], Tensor[(440), float64], Tensor[(7, 16, 8), float32]) */;
    %193 = %192.0;
    (%193,)
  };
  %194() /* ty=(Tensor[(7, 16, 8), float64],) */
}

def @func_6409(%var_6379: Tensor[(3, 14, 1), int8], %var_6380: Tensor[(3, 14, 3), int8]) -> Tensor[(3, 14, 3), int16] {
  %195 = cast(%var_6379, dtype="int8") /* ty=Tensor[(3, 14, 1), int8] */;
  %196 = cast(%var_6380, dtype="int8") /* ty=Tensor[(3, 14, 3), int8] */;
  %197 = add(%195, %196) /* ty=Tensor[(3, 14, 3), int8] */;
  %198 = cast(%197, dtype="int16") /* ty=Tensor[(3, 14, 3), int16] */;
  %199 = cast(%var_6379, dtype="int16") /* ty=Tensor[(3, 14, 1), int16] */;
  bitwise_and(%198, %199) /* ty=Tensor[(3, 14, 3), int16] */
}

def @func_2645() -> Tensor[(7, 16, 8), float32] {
  %200 = @func_1578() /* ty=(Tensor[(7, 16, 8), float32], Tensor[(7, 16, 8), float64]) */;
  %200.0
}

def @func_4469(%var_4444: Tensor[(896), float64], %var_4455: Tensor[(40), float32]) -> (Tensor[(112), int16], Tensor[(7, 16, 8), bool], Tensor[(896), float64], Tensor[(15, 7, 8), float64], Tensor[(40), float32], Tensor[(7, 16, 8), float64]) {
  %201 = @func_4154() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(8, 2, 7), int16], Tensor[(112), int16], Tensor[(7, 16, 8), bool]) */;
  %202 = cast(%var_4444, dtype="float64") /* ty=Tensor[(896), float64] */;
  %203 = reshape(%202, newshape=[7, 16, 8]) /* ty=Tensor[(7, 16, 8), float64] */;
  %204 = @func_1846(%203) /* ty=(Tensor[(7, 16, 8), bool],) */;
  %205 = cast(%var_4455, dtype="float32") /* ty=Tensor[(40), float32] */;
  %206 = reshape(%205, newshape=[2, 5, 4]) /* ty=Tensor[(2, 5, 4), float32] */;
  %207 = @func_3636(%206) /* ty=(Tensor[(2, 5, 4), float32], Tensor[(15, 7, 8), float64], Tensor[(12, 70), float32]) */;
  %208 = @func_1944() /* ty=(Tensor[(7, 16, 8), float64],) */;
  %209 = %201.2;
  %210 = %204.0;
  %211 = %207.1;
  %212 = %208.0;
  (%209, %210, %var_4444, %211, %var_4455, %212)
}

def @func_1082(%var_1057: Tensor[(9, 3, 8), float64], %var_1077: Tensor[(112), int16]) -> (Tensor[(9, 3, 8), float64], Tensor[(8, 2, 7), int16], Tensor[(112), int16], Tensor[(8, 2, 7), int16]) {
  %213 = cast(%var_1057, dtype="float64") /* ty=Tensor[(9, 3, 8), float64] */;
  %214 = cast(%var_1077, dtype="int16") /* ty=Tensor[(112), int16] */;
  %215 = reshape(%214, newshape=[8, 2, 7]) /* ty=Tensor[(8, 2, 7), int16] */;
  %216 = @func_1042(%215) /* ty=(Tensor[(8, 2, 7), int16], Tensor[(15, 7, 8), float64], Tensor[(840), float32]) */;
  %217 = %216.0;
  %218 = cast(%217, dtype="int16") /* ty=Tensor[(8, 2, 7), int16] */;
  %219 = reshape(%218, newshape=[8, 2, 7]) /* ty=Tensor[(8, 2, 7), int16] */;
  %220 = @func_1042(%219) /* ty=(Tensor[(8, 2, 7), int16], Tensor[(15, 7, 8), float64], Tensor[(840), float32]) */;
  %221 = erf(%213) /* ty=Tensor[(9, 3, 8), float64] */;
  %222 = %220.0;
  (%221, %217, %var_1077, %222)
}

def @func_3271() -> (Tensor[(7, 16, 8), uint32],) {
  %232 = fn () -> (Tensor[(7, 16, 8), uint32],) {
    %223 = @func_3193() /* ty=(Tensor[(7, 16, 8), float64],) */;
    %224 = %223.0;
    %225 = @func_3088() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64]) */;
    %226 = %225.0;
    %227 = cast(%226, dtype="uint32") /* ty=Tensor[(7, 16, 8), uint32] */;
    %228 = shape_of(%224, dtype="int32") /* ty=Tensor[(3), int32] */;
    %229 = cast(%224, dtype="uint32") /* ty=Tensor[(7, 16, 8), uint32] */;
    %230 = dyn.reshape(%227, %228, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %231 = bitwise_or(%229, %230) /* ty=Tensor[(7, 16, 8), uint32] */;
    (%231,)
  };
  %232() /* ty=(Tensor[(7, 16, 8), uint32],) */
}

def @func_5813() -> Tensor[(7, 16, 8), float64] {
  %234 = fn () -> Tensor[(7, 16, 8), float64] {
    %233 = @func_1616() /* ty=(Tensor[(7, 16, 8), float64],) */;
    %233.0
  };
  %234() /* ty=Tensor[(7, 16, 8), float64] */
}

def @func_4273() -> (Tensor[(112), int16], Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64]) {
  %235 = @func_1522() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(112), int16]) */;
  %236 = @func_2645() /* ty=Tensor[(7, 16, 8), float32] */;
  %237 = cast(%236, dtype="float64") /* ty=Tensor[(7, 16, 8), float64] */;
  %238 = @func_1578() /* ty=(Tensor[(7, 16, 8), float32], Tensor[(7, 16, 8), float64]) */;
  %239 = cast(%236, dtype="float64") /* ty=Tensor[(7, 16, 8), float64] */;
  %240 = %235.2;
  %241 = sqrt(%237) /* ty=Tensor[(7, 16, 8), float64] */;
  %242 = %238.1;
  %243 = rsqrt(%239) /* ty=Tensor[(7, 16, 8), float64] */;
  (%240, %241, %242, %243)
}

def @func_1522() -> (Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(112), int16]) {
  %244 = cast(meta[relay.Constant][6] /* ty=Tensor[(112), int16] */, dtype="int16") /* ty=Tensor[(112), int16] */;
  %245 = reshape(%244, newshape=[28, 4]) /* ty=Tensor[(28, 4), int16] */;
  %246 = @func_1191(%245) /* ty=(Tensor[(7, 16, 8), float64], Tensor[(8, 2, 7), int16], Tensor[(28, 4), int16]) */;
  %247 = @func_1124() /* ty=Tensor[(7, 16, 8), float64] */;
  %248 = %246.0;
  (%247, %248, meta[relay.Constant][6] /* ty=Tensor[(112), int16] */)
}

def @func_5698() -> (Tensor[(7, 16, 8), float32],) {
  @func_5696() /* ty=(Tensor[(7, 16, 8), float32],) */
}

def @func_3315() -> Tensor[(7, 16, 8), float64] {
  @func_3313() /* ty=Tensor[(7, 16, 8), float64] */
}

def @func_4183(%var_4182: Tensor[(7, 16, 8), float64]) -> (Tensor[(7, 16, 8), bool],) {
  %255 = fn (%var_4169: Tensor[(7, 16, 8), float64]) -> (Tensor[(7, 16, 8), bool],) {
    %249 = @func_1124() /* ty=Tensor[(7, 16, 8), float64] */;
    %250 = cast(%var_4169, dtype="bool") /* ty=Tensor[(7, 16, 8), bool] */;
    %251 = shape_of(%249, dtype="int32") /* ty=Tensor[(3), int32] */;
    %252 = cast(%249, dtype="bool") /* ty=Tensor[(7, 16, 8), bool] */;
    %253 = dyn.reshape(%250, %251, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %254 = logical_and(%252, %253) /* ty=Tensor[(7, 16, 8), bool] */;
    (%254,)
  };
  %255(%var_4182) /* ty=(Tensor[(7, 16, 8), bool],) */
}

def @func_5422(%var_5420: Tensor[(112), int16], %var_5421: Tensor[(1456), int32]) -> (Tensor[(7, 16, 8), float64], Tensor[(784), float32], Tensor[(112), int16], Tensor[(1456), int32]) {
  @func_5418(%var_5420, %var_5421) /* ty=(Tensor[(7, 16, 8), float64], Tensor[(784), float32], Tensor[(112), int16], Tensor[(1456), int32]) */
}

def @func_4083(%var_4077: Tensor[(8, 10, 9), uint16]) -> (Tensor[(8, 10, 9), uint16], Tensor[(7, 16, 8), float64]) {
  %256 = cast(meta[relay.Constant][7] /* ty=Tensor[(1, 10, 9), uint16] */, dtype="uint16") /* ty=Tensor[(1, 10, 9), uint16] */;
  %257 = cast(%var_4077, dtype="uint16") /* ty=Tensor[(8, 10, 9), uint16] */;
  %258 = bitwise_xor(%256, %257) /* ty=Tensor[(8, 10, 9), uint16] */;
  %259 = @func_3313() /* ty=Tensor[(7, 16, 8), float64] */;
  (%258, %259)
}

def @func_1889(%var_1887: Tensor[(216), float64], %var_1888: Tensor[(112), int16]) -> (Tensor[(7, 16, 8), float64], Tensor[(9, 3, 8), float64], Tensor[(216), float64], Tensor[(112), int16], Tensor[(7, 16, 8), float64]) {
  @func_1885(%var_1887, %var_1888) /* ty=(Tensor[(7, 16, 8), float64], Tensor[(9, 3, 8), float64], Tensor[(216), float64], Tensor[(112), int16], Tensor[(7, 16, 8), float64]) */
}

def @func_1429(%var_1427: Tensor[(7, 16, 8), float64], %var_1428: Tensor[(112), int16]) -> (Tensor[(7, 16, 8), bool], Tensor[(7, 16, 8), int16], Tensor[(7, 16, 8), uint64], Tensor[(112), int16]) {
  %277 = fn (%var_1397: Tensor[(7, 16, 8), float64], %var_1422: Tensor[(112), int16]) -> (Tensor[(7, 16, 8), bool], Tensor[(7, 16, 8), int16], Tensor[(7, 16, 8), uint64], Tensor[(112), int16]) {
    %260 = @func_1124() /* ty=Tensor[(7, 16, 8), float64] */;
    %261 = cast(%var_1397, dtype="bool") /* ty=Tensor[(7, 16, 8), bool] */;
    %262 = shape_of(%260, dtype="int32") /* ty=Tensor[(3), int32] */;
    %263 = cast(%260, dtype="bool") /* ty=Tensor[(7, 16, 8), bool] */;
    %264 = dyn.reshape(%261, %262, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %265 = cast(%var_1397, dtype="int16") /* ty=Tensor[(7, 16, 8), int16] */;
    %266 = shape_of(%260, dtype="int32") /* ty=Tensor[(3), int32] */;
    %267 = cast(%260, dtype="int16") /* ty=Tensor[(7, 16, 8), int16] */;
    %268 = dyn.reshape(%265, %266, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %269 = logical_xor(%267, %268) /* ty=Tensor[(7, 16, 8), int16] */;
    %270 = cast(%269, dtype="float64") /* ty=Tensor[(7, 16, 8), float64] */;
    %271 = cast(%var_1422, dtype="int16") /* ty=Tensor[(112), int16] */;
    %272 = reshape(%270, newshape=[7, 16, 8]) /* ty=Tensor[(7, 16, 8), float64] */;
    %273 = reshape(%271, newshape=[1, 112]) /* ty=Tensor[(1, 112), int16] */;
    %274 = @func_1241(%272, %273) /* ty=(Tensor[(7, 16, 8), uint64], Tensor[(8, 2, 7), int16], Tensor[(216), float64], Tensor[(1, 112), int16]) */;
    %275 = less(%263, %264) /* ty=Tensor[(7, 16, 8), bool] */;
    %276 = %274.0;
    (%275, %269, %276, %var_1422)
  };
  %277(%var_1427, %var_1428) /* ty=(Tensor[(7, 16, 8), bool], Tensor[(7, 16, 8), int16], Tensor[(7, 16, 8), uint64], Tensor[(112), int16]) */
}

def @func_4096() -> (Tensor[(7, 16, 8), float64],) {
  @func_4094() /* ty=(Tensor[(7, 16, 8), float64],) */
}

def @func_6685() -> (Tensor[(9, 6, 6), uint16], Tensor[(324), uint16], Tensor[(6, 5, 3), int16]) {
  %296 = fn () -> (Tensor[(9, 6, 6), uint16], Tensor[(324), uint16], Tensor[(6, 5, 3), int16]) {
    %278 = cast(meta[relay.Constant][8] /* ty=Tensor[(324), uint16] */, dtype="uint16") /* ty=Tensor[(324), uint16] */;
    %279 = cast(meta[relay.Constant][8] /* ty=Tensor[(324), uint16] */, dtype="uint16") /* ty=Tensor[(324), uint16] */;
    %280 = reshape(%278, newshape=[9, 6, 6]) /* ty=Tensor[(9, 6, 6), uint16] */;
    %281 = reshape(%279, newshape=[9, 6, 6]) /* ty=Tensor[(9, 6, 6), uint16] */;
    %282 = @func_4515(%280, %281) /* ty=(Tensor[(9, 6, 6), uint16], Tensor[(9, 6, 6), float32]) */;
    %283 = cast(meta[relay.Constant][9] /* ty=Tensor[(6, 5, 3), uint16] */, dtype="float64") /* ty=Tensor[(6, 5, 3), float64] */;
    %284 = sigmoid(%283) /* ty=Tensor[(6, 5, 3), float64] */;
    %285 = cast(meta[relay.Constant][9] /* ty=Tensor[(6, 5, 3), uint16] */, dtype="uint16") /* ty=Tensor[(6, 5, 3), uint16] */;
    %286 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(6, 5, 3), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %287 = cast(meta[relay.Constant][10] /* ty=Tensor[(6, 5, 3), uint16] */, dtype="uint16") /* ty=Tensor[(6, 5, 3), uint16] */;
    %288 = dyn.reshape(%285, %286, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %289 = subtract(%287, %288) /* ty=Tensor[(6, 5, 3), uint16] */;
    %290 = cast(%289, dtype="int16") /* ty=Tensor[(6, 5, 3), int16] */;
    %291 = shape_of(%284, dtype="int32") /* ty=Tensor[(3), int32] */;
    %292 = cast(%284, dtype="int16") /* ty=Tensor[(6, 5, 3), int16] */;
    %293 = dyn.reshape(%290, %291, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %294 = %282.0;
    %295 = bitwise_or(%292, %293) /* ty=Tensor[(6, 5, 3), int16] */;
    (%294, meta[relay.Constant][8] /* ty=Tensor[(324), uint16] */, %295)
  };
  %296() /* ty=(Tensor[(9, 6, 6), uint16], Tensor[(324), uint16], Tensor[(6, 5, 3), int16]) */
}

def @func_6812() -> (Tensor[(7, 16, 8), float32],) {
  @func_6810() /* ty=(Tensor[(7, 16, 8), float32],) */
}

def @func_6520(%var_6518: Tensor[(6, 3, 6), float64], %var_6519: Tensor[(6, 3, 6), float64]) -> (Tensor[(896), float32], Tensor[(220, 2), float64], Tensor[(7, 16, 8), float64], Tensor[(6, 3, 6), uint8], Tensor[(6, 3, 6), float32], Tensor[(112), int16], Tensor[(384), uint32], Tensor[(784), float32], Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), uint32]) {
  %327 = fn (%var_6466: Tensor[(6, 3, 6), float64], %var_6467: Tensor[(6, 3, 6), float64]) -> (Tensor[(896), float32], Tensor[(220, 2), float64], Tensor[(7, 16, 8), float64], Tensor[(6, 3, 6), uint8], Tensor[(6, 3, 6), float32], Tensor[(112), int16], Tensor[(384), uint32], Tensor[(784), float32], Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), uint32]) {
    %297 = cast(meta[relay.Constant][11] /* ty=Tensor[(220, 2), float64] */, dtype="float64") /* ty=Tensor[(220, 2), float64] */;
    %298 = reshape(%297, newshape=[11, 4, 10]) /* ty=Tensor[(11, 4, 10), float64] */;
    %299 = @func_3857(%298) /* ty=(Tensor[(11, 4, 10), int32], Tensor[(896), float32]) */;
    %300 = @func_2075() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64]) */;
    %301 = cast(%var_6467, dtype="bool") /* ty=Tensor[(6, 3, 6), bool] */;
    %302 = shape_of(%var_6466, dtype="int32") /* ty=Tensor[(3), int32] */;
    %303 = cast(%var_6466, dtype="bool") /* ty=Tensor[(6, 3, 6), bool] */;
    %304 = dyn.reshape(%301, %302, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %305 = not_equal(%303, %304) /* ty=Tensor[(6, 3, 6), bool] */;
    %306 = cast(%305, dtype="uint8") /* ty=Tensor[(6, 3, 6), uint8] */;
    %307 = shape_of(%var_6466, dtype="int32") /* ty=Tensor[(3), int32] */;
    %308 = cast(%var_6466, dtype="uint8") /* ty=Tensor[(6, 3, 6), uint8] */;
    %309 = dyn.reshape(%306, %307, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %310 = cast(%var_6467, dtype="float32") /* ty=Tensor[(6, 3, 6), float32] */;
    %311 = cast(meta[relay.Constant][12] /* ty=Tensor[(384), uint32] */, dtype="uint32") /* ty=Tensor[(384), uint32] */;
    %312 = %300.1;
    %313 = cast(%312, dtype="bool") /* ty=Tensor[(7, 16, 8), bool] */;
    %314 = cast(meta[relay.Constant][13] /* ty=Tensor[(784), float32] */, dtype="float32") /* ty=Tensor[(784), float32] */;
    %315 = reshape(%311, newshape=[384]) /* ty=Tensor[(384), uint32] */;
    %316 = reshape(%313, newshape=[112, 8]) /* ty=Tensor[(112, 8), bool] */;
    %317 = reshape(%314, newshape=[7, 112]) /* ty=Tensor[(7, 112), float32] */;
    %318 = @func_3572(%315, %316, %317) /* ty=(Tensor[(112), int16], Tensor[(384), uint32], Tensor[(112, 8), bool], Tensor[(7, 112), float64]) */;
    %319 = @func_4021() /* ty=(Tensor[(7, 16, 8), float64],) */;
    %320 = @func_4651() /* ty=(Tensor[(7, 16, 8), uint32],) */;
    %321 = %299.1;
    %322 = multiply(%308, %309) /* ty=Tensor[(6, 3, 6), uint8] */;
    %323 = tan(%310) /* ty=Tensor[(6, 3, 6), float32] */;
    %324 = %318.0;
    %325 = %319.0;
    %326 = %320.0;
    (%321, meta[relay.Constant][11] /* ty=Tensor[(220, 2), float64] */, %312, %322, %323, %324, meta[relay.Constant][12] /* ty=Tensor[(384), uint32] */, meta[relay.Constant][13] /* ty=Tensor[(784), float32] */, %325, %326)
  };
  %327(%var_6518, %var_6519) /* ty=(Tensor[(896), float32], Tensor[(220, 2), float64], Tensor[(7, 16, 8), float64], Tensor[(6, 3, 6), uint8], Tensor[(6, 3, 6), float32], Tensor[(112), int16], Tensor[(384), uint32], Tensor[(784), float32], Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), uint32]) */
}

def @func_1194(%var_1192: Tensor[(28, 4), int16]) -> (Tensor[(7, 16, 8), float64], Tensor[(8, 2, 7), int16], Tensor[(28, 4), int16]) {
  @func_1191(%var_1192) /* ty=(Tensor[(7, 16, 8), float64], Tensor[(8, 2, 7), int16], Tensor[(28, 4), int16]) */
}

def @func_2663() -> (Tensor[(6, 13, 11), float64], Tensor[(7, 16, 8), float32]) {
  @func_2661() /* ty=(Tensor[(6, 13, 11), float64], Tensor[(7, 16, 8), float32]) */
}

def @func_6174(%var_6172: Tensor[(1456), int32]) -> (Tensor[(40), float32], Tensor[(7, 16, 8), uint32], Tensor[(7, 16, 8), float64], Tensor[(112), int16], Tensor[(9, 3, 8), float64], Tensor[(216, 1), float64], Tensor[(7, 16, 8), uint64], Tensor[(1456), int32]) {
  @func_6171(%var_6172) /* ty=(Tensor[(40), float32], Tensor[(7, 16, 8), uint32], Tensor[(7, 16, 8), float64], Tensor[(112), int16], Tensor[(9, 3, 8), float64], Tensor[(216, 1), float64], Tensor[(7, 16, 8), uint64], Tensor[(1456), int32]) */
}

def @func_6638() -> (Tensor[(7, 16, 8), float32], Tensor[(7, 16, 8), float64], Tensor[(112), int16]) {
  %328 = @func_3369() /* ty=(Tensor[(7, 16, 8), float32], Tensor[(7, 16, 8), float32]) */;
  %329 = cast(meta[relay.Constant][14] /* ty=Tensor[(112), int16] */, dtype="int16") /* ty=Tensor[(112), int16] */;
  %330 = reshape(%329, newshape=[112]) /* ty=Tensor[(112), int16] */;
  %331 = @func_6098(%330) /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), bool], Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float32], Tensor[(11, 4, 10), int8], Tensor[(440), float64], Tensor[(112), int16], Tensor[(7, 16, 8), float64], Tensor[(9, 140), float64], Tensor[(9, 140), float64], Tensor[(7, 16, 8), float64], Tensor[(9, 140), float64]) */;
  %332 = %328.0;
  %333 = %331.8;
  (%332, %333, meta[relay.Constant][14] /* ty=Tensor[(112), int16] */)
}

def @func_275(%var_274: Tensor[(15, 7, 8), float32]) -> Tensor[(15, 7, 8), float64] {
  %339 = fn (%var_228: Tensor[(15, 7, 8), float32]) -> Tensor[(15, 7, 8), float64] {
    %334 = cast(%var_228, dtype="float32") /* ty=Tensor[(15, 7, 8), float32] */;
    %335 = log10(%334) /* ty=Tensor[(15, 7, 8), float32] */;
    %336 = cast(%335, dtype="float32") /* ty=Tensor[(15, 7, 8), float32] */;
    %337 = sigmoid(%336) /* ty=Tensor[(15, 7, 8), float32] */;
    %338 = cast(%337, dtype="float64") /* ty=Tensor[(15, 7, 8), float64] */;
    exp(%338) /* ty=Tensor[(15, 7, 8), float64] */
  };
  %339(%var_274) /* ty=Tensor[(15, 7, 8), float64] */
}

def @func_5552() -> (Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64]) {
  @func_5550() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64]) */
}

def @func_3369() -> (Tensor[(7, 16, 8), float32], Tensor[(7, 16, 8), float32]) {
  %340 = @func_1926() /* ty=(Tensor[(7, 16, 8), float64],) */;
  %341 = %340.0;
  %342 = cast(%341, dtype="float32") /* ty=Tensor[(7, 16, 8), float32] */;
  %343 = @func_2455() /* ty=(Tensor[(7, 16, 8), float32],) */;
  %344 = cos(%342) /* ty=Tensor[(7, 16, 8), float32] */;
  %345 = %343.0;
  (%344, %345)
}

def @func_1801(%var_1799: Tensor[(112), int16]) -> (Tensor[(7, 16, 8), float32], Tensor[(7, 16, 8), uint64], Tensor[(112), int16]) {
  %346 = @func_1124() /* ty=Tensor[(7, 16, 8), float64] */;
  %347 = cast(meta[relay.Constant][15] /* ty=Tensor[(7, 16, 8), float64] */, dtype="float32") /* ty=Tensor[(7, 16, 8), float32] */;
  %348 = shape_of(%346, dtype="int32") /* ty=Tensor[(3), int32] */;
  %349 = cast(%346, dtype="float32") /* ty=Tensor[(7, 16, 8), float32] */;
  %350 = dyn.reshape(%347, %348, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %351 = floor_mod(%349, %350) /* ty=Tensor[(7, 16, 8), float32] */;
  %352 = cast(%351, dtype="float64") /* ty=Tensor[(7, 16, 8), float64] */;
  %353 = cast(%var_1799, dtype="int16") /* ty=Tensor[(112), int16] */;
  %354 = reshape(%352, newshape=[7, 16, 8]) /* ty=Tensor[(7, 16, 8), float64] */;
  %355 = reshape(%353, newshape=[1, 112]) /* ty=Tensor[(1, 112), int16] */;
  %356 = @func_1241(%354, %355) /* ty=(Tensor[(7, 16, 8), uint64], Tensor[(8, 2, 7), int16], Tensor[(216), float64], Tensor[(1, 112), int16]) */;
  %357 = %356.0;
  (%351, %357, %var_1799)
}

def @func_4417() -> (Tensor[(8, 2, 7), float32],) {
  @func_4415() /* ty=(Tensor[(8, 2, 7), float32],) */
}

def @func_5931(%var_5929: Tensor[(12, 10, 1), float32], %var_5930: Tensor[(12, 10, 11), float32]) -> (Tensor[(12, 10, 11), bool],) {
  %364 = fn (%var_5911: Tensor[(12, 10, 1), float32], %var_5912: Tensor[(12, 10, 11), float32]) -> (Tensor[(12, 10, 11), bool],) {
    %358 = cast(%var_5911, dtype="float32") /* ty=Tensor[(12, 10, 1), float32] */;
    %359 = cast(%var_5912, dtype="float32") /* ty=Tensor[(12, 10, 11), float32] */;
    %360 = mod(%358, %359) /* ty=Tensor[(12, 10, 11), float32] */;
    %361 = cast(%var_5911, dtype="bool") /* ty=Tensor[(12, 10, 1), bool] */;
    %362 = cast(%360, dtype="bool") /* ty=Tensor[(12, 10, 11), bool] */;
    %363 = logical_and(%361, %362) /* ty=Tensor[(12, 10, 11), bool] */;
    (%363,)
  };
  %364(%var_5929, %var_5930) /* ty=(Tensor[(12, 10, 11), bool],) */
}

def @func_2076() -> (Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64]) {
  %368 = fn () -> (Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64]) {
    %365 = @func_1926() /* ty=(Tensor[(7, 16, 8), float64],) */;
    %366 = @func_1678() /* ty=Tensor[(7, 16, 8), float64] */;
    %367 = %365.0;
    (%366, %367)
  };
  %368() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64]) */
}

def @func_5599() -> (Tensor[(7, 16, 8), uint32], Tensor[(7, 16, 8), float64]) {
  %373 = fn () -> (Tensor[(7, 16, 8), uint32], Tensor[(7, 16, 8), float64]) {
    %369 = @func_4651() /* ty=(Tensor[(7, 16, 8), uint32],) */;
    %370 = @func_5523() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), bool]) */;
    %371 = %369.0;
    %372 = %370.0;
    (%371, %372)
  };
  %373() /* ty=(Tensor[(7, 16, 8), uint32], Tensor[(7, 16, 8), float64]) */
}

def @func_3636(%var_3593: Tensor[(2, 5, 4), float32]) -> (Tensor[(2, 5, 4), float32], Tensor[(15, 7, 8), float64], Tensor[(12, 70), float32]) {
  %374 = cast(%var_3593, dtype="float32") /* ty=Tensor[(2, 5, 4), float32] */;
  %375 = cast(meta[relay.Constant][16] /* ty=Tensor[(12, 70), float32] */, dtype="float32") /* ty=Tensor[(12, 70), float32] */;
  %376 = reshape(%375, newshape=[15, 7, 8]) /* ty=Tensor[(15, 7, 8), float32] */;
  %377 = log10(%374) /* ty=Tensor[(2, 5, 4), float32] */;
  %378 = @func_273(%376) /* ty=Tensor[(15, 7, 8), float64] */;
  (%377, %378, meta[relay.Constant][16] /* ty=Tensor[(12, 70), float32] */)
}

def @func_4086(%var_4084: Tensor[(8, 10, 9), uint16]) -> (Tensor[(8, 10, 9), uint16], Tensor[(7, 16, 8), float64]) {
  @func_4083(%var_4084) /* ty=(Tensor[(8, 10, 9), uint16], Tensor[(7, 16, 8), float64]) */
}

def @func_1658(%var_1656: Tensor[(4, 28), int16], %var_1657: Tensor[(7, 16, 8), float32]) -> (Tensor[(8, 2, 7), int16], Tensor[(4, 28), int16], Tensor[(7, 16, 8), float64]) {
  %392 = fn (%var_1645: Tensor[(4, 28), int16], %var_1648: Tensor[(7, 16, 8), float32]) -> (Tensor[(8, 2, 7), int16], Tensor[(4, 28), int16], Tensor[(7, 16, 8), float64]) {
    %379 = cast(%var_1645, dtype="int16") /* ty=Tensor[(4, 28), int16] */;
    %380 = reshape(%379, newshape=[8, 2, 7]) /* ty=Tensor[(8, 2, 7), int16] */;
    %381 = @func_1042(%380) /* ty=(Tensor[(8, 2, 7), int16], Tensor[(15, 7, 8), float64], Tensor[(840), float32]) */;
    %382 = @func_1616() /* ty=(Tensor[(7, 16, 8), float64],) */;
    %383 = %382.0;
    %384 = cast(%383, dtype="float32") /* ty=Tensor[(7, 16, 8), float32] */;
    %385 = sin(%384) /* ty=Tensor[(7, 16, 8), float32] */;
    %386 = cast(%var_1648, dtype="float64") /* ty=Tensor[(7, 16, 8), float64] */;
    %387 = shape_of(%385, dtype="int32") /* ty=Tensor[(3), int32] */;
    %388 = cast(%385, dtype="float64") /* ty=Tensor[(7, 16, 8), float64] */;
    %389 = dyn.reshape(%386, %387, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %390 = %381.0;
    %391 = mod(%388, %389) /* ty=Tensor[(7, 16, 8), float64] */;
    (%390, %var_1645, %391)
  };
  %392(%var_1656, %var_1657) /* ty=(Tensor[(8, 2, 7), int16], Tensor[(4, 28), int16], Tensor[(7, 16, 8), float64]) */
}

def @func_5149() -> (Tensor[(7, 16, 8), float64],) {
  @func_5147() /* ty=(Tensor[(7, 16, 8), float64],) */
}

def @func_5696() -> (Tensor[(7, 16, 8), float32],) {
  %393 = @func_2455() /* ty=(Tensor[(7, 16, 8), float32],) */;
  %394 = %393.0;
  (%394,)
}

def @func_5888(%var_5887: Tensor[(112, 1), int16]) -> (Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), uint8], Tensor[(384), uint32], Tensor[(112, 1), int16], Tensor[(8, 2, 7), float32]) {
  %407 = fn (%var_5879: Tensor[(112, 1), int16]) -> (Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), uint8], Tensor[(384), uint32], Tensor[(112, 1), int16], Tensor[(8, 2, 7), float32]) {
    %395 = @func_1578() /* ty=(Tensor[(7, 16, 8), float32], Tensor[(7, 16, 8), float64]) */;
    %396 = cast(meta[relay.Constant][17] /* ty=Tensor[(384), uint32] */, dtype="uint32") /* ty=Tensor[(384), uint32] */;
    %397 = cast(%var_5879, dtype="int16") /* ty=Tensor[(112, 1), int16] */;
    %398 = %395.1;
    %399 = cast(%398, dtype="bool") /* ty=Tensor[(7, 16, 8), bool] */;
    %400 = reshape(%396, newshape=[384]) /* ty=Tensor[(384), uint32] */;
    %401 = reshape(%397, newshape=[1, 112]) /* ty=Tensor[(1, 112), int16] */;
    %402 = reshape(%399, newshape=[7, 16, 8]) /* ty=Tensor[(7, 16, 8), bool] */;
    %403 = @func_2257(%400, %401, %402) /* ty=(Tensor[(7, 16, 8), uint8], Tensor[(4, 6, 16), int8], Tensor[(384), uint32], Tensor[(7, 16, 8), float64], Tensor[(1, 112), int16], Tensor[(7, 16, 8), int64], Tensor[(7, 16, 8), bool], Tensor[(7, 16, 8), uint64], Tensor[(8, 2, 7), int16]) */;
    %404 = @func_4415() /* ty=(Tensor[(8, 2, 7), float32],) */;
    %405 = %403.0;
    %406 = %404.0;
    (%398, %405, meta[relay.Constant][17] /* ty=Tensor[(384), uint32] */, %var_5879, %406)
  };
  %407(%var_5887) /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), uint8], Tensor[(384), uint32], Tensor[(112, 1), int16], Tensor[(8, 2, 7), float32]) */
}

def @func_1578() -> (Tensor[(7, 16, 8), float32], Tensor[(7, 16, 8), float64]) {
  %408 = @func_1124() /* ty=Tensor[(7, 16, 8), float64] */;
  %409 = cast(meta[relay.Constant][18] /* ty=Tensor[(7, 16, 8), float64] */, dtype="float32") /* ty=Tensor[(7, 16, 8), float32] */;
  %410 = shape_of(%408, dtype="int32") /* ty=Tensor[(3), int32] */;
  %411 = cast(%408, dtype="float32") /* ty=Tensor[(7, 16, 8), float32] */;
  %412 = dyn.reshape(%409, %410, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %413 = cast(meta[relay.Constant][18] /* ty=Tensor[(7, 16, 8), float64] */, dtype="float64") /* ty=Tensor[(7, 16, 8), float64] */;
  %414 = floor_divide(%411, %412) /* ty=Tensor[(7, 16, 8), float32] */;
  %415 = atan(%413) /* ty=Tensor[(7, 16, 8), float64] */;
  (%414, %415)
}

def @func_5255() -> (Tensor[(7, 16, 8), bool],) {
  %416 = @func_4754() /* ty=(Tensor[(7, 16, 8), bool],) */;
  %417 = %416.0;
  (%417,)
}

def @func_2647() -> Tensor[(7, 16, 8), float32] {
  @func_2645() /* ty=Tensor[(7, 16, 8), float32] */
}

def @func_3576(%var_3573: Tensor[(384), uint32], %var_3574: Tensor[(112, 8), bool], %var_3575: Tensor[(7, 112), float32]) -> (Tensor[(112), int16], Tensor[(384), uint32], Tensor[(112, 8), bool], Tensor[(7, 112), float64]) {
  %433 = fn (%var_3545: Tensor[(384), uint32], %var_3546: Tensor[(112, 8), bool], %var_3553: Tensor[(7, 112), float32]) -> (Tensor[(112), int16], Tensor[(384), uint32], Tensor[(112, 8), bool], Tensor[(7, 112), float64]) {
    %418 = @func_2164() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), uint64], Tensor[(112), int16]) */;
    %419 = cast(%var_3545, dtype="uint32") /* ty=Tensor[(384), uint32] */;
    %420 = %418.2;
    %421 = cast(%420, dtype="int16") /* ty=Tensor[(112), int16] */;
    %422 = cast(%var_3546, dtype="bool") /* ty=Tensor[(112, 8), bool] */;
    %423 = reshape(%419, newshape=[384]) /* ty=Tensor[(384), uint32] */;
    %424 = reshape(%421, newshape=[1, 112]) /* ty=Tensor[(1, 112), int16] */;
    %425 = reshape(%422, newshape=[7, 16, 8]) /* ty=Tensor[(7, 16, 8), bool] */;
    %426 = @func_2257(%423, %424, %425) /* ty=(Tensor[(7, 16, 8), uint8], Tensor[(4, 6, 16), int8], Tensor[(384), uint32], Tensor[(7, 16, 8), float64], Tensor[(1, 112), int16], Tensor[(7, 16, 8), int64], Tensor[(7, 16, 8), bool], Tensor[(7, 16, 8), uint64], Tensor[(8, 2, 7), int16]) */;
    %427 = %426.4;
    %428 = cast(%427, dtype="float32") /* ty=Tensor[(1, 112), float32] */;
    %429 = erf(%428) /* ty=Tensor[(1, 112), float32] */;
    %430 = cast(%429, dtype="float64") /* ty=Tensor[(1, 112), float64] */;
    %431 = cast(%var_3553, dtype="float64") /* ty=Tensor[(7, 112), float64] */;
    %432 = floor_divide(%430, %431) /* ty=Tensor[(7, 112), float64] */;
    (%420, %var_3545, %var_3546, %432)
  };
  %433(%var_3573, %var_3574, %var_3575) /* ty=(Tensor[(112), int16], Tensor[(384), uint32], Tensor[(112, 8), bool], Tensor[(7, 112), float64]) */
}

def @func_4868(%var_4866: Tensor[(14, 10, 9), float32]) -> (Tensor[(14, 10, 9), bool], Tensor[(7, 16, 8), float64]) {
  @func_4865(%var_4866) /* ty=(Tensor[(14, 10, 9), bool], Tensor[(7, 16, 8), float64]) */
}

def @func_5418(%var_5408: Tensor[(112), int16], %var_5409: Tensor[(1456), int32]) -> (Tensor[(7, 16, 8), float64], Tensor[(784), float32], Tensor[(112), int16], Tensor[(1456), int32]) {
  %434 = @func_3790() /* ty=(Tensor[(7, 16, 8), float64],) */;
  %435 = cast(%var_5408, dtype="int16") /* ty=Tensor[(112), int16] */;
  %436 = cast(%var_5409, dtype="int32") /* ty=Tensor[(1456), int32] */;
  %437 = reshape(%435, newshape=[112, 1]) /* ty=Tensor[(112, 1), int16] */;
  %438 = reshape(%436, newshape=[1456]) /* ty=Tensor[(1456), int32] */;
  %439 = @func_3999(%437, %438) /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 112), float64], Tensor[(784), float32], Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float32], Tensor[(7, 16, 8), float64], Tensor[(112, 384), float32], Tensor[(7, 16, 8), uint64], Tensor[(1456), int32]) */;
  %440 = %434.0;
  %441 = %439.2;
  (%440, %441, %var_5408, %var_5409)
}

def @func_1191(%var_1183: Tensor[(28, 4), int16]) -> (Tensor[(7, 16, 8), float64], Tensor[(8, 2, 7), int16], Tensor[(28, 4), int16]) {
  %442 = cast(%var_1183, dtype="int16") /* ty=Tensor[(28, 4), int16] */;
  %443 = reshape(%442, newshape=[8, 2, 7]) /* ty=Tensor[(8, 2, 7), int16] */;
  %444 = @func_1042(%443) /* ty=(Tensor[(8, 2, 7), int16], Tensor[(15, 7, 8), float64], Tensor[(840), float32]) */;
  %445 = @func_1124() /* ty=Tensor[(7, 16, 8), float64] */;
  %446 = %444.0;
  (%445, %446, %var_1183)
}

def @func_4623() -> (Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64]) {
  %451 = fn () -> (Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64]) {
    %447 = @func_3088() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64]) */;
    %448 = @func_1616() /* ty=(Tensor[(7, 16, 8), float64],) */;
    %449 = %447.0;
    %450 = %448.0;
    (%449, %450)
  };
  %451() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64]) */
}

def @func_6428() -> (Tensor[(15, 13, 4), float32],) {
  %452 = cast(meta[relay.Constant][19] /* ty=uint32 */, dtype="bool") /* ty=bool */;
  %453 = cast(meta[relay.Constant][20] /* ty=Tensor[(15, 13, 4), uint32] */, dtype="bool") /* ty=Tensor[(15, 13, 4), bool] */;
  %454 = equal(%452, %453) /* ty=Tensor[(15, 13, 4), bool] */;
  %455 = cast(%454, dtype="float32") /* ty=Tensor[(15, 13, 4), float32] */;
  %456 = sigmoid(%455) /* ty=Tensor[(15, 13, 4), float32] */;
  (%456,)
}

def @func_3371() -> (Tensor[(7, 16, 8), float32], Tensor[(7, 16, 8), float32]) {
  @func_3369() /* ty=(Tensor[(7, 16, 8), float32], Tensor[(7, 16, 8), float32]) */
}

def @func_6430() -> (Tensor[(15, 13, 4), float32],) {
  @func_6428() /* ty=(Tensor[(15, 13, 4), float32],) */
}

def @func_2567() -> (Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), uint64]) {
  @func_2565() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), uint64]) */
}

def @func_5576(%var_5571: int8, %var_5572: Tensor[(1, 6, 15), int8]) -> Tensor[(1, 6, 15), int8] {
  %457 = cast(%var_5571, dtype="int8") /* ty=int8 */;
  %458 = cast(%var_5572, dtype="int8") /* ty=Tensor[(1, 6, 15), int8] */;
  add(%457, %458) /* ty=Tensor[(1, 6, 15), int8] */
}

def @func_6171(%var_6160: Tensor[(1456), int32]) -> (Tensor[(40), float32], Tensor[(7, 16, 8), uint32], Tensor[(7, 16, 8), float64], Tensor[(112), int16], Tensor[(9, 3, 8), float64], Tensor[(216, 1), float64], Tensor[(7, 16, 8), uint64], Tensor[(1456), int32]) {
  %459 = @func_1926() /* ty=(Tensor[(7, 16, 8), float64],) */;
  %460 = %459.0;
  %461 = cast(%460, dtype="float64") /* ty=Tensor[(7, 16, 8), float64] */;
  %462 = cast(meta[relay.Constant][21] /* ty=Tensor[(40), float32] */, dtype="float32") /* ty=Tensor[(40), float32] */;
  %463 = reshape(%461, newshape=[896]) /* ty=Tensor[(896), float64] */;
  %464 = reshape(%462, newshape=[40]) /* ty=Tensor[(40), float32] */;
  %465 = @func_4469(%463, %464) /* ty=(Tensor[(112), int16], Tensor[(7, 16, 8), bool], Tensor[(896), float64], Tensor[(15, 7, 8), float64], Tensor[(40), float32], Tensor[(7, 16, 8), float64]) */;
  %466 = %465.1;
  %467 = cast(%460, dtype="uint32") /* ty=Tensor[(7, 16, 8), uint32] */;
  %468 = shape_of(%466, dtype="int32") /* ty=Tensor[(3), int32] */;
  %469 = cast(%466, dtype="uint32") /* ty=Tensor[(7, 16, 8), uint32] */;
  %470 = dyn.reshape(%467, %468, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %471 = cast(meta[relay.Constant][22] /* ty=Tensor[(112), int16] */, dtype="int16") /* ty=Tensor[(112), int16] */;
  %472 = reshape(%471, newshape=[112]) /* ty=Tensor[(112), int16] */;
  %473 = @func_2430(%472) /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), bool], Tensor[(112), int16]) */;
  %474 = cast(meta[relay.Constant][23] /* ty=Tensor[(216, 1), float64] */, dtype="float64") /* ty=Tensor[(216, 1), float64] */;
  %475 = cast(meta[relay.Constant][22] /* ty=Tensor[(112), int16] */, dtype="int16") /* ty=Tensor[(112), int16] */;
  %476 = reshape(%474, newshape=[9, 3, 8]) /* ty=Tensor[(9, 3, 8), float64] */;
  %477 = reshape(%475, newshape=[112]) /* ty=Tensor[(112), int16] */;
  %478 = @func_1082(%476, %477) /* ty=(Tensor[(9, 3, 8), float64], Tensor[(8, 2, 7), int16], Tensor[(112), int16], Tensor[(8, 2, 7), int16]) */;
  %479 = cast(%var_6160, dtype="int32") /* ty=Tensor[(1456), int32] */;
  %480 = reshape(%479, newshape=[16, 13, 7]) /* ty=Tensor[(16, 13, 7), int32] */;
  %481 = @func_3669(%480) /* ty=(Tensor[(7, 16, 8), uint64], Tensor[(16, 13, 7), int32]) */;
  %482 = subtract(%469, %470) /* ty=Tensor[(7, 16, 8), uint32] */;
  %483 = %473.0;
  %484 = %478.0;
  %485 = %481.0;
  (meta[relay.Constant][21] /* ty=Tensor[(40), float32] */, %482, %483, meta[relay.Constant][22] /* ty=Tensor[(112), int16] */, %484, meta[relay.Constant][23] /* ty=Tensor[(216, 1), float64] */, %485, %var_6160)
}

def @func_4094() -> (Tensor[(7, 16, 8), float64],) {
  %486 = @func_2075() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64]) */;
  %487 = %486.0;
  (%487,)
}

def @func_5524() -> (Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), bool]) {
  %493 = fn () -> (Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), bool]) {
    %488 = @func_3514() /* ty=Tensor[(7, 16, 8), float64] */;
    %489 = cast(%488, dtype="float64") /* ty=Tensor[(7, 16, 8), float64] */;
    %490 = reshape(%489, newshape=[7, 16, 8]) /* ty=Tensor[(7, 16, 8), float64] */;
    %491 = @func_2021(%490) /* ty=(Tensor[(7, 16, 8), bool],) */;
    %492 = %491.0;
    (%488, %492)
  };
  %493() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), bool]) */
}

def @func_3088() -> (Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64]) {
  %494 = @func_2075() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64]) */;
  %495 = @func_1616() /* ty=(Tensor[(7, 16, 8), float64],) */;
  %496 = %494.0;
  %497 = %495.0;
  (%496, %497)
}

def @func_1616() -> (Tensor[(7, 16, 8), float64],) {
  %498 = @func_1578() /* ty=(Tensor[(7, 16, 8), float32], Tensor[(7, 16, 8), float64]) */;
  %499 = %498.1;
  (%499,)
}

def @func_3494(%var_3492: int64, %var_3493: Tensor[(3, 1, 4), int64]) -> (Tensor[(3, 1, 4), int64],) {
  %503 = fn (%var_3482: int64, %var_3483: Tensor[(3, 1, 4), int64]) -> (Tensor[(3, 1, 4), int64],) {
    %500 = cast(%var_3482, dtype="int64") /* ty=int64 */;
    %501 = cast(%var_3483, dtype="int64") /* ty=Tensor[(3, 1, 4), int64] */;
    %502 = bitwise_or(%500, %501) /* ty=Tensor[(3, 1, 4), int64] */;
    (%502,)
  };
  %503(%var_3492, %var_3493) /* ty=(Tensor[(3, 1, 4), int64],) */
}

def @func_1885(%var_1870: Tensor[(216), float64], %var_1871: Tensor[(112), int16]) -> (Tensor[(7, 16, 8), float64], Tensor[(9, 3, 8), float64], Tensor[(216), float64], Tensor[(112), int16], Tensor[(7, 16, 8), float64]) {
  %504 = @func_1678() /* ty=Tensor[(7, 16, 8), float64] */;
  %505 = cast(%504, dtype="float64") /* ty=Tensor[(7, 16, 8), float64] */;
  %506 = cast(%var_1870, dtype="float64") /* ty=Tensor[(216), float64] */;
  %507 = cast(%var_1871, dtype="int16") /* ty=Tensor[(112), int16] */;
  %508 = reshape(%506, newshape=[9, 3, 8]) /* ty=Tensor[(9, 3, 8), float64] */;
  %509 = reshape(%507, newshape=[112]) /* ty=Tensor[(112), int16] */;
  %510 = @func_1082(%508, %509) /* ty=(Tensor[(9, 3, 8), float64], Tensor[(8, 2, 7), int16], Tensor[(112), int16], Tensor[(8, 2, 7), int16]) */;
  %511 = @func_1522() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(112), int16]) */;
  %512 = sinh(%505) /* ty=Tensor[(7, 16, 8), float64] */;
  %513 = %510.0;
  %514 = %511.1;
  (%512, %513, %var_1870, %var_1871, %514)
}

def @func_1618() -> (Tensor[(7, 16, 8), float64],) {
  @func_1616() /* ty=(Tensor[(7, 16, 8), float64],) */
}

def @func_2565() -> (Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), uint64]) {
  %515 = @func_2164() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), uint64], Tensor[(112), int16]) */;
  %516 = @func_1678() /* ty=Tensor[(7, 16, 8), float64] */;
  %517 = %515.1;
  (%516, %517)
}

def @func_1603() -> (Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(11, 4, 10), float64], Tensor[(440), float64]) {
  %524 = fn () -> (Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(11, 4, 10), float64], Tensor[(440), float64]) {
    %518 = cast(meta[relay.Constant][24] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
    %519 = reshape(%518, newshape=[11, 4, 10]) /* ty=Tensor[(11, 4, 10), float64] */;
    %520 = @func_1536(%519) /* ty=(Tensor[(11, 4, 10), float64],) */;
    %521 = @func_1124() /* ty=Tensor[(7, 16, 8), float64] */;
    %522 = @func_1124() /* ty=Tensor[(7, 16, 8), float64] */;
    %523 = %520.0;
    (%521, %522, %523, meta[relay.Constant][24] /* ty=Tensor[(440), float64] */)
  };
  %524() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(11, 4, 10), float64], Tensor[(440), float64]) */
}

def @func_4415() -> (Tensor[(8, 2, 7), float32],) {
  %525 = @func_4154() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(8, 2, 7), int16], Tensor[(112), int16], Tensor[(7, 16, 8), bool]) */;
  %526 = %525.1;
  %527 = cast(%526, dtype="float32") /* ty=Tensor[(8, 2, 7), float32] */;
  %528 = cosh(%527) /* ty=Tensor[(8, 2, 7), float32] */;
  (%528,)
}

def @func_5340(%var_5339: Tensor[(720), uint16]) -> (Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(720), uint16]) {
  %544 = fn (%var_5327: Tensor[(720), uint16]) -> (Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(720), uint16]) {
    %529 = @func_1578() /* ty=(Tensor[(7, 16, 8), float32], Tensor[(7, 16, 8), float64]) */;
    %530 = %529.1;
    %531 = cast(%530, dtype="float32") /* ty=Tensor[(7, 16, 8), float32] */;
    %532 = exp(%531) /* ty=Tensor[(7, 16, 8), float32] */;
    %533 = cast(%530, dtype="float64") /* ty=Tensor[(7, 16, 8), float64] */;
    %534 = shape_of(%532, dtype="int32") /* ty=Tensor[(3), int32] */;
    %535 = cast(%532, dtype="float64") /* ty=Tensor[(7, 16, 8), float64] */;
    %536 = dyn.reshape(%533, %534, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %537 = @func_1522() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(112), int16]) */;
    %538 = cast(%var_5327, dtype="uint16") /* ty=Tensor[(720), uint16] */;
    %539 = reshape(%538, newshape=[8, 10, 9]) /* ty=Tensor[(8, 10, 9), uint16] */;
    %540 = @func_4083(%539) /* ty=(Tensor[(8, 10, 9), uint16], Tensor[(7, 16, 8), float64]) */;
    %541 = divide(%535, %536) /* ty=Tensor[(7, 16, 8), float64] */;
    %542 = %537.1;
    %543 = %540.1;
    (%541, %542, %543, %var_5327)
  };
  %544(%var_5339) /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(720), uint16]) */
}

def @func_1245(%var_1243: Tensor[(7, 16, 8), float64], %var_1244: Tensor[(1, 112), int16]) -> (Tensor[(7, 16, 8), uint64], Tensor[(8, 2, 7), int16], Tensor[(216), float64], Tensor[(1, 112), int16]) {
  @func_1241(%var_1243, %var_1244) /* ty=(Tensor[(7, 16, 8), uint64], Tensor[(8, 2, 7), int16], Tensor[(216), float64], Tensor[(1, 112), int16]) */
}

def @func_4653() -> (Tensor[(7, 16, 8), uint32],) {
  @func_4651() /* ty=(Tensor[(7, 16, 8), uint32],) */
}

def @func_3040(%var_3038: Tensor[(216), float64]) -> (Tensor[(6, 13, 11), float64], Tensor[(7, 16, 8), float32], Tensor[(9, 3, 8), float64], Tensor[(216), float64], Tensor[(112), int16]) {
  @func_3037(%var_3038) /* ty=(Tensor[(6, 13, 11), float64], Tensor[(7, 16, 8), float32], Tensor[(9, 3, 8), float64], Tensor[(216), float64], Tensor[(112), int16]) */
}

def @func_3090() -> (Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64]) {
  @func_3088() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64]) */
}

def @func_3516() -> Tensor[(7, 16, 8), float64] {
  @func_3514() /* ty=Tensor[(7, 16, 8), float64] */
}

def @func_3313() -> Tensor[(7, 16, 8), float64] {
  @func_2634() /* ty=Tensor[(7, 16, 8), float64] */
}

def @func_4937() -> (Tensor[(7, 16, 8), float32], Tensor[(7, 16, 8), float64]) {
  %548 = fn () -> (Tensor[(7, 16, 8), float32], Tensor[(7, 16, 8), float64]) {
    %545 = @func_2455() /* ty=(Tensor[(7, 16, 8), float32],) */;
    %546 = %545.0;
    %547 = @func_1124() /* ty=Tensor[(7, 16, 8), float64] */;
    (%546, %547)
  };
  %548() /* ty=(Tensor[(7, 16, 8), float32], Tensor[(7, 16, 8), float64]) */
}

def @func_1348(%var_1345: Tensor[(9, 8, 3), float64], %var_1346: Tensor[(9, 8, 3), float64], %var_1347: Tensor[(112), int16]) -> (Tensor[(9, 8, 3), bool], Tensor[(9, 8, 3), float32], Tensor[(7, 16, 8), float64], Tensor[(112), int16], Tensor[(8, 2, 7), int16]) {
  %564 = fn (%var_1309: Tensor[(9, 8, 3), float64], %var_1310: Tensor[(9, 8, 3), float64], %var_1323: Tensor[(112), int16]) -> (Tensor[(9, 8, 3), bool], Tensor[(9, 8, 3), float32], Tensor[(7, 16, 8), float64], Tensor[(112), int16], Tensor[(8, 2, 7), int16]) {
    %549 = cast(%var_1310, dtype="bool") /* ty=Tensor[(9, 8, 3), bool] */;
    %550 = shape_of(%var_1309, dtype="int32") /* ty=Tensor[(3), int32] */;
    %551 = cast(%var_1309, dtype="bool") /* ty=Tensor[(9, 8, 3), bool] */;
    %552 = dyn.reshape(%549, %550, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %553 = cast(%var_1309, dtype="float32") /* ty=Tensor[(9, 8, 3), float32] */;
    %554 = cast(%var_1323, dtype="int16") /* ty=Tensor[(112), int16] */;
    %555 = reshape(%554, newshape=[28, 4]) /* ty=Tensor[(28, 4), int16] */;
    %556 = @func_1191(%555) /* ty=(Tensor[(7, 16, 8), float64], Tensor[(8, 2, 7), int16], Tensor[(28, 4), int16]) */;
    %557 = cast(%var_1323, dtype="int16") /* ty=Tensor[(112), int16] */;
    %558 = reshape(%557, newshape=[8, 2, 7]) /* ty=Tensor[(8, 2, 7), int16] */;
    %559 = @func_1042(%558) /* ty=(Tensor[(8, 2, 7), int16], Tensor[(15, 7, 8), float64], Tensor[(840), float32]) */;
    %560 = equal(%551, %552) /* ty=Tensor[(9, 8, 3), bool] */;
    %561 = atan(%553) /* ty=Tensor[(9, 8, 3), float32] */;
    %562 = %556.0;
    %563 = %559.0;
    (%560, %561, %562, %var_1323, %563)
  };
  %564(%var_1345, %var_1346, %var_1347) /* ty=(Tensor[(9, 8, 3), bool], Tensor[(9, 8, 3), float32], Tensor[(7, 16, 8), float64], Tensor[(112), int16], Tensor[(8, 2, 7), int16]) */
}

def @func_2635() -> Tensor[(7, 16, 8), float64] {
  %566 = fn () -> Tensor[(7, 16, 8), float64] {
    %565 = @func_2075() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64]) */;
    %565.0
  };
  %566() /* ty=Tensor[(7, 16, 8), float64] */
}

def @func_6238() -> (Tensor[(11, 15, 5), int8], Tensor[(7, 16, 8), bool], Tensor[(224, 4), float64]) {
  %576 = fn () -> (Tensor[(11, 15, 5), int8], Tensor[(7, 16, 8), bool], Tensor[(224, 4), float64]) {
    %567 = cast(meta[relay.Constant][26] /* ty=Tensor[(11, 15, 5), int8] */, dtype="int8") /* ty=Tensor[(11, 15, 5), int8] */;
    %568 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(11, 15, 5), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %569 = cast(meta[relay.Constant][25] /* ty=Tensor[(11, 15, 5), int8] */, dtype="int8") /* ty=Tensor[(11, 15, 5), int8] */;
    %570 = dyn.reshape(%567, %568, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %571 = cast(meta[relay.Constant][27] /* ty=Tensor[(224, 4), float64] */, dtype="float64") /* ty=Tensor[(224, 4), float64] */;
    %572 = reshape(%571, newshape=[7, 16, 8]) /* ty=Tensor[(7, 16, 8), float64] */;
    %573 = @func_2284(%572) /* ty=(Tensor[(7, 16, 8), bool],) */;
    %574 = bitwise_xor(%569, %570) /* ty=Tensor[(11, 15, 5), int8] */;
    %575 = %573.0;
    (%574, %575, meta[relay.Constant][27] /* ty=Tensor[(224, 4), float64] */)
  };
  %576() /* ty=(Tensor[(11, 15, 5), int8], Tensor[(7, 16, 8), bool], Tensor[(224, 4), float64]) */
}

def @func_2354(%var_2352: Tensor[(11, 4, 10), float64], %var_2353: Tensor[(112), int16]) -> (Tensor[(11, 4, 10), int8], Tensor[(8, 2, 7), int16], Tensor[(896), float64], Tensor[(112), int16], Tensor[(7, 16, 8), float64]) {
  %594 = fn (%var_2334: Tensor[(11, 4, 10), float64], %var_2342: Tensor[(112), int16]) -> (Tensor[(11, 4, 10), int8], Tensor[(8, 2, 7), int16], Tensor[(896), float64], Tensor[(112), int16], Tensor[(7, 16, 8), float64]) {
    %577 = @func_1602() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(11, 4, 10), float64], Tensor[(440), float64]) */;
    %578 = %577.2;
    %579 = cast(%var_2334, dtype="int8") /* ty=Tensor[(11, 4, 10), int8] */;
    %580 = shape_of(%578, dtype="int32") /* ty=Tensor[(3), int32] */;
    %581 = cast(%578, dtype="int8") /* ty=Tensor[(11, 4, 10), int8] */;
    %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %583 = cast(meta[relay.Constant][28] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
    %584 = cast(%var_2342, dtype="int16") /* ty=Tensor[(112), int16] */;
    %585 = reshape(%583, newshape=[7, 16, 8]) /* ty=Tensor[(7, 16, 8), float64] */;
    %586 = reshape(%584, newshape=[1, 112]) /* ty=Tensor[(1, 112), int16] */;
    %587 = @func_1241(%585, %586) /* ty=(Tensor[(7, 16, 8), uint64], Tensor[(8, 2, 7), int16], Tensor[(216), float64], Tensor[(1, 112), int16]) */;
    %588 = cast(%var_2342, dtype="int16") /* ty=Tensor[(112), int16] */;
    %589 = reshape(%588, newshape=[28, 4]) /* ty=Tensor[(28, 4), int16] */;
    %590 = @func_1191(%589) /* ty=(Tensor[(7, 16, 8), float64], Tensor[(8, 2, 7), int16], Tensor[(28, 4), int16]) */;
    %591 = bitwise_xor(%581, %582) /* ty=Tensor[(11, 4, 10), int8] */;
    %592 = %587.1;
    %593 = %590.0;
    (%591, %592, meta[relay.Constant][28] /* ty=Tensor[(896), float64] */, %var_2342, %593)
  };
  %594(%var_2352, %var_2353) /* ty=(Tensor[(11, 4, 10), int8], Tensor[(8, 2, 7), int16], Tensor[(896), float64], Tensor[(112), int16], Tensor[(7, 16, 8), float64]) */
}

def @func_6592() -> (Tensor[(7, 16, 8), float64],) {
  %595 = @func_1124() /* ty=Tensor[(7, 16, 8), float64] */;
  (%595,)
}

def @func_5550() -> (Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64]) {
  %596 = @func_3088() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64]) */;
  %597 = %596.1;
  %598 = @func_3313() /* ty=Tensor[(7, 16, 8), float64] */;
  (%597, %598)
}

def @func_1927() -> (Tensor[(7, 16, 8), float64],) {
  %600 = fn () -> (Tensor[(7, 16, 8), float64],) {
    %599 = @func_1678() /* ty=Tensor[(7, 16, 8), float64] */;
    (%599,)
  };
  %600() /* ty=(Tensor[(7, 16, 8), float64],) */
}

def @func_2661() -> (Tensor[(6, 13, 11), float64], Tensor[(7, 16, 8), float32]) {
  %601 = cast(meta[relay.Constant][29] /* ty=Tensor[(6, 13, 11), float64] */, dtype="float64") /* ty=Tensor[(6, 13, 11), float64] */;
  %602 = @func_1578() /* ty=(Tensor[(7, 16, 8), float32], Tensor[(7, 16, 8), float64]) */;
  %603 = sinh(%601) /* ty=Tensor[(6, 13, 11), float64] */;
  %604 = %602.0;
  (%603, %604)
}

def @func_5147() -> (Tensor[(7, 16, 8), float64],) {
  %605 = @func_4021() /* ty=(Tensor[(7, 16, 8), float64],) */;
  %606 = %605.0;
  %607 = cast(%606, dtype="float64") /* ty=Tensor[(7, 16, 8), float64] */;
  %608 = atanh(%607) /* ty=Tensor[(7, 16, 8), float64] */;
  (%608,)
}

def @func_3669(%var_3651: Tensor[(16, 13, 7), int32]) -> (Tensor[(7, 16, 8), uint64], Tensor[(16, 13, 7), int32]) {
  %609 = @func_2164() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), uint64], Tensor[(112), int16]) */;
  %610 = cast(meta[relay.Constant][30] /* ty=Tensor[(16, 13, 7), int32] */, dtype="int32") /* ty=Tensor[(16, 13, 7), int32] */;
  %611 = shape_of(%var_3651, dtype="int32") /* ty=Tensor[(3), int32] */;
  %612 = cast(%var_3651, dtype="int32") /* ty=Tensor[(16, 13, 7), int32] */;
  %613 = dyn.reshape(%610, %611, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %614 = bitwise_xor(%612, %613) /* ty=Tensor[(16, 13, 7), int32] */;
  %615 = cast(meta[relay.Constant][30] /* ty=Tensor[(16, 13, 7), int32] */, dtype="int32") /* ty=Tensor[(16, 13, 7), int32] */;
  %616 = shape_of(%614, dtype="int32") /* ty=Tensor[(3), int32] */;
  %617 = cast(%614, dtype="int32") /* ty=Tensor[(16, 13, 7), int32] */;
  %618 = dyn.reshape(%615, %616, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %619 = %609.1;
  %620 = logical_xor(%617, %618) /* ty=Tensor[(16, 13, 7), int32] */;
  (%619, %620)
}

def @func_5580(%var_5578: int8, %var_5579: Tensor[(1, 6, 15), int8]) -> Tensor[(1, 6, 15), int8] {
  @func_5576(%var_5578, %var_5579) /* ty=Tensor[(1, 6, 15), int8] */
}

def @func_6594() -> (Tensor[(7, 16, 8), float64],) {
  @func_6592() /* ty=(Tensor[(7, 16, 8), float64],) */
}

def @func_4032(%var_4030: Tensor[(12, 4, 3), uint32], %var_4031: Tensor[(12, 4, 3), uint32]) -> (Tensor[(12, 4, 3), uint32],) {
  @func_4028(%var_4030, %var_4031) /* ty=(Tensor[(12, 4, 3), uint32],) */
}

def @func_3037(%var_3030: Tensor[(216), float64]) -> (Tensor[(6, 13, 11), float64], Tensor[(7, 16, 8), float32], Tensor[(9, 3, 8), float64], Tensor[(216), float64], Tensor[(112), int16]) {
  %621 = @func_2661() /* ty=(Tensor[(6, 13, 11), float64], Tensor[(7, 16, 8), float32]) */;
  %622 = @func_2661() /* ty=(Tensor[(6, 13, 11), float64], Tensor[(7, 16, 8), float32]) */;
  %623 = %622.1;
  %624 = cast(%623, dtype="float32") /* ty=Tensor[(7, 16, 8), float32] */;
  %625 = acos(%624) /* ty=Tensor[(7, 16, 8), float32] */;
  %626 = cast(%625, dtype="float64") /* ty=Tensor[(7, 16, 8), float64] */;
  %627 = asin(%626) /* ty=Tensor[(7, 16, 8), float64] */;
  %628 = @func_1578() /* ty=(Tensor[(7, 16, 8), float32], Tensor[(7, 16, 8), float64]) */;
  %629 = %628.0;
  %630 = cast(%629, dtype="float32") /* ty=Tensor[(7, 16, 8), float32] */;
  %631 = shape_of(%627, dtype="int32") /* ty=Tensor[(3), int32] */;
  %632 = cast(%627, dtype="float32") /* ty=Tensor[(7, 16, 8), float32] */;
  %633 = dyn.reshape(%630, %631, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %634 = cast(%var_3030, dtype="float64") /* ty=Tensor[(216), float64] */;
  %635 = cast(meta[relay.Constant][31] /* ty=Tensor[(112), int16] */, dtype="int16") /* ty=Tensor[(112), int16] */;
  %636 = reshape(%634, newshape=[216]) /* ty=Tensor[(216), float64] */;
  %637 = reshape(%635, newshape=[112]) /* ty=Tensor[(112), int16] */;
  %638 = @func_1885(%636, %637) /* ty=(Tensor[(7, 16, 8), float64], Tensor[(9, 3, 8), float64], Tensor[(216), float64], Tensor[(112), int16], Tensor[(7, 16, 8), float64]) */;
  %639 = %621.0;
  %640 = power(%632, %633) /* ty=Tensor[(7, 16, 8), float32] */;
  %641 = %638.1;
  (%639, %640, %641, %var_3030, meta[relay.Constant][31] /* ty=Tensor[(112), int16] */)
}

def @func_5357(%var_5356: Tensor[(7, 3, 12), float64]) -> Tensor[(7, 3, 12), float64] {
  %643 = fn (%var_5342: Tensor[(7, 3, 12), float64]) -> Tensor[(7, 3, 12), float64] {
    %642 = cast(%var_5342, dtype="float64") /* ty=Tensor[(7, 3, 12), float64] */;
    cosh(%642) /* ty=Tensor[(7, 3, 12), float64] */
  };
  %643(%var_5356) /* ty=Tensor[(7, 3, 12), float64] */
}

def @func_1045(%var_1043: Tensor[(8, 2, 7), int16]) -> (Tensor[(8, 2, 7), int16], Tensor[(15, 7, 8), float64], Tensor[(840), float32]) {
  @func_1042(%var_1043) /* ty=(Tensor[(8, 2, 7), int16], Tensor[(15, 7, 8), float64], Tensor[(840), float32]) */
}

def @func_4473(%var_4471: Tensor[(896), float64], %var_4472: Tensor[(40), float32]) -> (Tensor[(112), int16], Tensor[(7, 16, 8), bool], Tensor[(896), float64], Tensor[(15, 7, 8), float64], Tensor[(40), float32], Tensor[(7, 16, 8), float64]) {
  @func_4469(%var_4471, %var_4472) /* ty=(Tensor[(112), int16], Tensor[(7, 16, 8), bool], Tensor[(896), float64], Tensor[(15, 7, 8), float64], Tensor[(40), float32], Tensor[(7, 16, 8), float64]) */
}

def @func_1754(%var_1752: Tensor[(4, 6, 16), uint32], %var_1753: Tensor[(4, 6, 16), uint32]) -> (Tensor[(4, 6, 16), int8],) {
  %661 = fn (%var_1723: Tensor[(4, 6, 16), uint32], %var_1724: Tensor[(4, 6, 16), uint32]) -> (Tensor[(4, 6, 16), int8],) {
    %644 = cast(%var_1723, dtype="float64") /* ty=Tensor[(4, 6, 16), float64] */;
    %645 = asin(%644) /* ty=Tensor[(4, 6, 16), float64] */;
    %646 = cast(%var_1724, dtype="uint32") /* ty=Tensor[(4, 6, 16), uint32] */;
    %647 = shape_of(%var_1723, dtype="int32") /* ty=Tensor[(3), int32] */;
    %648 = cast(%var_1723, dtype="uint32") /* ty=Tensor[(4, 6, 16), uint32] */;
    %649 = dyn.reshape(%646, %647, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %650 = left_shift(%648, %649) /* ty=Tensor[(4, 6, 16), uint32] */;
    %651 = cast(%650, dtype="bool") /* ty=Tensor[(4, 6, 16), bool] */;
    %652 = shape_of(%645, dtype="int32") /* ty=Tensor[(3), int32] */;
    %653 = cast(%645, dtype="bool") /* ty=Tensor[(4, 6, 16), bool] */;
    %654 = dyn.reshape(%651, %652, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %655 = equal(%653, %654) /* ty=Tensor[(4, 6, 16), bool] */;
    %656 = cast(%650, dtype="int8") /* ty=Tensor[(4, 6, 16), int8] */;
    %657 = shape_of(%655, dtype="int32") /* ty=Tensor[(3), int32] */;
    %658 = cast(%655, dtype="int8") /* ty=Tensor[(4, 6, 16), int8] */;
    %659 = dyn.reshape(%656, %657, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %660 = minimum(%658, %659) /* ty=Tensor[(4, 6, 16), int8] */;
    (%660,)
  };
  %661(%var_1752, %var_1753) /* ty=(Tensor[(4, 6, 16), int8],) */
}

def @func_1846(%var_1840: Tensor[(7, 16, 8), float64]) -> (Tensor[(7, 16, 8), bool],) {
  %662 = @func_1602() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(11, 4, 10), float64], Tensor[(440), float64]) */;
  %663 = %662.0;
  %664 = cast(%var_1840, dtype="bool") /* ty=Tensor[(7, 16, 8), bool] */;
  %665 = shape_of(%663, dtype="int32") /* ty=Tensor[(3), int32] */;
  %666 = cast(%663, dtype="bool") /* ty=Tensor[(7, 16, 8), bool] */;
  %667 = dyn.reshape(%664, %665, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %668 = not_equal(%666, %667) /* ty=Tensor[(7, 16, 8), bool] */;
  (%668,)
}

def @func_6256() -> (Tensor[(7, 16, 8), bool], Tensor[(7, 16, 8), float32]) {
  @func_6254() /* ty=(Tensor[(7, 16, 8), bool], Tensor[(7, 16, 8), float32]) */
}

def @func_6810() -> (Tensor[(7, 16, 8), float32],) {
  %669 = @func_2164() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), uint64], Tensor[(112), int16]) */;
  %670 = %669.0;
  %671 = cast(%670, dtype="float32") /* ty=Tensor[(7, 16, 8), float32] */;
  %672 = log(%671) /* ty=Tensor[(7, 16, 8), float32] */;
  (%672,)
}

def @func_2287(%var_2285: Tensor[(7, 16, 8), float64]) -> (Tensor[(7, 16, 8), bool],) {
  @func_2284(%var_2285) /* ty=(Tensor[(7, 16, 8), bool],) */
}

def @func_6188() -> Tensor[(7, 16, 8), float64] {
  @func_6186() /* ty=Tensor[(7, 16, 8), float64] */
}

def @func_5257() -> (Tensor[(7, 16, 8), bool],) {
  @func_5255() /* ty=(Tensor[(7, 16, 8), bool],) */
}

def @func_4754() -> (Tensor[(7, 16, 8), bool],) {
  %673 = @func_1926() /* ty=(Tensor[(7, 16, 8), float64],) */;
  %674 = %673.0;
  %675 = @func_4154() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(8, 2, 7), int16], Tensor[(112), int16], Tensor[(7, 16, 8), bool]) */;
  %676 = %675.0;
  %677 = cast(%676, dtype="bool") /* ty=Tensor[(7, 16, 8), bool] */;
  %678 = shape_of(%674, dtype="int32") /* ty=Tensor[(3), int32] */;
  %679 = cast(%674, dtype="bool") /* ty=Tensor[(7, 16, 8), bool] */;
  %680 = dyn.reshape(%677, %678, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %681 = greater(%679, %680) /* ty=Tensor[(7, 16, 8), bool] */;
  (%681,)
}

def @func_6361(%var_6359: Tensor[(112), int16]) -> (Tensor[(7, 16, 8), bool], Tensor[(9, 3, 8), float64], Tensor[(216), float64], Tensor[(112), int16]) {
  @func_6358(%var_6359) /* ty=(Tensor[(7, 16, 8), bool], Tensor[(9, 3, 8), float64], Tensor[(216), float64], Tensor[(112), int16]) */
}

def @func_4155() -> (Tensor[(7, 16, 8), float64], Tensor[(8, 2, 7), int16], Tensor[(112), int16], Tensor[(7, 16, 8), bool]) {
  %692 = fn () -> (Tensor[(7, 16, 8), float64], Tensor[(8, 2, 7), int16], Tensor[(112), int16], Tensor[(7, 16, 8), bool]) {
    %682 = @func_1616() /* ty=(Tensor[(7, 16, 8), float64],) */;
    %683 = cast(meta[relay.Constant][32] /* ty=Tensor[(112), int16] */, dtype="int16") /* ty=Tensor[(112), int16] */;
    %684 = reshape(%683, newshape=[8, 2, 7]) /* ty=Tensor[(8, 2, 7), int16] */;
    %685 = @func_1042(%684) /* ty=(Tensor[(8, 2, 7), int16], Tensor[(15, 7, 8), float64], Tensor[(840), float32]) */;
    %686 = %682.0;
    %687 = cast(%686, dtype="float64") /* ty=Tensor[(7, 16, 8), float64] */;
    %688 = reshape(%687, newshape=[7, 16, 8]) /* ty=Tensor[(7, 16, 8), float64] */;
    %689 = @func_2284(%688) /* ty=(Tensor[(7, 16, 8), bool],) */;
    %690 = %685.0;
    %691 = %689.0;
    (%686, %690, meta[relay.Constant][32] /* ty=Tensor[(112), int16] */, %691)
  };
  %692() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(8, 2, 7), int16], Tensor[(112), int16], Tensor[(7, 16, 8), bool]) */
}

def @func_4865(%var_4835: Tensor[(14, 10, 9), float32]) -> (Tensor[(14, 10, 9), bool], Tensor[(7, 16, 8), float64]) {
  %693 = cast(%var_4835, dtype="float32") /* ty=Tensor[(14, 10, 9), float32] */;
  %694 = asinh(%693) /* ty=Tensor[(14, 10, 9), float32] */;
  %695 = cast(%var_4835, dtype="bool") /* ty=Tensor[(14, 10, 9), bool] */;
  %696 = shape_of(%694, dtype="int32") /* ty=Tensor[(3), int32] */;
  %697 = cast(%694, dtype="bool") /* ty=Tensor[(14, 10, 9), bool] */;
  %698 = dyn.reshape(%695, %696, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %699 = @func_3270() /* ty=(Tensor[(7, 16, 8), uint32],) */;
  %700 = %699.0;
  %701 = cast(%700, dtype="float64") /* ty=Tensor[(7, 16, 8), float64] */;
  %702 = not_equal(%697, %698) /* ty=Tensor[(14, 10, 9), bool] */;
  %703 = log10(%701) /* ty=Tensor[(7, 16, 8), float64] */;
  (%702, %703)
}

def @func_3782() -> (Tensor[(7, 16, 8), float64], Tensor[(112), uint8], Tensor[(11, 4, 10), float64], Tensor[(440), float64], Tensor[(7, 16, 8), float32]) {
  %720 = fn () -> (Tensor[(7, 16, 8), float64], Tensor[(112), uint8], Tensor[(11, 4, 10), float64], Tensor[(440), float64], Tensor[(7, 16, 8), float32]) {
    %704 = cast(meta[relay.Constant][33] /* ty=Tensor[(112), int16] */, dtype="int16") /* ty=Tensor[(112), int16] */;
    %705 = reshape(%704, newshape=[112]) /* ty=Tensor[(112), int16] */;
    %706 = @func_2952(%705) /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(112), int16]) */;
    %707 = %706.2;
    %708 = cast(meta[relay.Constant][33] /* ty=Tensor[(112), int16] */, dtype="uint8") /* ty=Tensor[(112), uint8] */;
    %709 = shape_of(%707, dtype="int32") /* ty=Tensor[(1), int32] */;
    %710 = cast(%707, dtype="uint8") /* ty=Tensor[(112), uint8] */;
    %711 = dyn.reshape(%708, %709, newshape=[]) /* ty=Tensor[(?), uint8] */;
    %712 = cast(meta[relay.Constant][34] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
    %713 = reshape(%712, newshape=[11, 4, 10]) /* ty=Tensor[(11, 4, 10), float64] */;
    %714 = @func_1536(%713) /* ty=(Tensor[(11, 4, 10), float64],) */;
    %715 = @func_2455() /* ty=(Tensor[(7, 16, 8), float32],) */;
    %716 = @func_3514() /* ty=Tensor[(7, 16, 8), float64] */;
    %717 = logical_xor(%710, %711) /* ty=Tensor[(112), uint8] */;
    %718 = %714.0;
    %719 = %715.0;
    (%716, %717, %718, meta[relay.Constant][34] /* ty=Tensor[(440), float64] */, %719)
  };
  %720() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(112), uint8], Tensor[(11, 4, 10), float64], Tensor[(440), float64], Tensor[(7, 16, 8), float32]) */
}

def @func_6186() -> Tensor[(7, 16, 8), float64] {
  @func_2634() /* ty=Tensor[(7, 16, 8), float64] */
}

def @func_4665() -> Tensor[(7, 16, 8), float64] {
  %722 = fn () -> Tensor[(7, 16, 8), float64] {
    %721 = @func_1602() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(11, 4, 10), float64], Tensor[(440), float64]) */;
    %721.1
  };
  %722() /* ty=Tensor[(7, 16, 8), float64] */
}

def @func_4002(%var_4000: Tensor[(112, 1), int16], %var_4001: Tensor[(1456), int32]) -> (Tensor[(7, 16, 8), float64], Tensor[(7, 112), float64], Tensor[(784), float32], Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float32], Tensor[(7, 16, 8), float64], Tensor[(112, 384), float32], Tensor[(7, 16, 8), uint64], Tensor[(1456), int32]) {
  %750 = fn (%var_3988: Tensor[(112, 1), int16], %var_3997: Tensor[(1456), int32]) -> (Tensor[(7, 16, 8), float64], Tensor[(7, 112), float64], Tensor[(784), float32], Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float32], Tensor[(7, 16, 8), float64], Tensor[(112, 384), float32], Tensor[(7, 16, 8), uint64], Tensor[(1456), int32]) {
    %723 = @func_1616() /* ty=(Tensor[(7, 16, 8), float64],) */;
    %724 = cast(meta[relay.Constant][35] /* ty=Tensor[(384), uint32] */, dtype="uint32") /* ty=Tensor[(384), uint32] */;
    %725 = %723.0;
    %726 = cast(%725, dtype="bool") /* ty=Tensor[(7, 16, 8), bool] */;
    %727 = cast(meta[relay.Constant][36] /* ty=Tensor[(784), float32] */, dtype="float32") /* ty=Tensor[(784), float32] */;
    %728 = reshape(%724, newshape=[384]) /* ty=Tensor[(384), uint32] */;
    %729 = reshape(%726, newshape=[112, 8]) /* ty=Tensor[(112, 8), bool] */;
    %730 = reshape(%727, newshape=[7, 112]) /* ty=Tensor[(7, 112), float32] */;
    %731 = @func_3572(%728, %729, %730) /* ty=(Tensor[(112), int16], Tensor[(384), uint32], Tensor[(112, 8), bool], Tensor[(7, 112), float64]) */;
    %732 = @func_3193() /* ty=(Tensor[(7, 16, 8), float64],) */;
    %733 = @func_2455() /* ty=(Tensor[(7, 16, 8), float32],) */;
    %734 = cast(%var_3988, dtype="int16") /* ty=Tensor[(112, 1), int16] */;
    %735 = %732.0;
    %736 = cast(%735, dtype="float32") /* ty=Tensor[(7, 16, 8), float32] */;
    %737 = reshape(%734, newshape=[4, 28]) /* ty=Tensor[(4, 28), int16] */;
    %738 = reshape(%736, newshape=[7, 16, 8]) /* ty=Tensor[(7, 16, 8), float32] */;
    %739 = @func_1655(%737, %738) /* ty=(Tensor[(8, 2, 7), int16], Tensor[(4, 28), int16], Tensor[(7, 16, 8), float64]) */;
    %740 = cast(meta[relay.Constant][35] /* ty=Tensor[(384), uint32] */, dtype="float32") /* ty=Tensor[(384), float32] */;
    %741 = cast(%var_3988, dtype="float32") /* ty=Tensor[(112, 1), float32] */;
    %742 = cast(%var_3997, dtype="int32") /* ty=Tensor[(1456), int32] */;
    %743 = reshape(%742, newshape=[16, 13, 7]) /* ty=Tensor[(16, 13, 7), int32] */;
    %744 = @func_3669(%743) /* ty=(Tensor[(7, 16, 8), uint64], Tensor[(16, 13, 7), int32]) */;
    %745 = %731.3;
    %746 = %733.0;
    %747 = %739.2;
    %748 = floor_mod(%740, %741) /* ty=Tensor[(112, 384), float32] */;
    %749 = %744.0;
    (%725, %745, meta[relay.Constant][36] /* ty=Tensor[(784), float32] */, %735, %746, %747, %748, %749, %var_3997)
  };
  %750(%var_4000, %var_4001) /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 112), float64], Tensor[(784), float32], Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float32], Tensor[(7, 16, 8), float64], Tensor[(112, 384), float32], Tensor[(7, 16, 8), uint64], Tensor[(1456), int32]) */
}

def @func_3672(%var_3670: Tensor[(16, 13, 7), int32]) -> (Tensor[(7, 16, 8), uint64], Tensor[(16, 13, 7), int32]) {
  @func_3669(%var_3670) /* ty=(Tensor[(7, 16, 8), uint64], Tensor[(16, 13, 7), int32]) */
}

def @func_1042(%var_1010: Tensor[(8, 2, 7), int16]) -> (Tensor[(8, 2, 7), int16], Tensor[(15, 7, 8), float64], Tensor[(840), float32]) {
  %751 = cast(%var_1010, dtype="int16") /* ty=Tensor[(8, 2, 7), int16] */;
  %752 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(8, 2, 7), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %753 = cast(meta[relay.Constant][37] /* ty=Tensor[(8, 2, 7), int16] */, dtype="int16") /* ty=Tensor[(8, 2, 7), int16] */;
  %754 = dyn.reshape(%751, %752, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %755 = cast(meta[relay.Constant][38] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %756 = reshape(%755, newshape=[15, 7, 8]) /* ty=Tensor[(15, 7, 8), float32] */;
  %757 = bitwise_and(%753, %754) /* ty=Tensor[(8, 2, 7), int16] */;
  %758 = @func_273(%756) /* ty=Tensor[(15, 7, 8), float64] */;
  (%757, %758, meta[relay.Constant][38] /* ty=Tensor[(840), float32] */)
}

def @func_6323() -> Tensor[(7, 16, 8), float64] {
  @func_6321() /* ty=Tensor[(7, 16, 8), float64] */
}

def @func_1086(%var_1084: Tensor[(9, 3, 8), float64], %var_1085: Tensor[(112), int16]) -> (Tensor[(9, 3, 8), float64], Tensor[(8, 2, 7), int16], Tensor[(112), int16], Tensor[(8, 2, 7), int16]) {
  @func_1082(%var_1084, %var_1085) /* ty=(Tensor[(9, 3, 8), float64], Tensor[(8, 2, 7), int16], Tensor[(112), int16], Tensor[(8, 2, 7), int16]) */
}

def @func_6779(%var_6778: Tensor[(216), float64]) -> (Tensor[(15, 13, 4), float32], Tensor[(7, 16, 8), float64], Tensor[(216), float64], Tensor[(112), int16]) {
  %769 = fn (%var_6769: Tensor[(216), float64]) -> (Tensor[(15, 13, 4), float32], Tensor[(7, 16, 8), float64], Tensor[(216), float64], Tensor[(112), int16]) {
    %759 = @func_6428() /* ty=(Tensor[(15, 13, 4), float32],) */;
    %760 = cast(%var_6769, dtype="float64") /* ty=Tensor[(216), float64] */;
    %761 = cast(%var_6769, dtype="float64") /* ty=Tensor[(216), float64] */;
    %762 = cast(meta[relay.Constant][39] /* ty=Tensor[(112), int16] */, dtype="int16") /* ty=Tensor[(112), int16] */;
    %763 = reshape(%760, newshape=[9, 8, 3]) /* ty=Tensor[(9, 8, 3), float64] */;
    %764 = reshape(%761, newshape=[9, 8, 3]) /* ty=Tensor[(9, 8, 3), float64] */;
    %765 = reshape(%762, newshape=[112]) /* ty=Tensor[(112), int16] */;
    %766 = @func_1344(%763, %764, %765) /* ty=(Tensor[(9, 8, 3), bool], Tensor[(9, 8, 3), float32], Tensor[(7, 16, 8), float64], Tensor[(112), int16], Tensor[(8, 2, 7), int16]) */;
    %767 = %759.0;
    %768 = %766.2;
    (%767, %768, %var_6769, meta[relay.Constant][39] /* ty=Tensor[(112), int16] */)
  };
  %769(%var_6778) /* ty=(Tensor[(15, 13, 4), float32], Tensor[(7, 16, 8), float64], Tensor[(216), float64], Tensor[(112), int16]) */
}

def @func_6100(%var_6099: Tensor[(112), int16]) -> (Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), bool], Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float32], Tensor[(11, 4, 10), int8], Tensor[(440), float64], Tensor[(112), int16], Tensor[(7, 16, 8), float64], Tensor[(9, 140), float64], Tensor[(9, 140), float64], Tensor[(7, 16, 8), float64], Tensor[(9, 140), float64]) {
  %803 = fn (%var_6049: Tensor[(112), int16]) -> (Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), bool], Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float32], Tensor[(11, 4, 10), int8], Tensor[(440), float64], Tensor[(112), int16], Tensor[(7, 16, 8), float64], Tensor[(9, 140), float64], Tensor[(9, 140), float64], Tensor[(7, 16, 8), float64], Tensor[(9, 140), float64]) {
    %770 = @func_5598() /* ty=(Tensor[(7, 16, 8), uint32], Tensor[(7, 16, 8), float64]) */;
    %771 = cast(meta[relay.Constant][40] /* ty=Tensor[(9, 140), float32] */, dtype="float32") /* ty=Tensor[(9, 140), float32] */;
    %772 = reshape(%771, newshape=[14, 10, 9]) /* ty=Tensor[(14, 10, 9), float32] */;
    %773 = @func_4865(%772) /* ty=(Tensor[(14, 10, 9), bool], Tensor[(7, 16, 8), float64]) */;
    %774 = @func_3193() /* ty=(Tensor[(7, 16, 8), float64],) */;
    %775 = %774.0;
    %776 = cast(%775, dtype="float64") /* ty=Tensor[(7, 16, 8), float64] */;
    %777 = reshape(%776, newshape=[7, 16, 8]) /* ty=Tensor[(7, 16, 8), float64] */;
    %778 = @func_2284(%777) /* ty=(Tensor[(7, 16, 8), bool],) */;
    %779 = @func_3790() /* ty=(Tensor[(7, 16, 8), float64],) */;
    %780 = cast(%775, dtype="float32") /* ty=Tensor[(7, 16, 8), float32] */;
    %781 = cast(meta[relay.Constant][41] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
    %782 = cast(%var_6049, dtype="int16") /* ty=Tensor[(112), int16] */;
    %783 = reshape(%781, newshape=[11, 4, 10]) /* ty=Tensor[(11, 4, 10), float64] */;
    %784 = reshape(%782, newshape=[112]) /* ty=Tensor[(112), int16] */;
    %785 = @func_2351(%783, %784) /* ty=(Tensor[(11, 4, 10), int8], Tensor[(8, 2, 7), int16], Tensor[(896), float64], Tensor[(112), int16], Tensor[(7, 16, 8), float64]) */;
    %786 = cast(meta[relay.Constant][40] /* ty=Tensor[(9, 140), float32] */, dtype="float64") /* ty=Tensor[(9, 140), float64] */;
    %787 = acosh(%786) /* ty=Tensor[(9, 140), float64] */;
    %788 = cast(%787, dtype="float64") /* ty=Tensor[(9, 140), float64] */;
    %789 = cast(%787, dtype="float64") /* ty=Tensor[(9, 140), float64] */;
    %790 = @func_3790() /* ty=(Tensor[(7, 16, 8), float64],) */;
    %791 = cast(%787, dtype="float64") /* ty=Tensor[(9, 140), float64] */;
    %792 = %770.1;
    %793 = %773.1;
    %794 = %778.0;
    %795 = %779.0;
    %796 = asinh(%780) /* ty=Tensor[(7, 16, 8), float32] */;
    %797 = %785.0;
    %798 = @func_3397() /* ty=Tensor[(7, 16, 8), float64] */;
    %799 = sqrt(%788) /* ty=Tensor[(9, 140), float64] */;
    %800 = log10(%789) /* ty=Tensor[(9, 140), float64] */;
    %801 = %790.0;
    %802 = log2(%791) /* ty=Tensor[(9, 140), float64] */;
    (%792, %793, %794, %795, %796, %797, meta[relay.Constant][41] /* ty=Tensor[(440), float64] */, %var_6049, %798, %799, %800, %801, %802)
  };
  %803(%var_6099) /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), bool], Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float32], Tensor[(11, 4, 10), int8], Tensor[(440), float64], Tensor[(112), int16], Tensor[(7, 16, 8), float64], Tensor[(9, 140), float64], Tensor[(9, 140), float64], Tensor[(7, 16, 8), float64], Tensor[(9, 140), float64]) */
}

def @func_3639(%var_3637: Tensor[(2, 5, 4), float32]) -> (Tensor[(2, 5, 4), float32], Tensor[(15, 7, 8), float64], Tensor[(12, 70), float32]) {
  @func_3636(%var_3637) /* ty=(Tensor[(2, 5, 4), float32], Tensor[(15, 7, 8), float64], Tensor[(12, 70), float32]) */
}

def @func_6254() -> (Tensor[(7, 16, 8), bool], Tensor[(7, 16, 8), float32]) {
  %804 = @func_5523() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), bool]) */;
  %805 = @func_5696() /* ty=(Tensor[(7, 16, 8), float32],) */;
  %806 = %804.1;
  %807 = %805.0;
  (%806, %807)
}

def @func_2456() -> (Tensor[(7, 16, 8), float32],) {
  %810 = fn () -> (Tensor[(7, 16, 8), float32],) {
    %808 = @func_1578() /* ty=(Tensor[(7, 16, 8), float32], Tensor[(7, 16, 8), float64]) */;
    %809 = %808.0;
    (%809,)
  };
  %810() /* ty=(Tensor[(7, 16, 8), float32],) */
}

def @func_6005(%var_5996: Tensor[(120), float32], %var_5997: Tensor[(1320), float32]) -> (Tensor[(7, 16, 8), float32], Tensor[(12, 10, 11), bool], Tensor[(120), float32], Tensor[(1320), float32]) {
  %811 = cast(%var_5996, dtype="float32") /* ty=Tensor[(120), float32] */;
  %812 = cast(%var_5997, dtype="float32") /* ty=Tensor[(1320), float32] */;
  %813 = reshape(%811, newshape=[12, 10, 1]) /* ty=Tensor[(12, 10, 1), float32] */;
  %814 = reshape(%812, newshape=[12, 10, 11]) /* ty=Tensor[(12, 10, 11), float32] */;
  %815 = @func_5928(%813, %814) /* ty=(Tensor[(12, 10, 11), bool],) */;
  %816 = @func_2645() /* ty=Tensor[(7, 16, 8), float32] */;
  %817 = %815.0;
  (%816, %817, %var_5996, %var_5997)
}

def @func_6640() -> (Tensor[(7, 16, 8), float32], Tensor[(7, 16, 8), float64], Tensor[(112), int16]) {
  @func_6638() /* ty=(Tensor[(7, 16, 8), float32], Tensor[(7, 16, 8), float64], Tensor[(112), int16]) */
}

def @func_4275() -> (Tensor[(112), int16], Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64]) {
  @func_4273() /* ty=(Tensor[(112), int16], Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64]) */
}

def @func_1804(%var_1802: Tensor[(112), int16]) -> (Tensor[(7, 16, 8), float32], Tensor[(7, 16, 8), uint64], Tensor[(112), int16]) {
  @func_1801(%var_1802) /* ty=(Tensor[(7, 16, 8), float32], Tensor[(7, 16, 8), uint64], Tensor[(112), int16]) */
}

def @func_2954(%var_2953: Tensor[(112), int16]) -> (Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(112), int16]) {
  %824 = fn (%var_2944: Tensor[(112), int16]) -> (Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(112), int16]) {
    %818 = @func_1522() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(112), int16]) */;
    %819 = cast(%var_2944, dtype="int16") /* ty=Tensor[(112), int16] */;
    %820 = reshape(%819, newshape=[112]) /* ty=Tensor[(112), int16] */;
    %821 = @func_2430(%820) /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), bool], Tensor[(112), int16]) */;
    %822 = %818.0;
    %823 = %821.0;
    (%822, %823, %var_2944)
  };
  %824(%var_2953) /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(112), int16]) */
}

def @func_1536(%var_1533: Tensor[(11, 4, 10), float64]) -> (Tensor[(11, 4, 10), float64],) {
  %825 = cast(%var_1533, dtype="float64") /* ty=Tensor[(11, 4, 10), float64] */;
  %826 = acos(%825) /* ty=Tensor[(11, 4, 10), float64] */;
  (%826,)
}

def @func_2432(%var_2431: Tensor[(112), int16]) -> (Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), bool], Tensor[(112), int16]) {
  %835 = fn (%var_2425: Tensor[(112), int16]) -> (Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), bool], Tensor[(112), int16]) {
    %827 = @func_1678() /* ty=Tensor[(7, 16, 8), float64] */;
    %828 = cast(%827, dtype="float64") /* ty=Tensor[(7, 16, 8), float64] */;
    %829 = cast(%var_2425, dtype="int16") /* ty=Tensor[(112), int16] */;
    %830 = reshape(%828, newshape=[7, 16, 8]) /* ty=Tensor[(7, 16, 8), float64] */;
    %831 = reshape(%829, newshape=[112]) /* ty=Tensor[(112), int16] */;
    %832 = @func_1426(%830, %831) /* ty=(Tensor[(7, 16, 8), bool], Tensor[(7, 16, 8), int16], Tensor[(7, 16, 8), uint64], Tensor[(112), int16]) */;
    %833 = @func_1124() /* ty=Tensor[(7, 16, 8), float64] */;
    %834 = %832.0;
    (%833, %827, %834, %var_2425)
  };
  %835(%var_2431) /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), bool], Tensor[(112), int16]) */
}

def @func_1125() -> Tensor[(7, 16, 8), float64] {
  %837 = fn () -> Tensor[(7, 16, 8), float64] {
    %836 = cast(meta[relay.Constant][42] /* ty=Tensor[(7, 16, 8), float64] */, dtype="float64") /* ty=Tensor[(7, 16, 8), float64] */;
    log2(%836) /* ty=Tensor[(7, 16, 8), float64] */
  };
  %837() /* ty=Tensor[(7, 16, 8), float64] */
}

def @func_2594(%var_2591: Tensor[(12, 16, 7), float32], %var_2592: Tensor[(896), float64], %var_2593: Tensor[(28, 4), int16]) -> (Tensor[(12, 16, 7), float32], Tensor[(8, 2, 7), int16], Tensor[(896), float64], Tensor[(28, 4), int16]) {
  %846 = fn (%var_2568: Tensor[(12, 16, 7), float32], %var_2579: Tensor[(896), float64], %var_2580: Tensor[(28, 4), int16]) -> (Tensor[(12, 16, 7), float32], Tensor[(8, 2, 7), int16], Tensor[(896), float64], Tensor[(28, 4), int16]) {
    %838 = cast(%var_2568, dtype="float32") /* ty=Tensor[(12, 16, 7), float32] */;
    %839 = cast(%var_2579, dtype="float64") /* ty=Tensor[(896), float64] */;
    %840 = cast(%var_2580, dtype="int16") /* ty=Tensor[(28, 4), int16] */;
    %841 = reshape(%839, newshape=[7, 16, 8]) /* ty=Tensor[(7, 16, 8), float64] */;
    %842 = reshape(%840, newshape=[1, 112]) /* ty=Tensor[(1, 112), int16] */;
    %843 = @func_1241(%841, %842) /* ty=(Tensor[(7, 16, 8), uint64], Tensor[(8, 2, 7), int16], Tensor[(216), float64], Tensor[(1, 112), int16]) */;
    %844 = tan(%838) /* ty=Tensor[(12, 16, 7), float32] */;
    %845 = %843.1;
    (%844, %845, %var_2579, %var_2580)
  };
  %846(%var_2591, %var_2592, %var_2593) /* ty=(Tensor[(12, 16, 7), float32], Tensor[(8, 2, 7), int16], Tensor[(896), float64], Tensor[(28, 4), int16]) */
}

def @func_1539(%var_1537: Tensor[(11, 4, 10), float64]) -> (Tensor[(11, 4, 10), float64],) {
  @func_1536(%var_1537) /* ty=(Tensor[(11, 4, 10), float64],) */
}

def @func_6413(%var_6411: Tensor[(3, 14, 1), int8], %var_6412: Tensor[(3, 14, 3), int8]) -> Tensor[(3, 14, 3), int16] {
  @func_6409(%var_6411, %var_6412) /* ty=Tensor[(3, 14, 3), int16] */
}

def @func_6543() -> (Tensor[(7, 16, 8), float64],) {
  %848 = fn () -> (Tensor[(7, 16, 8), float64],) {
    %847 = @func_3397() /* ty=Tensor[(7, 16, 8), float64] */;
    (%847,)
  };
  %848() /* ty=(Tensor[(7, 16, 8), float64],) */
}

def @func_3398() -> Tensor[(7, 16, 8), float64] {
  %852 = fn () -> Tensor[(7, 16, 8), float64] {
    %849 = @func_1944() /* ty=(Tensor[(7, 16, 8), float64],) */;
    %850 = %849.0;
    %851 = cast(%850, dtype="float64") /* ty=Tensor[(7, 16, 8), float64] */;
    cosh(%851) /* ty=Tensor[(7, 16, 8), float64] */
  };
  %852() /* ty=Tensor[(7, 16, 8), float64] */
}

def @func_1524() -> (Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(112), int16]) {
  @func_1522() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64], Tensor[(112), int16]) */
}

def @func_5069(%var_5067: uint16, %var_5068: Tensor[(11, 2, 1), uint16]) -> (Tensor[(11, 2, 1), uint16],) {
  @func_5065(%var_5067, %var_5068) /* ty=(Tensor[(11, 2, 1), uint16],) */
}

def @func_3173(%var_3171: Tensor[(7, 16, 8), float64]) -> (Tensor[(7, 16, 8), float64],) {
  @func_3170(%var_3171) /* ty=(Tensor[(7, 16, 8), float64],) */
}

def @func_2261(%var_2258: Tensor[(384), uint32], %var_2259: Tensor[(1, 112), int16], %var_2260: Tensor[(7, 16, 8), bool]) -> (Tensor[(7, 16, 8), uint8], Tensor[(4, 6, 16), int8], Tensor[(384), uint32], Tensor[(7, 16, 8), float64], Tensor[(1, 112), int16], Tensor[(7, 16, 8), int64], Tensor[(7, 16, 8), bool], Tensor[(7, 16, 8), uint64], Tensor[(8, 2, 7), int16]) {
  %891 = fn (%var_2204: Tensor[(384), uint32], %var_2218: Tensor[(1, 112), int16], %var_2222: Tensor[(7, 16, 8), bool]) -> (Tensor[(7, 16, 8), uint8], Tensor[(4, 6, 16), int8], Tensor[(384), uint32], Tensor[(7, 16, 8), float64], Tensor[(1, 112), int16], Tensor[(7, 16, 8), int64], Tensor[(7, 16, 8), bool], Tensor[(7, 16, 8), uint64], Tensor[(8, 2, 7), int16]) {
    %853 = @func_2075() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), float64]) */;
    %854 = %853.1;
    %855 = cast(%854, dtype="float64") /* ty=Tensor[(7, 16, 8), float64] */;
    %856 = reshape(%855, newshape=[7, 16, 8]) /* ty=Tensor[(7, 16, 8), float64] */;
    %857 = @func_2021(%856) /* ty=(Tensor[(7, 16, 8), bool],) */;
    %858 = %857.0;
    %859 = cast(%858, dtype="uint8") /* ty=Tensor[(7, 16, 8), uint8] */;
    %860 = shape_of(%854, dtype="int32") /* ty=Tensor[(3), int32] */;
    %861 = cast(%854, dtype="uint8") /* ty=Tensor[(7, 16, 8), uint8] */;
    %862 = dyn.reshape(%859, %860, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %863 = cast(%var_2204, dtype="uint32") /* ty=Tensor[(384), uint32] */;
    %864 = cast(%var_2204, dtype="uint32") /* ty=Tensor[(384), uint32] */;
    %865 = reshape(%863, newshape=[4, 6, 16]) /* ty=Tensor[(4, 6, 16), uint32] */;
    %866 = reshape(%864, newshape=[4, 6, 16]) /* ty=Tensor[(4, 6, 16), uint32] */;
    %867 = @func_1751(%865, %866) /* ty=(Tensor[(4, 6, 16), int8],) */;
    %868 = cast(%var_2218, dtype="int16") /* ty=Tensor[(1, 112), int16] */;
    %869 = cast(%854, dtype="float32") /* ty=Tensor[(7, 16, 8), float32] */;
    %870 = reshape(%868, newshape=[4, 28]) /* ty=Tensor[(4, 28), int16] */;
    %871 = reshape(%869, newshape=[7, 16, 8]) /* ty=Tensor[(7, 16, 8), float32] */;
    %872 = @func_1655(%870, %871) /* ty=(Tensor[(8, 2, 7), int16], Tensor[(4, 28), int16], Tensor[(7, 16, 8), float64]) */;
    %873 = cast(%var_2222, dtype="int64") /* ty=Tensor[(7, 16, 8), int64] */;
    %874 = shape_of(%858, dtype="int32") /* ty=Tensor[(3), int32] */;
    %875 = cast(%858, dtype="int64") /* ty=Tensor[(7, 16, 8), int64] */;
    %876 = dyn.reshape(%873, %874, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %877 = bitwise_and(%875, %876) /* ty=Tensor[(7, 16, 8), int64] */;
    %878 = cast(%877, dtype="float64") /* ty=Tensor[(7, 16, 8), float64] */;
    %879 = reshape(%878, newshape=[7, 16, 8]) /* ty=Tensor[(7, 16, 8), float64] */;
    %880 = @func_2021(%879) /* ty=(Tensor[(7, 16, 8), bool],) */;
    %881 = @func_2164() /* ty=(Tensor[(7, 16, 8), float64], Tensor[(7, 16, 8), uint64], Tensor[(112), int16]) */;
    %882 = cast(%var_2218, dtype="int16") /* ty=Tensor[(1, 112), int16] */;
    %883 = reshape(%882, newshape=[28, 4]) /* ty=Tensor[(28, 4), int16] */;
    %884 = @func_1191(%883) /* ty=(Tensor[(7, 16, 8), float64], Tensor[(8, 2, 7), int16], Tensor[(28, 4), int16]) */;
    %885 = right_shift(%861, %862) /* ty=Tensor[(7, 16, 8), uint8] */;
    %886 = %867.0;
    %887 = %872.2;
    %888 = %880.0;
    %889 = %881.1;
    %890 = %884.1;
    (%885, %886, %var_2204, %887, %var_2218, %877, %888, %889, %890)
  };
  %891(%var_2258, %var_2259, %var_2260) /* ty=(Tensor[(7, 16, 8), uint8], Tensor[(4, 6, 16), int8], Tensor[(384), uint32], Tensor[(7, 16, 8), float64], Tensor[(1, 112), int16], Tensor[(7, 16, 8), int64], Tensor[(7, 16, 8), bool], Tensor[(7, 16, 8), uint64], Tensor[(8, 2, 7), int16]) */
}

def @func_3195() -> (Tensor[(7, 16, 8), float64],) {
  @func_3193() /* ty=(Tensor[(7, 16, 8), float64],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen41/build/output.py", line 2234, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:45:52] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

