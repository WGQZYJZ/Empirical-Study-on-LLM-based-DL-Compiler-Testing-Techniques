==========mod==========
#[version = "0.0.5"]
def @func_855(%var_828: Tensor[(15, 5, 5), float64], %var_843: Tensor[(210, 1), uint64]) -> (Tensor[(15, 5, 5), int8], Tensor[(144), float32], Tensor[(210, 1), uint64], Tensor[(320), float32]) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(15, 5, 5), float64] */, dtype="float64") /* ty=Tensor[(15, 5, 5), float64] */;
  %1 = exp(%0) /* ty=Tensor[(15, 5, 5), float64] */;
  %2 = cast(%var_828, dtype="int8") /* ty=Tensor[(15, 5, 5), int8] */;
  %3 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
  %4 = cast(%1, dtype="int8") /* ty=Tensor[(15, 5, 5), int8] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %6 = cast(%var_843, dtype="uint64") /* ty=Tensor[(210, 1), uint64] */;
  %7 = cast(meta[relay.Constant][1] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %8 = reshape(%6, newshape=[6, 5, 7]) /* ty=Tensor[(6, 5, 7), uint64] */;
  %9 = reshape(%7, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %10 = @func_202(%8, %9) /* ty=(Tensor[(6, 5, 7), float64], Tensor[(16, 2, 10), float64], Tensor[(144), float32], Tensor[(320), float32], Tensor[(6, 5, 7), int16]) */;
  %11 = multiply(%4, %5) /* ty=Tensor[(15, 5, 5), int8] */;
  %12 = %10.2;
  (%11, %12, %var_843, meta[relay.Constant][1] /* ty=Tensor[(320), float32] */)
}

def @func_3842(%var_3824: Tensor[(300), float32]) -> (Tensor[(1536), float32], Tensor[(5, 6, 10), float32], Tensor[(300), float32], Tensor[(11, 96, 2), float32]) {
  %13 = cast(%var_3824, dtype="float32") /* ty=Tensor[(300), float32] */;
  %14 = cast(%var_3824, dtype="float32") /* ty=Tensor[(300), float32] */;
  %15 = reshape(%13, newshape=[5, 6, 10]) /* ty=Tensor[(5, 6, 10), float32] */;
  %16 = reshape(%14, newshape=[5, 6, 10]) /* ty=Tensor[(5, 6, 10), float32] */;
  %17 = @func_233(%15, %16) /* ty=(Tensor[(5, 6, 10), float32], Tensor[(16, 2, 10), float64], Tensor[(320), float32]) */;
  %18 = @func_2433() /* ty=Tensor[(11, ?, 2), float64] */;
  %19 = cast(meta[relay.Constant][2] /* ty=Tensor[(1536), float32] */, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %20 = reshape(%19, newshape=[96, 16]) /* ty=Tensor[(96, 16), float32] */;
  %21 = @func_3657(%20) /* ty=(Tensor[(96, 1), float64], Tensor[(11, ?, 2), float64], Tensor[(96, 16), float64], Tensor[(96, 16), float64]) */;
  %22 = %21.0;
  %23 = cast(%18, dtype="uint64") /* ty=Tensor[(11, ?, 2), uint64] */;
  %24 = cast(%22, dtype="uint64") /* ty=Tensor[(96, 1), uint64] */;
  %25 = multiply(%23, %24) /* ty=Tensor[(11, 96, 2), uint64] */;
  %26 = cast(%25, dtype="float32") /* ty=Tensor[(11, 96, 2), float32] */;
  %27 = %17.0;
  %28 = sqrt(%26) /* ty=Tensor[(11, 96, 2), float32] */;
  (meta[relay.Constant][2] /* ty=Tensor[(1536), float32] */, %27, %var_3824, %28)
}

def @func_4621(%var_4611: Tensor[(96, 10), float32]) -> (Tensor[(96, 10), float64], Tensor[(5, 7, 3), float32], Tensor[(105), float32], Tensor[(210), uint64]) {
  %29 = @func_3254() /* ty=(Tensor[(11, ?, 2), float64], Tensor[(300), float32], Tensor[(96, 1), float32]) */;
  %30 = %29.2;
  %31 = cast(%30, dtype="float32") /* ty=Tensor[(96, 1), float32] */;
  %32 = asin(%31) /* ty=Tensor[(96, 1), float32] */;
  %33 = cast(%32, dtype="float64") /* ty=Tensor[(96, 1), float64] */;
  %34 = cast(%var_4611, dtype="float64") /* ty=Tensor[(96, 10), float64] */;
  %35 = cast(meta[relay.Constant][3] /* ty=Tensor[(105), float32] */, dtype="float32") /* ty=Tensor[(105), float32] */;
  %36 = cast(meta[relay.Constant][4] /* ty=Tensor[(210), uint64] */, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %37 = reshape(%35, newshape=[5, 7, 3]) /* ty=Tensor[(5, 7, 3), float32] */;
  %38 = reshape(%36, newshape=[35, 6]) /* ty=Tensor[(35, 6), uint64] */;
  %39 = @func_403(%37, %38) /* ty=(Tensor[(5, 7, 3), float32], Tensor[(320), float32], Tensor[(35, 6), uint64], Tensor[(4, 80), float32], Tensor[(5, 7, 3), float32]) */;
  %40 = add(%33, %34) /* ty=Tensor[(96, 10), float64] */;
  %41 = %39.4;
  (%40, %41, meta[relay.Constant][3] /* ty=Tensor[(105), float32] */, meta[relay.Constant][4] /* ty=Tensor[(210), uint64] */)
}

def @func_2625(%var_2587: Tensor[(11, 4, 2), float64], %var_2614: Tensor[(105), float32], %var_2615: Tensor[(210), uint64]) -> (Tensor[(11, 4, 2), bool], Tensor[(11, ?, 2), float64], Tensor[(11, 4, 2), float64], Tensor[(35, 6), uint64], Tensor[(105), float32], Tensor[(210), uint64]) {
  %42 = @func_2433() /* ty=Tensor[(11, ?, 2), float64] */;
  %43 = cast(%42, dtype="bool") /* ty=Tensor[(11, ?, 2), bool] */;
  %44 = cast(%var_2587, dtype="bool") /* ty=Tensor[(11, 4, 2), bool] */;
  %45 = cast(%var_2587, dtype="float64") /* ty=Tensor[(11, 4, 2), float64] */;
  %46 = erf(%45) /* ty=Tensor[(11, 4, 2), float64] */;
  %47 = cast(%46, dtype="float64") /* ty=Tensor[(11, 4, 2), float64] */;
  %48 = cast(%var_2614, dtype="float32") /* ty=Tensor[(105), float32] */;
  %49 = cast(%var_2615, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %50 = reshape(%48, newshape=[5, 7, 3]) /* ty=Tensor[(5, 7, 3), float32] */;
  %51 = reshape(%49, newshape=[35, 6]) /* ty=Tensor[(35, 6), uint64] */;
  %52 = @func_403(%50, %51) /* ty=(Tensor[(5, 7, 3), float32], Tensor[(320), float32], Tensor[(35, 6), uint64], Tensor[(4, 80), float32], Tensor[(5, 7, 3), float32]) */;
  %53 = logical_or(%43, %44) /* ty=Tensor[(11, 4, 2), bool] */;
  %54 = @func_1789() /* ty=Tensor[(11, ?, 2), float64] */;
  %55 = acosh(%47) /* ty=Tensor[(11, 4, 2), float64] */;
  %56 = %52.2;
  (%53, %54, %55, %56, %var_2614, %var_2615)
}

def @func_1789() -> Tensor[(11, ?, 2), float64] {
  %57 = cast(meta[relay.Constant][5] /* ty=Tensor[(11, 1, 2), float64] */, dtype="float64") /* ty=Tensor[(11, 1, 2), float64] */;
  %58 = asin(%57) /* ty=Tensor[(11, 1, 2), float64] */;
  %59 = cast(%58, dtype="float64") /* ty=Tensor[(11, 1, 2), float64] */;
  %60 = asinh(%59) /* ty=Tensor[(11, 1, 2), float64] */;
  %61 = cast(meta[relay.Constant][5] /* ty=Tensor[(11, 1, 2), float64] */, dtype="float64") /* ty=Tensor[(11, 1, 2), float64] */;
  %62 = shape_of(%60, dtype="int32") /* ty=Tensor[(3), int32] */;
  %63 = cast(%60, dtype="float64") /* ty=Tensor[(11, 1, 2), float64] */;
  %64 = dyn.reshape(%61, %62, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%63, %64) /* ty=Tensor[(11, ?, 2), float64] */
}

def @func_3795(%var_3783: Tensor[(784), float64], %var_3784: Tensor[(320), float32], %var_3786: Tensor[(225), int8], %var_3787: Tensor[(20, 180), int8]) -> (Tensor[(11, 16, 2), int64], Tensor[(11, 5, 2), float32], Tensor[(110), float64], Tensor[(784), float64], Tensor[(320), float32], Tensor[(198, 2), uint16], Tensor[(225), int8], Tensor[(20, 180), int8], Tensor[(375), float64], Tensor[(7, 11, 12), uint16], Tensor[(924), uint16]) {
  %65 = @func_3060() /* ty=(Tensor[(11, ?, 2), float64],) */;
  %66 = %65.0;
  %67 = cast(%66, dtype="int64") /* ty=Tensor[(11, ?, 2), int64] */;
  %68 = cast(meta[relay.Constant][6] /* ty=Tensor[(11, 16, 2), float64] */, dtype="int64") /* ty=Tensor[(11, 16, 2), int64] */;
  %69 = cast(meta[relay.Constant][7] /* ty=Tensor[(110), float64] */, dtype="float64") /* ty=Tensor[(110), float64] */;
  %70 = cast(meta[relay.Constant][7] /* ty=Tensor[(110), float64] */, dtype="float64") /* ty=Tensor[(110), float64] */;
  %71 = cast(%var_3783, dtype="float64") /* ty=Tensor[(784), float64] */;
  %72 = cast(%var_3784, dtype="float32") /* ty=Tensor[(320), float32] */;
  %73 = cast(meta[relay.Constant][8] /* ty=Tensor[(198, 2), uint16] */, dtype="uint16") /* ty=Tensor[(198, 2), uint16] */;
  %74 = cast(%var_3786, dtype="int8") /* ty=Tensor[(225), int8] */;
  %75 = cast(%var_3787, dtype="int8") /* ty=Tensor[(20, 180), int8] */;
  %76 = cast(meta[relay.Constant][9] /* ty=Tensor[(375), float64] */, dtype="float64") /* ty=Tensor[(375), float64] */;
  %77 = reshape(%69, newshape=[11, 5, 2]) /* ty=Tensor[(11, 5, 2), float64] */;
  %78 = reshape(%70, newshape=[11, 5, 2]) /* ty=Tensor[(11, 5, 2), float64] */;
  %79 = reshape(%71, newshape=[784]) /* ty=Tensor[(784), float64] */;
  %80 = reshape(%72, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %81 = reshape(%73, newshape=[396]) /* ty=Tensor[(396), uint16] */;
  %82 = reshape(%74, newshape=[225]) /* ty=Tensor[(225), int8] */;
  %83 = reshape(%75, newshape=[3600]) /* ty=Tensor[(3600), int8] */;
  %84 = reshape(%76, newshape=[375]) /* ty=Tensor[(375), float64] */;
  %85 = @func_3471(%77, %78, %79, %80, %81, %82, %83, %84) /* ty=(Tensor[(11, 5, 2), float32], Tensor[(11, 5, 2), bool], Tensor[(784), float64], Tensor[(6, 5, 7), float64], Tensor[(210), uint64], Tensor[(320), float32], Tensor[(16, 2, 10), float64], Tensor[(96), float32], Tensor[(396), uint16], Tensor[(396), uint16], Tensor[(16, 2, 10), float64], Tensor[(1, 144), float32], Tensor[(11, ?, 2), float64], Tensor[(210), uint64], Tensor[(225), int8], Tensor[(3600), int8], Tensor[(375), float64], Tensor[(11, ?, 2), float64], Tensor[(11, ?, 2), float64], Tensor[(5, 6, 10), uint16]) */;
  %86 = cast(meta[relay.Constant][10] /* ty=Tensor[(924), uint16] */, dtype="uint16") /* ty=Tensor[(924), uint16] */;
  %87 = reshape(%86, newshape=[7, 11, 12]) /* ty=Tensor[(7, 11, 12), uint16] */;
  %88 = @func_503(%87) /* ty=(Tensor[(7, 11, 12), uint16],) */;
  %89 = right_shift(%67, %68) /* ty=Tensor[(11, 16, 2), int64] */;
  %90 = %85.0;
  %91 = %88.0;
  (%89, %90, meta[relay.Constant][7] /* ty=Tensor[(110), float64] */, %var_3783, %var_3784, meta[relay.Constant][8] /* ty=Tensor[(198, 2), uint16] */, %var_3786, %var_3787, meta[relay.Constant][9] /* ty=Tensor[(375), float64] */, %91, meta[relay.Constant][10] /* ty=Tensor[(924), uint16] */)
}

def @func_1840(%var_1838: Tensor[(396), uint16]) -> (Tensor[(11, ?, 2), float64], Tensor[(11, 9, 4), bool], Tensor[(396), uint16]) {
  %92 = cast(%var_1838, dtype="uint16") /* ty=Tensor[(396), uint16] */;
  %93 = cast(%var_1838, dtype="uint16") /* ty=Tensor[(396), uint16] */;
  %94 = reshape(%92, newshape=[11, 9, 4]) /* ty=Tensor[(11, 9, 4), uint16] */;
  %95 = reshape(%93, newshape=[11, 9, 4]) /* ty=Tensor[(11, 9, 4), uint16] */;
  %96 = @func_1710(%94, %95) /* ty=(Tensor[(11, 9, 4), bool],) */;
  %97 = @func_1789() /* ty=Tensor[(11, ?, 2), float64] */;
  %98 = %96.0;
  (%97, %98, %var_1838)
}

def @func_2276(%var_2256: Tensor[(300), float32]) -> (Tensor[(5, 6, 10), float32], Tensor[(300), float32], Tensor[(11, ?, 2), float64], Tensor[(11, ?, 2), bool]) {
  %99 = cast(%var_2256, dtype="float32") /* ty=Tensor[(300), float32] */;
  %100 = cast(%var_2256, dtype="float32") /* ty=Tensor[(300), float32] */;
  %101 = reshape(%99, newshape=[5, 6, 10]) /* ty=Tensor[(5, 6, 10), float32] */;
  %102 = reshape(%100, newshape=[5, 6, 10]) /* ty=Tensor[(5, 6, 10), float32] */;
  %103 = @func_233(%101, %102) /* ty=(Tensor[(5, 6, 10), float32], Tensor[(16, 2, 10), float64], Tensor[(320), float32]) */;
  %104 = @func_1956() /* ty=(Tensor[(11, ?, 2), float64],) */;
  %105 = %104.0;
  %106 = cast(%105, dtype="float64") /* ty=Tensor[(11, ?, 2), float64] */;
  %107 = cast(%105, dtype="float64") /* ty=Tensor[(11, ?, 2), float64] */;
  %108 = rsqrt(%107) /* ty=Tensor[(11, ?, 2), float64] */;
  %109 = cast(%108, dtype="bool") /* ty=Tensor[(11, ?, 2), bool] */;
  %110 = shape_of(%105, dtype="int32") /* ty=Tensor[(3), int32] */;
  %111 = cast(%105, dtype="bool") /* ty=Tensor[(11, ?, 2), bool] */;
  %112 = dyn.reshape(%109, %110, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %113 = %103.0;
  %114 = atanh(%106) /* ty=Tensor[(11, ?, 2), float64] */;
  %115 = not_equal(%111, %112) /* ty=Tensor[(11, ?, 2), bool] */;
  (%113, %var_2256, %114, %115)
}

def @func_4184(%var_4107: Tensor[(16, 4, 7), int32], %var_4108: Tensor[(16, 4, 7), int32], %var_4114: Tensor[(4, 88), float64], %var_4122: Tensor[(55, 4), float64], %var_4143: Tensor[(55, 4), float64], %var_4177: Tensor[(154), float64]) -> (Tensor[(16, 4, 7), int32], Tensor[(4, 88), float64], Tensor[(784), float64], Tensor[(55, 4), int16], Tensor[(11, ?, 2), float64], Tensor[(45), int16], Tensor[(55, 4), bool], Tensor[(784), float32], Tensor[(5, 3, 3), float32], Tensor[(11, 1, 14), float64], Tensor[(154), float64]) {
  %116 = cast(%var_4108, dtype="int32") /* ty=Tensor[(16, 4, 7), int32] */;
  %117 = shape_of(%var_4107, dtype="int32") /* ty=Tensor[(3), int32] */;
  %118 = cast(%var_4107, dtype="int32") /* ty=Tensor[(16, 4, 7), int32] */;
  %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %120 = cast(%var_4122, dtype="int16") /* ty=Tensor[(55, 4), int16] */;
  %121 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(55, 4), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %122 = cast(meta[relay.Constant][12] /* ty=Tensor[(55, 4), float64] */, dtype="int16") /* ty=Tensor[(55, 4), int16] */;
  %123 = dyn.reshape(%120, %121, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %124 = @func_2730() /* ty=(Tensor[(11, ?, 2), float64],) */;
  %125 = cast(%var_4143, dtype="bool") /* ty=Tensor[(55, 4), bool] */;
  %126 = shape_of(%var_4122, dtype="int32") /* ty=Tensor[(2), int32] */;
  %127 = cast(%var_4122, dtype="bool") /* ty=Tensor[(55, 4), bool] */;
  %128 = dyn.reshape(%125, %126, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %129 = cast(meta[relay.Constant][12] /* ty=Tensor[(55, 4), float64] */, dtype="float64") /* ty=Tensor[(55, 4), float64] */;
  %130 = cast(%var_4114, dtype="float64") /* ty=Tensor[(4, 88), float64] */;
  %131 = cast(meta[relay.Constant][11] /* ty=Tensor[(784), float64] */, dtype="float64") /* ty=Tensor[(784), float64] */;
  %132 = reshape(%129, newshape=[220]) /* ty=Tensor[(220), float64] */;
  %133 = reshape(%130, newshape=[11, 16, 2]) /* ty=Tensor[(11, 16, 2), float64] */;
  %134 = reshape(%131, newshape=[784]) /* ty=Tensor[(784), float64] */;
  %135 = @func_3712(%132, %133, %134) /* ty=(Tensor[(220), float32], Tensor[(11, 16, 2), int8], Tensor[(784), int8], Tensor[(784), float64]) */;
  %136 = %135.2;
  %137 = cast(%136, dtype="float32") /* ty=Tensor[(784), float32] */;
  %138 = cast(meta[relay.Constant][13] /* ty=Tensor[(45), int16] */, dtype="int16") /* ty=Tensor[(45), int16] */;
  %139 = reshape(%138, newshape=[5, 3, 3]) /* ty=Tensor[(5, 3, 3), int16] */;
  %140 = @func_937(%139) /* ty=Tensor[(5, 3, 3), int16] */;
  %141 = cast(%140, dtype="float32") /* ty=Tensor[(5, 3, 3), float32] */;
  %142 = cast(%var_4177, dtype="float64") /* ty=Tensor[(154), float64] */;
  %143 = reshape(%142, newshape=[11, 1, 14]) /* ty=Tensor[(11, 1, 14), float64] */;
  %144 = @func_1354(%143) /* ty=(Tensor[(11, 1, 14), float64], Tensor[(11, 1, 14), float64]) */;
  %145 = bitwise_or(%118, %119) /* ty=Tensor[(16, 4, 7), int32] */;
  %146 = bitwise_and(%122, %123) /* ty=Tensor[(55, 4), int16] */;
  %147 = %124.0;
  %148 = less_equal(%127, %128) /* ty=Tensor[(55, 4), bool] */;
  %149 = acos(%137) /* ty=Tensor[(784), float32] */;
  %150 = sigmoid(%141) /* ty=Tensor[(5, 3, 3), float32] */;
  %151 = %144.1;
  (%145, %var_4114, meta[relay.Constant][11] /* ty=Tensor[(784), float64] */, %146, %147, meta[relay.Constant][13] /* ty=Tensor[(45), int16] */, %148, %149, %150, %151, %var_4177)
}

def @func_2730() -> (Tensor[(11, ?, 2), float64],) {
  %152 = @func_1789() /* ty=Tensor[(11, ?, 2), float64] */;
  (%152,)
}

def @func_2996(%var_2964: Tensor[(5, 11, 11), float32], %var_2967: Tensor[(5, 11, 11), float32], %var_2988: Tensor[(5, 11, 11), float32]) -> (Tensor[(5, 11, 11), int8], Tensor[(5, 11, 11), float32]) {
  %153 = cast(%var_2988, dtype="int8") /* ty=Tensor[(5, 11, 11), int8] */;
  %154 = shape_of(%var_2964, dtype="int32") /* ty=Tensor[(3), int32] */;
  %155 = cast(%var_2964, dtype="int8") /* ty=Tensor[(5, 11, 11), int8] */;
  %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %157 = cast(%var_2964, dtype="float32") /* ty=Tensor[(5, 11, 11), float32] */;
  %158 = sinh(%157) /* ty=Tensor[(5, 11, 11), float32] */;
  %159 = cast(%var_2967, dtype="float32") /* ty=Tensor[(5, 11, 11), float32] */;
  %160 = shape_of(%158, dtype="int32") /* ty=Tensor[(3), int32] */;
  %161 = cast(%158, dtype="float32") /* ty=Tensor[(5, 11, 11), float32] */;
  %162 = dyn.reshape(%159, %160, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %163 = power(%161, %162) /* ty=Tensor[(5, 11, 11), float32] */;
  %164 = cast(%var_2967, dtype="bool") /* ty=Tensor[(5, 11, 11), bool] */;
  %165 = shape_of(%163, dtype="int32") /* ty=Tensor[(3), int32] */;
  %166 = cast(%163, dtype="bool") /* ty=Tensor[(5, 11, 11), bool] */;
  %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %168 = logical_or(%166, %167) /* ty=Tensor[(5, 11, 11), bool] */;
  %169 = cast(%163, dtype="float32") /* ty=Tensor[(5, 11, 11), float32] */;
  %170 = shape_of(%168, dtype="int32") /* ty=Tensor[(3), int32] */;
  %171 = cast(%168, dtype="float32") /* ty=Tensor[(5, 11, 11), float32] */;
  %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %173 = logical_xor(%155, %156) /* ty=Tensor[(5, 11, 11), int8] */;
  %174 = divide(%171, %172) /* ty=Tensor[(5, 11, 11), float32] */;
  (%173, %174)
}

def @func_4375() -> (Tensor[(11, ?, 2), float64],) {
  %175 = @func_1789() /* ty=Tensor[(11, ?, 2), float64] */;
  (%175,)
}

def @func_2330() -> Tensor[(11, ?, 2), float64] {
  %176 = @func_1789() /* ty=Tensor[(11, ?, 2), float64] */;
  %177 = cast(%176, dtype="float64") /* ty=Tensor[(11, ?, 2), float64] */;
  %178 = log(%177) /* ty=Tensor[(11, ?, 2), float64] */;
  %179 = cast(%178, dtype="int32") /* ty=Tensor[(11, ?, 2), int32] */;
  %180 = shape_of(%176, dtype="int32") /* ty=Tensor[(3), int32] */;
  %181 = cast(%176, dtype="int32") /* ty=Tensor[(11, ?, 2), int32] */;
  %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %183 = logical_xor(%181, %182) /* ty=Tensor[(11, ?, 2), int32] */;
  %184 = cast(%183, dtype="float64") /* ty=Tensor[(11, ?, 2), float64] */;
  %185 = shape_of(%178, dtype="int32") /* ty=Tensor[(3), int32] */;
  %186 = cast(%178, dtype="float64") /* ty=Tensor[(11, ?, 2), float64] */;
  %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%186, %187) /* ty=Tensor[(11, ?, 2), float64] */
}

def @func_3533(%var_3517: Tensor[(110), float64], %var_3519: Tensor[(80, 4), float32], %var_3520: Tensor[(396), uint16], %var_3521: Tensor[(225), int8]) -> (Tensor[(11, ?, 2), float64], Tensor[(5, 6, 10), uint16], Tensor[(110), float64], Tensor[(784), float64], Tensor[(80, 4), float32], Tensor[(396), uint16], Tensor[(225), int8], Tensor[(3600), int8], Tensor[(375), float64]) {
  %188 = @func_3060() /* ty=(Tensor[(11, ?, 2), float64],) */;
  %189 = cast(%var_3517, dtype="float64") /* ty=Tensor[(110), float64] */;
  %190 = cast(%var_3517, dtype="float64") /* ty=Tensor[(110), float64] */;
  %191 = cast(meta[relay.Constant][14] /* ty=Tensor[(784), float64] */, dtype="float64") /* ty=Tensor[(784), float64] */;
  %192 = cast(%var_3519, dtype="float32") /* ty=Tensor[(80, 4), float32] */;
  %193 = cast(%var_3520, dtype="uint16") /* ty=Tensor[(396), uint16] */;
  %194 = cast(%var_3521, dtype="int8") /* ty=Tensor[(225), int8] */;
  %195 = cast(meta[relay.Constant][15] /* ty=Tensor[(3600), int8] */, dtype="int8") /* ty=Tensor[(3600), int8] */;
  %196 = cast(meta[relay.Constant][16] /* ty=Tensor[(375), float64] */, dtype="float64") /* ty=Tensor[(375), float64] */;
  %197 = reshape(%189, newshape=[11, 5, 2]) /* ty=Tensor[(11, 5, 2), float64] */;
  %198 = reshape(%190, newshape=[11, 5, 2]) /* ty=Tensor[(11, 5, 2), float64] */;
  %199 = reshape(%191, newshape=[784]) /* ty=Tensor[(784), float64] */;
  %200 = reshape(%192, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %201 = reshape(%193, newshape=[396]) /* ty=Tensor[(396), uint16] */;
  %202 = reshape(%194, newshape=[225]) /* ty=Tensor[(225), int8] */;
  %203 = reshape(%195, newshape=[3600]) /* ty=Tensor[(3600), int8] */;
  %204 = reshape(%196, newshape=[375]) /* ty=Tensor[(375), float64] */;
  %205 = @func_3471(%197, %198, %199, %200, %201, %202, %203, %204) /* ty=(Tensor[(11, 5, 2), float32], Tensor[(11, 5, 2), bool], Tensor[(784), float64], Tensor[(6, 5, 7), float64], Tensor[(210), uint64], Tensor[(320), float32], Tensor[(16, 2, 10), float64], Tensor[(96), float32], Tensor[(396), uint16], Tensor[(396), uint16], Tensor[(16, 2, 10), float64], Tensor[(1, 144), float32], Tensor[(11, ?, 2), float64], Tensor[(210), uint64], Tensor[(225), int8], Tensor[(3600), int8], Tensor[(375), float64], Tensor[(11, ?, 2), float64], Tensor[(11, ?, 2), float64], Tensor[(5, 6, 10), uint16]) */;
  %206 = %188.0;
  %207 = %205.19;
  (%206, %207, %var_3517, meta[relay.Constant][14] /* ty=Tensor[(784), float64] */, %var_3519, %var_3520, %var_3521, meta[relay.Constant][15] /* ty=Tensor[(3600), int8] */, meta[relay.Constant][16] /* ty=Tensor[(375), float64] */)
}

def @func_3060() -> (Tensor[(11, ?, 2), float64],) {
  %208 = @func_2433() /* ty=Tensor[(11, ?, 2), float64] */;
  (%208,)
}

def @func_3602(%var_3589: Tensor[(11, 10, 2), float64]) -> (Tensor[(11, 10, 2), bool],) {
  %209 = @func_2730() /* ty=(Tensor[(11, ?, 2), float64],) */;
  %210 = %209.0;
  %211 = cast(%210, dtype="bool") /* ty=Tensor[(11, ?, 2), bool] */;
  %212 = cast(%var_3589, dtype="bool") /* ty=Tensor[(11, 10, 2), bool] */;
  %213 = equal(%211, %212) /* ty=Tensor[(11, 10, 2), bool] */;
  (%213,)
}

def @func_4539() -> Tensor[(11, ?, 2), float64] {
  %214 = @func_2730() /* ty=(Tensor[(11, ?, 2), float64],) */;
  %215 = %214.0;
  %216 = cast(%215, dtype="float64") /* ty=Tensor[(11, ?, 2), float64] */;
  %217 = acosh(%216) /* ty=Tensor[(11, ?, 2), float64] */;
  %218 = cast(%217, dtype="float64") /* ty=Tensor[(11, ?, 2), float64] */;
  erf(%218) /* ty=Tensor[(11, ?, 2), float64] */
}

def @func_3215(%var_3161: Tensor[(11, 16, 2), float64], %var_3192: Tensor[(96), float32], %var_3197: Tensor[(210), uint64], %var_3204: Tensor[(11, 14, 2), float64]) -> (Tensor[(11, 16, 2), bool], Tensor[(320), float32], Tensor[(300), float32], Tensor[(11, ?, 2), float64], Tensor[(96), float32], Tensor[(660), float32], Tensor[(96), float32], Tensor[(15, 5, 5), int8], Tensor[(375), float64], Tensor[(210), uint64], Tensor[(11, 14, 2), uint64]) {
  %219 = @func_2330() /* ty=Tensor[(11, ?, 2), float64] */;
  %220 = cast(%219, dtype="bool") /* ty=Tensor[(11, ?, 2), bool] */;
  %221 = cast(%var_3161, dtype="bool") /* ty=Tensor[(11, 16, 2), bool] */;
  %222 = cast(meta[relay.Constant][17] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
  %223 = cast(meta[relay.Constant][17] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
  %224 = reshape(%222, newshape=[5, 6, 10]) /* ty=Tensor[(5, 6, 10), float32] */;
  %225 = reshape(%223, newshape=[5, 6, 10]) /* ty=Tensor[(5, 6, 10), float32] */;
  %226 = @func_233(%224, %225) /* ty=(Tensor[(5, 6, 10), float32], Tensor[(16, 2, 10), float64], Tensor[(320), float32]) */;
  %227 = cast(meta[relay.Constant][18] /* ty=Tensor[(660), float32] */, dtype="float32") /* ty=Tensor[(660), float32] */;
  %228 = cast(meta[relay.Constant][18] /* ty=Tensor[(660), float32] */, dtype="float32") /* ty=Tensor[(660), float32] */;
  %229 = cast(%var_3192, dtype="float32") /* ty=Tensor[(96), float32] */;
  %230 = reshape(%227, newshape=[6, 10, 11]) /* ty=Tensor[(6, 10, 11), float32] */;
  %231 = reshape(%228, newshape=[6, 10, 11]) /* ty=Tensor[(6, 10, 11), float32] */;
  %232 = reshape(%229, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %233 = @func_3143(%230, %231, %232) /* ty=(Tensor[(6, 10, 11), float32], Tensor[(2, 6, 8), float32], Tensor[(96), float32], Tensor[(6, 10, 11), float64], Tensor[(300), float32], Tensor[(50, 6), float32], Tensor[(2, 6, 8), float64]) */;
  %234 = cast(meta[relay.Constant][19] /* ty=Tensor[(375), float64] */, dtype="float64") /* ty=Tensor[(375), float64] */;
  %235 = cast(%var_3197, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %236 = reshape(%234, newshape=[15, 5, 5]) /* ty=Tensor[(15, 5, 5), float64] */;
  %237 = reshape(%235, newshape=[210, 1]) /* ty=Tensor[(210, 1), uint64] */;
  %238 = @func_855(%236, %237) /* ty=(Tensor[(15, 5, 5), int8], Tensor[(144), float32], Tensor[(210, 1), uint64], Tensor[(320), float32]) */;
  %239 = cast(%219, dtype="uint64") /* ty=Tensor[(11, ?, 2), uint64] */;
  %240 = cast(%var_3204, dtype="uint64") /* ty=Tensor[(11, 14, 2), uint64] */;
  %241 = less(%220, %221) /* ty=Tensor[(11, 16, 2), bool] */;
  %242 = %226.2;
  %243 = @func_2433() /* ty=Tensor[(11, ?, 2), float64] */;
  %244 = %233.2;
  %245 = %238.0;
  %246 = bitwise_xor(%239, %240) /* ty=Tensor[(11, 14, 2), uint64] */;
  (%241, %242, meta[relay.Constant][17] /* ty=Tensor[(300), float32] */, %243, %244, meta[relay.Constant][18] /* ty=Tensor[(660), float32] */, %var_3192, %245, meta[relay.Constant][19] /* ty=Tensor[(375), float64] */, %var_3197, %246)
}

def @func_4043() -> (Tensor[(11, ?, 2), float64],) {
  %247 = @func_2388() /* ty=Tensor[(11, ?, 2), float64] */;
  (%247,)
}

def @func_233(%var_211: Tensor[(5, 6, 10), float32], %var_216: Tensor[(5, 6, 10), float32]) -> (Tensor[(5, 6, 10), float32], Tensor[(16, 2, 10), float64], Tensor[(320), float32]) {
  %248 = cast(%var_211, dtype="float32") /* ty=Tensor[(5, 6, 10), float32] */;
  %249 = sin(%248) /* ty=Tensor[(5, 6, 10), float32] */;
  %250 = cast(%var_216, dtype="float32") /* ty=Tensor[(5, 6, 10), float32] */;
  %251 = shape_of(%249, dtype="int32") /* ty=Tensor[(3), int32] */;
  %252 = cast(%249, dtype="float32") /* ty=Tensor[(5, 6, 10), float32] */;
  %253 = dyn.reshape(%250, %251, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %254 = cast(meta[relay.Constant][20] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %255 = reshape(%254, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float32] */;
  %256 = add(%252, %253) /* ty=Tensor[(5, 6, 10), float32] */;
  %257 = @func_53(%255) /* ty=Tensor[(16, 2, 10), float64] */;
  (%256, %257, meta[relay.Constant][20] /* ty=Tensor[(320), float32] */)
}

def @func_2213(%var_2205: Tensor[(5, 3, 3), int16]) -> (Tensor[(11, ?, 2), float64], Tensor[(45, 1), int16], Tensor[(5, 3, 3), float32], Tensor[(5, 3, 3), int16]) {
  %258 = @func_1956() /* ty=(Tensor[(11, ?, 2), float64],) */;
  %259 = cast(meta[relay.Constant][21] /* ty=Tensor[(45, 1), int16] */, dtype="int16") /* ty=Tensor[(45, 1), int16] */;
  %260 = reshape(%259, newshape=[5, 3, 3]) /* ty=Tensor[(5, 3, 3), int16] */;
  %261 = @func_937(%260) /* ty=Tensor[(5, 3, 3), int16] */;
  %262 = cast(%261, dtype="float32") /* ty=Tensor[(5, 3, 3), float32] */;
  %263 = cast(%var_2205, dtype="int16") /* ty=Tensor[(5, 3, 3), int16] */;
  %264 = shape_of(%261, dtype="int32") /* ty=Tensor[(3), int32] */;
  %265 = cast(%261, dtype="int16") /* ty=Tensor[(5, 3, 3), int16] */;
  %266 = dyn.reshape(%263, %264, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %267 = %258.0;
  %268 = log2(%262) /* ty=Tensor[(5, 3, 3), float32] */;
  %269 = bitwise_and(%265, %266) /* ty=Tensor[(5, 3, 3), int16] */;
  (%267, meta[relay.Constant][21] /* ty=Tensor[(45, 1), int16] */, %268, %269)
}

def @func_2714(%var_2675: Tensor[(50, 6), float32], %var_2677: Tensor[(16, 2, 10), float64], %var_2696: Tensor[(396), uint16]) -> (Tensor[(11, ?, 2), float64], Tensor[(50, 6), float32], Tensor[(16, 2, 10), int32], Tensor[(16, 2, 10), float64], Tensor[(396), uint16], Tensor[(396), uint16]) {
  %270 = cast(%var_2675, dtype="float32") /* ty=Tensor[(50, 6), float32] */;
  %271 = cast(%var_2675, dtype="float32") /* ty=Tensor[(50, 6), float32] */;
  %272 = reshape(%270, newshape=[5, 6, 10]) /* ty=Tensor[(5, 6, 10), float32] */;
  %273 = reshape(%271, newshape=[5, 6, 10]) /* ty=Tensor[(5, 6, 10), float32] */;
  %274 = @func_233(%272, %273) /* ty=(Tensor[(5, 6, 10), float32], Tensor[(16, 2, 10), float64], Tensor[(320), float32]) */;
  %275 = %274.1;
  %276 = cast(%var_2677, dtype="int32") /* ty=Tensor[(16, 2, 10), int32] */;
  %277 = shape_of(%275, dtype="int32") /* ty=Tensor[(3), int32] */;
  %278 = cast(%275, dtype="int32") /* ty=Tensor[(16, 2, 10), int32] */;
  %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %280 = bitwise_and(%278, %279) /* ty=Tensor[(16, 2, 10), int32] */;
  %281 = cast(%280, dtype="float32") /* ty=Tensor[(16, 2, 10), float32] */;
  %282 = reshape(%281, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float32] */;
  %283 = cast(%var_2696, dtype="uint16") /* ty=Tensor[(396), uint16] */;
  %284 = reshape(%283, newshape=[396]) /* ty=Tensor[(396), uint16] */;
  %285 = @func_1840(%284) /* ty=(Tensor[(11, ?, 2), float64], Tensor[(11, 9, 4), bool], Tensor[(396), uint16]) */;
  %286 = @func_2330() /* ty=Tensor[(11, ?, 2), float64] */;
  %287 = @func_53(%282) /* ty=Tensor[(16, 2, 10), float64] */;
  %288 = %285.2;
  (%286, %var_2675, %280, %287, %288, %var_2696)
}

def @main(%var_4692: Tensor[(352), float64]) -> (Tensor[(11, ?, 2), float64], Tensor[(784), float64], Tensor[(784), float64], Tensor[(220), float64], Tensor[(352), float32], Tensor[(11, ?, 2), float64], Tensor[(96, 1), float32]) {
  %289 = cast(%var_4692, dtype="float64") /* ty=Tensor[(352), float64] */;
  %290 = cast(meta[relay.Constant][22] /* ty=Tensor[(784), float64] */, dtype="float64") /* ty=Tensor[(784), float64] */;
  %291 = reshape(%289, newshape=[352]) /* ty=Tensor[(352), float64] */;
  %292 = reshape(%290, newshape=[784]) /* ty=Tensor[(784), float64] */;
  %293 = @func_4448(%291, %292) /* ty=(Tensor[(11, ?, 2), float64], Tensor[(220), float64], Tensor[(352), float64], Tensor[(784), float64], Tensor[(784), float32], Tensor[(300), float32], Tensor[(11, 96, 2), float32]) */;
  %294 = cast(meta[relay.Constant][23] /* ty=Tensor[(220), float64] */, dtype="float64") /* ty=Tensor[(220), float64] */;
  %295 = cast(%var_4692, dtype="float64") /* ty=Tensor[(352), float64] */;
  %296 = cast(meta[relay.Constant][22] /* ty=Tensor[(784), float64] */, dtype="float64") /* ty=Tensor[(784), float64] */;
  %297 = reshape(%294, newshape=[220]) /* ty=Tensor[(220), float64] */;
  %298 = reshape(%295, newshape=[11, 16, 2]) /* ty=Tensor[(11, 16, 2), float64] */;
  %299 = reshape(%296, newshape=[784]) /* ty=Tensor[(784), float64] */;
  %300 = @func_3712(%297, %298, %299) /* ty=(Tensor[(220), float32], Tensor[(11, 16, 2), int8], Tensor[(784), int8], Tensor[(784), float64]) */;
  %301 = cast(%var_4692, dtype="float32") /* ty=Tensor[(352), float32] */;
  %302 = @func_3254() /* ty=(Tensor[(11, ?, 2), float64], Tensor[(300), float32], Tensor[(96, 1), float32]) */;
  %303 = %302.2;
  %304 = cast(%303, dtype="float32") /* ty=Tensor[(96, 1), float32] */;
  %305 = %293.0;
  %306 = %300.3;
  %307 = sinh(%301) /* ty=Tensor[(352), float32] */;
  %308 = @func_3944() /* ty=Tensor[(11, ?, 2), float64] */;
  %309 = log(%304) /* ty=Tensor[(96, 1), float32] */;
  (%305, meta[relay.Constant][22] /* ty=Tensor[(784), float64] */, %306, meta[relay.Constant][23] /* ty=Tensor[(220), float64] */, %307, %308, %309)
}

def @func_138(%var_103: Tensor[(16, 9, 1), float32], %var_113: Tensor[(320), float32]) -> (Tensor[(16, 9, 1), float32], Tensor[(16, 2, 10), float64], Tensor[(320), float32], Tensor[(16, 2, 10), float64], Tensor[(16, 2, 10), float64], Tensor[(16, 9, 1), int16]) {
  %310 = cast(9.72044f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %311 = cast(%var_103, dtype="float32") /* ty=Tensor[(16, 9, 1), float32] */;
  %312 = cast(%var_113, dtype="float32") /* ty=Tensor[(320), float32] */;
  %313 = reshape(%312, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float32] */;
  %314 = @func_53(%313) /* ty=Tensor[(16, 2, 10), float64] */;
  %315 = cast(%314, dtype="float32") /* ty=Tensor[(16, 2, 10), float32] */;
  %316 = reshape(%315, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float32] */;
  %317 = @func_53(%316) /* ty=Tensor[(16, 2, 10), float64] */;
  %318 = cast(%317, dtype="float32") /* ty=Tensor[(16, 2, 10), float32] */;
  %319 = reshape(%318, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float32] */;
  %320 = cast(%var_103, dtype="float64") /* ty=Tensor[(16, 9, 1), float64] */;
  %321 = asin(%320) /* ty=Tensor[(16, 9, 1), float64] */;
  %322 = cast(9.72044f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %323 = cast(%321, dtype="float32") /* ty=Tensor[(16, 9, 1), float32] */;
  %324 = subtract(%322, %323) /* ty=Tensor[(16, 9, 1), float32] */;
  %325 = cast(%324, dtype="int16") /* ty=Tensor[(16, 9, 1), int16] */;
  %326 = cast(9.72044f /* ty=float32 */, dtype="int16") /* ty=int16 */;
  %327 = minimum(%310, %311) /* ty=Tensor[(16, 9, 1), float32] */;
  %328 = @func_53(%319) /* ty=Tensor[(16, 2, 10), float64] */;
  %329 = bitwise_or(%325, %326) /* ty=Tensor[(16, 9, 1), int16] */;
  (%327, %314, %var_113, %317, %328, %329)
}

def @func_1354(%var_1343: Tensor[(11, 1, 14), float64]) -> (Tensor[(11, 1, 14), float64], Tensor[(11, 1, 14), float64]) {
  %330 = cast(%var_1343, dtype="float64") /* ty=Tensor[(11, 1, 14), float64] */;
  %331 = cast(%var_1343, dtype="float64") /* ty=Tensor[(11, 1, 14), float64] */;
  %332 = log2(%330) /* ty=Tensor[(11, 1, 14), float64] */;
  %333 = acos(%331) /* ty=Tensor[(11, 1, 14), float64] */;
  (%332, %333)
}

def @func_2189() -> (Tensor[(11, ?, 2), uint8],) {
  %334 = @func_1789() /* ty=Tensor[(11, ?, 2), float64] */;
  %335 = cast(%334, dtype="float64") /* ty=Tensor[(11, ?, 2), float64] */;
  %336 = acos(%335) /* ty=Tensor[(11, ?, 2), float64] */;
  %337 = cast(%334, dtype="uint8") /* ty=Tensor[(11, ?, 2), uint8] */;
  %338 = shape_of(%336, dtype="int32") /* ty=Tensor[(3), int32] */;
  %339 = cast(%336, dtype="uint8") /* ty=Tensor[(11, ?, 2), uint8] */;
  %340 = dyn.reshape(%337, %338, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %341 = maximum(%339, %340) /* ty=Tensor[(11, ?, 2), uint8] */;
  (%341,)
}

def @func_403(%var_370: Tensor[(5, 7, 3), float32], %var_383: Tensor[(35, 6), uint64]) -> (Tensor[(5, 7, 3), float32], Tensor[(320), float32], Tensor[(35, 6), uint64], Tensor[(4, 80), float32], Tensor[(5, 7, 3), float32]) {
  %342 = cast(meta[relay.Constant][24] /* ty=Tensor[(5, 7, 3), float32] */, dtype="float32") /* ty=Tensor[(5, 7, 3), float32] */;
  %343 = shape_of(%var_370, dtype="int32") /* ty=Tensor[(3), int32] */;
  %344 = cast(%var_370, dtype="float32") /* ty=Tensor[(5, 7, 3), float32] */;
  %345 = dyn.reshape(%342, %343, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %346 = cast(%var_383, dtype="uint64") /* ty=Tensor[(35, 6), uint64] */;
  %347 = cast(meta[relay.Constant][25] /* ty=Tensor[(4, 80), float32] */, dtype="float32") /* ty=Tensor[(4, 80), float32] */;
  %348 = reshape(%346, newshape=[6, 5, 7]) /* ty=Tensor[(6, 5, 7), uint64] */;
  %349 = reshape(%347, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %350 = @func_202(%348, %349) /* ty=(Tensor[(6, 5, 7), float64], Tensor[(16, 2, 10), float64], Tensor[(144), float32], Tensor[(320), float32], Tensor[(6, 5, 7), int16]) */;
  %351 = cast(meta[relay.Constant][24] /* ty=Tensor[(5, 7, 3), float32] */, dtype="float32") /* ty=Tensor[(5, 7, 3), float32] */;
  %352 = mod(%344, %345) /* ty=Tensor[(5, 7, 3), float32] */;
  %353 = %350.3;
  %354 = acos(%351) /* ty=Tensor[(5, 7, 3), float32] */;
  (%352, %353, %var_383, meta[relay.Constant][25] /* ty=Tensor[(4, 80), float32] */, %354)
}

def @func_1897(%var_1888: Tensor[(2, 48), float32]) -> (Tensor[(11, ?, 2), float64], Tensor[(16, 2, 10), float64], Tensor[(784), float64], Tensor[(300), float32], Tensor[(2, 6, 8), float64], Tensor[(2, 48), float32]) {
  %355 = cast(meta[relay.Constant][26] /* ty=Tensor[(784), float64] */, dtype="float64") /* ty=Tensor[(784), float64] */;
  %356 = cast(meta[relay.Constant][26] /* ty=Tensor[(784), float64] */, dtype="float64") /* ty=Tensor[(784), float64] */;
  %357 = cast(meta[relay.Constant][27] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
  %358 = reshape(%355, newshape=[4, 14, 14]) /* ty=Tensor[(4, 14, 14), float64] */;
  %359 = reshape(%356, newshape=[4, 14, 14]) /* ty=Tensor[(4, 14, 14), float64] */;
  %360 = reshape(%357, newshape=[300]) /* ty=Tensor[(300), float32] */;
  %361 = @func_964(%358, %359, %360) /* ty=(Tensor[(4, 14, 14), float64], Tensor[(16, 2, 10), float64], Tensor[(300), float32]) */;
  %362 = cast(%var_1888, dtype="float32") /* ty=Tensor[(2, 48), float32] */;
  %363 = reshape(%362, newshape=[2, 6, 8]) /* ty=Tensor[(2, 6, 8), float32] */;
  %364 = @func_1629(%363) /* ty=(Tensor[(2, 6, 8), float32], Tensor[(2, 6, 8), float64]) */;
  %365 = @func_1789() /* ty=Tensor[(11, ?, 2), float64] */;
  %366 = %361.1;
  %367 = %364.1;
  (%365, %366, meta[relay.Constant][26] /* ty=Tensor[(784), float64] */, meta[relay.Constant][27] /* ty=Tensor[(300), float32] */, %367, %var_1888)
}

def @func_2433() -> Tensor[(11, ?, 2), float64] {
  @func_2388() /* ty=Tensor[(11, ?, 2), float64] */
}

def @func_2130(%var_2119: Tensor[(1, 15, 15), int8], %var_2120: Tensor[(16, 15, 15), int8], %var_2126: Tensor[(375), float64]) -> (Tensor[(16, 15, 15), int8], Tensor[(15, 5, 5), int8], Tensor[(375), float64], Tensor[(210), uint64]) {
  %368 = cast(%var_2119, dtype="int8") /* ty=Tensor[(1, 15, 15), int8] */;
  %369 = cast(%var_2120, dtype="int8") /* ty=Tensor[(16, 15, 15), int8] */;
  %370 = cast(%var_2126, dtype="float64") /* ty=Tensor[(375), float64] */;
  %371 = cast(meta[relay.Constant][28] /* ty=Tensor[(210), uint64] */, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %372 = reshape(%370, newshape=[15, 5, 5]) /* ty=Tensor[(15, 5, 5), float64] */;
  %373 = reshape(%371, newshape=[210, 1]) /* ty=Tensor[(210, 1), uint64] */;
  %374 = @func_855(%372, %373) /* ty=(Tensor[(15, 5, 5), int8], Tensor[(144), float32], Tensor[(210, 1), uint64], Tensor[(320), float32]) */;
  %375 = right_shift(%368, %369) /* ty=Tensor[(16, 15, 15), int8] */;
  %376 = %374.0;
  (%375, %376, %var_2126, meta[relay.Constant][28] /* ty=Tensor[(210), uint64] */)
}

def @func_964(%var_948: Tensor[(4, 14, 14), float64], %var_949: Tensor[(4, 14, 14), float64], %var_955: Tensor[(300), float32]) -> (Tensor[(4, 14, 14), float64], Tensor[(16, 2, 10), float64], Tensor[(300), float32]) {
  %377 = cast(%var_949, dtype="float64") /* ty=Tensor[(4, 14, 14), float64] */;
  %378 = shape_of(%var_948, dtype="int32") /* ty=Tensor[(3), int32] */;
  %379 = cast(%var_948, dtype="float64") /* ty=Tensor[(4, 14, 14), float64] */;
  %380 = dyn.reshape(%377, %378, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %381 = cast(%var_955, dtype="float32") /* ty=Tensor[(300), float32] */;
  %382 = cast(%var_955, dtype="float32") /* ty=Tensor[(300), float32] */;
  %383 = reshape(%381, newshape=[5, 6, 10]) /* ty=Tensor[(5, 6, 10), float32] */;
  %384 = reshape(%382, newshape=[5, 6, 10]) /* ty=Tensor[(5, 6, 10), float32] */;
  %385 = @func_233(%383, %384) /* ty=(Tensor[(5, 6, 10), float32], Tensor[(16, 2, 10), float64], Tensor[(320), float32]) */;
  %386 = floor_mod(%379, %380) /* ty=Tensor[(4, 14, 14), float64] */;
  %387 = %385.1;
  (%386, %387, %var_955)
}

def @func_937(%var_931: Tensor[(5, 3, 3), int16]) -> Tensor[(5, 3, 3), int16] {
  %388 = cast(meta[relay.Constant][29] /* ty=Tensor[(5, 3, 3), int16] */, dtype="int16") /* ty=Tensor[(5, 3, 3), int16] */;
  %389 = shape_of(%var_931, dtype="int32") /* ty=Tensor[(3), int32] */;
  %390 = cast(%var_931, dtype="int16") /* ty=Tensor[(5, 3, 3), int16] */;
  %391 = dyn.reshape(%388, %389, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  bitwise_xor(%390, %391) /* ty=Tensor[(5, 3, 3), int16] */
}

def @func_202(%var_145: Tensor[(6, 5, 7), uint64], %var_167: Tensor[(320), float32]) -> (Tensor[(6, 5, 7), float64], Tensor[(16, 2, 10), float64], Tensor[(144), float32], Tensor[(320), float32], Tensor[(6, 5, 7), int16]) {
  %392 = cast(%var_145, dtype="float64") /* ty=Tensor[(6, 5, 7), float64] */;
  %393 = cast(meta[relay.Constant][30] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %394 = cast(%var_167, dtype="float32") /* ty=Tensor[(320), float32] */;
  %395 = reshape(%393, newshape=[16, 9, 1]) /* ty=Tensor[(16, 9, 1), float32] */;
  %396 = reshape(%394, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %397 = @func_138(%395, %396) /* ty=(Tensor[(16, 9, 1), float32], Tensor[(16, 2, 10), float64], Tensor[(320), float32], Tensor[(16, 2, 10), float64], Tensor[(16, 2, 10), float64], Tensor[(16, 9, 1), int16]) */;
  %398 = cast(meta[relay.Constant][31] /* ty=Tensor[(6, 5, 7), uint64] */, dtype="bool") /* ty=Tensor[(6, 5, 7), bool] */;
  %399 = shape_of(%var_145, dtype="int32") /* ty=Tensor[(3), int32] */;
  %400 = cast(%var_145, dtype="bool") /* ty=Tensor[(6, 5, 7), bool] */;
  %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %402 = greater(%400, %401) /* ty=Tensor[(6, 5, 7), bool] */;
  %403 = cast(meta[relay.Constant][32] /* ty=Tensor[(6, 5, 7), bool] */, dtype="int16") /* ty=Tensor[(6, 5, 7), int16] */;
  %404 = shape_of(%402, dtype="int32") /* ty=Tensor[(3), int32] */;
  %405 = cast(%402, dtype="int16") /* ty=Tensor[(6, 5, 7), int16] */;
  %406 = dyn.reshape(%403, %404, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %407 = sqrt(%392) /* ty=Tensor[(6, 5, 7), float64] */;
  %408 = %397.4;
  %409 = logical_xor(%405, %406) /* ty=Tensor[(6, 5, 7), int16] */;
  (%407, %408, meta[relay.Constant][30] /* ty=Tensor[(144), float32] */, %var_167, %409)
}

def @func_2786(%var_2784: Tensor[(300), float32]) -> (Tensor[(11, ?, 2), float64], Tensor[(11, ?, 2), float64], Tensor[(300), float32]) {
  %410 = @func_2433() /* ty=Tensor[(11, ?, 2), float64] */;
  %411 = cast(%410, dtype="float64") /* ty=Tensor[(11, ?, 2), float64] */;
  %412 = cast(%var_2784, dtype="float32") /* ty=Tensor[(300), float32] */;
  %413 = reshape(%412, newshape=[300]) /* ty=Tensor[(300), float32] */;
  %414 = @func_2276(%413) /* ty=(Tensor[(5, 6, 10), float32], Tensor[(300), float32], Tensor[(11, ?, 2), float64], Tensor[(11, ?, 2), bool]) */;
  %415 = tan(%411) /* ty=Tensor[(11, ?, 2), float64] */;
  %416 = %414.2;
  (%415, %416, %var_2784)
}

def @func_1629(%var_1618: Tensor[(2, 6, 8), float32]) -> (Tensor[(2, 6, 8), float32], Tensor[(2, 6, 8), float64]) {
  %417 = cast(%var_1618, dtype="float32") /* ty=Tensor[(2, 6, 8), float32] */;
  %418 = cast(%var_1618, dtype="float64") /* ty=Tensor[(2, 6, 8), float64] */;
  %419 = log(%417) /* ty=Tensor[(2, 6, 8), float32] */;
  %420 = atanh(%418) /* ty=Tensor[(2, 6, 8), float64] */;
  (%419, %420)
}

def @func_3254() -> (Tensor[(11, ?, 2), float64], Tensor[(300), float32], Tensor[(96, 1), float32]) {
  %421 = @func_2730() /* ty=(Tensor[(11, ?, 2), float64],) */;
  %422 = %421.0;
  %423 = cast(%422, dtype="float64") /* ty=Tensor[(11, ?, 2), float64] */;
  %424 = cast(meta[relay.Constant][33] /* ty=Tensor[(96, 1), float32] */, dtype="float32") /* ty=Tensor[(96, 1), float32] */;
  %425 = reshape(%423, newshape=[11, 1, 2]) /* ty=Tensor[(11, 1, 2), float64] */;
  %426 = reshape(%424, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %427 = @func_2063(%425, %426) /* ty=(Tensor[(11, ?, 2), uint64], Tensor[(300), float32], Tensor[(96), float32], Tensor[(6, 66), uint64], Tensor[(11, ?, 2), float64], Tensor[(6, 66), int64]) */;
  %428 = %427.1;
  (%422, %428, meta[relay.Constant][33] /* ty=Tensor[(96, 1), float32] */)
}

def @func_53(%var_26: Tensor[(16, 2, 10), float32]) -> Tensor[(16, 2, 10), float64] {
  %429 = cast(%var_26, dtype="float32") /* ty=Tensor[(16, 2, 10), float32] */;
  %430 = atanh(%429) /* ty=Tensor[(16, 2, 10), float32] */;
  %431 = cast(%430, dtype="float32") /* ty=Tensor[(16, 2, 10), float32] */;
  %432 = shape_of(%var_26, dtype="int32") /* ty=Tensor[(3), int32] */;
  %433 = cast(%var_26, dtype="float32") /* ty=Tensor[(16, 2, 10), float32] */;
  %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %435 = power(%433, %434) /* ty=Tensor[(16, 2, 10), float32] */;
  %436 = cast(%435, dtype="float64") /* ty=Tensor[(16, 2, 10), float64] */;
  cos(%436) /* ty=Tensor[(16, 2, 10), float64] */
}

def @func_3471(%var_3345: Tensor[(11, 5, 2), float64], %var_3352: Tensor[(11, 5, 2), float64], %var_3365: Tensor[(784), float64], %var_3387: Tensor[(320), float32], %var_3402: Tensor[(396), uint16], %var_3428: Tensor[(225), int8], %var_3429: Tensor[(3600), int8], %var_3430: Tensor[(375), float64]) -> (Tensor[(11, 5, 2), float32], Tensor[(11, 5, 2), bool], Tensor[(784), float64], Tensor[(6, 5, 7), float64], Tensor[(210), uint64], Tensor[(320), float32], Tensor[(16, 2, 10), float64], Tensor[(96), float32], Tensor[(396), uint16], Tensor[(396), uint16], Tensor[(16, 2, 10), float64], Tensor[(1, 144), float32], Tensor[(11, ?, 2), float64], Tensor[(210), uint64], Tensor[(225), int8], Tensor[(3600), int8], Tensor[(375), float64], Tensor[(11, ?, 2), float64], Tensor[(11, ?, 2), float64], Tensor[(5, 6, 10), uint16]) {
  %437 = @func_3254() /* ty=(Tensor[(11, ?, 2), float64], Tensor[(300), float32], Tensor[(96, 1), float32]) */;
  %438 = %437.0;
  %439 = cast(%438, dtype="float32") /* ty=Tensor[(11, ?, 2), float32] */;
  %440 = cast(%var_3345, dtype="float32") /* ty=Tensor[(11, 5, 2), float32] */;
  %441 = cast(%var_3352, dtype="bool") /* ty=Tensor[(11, 5, 2), bool] */;
  %442 = shape_of(%var_3345, dtype="int32") /* ty=Tensor[(3), int32] */;
  %443 = cast(%var_3345, dtype="bool") /* ty=Tensor[(11, 5, 2), bool] */;
  %444 = dyn.reshape(%441, %442, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %445 = cast(meta[relay.Constant][34] /* ty=Tensor[(210), uint64] */, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %446 = cast(%var_3387, dtype="float32") /* ty=Tensor[(320), float32] */;
  %447 = reshape(%445, newshape=[6, 5, 7]) /* ty=Tensor[(6, 5, 7), uint64] */;
  %448 = reshape(%446, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %449 = @func_202(%447, %448) /* ty=(Tensor[(6, 5, 7), float64], Tensor[(16, 2, 10), float64], Tensor[(144), float32], Tensor[(320), float32], Tensor[(6, 5, 7), int16]) */;
  %450 = cast(meta[relay.Constant][35] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %451 = reshape(%450, newshape=[2, 48]) /* ty=Tensor[(2, 48), float32] */;
  %452 = @func_1897(%451) /* ty=(Tensor[(11, ?, 2), float64], Tensor[(16, 2, 10), float64], Tensor[(784), float64], Tensor[(300), float32], Tensor[(2, 6, 8), float64], Tensor[(2, 48), float32]) */;
  %453 = cast(%var_3365, dtype="float64") /* ty=Tensor[(784), float64] */;
  %454 = reshape(%453, newshape=[784]) /* ty=Tensor[(784), float64] */;
  %455 = @func_2848(%454) /* ty=(Tensor[(11, ?, 2), float64], Tensor[(300), float32], Tensor[(784), int8], Tensor[(5, 6, 10), float32], Tensor[(396), uint16], Tensor[(396), uint16], Tensor[(784), float32], Tensor[(784), bool]) */;
  %456 = %455.3;
  %457 = cast(%456, dtype="float32") /* ty=Tensor[(5, 6, 10), float32] */;
  %458 = %452.1;
  %459 = cast(%458, dtype="float64") /* ty=Tensor[(16, 2, 10), float64] */;
  %460 = cast(%var_3402, dtype="uint16") /* ty=Tensor[(396), uint16] */;
  %461 = reshape(%457, newshape=[50, 6]) /* ty=Tensor[(50, 6), float32] */;
  %462 = reshape(%459, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float64] */;
  %463 = reshape(%460, newshape=[396]) /* ty=Tensor[(396), uint16] */;
  %464 = @func_2714(%461, %462, %463) /* ty=(Tensor[(11, ?, 2), float64], Tensor[(50, 6), float32], Tensor[(16, 2, 10), int32], Tensor[(16, 2, 10), float64], Tensor[(396), uint16], Tensor[(396), uint16]) */;
  %465 = cast(meta[relay.Constant][36] /* ty=Tensor[(1, 144), float32] */, dtype="float32") /* ty=Tensor[(1, 144), float32] */;
  %466 = cast(%var_3387, dtype="float32") /* ty=Tensor[(320), float32] */;
  %467 = reshape(%465, newshape=[16, 9, 1]) /* ty=Tensor[(16, 9, 1), float32] */;
  %468 = reshape(%466, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %469 = @func_138(%467, %468) /* ty=(Tensor[(16, 9, 1), float32], Tensor[(16, 2, 10), float64], Tensor[(320), float32], Tensor[(16, 2, 10), float64], Tensor[(16, 2, 10), float64], Tensor[(16, 9, 1), int16]) */;
  %470 = cast(%456, dtype="float32") /* ty=Tensor[(5, 6, 10), float32] */;
  %471 = reshape(%470, newshape=[300]) /* ty=Tensor[(300), float32] */;
  %472 = @func_2276(%471) /* ty=(Tensor[(5, 6, 10), float32], Tensor[(300), float32], Tensor[(11, ?, 2), float64], Tensor[(11, ?, 2), bool]) */;
  %473 = cast(%var_3428, dtype="int8") /* ty=Tensor[(225), int8] */;
  %474 = cast(%var_3429, dtype="int8") /* ty=Tensor[(3600), int8] */;
  %475 = cast(%var_3430, dtype="float64") /* ty=Tensor[(375), float64] */;
  %476 = reshape(%473, newshape=[1, 15, 15]) /* ty=Tensor[(1, 15, 15), int8] */;
  %477 = reshape(%474, newshape=[16, 15, 15]) /* ty=Tensor[(16, 15, 15), int8] */;
  %478 = reshape(%475, newshape=[375]) /* ty=Tensor[(375), float64] */;
  %479 = @func_2130(%476, %477, %478) /* ty=(Tensor[(16, 15, 15), int8], Tensor[(15, 5, 5), int8], Tensor[(375), float64], Tensor[(210), uint64]) */;
  %480 = cast(%var_3402, dtype="uint16") /* ty=Tensor[(396), uint16] */;
  %481 = reshape(%480, newshape=[396]) /* ty=Tensor[(396), uint16] */;
  %482 = @func_1840(%481) /* ty=(Tensor[(11, ?, 2), float64], Tensor[(11, 9, 4), bool], Tensor[(396), uint16]) */;
  %483 = @func_3254() /* ty=(Tensor[(11, ?, 2), float64], Tensor[(300), float32], Tensor[(96, 1), float32]) */;
  %484 = cast(%456, dtype="float32") /* ty=Tensor[(5, 6, 10), float32] */;
  %485 = atan(%484) /* ty=Tensor[(5, 6, 10), float32] */;
  %486 = cast(%456, dtype="uint8") /* ty=Tensor[(5, 6, 10), uint8] */;
  %487 = shape_of(%485, dtype="int32") /* ty=Tensor[(3), int32] */;
  %488 = cast(%485, dtype="uint8") /* ty=Tensor[(5, 6, 10), uint8] */;
  %489 = dyn.reshape(%486, %487, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %490 = left_shift(%488, %489) /* ty=Tensor[(5, 6, 10), uint8] */;
  %491 = cast(%485, dtype="uint16") /* ty=Tensor[(5, 6, 10), uint16] */;
  %492 = shape_of(%490, dtype="int32") /* ty=Tensor[(3), int32] */;
  %493 = cast(%490, dtype="uint16") /* ty=Tensor[(5, 6, 10), uint16] */;
  %494 = dyn.reshape(%491, %492, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %495 = divide(%439, %440) /* ty=Tensor[(11, 5, 2), float32] */;
  %496 = greater(%443, %444) /* ty=Tensor[(11, 5, 2), bool] */;
  %497 = %449.0;
  %498 = %464.4;
  %499 = %469.4;
  %500 = %472.2;
  %501 = %479.3;
  %502 = %482.0;
  %503 = %483.0;
  %504 = logical_xor(%493, %494) /* ty=Tensor[(5, 6, 10), uint16] */;
  (%495, %496, %var_3365, %497, meta[relay.Constant][34] /* ty=Tensor[(210), uint64] */, %var_3387, %458, meta[relay.Constant][35] /* ty=Tensor[(96), float32] */, %498, %var_3402, %499, meta[relay.Constant][36] /* ty=Tensor[(1, 144), float32] */, %500, %501, %var_3428, %var_3429, %var_3430, %502, %503, %504)
}

def @func_2564(%var_2498: Tensor[(11, 5, 2), float64], %var_2532: Tensor[(375), float64], %var_2533: Tensor[(210), uint64]) -> (Tensor[(11, 5, 2), bool], Tensor[(144), float32], Tensor[(375), float64], Tensor[(210), uint64], Tensor[(11, 9, 4), bool], Tensor[(6, 66), uint16], Tensor[(11, ?, 2), float64]) {
  %505 = @func_1956() /* ty=(Tensor[(11, ?, 2), float64],) */;
  %506 = %505.0;
  %507 = cast(%506, dtype="float32") /* ty=Tensor[(11, ?, 2), float32] */;
  %508 = cast(%var_2498, dtype="float32") /* ty=Tensor[(11, 5, 2), float32] */;
  %509 = maximum(%507, %508) /* ty=Tensor[(11, 5, 2), float32] */;
  %510 = cast(%var_2498, dtype="bool") /* ty=Tensor[(11, 5, 2), bool] */;
  %511 = shape_of(%509, dtype="int32") /* ty=Tensor[(3), int32] */;
  %512 = cast(%509, dtype="bool") /* ty=Tensor[(11, 5, 2), bool] */;
  %513 = dyn.reshape(%510, %511, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %514 = cast(%var_2532, dtype="float64") /* ty=Tensor[(375), float64] */;
  %515 = cast(%var_2533, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %516 = reshape(%514, newshape=[15, 5, 5]) /* ty=Tensor[(15, 5, 5), float64] */;
  %517 = reshape(%515, newshape=[210, 1]) /* ty=Tensor[(210, 1), uint64] */;
  %518 = @func_855(%516, %517) /* ty=(Tensor[(15, 5, 5), int8], Tensor[(144), float32], Tensor[(210, 1), uint64], Tensor[(320), float32]) */;
  %519 = cast(meta[relay.Constant][37] /* ty=Tensor[(6, 66), uint16] */, dtype="uint16") /* ty=Tensor[(6, 66), uint16] */;
  %520 = cast(meta[relay.Constant][37] /* ty=Tensor[(6, 66), uint16] */, dtype="uint16") /* ty=Tensor[(6, 66), uint16] */;
  %521 = reshape(%519, newshape=[11, 9, 4]) /* ty=Tensor[(11, 9, 4), uint16] */;
  %522 = reshape(%520, newshape=[11, 9, 4]) /* ty=Tensor[(11, 9, 4), uint16] */;
  %523 = @func_1710(%521, %522) /* ty=(Tensor[(11, 9, 4), bool],) */;
  %524 = logical_or(%512, %513) /* ty=Tensor[(11, 5, 2), bool] */;
  %525 = %518.1;
  %526 = %523.0;
  %527 = @func_1789() /* ty=Tensor[(11, ?, 2), float64] */;
  (%524, %525, %var_2532, %var_2533, %526, meta[relay.Constant][37] /* ty=Tensor[(6, 66), uint16] */, %527)
}

def @func_2063(%var_1980: Tensor[(11, 1, 2), float64], %var_1992: Tensor[(96), float32]) -> (Tensor[(11, ?, 2), uint64], Tensor[(300), float32], Tensor[(96), float32], Tensor[(6, 66), uint64], Tensor[(11, ?, 2), float64], Tensor[(6, 66), int64]) {
  %528 = @func_1956() /* ty=(Tensor[(11, ?, 2), float64],) */;
  %529 = %528.0;
  %530 = cast(%var_1980, dtype="uint64") /* ty=Tensor[(11, 1, 2), uint64] */;
  %531 = shape_of(%529, dtype="int32") /* ty=Tensor[(3), int32] */;
  %532 = cast(%529, dtype="uint64") /* ty=Tensor[(11, ?, 2), uint64] */;
  %533 = dyn.reshape(%530, %531, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %534 = cast(%var_1992, dtype="float32") /* ty=Tensor[(96), float32] */;
  %535 = reshape(%534, newshape=[2, 48]) /* ty=Tensor[(2, 48), float32] */;
  %536 = @func_1897(%535) /* ty=(Tensor[(11, ?, 2), float64], Tensor[(16, 2, 10), float64], Tensor[(784), float64], Tensor[(300), float32], Tensor[(2, 6, 8), float64], Tensor[(2, 48), float32]) */;
  %537 = cast(meta[relay.Constant][38] /* ty=Tensor[(6, 66), uint16] */, dtype="float64") /* ty=Tensor[(6, 66), float64] */;
  %538 = log10(%537) /* ty=Tensor[(6, 66), float64] */;
  %539 = cast(meta[relay.Constant][38] /* ty=Tensor[(6, 66), uint16] */, dtype="uint16") /* ty=Tensor[(6, 66), uint16] */;
  %540 = reshape(%539, newshape=[396]) /* ty=Tensor[(396), uint16] */;
  %541 = @func_1840(%540) /* ty=(Tensor[(11, ?, 2), float64], Tensor[(11, 9, 4), bool], Tensor[(396), uint16]) */;
  %542 = %541.2;
  %543 = cast(%542, dtype="bool") /* ty=Tensor[(396), bool] */;
  %544 = shape_of(%538, dtype="int32") /* ty=Tensor[(2), int32] */;
  %545 = cast(%538, dtype="bool") /* ty=Tensor[(6, 66), bool] */;
  %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %547 = greater(%545, %546) /* ty=Tensor[(6, 66), bool] */;
  %548 = cast(%542, dtype="uint64") /* ty=Tensor[(396), uint64] */;
  %549 = shape_of(%547, dtype="int32") /* ty=Tensor[(2), int32] */;
  %550 = cast(%547, dtype="uint64") /* ty=Tensor[(6, 66), uint64] */;
  %551 = dyn.reshape(%548, %549, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %552 = @func_1956() /* ty=(Tensor[(11, ?, 2), float64],) */;
  %553 = cast(meta[relay.Constant][38] /* ty=Tensor[(6, 66), uint16] */, dtype="int64") /* ty=Tensor[(6, 66), int64] */;
  %554 = shape_of(%547, dtype="int32") /* ty=Tensor[(2), int32] */;
  %555 = cast(%547, dtype="int64") /* ty=Tensor[(6, 66), int64] */;
  %556 = dyn.reshape(%553, %554, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %557 = bitwise_xor(%532, %533) /* ty=Tensor[(11, ?, 2), uint64] */;
  %558 = %536.3;
  %559 = left_shift(%550, %551) /* ty=Tensor[(6, 66), uint64] */;
  %560 = %552.0;
  %561 = minimum(%555, %556) /* ty=Tensor[(6, 66), int64] */;
  (%557, %558, %var_1992, %559, %560, %561)
}

def @func_3885(%var_3875: Tensor[(300), float32], %var_3880: Tensor[(110), float64], %var_3881: Tensor[(375, 1), float64]) -> (Tensor[(11, ?, 2), float64], Tensor[(1536), float32], Tensor[(300), float32], Tensor[(6, 66), uint16], Tensor[(110), float64], Tensor[(375, 1), float64], Tensor[(210), uint64]) {
  %562 = cast(%var_3875, dtype="float32") /* ty=Tensor[(300), float32] */;
  %563 = reshape(%562, newshape=[300]) /* ty=Tensor[(300), float32] */;
  %564 = @func_3842(%563) /* ty=(Tensor[(1536), float32], Tensor[(5, 6, 10), float32], Tensor[(300), float32], Tensor[(11, 96, 2), float32]) */;
  %565 = cast(%var_3880, dtype="float64") /* ty=Tensor[(110), float64] */;
  %566 = cast(%var_3881, dtype="float64") /* ty=Tensor[(375, 1), float64] */;
  %567 = cast(meta[relay.Constant][39] /* ty=Tensor[(210), uint64] */, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %568 = reshape(%565, newshape=[11, 5, 2]) /* ty=Tensor[(11, 5, 2), float64] */;
  %569 = reshape(%566, newshape=[375]) /* ty=Tensor[(375), float64] */;
  %570 = reshape(%567, newshape=[210]) /* ty=Tensor[(210), uint64] */;
  %571 = @func_2564(%568, %569, %570) /* ty=(Tensor[(11, 5, 2), bool], Tensor[(144), float32], Tensor[(375), float64], Tensor[(210), uint64], Tensor[(11, 9, 4), bool], Tensor[(6, 66), uint16], Tensor[(11, ?, 2), float64]) */;
  %572 = @func_1789() /* ty=Tensor[(11, ?, 2), float64] */;
  %573 = %564.0;
  %574 = %571.5;
  (%572, %573, %var_3875, %574, %var_3880, %var_3881, meta[relay.Constant][39] /* ty=Tensor[(210), uint64] */)
}

def @func_3917(%var_3905: float64) -> (Tensor[(8, 7, 12), float64],) {
  %575 = cast(%var_3905, dtype="float64") /* ty=float64 */;
  %576 = cast(meta[relay.Constant][40] /* ty=Tensor[(8, 7, 12), float64] */, dtype="float64") /* ty=Tensor[(8, 7, 12), float64] */;
  %577 = subtract(%575, %576) /* ty=Tensor[(8, 7, 12), float64] */;
  (%577,)
}

def @func_3143(%var_3105: Tensor[(6, 10, 11), float32], %var_3106: Tensor[(6, 10, 11), float32], %var_3115: Tensor[(96), float32]) -> (Tensor[(6, 10, 11), float32], Tensor[(2, 6, 8), float32], Tensor[(96), float32], Tensor[(6, 10, 11), float64], Tensor[(300), float32], Tensor[(50, 6), float32], Tensor[(2, 6, 8), float64]) {
  %578 = cast(%var_3106, dtype="float32") /* ty=Tensor[(6, 10, 11), float32] */;
  %579 = shape_of(%var_3105, dtype="int32") /* ty=Tensor[(3), int32] */;
  %580 = cast(%var_3105, dtype="float32") /* ty=Tensor[(6, 10, 11), float32] */;
  %581 = dyn.reshape(%578, %579, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %582 = cast(%var_3115, dtype="float32") /* ty=Tensor[(96), float32] */;
  %583 = reshape(%582, newshape=[2, 6, 8]) /* ty=Tensor[(2, 6, 8), float32] */;
  %584 = @func_1629(%583) /* ty=(Tensor[(2, 6, 8), float32], Tensor[(2, 6, 8), float64]) */;
  %585 = cast(%var_3106, dtype="float64") /* ty=Tensor[(6, 10, 11), float64] */;
  %586 = cast(meta[relay.Constant][41] /* ty=Tensor[(50, 6), float32] */, dtype="float32") /* ty=Tensor[(50, 6), float32] */;
  %587 = reshape(%586, newshape=[300]) /* ty=Tensor[(300), float32] */;
  %588 = @func_2276(%587) /* ty=(Tensor[(5, 6, 10), float32], Tensor[(300), float32], Tensor[(11, ?, 2), float64], Tensor[(11, ?, 2), bool]) */;
  %589 = cast(%var_3115, dtype="float32") /* ty=Tensor[(96), float32] */;
  %590 = reshape(%589, newshape=[2, 6, 8]) /* ty=Tensor[(2, 6, 8), float32] */;
  %591 = @func_1629(%590) /* ty=(Tensor[(2, 6, 8), float32], Tensor[(2, 6, 8), float64]) */;
  %592 = minimum(%580, %581) /* ty=Tensor[(6, 10, 11), float32] */;
  %593 = %584.0;
  %594 = asin(%585) /* ty=Tensor[(6, 10, 11), float64] */;
  %595 = %588.1;
  %596 = %591.1;
  (%592, %593, %var_3115, %594, %595, meta[relay.Constant][41] /* ty=Tensor[(50, 6), float32] */, %596)
}

def @func_2942(%var_2922: Tensor[(96), float32]) -> (Tensor[(11, ?, 2), float64], Tensor[(96), float32], Tensor[(96), float32], Tensor[(11, ?, 2), float64]) {
  %597 = @func_1956() /* ty=(Tensor[(11, ?, 2), float64],) */;
  %598 = %597.0;
  %599 = cast(%598, dtype="float64") /* ty=Tensor[(11, ?, 2), float64] */;
  %600 = cast(%var_2922, dtype="float32") /* ty=Tensor[(96), float32] */;
  %601 = reshape(%599, newshape=[11, 1, 2]) /* ty=Tensor[(11, 1, 2), float64] */;
  %602 = reshape(%600, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %603 = @func_2063(%601, %602) /* ty=(Tensor[(11, ?, 2), uint64], Tensor[(300), float32], Tensor[(96), float32], Tensor[(6, 66), uint64], Tensor[(11, ?, 2), float64], Tensor[(6, 66), int64]) */;
  %604 = %603.2;
  %605 = @func_2388() /* ty=Tensor[(11, ?, 2), float64] */;
  (%598, %604, %var_2922, %605)
}

def @func_4077() -> Tensor[(11, ?, 2), float64] {
  %606 = @func_4043() /* ty=(Tensor[(11, ?, 2), float64],) */;
  %606.0
}

def @func_3657(%var_3613: Tensor[(96, 16), float32]) -> (Tensor[(96, 1), float64], Tensor[(11, ?, 2), float64], Tensor[(96, 16), float64], Tensor[(96, 16), float64]) {
  %607 = @func_3254() /* ty=(Tensor[(11, ?, 2), float64], Tensor[(300), float32], Tensor[(96, 1), float32]) */;
  %608 = %607.2;
  %609 = cast(%608, dtype="float64") /* ty=Tensor[(96, 1), float64] */;
  %610 = cast(%var_3613, dtype="float64") /* ty=Tensor[(96, 16), float64] */;
  %611 = cast(%608, dtype="float32") /* ty=Tensor[(96, 1), float32] */;
  %612 = rsqrt(%611) /* ty=Tensor[(96, 1), float32] */;
  %613 = cast(%612, dtype="float64") /* ty=Tensor[(96, 1), float64] */;
  %614 = cast(%var_3613, dtype="float64") /* ty=Tensor[(96, 16), float64] */;
  %615 = maximum(%613, %614) /* ty=Tensor[(96, 16), float64] */;
  %616 = cast(%615, dtype="float64") /* ty=Tensor[(96, 16), float64] */;
  %617 = atan(%609) /* ty=Tensor[(96, 1), float64] */;
  %618 = @func_1789() /* ty=Tensor[(11, ?, 2), float64] */;
  %619 = acos(%610) /* ty=Tensor[(96, 16), float64] */;
  %620 = sin(%616) /* ty=Tensor[(96, 16), float64] */;
  (%617, %618, %619, %620)
}

def @func_3944() -> Tensor[(11, ?, 2), float64] {
  %621 = @func_3254() /* ty=(Tensor[(11, ?, 2), float64], Tensor[(300), float32], Tensor[(96, 1), float32]) */;
  %621.0
}

def @func_4294(%var_4231: Tensor[(11, 13, 2), float64], %var_4240: Tensor[(11, 13, 2), bool], %var_4285: Tensor[(320), float32], %var_4289: Tensor[(784), float64], %var_4290: Tensor[(225), int8], %var_4291: Tensor[(3600), int8]) -> (Tensor[(11, 13, 2), float64], Tensor[(11, 13, 2), float32], Tensor[(16, 2, 10), float64], Tensor[(2, 72), float32], Tensor[(320), float32], Tensor[(11, 5, 2), float32], Tensor[(784), float64], Tensor[(225), int8], Tensor[(3600), int8]) {
  %622 = @func_3060() /* ty=(Tensor[(11, ?, 2), float64],) */;
  %623 = %622.0;
  %624 = cast(%623, dtype="bool") /* ty=Tensor[(11, ?, 2), bool] */;
  %625 = cast(%var_4231, dtype="bool") /* ty=Tensor[(11, 13, 2), bool] */;
  %626 = equal(%624, %625) /* ty=Tensor[(11, 13, 2), bool] */;
  %627 = cast(%var_4240, dtype="int8") /* ty=Tensor[(11, 13, 2), int8] */;
  %628 = shape_of(%626, dtype="int32") /* ty=Tensor[(3), int32] */;
  %629 = cast(%626, dtype="int8") /* ty=Tensor[(11, 13, 2), int8] */;
  %630 = dyn.reshape(%627, %628, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %631 = subtract(%629, %630) /* ty=Tensor[(11, 13, 2), int8] */;
  %632 = cast(%631, dtype="float64") /* ty=Tensor[(11, 13, 2), float64] */;
  %633 = sin(%632) /* ty=Tensor[(11, 13, 2), float64] */;
  %634 = cast(%633, dtype="float64") /* ty=Tensor[(11, 13, 2), float64] */;
  %635 = cast(%623, dtype="float64") /* ty=Tensor[(11, ?, 2), float64] */;
  %636 = cast(%var_4240, dtype="float32") /* ty=Tensor[(11, 13, 2), float32] */;
  %637 = cast(%623, dtype="float32") /* ty=Tensor[(11, ?, 2), float32] */;
  %638 = cast(meta[relay.Constant][42] /* ty=Tensor[(2, 72), float32] */, dtype="float32") /* ty=Tensor[(2, 72), float32] */;
  %639 = cast(%var_4285, dtype="float32") /* ty=Tensor[(320), float32] */;
  %640 = reshape(%638, newshape=[16, 9, 1]) /* ty=Tensor[(16, 9, 1), float32] */;
  %641 = reshape(%639, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %642 = @func_138(%640, %641) /* ty=(Tensor[(16, 9, 1), float32], Tensor[(16, 2, 10), float64], Tensor[(320), float32], Tensor[(16, 2, 10), float64], Tensor[(16, 2, 10), float64], Tensor[(16, 9, 1), int16]) */;
  %643 = cast(%var_4289, dtype="float64") /* ty=Tensor[(784), float64] */;
  %644 = %642.4;
  %645 = cast(%644, dtype="float32") /* ty=Tensor[(16, 2, 10), float32] */;
  %646 = cast(%var_4290, dtype="int8") /* ty=Tensor[(225), int8] */;
  %647 = cast(%var_4291, dtype="int8") /* ty=Tensor[(3600), int8] */;
  %648 = reshape(%643, newshape=[784]) /* ty=Tensor[(784), float64] */;
  %649 = reshape(%645, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %650 = reshape(%646, newshape=[225]) /* ty=Tensor[(225), int8] */;
  %651 = reshape(%647, newshape=[20, 180]) /* ty=Tensor[(20, 180), int8] */;
  %652 = @func_3795(%648, %649, %650, %651) /* ty=(Tensor[(11, 16, 2), int64], Tensor[(11, 5, 2), float32], Tensor[(110), float64], Tensor[(784), float64], Tensor[(320), float32], Tensor[(198, 2), uint16], Tensor[(225), int8], Tensor[(20, 180), int8], Tensor[(375), float64], Tensor[(7, 11, 12), uint16], Tensor[(924), uint16]) */;
  %653 = mod(%634, %635) /* ty=Tensor[(11, 13, 2), float64] */;
  %654 = divide(%636, %637) /* ty=Tensor[(11, 13, 2), float32] */;
  %655 = %652.1;
  (%653, %654, %644, meta[relay.Constant][42] /* ty=Tensor[(2, 72), float32] */, %var_4285, %655, %var_4289, %var_4290, %var_4291)
}

def @func_3712(%var_3686: Tensor[(220), float64], %var_3702: Tensor[(11, 16, 2), float64], %var_3710: Tensor[(784), float64]) -> (Tensor[(220), float32], Tensor[(11, 16, 2), int8], Tensor[(784), int8], Tensor[(784), float64]) {
  %656 = cast(%var_3686, dtype="float64") /* ty=Tensor[(220), float64] */;
  %657 = reshape(%656, newshape=[11, 10, 2]) /* ty=Tensor[(11, 10, 2), float64] */;
  %658 = @func_3602(%657) /* ty=(Tensor[(11, 10, 2), bool],) */;
  %659 = %658.0;
  %660 = cast(%659, dtype="float32") /* ty=Tensor[(11, 10, 2), float32] */;
  %661 = shape_of(%var_3686, dtype="int32") /* ty=Tensor[(1), int32] */;
  %662 = cast(%var_3686, dtype="float32") /* ty=Tensor[(220), float32] */;
  %663 = dyn.reshape(%660, %661, newshape=[]) /* ty=Tensor[(?), float32] */;
  %664 = @func_2388() /* ty=Tensor[(11, ?, 2), float64] */;
  %665 = cast(%664, dtype="float64") /* ty=Tensor[(11, ?, 2), float64] */;
  %666 = sinh(%665) /* ty=Tensor[(11, ?, 2), float64] */;
  %667 = cast(%666, dtype="int8") /* ty=Tensor[(11, ?, 2), int8] */;
  %668 = cast(%var_3702, dtype="int8") /* ty=Tensor[(11, 16, 2), int8] */;
  %669 = cast(%var_3710, dtype="float64") /* ty=Tensor[(784), float64] */;
  %670 = reshape(%669, newshape=[784]) /* ty=Tensor[(784), float64] */;
  %671 = @func_2848(%670) /* ty=(Tensor[(11, ?, 2), float64], Tensor[(300), float32], Tensor[(784), int8], Tensor[(5, 6, 10), float32], Tensor[(396), uint16], Tensor[(396), uint16], Tensor[(784), float32], Tensor[(784), bool]) */;
  %672 = floor_mod(%662, %663) /* ty=Tensor[(220), float32] */;
  %673 = bitwise_or(%667, %668) /* ty=Tensor[(11, 16, 2), int8] */;
  %674 = %671.2;
  (%672, %673, %674, %var_3710)
}

def @func_503(%var_496: Tensor[(7, 11, 12), uint16]) -> (Tensor[(7, 11, 12), uint16],) {
  %675 = cast(meta[relay.Constant][43] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %676 = cast(%var_496, dtype="uint16") /* ty=Tensor[(7, 11, 12), uint16] */;
  %677 = subtract(%675, %676) /* ty=Tensor[(7, 11, 12), uint16] */;
  (%677,)
}

def @func_1956() -> (Tensor[(11, ?, 2), float64],) {
  %678 = @func_1789() /* ty=Tensor[(11, ?, 2), float64] */;
  (%678,)
}

def @func_2388() -> Tensor[(11, ?, 2), float64] {
  %679 = @func_1956() /* ty=(Tensor[(11, ?, 2), float64],) */;
  %679.0
}

def @func_4448(%var_4421: Tensor[(352), float64], %var_4422: Tensor[(784), float64]) -> (Tensor[(11, ?, 2), float64], Tensor[(220), float64], Tensor[(352), float64], Tensor[(784), float64], Tensor[(784), float32], Tensor[(300), float32], Tensor[(11, 96, 2), float32]) {
  %680 = @func_4043() /* ty=(Tensor[(11, ?, 2), float64],) */;
  %681 = %680.0;
  %682 = cast(%681, dtype="float64") /* ty=Tensor[(11, ?, 2), float64] */;
  %683 = cast(meta[relay.Constant][44] /* ty=Tensor[(220), float64] */, dtype="float64") /* ty=Tensor[(220), float64] */;
  %684 = cast(%var_4421, dtype="float64") /* ty=Tensor[(352), float64] */;
  %685 = cast(%var_4422, dtype="float64") /* ty=Tensor[(784), float64] */;
  %686 = reshape(%683, newshape=[220]) /* ty=Tensor[(220), float64] */;
  %687 = reshape(%684, newshape=[11, 16, 2]) /* ty=Tensor[(11, 16, 2), float64] */;
  %688 = reshape(%685, newshape=[784]) /* ty=Tensor[(784), float64] */;
  %689 = @func_3712(%686, %687, %688) /* ty=(Tensor[(220), float32], Tensor[(11, 16, 2), int8], Tensor[(784), int8], Tensor[(784), float64]) */;
  %690 = %689.3;
  %691 = cast(%690, dtype="float32") /* ty=Tensor[(784), float32] */;
  %692 = cast(%var_4422, dtype="float64") /* ty=Tensor[(784), float64] */;
  %693 = reshape(%692, newshape=[784]) /* ty=Tensor[(784), float64] */;
  %694 = @func_2848(%693) /* ty=(Tensor[(11, ?, 2), float64], Tensor[(300), float32], Tensor[(784), int8], Tensor[(5, 6, 10), float32], Tensor[(396), uint16], Tensor[(396), uint16], Tensor[(784), float32], Tensor[(784), bool]) */;
  %695 = %694.1;
  %696 = cast(%695, dtype="float32") /* ty=Tensor[(300), float32] */;
  %697 = reshape(%696, newshape=[300]) /* ty=Tensor[(300), float32] */;
  %698 = @func_3842(%697) /* ty=(Tensor[(1536), float32], Tensor[(5, 6, 10), float32], Tensor[(300), float32], Tensor[(11, 96, 2), float32]) */;
  %699 = log2(%682) /* ty=Tensor[(11, ?, 2), float64] */;
  %700 = sin(%691) /* ty=Tensor[(784), float32] */;
  %701 = %698.3;
  (%699, meta[relay.Constant][44] /* ty=Tensor[(220), float64] */, %var_4421, %var_4422, %700, %695, %701)
}

def @func_2848(%var_2814: Tensor[(784), float64]) -> (Tensor[(11, ?, 2), float64], Tensor[(300), float32], Tensor[(784), int8], Tensor[(5, 6, 10), float32], Tensor[(396), uint16], Tensor[(396), uint16], Tensor[(784), float32], Tensor[(784), bool]) {
  %702 = @func_1956() /* ty=(Tensor[(11, ?, 2), float64],) */;
  %703 = cast(%var_2814, dtype="int8") /* ty=Tensor[(784), int8] */;
  %704 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(784), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %705 = cast(meta[relay.Constant][46] /* ty=Tensor[(784), float64] */, dtype="int8") /* ty=Tensor[(784), int8] */;
  %706 = dyn.reshape(%703, %704, newshape=[]) /* ty=Tensor[(?), int8] */;
  %707 = cast(meta[relay.Constant][45] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
  %708 = reshape(%707, newshape=[300]) /* ty=Tensor[(300), float32] */;
  %709 = @func_2276(%708) /* ty=(Tensor[(5, 6, 10), float32], Tensor[(300), float32], Tensor[(11, ?, 2), float64], Tensor[(11, ?, 2), bool]) */;
  %710 = cast(meta[relay.Constant][47] /* ty=Tensor[(396), uint16] */, dtype="uint16") /* ty=Tensor[(396), uint16] */;
  %711 = reshape(%710, newshape=[396]) /* ty=Tensor[(396), uint16] */;
  %712 = @func_1840(%711) /* ty=(Tensor[(11, ?, 2), float64], Tensor[(11, 9, 4), bool], Tensor[(396), uint16]) */;
  %713 = cast(%var_2814, dtype="float64") /* ty=Tensor[(784), float64] */;
  %714 = log2(%713) /* ty=Tensor[(784), float64] */;
  %715 = cast(meta[relay.Constant][46] /* ty=Tensor[(784), float64] */, dtype="float32") /* ty=Tensor[(784), float32] */;
  %716 = shape_of(%714, dtype="int32") /* ty=Tensor[(1), int32] */;
  %717 = cast(%714, dtype="float32") /* ty=Tensor[(784), float32] */;
  %718 = dyn.reshape(%715, %716, newshape=[]) /* ty=Tensor[(?), float32] */;
  %719 = cast(meta[relay.Constant][46] /* ty=Tensor[(784), float64] */, dtype="float64") /* ty=Tensor[(784), float64] */;
  %720 = cast(meta[relay.Constant][46] /* ty=Tensor[(784), float64] */, dtype="float64") /* ty=Tensor[(784), float64] */;
  %721 = cast(meta[relay.Constant][45] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
  %722 = reshape(%719, newshape=[4, 14, 14]) /* ty=Tensor[(4, 14, 14), float64] */;
  %723 = reshape(%720, newshape=[4, 14, 14]) /* ty=Tensor[(4, 14, 14), float64] */;
  %724 = reshape(%721, newshape=[300]) /* ty=Tensor[(300), float32] */;
  %725 = @func_964(%722, %723, %724) /* ty=(Tensor[(4, 14, 14), float64], Tensor[(16, 2, 10), float64], Tensor[(300), float32]) */;
  %726 = %725.0;
  %727 = cast(%726, dtype="bool") /* ty=Tensor[(4, 14, 14), bool] */;
  %728 = shape_of(%714, dtype="int32") /* ty=Tensor[(1), int32] */;
  %729 = cast(%714, dtype="bool") /* ty=Tensor[(784), bool] */;
  %730 = dyn.reshape(%727, %728, newshape=[]) /* ty=Tensor[(?), bool] */;
  %731 = %702.0;
  %732 = bitwise_xor(%705, %706) /* ty=Tensor[(784), int8] */;
  %733 = %709.0;
  %734 = %712.2;
  %735 = divide(%717, %718) /* ty=Tensor[(784), float32] */;
  %736 = not_equal(%729, %730) /* ty=Tensor[(784), bool] */;
  (%731, meta[relay.Constant][45] /* ty=Tensor[(300), float32] */, %732, %733, %734, meta[relay.Constant][47] /* ty=Tensor[(396), uint16] */, %735, %736)
}

def @func_4680() -> (Tensor[(11, ?, 2), float64], Tensor[(4, 14, 14), float64], Tensor[(784), float64], Tensor[(300), float32], Tensor[(300), float32]) {
  %737 = cast(meta[relay.Constant][48] /* ty=Tensor[(784), float64] */, dtype="float64") /* ty=Tensor[(784), float64] */;
  %738 = cast(meta[relay.Constant][48] /* ty=Tensor[(784), float64] */, dtype="float64") /* ty=Tensor[(784), float64] */;
  %739 = cast(meta[relay.Constant][49] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
  %740 = reshape(%737, newshape=[4, 14, 14]) /* ty=Tensor[(4, 14, 14), float64] */;
  %741 = reshape(%738, newshape=[4, 14, 14]) /* ty=Tensor[(4, 14, 14), float64] */;
  %742 = reshape(%739, newshape=[300]) /* ty=Tensor[(300), float32] */;
  %743 = @func_964(%740, %741, %742) /* ty=(Tensor[(4, 14, 14), float64], Tensor[(16, 2, 10), float64], Tensor[(300), float32]) */;
  %744 = cast(meta[relay.Constant][49] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
  %745 = reshape(%744, newshape=[300]) /* ty=Tensor[(300), float32] */;
  %746 = @func_3842(%745) /* ty=(Tensor[(1536), float32], Tensor[(5, 6, 10), float32], Tensor[(300), float32], Tensor[(11, 96, 2), float32]) */;
  %747 = @func_1789() /* ty=Tensor[(11, ?, 2), float64] */;
  %748 = %743.0;
  %749 = %746.2;
  (%747, %748, meta[relay.Constant][48] /* ty=Tensor[(784), float64] */, meta[relay.Constant][49] /* ty=Tensor[(300), float32] */, %749)
}

def @func_1710(%var_1685: Tensor[(11, 9, 4), uint16], %var_1686: Tensor[(11, 9, 4), uint16]) -> (Tensor[(11, 9, 4), bool],) {
  %750 = cast(%var_1686, dtype="uint16") /* ty=Tensor[(11, 9, 4), uint16] */;
  %751 = shape_of(%var_1685, dtype="int32") /* ty=Tensor[(3), int32] */;
  %752 = cast(%var_1685, dtype="uint16") /* ty=Tensor[(11, 9, 4), uint16] */;
  %753 = dyn.reshape(%750, %751, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %754 = bitwise_or(%752, %753) /* ty=Tensor[(11, 9, 4), uint16] */;
  %755 = cast(%var_1686, dtype="bool") /* ty=Tensor[(11, 9, 4), bool] */;
  %756 = shape_of(%754, dtype="int32") /* ty=Tensor[(3), int32] */;
  %757 = cast(%754, dtype="bool") /* ty=Tensor[(11, 9, 4), bool] */;
  %758 = dyn.reshape(%755, %756, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %759 = less_equal(%757, %758) /* ty=Tensor[(11, 9, 4), bool] */;
  (%759,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2435() -> Tensor[(11, ?, 2), float64] {
  @func_2433() /* ty=Tensor[(11, ?, 2), float64] */
}

def @func_4079() -> Tensor[(11, ?, 2), float64] {
  @func_4077() /* ty=Tensor[(11, ?, 2), float64] */
}

def @func_1357(%var_1355: Tensor[(11, 1, 14), float64]) -> (Tensor[(11, 1, 14), float64], Tensor[(11, 1, 14), float64]) {
  @func_1354(%var_1355) /* ty=(Tensor[(11, 1, 14), float64], Tensor[(11, 1, 14), float64]) */
}

def @func_3657(%var_3613: Tensor[(96, 16), float32]) -> (Tensor[(96, 1), float64], Tensor[(11, ?, 2), float64], Tensor[(96, 16), float64], Tensor[(96, 16), float64]) {
  %0 = @func_3254() /* ty=(Tensor[(11, ?, 2), float64], Tensor[(300), float32], Tensor[(96, 1), float32]) */;
  %1 = %0.2;
  %2 = cast(%1, dtype="float64") /* ty=Tensor[(96, 1), float64] */;
  %3 = cast(%var_3613, dtype="float64") /* ty=Tensor[(96, 16), float64] */;
  %4 = cast(%1, dtype="float32") /* ty=Tensor[(96, 1), float32] */;
  %5 = rsqrt(%4) /* ty=Tensor[(96, 1), float32] */;
  %6 = cast(%5, dtype="float64") /* ty=Tensor[(96, 1), float64] */;
  %7 = cast(%var_3613, dtype="float64") /* ty=Tensor[(96, 16), float64] */;
  %8 = maximum(%6, %7) /* ty=Tensor[(96, 16), float64] */;
  %9 = cast(%8, dtype="float64") /* ty=Tensor[(96, 16), float64] */;
  %10 = atan(%2) /* ty=Tensor[(96, 1), float64] */;
  %11 = @func_1789() /* ty=Tensor[(11, ?, 2), float64] */;
  %12 = acos(%3) /* ty=Tensor[(96, 16), float64] */;
  %13 = sin(%9) /* ty=Tensor[(96, 16), float64] */;
  (%10, %11, %12, %13)
}

def @func_3256() -> (Tensor[(11, ?, 2), float64], Tensor[(300), float32], Tensor[(96, 1), float32]) {
  @func_3254() /* ty=(Tensor[(11, ?, 2), float64], Tensor[(300), float32], Tensor[(96, 1), float32]) */
}

def @func_4448(%var_4421: Tensor[(352), float64], %var_4422: Tensor[(784), float64]) -> (Tensor[(11, ?, 2), float64], Tensor[(220), float64], Tensor[(352), float64], Tensor[(784), float64], Tensor[(784), float32], Tensor[(300), float32], Tensor[(11, 96, 2), float32]) {
  %14 = @func_4043() /* ty=(Tensor[(11, ?, 2), float64],) */;
  %15 = %14.0;
  %16 = cast(%15, dtype="float64") /* ty=Tensor[(11, ?, 2), float64] */;
  %17 = cast(meta[relay.Constant][0] /* ty=Tensor[(220), float64] */, dtype="float64") /* ty=Tensor[(220), float64] */;
  %18 = cast(%var_4421, dtype="float64") /* ty=Tensor[(352), float64] */;
  %19 = cast(%var_4422, dtype="float64") /* ty=Tensor[(784), float64] */;
  %20 = reshape(%17, newshape=[220]) /* ty=Tensor[(220), float64] */;
  %21 = reshape(%18, newshape=[11, 16, 2]) /* ty=Tensor[(11, 16, 2), float64] */;
  %22 = reshape(%19, newshape=[784]) /* ty=Tensor[(784), float64] */;
  %23 = @func_3712(%20, %21, %22) /* ty=(Tensor[(220), float32], Tensor[(11, 16, 2), int8], Tensor[(784), int8], Tensor[(784), float64]) */;
  %24 = %23.3;
  %25 = cast(%24, dtype="float32") /* ty=Tensor[(784), float32] */;
  %26 = cast(%var_4422, dtype="float64") /* ty=Tensor[(784), float64] */;
  %27 = reshape(%26, newshape=[784]) /* ty=Tensor[(784), float64] */;
  %28 = @func_2848(%27) /* ty=(Tensor[(11, ?, 2), float64], Tensor[(300), float32], Tensor[(784), int8], Tensor[(5, 6, 10), float32], Tensor[(396), uint16], Tensor[(396), uint16], Tensor[(784), float32], Tensor[(784), bool]) */;
  %29 = %28.1;
  %30 = cast(%29, dtype="float32") /* ty=Tensor[(300), float32] */;
  %31 = reshape(%30, newshape=[300]) /* ty=Tensor[(300), float32] */;
  %32 = @func_3842(%31) /* ty=(Tensor[(1536), float32], Tensor[(5, 6, 10), float32], Tensor[(300), float32], Tensor[(11, 96, 2), float32]) */;
  %33 = log2(%16) /* ty=Tensor[(11, ?, 2), float64] */;
  %34 = sin(%25) /* ty=Tensor[(784), float32] */;
  %35 = %32.3;
  (%33, meta[relay.Constant][0] /* ty=Tensor[(220), float64] */, %var_4421, %var_4422, %34, %29, %35)
}

def @func_141(%var_139: Tensor[(16, 9, 1), float32], %var_140: Tensor[(320), float32]) -> (Tensor[(16, 9, 1), float32], Tensor[(16, 2, 10), float64], Tensor[(320), float32], Tensor[(16, 2, 10), float64], Tensor[(16, 2, 10), float64], Tensor[(16, 9, 1), int16]) {
  %56 = fn (%var_103: Tensor[(16, 9, 1), float32], %var_113: Tensor[(320), float32]) -> (Tensor[(16, 9, 1), float32], Tensor[(16, 2, 10), float64], Tensor[(320), float32], Tensor[(16, 2, 10), float64], Tensor[(16, 2, 10), float64], Tensor[(16, 9, 1), int16]) {
    %36 = cast(9.72044f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %37 = cast(%var_103, dtype="float32") /* ty=Tensor[(16, 9, 1), float32] */;
    %38 = cast(%var_113, dtype="float32") /* ty=Tensor[(320), float32] */;
    %39 = reshape(%38, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float32] */;
    %40 = @func_53(%39) /* ty=Tensor[(16, 2, 10), float64] */;
    %41 = cast(%40, dtype="float32") /* ty=Tensor[(16, 2, 10), float32] */;
    %42 = reshape(%41, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float32] */;
    %43 = @func_53(%42) /* ty=Tensor[(16, 2, 10), float64] */;
    %44 = cast(%43, dtype="float32") /* ty=Tensor[(16, 2, 10), float32] */;
    %45 = reshape(%44, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float32] */;
    %46 = cast(%var_103, dtype="float64") /* ty=Tensor[(16, 9, 1), float64] */;
    %47 = asin(%46) /* ty=Tensor[(16, 9, 1), float64] */;
    %48 = cast(9.72044f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %49 = cast(%47, dtype="float32") /* ty=Tensor[(16, 9, 1), float32] */;
    %50 = subtract(%48, %49) /* ty=Tensor[(16, 9, 1), float32] */;
    %51 = cast(%50, dtype="int16") /* ty=Tensor[(16, 9, 1), int16] */;
    %52 = cast(9.72044f /* ty=float32 */, dtype="int16") /* ty=int16 */;
    %53 = minimum(%36, %37) /* ty=Tensor[(16, 9, 1), float32] */;
    %54 = @func_53(%45) /* ty=Tensor[(16, 2, 10), float64] */;
    %55 = bitwise_or(%51, %52) /* ty=Tensor[(16, 9, 1), int16] */;
    (%53, %40, %var_113, %43, %54, %55)
  };
  %56(%var_139, %var_140) /* ty=(Tensor[(16, 9, 1), float32], Tensor[(16, 2, 10), float64], Tensor[(320), float32], Tensor[(16, 2, 10), float64], Tensor[(16, 2, 10), float64], Tensor[(16, 9, 1), int16]) */
}

def @func_3001(%var_2998: Tensor[(5, 11, 11), float32], %var_2999: Tensor[(5, 11, 11), float32], %var_3000: Tensor[(5, 11, 11), float32]) -> (Tensor[(5, 11, 11), int8], Tensor[(5, 11, 11), float32]) {
  @func_2996(%var_2998, %var_2999, %var_3000) /* ty=(Tensor[(5, 11, 11), int8], Tensor[(5, 11, 11), float32]) */
}

def @func_2389() -> Tensor[(11, ?, 2), float64] {
  %58 = fn () -> Tensor[(11, ?, 2), float64] {
    %57 = @func_1956() /* ty=(Tensor[(11, ?, 2), float64],) */;
    %57.0
  };
  %58() /* ty=Tensor[(11, ?, 2), float64] */
}

def @func_4452(%var_4450: Tensor[(352), float64], %var_4451: Tensor[(784), float64]) -> (Tensor[(11, ?, 2), float64], Tensor[(220), float64], Tensor[(352), float64], Tensor[(784), float64], Tensor[(784), float32], Tensor[(300), float32], Tensor[(11, 96, 2), float32]) {
  @func_4448(%var_4450, %var_4451) /* ty=(Tensor[(11, ?, 2), float64], Tensor[(220), float64], Tensor[(352), float64], Tensor[(784), float64], Tensor[(784), float32], Tensor[(300), float32], Tensor[(11, 96, 2), float32]) */
}

def @func_4623(%var_4622: Tensor[(96, 10), float32]) -> (Tensor[(96, 10), float64], Tensor[(5, 7, 3), float32], Tensor[(105), float32], Tensor[(210), uint64]) {
  %72 = fn (%var_4611: Tensor[(96, 10), float32]) -> (Tensor[(96, 10), float64], Tensor[(5, 7, 3), float32], Tensor[(105), float32], Tensor[(210), uint64]) {
    %59 = @func_3254() /* ty=(Tensor[(11, ?, 2), float64], Tensor[(300), float32], Tensor[(96, 1), float32]) */;
    %60 = %59.2;
    %61 = cast(%60, dtype="float32") /* ty=Tensor[(96, 1), float32] */;
    %62 = asin(%61) /* ty=Tensor[(96, 1), float32] */;
    %63 = cast(%62, dtype="float64") /* ty=Tensor[(96, 1), float64] */;
    %64 = cast(%var_4611, dtype="float64") /* ty=Tensor[(96, 10), float64] */;
    %65 = cast(meta[relay.Constant][1] /* ty=Tensor[(105), float32] */, dtype="float32") /* ty=Tensor[(105), float32] */;
    %66 = cast(meta[relay.Constant][2] /* ty=Tensor[(210), uint64] */, dtype="uint64") /* ty=Tensor[(210), uint64] */;
    %67 = reshape(%65, newshape=[5, 7, 3]) /* ty=Tensor[(5, 7, 3), float32] */;
    %68 = reshape(%66, newshape=[35, 6]) /* ty=Tensor[(35, 6), uint64] */;
    %69 = @func_403(%67, %68) /* ty=(Tensor[(5, 7, 3), float32], Tensor[(320), float32], Tensor[(35, 6), uint64], Tensor[(4, 80), float32], Tensor[(5, 7, 3), float32]) */;
    %70 = add(%63, %64) /* ty=Tensor[(96, 10), float64] */;
    %71 = %69.4;
    (%70, %71, meta[relay.Constant][1] /* ty=Tensor[(105), float32] */, meta[relay.Constant][2] /* ty=Tensor[(210), uint64] */)
  };
  %72(%var_4622) /* ty=(Tensor[(96, 10), float64], Tensor[(5, 7, 3), float32], Tensor[(105), float32], Tensor[(210), uint64]) */
}

def @func_55(%var_54: Tensor[(16, 2, 10), float32]) -> Tensor[(16, 2, 10), float64] {
  %81 = fn (%var_26: Tensor[(16, 2, 10), float32]) -> Tensor[(16, 2, 10), float64] {
    %73 = cast(%var_26, dtype="float32") /* ty=Tensor[(16, 2, 10), float32] */;
    %74 = atanh(%73) /* ty=Tensor[(16, 2, 10), float32] */;
    %75 = cast(%74, dtype="float32") /* ty=Tensor[(16, 2, 10), float32] */;
    %76 = shape_of(%var_26, dtype="int32") /* ty=Tensor[(3), int32] */;
    %77 = cast(%var_26, dtype="float32") /* ty=Tensor[(16, 2, 10), float32] */;
    %78 = dyn.reshape(%75, %76, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %79 = power(%77, %78) /* ty=Tensor[(16, 2, 10), float32] */;
    %80 = cast(%79, dtype="float64") /* ty=Tensor[(16, 2, 10), float64] */;
    cos(%80) /* ty=Tensor[(16, 2, 10), float64] */
  };
  %81(%var_54) /* ty=Tensor[(16, 2, 10), float64] */
}

def @func_4077() -> Tensor[(11, ?, 2), float64] {
  %82 = @func_4043() /* ty=(Tensor[(11, ?, 2), float64],) */;
  %82.0
}

def @func_2718(%var_2715: Tensor[(50, 6), float32], %var_2716: Tensor[(16, 2, 10), float64], %var_2717: Tensor[(396), uint16]) -> (Tensor[(11, ?, 2), float64], Tensor[(50, 6), float32], Tensor[(16, 2, 10), int32], Tensor[(16, 2, 10), float64], Tensor[(396), uint16], Tensor[(396), uint16]) {
  %102 = fn (%var_2675: Tensor[(50, 6), float32], %var_2677: Tensor[(16, 2, 10), float64], %var_2696: Tensor[(396), uint16]) -> (Tensor[(11, ?, 2), float64], Tensor[(50, 6), float32], Tensor[(16, 2, 10), int32], Tensor[(16, 2, 10), float64], Tensor[(396), uint16], Tensor[(396), uint16]) {
    %83 = cast(%var_2675, dtype="float32") /* ty=Tensor[(50, 6), float32] */;
    %84 = cast(%var_2675, dtype="float32") /* ty=Tensor[(50, 6), float32] */;
    %85 = reshape(%83, newshape=[5, 6, 10]) /* ty=Tensor[(5, 6, 10), float32] */;
    %86 = reshape(%84, newshape=[5, 6, 10]) /* ty=Tensor[(5, 6, 10), float32] */;
    %87 = @func_233(%85, %86) /* ty=(Tensor[(5, 6, 10), float32], Tensor[(16, 2, 10), float64], Tensor[(320), float32]) */;
    %88 = %87.1;
    %89 = cast(%var_2677, dtype="int32") /* ty=Tensor[(16, 2, 10), int32] */;
    %90 = shape_of(%88, dtype="int32") /* ty=Tensor[(3), int32] */;
    %91 = cast(%88, dtype="int32") /* ty=Tensor[(16, 2, 10), int32] */;
    %92 = dyn.reshape(%89, %90, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %93 = bitwise_and(%91, %92) /* ty=Tensor[(16, 2, 10), int32] */;
    %94 = cast(%93, dtype="float32") /* ty=Tensor[(16, 2, 10), float32] */;
    %95 = reshape(%94, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float32] */;
    %96 = cast(%var_2696, dtype="uint16") /* ty=Tensor[(396), uint16] */;
    %97 = reshape(%96, newshape=[396]) /* ty=Tensor[(396), uint16] */;
    %98 = @func_1840(%97) /* ty=(Tensor[(11, ?, 2), float64], Tensor[(11, 9, 4), bool], Tensor[(396), uint16]) */;
    %99 = @func_2330() /* ty=Tensor[(11, ?, 2), float64] */;
    %100 = @func_53(%95) /* ty=Tensor[(16, 2, 10), float64] */;
    %101 = %98.2;
    (%99, %var_2675, %93, %100, %101, %var_2696)
  };
  %102(%var_2715, %var_2716, %var_2717) /* ty=(Tensor[(11, ?, 2), float64], Tensor[(50, 6), float32], Tensor[(16, 2, 10), int32], Tensor[(16, 2, 10), float64], Tensor[(396), uint16], Tensor[(396), uint16]) */
}

def @func_403(%var_370: Tensor[(5, 7, 3), float32], %var_383: Tensor[(35, 6), uint64]) -> (Tensor[(5, 7, 3), float32], Tensor[(320), float32], Tensor[(35, 6), uint64], Tensor[(4, 80), float32], Tensor[(5, 7, 3), float32]) {
  %103 = cast(meta[relay.Constant][3] /* ty=Tensor[(5, 7, 3), float32] */, dtype="float32") /* ty=Tensor[(5, 7, 3), float32] */;
  %104 = shape_of(%var_370, dtype="int32") /* ty=Tensor[(3), int32] */;
  %105 = cast(%var_370, dtype="float32") /* ty=Tensor[(5, 7, 3), float32] */;
  %106 = dyn.reshape(%103, %104, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %107 = cast(%var_383, dtype="uint64") /* ty=Tensor[(35, 6), uint64] */;
  %108 = cast(meta[relay.Constant][4] /* ty=Tensor[(4, 80), float32] */, dtype="float32") /* ty=Tensor[(4, 80), float32] */;
  %109 = reshape(%107, newshape=[6, 5, 7]) /* ty=Tensor[(6, 5, 7), uint64] */;
  %110 = reshape(%108, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %111 = @func_202(%109, %110) /* ty=(Tensor[(6, 5, 7), float64], Tensor[(16, 2, 10), float64], Tensor[(144), float32], Tensor[(320), float32], Tensor[(6, 5, 7), int16]) */;
  %112 = cast(meta[relay.Constant][3] /* ty=Tensor[(5, 7, 3), float32] */, dtype="float32") /* ty=Tensor[(5, 7, 3), float32] */;
  %113 = mod(%105, %106) /* ty=Tensor[(5, 7, 3), float32] */;
  %114 = %111.3;
  %115 = acos(%112) /* ty=Tensor[(5, 7, 3), float32] */;
  (%113, %114, %var_383, meta[relay.Constant][4] /* ty=Tensor[(4, 80), float32] */, %115)
}

def @func_1791() -> Tensor[(11, ?, 2), float64] {
  @func_1789() /* ty=Tensor[(11, ?, 2), float64] */
}

def @func_3717(%var_3714: Tensor[(220), float64], %var_3715: Tensor[(11, 16, 2), float64], %var_3716: Tensor[(784), float64]) -> (Tensor[(220), float32], Tensor[(11, 16, 2), int8], Tensor[(784), int8], Tensor[(784), float64]) {
  @func_3712(%var_3714, %var_3715, %var_3716) /* ty=(Tensor[(220), float32], Tensor[(11, 16, 2), int8], Tensor[(784), int8], Tensor[(784), float64]) */
}

def @func_968(%var_965: Tensor[(4, 14, 14), float64], %var_966: Tensor[(4, 14, 14), float64], %var_967: Tensor[(300), float32]) -> (Tensor[(4, 14, 14), float64], Tensor[(16, 2, 10), float64], Tensor[(300), float32]) {
  %127 = fn (%var_948: Tensor[(4, 14, 14), float64], %var_949: Tensor[(4, 14, 14), float64], %var_955: Tensor[(300), float32]) -> (Tensor[(4, 14, 14), float64], Tensor[(16, 2, 10), float64], Tensor[(300), float32]) {
    %116 = cast(%var_949, dtype="float64") /* ty=Tensor[(4, 14, 14), float64] */;
    %117 = shape_of(%var_948, dtype="int32") /* ty=Tensor[(3), int32] */;
    %118 = cast(%var_948, dtype="float64") /* ty=Tensor[(4, 14, 14), float64] */;
    %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %120 = cast(%var_955, dtype="float32") /* ty=Tensor[(300), float32] */;
    %121 = cast(%var_955, dtype="float32") /* ty=Tensor[(300), float32] */;
    %122 = reshape(%120, newshape=[5, 6, 10]) /* ty=Tensor[(5, 6, 10), float32] */;
    %123 = reshape(%121, newshape=[5, 6, 10]) /* ty=Tensor[(5, 6, 10), float32] */;
    %124 = @func_233(%122, %123) /* ty=(Tensor[(5, 6, 10), float32], Tensor[(16, 2, 10), float64], Tensor[(320), float32]) */;
    %125 = floor_mod(%118, %119) /* ty=Tensor[(4, 14, 14), float64] */;
    %126 = %124.1;
    (%125, %126, %var_955)
  };
  %127(%var_965, %var_966, %var_967) /* ty=(Tensor[(4, 14, 14), float64], Tensor[(16, 2, 10), float64], Tensor[(300), float32]) */
}

def @func_859(%var_857: Tensor[(15, 5, 5), float64], %var_858: Tensor[(210, 1), uint64]) -> (Tensor[(15, 5, 5), int8], Tensor[(144), float32], Tensor[(210, 1), uint64], Tensor[(320), float32]) {
  @func_855(%var_857, %var_858) /* ty=(Tensor[(15, 5, 5), int8], Tensor[(144), float32], Tensor[(210, 1), uint64], Tensor[(320), float32]) */
}

def @func_4681() -> (Tensor[(11, ?, 2), float64], Tensor[(4, 14, 14), float64], Tensor[(784), float64], Tensor[(300), float32], Tensor[(300), float32]) {
  %141 = fn () -> (Tensor[(11, ?, 2), float64], Tensor[(4, 14, 14), float64], Tensor[(784), float64], Tensor[(300), float32], Tensor[(300), float32]) {
    %128 = cast(meta[relay.Constant][5] /* ty=Tensor[(784), float64] */, dtype="float64") /* ty=Tensor[(784), float64] */;
    %129 = cast(meta[relay.Constant][5] /* ty=Tensor[(784), float64] */, dtype="float64") /* ty=Tensor[(784), float64] */;
    %130 = cast(meta[relay.Constant][6] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
    %131 = reshape(%128, newshape=[4, 14, 14]) /* ty=Tensor[(4, 14, 14), float64] */;
    %132 = reshape(%129, newshape=[4, 14, 14]) /* ty=Tensor[(4, 14, 14), float64] */;
    %133 = reshape(%130, newshape=[300]) /* ty=Tensor[(300), float32] */;
    %134 = @func_964(%131, %132, %133) /* ty=(Tensor[(4, 14, 14), float64], Tensor[(16, 2, 10), float64], Tensor[(300), float32]) */;
    %135 = cast(meta[relay.Constant][6] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
    %136 = reshape(%135, newshape=[300]) /* ty=Tensor[(300), float32] */;
    %137 = @func_3842(%136) /* ty=(Tensor[(1536), float32], Tensor[(5, 6, 10), float32], Tensor[(300), float32], Tensor[(11, 96, 2), float32]) */;
    %138 = @func_1789() /* ty=Tensor[(11, ?, 2), float64] */;
    %139 = %134.0;
    %140 = %137.2;
    (%138, %139, meta[relay.Constant][5] /* ty=Tensor[(784), float64] */, meta[relay.Constant][6] /* ty=Tensor[(300), float32] */, %140)
  };
  %141() /* ty=(Tensor[(11, ?, 2), float64], Tensor[(4, 14, 14), float64], Tensor[(784), float64], Tensor[(300), float32], Tensor[(300), float32]) */
}

def @func_2629(%var_2626: Tensor[(11, 4, 2), float64], %var_2627: Tensor[(105), float32], %var_2628: Tensor[(210), uint64]) -> (Tensor[(11, 4, 2), bool], Tensor[(11, ?, 2), float64], Tensor[(11, 4, 2), float64], Tensor[(35, 6), uint64], Tensor[(105), float32], Tensor[(210), uint64]) {
  %157 = fn (%var_2587: Tensor[(11, 4, 2), float64], %var_2614: Tensor[(105), float32], %var_2615: Tensor[(210), uint64]) -> (Tensor[(11, 4, 2), bool], Tensor[(11, ?, 2), float64], Tensor[(11, 4, 2), float64], Tensor[(35, 6), uint64], Tensor[(105), float32], Tensor[(210), uint64]) {
    %142 = @func_2433() /* ty=Tensor[(11, ?, 2), float64] */;
    %143 = cast(%142, dtype="bool") /* ty=Tensor[(11, ?, 2), bool] */;
    %144 = cast(%var_2587, dtype="bool") /* ty=Tensor[(11, 4, 2), bool] */;
    %145 = cast(%var_2587, dtype="float64") /* ty=Tensor[(11, 4, 2), float64] */;
    %146 = erf(%145) /* ty=Tensor[(11, 4, 2), float64] */;
    %147 = cast(%146, dtype="float64") /* ty=Tensor[(11, 4, 2), float64] */;
    %148 = cast(%var_2614, dtype="float32") /* ty=Tensor[(105), float32] */;
    %149 = cast(%var_2615, dtype="uint64") /* ty=Tensor[(210), uint64] */;
    %150 = reshape(%148, newshape=[5, 7, 3]) /* ty=Tensor[(5, 7, 3), float32] */;
    %151 = reshape(%149, newshape=[35, 6]) /* ty=Tensor[(35, 6), uint64] */;
    %152 = @func_403(%150, %151) /* ty=(Tensor[(5, 7, 3), float32], Tensor[(320), float32], Tensor[(35, 6), uint64], Tensor[(4, 80), float32], Tensor[(5, 7, 3), float32]) */;
    %153 = logical_or(%143, %144) /* ty=Tensor[(11, 4, 2), bool] */;
    %154 = @func_1789() /* ty=Tensor[(11, ?, 2), float64] */;
    %155 = acosh(%147) /* ty=Tensor[(11, 4, 2), float64] */;
    %156 = %152.2;
    (%153, %154, %155, %156, %var_2614, %var_2615)
  };
  %157(%var_2626, %var_2627, %var_2628) /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, ?, 2), float64], Tensor[(11, 4, 2), float64], Tensor[(35, 6), uint64], Tensor[(105), float32], Tensor[(210), uint64]) */
}

def @func_3889(%var_3886: Tensor[(300), float32], %var_3887: Tensor[(110), float64], %var_3888: Tensor[(375, 1), float64]) -> (Tensor[(11, ?, 2), float64], Tensor[(1536), float32], Tensor[(300), float32], Tensor[(6, 66), uint16], Tensor[(110), float64], Tensor[(375, 1), float64], Tensor[(210), uint64]) {
  %171 = fn (%var_3875: Tensor[(300), float32], %var_3880: Tensor[(110), float64], %var_3881: Tensor[(375, 1), float64]) -> (Tensor[(11, ?, 2), float64], Tensor[(1536), float32], Tensor[(300), float32], Tensor[(6, 66), uint16], Tensor[(110), float64], Tensor[(375, 1), float64], Tensor[(210), uint64]) {
    %158 = cast(%var_3875, dtype="float32") /* ty=Tensor[(300), float32] */;
    %159 = reshape(%158, newshape=[300]) /* ty=Tensor[(300), float32] */;
    %160 = @func_3842(%159) /* ty=(Tensor[(1536), float32], Tensor[(5, 6, 10), float32], Tensor[(300), float32], Tensor[(11, 96, 2), float32]) */;
    %161 = cast(%var_3880, dtype="float64") /* ty=Tensor[(110), float64] */;
    %162 = cast(%var_3881, dtype="float64") /* ty=Tensor[(375, 1), float64] */;
    %163 = cast(meta[relay.Constant][7] /* ty=Tensor[(210), uint64] */, dtype="uint64") /* ty=Tensor[(210), uint64] */;
    %164 = reshape(%161, newshape=[11, 5, 2]) /* ty=Tensor[(11, 5, 2), float64] */;
    %165 = reshape(%162, newshape=[375]) /* ty=Tensor[(375), float64] */;
    %166 = reshape(%163, newshape=[210]) /* ty=Tensor[(210), uint64] */;
    %167 = @func_2564(%164, %165, %166) /* ty=(Tensor[(11, 5, 2), bool], Tensor[(144), float32], Tensor[(375), float64], Tensor[(210), uint64], Tensor[(11, 9, 4), bool], Tensor[(6, 66), uint16], Tensor[(11, ?, 2), float64]) */;
    %168 = @func_1789() /* ty=Tensor[(11, ?, 2), float64] */;
    %169 = %160.0;
    %170 = %167.5;
    (%168, %169, %var_3875, %170, %var_3880, %var_3881, meta[relay.Constant][7] /* ty=Tensor[(210), uint64] */)
  };
  %171(%var_3886, %var_3887, %var_3888) /* ty=(Tensor[(11, ?, 2), float64], Tensor[(1536), float32], Tensor[(300), float32], Tensor[(6, 66), uint16], Tensor[(110), float64], Tensor[(375, 1), float64], Tensor[(210), uint64]) */
}

def @func_3795(%var_3783: Tensor[(784), float64], %var_3784: Tensor[(320), float32], %var_3786: Tensor[(225), int8], %var_3787: Tensor[(20, 180), int8]) -> (Tensor[(11, 16, 2), int64], Tensor[(11, 5, 2), float32], Tensor[(110), float64], Tensor[(784), float64], Tensor[(320), float32], Tensor[(198, 2), uint16], Tensor[(225), int8], Tensor[(20, 180), int8], Tensor[(375), float64], Tensor[(7, 11, 12), uint16], Tensor[(924), uint16]) {
  %172 = @func_3060() /* ty=(Tensor[(11, ?, 2), float64],) */;
  %173 = %172.0;
  %174 = cast(%173, dtype="int64") /* ty=Tensor[(11, ?, 2), int64] */;
  %175 = cast(meta[relay.Constant][8] /* ty=Tensor[(11, 16, 2), float64] */, dtype="int64") /* ty=Tensor[(11, 16, 2), int64] */;
  %176 = cast(meta[relay.Constant][9] /* ty=Tensor[(110), float64] */, dtype="float64") /* ty=Tensor[(110), float64] */;
  %177 = cast(meta[relay.Constant][9] /* ty=Tensor[(110), float64] */, dtype="float64") /* ty=Tensor[(110), float64] */;
  %178 = cast(%var_3783, dtype="float64") /* ty=Tensor[(784), float64] */;
  %179 = cast(%var_3784, dtype="float32") /* ty=Tensor[(320), float32] */;
  %180 = cast(meta[relay.Constant][10] /* ty=Tensor[(198, 2), uint16] */, dtype="uint16") /* ty=Tensor[(198, 2), uint16] */;
  %181 = cast(%var_3786, dtype="int8") /* ty=Tensor[(225), int8] */;
  %182 = cast(%var_3787, dtype="int8") /* ty=Tensor[(20, 180), int8] */;
  %183 = cast(meta[relay.Constant][11] /* ty=Tensor[(375), float64] */, dtype="float64") /* ty=Tensor[(375), float64] */;
  %184 = reshape(%176, newshape=[11, 5, 2]) /* ty=Tensor[(11, 5, 2), float64] */;
  %185 = reshape(%177, newshape=[11, 5, 2]) /* ty=Tensor[(11, 5, 2), float64] */;
  %186 = reshape(%178, newshape=[784]) /* ty=Tensor[(784), float64] */;
  %187 = reshape(%179, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %188 = reshape(%180, newshape=[396]) /* ty=Tensor[(396), uint16] */;
  %189 = reshape(%181, newshape=[225]) /* ty=Tensor[(225), int8] */;
  %190 = reshape(%182, newshape=[3600]) /* ty=Tensor[(3600), int8] */;
  %191 = reshape(%183, newshape=[375]) /* ty=Tensor[(375), float64] */;
  %192 = @func_3471(%184, %185, %186, %187, %188, %189, %190, %191) /* ty=(Tensor[(11, 5, 2), float32], Tensor[(11, 5, 2), bool], Tensor[(784), float64], Tensor[(6, 5, 7), float64], Tensor[(210), uint64], Tensor[(320), float32], Tensor[(16, 2, 10), float64], Tensor[(96), float32], Tensor[(396), uint16], Tensor[(396), uint16], Tensor[(16, 2, 10), float64], Tensor[(1, 144), float32], Tensor[(11, ?, 2), float64], Tensor[(210), uint64], Tensor[(225), int8], Tensor[(3600), int8], Tensor[(375), float64], Tensor[(11, ?, 2), float64], Tensor[(11, ?, 2), float64], Tensor[(5, 6, 10), uint16]) */;
  %193 = cast(meta[relay.Constant][12] /* ty=Tensor[(924), uint16] */, dtype="uint16") /* ty=Tensor[(924), uint16] */;
  %194 = reshape(%193, newshape=[7, 11, 12]) /* ty=Tensor[(7, 11, 12), uint16] */;
  %195 = @func_503(%194) /* ty=(Tensor[(7, 11, 12), uint16],) */;
  %196 = right_shift(%174, %175) /* ty=Tensor[(11, 16, 2), int64] */;
  %197 = %192.0;
  %198 = %195.0;
  (%196, %197, meta[relay.Constant][9] /* ty=Tensor[(110), float64] */, %var_3783, %var_3784, meta[relay.Constant][10] /* ty=Tensor[(198, 2), uint16] */, %var_3786, %var_3787, meta[relay.Constant][11] /* ty=Tensor[(375), float64] */, %198, meta[relay.Constant][12] /* ty=Tensor[(924), uint16] */)
}

def @func_4377() -> (Tensor[(11, ?, 2), float64],) {
  @func_4375() /* ty=(Tensor[(11, ?, 2), float64],) */
}

def @func_2331() -> Tensor[(11, ?, 2), float64] {
  %211 = fn () -> Tensor[(11, ?, 2), float64] {
    %199 = @func_1789() /* ty=Tensor[(11, ?, 2), float64] */;
    %200 = cast(%199, dtype="float64") /* ty=Tensor[(11, ?, 2), float64] */;
    %201 = log(%200) /* ty=Tensor[(11, ?, 2), float64] */;
    %202 = cast(%201, dtype="int32") /* ty=Tensor[(11, ?, 2), int32] */;
    %203 = shape_of(%199, dtype="int32") /* ty=Tensor[(3), int32] */;
    %204 = cast(%199, dtype="int32") /* ty=Tensor[(11, ?, 2), int32] */;
    %205 = dyn.reshape(%202, %203, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %206 = logical_xor(%204, %205) /* ty=Tensor[(11, ?, 2), int32] */;
    %207 = cast(%206, dtype="float64") /* ty=Tensor[(11, ?, 2), float64] */;
    %208 = shape_of(%201, dtype="int32") /* ty=Tensor[(3), int32] */;
    %209 = cast(%201, dtype="float64") /* ty=Tensor[(11, ?, 2), float64] */;
    %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    floor_mod(%209, %210) /* ty=Tensor[(11, ?, 2), float64] */
  };
  %211() /* ty=Tensor[(11, ?, 2), float64] */
}

def @func_202(%var_145: Tensor[(6, 5, 7), uint64], %var_167: Tensor[(320), float32]) -> (Tensor[(6, 5, 7), float64], Tensor[(16, 2, 10), float64], Tensor[(144), float32], Tensor[(320), float32], Tensor[(6, 5, 7), int16]) {
  %212 = cast(%var_145, dtype="float64") /* ty=Tensor[(6, 5, 7), float64] */;
  %213 = cast(meta[relay.Constant][13] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %214 = cast(%var_167, dtype="float32") /* ty=Tensor[(320), float32] */;
  %215 = reshape(%213, newshape=[16, 9, 1]) /* ty=Tensor[(16, 9, 1), float32] */;
  %216 = reshape(%214, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %217 = @func_138(%215, %216) /* ty=(Tensor[(16, 9, 1), float32], Tensor[(16, 2, 10), float64], Tensor[(320), float32], Tensor[(16, 2, 10), float64], Tensor[(16, 2, 10), float64], Tensor[(16, 9, 1), int16]) */;
  %218 = cast(meta[relay.Constant][14] /* ty=Tensor[(6, 5, 7), uint64] */, dtype="bool") /* ty=Tensor[(6, 5, 7), bool] */;
  %219 = shape_of(%var_145, dtype="int32") /* ty=Tensor[(3), int32] */;
  %220 = cast(%var_145, dtype="bool") /* ty=Tensor[(6, 5, 7), bool] */;
  %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %222 = greater(%220, %221) /* ty=Tensor[(6, 5, 7), bool] */;
  %223 = cast(meta[relay.Constant][15] /* ty=Tensor[(6, 5, 7), bool] */, dtype="int16") /* ty=Tensor[(6, 5, 7), int16] */;
  %224 = shape_of(%222, dtype="int32") /* ty=Tensor[(3), int32] */;
  %225 = cast(%222, dtype="int16") /* ty=Tensor[(6, 5, 7), int16] */;
  %226 = dyn.reshape(%223, %224, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %227 = sqrt(%212) /* ty=Tensor[(6, 5, 7), float64] */;
  %228 = %217.4;
  %229 = logical_xor(%225, %226) /* ty=Tensor[(6, 5, 7), int16] */;
  (%227, %228, meta[relay.Constant][13] /* ty=Tensor[(144), float32] */, %var_167, %229)
}

def @func_2848(%var_2814: Tensor[(784), float64]) -> (Tensor[(11, ?, 2), float64], Tensor[(300), float32], Tensor[(784), int8], Tensor[(5, 6, 10), float32], Tensor[(396), uint16], Tensor[(396), uint16], Tensor[(784), float32], Tensor[(784), bool]) {
  %230 = @func_1956() /* ty=(Tensor[(11, ?, 2), float64],) */;
  %231 = cast(%var_2814, dtype="int8") /* ty=Tensor[(784), int8] */;
  %232 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(784), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %233 = cast(meta[relay.Constant][17] /* ty=Tensor[(784), float64] */, dtype="int8") /* ty=Tensor[(784), int8] */;
  %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?), int8] */;
  %235 = cast(meta[relay.Constant][16] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
  %236 = reshape(%235, newshape=[300]) /* ty=Tensor[(300), float32] */;
  %237 = @func_2276(%236) /* ty=(Tensor[(5, 6, 10), float32], Tensor[(300), float32], Tensor[(11, ?, 2), float64], Tensor[(11, ?, 2), bool]) */;
  %238 = cast(meta[relay.Constant][18] /* ty=Tensor[(396), uint16] */, dtype="uint16") /* ty=Tensor[(396), uint16] */;
  %239 = reshape(%238, newshape=[396]) /* ty=Tensor[(396), uint16] */;
  %240 = @func_1840(%239) /* ty=(Tensor[(11, ?, 2), float64], Tensor[(11, 9, 4), bool], Tensor[(396), uint16]) */;
  %241 = cast(%var_2814, dtype="float64") /* ty=Tensor[(784), float64] */;
  %242 = log2(%241) /* ty=Tensor[(784), float64] */;
  %243 = cast(meta[relay.Constant][17] /* ty=Tensor[(784), float64] */, dtype="float32") /* ty=Tensor[(784), float32] */;
  %244 = shape_of(%242, dtype="int32") /* ty=Tensor[(1), int32] */;
  %245 = cast(%242, dtype="float32") /* ty=Tensor[(784), float32] */;
  %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?), float32] */;
  %247 = cast(meta[relay.Constant][17] /* ty=Tensor[(784), float64] */, dtype="float64") /* ty=Tensor[(784), float64] */;
  %248 = cast(meta[relay.Constant][17] /* ty=Tensor[(784), float64] */, dtype="float64") /* ty=Tensor[(784), float64] */;
  %249 = cast(meta[relay.Constant][16] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
  %250 = reshape(%247, newshape=[4, 14, 14]) /* ty=Tensor[(4, 14, 14), float64] */;
  %251 = reshape(%248, newshape=[4, 14, 14]) /* ty=Tensor[(4, 14, 14), float64] */;
  %252 = reshape(%249, newshape=[300]) /* ty=Tensor[(300), float32] */;
  %253 = @func_964(%250, %251, %252) /* ty=(Tensor[(4, 14, 14), float64], Tensor[(16, 2, 10), float64], Tensor[(300), float32]) */;
  %254 = %253.0;
  %255 = cast(%254, dtype="bool") /* ty=Tensor[(4, 14, 14), bool] */;
  %256 = shape_of(%242, dtype="int32") /* ty=Tensor[(1), int32] */;
  %257 = cast(%242, dtype="bool") /* ty=Tensor[(784), bool] */;
  %258 = dyn.reshape(%255, %256, newshape=[]) /* ty=Tensor[(?), bool] */;
  %259 = %230.0;
  %260 = bitwise_xor(%233, %234) /* ty=Tensor[(784), int8] */;
  %261 = %237.0;
  %262 = %240.2;
  %263 = divide(%245, %246) /* ty=Tensor[(784), float32] */;
  %264 = not_equal(%257, %258) /* ty=Tensor[(784), bool] */;
  (%259, meta[relay.Constant][16] /* ty=Tensor[(300), float32] */, %260, %261, %262, meta[relay.Constant][18] /* ty=Tensor[(396), uint16] */, %263, %264)
}

def @func_3660(%var_3658: Tensor[(96, 16), float32]) -> (Tensor[(96, 1), float64], Tensor[(11, ?, 2), float64], Tensor[(96, 16), float64], Tensor[(96, 16), float64]) {
  @func_3657(%var_3658) /* ty=(Tensor[(96, 1), float64], Tensor[(11, ?, 2), float64], Tensor[(96, 16), float64], Tensor[(96, 16), float64]) */
}

def @func_4375() -> (Tensor[(11, ?, 2), float64],) {
  %265 = @func_1789() /* ty=Tensor[(11, ?, 2), float64] */;
  (%265,)
}

def @func_2945(%var_2943: Tensor[(96), float32]) -> (Tensor[(11, ?, 2), float64], Tensor[(96), float32], Tensor[(96), float32], Tensor[(11, ?, 2), float64]) {
  @func_2942(%var_2943) /* ty=(Tensor[(11, ?, 2), float64], Tensor[(96), float32], Tensor[(96), float32], Tensor[(11, ?, 2), float64]) */
}

def @func_503(%var_496: Tensor[(7, 11, 12), uint16]) -> (Tensor[(7, 11, 12), uint16],) {
  %266 = cast(meta[relay.Constant][19] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %267 = cast(%var_496, dtype="uint16") /* ty=Tensor[(7, 11, 12), uint16] */;
  %268 = subtract(%266, %267) /* ty=Tensor[(7, 11, 12), uint16] */;
  (%268,)
}

def @func_3220(%var_3216: Tensor[(11, 16, 2), float64], %var_3217: Tensor[(96), float32], %var_3218: Tensor[(210), uint64], %var_3219: Tensor[(11, 14, 2), float64]) -> (Tensor[(11, 16, 2), bool], Tensor[(320), float32], Tensor[(300), float32], Tensor[(11, ?, 2), float64], Tensor[(96), float32], Tensor[(660), float32], Tensor[(96), float32], Tensor[(15, 5, 5), int8], Tensor[(375), float64], Tensor[(210), uint64], Tensor[(11, 14, 2), uint64]) {
  %297 = fn (%var_3161: Tensor[(11, 16, 2), float64], %var_3192: Tensor[(96), float32], %var_3197: Tensor[(210), uint64], %var_3204: Tensor[(11, 14, 2), float64]) -> (Tensor[(11, 16, 2), bool], Tensor[(320), float32], Tensor[(300), float32], Tensor[(11, ?, 2), float64], Tensor[(96), float32], Tensor[(660), float32], Tensor[(96), float32], Tensor[(15, 5, 5), int8], Tensor[(375), float64], Tensor[(210), uint64], Tensor[(11, 14, 2), uint64]) {
    %269 = @func_2330() /* ty=Tensor[(11, ?, 2), float64] */;
    %270 = cast(%269, dtype="bool") /* ty=Tensor[(11, ?, 2), bool] */;
    %271 = cast(%var_3161, dtype="bool") /* ty=Tensor[(11, 16, 2), bool] */;
    %272 = cast(meta[relay.Constant][20] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
    %273 = cast(meta[relay.Constant][20] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
    %274 = reshape(%272, newshape=[5, 6, 10]) /* ty=Tensor[(5, 6, 10), float32] */;
    %275 = reshape(%273, newshape=[5, 6, 10]) /* ty=Tensor[(5, 6, 10), float32] */;
    %276 = @func_233(%274, %275) /* ty=(Tensor[(5, 6, 10), float32], Tensor[(16, 2, 10), float64], Tensor[(320), float32]) */;
    %277 = cast(meta[relay.Constant][21] /* ty=Tensor[(660), float32] */, dtype="float32") /* ty=Tensor[(660), float32] */;
    %278 = cast(meta[relay.Constant][21] /* ty=Tensor[(660), float32] */, dtype="float32") /* ty=Tensor[(660), float32] */;
    %279 = cast(%var_3192, dtype="float32") /* ty=Tensor[(96), float32] */;
    %280 = reshape(%277, newshape=[6, 10, 11]) /* ty=Tensor[(6, 10, 11), float32] */;
    %281 = reshape(%278, newshape=[6, 10, 11]) /* ty=Tensor[(6, 10, 11), float32] */;
    %282 = reshape(%279, newshape=[96]) /* ty=Tensor[(96), float32] */;
    %283 = @func_3143(%280, %281, %282) /* ty=(Tensor[(6, 10, 11), float32], Tensor[(2, 6, 8), float32], Tensor[(96), float32], Tensor[(6, 10, 11), float64], Tensor[(300), float32], Tensor[(50, 6), float32], Tensor[(2, 6, 8), float64]) */;
    %284 = cast(meta[relay.Constant][22] /* ty=Tensor[(375), float64] */, dtype="float64") /* ty=Tensor[(375), float64] */;
    %285 = cast(%var_3197, dtype="uint64") /* ty=Tensor[(210), uint64] */;
    %286 = reshape(%284, newshape=[15, 5, 5]) /* ty=Tensor[(15, 5, 5), float64] */;
    %287 = reshape(%285, newshape=[210, 1]) /* ty=Tensor[(210, 1), uint64] */;
    %288 = @func_855(%286, %287) /* ty=(Tensor[(15, 5, 5), int8], Tensor[(144), float32], Tensor[(210, 1), uint64], Tensor[(320), float32]) */;
    %289 = cast(%269, dtype="uint64") /* ty=Tensor[(11, ?, 2), uint64] */;
    %290 = cast(%var_3204, dtype="uint64") /* ty=Tensor[(11, 14, 2), uint64] */;
    %291 = less(%270, %271) /* ty=Tensor[(11, 16, 2), bool] */;
    %292 = %276.2;
    %293 = @func_2433() /* ty=Tensor[(11, ?, 2), float64] */;
    %294 = %283.2;
    %295 = %288.0;
    %296 = bitwise_xor(%289, %290) /* ty=Tensor[(11, 14, 2), uint64] */;
    (%291, %292, meta[relay.Constant][20] /* ty=Tensor[(300), float32] */, %293, %294, meta[relay.Constant][21] /* ty=Tensor[(660), float32] */, %var_3192, %295, meta[relay.Constant][22] /* ty=Tensor[(375), float64] */, %var_3197, %296)
  };
  %297(%var_3216, %var_3217, %var_3218, %var_3219) /* ty=(Tensor[(11, 16, 2), bool], Tensor[(320), float32], Tensor[(300), float32], Tensor[(11, ?, 2), float64], Tensor[(96), float32], Tensor[(660), float32], Tensor[(96), float32], Tensor[(15, 5, 5), int8], Tensor[(375), float64], Tensor[(210), uint64], Tensor[(11, 14, 2), uint64]) */
}

def @func_236(%var_234: Tensor[(5, 6, 10), float32], %var_235: Tensor[(5, 6, 10), float32]) -> (Tensor[(5, 6, 10), float32], Tensor[(16, 2, 10), float64], Tensor[(320), float32]) {
  %308 = fn (%var_211: Tensor[(5, 6, 10), float32], %var_216: Tensor[(5, 6, 10), float32]) -> (Tensor[(5, 6, 10), float32], Tensor[(16, 2, 10), float64], Tensor[(320), float32]) {
    %298 = cast(%var_211, dtype="float32") /* ty=Tensor[(5, 6, 10), float32] */;
    %299 = sin(%298) /* ty=Tensor[(5, 6, 10), float32] */;
    %300 = cast(%var_216, dtype="float32") /* ty=Tensor[(5, 6, 10), float32] */;
    %301 = shape_of(%299, dtype="int32") /* ty=Tensor[(3), int32] */;
    %302 = cast(%299, dtype="float32") /* ty=Tensor[(5, 6, 10), float32] */;
    %303 = dyn.reshape(%300, %301, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %304 = cast(meta[relay.Constant][23] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
    %305 = reshape(%304, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float32] */;
    %306 = add(%302, %303) /* ty=Tensor[(5, 6, 10), float32] */;
    %307 = @func_53(%305) /* ty=Tensor[(16, 2, 10), float64] */;
    (%306, %307, meta[relay.Constant][23] /* ty=Tensor[(320), float32] */)
  };
  %308(%var_234, %var_235) /* ty=(Tensor[(5, 6, 10), float32], Tensor[(16, 2, 10), float64], Tensor[(320), float32]) */
}

def @func_4044() -> (Tensor[(11, ?, 2), float64],) {
  %310 = fn () -> (Tensor[(11, ?, 2), float64],) {
    %309 = @func_2388() /* ty=Tensor[(11, ?, 2), float64] */;
    (%309,)
  };
  %310() /* ty=(Tensor[(11, ?, 2), float64],) */
}

def @func_2568(%var_2565: Tensor[(11, 5, 2), float64], %var_2566: Tensor[(375), float64], %var_2567: Tensor[(210), uint64]) -> (Tensor[(11, 5, 2), bool], Tensor[(144), float32], Tensor[(375), float64], Tensor[(210), uint64], Tensor[(11, 9, 4), bool], Tensor[(6, 66), uint16], Tensor[(11, ?, 2), float64]) {
  %334 = fn (%var_2498: Tensor[(11, 5, 2), float64], %var_2532: Tensor[(375), float64], %var_2533: Tensor[(210), uint64]) -> (Tensor[(11, 5, 2), bool], Tensor[(144), float32], Tensor[(375), float64], Tensor[(210), uint64], Tensor[(11, 9, 4), bool], Tensor[(6, 66), uint16], Tensor[(11, ?, 2), float64]) {
    %311 = @func_1956() /* ty=(Tensor[(11, ?, 2), float64],) */;
    %312 = %311.0;
    %313 = cast(%312, dtype="float32") /* ty=Tensor[(11, ?, 2), float32] */;
    %314 = cast(%var_2498, dtype="float32") /* ty=Tensor[(11, 5, 2), float32] */;
    %315 = maximum(%313, %314) /* ty=Tensor[(11, 5, 2), float32] */;
    %316 = cast(%var_2498, dtype="bool") /* ty=Tensor[(11, 5, 2), bool] */;
    %317 = shape_of(%315, dtype="int32") /* ty=Tensor[(3), int32] */;
    %318 = cast(%315, dtype="bool") /* ty=Tensor[(11, 5, 2), bool] */;
    %319 = dyn.reshape(%316, %317, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %320 = cast(%var_2532, dtype="float64") /* ty=Tensor[(375), float64] */;
    %321 = cast(%var_2533, dtype="uint64") /* ty=Tensor[(210), uint64] */;
    %322 = reshape(%320, newshape=[15, 5, 5]) /* ty=Tensor[(15, 5, 5), float64] */;
    %323 = reshape(%321, newshape=[210, 1]) /* ty=Tensor[(210, 1), uint64] */;
    %324 = @func_855(%322, %323) /* ty=(Tensor[(15, 5, 5), int8], Tensor[(144), float32], Tensor[(210, 1), uint64], Tensor[(320), float32]) */;
    %325 = cast(meta[relay.Constant][24] /* ty=Tensor[(6, 66), uint16] */, dtype="uint16") /* ty=Tensor[(6, 66), uint16] */;
    %326 = cast(meta[relay.Constant][24] /* ty=Tensor[(6, 66), uint16] */, dtype="uint16") /* ty=Tensor[(6, 66), uint16] */;
    %327 = reshape(%325, newshape=[11, 9, 4]) /* ty=Tensor[(11, 9, 4), uint16] */;
    %328 = reshape(%326, newshape=[11, 9, 4]) /* ty=Tensor[(11, 9, 4), uint16] */;
    %329 = @func_1710(%327, %328) /* ty=(Tensor[(11, 9, 4), bool],) */;
    %330 = logical_or(%318, %319) /* ty=Tensor[(11, 5, 2), bool] */;
    %331 = %324.1;
    %332 = %329.0;
    %333 = @func_1789() /* ty=Tensor[(11, ?, 2), float64] */;
    (%330, %331, %var_2532, %var_2533, %332, meta[relay.Constant][24] /* ty=Tensor[(6, 66), uint16] */, %333)
  };
  %334(%var_2565, %var_2566, %var_2567) /* ty=(Tensor[(11, 5, 2), bool], Tensor[(144), float32], Tensor[(375), float64], Tensor[(210), uint64], Tensor[(11, 9, 4), bool], Tensor[(6, 66), uint16], Tensor[(11, ?, 2), float64]) */
}

def @func_2730() -> (Tensor[(11, ?, 2), float64],) {
  %335 = @func_1789() /* ty=Tensor[(11, ?, 2), float64] */;
  (%335,)
}

def @func_1354(%var_1343: Tensor[(11, 1, 14), float64]) -> (Tensor[(11, 1, 14), float64], Tensor[(11, 1, 14), float64]) {
  %336 = cast(%var_1343, dtype="float64") /* ty=Tensor[(11, 1, 14), float64] */;
  %337 = cast(%var_1343, dtype="float64") /* ty=Tensor[(11, 1, 14), float64] */;
  %338 = log2(%336) /* ty=Tensor[(11, 1, 14), float64] */;
  %339 = acos(%337) /* ty=Tensor[(11, 1, 14), float64] */;
  (%338, %339)
}

def @func_3539(%var_3535: Tensor[(110), float64], %var_3536: Tensor[(80, 4), float32], %var_3537: Tensor[(396), uint16], %var_3538: Tensor[(225), int8]) -> (Tensor[(11, ?, 2), float64], Tensor[(5, 6, 10), uint16], Tensor[(110), float64], Tensor[(784), float64], Tensor[(80, 4), float32], Tensor[(396), uint16], Tensor[(225), int8], Tensor[(3600), int8], Tensor[(375), float64]) {
  @func_3533(%var_3535, %var_3536, %var_3537, %var_3538) /* ty=(Tensor[(11, ?, 2), float64], Tensor[(5, 6, 10), uint16], Tensor[(110), float64], Tensor[(784), float64], Tensor[(80, 4), float32], Tensor[(396), uint16], Tensor[(225), int8], Tensor[(3600), int8], Tensor[(375), float64]) */
}

def @func_206(%var_204: Tensor[(6, 5, 7), uint64], %var_205: Tensor[(320), float32]) -> (Tensor[(6, 5, 7), float64], Tensor[(16, 2, 10), float64], Tensor[(144), float32], Tensor[(320), float32], Tensor[(6, 5, 7), int16]) {
  @func_202(%var_204, %var_205) /* ty=(Tensor[(6, 5, 7), float64], Tensor[(16, 2, 10), float64], Tensor[(144), float32], Tensor[(320), float32], Tensor[(6, 5, 7), int16]) */
}

def @func_2942(%var_2922: Tensor[(96), float32]) -> (Tensor[(11, ?, 2), float64], Tensor[(96), float32], Tensor[(96), float32], Tensor[(11, ?, 2), float64]) {
  %340 = @func_1956() /* ty=(Tensor[(11, ?, 2), float64],) */;
  %341 = %340.0;
  %342 = cast(%341, dtype="float64") /* ty=Tensor[(11, ?, 2), float64] */;
  %343 = cast(%var_2922, dtype="float32") /* ty=Tensor[(96), float32] */;
  %344 = reshape(%342, newshape=[11, 1, 2]) /* ty=Tensor[(11, 1, 2), float64] */;
  %345 = reshape(%343, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %346 = @func_2063(%344, %345) /* ty=(Tensor[(11, ?, 2), uint64], Tensor[(300), float32], Tensor[(96), float32], Tensor[(6, 66), uint64], Tensor[(11, ?, 2), float64], Tensor[(6, 66), int64]) */;
  %347 = %346.2;
  %348 = @func_2388() /* ty=Tensor[(11, ?, 2), float64] */;
  (%341, %347, %var_2922, %348)
}

def @func_2851(%var_2849: Tensor[(784), float64]) -> (Tensor[(11, ?, 2), float64], Tensor[(300), float32], Tensor[(784), int8], Tensor[(5, 6, 10), float32], Tensor[(396), uint16], Tensor[(396), uint16], Tensor[(784), float32], Tensor[(784), bool]) {
  @func_2848(%var_2849) /* ty=(Tensor[(11, ?, 2), float64], Tensor[(300), float32], Tensor[(784), int8], Tensor[(5, 6, 10), float32], Tensor[(396), uint16], Tensor[(396), uint16], Tensor[(784), float32], Tensor[(784), bool]) */
}

def @func_2789(%var_2787: Tensor[(300), float32]) -> (Tensor[(11, ?, 2), float64], Tensor[(11, ?, 2), float64], Tensor[(300), float32]) {
  @func_2786(%var_2787) /* ty=(Tensor[(11, ?, 2), float64], Tensor[(11, ?, 2), float64], Tensor[(300), float32]) */
}

def @func_3845(%var_3843: Tensor[(300), float32]) -> (Tensor[(1536), float32], Tensor[(5, 6, 10), float32], Tensor[(300), float32], Tensor[(11, 96, 2), float32]) {
  @func_3842(%var_3843) /* ty=(Tensor[(1536), float32], Tensor[(5, 6, 10), float32], Tensor[(300), float32], Tensor[(11, 96, 2), float32]) */
}

def @func_3481(%var_3473: Tensor[(11, 5, 2), float64], %var_3474: Tensor[(11, 5, 2), float64], %var_3475: Tensor[(784), float64], %var_3476: Tensor[(320), float32], %var_3477: Tensor[(396), uint16], %var_3478: Tensor[(225), int8], %var_3479: Tensor[(3600), int8], %var_3480: Tensor[(375), float64]) -> (Tensor[(11, 5, 2), float32], Tensor[(11, 5, 2), bool], Tensor[(784), float64], Tensor[(6, 5, 7), float64], Tensor[(210), uint64], Tensor[(320), float32], Tensor[(16, 2, 10), float64], Tensor[(96), float32], Tensor[(396), uint16], Tensor[(396), uint16], Tensor[(16, 2, 10), float64], Tensor[(1, 144), float32], Tensor[(11, ?, 2), float64], Tensor[(210), uint64], Tensor[(225), int8], Tensor[(3600), int8], Tensor[(375), float64], Tensor[(11, ?, 2), float64], Tensor[(11, ?, 2), float64], Tensor[(5, 6, 10), uint16]) {
  @func_3471(%var_3473, %var_3474, %var_3475, %var_3476, %var_3477, %var_3478, %var_3479, %var_3480) /* ty=(Tensor[(11, 5, 2), float32], Tensor[(11, 5, 2), bool], Tensor[(784), float64], Tensor[(6, 5, 7), float64], Tensor[(210), uint64], Tensor[(320), float32], Tensor[(16, 2, 10), float64], Tensor[(96), float32], Tensor[(396), uint16], Tensor[(396), uint16], Tensor[(16, 2, 10), float64], Tensor[(1, 144), float32], Tensor[(11, ?, 2), float64], Tensor[(210), uint64], Tensor[(225), int8], Tensor[(3600), int8], Tensor[(375), float64], Tensor[(11, ?, 2), float64], Tensor[(11, ?, 2), float64], Tensor[(5, 6, 10), uint16]) */
}

def @func_4192(%var_4186: Tensor[(16, 4, 7), int32], %var_4187: Tensor[(16, 4, 7), int32], %var_4188: Tensor[(4, 88), float64], %var_4189: Tensor[(55, 4), float64], %var_4190: Tensor[(55, 4), float64], %var_4191: Tensor[(154), float64]) -> (Tensor[(16, 4, 7), int32], Tensor[(4, 88), float64], Tensor[(784), float64], Tensor[(55, 4), int16], Tensor[(11, ?, 2), float64], Tensor[(45), int16], Tensor[(55, 4), bool], Tensor[(784), float32], Tensor[(5, 3, 3), float32], Tensor[(11, 1, 14), float64], Tensor[(154), float64]) {
  @func_4184(%var_4186, %var_4187, %var_4188, %var_4189, %var_4190, %var_4191) /* ty=(Tensor[(16, 4, 7), int32], Tensor[(4, 88), float64], Tensor[(784), float64], Tensor[(55, 4), int16], Tensor[(11, ?, 2), float64], Tensor[(45), int16], Tensor[(55, 4), bool], Tensor[(784), float32], Tensor[(5, 3, 3), float32], Tensor[(11, 1, 14), float64], Tensor[(154), float64]) */
}

def @func_3801(%var_3797: Tensor[(784), float64], %var_3798: Tensor[(320), float32], %var_3799: Tensor[(225), int8], %var_3800: Tensor[(20, 180), int8]) -> (Tensor[(11, 16, 2), int64], Tensor[(11, 5, 2), float32], Tensor[(110), float64], Tensor[(784), float64], Tensor[(320), float32], Tensor[(198, 2), uint16], Tensor[(225), int8], Tensor[(20, 180), int8], Tensor[(375), float64], Tensor[(7, 11, 12), uint16], Tensor[(924), uint16]) {
  @func_3795(%var_3797, %var_3798, %var_3799, %var_3800) /* ty=(Tensor[(11, 16, 2), int64], Tensor[(11, 5, 2), float32], Tensor[(110), float64], Tensor[(784), float64], Tensor[(320), float32], Tensor[(198, 2), uint16], Tensor[(225), int8], Tensor[(20, 180), int8], Tensor[(375), float64], Tensor[(7, 11, 12), uint16], Tensor[(924), uint16]) */
}

def @func_4301(%var_4295: Tensor[(11, 13, 2), float64], %var_4296: Tensor[(11, 13, 2), bool], %var_4297: Tensor[(320), float32], %var_4298: Tensor[(784), float64], %var_4299: Tensor[(225), int8], %var_4300: Tensor[(3600), int8]) -> (Tensor[(11, 13, 2), float64], Tensor[(11, 13, 2), float32], Tensor[(16, 2, 10), float64], Tensor[(2, 72), float32], Tensor[(320), float32], Tensor[(11, 5, 2), float32], Tensor[(784), float64], Tensor[(225), int8], Tensor[(3600), int8]) {
  %383 = fn (%var_4231: Tensor[(11, 13, 2), float64], %var_4240: Tensor[(11, 13, 2), bool], %var_4285: Tensor[(320), float32], %var_4289: Tensor[(784), float64], %var_4290: Tensor[(225), int8], %var_4291: Tensor[(3600), int8]) -> (Tensor[(11, 13, 2), float64], Tensor[(11, 13, 2), float32], Tensor[(16, 2, 10), float64], Tensor[(2, 72), float32], Tensor[(320), float32], Tensor[(11, 5, 2), float32], Tensor[(784), float64], Tensor[(225), int8], Tensor[(3600), int8]) {
    %349 = @func_3060() /* ty=(Tensor[(11, ?, 2), float64],) */;
    %350 = %349.0;
    %351 = cast(%350, dtype="bool") /* ty=Tensor[(11, ?, 2), bool] */;
    %352 = cast(%var_4231, dtype="bool") /* ty=Tensor[(11, 13, 2), bool] */;
    %353 = equal(%351, %352) /* ty=Tensor[(11, 13, 2), bool] */;
    %354 = cast(%var_4240, dtype="int8") /* ty=Tensor[(11, 13, 2), int8] */;
    %355 = shape_of(%353, dtype="int32") /* ty=Tensor[(3), int32] */;
    %356 = cast(%353, dtype="int8") /* ty=Tensor[(11, 13, 2), int8] */;
    %357 = dyn.reshape(%354, %355, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %358 = subtract(%356, %357) /* ty=Tensor[(11, 13, 2), int8] */;
    %359 = cast(%358, dtype="float64") /* ty=Tensor[(11, 13, 2), float64] */;
    %360 = sin(%359) /* ty=Tensor[(11, 13, 2), float64] */;
    %361 = cast(%360, dtype="float64") /* ty=Tensor[(11, 13, 2), float64] */;
    %362 = cast(%350, dtype="float64") /* ty=Tensor[(11, ?, 2), float64] */;
    %363 = cast(%var_4240, dtype="float32") /* ty=Tensor[(11, 13, 2), float32] */;
    %364 = cast(%350, dtype="float32") /* ty=Tensor[(11, ?, 2), float32] */;
    %365 = cast(meta[relay.Constant][25] /* ty=Tensor[(2, 72), float32] */, dtype="float32") /* ty=Tensor[(2, 72), float32] */;
    %366 = cast(%var_4285, dtype="float32") /* ty=Tensor[(320), float32] */;
    %367 = reshape(%365, newshape=[16, 9, 1]) /* ty=Tensor[(16, 9, 1), float32] */;
    %368 = reshape(%366, newshape=[320]) /* ty=Tensor[(320), float32] */;
    %369 = @func_138(%367, %368) /* ty=(Tensor[(16, 9, 1), float32], Tensor[(16, 2, 10), float64], Tensor[(320), float32], Tensor[(16, 2, 10), float64], Tensor[(16, 2, 10), float64], Tensor[(16, 9, 1), int16]) */;
    %370 = cast(%var_4289, dtype="float64") /* ty=Tensor[(784), float64] */;
    %371 = %369.4;
    %372 = cast(%371, dtype="float32") /* ty=Tensor[(16, 2, 10), float32] */;
    %373 = cast(%var_4290, dtype="int8") /* ty=Tensor[(225), int8] */;
    %374 = cast(%var_4291, dtype="int8") /* ty=Tensor[(3600), int8] */;
    %375 = reshape(%370, newshape=[784]) /* ty=Tensor[(784), float64] */;
    %376 = reshape(%372, newshape=[320]) /* ty=Tensor[(320), float32] */;
    %377 = reshape(%373, newshape=[225]) /* ty=Tensor[(225), int8] */;
    %378 = reshape(%374, newshape=[20, 180]) /* ty=Tensor[(20, 180), int8] */;
    %379 = @func_3795(%375, %376, %377, %378) /* ty=(Tensor[(11, 16, 2), int64], Tensor[(11, 5, 2), float32], Tensor[(110), float64], Tensor[(784), float64], Tensor[(320), float32], Tensor[(198, 2), uint16], Tensor[(225), int8], Tensor[(20, 180), int8], Tensor[(375), float64], Tensor[(7, 11, 12), uint16], Tensor[(924), uint16]) */;
    %380 = mod(%361, %362) /* ty=Tensor[(11, 13, 2), float64] */;
    %381 = divide(%363, %364) /* ty=Tensor[(11, 13, 2), float32] */;
    %382 = %379.1;
    (%380, %381, %371, meta[relay.Constant][25] /* ty=Tensor[(2, 72), float32] */, %var_4285, %382, %var_4289, %var_4290, %var_4291)
  };
  %383(%var_4295, %var_4296, %var_4297, %var_4298, %var_4299, %var_4300) /* ty=(Tensor[(11, 13, 2), float64], Tensor[(11, 13, 2), float32], Tensor[(16, 2, 10), float64], Tensor[(2, 72), float32], Tensor[(320), float32], Tensor[(11, 5, 2), float32], Tensor[(784), float64], Tensor[(225), int8], Tensor[(3600), int8]) */
}

def @func_3945() -> Tensor[(11, ?, 2), float64] {
  %385 = fn () -> Tensor[(11, ?, 2), float64] {
    %384 = @func_3254() /* ty=(Tensor[(11, ?, 2), float64], Tensor[(300), float32], Tensor[(96, 1), float32]) */;
    %384.0
  };
  %385() /* ty=Tensor[(11, ?, 2), float64] */
}

def @func_3842(%var_3824: Tensor[(300), float32]) -> (Tensor[(1536), float32], Tensor[(5, 6, 10), float32], Tensor[(300), float32], Tensor[(11, 96, 2), float32]) {
  %386 = cast(%var_3824, dtype="float32") /* ty=Tensor[(300), float32] */;
  %387 = cast(%var_3824, dtype="float32") /* ty=Tensor[(300), float32] */;
  %388 = reshape(%386, newshape=[5, 6, 10]) /* ty=Tensor[(5, 6, 10), float32] */;
  %389 = reshape(%387, newshape=[5, 6, 10]) /* ty=Tensor[(5, 6, 10), float32] */;
  %390 = @func_233(%388, %389) /* ty=(Tensor[(5, 6, 10), float32], Tensor[(16, 2, 10), float64], Tensor[(320), float32]) */;
  %391 = @func_2433() /* ty=Tensor[(11, ?, 2), float64] */;
  %392 = cast(meta[relay.Constant][26] /* ty=Tensor[(1536), float32] */, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %393 = reshape(%392, newshape=[96, 16]) /* ty=Tensor[(96, 16), float32] */;
  %394 = @func_3657(%393) /* ty=(Tensor[(96, 1), float64], Tensor[(11, ?, 2), float64], Tensor[(96, 16), float64], Tensor[(96, 16), float64]) */;
  %395 = %394.0;
  %396 = cast(%391, dtype="uint64") /* ty=Tensor[(11, ?, 2), uint64] */;
  %397 = cast(%395, dtype="uint64") /* ty=Tensor[(96, 1), uint64] */;
  %398 = multiply(%396, %397) /* ty=Tensor[(11, 96, 2), uint64] */;
  %399 = cast(%398, dtype="float32") /* ty=Tensor[(11, 96, 2), float32] */;
  %400 = %390.0;
  %401 = sqrt(%399) /* ty=Tensor[(11, 96, 2), float32] */;
  (meta[relay.Constant][26] /* ty=Tensor[(1536), float32] */, %400, %var_3824, %401)
}

def @func_2433() -> Tensor[(11, ?, 2), float64] {
  @func_2388() /* ty=Tensor[(11, ?, 2), float64] */
}

def @func_1631(%var_1630: Tensor[(2, 6, 8), float32]) -> (Tensor[(2, 6, 8), float32], Tensor[(2, 6, 8), float64]) {
  %406 = fn (%var_1618: Tensor[(2, 6, 8), float32]) -> (Tensor[(2, 6, 8), float32], Tensor[(2, 6, 8), float64]) {
    %402 = cast(%var_1618, dtype="float32") /* ty=Tensor[(2, 6, 8), float32] */;
    %403 = cast(%var_1618, dtype="float64") /* ty=Tensor[(2, 6, 8), float64] */;
    %404 = log(%402) /* ty=Tensor[(2, 6, 8), float32] */;
    %405 = atanh(%403) /* ty=Tensor[(2, 6, 8), float64] */;
    (%404, %405)
  };
  %406(%var_1630) /* ty=(Tensor[(2, 6, 8), float32], Tensor[(2, 6, 8), float64]) */
}

def @func_3254() -> (Tensor[(11, ?, 2), float64], Tensor[(300), float32], Tensor[(96, 1), float32]) {
  %407 = @func_2730() /* ty=(Tensor[(11, ?, 2), float64],) */;
  %408 = %407.0;
  %409 = cast(%408, dtype="float64") /* ty=Tensor[(11, ?, 2), float64] */;
  %410 = cast(meta[relay.Constant][27] /* ty=Tensor[(96, 1), float32] */, dtype="float32") /* ty=Tensor[(96, 1), float32] */;
  %411 = reshape(%409, newshape=[11, 1, 2]) /* ty=Tensor[(11, 1, 2), float64] */;
  %412 = reshape(%410, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %413 = @func_2063(%411, %412) /* ty=(Tensor[(11, ?, 2), uint64], Tensor[(300), float32], Tensor[(96), float32], Tensor[(6, 66), uint64], Tensor[(11, ?, 2), float64], Tensor[(6, 66), int64]) */;
  %414 = %413.1;
  (%408, %414, meta[relay.Constant][27] /* ty=Tensor[(96, 1), float32] */)
}

def @func_407(%var_405: Tensor[(5, 7, 3), float32], %var_406: Tensor[(35, 6), uint64]) -> (Tensor[(5, 7, 3), float32], Tensor[(320), float32], Tensor[(35, 6), uint64], Tensor[(4, 80), float32], Tensor[(5, 7, 3), float32]) {
  @func_403(%var_405, %var_406) /* ty=(Tensor[(5, 7, 3), float32], Tensor[(320), float32], Tensor[(35, 6), uint64], Tensor[(4, 80), float32], Tensor[(5, 7, 3), float32]) */
}

def @func_2067(%var_2065: Tensor[(11, 1, 2), float64], %var_2066: Tensor[(96), float32]) -> (Tensor[(11, ?, 2), uint64], Tensor[(300), float32], Tensor[(96), float32], Tensor[(6, 66), uint64], Tensor[(11, ?, 2), float64], Tensor[(6, 66), int64]) {
  @func_2063(%var_2065, %var_2066) /* ty=(Tensor[(11, ?, 2), uint64], Tensor[(300), float32], Tensor[(96), float32], Tensor[(6, 66), uint64], Tensor[(11, ?, 2), float64], Tensor[(6, 66), int64]) */
}

def @func_2278(%var_2277: Tensor[(300), float32]) -> (Tensor[(5, 6, 10), float32], Tensor[(300), float32], Tensor[(11, ?, 2), float64], Tensor[(11, ?, 2), bool]) {
  %432 = fn (%var_2256: Tensor[(300), float32]) -> (Tensor[(5, 6, 10), float32], Tensor[(300), float32], Tensor[(11, ?, 2), float64], Tensor[(11, ?, 2), bool]) {
    %415 = cast(%var_2256, dtype="float32") /* ty=Tensor[(300), float32] */;
    %416 = cast(%var_2256, dtype="float32") /* ty=Tensor[(300), float32] */;
    %417 = reshape(%415, newshape=[5, 6, 10]) /* ty=Tensor[(5, 6, 10), float32] */;
    %418 = reshape(%416, newshape=[5, 6, 10]) /* ty=Tensor[(5, 6, 10), float32] */;
    %419 = @func_233(%417, %418) /* ty=(Tensor[(5, 6, 10), float32], Tensor[(16, 2, 10), float64], Tensor[(320), float32]) */;
    %420 = @func_1956() /* ty=(Tensor[(11, ?, 2), float64],) */;
    %421 = %420.0;
    %422 = cast(%421, dtype="float64") /* ty=Tensor[(11, ?, 2), float64] */;
    %423 = cast(%421, dtype="float64") /* ty=Tensor[(11, ?, 2), float64] */;
    %424 = rsqrt(%423) /* ty=Tensor[(11, ?, 2), float64] */;
    %425 = cast(%424, dtype="bool") /* ty=Tensor[(11, ?, 2), bool] */;
    %426 = shape_of(%421, dtype="int32") /* ty=Tensor[(3), int32] */;
    %427 = cast(%421, dtype="bool") /* ty=Tensor[(11, ?, 2), bool] */;
    %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %429 = %419.0;
    %430 = atanh(%422) /* ty=Tensor[(11, ?, 2), float64] */;
    %431 = not_equal(%427, %428) /* ty=Tensor[(11, ?, 2), bool] */;
    (%429, %var_2256, %430, %431)
  };
  %432(%var_2277) /* ty=(Tensor[(5, 6, 10), float32], Tensor[(300), float32], Tensor[(11, ?, 2), float64], Tensor[(11, ?, 2), bool]) */
}

def @func_2786(%var_2784: Tensor[(300), float32]) -> (Tensor[(11, ?, 2), float64], Tensor[(11, ?, 2), float64], Tensor[(300), float32]) {
  %433 = @func_2433() /* ty=Tensor[(11, ?, 2), float64] */;
  %434 = cast(%433, dtype="float64") /* ty=Tensor[(11, ?, 2), float64] */;
  %435 = cast(%var_2784, dtype="float32") /* ty=Tensor[(300), float32] */;
  %436 = reshape(%435, newshape=[300]) /* ty=Tensor[(300), float32] */;
  %437 = @func_2276(%436) /* ty=(Tensor[(5, 6, 10), float32], Tensor[(300), float32], Tensor[(11, ?, 2), float64], Tensor[(11, ?, 2), bool]) */;
  %438 = tan(%434) /* ty=Tensor[(11, ?, 2), float64] */;
  %439 = %437.2;
  (%438, %439, %var_2784)
}

def @func_939(%var_938: Tensor[(5, 3, 3), int16]) -> Tensor[(5, 3, 3), int16] {
  %444 = fn (%var_931: Tensor[(5, 3, 3), int16]) -> Tensor[(5, 3, 3), int16] {
    %440 = cast(meta[relay.Constant][28] /* ty=Tensor[(5, 3, 3), int16] */, dtype="int16") /* ty=Tensor[(5, 3, 3), int16] */;
    %441 = shape_of(%var_931, dtype="int32") /* ty=Tensor[(3), int32] */;
    %442 = cast(%var_931, dtype="int16") /* ty=Tensor[(5, 3, 3), int16] */;
    %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    bitwise_xor(%442, %443) /* ty=Tensor[(5, 3, 3), int16] */
  };
  %444(%var_938) /* ty=Tensor[(5, 3, 3), int16] */
}

def @func_2134(%var_2131: Tensor[(1, 15, 15), int8], %var_2132: Tensor[(16, 15, 15), int8], %var_2133: Tensor[(375), float64]) -> (Tensor[(16, 15, 15), int8], Tensor[(15, 5, 5), int8], Tensor[(375), float64], Tensor[(210), uint64]) {
  %454 = fn (%var_2119: Tensor[(1, 15, 15), int8], %var_2120: Tensor[(16, 15, 15), int8], %var_2126: Tensor[(375), float64]) -> (Tensor[(16, 15, 15), int8], Tensor[(15, 5, 5), int8], Tensor[(375), float64], Tensor[(210), uint64]) {
    %445 = cast(%var_2119, dtype="int8") /* ty=Tensor[(1, 15, 15), int8] */;
    %446 = cast(%var_2120, dtype="int8") /* ty=Tensor[(16, 15, 15), int8] */;
    %447 = cast(%var_2126, dtype="float64") /* ty=Tensor[(375), float64] */;
    %448 = cast(meta[relay.Constant][29] /* ty=Tensor[(210), uint64] */, dtype="uint64") /* ty=Tensor[(210), uint64] */;
    %449 = reshape(%447, newshape=[15, 5, 5]) /* ty=Tensor[(15, 5, 5), float64] */;
    %450 = reshape(%448, newshape=[210, 1]) /* ty=Tensor[(210, 1), uint64] */;
    %451 = @func_855(%449, %450) /* ty=(Tensor[(15, 5, 5), int8], Tensor[(144), float32], Tensor[(210, 1), uint64], Tensor[(320), float32]) */;
    %452 = right_shift(%445, %446) /* ty=Tensor[(16, 15, 15), int8] */;
    %453 = %451.0;
    (%452, %453, %var_2126, meta[relay.Constant][29] /* ty=Tensor[(210), uint64] */)
  };
  %454(%var_2131, %var_2132, %var_2133) /* ty=(Tensor[(16, 15, 15), int8], Tensor[(15, 5, 5), int8], Tensor[(375), float64], Tensor[(210), uint64]) */
}

def @func_2732() -> (Tensor[(11, ?, 2), float64],) {
  @func_2730() /* ty=(Tensor[(11, ?, 2), float64],) */
}

def @func_4540() -> Tensor[(11, ?, 2), float64] {
  %460 = fn () -> Tensor[(11, ?, 2), float64] {
    %455 = @func_2730() /* ty=(Tensor[(11, ?, 2), float64],) */;
    %456 = %455.0;
    %457 = cast(%456, dtype="float64") /* ty=Tensor[(11, ?, 2), float64] */;
    %458 = acosh(%457) /* ty=Tensor[(11, ?, 2), float64] */;
    %459 = cast(%458, dtype="float64") /* ty=Tensor[(11, ?, 2), float64] */;
    erf(%459) /* ty=Tensor[(11, ?, 2), float64] */
  };
  %460() /* ty=Tensor[(11, ?, 2), float64] */
}

def @main(%var_4692: Tensor[(352), float64]) -> (Tensor[(11, ?, 2), float64], Tensor[(784), float64], Tensor[(784), float64], Tensor[(220), float64], Tensor[(352), float32], Tensor[(11, ?, 2), float64], Tensor[(96, 1), float32]) {
  %461 = cast(%var_4692, dtype="float64") /* ty=Tensor[(352), float64] */;
  %462 = cast(meta[relay.Constant][30] /* ty=Tensor[(784), float64] */, dtype="float64") /* ty=Tensor[(784), float64] */;
  %463 = reshape(%461, newshape=[352]) /* ty=Tensor[(352), float64] */;
  %464 = reshape(%462, newshape=[784]) /* ty=Tensor[(784), float64] */;
  %465 = @func_4452(%463, %464) /* ty=(Tensor[(11, ?, 2), float64], Tensor[(220), float64], Tensor[(352), float64], Tensor[(784), float64], Tensor[(784), float32], Tensor[(300), float32], Tensor[(11, 96, 2), float32]) */;
  %466 = cast(meta[relay.Constant][31] /* ty=Tensor[(220), float64] */, dtype="float64") /* ty=Tensor[(220), float64] */;
  %467 = cast(%var_4692, dtype="float64") /* ty=Tensor[(352), float64] */;
  %468 = cast(meta[relay.Constant][30] /* ty=Tensor[(784), float64] */, dtype="float64") /* ty=Tensor[(784), float64] */;
  %469 = reshape(%466, newshape=[220]) /* ty=Tensor[(220), float64] */;
  %470 = reshape(%467, newshape=[11, 16, 2]) /* ty=Tensor[(11, 16, 2), float64] */;
  %471 = reshape(%468, newshape=[784]) /* ty=Tensor[(784), float64] */;
  %472 = @func_3717(%469, %470, %471) /* ty=(Tensor[(220), float32], Tensor[(11, 16, 2), int8], Tensor[(784), int8], Tensor[(784), float64]) */;
  %473 = cast(%var_4692, dtype="float32") /* ty=Tensor[(352), float32] */;
  %474 = @func_3256() /* ty=(Tensor[(11, ?, 2), float64], Tensor[(300), float32], Tensor[(96, 1), float32]) */;
  %475 = %474.2;
  %476 = cast(%475, dtype="float32") /* ty=Tensor[(96, 1), float32] */;
  %477 = %465.0;
  %478 = %472.3;
  %479 = sinh(%473) /* ty=Tensor[(352), float32] */;
  %480 = @func_3944() /* ty=Tensor[(11, ?, 2), float64] */;
  %481 = log(%476) /* ty=Tensor[(96, 1), float32] */;
  (%477, meta[relay.Constant][30] /* ty=Tensor[(784), float64] */, %478, meta[relay.Constant][31] /* ty=Tensor[(220), float64] */, %479, %480, %481)
}

def @func_1789() -> Tensor[(11, ?, 2), float64] {
  %482 = cast(meta[relay.Constant][32] /* ty=Tensor[(11, 1, 2), float64] */, dtype="float64") /* ty=Tensor[(11, 1, 2), float64] */;
  %483 = asin(%482) /* ty=Tensor[(11, 1, 2), float64] */;
  %484 = cast(%483, dtype="float64") /* ty=Tensor[(11, 1, 2), float64] */;
  %485 = asinh(%484) /* ty=Tensor[(11, 1, 2), float64] */;
  %486 = cast(meta[relay.Constant][32] /* ty=Tensor[(11, 1, 2), float64] */, dtype="float64") /* ty=Tensor[(11, 1, 2), float64] */;
  %487 = shape_of(%485, dtype="int32") /* ty=Tensor[(3), int32] */;
  %488 = cast(%485, dtype="float64") /* ty=Tensor[(11, 1, 2), float64] */;
  %489 = dyn.reshape(%486, %487, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%488, %489) /* ty=Tensor[(11, ?, 2), float64] */
}

def @func_3147(%var_3144: Tensor[(6, 10, 11), float32], %var_3145: Tensor[(6, 10, 11), float32], %var_3146: Tensor[(96), float32]) -> (Tensor[(6, 10, 11), float32], Tensor[(2, 6, 8), float32], Tensor[(96), float32], Tensor[(6, 10, 11), float64], Tensor[(300), float32], Tensor[(50, 6), float32], Tensor[(2, 6, 8), float64]) {
  %509 = fn (%var_3105: Tensor[(6, 10, 11), float32], %var_3106: Tensor[(6, 10, 11), float32], %var_3115: Tensor[(96), float32]) -> (Tensor[(6, 10, 11), float32], Tensor[(2, 6, 8), float32], Tensor[(96), float32], Tensor[(6, 10, 11), float64], Tensor[(300), float32], Tensor[(50, 6), float32], Tensor[(2, 6, 8), float64]) {
    %490 = cast(%var_3106, dtype="float32") /* ty=Tensor[(6, 10, 11), float32] */;
    %491 = shape_of(%var_3105, dtype="int32") /* ty=Tensor[(3), int32] */;
    %492 = cast(%var_3105, dtype="float32") /* ty=Tensor[(6, 10, 11), float32] */;
    %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %494 = cast(%var_3115, dtype="float32") /* ty=Tensor[(96), float32] */;
    %495 = reshape(%494, newshape=[2, 6, 8]) /* ty=Tensor[(2, 6, 8), float32] */;
    %496 = @func_1629(%495) /* ty=(Tensor[(2, 6, 8), float32], Tensor[(2, 6, 8), float64]) */;
    %497 = cast(%var_3106, dtype="float64") /* ty=Tensor[(6, 10, 11), float64] */;
    %498 = cast(meta[relay.Constant][33] /* ty=Tensor[(50, 6), float32] */, dtype="float32") /* ty=Tensor[(50, 6), float32] */;
    %499 = reshape(%498, newshape=[300]) /* ty=Tensor[(300), float32] */;
    %500 = @func_2276(%499) /* ty=(Tensor[(5, 6, 10), float32], Tensor[(300), float32], Tensor[(11, ?, 2), float64], Tensor[(11, ?, 2), bool]) */;
    %501 = cast(%var_3115, dtype="float32") /* ty=Tensor[(96), float32] */;
    %502 = reshape(%501, newshape=[2, 6, 8]) /* ty=Tensor[(2, 6, 8), float32] */;
    %503 = @func_1629(%502) /* ty=(Tensor[(2, 6, 8), float32], Tensor[(2, 6, 8), float64]) */;
    %504 = minimum(%492, %493) /* ty=Tensor[(6, 10, 11), float32] */;
    %505 = %496.0;
    %506 = asin(%497) /* ty=Tensor[(6, 10, 11), float64] */;
    %507 = %500.1;
    %508 = %503.1;
    (%504, %505, %var_3115, %506, %507, meta[relay.Constant][33] /* ty=Tensor[(50, 6), float32] */, %508)
  };
  %509(%var_3144, %var_3145, %var_3146) /* ty=(Tensor[(6, 10, 11), float32], Tensor[(2, 6, 8), float32], Tensor[(96), float32], Tensor[(6, 10, 11), float64], Tensor[(300), float32], Tensor[(50, 6), float32], Tensor[(2, 6, 8), float64]) */
}

def @func_3471(%var_3345: Tensor[(11, 5, 2), float64], %var_3352: Tensor[(11, 5, 2), float64], %var_3365: Tensor[(784), float64], %var_3387: Tensor[(320), float32], %var_3402: Tensor[(396), uint16], %var_3428: Tensor[(225), int8], %var_3429: Tensor[(3600), int8], %var_3430: Tensor[(375), float64]) -> (Tensor[(11, 5, 2), float32], Tensor[(11, 5, 2), bool], Tensor[(784), float64], Tensor[(6, 5, 7), float64], Tensor[(210), uint64], Tensor[(320), float32], Tensor[(16, 2, 10), float64], Tensor[(96), float32], Tensor[(396), uint16], Tensor[(396), uint16], Tensor[(16, 2, 10), float64], Tensor[(1, 144), float32], Tensor[(11, ?, 2), float64], Tensor[(210), uint64], Tensor[(225), int8], Tensor[(3600), int8], Tensor[(375), float64], Tensor[(11, ?, 2), float64], Tensor[(11, ?, 2), float64], Tensor[(5, 6, 10), uint16]) {
  %510 = @func_3254() /* ty=(Tensor[(11, ?, 2), float64], Tensor[(300), float32], Tensor[(96, 1), float32]) */;
  %511 = %510.0;
  %512 = cast(%511, dtype="float32") /* ty=Tensor[(11, ?, 2), float32] */;
  %513 = cast(%var_3345, dtype="float32") /* ty=Tensor[(11, 5, 2), float32] */;
  %514 = cast(%var_3352, dtype="bool") /* ty=Tensor[(11, 5, 2), bool] */;
  %515 = shape_of(%var_3345, dtype="int32") /* ty=Tensor[(3), int32] */;
  %516 = cast(%var_3345, dtype="bool") /* ty=Tensor[(11, 5, 2), bool] */;
  %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %518 = cast(meta[relay.Constant][34] /* ty=Tensor[(210), uint64] */, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %519 = cast(%var_3387, dtype="float32") /* ty=Tensor[(320), float32] */;
  %520 = reshape(%518, newshape=[6, 5, 7]) /* ty=Tensor[(6, 5, 7), uint64] */;
  %521 = reshape(%519, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %522 = @func_202(%520, %521) /* ty=(Tensor[(6, 5, 7), float64], Tensor[(16, 2, 10), float64], Tensor[(144), float32], Tensor[(320), float32], Tensor[(6, 5, 7), int16]) */;
  %523 = cast(meta[relay.Constant][35] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %524 = reshape(%523, newshape=[2, 48]) /* ty=Tensor[(2, 48), float32] */;
  %525 = @func_1897(%524) /* ty=(Tensor[(11, ?, 2), float64], Tensor[(16, 2, 10), float64], Tensor[(784), float64], Tensor[(300), float32], Tensor[(2, 6, 8), float64], Tensor[(2, 48), float32]) */;
  %526 = cast(%var_3365, dtype="float64") /* ty=Tensor[(784), float64] */;
  %527 = reshape(%526, newshape=[784]) /* ty=Tensor[(784), float64] */;
  %528 = @func_2848(%527) /* ty=(Tensor[(11, ?, 2), float64], Tensor[(300), float32], Tensor[(784), int8], Tensor[(5, 6, 10), float32], Tensor[(396), uint16], Tensor[(396), uint16], Tensor[(784), float32], Tensor[(784), bool]) */;
  %529 = %528.3;
  %530 = cast(%529, dtype="float32") /* ty=Tensor[(5, 6, 10), float32] */;
  %531 = %525.1;
  %532 = cast(%531, dtype="float64") /* ty=Tensor[(16, 2, 10), float64] */;
  %533 = cast(%var_3402, dtype="uint16") /* ty=Tensor[(396), uint16] */;
  %534 = reshape(%530, newshape=[50, 6]) /* ty=Tensor[(50, 6), float32] */;
  %535 = reshape(%532, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float64] */;
  %536 = reshape(%533, newshape=[396]) /* ty=Tensor[(396), uint16] */;
  %537 = @func_2714(%534, %535, %536) /* ty=(Tensor[(11, ?, 2), float64], Tensor[(50, 6), float32], Tensor[(16, 2, 10), int32], Tensor[(16, 2, 10), float64], Tensor[(396), uint16], Tensor[(396), uint16]) */;
  %538 = cast(meta[relay.Constant][36] /* ty=Tensor[(1, 144), float32] */, dtype="float32") /* ty=Tensor[(1, 144), float32] */;
  %539 = cast(%var_3387, dtype="float32") /* ty=Tensor[(320), float32] */;
  %540 = reshape(%538, newshape=[16, 9, 1]) /* ty=Tensor[(16, 9, 1), float32] */;
  %541 = reshape(%539, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %542 = @func_138(%540, %541) /* ty=(Tensor[(16, 9, 1), float32], Tensor[(16, 2, 10), float64], Tensor[(320), float32], Tensor[(16, 2, 10), float64], Tensor[(16, 2, 10), float64], Tensor[(16, 9, 1), int16]) */;
  %543 = cast(%529, dtype="float32") /* ty=Tensor[(5, 6, 10), float32] */;
  %544 = reshape(%543, newshape=[300]) /* ty=Tensor[(300), float32] */;
  %545 = @func_2276(%544) /* ty=(Tensor[(5, 6, 10), float32], Tensor[(300), float32], Tensor[(11, ?, 2), float64], Tensor[(11, ?, 2), bool]) */;
  %546 = cast(%var_3428, dtype="int8") /* ty=Tensor[(225), int8] */;
  %547 = cast(%var_3429, dtype="int8") /* ty=Tensor[(3600), int8] */;
  %548 = cast(%var_3430, dtype="float64") /* ty=Tensor[(375), float64] */;
  %549 = reshape(%546, newshape=[1, 15, 15]) /* ty=Tensor[(1, 15, 15), int8] */;
  %550 = reshape(%547, newshape=[16, 15, 15]) /* ty=Tensor[(16, 15, 15), int8] */;
  %551 = reshape(%548, newshape=[375]) /* ty=Tensor[(375), float64] */;
  %552 = @func_2130(%549, %550, %551) /* ty=(Tensor[(16, 15, 15), int8], Tensor[(15, 5, 5), int8], Tensor[(375), float64], Tensor[(210), uint64]) */;
  %553 = cast(%var_3402, dtype="uint16") /* ty=Tensor[(396), uint16] */;
  %554 = reshape(%553, newshape=[396]) /* ty=Tensor[(396), uint16] */;
  %555 = @func_1840(%554) /* ty=(Tensor[(11, ?, 2), float64], Tensor[(11, 9, 4), bool], Tensor[(396), uint16]) */;
  %556 = @func_3254() /* ty=(Tensor[(11, ?, 2), float64], Tensor[(300), float32], Tensor[(96, 1), float32]) */;
  %557 = cast(%529, dtype="float32") /* ty=Tensor[(5, 6, 10), float32] */;
  %558 = atan(%557) /* ty=Tensor[(5, 6, 10), float32] */;
  %559 = cast(%529, dtype="uint8") /* ty=Tensor[(5, 6, 10), uint8] */;
  %560 = shape_of(%558, dtype="int32") /* ty=Tensor[(3), int32] */;
  %561 = cast(%558, dtype="uint8") /* ty=Tensor[(5, 6, 10), uint8] */;
  %562 = dyn.reshape(%559, %560, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %563 = left_shift(%561, %562) /* ty=Tensor[(5, 6, 10), uint8] */;
  %564 = cast(%558, dtype="uint16") /* ty=Tensor[(5, 6, 10), uint16] */;
  %565 = shape_of(%563, dtype="int32") /* ty=Tensor[(3), int32] */;
  %566 = cast(%563, dtype="uint16") /* ty=Tensor[(5, 6, 10), uint16] */;
  %567 = dyn.reshape(%564, %565, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %568 = divide(%512, %513) /* ty=Tensor[(11, 5, 2), float32] */;
  %569 = greater(%516, %517) /* ty=Tensor[(11, 5, 2), bool] */;
  %570 = %522.0;
  %571 = %537.4;
  %572 = %542.4;
  %573 = %545.2;
  %574 = %552.3;
  %575 = %555.0;
  %576 = %556.0;
  %577 = logical_xor(%566, %567) /* ty=Tensor[(5, 6, 10), uint16] */;
  (%568, %569, %var_3365, %570, meta[relay.Constant][34] /* ty=Tensor[(210), uint64] */, %var_3387, %531, meta[relay.Constant][35] /* ty=Tensor[(96), float32] */, %571, %var_3402, %572, meta[relay.Constant][36] /* ty=Tensor[(1, 144), float32] */, %573, %574, %var_3428, %var_3429, %var_3430, %575, %576, %577)
}

def @func_855(%var_828: Tensor[(15, 5, 5), float64], %var_843: Tensor[(210, 1), uint64]) -> (Tensor[(15, 5, 5), int8], Tensor[(144), float32], Tensor[(210, 1), uint64], Tensor[(320), float32]) {
  %578 = cast(meta[relay.Constant][37] /* ty=Tensor[(15, 5, 5), float64] */, dtype="float64") /* ty=Tensor[(15, 5, 5), float64] */;
  %579 = exp(%578) /* ty=Tensor[(15, 5, 5), float64] */;
  %580 = cast(%var_828, dtype="int8") /* ty=Tensor[(15, 5, 5), int8] */;
  %581 = shape_of(%579, dtype="int32") /* ty=Tensor[(3), int32] */;
  %582 = cast(%579, dtype="int8") /* ty=Tensor[(15, 5, 5), int8] */;
  %583 = dyn.reshape(%580, %581, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %584 = cast(%var_843, dtype="uint64") /* ty=Tensor[(210, 1), uint64] */;
  %585 = cast(meta[relay.Constant][38] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %586 = reshape(%584, newshape=[6, 5, 7]) /* ty=Tensor[(6, 5, 7), uint64] */;
  %587 = reshape(%585, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %588 = @func_202(%586, %587) /* ty=(Tensor[(6, 5, 7), float64], Tensor[(16, 2, 10), float64], Tensor[(144), float32], Tensor[(320), float32], Tensor[(6, 5, 7), int16]) */;
  %589 = multiply(%582, %583) /* ty=Tensor[(15, 5, 5), int8] */;
  %590 = %588.2;
  (%589, %590, %var_843, meta[relay.Constant][38] /* ty=Tensor[(320), float32] */)
}

def @func_2996(%var_2964: Tensor[(5, 11, 11), float32], %var_2967: Tensor[(5, 11, 11), float32], %var_2988: Tensor[(5, 11, 11), float32]) -> (Tensor[(5, 11, 11), int8], Tensor[(5, 11, 11), float32]) {
  %591 = cast(%var_2988, dtype="int8") /* ty=Tensor[(5, 11, 11), int8] */;
  %592 = shape_of(%var_2964, dtype="int32") /* ty=Tensor[(3), int32] */;
  %593 = cast(%var_2964, dtype="int8") /* ty=Tensor[(5, 11, 11), int8] */;
  %594 = dyn.reshape(%591, %592, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %595 = cast(%var_2964, dtype="float32") /* ty=Tensor[(5, 11, 11), float32] */;
  %596 = sinh(%595) /* ty=Tensor[(5, 11, 11), float32] */;
  %597 = cast(%var_2967, dtype="float32") /* ty=Tensor[(5, 11, 11), float32] */;
  %598 = shape_of(%596, dtype="int32") /* ty=Tensor[(3), int32] */;
  %599 = cast(%596, dtype="float32") /* ty=Tensor[(5, 11, 11), float32] */;
  %600 = dyn.reshape(%597, %598, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %601 = power(%599, %600) /* ty=Tensor[(5, 11, 11), float32] */;
  %602 = cast(%var_2967, dtype="bool") /* ty=Tensor[(5, 11, 11), bool] */;
  %603 = shape_of(%601, dtype="int32") /* ty=Tensor[(3), int32] */;
  %604 = cast(%601, dtype="bool") /* ty=Tensor[(5, 11, 11), bool] */;
  %605 = dyn.reshape(%602, %603, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %606 = logical_or(%604, %605) /* ty=Tensor[(5, 11, 11), bool] */;
  %607 = cast(%601, dtype="float32") /* ty=Tensor[(5, 11, 11), float32] */;
  %608 = shape_of(%606, dtype="int32") /* ty=Tensor[(3), int32] */;
  %609 = cast(%606, dtype="float32") /* ty=Tensor[(5, 11, 11), float32] */;
  %610 = dyn.reshape(%607, %608, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %611 = logical_xor(%593, %594) /* ty=Tensor[(5, 11, 11), int8] */;
  %612 = divide(%609, %610) /* ty=Tensor[(5, 11, 11), float32] */;
  (%611, %612)
}

def @func_1713(%var_1711: Tensor[(11, 9, 4), uint16], %var_1712: Tensor[(11, 9, 4), uint16]) -> (Tensor[(11, 9, 4), bool],) {
  %623 = fn (%var_1685: Tensor[(11, 9, 4), uint16], %var_1686: Tensor[(11, 9, 4), uint16]) -> (Tensor[(11, 9, 4), bool],) {
    %613 = cast(%var_1686, dtype="uint16") /* ty=Tensor[(11, 9, 4), uint16] */;
    %614 = shape_of(%var_1685, dtype="int32") /* ty=Tensor[(3), int32] */;
    %615 = cast(%var_1685, dtype="uint16") /* ty=Tensor[(11, 9, 4), uint16] */;
    %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %617 = bitwise_or(%615, %616) /* ty=Tensor[(11, 9, 4), uint16] */;
    %618 = cast(%var_1686, dtype="bool") /* ty=Tensor[(11, 9, 4), bool] */;
    %619 = shape_of(%617, dtype="int32") /* ty=Tensor[(3), int32] */;
    %620 = cast(%617, dtype="bool") /* ty=Tensor[(11, 9, 4), bool] */;
    %621 = dyn.reshape(%618, %619, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %622 = less_equal(%620, %621) /* ty=Tensor[(11, 9, 4), bool] */;
    (%622,)
  };
  %623(%var_1711, %var_1712) /* ty=(Tensor[(11, 9, 4), bool],) */
}

def @func_2190() -> (Tensor[(11, ?, 2), uint8],) {
  %632 = fn () -> (Tensor[(11, ?, 2), uint8],) {
    %624 = @func_1789() /* ty=Tensor[(11, ?, 2), float64] */;
    %625 = cast(%624, dtype="float64") /* ty=Tensor[(11, ?, 2), float64] */;
    %626 = acos(%625) /* ty=Tensor[(11, ?, 2), float64] */;
    %627 = cast(%624, dtype="uint8") /* ty=Tensor[(11, ?, 2), uint8] */;
    %628 = shape_of(%626, dtype="int32") /* ty=Tensor[(3), int32] */;
    %629 = cast(%626, dtype="uint8") /* ty=Tensor[(11, ?, 2), uint8] */;
    %630 = dyn.reshape(%627, %628, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %631 = maximum(%629, %630) /* ty=Tensor[(11, ?, 2), uint8] */;
    (%631,)
  };
  %632() /* ty=(Tensor[(11, ?, 2), uint8],) */
}

def @func_3061() -> (Tensor[(11, ?, 2), float64],) {
  %634 = fn () -> (Tensor[(11, ?, 2), float64],) {
    %633 = @func_2433() /* ty=Tensor[(11, ?, 2), float64] */;
    (%633,)
  };
  %634() /* ty=(Tensor[(11, ?, 2), float64],) */
}

def @func_4184(%var_4107: Tensor[(16, 4, 7), int32], %var_4108: Tensor[(16, 4, 7), int32], %var_4114: Tensor[(4, 88), float64], %var_4122: Tensor[(55, 4), float64], %var_4143: Tensor[(55, 4), float64], %var_4177: Tensor[(154), float64]) -> (Tensor[(16, 4, 7), int32], Tensor[(4, 88), float64], Tensor[(784), float64], Tensor[(55, 4), int16], Tensor[(11, ?, 2), float64], Tensor[(45), int16], Tensor[(55, 4), bool], Tensor[(784), float32], Tensor[(5, 3, 3), float32], Tensor[(11, 1, 14), float64], Tensor[(154), float64]) {
  %635 = cast(%var_4108, dtype="int32") /* ty=Tensor[(16, 4, 7), int32] */;
  %636 = shape_of(%var_4107, dtype="int32") /* ty=Tensor[(3), int32] */;
  %637 = cast(%var_4107, dtype="int32") /* ty=Tensor[(16, 4, 7), int32] */;
  %638 = dyn.reshape(%635, %636, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %639 = cast(%var_4122, dtype="int16") /* ty=Tensor[(55, 4), int16] */;
  %640 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(55, 4), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %641 = cast(meta[relay.Constant][40] /* ty=Tensor[(55, 4), float64] */, dtype="int16") /* ty=Tensor[(55, 4), int16] */;
  %642 = dyn.reshape(%639, %640, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %643 = @func_2730() /* ty=(Tensor[(11, ?, 2), float64],) */;
  %644 = cast(%var_4143, dtype="bool") /* ty=Tensor[(55, 4), bool] */;
  %645 = shape_of(%var_4122, dtype="int32") /* ty=Tensor[(2), int32] */;
  %646 = cast(%var_4122, dtype="bool") /* ty=Tensor[(55, 4), bool] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %648 = cast(meta[relay.Constant][40] /* ty=Tensor[(55, 4), float64] */, dtype="float64") /* ty=Tensor[(55, 4), float64] */;
  %649 = cast(%var_4114, dtype="float64") /* ty=Tensor[(4, 88), float64] */;
  %650 = cast(meta[relay.Constant][39] /* ty=Tensor[(784), float64] */, dtype="float64") /* ty=Tensor[(784), float64] */;
  %651 = reshape(%648, newshape=[220]) /* ty=Tensor[(220), float64] */;
  %652 = reshape(%649, newshape=[11, 16, 2]) /* ty=Tensor[(11, 16, 2), float64] */;
  %653 = reshape(%650, newshape=[784]) /* ty=Tensor[(784), float64] */;
  %654 = @func_3712(%651, %652, %653) /* ty=(Tensor[(220), float32], Tensor[(11, 16, 2), int8], Tensor[(784), int8], Tensor[(784), float64]) */;
  %655 = %654.2;
  %656 = cast(%655, dtype="float32") /* ty=Tensor[(784), float32] */;
  %657 = cast(meta[relay.Constant][41] /* ty=Tensor[(45), int16] */, dtype="int16") /* ty=Tensor[(45), int16] */;
  %658 = reshape(%657, newshape=[5, 3, 3]) /* ty=Tensor[(5, 3, 3), int16] */;
  %659 = @func_937(%658) /* ty=Tensor[(5, 3, 3), int16] */;
  %660 = cast(%659, dtype="float32") /* ty=Tensor[(5, 3, 3), float32] */;
  %661 = cast(%var_4177, dtype="float64") /* ty=Tensor[(154), float64] */;
  %662 = reshape(%661, newshape=[11, 1, 14]) /* ty=Tensor[(11, 1, 14), float64] */;
  %663 = @func_1354(%662) /* ty=(Tensor[(11, 1, 14), float64], Tensor[(11, 1, 14), float64]) */;
  %664 = bitwise_or(%637, %638) /* ty=Tensor[(16, 4, 7), int32] */;
  %665 = bitwise_and(%641, %642) /* ty=Tensor[(55, 4), int16] */;
  %666 = %643.0;
  %667 = less_equal(%646, %647) /* ty=Tensor[(55, 4), bool] */;
  %668 = acos(%656) /* ty=Tensor[(784), float32] */;
  %669 = sigmoid(%660) /* ty=Tensor[(5, 3, 3), float32] */;
  %670 = %663.1;
  (%664, %var_4114, meta[relay.Constant][39] /* ty=Tensor[(784), float64] */, %665, %666, meta[relay.Constant][41] /* ty=Tensor[(45), int16] */, %667, %668, %669, %670, %var_4177)
}

def @func_3919(%var_3918: float64) -> (Tensor[(8, 7, 12), float64],) {
  %674 = fn (%var_3905: float64) -> (Tensor[(8, 7, 12), float64],) {
    %671 = cast(%var_3905, dtype="float64") /* ty=float64 */;
    %672 = cast(meta[relay.Constant][42] /* ty=Tensor[(8, 7, 12), float64] */, dtype="float64") /* ty=Tensor[(8, 7, 12), float64] */;
    %673 = subtract(%671, %672) /* ty=Tensor[(8, 7, 12), float64] */;
    (%673,)
  };
  %674(%var_3918) /* ty=(Tensor[(8, 7, 12), float64],) */
}

def @func_506(%var_504: Tensor[(7, 11, 12), uint16]) -> (Tensor[(7, 11, 12), uint16],) {
  @func_503(%var_504) /* ty=(Tensor[(7, 11, 12), uint16],) */
}

def @func_1842(%var_1841: Tensor[(396), uint16]) -> (Tensor[(11, ?, 2), float64], Tensor[(11, 9, 4), bool], Tensor[(396), uint16]) {
  %682 = fn (%var_1838: Tensor[(396), uint16]) -> (Tensor[(11, ?, 2), float64], Tensor[(11, 9, 4), bool], Tensor[(396), uint16]) {
    %675 = cast(%var_1838, dtype="uint16") /* ty=Tensor[(396), uint16] */;
    %676 = cast(%var_1838, dtype="uint16") /* ty=Tensor[(396), uint16] */;
    %677 = reshape(%675, newshape=[11, 9, 4]) /* ty=Tensor[(11, 9, 4), uint16] */;
    %678 = reshape(%676, newshape=[11, 9, 4]) /* ty=Tensor[(11, 9, 4), uint16] */;
    %679 = @func_1710(%677, %678) /* ty=(Tensor[(11, 9, 4), bool],) */;
    %680 = @func_1789() /* ty=Tensor[(11, ?, 2), float64] */;
    %681 = %679.0;
    (%680, %681, %var_1838)
  };
  %682(%var_1841) /* ty=(Tensor[(11, ?, 2), float64], Tensor[(11, 9, 4), bool], Tensor[(396), uint16]) */
}

def @func_3712(%var_3686: Tensor[(220), float64], %var_3702: Tensor[(11, 16, 2), float64], %var_3710: Tensor[(784), float64]) -> (Tensor[(220), float32], Tensor[(11, 16, 2), int8], Tensor[(784), int8], Tensor[(784), float64]) {
  %683 = cast(%var_3686, dtype="float64") /* ty=Tensor[(220), float64] */;
  %684 = reshape(%683, newshape=[11, 10, 2]) /* ty=Tensor[(11, 10, 2), float64] */;
  %685 = @func_3602(%684) /* ty=(Tensor[(11, 10, 2), bool],) */;
  %686 = %685.0;
  %687 = cast(%686, dtype="float32") /* ty=Tensor[(11, 10, 2), float32] */;
  %688 = shape_of(%var_3686, dtype="int32") /* ty=Tensor[(1), int32] */;
  %689 = cast(%var_3686, dtype="float32") /* ty=Tensor[(220), float32] */;
  %690 = dyn.reshape(%687, %688, newshape=[]) /* ty=Tensor[(?), float32] */;
  %691 = @func_2388() /* ty=Tensor[(11, ?, 2), float64] */;
  %692 = cast(%691, dtype="float64") /* ty=Tensor[(11, ?, 2), float64] */;
  %693 = sinh(%692) /* ty=Tensor[(11, ?, 2), float64] */;
  %694 = cast(%693, dtype="int8") /* ty=Tensor[(11, ?, 2), int8] */;
  %695 = cast(%var_3702, dtype="int8") /* ty=Tensor[(11, 16, 2), int8] */;
  %696 = cast(%var_3710, dtype="float64") /* ty=Tensor[(784), float64] */;
  %697 = reshape(%696, newshape=[784]) /* ty=Tensor[(784), float64] */;
  %698 = @func_2848(%697) /* ty=(Tensor[(11, ?, 2), float64], Tensor[(300), float32], Tensor[(784), int8], Tensor[(5, 6, 10), float32], Tensor[(396), uint16], Tensor[(396), uint16], Tensor[(784), float32], Tensor[(784), bool]) */;
  %699 = floor_mod(%689, %690) /* ty=Tensor[(220), float32] */;
  %700 = bitwise_or(%694, %695) /* ty=Tensor[(11, 16, 2), int8] */;
  %701 = %698.2;
  (%699, %700, %701, %var_3710)
}

def @func_1957() -> (Tensor[(11, ?, 2), float64],) {
  %703 = fn () -> (Tensor[(11, ?, 2), float64],) {
    %702 = @func_1789() /* ty=Tensor[(11, ?, 2), float64] */;
    (%702,)
  };
  %703() /* ty=(Tensor[(11, ?, 2), float64],) */
}

def @func_3533(%var_3517: Tensor[(110), float64], %var_3519: Tensor[(80, 4), float32], %var_3520: Tensor[(396), uint16], %var_3521: Tensor[(225), int8]) -> (Tensor[(11, ?, 2), float64], Tensor[(5, 6, 10), uint16], Tensor[(110), float64], Tensor[(784), float64], Tensor[(80, 4), float32], Tensor[(396), uint16], Tensor[(225), int8], Tensor[(3600), int8], Tensor[(375), float64]) {
  %704 = @func_3060() /* ty=(Tensor[(11, ?, 2), float64],) */;
  %705 = cast(%var_3517, dtype="float64") /* ty=Tensor[(110), float64] */;
  %706 = cast(%var_3517, dtype="float64") /* ty=Tensor[(110), float64] */;
  %707 = cast(meta[relay.Constant][43] /* ty=Tensor[(784), float64] */, dtype="float64") /* ty=Tensor[(784), float64] */;
  %708 = cast(%var_3519, dtype="float32") /* ty=Tensor[(80, 4), float32] */;
  %709 = cast(%var_3520, dtype="uint16") /* ty=Tensor[(396), uint16] */;
  %710 = cast(%var_3521, dtype="int8") /* ty=Tensor[(225), int8] */;
  %711 = cast(meta[relay.Constant][44] /* ty=Tensor[(3600), int8] */, dtype="int8") /* ty=Tensor[(3600), int8] */;
  %712 = cast(meta[relay.Constant][45] /* ty=Tensor[(375), float64] */, dtype="float64") /* ty=Tensor[(375), float64] */;
  %713 = reshape(%705, newshape=[11, 5, 2]) /* ty=Tensor[(11, 5, 2), float64] */;
  %714 = reshape(%706, newshape=[11, 5, 2]) /* ty=Tensor[(11, 5, 2), float64] */;
  %715 = reshape(%707, newshape=[784]) /* ty=Tensor[(784), float64] */;
  %716 = reshape(%708, newshape=[320]) /* ty=Tensor[(320), float32] */;
  %717 = reshape(%709, newshape=[396]) /* ty=Tensor[(396), uint16] */;
  %718 = reshape(%710, newshape=[225]) /* ty=Tensor[(225), int8] */;
  %719 = reshape(%711, newshape=[3600]) /* ty=Tensor[(3600), int8] */;
  %720 = reshape(%712, newshape=[375]) /* ty=Tensor[(375), float64] */;
  %721 = @func_3471(%713, %714, %715, %716, %717, %718, %719, %720) /* ty=(Tensor[(11, 5, 2), float32], Tensor[(11, 5, 2), bool], Tensor[(784), float64], Tensor[(6, 5, 7), float64], Tensor[(210), uint64], Tensor[(320), float32], Tensor[(16, 2, 10), float64], Tensor[(96), float32], Tensor[(396), uint16], Tensor[(396), uint16], Tensor[(16, 2, 10), float64], Tensor[(1, 144), float32], Tensor[(11, ?, 2), float64], Tensor[(210), uint64], Tensor[(225), int8], Tensor[(3600), int8], Tensor[(375), float64], Tensor[(11, ?, 2), float64], Tensor[(11, ?, 2), float64], Tensor[(5, 6, 10), uint16]) */;
  %722 = %704.0;
  %723 = %721.19;
  (%722, %723, %var_3517, meta[relay.Constant][43] /* ty=Tensor[(784), float64] */, %var_3519, %var_3520, %var_3521, meta[relay.Constant][44] /* ty=Tensor[(3600), int8] */, meta[relay.Constant][45] /* ty=Tensor[(375), float64] */)
}

def @func_3604(%var_3603: Tensor[(11, 10, 2), float64]) -> (Tensor[(11, 10, 2), bool],) {
  %729 = fn (%var_3589: Tensor[(11, 10, 2), float64]) -> (Tensor[(11, 10, 2), bool],) {
    %724 = @func_2730() /* ty=(Tensor[(11, ?, 2), float64],) */;
    %725 = %724.0;
    %726 = cast(%725, dtype="bool") /* ty=Tensor[(11, ?, 2), bool] */;
    %727 = cast(%var_3589, dtype="bool") /* ty=Tensor[(11, 10, 2), bool] */;
    %728 = equal(%726, %727) /* ty=Tensor[(11, 10, 2), bool] */;
    (%728,)
  };
  %729(%var_3603) /* ty=(Tensor[(11, 10, 2), bool],) */
}

def @func_2063(%var_1980: Tensor[(11, 1, 2), float64], %var_1992: Tensor[(96), float32]) -> (Tensor[(11, ?, 2), uint64], Tensor[(300), float32], Tensor[(96), float32], Tensor[(6, 66), uint64], Tensor[(11, ?, 2), float64], Tensor[(6, 66), int64]) {
  %730 = @func_1956() /* ty=(Tensor[(11, ?, 2), float64],) */;
  %731 = %730.0;
  %732 = cast(%var_1980, dtype="uint64") /* ty=Tensor[(11, 1, 2), uint64] */;
  %733 = shape_of(%731, dtype="int32") /* ty=Tensor[(3), int32] */;
  %734 = cast(%731, dtype="uint64") /* ty=Tensor[(11, ?, 2), uint64] */;
  %735 = dyn.reshape(%732, %733, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %736 = cast(%var_1992, dtype="float32") /* ty=Tensor[(96), float32] */;
  %737 = reshape(%736, newshape=[2, 48]) /* ty=Tensor[(2, 48), float32] */;
  %738 = @func_1897(%737) /* ty=(Tensor[(11, ?, 2), float64], Tensor[(16, 2, 10), float64], Tensor[(784), float64], Tensor[(300), float32], Tensor[(2, 6, 8), float64], Tensor[(2, 48), float32]) */;
  %739 = cast(meta[relay.Constant][46] /* ty=Tensor[(6, 66), uint16] */, dtype="float64") /* ty=Tensor[(6, 66), float64] */;
  %740 = log10(%739) /* ty=Tensor[(6, 66), float64] */;
  %741 = cast(meta[relay.Constant][46] /* ty=Tensor[(6, 66), uint16] */, dtype="uint16") /* ty=Tensor[(6, 66), uint16] */;
  %742 = reshape(%741, newshape=[396]) /* ty=Tensor[(396), uint16] */;
  %743 = @func_1840(%742) /* ty=(Tensor[(11, ?, 2), float64], Tensor[(11, 9, 4), bool], Tensor[(396), uint16]) */;
  %744 = %743.2;
  %745 = cast(%744, dtype="bool") /* ty=Tensor[(396), bool] */;
  %746 = shape_of(%740, dtype="int32") /* ty=Tensor[(2), int32] */;
  %747 = cast(%740, dtype="bool") /* ty=Tensor[(6, 66), bool] */;
  %748 = dyn.reshape(%745, %746, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %749 = greater(%747, %748) /* ty=Tensor[(6, 66), bool] */;
  %750 = cast(%744, dtype="uint64") /* ty=Tensor[(396), uint64] */;
  %751 = shape_of(%749, dtype="int32") /* ty=Tensor[(2), int32] */;
  %752 = cast(%749, dtype="uint64") /* ty=Tensor[(6, 66), uint64] */;
  %753 = dyn.reshape(%750, %751, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %754 = @func_1956() /* ty=(Tensor[(11, ?, 2), float64],) */;
  %755 = cast(meta[relay.Constant][46] /* ty=Tensor[(6, 66), uint16] */, dtype="int64") /* ty=Tensor[(6, 66), int64] */;
  %756 = shape_of(%749, dtype="int32") /* ty=Tensor[(2), int32] */;
  %757 = cast(%749, dtype="int64") /* ty=Tensor[(6, 66), int64] */;
  %758 = dyn.reshape(%755, %756, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %759 = bitwise_xor(%734, %735) /* ty=Tensor[(11, ?, 2), uint64] */;
  %760 = %738.3;
  %761 = left_shift(%752, %753) /* ty=Tensor[(6, 66), uint64] */;
  %762 = %754.0;
  %763 = minimum(%757, %758) /* ty=Tensor[(6, 66), int64] */;
  (%759, %760, %var_1992, %761, %762, %763)
}

def @func_1899(%var_1898: Tensor[(2, 48), float32]) -> (Tensor[(11, ?, 2), float64], Tensor[(16, 2, 10), float64], Tensor[(784), float64], Tensor[(300), float32], Tensor[(2, 6, 8), float64], Tensor[(2, 48), float32]) {
  %777 = fn (%var_1888: Tensor[(2, 48), float32]) -> (Tensor[(11, ?, 2), float64], Tensor[(16, 2, 10), float64], Tensor[(784), float64], Tensor[(300), float32], Tensor[(2, 6, 8), float64], Tensor[(2, 48), float32]) {
    %764 = cast(meta[relay.Constant][47] /* ty=Tensor[(784), float64] */, dtype="float64") /* ty=Tensor[(784), float64] */;
    %765 = cast(meta[relay.Constant][47] /* ty=Tensor[(784), float64] */, dtype="float64") /* ty=Tensor[(784), float64] */;
    %766 = cast(meta[relay.Constant][48] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
    %767 = reshape(%764, newshape=[4, 14, 14]) /* ty=Tensor[(4, 14, 14), float64] */;
    %768 = reshape(%765, newshape=[4, 14, 14]) /* ty=Tensor[(4, 14, 14), float64] */;
    %769 = reshape(%766, newshape=[300]) /* ty=Tensor[(300), float32] */;
    %770 = @func_964(%767, %768, %769) /* ty=(Tensor[(4, 14, 14), float64], Tensor[(16, 2, 10), float64], Tensor[(300), float32]) */;
    %771 = cast(%var_1888, dtype="float32") /* ty=Tensor[(2, 48), float32] */;
    %772 = reshape(%771, newshape=[2, 6, 8]) /* ty=Tensor[(2, 6, 8), float32] */;
    %773 = @func_1629(%772) /* ty=(Tensor[(2, 6, 8), float32], Tensor[(2, 6, 8), float64]) */;
    %774 = @func_1789() /* ty=Tensor[(11, ?, 2), float64] */;
    %775 = %770.1;
    %776 = %773.1;
    (%774, %775, meta[relay.Constant][47] /* ty=Tensor[(784), float64] */, meta[relay.Constant][48] /* ty=Tensor[(300), float32] */, %776, %var_1888)
  };
  %777(%var_1898) /* ty=(Tensor[(11, ?, 2), float64], Tensor[(16, 2, 10), float64], Tensor[(784), float64], Tensor[(300), float32], Tensor[(2, 6, 8), float64], Tensor[(2, 48), float32]) */
}

def @func_2215(%var_2214: Tensor[(5, 3, 3), int16]) -> (Tensor[(11, ?, 2), float64], Tensor[(45, 1), int16], Tensor[(5, 3, 3), float32], Tensor[(5, 3, 3), int16]) {
  %790 = fn (%var_2205: Tensor[(5, 3, 3), int16]) -> (Tensor[(11, ?, 2), float64], Tensor[(45, 1), int16], Tensor[(5, 3, 3), float32], Tensor[(5, 3, 3), int16]) {
    %778 = @func_1956() /* ty=(Tensor[(11, ?, 2), float64],) */;
    %779 = cast(meta[relay.Constant][49] /* ty=Tensor[(45, 1), int16] */, dtype="int16") /* ty=Tensor[(45, 1), int16] */;
    %780 = reshape(%779, newshape=[5, 3, 3]) /* ty=Tensor[(5, 3, 3), int16] */;
    %781 = @func_937(%780) /* ty=Tensor[(5, 3, 3), int16] */;
    %782 = cast(%781, dtype="float32") /* ty=Tensor[(5, 3, 3), float32] */;
    %783 = cast(%var_2205, dtype="int16") /* ty=Tensor[(5, 3, 3), int16] */;
    %784 = shape_of(%781, dtype="int32") /* ty=Tensor[(3), int32] */;
    %785 = cast(%781, dtype="int16") /* ty=Tensor[(5, 3, 3), int16] */;
    %786 = dyn.reshape(%783, %784, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %787 = %778.0;
    %788 = log2(%782) /* ty=Tensor[(5, 3, 3), float32] */;
    %789 = bitwise_and(%785, %786) /* ty=Tensor[(5, 3, 3), int16] */;
    (%787, meta[relay.Constant][49] /* ty=Tensor[(45, 1), int16] */, %788, %789)
  };
  %790(%var_2214) /* ty=(Tensor[(11, ?, 2), float64], Tensor[(45, 1), int16], Tensor[(5, 3, 3), float32], Tensor[(5, 3, 3), int16]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen153/build/output.py", line 1444, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:53:31] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

