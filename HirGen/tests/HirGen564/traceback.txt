==========mod==========
#[version = "0.0.5"]
def @func_6783() -> (Tensor[(1, 7, 8), float64],) {
  %0 = @func_4382() /* ty=(Tensor[(1, 7, 8), float64], Tensor[(1, 7, 8), float64]) */;
  %1 = %0.0;
  (%1,)
}

def @func_4581() -> (Tensor[(9, 12, 9), float32],) {
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(9, 12, 9), float32] */, dtype="float32") /* ty=Tensor[(9, 12, 9), float32] */;
  %3 = atan(%2) /* ty=Tensor[(9, 12, 9), float32] */;
  (%3,)
}

def @func_7315() -> Tensor[(72), float32] {
  @func_2899() /* ty=Tensor[(72), float32] */
}

def @func_2860() -> (Tensor[(1, 7, 8), float64],) {
  %4 = @func_1594() /* ty=Tensor[(1, 7, 8), float64] */;
  (%4,)
}

def @func_1764(%var_1746: Tensor[(16, 7, 8), float64]) -> (Tensor[(16, 7, 8), int64], Tensor[(13, 10, 2), float64]) {
  %5 = @func_1513() /* ty=(Tensor[(1, 7, 8), float64], Tensor[(16, 7, 8), float64], Tensor[(896), float64], Tensor[(72), float32]) */;
  %6 = %5.1;
  %7 = cast(%var_1746, dtype="int64") /* ty=Tensor[(16, 7, 8), int64] */;
  %8 = shape_of(%6, dtype="int32") /* ty=Tensor[(3), int32] */;
  %9 = cast(%6, dtype="int64") /* ty=Tensor[(16, 7, 8), int64] */;
  %10 = dyn.reshape(%7, %8, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %11 = @func_1733() /* ty=(Tensor[(13, 10, 2), float32], Tensor[(13, 10, 2), float64], Tensor[(1, 7, 8), float64]) */;
  %12 = bitwise_and(%9, %10) /* ty=Tensor[(16, 7, 8), int64] */;
  %13 = %11.1;
  (%12, %13)
}

def @func_7252() -> Tensor[(72), float32] {
  %14 = @func_1260() /* ty=(Tensor[(1, 7, 8), float64], Tensor[(72), float32], Tensor[(?, 7, 8), bool]) */;
  %14.1
}

def @func_2869() -> (Tensor[(1, 7, 8), float64],) {
  %15 = @func_1260() /* ty=(Tensor[(1, 7, 8), float64], Tensor[(72), float32], Tensor[(?, 7, 8), bool]) */;
  %16 = %15.0;
  (%16,)
}

def @func_2799() -> (Tensor[(5, 15, 2), float32], Tensor[(?, 7, 8), int64]) {
  %17 = @func_676() /* ty=(Tensor[(5, 15, 2), float64], Tensor[(5, 15, 2), bool]) */;
  %18 = %17.1;
  %19 = cast(%18, dtype="float32") /* ty=Tensor[(5, 15, 2), float32] */;
  %20 = @func_1578() /* ty=(Tensor[(13, 10, 2), float32], Tensor[(?, 7, 8), int64]) */;
  %21 = cosh(%19) /* ty=Tensor[(5, 15, 2), float32] */;
  %22 = %20.1;
  (%21, %22)
}

def @func_4870() -> (Tensor[(1, 7, 8), float64],) {
  %23 = @func_526() /* ty=Tensor[(1, 7, 8), float64] */;
  (%23,)
}

def @func_6171() -> Tensor[(1, 7, 8), float64] {
  @func_526() /* ty=Tensor[(1, 7, 8), float64] */
}

def @func_6913() -> (Tensor[(16, 7, 8), float64],) {
  %24 = @func_1894() /* ty=(Tensor[(16, 7, 8), float64],) */;
  %25 = %24.0;
  (%25,)
}

def @func_574() -> Tensor[(1, 7, 8), float64] {
  @func_526() /* ty=Tensor[(1, 7, 8), float64] */
}

def @func_5877() -> (Tensor[(72), float32],) {
  %26 = @func_5809() /* ty=Tensor[(72), float32] */;
  (%26,)
}

def @func_2291() -> (Tensor[(1, 7, 8), float32], Tensor[(72), float32]) {
  %27 = @func_1071() /* ty=(Tensor[(1, 7, 8), float64],) */;
  %28 = %27.0;
  %29 = cast(%28, dtype="float32") /* ty=Tensor[(1, 7, 8), float32] */;
  %30 = @func_1513() /* ty=(Tensor[(1, 7, 8), float64], Tensor[(16, 7, 8), float64], Tensor[(896), float64], Tensor[(72), float32]) */;
  %31 = cos(%29) /* ty=Tensor[(1, 7, 8), float32] */;
  %32 = %30.3;
  (%31, %32)
}

def @func_7218() -> (Tensor[(16, 7, 8), float64],) {
  %33 = @func_6913() /* ty=(Tensor[(16, 7, 8), float64],) */;
  %34 = %33.0;
  (%34,)
}

def @func_925() -> Tensor[(1, 7, 8), float32] {
  %35 = @func_574() /* ty=Tensor[(1, 7, 8), float64] */;
  %36 = cast(%35, dtype="float32") /* ty=Tensor[(1, 7, 8), float32] */;
  rsqrt(%36) /* ty=Tensor[(1, 7, 8), float32] */
}

def @func_7429(%var_7418: Tensor[(8, 15, 8), uint16], %var_7419: Tensor[(8, 15, 8), uint16]) -> (Tensor[(8, 15, 8), uint16], Tensor[(1, 7, 8), float64]) {
  %37 = cast(%var_7419, dtype="uint16") /* ty=Tensor[(8, 15, 8), uint16] */;
  %38 = shape_of(%var_7418, dtype="int32") /* ty=Tensor[(3), int32] */;
  %39 = cast(%var_7418, dtype="uint16") /* ty=Tensor[(8, 15, 8), uint16] */;
  %40 = dyn.reshape(%37, %38, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %41 = @func_7402() /* ty=(Tensor[(1, 7, 8), float64],) */;
  %42 = right_shift(%39, %40) /* ty=Tensor[(8, 15, 8), uint16] */;
  %43 = %41.0;
  (%42, %43)
}

def @func_4880(%var_4877: Tensor[(5, 11, 1), float32]) -> Tensor[(5, 11, 1), float32] {
  %44 = cast(%var_4877, dtype="float32") /* ty=Tensor[(5, 11, 1), float32] */;
  tan(%44) /* ty=Tensor[(5, 11, 1), float32] */
}

def @func_1916() -> (Tensor[(1, 7, 8), float32],) {
  %45 = @func_925() /* ty=Tensor[(1, 7, 8), float32] */;
  (%45,)
}

def @func_1578() -> (Tensor[(13, 10, 2), float32], Tensor[(?, 7, 8), int64]) {
  %46 = @func_925() /* ty=Tensor[(1, 7, 8), float32] */;
  %47 = cast(%46, dtype="float64") /* ty=Tensor[(1, 7, 8), float64] */;
  %48 = reshape(%47, newshape=[1, 7, 8]) /* ty=Tensor[(1, 7, 8), float64] */;
  %49 = @func_1421(%48) /* ty=(Tensor[(?, 7, 8), float32], Tensor[(1, 7, 8), float64], Tensor[(?, 9, 10), float64], Tensor[(90), float64], Tensor[(5, 7, 8), uint8], Tensor[(9, 7, 8), int32], Tensor[(504), float64], Tensor[(13, 10, 2), float32], Tensor[(260), float32]) */;
  %50 = cast(%46, dtype="float32") /* ty=Tensor[(1, 7, 8), float32] */;
  %51 = sigmoid(%50) /* ty=Tensor[(1, 7, 8), float32] */;
  %52 = cast(%46, dtype="int64") /* ty=Tensor[(1, 7, 8), int64] */;
  %53 = shape_of(%51, dtype="int32") /* ty=Tensor[(3), int32] */;
  %54 = cast(%51, dtype="int64") /* ty=Tensor[(1, 7, 8), int64] */;
  %55 = dyn.reshape(%52, %53, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %56 = %49.7;
  %57 = maximum(%54, %55) /* ty=Tensor[(?, 7, 8), int64] */;
  (%56, %57)
}

def @func_2643() -> Tensor[(72), float32] {
  %58 = @func_1513() /* ty=(Tensor[(1, 7, 8), float64], Tensor[(16, 7, 8), float64], Tensor[(896), float64], Tensor[(72), float32]) */;
  %58.3
}

def @func_3034() -> (Tensor[(72), float32],) {
  %59 = @func_2810() /* ty=(Tensor[(72), float32],) */;
  %60 = %59.0;
  (%60,)
}

def @func_3292(%var_3264: Tensor[(12, 13, 16), int16], %var_3265: Tensor[(12, 13, 16), int16]) -> (Tensor[(12, 13, 16), int16], Tensor[(16, 7, 8), float64], Tensor[(13, 10, 2), float32]) {
  %61 = cast(%var_3265, dtype="int16") /* ty=Tensor[(12, 13, 16), int16] */;
  %62 = shape_of(%var_3264, dtype="int32") /* ty=Tensor[(3), int32] */;
  %63 = cast(%var_3264, dtype="int16") /* ty=Tensor[(12, 13, 16), int16] */;
  %64 = dyn.reshape(%61, %62, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %65 = @func_2164() /* ty=(Tensor[(16, 7, 8), float64],) */;
  %66 = @func_1578() /* ty=(Tensor[(13, 10, 2), float32], Tensor[(?, 7, 8), int64]) */;
  %67 = left_shift(%63, %64) /* ty=Tensor[(12, 13, 16), int16] */;
  %68 = %65.0;
  %69 = %66.0;
  (%67, %68, %69)
}

def @func_5443() -> (Tensor[(10, 7, 8), uint32], Tensor[(1, 7, 8), float64]) {
  %70 = @func_600() /* ty=(Tensor[(1, 7, 8), float64],) */;
  %71 = %70.0;
  %72 = cast(%71, dtype="uint32") /* ty=Tensor[(1, 7, 8), uint32] */;
  %73 = cast(meta[relay.Constant][1] /* ty=Tensor[(10, 7, 8), float64] */, dtype="uint32") /* ty=Tensor[(10, 7, 8), uint32] */;
  %74 = @func_4870() /* ty=(Tensor[(1, 7, 8), float64],) */;
  %75 = subtract(%72, %73) /* ty=Tensor[(10, 7, 8), uint32] */;
  %76 = %74.0;
  (%75, %76)
}

def @func_6483() -> (Tensor[(72), float32], Tensor[(72), float32], Tensor[(9, 11, 11), float32], Tensor[(11, 99), float32], Tensor[(72), float32], Tensor[(1, 7, 8), float64], Tensor[(364), float64], Tensor[(?, 7, 8), int32]) {
  %77 = @func_5877() /* ty=(Tensor[(72), float32],) */;
  %78 = @func_2810() /* ty=(Tensor[(72), float32],) */;
  %79 = cast(meta[relay.Constant][2] /* ty=Tensor[(11, 99), float32] */, dtype="float32") /* ty=Tensor[(11, 99), float32] */;
  %80 = reshape(%79, newshape=[9, 11, 11]) /* ty=Tensor[(9, 11, 11), float32] */;
  %81 = @func_4942(%80) /* ty=(Tensor[(9, 11, 11), float32],) */;
  %82 = @func_2291() /* ty=(Tensor[(1, 7, 8), float32], Tensor[(72), float32]) */;
  %83 = @func_3536() /* ty=(Tensor[(1, 7, 8), float64],) */;
  %84 = @func_5483() /* ty=(Tensor[(364), float32],) */;
  %85 = %84.0;
  %86 = cast(%85, dtype="float64") /* ty=Tensor[(364), float64] */;
  %87 = @func_4778() /* ty=(Tensor[(1, 7, 8), float64],) */;
  %88 = %87.0;
  %89 = @func_495() /* ty=Tensor[(1, 7, 8), float64] */;
  %90 = cast(%89, dtype="int32") /* ty=Tensor[(1, 7, 8), int32] */;
  %91 = shape_of(%88, dtype="int32") /* ty=Tensor[(3), int32] */;
  %92 = cast(%88, dtype="int32") /* ty=Tensor[(1, 7, 8), int32] */;
  %93 = dyn.reshape(%90, %91, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %94 = %77.0;
  %95 = %78.0;
  %96 = %81.0;
  %97 = %82.1;
  %98 = %83.0;
  %99 = erf(%86) /* ty=Tensor[(364), float64] */;
  %100 = left_shift(%92, %93) /* ty=Tensor[(?, 7, 8), int32] */;
  (%94, %95, %96, meta[relay.Constant][2] /* ty=Tensor[(11, 99), float32] */, %97, %98, %99, %100)
}

def @func_1733() -> (Tensor[(13, 10, 2), float32], Tensor[(13, 10, 2), float64], Tensor[(1, 7, 8), float64]) {
  %101 = @func_1578() /* ty=(Tensor[(13, 10, 2), float32], Tensor[(?, 7, 8), int64]) */;
  %102 = @func_1578() /* ty=(Tensor[(13, 10, 2), float32], Tensor[(?, 7, 8), int64]) */;
  %103 = %102.0;
  %104 = cast(%103, dtype="float64") /* ty=Tensor[(13, 10, 2), float64] */;
  %105 = @func_600() /* ty=(Tensor[(1, 7, 8), float64],) */;
  %106 = %101.0;
  %107 = cosh(%104) /* ty=Tensor[(13, 10, 2), float64] */;
  %108 = %105.0;
  (%106, %107, %108)
}

def @func_3406(%var_3391: Tensor[(16, 7, 8), float64], %var_3400: Tensor[(56), float64]) -> (Tensor[(16, 7, 8), float32], Tensor[(?, 7, 8), float32], Tensor[(56), float64]) {
  %109 = @func_1894() /* ty=(Tensor[(16, 7, 8), float64],) */;
  %110 = %109.0;
  %111 = cast(%var_3391, dtype="float32") /* ty=Tensor[(16, 7, 8), float32] */;
  %112 = shape_of(%110, dtype="int32") /* ty=Tensor[(3), int32] */;
  %113 = cast(%110, dtype="float32") /* ty=Tensor[(16, 7, 8), float32] */;
  %114 = dyn.reshape(%111, %112, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %115 = cast(%var_3400, dtype="float64") /* ty=Tensor[(56), float64] */;
  %116 = reshape(%115, newshape=[1, 7, 8]) /* ty=Tensor[(1, 7, 8), float64] */;
  %117 = @func_1421(%116) /* ty=(Tensor[(?, 7, 8), float32], Tensor[(1, 7, 8), float64], Tensor[(?, 9, 10), float64], Tensor[(90), float64], Tensor[(5, 7, 8), uint8], Tensor[(9, 7, 8), int32], Tensor[(504), float64], Tensor[(13, 10, 2), float32], Tensor[(260), float32]) */;
  %118 = multiply(%113, %114) /* ty=Tensor[(16, 7, 8), float32] */;
  %119 = %117.0;
  (%118, %119, %var_3400)
}

def @func_2810() -> (Tensor[(72), float32],) {
  %120 = @func_1513() /* ty=(Tensor[(1, 7, 8), float64], Tensor[(16, 7, 8), float64], Tensor[(896), float64], Tensor[(72), float32]) */;
  %121 = %120.3;
  (%121,)
}

def @func_5200() -> (Tensor[(1, 7, 8), float64],) {
  %122 = @func_2869() /* ty=(Tensor[(1, 7, 8), float64],) */;
  %123 = %122.0;
  (%123,)
}

def @func_3536() -> (Tensor[(1, 7, 8), float64],) {
  %124 = @func_2869() /* ty=(Tensor[(1, 7, 8), float64],) */;
  %125 = %124.0;
  (%125,)
}

def @func_4066(%var_4034: Tensor[(324, 14), uint8], %var_4040: Tensor[(324, 14), uint8]) -> (Tensor[(324, 14), bool], Tensor[(324, 14), bool], Tensor[(1, 7, 8), float64]) {
  %126 = @func_2971() /* ty=(Tensor[(5, 15, 2), float32], Tensor[(9, 3, 12), uint8], Tensor[(324, 1), uint8], Tensor[(16, 7, 8), int64], Tensor[(896), float64]) */;
  %127 = %126.2;
  %128 = cast(%127, dtype="bool") /* ty=Tensor[(324, 1), bool] */;
  %129 = cast(%var_4034, dtype="bool") /* ty=Tensor[(324, 14), bool] */;
  %130 = cast(%var_4040, dtype="bool") /* ty=Tensor[(324, 14), bool] */;
  %131 = shape_of(%var_4034, dtype="int32") /* ty=Tensor[(2), int32] */;
  %132 = cast(%var_4034, dtype="bool") /* ty=Tensor[(324, 14), bool] */;
  %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %134 = logical_and(%128, %129) /* ty=Tensor[(324, 14), bool] */;
  %135 = less(%132, %133) /* ty=Tensor[(324, 14), bool] */;
  %136 = @func_1594() /* ty=Tensor[(1, 7, 8), float64] */;
  (%134, %135, %136)
}

def @func_720(%var_703: Tensor[(9, 4, 2), float32]) -> (Tensor[(9, 4, 2), float32], Tensor[(1, 7, 8), float64]) {
  %137 = cast(%var_703, dtype="float32") /* ty=Tensor[(9, 4, 2), float32] */;
  %138 = rsqrt(%137) /* ty=Tensor[(9, 4, 2), float32] */;
  %139 = @func_574() /* ty=Tensor[(1, 7, 8), float64] */;
  (%138, %139)
}

def @func_7802(%var_7783: Tensor[(72), float32]) -> (Tensor[(1, 7, 8), float32], Tensor[(1, 7, 8), float64], Tensor[(1, 7, 8), float64], Tensor[(72), float32], Tensor[(260), float32], Tensor[(896), float64], Tensor[(5, 15, 2), bool], Tensor[(150), float64]) {
  %140 = @func_3681() /* ty=(Tensor[(?, 7, 8), int64], Tensor[(72), float32], Tensor[(1, 7, 8), float64]) */;
  %141 = cast(%var_7783, dtype="float32") /* ty=Tensor[(72), float32] */;
  %142 = reshape(%141, newshape=[9, 4, 2]) /* ty=Tensor[(9, 4, 2), float32] */;
  %143 = @func_720(%142) /* ty=(Tensor[(9, 4, 2), float32], Tensor[(1, 7, 8), float64]) */;
  %144 = cast(meta[relay.Constant][3] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
  %145 = %143.1;
  %146 = cast(%145, dtype="float64") /* ty=Tensor[(1, 7, 8), float64] */;
  %147 = reshape(%144, newshape=[16, 7, 8]) /* ty=Tensor[(16, 7, 8), float64] */;
  %148 = reshape(%146, newshape=[56]) /* ty=Tensor[(56), float64] */;
  %149 = @func_2490(%147, %148) /* ty=(Tensor[(16, 7, 8), float32], Tensor[(16, 7, 8), bool], Tensor[(260), float32], Tensor[(56), float64]) */;
  %150 = cast(meta[relay.Constant][4] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %151 = reshape(%150, newshape=[5, 15, 2]) /* ty=Tensor[(5, 15, 2), float64] */;
  %152 = @func_4325(%151) /* ty=(Tensor[(72), float32], Tensor[(5, 15, 2), bool]) */;
  %153 = @func_6681() /* ty=Tensor[(1, 7, 8), float32] */;
  %154 = %140.2;
  %155 = %149.2;
  %156 = %152.1;
  (%153, %154, %145, %var_7783, %155, meta[relay.Constant][3] /* ty=Tensor[(896), float64] */, %156, meta[relay.Constant][4] /* ty=Tensor[(150), float64] */)
}

def @func_7043() -> (Tensor[(1, 7, 8), float64], Tensor[(1, 7, 8), float64], Tensor[(72), float32]) {
  %157 = @func_5593() /* ty=(Tensor[(1, 7, 8), float64],) */;
  %158 = %157.0;
  %159 = @func_574() /* ty=Tensor[(1, 7, 8), float64] */;
  %160 = @func_5809() /* ty=Tensor[(72), float32] */;
  (%158, %159, %160)
}

def @func_5019(%var_5003: Tensor[(1, 45), float64]) -> (Tensor[(72), float32], Tensor[(9, 1, 5), float64], Tensor[(1, 45), float64]) {
  %161 = cast(%var_5003, dtype="float64") /* ty=Tensor[(1, 45), float64] */;
  %162 = reshape(%161, newshape=[1, 45]) /* ty=Tensor[(1, 45), float64] */;
  %163 = @func_2053(%162) /* ty=(Tensor[(1, 7, 8), float64], Tensor[(9, 1, 5), float64], Tensor[(1, 45), float64]) */;
  %164 = @func_2643() /* ty=Tensor[(72), float32] */;
  %165 = %163.1;
  (%164, %165, %var_5003)
}

def @func_676() -> (Tensor[(5, 15, 2), float64], Tensor[(5, 15, 2), bool]) {
  %166 = cast(meta[relay.Constant][6] /* ty=Tensor[(5, 15, 2), float64] */, dtype="float64") /* ty=Tensor[(5, 15, 2), float64] */;
  %167 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(5, 15, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %168 = cast(meta[relay.Constant][5] /* ty=Tensor[(5, 15, 2), float64] */, dtype="float64") /* ty=Tensor[(5, 15, 2), float64] */;
  %169 = dyn.reshape(%166, %167, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %170 = cast(meta[relay.Constant][7] /* ty=Tensor[(5, 15, 2), float64] */, dtype="bool") /* ty=Tensor[(5, 15, 2), bool] */;
  %171 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(5, 15, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %172 = cast(meta[relay.Constant][5] /* ty=Tensor[(5, 15, 2), float64] */, dtype="bool") /* ty=Tensor[(5, 15, 2), bool] */;
  %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %174 = power(%168, %169) /* ty=Tensor[(5, 15, 2), float64] */;
  %175 = greater_equal(%172, %173) /* ty=Tensor[(5, 15, 2), bool] */;
  (%174, %175)
}

def @func_1967(%var_1955: Tensor[(10, 7, 8), bool]) -> (Tensor[(12, 7, 8), bool], Tensor[(1, 7, 8), float32], Tensor[(10, 7, 8), uint16], Tensor[(12, 7, 8), float64]) {
  %176 = @func_925() /* ty=Tensor[(1, 7, 8), float32] */;
  %177 = cast(%176, dtype="bool") /* ty=Tensor[(1, 7, 8), bool] */;
  %178 = cast(meta[relay.Constant][8] /* ty=Tensor[(12, 7, 8), float32] */, dtype="bool") /* ty=Tensor[(12, 7, 8), bool] */;
  %179 = cast(%176, dtype="float64") /* ty=Tensor[(1, 7, 8), float64] */;
  %180 = atanh(%179) /* ty=Tensor[(1, 7, 8), float64] */;
  %181 = cast(%176, dtype="bool") /* ty=Tensor[(1, 7, 8), bool] */;
  %182 = shape_of(%180, dtype="int32") /* ty=Tensor[(3), int32] */;
  %183 = cast(%180, dtype="bool") /* ty=Tensor[(1, 7, 8), bool] */;
  %184 = dyn.reshape(%181, %182, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %185 = equal(%183, %184) /* ty=Tensor[(?, 7, 8), bool] */;
  %186 = cast(%185, dtype="uint16") /* ty=Tensor[(?, 7, 8), uint16] */;
  %187 = cast(%var_1955, dtype="uint16") /* ty=Tensor[(10, 7, 8), uint16] */;
  %188 = cast(meta[relay.Constant][8] /* ty=Tensor[(12, 7, 8), float32] */, dtype="float64") /* ty=Tensor[(12, 7, 8), float64] */;
  %189 = equal(%177, %178) /* ty=Tensor[(12, 7, 8), bool] */;
  %190 = @func_925() /* ty=Tensor[(1, 7, 8), float32] */;
  %191 = bitwise_or(%186, %187) /* ty=Tensor[(10, 7, 8), uint16] */;
  %192 = sinh(%188) /* ty=Tensor[(12, 7, 8), float64] */;
  (%189, %190, %191, %192)
}

def @func_4112(%var_4100: float32) -> (Tensor[(15, 1, 9), float32], Tensor[(16, 7, 8), float64]) {
  %193 = cast(%var_4100, dtype="float32") /* ty=float32 */;
  %194 = cast(meta[relay.Constant][9] /* ty=Tensor[(15, 1, 9), float32] */, dtype="float32") /* ty=Tensor[(15, 1, 9), float32] */;
  %195 = @func_1894() /* ty=(Tensor[(16, 7, 8), float64],) */;
  %196 = floor_divide(%193, %194) /* ty=Tensor[(15, 1, 9), float32] */;
  %197 = %195.0;
  (%196, %197)
}

def @func_4942(%var_4934: Tensor[(9, 11, 11), float32]) -> (Tensor[(9, 11, 11), float32],) {
  %198 = cast(%var_4934, dtype="float32") /* ty=Tensor[(9, 11, 11), float32] */;
  %199 = log(%198) /* ty=Tensor[(9, 11, 11), float32] */;
  (%199,)
}

def @func_3079() -> (Tensor[(5, 15, 2), float64], Tensor[(9, 7, 8), int32], Tensor[(504), float64]) {
  %200 = @func_676() /* ty=(Tensor[(5, 15, 2), float64], Tensor[(5, 15, 2), bool]) */;
  %201 = cast(meta[relay.Constant][10] /* ty=Tensor[(504), float64] */, dtype="float64") /* ty=Tensor[(504), float64] */;
  %202 = reshape(%201, newshape=[9, 7, 8]) /* ty=Tensor[(9, 7, 8), float64] */;
  %203 = @func_1340(%202) /* ty=(Tensor[(9, 7, 8), int32],) */;
  %204 = %200.0;
  %205 = %203.0;
  (%204, %205, meta[relay.Constant][10] /* ty=Tensor[(504), float64] */)
}

def @func_5275() -> (Tensor[(1, 7, 8), float64], Tensor[(12, 7, 8), float64], Tensor[(560), bool]) {
  %206 = @func_4382() /* ty=(Tensor[(1, 7, 8), float64], Tensor[(1, 7, 8), float64]) */;
  %207 = cast(meta[relay.Constant][11] /* ty=Tensor[(560), bool] */, dtype="bool") /* ty=Tensor[(560), bool] */;
  %208 = reshape(%207, newshape=[10, 7, 8]) /* ty=Tensor[(10, 7, 8), bool] */;
  %209 = @func_1967(%208) /* ty=(Tensor[(12, 7, 8), bool], Tensor[(1, 7, 8), float32], Tensor[(10, 7, 8), uint16], Tensor[(12, 7, 8), float64]) */;
  %210 = %206.0;
  %211 = %209.3;
  (%210, %211, meta[relay.Constant][11] /* ty=Tensor[(560), bool] */)
}

def @func_5518() -> (Tensor[(16, 7, 8), float64],) {
  %212 = @func_5314() /* ty=Tensor[(16, 7, 8), float64] */;
  %213 = cast(%212, dtype="float64") /* ty=Tensor[(16, 7, 8), float64] */;
  %214 = erf(%213) /* ty=Tensor[(16, 7, 8), float64] */;
  (%214,)
}

def @func_3604(%var_3565: Tensor[(5, 7, 8), float32]) -> (Tensor[(5, 7, 8), float64], Tensor[(16, 7, 8), float64], Tensor[(72), float32]) {
  %215 = @func_1916() /* ty=(Tensor[(1, 7, 8), float32],) */;
  %216 = %215.0;
  %217 = cast(%216, dtype="float64") /* ty=Tensor[(1, 7, 8), float64] */;
  %218 = cast(%var_3565, dtype="float64") /* ty=Tensor[(5, 7, 8), float64] */;
  %219 = @func_1894() /* ty=(Tensor[(16, 7, 8), float64],) */;
  %220 = @func_3034() /* ty=(Tensor[(72), float32],) */;
  %221 = minimum(%217, %218) /* ty=Tensor[(5, 7, 8), float64] */;
  %222 = %219.0;
  %223 = %220.0;
  (%221, %222, %223)
}

def @func_4254() -> Tensor[(?, 7, 8), int64] {
  %224 = @func_1578() /* ty=(Tensor[(13, 10, 2), float32], Tensor[(?, 7, 8), int64]) */;
  %224.1
}

def @func_1130(%var_1115: Tensor[(260), float32]) -> (Tensor[(1, 7, 8), float64], Tensor[(13, 10, 2), uint32], Tensor[(260), float64]) {
  %225 = @func_1071() /* ty=(Tensor[(1, 7, 8), float64],) */;
  %226 = cast(%var_1115, dtype="float32") /* ty=Tensor[(260), float32] */;
  %227 = cast(%var_1115, dtype="float32") /* ty=Tensor[(260), float32] */;
  %228 = cast(%var_1115, dtype="float32") /* ty=Tensor[(260), float32] */;
  %229 = reshape(%226, newshape=[13, 10, 2]) /* ty=Tensor[(13, 10, 2), float32] */;
  %230 = reshape(%227, newshape=[13, 10, 2]) /* ty=Tensor[(13, 10, 2), float32] */;
  %231 = reshape(%228, newshape=[13, 10, 2]) /* ty=Tensor[(13, 10, 2), float32] */;
  %232 = @func_410(%229, %230, %231) /* ty=(Tensor[(13, 10, 2), float32], Tensor[(13, 10, 2), uint32]) */;
  %233 = cast(%var_1115, dtype="float32") /* ty=Tensor[(260), float32] */;
  %234 = log10(%233) /* ty=Tensor[(260), float32] */;
  %235 = cast(%234, dtype="float64") /* ty=Tensor[(260), float64] */;
  %236 = %225.0;
  %237 = %232.1;
  %238 = sqrt(%235) /* ty=Tensor[(260), float64] */;
  (%236, %237, %238)
}

def @func_4778() -> (Tensor[(1, 7, 8), float64],) {
  %239 = @func_3536() /* ty=(Tensor[(1, 7, 8), float64],) */;
  %240 = %239.0;
  (%240,)
}

def @func_7381() -> Tensor[(?, 7, 8), int64] {
  @func_4254() /* ty=Tensor[(?, 7, 8), int64] */
}

def @func_6249() -> (Tensor[(72), float32], Tensor[(?, 7, 8), int64], Tensor[(5, 15, 2), float64]) {
  %241 = @func_2869() /* ty=(Tensor[(1, 7, 8), float64],) */;
  %242 = %241.0;
  %243 = cast(%242, dtype="float32") /* ty=Tensor[(1, 7, 8), float32] */;
  %244 = erf(%243) /* ty=Tensor[(1, 7, 8), float32] */;
  %245 = cast(%244, dtype="int64") /* ty=Tensor[(1, 7, 8), int64] */;
  %246 = shape_of(%242, dtype="int32") /* ty=Tensor[(3), int32] */;
  %247 = cast(%242, dtype="int64") /* ty=Tensor[(1, 7, 8), int64] */;
  %248 = dyn.reshape(%245, %246, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %249 = @func_3079() /* ty=(Tensor[(5, 15, 2), float64], Tensor[(9, 7, 8), int32], Tensor[(504), float64]) */;
  %250 = @func_2899() /* ty=Tensor[(72), float32] */;
  %251 = bitwise_or(%247, %248) /* ty=Tensor[(?, 7, 8), int64] */;
  %252 = %249.0;
  (%250, %251, %252)
}

def @func_966(%var_939: Tensor[(16, 7, 8), float64], %var_947: Tensor[(36, 2), float32]) -> (Tensor[(16, 7, 8), float64], Tensor[(36, 2), bool], Tensor[(1, 7, 8), float64]) {
  %253 = @func_600() /* ty=(Tensor[(1, 7, 8), float64],) */;
  %254 = %253.0;
  %255 = cast(%254, dtype="float64") /* ty=Tensor[(1, 7, 8), float64] */;
  %256 = cast(%var_939, dtype="float64") /* ty=Tensor[(16, 7, 8), float64] */;
  %257 = cast(%var_947, dtype="float32") /* ty=Tensor[(36, 2), float32] */;
  %258 = reshape(%257, newshape=[9, 4, 2]) /* ty=Tensor[(9, 4, 2), float32] */;
  %259 = @func_720(%258) /* ty=(Tensor[(9, 4, 2), float32], Tensor[(1, 7, 8), float64]) */;
  %260 = %259.0;
  %261 = cast(%260, dtype="bool") /* ty=Tensor[(9, 4, 2), bool] */;
  %262 = shape_of(%var_947, dtype="int32") /* ty=Tensor[(2), int32] */;
  %263 = cast(%var_947, dtype="bool") /* ty=Tensor[(36, 2), bool] */;
  %264 = dyn.reshape(%261, %262, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %265 = floor_mod(%255, %256) /* ty=Tensor[(16, 7, 8), float64] */;
  %266 = greater(%263, %264) /* ty=Tensor[(36, 2), bool] */;
  %267 = @func_495() /* ty=Tensor[(1, 7, 8), float64] */;
  (%265, %266, %267)
}

def @func_7691(%var_7677: Tensor[(15, 7, 8), float64]) -> Tensor[(15, 7, 8), float64] {
  %268 = @func_4280() /* ty=(Tensor[(1, 7, 8), float64],) */;
  %269 = %268.0;
  %270 = cast(%269, dtype="float64") /* ty=Tensor[(1, 7, 8), float64] */;
  %271 = cast(%var_7677, dtype="float64") /* ty=Tensor[(15, 7, 8), float64] */;
  floor_divide(%270, %271) /* ty=Tensor[(15, 7, 8), float64] */
}

def @func_1683(%var_1670: Tensor[(260), float32]) -> (Tensor[(?, 7, 8), int64], Tensor[(13, 10, 2), float32], Tensor[(260), float32]) {
  %272 = @func_1578() /* ty=(Tensor[(13, 10, 2), float32], Tensor[(?, 7, 8), int64]) */;
  %273 = cast(%var_1670, dtype="float32") /* ty=Tensor[(260), float32] */;
  %274 = cast(%var_1670, dtype="float32") /* ty=Tensor[(260), float32] */;
  %275 = cast(%var_1670, dtype="float32") /* ty=Tensor[(260), float32] */;
  %276 = reshape(%273, newshape=[13, 10, 2]) /* ty=Tensor[(13, 10, 2), float32] */;
  %277 = reshape(%274, newshape=[13, 10, 2]) /* ty=Tensor[(13, 10, 2), float32] */;
  %278 = reshape(%275, newshape=[13, 10, 2]) /* ty=Tensor[(13, 10, 2), float32] */;
  %279 = @func_410(%276, %277, %278) /* ty=(Tensor[(13, 10, 2), float32], Tensor[(13, 10, 2), uint32]) */;
  %280 = %272.1;
  %281 = %279.0;
  (%280, %281, %var_1670)
}

def @func_495() -> Tensor[(1, 7, 8), float64] {
  %282 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 7, 8), float64] */, dtype="float64") /* ty=Tensor[(1, 7, 8), float64] */;
  cosh(%282) /* ty=Tensor[(1, 7, 8), float64] */
}

def @func_5984() -> Tensor[(14, 7, 8), float64] {
  %283 = @func_2122() /* ty=(Tensor[(1, 7, 8), float32], Tensor[(13, 14, 2), float32], Tensor[(364), float32], Tensor[(90, 1), float64], Tensor[(16, 7, 8), float64], Tensor[(1, 7, 8), float64]) */;
  %284 = %283.5;
  %285 = cast(%284, dtype="float64") /* ty=Tensor[(1, 7, 8), float64] */;
  %286 = cast(meta[relay.Constant][13] /* ty=Tensor[(14, 7, 8), float64] */, dtype="float64") /* ty=Tensor[(14, 7, 8), float64] */;
  add(%285, %286) /* ty=Tensor[(14, 7, 8), float64] */
}

def @func_3006(%var_2976: int32, %var_2977: Tensor[(7, 13, 10), int32]) -> Tensor[(7, 13, 10), float32] {
  %287 = cast(%var_2976, dtype="int32") /* ty=int32 */;
  %288 = cast(%var_2977, dtype="int32") /* ty=Tensor[(7, 13, 10), int32] */;
  %289 = logical_xor(%287, %288) /* ty=Tensor[(7, 13, 10), int32] */;
  %290 = cast(%289, dtype="float32") /* ty=Tensor[(7, 13, 10), float32] */;
  log(%290) /* ty=Tensor[(7, 13, 10), float32] */
}

def @func_1421(%var_1360: Tensor[(1, 7, 8), float64]) -> (Tensor[(?, 7, 8), float32], Tensor[(1, 7, 8), float64], Tensor[(?, 9, 10), float64], Tensor[(90), float64], Tensor[(5, 7, 8), uint8], Tensor[(9, 7, 8), int32], Tensor[(504), float64], Tensor[(13, 10, 2), float32], Tensor[(260), float32]) {
  %291 = @func_574() /* ty=Tensor[(1, 7, 8), float64] */;
  %292 = cast(%var_1360, dtype="float32") /* ty=Tensor[(1, 7, 8), float32] */;
  %293 = shape_of(%291, dtype="int32") /* ty=Tensor[(3), int32] */;
  %294 = cast(%291, dtype="float32") /* ty=Tensor[(1, 7, 8), float32] */;
  %295 = dyn.reshape(%292, %293, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %296 = @func_1071() /* ty=(Tensor[(1, 7, 8), float64],) */;
  %297 = cast(meta[relay.Constant][14] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %298 = cast(meta[relay.Constant][14] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %299 = reshape(%297, newshape=[1, 9, 10]) /* ty=Tensor[(1, 9, 10), float64] */;
  %300 = reshape(%298, newshape=[1, 9, 10]) /* ty=Tensor[(1, 9, 10), float64] */;
  %301 = @func_746(%299, %300) /* ty=(Tensor[(?, 9, 10), float64],) */;
  %302 = cast(%291, dtype="uint8") /* ty=Tensor[(1, 7, 8), uint8] */;
  %303 = cast(meta[relay.Constant][15] /* ty=Tensor[(5, 7, 8), float64] */, dtype="uint8") /* ty=Tensor[(5, 7, 8), uint8] */;
  %304 = cast(meta[relay.Constant][16] /* ty=Tensor[(504), float64] */, dtype="float64") /* ty=Tensor[(504), float64] */;
  %305 = reshape(%304, newshape=[9, 7, 8]) /* ty=Tensor[(9, 7, 8), float64] */;
  %306 = @func_1340(%305) /* ty=(Tensor[(9, 7, 8), int32],) */;
  %307 = cast(meta[relay.Constant][17] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
  %308 = cast(meta[relay.Constant][17] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
  %309 = cast(meta[relay.Constant][17] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
  %310 = reshape(%307, newshape=[13, 10, 2]) /* ty=Tensor[(13, 10, 2), float32] */;
  %311 = reshape(%308, newshape=[13, 10, 2]) /* ty=Tensor[(13, 10, 2), float32] */;
  %312 = reshape(%309, newshape=[13, 10, 2]) /* ty=Tensor[(13, 10, 2), float32] */;
  %313 = @func_410(%310, %311, %312) /* ty=(Tensor[(13, 10, 2), float32], Tensor[(13, 10, 2), uint32]) */;
  %314 = floor_divide(%294, %295) /* ty=Tensor[(?, 7, 8), float32] */;
  %315 = %296.0;
  %316 = %301.0;
  %317 = logical_xor(%302, %303) /* ty=Tensor[(5, 7, 8), uint8] */;
  %318 = %306.0;
  %319 = %313.0;
  (%314, %315, %316, meta[relay.Constant][14] /* ty=Tensor[(90), float64] */, %317, %318, meta[relay.Constant][16] /* ty=Tensor[(504), float64] */, %319, meta[relay.Constant][17] /* ty=Tensor[(260), float32] */)
}

def @func_2675() -> (Tensor[(1, 7, 8), float32],) {
  %320 = @func_495() /* ty=Tensor[(1, 7, 8), float64] */;
  %321 = cast(%320, dtype="float32") /* ty=Tensor[(1, 7, 8), float32] */;
  %322 = sqrt(%321) /* ty=Tensor[(1, 7, 8), float32] */;
  (%322,)
}

def @func_4325(%var_4315: Tensor[(5, 15, 2), float64]) -> (Tensor[(72), float32], Tensor[(5, 15, 2), bool]) {
  %323 = @func_3984() /* ty=(Tensor[(1, 7, 8), float64], Tensor[(72), float32]) */;
  %324 = @func_676() /* ty=(Tensor[(5, 15, 2), float64], Tensor[(5, 15, 2), bool]) */;
  %325 = %324.0;
  %326 = cast(%var_4315, dtype="bool") /* ty=Tensor[(5, 15, 2), bool] */;
  %327 = shape_of(%325, dtype="int32") /* ty=Tensor[(3), int32] */;
  %328 = cast(%325, dtype="bool") /* ty=Tensor[(5, 15, 2), bool] */;
  %329 = dyn.reshape(%326, %327, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %330 = %323.1;
  %331 = less_equal(%328, %329) /* ty=Tensor[(5, 15, 2), bool] */;
  (%330, %331)
}

def @func_3918(%var_3891: Tensor[(1, 7, 8), float32], %var_3914: Tensor[(150), float64]) -> (Tensor[(?, 7, 8), uint8], Tensor[(5, 15, 2), uint64], Tensor[(150), float64]) {
  %332 = @func_925() /* ty=Tensor[(1, 7, 8), float32] */;
  %333 = cast(%var_3891, dtype="uint8") /* ty=Tensor[(1, 7, 8), uint8] */;
  %334 = shape_of(%332, dtype="int32") /* ty=Tensor[(3), int32] */;
  %335 = cast(%332, dtype="uint8") /* ty=Tensor[(1, 7, 8), uint8] */;
  %336 = dyn.reshape(%333, %334, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %337 = cast(%var_3914, dtype="float64") /* ty=Tensor[(150), float64] */;
  %338 = reshape(%337, newshape=[5, 15, 2]) /* ty=Tensor[(5, 15, 2), float64] */;
  %339 = @func_3329(%338) /* ty=(Tensor[(5, 15, 2), uint64],) */;
  %340 = right_shift(%335, %336) /* ty=Tensor[(?, 7, 8), uint8] */;
  %341 = %339.0;
  (%340, %341, %var_3914)
}

def @func_5234(%var_5223: Tensor[(11, 1, 5), float32]) -> Tensor[(11, ?, 5), float64] {
  %342 = cast(%var_5223, dtype="float32") /* ty=Tensor[(11, 1, 5), float32] */;
  %343 = acosh(%342) /* ty=Tensor[(11, 1, 5), float32] */;
  %344 = cast(%var_5223, dtype="float64") /* ty=Tensor[(11, 1, 5), float64] */;
  %345 = shape_of(%343, dtype="int32") /* ty=Tensor[(3), int32] */;
  %346 = cast(%343, dtype="float64") /* ty=Tensor[(11, 1, 5), float64] */;
  %347 = dyn.reshape(%344, %345, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%346, %347) /* ty=Tensor[(11, ?, 5), float64] */
}

def @main(%var_7819: Tensor[(2, 16, 16), float64]) -> Tensor[(2, 16, 16), bool] {
  %348 = cast(%var_7819, dtype="float64") /* ty=Tensor[(2, 16, 16), float64] */;
  %349 = asinh(%348) /* ty=Tensor[(2, 16, 16), float64] */;
  %350 = cast(%var_7819, dtype="bool") /* ty=Tensor[(2, 16, 16), bool] */;
  %351 = shape_of(%349, dtype="int32") /* ty=Tensor[(3), int32] */;
  %352 = cast(%349, dtype="bool") /* ty=Tensor[(2, 16, 16), bool] */;
  %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%352, %353) /* ty=Tensor[(2, 16, 16), bool] */
}

def @func_2899() -> Tensor[(72), float32] {
  @func_2584() /* ty=Tensor[(72), float32] */
}

def @func_1340(%var_1335: Tensor[(9, 7, 8), float64]) -> (Tensor[(9, 7, 8), int32],) {
  %354 = @func_1071() /* ty=(Tensor[(1, 7, 8), float64],) */;
  %355 = %354.0;
  %356 = cast(%355, dtype="int32") /* ty=Tensor[(1, 7, 8), int32] */;
  %357 = cast(%var_1335, dtype="int32") /* ty=Tensor[(9, 7, 8), int32] */;
  %358 = multiply(%356, %357) /* ty=Tensor[(9, 7, 8), int32] */;
  (%358,)
}

def @func_4449() -> Tensor[(1, 7, 8), float32] {
  @func_925() /* ty=Tensor[(1, 7, 8), float32] */
}

def @func_4521() -> (Tensor[(72), float32], Tensor[(1, 7, 8), float64]) {
  %359 = @func_2899() /* ty=Tensor[(72), float32] */;
  %360 = @func_526() /* ty=Tensor[(1, 7, 8), float64] */;
  (%359, %360)
}

def @func_4548(%var_4524: Tensor[(2, 8, 15), int64], %var_4525: Tensor[(2, 8, 15), int64]) -> (Tensor[(2, 8, 15), int64], Tensor[(1, 7, 8), float64]) {
  %361 = cast(%var_4525, dtype="int64") /* ty=Tensor[(2, 8, 15), int64] */;
  %362 = shape_of(%var_4524, dtype="int32") /* ty=Tensor[(3), int32] */;
  %363 = cast(%var_4524, dtype="int64") /* ty=Tensor[(2, 8, 15), int64] */;
  %364 = dyn.reshape(%361, %362, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %365 = @func_4280() /* ty=(Tensor[(1, 7, 8), float64],) */;
  %366 = logical_xor(%363, %364) /* ty=Tensor[(2, 8, 15), int64] */;
  %367 = %365.0;
  (%366, %367)
}

def @func_2391() -> (Tensor[(72), float32],) {
  %368 = @func_1260() /* ty=(Tensor[(1, 7, 8), float64], Tensor[(72), float32], Tensor[(?, 7, 8), bool]) */;
  %369 = %368.1;
  (%369,)
}

def @func_6357() -> (Tensor[(?, 7, 8), int64],) {
  %370 = @func_3681() /* ty=(Tensor[(?, 7, 8), int64], Tensor[(72), float32], Tensor[(1, 7, 8), float64]) */;
  %371 = %370.0;
  (%371,)
}

def @func_3805(%var_3746: Tensor[(224, 4), float64]) -> (Tensor[(16, 7, 8), float32], Tensor[(1, 7, 8), float64], Tensor[(260), float32], Tensor[(224, 4), float64], Tensor[(224, 4), uint16], Tensor[(1, 7, 8), float64]) {
  %372 = cast(%var_3746, dtype="float64") /* ty=Tensor[(224, 4), float64] */;
  %373 = @func_2122() /* ty=(Tensor[(1, 7, 8), float32], Tensor[(13, 14, 2), float32], Tensor[(364), float32], Tensor[(90, 1), float64], Tensor[(16, 7, 8), float64], Tensor[(1, 7, 8), float64]) */;
  %374 = %373.5;
  %375 = cast(%374, dtype="float64") /* ty=Tensor[(1, 7, 8), float64] */;
  %376 = reshape(%372, newshape=[16, 7, 8]) /* ty=Tensor[(16, 7, 8), float64] */;
  %377 = reshape(%375, newshape=[56]) /* ty=Tensor[(56), float64] */;
  %378 = @func_2490(%376, %377) /* ty=(Tensor[(16, 7, 8), float32], Tensor[(16, 7, 8), bool], Tensor[(260), float32], Tensor[(56), float64]) */;
  %379 = cast(%374, dtype="float64") /* ty=Tensor[(1, 7, 8), float64] */;
  %380 = %378.0;
  %381 = cast(%380, dtype="float64") /* ty=Tensor[(16, 7, 8), float64] */;
  %382 = cast(%374, dtype="float64") /* ty=Tensor[(1, 7, 8), float64] */;
  %383 = reshape(%381, newshape=[16, 7, 8]) /* ty=Tensor[(16, 7, 8), float64] */;
  %384 = reshape(%382, newshape=[56]) /* ty=Tensor[(56), float64] */;
  %385 = @func_2490(%383, %384) /* ty=(Tensor[(16, 7, 8), float32], Tensor[(16, 7, 8), bool], Tensor[(260), float32], Tensor[(56), float64]) */;
  %386 = cast(%var_3746, dtype="float64") /* ty=Tensor[(224, 4), float64] */;
  %387 = rsqrt(%386) /* ty=Tensor[(224, 4), float64] */;
  %388 = cast(%387, dtype="float32") /* ty=Tensor[(224, 4), float32] */;
  %389 = acos(%388) /* ty=Tensor[(224, 4), float32] */;
  %390 = cast(%389, dtype="float64") /* ty=Tensor[(224, 4), float64] */;
  %391 = cast(%389, dtype="float64") /* ty=Tensor[(224, 4), float64] */;
  %392 = cos(%391) /* ty=Tensor[(224, 4), float64] */;
  %393 = cast(%389, dtype="uint16") /* ty=Tensor[(224, 4), uint16] */;
  %394 = shape_of(%392, dtype="int32") /* ty=Tensor[(2), int32] */;
  %395 = cast(%392, dtype="uint16") /* ty=Tensor[(224, 4), uint16] */;
  %396 = dyn.reshape(%393, %394, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %397 = @func_2122() /* ty=(Tensor[(1, 7, 8), float32], Tensor[(13, 14, 2), float32], Tensor[(364), float32], Tensor[(90, 1), float64], Tensor[(16, 7, 8), float64], Tensor[(1, 7, 8), float64]) */;
  %398 = acos(%379) /* ty=Tensor[(1, 7, 8), float64] */;
  %399 = %385.2;
  %400 = sinh(%390) /* ty=Tensor[(224, 4), float64] */;
  %401 = logical_xor(%395, %396) /* ty=Tensor[(224, 4), uint16] */;
  %402 = %397.5;
  (%380, %398, %399, %400, %401, %402)
}

def @func_410(%var_358: Tensor[(13, 10, 2), float32], %var_359: Tensor[(13, 10, 2), float32], %var_367: Tensor[(13, 10, 2), float32]) -> (Tensor[(13, 10, 2), float32], Tensor[(13, 10, 2), uint32]) {
  %403 = cast(%var_359, dtype="float32") /* ty=Tensor[(13, 10, 2), float32] */;
  %404 = shape_of(%var_358, dtype="int32") /* ty=Tensor[(3), int32] */;
  %405 = cast(%var_358, dtype="float32") /* ty=Tensor[(13, 10, 2), float32] */;
  %406 = dyn.reshape(%403, %404, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %407 = cast(%var_367, dtype="uint32") /* ty=Tensor[(13, 10, 2), uint32] */;
  %408 = shape_of(%var_358, dtype="int32") /* ty=Tensor[(3), int32] */;
  %409 = cast(%var_358, dtype="uint32") /* ty=Tensor[(13, 10, 2), uint32] */;
  %410 = dyn.reshape(%407, %408, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %411 = floor_mod(%405, %406) /* ty=Tensor[(13, 10, 2), float32] */;
  %412 = maximum(%409, %410) /* ty=Tensor[(13, 10, 2), uint32] */;
  (%411, %412)
}

def @func_6102() -> Tensor[(1, 7, 8), float32] {
  %413 = @func_2675() /* ty=(Tensor[(1, 7, 8), float32],) */;
  %413.0
}

def @func_2053(%var_2045: Tensor[(1, 45), float64]) -> (Tensor[(1, 7, 8), float64], Tensor[(9, 1, 5), float64], Tensor[(1, 45), float64]) {
  %414 = @func_1071() /* ty=(Tensor[(1, 7, 8), float64],) */;
  %415 = cast(%var_2045, dtype="float64") /* ty=Tensor[(1, 45), float64] */;
  %416 = reshape(%415, newshape=[9, 1, 5]) /* ty=Tensor[(9, 1, 5), float64] */;
  %417 = @func_1805(%416) /* ty=(Tensor[(9, 1, 5), float64],) */;
  %418 = %414.0;
  %419 = %417.0;
  (%418, %419, %var_2045)
}

def @func_526() -> Tensor[(1, 7, 8), float64] {
  @func_495() /* ty=Tensor[(1, 7, 8), float64] */
}

def @func_2490(%var_2472: Tensor[(16, 7, 8), float64], %var_2478: Tensor[(56), float64]) -> (Tensor[(16, 7, 8), float32], Tensor[(16, 7, 8), bool], Tensor[(260), float32], Tensor[(56), float64]) {
  %420 = @func_1894() /* ty=(Tensor[(16, 7, 8), float64],) */;
  %421 = %420.0;
  %422 = cast(%421, dtype="float32") /* ty=Tensor[(16, 7, 8), float32] */;
  %423 = cast(%var_2472, dtype="bool") /* ty=Tensor[(16, 7, 8), bool] */;
  %424 = shape_of(%421, dtype="int32") /* ty=Tensor[(3), int32] */;
  %425 = cast(%421, dtype="bool") /* ty=Tensor[(16, 7, 8), bool] */;
  %426 = dyn.reshape(%423, %424, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %427 = cast(%var_2478, dtype="float64") /* ty=Tensor[(56), float64] */;
  %428 = reshape(%427, newshape=[1, 7, 8]) /* ty=Tensor[(1, 7, 8), float64] */;
  %429 = @func_1421(%428) /* ty=(Tensor[(?, 7, 8), float32], Tensor[(1, 7, 8), float64], Tensor[(?, 9, 10), float64], Tensor[(90), float64], Tensor[(5, 7, 8), uint8], Tensor[(9, 7, 8), int32], Tensor[(504), float64], Tensor[(13, 10, 2), float32], Tensor[(260), float32]) */;
  %430 = sigmoid(%422) /* ty=Tensor[(16, 7, 8), float32] */;
  %431 = greater_equal(%425, %426) /* ty=Tensor[(16, 7, 8), bool] */;
  %432 = %429.8;
  (%430, %431, %432, %var_2478)
}

def @func_2971() -> (Tensor[(5, 15, 2), float32], Tensor[(9, 3, 12), uint8], Tensor[(324, 1), uint8], Tensor[(16, 7, 8), int64], Tensor[(896), float64]) {
  %433 = @func_2799() /* ty=(Tensor[(5, 15, 2), float32], Tensor[(?, 7, 8), int64]) */;
  %434 = cast(meta[relay.Constant][18] /* ty=Tensor[(324, 1), uint8] */, dtype="uint8") /* ty=Tensor[(324, 1), uint8] */;
  %435 = reshape(%434, newshape=[9, 3, 12]) /* ty=Tensor[(9, 3, 12), uint8] */;
  %436 = cast(meta[relay.Constant][19] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
  %437 = reshape(%436, newshape=[16, 7, 8]) /* ty=Tensor[(16, 7, 8), float64] */;
  %438 = @func_1764(%437) /* ty=(Tensor[(16, 7, 8), int64], Tensor[(13, 10, 2), float64]) */;
  %439 = %433.0;
  %440 = @func_2411(%435) /* ty=Tensor[(9, 3, 12), uint8] */;
  %441 = %438.0;
  (%439, %440, meta[relay.Constant][18] /* ty=Tensor[(324, 1), uint8] */, %441, meta[relay.Constant][19] /* ty=Tensor[(896), float64] */)
}

def @func_4134() -> Tensor[(1, 7, 8), float64] {
  %442 = @func_1071() /* ty=(Tensor[(1, 7, 8), float64],) */;
  %442.0
}

def @func_2122() -> (Tensor[(1, 7, 8), float32], Tensor[(13, 14, 2), float32], Tensor[(364), float32], Tensor[(90, 1), float64], Tensor[(16, 7, 8), float64], Tensor[(1, 7, 8), float64]) {
  %443 = @func_1316() /* ty=(Tensor[(1, 7, 8), float64],) */;
  %444 = %443.0;
  %445 = cast(%444, dtype="float32") /* ty=Tensor[(1, 7, 8), float32] */;
  %446 = cast(meta[relay.Constant][20] /* ty=Tensor[(364), float32] */, dtype="float32") /* ty=Tensor[(364), float32] */;
  %447 = cast(meta[relay.Constant][21] /* ty=Tensor[(90, 1), float64] */, dtype="float64") /* ty=Tensor[(90, 1), float64] */;
  %448 = reshape(%446, newshape=[13, 14, 2]) /* ty=Tensor[(13, 14, 2), float32] */;
  %449 = reshape(%447, newshape=[90]) /* ty=Tensor[(90), float64] */;
  %450 = @func_1052(%448, %449) /* ty=(Tensor[(13, 14, 2), float32], Tensor[(?, 9, 10), float64], Tensor[(90), float64]) */;
  %451 = @func_1894() /* ty=(Tensor[(16, 7, 8), float64],) */;
  %452 = sinh(%445) /* ty=Tensor[(1, 7, 8), float32] */;
  %453 = %450.0;
  %454 = %451.0;
  %455 = @func_495() /* ty=Tensor[(1, 7, 8), float64] */;
  (%452, %453, meta[relay.Constant][20] /* ty=Tensor[(364), float32] */, meta[relay.Constant][21] /* ty=Tensor[(90, 1), float64] */, %454, %455)
}

def @func_3681() -> (Tensor[(?, 7, 8), int64], Tensor[(72), float32], Tensor[(1, 7, 8), float64]) {
  %456 = @func_2799() /* ty=(Tensor[(5, 15, 2), float32], Tensor[(?, 7, 8), int64]) */;
  %457 = %456.1;
  %458 = @func_2643() /* ty=Tensor[(72), float32] */;
  %459 = @func_574() /* ty=Tensor[(1, 7, 8), float64] */;
  (%457, %458, %459)
}

def @func_4280() -> (Tensor[(1, 7, 8), float64],) {
  %460 = @func_1260() /* ty=(Tensor[(1, 7, 8), float64], Tensor[(72), float32], Tensor[(?, 7, 8), bool]) */;
  %461 = %460.0;
  (%461,)
}

def @func_5314() -> Tensor[(16, 7, 8), float64] {
  %462 = @func_1894() /* ty=(Tensor[(16, 7, 8), float64],) */;
  %462.0
}

def @func_5146(%var_5138: Tensor[(14, 8, 6), uint8], %var_5139: Tensor[(14, 8, 6), uint8]) -> (Tensor[(14, 8, 6), uint8],) {
  %463 = cast(%var_5139, dtype="uint8") /* ty=Tensor[(14, 8, 6), uint8] */;
  %464 = shape_of(%var_5138, dtype="int32") /* ty=Tensor[(3), int32] */;
  %465 = cast(%var_5138, dtype="uint8") /* ty=Tensor[(14, 8, 6), uint8] */;
  %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %467 = bitwise_xor(%465, %466) /* ty=Tensor[(14, 8, 6), uint8] */;
  (%467,)
}

def @func_7339(%var_7328: Tensor[(16, 2, 4), uint32], %var_7329: Tensor[(16, 2, 4), uint32]) -> (Tensor[(16, 2, 4), uint32],) {
  %468 = cast(%var_7329, dtype="uint32") /* ty=Tensor[(16, 2, 4), uint32] */;
  %469 = shape_of(%var_7328, dtype="int32") /* ty=Tensor[(3), int32] */;
  %470 = cast(%var_7328, dtype="uint32") /* ty=Tensor[(16, 2, 4), uint32] */;
  %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %472 = right_shift(%470, %471) /* ty=Tensor[(16, 2, 4), uint32] */;
  (%472,)
}

def @func_1071() -> (Tensor[(1, 7, 8), float64],) {
  %473 = @func_526() /* ty=Tensor[(1, 7, 8), float64] */;
  (%473,)
}

def @func_6843(%var_6819: Tensor[(896), float64]) -> (Tensor[(72), float32], Tensor[(1, 7, 8), float64], Tensor[(896), float64], Tensor[(260), uint32], Tensor[(1, 7, 8), float64]) {
  %474 = cast(%var_6819, dtype="float64") /* ty=Tensor[(896), float64] */;
  %475 = cast(meta[relay.Constant][22] /* ty=Tensor[(260), uint32] */, dtype="uint32") /* ty=Tensor[(260), uint32] */;
  %476 = reshape(%474, newshape=[896]) /* ty=Tensor[(896), float64] */;
  %477 = reshape(%475, newshape=[13, 10, 2]) /* ty=Tensor[(13, 10, 2), uint32] */;
  %478 = @func_6090(%476, %477) /* ty=(Tensor[(72), float32], Tensor[(896), float64], Tensor[(13, 10, 2), bool], Tensor[(45), float64], Tensor[(4536), bool], Tensor[(1, 7, 8), float64], Tensor[(1, 7, 8), float64]) */;
  %479 = @func_2899() /* ty=Tensor[(72), float32] */;
  %480 = %478.5;
  %481 = @func_4134() /* ty=Tensor[(1, 7, 8), float64] */;
  (%479, %480, %var_6819, meta[relay.Constant][22] /* ty=Tensor[(260), uint32] */, %481)
}

def @func_7564(%var_7532: Tensor[(9, 11, 2), float64]) -> (Tensor[(72), float32], Tensor[(9, 11, 2), bool], Tensor[(5, 15, 2), float32], Tensor[(16, 7, 8), float64]) {
  %482 = @func_2391() /* ty=(Tensor[(72), float32],) */;
  %483 = cast(%var_7532, dtype="float64") /* ty=Tensor[(9, 11, 2), float64] */;
  %484 = rsqrt(%483) /* ty=Tensor[(9, 11, 2), float64] */;
  %485 = cast(%var_7532, dtype="bool") /* ty=Tensor[(9, 11, 2), bool] */;
  %486 = shape_of(%484, dtype="int32") /* ty=Tensor[(3), int32] */;
  %487 = cast(%484, dtype="bool") /* ty=Tensor[(9, 11, 2), bool] */;
  %488 = dyn.reshape(%485, %486, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %489 = @func_2799() /* ty=(Tensor[(5, 15, 2), float32], Tensor[(?, 7, 8), int64]) */;
  %490 = @func_6913() /* ty=(Tensor[(16, 7, 8), float64],) */;
  %491 = %482.0;
  %492 = not_equal(%487, %488) /* ty=Tensor[(9, 11, 2), bool] */;
  %493 = %489.0;
  %494 = %490.0;
  (%491, %492, %493, %494)
}

def @func_2334() -> (Tensor[(9, 7, 8), uint32], Tensor[(13, 10, 2), float64]) {
  %495 = @func_1578() /* ty=(Tensor[(13, 10, 2), float32], Tensor[(?, 7, 8), int64]) */;
  %496 = %495.1;
  %497 = cast(%496, dtype="uint32") /* ty=Tensor[(?, 7, 8), uint32] */;
  %498 = cast(meta[relay.Constant][23] /* ty=Tensor[(9, 7, 8), int64] */, dtype="uint32") /* ty=Tensor[(9, 7, 8), uint32] */;
  %499 = @func_1733() /* ty=(Tensor[(13, 10, 2), float32], Tensor[(13, 10, 2), float64], Tensor[(1, 7, 8), float64]) */;
  %500 = maximum(%497, %498) /* ty=Tensor[(9, 7, 8), uint32] */;
  %501 = %499.1;
  (%500, %501)
}

def @func_5722() -> (Tensor[(13, 10, 2), float32],) {
  %502 = @func_1733() /* ty=(Tensor[(13, 10, 2), float32], Tensor[(13, 10, 2), float64], Tensor[(1, 7, 8), float64]) */;
  %503 = %502.0;
  (%503,)
}

def @func_3329(%var_3310: Tensor[(5, 15, 2), float64]) -> (Tensor[(5, 15, 2), uint64],) {
  %504 = @func_676() /* ty=(Tensor[(5, 15, 2), float64], Tensor[(5, 15, 2), bool]) */;
  %505 = %504.0;
  %506 = cast(%var_3310, dtype="uint64") /* ty=Tensor[(5, 15, 2), uint64] */;
  %507 = shape_of(%505, dtype="int32") /* ty=Tensor[(3), int32] */;
  %508 = cast(%505, dtype="uint64") /* ty=Tensor[(5, 15, 2), uint64] */;
  %509 = dyn.reshape(%506, %507, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %510 = multiply(%508, %509) /* ty=Tensor[(5, 15, 2), uint64] */;
  (%510,)
}

def @func_7628(%var_7620: Tensor[(90), float64]) -> (Tensor[(13, 10, 2), float32], Tensor[(16, 7, 8), int64], Tensor[(1, 7, 8), float64], Tensor[(?, 9, 10), float64], Tensor[(90), float64]) {
  %511 = @func_5722() /* ty=(Tensor[(13, 10, 2), float32],) */;
  %512 = @func_3718() /* ty=(Tensor[(1, 7, 8), float32], Tensor[(16, 7, 8), int64], Tensor[(896), float64]) */;
  %513 = cast(%var_7620, dtype="float64") /* ty=Tensor[(90), float64] */;
  %514 = cast(%var_7620, dtype="float64") /* ty=Tensor[(90), float64] */;
  %515 = reshape(%513, newshape=[1, 9, 10]) /* ty=Tensor[(1, 9, 10), float64] */;
  %516 = reshape(%514, newshape=[1, 9, 10]) /* ty=Tensor[(1, 9, 10), float64] */;
  %517 = @func_746(%515, %516) /* ty=(Tensor[(?, 9, 10), float64],) */;
  %518 = %511.0;
  %519 = %512.1;
  %520 = @func_3132() /* ty=Tensor[(1, 7, 8), float64] */;
  %521 = %517.0;
  (%518, %519, %520, %521, %var_7620)
}

def @func_2584() -> Tensor[(72), float32] {
  %522 = @func_2291() /* ty=(Tensor[(1, 7, 8), float32], Tensor[(72), float32]) */;
  %522.1
}

def @func_2773(%var_2731: Tensor[(16, 1, 2), float64], %var_2768: Tensor[(504, 1), float64]) -> (Tensor[(16, 14, 2), float64], Tensor[(13, 10, 2), float64], Tensor[(9, 7, 8), int32], Tensor[(504, 1), float64]) {
  %523 = cast(%var_2731, dtype="float64") /* ty=Tensor[(16, 1, 2), float64] */;
  %524 = cast(meta[relay.Constant][24] /* ty=Tensor[(16, 14, 2), float64] */, dtype="float64") /* ty=Tensor[(16, 14, 2), float64] */;
  %525 = @func_2334() /* ty=(Tensor[(9, 7, 8), uint32], Tensor[(13, 10, 2), float64]) */;
  %526 = cast(%var_2768, dtype="float64") /* ty=Tensor[(504, 1), float64] */;
  %527 = reshape(%526, newshape=[9, 7, 8]) /* ty=Tensor[(9, 7, 8), float64] */;
  %528 = @func_1340(%527) /* ty=(Tensor[(9, 7, 8), int32],) */;
  %529 = power(%523, %524) /* ty=Tensor[(16, 14, 2), float64] */;
  %530 = %525.1;
  %531 = %528.0;
  (%529, %530, %531, %var_2768)
}

def @func_6163() -> (Tensor[(1, 7, 8), float64],) {
  %532 = @func_4134() /* ty=Tensor[(1, 7, 8), float64] */;
  (%532,)
}

def @func_3718() -> (Tensor[(1, 7, 8), float32], Tensor[(16, 7, 8), int64], Tensor[(896), float64]) {
  %533 = @func_1916() /* ty=(Tensor[(1, 7, 8), float32],) */;
  %534 = cast(meta[relay.Constant][25] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
  %535 = reshape(%534, newshape=[16, 7, 8]) /* ty=Tensor[(16, 7, 8), float64] */;
  %536 = @func_1764(%535) /* ty=(Tensor[(16, 7, 8), int64], Tensor[(13, 10, 2), float64]) */;
  %537 = %533.0;
  %538 = %536.0;
  (%537, %538, meta[relay.Constant][25] /* ty=Tensor[(896), float64] */)
}

def @func_1052(%var_1025: Tensor[(13, 14, 2), float32], %var_1044: Tensor[(90), float64]) -> (Tensor[(13, 14, 2), float32], Tensor[(?, 9, 10), float64], Tensor[(90), float64]) {
  %539 = cast(%var_1025, dtype="float32") /* ty=Tensor[(13, 14, 2), float32] */;
  %540 = cast(%var_1044, dtype="float64") /* ty=Tensor[(90), float64] */;
  %541 = cast(%var_1044, dtype="float64") /* ty=Tensor[(90), float64] */;
  %542 = reshape(%540, newshape=[1, 9, 10]) /* ty=Tensor[(1, 9, 10), float64] */;
  %543 = reshape(%541, newshape=[1, 9, 10]) /* ty=Tensor[(1, 9, 10), float64] */;
  %544 = @func_746(%542, %543) /* ty=(Tensor[(?, 9, 10), float64],) */;
  %545 = sinh(%539) /* ty=Tensor[(13, 14, 2), float32] */;
  %546 = %544.0;
  (%545, %546, %var_1044)
}

def @func_7402() -> (Tensor[(1, 7, 8), float64],) {
  %547 = @func_4449() /* ty=Tensor[(1, 7, 8), float32] */;
  %548 = cast(%547, dtype="float64") /* ty=Tensor[(1, 7, 8), float64] */;
  %549 = log(%548) /* ty=Tensor[(1, 7, 8), float64] */;
  (%549,)
}

def @func_4349() -> (Tensor[(1, 7, 8), float64],) {
  %550 = @func_3132() /* ty=Tensor[(1, 7, 8), float64] */;
  (%550,)
}

def @func_3519(%var_3466: Tensor[(5, 11, 2), float64]) -> (Tensor[(5, 11, 2), float64], Tensor[(?, 7, 8), float32], Tensor[(56), float64], Tensor[(?, 7, 8), int64], Tensor[(1, 7, 8), float64]) {
  %551 = cast(meta[relay.Constant][26] /* ty=Tensor[(5, 11, 2), float64] */, dtype="float64") /* ty=Tensor[(5, 11, 2), float64] */;
  %552 = shape_of(%var_3466, dtype="int32") /* ty=Tensor[(3), int32] */;
  %553 = cast(%var_3466, dtype="float64") /* ty=Tensor[(5, 11, 2), float64] */;
  %554 = dyn.reshape(%551, %552, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %555 = cast(meta[relay.Constant][27] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
  %556 = reshape(%555, newshape=[1, 7, 8]) /* ty=Tensor[(1, 7, 8), float64] */;
  %557 = @func_1421(%556) /* ty=(Tensor[(?, 7, 8), float32], Tensor[(1, 7, 8), float64], Tensor[(?, 9, 10), float64], Tensor[(90), float64], Tensor[(5, 7, 8), uint8], Tensor[(9, 7, 8), int32], Tensor[(504), float64], Tensor[(13, 10, 2), float32], Tensor[(260), float32]) */;
  %558 = @func_1578() /* ty=(Tensor[(13, 10, 2), float32], Tensor[(?, 7, 8), int64]) */;
  %559 = mod(%553, %554) /* ty=Tensor[(5, 11, 2), float64] */;
  %560 = %557.0;
  %561 = %558.1;
  %562 = @func_526() /* ty=Tensor[(1, 7, 8), float64] */;
  (%559, %560, meta[relay.Constant][27] /* ty=Tensor[(56), float64] */, %561, %562)
}

def @func_1497(%var_1463: Tensor[(16, 7, 8), float64]) -> (Tensor[(13, 10, 2), uint32], Tensor[(260), float32], Tensor[(16, 7, 8), int16], Tensor[(5, 15, 2), bool], Tensor[(16, 7, 8), int64], Tensor[(13, 10, 2), uint32]) {
  %563 = cast(meta[relay.Constant][28] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
  %564 = reshape(%563, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %565 = @func_1130(%564) /* ty=(Tensor[(1, 7, 8), float64], Tensor[(13, 10, 2), uint32], Tensor[(260), float64]) */;
  %566 = @func_574() /* ty=Tensor[(1, 7, 8), float64] */;
  %567 = cast(%566, dtype="int16") /* ty=Tensor[(1, 7, 8), int16] */;
  %568 = cast(%var_1463, dtype="int16") /* ty=Tensor[(16, 7, 8), int16] */;
  %569 = @func_676() /* ty=(Tensor[(5, 15, 2), float64], Tensor[(5, 15, 2), bool]) */;
  %570 = cast(%var_1463, dtype="int64") /* ty=Tensor[(16, 7, 8), int64] */;
  %571 = cast(%566, dtype="int64") /* ty=Tensor[(1, 7, 8), int64] */;
  %572 = cast(meta[relay.Constant][28] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
  %573 = cast(meta[relay.Constant][28] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
  %574 = cast(meta[relay.Constant][28] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
  %575 = reshape(%572, newshape=[13, 10, 2]) /* ty=Tensor[(13, 10, 2), float32] */;
  %576 = reshape(%573, newshape=[13, 10, 2]) /* ty=Tensor[(13, 10, 2), float32] */;
  %577 = reshape(%574, newshape=[13, 10, 2]) /* ty=Tensor[(13, 10, 2), float32] */;
  %578 = @func_410(%575, %576, %577) /* ty=(Tensor[(13, 10, 2), float32], Tensor[(13, 10, 2), uint32]) */;
  %579 = %565.1;
  %580 = logical_xor(%567, %568) /* ty=Tensor[(16, 7, 8), int16] */;
  %581 = %569.1;
  %582 = add(%570, %571) /* ty=Tensor[(16, 7, 8), int64] */;
  %583 = %578.1;
  (%579, meta[relay.Constant][28] /* ty=Tensor[(260), float32] */, %580, %581, %582, %583)
}

def @func_746(%var_735: Tensor[(1, 9, 10), float64], %var_736: Tensor[(1, 9, 10), float64]) -> (Tensor[(?, 9, 10), float64],) {
  %584 = cast(%var_736, dtype="float64") /* ty=Tensor[(1, 9, 10), float64] */;
  %585 = shape_of(%var_735, dtype="int32") /* ty=Tensor[(3), int32] */;
  %586 = cast(%var_735, dtype="float64") /* ty=Tensor[(1, 9, 10), float64] */;
  %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %588 = power(%586, %587) /* ty=Tensor[(?, 9, 10), float64] */;
  (%588,)
}

def @func_872(%var_767: Tensor[(260), float32], %var_816: Tensor[(90, 1), float64], %var_868: Tensor[(13, 10, 2), bool]) -> (Tensor[(?, 7, 8), bool], Tensor[(?, 9, 10), float64], Tensor[(90, 1), float64], Tensor[(1, 7, 8), float64], Tensor[(13, 10, 2), int16], Tensor[(?, 7, 8), bool], Tensor[(13, 10, 2), uint32], Tensor[(13, 10, 2), float32], Tensor[(13, 10, 2), float32]) {
  %589 = @func_600() /* ty=(Tensor[(1, 7, 8), float64],) */;
  %590 = %589.0;
  %591 = @func_526() /* ty=Tensor[(1, 7, 8), float64] */;
  %592 = cast(%591, dtype="bool") /* ty=Tensor[(1, 7, 8), bool] */;
  %593 = shape_of(%590, dtype="int32") /* ty=Tensor[(3), int32] */;
  %594 = cast(%590, dtype="bool") /* ty=Tensor[(1, 7, 8), bool] */;
  %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %596 = cast(%var_816, dtype="float64") /* ty=Tensor[(90, 1), float64] */;
  %597 = cast(%var_816, dtype="float64") /* ty=Tensor[(90, 1), float64] */;
  %598 = reshape(%596, newshape=[1, 9, 10]) /* ty=Tensor[(1, 9, 10), float64] */;
  %599 = reshape(%597, newshape=[1, 9, 10]) /* ty=Tensor[(1, 9, 10), float64] */;
  %600 = @func_746(%598, %599) /* ty=(Tensor[(?, 9, 10), float64],) */;
  %601 = cast(%var_767, dtype="float32") /* ty=Tensor[(260), float32] */;
  %602 = cast(%var_767, dtype="float32") /* ty=Tensor[(260), float32] */;
  %603 = cast(%var_767, dtype="float32") /* ty=Tensor[(260), float32] */;
  %604 = reshape(%601, newshape=[13, 10, 2]) /* ty=Tensor[(13, 10, 2), float32] */;
  %605 = reshape(%602, newshape=[13, 10, 2]) /* ty=Tensor[(13, 10, 2), float32] */;
  %606 = reshape(%603, newshape=[13, 10, 2]) /* ty=Tensor[(13, 10, 2), float32] */;
  %607 = @func_410(%604, %605, %606) /* ty=(Tensor[(13, 10, 2), float32], Tensor[(13, 10, 2), uint32]) */;
  %608 = %607.1;
  %609 = cast(%var_767, dtype="bool") /* ty=Tensor[(260), bool] */;
  %610 = shape_of(%608, dtype="int32") /* ty=Tensor[(3), int32] */;
  %611 = cast(%608, dtype="bool") /* ty=Tensor[(13, 10, 2), bool] */;
  %612 = dyn.reshape(%609, %610, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %613 = logical_or(%611, %612) /* ty=Tensor[(13, 10, 2), bool] */;
  %614 = cast(meta[relay.Constant][29] /* ty=Tensor[(13, 10, 2), bool] */, dtype="int16") /* ty=Tensor[(13, 10, 2), int16] */;
  %615 = shape_of(%613, dtype="int32") /* ty=Tensor[(3), int32] */;
  %616 = cast(%613, dtype="int16") /* ty=Tensor[(13, 10, 2), int16] */;
  %617 = dyn.reshape(%614, %615, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %618 = cast(%590, dtype="bool") /* ty=Tensor[(1, 7, 8), bool] */;
  %619 = shape_of(%591, dtype="int32") /* ty=Tensor[(3), int32] */;
  %620 = cast(%591, dtype="bool") /* ty=Tensor[(1, 7, 8), bool] */;
  %621 = dyn.reshape(%618, %619, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %622 = cast(%613, dtype="float32") /* ty=Tensor[(13, 10, 2), float32] */;
  %623 = cast(%608, dtype="float32") /* ty=Tensor[(13, 10, 2), float32] */;
  %624 = cast(%var_767, dtype="float32") /* ty=Tensor[(260), float32] */;
  %625 = reshape(%622, newshape=[13, 10, 2]) /* ty=Tensor[(13, 10, 2), float32] */;
  %626 = reshape(%623, newshape=[13, 10, 2]) /* ty=Tensor[(13, 10, 2), float32] */;
  %627 = reshape(%624, newshape=[13, 10, 2]) /* ty=Tensor[(13, 10, 2), float32] */;
  %628 = @func_410(%625, %626, %627) /* ty=(Tensor[(13, 10, 2), float32], Tensor[(13, 10, 2), uint32]) */;
  %629 = cast(%613, dtype="float32") /* ty=Tensor[(13, 10, 2), float32] */;
  %630 = cast(%var_868, dtype="float32") /* ty=Tensor[(13, 10, 2), float32] */;
  %631 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(13, 10, 2), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %632 = cast(meta[relay.Constant][29] /* ty=Tensor[(13, 10, 2), bool] */, dtype="float32") /* ty=Tensor[(13, 10, 2), float32] */;
  %633 = dyn.reshape(%630, %631, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %634 = less_equal(%594, %595) /* ty=Tensor[(?, 7, 8), bool] */;
  %635 = %600.0;
  %636 = @func_495() /* ty=Tensor[(1, 7, 8), float64] */;
  %637 = right_shift(%616, %617) /* ty=Tensor[(13, 10, 2), int16] */;
  %638 = less(%620, %621) /* ty=Tensor[(?, 7, 8), bool] */;
  %639 = %628.1;
  %640 = asinh(%629) /* ty=Tensor[(13, 10, 2), float32] */;
  %641 = multiply(%632, %633) /* ty=Tensor[(13, 10, 2), float32] */;
  (%634, %635, %var_816, %636, %637, %638, %639, %640, %641)
}

def @func_7666(%var_7661: Tensor[(1, 7, 8), float64]) -> (Tensor[(?, 7, 8), bool],) {
  %642 = @func_4349() /* ty=(Tensor[(1, 7, 8), float64],) */;
  %643 = %642.0;
  %644 = cast(%var_7661, dtype="bool") /* ty=Tensor[(1, 7, 8), bool] */;
  %645 = shape_of(%643, dtype="int32") /* ty=Tensor[(3), int32] */;
  %646 = cast(%643, dtype="bool") /* ty=Tensor[(1, 7, 8), bool] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %648 = logical_and(%646, %647) /* ty=Tensor[(?, 7, 8), bool] */;
  (%648,)
}

def @func_5483() -> (Tensor[(364), float32],) {
  %649 = @func_2122() /* ty=(Tensor[(1, 7, 8), float32], Tensor[(13, 14, 2), float32], Tensor[(364), float32], Tensor[(90, 1), float64], Tensor[(16, 7, 8), float64], Tensor[(1, 7, 8), float64]) */;
  %650 = %649.2;
  (%650,)
}

def @func_5809() -> Tensor[(72), float32] {
  %651 = @func_5759() /* ty=(Tensor[(72), float32],) */;
  %651.0
}

def @func_5103(%var_5079: Tensor[(504), float64], %var_5097: Tensor[(18, 18), uint8]) -> (Tensor[(1, 7, 8), float64], Tensor[(9, 7, 8), int32], Tensor[(504), float64], Tensor[(1, 7, 8), float32], Tensor[(9, 3, 12), uint8], Tensor[(18, 18), uint8]) {
  %652 = cast(%var_5079, dtype="float64") /* ty=Tensor[(504), float64] */;
  %653 = reshape(%652, newshape=[9, 7, 8]) /* ty=Tensor[(9, 7, 8), float64] */;
  %654 = @func_1340(%653) /* ty=(Tensor[(9, 7, 8), int32],) */;
  %655 = @func_2675() /* ty=(Tensor[(1, 7, 8), float32],) */;
  %656 = cast(%var_5097, dtype="uint8") /* ty=Tensor[(18, 18), uint8] */;
  %657 = reshape(%656, newshape=[9, 3, 12]) /* ty=Tensor[(9, 3, 12), uint8] */;
  %658 = @func_3132() /* ty=Tensor[(1, 7, 8), float64] */;
  %659 = %654.0;
  %660 = %655.0;
  %661 = @func_2411(%657) /* ty=Tensor[(9, 3, 12), uint8] */;
  (%658, %659, %var_5079, %660, %661, %var_5097)
}

def @func_4382() -> (Tensor[(1, 7, 8), float64], Tensor[(1, 7, 8), float64]) {
  %662 = @func_4349() /* ty=(Tensor[(1, 7, 8), float64],) */;
  %663 = %662.0;
  %664 = @func_1594() /* ty=Tensor[(1, 7, 8), float64] */;
  (%663, %664)
}

def @func_6807(%var_6796: Tensor[(280), float32]) -> (Tensor[(1, 7, 8), float64], Tensor[(72), float32], Tensor[(280), float32], Tensor[(1, 7, 8), float64], Tensor[(1, 7, 8), float32]) {
  %665 = @func_5443() /* ty=(Tensor[(10, 7, 8), uint32], Tensor[(1, 7, 8), float64]) */;
  %666 = cast(%var_6796, dtype="float32") /* ty=Tensor[(280), float32] */;
  %667 = reshape(%666, newshape=[5, 7, 8]) /* ty=Tensor[(5, 7, 8), float32] */;
  %668 = @func_3604(%667) /* ty=(Tensor[(5, 7, 8), float64], Tensor[(16, 7, 8), float64], Tensor[(72), float32]) */;
  %669 = %668.2;
  %670 = cast(%669, dtype="float32") /* ty=Tensor[(72), float32] */;
  %671 = reshape(%670, newshape=[9, 4, 2]) /* ty=Tensor[(9, 4, 2), float32] */;
  %672 = @func_720(%671) /* ty=(Tensor[(9, 4, 2), float32], Tensor[(1, 7, 8), float64]) */;
  %673 = %665.1;
  %674 = %672.1;
  %675 = @func_4449() /* ty=Tensor[(1, 7, 8), float32] */;
  (%673, %669, %var_6796, %674, %675)
}

def @func_6714(%var_6704: Tensor[(16, 7, 8), float64]) -> (Tensor[(16, 7, 8), int8], Tensor[(16, 7, 8), float32]) {
  %676 = @func_5314() /* ty=Tensor[(16, 7, 8), float64] */;
  %677 = cast(%var_6704, dtype="int8") /* ty=Tensor[(16, 7, 8), int8] */;
  %678 = shape_of(%676, dtype="int32") /* ty=Tensor[(3), int32] */;
  %679 = cast(%676, dtype="int8") /* ty=Tensor[(16, 7, 8), int8] */;
  %680 = dyn.reshape(%677, %678, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %681 = cast(%var_6704, dtype="float32") /* ty=Tensor[(16, 7, 8), float32] */;
  %682 = bitwise_xor(%679, %680) /* ty=Tensor[(16, 7, 8), int8] */;
  %683 = atan(%681) /* ty=Tensor[(16, 7, 8), float32] */;
  (%682, %683)
}

def @func_2411(%var_2400: Tensor[(9, 3, 12), uint8]) -> Tensor[(9, 3, 12), uint8] {
  %684 = cast(meta[relay.Constant][30] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %685 = cast(%var_2400, dtype="uint8") /* ty=Tensor[(9, 3, 12), uint8] */;
  maximum(%684, %685) /* ty=Tensor[(9, 3, 12), uint8] */
}

def @func_6623() -> Tensor[(1, 7, 8), float32] {
  @func_925() /* ty=Tensor[(1, 7, 8), float32] */
}

def @func_1260() -> (Tensor[(1, 7, 8), float64], Tensor[(72), float32], Tensor[(?, 7, 8), bool]) {
  %686 = cast(meta[relay.Constant][31] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %687 = reshape(%686, newshape=[9, 4, 2]) /* ty=Tensor[(9, 4, 2), float32] */;
  %688 = @func_720(%687) /* ty=(Tensor[(9, 4, 2), float32], Tensor[(1, 7, 8), float64]) */;
  %689 = @func_526() /* ty=Tensor[(1, 7, 8), float64] */;
  %690 = cast(%689, dtype="float64") /* ty=Tensor[(1, 7, 8), float64] */;
  %691 = log10(%690) /* ty=Tensor[(1, 7, 8), float64] */;
  %692 = cast(%689, dtype="bool") /* ty=Tensor[(1, 7, 8), bool] */;
  %693 = shape_of(%691, dtype="int32") /* ty=Tensor[(3), int32] */;
  %694 = cast(%691, dtype="bool") /* ty=Tensor[(1, 7, 8), bool] */;
  %695 = dyn.reshape(%692, %693, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %696 = %688.1;
  %697 = logical_or(%694, %695) /* ty=Tensor[(?, 7, 8), bool] */;
  (%696, meta[relay.Constant][31] /* ty=Tensor[(72), float32] */, %697)
}

def @func_7452() -> Tensor[(72), float32] {
  @func_7315() /* ty=Tensor[(72), float32] */
}

def @func_1805(%var_1797: Tensor[(9, 1, 5), float64]) -> (Tensor[(9, 1, 5), float64],) {
  %698 = cast(%var_1797, dtype="float64") /* ty=Tensor[(9, 1, 5), float64] */;
  %699 = sqrt(%698) /* ty=Tensor[(9, 1, 5), float64] */;
  (%699,)
}

def @func_4659() -> (Tensor[(72), float32],) {
  %700 = @func_2291() /* ty=(Tensor[(1, 7, 8), float32], Tensor[(72), float32]) */;
  %701 = %700.1;
  (%701,)
}

def @func_7766() -> (Tensor[(72), float32], Tensor[(72), float32], Tensor[(9, 3, 12), uint8], Tensor[(18, 18), uint8]) {
  %702 = @func_3034() /* ty=(Tensor[(72), float32],) */;
  %703 = @func_1260() /* ty=(Tensor[(1, 7, 8), float64], Tensor[(72), float32], Tensor[(?, 7, 8), bool]) */;
  %704 = cast(meta[relay.Constant][32] /* ty=Tensor[(18, 18), uint8] */, dtype="uint8") /* ty=Tensor[(18, 18), uint8] */;
  %705 = reshape(%704, newshape=[9, 3, 12]) /* ty=Tensor[(9, 3, 12), uint8] */;
  %706 = %702.0;
  %707 = %703.1;
  %708 = @func_2411(%705) /* ty=Tensor[(9, 3, 12), uint8] */;
  (%706, %707, %708, meta[relay.Constant][32] /* ty=Tensor[(18, 18), uint8] */)
}

def @func_6776(%var_6753: Tensor[(55, 1), float32], %var_6759: Tensor[(11, 9, 5), float64]) -> (Tensor[(5, 15, 2), float64], Tensor[(55, 1), float32], Tensor[(11, 9, 5), bool]) {
  %709 = @func_2799() /* ty=(Tensor[(5, 15, 2), float32], Tensor[(?, 7, 8), int64]) */;
  %710 = %709.0;
  %711 = cast(%710, dtype="float64") /* ty=Tensor[(5, 15, 2), float64] */;
  %712 = cast(%var_6753, dtype="float32") /* ty=Tensor[(55, 1), float32] */;
  %713 = reshape(%712, newshape=[11, 1, 5]) /* ty=Tensor[(11, 1, 5), float32] */;
  %714 = @func_5234(%713) /* ty=Tensor[(11, ?, 5), float64] */;
  %715 = cast(%714, dtype="bool") /* ty=Tensor[(11, ?, 5), bool] */;
  %716 = cast(%var_6759, dtype="bool") /* ty=Tensor[(11, 9, 5), bool] */;
  %717 = sqrt(%711) /* ty=Tensor[(5, 15, 2), float64] */;
  %718 = greater_equal(%715, %716) /* ty=Tensor[(11, 9, 5), bool] */;
  (%717, %var_6753, %718)
}

def @func_5593() -> (Tensor[(1, 7, 8), float64],) {
  %719 = @func_3984() /* ty=(Tensor[(1, 7, 8), float64], Tensor[(72), float32]) */;
  %720 = %719.0;
  (%720,)
}

def @func_1894() -> (Tensor[(16, 7, 8), float64],) {
  %721 = @func_1513() /* ty=(Tensor[(1, 7, 8), float64], Tensor[(16, 7, 8), float64], Tensor[(896), float64], Tensor[(72), float32]) */;
  %722 = %721.1;
  (%722,)
}

def @func_3132() -> Tensor[(1, 7, 8), float64] {
  @func_526() /* ty=Tensor[(1, 7, 8), float64] */
}

def @func_1594() -> Tensor[(1, 7, 8), float64] {
  %723 = @func_1071() /* ty=(Tensor[(1, 7, 8), float64],) */;
  %723.0
}

def @func_6681() -> Tensor[(1, 7, 8), float32] {
  %724 = @func_2291() /* ty=(Tensor[(1, 7, 8), float32], Tensor[(72), float32]) */;
  %724.0
}

def @func_2164() -> (Tensor[(16, 7, 8), float64],) {
  %725 = @func_1894() /* ty=(Tensor[(16, 7, 8), float64],) */;
  %726 = %725.0;
  (%726,)
}

def @func_3984() -> (Tensor[(1, 7, 8), float64], Tensor[(72), float32]) {
  %727 = @func_1071() /* ty=(Tensor[(1, 7, 8), float64],) */;
  %728 = @func_3034() /* ty=(Tensor[(72), float32],) */;
  %729 = %727.0;
  %730 = %728.0;
  (%729, %730)
}

def @func_4169() -> Tensor[(72), float32] {
  %731 = @func_3034() /* ty=(Tensor[(72), float32],) */;
  %731.0
}

def @func_5939() -> (Tensor[(1, 7, 8), float32], Tensor[(7, 13, 10), float32], int32, Tensor[(910), int32], Tensor[(9, 1, 5), float64], Tensor[(45), float64]) {
  %732 = @func_2675() /* ty=(Tensor[(1, 7, 8), float32],) */;
  %733 = cast(-9 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %734 = cast(meta[relay.Constant][33] /* ty=Tensor[(910), int32] */, dtype="int32") /* ty=Tensor[(910), int32] */;
  %735 = reshape(%733, newshape=[]) /* ty=int32 */;
  %736 = reshape(%734, newshape=[7, 13, 10]) /* ty=Tensor[(7, 13, 10), int32] */;
  %737 = cast(meta[relay.Constant][34] /* ty=Tensor[(45), float64] */, dtype="float64") /* ty=Tensor[(45), float64] */;
  %738 = reshape(%737, newshape=[1, 45]) /* ty=Tensor[(1, 45), float64] */;
  %739 = @func_2053(%738) /* ty=(Tensor[(1, 7, 8), float64], Tensor[(9, 1, 5), float64], Tensor[(1, 45), float64]) */;
  %740 = %732.0;
  %741 = @func_3006(%735, %736) /* ty=Tensor[(7, 13, 10), float32] */;
  %742 = %739.1;
  (%740, %741, -9 /* ty=int32 */, meta[relay.Constant][33] /* ty=Tensor[(910), int32] */, %742, meta[relay.Constant][34] /* ty=Tensor[(45), float64] */)
}

def @func_6318() -> (Tensor[(72), float32], Tensor[(90, 1), float64], Tensor[(5, 15, 2), uint64], Tensor[(150), float64], Tensor[(?, 7, 8), int64], Tensor[(65, 4), float64]) {
  %743 = @func_4659() /* ty=(Tensor[(72), float32],) */;
  %744 = @func_2122() /* ty=(Tensor[(1, 7, 8), float32], Tensor[(13, 14, 2), float32], Tensor[(364), float32], Tensor[(90, 1), float64], Tensor[(16, 7, 8), float64], Tensor[(1, 7, 8), float64]) */;
  %745 = cast(meta[relay.Constant][35] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %746 = reshape(%745, newshape=[5, 15, 2]) /* ty=Tensor[(5, 15, 2), float64] */;
  %747 = @func_3329(%746) /* ty=(Tensor[(5, 15, 2), uint64],) */;
  %748 = cast(meta[relay.Constant][36] /* ty=Tensor[(65, 4), float32] */, dtype="float32") /* ty=Tensor[(65, 4), float32] */;
  %749 = reshape(%748, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %750 = @func_1683(%749) /* ty=(Tensor[(?, 7, 8), int64], Tensor[(13, 10, 2), float32], Tensor[(260), float32]) */;
  %751 = cast(meta[relay.Constant][36] /* ty=Tensor[(65, 4), float32] */, dtype="float64") /* ty=Tensor[(65, 4), float64] */;
  %752 = %743.0;
  %753 = %744.3;
  %754 = %747.0;
  %755 = %750.0;
  %756 = log2(%751) /* ty=Tensor[(65, 4), float64] */;
  (%752, %753, %754, meta[relay.Constant][35] /* ty=Tensor[(150), float64] */, %755, %756)
}

def @func_1316() -> (Tensor[(1, 7, 8), float64],) {
  %757 = @func_495() /* ty=Tensor[(1, 7, 8), float64] */;
  (%757,)
}

def @func_6090(%var_6052: Tensor[(896), float64], %var_6056: Tensor[(13, 10, 2), uint32]) -> (Tensor[(72), float32], Tensor[(896), float64], Tensor[(13, 10, 2), bool], Tensor[(45), float64], Tensor[(4536), bool], Tensor[(1, 7, 8), float64], Tensor[(1, 7, 8), float64]) {
  %758 = cast(%var_6052, dtype="float64") /* ty=Tensor[(896), float64] */;
  %759 = reshape(%758, newshape=[16, 7, 8]) /* ty=Tensor[(16, 7, 8), float64] */;
  %760 = @func_1497(%759) /* ty=(Tensor[(13, 10, 2), uint32], Tensor[(260), float32], Tensor[(16, 7, 8), int16], Tensor[(5, 15, 2), bool], Tensor[(16, 7, 8), int64], Tensor[(13, 10, 2), uint32]) */;
  %761 = %760.5;
  %762 = cast(%var_6056, dtype="bool") /* ty=Tensor[(13, 10, 2), bool] */;
  %763 = shape_of(%761, dtype="int32") /* ty=Tensor[(3), int32] */;
  %764 = cast(%761, dtype="bool") /* ty=Tensor[(13, 10, 2), bool] */;
  %765 = dyn.reshape(%762, %763, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %766 = @func_5939() /* ty=(Tensor[(1, 7, 8), float32], Tensor[(7, 13, 10), float32], int32, Tensor[(910), int32], Tensor[(9, 1, 5), float64], Tensor[(45), float64]) */;
  %767 = cast(meta[relay.Constant][37] /* ty=Tensor[(4536), uint8] */, dtype="uint8") /* ty=Tensor[(4536), uint8] */;
  %768 = cast(meta[relay.Constant][37] /* ty=Tensor[(4536), uint8] */, dtype="uint8") /* ty=Tensor[(4536), uint8] */;
  %769 = reshape(%767, newshape=[324, 14]) /* ty=Tensor[(324, 14), uint8] */;
  %770 = reshape(%768, newshape=[324, 14]) /* ty=Tensor[(324, 14), uint8] */;
  %771 = @func_4066(%769, %770) /* ty=(Tensor[(324, 14), bool], Tensor[(324, 14), bool], Tensor[(1, 7, 8), float64]) */;
  %772 = %771.1;
  %773 = cast(%772, dtype="bool") /* ty=Tensor[(324, 14), bool] */;
  %774 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(4536), uint8] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %775 = cast(meta[relay.Constant][37] /* ty=Tensor[(4536), uint8] */, dtype="bool") /* ty=Tensor[(4536), bool] */;
  %776 = dyn.reshape(%773, %774, newshape=[]) /* ty=Tensor[(?), bool] */;
  %777 = @func_1260() /* ty=(Tensor[(1, 7, 8), float64], Tensor[(72), float32], Tensor[(?, 7, 8), bool]) */;
  %778 = @func_2584() /* ty=Tensor[(72), float32] */;
  %779 = less(%764, %765) /* ty=Tensor[(13, 10, 2), bool] */;
  %780 = %766.5;
  %781 = not_equal(%775, %776) /* ty=Tensor[(4536), bool] */;
  %782 = %777.0;
  %783 = @func_526() /* ty=Tensor[(1, 7, 8), float64] */;
  (%778, %var_6052, %779, %780, %781, %782, %783)
}

def @func_7007(%var_6964: Tensor[(16, 7, 8), float64]) -> (Tensor[(260), float64], Tensor[(260), float32], Tensor[(16, 7, 8), bool], Tensor[(?, 7, 8), int64], Tensor[(11, ?, 5), float64], Tensor[(55), float32], Tensor[(16, 7, 8), float32], Tensor[(16, 7, 8), float32]) {
  %784 = cast(meta[relay.Constant][38] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
  %785 = reshape(%784, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %786 = @func_1130(%785) /* ty=(Tensor[(1, 7, 8), float64], Tensor[(13, 10, 2), uint32], Tensor[(260), float64]) */;
  %787 = @func_5314() /* ty=Tensor[(16, 7, 8), float64] */;
  %788 = cast(%787, dtype="bool") /* ty=Tensor[(16, 7, 8), bool] */;
  %789 = shape_of(%var_6964, dtype="int32") /* ty=Tensor[(3), int32] */;
  %790 = cast(%var_6964, dtype="bool") /* ty=Tensor[(16, 7, 8), bool] */;
  %791 = dyn.reshape(%788, %789, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %792 = @func_6357() /* ty=(Tensor[(?, 7, 8), int64],) */;
  %793 = cast(meta[relay.Constant][39] /* ty=Tensor[(55), float32] */, dtype="float32") /* ty=Tensor[(55), float32] */;
  %794 = reshape(%793, newshape=[11, 1, 5]) /* ty=Tensor[(11, 1, 5), float32] */;
  %795 = cast(%var_6964, dtype="float64") /* ty=Tensor[(16, 7, 8), float64] */;
  %796 = reshape(%795, newshape=[16, 7, 8]) /* ty=Tensor[(16, 7, 8), float64] */;
  %797 = @func_6714(%796) /* ty=(Tensor[(16, 7, 8), int8], Tensor[(16, 7, 8), float32]) */;
  %798 = cast(%var_6964, dtype="uint32") /* ty=Tensor[(16, 7, 8), uint32] */;
  %799 = shape_of(%787, dtype="int32") /* ty=Tensor[(3), int32] */;
  %800 = cast(%787, dtype="uint32") /* ty=Tensor[(16, 7, 8), uint32] */;
  %801 = dyn.reshape(%798, %799, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %802 = maximum(%800, %801) /* ty=Tensor[(16, 7, 8), uint32] */;
  %803 = cast(%802, dtype="float32") /* ty=Tensor[(16, 7, 8), float32] */;
  %804 = asin(%803) /* ty=Tensor[(16, 7, 8), float32] */;
  %805 = cast(%804, dtype="float32") /* ty=Tensor[(16, 7, 8), float32] */;
  %806 = %786.2;
  %807 = less_equal(%790, %791) /* ty=Tensor[(16, 7, 8), bool] */;
  %808 = %792.0;
  %809 = @func_5234(%794) /* ty=Tensor[(11, ?, 5), float64] */;
  %810 = %797.1;
  %811 = asinh(%805) /* ty=Tensor[(16, 7, 8), float32] */;
  (%806, meta[relay.Constant][38] /* ty=Tensor[(260), float32] */, %807, %808, %809, meta[relay.Constant][39] /* ty=Tensor[(55), float32] */, %810, %811)
}

def @func_600() -> (Tensor[(1, 7, 8), float64],) {
  %812 = @func_526() /* ty=Tensor[(1, 7, 8), float64] */;
  (%812,)
}

def @func_5759() -> (Tensor[(72), float32],) {
  %813 = @func_2810() /* ty=(Tensor[(72), float32],) */;
  %814 = %813.0;
  (%814,)
}

def @func_1513() -> (Tensor[(1, 7, 8), float64], Tensor[(16, 7, 8), float64], Tensor[(896), float64], Tensor[(72), float32]) {
  %815 = @func_1316() /* ty=(Tensor[(1, 7, 8), float64],) */;
  %816 = cast(meta[relay.Constant][40] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
  %817 = cast(meta[relay.Constant][41] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %818 = reshape(%816, newshape=[16, 7, 8]) /* ty=Tensor[(16, 7, 8), float64] */;
  %819 = reshape(%817, newshape=[36, 2]) /* ty=Tensor[(36, 2), float32] */;
  %820 = @func_966(%818, %819) /* ty=(Tensor[(16, 7, 8), float64], Tensor[(36, 2), bool], Tensor[(1, 7, 8), float64]) */;
  %821 = %815.0;
  %822 = %820.0;
  (%821, %822, meta[relay.Constant][40] /* ty=Tensor[(896), float64] */, meta[relay.Constant][41] /* ty=Tensor[(72), float32] */)
}

def @func_6653(%var_6625: Tensor[(11, 9, 16), float64], %var_6646: Tensor[(896), float64]) -> (Tensor[(11, 9, 16), uint32], Tensor[(16, 7, 8), bool], Tensor[(896), float64], Tensor[(56), float64]) {
  %823 = cast(%var_6625, dtype="float64") /* ty=Tensor[(11, 9, 16), float64] */;
  %824 = atanh(%823) /* ty=Tensor[(11, 9, 16), float64] */;
  %825 = cast(%var_6625, dtype="float32") /* ty=Tensor[(11, 9, 16), float32] */;
  %826 = exp(%825) /* ty=Tensor[(11, 9, 16), float32] */;
  %827 = cast(%826, dtype="uint32") /* ty=Tensor[(11, 9, 16), uint32] */;
  %828 = shape_of(%824, dtype="int32") /* ty=Tensor[(3), int32] */;
  %829 = cast(%824, dtype="uint32") /* ty=Tensor[(11, 9, 16), uint32] */;
  %830 = dyn.reshape(%827, %828, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %831 = cast(%var_6646, dtype="float64") /* ty=Tensor[(896), float64] */;
  %832 = cast(meta[relay.Constant][42] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
  %833 = reshape(%831, newshape=[16, 7, 8]) /* ty=Tensor[(16, 7, 8), float64] */;
  %834 = reshape(%832, newshape=[56]) /* ty=Tensor[(56), float64] */;
  %835 = @func_2490(%833, %834) /* ty=(Tensor[(16, 7, 8), float32], Tensor[(16, 7, 8), bool], Tensor[(260), float32], Tensor[(56), float64]) */;
  %836 = bitwise_and(%829, %830) /* ty=Tensor[(11, 9, 16), uint32] */;
  %837 = %835.1;
  (%836, %837, %var_6646, meta[relay.Constant][42] /* ty=Tensor[(56), float64] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_7767() -> (Tensor[(72), float32], Tensor[(72), float32], Tensor[(9, 3, 12), uint8], Tensor[(18, 18), uint8]) {
  %7 = fn () -> (Tensor[(72), float32], Tensor[(72), float32], Tensor[(9, 3, 12), uint8], Tensor[(18, 18), uint8]) {
    %0 = @func_3034() /* ty=(Tensor[(72), float32],) */;
    %1 = @func_1260() /* ty=(Tensor[(1, 7, 8), float64], Tensor[(72), float32], Tensor[(?, 7, 8), bool]) */;
    %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(18, 18), uint8] */, dtype="uint8") /* ty=Tensor[(18, 18), uint8] */;
    %3 = reshape(%2, newshape=[9, 3, 12]) /* ty=Tensor[(9, 3, 12), uint8] */;
    %4 = %0.0;
    %5 = %1.1;
    %6 = @func_2411(%3) /* ty=Tensor[(9, 3, 12), uint8] */;
    (%4, %5, %6, meta[relay.Constant][0] /* ty=Tensor[(18, 18), uint8] */)
  };
  %7() /* ty=(Tensor[(72), float32], Tensor[(72), float32], Tensor[(9, 3, 12), uint8], Tensor[(18, 18), uint8]) */
}

def @func_7316() -> Tensor[(72), float32] {
  %8 = fn () -> Tensor[(72), float32] {
    @func_2899() /* ty=Tensor[(72), float32] */
  };
  %8() /* ty=Tensor[(72), float32] */
}

def @func_2122() -> (Tensor[(1, 7, 8), float32], Tensor[(13, 14, 2), float32], Tensor[(364), float32], Tensor[(90, 1), float64], Tensor[(16, 7, 8), float64], Tensor[(1, 7, 8), float64]) {
  %9 = @func_1316() /* ty=(Tensor[(1, 7, 8), float64],) */;
  %10 = %9.0;
  %11 = cast(%10, dtype="float32") /* ty=Tensor[(1, 7, 8), float32] */;
  %12 = cast(meta[relay.Constant][1] /* ty=Tensor[(364), float32] */, dtype="float32") /* ty=Tensor[(364), float32] */;
  %13 = cast(meta[relay.Constant][2] /* ty=Tensor[(90, 1), float64] */, dtype="float64") /* ty=Tensor[(90, 1), float64] */;
  %14 = reshape(%12, newshape=[13, 14, 2]) /* ty=Tensor[(13, 14, 2), float32] */;
  %15 = reshape(%13, newshape=[90]) /* ty=Tensor[(90), float64] */;
  %16 = @func_1052(%14, %15) /* ty=(Tensor[(13, 14, 2), float32], Tensor[(?, 9, 10), float64], Tensor[(90), float64]) */;
  %17 = @func_1894() /* ty=(Tensor[(16, 7, 8), float64],) */;
  %18 = sinh(%11) /* ty=Tensor[(1, 7, 8), float32] */;
  %19 = %16.0;
  %20 = %17.0;
  %21 = @func_495() /* ty=Tensor[(1, 7, 8), float64] */;
  (%18, %19, meta[relay.Constant][1] /* ty=Tensor[(364), float32] */, meta[relay.Constant][2] /* ty=Tensor[(90, 1), float64] */, %20, %21)
}

def @func_2811() -> (Tensor[(72), float32],) {
  %24 = fn () -> (Tensor[(72), float32],) {
    %22 = @func_1513() /* ty=(Tensor[(1, 7, 8), float64], Tensor[(16, 7, 8), float64], Tensor[(896), float64], Tensor[(72), float32]) */;
    %23 = %22.3;
    (%23,)
  };
  %24() /* ty=(Tensor[(72), float32],) */
}

def @func_4256() -> Tensor[(?, 7, 8), int64] {
  @func_4254() /* ty=Tensor[(?, 7, 8), int64] */
}

def @func_7253() -> Tensor[(72), float32] {
  %26 = fn () -> Tensor[(72), float32] {
    %25 = @func_1260() /* ty=(Tensor[(1, 7, 8), float64], Tensor[(72), float32], Tensor[(?, 7, 8), bool]) */;
    %25.1
  };
  %26() /* ty=Tensor[(72), float32] */
}

def @func_3522(%var_3520: Tensor[(5, 11, 2), float64]) -> (Tensor[(5, 11, 2), float64], Tensor[(?, 7, 8), float32], Tensor[(56), float64], Tensor[(?, 7, 8), int64], Tensor[(1, 7, 8), float64]) {
  @func_3519(%var_3520) /* ty=(Tensor[(5, 11, 2), float64], Tensor[(?, 7, 8), float32], Tensor[(56), float64], Tensor[(?, 7, 8), int64], Tensor[(1, 7, 8), float64]) */
}

def @func_2056(%var_2054: Tensor[(1, 45), float64]) -> (Tensor[(1, 7, 8), float64], Tensor[(9, 1, 5), float64], Tensor[(1, 45), float64]) {
  @func_2053(%var_2054) /* ty=(Tensor[(1, 7, 8), float64], Tensor[(9, 1, 5), float64], Tensor[(1, 45), float64]) */
}

def @func_2124() -> (Tensor[(1, 7, 8), float32], Tensor[(13, 14, 2), float32], Tensor[(364), float32], Tensor[(90, 1), float64], Tensor[(16, 7, 8), float64], Tensor[(1, 7, 8), float64]) {
  @func_2122() /* ty=(Tensor[(1, 7, 8), float32], Tensor[(13, 14, 2), float32], Tensor[(364), float32], Tensor[(90, 1), float64], Tensor[(16, 7, 8), float64], Tensor[(1, 7, 8), float64]) */
}

def @func_3918(%var_3891: Tensor[(1, 7, 8), float32], %var_3914: Tensor[(150), float64]) -> (Tensor[(?, 7, 8), uint8], Tensor[(5, 15, 2), uint64], Tensor[(150), float64]) {
  %27 = @func_925() /* ty=Tensor[(1, 7, 8), float32] */;
  %28 = cast(%var_3891, dtype="uint8") /* ty=Tensor[(1, 7, 8), uint8] */;
  %29 = shape_of(%27, dtype="int32") /* ty=Tensor[(3), int32] */;
  %30 = cast(%27, dtype="uint8") /* ty=Tensor[(1, 7, 8), uint8] */;
  %31 = dyn.reshape(%28, %29, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %32 = cast(%var_3914, dtype="float64") /* ty=Tensor[(150), float64] */;
  %33 = reshape(%32, newshape=[5, 15, 2]) /* ty=Tensor[(5, 15, 2), float64] */;
  %34 = @func_3329(%33) /* ty=(Tensor[(5, 15, 2), uint64],) */;
  %35 = right_shift(%30, %31) /* ty=Tensor[(?, 7, 8), uint8] */;
  %36 = %34.0;
  (%35, %36, %var_3914)
}

def @func_6624() -> Tensor[(1, 7, 8), float32] {
  %37 = fn () -> Tensor[(1, 7, 8), float32] {
    @func_925() /* ty=Tensor[(1, 7, 8), float32] */
  };
  %37() /* ty=Tensor[(1, 7, 8), float32] */
}

def @func_7342(%var_7340: Tensor[(16, 2, 4), uint32], %var_7341: Tensor[(16, 2, 4), uint32]) -> (Tensor[(16, 2, 4), uint32],) {
  %43 = fn (%var_7328: Tensor[(16, 2, 4), uint32], %var_7329: Tensor[(16, 2, 4), uint32]) -> (Tensor[(16, 2, 4), uint32],) {
    %38 = cast(%var_7329, dtype="uint32") /* ty=Tensor[(16, 2, 4), uint32] */;
    %39 = shape_of(%var_7328, dtype="int32") /* ty=Tensor[(3), int32] */;
    %40 = cast(%var_7328, dtype="uint32") /* ty=Tensor[(16, 2, 4), uint32] */;
    %41 = dyn.reshape(%38, %39, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %42 = right_shift(%40, %41) /* ty=Tensor[(16, 2, 4), uint32] */;
    (%42,)
  };
  %43(%var_7340, %var_7341) /* ty=(Tensor[(16, 2, 4), uint32],) */
}

def @func_1685(%var_1684: Tensor[(260), float32]) -> (Tensor[(?, 7, 8), int64], Tensor[(13, 10, 2), float32], Tensor[(260), float32]) {
  %54 = fn (%var_1670: Tensor[(260), float32]) -> (Tensor[(?, 7, 8), int64], Tensor[(13, 10, 2), float32], Tensor[(260), float32]) {
    %44 = @func_1578() /* ty=(Tensor[(13, 10, 2), float32], Tensor[(?, 7, 8), int64]) */;
    %45 = cast(%var_1670, dtype="float32") /* ty=Tensor[(260), float32] */;
    %46 = cast(%var_1670, dtype="float32") /* ty=Tensor[(260), float32] */;
    %47 = cast(%var_1670, dtype="float32") /* ty=Tensor[(260), float32] */;
    %48 = reshape(%45, newshape=[13, 10, 2]) /* ty=Tensor[(13, 10, 2), float32] */;
    %49 = reshape(%46, newshape=[13, 10, 2]) /* ty=Tensor[(13, 10, 2), float32] */;
    %50 = reshape(%47, newshape=[13, 10, 2]) /* ty=Tensor[(13, 10, 2), float32] */;
    %51 = @func_410(%48, %49, %50) /* ty=(Tensor[(13, 10, 2), float32], Tensor[(13, 10, 2), uint32]) */;
    %52 = %44.1;
    %53 = %51.0;
    (%52, %53, %var_1670)
  };
  %54(%var_1684) /* ty=(Tensor[(?, 7, 8), int64], Tensor[(13, 10, 2), float32], Tensor[(260), float32]) */
}

def @func_4281() -> (Tensor[(1, 7, 8), float64],) {
  %57 = fn () -> (Tensor[(1, 7, 8), float64],) {
    %55 = @func_1260() /* ty=(Tensor[(1, 7, 8), float64], Tensor[(72), float32], Tensor[(?, 7, 8), bool]) */;
    %56 = %55.0;
    (%56,)
  };
  %57() /* ty=(Tensor[(1, 7, 8), float64],) */
}

def @func_3606(%var_3605: Tensor[(5, 7, 8), float32]) -> (Tensor[(5, 7, 8), float64], Tensor[(16, 7, 8), float64], Tensor[(72), float32]) {
  %67 = fn (%var_3565: Tensor[(5, 7, 8), float32]) -> (Tensor[(5, 7, 8), float64], Tensor[(16, 7, 8), float64], Tensor[(72), float32]) {
    %58 = @func_1916() /* ty=(Tensor[(1, 7, 8), float32],) */;
    %59 = %58.0;
    %60 = cast(%59, dtype="float64") /* ty=Tensor[(1, 7, 8), float64] */;
    %61 = cast(%var_3565, dtype="float64") /* ty=Tensor[(5, 7, 8), float64] */;
    %62 = @func_1894() /* ty=(Tensor[(16, 7, 8), float64],) */;
    %63 = @func_3034() /* ty=(Tensor[(72), float32],) */;
    %64 = minimum(%60, %61) /* ty=Tensor[(5, 7, 8), float64] */;
    %65 = %62.0;
    %66 = %63.0;
    (%64, %65, %66)
  };
  %67(%var_3605) /* ty=(Tensor[(5, 7, 8), float64], Tensor[(16, 7, 8), float64], Tensor[(72), float32]) */
}

def @func_1071() -> (Tensor[(1, 7, 8), float64],) {
  %68 = @func_526() /* ty=Tensor[(1, 7, 8), float64] */;
  (%68,)
}

def @func_1424(%var_1422: Tensor[(1, 7, 8), float64]) -> (Tensor[(?, 7, 8), float32], Tensor[(1, 7, 8), float64], Tensor[(?, 9, 10), float64], Tensor[(90), float64], Tensor[(5, 7, 8), uint8], Tensor[(9, 7, 8), int32], Tensor[(504), float64], Tensor[(13, 10, 2), float32], Tensor[(260), float32]) {
  @func_1421(%var_1422) /* ty=(Tensor[(?, 7, 8), float32], Tensor[(1, 7, 8), float64], Tensor[(?, 9, 10), float64], Tensor[(90), float64], Tensor[(5, 7, 8), uint8], Tensor[(9, 7, 8), int32], Tensor[(504), float64], Tensor[(13, 10, 2), float32], Tensor[(260), float32]) */
}

def @func_496() -> Tensor[(1, 7, 8), float64] {
  %70 = fn () -> Tensor[(1, 7, 8), float64] {
    %69 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 7, 8), float64] */, dtype="float64") /* ty=Tensor[(1, 7, 8), float64] */;
    cosh(%69) /* ty=Tensor[(1, 7, 8), float64] */
  };
  %70() /* ty=Tensor[(1, 7, 8), float64] */
}

def @func_2900() -> Tensor[(72), float32] {
  %71 = fn () -> Tensor[(72), float32] {
    @func_2584() /* ty=Tensor[(72), float32] */
  };
  %71() /* ty=Tensor[(72), float32] */
}

def @func_6783() -> (Tensor[(1, 7, 8), float64],) {
  %72 = @func_4382() /* ty=(Tensor[(1, 7, 8), float64], Tensor[(1, 7, 8), float64]) */;
  %73 = %72.0;
  (%73,)
}

def @func_7566(%var_7565: Tensor[(9, 11, 2), float64]) -> (Tensor[(72), float32], Tensor[(9, 11, 2), bool], Tensor[(5, 15, 2), float32], Tensor[(16, 7, 8), float64]) {
  %87 = fn (%var_7532: Tensor[(9, 11, 2), float64]) -> (Tensor[(72), float32], Tensor[(9, 11, 2), bool], Tensor[(5, 15, 2), float32], Tensor[(16, 7, 8), float64]) {
    %74 = @func_2391() /* ty=(Tensor[(72), float32],) */;
    %75 = cast(%var_7532, dtype="float64") /* ty=Tensor[(9, 11, 2), float64] */;
    %76 = rsqrt(%75) /* ty=Tensor[(9, 11, 2), float64] */;
    %77 = cast(%var_7532, dtype="bool") /* ty=Tensor[(9, 11, 2), bool] */;
    %78 = shape_of(%76, dtype="int32") /* ty=Tensor[(3), int32] */;
    %79 = cast(%76, dtype="bool") /* ty=Tensor[(9, 11, 2), bool] */;
    %80 = dyn.reshape(%77, %78, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %81 = @func_2799() /* ty=(Tensor[(5, 15, 2), float32], Tensor[(?, 7, 8), int64]) */;
    %82 = @func_6913() /* ty=(Tensor[(16, 7, 8), float64],) */;
    %83 = %74.0;
    %84 = not_equal(%79, %80) /* ty=Tensor[(9, 11, 2), bool] */;
    %85 = %81.0;
    %86 = %82.0;
    (%83, %84, %85, %86)
  };
  %87(%var_7565) /* ty=(Tensor[(72), float32], Tensor[(9, 11, 2), bool], Tensor[(5, 15, 2), float32], Tensor[(16, 7, 8), float64]) */
}

def @func_3332(%var_3330: Tensor[(5, 15, 2), float64]) -> (Tensor[(5, 15, 2), uint64],) {
  @func_3329(%var_3330) /* ty=(Tensor[(5, 15, 2), uint64],) */
}

def @func_4880(%var_4877: Tensor[(5, 11, 1), float32]) -> Tensor[(5, 11, 1), float32] {
  %88 = cast(%var_4877, dtype="float32") /* ty=Tensor[(5, 11, 1), float32] */;
  tan(%88) /* ty=Tensor[(5, 11, 1), float32] */
}

def @func_5593() -> (Tensor[(1, 7, 8), float64],) {
  %89 = @func_3984() /* ty=(Tensor[(1, 7, 8), float64], Tensor[(72), float32]) */;
  %90 = %89.0;
  (%90,)
}

def @func_1055(%var_1053: Tensor[(13, 14, 2), float32], %var_1054: Tensor[(90), float64]) -> (Tensor[(13, 14, 2), float32], Tensor[(?, 9, 10), float64], Tensor[(90), float64]) {
  %99 = fn (%var_1025: Tensor[(13, 14, 2), float32], %var_1044: Tensor[(90), float64]) -> (Tensor[(13, 14, 2), float32], Tensor[(?, 9, 10), float64], Tensor[(90), float64]) {
    %91 = cast(%var_1025, dtype="float32") /* ty=Tensor[(13, 14, 2), float32] */;
    %92 = cast(%var_1044, dtype="float64") /* ty=Tensor[(90), float64] */;
    %93 = cast(%var_1044, dtype="float64") /* ty=Tensor[(90), float64] */;
    %94 = reshape(%92, newshape=[1, 9, 10]) /* ty=Tensor[(1, 9, 10), float64] */;
    %95 = reshape(%93, newshape=[1, 9, 10]) /* ty=Tensor[(1, 9, 10), float64] */;
    %96 = @func_746(%94, %95) /* ty=(Tensor[(?, 9, 10), float64],) */;
    %97 = sinh(%91) /* ty=Tensor[(13, 14, 2), float32] */;
    %98 = %96.0;
    (%97, %98, %var_1044)
  };
  %99(%var_1053, %var_1054) /* ty=(Tensor[(13, 14, 2), float32], Tensor[(?, 9, 10), float64], Tensor[(90), float64]) */
}

def @func_1499(%var_1498: Tensor[(16, 7, 8), float64]) -> (Tensor[(13, 10, 2), uint32], Tensor[(260), float32], Tensor[(16, 7, 8), int16], Tensor[(5, 15, 2), bool], Tensor[(16, 7, 8), int64], Tensor[(13, 10, 2), uint32]) {
  %121 = fn (%var_1463: Tensor[(16, 7, 8), float64]) -> (Tensor[(13, 10, 2), uint32], Tensor[(260), float32], Tensor[(16, 7, 8), int16], Tensor[(5, 15, 2), bool], Tensor[(16, 7, 8), int64], Tensor[(13, 10, 2), uint32]) {
    %100 = cast(meta[relay.Constant][4] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
    %101 = reshape(%100, newshape=[260]) /* ty=Tensor[(260), float32] */;
    %102 = @func_1130(%101) /* ty=(Tensor[(1, 7, 8), float64], Tensor[(13, 10, 2), uint32], Tensor[(260), float64]) */;
    %103 = @func_574() /* ty=Tensor[(1, 7, 8), float64] */;
    %104 = cast(%103, dtype="int16") /* ty=Tensor[(1, 7, 8), int16] */;
    %105 = cast(%var_1463, dtype="int16") /* ty=Tensor[(16, 7, 8), int16] */;
    %106 = @func_676() /* ty=(Tensor[(5, 15, 2), float64], Tensor[(5, 15, 2), bool]) */;
    %107 = cast(%var_1463, dtype="int64") /* ty=Tensor[(16, 7, 8), int64] */;
    %108 = cast(%103, dtype="int64") /* ty=Tensor[(1, 7, 8), int64] */;
    %109 = cast(meta[relay.Constant][4] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
    %110 = cast(meta[relay.Constant][4] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
    %111 = cast(meta[relay.Constant][4] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
    %112 = reshape(%109, newshape=[13, 10, 2]) /* ty=Tensor[(13, 10, 2), float32] */;
    %113 = reshape(%110, newshape=[13, 10, 2]) /* ty=Tensor[(13, 10, 2), float32] */;
    %114 = reshape(%111, newshape=[13, 10, 2]) /* ty=Tensor[(13, 10, 2), float32] */;
    %115 = @func_410(%112, %113, %114) /* ty=(Tensor[(13, 10, 2), float32], Tensor[(13, 10, 2), uint32]) */;
    %116 = %102.1;
    %117 = logical_xor(%104, %105) /* ty=Tensor[(16, 7, 8), int16] */;
    %118 = %106.1;
    %119 = add(%107, %108) /* ty=Tensor[(16, 7, 8), int64] */;
    %120 = %115.1;
    (%116, meta[relay.Constant][4] /* ty=Tensor[(260), float32] */, %117, %118, %119, %120)
  };
  %121(%var_1498) /* ty=(Tensor[(13, 10, 2), uint32], Tensor[(260), float32], Tensor[(16, 7, 8), int16], Tensor[(5, 15, 2), bool], Tensor[(16, 7, 8), int64], Tensor[(13, 10, 2), uint32]) */
}

def @func_5941() -> (Tensor[(1, 7, 8), float32], Tensor[(7, 13, 10), float32], int32, Tensor[(910), int32], Tensor[(9, 1, 5), float64], Tensor[(45), float64]) {
  @func_5939() /* ty=(Tensor[(1, 7, 8), float32], Tensor[(7, 13, 10), float32], int32, Tensor[(910), int32], Tensor[(9, 1, 5), float64], Tensor[(45), float64]) */
}

def @func_1733() -> (Tensor[(13, 10, 2), float32], Tensor[(13, 10, 2), float64], Tensor[(1, 7, 8), float64]) {
  %122 = @func_1578() /* ty=(Tensor[(13, 10, 2), float32], Tensor[(?, 7, 8), int64]) */;
  %123 = @func_1578() /* ty=(Tensor[(13, 10, 2), float32], Tensor[(?, 7, 8), int64]) */;
  %124 = %123.0;
  %125 = cast(%124, dtype="float64") /* ty=Tensor[(13, 10, 2), float64] */;
  %126 = @func_600() /* ty=(Tensor[(1, 7, 8), float64],) */;
  %127 = %122.0;
  %128 = cosh(%125) /* ty=Tensor[(13, 10, 2), float64] */;
  %129 = %126.0;
  (%127, %128, %129)
}

def @func_6172() -> Tensor[(1, 7, 8), float64] {
  %130 = fn () -> Tensor[(1, 7, 8), float64] {
    @func_526() /* ty=Tensor[(1, 7, 8), float64] */
  };
  %130() /* ty=Tensor[(1, 7, 8), float64] */
}

def @func_4169() -> Tensor[(72), float32] {
  %131 = @func_3034() /* ty=(Tensor[(72), float32],) */;
  %131.0
}

def @func_1918() -> (Tensor[(1, 7, 8), float32],) {
  @func_1916() /* ty=(Tensor[(1, 7, 8), float32],) */
}

def @func_6250() -> (Tensor[(72), float32], Tensor[(?, 7, 8), int64], Tensor[(5, 15, 2), float64]) {
  %144 = fn () -> (Tensor[(72), float32], Tensor[(?, 7, 8), int64], Tensor[(5, 15, 2), float64]) {
    %132 = @func_2869() /* ty=(Tensor[(1, 7, 8), float64],) */;
    %133 = %132.0;
    %134 = cast(%133, dtype="float32") /* ty=Tensor[(1, 7, 8), float32] */;
    %135 = erf(%134) /* ty=Tensor[(1, 7, 8), float32] */;
    %136 = cast(%135, dtype="int64") /* ty=Tensor[(1, 7, 8), int64] */;
    %137 = shape_of(%133, dtype="int32") /* ty=Tensor[(3), int32] */;
    %138 = cast(%133, dtype="int64") /* ty=Tensor[(1, 7, 8), int64] */;
    %139 = dyn.reshape(%136, %137, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %140 = @func_3079() /* ty=(Tensor[(5, 15, 2), float64], Tensor[(9, 7, 8), int32], Tensor[(504), float64]) */;
    %141 = @func_2899() /* ty=Tensor[(72), float32] */;
    %142 = bitwise_or(%138, %139) /* ty=Tensor[(?, 7, 8), int64] */;
    %143 = %140.0;
    (%141, %142, %143)
  };
  %144() /* ty=(Tensor[(72), float32], Tensor[(?, 7, 8), int64], Tensor[(5, 15, 2), float64]) */
}

def @func_575() -> Tensor[(1, 7, 8), float64] {
  %145 = fn () -> Tensor[(1, 7, 8), float64] {
    @func_526() /* ty=Tensor[(1, 7, 8), float64] */
  };
  %145() /* ty=Tensor[(1, 7, 8), float64] */
}

def @func_5201() -> (Tensor[(1, 7, 8), float64],) {
  %148 = fn () -> (Tensor[(1, 7, 8), float64],) {
    %146 = @func_2869() /* ty=(Tensor[(1, 7, 8), float64],) */;
    %147 = %146.0;
    (%147,)
  };
  %148() /* ty=(Tensor[(1, 7, 8), float64],) */
}

def @func_4780() -> (Tensor[(1, 7, 8), float64],) {
  @func_4778() /* ty=(Tensor[(1, 7, 8), float64],) */
}

def @func_6657(%var_6655: Tensor[(11, 9, 16), float64], %var_6656: Tensor[(896), float64]) -> (Tensor[(11, 9, 16), uint32], Tensor[(16, 7, 8), bool], Tensor[(896), float64], Tensor[(56), float64]) {
  @func_6653(%var_6655, %var_6656) /* ty=(Tensor[(11, 9, 16), uint32], Tensor[(16, 7, 8), bool], Tensor[(896), float64], Tensor[(56), float64]) */
}

def @func_7219() -> (Tensor[(16, 7, 8), float64],) {
  %151 = fn () -> (Tensor[(16, 7, 8), float64],) {
    %149 = @func_6913() /* ty=(Tensor[(16, 7, 8), float64],) */;
    %150 = %149.0;
    (%150,)
  };
  %151() /* ty=(Tensor[(16, 7, 8), float64],) */
}

def @func_3807(%var_3806: Tensor[(224, 4), float64]) -> (Tensor[(16, 7, 8), float32], Tensor[(1, 7, 8), float64], Tensor[(260), float32], Tensor[(224, 4), float64], Tensor[(224, 4), uint16], Tensor[(1, 7, 8), float64]) {
  %183 = fn (%var_3746: Tensor[(224, 4), float64]) -> (Tensor[(16, 7, 8), float32], Tensor[(1, 7, 8), float64], Tensor[(260), float32], Tensor[(224, 4), float64], Tensor[(224, 4), uint16], Tensor[(1, 7, 8), float64]) {
    %152 = cast(%var_3746, dtype="float64") /* ty=Tensor[(224, 4), float64] */;
    %153 = @func_2122() /* ty=(Tensor[(1, 7, 8), float32], Tensor[(13, 14, 2), float32], Tensor[(364), float32], Tensor[(90, 1), float64], Tensor[(16, 7, 8), float64], Tensor[(1, 7, 8), float64]) */;
    %154 = %153.5;
    %155 = cast(%154, dtype="float64") /* ty=Tensor[(1, 7, 8), float64] */;
    %156 = reshape(%152, newshape=[16, 7, 8]) /* ty=Tensor[(16, 7, 8), float64] */;
    %157 = reshape(%155, newshape=[56]) /* ty=Tensor[(56), float64] */;
    %158 = @func_2490(%156, %157) /* ty=(Tensor[(16, 7, 8), float32], Tensor[(16, 7, 8), bool], Tensor[(260), float32], Tensor[(56), float64]) */;
    %159 = cast(%154, dtype="float64") /* ty=Tensor[(1, 7, 8), float64] */;
    %160 = %158.0;
    %161 = cast(%160, dtype="float64") /* ty=Tensor[(16, 7, 8), float64] */;
    %162 = cast(%154, dtype="float64") /* ty=Tensor[(1, 7, 8), float64] */;
    %163 = reshape(%161, newshape=[16, 7, 8]) /* ty=Tensor[(16, 7, 8), float64] */;
    %164 = reshape(%162, newshape=[56]) /* ty=Tensor[(56), float64] */;
    %165 = @func_2490(%163, %164) /* ty=(Tensor[(16, 7, 8), float32], Tensor[(16, 7, 8), bool], Tensor[(260), float32], Tensor[(56), float64]) */;
    %166 = cast(%var_3746, dtype="float64") /* ty=Tensor[(224, 4), float64] */;
    %167 = rsqrt(%166) /* ty=Tensor[(224, 4), float64] */;
    %168 = cast(%167, dtype="float32") /* ty=Tensor[(224, 4), float32] */;
    %169 = acos(%168) /* ty=Tensor[(224, 4), float32] */;
    %170 = cast(%169, dtype="float64") /* ty=Tensor[(224, 4), float64] */;
    %171 = cast(%169, dtype="float64") /* ty=Tensor[(224, 4), float64] */;
    %172 = cos(%171) /* ty=Tensor[(224, 4), float64] */;
    %173 = cast(%169, dtype="uint16") /* ty=Tensor[(224, 4), uint16] */;
    %174 = shape_of(%172, dtype="int32") /* ty=Tensor[(2), int32] */;
    %175 = cast(%172, dtype="uint16") /* ty=Tensor[(224, 4), uint16] */;
    %176 = dyn.reshape(%173, %174, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    %177 = @func_2122() /* ty=(Tensor[(1, 7, 8), float32], Tensor[(13, 14, 2), float32], Tensor[(364), float32], Tensor[(90, 1), float64], Tensor[(16, 7, 8), float64], Tensor[(1, 7, 8), float64]) */;
    %178 = acos(%159) /* ty=Tensor[(1, 7, 8), float64] */;
    %179 = %165.2;
    %180 = sinh(%170) /* ty=Tensor[(224, 4), float64] */;
    %181 = logical_xor(%175, %176) /* ty=Tensor[(224, 4), uint16] */;
    %182 = %177.5;
    (%160, %178, %179, %180, %181, %182)
  };
  %183(%var_3806) /* ty=(Tensor[(16, 7, 8), float32], Tensor[(1, 7, 8), float64], Tensor[(260), float32], Tensor[(224, 4), float64], Tensor[(224, 4), uint16], Tensor[(1, 7, 8), float64]) */
}

def @func_6103() -> Tensor[(1, 7, 8), float32] {
  %185 = fn () -> Tensor[(1, 7, 8), float32] {
    %184 = @func_2675() /* ty=(Tensor[(1, 7, 8), float32],) */;
    %184.0
  };
  %185() /* ty=Tensor[(1, 7, 8), float32] */
}

def @func_1916() -> (Tensor[(1, 7, 8), float32],) {
  %186 = @func_925() /* ty=Tensor[(1, 7, 8), float32] */;
  (%186,)
}

def @func_5722() -> (Tensor[(13, 10, 2), float32],) {
  %187 = @func_1733() /* ty=(Tensor[(13, 10, 2), float32], Tensor[(13, 10, 2), float64], Tensor[(1, 7, 8), float64]) */;
  %188 = %187.0;
  (%188,)
}

def @func_7452() -> Tensor[(72), float32] {
  @func_7315() /* ty=Tensor[(72), float32] */
}

def @func_4112(%var_4100: float32) -> (Tensor[(15, 1, 9), float32], Tensor[(16, 7, 8), float64]) {
  %189 = cast(%var_4100, dtype="float32") /* ty=float32 */;
  %190 = cast(meta[relay.Constant][5] /* ty=Tensor[(15, 1, 9), float32] */, dtype="float32") /* ty=Tensor[(15, 1, 9), float32] */;
  %191 = @func_1894() /* ty=(Tensor[(16, 7, 8), float64],) */;
  %192 = floor_divide(%189, %190) /* ty=Tensor[(15, 1, 9), float32] */;
  %193 = %191.0;
  (%192, %193)
}

def @func_4945(%var_4943: Tensor[(9, 11, 11), float32]) -> (Tensor[(9, 11, 11), float32],) {
  @func_4942(%var_4943) /* ty=(Tensor[(9, 11, 11), float32],) */
}

def @func_749(%var_747: Tensor[(1, 9, 10), float64], %var_748: Tensor[(1, 9, 10), float64]) -> (Tensor[(?, 9, 10), float64],) {
  %199 = fn (%var_735: Tensor[(1, 9, 10), float64], %var_736: Tensor[(1, 9, 10), float64]) -> (Tensor[(?, 9, 10), float64],) {
    %194 = cast(%var_736, dtype="float64") /* ty=Tensor[(1, 9, 10), float64] */;
    %195 = shape_of(%var_735, dtype="int32") /* ty=Tensor[(3), int32] */;
    %196 = cast(%var_735, dtype="float64") /* ty=Tensor[(1, 9, 10), float64] */;
    %197 = dyn.reshape(%194, %195, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %198 = power(%196, %197) /* ty=Tensor[(?, 9, 10), float64] */;
    (%198,)
  };
  %199(%var_747, %var_748) /* ty=(Tensor[(?, 9, 10), float64],) */
}

def @func_2676() -> (Tensor[(1, 7, 8), float32],) {
  %203 = fn () -> (Tensor[(1, 7, 8), float32],) {
    %200 = @func_495() /* ty=Tensor[(1, 7, 8), float64] */;
    %201 = cast(%200, dtype="float32") /* ty=Tensor[(1, 7, 8), float32] */;
    %202 = sqrt(%201) /* ty=Tensor[(1, 7, 8), float32] */;
    (%202,)
  };
  %203() /* ty=(Tensor[(1, 7, 8), float32],) */
}

def @func_7804(%var_7803: Tensor[(72), float32]) -> (Tensor[(1, 7, 8), float32], Tensor[(1, 7, 8), float64], Tensor[(1, 7, 8), float64], Tensor[(72), float32], Tensor[(260), float32], Tensor[(896), float64], Tensor[(5, 15, 2), bool], Tensor[(150), float64]) {
  %221 = fn (%var_7783: Tensor[(72), float32]) -> (Tensor[(1, 7, 8), float32], Tensor[(1, 7, 8), float64], Tensor[(1, 7, 8), float64], Tensor[(72), float32], Tensor[(260), float32], Tensor[(896), float64], Tensor[(5, 15, 2), bool], Tensor[(150), float64]) {
    %204 = @func_3681() /* ty=(Tensor[(?, 7, 8), int64], Tensor[(72), float32], Tensor[(1, 7, 8), float64]) */;
    %205 = cast(%var_7783, dtype="float32") /* ty=Tensor[(72), float32] */;
    %206 = reshape(%205, newshape=[9, 4, 2]) /* ty=Tensor[(9, 4, 2), float32] */;
    %207 = @func_720(%206) /* ty=(Tensor[(9, 4, 2), float32], Tensor[(1, 7, 8), float64]) */;
    %208 = cast(meta[relay.Constant][6] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
    %209 = %207.1;
    %210 = cast(%209, dtype="float64") /* ty=Tensor[(1, 7, 8), float64] */;
    %211 = reshape(%208, newshape=[16, 7, 8]) /* ty=Tensor[(16, 7, 8), float64] */;
    %212 = reshape(%210, newshape=[56]) /* ty=Tensor[(56), float64] */;
    %213 = @func_2490(%211, %212) /* ty=(Tensor[(16, 7, 8), float32], Tensor[(16, 7, 8), bool], Tensor[(260), float32], Tensor[(56), float64]) */;
    %214 = cast(meta[relay.Constant][7] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
    %215 = reshape(%214, newshape=[5, 15, 2]) /* ty=Tensor[(5, 15, 2), float64] */;
    %216 = @func_4325(%215) /* ty=(Tensor[(72), float32], Tensor[(5, 15, 2), bool]) */;
    %217 = @func_6681() /* ty=Tensor[(1, 7, 8), float32] */;
    %218 = %204.2;
    %219 = %213.2;
    %220 = %216.1;
    (%217, %218, %209, %var_7783, %219, meta[relay.Constant][6] /* ty=Tensor[(896), float64] */, %220, meta[relay.Constant][7] /* ty=Tensor[(150), float64] */)
  };
  %221(%var_7803) /* ty=(Tensor[(1, 7, 8), float32], Tensor[(1, 7, 8), float64], Tensor[(1, 7, 8), float64], Tensor[(72), float32], Tensor[(260), float32], Tensor[(896), float64], Tensor[(5, 15, 2), bool], Tensor[(150), float64]) */
}

def @func_6785() -> (Tensor[(1, 7, 8), float64],) {
  @func_6783() /* ty=(Tensor[(1, 7, 8), float64],) */
}

def @func_1894() -> (Tensor[(16, 7, 8), float64],) {
  %222 = @func_1513() /* ty=(Tensor[(1, 7, 8), float64], Tensor[(16, 7, 8), float64], Tensor[(896), float64], Tensor[(72), float32]) */;
  %223 = %222.1;
  (%223,)
}

def @func_3537() -> (Tensor[(1, 7, 8), float64],) {
  %226 = fn () -> (Tensor[(1, 7, 8), float64],) {
    %224 = @func_2869() /* ty=(Tensor[(1, 7, 8), float64],) */;
    %225 = %224.0;
    (%225,)
  };
  %226() /* ty=(Tensor[(1, 7, 8), float64],) */
}

def @func_2336() -> (Tensor[(9, 7, 8), uint32], Tensor[(13, 10, 2), float64]) {
  @func_2334() /* ty=(Tensor[(9, 7, 8), uint32], Tensor[(13, 10, 2), float64]) */
}

def @func_4942(%var_4934: Tensor[(9, 11, 11), float32]) -> (Tensor[(9, 11, 11), float32],) {
  %227 = cast(%var_4934, dtype="float32") /* ty=Tensor[(9, 11, 11), float32] */;
  %228 = log(%227) /* ty=Tensor[(9, 11, 11), float32] */;
  (%228,)
}

def @func_6913() -> (Tensor[(16, 7, 8), float64],) {
  %229 = @func_1894() /* ty=(Tensor[(16, 7, 8), float64],) */;
  %230 = %229.0;
  (%230,)
}

def @func_3922(%var_3920: Tensor[(1, 7, 8), float32], %var_3921: Tensor[(150), float64]) -> (Tensor[(?, 7, 8), uint8], Tensor[(5, 15, 2), uint64], Tensor[(150), float64]) {
  @func_3918(%var_3920, %var_3921) /* ty=(Tensor[(?, 7, 8), uint8], Tensor[(5, 15, 2), uint64], Tensor[(150), float64]) */
}

def @func_1896() -> (Tensor[(16, 7, 8), float64],) {
  @func_1894() /* ty=(Tensor[(16, 7, 8), float64],) */
}

def @func_5484() -> (Tensor[(364), float32],) {
  %233 = fn () -> (Tensor[(364), float32],) {
    %231 = @func_2122() /* ty=(Tensor[(1, 7, 8), float32], Tensor[(13, 14, 2), float32], Tensor[(364), float32], Tensor[(90, 1), float64], Tensor[(16, 7, 8), float64], Tensor[(1, 7, 8), float64]) */;
    %232 = %231.2;
    (%232,)
  };
  %233() /* ty=(Tensor[(364), float32],) */
}

def @func_7402() -> (Tensor[(1, 7, 8), float64],) {
  %234 = @func_4449() /* ty=Tensor[(1, 7, 8), float32] */;
  %235 = cast(%234, dtype="float64") /* ty=Tensor[(1, 7, 8), float64] */;
  %236 = log(%235) /* ty=Tensor[(1, 7, 8), float64] */;
  (%236,)
}

def @func_5276() -> (Tensor[(1, 7, 8), float64], Tensor[(12, 7, 8), float64], Tensor[(560), bool]) {
  %243 = fn () -> (Tensor[(1, 7, 8), float64], Tensor[(12, 7, 8), float64], Tensor[(560), bool]) {
    %237 = @func_4382() /* ty=(Tensor[(1, 7, 8), float64], Tensor[(1, 7, 8), float64]) */;
    %238 = cast(meta[relay.Constant][8] /* ty=Tensor[(560), bool] */, dtype="bool") /* ty=Tensor[(560), bool] */;
    %239 = reshape(%238, newshape=[10, 7, 8]) /* ty=Tensor[(10, 7, 8), bool] */;
    %240 = @func_1967(%239) /* ty=(Tensor[(12, 7, 8), bool], Tensor[(1, 7, 8), float32], Tensor[(10, 7, 8), uint16], Tensor[(12, 7, 8), float64]) */;
    %241 = %237.0;
    %242 = %240.3;
    (%241, %242, meta[relay.Constant][8] /* ty=Tensor[(560), bool] */)
  };
  %243() /* ty=(Tensor[(1, 7, 8), float64], Tensor[(12, 7, 8), float64], Tensor[(560), bool]) */
}

def @func_6810(%var_6808: Tensor[(280), float32]) -> (Tensor[(1, 7, 8), float64], Tensor[(72), float32], Tensor[(280), float32], Tensor[(1, 7, 8), float64], Tensor[(1, 7, 8), float32]) {
  @func_6807(%var_6808) /* ty=(Tensor[(1, 7, 8), float64], Tensor[(72), float32], Tensor[(280), float32], Tensor[(1, 7, 8), float64], Tensor[(1, 7, 8), float32]) */
}

def @func_3329(%var_3310: Tensor[(5, 15, 2), float64]) -> (Tensor[(5, 15, 2), uint64],) {
  %244 = @func_676() /* ty=(Tensor[(5, 15, 2), float64], Tensor[(5, 15, 2), bool]) */;
  %245 = %244.0;
  %246 = cast(%var_3310, dtype="uint64") /* ty=Tensor[(5, 15, 2), uint64] */;
  %247 = shape_of(%245, dtype="int32") /* ty=Tensor[(3), int32] */;
  %248 = cast(%245, dtype="uint64") /* ty=Tensor[(5, 15, 2), uint64] */;
  %249 = dyn.reshape(%246, %247, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %250 = multiply(%248, %249) /* ty=Tensor[(5, 15, 2), uint64] */;
  (%250,)
}

def @func_926() -> Tensor[(1, 7, 8), float32] {
  %253 = fn () -> Tensor[(1, 7, 8), float32] {
    %251 = @func_574() /* ty=Tensor[(1, 7, 8), float64] */;
    %252 = cast(%251, dtype="float32") /* ty=Tensor[(1, 7, 8), float32] */;
    rsqrt(%252) /* ty=Tensor[(1, 7, 8), float32] */
  };
  %253() /* ty=Tensor[(1, 7, 8), float32] */
}

def @func_3009(%var_3007: int32, %var_3008: Tensor[(7, 13, 10), int32]) -> Tensor[(7, 13, 10), float32] {
  %258 = fn (%var_2976: int32, %var_2977: Tensor[(7, 13, 10), int32]) -> Tensor[(7, 13, 10), float32] {
    %254 = cast(%var_2976, dtype="int32") /* ty=int32 */;
    %255 = cast(%var_2977, dtype="int32") /* ty=Tensor[(7, 13, 10), int32] */;
    %256 = logical_xor(%254, %255) /* ty=Tensor[(7, 13, 10), int32] */;
    %257 = cast(%256, dtype="float32") /* ty=Tensor[(7, 13, 10), float32] */;
    log(%257) /* ty=Tensor[(7, 13, 10), float32] */
  };
  %258(%var_3007, %var_3008) /* ty=Tensor[(7, 13, 10), float32] */
}

def @func_5760() -> (Tensor[(72), float32],) {
  %261 = fn () -> (Tensor[(72), float32],) {
    %259 = @func_2810() /* ty=(Tensor[(72), float32],) */;
    %260 = %259.0;
    (%260,)
  };
  %261() /* ty=(Tensor[(72), float32],) */
}

def @func_5985() -> Tensor[(14, 7, 8), float64] {
  %266 = fn () -> Tensor[(14, 7, 8), float64] {
    %262 = @func_2122() /* ty=(Tensor[(1, 7, 8), float32], Tensor[(13, 14, 2), float32], Tensor[(364), float32], Tensor[(90, 1), float64], Tensor[(16, 7, 8), float64], Tensor[(1, 7, 8), float64]) */;
    %263 = %262.5;
    %264 = cast(%263, dtype="float64") /* ty=Tensor[(1, 7, 8), float64] */;
    %265 = cast(meta[relay.Constant][9] /* ty=Tensor[(14, 7, 8), float64] */, dtype="float64") /* ty=Tensor[(14, 7, 8), float64] */;
    add(%264, %265) /* ty=Tensor[(14, 7, 8), float64] */
  };
  %266() /* ty=Tensor[(14, 7, 8), float64] */
}

def @func_6165() -> (Tensor[(1, 7, 8), float64],) {
  @func_6163() /* ty=(Tensor[(1, 7, 8), float64],) */
}

def @func_1340(%var_1335: Tensor[(9, 7, 8), float64]) -> (Tensor[(9, 7, 8), int32],) {
  %267 = @func_1071() /* ty=(Tensor[(1, 7, 8), float64],) */;
  %268 = %267.0;
  %269 = cast(%268, dtype="int32") /* ty=Tensor[(1, 7, 8), int32] */;
  %270 = cast(%var_1335, dtype="int32") /* ty=Tensor[(9, 7, 8), int32] */;
  %271 = multiply(%269, %270) /* ty=Tensor[(9, 7, 8), int32] */;
  (%271,)
}

def @func_7628(%var_7620: Tensor[(90), float64]) -> (Tensor[(13, 10, 2), float32], Tensor[(16, 7, 8), int64], Tensor[(1, 7, 8), float64], Tensor[(?, 9, 10), float64], Tensor[(90), float64]) {
  %272 = @func_5722() /* ty=(Tensor[(13, 10, 2), float32],) */;
  %273 = @func_3718() /* ty=(Tensor[(1, 7, 8), float32], Tensor[(16, 7, 8), int64], Tensor[(896), float64]) */;
  %274 = cast(%var_7620, dtype="float64") /* ty=Tensor[(90), float64] */;
  %275 = cast(%var_7620, dtype="float64") /* ty=Tensor[(90), float64] */;
  %276 = reshape(%274, newshape=[1, 9, 10]) /* ty=Tensor[(1, 9, 10), float64] */;
  %277 = reshape(%275, newshape=[1, 9, 10]) /* ty=Tensor[(1, 9, 10), float64] */;
  %278 = @func_746(%276, %277) /* ty=(Tensor[(?, 9, 10), float64],) */;
  %279 = %272.0;
  %280 = %273.1;
  %281 = @func_3132() /* ty=Tensor[(1, 7, 8), float64] */;
  %282 = %278.0;
  (%279, %280, %281, %282, %var_7620)
}

def @func_1317() -> (Tensor[(1, 7, 8), float64],) {
  %284 = fn () -> (Tensor[(1, 7, 8), float64],) {
    %283 = @func_495() /* ty=Tensor[(1, 7, 8), float64] */;
    (%283,)
  };
  %284() /* ty=(Tensor[(1, 7, 8), float64],) */
}

def @func_4115(%var_4113: float32) -> (Tensor[(15, 1, 9), float32], Tensor[(16, 7, 8), float64]) {
  @func_4112(%var_4113) /* ty=(Tensor[(15, 1, 9), float32], Tensor[(16, 7, 8), float64]) */
}

def @func_6484() -> (Tensor[(72), float32], Tensor[(72), float32], Tensor[(9, 11, 11), float32], Tensor[(11, 99), float32], Tensor[(72), float32], Tensor[(1, 7, 8), float64], Tensor[(364), float64], Tensor[(?, 7, 8), int32]) {
  %309 = fn () -> (Tensor[(72), float32], Tensor[(72), float32], Tensor[(9, 11, 11), float32], Tensor[(11, 99), float32], Tensor[(72), float32], Tensor[(1, 7, 8), float64], Tensor[(364), float64], Tensor[(?, 7, 8), int32]) {
    %285 = @func_5877() /* ty=(Tensor[(72), float32],) */;
    %286 = @func_2810() /* ty=(Tensor[(72), float32],) */;
    %287 = cast(meta[relay.Constant][10] /* ty=Tensor[(11, 99), float32] */, dtype="float32") /* ty=Tensor[(11, 99), float32] */;
    %288 = reshape(%287, newshape=[9, 11, 11]) /* ty=Tensor[(9, 11, 11), float32] */;
    %289 = @func_4942(%288) /* ty=(Tensor[(9, 11, 11), float32],) */;
    %290 = @func_2291() /* ty=(Tensor[(1, 7, 8), float32], Tensor[(72), float32]) */;
    %291 = @func_3536() /* ty=(Tensor[(1, 7, 8), float64],) */;
    %292 = @func_5483() /* ty=(Tensor[(364), float32],) */;
    %293 = %292.0;
    %294 = cast(%293, dtype="float64") /* ty=Tensor[(364), float64] */;
    %295 = @func_4778() /* ty=(Tensor[(1, 7, 8), float64],) */;
    %296 = %295.0;
    %297 = @func_495() /* ty=Tensor[(1, 7, 8), float64] */;
    %298 = cast(%297, dtype="int32") /* ty=Tensor[(1, 7, 8), int32] */;
    %299 = shape_of(%296, dtype="int32") /* ty=Tensor[(3), int32] */;
    %300 = cast(%296, dtype="int32") /* ty=Tensor[(1, 7, 8), int32] */;
    %301 = dyn.reshape(%298, %299, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %302 = %285.0;
    %303 = %286.0;
    %304 = %289.0;
    %305 = %290.1;
    %306 = %291.0;
    %307 = erf(%294) /* ty=Tensor[(364), float64] */;
    %308 = left_shift(%300, %301) /* ty=Tensor[(?, 7, 8), int32] */;
    (%302, %303, %304, meta[relay.Constant][10] /* ty=Tensor[(11, 99), float32] */, %305, %306, %307, %308)
  };
  %309() /* ty=(Tensor[(72), float32], Tensor[(72), float32], Tensor[(9, 11, 11), float32], Tensor[(11, 99), float32], Tensor[(72), float32], Tensor[(1, 7, 8), float64], Tensor[(364), float64], Tensor[(?, 7, 8), int32]) */
}

def @func_2494(%var_2492: Tensor[(16, 7, 8), float64], %var_2493: Tensor[(56), float64]) -> (Tensor[(16, 7, 8), float32], Tensor[(16, 7, 8), bool], Tensor[(260), float32], Tensor[(56), float64]) {
  @func_2490(%var_2492, %var_2493) /* ty=(Tensor[(16, 7, 8), float32], Tensor[(16, 7, 8), bool], Tensor[(260), float32], Tensor[(56), float64]) */
}

def @func_2801() -> (Tensor[(5, 15, 2), float32], Tensor[(?, 7, 8), int64]) {
  @func_2799() /* ty=(Tensor[(5, 15, 2), float32], Tensor[(?, 7, 8), int64]) */
}

def @func_1260() -> (Tensor[(1, 7, 8), float64], Tensor[(72), float32], Tensor[(?, 7, 8), bool]) {
  %310 = cast(meta[relay.Constant][11] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %311 = reshape(%310, newshape=[9, 4, 2]) /* ty=Tensor[(9, 4, 2), float32] */;
  %312 = @func_720(%311) /* ty=(Tensor[(9, 4, 2), float32], Tensor[(1, 7, 8), float64]) */;
  %313 = @func_526() /* ty=Tensor[(1, 7, 8), float64] */;
  %314 = cast(%313, dtype="float64") /* ty=Tensor[(1, 7, 8), float64] */;
  %315 = log10(%314) /* ty=Tensor[(1, 7, 8), float64] */;
  %316 = cast(%313, dtype="bool") /* ty=Tensor[(1, 7, 8), bool] */;
  %317 = shape_of(%315, dtype="int32") /* ty=Tensor[(3), int32] */;
  %318 = cast(%315, dtype="bool") /* ty=Tensor[(1, 7, 8), bool] */;
  %319 = dyn.reshape(%316, %317, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %320 = %312.1;
  %321 = logical_or(%318, %319) /* ty=Tensor[(?, 7, 8), bool] */;
  (%320, meta[relay.Constant][11] /* ty=Tensor[(72), float32] */, %321)
}

def @func_4581() -> (Tensor[(9, 12, 9), float32],) {
  %322 = cast(meta[relay.Constant][12] /* ty=Tensor[(9, 12, 9), float32] */, dtype="float32") /* ty=Tensor[(9, 12, 9), float32] */;
  %323 = atan(%322) /* ty=Tensor[(9, 12, 9), float32] */;
  (%323,)
}

def @func_2414(%var_2412: Tensor[(9, 3, 12), uint8]) -> Tensor[(9, 3, 12), uint8] {
  @func_2411(%var_2412) /* ty=Tensor[(9, 3, 12), uint8] */
}

def @func_2776(%var_2774: Tensor[(16, 1, 2), float64], %var_2775: Tensor[(504, 1), float64]) -> (Tensor[(16, 14, 2), float64], Tensor[(13, 10, 2), float64], Tensor[(9, 7, 8), int32], Tensor[(504, 1), float64]) {
  %333 = fn (%var_2731: Tensor[(16, 1, 2), float64], %var_2768: Tensor[(504, 1), float64]) -> (Tensor[(16, 14, 2), float64], Tensor[(13, 10, 2), float64], Tensor[(9, 7, 8), int32], Tensor[(504, 1), float64]) {
    %324 = cast(%var_2731, dtype="float64") /* ty=Tensor[(16, 1, 2), float64] */;
    %325 = cast(meta[relay.Constant][13] /* ty=Tensor[(16, 14, 2), float64] */, dtype="float64") /* ty=Tensor[(16, 14, 2), float64] */;
    %326 = @func_2334() /* ty=(Tensor[(9, 7, 8), uint32], Tensor[(13, 10, 2), float64]) */;
    %327 = cast(%var_2768, dtype="float64") /* ty=Tensor[(504, 1), float64] */;
    %328 = reshape(%327, newshape=[9, 7, 8]) /* ty=Tensor[(9, 7, 8), float64] */;
    %329 = @func_1340(%328) /* ty=(Tensor[(9, 7, 8), int32],) */;
    %330 = power(%324, %325) /* ty=Tensor[(16, 14, 2), float64] */;
    %331 = %326.1;
    %332 = %329.0;
    (%330, %331, %332, %var_2768)
  };
  %333(%var_2774, %var_2775) /* ty=(Tensor[(16, 14, 2), float64], Tensor[(13, 10, 2), float64], Tensor[(9, 7, 8), int32], Tensor[(504, 1), float64]) */
}

def @func_3295(%var_3293: Tensor[(12, 13, 16), int16], %var_3294: Tensor[(12, 13, 16), int16]) -> (Tensor[(12, 13, 16), int16], Tensor[(16, 7, 8), float64], Tensor[(13, 10, 2), float32]) {
  %343 = fn (%var_3264: Tensor[(12, 13, 16), int16], %var_3265: Tensor[(12, 13, 16), int16]) -> (Tensor[(12, 13, 16), int16], Tensor[(16, 7, 8), float64], Tensor[(13, 10, 2), float32]) {
    %334 = cast(%var_3265, dtype="int16") /* ty=Tensor[(12, 13, 16), int16] */;
    %335 = shape_of(%var_3264, dtype="int32") /* ty=Tensor[(3), int32] */;
    %336 = cast(%var_3264, dtype="int16") /* ty=Tensor[(12, 13, 16), int16] */;
    %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %338 = @func_2164() /* ty=(Tensor[(16, 7, 8), float64],) */;
    %339 = @func_1578() /* ty=(Tensor[(13, 10, 2), float32], Tensor[(?, 7, 8), int64]) */;
    %340 = left_shift(%336, %337) /* ty=Tensor[(12, 13, 16), int16] */;
    %341 = %338.0;
    %342 = %339.0;
    (%340, %341, %342)
  };
  %343(%var_3293, %var_3294) /* ty=(Tensor[(12, 13, 16), int16], Tensor[(16, 7, 8), float64], Tensor[(13, 10, 2), float32]) */
}

def @func_1579() -> (Tensor[(13, 10, 2), float32], Tensor[(?, 7, 8), int64]) {
  %356 = fn () -> (Tensor[(13, 10, 2), float32], Tensor[(?, 7, 8), int64]) {
    %344 = @func_925() /* ty=Tensor[(1, 7, 8), float32] */;
    %345 = cast(%344, dtype="float64") /* ty=Tensor[(1, 7, 8), float64] */;
    %346 = reshape(%345, newshape=[1, 7, 8]) /* ty=Tensor[(1, 7, 8), float64] */;
    %347 = @func_1421(%346) /* ty=(Tensor[(?, 7, 8), float32], Tensor[(1, 7, 8), float64], Tensor[(?, 9, 10), float64], Tensor[(90), float64], Tensor[(5, 7, 8), uint8], Tensor[(9, 7, 8), int32], Tensor[(504), float64], Tensor[(13, 10, 2), float32], Tensor[(260), float32]) */;
    %348 = cast(%344, dtype="float32") /* ty=Tensor[(1, 7, 8), float32] */;
    %349 = sigmoid(%348) /* ty=Tensor[(1, 7, 8), float32] */;
    %350 = cast(%344, dtype="int64") /* ty=Tensor[(1, 7, 8), int64] */;
    %351 = shape_of(%349, dtype="int32") /* ty=Tensor[(3), int32] */;
    %352 = cast(%349, dtype="int64") /* ty=Tensor[(1, 7, 8), int64] */;
    %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %354 = %347.7;
    %355 = maximum(%352, %353) /* ty=Tensor[(?, 7, 8), int64] */;
    (%354, %355)
  };
  %356() /* ty=(Tensor[(13, 10, 2), float32], Tensor[(?, 7, 8), int64]) */
}

def @func_7043() -> (Tensor[(1, 7, 8), float64], Tensor[(1, 7, 8), float64], Tensor[(72), float32]) {
  %357 = @func_5593() /* ty=(Tensor[(1, 7, 8), float64],) */;
  %358 = %357.0;
  %359 = @func_574() /* ty=Tensor[(1, 7, 8), float64] */;
  %360 = @func_5809() /* ty=Tensor[(72), float32] */;
  (%358, %359, %360)
}

def @func_1133(%var_1131: Tensor[(260), float32]) -> (Tensor[(1, 7, 8), float64], Tensor[(13, 10, 2), uint32], Tensor[(260), float64]) {
  @func_1130(%var_1131) /* ty=(Tensor[(1, 7, 8), float64], Tensor[(13, 10, 2), uint32], Tensor[(260), float64]) */
}

def @func_5315() -> Tensor[(16, 7, 8), float64] {
  %362 = fn () -> Tensor[(16, 7, 8), float64] {
    %361 = @func_1894() /* ty=(Tensor[(16, 7, 8), float64],) */;
    %361.0
  };
  %362() /* ty=Tensor[(16, 7, 8), float64] */
}

def @func_1595() -> Tensor[(1, 7, 8), float64] {
  %364 = fn () -> Tensor[(1, 7, 8), float64] {
    %363 = @func_1071() /* ty=(Tensor[(1, 7, 8), float64],) */;
    %363.0
  };
  %364() /* ty=Tensor[(1, 7, 8), float64] */
}

def @func_3080() -> (Tensor[(5, 15, 2), float64], Tensor[(9, 7, 8), int32], Tensor[(504), float64]) {
  %371 = fn () -> (Tensor[(5, 15, 2), float64], Tensor[(9, 7, 8), int32], Tensor[(504), float64]) {
    %365 = @func_676() /* ty=(Tensor[(5, 15, 2), float64], Tensor[(5, 15, 2), bool]) */;
    %366 = cast(meta[relay.Constant][14] /* ty=Tensor[(504), float64] */, dtype="float64") /* ty=Tensor[(504), float64] */;
    %367 = reshape(%366, newshape=[9, 7, 8]) /* ty=Tensor[(9, 7, 8), float64] */;
    %368 = @func_1340(%367) /* ty=(Tensor[(9, 7, 8), int32],) */;
    %369 = %365.0;
    %370 = %368.0;
    (%369, %370, meta[relay.Constant][14] /* ty=Tensor[(504), float64] */)
  };
  %371() /* ty=(Tensor[(5, 15, 2), float64], Tensor[(9, 7, 8), int32], Tensor[(504), float64]) */
}

def @func_1969(%var_1968: Tensor[(10, 7, 8), bool]) -> (Tensor[(12, 7, 8), bool], Tensor[(1, 7, 8), float32], Tensor[(10, 7, 8), uint16], Tensor[(12, 7, 8), float64]) {
  %389 = fn (%var_1955: Tensor[(10, 7, 8), bool]) -> (Tensor[(12, 7, 8), bool], Tensor[(1, 7, 8), float32], Tensor[(10, 7, 8), uint16], Tensor[(12, 7, 8), float64]) {
    %372 = @func_925() /* ty=Tensor[(1, 7, 8), float32] */;
    %373 = cast(%372, dtype="bool") /* ty=Tensor[(1, 7, 8), bool] */;
    %374 = cast(meta[relay.Constant][15] /* ty=Tensor[(12, 7, 8), float32] */, dtype="bool") /* ty=Tensor[(12, 7, 8), bool] */;
    %375 = cast(%372, dtype="float64") /* ty=Tensor[(1, 7, 8), float64] */;
    %376 = atanh(%375) /* ty=Tensor[(1, 7, 8), float64] */;
    %377 = cast(%372, dtype="bool") /* ty=Tensor[(1, 7, 8), bool] */;
    %378 = shape_of(%376, dtype="int32") /* ty=Tensor[(3), int32] */;
    %379 = cast(%376, dtype="bool") /* ty=Tensor[(1, 7, 8), bool] */;
    %380 = dyn.reshape(%377, %378, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %381 = equal(%379, %380) /* ty=Tensor[(?, 7, 8), bool] */;
    %382 = cast(%381, dtype="uint16") /* ty=Tensor[(?, 7, 8), uint16] */;
    %383 = cast(%var_1955, dtype="uint16") /* ty=Tensor[(10, 7, 8), uint16] */;
    %384 = cast(meta[relay.Constant][15] /* ty=Tensor[(12, 7, 8), float32] */, dtype="float64") /* ty=Tensor[(12, 7, 8), float64] */;
    %385 = equal(%373, %374) /* ty=Tensor[(12, 7, 8), bool] */;
    %386 = @func_925() /* ty=Tensor[(1, 7, 8), float32] */;
    %387 = bitwise_or(%382, %383) /* ty=Tensor[(10, 7, 8), uint16] */;
    %388 = sinh(%384) /* ty=Tensor[(12, 7, 8), float64] */;
    (%385, %386, %387, %388)
  };
  %389(%var_1968) /* ty=(Tensor[(12, 7, 8), bool], Tensor[(1, 7, 8), float32], Tensor[(10, 7, 8), uint16], Tensor[(12, 7, 8), float64]) */
}

def @func_872(%var_767: Tensor[(260), float32], %var_816: Tensor[(90, 1), float64], %var_868: Tensor[(13, 10, 2), bool]) -> (Tensor[(?, 7, 8), bool], Tensor[(?, 9, 10), float64], Tensor[(90, 1), float64], Tensor[(1, 7, 8), float64], Tensor[(13, 10, 2), int16], Tensor[(?, 7, 8), bool], Tensor[(13, 10, 2), uint32], Tensor[(13, 10, 2), float32], Tensor[(13, 10, 2), float32]) {
  %390 = @func_600() /* ty=(Tensor[(1, 7, 8), float64],) */;
  %391 = %390.0;
  %392 = @func_526() /* ty=Tensor[(1, 7, 8), float64] */;
  %393 = cast(%392, dtype="bool") /* ty=Tensor[(1, 7, 8), bool] */;
  %394 = shape_of(%391, dtype="int32") /* ty=Tensor[(3), int32] */;
  %395 = cast(%391, dtype="bool") /* ty=Tensor[(1, 7, 8), bool] */;
  %396 = dyn.reshape(%393, %394, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %397 = cast(%var_816, dtype="float64") /* ty=Tensor[(90, 1), float64] */;
  %398 = cast(%var_816, dtype="float64") /* ty=Tensor[(90, 1), float64] */;
  %399 = reshape(%397, newshape=[1, 9, 10]) /* ty=Tensor[(1, 9, 10), float64] */;
  %400 = reshape(%398, newshape=[1, 9, 10]) /* ty=Tensor[(1, 9, 10), float64] */;
  %401 = @func_746(%399, %400) /* ty=(Tensor[(?, 9, 10), float64],) */;
  %402 = cast(%var_767, dtype="float32") /* ty=Tensor[(260), float32] */;
  %403 = cast(%var_767, dtype="float32") /* ty=Tensor[(260), float32] */;
  %404 = cast(%var_767, dtype="float32") /* ty=Tensor[(260), float32] */;
  %405 = reshape(%402, newshape=[13, 10, 2]) /* ty=Tensor[(13, 10, 2), float32] */;
  %406 = reshape(%403, newshape=[13, 10, 2]) /* ty=Tensor[(13, 10, 2), float32] */;
  %407 = reshape(%404, newshape=[13, 10, 2]) /* ty=Tensor[(13, 10, 2), float32] */;
  %408 = @func_410(%405, %406, %407) /* ty=(Tensor[(13, 10, 2), float32], Tensor[(13, 10, 2), uint32]) */;
  %409 = %408.1;
  %410 = cast(%var_767, dtype="bool") /* ty=Tensor[(260), bool] */;
  %411 = shape_of(%409, dtype="int32") /* ty=Tensor[(3), int32] */;
  %412 = cast(%409, dtype="bool") /* ty=Tensor[(13, 10, 2), bool] */;
  %413 = dyn.reshape(%410, %411, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %414 = logical_or(%412, %413) /* ty=Tensor[(13, 10, 2), bool] */;
  %415 = cast(meta[relay.Constant][16] /* ty=Tensor[(13, 10, 2), bool] */, dtype="int16") /* ty=Tensor[(13, 10, 2), int16] */;
  %416 = shape_of(%414, dtype="int32") /* ty=Tensor[(3), int32] */;
  %417 = cast(%414, dtype="int16") /* ty=Tensor[(13, 10, 2), int16] */;
  %418 = dyn.reshape(%415, %416, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %419 = cast(%391, dtype="bool") /* ty=Tensor[(1, 7, 8), bool] */;
  %420 = shape_of(%392, dtype="int32") /* ty=Tensor[(3), int32] */;
  %421 = cast(%392, dtype="bool") /* ty=Tensor[(1, 7, 8), bool] */;
  %422 = dyn.reshape(%419, %420, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %423 = cast(%414, dtype="float32") /* ty=Tensor[(13, 10, 2), float32] */;
  %424 = cast(%409, dtype="float32") /* ty=Tensor[(13, 10, 2), float32] */;
  %425 = cast(%var_767, dtype="float32") /* ty=Tensor[(260), float32] */;
  %426 = reshape(%423, newshape=[13, 10, 2]) /* ty=Tensor[(13, 10, 2), float32] */;
  %427 = reshape(%424, newshape=[13, 10, 2]) /* ty=Tensor[(13, 10, 2), float32] */;
  %428 = reshape(%425, newshape=[13, 10, 2]) /* ty=Tensor[(13, 10, 2), float32] */;
  %429 = @func_410(%426, %427, %428) /* ty=(Tensor[(13, 10, 2), float32], Tensor[(13, 10, 2), uint32]) */;
  %430 = cast(%414, dtype="float32") /* ty=Tensor[(13, 10, 2), float32] */;
  %431 = cast(%var_868, dtype="float32") /* ty=Tensor[(13, 10, 2), float32] */;
  %432 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(13, 10, 2), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %433 = cast(meta[relay.Constant][16] /* ty=Tensor[(13, 10, 2), bool] */, dtype="float32") /* ty=Tensor[(13, 10, 2), float32] */;
  %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %435 = less_equal(%395, %396) /* ty=Tensor[(?, 7, 8), bool] */;
  %436 = %401.0;
  %437 = @func_495() /* ty=Tensor[(1, 7, 8), float64] */;
  %438 = right_shift(%417, %418) /* ty=Tensor[(13, 10, 2), int16] */;
  %439 = less(%421, %422) /* ty=Tensor[(?, 7, 8), bool] */;
  %440 = %429.1;
  %441 = asinh(%430) /* ty=Tensor[(13, 10, 2), float32] */;
  %442 = multiply(%433, %434) /* ty=Tensor[(13, 10, 2), float32] */;
  (%435, %436, %var_816, %437, %438, %439, %440, %441, %442)
}

def @func_5149(%var_5147: Tensor[(14, 8, 6), uint8], %var_5148: Tensor[(14, 8, 6), uint8]) -> (Tensor[(14, 8, 6), uint8],) {
  %448 = fn (%var_5138: Tensor[(14, 8, 6), uint8], %var_5139: Tensor[(14, 8, 6), uint8]) -> (Tensor[(14, 8, 6), uint8],) {
    %443 = cast(%var_5139, dtype="uint8") /* ty=Tensor[(14, 8, 6), uint8] */;
    %444 = shape_of(%var_5138, dtype="int32") /* ty=Tensor[(3), int32] */;
    %445 = cast(%var_5138, dtype="uint8") /* ty=Tensor[(14, 8, 6), uint8] */;
    %446 = dyn.reshape(%443, %444, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %447 = bitwise_xor(%445, %446) /* ty=Tensor[(14, 8, 6), uint8] */;
    (%447,)
  };
  %448(%var_5147, %var_5148) /* ty=(Tensor[(14, 8, 6), uint8],) */
}

def @func_1735() -> (Tensor[(13, 10, 2), float32], Tensor[(13, 10, 2), float64], Tensor[(1, 7, 8), float64]) {
  @func_1733() /* ty=(Tensor[(13, 10, 2), float32], Tensor[(13, 10, 2), float64], Tensor[(1, 7, 8), float64]) */
}

def @func_2585() -> Tensor[(72), float32] {
  %450 = fn () -> Tensor[(72), float32] {
    %449 = @func_2291() /* ty=(Tensor[(1, 7, 8), float32], Tensor[(72), float32]) */;
    %449.1
  };
  %450() /* ty=Tensor[(72), float32] */
}

def @func_2053(%var_2045: Tensor[(1, 45), float64]) -> (Tensor[(1, 7, 8), float64], Tensor[(9, 1, 5), float64], Tensor[(1, 45), float64]) {
  %451 = @func_1071() /* ty=(Tensor[(1, 7, 8), float64],) */;
  %452 = cast(%var_2045, dtype="float64") /* ty=Tensor[(1, 45), float64] */;
  %453 = reshape(%452, newshape=[9, 1, 5]) /* ty=Tensor[(9, 1, 5), float64] */;
  %454 = @func_1805(%453) /* ty=(Tensor[(9, 1, 5), float64],) */;
  %455 = %451.0;
  %456 = %454.0;
  (%455, %456, %var_2045)
}

def @func_2870() -> (Tensor[(1, 7, 8), float64],) {
  %459 = fn () -> (Tensor[(1, 7, 8), float64],) {
    %457 = @func_1260() /* ty=(Tensor[(1, 7, 8), float64], Tensor[(72), float32], Tensor[(?, 7, 8), bool]) */;
    %458 = %457.0;
    (%458,)
  };
  %459() /* ty=(Tensor[(1, 7, 8), float64],) */
}

def @func_1764(%var_1746: Tensor[(16, 7, 8), float64]) -> (Tensor[(16, 7, 8), int64], Tensor[(13, 10, 2), float64]) {
  %460 = @func_1513() /* ty=(Tensor[(1, 7, 8), float64], Tensor[(16, 7, 8), float64], Tensor[(896), float64], Tensor[(72), float32]) */;
  %461 = %460.1;
  %462 = cast(%var_1746, dtype="int64") /* ty=Tensor[(16, 7, 8), int64] */;
  %463 = shape_of(%461, dtype="int32") /* ty=Tensor[(3), int32] */;
  %464 = cast(%461, dtype="int64") /* ty=Tensor[(16, 7, 8), int64] */;
  %465 = dyn.reshape(%462, %463, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %466 = @func_1733() /* ty=(Tensor[(13, 10, 2), float32], Tensor[(13, 10, 2), float64], Tensor[(1, 7, 8), float64]) */;
  %467 = bitwise_and(%464, %465) /* ty=Tensor[(16, 7, 8), int64] */;
  %468 = %466.1;
  (%467, %468)
}

def @func_2972() -> (Tensor[(5, 15, 2), float32], Tensor[(9, 3, 12), uint8], Tensor[(324, 1), uint8], Tensor[(16, 7, 8), int64], Tensor[(896), float64]) {
  %478 = fn () -> (Tensor[(5, 15, 2), float32], Tensor[(9, 3, 12), uint8], Tensor[(324, 1), uint8], Tensor[(16, 7, 8), int64], Tensor[(896), float64]) {
    %469 = @func_2799() /* ty=(Tensor[(5, 15, 2), float32], Tensor[(?, 7, 8), int64]) */;
    %470 = cast(meta[relay.Constant][17] /* ty=Tensor[(324, 1), uint8] */, dtype="uint8") /* ty=Tensor[(324, 1), uint8] */;
    %471 = reshape(%470, newshape=[9, 3, 12]) /* ty=Tensor[(9, 3, 12), uint8] */;
    %472 = cast(meta[relay.Constant][18] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
    %473 = reshape(%472, newshape=[16, 7, 8]) /* ty=Tensor[(16, 7, 8), float64] */;
    %474 = @func_1764(%473) /* ty=(Tensor[(16, 7, 8), int64], Tensor[(13, 10, 2), float64]) */;
    %475 = %469.0;
    %476 = @func_2411(%471) /* ty=Tensor[(9, 3, 12), uint8] */;
    %477 = %474.0;
    (%475, %476, meta[relay.Constant][17] /* ty=Tensor[(324, 1), uint8] */, %477, meta[relay.Constant][18] /* ty=Tensor[(896), float64] */)
  };
  %478() /* ty=(Tensor[(5, 15, 2), float32], Tensor[(9, 3, 12), uint8], Tensor[(324, 1), uint8], Tensor[(16, 7, 8), int64], Tensor[(896), float64]) */
}

def @func_5021(%var_5020: Tensor[(1, 45), float64]) -> (Tensor[(72), float32], Tensor[(9, 1, 5), float64], Tensor[(1, 45), float64]) {
  %484 = fn (%var_5003: Tensor[(1, 45), float64]) -> (Tensor[(72), float32], Tensor[(9, 1, 5), float64], Tensor[(1, 45), float64]) {
    %479 = cast(%var_5003, dtype="float64") /* ty=Tensor[(1, 45), float64] */;
    %480 = reshape(%479, newshape=[1, 45]) /* ty=Tensor[(1, 45), float64] */;
    %481 = @func_2053(%480) /* ty=(Tensor[(1, 7, 8), float64], Tensor[(9, 1, 5), float64], Tensor[(1, 45), float64]) */;
    %482 = @func_2643() /* ty=Tensor[(72), float32] */;
    %483 = %481.1;
    (%482, %483, %var_5003)
  };
  %484(%var_5020) /* ty=(Tensor[(72), float32], Tensor[(9, 1, 5), float64], Tensor[(1, 45), float64]) */
}

def @func_4660() -> (Tensor[(72), float32],) {
  %487 = fn () -> (Tensor[(72), float32],) {
    %485 = @func_2291() /* ty=(Tensor[(1, 7, 8), float32], Tensor[(72), float32]) */;
    %486 = %485.1;
    (%486,)
  };
  %487() /* ty=(Tensor[(72), float32],) */
}

def @func_4583() -> (Tensor[(9, 12, 9), float32],) {
  @func_4581() /* ty=(Tensor[(9, 12, 9), float32],) */
}

def @func_722(%var_721: Tensor[(9, 4, 2), float32]) -> (Tensor[(9, 4, 2), float32], Tensor[(1, 7, 8), float64]) {
  %491 = fn (%var_703: Tensor[(9, 4, 2), float32]) -> (Tensor[(9, 4, 2), float32], Tensor[(1, 7, 8), float64]) {
    %488 = cast(%var_703, dtype="float32") /* ty=Tensor[(9, 4, 2), float32] */;
    %489 = rsqrt(%488) /* ty=Tensor[(9, 4, 2), float32] */;
    %490 = @func_574() /* ty=Tensor[(1, 7, 8), float64] */;
    (%489, %490)
  };
  %491(%var_721) /* ty=(Tensor[(9, 4, 2), float32], Tensor[(1, 7, 8), float64]) */
}

def @func_527() -> Tensor[(1, 7, 8), float64] {
  %492 = fn () -> Tensor[(1, 7, 8), float64] {
    @func_495() /* ty=Tensor[(1, 7, 8), float64] */
  };
  %492() /* ty=Tensor[(1, 7, 8), float64] */
}

def @func_600() -> (Tensor[(1, 7, 8), float64],) {
  %493 = @func_526() /* ty=Tensor[(1, 7, 8), float64] */;
  (%493,)
}

def @func_6653(%var_6625: Tensor[(11, 9, 16), float64], %var_6646: Tensor[(896), float64]) -> (Tensor[(11, 9, 16), uint32], Tensor[(16, 7, 8), bool], Tensor[(896), float64], Tensor[(56), float64]) {
  %494 = cast(%var_6625, dtype="float64") /* ty=Tensor[(11, 9, 16), float64] */;
  %495 = atanh(%494) /* ty=Tensor[(11, 9, 16), float64] */;
  %496 = cast(%var_6625, dtype="float32") /* ty=Tensor[(11, 9, 16), float32] */;
  %497 = exp(%496) /* ty=Tensor[(11, 9, 16), float32] */;
  %498 = cast(%497, dtype="uint32") /* ty=Tensor[(11, 9, 16), uint32] */;
  %499 = shape_of(%495, dtype="int32") /* ty=Tensor[(3), int32] */;
  %500 = cast(%495, dtype="uint32") /* ty=Tensor[(11, 9, 16), uint32] */;
  %501 = dyn.reshape(%498, %499, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %502 = cast(%var_6646, dtype="float64") /* ty=Tensor[(896), float64] */;
  %503 = cast(meta[relay.Constant][19] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
  %504 = reshape(%502, newshape=[16, 7, 8]) /* ty=Tensor[(16, 7, 8), float64] */;
  %505 = reshape(%503, newshape=[56]) /* ty=Tensor[(56), float64] */;
  %506 = @func_2490(%504, %505) /* ty=(Tensor[(16, 7, 8), float32], Tensor[(16, 7, 8), bool], Tensor[(260), float32], Tensor[(56), float64]) */;
  %507 = bitwise_and(%500, %501) /* ty=Tensor[(11, 9, 16), uint32] */;
  %508 = %506.1;
  (%507, %508, %var_6646, meta[relay.Constant][19] /* ty=Tensor[(56), float64] */)
}

def @func_7383() -> Tensor[(?, 7, 8), int64] {
  @func_7381() /* ty=Tensor[(?, 7, 8), int64] */
}

def @func_6163() -> (Tensor[(1, 7, 8), float64],) {
  %509 = @func_4134() /* ty=Tensor[(1, 7, 8), float64] */;
  (%509,)
}

def @main(%var_7819: Tensor[(2, 16, 16), float64]) -> Tensor[(2, 16, 16), bool] {
  %510 = cast(%var_7819, dtype="float64") /* ty=Tensor[(2, 16, 16), float64] */;
  %511 = asinh(%510) /* ty=Tensor[(2, 16, 16), float64] */;
  %512 = cast(%var_7819, dtype="bool") /* ty=Tensor[(2, 16, 16), bool] */;
  %513 = shape_of(%511, dtype="int32") /* ty=Tensor[(3), int32] */;
  %514 = cast(%511, dtype="bool") /* ty=Tensor[(2, 16, 16), bool] */;
  %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%514, %515) /* ty=Tensor[(2, 16, 16), bool] */
}

def @func_3406(%var_3391: Tensor[(16, 7, 8), float64], %var_3400: Tensor[(56), float64]) -> (Tensor[(16, 7, 8), float32], Tensor[(?, 7, 8), float32], Tensor[(56), float64]) {
  %516 = @func_1894() /* ty=(Tensor[(16, 7, 8), float64],) */;
  %517 = %516.0;
  %518 = cast(%var_3391, dtype="float32") /* ty=Tensor[(16, 7, 8), float32] */;
  %519 = shape_of(%517, dtype="int32") /* ty=Tensor[(3), int32] */;
  %520 = cast(%517, dtype="float32") /* ty=Tensor[(16, 7, 8), float32] */;
  %521 = dyn.reshape(%518, %519, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %522 = cast(%var_3400, dtype="float64") /* ty=Tensor[(56), float64] */;
  %523 = reshape(%522, newshape=[1, 7, 8]) /* ty=Tensor[(1, 7, 8), float64] */;
  %524 = @func_1421(%523) /* ty=(Tensor[(?, 7, 8), float32], Tensor[(1, 7, 8), float64], Tensor[(?, 9, 10), float64], Tensor[(90), float64], Tensor[(5, 7, 8), uint8], Tensor[(9, 7, 8), int32], Tensor[(504), float64], Tensor[(13, 10, 2), float32], Tensor[(260), float32]) */;
  %525 = multiply(%520, %521) /* ty=Tensor[(16, 7, 8), float32] */;
  %526 = %524.0;
  (%525, %526, %var_3400)
}

def @func_3133() -> Tensor[(1, 7, 8), float64] {
  %527 = fn () -> Tensor[(1, 7, 8), float64] {
    @func_526() /* ty=Tensor[(1, 7, 8), float64] */
  };
  %527() /* ty=Tensor[(1, 7, 8), float64] */
}

def @func_1767(%var_1765: Tensor[(16, 7, 8), float64]) -> (Tensor[(16, 7, 8), int64], Tensor[(13, 10, 2), float64]) {
  @func_1764(%var_1765) /* ty=(Tensor[(16, 7, 8), int64], Tensor[(13, 10, 2), float64]) */
}

def @func_970(%var_968: Tensor[(16, 7, 8), float64], %var_969: Tensor[(36, 2), float32]) -> (Tensor[(16, 7, 8), float64], Tensor[(36, 2), bool], Tensor[(1, 7, 8), float64]) {
  @func_966(%var_968, %var_969) /* ty=(Tensor[(16, 7, 8), float64], Tensor[(36, 2), bool], Tensor[(1, 7, 8), float64]) */
}

def @func_2293() -> (Tensor[(1, 7, 8), float32], Tensor[(72), float32]) {
  @func_2291() /* ty=(Tensor[(1, 7, 8), float32], Tensor[(72), float32]) */
}

def @func_7007(%var_6964: Tensor[(16, 7, 8), float64]) -> (Tensor[(260), float64], Tensor[(260), float32], Tensor[(16, 7, 8), bool], Tensor[(?, 7, 8), int64], Tensor[(11, ?, 5), float64], Tensor[(55), float32], Tensor[(16, 7, 8), float32], Tensor[(16, 7, 8), float32]) {
  %528 = cast(meta[relay.Constant][20] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
  %529 = reshape(%528, newshape=[260]) /* ty=Tensor[(260), float32] */;
  %530 = @func_1130(%529) /* ty=(Tensor[(1, 7, 8), float64], Tensor[(13, 10, 2), uint32], Tensor[(260), float64]) */;
  %531 = @func_5314() /* ty=Tensor[(16, 7, 8), float64] */;
  %532 = cast(%531, dtype="bool") /* ty=Tensor[(16, 7, 8), bool] */;
  %533 = shape_of(%var_6964, dtype="int32") /* ty=Tensor[(3), int32] */;
  %534 = cast(%var_6964, dtype="bool") /* ty=Tensor[(16, 7, 8), bool] */;
  %535 = dyn.reshape(%532, %533, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %536 = @func_6357() /* ty=(Tensor[(?, 7, 8), int64],) */;
  %537 = cast(meta[relay.Constant][21] /* ty=Tensor[(55), float32] */, dtype="float32") /* ty=Tensor[(55), float32] */;
  %538 = reshape(%537, newshape=[11, 1, 5]) /* ty=Tensor[(11, 1, 5), float32] */;
  %539 = cast(%var_6964, dtype="float64") /* ty=Tensor[(16, 7, 8), float64] */;
  %540 = reshape(%539, newshape=[16, 7, 8]) /* ty=Tensor[(16, 7, 8), float64] */;
  %541 = @func_6714(%540) /* ty=(Tensor[(16, 7, 8), int8], Tensor[(16, 7, 8), float32]) */;
  %542 = cast(%var_6964, dtype="uint32") /* ty=Tensor[(16, 7, 8), uint32] */;
  %543 = shape_of(%531, dtype="int32") /* ty=Tensor[(3), int32] */;
  %544 = cast(%531, dtype="uint32") /* ty=Tensor[(16, 7, 8), uint32] */;
  %545 = dyn.reshape(%542, %543, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %546 = maximum(%544, %545) /* ty=Tensor[(16, 7, 8), uint32] */;
  %547 = cast(%546, dtype="float32") /* ty=Tensor[(16, 7, 8), float32] */;
  %548 = asin(%547) /* ty=Tensor[(16, 7, 8), float32] */;
  %549 = cast(%548, dtype="float32") /* ty=Tensor[(16, 7, 8), float32] */;
  %550 = %530.2;
  %551 = less_equal(%534, %535) /* ty=Tensor[(16, 7, 8), bool] */;
  %552 = %536.0;
  %553 = @func_5234(%538) /* ty=Tensor[(11, ?, 5), float64] */;
  %554 = %541.1;
  %555 = asinh(%549) /* ty=Tensor[(16, 7, 8), float32] */;
  (%550, meta[relay.Constant][20] /* ty=Tensor[(260), float32] */, %551, %552, %553, meta[relay.Constant][21] /* ty=Tensor[(55), float32] */, %554, %555)
}

def @func_7010(%var_7008: Tensor[(16, 7, 8), float64]) -> (Tensor[(260), float64], Tensor[(260), float32], Tensor[(16, 7, 8), bool], Tensor[(?, 7, 8), int64], Tensor[(11, ?, 5), float64], Tensor[(55), float32], Tensor[(16, 7, 8), float32], Tensor[(16, 7, 8), float32]) {
  @func_7007(%var_7008) /* ty=(Tensor[(260), float64], Tensor[(260), float32], Tensor[(16, 7, 8), bool], Tensor[(?, 7, 8), int64], Tensor[(11, ?, 5), float64], Tensor[(55), float32], Tensor[(16, 7, 8), float32], Tensor[(16, 7, 8), float32]) */
}

def @func_7404() -> (Tensor[(1, 7, 8), float64],) {
  @func_7402() /* ty=(Tensor[(1, 7, 8), float64],) */
}

def @func_7454() -> Tensor[(72), float32] {
  @func_7452() /* ty=Tensor[(72), float32] */
}

def @func_4171() -> Tensor[(72), float32] {
  @func_4169() /* ty=Tensor[(72), float32] */
}

def @func_6845(%var_6844: Tensor[(896), float64]) -> (Tensor[(72), float32], Tensor[(1, 7, 8), float64], Tensor[(896), float64], Tensor[(260), uint32], Tensor[(1, 7, 8), float64]) {
  %564 = fn (%var_6819: Tensor[(896), float64]) -> (Tensor[(72), float32], Tensor[(1, 7, 8), float64], Tensor[(896), float64], Tensor[(260), uint32], Tensor[(1, 7, 8), float64]) {
    %556 = cast(%var_6819, dtype="float64") /* ty=Tensor[(896), float64] */;
    %557 = cast(meta[relay.Constant][22] /* ty=Tensor[(260), uint32] */, dtype="uint32") /* ty=Tensor[(260), uint32] */;
    %558 = reshape(%556, newshape=[896]) /* ty=Tensor[(896), float64] */;
    %559 = reshape(%557, newshape=[13, 10, 2]) /* ty=Tensor[(13, 10, 2), uint32] */;
    %560 = @func_6090(%558, %559) /* ty=(Tensor[(72), float32], Tensor[(896), float64], Tensor[(13, 10, 2), bool], Tensor[(45), float64], Tensor[(4536), bool], Tensor[(1, 7, 8), float64], Tensor[(1, 7, 8), float64]) */;
    %561 = @func_2899() /* ty=Tensor[(72), float32] */;
    %562 = %560.5;
    %563 = @func_4134() /* ty=Tensor[(1, 7, 8), float64] */;
    (%561, %562, %var_6819, meta[relay.Constant][22] /* ty=Tensor[(260), uint32] */, %563)
  };
  %564(%var_6844) /* ty=(Tensor[(72), float32], Tensor[(1, 7, 8), float64], Tensor[(896), float64], Tensor[(260), uint32], Tensor[(1, 7, 8), float64]) */
}

def @func_3720() -> (Tensor[(1, 7, 8), float32], Tensor[(16, 7, 8), int64], Tensor[(896), float64]) {
  @func_3718() /* ty=(Tensor[(1, 7, 8), float32], Tensor[(16, 7, 8), int64], Tensor[(896), float64]) */
}

def @func_1807(%var_1806: Tensor[(9, 1, 5), float64]) -> (Tensor[(9, 1, 5), float64],) {
  %567 = fn (%var_1797: Tensor[(9, 1, 5), float64]) -> (Tensor[(9, 1, 5), float64],) {
    %565 = cast(%var_1797, dtype="float64") /* ty=Tensor[(9, 1, 5), float64] */;
    %566 = sqrt(%565) /* ty=Tensor[(9, 1, 5), float64] */;
    (%566,)
  };
  %567(%var_1806) /* ty=(Tensor[(9, 1, 5), float64],) */
}

def @func_6779(%var_6777: Tensor[(55, 1), float32], %var_6778: Tensor[(11, 9, 5), float64]) -> (Tensor[(5, 15, 2), float64], Tensor[(55, 1), float32], Tensor[(11, 9, 5), bool]) {
  %578 = fn (%var_6753: Tensor[(55, 1), float32], %var_6759: Tensor[(11, 9, 5), float64]) -> (Tensor[(5, 15, 2), float64], Tensor[(55, 1), float32], Tensor[(11, 9, 5), bool]) {
    %568 = @func_2799() /* ty=(Tensor[(5, 15, 2), float32], Tensor[(?, 7, 8), int64]) */;
    %569 = %568.0;
    %570 = cast(%569, dtype="float64") /* ty=Tensor[(5, 15, 2), float64] */;
    %571 = cast(%var_6753, dtype="float32") /* ty=Tensor[(55, 1), float32] */;
    %572 = reshape(%571, newshape=[11, 1, 5]) /* ty=Tensor[(11, 1, 5), float32] */;
    %573 = @func_5234(%572) /* ty=Tensor[(11, ?, 5), float64] */;
    %574 = cast(%573, dtype="bool") /* ty=Tensor[(11, ?, 5), bool] */;
    %575 = cast(%var_6759, dtype="bool") /* ty=Tensor[(11, 9, 5), bool] */;
    %576 = sqrt(%570) /* ty=Tensor[(5, 15, 2), float64] */;
    %577 = greater_equal(%574, %575) /* ty=Tensor[(11, 9, 5), bool] */;
    (%576, %var_6753, %577)
  };
  %578(%var_6777, %var_6778) /* ty=(Tensor[(5, 15, 2), float64], Tensor[(55, 1), float32], Tensor[(11, 9, 5), bool]) */
}

def @func_5939() -> (Tensor[(1, 7, 8), float32], Tensor[(7, 13, 10), float32], int32, Tensor[(910), int32], Tensor[(9, 1, 5), float64], Tensor[(45), float64]) {
  %579 = @func_2675() /* ty=(Tensor[(1, 7, 8), float32],) */;
  %580 = cast(-9 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %581 = cast(meta[relay.Constant][23] /* ty=Tensor[(910), int32] */, dtype="int32") /* ty=Tensor[(910), int32] */;
  %582 = reshape(%580, newshape=[]) /* ty=int32 */;
  %583 = reshape(%581, newshape=[7, 13, 10]) /* ty=Tensor[(7, 13, 10), int32] */;
  %584 = cast(meta[relay.Constant][24] /* ty=Tensor[(45), float64] */, dtype="float64") /* ty=Tensor[(45), float64] */;
  %585 = reshape(%584, newshape=[1, 45]) /* ty=Tensor[(1, 45), float64] */;
  %586 = @func_2053(%585) /* ty=(Tensor[(1, 7, 8), float64], Tensor[(9, 1, 5), float64], Tensor[(1, 45), float64]) */;
  %587 = %579.0;
  %588 = @func_3006(%582, %583) /* ty=Tensor[(7, 13, 10), float32] */;
  %589 = %586.1;
  (%587, %588, -9 /* ty=int32 */, meta[relay.Constant][23] /* ty=Tensor[(910), int32] */, %589, meta[relay.Constant][24] /* ty=Tensor[(45), float64] */)
}

def @func_966(%var_939: Tensor[(16, 7, 8), float64], %var_947: Tensor[(36, 2), float32]) -> (Tensor[(16, 7, 8), float64], Tensor[(36, 2), bool], Tensor[(1, 7, 8), float64]) {
  %590 = @func_600() /* ty=(Tensor[(1, 7, 8), float64],) */;
  %591 = %590.0;
  %592 = cast(%591, dtype="float64") /* ty=Tensor[(1, 7, 8), float64] */;
  %593 = cast(%var_939, dtype="float64") /* ty=Tensor[(16, 7, 8), float64] */;
  %594 = cast(%var_947, dtype="float32") /* ty=Tensor[(36, 2), float32] */;
  %595 = reshape(%594, newshape=[9, 4, 2]) /* ty=Tensor[(9, 4, 2), float32] */;
  %596 = @func_720(%595) /* ty=(Tensor[(9, 4, 2), float32], Tensor[(1, 7, 8), float64]) */;
  %597 = %596.0;
  %598 = cast(%597, dtype="bool") /* ty=Tensor[(9, 4, 2), bool] */;
  %599 = shape_of(%var_947, dtype="int32") /* ty=Tensor[(2), int32] */;
  %600 = cast(%var_947, dtype="bool") /* ty=Tensor[(36, 2), bool] */;
  %601 = dyn.reshape(%598, %599, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %602 = floor_mod(%592, %593) /* ty=Tensor[(16, 7, 8), float64] */;
  %603 = greater(%600, %601) /* ty=Tensor[(36, 2), bool] */;
  %604 = @func_495() /* ty=Tensor[(1, 7, 8), float64] */;
  (%602, %603, %604)
}

def @func_6915() -> (Tensor[(16, 7, 8), float64],) {
  @func_6913() /* ty=(Tensor[(16, 7, 8), float64],) */
}

def @func_2860() -> (Tensor[(1, 7, 8), float64],) {
  %605 = @func_1594() /* ty=Tensor[(1, 7, 8), float64] */;
  (%605,)
}

def @func_2799() -> (Tensor[(5, 15, 2), float32], Tensor[(?, 7, 8), int64]) {
  %606 = @func_676() /* ty=(Tensor[(5, 15, 2), float64], Tensor[(5, 15, 2), bool]) */;
  %607 = %606.1;
  %608 = cast(%607, dtype="float32") /* ty=Tensor[(5, 15, 2), float32] */;
  %609 = @func_1578() /* ty=(Tensor[(13, 10, 2), float32], Tensor[(?, 7, 8), int64]) */;
  %610 = cosh(%608) /* ty=Tensor[(5, 15, 2), float32] */;
  %611 = %609.1;
  (%610, %611)
}

def @func_7045() -> (Tensor[(1, 7, 8), float64], Tensor[(1, 7, 8), float64], Tensor[(72), float32]) {
  @func_7043() /* ty=(Tensor[(1, 7, 8), float64], Tensor[(1, 7, 8), float64], Tensor[(72), float32]) */
}

def @func_3035() -> (Tensor[(72), float32],) {
  %614 = fn () -> (Tensor[(72), float32],) {
    %612 = @func_2810() /* ty=(Tensor[(72), float32],) */;
    %613 = %612.0;
    (%613,)
  };
  %614() /* ty=(Tensor[(72), float32],) */
}

def @func_3718() -> (Tensor[(1, 7, 8), float32], Tensor[(16, 7, 8), int64], Tensor[(896), float64]) {
  %615 = @func_1916() /* ty=(Tensor[(1, 7, 8), float32],) */;
  %616 = cast(meta[relay.Constant][25] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
  %617 = reshape(%616, newshape=[16, 7, 8]) /* ty=Tensor[(16, 7, 8), float64] */;
  %618 = @func_1764(%617) /* ty=(Tensor[(16, 7, 8), int64], Tensor[(13, 10, 2), float64]) */;
  %619 = %615.0;
  %620 = %618.0;
  (%619, %620, meta[relay.Constant][25] /* ty=Tensor[(896), float64] */)
}

def @func_5810() -> Tensor[(72), float32] {
  %622 = fn () -> Tensor[(72), float32] {
    %621 = @func_5759() /* ty=(Tensor[(72), float32],) */;
    %621.0
  };
  %622() /* ty=Tensor[(72), float32] */
}

def @func_7668(%var_7667: Tensor[(1, 7, 8), float64]) -> (Tensor[(?, 7, 8), bool],) {
  %630 = fn (%var_7661: Tensor[(1, 7, 8), float64]) -> (Tensor[(?, 7, 8), bool],) {
    %623 = @func_4349() /* ty=(Tensor[(1, 7, 8), float64],) */;
    %624 = %623.0;
    %625 = cast(%var_7661, dtype="bool") /* ty=Tensor[(1, 7, 8), bool] */;
    %626 = shape_of(%624, dtype="int32") /* ty=Tensor[(3), int32] */;
    %627 = cast(%624, dtype="bool") /* ty=Tensor[(1, 7, 8), bool] */;
    %628 = dyn.reshape(%625, %626, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %629 = logical_and(%627, %628) /* ty=Tensor[(?, 7, 8), bool] */;
    (%629,)
  };
  %630(%var_7667) /* ty=(Tensor[(?, 7, 8), bool],) */
}

def @func_4325(%var_4315: Tensor[(5, 15, 2), float64]) -> (Tensor[(72), float32], Tensor[(5, 15, 2), bool]) {
  %631 = @func_3984() /* ty=(Tensor[(1, 7, 8), float64], Tensor[(72), float32]) */;
  %632 = @func_676() /* ty=(Tensor[(5, 15, 2), float64], Tensor[(5, 15, 2), bool]) */;
  %633 = %632.0;
  %634 = cast(%var_4315, dtype="bool") /* ty=Tensor[(5, 15, 2), bool] */;
  %635 = shape_of(%633, dtype="int32") /* ty=Tensor[(3), int32] */;
  %636 = cast(%633, dtype="bool") /* ty=Tensor[(5, 15, 2), bool] */;
  %637 = dyn.reshape(%634, %635, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %638 = %631.1;
  %639 = less_equal(%636, %637) /* ty=Tensor[(5, 15, 2), bool] */;
  (%638, %639)
}

def @func_6682() -> Tensor[(1, 7, 8), float32] {
  %641 = fn () -> Tensor[(1, 7, 8), float32] {
    %640 = @func_2291() /* ty=(Tensor[(1, 7, 8), float32], Tensor[(72), float32]) */;
    %640.0
  };
  %641() /* ty=Tensor[(1, 7, 8), float32] */
}

def @func_4778() -> (Tensor[(1, 7, 8), float64],) {
  %642 = @func_3536() /* ty=(Tensor[(1, 7, 8), float64],) */;
  %643 = %642.0;
  (%643,)
}

def @func_5237(%var_5235: Tensor[(11, 1, 5), float32]) -> Tensor[(11, ?, 5), float64] {
  @func_5234(%var_5235) /* ty=Tensor[(11, ?, 5), float64] */
}

def @func_5724() -> (Tensor[(13, 10, 2), float32],) {
  @func_5722() /* ty=(Tensor[(13, 10, 2), float32],) */
}

def @func_4521() -> (Tensor[(72), float32], Tensor[(1, 7, 8), float64]) {
  %644 = @func_2899() /* ty=Tensor[(72), float32] */;
  %645 = @func_526() /* ty=Tensor[(1, 7, 8), float64] */;
  (%644, %645)
}

def @func_4350() -> (Tensor[(1, 7, 8), float64],) {
  %647 = fn () -> (Tensor[(1, 7, 8), float64],) {
    %646 = @func_3132() /* ty=Tensor[(1, 7, 8), float64] */;
    (%646,)
  };
  %647() /* ty=(Tensor[(1, 7, 8), float64],) */
}

def @func_4328(%var_4326: Tensor[(5, 15, 2), float64]) -> (Tensor[(72), float32], Tensor[(5, 15, 2), bool]) {
  @func_4325(%var_4326) /* ty=(Tensor[(72), float32], Tensor[(5, 15, 2), bool]) */
}

def @func_6716(%var_6715: Tensor[(16, 7, 8), float64]) -> (Tensor[(16, 7, 8), int8], Tensor[(16, 7, 8), float32]) {
  %656 = fn (%var_6704: Tensor[(16, 7, 8), float64]) -> (Tensor[(16, 7, 8), int8], Tensor[(16, 7, 8), float32]) {
    %648 = @func_5314() /* ty=Tensor[(16, 7, 8), float64] */;
    %649 = cast(%var_6704, dtype="int8") /* ty=Tensor[(16, 7, 8), int8] */;
    %650 = shape_of(%648, dtype="int32") /* ty=Tensor[(3), int32] */;
    %651 = cast(%648, dtype="int8") /* ty=Tensor[(16, 7, 8), int8] */;
    %652 = dyn.reshape(%649, %650, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %653 = cast(%var_6704, dtype="float32") /* ty=Tensor[(16, 7, 8), float32] */;
    %654 = bitwise_xor(%651, %652) /* ty=Tensor[(16, 7, 8), int8] */;
    %655 = atan(%653) /* ty=Tensor[(16, 7, 8), float32] */;
    (%654, %655)
  };
  %656(%var_6715) /* ty=(Tensor[(16, 7, 8), int8], Tensor[(16, 7, 8), float32]) */
}

def @func_7381() -> Tensor[(?, 7, 8), int64] {
  @func_4254() /* ty=Tensor[(?, 7, 8), int64] */
}

def @func_1515() -> (Tensor[(1, 7, 8), float64], Tensor[(16, 7, 8), float64], Tensor[(896), float64], Tensor[(72), float32]) {
  @func_1513() /* ty=(Tensor[(1, 7, 8), float64], Tensor[(16, 7, 8), float64], Tensor[(896), float64], Tensor[(72), float32]) */
}

def @func_2862() -> (Tensor[(1, 7, 8), float64],) {
  @func_2860() /* ty=(Tensor[(1, 7, 8), float64],) */
}

def @func_4069(%var_4067: Tensor[(324, 14), uint8], %var_4068: Tensor[(324, 14), uint8]) -> (Tensor[(324, 14), bool], Tensor[(324, 14), bool], Tensor[(1, 7, 8), float64]) {
  %668 = fn (%var_4034: Tensor[(324, 14), uint8], %var_4040: Tensor[(324, 14), uint8]) -> (Tensor[(324, 14), bool], Tensor[(324, 14), bool], Tensor[(1, 7, 8), float64]) {
    %657 = @func_2971() /* ty=(Tensor[(5, 15, 2), float32], Tensor[(9, 3, 12), uint8], Tensor[(324, 1), uint8], Tensor[(16, 7, 8), int64], Tensor[(896), float64]) */;
    %658 = %657.2;
    %659 = cast(%658, dtype="bool") /* ty=Tensor[(324, 1), bool] */;
    %660 = cast(%var_4034, dtype="bool") /* ty=Tensor[(324, 14), bool] */;
    %661 = cast(%var_4040, dtype="bool") /* ty=Tensor[(324, 14), bool] */;
    %662 = shape_of(%var_4034, dtype="int32") /* ty=Tensor[(2), int32] */;
    %663 = cast(%var_4034, dtype="bool") /* ty=Tensor[(324, 14), bool] */;
    %664 = dyn.reshape(%661, %662, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %665 = logical_and(%659, %660) /* ty=Tensor[(324, 14), bool] */;
    %666 = less(%663, %664) /* ty=Tensor[(324, 14), bool] */;
    %667 = @func_1594() /* ty=Tensor[(1, 7, 8), float64] */;
    (%665, %666, %667)
  };
  %668(%var_4067, %var_4068) /* ty=(Tensor[(324, 14), bool], Tensor[(324, 14), bool], Tensor[(1, 7, 8), float64]) */
}

def @func_5519() -> (Tensor[(16, 7, 8), float64],) {
  %672 = fn () -> (Tensor[(16, 7, 8), float64],) {
    %669 = @func_5314() /* ty=Tensor[(16, 7, 8), float64] */;
    %670 = cast(%669, dtype="float64") /* ty=Tensor[(16, 7, 8), float64] */;
    %671 = erf(%670) /* ty=Tensor[(16, 7, 8), float64] */;
    (%671,)
  };
  %672() /* ty=(Tensor[(16, 7, 8), float64],) */
}

def @func_5106(%var_5104: Tensor[(504), float64], %var_5105: Tensor[(18, 18), uint8]) -> (Tensor[(1, 7, 8), float64], Tensor[(9, 7, 8), int32], Tensor[(504), float64], Tensor[(1, 7, 8), float32], Tensor[(9, 3, 12), uint8], Tensor[(18, 18), uint8]) {
  %683 = fn (%var_5079: Tensor[(504), float64], %var_5097: Tensor[(18, 18), uint8]) -> (Tensor[(1, 7, 8), float64], Tensor[(9, 7, 8), int32], Tensor[(504), float64], Tensor[(1, 7, 8), float32], Tensor[(9, 3, 12), uint8], Tensor[(18, 18), uint8]) {
    %673 = cast(%var_5079, dtype="float64") /* ty=Tensor[(504), float64] */;
    %674 = reshape(%673, newshape=[9, 7, 8]) /* ty=Tensor[(9, 7, 8), float64] */;
    %675 = @func_1340(%674) /* ty=(Tensor[(9, 7, 8), int32],) */;
    %676 = @func_2675() /* ty=(Tensor[(1, 7, 8), float32],) */;
    %677 = cast(%var_5097, dtype="uint8") /* ty=Tensor[(18, 18), uint8] */;
    %678 = reshape(%677, newshape=[9, 3, 12]) /* ty=Tensor[(9, 3, 12), uint8] */;
    %679 = @func_3132() /* ty=Tensor[(1, 7, 8), float64] */;
    %680 = %675.0;
    %681 = %676.0;
    %682 = @func_2411(%678) /* ty=Tensor[(9, 3, 12), uint8] */;
    (%679, %680, %var_5079, %681, %682, %var_5097)
  };
  %683(%var_5104, %var_5105) /* ty=(Tensor[(1, 7, 8), float64], Tensor[(9, 7, 8), int32], Tensor[(504), float64], Tensor[(1, 7, 8), float32], Tensor[(9, 3, 12), uint8], Tensor[(18, 18), uint8]) */
}

def @func_4551(%var_4549: Tensor[(2, 8, 15), int64], %var_4550: Tensor[(2, 8, 15), int64]) -> (Tensor[(2, 8, 15), int64], Tensor[(1, 7, 8), float64]) {
  %691 = fn (%var_4524: Tensor[(2, 8, 15), int64], %var_4525: Tensor[(2, 8, 15), int64]) -> (Tensor[(2, 8, 15), int64], Tensor[(1, 7, 8), float64]) {
    %684 = cast(%var_4525, dtype="int64") /* ty=Tensor[(2, 8, 15), int64] */;
    %685 = shape_of(%var_4524, dtype="int32") /* ty=Tensor[(3), int32] */;
    %686 = cast(%var_4524, dtype="int64") /* ty=Tensor[(2, 8, 15), int64] */;
    %687 = dyn.reshape(%684, %685, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %688 = @func_4280() /* ty=(Tensor[(1, 7, 8), float64],) */;
    %689 = logical_xor(%686, %687) /* ty=Tensor[(2, 8, 15), int64] */;
    %690 = %688.0;
    (%689, %690)
  };
  %691(%var_4549, %var_4550) /* ty=(Tensor[(2, 8, 15), int64], Tensor[(1, 7, 8), float64]) */
}

def @func_1130(%var_1115: Tensor[(260), float32]) -> (Tensor[(1, 7, 8), float64], Tensor[(13, 10, 2), uint32], Tensor[(260), float64]) {
  %692 = @func_1071() /* ty=(Tensor[(1, 7, 8), float64],) */;
  %693 = cast(%var_1115, dtype="float32") /* ty=Tensor[(260), float32] */;
  %694 = cast(%var_1115, dtype="float32") /* ty=Tensor[(260), float32] */;
  %695 = cast(%var_1115, dtype="float32") /* ty=Tensor[(260), float32] */;
  %696 = reshape(%693, newshape=[13, 10, 2]) /* ty=Tensor[(13, 10, 2), float32] */;
  %697 = reshape(%694, newshape=[13, 10, 2]) /* ty=Tensor[(13, 10, 2), float32] */;
  %698 = reshape(%695, newshape=[13, 10, 2]) /* ty=Tensor[(13, 10, 2), float32] */;
  %699 = @func_410(%696, %697, %698) /* ty=(Tensor[(13, 10, 2), float32], Tensor[(13, 10, 2), uint32]) */;
  %700 = cast(%var_1115, dtype="float32") /* ty=Tensor[(260), float32] */;
  %701 = log10(%700) /* ty=Tensor[(260), float32] */;
  %702 = cast(%701, dtype="float64") /* ty=Tensor[(260), float64] */;
  %703 = %692.0;
  %704 = %699.1;
  %705 = sqrt(%702) /* ty=Tensor[(260), float64] */;
  (%703, %704, %705)
}

def @func_414(%var_411: Tensor[(13, 10, 2), float32], %var_412: Tensor[(13, 10, 2), float32], %var_413: Tensor[(13, 10, 2), float32]) -> (Tensor[(13, 10, 2), float32], Tensor[(13, 10, 2), uint32]) {
  %716 = fn (%var_358: Tensor[(13, 10, 2), float32], %var_359: Tensor[(13, 10, 2), float32], %var_367: Tensor[(13, 10, 2), float32]) -> (Tensor[(13, 10, 2), float32], Tensor[(13, 10, 2), uint32]) {
    %706 = cast(%var_359, dtype="float32") /* ty=Tensor[(13, 10, 2), float32] */;
    %707 = shape_of(%var_358, dtype="int32") /* ty=Tensor[(3), int32] */;
    %708 = cast(%var_358, dtype="float32") /* ty=Tensor[(13, 10, 2), float32] */;
    %709 = dyn.reshape(%706, %707, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %710 = cast(%var_367, dtype="uint32") /* ty=Tensor[(13, 10, 2), uint32] */;
    %711 = shape_of(%var_358, dtype="int32") /* ty=Tensor[(3), int32] */;
    %712 = cast(%var_358, dtype="uint32") /* ty=Tensor[(13, 10, 2), uint32] */;
    %713 = dyn.reshape(%710, %711, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %714 = floor_mod(%708, %709) /* ty=Tensor[(13, 10, 2), float32] */;
    %715 = maximum(%712, %713) /* ty=Tensor[(13, 10, 2), uint32] */;
    (%714, %715)
  };
  %716(%var_411, %var_412, %var_413) /* ty=(Tensor[(13, 10, 2), float32], Tensor[(13, 10, 2), uint32]) */
}

def @func_5878() -> (Tensor[(72), float32],) {
  %718 = fn () -> (Tensor[(72), float32],) {
    %717 = @func_5809() /* ty=Tensor[(72), float32] */;
    (%717,)
  };
  %718() /* ty=(Tensor[(72), float32],) */
}

def @func_1343(%var_1341: Tensor[(9, 7, 8), float64]) -> (Tensor[(9, 7, 8), int32],) {
  @func_1340(%var_1341) /* ty=(Tensor[(9, 7, 8), int32],) */
}

def @func_1421(%var_1360: Tensor[(1, 7, 8), float64]) -> (Tensor[(?, 7, 8), float32], Tensor[(1, 7, 8), float64], Tensor[(?, 9, 10), float64], Tensor[(90), float64], Tensor[(5, 7, 8), uint8], Tensor[(9, 7, 8), int32], Tensor[(504), float64], Tensor[(13, 10, 2), float32], Tensor[(260), float32]) {
  %719 = @func_574() /* ty=Tensor[(1, 7, 8), float64] */;
  %720 = cast(%var_1360, dtype="float32") /* ty=Tensor[(1, 7, 8), float32] */;
  %721 = shape_of(%719, dtype="int32") /* ty=Tensor[(3), int32] */;
  %722 = cast(%719, dtype="float32") /* ty=Tensor[(1, 7, 8), float32] */;
  %723 = dyn.reshape(%720, %721, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %724 = @func_1071() /* ty=(Tensor[(1, 7, 8), float64],) */;
  %725 = cast(meta[relay.Constant][26] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %726 = cast(meta[relay.Constant][26] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %727 = reshape(%725, newshape=[1, 9, 10]) /* ty=Tensor[(1, 9, 10), float64] */;
  %728 = reshape(%726, newshape=[1, 9, 10]) /* ty=Tensor[(1, 9, 10), float64] */;
  %729 = @func_746(%727, %728) /* ty=(Tensor[(?, 9, 10), float64],) */;
  %730 = cast(%719, dtype="uint8") /* ty=Tensor[(1, 7, 8), uint8] */;
  %731 = cast(meta[relay.Constant][27] /* ty=Tensor[(5, 7, 8), float64] */, dtype="uint8") /* ty=Tensor[(5, 7, 8), uint8] */;
  %732 = cast(meta[relay.Constant][28] /* ty=Tensor[(504), float64] */, dtype="float64") /* ty=Tensor[(504), float64] */;
  %733 = reshape(%732, newshape=[9, 7, 8]) /* ty=Tensor[(9, 7, 8), float64] */;
  %734 = @func_1340(%733) /* ty=(Tensor[(9, 7, 8), int32],) */;
  %735 = cast(meta[relay.Constant][29] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
  %736 = cast(meta[relay.Constant][29] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
  %737 = cast(meta[relay.Constant][29] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
  %738 = reshape(%735, newshape=[13, 10, 2]) /* ty=Tensor[(13, 10, 2), float32] */;
  %739 = reshape(%736, newshape=[13, 10, 2]) /* ty=Tensor[(13, 10, 2), float32] */;
  %740 = reshape(%737, newshape=[13, 10, 2]) /* ty=Tensor[(13, 10, 2), float32] */;
  %741 = @func_410(%738, %739, %740) /* ty=(Tensor[(13, 10, 2), float32], Tensor[(13, 10, 2), uint32]) */;
  %742 = floor_divide(%722, %723) /* ty=Tensor[(?, 7, 8), float32] */;
  %743 = %724.0;
  %744 = %729.0;
  %745 = logical_xor(%730, %731) /* ty=Tensor[(5, 7, 8), uint8] */;
  %746 = %734.0;
  %747 = %741.0;
  (%742, %743, %744, meta[relay.Constant][26] /* ty=Tensor[(90), float64] */, %745, %746, meta[relay.Constant][28] /* ty=Tensor[(504), float64] */, %747, meta[relay.Constant][29] /* ty=Tensor[(260), float32] */)
}

def @func_4883(%var_4881: Tensor[(5, 11, 1), float32]) -> Tensor[(5, 11, 1), float32] {
  @func_4880(%var_4881) /* ty=Tensor[(5, 11, 1), float32] */
}

def @func_2291() -> (Tensor[(1, 7, 8), float32], Tensor[(72), float32]) {
  %748 = @func_1071() /* ty=(Tensor[(1, 7, 8), float64],) */;
  %749 = %748.0;
  %750 = cast(%749, dtype="float32") /* ty=Tensor[(1, 7, 8), float32] */;
  %751 = @func_1513() /* ty=(Tensor[(1, 7, 8), float64], Tensor[(16, 7, 8), float64], Tensor[(896), float64], Tensor[(72), float32]) */;
  %752 = cos(%750) /* ty=Tensor[(1, 7, 8), float32] */;
  %753 = %751.3;
  (%752, %753)
}

def @func_6093(%var_6091: Tensor[(896), float64], %var_6092: Tensor[(13, 10, 2), uint32]) -> (Tensor[(72), float32], Tensor[(896), float64], Tensor[(13, 10, 2), bool], Tensor[(45), float64], Tensor[(4536), bool], Tensor[(1, 7, 8), float64], Tensor[(1, 7, 8), float64]) {
  %780 = fn (%var_6052: Tensor[(896), float64], %var_6056: Tensor[(13, 10, 2), uint32]) -> (Tensor[(72), float32], Tensor[(896), float64], Tensor[(13, 10, 2), bool], Tensor[(45), float64], Tensor[(4536), bool], Tensor[(1, 7, 8), float64], Tensor[(1, 7, 8), float64]) {
    %754 = cast(%var_6052, dtype="float64") /* ty=Tensor[(896), float64] */;
    %755 = reshape(%754, newshape=[16, 7, 8]) /* ty=Tensor[(16, 7, 8), float64] */;
    %756 = @func_1497(%755) /* ty=(Tensor[(13, 10, 2), uint32], Tensor[(260), float32], Tensor[(16, 7, 8), int16], Tensor[(5, 15, 2), bool], Tensor[(16, 7, 8), int64], Tensor[(13, 10, 2), uint32]) */;
    %757 = %756.5;
    %758 = cast(%var_6056, dtype="bool") /* ty=Tensor[(13, 10, 2), bool] */;
    %759 = shape_of(%757, dtype="int32") /* ty=Tensor[(3), int32] */;
    %760 = cast(%757, dtype="bool") /* ty=Tensor[(13, 10, 2), bool] */;
    %761 = dyn.reshape(%758, %759, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %762 = @func_5939() /* ty=(Tensor[(1, 7, 8), float32], Tensor[(7, 13, 10), float32], int32, Tensor[(910), int32], Tensor[(9, 1, 5), float64], Tensor[(45), float64]) */;
    %763 = cast(meta[relay.Constant][30] /* ty=Tensor[(4536), uint8] */, dtype="uint8") /* ty=Tensor[(4536), uint8] */;
    %764 = cast(meta[relay.Constant][30] /* ty=Tensor[(4536), uint8] */, dtype="uint8") /* ty=Tensor[(4536), uint8] */;
    %765 = reshape(%763, newshape=[324, 14]) /* ty=Tensor[(324, 14), uint8] */;
    %766 = reshape(%764, newshape=[324, 14]) /* ty=Tensor[(324, 14), uint8] */;
    %767 = @func_4066(%765, %766) /* ty=(Tensor[(324, 14), bool], Tensor[(324, 14), bool], Tensor[(1, 7, 8), float64]) */;
    %768 = %767.1;
    %769 = cast(%768, dtype="bool") /* ty=Tensor[(324, 14), bool] */;
    %770 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(4536), uint8] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %771 = cast(meta[relay.Constant][30] /* ty=Tensor[(4536), uint8] */, dtype="bool") /* ty=Tensor[(4536), bool] */;
    %772 = dyn.reshape(%769, %770, newshape=[]) /* ty=Tensor[(?), bool] */;
    %773 = @func_1260() /* ty=(Tensor[(1, 7, 8), float64], Tensor[(72), float32], Tensor[(?, 7, 8), bool]) */;
    %774 = @func_2584() /* ty=Tensor[(72), float32] */;
    %775 = less(%760, %761) /* ty=Tensor[(13, 10, 2), bool] */;
    %776 = %762.5;
    %777 = not_equal(%771, %772) /* ty=Tensor[(4536), bool] */;
    %778 = %773.0;
    %779 = @func_526() /* ty=Tensor[(1, 7, 8), float64] */;
    (%774, %var_6052, %775, %776, %777, %778, %779)
  };
  %780(%var_6091, %var_6092) /* ty=(Tensor[(72), float32], Tensor[(896), float64], Tensor[(13, 10, 2), bool], Tensor[(45), float64], Tensor[(4536), bool], Tensor[(1, 7, 8), float64], Tensor[(1, 7, 8), float64]) */
}

def @func_602() -> (Tensor[(1, 7, 8), float64],) {
  @func_600() /* ty=(Tensor[(1, 7, 8), float64],) */
}

def @func_3682() -> (Tensor[(?, 7, 8), int64], Tensor[(72), float32], Tensor[(1, 7, 8), float64]) {
  %785 = fn () -> (Tensor[(?, 7, 8), int64], Tensor[(72), float32], Tensor[(1, 7, 8), float64]) {
    %781 = @func_2799() /* ty=(Tensor[(5, 15, 2), float32], Tensor[(?, 7, 8), int64]) */;
    %782 = %781.1;
    %783 = @func_2643() /* ty=Tensor[(72), float32] */;
    %784 = @func_574() /* ty=Tensor[(1, 7, 8), float64] */;
    (%782, %783, %784)
  };
  %785() /* ty=(Tensor[(?, 7, 8), int64], Tensor[(72), float32], Tensor[(1, 7, 8), float64]) */
}

def @func_7432(%var_7430: Tensor[(8, 15, 8), uint16], %var_7431: Tensor[(8, 15, 8), uint16]) -> (Tensor[(8, 15, 8), uint16], Tensor[(1, 7, 8), float64]) {
  %793 = fn (%var_7418: Tensor[(8, 15, 8), uint16], %var_7419: Tensor[(8, 15, 8), uint16]) -> (Tensor[(8, 15, 8), uint16], Tensor[(1, 7, 8), float64]) {
    %786 = cast(%var_7419, dtype="uint16") /* ty=Tensor[(8, 15, 8), uint16] */;
    %787 = shape_of(%var_7418, dtype="int32") /* ty=Tensor[(3), int32] */;
    %788 = cast(%var_7418, dtype="uint16") /* ty=Tensor[(8, 15, 8), uint16] */;
    %789 = dyn.reshape(%786, %787, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %790 = @func_7402() /* ty=(Tensor[(1, 7, 8), float64],) */;
    %791 = right_shift(%788, %789) /* ty=Tensor[(8, 15, 8), uint16] */;
    %792 = %790.0;
    (%791, %792)
  };
  %793(%var_7430, %var_7431) /* ty=(Tensor[(8, 15, 8), uint16], Tensor[(1, 7, 8), float64]) */
}

def @func_3410(%var_3408: Tensor[(16, 7, 8), float64], %var_3409: Tensor[(56), float64]) -> (Tensor[(16, 7, 8), float32], Tensor[(?, 7, 8), float32], Tensor[(56), float64]) {
  @func_3406(%var_3408, %var_3409) /* ty=(Tensor[(16, 7, 8), float32], Tensor[(?, 7, 8), float32], Tensor[(56), float64]) */
}

def @func_4254() -> Tensor[(?, 7, 8), int64] {
  %794 = @func_1578() /* ty=(Tensor[(13, 10, 2), float32], Tensor[(?, 7, 8), int64]) */;
  %794.1
}

def @func_2490(%var_2472: Tensor[(16, 7, 8), float64], %var_2478: Tensor[(56), float64]) -> (Tensor[(16, 7, 8), float32], Tensor[(16, 7, 8), bool], Tensor[(260), float32], Tensor[(56), float64]) {
  %795 = @func_1894() /* ty=(Tensor[(16, 7, 8), float64],) */;
  %796 = %795.0;
  %797 = cast(%796, dtype="float32") /* ty=Tensor[(16, 7, 8), float32] */;
  %798 = cast(%var_2472, dtype="bool") /* ty=Tensor[(16, 7, 8), bool] */;
  %799 = shape_of(%796, dtype="int32") /* ty=Tensor[(3), int32] */;
  %800 = cast(%796, dtype="bool") /* ty=Tensor[(16, 7, 8), bool] */;
  %801 = dyn.reshape(%798, %799, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %802 = cast(%var_2478, dtype="float64") /* ty=Tensor[(56), float64] */;
  %803 = reshape(%802, newshape=[1, 7, 8]) /* ty=Tensor[(1, 7, 8), float64] */;
  %804 = @func_1421(%803) /* ty=(Tensor[(?, 7, 8), float32], Tensor[(1, 7, 8), float64], Tensor[(?, 9, 10), float64], Tensor[(90), float64], Tensor[(5, 7, 8), uint8], Tensor[(9, 7, 8), int32], Tensor[(504), float64], Tensor[(13, 10, 2), float32], Tensor[(260), float32]) */;
  %805 = sigmoid(%797) /* ty=Tensor[(16, 7, 8), float32] */;
  %806 = greater_equal(%800, %801) /* ty=Tensor[(16, 7, 8), bool] */;
  %807 = %804.8;
  (%805, %806, %807, %var_2478)
}

def @func_7631(%var_7629: Tensor[(90), float64]) -> (Tensor[(13, 10, 2), float32], Tensor[(16, 7, 8), int64], Tensor[(1, 7, 8), float64], Tensor[(?, 9, 10), float64], Tensor[(90), float64]) {
  @func_7628(%var_7629) /* ty=(Tensor[(13, 10, 2), float32], Tensor[(16, 7, 8), int64], Tensor[(1, 7, 8), float64], Tensor[(?, 9, 10), float64], Tensor[(90), float64]) */
}

def @func_2392() -> (Tensor[(72), float32],) {
  %810 = fn () -> (Tensor[(72), float32],) {
    %808 = @func_1260() /* ty=(Tensor[(1, 7, 8), float64], Tensor[(72), float32], Tensor[(?, 7, 8), bool]) */;
    %809 = %808.1;
    (%809,)
  };
  %810() /* ty=(Tensor[(72), float32],) */
}

def @func_2165() -> (Tensor[(16, 7, 8), float64],) {
  %813 = fn () -> (Tensor[(16, 7, 8), float64],) {
    %811 = @func_1894() /* ty=(Tensor[(16, 7, 8), float64],) */;
    %812 = %811.0;
    (%812,)
  };
  %813() /* ty=(Tensor[(16, 7, 8), float64],) */
}

def @func_4135() -> Tensor[(1, 7, 8), float64] {
  %815 = fn () -> Tensor[(1, 7, 8), float64] {
    %814 = @func_1071() /* ty=(Tensor[(1, 7, 8), float64],) */;
    %814.0
  };
  %815() /* ty=Tensor[(1, 7, 8), float64] */
}

def @func_4450() -> Tensor[(1, 7, 8), float32] {
  %816 = fn () -> Tensor[(1, 7, 8), float32] {
    @func_925() /* ty=Tensor[(1, 7, 8), float32] */
  };
  %816() /* ty=Tensor[(1, 7, 8), float32] */
}

def @func_4523() -> (Tensor[(72), float32], Tensor[(1, 7, 8), float64]) {
  @func_4521() /* ty=(Tensor[(72), float32], Tensor[(1, 7, 8), float64]) */
}

def @func_2334() -> (Tensor[(9, 7, 8), uint32], Tensor[(13, 10, 2), float64]) {
  %817 = @func_1578() /* ty=(Tensor[(13, 10, 2), float32], Tensor[(?, 7, 8), int64]) */;
  %818 = %817.1;
  %819 = cast(%818, dtype="uint32") /* ty=Tensor[(?, 7, 8), uint32] */;
  %820 = cast(meta[relay.Constant][31] /* ty=Tensor[(9, 7, 8), int64] */, dtype="uint32") /* ty=Tensor[(9, 7, 8), uint32] */;
  %821 = @func_1733() /* ty=(Tensor[(13, 10, 2), float32], Tensor[(13, 10, 2), float64], Tensor[(1, 7, 8), float64]) */;
  %822 = maximum(%819, %820) /* ty=Tensor[(9, 7, 8), uint32] */;
  %823 = %821.1;
  (%822, %823)
}

def @func_7693(%var_7692: Tensor[(15, 7, 8), float64]) -> Tensor[(15, 7, 8), float64] {
  %828 = fn (%var_7677: Tensor[(15, 7, 8), float64]) -> Tensor[(15, 7, 8), float64] {
    %824 = @func_4280() /* ty=(Tensor[(1, 7, 8), float64],) */;
    %825 = %824.0;
    %826 = cast(%825, dtype="float64") /* ty=Tensor[(1, 7, 8), float64] */;
    %827 = cast(%var_7677, dtype="float64") /* ty=Tensor[(15, 7, 8), float64] */;
    floor_divide(%826, %827) /* ty=Tensor[(15, 7, 8), float64] */
  };
  %828(%var_7692) /* ty=Tensor[(15, 7, 8), float64] */
}

def @func_3985() -> (Tensor[(1, 7, 8), float64], Tensor[(72), float32]) {
  %833 = fn () -> (Tensor[(1, 7, 8), float64], Tensor[(72), float32]) {
    %829 = @func_1071() /* ty=(Tensor[(1, 7, 8), float64],) */;
    %830 = @func_3034() /* ty=(Tensor[(72), float32],) */;
    %831 = %829.0;
    %832 = %830.0;
    (%831, %832)
  };
  %833() /* ty=(Tensor[(1, 7, 8), float64], Tensor[(72), float32]) */
}

def @func_1513() -> (Tensor[(1, 7, 8), float64], Tensor[(16, 7, 8), float64], Tensor[(896), float64], Tensor[(72), float32]) {
  %834 = @func_1316() /* ty=(Tensor[(1, 7, 8), float64],) */;
  %835 = cast(meta[relay.Constant][32] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
  %836 = cast(meta[relay.Constant][33] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %837 = reshape(%835, newshape=[16, 7, 8]) /* ty=Tensor[(16, 7, 8), float64] */;
  %838 = reshape(%836, newshape=[36, 2]) /* ty=Tensor[(36, 2), float32] */;
  %839 = @func_966(%837, %838) /* ty=(Tensor[(16, 7, 8), float64], Tensor[(36, 2), bool], Tensor[(1, 7, 8), float64]) */;
  %840 = %834.0;
  %841 = %839.0;
  (%840, %841, meta[relay.Constant][32] /* ty=Tensor[(896), float64] */, meta[relay.Constant][33] /* ty=Tensor[(72), float32] */)
}

def @func_2411(%var_2400: Tensor[(9, 3, 12), uint8]) -> Tensor[(9, 3, 12), uint8] {
  %842 = cast(meta[relay.Constant][34] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %843 = cast(%var_2400, dtype="uint8") /* ty=Tensor[(9, 3, 12), uint8] */;
  maximum(%842, %843) /* ty=Tensor[(9, 3, 12), uint8] */
}

def @func_5444() -> (Tensor[(10, 7, 8), uint32], Tensor[(1, 7, 8), float64]) {
  %851 = fn () -> (Tensor[(10, 7, 8), uint32], Tensor[(1, 7, 8), float64]) {
    %844 = @func_600() /* ty=(Tensor[(1, 7, 8), float64],) */;
    %845 = %844.0;
    %846 = cast(%845, dtype="uint32") /* ty=Tensor[(1, 7, 8), uint32] */;
    %847 = cast(meta[relay.Constant][35] /* ty=Tensor[(10, 7, 8), float64] */, dtype="uint32") /* ty=Tensor[(10, 7, 8), uint32] */;
    %848 = @func_4870() /* ty=(Tensor[(1, 7, 8), float64],) */;
    %849 = subtract(%846, %847) /* ty=Tensor[(10, 7, 8), uint32] */;
    %850 = %848.0;
    (%849, %850)
  };
  %851() /* ty=(Tensor[(10, 7, 8), uint32], Tensor[(1, 7, 8), float64]) */
}

def @func_6319() -> (Tensor[(72), float32], Tensor[(90, 1), float64], Tensor[(5, 15, 2), uint64], Tensor[(150), float64], Tensor[(?, 7, 8), int64], Tensor[(65, 4), float64]) {
  %866 = fn () -> (Tensor[(72), float32], Tensor[(90, 1), float64], Tensor[(5, 15, 2), uint64], Tensor[(150), float64], Tensor[(?, 7, 8), int64], Tensor[(65, 4), float64]) {
    %852 = @func_4659() /* ty=(Tensor[(72), float32],) */;
    %853 = @func_2122() /* ty=(Tensor[(1, 7, 8), float32], Tensor[(13, 14, 2), float32], Tensor[(364), float32], Tensor[(90, 1), float64], Tensor[(16, 7, 8), float64], Tensor[(1, 7, 8), float64]) */;
    %854 = cast(meta[relay.Constant][36] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
    %855 = reshape(%854, newshape=[5, 15, 2]) /* ty=Tensor[(5, 15, 2), float64] */;
    %856 = @func_3329(%855) /* ty=(Tensor[(5, 15, 2), uint64],) */;
    %857 = cast(meta[relay.Constant][37] /* ty=Tensor[(65, 4), float32] */, dtype="float32") /* ty=Tensor[(65, 4), float32] */;
    %858 = reshape(%857, newshape=[260]) /* ty=Tensor[(260), float32] */;
    %859 = @func_1683(%858) /* ty=(Tensor[(?, 7, 8), int64], Tensor[(13, 10, 2), float32], Tensor[(260), float32]) */;
    %860 = cast(meta[relay.Constant][37] /* ty=Tensor[(65, 4), float32] */, dtype="float64") /* ty=Tensor[(65, 4), float64] */;
    %861 = %852.0;
    %862 = %853.3;
    %863 = %856.0;
    %864 = %859.0;
    %865 = log2(%860) /* ty=Tensor[(65, 4), float64] */;
    (%861, %862, %863, meta[relay.Constant][36] /* ty=Tensor[(150), float64] */, %864, %865)
  };
  %866() /* ty=(Tensor[(72), float32], Tensor[(90, 1), float64], Tensor[(5, 15, 2), uint64], Tensor[(150), float64], Tensor[(?, 7, 8), int64], Tensor[(65, 4), float64]) */
}

def @func_677() -> (Tensor[(5, 15, 2), float64], Tensor[(5, 15, 2), bool]) {
  %877 = fn () -> (Tensor[(5, 15, 2), float64], Tensor[(5, 15, 2), bool]) {
    %867 = cast(meta[relay.Constant][39] /* ty=Tensor[(5, 15, 2), float64] */, dtype="float64") /* ty=Tensor[(5, 15, 2), float64] */;
    %868 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(5, 15, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %869 = cast(meta[relay.Constant][38] /* ty=Tensor[(5, 15, 2), float64] */, dtype="float64") /* ty=Tensor[(5, 15, 2), float64] */;
    %870 = dyn.reshape(%867, %868, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %871 = cast(meta[relay.Constant][40] /* ty=Tensor[(5, 15, 2), float64] */, dtype="bool") /* ty=Tensor[(5, 15, 2), bool] */;
    %872 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(5, 15, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %873 = cast(meta[relay.Constant][38] /* ty=Tensor[(5, 15, 2), float64] */, dtype="bool") /* ty=Tensor[(5, 15, 2), bool] */;
    %874 = dyn.reshape(%871, %872, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %875 = power(%869, %870) /* ty=Tensor[(5, 15, 2), float64] */;
    %876 = greater_equal(%873, %874) /* ty=Tensor[(5, 15, 2), bool] */;
    (%875, %876)
  };
  %877() /* ty=(Tensor[(5, 15, 2), float64], Tensor[(5, 15, 2), bool]) */
}

def @func_6358() -> (Tensor[(?, 7, 8), int64],) {
  %880 = fn () -> (Tensor[(?, 7, 8), int64],) {
    %878 = @func_3681() /* ty=(Tensor[(?, 7, 8), int64], Tensor[(72), float32], Tensor[(1, 7, 8), float64]) */;
    %879 = %878.0;
    (%879,)
  };
  %880() /* ty=(Tensor[(?, 7, 8), int64],) */
}

def @func_877(%var_874: Tensor[(260), float32], %var_875: Tensor[(90, 1), float64], %var_876: Tensor[(13, 10, 2), bool]) -> (Tensor[(?, 7, 8), bool], Tensor[(?, 9, 10), float64], Tensor[(90, 1), float64], Tensor[(1, 7, 8), float64], Tensor[(13, 10, 2), int16], Tensor[(?, 7, 8), bool], Tensor[(13, 10, 2), uint32], Tensor[(13, 10, 2), float32], Tensor[(13, 10, 2), float32]) {
  @func_872(%var_874, %var_875, %var_876) /* ty=(Tensor[(?, 7, 8), bool], Tensor[(?, 9, 10), float64], Tensor[(90, 1), float64], Tensor[(1, 7, 8), float64], Tensor[(13, 10, 2), int16], Tensor[(?, 7, 8), bool], Tensor[(13, 10, 2), uint32], Tensor[(13, 10, 2), float32], Tensor[(13, 10, 2), float32]) */
}

def @func_6807(%var_6796: Tensor[(280), float32]) -> (Tensor[(1, 7, 8), float64], Tensor[(72), float32], Tensor[(280), float32], Tensor[(1, 7, 8), float64], Tensor[(1, 7, 8), float32]) {
  %881 = @func_5443() /* ty=(Tensor[(10, 7, 8), uint32], Tensor[(1, 7, 8), float64]) */;
  %882 = cast(%var_6796, dtype="float32") /* ty=Tensor[(280), float32] */;
  %883 = reshape(%882, newshape=[5, 7, 8]) /* ty=Tensor[(5, 7, 8), float32] */;
  %884 = @func_3604(%883) /* ty=(Tensor[(5, 7, 8), float64], Tensor[(16, 7, 8), float64], Tensor[(72), float32]) */;
  %885 = %884.2;
  %886 = cast(%885, dtype="float32") /* ty=Tensor[(72), float32] */;
  %887 = reshape(%886, newshape=[9, 4, 2]) /* ty=Tensor[(9, 4, 2), float32] */;
  %888 = @func_720(%887) /* ty=(Tensor[(9, 4, 2), float32], Tensor[(1, 7, 8), float64]) */;
  %889 = %881.1;
  %890 = %888.1;
  %891 = @func_4449() /* ty=Tensor[(1, 7, 8), float32] */;
  (%889, %885, %var_6796, %890, %891)
}

def @func_5595() -> (Tensor[(1, 7, 8), float64],) {
  @func_5593() /* ty=(Tensor[(1, 7, 8), float64],) */
}

def @func_4383() -> (Tensor[(1, 7, 8), float64], Tensor[(1, 7, 8), float64]) {
  %895 = fn () -> (Tensor[(1, 7, 8), float64], Tensor[(1, 7, 8), float64]) {
    %892 = @func_4349() /* ty=(Tensor[(1, 7, 8), float64],) */;
    %893 = %892.0;
    %894 = @func_1594() /* ty=Tensor[(1, 7, 8), float64] */;
    (%893, %894)
  };
  %895() /* ty=(Tensor[(1, 7, 8), float64], Tensor[(1, 7, 8), float64]) */
}

def @func_1262() -> (Tensor[(1, 7, 8), float64], Tensor[(72), float32], Tensor[(?, 7, 8), bool]) {
  @func_1260() /* ty=(Tensor[(1, 7, 8), float64], Tensor[(72), float32], Tensor[(?, 7, 8), bool]) */
}

def @func_5234(%var_5223: Tensor[(11, 1, 5), float32]) -> Tensor[(11, ?, 5), float64] {
  %896 = cast(%var_5223, dtype="float32") /* ty=Tensor[(11, 1, 5), float32] */;
  %897 = acosh(%896) /* ty=Tensor[(11, 1, 5), float32] */;
  %898 = cast(%var_5223, dtype="float64") /* ty=Tensor[(11, 1, 5), float64] */;
  %899 = shape_of(%897, dtype="int32") /* ty=Tensor[(3), int32] */;
  %900 = cast(%897, dtype="float64") /* ty=Tensor[(11, 1, 5), float64] */;
  %901 = dyn.reshape(%898, %899, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%900, %901) /* ty=Tensor[(11, ?, 5), float64] */
}

def @func_1073() -> (Tensor[(1, 7, 8), float64],) {
  @func_1071() /* ty=(Tensor[(1, 7, 8), float64],) */
}

def @func_3519(%var_3466: Tensor[(5, 11, 2), float64]) -> (Tensor[(5, 11, 2), float64], Tensor[(?, 7, 8), float32], Tensor[(56), float64], Tensor[(?, 7, 8), int64], Tensor[(1, 7, 8), float64]) {
  %902 = cast(meta[relay.Constant][41] /* ty=Tensor[(5, 11, 2), float64] */, dtype="float64") /* ty=Tensor[(5, 11, 2), float64] */;
  %903 = shape_of(%var_3466, dtype="int32") /* ty=Tensor[(3), int32] */;
  %904 = cast(%var_3466, dtype="float64") /* ty=Tensor[(5, 11, 2), float64] */;
  %905 = dyn.reshape(%902, %903, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %906 = cast(meta[relay.Constant][42] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
  %907 = reshape(%906, newshape=[1, 7, 8]) /* ty=Tensor[(1, 7, 8), float64] */;
  %908 = @func_1421(%907) /* ty=(Tensor[(?, 7, 8), float32], Tensor[(1, 7, 8), float64], Tensor[(?, 9, 10), float64], Tensor[(90), float64], Tensor[(5, 7, 8), uint8], Tensor[(9, 7, 8), int32], Tensor[(504), float64], Tensor[(13, 10, 2), float32], Tensor[(260), float32]) */;
  %909 = @func_1578() /* ty=(Tensor[(13, 10, 2), float32], Tensor[(?, 7, 8), int64]) */;
  %910 = mod(%904, %905) /* ty=Tensor[(5, 11, 2), float64] */;
  %911 = %908.0;
  %912 = %909.1;
  %913 = @func_526() /* ty=Tensor[(1, 7, 8), float64] */;
  (%910, %911, meta[relay.Constant][42] /* ty=Tensor[(56), float64] */, %912, %913)
}

def @func_4871() -> (Tensor[(1, 7, 8), float64],) {
  %915 = fn () -> (Tensor[(1, 7, 8), float64],) {
    %914 = @func_526() /* ty=Tensor[(1, 7, 8), float64] */;
    (%914,)
  };
  %915() /* ty=(Tensor[(1, 7, 8), float64],) */
}

def @func_2644() -> Tensor[(72), float32] {
  %917 = fn () -> Tensor[(72), float32] {
    %916 = @func_1513() /* ty=(Tensor[(1, 7, 8), float64], Tensor[(16, 7, 8), float64], Tensor[(896), float64], Tensor[(72), float32]) */;
    %916.3
  };
  %917() /* ty=Tensor[(72), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen564/build/output.py:2609: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen564/build/output.py", line 2614, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(512) tvmgen_default_fused_asinh_cast_cast_reshape_greater_equal_kernel0(signed char* __restrict__ T_greater_equal, double* __restrict__ placeholder) {
  T_greater_equal[(((int)threadIdx.x))] = ((signed char)(((bool)placeholder[(((int)threadIdx.x))]) <= ((bool)asinh(placeholder[(((int)threadIdx.x))]))));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

