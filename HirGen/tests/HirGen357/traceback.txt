==========mod==========
#[version = "0.0.5"]
def @func_3292() -> (Tensor[(1, 12, 8), bool], Tensor[(7, 11, 12), float64], Tensor[(6, 36), int8]) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 36), int8] */, dtype="int8") /* ty=Tensor[(6, 36), int8] */;
  %1 = reshape(%0, newshape=[216]) /* ty=Tensor[(216), int8] */;
  %2 = @func_1177(%1) /* ty=(Tensor[(7, 11, 12), uint32], Tensor[(6, 12, 3), bool], Tensor[(216), int8], Tensor[(7, 11, 12), float64]) */;
  %3 = @func_1477() /* ty=Tensor[(1, 12, 8), bool] */;
  %4 = %2.3;
  (%3, %4, meta[relay.Constant][0] /* ty=Tensor[(6, 36), int8] */)
}

def @func_366() -> (Tensor[(6, 12, 3), float32], Tensor[(5, 10, 15), uint16], Tensor[(750), float32]) {
  %5 = @func_121() /* ty=(Tensor[(6, 12, 3), int8],) */;
  %6 = %5.0;
  %7 = cast(%6, dtype="float32") /* ty=Tensor[(6, 12, 3), float32] */;
  %8 = cast(meta[relay.Constant][1] /* ty=Tensor[(750), float32] */, dtype="float32") /* ty=Tensor[(750), float32] */;
  %9 = reshape(%8, newshape=[5, 10, 15]) /* ty=Tensor[(5, 10, 15), float32] */;
  %10 = @func_217(%9) /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), uint16], Tensor[(5, 10, 15), float64]) */;
  %11 = sin(%7) /* ty=Tensor[(6, 12, 3), float32] */;
  %12 = %10.1;
  (%11, %12, meta[relay.Constant][1] /* ty=Tensor[(750), float32] */)
}

def @func_6950(%var_6918: Tensor[(11, 2, 7), float64]) -> (Tensor[(11, 2, 7), float64], Tensor[(5, 10, 15), int64], Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), float64], Tensor[(840), float64]) {
  %13 = cast(%var_6918, dtype="float64") /* ty=Tensor[(11, 2, 7), float64] */;
  %14 = @func_5012() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %15 = cast(meta[relay.Constant][2] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %16 = reshape(%15, newshape=[14, 12, 5]) /* ty=Tensor[(14, 12, 5), float64] */;
  %17 = @func_1859(%16) /* ty=(Tensor[(14, 12, 5), uint64], Tensor[(14, 12, 5), float64]) */;
  %18 = atan(%13) /* ty=Tensor[(11, 2, 7), float64] */;
  %19 = @func_3265() /* ty=Tensor[(5, 10, 15), int64] */;
  %20 = %14.1;
  %21 = %17.1;
  (%18, %19, %20, %21, meta[relay.Constant][2] /* ty=Tensor[(840), float64] */)
}

def @func_6180() -> Tensor[(11, 6, 14), bool] {
  %22 = cast(meta[relay.Constant][3] /* ty=uint16 */, dtype="bool") /* ty=bool */;
  %23 = cast(meta[relay.Constant][4] /* ty=Tensor[(11, 6, 14), uint16] */, dtype="bool") /* ty=Tensor[(11, 6, 14), bool] */;
  less_equal(%22, %23) /* ty=Tensor[(11, 6, 14), bool] */
}

def @func_4587() -> (Tensor[(1, 12, 8), bool], Tensor[(6, 12, 3), int8]) {
  %24 = @func_1477() /* ty=Tensor[(1, 12, 8), bool] */;
  %25 = @func_1034() /* ty=Tensor[(6, 12, 3), int8] */;
  (%24, %25)
}

def @func_8543() -> (Tensor[(6, 12, 3), int8],) {
  %26 = @func_4152() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(3, 13, 8), float32]) */;
  %27 = %26.0;
  (%27,)
}

def @func_5471() -> (Tensor[(6, 12, 3), int8], Tensor[(240), float64], Tensor[(240), float64]) {
  %28 = @func_4152() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(3, 13, 8), float32]) */;
  %29 = cast(meta[relay.Constant][5] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %30 = reshape(%29, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %31 = @func_499(%30) /* ty=(Tensor[(5, 10, 15), uint16], Tensor[(5, 16, 3), bool], Tensor[(240), float64], Tensor[(6, 12, 3), float64]) */;
  %32 = %28.1;
  %33 = %31.2;
  (%32, %33, meta[relay.Constant][5] /* ty=Tensor[(240), float64] */)
}

def @func_2850(%var_2822: Tensor[(750), float32]) -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(750), uint64], Tensor[(750), float64]) {
  %34 = cast(meta[relay.Constant][6] /* ty=Tensor[(750), float32] */, dtype="float32") /* ty=Tensor[(750), float32] */;
  %35 = reshape(%34, newshape=[5, 10, 15]) /* ty=Tensor[(5, 10, 15), float32] */;
  %36 = @func_217(%35) /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), uint16], Tensor[(5, 10, 15), float64]) */;
  %37 = cast(%var_2822, dtype="uint64") /* ty=Tensor[(750), uint64] */;
  %38 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(750), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %39 = cast(meta[relay.Constant][6] /* ty=Tensor[(750), float32] */, dtype="uint64") /* ty=Tensor[(750), uint64] */;
  %40 = dyn.reshape(%37, %38, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %41 = cast(%var_2822, dtype="float64") /* ty=Tensor[(750), float64] */;
  %42 = @func_2362() /* ty=Tensor[(6, 12, 3), int8] */;
  %43 = %36.0;
  %44 = bitwise_xor(%39, %40) /* ty=Tensor[(750), uint64] */;
  %45 = sin(%41) /* ty=Tensor[(750), float64] */;
  (%42, %43, %44, %45)
}

def @func_8494() -> Tensor[(6, 12, 3), int8] {
  %46 = @func_1530() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) */;
  %46.0
}

def @main() -> (Tensor[(14, 12, 5), float64], Tensor[(14, 12, 5), float32]) {
  %47 = @func_1986() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(5, 10, 15), int64], Tensor[(14, 12, 5), uint64], Tensor[(840), float64], Tensor[(5, 10, 15), uint8]) */;
  %48 = %47.2;
  %49 = cast(%48, dtype="float64") /* ty=Tensor[(14, 12, 5), float64] */;
  %50 = cast(%48, dtype="float32") /* ty=Tensor[(14, 12, 5), float32] */;
  %51 = sin(%49) /* ty=Tensor[(14, 12, 5), float64] */;
  %52 = sinh(%50) /* ty=Tensor[(14, 12, 5), float32] */;
  (%51, %52)
}

def @func_1177(%var_1159: Tensor[(216), int8]) -> (Tensor[(7, 11, 12), uint32], Tensor[(6, 12, 3), bool], Tensor[(216), int8], Tensor[(7, 11, 12), float64]) {
  %53 = cast(meta[relay.Constant][7] /* ty=Tensor[(7, 11, 12), float64] */, dtype="float64") /* ty=Tensor[(7, 11, 12), float64] */;
  %54 = asin(%53) /* ty=Tensor[(7, 11, 12), float64] */;
  %55 = cast(%54, dtype="float32") /* ty=Tensor[(7, 11, 12), float32] */;
  %56 = log2(%55) /* ty=Tensor[(7, 11, 12), float32] */;
  %57 = cast(%54, dtype="uint32") /* ty=Tensor[(7, 11, 12), uint32] */;
  %58 = shape_of(%56, dtype="int32") /* ty=Tensor[(3), int32] */;
  %59 = cast(%56, dtype="uint32") /* ty=Tensor[(7, 11, 12), uint32] */;
  %60 = dyn.reshape(%57, %58, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %61 = cast(%var_1159, dtype="int8") /* ty=Tensor[(216), int8] */;
  %62 = reshape(%61, newshape=[6, 12, 3]) /* ty=Tensor[(6, 12, 3), int8] */;
  %63 = cast(%56, dtype="float64") /* ty=Tensor[(7, 11, 12), float64] */;
  %64 = minimum(%59, %60) /* ty=Tensor[(7, 11, 12), uint32] */;
  %65 = @func_444(%62) /* ty=Tensor[(6, 12, 3), bool] */;
  %66 = tan(%63) /* ty=Tensor[(7, 11, 12), float64] */;
  (%64, %65, %var_1159, %66)
}

def @func_4497(%var_4492: Tensor[(14, 12, 5), float64]) -> Tensor[(14, 12, 5), int64] {
  %67 = @func_2916() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), float64], Tensor[(840), float64]) */;
  %68 = %67.2;
  %69 = cast(%var_4492, dtype="int64") /* ty=Tensor[(14, 12, 5), int64] */;
  %70 = shape_of(%68, dtype="int32") /* ty=Tensor[(3), int32] */;
  %71 = cast(%68, dtype="int64") /* ty=Tensor[(14, 12, 5), int64] */;
  %72 = dyn.reshape(%69, %70, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_xor(%71, %72) /* ty=Tensor[(14, 12, 5), int64] */
}

def @func_5570(%var_5543: Tensor[(12, 16, 10), float32], %var_5544: Tensor[(12, 16, 10), float32]) -> (Tensor[(12, 16, 10), float32], Tensor[(6, 12, 3), int8], Tensor[(12, 16, 10), float32]) {
  %73 = cast(%var_5544, dtype="float32") /* ty=Tensor[(12, 16, 10), float32] */;
  %74 = shape_of(%var_5543, dtype="int32") /* ty=Tensor[(3), int32] */;
  %75 = cast(%var_5543, dtype="float32") /* ty=Tensor[(12, 16, 10), float32] */;
  %76 = dyn.reshape(%73, %74, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %77 = @func_2580() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(6, 12, 3), int8]) */;
  %78 = cast(%var_5543, dtype="float32") /* ty=Tensor[(12, 16, 10), float32] */;
  %79 = floor_divide(%75, %76) /* ty=Tensor[(12, 16, 10), float32] */;
  %80 = %77.1;
  %81 = asinh(%78) /* ty=Tensor[(12, 16, 10), float32] */;
  (%79, %80, %81)
}

def @func_4680() -> Tensor[(6, 12, 3), int8] {
  %82 = @func_2704() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 16, 3), bool], Tensor[(8, 30), float64], Tensor[(6, 12, 3), int8], Tensor[(750), float64], Tensor[(5, 10, 15), float64]) */;
  %82.0
}

def @func_9276() -> Tensor[(6, 12, 3), int8] {
  %83 = @func_7536() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(750), int64]) */;
  %83.0
}

def @func_1530() -> (Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) {
  %84 = @func_676() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %85 = @func_1330() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) */;
  %86 = %84.1;
  %87 = %85.1;
  (%86, %87)
}

def @func_8090() -> (Tensor[(750), int64],) {
  %88 = @func_4321() /* ty=(Tensor[(750), int64],) */;
  %89 = %88.0;
  (%89,)
}

def @func_5487() -> (Tensor[(6, 12, 3), int8],) {
  %90 = @func_5121() /* ty=Tensor[(6, 12, 3), int8] */;
  (%90,)
}

def @func_9170() -> (Tensor[(5, 10, 15), uint8], Tensor[(5, 10, 15), bool], Tensor[(5, 10, 15), bool]) {
  %91 = @func_1986() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(5, 10, 15), int64], Tensor[(14, 12, 5), uint64], Tensor[(840), float64], Tensor[(5, 10, 15), uint8]) */;
  %92 = @func_8814() /* ty=(Tensor[(5, 10, 15), bool],) */;
  %93 = @func_8814() /* ty=(Tensor[(5, 10, 15), bool],) */;
  %94 = %91.4;
  %95 = %92.0;
  %96 = %93.0;
  (%94, %95, %96)
}

def @func_1030() -> (Tensor[(6, 12, 3), int8], Tensor[(16, 11, 5), float64], Tensor[(880), float64]) {
  %97 = @func_991() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %98 = cast(meta[relay.Constant][8] /* ty=Tensor[(880), float64] */, dtype="float64") /* ty=Tensor[(880), float64] */;
  %99 = reshape(%98, newshape=[16, 11, 5]) /* ty=Tensor[(16, 11, 5), float64] */;
  %100 = %97.1;
  %101 = @func_934(%99) /* ty=Tensor[(16, 11, 5), float64] */;
  (%100, %101, meta[relay.Constant][8] /* ty=Tensor[(880), float64] */)
}

def @func_7097() -> (Tensor[(6, 12, 3), bool], Tensor[(6, 12, 3), int8]) {
  %102 = @func_5457() /* ty=(Tensor[(5, 10, 15), int64], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), bool], Tensor[(6, 12, 3), int8]) */;
  %103 = @func_6194() /* ty=(Tensor[(6, 12, 3), int8],) */;
  %104 = %102.2;
  %105 = %103.0;
  (%104, %105)
}

def @func_2916() -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), float64], Tensor[(840), float64]) {
  %106 = @func_2580() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(6, 12, 3), int8]) */;
  %107 = @func_2580() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(6, 12, 3), int8]) */;
  %108 = cast(meta[relay.Constant][9] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %109 = reshape(%108, newshape=[14, 12, 5]) /* ty=Tensor[(14, 12, 5), float64] */;
  %110 = @func_1859(%109) /* ty=(Tensor[(14, 12, 5), uint64], Tensor[(14, 12, 5), float64]) */;
  %111 = %106.1;
  %112 = %107.1;
  %113 = %110.1;
  (%111, %112, %113, meta[relay.Constant][9] /* ty=Tensor[(840), float64] */)
}

def @func_1477() -> Tensor[(1, 12, 8), bool] {
  %114 = cast(3 /* ty=int64 */, dtype="bool") /* ty=bool */;
  %115 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 12, 8), int64] */, dtype="bool") /* ty=Tensor[(1, 12, 8), bool] */;
  greater(%114, %115) /* ty=Tensor[(1, 12, 8), bool] */
}

def @func_3403() -> Tensor[(14, 12, 5), uint64] {
  %116 = @func_1877() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), uint64], Tensor[(420, 2), float64]) */;
  %116.1
}

def @func_3797() -> (Tensor[(5, 10, 15), bool], Tensor[(6, 12, 3), int8]) {
  %117 = @func_2580() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(6, 12, 3), int8]) */;
  %118 = @func_991() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %119 = %117.0;
  %120 = %118.0;
  (%119, %120)
}

def @func_5457() -> (Tensor[(5, 10, 15), int64], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), bool], Tensor[(6, 12, 3), int8]) {
  %121 = @func_1064() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) */;
  %122 = @func_1761() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %123 = %122.0;
  %124 = cast(%123, dtype="int8") /* ty=Tensor[(6, 12, 3), int8] */;
  %125 = reshape(%124, newshape=[6, 12, 3]) /* ty=Tensor[(6, 12, 3), int8] */;
  %126 = @func_2536() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(750), int64]) */;
  %127 = %121.1;
  %128 = @func_444(%125) /* ty=Tensor[(6, 12, 3), bool] */;
  %129 = %126.0;
  (%127, %123, %128, %129)
}

def @func_5968(%var_5949: Tensor[(14, 12, 5), uint64]) -> (Tensor[(2, 120), float64], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), uint32], Tensor[(6, 12, 3), int8]) {
  %130 = @func_5229() /* ty=(Tensor[(5, 10, 15), int64], Tensor[(5, 10, 15), uint16], Tensor[(2, 120), float64], Tensor[(6, 12, 3), int8]) */;
  %131 = @func_732() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %132 = @func_5809() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), uint64]) */;
  %133 = %132.1;
  %134 = cast(%var_5949, dtype="uint32") /* ty=Tensor[(14, 12, 5), uint32] */;
  %135 = shape_of(%133, dtype="int32") /* ty=Tensor[(3), int32] */;
  %136 = cast(%133, dtype="uint32") /* ty=Tensor[(14, 12, 5), uint32] */;
  %137 = dyn.reshape(%134, %135, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %138 = @func_5012() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %139 = %130.2;
  %140 = @func_4973() /* ty=Tensor[(6, 12, 3), int8] */;
  %141 = %131.1;
  %142 = maximum(%136, %137) /* ty=Tensor[(14, 12, 5), uint32] */;
  %143 = %138.1;
  (%139, %140, %141, %142, %143)
}

def @func_5632() -> (Tensor[(240), float64], Tensor[(420, 2), float64]) {
  %144 = @func_5471() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(240), float64], Tensor[(240), float64]) */;
  %145 = @func_1877() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), uint64], Tensor[(420, 2), float64]) */;
  %146 = %144.2;
  %147 = %145.2;
  (%146, %147)
}

def @func_2027(%var_2015: Tensor[(5, 10, 15), int64]) -> Tensor[(5, 10, 15), uint8] {
  %148 = @func_864() /* ty=Tensor[(5, 10, 15), int64] */;
  %149 = cast(%var_2015, dtype="uint8") /* ty=Tensor[(5, 10, 15), uint8] */;
  %150 = shape_of(%148, dtype="int32") /* ty=Tensor[(3), int32] */;
  %151 = cast(%148, dtype="uint8") /* ty=Tensor[(5, 10, 15), uint8] */;
  %152 = dyn.reshape(%149, %150, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  bitwise_and(%151, %152) /* ty=Tensor[(5, 10, 15), uint8] */
}

def @func_5252() -> (Tensor[(6, 12, 3), int8], Tensor[(1, 12, 8), bool]) {
  %153 = @func_3156() /* ty=(Tensor[(6, 12, 3), int8],) */;
  %154 = @func_4587() /* ty=(Tensor[(1, 12, 8), bool], Tensor[(6, 12, 3), int8]) */;
  %155 = %153.0;
  %156 = %154.0;
  (%155, %156)
}

def @func_570() -> Tensor[(6, 12, 3), int8] {
  %157 = @func_121() /* ty=(Tensor[(6, 12, 3), int8],) */;
  %157.0
}

def @func_1281(%var_1219: Tensor[(1, 16, 15), float64], %var_1220: Tensor[(5, 16, 15), float64]) -> (Tensor[(5, 16, 15), float64], Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64], Tensor[(750), float64]) {
  %158 = cast(%var_1219, dtype="float64") /* ty=Tensor[(1, 16, 15), float64] */;
  %159 = cast(%var_1220, dtype="float64") /* ty=Tensor[(5, 16, 15), float64] */;
  %160 = @func_991() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %161 = @func_1064() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) */;
  %162 = @func_366() /* ty=(Tensor[(6, 12, 3), float32], Tensor[(5, 10, 15), uint16], Tensor[(750), float32]) */;
  %163 = %162.2;
  %164 = cast(%163, dtype="float64") /* ty=Tensor[(750), float64] */;
  %165 = subtract(%158, %159) /* ty=Tensor[(5, 16, 15), float64] */;
  %166 = %160.0;
  %167 = %161.1;
  %168 = acos(%164) /* ty=Tensor[(750), float64] */;
  (%165, %166, %167, %168)
}

def @func_1507() -> Tensor[(750), float32] {
  %169 = @func_1206() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(750), float32]) */;
  %170 = %169.1;
  %171 = cast(%170, dtype="float32") /* ty=Tensor[(750), float32] */;
  log2(%171) /* ty=Tensor[(750), float32] */
}

def @func_7667() -> Tensor[(6, 12, 3), int8] {
  %172 = @func_548() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %172.1
}

def @func_8230() -> Tensor[(6, 12, 3), int8] {
  @func_570() /* ty=Tensor[(6, 12, 3), int8] */
}

def @func_649(%var_610: Tensor[(5, 1, 6), float32], %var_611: Tensor[(5, 7, 6), float32]) -> (Tensor[(5, 7, 6), float32], Tensor[(5, 7, 6), float32]) {
  %173 = cast(%var_610, dtype="float32") /* ty=Tensor[(5, 1, 6), float32] */;
  %174 = cast(%var_611, dtype="float32") /* ty=Tensor[(5, 7, 6), float32] */;
  %175 = cast(%var_610, dtype="float64") /* ty=Tensor[(5, 1, 6), float64] */;
  %176 = atanh(%175) /* ty=Tensor[(5, 1, 6), float64] */;
  %177 = cast(%176, dtype="float32") /* ty=Tensor[(5, 1, 6), float32] */;
  %178 = cast(%var_611, dtype="float32") /* ty=Tensor[(5, 7, 6), float32] */;
  %179 = subtract(%173, %174) /* ty=Tensor[(5, 7, 6), float32] */;
  %180 = floor_mod(%177, %178) /* ty=Tensor[(5, 7, 6), float32] */;
  (%179, %180)
}

def @func_3224() -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) {
  %181 = @func_676() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %182 = %181.0;
  %183 = @func_2362() /* ty=Tensor[(6, 12, 3), int8] */;
  (%182, %183)
}

def @func_7363() -> (Tensor[(6, 12, 3), int8],) {
  %184 = @func_991() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %185 = %184.0;
  (%185,)
}

def @func_9588() -> (Tensor[(240), float64], Tensor[(6, 12, 3), int8]) {
  %186 = @func_5471() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(240), float64], Tensor[(240), float64]) */;
  %187 = @func_6488() /* ty=(Tensor[(6, 12, 3), int8],) */;
  %188 = %186.2;
  %189 = %187.0;
  (%188, %189)
}

def @func_121() -> (Tensor[(6, 12, 3), int8],) {
  %190 = cast(meta[relay.Constant][11] /* ty=Tensor[(6, 12, 3), bool] */, dtype="bool") /* ty=Tensor[(6, 12, 3), bool] */;
  %191 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(6, 12, 3), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %192 = cast(meta[relay.Constant][12] /* ty=Tensor[(6, 12, 3), bool] */, dtype="bool") /* ty=Tensor[(6, 12, 3), bool] */;
  %193 = dyn.reshape(%190, %191, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %194 = logical_or(%192, %193) /* ty=Tensor[(6, 12, 3), bool] */;
  %195 = cast(%194, dtype="int8") /* ty=Tensor[(6, 12, 3), int8] */;
  %196 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(6, 12, 3), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %197 = cast(meta[relay.Constant][11] /* ty=Tensor[(6, 12, 3), bool] */, dtype="int8") /* ty=Tensor[(6, 12, 3), int8] */;
  %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %199 = left_shift(%197, %198) /* ty=Tensor[(6, 12, 3), int8] */;
  (%199,)
}

def @func_5809() -> (Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), uint64]) {
  %200 = @func_5487() /* ty=(Tensor[(6, 12, 3), int8],) */;
  %201 = @func_1986() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(5, 10, 15), int64], Tensor[(14, 12, 5), uint64], Tensor[(840), float64], Tensor[(5, 10, 15), uint8]) */;
  %202 = %200.0;
  %203 = %201.2;
  (%202, %203)
}

def @func_2131(%var_2082: Tensor[(5, 10, 15), int64]) -> (Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), bool], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(880), float64]) {
  %204 = @func_991() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %205 = @func_1530() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) */;
  %206 = %205.1;
  %207 = cast(%var_2082, dtype="bool") /* ty=Tensor[(5, 10, 15), bool] */;
  %208 = shape_of(%206, dtype="int32") /* ty=Tensor[(3), int32] */;
  %209 = cast(%206, dtype="bool") /* ty=Tensor[(5, 10, 15), bool] */;
  %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %211 = @func_1064() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) */;
  %212 = @func_732() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %213 = @func_1030() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(16, 11, 5), float64], Tensor[(880), float64]) */;
  %214 = %204.0;
  %215 = equal(%209, %210) /* ty=Tensor[(5, 10, 15), bool] */;
  %216 = %211.0;
  %217 = %212.0;
  %218 = %213.2;
  (%214, %215, %216, %217, %218)
}

def @func_6153() -> (Tensor[(5, 10, 15), uint16],) {
  %219 = @func_3006() /* ty=Tensor[(5, 10, 15), uint16] */;
  (%219,)
}

def @func_8814() -> (Tensor[(5, 10, 15), bool],) {
  %220 = @func_2580() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(6, 12, 3), int8]) */;
  %221 = %220.0;
  (%221,)
}

def @func_6999() -> Tensor[(5, 10, 15), int64] {
  @func_3265() /* ty=Tensor[(5, 10, 15), int64] */
}

def @func_6488() -> (Tensor[(6, 12, 3), int8],) {
  %222 = @func_5487() /* ty=(Tensor[(6, 12, 3), int8],) */;
  %223 = %222.0;
  (%223,)
}

def @func_2428(%var_2414: Tensor[(14, 12, 5), uint64]) -> (Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), bool], Tensor[(6, 12, 3), int8]) {
  %224 = @func_2206() /* ty=(Tensor[(6, 12, 3), int8],) */;
  %225 = @func_1986() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(5, 10, 15), int64], Tensor[(14, 12, 5), uint64], Tensor[(840), float64], Tensor[(5, 10, 15), uint8]) */;
  %226 = %225.2;
  %227 = cast(%var_2414, dtype="bool") /* ty=Tensor[(14, 12, 5), bool] */;
  %228 = shape_of(%226, dtype="int32") /* ty=Tensor[(3), int32] */;
  %229 = cast(%226, dtype="bool") /* ty=Tensor[(14, 12, 5), bool] */;
  %230 = dyn.reshape(%227, %228, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %231 = %224.0;
  %232 = not_equal(%229, %230) /* ty=Tensor[(14, 12, 5), bool] */;
  %233 = @func_570() /* ty=Tensor[(6, 12, 3), int8] */;
  (%231, %232, %233)
}

def @func_1034() -> Tensor[(6, 12, 3), int8] {
  @func_570() /* ty=Tensor[(6, 12, 3), int8] */
}

def @func_8462() -> Tensor[(6, 12, 3), int8] {
  %234 = @func_3797() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(6, 12, 3), int8]) */;
  %234.1
}

def @func_2580() -> (Tensor[(5, 10, 15), bool], Tensor[(6, 12, 3), int8]) {
  %235 = @func_1986() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(5, 10, 15), int64], Tensor[(14, 12, 5), uint64], Tensor[(840), float64], Tensor[(5, 10, 15), uint8]) */;
  %236 = @func_1330() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) */;
  %237 = %235.0;
  %238 = %236.0;
  (%237, %238)
}

def @func_8599(%var_8580: Tensor[(240), float64]) -> (Tensor[(14, 12, 5), float32], Tensor[(5, 16, 3), bool], Tensor[(240), float64]) {
  %239 = @func_6832() /* ty=(Tensor[(14, 12, 5), uint64], Tensor[(6, 12, 3), int8]) */;
  %240 = %239.0;
  %241 = cast(%240, dtype="float32") /* ty=Tensor[(14, 12, 5), float32] */;
  %242 = cast(%var_8580, dtype="float64") /* ty=Tensor[(240), float64] */;
  %243 = reshape(%242, newshape=[5, 16, 3]) /* ty=Tensor[(5, 16, 3), float64] */;
  %244 = log2(%241) /* ty=Tensor[(14, 12, 5), float32] */;
  %245 = @func_290(%243) /* ty=Tensor[(5, 16, 3), bool] */;
  (%244, %245, %var_8580)
}

def @func_4321() -> (Tensor[(750), int64],) {
  %246 = @func_2536() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(750), int64]) */;
  %247 = %246.3;
  (%247,)
}

def @func_3370(%var_3345: Tensor[(2, 16, 13), float32]) -> (Tensor[(6, 12, 3), int8], Tensor[(2, 16, 13), float64]) {
  %248 = @func_3156() /* ty=(Tensor[(6, 12, 3), int8],) */;
  %249 = cast(%var_3345, dtype="float32") /* ty=Tensor[(2, 16, 13), float32] */;
  %250 = exp(%249) /* ty=Tensor[(2, 16, 13), float32] */;
  %251 = cast(%var_3345, dtype="float64") /* ty=Tensor[(2, 16, 13), float64] */;
  %252 = shape_of(%250, dtype="int32") /* ty=Tensor[(3), int32] */;
  %253 = cast(%250, dtype="float64") /* ty=Tensor[(2, 16, 13), float64] */;
  %254 = dyn.reshape(%251, %252, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %255 = %248.0;
  %256 = mod(%253, %254) /* ty=Tensor[(2, 16, 13), float64] */;
  (%255, %256)
}

def @func_8387(%var_8334: Tensor[(14, 15, 6), int32], %var_8353: Tensor[(216), int8], %var_8369: Tensor[(14, 15, 6), float64]) -> (Tensor[(14, 15, 6), int32], Tensor[(7, 11, 12), uint32], Tensor[(216), int8], Tensor[(6, 12, 3), int8], Tensor[(14, 15, 6), uint32], Tensor[(5, 10, 15), bool], Tensor[(240), float64], Tensor[(840, 1), float64]) {
  %257 = cast(%var_8334, dtype="int32") /* ty=Tensor[(14, 15, 6), int32] */;
  %258 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(14, 15, 6), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %259 = cast(meta[relay.Constant][13] /* ty=Tensor[(14, 15, 6), int32] */, dtype="int32") /* ty=Tensor[(14, 15, 6), int32] */;
  %260 = dyn.reshape(%257, %258, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %261 = cast(%var_8353, dtype="int8") /* ty=Tensor[(216), int8] */;
  %262 = reshape(%261, newshape=[216]) /* ty=Tensor[(216), int8] */;
  %263 = @func_1177(%262) /* ty=(Tensor[(7, 11, 12), uint32], Tensor[(6, 12, 3), bool], Tensor[(216), int8], Tensor[(7, 11, 12), float64]) */;
  %264 = @func_7536() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(750), int64]) */;
  %265 = cast(meta[relay.Constant][13] /* ty=Tensor[(14, 15, 6), int32] */, dtype="float64") /* ty=Tensor[(14, 15, 6), float64] */;
  %266 = atan(%265) /* ty=Tensor[(14, 15, 6), float64] */;
  %267 = cast(%var_8369, dtype="uint32") /* ty=Tensor[(14, 15, 6), uint32] */;
  %268 = shape_of(%266, dtype="int32") /* ty=Tensor[(3), int32] */;
  %269 = cast(%266, dtype="uint32") /* ty=Tensor[(14, 15, 6), uint32] */;
  %270 = dyn.reshape(%267, %268, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %271 = cast(meta[relay.Constant][14] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %272 = cast(meta[relay.Constant][15] /* ty=Tensor[(840, 1), float64] */, dtype="float64") /* ty=Tensor[(840, 1), float64] */;
  %273 = reshape(%271, newshape=[4, 60]) /* ty=Tensor[(4, 60), float64] */;
  %274 = reshape(%272, newshape=[840]) /* ty=Tensor[(840), float64] */;
  %275 = @func_4193(%273, %274) /* ty=(Tensor[(5, 10, 15), bool], Tensor[(5, 16, 3), bool], Tensor[(4, 60), float64], Tensor[(14, 12, 5), float64], Tensor[(840), float64], Tensor[(5, 10, 15), uint8], Tensor[(1200), float64]) */;
  %276 = bitwise_and(%259, %260) /* ty=Tensor[(14, 15, 6), int32] */;
  %277 = %263.0;
  %278 = %264.0;
  %279 = right_shift(%269, %270) /* ty=Tensor[(14, 15, 6), uint32] */;
  %280 = %275.0;
  (%276, %277, %var_8353, %278, %279, %280, meta[relay.Constant][14] /* ty=Tensor[(240), float64] */, meta[relay.Constant][15] /* ty=Tensor[(840, 1), float64] */)
}

def @func_7066(%var_7042: Tensor[(11, 12, 8), bool]) -> (Tensor[(6, 12, 3), int8], Tensor[(11, 12, 8), bool]) {
  %281 = @func_991() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %282 = @func_5252() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(1, 12, 8), bool]) */;
  %283 = %282.1;
  %284 = cast(%283, dtype="bool") /* ty=Tensor[(1, 12, 8), bool] */;
  %285 = cast(%var_7042, dtype="bool") /* ty=Tensor[(11, 12, 8), bool] */;
  %286 = %281.1;
  %287 = logical_and(%284, %285) /* ty=Tensor[(11, 12, 8), bool] */;
  (%286, %287)
}

def @func_1859(%var_1833: Tensor[(14, 12, 5), float64]) -> (Tensor[(14, 12, 5), uint64], Tensor[(14, 12, 5), float64]) {
  %288 = cast(%var_1833, dtype="float64") /* ty=Tensor[(14, 12, 5), float64] */;
  %289 = acos(%288) /* ty=Tensor[(14, 12, 5), float64] */;
  %290 = cast(%289, dtype="float64") /* ty=Tensor[(14, 12, 5), float64] */;
  %291 = cos(%290) /* ty=Tensor[(14, 12, 5), float64] */;
  %292 = cast(%var_1833, dtype="uint64") /* ty=Tensor[(14, 12, 5), uint64] */;
  %293 = shape_of(%291, dtype="int32") /* ty=Tensor[(3), int32] */;
  %294 = cast(%291, dtype="uint64") /* ty=Tensor[(14, 12, 5), uint64] */;
  %295 = dyn.reshape(%292, %293, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %296 = cast(%289, dtype="float64") /* ty=Tensor[(14, 12, 5), float64] */;
  %297 = multiply(%294, %295) /* ty=Tensor[(14, 12, 5), uint64] */;
  %298 = exp(%296) /* ty=Tensor[(14, 12, 5), float64] */;
  (%297, %298)
}

def @func_5229() -> (Tensor[(5, 10, 15), int64], Tensor[(5, 10, 15), uint16], Tensor[(2, 120), float64], Tensor[(6, 12, 3), int8]) {
  %299 = cast(meta[relay.Constant][16] /* ty=Tensor[(2, 120), float64] */, dtype="float64") /* ty=Tensor[(2, 120), float64] */;
  %300 = reshape(%299, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %301 = @func_499(%300) /* ty=(Tensor[(5, 10, 15), uint16], Tensor[(5, 16, 3), bool], Tensor[(240), float64], Tensor[(6, 12, 3), float64]) */;
  %302 = @func_732() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %303 = @func_864() /* ty=Tensor[(5, 10, 15), int64] */;
  %304 = %301.0;
  %305 = %302.1;
  (%303, %304, meta[relay.Constant][16] /* ty=Tensor[(2, 120), float64] */, %305)
}

def @func_2704() -> (Tensor[(6, 12, 3), int8], Tensor[(5, 16, 3), bool], Tensor[(8, 30), float64], Tensor[(6, 12, 3), int8], Tensor[(750), float64], Tensor[(5, 10, 15), float64]) {
  %306 = @func_676() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %307 = cast(meta[relay.Constant][17] /* ty=Tensor[(8, 30), float64] */, dtype="float64") /* ty=Tensor[(8, 30), float64] */;
  %308 = reshape(%307, newshape=[5, 16, 3]) /* ty=Tensor[(5, 16, 3), float64] */;
  %309 = @func_768() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %310 = cast(meta[relay.Constant][18] /* ty=Tensor[(750), float32] */, dtype="float64") /* ty=Tensor[(750), float64] */;
  %311 = cast(meta[relay.Constant][18] /* ty=Tensor[(750), float32] */, dtype="float32") /* ty=Tensor[(750), float32] */;
  %312 = reshape(%311, newshape=[5, 10, 15]) /* ty=Tensor[(5, 10, 15), float32] */;
  %313 = @func_217(%312) /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), uint16], Tensor[(5, 10, 15), float64]) */;
  %314 = %313.2;
  %315 = cast(%314, dtype="float64") /* ty=Tensor[(5, 10, 15), float64] */;
  %316 = sin(%315) /* ty=Tensor[(5, 10, 15), float64] */;
  %317 = cast(meta[relay.Constant][19] /* ty=Tensor[(5, 10, 15), float64] */, dtype="float64") /* ty=Tensor[(5, 10, 15), float64] */;
  %318 = shape_of(%316, dtype="int32") /* ty=Tensor[(3), int32] */;
  %319 = cast(%316, dtype="float64") /* ty=Tensor[(5, 10, 15), float64] */;
  %320 = dyn.reshape(%317, %318, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %321 = %306.1;
  %322 = @func_290(%308) /* ty=Tensor[(5, 16, 3), bool] */;
  %323 = %309.0;
  %324 = asin(%310) /* ty=Tensor[(750), float64] */;
  %325 = power(%319, %320) /* ty=Tensor[(5, 10, 15), float64] */;
  (%321, %322, meta[relay.Constant][17] /* ty=Tensor[(8, 30), float64] */, %323, %324, %325)
}

def @func_3461(%var_3451: Tensor[(12, 12, 2), float32], %var_3456: Tensor[(3360), float64]) -> (Tensor[(12, 12, 2), float32], Tensor[(6, 12, 3), int8], Tensor[(240), float64], Tensor[(3360), float64]) {
  %326 = cast(%var_3451, dtype="float32") /* ty=Tensor[(12, 12, 2), float32] */;
  %327 = cast(meta[relay.Constant][20] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %328 = cast(%var_3456, dtype="float64") /* ty=Tensor[(3360), float64] */;
  %329 = reshape(%327, newshape=[240, 1]) /* ty=Tensor[(240, 1), float64] */;
  %330 = reshape(%328, newshape=[240, 14]) /* ty=Tensor[(240, 14), float64] */;
  %331 = @func_1422(%329, %330) /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(240), float64], Tensor[(6, 12, 3), int8], Tensor[(240, 14), float64]) */;
  %332 = sin(%326) /* ty=Tensor[(12, 12, 2), float32] */;
  %333 = %331.0;
  (%332, %333, meta[relay.Constant][20] /* ty=Tensor[(240), float64] */, %var_3456)
}

def @func_1064() -> (Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) {
  %334 = @func_676() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %335 = %334.0;
  %336 = @func_864() /* ty=Tensor[(5, 10, 15), int64] */;
  (%335, %336)
}

def @func_1422(%var_1380: Tensor[(240, 1), float64], %var_1417: Tensor[(240, 14), float64]) -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(240), float64], Tensor[(6, 12, 3), int8], Tensor[(240, 14), float64]) {
  %337 = @func_676() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %338 = @func_1206() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(750), float32]) */;
  %339 = cast(%var_1380, dtype="float64") /* ty=Tensor[(240, 1), float64] */;
  %340 = reshape(%339, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %341 = @func_499(%340) /* ty=(Tensor[(5, 10, 15), uint16], Tensor[(5, 16, 3), bool], Tensor[(240), float64], Tensor[(6, 12, 3), float64]) */;
  %342 = @func_121() /* ty=(Tensor[(6, 12, 3), int8],) */;
  %343 = cast(%var_1380, dtype="float64") /* ty=Tensor[(240, 1), float64] */;
  %344 = rsqrt(%343) /* ty=Tensor[(240, 1), float64] */;
  %345 = cast(%344, dtype="float64") /* ty=Tensor[(240, 1), float64] */;
  %346 = cast(%var_1417, dtype="float64") /* ty=Tensor[(240, 14), float64] */;
  %347 = %337.0;
  %348 = %338.0;
  %349 = %341.2;
  %350 = %342.0;
  %351 = mod(%345, %346) /* ty=Tensor[(240, 14), float64] */;
  (%347, %348, %349, %350, %351)
}

def @func_3840() -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) {
  %352 = @func_1064() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) */;
  %353 = @func_732() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %354 = %352.0;
  %355 = %353.0;
  (%354, %355)
}

def @func_8767(%var_8691: Tensor[(5, 10, 15), bool], %var_8696: Tensor[(5, 10, 15), bool], %var_8704: Tensor[(1, 240), float64], %var_8763: Tensor[(180), float32]) -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), uint16], Tensor[(5, 10, 15), float32], Tensor[(5, 16, 3), bool], Tensor[(1, 240), float64], Tensor[(5, 10, 15), int64], Tensor[(750), float32], Tensor[(6, 12, 3), int8], Tensor[(12, 15, 1), float32], Tensor[(180), float32]) {
  %356 = @func_7536() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(750), int64]) */;
  %357 = @func_1761() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %358 = @func_3797() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(6, 12, 3), int8]) */;
  %359 = %358.0;
  %360 = cast(%var_8691, dtype="uint16") /* ty=Tensor[(5, 10, 15), uint16] */;
  %361 = shape_of(%359, dtype="int32") /* ty=Tensor[(3), int32] */;
  %362 = cast(%359, dtype="uint16") /* ty=Tensor[(5, 10, 15), uint16] */;
  %363 = dyn.reshape(%360, %361, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %364 = cast(%var_8696, dtype="float32") /* ty=Tensor[(5, 10, 15), float32] */;
  %365 = shape_of(%359, dtype="int32") /* ty=Tensor[(3), int32] */;
  %366 = cast(%359, dtype="float32") /* ty=Tensor[(5, 10, 15), float32] */;
  %367 = dyn.reshape(%364, %365, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %368 = cast(%var_8704, dtype="float64") /* ty=Tensor[(1, 240), float64] */;
  %369 = reshape(%368, newshape=[5, 16, 3]) /* ty=Tensor[(5, 16, 3), float64] */;
  %370 = @func_8113() /* ty=(Tensor[(750), float32],) */;
  %371 = @func_732() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %372 = cast(%var_8763, dtype="float32") /* ty=Tensor[(180), float32] */;
  %373 = reshape(%372, newshape=[12, 15, 1]) /* ty=Tensor[(12, 15, 1), float32] */;
  %374 = @func_7615(%373) /* ty=(Tensor[(12, 15, 1), float32],) */;
  %375 = %356.0;
  %376 = %357.0;
  %377 = bitwise_xor(%362, %363) /* ty=Tensor[(5, 10, 15), uint16] */;
  %378 = divide(%366, %367) /* ty=Tensor[(5, 10, 15), float32] */;
  %379 = @func_290(%369) /* ty=Tensor[(5, 16, 3), bool] */;
  %380 = @func_3265() /* ty=Tensor[(5, 10, 15), int64] */;
  %381 = %370.0;
  %382 = %371.0;
  %383 = %374.0;
  (%375, %376, %377, %378, %379, %var_8704, %380, %381, %382, %383, %var_8763)
}

def @func_732() -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) {
  %384 = @func_676() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %385 = @func_121() /* ty=(Tensor[(6, 12, 3), int8],) */;
  %386 = %384.0;
  %387 = %385.0;
  (%386, %387)
}

def @func_9056() -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), float64], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) {
  %388 = @func_1761() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %389 = @func_5252() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(1, 12, 8), bool]) */;
  %390 = @func_8814() /* ty=(Tensor[(5, 10, 15), bool],) */;
  %391 = %390.0;
  %392 = cast(%391, dtype="float64") /* ty=Tensor[(5, 10, 15), float64] */;
  %393 = @func_6194() /* ty=(Tensor[(6, 12, 3), int8],) */;
  %394 = %388.1;
  %395 = %389.0;
  %396 = log10(%392) /* ty=Tensor[(5, 10, 15), float64] */;
  %397 = %393.0;
  %398 = @func_8494() /* ty=Tensor[(6, 12, 3), int8] */;
  (%394, %395, %396, %397, %398)
}

def @func_8895(%var_8834: Tensor[(10, 13, 5), uint64], %var_8835: Tensor[(10, 13, 5), uint64], %var_8874: Tensor[(10, 13, 5), uint64]) -> (Tensor[(10, 13, 5), uint8], Tensor[(6, 12, 3), int8], Tensor[(10, 13, 5), float64], Tensor[(420, 2), float64]) {
  %399 = cast(%var_8835, dtype="uint64") /* ty=Tensor[(10, 13, 5), uint64] */;
  %400 = shape_of(%var_8834, dtype="int32") /* ty=Tensor[(3), int32] */;
  %401 = cast(%var_8834, dtype="uint64") /* ty=Tensor[(10, 13, 5), uint64] */;
  %402 = dyn.reshape(%399, %400, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %403 = add(%401, %402) /* ty=Tensor[(10, 13, 5), uint64] */;
  %404 = cast(%var_8874, dtype="uint8") /* ty=Tensor[(10, 13, 5), uint8] */;
  %405 = shape_of(%403, dtype="int32") /* ty=Tensor[(3), int32] */;
  %406 = cast(%403, dtype="uint8") /* ty=Tensor[(10, 13, 5), uint8] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %408 = @func_7097() /* ty=(Tensor[(6, 12, 3), bool], Tensor[(6, 12, 3), int8]) */;
  %409 = cast(%var_8874, dtype="float64") /* ty=Tensor[(10, 13, 5), float64] */;
  %410 = @func_1877() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), uint64], Tensor[(420, 2), float64]) */;
  %411 = minimum(%406, %407) /* ty=Tensor[(10, 13, 5), uint8] */;
  %412 = %408.1;
  %413 = atanh(%409) /* ty=Tensor[(10, 13, 5), float64] */;
  %414 = %410.2;
  (%411, %412, %413, %414)
}

def @func_3989(%var_3978: Tensor[(1, 7, 5), bool]) -> (Tensor[(16, 7, 5), bool], Tensor[(750), int64]) {
  %415 = cast(%var_3978, dtype="bool") /* ty=Tensor[(1, 7, 5), bool] */;
  %416 = cast(meta[relay.Constant][21] /* ty=Tensor[(16, 7, 5), bool] */, dtype="bool") /* ty=Tensor[(16, 7, 5), bool] */;
  %417 = @func_2536() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(750), int64]) */;
  %418 = logical_and(%415, %416) /* ty=Tensor[(16, 7, 5), bool] */;
  %419 = %417.3;
  (%418, %419)
}

def @func_6832() -> (Tensor[(14, 12, 5), uint64], Tensor[(6, 12, 3), int8]) {
  %420 = @func_1986() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(5, 10, 15), int64], Tensor[(14, 12, 5), uint64], Tensor[(840), float64], Tensor[(5, 10, 15), uint8]) */;
  %421 = @func_1330() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) */;
  %422 = %420.2;
  %423 = %421.0;
  (%422, %423)
}

def @func_9556(%var_9531: Tensor[(6, 12, 3), int8]) -> (Tensor[(6, 12, 3), bool],) {
  %424 = @func_991() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %425 = %424.1;
  %426 = cast(%var_9531, dtype="bool") /* ty=Tensor[(6, 12, 3), bool] */;
  %427 = shape_of(%425, dtype="int32") /* ty=Tensor[(3), int32] */;
  %428 = cast(%425, dtype="bool") /* ty=Tensor[(6, 12, 3), bool] */;
  %429 = dyn.reshape(%426, %427, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %430 = greater_equal(%428, %429) /* ty=Tensor[(6, 12, 3), bool] */;
  (%430,)
}

def @func_5134() -> Tensor[(6, 12, 3), int8] {
  @func_1034() /* ty=Tensor[(6, 12, 3), int8] */
}

def @func_8943() -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(750), float32], Tensor[(6, 12, 3), int8]) {
  %431 = @func_6801() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64], Tensor[(216), int8]) */;
  %432 = cast(meta[relay.Constant][22] /* ty=Tensor[(750), float32] */, dtype="float32") /* ty=Tensor[(750), float32] */;
  %433 = reshape(%432, newshape=[750]) /* ty=Tensor[(750), float32] */;
  %434 = @func_2850(%433) /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(750), uint64], Tensor[(750), float64]) */;
  %435 = %431.0;
  %436 = %434.0;
  %437 = @func_8494() /* ty=Tensor[(6, 12, 3), int8] */;
  (%435, %436, meta[relay.Constant][22] /* ty=Tensor[(750), float32] */, %437)
}

def @func_548() -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) {
  %438 = @func_121() /* ty=(Tensor[(6, 12, 3), int8],) */;
  %439 = @func_121() /* ty=(Tensor[(6, 12, 3), int8],) */;
  %440 = %438.0;
  %441 = %439.0;
  (%440, %441)
}

def @func_6264() -> (Tensor[(7, 11, 12), float64], Tensor[(6, 12, 3), int8]) {
  %442 = @func_3292() /* ty=(Tensor[(1, 12, 8), bool], Tensor[(7, 11, 12), float64], Tensor[(6, 36), int8]) */;
  %443 = @func_4854() /* ty=(Tensor[(6, 12, 3), int8],) */;
  %444 = %442.1;
  %445 = %443.0;
  (%444, %445)
}

def @func_864() -> Tensor[(5, 10, 15), int64] {
  %446 = @func_366() /* ty=(Tensor[(6, 12, 3), float32], Tensor[(5, 10, 15), uint16], Tensor[(750), float32]) */;
  %447 = %446.1;
  %448 = cast(%447, dtype="float32") /* ty=Tensor[(5, 10, 15), float32] */;
  %449 = log(%448) /* ty=Tensor[(5, 10, 15), float32] */;
  %450 = cast(%447, dtype="int64") /* ty=Tensor[(5, 10, 15), int64] */;
  %451 = shape_of(%449, dtype="int32") /* ty=Tensor[(3), int32] */;
  %452 = cast(%449, dtype="int64") /* ty=Tensor[(5, 10, 15), int64] */;
  %453 = dyn.reshape(%450, %451, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  maximum(%452, %453) /* ty=Tensor[(5, 10, 15), int64] */
}

def @func_3006() -> Tensor[(5, 10, 15), uint16] {
  %454 = @func_366() /* ty=(Tensor[(6, 12, 3), float32], Tensor[(5, 10, 15), uint16], Tensor[(750), float32]) */;
  %454.1
}

def @func_4390(%var_4377: Tensor[(3360), float64]) -> (Tensor[(6, 12, 3), int8], Tensor[(240), float64], Tensor[(240), float64], Tensor[(3360), float64]) {
  %455 = @func_2783() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(6, 12, 3), int8]) */;
  %456 = cast(meta[relay.Constant][23] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %457 = cast(%var_4377, dtype="float64") /* ty=Tensor[(3360), float64] */;
  %458 = reshape(%456, newshape=[240, 1]) /* ty=Tensor[(240, 1), float64] */;
  %459 = reshape(%457, newshape=[240, 14]) /* ty=Tensor[(240, 14), float64] */;
  %460 = @func_1422(%458, %459) /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(240), float64], Tensor[(6, 12, 3), int8], Tensor[(240, 14), float64]) */;
  %461 = %455.1;
  %462 = %460.2;
  (%461, %462, meta[relay.Constant][23] /* ty=Tensor[(240), float64] */, %var_4377)
}

def @func_7287() -> (Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), float64], Tensor[(6, 12, 3), int8]) {
  %463 = @func_5271() /* ty=(Tensor[(840), float64], Tensor[(6, 12, 3), int8]) */;
  %464 = @func_2580() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(6, 12, 3), int8]) */;
  %465 = %464.0;
  %466 = cast(%465, dtype="float64") /* ty=Tensor[(5, 10, 15), float64] */;
  %467 = @func_3156() /* ty=(Tensor[(6, 12, 3), int8],) */;
  %468 = %463.1;
  %469 = asinh(%466) /* ty=Tensor[(5, 10, 15), float64] */;
  %470 = %467.0;
  (%468, %469, %470)
}

def @func_6086() -> (Tensor[(14, 12, 5), float64], Tensor[(16, 7, 5), bool], Tensor[(35), bool]) {
  %471 = @func_2916() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), float64], Tensor[(840), float64]) */;
  %472 = cast(meta[relay.Constant][24] /* ty=Tensor[(35), bool] */, dtype="bool") /* ty=Tensor[(35), bool] */;
  %473 = reshape(%472, newshape=[1, 7, 5]) /* ty=Tensor[(1, 7, 5), bool] */;
  %474 = @func_3989(%473) /* ty=(Tensor[(16, 7, 5), bool], Tensor[(750), int64]) */;
  %475 = %471.2;
  %476 = %474.0;
  (%475, %476, meta[relay.Constant][24] /* ty=Tensor[(35), bool] */)
}

def @func_1206() -> (Tensor[(6, 12, 3), int8], Tensor[(750), float32]) {
  %477 = @func_1030() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(16, 11, 5), float64], Tensor[(880), float64]) */;
  %478 = @func_366() /* ty=(Tensor[(6, 12, 3), float32], Tensor[(5, 10, 15), uint16], Tensor[(750), float32]) */;
  %479 = %477.0;
  %480 = %478.2;
  (%479, %480)
}

def @func_4933() -> Tensor[(6, 12, 3), int8] {
  %481 = @func_768() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %481.1
}

def @func_2783() -> (Tensor[(5, 10, 15), bool], Tensor[(6, 12, 3), int8]) {
  %482 = @func_1986() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(5, 10, 15), int64], Tensor[(14, 12, 5), uint64], Tensor[(840), float64], Tensor[(5, 10, 15), uint8]) */;
  %483 = @func_1330() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) */;
  %484 = %482.0;
  %485 = %483.0;
  (%484, %485)
}

def @func_3723(%var_3693: Tensor[(14, 6, 13), float64]) -> (Tensor[(30), float32], Tensor[(30, 1), float32], Tensor[(8, 30), float64], Tensor[(6, 12, 3), int8], Tensor[(14, 6, 13), float32]) {
  %486 = cast(meta[relay.Constant][25] /* ty=Tensor[(30, 1), float32] */, dtype="float32") /* ty=Tensor[(30, 1), float32] */;
  %487 = cast(meta[relay.Constant][26] /* ty=Tensor[(8, 30), float64] */, dtype="float64") /* ty=Tensor[(8, 30), float64] */;
  %488 = reshape(%486, newshape=[30]) /* ty=Tensor[(30), float32] */;
  %489 = reshape(%487, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %490 = @func_1600(%488, %489) /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 7, 6), float32], Tensor[(30), float32], Tensor[(210), float32], Tensor[(5, 10, 15), uint16], Tensor[(240), float64], Tensor[(5, 10, 15), uint16]) */;
  %491 = @func_3549() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), bool]) */;
  %492 = cast(%var_3693, dtype="float64") /* ty=Tensor[(14, 6, 13), float64] */;
  %493 = atan(%492) /* ty=Tensor[(14, 6, 13), float64] */;
  %494 = cast(%493, dtype="float64") /* ty=Tensor[(14, 6, 13), float64] */;
  %495 = tan(%494) /* ty=Tensor[(14, 6, 13), float64] */;
  %496 = cast(%495, dtype="float32") /* ty=Tensor[(14, 6, 13), float32] */;
  %497 = %490.2;
  %498 = %491.0;
  %499 = cos(%496) /* ty=Tensor[(14, 6, 13), float32] */;
  (%497, meta[relay.Constant][25] /* ty=Tensor[(30, 1), float32] */, meta[relay.Constant][26] /* ty=Tensor[(8, 30), float64] */, %498, %499)
}

def @func_4283(%var_4258: Tensor[(750), float32]) -> Tensor[(750), uint16] {
  %500 = @func_1507() /* ty=Tensor[(750), float32] */;
  %501 = cast(%var_4258, dtype="uint16") /* ty=Tensor[(750), uint16] */;
  %502 = shape_of(%500, dtype="int32") /* ty=Tensor[(1), int32] */;
  %503 = cast(%500, dtype="uint16") /* ty=Tensor[(750), uint16] */;
  %504 = dyn.reshape(%501, %502, newshape=[]) /* ty=Tensor[(?), uint16] */;
  subtract(%503, %504) /* ty=Tensor[(750), uint16] */
}

def @func_6326(%var_6288: Tensor[(8, 12, 8), float32], %var_6293: Tensor[(8, 12, 8), float32]) -> (Tensor[(6, 12, 3), int8], Tensor[(8, 12, 8), uint16], Tensor[(8, 12, 8), float32]) {
  %505 = @func_4901() /* ty=(Tensor[(1, 12, 8), float32], Tensor[(5, 10, 15), int64]) */;
  %506 = %505.0;
  %507 = cast(%506, dtype="uint16") /* ty=Tensor[(1, 12, 8), uint16] */;
  %508 = cast(%var_6288, dtype="uint16") /* ty=Tensor[(8, 12, 8), uint16] */;
  %509 = cast(%var_6293, dtype="float32") /* ty=Tensor[(8, 12, 8), float32] */;
  %510 = shape_of(%var_6288, dtype="int32") /* ty=Tensor[(3), int32] */;
  %511 = cast(%var_6288, dtype="float32") /* ty=Tensor[(8, 12, 8), float32] */;
  %512 = dyn.reshape(%509, %510, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %513 = @func_1034() /* ty=Tensor[(6, 12, 3), int8] */;
  %514 = logical_xor(%507, %508) /* ty=Tensor[(8, 12, 8), uint16] */;
  %515 = divide(%511, %512) /* ty=Tensor[(8, 12, 8), float32] */;
  (%513, %514, %515)
}

def @func_6723() -> (Tensor[(840), float64], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) {
  %516 = @func_5271() /* ty=(Tensor[(840), float64], Tensor[(6, 12, 3), int8]) */;
  %517 = @func_2916() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), float64], Tensor[(840), float64]) */;
  %518 = %516.0;
  %519 = %517.1;
  %520 = @func_5134() /* ty=Tensor[(6, 12, 3), int8] */;
  (%518, %519, %520)
}

def @func_6561() -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) {
  %521 = @func_5809() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), uint64]) */;
  %522 = @func_3156() /* ty=(Tensor[(6, 12, 3), int8],) */;
  %523 = @func_1530() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) */;
  %524 = %521.0;
  %525 = %522.0;
  %526 = %523.0;
  (%524, %525, %526)
}

def @func_1600(%var_1535: Tensor[(30), float32], %var_1544: Tensor[(240), float64]) -> (Tensor[(6, 12, 3), int8], Tensor[(5, 7, 6), float32], Tensor[(30), float32], Tensor[(210), float32], Tensor[(5, 10, 15), uint16], Tensor[(240), float64], Tensor[(5, 10, 15), uint16]) {
  %527 = @func_676() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %528 = cast(%var_1535, dtype="float32") /* ty=Tensor[(30), float32] */;
  %529 = cast(meta[relay.Constant][27] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %530 = reshape(%528, newshape=[5, 1, 6]) /* ty=Tensor[(5, 1, 6), float32] */;
  %531 = reshape(%529, newshape=[5, 7, 6]) /* ty=Tensor[(5, 7, 6), float32] */;
  %532 = @func_649(%530, %531) /* ty=(Tensor[(5, 7, 6), float32], Tensor[(5, 7, 6), float32]) */;
  %533 = cast(%var_1544, dtype="float64") /* ty=Tensor[(240), float64] */;
  %534 = reshape(%533, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %535 = @func_499(%534) /* ty=(Tensor[(5, 10, 15), uint16], Tensor[(5, 16, 3), bool], Tensor[(240), float64], Tensor[(6, 12, 3), float64]) */;
  %536 = cast(%var_1544, dtype="float64") /* ty=Tensor[(240), float64] */;
  %537 = reshape(%536, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %538 = @func_499(%537) /* ty=(Tensor[(5, 10, 15), uint16], Tensor[(5, 16, 3), bool], Tensor[(240), float64], Tensor[(6, 12, 3), float64]) */;
  %539 = %527.0;
  %540 = %532.0;
  %541 = %535.0;
  %542 = %538.0;
  (%539, %540, %var_1535, meta[relay.Constant][27] /* ty=Tensor[(210), float32] */, %541, %var_1544, %542)
}

def @func_1330() -> (Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) {
  %543 = @func_1064() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) */;
  %544 = @func_570() /* ty=Tensor[(6, 12, 3), int8] */;
  %545 = %543.1;
  (%544, %545)
}

def @func_7318() -> (Tensor[(6, 12, 3), int8],) {
  %546 = @func_6194() /* ty=(Tensor[(6, 12, 3), int8],) */;
  %547 = %546.0;
  (%547,)
}

def @func_217(%var_175: Tensor[(5, 10, 15), float32]) -> (Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), uint16], Tensor[(5, 10, 15), float64]) {
  %548 = @func_121() /* ty=(Tensor[(6, 12, 3), int8],) */;
  %549 = cast(%var_175, dtype="float32") /* ty=Tensor[(5, 10, 15), float32] */;
  %550 = sigmoid(%549) /* ty=Tensor[(5, 10, 15), float32] */;
  %551 = cast(meta[relay.Constant][28] /* ty=Tensor[(5, 10, 15), float32] */, dtype="uint16") /* ty=Tensor[(5, 10, 15), uint16] */;
  %552 = shape_of(%550, dtype="int32") /* ty=Tensor[(3), int32] */;
  %553 = cast(%550, dtype="uint16") /* ty=Tensor[(5, 10, 15), uint16] */;
  %554 = dyn.reshape(%551, %552, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %555 = cast(meta[relay.Constant][28] /* ty=Tensor[(5, 10, 15), float32] */, dtype="float64") /* ty=Tensor[(5, 10, 15), float64] */;
  %556 = shape_of(%550, dtype="int32") /* ty=Tensor[(3), int32] */;
  %557 = cast(%550, dtype="float64") /* ty=Tensor[(5, 10, 15), float64] */;
  %558 = dyn.reshape(%555, %556, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %559 = %548.0;
  %560 = logical_xor(%553, %554) /* ty=Tensor[(5, 10, 15), uint16] */;
  %561 = floor_mod(%557, %558) /* ty=Tensor[(5, 10, 15), float64] */;
  (%559, %560, %561)
}

def @func_991() -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) {
  %562 = @func_768() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %563 = @func_676() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %564 = %562.0;
  %565 = %563.1;
  (%564, %565)
}

def @func_4973() -> Tensor[(6, 12, 3), int8] {
  %566 = @func_676() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %566.0
}

def @func_5121() -> Tensor[(6, 12, 3), int8] {
  @func_4933() /* ty=Tensor[(6, 12, 3), int8] */
}

def @func_8113() -> (Tensor[(750), float32],) {
  %567 = @func_1507() /* ty=Tensor[(750), float32] */;
  (%567,)
}

def @func_2206() -> (Tensor[(6, 12, 3), int8],) {
  %568 = @func_1064() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) */;
  %569 = %568.0;
  (%569,)
}

def @func_5271() -> (Tensor[(840), float64], Tensor[(6, 12, 3), int8]) {
  %570 = @func_1986() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(5, 10, 15), int64], Tensor[(14, 12, 5), uint64], Tensor[(840), float64], Tensor[(5, 10, 15), uint8]) */;
  %571 = @func_5012() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %572 = %570.3;
  %573 = %571.1;
  (%572, %573)
}

def @func_4152() -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(3, 13, 8), float32]) {
  %574 = @func_768() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %575 = @func_3507() /* ty=(Tensor[(3, 13, 8), int32], Tensor[(3, 13, 8), float32]) */;
  %576 = %574.0;
  %577 = @func_2362() /* ty=Tensor[(6, 12, 3), int8] */;
  %578 = %575.1;
  (%576, %577, %578)
}

def @func_444(%var_427: Tensor[(6, 12, 3), int8]) -> Tensor[(6, 12, 3), bool] {
  %579 = @func_121() /* ty=(Tensor[(6, 12, 3), int8],) */;
  %580 = %579.0;
  %581 = cast(%var_427, dtype="bool") /* ty=Tensor[(6, 12, 3), bool] */;
  %582 = shape_of(%580, dtype="int32") /* ty=Tensor[(3), int32] */;
  %583 = cast(%580, dtype="bool") /* ty=Tensor[(6, 12, 3), bool] */;
  %584 = dyn.reshape(%581, %582, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%583, %584) /* ty=Tensor[(6, 12, 3), bool] */
}

def @func_3265() -> Tensor[(5, 10, 15), int64] {
  %585 = @func_1530() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) */;
  %585.1
}

def @func_4052(%var_4029: Tensor[(3, 13, 8), int32], %var_4038: Tensor[(3, 13, 8), bool]) -> (Tensor[(3, 13, 8), bool], Tensor[(3, 13, 8), bool]) {
  %586 = @func_3507() /* ty=(Tensor[(3, 13, 8), int32], Tensor[(3, 13, 8), float32]) */;
  %587 = %586.0;
  %588 = cast(%var_4029, dtype="bool") /* ty=Tensor[(3, 13, 8), bool] */;
  %589 = shape_of(%587, dtype="int32") /* ty=Tensor[(3), int32] */;
  %590 = cast(%587, dtype="bool") /* ty=Tensor[(3, 13, 8), bool] */;
  %591 = dyn.reshape(%588, %589, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %592 = greater_equal(%590, %591) /* ty=Tensor[(3, 13, 8), bool] */;
  %593 = cast(%var_4038, dtype="bool") /* ty=Tensor[(3, 13, 8), bool] */;
  %594 = shape_of(%592, dtype="int32") /* ty=Tensor[(3), int32] */;
  %595 = cast(%592, dtype="bool") /* ty=Tensor[(3, 13, 8), bool] */;
  %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %597 = cast(%587, dtype="bool") /* ty=Tensor[(3, 13, 8), bool] */;
  %598 = shape_of(%592, dtype="int32") /* ty=Tensor[(3), int32] */;
  %599 = cast(%592, dtype="bool") /* ty=Tensor[(3, 13, 8), bool] */;
  %600 = dyn.reshape(%597, %598, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %601 = less_equal(%595, %596) /* ty=Tensor[(3, 13, 8), bool] */;
  %602 = equal(%599, %600) /* ty=Tensor[(3, 13, 8), bool] */;
  (%601, %602)
}

def @func_1877() -> (Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), uint64], Tensor[(420, 2), float64]) {
  %603 = @func_991() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %604 = cast(meta[relay.Constant][29] /* ty=Tensor[(420, 2), float64] */, dtype="float64") /* ty=Tensor[(420, 2), float64] */;
  %605 = reshape(%604, newshape=[14, 12, 5]) /* ty=Tensor[(14, 12, 5), float64] */;
  %606 = @func_1859(%605) /* ty=(Tensor[(14, 12, 5), uint64], Tensor[(14, 12, 5), float64]) */;
  %607 = %603.0;
  %608 = %606.0;
  (%607, %608, meta[relay.Constant][29] /* ty=Tensor[(420, 2), float64] */)
}

def @func_2290(%var_2276: Tensor[(7, 13, 9), uint64]) -> (Tensor[(7, 13, 9), uint64], Tensor[(1, 12, 8), bool]) {
  %609 = cast(%var_2276, dtype="uint64") /* ty=Tensor[(7, 13, 9), uint64] */;
  %610 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(7, 13, 9), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %611 = cast(meta[relay.Constant][30] /* ty=Tensor[(7, 13, 9), uint64] */, dtype="uint64") /* ty=Tensor[(7, 13, 9), uint64] */;
  %612 = dyn.reshape(%609, %610, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %613 = right_shift(%611, %612) /* ty=Tensor[(7, 13, 9), uint64] */;
  %614 = @func_1477() /* ty=Tensor[(1, 12, 8), bool] */;
  (%613, %614)
}

def @func_7698() -> (Tensor[(6, 12, 3), int8], Tensor[(216), int8]) {
  %615 = @func_6801() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64], Tensor[(216), int8]) */;
  %616 = @func_5121() /* ty=Tensor[(6, 12, 3), int8] */;
  %617 = %615.3;
  (%616, %617)
}

def @func_7427(%var_7370: Tensor[(4, 6, 6), uint16], %var_7371: Tensor[(4, 6, 6), uint16]) -> Tensor[(4, 6, 6), uint16] {
  %618 = cast(%var_7371, dtype="bool") /* ty=Tensor[(4, 6, 6), bool] */;
  %619 = shape_of(%var_7370, dtype="int32") /* ty=Tensor[(3), int32] */;
  %620 = cast(%var_7370, dtype="bool") /* ty=Tensor[(4, 6, 6), bool] */;
  %621 = dyn.reshape(%618, %619, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %622 = greater_equal(%620, %621) /* ty=Tensor[(4, 6, 6), bool] */;
  %623 = cast(%622, dtype="uint16") /* ty=Tensor[(4, 6, 6), uint16] */;
  %624 = shape_of(%var_7370, dtype="int32") /* ty=Tensor[(3), int32] */;
  %625 = cast(%var_7370, dtype="uint16") /* ty=Tensor[(4, 6, 6), uint16] */;
  %626 = dyn.reshape(%623, %624, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  logical_xor(%625, %626) /* ty=Tensor[(4, 6, 6), uint16] */
}

def @func_4653(%var_4627: Tensor[(6, 12, 3), int8]) -> (Tensor[(6, 12, 3), uint32], Tensor[(6, 12, 3), float64]) {
  %627 = @func_3156() /* ty=(Tensor[(6, 12, 3), int8],) */;
  %628 = %627.0;
  %629 = cast(%var_4627, dtype="uint32") /* ty=Tensor[(6, 12, 3), uint32] */;
  %630 = shape_of(%628, dtype="int32") /* ty=Tensor[(3), int32] */;
  %631 = cast(%628, dtype="uint32") /* ty=Tensor[(6, 12, 3), uint32] */;
  %632 = dyn.reshape(%629, %630, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %633 = cast(%628, dtype="float64") /* ty=Tensor[(6, 12, 3), float64] */;
  %634 = maximum(%631, %632) /* ty=Tensor[(6, 12, 3), uint32] */;
  %635 = log2(%633) /* ty=Tensor[(6, 12, 3), float64] */;
  (%634, %635)
}

def @func_768() -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) {
  %636 = @func_548() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %637 = %636.1;
  %638 = @func_570() /* ty=Tensor[(6, 12, 3), int8] */;
  (%637, %638)
}

def @func_4901() -> (Tensor[(1, 12, 8), float32], Tensor[(5, 10, 15), int64]) {
  %639 = @func_1477() /* ty=Tensor[(1, 12, 8), bool] */;
  %640 = cast(%639, dtype="float32") /* ty=Tensor[(1, 12, 8), float32] */;
  %641 = log(%640) /* ty=Tensor[(1, 12, 8), float32] */;
  %642 = @func_3265() /* ty=Tensor[(5, 10, 15), int64] */;
  (%641, %642)
}

def @func_3685() -> (Tensor[(6, 12, 3), int8],) {
  %643 = @func_3224() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %644 = %643.1;
  (%644,)
}

def @func_4193(%var_4175: Tensor[(4, 60), float64], %var_4180: Tensor[(840), float64]) -> (Tensor[(5, 10, 15), bool], Tensor[(5, 16, 3), bool], Tensor[(4, 60), float64], Tensor[(14, 12, 5), float64], Tensor[(840), float64], Tensor[(5, 10, 15), uint8], Tensor[(1200), float64]) {
  %645 = @func_3797() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(6, 12, 3), int8]) */;
  %646 = cast(%var_4175, dtype="float64") /* ty=Tensor[(4, 60), float64] */;
  %647 = reshape(%646, newshape=[5, 16, 3]) /* ty=Tensor[(5, 16, 3), float64] */;
  %648 = cast(%var_4180, dtype="float64") /* ty=Tensor[(840), float64] */;
  %649 = reshape(%648, newshape=[14, 12, 5]) /* ty=Tensor[(14, 12, 5), float64] */;
  %650 = @func_1859(%649) /* ty=(Tensor[(14, 12, 5), uint64], Tensor[(14, 12, 5), float64]) */;
  %651 = %645.0;
  %652 = cast(%651, dtype="int64") /* ty=Tensor[(5, 10, 15), int64] */;
  %653 = reshape(%652, newshape=[5, 10, 15]) /* ty=Tensor[(5, 10, 15), int64] */;
  %654 = cast(%var_4175, dtype="float64") /* ty=Tensor[(4, 60), float64] */;
  %655 = reshape(%654, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %656 = @func_3096(%655) /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(240), float64], Tensor[(1200), float64], Tensor[(6, 12, 3), int8], Tensor[(750), float32], Tensor[(6, 12, 3), int8], Tensor[(750), float32]) */;
  %657 = @func_290(%647) /* ty=Tensor[(5, 16, 3), bool] */;
  %658 = %650.1;
  %659 = @func_2027(%653) /* ty=Tensor[(5, 10, 15), uint8] */;
  %660 = %656.4;
  (%651, %657, %var_4175, %658, %var_4180, %659, %660)
}

def @func_7536() -> (Tensor[(6, 12, 3), int8], Tensor[(750), int64]) {
  %661 = @func_6915() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %662 = @func_4321() /* ty=(Tensor[(750), int64],) */;
  %663 = %661.1;
  %664 = %662.0;
  (%663, %664)
}

def @func_290(%var_281: Tensor[(5, 16, 3), float64]) -> Tensor[(5, 16, 3), bool] {
  %665 = cast(%var_281, dtype="bool") /* ty=Tensor[(5, 16, 3), bool] */;
  %666 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(5, 16, 3), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %667 = cast(meta[relay.Constant][31] /* ty=Tensor[(5, 16, 3), float64] */, dtype="bool") /* ty=Tensor[(5, 16, 3), bool] */;
  %668 = dyn.reshape(%665, %666, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%667, %668) /* ty=Tensor[(5, 16, 3), bool] */
}

def @func_5742(%var_5702: Tensor[(14, 12, 8), bool]) -> (Tensor[(14, 12, 8), bool], Tensor[(240), float64], Tensor[(240), float64], Tensor[(3360), float64], Tensor[(840), float64]) {
  %669 = @func_4587() /* ty=(Tensor[(1, 12, 8), bool], Tensor[(6, 12, 3), int8]) */;
  %670 = %669.0;
  %671 = cast(%670, dtype="bool") /* ty=Tensor[(1, 12, 8), bool] */;
  %672 = cast(%var_5702, dtype="bool") /* ty=Tensor[(14, 12, 8), bool] */;
  %673 = cast(meta[relay.Constant][32] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %674 = cast(meta[relay.Constant][33] /* ty=Tensor[(3360), float64] */, dtype="float64") /* ty=Tensor[(3360), float64] */;
  %675 = reshape(%673, newshape=[240, 1]) /* ty=Tensor[(240, 1), float64] */;
  %676 = reshape(%674, newshape=[240, 14]) /* ty=Tensor[(240, 14), float64] */;
  %677 = @func_1422(%675, %676) /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(240), float64], Tensor[(6, 12, 3), int8], Tensor[(240, 14), float64]) */;
  %678 = @func_1986() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(5, 10, 15), int64], Tensor[(14, 12, 5), uint64], Tensor[(840), float64], Tensor[(5, 10, 15), uint8]) */;
  %679 = less_equal(%671, %672) /* ty=Tensor[(14, 12, 8), bool] */;
  %680 = %677.2;
  %681 = %678.3;
  (%679, %680, meta[relay.Constant][32] /* ty=Tensor[(240), float64] */, meta[relay.Constant][33] /* ty=Tensor[(3360), float64] */, %681)
}

def @func_8806() -> Tensor[(12, 13, 10), float32] {
  %682 = cast(meta[relay.Constant][34] /* ty=Tensor[(12, 13, 10), float32] */, dtype="float32") /* ty=Tensor[(12, 13, 10), float32] */;
  exp(%682) /* ty=Tensor[(12, 13, 10), float32] */
}

def @func_5012() -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) {
  %683 = @func_3797() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(6, 12, 3), int8]) */;
  %684 = %683.1;
  %685 = @func_4680() /* ty=Tensor[(6, 12, 3), int8] */;
  (%684, %685)
}

def @func_934(%var_931: Tensor[(16, 11, 5), float64]) -> Tensor[(16, 11, 5), float64] {
  %686 = cast(%var_931, dtype="float64") /* ty=Tensor[(16, 11, 5), float64] */;
  sinh(%686) /* ty=Tensor[(16, 11, 5), float64] */
}

def @func_2362() -> Tensor[(6, 12, 3), int8] {
  %687 = @func_732() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %687.1
}

def @func_7890() -> (Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64], Tensor[(750), int64]) {
  %688 = @func_991() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %689 = @func_7536() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(750), int64]) */;
  %690 = %688.0;
  %691 = @func_864() /* ty=Tensor[(5, 10, 15), int64] */;
  %692 = %689.1;
  (%690, %691, %692)
}

def @func_4854() -> (Tensor[(6, 12, 3), int8],) {
  %693 = @func_676() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %694 = %693.1;
  (%694,)
}

def @func_2536() -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(750), int64]) {
  %695 = @func_1030() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(16, 11, 5), float64], Tensor[(880), float64]) */;
  %696 = @func_1530() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) */;
  %697 = cast(meta[relay.Constant][35] /* ty=Tensor[(750), int64] */, dtype="int64") /* ty=Tensor[(750), int64] */;
  %698 = reshape(%697, newshape=[5, 10, 15]) /* ty=Tensor[(5, 10, 15), int64] */;
  %699 = @func_2131(%698) /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), bool], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(880), float64]) */;
  %700 = %695.0;
  %701 = %696.0;
  %702 = %699.2;
  (%700, %701, %702, meta[relay.Constant][35] /* ty=Tensor[(750), int64] */)
}

def @func_3588(%var_3561: Tensor[(16, 3, 10), bool], %var_3576: Tensor[(240), float64], %var_3579: Tensor[(50, 15), int64]) -> (Tensor[(16, 3, 10), bool], Tensor[(5, 16, 3), bool], Tensor[(240), float64], Tensor[(5, 10, 15), uint8], Tensor[(50, 15), int64]) {
  %703 = cast(meta[relay.Constant][36] /* ty=Tensor[(16, 3, 10), bool] */, dtype="bool") /* ty=Tensor[(16, 3, 10), bool] */;
  %704 = shape_of(%var_3561, dtype="int32") /* ty=Tensor[(3), int32] */;
  %705 = cast(%var_3561, dtype="bool") /* ty=Tensor[(16, 3, 10), bool] */;
  %706 = dyn.reshape(%703, %704, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %707 = cast(%var_3576, dtype="float64") /* ty=Tensor[(240), float64] */;
  %708 = reshape(%707, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %709 = @func_499(%708) /* ty=(Tensor[(5, 10, 15), uint16], Tensor[(5, 16, 3), bool], Tensor[(240), float64], Tensor[(6, 12, 3), float64]) */;
  %710 = cast(%var_3579, dtype="int64") /* ty=Tensor[(50, 15), int64] */;
  %711 = reshape(%710, newshape=[5, 10, 15]) /* ty=Tensor[(5, 10, 15), int64] */;
  %712 = logical_or(%705, %706) /* ty=Tensor[(16, 3, 10), bool] */;
  %713 = %709.1;
  %714 = @func_2027(%711) /* ty=Tensor[(5, 10, 15), uint8] */;
  (%712, %713, %var_3576, %714, %var_3579)
}

def @func_6604(%var_6576: Tensor[(8, 4, 2), float64]) -> (Tensor[(5, 10, 15), bool], Tensor[(8, 4, 2), float64], Tensor[(5, 7, 6), float32], Tensor[(30), float32], Tensor[(210), float32]) {
  %715 = @func_2580() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(6, 12, 3), int8]) */;
  %716 = cast(%var_6576, dtype="float64") /* ty=Tensor[(8, 4, 2), float64] */;
  %717 = sigmoid(%716) /* ty=Tensor[(8, 4, 2), float64] */;
  %718 = cast(%717, dtype="float64") /* ty=Tensor[(8, 4, 2), float64] */;
  %719 = cast(meta[relay.Constant][37] /* ty=Tensor[(30), float32] */, dtype="float32") /* ty=Tensor[(30), float32] */;
  %720 = cast(meta[relay.Constant][38] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %721 = reshape(%719, newshape=[5, 1, 6]) /* ty=Tensor[(5, 1, 6), float32] */;
  %722 = reshape(%720, newshape=[5, 7, 6]) /* ty=Tensor[(5, 7, 6), float32] */;
  %723 = @func_649(%721, %722) /* ty=(Tensor[(5, 7, 6), float32], Tensor[(5, 7, 6), float32]) */;
  %724 = %715.0;
  %725 = sqrt(%718) /* ty=Tensor[(8, 4, 2), float64] */;
  %726 = %723.1;
  (%724, %725, %726, meta[relay.Constant][37] /* ty=Tensor[(30), float32] */, meta[relay.Constant][38] /* ty=Tensor[(210), float32] */)
}

def @func_7238(%var_7165: Tensor[(819), uint64], %var_7222: Tensor[(240), float64]) -> (Tensor[(6, 12, 3), int8], Tensor[(1, 12, 8), bool], Tensor[(819), uint64], Tensor[(5, 10, 15), int64], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64], Tensor[(11, 14), float64], Tensor[(6, 12, 3), int8], Tensor[(1200), float64], Tensor[(240), float64], Tensor[(840), float64], Tensor[(7, 11, 12), float64], Tensor[(5, 10, 15), uint8]) {
  %727 = @func_2916() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), float64], Tensor[(840), float64]) */;
  %728 = cast(%var_7165, dtype="uint64") /* ty=Tensor[(819), uint64] */;
  %729 = reshape(%728, newshape=[7, 13, 9]) /* ty=Tensor[(7, 13, 9), uint64] */;
  %730 = @func_2290(%729) /* ty=(Tensor[(7, 13, 9), uint64], Tensor[(1, 12, 8), bool]) */;
  %731 = @func_5457() /* ty=(Tensor[(5, 10, 15), int64], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), bool], Tensor[(6, 12, 3), int8]) */;
  %732 = @func_1330() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) */;
  %733 = cast(meta[relay.Constant][39] /* ty=Tensor[(11, 14), float64] */, dtype="float64") /* ty=Tensor[(11, 14), float64] */;
  %734 = reshape(%733, newshape=[11, 2, 7]) /* ty=Tensor[(11, 2, 7), float64] */;
  %735 = @func_6950(%734) /* ty=(Tensor[(11, 2, 7), float64], Tensor[(5, 10, 15), int64], Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), float64], Tensor[(840), float64]) */;
  %736 = @func_2206() /* ty=(Tensor[(6, 12, 3), int8],) */;
  %737 = cast(%var_7222, dtype="float64") /* ty=Tensor[(240), float64] */;
  %738 = cast(meta[relay.Constant][40] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %739 = reshape(%737, newshape=[4, 60]) /* ty=Tensor[(4, 60), float64] */;
  %740 = reshape(%738, newshape=[840]) /* ty=Tensor[(840), float64] */;
  %741 = @func_4193(%739, %740) /* ty=(Tensor[(5, 10, 15), bool], Tensor[(5, 16, 3), bool], Tensor[(4, 60), float64], Tensor[(14, 12, 5), float64], Tensor[(840), float64], Tensor[(5, 10, 15), uint8], Tensor[(1200), float64]) */;
  %742 = @func_3292() /* ty=(Tensor[(1, 12, 8), bool], Tensor[(7, 11, 12), float64], Tensor[(6, 36), int8]) */;
  %743 = %735.1;
  %744 = cast(%743, dtype="int64") /* ty=Tensor[(5, 10, 15), int64] */;
  %745 = reshape(%744, newshape=[5, 10, 15]) /* ty=Tensor[(5, 10, 15), int64] */;
  %746 = %727.0;
  %747 = %730.1;
  %748 = %731.0;
  %749 = @func_4235() /* ty=Tensor[(6, 12, 3), int8] */;
  %750 = %732.0;
  %751 = %736.0;
  %752 = %741.6;
  %753 = %742.1;
  %754 = @func_2027(%745) /* ty=Tensor[(5, 10, 15), uint8] */;
  (%746, %747, %var_7165, %748, %749, %750, %743, meta[relay.Constant][39] /* ty=Tensor[(11, 14), float64] */, %751, %752, %var_7222, meta[relay.Constant][40] /* ty=Tensor[(840), float64] */, %753, %754)
}

def @func_8415() -> Tensor[(1, 12, 8), bool] {
  %755 = @func_3292() /* ty=(Tensor[(1, 12, 8), bool], Tensor[(7, 11, 12), float64], Tensor[(6, 36), int8]) */;
  %755.0
}

def @func_676() -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) {
  %756 = @func_548() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %757 = @func_121() /* ty=(Tensor[(6, 12, 3), int8],) */;
  %758 = %756.1;
  %759 = %757.0;
  (%758, %759)
}

def @func_4235() -> Tensor[(6, 12, 3), int8] {
  %760 = @func_768() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %760.0
}

def @func_3549() -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), bool]) {
  %761 = @func_1206() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(750), float32]) */;
  %762 = %761.0;
  %763 = cast(%762, dtype="int8") /* ty=Tensor[(6, 12, 3), int8] */;
  %764 = reshape(%763, newshape=[6, 12, 3]) /* ty=Tensor[(6, 12, 3), int8] */;
  %765 = @func_444(%764) /* ty=Tensor[(6, 12, 3), bool] */;
  (%762, %765)
}

def @func_2245(%var_2225: Tensor[(15, 11, 9), float32], %var_2231: Tensor[(15, 11, 9), float32]) -> (Tensor[(15, 11, 9), float32], Tensor[(750), float32], Tensor[(15, 11, 9), bool], Tensor[(6, 12, 3), int8]) {
  %766 = cast(%var_2225, dtype="float32") /* ty=Tensor[(15, 11, 9), float32] */;
  %767 = cast(%var_2231, dtype="bool") /* ty=Tensor[(15, 11, 9), bool] */;
  %768 = shape_of(%var_2225, dtype="int32") /* ty=Tensor[(3), int32] */;
  %769 = cast(%var_2225, dtype="bool") /* ty=Tensor[(15, 11, 9), bool] */;
  %770 = dyn.reshape(%767, %768, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %771 = @func_1530() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) */;
  %772 = rsqrt(%766) /* ty=Tensor[(15, 11, 9), float32] */;
  %773 = @func_1507() /* ty=Tensor[(750), float32] */;
  %774 = logical_or(%769, %770) /* ty=Tensor[(15, 11, 9), bool] */;
  %775 = %771.0;
  (%772, %773, %774, %775)
}

def @func_7615(%var_7602: Tensor[(12, 15, 1), float32]) -> (Tensor[(12, 15, 1), float32],) {
  %776 = cast(%var_7602, dtype="float32") /* ty=Tensor[(12, 15, 1), float32] */;
  %777 = rsqrt(%776) /* ty=Tensor[(12, 15, 1), float32] */;
  (%777,)
}

def @func_499(%var_469: Tensor[(240), float64]) -> (Tensor[(5, 10, 15), uint16], Tensor[(5, 16, 3), bool], Tensor[(240), float64], Tensor[(6, 12, 3), float64]) {
  %778 = @func_366() /* ty=(Tensor[(6, 12, 3), float32], Tensor[(5, 10, 15), uint16], Tensor[(750), float32]) */;
  %779 = cast(%var_469, dtype="float64") /* ty=Tensor[(240), float64] */;
  %780 = reshape(%779, newshape=[5, 16, 3]) /* ty=Tensor[(5, 16, 3), float64] */;
  %781 = @func_121() /* ty=(Tensor[(6, 12, 3), int8],) */;
  %782 = %781.0;
  %783 = cast(%782, dtype="float64") /* ty=Tensor[(6, 12, 3), float64] */;
  %784 = %778.1;
  %785 = @func_290(%780) /* ty=Tensor[(5, 16, 3), bool] */;
  %786 = log(%783) /* ty=Tensor[(6, 12, 3), float64] */;
  (%784, %785, %var_469, %786)
}

def @func_5085(%var_5034: Tensor[(2, 3, 8), float32], %var_5054: Tensor[(288), float32], %var_5055: Tensor[(3360), float64]) -> (Tensor[(6, 12, 3), int8], Tensor[(750), float32], Tensor[(240), float64], Tensor[(288), float32], Tensor[(3360), float64], Tensor[(5, 10, 15), uint16], Tensor[(2, 3, 8), bool]) {
  %787 = @func_732() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %788 = cast(%var_5054, dtype="float32") /* ty=Tensor[(288), float32] */;
  %789 = cast(%var_5055, dtype="float64") /* ty=Tensor[(3360), float64] */;
  %790 = reshape(%788, newshape=[12, 12, 2]) /* ty=Tensor[(12, 12, 2), float32] */;
  %791 = reshape(%789, newshape=[3360]) /* ty=Tensor[(3360), float64] */;
  %792 = @func_3461(%790, %791) /* ty=(Tensor[(12, 12, 2), float32], Tensor[(6, 12, 3), int8], Tensor[(240), float64], Tensor[(3360), float64]) */;
  %793 = cast(%var_5034, dtype="float32") /* ty=Tensor[(2, 3, 8), float32] */;
  %794 = sin(%793) /* ty=Tensor[(2, 3, 8), float32] */;
  %795 = cast(%var_5034, dtype="bool") /* ty=Tensor[(2, 3, 8), bool] */;
  %796 = shape_of(%794, dtype="int32") /* ty=Tensor[(3), int32] */;
  %797 = cast(%794, dtype="bool") /* ty=Tensor[(2, 3, 8), bool] */;
  %798 = dyn.reshape(%795, %796, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %799 = %787.0;
  %800 = @func_1507() /* ty=Tensor[(750), float32] */;
  %801 = %792.2;
  %802 = @func_3006() /* ty=Tensor[(5, 10, 15), uint16] */;
  %803 = greater_equal(%797, %798) /* ty=Tensor[(2, 3, 8), bool] */;
  (%799, %800, %801, %var_5054, %var_5055, %802, %803)
}

def @func_6871(%var_6869: Tensor[(3360), float64]) -> (Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), float64], Tensor[(12, 12, 2), float32], Tensor[(288), float32], Tensor[(3360), float64]) {
  %804 = @func_5180() /* ty=(Tensor[(6, 12, 3), int8],) */;
  %805 = @func_6086() /* ty=(Tensor[(14, 12, 5), float64], Tensor[(16, 7, 5), bool], Tensor[(35), bool]) */;
  %806 = cast(meta[relay.Constant][41] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %807 = cast(%var_6869, dtype="float64") /* ty=Tensor[(3360), float64] */;
  %808 = reshape(%806, newshape=[12, 12, 2]) /* ty=Tensor[(12, 12, 2), float32] */;
  %809 = reshape(%807, newshape=[3360]) /* ty=Tensor[(3360), float64] */;
  %810 = @func_3461(%808, %809) /* ty=(Tensor[(12, 12, 2), float32], Tensor[(6, 12, 3), int8], Tensor[(240), float64], Tensor[(3360), float64]) */;
  %811 = %804.0;
  %812 = %805.0;
  %813 = %810.0;
  (%811, %812, %813, meta[relay.Constant][41] /* ty=Tensor[(288), float32] */, %var_6869)
}

def @func_7798() -> (Tensor[(6, 12, 3), int8],) {
  %814 = @func_570() /* ty=Tensor[(6, 12, 3), int8] */;
  (%814,)
}

def @func_9451() -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) {
  %815 = @func_676() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %816 = @func_2704() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 16, 3), bool], Tensor[(8, 30), float64], Tensor[(6, 12, 3), int8], Tensor[(750), float64], Tensor[(5, 10, 15), float64]) */;
  %817 = %815.0;
  %818 = %816.0;
  (%817, %818)
}

def @func_1986() -> (Tensor[(5, 10, 15), bool], Tensor[(5, 10, 15), int64], Tensor[(14, 12, 5), uint64], Tensor[(840), float64], Tensor[(5, 10, 15), uint8]) {
  %819 = @func_1330() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) */;
  %820 = %819.1;
  %821 = cast(meta[relay.Constant][42] /* ty=Tensor[(5, 10, 15), int64] */, dtype="bool") /* ty=Tensor[(5, 10, 15), bool] */;
  %822 = shape_of(%820, dtype="int32") /* ty=Tensor[(3), int32] */;
  %823 = cast(%820, dtype="bool") /* ty=Tensor[(5, 10, 15), bool] */;
  %824 = dyn.reshape(%821, %822, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %825 = @func_1064() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) */;
  %826 = cast(meta[relay.Constant][43] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %827 = reshape(%826, newshape=[14, 12, 5]) /* ty=Tensor[(14, 12, 5), float64] */;
  %828 = @func_1859(%827) /* ty=(Tensor[(14, 12, 5), uint64], Tensor[(14, 12, 5), float64]) */;
  %829 = cast(meta[relay.Constant][42] /* ty=Tensor[(5, 10, 15), int64] */, dtype="uint32") /* ty=Tensor[(5, 10, 15), uint32] */;
  %830 = shape_of(%820, dtype="int32") /* ty=Tensor[(3), int32] */;
  %831 = cast(%820, dtype="uint32") /* ty=Tensor[(5, 10, 15), uint32] */;
  %832 = dyn.reshape(%829, %830, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %833 = minimum(%831, %832) /* ty=Tensor[(5, 10, 15), uint32] */;
  %834 = cast(meta[relay.Constant][42] /* ty=Tensor[(5, 10, 15), int64] */, dtype="uint8") /* ty=Tensor[(5, 10, 15), uint8] */;
  %835 = shape_of(%833, dtype="int32") /* ty=Tensor[(3), int32] */;
  %836 = cast(%833, dtype="uint8") /* ty=Tensor[(5, 10, 15), uint8] */;
  %837 = dyn.reshape(%834, %835, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %838 = logical_or(%823, %824) /* ty=Tensor[(5, 10, 15), bool] */;
  %839 = %825.1;
  %840 = %828.0;
  %841 = multiply(%836, %837) /* ty=Tensor[(5, 10, 15), uint8] */;
  (%838, %839, %840, meta[relay.Constant][43] /* ty=Tensor[(840), float64] */, %841)
}

def @func_6042(%var_6015: Tensor[(14, 7, 10), float32], %var_6036: Tensor[(30), float32], %var_6037: Tensor[(210), float32]) -> (Tensor[(14, 7, 10), float32], Tensor[(14, 7, 10), float32], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(5, 7, 6), float32], Tensor[(30), float32], Tensor[(210), float32], Tensor[(6, 12, 3), int8]) {
  %842 = cast(%var_6015, dtype="float32") /* ty=Tensor[(14, 7, 10), float32] */;
  %843 = cast(%var_6015, dtype="float32") /* ty=Tensor[(14, 7, 10), float32] */;
  %844 = @func_3156() /* ty=(Tensor[(6, 12, 3), int8],) */;
  %845 = @func_1761() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %846 = cast(%var_6036, dtype="float32") /* ty=Tensor[(30), float32] */;
  %847 = cast(%var_6037, dtype="float32") /* ty=Tensor[(210), float32] */;
  %848 = reshape(%846, newshape=[5, 1, 6]) /* ty=Tensor[(5, 1, 6), float32] */;
  %849 = reshape(%847, newshape=[5, 7, 6]) /* ty=Tensor[(5, 7, 6), float32] */;
  %850 = @func_649(%848, %849) /* ty=(Tensor[(5, 7, 6), float32], Tensor[(5, 7, 6), float32]) */;
  %851 = @func_1761() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %852 = exp(%842) /* ty=Tensor[(14, 7, 10), float32] */;
  %853 = asin(%843) /* ty=Tensor[(14, 7, 10), float32] */;
  %854 = %844.0;
  %855 = %845.0;
  %856 = %850.0;
  %857 = %851.1;
  (%852, %853, %854, %855, %856, %var_6036, %var_6037, %857)
}

def @func_3096(%var_3023: Tensor[(240), float64]) -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(240), float64], Tensor[(1200), float64], Tensor[(6, 12, 3), int8], Tensor[(750), float32], Tensor[(6, 12, 3), int8], Tensor[(750), float32]) {
  %858 = @func_2916() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), float64], Tensor[(840), float64]) */;
  %859 = @func_2206() /* ty=(Tensor[(6, 12, 3), int8],) */;
  %860 = cast(%var_3023, dtype="float64") /* ty=Tensor[(240), float64] */;
  %861 = cast(meta[relay.Constant][44] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %862 = reshape(%860, newshape=[1, 16, 15]) /* ty=Tensor[(1, 16, 15), float64] */;
  %863 = reshape(%861, newshape=[5, 16, 15]) /* ty=Tensor[(5, 16, 15), float64] */;
  %864 = @func_1281(%862, %863) /* ty=(Tensor[(5, 16, 15), float64], Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64], Tensor[(750), float64]) */;
  %865 = @func_548() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %866 = @func_1206() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(750), float32]) */;
  %867 = @func_2783() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(6, 12, 3), int8]) */;
  %868 = %858.0;
  %869 = %859.0;
  %870 = %864.1;
  %871 = %865.0;
  %872 = %866.1;
  %873 = %867.1;
  %874 = @func_1507() /* ty=Tensor[(750), float32] */;
  (%868, %869, %870, %var_3023, meta[relay.Constant][44] /* ty=Tensor[(1200), float64] */, %871, %872, %873, %874)
}

def @func_8061(%var_8013: int64, %var_8014: Tensor[(1, 13, 9), int64]) -> (Tensor[(7, 11, 12), float64], Tensor[(1, 13, 9), float32]) {
  %875 = @func_3292() /* ty=(Tensor[(1, 12, 8), bool], Tensor[(7, 11, 12), float64], Tensor[(6, 36), int8]) */;
  %876 = cast(%var_8013, dtype="bool") /* ty=bool */;
  %877 = cast(%var_8014, dtype="bool") /* ty=Tensor[(1, 13, 9), bool] */;
  %878 = less(%876, %877) /* ty=Tensor[(1, 13, 9), bool] */;
  %879 = cast(%878, dtype="float32") /* ty=Tensor[(1, 13, 9), float32] */;
  %880 = cast(%var_8013, dtype="float32") /* ty=float32 */;
  %881 = %875.1;
  %882 = power(%879, %880) /* ty=Tensor[(1, 13, 9), float32] */;
  (%881, %882)
}

def @func_5180() -> (Tensor[(6, 12, 3), int8],) {
  %883 = @func_991() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %884 = %883.1;
  (%884,)
}

def @func_8447() -> (Tensor[(3, 13, 8), float32],) {
  %885 = @func_3507() /* ty=(Tensor[(3, 13, 8), int32], Tensor[(3, 13, 8), float32]) */;
  %886 = %885.1;
  (%886,)
}

def @func_1741(%var_1717: Tensor[(13, 16, 7), float32], %var_1739: Tensor[(880), float64]) -> (Tensor[(13, 16, 7), float32], Tensor[(16, 11, 5), float64], Tensor[(880), float64]) {
  %887 = cast(%var_1717, dtype="float32") /* ty=Tensor[(13, 16, 7), float32] */;
  %888 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(13, 16, 7), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %889 = cast(meta[relay.Constant][45] /* ty=Tensor[(13, 16, 7), float32] */, dtype="float32") /* ty=Tensor[(13, 16, 7), float32] */;
  %890 = dyn.reshape(%887, %888, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %891 = cast(%var_1739, dtype="float64") /* ty=Tensor[(880), float64] */;
  %892 = reshape(%891, newshape=[16, 11, 5]) /* ty=Tensor[(16, 11, 5), float64] */;
  %893 = floor_divide(%889, %890) /* ty=Tensor[(13, 16, 7), float32] */;
  %894 = @func_934(%892) /* ty=Tensor[(16, 11, 5), float64] */;
  (%893, %894, %var_1739)
}

def @func_6243(%var_6239: Tensor[(5, 2, 4), float32]) -> Tensor[(5, 2, 4), float32] {
  %895 = cast(%var_6239, dtype="float32") /* ty=Tensor[(5, 2, 4), float32] */;
  asinh(%895) /* ty=Tensor[(5, 2, 4), float32] */
}

def @func_6194() -> (Tensor[(6, 12, 3), int8],) {
  %896 = @func_5487() /* ty=(Tensor[(6, 12, 3), int8],) */;
  %897 = %896.0;
  (%897,)
}

def @func_6915() -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) {
  %898 = @func_1761() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %899 = @func_2206() /* ty=(Tensor[(6, 12, 3), int8],) */;
  %900 = %898.0;
  %901 = %899.0;
  (%900, %901)
}

def @func_3507() -> (Tensor[(3, 13, 8), int32], Tensor[(3, 13, 8), float32]) {
  %902 = cast(meta[relay.Constant][47] /* ty=Tensor[(3, 13, 8), uint32] */, dtype="uint32") /* ty=Tensor[(3, 13, 8), uint32] */;
  %903 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(3, 13, 8), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %904 = cast(meta[relay.Constant][46] /* ty=Tensor[(3, 13, 8), uint32] */, dtype="uint32") /* ty=Tensor[(3, 13, 8), uint32] */;
  %905 = dyn.reshape(%902, %903, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %906 = bitwise_xor(%904, %905) /* ty=Tensor[(3, 13, 8), uint32] */;
  %907 = cast(%906, dtype="int32") /* ty=Tensor[(3, 13, 8), int32] */;
  %908 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(3, 13, 8), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %909 = cast(meta[relay.Constant][46] /* ty=Tensor[(3, 13, 8), uint32] */, dtype="int32") /* ty=Tensor[(3, 13, 8), int32] */;
  %910 = dyn.reshape(%907, %908, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %911 = cast(meta[relay.Constant][46] /* ty=Tensor[(3, 13, 8), uint32] */, dtype="float32") /* ty=Tensor[(3, 13, 8), float32] */;
  %912 = add(%909, %910) /* ty=Tensor[(3, 13, 8), int32] */;
  %913 = acosh(%911) /* ty=Tensor[(3, 13, 8), float32] */;
  (%912, %913)
}

def @func_6801() -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64], Tensor[(216), int8]) {
  %914 = @func_1206() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(750), float32]) */;
  %915 = @func_991() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %916 = %914.0;
  %917 = cast(%916, dtype="int8") /* ty=Tensor[(6, 12, 3), int8] */;
  %918 = reshape(%917, newshape=[216]) /* ty=Tensor[(216), int8] */;
  %919 = @func_1177(%918) /* ty=(Tensor[(7, 11, 12), uint32], Tensor[(6, 12, 3), bool], Tensor[(216), int8], Tensor[(7, 11, 12), float64]) */;
  %920 = %915.1;
  %921 = @func_3265() /* ty=Tensor[(5, 10, 15), int64] */;
  %922 = %919.2;
  (%916, %920, %921, %922)
}

def @func_4071(%var_4063: Tensor[(30), float32], %var_4064: Tensor[(210), float32]) -> (Tensor[(6, 12, 3), int8], Tensor[(5, 7, 6), float32], Tensor[(30), float32], Tensor[(210), float32]) {
  %923 = @func_2580() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(6, 12, 3), int8]) */;
  %924 = cast(%var_4063, dtype="float32") /* ty=Tensor[(30), float32] */;
  %925 = cast(%var_4064, dtype="float32") /* ty=Tensor[(210), float32] */;
  %926 = reshape(%924, newshape=[5, 1, 6]) /* ty=Tensor[(5, 1, 6), float32] */;
  %927 = reshape(%925, newshape=[5, 7, 6]) /* ty=Tensor[(5, 7, 6), float32] */;
  %928 = @func_649(%926, %927) /* ty=(Tensor[(5, 7, 6), float32], Tensor[(5, 7, 6), float32]) */;
  %929 = %923.1;
  %930 = %928.1;
  (%929, %930, %var_4063, %var_4064)
}

def @func_3156() -> (Tensor[(6, 12, 3), int8],) {
  %931 = @func_570() /* ty=Tensor[(6, 12, 3), int8] */;
  (%931,)
}

def @func_8005() -> (Tensor[(6, 12, 3), int8], Tensor[(750), float32]) {
  %932 = @func_6488() /* ty=(Tensor[(6, 12, 3), int8],) */;
  %933 = @func_366() /* ty=(Tensor[(6, 12, 3), float32], Tensor[(5, 10, 15), uint16], Tensor[(750), float32]) */;
  %934 = %932.0;
  %935 = %933.2;
  (%934, %935)
}

def @func_9363() -> (Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), float64], Tensor[(240), float64], Tensor[(240), float64], Tensor[(750), int64]) {
  %936 = @func_6723() /* ty=(Tensor[(840), float64], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %937 = @func_366() /* ty=(Tensor[(6, 12, 3), float32], Tensor[(5, 10, 15), uint16], Tensor[(750), float32]) */;
  %938 = %937.1;
  %939 = cast(%938, dtype="float64") /* ty=Tensor[(5, 10, 15), float64] */;
  %940 = cast(meta[relay.Constant][48] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %941 = reshape(%940, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %942 = @func_3096(%941) /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(240), float64], Tensor[(1200), float64], Tensor[(6, 12, 3), int8], Tensor[(750), float32], Tensor[(6, 12, 3), int8], Tensor[(750), float32]) */;
  %943 = @func_2536() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(750), int64]) */;
  %944 = %936.1;
  %945 = tan(%939) /* ty=Tensor[(5, 10, 15), float64] */;
  %946 = %942.3;
  %947 = %943.3;
  (%944, %945, %946, meta[relay.Constant][48] /* ty=Tensor[(240), float64] */, %947)
}

def @func_1761() -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) {
  %948 = @func_1330() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) */;
  %949 = @func_768() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %950 = %948.0;
  %951 = %949.1;
  (%950, %951)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_866() -> Tensor[(5, 10, 15), int64] {
  @func_864() /* ty=Tensor[(5, 10, 15), int64] */
}

def @func_7615(%var_7602: Tensor[(12, 15, 1), float32]) -> (Tensor[(12, 15, 1), float32],) {
  %0 = cast(%var_7602, dtype="float32") /* ty=Tensor[(12, 15, 1), float32] */;
  %1 = rsqrt(%0) /* ty=Tensor[(12, 15, 1), float32] */;
  (%1,)
}

def @func_7698() -> (Tensor[(6, 12, 3), int8], Tensor[(216), int8]) {
  %2 = @func_6801() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64], Tensor[(216), int8]) */;
  %3 = @func_5121() /* ty=Tensor[(6, 12, 3), int8] */;
  %4 = %2.3;
  (%3, %4)
}

def @func_5809() -> (Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), uint64]) {
  %5 = @func_5487() /* ty=(Tensor[(6, 12, 3), int8],) */;
  %6 = @func_1986() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(5, 10, 15), int64], Tensor[(14, 12, 5), uint64], Tensor[(840), float64], Tensor[(5, 10, 15), uint8]) */;
  %7 = %5.0;
  %8 = %6.2;
  (%7, %8)
}

def @func_1988() -> (Tensor[(5, 10, 15), bool], Tensor[(5, 10, 15), int64], Tensor[(14, 12, 5), uint64], Tensor[(840), float64], Tensor[(5, 10, 15), uint8]) {
  @func_1986() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(5, 10, 15), int64], Tensor[(14, 12, 5), uint64], Tensor[(840), float64], Tensor[(5, 10, 15), uint8]) */
}

def @func_2917() -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), float64], Tensor[(840), float64]) {
  %17 = fn () -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), float64], Tensor[(840), float64]) {
    %9 = @func_2580() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(6, 12, 3), int8]) */;
    %10 = @func_2580() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(6, 12, 3), int8]) */;
    %11 = cast(meta[relay.Constant][0] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
    %12 = reshape(%11, newshape=[14, 12, 5]) /* ty=Tensor[(14, 12, 5), float64] */;
    %13 = @func_1859(%12) /* ty=(Tensor[(14, 12, 5), uint64], Tensor[(14, 12, 5), float64]) */;
    %14 = %9.1;
    %15 = %10.1;
    %16 = %13.1;
    (%14, %15, %16, meta[relay.Constant][0] /* ty=Tensor[(840), float64] */)
  };
  %17() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), float64], Tensor[(840), float64]) */
}

def @func_5013() -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) {
  %21 = fn () -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) {
    %18 = @func_3797() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(6, 12, 3), int8]) */;
    %19 = %18.1;
    %20 = @func_4680() /* ty=Tensor[(6, 12, 3), int8] */;
    (%19, %20)
  };
  %21() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */
}

def @func_8061(%var_8013: int64, %var_8014: Tensor[(1, 13, 9), int64]) -> (Tensor[(7, 11, 12), float64], Tensor[(1, 13, 9), float32]) {
  %22 = @func_3292() /* ty=(Tensor[(1, 12, 8), bool], Tensor[(7, 11, 12), float64], Tensor[(6, 36), int8]) */;
  %23 = cast(%var_8013, dtype="bool") /* ty=bool */;
  %24 = cast(%var_8014, dtype="bool") /* ty=Tensor[(1, 13, 9), bool] */;
  %25 = less(%23, %24) /* ty=Tensor[(1, 13, 9), bool] */;
  %26 = cast(%25, dtype="float32") /* ty=Tensor[(1, 13, 9), float32] */;
  %27 = cast(%var_8013, dtype="float32") /* ty=float32 */;
  %28 = %22.1;
  %29 = power(%26, %27) /* ty=Tensor[(1, 13, 9), float32] */;
  (%28, %29)
}

def @func_4235() -> Tensor[(6, 12, 3), int8] {
  %30 = @func_768() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %30.0
}

def @func_7890() -> (Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64], Tensor[(750), int64]) {
  %31 = @func_991() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %32 = @func_7536() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(750), int64]) */;
  %33 = %31.0;
  %34 = @func_864() /* ty=Tensor[(5, 10, 15), int64] */;
  %35 = %32.1;
  (%33, %34, %35)
}

def @func_501(%var_500: Tensor[(240), float64]) -> (Tensor[(5, 10, 15), uint16], Tensor[(5, 16, 3), bool], Tensor[(240), float64], Tensor[(6, 12, 3), float64]) {
  %45 = fn (%var_469: Tensor[(240), float64]) -> (Tensor[(5, 10, 15), uint16], Tensor[(5, 16, 3), bool], Tensor[(240), float64], Tensor[(6, 12, 3), float64]) {
    %36 = @func_366() /* ty=(Tensor[(6, 12, 3), float32], Tensor[(5, 10, 15), uint16], Tensor[(750), float32]) */;
    %37 = cast(%var_469, dtype="float64") /* ty=Tensor[(240), float64] */;
    %38 = reshape(%37, newshape=[5, 16, 3]) /* ty=Tensor[(5, 16, 3), float64] */;
    %39 = @func_121() /* ty=(Tensor[(6, 12, 3), int8],) */;
    %40 = %39.0;
    %41 = cast(%40, dtype="float64") /* ty=Tensor[(6, 12, 3), float64] */;
    %42 = %36.1;
    %43 = @func_290(%38) /* ty=Tensor[(5, 16, 3), bool] */;
    %44 = log(%41) /* ty=Tensor[(6, 12, 3), float64] */;
    (%42, %43, %var_469, %44)
  };
  %45(%var_500) /* ty=(Tensor[(5, 10, 15), uint16], Tensor[(5, 16, 3), bool], Tensor[(240), float64], Tensor[(6, 12, 3), float64]) */
}

def @func_8767(%var_8691: Tensor[(5, 10, 15), bool], %var_8696: Tensor[(5, 10, 15), bool], %var_8704: Tensor[(1, 240), float64], %var_8763: Tensor[(180), float32]) -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), uint16], Tensor[(5, 10, 15), float32], Tensor[(5, 16, 3), bool], Tensor[(1, 240), float64], Tensor[(5, 10, 15), int64], Tensor[(750), float32], Tensor[(6, 12, 3), int8], Tensor[(12, 15, 1), float32], Tensor[(180), float32]) {
  %46 = @func_7536() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(750), int64]) */;
  %47 = @func_1761() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %48 = @func_3797() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(6, 12, 3), int8]) */;
  %49 = %48.0;
  %50 = cast(%var_8691, dtype="uint16") /* ty=Tensor[(5, 10, 15), uint16] */;
  %51 = shape_of(%49, dtype="int32") /* ty=Tensor[(3), int32] */;
  %52 = cast(%49, dtype="uint16") /* ty=Tensor[(5, 10, 15), uint16] */;
  %53 = dyn.reshape(%50, %51, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %54 = cast(%var_8696, dtype="float32") /* ty=Tensor[(5, 10, 15), float32] */;
  %55 = shape_of(%49, dtype="int32") /* ty=Tensor[(3), int32] */;
  %56 = cast(%49, dtype="float32") /* ty=Tensor[(5, 10, 15), float32] */;
  %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %58 = cast(%var_8704, dtype="float64") /* ty=Tensor[(1, 240), float64] */;
  %59 = reshape(%58, newshape=[5, 16, 3]) /* ty=Tensor[(5, 16, 3), float64] */;
  %60 = @func_8113() /* ty=(Tensor[(750), float32],) */;
  %61 = @func_732() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %62 = cast(%var_8763, dtype="float32") /* ty=Tensor[(180), float32] */;
  %63 = reshape(%62, newshape=[12, 15, 1]) /* ty=Tensor[(12, 15, 1), float32] */;
  %64 = @func_7615(%63) /* ty=(Tensor[(12, 15, 1), float32],) */;
  %65 = %46.0;
  %66 = %47.0;
  %67 = bitwise_xor(%52, %53) /* ty=Tensor[(5, 10, 15), uint16] */;
  %68 = divide(%56, %57) /* ty=Tensor[(5, 10, 15), float32] */;
  %69 = @func_290(%59) /* ty=Tensor[(5, 16, 3), bool] */;
  %70 = @func_3265() /* ty=Tensor[(5, 10, 15), int64] */;
  %71 = %60.0;
  %72 = %61.0;
  %73 = %64.0;
  (%65, %66, %67, %68, %69, %var_8704, %70, %71, %72, %73, %var_8763)
}

def @func_3464(%var_3462: Tensor[(12, 12, 2), float32], %var_3463: Tensor[(3360), float64]) -> (Tensor[(12, 12, 2), float32], Tensor[(6, 12, 3), int8], Tensor[(240), float64], Tensor[(3360), float64]) {
  %82 = fn (%var_3451: Tensor[(12, 12, 2), float32], %var_3456: Tensor[(3360), float64]) -> (Tensor[(12, 12, 2), float32], Tensor[(6, 12, 3), int8], Tensor[(240), float64], Tensor[(3360), float64]) {
    %74 = cast(%var_3451, dtype="float32") /* ty=Tensor[(12, 12, 2), float32] */;
    %75 = cast(meta[relay.Constant][1] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
    %76 = cast(%var_3456, dtype="float64") /* ty=Tensor[(3360), float64] */;
    %77 = reshape(%75, newshape=[240, 1]) /* ty=Tensor[(240, 1), float64] */;
    %78 = reshape(%76, newshape=[240, 14]) /* ty=Tensor[(240, 14), float64] */;
    %79 = @func_1422(%77, %78) /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(240), float64], Tensor[(6, 12, 3), int8], Tensor[(240, 14), float64]) */;
    %80 = sin(%74) /* ty=Tensor[(12, 12, 2), float32] */;
    %81 = %79.0;
    (%80, %81, meta[relay.Constant][1] /* ty=Tensor[(240), float64] */, %var_3456)
  };
  %82(%var_3462, %var_3463) /* ty=(Tensor[(12, 12, 2), float32], Tensor[(6, 12, 3), int8], Tensor[(240), float64], Tensor[(3360), float64]) */
}

def @func_1507() -> Tensor[(750), float32] {
  %83 = @func_1206() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(750), float32]) */;
  %84 = %83.1;
  %85 = cast(%84, dtype="float32") /* ty=Tensor[(750), float32] */;
  log2(%85) /* ty=Tensor[(750), float32] */
}

def @func_1035() -> Tensor[(6, 12, 3), int8] {
  %86 = fn () -> Tensor[(6, 12, 3), int8] {
    @func_570() /* ty=Tensor[(6, 12, 3), int8] */
  };
  %86() /* ty=Tensor[(6, 12, 3), int8] */
}

def @func_649(%var_610: Tensor[(5, 1, 6), float32], %var_611: Tensor[(5, 7, 6), float32]) -> (Tensor[(5, 7, 6), float32], Tensor[(5, 7, 6), float32]) {
  %87 = cast(%var_610, dtype="float32") /* ty=Tensor[(5, 1, 6), float32] */;
  %88 = cast(%var_611, dtype="float32") /* ty=Tensor[(5, 7, 6), float32] */;
  %89 = cast(%var_610, dtype="float64") /* ty=Tensor[(5, 1, 6), float64] */;
  %90 = atanh(%89) /* ty=Tensor[(5, 1, 6), float64] */;
  %91 = cast(%90, dtype="float32") /* ty=Tensor[(5, 1, 6), float32] */;
  %92 = cast(%var_611, dtype="float32") /* ty=Tensor[(5, 7, 6), float32] */;
  %93 = subtract(%87, %88) /* ty=Tensor[(5, 7, 6), float32] */;
  %94 = floor_mod(%91, %92) /* ty=Tensor[(5, 7, 6), float32] */;
  (%93, %94)
}

def @func_2029(%var_2028: Tensor[(5, 10, 15), int64]) -> Tensor[(5, 10, 15), uint8] {
  %100 = fn (%var_2015: Tensor[(5, 10, 15), int64]) -> Tensor[(5, 10, 15), uint8] {
    %95 = @func_864() /* ty=Tensor[(5, 10, 15), int64] */;
    %96 = cast(%var_2015, dtype="uint8") /* ty=Tensor[(5, 10, 15), uint8] */;
    %97 = shape_of(%95, dtype="int32") /* ty=Tensor[(3), int32] */;
    %98 = cast(%95, dtype="uint8") /* ty=Tensor[(5, 10, 15), uint8] */;
    %99 = dyn.reshape(%96, %97, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    bitwise_and(%98, %99) /* ty=Tensor[(5, 10, 15), uint8] */
  };
  %100(%var_2028) /* ty=Tensor[(5, 10, 15), uint8] */
}

def @func_7618(%var_7616: Tensor[(12, 15, 1), float32]) -> (Tensor[(12, 15, 1), float32],) {
  @func_7615(%var_7616) /* ty=(Tensor[(12, 15, 1), float32],) */
}

def @func_7799() -> (Tensor[(6, 12, 3), int8],) {
  %102 = fn () -> (Tensor[(6, 12, 3), int8],) {
    %101 = @func_570() /* ty=Tensor[(6, 12, 3), int8] */;
    (%101,)
  };
  %102() /* ty=(Tensor[(6, 12, 3), int8],) */
}

def @func_5180() -> (Tensor[(6, 12, 3), int8],) {
  %103 = @func_991() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %104 = %103.1;
  (%104,)
}

def @func_8115() -> (Tensor[(750), float32],) {
  @func_8113() /* ty=(Tensor[(750), float32],) */
}

def @func_6155() -> (Tensor[(5, 10, 15), uint16],) {
  @func_6153() /* ty=(Tensor[(5, 10, 15), uint16],) */
}

def @func_6194() -> (Tensor[(6, 12, 3), int8],) {
  %105 = @func_5487() /* ty=(Tensor[(6, 12, 3), int8],) */;
  %106 = %105.0;
  (%106,)
}

def @func_6046(%var_6043: Tensor[(14, 7, 10), float32], %var_6044: Tensor[(30), float32], %var_6045: Tensor[(210), float32]) -> (Tensor[(14, 7, 10), float32], Tensor[(14, 7, 10), float32], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(5, 7, 6), float32], Tensor[(30), float32], Tensor[(210), float32], Tensor[(6, 12, 3), int8]) {
  %123 = fn (%var_6015: Tensor[(14, 7, 10), float32], %var_6036: Tensor[(30), float32], %var_6037: Tensor[(210), float32]) -> (Tensor[(14, 7, 10), float32], Tensor[(14, 7, 10), float32], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(5, 7, 6), float32], Tensor[(30), float32], Tensor[(210), float32], Tensor[(6, 12, 3), int8]) {
    %107 = cast(%var_6015, dtype="float32") /* ty=Tensor[(14, 7, 10), float32] */;
    %108 = cast(%var_6015, dtype="float32") /* ty=Tensor[(14, 7, 10), float32] */;
    %109 = @func_3156() /* ty=(Tensor[(6, 12, 3), int8],) */;
    %110 = @func_1761() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
    %111 = cast(%var_6036, dtype="float32") /* ty=Tensor[(30), float32] */;
    %112 = cast(%var_6037, dtype="float32") /* ty=Tensor[(210), float32] */;
    %113 = reshape(%111, newshape=[5, 1, 6]) /* ty=Tensor[(5, 1, 6), float32] */;
    %114 = reshape(%112, newshape=[5, 7, 6]) /* ty=Tensor[(5, 7, 6), float32] */;
    %115 = @func_649(%113, %114) /* ty=(Tensor[(5, 7, 6), float32], Tensor[(5, 7, 6), float32]) */;
    %116 = @func_1761() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
    %117 = exp(%107) /* ty=Tensor[(14, 7, 10), float32] */;
    %118 = asin(%108) /* ty=Tensor[(14, 7, 10), float32] */;
    %119 = %109.0;
    %120 = %110.0;
    %121 = %115.0;
    %122 = %116.1;
    (%117, %118, %119, %120, %121, %var_6036, %var_6037, %122)
  };
  %123(%var_6043, %var_6044, %var_6045) /* ty=(Tensor[(14, 7, 10), float32], Tensor[(14, 7, 10), float32], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(5, 7, 6), float32], Tensor[(30), float32], Tensor[(210), float32], Tensor[(6, 12, 3), int8]) */
}

def @func_3008() -> Tensor[(5, 10, 15), uint16] {
  @func_3006() /* ty=Tensor[(5, 10, 15), uint16] */
}

def @func_549() -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) {
  %128 = fn () -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) {
    %124 = @func_121() /* ty=(Tensor[(6, 12, 3), int8],) */;
    %125 = @func_121() /* ty=(Tensor[(6, 12, 3), int8],) */;
    %126 = %124.0;
    %127 = %125.0;
    (%126, %127)
  };
  %128() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */
}

def @func_1878() -> (Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), uint64], Tensor[(420, 2), float64]) {
  %135 = fn () -> (Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), uint64], Tensor[(420, 2), float64]) {
    %129 = @func_991() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
    %130 = cast(meta[relay.Constant][2] /* ty=Tensor[(420, 2), float64] */, dtype="float64") /* ty=Tensor[(420, 2), float64] */;
    %131 = reshape(%130, newshape=[14, 12, 5]) /* ty=Tensor[(14, 12, 5), float64] */;
    %132 = @func_1859(%131) /* ty=(Tensor[(14, 12, 5), uint64], Tensor[(14, 12, 5), float64]) */;
    %133 = %129.0;
    %134 = %132.0;
    (%133, %134, meta[relay.Constant][2] /* ty=Tensor[(420, 2), float64] */)
  };
  %135() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), uint64], Tensor[(420, 2), float64]) */
}

def @func_6088() -> (Tensor[(14, 12, 5), float64], Tensor[(16, 7, 5), bool], Tensor[(35), bool]) {
  @func_6086() /* ty=(Tensor[(14, 12, 5), float64], Tensor[(16, 7, 5), bool], Tensor[(35), bool]) */
}

def @func_4902() -> (Tensor[(1, 12, 8), float32], Tensor[(5, 10, 15), int64]) {
  %140 = fn () -> (Tensor[(1, 12, 8), float32], Tensor[(5, 10, 15), int64]) {
    %136 = @func_1477() /* ty=Tensor[(1, 12, 8), bool] */;
    %137 = cast(%136, dtype="float32") /* ty=Tensor[(1, 12, 8), float32] */;
    %138 = log(%137) /* ty=Tensor[(1, 12, 8), float32] */;
    %139 = @func_3265() /* ty=Tensor[(5, 10, 15), int64] */;
    (%138, %139)
  };
  %140() /* ty=(Tensor[(1, 12, 8), float32], Tensor[(5, 10, 15), int64]) */
}

def @func_9277() -> Tensor[(6, 12, 3), int8] {
  %142 = fn () -> Tensor[(6, 12, 3), int8] {
    %141 = @func_7536() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(750), int64]) */;
    %141.0
  };
  %142() /* ty=Tensor[(6, 12, 3), int8] */
}

def @func_8464() -> Tensor[(6, 12, 3), int8] {
  @func_8462() /* ty=Tensor[(6, 12, 3), int8] */
}

def @func_1177(%var_1159: Tensor[(216), int8]) -> (Tensor[(7, 11, 12), uint32], Tensor[(6, 12, 3), bool], Tensor[(216), int8], Tensor[(7, 11, 12), float64]) {
  %143 = cast(meta[relay.Constant][3] /* ty=Tensor[(7, 11, 12), float64] */, dtype="float64") /* ty=Tensor[(7, 11, 12), float64] */;
  %144 = asin(%143) /* ty=Tensor[(7, 11, 12), float64] */;
  %145 = cast(%144, dtype="float32") /* ty=Tensor[(7, 11, 12), float32] */;
  %146 = log2(%145) /* ty=Tensor[(7, 11, 12), float32] */;
  %147 = cast(%144, dtype="uint32") /* ty=Tensor[(7, 11, 12), uint32] */;
  %148 = shape_of(%146, dtype="int32") /* ty=Tensor[(3), int32] */;
  %149 = cast(%146, dtype="uint32") /* ty=Tensor[(7, 11, 12), uint32] */;
  %150 = dyn.reshape(%147, %148, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %151 = cast(%var_1159, dtype="int8") /* ty=Tensor[(216), int8] */;
  %152 = reshape(%151, newshape=[6, 12, 3]) /* ty=Tensor[(6, 12, 3), int8] */;
  %153 = cast(%146, dtype="float64") /* ty=Tensor[(7, 11, 12), float64] */;
  %154 = minimum(%149, %150) /* ty=Tensor[(7, 11, 12), uint32] */;
  %155 = @func_444(%152) /* ty=Tensor[(6, 12, 3), bool] */;
  %156 = tan(%153) /* ty=Tensor[(7, 11, 12), float64] */;
  (%154, %155, %var_1159, %156)
}

def @func_1761() -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) {
  %157 = @func_1330() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) */;
  %158 = @func_768() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %159 = %157.0;
  %160 = %158.1;
  (%159, %160)
}

def @func_1478() -> Tensor[(1, 12, 8), bool] {
  %163 = fn () -> Tensor[(1, 12, 8), bool] {
    %161 = cast(3 /* ty=int64 */, dtype="bool") /* ty=bool */;
    %162 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 12, 8), int64] */, dtype="bool") /* ty=Tensor[(1, 12, 8), bool] */;
    greater(%161, %162) /* ty=Tensor[(1, 12, 8), bool] */
  };
  %163() /* ty=Tensor[(1, 12, 8), bool] */
}

def @func_6562() -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) {
  %170 = fn () -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) {
    %164 = @func_5809() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), uint64]) */;
    %165 = @func_3156() /* ty=(Tensor[(6, 12, 3), int8],) */;
    %166 = @func_1530() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) */;
    %167 = %164.0;
    %168 = %165.0;
    %169 = %166.0;
    (%167, %168, %169)
  };
  %170() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */
}

def @func_3225() -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) {
  %174 = fn () -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) {
    %171 = @func_676() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
    %172 = %171.0;
    %173 = @func_2362() /* ty=Tensor[(6, 12, 3), int8] */;
    (%172, %173)
  };
  %174() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */
}

def @func_572() -> Tensor[(6, 12, 3), int8] {
  @func_570() /* ty=Tensor[(6, 12, 3), int8] */
}

def @func_2431(%var_2429: Tensor[(14, 12, 5), uint64]) -> (Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), bool], Tensor[(6, 12, 3), int8]) {
  @func_2428(%var_2429) /* ty=(Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), bool], Tensor[(6, 12, 3), int8]) */
}

def @func_5811() -> (Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), uint64]) {
  @func_5809() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), uint64]) */
}

def @func_3265() -> Tensor[(5, 10, 15), int64] {
  %175 = @func_1530() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) */;
  %175.1
}

def @func_4933() -> Tensor[(6, 12, 3), int8] {
  %176 = @func_768() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %176.1
}

def @func_6953(%var_6951: Tensor[(11, 2, 7), float64]) -> (Tensor[(11, 2, 7), float64], Tensor[(5, 10, 15), int64], Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), float64], Tensor[(840), float64]) {
  @func_6950(%var_6951) /* ty=(Tensor[(11, 2, 7), float64], Tensor[(5, 10, 15), int64], Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), float64], Tensor[(840), float64]) */
}

def @func_3373(%var_3371: Tensor[(2, 16, 13), float32]) -> (Tensor[(6, 12, 3), int8], Tensor[(2, 16, 13), float64]) {
  @func_3370(%var_3371) /* ty=(Tensor[(6, 12, 3), int8], Tensor[(2, 16, 13), float64]) */
}

def @func_5253() -> (Tensor[(6, 12, 3), int8], Tensor[(1, 12, 8), bool]) {
  %181 = fn () -> (Tensor[(6, 12, 3), int8], Tensor[(1, 12, 8), bool]) {
    %177 = @func_3156() /* ty=(Tensor[(6, 12, 3), int8],) */;
    %178 = @func_4587() /* ty=(Tensor[(1, 12, 8), bool], Tensor[(6, 12, 3), int8]) */;
    %179 = %177.0;
    %180 = %178.0;
    (%179, %180)
  };
  %181() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(1, 12, 8), bool]) */
}

def @func_2537() -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(750), int64]) {
  %190 = fn () -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(750), int64]) {
    %182 = @func_1030() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(16, 11, 5), float64], Tensor[(880), float64]) */;
    %183 = @func_1530() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) */;
    %184 = cast(meta[relay.Constant][5] /* ty=Tensor[(750), int64] */, dtype="int64") /* ty=Tensor[(750), int64] */;
    %185 = reshape(%184, newshape=[5, 10, 15]) /* ty=Tensor[(5, 10, 15), int64] */;
    %186 = @func_2131(%185) /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), bool], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(880), float64]) */;
    %187 = %182.0;
    %188 = %183.0;
    %189 = %186.2;
    (%187, %188, %189, meta[relay.Constant][5] /* ty=Tensor[(750), int64] */)
  };
  %190() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(750), int64]) */
}

def @func_7700() -> (Tensor[(6, 12, 3), int8], Tensor[(216), int8]) {
  @func_7698() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(216), int8]) */
}

def @func_3370(%var_3345: Tensor[(2, 16, 13), float32]) -> (Tensor[(6, 12, 3), int8], Tensor[(2, 16, 13), float64]) {
  %191 = @func_3156() /* ty=(Tensor[(6, 12, 3), int8],) */;
  %192 = cast(%var_3345, dtype="float32") /* ty=Tensor[(2, 16, 13), float32] */;
  %193 = exp(%192) /* ty=Tensor[(2, 16, 13), float32] */;
  %194 = cast(%var_3345, dtype="float64") /* ty=Tensor[(2, 16, 13), float64] */;
  %195 = shape_of(%193, dtype="int32") /* ty=Tensor[(3), int32] */;
  %196 = cast(%193, dtype="float64") /* ty=Tensor[(2, 16, 13), float64] */;
  %197 = dyn.reshape(%194, %195, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %198 = %191.0;
  %199 = mod(%196, %197) /* ty=Tensor[(2, 16, 13), float64] */;
  (%198, %199)
}

def @func_4682() -> Tensor[(6, 12, 3), int8] {
  @func_4680() /* ty=Tensor[(6, 12, 3), int8] */
}

def @func_6196() -> (Tensor[(6, 12, 3), int8],) {
  @func_6194() /* ty=(Tensor[(6, 12, 3), int8],) */
}

def @func_5182() -> (Tensor[(6, 12, 3), int8],) {
  @func_5180() /* ty=(Tensor[(6, 12, 3), int8],) */
}

def @func_5471() -> (Tensor[(6, 12, 3), int8], Tensor[(240), float64], Tensor[(240), float64]) {
  %200 = @func_4152() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(3, 13, 8), float32]) */;
  %201 = cast(meta[relay.Constant][6] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %202 = reshape(%201, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %203 = @func_499(%202) /* ty=(Tensor[(5, 10, 15), uint16], Tensor[(5, 16, 3), bool], Tensor[(240), float64], Tensor[(6, 12, 3), float64]) */;
  %204 = %200.1;
  %205 = %203.2;
  (%204, %205, meta[relay.Constant][6] /* ty=Tensor[(240), float64] */)
}

def @func_8090() -> (Tensor[(750), int64],) {
  %206 = @func_4321() /* ty=(Tensor[(750), int64],) */;
  %207 = %206.0;
  (%207,)
}

def @func_6266() -> (Tensor[(7, 11, 12), float64], Tensor[(6, 12, 3), int8]) {
  @func_6264() /* ty=(Tensor[(7, 11, 12), float64], Tensor[(6, 12, 3), int8]) */
}

def @func_6833() -> (Tensor[(14, 12, 5), uint64], Tensor[(6, 12, 3), int8]) {
  %212 = fn () -> (Tensor[(14, 12, 5), uint64], Tensor[(6, 12, 3), int8]) {
    %208 = @func_1986() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(5, 10, 15), int64], Tensor[(14, 12, 5), uint64], Tensor[(840), float64], Tensor[(5, 10, 15), uint8]) */;
    %209 = @func_1330() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) */;
    %210 = %208.2;
    %211 = %209.0;
    (%210, %211)
  };
  %212() /* ty=(Tensor[(14, 12, 5), uint64], Tensor[(6, 12, 3), int8]) */
}

def @func_4154() -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(3, 13, 8), float32]) {
  @func_4152() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(3, 13, 8), float32]) */
}

def @func_7537() -> (Tensor[(6, 12, 3), int8], Tensor[(750), int64]) {
  %217 = fn () -> (Tensor[(6, 12, 3), int8], Tensor[(750), int64]) {
    %213 = @func_6915() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
    %214 = @func_4321() /* ty=(Tensor[(750), int64],) */;
    %215 = %213.1;
    %216 = %214.0;
    (%215, %216)
  };
  %217() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(750), int64]) */
}

def @func_5971(%var_5969: Tensor[(14, 12, 5), uint64]) -> (Tensor[(2, 120), float64], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), uint32], Tensor[(6, 12, 3), int8]) {
  @func_5968(%var_5969) /* ty=(Tensor[(2, 120), float64], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), uint32], Tensor[(6, 12, 3), int8]) */
}

def @func_9453() -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) {
  @func_9451() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */
}

def @func_3267() -> Tensor[(5, 10, 15), int64] {
  @func_3265() /* ty=Tensor[(5, 10, 15), int64] */
}

def @func_4071(%var_4063: Tensor[(30), float32], %var_4064: Tensor[(210), float32]) -> (Tensor[(6, 12, 3), int8], Tensor[(5, 7, 6), float32], Tensor[(30), float32], Tensor[(210), float32]) {
  %218 = @func_2580() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(6, 12, 3), int8]) */;
  %219 = cast(%var_4063, dtype="float32") /* ty=Tensor[(30), float32] */;
  %220 = cast(%var_4064, dtype="float32") /* ty=Tensor[(210), float32] */;
  %221 = reshape(%219, newshape=[5, 1, 6]) /* ty=Tensor[(5, 1, 6), float32] */;
  %222 = reshape(%220, newshape=[5, 7, 6]) /* ty=Tensor[(5, 7, 6), float32] */;
  %223 = @func_649(%221, %222) /* ty=(Tensor[(5, 7, 6), float32], Tensor[(5, 7, 6), float32]) */;
  %224 = %218.1;
  %225 = %223.1;
  (%224, %225, %var_4063, %var_4064)
}

def @func_367() -> (Tensor[(6, 12, 3), float32], Tensor[(5, 10, 15), uint16], Tensor[(750), float32]) {
  %234 = fn () -> (Tensor[(6, 12, 3), float32], Tensor[(5, 10, 15), uint16], Tensor[(750), float32]) {
    %226 = @func_121() /* ty=(Tensor[(6, 12, 3), int8],) */;
    %227 = %226.0;
    %228 = cast(%227, dtype="float32") /* ty=Tensor[(6, 12, 3), float32] */;
    %229 = cast(meta[relay.Constant][7] /* ty=Tensor[(750), float32] */, dtype="float32") /* ty=Tensor[(750), float32] */;
    %230 = reshape(%229, newshape=[5, 10, 15]) /* ty=Tensor[(5, 10, 15), float32] */;
    %231 = @func_217(%230) /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), uint16], Tensor[(5, 10, 15), float64]) */;
    %232 = sin(%228) /* ty=Tensor[(6, 12, 3), float32] */;
    %233 = %231.1;
    (%232, %233, meta[relay.Constant][7] /* ty=Tensor[(750), float32] */)
  };
  %234() /* ty=(Tensor[(6, 12, 3), float32], Tensor[(5, 10, 15), uint16], Tensor[(750), float32]) */
}

def @func_5230() -> (Tensor[(5, 10, 15), int64], Tensor[(5, 10, 15), uint16], Tensor[(2, 120), float64], Tensor[(6, 12, 3), int8]) {
  %242 = fn () -> (Tensor[(5, 10, 15), int64], Tensor[(5, 10, 15), uint16], Tensor[(2, 120), float64], Tensor[(6, 12, 3), int8]) {
    %235 = cast(meta[relay.Constant][8] /* ty=Tensor[(2, 120), float64] */, dtype="float64") /* ty=Tensor[(2, 120), float64] */;
    %236 = reshape(%235, newshape=[240]) /* ty=Tensor[(240), float64] */;
    %237 = @func_499(%236) /* ty=(Tensor[(5, 10, 15), uint16], Tensor[(5, 16, 3), bool], Tensor[(240), float64], Tensor[(6, 12, 3), float64]) */;
    %238 = @func_732() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
    %239 = @func_864() /* ty=Tensor[(5, 10, 15), int64] */;
    %240 = %237.0;
    %241 = %238.1;
    (%239, %240, meta[relay.Constant][8] /* ty=Tensor[(2, 120), float64] */, %241)
  };
  %242() /* ty=(Tensor[(5, 10, 15), int64], Tensor[(5, 10, 15), uint16], Tensor[(2, 120), float64], Tensor[(6, 12, 3), int8]) */
}

def @func_6724() -> (Tensor[(840), float64], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) {
  %248 = fn () -> (Tensor[(840), float64], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) {
    %243 = @func_5271() /* ty=(Tensor[(840), float64], Tensor[(6, 12, 3), int8]) */;
    %244 = @func_2916() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), float64], Tensor[(840), float64]) */;
    %245 = %243.0;
    %246 = %244.1;
    %247 = @func_5134() /* ty=Tensor[(6, 12, 3), int8] */;
    (%245, %246, %247)
  };
  %248() /* ty=(Tensor[(840), float64], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */
}

def @func_769() -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) {
  %252 = fn () -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) {
    %249 = @func_548() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
    %250 = %249.1;
    %251 = @func_570() /* ty=Tensor[(6, 12, 3), int8] */;
    (%250, %251)
  };
  %252() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */
}

def @func_4974() -> Tensor[(6, 12, 3), int8] {
  %254 = fn () -> Tensor[(6, 12, 3), int8] {
    %253 = @func_676() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
    %253.0
  };
  %254() /* ty=Tensor[(6, 12, 3), int8] */
}

def @func_1745(%var_1743: Tensor[(13, 16, 7), float32], %var_1744: Tensor[(880), float64]) -> (Tensor[(13, 16, 7), float32], Tensor[(16, 11, 5), float64], Tensor[(880), float64]) {
  @func_1741(%var_1743, %var_1744) /* ty=(Tensor[(13, 16, 7), float32], Tensor[(16, 11, 5), float64], Tensor[(880), float64]) */
}

def @func_6245(%var_6244: Tensor[(5, 2, 4), float32]) -> Tensor[(5, 2, 4), float32] {
  %256 = fn (%var_6239: Tensor[(5, 2, 4), float32]) -> Tensor[(5, 2, 4), float32] {
    %255 = cast(%var_6239, dtype="float32") /* ty=Tensor[(5, 2, 4), float32] */;
    asinh(%255) /* ty=Tensor[(5, 2, 4), float32] */
  };
  %256(%var_6244) /* ty=Tensor[(5, 2, 4), float32] */
}

def @func_292(%var_291: Tensor[(5, 16, 3), float64]) -> Tensor[(5, 16, 3), bool] {
  %261 = fn (%var_281: Tensor[(5, 16, 3), float64]) -> Tensor[(5, 16, 3), bool] {
    %257 = cast(%var_281, dtype="bool") /* ty=Tensor[(5, 16, 3), bool] */;
    %258 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(5, 16, 3), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %259 = cast(meta[relay.Constant][9] /* ty=Tensor[(5, 16, 3), float64] */, dtype="bool") /* ty=Tensor[(5, 16, 3), bool] */;
    %260 = dyn.reshape(%257, %258, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less_equal(%259, %260) /* ty=Tensor[(5, 16, 3), bool] */
  };
  %261(%var_291) /* ty=Tensor[(5, 16, 3), bool] */
}

def @func_4323() -> (Tensor[(750), int64],) {
  @func_4321() /* ty=(Tensor[(750), int64],) */
}

def @func_122() -> (Tensor[(6, 12, 3), int8],) {
  %272 = fn () -> (Tensor[(6, 12, 3), int8],) {
    %262 = cast(meta[relay.Constant][10] /* ty=Tensor[(6, 12, 3), bool] */, dtype="bool") /* ty=Tensor[(6, 12, 3), bool] */;
    %263 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(6, 12, 3), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %264 = cast(meta[relay.Constant][11] /* ty=Tensor[(6, 12, 3), bool] */, dtype="bool") /* ty=Tensor[(6, 12, 3), bool] */;
    %265 = dyn.reshape(%262, %263, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %266 = logical_or(%264, %265) /* ty=Tensor[(6, 12, 3), bool] */;
    %267 = cast(%266, dtype="int8") /* ty=Tensor[(6, 12, 3), int8] */;
    %268 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(6, 12, 3), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %269 = cast(meta[relay.Constant][10] /* ty=Tensor[(6, 12, 3), bool] */, dtype="int8") /* ty=Tensor[(6, 12, 3), int8] */;
    %270 = dyn.reshape(%267, %268, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %271 = left_shift(%269, %270) /* ty=Tensor[(6, 12, 3), int8] */;
    (%271,)
  };
  %272() /* ty=(Tensor[(6, 12, 3), int8],) */
}

def @func_7892() -> (Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64], Tensor[(750), int64]) {
  @func_7890() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64], Tensor[(750), int64]) */
}

def @func_4321() -> (Tensor[(750), int64],) {
  %273 = @func_2536() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(750), int64]) */;
  %274 = %273.3;
  (%274,)
}

def @func_4390(%var_4377: Tensor[(3360), float64]) -> (Tensor[(6, 12, 3), int8], Tensor[(240), float64], Tensor[(240), float64], Tensor[(3360), float64]) {
  %275 = @func_2783() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(6, 12, 3), int8]) */;
  %276 = cast(meta[relay.Constant][12] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %277 = cast(%var_4377, dtype="float64") /* ty=Tensor[(3360), float64] */;
  %278 = reshape(%276, newshape=[240, 1]) /* ty=Tensor[(240, 1), float64] */;
  %279 = reshape(%277, newshape=[240, 14]) /* ty=Tensor[(240, 14), float64] */;
  %280 = @func_1422(%278, %279) /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(240), float64], Tensor[(6, 12, 3), int8], Tensor[(240, 14), float64]) */;
  %281 = %275.1;
  %282 = %280.2;
  (%281, %282, meta[relay.Constant][12] /* ty=Tensor[(240), float64] */, %var_4377)
}

def @func_936(%var_935: Tensor[(16, 11, 5), float64]) -> Tensor[(16, 11, 5), float64] {
  %284 = fn (%var_931: Tensor[(16, 11, 5), float64]) -> Tensor[(16, 11, 5), float64] {
    %283 = cast(%var_931, dtype="float64") /* ty=Tensor[(16, 11, 5), float64] */;
    sinh(%283) /* ty=Tensor[(16, 11, 5), float64] */
  };
  %284(%var_935) /* ty=Tensor[(16, 11, 5), float64] */
}

def @func_1426(%var_1424: Tensor[(240, 1), float64], %var_1425: Tensor[(240, 14), float64]) -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(240), float64], Tensor[(6, 12, 3), int8], Tensor[(240, 14), float64]) {
  @func_1422(%var_1424, %var_1425) /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(240), float64], Tensor[(6, 12, 3), int8], Tensor[(240, 14), float64]) */
}

def @func_7288() -> (Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), float64], Tensor[(6, 12, 3), int8]) {
  %293 = fn () -> (Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), float64], Tensor[(6, 12, 3), int8]) {
    %285 = @func_5271() /* ty=(Tensor[(840), float64], Tensor[(6, 12, 3), int8]) */;
    %286 = @func_2580() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(6, 12, 3), int8]) */;
    %287 = %286.0;
    %288 = cast(%287, dtype="float64") /* ty=Tensor[(5, 10, 15), float64] */;
    %289 = @func_3156() /* ty=(Tensor[(6, 12, 3), int8],) */;
    %290 = %285.1;
    %291 = asinh(%288) /* ty=Tensor[(5, 10, 15), float64] */;
    %292 = %289.0;
    (%290, %291, %292)
  };
  %293() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), float64], Tensor[(6, 12, 3), int8]) */
}

def @func_2852(%var_2851: Tensor[(750), float32]) -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(750), uint64], Tensor[(750), float64]) {
  %306 = fn (%var_2822: Tensor[(750), float32]) -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(750), uint64], Tensor[(750), float64]) {
    %294 = cast(meta[relay.Constant][13] /* ty=Tensor[(750), float32] */, dtype="float32") /* ty=Tensor[(750), float32] */;
    %295 = reshape(%294, newshape=[5, 10, 15]) /* ty=Tensor[(5, 10, 15), float32] */;
    %296 = @func_217(%295) /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), uint16], Tensor[(5, 10, 15), float64]) */;
    %297 = cast(%var_2822, dtype="uint64") /* ty=Tensor[(750), uint64] */;
    %298 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(750), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %299 = cast(meta[relay.Constant][13] /* ty=Tensor[(750), float32] */, dtype="uint64") /* ty=Tensor[(750), uint64] */;
    %300 = dyn.reshape(%297, %298, newshape=[]) /* ty=Tensor[(?), uint64] */;
    %301 = cast(%var_2822, dtype="float64") /* ty=Tensor[(750), float64] */;
    %302 = @func_2362() /* ty=Tensor[(6, 12, 3), int8] */;
    %303 = %296.0;
    %304 = bitwise_xor(%299, %300) /* ty=Tensor[(750), uint64] */;
    %305 = sin(%301) /* ty=Tensor[(750), float64] */;
    (%302, %303, %304, %305)
  };
  %306(%var_2851) /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(750), uint64], Tensor[(750), float64]) */
}

def @func_444(%var_427: Tensor[(6, 12, 3), int8]) -> Tensor[(6, 12, 3), bool] {
  %307 = @func_121() /* ty=(Tensor[(6, 12, 3), int8],) */;
  %308 = %307.0;
  %309 = cast(%var_427, dtype="bool") /* ty=Tensor[(6, 12, 3), bool] */;
  %310 = shape_of(%308, dtype="int32") /* ty=Tensor[(3), int32] */;
  %311 = cast(%308, dtype="bool") /* ty=Tensor[(6, 12, 3), bool] */;
  %312 = dyn.reshape(%309, %310, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%311, %312) /* ty=Tensor[(6, 12, 3), bool] */
}

def @func_8113() -> (Tensor[(750), float32],) {
  %313 = @func_1507() /* ty=Tensor[(750), float32] */;
  (%313,)
}

def @func_1207() -> (Tensor[(6, 12, 3), int8], Tensor[(750), float32]) {
  %318 = fn () -> (Tensor[(6, 12, 3), int8], Tensor[(750), float32]) {
    %314 = @func_1030() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(16, 11, 5), float64], Tensor[(880), float64]) */;
    %315 = @func_366() /* ty=(Tensor[(6, 12, 3), float32], Tensor[(5, 10, 15), uint16], Tensor[(750), float32]) */;
    %316 = %314.0;
    %317 = %315.2;
    (%316, %317)
  };
  %318() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(750), float32]) */
}

def @func_4193(%var_4175: Tensor[(4, 60), float64], %var_4180: Tensor[(840), float64]) -> (Tensor[(5, 10, 15), bool], Tensor[(5, 16, 3), bool], Tensor[(4, 60), float64], Tensor[(14, 12, 5), float64], Tensor[(840), float64], Tensor[(5, 10, 15), uint8], Tensor[(1200), float64]) {
  %319 = @func_3797() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(6, 12, 3), int8]) */;
  %320 = cast(%var_4175, dtype="float64") /* ty=Tensor[(4, 60), float64] */;
  %321 = reshape(%320, newshape=[5, 16, 3]) /* ty=Tensor[(5, 16, 3), float64] */;
  %322 = cast(%var_4180, dtype="float64") /* ty=Tensor[(840), float64] */;
  %323 = reshape(%322, newshape=[14, 12, 5]) /* ty=Tensor[(14, 12, 5), float64] */;
  %324 = @func_1859(%323) /* ty=(Tensor[(14, 12, 5), uint64], Tensor[(14, 12, 5), float64]) */;
  %325 = %319.0;
  %326 = cast(%325, dtype="int64") /* ty=Tensor[(5, 10, 15), int64] */;
  %327 = reshape(%326, newshape=[5, 10, 15]) /* ty=Tensor[(5, 10, 15), int64] */;
  %328 = cast(%var_4175, dtype="float64") /* ty=Tensor[(4, 60), float64] */;
  %329 = reshape(%328, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %330 = @func_3096(%329) /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(240), float64], Tensor[(1200), float64], Tensor[(6, 12, 3), int8], Tensor[(750), float32], Tensor[(6, 12, 3), int8], Tensor[(750), float32]) */;
  %331 = @func_290(%321) /* ty=Tensor[(5, 16, 3), bool] */;
  %332 = %324.1;
  %333 = @func_2027(%327) /* ty=Tensor[(5, 10, 15), uint8] */;
  %334 = %330.4;
  (%325, %331, %var_4175, %332, %var_4180, %333, %334)
}

def @func_3006() -> Tensor[(5, 10, 15), uint16] {
  %335 = @func_366() /* ty=(Tensor[(6, 12, 3), float32], Tensor[(5, 10, 15), uint16], Tensor[(750), float32]) */;
  %335.1
}

def @func_5573(%var_5571: Tensor[(12, 16, 10), float32], %var_5572: Tensor[(12, 16, 10), float32]) -> (Tensor[(12, 16, 10), float32], Tensor[(6, 12, 3), int8], Tensor[(12, 16, 10), float32]) {
  %345 = fn (%var_5543: Tensor[(12, 16, 10), float32], %var_5544: Tensor[(12, 16, 10), float32]) -> (Tensor[(12, 16, 10), float32], Tensor[(6, 12, 3), int8], Tensor[(12, 16, 10), float32]) {
    %336 = cast(%var_5544, dtype="float32") /* ty=Tensor[(12, 16, 10), float32] */;
    %337 = shape_of(%var_5543, dtype="int32") /* ty=Tensor[(3), int32] */;
    %338 = cast(%var_5543, dtype="float32") /* ty=Tensor[(12, 16, 10), float32] */;
    %339 = dyn.reshape(%336, %337, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %340 = @func_2580() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(6, 12, 3), int8]) */;
    %341 = cast(%var_5543, dtype="float32") /* ty=Tensor[(12, 16, 10), float32] */;
    %342 = floor_divide(%338, %339) /* ty=Tensor[(12, 16, 10), float32] */;
    %343 = %340.1;
    %344 = asinh(%341) /* ty=Tensor[(12, 16, 10), float32] */;
    (%342, %343, %344)
  };
  %345(%var_5571, %var_5572) /* ty=(Tensor[(12, 16, 10), float32], Tensor[(6, 12, 3), int8], Tensor[(12, 16, 10), float32]) */
}

def @func_8462() -> Tensor[(6, 12, 3), int8] {
  %346 = @func_3797() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(6, 12, 3), int8]) */;
  %346.1
}

def @func_1284(%var_1282: Tensor[(1, 16, 15), float64], %var_1283: Tensor[(5, 16, 15), float64]) -> (Tensor[(5, 16, 15), float64], Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64], Tensor[(750), float64]) {
  %358 = fn (%var_1219: Tensor[(1, 16, 15), float64], %var_1220: Tensor[(5, 16, 15), float64]) -> (Tensor[(5, 16, 15), float64], Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64], Tensor[(750), float64]) {
    %347 = cast(%var_1219, dtype="float64") /* ty=Tensor[(1, 16, 15), float64] */;
    %348 = cast(%var_1220, dtype="float64") /* ty=Tensor[(5, 16, 15), float64] */;
    %349 = @func_991() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
    %350 = @func_1064() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) */;
    %351 = @func_366() /* ty=(Tensor[(6, 12, 3), float32], Tensor[(5, 10, 15), uint16], Tensor[(750), float32]) */;
    %352 = %351.2;
    %353 = cast(%352, dtype="float64") /* ty=Tensor[(750), float64] */;
    %354 = subtract(%347, %348) /* ty=Tensor[(5, 16, 15), float64] */;
    %355 = %349.0;
    %356 = %350.1;
    %357 = acos(%353) /* ty=Tensor[(750), float64] */;
    (%354, %355, %356, %357)
  };
  %358(%var_1282, %var_1283) /* ty=(Tensor[(5, 16, 15), float64], Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64], Tensor[(750), float64]) */
}

def @func_5457() -> (Tensor[(5, 10, 15), int64], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), bool], Tensor[(6, 12, 3), int8]) {
  %359 = @func_1064() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) */;
  %360 = @func_1761() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %361 = %360.0;
  %362 = cast(%361, dtype="int8") /* ty=Tensor[(6, 12, 3), int8] */;
  %363 = reshape(%362, newshape=[6, 12, 3]) /* ty=Tensor[(6, 12, 3), int8] */;
  %364 = @func_2536() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(750), int64]) */;
  %365 = %359.1;
  %366 = @func_444(%363) /* ty=Tensor[(6, 12, 3), bool] */;
  %367 = %364.0;
  (%365, %361, %366, %367)
}

def @func_2363() -> Tensor[(6, 12, 3), int8] {
  %369 = fn () -> Tensor[(6, 12, 3), int8] {
    %368 = @func_732() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
    %368.1
  };
  %369() /* ty=Tensor[(6, 12, 3), int8] */
}

def @func_8006() -> (Tensor[(6, 12, 3), int8], Tensor[(750), float32]) {
  %374 = fn () -> (Tensor[(6, 12, 3), int8], Tensor[(750), float32]) {
    %370 = @func_6488() /* ty=(Tensor[(6, 12, 3), int8],) */;
    %371 = @func_366() /* ty=(Tensor[(6, 12, 3), float32], Tensor[(5, 10, 15), uint16], Tensor[(750), float32]) */;
    %372 = %370.0;
    %373 = %371.2;
    (%372, %373)
  };
  %374() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(750), float32]) */
}

def @func_9365() -> (Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), float64], Tensor[(240), float64], Tensor[(240), float64], Tensor[(750), int64]) {
  @func_9363() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), float64], Tensor[(240), float64], Tensor[(240), float64], Tensor[(750), int64]) */
}

def @func_4075(%var_4073: Tensor[(30), float32], %var_4074: Tensor[(210), float32]) -> (Tensor[(6, 12, 3), int8], Tensor[(5, 7, 6), float32], Tensor[(30), float32], Tensor[(210), float32]) {
  @func_4071(%var_4073, %var_4074) /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 7, 6), float32], Tensor[(30), float32], Tensor[(210), float32]) */
}

def @func_2704() -> (Tensor[(6, 12, 3), int8], Tensor[(5, 16, 3), bool], Tensor[(8, 30), float64], Tensor[(6, 12, 3), int8], Tensor[(750), float64], Tensor[(5, 10, 15), float64]) {
  %375 = @func_676() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %376 = cast(meta[relay.Constant][14] /* ty=Tensor[(8, 30), float64] */, dtype="float64") /* ty=Tensor[(8, 30), float64] */;
  %377 = reshape(%376, newshape=[5, 16, 3]) /* ty=Tensor[(5, 16, 3), float64] */;
  %378 = @func_768() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %379 = cast(meta[relay.Constant][15] /* ty=Tensor[(750), float32] */, dtype="float64") /* ty=Tensor[(750), float64] */;
  %380 = cast(meta[relay.Constant][15] /* ty=Tensor[(750), float32] */, dtype="float32") /* ty=Tensor[(750), float32] */;
  %381 = reshape(%380, newshape=[5, 10, 15]) /* ty=Tensor[(5, 10, 15), float32] */;
  %382 = @func_217(%381) /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), uint16], Tensor[(5, 10, 15), float64]) */;
  %383 = %382.2;
  %384 = cast(%383, dtype="float64") /* ty=Tensor[(5, 10, 15), float64] */;
  %385 = sin(%384) /* ty=Tensor[(5, 10, 15), float64] */;
  %386 = cast(meta[relay.Constant][16] /* ty=Tensor[(5, 10, 15), float64] */, dtype="float64") /* ty=Tensor[(5, 10, 15), float64] */;
  %387 = shape_of(%385, dtype="int32") /* ty=Tensor[(3), int32] */;
  %388 = cast(%385, dtype="float64") /* ty=Tensor[(5, 10, 15), float64] */;
  %389 = dyn.reshape(%386, %387, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %390 = %375.1;
  %391 = @func_290(%377) /* ty=Tensor[(5, 16, 3), bool] */;
  %392 = %378.0;
  %393 = asin(%379) /* ty=Tensor[(750), float64] */;
  %394 = power(%388, %389) /* ty=Tensor[(5, 10, 15), float64] */;
  (%390, %391, meta[relay.Constant][14] /* ty=Tensor[(8, 30), float64] */, %392, %393, %394)
}

def @func_7000() -> Tensor[(5, 10, 15), int64] {
  %395 = fn () -> Tensor[(5, 10, 15), int64] {
    @func_3265() /* ty=Tensor[(5, 10, 15), int64] */
  };
  %395() /* ty=Tensor[(5, 10, 15), int64] */
}

def @func_734() -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) {
  @func_732() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */
}

def @func_2292(%var_2291: Tensor[(7, 13, 9), uint64]) -> (Tensor[(7, 13, 9), uint64], Tensor[(1, 12, 8), bool]) {
  %402 = fn (%var_2276: Tensor[(7, 13, 9), uint64]) -> (Tensor[(7, 13, 9), uint64], Tensor[(1, 12, 8), bool]) {
    %396 = cast(%var_2276, dtype="uint64") /* ty=Tensor[(7, 13, 9), uint64] */;
    %397 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(7, 13, 9), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %398 = cast(meta[relay.Constant][17] /* ty=Tensor[(7, 13, 9), uint64] */, dtype="uint64") /* ty=Tensor[(7, 13, 9), uint64] */;
    %399 = dyn.reshape(%396, %397, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %400 = right_shift(%398, %399) /* ty=Tensor[(7, 13, 9), uint64] */;
    %401 = @func_1477() /* ty=Tensor[(1, 12, 8), bool] */;
    (%400, %401)
  };
  %402(%var_2291) /* ty=(Tensor[(7, 13, 9), uint64], Tensor[(1, 12, 8), bool]) */
}

def @func_4655(%var_4654: Tensor[(6, 12, 3), int8]) -> (Tensor[(6, 12, 3), uint32], Tensor[(6, 12, 3), float64]) {
  %412 = fn (%var_4627: Tensor[(6, 12, 3), int8]) -> (Tensor[(6, 12, 3), uint32], Tensor[(6, 12, 3), float64]) {
    %403 = @func_3156() /* ty=(Tensor[(6, 12, 3), int8],) */;
    %404 = %403.0;
    %405 = cast(%var_4627, dtype="uint32") /* ty=Tensor[(6, 12, 3), uint32] */;
    %406 = shape_of(%404, dtype="int32") /* ty=Tensor[(3), int32] */;
    %407 = cast(%404, dtype="uint32") /* ty=Tensor[(6, 12, 3), uint32] */;
    %408 = dyn.reshape(%405, %406, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %409 = cast(%404, dtype="float64") /* ty=Tensor[(6, 12, 3), float64] */;
    %410 = maximum(%407, %408) /* ty=Tensor[(6, 12, 3), uint32] */;
    %411 = log2(%409) /* ty=Tensor[(6, 12, 3), float64] */;
    (%410, %411)
  };
  %412(%var_4654) /* ty=(Tensor[(6, 12, 3), uint32], Tensor[(6, 12, 3), float64]) */
}

def @func_864() -> Tensor[(5, 10, 15), int64] {
  %413 = @func_366() /* ty=(Tensor[(6, 12, 3), float32], Tensor[(5, 10, 15), uint16], Tensor[(750), float32]) */;
  %414 = %413.1;
  %415 = cast(%414, dtype="float32") /* ty=Tensor[(5, 10, 15), float32] */;
  %416 = log(%415) /* ty=Tensor[(5, 10, 15), float32] */;
  %417 = cast(%414, dtype="int64") /* ty=Tensor[(5, 10, 15), int64] */;
  %418 = shape_of(%416, dtype="int32") /* ty=Tensor[(3), int32] */;
  %419 = cast(%416, dtype="int64") /* ty=Tensor[(5, 10, 15), int64] */;
  %420 = dyn.reshape(%417, %418, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  maximum(%419, %420) /* ty=Tensor[(5, 10, 15), int64] */
}

def @func_7098() -> (Tensor[(6, 12, 3), bool], Tensor[(6, 12, 3), int8]) {
  %425 = fn () -> (Tensor[(6, 12, 3), bool], Tensor[(6, 12, 3), int8]) {
    %421 = @func_5457() /* ty=(Tensor[(5, 10, 15), int64], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), bool], Tensor[(6, 12, 3), int8]) */;
    %422 = @func_6194() /* ty=(Tensor[(6, 12, 3), int8],) */;
    %423 = %421.2;
    %424 = %422.0;
    (%423, %424)
  };
  %425() /* ty=(Tensor[(6, 12, 3), bool], Tensor[(6, 12, 3), int8]) */
}

def @func_1031() -> (Tensor[(6, 12, 3), int8], Tensor[(16, 11, 5), float64], Tensor[(880), float64]) {
  %431 = fn () -> (Tensor[(6, 12, 3), int8], Tensor[(16, 11, 5), float64], Tensor[(880), float64]) {
    %426 = @func_991() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
    %427 = cast(meta[relay.Constant][18] /* ty=Tensor[(880), float64] */, dtype="float64") /* ty=Tensor[(880), float64] */;
    %428 = reshape(%427, newshape=[16, 11, 5]) /* ty=Tensor[(16, 11, 5), float64] */;
    %429 = %426.1;
    %430 = @func_934(%428) /* ty=Tensor[(16, 11, 5), float64] */;
    (%429, %430, meta[relay.Constant][18] /* ty=Tensor[(880), float64] */)
  };
  %431() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(16, 11, 5), float64], Tensor[(880), float64]) */
}

def @func_570() -> Tensor[(6, 12, 3), int8] {
  %432 = @func_121() /* ty=(Tensor[(6, 12, 3), int8],) */;
  %432.0
}

def @func_1066() -> (Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) {
  @func_1064() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) */
}

def @func_9171() -> (Tensor[(5, 10, 15), uint8], Tensor[(5, 10, 15), bool], Tensor[(5, 10, 15), bool]) {
  %439 = fn () -> (Tensor[(5, 10, 15), uint8], Tensor[(5, 10, 15), bool], Tensor[(5, 10, 15), bool]) {
    %433 = @func_1986() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(5, 10, 15), int64], Tensor[(14, 12, 5), uint64], Tensor[(840), float64], Tensor[(5, 10, 15), uint8]) */;
    %434 = @func_8814() /* ty=(Tensor[(5, 10, 15), bool],) */;
    %435 = @func_8814() /* ty=(Tensor[(5, 10, 15), bool],) */;
    %436 = %433.4;
    %437 = %434.0;
    %438 = %435.0;
    (%436, %437, %438)
  };
  %439() /* ty=(Tensor[(5, 10, 15), uint8], Tensor[(5, 10, 15), bool], Tensor[(5, 10, 15), bool]) */
}

def @func_2134(%var_2132: Tensor[(5, 10, 15), int64]) -> (Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), bool], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(880), float64]) {
  @func_2131(%var_2132) /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), bool], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(880), float64]) */
}

def @func_8807() -> Tensor[(12, 13, 10), float32] {
  %441 = fn () -> Tensor[(12, 13, 10), float32] {
    %440 = cast(meta[relay.Constant][19] /* ty=Tensor[(12, 13, 10), float32] */, dtype="float32") /* ty=Tensor[(12, 13, 10), float32] */;
    exp(%440) /* ty=Tensor[(12, 13, 10), float32] */
  };
  %441() /* ty=Tensor[(12, 13, 10), float32] */
}

def @func_2581() -> (Tensor[(5, 10, 15), bool], Tensor[(6, 12, 3), int8]) {
  %446 = fn () -> (Tensor[(5, 10, 15), bool], Tensor[(6, 12, 3), int8]) {
    %442 = @func_1986() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(5, 10, 15), int64], Tensor[(14, 12, 5), uint64], Tensor[(840), float64], Tensor[(5, 10, 15), uint8]) */;
    %443 = @func_1330() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) */;
    %444 = %442.0;
    %445 = %443.0;
    (%444, %445)
  };
  %446() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(6, 12, 3), int8]) */
}

def @func_3156() -> (Tensor[(6, 12, 3), int8],) {
  %447 = @func_570() /* ty=Tensor[(6, 12, 3), int8] */;
  (%447,)
}

def @func_8496() -> Tensor[(6, 12, 3), int8] {
  @func_8494() /* ty=Tensor[(6, 12, 3), int8] */
}

def @func_1531() -> (Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) {
  %452 = fn () -> (Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) {
    %448 = @func_676() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
    %449 = @func_1330() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) */;
    %450 = %448.1;
    %451 = %449.1;
    (%450, %451)
  };
  %452() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) */
}

def @func_4587() -> (Tensor[(1, 12, 8), bool], Tensor[(6, 12, 3), int8]) {
  %453 = @func_1477() /* ty=Tensor[(1, 12, 8), bool] */;
  %454 = @func_1034() /* ty=Tensor[(6, 12, 3), int8] */;
  (%453, %454)
}

def @func_8601(%var_8600: Tensor[(240), float64]) -> (Tensor[(14, 12, 5), float32], Tensor[(5, 16, 3), bool], Tensor[(240), float64]) {
  %462 = fn (%var_8580: Tensor[(240), float64]) -> (Tensor[(14, 12, 5), float32], Tensor[(5, 16, 3), bool], Tensor[(240), float64]) {
    %455 = @func_6832() /* ty=(Tensor[(14, 12, 5), uint64], Tensor[(6, 12, 3), int8]) */;
    %456 = %455.0;
    %457 = cast(%456, dtype="float32") /* ty=Tensor[(14, 12, 5), float32] */;
    %458 = cast(%var_8580, dtype="float64") /* ty=Tensor[(240), float64] */;
    %459 = reshape(%458, newshape=[5, 16, 3]) /* ty=Tensor[(5, 16, 3), float64] */;
    %460 = log2(%457) /* ty=Tensor[(14, 12, 5), float32] */;
    %461 = @func_290(%459) /* ty=Tensor[(5, 16, 3), bool] */;
    (%460, %461, %var_8580)
  };
  %462(%var_8600) /* ty=(Tensor[(14, 12, 5), float32], Tensor[(5, 16, 3), bool], Tensor[(240), float64]) */
}

def @func_1862(%var_1860: Tensor[(14, 12, 5), float64]) -> (Tensor[(14, 12, 5), uint64], Tensor[(14, 12, 5), float64]) {
  @func_1859(%var_1860) /* ty=(Tensor[(14, 12, 5), uint64], Tensor[(14, 12, 5), float64]) */
}

def @func_6264() -> (Tensor[(7, 11, 12), float64], Tensor[(6, 12, 3), int8]) {
  %463 = @func_3292() /* ty=(Tensor[(1, 12, 8), bool], Tensor[(7, 11, 12), float64], Tensor[(6, 36), int8]) */;
  %464 = @func_4854() /* ty=(Tensor[(6, 12, 3), int8],) */;
  %465 = %463.1;
  %466 = %464.0;
  (%465, %466)
}

def @func_6490() -> (Tensor[(6, 12, 3), int8],) {
  @func_6488() /* ty=(Tensor[(6, 12, 3), int8],) */
}

def @func_9589() -> (Tensor[(240), float64], Tensor[(6, 12, 3), int8]) {
  %471 = fn () -> (Tensor[(240), float64], Tensor[(6, 12, 3), int8]) {
    %467 = @func_5471() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(240), float64], Tensor[(240), float64]) */;
    %468 = @func_6488() /* ty=(Tensor[(6, 12, 3), int8],) */;
    %469 = %467.2;
    %470 = %468.0;
    (%469, %470)
  };
  %471() /* ty=(Tensor[(240), float64], Tensor[(6, 12, 3), int8]) */
}

def @func_9057() -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), float64], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) {
  %483 = fn () -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), float64], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) {
    %472 = @func_1761() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
    %473 = @func_5252() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(1, 12, 8), bool]) */;
    %474 = @func_8814() /* ty=(Tensor[(5, 10, 15), bool],) */;
    %475 = %474.0;
    %476 = cast(%475, dtype="float64") /* ty=Tensor[(5, 10, 15), float64] */;
    %477 = @func_6194() /* ty=(Tensor[(6, 12, 3), int8],) */;
    %478 = %472.1;
    %479 = %473.0;
    %480 = log10(%476) /* ty=Tensor[(5, 10, 15), float64] */;
    %481 = %477.0;
    %482 = @func_8494() /* ty=Tensor[(6, 12, 3), int8] */;
    (%478, %479, %480, %481, %482)
  };
  %483() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), float64], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */
}

def @func_9363() -> (Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), float64], Tensor[(240), float64], Tensor[(240), float64], Tensor[(750), int64]) {
  %484 = @func_6723() /* ty=(Tensor[(840), float64], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %485 = @func_366() /* ty=(Tensor[(6, 12, 3), float32], Tensor[(5, 10, 15), uint16], Tensor[(750), float32]) */;
  %486 = %485.1;
  %487 = cast(%486, dtype="float64") /* ty=Tensor[(5, 10, 15), float64] */;
  %488 = cast(meta[relay.Constant][20] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %489 = reshape(%488, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %490 = @func_3096(%489) /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(240), float64], Tensor[(1200), float64], Tensor[(6, 12, 3), int8], Tensor[(750), float32], Tensor[(6, 12, 3), int8], Tensor[(750), float32]) */;
  %491 = @func_2536() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(750), int64]) */;
  %492 = %484.1;
  %493 = tan(%487) /* ty=Tensor[(5, 10, 15), float64] */;
  %494 = %490.3;
  %495 = %491.3;
  (%492, %493, %494, meta[relay.Constant][20] /* ty=Tensor[(240), float64] */, %495)
}

def @func_8494() -> Tensor[(6, 12, 3), int8] {
  %496 = @func_1530() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) */;
  %496.0
}

def @func_1509() -> Tensor[(750), float32] {
  @func_1507() /* ty=Tensor[(750), float32] */
}

def @func_5089(%var_5086: Tensor[(2, 3, 8), float32], %var_5087: Tensor[(288), float32], %var_5088: Tensor[(3360), float64]) -> (Tensor[(6, 12, 3), int8], Tensor[(750), float32], Tensor[(240), float64], Tensor[(288), float32], Tensor[(3360), float64], Tensor[(5, 10, 15), uint16], Tensor[(2, 3, 8), bool]) {
  %514 = fn (%var_5034: Tensor[(2, 3, 8), float32], %var_5054: Tensor[(288), float32], %var_5055: Tensor[(3360), float64]) -> (Tensor[(6, 12, 3), int8], Tensor[(750), float32], Tensor[(240), float64], Tensor[(288), float32], Tensor[(3360), float64], Tensor[(5, 10, 15), uint16], Tensor[(2, 3, 8), bool]) {
    %497 = @func_732() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
    %498 = cast(%var_5054, dtype="float32") /* ty=Tensor[(288), float32] */;
    %499 = cast(%var_5055, dtype="float64") /* ty=Tensor[(3360), float64] */;
    %500 = reshape(%498, newshape=[12, 12, 2]) /* ty=Tensor[(12, 12, 2), float32] */;
    %501 = reshape(%499, newshape=[3360]) /* ty=Tensor[(3360), float64] */;
    %502 = @func_3461(%500, %501) /* ty=(Tensor[(12, 12, 2), float32], Tensor[(6, 12, 3), int8], Tensor[(240), float64], Tensor[(3360), float64]) */;
    %503 = cast(%var_5034, dtype="float32") /* ty=Tensor[(2, 3, 8), float32] */;
    %504 = sin(%503) /* ty=Tensor[(2, 3, 8), float32] */;
    %505 = cast(%var_5034, dtype="bool") /* ty=Tensor[(2, 3, 8), bool] */;
    %506 = shape_of(%504, dtype="int32") /* ty=Tensor[(3), int32] */;
    %507 = cast(%504, dtype="bool") /* ty=Tensor[(2, 3, 8), bool] */;
    %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %509 = %497.0;
    %510 = @func_1507() /* ty=Tensor[(750), float32] */;
    %511 = %502.2;
    %512 = @func_3006() /* ty=Tensor[(5, 10, 15), uint16] */;
    %513 = greater_equal(%507, %508) /* ty=Tensor[(2, 3, 8), bool] */;
    (%509, %510, %511, %var_5054, %var_5055, %512, %513)
  };
  %514(%var_5086, %var_5087, %var_5088) /* ty=(Tensor[(6, 12, 3), int8], Tensor[(750), float32], Tensor[(240), float64], Tensor[(288), float32], Tensor[(3360), float64], Tensor[(5, 10, 15), uint16], Tensor[(2, 3, 8), bool]) */
}

def @func_3158() -> (Tensor[(6, 12, 3), int8],) {
  @func_3156() /* ty=(Tensor[(6, 12, 3), int8],) */
}

def @func_1741(%var_1717: Tensor[(13, 16, 7), float32], %var_1739: Tensor[(880), float64]) -> (Tensor[(13, 16, 7), float32], Tensor[(16, 11, 5), float64], Tensor[(880), float64]) {
  %515 = cast(%var_1717, dtype="float32") /* ty=Tensor[(13, 16, 7), float32] */;
  %516 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(13, 16, 7), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %517 = cast(meta[relay.Constant][21] /* ty=Tensor[(13, 16, 7), float32] */, dtype="float32") /* ty=Tensor[(13, 16, 7), float32] */;
  %518 = dyn.reshape(%515, %516, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %519 = cast(%var_1739, dtype="float64") /* ty=Tensor[(880), float64] */;
  %520 = reshape(%519, newshape=[16, 11, 5]) /* ty=Tensor[(16, 11, 5), float64] */;
  %521 = floor_divide(%517, %518) /* ty=Tensor[(13, 16, 7), float32] */;
  %522 = @func_934(%520) /* ty=Tensor[(16, 11, 5), float64] */;
  (%521, %522, %var_1739)
}

def @func_3405() -> Tensor[(14, 12, 5), uint64] {
  @func_3403() /* ty=Tensor[(14, 12, 5), uint64] */
}

def @func_4393(%var_4391: Tensor[(3360), float64]) -> (Tensor[(6, 12, 3), int8], Tensor[(240), float64], Tensor[(240), float64], Tensor[(3360), float64]) {
  @func_4390(%var_4391) /* ty=(Tensor[(6, 12, 3), int8], Tensor[(240), float64], Tensor[(240), float64], Tensor[(3360), float64]) */
}

def @func_4935() -> Tensor[(6, 12, 3), int8] {
  @func_4933() /* ty=Tensor[(6, 12, 3), int8] */
}

def @func_5273() -> (Tensor[(840), float64], Tensor[(6, 12, 3), int8]) {
  @func_5271() /* ty=(Tensor[(840), float64], Tensor[(6, 12, 3), int8]) */
}

def @func_5742(%var_5702: Tensor[(14, 12, 8), bool]) -> (Tensor[(14, 12, 8), bool], Tensor[(240), float64], Tensor[(240), float64], Tensor[(3360), float64], Tensor[(840), float64]) {
  %523 = @func_4587() /* ty=(Tensor[(1, 12, 8), bool], Tensor[(6, 12, 3), int8]) */;
  %524 = %523.0;
  %525 = cast(%524, dtype="bool") /* ty=Tensor[(1, 12, 8), bool] */;
  %526 = cast(%var_5702, dtype="bool") /* ty=Tensor[(14, 12, 8), bool] */;
  %527 = cast(meta[relay.Constant][22] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %528 = cast(meta[relay.Constant][23] /* ty=Tensor[(3360), float64] */, dtype="float64") /* ty=Tensor[(3360), float64] */;
  %529 = reshape(%527, newshape=[240, 1]) /* ty=Tensor[(240, 1), float64] */;
  %530 = reshape(%528, newshape=[240, 14]) /* ty=Tensor[(240, 14), float64] */;
  %531 = @func_1422(%529, %530) /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(240), float64], Tensor[(6, 12, 3), int8], Tensor[(240, 14), float64]) */;
  %532 = @func_1986() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(5, 10, 15), int64], Tensor[(14, 12, 5), uint64], Tensor[(840), float64], Tensor[(5, 10, 15), uint8]) */;
  %533 = less_equal(%525, %526) /* ty=Tensor[(14, 12, 8), bool] */;
  %534 = %531.2;
  %535 = %532.3;
  (%533, %534, meta[relay.Constant][22] /* ty=Tensor[(240), float64] */, meta[relay.Constant][23] /* ty=Tensor[(3360), float64] */, %535)
}

def @func_2784() -> (Tensor[(5, 10, 15), bool], Tensor[(6, 12, 3), int8]) {
  %540 = fn () -> (Tensor[(5, 10, 15), bool], Tensor[(6, 12, 3), int8]) {
    %536 = @func_1986() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(5, 10, 15), int64], Tensor[(14, 12, 5), uint64], Tensor[(840), float64], Tensor[(5, 10, 15), uint8]) */;
    %537 = @func_1330() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) */;
    %538 = %536.0;
    %539 = %537.0;
    (%538, %539)
  };
  %540() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(6, 12, 3), int8]) */
}

def @func_8773(%var_8769: Tensor[(5, 10, 15), bool], %var_8770: Tensor[(5, 10, 15), bool], %var_8771: Tensor[(1, 240), float64], %var_8772: Tensor[(180), float32]) -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), uint16], Tensor[(5, 10, 15), float32], Tensor[(5, 16, 3), bool], Tensor[(1, 240), float64], Tensor[(5, 10, 15), int64], Tensor[(750), float32], Tensor[(6, 12, 3), int8], Tensor[(12, 15, 1), float32], Tensor[(180), float32]) {
  @func_8767(%var_8769, %var_8770, %var_8771, %var_8772) /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), uint16], Tensor[(5, 10, 15), float32], Tensor[(5, 16, 3), bool], Tensor[(1, 240), float64], Tensor[(5, 10, 15), int64], Tensor[(750), float32], Tensor[(6, 12, 3), int8], Tensor[(12, 15, 1), float32], Tensor[(180), float32]) */
}

def @func_220(%var_218: Tensor[(5, 10, 15), float32]) -> (Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), uint16], Tensor[(5, 10, 15), float64]) {
  @func_217(%var_218) /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), uint16], Tensor[(5, 10, 15), float64]) */
}

def @func_8416() -> Tensor[(1, 12, 8), bool] {
  %542 = fn () -> Tensor[(1, 12, 8), bool] {
    %541 = @func_3292() /* ty=(Tensor[(1, 12, 8), bool], Tensor[(7, 11, 12), float64], Tensor[(6, 36), int8]) */;
    %541.0
  };
  %542() /* ty=Tensor[(1, 12, 8), bool] */
}

def @func_3508() -> (Tensor[(3, 13, 8), int32], Tensor[(3, 13, 8), float32]) {
  %555 = fn () -> (Tensor[(3, 13, 8), int32], Tensor[(3, 13, 8), float32]) {
    %543 = cast(meta[relay.Constant][25] /* ty=Tensor[(3, 13, 8), uint32] */, dtype="uint32") /* ty=Tensor[(3, 13, 8), uint32] */;
    %544 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(3, 13, 8), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %545 = cast(meta[relay.Constant][24] /* ty=Tensor[(3, 13, 8), uint32] */, dtype="uint32") /* ty=Tensor[(3, 13, 8), uint32] */;
    %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %547 = bitwise_xor(%545, %546) /* ty=Tensor[(3, 13, 8), uint32] */;
    %548 = cast(%547, dtype="int32") /* ty=Tensor[(3, 13, 8), int32] */;
    %549 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(3, 13, 8), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %550 = cast(meta[relay.Constant][24] /* ty=Tensor[(3, 13, 8), uint32] */, dtype="int32") /* ty=Tensor[(3, 13, 8), int32] */;
    %551 = dyn.reshape(%548, %549, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %552 = cast(meta[relay.Constant][24] /* ty=Tensor[(3, 13, 8), uint32] */, dtype="float32") /* ty=Tensor[(3, 13, 8), float32] */;
    %553 = add(%550, %551) /* ty=Tensor[(3, 13, 8), int32] */;
    %554 = acosh(%552) /* ty=Tensor[(3, 13, 8), float32] */;
    (%553, %554)
  };
  %555() /* ty=(Tensor[(3, 13, 8), int32], Tensor[(3, 13, 8), float32]) */
}

def @func_5968(%var_5949: Tensor[(14, 12, 5), uint64]) -> (Tensor[(2, 120), float64], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), uint32], Tensor[(6, 12, 3), int8]) {
  %556 = @func_5229() /* ty=(Tensor[(5, 10, 15), int64], Tensor[(5, 10, 15), uint16], Tensor[(2, 120), float64], Tensor[(6, 12, 3), int8]) */;
  %557 = @func_732() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %558 = @func_5809() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), uint64]) */;
  %559 = %558.1;
  %560 = cast(%var_5949, dtype="uint32") /* ty=Tensor[(14, 12, 5), uint32] */;
  %561 = shape_of(%559, dtype="int32") /* ty=Tensor[(3), int32] */;
  %562 = cast(%559, dtype="uint32") /* ty=Tensor[(14, 12, 5), uint32] */;
  %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %564 = @func_5012() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %565 = %556.2;
  %566 = @func_4973() /* ty=Tensor[(6, 12, 3), int8] */;
  %567 = %557.1;
  %568 = maximum(%562, %563) /* ty=Tensor[(14, 12, 5), uint32] */;
  %569 = %564.1;
  (%565, %566, %567, %568, %569)
}

def @func_8899(%var_8896: Tensor[(10, 13, 5), uint64], %var_8897: Tensor[(10, 13, 5), uint64], %var_8898: Tensor[(10, 13, 5), uint64]) -> (Tensor[(10, 13, 5), uint8], Tensor[(6, 12, 3), int8], Tensor[(10, 13, 5), float64], Tensor[(420, 2), float64]) {
  %586 = fn (%var_8834: Tensor[(10, 13, 5), uint64], %var_8835: Tensor[(10, 13, 5), uint64], %var_8874: Tensor[(10, 13, 5), uint64]) -> (Tensor[(10, 13, 5), uint8], Tensor[(6, 12, 3), int8], Tensor[(10, 13, 5), float64], Tensor[(420, 2), float64]) {
    %570 = cast(%var_8835, dtype="uint64") /* ty=Tensor[(10, 13, 5), uint64] */;
    %571 = shape_of(%var_8834, dtype="int32") /* ty=Tensor[(3), int32] */;
    %572 = cast(%var_8834, dtype="uint64") /* ty=Tensor[(10, 13, 5), uint64] */;
    %573 = dyn.reshape(%570, %571, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %574 = add(%572, %573) /* ty=Tensor[(10, 13, 5), uint64] */;
    %575 = cast(%var_8874, dtype="uint8") /* ty=Tensor[(10, 13, 5), uint8] */;
    %576 = shape_of(%574, dtype="int32") /* ty=Tensor[(3), int32] */;
    %577 = cast(%574, dtype="uint8") /* ty=Tensor[(10, 13, 5), uint8] */;
    %578 = dyn.reshape(%575, %576, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %579 = @func_7097() /* ty=(Tensor[(6, 12, 3), bool], Tensor[(6, 12, 3), int8]) */;
    %580 = cast(%var_8874, dtype="float64") /* ty=Tensor[(10, 13, 5), float64] */;
    %581 = @func_1877() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), uint64], Tensor[(420, 2), float64]) */;
    %582 = minimum(%577, %578) /* ty=Tensor[(10, 13, 5), uint8] */;
    %583 = %579.1;
    %584 = atanh(%580) /* ty=Tensor[(10, 13, 5), float64] */;
    %585 = %581.2;
    (%582, %583, %584, %585)
  };
  %586(%var_8896, %var_8897, %var_8898) /* ty=(Tensor[(10, 13, 5), uint8], Tensor[(6, 12, 3), int8], Tensor[(10, 13, 5), float64], Tensor[(420, 2), float64]) */
}

def @func_4855() -> (Tensor[(6, 12, 3), int8],) {
  %589 = fn () -> (Tensor[(6, 12, 3), int8],) {
    %587 = @func_676() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
    %588 = %587.1;
    (%588,)
  };
  %589() /* ty=(Tensor[(6, 12, 3), int8],) */
}

def @func_2706() -> (Tensor[(6, 12, 3), int8], Tensor[(5, 16, 3), bool], Tensor[(8, 30), float64], Tensor[(6, 12, 3), int8], Tensor[(750), float64], Tensor[(5, 10, 15), float64]) {
  @func_2704() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 16, 3), bool], Tensor[(8, 30), float64], Tensor[(6, 12, 3), int8], Tensor[(750), float64], Tensor[(5, 10, 15), float64]) */
}

def @func_2428(%var_2414: Tensor[(14, 12, 5), uint64]) -> (Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), bool], Tensor[(6, 12, 3), int8]) {
  %590 = @func_2206() /* ty=(Tensor[(6, 12, 3), int8],) */;
  %591 = @func_1986() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(5, 10, 15), int64], Tensor[(14, 12, 5), uint64], Tensor[(840), float64], Tensor[(5, 10, 15), uint8]) */;
  %592 = %591.2;
  %593 = cast(%var_2414, dtype="bool") /* ty=Tensor[(14, 12, 5), bool] */;
  %594 = shape_of(%592, dtype="int32") /* ty=Tensor[(3), int32] */;
  %595 = cast(%592, dtype="bool") /* ty=Tensor[(14, 12, 5), bool] */;
  %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %597 = %590.0;
  %598 = not_equal(%595, %596) /* ty=Tensor[(14, 12, 5), bool] */;
  %599 = @func_570() /* ty=Tensor[(6, 12, 3), int8] */;
  (%597, %598, %599)
}

def @func_447(%var_445: Tensor[(6, 12, 3), int8]) -> Tensor[(6, 12, 3), bool] {
  @func_444(%var_445) /* ty=Tensor[(6, 12, 3), bool] */
}

def @func_5633() -> (Tensor[(240), float64], Tensor[(420, 2), float64]) {
  %604 = fn () -> (Tensor[(240), float64], Tensor[(420, 2), float64]) {
    %600 = @func_5471() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(240), float64], Tensor[(240), float64]) */;
    %601 = @func_1877() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), uint64], Tensor[(420, 2), float64]) */;
    %602 = %600.2;
    %603 = %601.2;
    (%602, %603)
  };
  %604() /* ty=(Tensor[(240), float64], Tensor[(420, 2), float64]) */
}

def @func_9451() -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) {
  %605 = @func_676() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %606 = @func_2704() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 16, 3), bool], Tensor[(8, 30), float64], Tensor[(6, 12, 3), int8], Tensor[(750), float64], Tensor[(5, 10, 15), float64]) */;
  %607 = %605.0;
  %608 = %606.0;
  (%607, %608)
}

def @func_4680() -> Tensor[(6, 12, 3), int8] {
  %609 = @func_2704() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 16, 3), bool], Tensor[(8, 30), float64], Tensor[(6, 12, 3), int8], Tensor[(750), float64], Tensor[(5, 10, 15), float64]) */;
  %609.0
}

def @func_8545() -> (Tensor[(6, 12, 3), int8],) {
  @func_8543() /* ty=(Tensor[(6, 12, 3), int8],) */
}

def @func_1859(%var_1833: Tensor[(14, 12, 5), float64]) -> (Tensor[(14, 12, 5), uint64], Tensor[(14, 12, 5), float64]) {
  %610 = cast(%var_1833, dtype="float64") /* ty=Tensor[(14, 12, 5), float64] */;
  %611 = acos(%610) /* ty=Tensor[(14, 12, 5), float64] */;
  %612 = cast(%611, dtype="float64") /* ty=Tensor[(14, 12, 5), float64] */;
  %613 = cos(%612) /* ty=Tensor[(14, 12, 5), float64] */;
  %614 = cast(%var_1833, dtype="uint64") /* ty=Tensor[(14, 12, 5), uint64] */;
  %615 = shape_of(%613, dtype="int32") /* ty=Tensor[(3), int32] */;
  %616 = cast(%613, dtype="uint64") /* ty=Tensor[(14, 12, 5), uint64] */;
  %617 = dyn.reshape(%614, %615, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %618 = cast(%611, dtype="float64") /* ty=Tensor[(14, 12, 5), float64] */;
  %619 = multiply(%616, %617) /* ty=Tensor[(14, 12, 5), uint64] */;
  %620 = exp(%618) /* ty=Tensor[(14, 12, 5), float64] */;
  (%619, %620)
}

def @func_4152() -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(3, 13, 8), float32]) {
  %621 = @func_768() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %622 = @func_3507() /* ty=(Tensor[(3, 13, 8), int32], Tensor[(3, 13, 8), float32]) */;
  %623 = %621.0;
  %624 = @func_2362() /* ty=Tensor[(6, 12, 3), int8] */;
  %625 = %622.1;
  (%623, %624, %625)
}

def @func_8543() -> (Tensor[(6, 12, 3), int8],) {
  %626 = @func_4152() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(3, 13, 8), float32]) */;
  %627 = %626.0;
  (%627,)
}

def @func_1986() -> (Tensor[(5, 10, 15), bool], Tensor[(5, 10, 15), int64], Tensor[(14, 12, 5), uint64], Tensor[(840), float64], Tensor[(5, 10, 15), uint8]) {
  %628 = @func_1330() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) */;
  %629 = %628.1;
  %630 = cast(meta[relay.Constant][26] /* ty=Tensor[(5, 10, 15), int64] */, dtype="bool") /* ty=Tensor[(5, 10, 15), bool] */;
  %631 = shape_of(%629, dtype="int32") /* ty=Tensor[(3), int32] */;
  %632 = cast(%629, dtype="bool") /* ty=Tensor[(5, 10, 15), bool] */;
  %633 = dyn.reshape(%630, %631, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %634 = @func_1064() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) */;
  %635 = cast(meta[relay.Constant][27] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %636 = reshape(%635, newshape=[14, 12, 5]) /* ty=Tensor[(14, 12, 5), float64] */;
  %637 = @func_1859(%636) /* ty=(Tensor[(14, 12, 5), uint64], Tensor[(14, 12, 5), float64]) */;
  %638 = cast(meta[relay.Constant][26] /* ty=Tensor[(5, 10, 15), int64] */, dtype="uint32") /* ty=Tensor[(5, 10, 15), uint32] */;
  %639 = shape_of(%629, dtype="int32") /* ty=Tensor[(3), int32] */;
  %640 = cast(%629, dtype="uint32") /* ty=Tensor[(5, 10, 15), uint32] */;
  %641 = dyn.reshape(%638, %639, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %642 = minimum(%640, %641) /* ty=Tensor[(5, 10, 15), uint32] */;
  %643 = cast(meta[relay.Constant][26] /* ty=Tensor[(5, 10, 15), int64] */, dtype="uint8") /* ty=Tensor[(5, 10, 15), uint8] */;
  %644 = shape_of(%642, dtype="int32") /* ty=Tensor[(3), int32] */;
  %645 = cast(%642, dtype="uint8") /* ty=Tensor[(5, 10, 15), uint8] */;
  %646 = dyn.reshape(%643, %644, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %647 = logical_or(%632, %633) /* ty=Tensor[(5, 10, 15), bool] */;
  %648 = %634.1;
  %649 = %637.0;
  %650 = multiply(%645, %646) /* ty=Tensor[(5, 10, 15), uint8] */;
  (%647, %648, %649, meta[relay.Constant][27] /* ty=Tensor[(840), float64] */, %650)
}

def @main() -> (Tensor[(14, 12, 5), float64], Tensor[(14, 12, 5), float32]) {
  %651 = @func_1988() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(5, 10, 15), int64], Tensor[(14, 12, 5), uint64], Tensor[(840), float64], Tensor[(5, 10, 15), uint8]) */;
  %652 = %651.2;
  %653 = cast(%652, dtype="float64") /* ty=Tensor[(14, 12, 5), float64] */;
  %654 = cast(%652, dtype="float32") /* ty=Tensor[(14, 12, 5), float32] */;
  %655 = sin(%653) /* ty=Tensor[(14, 12, 5), float64] */;
  %656 = sinh(%654) /* ty=Tensor[(14, 12, 5), float32] */;
  (%655, %656)
}

def @func_6803() -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64], Tensor[(216), int8]) {
  @func_6801() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64], Tensor[(216), int8]) */
}

def @func_2131(%var_2082: Tensor[(5, 10, 15), int64]) -> (Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), bool], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(880), float64]) {
  %657 = @func_991() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %658 = @func_1530() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) */;
  %659 = %658.1;
  %660 = cast(%var_2082, dtype="bool") /* ty=Tensor[(5, 10, 15), bool] */;
  %661 = shape_of(%659, dtype="int32") /* ty=Tensor[(3), int32] */;
  %662 = cast(%659, dtype="bool") /* ty=Tensor[(5, 10, 15), bool] */;
  %663 = dyn.reshape(%660, %661, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %664 = @func_1064() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) */;
  %665 = @func_732() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %666 = @func_1030() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(16, 11, 5), float64], Tensor[(880), float64]) */;
  %667 = %657.0;
  %668 = equal(%662, %663) /* ty=Tensor[(5, 10, 15), bool] */;
  %669 = %664.0;
  %670 = %665.0;
  %671 = %666.2;
  (%667, %668, %669, %670, %671)
}

def @func_5487() -> (Tensor[(6, 12, 3), int8],) {
  %672 = @func_5121() /* ty=Tensor[(6, 12, 3), int8] */;
  (%672,)
}

def @func_3840() -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) {
  %673 = @func_1064() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) */;
  %674 = @func_732() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %675 = %673.0;
  %676 = %674.0;
  (%675, %676)
}

def @func_4499(%var_4498: Tensor[(14, 12, 5), float64]) -> Tensor[(14, 12, 5), int64] {
  %683 = fn (%var_4492: Tensor[(14, 12, 5), float64]) -> Tensor[(14, 12, 5), int64] {
    %677 = @func_2916() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), float64], Tensor[(840), float64]) */;
    %678 = %677.2;
    %679 = cast(%var_4492, dtype="int64") /* ty=Tensor[(14, 12, 5), int64] */;
    %680 = shape_of(%678, dtype="int32") /* ty=Tensor[(3), int32] */;
    %681 = cast(%678, dtype="int64") /* ty=Tensor[(14, 12, 5), int64] */;
    %682 = dyn.reshape(%679, %680, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    bitwise_xor(%681, %682) /* ty=Tensor[(14, 12, 5), int64] */
  };
  %683(%var_4498) /* ty=Tensor[(14, 12, 5), int64] */
}

def @func_2207() -> (Tensor[(6, 12, 3), int8],) {
  %686 = fn () -> (Tensor[(6, 12, 3), int8],) {
    %684 = @func_1064() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) */;
    %685 = %684.0;
    (%685,)
  };
  %686() /* ty=(Tensor[(6, 12, 3), int8],) */
}

def @func_4055(%var_4053: Tensor[(3, 13, 8), int32], %var_4054: Tensor[(3, 13, 8), bool]) -> (Tensor[(3, 13, 8), bool], Tensor[(3, 13, 8), bool]) {
  %704 = fn (%var_4029: Tensor[(3, 13, 8), int32], %var_4038: Tensor[(3, 13, 8), bool]) -> (Tensor[(3, 13, 8), bool], Tensor[(3, 13, 8), bool]) {
    %687 = @func_3507() /* ty=(Tensor[(3, 13, 8), int32], Tensor[(3, 13, 8), float32]) */;
    %688 = %687.0;
    %689 = cast(%var_4029, dtype="bool") /* ty=Tensor[(3, 13, 8), bool] */;
    %690 = shape_of(%688, dtype="int32") /* ty=Tensor[(3), int32] */;
    %691 = cast(%688, dtype="bool") /* ty=Tensor[(3, 13, 8), bool] */;
    %692 = dyn.reshape(%689, %690, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %693 = greater_equal(%691, %692) /* ty=Tensor[(3, 13, 8), bool] */;
    %694 = cast(%var_4038, dtype="bool") /* ty=Tensor[(3, 13, 8), bool] */;
    %695 = shape_of(%693, dtype="int32") /* ty=Tensor[(3), int32] */;
    %696 = cast(%693, dtype="bool") /* ty=Tensor[(3, 13, 8), bool] */;
    %697 = dyn.reshape(%694, %695, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %698 = cast(%688, dtype="bool") /* ty=Tensor[(3, 13, 8), bool] */;
    %699 = shape_of(%693, dtype="int32") /* ty=Tensor[(3), int32] */;
    %700 = cast(%693, dtype="bool") /* ty=Tensor[(3, 13, 8), bool] */;
    %701 = dyn.reshape(%698, %699, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %702 = less_equal(%696, %697) /* ty=Tensor[(3, 13, 8), bool] */;
    %703 = equal(%700, %701) /* ty=Tensor[(3, 13, 8), bool] */;
    (%702, %703)
  };
  %704(%var_4053, %var_4054) /* ty=(Tensor[(3, 13, 8), bool], Tensor[(3, 13, 8), bool]) */
}

def @func_5745(%var_5743: Tensor[(14, 12, 8), bool]) -> (Tensor[(14, 12, 8), bool], Tensor[(240), float64], Tensor[(240), float64], Tensor[(3360), float64], Tensor[(840), float64]) {
  @func_5742(%var_5743) /* ty=(Tensor[(14, 12, 8), bool], Tensor[(240), float64], Tensor[(240), float64], Tensor[(3360), float64], Tensor[(840), float64]) */
}

def @func_1763() -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) {
  @func_1761() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */
}

def @func_6153() -> (Tensor[(5, 10, 15), uint16],) {
  %705 = @func_3006() /* ty=Tensor[(5, 10, 15), uint16] */;
  (%705,)
}

def @func_6604(%var_6576: Tensor[(8, 4, 2), float64]) -> (Tensor[(5, 10, 15), bool], Tensor[(8, 4, 2), float64], Tensor[(5, 7, 6), float32], Tensor[(30), float32], Tensor[(210), float32]) {
  %706 = @func_2580() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(6, 12, 3), int8]) */;
  %707 = cast(%var_6576, dtype="float64") /* ty=Tensor[(8, 4, 2), float64] */;
  %708 = sigmoid(%707) /* ty=Tensor[(8, 4, 2), float64] */;
  %709 = cast(%708, dtype="float64") /* ty=Tensor[(8, 4, 2), float64] */;
  %710 = cast(meta[relay.Constant][28] /* ty=Tensor[(30), float32] */, dtype="float32") /* ty=Tensor[(30), float32] */;
  %711 = cast(meta[relay.Constant][29] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %712 = reshape(%710, newshape=[5, 1, 6]) /* ty=Tensor[(5, 1, 6), float32] */;
  %713 = reshape(%711, newshape=[5, 7, 6]) /* ty=Tensor[(5, 7, 6), float32] */;
  %714 = @func_649(%712, %713) /* ty=(Tensor[(5, 7, 6), float32], Tensor[(5, 7, 6), float32]) */;
  %715 = %706.0;
  %716 = sqrt(%709) /* ty=Tensor[(8, 4, 2), float64] */;
  %717 = %714.1;
  (%715, %716, %717, meta[relay.Constant][28] /* ty=Tensor[(30), float32] */, meta[relay.Constant][29] /* ty=Tensor[(210), float32] */)
}

def @func_7364() -> (Tensor[(6, 12, 3), int8],) {
  %720 = fn () -> (Tensor[(6, 12, 3), int8],) {
    %718 = @func_991() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
    %719 = %718.0;
    (%719,)
  };
  %720() /* ty=(Tensor[(6, 12, 3), int8],) */
}

def @func_8391(%var_8388: Tensor[(14, 15, 6), int32], %var_8389: Tensor[(216), int8], %var_8390: Tensor[(14, 15, 6), float64]) -> (Tensor[(14, 15, 6), int32], Tensor[(7, 11, 12), uint32], Tensor[(216), int8], Tensor[(6, 12, 3), int8], Tensor[(14, 15, 6), uint32], Tensor[(5, 10, 15), bool], Tensor[(240), float64], Tensor[(840, 1), float64]) {
  %745 = fn (%var_8334: Tensor[(14, 15, 6), int32], %var_8353: Tensor[(216), int8], %var_8369: Tensor[(14, 15, 6), float64]) -> (Tensor[(14, 15, 6), int32], Tensor[(7, 11, 12), uint32], Tensor[(216), int8], Tensor[(6, 12, 3), int8], Tensor[(14, 15, 6), uint32], Tensor[(5, 10, 15), bool], Tensor[(240), float64], Tensor[(840, 1), float64]) {
    %721 = cast(%var_8334, dtype="int32") /* ty=Tensor[(14, 15, 6), int32] */;
    %722 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(14, 15, 6), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %723 = cast(meta[relay.Constant][30] /* ty=Tensor[(14, 15, 6), int32] */, dtype="int32") /* ty=Tensor[(14, 15, 6), int32] */;
    %724 = dyn.reshape(%721, %722, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %725 = cast(%var_8353, dtype="int8") /* ty=Tensor[(216), int8] */;
    %726 = reshape(%725, newshape=[216]) /* ty=Tensor[(216), int8] */;
    %727 = @func_1177(%726) /* ty=(Tensor[(7, 11, 12), uint32], Tensor[(6, 12, 3), bool], Tensor[(216), int8], Tensor[(7, 11, 12), float64]) */;
    %728 = @func_7536() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(750), int64]) */;
    %729 = cast(meta[relay.Constant][30] /* ty=Tensor[(14, 15, 6), int32] */, dtype="float64") /* ty=Tensor[(14, 15, 6), float64] */;
    %730 = atan(%729) /* ty=Tensor[(14, 15, 6), float64] */;
    %731 = cast(%var_8369, dtype="uint32") /* ty=Tensor[(14, 15, 6), uint32] */;
    %732 = shape_of(%730, dtype="int32") /* ty=Tensor[(3), int32] */;
    %733 = cast(%730, dtype="uint32") /* ty=Tensor[(14, 15, 6), uint32] */;
    %734 = dyn.reshape(%731, %732, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %735 = cast(meta[relay.Constant][31] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
    %736 = cast(meta[relay.Constant][32] /* ty=Tensor[(840, 1), float64] */, dtype="float64") /* ty=Tensor[(840, 1), float64] */;
    %737 = reshape(%735, newshape=[4, 60]) /* ty=Tensor[(4, 60), float64] */;
    %738 = reshape(%736, newshape=[840]) /* ty=Tensor[(840), float64] */;
    %739 = @func_4193(%737, %738) /* ty=(Tensor[(5, 10, 15), bool], Tensor[(5, 16, 3), bool], Tensor[(4, 60), float64], Tensor[(14, 12, 5), float64], Tensor[(840), float64], Tensor[(5, 10, 15), uint8], Tensor[(1200), float64]) */;
    %740 = bitwise_and(%723, %724) /* ty=Tensor[(14, 15, 6), int32] */;
    %741 = %727.0;
    %742 = %728.0;
    %743 = right_shift(%733, %734) /* ty=Tensor[(14, 15, 6), uint32] */;
    %744 = %739.0;
    (%740, %741, %var_8353, %742, %743, %744, meta[relay.Constant][31] /* ty=Tensor[(240), float64] */, meta[relay.Constant][32] /* ty=Tensor[(840, 1), float64] */)
  };
  %745(%var_8388, %var_8389, %var_8390) /* ty=(Tensor[(14, 15, 6), int32], Tensor[(7, 11, 12), uint32], Tensor[(216), int8], Tensor[(6, 12, 3), int8], Tensor[(14, 15, 6), uint32], Tensor[(5, 10, 15), bool], Tensor[(240), float64], Tensor[(840, 1), float64]) */
}

def @func_217(%var_175: Tensor[(5, 10, 15), float32]) -> (Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), uint16], Tensor[(5, 10, 15), float64]) {
  %746 = @func_121() /* ty=(Tensor[(6, 12, 3), int8],) */;
  %747 = cast(%var_175, dtype="float32") /* ty=Tensor[(5, 10, 15), float32] */;
  %748 = sigmoid(%747) /* ty=Tensor[(5, 10, 15), float32] */;
  %749 = cast(meta[relay.Constant][33] /* ty=Tensor[(5, 10, 15), float32] */, dtype="uint16") /* ty=Tensor[(5, 10, 15), uint16] */;
  %750 = shape_of(%748, dtype="int32") /* ty=Tensor[(3), int32] */;
  %751 = cast(%748, dtype="uint16") /* ty=Tensor[(5, 10, 15), uint16] */;
  %752 = dyn.reshape(%749, %750, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %753 = cast(meta[relay.Constant][33] /* ty=Tensor[(5, 10, 15), float32] */, dtype="float64") /* ty=Tensor[(5, 10, 15), float64] */;
  %754 = shape_of(%748, dtype="int32") /* ty=Tensor[(3), int32] */;
  %755 = cast(%748, dtype="float64") /* ty=Tensor[(5, 10, 15), float64] */;
  %756 = dyn.reshape(%753, %754, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %757 = %746.0;
  %758 = logical_xor(%751, %752) /* ty=Tensor[(5, 10, 15), uint16] */;
  %759 = floor_mod(%755, %756) /* ty=Tensor[(5, 10, 15), float64] */;
  (%757, %758, %759)
}

def @func_6607(%var_6605: Tensor[(8, 4, 2), float64]) -> (Tensor[(5, 10, 15), bool], Tensor[(8, 4, 2), float64], Tensor[(5, 7, 6), float32], Tensor[(30), float32], Tensor[(210), float32]) {
  @func_6604(%var_6605) /* ty=(Tensor[(5, 10, 15), bool], Tensor[(8, 4, 2), float64], Tensor[(5, 7, 6), float32], Tensor[(30), float32], Tensor[(210), float32]) */
}

def @func_1422(%var_1380: Tensor[(240, 1), float64], %var_1417: Tensor[(240, 14), float64]) -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(240), float64], Tensor[(6, 12, 3), int8], Tensor[(240, 14), float64]) {
  %760 = @func_676() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %761 = @func_1206() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(750), float32]) */;
  %762 = cast(%var_1380, dtype="float64") /* ty=Tensor[(240, 1), float64] */;
  %763 = reshape(%762, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %764 = @func_499(%763) /* ty=(Tensor[(5, 10, 15), uint16], Tensor[(5, 16, 3), bool], Tensor[(240), float64], Tensor[(6, 12, 3), float64]) */;
  %765 = @func_121() /* ty=(Tensor[(6, 12, 3), int8],) */;
  %766 = cast(%var_1380, dtype="float64") /* ty=Tensor[(240, 1), float64] */;
  %767 = rsqrt(%766) /* ty=Tensor[(240, 1), float64] */;
  %768 = cast(%767, dtype="float64") /* ty=Tensor[(240, 1), float64] */;
  %769 = cast(%var_1417, dtype="float64") /* ty=Tensor[(240, 14), float64] */;
  %770 = %760.0;
  %771 = %761.0;
  %772 = %764.2;
  %773 = %765.0;
  %774 = mod(%768, %769) /* ty=Tensor[(240, 14), float64] */;
  (%770, %771, %772, %773, %774)
}

def @func_1331() -> (Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) {
  %778 = fn () -> (Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) {
    %775 = @func_1064() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) */;
    %776 = @func_570() /* ty=Tensor[(6, 12, 3), int8] */;
    %777 = %775.1;
    (%776, %777)
  };
  %778() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) */
}

def @func_677() -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) {
  %783 = fn () -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) {
    %779 = @func_548() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
    %780 = @func_121() /* ty=(Tensor[(6, 12, 3), int8],) */;
    %781 = %779.1;
    %782 = %780.0;
    (%781, %782)
  };
  %783() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */
}

def @func_732() -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) {
  %784 = @func_676() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %785 = @func_121() /* ty=(Tensor[(6, 12, 3), int8],) */;
  %786 = %784.0;
  %787 = %785.0;
  (%786, %787)
}

def @func_1603(%var_1601: Tensor[(30), float32], %var_1602: Tensor[(240), float64]) -> (Tensor[(6, 12, 3), int8], Tensor[(5, 7, 6), float32], Tensor[(30), float32], Tensor[(210), float32], Tensor[(5, 10, 15), uint16], Tensor[(240), float64], Tensor[(5, 10, 15), uint16]) {
  %804 = fn (%var_1535: Tensor[(30), float32], %var_1544: Tensor[(240), float64]) -> (Tensor[(6, 12, 3), int8], Tensor[(5, 7, 6), float32], Tensor[(30), float32], Tensor[(210), float32], Tensor[(5, 10, 15), uint16], Tensor[(240), float64], Tensor[(5, 10, 15), uint16]) {
    %788 = @func_676() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
    %789 = cast(%var_1535, dtype="float32") /* ty=Tensor[(30), float32] */;
    %790 = cast(meta[relay.Constant][34] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
    %791 = reshape(%789, newshape=[5, 1, 6]) /* ty=Tensor[(5, 1, 6), float32] */;
    %792 = reshape(%790, newshape=[5, 7, 6]) /* ty=Tensor[(5, 7, 6), float32] */;
    %793 = @func_649(%791, %792) /* ty=(Tensor[(5, 7, 6), float32], Tensor[(5, 7, 6), float32]) */;
    %794 = cast(%var_1544, dtype="float64") /* ty=Tensor[(240), float64] */;
    %795 = reshape(%794, newshape=[240]) /* ty=Tensor[(240), float64] */;
    %796 = @func_499(%795) /* ty=(Tensor[(5, 10, 15), uint16], Tensor[(5, 16, 3), bool], Tensor[(240), float64], Tensor[(6, 12, 3), float64]) */;
    %797 = cast(%var_1544, dtype="float64") /* ty=Tensor[(240), float64] */;
    %798 = reshape(%797, newshape=[240]) /* ty=Tensor[(240), float64] */;
    %799 = @func_499(%798) /* ty=(Tensor[(5, 10, 15), uint16], Tensor[(5, 16, 3), bool], Tensor[(240), float64], Tensor[(6, 12, 3), float64]) */;
    %800 = %788.0;
    %801 = %793.0;
    %802 = %796.0;
    %803 = %799.0;
    (%800, %801, %var_1535, meta[relay.Constant][34] /* ty=Tensor[(210), float32] */, %802, %var_1544, %803)
  };
  %804(%var_1601, %var_1602) /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 7, 6), float32], Tensor[(30), float32], Tensor[(210), float32], Tensor[(5, 10, 15), uint16], Tensor[(240), float64], Tensor[(5, 10, 15), uint16]) */
}

def @func_6873(%var_6872: Tensor[(3360), float64]) -> (Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), float64], Tensor[(12, 12, 2), float32], Tensor[(288), float32], Tensor[(3360), float64]) {
  %815 = fn (%var_6869: Tensor[(3360), float64]) -> (Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), float64], Tensor[(12, 12, 2), float32], Tensor[(288), float32], Tensor[(3360), float64]) {
    %805 = @func_5180() /* ty=(Tensor[(6, 12, 3), int8],) */;
    %806 = @func_6086() /* ty=(Tensor[(14, 12, 5), float64], Tensor[(16, 7, 5), bool], Tensor[(35), bool]) */;
    %807 = cast(meta[relay.Constant][35] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
    %808 = cast(%var_6869, dtype="float64") /* ty=Tensor[(3360), float64] */;
    %809 = reshape(%807, newshape=[12, 12, 2]) /* ty=Tensor[(12, 12, 2), float32] */;
    %810 = reshape(%808, newshape=[3360]) /* ty=Tensor[(3360), float64] */;
    %811 = @func_3461(%809, %810) /* ty=(Tensor[(12, 12, 2), float32], Tensor[(6, 12, 3), int8], Tensor[(240), float64], Tensor[(3360), float64]) */;
    %812 = %805.0;
    %813 = %806.0;
    %814 = %811.0;
    (%812, %813, %814, meta[relay.Constant][35] /* ty=Tensor[(288), float32] */, %var_6869)
  };
  %815(%var_6872) /* ty=(Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), float64], Tensor[(12, 12, 2), float32], Tensor[(288), float32], Tensor[(3360), float64]) */
}

def @func_7066(%var_7042: Tensor[(11, 12, 8), bool]) -> (Tensor[(6, 12, 3), int8], Tensor[(11, 12, 8), bool]) {
  %816 = @func_991() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %817 = @func_5252() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(1, 12, 8), bool]) */;
  %818 = %817.1;
  %819 = cast(%818, dtype="bool") /* ty=Tensor[(1, 12, 8), bool] */;
  %820 = cast(%var_7042, dtype="bool") /* ty=Tensor[(11, 12, 8), bool] */;
  %821 = %816.1;
  %822 = logical_and(%819, %820) /* ty=Tensor[(11, 12, 8), bool] */;
  (%821, %822)
}

def @func_3403() -> Tensor[(14, 12, 5), uint64] {
  %823 = @func_1877() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), uint64], Tensor[(420, 2), float64]) */;
  %823.1
}

def @func_6915() -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) {
  %824 = @func_1761() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %825 = @func_2206() /* ty=(Tensor[(6, 12, 3), int8],) */;
  %826 = %824.0;
  %827 = %825.0;
  (%826, %827)
}

def @func_7069(%var_7067: Tensor[(11, 12, 8), bool]) -> (Tensor[(6, 12, 3), int8], Tensor[(11, 12, 8), bool]) {
  @func_7066(%var_7067) /* ty=(Tensor[(6, 12, 3), int8], Tensor[(11, 12, 8), bool]) */
}

def @func_3992(%var_3990: Tensor[(1, 7, 5), bool]) -> (Tensor[(16, 7, 5), bool], Tensor[(750), int64]) {
  @func_3989(%var_3990) /* ty=(Tensor[(16, 7, 5), bool], Tensor[(750), int64]) */
}

def @func_1064() -> (Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) {
  %828 = @func_676() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %829 = %828.0;
  %830 = @func_864() /* ty=Tensor[(5, 10, 15), int64] */;
  (%829, %830)
}

def @func_8945() -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(750), float32], Tensor[(6, 12, 3), int8]) {
  @func_8943() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(750), float32], Tensor[(6, 12, 3), int8]) */
}

def @func_8448() -> (Tensor[(3, 13, 8), float32],) {
  %833 = fn () -> (Tensor[(3, 13, 8), float32],) {
    %831 = @func_3507() /* ty=(Tensor[(3, 13, 8), int32], Tensor[(3, 13, 8), float32]) */;
    %832 = %831.1;
    (%832,)
  };
  %833() /* ty=(Tensor[(3, 13, 8), float32],) */
}

def @func_6801() -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64], Tensor[(216), int8]) {
  %834 = @func_1206() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(750), float32]) */;
  %835 = @func_991() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %836 = %834.0;
  %837 = cast(%836, dtype="int8") /* ty=Tensor[(6, 12, 3), int8] */;
  %838 = reshape(%837, newshape=[216]) /* ty=Tensor[(216), int8] */;
  %839 = @func_1177(%838) /* ty=(Tensor[(7, 11, 12), uint32], Tensor[(6, 12, 3), bool], Tensor[(216), int8], Tensor[(7, 11, 12), float64]) */;
  %840 = %835.1;
  %841 = @func_3265() /* ty=Tensor[(5, 10, 15), int64] */;
  %842 = %839.2;
  (%836, %840, %841, %842)
}

def @func_7668() -> Tensor[(6, 12, 3), int8] {
  %844 = fn () -> Tensor[(6, 12, 3), int8] {
    %843 = @func_548() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
    %843.1
  };
  %844() /* ty=Tensor[(6, 12, 3), int8] */
}

def @func_2248(%var_2246: Tensor[(15, 11, 9), float32], %var_2247: Tensor[(15, 11, 9), float32]) -> (Tensor[(15, 11, 9), float32], Tensor[(750), float32], Tensor[(15, 11, 9), bool], Tensor[(6, 12, 3), int8]) {
  %855 = fn (%var_2225: Tensor[(15, 11, 9), float32], %var_2231: Tensor[(15, 11, 9), float32]) -> (Tensor[(15, 11, 9), float32], Tensor[(750), float32], Tensor[(15, 11, 9), bool], Tensor[(6, 12, 3), int8]) {
    %845 = cast(%var_2225, dtype="float32") /* ty=Tensor[(15, 11, 9), float32] */;
    %846 = cast(%var_2231, dtype="bool") /* ty=Tensor[(15, 11, 9), bool] */;
    %847 = shape_of(%var_2225, dtype="int32") /* ty=Tensor[(3), int32] */;
    %848 = cast(%var_2225, dtype="bool") /* ty=Tensor[(15, 11, 9), bool] */;
    %849 = dyn.reshape(%846, %847, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %850 = @func_1530() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) */;
    %851 = rsqrt(%845) /* ty=Tensor[(15, 11, 9), float32] */;
    %852 = @func_1507() /* ty=Tensor[(750), float32] */;
    %853 = logical_or(%848, %849) /* ty=Tensor[(15, 11, 9), bool] */;
    %854 = %850.0;
    (%851, %852, %853, %854)
  };
  %855(%var_2246, %var_2247) /* ty=(Tensor[(15, 11, 9), float32], Tensor[(750), float32], Tensor[(15, 11, 9), bool], Tensor[(6, 12, 3), int8]) */
}

def @func_8231() -> Tensor[(6, 12, 3), int8] {
  %856 = fn () -> Tensor[(6, 12, 3), int8] {
    @func_570() /* ty=Tensor[(6, 12, 3), int8] */
  };
  %856() /* ty=Tensor[(6, 12, 3), int8] */
}

def @func_3686() -> (Tensor[(6, 12, 3), int8],) {
  %859 = fn () -> (Tensor[(6, 12, 3), int8],) {
    %857 = @func_3224() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
    %858 = %857.1;
    (%858,)
  };
  %859() /* ty=(Tensor[(6, 12, 3), int8],) */
}

def @func_7319() -> (Tensor[(6, 12, 3), int8],) {
  %862 = fn () -> (Tensor[(6, 12, 3), int8],) {
    %860 = @func_6194() /* ty=(Tensor[(6, 12, 3), int8],) */;
    %861 = %860.0;
    (%861,)
  };
  %862() /* ty=(Tensor[(6, 12, 3), int8],) */
}

def @func_992() -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) {
  %867 = fn () -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) {
    %863 = @func_768() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
    %864 = @func_676() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
    %865 = %863.0;
    %866 = %864.1;
    (%865, %866)
  };
  %867() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */
}

def @func_7241(%var_7239: Tensor[(819), uint64], %var_7240: Tensor[(240), float64]) -> (Tensor[(6, 12, 3), int8], Tensor[(1, 12, 8), bool], Tensor[(819), uint64], Tensor[(5, 10, 15), int64], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64], Tensor[(11, 14), float64], Tensor[(6, 12, 3), int8], Tensor[(1200), float64], Tensor[(240), float64], Tensor[(840), float64], Tensor[(7, 11, 12), float64], Tensor[(5, 10, 15), uint8]) {
  %896 = fn (%var_7165: Tensor[(819), uint64], %var_7222: Tensor[(240), float64]) -> (Tensor[(6, 12, 3), int8], Tensor[(1, 12, 8), bool], Tensor[(819), uint64], Tensor[(5, 10, 15), int64], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64], Tensor[(11, 14), float64], Tensor[(6, 12, 3), int8], Tensor[(1200), float64], Tensor[(240), float64], Tensor[(840), float64], Tensor[(7, 11, 12), float64], Tensor[(5, 10, 15), uint8]) {
    %868 = @func_2916() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), float64], Tensor[(840), float64]) */;
    %869 = cast(%var_7165, dtype="uint64") /* ty=Tensor[(819), uint64] */;
    %870 = reshape(%869, newshape=[7, 13, 9]) /* ty=Tensor[(7, 13, 9), uint64] */;
    %871 = @func_2290(%870) /* ty=(Tensor[(7, 13, 9), uint64], Tensor[(1, 12, 8), bool]) */;
    %872 = @func_5457() /* ty=(Tensor[(5, 10, 15), int64], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), bool], Tensor[(6, 12, 3), int8]) */;
    %873 = @func_1330() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64]) */;
    %874 = cast(meta[relay.Constant][36] /* ty=Tensor[(11, 14), float64] */, dtype="float64") /* ty=Tensor[(11, 14), float64] */;
    %875 = reshape(%874, newshape=[11, 2, 7]) /* ty=Tensor[(11, 2, 7), float64] */;
    %876 = @func_6950(%875) /* ty=(Tensor[(11, 2, 7), float64], Tensor[(5, 10, 15), int64], Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), float64], Tensor[(840), float64]) */;
    %877 = @func_2206() /* ty=(Tensor[(6, 12, 3), int8],) */;
    %878 = cast(%var_7222, dtype="float64") /* ty=Tensor[(240), float64] */;
    %879 = cast(meta[relay.Constant][37] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
    %880 = reshape(%878, newshape=[4, 60]) /* ty=Tensor[(4, 60), float64] */;
    %881 = reshape(%879, newshape=[840]) /* ty=Tensor[(840), float64] */;
    %882 = @func_4193(%880, %881) /* ty=(Tensor[(5, 10, 15), bool], Tensor[(5, 16, 3), bool], Tensor[(4, 60), float64], Tensor[(14, 12, 5), float64], Tensor[(840), float64], Tensor[(5, 10, 15), uint8], Tensor[(1200), float64]) */;
    %883 = @func_3292() /* ty=(Tensor[(1, 12, 8), bool], Tensor[(7, 11, 12), float64], Tensor[(6, 36), int8]) */;
    %884 = %876.1;
    %885 = cast(%884, dtype="int64") /* ty=Tensor[(5, 10, 15), int64] */;
    %886 = reshape(%885, newshape=[5, 10, 15]) /* ty=Tensor[(5, 10, 15), int64] */;
    %887 = %868.0;
    %888 = %871.1;
    %889 = %872.0;
    %890 = @func_4235() /* ty=Tensor[(6, 12, 3), int8] */;
    %891 = %873.0;
    %892 = %877.0;
    %893 = %882.6;
    %894 = %883.1;
    %895 = @func_2027(%886) /* ty=Tensor[(5, 10, 15), uint8] */;
    (%887, %888, %var_7165, %889, %890, %891, %884, meta[relay.Constant][36] /* ty=Tensor[(11, 14), float64] */, %892, %893, %var_7222, meta[relay.Constant][37] /* ty=Tensor[(840), float64] */, %894, %895)
  };
  %896(%var_7239, %var_7240) /* ty=(Tensor[(6, 12, 3), int8], Tensor[(1, 12, 8), bool], Tensor[(819), uint64], Tensor[(5, 10, 15), int64], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64], Tensor[(11, 14), float64], Tensor[(6, 12, 3), int8], Tensor[(1200), float64], Tensor[(240), float64], Tensor[(840), float64], Tensor[(7, 11, 12), float64], Tensor[(5, 10, 15), uint8]) */
}

def @func_6086() -> (Tensor[(14, 12, 5), float64], Tensor[(16, 7, 5), bool], Tensor[(35), bool]) {
  %897 = @func_2916() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), float64], Tensor[(840), float64]) */;
  %898 = cast(meta[relay.Constant][38] /* ty=Tensor[(35), bool] */, dtype="bool") /* ty=Tensor[(35), bool] */;
  %899 = reshape(%898, newshape=[1, 7, 5]) /* ty=Tensor[(1, 7, 5), bool] */;
  %900 = @func_3989(%899) /* ty=(Tensor[(16, 7, 5), bool], Tensor[(750), int64]) */;
  %901 = %897.2;
  %902 = %900.0;
  (%901, %902, meta[relay.Constant][38] /* ty=Tensor[(35), bool] */)
}

def @func_4285(%var_4284: Tensor[(750), float32]) -> Tensor[(750), uint16] {
  %908 = fn (%var_4258: Tensor[(750), float32]) -> Tensor[(750), uint16] {
    %903 = @func_1507() /* ty=Tensor[(750), float32] */;
    %904 = cast(%var_4258, dtype="uint16") /* ty=Tensor[(750), uint16] */;
    %905 = shape_of(%903, dtype="int32") /* ty=Tensor[(1), int32] */;
    %906 = cast(%903, dtype="uint16") /* ty=Tensor[(750), uint16] */;
    %907 = dyn.reshape(%904, %905, newshape=[]) /* ty=Tensor[(?), uint16] */;
    subtract(%906, %907) /* ty=Tensor[(750), uint16] */
  };
  %908(%var_4284) /* ty=Tensor[(750), uint16] */
}

def @func_3550() -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), bool]) {
  %914 = fn () -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), bool]) {
    %909 = @func_1206() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(750), float32]) */;
    %910 = %909.0;
    %911 = cast(%910, dtype="int8") /* ty=Tensor[(6, 12, 3), int8] */;
    %912 = reshape(%911, newshape=[6, 12, 3]) /* ty=Tensor[(6, 12, 3), int8] */;
    %913 = @func_444(%912) /* ty=Tensor[(6, 12, 3), bool] */;
    (%910, %913)
  };
  %914() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), bool]) */
}

def @func_6950(%var_6918: Tensor[(11, 2, 7), float64]) -> (Tensor[(11, 2, 7), float64], Tensor[(5, 10, 15), int64], Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), float64], Tensor[(840), float64]) {
  %915 = cast(%var_6918, dtype="float64") /* ty=Tensor[(11, 2, 7), float64] */;
  %916 = @func_5012() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %917 = cast(meta[relay.Constant][39] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %918 = reshape(%917, newshape=[14, 12, 5]) /* ty=Tensor[(14, 12, 5), float64] */;
  %919 = @func_1859(%918) /* ty=(Tensor[(14, 12, 5), uint64], Tensor[(14, 12, 5), float64]) */;
  %920 = atan(%915) /* ty=Tensor[(11, 2, 7), float64] */;
  %921 = @func_3265() /* ty=Tensor[(5, 10, 15), int64] */;
  %922 = %916.1;
  %923 = %919.1;
  (%920, %921, %922, %923, meta[relay.Constant][39] /* ty=Tensor[(840), float64] */)
}

def @func_4197(%var_4195: Tensor[(4, 60), float64], %var_4196: Tensor[(840), float64]) -> (Tensor[(5, 10, 15), bool], Tensor[(5, 16, 3), bool], Tensor[(4, 60), float64], Tensor[(14, 12, 5), float64], Tensor[(840), float64], Tensor[(5, 10, 15), uint8], Tensor[(1200), float64]) {
  @func_4193(%var_4195, %var_4196) /* ty=(Tensor[(5, 10, 15), bool], Tensor[(5, 16, 3), bool], Tensor[(4, 60), float64], Tensor[(14, 12, 5), float64], Tensor[(840), float64], Tensor[(5, 10, 15), uint8], Tensor[(1200), float64]) */
}

def @func_5459() -> (Tensor[(5, 10, 15), int64], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), bool], Tensor[(6, 12, 3), int8]) {
  @func_5457() /* ty=(Tensor[(5, 10, 15), int64], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), bool], Tensor[(6, 12, 3), int8]) */
}

def @func_3725(%var_3724: Tensor[(14, 6, 13), float64]) -> (Tensor[(30), float32], Tensor[(30, 1), float32], Tensor[(8, 30), float64], Tensor[(6, 12, 3), int8], Tensor[(14, 6, 13), float32]) {
  %938 = fn (%var_3693: Tensor[(14, 6, 13), float64]) -> (Tensor[(30), float32], Tensor[(30, 1), float32], Tensor[(8, 30), float64], Tensor[(6, 12, 3), int8], Tensor[(14, 6, 13), float32]) {
    %924 = cast(meta[relay.Constant][40] /* ty=Tensor[(30, 1), float32] */, dtype="float32") /* ty=Tensor[(30, 1), float32] */;
    %925 = cast(meta[relay.Constant][41] /* ty=Tensor[(8, 30), float64] */, dtype="float64") /* ty=Tensor[(8, 30), float64] */;
    %926 = reshape(%924, newshape=[30]) /* ty=Tensor[(30), float32] */;
    %927 = reshape(%925, newshape=[240]) /* ty=Tensor[(240), float64] */;
    %928 = @func_1600(%926, %927) /* ty=(Tensor[(6, 12, 3), int8], Tensor[(5, 7, 6), float32], Tensor[(30), float32], Tensor[(210), float32], Tensor[(5, 10, 15), uint16], Tensor[(240), float64], Tensor[(5, 10, 15), uint16]) */;
    %929 = @func_3549() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), bool]) */;
    %930 = cast(%var_3693, dtype="float64") /* ty=Tensor[(14, 6, 13), float64] */;
    %931 = atan(%930) /* ty=Tensor[(14, 6, 13), float64] */;
    %932 = cast(%931, dtype="float64") /* ty=Tensor[(14, 6, 13), float64] */;
    %933 = tan(%932) /* ty=Tensor[(14, 6, 13), float64] */;
    %934 = cast(%933, dtype="float32") /* ty=Tensor[(14, 6, 13), float32] */;
    %935 = %928.2;
    %936 = %929.0;
    %937 = cos(%934) /* ty=Tensor[(14, 6, 13), float32] */;
    (%935, meta[relay.Constant][40] /* ty=Tensor[(30, 1), float32] */, meta[relay.Constant][41] /* ty=Tensor[(8, 30), float64] */, %936, %937)
  };
  %938(%var_3724) /* ty=(Tensor[(30), float32], Tensor[(30, 1), float32], Tensor[(8, 30), float64], Tensor[(6, 12, 3), int8], Tensor[(14, 6, 13), float32]) */
}

def @func_4589() -> (Tensor[(1, 12, 8), bool], Tensor[(6, 12, 3), int8]) {
  @func_4587() /* ty=(Tensor[(1, 12, 8), bool], Tensor[(6, 12, 3), int8]) */
}

def @func_5134() -> Tensor[(6, 12, 3), int8] {
  @func_1034() /* ty=Tensor[(6, 12, 3), int8] */
}

def @func_3098(%var_3097: Tensor[(240), float64]) -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(240), float64], Tensor[(1200), float64], Tensor[(6, 12, 3), int8], Tensor[(750), float32], Tensor[(6, 12, 3), int8], Tensor[(750), float32]) {
  %956 = fn (%var_3023: Tensor[(240), float64]) -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(240), float64], Tensor[(1200), float64], Tensor[(6, 12, 3), int8], Tensor[(750), float32], Tensor[(6, 12, 3), int8], Tensor[(750), float32]) {
    %939 = @func_2916() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(14, 12, 5), float64], Tensor[(840), float64]) */;
    %940 = @func_2206() /* ty=(Tensor[(6, 12, 3), int8],) */;
    %941 = cast(%var_3023, dtype="float64") /* ty=Tensor[(240), float64] */;
    %942 = cast(meta[relay.Constant][42] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
    %943 = reshape(%941, newshape=[1, 16, 15]) /* ty=Tensor[(1, 16, 15), float64] */;
    %944 = reshape(%942, newshape=[5, 16, 15]) /* ty=Tensor[(5, 16, 15), float64] */;
    %945 = @func_1281(%943, %944) /* ty=(Tensor[(5, 16, 15), float64], Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64], Tensor[(750), float64]) */;
    %946 = @func_548() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
    %947 = @func_1206() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(750), float32]) */;
    %948 = @func_2783() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(6, 12, 3), int8]) */;
    %949 = %939.0;
    %950 = %940.0;
    %951 = %945.1;
    %952 = %946.0;
    %953 = %947.1;
    %954 = %948.1;
    %955 = @func_1507() /* ty=Tensor[(750), float32] */;
    (%949, %950, %951, %var_3023, meta[relay.Constant][42] /* ty=Tensor[(1200), float64] */, %952, %953, %954, %955)
  };
  %956(%var_3097) /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(240), float64], Tensor[(1200), float64], Tensor[(6, 12, 3), int8], Tensor[(750), float32], Tensor[(6, 12, 3), int8], Tensor[(750), float32]) */
}

def @func_3842() -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) {
  @func_3840() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */
}

def @func_3293() -> (Tensor[(1, 12, 8), bool], Tensor[(7, 11, 12), float64], Tensor[(6, 36), int8]) {
  %962 = fn () -> (Tensor[(1, 12, 8), bool], Tensor[(7, 11, 12), float64], Tensor[(6, 36), int8]) {
    %957 = cast(meta[relay.Constant][43] /* ty=Tensor[(6, 36), int8] */, dtype="int8") /* ty=Tensor[(6, 36), int8] */;
    %958 = reshape(%957, newshape=[216]) /* ty=Tensor[(216), int8] */;
    %959 = @func_1177(%958) /* ty=(Tensor[(7, 11, 12), uint32], Tensor[(6, 12, 3), bool], Tensor[(216), int8], Tensor[(7, 11, 12), float64]) */;
    %960 = @func_1477() /* ty=Tensor[(1, 12, 8), bool] */;
    %961 = %959.3;
    (%960, %961, meta[relay.Constant][43] /* ty=Tensor[(6, 36), int8] */)
  };
  %962() /* ty=(Tensor[(1, 12, 8), bool], Tensor[(7, 11, 12), float64], Tensor[(6, 36), int8]) */
}

def @func_5136() -> Tensor[(6, 12, 3), int8] {
  @func_5134() /* ty=Tensor[(6, 12, 3), int8] */
}

def @func_4237() -> Tensor[(6, 12, 3), int8] {
  @func_4235() /* ty=Tensor[(6, 12, 3), int8] */
}

def @func_6181() -> Tensor[(11, 6, 14), bool] {
  %965 = fn () -> Tensor[(11, 6, 14), bool] {
    %963 = cast(meta[relay.Constant][44] /* ty=uint16 */, dtype="bool") /* ty=bool */;
    %964 = cast(meta[relay.Constant][45] /* ty=Tensor[(11, 6, 14), uint16] */, dtype="bool") /* ty=Tensor[(11, 6, 14), bool] */;
    less_equal(%963, %964) /* ty=Tensor[(11, 6, 14), bool] */
  };
  %965() /* ty=Tensor[(11, 6, 14), bool] */
}

def @func_5122() -> Tensor[(6, 12, 3), int8] {
  %966 = fn () -> Tensor[(6, 12, 3), int8] {
    @func_4933() /* ty=Tensor[(6, 12, 3), int8] */
  };
  %966() /* ty=Tensor[(6, 12, 3), int8] */
}

def @func_6329(%var_6327: Tensor[(8, 12, 8), float32], %var_6328: Tensor[(8, 12, 8), float32]) -> (Tensor[(6, 12, 3), int8], Tensor[(8, 12, 8), uint16], Tensor[(8, 12, 8), float32]) {
  %978 = fn (%var_6288: Tensor[(8, 12, 8), float32], %var_6293: Tensor[(8, 12, 8), float32]) -> (Tensor[(6, 12, 3), int8], Tensor[(8, 12, 8), uint16], Tensor[(8, 12, 8), float32]) {
    %967 = @func_4901() /* ty=(Tensor[(1, 12, 8), float32], Tensor[(5, 10, 15), int64]) */;
    %968 = %967.0;
    %969 = cast(%968, dtype="uint16") /* ty=Tensor[(1, 12, 8), uint16] */;
    %970 = cast(%var_6288, dtype="uint16") /* ty=Tensor[(8, 12, 8), uint16] */;
    %971 = cast(%var_6293, dtype="float32") /* ty=Tensor[(8, 12, 8), float32] */;
    %972 = shape_of(%var_6288, dtype="int32") /* ty=Tensor[(3), int32] */;
    %973 = cast(%var_6288, dtype="float32") /* ty=Tensor[(8, 12, 8), float32] */;
    %974 = dyn.reshape(%971, %972, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %975 = @func_1034() /* ty=Tensor[(6, 12, 3), int8] */;
    %976 = logical_xor(%969, %970) /* ty=Tensor[(8, 12, 8), uint16] */;
    %977 = divide(%973, %974) /* ty=Tensor[(8, 12, 8), float32] */;
    (%975, %976, %977)
  };
  %978(%var_6327, %var_6328) /* ty=(Tensor[(6, 12, 3), int8], Tensor[(8, 12, 8), uint16], Tensor[(8, 12, 8), float32]) */
}

def @func_3798() -> (Tensor[(5, 10, 15), bool], Tensor[(6, 12, 3), int8]) {
  %983 = fn () -> (Tensor[(5, 10, 15), bool], Tensor[(6, 12, 3), int8]) {
    %979 = @func_2580() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(6, 12, 3), int8]) */;
    %980 = @func_991() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
    %981 = %979.0;
    %982 = %980.0;
    (%981, %982)
  };
  %983() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(6, 12, 3), int8]) */
}

def @func_5489() -> (Tensor[(6, 12, 3), int8],) {
  @func_5487() /* ty=(Tensor[(6, 12, 3), int8],) */
}

def @func_8065(%var_8063: int64, %var_8064: Tensor[(1, 13, 9), int64]) -> (Tensor[(7, 11, 12), float64], Tensor[(1, 13, 9), float32]) {
  @func_8061(%var_8063, %var_8064) /* ty=(Tensor[(7, 11, 12), float64], Tensor[(1, 13, 9), float32]) */
}

def @func_653(%var_651: Tensor[(5, 1, 6), float32], %var_652: Tensor[(5, 7, 6), float32]) -> (Tensor[(5, 7, 6), float32], Tensor[(5, 7, 6), float32]) {
  @func_649(%var_651, %var_652) /* ty=(Tensor[(5, 7, 6), float32], Tensor[(5, 7, 6), float32]) */
}

def @func_8092() -> (Tensor[(750), int64],) {
  @func_8090() /* ty=(Tensor[(750), int64],) */
}

def @func_5473() -> (Tensor[(6, 12, 3), int8], Tensor[(240), float64], Tensor[(240), float64]) {
  @func_5471() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(240), float64], Tensor[(240), float64]) */
}

def @func_8943() -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(750), float32], Tensor[(6, 12, 3), int8]) {
  %984 = @func_6801() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(5, 10, 15), int64], Tensor[(216), int8]) */;
  %985 = cast(meta[relay.Constant][46] /* ty=Tensor[(750), float32] */, dtype="float32") /* ty=Tensor[(750), float32] */;
  %986 = reshape(%985, newshape=[750]) /* ty=Tensor[(750), float32] */;
  %987 = @func_2850(%986) /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(750), uint64], Tensor[(750), float64]) */;
  %988 = %984.0;
  %989 = %987.0;
  %990 = @func_8494() /* ty=Tensor[(6, 12, 3), int8] */;
  (%988, %989, meta[relay.Constant][46] /* ty=Tensor[(750), float32] */, %990)
}

def @func_9558(%var_9557: Tensor[(6, 12, 3), int8]) -> (Tensor[(6, 12, 3), bool],) {
  %998 = fn (%var_9531: Tensor[(6, 12, 3), int8]) -> (Tensor[(6, 12, 3), bool],) {
    %991 = @func_991() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
    %992 = %991.1;
    %993 = cast(%var_9531, dtype="bool") /* ty=Tensor[(6, 12, 3), bool] */;
    %994 = shape_of(%992, dtype="int32") /* ty=Tensor[(3), int32] */;
    %995 = cast(%992, dtype="bool") /* ty=Tensor[(6, 12, 3), bool] */;
    %996 = dyn.reshape(%993, %994, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %997 = greater_equal(%995, %996) /* ty=Tensor[(6, 12, 3), bool] */;
    (%997,)
  };
  %998(%var_9557) /* ty=(Tensor[(6, 12, 3), bool],) */
}

def @func_1180(%var_1178: Tensor[(216), int8]) -> (Tensor[(7, 11, 12), uint32], Tensor[(6, 12, 3), bool], Tensor[(216), int8], Tensor[(7, 11, 12), float64]) {
  @func_1177(%var_1178) /* ty=(Tensor[(7, 11, 12), uint32], Tensor[(6, 12, 3), bool], Tensor[(216), int8], Tensor[(7, 11, 12), float64]) */
}

def @func_8815() -> (Tensor[(5, 10, 15), bool],) {
  %1001 = fn () -> (Tensor[(5, 10, 15), bool],) {
    %999 = @func_2580() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(6, 12, 3), int8]) */;
    %1000 = %999.0;
    (%1000,)
  };
  %1001() /* ty=(Tensor[(5, 10, 15), bool],) */
}

def @func_5271() -> (Tensor[(840), float64], Tensor[(6, 12, 3), int8]) {
  %1002 = @func_1986() /* ty=(Tensor[(5, 10, 15), bool], Tensor[(5, 10, 15), int64], Tensor[(14, 12, 5), uint64], Tensor[(840), float64], Tensor[(5, 10, 15), uint8]) */;
  %1003 = @func_5012() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */;
  %1004 = %1002.3;
  %1005 = %1003.1;
  (%1004, %1005)
}

def @func_3592(%var_3589: Tensor[(16, 3, 10), bool], %var_3590: Tensor[(240), float64], %var_3591: Tensor[(50, 15), int64]) -> (Tensor[(16, 3, 10), bool], Tensor[(5, 16, 3), bool], Tensor[(240), float64], Tensor[(5, 10, 15), uint8], Tensor[(50, 15), int64]) {
  %1018 = fn (%var_3561: Tensor[(16, 3, 10), bool], %var_3576: Tensor[(240), float64], %var_3579: Tensor[(50, 15), int64]) -> (Tensor[(16, 3, 10), bool], Tensor[(5, 16, 3), bool], Tensor[(240), float64], Tensor[(5, 10, 15), uint8], Tensor[(50, 15), int64]) {
    %1006 = cast(meta[relay.Constant][47] /* ty=Tensor[(16, 3, 10), bool] */, dtype="bool") /* ty=Tensor[(16, 3, 10), bool] */;
    %1007 = shape_of(%var_3561, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1008 = cast(%var_3561, dtype="bool") /* ty=Tensor[(16, 3, 10), bool] */;
    %1009 = dyn.reshape(%1006, %1007, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1010 = cast(%var_3576, dtype="float64") /* ty=Tensor[(240), float64] */;
    %1011 = reshape(%1010, newshape=[240]) /* ty=Tensor[(240), float64] */;
    %1012 = @func_499(%1011) /* ty=(Tensor[(5, 10, 15), uint16], Tensor[(5, 16, 3), bool], Tensor[(240), float64], Tensor[(6, 12, 3), float64]) */;
    %1013 = cast(%var_3579, dtype="int64") /* ty=Tensor[(50, 15), int64] */;
    %1014 = reshape(%1013, newshape=[5, 10, 15]) /* ty=Tensor[(5, 10, 15), int64] */;
    %1015 = logical_or(%1008, %1009) /* ty=Tensor[(16, 3, 10), bool] */;
    %1016 = %1012.1;
    %1017 = @func_2027(%1014) /* ty=Tensor[(5, 10, 15), uint8] */;
    (%1015, %1016, %var_3576, %1017, %var_3579)
  };
  %1018(%var_3589, %var_3590, %var_3591) /* ty=(Tensor[(16, 3, 10), bool], Tensor[(5, 16, 3), bool], Tensor[(240), float64], Tensor[(5, 10, 15), uint8], Tensor[(50, 15), int64]) */
}

def @func_7430(%var_7428: Tensor[(4, 6, 6), uint16], %var_7429: Tensor[(4, 6, 6), uint16]) -> Tensor[(4, 6, 6), uint16] {
  %1028 = fn (%var_7370: Tensor[(4, 6, 6), uint16], %var_7371: Tensor[(4, 6, 6), uint16]) -> Tensor[(4, 6, 6), uint16] {
    %1019 = cast(%var_7371, dtype="bool") /* ty=Tensor[(4, 6, 6), bool] */;
    %1020 = shape_of(%var_7370, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1021 = cast(%var_7370, dtype="bool") /* ty=Tensor[(4, 6, 6), bool] */;
    %1022 = dyn.reshape(%1019, %1020, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1023 = greater_equal(%1021, %1022) /* ty=Tensor[(4, 6, 6), bool] */;
    %1024 = cast(%1023, dtype="uint16") /* ty=Tensor[(4, 6, 6), uint16] */;
    %1025 = shape_of(%var_7370, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1026 = cast(%var_7370, dtype="uint16") /* ty=Tensor[(4, 6, 6), uint16] */;
    %1027 = dyn.reshape(%1024, %1025, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    logical_xor(%1026, %1027) /* ty=Tensor[(4, 6, 6), uint16] */
  };
  %1028(%var_7428, %var_7429) /* ty=Tensor[(4, 6, 6), uint16] */
}

def @func_6488() -> (Tensor[(6, 12, 3), int8],) {
  %1029 = @func_5487() /* ty=(Tensor[(6, 12, 3), int8],) */;
  %1030 = %1029.0;
  (%1030,)
}

def @func_6917() -> (Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) {
  @func_6915() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8]) */
}

def @func_3989(%var_3978: Tensor[(1, 7, 5), bool]) -> (Tensor[(16, 7, 5), bool], Tensor[(750), int64]) {
  %1031 = cast(%var_3978, dtype="bool") /* ty=Tensor[(1, 7, 5), bool] */;
  %1032 = cast(meta[relay.Constant][48] /* ty=Tensor[(16, 7, 5), bool] */, dtype="bool") /* ty=Tensor[(16, 7, 5), bool] */;
  %1033 = @func_2536() /* ty=(Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(6, 12, 3), int8], Tensor[(750), int64]) */;
  %1034 = logical_and(%1031, %1032) /* ty=Tensor[(16, 7, 5), bool] */;
  %1035 = %1033.3;
  (%1034, %1035)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen357/build/output.py", line 3107, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:09:54] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

