==========mod==========
#[version = "0.0.5"]
def @func_7079() -> Tensor[(2, 2, 9), uint64] {
  %0 = @func_2467() /* ty=(Tensor[(2, 2, 9), bool],) */;
  %1 = %0.0;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 2, 9), bool] */, dtype="uint64") /* ty=Tensor[(2, 2, 9), uint64] */;
  %3 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
  %4 = cast(%1, dtype="uint64") /* ty=Tensor[(2, 2, 9), uint64] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  subtract(%4, %5) /* ty=Tensor[(2, 2, 9), uint64] */
}

def @func_5601() -> (Tensor[(256), int64],) {
  %6 = @func_5357() /* ty=(Tensor[(256), int64], Tensor[(256), int64], Tensor[(256), bool]) */;
  %7 = %6.0;
  (%7,)
}

def @func_836(%var_832: Tensor[(12, 4, 15), uint16]) -> Tensor[(12, 4, 15), uint16] {
  %8 = cast(meta[relay.Constant][1] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %9 = cast(%var_832, dtype="uint16") /* ty=Tensor[(12, 4, 15), uint16] */;
  bitwise_or(%8, %9) /* ty=Tensor[(12, 4, 15), uint16] */
}

def @func_7044(%var_7001: Tensor[(16, 4, 13), uint16], %var_7002: Tensor[(16, 4, 13), uint16]) -> (Tensor[(16, 4, 13), uint16], Tensor[(16, 4, 13), float64], Tensor[(720), uint16]) {
  %10 = cast(%var_7002, dtype="uint16") /* ty=Tensor[(16, 4, 13), uint16] */;
  %11 = shape_of(%var_7001, dtype="int32") /* ty=Tensor[(3), int32] */;
  %12 = cast(%var_7001, dtype="uint16") /* ty=Tensor[(16, 4, 13), uint16] */;
  %13 = dyn.reshape(%10, %11, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %14 = cast(%var_7002, dtype="float64") /* ty=Tensor[(16, 4, 13), float64] */;
  %15 = right_shift(%12, %13) /* ty=Tensor[(16, 4, 13), uint16] */;
  %16 = sinh(%14) /* ty=Tensor[(16, 4, 13), float64] */;
  %17 = @func_2742() /* ty=Tensor[(720), uint16] */;
  (%15, %16, %17)
}

def @func_2295() -> (Tensor[(528), float32],) {
  %18 = @func_1889() /* ty=(Tensor[(2, 2, 9), bool], float32, float32, Tensor[(528), float32]) */;
  %19 = %18.3;
  (%19,)
}

def @func_3589() -> (Tensor[(256), int64],) {
  %20 = @func_2026() /* ty=Tensor[(256), int64] */;
  (%20,)
}

def @func_8859(%var_8854: uint8, %var_8855: Tensor[(10, 7, 6), uint8]) -> Tensor[(10, 7, 6), uint8] {
  %21 = cast(%var_8854, dtype="uint8") /* ty=uint8 */;
  %22 = cast(%var_8855, dtype="uint8") /* ty=Tensor[(10, 7, 6), uint8] */;
  subtract(%21, %22) /* ty=Tensor[(10, 7, 6), uint8] */
}

def @func_3289() -> (Tensor[(528), float32], Tensor[(720), uint16], Tensor[(2, 2, 9), bool]) {
  %23 = @func_2060() /* ty=(Tensor[(256), int64], Tensor[(12, 4, 15), uint16], Tensor[(720), uint16], Tensor[(528), float32]) */;
  %24 = @func_2630() /* ty=(Tensor[(2, 2, 9), bool],) */;
  %25 = %23.3;
  %26 = @func_2742() /* ty=Tensor[(720), uint16] */;
  %27 = %24.0;
  (%25, %26, %27)
}

def @func_4661(%var_4632: Tensor[(96), float32], %var_4639: Tensor[(4, 7, 11), float32], %var_4652: Tensor[(8, 66), float32]) -> (Tensor[(720), uint16], Tensor[(8, 2, 6), float32], Tensor[(96), float32], Tensor[(256), int64], Tensor[(4, 7, 11), uint8], Tensor[(16, 3, 11), float32], Tensor[(8, 66), float32]) {
  %28 = @func_2060() /* ty=(Tensor[(256), int64], Tensor[(12, 4, 15), uint16], Tensor[(720), uint16], Tensor[(528), float32]) */;
  %29 = cast(6.18232f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %30 = cast(%var_4632, dtype="float32") /* ty=Tensor[(96), float32] */;
  %31 = reshape(%29, newshape=[]) /* ty=float32 */;
  %32 = reshape(%30, newshape=[8, 2, 6]) /* ty=Tensor[(8, 2, 6), float32] */;
  %33 = @func_2994() /* ty=(Tensor[(256), int64],) */;
  %34 = cast(6.18232f /* ty=float32 */, dtype="uint8") /* ty=uint8 */;
  %35 = cast(%var_4639, dtype="uint8") /* ty=Tensor[(4, 7, 11), uint8] */;
  %36 = cast(6.18232f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %37 = cast(%var_4652, dtype="float32") /* ty=Tensor[(8, 66), float32] */;
  %38 = reshape(%36, newshape=[]) /* ty=float32 */;
  %39 = reshape(%37, newshape=[528]) /* ty=Tensor[(528), float32] */;
  %40 = @func_1039(%38, %39) /* ty=(Tensor[(2, 14, 2), float64], Tensor[(16, 3, 11), float32], float32, Tensor[(528), float32]) */;
  %41 = %28.2;
  %42 = @func_2313(%31, %32) /* ty=Tensor[(8, 2, 6), float32] */;
  %43 = %33.0;
  %44 = bitwise_xor(%34, %35) /* ty=Tensor[(4, 7, 11), uint8] */;
  %45 = %40.1;
  (%41, %42, %var_4632, %43, %44, %45, %var_4652)
}

def @func_7166() -> (Tensor[(2, 2, 9), bool],) {
  %46 = @func_6314() /* ty=(Tensor[(2, 2, 9), bool],) */;
  %47 = %46.0;
  (%47,)
}

def @func_6400(%var_6388: Tensor[(14, 7, 5), uint32]) -> Tensor[(14, 7, 5), uint32] {
  %48 = cast(meta[relay.Constant][2] /* ty=Tensor[(14, 7, 5), uint32] */, dtype="uint32") /* ty=Tensor[(14, 7, 5), uint32] */;
  %49 = shape_of(%var_6388, dtype="int32") /* ty=Tensor[(3), int32] */;
  %50 = cast(%var_6388, dtype="uint32") /* ty=Tensor[(14, 7, 5), uint32] */;
  %51 = dyn.reshape(%48, %49, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  logical_xor(%50, %51) /* ty=Tensor[(14, 7, 5), uint32] */
}

def @func_1637() -> Tensor[(2, 2, 9), bool] {
  %52 = cast(meta[relay.Constant][4] /* ty=Tensor[(2, 2, 9), bool] */, dtype="bool") /* ty=Tensor[(2, 2, 9), bool] */;
  %53 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(2, 2, 9), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %54 = cast(meta[relay.Constant][3] /* ty=Tensor[(2, 2, 9), bool] */, dtype="bool") /* ty=Tensor[(2, 2, 9), bool] */;
  %55 = dyn.reshape(%52, %53, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%54, %55) /* ty=Tensor[(2, 2, 9), bool] */
}

def @func_8625() -> float32 {
  %56 = @func_1889() /* ty=(Tensor[(2, 2, 9), bool], float32, float32, Tensor[(528), float32]) */;
  %56.1
}

def @func_5138() -> (float32, float32) {
  %57 = @func_4511() /* ty=(float32,) */;
  %58 = @func_4511() /* ty=(float32,) */;
  %59 = %57.0;
  %60 = %58.0;
  (%59, %60)
}

def @func_4907(%var_4901: Tensor[(256), float64]) -> (Tensor[(256), int16],) {
  %61 = @func_1957() /* ty=(float32, Tensor[(256), int64]) */;
  %62 = %61.1;
  %63 = cast(%62, dtype="float64") /* ty=Tensor[(256), float64] */;
  %64 = log10(%63) /* ty=Tensor[(256), float64] */;
  %65 = cast(%var_4901, dtype="int16") /* ty=Tensor[(256), int16] */;
  %66 = shape_of(%64, dtype="int32") /* ty=Tensor[(1), int32] */;
  %67 = cast(%64, dtype="int16") /* ty=Tensor[(256), int16] */;
  %68 = dyn.reshape(%65, %66, newshape=[]) /* ty=Tensor[(?), int16] */;
  %69 = minimum(%67, %68) /* ty=Tensor[(256), int16] */;
  (%69,)
}

def @func_8921() -> (Tensor[(256), int64], Tensor[(256), int64]) {
  %70 = @func_7590() /* ty=(Tensor[(256), int64], Tensor[(256), int64]) */;
  %71 = @func_2026() /* ty=Tensor[(256), int64] */;
  %72 = %70.1;
  (%71, %72)
}

def @func_7671() -> (Tensor[(256), int64],) {
  %73 = @func_7590() /* ty=(Tensor[(256), int64], Tensor[(256), int64]) */;
  %74 = %73.1;
  (%74,)
}

def @func_9259(%var_9234: Tensor[(256), int64]) -> (Tensor[(256), int8],) {
  %75 = @func_3589() /* ty=(Tensor[(256), int64],) */;
  %76 = %75.0;
  %77 = cast(%var_9234, dtype="bool") /* ty=Tensor[(256), bool] */;
  %78 = shape_of(%76, dtype="int32") /* ty=Tensor[(1), int32] */;
  %79 = cast(%76, dtype="bool") /* ty=Tensor[(256), bool] */;
  %80 = dyn.reshape(%77, %78, newshape=[]) /* ty=Tensor[(?), bool] */;
  %81 = logical_and(%79, %80) /* ty=Tensor[(256), bool] */;
  %82 = cast(%76, dtype="int8") /* ty=Tensor[(256), int8] */;
  %83 = shape_of(%81, dtype="int32") /* ty=Tensor[(1), int32] */;
  %84 = cast(%81, dtype="int8") /* ty=Tensor[(256), int8] */;
  %85 = dyn.reshape(%82, %83, newshape=[]) /* ty=Tensor[(?), int8] */;
  %86 = logical_xor(%84, %85) /* ty=Tensor[(256), int8] */;
  (%86,)
}

def @func_9336() -> Tensor[(2, 2, 9), bool] {
  %87 = @func_5680() /* ty=(Tensor[(2, 2, 9), bool],) */;
  %87.0
}

def @func_9804() -> (float32, float32) {
  %88 = @func_6185() /* ty=(float32, float32, float32) */;
  %89 = @func_2895() /* ty=float32 */;
  %90 = %88.1;
  (%89, %90)
}

def @func_8437(%var_8377: Tensor[(11, 2, 10), float64], %var_8430: Tensor[(11, 2, 10), float64]) -> (Tensor[(2, 14, 7), float32], Tensor[(196), float32], Tensor[(?, 480), int32], Tensor[(11, 2, 10), float32]) {
  %91 = cast(meta[relay.Constant][5] /* ty=Tensor[(196), float32] */, dtype="float32") /* ty=Tensor[(196), float32] */;
  %92 = reshape(%91, newshape=[2, 14, 7]) /* ty=Tensor[(2, 14, 7), float32] */;
  %93 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 480), float32] */, dtype="float32") /* ty=Tensor[(1, 480), float32] */;
  %94 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 480), float32] */, dtype="float32") /* ty=Tensor[(1, 480), float32] */;
  %95 = reshape(%93, newshape=[8, 12, 5]) /* ty=Tensor[(8, 12, 5), float32] */;
  %96 = reshape(%94, newshape=[8, 12, 5]) /* ty=Tensor[(8, 12, 5), float32] */;
  %97 = @func_3105(%95, %96) /* ty=(Tensor[(8, 12, 5), bool], Tensor[(8, 12, 5), float32]) */;
  %98 = %97.0;
  %99 = cast(%98, dtype="int32") /* ty=Tensor[(8, 12, 5), int32] */;
  %100 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(1, 480), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %101 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 480), float32] */, dtype="int32") /* ty=Tensor[(1, 480), int32] */;
  %102 = dyn.reshape(%99, %100, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %103 = cast(%var_8377, dtype="float64") /* ty=Tensor[(11, 2, 10), float64] */;
  %104 = erf(%103) /* ty=Tensor[(11, 2, 10), float64] */;
  %105 = cast(%var_8430, dtype="float32") /* ty=Tensor[(11, 2, 10), float32] */;
  %106 = shape_of(%104, dtype="int32") /* ty=Tensor[(3), int32] */;
  %107 = cast(%104, dtype="float32") /* ty=Tensor[(11, 2, 10), float32] */;
  %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %109 = @func_5428(%92) /* ty=Tensor[(2, 14, 7), float32] */;
  %110 = bitwise_xor(%101, %102) /* ty=Tensor[(?, 480), int32] */;
  %111 = mod(%107, %108) /* ty=Tensor[(11, 2, 10), float32] */;
  (%109, meta[relay.Constant][5] /* ty=Tensor[(196), float32] */, %110, %111)
}

def @func_10077(%var_10069: Tensor[(252, 1), bool]) -> (Tensor[(256), int64], Tensor[(528), int32], Tensor[(252, 1), bool], Tensor[(1, 528), float32], Tensor[(1, 3, 12), bool]) {
  %112 = cast(%var_10069, dtype="bool") /* ty=Tensor[(252, 1), bool] */;
  %113 = cast(%var_10069, dtype="bool") /* ty=Tensor[(252, 1), bool] */;
  %114 = cast(meta[relay.Constant][7] /* ty=Tensor[(1, 528), float32] */, dtype="float32") /* ty=Tensor[(1, 528), float32] */;
  %115 = reshape(%112, newshape=[7, 3, 12]) /* ty=Tensor[(7, 3, 12), bool] */;
  %116 = reshape(%113, newshape=[7, 3, 12]) /* ty=Tensor[(7, 3, 12), bool] */;
  %117 = reshape(%114, newshape=[528]) /* ty=Tensor[(528), float32] */;
  %118 = @func_2598(%115, %116, %117) /* ty=(Tensor[(7, 3, 12), bool], Tensor[(528), int32], Tensor[(528), float32]) */;
  %119 = @func_2978() /* ty=(Tensor[(1, 3, 12), bool], Tensor[(1, 3, 12), bool], bool) */;
  %120 = @func_2026() /* ty=Tensor[(256), int64] */;
  %121 = %118.1;
  %122 = %119.1;
  (%120, %121, %var_10069, meta[relay.Constant][7] /* ty=Tensor[(1, 528), float32] */, %122)
}

def @func_9389(%var_9383: Tensor[(6, 1), float32]) -> (Tensor[(256), int64], Tensor[(3, 1, 2), float32], Tensor[(6, 1), float32]) {
  %123 = @func_5180() /* ty=(Tensor[(256), int64],) */;
  %124 = cast(%var_9383, dtype="float32") /* ty=Tensor[(6, 1), float32] */;
  %125 = reshape(%124, newshape=[3, 1, 2]) /* ty=Tensor[(3, 1, 2), float32] */;
  %126 = @func_6655(%125) /* ty=(Tensor[(3, 1, 2), float32],) */;
  %127 = %123.0;
  %128 = %126.0;
  (%127, %128, %var_9383)
}

def @func_9522() -> (float32,) {
  %129 = @func_9463() /* ty=(Tensor[(2, 2, 9), bool], float32) */;
  %130 = %129.1;
  (%130,)
}

def @func_8658() -> Tensor[(2, 2, 9), bool] {
  @func_5378() /* ty=Tensor[(2, 2, 9), bool] */
}

def @func_4424(%var_4418: Tensor[(256), int64]) -> Tensor[(256), bool] {
  %131 = @func_2994() /* ty=(Tensor[(256), int64],) */;
  %132 = %131.0;
  %133 = cast(%var_4418, dtype="bool") /* ty=Tensor[(256), bool] */;
  %134 = shape_of(%132, dtype="int32") /* ty=Tensor[(1), int32] */;
  %135 = cast(%132, dtype="bool") /* ty=Tensor[(256), bool] */;
  %136 = dyn.reshape(%133, %134, newshape=[]) /* ty=Tensor[(?), bool] */;
  logical_or(%135, %136) /* ty=Tensor[(256), bool] */
}

def @func_745(%var_727: Tensor[(15, 63), float64]) -> (Tensor[(16, 15, 10), uint32], Tensor[(9, 15, 7), bool], Tensor[(15, 63), float64], Tensor[(1, 3, 12), bool], Tensor[(36), bool]) {
  %137 = cast(meta[relay.Constant][8] /* ty=uint16 */, dtype="int16") /* ty=int16 */;
  %138 = cast(meta[relay.Constant][9] /* ty=Tensor[(16, 15, 10), uint16] */, dtype="int16") /* ty=Tensor[(16, 15, 10), int16] */;
  %139 = subtract(%137, %138) /* ty=Tensor[(16, 15, 10), int16] */;
  %140 = cast(meta[relay.Constant][8] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %141 = cast(meta[relay.Constant][9] /* ty=Tensor[(16, 15, 10), uint16] */, dtype="uint16") /* ty=Tensor[(16, 15, 10), uint16] */;
  %142 = logical_xor(%140, %141) /* ty=Tensor[(16, 15, 10), uint16] */;
  %143 = cast(%142, dtype="uint32") /* ty=Tensor[(16, 15, 10), uint32] */;
  %144 = shape_of(%139, dtype="int32") /* ty=Tensor[(3), int32] */;
  %145 = cast(%139, dtype="uint32") /* ty=Tensor[(16, 15, 10), uint32] */;
  %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %147 = cast(%var_727, dtype="float64") /* ty=Tensor[(15, 63), float64] */;
  %148 = reshape(%147, newshape=[9, 15, 7]) /* ty=Tensor[(9, 15, 7), float64] */;
  %149 = @func_97(%148) /* ty=(Tensor[(9, 15, 7), bool],) */;
  %150 = cast(meta[relay.Constant][8] /* ty=uint16 */, dtype="bool") /* ty=bool */;
  %151 = cast(meta[relay.Constant][10] /* ty=Tensor[(36), bool] */, dtype="bool") /* ty=Tensor[(36), bool] */;
  %152 = reshape(%150, newshape=[]) /* ty=bool */;
  %153 = reshape(%151, newshape=[1, 3, 12]) /* ty=Tensor[(1, 3, 12), bool] */;
  %154 = @func_110(%152, %153) /* ty=(Tensor[(1, 3, 12), bool],) */;
  %155 = maximum(%145, %146) /* ty=Tensor[(16, 15, 10), uint32] */;
  %156 = %149.0;
  %157 = %154.0;
  (%155, %156, %var_727, %157, meta[relay.Constant][10] /* ty=Tensor[(36), bool] */)
}

def @func_3897() -> Tensor[(256), int64] {
  @func_2026() /* ty=Tensor[(256), int64] */
}

def @func_1717(%var_1682: Tensor[(2, 2, 9), bool]) -> Tensor[(2, 2, 9), bool] {
  %158 = @func_1637() /* ty=Tensor[(2, 2, 9), bool] */;
  %159 = cast(%var_1682, dtype="bool") /* ty=Tensor[(2, 2, 9), bool] */;
  %160 = shape_of(%158, dtype="int32") /* ty=Tensor[(3), int32] */;
  %161 = cast(%158, dtype="bool") /* ty=Tensor[(2, 2, 9), bool] */;
  %162 = dyn.reshape(%159, %160, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%161, %162) /* ty=Tensor[(2, 2, 9), bool] */
}

def @func_4820(%var_4796: Tensor[(3, 8, 13), float64], %var_4797: Tensor[(3, 8, 13), float64]) -> Tensor[(3, 8, 13), float64] {
  %163 = cast(%var_4797, dtype="float64") /* ty=Tensor[(3, 8, 13), float64] */;
  %164 = shape_of(%var_4796, dtype="int32") /* ty=Tensor[(3), int32] */;
  %165 = cast(%var_4796, dtype="float64") /* ty=Tensor[(3, 8, 13), float64] */;
  %166 = dyn.reshape(%163, %164, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %167 = divide(%165, %166) /* ty=Tensor[(3, 8, 13), float64] */;
  %168 = cast(%var_4797, dtype="float64") /* ty=Tensor[(3, 8, 13), float64] */;
  %169 = shape_of(%167, dtype="int32") /* ty=Tensor[(3), int32] */;
  %170 = cast(%167, dtype="float64") /* ty=Tensor[(3, 8, 13), float64] */;
  %171 = dyn.reshape(%168, %169, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%170, %171) /* ty=Tensor[(3, 8, 13), float64] */
}

def @func_5180() -> (Tensor[(256), int64],) {
  %172 = @func_4078() /* ty=(Tensor[(256), int64],) */;
  %173 = %172.0;
  (%173,)
}

def @func_9760() -> (Tensor[(528), float32], Tensor[(9, 15, 7), bool], Tensor[(945), float64], Tensor[(256), int64]) {
  %174 = @func_9492() /* ty=(Tensor[(528), float32],) */;
  %175 = cast(meta[relay.Constant][11] /* ty=Tensor[(945), float64] */, dtype="float64") /* ty=Tensor[(945), float64] */;
  %176 = reshape(%175, newshape=[9, 15, 7]) /* ty=Tensor[(9, 15, 7), float64] */;
  %177 = @func_97(%176) /* ty=(Tensor[(9, 15, 7), bool],) */;
  %178 = %174.0;
  %179 = %177.0;
  %180 = @func_8137() /* ty=Tensor[(256), int64] */;
  (%178, %179, meta[relay.Constant][11] /* ty=Tensor[(945), float64] */, %180)
}

def @func_10755() -> (Tensor[(2, 2, 9), float32], float32) {
  %181 = @func_10004() /* ty=(Tensor[(2, 2, 9), float32],) */;
  %182 = @func_3775() /* ty=(bool, float32) */;
  %183 = %181.0;
  %184 = %182.1;
  (%183, %184)
}

def @func_10248(%var_10207: Tensor[(16, 9, 4), float64], %var_10212: Tensor[(252), bool]) -> (Tensor[(252), bool], Tensor[(252), bool], Tensor[(16, 9, 4), bool]) {
  %185 = cast(%var_10212, dtype="bool") /* ty=Tensor[(252), bool] */;
  %186 = reshape(%185, newshape=[252]) /* ty=Tensor[(252), bool] */;
  %187 = @func_5854(%186) /* ty=(Tensor[(2, 2, 9), bool], Tensor[(528), float32], Tensor[(252), bool], Tensor[(264, 2), float32], Tensor[(2, 2, 9), bool]) */;
  %188 = cast(%var_10207, dtype="float64") /* ty=Tensor[(16, 9, 4), float64] */;
  %189 = log(%188) /* ty=Tensor[(16, 9, 4), float64] */;
  %190 = cast(%var_10207, dtype="bool") /* ty=Tensor[(16, 9, 4), bool] */;
  %191 = shape_of(%189, dtype="int32") /* ty=Tensor[(3), int32] */;
  %192 = cast(%189, dtype="bool") /* ty=Tensor[(16, 9, 4), bool] */;
  %193 = dyn.reshape(%190, %191, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %194 = %187.2;
  %195 = logical_and(%192, %193) /* ty=Tensor[(16, 9, 4), bool] */;
  (%194, %var_10212, %195)
}

def @func_2129(%var_2109: Tensor[(2, 2, 9), bool]) -> (Tensor[(2, 2, 9), bool], Tensor[(1, 3, 12), bool]) {
  %196 = @func_1637() /* ty=Tensor[(2, 2, 9), bool] */;
  %197 = cast(%var_2109, dtype="float32") /* ty=Tensor[(2, 2, 9), float32] */;
  %198 = shape_of(%196, dtype="int32") /* ty=Tensor[(3), int32] */;
  %199 = cast(%196, dtype="float32") /* ty=Tensor[(2, 2, 9), float32] */;
  %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %201 = floor_divide(%199, %200) /* ty=Tensor[(2, 2, 9), float32] */;
  %202 = cast(%201, dtype="bool") /* ty=Tensor[(2, 2, 9), bool] */;
  %203 = shape_of(%196, dtype="int32") /* ty=Tensor[(3), int32] */;
  %204 = cast(%196, dtype="bool") /* ty=Tensor[(2, 2, 9), bool] */;
  %205 = dyn.reshape(%202, %203, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %206 = @func_1819() /* ty=(Tensor[(2, 2, 9), bool], Tensor[(4, 8, 8), int64], Tensor[(256), int64], Tensor[(1, 3, 12), bool]) */;
  %207 = less(%204, %205) /* ty=Tensor[(2, 2, 9), bool] */;
  %208 = %206.3;
  (%207, %208)
}

def @func_4136() -> (Tensor[(2, 2, 9), bool], Tensor[(2, 2, 9), bool], float32, float32) {
  %209 = @func_3342() /* ty=(Tensor[(256), int64], Tensor[(2, 2, 9), bool]) */;
  %210 = @func_2544() /* ty=(Tensor[(2, 2, 9), bool],) */;
  %211 = @func_2811() /* ty=(float32,) */;
  %212 = @func_2811() /* ty=(float32,) */;
  %213 = %209.1;
  %214 = %210.0;
  %215 = %211.0;
  %216 = %212.0;
  (%213, %214, %215, %216)
}

def @func_7372() -> (float32,) {
  %217 = @func_4511() /* ty=(float32,) */;
  %218 = %217.0;
  (%218,)
}

def @func_2254(%var_2246: float64, %var_2247: Tensor[(15, 13, 6), float64]) -> (Tensor[(15, 13, 6), float64],) {
  %219 = cast(%var_2246, dtype="float64") /* ty=float64 */;
  %220 = cast(%var_2247, dtype="float64") /* ty=Tensor[(15, 13, 6), float64] */;
  %221 = floor_mod(%219, %220) /* ty=Tensor[(15, 13, 6), float64] */;
  (%221,)
}

def @func_110(%var_103: bool, %var_104: Tensor[(1, 3, 12), bool]) -> (Tensor[(1, 3, 12), bool],) {
  %222 = cast(%var_103, dtype="bool") /* ty=bool */;
  %223 = cast(%var_104, dtype="bool") /* ty=Tensor[(1, 3, 12), bool] */;
  %224 = logical_or(%222, %223) /* ty=Tensor[(1, 3, 12), bool] */;
  (%224,)
}

def @func_2654() -> (Tensor[(2, 2, 9), bool],) {
  %225 = @func_1903() /* ty=Tensor[(2, 2, 9), bool] */;
  (%225,)
}

def @func_3342() -> (Tensor[(256), int64], Tensor[(2, 2, 9), bool]) {
  %226 = @func_2994() /* ty=(Tensor[(256), int64],) */;
  %227 = %226.0;
  %228 = @func_1637() /* ty=Tensor[(2, 2, 9), bool] */;
  (%227, %228)
}

def @func_7318() -> float32 {
  @func_3470() /* ty=float32 */
}

def @func_5854(%var_5837: Tensor[(252), bool]) -> (Tensor[(2, 2, 9), bool], Tensor[(528), float32], Tensor[(252), bool], Tensor[(264, 2), float32], Tensor[(2, 2, 9), bool]) {
  %229 = @func_3342() /* ty=(Tensor[(256), int64], Tensor[(2, 2, 9), bool]) */;
  %230 = cast(%var_5837, dtype="bool") /* ty=Tensor[(252), bool] */;
  %231 = cast(%var_5837, dtype="bool") /* ty=Tensor[(252), bool] */;
  %232 = cast(meta[relay.Constant][12] /* ty=Tensor[(264, 2), float32] */, dtype="float32") /* ty=Tensor[(264, 2), float32] */;
  %233 = reshape(%230, newshape=[7, 3, 12]) /* ty=Tensor[(7, 3, 12), bool] */;
  %234 = reshape(%231, newshape=[7, 3, 12]) /* ty=Tensor[(7, 3, 12), bool] */;
  %235 = reshape(%232, newshape=[528]) /* ty=Tensor[(528), float32] */;
  %236 = @func_2598(%233, %234, %235) /* ty=(Tensor[(7, 3, 12), bool], Tensor[(528), int32], Tensor[(528), float32]) */;
  %237 = %229.1;
  %238 = %236.2;
  %239 = @func_5378() /* ty=Tensor[(2, 2, 9), bool] */;
  (%237, %238, %var_5837, meta[relay.Constant][12] /* ty=Tensor[(264, 2), float32] */, %239)
}

def @func_9492() -> (Tensor[(528), float32],) {
  %240 = @func_6995() /* ty=(Tensor[(528), float32], Tensor[(256), int64], Tensor[(256), int64], Tensor[(256), int16]) */;
  %241 = %240.0;
  (%241,)
}

def @func_4981() -> (Tensor[(2, 2, 9), bool], Tensor[(256), int64], Tensor[(256), int64], float32) {
  %242 = @func_2467() /* ty=(Tensor[(2, 2, 9), bool],) */;
  %243 = @func_2811() /* ty=(float32,) */;
  %244 = %242.0;
  %245 = @func_2026() /* ty=Tensor[(256), int64] */;
  %246 = @func_2238() /* ty=Tensor[(256), int64] */;
  %247 = %243.0;
  (%244, %245, %246, %247)
}

def @func_8560(%var_8558: Tensor[(80), uint64]) -> (Tensor[(256), int64], Tensor[(3, 1, 2), float32], Tensor[(6), float32], Tensor[(10, 8), uint64], Tensor[(80), uint64]) {
  %248 = @func_7671() /* ty=(Tensor[(256), int64],) */;
  %249 = cast(meta[relay.Constant][13] /* ty=Tensor[(6), float32] */, dtype="float32") /* ty=Tensor[(6), float32] */;
  %250 = reshape(%249, newshape=[3, 1, 2]) /* ty=Tensor[(3, 1, 2), float32] */;
  %251 = @func_6655(%250) /* ty=(Tensor[(3, 1, 2), float32],) */;
  %252 = cast(%var_8558, dtype="uint64") /* ty=Tensor[(80), uint64] */;
  %253 = reshape(%252, newshape=[10, 8]) /* ty=Tensor[(10, 8), uint64] */;
  %254 = @func_1091(%253) /* ty=(Tensor[(10, 8), uint64], Tensor[(9, 15, 7), bool], Tensor[(945), float64]) */;
  %255 = %248.0;
  %256 = %251.0;
  %257 = %254.0;
  (%255, %256, meta[relay.Constant][13] /* ty=Tensor[(6), float32] */, %257, %var_8558)
}

def @func_7497(%var_7491: Tensor[(21, 3), int8]) -> (Tensor[(256), int64], Tensor[(7, 9, 4), int8], Tensor[(252), int8], Tensor[(21, 3), float64], Tensor[(3, 4, 15), int32]) {
  %258 = @func_2994() /* ty=(Tensor[(256), int64],) */;
  %259 = cast(meta[relay.Constant][14] /* ty=Tensor[(21, 3), int8] */, dtype="int8") /* ty=Tensor[(21, 3), int8] */;
  %260 = cast(meta[relay.Constant][15] /* ty=Tensor[(252), int8] */, dtype="int8") /* ty=Tensor[(252), int8] */;
  %261 = reshape(%259, newshape=[7, 9, 1]) /* ty=Tensor[(7, 9, 1), int8] */;
  %262 = reshape(%260, newshape=[7, 9, 4]) /* ty=Tensor[(7, 9, 4), int8] */;
  %263 = @func_6842(%261, %262) /* ty=(Tensor[(7, 9, 4), int8],) */;
  %264 = cast(%var_7491, dtype="float64") /* ty=Tensor[(21, 3), float64] */;
  %265 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(21, 3), int8] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %266 = cast(meta[relay.Constant][14] /* ty=Tensor[(21, 3), int8] */, dtype="float64") /* ty=Tensor[(21, 3), float64] */;
  %267 = dyn.reshape(%264, %265, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %268 = @func_6734() /* ty=(Tensor[(720), uint16], uint16, Tensor[(5, 6, 13), float64], Tensor[(9, 15, 7), bool], Tensor[(1, 3, 12), bool], float32, Tensor[(3, 4, 15), int32], Tensor[(180), int32]) */;
  %269 = %258.0;
  %270 = %263.0;
  %271 = subtract(%266, %267) /* ty=Tensor[(21, 3), float64] */;
  %272 = %268.6;
  (%269, %270, meta[relay.Constant][15] /* ty=Tensor[(252), int8] */, %271, %272)
}

def @func_9536(%var_9528: Tensor[(8, 1, 13), float64]) -> (Tensor[(8, 1, 13), float64],) {
  %273 = cast(%var_9528, dtype="float64") /* ty=Tensor[(8, 1, 13), float64] */;
  %274 = erf(%273) /* ty=Tensor[(8, 1, 13), float64] */;
  (%274,)
}

def @func_7365() -> (Tensor[(528), float64],) {
  %275 = @func_3079() /* ty=(Tensor[(2, 2, 9), bool], Tensor[(528), float32], float32, Tensor[(528), float32], float32) */;
  %276 = %275.3;
  %277 = cast(%276, dtype="float64") /* ty=Tensor[(528), float64] */;
  %278 = asin(%277) /* ty=Tensor[(528), float64] */;
  (%278,)
}

def @func_1348(%var_1316: Tensor[(1, 6, 12), int8], %var_1317: Tensor[(8, 6, 12), int8]) -> (Tensor[(8, 6, 12), int8], Tensor[(1, 3, 12), bool], Tensor[(5, 189), float64]) {
  %279 = cast(%var_1316, dtype="int8") /* ty=Tensor[(1, 6, 12), int8] */;
  %280 = cast(%var_1317, dtype="int8") /* ty=Tensor[(8, 6, 12), int8] */;
  %281 = cast(meta[relay.Constant][16] /* ty=Tensor[(5, 189), float64] */, dtype="float64") /* ty=Tensor[(5, 189), float64] */;
  %282 = reshape(%281, newshape=[15, 63]) /* ty=Tensor[(15, 63), float64] */;
  %283 = @func_745(%282) /* ty=(Tensor[(16, 15, 10), uint32], Tensor[(9, 15, 7), bool], Tensor[(15, 63), float64], Tensor[(1, 3, 12), bool], Tensor[(36), bool]) */;
  %284 = add(%279, %280) /* ty=Tensor[(8, 6, 12), int8] */;
  %285 = %283.3;
  (%284, %285, meta[relay.Constant][16] /* ty=Tensor[(5, 189), float64] */)
}

def @func_6185() -> (float32, float32, float32) {
  %286 = @func_1895() /* ty=(float32,) */;
  %287 = @func_1889() /* ty=(Tensor[(2, 2, 9), bool], float32, float32, Tensor[(528), float32]) */;
  %288 = @func_3360() /* ty=(float32,) */;
  %289 = %286.0;
  %290 = %287.1;
  %291 = %288.0;
  (%289, %290, %291)
}

def @func_3918() -> (float32,) {
  %292 = @func_1895() /* ty=(float32,) */;
  %293 = %292.0;
  (%293,)
}

def @func_4698(%var_4692: Tensor[(256), int64]) -> Tensor[(256), float32] {
  %294 = @func_3342() /* ty=(Tensor[(256), int64], Tensor[(2, 2, 9), bool]) */;
  %295 = %294.0;
  %296 = cast(%var_4692, dtype="float32") /* ty=Tensor[(256), float32] */;
  %297 = shape_of(%295, dtype="int32") /* ty=Tensor[(1), int32] */;
  %298 = cast(%295, dtype="float32") /* ty=Tensor[(256), float32] */;
  %299 = dyn.reshape(%296, %297, newshape=[]) /* ty=Tensor[(?), float32] */;
  floor_mod(%298, %299) /* ty=Tensor[(256), float32] */
}

def @func_3775() -> (bool, float32) {
  %300 = @func_2978() /* ty=(Tensor[(1, 3, 12), bool], Tensor[(1, 3, 12), bool], bool) */;
  %301 = @func_1889() /* ty=(Tensor[(2, 2, 9), bool], float32, float32, Tensor[(528), float32]) */;
  %302 = %300.2;
  %303 = %301.1;
  (%302, %303)
}

def @func_2544() -> (Tensor[(2, 2, 9), bool],) {
  %304 = @func_1637() /* ty=Tensor[(2, 2, 9), bool] */;
  (%304,)
}

def @func_2344(%var_2333: Tensor[(528), float32]) -> (Tensor[(528), int32], Tensor[(528), uint64]) {
  %305 = @func_2295() /* ty=(Tensor[(528), float32],) */;
  %306 = %305.0;
  %307 = cast(%var_2333, dtype="int32") /* ty=Tensor[(528), int32] */;
  %308 = shape_of(%306, dtype="int32") /* ty=Tensor[(1), int32] */;
  %309 = cast(%306, dtype="int32") /* ty=Tensor[(528), int32] */;
  %310 = dyn.reshape(%307, %308, newshape=[]) /* ty=Tensor[(?), int32] */;
  %311 = cast(meta[relay.Constant][17] /* ty=Tensor[(528), float32] */, dtype="uint64") /* ty=Tensor[(528), uint64] */;
  %312 = shape_of(%306, dtype="int32") /* ty=Tensor[(1), int32] */;
  %313 = cast(%306, dtype="uint64") /* ty=Tensor[(528), uint64] */;
  %314 = dyn.reshape(%311, %312, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %315 = bitwise_and(%309, %310) /* ty=Tensor[(528), int32] */;
  %316 = maximum(%313, %314) /* ty=Tensor[(528), uint64] */;
  (%315, %316)
}

def @func_4360() -> Tensor[(2, 2, 9), bool] {
  %317 = @func_2544() /* ty=(Tensor[(2, 2, 9), bool],) */;
  %317.0
}

def @func_5110(%var_5099: uint16) -> Tensor[(5, 6, 13), uint16] {
  %318 = cast(%var_5099, dtype="uint16") /* ty=uint16 */;
  %319 = cast(meta[relay.Constant][18] /* ty=Tensor[(5, 6, 13), uint16] */, dtype="uint16") /* ty=Tensor[(5, 6, 13), uint16] */;
  right_shift(%318, %319) /* ty=Tensor[(5, 6, 13), uint16] */
}

def @func_2598(%var_2581: Tensor[(7, 3, 12), bool], %var_2582: Tensor[(7, 3, 12), bool], %var_2595: Tensor[(528), float32]) -> (Tensor[(7, 3, 12), bool], Tensor[(528), int32], Tensor[(528), float32]) {
  %320 = cast(%var_2582, dtype="bool") /* ty=Tensor[(7, 3, 12), bool] */;
  %321 = shape_of(%var_2581, dtype="int32") /* ty=Tensor[(3), int32] */;
  %322 = cast(%var_2581, dtype="bool") /* ty=Tensor[(7, 3, 12), bool] */;
  %323 = dyn.reshape(%320, %321, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %324 = cast(%var_2595, dtype="float32") /* ty=Tensor[(528), float32] */;
  %325 = reshape(%324, newshape=[528]) /* ty=Tensor[(528), float32] */;
  %326 = @func_2344(%325) /* ty=(Tensor[(528), int32], Tensor[(528), uint64]) */;
  %327 = logical_or(%322, %323) /* ty=Tensor[(7, 3, 12), bool] */;
  %328 = %326.0;
  (%327, %328, %var_2595)
}

def @func_5639() -> (bool,) {
  %329 = @func_5508() /* ty=(Tensor[(256), int64], bool, Tensor[(9, 15, 7), bool], Tensor[(80), uint64]) */;
  %330 = %329.1;
  (%330,)
}

def @func_1819() -> (Tensor[(2, 2, 9), bool], Tensor[(4, 8, 8), int64], Tensor[(256), int64], Tensor[(1, 3, 12), bool]) {
  %331 = cast(meta[relay.Constant][19] /* ty=Tensor[(256), int64] */, dtype="int64") /* ty=Tensor[(256), int64] */;
  %332 = cast(meta[relay.Constant][19] /* ty=Tensor[(256), int64] */, dtype="int64") /* ty=Tensor[(256), int64] */;
  %333 = reshape(%331, newshape=[4, 8, 8]) /* ty=Tensor[(4, 8, 8), int64] */;
  %334 = reshape(%332, newshape=[4, 8, 8]) /* ty=Tensor[(4, 8, 8), int64] */;
  %335 = @func_1243(%333, %334) /* ty=(Tensor[(4, 8, 8), int64],) */;
  %336 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %337 = @func_1637() /* ty=Tensor[(2, 2, 9), bool] */;
  %338 = cast(%337, dtype="bool") /* ty=Tensor[(2, 2, 9), bool] */;
  %339 = reshape(%336, newshape=[]) /* ty=bool */;
  %340 = reshape(%338, newshape=[1, 3, 12]) /* ty=Tensor[(1, 3, 12), bool] */;
  %341 = @func_110(%339, %340) /* ty=(Tensor[(1, 3, 12), bool],) */;
  %342 = %341.0;
  %343 = cast(%342, dtype="bool") /* ty=Tensor[(1, 3, 12), bool] */;
  %344 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %345 = %335.0;
  %346 = equal(%343, %344) /* ty=Tensor[(1, 3, 12), bool] */;
  (%337, %345, meta[relay.Constant][19] /* ty=Tensor[(256), int64] */, %346)
}

def @func_7829() -> (Tensor[(945), uint32],) {
  %347 = @func_7149() /* ty=(Tensor[(945), uint32],) */;
  %348 = %347.0;
  (%348,)
}

def @func_8137() -> Tensor[(256), int64] {
  %349 = @func_5357() /* ty=(Tensor[(256), int64], Tensor[(256), int64], Tensor[(256), bool]) */;
  %349.1
}

def @func_3360() -> (float32,) {
  %350 = @func_1895() /* ty=(float32,) */;
  %351 = %350.0;
  (%351,)
}

def @func_2895() -> float32 {
  %352 = @func_2811() /* ty=(float32,) */;
  %352.0
}

def @func_2938() -> (float32,) {
  %353 = @func_1889() /* ty=(Tensor[(2, 2, 9), bool], float32, float32, Tensor[(528), float32]) */;
  %354 = %353.1;
  (%354,)
}

def @func_1091(%var_1077: Tensor[(10, 8), uint64]) -> (Tensor[(10, 8), uint64], Tensor[(9, 15, 7), bool], Tensor[(945), float64]) {
  %355 = cast(%var_1077, dtype="uint64") /* ty=Tensor[(10, 8), uint64] */;
  %356 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(10, 8), uint64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %357 = cast(meta[relay.Constant][20] /* ty=Tensor[(10, 8), uint64] */, dtype="uint64") /* ty=Tensor[(10, 8), uint64] */;
  %358 = dyn.reshape(%355, %356, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %359 = cast(meta[relay.Constant][21] /* ty=Tensor[(945), float64] */, dtype="float64") /* ty=Tensor[(945), float64] */;
  %360 = reshape(%359, newshape=[9, 15, 7]) /* ty=Tensor[(9, 15, 7), float64] */;
  %361 = @func_97(%360) /* ty=(Tensor[(9, 15, 7), bool],) */;
  %362 = add(%357, %358) /* ty=Tensor[(10, 8), uint64] */;
  %363 = %361.0;
  (%362, %363, meta[relay.Constant][21] /* ty=Tensor[(945), float64] */)
}

def @func_2467() -> (Tensor[(2, 2, 9), bool],) {
  %364 = @func_1637() /* ty=Tensor[(2, 2, 9), bool] */;
  (%364,)
}

def @func_1974() -> (float32, Tensor[(2, 2, 9), bool]) {
  %365 = @func_1957() /* ty=(float32, Tensor[(256), int64]) */;
  %366 = %365.0;
  %367 = @func_1903() /* ty=Tensor[(2, 2, 9), bool] */;
  (%366, %367)
}

def @func_10501() -> (Tensor[(2, 2, 9), uint64], float32, float32, Tensor[(720), uint16]) {
  %368 = @func_9804() /* ty=(float32, float32) */;
  %369 = @func_2859() /* ty=(Tensor[(256), int64], Tensor[(720), uint16], Tensor[(12, 4, 15), uint32]) */;
  %370 = @func_7079() /* ty=Tensor[(2, 2, 9), uint64] */;
  %371 = %368.1;
  %372 = @func_10294() /* ty=float32 */;
  %373 = %369.1;
  (%370, %371, %372, %373)
}

def @func_2402(%var_2367: Tensor[(105, 9), float64], %var_2373: Tensor[(8, 24), float32]) -> (Tensor[(528), float32], Tensor[(1, 3, 12), bool], Tensor[(105, 9), float64], Tensor[(2, 2, 9), float32], Tensor[(8, 24), uint8]) {
  %374 = @func_2295() /* ty=(Tensor[(528), float32],) */;
  %375 = cast(%var_2367, dtype="float64") /* ty=Tensor[(105, 9), float64] */;
  %376 = reshape(%375, newshape=[15, 63]) /* ty=Tensor[(15, 63), float64] */;
  %377 = @func_745(%376) /* ty=(Tensor[(16, 15, 10), uint32], Tensor[(9, 15, 7), bool], Tensor[(15, 63), float64], Tensor[(1, 3, 12), bool], Tensor[(36), bool]) */;
  %378 = @func_1637() /* ty=Tensor[(2, 2, 9), bool] */;
  %379 = cast(%378, dtype="float32") /* ty=Tensor[(2, 2, 9), float32] */;
  %380 = cast(%var_2373, dtype="float32") /* ty=Tensor[(8, 24), float32] */;
  %381 = reshape(%380, newshape=[2, 16, 6]) /* ty=Tensor[(2, 16, 6), float32] */;
  %382 = @func_1272(%381) /* ty=(Tensor[(2, 16, 6), float32],) */;
  %383 = %382.0;
  %384 = cast(%383, dtype="uint8") /* ty=Tensor[(2, 16, 6), uint8] */;
  %385 = shape_of(%var_2373, dtype="int32") /* ty=Tensor[(2), int32] */;
  %386 = cast(%var_2373, dtype="uint8") /* ty=Tensor[(8, 24), uint8] */;
  %387 = dyn.reshape(%384, %385, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %388 = %374.0;
  %389 = %377.3;
  %390 = atanh(%379) /* ty=Tensor[(2, 2, 9), float32] */;
  %391 = minimum(%386, %387) /* ty=Tensor[(8, 24), uint8] */;
  (%388, %389, %var_2367, %390, %391)
}

def @func_677(%var_670: float32, %var_671: Tensor[(16, 3, 11), float32]) -> Tensor[(16, 3, 11), float32] {
  %392 = cast(%var_670, dtype="float32") /* ty=float32 */;
  %393 = cast(%var_671, dtype="float32") /* ty=Tensor[(16, 3, 11), float32] */;
  mod(%392, %393) /* ty=Tensor[(16, 3, 11), float32] */
}

def @func_6058() -> (float32, Tensor[(256), int64]) {
  %394 = @func_2938() /* ty=(float32,) */;
  %395 = @func_5601() /* ty=(Tensor[(256), int64],) */;
  %396 = %394.0;
  %397 = %395.0;
  (%396, %397)
}

def @func_5958(%var_5913: float32, %var_5924: Tensor[(8, 2, 6), float32], %var_5941: Tensor[(196), float32]) -> (Tensor[(2, 2, 9), bool], float32, Tensor[(96), float32], Tensor[(2, 2, 9), bool], Tensor[(8, 2, 6), bool], bool, Tensor[(196), float32], Tensor[(2, 14, 7), float32]) {
  %398 = @func_2654() /* ty=(Tensor[(2, 2, 9), bool],) */;
  %399 = cast(%var_5913, dtype="float32") /* ty=float32 */;
  %400 = cast(meta[relay.Constant][22] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %401 = reshape(%399, newshape=[]) /* ty=float32 */;
  %402 = reshape(%400, newshape=[8, 2, 6]) /* ty=Tensor[(8, 2, 6), float32] */;
  %403 = @func_2313(%401, %402) /* ty=Tensor[(8, 2, 6), float32] */;
  %404 = cast(%403, dtype="float32") /* ty=Tensor[(8, 2, 6), float32] */;
  %405 = tan(%404) /* ty=Tensor[(8, 2, 6), float32] */;
  %406 = cast(%var_5924, dtype="bool") /* ty=Tensor[(8, 2, 6), bool] */;
  %407 = shape_of(%405, dtype="int32") /* ty=Tensor[(3), int32] */;
  %408 = cast(%405, dtype="bool") /* ty=Tensor[(8, 2, 6), bool] */;
  %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %410 = @func_5639() /* ty=(bool,) */;
  %411 = cast(%var_5941, dtype="float32") /* ty=Tensor[(196), float32] */;
  %412 = reshape(%411, newshape=[2, 14, 7]) /* ty=Tensor[(2, 14, 7), float32] */;
  %413 = @func_5428(%412) /* ty=Tensor[(2, 14, 7), float32] */;
  %414 = cast(%413, dtype="float32") /* ty=Tensor[(2, 14, 7), float32] */;
  %415 = @func_5378() /* ty=Tensor[(2, 2, 9), bool] */;
  %416 = %398.0;
  %417 = less(%408, %409) /* ty=Tensor[(8, 2, 6), bool] */;
  %418 = %410.0;
  %419 = tan(%414) /* ty=Tensor[(2, 14, 7), float32] */;
  (%415, %var_5913, meta[relay.Constant][22] /* ty=Tensor[(96), float32] */, %416, %417, %418, %var_5941, %419)
}

def @func_3852(%var_3844: Tensor[(480), float32]) -> (Tensor[(2, 2, 9), bool], Tensor[(8, 12, 5), float32], Tensor[(480), float32]) {
  %420 = cast(%var_3844, dtype="float32") /* ty=Tensor[(480), float32] */;
  %421 = cast(%var_3844, dtype="float32") /* ty=Tensor[(480), float32] */;
  %422 = reshape(%420, newshape=[8, 12, 5]) /* ty=Tensor[(8, 12, 5), float32] */;
  %423 = reshape(%421, newshape=[8, 12, 5]) /* ty=Tensor[(8, 12, 5), float32] */;
  %424 = @func_3105(%422, %423) /* ty=(Tensor[(8, 12, 5), bool], Tensor[(8, 12, 5), float32]) */;
  %425 = @func_1637() /* ty=Tensor[(2, 2, 9), bool] */;
  %426 = %424.1;
  (%425, %426, %var_3844)
}

def @func_7206() -> Tensor[(2, 2, 9), bool] {
  %427 = @func_3342() /* ty=(Tensor[(256), int64], Tensor[(2, 2, 9), bool]) */;
  %427.1
}

def @func_10627() -> (Tensor[(2, 2, 9), bool], float32) {
  %428 = @func_5680() /* ty=(Tensor[(2, 2, 9), bool],) */;
  %429 = %428.0;
  %430 = @func_3470() /* ty=float32 */;
  (%429, %430)
}

def @func_1550(%var_1529: Tensor[(192), float32]) -> (Tensor[(11, 4, 12), bool], Tensor[(11, 4, 12), float32], Tensor[(11, 4, 12), uint8], Tensor[(2, 16, 6), bool], Tensor[(2, 16, 6), float32]) {
  %431 = cast(meta[relay.Constant][24] /* ty=Tensor[(11, 4, 12), uint8] */, dtype="bool") /* ty=Tensor[(11, 4, 12), bool] */;
  %432 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(11, 4, 12), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %433 = cast(meta[relay.Constant][23] /* ty=Tensor[(11, 4, 12), uint8] */, dtype="bool") /* ty=Tensor[(11, 4, 12), bool] */;
  %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %435 = cast(meta[relay.Constant][24] /* ty=Tensor[(11, 4, 12), uint8] */, dtype="float32") /* ty=Tensor[(11, 4, 12), float32] */;
  %436 = cast(meta[relay.Constant][23] /* ty=Tensor[(11, 4, 12), uint8] */, dtype="float32") /* ty=Tensor[(11, 4, 12), float32] */;
  %437 = asin(%436) /* ty=Tensor[(11, 4, 12), float32] */;
  %438 = cast(%437, dtype="uint8") /* ty=Tensor[(11, 4, 12), uint8] */;
  %439 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(11, 4, 12), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %440 = cast(meta[relay.Constant][24] /* ty=Tensor[(11, 4, 12), uint8] */, dtype="uint8") /* ty=Tensor[(11, 4, 12), uint8] */;
  %441 = dyn.reshape(%438, %439, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %442 = cast(%var_1529, dtype="float32") /* ty=Tensor[(192), float32] */;
  %443 = reshape(%442, newshape=[2, 16, 6]) /* ty=Tensor[(2, 16, 6), float32] */;
  %444 = @func_1272(%443) /* ty=(Tensor[(2, 16, 6), float32],) */;
  %445 = %444.0;
  %446 = cast(%var_1529, dtype="bool") /* ty=Tensor[(192), bool] */;
  %447 = shape_of(%445, dtype="int32") /* ty=Tensor[(3), int32] */;
  %448 = cast(%445, dtype="bool") /* ty=Tensor[(2, 16, 6), bool] */;
  %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %450 = cast(%var_1529, dtype="float32") /* ty=Tensor[(192), float32] */;
  %451 = reshape(%450, newshape=[2, 16, 6]) /* ty=Tensor[(2, 16, 6), float32] */;
  %452 = @func_1272(%451) /* ty=(Tensor[(2, 16, 6), float32],) */;
  %453 = not_equal(%433, %434) /* ty=Tensor[(11, 4, 12), bool] */;
  %454 = atan(%435) /* ty=Tensor[(11, 4, 12), float32] */;
  %455 = logical_xor(%440, %441) /* ty=Tensor[(11, 4, 12), uint8] */;
  %456 = not_equal(%448, %449) /* ty=Tensor[(2, 16, 6), bool] */;
  %457 = %452.0;
  (%453, %454, %455, %456, %457)
}

def @func_8030(%var_7999: Tensor[(9, 7, 2), int8], %var_8000: Tensor[(9, 7, 2), int8]) -> (Tensor[(9, 7, 2), int8], Tensor[(9, 7, 2), float32], Tensor[(256), int64], Tensor[(14, 7, 5), uint32], Tensor[(490), uint32], Tensor[(2, 2, 9), bool], Tensor[(9, 7, 2), float64]) {
  %458 = cast(%var_8000, dtype="int8") /* ty=Tensor[(9, 7, 2), int8] */;
  %459 = shape_of(%var_7999, dtype="int32") /* ty=Tensor[(3), int32] */;
  %460 = cast(%var_7999, dtype="int8") /* ty=Tensor[(9, 7, 2), int8] */;
  %461 = dyn.reshape(%458, %459, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %462 = cast(%var_8000, dtype="float32") /* ty=Tensor[(9, 7, 2), float32] */;
  %463 = @func_4078() /* ty=(Tensor[(256), int64],) */;
  %464 = cast(meta[relay.Constant][25] /* ty=Tensor[(490), uint32] */, dtype="uint32") /* ty=Tensor[(490), uint32] */;
  %465 = reshape(%464, newshape=[14, 7, 5]) /* ty=Tensor[(14, 7, 5), uint32] */;
  %466 = @func_1819() /* ty=(Tensor[(2, 2, 9), bool], Tensor[(4, 8, 8), int64], Tensor[(256), int64], Tensor[(1, 3, 12), bool]) */;
  %467 = cast(%var_8000, dtype="float64") /* ty=Tensor[(9, 7, 2), float64] */;
  %468 = multiply(%460, %461) /* ty=Tensor[(9, 7, 2), int8] */;
  %469 = asinh(%462) /* ty=Tensor[(9, 7, 2), float32] */;
  %470 = %463.0;
  %471 = @func_6400(%465) /* ty=Tensor[(14, 7, 5), uint32] */;
  %472 = %466.0;
  %473 = asin(%467) /* ty=Tensor[(9, 7, 2), float64] */;
  (%468, %469, %470, %471, meta[relay.Constant][25] /* ty=Tensor[(490), uint32] */, %472, %473)
}

def @func_10423(%var_10384: Tensor[(832), uint16], %var_10406: Tensor[(80), uint64]) -> (Tensor[(2, 2, 9), bool], Tensor[(16, 4, 13), uint16], Tensor[(832), uint16], Tensor[(10, 8), uint64], Tensor[(80), uint64], float32) {
  %474 = @func_7166() /* ty=(Tensor[(2, 2, 9), bool],) */;
  %475 = cast(%var_10384, dtype="uint16") /* ty=Tensor[(832), uint16] */;
  %476 = cast(%var_10384, dtype="uint16") /* ty=Tensor[(832), uint16] */;
  %477 = reshape(%475, newshape=[16, 4, 13]) /* ty=Tensor[(16, 4, 13), uint16] */;
  %478 = reshape(%476, newshape=[16, 4, 13]) /* ty=Tensor[(16, 4, 13), uint16] */;
  %479 = @func_7044(%477, %478) /* ty=(Tensor[(16, 4, 13), uint16], Tensor[(16, 4, 13), float64], Tensor[(720), uint16]) */;
  %480 = cast(%var_10406, dtype="uint64") /* ty=Tensor[(80), uint64] */;
  %481 = reshape(%480, newshape=[10, 8]) /* ty=Tensor[(10, 8), uint64] */;
  %482 = @func_1091(%481) /* ty=(Tensor[(10, 8), uint64], Tensor[(9, 15, 7), bool], Tensor[(945), float64]) */;
  %483 = %474.0;
  %484 = %479.0;
  %485 = %482.0;
  %486 = @func_7636() /* ty=float32 */;
  (%483, %484, %var_10384, %485, %var_10406, %486)
}

def @func_7781(%var_7760: Tensor[(63), int8], %var_7761: Tensor[(252), int8], %var_7765: float32, %var_7766: Tensor[(96), float32]) -> (Tensor[(2, 2, 9), bool], Tensor[(7, 9, 4), int8], Tensor[(63), int8], Tensor[(252), int8], Tensor[(8, 2, 6), float32], float32, Tensor[(96), float32], Tensor[(80), uint64]) {
  %487 = @func_6314() /* ty=(Tensor[(2, 2, 9), bool],) */;
  %488 = cast(%var_7760, dtype="int8") /* ty=Tensor[(63), int8] */;
  %489 = cast(%var_7761, dtype="int8") /* ty=Tensor[(252), int8] */;
  %490 = reshape(%488, newshape=[7, 9, 1]) /* ty=Tensor[(7, 9, 1), int8] */;
  %491 = reshape(%489, newshape=[7, 9, 4]) /* ty=Tensor[(7, 9, 4), int8] */;
  %492 = @func_6842(%490, %491) /* ty=(Tensor[(7, 9, 4), int8],) */;
  %493 = cast(%var_7765, dtype="float32") /* ty=float32 */;
  %494 = cast(%var_7766, dtype="float32") /* ty=Tensor[(96), float32] */;
  %495 = reshape(%493, newshape=[]) /* ty=float32 */;
  %496 = reshape(%494, newshape=[8, 2, 6]) /* ty=Tensor[(8, 2, 6), float32] */;
  %497 = @func_4283() /* ty=(Tensor[(80), uint64],) */;
  %498 = %487.0;
  %499 = %492.0;
  %500 = @func_2313(%495, %496) /* ty=Tensor[(8, 2, 6), float32] */;
  %501 = %497.0;
  (%498, %499, %var_7760, %var_7761, %500, %var_7765, %var_7766, %501)
}

def @func_2811() -> (float32,) {
  %502 = @func_1895() /* ty=(float32,) */;
  %503 = %502.0;
  (%503,)
}

def @func_10332(%var_10306: Tensor[(252), bool]) -> (Tensor[(945), uint32], Tensor[(252), bool], Tensor[(1, 576), float64], Tensor[(252), bool], Tensor[(252), bool]) {
  %504 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 576), float64] */, dtype="float64") /* ty=Tensor[(1, 576), float64] */;
  %505 = cast(%var_10306, dtype="bool") /* ty=Tensor[(252), bool] */;
  %506 = reshape(%504, newshape=[16, 9, 4]) /* ty=Tensor[(16, 9, 4), float64] */;
  %507 = reshape(%505, newshape=[252]) /* ty=Tensor[(252), bool] */;
  %508 = @func_10248(%506, %507) /* ty=(Tensor[(252), bool], Tensor[(252), bool], Tensor[(16, 9, 4), bool]) */;
  %509 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 576), float64] */, dtype="float64") /* ty=Tensor[(1, 576), float64] */;
  %510 = %508.1;
  %511 = cast(%510, dtype="bool") /* ty=Tensor[(252), bool] */;
  %512 = reshape(%509, newshape=[16, 9, 4]) /* ty=Tensor[(16, 9, 4), float64] */;
  %513 = reshape(%511, newshape=[252]) /* ty=Tensor[(252), bool] */;
  %514 = @func_10248(%512, %513) /* ty=(Tensor[(252), bool], Tensor[(252), bool], Tensor[(16, 9, 4), bool]) */;
  %515 = @func_5044() /* ty=Tensor[(945), uint32] */;
  %516 = %514.1;
  (%515, %510, meta[relay.Constant][26] /* ty=Tensor[(1, 576), float64] */, %var_10306, %516)
}

def @func_3160(%var_3154: Tensor[(3, 12, 1), float32]) -> Tensor[(3, 12, 1), float64] {
  %517 = @func_2938() /* ty=(float32,) */;
  %518 = %517.0;
  %519 = cast(%518, dtype="float64") /* ty=float64 */;
  %520 = cast(%var_3154, dtype="float64") /* ty=Tensor[(3, 12, 1), float64] */;
  mod(%519, %520) /* ty=Tensor[(3, 12, 1), float64] */
}

def @func_5357() -> (Tensor[(256), int64], Tensor[(256), int64], Tensor[(256), bool]) {
  %521 = @func_5288() /* ty=(Tensor[(256), int64],) */;
  %522 = %521.0;
  %523 = cast(%522, dtype="int64") /* ty=Tensor[(256), int64] */;
  %524 = reshape(%523, newshape=[256]) /* ty=Tensor[(256), int64] */;
  %525 = @func_3897() /* ty=Tensor[(256), int64] */;
  %526 = @func_4424(%524) /* ty=Tensor[(256), bool] */;
  (%525, %522, %526)
}

def @func_8768(%var_8764: Tensor[(192), float32]) -> (Tensor[(256), int64], Tensor[(256), int64], Tensor[(2, 2, 9), bool], Tensor[(11, 4, 12), bool], Tensor[(192), float32]) {
  %527 = @func_6995() /* ty=(Tensor[(528), float32], Tensor[(256), int64], Tensor[(256), int64], Tensor[(256), int16]) */;
  %528 = @func_6058() /* ty=(float32, Tensor[(256), int64]) */;
  %529 = @func_2544() /* ty=(Tensor[(2, 2, 9), bool],) */;
  %530 = cast(%var_8764, dtype="float32") /* ty=Tensor[(192), float32] */;
  %531 = reshape(%530, newshape=[192]) /* ty=Tensor[(192), float32] */;
  %532 = @func_1550(%531) /* ty=(Tensor[(11, 4, 12), bool], Tensor[(11, 4, 12), float32], Tensor[(11, 4, 12), uint8], Tensor[(2, 16, 6), bool], Tensor[(2, 16, 6), float32]) */;
  %533 = %527.2;
  %534 = %528.1;
  %535 = %529.0;
  %536 = %532.0;
  (%533, %534, %535, %536, %var_8764)
}

def @func_2859() -> (Tensor[(256), int64], Tensor[(720), uint16], Tensor[(12, 4, 15), uint32]) {
  %537 = @func_2060() /* ty=(Tensor[(256), int64], Tensor[(12, 4, 15), uint16], Tensor[(720), uint16], Tensor[(528), float32]) */;
  %538 = cast(meta[relay.Constant][27] /* ty=Tensor[(720), uint16] */, dtype="uint16") /* ty=Tensor[(720), uint16] */;
  %539 = reshape(%538, newshape=[12, 4, 15]) /* ty=Tensor[(12, 4, 15), uint16] */;
  %540 = @func_836(%539) /* ty=Tensor[(12, 4, 15), uint16] */;
  %541 = cast(%540, dtype="float64") /* ty=Tensor[(12, 4, 15), float64] */;
  %542 = tan(%541) /* ty=Tensor[(12, 4, 15), float64] */;
  %543 = cast(%540, dtype="uint32") /* ty=Tensor[(12, 4, 15), uint32] */;
  %544 = shape_of(%542, dtype="int32") /* ty=Tensor[(3), int32] */;
  %545 = cast(%542, dtype="uint32") /* ty=Tensor[(12, 4, 15), uint32] */;
  %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %547 = %537.0;
  %548 = multiply(%545, %546) /* ty=Tensor[(12, 4, 15), uint32] */;
  (%547, meta[relay.Constant][27] /* ty=Tensor[(720), uint16] */, %548)
}

def @func_6655(%var_6643: Tensor[(3, 1, 2), float32]) -> (Tensor[(3, 1, 2), float32],) {
  %549 = cast(%var_6643, dtype="float32") /* ty=Tensor[(3, 1, 2), float32] */;
  %550 = asin(%549) /* ty=Tensor[(3, 1, 2), float32] */;
  (%550,)
}

def @func_1903() -> Tensor[(2, 2, 9), bool] {
  %551 = @func_1889() /* ty=(Tensor[(2, 2, 9), bool], float32, float32, Tensor[(528), float32]) */;
  %551.0
}

def @func_8372() -> (Tensor[(80), uint64], Tensor[(528), bool], Tensor[(10, 8), uint64]) {
  %552 = @func_4283() /* ty=(Tensor[(80), uint64],) */;
  %553 = @func_5543() /* ty=(Tensor[(80), uint64], Tensor[(16, 3, 11), float32], float32, Tensor[(528), bool]) */;
  %554 = %552.0;
  %555 = cast(%554, dtype="uint64") /* ty=Tensor[(80), uint64] */;
  %556 = reshape(%555, newshape=[80]) /* ty=Tensor[(80), uint64] */;
  %557 = @func_2700(%556) /* ty=(Tensor[(2, 2, 9), bool], Tensor[(10, 8), uint64], Tensor[(80), uint64]) */;
  %558 = %553.3;
  %559 = %557.1;
  (%554, %558, %559)
}

def @func_97(%var_89: Tensor[(9, 15, 7), float64]) -> (Tensor[(9, 15, 7), bool],) {
  %560 = cast(%var_89, dtype="float64") /* ty=Tensor[(9, 15, 7), float64] */;
  %561 = atan(%560) /* ty=Tensor[(9, 15, 7), float64] */;
  %562 = cast(%561, dtype="bool") /* ty=Tensor[(9, 15, 7), bool] */;
  %563 = shape_of(%var_89, dtype="int32") /* ty=Tensor[(3), int32] */;
  %564 = cast(%var_89, dtype="bool") /* ty=Tensor[(9, 15, 7), bool] */;
  %565 = dyn.reshape(%562, %563, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %566 = not_equal(%564, %565) /* ty=Tensor[(9, 15, 7), bool] */;
  (%566,)
}

def @func_10568() -> (Tensor[(2, 2, 9), bool], Tensor[(945), uint32], Tensor[(720), uint16]) {
  %567 = @func_5680() /* ty=(Tensor[(2, 2, 9), bool],) */;
  %568 = @func_7149() /* ty=(Tensor[(945), uint32],) */;
  %569 = %567.0;
  %570 = %568.0;
  %571 = @func_2742() /* ty=Tensor[(720), uint16] */;
  (%569, %570, %571)
}

def @func_7590() -> (Tensor[(256), int64], Tensor[(256), int64]) {
  %572 = @func_4078() /* ty=(Tensor[(256), int64],) */;
  %573 = %572.0;
  %574 = @func_2026() /* ty=Tensor[(256), int64] */;
  (%573, %574)
}

def @func_5411() -> (float32,) {
  %575 = @func_3079() /* ty=(Tensor[(2, 2, 9), bool], Tensor[(528), float32], float32, Tensor[(528), float32], float32) */;
  %576 = %575.4;
  (%576,)
}

def @func_5700(%var_5687: Tensor[(3, 4, 15), int32]) -> (Tensor[(3, 4, 15), int32],) {
  %577 = cast(meta[relay.Constant][28] /* ty=Tensor[(3, 4, 15), int32] */, dtype="int32") /* ty=Tensor[(3, 4, 15), int32] */;
  %578 = shape_of(%var_5687, dtype="int32") /* ty=Tensor[(3), int32] */;
  %579 = cast(%var_5687, dtype="int32") /* ty=Tensor[(3, 4, 15), int32] */;
  %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %581 = subtract(%579, %580) /* ty=Tensor[(3, 4, 15), int32] */;
  (%581,)
}

def @func_7470(%var_7457: Tensor[(720, 1), uint16]) -> (Tensor[(2, 2, 9), bool], Tensor[(528), float32], Tensor[(12, 4, 15), uint16], Tensor[(720, 1), uint16]) {
  %582 = @func_4204() /* ty=(Tensor[(2, 2, 9), bool],) */;
  %583 = @func_2295() /* ty=(Tensor[(528), float32],) */;
  %584 = cast(%var_7457, dtype="uint16") /* ty=Tensor[(720, 1), uint16] */;
  %585 = reshape(%584, newshape=[12, 4, 15]) /* ty=Tensor[(12, 4, 15), uint16] */;
  %586 = %582.0;
  %587 = %583.0;
  %588 = @func_836(%585) /* ty=Tensor[(12, 4, 15), uint16] */;
  (%586, %587, %588, %var_7457)
}

def @func_2313(%var_2308: float32, %var_2309: Tensor[(8, 2, 6), float32]) -> Tensor[(8, 2, 6), float32] {
  %589 = cast(%var_2308, dtype="float32") /* ty=float32 */;
  %590 = cast(%var_2309, dtype="float32") /* ty=Tensor[(8, 2, 6), float32] */;
  minimum(%589, %590) /* ty=Tensor[(8, 2, 6), float32] */
}

def @func_9854() -> Tensor[(2, 2, 9), bool] {
  %591 = @func_6634() /* ty=(Tensor[(2, 2, 9), bool],) */;
  %591.0
}

def @func_6089() -> (Tensor[(256), int64], Tensor[(2, 2, 9), bool], Tensor[(256), int64]) {
  %592 = @func_5180() /* ty=(Tensor[(256), int64],) */;
  %593 = @func_5601() /* ty=(Tensor[(256), int64],) */;
  %594 = %592.0;
  %595 = @func_4360() /* ty=Tensor[(2, 2, 9), bool] */;
  %596 = %593.0;
  (%594, %595, %596)
}

def @func_2978() -> (Tensor[(1, 3, 12), bool], Tensor[(1, 3, 12), bool], bool) {
  %597 = @func_1819() /* ty=(Tensor[(2, 2, 9), bool], Tensor[(4, 8, 8), int64], Tensor[(256), int64], Tensor[(1, 3, 12), bool]) */;
  %598 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %599 = %597.3;
  %600 = cast(%599, dtype="bool") /* ty=Tensor[(1, 3, 12), bool] */;
  %601 = reshape(%598, newshape=[]) /* ty=bool */;
  %602 = reshape(%600, newshape=[1, 3, 12]) /* ty=Tensor[(1, 3, 12), bool] */;
  %603 = @func_110(%601, %602) /* ty=(Tensor[(1, 3, 12), bool],) */;
  %604 = %603.0;
  (%599, %604, True /* ty=bool */)
}

def @func_7278(%var_7266: Tensor[(256), int64]) -> (bool, Tensor[(256), float32], Tensor[(256), uint8]) {
  %605 = @func_2978() /* ty=(Tensor[(1, 3, 12), bool], Tensor[(1, 3, 12), bool], bool) */;
  %606 = cast(meta[relay.Constant][29] /* ty=Tensor[(256), int64] */, dtype="int64") /* ty=Tensor[(256), int64] */;
  %607 = reshape(%606, newshape=[256]) /* ty=Tensor[(256), int64] */;
  %608 = @func_5543() /* ty=(Tensor[(80), uint64], Tensor[(16, 3, 11), float32], float32, Tensor[(528), bool]) */;
  %609 = %608.2;
  %610 = cast(meta[relay.Constant][29] /* ty=Tensor[(256), int64] */, dtype="int64") /* ty=Tensor[(256), int64] */;
  %611 = cast(%609, dtype="int64") /* ty=int64 */;
  %612 = multiply(%610, %611) /* ty=Tensor[(256), int64] */;
  %613 = cast(%var_7266, dtype="uint8") /* ty=Tensor[(256), uint8] */;
  %614 = shape_of(%612, dtype="int32") /* ty=Tensor[(1), int32] */;
  %615 = cast(%612, dtype="uint8") /* ty=Tensor[(256), uint8] */;
  %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %617 = %605.2;
  %618 = @func_4698(%607) /* ty=Tensor[(256), float32] */;
  %619 = bitwise_xor(%615, %616) /* ty=Tensor[(256), uint8] */;
  (%617, %618, %619)
}

def @func_8585() -> bool {
  %620 = @func_5639() /* ty=(bool,) */;
  %620.0
}

def @func_2994() -> (Tensor[(256), int64],) {
  %621 = @func_2238() /* ty=Tensor[(256), int64] */;
  (%621,)
}

def @func_5543() -> (Tensor[(80), uint64], Tensor[(16, 3, 11), float32], float32, Tensor[(528), bool]) {
  %622 = @func_4283() /* ty=(Tensor[(80), uint64],) */;
  %623 = cast(9.63641f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %624 = cast(meta[relay.Constant][30] /* ty=Tensor[(528), float32] */, dtype="float32") /* ty=Tensor[(528), float32] */;
  %625 = reshape(%623, newshape=[]) /* ty=float32 */;
  %626 = reshape(%624, newshape=[16, 3, 11]) /* ty=Tensor[(16, 3, 11), float32] */;
  %627 = @func_4136() /* ty=(Tensor[(2, 2, 9), bool], Tensor[(2, 2, 9), bool], float32, float32) */;
  %628 = cast(meta[relay.Constant][30] /* ty=Tensor[(528), float32] */, dtype="bool") /* ty=Tensor[(528), bool] */;
  %629 = cast(9.63641f /* ty=float32 */, dtype="bool") /* ty=bool */;
  %630 = %622.0;
  %631 = @func_677(%625, %626) /* ty=Tensor[(16, 3, 11), float32] */;
  %632 = %627.2;
  %633 = equal(%628, %629) /* ty=Tensor[(528), bool] */;
  (%630, %631, %632, %633)
}

def @func_7149() -> (Tensor[(945), uint32],) {
  %634 = @func_5044() /* ty=Tensor[(945), uint32] */;
  (%634,)
}

def @func_3506(%var_3496: Tensor[(528), float32]) -> (Tensor[(528), int64],) {
  %635 = @func_2295() /* ty=(Tensor[(528), float32],) */;
  %636 = %635.0;
  %637 = cast(%var_3496, dtype="int64") /* ty=Tensor[(528), int64] */;
  %638 = shape_of(%636, dtype="int32") /* ty=Tensor[(1), int32] */;
  %639 = cast(%636, dtype="int64") /* ty=Tensor[(528), int64] */;
  %640 = dyn.reshape(%637, %638, newshape=[]) /* ty=Tensor[(?), int64] */;
  %641 = bitwise_or(%639, %640) /* ty=Tensor[(528), int64] */;
  (%641,)
}

def @func_9463() -> (Tensor[(2, 2, 9), bool], float32) {
  %642 = @func_4136() /* ty=(Tensor[(2, 2, 9), bool], Tensor[(2, 2, 9), bool], float32, float32) */;
  %643 = @func_5138() /* ty=(float32, float32) */;
  %644 = %642.0;
  %645 = %643.0;
  (%644, %645)
}

def @main(%var_10782: Tensor[(10, 7, 8), uint8], %var_10783: Tensor[(10, 7, 8), uint8], %var_10818: uint16) -> (Tensor[(945), uint32], Tensor[(10, 7, 8), bool], Tensor[(5, 6, 13), uint16], uint16, Tensor[(10, 7, 8), int32]) {
  %646 = @func_7829() /* ty=(Tensor[(945), uint32],) */;
  %647 = cast(%var_10783, dtype="uint8") /* ty=Tensor[(10, 7, 8), uint8] */;
  %648 = shape_of(%var_10782, dtype="int32") /* ty=Tensor[(3), int32] */;
  %649 = cast(%var_10782, dtype="uint8") /* ty=Tensor[(10, 7, 8), uint8] */;
  %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %651 = bitwise_xor(%649, %650) /* ty=Tensor[(10, 7, 8), uint8] */;
  %652 = cast(meta[relay.Constant][31] /* ty=Tensor[(10, 7, 8), uint8] */, dtype="bool") /* ty=Tensor[(10, 7, 8), bool] */;
  %653 = shape_of(%651, dtype="int32") /* ty=Tensor[(3), int32] */;
  %654 = cast(%651, dtype="bool") /* ty=Tensor[(10, 7, 8), bool] */;
  %655 = dyn.reshape(%652, %653, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %656 = cast(%var_10818, dtype="uint16") /* ty=uint16 */;
  %657 = reshape(%656, newshape=[]) /* ty=uint16 */;
  %658 = cast(%var_10782, dtype="float32") /* ty=Tensor[(10, 7, 8), float32] */;
  %659 = tan(%658) /* ty=Tensor[(10, 7, 8), float32] */;
  %660 = cast(%659, dtype="float32") /* ty=Tensor[(10, 7, 8), float32] */;
  %661 = asin(%660) /* ty=Tensor[(10, 7, 8), float32] */;
  %662 = cast(%659, dtype="int32") /* ty=Tensor[(10, 7, 8), int32] */;
  %663 = shape_of(%661, dtype="int32") /* ty=Tensor[(3), int32] */;
  %664 = cast(%661, dtype="int32") /* ty=Tensor[(10, 7, 8), int32] */;
  %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %666 = %646.0;
  %667 = greater_equal(%654, %655) /* ty=Tensor[(10, 7, 8), bool] */;
  %668 = @func_5110(%657) /* ty=Tensor[(5, 6, 13), uint16] */;
  %669 = left_shift(%664, %665) /* ty=Tensor[(10, 7, 8), int32] */;
  (%666, %667, %668, %var_10818, %669)
}

def @func_1986(%var_1983: Tensor[(192), float32]) -> (Tensor[(4, 8, 8), int64], Tensor[(2, 16, 6), float32], Tensor[(192), float32]) {
  %670 = @func_1819() /* ty=(Tensor[(2, 2, 9), bool], Tensor[(4, 8, 8), int64], Tensor[(256), int64], Tensor[(1, 3, 12), bool]) */;
  %671 = cast(%var_1983, dtype="float32") /* ty=Tensor[(192), float32] */;
  %672 = reshape(%671, newshape=[2, 16, 6]) /* ty=Tensor[(2, 16, 6), float32] */;
  %673 = @func_1272(%672) /* ty=(Tensor[(2, 16, 6), float32],) */;
  %674 = %670.1;
  %675 = %673.0;
  (%674, %675, %var_1983)
}

def @func_6809() -> (Tensor[(2, 2, 9), float32], float32) {
  %676 = @func_4048() /* ty=Tensor[(2, 2, 9), bool] */;
  %677 = cast(%676, dtype="float32") /* ty=Tensor[(2, 2, 9), float32] */;
  %678 = @func_3360() /* ty=(float32,) */;
  %679 = rsqrt(%677) /* ty=Tensor[(2, 2, 9), float32] */;
  %680 = %678.0;
  (%679, %680)
}

def @func_6920(%var_6870: Tensor[(5, 189), float64]) -> (Tensor[(5, 15, 8), uint32], Tensor[(5, 15, 8), uint32], Tensor[(9, 15, 7), bool], Tensor[(5, 189), float64], Tensor[(1, 3, 12), bool], Tensor[(720), uint16]) {
  %681 = cast(meta[relay.Constant][33] /* ty=Tensor[(5, 15, 8), uint32] */, dtype="uint32") /* ty=Tensor[(5, 15, 8), uint32] */;
  %682 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(5, 15, 8), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %683 = cast(meta[relay.Constant][32] /* ty=Tensor[(5, 15, 8), uint32] */, dtype="uint32") /* ty=Tensor[(5, 15, 8), uint32] */;
  %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %685 = cast(meta[relay.Constant][33] /* ty=Tensor[(5, 15, 8), uint32] */, dtype="uint32") /* ty=Tensor[(5, 15, 8), uint32] */;
  %686 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(5, 15, 8), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %687 = cast(meta[relay.Constant][32] /* ty=Tensor[(5, 15, 8), uint32] */, dtype="uint32") /* ty=Tensor[(5, 15, 8), uint32] */;
  %688 = dyn.reshape(%685, %686, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %689 = cast(%var_6870, dtype="float64") /* ty=Tensor[(5, 189), float64] */;
  %690 = reshape(%689, newshape=[15, 63]) /* ty=Tensor[(15, 63), float64] */;
  %691 = @func_745(%690) /* ty=(Tensor[(16, 15, 10), uint32], Tensor[(9, 15, 7), bool], Tensor[(15, 63), float64], Tensor[(1, 3, 12), bool], Tensor[(36), bool]) */;
  %692 = %691.1;
  %693 = cast(%692, dtype="float64") /* ty=Tensor[(9, 15, 7), float64] */;
  %694 = reshape(%693, newshape=[15, 63]) /* ty=Tensor[(15, 63), float64] */;
  %695 = @func_745(%694) /* ty=(Tensor[(16, 15, 10), uint32], Tensor[(9, 15, 7), bool], Tensor[(15, 63), float64], Tensor[(1, 3, 12), bool], Tensor[(36), bool]) */;
  %696 = @func_2060() /* ty=(Tensor[(256), int64], Tensor[(12, 4, 15), uint16], Tensor[(720), uint16], Tensor[(528), float32]) */;
  %697 = add(%683, %684) /* ty=Tensor[(5, 15, 8), uint32] */;
  %698 = bitwise_or(%687, %688) /* ty=Tensor[(5, 15, 8), uint32] */;
  %699 = %695.3;
  %700 = %696.2;
  (%697, %698, %692, %var_6870, %699, %700)
}

def @func_1895() -> (float32,) {
  %701 = @func_1889() /* ty=(Tensor[(2, 2, 9), bool], float32, float32, Tensor[(528), float32]) */;
  %702 = %701.1;
  (%702,)
}

def @func_9602() -> float32 {
  %703 = @func_5411() /* ty=(float32,) */;
  %703.0
}

def @func_8254() -> (float32, Tensor[(252), bool], Tensor[(252, 1), bool]) {
  %704 = @func_3360() /* ty=(float32,) */;
  %705 = cast(meta[relay.Constant][34] /* ty=Tensor[(252, 1), bool] */, dtype="bool") /* ty=Tensor[(252, 1), bool] */;
  %706 = reshape(%705, newshape=[252]) /* ty=Tensor[(252), bool] */;
  %707 = @func_5854(%706) /* ty=(Tensor[(2, 2, 9), bool], Tensor[(528), float32], Tensor[(252), bool], Tensor[(264, 2), float32], Tensor[(2, 2, 9), bool]) */;
  %708 = %704.0;
  %709 = %707.2;
  (%708, %709, meta[relay.Constant][34] /* ty=Tensor[(252, 1), bool] */)
}

def @func_1039(%var_1029: float32, %var_1030: Tensor[(528), float32]) -> (Tensor[(2, 14, 2), float64], Tensor[(16, 3, 11), float32], float32, Tensor[(528), float32]) {
  %710 = cast(meta[relay.Constant][35] /* ty=Tensor[(2, 14, 2), float64] */, dtype="float64") /* ty=Tensor[(2, 14, 2), float64] */;
  %711 = cast(%var_1029, dtype="float32") /* ty=float32 */;
  %712 = cast(%var_1030, dtype="float32") /* ty=Tensor[(528), float32] */;
  %713 = reshape(%711, newshape=[]) /* ty=float32 */;
  %714 = reshape(%712, newshape=[16, 3, 11]) /* ty=Tensor[(16, 3, 11), float32] */;
  %715 = log(%710) /* ty=Tensor[(2, 14, 2), float64] */;
  %716 = @func_677(%713, %714) /* ty=Tensor[(16, 3, 11), float32] */;
  (%715, %716, %var_1029, %var_1030)
}

def @func_2630() -> (Tensor[(2, 2, 9), bool],) {
  %717 = @func_1903() /* ty=Tensor[(2, 2, 9), bool] */;
  (%717,)
}

def @func_5044() -> Tensor[(945), uint32] {
  %718 = @func_3460() /* ty=(Tensor[(14, 8, 7), float64], Tensor[(9, 15, 7), bool], Tensor[(945), float64]) */;
  %719 = %718.2;
  %720 = cast(meta[relay.Constant][36] /* ty=Tensor[(945), float64] */, dtype="uint32") /* ty=Tensor[(945), uint32] */;
  %721 = shape_of(%719, dtype="int32") /* ty=Tensor[(1), int32] */;
  %722 = cast(%719, dtype="uint32") /* ty=Tensor[(945), uint32] */;
  %723 = dyn.reshape(%720, %721, newshape=[]) /* ty=Tensor[(?), uint32] */;
  left_shift(%722, %723) /* ty=Tensor[(945), uint32] */
}

def @func_5080() -> (Tensor[(720), uint16],) {
  %724 = @func_3289() /* ty=(Tensor[(528), float32], Tensor[(720), uint16], Tensor[(2, 2, 9), bool]) */;
  %725 = %724.1;
  (%725,)
}

def @func_6314() -> (Tensor[(2, 2, 9), bool],) {
  %726 = @func_6089() /* ty=(Tensor[(256), int64], Tensor[(2, 2, 9), bool], Tensor[(256), int64]) */;
  %727 = %726.1;
  (%727,)
}

def @func_4884() -> (Tensor[(256), float64], Tensor[(2, 16, 6), float32], Tensor[(192), float32]) {
  %728 = @func_2859() /* ty=(Tensor[(256), int64], Tensor[(720), uint16], Tensor[(12, 4, 15), uint32]) */;
  %729 = %728.0;
  %730 = cast(%729, dtype="float64") /* ty=Tensor[(256), float64] */;
  %731 = cast(meta[relay.Constant][37] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %732 = reshape(%731, newshape=[192]) /* ty=Tensor[(192), float32] */;
  %733 = @func_1986(%732) /* ty=(Tensor[(4, 8, 8), int64], Tensor[(2, 16, 6), float32], Tensor[(192), float32]) */;
  %734 = cos(%730) /* ty=Tensor[(256), float64] */;
  %735 = %733.1;
  (%734, %735, meta[relay.Constant][37] /* ty=Tensor[(192), float32] */)
}

def @func_1957() -> (float32, Tensor[(256), int64]) {
  %736 = @func_1895() /* ty=(float32,) */;
  %737 = @func_1819() /* ty=(Tensor[(2, 2, 9), bool], Tensor[(4, 8, 8), int64], Tensor[(256), int64], Tensor[(1, 3, 12), bool]) */;
  %738 = %736.0;
  %739 = %737.2;
  (%738, %739)
}

def @func_3985() -> (float32, Tensor[(80), uint64], Tensor[(80), uint64]) {
  %740 = @func_1889() /* ty=(Tensor[(2, 2, 9), bool], float32, float32, Tensor[(528), float32]) */;
  %741 = cast(meta[relay.Constant][38] /* ty=Tensor[(80), uint64] */, dtype="uint64") /* ty=Tensor[(80), uint64] */;
  %742 = reshape(%741, newshape=[80]) /* ty=Tensor[(80), uint64] */;
  %743 = @func_2700(%742) /* ty=(Tensor[(2, 2, 9), bool], Tensor[(10, 8), uint64], Tensor[(80), uint64]) */;
  %744 = %740.1;
  %745 = %743.2;
  (%744, %745, meta[relay.Constant][38] /* ty=Tensor[(80), uint64] */)
}

def @func_1272(%var_1268: Tensor[(2, 16, 6), float32]) -> (Tensor[(2, 16, 6), float32],) {
  %746 = cast(%var_1268, dtype="float32") /* ty=Tensor[(2, 16, 6), float32] */;
  %747 = sigmoid(%746) /* ty=Tensor[(2, 16, 6), float32] */;
  (%747,)
}

def @func_10686(%var_10679: Tensor[(2, 7, 11), int64], %var_10680: Tensor[(2, 7, 11), int64]) -> Tensor[(2, 7, 11), int64] {
  %748 = cast(%var_10680, dtype="int64") /* ty=Tensor[(2, 7, 11), int64] */;
  %749 = shape_of(%var_10679, dtype="int32") /* ty=Tensor[(3), int32] */;
  %750 = cast(%var_10679, dtype="int64") /* ty=Tensor[(2, 7, 11), int64] */;
  %751 = dyn.reshape(%748, %749, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  logical_xor(%750, %751) /* ty=Tensor[(2, 7, 11), int64] */
}

def @func_1889() -> (Tensor[(2, 2, 9), bool], float32, float32, Tensor[(528), float32]) {
  %752 = cast(-4.45017f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %753 = cast(meta[relay.Constant][39] /* ty=Tensor[(528), float32] */, dtype="float32") /* ty=Tensor[(528), float32] */;
  %754 = reshape(%752, newshape=[]) /* ty=float32 */;
  %755 = reshape(%753, newshape=[528]) /* ty=Tensor[(528), float32] */;
  %756 = @func_1039(%754, %755) /* ty=(Tensor[(2, 14, 2), float64], Tensor[(16, 3, 11), float32], float32, Tensor[(528), float32]) */;
  %757 = @func_1637() /* ty=Tensor[(2, 2, 9), bool] */;
  %758 = %756.2;
  (%757, %758, -4.45017f /* ty=float32 */, meta[relay.Constant][39] /* ty=Tensor[(528), float32] */)
}

def @func_7195(%var_7174: int32, %var_7175: Tensor[(7, 7, 2), int32]) -> (Tensor[(7, 7, 2), int32], Tensor[(7, 7, 2), float32]) {
  %759 = cast(%var_7174, dtype="int32") /* ty=int32 */;
  %760 = cast(%var_7175, dtype="int32") /* ty=Tensor[(7, 7, 2), int32] */;
  %761 = cast(%var_7175, dtype="float64") /* ty=Tensor[(7, 7, 2), float64] */;
  %762 = sqrt(%761) /* ty=Tensor[(7, 7, 2), float64] */;
  %763 = cast(meta[relay.Constant][40] /* ty=Tensor[(7, 7, 2), float64] */, dtype="float32") /* ty=Tensor[(7, 7, 2), float32] */;
  %764 = shape_of(%762, dtype="int32") /* ty=Tensor[(3), int32] */;
  %765 = cast(%762, dtype="float32") /* ty=Tensor[(7, 7, 2), float32] */;
  %766 = dyn.reshape(%763, %764, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %767 = bitwise_xor(%759, %760) /* ty=Tensor[(7, 7, 2), int32] */;
  %768 = floor_divide(%765, %766) /* ty=Tensor[(7, 7, 2), float32] */;
  (%767, %768)
}

def @func_5508() -> (Tensor[(256), int64], bool, Tensor[(9, 15, 7), bool], Tensor[(80), uint64]) {
  %769 = @func_2060() /* ty=(Tensor[(256), int64], Tensor[(12, 4, 15), uint16], Tensor[(720), uint16], Tensor[(528), float32]) */;
  %770 = @func_2978() /* ty=(Tensor[(1, 3, 12), bool], Tensor[(1, 3, 12), bool], bool) */;
  %771 = cast(meta[relay.Constant][41] /* ty=Tensor[(80), uint64] */, dtype="uint64") /* ty=Tensor[(80), uint64] */;
  %772 = reshape(%771, newshape=[10, 8]) /* ty=Tensor[(10, 8), uint64] */;
  %773 = @func_1091(%772) /* ty=(Tensor[(10, 8), uint64], Tensor[(9, 15, 7), bool], Tensor[(945), float64]) */;
  %774 = %769.0;
  %775 = %770.2;
  %776 = %773.1;
  (%774, %775, %776, meta[relay.Constant][41] /* ty=Tensor[(80), uint64] */)
}

def @func_7971() -> Tensor[(720), uint16] {
  %777 = @func_5080() /* ty=(Tensor[(720), uint16],) */;
  %777.0
}

def @func_7326() -> (Tensor[(2, 2, 9), bool],) {
  %778 = @func_5378() /* ty=Tensor[(2, 2, 9), bool] */;
  (%778,)
}

def @func_9695(%var_9640: int32) -> (Tensor[(256), int64], Tensor[(2, 2, 9), bool], Tensor[(7, 7, 2), int32], int32, Tensor[(98), int32], Tensor[(2, 2, 9), bool], Tensor[(7, 7, 2), int32], Tensor[(4, 8, 8), int64]) {
  %779 = @func_7590() /* ty=(Tensor[(256), int64], Tensor[(256), int64]) */;
  %780 = @func_4204() /* ty=(Tensor[(2, 2, 9), bool],) */;
  %781 = cast(%var_9640, dtype="int32") /* ty=int32 */;
  %782 = cast(meta[relay.Constant][42] /* ty=Tensor[(98), int32] */, dtype="int32") /* ty=Tensor[(98), int32] */;
  %783 = reshape(%781, newshape=[]) /* ty=int32 */;
  %784 = reshape(%782, newshape=[7, 7, 2]) /* ty=Tensor[(7, 7, 2), int32] */;
  %785 = @func_7195(%783, %784) /* ty=(Tensor[(7, 7, 2), int32], Tensor[(7, 7, 2), float32]) */;
  %786 = @func_2654() /* ty=(Tensor[(2, 2, 9), bool],) */;
  %787 = cast(%var_9640, dtype="int32") /* ty=int32 */;
  %788 = cast(meta[relay.Constant][42] /* ty=Tensor[(98), int32] */, dtype="int32") /* ty=Tensor[(98), int32] */;
  %789 = reshape(%787, newshape=[]) /* ty=int32 */;
  %790 = reshape(%788, newshape=[7, 7, 2]) /* ty=Tensor[(7, 7, 2), int32] */;
  %791 = @func_7195(%789, %790) /* ty=(Tensor[(7, 7, 2), int32], Tensor[(7, 7, 2), float32]) */;
  %792 = %779.1;
  %793 = cast(%792, dtype="int64") /* ty=Tensor[(256), int64] */;
  %794 = cast(%792, dtype="int64") /* ty=Tensor[(256), int64] */;
  %795 = reshape(%793, newshape=[4, 8, 8]) /* ty=Tensor[(4, 8, 8), int64] */;
  %796 = reshape(%794, newshape=[4, 8, 8]) /* ty=Tensor[(4, 8, 8), int64] */;
  %797 = @func_1243(%795, %796) /* ty=(Tensor[(4, 8, 8), int64],) */;
  %798 = %780.0;
  %799 = %785.0;
  %800 = %786.0;
  %801 = %791.0;
  %802 = %797.0;
  (%792, %798, %799, %var_9640, meta[relay.Constant][42] /* ty=Tensor[(98), int32] */, %800, %801, %802)
}

def @func_10041(%var_10030: Tensor[(10, 4, 5), float32]) -> (Tensor[(10, 4, 5), float32], Tensor[(10, 4, 5), float64]) {
  %803 = cast(%var_10030, dtype="float32") /* ty=Tensor[(10, 4, 5), float32] */;
  %804 = cast(%var_10030, dtype="float64") /* ty=Tensor[(10, 4, 5), float64] */;
  %805 = log(%803) /* ty=Tensor[(10, 4, 5), float32] */;
  %806 = cosh(%804) /* ty=Tensor[(10, 4, 5), float64] */;
  (%805, %806)
}

def @func_6634() -> (Tensor[(2, 2, 9), bool],) {
  %807 = @func_6314() /* ty=(Tensor[(2, 2, 9), bool],) */;
  %808 = %807.0;
  (%808,)
}

def @func_10294() -> float32 {
  %809 = @func_4136() /* ty=(Tensor[(2, 2, 9), bool], Tensor[(2, 2, 9), bool], float32, float32) */;
  %809.3
}

def @func_3079() -> (Tensor[(2, 2, 9), bool], Tensor[(528), float32], float32, Tensor[(528), float32], float32) {
  %810 = @func_2544() /* ty=(Tensor[(2, 2, 9), bool],) */;
  %811 = cast(9.52277f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %812 = cast(meta[relay.Constant][43] /* ty=Tensor[(528), float32] */, dtype="float32") /* ty=Tensor[(528), float32] */;
  %813 = reshape(%811, newshape=[]) /* ty=float32 */;
  %814 = reshape(%812, newshape=[528]) /* ty=Tensor[(528), float32] */;
  %815 = @func_1039(%813, %814) /* ty=(Tensor[(2, 14, 2), float64], Tensor[(16, 3, 11), float32], float32, Tensor[(528), float32]) */;
  %816 = @func_2938() /* ty=(float32,) */;
  %817 = %810.0;
  %818 = %815.3;
  %819 = %816.0;
  (%817, %818, 9.52277f /* ty=float32 */, meta[relay.Constant][43] /* ty=Tensor[(528), float32] */, %819)
}

def @func_3470() -> float32 {
  %820 = @func_1895() /* ty=(float32,) */;
  %820.0
}

def @func_4078() -> (Tensor[(256), int64],) {
  %821 = @func_3897() /* ty=Tensor[(256), int64] */;
  (%821,)
}

def @func_7117(%var_7105: Tensor[(3, 1, 11), float32], %var_7109: Tensor[(252), bool]) -> (Tensor[(3, 1, 11), float32], Tensor[(252), bool], Tensor[(252), bool]) {
  %822 = cast(%var_7105, dtype="float32") /* ty=Tensor[(3, 1, 11), float32] */;
  %823 = cast(%var_7109, dtype="bool") /* ty=Tensor[(252), bool] */;
  %824 = reshape(%823, newshape=[252]) /* ty=Tensor[(252), bool] */;
  %825 = @func_5854(%824) /* ty=(Tensor[(2, 2, 9), bool], Tensor[(528), float32], Tensor[(252), bool], Tensor[(264, 2), float32], Tensor[(2, 2, 9), bool]) */;
  %826 = sqrt(%822) /* ty=Tensor[(3, 1, 11), float32] */;
  %827 = %825.2;
  (%826, %827, %var_7109)
}

def @func_4283() -> (Tensor[(80), uint64],) {
  %828 = @func_3985() /* ty=(float32, Tensor[(80), uint64], Tensor[(80), uint64]) */;
  %829 = %828.2;
  (%829,)
}

def @func_5680() -> (Tensor[(2, 2, 9), bool],) {
  %830 = @func_1637() /* ty=Tensor[(2, 2, 9), bool] */;
  (%830,)
}

def @func_5428(%var_5413: Tensor[(2, 14, 7), float32]) -> Tensor[(2, 14, 7), float32] {
  %831 = cast(%var_5413, dtype="float32") /* ty=Tensor[(2, 14, 7), float32] */;
  acosh(%831) /* ty=Tensor[(2, 14, 7), float32] */
}

def @func_2060() -> (Tensor[(256), int64], Tensor[(12, 4, 15), uint16], Tensor[(720), uint16], Tensor[(528), float32]) {
  %832 = @func_1957() /* ty=(float32, Tensor[(256), int64]) */;
  %833 = cast(meta[relay.Constant][44] /* ty=Tensor[(720), uint16] */, dtype="uint16") /* ty=Tensor[(720), uint16] */;
  %834 = reshape(%833, newshape=[12, 4, 15]) /* ty=Tensor[(12, 4, 15), uint16] */;
  %835 = @func_1889() /* ty=(Tensor[(2, 2, 9), bool], float32, float32, Tensor[(528), float32]) */;
  %836 = %832.1;
  %837 = @func_836(%834) /* ty=Tensor[(12, 4, 15), uint16] */;
  %838 = %835.3;
  (%836, %837, meta[relay.Constant][44] /* ty=Tensor[(720), uint16] */, %838)
}

def @func_7805() -> (Tensor[(256), int64],) {
  %839 = @func_6995() /* ty=(Tensor[(528), float32], Tensor[(256), int64], Tensor[(256), int64], Tensor[(256), int16]) */;
  %840 = %839.1;
  (%840,)
}

def @func_1243(%var_1227: Tensor[(4, 8, 8), int64], %var_1228: Tensor[(4, 8, 8), int64]) -> (Tensor[(4, 8, 8), int64],) {
  %841 = cast(%var_1228, dtype="int64") /* ty=Tensor[(4, 8, 8), int64] */;
  %842 = shape_of(%var_1227, dtype="int32") /* ty=Tensor[(3), int32] */;
  %843 = cast(%var_1227, dtype="int64") /* ty=Tensor[(4, 8, 8), int64] */;
  %844 = dyn.reshape(%841, %842, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %845 = logical_xor(%843, %844) /* ty=Tensor[(4, 8, 8), int64] */;
  (%845,)
}

def @func_2700(%var_2697: Tensor[(80), uint64]) -> (Tensor[(2, 2, 9), bool], Tensor[(10, 8), uint64], Tensor[(80), uint64]) {
  %846 = @func_2544() /* ty=(Tensor[(2, 2, 9), bool],) */;
  %847 = cast(%var_2697, dtype="uint64") /* ty=Tensor[(80), uint64] */;
  %848 = reshape(%847, newshape=[10, 8]) /* ty=Tensor[(10, 8), uint64] */;
  %849 = @func_1091(%848) /* ty=(Tensor[(10, 8), uint64], Tensor[(9, 15, 7), bool], Tensor[(945), float64]) */;
  %850 = %846.0;
  %851 = %849.0;
  (%850, %851, %var_2697)
}

def @func_2238() -> Tensor[(256), int64] {
  %852 = @func_1957() /* ty=(float32, Tensor[(256), int64]) */;
  %852.1
}

def @func_3105(%var_3085: Tensor[(8, 12, 5), float32], %var_3086: Tensor[(8, 12, 5), float32]) -> (Tensor[(8, 12, 5), bool], Tensor[(8, 12, 5), float32]) {
  %853 = cast(%var_3086, dtype="bool") /* ty=Tensor[(8, 12, 5), bool] */;
  %854 = shape_of(%var_3085, dtype="int32") /* ty=Tensor[(3), int32] */;
  %855 = cast(%var_3085, dtype="bool") /* ty=Tensor[(8, 12, 5), bool] */;
  %856 = dyn.reshape(%853, %854, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %857 = cast(%var_3086, dtype="float32") /* ty=Tensor[(8, 12, 5), float32] */;
  %858 = shape_of(%var_3085, dtype="int32") /* ty=Tensor[(3), int32] */;
  %859 = cast(%var_3085, dtype="float32") /* ty=Tensor[(8, 12, 5), float32] */;
  %860 = dyn.reshape(%857, %858, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %861 = greater(%855, %856) /* ty=Tensor[(8, 12, 5), bool] */;
  %862 = minimum(%859, %860) /* ty=Tensor[(8, 12, 5), float32] */;
  (%861, %862)
}

def @func_5288() -> (Tensor[(256), int64],) {
  %863 = @func_3897() /* ty=Tensor[(256), int64] */;
  (%863,)
}

def @func_4048() -> Tensor[(2, 2, 9), bool] {
  %864 = @func_2544() /* ty=(Tensor[(2, 2, 9), bool],) */;
  %864.0
}

def @func_3460() -> (Tensor[(14, 8, 7), float64], Tensor[(9, 15, 7), bool], Tensor[(945), float64]) {
  %865 = cast(meta[relay.Constant][45] /* ty=Tensor[(14, 8, 7), float64] */, dtype="float64") /* ty=Tensor[(14, 8, 7), float64] */;
  %866 = cast(meta[relay.Constant][46] /* ty=Tensor[(945), float64] */, dtype="float64") /* ty=Tensor[(945), float64] */;
  %867 = reshape(%866, newshape=[9, 15, 7]) /* ty=Tensor[(9, 15, 7), float64] */;
  %868 = @func_97(%867) /* ty=(Tensor[(9, 15, 7), bool],) */;
  %869 = log10(%865) /* ty=Tensor[(14, 8, 7), float64] */;
  %870 = %868.0;
  (%869, %870, meta[relay.Constant][46] /* ty=Tensor[(945), float64] */)
}

def @func_7738() -> (float32,) {
  %871 = @func_4511() /* ty=(float32,) */;
  %872 = %871.0;
  (%872,)
}

def @func_6995() -> (Tensor[(528), float32], Tensor[(256), int64], Tensor[(256), int64], Tensor[(256), int16]) {
  %873 = @func_4981() /* ty=(Tensor[(2, 2, 9), bool], Tensor[(256), int64], Tensor[(256), int64], float32) */;
  %874 = @func_3589() /* ty=(Tensor[(256), int64],) */;
  %875 = %873.2;
  %876 = cast(%875, dtype="float64") /* ty=Tensor[(256), float64] */;
  %877 = reshape(%876, newshape=[256]) /* ty=Tensor[(256), float64] */;
  %878 = @func_4907(%877) /* ty=(Tensor[(256), int16],) */;
  %879 = @func_4835() /* ty=Tensor[(528), float32] */;
  %880 = %874.0;
  %881 = %878.0;
  (%879, %875, %880, %881)
}

def @func_5378() -> Tensor[(2, 2, 9), bool] {
  %882 = @func_1819() /* ty=(Tensor[(2, 2, 9), bool], Tensor[(4, 8, 8), int64], Tensor[(256), int64], Tensor[(1, 3, 12), bool]) */;
  %882.0
}

def @func_7559(%var_7521: Tensor[(11, 1, 3), float64], %var_7522: Tensor[(11, 15, 3), float64]) -> (Tensor[(11, 15, 3), float64], Tensor[(11, 1, 3), int64]) {
  %883 = cast(%var_7521, dtype="float64") /* ty=Tensor[(11, 1, 3), float64] */;
  %884 = cast(%var_7522, dtype="float64") /* ty=Tensor[(11, 15, 3), float64] */;
  %885 = @func_2938() /* ty=(float32,) */;
  %886 = %885.0;
  %887 = cast(%var_7521, dtype="int64") /* ty=Tensor[(11, 1, 3), int64] */;
  %888 = cast(%886, dtype="int64") /* ty=int64 */;
  %889 = minimum(%883, %884) /* ty=Tensor[(11, 15, 3), float64] */;
  %890 = maximum(%887, %888) /* ty=Tensor[(11, 1, 3), int64] */;
  (%889, %890)
}

def @func_7636() -> float32 {
  %891 = @func_3918() /* ty=(float32,) */;
  %891.0
}

def @func_7905(%var_7888: Tensor[(33), float64], %var_7889: Tensor[(495), float64]) -> (Tensor[(720), uint16], Tensor[(11, 15, 3), float64], Tensor[(33), float64], Tensor[(495), float64], float32, float32) {
  %892 = @func_5791() /* ty=(Tensor[(720), uint16], Tensor[(72), int8], Tensor[(576), int8], Tensor[(1, 3, 12), float64]) */;
  %893 = cast(%var_7888, dtype="float64") /* ty=Tensor[(33), float64] */;
  %894 = cast(%var_7889, dtype="float64") /* ty=Tensor[(495), float64] */;
  %895 = reshape(%893, newshape=[11, 1, 3]) /* ty=Tensor[(11, 1, 3), float64] */;
  %896 = reshape(%894, newshape=[11, 15, 3]) /* ty=Tensor[(11, 15, 3), float64] */;
  %897 = @func_7559(%895, %896) /* ty=(Tensor[(11, 15, 3), float64], Tensor[(11, 1, 3), int64]) */;
  %898 = @func_7372() /* ty=(float32,) */;
  %899 = @func_7738() /* ty=(float32,) */;
  %900 = %892.0;
  %901 = %897.0;
  %902 = %898.0;
  %903 = %899.0;
  (%900, %901, %var_7888, %var_7889, %902, %903)
}

def @func_4204() -> (Tensor[(2, 2, 9), bool],) {
  %904 = @func_2467() /* ty=(Tensor[(2, 2, 9), bool],) */;
  %905 = %904.0;
  (%905,)
}

def @func_6225(%var_6216: Tensor[(12, 1, 2), float32]) -> Tensor[(12, 4, 2), float32] {
  %906 = cast(%var_6216, dtype="float32") /* ty=Tensor[(12, 1, 2), float32] */;
  %907 = cast(meta[relay.Constant][47] /* ty=Tensor[(12, 4, 2), float32] */, dtype="float32") /* ty=Tensor[(12, 4, 2), float32] */;
  divide(%906, %907) /* ty=Tensor[(12, 4, 2), float32] */
}

def @func_6734() -> (Tensor[(720), uint16], uint16, Tensor[(5, 6, 13), float64], Tensor[(9, 15, 7), bool], Tensor[(1, 3, 12), bool], float32, Tensor[(3, 4, 15), int32], Tensor[(180), int32]) {
  %908 = @func_5080() /* ty=(Tensor[(720), uint16],) */;
  %909 = cast(meta[relay.Constant][48] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %910 = reshape(%909, newshape=[]) /* ty=uint16 */;
  %911 = @func_5110(%910) /* ty=Tensor[(5, 6, 13), uint16] */;
  %912 = cast(%911, dtype="float64") /* ty=Tensor[(5, 6, 13), float64] */;
  %913 = @func_5508() /* ty=(Tensor[(256), int64], bool, Tensor[(9, 15, 7), bool], Tensor[(80), uint64]) */;
  %914 = @func_2978() /* ty=(Tensor[(1, 3, 12), bool], Tensor[(1, 3, 12), bool], bool) */;
  %915 = @func_5411() /* ty=(float32,) */;
  %916 = cast(meta[relay.Constant][49] /* ty=Tensor[(180), int32] */, dtype="int32") /* ty=Tensor[(180), int32] */;
  %917 = reshape(%916, newshape=[3, 4, 15]) /* ty=Tensor[(3, 4, 15), int32] */;
  %918 = @func_5700(%917) /* ty=(Tensor[(3, 4, 15), int32],) */;
  %919 = %908.0;
  %920 = acos(%912) /* ty=Tensor[(5, 6, 13), float64] */;
  %921 = %913.2;
  %922 = %914.0;
  %923 = %915.0;
  %924 = %918.0;
  (%919, meta[relay.Constant][48] /* ty=uint16 */, %920, %921, %922, %923, %924, meta[relay.Constant][49] /* ty=Tensor[(180), int32] */)
}

def @func_9049() -> (bool,) {
  %925 = @func_5639() /* ty=(bool,) */;
  %926 = %925.0;
  (%926,)
}

def @func_8193() -> (Tensor[(576), int8],) {
  %927 = @func_5791() /* ty=(Tensor[(720), uint16], Tensor[(72), int8], Tensor[(576), int8], Tensor[(1, 3, 12), float64]) */;
  %928 = %927.2;
  (%928,)
}

def @func_2026() -> Tensor[(256), int64] {
  %929 = @func_1819() /* ty=(Tensor[(2, 2, 9), bool], Tensor[(4, 8, 8), int64], Tensor[(256), int64], Tensor[(1, 3, 12), bool]) */;
  %929.2
}

def @func_5791() -> (Tensor[(720), uint16], Tensor[(72), int8], Tensor[(576), int8], Tensor[(1, 3, 12), float64]) {
  %930 = @func_3289() /* ty=(Tensor[(528), float32], Tensor[(720), uint16], Tensor[(2, 2, 9), bool]) */;
  %931 = cast(meta[relay.Constant][50] /* ty=Tensor[(72), int8] */, dtype="int8") /* ty=Tensor[(72), int8] */;
  %932 = cast(meta[relay.Constant][51] /* ty=Tensor[(576), int8] */, dtype="int8") /* ty=Tensor[(576), int8] */;
  %933 = reshape(%931, newshape=[1, 6, 12]) /* ty=Tensor[(1, 6, 12), int8] */;
  %934 = reshape(%932, newshape=[8, 6, 12]) /* ty=Tensor[(8, 6, 12), int8] */;
  %935 = @func_1348(%933, %934) /* ty=(Tensor[(8, 6, 12), int8], Tensor[(1, 3, 12), bool], Tensor[(5, 189), float64]) */;
  %936 = %935.1;
  %937 = cast(%936, dtype="float64") /* ty=Tensor[(1, 3, 12), float64] */;
  %938 = %930.1;
  %939 = cos(%937) /* ty=Tensor[(1, 3, 12), float64] */;
  (%938, meta[relay.Constant][50] /* ty=Tensor[(72), int8] */, meta[relay.Constant][51] /* ty=Tensor[(576), int8] */, %939)
}

def @func_4511() -> (float32,) {
  %940 = @func_3918() /* ty=(float32,) */;
  %941 = %940.0;
  (%941,)
}

def @func_4835() -> Tensor[(528), float32] {
  %942 = @func_2060() /* ty=(Tensor[(256), int64], Tensor[(12, 4, 15), uint16], Tensor[(720), uint16], Tensor[(528), float32]) */;
  %942.3
}

def @func_9908(%var_9876: Tensor[(1, 104), float64]) -> (Tensor[(80), uint64], Tensor[(?, 104), int32]) {
  %943 = @func_8372() /* ty=(Tensor[(80), uint64], Tensor[(528), bool], Tensor[(10, 8), uint64]) */;
  %944 = cast(%var_9876, dtype="float64") /* ty=Tensor[(1, 104), float64] */;
  %945 = reshape(%944, newshape=[8, 1, 13]) /* ty=Tensor[(8, 1, 13), float64] */;
  %946 = @func_9536(%945) /* ty=(Tensor[(8, 1, 13), float64],) */;
  %947 = %946.0;
  %948 = cast(%947, dtype="int32") /* ty=Tensor[(8, 1, 13), int32] */;
  %949 = shape_of(%var_9876, dtype="int32") /* ty=Tensor[(2), int32] */;
  %950 = cast(%var_9876, dtype="int32") /* ty=Tensor[(1, 104), int32] */;
  %951 = dyn.reshape(%948, %949, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %952 = %943.0;
  %953 = bitwise_xor(%950, %951) /* ty=Tensor[(?, 104), int32] */;
  (%952, %953)
}

def @func_9028(%var_8960: Tensor[(256), int64], %var_9013: Tensor[(12, 60), uint16]) -> (Tensor[(256), int64], Tensor[(256), uint8], Tensor[(5, 6, 13), int32], Tensor[(256), int64], Tensor[(2, 2, 9), bool], Tensor[(12, 4, 15), uint16], Tensor[(12, 60), uint16], Tensor[(256), float64]) {
  %954 = @func_8921() /* ty=(Tensor[(256), int64], Tensor[(256), int64]) */;
  %955 = @func_5288() /* ty=(Tensor[(256), int64],) */;
  %956 = %955.0;
  %957 = cast(%var_8960, dtype="uint8") /* ty=Tensor[(256), uint8] */;
  %958 = shape_of(%956, dtype="int32") /* ty=Tensor[(1), int32] */;
  %959 = cast(%956, dtype="uint8") /* ty=Tensor[(256), uint8] */;
  %960 = dyn.reshape(%957, %958, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %961 = @func_6734() /* ty=(Tensor[(720), uint16], uint16, Tensor[(5, 6, 13), float64], Tensor[(9, 15, 7), bool], Tensor[(1, 3, 12), bool], float32, Tensor[(3, 4, 15), int32], Tensor[(180), int32]) */;
  %962 = %961.2;
  %963 = cast(meta[relay.Constant][52] /* ty=Tensor[(5, 6, 13), float64] */, dtype="int32") /* ty=Tensor[(5, 6, 13), int32] */;
  %964 = shape_of(%962, dtype="int32") /* ty=Tensor[(3), int32] */;
  %965 = cast(%962, dtype="int32") /* ty=Tensor[(5, 6, 13), int32] */;
  %966 = dyn.reshape(%963, %964, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %967 = @func_6314() /* ty=(Tensor[(2, 2, 9), bool],) */;
  %968 = cast(%var_9013, dtype="uint16") /* ty=Tensor[(12, 60), uint16] */;
  %969 = reshape(%968, newshape=[12, 4, 15]) /* ty=Tensor[(12, 4, 15), uint16] */;
  %970 = cast(%var_8960, dtype="float64") /* ty=Tensor[(256), float64] */;
  %971 = %954.1;
  %972 = bitwise_or(%959, %960) /* ty=Tensor[(256), uint8] */;
  %973 = bitwise_and(%965, %966) /* ty=Tensor[(5, 6, 13), int32] */;
  %974 = @func_3897() /* ty=Tensor[(256), int64] */;
  %975 = %967.0;
  %976 = @func_836(%969) /* ty=Tensor[(12, 4, 15), uint16] */;
  %977 = erf(%970) /* ty=Tensor[(256), float64] */;
  (%971, %972, %973, %974, %975, %976, %var_9013, %977)
}

def @func_2742() -> Tensor[(720), uint16] {
  %978 = @func_2060() /* ty=(Tensor[(256), int64], Tensor[(12, 4, 15), uint16], Tensor[(720), uint16], Tensor[(528), float32]) */;
  %978.2
}

def @func_10004() -> (Tensor[(2, 2, 9), float32],) {
  %979 = @func_7326() /* ty=(Tensor[(2, 2, 9), bool],) */;
  %980 = %979.0;
  %981 = cast(%980, dtype="float32") /* ty=Tensor[(2, 2, 9), float32] */;
  %982 = sqrt(%981) /* ty=Tensor[(2, 2, 9), float32] */;
  (%982,)
}

def @func_6842(%var_6833: Tensor[(7, 9, 1), int8], %var_6834: Tensor[(7, 9, 4), int8]) -> (Tensor[(7, 9, 4), int8],) {
  %983 = cast(%var_6833, dtype="int8") /* ty=Tensor[(7, 9, 1), int8] */;
  %984 = cast(%var_6834, dtype="int8") /* ty=Tensor[(7, 9, 4), int8] */;
  %985 = right_shift(%983, %984) /* ty=Tensor[(7, 9, 4), int8] */;
  (%985,)
}

def @func_10155() -> (float32, Tensor[(256), int64]) {
  %986 = @func_9804() /* ty=(float32, float32) */;
  %987 = @func_7671() /* ty=(Tensor[(256), int64],) */;
  %988 = %986.0;
  %989 = %987.0;
  (%988, %989)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_9259(%var_9234: Tensor[(256), int64]) -> (Tensor[(256), int8],) {
  %0 = @func_3589() /* ty=(Tensor[(256), int64],) */;
  %1 = %0.0;
  %2 = cast(%var_9234, dtype="bool") /* ty=Tensor[(256), bool] */;
  %3 = shape_of(%1, dtype="int32") /* ty=Tensor[(1), int32] */;
  %4 = cast(%1, dtype="bool") /* ty=Tensor[(256), bool] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?), bool] */;
  %6 = logical_and(%4, %5) /* ty=Tensor[(256), bool] */;
  %7 = cast(%1, dtype="int8") /* ty=Tensor[(256), int8] */;
  %8 = shape_of(%6, dtype="int32") /* ty=Tensor[(1), int32] */;
  %9 = cast(%6, dtype="int8") /* ty=Tensor[(256), int8] */;
  %10 = dyn.reshape(%7, %8, newshape=[]) /* ty=Tensor[(?), int8] */;
  %11 = logical_xor(%9, %10) /* ty=Tensor[(256), int8] */;
  (%11,)
}

def @func_5181() -> (Tensor[(256), int64],) {
  %14 = fn () -> (Tensor[(256), int64],) {
    %12 = @func_4078() /* ty=(Tensor[(256), int64],) */;
    %13 = %12.0;
    (%13,)
  };
  %14() /* ty=(Tensor[(256), int64],) */
}

def @func_7499(%var_7498: Tensor[(21, 3), int8]) -> (Tensor[(256), int64], Tensor[(7, 9, 4), int8], Tensor[(252), int8], Tensor[(21, 3), float64], Tensor[(3, 4, 15), int32]) {
  %30 = fn (%var_7491: Tensor[(21, 3), int8]) -> (Tensor[(256), int64], Tensor[(7, 9, 4), int8], Tensor[(252), int8], Tensor[(21, 3), float64], Tensor[(3, 4, 15), int32]) {
    %15 = @func_2994() /* ty=(Tensor[(256), int64],) */;
    %16 = cast(meta[relay.Constant][0] /* ty=Tensor[(21, 3), int8] */, dtype="int8") /* ty=Tensor[(21, 3), int8] */;
    %17 = cast(meta[relay.Constant][1] /* ty=Tensor[(252), int8] */, dtype="int8") /* ty=Tensor[(252), int8] */;
    %18 = reshape(%16, newshape=[7, 9, 1]) /* ty=Tensor[(7, 9, 1), int8] */;
    %19 = reshape(%17, newshape=[7, 9, 4]) /* ty=Tensor[(7, 9, 4), int8] */;
    %20 = @func_6842(%18, %19) /* ty=(Tensor[(7, 9, 4), int8],) */;
    %21 = cast(%var_7491, dtype="float64") /* ty=Tensor[(21, 3), float64] */;
    %22 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(21, 3), int8] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %23 = cast(meta[relay.Constant][0] /* ty=Tensor[(21, 3), int8] */, dtype="float64") /* ty=Tensor[(21, 3), float64] */;
    %24 = dyn.reshape(%21, %22, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %25 = @func_6734() /* ty=(Tensor[(720), uint16], uint16, Tensor[(5, 6, 13), float64], Tensor[(9, 15, 7), bool], Tensor[(1, 3, 12), bool], float32, Tensor[(3, 4, 15), int32], Tensor[(180), int32]) */;
    %26 = %15.0;
    %27 = %20.0;
    %28 = subtract(%23, %24) /* ty=Tensor[(21, 3), float64] */;
    %29 = %25.6;
    (%26, %27, meta[relay.Constant][1] /* ty=Tensor[(252), int8] */, %28, %29)
  };
  %30(%var_7498) /* ty=(Tensor[(256), int64], Tensor[(7, 9, 4), int8], Tensor[(252), int8], Tensor[(21, 3), float64], Tensor[(3, 4, 15), int32]) */
}

def @func_8441(%var_8439: Tensor[(11, 2, 10), float64], %var_8440: Tensor[(11, 2, 10), float64]) -> (Tensor[(2, 14, 7), float32], Tensor[(196), float32], Tensor[(?, 480), int32], Tensor[(11, 2, 10), float32]) {
  @func_8437(%var_8439, %var_8440) /* ty=(Tensor[(2, 14, 7), float32], Tensor[(196), float32], Tensor[(?, 480), int32], Tensor[(11, 2, 10), float32]) */
}

def @func_2296() -> (Tensor[(528), float32],) {
  %33 = fn () -> (Tensor[(528), float32],) {
    %31 = @func_1889() /* ty=(Tensor[(2, 2, 9), bool], float32, float32, Tensor[(528), float32]) */;
    %32 = %31.3;
    (%32,)
  };
  %33() /* ty=(Tensor[(528), float32],) */
}

def @func_3470() -> float32 {
  %34 = @func_1895() /* ty=(float32,) */;
  %34.0
}

def @func_8560(%var_8558: Tensor[(80), uint64]) -> (Tensor[(256), int64], Tensor[(3, 1, 2), float32], Tensor[(6), float32], Tensor[(10, 8), uint64], Tensor[(80), uint64]) {
  %35 = @func_7671() /* ty=(Tensor[(256), int64],) */;
  %36 = cast(meta[relay.Constant][2] /* ty=Tensor[(6), float32] */, dtype="float32") /* ty=Tensor[(6), float32] */;
  %37 = reshape(%36, newshape=[3, 1, 2]) /* ty=Tensor[(3, 1, 2), float32] */;
  %38 = @func_6655(%37) /* ty=(Tensor[(3, 1, 2), float32],) */;
  %39 = cast(%var_8558, dtype="uint64") /* ty=Tensor[(80), uint64] */;
  %40 = reshape(%39, newshape=[10, 8]) /* ty=Tensor[(10, 8), uint64] */;
  %41 = @func_1091(%40) /* ty=(Tensor[(10, 8), uint64], Tensor[(9, 15, 7), bool], Tensor[(945), float64]) */;
  %42 = %35.0;
  %43 = %38.0;
  %44 = %41.0;
  (%42, %43, meta[relay.Constant][2] /* ty=Tensor[(6), float32] */, %44, %var_8558)
}

def @func_2028() -> Tensor[(256), int64] {
  @func_2026() /* ty=Tensor[(256), int64] */
}

def @func_7671() -> (Tensor[(256), int64],) {
  %45 = @func_7590() /* ty=(Tensor[(256), int64], Tensor[(256), int64]) */;
  %46 = %45.1;
  (%46,)
}

def @func_4283() -> (Tensor[(80), uint64],) {
  %47 = @func_3985() /* ty=(float32, Tensor[(80), uint64], Tensor[(80), uint64]) */;
  %48 = %47.2;
  (%48,)
}

def @func_2632() -> (Tensor[(2, 2, 9), bool],) {
  @func_2630() /* ty=(Tensor[(2, 2, 9), bool],) */
}

def @func_4910(%var_4908: Tensor[(256), float64]) -> (Tensor[(256), int16],) {
  @func_4907(%var_4908) /* ty=(Tensor[(256), int16],) */
}

def @func_7472(%var_7471: Tensor[(720, 1), uint16]) -> (Tensor[(2, 2, 9), bool], Tensor[(528), float32], Tensor[(12, 4, 15), uint16], Tensor[(720, 1), uint16]) {
  %56 = fn (%var_7457: Tensor[(720, 1), uint16]) -> (Tensor[(2, 2, 9), bool], Tensor[(528), float32], Tensor[(12, 4, 15), uint16], Tensor[(720, 1), uint16]) {
    %49 = @func_4204() /* ty=(Tensor[(2, 2, 9), bool],) */;
    %50 = @func_2295() /* ty=(Tensor[(528), float32],) */;
    %51 = cast(%var_7457, dtype="uint16") /* ty=Tensor[(720, 1), uint16] */;
    %52 = reshape(%51, newshape=[12, 4, 15]) /* ty=Tensor[(12, 4, 15), uint16] */;
    %53 = %49.0;
    %54 = %50.0;
    %55 = @func_836(%52) /* ty=Tensor[(12, 4, 15), uint16] */;
    (%53, %54, %55, %var_7457)
  };
  %56(%var_7471) /* ty=(Tensor[(2, 2, 9), bool], Tensor[(528), float32], Tensor[(12, 4, 15), uint16], Tensor[(720, 1), uint16]) */
}

def @func_3105(%var_3085: Tensor[(8, 12, 5), float32], %var_3086: Tensor[(8, 12, 5), float32]) -> (Tensor[(8, 12, 5), bool], Tensor[(8, 12, 5), float32]) {
  %57 = cast(%var_3086, dtype="bool") /* ty=Tensor[(8, 12, 5), bool] */;
  %58 = shape_of(%var_3085, dtype="int32") /* ty=Tensor[(3), int32] */;
  %59 = cast(%var_3085, dtype="bool") /* ty=Tensor[(8, 12, 5), bool] */;
  %60 = dyn.reshape(%57, %58, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %61 = cast(%var_3086, dtype="float32") /* ty=Tensor[(8, 12, 5), float32] */;
  %62 = shape_of(%var_3085, dtype="int32") /* ty=Tensor[(3), int32] */;
  %63 = cast(%var_3085, dtype="float32") /* ty=Tensor[(8, 12, 5), float32] */;
  %64 = dyn.reshape(%61, %62, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %65 = greater(%59, %60) /* ty=Tensor[(8, 12, 5), bool] */;
  %66 = minimum(%63, %64) /* ty=Tensor[(8, 12, 5), float32] */;
  (%65, %66)
}

def @func_9524() -> (float32,) {
  @func_9522() /* ty=(float32,) */
}

def @func_9051() -> (bool,) {
  @func_9049() /* ty=(bool,) */
}

def @func_1093(%var_1092: Tensor[(10, 8), uint64]) -> (Tensor[(10, 8), uint64], Tensor[(9, 15, 7), bool], Tensor[(945), float64]) {
  %76 = fn (%var_1077: Tensor[(10, 8), uint64]) -> (Tensor[(10, 8), uint64], Tensor[(9, 15, 7), bool], Tensor[(945), float64]) {
    %67 = cast(%var_1077, dtype="uint64") /* ty=Tensor[(10, 8), uint64] */;
    %68 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(10, 8), uint64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %69 = cast(meta[relay.Constant][3] /* ty=Tensor[(10, 8), uint64] */, dtype="uint64") /* ty=Tensor[(10, 8), uint64] */;
    %70 = dyn.reshape(%67, %68, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %71 = cast(meta[relay.Constant][4] /* ty=Tensor[(945), float64] */, dtype="float64") /* ty=Tensor[(945), float64] */;
    %72 = reshape(%71, newshape=[9, 15, 7]) /* ty=Tensor[(9, 15, 7), float64] */;
    %73 = @func_97(%72) /* ty=(Tensor[(9, 15, 7), bool],) */;
    %74 = add(%69, %70) /* ty=Tensor[(10, 8), uint64] */;
    %75 = %73.0;
    (%74, %75, meta[relay.Constant][4] /* ty=Tensor[(945), float64] */)
  };
  %76(%var_1092) /* ty=(Tensor[(10, 8), uint64], Tensor[(9, 15, 7), bool], Tensor[(945), float64]) */
}

def @func_2812() -> (float32,) {
  %79 = fn () -> (float32,) {
    %77 = @func_1895() /* ty=(float32,) */;
    %78 = %77.0;
    (%78,)
  };
  %79() /* ty=(float32,) */
}

def @func_7739() -> (float32,) {
  %82 = fn () -> (float32,) {
    %80 = @func_4511() /* ty=(float32,) */;
    %81 = %80.0;
    (%81,)
  };
  %82() /* ty=(float32,) */
}

def @func_2402(%var_2367: Tensor[(105, 9), float64], %var_2373: Tensor[(8, 24), float32]) -> (Tensor[(528), float32], Tensor[(1, 3, 12), bool], Tensor[(105, 9), float64], Tensor[(2, 2, 9), float32], Tensor[(8, 24), uint8]) {
  %83 = @func_2295() /* ty=(Tensor[(528), float32],) */;
  %84 = cast(%var_2367, dtype="float64") /* ty=Tensor[(105, 9), float64] */;
  %85 = reshape(%84, newshape=[15, 63]) /* ty=Tensor[(15, 63), float64] */;
  %86 = @func_745(%85) /* ty=(Tensor[(16, 15, 10), uint32], Tensor[(9, 15, 7), bool], Tensor[(15, 63), float64], Tensor[(1, 3, 12), bool], Tensor[(36), bool]) */;
  %87 = @func_1637() /* ty=Tensor[(2, 2, 9), bool] */;
  %88 = cast(%87, dtype="float32") /* ty=Tensor[(2, 2, 9), float32] */;
  %89 = cast(%var_2373, dtype="float32") /* ty=Tensor[(8, 24), float32] */;
  %90 = reshape(%89, newshape=[2, 16, 6]) /* ty=Tensor[(2, 16, 6), float32] */;
  %91 = @func_1272(%90) /* ty=(Tensor[(2, 16, 6), float32],) */;
  %92 = %91.0;
  %93 = cast(%92, dtype="uint8") /* ty=Tensor[(2, 16, 6), uint8] */;
  %94 = shape_of(%var_2373, dtype="int32") /* ty=Tensor[(2), int32] */;
  %95 = cast(%var_2373, dtype="uint8") /* ty=Tensor[(8, 24), uint8] */;
  %96 = dyn.reshape(%93, %94, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %97 = %83.0;
  %98 = %86.3;
  %99 = atanh(%88) /* ty=Tensor[(2, 2, 9), float32] */;
  %100 = minimum(%95, %96) /* ty=Tensor[(8, 24), uint8] */;
  (%97, %98, %var_2367, %99, %100)
}

def @func_9028(%var_8960: Tensor[(256), int64], %var_9013: Tensor[(12, 60), uint16]) -> (Tensor[(256), int64], Tensor[(256), uint8], Tensor[(5, 6, 13), int32], Tensor[(256), int64], Tensor[(2, 2, 9), bool], Tensor[(12, 4, 15), uint16], Tensor[(12, 60), uint16], Tensor[(256), float64]) {
  %101 = @func_8921() /* ty=(Tensor[(256), int64], Tensor[(256), int64]) */;
  %102 = @func_5288() /* ty=(Tensor[(256), int64],) */;
  %103 = %102.0;
  %104 = cast(%var_8960, dtype="uint8") /* ty=Tensor[(256), uint8] */;
  %105 = shape_of(%103, dtype="int32") /* ty=Tensor[(1), int32] */;
  %106 = cast(%103, dtype="uint8") /* ty=Tensor[(256), uint8] */;
  %107 = dyn.reshape(%104, %105, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %108 = @func_6734() /* ty=(Tensor[(720), uint16], uint16, Tensor[(5, 6, 13), float64], Tensor[(9, 15, 7), bool], Tensor[(1, 3, 12), bool], float32, Tensor[(3, 4, 15), int32], Tensor[(180), int32]) */;
  %109 = %108.2;
  %110 = cast(meta[relay.Constant][5] /* ty=Tensor[(5, 6, 13), float64] */, dtype="int32") /* ty=Tensor[(5, 6, 13), int32] */;
  %111 = shape_of(%109, dtype="int32") /* ty=Tensor[(3), int32] */;
  %112 = cast(%109, dtype="int32") /* ty=Tensor[(5, 6, 13), int32] */;
  %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %114 = @func_6314() /* ty=(Tensor[(2, 2, 9), bool],) */;
  %115 = cast(%var_9013, dtype="uint16") /* ty=Tensor[(12, 60), uint16] */;
  %116 = reshape(%115, newshape=[12, 4, 15]) /* ty=Tensor[(12, 4, 15), uint16] */;
  %117 = cast(%var_8960, dtype="float64") /* ty=Tensor[(256), float64] */;
  %118 = %101.1;
  %119 = bitwise_or(%106, %107) /* ty=Tensor[(256), uint8] */;
  %120 = bitwise_and(%112, %113) /* ty=Tensor[(5, 6, 13), int32] */;
  %121 = @func_3897() /* ty=Tensor[(256), int64] */;
  %122 = %114.0;
  %123 = @func_836(%116) /* ty=Tensor[(12, 4, 15), uint16] */;
  %124 = erf(%117) /* ty=Tensor[(256), float64] */;
  (%118, %119, %120, %121, %122, %123, %var_9013, %124)
}

def @func_1274(%var_1273: Tensor[(2, 16, 6), float32]) -> (Tensor[(2, 16, 6), float32],) {
  %127 = fn (%var_1268: Tensor[(2, 16, 6), float32]) -> (Tensor[(2, 16, 6), float32],) {
    %125 = cast(%var_1268, dtype="float32") /* ty=Tensor[(2, 16, 6), float32] */;
    %126 = sigmoid(%125) /* ty=Tensor[(2, 16, 6), float32] */;
    (%126,)
  };
  %127(%var_1273) /* ty=(Tensor[(2, 16, 6), float32],) */
}

def @func_5359() -> (Tensor[(256), int64], Tensor[(256), int64], Tensor[(256), bool]) {
  @func_5357() /* ty=(Tensor[(256), int64], Tensor[(256), int64], Tensor[(256), bool]) */
}

def @func_5290() -> (Tensor[(256), int64],) {
  @func_5288() /* ty=(Tensor[(256), int64],) */
}

def @func_9463() -> (Tensor[(2, 2, 9), bool], float32) {
  %128 = @func_4136() /* ty=(Tensor[(2, 2, 9), bool], Tensor[(2, 2, 9), bool], float32, float32) */;
  %129 = @func_5138() /* ty=(float32, float32) */;
  %130 = %128.0;
  %131 = %129.0;
  (%130, %131)
}

def @func_1975() -> (float32, Tensor[(2, 2, 9), bool]) {
  %135 = fn () -> (float32, Tensor[(2, 2, 9), bool]) {
    %132 = @func_1957() /* ty=(float32, Tensor[(256), int64]) */;
    %133 = %132.0;
    %134 = @func_1903() /* ty=Tensor[(2, 2, 9), bool] */;
    (%133, %134)
  };
  %135() /* ty=(float32, Tensor[(2, 2, 9), bool]) */
}

def @func_8859(%var_8854: uint8, %var_8855: Tensor[(10, 7, 6), uint8]) -> Tensor[(10, 7, 6), uint8] {
  %136 = cast(%var_8854, dtype="uint8") /* ty=uint8 */;
  %137 = cast(%var_8855, dtype="uint8") /* ty=Tensor[(10, 7, 6), uint8] */;
  subtract(%136, %137) /* ty=Tensor[(10, 7, 6), uint8] */
}

def @func_1988(%var_1987: Tensor[(192), float32]) -> (Tensor[(4, 8, 8), int64], Tensor[(2, 16, 6), float32], Tensor[(192), float32]) {
  %144 = fn (%var_1983: Tensor[(192), float32]) -> (Tensor[(4, 8, 8), int64], Tensor[(2, 16, 6), float32], Tensor[(192), float32]) {
    %138 = @func_1819() /* ty=(Tensor[(2, 2, 9), bool], Tensor[(4, 8, 8), int64], Tensor[(256), int64], Tensor[(1, 3, 12), bool]) */;
    %139 = cast(%var_1983, dtype="float32") /* ty=Tensor[(192), float32] */;
    %140 = reshape(%139, newshape=[2, 16, 6]) /* ty=Tensor[(2, 16, 6), float32] */;
    %141 = @func_1272(%140) /* ty=(Tensor[(2, 16, 6), float32],) */;
    %142 = %138.1;
    %143 = %141.0;
    (%142, %143, %var_1983)
  };
  %144(%var_1987) /* ty=(Tensor[(4, 8, 8), int64], Tensor[(2, 16, 6), float32], Tensor[(192), float32]) */
}

def @func_7117(%var_7105: Tensor[(3, 1, 11), float32], %var_7109: Tensor[(252), bool]) -> (Tensor[(3, 1, 11), float32], Tensor[(252), bool], Tensor[(252), bool]) {
  %145 = cast(%var_7105, dtype="float32") /* ty=Tensor[(3, 1, 11), float32] */;
  %146 = cast(%var_7109, dtype="bool") /* ty=Tensor[(252), bool] */;
  %147 = reshape(%146, newshape=[252]) /* ty=Tensor[(252), bool] */;
  %148 = @func_5854(%147) /* ty=(Tensor[(2, 2, 9), bool], Tensor[(528), float32], Tensor[(252), bool], Tensor[(264, 2), float32], Tensor[(2, 2, 9), bool]) */;
  %149 = sqrt(%145) /* ty=Tensor[(3, 1, 11), float32] */;
  %150 = %148.2;
  (%149, %150, %var_7109)
}

def @func_9806() -> (float32, float32) {
  @func_9804() /* ty=(float32, float32) */
}

def @func_9697(%var_9696: int32) -> (Tensor[(256), int64], Tensor[(2, 2, 9), bool], Tensor[(7, 7, 2), int32], int32, Tensor[(98), int32], Tensor[(2, 2, 9), bool], Tensor[(7, 7, 2), int32], Tensor[(4, 8, 8), int64]) {
  %175 = fn (%var_9640: int32) -> (Tensor[(256), int64], Tensor[(2, 2, 9), bool], Tensor[(7, 7, 2), int32], int32, Tensor[(98), int32], Tensor[(2, 2, 9), bool], Tensor[(7, 7, 2), int32], Tensor[(4, 8, 8), int64]) {
    %151 = @func_7590() /* ty=(Tensor[(256), int64], Tensor[(256), int64]) */;
    %152 = @func_4204() /* ty=(Tensor[(2, 2, 9), bool],) */;
    %153 = cast(%var_9640, dtype="int32") /* ty=int32 */;
    %154 = cast(meta[relay.Constant][6] /* ty=Tensor[(98), int32] */, dtype="int32") /* ty=Tensor[(98), int32] */;
    %155 = reshape(%153, newshape=[]) /* ty=int32 */;
    %156 = reshape(%154, newshape=[7, 7, 2]) /* ty=Tensor[(7, 7, 2), int32] */;
    %157 = @func_7195(%155, %156) /* ty=(Tensor[(7, 7, 2), int32], Tensor[(7, 7, 2), float32]) */;
    %158 = @func_2654() /* ty=(Tensor[(2, 2, 9), bool],) */;
    %159 = cast(%var_9640, dtype="int32") /* ty=int32 */;
    %160 = cast(meta[relay.Constant][6] /* ty=Tensor[(98), int32] */, dtype="int32") /* ty=Tensor[(98), int32] */;
    %161 = reshape(%159, newshape=[]) /* ty=int32 */;
    %162 = reshape(%160, newshape=[7, 7, 2]) /* ty=Tensor[(7, 7, 2), int32] */;
    %163 = @func_7195(%161, %162) /* ty=(Tensor[(7, 7, 2), int32], Tensor[(7, 7, 2), float32]) */;
    %164 = %151.1;
    %165 = cast(%164, dtype="int64") /* ty=Tensor[(256), int64] */;
    %166 = cast(%164, dtype="int64") /* ty=Tensor[(256), int64] */;
    %167 = reshape(%165, newshape=[4, 8, 8]) /* ty=Tensor[(4, 8, 8), int64] */;
    %168 = reshape(%166, newshape=[4, 8, 8]) /* ty=Tensor[(4, 8, 8), int64] */;
    %169 = @func_1243(%167, %168) /* ty=(Tensor[(4, 8, 8), int64],) */;
    %170 = %152.0;
    %171 = %157.0;
    %172 = %158.0;
    %173 = %163.0;
    %174 = %169.0;
    (%164, %170, %171, %var_9640, meta[relay.Constant][6] /* ty=Tensor[(98), int32] */, %172, %173, %174)
  };
  %175(%var_9696) /* ty=(Tensor[(256), int64], Tensor[(2, 2, 9), bool], Tensor[(7, 7, 2), int32], int32, Tensor[(98), int32], Tensor[(2, 2, 9), bool], Tensor[(7, 7, 2), int32], Tensor[(4, 8, 8), int64]) */
}

def @func_8586() -> bool {
  %177 = fn () -> bool {
    %176 = @func_5639() /* ty=(bool,) */;
    %176.0
  };
  %177() /* ty=bool */
}

def @func_9856() -> Tensor[(2, 2, 9), bool] {
  @func_9854() /* ty=Tensor[(2, 2, 9), bool] */
}

def @func_7044(%var_7001: Tensor[(16, 4, 13), uint16], %var_7002: Tensor[(16, 4, 13), uint16]) -> (Tensor[(16, 4, 13), uint16], Tensor[(16, 4, 13), float64], Tensor[(720), uint16]) {
  %178 = cast(%var_7002, dtype="uint16") /* ty=Tensor[(16, 4, 13), uint16] */;
  %179 = shape_of(%var_7001, dtype="int32") /* ty=Tensor[(3), int32] */;
  %180 = cast(%var_7001, dtype="uint16") /* ty=Tensor[(16, 4, 13), uint16] */;
  %181 = dyn.reshape(%178, %179, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %182 = cast(%var_7002, dtype="float64") /* ty=Tensor[(16, 4, 13), float64] */;
  %183 = right_shift(%180, %181) /* ty=Tensor[(16, 4, 13), uint16] */;
  %184 = sinh(%182) /* ty=Tensor[(16, 4, 13), float64] */;
  %185 = @func_2742() /* ty=Tensor[(720), uint16] */;
  (%183, %184, %185)
}

def @func_9032(%var_9030: Tensor[(256), int64], %var_9031: Tensor[(12, 60), uint16]) -> (Tensor[(256), int64], Tensor[(256), uint8], Tensor[(5, 6, 13), int32], Tensor[(256), int64], Tensor[(2, 2, 9), bool], Tensor[(12, 4, 15), uint16], Tensor[(12, 60), uint16], Tensor[(256), float64]) {
  @func_9028(%var_9030, %var_9031) /* ty=(Tensor[(256), int64], Tensor[(256), uint8], Tensor[(5, 6, 13), int32], Tensor[(256), int64], Tensor[(2, 2, 9), bool], Tensor[(12, 4, 15), uint16], Tensor[(12, 60), uint16], Tensor[(256), float64]) */
}

def @func_3506(%var_3496: Tensor[(528), float32]) -> (Tensor[(528), int64],) {
  %186 = @func_2295() /* ty=(Tensor[(528), float32],) */;
  %187 = %186.0;
  %188 = cast(%var_3496, dtype="int64") /* ty=Tensor[(528), int64] */;
  %189 = shape_of(%187, dtype="int32") /* ty=Tensor[(1), int32] */;
  %190 = cast(%187, dtype="int64") /* ty=Tensor[(528), int64] */;
  %191 = dyn.reshape(%188, %189, newshape=[]) /* ty=Tensor[(?), int64] */;
  %192 = bitwise_or(%190, %191) /* ty=Tensor[(528), int64] */;
  (%192,)
}

def @func_7079() -> Tensor[(2, 2, 9), uint64] {
  %193 = @func_2467() /* ty=(Tensor[(2, 2, 9), bool],) */;
  %194 = %193.0;
  %195 = cast(meta[relay.Constant][7] /* ty=Tensor[(2, 2, 9), bool] */, dtype="uint64") /* ty=Tensor[(2, 2, 9), uint64] */;
  %196 = shape_of(%194, dtype="int32") /* ty=Tensor[(3), int32] */;
  %197 = cast(%194, dtype="uint64") /* ty=Tensor[(2, 2, 9), uint64] */;
  %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  subtract(%197, %198) /* ty=Tensor[(2, 2, 9), uint64] */
}

def @func_5140() -> (float32, float32) {
  @func_5138() /* ty=(float32, float32) */
}

def @func_7373() -> (float32,) {
  %201 = fn () -> (float32,) {
    %199 = @func_4511() /* ty=(float32,) */;
    %200 = %199.0;
    (%200,)
  };
  %201() /* ty=(float32,) */
}

def @func_5602() -> (Tensor[(256), int64],) {
  %204 = fn () -> (Tensor[(256), int64],) {
    %202 = @func_5357() /* ty=(Tensor[(256), int64], Tensor[(256), int64], Tensor[(256), bool]) */;
    %203 = %202.0;
    (%203,)
  };
  %204() /* ty=(Tensor[(256), int64],) */
}

def @func_3109(%var_3107: Tensor[(8, 12, 5), float32], %var_3108: Tensor[(8, 12, 5), float32]) -> (Tensor[(8, 12, 5), bool], Tensor[(8, 12, 5), float32]) {
  @func_3105(%var_3107, %var_3108) /* ty=(Tensor[(8, 12, 5), bool], Tensor[(8, 12, 5), float32]) */
}

def @func_5702(%var_5701: Tensor[(3, 4, 15), int32]) -> (Tensor[(3, 4, 15), int32],) {
  %210 = fn (%var_5687: Tensor[(3, 4, 15), int32]) -> (Tensor[(3, 4, 15), int32],) {
    %205 = cast(meta[relay.Constant][8] /* ty=Tensor[(3, 4, 15), int32] */, dtype="int32") /* ty=Tensor[(3, 4, 15), int32] */;
    %206 = shape_of(%var_5687, dtype="int32") /* ty=Tensor[(3), int32] */;
    %207 = cast(%var_5687, dtype="int32") /* ty=Tensor[(3, 4, 15), int32] */;
    %208 = dyn.reshape(%205, %206, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %209 = subtract(%207, %208) /* ty=Tensor[(3, 4, 15), int32] */;
    (%209,)
  };
  %210(%var_5701) /* ty=(Tensor[(3, 4, 15), int32],) */
}

def @func_2630() -> (Tensor[(2, 2, 9), bool],) {
  %211 = @func_1903() /* ty=Tensor[(2, 2, 9), bool] */;
  (%211,)
}

def @func_7805() -> (Tensor[(256), int64],) {
  %212 = @func_6995() /* ty=(Tensor[(528), float32], Tensor[(256), int64], Tensor[(256), int64], Tensor[(256), int16]) */;
  %213 = %212.1;
  (%213,)
}

def @func_4205() -> (Tensor[(2, 2, 9), bool],) {
  %216 = fn () -> (Tensor[(2, 2, 9), bool],) {
    %214 = @func_2467() /* ty=(Tensor[(2, 2, 9), bool],) */;
    %215 = %214.0;
    (%215,)
  };
  %216() /* ty=(Tensor[(2, 2, 9), bool],) */
}

def @func_10077(%var_10069: Tensor[(252, 1), bool]) -> (Tensor[(256), int64], Tensor[(528), int32], Tensor[(252, 1), bool], Tensor[(1, 528), float32], Tensor[(1, 3, 12), bool]) {
  %217 = cast(%var_10069, dtype="bool") /* ty=Tensor[(252, 1), bool] */;
  %218 = cast(%var_10069, dtype="bool") /* ty=Tensor[(252, 1), bool] */;
  %219 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 528), float32] */, dtype="float32") /* ty=Tensor[(1, 528), float32] */;
  %220 = reshape(%217, newshape=[7, 3, 12]) /* ty=Tensor[(7, 3, 12), bool] */;
  %221 = reshape(%218, newshape=[7, 3, 12]) /* ty=Tensor[(7, 3, 12), bool] */;
  %222 = reshape(%219, newshape=[528]) /* ty=Tensor[(528), float32] */;
  %223 = @func_2598(%220, %221, %222) /* ty=(Tensor[(7, 3, 12), bool], Tensor[(528), int32], Tensor[(528), float32]) */;
  %224 = @func_2978() /* ty=(Tensor[(1, 3, 12), bool], Tensor[(1, 3, 12), bool], bool) */;
  %225 = @func_2026() /* ty=Tensor[(256), int64] */;
  %226 = %223.1;
  %227 = %224.1;
  (%225, %226, %var_10069, meta[relay.Constant][9] /* ty=Tensor[(1, 528), float32] */, %227)
}

def @func_3361() -> (float32,) {
  %230 = fn () -> (float32,) {
    %228 = @func_1895() /* ty=(float32,) */;
    %229 = %228.0;
    (%229,)
  };
  %230() /* ty=(float32,) */
}

def @func_4823(%var_4821: Tensor[(3, 8, 13), float64], %var_4822: Tensor[(3, 8, 13), float64]) -> Tensor[(3, 8, 13), float64] {
  %240 = fn (%var_4796: Tensor[(3, 8, 13), float64], %var_4797: Tensor[(3, 8, 13), float64]) -> Tensor[(3, 8, 13), float64] {
    %231 = cast(%var_4797, dtype="float64") /* ty=Tensor[(3, 8, 13), float64] */;
    %232 = shape_of(%var_4796, dtype="int32") /* ty=Tensor[(3), int32] */;
    %233 = cast(%var_4796, dtype="float64") /* ty=Tensor[(3, 8, 13), float64] */;
    %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %235 = divide(%233, %234) /* ty=Tensor[(3, 8, 13), float64] */;
    %236 = cast(%var_4797, dtype="float64") /* ty=Tensor[(3, 8, 13), float64] */;
    %237 = shape_of(%235, dtype="int32") /* ty=Tensor[(3), int32] */;
    %238 = cast(%235, dtype="float64") /* ty=Tensor[(3, 8, 13), float64] */;
    %239 = dyn.reshape(%236, %237, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    power(%238, %239) /* ty=Tensor[(3, 8, 13), float64] */
  };
  %240(%var_4821, %var_4822) /* ty=Tensor[(3, 8, 13), float64] */
}

def @func_4701(%var_4699: Tensor[(256), int64]) -> Tensor[(256), float32] {
  @func_4698(%var_4699) /* ty=Tensor[(256), float32] */
}

def @func_8563(%var_8561: Tensor[(80), uint64]) -> (Tensor[(256), int64], Tensor[(3, 1, 2), float32], Tensor[(6), float32], Tensor[(10, 8), uint64], Tensor[(80), uint64]) {
  @func_8560(%var_8561) /* ty=(Tensor[(256), int64], Tensor[(3, 1, 2), float32], Tensor[(6), float32], Tensor[(10, 8), uint64], Tensor[(80), uint64]) */
}

def @func_5288() -> (Tensor[(256), int64],) {
  %241 = @func_3897() /* ty=Tensor[(256), int64] */;
  (%241,)
}

def @func_7787(%var_7783: Tensor[(63), int8], %var_7784: Tensor[(252), int8], %var_7785: float32, %var_7786: Tensor[(96), float32]) -> (Tensor[(2, 2, 9), bool], Tensor[(7, 9, 4), int8], Tensor[(63), int8], Tensor[(252), int8], Tensor[(8, 2, 6), float32], float32, Tensor[(96), float32], Tensor[(80), uint64]) {
  @func_7781(%var_7783, %var_7784, %var_7785, %var_7786) /* ty=(Tensor[(2, 2, 9), bool], Tensor[(7, 9, 4), int8], Tensor[(63), int8], Tensor[(252), int8], Tensor[(8, 2, 6), float32], float32, Tensor[(96), float32], Tensor[(80), uint64]) */
}

def @func_9494() -> (Tensor[(528), float32],) {
  @func_9492() /* ty=(Tensor[(528), float32],) */
}

def @func_3899() -> Tensor[(256), int64] {
  @func_3897() /* ty=Tensor[(256), int64] */
}

def @func_2700(%var_2697: Tensor[(80), uint64]) -> (Tensor[(2, 2, 9), bool], Tensor[(10, 8), uint64], Tensor[(80), uint64]) {
  %242 = @func_2544() /* ty=(Tensor[(2, 2, 9), bool],) */;
  %243 = cast(%var_2697, dtype="uint64") /* ty=Tensor[(80), uint64] */;
  %244 = reshape(%243, newshape=[10, 8]) /* ty=Tensor[(10, 8), uint64] */;
  %245 = @func_1091(%244) /* ty=(Tensor[(10, 8), uint64], Tensor[(9, 15, 7), bool], Tensor[(945), float64]) */;
  %246 = %242.0;
  %247 = %245.0;
  (%246, %247, %var_2697)
}

def @func_2239() -> Tensor[(256), int64] {
  %249 = fn () -> Tensor[(256), int64] {
    %248 = @func_1957() /* ty=(float32, Tensor[(256), int64]) */;
    %248.1
  };
  %249() /* ty=Tensor[(256), int64] */
}

def @func_4050() -> Tensor[(2, 2, 9), bool] {
  @func_4048() /* ty=Tensor[(2, 2, 9), bool] */
}

def @func_10252(%var_10250: Tensor[(16, 9, 4), float64], %var_10251: Tensor[(252), bool]) -> (Tensor[(252), bool], Tensor[(252), bool], Tensor[(16, 9, 4), bool]) {
  @func_10248(%var_10250, %var_10251) /* ty=(Tensor[(252), bool], Tensor[(252), bool], Tensor[(16, 9, 4), bool]) */
}

def @func_2061() -> (Tensor[(256), int64], Tensor[(12, 4, 15), uint16], Tensor[(720), uint16], Tensor[(528), float32]) {
  %257 = fn () -> (Tensor[(256), int64], Tensor[(12, 4, 15), uint16], Tensor[(720), uint16], Tensor[(528), float32]) {
    %250 = @func_1957() /* ty=(float32, Tensor[(256), int64]) */;
    %251 = cast(meta[relay.Constant][10] /* ty=Tensor[(720), uint16] */, dtype="uint16") /* ty=Tensor[(720), uint16] */;
    %252 = reshape(%251, newshape=[12, 4, 15]) /* ty=Tensor[(12, 4, 15), uint16] */;
    %253 = @func_1889() /* ty=(Tensor[(2, 2, 9), bool], float32, float32, Tensor[(528), float32]) */;
    %254 = %250.1;
    %255 = @func_836(%252) /* ty=Tensor[(12, 4, 15), uint16] */;
    %256 = %253.3;
    (%254, %255, meta[relay.Constant][10] /* ty=Tensor[(720), uint16] */, %256)
  };
  %257() /* ty=(Tensor[(256), int64], Tensor[(12, 4, 15), uint16], Tensor[(720), uint16], Tensor[(528), float32]) */
}

def @func_6225(%var_6216: Tensor[(12, 1, 2), float32]) -> Tensor[(12, 4, 2), float32] {
  %258 = cast(%var_6216, dtype="float32") /* ty=Tensor[(12, 1, 2), float32] */;
  %259 = cast(meta[relay.Constant][11] /* ty=Tensor[(12, 4, 2), float32] */, dtype="float32") /* ty=Tensor[(12, 4, 2), float32] */;
  divide(%258, %259) /* ty=Tensor[(12, 4, 2), float32] */
}

def @func_4513() -> (float32,) {
  @func_4511() /* ty=(float32,) */
}

def @func_836(%var_832: Tensor[(12, 4, 15), uint16]) -> Tensor[(12, 4, 15), uint16] {
  %260 = cast(meta[relay.Constant][12] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %261 = cast(%var_832, dtype="uint16") /* ty=Tensor[(12, 4, 15), uint16] */;
  bitwise_or(%260, %261) /* ty=Tensor[(12, 4, 15), uint16] */
}

def @func_9603() -> float32 {
  %263 = fn () -> float32 {
    %262 = @func_5411() /* ty=(float32,) */;
    %262.0
  };
  %263() /* ty=float32 */
}

def @func_10155() -> (float32, Tensor[(256), int64]) {
  %264 = @func_9804() /* ty=(float32, float32) */;
  %265 = @func_7671() /* ty=(Tensor[(256), int64],) */;
  %266 = %264.0;
  %267 = %265.0;
  (%266, %267)
}

def @func_4836() -> Tensor[(528), float32] {
  %269 = fn () -> Tensor[(528), float32] {
    %268 = @func_2060() /* ty=(Tensor[(256), int64], Tensor[(12, 4, 15), uint16], Tensor[(720), uint16], Tensor[(528), float32]) */;
    %268.3
  };
  %269() /* ty=Tensor[(528), float32] */
}

def @func_3472() -> float32 {
  @func_3470() /* ty=float32 */
}

def @func_10690(%var_10688: Tensor[(2, 7, 11), int64], %var_10689: Tensor[(2, 7, 11), int64]) -> Tensor[(2, 7, 11), int64] {
  @func_10686(%var_10688, %var_10689) /* ty=Tensor[(2, 7, 11), int64] */
}

def @func_3080() -> (Tensor[(2, 2, 9), bool], Tensor[(528), float32], float32, Tensor[(528), float32], float32) {
  %280 = fn () -> (Tensor[(2, 2, 9), bool], Tensor[(528), float32], float32, Tensor[(528), float32], float32) {
    %270 = @func_2544() /* ty=(Tensor[(2, 2, 9), bool],) */;
    %271 = cast(9.52277f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %272 = cast(meta[relay.Constant][13] /* ty=Tensor[(528), float32] */, dtype="float32") /* ty=Tensor[(528), float32] */;
    %273 = reshape(%271, newshape=[]) /* ty=float32 */;
    %274 = reshape(%272, newshape=[528]) /* ty=Tensor[(528), float32] */;
    %275 = @func_1039(%273, %274) /* ty=(Tensor[(2, 14, 2), float64], Tensor[(16, 3, 11), float32], float32, Tensor[(528), float32]) */;
    %276 = @func_2938() /* ty=(float32,) */;
    %277 = %270.0;
    %278 = %275.3;
    %279 = %276.0;
    (%277, %278, 9.52277f /* ty=float32 */, meta[relay.Constant][13] /* ty=Tensor[(528), float32] */, %279)
  };
  %280() /* ty=(Tensor[(2, 2, 9), bool], Tensor[(528), float32], float32, Tensor[(528), float32], float32) */
}

def @func_10569() -> (Tensor[(2, 2, 9), bool], Tensor[(945), uint32], Tensor[(720), uint16]) {
  %286 = fn () -> (Tensor[(2, 2, 9), bool], Tensor[(945), uint32], Tensor[(720), uint16]) {
    %281 = @func_5680() /* ty=(Tensor[(2, 2, 9), bool],) */;
    %282 = @func_7149() /* ty=(Tensor[(945), uint32],) */;
    %283 = %281.0;
    %284 = %282.0;
    %285 = @func_2742() /* ty=Tensor[(720), uint16] */;
    (%283, %284, %285)
  };
  %286() /* ty=(Tensor[(2, 2, 9), bool], Tensor[(945), uint32], Tensor[(720), uint16]) */
}

def @func_1352(%var_1350: Tensor[(1, 6, 12), int8], %var_1351: Tensor[(8, 6, 12), int8]) -> (Tensor[(8, 6, 12), int8], Tensor[(1, 3, 12), bool], Tensor[(5, 189), float64]) {
  @func_1348(%var_1350, %var_1351) /* ty=(Tensor[(8, 6, 12), int8], Tensor[(1, 3, 12), bool], Tensor[(5, 189), float64]) */
}

def @func_5640() -> (bool,) {
  %289 = fn () -> (bool,) {
    %287 = @func_5508() /* ty=(Tensor[(256), int64], bool, Tensor[(9, 15, 7), bool], Tensor[(80), uint64]) */;
    %288 = %287.1;
    (%288,)
  };
  %289() /* ty=(bool,) */
}

def @func_5138() -> (float32, float32) {
  %290 = @func_4511() /* ty=(float32,) */;
  %291 = @func_4511() /* ty=(float32,) */;
  %292 = %290.0;
  %293 = %291.0;
  (%292, %293)
}

def @func_7972() -> Tensor[(720), uint16] {
  %295 = fn () -> Tensor[(720), uint16] {
    %294 = @func_5080() /* ty=(Tensor[(720), uint16],) */;
    %294.0
  };
  %295() /* ty=Tensor[(720), uint16] */
}

def @func_10004() -> (Tensor[(2, 2, 9), float32],) {
  %296 = @func_7326() /* ty=(Tensor[(2, 2, 9), bool],) */;
  %297 = %296.0;
  %298 = cast(%297, dtype="float32") /* ty=Tensor[(2, 2, 9), float32] */;
  %299 = sqrt(%298) /* ty=Tensor[(2, 2, 9), float32] */;
  (%299,)
}

def @func_4285() -> (Tensor[(80), uint64],) {
  @func_4283() /* ty=(Tensor[(80), uint64],) */
}

def @func_9392(%var_9390: Tensor[(6, 1), float32]) -> (Tensor[(256), int64], Tensor[(3, 1, 2), float32], Tensor[(6, 1), float32]) {
  @func_9389(%var_9390) /* ty=(Tensor[(256), int64], Tensor[(3, 1, 2), float32], Tensor[(6, 1), float32]) */
}

def @func_2131(%var_2130: Tensor[(2, 2, 9), bool]) -> (Tensor[(2, 2, 9), bool], Tensor[(1, 3, 12), bool]) {
  %313 = fn (%var_2109: Tensor[(2, 2, 9), bool]) -> (Tensor[(2, 2, 9), bool], Tensor[(1, 3, 12), bool]) {
    %300 = @func_1637() /* ty=Tensor[(2, 2, 9), bool] */;
    %301 = cast(%var_2109, dtype="float32") /* ty=Tensor[(2, 2, 9), float32] */;
    %302 = shape_of(%300, dtype="int32") /* ty=Tensor[(3), int32] */;
    %303 = cast(%300, dtype="float32") /* ty=Tensor[(2, 2, 9), float32] */;
    %304 = dyn.reshape(%301, %302, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %305 = floor_divide(%303, %304) /* ty=Tensor[(2, 2, 9), float32] */;
    %306 = cast(%305, dtype="bool") /* ty=Tensor[(2, 2, 9), bool] */;
    %307 = shape_of(%300, dtype="int32") /* ty=Tensor[(3), int32] */;
    %308 = cast(%300, dtype="bool") /* ty=Tensor[(2, 2, 9), bool] */;
    %309 = dyn.reshape(%306, %307, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %310 = @func_1819() /* ty=(Tensor[(2, 2, 9), bool], Tensor[(4, 8, 8), int64], Tensor[(256), int64], Tensor[(1, 3, 12), bool]) */;
    %311 = less(%308, %309) /* ty=Tensor[(2, 2, 9), bool] */;
    %312 = %310.3;
    (%311, %312)
  };
  %313(%var_2130) /* ty=(Tensor[(2, 2, 9), bool], Tensor[(1, 3, 12), bool]) */
}

def @func_10334(%var_10333: Tensor[(252), bool]) -> (Tensor[(945), uint32], Tensor[(252), bool], Tensor[(1, 576), float64], Tensor[(252), bool], Tensor[(252), bool]) {
  %327 = fn (%var_10306: Tensor[(252), bool]) -> (Tensor[(945), uint32], Tensor[(252), bool], Tensor[(1, 576), float64], Tensor[(252), bool], Tensor[(252), bool]) {
    %314 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 576), float64] */, dtype="float64") /* ty=Tensor[(1, 576), float64] */;
    %315 = cast(%var_10306, dtype="bool") /* ty=Tensor[(252), bool] */;
    %316 = reshape(%314, newshape=[16, 9, 4]) /* ty=Tensor[(16, 9, 4), float64] */;
    %317 = reshape(%315, newshape=[252]) /* ty=Tensor[(252), bool] */;
    %318 = @func_10248(%316, %317) /* ty=(Tensor[(252), bool], Tensor[(252), bool], Tensor[(16, 9, 4), bool]) */;
    %319 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 576), float64] */, dtype="float64") /* ty=Tensor[(1, 576), float64] */;
    %320 = %318.1;
    %321 = cast(%320, dtype="bool") /* ty=Tensor[(252), bool] */;
    %322 = reshape(%319, newshape=[16, 9, 4]) /* ty=Tensor[(16, 9, 4), float64] */;
    %323 = reshape(%321, newshape=[252]) /* ty=Tensor[(252), bool] */;
    %324 = @func_10248(%322, %323) /* ty=(Tensor[(252), bool], Tensor[(252), bool], Tensor[(16, 9, 4), bool]) */;
    %325 = @func_5044() /* ty=Tensor[(945), uint32] */;
    %326 = %324.1;
    (%325, %320, meta[relay.Constant][14] /* ty=Tensor[(1, 576), float64] */, %var_10306, %326)
  };
  %327(%var_10333) /* ty=(Tensor[(945), uint32], Tensor[(252), bool], Tensor[(1, 576), float64], Tensor[(252), bool], Tensor[(252), bool]) */
}

def @func_5412() -> (float32,) {
  %330 = fn () -> (float32,) {
    %328 = @func_3079() /* ty=(Tensor[(2, 2, 9), bool], Tensor[(528), float32], float32, Tensor[(528), float32], float32) */;
    %329 = %328.4;
    (%329,)
  };
  %330() /* ty=(float32,) */
}

def @func_10628() -> (Tensor[(2, 2, 9), bool], float32) {
  %334 = fn () -> (Tensor[(2, 2, 9), bool], float32) {
    %331 = @func_5680() /* ty=(Tensor[(2, 2, 9), bool],) */;
    %332 = %331.0;
    %333 = @func_3470() /* ty=float32 */;
    (%332, %333)
  };
  %334() /* ty=(Tensor[(2, 2, 9), bool], float32) */
}

def @func_1550(%var_1529: Tensor[(192), float32]) -> (Tensor[(11, 4, 12), bool], Tensor[(11, 4, 12), float32], Tensor[(11, 4, 12), uint8], Tensor[(2, 16, 6), bool], Tensor[(2, 16, 6), float32]) {
  %335 = cast(meta[relay.Constant][16] /* ty=Tensor[(11, 4, 12), uint8] */, dtype="bool") /* ty=Tensor[(11, 4, 12), bool] */;
  %336 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(11, 4, 12), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %337 = cast(meta[relay.Constant][15] /* ty=Tensor[(11, 4, 12), uint8] */, dtype="bool") /* ty=Tensor[(11, 4, 12), bool] */;
  %338 = dyn.reshape(%335, %336, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %339 = cast(meta[relay.Constant][16] /* ty=Tensor[(11, 4, 12), uint8] */, dtype="float32") /* ty=Tensor[(11, 4, 12), float32] */;
  %340 = cast(meta[relay.Constant][15] /* ty=Tensor[(11, 4, 12), uint8] */, dtype="float32") /* ty=Tensor[(11, 4, 12), float32] */;
  %341 = asin(%340) /* ty=Tensor[(11, 4, 12), float32] */;
  %342 = cast(%341, dtype="uint8") /* ty=Tensor[(11, 4, 12), uint8] */;
  %343 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(11, 4, 12), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %344 = cast(meta[relay.Constant][16] /* ty=Tensor[(11, 4, 12), uint8] */, dtype="uint8") /* ty=Tensor[(11, 4, 12), uint8] */;
  %345 = dyn.reshape(%342, %343, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %346 = cast(%var_1529, dtype="float32") /* ty=Tensor[(192), float32] */;
  %347 = reshape(%346, newshape=[2, 16, 6]) /* ty=Tensor[(2, 16, 6), float32] */;
  %348 = @func_1272(%347) /* ty=(Tensor[(2, 16, 6), float32],) */;
  %349 = %348.0;
  %350 = cast(%var_1529, dtype="bool") /* ty=Tensor[(192), bool] */;
  %351 = shape_of(%349, dtype="int32") /* ty=Tensor[(3), int32] */;
  %352 = cast(%349, dtype="bool") /* ty=Tensor[(2, 16, 6), bool] */;
  %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %354 = cast(%var_1529, dtype="float32") /* ty=Tensor[(192), float32] */;
  %355 = reshape(%354, newshape=[2, 16, 6]) /* ty=Tensor[(2, 16, 6), float32] */;
  %356 = @func_1272(%355) /* ty=(Tensor[(2, 16, 6), float32],) */;
  %357 = not_equal(%337, %338) /* ty=Tensor[(11, 4, 12), bool] */;
  %358 = atan(%339) /* ty=Tensor[(11, 4, 12), float32] */;
  %359 = logical_xor(%344, %345) /* ty=Tensor[(11, 4, 12), uint8] */;
  %360 = not_equal(%352, %353) /* ty=Tensor[(2, 16, 6), bool] */;
  %361 = %356.0;
  (%357, %358, %359, %360, %361)
}

def @func_7590() -> (Tensor[(256), int64], Tensor[(256), int64]) {
  %362 = @func_4078() /* ty=(Tensor[(256), int64],) */;
  %363 = %362.0;
  %364 = @func_2026() /* ty=Tensor[(256), int64] */;
  (%363, %364)
}

def @func_2743() -> Tensor[(720), uint16] {
  %366 = fn () -> Tensor[(720), uint16] {
    %365 = @func_2060() /* ty=(Tensor[(256), int64], Tensor[(12, 4, 15), uint16], Tensor[(720), uint16], Tensor[(528), float32]) */;
    %365.2
  };
  %366() /* ty=Tensor[(720), uint16] */
}

def @func_6922(%var_6921: Tensor[(5, 189), float64]) -> (Tensor[(5, 15, 8), uint32], Tensor[(5, 15, 8), uint32], Tensor[(9, 15, 7), bool], Tensor[(5, 189), float64], Tensor[(1, 3, 12), bool], Tensor[(720), uint16]) {
  %387 = fn (%var_6870: Tensor[(5, 189), float64]) -> (Tensor[(5, 15, 8), uint32], Tensor[(5, 15, 8), uint32], Tensor[(9, 15, 7), bool], Tensor[(5, 189), float64], Tensor[(1, 3, 12), bool], Tensor[(720), uint16]) {
    %367 = cast(meta[relay.Constant][18] /* ty=Tensor[(5, 15, 8), uint32] */, dtype="uint32") /* ty=Tensor[(5, 15, 8), uint32] */;
    %368 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(5, 15, 8), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %369 = cast(meta[relay.Constant][17] /* ty=Tensor[(5, 15, 8), uint32] */, dtype="uint32") /* ty=Tensor[(5, 15, 8), uint32] */;
    %370 = dyn.reshape(%367, %368, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %371 = cast(meta[relay.Constant][18] /* ty=Tensor[(5, 15, 8), uint32] */, dtype="uint32") /* ty=Tensor[(5, 15, 8), uint32] */;
    %372 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(5, 15, 8), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %373 = cast(meta[relay.Constant][17] /* ty=Tensor[(5, 15, 8), uint32] */, dtype="uint32") /* ty=Tensor[(5, 15, 8), uint32] */;
    %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %375 = cast(%var_6870, dtype="float64") /* ty=Tensor[(5, 189), float64] */;
    %376 = reshape(%375, newshape=[15, 63]) /* ty=Tensor[(15, 63), float64] */;
    %377 = @func_745(%376) /* ty=(Tensor[(16, 15, 10), uint32], Tensor[(9, 15, 7), bool], Tensor[(15, 63), float64], Tensor[(1, 3, 12), bool], Tensor[(36), bool]) */;
    %378 = %377.1;
    %379 = cast(%378, dtype="float64") /* ty=Tensor[(9, 15, 7), float64] */;
    %380 = reshape(%379, newshape=[15, 63]) /* ty=Tensor[(15, 63), float64] */;
    %381 = @func_745(%380) /* ty=(Tensor[(16, 15, 10), uint32], Tensor[(9, 15, 7), bool], Tensor[(15, 63), float64], Tensor[(1, 3, 12), bool], Tensor[(36), bool]) */;
    %382 = @func_2060() /* ty=(Tensor[(256), int64], Tensor[(12, 4, 15), uint16], Tensor[(720), uint16], Tensor[(528), float32]) */;
    %383 = add(%369, %370) /* ty=Tensor[(5, 15, 8), uint32] */;
    %384 = bitwise_or(%373, %374) /* ty=Tensor[(5, 15, 8), uint32] */;
    %385 = %381.3;
    %386 = %382.2;
    (%383, %384, %378, %var_6870, %385, %386)
  };
  %387(%var_6921) /* ty=(Tensor[(5, 15, 8), uint32], Tensor[(5, 15, 8), uint32], Tensor[(9, 15, 7), bool], Tensor[(5, 189), float64], Tensor[(1, 3, 12), bool], Tensor[(720), uint16]) */
}

def @func_5110(%var_5099: uint16) -> Tensor[(5, 6, 13), uint16] {
  %388 = cast(%var_5099, dtype="uint16") /* ty=uint16 */;
  %389 = cast(meta[relay.Constant][19] /* ty=Tensor[(5, 6, 13), uint16] */, dtype="uint16") /* ty=Tensor[(5, 6, 13), uint16] */;
  right_shift(%388, %389) /* ty=Tensor[(5, 6, 13), uint16] */
}

def @func_2254(%var_2246: float64, %var_2247: Tensor[(15, 13, 6), float64]) -> (Tensor[(15, 13, 6), float64],) {
  %390 = cast(%var_2246, dtype="float64") /* ty=float64 */;
  %391 = cast(%var_2247, dtype="float64") /* ty=Tensor[(15, 13, 6), float64] */;
  %392 = floor_mod(%390, %391) /* ty=Tensor[(15, 13, 6), float64] */;
  (%392,)
}

def @func_7563(%var_7561: Tensor[(11, 1, 3), float64], %var_7562: Tensor[(11, 15, 3), float64]) -> (Tensor[(11, 15, 3), float64], Tensor[(11, 1, 3), int64]) {
  @func_7559(%var_7561, %var_7562) /* ty=(Tensor[(11, 15, 3), float64], Tensor[(11, 1, 3), int64]) */
}

def @func_5544() -> (Tensor[(80), uint64], Tensor[(16, 3, 11), float32], float32, Tensor[(528), bool]) {
  %405 = fn () -> (Tensor[(80), uint64], Tensor[(16, 3, 11), float32], float32, Tensor[(528), bool]) {
    %393 = @func_4283() /* ty=(Tensor[(80), uint64],) */;
    %394 = cast(9.63641f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %395 = cast(meta[relay.Constant][20] /* ty=Tensor[(528), float32] */, dtype="float32") /* ty=Tensor[(528), float32] */;
    %396 = reshape(%394, newshape=[]) /* ty=float32 */;
    %397 = reshape(%395, newshape=[16, 3, 11]) /* ty=Tensor[(16, 3, 11), float32] */;
    %398 = @func_4136() /* ty=(Tensor[(2, 2, 9), bool], Tensor[(2, 2, 9), bool], float32, float32) */;
    %399 = cast(meta[relay.Constant][20] /* ty=Tensor[(528), float32] */, dtype="bool") /* ty=Tensor[(528), bool] */;
    %400 = cast(9.63641f /* ty=float32 */, dtype="bool") /* ty=bool */;
    %401 = %393.0;
    %402 = @func_677(%396, %397) /* ty=Tensor[(16, 3, 11), float32] */;
    %403 = %398.2;
    %404 = equal(%399, %400) /* ty=Tensor[(528), bool] */;
    (%401, %402, %403, %404)
  };
  %405() /* ty=(Tensor[(80), uint64], Tensor[(16, 3, 11), float32], float32, Tensor[(528), bool]) */
}

def @func_6657(%var_6656: Tensor[(3, 1, 2), float32]) -> (Tensor[(3, 1, 2), float32],) {
  %408 = fn (%var_6643: Tensor[(3, 1, 2), float32]) -> (Tensor[(3, 1, 2), float32],) {
    %406 = cast(%var_6643, dtype="float32") /* ty=Tensor[(3, 1, 2), float32] */;
    %407 = asin(%406) /* ty=Tensor[(3, 1, 2), float32] */;
    (%407,)
  };
  %408(%var_6656) /* ty=(Tensor[(3, 1, 2), float32],) */
}

def @func_6735() -> (Tensor[(720), uint16], uint16, Tensor[(5, 6, 13), float64], Tensor[(9, 15, 7), bool], Tensor[(1, 3, 12), bool], float32, Tensor[(3, 4, 15), int32], Tensor[(180), int32]) {
  %426 = fn () -> (Tensor[(720), uint16], uint16, Tensor[(5, 6, 13), float64], Tensor[(9, 15, 7), bool], Tensor[(1, 3, 12), bool], float32, Tensor[(3, 4, 15), int32], Tensor[(180), int32]) {
    %409 = @func_5080() /* ty=(Tensor[(720), uint16],) */;
    %410 = cast(meta[relay.Constant][21] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %411 = reshape(%410, newshape=[]) /* ty=uint16 */;
    %412 = @func_5110(%411) /* ty=Tensor[(5, 6, 13), uint16] */;
    %413 = cast(%412, dtype="float64") /* ty=Tensor[(5, 6, 13), float64] */;
    %414 = @func_5508() /* ty=(Tensor[(256), int64], bool, Tensor[(9, 15, 7), bool], Tensor[(80), uint64]) */;
    %415 = @func_2978() /* ty=(Tensor[(1, 3, 12), bool], Tensor[(1, 3, 12), bool], bool) */;
    %416 = @func_5411() /* ty=(float32,) */;
    %417 = cast(meta[relay.Constant][22] /* ty=Tensor[(180), int32] */, dtype="int32") /* ty=Tensor[(180), int32] */;
    %418 = reshape(%417, newshape=[3, 4, 15]) /* ty=Tensor[(3, 4, 15), int32] */;
    %419 = @func_5700(%418) /* ty=(Tensor[(3, 4, 15), int32],) */;
    %420 = %409.0;
    %421 = acos(%413) /* ty=Tensor[(5, 6, 13), float64] */;
    %422 = %414.2;
    %423 = %415.0;
    %424 = %416.0;
    %425 = %419.0;
    (%420, meta[relay.Constant][21] /* ty=uint16 */, %421, %422, %423, %424, %425, meta[relay.Constant][22] /* ty=Tensor[(180), int32] */)
  };
  %426() /* ty=(Tensor[(720), uint16], uint16, Tensor[(5, 6, 13), float64], Tensor[(9, 15, 7), bool], Tensor[(1, 3, 12), bool], float32, Tensor[(3, 4, 15), int32], Tensor[(180), int32]) */
}

def @func_2603(%var_2600: Tensor[(7, 3, 12), bool], %var_2601: Tensor[(7, 3, 12), bool], %var_2602: Tensor[(528), float32]) -> (Tensor[(7, 3, 12), bool], Tensor[(528), int32], Tensor[(528), float32]) {
  @func_2598(%var_2600, %var_2601, %var_2602) /* ty=(Tensor[(7, 3, 12), bool], Tensor[(528), int32], Tensor[(528), float32]) */
}

def @func_5113(%var_5111: uint16) -> Tensor[(5, 6, 13), uint16] {
  @func_5110(%var_5111) /* ty=Tensor[(5, 6, 13), uint16] */
}

def @func_7081() -> Tensor[(2, 2, 9), uint64] {
  @func_7079() /* ty=Tensor[(2, 2, 9), uint64] */
}

def @func_7781(%var_7760: Tensor[(63), int8], %var_7761: Tensor[(252), int8], %var_7765: float32, %var_7766: Tensor[(96), float32]) -> (Tensor[(2, 2, 9), bool], Tensor[(7, 9, 4), int8], Tensor[(63), int8], Tensor[(252), int8], Tensor[(8, 2, 6), float32], float32, Tensor[(96), float32], Tensor[(80), uint64]) {
  %427 = @func_6314() /* ty=(Tensor[(2, 2, 9), bool],) */;
  %428 = cast(%var_7760, dtype="int8") /* ty=Tensor[(63), int8] */;
  %429 = cast(%var_7761, dtype="int8") /* ty=Tensor[(252), int8] */;
  %430 = reshape(%428, newshape=[7, 9, 1]) /* ty=Tensor[(7, 9, 1), int8] */;
  %431 = reshape(%429, newshape=[7, 9, 4]) /* ty=Tensor[(7, 9, 4), int8] */;
  %432 = @func_6842(%430, %431) /* ty=(Tensor[(7, 9, 4), int8],) */;
  %433 = cast(%var_7765, dtype="float32") /* ty=float32 */;
  %434 = cast(%var_7766, dtype="float32") /* ty=Tensor[(96), float32] */;
  %435 = reshape(%433, newshape=[]) /* ty=float32 */;
  %436 = reshape(%434, newshape=[8, 2, 6]) /* ty=Tensor[(8, 2, 6), float32] */;
  %437 = @func_4283() /* ty=(Tensor[(80), uint64],) */;
  %438 = %427.0;
  %439 = %432.0;
  %440 = @func_2313(%435, %436) /* ty=Tensor[(8, 2, 6), float32] */;
  %441 = %437.0;
  (%438, %439, %var_7760, %var_7761, %440, %var_7765, %var_7766, %441)
}

def @func_6228(%var_6226: Tensor[(12, 1, 2), float32]) -> Tensor[(12, 4, 2), float32] {
  @func_6225(%var_6226) /* ty=Tensor[(12, 4, 2), float32] */
}

def @func_6811() -> (Tensor[(2, 2, 9), float32], float32) {
  @func_6809() /* ty=(Tensor[(2, 2, 9), float32], float32) */
}

def @func_1638() -> Tensor[(2, 2, 9), bool] {
  %446 = fn () -> Tensor[(2, 2, 9), bool] {
    %442 = cast(meta[relay.Constant][24] /* ty=Tensor[(2, 2, 9), bool] */, dtype="bool") /* ty=Tensor[(2, 2, 9), bool] */;
    %443 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(2, 2, 9), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %444 = cast(meta[relay.Constant][23] /* ty=Tensor[(2, 2, 9), bool] */, dtype="bool") /* ty=Tensor[(2, 2, 9), bool] */;
    %445 = dyn.reshape(%442, %443, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_or(%444, %445) /* ty=Tensor[(2, 2, 9), bool] */
  };
  %446() /* ty=Tensor[(2, 2, 9), bool] */
}

def @func_2861() -> (Tensor[(256), int64], Tensor[(720), uint16], Tensor[(12, 4, 15), uint32]) {
  @func_2859() /* ty=(Tensor[(256), int64], Tensor[(720), uint16], Tensor[(12, 4, 15), uint32]) */
}

def @func_6995() -> (Tensor[(528), float32], Tensor[(256), int64], Tensor[(256), int64], Tensor[(256), int16]) {
  %447 = @func_4981() /* ty=(Tensor[(2, 2, 9), bool], Tensor[(256), int64], Tensor[(256), int64], float32) */;
  %448 = @func_3589() /* ty=(Tensor[(256), int64],) */;
  %449 = %447.2;
  %450 = cast(%449, dtype="float64") /* ty=Tensor[(256), float64] */;
  %451 = reshape(%450, newshape=[256]) /* ty=Tensor[(256), float64] */;
  %452 = @func_4907(%451) /* ty=(Tensor[(256), int16],) */;
  %453 = @func_4835() /* ty=Tensor[(528), float32] */;
  %454 = %448.0;
  %455 = %452.0;
  (%453, %449, %454, %455)
}

def @func_8034(%var_8032: Tensor[(9, 7, 2), int8], %var_8033: Tensor[(9, 7, 2), int8]) -> (Tensor[(9, 7, 2), int8], Tensor[(9, 7, 2), float32], Tensor[(256), int64], Tensor[(14, 7, 5), uint32], Tensor[(490), uint32], Tensor[(2, 2, 9), bool], Tensor[(9, 7, 2), float64]) {
  @func_8030(%var_8032, %var_8033) /* ty=(Tensor[(9, 7, 2), int8], Tensor[(9, 7, 2), float32], Tensor[(256), int64], Tensor[(14, 7, 5), uint32], Tensor[(490), uint32], Tensor[(2, 2, 9), bool], Tensor[(9, 7, 2), float64]) */
}

def @func_4362() -> Tensor[(2, 2, 9), bool] {
  @func_4360() /* ty=Tensor[(2, 2, 9), bool] */
}

def @func_7366() -> (Tensor[(528), float64],) {
  %460 = fn () -> (Tensor[(528), float64],) {
    %456 = @func_3079() /* ty=(Tensor[(2, 2, 9), bool], Tensor[(528), float32], float32, Tensor[(528), float32], float32) */;
    %457 = %456.3;
    %458 = cast(%457, dtype="float64") /* ty=Tensor[(528), float64] */;
    %459 = asin(%458) /* ty=Tensor[(528), float64] */;
    (%459,)
  };
  %460() /* ty=(Tensor[(528), float64],) */
}

def @func_7149() -> (Tensor[(945), uint32],) {
  %461 = @func_5044() /* ty=Tensor[(945), uint32] */;
  (%461,)
}

def @func_8374() -> (Tensor[(80), uint64], Tensor[(528), bool], Tensor[(10, 8), uint64]) {
  @func_8372() /* ty=(Tensor[(80), uint64], Tensor[(528), bool], Tensor[(10, 8), uint64]) */
}

def @func_9522() -> (float32,) {
  %462 = @func_9463() /* ty=(Tensor[(2, 2, 9), bool], float32) */;
  %463 = %462.1;
  (%463,)
}

def @func_1719(%var_1718: Tensor[(2, 2, 9), bool]) -> Tensor[(2, 2, 9), bool] {
  %469 = fn (%var_1682: Tensor[(2, 2, 9), bool]) -> Tensor[(2, 2, 9), bool] {
    %464 = @func_1637() /* ty=Tensor[(2, 2, 9), bool] */;
    %465 = cast(%var_1682, dtype="bool") /* ty=Tensor[(2, 2, 9), bool] */;
    %466 = shape_of(%464, dtype="int32") /* ty=Tensor[(3), int32] */;
    %467 = cast(%464, dtype="bool") /* ty=Tensor[(2, 2, 9), bool] */;
    %468 = dyn.reshape(%465, %466, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater_equal(%467, %468) /* ty=Tensor[(2, 2, 9), bool] */
  };
  %469(%var_1718) /* ty=Tensor[(2, 2, 9), bool] */
}

def @func_9760() -> (Tensor[(528), float32], Tensor[(9, 15, 7), bool], Tensor[(945), float64], Tensor[(256), int64]) {
  %470 = @func_9492() /* ty=(Tensor[(528), float32],) */;
  %471 = cast(meta[relay.Constant][25] /* ty=Tensor[(945), float64] */, dtype="float64") /* ty=Tensor[(945), float64] */;
  %472 = reshape(%471, newshape=[9, 15, 7]) /* ty=Tensor[(9, 15, 7), float64] */;
  %473 = @func_97(%472) /* ty=(Tensor[(9, 15, 7), bool],) */;
  %474 = %470.0;
  %475 = %473.0;
  %476 = @func_8137() /* ty=Tensor[(256), int64] */;
  (%474, %475, meta[relay.Constant][25] /* ty=Tensor[(945), float64] */, %476)
}

def @func_1889() -> (Tensor[(2, 2, 9), bool], float32, float32, Tensor[(528), float32]) {
  %477 = cast(-4.45017f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %478 = cast(meta[relay.Constant][26] /* ty=Tensor[(528), float32] */, dtype="float32") /* ty=Tensor[(528), float32] */;
  %479 = reshape(%477, newshape=[]) /* ty=float32 */;
  %480 = reshape(%478, newshape=[528]) /* ty=Tensor[(528), float32] */;
  %481 = @func_1039(%479, %480) /* ty=(Tensor[(2, 14, 2), float64], Tensor[(16, 3, 11), float32], float32, Tensor[(528), float32]) */;
  %482 = @func_1637() /* ty=Tensor[(2, 2, 9), bool] */;
  %483 = %481.2;
  (%482, %483, -4.45017f /* ty=float32 */, meta[relay.Constant][26] /* ty=Tensor[(528), float32] */)
}

def @func_2859() -> (Tensor[(256), int64], Tensor[(720), uint16], Tensor[(12, 4, 15), uint32]) {
  %484 = @func_2060() /* ty=(Tensor[(256), int64], Tensor[(12, 4, 15), uint16], Tensor[(720), uint16], Tensor[(528), float32]) */;
  %485 = cast(meta[relay.Constant][27] /* ty=Tensor[(720), uint16] */, dtype="uint16") /* ty=Tensor[(720), uint16] */;
  %486 = reshape(%485, newshape=[12, 4, 15]) /* ty=Tensor[(12, 4, 15), uint16] */;
  %487 = @func_836(%486) /* ty=Tensor[(12, 4, 15), uint16] */;
  %488 = cast(%487, dtype="float64") /* ty=Tensor[(12, 4, 15), float64] */;
  %489 = tan(%488) /* ty=Tensor[(12, 4, 15), float64] */;
  %490 = cast(%487, dtype="uint32") /* ty=Tensor[(12, 4, 15), uint32] */;
  %491 = shape_of(%489, dtype="int32") /* ty=Tensor[(3), int32] */;
  %492 = cast(%489, dtype="uint32") /* ty=Tensor[(12, 4, 15), uint32] */;
  %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %494 = %484.0;
  %495 = multiply(%492, %493) /* ty=Tensor[(12, 4, 15), uint32] */;
  (%494, meta[relay.Constant][27] /* ty=Tensor[(720), uint16] */, %495)
}

def @func_4907(%var_4901: Tensor[(256), float64]) -> (Tensor[(256), int16],) {
  %496 = @func_1957() /* ty=(float32, Tensor[(256), int64]) */;
  %497 = %496.1;
  %498 = cast(%497, dtype="float64") /* ty=Tensor[(256), float64] */;
  %499 = log10(%498) /* ty=Tensor[(256), float64] */;
  %500 = cast(%var_4901, dtype="int16") /* ty=Tensor[(256), int16] */;
  %501 = shape_of(%499, dtype="int32") /* ty=Tensor[(1), int32] */;
  %502 = cast(%499, dtype="int16") /* ty=Tensor[(256), int16] */;
  %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?), int16] */;
  %504 = minimum(%502, %503) /* ty=Tensor[(256), int16] */;
  (%504,)
}

def @func_4982() -> (Tensor[(2, 2, 9), bool], Tensor[(256), int64], Tensor[(256), int64], float32) {
  %511 = fn () -> (Tensor[(2, 2, 9), bool], Tensor[(256), int64], Tensor[(256), int64], float32) {
    %505 = @func_2467() /* ty=(Tensor[(2, 2, 9), bool],) */;
    %506 = @func_2811() /* ty=(float32,) */;
    %507 = %505.0;
    %508 = @func_2026() /* ty=Tensor[(256), int64] */;
    %509 = @func_2238() /* ty=Tensor[(256), int64] */;
    %510 = %506.0;
    (%507, %508, %509, %510)
  };
  %511() /* ty=(Tensor[(2, 2, 9), bool], Tensor[(256), int64], Tensor[(256), int64], float32) */
}

def @func_2895() -> float32 {
  %512 = @func_2811() /* ty=(float32,) */;
  %512.0
}

def @func_5681() -> (Tensor[(2, 2, 9), bool],) {
  %514 = fn () -> (Tensor[(2, 2, 9), bool],) {
    %513 = @func_1637() /* ty=Tensor[(2, 2, 9), bool] */;
    (%513,)
  };
  %514() /* ty=(Tensor[(2, 2, 9), bool],) */
}

def @func_3591() -> (Tensor[(256), int64],) {
  @func_3589() /* ty=(Tensor[(256), int64],) */
}

def @func_3920() -> (float32,) {
  @func_3918() /* ty=(float32,) */
}

def @func_1819() -> (Tensor[(2, 2, 9), bool], Tensor[(4, 8, 8), int64], Tensor[(256), int64], Tensor[(1, 3, 12), bool]) {
  %515 = cast(meta[relay.Constant][28] /* ty=Tensor[(256), int64] */, dtype="int64") /* ty=Tensor[(256), int64] */;
  %516 = cast(meta[relay.Constant][28] /* ty=Tensor[(256), int64] */, dtype="int64") /* ty=Tensor[(256), int64] */;
  %517 = reshape(%515, newshape=[4, 8, 8]) /* ty=Tensor[(4, 8, 8), int64] */;
  %518 = reshape(%516, newshape=[4, 8, 8]) /* ty=Tensor[(4, 8, 8), int64] */;
  %519 = @func_1243(%517, %518) /* ty=(Tensor[(4, 8, 8), int64],) */;
  %520 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %521 = @func_1637() /* ty=Tensor[(2, 2, 9), bool] */;
  %522 = cast(%521, dtype="bool") /* ty=Tensor[(2, 2, 9), bool] */;
  %523 = reshape(%520, newshape=[]) /* ty=bool */;
  %524 = reshape(%522, newshape=[1, 3, 12]) /* ty=Tensor[(1, 3, 12), bool] */;
  %525 = @func_110(%523, %524) /* ty=(Tensor[(1, 3, 12), bool],) */;
  %526 = %525.0;
  %527 = cast(%526, dtype="bool") /* ty=Tensor[(1, 3, 12), bool] */;
  %528 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %529 = %519.0;
  %530 = equal(%527, %528) /* ty=Tensor[(1, 3, 12), bool] */;
  (%521, %529, meta[relay.Constant][28] /* ty=Tensor[(256), int64] */, %530)
}

def @func_3509(%var_3507: Tensor[(528), float32]) -> (Tensor[(528), int64],) {
  @func_3506(%var_3507) /* ty=(Tensor[(528), int64],) */
}

def @func_1959() -> (float32, Tensor[(256), int64]) {
  @func_1957() /* ty=(float32, Tensor[(256), int64]) */
}

def @func_6059() -> (float32, Tensor[(256), int64]) {
  %535 = fn () -> (float32, Tensor[(256), int64]) {
    %531 = @func_2938() /* ty=(float32,) */;
    %532 = @func_5601() /* ty=(Tensor[(256), int64],) */;
    %533 = %531.0;
    %534 = %532.0;
    (%533, %534)
  };
  %535() /* ty=(float32, Tensor[(256), int64]) */
}

def @func_4360() -> Tensor[(2, 2, 9), bool] {
  %536 = @func_2544() /* ty=(Tensor[(2, 2, 9), bool],) */;
  %536.0
}

def @func_5509() -> (Tensor[(256), int64], bool, Tensor[(9, 15, 7), bool], Tensor[(80), uint64]) {
  %545 = fn () -> (Tensor[(256), int64], bool, Tensor[(9, 15, 7), bool], Tensor[(80), uint64]) {
    %537 = @func_2060() /* ty=(Tensor[(256), int64], Tensor[(12, 4, 15), uint16], Tensor[(720), uint16], Tensor[(528), float32]) */;
    %538 = @func_2978() /* ty=(Tensor[(1, 3, 12), bool], Tensor[(1, 3, 12), bool], bool) */;
    %539 = cast(meta[relay.Constant][29] /* ty=Tensor[(80), uint64] */, dtype="uint64") /* ty=Tensor[(80), uint64] */;
    %540 = reshape(%539, newshape=[10, 8]) /* ty=Tensor[(10, 8), uint64] */;
    %541 = @func_1091(%540) /* ty=(Tensor[(10, 8), uint64], Tensor[(9, 15, 7), bool], Tensor[(945), float64]) */;
    %542 = %537.0;
    %543 = %538.2;
    %544 = %541.1;
    (%542, %543, %544, meta[relay.Constant][29] /* ty=Tensor[(80), uint64] */)
  };
  %545() /* ty=(Tensor[(256), int64], bool, Tensor[(9, 15, 7), bool], Tensor[(80), uint64]) */
}

def @func_9538(%var_9537: Tensor[(8, 1, 13), float64]) -> (Tensor[(8, 1, 13), float64],) {
  %548 = fn (%var_9528: Tensor[(8, 1, 13), float64]) -> (Tensor[(8, 1, 13), float64],) {
    %546 = cast(%var_9528, dtype="float64") /* ty=Tensor[(8, 1, 13), float64] */;
    %547 = erf(%546) /* ty=Tensor[(8, 1, 13), float64] */;
    (%547,)
  };
  %548(%var_9537) /* ty=(Tensor[(8, 1, 13), float64],) */
}

def @func_1896() -> (float32,) {
  %551 = fn () -> (float32,) {
    %549 = @func_1889() /* ty=(Tensor[(2, 2, 9), bool], float32, float32, Tensor[(528), float32]) */;
    %550 = %549.1;
    (%550,)
  };
  %551() /* ty=(float32,) */
}

def @func_5958(%var_5913: float32, %var_5924: Tensor[(8, 2, 6), float32], %var_5941: Tensor[(196), float32]) -> (Tensor[(2, 2, 9), bool], float32, Tensor[(96), float32], Tensor[(2, 2, 9), bool], Tensor[(8, 2, 6), bool], bool, Tensor[(196), float32], Tensor[(2, 14, 7), float32]) {
  %552 = @func_2654() /* ty=(Tensor[(2, 2, 9), bool],) */;
  %553 = cast(%var_5913, dtype="float32") /* ty=float32 */;
  %554 = cast(meta[relay.Constant][30] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %555 = reshape(%553, newshape=[]) /* ty=float32 */;
  %556 = reshape(%554, newshape=[8, 2, 6]) /* ty=Tensor[(8, 2, 6), float32] */;
  %557 = @func_2313(%555, %556) /* ty=Tensor[(8, 2, 6), float32] */;
  %558 = cast(%557, dtype="float32") /* ty=Tensor[(8, 2, 6), float32] */;
  %559 = tan(%558) /* ty=Tensor[(8, 2, 6), float32] */;
  %560 = cast(%var_5924, dtype="bool") /* ty=Tensor[(8, 2, 6), bool] */;
  %561 = shape_of(%559, dtype="int32") /* ty=Tensor[(3), int32] */;
  %562 = cast(%559, dtype="bool") /* ty=Tensor[(8, 2, 6), bool] */;
  %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %564 = @func_5639() /* ty=(bool,) */;
  %565 = cast(%var_5941, dtype="float32") /* ty=Tensor[(196), float32] */;
  %566 = reshape(%565, newshape=[2, 14, 7]) /* ty=Tensor[(2, 14, 7), float32] */;
  %567 = @func_5428(%566) /* ty=Tensor[(2, 14, 7), float32] */;
  %568 = cast(%567, dtype="float32") /* ty=Tensor[(2, 14, 7), float32] */;
  %569 = @func_5378() /* ty=Tensor[(2, 2, 9), bool] */;
  %570 = %552.0;
  %571 = less(%562, %563) /* ty=Tensor[(8, 2, 6), bool] */;
  %572 = %564.0;
  %573 = tan(%568) /* ty=Tensor[(2, 14, 7), float32] */;
  (%569, %var_5913, meta[relay.Constant][30] /* ty=Tensor[(96), float32] */, %570, %571, %572, %var_5941, %573)
}

def @func_6845(%var_6843: Tensor[(7, 9, 1), int8], %var_6844: Tensor[(7, 9, 4), int8]) -> (Tensor[(7, 9, 4), int8],) {
  %577 = fn (%var_6833: Tensor[(7, 9, 1), int8], %var_6834: Tensor[(7, 9, 4), int8]) -> (Tensor[(7, 9, 4), int8],) {
    %574 = cast(%var_6833, dtype="int8") /* ty=Tensor[(7, 9, 1), int8] */;
    %575 = cast(%var_6834, dtype="int8") /* ty=Tensor[(7, 9, 4), int8] */;
    %576 = right_shift(%574, %575) /* ty=Tensor[(7, 9, 4), int8] */;
    (%576,)
  };
  %577(%var_6843, %var_6844) /* ty=(Tensor[(7, 9, 4), int8],) */
}

def @func_2897() -> float32 {
  @func_2895() /* ty=float32 */
}

def @func_9854() -> Tensor[(2, 2, 9), bool] {
  %578 = @func_6634() /* ty=(Tensor[(2, 2, 9), bool],) */;
  %578.0
}

def @func_1903() -> Tensor[(2, 2, 9), bool] {
  %579 = @func_1889() /* ty=(Tensor[(2, 2, 9), bool], float32, float32, Tensor[(528), float32]) */;
  %579.0
}

def @func_5792() -> (Tensor[(720), uint16], Tensor[(72), int8], Tensor[(576), int8], Tensor[(1, 3, 12), float64]) {
  %590 = fn () -> (Tensor[(720), uint16], Tensor[(72), int8], Tensor[(576), int8], Tensor[(1, 3, 12), float64]) {
    %580 = @func_3289() /* ty=(Tensor[(528), float32], Tensor[(720), uint16], Tensor[(2, 2, 9), bool]) */;
    %581 = cast(meta[relay.Constant][31] /* ty=Tensor[(72), int8] */, dtype="int8") /* ty=Tensor[(72), int8] */;
    %582 = cast(meta[relay.Constant][32] /* ty=Tensor[(576), int8] */, dtype="int8") /* ty=Tensor[(576), int8] */;
    %583 = reshape(%581, newshape=[1, 6, 12]) /* ty=Tensor[(1, 6, 12), int8] */;
    %584 = reshape(%582, newshape=[8, 6, 12]) /* ty=Tensor[(8, 6, 12), int8] */;
    %585 = @func_1348(%583, %584) /* ty=(Tensor[(8, 6, 12), int8], Tensor[(1, 3, 12), bool], Tensor[(5, 189), float64]) */;
    %586 = %585.1;
    %587 = cast(%586, dtype="float64") /* ty=Tensor[(1, 3, 12), float64] */;
    %588 = %580.1;
    %589 = cos(%587) /* ty=Tensor[(1, 3, 12), float64] */;
    (%588, meta[relay.Constant][31] /* ty=Tensor[(72), int8] */, meta[relay.Constant][32] /* ty=Tensor[(576), int8] */, %589)
  };
  %590() /* ty=(Tensor[(720), uint16], Tensor[(72), int8], Tensor[(576), int8], Tensor[(1, 3, 12), float64]) */
}

def @func_1891() -> (Tensor[(2, 2, 9), bool], float32, float32, Tensor[(528), float32]) {
  @func_1889() /* ty=(Tensor[(2, 2, 9), bool], float32, float32, Tensor[(528), float32]) */
}

def @func_7829() -> (Tensor[(945), uint32],) {
  %591 = @func_7149() /* ty=(Tensor[(945), uint32],) */;
  %592 = %591.0;
  (%592,)
}

def @func_7326() -> (Tensor[(2, 2, 9), bool],) {
  %593 = @func_5378() /* ty=Tensor[(2, 2, 9), bool] */;
  (%593,)
}

def @func_7831() -> (Tensor[(945), uint32],) {
  @func_7829() /* ty=(Tensor[(945), uint32],) */
}

def @func_8030(%var_7999: Tensor[(9, 7, 2), int8], %var_8000: Tensor[(9, 7, 2), int8]) -> (Tensor[(9, 7, 2), int8], Tensor[(9, 7, 2), float32], Tensor[(256), int64], Tensor[(14, 7, 5), uint32], Tensor[(490), uint32], Tensor[(2, 2, 9), bool], Tensor[(9, 7, 2), float64]) {
  %594 = cast(%var_8000, dtype="int8") /* ty=Tensor[(9, 7, 2), int8] */;
  %595 = shape_of(%var_7999, dtype="int32") /* ty=Tensor[(3), int32] */;
  %596 = cast(%var_7999, dtype="int8") /* ty=Tensor[(9, 7, 2), int8] */;
  %597 = dyn.reshape(%594, %595, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %598 = cast(%var_8000, dtype="float32") /* ty=Tensor[(9, 7, 2), float32] */;
  %599 = @func_4078() /* ty=(Tensor[(256), int64],) */;
  %600 = cast(meta[relay.Constant][33] /* ty=Tensor[(490), uint32] */, dtype="uint32") /* ty=Tensor[(490), uint32] */;
  %601 = reshape(%600, newshape=[14, 7, 5]) /* ty=Tensor[(14, 7, 5), uint32] */;
  %602 = @func_1819() /* ty=(Tensor[(2, 2, 9), bool], Tensor[(4, 8, 8), int64], Tensor[(256), int64], Tensor[(1, 3, 12), bool]) */;
  %603 = cast(%var_8000, dtype="float64") /* ty=Tensor[(9, 7, 2), float64] */;
  %604 = multiply(%596, %597) /* ty=Tensor[(9, 7, 2), int8] */;
  %605 = asinh(%598) /* ty=Tensor[(9, 7, 2), float32] */;
  %606 = %599.0;
  %607 = @func_6400(%601) /* ty=Tensor[(14, 7, 5), uint32] */;
  %608 = %602.0;
  %609 = asin(%603) /* ty=Tensor[(9, 7, 2), float64] */;
  (%604, %605, %606, %607, meta[relay.Constant][33] /* ty=Tensor[(490), uint32] */, %608, %609)
}

def @func_7281(%var_7279: Tensor[(256), int64]) -> (bool, Tensor[(256), float32], Tensor[(256), uint8]) {
  @func_7278(%var_7279) /* ty=(bool, Tensor[(256), float32], Tensor[(256), uint8]) */
}

def @func_1348(%var_1316: Tensor[(1, 6, 12), int8], %var_1317: Tensor[(8, 6, 12), int8]) -> (Tensor[(8, 6, 12), int8], Tensor[(1, 3, 12), bool], Tensor[(5, 189), float64]) {
  %610 = cast(%var_1316, dtype="int8") /* ty=Tensor[(1, 6, 12), int8] */;
  %611 = cast(%var_1317, dtype="int8") /* ty=Tensor[(8, 6, 12), int8] */;
  %612 = cast(meta[relay.Constant][34] /* ty=Tensor[(5, 189), float64] */, dtype="float64") /* ty=Tensor[(5, 189), float64] */;
  %613 = reshape(%612, newshape=[15, 63]) /* ty=Tensor[(15, 63), float64] */;
  %614 = @func_745(%613) /* ty=(Tensor[(16, 15, 10), uint32], Tensor[(9, 15, 7), bool], Tensor[(15, 63), float64], Tensor[(1, 3, 12), bool], Tensor[(36), bool]) */;
  %615 = add(%610, %611) /* ty=Tensor[(8, 6, 12), int8] */;
  %616 = %614.3;
  (%615, %616, meta[relay.Constant][34] /* ty=Tensor[(5, 189), float64] */)
}

def @func_4885() -> (Tensor[(256), float64], Tensor[(2, 16, 6), float32], Tensor[(192), float32]) {
  %625 = fn () -> (Tensor[(256), float64], Tensor[(2, 16, 6), float32], Tensor[(192), float32]) {
    %617 = @func_2859() /* ty=(Tensor[(256), int64], Tensor[(720), uint16], Tensor[(12, 4, 15), uint32]) */;
    %618 = %617.0;
    %619 = cast(%618, dtype="float64") /* ty=Tensor[(256), float64] */;
    %620 = cast(meta[relay.Constant][35] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
    %621 = reshape(%620, newshape=[192]) /* ty=Tensor[(192), float32] */;
    %622 = @func_1986(%621) /* ty=(Tensor[(4, 8, 8), int64], Tensor[(2, 16, 6), float32], Tensor[(192), float32]) */;
    %623 = cos(%619) /* ty=Tensor[(256), float64] */;
    %624 = %622.1;
    (%623, %624, meta[relay.Constant][35] /* ty=Tensor[(192), float32] */)
  };
  %625() /* ty=(Tensor[(256), float64], Tensor[(2, 16, 6), float32], Tensor[(192), float32]) */
}

def @func_4427(%var_4425: Tensor[(256), int64]) -> Tensor[(256), bool] {
  @func_4424(%var_4425) /* ty=Tensor[(256), bool] */
}

def @func_8863(%var_8861: uint8, %var_8862: Tensor[(10, 7, 6), uint8]) -> Tensor[(10, 7, 6), uint8] {
  @func_8859(%var_8861, %var_8862) /* ty=Tensor[(10, 7, 6), uint8] */
}

def @func_7167() -> (Tensor[(2, 2, 9), bool],) {
  %628 = fn () -> (Tensor[(2, 2, 9), bool],) {
    %626 = @func_6314() /* ty=(Tensor[(2, 2, 9), bool],) */;
    %627 = %626.0;
    (%627,)
  };
  %628() /* ty=(Tensor[(2, 2, 9), bool],) */
}

def @func_2939() -> (float32,) {
  %631 = fn () -> (float32,) {
    %629 = @func_1889() /* ty=(Tensor[(2, 2, 9), bool], float32, float32, Tensor[(528), float32]) */;
    %630 = %629.1;
    (%630,)
  };
  %631() /* ty=(float32,) */
}

def @func_10044(%var_10042: Tensor[(10, 4, 5), float32]) -> (Tensor[(10, 4, 5), float32], Tensor[(10, 4, 5), float64]) {
  @func_10041(%var_10042) /* ty=(Tensor[(10, 4, 5), float32], Tensor[(10, 4, 5), float64]) */
}

def @func_3897() -> Tensor[(256), int64] {
  @func_2026() /* ty=Tensor[(256), int64] */
}

def @func_1042(%var_1040: float32, %var_1041: Tensor[(528), float32]) -> (Tensor[(2, 14, 2), float64], Tensor[(16, 3, 11), float32], float32, Tensor[(528), float32]) {
  %639 = fn (%var_1029: float32, %var_1030: Tensor[(528), float32]) -> (Tensor[(2, 14, 2), float64], Tensor[(16, 3, 11), float32], float32, Tensor[(528), float32]) {
    %632 = cast(meta[relay.Constant][36] /* ty=Tensor[(2, 14, 2), float64] */, dtype="float64") /* ty=Tensor[(2, 14, 2), float64] */;
    %633 = cast(%var_1029, dtype="float32") /* ty=float32 */;
    %634 = cast(%var_1030, dtype="float32") /* ty=Tensor[(528), float32] */;
    %635 = reshape(%633, newshape=[]) /* ty=float32 */;
    %636 = reshape(%634, newshape=[16, 3, 11]) /* ty=Tensor[(16, 3, 11), float32] */;
    %637 = log(%632) /* ty=Tensor[(2, 14, 2), float64] */;
    %638 = @func_677(%635, %636) /* ty=Tensor[(16, 3, 11), float32] */;
    (%637, %638, %var_1029, %var_1030)
  };
  %639(%var_1040, %var_1041) /* ty=(Tensor[(2, 14, 2), float64], Tensor[(16, 3, 11), float32], float32, Tensor[(528), float32]) */
}

def @func_1957() -> (float32, Tensor[(256), int64]) {
  %640 = @func_1895() /* ty=(float32,) */;
  %641 = @func_1819() /* ty=(Tensor[(2, 2, 9), bool], Tensor[(4, 8, 8), int64], Tensor[(256), int64], Tensor[(1, 3, 12), bool]) */;
  %642 = %640.0;
  %643 = %641.2;
  (%642, %643)
}

def @func_3776() -> (bool, float32) {
  %648 = fn () -> (bool, float32) {
    %644 = @func_2978() /* ty=(Tensor[(1, 3, 12), bool], Tensor[(1, 3, 12), bool], bool) */;
    %645 = @func_1889() /* ty=(Tensor[(2, 2, 9), bool], float32, float32, Tensor[(528), float32]) */;
    %646 = %644.2;
    %647 = %645.1;
    (%646, %647)
  };
  %648() /* ty=(bool, float32) */
}

def @func_5046() -> Tensor[(945), uint32] {
  @func_5044() /* ty=Tensor[(945), uint32] */
}

def @func_8255() -> (float32, Tensor[(252), bool], Tensor[(252, 1), bool]) {
  %655 = fn () -> (float32, Tensor[(252), bool], Tensor[(252, 1), bool]) {
    %649 = @func_3360() /* ty=(float32,) */;
    %650 = cast(meta[relay.Constant][37] /* ty=Tensor[(252, 1), bool] */, dtype="bool") /* ty=Tensor[(252, 1), bool] */;
    %651 = reshape(%650, newshape=[252]) /* ty=Tensor[(252), bool] */;
    %652 = @func_5854(%651) /* ty=(Tensor[(2, 2, 9), bool], Tensor[(528), float32], Tensor[(252), bool], Tensor[(264, 2), float32], Tensor[(2, 2, 9), bool]) */;
    %653 = %649.0;
    %654 = %652.2;
    (%653, %654, meta[relay.Constant][37] /* ty=Tensor[(252, 1), bool] */)
  };
  %655() /* ty=(float32, Tensor[(252), bool], Tensor[(252, 1), bool]) */
}

def @func_7559(%var_7521: Tensor[(11, 1, 3), float64], %var_7522: Tensor[(11, 15, 3), float64]) -> (Tensor[(11, 15, 3), float64], Tensor[(11, 1, 3), int64]) {
  %656 = cast(%var_7521, dtype="float64") /* ty=Tensor[(11, 1, 3), float64] */;
  %657 = cast(%var_7522, dtype="float64") /* ty=Tensor[(11, 15, 3), float64] */;
  %658 = @func_2938() /* ty=(float32,) */;
  %659 = %658.0;
  %660 = cast(%var_7521, dtype="int64") /* ty=Tensor[(11, 1, 3), int64] */;
  %661 = cast(%659, dtype="int64") /* ty=int64 */;
  %662 = minimum(%656, %657) /* ty=Tensor[(11, 15, 3), float64] */;
  %663 = maximum(%660, %661) /* ty=Tensor[(11, 1, 3), int64] */;
  (%662, %663)
}

def @func_8137() -> Tensor[(256), int64] {
  %664 = @func_5357() /* ty=(Tensor[(256), int64], Tensor[(256), int64], Tensor[(256), bool]) */;
  %664.1
}

def @func_8372() -> (Tensor[(80), uint64], Tensor[(528), bool], Tensor[(10, 8), uint64]) {
  %665 = @func_4283() /* ty=(Tensor[(80), uint64],) */;
  %666 = @func_5543() /* ty=(Tensor[(80), uint64], Tensor[(16, 3, 11), float32], float32, Tensor[(528), bool]) */;
  %667 = %665.0;
  %668 = cast(%667, dtype="uint64") /* ty=Tensor[(80), uint64] */;
  %669 = reshape(%668, newshape=[80]) /* ty=Tensor[(80), uint64] */;
  %670 = @func_2700(%669) /* ty=(Tensor[(2, 2, 9), bool], Tensor[(10, 8), uint64], Tensor[(80), uint64]) */;
  %671 = %666.3;
  %672 = %670.1;
  (%667, %671, %672)
}

def @func_7637() -> float32 {
  %674 = fn () -> float32 {
    %673 = @func_3918() /* ty=(float32,) */;
    %673.0
  };
  %674() /* ty=float32 */
}

def @func_7278(%var_7266: Tensor[(256), int64]) -> (bool, Tensor[(256), float32], Tensor[(256), uint8]) {
  %675 = @func_2978() /* ty=(Tensor[(1, 3, 12), bool], Tensor[(1, 3, 12), bool], bool) */;
  %676 = cast(meta[relay.Constant][38] /* ty=Tensor[(256), int64] */, dtype="int64") /* ty=Tensor[(256), int64] */;
  %677 = reshape(%676, newshape=[256]) /* ty=Tensor[(256), int64] */;
  %678 = @func_5543() /* ty=(Tensor[(80), uint64], Tensor[(16, 3, 11), float32], float32, Tensor[(528), bool]) */;
  %679 = %678.2;
  %680 = cast(meta[relay.Constant][38] /* ty=Tensor[(256), int64] */, dtype="int64") /* ty=Tensor[(256), int64] */;
  %681 = cast(%679, dtype="int64") /* ty=int64 */;
  %682 = multiply(%680, %681) /* ty=Tensor[(256), int64] */;
  %683 = cast(%var_7266, dtype="uint8") /* ty=Tensor[(256), uint8] */;
  %684 = shape_of(%682, dtype="int32") /* ty=Tensor[(1), int32] */;
  %685 = cast(%682, dtype="uint8") /* ty=Tensor[(256), uint8] */;
  %686 = dyn.reshape(%683, %684, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %687 = %675.2;
  %688 = @func_4698(%677) /* ty=Tensor[(256), float32] */;
  %689 = bitwise_xor(%685, %686) /* ty=Tensor[(256), uint8] */;
  (%687, %688, %689)
}

def @func_10080(%var_10078: Tensor[(252, 1), bool]) -> (Tensor[(256), int64], Tensor[(528), int32], Tensor[(252, 1), bool], Tensor[(1, 528), float32], Tensor[(1, 3, 12), bool]) {
  @func_10077(%var_10078) /* ty=(Tensor[(256), int64], Tensor[(528), int32], Tensor[(252, 1), bool], Tensor[(1, 528), float32], Tensor[(1, 3, 12), bool]) */
}

def @func_5044() -> Tensor[(945), uint32] {
  %690 = @func_3460() /* ty=(Tensor[(14, 8, 7), float64], Tensor[(9, 15, 7), bool], Tensor[(945), float64]) */;
  %691 = %690.2;
  %692 = cast(meta[relay.Constant][39] /* ty=Tensor[(945), float64] */, dtype="uint32") /* ty=Tensor[(945), uint32] */;
  %693 = shape_of(%691, dtype="int32") /* ty=Tensor[(1), int32] */;
  %694 = cast(%691, dtype="uint32") /* ty=Tensor[(945), uint32] */;
  %695 = dyn.reshape(%692, %693, newshape=[]) /* ty=Tensor[(?), uint32] */;
  left_shift(%694, %695) /* ty=Tensor[(945), uint32] */
}

def @func_5856(%var_5855: Tensor[(252), bool]) -> (Tensor[(2, 2, 9), bool], Tensor[(528), float32], Tensor[(252), bool], Tensor[(264, 2), float32], Tensor[(2, 2, 9), bool]) {
  %707 = fn (%var_5837: Tensor[(252), bool]) -> (Tensor[(2, 2, 9), bool], Tensor[(528), float32], Tensor[(252), bool], Tensor[(264, 2), float32], Tensor[(2, 2, 9), bool]) {
    %696 = @func_3342() /* ty=(Tensor[(256), int64], Tensor[(2, 2, 9), bool]) */;
    %697 = cast(%var_5837, dtype="bool") /* ty=Tensor[(252), bool] */;
    %698 = cast(%var_5837, dtype="bool") /* ty=Tensor[(252), bool] */;
    %699 = cast(meta[relay.Constant][40] /* ty=Tensor[(264, 2), float32] */, dtype="float32") /* ty=Tensor[(264, 2), float32] */;
    %700 = reshape(%697, newshape=[7, 3, 12]) /* ty=Tensor[(7, 3, 12), bool] */;
    %701 = reshape(%698, newshape=[7, 3, 12]) /* ty=Tensor[(7, 3, 12), bool] */;
    %702 = reshape(%699, newshape=[528]) /* ty=Tensor[(528), float32] */;
    %703 = @func_2598(%700, %701, %702) /* ty=(Tensor[(7, 3, 12), bool], Tensor[(528), int32], Tensor[(528), float32]) */;
    %704 = %696.1;
    %705 = %703.2;
    %706 = @func_5378() /* ty=Tensor[(2, 2, 9), bool] */;
    (%704, %705, %var_5837, meta[relay.Constant][40] /* ty=Tensor[(264, 2), float32] */, %706)
  };
  %707(%var_5855) /* ty=(Tensor[(2, 2, 9), bool], Tensor[(528), float32], Tensor[(252), bool], Tensor[(264, 2), float32], Tensor[(2, 2, 9), bool]) */
}

def @func_9804() -> (float32, float32) {
  %708 = @func_6185() /* ty=(float32, float32, float32) */;
  %709 = @func_2895() /* ty=float32 */;
  %710 = %708.1;
  (%709, %710)
}

def @func_6186() -> (float32, float32, float32) {
  %717 = fn () -> (float32, float32, float32) {
    %711 = @func_1895() /* ty=(float32,) */;
    %712 = @func_1889() /* ty=(Tensor[(2, 2, 9), bool], float32, float32, Tensor[(528), float32]) */;
    %713 = @func_3360() /* ty=(float32,) */;
    %714 = %711.0;
    %715 = %712.1;
    %716 = %713.0;
    (%714, %715, %716)
  };
  %717() /* ty=(float32, float32, float32) */
}

def @func_8194() -> (Tensor[(576), int8],) {
  %720 = fn () -> (Tensor[(576), int8],) {
    %718 = @func_5791() /* ty=(Tensor[(720), uint16], Tensor[(72), int8], Tensor[(576), int8], Tensor[(1, 3, 12), float64]) */;
    %719 = %718.2;
    (%719,)
  };
  %720() /* ty=(Tensor[(576), int8],) */
}

def @func_6315() -> (Tensor[(2, 2, 9), bool],) {
  %723 = fn () -> (Tensor[(2, 2, 9), bool],) {
    %721 = @func_6089() /* ty=(Tensor[(256), int64], Tensor[(2, 2, 9), bool], Tensor[(256), int64]) */;
    %722 = %721.1;
    (%722,)
  };
  %723() /* ty=(Tensor[(2, 2, 9), bool],) */
}

def @func_3290() -> (Tensor[(528), float32], Tensor[(720), uint16], Tensor[(2, 2, 9), bool]) {
  %729 = fn () -> (Tensor[(528), float32], Tensor[(720), uint16], Tensor[(2, 2, 9), bool]) {
    %724 = @func_2060() /* ty=(Tensor[(256), int64], Tensor[(12, 4, 15), uint16], Tensor[(720), uint16], Tensor[(528), float32]) */;
    %725 = @func_2630() /* ty=(Tensor[(2, 2, 9), bool],) */;
    %726 = %724.3;
    %727 = @func_2742() /* ty=Tensor[(720), uint16] */;
    %728 = %725.0;
    (%726, %727, %728)
  };
  %729() /* ty=(Tensor[(528), float32], Tensor[(720), uint16], Tensor[(2, 2, 9), bool]) */
}

def @func_6090() -> (Tensor[(256), int64], Tensor[(2, 2, 9), bool], Tensor[(256), int64]) {
  %735 = fn () -> (Tensor[(256), int64], Tensor[(2, 2, 9), bool], Tensor[(256), int64]) {
    %730 = @func_5180() /* ty=(Tensor[(256), int64],) */;
    %731 = @func_5601() /* ty=(Tensor[(256), int64],) */;
    %732 = %730.0;
    %733 = @func_4360() /* ty=Tensor[(2, 2, 9), bool] */;
    %734 = %731.0;
    (%732, %733, %734)
  };
  %735() /* ty=(Tensor[(256), int64], Tensor[(2, 2, 9), bool], Tensor[(256), int64]) */
}

def @func_10502() -> (Tensor[(2, 2, 9), uint64], float32, float32, Tensor[(720), uint16]) {
  %742 = fn () -> (Tensor[(2, 2, 9), uint64], float32, float32, Tensor[(720), uint16]) {
    %736 = @func_9804() /* ty=(float32, float32) */;
    %737 = @func_2859() /* ty=(Tensor[(256), int64], Tensor[(720), uint16], Tensor[(12, 4, 15), uint32]) */;
    %738 = @func_7079() /* ty=Tensor[(2, 2, 9), uint64] */;
    %739 = %736.1;
    %740 = @func_10294() /* ty=float32 */;
    %741 = %737.1;
    (%738, %739, %740, %741)
  };
  %742() /* ty=(Tensor[(2, 2, 9), uint64], float32, float32, Tensor[(720), uint16]) */
}

def @func_1553(%var_1551: Tensor[(192), float32]) -> (Tensor[(11, 4, 12), bool], Tensor[(11, 4, 12), float32], Tensor[(11, 4, 12), uint8], Tensor[(2, 16, 6), bool], Tensor[(2, 16, 6), float32]) {
  @func_1550(%var_1551) /* ty=(Tensor[(11, 4, 12), bool], Tensor[(11, 4, 12), float32], Tensor[(11, 4, 12), uint8], Tensor[(2, 16, 6), bool], Tensor[(2, 16, 6), float32]) */
}

def @func_10041(%var_10030: Tensor[(10, 4, 5), float32]) -> (Tensor[(10, 4, 5), float32], Tensor[(10, 4, 5), float64]) {
  %743 = cast(%var_10030, dtype="float32") /* ty=Tensor[(10, 4, 5), float32] */;
  %744 = cast(%var_10030, dtype="float64") /* ty=Tensor[(10, 4, 5), float64] */;
  %745 = log(%743) /* ty=Tensor[(10, 4, 5), float32] */;
  %746 = cosh(%744) /* ty=Tensor[(10, 4, 5), float64] */;
  (%745, %746)
}

def @func_8659() -> Tensor[(2, 2, 9), bool] {
  %747 = fn () -> Tensor[(2, 2, 9), bool] {
    @func_5378() /* ty=Tensor[(2, 2, 9), bool] */
  };
  %747() /* ty=Tensor[(2, 2, 9), bool] */
}

def @func_7151() -> (Tensor[(945), uint32],) {
  @func_7149() /* ty=(Tensor[(945), uint32],) */
}

def @func_7592() -> (Tensor[(256), int64], Tensor[(256), int64]) {
  @func_7590() /* ty=(Tensor[(256), int64], Tensor[(256), int64]) */
}

def @func_9908(%var_9876: Tensor[(1, 104), float64]) -> (Tensor[(80), uint64], Tensor[(?, 104), int32]) {
  %748 = @func_8372() /* ty=(Tensor[(80), uint64], Tensor[(528), bool], Tensor[(10, 8), uint64]) */;
  %749 = cast(%var_9876, dtype="float64") /* ty=Tensor[(1, 104), float64] */;
  %750 = reshape(%749, newshape=[8, 1, 13]) /* ty=Tensor[(8, 1, 13), float64] */;
  %751 = @func_9536(%750) /* ty=(Tensor[(8, 1, 13), float64],) */;
  %752 = %751.0;
  %753 = cast(%752, dtype="int32") /* ty=Tensor[(8, 1, 13), int32] */;
  %754 = shape_of(%var_9876, dtype="int32") /* ty=Tensor[(2), int32] */;
  %755 = cast(%var_9876, dtype="int32") /* ty=Tensor[(1, 104), int32] */;
  %756 = dyn.reshape(%753, %754, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %757 = %748.0;
  %758 = bitwise_xor(%755, %756) /* ty=Tensor[(?, 104), int32] */;
  (%757, %758)
}

def @func_8139() -> Tensor[(256), int64] {
  @func_8137() /* ty=Tensor[(256), int64] */
}

def @func_2598(%var_2581: Tensor[(7, 3, 12), bool], %var_2582: Tensor[(7, 3, 12), bool], %var_2595: Tensor[(528), float32]) -> (Tensor[(7, 3, 12), bool], Tensor[(528), int32], Tensor[(528), float32]) {
  %759 = cast(%var_2582, dtype="bool") /* ty=Tensor[(7, 3, 12), bool] */;
  %760 = shape_of(%var_2581, dtype="int32") /* ty=Tensor[(3), int32] */;
  %761 = cast(%var_2581, dtype="bool") /* ty=Tensor[(7, 3, 12), bool] */;
  %762 = dyn.reshape(%759, %760, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %763 = cast(%var_2595, dtype="float32") /* ty=Tensor[(528), float32] */;
  %764 = reshape(%763, newshape=[528]) /* ty=Tensor[(528), float32] */;
  %765 = @func_2344(%764) /* ty=(Tensor[(528), int32], Tensor[(528), uint64]) */;
  %766 = logical_or(%761, %762) /* ty=Tensor[(7, 3, 12), bool] */;
  %767 = %765.0;
  (%766, %767, %var_2595)
}

def @func_1905() -> Tensor[(2, 2, 9), bool] {
  @func_1903() /* ty=Tensor[(2, 2, 9), bool] */
}

def @func_9262(%var_9260: Tensor[(256), int64]) -> (Tensor[(256), int8],) {
  @func_9259(%var_9260) /* ty=(Tensor[(256), int8],) */
}

def @func_4137() -> (Tensor[(2, 2, 9), bool], Tensor[(2, 2, 9), bool], float32, float32) {
  %776 = fn () -> (Tensor[(2, 2, 9), bool], Tensor[(2, 2, 9), bool], float32, float32) {
    %768 = @func_3342() /* ty=(Tensor[(256), int64], Tensor[(2, 2, 9), bool]) */;
    %769 = @func_2544() /* ty=(Tensor[(2, 2, 9), bool],) */;
    %770 = @func_2811() /* ty=(float32,) */;
    %771 = @func_2811() /* ty=(float32,) */;
    %772 = %768.1;
    %773 = %769.0;
    %774 = %770.0;
    %775 = %771.0;
    (%772, %773, %774, %775)
  };
  %776() /* ty=(Tensor[(2, 2, 9), bool], Tensor[(2, 2, 9), bool], float32, float32) */
}

def @func_748(%var_746: Tensor[(15, 63), float64]) -> (Tensor[(16, 15, 10), uint32], Tensor[(9, 15, 7), bool], Tensor[(15, 63), float64], Tensor[(1, 3, 12), bool], Tensor[(36), bool]) {
  @func_745(%var_746) /* ty=(Tensor[(16, 15, 10), uint32], Tensor[(9, 15, 7), bool], Tensor[(15, 63), float64], Tensor[(1, 3, 12), bool], Tensor[(36), bool]) */
}

def @func_6402(%var_6401: Tensor[(14, 7, 5), uint32]) -> Tensor[(14, 7, 5), uint32] {
  %781 = fn (%var_6388: Tensor[(14, 7, 5), uint32]) -> Tensor[(14, 7, 5), uint32] {
    %777 = cast(meta[relay.Constant][41] /* ty=Tensor[(14, 7, 5), uint32] */, dtype="uint32") /* ty=Tensor[(14, 7, 5), uint32] */;
    %778 = shape_of(%var_6388, dtype="int32") /* ty=Tensor[(3), int32] */;
    %779 = cast(%var_6388, dtype="uint32") /* ty=Tensor[(14, 7, 5), uint32] */;
    %780 = dyn.reshape(%777, %778, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    logical_xor(%779, %780) /* ty=Tensor[(14, 7, 5), uint32] */
  };
  %781(%var_6401) /* ty=Tensor[(14, 7, 5), uint32] */
}

def @func_5357() -> (Tensor[(256), int64], Tensor[(256), int64], Tensor[(256), bool]) {
  %782 = @func_5288() /* ty=(Tensor[(256), int64],) */;
  %783 = %782.0;
  %784 = cast(%783, dtype="int64") /* ty=Tensor[(256), int64] */;
  %785 = reshape(%784, newshape=[256]) /* ty=Tensor[(256), int64] */;
  %786 = @func_3897() /* ty=Tensor[(256), int64] */;
  %787 = @func_4424(%785) /* ty=Tensor[(256), bool] */;
  (%786, %783, %787)
}

def @func_6635() -> (Tensor[(2, 2, 9), bool],) {
  %790 = fn () -> (Tensor[(2, 2, 9), bool],) {
    %788 = @func_6314() /* ty=(Tensor[(2, 2, 9), bool],) */;
    %789 = %788.0;
    (%789,)
  };
  %790() /* ty=(Tensor[(2, 2, 9), bool],) */
}

def @func_10006() -> (Tensor[(2, 2, 9), float32],) {
  @func_10004() /* ty=(Tensor[(2, 2, 9), float32],) */
}

def @func_745(%var_727: Tensor[(15, 63), float64]) -> (Tensor[(16, 15, 10), uint32], Tensor[(9, 15, 7), bool], Tensor[(15, 63), float64], Tensor[(1, 3, 12), bool], Tensor[(36), bool]) {
  %791 = cast(meta[relay.Constant][42] /* ty=uint16 */, dtype="int16") /* ty=int16 */;
  %792 = cast(meta[relay.Constant][43] /* ty=Tensor[(16, 15, 10), uint16] */, dtype="int16") /* ty=Tensor[(16, 15, 10), int16] */;
  %793 = subtract(%791, %792) /* ty=Tensor[(16, 15, 10), int16] */;
  %794 = cast(meta[relay.Constant][42] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %795 = cast(meta[relay.Constant][43] /* ty=Tensor[(16, 15, 10), uint16] */, dtype="uint16") /* ty=Tensor[(16, 15, 10), uint16] */;
  %796 = logical_xor(%794, %795) /* ty=Tensor[(16, 15, 10), uint16] */;
  %797 = cast(%796, dtype="uint32") /* ty=Tensor[(16, 15, 10), uint32] */;
  %798 = shape_of(%793, dtype="int32") /* ty=Tensor[(3), int32] */;
  %799 = cast(%793, dtype="uint32") /* ty=Tensor[(16, 15, 10), uint32] */;
  %800 = dyn.reshape(%797, %798, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %801 = cast(%var_727, dtype="float64") /* ty=Tensor[(15, 63), float64] */;
  %802 = reshape(%801, newshape=[9, 15, 7]) /* ty=Tensor[(9, 15, 7), float64] */;
  %803 = @func_97(%802) /* ty=(Tensor[(9, 15, 7), bool],) */;
  %804 = cast(meta[relay.Constant][42] /* ty=uint16 */, dtype="bool") /* ty=bool */;
  %805 = cast(meta[relay.Constant][44] /* ty=Tensor[(36), bool] */, dtype="bool") /* ty=Tensor[(36), bool] */;
  %806 = reshape(%804, newshape=[]) /* ty=bool */;
  %807 = reshape(%805, newshape=[1, 3, 12]) /* ty=Tensor[(1, 3, 12), bool] */;
  %808 = @func_110(%806, %807) /* ty=(Tensor[(1, 3, 12), bool],) */;
  %809 = maximum(%799, %800) /* ty=Tensor[(16, 15, 10), uint32] */;
  %810 = %803.0;
  %811 = %808.0;
  (%809, %810, %var_727, %811, meta[relay.Constant][44] /* ty=Tensor[(36), bool] */)
}

def @func_2468() -> (Tensor[(2, 2, 9), bool],) {
  %813 = fn () -> (Tensor[(2, 2, 9), bool],) {
    %812 = @func_1637() /* ty=Tensor[(2, 2, 9), bool] */;
    (%812,)
  };
  %813() /* ty=(Tensor[(2, 2, 9), bool],) */
}

def @func_8437(%var_8377: Tensor[(11, 2, 10), float64], %var_8430: Tensor[(11, 2, 10), float64]) -> (Tensor[(2, 14, 7), float32], Tensor[(196), float32], Tensor[(?, 480), int32], Tensor[(11, 2, 10), float32]) {
  %814 = cast(meta[relay.Constant][45] /* ty=Tensor[(196), float32] */, dtype="float32") /* ty=Tensor[(196), float32] */;
  %815 = reshape(%814, newshape=[2, 14, 7]) /* ty=Tensor[(2, 14, 7), float32] */;
  %816 = cast(meta[relay.Constant][46] /* ty=Tensor[(1, 480), float32] */, dtype="float32") /* ty=Tensor[(1, 480), float32] */;
  %817 = cast(meta[relay.Constant][46] /* ty=Tensor[(1, 480), float32] */, dtype="float32") /* ty=Tensor[(1, 480), float32] */;
  %818 = reshape(%816, newshape=[8, 12, 5]) /* ty=Tensor[(8, 12, 5), float32] */;
  %819 = reshape(%817, newshape=[8, 12, 5]) /* ty=Tensor[(8, 12, 5), float32] */;
  %820 = @func_3105(%818, %819) /* ty=(Tensor[(8, 12, 5), bool], Tensor[(8, 12, 5), float32]) */;
  %821 = %820.0;
  %822 = cast(%821, dtype="int32") /* ty=Tensor[(8, 12, 5), int32] */;
  %823 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(1, 480), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %824 = cast(meta[relay.Constant][46] /* ty=Tensor[(1, 480), float32] */, dtype="int32") /* ty=Tensor[(1, 480), int32] */;
  %825 = dyn.reshape(%822, %823, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %826 = cast(%var_8377, dtype="float64") /* ty=Tensor[(11, 2, 10), float64] */;
  %827 = erf(%826) /* ty=Tensor[(11, 2, 10), float64] */;
  %828 = cast(%var_8430, dtype="float32") /* ty=Tensor[(11, 2, 10), float32] */;
  %829 = shape_of(%827, dtype="int32") /* ty=Tensor[(3), int32] */;
  %830 = cast(%827, dtype="float32") /* ty=Tensor[(11, 2, 10), float32] */;
  %831 = dyn.reshape(%828, %829, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %832 = @func_5428(%815) /* ty=Tensor[(2, 14, 7), float32] */;
  %833 = bitwise_xor(%824, %825) /* ty=Tensor[(?, 480), int32] */;
  %834 = mod(%830, %831) /* ty=Tensor[(11, 2, 10), float32] */;
  (%832, meta[relay.Constant][45] /* ty=Tensor[(196), float32] */, %833, %834)
}

def @func_4080() -> (Tensor[(256), int64],) {
  @func_4078() /* ty=(Tensor[(256), int64],) */
}

def @func_677(%var_670: float32, %var_671: Tensor[(16, 3, 11), float32]) -> Tensor[(16, 3, 11), float32] {
  %835 = cast(%var_670, dtype="float32") /* ty=float32 */;
  %836 = cast(%var_671, dtype="float32") /* ty=Tensor[(16, 3, 11), float32] */;
  mod(%835, %836) /* ty=Tensor[(16, 3, 11), float32] */
}

def @func_2544() -> (Tensor[(2, 2, 9), bool],) {
  %837 = @func_1637() /* ty=Tensor[(2, 2, 9), bool] */;
  (%837,)
}

def @func_6809() -> (Tensor[(2, 2, 9), float32], float32) {
  %838 = @func_4048() /* ty=Tensor[(2, 2, 9), bool] */;
  %839 = cast(%838, dtype="float32") /* ty=Tensor[(2, 2, 9), float32] */;
  %840 = @func_3360() /* ty=(float32,) */;
  %841 = rsqrt(%839) /* ty=Tensor[(2, 2, 9), float32] */;
  %842 = %840.0;
  (%841, %842)
}

def @func_10248(%var_10207: Tensor[(16, 9, 4), float64], %var_10212: Tensor[(252), bool]) -> (Tensor[(252), bool], Tensor[(252), bool], Tensor[(16, 9, 4), bool]) {
  %843 = cast(%var_10212, dtype="bool") /* ty=Tensor[(252), bool] */;
  %844 = reshape(%843, newshape=[252]) /* ty=Tensor[(252), bool] */;
  %845 = @func_5854(%844) /* ty=(Tensor[(2, 2, 9), bool], Tensor[(528), float32], Tensor[(252), bool], Tensor[(264, 2), float32], Tensor[(2, 2, 9), bool]) */;
  %846 = cast(%var_10207, dtype="float64") /* ty=Tensor[(16, 9, 4), float64] */;
  %847 = log(%846) /* ty=Tensor[(16, 9, 4), float64] */;
  %848 = cast(%var_10207, dtype="bool") /* ty=Tensor[(16, 9, 4), bool] */;
  %849 = shape_of(%847, dtype="int32") /* ty=Tensor[(3), int32] */;
  %850 = cast(%847, dtype="bool") /* ty=Tensor[(16, 9, 4), bool] */;
  %851 = dyn.reshape(%848, %849, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %852 = %845.2;
  %853 = logical_and(%850, %851) /* ty=Tensor[(16, 9, 4), bool] */;
  (%852, %var_10212, %853)
}

def @func_2995() -> (Tensor[(256), int64],) {
  %855 = fn () -> (Tensor[(256), int64],) {
    %854 = @func_2238() /* ty=Tensor[(256), int64] */;
    (%854,)
  };
  %855() /* ty=(Tensor[(256), int64],) */
}

def @func_7198(%var_7196: int32, %var_7197: Tensor[(7, 7, 2), int32]) -> (Tensor[(7, 7, 2), int32], Tensor[(7, 7, 2), float32]) {
  %866 = fn (%var_7174: int32, %var_7175: Tensor[(7, 7, 2), int32]) -> (Tensor[(7, 7, 2), int32], Tensor[(7, 7, 2), float32]) {
    %856 = cast(%var_7174, dtype="int32") /* ty=int32 */;
    %857 = cast(%var_7175, dtype="int32") /* ty=Tensor[(7, 7, 2), int32] */;
    %858 = cast(%var_7175, dtype="float64") /* ty=Tensor[(7, 7, 2), float64] */;
    %859 = sqrt(%858) /* ty=Tensor[(7, 7, 2), float64] */;
    %860 = cast(meta[relay.Constant][47] /* ty=Tensor[(7, 7, 2), float64] */, dtype="float32") /* ty=Tensor[(7, 7, 2), float32] */;
    %861 = shape_of(%859, dtype="int32") /* ty=Tensor[(3), int32] */;
    %862 = cast(%859, dtype="float32") /* ty=Tensor[(7, 7, 2), float32] */;
    %863 = dyn.reshape(%860, %861, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %864 = bitwise_xor(%856, %857) /* ty=Tensor[(7, 7, 2), int32] */;
    %865 = floor_divide(%862, %863) /* ty=Tensor[(7, 7, 2), float32] */;
    (%864, %865)
  };
  %866(%var_7196, %var_7197) /* ty=(Tensor[(7, 7, 2), int32], Tensor[(7, 7, 2), float32]) */
}

def @func_2026() -> Tensor[(256), int64] {
  %867 = @func_1819() /* ty=(Tensor[(2, 2, 9), bool], Tensor[(4, 8, 8), int64], Tensor[(256), int64], Tensor[(1, 3, 12), bool]) */;
  %867.2
}

def @func_10757() -> (Tensor[(2, 2, 9), float32], float32) {
  @func_10755() /* ty=(Tensor[(2, 2, 9), float32], float32) */
}

def @func_10295() -> float32 {
  %869 = fn () -> float32 {
    %868 = @func_4136() /* ty=(Tensor[(2, 2, 9), bool], Tensor[(2, 2, 9), bool], float32, float32) */;
    %868.3
  };
  %869() /* ty=float32 */
}

def @func_7121(%var_7119: Tensor[(3, 1, 11), float32], %var_7120: Tensor[(252), bool]) -> (Tensor[(3, 1, 11), float32], Tensor[(252), bool], Tensor[(252), bool]) {
  @func_7117(%var_7119, %var_7120) /* ty=(Tensor[(3, 1, 11), float32], Tensor[(252), bool], Tensor[(252), bool]) */
}

def @func_10423(%var_10384: Tensor[(832), uint16], %var_10406: Tensor[(80), uint64]) -> (Tensor[(2, 2, 9), bool], Tensor[(16, 4, 13), uint16], Tensor[(832), uint16], Tensor[(10, 8), uint64], Tensor[(80), uint64], float32) {
  %870 = @func_7166() /* ty=(Tensor[(2, 2, 9), bool],) */;
  %871 = cast(%var_10384, dtype="uint16") /* ty=Tensor[(832), uint16] */;
  %872 = cast(%var_10384, dtype="uint16") /* ty=Tensor[(832), uint16] */;
  %873 = reshape(%871, newshape=[16, 4, 13]) /* ty=Tensor[(16, 4, 13), uint16] */;
  %874 = reshape(%872, newshape=[16, 4, 13]) /* ty=Tensor[(16, 4, 13), uint16] */;
  %875 = @func_7044(%873, %874) /* ty=(Tensor[(16, 4, 13), uint16], Tensor[(16, 4, 13), float64], Tensor[(720), uint16]) */;
  %876 = cast(%var_10406, dtype="uint64") /* ty=Tensor[(80), uint64] */;
  %877 = reshape(%876, newshape=[10, 8]) /* ty=Tensor[(10, 8), uint64] */;
  %878 = @func_1091(%877) /* ty=(Tensor[(10, 8), uint64], Tensor[(9, 15, 7), bool], Tensor[(945), float64]) */;
  %879 = %870.0;
  %880 = %875.0;
  %881 = %878.0;
  %882 = @func_7636() /* ty=float32 */;
  (%879, %880, %var_10384, %881, %var_10406, %882)
}

def @func_4424(%var_4418: Tensor[(256), int64]) -> Tensor[(256), bool] {
  %883 = @func_2994() /* ty=(Tensor[(256), int64],) */;
  %884 = %883.0;
  %885 = cast(%var_4418, dtype="bool") /* ty=Tensor[(256), bool] */;
  %886 = shape_of(%884, dtype="int32") /* ty=Tensor[(1), int32] */;
  %887 = cast(%884, dtype="bool") /* ty=Tensor[(256), bool] */;
  %888 = dyn.reshape(%885, %886, newshape=[]) /* ty=Tensor[(?), bool] */;
  logical_or(%887, %888) /* ty=Tensor[(256), bool] */
}

def @func_2979() -> (Tensor[(1, 3, 12), bool], Tensor[(1, 3, 12), bool], bool) {
  %897 = fn () -> (Tensor[(1, 3, 12), bool], Tensor[(1, 3, 12), bool], bool) {
    %889 = @func_1819() /* ty=(Tensor[(2, 2, 9), bool], Tensor[(4, 8, 8), int64], Tensor[(256), int64], Tensor[(1, 3, 12), bool]) */;
    %890 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
    %891 = %889.3;
    %892 = cast(%891, dtype="bool") /* ty=Tensor[(1, 3, 12), bool] */;
    %893 = reshape(%890, newshape=[]) /* ty=bool */;
    %894 = reshape(%892, newshape=[1, 3, 12]) /* ty=Tensor[(1, 3, 12), bool] */;
    %895 = @func_110(%893, %894) /* ty=(Tensor[(1, 3, 12), bool],) */;
    %896 = %895.0;
    (%891, %896, True /* ty=bool */)
  };
  %897() /* ty=(Tensor[(1, 3, 12), bool], Tensor[(1, 3, 12), bool], bool) */
}

def @func_10427(%var_10425: Tensor[(832), uint16], %var_10426: Tensor[(80), uint64]) -> (Tensor[(2, 2, 9), bool], Tensor[(16, 4, 13), uint16], Tensor[(832), uint16], Tensor[(10, 8), uint64], Tensor[(80), uint64], float32) {
  @func_10423(%var_10425, %var_10426) /* ty=(Tensor[(2, 2, 9), bool], Tensor[(16, 4, 13), uint16], Tensor[(832), uint16], Tensor[(10, 8), uint64], Tensor[(80), uint64], float32) */
}

def @func_4698(%var_4692: Tensor[(256), int64]) -> Tensor[(256), float32] {
  %898 = @func_3342() /* ty=(Tensor[(256), int64], Tensor[(2, 2, 9), bool]) */;
  %899 = %898.0;
  %900 = cast(%var_4692, dtype="float32") /* ty=Tensor[(256), float32] */;
  %901 = shape_of(%899, dtype="int32") /* ty=Tensor[(1), int32] */;
  %902 = cast(%899, dtype="float32") /* ty=Tensor[(256), float32] */;
  %903 = dyn.reshape(%900, %901, newshape=[]) /* ty=Tensor[(?), float32] */;
  floor_mod(%902, %903) /* ty=Tensor[(256), float32] */
}

def @func_10157() -> (float32, Tensor[(256), int64]) {
  @func_10155() /* ty=(float32, Tensor[(256), int64]) */
}

def @func_3855(%var_3853: Tensor[(480), float32]) -> (Tensor[(2, 2, 9), bool], Tensor[(8, 12, 5), float32], Tensor[(480), float32]) {
  @func_3852(%var_3853) /* ty=(Tensor[(2, 2, 9), bool], Tensor[(8, 12, 5), float32], Tensor[(480), float32]) */
}

def @func_3460() -> (Tensor[(14, 8, 7), float64], Tensor[(9, 15, 7), bool], Tensor[(945), float64]) {
  %904 = cast(meta[relay.Constant][48] /* ty=Tensor[(14, 8, 7), float64] */, dtype="float64") /* ty=Tensor[(14, 8, 7), float64] */;
  %905 = cast(meta[relay.Constant][49] /* ty=Tensor[(945), float64] */, dtype="float64") /* ty=Tensor[(945), float64] */;
  %906 = reshape(%905, newshape=[9, 15, 7]) /* ty=Tensor[(9, 15, 7), float64] */;
  %907 = @func_97(%906) /* ty=(Tensor[(9, 15, 7), bool],) */;
  %908 = log10(%904) /* ty=Tensor[(14, 8, 7), float64] */;
  %909 = %907.0;
  (%908, %909, meta[relay.Constant][49] /* ty=Tensor[(945), float64] */)
}

def @func_9049() -> (bool,) {
  %910 = @func_5639() /* ty=(bool,) */;
  %911 = %910.0;
  (%911,)
}

def @func_10755() -> (Tensor[(2, 2, 9), float32], float32) {
  %912 = @func_10004() /* ty=(Tensor[(2, 2, 9), float32],) */;
  %913 = @func_3775() /* ty=(bool, float32) */;
  %914 = %912.0;
  %915 = %913.1;
  (%914, %915)
}

def @func_9911(%var_9909: Tensor[(1, 104), float64]) -> (Tensor[(80), uint64], Tensor[(?, 104), int32]) {
  @func_9908(%var_9909) /* ty=(Tensor[(80), uint64], Tensor[(?, 104), int32]) */
}

def @func_2344(%var_2333: Tensor[(528), float32]) -> (Tensor[(528), int32], Tensor[(528), uint64]) {
  %916 = @func_2295() /* ty=(Tensor[(528), float32],) */;
  %917 = %916.0;
  %918 = cast(%var_2333, dtype="int32") /* ty=Tensor[(528), int32] */;
  %919 = shape_of(%917, dtype="int32") /* ty=Tensor[(1), int32] */;
  %920 = cast(%917, dtype="int32") /* ty=Tensor[(528), int32] */;
  %921 = dyn.reshape(%918, %919, newshape=[]) /* ty=Tensor[(?), int32] */;
  %922 = cast(meta[relay.Constant][50] /* ty=Tensor[(528), float32] */, dtype="uint64") /* ty=Tensor[(528), uint64] */;
  %923 = shape_of(%917, dtype="int32") /* ty=Tensor[(1), int32] */;
  %924 = cast(%917, dtype="uint64") /* ty=Tensor[(528), uint64] */;
  %925 = dyn.reshape(%922, %923, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %926 = bitwise_and(%920, %921) /* ty=Tensor[(528), int32] */;
  %927 = maximum(%924, %925) /* ty=Tensor[(528), uint64] */;
  (%926, %927)
}

def @func_3852(%var_3844: Tensor[(480), float32]) -> (Tensor[(2, 2, 9), bool], Tensor[(8, 12, 5), float32], Tensor[(480), float32]) {
  %928 = cast(%var_3844, dtype="float32") /* ty=Tensor[(480), float32] */;
  %929 = cast(%var_3844, dtype="float32") /* ty=Tensor[(480), float32] */;
  %930 = reshape(%928, newshape=[8, 12, 5]) /* ty=Tensor[(8, 12, 5), float32] */;
  %931 = reshape(%929, newshape=[8, 12, 5]) /* ty=Tensor[(8, 12, 5), float32] */;
  %932 = @func_3105(%930, %931) /* ty=(Tensor[(8, 12, 5), bool], Tensor[(8, 12, 5), float32]) */;
  %933 = @func_1637() /* ty=Tensor[(2, 2, 9), bool] */;
  %934 = %932.1;
  (%933, %934, %var_3844)
}

def @func_99(%var_98: Tensor[(9, 15, 7), float64]) -> (Tensor[(9, 15, 7), bool],) {
  %942 = fn (%var_89: Tensor[(9, 15, 7), float64]) -> (Tensor[(9, 15, 7), bool],) {
    %935 = cast(%var_89, dtype="float64") /* ty=Tensor[(9, 15, 7), float64] */;
    %936 = atan(%935) /* ty=Tensor[(9, 15, 7), float64] */;
    %937 = cast(%936, dtype="bool") /* ty=Tensor[(9, 15, 7), bool] */;
    %938 = shape_of(%var_89, dtype="int32") /* ty=Tensor[(3), int32] */;
    %939 = cast(%var_89, dtype="bool") /* ty=Tensor[(9, 15, 7), bool] */;
    %940 = dyn.reshape(%937, %938, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %941 = not_equal(%939, %940) /* ty=Tensor[(9, 15, 7), bool] */;
    (%941,)
  };
  %942(%var_98) /* ty=(Tensor[(9, 15, 7), bool],) */
}

def @func_3160(%var_3154: Tensor[(3, 12, 1), float32]) -> Tensor[(3, 12, 1), float64] {
  %943 = @func_2938() /* ty=(float32,) */;
  %944 = %943.0;
  %945 = cast(%944, dtype="float64") /* ty=float64 */;
  %946 = cast(%var_3154, dtype="float64") /* ty=Tensor[(3, 12, 1), float64] */;
  mod(%945, %946) /* ty=Tensor[(3, 12, 1), float64] */
}

def @func_4048() -> Tensor[(2, 2, 9), bool] {
  %947 = @func_2544() /* ty=(Tensor[(2, 2, 9), bool],) */;
  %947.0
}

def @func_4665(%var_4662: Tensor[(96), float32], %var_4663: Tensor[(4, 7, 11), float32], %var_4664: Tensor[(8, 66), float32]) -> (Tensor[(720), uint16], Tensor[(8, 2, 6), float32], Tensor[(96), float32], Tensor[(256), int64], Tensor[(4, 7, 11), uint8], Tensor[(16, 3, 11), float32], Tensor[(8, 66), float32]) {
  %966 = fn (%var_4632: Tensor[(96), float32], %var_4639: Tensor[(4, 7, 11), float32], %var_4652: Tensor[(8, 66), float32]) -> (Tensor[(720), uint16], Tensor[(8, 2, 6), float32], Tensor[(96), float32], Tensor[(256), int64], Tensor[(4, 7, 11), uint8], Tensor[(16, 3, 11), float32], Tensor[(8, 66), float32]) {
    %948 = @func_2060() /* ty=(Tensor[(256), int64], Tensor[(12, 4, 15), uint16], Tensor[(720), uint16], Tensor[(528), float32]) */;
    %949 = cast(6.18232f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %950 = cast(%var_4632, dtype="float32") /* ty=Tensor[(96), float32] */;
    %951 = reshape(%949, newshape=[]) /* ty=float32 */;
    %952 = reshape(%950, newshape=[8, 2, 6]) /* ty=Tensor[(8, 2, 6), float32] */;
    %953 = @func_2994() /* ty=(Tensor[(256), int64],) */;
    %954 = cast(6.18232f /* ty=float32 */, dtype="uint8") /* ty=uint8 */;
    %955 = cast(%var_4639, dtype="uint8") /* ty=Tensor[(4, 7, 11), uint8] */;
    %956 = cast(6.18232f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %957 = cast(%var_4652, dtype="float32") /* ty=Tensor[(8, 66), float32] */;
    %958 = reshape(%956, newshape=[]) /* ty=float32 */;
    %959 = reshape(%957, newshape=[528]) /* ty=Tensor[(528), float32] */;
    %960 = @func_1039(%958, %959) /* ty=(Tensor[(2, 14, 2), float64], Tensor[(16, 3, 11), float32], float32, Tensor[(528), float32]) */;
    %961 = %948.2;
    %962 = @func_2313(%951, %952) /* ty=Tensor[(8, 2, 6), float32] */;
    %963 = %953.0;
    %964 = bitwise_xor(%954, %955) /* ty=Tensor[(4, 7, 11), uint8] */;
    %965 = %960.1;
    (%961, %962, %var_4632, %963, %964, %965, %var_4652)
  };
  %966(%var_4662, %var_4663, %var_4664) /* ty=(Tensor[(720), uint16], Tensor[(8, 2, 6), float32], Tensor[(96), float32], Tensor[(256), int64], Tensor[(4, 7, 11), uint8], Tensor[(16, 3, 11), float32], Tensor[(8, 66), float32]) */
}

def @func_5379() -> Tensor[(2, 2, 9), bool] {
  %968 = fn () -> Tensor[(2, 2, 9), bool] {
    %967 = @func_1819() /* ty=(Tensor[(2, 2, 9), bool], Tensor[(4, 8, 8), int64], Tensor[(256), int64], Tensor[(1, 3, 12), bool]) */;
    %967.0
  };
  %968() /* ty=Tensor[(2, 2, 9), bool] */
}

def @func_5431(%var_5429: Tensor[(2, 14, 7), float32]) -> Tensor[(2, 14, 7), float32] {
  @func_5428(%var_5429) /* ty=Tensor[(2, 14, 7), float32] */
}

def @func_3163(%var_3161: Tensor[(3, 12, 1), float32]) -> Tensor[(3, 12, 1), float64] {
  @func_3160(%var_3161) /* ty=Tensor[(3, 12, 1), float64] */
}

def @func_5963(%var_5960: float32, %var_5961: Tensor[(8, 2, 6), float32], %var_5962: Tensor[(196), float32]) -> (Tensor[(2, 2, 9), bool], float32, Tensor[(96), float32], Tensor[(2, 2, 9), bool], Tensor[(8, 2, 6), bool], bool, Tensor[(196), float32], Tensor[(2, 14, 7), float32]) {
  @func_5958(%var_5960, %var_5961, %var_5962) /* ty=(Tensor[(2, 2, 9), bool], float32, Tensor[(96), float32], Tensor[(2, 2, 9), bool], Tensor[(8, 2, 6), bool], bool, Tensor[(196), float32], Tensor[(2, 14, 7), float32]) */
}

def @func_7673() -> (Tensor[(256), int64],) {
  @func_7671() /* ty=(Tensor[(256), int64],) */
}

def @func_113(%var_111: bool, %var_112: Tensor[(1, 3, 12), bool]) -> (Tensor[(1, 3, 12), bool],) {
  %972 = fn (%var_103: bool, %var_104: Tensor[(1, 3, 12), bool]) -> (Tensor[(1, 3, 12), bool],) {
    %969 = cast(%var_103, dtype="bool") /* ty=bool */;
    %970 = cast(%var_104, dtype="bool") /* ty=Tensor[(1, 3, 12), bool] */;
    %971 = logical_or(%969, %970) /* ty=Tensor[(1, 3, 12), bool] */;
    (%971,)
  };
  %972(%var_111, %var_112) /* ty=(Tensor[(1, 3, 12), bool],) */
}

def @func_3918() -> (float32,) {
  %973 = @func_1895() /* ty=(float32,) */;
  %974 = %973.0;
  (%974,)
}

def @func_9389(%var_9383: Tensor[(6, 1), float32]) -> (Tensor[(256), int64], Tensor[(3, 1, 2), float32], Tensor[(6, 1), float32]) {
  %975 = @func_5180() /* ty=(Tensor[(256), int64],) */;
  %976 = cast(%var_9383, dtype="float32") /* ty=Tensor[(6, 1), float32] */;
  %977 = reshape(%976, newshape=[3, 1, 2]) /* ty=Tensor[(3, 1, 2), float32] */;
  %978 = @func_6655(%977) /* ty=(Tensor[(3, 1, 2), float32],) */;
  %979 = %975.0;
  %980 = %978.0;
  (%979, %980, %var_9383)
}

def @func_2316(%var_2314: float32, %var_2315: Tensor[(8, 2, 6), float32]) -> Tensor[(8, 2, 6), float32] {
  %983 = fn (%var_2308: float32, %var_2309: Tensor[(8, 2, 6), float32]) -> Tensor[(8, 2, 6), float32] {
    %981 = cast(%var_2308, dtype="float32") /* ty=float32 */;
    %982 = cast(%var_2309, dtype="float32") /* ty=Tensor[(8, 2, 6), float32] */;
    minimum(%981, %982) /* ty=Tensor[(8, 2, 6), float32] */
  };
  %983(%var_2314, %var_2315) /* ty=Tensor[(8, 2, 6), float32] */
}

def @func_7207() -> Tensor[(2, 2, 9), bool] {
  %985 = fn () -> Tensor[(2, 2, 9), bool] {
    %984 = @func_3342() /* ty=(Tensor[(256), int64], Tensor[(2, 2, 9), bool]) */;
    %984.1
  };
  %985() /* ty=Tensor[(2, 2, 9), bool] */
}

def @func_10686(%var_10679: Tensor[(2, 7, 11), int64], %var_10680: Tensor[(2, 7, 11), int64]) -> Tensor[(2, 7, 11), int64] {
  %986 = cast(%var_10680, dtype="int64") /* ty=Tensor[(2, 7, 11), int64] */;
  %987 = shape_of(%var_10679, dtype="int32") /* ty=Tensor[(3), int32] */;
  %988 = cast(%var_10679, dtype="int64") /* ty=Tensor[(2, 7, 11), int64] */;
  %989 = dyn.reshape(%986, %987, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  logical_xor(%988, %989) /* ty=Tensor[(2, 7, 11), int64] */
}

def @func_6997() -> (Tensor[(528), float32], Tensor[(256), int64], Tensor[(256), int64], Tensor[(256), int16]) {
  @func_6995() /* ty=(Tensor[(528), float32], Tensor[(256), int64], Tensor[(256), int64], Tensor[(256), int16]) */
}

def @func_8626() -> float32 {
  %991 = fn () -> float32 {
    %990 = @func_1889() /* ty=(Tensor[(2, 2, 9), bool], float32, float32, Tensor[(528), float32]) */;
    %990.1
  };
  %991() /* ty=float32 */
}

def @func_3343() -> (Tensor[(256), int64], Tensor[(2, 2, 9), bool]) {
  %995 = fn () -> (Tensor[(256), int64], Tensor[(2, 2, 9), bool]) {
    %992 = @func_2994() /* ty=(Tensor[(256), int64],) */;
    %993 = %992.0;
    %994 = @func_1637() /* ty=Tensor[(2, 2, 9), bool] */;
    (%993, %994)
  };
  %995() /* ty=(Tensor[(256), int64], Tensor[(2, 2, 9), bool]) */
}

def @func_2546() -> (Tensor[(2, 2, 9), bool],) {
  @func_2544() /* ty=(Tensor[(2, 2, 9), bool],) */
}

def @func_5428(%var_5413: Tensor[(2, 14, 7), float32]) -> Tensor[(2, 14, 7), float32] {
  %996 = cast(%var_5413, dtype="float32") /* ty=Tensor[(2, 14, 7), float32] */;
  acosh(%996) /* ty=Tensor[(2, 14, 7), float32] */
}

def @func_1821() -> (Tensor[(2, 2, 9), bool], Tensor[(4, 8, 8), int64], Tensor[(256), int64], Tensor[(1, 3, 12), bool]) {
  @func_1819() /* ty=(Tensor[(2, 2, 9), bool], Tensor[(4, 8, 8), int64], Tensor[(256), int64], Tensor[(1, 3, 12), bool]) */
}

def @func_8922() -> (Tensor[(256), int64], Tensor[(256), int64]) {
  %1000 = fn () -> (Tensor[(256), int64], Tensor[(256), int64]) {
    %997 = @func_7590() /* ty=(Tensor[(256), int64], Tensor[(256), int64]) */;
    %998 = @func_2026() /* ty=Tensor[(256), int64] */;
    %999 = %997.1;
    (%998, %999)
  };
  %1000() /* ty=(Tensor[(256), int64], Tensor[(256), int64]) */
}

def @func_3462() -> (Tensor[(14, 8, 7), float64], Tensor[(9, 15, 7), bool], Tensor[(945), float64]) {
  @func_3460() /* ty=(Tensor[(14, 8, 7), float64], Tensor[(9, 15, 7), bool], Tensor[(945), float64]) */
}

def @func_9492() -> (Tensor[(528), float32],) {
  %1001 = @func_6995() /* ty=(Tensor[(528), float32], Tensor[(256), int64], Tensor[(256), int64], Tensor[(256), int16]) */;
  %1002 = %1001.0;
  (%1002,)
}

def @func_2406(%var_2404: Tensor[(105, 9), float64], %var_2405: Tensor[(8, 24), float32]) -> (Tensor[(528), float32], Tensor[(1, 3, 12), bool], Tensor[(105, 9), float64], Tensor[(2, 2, 9), float32], Tensor[(8, 24), uint8]) {
  @func_2402(%var_2404, %var_2405) /* ty=(Tensor[(528), float32], Tensor[(1, 3, 12), bool], Tensor[(105, 9), float64], Tensor[(2, 2, 9), float32], Tensor[(8, 24), uint8]) */
}

def @func_7048(%var_7046: Tensor[(16, 4, 13), uint16], %var_7047: Tensor[(16, 4, 13), uint16]) -> (Tensor[(16, 4, 13), uint16], Tensor[(16, 4, 13), float64], Tensor[(720), uint16]) {
  @func_7044(%var_7046, %var_7047) /* ty=(Tensor[(16, 4, 13), uint16], Tensor[(16, 4, 13), float64], Tensor[(720), uint16]) */
}

def @func_7328() -> (Tensor[(2, 2, 9), bool],) {
  @func_7326() /* ty=(Tensor[(2, 2, 9), bool],) */
}

def @func_681(%var_679: float32, %var_680: Tensor[(16, 3, 11), float32]) -> Tensor[(16, 3, 11), float32] {
  @func_677(%var_679, %var_680) /* ty=Tensor[(16, 3, 11), float32] */
}

def @func_4511() -> (float32,) {
  %1003 = @func_3918() /* ty=(float32,) */;
  %1004 = %1003.0;
  (%1004,)
}

def @func_839(%var_837: Tensor[(12, 4, 15), uint16]) -> Tensor[(12, 4, 15), uint16] {
  @func_836(%var_837) /* ty=Tensor[(12, 4, 15), uint16] */
}

def @func_9465() -> (Tensor[(2, 2, 9), bool], float32) {
  @func_9463() /* ty=(Tensor[(2, 2, 9), bool], float32) */
}

def @func_3986() -> (float32, Tensor[(80), uint64], Tensor[(80), uint64]) {
  %1011 = fn () -> (float32, Tensor[(80), uint64], Tensor[(80), uint64]) {
    %1005 = @func_1889() /* ty=(Tensor[(2, 2, 9), bool], float32, float32, Tensor[(528), float32]) */;
    %1006 = cast(meta[relay.Constant][51] /* ty=Tensor[(80), uint64] */, dtype="uint64") /* ty=Tensor[(80), uint64] */;
    %1007 = reshape(%1006, newshape=[80]) /* ty=Tensor[(80), uint64] */;
    %1008 = @func_2700(%1007) /* ty=(Tensor[(2, 2, 9), bool], Tensor[(10, 8), uint64], Tensor[(80), uint64]) */;
    %1009 = %1005.1;
    %1010 = %1008.2;
    (%1009, %1010, meta[relay.Constant][51] /* ty=Tensor[(80), uint64] */)
  };
  %1011() /* ty=(float32, Tensor[(80), uint64], Tensor[(80), uint64]) */
}

def @func_2258(%var_2256: float64, %var_2257: Tensor[(15, 13, 6), float64]) -> (Tensor[(15, 13, 6), float64],) {
  @func_2254(%var_2256, %var_2257) /* ty=(Tensor[(15, 13, 6), float64],) */
}

def @func_2703(%var_2701: Tensor[(80), uint64]) -> (Tensor[(2, 2, 9), bool], Tensor[(10, 8), uint64], Tensor[(80), uint64]) {
  @func_2700(%var_2701) /* ty=(Tensor[(2, 2, 9), bool], Tensor[(10, 8), uint64], Tensor[(80), uint64]) */
}

def @func_7807() -> (Tensor[(256), int64],) {
  @func_7805() /* ty=(Tensor[(256), int64],) */
}

def @func_7908(%var_7906: Tensor[(33), float64], %var_7907: Tensor[(495), float64]) -> (Tensor[(720), uint16], Tensor[(11, 15, 3), float64], Tensor[(33), float64], Tensor[(495), float64], float32, float32) {
  %1024 = fn (%var_7888: Tensor[(33), float64], %var_7889: Tensor[(495), float64]) -> (Tensor[(720), uint16], Tensor[(11, 15, 3), float64], Tensor[(33), float64], Tensor[(495), float64], float32, float32) {
    %1012 = @func_5791() /* ty=(Tensor[(720), uint16], Tensor[(72), int8], Tensor[(576), int8], Tensor[(1, 3, 12), float64]) */;
    %1013 = cast(%var_7888, dtype="float64") /* ty=Tensor[(33), float64] */;
    %1014 = cast(%var_7889, dtype="float64") /* ty=Tensor[(495), float64] */;
    %1015 = reshape(%1013, newshape=[11, 1, 3]) /* ty=Tensor[(11, 1, 3), float64] */;
    %1016 = reshape(%1014, newshape=[11, 15, 3]) /* ty=Tensor[(11, 15, 3), float64] */;
    %1017 = @func_7559(%1015, %1016) /* ty=(Tensor[(11, 15, 3), float64], Tensor[(11, 1, 3), int64]) */;
    %1018 = @func_7372() /* ty=(float32,) */;
    %1019 = @func_7738() /* ty=(float32,) */;
    %1020 = %1012.0;
    %1021 = %1017.0;
    %1022 = %1018.0;
    %1023 = %1019.0;
    (%1020, %1021, %var_7888, %var_7889, %1022, %1023)
  };
  %1024(%var_7906, %var_7907) /* ty=(Tensor[(720), uint16], Tensor[(11, 15, 3), float64], Tensor[(33), float64], Tensor[(495), float64], float32, float32) */
}

def @func_9337() -> Tensor[(2, 2, 9), bool] {
  %1026 = fn () -> Tensor[(2, 2, 9), bool] {
    %1025 = @func_5680() /* ty=(Tensor[(2, 2, 9), bool],) */;
    %1025.0
  };
  %1026() /* ty=Tensor[(2, 2, 9), bool] */
}

def @func_8770(%var_8769: Tensor[(192), float32]) -> (Tensor[(256), int64], Tensor[(256), int64], Tensor[(2, 2, 9), bool], Tensor[(11, 4, 12), bool], Tensor[(192), float32]) {
  %1037 = fn (%var_8764: Tensor[(192), float32]) -> (Tensor[(256), int64], Tensor[(256), int64], Tensor[(2, 2, 9), bool], Tensor[(11, 4, 12), bool], Tensor[(192), float32]) {
    %1027 = @func_6995() /* ty=(Tensor[(528), float32], Tensor[(256), int64], Tensor[(256), int64], Tensor[(256), int16]) */;
    %1028 = @func_6058() /* ty=(float32, Tensor[(256), int64]) */;
    %1029 = @func_2544() /* ty=(Tensor[(2, 2, 9), bool],) */;
    %1030 = cast(%var_8764, dtype="float32") /* ty=Tensor[(192), float32] */;
    %1031 = reshape(%1030, newshape=[192]) /* ty=Tensor[(192), float32] */;
    %1032 = @func_1550(%1031) /* ty=(Tensor[(11, 4, 12), bool], Tensor[(11, 4, 12), float32], Tensor[(11, 4, 12), uint8], Tensor[(2, 16, 6), bool], Tensor[(2, 16, 6), float32]) */;
    %1033 = %1027.2;
    %1034 = %1028.1;
    %1035 = %1029.0;
    %1036 = %1032.0;
    (%1033, %1034, %1035, %1036, %var_8764)
  };
  %1037(%var_8769) /* ty=(Tensor[(256), int64], Tensor[(256), int64], Tensor[(2, 2, 9), bool], Tensor[(11, 4, 12), bool], Tensor[(192), float32]) */
}

def @func_7319() -> float32 {
  %1038 = fn () -> float32 {
    @func_3470() /* ty=float32 */
  };
  %1038() /* ty=float32 */
}

def @func_2655() -> (Tensor[(2, 2, 9), bool],) {
  %1040 = fn () -> (Tensor[(2, 2, 9), bool],) {
    %1039 = @func_1903() /* ty=Tensor[(2, 2, 9), bool] */;
    (%1039,)
  };
  %1040() /* ty=(Tensor[(2, 2, 9), bool],) */
}

def @func_2347(%var_2345: Tensor[(528), float32]) -> (Tensor[(528), int32], Tensor[(528), uint64]) {
  @func_2344(%var_2345) /* ty=(Tensor[(528), int32], Tensor[(528), uint64]) */
}

def @func_1246(%var_1244: Tensor[(4, 8, 8), int64], %var_1245: Tensor[(4, 8, 8), int64]) -> (Tensor[(4, 8, 8), int64],) {
  %1046 = fn (%var_1227: Tensor[(4, 8, 8), int64], %var_1228: Tensor[(4, 8, 8), int64]) -> (Tensor[(4, 8, 8), int64],) {
    %1041 = cast(%var_1228, dtype="int64") /* ty=Tensor[(4, 8, 8), int64] */;
    %1042 = shape_of(%var_1227, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1043 = cast(%var_1227, dtype="int64") /* ty=Tensor[(4, 8, 8), int64] */;
    %1044 = dyn.reshape(%1041, %1042, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %1045 = logical_xor(%1043, %1044) /* ty=Tensor[(4, 8, 8), int64] */;
    (%1045,)
  };
  %1046(%var_1244, %var_1245) /* ty=(Tensor[(4, 8, 8), int64],) */
}

def @func_3589() -> (Tensor[(256), int64],) {
  %1047 = @func_2026() /* ty=Tensor[(256), int64] */;
  (%1047,)
}

def @main(%var_10782: Tensor[(10, 7, 8), uint8], %var_10783: Tensor[(10, 7, 8), uint8], %var_10818: uint16) -> (Tensor[(945), uint32], Tensor[(10, 7, 8), bool], Tensor[(5, 6, 13), uint16], uint16, Tensor[(10, 7, 8), int32]) {
  %1048 = @func_7831() /* ty=(Tensor[(945), uint32],) */;
  %1049 = cast(%var_10783, dtype="uint8") /* ty=Tensor[(10, 7, 8), uint8] */;
  %1050 = shape_of(%var_10782, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1051 = cast(%var_10782, dtype="uint8") /* ty=Tensor[(10, 7, 8), uint8] */;
  %1052 = dyn.reshape(%1049, %1050, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %1053 = bitwise_xor(%1051, %1052) /* ty=Tensor[(10, 7, 8), uint8] */;
  %1054 = cast(meta[relay.Constant][52] /* ty=Tensor[(10, 7, 8), uint8] */, dtype="bool") /* ty=Tensor[(10, 7, 8), bool] */;
  %1055 = shape_of(%1053, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1056 = cast(%1053, dtype="bool") /* ty=Tensor[(10, 7, 8), bool] */;
  %1057 = dyn.reshape(%1054, %1055, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1058 = cast(%var_10818, dtype="uint16") /* ty=uint16 */;
  %1059 = reshape(%1058, newshape=[]) /* ty=uint16 */;
  %1060 = cast(%var_10782, dtype="float32") /* ty=Tensor[(10, 7, 8), float32] */;
  %1061 = tan(%1060) /* ty=Tensor[(10, 7, 8), float32] */;
  %1062 = cast(%1061, dtype="float32") /* ty=Tensor[(10, 7, 8), float32] */;
  %1063 = asin(%1062) /* ty=Tensor[(10, 7, 8), float32] */;
  %1064 = cast(%1061, dtype="int32") /* ty=Tensor[(10, 7, 8), int32] */;
  %1065 = shape_of(%1063, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1066 = cast(%1063, dtype="int32") /* ty=Tensor[(10, 7, 8), int32] */;
  %1067 = dyn.reshape(%1064, %1065, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %1068 = %1048.0;
  %1069 = greater_equal(%1056, %1057) /* ty=Tensor[(10, 7, 8), bool] */;
  %1070 = @func_5110(%1059) /* ty=Tensor[(5, 6, 13), uint16] */;
  %1071 = left_shift(%1066, %1067) /* ty=Tensor[(10, 7, 8), int32] */;
  (%1068, %1069, %1070, %var_10818, %1071)
}

def @func_9762() -> (Tensor[(528), float32], Tensor[(9, 15, 7), bool], Tensor[(945), float64], Tensor[(256), int64]) {
  @func_9760() /* ty=(Tensor[(528), float32], Tensor[(9, 15, 7), bool], Tensor[(945), float64], Tensor[(256), int64]) */
}

def @func_5081() -> (Tensor[(720), uint16],) {
  %1074 = fn () -> (Tensor[(720), uint16],) {
    %1072 = @func_3289() /* ty=(Tensor[(528), float32], Tensor[(720), uint16], Tensor[(2, 2, 9), bool]) */;
    %1073 = %1072.1;
    (%1073,)
  };
  %1074() /* ty=(Tensor[(720), uint16],) */
}

def @func_4078() -> (Tensor[(256), int64],) {
  %1075 = @func_3897() /* ty=Tensor[(256), int64] */;
  (%1075,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen256/build/output.py", line 3344, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:01:28] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

