==========mod==========
#[version = "0.0.5"]
def @func_6851(%var_6823: Tensor[(6, 16, 11), float32]) -> (Tensor[(6, 16, 11), int32], Tensor[(15, 11, 14), float64]) {
  %0 = @func_4859() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), int8]) */;
  %1 = %0.0;
  %2 = cast(%var_6823, dtype="int32") /* ty=Tensor[(6, 16, 11), int32] */;
  %3 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
  %4 = cast(%1, dtype="int32") /* ty=Tensor[(6, 16, 11), int32] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %6 = @func_5435() /* ty=(Tensor[(15, 11, 14), float64],) */;
  %7 = bitwise_and(%4, %5) /* ty=Tensor[(6, 16, 11), int32] */;
  %8 = %6.0;
  (%7, %8)
}

def @func_4449(%var_4442: Tensor[(8, 7, 4), int32], %var_4443: Tensor[(8, 7, 4), int32]) -> (Tensor[(8, 7, 4), int32],) {
  %9 = cast(%var_4443, dtype="int32") /* ty=Tensor[(8, 7, 4), int32] */;
  %10 = shape_of(%var_4442, dtype="int32") /* ty=Tensor[(3), int32] */;
  %11 = cast(%var_4442, dtype="int32") /* ty=Tensor[(8, 7, 4), int32] */;
  %12 = dyn.reshape(%9, %10, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %13 = bitwise_xor(%11, %12) /* ty=Tensor[(8, 7, 4), int32] */;
  (%13,)
}

def @func_5883() -> (Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float64], Tensor[(8, 12, 11), float32], Tensor[(6, 16, 11), float32], Tensor[(135), float32], Tensor[(11, 99), float32]) {
  %14 = @func_1705() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %15 = @func_3439() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(8, 12, 11), float64]) */;
  %16 = %15.1;
  %17 = cast(%16, dtype="float32") /* ty=Tensor[(8, 12, 11), float32] */;
  %18 = @func_2138() /* ty=Tensor[(6, 16, 11), float64] */;
  %19 = cast(%18, dtype="float32") /* ty=Tensor[(6, 16, 11), float32] */;
  %20 = cast(meta[relay.Constant][0] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %21 = cast(meta[relay.Constant][1] /* ty=Tensor[(11, 99), float32] */, dtype="float32") /* ty=Tensor[(11, 99), float32] */;
  %22 = reshape(%19, newshape=[6, 16, 11]) /* ty=Tensor[(6, 16, 11), float32] */;
  %23 = reshape(%20, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %24 = reshape(%21, newshape=[1089]) /* ty=Tensor[(1089), float32] */;
  %25 = @func_2458(%22, %23, %24) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(1, 104), float64], Tensor[(135), float32], Tensor[(1089), float32]) */;
  %26 = %14.0;
  %27 = log(%17) /* ty=Tensor[(8, 12, 11), float32] */;
  %28 = %25.0;
  (%26, %18, %27, %28, meta[relay.Constant][0] /* ty=Tensor[(135), float32] */, meta[relay.Constant][1] /* ty=Tensor[(11, 99), float32] */)
}

def @func_1302(%var_1283: Tensor[(1, 8, 13), float64]) -> Tensor[(1, 8, 13), float64] {
  %29 = cast(%var_1283, dtype="float64") /* ty=Tensor[(1, 8, 13), float64] */;
  atanh(%29) /* ty=Tensor[(1, 8, 13), float64] */
}

def @func_8249() -> (Tensor[(6, 16, 11), float64], Tensor[(35), float64]) {
  %30 = @func_2507() /* ty=(Tensor[(6, 16, 11), float64],) */;
  %31 = %30.0;
  %32 = cast(%31, dtype="float32") /* ty=Tensor[(6, 16, 11), float32] */;
  %33 = reshape(%32, newshape=[6, 16, 11]) /* ty=Tensor[(6, 16, 11), float32] */;
  %34 = @func_6216(%33) /* ty=(Tensor[(?, 104), uint32], Tensor[(6, 16, 11), int64], Tensor[(6, 16, 11), float32], Tensor[(35), float64]) */;
  %35 = %34.3;
  (%31, %35)
}

def @func_2813(%var_2806: bool) -> (Tensor[(6, 16, 11), bool], Tensor[(2, 11, 12), bool], bool, Tensor[(264), bool]) {
  %36 = @func_2562() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %37 = %36.0;
  %38 = cast(meta[relay.Constant][2] /* ty=Tensor[(6, 16, 11), float32] */, dtype="bool") /* ty=Tensor[(6, 16, 11), bool] */;
  %39 = shape_of(%37, dtype="int32") /* ty=Tensor[(3), int32] */;
  %40 = cast(%37, dtype="bool") /* ty=Tensor[(6, 16, 11), bool] */;
  %41 = dyn.reshape(%38, %39, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %42 = cast(%var_2806, dtype="bool") /* ty=bool */;
  %43 = cast(meta[relay.Constant][3] /* ty=Tensor[(264), bool] */, dtype="bool") /* ty=Tensor[(264), bool] */;
  %44 = reshape(%42, newshape=[]) /* ty=bool */;
  %45 = reshape(%43, newshape=[2, 11, 12]) /* ty=Tensor[(2, 11, 12), bool] */;
  %46 = @func_2771(%44, %45) /* ty=(Tensor[(2, 11, 12), bool],) */;
  %47 = greater_equal(%40, %41) /* ty=Tensor[(6, 16, 11), bool] */;
  %48 = %46.0;
  (%47, %48, %var_2806, meta[relay.Constant][3] /* ty=Tensor[(264), bool] */)
}

def @func_1643() -> (Tensor[(6, 16, 11), float32],) {
  %49 = cast(meta[relay.Constant][4] /* ty=Tensor[(6, 16, 11), float32] */, dtype="float32") /* ty=Tensor[(6, 16, 11), float32] */;
  %50 = cosh(%49) /* ty=Tensor[(6, 16, 11), float32] */;
  (%50,)
}

def @func_1705() -> (Tensor[(6, 16, 11), float32],) {
  %51 = @func_1678() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool], Tensor[(420), uint32]) */;
  %52 = %51.0;
  (%52,)
}

def @func_7750(%var_7744: Tensor[(1584), float32]) -> (Tensor[(6, 16, 11), float32], Tensor[(132, 12), float32], Tensor[(1584), float32]) {
  %53 = @func_5010() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float64], Tensor[(264), bool]) */;
  %54 = cast(%var_7744, dtype="float32") /* ty=Tensor[(1584), float32] */;
  %55 = reshape(%54, newshape=[132, 12]) /* ty=Tensor[(132, 12), float32] */;
  %56 = @func_6099(%55) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool], float32, Tensor[(1089), float32], Tensor[(132, 12), float32], Tensor[(2, 11, 12), float64]) */;
  %57 = %53.0;
  %58 = %56.4;
  (%57, %58, %var_7744)
}

def @func_4299() -> (Tensor[(6, 16, 11), float64], bool, Tensor[(264), bool], Tensor[(2, 11, 12), float64]) {
  %59 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %60 = cast(meta[relay.Constant][5] /* ty=Tensor[(264), bool] */, dtype="bool") /* ty=Tensor[(264), bool] */;
  %61 = reshape(%59, newshape=[]) /* ty=bool */;
  %62 = reshape(%60, newshape=[2, 11, 12]) /* ty=Tensor[(2, 11, 12), bool] */;
  %63 = @func_2771(%61, %62) /* ty=(Tensor[(2, 11, 12), bool],) */;
  %64 = %63.0;
  %65 = cast(%64, dtype="float64") /* ty=Tensor[(2, 11, 12), float64] */;
  %66 = @func_2138() /* ty=Tensor[(6, 16, 11), float64] */;
  %67 = atan(%65) /* ty=Tensor[(2, 11, 12), float64] */;
  (%66, False /* ty=bool */, meta[relay.Constant][5] /* ty=Tensor[(264), bool] */, %67)
}

def @func_1233(%var_1207: Tensor[(10, 8, 3), float32], %var_1212: Tensor[(1584), float32]) -> (Tensor[(10, 8, 3), float32], Tensor[(16, 11, 9), bool], Tensor[(1584), float32]) {
  %68 = cast(%var_1207, dtype="float32") /* ty=Tensor[(10, 8, 3), float32] */;
  %69 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(10, 8, 3), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %70 = cast(meta[relay.Constant][6] /* ty=Tensor[(10, 8, 3), float32] */, dtype="float32") /* ty=Tensor[(10, 8, 3), float32] */;
  %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %72 = cast(%var_1212, dtype="float32") /* ty=Tensor[(1584), float32] */;
  %73 = cast(%var_1212, dtype="float32") /* ty=Tensor[(1584), float32] */;
  %74 = reshape(%72, newshape=[16, 11, 9]) /* ty=Tensor[(16, 11, 9), float32] */;
  %75 = reshape(%73, newshape=[16, 11, 9]) /* ty=Tensor[(16, 11, 9), float32] */;
  %76 = @func_423(%74, %75) /* ty=(Tensor[(16, 11, 9), bool], Tensor[(16, 11, 9), int16]) */;
  %77 = floor_mod(%70, %71) /* ty=Tensor[(10, 8, 3), float32] */;
  %78 = %76.0;
  (%77, %78, %var_1212)
}

def @func_5802() -> Tensor[(6, 16, 11), float32] {
  %79 = @func_4574() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %79.0
}

def @func_2701() -> Tensor[(6, 16, 11), float32] {
  %80 = @func_1643() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %80.0
}

def @func_5635(%var_5615: Tensor[(135), float32]) -> (Tensor[(6, 16, 11), float32], Tensor[(64), float32], Tensor[(35), float64], Tensor[(135), float32], Tensor[(135), float64], Tensor[(6, 16, 11), float32]) {
  %81 = @func_2686() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %82 = cast(meta[relay.Constant][7] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
  %83 = cast(meta[relay.Constant][8] /* ty=Tensor[(35), float64] */, dtype="float64") /* ty=Tensor[(35), float64] */;
  %84 = cast(%var_5615, dtype="float32") /* ty=Tensor[(135), float32] */;
  %85 = reshape(%82, newshape=[8, 1, 8]) /* ty=Tensor[(8, 1, 8), float32] */;
  %86 = reshape(%83, newshape=[35]) /* ty=Tensor[(35), float64] */;
  %87 = reshape(%84, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %88 = @func_4070(%85, %86, %87) /* ty=(Tensor[(8, 1, 8), float32], Tensor[(6, 16, 11), float64], Tensor[(6, 16, 11), float32], Tensor[(7, 5), float64], Tensor[(35), float64], Tensor[(5, 3, 9), float32], Tensor[(135), float32], Tensor[(8, 1, 8), float64]) */;
  %89 = %88.6;
  %90 = cast(%89, dtype="float64") /* ty=Tensor[(135), float64] */;
  %91 = @func_3118() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %92 = %81.0;
  %93 = rsqrt(%90) /* ty=Tensor[(135), float64] */;
  %94 = %91.0;
  (%92, meta[relay.Constant][7] /* ty=Tensor[(64), float32] */, meta[relay.Constant][8] /* ty=Tensor[(35), float64] */, %var_5615, %93, %94)
}

def @func_7359() -> (Tensor[(6, 16, 11), float32], Tensor[(16, 11, 16), uint32], Tensor[(6, 16, 11), float32]) {
  %95 = cast(meta[relay.Constant][9] /* ty=Tensor[(16, 11, 16), float32] */, dtype="float32") /* ty=Tensor[(16, 11, 16), float32] */;
  %96 = atan(%95) /* ty=Tensor[(16, 11, 16), float32] */;
  %97 = cast(meta[relay.Constant][10] /* ty=Tensor[(16, 11, 16), float32] */, dtype="uint32") /* ty=Tensor[(16, 11, 16), uint32] */;
  %98 = shape_of(%96, dtype="int32") /* ty=Tensor[(3), int32] */;
  %99 = cast(%96, dtype="uint32") /* ty=Tensor[(16, 11, 16), uint32] */;
  %100 = dyn.reshape(%97, %98, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %101 = @func_5802() /* ty=Tensor[(6, 16, 11), float32] */;
  %102 = minimum(%99, %100) /* ty=Tensor[(16, 11, 16), uint32] */;
  %103 = @func_7187() /* ty=Tensor[(6, 16, 11), float32] */;
  (%101, %102, %103)
}

def @func_2951(%var_2915: float32, %var_2916: Tensor[(1089), float32]) -> (Tensor[(1056), float64], float32, Tensor[(1089), float32], Tensor[(2, 11, 12), bool], Tensor[(264), bool], Tensor[(6, 16, 11), float32]) {
  %104 = cast(%var_2915, dtype="float32") /* ty=float32 */;
  %105 = cast(%var_2916, dtype="float32") /* ty=Tensor[(1089), float32] */;
  %106 = reshape(%104, newshape=[]) /* ty=float32 */;
  %107 = reshape(%105, newshape=[1089]) /* ty=Tensor[(1089), float32] */;
  %108 = @func_1933(%106, %107) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool], Tensor[(1056), float64], float32, Tensor[(1089), float32], Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool]) */;
  %109 = cast(%var_2915, dtype="bool") /* ty=bool */;
  %110 = cast(meta[relay.Constant][11] /* ty=Tensor[(264), bool] */, dtype="bool") /* ty=Tensor[(264), bool] */;
  %111 = reshape(%109, newshape=[]) /* ty=bool */;
  %112 = reshape(%110, newshape=[2, 11, 12]) /* ty=Tensor[(2, 11, 12), bool] */;
  %113 = @func_2771(%111, %112) /* ty=(Tensor[(2, 11, 12), bool],) */;
  %114 = @func_2871() /* ty=Tensor[(6, 16, 11), float32] */;
  %115 = cast(%114, dtype="float32") /* ty=Tensor[(6, 16, 11), float32] */;
  %116 = %108.2;
  %117 = %113.0;
  %118 = atanh(%115) /* ty=Tensor[(6, 16, 11), float32] */;
  (%116, %var_2915, %var_2916, %117, meta[relay.Constant][11] /* ty=Tensor[(264), bool] */, %118)
}

def @func_6949() -> (Tensor[(6, 16, 11), float32], Tensor[(2, 11, 12), float32], float32) {
  %119 = @func_5536() /* ty=(Tensor[(2, 11, 12), float64],) */;
  %120 = %119.0;
  %121 = cast(%120, dtype="float32") /* ty=Tensor[(2, 11, 12), float32] */;
  %122 = @func_6150() /* ty=(Tensor[(6, 16, 11), float32], float32, float32, Tensor[(1089), float32]) */;
  %123 = @func_6677() /* ty=Tensor[(6, 16, 11), float32] */;
  %124 = sqrt(%121) /* ty=Tensor[(2, 11, 12), float32] */;
  %125 = %122.2;
  (%123, %124, %125)
}

def @func_5412() -> Tensor[(6, 16, 11), float64] {
  @func_3833() /* ty=Tensor[(6, 16, 11), float64] */
}

def @func_8465() -> (Tensor[(6, 16, 11), float64], Tensor[(6, 16, 11), int8]) {
  %126 = @func_7556() /* ty=(Tensor[(264), bool], Tensor[(6, 16, 11), float64]) */;
  %127 = @func_5152() /* ty=(Tensor[(6, 16, 11), int8], Tensor[(6, 16, 11), float32]) */;
  %128 = %126.1;
  %129 = %127.0;
  (%128, %129)
}

def @func_8577(%var_8520: Tensor[(121, 9), float32], %var_8525: Tensor[(7, 1), float32], %var_8526: Tensor[(2, 1), float64], %var_8537: Tensor[(2080), uint16]) -> (Tensor[(6, 16, 11), float64], Tensor[(2, 11, 12), bool], Tensor[(121, 9), float32], Tensor[(1, 7, 1), float32], Tensor[(7, 1), float32], Tensor[(2, 1), float64], Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float32], Tensor[(2080), float32], Tensor[(2, 11, 12), float64]) {
  %130 = cast(3.80144f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %131 = cast(%var_8520, dtype="float32") /* ty=Tensor[(121, 9), float32] */;
  %132 = reshape(%130, newshape=[]) /* ty=float32 */;
  %133 = reshape(%131, newshape=[1089]) /* ty=Tensor[(1089), float32] */;
  %134 = @func_2951(%132, %133) /* ty=(Tensor[(1056), float64], float32, Tensor[(1089), float32], Tensor[(2, 11, 12), bool], Tensor[(264), bool], Tensor[(6, 16, 11), float32]) */;
  %135 = cast(%var_8525, dtype="float32") /* ty=Tensor[(7, 1), float32] */;
  %136 = cast(%var_8526, dtype="float64") /* ty=Tensor[(2, 1), float64] */;
  %137 = reshape(%135, newshape=[1, 7, 1]) /* ty=Tensor[(1, 7, 1), float32] */;
  %138 = reshape(%136, newshape=[1, 2]) /* ty=Tensor[(1, 2), float64] */;
  %139 = @func_5950(%137, %138) /* ty=(Tensor[(1, 7, 1), float32], Tensor[(2, 8, 12), float64], Tensor[(1, 2), float64]) */;
  %140 = cast(%var_8537, dtype="uint16") /* ty=Tensor[(2080), uint16] */;
  %141 = reshape(%140, newshape=[13, 10, 16]) /* ty=Tensor[(13, 10, 16), uint16] */;
  %142 = @func_5070(%141) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float32], Tensor[(13, 10, 16), bool], Tensor[(13, 10, 16), float64]) */;
  %143 = cast(%var_8537, dtype="float32") /* ty=Tensor[(2080), float32] */;
  %144 = cast(3.80144f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %145 = @func_5536() /* ty=(Tensor[(2, 11, 12), float64],) */;
  %146 = @func_2138() /* ty=Tensor[(6, 16, 11), float64] */;
  %147 = %134.3;
  %148 = %139.0;
  %149 = %142.1;
  %150 = @func_2871() /* ty=Tensor[(6, 16, 11), float32] */;
  %151 = minimum(%143, %144) /* ty=Tensor[(2080), float32] */;
  %152 = %145.0;
  (%146, %147, %var_8520, %148, %var_8525, %var_8526, %149, %150, %151, %152)
}

def @func_904(%var_897: Tensor[(14, 5, 6), uint32]) -> (Tensor[(14, 5, 6), bool],) {
  %153 = cast(meta[relay.Constant][12] /* ty=Tensor[(14, 5, 6), uint32] */, dtype="bool") /* ty=Tensor[(14, 5, 6), bool] */;
  %154 = shape_of(%var_897, dtype="int32") /* ty=Tensor[(3), int32] */;
  %155 = cast(%var_897, dtype="bool") /* ty=Tensor[(14, 5, 6), bool] */;
  %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %157 = less(%155, %156) /* ty=Tensor[(14, 5, 6), bool] */;
  (%157,)
}

def @func_1014(%var_962: Tensor[(12, 11, 4), uint64], %var_974: Tensor[(12, 11, 4), float64], %var_988: Tensor[(24), uint16]) -> (Tensor[(12, 11, 4), uint64], Tensor[(12, 11, 4), uint32], Tensor[(12, 11, 4), float64], Tensor[(10, 2, 12), uint16], Tensor[(24), uint16], Tensor[(120, 2), uint16], Tensor[(1, 7, 5), float64], Tensor[(35), float64]) {
  %158 = cast(%var_962, dtype="uint64") /* ty=Tensor[(12, 11, 4), uint64] */;
  %159 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(12, 11, 4), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %160 = cast(meta[relay.Constant][13] /* ty=Tensor[(12, 11, 4), uint64] */, dtype="uint64") /* ty=Tensor[(12, 11, 4), uint64] */;
  %161 = dyn.reshape(%158, %159, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %162 = cast(%var_962, dtype="float64") /* ty=Tensor[(12, 11, 4), float64] */;
  %163 = rsqrt(%162) /* ty=Tensor[(12, 11, 4), float64] */;
  %164 = cast(%var_974, dtype="uint32") /* ty=Tensor[(12, 11, 4), uint32] */;
  %165 = shape_of(%163, dtype="int32") /* ty=Tensor[(3), int32] */;
  %166 = cast(%163, dtype="uint32") /* ty=Tensor[(12, 11, 4), uint32] */;
  %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %168 = cast(%163, dtype="float64") /* ty=Tensor[(12, 11, 4), float64] */;
  %169 = cast(%var_988, dtype="uint16") /* ty=Tensor[(24), uint16] */;
  %170 = cast(meta[relay.Constant][14] /* ty=Tensor[(120, 2), uint16] */, dtype="uint16") /* ty=Tensor[(120, 2), uint16] */;
  %171 = reshape(%169, newshape=[1, 2, 12]) /* ty=Tensor[(1, 2, 12), uint16] */;
  %172 = reshape(%170, newshape=[10, 2, 12]) /* ty=Tensor[(10, 2, 12), uint16] */;
  %173 = cast(meta[relay.Constant][15] /* ty=Tensor[(35), float64] */, dtype="float64") /* ty=Tensor[(35), float64] */;
  %174 = reshape(%173, newshape=[1, 7, 5]) /* ty=Tensor[(1, 7, 5), float64] */;
  %175 = @func_459(%174) /* ty=(Tensor[(1, 7, 5), float64],) */;
  %176 = bitwise_or(%160, %161) /* ty=Tensor[(12, 11, 4), uint64] */;
  %177 = maximum(%166, %167) /* ty=Tensor[(12, 11, 4), uint32] */;
  %178 = atan(%168) /* ty=Tensor[(12, 11, 4), float64] */;
  %179 = @func_193(%171, %172) /* ty=Tensor[(10, 2, 12), uint16] */;
  %180 = %175.0;
  (%176, %177, %178, %179, %var_988, meta[relay.Constant][14] /* ty=Tensor[(120, 2), uint16] */, %180, meta[relay.Constant][15] /* ty=Tensor[(35), float64] */)
}

def @func_7877() -> (Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool], Tensor[(420), uint32], Tensor[(2, 11, 12), float32], Tensor[(6, 16, 11), float32], Tensor[(104), float64], Tensor[(6, 16, 11), float32]) {
  %181 = cast(meta[relay.Constant][16] /* ty=Tensor[(420), uint32] */, dtype="uint32") /* ty=Tensor[(420), uint32] */;
  %182 = reshape(%181, newshape=[14, 5, 6]) /* ty=Tensor[(14, 5, 6), uint32] */;
  %183 = @func_904(%182) /* ty=(Tensor[(14, 5, 6), bool],) */;
  %184 = @func_6949() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(2, 11, 12), float32], float32) */;
  %185 = cast(meta[relay.Constant][17] /* ty=Tensor[(104), float64] */, dtype="float64") /* ty=Tensor[(104), float64] */;
  %186 = reshape(%185, newshape=[52, 2]) /* ty=Tensor[(52, 2), float64] */;
  %187 = @func_2627(%186) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(52, 2), bool]) */;
  %188 = @func_4574() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %189 = @func_2871() /* ty=Tensor[(6, 16, 11), float32] */;
  %190 = %183.0;
  %191 = %184.1;
  %192 = %187.0;
  %193 = %188.0;
  (%189, %190, meta[relay.Constant][16] /* ty=Tensor[(420), uint32] */, %191, %192, meta[relay.Constant][17] /* ty=Tensor[(104), float64] */, %193)
}

def @func_8450() -> Tensor[(264), bool] {
  %194 = @func_4299() /* ty=(Tensor[(6, 16, 11), float64], bool, Tensor[(264), bool], Tensor[(2, 11, 12), float64]) */;
  %194.2
}

def @func_8416(%var_8411: Tensor[(3, 6, 11), int32]) -> (Tensor[(3, 6, 11), int32],) {
  %195 = cast(meta[relay.Constant][18] /* ty=Tensor[(3, 6, 11), int32] */, dtype="int32") /* ty=Tensor[(3, 6, 11), int32] */;
  %196 = shape_of(%var_8411, dtype="int32") /* ty=Tensor[(3), int32] */;
  %197 = cast(%var_8411, dtype="int32") /* ty=Tensor[(3, 6, 11), int32] */;
  %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %199 = right_shift(%197, %198) /* ty=Tensor[(3, 6, 11), int32] */;
  (%199,)
}

def @func_5479(%var_5445: Tensor[(3, 45), float32], %var_5446: Tensor[(1089), float32], %var_5468: Tensor[(7, 5), float64]) -> (Tensor[(6, 16, 11), float64], Tensor[(6, 16, 11), float32], Tensor[(3, 45), float32], Tensor[(1089), float32], Tensor[(14, 5, 6), bool], Tensor[(10, 42), uint32], Tensor[(420), uint32], Tensor[(7, 5), float64]) {
  %200 = @func_4013() /* ty=(Tensor[(6, 16, 11), float64],) */;
  %201 = cast(%var_5445, dtype="float32") /* ty=Tensor[(3, 45), float32] */;
  %202 = cast(%var_5446, dtype="float32") /* ty=Tensor[(1089), float32] */;
  %203 = reshape(%201, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %204 = reshape(%202, newshape=[1089]) /* ty=Tensor[(1089), float32] */;
  %205 = @func_3106(%203, %204) /* ty=(Tensor[(6, 16, 11), float64], Tensor[(6, 16, 11), float32], Tensor[(135), float32], Tensor[(1089), float32], Tensor[(1, 7, 5), float64], Tensor[(35), float64]) */;
  %206 = cast(meta[relay.Constant][19] /* ty=Tensor[(10, 42), uint32] */, dtype="uint32") /* ty=Tensor[(10, 42), uint32] */;
  %207 = reshape(%206, newshape=[14, 5, 6]) /* ty=Tensor[(14, 5, 6), uint32] */;
  %208 = @func_904(%207) /* ty=(Tensor[(14, 5, 6), bool],) */;
  %209 = cast(%var_5468, dtype="float64") /* ty=Tensor[(7, 5), float64] */;
  %210 = reshape(%209, newshape=[7, 5]) /* ty=Tensor[(7, 5), float64] */;
  %211 = @func_1813(%210) /* ty=(Tensor[(420), uint32], Tensor[(1, 7, 5), float64], Tensor[(7, 5), float64]) */;
  %212 = %200.0;
  %213 = %205.1;
  %214 = %208.0;
  %215 = %211.0;
  (%212, %213, %var_5445, %var_5446, %214, meta[relay.Constant][19] /* ty=Tensor[(10, 42), uint32] */, %215, %var_5468)
}

def @func_3567() -> (Tensor[(14, 5, 6), bool], Tensor[(1089), float32], Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), int8], Tensor[(1, 8, 13), float64], Tensor[(104), float64]) {
  %216 = cast(-5.98704f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %217 = cast(meta[relay.Constant][20] /* ty=Tensor[(1089), float32] */, dtype="float32") /* ty=Tensor[(1089), float32] */;
  %218 = reshape(%216, newshape=[]) /* ty=float32 */;
  %219 = reshape(%217, newshape=[1089]) /* ty=Tensor[(1089), float32] */;
  %220 = @func_1933(%218, %219) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool], Tensor[(1056), float64], float32, Tensor[(1089), float32], Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool]) */;
  %221 = @func_3191() /* ty=Tensor[(6, 16, 11), int8] */;
  %222 = cast(-5.98704f /* ty=float32 */, dtype="int8") /* ty=int8 */;
  %223 = cast(%221, dtype="int8") /* ty=Tensor[(6, 16, 11), int8] */;
  %224 = cast(meta[relay.Constant][21] /* ty=Tensor[(104), float64] */, dtype="float64") /* ty=Tensor[(104), float64] */;
  %225 = reshape(%224, newshape=[1, 8, 13]) /* ty=Tensor[(1, 8, 13), float64] */;
  %226 = %220.6;
  %227 = @func_2871() /* ty=Tensor[(6, 16, 11), float32] */;
  %228 = right_shift(%222, %223) /* ty=Tensor[(6, 16, 11), int8] */;
  %229 = @func_1302(%225) /* ty=Tensor[(1, 8, 13), float64] */;
  (%226, meta[relay.Constant][20] /* ty=Tensor[(1089), float32] */, %227, %228, %229, meta[relay.Constant][21] /* ty=Tensor[(104), float64] */)
}

def @func_3035(%var_3021: Tensor[(24, 10), float32]) -> (Tensor[(6, 16, 11), float32], Tensor[(5, 3, 9), float32], Tensor[(135), float32], Tensor[(16, 11, 9), bool], Tensor[(24, 10), float32], Tensor[(1584), float32]) {
  %230 = @func_2686() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %231 = cast(meta[relay.Constant][22] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %232 = cast(meta[relay.Constant][22] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %233 = reshape(%231, newshape=[5, 3, 9]) /* ty=Tensor[(5, 3, 9), float32] */;
  %234 = reshape(%232, newshape=[5, 3, 9]) /* ty=Tensor[(5, 3, 9), float32] */;
  %235 = cast(%var_3021, dtype="float32") /* ty=Tensor[(24, 10), float32] */;
  %236 = cast(meta[relay.Constant][23] /* ty=Tensor[(1584), float32] */, dtype="float32") /* ty=Tensor[(1584), float32] */;
  %237 = reshape(%235, newshape=[10, 8, 3]) /* ty=Tensor[(10, 8, 3), float32] */;
  %238 = reshape(%236, newshape=[1584]) /* ty=Tensor[(1584), float32] */;
  %239 = @func_1233(%237, %238) /* ty=(Tensor[(10, 8, 3), float32], Tensor[(16, 11, 9), bool], Tensor[(1584), float32]) */;
  %240 = %230.0;
  %241 = @func_2330(%233, %234) /* ty=Tensor[(5, 3, 9), float32] */;
  %242 = %239.1;
  (%240, %241, meta[relay.Constant][22] /* ty=Tensor[(135), float32] */, %242, %var_3021, meta[relay.Constant][23] /* ty=Tensor[(1584), float32] */)
}

def @func_3619(%var_3585: Tensor[(6, 16, 11), float32], %var_3607: float32, %var_3608: Tensor[(1089, 1), float32]) -> (Tensor[(6, 16, 11), bool], Tensor[(1089), float32], float32, Tensor[(1089, 1), float32], Tensor[(6, 16, 11), float32]) {
  %243 = @func_1643() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %244 = %243.0;
  %245 = cast(%var_3585, dtype="bool") /* ty=Tensor[(6, 16, 11), bool] */;
  %246 = shape_of(%244, dtype="int32") /* ty=Tensor[(3), int32] */;
  %247 = cast(%244, dtype="bool") /* ty=Tensor[(6, 16, 11), bool] */;
  %248 = dyn.reshape(%245, %246, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %249 = cast(%var_3607, dtype="float32") /* ty=float32 */;
  %250 = cast(%var_3608, dtype="float32") /* ty=Tensor[(1089, 1), float32] */;
  %251 = reshape(%249, newshape=[]) /* ty=float32 */;
  %252 = reshape(%250, newshape=[1089]) /* ty=Tensor[(1089), float32] */;
  %253 = @func_2951(%251, %252) /* ty=(Tensor[(1056), float64], float32, Tensor[(1089), float32], Tensor[(2, 11, 12), bool], Tensor[(264), bool], Tensor[(6, 16, 11), float32]) */;
  %254 = @func_2978() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float32]) */;
  %255 = equal(%247, %248) /* ty=Tensor[(6, 16, 11), bool] */;
  %256 = %253.2;
  %257 = %254.1;
  (%255, %256, %var_3607, %var_3608, %257)
}

def @func_2627(%var_2600: Tensor[(52, 2), float64]) -> (Tensor[(6, 16, 11), float32], Tensor[(52, 2), bool]) {
  %258 = @func_2562() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %259 = cast(%var_2600, dtype="float64") /* ty=Tensor[(52, 2), float64] */;
  %260 = reshape(%259, newshape=[1, 8, 13]) /* ty=Tensor[(1, 8, 13), float64] */;
  %261 = @func_1302(%260) /* ty=Tensor[(1, 8, 13), float64] */;
  %262 = cast(%261, dtype="bool") /* ty=Tensor[(1, 8, 13), bool] */;
  %263 = shape_of(%var_2600, dtype="int32") /* ty=Tensor[(2), int32] */;
  %264 = cast(%var_2600, dtype="bool") /* ty=Tensor[(52, 2), bool] */;
  %265 = dyn.reshape(%262, %263, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %266 = %258.0;
  %267 = greater_equal(%264, %265) /* ty=Tensor[(52, 2), bool] */;
  (%266, %267)
}

def @func_1933(%var_1903: float32, %var_1904: Tensor[(1089), float32]) -> (Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool], Tensor[(1056), float64], float32, Tensor[(1089), float32], Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool]) {
  %268 = @func_1643() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %269 = @func_1678() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool], Tensor[(420), uint32]) */;
  %270 = cast(%var_1903, dtype="float32") /* ty=float32 */;
  %271 = cast(%var_1904, dtype="float32") /* ty=Tensor[(1089), float32] */;
  %272 = %268.0;
  %273 = cast(%272, dtype="float64") /* ty=Tensor[(6, 16, 11), float64] */;
  %274 = reshape(%270, newshape=[]) /* ty=float32 */;
  %275 = reshape(%271, newshape=[11, 9, 11]) /* ty=Tensor[(11, 9, 11), float32] */;
  %276 = reshape(%273, newshape=[1056]) /* ty=Tensor[(1056), float64] */;
  %277 = @func_351(%274, %275, %276) /* ty=(Tensor[(11, 9, 11), bool], Tensor[(11, 9, 11), bool], Tensor[(8, 12, 11), float64], Tensor[(1056), float64]) */;
  %278 = @func_1705() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %279 = @func_1678() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool], Tensor[(420), uint32]) */;
  %280 = %269.1;
  %281 = %277.3;
  %282 = %278.0;
  %283 = %279.1;
  (%272, %280, %281, %var_1903, %var_1904, %282, %283)
}

def @func_3732(%var_3721: Tensor[(5, 13, 13), float32], %var_3722: Tensor[(5, 13, 13), float32]) -> Tensor[(5, 13, 13), float32] {
  %284 = cast(%var_3722, dtype="float32") /* ty=Tensor[(5, 13, 13), float32] */;
  %285 = shape_of(%var_3721, dtype="int32") /* ty=Tensor[(3), int32] */;
  %286 = cast(%var_3721, dtype="float32") /* ty=Tensor[(5, 13, 13), float32] */;
  %287 = dyn.reshape(%284, %285, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%286, %287) /* ty=Tensor[(5, 13, 13), float32] */
}

def @func_7474() -> Tensor[(135), float32] {
  %288 = @func_4833() /* ty=(Tensor[(6, 16, 11), float64], Tensor[(1, 104), float64], Tensor[(135), float32], Tensor[(1089), float32], Tensor[(420), uint32]) */;
  %288.2
}

def @func_3439() -> (Tensor[(6, 16, 11), float32], Tensor[(8, 12, 11), float64]) {
  %289 = @func_2978() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float32]) */;
  %290 = %289.1;
  %291 = cast(%290, dtype="float64") /* ty=Tensor[(6, 16, 11), float64] */;
  %292 = reshape(%291, newshape=[8, 12, 11]) /* ty=Tensor[(8, 12, 11), float64] */;
  %293 = @func_276(%292) /* ty=(Tensor[(8, 12, 11), float64],) */;
  %294 = %293.0;
  (%290, %294)
}

def @func_4574() -> (Tensor[(6, 16, 11), float32],) {
  %295 = @func_2562() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %296 = %295.0;
  %297 = cast(%296, dtype="float32") /* ty=Tensor[(6, 16, 11), float32] */;
  %298 = sigmoid(%297) /* ty=Tensor[(6, 16, 11), float32] */;
  (%298,)
}

def @func_5222(%var_5216: Tensor[(35), float64]) -> (Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float32], Tensor[(16, 11, 9), int16], Tensor[(1584), float32], Tensor[(6, 16, 11), float32], Tensor[(1584), float32], Tensor[(35), float64]) {
  %299 = @func_1643() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %300 = @func_1643() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %301 = cast(meta[relay.Constant][24] /* ty=Tensor[(1584), float32] */, dtype="float32") /* ty=Tensor[(1584), float32] */;
  %302 = cast(meta[relay.Constant][24] /* ty=Tensor[(1584), float32] */, dtype="float32") /* ty=Tensor[(1584), float32] */;
  %303 = reshape(%301, newshape=[16, 11, 9]) /* ty=Tensor[(16, 11, 9), float32] */;
  %304 = reshape(%302, newshape=[16, 11, 9]) /* ty=Tensor[(16, 11, 9), float32] */;
  %305 = @func_423(%303, %304) /* ty=(Tensor[(16, 11, 9), bool], Tensor[(16, 11, 9), int16]) */;
  %306 = @func_2686() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %307 = cast(%var_5216, dtype="float64") /* ty=Tensor[(35), float64] */;
  %308 = reshape(%307, newshape=[1, 35]) /* ty=Tensor[(1, 35), float64] */;
  %309 = @func_4739(%308) /* ty=(Tensor[(6, 16, 11), float64], Tensor[(1, 7, 5), float64], Tensor[(15, 11, 14), float64], Tensor[(1, 35), float32], Tensor[(1, 35), float64], Tensor[(16, 11, 9), int16], Tensor[(1584), float32]) */;
  %310 = %299.0;
  %311 = %300.0;
  %312 = %305.1;
  %313 = %306.0;
  %314 = %309.6;
  (%310, %311, %312, meta[relay.Constant][24] /* ty=Tensor[(1584), float32] */, %313, %314, %var_5216)
}

def @func_6673() -> (Tensor[(6, 16, 11), float32],) {
  %315 = @func_4320() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %316 = %315.0;
  (%316,)
}

def @func_2871() -> Tensor[(6, 16, 11), float32] {
  %317 = @func_1705() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %317.0
}

def @func_2225(%var_2188: Tensor[(6, 16, 11), float32], %var_2198: float32, %var_2199: Tensor[(1089), float32], %var_2208: Tensor[(132, 12), float32]) -> (Tensor[(14, 5, 6), bool], float32, Tensor[(1089), float32], Tensor[(16, 11, 9), bool], Tensor[(24, 10), float32], Tensor[(132, 12), float32], Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool]) {
  %318 = cast(%var_2198, dtype="float32") /* ty=float32 */;
  %319 = cast(%var_2199, dtype="float32") /* ty=Tensor[(1089), float32] */;
  %320 = reshape(%318, newshape=[]) /* ty=float32 */;
  %321 = reshape(%319, newshape=[1089]) /* ty=Tensor[(1089), float32] */;
  %322 = @func_1933(%320, %321) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool], Tensor[(1056), float64], float32, Tensor[(1089), float32], Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool]) */;
  %323 = cast(meta[relay.Constant][25] /* ty=Tensor[(24, 10), float32] */, dtype="float32") /* ty=Tensor[(24, 10), float32] */;
  %324 = cast(%var_2208, dtype="float32") /* ty=Tensor[(132, 12), float32] */;
  %325 = reshape(%323, newshape=[10, 8, 3]) /* ty=Tensor[(10, 8, 3), float32] */;
  %326 = reshape(%324, newshape=[1584]) /* ty=Tensor[(1584), float32] */;
  %327 = @func_1233(%325, %326) /* ty=(Tensor[(10, 8, 3), float32], Tensor[(16, 11, 9), bool], Tensor[(1584), float32]) */;
  %328 = @func_1705() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %329 = %328.0;
  %330 = cast(%var_2188, dtype="bool") /* ty=Tensor[(6, 16, 11), bool] */;
  %331 = shape_of(%329, dtype="int32") /* ty=Tensor[(3), int32] */;
  %332 = cast(%329, dtype="bool") /* ty=Tensor[(6, 16, 11), bool] */;
  %333 = dyn.reshape(%330, %331, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %334 = less(%332, %333) /* ty=Tensor[(6, 16, 11), bool] */;
  %335 = cast(%334, dtype="float32") /* ty=Tensor[(6, 16, 11), float32] */;
  %336 = %322.6;
  %337 = cast(%336, dtype="uint32") /* ty=Tensor[(14, 5, 6), uint32] */;
  %338 = reshape(%337, newshape=[420]) /* ty=Tensor[(420), uint32] */;
  %339 = @func_1857(%338) /* ty=(Tensor[(6, 16, 11), float64], Tensor[(14, 5, 6), bool], Tensor[(420), uint32]) */;
  %340 = %327.1;
  %341 = erf(%335) /* ty=Tensor[(6, 16, 11), float32] */;
  %342 = %339.1;
  (%336, %var_2198, %var_2199, %340, meta[relay.Constant][25] /* ty=Tensor[(24, 10), float32] */, %var_2208, %341, %342)
}

def @func_423(%var_405: Tensor[(16, 11, 9), float32], %var_406: Tensor[(16, 11, 9), float32]) -> (Tensor[(16, 11, 9), bool], Tensor[(16, 11, 9), int16]) {
  %343 = cast(%var_406, dtype="bool") /* ty=Tensor[(16, 11, 9), bool] */;
  %344 = shape_of(%var_405, dtype="int32") /* ty=Tensor[(3), int32] */;
  %345 = cast(%var_405, dtype="bool") /* ty=Tensor[(16, 11, 9), bool] */;
  %346 = dyn.reshape(%343, %344, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %347 = cast(%var_405, dtype="int16") /* ty=Tensor[(16, 11, 9), int16] */;
  %348 = shape_of(%var_406, dtype="int32") /* ty=Tensor[(3), int32] */;
  %349 = cast(%var_406, dtype="int16") /* ty=Tensor[(16, 11, 9), int16] */;
  %350 = dyn.reshape(%347, %348, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %351 = equal(%345, %346) /* ty=Tensor[(16, 11, 9), bool] */;
  %352 = bitwise_or(%349, %350) /* ty=Tensor[(16, 11, 9), int16] */;
  (%351, %352)
}

def @func_1857(%var_1847: Tensor[(420), uint32]) -> (Tensor[(6, 16, 11), float64], Tensor[(14, 5, 6), bool], Tensor[(420), uint32]) {
  %353 = @func_1643() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %354 = %353.0;
  %355 = cast(%354, dtype="float64") /* ty=Tensor[(6, 16, 11), float64] */;
  %356 = cast(%var_1847, dtype="uint32") /* ty=Tensor[(420), uint32] */;
  %357 = reshape(%356, newshape=[14, 5, 6]) /* ty=Tensor[(14, 5, 6), uint32] */;
  %358 = @func_904(%357) /* ty=(Tensor[(14, 5, 6), bool],) */;
  %359 = tan(%355) /* ty=Tensor[(6, 16, 11), float64] */;
  %360 = %358.0;
  (%359, %360, %var_1847)
}

def @func_3118() -> (Tensor[(6, 16, 11), float32],) {
  %361 = @func_2701() /* ty=Tensor[(6, 16, 11), float32] */;
  (%361,)
}

def @func_2004(%var_1981: Tensor[(104), float64], %var_1984: Tensor[(2, 792), float32]) -> (Tensor[(6, 16, 11), float32], Tensor[(1, 8, 13), float64], Tensor[(104), float64], Tensor[(16, 11, 9), bool], Tensor[(2, 792), float32]) {
  %362 = @func_1643() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %363 = cast(%var_1981, dtype="float64") /* ty=Tensor[(104), float64] */;
  %364 = reshape(%363, newshape=[1, 8, 13]) /* ty=Tensor[(1, 8, 13), float64] */;
  %365 = cast(%var_1984, dtype="float32") /* ty=Tensor[(2, 792), float32] */;
  %366 = cast(%var_1984, dtype="float32") /* ty=Tensor[(2, 792), float32] */;
  %367 = reshape(%365, newshape=[16, 11, 9]) /* ty=Tensor[(16, 11, 9), float32] */;
  %368 = reshape(%366, newshape=[16, 11, 9]) /* ty=Tensor[(16, 11, 9), float32] */;
  %369 = @func_423(%367, %368) /* ty=(Tensor[(16, 11, 9), bool], Tensor[(16, 11, 9), int16]) */;
  %370 = %362.0;
  %371 = @func_1302(%364) /* ty=Tensor[(1, 8, 13), float64] */;
  %372 = %369.0;
  (%370, %371, %var_1981, %372, %var_1984)
}

def @func_4739(%var_4717: Tensor[(1, 35), float64]) -> (Tensor[(6, 16, 11), float64], Tensor[(1, 7, 5), float64], Tensor[(15, 11, 14), float64], Tensor[(1, 35), float32], Tensor[(1, 35), float64], Tensor[(16, 11, 9), int16], Tensor[(1584), float32]) {
  %373 = cast(%var_4717, dtype="float64") /* ty=Tensor[(1, 35), float64] */;
  %374 = reshape(%373, newshape=[1, 7, 5]) /* ty=Tensor[(1, 7, 5), float64] */;
  %375 = @func_459(%374) /* ty=(Tensor[(1, 7, 5), float64],) */;
  %376 = cast(%var_4717, dtype="float32") /* ty=Tensor[(1, 35), float32] */;
  %377 = cast(%var_4717, dtype="float64") /* ty=Tensor[(1, 35), float64] */;
  %378 = cast(meta[relay.Constant][26] /* ty=Tensor[(1584), float32] */, dtype="float32") /* ty=Tensor[(1584), float32] */;
  %379 = cast(meta[relay.Constant][26] /* ty=Tensor[(1584), float32] */, dtype="float32") /* ty=Tensor[(1584), float32] */;
  %380 = reshape(%378, newshape=[16, 11, 9]) /* ty=Tensor[(16, 11, 9), float32] */;
  %381 = reshape(%379, newshape=[16, 11, 9]) /* ty=Tensor[(16, 11, 9), float32] */;
  %382 = @func_423(%380, %381) /* ty=(Tensor[(16, 11, 9), bool], Tensor[(16, 11, 9), int16]) */;
  %383 = @func_2138() /* ty=Tensor[(6, 16, 11), float64] */;
  %384 = %375.0;
  %385 = @func_4227() /* ty=Tensor[(15, 11, 14), float64] */;
  %386 = rsqrt(%376) /* ty=Tensor[(1, 35), float32] */;
  %387 = sigmoid(%377) /* ty=Tensor[(1, 35), float64] */;
  %388 = %382.1;
  (%383, %384, %385, %386, %387, %388, meta[relay.Constant][26] /* ty=Tensor[(1584), float32] */)
}

def @func_5010() -> (Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float64], Tensor[(264), bool]) {
  %389 = @func_3439() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(8, 12, 11), float64]) */;
  %390 = cast(meta[relay.Constant][27] /* ty=Tensor[(264), bool] */, dtype="bool") /* ty=Tensor[(264), bool] */;
  %391 = reshape(%390, newshape=[1, 264]) /* ty=Tensor[(1, 264), bool] */;
  %392 = @func_3349(%391) /* ty=(Tensor[(6, 16, 11), float64], Tensor[(6, 16, 11), float64], Tensor[(2, 11, 12), bool], bool, Tensor[(1, 264), bool]) */;
  %393 = %389.0;
  %394 = %392.1;
  (%393, %394, meta[relay.Constant][27] /* ty=Tensor[(264), bool] */)
}

def @func_7609() -> Tensor[(135), float64] {
  %395 = @func_7474() /* ty=Tensor[(135), float32] */;
  %396 = cast(%395, dtype="float64") /* ty=Tensor[(135), float64] */;
  log2(%396) /* ty=Tensor[(135), float64] */
}

def @func_5133() -> Tensor[(264), bool] {
  %397 = @func_5010() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float64], Tensor[(264), bool]) */;
  %397.2
}

def @func_3106(%var_3091: Tensor[(135), float32], %var_3092: Tensor[(1089), float32]) -> (Tensor[(6, 16, 11), float64], Tensor[(6, 16, 11), float32], Tensor[(135), float32], Tensor[(1089), float32], Tensor[(1, 7, 5), float64], Tensor[(35), float64]) {
  %398 = @func_2138() /* ty=Tensor[(6, 16, 11), float64] */;
  %399 = cast(%398, dtype="float32") /* ty=Tensor[(6, 16, 11), float32] */;
  %400 = cast(%var_3091, dtype="float32") /* ty=Tensor[(135), float32] */;
  %401 = cast(%var_3092, dtype="float32") /* ty=Tensor[(1089), float32] */;
  %402 = reshape(%399, newshape=[6, 16, 11]) /* ty=Tensor[(6, 16, 11), float32] */;
  %403 = reshape(%400, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %404 = reshape(%401, newshape=[1089]) /* ty=Tensor[(1089), float32] */;
  %405 = @func_2458(%402, %403, %404) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(1, 104), float64], Tensor[(135), float32], Tensor[(1089), float32]) */;
  %406 = cast(meta[relay.Constant][28] /* ty=Tensor[(35), float64] */, dtype="float64") /* ty=Tensor[(35), float64] */;
  %407 = reshape(%406, newshape=[1, 7, 5]) /* ty=Tensor[(1, 7, 5), float64] */;
  %408 = @func_459(%407) /* ty=(Tensor[(1, 7, 5), float64],) */;
  %409 = %405.0;
  %410 = %408.0;
  (%398, %409, %var_3091, %var_3092, %410, meta[relay.Constant][28] /* ty=Tensor[(35), float64] */)
}

def @func_7030() -> (Tensor[(135), float32], Tensor[(35), float64]) {
  %411 = @func_4833() /* ty=(Tensor[(6, 16, 11), float64], Tensor[(1, 104), float64], Tensor[(135), float32], Tensor[(1089), float32], Tensor[(420), uint32]) */;
  %412 = @func_5376() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(7, 5), float64], Tensor[(35), float64]) */;
  %413 = %411.2;
  %414 = %412.2;
  (%413, %414)
}

def @func_9167() -> (Tensor[(264), bool], Tensor[(6, 16, 11), float64]) {
  %415 = @func_8450() /* ty=Tensor[(264), bool] */;
  %416 = @func_2138() /* ty=Tensor[(6, 16, 11), float64] */;
  (%415, %416)
}

def @func_2458(%var_2449: Tensor[(6, 16, 11), float32], %var_2455: Tensor[(135), float32], %var_2456: Tensor[(1089), float32]) -> (Tensor[(6, 16, 11), float32], Tensor[(1, 104), float64], Tensor[(135), float32], Tensor[(1089), float32]) {
  %417 = @func_1705() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %418 = %417.0;
  %419 = cast(%var_2449, dtype="float32") /* ty=Tensor[(6, 16, 11), float32] */;
  %420 = shape_of(%418, dtype="int32") /* ty=Tensor[(3), int32] */;
  %421 = cast(%418, dtype="float32") /* ty=Tensor[(6, 16, 11), float32] */;
  %422 = dyn.reshape(%419, %420, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %423 = cast(%var_2455, dtype="float32") /* ty=Tensor[(135), float32] */;
  %424 = cast(%var_2456, dtype="float32") /* ty=Tensor[(1089), float32] */;
  %425 = reshape(%423, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %426 = reshape(%424, newshape=[1089]) /* ty=Tensor[(1089), float32] */;
  %427 = @func_2390(%425, %426) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(5, 3, 9), float32], Tensor[(135), float32], Tensor[(1, 8, 13), float64], Tensor[(1, 104), float64], Tensor[(1056), float64], Tensor[(1089), uint32], Tensor[(5, 3, 9), float32]) */;
  %428 = power(%421, %422) /* ty=Tensor[(6, 16, 11), float32] */;
  %429 = %427.4;
  (%428, %429, %var_2455, %var_2456)
}

def @func_8059() -> (Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float64]) {
  %430 = @func_2978() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float32]) */;
  %431 = @func_4299() /* ty=(Tensor[(6, 16, 11), float64], bool, Tensor[(264), bool], Tensor[(2, 11, 12), float64]) */;
  %432 = %430.1;
  %433 = %431.0;
  (%432, %433)
}

def @func_8320(%var_8298: Tensor[(2, 11, 12), float64]) -> (Tensor[(2, 11, 12), uint64], Tensor[(6, 16, 11), float32], Tensor[(35), float64], Tensor[(2, 11, 12), float64], Tensor[(6, 16, 11), float32]) {
  %434 = @func_5970() /* ty=(Tensor[(2, 11, 12), float64],) */;
  %435 = %434.0;
  %436 = cast(%var_8298, dtype="uint64") /* ty=Tensor[(2, 11, 12), uint64] */;
  %437 = shape_of(%435, dtype="int32") /* ty=Tensor[(3), int32] */;
  %438 = cast(%435, dtype="uint64") /* ty=Tensor[(2, 11, 12), uint64] */;
  %439 = dyn.reshape(%436, %437, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %440 = @func_2978() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float32]) */;
  %441 = @func_7030() /* ty=(Tensor[(135), float32], Tensor[(35), float64]) */;
  %442 = cast(%435, dtype="float32") /* ty=Tensor[(2, 11, 12), float32] */;
  %443 = erf(%442) /* ty=Tensor[(2, 11, 12), float32] */;
  %444 = cast(%443, dtype="float64") /* ty=Tensor[(2, 11, 12), float64] */;
  %445 = @func_1705() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %446 = subtract(%438, %439) /* ty=Tensor[(2, 11, 12), uint64] */;
  %447 = %440.0;
  %448 = %441.1;
  %449 = log10(%444) /* ty=Tensor[(2, 11, 12), float64] */;
  %450 = %445.0;
  (%446, %447, %448, %449, %450)
}

def @func_7467() -> (Tensor[(6, 16, 11), float32],) {
  %451 = @func_6302() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %452 = %451.0;
  (%452,)
}

def @func_4469(%var_4456: Tensor[(16, 8, 7), float32], %var_4461: Tensor[(104), float64], %var_4462: Tensor[(1584), float32]) -> (Tensor[(16, 8, 7), float32], Tensor[(2, 792), float32], Tensor[(104), float64], Tensor[(1584), float32]) {
  %453 = cast(%var_4456, dtype="float32") /* ty=Tensor[(16, 8, 7), float32] */;
  %454 = cast(%var_4461, dtype="float64") /* ty=Tensor[(104), float64] */;
  %455 = cast(%var_4462, dtype="float32") /* ty=Tensor[(1584), float32] */;
  %456 = reshape(%454, newshape=[104]) /* ty=Tensor[(104), float64] */;
  %457 = reshape(%455, newshape=[2, 792]) /* ty=Tensor[(2, 792), float32] */;
  %458 = @func_2004(%456, %457) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(1, 8, 13), float64], Tensor[(104), float64], Tensor[(16, 11, 9), bool], Tensor[(2, 792), float32]) */;
  %459 = log10(%453) /* ty=Tensor[(16, 8, 7), float32] */;
  %460 = %458.4;
  (%459, %460, %var_4461, %var_4462)
}

def @func_5950(%var_5937: Tensor[(1, 7, 1), float32], %var_5946: Tensor[(1, 2), float64]) -> (Tensor[(1, 7, 1), float32], Tensor[(2, 8, 12), float64], Tensor[(1, 2), float64]) {
  %461 = cast(%var_5937, dtype="float32") /* ty=Tensor[(1, 7, 1), float32] */;
  %462 = cast(%var_5946, dtype="float64") /* ty=Tensor[(1, 2), float64] */;
  %463 = reshape(%462, newshape=[2, 1, 1]) /* ty=Tensor[(2, 1, 1), float64] */;
  %464 = @func_5191(%463) /* ty=(Tensor[(2, 8, 12), float64],) */;
  %465 = cosh(%461) /* ty=Tensor[(1, 7, 1), float32] */;
  %466 = %464.0;
  (%465, %466, %var_5946)
}

def @func_2562() -> (Tensor[(6, 16, 11), float32],) {
  %467 = @func_1643() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %468 = %467.0;
  (%468,)
}

def @func_8121(%var_8113: Tensor[(11, 99), float32]) -> (Tensor[(11, 99), bool], Tensor[(11, 99), int8]) {
  %469 = @func_7444() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(11, 99), float32]) */;
  %470 = %469.1;
  %471 = cast(meta[relay.Constant][29] /* ty=Tensor[(11, 99), float32] */, dtype="bool") /* ty=Tensor[(11, 99), bool] */;
  %472 = shape_of(%470, dtype="int32") /* ty=Tensor[(2), int32] */;
  %473 = cast(%470, dtype="bool") /* ty=Tensor[(11, 99), bool] */;
  %474 = dyn.reshape(%471, %472, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %475 = cast(%var_8113, dtype="int8") /* ty=Tensor[(11, 99), int8] */;
  %476 = shape_of(%470, dtype="int32") /* ty=Tensor[(2), int32] */;
  %477 = cast(%470, dtype="int8") /* ty=Tensor[(11, 99), int8] */;
  %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %479 = greater(%473, %474) /* ty=Tensor[(11, 99), bool] */;
  %480 = multiply(%477, %478) /* ty=Tensor[(11, 99), int8] */;
  (%479, %480)
}

def @func_7729(%var_7721: Tensor[(2, 11, 12), float64]) -> (Tensor[(6, 16, 11), float32], Tensor[(35), float64], Tensor[(6, 16, 11), float32], Tensor[(2, 11, 12), bool]) {
  %481 = @func_2978() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float32]) */;
  %482 = @func_6984() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(420), uint32], Tensor[(35), float64]) */;
  %483 = @func_5536() /* ty=(Tensor[(2, 11, 12), float64],) */;
  %484 = %483.0;
  %485 = cast(%var_7721, dtype="bool") /* ty=Tensor[(2, 11, 12), bool] */;
  %486 = shape_of(%484, dtype="int32") /* ty=Tensor[(3), int32] */;
  %487 = cast(%484, dtype="bool") /* ty=Tensor[(2, 11, 12), bool] */;
  %488 = dyn.reshape(%485, %486, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %489 = %481.1;
  %490 = %482.2;
  %491 = @func_7187() /* ty=Tensor[(6, 16, 11), float32] */;
  %492 = equal(%487, %488) /* ty=Tensor[(2, 11, 12), bool] */;
  (%489, %490, %491, %492)
}

def @func_6528(%var_6510: Tensor[(135), float32]) -> (Tensor[(1, 8, 13), float64], Tensor[(5, 3, 9), float32], Tensor[(135), float32]) {
  %493 = @func_3567() /* ty=(Tensor[(14, 5, 6), bool], Tensor[(1089), float32], Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), int8], Tensor[(1, 8, 13), float64], Tensor[(104), float64]) */;
  %494 = cast(%var_6510, dtype="float32") /* ty=Tensor[(135), float32] */;
  %495 = cast(%var_6510, dtype="float32") /* ty=Tensor[(135), float32] */;
  %496 = reshape(%494, newshape=[5, 3, 9]) /* ty=Tensor[(5, 3, 9), float32] */;
  %497 = reshape(%495, newshape=[5, 3, 9]) /* ty=Tensor[(5, 3, 9), float32] */;
  %498 = %493.4;
  %499 = @func_2330(%496, %497) /* ty=Tensor[(5, 3, 9), float32] */;
  (%498, %499, %var_6510)
}

def @func_193(%var_188: Tensor[(1, 2, 12), uint16], %var_189: Tensor[(10, 2, 12), uint16]) -> Tensor[(10, 2, 12), uint16] {
  %500 = cast(%var_188, dtype="uint16") /* ty=Tensor[(1, 2, 12), uint16] */;
  %501 = cast(%var_189, dtype="uint16") /* ty=Tensor[(10, 2, 12), uint16] */;
  minimum(%500, %501) /* ty=Tensor[(10, 2, 12), uint16] */
}

def @func_9198() -> Tensor[(264), bool] {
  @func_8450() /* ty=Tensor[(264), bool] */
}

def @func_8013(%var_7962: Tensor[(1089, 1), float32], %var_7980: Tensor[(1, 24), uint16], %var_7981: Tensor[(8, 30), uint16]) -> (Tensor[(6, 16, 11), float64], Tensor[(1, 8, 13), float64], Tensor[(1089, 1), float32], Tensor[(10, 2, 12), uint16], Tensor[(1, 24), uint16], Tensor[(6, 16, 11), float32], Tensor[(5, 3, 9), uint32], Tensor[(8, 30), float32]) {
  %502 = @func_4013() /* ty=(Tensor[(6, 16, 11), float64],) */;
  %503 = cast(meta[relay.Constant][30] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %504 = cast(%var_7962, dtype="float32") /* ty=Tensor[(1089, 1), float32] */;
  %505 = reshape(%503, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %506 = reshape(%504, newshape=[1089]) /* ty=Tensor[(1089), float32] */;
  %507 = @func_2390(%505, %506) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(5, 3, 9), float32], Tensor[(135), float32], Tensor[(1, 8, 13), float64], Tensor[(1, 104), float64], Tensor[(1056), float64], Tensor[(1089), uint32], Tensor[(5, 3, 9), float32]) */;
  %508 = cast(%var_7980, dtype="uint16") /* ty=Tensor[(1, 24), uint16] */;
  %509 = cast(%var_7981, dtype="uint16") /* ty=Tensor[(8, 30), uint16] */;
  %510 = reshape(%508, newshape=[1, 2, 12]) /* ty=Tensor[(1, 2, 12), uint16] */;
  %511 = reshape(%509, newshape=[10, 2, 12]) /* ty=Tensor[(10, 2, 12), uint16] */;
  %512 = @func_2978() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float32]) */;
  %513 = cast(meta[relay.Constant][30] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %514 = cast(meta[relay.Constant][30] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %515 = reshape(%513, newshape=[5, 3, 9]) /* ty=Tensor[(5, 3, 9), float32] */;
  %516 = reshape(%514, newshape=[5, 3, 9]) /* ty=Tensor[(5, 3, 9), float32] */;
  %517 = @func_2330(%515, %516) /* ty=Tensor[(5, 3, 9), float32] */;
  %518 = cast(meta[relay.Constant][30] /* ty=Tensor[(135), float32] */, dtype="uint32") /* ty=Tensor[(135), uint32] */;
  %519 = shape_of(%517, dtype="int32") /* ty=Tensor[(3), int32] */;
  %520 = cast(%517, dtype="uint32") /* ty=Tensor[(5, 3, 9), uint32] */;
  %521 = dyn.reshape(%518, %519, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %522 = cast(%var_7981, dtype="float32") /* ty=Tensor[(8, 30), float32] */;
  %523 = %502.0;
  %524 = %507.3;
  %525 = @func_193(%510, %511) /* ty=Tensor[(10, 2, 12), uint16] */;
  %526 = %512.0;
  %527 = right_shift(%520, %521) /* ty=Tensor[(5, 3, 9), uint32] */;
  %528 = log10(%522) /* ty=Tensor[(8, 30), float32] */;
  (%523, %524, %var_7962, %525, %var_7980, %526, %527, %528)
}

def @func_459(%var_444: Tensor[(1, 7, 5), float64]) -> (Tensor[(1, 7, 5), float64],) {
  %529 = cast(%var_444, dtype="float64") /* ty=Tensor[(1, 7, 5), float64] */;
  %530 = asinh(%529) /* ty=Tensor[(1, 7, 5), float64] */;
  (%530,)
}

def @func_8068() -> Tensor[(6, 16, 11), float64] {
  @func_5412() /* ty=Tensor[(6, 16, 11), float64] */
}

def @func_5191(%var_5179: Tensor[(2, 1, 1), float64]) -> (Tensor[(2, 8, 12), float64],) {
  %531 = cast(%var_5179, dtype="float64") /* ty=Tensor[(2, 1, 1), float64] */;
  %532 = cast(meta[relay.Constant][31] /* ty=Tensor[(2, 8, 12), float64] */, dtype="float64") /* ty=Tensor[(2, 8, 12), float64] */;
  %533 = mod(%531, %532) /* ty=Tensor[(2, 8, 12), float64] */;
  (%533,)
}

def @func_2686() -> (Tensor[(6, 16, 11), float32],) {
  %534 = @func_1705() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %535 = %534.0;
  %536 = cast(%535, dtype="float32") /* ty=Tensor[(6, 16, 11), float32] */;
  %537 = sqrt(%536) /* ty=Tensor[(6, 16, 11), float32] */;
  (%537,)
}

def @func_2771(%var_2766: bool, %var_2767: Tensor[(2, 11, 12), bool]) -> (Tensor[(2, 11, 12), bool],) {
  %538 = cast(%var_2766, dtype="bool") /* ty=bool */;
  %539 = cast(%var_2767, dtype="bool") /* ty=Tensor[(2, 11, 12), bool] */;
  %540 = logical_or(%538, %539) /* ty=Tensor[(2, 11, 12), bool] */;
  (%540,)
}

def @func_4407(%var_4396: int32, %var_4397: Tensor[(15, 12, 7), int32]) -> (Tensor[(15, 12, 7), int32], bool) {
  %541 = cast(%var_4396, dtype="int32") /* ty=int32 */;
  %542 = cast(%var_4397, dtype="int32") /* ty=Tensor[(15, 12, 7), int32] */;
  %543 = cast(%var_4396, dtype="bool") /* ty=bool */;
  %544 = reshape(%543, newshape=[]) /* ty=bool */;
  %545 = @func_2813(%544) /* ty=(Tensor[(6, 16, 11), bool], Tensor[(2, 11, 12), bool], bool, Tensor[(264), bool]) */;
  %546 = bitwise_or(%541, %542) /* ty=Tensor[(15, 12, 7), int32] */;
  %547 = %545.2;
  (%546, %547)
}

def @func_6099(%var_6087: Tensor[(132, 12), float32]) -> (Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool], float32, Tensor[(1089), float32], Tensor[(132, 12), float32], Tensor[(2, 11, 12), float64]) {
  %548 = @func_3118() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %549 = %548.0;
  %550 = cast(%549, dtype="float32") /* ty=Tensor[(6, 16, 11), float32] */;
  %551 = cast(-5.95945f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %552 = cast(meta[relay.Constant][32] /* ty=Tensor[(1089), float32] */, dtype="float32") /* ty=Tensor[(1089), float32] */;
  %553 = cast(%var_6087, dtype="float32") /* ty=Tensor[(132, 12), float32] */;
  %554 = reshape(%550, newshape=[6, 16, 11]) /* ty=Tensor[(6, 16, 11), float32] */;
  %555 = reshape(%551, newshape=[]) /* ty=float32 */;
  %556 = reshape(%552, newshape=[1089]) /* ty=Tensor[(1089), float32] */;
  %557 = reshape(%553, newshape=[132, 12]) /* ty=Tensor[(132, 12), float32] */;
  %558 = @func_2225(%554, %555, %556, %557) /* ty=(Tensor[(14, 5, 6), bool], float32, Tensor[(1089), float32], Tensor[(16, 11, 9), bool], Tensor[(24, 10), float32], Tensor[(132, 12), float32], Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool]) */;
  %559 = @func_5536() /* ty=(Tensor[(2, 11, 12), float64],) */;
  %560 = %558.7;
  %561 = %559.0;
  (%549, %560, -5.95945f /* ty=float32 */, meta[relay.Constant][32] /* ty=Tensor[(1089), float32] */, %var_6087, %561)
}

def @func_4952(%var_4930: Tensor[(420), uint32]) -> (Tensor[(6, 16, 11), float64], Tensor[(14, 5, 6), bool], Tensor[(420), uint32], Tensor[(6, 16, 11), float64]) {
  %562 = @func_4833() /* ty=(Tensor[(6, 16, 11), float64], Tensor[(1, 104), float64], Tensor[(135), float32], Tensor[(1089), float32], Tensor[(420), uint32]) */;
  %563 = cast(%var_4930, dtype="uint32") /* ty=Tensor[(420), uint32] */;
  %564 = reshape(%563, newshape=[14, 5, 6]) /* ty=Tensor[(14, 5, 6), uint32] */;
  %565 = @func_904(%564) /* ty=(Tensor[(14, 5, 6), bool],) */;
  %566 = @func_4833() /* ty=(Tensor[(6, 16, 11), float64], Tensor[(1, 104), float64], Tensor[(135), float32], Tensor[(1089), float32], Tensor[(420), uint32]) */;
  %567 = %562.0;
  %568 = %565.0;
  %569 = %566.0;
  (%567, %568, %var_4930, %569)
}

def @main() -> (Tensor[(104), float32],) {
  %570 = @func_7877() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool], Tensor[(420), uint32], Tensor[(2, 11, 12), float32], Tensor[(6, 16, 11), float32], Tensor[(104), float64], Tensor[(6, 16, 11), float32]) */;
  %571 = %570.5;
  %572 = cast(%571, dtype="float32") /* ty=Tensor[(104), float32] */;
  %573 = sigmoid(%572) /* ty=Tensor[(104), float32] */;
  (%573,)
}

def @func_6650(%var_6631: Tensor[(264), bool]) -> (Tensor[(6, 16, 11), float32], Tensor[(1, 264), bool], Tensor[(264), float64]) {
  %574 = @func_4859() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), int8]) */;
  %575 = cast(%var_6631, dtype="bool") /* ty=Tensor[(264), bool] */;
  %576 = reshape(%575, newshape=[1, 264]) /* ty=Tensor[(1, 264), bool] */;
  %577 = @func_3349(%576) /* ty=(Tensor[(6, 16, 11), float64], Tensor[(6, 16, 11), float64], Tensor[(2, 11, 12), bool], bool, Tensor[(1, 264), bool]) */;
  %578 = cast(%var_6631, dtype="float64") /* ty=Tensor[(264), float64] */;
  %579 = %574.0;
  %580 = %577.4;
  %581 = acosh(%578) /* ty=Tensor[(264), float64] */;
  (%579, %580, %581)
}

def @func_3191() -> Tensor[(6, 16, 11), int8] {
  %582 = @func_2978() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float32]) */;
  %583 = %582.1;
  %584 = @func_2978() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float32]) */;
  %585 = %584.1;
  %586 = cast(%583, dtype="float64") /* ty=Tensor[(6, 16, 11), float64] */;
  %587 = shape_of(%585, dtype="int32") /* ty=Tensor[(3), int32] */;
  %588 = cast(%585, dtype="float64") /* ty=Tensor[(6, 16, 11), float64] */;
  %589 = dyn.reshape(%586, %587, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %590 = add(%588, %589) /* ty=Tensor[(6, 16, 11), float64] */;
  %591 = cast(%590, dtype="int8") /* ty=Tensor[(6, 16, 11), int8] */;
  %592 = shape_of(%583, dtype="int32") /* ty=Tensor[(3), int32] */;
  %593 = cast(%583, dtype="int8") /* ty=Tensor[(6, 16, 11), int8] */;
  %594 = dyn.reshape(%591, %592, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  bitwise_xor(%593, %594) /* ty=Tensor[(6, 16, 11), int8] */
}

def @func_7598(%var_7567: Tensor[(24, 10), float32]) -> (Tensor[(6, 16, 11), float32], Tensor[(2, 11, 12), float64], Tensor[(16, 11, 9), bool], Tensor[(24, 10), float32]) {
  %595 = @func_5970() /* ty=(Tensor[(2, 11, 12), float64],) */;
  %596 = cast(%var_7567, dtype="float32") /* ty=Tensor[(24, 10), float32] */;
  %597 = reshape(%596, newshape=[24, 10]) /* ty=Tensor[(24, 10), float32] */;
  %598 = @func_3035(%597) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(5, 3, 9), float32], Tensor[(135), float32], Tensor[(16, 11, 9), bool], Tensor[(24, 10), float32], Tensor[(1584), float32]) */;
  %599 = cast(%var_7567, dtype="float32") /* ty=Tensor[(24, 10), float32] */;
  %600 = @func_7525() /* ty=Tensor[(6, 16, 11), float32] */;
  %601 = %595.0;
  %602 = %598.3;
  %603 = log2(%599) /* ty=Tensor[(24, 10), float32] */;
  (%600, %601, %602, %603)
}

def @func_5435() -> (Tensor[(15, 11, 14), float64],) {
  %604 = @func_4227() /* ty=Tensor[(15, 11, 14), float64] */;
  (%604,)
}

def @func_4136() -> (Tensor[(6, 16, 11), int8],) {
  %605 = @func_3191() /* ty=Tensor[(6, 16, 11), int8] */;
  (%605,)
}

def @func_5717(%var_5699: Tensor[(1, 135), float32]) -> (Tensor[(6, 16, 11), float32], Tensor[(64), float32], Tensor[(1, 135), float32], Tensor[(1584), float32], Tensor[(35), float64], Tensor[(6, 16, 11), float64]) {
  %606 = @func_3118() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %607 = cast(%var_5699, dtype="float32") /* ty=Tensor[(1, 135), float32] */;
  %608 = reshape(%607, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %609 = @func_5635(%608) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(64), float32], Tensor[(35), float64], Tensor[(135), float32], Tensor[(135), float64], Tensor[(6, 16, 11), float32]) */;
  %610 = cast(meta[relay.Constant][33] /* ty=Tensor[(35), float64] */, dtype="float64") /* ty=Tensor[(35), float64] */;
  %611 = reshape(%610, newshape=[35]) /* ty=Tensor[(35), float64] */;
  %612 = @func_5222(%611) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float32], Tensor[(16, 11, 9), int16], Tensor[(1584), float32], Tensor[(6, 16, 11), float32], Tensor[(1584), float32], Tensor[(35), float64]) */;
  %613 = @func_4013() /* ty=(Tensor[(6, 16, 11), float64],) */;
  %614 = %606.0;
  %615 = %609.1;
  %616 = %612.3;
  %617 = %613.0;
  (%614, %615, %var_5699, %616, meta[relay.Constant][33] /* ty=Tensor[(35), float64] */, %617)
}

def @func_2292(%var_2278: Tensor[(6, 16, 11), float32]) -> (Tensor[(6, 16, 11), int32],) {
  %618 = @func_1705() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %619 = %618.0;
  %620 = cast(%var_2278, dtype="int32") /* ty=Tensor[(6, 16, 11), int32] */;
  %621 = shape_of(%619, dtype="int32") /* ty=Tensor[(3), int32] */;
  %622 = cast(%619, dtype="int32") /* ty=Tensor[(6, 16, 11), int32] */;
  %623 = dyn.reshape(%620, %621, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %624 = logical_xor(%622, %623) /* ty=Tensor[(6, 16, 11), int32] */;
  (%624,)
}

def @func_3226() -> (Tensor[(6, 16, 11), float32], Tensor[(8, 12, 11), float64]) {
  %625 = @func_2978() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float32]) */;
  %626 = %625.0;
  %627 = cast(%626, dtype="float64") /* ty=Tensor[(6, 16, 11), float64] */;
  %628 = reshape(%627, newshape=[8, 12, 11]) /* ty=Tensor[(8, 12, 11), float64] */;
  %629 = @func_276(%628) /* ty=(Tensor[(8, 12, 11), float64],) */;
  %630 = %629.0;
  (%626, %630)
}

def @func_7444() -> (Tensor[(6, 16, 11), float32], Tensor[(11, 99), float32]) {
  %631 = @func_1643() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %632 = @func_5883() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float64], Tensor[(8, 12, 11), float32], Tensor[(6, 16, 11), float32], Tensor[(135), float32], Tensor[(11, 99), float32]) */;
  %633 = %631.0;
  %634 = %632.5;
  (%633, %634)
}

def @func_4859() -> (Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), int8]) {
  %635 = @func_4574() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %636 = @func_4136() /* ty=(Tensor[(6, 16, 11), int8],) */;
  %637 = %635.0;
  %638 = %636.0;
  (%637, %638)
}

def @func_5319(%var_5304: Tensor[(135), float32], %var_5315: Tensor[(896), float32], %var_5317: Tensor[(132, 12), float32]) -> (Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float64], Tensor[(5, 3, 9), float32], Tensor[(135), float32], Tensor[(121, 9), float32], Tensor[(16, 8, 7), float32], Tensor[(896), float32], Tensor[(52, 2), float64], Tensor[(132, 12), float32]) {
  %639 = @func_5152() /* ty=(Tensor[(6, 16, 11), int8], Tensor[(6, 16, 11), float32]) */;
  %640 = cast(%var_5304, dtype="float32") /* ty=Tensor[(135), float32] */;
  %641 = cast(meta[relay.Constant][34] /* ty=Tensor[(121, 9), float32] */, dtype="float32") /* ty=Tensor[(121, 9), float32] */;
  %642 = reshape(%640, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %643 = reshape(%641, newshape=[1089]) /* ty=Tensor[(1089), float32] */;
  %644 = @func_2390(%642, %643) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(5, 3, 9), float32], Tensor[(135), float32], Tensor[(1, 8, 13), float64], Tensor[(1, 104), float64], Tensor[(1056), float64], Tensor[(1089), uint32], Tensor[(5, 3, 9), float32]) */;
  %645 = cast(%var_5315, dtype="float32") /* ty=Tensor[(896), float32] */;
  %646 = cast(meta[relay.Constant][35] /* ty=Tensor[(52, 2), float64] */, dtype="float64") /* ty=Tensor[(52, 2), float64] */;
  %647 = cast(%var_5317, dtype="float32") /* ty=Tensor[(132, 12), float32] */;
  %648 = reshape(%645, newshape=[16, 8, 7]) /* ty=Tensor[(16, 8, 7), float32] */;
  %649 = reshape(%646, newshape=[104]) /* ty=Tensor[(104), float64] */;
  %650 = reshape(%647, newshape=[1584]) /* ty=Tensor[(1584), float32] */;
  %651 = @func_4469(%648, %649, %650) /* ty=(Tensor[(16, 8, 7), float32], Tensor[(2, 792), float32], Tensor[(104), float64], Tensor[(1584), float32]) */;
  %652 = %639.1;
  %653 = @func_3833() /* ty=Tensor[(6, 16, 11), float64] */;
  %654 = %644.7;
  %655 = %651.0;
  (%652, %653, %654, %var_5304, meta[relay.Constant][34] /* ty=Tensor[(121, 9), float32] */, %655, %var_5315, meta[relay.Constant][35] /* ty=Tensor[(52, 2), float64] */, %var_5317)
}

def @func_5660() -> (Tensor[(6, 16, 11), float32],) {
  %656 = @func_1643() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %657 = %656.0;
  (%657,)
}

def @func_2481(%var_2471: Tensor[(6, 16, 11), float32]) -> Tensor[(6, 16, 11), float32] {
  %658 = @func_1643() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %659 = %658.0;
  %660 = cast(%var_2471, dtype="float32") /* ty=Tensor[(6, 16, 11), float32] */;
  %661 = shape_of(%659, dtype="int32") /* ty=Tensor[(3), int32] */;
  %662 = cast(%659, dtype="float32") /* ty=Tensor[(6, 16, 11), float32] */;
  %663 = dyn.reshape(%660, %661, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  mod(%662, %663) /* ty=Tensor[(6, 16, 11), float32] */
}

def @func_8637() -> Tensor[(6, 16, 11), int8] {
  @func_3191() /* ty=Tensor[(6, 16, 11), int8] */
}

def @func_2390(%var_2356: Tensor[(135), float32], %var_2373: Tensor[(1089), float32]) -> (Tensor[(6, 16, 11), float32], Tensor[(5, 3, 9), float32], Tensor[(135), float32], Tensor[(1, 8, 13), float64], Tensor[(1, 104), float64], Tensor[(1056), float64], Tensor[(1089), uint32], Tensor[(5, 3, 9), float32]) {
  %664 = @func_1643() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %665 = cast(%var_2356, dtype="float32") /* ty=Tensor[(135), float32] */;
  %666 = cast(%var_2356, dtype="float32") /* ty=Tensor[(135), float32] */;
  %667 = reshape(%665, newshape=[5, 3, 9]) /* ty=Tensor[(5, 3, 9), float32] */;
  %668 = reshape(%666, newshape=[5, 3, 9]) /* ty=Tensor[(5, 3, 9), float32] */;
  %669 = cast(meta[relay.Constant][36] /* ty=Tensor[(1, 104), float64] */, dtype="float64") /* ty=Tensor[(1, 104), float64] */;
  %670 = reshape(%669, newshape=[1, 8, 13]) /* ty=Tensor[(1, 8, 13), float64] */;
  %671 = cast(-3.41977f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %672 = cast(%var_2373, dtype="float32") /* ty=Tensor[(1089), float32] */;
  %673 = %664.0;
  %674 = cast(%673, dtype="float64") /* ty=Tensor[(6, 16, 11), float64] */;
  %675 = reshape(%671, newshape=[]) /* ty=float32 */;
  %676 = reshape(%672, newshape=[11, 9, 11]) /* ty=Tensor[(11, 9, 11), float32] */;
  %677 = reshape(%674, newshape=[1056]) /* ty=Tensor[(1056), float64] */;
  %678 = @func_351(%675, %676, %677) /* ty=(Tensor[(11, 9, 11), bool], Tensor[(11, 9, 11), bool], Tensor[(8, 12, 11), float64], Tensor[(1056), float64]) */;
  %679 = cast(%var_2373, dtype="uint32") /* ty=Tensor[(1089), uint32] */;
  %680 = cast(-3.41977f /* ty=float32 */, dtype="uint32") /* ty=uint32 */;
  %681 = @func_2330(%667, %668) /* ty=Tensor[(5, 3, 9), float32] */;
  %682 = cast(%681, dtype="float32") /* ty=Tensor[(5, 3, 9), float32] */;
  %683 = cast(%var_2356, dtype="float32") /* ty=Tensor[(135), float32] */;
  %684 = reshape(%682, newshape=[5, 3, 9]) /* ty=Tensor[(5, 3, 9), float32] */;
  %685 = reshape(%683, newshape=[5, 3, 9]) /* ty=Tensor[(5, 3, 9), float32] */;
  %686 = @func_1302(%670) /* ty=Tensor[(1, 8, 13), float64] */;
  %687 = %678.3;
  %688 = logical_xor(%679, %680) /* ty=Tensor[(1089), uint32] */;
  %689 = @func_2330(%684, %685) /* ty=Tensor[(5, 3, 9), float32] */;
  (%673, %681, %var_2356, %686, meta[relay.Constant][36] /* ty=Tensor[(1, 104), float64] */, %687, %688, %689)
}

def @func_6984() -> (Tensor[(6, 16, 11), float32], Tensor[(420), uint32], Tensor[(35), float64]) {
  %690 = @func_4574() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %691 = cast(meta[relay.Constant][37] /* ty=Tensor[(35), float64] */, dtype="float64") /* ty=Tensor[(35), float64] */;
  %692 = reshape(%691, newshape=[7, 5]) /* ty=Tensor[(7, 5), float64] */;
  %693 = @func_1813(%692) /* ty=(Tensor[(420), uint32], Tensor[(1, 7, 5), float64], Tensor[(7, 5), float64]) */;
  %694 = %690.0;
  %695 = %693.0;
  (%694, %695, meta[relay.Constant][37] /* ty=Tensor[(35), float64] */)
}

def @func_3349(%var_3341: Tensor[(1, 264), bool]) -> (Tensor[(6, 16, 11), float64], Tensor[(6, 16, 11), float64], Tensor[(2, 11, 12), bool], bool, Tensor[(1, 264), bool]) {
  %696 = @func_2507() /* ty=(Tensor[(6, 16, 11), float64],) */;
  %697 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %698 = cast(%var_3341, dtype="bool") /* ty=Tensor[(1, 264), bool] */;
  %699 = reshape(%697, newshape=[]) /* ty=bool */;
  %700 = reshape(%698, newshape=[2, 11, 12]) /* ty=Tensor[(2, 11, 12), bool] */;
  %701 = @func_2771(%699, %700) /* ty=(Tensor[(2, 11, 12), bool],) */;
  %702 = @func_2138() /* ty=Tensor[(6, 16, 11), float64] */;
  %703 = %696.0;
  %704 = %701.0;
  (%702, %703, %704, False /* ty=bool */, %var_3341)
}

def @func_2138() -> Tensor[(6, 16, 11), float64] {
  %705 = @func_1643() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %706 = %705.0;
  %707 = cast(%706, dtype="float64") /* ty=Tensor[(6, 16, 11), float64] */;
  sin(%707) /* ty=Tensor[(6, 16, 11), float64] */
}

def @func_5376() -> (Tensor[(6, 16, 11), float32], Tensor[(7, 5), float64], Tensor[(35), float64]) {
  %708 = @func_2978() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float32]) */;
  %709 = cast(meta[relay.Constant][38] /* ty=Tensor[(35), float64] */, dtype="float64") /* ty=Tensor[(35), float64] */;
  %710 = reshape(%709, newshape=[7, 5]) /* ty=Tensor[(7, 5), float64] */;
  %711 = @func_1813(%710) /* ty=(Tensor[(420), uint32], Tensor[(1, 7, 5), float64], Tensor[(7, 5), float64]) */;
  %712 = %708.1;
  %713 = %711.2;
  (%712, %713, meta[relay.Constant][38] /* ty=Tensor[(35), float64] */)
}

def @func_6719(%var_6715: Tensor[(14, 15, 7), float64]) -> (Tensor[(14, 15, 7), float64],) {
  %714 = cast(%var_6715, dtype="float64") /* ty=Tensor[(14, 15, 7), float64] */;
  %715 = log2(%714) /* ty=Tensor[(14, 15, 7), float64] */;
  (%715,)
}

def @func_6677() -> Tensor[(6, 16, 11), float32] {
  %716 = @func_4320() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %716.0
}

def @func_7050() -> (Tensor[(6, 16, 11), float32],) {
  %717 = @func_2686() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %718 = %717.0;
  (%718,)
}

def @func_5152() -> (Tensor[(6, 16, 11), int8], Tensor[(6, 16, 11), float32]) {
  %719 = @func_4136() /* ty=(Tensor[(6, 16, 11), int8],) */;
  %720 = %719.0;
  %721 = @func_2701() /* ty=Tensor[(6, 16, 11), float32] */;
  (%720, %721)
}

def @func_5990() -> (Tensor[(6, 16, 11), float32],) {
  %722 = @func_2978() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float32]) */;
  %723 = %722.0;
  (%723,)
}

def @func_8966(%var_8933: Tensor[(6, 10, 5), int32], %var_8962: Tensor[(240), float32]) -> (Tensor[(135), float64], Tensor[(6, 10, 5), uint8], Tensor[(16, 11, 9), bool], Tensor[(240), float32]) {
  %724 = cast(%var_8933, dtype="int32") /* ty=Tensor[(6, 10, 5), int32] */;
  %725 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(6, 10, 5), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %726 = cast(meta[relay.Constant][39] /* ty=Tensor[(6, 10, 5), int32] */, dtype="int32") /* ty=Tensor[(6, 10, 5), int32] */;
  %727 = dyn.reshape(%724, %725, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %728 = multiply(%726, %727) /* ty=Tensor[(6, 10, 5), int32] */;
  %729 = cast(%728, dtype="float32") /* ty=Tensor[(6, 10, 5), float32] */;
  %730 = sinh(%729) /* ty=Tensor[(6, 10, 5), float32] */;
  %731 = cast(%728, dtype="uint8") /* ty=Tensor[(6, 10, 5), uint8] */;
  %732 = shape_of(%730, dtype="int32") /* ty=Tensor[(3), int32] */;
  %733 = cast(%730, dtype="uint8") /* ty=Tensor[(6, 10, 5), uint8] */;
  %734 = dyn.reshape(%731, %732, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %735 = cast(%var_8962, dtype="float32") /* ty=Tensor[(240), float32] */;
  %736 = reshape(%735, newshape=[24, 10]) /* ty=Tensor[(24, 10), float32] */;
  %737 = @func_3035(%736) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(5, 3, 9), float32], Tensor[(135), float32], Tensor[(16, 11, 9), bool], Tensor[(24, 10), float32], Tensor[(1584), float32]) */;
  %738 = @func_7609() /* ty=Tensor[(135), float64] */;
  %739 = logical_xor(%733, %734) /* ty=Tensor[(6, 10, 5), uint8] */;
  %740 = %737.3;
  (%738, %739, %740, %var_8962)
}

def @func_8505() -> (Tensor[(6, 16, 11), int8],) {
  %741 = @func_3191() /* ty=Tensor[(6, 16, 11), int8] */;
  (%741,)
}

def @func_4070(%var_4024: Tensor[(8, 1, 8), float32], %var_4051: Tensor[(35), float64], %var_4062: Tensor[(135), float32]) -> (Tensor[(8, 1, 8), float32], Tensor[(6, 16, 11), float64], Tensor[(6, 16, 11), float32], Tensor[(7, 5), float64], Tensor[(35), float64], Tensor[(5, 3, 9), float32], Tensor[(135), float32], Tensor[(8, 1, 8), float64]) {
  %742 = cast(%var_4024, dtype="float32") /* ty=Tensor[(8, 1, 8), float32] */;
  %743 = @func_4013() /* ty=(Tensor[(6, 16, 11), float64],) */;
  %744 = %743.0;
  %745 = cast(%744, dtype="float32") /* ty=Tensor[(6, 16, 11), float32] */;
  %746 = reshape(%745, newshape=[6, 16, 11]) /* ty=Tensor[(6, 16, 11), float32] */;
  %747 = cast(%var_4051, dtype="float64") /* ty=Tensor[(35), float64] */;
  %748 = reshape(%747, newshape=[7, 5]) /* ty=Tensor[(7, 5), float64] */;
  %749 = @func_1813(%748) /* ty=(Tensor[(420), uint32], Tensor[(1, 7, 5), float64], Tensor[(7, 5), float64]) */;
  %750 = cast(%var_4062, dtype="float32") /* ty=Tensor[(135), float32] */;
  %751 = cast(%var_4062, dtype="float32") /* ty=Tensor[(135), float32] */;
  %752 = reshape(%750, newshape=[5, 3, 9]) /* ty=Tensor[(5, 3, 9), float32] */;
  %753 = reshape(%751, newshape=[5, 3, 9]) /* ty=Tensor[(5, 3, 9), float32] */;
  %754 = cast(%var_4024, dtype="float64") /* ty=Tensor[(8, 1, 8), float64] */;
  %755 = exp(%742) /* ty=Tensor[(8, 1, 8), float32] */;
  %756 = @func_2481(%746) /* ty=Tensor[(6, 16, 11), float32] */;
  %757 = %749.2;
  %758 = @func_2330(%752, %753) /* ty=Tensor[(5, 3, 9), float32] */;
  %759 = sinh(%754) /* ty=Tensor[(8, 1, 8), float64] */;
  (%755, %744, %756, %757, %var_4051, %758, %var_4062, %759)
}

def @func_3833() -> Tensor[(6, 16, 11), float64] {
  @func_2138() /* ty=Tensor[(6, 16, 11), float64] */
}

def @func_6216(%var_6178: Tensor[(6, 16, 11), float32]) -> (Tensor[(?, 104), uint32], Tensor[(6, 16, 11), int64], Tensor[(6, 16, 11), float32], Tensor[(35), float64]) {
  %760 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 104), float64] */, dtype="float64") /* ty=Tensor[(1, 104), float64] */;
  %761 = reshape(%760, newshape=[1, 8, 13]) /* ty=Tensor[(1, 8, 13), float64] */;
  %762 = @func_1302(%761) /* ty=Tensor[(1, 8, 13), float64] */;
  %763 = cast(%762, dtype="uint32") /* ty=Tensor[(1, 8, 13), uint32] */;
  %764 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(1, 104), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %765 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 104), float64] */, dtype="uint32") /* ty=Tensor[(1, 104), uint32] */;
  %766 = dyn.reshape(%763, %764, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %767 = @func_6150() /* ty=(Tensor[(6, 16, 11), float32], float32, float32, Tensor[(1089), float32]) */;
  %768 = %767.0;
  %769 = cast(%var_6178, dtype="int64") /* ty=Tensor[(6, 16, 11), int64] */;
  %770 = shape_of(%768, dtype="int32") /* ty=Tensor[(3), int32] */;
  %771 = cast(%768, dtype="int64") /* ty=Tensor[(6, 16, 11), int64] */;
  %772 = dyn.reshape(%769, %770, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %773 = @func_1643() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %774 = @func_5376() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(7, 5), float64], Tensor[(35), float64]) */;
  %775 = add(%765, %766) /* ty=Tensor[(?, 104), uint32] */;
  %776 = subtract(%771, %772) /* ty=Tensor[(6, 16, 11), int64] */;
  %777 = %773.0;
  %778 = %774.2;
  (%775, %776, %777, %778)
}

def @func_7525() -> Tensor[(6, 16, 11), float32] {
  %779 = @func_2562() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %779.0
}

def @func_8667() -> (Tensor[(6, 16, 11), float32], Tensor[(1, 8, 13), float64], Tensor[(24), uint16], Tensor[(240), uint16], Tensor[(1089), float32]) {
  %780 = @func_5883() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float64], Tensor[(8, 12, 11), float32], Tensor[(6, 16, 11), float32], Tensor[(135), float32], Tensor[(11, 99), float32]) */;
  %781 = cast(meta[relay.Constant][41] /* ty=Tensor[(1089), float32] */, dtype="float32") /* ty=Tensor[(1089), float32] */;
  %782 = cast(meta[relay.Constant][42] /* ty=Tensor[(24), uint16] */, dtype="uint16") /* ty=Tensor[(24), uint16] */;
  %783 = cast(meta[relay.Constant][43] /* ty=Tensor[(240), uint16] */, dtype="uint16") /* ty=Tensor[(240), uint16] */;
  %784 = reshape(%781, newshape=[1089, 1]) /* ty=Tensor[(1089, 1), float32] */;
  %785 = reshape(%782, newshape=[1, 24]) /* ty=Tensor[(1, 24), uint16] */;
  %786 = reshape(%783, newshape=[8, 30]) /* ty=Tensor[(8, 30), uint16] */;
  %787 = @func_8013(%784, %785, %786) /* ty=(Tensor[(6, 16, 11), float64], Tensor[(1, 8, 13), float64], Tensor[(1089, 1), float32], Tensor[(10, 2, 12), uint16], Tensor[(1, 24), uint16], Tensor[(6, 16, 11), float32], Tensor[(5, 3, 9), uint32], Tensor[(8, 30), float32]) */;
  %788 = cast(meta[relay.Constant][41] /* ty=Tensor[(1089), float32] */, dtype="float32") /* ty=Tensor[(1089), float32] */;
  %789 = %780.3;
  %790 = %787.1;
  %791 = atan(%788) /* ty=Tensor[(1089), float32] */;
  (%789, %790, meta[relay.Constant][42] /* ty=Tensor[(24), uint16] */, meta[relay.Constant][43] /* ty=Tensor[(240), uint16] */, %791)
}

def @func_3975(%var_3929: Tensor[(6, 16, 11), float32], %var_3942: Tensor[(135), float32]) -> (Tensor[(6, 16, 11), float64], Tensor[(24), uint16], Tensor[(1, 24), uint16], Tensor[(6, 16, 11), float32], Tensor[(135), float32], Tensor[(1089), float32], Tensor[(528, 104), int16]) {
  %792 = cast(meta[relay.Constant][44] /* ty=Tensor[(528, 1), uint64] */, dtype="uint64") /* ty=Tensor[(528, 1), uint64] */;
  %793 = cast(meta[relay.Constant][44] /* ty=Tensor[(528, 1), uint64] */, dtype="float64") /* ty=Tensor[(528, 1), float64] */;
  %794 = cast(meta[relay.Constant][45] /* ty=Tensor[(1, 24), uint16] */, dtype="uint16") /* ty=Tensor[(1, 24), uint16] */;
  %795 = reshape(%792, newshape=[12, 11, 4]) /* ty=Tensor[(12, 11, 4), uint64] */;
  %796 = reshape(%793, newshape=[12, 11, 4]) /* ty=Tensor[(12, 11, 4), float64] */;
  %797 = reshape(%794, newshape=[24]) /* ty=Tensor[(24), uint16] */;
  %798 = @func_1014(%795, %796, %797) /* ty=(Tensor[(12, 11, 4), uint64], Tensor[(12, 11, 4), uint32], Tensor[(12, 11, 4), float64], Tensor[(10, 2, 12), uint16], Tensor[(24), uint16], Tensor[(120, 2), uint16], Tensor[(1, 7, 5), float64], Tensor[(35), float64]) */;
  %799 = @func_2562() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %800 = %799.0;
  %801 = cast(%var_3929, dtype="float32") /* ty=Tensor[(6, 16, 11), float32] */;
  %802 = shape_of(%800, dtype="int32") /* ty=Tensor[(3), int32] */;
  %803 = cast(%800, dtype="float32") /* ty=Tensor[(6, 16, 11), float32] */;
  %804 = dyn.reshape(%801, %802, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %805 = cast(%var_3929, dtype="float32") /* ty=Tensor[(6, 16, 11), float32] */;
  %806 = cast(%var_3942, dtype="float32") /* ty=Tensor[(135), float32] */;
  %807 = cast(meta[relay.Constant][46] /* ty=Tensor[(1089), float32] */, dtype="float32") /* ty=Tensor[(1089), float32] */;
  %808 = reshape(%805, newshape=[6, 16, 11]) /* ty=Tensor[(6, 16, 11), float32] */;
  %809 = reshape(%806, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %810 = reshape(%807, newshape=[1089]) /* ty=Tensor[(1089), float32] */;
  %811 = @func_2458(%808, %809, %810) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(1, 104), float64], Tensor[(135), float32], Tensor[(1089), float32]) */;
  %812 = %811.1;
  %813 = cast(%812, dtype="int16") /* ty=Tensor[(1, 104), int16] */;
  %814 = cast(meta[relay.Constant][44] /* ty=Tensor[(528, 1), uint64] */, dtype="int16") /* ty=Tensor[(528, 1), int16] */;
  %815 = @func_3833() /* ty=Tensor[(6, 16, 11), float64] */;
  %816 = %798.4;
  %817 = floor_divide(%803, %804) /* ty=Tensor[(6, 16, 11), float32] */;
  %818 = logical_xor(%813, %814) /* ty=Tensor[(528, 104), int16] */;
  (%815, %816, meta[relay.Constant][45] /* ty=Tensor[(1, 24), uint16] */, %817, %var_3942, meta[relay.Constant][46] /* ty=Tensor[(1089), float32] */, %818)
}

def @func_4320() -> (Tensor[(6, 16, 11), float32],) {
  %819 = @func_3118() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %820 = %819.0;
  (%820,)
}

def @func_4901(%var_4876: Tensor[(264), bool], %var_4889: float32, %var_4890: Tensor[(11, 99), float32], %var_4896: Tensor[(35), float64]) -> (Tensor[(264), bool], float32, float32, Tensor[(11, 99), float32], Tensor[(7, 5), float64], Tensor[(35), float64]) {
  %821 = @func_4299() /* ty=(Tensor[(6, 16, 11), float64], bool, Tensor[(264), bool], Tensor[(2, 11, 12), float64]) */;
  %822 = %821.2;
  %823 = cast(%var_4876, dtype="bool") /* ty=Tensor[(264), bool] */;
  %824 = shape_of(%822, dtype="int32") /* ty=Tensor[(1), int32] */;
  %825 = cast(%822, dtype="bool") /* ty=Tensor[(264), bool] */;
  %826 = dyn.reshape(%823, %824, newshape=[]) /* ty=Tensor[(?), bool] */;
  %827 = cast(%var_4889, dtype="float32") /* ty=float32 */;
  %828 = cast(%var_4890, dtype="float32") /* ty=Tensor[(11, 99), float32] */;
  %829 = reshape(%827, newshape=[]) /* ty=float32 */;
  %830 = reshape(%828, newshape=[1089]) /* ty=Tensor[(1089), float32] */;
  %831 = @func_2951(%829, %830) /* ty=(Tensor[(1056), float64], float32, Tensor[(1089), float32], Tensor[(2, 11, 12), bool], Tensor[(264), bool], Tensor[(6, 16, 11), float32]) */;
  %832 = cast(%var_4896, dtype="float64") /* ty=Tensor[(35), float64] */;
  %833 = reshape(%832, newshape=[7, 5]) /* ty=Tensor[(7, 5), float64] */;
  %834 = @func_1813(%833) /* ty=(Tensor[(420), uint32], Tensor[(1, 7, 5), float64], Tensor[(7, 5), float64]) */;
  %835 = equal(%825, %826) /* ty=Tensor[(264), bool] */;
  %836 = %831.1;
  %837 = %834.2;
  (%835, %836, %var_4889, %var_4890, %837, %var_4896)
}

def @func_8720() -> Tensor[(6, 16, 11), float32] {
  %838 = @func_3118() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %838.0
}

def @func_5970() -> (Tensor[(2, 11, 12), float64],) {
  %839 = @func_5536() /* ty=(Tensor[(2, 11, 12), float64],) */;
  %840 = %839.0;
  %841 = cast(%840, dtype="float64") /* ty=Tensor[(2, 11, 12), float64] */;
  %842 = sinh(%841) /* ty=Tensor[(2, 11, 12), float64] */;
  (%842,)
}

def @func_9025() -> (Tensor[(6, 16, 11), float32],) {
  %843 = @func_5990() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %844 = %843.0;
  (%844,)
}

def @func_6754() -> (Tensor[(420), uint32],) {
  %845 = @func_1678() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool], Tensor[(420), uint32]) */;
  %846 = %845.2;
  (%846,)
}

def @func_2330(%var_2322: Tensor[(5, 3, 9), float32], %var_2323: Tensor[(5, 3, 9), float32]) -> Tensor[(5, 3, 9), float32] {
  %847 = cast(%var_2323, dtype="float32") /* ty=Tensor[(5, 3, 9), float32] */;
  %848 = shape_of(%var_2322, dtype="int32") /* ty=Tensor[(3), int32] */;
  %849 = cast(%var_2322, dtype="float32") /* ty=Tensor[(5, 3, 9), float32] */;
  %850 = dyn.reshape(%847, %848, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%849, %850) /* ty=Tensor[(5, 3, 9), float32] */
}

def @func_4833() -> (Tensor[(6, 16, 11), float64], Tensor[(1, 104), float64], Tensor[(135), float32], Tensor[(1089), float32], Tensor[(420), uint32]) {
  %851 = @func_2138() /* ty=Tensor[(6, 16, 11), float64] */;
  %852 = cast(%851, dtype="float32") /* ty=Tensor[(6, 16, 11), float32] */;
  %853 = cast(meta[relay.Constant][47] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %854 = cast(meta[relay.Constant][48] /* ty=Tensor[(1089), float32] */, dtype="float32") /* ty=Tensor[(1089), float32] */;
  %855 = reshape(%852, newshape=[6, 16, 11]) /* ty=Tensor[(6, 16, 11), float32] */;
  %856 = reshape(%853, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %857 = reshape(%854, newshape=[1089]) /* ty=Tensor[(1089), float32] */;
  %858 = @func_2458(%855, %856, %857) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(1, 104), float64], Tensor[(135), float32], Tensor[(1089), float32]) */;
  %859 = @func_1678() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool], Tensor[(420), uint32]) */;
  %860 = %858.1;
  %861 = %859.2;
  (%851, %860, meta[relay.Constant][47] /* ty=Tensor[(135), float32] */, meta[relay.Constant][48] /* ty=Tensor[(1089), float32] */, %861)
}

def @func_6150() -> (Tensor[(6, 16, 11), float32], float32, float32, Tensor[(1089), float32]) {
  %862 = @func_5778() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %863 = %862.0;
  %864 = cast(%863, dtype="float32") /* ty=Tensor[(6, 16, 11), float32] */;
  %865 = cast(9.20221f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %866 = cast(meta[relay.Constant][49] /* ty=Tensor[(1089), float32] */, dtype="float32") /* ty=Tensor[(1089), float32] */;
  %867 = reshape(%864, newshape=[6, 16, 11]) /* ty=Tensor[(6, 16, 11), float32] */;
  %868 = reshape(%865, newshape=[]) /* ty=float32 */;
  %869 = reshape(%866, newshape=[1089, 1]) /* ty=Tensor[(1089, 1), float32] */;
  %870 = @func_3619(%867, %868, %869) /* ty=(Tensor[(6, 16, 11), bool], Tensor[(1089), float32], float32, Tensor[(1089, 1), float32], Tensor[(6, 16, 11), float32]) */;
  %871 = %870.2;
  (%863, %871, 9.20221f /* ty=float32 */, meta[relay.Constant][49] /* ty=Tensor[(1089), float32] */)
}

def @func_5536() -> (Tensor[(2, 11, 12), float64],) {
  %872 = @func_4299() /* ty=(Tensor[(6, 16, 11), float64], bool, Tensor[(264), bool], Tensor[(2, 11, 12), float64]) */;
  %873 = %872.3;
  (%873,)
}

def @func_2507() -> (Tensor[(6, 16, 11), float64],) {
  %874 = @func_2138() /* ty=Tensor[(6, 16, 11), float64] */;
  (%874,)
}

def @func_4013() -> (Tensor[(6, 16, 11), float64],) {
  %875 = @func_3833() /* ty=Tensor[(6, 16, 11), float64] */;
  (%875,)
}

def @func_2978() -> (Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float32]) {
  %876 = @func_1705() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %877 = %876.0;
  %878 = @func_2701() /* ty=Tensor[(6, 16, 11), float32] */;
  (%877, %878)
}

def @func_351(%var_331: float32, %var_332: Tensor[(11, 9, 11), float32], %var_347: Tensor[(1056), float64]) -> (Tensor[(11, 9, 11), bool], Tensor[(11, 9, 11), bool], Tensor[(8, 12, 11), float64], Tensor[(1056), float64]) {
  %879 = cast(%var_331, dtype="bool") /* ty=bool */;
  %880 = cast(%var_332, dtype="bool") /* ty=Tensor[(11, 9, 11), bool] */;
  %881 = cast(%var_331, dtype="bool") /* ty=bool */;
  %882 = cast(%var_332, dtype="bool") /* ty=Tensor[(11, 9, 11), bool] */;
  %883 = cast(%var_347, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %884 = reshape(%883, newshape=[8, 12, 11]) /* ty=Tensor[(8, 12, 11), float64] */;
  %885 = @func_276(%884) /* ty=(Tensor[(8, 12, 11), float64],) */;
  %886 = less_equal(%879, %880) /* ty=Tensor[(11, 9, 11), bool] */;
  %887 = equal(%881, %882) /* ty=Tensor[(11, 9, 11), bool] */;
  %888 = %885.0;
  (%886, %887, %888, %var_347)
}

def @func_7556() -> (Tensor[(264), bool], Tensor[(6, 16, 11), float64]) {
  %889 = @func_4013() /* ty=(Tensor[(6, 16, 11), float64],) */;
  %890 = @func_5133() /* ty=Tensor[(264), bool] */;
  %891 = %889.0;
  (%890, %891)
}

def @func_9084(%var_9063: Tensor[(10, 12, 15), uint8]) -> Tensor[(10, 12, 15), uint8] {
  %892 = cast(%var_9063, dtype="uint8") /* ty=Tensor[(10, 12, 15), uint8] */;
  %893 = shape_of(meta[relay.Constant][50] /* ty=Tensor[(10, 12, 15), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %894 = cast(meta[relay.Constant][50] /* ty=Tensor[(10, 12, 15), uint8] */, dtype="uint8") /* ty=Tensor[(10, 12, 15), uint8] */;
  %895 = dyn.reshape(%892, %893, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  bitwise_and(%894, %895) /* ty=Tensor[(10, 12, 15), uint8] */
}

def @func_8921() -> (Tensor[(420), uint32],) {
  %896 = @func_6754() /* ty=(Tensor[(420), uint32],) */;
  %897 = %896.0;
  (%897,)
}

def @func_6815(%var_6784: float32) -> (Tensor[(6, 16, 11), bool], Tensor[(15, 2, 10), float64], Tensor[(6, 16, 11), int32], Tensor[(264), float64], Tensor[(264), bool]) {
  %898 = cast(%var_6784, dtype="bool") /* ty=bool */;
  %899 = reshape(%898, newshape=[]) /* ty=bool */;
  %900 = @func_2813(%899) /* ty=(Tensor[(6, 16, 11), bool], Tensor[(2, 11, 12), bool], bool, Tensor[(264), bool]) */;
  %901 = cast(%var_6784, dtype="float32") /* ty=float32 */;
  %902 = cast(meta[relay.Constant][51] /* ty=Tensor[(15, 2, 10), float32] */, dtype="float32") /* ty=Tensor[(15, 2, 10), float32] */;
  %903 = mod(%901, %902) /* ty=Tensor[(15, 2, 10), float32] */;
  %904 = cast(%903, dtype="float32") /* ty=Tensor[(15, 2, 10), float32] */;
  %905 = asinh(%904) /* ty=Tensor[(15, 2, 10), float32] */;
  %906 = cast(%905, dtype="float64") /* ty=Tensor[(15, 2, 10), float64] */;
  %907 = %900.0;
  %908 = cast(%907, dtype="float32") /* ty=Tensor[(6, 16, 11), float32] */;
  %909 = reshape(%908, newshape=[6, 16, 11]) /* ty=Tensor[(6, 16, 11), float32] */;
  %910 = @func_2292(%909) /* ty=(Tensor[(6, 16, 11), int32],) */;
  %911 = cast(meta[relay.Constant][52] /* ty=Tensor[(264), bool] */, dtype="bool") /* ty=Tensor[(264), bool] */;
  %912 = reshape(%911, newshape=[264]) /* ty=Tensor[(264), bool] */;
  %913 = @func_6650(%912) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(1, 264), bool], Tensor[(264), float64]) */;
  %914 = cos(%906) /* ty=Tensor[(15, 2, 10), float64] */;
  %915 = %910.0;
  %916 = %913.2;
  (%907, %914, %915, %916, meta[relay.Constant][52] /* ty=Tensor[(264), bool] */)
}

def @func_5778() -> (Tensor[(6, 16, 11), float32],) {
  %917 = @func_3439() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(8, 12, 11), float64]) */;
  %918 = %917.0;
  (%918,)
}

def @func_8843(%var_8837: Tensor[(1, 9, 16), float64]) -> Tensor[(1, 9, 16), float64] {
  %919 = cast(%var_8837, dtype="float64") /* ty=Tensor[(1, 9, 16), float64] */;
  sqrt(%919) /* ty=Tensor[(1, 9, 16), float64] */
}

def @func_6481() -> (Tensor[(11, 99), float64], Tensor[(6, 16, 11), float64], Tensor[(11, 99), bool], Tensor[(11, 99), bool]) {
  %920 = @func_5883() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float64], Tensor[(8, 12, 11), float32], Tensor[(6, 16, 11), float32], Tensor[(135), float32], Tensor[(11, 99), float32]) */;
  %921 = %920.5;
  %922 = cast(%921, dtype="float32") /* ty=Tensor[(11, 99), float32] */;
  %923 = log(%922) /* ty=Tensor[(11, 99), float32] */;
  %924 = cast(%921, dtype="uint8") /* ty=Tensor[(11, 99), uint8] */;
  %925 = shape_of(%923, dtype="int32") /* ty=Tensor[(2), int32] */;
  %926 = cast(%923, dtype="uint8") /* ty=Tensor[(11, 99), uint8] */;
  %927 = dyn.reshape(%924, %925, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %928 = logical_xor(%926, %927) /* ty=Tensor[(11, 99), uint8] */;
  %929 = cast(%928, dtype="float64") /* ty=Tensor[(11, 99), float64] */;
  %930 = @func_5010() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float64], Tensor[(264), bool]) */;
  %931 = cast(%923, dtype="float64") /* ty=Tensor[(11, 99), float64] */;
  %932 = acosh(%931) /* ty=Tensor[(11, 99), float64] */;
  %933 = cast(%932, dtype="float32") /* ty=Tensor[(11, 99), float32] */;
  %934 = tan(%933) /* ty=Tensor[(11, 99), float32] */;
  %935 = cast(%934, dtype="float32") /* ty=Tensor[(11, 99), float32] */;
  %936 = acos(%935) /* ty=Tensor[(11, 99), float32] */;
  %937 = cast(%932, dtype="int64") /* ty=Tensor[(11, 99), int64] */;
  %938 = shape_of(%936, dtype="int32") /* ty=Tensor[(2), int32] */;
  %939 = cast(%936, dtype="int64") /* ty=Tensor[(11, 99), int64] */;
  %940 = dyn.reshape(%937, %938, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %941 = bitwise_or(%939, %940) /* ty=Tensor[(11, 99), int64] */;
  %942 = cast(%923, dtype="bool") /* ty=Tensor[(11, 99), bool] */;
  %943 = shape_of(%941, dtype="int32") /* ty=Tensor[(2), int32] */;
  %944 = cast(%941, dtype="bool") /* ty=Tensor[(11, 99), bool] */;
  %945 = dyn.reshape(%942, %943, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %946 = cast(%941, dtype="bool") /* ty=Tensor[(11, 99), bool] */;
  %947 = shape_of(%923, dtype="int32") /* ty=Tensor[(2), int32] */;
  %948 = cast(%923, dtype="bool") /* ty=Tensor[(11, 99), bool] */;
  %949 = dyn.reshape(%946, %947, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %950 = sqrt(%929) /* ty=Tensor[(11, 99), float64] */;
  %951 = %930.1;
  %952 = greater_equal(%944, %945) /* ty=Tensor[(11, 99), bool] */;
  %953 = less_equal(%948, %949) /* ty=Tensor[(11, 99), bool] */;
  (%950, %951, %952, %953)
}

def @func_7187() -> Tensor[(6, 16, 11), float32] {
  %954 = @func_5990() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %954.0
}

def @func_1678() -> (Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool], Tensor[(420), uint32]) {
  %955 = @func_1643() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %956 = %955.0;
  %957 = cast(%956, dtype="float32") /* ty=Tensor[(6, 16, 11), float32] */;
  %958 = cast(meta[relay.Constant][53] /* ty=Tensor[(420), uint32] */, dtype="uint32") /* ty=Tensor[(420), uint32] */;
  %959 = reshape(%958, newshape=[14, 5, 6]) /* ty=Tensor[(14, 5, 6), uint32] */;
  %960 = @func_904(%959) /* ty=(Tensor[(14, 5, 6), bool],) */;
  %961 = asinh(%957) /* ty=Tensor[(6, 16, 11), float32] */;
  %962 = %960.0;
  (%961, %962, meta[relay.Constant][53] /* ty=Tensor[(420), uint32] */)
}

def @func_276(%var_272: Tensor[(8, 12, 11), float64]) -> (Tensor[(8, 12, 11), float64],) {
  %963 = cast(%var_272, dtype="float64") /* ty=Tensor[(8, 12, 11), float64] */;
  %964 = sinh(%963) /* ty=Tensor[(8, 12, 11), float64] */;
  (%964,)
}

def @func_7014() -> (Tensor[(15, 11, 14), float64], Tensor[(6, 16, 11), int8]) {
  %965 = @func_5152() /* ty=(Tensor[(6, 16, 11), int8], Tensor[(6, 16, 11), float32]) */;
  %966 = @func_4227() /* ty=Tensor[(15, 11, 14), float64] */;
  %967 = %965.0;
  (%966, %967)
}

def @func_6302() -> (Tensor[(6, 16, 11), float32],) {
  %968 = @func_1678() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool], Tensor[(420), uint32]) */;
  %969 = %968.0;
  (%969,)
}

def @func_4227() -> Tensor[(15, 11, 14), float64] {
  %970 = cast(meta[relay.Constant][54] /* ty=Tensor[(15, 11, 14), float64] */, dtype="float64") /* ty=Tensor[(15, 11, 14), float64] */;
  acosh(%970) /* ty=Tensor[(15, 11, 14), float64] */
}

def @func_1813(%var_1808: Tensor[(7, 5), float64]) -> (Tensor[(420), uint32], Tensor[(1, 7, 5), float64], Tensor[(7, 5), float64]) {
  %971 = @func_1678() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool], Tensor[(420), uint32]) */;
  %972 = cast(%var_1808, dtype="float64") /* ty=Tensor[(7, 5), float64] */;
  %973 = reshape(%972, newshape=[1, 7, 5]) /* ty=Tensor[(1, 7, 5), float64] */;
  %974 = @func_459(%973) /* ty=(Tensor[(1, 7, 5), float64],) */;
  %975 = %971.2;
  %976 = %974.0;
  (%975, %976, %var_1808)
}

def @func_5070(%var_5015: Tensor[(13, 10, 16), uint16]) -> (Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float32], Tensor[(13, 10, 16), bool], Tensor[(13, 10, 16), float64]) {
  %977 = @func_2978() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float32]) */;
  %978 = cast(meta[relay.Constant][55] /* ty=Tensor[(13, 10, 16), uint16] */, dtype="float32") /* ty=Tensor[(13, 10, 16), float32] */;
  %979 = acos(%978) /* ty=Tensor[(13, 10, 16), float32] */;
  %980 = cast(%979, dtype="float64") /* ty=Tensor[(13, 10, 16), float64] */;
  %981 = sigmoid(%980) /* ty=Tensor[(13, 10, 16), float64] */;
  %982 = cast(meta[relay.Constant][55] /* ty=Tensor[(13, 10, 16), uint16] */, dtype="bool") /* ty=Tensor[(13, 10, 16), bool] */;
  %983 = shape_of(%var_5015, dtype="int32") /* ty=Tensor[(3), int32] */;
  %984 = cast(%var_5015, dtype="bool") /* ty=Tensor[(13, 10, 16), bool] */;
  %985 = dyn.reshape(%982, %983, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %986 = less_equal(%984, %985) /* ty=Tensor[(13, 10, 16), bool] */;
  %987 = cast(%986, dtype="uint32") /* ty=Tensor[(13, 10, 16), uint32] */;
  %988 = shape_of(meta[relay.Constant][55] /* ty=Tensor[(13, 10, 16), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %989 = cast(meta[relay.Constant][55] /* ty=Tensor[(13, 10, 16), uint16] */, dtype="uint32") /* ty=Tensor[(13, 10, 16), uint32] */;
  %990 = dyn.reshape(%987, %988, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %991 = minimum(%989, %990) /* ty=Tensor[(13, 10, 16), uint32] */;
  %992 = cast(%991, dtype="int16") /* ty=Tensor[(13, 10, 16), int16] */;
  %993 = shape_of(%979, dtype="int32") /* ty=Tensor[(3), int32] */;
  %994 = cast(%979, dtype="int16") /* ty=Tensor[(13, 10, 16), int16] */;
  %995 = dyn.reshape(%992, %993, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %996 = left_shift(%994, %995) /* ty=Tensor[(13, 10, 16), int16] */;
  %997 = cast(%996, dtype="int32") /* ty=Tensor[(13, 10, 16), int32] */;
  %998 = shape_of(%981, dtype="int32") /* ty=Tensor[(3), int32] */;
  %999 = cast(%981, dtype="int32") /* ty=Tensor[(13, 10, 16), int32] */;
  %1000 = dyn.reshape(%997, %998, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %1001 = logical_xor(%999, %1000) /* ty=Tensor[(13, 10, 16), int32] */;
  %1002 = cast(%979, dtype="bool") /* ty=Tensor[(13, 10, 16), bool] */;
  %1003 = shape_of(%1001, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1004 = cast(%1001, dtype="bool") /* ty=Tensor[(13, 10, 16), bool] */;
  %1005 = dyn.reshape(%1002, %1003, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1006 = cast(%991, dtype="float64") /* ty=Tensor[(13, 10, 16), float64] */;
  %1007 = @func_2871() /* ty=Tensor[(6, 16, 11), float32] */;
  %1008 = %977.0;
  %1009 = greater_equal(%1004, %1005) /* ty=Tensor[(13, 10, 16), bool] */;
  %1010 = log2(%1006) /* ty=Tensor[(13, 10, 16), float64] */;
  (%1007, %1008, %1009, %1010)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5437() -> (Tensor[(15, 11, 14), float64],) {
  @func_5435() /* ty=(Tensor[(15, 11, 14), float64],) */
}

def @func_6216(%var_6178: Tensor[(6, 16, 11), float32]) -> (Tensor[(?, 104), uint32], Tensor[(6, 16, 11), int64], Tensor[(6, 16, 11), float32], Tensor[(35), float64]) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 104), float64] */, dtype="float64") /* ty=Tensor[(1, 104), float64] */;
  %1 = reshape(%0, newshape=[1, 8, 13]) /* ty=Tensor[(1, 8, 13), float64] */;
  %2 = @func_1302(%1) /* ty=Tensor[(1, 8, 13), float64] */;
  %3 = cast(%2, dtype="uint32") /* ty=Tensor[(1, 8, 13), uint32] */;
  %4 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(1, 104), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %5 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 104), float64] */, dtype="uint32") /* ty=Tensor[(1, 104), uint32] */;
  %6 = dyn.reshape(%3, %4, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %7 = @func_6150() /* ty=(Tensor[(6, 16, 11), float32], float32, float32, Tensor[(1089), float32]) */;
  %8 = %7.0;
  %9 = cast(%var_6178, dtype="int64") /* ty=Tensor[(6, 16, 11), int64] */;
  %10 = shape_of(%8, dtype="int32") /* ty=Tensor[(3), int32] */;
  %11 = cast(%8, dtype="int64") /* ty=Tensor[(6, 16, 11), int64] */;
  %12 = dyn.reshape(%9, %10, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %13 = @func_1643() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %14 = @func_5376() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(7, 5), float64], Tensor[(35), float64]) */;
  %15 = add(%5, %6) /* ty=Tensor[(?, 104), uint32] */;
  %16 = subtract(%11, %12) /* ty=Tensor[(6, 16, 11), int64] */;
  %17 = %13.0;
  %18 = %14.2;
  (%15, %16, %17, %18)
}

def @func_5779() -> (Tensor[(6, 16, 11), float32],) {
  %21 = fn () -> (Tensor[(6, 16, 11), float32],) {
    %19 = @func_3439() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(8, 12, 11), float64]) */;
    %20 = %19.0;
    (%20,)
  };
  %21() /* ty=(Tensor[(6, 16, 11), float32],) */
}

def @func_9026() -> (Tensor[(6, 16, 11), float32],) {
  %24 = fn () -> (Tensor[(6, 16, 11), float32],) {
    %22 = @func_5990() /* ty=(Tensor[(6, 16, 11), float32],) */;
    %23 = %22.0;
    (%23,)
  };
  %24() /* ty=(Tensor[(6, 16, 11), float32],) */
}

def @func_2702() -> Tensor[(6, 16, 11), float32] {
  %26 = fn () -> Tensor[(6, 16, 11), float32] {
    %25 = @func_1643() /* ty=(Tensor[(6, 16, 11), float32],) */;
    %25.0
  };
  %26() /* ty=Tensor[(6, 16, 11), float32] */
}

def @func_3569() -> (Tensor[(14, 5, 6), bool], Tensor[(1089), float32], Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), int8], Tensor[(1, 8, 13), float64], Tensor[(104), float64]) {
  @func_3567() /* ty=(Tensor[(14, 5, 6), bool], Tensor[(1089), float32], Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), int8], Tensor[(1, 8, 13), float64], Tensor[(104), float64]) */
}

def @func_2463(%var_2460: Tensor[(6, 16, 11), float32], %var_2461: Tensor[(135), float32], %var_2462: Tensor[(1089), float32]) -> (Tensor[(6, 16, 11), float32], Tensor[(1, 104), float64], Tensor[(135), float32], Tensor[(1089), float32]) {
  @func_2458(%var_2460, %var_2461, %var_2462) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(1, 104), float64], Tensor[(135), float32], Tensor[(1089), float32]) */
}

def @func_4137() -> (Tensor[(6, 16, 11), int8],) {
  %28 = fn () -> (Tensor[(6, 16, 11), int8],) {
    %27 = @func_3191() /* ty=Tensor[(6, 16, 11), int8] */;
    (%27,)
  };
  %28() /* ty=(Tensor[(6, 16, 11), int8],) */
}

def @func_4576() -> (Tensor[(6, 16, 11), float32],) {
  @func_4574() /* ty=(Tensor[(6, 16, 11), float32],) */
}

def @func_6985() -> (Tensor[(6, 16, 11), float32], Tensor[(420), uint32], Tensor[(35), float64]) {
  %35 = fn () -> (Tensor[(6, 16, 11), float32], Tensor[(420), uint32], Tensor[(35), float64]) {
    %29 = @func_4574() /* ty=(Tensor[(6, 16, 11), float32],) */;
    %30 = cast(meta[relay.Constant][1] /* ty=Tensor[(35), float64] */, dtype="float64") /* ty=Tensor[(35), float64] */;
    %31 = reshape(%30, newshape=[7, 5]) /* ty=Tensor[(7, 5), float64] */;
    %32 = @func_1813(%31) /* ty=(Tensor[(420), uint32], Tensor[(1, 7, 5), float64], Tensor[(7, 5), float64]) */;
    %33 = %29.0;
    %34 = %32.0;
    (%33, %34, meta[relay.Constant][1] /* ty=Tensor[(35), float64] */)
  };
  %35() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(420), uint32], Tensor[(35), float64]) */
}

def @func_8970(%var_8968: Tensor[(6, 10, 5), int32], %var_8969: Tensor[(240), float32]) -> (Tensor[(135), float64], Tensor[(6, 10, 5), uint8], Tensor[(16, 11, 9), bool], Tensor[(240), float32]) {
  @func_8966(%var_8968, %var_8969) /* ty=(Tensor[(135), float64], Tensor[(6, 10, 5), uint8], Tensor[(16, 11, 9), bool], Tensor[(240), float32]) */
}

def @func_9200() -> Tensor[(264), bool] {
  @func_9198() /* ty=Tensor[(264), bool] */
}

def @func_7611() -> Tensor[(135), float64] {
  @func_7609() /* ty=Tensor[(135), float64] */
}

def @func_8465() -> (Tensor[(6, 16, 11), float64], Tensor[(6, 16, 11), int8]) {
  %36 = @func_7556() /* ty=(Tensor[(264), bool], Tensor[(6, 16, 11), float64]) */;
  %37 = @func_5152() /* ty=(Tensor[(6, 16, 11), int8], Tensor[(6, 16, 11), float32]) */;
  %38 = %36.1;
  %39 = %37.0;
  (%38, %39)
}

def @func_1679() -> (Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool], Tensor[(420), uint32]) {
  %48 = fn () -> (Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool], Tensor[(420), uint32]) {
    %40 = @func_1643() /* ty=(Tensor[(6, 16, 11), float32],) */;
    %41 = %40.0;
    %42 = cast(%41, dtype="float32") /* ty=Tensor[(6, 16, 11), float32] */;
    %43 = cast(meta[relay.Constant][2] /* ty=Tensor[(420), uint32] */, dtype="uint32") /* ty=Tensor[(420), uint32] */;
    %44 = reshape(%43, newshape=[14, 5, 6]) /* ty=Tensor[(14, 5, 6), uint32] */;
    %45 = @func_904(%44) /* ty=(Tensor[(14, 5, 6), bool],) */;
    %46 = asinh(%42) /* ty=Tensor[(6, 16, 11), float32] */;
    %47 = %45.0;
    (%46, %47, meta[relay.Constant][2] /* ty=Tensor[(420), uint32] */)
  };
  %48() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool], Tensor[(420), uint32]) */
}

def @func_4954(%var_4953: Tensor[(420), uint32]) -> (Tensor[(6, 16, 11), float64], Tensor[(14, 5, 6), bool], Tensor[(420), uint32], Tensor[(6, 16, 11), float64]) {
  %57 = fn (%var_4930: Tensor[(420), uint32]) -> (Tensor[(6, 16, 11), float64], Tensor[(14, 5, 6), bool], Tensor[(420), uint32], Tensor[(6, 16, 11), float64]) {
    %49 = @func_4833() /* ty=(Tensor[(6, 16, 11), float64], Tensor[(1, 104), float64], Tensor[(135), float32], Tensor[(1089), float32], Tensor[(420), uint32]) */;
    %50 = cast(%var_4930, dtype="uint32") /* ty=Tensor[(420), uint32] */;
    %51 = reshape(%50, newshape=[14, 5, 6]) /* ty=Tensor[(14, 5, 6), uint32] */;
    %52 = @func_904(%51) /* ty=(Tensor[(14, 5, 6), bool],) */;
    %53 = @func_4833() /* ty=(Tensor[(6, 16, 11), float64], Tensor[(1, 104), float64], Tensor[(135), float32], Tensor[(1089), float32], Tensor[(420), uint32]) */;
    %54 = %49.0;
    %55 = %52.0;
    %56 = %53.0;
    (%54, %55, %var_4930, %56)
  };
  %57(%var_4953) /* ty=(Tensor[(6, 16, 11), float64], Tensor[(14, 5, 6), bool], Tensor[(420), uint32], Tensor[(6, 16, 11), float64]) */
}

def @func_462(%var_460: Tensor[(1, 7, 5), float64]) -> (Tensor[(1, 7, 5), float64],) {
  @func_459(%var_460) /* ty=(Tensor[(1, 7, 5), float64],) */
}

def @func_3835() -> Tensor[(6, 16, 11), float64] {
  @func_3833() /* ty=Tensor[(6, 16, 11), float64] */
}

def @func_1707() -> (Tensor[(6, 16, 11), float32],) {
  @func_1705() /* ty=(Tensor[(6, 16, 11), float32],) */
}

def @func_2954(%var_2952: float32, %var_2953: Tensor[(1089), float32]) -> (Tensor[(1056), float64], float32, Tensor[(1089), float32], Tensor[(2, 11, 12), bool], Tensor[(264), bool], Tensor[(6, 16, 11), float32]) {
  %73 = fn (%var_2915: float32, %var_2916: Tensor[(1089), float32]) -> (Tensor[(1056), float64], float32, Tensor[(1089), float32], Tensor[(2, 11, 12), bool], Tensor[(264), bool], Tensor[(6, 16, 11), float32]) {
    %58 = cast(%var_2915, dtype="float32") /* ty=float32 */;
    %59 = cast(%var_2916, dtype="float32") /* ty=Tensor[(1089), float32] */;
    %60 = reshape(%58, newshape=[]) /* ty=float32 */;
    %61 = reshape(%59, newshape=[1089]) /* ty=Tensor[(1089), float32] */;
    %62 = @func_1933(%60, %61) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool], Tensor[(1056), float64], float32, Tensor[(1089), float32], Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool]) */;
    %63 = cast(%var_2915, dtype="bool") /* ty=bool */;
    %64 = cast(meta[relay.Constant][3] /* ty=Tensor[(264), bool] */, dtype="bool") /* ty=Tensor[(264), bool] */;
    %65 = reshape(%63, newshape=[]) /* ty=bool */;
    %66 = reshape(%64, newshape=[2, 11, 12]) /* ty=Tensor[(2, 11, 12), bool] */;
    %67 = @func_2771(%65, %66) /* ty=(Tensor[(2, 11, 12), bool],) */;
    %68 = @func_2871() /* ty=Tensor[(6, 16, 11), float32] */;
    %69 = cast(%68, dtype="float32") /* ty=Tensor[(6, 16, 11), float32] */;
    %70 = %62.2;
    %71 = %67.0;
    %72 = atanh(%69) /* ty=Tensor[(6, 16, 11), float32] */;
    (%70, %var_2915, %var_2916, %71, meta[relay.Constant][3] /* ty=Tensor[(264), bool] */, %72)
  };
  %73(%var_2952, %var_2953) /* ty=(Tensor[(1056), float64], float32, Tensor[(1089), float32], Tensor[(2, 11, 12), bool], Tensor[(264), bool], Tensor[(6, 16, 11), float32]) */
}

def @func_6818(%var_6816: float32) -> (Tensor[(6, 16, 11), bool], Tensor[(15, 2, 10), float64], Tensor[(6, 16, 11), int32], Tensor[(264), float64], Tensor[(264), bool]) {
  @func_6815(%var_6816) /* ty=(Tensor[(6, 16, 11), bool], Tensor[(15, 2, 10), float64], Tensor[(6, 16, 11), int32], Tensor[(264), float64], Tensor[(264), bool]) */
}

def @func_4410(%var_4408: int32, %var_4409: Tensor[(15, 12, 7), int32]) -> (Tensor[(15, 12, 7), int32], bool) {
  %81 = fn (%var_4396: int32, %var_4397: Tensor[(15, 12, 7), int32]) -> (Tensor[(15, 12, 7), int32], bool) {
    %74 = cast(%var_4396, dtype="int32") /* ty=int32 */;
    %75 = cast(%var_4397, dtype="int32") /* ty=Tensor[(15, 12, 7), int32] */;
    %76 = cast(%var_4396, dtype="bool") /* ty=bool */;
    %77 = reshape(%76, newshape=[]) /* ty=bool */;
    %78 = @func_2813(%77) /* ty=(Tensor[(6, 16, 11), bool], Tensor[(2, 11, 12), bool], bool, Tensor[(264), bool]) */;
    %79 = bitwise_or(%74, %75) /* ty=Tensor[(15, 12, 7), int32] */;
    %80 = %78.2;
    (%79, %80)
  };
  %81(%var_4408, %var_4409) /* ty=(Tensor[(15, 12, 7), int32], bool) */
}

def @func_2978() -> (Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float32]) {
  %82 = @func_1705() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %83 = %82.0;
  %84 = @func_2701() /* ty=Tensor[(6, 16, 11), float32] */;
  (%83, %84)
}

def @func_3109(%var_3107: Tensor[(135), float32], %var_3108: Tensor[(1089), float32]) -> (Tensor[(6, 16, 11), float64], Tensor[(6, 16, 11), float32], Tensor[(135), float32], Tensor[(1089), float32], Tensor[(1, 7, 5), float64], Tensor[(35), float64]) {
  %98 = fn (%var_3091: Tensor[(135), float32], %var_3092: Tensor[(1089), float32]) -> (Tensor[(6, 16, 11), float64], Tensor[(6, 16, 11), float32], Tensor[(135), float32], Tensor[(1089), float32], Tensor[(1, 7, 5), float64], Tensor[(35), float64]) {
    %85 = @func_2138() /* ty=Tensor[(6, 16, 11), float64] */;
    %86 = cast(%85, dtype="float32") /* ty=Tensor[(6, 16, 11), float32] */;
    %87 = cast(%var_3091, dtype="float32") /* ty=Tensor[(135), float32] */;
    %88 = cast(%var_3092, dtype="float32") /* ty=Tensor[(1089), float32] */;
    %89 = reshape(%86, newshape=[6, 16, 11]) /* ty=Tensor[(6, 16, 11), float32] */;
    %90 = reshape(%87, newshape=[135]) /* ty=Tensor[(135), float32] */;
    %91 = reshape(%88, newshape=[1089]) /* ty=Tensor[(1089), float32] */;
    %92 = @func_2458(%89, %90, %91) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(1, 104), float64], Tensor[(135), float32], Tensor[(1089), float32]) */;
    %93 = cast(meta[relay.Constant][4] /* ty=Tensor[(35), float64] */, dtype="float64") /* ty=Tensor[(35), float64] */;
    %94 = reshape(%93, newshape=[1, 7, 5]) /* ty=Tensor[(1, 7, 5), float64] */;
    %95 = @func_459(%94) /* ty=(Tensor[(1, 7, 5), float64],) */;
    %96 = %92.0;
    %97 = %95.0;
    (%85, %96, %var_3091, %var_3092, %97, meta[relay.Constant][4] /* ty=Tensor[(35), float64] */)
  };
  %98(%var_3107, %var_3108) /* ty=(Tensor[(6, 16, 11), float64], Tensor[(6, 16, 11), float32], Tensor[(135), float32], Tensor[(1089), float32], Tensor[(1, 7, 5), float64], Tensor[(35), float64]) */
}

def @func_6652(%var_6651: Tensor[(264), bool]) -> (Tensor[(6, 16, 11), float32], Tensor[(1, 264), bool], Tensor[(264), float64]) {
  %107 = fn (%var_6631: Tensor[(264), bool]) -> (Tensor[(6, 16, 11), float32], Tensor[(1, 264), bool], Tensor[(264), float64]) {
    %99 = @func_4859() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), int8]) */;
    %100 = cast(%var_6631, dtype="bool") /* ty=Tensor[(264), bool] */;
    %101 = reshape(%100, newshape=[1, 264]) /* ty=Tensor[(1, 264), bool] */;
    %102 = @func_3349(%101) /* ty=(Tensor[(6, 16, 11), float64], Tensor[(6, 16, 11), float64], Tensor[(2, 11, 12), bool], bool, Tensor[(1, 264), bool]) */;
    %103 = cast(%var_6631, dtype="float64") /* ty=Tensor[(264), float64] */;
    %104 = %99.0;
    %105 = %102.4;
    %106 = acosh(%103) /* ty=Tensor[(264), float64] */;
    (%104, %105, %106)
  };
  %107(%var_6651) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(1, 264), bool], Tensor[(264), float64]) */
}

def @func_4015() -> (Tensor[(6, 16, 11), float64],) {
  @func_4013() /* ty=(Tensor[(6, 16, 11), float64],) */
}

def @func_906(%var_905: Tensor[(14, 5, 6), uint32]) -> (Tensor[(14, 5, 6), bool],) {
  %113 = fn (%var_897: Tensor[(14, 5, 6), uint32]) -> (Tensor[(14, 5, 6), bool],) {
    %108 = cast(meta[relay.Constant][5] /* ty=Tensor[(14, 5, 6), uint32] */, dtype="bool") /* ty=Tensor[(14, 5, 6), bool] */;
    %109 = shape_of(%var_897, dtype="int32") /* ty=Tensor[(3), int32] */;
    %110 = cast(%var_897, dtype="bool") /* ty=Tensor[(14, 5, 6), bool] */;
    %111 = dyn.reshape(%108, %109, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %112 = less(%110, %111) /* ty=Tensor[(14, 5, 6), bool] */;
    (%112,)
  };
  %113(%var_905) /* ty=(Tensor[(14, 5, 6), bool],) */
}

def @func_5538() -> (Tensor[(2, 11, 12), float64],) {
  @func_5536() /* ty=(Tensor[(2, 11, 12), float64],) */
}

def @func_5660() -> (Tensor[(6, 16, 11), float32],) {
  %114 = @func_1643() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %115 = %114.0;
  (%115,)
}

def @func_3624(%var_3621: Tensor[(6, 16, 11), float32], %var_3622: float32, %var_3623: Tensor[(1089, 1), float32]) -> (Tensor[(6, 16, 11), bool], Tensor[(1089), float32], float32, Tensor[(1089, 1), float32], Tensor[(6, 16, 11), float32]) {
  @func_3619(%var_3621, %var_3622, %var_3623) /* ty=(Tensor[(6, 16, 11), bool], Tensor[(1089), float32], float32, Tensor[(1089, 1), float32], Tensor[(6, 16, 11), float32]) */
}

def @func_8450() -> Tensor[(264), bool] {
  %116 = @func_4299() /* ty=(Tensor[(6, 16, 11), float64], bool, Tensor[(264), bool], Tensor[(2, 11, 12), float64]) */;
  %116.2
}

def @func_1236(%var_1234: Tensor[(10, 8, 3), float32], %var_1235: Tensor[(1584), float32]) -> (Tensor[(10, 8, 3), float32], Tensor[(16, 11, 9), bool], Tensor[(1584), float32]) {
  %128 = fn (%var_1207: Tensor[(10, 8, 3), float32], %var_1212: Tensor[(1584), float32]) -> (Tensor[(10, 8, 3), float32], Tensor[(16, 11, 9), bool], Tensor[(1584), float32]) {
    %117 = cast(%var_1207, dtype="float32") /* ty=Tensor[(10, 8, 3), float32] */;
    %118 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(10, 8, 3), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %119 = cast(meta[relay.Constant][6] /* ty=Tensor[(10, 8, 3), float32] */, dtype="float32") /* ty=Tensor[(10, 8, 3), float32] */;
    %120 = dyn.reshape(%117, %118, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %121 = cast(%var_1212, dtype="float32") /* ty=Tensor[(1584), float32] */;
    %122 = cast(%var_1212, dtype="float32") /* ty=Tensor[(1584), float32] */;
    %123 = reshape(%121, newshape=[16, 11, 9]) /* ty=Tensor[(16, 11, 9), float32] */;
    %124 = reshape(%122, newshape=[16, 11, 9]) /* ty=Tensor[(16, 11, 9), float32] */;
    %125 = @func_423(%123, %124) /* ty=(Tensor[(16, 11, 9), bool], Tensor[(16, 11, 9), int16]) */;
    %126 = floor_mod(%119, %120) /* ty=Tensor[(10, 8, 3), float32] */;
    %127 = %125.0;
    (%126, %127, %var_1212)
  };
  %128(%var_1234, %var_1235) /* ty=(Tensor[(10, 8, 3), float32], Tensor[(16, 11, 9), bool], Tensor[(1584), float32]) */
}

def @func_4452(%var_4450: Tensor[(8, 7, 4), int32], %var_4451: Tensor[(8, 7, 4), int32]) -> (Tensor[(8, 7, 4), int32],) {
  %134 = fn (%var_4442: Tensor[(8, 7, 4), int32], %var_4443: Tensor[(8, 7, 4), int32]) -> (Tensor[(8, 7, 4), int32],) {
    %129 = cast(%var_4443, dtype="int32") /* ty=Tensor[(8, 7, 4), int32] */;
    %130 = shape_of(%var_4442, dtype="int32") /* ty=Tensor[(3), int32] */;
    %131 = cast(%var_4442, dtype="int32") /* ty=Tensor[(8, 7, 4), int32] */;
    %132 = dyn.reshape(%129, %130, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %133 = bitwise_xor(%131, %132) /* ty=Tensor[(8, 7, 4), int32] */;
    (%133,)
  };
  %134(%var_4450, %var_4451) /* ty=(Tensor[(8, 7, 4), int32],) */
}

def @func_7474() -> Tensor[(135), float32] {
  %135 = @func_4833() /* ty=(Tensor[(6, 16, 11), float64], Tensor[(1, 104), float64], Tensor[(135), float32], Tensor[(1089), float32], Tensor[(420), uint32]) */;
  %135.2
}

def @func_4901(%var_4876: Tensor[(264), bool], %var_4889: float32, %var_4890: Tensor[(11, 99), float32], %var_4896: Tensor[(35), float64]) -> (Tensor[(264), bool], float32, float32, Tensor[(11, 99), float32], Tensor[(7, 5), float64], Tensor[(35), float64]) {
  %136 = @func_4299() /* ty=(Tensor[(6, 16, 11), float64], bool, Tensor[(264), bool], Tensor[(2, 11, 12), float64]) */;
  %137 = %136.2;
  %138 = cast(%var_4876, dtype="bool") /* ty=Tensor[(264), bool] */;
  %139 = shape_of(%137, dtype="int32") /* ty=Tensor[(1), int32] */;
  %140 = cast(%137, dtype="bool") /* ty=Tensor[(264), bool] */;
  %141 = dyn.reshape(%138, %139, newshape=[]) /* ty=Tensor[(?), bool] */;
  %142 = cast(%var_4889, dtype="float32") /* ty=float32 */;
  %143 = cast(%var_4890, dtype="float32") /* ty=Tensor[(11, 99), float32] */;
  %144 = reshape(%142, newshape=[]) /* ty=float32 */;
  %145 = reshape(%143, newshape=[1089]) /* ty=Tensor[(1089), float32] */;
  %146 = @func_2951(%144, %145) /* ty=(Tensor[(1056), float64], float32, Tensor[(1089), float32], Tensor[(2, 11, 12), bool], Tensor[(264), bool], Tensor[(6, 16, 11), float32]) */;
  %147 = cast(%var_4896, dtype="float64") /* ty=Tensor[(35), float64] */;
  %148 = reshape(%147, newshape=[7, 5]) /* ty=Tensor[(7, 5), float64] */;
  %149 = @func_1813(%148) /* ty=(Tensor[(420), uint32], Tensor[(1, 7, 5), float64], Tensor[(7, 5), float64]) */;
  %150 = equal(%140, %141) /* ty=Tensor[(264), bool] */;
  %151 = %146.1;
  %152 = %149.2;
  (%150, %151, %var_4889, %var_4890, %152, %var_4896)
}

def @func_6304() -> (Tensor[(6, 16, 11), float32],) {
  @func_6302() /* ty=(Tensor[(6, 16, 11), float32],) */
}

def @func_1813(%var_1808: Tensor[(7, 5), float64]) -> (Tensor[(420), uint32], Tensor[(1, 7, 5), float64], Tensor[(7, 5), float64]) {
  %153 = @func_1678() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool], Tensor[(420), uint32]) */;
  %154 = cast(%var_1808, dtype="float64") /* ty=Tensor[(7, 5), float64] */;
  %155 = reshape(%154, newshape=[1, 7, 5]) /* ty=Tensor[(1, 7, 5), float64] */;
  %156 = @func_459(%155) /* ty=(Tensor[(1, 7, 5), float64],) */;
  %157 = %153.2;
  %158 = %156.0;
  (%157, %158, %var_1808)
}

def @func_5950(%var_5937: Tensor[(1, 7, 1), float32], %var_5946: Tensor[(1, 2), float64]) -> (Tensor[(1, 7, 1), float32], Tensor[(2, 8, 12), float64], Tensor[(1, 2), float64]) {
  %159 = cast(%var_5937, dtype="float32") /* ty=Tensor[(1, 7, 1), float32] */;
  %160 = cast(%var_5946, dtype="float64") /* ty=Tensor[(1, 2), float64] */;
  %161 = reshape(%160, newshape=[2, 1, 1]) /* ty=Tensor[(2, 1, 1), float64] */;
  %162 = @func_5191(%161) /* ty=(Tensor[(2, 8, 12), float64],) */;
  %163 = cosh(%159) /* ty=Tensor[(1, 7, 1), float32] */;
  %164 = %162.0;
  (%163, %164, %var_5946)
}

def @func_5193(%var_5192: Tensor[(2, 1, 1), float64]) -> (Tensor[(2, 8, 12), float64],) {
  %168 = fn (%var_5179: Tensor[(2, 1, 1), float64]) -> (Tensor[(2, 8, 12), float64],) {
    %165 = cast(%var_5179, dtype="float64") /* ty=Tensor[(2, 1, 1), float64] */;
    %166 = cast(meta[relay.Constant][7] /* ty=Tensor[(2, 8, 12), float64] */, dtype="float64") /* ty=Tensor[(2, 8, 12), float64] */;
    %167 = mod(%165, %166) /* ty=Tensor[(2, 8, 12), float64] */;
    (%167,)
  };
  %168(%var_5192) /* ty=(Tensor[(2, 8, 12), float64],) */
}

def @func_5153() -> (Tensor[(6, 16, 11), int8], Tensor[(6, 16, 11), float32]) {
  %172 = fn () -> (Tensor[(6, 16, 11), int8], Tensor[(6, 16, 11), float32]) {
    %169 = @func_4136() /* ty=(Tensor[(6, 16, 11), int8],) */;
    %170 = %169.0;
    %171 = @func_2701() /* ty=Tensor[(6, 16, 11), float32] */;
    (%170, %171)
  };
  %172() /* ty=(Tensor[(6, 16, 11), int8], Tensor[(6, 16, 11), float32]) */
}

def @func_5717(%var_5699: Tensor[(1, 135), float32]) -> (Tensor[(6, 16, 11), float32], Tensor[(64), float32], Tensor[(1, 135), float32], Tensor[(1584), float32], Tensor[(35), float64], Tensor[(6, 16, 11), float64]) {
  %173 = @func_3118() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %174 = cast(%var_5699, dtype="float32") /* ty=Tensor[(1, 135), float32] */;
  %175 = reshape(%174, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %176 = @func_5635(%175) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(64), float32], Tensor[(35), float64], Tensor[(135), float32], Tensor[(135), float64], Tensor[(6, 16, 11), float32]) */;
  %177 = cast(meta[relay.Constant][8] /* ty=Tensor[(35), float64] */, dtype="float64") /* ty=Tensor[(35), float64] */;
  %178 = reshape(%177, newshape=[35]) /* ty=Tensor[(35), float64] */;
  %179 = @func_5222(%178) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float32], Tensor[(16, 11, 9), int16], Tensor[(1584), float32], Tensor[(6, 16, 11), float32], Tensor[(1584), float32], Tensor[(35), float64]) */;
  %180 = @func_4013() /* ty=(Tensor[(6, 16, 11), float64],) */;
  %181 = %173.0;
  %182 = %176.1;
  %183 = %179.3;
  %184 = %180.0;
  (%181, %182, %var_5699, %183, meta[relay.Constant][8] /* ty=Tensor[(35), float64] */, %184)
}

def @func_5970() -> (Tensor[(2, 11, 12), float64],) {
  %185 = @func_5536() /* ty=(Tensor[(2, 11, 12), float64],) */;
  %186 = %185.0;
  %187 = cast(%186, dtype="float64") /* ty=Tensor[(2, 11, 12), float64] */;
  %188 = sinh(%187) /* ty=Tensor[(2, 11, 12), float64] */;
  (%188,)
}

def @func_3619(%var_3585: Tensor[(6, 16, 11), float32], %var_3607: float32, %var_3608: Tensor[(1089, 1), float32]) -> (Tensor[(6, 16, 11), bool], Tensor[(1089), float32], float32, Tensor[(1089, 1), float32], Tensor[(6, 16, 11), float32]) {
  %189 = @func_1643() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %190 = %189.0;
  %191 = cast(%var_3585, dtype="bool") /* ty=Tensor[(6, 16, 11), bool] */;
  %192 = shape_of(%190, dtype="int32") /* ty=Tensor[(3), int32] */;
  %193 = cast(%190, dtype="bool") /* ty=Tensor[(6, 16, 11), bool] */;
  %194 = dyn.reshape(%191, %192, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %195 = cast(%var_3607, dtype="float32") /* ty=float32 */;
  %196 = cast(%var_3608, dtype="float32") /* ty=Tensor[(1089, 1), float32] */;
  %197 = reshape(%195, newshape=[]) /* ty=float32 */;
  %198 = reshape(%196, newshape=[1089]) /* ty=Tensor[(1089), float32] */;
  %199 = @func_2951(%197, %198) /* ty=(Tensor[(1056), float64], float32, Tensor[(1089), float32], Tensor[(2, 11, 12), bool], Tensor[(264), bool], Tensor[(6, 16, 11), float32]) */;
  %200 = @func_2978() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float32]) */;
  %201 = equal(%193, %194) /* ty=Tensor[(6, 16, 11), bool] */;
  %202 = %199.2;
  %203 = %200.1;
  (%201, %202, %var_3607, %var_3608, %203)
}

def @func_7188() -> Tensor[(6, 16, 11), float32] {
  %205 = fn () -> Tensor[(6, 16, 11), float32] {
    %204 = @func_5990() /* ty=(Tensor[(6, 16, 11), float32],) */;
    %204.0
  };
  %205() /* ty=Tensor[(6, 16, 11), float32] */
}

def @func_6949() -> (Tensor[(6, 16, 11), float32], Tensor[(2, 11, 12), float32], float32) {
  %206 = @func_5536() /* ty=(Tensor[(2, 11, 12), float64],) */;
  %207 = %206.0;
  %208 = cast(%207, dtype="float32") /* ty=Tensor[(2, 11, 12), float32] */;
  %209 = @func_6150() /* ty=(Tensor[(6, 16, 11), float32], float32, float32, Tensor[(1089), float32]) */;
  %210 = @func_6677() /* ty=Tensor[(6, 16, 11), float32] */;
  %211 = sqrt(%208) /* ty=Tensor[(2, 11, 12), float32] */;
  %212 = %209.2;
  (%210, %211, %212)
}

def @func_9198() -> Tensor[(264), bool] {
  @func_8450() /* ty=Tensor[(264), bool] */
}

def @func_8251() -> (Tensor[(6, 16, 11), float64], Tensor[(35), float64]) {
  @func_8249() /* ty=(Tensor[(6, 16, 11), float64], Tensor[(35), float64]) */
}

def @func_7752(%var_7751: Tensor[(1584), float32]) -> (Tensor[(6, 16, 11), float32], Tensor[(132, 12), float32], Tensor[(1584), float32]) {
  %219 = fn (%var_7744: Tensor[(1584), float32]) -> (Tensor[(6, 16, 11), float32], Tensor[(132, 12), float32], Tensor[(1584), float32]) {
    %213 = @func_5010() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float64], Tensor[(264), bool]) */;
    %214 = cast(%var_7744, dtype="float32") /* ty=Tensor[(1584), float32] */;
    %215 = reshape(%214, newshape=[132, 12]) /* ty=Tensor[(132, 12), float32] */;
    %216 = @func_6099(%215) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool], float32, Tensor[(1089), float32], Tensor[(132, 12), float32], Tensor[(2, 11, 12), float64]) */;
    %217 = %213.0;
    %218 = %216.4;
    (%217, %218, %var_7744)
  };
  %219(%var_7751) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(132, 12), float32], Tensor[(1584), float32]) */
}

def @func_5884() -> (Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float64], Tensor[(8, 12, 11), float32], Tensor[(6, 16, 11), float32], Tensor[(135), float32], Tensor[(11, 99), float32]) {
  %235 = fn () -> (Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float64], Tensor[(8, 12, 11), float32], Tensor[(6, 16, 11), float32], Tensor[(135), float32], Tensor[(11, 99), float32]) {
    %220 = @func_1705() /* ty=(Tensor[(6, 16, 11), float32],) */;
    %221 = @func_3439() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(8, 12, 11), float64]) */;
    %222 = %221.1;
    %223 = cast(%222, dtype="float32") /* ty=Tensor[(8, 12, 11), float32] */;
    %224 = @func_2138() /* ty=Tensor[(6, 16, 11), float64] */;
    %225 = cast(%224, dtype="float32") /* ty=Tensor[(6, 16, 11), float32] */;
    %226 = cast(meta[relay.Constant][9] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
    %227 = cast(meta[relay.Constant][10] /* ty=Tensor[(11, 99), float32] */, dtype="float32") /* ty=Tensor[(11, 99), float32] */;
    %228 = reshape(%225, newshape=[6, 16, 11]) /* ty=Tensor[(6, 16, 11), float32] */;
    %229 = reshape(%226, newshape=[135]) /* ty=Tensor[(135), float32] */;
    %230 = reshape(%227, newshape=[1089]) /* ty=Tensor[(1089), float32] */;
    %231 = @func_2458(%228, %229, %230) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(1, 104), float64], Tensor[(135), float32], Tensor[(1089), float32]) */;
    %232 = %220.0;
    %233 = log(%223) /* ty=Tensor[(8, 12, 11), float32] */;
    %234 = %231.0;
    (%232, %224, %233, %234, meta[relay.Constant][9] /* ty=Tensor[(135), float32] */, meta[relay.Constant][10] /* ty=Tensor[(11, 99), float32] */)
  };
  %235() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float64], Tensor[(8, 12, 11), float32], Tensor[(6, 16, 11), float32], Tensor[(135), float32], Tensor[(11, 99), float32]) */
}

def @func_6755() -> (Tensor[(420), uint32],) {
  %238 = fn () -> (Tensor[(420), uint32],) {
    %236 = @func_1678() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool], Tensor[(420), uint32]) */;
    %237 = %236.2;
    (%237,)
  };
  %238() /* ty=(Tensor[(420), uint32],) */
}

def @func_5222(%var_5216: Tensor[(35), float64]) -> (Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float32], Tensor[(16, 11, 9), int16], Tensor[(1584), float32], Tensor[(6, 16, 11), float32], Tensor[(1584), float32], Tensor[(35), float64]) {
  %239 = @func_1643() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %240 = @func_1643() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %241 = cast(meta[relay.Constant][11] /* ty=Tensor[(1584), float32] */, dtype="float32") /* ty=Tensor[(1584), float32] */;
  %242 = cast(meta[relay.Constant][11] /* ty=Tensor[(1584), float32] */, dtype="float32") /* ty=Tensor[(1584), float32] */;
  %243 = reshape(%241, newshape=[16, 11, 9]) /* ty=Tensor[(16, 11, 9), float32] */;
  %244 = reshape(%242, newshape=[16, 11, 9]) /* ty=Tensor[(16, 11, 9), float32] */;
  %245 = @func_423(%243, %244) /* ty=(Tensor[(16, 11, 9), bool], Tensor[(16, 11, 9), int16]) */;
  %246 = @func_2686() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %247 = cast(%var_5216, dtype="float64") /* ty=Tensor[(35), float64] */;
  %248 = reshape(%247, newshape=[1, 35]) /* ty=Tensor[(1, 35), float64] */;
  %249 = @func_4739(%248) /* ty=(Tensor[(6, 16, 11), float64], Tensor[(1, 7, 5), float64], Tensor[(15, 11, 14), float64], Tensor[(1, 35), float32], Tensor[(1, 35), float64], Tensor[(16, 11, 9), int16], Tensor[(1584), float32]) */;
  %250 = %239.0;
  %251 = %240.0;
  %252 = %245.1;
  %253 = %246.0;
  %254 = %249.6;
  (%250, %251, %252, meta[relay.Constant][11] /* ty=Tensor[(1584), float32] */, %253, %254, %var_5216)
}

def @func_8966(%var_8933: Tensor[(6, 10, 5), int32], %var_8962: Tensor[(240), float32]) -> (Tensor[(135), float64], Tensor[(6, 10, 5), uint8], Tensor[(16, 11, 9), bool], Tensor[(240), float32]) {
  %255 = cast(%var_8933, dtype="int32") /* ty=Tensor[(6, 10, 5), int32] */;
  %256 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(6, 10, 5), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %257 = cast(meta[relay.Constant][12] /* ty=Tensor[(6, 10, 5), int32] */, dtype="int32") /* ty=Tensor[(6, 10, 5), int32] */;
  %258 = dyn.reshape(%255, %256, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %259 = multiply(%257, %258) /* ty=Tensor[(6, 10, 5), int32] */;
  %260 = cast(%259, dtype="float32") /* ty=Tensor[(6, 10, 5), float32] */;
  %261 = sinh(%260) /* ty=Tensor[(6, 10, 5), float32] */;
  %262 = cast(%259, dtype="uint8") /* ty=Tensor[(6, 10, 5), uint8] */;
  %263 = shape_of(%261, dtype="int32") /* ty=Tensor[(3), int32] */;
  %264 = cast(%261, dtype="uint8") /* ty=Tensor[(6, 10, 5), uint8] */;
  %265 = dyn.reshape(%262, %263, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %266 = cast(%var_8962, dtype="float32") /* ty=Tensor[(240), float32] */;
  %267 = reshape(%266, newshape=[24, 10]) /* ty=Tensor[(24, 10), float32] */;
  %268 = @func_3035(%267) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(5, 3, 9), float32], Tensor[(135), float32], Tensor[(16, 11, 9), bool], Tensor[(24, 10), float32], Tensor[(1584), float32]) */;
  %269 = @func_7609() /* ty=Tensor[(135), float64] */;
  %270 = logical_xor(%264, %265) /* ty=Tensor[(6, 10, 5), uint8] */;
  %271 = %268.3;
  (%269, %270, %271, %var_8962)
}

def @func_1816(%var_1814: Tensor[(7, 5), float64]) -> (Tensor[(420), uint32], Tensor[(1, 7, 5), float64], Tensor[(7, 5), float64]) {
  @func_1813(%var_1814) /* ty=(Tensor[(420), uint32], Tensor[(1, 7, 5), float64], Tensor[(7, 5), float64]) */
}

def @func_3227() -> (Tensor[(6, 16, 11), float32], Tensor[(8, 12, 11), float64]) {
  %278 = fn () -> (Tensor[(6, 16, 11), float32], Tensor[(8, 12, 11), float64]) {
    %272 = @func_2978() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float32]) */;
    %273 = %272.0;
    %274 = cast(%273, dtype="float64") /* ty=Tensor[(6, 16, 11), float64] */;
    %275 = reshape(%274, newshape=[8, 12, 11]) /* ty=Tensor[(8, 12, 11), float64] */;
    %276 = @func_276(%275) /* ty=(Tensor[(8, 12, 11), float64],) */;
    %277 = %276.0;
    (%273, %277)
  };
  %278() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(8, 12, 11), float64]) */
}

def @func_2292(%var_2278: Tensor[(6, 16, 11), float32]) -> (Tensor[(6, 16, 11), int32],) {
  %279 = @func_1705() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %280 = %279.0;
  %281 = cast(%var_2278, dtype="int32") /* ty=Tensor[(6, 16, 11), int32] */;
  %282 = shape_of(%280, dtype="int32") /* ty=Tensor[(3), int32] */;
  %283 = cast(%280, dtype="int32") /* ty=Tensor[(6, 16, 11), int32] */;
  %284 = dyn.reshape(%281, %282, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %285 = logical_xor(%283, %284) /* ty=Tensor[(6, 16, 11), int32] */;
  (%285,)
}

def @func_2225(%var_2188: Tensor[(6, 16, 11), float32], %var_2198: float32, %var_2199: Tensor[(1089), float32], %var_2208: Tensor[(132, 12), float32]) -> (Tensor[(14, 5, 6), bool], float32, Tensor[(1089), float32], Tensor[(16, 11, 9), bool], Tensor[(24, 10), float32], Tensor[(132, 12), float32], Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool]) {
  %286 = cast(%var_2198, dtype="float32") /* ty=float32 */;
  %287 = cast(%var_2199, dtype="float32") /* ty=Tensor[(1089), float32] */;
  %288 = reshape(%286, newshape=[]) /* ty=float32 */;
  %289 = reshape(%287, newshape=[1089]) /* ty=Tensor[(1089), float32] */;
  %290 = @func_1933(%288, %289) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool], Tensor[(1056), float64], float32, Tensor[(1089), float32], Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool]) */;
  %291 = cast(meta[relay.Constant][13] /* ty=Tensor[(24, 10), float32] */, dtype="float32") /* ty=Tensor[(24, 10), float32] */;
  %292 = cast(%var_2208, dtype="float32") /* ty=Tensor[(132, 12), float32] */;
  %293 = reshape(%291, newshape=[10, 8, 3]) /* ty=Tensor[(10, 8, 3), float32] */;
  %294 = reshape(%292, newshape=[1584]) /* ty=Tensor[(1584), float32] */;
  %295 = @func_1233(%293, %294) /* ty=(Tensor[(10, 8, 3), float32], Tensor[(16, 11, 9), bool], Tensor[(1584), float32]) */;
  %296 = @func_1705() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %297 = %296.0;
  %298 = cast(%var_2188, dtype="bool") /* ty=Tensor[(6, 16, 11), bool] */;
  %299 = shape_of(%297, dtype="int32") /* ty=Tensor[(3), int32] */;
  %300 = cast(%297, dtype="bool") /* ty=Tensor[(6, 16, 11), bool] */;
  %301 = dyn.reshape(%298, %299, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %302 = less(%300, %301) /* ty=Tensor[(6, 16, 11), bool] */;
  %303 = cast(%302, dtype="float32") /* ty=Tensor[(6, 16, 11), float32] */;
  %304 = %290.6;
  %305 = cast(%304, dtype="uint32") /* ty=Tensor[(14, 5, 6), uint32] */;
  %306 = reshape(%305, newshape=[420]) /* ty=Tensor[(420), uint32] */;
  %307 = @func_1857(%306) /* ty=(Tensor[(6, 16, 11), float64], Tensor[(14, 5, 6), bool], Tensor[(420), uint32]) */;
  %308 = %295.1;
  %309 = erf(%303) /* ty=Tensor[(6, 16, 11), float32] */;
  %310 = %307.1;
  (%304, %var_2198, %var_2199, %308, meta[relay.Constant][13] /* ty=Tensor[(24, 10), float32] */, %var_2208, %309, %310)
}

def @func_196(%var_194: Tensor[(1, 2, 12), uint16], %var_195: Tensor[(10, 2, 12), uint16]) -> Tensor[(10, 2, 12), uint16] {
  %313 = fn (%var_188: Tensor[(1, 2, 12), uint16], %var_189: Tensor[(10, 2, 12), uint16]) -> Tensor[(10, 2, 12), uint16] {
    %311 = cast(%var_188, dtype="uint16") /* ty=Tensor[(1, 2, 12), uint16] */;
    %312 = cast(%var_189, dtype="uint16") /* ty=Tensor[(10, 2, 12), uint16] */;
    minimum(%311, %312) /* ty=Tensor[(10, 2, 12), uint16] */
  };
  %313(%var_194, %var_195) /* ty=Tensor[(10, 2, 12), uint16] */
}

def @func_4322() -> (Tensor[(6, 16, 11), float32],) {
  @func_4320() /* ty=(Tensor[(6, 16, 11), float32],) */
}

def @func_2815(%var_2814: bool) -> (Tensor[(6, 16, 11), bool], Tensor[(2, 11, 12), bool], bool, Tensor[(264), bool]) {
  %327 = fn (%var_2806: bool) -> (Tensor[(6, 16, 11), bool], Tensor[(2, 11, 12), bool], bool, Tensor[(264), bool]) {
    %314 = @func_2562() /* ty=(Tensor[(6, 16, 11), float32],) */;
    %315 = %314.0;
    %316 = cast(meta[relay.Constant][14] /* ty=Tensor[(6, 16, 11), float32] */, dtype="bool") /* ty=Tensor[(6, 16, 11), bool] */;
    %317 = shape_of(%315, dtype="int32") /* ty=Tensor[(3), int32] */;
    %318 = cast(%315, dtype="bool") /* ty=Tensor[(6, 16, 11), bool] */;
    %319 = dyn.reshape(%316, %317, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %320 = cast(%var_2806, dtype="bool") /* ty=bool */;
    %321 = cast(meta[relay.Constant][15] /* ty=Tensor[(264), bool] */, dtype="bool") /* ty=Tensor[(264), bool] */;
    %322 = reshape(%320, newshape=[]) /* ty=bool */;
    %323 = reshape(%321, newshape=[2, 11, 12]) /* ty=Tensor[(2, 11, 12), bool] */;
    %324 = @func_2771(%322, %323) /* ty=(Tensor[(2, 11, 12), bool],) */;
    %325 = greater_equal(%318, %319) /* ty=Tensor[(6, 16, 11), bool] */;
    %326 = %324.0;
    (%325, %326, %var_2806, meta[relay.Constant][15] /* ty=Tensor[(264), bool] */)
  };
  %327(%var_2814) /* ty=(Tensor[(6, 16, 11), bool], Tensor[(2, 11, 12), bool], bool, Tensor[(264), bool]) */
}

def @func_6815(%var_6784: float32) -> (Tensor[(6, 16, 11), bool], Tensor[(15, 2, 10), float64], Tensor[(6, 16, 11), int32], Tensor[(264), float64], Tensor[(264), bool]) {
  %328 = cast(%var_6784, dtype="bool") /* ty=bool */;
  %329 = reshape(%328, newshape=[]) /* ty=bool */;
  %330 = @func_2813(%329) /* ty=(Tensor[(6, 16, 11), bool], Tensor[(2, 11, 12), bool], bool, Tensor[(264), bool]) */;
  %331 = cast(%var_6784, dtype="float32") /* ty=float32 */;
  %332 = cast(meta[relay.Constant][16] /* ty=Tensor[(15, 2, 10), float32] */, dtype="float32") /* ty=Tensor[(15, 2, 10), float32] */;
  %333 = mod(%331, %332) /* ty=Tensor[(15, 2, 10), float32] */;
  %334 = cast(%333, dtype="float32") /* ty=Tensor[(15, 2, 10), float32] */;
  %335 = asinh(%334) /* ty=Tensor[(15, 2, 10), float32] */;
  %336 = cast(%335, dtype="float64") /* ty=Tensor[(15, 2, 10), float64] */;
  %337 = %330.0;
  %338 = cast(%337, dtype="float32") /* ty=Tensor[(6, 16, 11), float32] */;
  %339 = reshape(%338, newshape=[6, 16, 11]) /* ty=Tensor[(6, 16, 11), float32] */;
  %340 = @func_2292(%339) /* ty=(Tensor[(6, 16, 11), int32],) */;
  %341 = cast(meta[relay.Constant][17] /* ty=Tensor[(264), bool] */, dtype="bool") /* ty=Tensor[(264), bool] */;
  %342 = reshape(%341, newshape=[264]) /* ty=Tensor[(264), bool] */;
  %343 = @func_6650(%342) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(1, 264), bool], Tensor[(264), float64]) */;
  %344 = cos(%336) /* ty=Tensor[(15, 2, 10), float64] */;
  %345 = %340.0;
  %346 = %343.2;
  (%337, %344, %345, %346, meta[relay.Constant][17] /* ty=Tensor[(264), bool] */)
}

def @func_6531(%var_6529: Tensor[(135), float32]) -> (Tensor[(1, 8, 13), float64], Tensor[(5, 3, 9), float32], Tensor[(135), float32]) {
  @func_6528(%var_6529) /* ty=(Tensor[(1, 8, 13), float64], Tensor[(5, 3, 9), float32], Tensor[(135), float32]) */
}

def @func_1937(%var_1935: float32, %var_1936: Tensor[(1089), float32]) -> (Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool], Tensor[(1056), float64], float32, Tensor[(1089), float32], Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool]) {
  @func_1933(%var_1935, %var_1936) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool], Tensor[(1056), float64], float32, Tensor[(1089), float32], Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool]) */
}

def @func_6854(%var_6852: Tensor[(6, 16, 11), float32]) -> (Tensor[(6, 16, 11), int32], Tensor[(15, 11, 14), float64]) {
  @func_6851(%var_6852) /* ty=(Tensor[(6, 16, 11), int32], Tensor[(15, 11, 14), float64]) */
}

def @func_5011() -> (Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float64], Tensor[(264), bool]) {
  %353 = fn () -> (Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float64], Tensor[(264), bool]) {
    %347 = @func_3439() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(8, 12, 11), float64]) */;
    %348 = cast(meta[relay.Constant][18] /* ty=Tensor[(264), bool] */, dtype="bool") /* ty=Tensor[(264), bool] */;
    %349 = reshape(%348, newshape=[1, 264]) /* ty=Tensor[(1, 264), bool] */;
    %350 = @func_3349(%349) /* ty=(Tensor[(6, 16, 11), float64], Tensor[(6, 16, 11), float64], Tensor[(2, 11, 12), bool], bool, Tensor[(1, 264), bool]) */;
    %351 = %347.0;
    %352 = %350.1;
    (%351, %352, meta[relay.Constant][18] /* ty=Tensor[(264), bool] */)
  };
  %353() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float64], Tensor[(264), bool]) */
}

def @func_2138() -> Tensor[(6, 16, 11), float64] {
  %354 = @func_1643() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %355 = %354.0;
  %356 = cast(%355, dtype="float64") /* ty=Tensor[(6, 16, 11), float64] */;
  sin(%356) /* ty=Tensor[(6, 16, 11), float64] */
}

def @func_3440() -> (Tensor[(6, 16, 11), float32], Tensor[(8, 12, 11), float64]) {
  %363 = fn () -> (Tensor[(6, 16, 11), float32], Tensor[(8, 12, 11), float64]) {
    %357 = @func_2978() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float32]) */;
    %358 = %357.1;
    %359 = cast(%358, dtype="float64") /* ty=Tensor[(6, 16, 11), float64] */;
    %360 = reshape(%359, newshape=[8, 12, 11]) /* ty=Tensor[(8, 12, 11), float64] */;
    %361 = @func_276(%360) /* ty=(Tensor[(8, 12, 11), float64],) */;
    %362 = %361.0;
    (%358, %362)
  };
  %363() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(8, 12, 11), float64]) */
}

def @func_3119() -> (Tensor[(6, 16, 11), float32],) {
  %365 = fn () -> (Tensor[(6, 16, 11), float32],) {
    %364 = @func_2701() /* ty=Tensor[(6, 16, 11), float32] */;
    (%364,)
  };
  %365() /* ty=(Tensor[(6, 16, 11), float32],) */
}

def @func_3351(%var_3350: Tensor[(1, 264), bool]) -> (Tensor[(6, 16, 11), float64], Tensor[(6, 16, 11), float64], Tensor[(2, 11, 12), bool], bool, Tensor[(1, 264), bool]) {
  %375 = fn (%var_3341: Tensor[(1, 264), bool]) -> (Tensor[(6, 16, 11), float64], Tensor[(6, 16, 11), float64], Tensor[(2, 11, 12), bool], bool, Tensor[(1, 264), bool]) {
    %366 = @func_2507() /* ty=(Tensor[(6, 16, 11), float64],) */;
    %367 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
    %368 = cast(%var_3341, dtype="bool") /* ty=Tensor[(1, 264), bool] */;
    %369 = reshape(%367, newshape=[]) /* ty=bool */;
    %370 = reshape(%368, newshape=[2, 11, 12]) /* ty=Tensor[(2, 11, 12), bool] */;
    %371 = @func_2771(%369, %370) /* ty=(Tensor[(2, 11, 12), bool],) */;
    %372 = @func_2138() /* ty=Tensor[(6, 16, 11), float64] */;
    %373 = %366.0;
    %374 = %371.0;
    (%372, %373, %374, False /* ty=bool */, %var_3341)
  };
  %375(%var_3350) /* ty=(Tensor[(6, 16, 11), float64], Tensor[(6, 16, 11), float64], Tensor[(2, 11, 12), bool], bool, Tensor[(1, 264), bool]) */
}

def @func_276(%var_272: Tensor[(8, 12, 11), float64]) -> (Tensor[(8, 12, 11), float64],) {
  %376 = cast(%var_272, dtype="float64") /* ty=Tensor[(8, 12, 11), float64] */;
  %377 = sinh(%376) /* ty=Tensor[(8, 12, 11), float64] */;
  (%377,)
}

def @func_426(%var_424: Tensor[(16, 11, 9), float32], %var_425: Tensor[(16, 11, 9), float32]) -> (Tensor[(16, 11, 9), bool], Tensor[(16, 11, 9), int16]) {
  %388 = fn (%var_405: Tensor[(16, 11, 9), float32], %var_406: Tensor[(16, 11, 9), float32]) -> (Tensor[(16, 11, 9), bool], Tensor[(16, 11, 9), int16]) {
    %378 = cast(%var_406, dtype="bool") /* ty=Tensor[(16, 11, 9), bool] */;
    %379 = shape_of(%var_405, dtype="int32") /* ty=Tensor[(3), int32] */;
    %380 = cast(%var_405, dtype="bool") /* ty=Tensor[(16, 11, 9), bool] */;
    %381 = dyn.reshape(%378, %379, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %382 = cast(%var_405, dtype="int16") /* ty=Tensor[(16, 11, 9), int16] */;
    %383 = shape_of(%var_406, dtype="int32") /* ty=Tensor[(3), int32] */;
    %384 = cast(%var_406, dtype="int16") /* ty=Tensor[(16, 11, 9), int16] */;
    %385 = dyn.reshape(%382, %383, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %386 = equal(%380, %381) /* ty=Tensor[(16, 11, 9), bool] */;
    %387 = bitwise_or(%384, %385) /* ty=Tensor[(16, 11, 9), int16] */;
    (%386, %387)
  };
  %388(%var_424, %var_425) /* ty=(Tensor[(16, 11, 9), bool], Tensor[(16, 11, 9), int16]) */
}

def @func_8637() -> Tensor[(6, 16, 11), int8] {
  @func_3191() /* ty=Tensor[(6, 16, 11), int8] */
}

def @func_6482() -> (Tensor[(11, 99), float64], Tensor[(6, 16, 11), float64], Tensor[(11, 99), bool], Tensor[(11, 99), bool]) {
  %423 = fn () -> (Tensor[(11, 99), float64], Tensor[(6, 16, 11), float64], Tensor[(11, 99), bool], Tensor[(11, 99), bool]) {
    %389 = @func_5883() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float64], Tensor[(8, 12, 11), float32], Tensor[(6, 16, 11), float32], Tensor[(135), float32], Tensor[(11, 99), float32]) */;
    %390 = %389.5;
    %391 = cast(%390, dtype="float32") /* ty=Tensor[(11, 99), float32] */;
    %392 = log(%391) /* ty=Tensor[(11, 99), float32] */;
    %393 = cast(%390, dtype="uint8") /* ty=Tensor[(11, 99), uint8] */;
    %394 = shape_of(%392, dtype="int32") /* ty=Tensor[(2), int32] */;
    %395 = cast(%392, dtype="uint8") /* ty=Tensor[(11, 99), uint8] */;
    %396 = dyn.reshape(%393, %394, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %397 = logical_xor(%395, %396) /* ty=Tensor[(11, 99), uint8] */;
    %398 = cast(%397, dtype="float64") /* ty=Tensor[(11, 99), float64] */;
    %399 = @func_5010() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float64], Tensor[(264), bool]) */;
    %400 = cast(%392, dtype="float64") /* ty=Tensor[(11, 99), float64] */;
    %401 = acosh(%400) /* ty=Tensor[(11, 99), float64] */;
    %402 = cast(%401, dtype="float32") /* ty=Tensor[(11, 99), float32] */;
    %403 = tan(%402) /* ty=Tensor[(11, 99), float32] */;
    %404 = cast(%403, dtype="float32") /* ty=Tensor[(11, 99), float32] */;
    %405 = acos(%404) /* ty=Tensor[(11, 99), float32] */;
    %406 = cast(%401, dtype="int64") /* ty=Tensor[(11, 99), int64] */;
    %407 = shape_of(%405, dtype="int32") /* ty=Tensor[(2), int32] */;
    %408 = cast(%405, dtype="int64") /* ty=Tensor[(11, 99), int64] */;
    %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
    %410 = bitwise_or(%408, %409) /* ty=Tensor[(11, 99), int64] */;
    %411 = cast(%392, dtype="bool") /* ty=Tensor[(11, 99), bool] */;
    %412 = shape_of(%410, dtype="int32") /* ty=Tensor[(2), int32] */;
    %413 = cast(%410, dtype="bool") /* ty=Tensor[(11, 99), bool] */;
    %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %415 = cast(%410, dtype="bool") /* ty=Tensor[(11, 99), bool] */;
    %416 = shape_of(%392, dtype="int32") /* ty=Tensor[(2), int32] */;
    %417 = cast(%392, dtype="bool") /* ty=Tensor[(11, 99), bool] */;
    %418 = dyn.reshape(%415, %416, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %419 = sqrt(%398) /* ty=Tensor[(11, 99), float64] */;
    %420 = %399.1;
    %421 = greater_equal(%413, %414) /* ty=Tensor[(11, 99), bool] */;
    %422 = less_equal(%417, %418) /* ty=Tensor[(11, 99), bool] */;
    (%419, %420, %421, %422)
  };
  %423() /* ty=(Tensor[(11, 99), float64], Tensor[(6, 16, 11), float64], Tensor[(11, 99), bool], Tensor[(11, 99), bool]) */
}

def @func_7729(%var_7721: Tensor[(2, 11, 12), float64]) -> (Tensor[(6, 16, 11), float32], Tensor[(35), float64], Tensor[(6, 16, 11), float32], Tensor[(2, 11, 12), bool]) {
  %424 = @func_2978() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float32]) */;
  %425 = @func_6984() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(420), uint32], Tensor[(35), float64]) */;
  %426 = @func_5536() /* ty=(Tensor[(2, 11, 12), float64],) */;
  %427 = %426.0;
  %428 = cast(%var_7721, dtype="bool") /* ty=Tensor[(2, 11, 12), bool] */;
  %429 = shape_of(%427, dtype="int32") /* ty=Tensor[(3), int32] */;
  %430 = cast(%427, dtype="bool") /* ty=Tensor[(2, 11, 12), bool] */;
  %431 = dyn.reshape(%428, %429, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %432 = %424.1;
  %433 = %425.2;
  %434 = @func_7187() /* ty=Tensor[(6, 16, 11), float32] */;
  %435 = equal(%430, %431) /* ty=Tensor[(2, 11, 12), bool] */;
  (%432, %433, %434, %435)
}

def @func_7525() -> Tensor[(6, 16, 11), float32] {
  %436 = @func_2562() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %436.0
}

def @func_3191() -> Tensor[(6, 16, 11), int8] {
  %437 = @func_2978() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float32]) */;
  %438 = %437.1;
  %439 = @func_2978() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float32]) */;
  %440 = %439.1;
  %441 = cast(%438, dtype="float64") /* ty=Tensor[(6, 16, 11), float64] */;
  %442 = shape_of(%440, dtype="int32") /* ty=Tensor[(3), int32] */;
  %443 = cast(%440, dtype="float64") /* ty=Tensor[(6, 16, 11), float64] */;
  %444 = dyn.reshape(%441, %442, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %445 = add(%443, %444) /* ty=Tensor[(6, 16, 11), float64] */;
  %446 = cast(%445, dtype="int8") /* ty=Tensor[(6, 16, 11), int8] */;
  %447 = shape_of(%438, dtype="int32") /* ty=Tensor[(3), int32] */;
  %448 = cast(%438, dtype="int8") /* ty=Tensor[(6, 16, 11), int8] */;
  %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  bitwise_xor(%448, %449) /* ty=Tensor[(6, 16, 11), int8] */
}

def @func_8123(%var_8122: Tensor[(11, 99), float32]) -> (Tensor[(11, 99), bool], Tensor[(11, 99), int8]) {
  %462 = fn (%var_8113: Tensor[(11, 99), float32]) -> (Tensor[(11, 99), bool], Tensor[(11, 99), int8]) {
    %450 = @func_7444() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(11, 99), float32]) */;
    %451 = %450.1;
    %452 = cast(meta[relay.Constant][19] /* ty=Tensor[(11, 99), float32] */, dtype="bool") /* ty=Tensor[(11, 99), bool] */;
    %453 = shape_of(%451, dtype="int32") /* ty=Tensor[(2), int32] */;
    %454 = cast(%451, dtype="bool") /* ty=Tensor[(11, 99), bool] */;
    %455 = dyn.reshape(%452, %453, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %456 = cast(%var_8113, dtype="int8") /* ty=Tensor[(11, 99), int8] */;
    %457 = shape_of(%451, dtype="int32") /* ty=Tensor[(2), int32] */;
    %458 = cast(%451, dtype="int8") /* ty=Tensor[(11, 99), int8] */;
    %459 = dyn.reshape(%456, %457, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
    %460 = greater(%454, %455) /* ty=Tensor[(11, 99), bool] */;
    %461 = multiply(%458, %459) /* ty=Tensor[(11, 99), int8] */;
    (%460, %461)
  };
  %462(%var_8122) /* ty=(Tensor[(11, 99), bool], Tensor[(11, 99), int8]) */
}

def @func_5637(%var_5636: Tensor[(135), float32]) -> (Tensor[(6, 16, 11), float32], Tensor[(64), float32], Tensor[(35), float64], Tensor[(135), float32], Tensor[(135), float64], Tensor[(6, 16, 11), float32]) {
  %477 = fn (%var_5615: Tensor[(135), float32]) -> (Tensor[(6, 16, 11), float32], Tensor[(64), float32], Tensor[(35), float64], Tensor[(135), float32], Tensor[(135), float64], Tensor[(6, 16, 11), float32]) {
    %463 = @func_2686() /* ty=(Tensor[(6, 16, 11), float32],) */;
    %464 = cast(meta[relay.Constant][20] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
    %465 = cast(meta[relay.Constant][21] /* ty=Tensor[(35), float64] */, dtype="float64") /* ty=Tensor[(35), float64] */;
    %466 = cast(%var_5615, dtype="float32") /* ty=Tensor[(135), float32] */;
    %467 = reshape(%464, newshape=[8, 1, 8]) /* ty=Tensor[(8, 1, 8), float32] */;
    %468 = reshape(%465, newshape=[35]) /* ty=Tensor[(35), float64] */;
    %469 = reshape(%466, newshape=[135]) /* ty=Tensor[(135), float32] */;
    %470 = @func_4070(%467, %468, %469) /* ty=(Tensor[(8, 1, 8), float32], Tensor[(6, 16, 11), float64], Tensor[(6, 16, 11), float32], Tensor[(7, 5), float64], Tensor[(35), float64], Tensor[(5, 3, 9), float32], Tensor[(135), float32], Tensor[(8, 1, 8), float64]) */;
    %471 = %470.6;
    %472 = cast(%471, dtype="float64") /* ty=Tensor[(135), float64] */;
    %473 = @func_3118() /* ty=(Tensor[(6, 16, 11), float32],) */;
    %474 = %463.0;
    %475 = rsqrt(%472) /* ty=Tensor[(135), float64] */;
    %476 = %473.0;
    (%474, meta[relay.Constant][20] /* ty=Tensor[(64), float32] */, meta[relay.Constant][21] /* ty=Tensor[(35), float64] */, %var_5615, %475, %476)
  };
  %477(%var_5636) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(64), float32], Tensor[(35), float64], Tensor[(135), float32], Tensor[(135), float64], Tensor[(6, 16, 11), float32]) */
}

def @func_2507() -> (Tensor[(6, 16, 11), float64],) {
  %478 = @func_2138() /* ty=Tensor[(6, 16, 11), float64] */;
  (%478,)
}

def @func_8418(%var_8417: Tensor[(3, 6, 11), int32]) -> (Tensor[(3, 6, 11), int32],) {
  %484 = fn (%var_8411: Tensor[(3, 6, 11), int32]) -> (Tensor[(3, 6, 11), int32],) {
    %479 = cast(meta[relay.Constant][22] /* ty=Tensor[(3, 6, 11), int32] */, dtype="int32") /* ty=Tensor[(3, 6, 11), int32] */;
    %480 = shape_of(%var_8411, dtype="int32") /* ty=Tensor[(3), int32] */;
    %481 = cast(%var_8411, dtype="int32") /* ty=Tensor[(3, 6, 11), int32] */;
    %482 = dyn.reshape(%479, %480, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %483 = right_shift(%481, %482) /* ty=Tensor[(3, 6, 11), int32] */;
    (%483,)
  };
  %484(%var_8417) /* ty=(Tensor[(3, 6, 11), int32],) */
}

def @func_7360() -> (Tensor[(6, 16, 11), float32], Tensor[(16, 11, 16), uint32], Tensor[(6, 16, 11), float32]) {
  %494 = fn () -> (Tensor[(6, 16, 11), float32], Tensor[(16, 11, 16), uint32], Tensor[(6, 16, 11), float32]) {
    %485 = cast(meta[relay.Constant][23] /* ty=Tensor[(16, 11, 16), float32] */, dtype="float32") /* ty=Tensor[(16, 11, 16), float32] */;
    %486 = atan(%485) /* ty=Tensor[(16, 11, 16), float32] */;
    %487 = cast(meta[relay.Constant][24] /* ty=Tensor[(16, 11, 16), float32] */, dtype="uint32") /* ty=Tensor[(16, 11, 16), uint32] */;
    %488 = shape_of(%486, dtype="int32") /* ty=Tensor[(3), int32] */;
    %489 = cast(%486, dtype="uint32") /* ty=Tensor[(16, 11, 16), uint32] */;
    %490 = dyn.reshape(%487, %488, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %491 = @func_5802() /* ty=Tensor[(6, 16, 11), float32] */;
    %492 = minimum(%489, %490) /* ty=Tensor[(16, 11, 16), uint32] */;
    %493 = @func_7187() /* ty=Tensor[(6, 16, 11), float32] */;
    (%491, %492, %493)
  };
  %494() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(16, 11, 16), uint32], Tensor[(6, 16, 11), float32]) */
}

def @func_8923() -> (Tensor[(420), uint32],) {
  @func_8921() /* ty=(Tensor[(420), uint32],) */
}

def @func_2980() -> (Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float32]) {
  @func_2978() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float32]) */
}

def @func_7015() -> (Tensor[(15, 11, 14), float64], Tensor[(6, 16, 11), int8]) {
  %498 = fn () -> (Tensor[(15, 11, 14), float64], Tensor[(6, 16, 11), int8]) {
    %495 = @func_5152() /* ty=(Tensor[(6, 16, 11), int8], Tensor[(6, 16, 11), float32]) */;
    %496 = @func_4227() /* ty=Tensor[(15, 11, 14), float64] */;
    %497 = %495.0;
    (%496, %497)
  };
  %498() /* ty=(Tensor[(15, 11, 14), float64], Tensor[(6, 16, 11), int8]) */
}

def @func_9084(%var_9063: Tensor[(10, 12, 15), uint8]) -> Tensor[(10, 12, 15), uint8] {
  %499 = cast(%var_9063, dtype="uint8") /* ty=Tensor[(10, 12, 15), uint8] */;
  %500 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(10, 12, 15), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %501 = cast(meta[relay.Constant][25] /* ty=Tensor[(10, 12, 15), uint8] */, dtype="uint8") /* ty=Tensor[(10, 12, 15), uint8] */;
  %502 = dyn.reshape(%499, %500, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  bitwise_and(%501, %502) /* ty=Tensor[(10, 12, 15), uint8] */
}

def @func_9168() -> (Tensor[(264), bool], Tensor[(6, 16, 11), float64]) {
  %505 = fn () -> (Tensor[(264), bool], Tensor[(6, 16, 11), float64]) {
    %503 = @func_8450() /* ty=Tensor[(264), bool] */;
    %504 = @func_2138() /* ty=Tensor[(6, 16, 11), float64] */;
    (%503, %504)
  };
  %505() /* ty=(Tensor[(264), bool], Tensor[(6, 16, 11), float64]) */
}

def @func_9087(%var_9085: Tensor[(10, 12, 15), uint8]) -> Tensor[(10, 12, 15), uint8] {
  @func_9084(%var_9085) /* ty=Tensor[(10, 12, 15), uint8] */
}

def @func_7598(%var_7567: Tensor[(24, 10), float32]) -> (Tensor[(6, 16, 11), float32], Tensor[(2, 11, 12), float64], Tensor[(16, 11, 9), bool], Tensor[(24, 10), float32]) {
  %506 = @func_5970() /* ty=(Tensor[(2, 11, 12), float64],) */;
  %507 = cast(%var_7567, dtype="float32") /* ty=Tensor[(24, 10), float32] */;
  %508 = reshape(%507, newshape=[24, 10]) /* ty=Tensor[(24, 10), float32] */;
  %509 = @func_3035(%508) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(5, 3, 9), float32], Tensor[(135), float32], Tensor[(16, 11, 9), bool], Tensor[(24, 10), float32], Tensor[(1584), float32]) */;
  %510 = cast(%var_7567, dtype="float32") /* ty=Tensor[(24, 10), float32] */;
  %511 = @func_7525() /* ty=Tensor[(6, 16, 11), float32] */;
  %512 = %506.0;
  %513 = %509.3;
  %514 = log2(%510) /* ty=Tensor[(24, 10), float32] */;
  (%511, %512, %513, %514)
}

def @func_5803() -> Tensor[(6, 16, 11), float32] {
  %516 = fn () -> Tensor[(6, 16, 11), float32] {
    %515 = @func_4574() /* ty=(Tensor[(6, 16, 11), float32],) */;
    %515.0
  };
  %516() /* ty=Tensor[(6, 16, 11), float32] */
}

def @func_1644() -> (Tensor[(6, 16, 11), float32],) {
  %519 = fn () -> (Tensor[(6, 16, 11), float32],) {
    %517 = cast(meta[relay.Constant][26] /* ty=Tensor[(6, 16, 11), float32] */, dtype="float32") /* ty=Tensor[(6, 16, 11), float32] */;
    %518 = cosh(%517) /* ty=Tensor[(6, 16, 11), float32] */;
    (%518,)
  };
  %519() /* ty=(Tensor[(6, 16, 11), float32],) */
}

def @func_2630(%var_2628: Tensor[(52, 2), float64]) -> (Tensor[(6, 16, 11), float32], Tensor[(52, 2), bool]) {
  @func_2627(%var_2628) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(52, 2), bool]) */
}

def @func_5319(%var_5304: Tensor[(135), float32], %var_5315: Tensor[(896), float32], %var_5317: Tensor[(132, 12), float32]) -> (Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float64], Tensor[(5, 3, 9), float32], Tensor[(135), float32], Tensor[(121, 9), float32], Tensor[(16, 8, 7), float32], Tensor[(896), float32], Tensor[(52, 2), float64], Tensor[(132, 12), float32]) {
  %520 = @func_5152() /* ty=(Tensor[(6, 16, 11), int8], Tensor[(6, 16, 11), float32]) */;
  %521 = cast(%var_5304, dtype="float32") /* ty=Tensor[(135), float32] */;
  %522 = cast(meta[relay.Constant][27] /* ty=Tensor[(121, 9), float32] */, dtype="float32") /* ty=Tensor[(121, 9), float32] */;
  %523 = reshape(%521, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %524 = reshape(%522, newshape=[1089]) /* ty=Tensor[(1089), float32] */;
  %525 = @func_2390(%523, %524) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(5, 3, 9), float32], Tensor[(135), float32], Tensor[(1, 8, 13), float64], Tensor[(1, 104), float64], Tensor[(1056), float64], Tensor[(1089), uint32], Tensor[(5, 3, 9), float32]) */;
  %526 = cast(%var_5315, dtype="float32") /* ty=Tensor[(896), float32] */;
  %527 = cast(meta[relay.Constant][28] /* ty=Tensor[(52, 2), float64] */, dtype="float64") /* ty=Tensor[(52, 2), float64] */;
  %528 = cast(%var_5317, dtype="float32") /* ty=Tensor[(132, 12), float32] */;
  %529 = reshape(%526, newshape=[16, 8, 7]) /* ty=Tensor[(16, 8, 7), float32] */;
  %530 = reshape(%527, newshape=[104]) /* ty=Tensor[(104), float64] */;
  %531 = reshape(%528, newshape=[1584]) /* ty=Tensor[(1584), float32] */;
  %532 = @func_4469(%529, %530, %531) /* ty=(Tensor[(16, 8, 7), float32], Tensor[(2, 792), float32], Tensor[(104), float64], Tensor[(1584), float32]) */;
  %533 = %520.1;
  %534 = @func_3833() /* ty=Tensor[(6, 16, 11), float64] */;
  %535 = %525.7;
  %536 = %532.0;
  (%533, %534, %535, %var_5304, meta[relay.Constant][27] /* ty=Tensor[(121, 9), float32] */, %536, %var_5315, meta[relay.Constant][28] /* ty=Tensor[(52, 2), float64] */, %var_5317)
}

def @func_6678() -> Tensor[(6, 16, 11), float32] {
  %538 = fn () -> Tensor[(6, 16, 11), float32] {
    %537 = @func_4320() /* ty=(Tensor[(6, 16, 11), float32],) */;
    %537.0
  };
  %538() /* ty=Tensor[(6, 16, 11), float32] */
}

def @func_6851(%var_6823: Tensor[(6, 16, 11), float32]) -> (Tensor[(6, 16, 11), int32], Tensor[(15, 11, 14), float64]) {
  %539 = @func_4859() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), int8]) */;
  %540 = %539.0;
  %541 = cast(%var_6823, dtype="int32") /* ty=Tensor[(6, 16, 11), int32] */;
  %542 = shape_of(%540, dtype="int32") /* ty=Tensor[(3), int32] */;
  %543 = cast(%540, dtype="int32") /* ty=Tensor[(6, 16, 11), int32] */;
  %544 = dyn.reshape(%541, %542, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %545 = @func_5435() /* ty=(Tensor[(15, 11, 14), float64],) */;
  %546 = bitwise_and(%543, %544) /* ty=Tensor[(6, 16, 11), int32] */;
  %547 = %545.0;
  (%546, %547)
}

def @func_4474(%var_4471: Tensor[(16, 8, 7), float32], %var_4472: Tensor[(104), float64], %var_4473: Tensor[(1584), float32]) -> (Tensor[(16, 8, 7), float32], Tensor[(2, 792), float32], Tensor[(104), float64], Tensor[(1584), float32]) {
  @func_4469(%var_4471, %var_4472, %var_4473) /* ty=(Tensor[(16, 8, 7), float32], Tensor[(2, 792), float32], Tensor[(104), float64], Tensor[(1584), float32]) */
}

def @func_4859() -> (Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), int8]) {
  %548 = @func_4574() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %549 = @func_4136() /* ty=(Tensor[(6, 16, 11), int8],) */;
  %550 = %548.0;
  %551 = %549.0;
  (%550, %551)
}

def @func_5954(%var_5952: Tensor[(1, 7, 1), float32], %var_5953: Tensor[(1, 2), float64]) -> (Tensor[(1, 7, 1), float32], Tensor[(2, 8, 12), float64], Tensor[(1, 2), float64]) {
  @func_5950(%var_5952, %var_5953) /* ty=(Tensor[(1, 7, 1), float32], Tensor[(2, 8, 12), float64], Tensor[(1, 2), float64]) */
}

def @func_7558() -> (Tensor[(264), bool], Tensor[(6, 16, 11), float64]) {
  @func_7556() /* ty=(Tensor[(264), bool], Tensor[(6, 16, 11), float64]) */
}

def @func_3736(%var_3734: Tensor[(5, 13, 13), float32], %var_3735: Tensor[(5, 13, 13), float32]) -> Tensor[(5, 13, 13), float32] {
  @func_3732(%var_3734, %var_3735) /* ty=Tensor[(5, 13, 13), float32] */
}

def @func_2140() -> Tensor[(6, 16, 11), float64] {
  @func_2138() /* ty=Tensor[(6, 16, 11), float64] */
}

def @func_1018(%var_1015: Tensor[(12, 11, 4), uint64], %var_1016: Tensor[(12, 11, 4), float64], %var_1017: Tensor[(24), uint16]) -> (Tensor[(12, 11, 4), uint64], Tensor[(12, 11, 4), uint32], Tensor[(12, 11, 4), float64], Tensor[(10, 2, 12), uint16], Tensor[(24), uint16], Tensor[(120, 2), uint16], Tensor[(1, 7, 5), float64], Tensor[(35), float64]) {
  %575 = fn (%var_962: Tensor[(12, 11, 4), uint64], %var_974: Tensor[(12, 11, 4), float64], %var_988: Tensor[(24), uint16]) -> (Tensor[(12, 11, 4), uint64], Tensor[(12, 11, 4), uint32], Tensor[(12, 11, 4), float64], Tensor[(10, 2, 12), uint16], Tensor[(24), uint16], Tensor[(120, 2), uint16], Tensor[(1, 7, 5), float64], Tensor[(35), float64]) {
    %552 = cast(%var_962, dtype="uint64") /* ty=Tensor[(12, 11, 4), uint64] */;
    %553 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(12, 11, 4), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %554 = cast(meta[relay.Constant][29] /* ty=Tensor[(12, 11, 4), uint64] */, dtype="uint64") /* ty=Tensor[(12, 11, 4), uint64] */;
    %555 = dyn.reshape(%552, %553, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %556 = cast(%var_962, dtype="float64") /* ty=Tensor[(12, 11, 4), float64] */;
    %557 = rsqrt(%556) /* ty=Tensor[(12, 11, 4), float64] */;
    %558 = cast(%var_974, dtype="uint32") /* ty=Tensor[(12, 11, 4), uint32] */;
    %559 = shape_of(%557, dtype="int32") /* ty=Tensor[(3), int32] */;
    %560 = cast(%557, dtype="uint32") /* ty=Tensor[(12, 11, 4), uint32] */;
    %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %562 = cast(%557, dtype="float64") /* ty=Tensor[(12, 11, 4), float64] */;
    %563 = cast(%var_988, dtype="uint16") /* ty=Tensor[(24), uint16] */;
    %564 = cast(meta[relay.Constant][30] /* ty=Tensor[(120, 2), uint16] */, dtype="uint16") /* ty=Tensor[(120, 2), uint16] */;
    %565 = reshape(%563, newshape=[1, 2, 12]) /* ty=Tensor[(1, 2, 12), uint16] */;
    %566 = reshape(%564, newshape=[10, 2, 12]) /* ty=Tensor[(10, 2, 12), uint16] */;
    %567 = cast(meta[relay.Constant][31] /* ty=Tensor[(35), float64] */, dtype="float64") /* ty=Tensor[(35), float64] */;
    %568 = reshape(%567, newshape=[1, 7, 5]) /* ty=Tensor[(1, 7, 5), float64] */;
    %569 = @func_459(%568) /* ty=(Tensor[(1, 7, 5), float64],) */;
    %570 = bitwise_or(%554, %555) /* ty=Tensor[(12, 11, 4), uint64] */;
    %571 = maximum(%560, %561) /* ty=Tensor[(12, 11, 4), uint32] */;
    %572 = atan(%562) /* ty=Tensor[(12, 11, 4), float64] */;
    %573 = @func_193(%565, %566) /* ty=Tensor[(10, 2, 12), uint16] */;
    %574 = %569.0;
    (%570, %571, %572, %573, %var_988, meta[relay.Constant][30] /* ty=Tensor[(120, 2), uint16] */, %574, meta[relay.Constant][31] /* ty=Tensor[(35), float64] */)
  };
  %575(%var_1015, %var_1016, %var_1017) /* ty=(Tensor[(12, 11, 4), uint64], Tensor[(12, 11, 4), uint32], Tensor[(12, 11, 4), float64], Tensor[(10, 2, 12), uint16], Tensor[(24), uint16], Tensor[(120, 2), uint16], Tensor[(1, 7, 5), float64], Tensor[(35), float64]) */
}

def @func_2771(%var_2766: bool, %var_2767: Tensor[(2, 11, 12), bool]) -> (Tensor[(2, 11, 12), bool],) {
  %576 = cast(%var_2766, dtype="bool") /* ty=bool */;
  %577 = cast(%var_2767, dtype="bool") /* ty=Tensor[(2, 11, 12), bool] */;
  %578 = logical_or(%576, %577) /* ty=Tensor[(2, 11, 12), bool] */;
  (%578,)
}

def @func_5324(%var_5321: Tensor[(135), float32], %var_5322: Tensor[(896), float32], %var_5323: Tensor[(132, 12), float32]) -> (Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float64], Tensor[(5, 3, 9), float32], Tensor[(135), float32], Tensor[(121, 9), float32], Tensor[(16, 8, 7), float32], Tensor[(896), float32], Tensor[(52, 2), float64], Tensor[(132, 12), float32]) {
  @func_5319(%var_5321, %var_5322, %var_5323) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float64], Tensor[(5, 3, 9), float32], Tensor[(135), float32], Tensor[(121, 9), float32], Tensor[(16, 8, 7), float32], Tensor[(896), float32], Tensor[(52, 2), float64], Tensor[(132, 12), float32]) */
}

def @func_5133() -> Tensor[(264), bool] {
  %579 = @func_5010() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float64], Tensor[(264), bool]) */;
  %579.2
}

def @func_7732(%var_7730: Tensor[(2, 11, 12), float64]) -> (Tensor[(6, 16, 11), float32], Tensor[(35), float64], Tensor[(6, 16, 11), float32], Tensor[(2, 11, 12), bool]) {
  @func_7729(%var_7730) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(35), float64], Tensor[(6, 16, 11), float32], Tensor[(2, 11, 12), bool]) */
}

def @func_3035(%var_3021: Tensor[(24, 10), float32]) -> (Tensor[(6, 16, 11), float32], Tensor[(5, 3, 9), float32], Tensor[(135), float32], Tensor[(16, 11, 9), bool], Tensor[(24, 10), float32], Tensor[(1584), float32]) {
  %580 = @func_2686() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %581 = cast(meta[relay.Constant][32] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %582 = cast(meta[relay.Constant][32] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %583 = reshape(%581, newshape=[5, 3, 9]) /* ty=Tensor[(5, 3, 9), float32] */;
  %584 = reshape(%582, newshape=[5, 3, 9]) /* ty=Tensor[(5, 3, 9), float32] */;
  %585 = cast(%var_3021, dtype="float32") /* ty=Tensor[(24, 10), float32] */;
  %586 = cast(meta[relay.Constant][33] /* ty=Tensor[(1584), float32] */, dtype="float32") /* ty=Tensor[(1584), float32] */;
  %587 = reshape(%585, newshape=[10, 8, 3]) /* ty=Tensor[(10, 8, 3), float32] */;
  %588 = reshape(%586, newshape=[1584]) /* ty=Tensor[(1584), float32] */;
  %589 = @func_1233(%587, %588) /* ty=(Tensor[(10, 8, 3), float32], Tensor[(16, 11, 9), bool], Tensor[(1584), float32]) */;
  %590 = %580.0;
  %591 = @func_2330(%583, %584) /* ty=Tensor[(5, 3, 9), float32] */;
  %592 = %589.1;
  (%590, %591, meta[relay.Constant][32] /* ty=Tensor[(135), float32] */, %592, %var_3021, meta[relay.Constant][33] /* ty=Tensor[(1584), float32] */)
}

def @func_4907(%var_4903: Tensor[(264), bool], %var_4904: float32, %var_4905: Tensor[(11, 99), float32], %var_4906: Tensor[(35), float64]) -> (Tensor[(264), bool], float32, float32, Tensor[(11, 99), float32], Tensor[(7, 5), float64], Tensor[(35), float64]) {
  @func_4901(%var_4903, %var_4904, %var_4905, %var_4906) /* ty=(Tensor[(264), bool], float32, float32, Tensor[(11, 99), float32], Tensor[(7, 5), float64], Tensor[(35), float64]) */
}

def @func_351(%var_331: float32, %var_332: Tensor[(11, 9, 11), float32], %var_347: Tensor[(1056), float64]) -> (Tensor[(11, 9, 11), bool], Tensor[(11, 9, 11), bool], Tensor[(8, 12, 11), float64], Tensor[(1056), float64]) {
  %593 = cast(%var_331, dtype="bool") /* ty=bool */;
  %594 = cast(%var_332, dtype="bool") /* ty=Tensor[(11, 9, 11), bool] */;
  %595 = cast(%var_331, dtype="bool") /* ty=bool */;
  %596 = cast(%var_332, dtype="bool") /* ty=Tensor[(11, 9, 11), bool] */;
  %597 = cast(%var_347, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %598 = reshape(%597, newshape=[8, 12, 11]) /* ty=Tensor[(8, 12, 11), float64] */;
  %599 = @func_276(%598) /* ty=(Tensor[(8, 12, 11), float64],) */;
  %600 = less_equal(%593, %594) /* ty=Tensor[(11, 9, 11), bool] */;
  %601 = equal(%595, %596) /* ty=Tensor[(11, 9, 11), bool] */;
  %602 = %599.0;
  (%600, %601, %602, %var_347)
}

def @func_6674() -> (Tensor[(6, 16, 11), float32],) {
  %605 = fn () -> (Tensor[(6, 16, 11), float32],) {
    %603 = @func_4320() /* ty=(Tensor[(6, 16, 11), float32],) */;
    %604 = %603.0;
    (%604,)
  };
  %605() /* ty=(Tensor[(6, 16, 11), float32],) */
}

def @func_7609() -> Tensor[(135), float64] {
  %606 = @func_7474() /* ty=Tensor[(135), float32] */;
  %607 = cast(%606, dtype="float64") /* ty=Tensor[(135), float64] */;
  log2(%607) /* ty=Tensor[(135), float64] */
}

def @func_8506() -> (Tensor[(6, 16, 11), int8],) {
  %609 = fn () -> (Tensor[(6, 16, 11), int8],) {
    %608 = @func_3191() /* ty=Tensor[(6, 16, 11), int8] */;
    (%608,)
  };
  %609() /* ty=(Tensor[(6, 16, 11), int8],) */
}

def @func_2627(%var_2600: Tensor[(52, 2), float64]) -> (Tensor[(6, 16, 11), float32], Tensor[(52, 2), bool]) {
  %610 = @func_2562() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %611 = cast(%var_2600, dtype="float64") /* ty=Tensor[(52, 2), float64] */;
  %612 = reshape(%611, newshape=[1, 8, 13]) /* ty=Tensor[(1, 8, 13), float64] */;
  %613 = @func_1302(%612) /* ty=Tensor[(1, 8, 13), float64] */;
  %614 = cast(%613, dtype="bool") /* ty=Tensor[(1, 8, 13), bool] */;
  %615 = shape_of(%var_2600, dtype="int32") /* ty=Tensor[(2), int32] */;
  %616 = cast(%var_2600, dtype="bool") /* ty=Tensor[(52, 2), bool] */;
  %617 = dyn.reshape(%614, %615, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %618 = %610.0;
  %619 = greater_equal(%616, %617) /* ty=Tensor[(52, 2), bool] */;
  (%618, %619)
}

def @func_4300() -> (Tensor[(6, 16, 11), float64], bool, Tensor[(264), bool], Tensor[(2, 11, 12), float64]) {
  %629 = fn () -> (Tensor[(6, 16, 11), float64], bool, Tensor[(264), bool], Tensor[(2, 11, 12), float64]) {
    %620 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
    %621 = cast(meta[relay.Constant][34] /* ty=Tensor[(264), bool] */, dtype="bool") /* ty=Tensor[(264), bool] */;
    %622 = reshape(%620, newshape=[]) /* ty=bool */;
    %623 = reshape(%621, newshape=[2, 11, 12]) /* ty=Tensor[(2, 11, 12), bool] */;
    %624 = @func_2771(%622, %623) /* ty=(Tensor[(2, 11, 12), bool],) */;
    %625 = %624.0;
    %626 = cast(%625, dtype="float64") /* ty=Tensor[(2, 11, 12), float64] */;
    %627 = @func_2138() /* ty=Tensor[(6, 16, 11), float64] */;
    %628 = atan(%626) /* ty=Tensor[(2, 11, 12), float64] */;
    (%627, False /* ty=bool */, meta[relay.Constant][34] /* ty=Tensor[(264), bool] */, %628)
  };
  %629() /* ty=(Tensor[(6, 16, 11), float64], bool, Tensor[(264), bool], Tensor[(2, 11, 12), float64]) */
}

def @func_4834() -> (Tensor[(6, 16, 11), float64], Tensor[(1, 104), float64], Tensor[(135), float32], Tensor[(1089), float32], Tensor[(420), uint32]) {
  %641 = fn () -> (Tensor[(6, 16, 11), float64], Tensor[(1, 104), float64], Tensor[(135), float32], Tensor[(1089), float32], Tensor[(420), uint32]) {
    %630 = @func_2138() /* ty=Tensor[(6, 16, 11), float64] */;
    %631 = cast(%630, dtype="float32") /* ty=Tensor[(6, 16, 11), float32] */;
    %632 = cast(meta[relay.Constant][35] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
    %633 = cast(meta[relay.Constant][36] /* ty=Tensor[(1089), float32] */, dtype="float32") /* ty=Tensor[(1089), float32] */;
    %634 = reshape(%631, newshape=[6, 16, 11]) /* ty=Tensor[(6, 16, 11), float32] */;
    %635 = reshape(%632, newshape=[135]) /* ty=Tensor[(135), float32] */;
    %636 = reshape(%633, newshape=[1089]) /* ty=Tensor[(1089), float32] */;
    %637 = @func_2458(%634, %635, %636) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(1, 104), float64], Tensor[(135), float32], Tensor[(1089), float32]) */;
    %638 = @func_1678() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool], Tensor[(420), uint32]) */;
    %639 = %637.1;
    %640 = %638.2;
    (%630, %639, meta[relay.Constant][35] /* ty=Tensor[(135), float32] */, meta[relay.Constant][36] /* ty=Tensor[(1089), float32] */, %640)
  };
  %641() /* ty=(Tensor[(6, 16, 11), float64], Tensor[(1, 104), float64], Tensor[(135), float32], Tensor[(1089), float32], Tensor[(420), uint32]) */
}

def @func_2687() -> (Tensor[(6, 16, 11), float32],) {
  %646 = fn () -> (Tensor[(6, 16, 11), float32],) {
    %642 = @func_1705() /* ty=(Tensor[(6, 16, 11), float32],) */;
    %643 = %642.0;
    %644 = cast(%643, dtype="float32") /* ty=Tensor[(6, 16, 11), float32] */;
    %645 = sqrt(%644) /* ty=Tensor[(6, 16, 11), float32] */;
    (%645,)
  };
  %646() /* ty=(Tensor[(6, 16, 11), float32],) */
}

def @func_1302(%var_1283: Tensor[(1, 8, 13), float64]) -> Tensor[(1, 8, 13), float64] {
  %647 = cast(%var_1283, dtype="float64") /* ty=Tensor[(1, 8, 13), float64] */;
  atanh(%647) /* ty=Tensor[(1, 8, 13), float64] */
}

def @func_4228() -> Tensor[(15, 11, 14), float64] {
  %649 = fn () -> Tensor[(15, 11, 14), float64] {
    %648 = cast(meta[relay.Constant][37] /* ty=Tensor[(15, 11, 14), float64] */, dtype="float64") /* ty=Tensor[(15, 11, 14), float64] */;
    acosh(%648) /* ty=Tensor[(15, 11, 14), float64] */
  };
  %649() /* ty=Tensor[(15, 11, 14), float64] */
}

def @func_6528(%var_6510: Tensor[(135), float32]) -> (Tensor[(1, 8, 13), float64], Tensor[(5, 3, 9), float32], Tensor[(135), float32]) {
  %650 = @func_3567() /* ty=(Tensor[(14, 5, 6), bool], Tensor[(1089), float32], Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), int8], Tensor[(1, 8, 13), float64], Tensor[(104), float64]) */;
  %651 = cast(%var_6510, dtype="float32") /* ty=Tensor[(135), float32] */;
  %652 = cast(%var_6510, dtype="float32") /* ty=Tensor[(135), float32] */;
  %653 = reshape(%651, newshape=[5, 3, 9]) /* ty=Tensor[(5, 3, 9), float32] */;
  %654 = reshape(%652, newshape=[5, 3, 9]) /* ty=Tensor[(5, 3, 9), float32] */;
  %655 = %650.4;
  %656 = @func_2330(%653, %654) /* ty=Tensor[(5, 3, 9), float32] */;
  (%655, %656, %var_6510)
}

def @func_7476() -> Tensor[(135), float32] {
  @func_7474() /* ty=Tensor[(135), float32] */
}

def @func_2873() -> Tensor[(6, 16, 11), float32] {
  @func_2871() /* ty=Tensor[(6, 16, 11), float32] */
}

def @func_6099(%var_6087: Tensor[(132, 12), float32]) -> (Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool], float32, Tensor[(1089), float32], Tensor[(132, 12), float32], Tensor[(2, 11, 12), float64]) {
  %657 = @func_3118() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %658 = %657.0;
  %659 = cast(%658, dtype="float32") /* ty=Tensor[(6, 16, 11), float32] */;
  %660 = cast(-5.95945f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %661 = cast(meta[relay.Constant][38] /* ty=Tensor[(1089), float32] */, dtype="float32") /* ty=Tensor[(1089), float32] */;
  %662 = cast(%var_6087, dtype="float32") /* ty=Tensor[(132, 12), float32] */;
  %663 = reshape(%659, newshape=[6, 16, 11]) /* ty=Tensor[(6, 16, 11), float32] */;
  %664 = reshape(%660, newshape=[]) /* ty=float32 */;
  %665 = reshape(%661, newshape=[1089]) /* ty=Tensor[(1089), float32] */;
  %666 = reshape(%662, newshape=[132, 12]) /* ty=Tensor[(132, 12), float32] */;
  %667 = @func_2225(%663, %664, %665, %666) /* ty=(Tensor[(14, 5, 6), bool], float32, Tensor[(1089), float32], Tensor[(16, 11, 9), bool], Tensor[(24, 10), float32], Tensor[(132, 12), float32], Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool]) */;
  %668 = @func_5536() /* ty=(Tensor[(2, 11, 12), float64],) */;
  %669 = %667.7;
  %670 = %668.0;
  (%658, %669, -5.95945f /* ty=float32 */, meta[relay.Constant][38] /* ty=Tensor[(1089), float32] */, %var_6087, %670)
}

def @func_4074(%var_4071: Tensor[(8, 1, 8), float32], %var_4072: Tensor[(35), float64], %var_4073: Tensor[(135), float32]) -> (Tensor[(8, 1, 8), float32], Tensor[(6, 16, 11), float64], Tensor[(6, 16, 11), float32], Tensor[(7, 5), float64], Tensor[(35), float64], Tensor[(5, 3, 9), float32], Tensor[(135), float32], Tensor[(8, 1, 8), float64]) {
  %689 = fn (%var_4024: Tensor[(8, 1, 8), float32], %var_4051: Tensor[(35), float64], %var_4062: Tensor[(135), float32]) -> (Tensor[(8, 1, 8), float32], Tensor[(6, 16, 11), float64], Tensor[(6, 16, 11), float32], Tensor[(7, 5), float64], Tensor[(35), float64], Tensor[(5, 3, 9), float32], Tensor[(135), float32], Tensor[(8, 1, 8), float64]) {
    %671 = cast(%var_4024, dtype="float32") /* ty=Tensor[(8, 1, 8), float32] */;
    %672 = @func_4013() /* ty=(Tensor[(6, 16, 11), float64],) */;
    %673 = %672.0;
    %674 = cast(%673, dtype="float32") /* ty=Tensor[(6, 16, 11), float32] */;
    %675 = reshape(%674, newshape=[6, 16, 11]) /* ty=Tensor[(6, 16, 11), float32] */;
    %676 = cast(%var_4051, dtype="float64") /* ty=Tensor[(35), float64] */;
    %677 = reshape(%676, newshape=[7, 5]) /* ty=Tensor[(7, 5), float64] */;
    %678 = @func_1813(%677) /* ty=(Tensor[(420), uint32], Tensor[(1, 7, 5), float64], Tensor[(7, 5), float64]) */;
    %679 = cast(%var_4062, dtype="float32") /* ty=Tensor[(135), float32] */;
    %680 = cast(%var_4062, dtype="float32") /* ty=Tensor[(135), float32] */;
    %681 = reshape(%679, newshape=[5, 3, 9]) /* ty=Tensor[(5, 3, 9), float32] */;
    %682 = reshape(%680, newshape=[5, 3, 9]) /* ty=Tensor[(5, 3, 9), float32] */;
    %683 = cast(%var_4024, dtype="float64") /* ty=Tensor[(8, 1, 8), float64] */;
    %684 = exp(%671) /* ty=Tensor[(8, 1, 8), float32] */;
    %685 = @func_2481(%675) /* ty=Tensor[(6, 16, 11), float32] */;
    %686 = %678.2;
    %687 = @func_2330(%681, %682) /* ty=Tensor[(5, 3, 9), float32] */;
    %688 = sinh(%683) /* ty=Tensor[(8, 1, 8), float64] */;
    (%684, %673, %685, %686, %var_4051, %687, %var_4062, %688)
  };
  %689(%var_4071, %var_4072, %var_4073) /* ty=(Tensor[(8, 1, 8), float32], Tensor[(6, 16, 11), float64], Tensor[(6, 16, 11), float32], Tensor[(7, 5), float64], Tensor[(35), float64], Tensor[(5, 3, 9), float32], Tensor[(135), float32], Tensor[(8, 1, 8), float64]) */
}

def @func_5990() -> (Tensor[(6, 16, 11), float32],) {
  %690 = @func_2978() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float32]) */;
  %691 = %690.0;
  (%691,)
}

def @func_7878() -> (Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool], Tensor[(420), uint32], Tensor[(2, 11, 12), float32], Tensor[(6, 16, 11), float32], Tensor[(104), float64], Tensor[(6, 16, 11), float32]) {
  %705 = fn () -> (Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool], Tensor[(420), uint32], Tensor[(2, 11, 12), float32], Tensor[(6, 16, 11), float32], Tensor[(104), float64], Tensor[(6, 16, 11), float32]) {
    %692 = cast(meta[relay.Constant][39] /* ty=Tensor[(420), uint32] */, dtype="uint32") /* ty=Tensor[(420), uint32] */;
    %693 = reshape(%692, newshape=[14, 5, 6]) /* ty=Tensor[(14, 5, 6), uint32] */;
    %694 = @func_904(%693) /* ty=(Tensor[(14, 5, 6), bool],) */;
    %695 = @func_6949() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(2, 11, 12), float32], float32) */;
    %696 = cast(meta[relay.Constant][40] /* ty=Tensor[(104), float64] */, dtype="float64") /* ty=Tensor[(104), float64] */;
    %697 = reshape(%696, newshape=[52, 2]) /* ty=Tensor[(52, 2), float64] */;
    %698 = @func_2627(%697) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(52, 2), bool]) */;
    %699 = @func_4574() /* ty=(Tensor[(6, 16, 11), float32],) */;
    %700 = @func_2871() /* ty=Tensor[(6, 16, 11), float32] */;
    %701 = %694.0;
    %702 = %695.1;
    %703 = %698.0;
    %704 = %699.0;
    (%700, %701, meta[relay.Constant][39] /* ty=Tensor[(420), uint32] */, %702, %703, meta[relay.Constant][40] /* ty=Tensor[(104), float64] */, %704)
  };
  %705() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool], Tensor[(420), uint32], Tensor[(2, 11, 12), float32], Tensor[(6, 16, 11), float32], Tensor[(104), float64], Tensor[(6, 16, 11), float32]) */
}

def @func_3193() -> Tensor[(6, 16, 11), int8] {
  @func_3191() /* ty=Tensor[(6, 16, 11), int8] */
}

def @func_4861() -> (Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), int8]) {
  @func_4859() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), int8]) */
}

def @func_4320() -> (Tensor[(6, 16, 11), float32],) {
  %706 = @func_3118() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %707 = %706.0;
  (%707,)
}

def @func_5536() -> (Tensor[(2, 11, 12), float64],) {
  %708 = @func_4299() /* ty=(Tensor[(6, 16, 11), float64], bool, Tensor[(264), bool], Tensor[(2, 11, 12), float64]) */;
  %709 = %708.3;
  (%709,)
}

def @func_2008(%var_2006: Tensor[(104), float64], %var_2007: Tensor[(2, 792), float32]) -> (Tensor[(6, 16, 11), float32], Tensor[(1, 8, 13), float64], Tensor[(104), float64], Tensor[(16, 11, 9), bool], Tensor[(2, 792), float32]) {
  @func_2004(%var_2006, %var_2007) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(1, 8, 13), float64], Tensor[(104), float64], Tensor[(16, 11, 9), bool], Tensor[(2, 792), float32]) */
}

def @func_2509() -> (Tensor[(6, 16, 11), float64],) {
  @func_2507() /* ty=(Tensor[(6, 16, 11), float64],) */
}

def @func_5992() -> (Tensor[(6, 16, 11), float32],) {
  @func_5990() /* ty=(Tensor[(6, 16, 11), float32],) */
}

def @func_7032() -> (Tensor[(135), float32], Tensor[(35), float64]) {
  @func_7030() /* ty=(Tensor[(135), float32], Tensor[(35), float64]) */
}

def @func_3567() -> (Tensor[(14, 5, 6), bool], Tensor[(1089), float32], Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), int8], Tensor[(1, 8, 13), float64], Tensor[(104), float64]) {
  %710 = cast(-5.98704f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %711 = cast(meta[relay.Constant][41] /* ty=Tensor[(1089), float32] */, dtype="float32") /* ty=Tensor[(1089), float32] */;
  %712 = reshape(%710, newshape=[]) /* ty=float32 */;
  %713 = reshape(%711, newshape=[1089]) /* ty=Tensor[(1089), float32] */;
  %714 = @func_1933(%712, %713) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool], Tensor[(1056), float64], float32, Tensor[(1089), float32], Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool]) */;
  %715 = @func_3191() /* ty=Tensor[(6, 16, 11), int8] */;
  %716 = cast(-5.98704f /* ty=float32 */, dtype="int8") /* ty=int8 */;
  %717 = cast(%715, dtype="int8") /* ty=Tensor[(6, 16, 11), int8] */;
  %718 = cast(meta[relay.Constant][42] /* ty=Tensor[(104), float64] */, dtype="float64") /* ty=Tensor[(104), float64] */;
  %719 = reshape(%718, newshape=[1, 8, 13]) /* ty=Tensor[(1, 8, 13), float64] */;
  %720 = %714.6;
  %721 = @func_2871() /* ty=Tensor[(6, 16, 11), float32] */;
  %722 = right_shift(%716, %717) /* ty=Tensor[(6, 16, 11), int8] */;
  %723 = @func_1302(%719) /* ty=Tensor[(1, 8, 13), float64] */;
  (%720, meta[relay.Constant][41] /* ty=Tensor[(1089), float32] */, %721, %722, %723, meta[relay.Constant][42] /* ty=Tensor[(104), float64] */)
}

def @func_459(%var_444: Tensor[(1, 7, 5), float64]) -> (Tensor[(1, 7, 5), float64],) {
  %724 = cast(%var_444, dtype="float64") /* ty=Tensor[(1, 7, 5), float64] */;
  %725 = asinh(%724) /* ty=Tensor[(1, 7, 5), float64] */;
  (%725,)
}

def @func_5376() -> (Tensor[(6, 16, 11), float32], Tensor[(7, 5), float64], Tensor[(35), float64]) {
  %726 = @func_2978() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float32]) */;
  %727 = cast(meta[relay.Constant][43] /* ty=Tensor[(35), float64] */, dtype="float64") /* ty=Tensor[(35), float64] */;
  %728 = reshape(%727, newshape=[7, 5]) /* ty=Tensor[(7, 5), float64] */;
  %729 = @func_1813(%728) /* ty=(Tensor[(420), uint32], Tensor[(1, 7, 5), float64], Tensor[(7, 5), float64]) */;
  %730 = %726.1;
  %731 = %729.2;
  (%730, %731, meta[relay.Constant][43] /* ty=Tensor[(35), float64] */)
}

def @func_5378() -> (Tensor[(6, 16, 11), float32], Tensor[(7, 5), float64], Tensor[(35), float64]) {
  @func_5376() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(7, 5), float64], Tensor[(35), float64]) */
}

def @func_8669() -> (Tensor[(6, 16, 11), float32], Tensor[(1, 8, 13), float64], Tensor[(24), uint16], Tensor[(240), uint16], Tensor[(1089), float32]) {
  @func_8667() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(1, 8, 13), float64], Tensor[(24), uint16], Tensor[(240), uint16], Tensor[(1089), float32]) */
}

def @func_2871() -> Tensor[(6, 16, 11), float32] {
  %732 = @func_1705() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %732.0
}

def @func_356(%var_353: float32, %var_354: Tensor[(11, 9, 11), float32], %var_355: Tensor[(1056), float64]) -> (Tensor[(11, 9, 11), bool], Tensor[(11, 9, 11), bool], Tensor[(8, 12, 11), float64], Tensor[(1056), float64]) {
  @func_351(%var_353, %var_354, %var_355) /* ty=(Tensor[(11, 9, 11), bool], Tensor[(11, 9, 11), bool], Tensor[(8, 12, 11), float64], Tensor[(1056), float64]) */
}

def @func_6219(%var_6217: Tensor[(6, 16, 11), float32]) -> (Tensor[(?, 104), uint32], Tensor[(6, 16, 11), int64], Tensor[(6, 16, 11), float32], Tensor[(35), float64]) {
  @func_6216(%var_6217) /* ty=(Tensor[(?, 104), uint32], Tensor[(6, 16, 11), int64], Tensor[(6, 16, 11), float32], Tensor[(35), float64]) */
}

def @func_6302() -> (Tensor[(6, 16, 11), float32],) {
  %733 = @func_1678() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool], Tensor[(420), uint32]) */;
  %734 = %733.0;
  (%734,)
}

def @func_7556() -> (Tensor[(264), bool], Tensor[(6, 16, 11), float64]) {
  %735 = @func_4013() /* ty=(Tensor[(6, 16, 11), float64],) */;
  %736 = @func_5133() /* ty=Tensor[(264), bool] */;
  %737 = %735.0;
  (%736, %737)
}

def @func_2775(%var_2773: bool, %var_2774: Tensor[(2, 11, 12), bool]) -> (Tensor[(2, 11, 12), bool],) {
  @func_2771(%var_2773, %var_2774) /* ty=(Tensor[(2, 11, 12), bool],) */
}

def @func_7601(%var_7599: Tensor[(24, 10), float32]) -> (Tensor[(6, 16, 11), float32], Tensor[(2, 11, 12), float64], Tensor[(16, 11, 9), bool], Tensor[(24, 10), float32]) {
  @func_7598(%var_7599) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(2, 11, 12), float64], Tensor[(16, 11, 9), bool], Tensor[(24, 10), float32]) */
}

def @main() -> (Tensor[(104), float32],) {
  %738 = @func_7878() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool], Tensor[(420), uint32], Tensor[(2, 11, 12), float32], Tensor[(6, 16, 11), float32], Tensor[(104), float64], Tensor[(6, 16, 11), float32]) */;
  %739 = %738.5;
  %740 = cast(%739, dtype="float32") /* ty=Tensor[(104), float32] */;
  %741 = sigmoid(%740) /* ty=Tensor[(104), float32] */;
  (%741,)
}

def @func_2231(%var_2227: Tensor[(6, 16, 11), float32], %var_2228: float32, %var_2229: Tensor[(1089), float32], %var_2230: Tensor[(132, 12), float32]) -> (Tensor[(14, 5, 6), bool], float32, Tensor[(1089), float32], Tensor[(16, 11, 9), bool], Tensor[(24, 10), float32], Tensor[(132, 12), float32], Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool]) {
  @func_2225(%var_2227, %var_2228, %var_2229, %var_2230) /* ty=(Tensor[(14, 5, 6), bool], float32, Tensor[(1089), float32], Tensor[(16, 11, 9), bool], Tensor[(24, 10), float32], Tensor[(132, 12), float32], Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool]) */
}

def @func_2483(%var_2482: Tensor[(6, 16, 11), float32]) -> Tensor[(6, 16, 11), float32] {
  %748 = fn (%var_2471: Tensor[(6, 16, 11), float32]) -> Tensor[(6, 16, 11), float32] {
    %742 = @func_1643() /* ty=(Tensor[(6, 16, 11), float32],) */;
    %743 = %742.0;
    %744 = cast(%var_2471, dtype="float32") /* ty=Tensor[(6, 16, 11), float32] */;
    %745 = shape_of(%743, dtype="int32") /* ty=Tensor[(3), int32] */;
    %746 = cast(%743, dtype="float32") /* ty=Tensor[(6, 16, 11), float32] */;
    %747 = dyn.reshape(%744, %745, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    mod(%746, %747) /* ty=Tensor[(6, 16, 11), float32] */
  };
  %748(%var_2482) /* ty=Tensor[(6, 16, 11), float32] */
}

def @func_7030() -> (Tensor[(135), float32], Tensor[(35), float64]) {
  %749 = @func_4833() /* ty=(Tensor[(6, 16, 11), float64], Tensor[(1, 104), float64], Tensor[(135), float32], Tensor[(1089), float32], Tensor[(420), uint32]) */;
  %750 = @func_5376() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(7, 5), float64], Tensor[(35), float64]) */;
  %751 = %749.2;
  %752 = %750.2;
  (%751, %752)
}

def @func_8069() -> Tensor[(6, 16, 11), float64] {
  %753 = fn () -> Tensor[(6, 16, 11), float64] {
    @func_5412() /* ty=Tensor[(6, 16, 11), float64] */
  };
  %753() /* ty=Tensor[(6, 16, 11), float64] */
}

def @func_1859(%var_1858: Tensor[(420), uint32]) -> (Tensor[(6, 16, 11), float64], Tensor[(14, 5, 6), bool], Tensor[(420), uint32]) {
  %762 = fn (%var_1847: Tensor[(420), uint32]) -> (Tensor[(6, 16, 11), float64], Tensor[(14, 5, 6), bool], Tensor[(420), uint32]) {
    %754 = @func_1643() /* ty=(Tensor[(6, 16, 11), float32],) */;
    %755 = %754.0;
    %756 = cast(%755, dtype="float64") /* ty=Tensor[(6, 16, 11), float64] */;
    %757 = cast(%var_1847, dtype="uint32") /* ty=Tensor[(420), uint32] */;
    %758 = reshape(%757, newshape=[14, 5, 6]) /* ty=Tensor[(14, 5, 6), uint32] */;
    %759 = @func_904(%758) /* ty=(Tensor[(14, 5, 6), bool],) */;
    %760 = tan(%756) /* ty=Tensor[(6, 16, 11), float64] */;
    %761 = %759.0;
    (%760, %761, %var_1847)
  };
  %762(%var_1858) /* ty=(Tensor[(6, 16, 11), float64], Tensor[(14, 5, 6), bool], Tensor[(420), uint32]) */
}

def @func_7467() -> (Tensor[(6, 16, 11), float32],) {
  %763 = @func_6302() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %764 = %763.0;
  (%764,)
}

def @func_279(%var_277: Tensor[(8, 12, 11), float64]) -> (Tensor[(8, 12, 11), float64],) {
  @func_276(%var_277) /* ty=(Tensor[(8, 12, 11), float64],) */
}

def @func_8467() -> (Tensor[(6, 16, 11), float64], Tensor[(6, 16, 11), int8]) {
  @func_8465() /* ty=(Tensor[(6, 16, 11), float64], Tensor[(6, 16, 11), int8]) */
}

def @func_8921() -> (Tensor[(420), uint32],) {
  %765 = @func_6754() /* ty=(Tensor[(420), uint32],) */;
  %766 = %765.0;
  (%766,)
}

def @func_5225(%var_5223: Tensor[(35), float64]) -> (Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float32], Tensor[(16, 11, 9), int16], Tensor[(1584), float32], Tensor[(6, 16, 11), float32], Tensor[(1584), float32], Tensor[(35), float64]) {
  @func_5222(%var_5223) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float32], Tensor[(16, 11, 9), int16], Tensor[(1584), float32], Tensor[(6, 16, 11), float32], Tensor[(1584), float32], Tensor[(35), float64]) */
}

def @func_5662() -> (Tensor[(6, 16, 11), float32],) {
  @func_5660() /* ty=(Tensor[(6, 16, 11), float32],) */
}

def @func_8249() -> (Tensor[(6, 16, 11), float64], Tensor[(35), float64]) {
  %767 = @func_2507() /* ty=(Tensor[(6, 16, 11), float64],) */;
  %768 = %767.0;
  %769 = cast(%768, dtype="float32") /* ty=Tensor[(6, 16, 11), float32] */;
  %770 = reshape(%769, newshape=[6, 16, 11]) /* ty=Tensor[(6, 16, 11), float32] */;
  %771 = @func_6216(%770) /* ty=(Tensor[(?, 104), uint32], Tensor[(6, 16, 11), int64], Tensor[(6, 16, 11), float32], Tensor[(35), float64]) */;
  %772 = %771.3;
  (%768, %772)
}

def @func_2295(%var_2293: Tensor[(6, 16, 11), float32]) -> (Tensor[(6, 16, 11), int32],) {
  @func_2292(%var_2293) /* ty=(Tensor[(6, 16, 11), int32],) */
}

def @func_5135() -> Tensor[(264), bool] {
  @func_5133() /* ty=Tensor[(264), bool] */
}

def @func_3038(%var_3036: Tensor[(24, 10), float32]) -> (Tensor[(6, 16, 11), float32], Tensor[(5, 3, 9), float32], Tensor[(135), float32], Tensor[(16, 11, 9), bool], Tensor[(24, 10), float32], Tensor[(1584), float32]) {
  @func_3035(%var_3036) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(5, 3, 9), float32], Tensor[(135), float32], Tensor[(16, 11, 9), bool], Tensor[(24, 10), float32], Tensor[(1584), float32]) */
}

def @func_2458(%var_2449: Tensor[(6, 16, 11), float32], %var_2455: Tensor[(135), float32], %var_2456: Tensor[(1089), float32]) -> (Tensor[(6, 16, 11), float32], Tensor[(1, 104), float64], Tensor[(135), float32], Tensor[(1089), float32]) {
  %773 = @func_1705() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %774 = %773.0;
  %775 = cast(%var_2449, dtype="float32") /* ty=Tensor[(6, 16, 11), float32] */;
  %776 = shape_of(%774, dtype="int32") /* ty=Tensor[(3), int32] */;
  %777 = cast(%774, dtype="float32") /* ty=Tensor[(6, 16, 11), float32] */;
  %778 = dyn.reshape(%775, %776, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %779 = cast(%var_2455, dtype="float32") /* ty=Tensor[(135), float32] */;
  %780 = cast(%var_2456, dtype="float32") /* ty=Tensor[(1089), float32] */;
  %781 = reshape(%779, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %782 = reshape(%780, newshape=[1089]) /* ty=Tensor[(1089), float32] */;
  %783 = @func_2390(%781, %782) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(5, 3, 9), float32], Tensor[(135), float32], Tensor[(1, 8, 13), float64], Tensor[(1, 104), float64], Tensor[(1056), float64], Tensor[(1089), uint32], Tensor[(5, 3, 9), float32]) */;
  %784 = power(%777, %778) /* ty=Tensor[(6, 16, 11), float32] */;
  %785 = %783.4;
  (%784, %785, %var_2455, %var_2456)
}

def @func_5483(%var_5480: Tensor[(3, 45), float32], %var_5481: Tensor[(1089), float32], %var_5482: Tensor[(7, 5), float64]) -> (Tensor[(6, 16, 11), float64], Tensor[(6, 16, 11), float32], Tensor[(3, 45), float32], Tensor[(1089), float32], Tensor[(14, 5, 6), bool], Tensor[(10, 42), uint32], Tensor[(420), uint32], Tensor[(7, 5), float64]) {
  %802 = fn (%var_5445: Tensor[(3, 45), float32], %var_5446: Tensor[(1089), float32], %var_5468: Tensor[(7, 5), float64]) -> (Tensor[(6, 16, 11), float64], Tensor[(6, 16, 11), float32], Tensor[(3, 45), float32], Tensor[(1089), float32], Tensor[(14, 5, 6), bool], Tensor[(10, 42), uint32], Tensor[(420), uint32], Tensor[(7, 5), float64]) {
    %786 = @func_4013() /* ty=(Tensor[(6, 16, 11), float64],) */;
    %787 = cast(%var_5445, dtype="float32") /* ty=Tensor[(3, 45), float32] */;
    %788 = cast(%var_5446, dtype="float32") /* ty=Tensor[(1089), float32] */;
    %789 = reshape(%787, newshape=[135]) /* ty=Tensor[(135), float32] */;
    %790 = reshape(%788, newshape=[1089]) /* ty=Tensor[(1089), float32] */;
    %791 = @func_3106(%789, %790) /* ty=(Tensor[(6, 16, 11), float64], Tensor[(6, 16, 11), float32], Tensor[(135), float32], Tensor[(1089), float32], Tensor[(1, 7, 5), float64], Tensor[(35), float64]) */;
    %792 = cast(meta[relay.Constant][44] /* ty=Tensor[(10, 42), uint32] */, dtype="uint32") /* ty=Tensor[(10, 42), uint32] */;
    %793 = reshape(%792, newshape=[14, 5, 6]) /* ty=Tensor[(14, 5, 6), uint32] */;
    %794 = @func_904(%793) /* ty=(Tensor[(14, 5, 6), bool],) */;
    %795 = cast(%var_5468, dtype="float64") /* ty=Tensor[(7, 5), float64] */;
    %796 = reshape(%795, newshape=[7, 5]) /* ty=Tensor[(7, 5), float64] */;
    %797 = @func_1813(%796) /* ty=(Tensor[(420), uint32], Tensor[(1, 7, 5), float64], Tensor[(7, 5), float64]) */;
    %798 = %786.0;
    %799 = %791.1;
    %800 = %794.0;
    %801 = %797.0;
    (%798, %799, %var_5445, %var_5446, %800, meta[relay.Constant][44] /* ty=Tensor[(10, 42), uint32] */, %801, %var_5468)
  };
  %802(%var_5480, %var_5481, %var_5482) /* ty=(Tensor[(6, 16, 11), float64], Tensor[(6, 16, 11), float32], Tensor[(3, 45), float32], Tensor[(1089), float32], Tensor[(14, 5, 6), bool], Tensor[(10, 42), uint32], Tensor[(420), uint32], Tensor[(7, 5), float64]) */
}

def @func_6721(%var_6720: Tensor[(14, 15, 7), float64]) -> (Tensor[(14, 15, 7), float64],) {
  %805 = fn (%var_6715: Tensor[(14, 15, 7), float64]) -> (Tensor[(14, 15, 7), float64],) {
    %803 = cast(%var_6715, dtype="float64") /* ty=Tensor[(14, 15, 7), float64] */;
    %804 = log2(%803) /* ty=Tensor[(14, 15, 7), float64] */;
    (%804,)
  };
  %805(%var_6720) /* ty=(Tensor[(14, 15, 7), float64],) */
}

def @func_8452() -> Tensor[(264), bool] {
  @func_8450() /* ty=Tensor[(264), bool] */
}

def @func_6951() -> (Tensor[(6, 16, 11), float32], Tensor[(2, 11, 12), float32], float32) {
  @func_6949() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(2, 11, 12), float32], float32) */
}

def @func_8320(%var_8298: Tensor[(2, 11, 12), float64]) -> (Tensor[(2, 11, 12), uint64], Tensor[(6, 16, 11), float32], Tensor[(35), float64], Tensor[(2, 11, 12), float64], Tensor[(6, 16, 11), float32]) {
  %806 = @func_5970() /* ty=(Tensor[(2, 11, 12), float64],) */;
  %807 = %806.0;
  %808 = cast(%var_8298, dtype="uint64") /* ty=Tensor[(2, 11, 12), uint64] */;
  %809 = shape_of(%807, dtype="int32") /* ty=Tensor[(3), int32] */;
  %810 = cast(%807, dtype="uint64") /* ty=Tensor[(2, 11, 12), uint64] */;
  %811 = dyn.reshape(%808, %809, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %812 = @func_2978() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float32]) */;
  %813 = @func_7030() /* ty=(Tensor[(135), float32], Tensor[(35), float64]) */;
  %814 = cast(%807, dtype="float32") /* ty=Tensor[(2, 11, 12), float32] */;
  %815 = erf(%814) /* ty=Tensor[(2, 11, 12), float32] */;
  %816 = cast(%815, dtype="float64") /* ty=Tensor[(2, 11, 12), float64] */;
  %817 = @func_1705() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %818 = subtract(%810, %811) /* ty=Tensor[(2, 11, 12), uint64] */;
  %819 = %812.0;
  %820 = %813.1;
  %821 = log10(%816) /* ty=Tensor[(2, 11, 12), float64] */;
  %822 = %817.0;
  (%818, %819, %820, %821, %822)
}

def @func_8582(%var_8578: Tensor[(121, 9), float32], %var_8579: Tensor[(7, 1), float32], %var_8580: Tensor[(2, 1), float64], %var_8581: Tensor[(2080), uint16]) -> (Tensor[(6, 16, 11), float64], Tensor[(2, 11, 12), bool], Tensor[(121, 9), float32], Tensor[(1, 7, 1), float32], Tensor[(7, 1), float32], Tensor[(2, 1), float64], Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float32], Tensor[(2080), float32], Tensor[(2, 11, 12), float64]) {
  %846 = fn (%var_8520: Tensor[(121, 9), float32], %var_8525: Tensor[(7, 1), float32], %var_8526: Tensor[(2, 1), float64], %var_8537: Tensor[(2080), uint16]) -> (Tensor[(6, 16, 11), float64], Tensor[(2, 11, 12), bool], Tensor[(121, 9), float32], Tensor[(1, 7, 1), float32], Tensor[(7, 1), float32], Tensor[(2, 1), float64], Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float32], Tensor[(2080), float32], Tensor[(2, 11, 12), float64]) {
    %823 = cast(3.80144f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %824 = cast(%var_8520, dtype="float32") /* ty=Tensor[(121, 9), float32] */;
    %825 = reshape(%823, newshape=[]) /* ty=float32 */;
    %826 = reshape(%824, newshape=[1089]) /* ty=Tensor[(1089), float32] */;
    %827 = @func_2951(%825, %826) /* ty=(Tensor[(1056), float64], float32, Tensor[(1089), float32], Tensor[(2, 11, 12), bool], Tensor[(264), bool], Tensor[(6, 16, 11), float32]) */;
    %828 = cast(%var_8525, dtype="float32") /* ty=Tensor[(7, 1), float32] */;
    %829 = cast(%var_8526, dtype="float64") /* ty=Tensor[(2, 1), float64] */;
    %830 = reshape(%828, newshape=[1, 7, 1]) /* ty=Tensor[(1, 7, 1), float32] */;
    %831 = reshape(%829, newshape=[1, 2]) /* ty=Tensor[(1, 2), float64] */;
    %832 = @func_5950(%830, %831) /* ty=(Tensor[(1, 7, 1), float32], Tensor[(2, 8, 12), float64], Tensor[(1, 2), float64]) */;
    %833 = cast(%var_8537, dtype="uint16") /* ty=Tensor[(2080), uint16] */;
    %834 = reshape(%833, newshape=[13, 10, 16]) /* ty=Tensor[(13, 10, 16), uint16] */;
    %835 = @func_5070(%834) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float32], Tensor[(13, 10, 16), bool], Tensor[(13, 10, 16), float64]) */;
    %836 = cast(%var_8537, dtype="float32") /* ty=Tensor[(2080), float32] */;
    %837 = cast(3.80144f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %838 = @func_5536() /* ty=(Tensor[(2, 11, 12), float64],) */;
    %839 = @func_2138() /* ty=Tensor[(6, 16, 11), float64] */;
    %840 = %827.3;
    %841 = %832.0;
    %842 = %835.1;
    %843 = @func_2871() /* ty=Tensor[(6, 16, 11), float32] */;
    %844 = minimum(%836, %837) /* ty=Tensor[(2080), float32] */;
    %845 = %838.0;
    (%839, %840, %var_8520, %841, %var_8525, %var_8526, %842, %843, %844, %845)
  };
  %846(%var_8578, %var_8579, %var_8580, %var_8581) /* ty=(Tensor[(6, 16, 11), float64], Tensor[(2, 11, 12), bool], Tensor[(121, 9), float32], Tensor[(1, 7, 1), float32], Tensor[(7, 1), float32], Tensor[(2, 1), float64], Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float32], Tensor[(2080), float32], Tensor[(2, 11, 12), float64]) */
}

def @func_4574() -> (Tensor[(6, 16, 11), float32],) {
  %847 = @func_2562() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %848 = %847.0;
  %849 = cast(%848, dtype="float32") /* ty=Tensor[(6, 16, 11), float32] */;
  %850 = sigmoid(%849) /* ty=Tensor[(6, 16, 11), float32] */;
  (%850,)
}

def @func_4741(%var_4740: Tensor[(1, 35), float64]) -> (Tensor[(6, 16, 11), float64], Tensor[(1, 7, 5), float64], Tensor[(15, 11, 14), float64], Tensor[(1, 35), float32], Tensor[(1, 35), float64], Tensor[(16, 11, 9), int16], Tensor[(1584), float32]) {
  %867 = fn (%var_4717: Tensor[(1, 35), float64]) -> (Tensor[(6, 16, 11), float64], Tensor[(1, 7, 5), float64], Tensor[(15, 11, 14), float64], Tensor[(1, 35), float32], Tensor[(1, 35), float64], Tensor[(16, 11, 9), int16], Tensor[(1584), float32]) {
    %851 = cast(%var_4717, dtype="float64") /* ty=Tensor[(1, 35), float64] */;
    %852 = reshape(%851, newshape=[1, 7, 5]) /* ty=Tensor[(1, 7, 5), float64] */;
    %853 = @func_459(%852) /* ty=(Tensor[(1, 7, 5), float64],) */;
    %854 = cast(%var_4717, dtype="float32") /* ty=Tensor[(1, 35), float32] */;
    %855 = cast(%var_4717, dtype="float64") /* ty=Tensor[(1, 35), float64] */;
    %856 = cast(meta[relay.Constant][45] /* ty=Tensor[(1584), float32] */, dtype="float32") /* ty=Tensor[(1584), float32] */;
    %857 = cast(meta[relay.Constant][45] /* ty=Tensor[(1584), float32] */, dtype="float32") /* ty=Tensor[(1584), float32] */;
    %858 = reshape(%856, newshape=[16, 11, 9]) /* ty=Tensor[(16, 11, 9), float32] */;
    %859 = reshape(%857, newshape=[16, 11, 9]) /* ty=Tensor[(16, 11, 9), float32] */;
    %860 = @func_423(%858, %859) /* ty=(Tensor[(16, 11, 9), bool], Tensor[(16, 11, 9), int16]) */;
    %861 = @func_2138() /* ty=Tensor[(6, 16, 11), float64] */;
    %862 = %853.0;
    %863 = @func_4227() /* ty=Tensor[(15, 11, 14), float64] */;
    %864 = rsqrt(%854) /* ty=Tensor[(1, 35), float32] */;
    %865 = sigmoid(%855) /* ty=Tensor[(1, 35), float64] */;
    %866 = %860.1;
    (%861, %862, %863, %864, %865, %866, meta[relay.Constant][45] /* ty=Tensor[(1584), float32] */)
  };
  %867(%var_4740) /* ty=(Tensor[(6, 16, 11), float64], Tensor[(1, 7, 5), float64], Tensor[(15, 11, 14), float64], Tensor[(1, 35), float32], Tensor[(1, 35), float64], Tensor[(16, 11, 9), int16], Tensor[(1584), float32]) */
}

def @func_8639() -> Tensor[(6, 16, 11), int8] {
  @func_8637() /* ty=Tensor[(6, 16, 11), int8] */
}

def @func_2563() -> (Tensor[(6, 16, 11), float32],) {
  %870 = fn () -> (Tensor[(6, 16, 11), float32],) {
    %868 = @func_1643() /* ty=(Tensor[(6, 16, 11), float32],) */;
    %869 = %868.0;
    (%869,)
  };
  %870() /* ty=(Tensor[(6, 16, 11), float32],) */
}

def @func_4013() -> (Tensor[(6, 16, 11), float64],) {
  %871 = @func_3833() /* ty=Tensor[(6, 16, 11), float64] */;
  (%871,)
}

def @func_1933(%var_1903: float32, %var_1904: Tensor[(1089), float32]) -> (Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool], Tensor[(1056), float64], float32, Tensor[(1089), float32], Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool]) {
  %872 = @func_1643() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %873 = @func_1678() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool], Tensor[(420), uint32]) */;
  %874 = cast(%var_1903, dtype="float32") /* ty=float32 */;
  %875 = cast(%var_1904, dtype="float32") /* ty=Tensor[(1089), float32] */;
  %876 = %872.0;
  %877 = cast(%876, dtype="float64") /* ty=Tensor[(6, 16, 11), float64] */;
  %878 = reshape(%874, newshape=[]) /* ty=float32 */;
  %879 = reshape(%875, newshape=[11, 9, 11]) /* ty=Tensor[(11, 9, 11), float32] */;
  %880 = reshape(%877, newshape=[1056]) /* ty=Tensor[(1056), float64] */;
  %881 = @func_351(%878, %879, %880) /* ty=(Tensor[(11, 9, 11), bool], Tensor[(11, 9, 11), bool], Tensor[(8, 12, 11), float64], Tensor[(1056), float64]) */;
  %882 = @func_1705() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %883 = @func_1678() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool], Tensor[(420), uint32]) */;
  %884 = %873.1;
  %885 = %881.3;
  %886 = %882.0;
  %887 = %883.1;
  (%876, %884, %885, %var_1903, %var_1904, %886, %887)
}

def @func_8323(%var_8321: Tensor[(2, 11, 12), float64]) -> (Tensor[(2, 11, 12), uint64], Tensor[(6, 16, 11), float32], Tensor[(35), float64], Tensor[(2, 11, 12), float64], Tensor[(6, 16, 11), float32]) {
  @func_8320(%var_8321) /* ty=(Tensor[(2, 11, 12), uint64], Tensor[(6, 16, 11), float32], Tensor[(35), float64], Tensor[(2, 11, 12), float64], Tensor[(6, 16, 11), float32]) */
}

def @func_7051() -> (Tensor[(6, 16, 11), float32],) {
  %890 = fn () -> (Tensor[(6, 16, 11), float32],) {
    %888 = @func_2686() /* ty=(Tensor[(6, 16, 11), float32],) */;
    %889 = %888.0;
    (%889,)
  };
  %890() /* ty=(Tensor[(6, 16, 11), float32],) */
}

def @func_5972() -> (Tensor[(2, 11, 12), float64],) {
  @func_5970() /* ty=(Tensor[(2, 11, 12), float64],) */
}

def @func_8667() -> (Tensor[(6, 16, 11), float32], Tensor[(1, 8, 13), float64], Tensor[(24), uint16], Tensor[(240), uint16], Tensor[(1089), float32]) {
  %891 = @func_5883() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float64], Tensor[(8, 12, 11), float32], Tensor[(6, 16, 11), float32], Tensor[(135), float32], Tensor[(11, 99), float32]) */;
  %892 = cast(meta[relay.Constant][46] /* ty=Tensor[(1089), float32] */, dtype="float32") /* ty=Tensor[(1089), float32] */;
  %893 = cast(meta[relay.Constant][47] /* ty=Tensor[(24), uint16] */, dtype="uint16") /* ty=Tensor[(24), uint16] */;
  %894 = cast(meta[relay.Constant][48] /* ty=Tensor[(240), uint16] */, dtype="uint16") /* ty=Tensor[(240), uint16] */;
  %895 = reshape(%892, newshape=[1089, 1]) /* ty=Tensor[(1089, 1), float32] */;
  %896 = reshape(%893, newshape=[1, 24]) /* ty=Tensor[(1, 24), uint16] */;
  %897 = reshape(%894, newshape=[8, 30]) /* ty=Tensor[(8, 30), uint16] */;
  %898 = @func_8013(%895, %896, %897) /* ty=(Tensor[(6, 16, 11), float64], Tensor[(1, 8, 13), float64], Tensor[(1089, 1), float32], Tensor[(10, 2, 12), uint16], Tensor[(1, 24), uint16], Tensor[(6, 16, 11), float32], Tensor[(5, 3, 9), uint32], Tensor[(8, 30), float32]) */;
  %899 = cast(meta[relay.Constant][46] /* ty=Tensor[(1089), float32] */, dtype="float32") /* ty=Tensor[(1089), float32] */;
  %900 = %891.3;
  %901 = %898.1;
  %902 = atan(%899) /* ty=Tensor[(1089), float32] */;
  (%900, %901, meta[relay.Constant][47] /* ty=Tensor[(24), uint16] */, meta[relay.Constant][48] /* ty=Tensor[(240), uint16] */, %902)
}

def @func_8060() -> (Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float64]) {
  %907 = fn () -> (Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float64]) {
    %903 = @func_2978() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float32]) */;
    %904 = @func_4299() /* ty=(Tensor[(6, 16, 11), float64], bool, Tensor[(264), bool], Tensor[(2, 11, 12), float64]) */;
    %905 = %903.1;
    %906 = %904.0;
    (%905, %906)
  };
  %907() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float64]) */
}

def @func_2004(%var_1981: Tensor[(104), float64], %var_1984: Tensor[(2, 792), float32]) -> (Tensor[(6, 16, 11), float32], Tensor[(1, 8, 13), float64], Tensor[(104), float64], Tensor[(16, 11, 9), bool], Tensor[(2, 792), float32]) {
  %908 = @func_1643() /* ty=(Tensor[(6, 16, 11), float32],) */;
  %909 = cast(%var_1981, dtype="float64") /* ty=Tensor[(104), float64] */;
  %910 = reshape(%909, newshape=[1, 8, 13]) /* ty=Tensor[(1, 8, 13), float64] */;
  %911 = cast(%var_1984, dtype="float32") /* ty=Tensor[(2, 792), float32] */;
  %912 = cast(%var_1984, dtype="float32") /* ty=Tensor[(2, 792), float32] */;
  %913 = reshape(%911, newshape=[16, 11, 9]) /* ty=Tensor[(16, 11, 9), float32] */;
  %914 = reshape(%912, newshape=[16, 11, 9]) /* ty=Tensor[(16, 11, 9), float32] */;
  %915 = @func_423(%913, %914) /* ty=(Tensor[(16, 11, 9), bool], Tensor[(16, 11, 9), int16]) */;
  %916 = %908.0;
  %917 = @func_1302(%910) /* ty=Tensor[(1, 8, 13), float64] */;
  %918 = %915.0;
  (%916, %917, %var_1981, %918, %var_1984)
}

def @func_8845(%var_8844: Tensor[(1, 9, 16), float64]) -> Tensor[(1, 9, 16), float64] {
  %920 = fn (%var_8837: Tensor[(1, 9, 16), float64]) -> Tensor[(1, 9, 16), float64] {
    %919 = cast(%var_8837, dtype="float64") /* ty=Tensor[(1, 9, 16), float64] */;
    sqrt(%919) /* ty=Tensor[(1, 9, 16), float64] */
  };
  %920(%var_8844) /* ty=Tensor[(1, 9, 16), float64] */
}

def @func_6102(%var_6100: Tensor[(132, 12), float32]) -> (Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool], float32, Tensor[(1089), float32], Tensor[(132, 12), float32], Tensor[(2, 11, 12), float64]) {
  @func_6099(%var_6100) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool], float32, Tensor[(1089), float32], Tensor[(132, 12), float32], Tensor[(2, 11, 12), float64]) */
}

def @func_5413() -> Tensor[(6, 16, 11), float64] {
  %921 = fn () -> Tensor[(6, 16, 11), float64] {
    @func_3833() /* ty=Tensor[(6, 16, 11), float64] */
  };
  %921() /* ty=Tensor[(6, 16, 11), float64] */
}

def @func_3732(%var_3721: Tensor[(5, 13, 13), float32], %var_3722: Tensor[(5, 13, 13), float32]) -> Tensor[(5, 13, 13), float32] {
  %922 = cast(%var_3722, dtype="float32") /* ty=Tensor[(5, 13, 13), float32] */;
  %923 = shape_of(%var_3721, dtype="int32") /* ty=Tensor[(3), int32] */;
  %924 = cast(%var_3721, dtype="float32") /* ty=Tensor[(5, 13, 13), float32] */;
  %925 = dyn.reshape(%922, %923, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%924, %925) /* ty=Tensor[(5, 13, 13), float32] */
}

def @func_6151() -> (Tensor[(6, 16, 11), float32], float32, float32, Tensor[(1089), float32]) {
  %936 = fn () -> (Tensor[(6, 16, 11), float32], float32, float32, Tensor[(1089), float32]) {
    %926 = @func_5778() /* ty=(Tensor[(6, 16, 11), float32],) */;
    %927 = %926.0;
    %928 = cast(%927, dtype="float32") /* ty=Tensor[(6, 16, 11), float32] */;
    %929 = cast(9.20221f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %930 = cast(meta[relay.Constant][49] /* ty=Tensor[(1089), float32] */, dtype="float32") /* ty=Tensor[(1089), float32] */;
    %931 = reshape(%928, newshape=[6, 16, 11]) /* ty=Tensor[(6, 16, 11), float32] */;
    %932 = reshape(%929, newshape=[]) /* ty=float32 */;
    %933 = reshape(%930, newshape=[1089, 1]) /* ty=Tensor[(1089, 1), float32] */;
    %934 = @func_3619(%931, %932, %933) /* ty=(Tensor[(6, 16, 11), bool], Tensor[(1089), float32], float32, Tensor[(1089, 1), float32], Tensor[(6, 16, 11), float32]) */;
    %935 = %934.2;
    (%927, %935, 9.20221f /* ty=float32 */, meta[relay.Constant][49] /* ty=Tensor[(1089), float32] */)
  };
  %936() /* ty=(Tensor[(6, 16, 11), float32], float32, float32, Tensor[(1089), float32]) */
}

def @func_5720(%var_5718: Tensor[(1, 135), float32]) -> (Tensor[(6, 16, 11), float32], Tensor[(64), float32], Tensor[(1, 135), float32], Tensor[(1584), float32], Tensor[(35), float64], Tensor[(6, 16, 11), float64]) {
  @func_5717(%var_5718) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(64), float32], Tensor[(1, 135), float32], Tensor[(1584), float32], Tensor[(35), float64], Tensor[(6, 16, 11), float64]) */
}

def @func_7527() -> Tensor[(6, 16, 11), float32] {
  @func_7525() /* ty=Tensor[(6, 16, 11), float32] */
}

def @func_8721() -> Tensor[(6, 16, 11), float32] {
  %938 = fn () -> Tensor[(6, 16, 11), float32] {
    %937 = @func_3118() /* ty=(Tensor[(6, 16, 11), float32],) */;
    %937.0
  };
  %938() /* ty=Tensor[(6, 16, 11), float32] */
}

def @func_8013(%var_7962: Tensor[(1089, 1), float32], %var_7980: Tensor[(1, 24), uint16], %var_7981: Tensor[(8, 30), uint16]) -> (Tensor[(6, 16, 11), float64], Tensor[(1, 8, 13), float64], Tensor[(1089, 1), float32], Tensor[(10, 2, 12), uint16], Tensor[(1, 24), uint16], Tensor[(6, 16, 11), float32], Tensor[(5, 3, 9), uint32], Tensor[(8, 30), float32]) {
  %939 = @func_4013() /* ty=(Tensor[(6, 16, 11), float64],) */;
  %940 = cast(meta[relay.Constant][50] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %941 = cast(%var_7962, dtype="float32") /* ty=Tensor[(1089, 1), float32] */;
  %942 = reshape(%940, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %943 = reshape(%941, newshape=[1089]) /* ty=Tensor[(1089), float32] */;
  %944 = @func_2390(%942, %943) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(5, 3, 9), float32], Tensor[(135), float32], Tensor[(1, 8, 13), float64], Tensor[(1, 104), float64], Tensor[(1056), float64], Tensor[(1089), uint32], Tensor[(5, 3, 9), float32]) */;
  %945 = cast(%var_7980, dtype="uint16") /* ty=Tensor[(1, 24), uint16] */;
  %946 = cast(%var_7981, dtype="uint16") /* ty=Tensor[(8, 30), uint16] */;
  %947 = reshape(%945, newshape=[1, 2, 12]) /* ty=Tensor[(1, 2, 12), uint16] */;
  %948 = reshape(%946, newshape=[10, 2, 12]) /* ty=Tensor[(10, 2, 12), uint16] */;
  %949 = @func_2978() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float32]) */;
  %950 = cast(meta[relay.Constant][50] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %951 = cast(meta[relay.Constant][50] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %952 = reshape(%950, newshape=[5, 3, 9]) /* ty=Tensor[(5, 3, 9), float32] */;
  %953 = reshape(%951, newshape=[5, 3, 9]) /* ty=Tensor[(5, 3, 9), float32] */;
  %954 = @func_2330(%952, %953) /* ty=Tensor[(5, 3, 9), float32] */;
  %955 = cast(meta[relay.Constant][50] /* ty=Tensor[(135), float32] */, dtype="uint32") /* ty=Tensor[(135), uint32] */;
  %956 = shape_of(%954, dtype="int32") /* ty=Tensor[(3), int32] */;
  %957 = cast(%954, dtype="uint32") /* ty=Tensor[(5, 3, 9), uint32] */;
  %958 = dyn.reshape(%955, %956, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %959 = cast(%var_7981, dtype="float32") /* ty=Tensor[(8, 30), float32] */;
  %960 = %939.0;
  %961 = %944.3;
  %962 = @func_193(%947, %948) /* ty=Tensor[(10, 2, 12), uint16] */;
  %963 = %949.0;
  %964 = right_shift(%957, %958) /* ty=Tensor[(5, 3, 9), uint32] */;
  %965 = log10(%959) /* ty=Tensor[(8, 30), float32] */;
  (%960, %961, %var_7962, %962, %var_7980, %963, %964, %965)
}

def @func_2333(%var_2331: Tensor[(5, 3, 9), float32], %var_2332: Tensor[(5, 3, 9), float32]) -> Tensor[(5, 3, 9), float32] {
  %970 = fn (%var_2322: Tensor[(5, 3, 9), float32], %var_2323: Tensor[(5, 3, 9), float32]) -> Tensor[(5, 3, 9), float32] {
    %966 = cast(%var_2323, dtype="float32") /* ty=Tensor[(5, 3, 9), float32] */;
    %967 = shape_of(%var_2322, dtype="int32") /* ty=Tensor[(3), int32] */;
    %968 = cast(%var_2322, dtype="float32") /* ty=Tensor[(5, 3, 9), float32] */;
    %969 = dyn.reshape(%966, %967, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    power(%968, %969) /* ty=Tensor[(5, 3, 9), float32] */
  };
  %970(%var_2331, %var_2332) /* ty=Tensor[(5, 3, 9), float32] */
}

def @func_5435() -> (Tensor[(15, 11, 14), float64],) {
  %971 = @func_4227() /* ty=Tensor[(15, 11, 14), float64] */;
  (%971,)
}

def @func_4469(%var_4456: Tensor[(16, 8, 7), float32], %var_4461: Tensor[(104), float64], %var_4462: Tensor[(1584), float32]) -> (Tensor[(16, 8, 7), float32], Tensor[(2, 792), float32], Tensor[(104), float64], Tensor[(1584), float32]) {
  %972 = cast(%var_4456, dtype="float32") /* ty=Tensor[(16, 8, 7), float32] */;
  %973 = cast(%var_4461, dtype="float64") /* ty=Tensor[(104), float64] */;
  %974 = cast(%var_4462, dtype="float32") /* ty=Tensor[(1584), float32] */;
  %975 = reshape(%973, newshape=[104]) /* ty=Tensor[(104), float64] */;
  %976 = reshape(%974, newshape=[2, 792]) /* ty=Tensor[(2, 792), float32] */;
  %977 = @func_2004(%975, %976) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(1, 8, 13), float64], Tensor[(104), float64], Tensor[(16, 11, 9), bool], Tensor[(2, 792), float32]) */;
  %978 = log10(%972) /* ty=Tensor[(16, 8, 7), float32] */;
  %979 = %977.4;
  (%978, %979, %var_4461, %var_4462)
}

def @func_3833() -> Tensor[(6, 16, 11), float64] {
  @func_2138() /* ty=Tensor[(6, 16, 11), float64] */
}

def @func_8018(%var_8015: Tensor[(1089, 1), float32], %var_8016: Tensor[(1, 24), uint16], %var_8017: Tensor[(8, 30), uint16]) -> (Tensor[(6, 16, 11), float64], Tensor[(1, 8, 13), float64], Tensor[(1089, 1), float32], Tensor[(10, 2, 12), uint16], Tensor[(1, 24), uint16], Tensor[(6, 16, 11), float32], Tensor[(5, 3, 9), uint32], Tensor[(8, 30), float32]) {
  @func_8013(%var_8015, %var_8016, %var_8017) /* ty=(Tensor[(6, 16, 11), float64], Tensor[(1, 8, 13), float64], Tensor[(1089, 1), float32], Tensor[(10, 2, 12), uint16], Tensor[(1, 24), uint16], Tensor[(6, 16, 11), float32], Tensor[(5, 3, 9), uint32], Tensor[(8, 30), float32]) */
}

def @func_7445() -> (Tensor[(6, 16, 11), float32], Tensor[(11, 99), float32]) {
  %984 = fn () -> (Tensor[(6, 16, 11), float32], Tensor[(11, 99), float32]) {
    %980 = @func_1643() /* ty=(Tensor[(6, 16, 11), float32],) */;
    %981 = @func_5883() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float64], Tensor[(8, 12, 11), float32], Tensor[(6, 16, 11), float32], Tensor[(135), float32], Tensor[(11, 99), float32]) */;
    %982 = %980.0;
    %983 = %981.5;
    (%982, %983)
  };
  %984() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(11, 99), float32]) */
}

def @func_3978(%var_3976: Tensor[(6, 16, 11), float32], %var_3977: Tensor[(135), float32]) -> (Tensor[(6, 16, 11), float64], Tensor[(24), uint16], Tensor[(1, 24), uint16], Tensor[(6, 16, 11), float32], Tensor[(135), float32], Tensor[(1089), float32], Tensor[(528, 104), int16]) {
  %1012 = fn (%var_3929: Tensor[(6, 16, 11), float32], %var_3942: Tensor[(135), float32]) -> (Tensor[(6, 16, 11), float64], Tensor[(24), uint16], Tensor[(1, 24), uint16], Tensor[(6, 16, 11), float32], Tensor[(135), float32], Tensor[(1089), float32], Tensor[(528, 104), int16]) {
    %985 = cast(meta[relay.Constant][51] /* ty=Tensor[(528, 1), uint64] */, dtype="uint64") /* ty=Tensor[(528, 1), uint64] */;
    %986 = cast(meta[relay.Constant][51] /* ty=Tensor[(528, 1), uint64] */, dtype="float64") /* ty=Tensor[(528, 1), float64] */;
    %987 = cast(meta[relay.Constant][52] /* ty=Tensor[(1, 24), uint16] */, dtype="uint16") /* ty=Tensor[(1, 24), uint16] */;
    %988 = reshape(%985, newshape=[12, 11, 4]) /* ty=Tensor[(12, 11, 4), uint64] */;
    %989 = reshape(%986, newshape=[12, 11, 4]) /* ty=Tensor[(12, 11, 4), float64] */;
    %990 = reshape(%987, newshape=[24]) /* ty=Tensor[(24), uint16] */;
    %991 = @func_1014(%988, %989, %990) /* ty=(Tensor[(12, 11, 4), uint64], Tensor[(12, 11, 4), uint32], Tensor[(12, 11, 4), float64], Tensor[(10, 2, 12), uint16], Tensor[(24), uint16], Tensor[(120, 2), uint16], Tensor[(1, 7, 5), float64], Tensor[(35), float64]) */;
    %992 = @func_2562() /* ty=(Tensor[(6, 16, 11), float32],) */;
    %993 = %992.0;
    %994 = cast(%var_3929, dtype="float32") /* ty=Tensor[(6, 16, 11), float32] */;
    %995 = shape_of(%993, dtype="int32") /* ty=Tensor[(3), int32] */;
    %996 = cast(%993, dtype="float32") /* ty=Tensor[(6, 16, 11), float32] */;
    %997 = dyn.reshape(%994, %995, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %998 = cast(%var_3929, dtype="float32") /* ty=Tensor[(6, 16, 11), float32] */;
    %999 = cast(%var_3942, dtype="float32") /* ty=Tensor[(135), float32] */;
    %1000 = cast(meta[relay.Constant][53] /* ty=Tensor[(1089), float32] */, dtype="float32") /* ty=Tensor[(1089), float32] */;
    %1001 = reshape(%998, newshape=[6, 16, 11]) /* ty=Tensor[(6, 16, 11), float32] */;
    %1002 = reshape(%999, newshape=[135]) /* ty=Tensor[(135), float32] */;
    %1003 = reshape(%1000, newshape=[1089]) /* ty=Tensor[(1089), float32] */;
    %1004 = @func_2458(%1001, %1002, %1003) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(1, 104), float64], Tensor[(135), float32], Tensor[(1089), float32]) */;
    %1005 = %1004.1;
    %1006 = cast(%1005, dtype="int16") /* ty=Tensor[(1, 104), int16] */;
    %1007 = cast(meta[relay.Constant][51] /* ty=Tensor[(528, 1), uint64] */, dtype="int16") /* ty=Tensor[(528, 1), int16] */;
    %1008 = @func_3833() /* ty=Tensor[(6, 16, 11), float64] */;
    %1009 = %991.4;
    %1010 = floor_divide(%996, %997) /* ty=Tensor[(6, 16, 11), float32] */;
    %1011 = logical_xor(%1006, %1007) /* ty=Tensor[(528, 104), int16] */;
    (%1008, %1009, meta[relay.Constant][52] /* ty=Tensor[(1, 24), uint16] */, %1010, %var_3942, meta[relay.Constant][53] /* ty=Tensor[(1089), float32] */, %1011)
  };
  %1012(%var_3976, %var_3977) /* ty=(Tensor[(6, 16, 11), float64], Tensor[(24), uint16], Tensor[(1, 24), uint16], Tensor[(6, 16, 11), float32], Tensor[(135), float32], Tensor[(1089), float32], Tensor[(528, 104), int16]) */
}

def @func_2393(%var_2391: Tensor[(135), float32], %var_2392: Tensor[(1089), float32]) -> (Tensor[(6, 16, 11), float32], Tensor[(5, 3, 9), float32], Tensor[(135), float32], Tensor[(1, 8, 13), float64], Tensor[(1, 104), float64], Tensor[(1056), float64], Tensor[(1089), uint32], Tensor[(5, 3, 9), float32]) {
  %1039 = fn (%var_2356: Tensor[(135), float32], %var_2373: Tensor[(1089), float32]) -> (Tensor[(6, 16, 11), float32], Tensor[(5, 3, 9), float32], Tensor[(135), float32], Tensor[(1, 8, 13), float64], Tensor[(1, 104), float64], Tensor[(1056), float64], Tensor[(1089), uint32], Tensor[(5, 3, 9), float32]) {
    %1013 = @func_1643() /* ty=(Tensor[(6, 16, 11), float32],) */;
    %1014 = cast(%var_2356, dtype="float32") /* ty=Tensor[(135), float32] */;
    %1015 = cast(%var_2356, dtype="float32") /* ty=Tensor[(135), float32] */;
    %1016 = reshape(%1014, newshape=[5, 3, 9]) /* ty=Tensor[(5, 3, 9), float32] */;
    %1017 = reshape(%1015, newshape=[5, 3, 9]) /* ty=Tensor[(5, 3, 9), float32] */;
    %1018 = cast(meta[relay.Constant][54] /* ty=Tensor[(1, 104), float64] */, dtype="float64") /* ty=Tensor[(1, 104), float64] */;
    %1019 = reshape(%1018, newshape=[1, 8, 13]) /* ty=Tensor[(1, 8, 13), float64] */;
    %1020 = cast(-3.41977f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %1021 = cast(%var_2373, dtype="float32") /* ty=Tensor[(1089), float32] */;
    %1022 = %1013.0;
    %1023 = cast(%1022, dtype="float64") /* ty=Tensor[(6, 16, 11), float64] */;
    %1024 = reshape(%1020, newshape=[]) /* ty=float32 */;
    %1025 = reshape(%1021, newshape=[11, 9, 11]) /* ty=Tensor[(11, 9, 11), float32] */;
    %1026 = reshape(%1023, newshape=[1056]) /* ty=Tensor[(1056), float64] */;
    %1027 = @func_351(%1024, %1025, %1026) /* ty=(Tensor[(11, 9, 11), bool], Tensor[(11, 9, 11), bool], Tensor[(8, 12, 11), float64], Tensor[(1056), float64]) */;
    %1028 = cast(%var_2373, dtype="uint32") /* ty=Tensor[(1089), uint32] */;
    %1029 = cast(-3.41977f /* ty=float32 */, dtype="uint32") /* ty=uint32 */;
    %1030 = @func_2330(%1016, %1017) /* ty=Tensor[(5, 3, 9), float32] */;
    %1031 = cast(%1030, dtype="float32") /* ty=Tensor[(5, 3, 9), float32] */;
    %1032 = cast(%var_2356, dtype="float32") /* ty=Tensor[(135), float32] */;
    %1033 = reshape(%1031, newshape=[5, 3, 9]) /* ty=Tensor[(5, 3, 9), float32] */;
    %1034 = reshape(%1032, newshape=[5, 3, 9]) /* ty=Tensor[(5, 3, 9), float32] */;
    %1035 = @func_1302(%1019) /* ty=Tensor[(1, 8, 13), float64] */;
    %1036 = %1027.3;
    %1037 = logical_xor(%1028, %1029) /* ty=Tensor[(1089), uint32] */;
    %1038 = @func_2330(%1033, %1034) /* ty=Tensor[(5, 3, 9), float32] */;
    (%1022, %1030, %var_2356, %1035, meta[relay.Constant][54] /* ty=Tensor[(1, 104), float64] */, %1036, %1037, %1038)
  };
  %1039(%var_2391, %var_2392) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(5, 3, 9), float32], Tensor[(135), float32], Tensor[(1, 8, 13), float64], Tensor[(1, 104), float64], Tensor[(1056), float64], Tensor[(1089), uint32], Tensor[(5, 3, 9), float32]) */
}

def @func_5072(%var_5071: Tensor[(13, 10, 16), uint16]) -> (Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float32], Tensor[(13, 10, 16), bool], Tensor[(13, 10, 16), float64]) {
  %1074 = fn (%var_5015: Tensor[(13, 10, 16), uint16]) -> (Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float32], Tensor[(13, 10, 16), bool], Tensor[(13, 10, 16), float64]) {
    %1040 = @func_2978() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float32]) */;
    %1041 = cast(meta[relay.Constant][55] /* ty=Tensor[(13, 10, 16), uint16] */, dtype="float32") /* ty=Tensor[(13, 10, 16), float32] */;
    %1042 = acos(%1041) /* ty=Tensor[(13, 10, 16), float32] */;
    %1043 = cast(%1042, dtype="float64") /* ty=Tensor[(13, 10, 16), float64] */;
    %1044 = sigmoid(%1043) /* ty=Tensor[(13, 10, 16), float64] */;
    %1045 = cast(meta[relay.Constant][55] /* ty=Tensor[(13, 10, 16), uint16] */, dtype="bool") /* ty=Tensor[(13, 10, 16), bool] */;
    %1046 = shape_of(%var_5015, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1047 = cast(%var_5015, dtype="bool") /* ty=Tensor[(13, 10, 16), bool] */;
    %1048 = dyn.reshape(%1045, %1046, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1049 = less_equal(%1047, %1048) /* ty=Tensor[(13, 10, 16), bool] */;
    %1050 = cast(%1049, dtype="uint32") /* ty=Tensor[(13, 10, 16), uint32] */;
    %1051 = shape_of(meta[relay.Constant][55] /* ty=Tensor[(13, 10, 16), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1052 = cast(meta[relay.Constant][55] /* ty=Tensor[(13, 10, 16), uint16] */, dtype="uint32") /* ty=Tensor[(13, 10, 16), uint32] */;
    %1053 = dyn.reshape(%1050, %1051, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %1054 = minimum(%1052, %1053) /* ty=Tensor[(13, 10, 16), uint32] */;
    %1055 = cast(%1054, dtype="int16") /* ty=Tensor[(13, 10, 16), int16] */;
    %1056 = shape_of(%1042, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1057 = cast(%1042, dtype="int16") /* ty=Tensor[(13, 10, 16), int16] */;
    %1058 = dyn.reshape(%1055, %1056, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %1059 = left_shift(%1057, %1058) /* ty=Tensor[(13, 10, 16), int16] */;
    %1060 = cast(%1059, dtype="int32") /* ty=Tensor[(13, 10, 16), int32] */;
    %1061 = shape_of(%1044, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1062 = cast(%1044, dtype="int32") /* ty=Tensor[(13, 10, 16), int32] */;
    %1063 = dyn.reshape(%1060, %1061, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %1064 = logical_xor(%1062, %1063) /* ty=Tensor[(13, 10, 16), int32] */;
    %1065 = cast(%1042, dtype="bool") /* ty=Tensor[(13, 10, 16), bool] */;
    %1066 = shape_of(%1064, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1067 = cast(%1064, dtype="bool") /* ty=Tensor[(13, 10, 16), bool] */;
    %1068 = dyn.reshape(%1065, %1066, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1069 = cast(%1054, dtype="float64") /* ty=Tensor[(13, 10, 16), float64] */;
    %1070 = @func_2871() /* ty=Tensor[(6, 16, 11), float32] */;
    %1071 = %1040.0;
    %1072 = greater_equal(%1067, %1068) /* ty=Tensor[(13, 10, 16), bool] */;
    %1073 = log2(%1069) /* ty=Tensor[(13, 10, 16), float64] */;
    (%1070, %1071, %1072, %1073)
  };
  %1074(%var_5071) /* ty=(Tensor[(6, 16, 11), float32], Tensor[(6, 16, 11), float32], Tensor[(13, 10, 16), bool], Tensor[(13, 10, 16), float64]) */
}

def @func_7469() -> (Tensor[(6, 16, 11), float32],) {
  @func_7467() /* ty=(Tensor[(6, 16, 11), float32],) */
}

def @func_1705() -> (Tensor[(6, 16, 11), float32],) {
  %1075 = @func_1678() /* ty=(Tensor[(6, 16, 11), float32], Tensor[(14, 5, 6), bool], Tensor[(420), uint32]) */;
  %1076 = %1075.0;
  (%1076,)
}

def @func_1305(%var_1303: Tensor[(1, 8, 13), float64]) -> Tensor[(1, 8, 13), float64] {
  @func_1302(%var_1303) /* ty=Tensor[(1, 8, 13), float64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen402/build/output.py", line 2853, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:14:17] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

