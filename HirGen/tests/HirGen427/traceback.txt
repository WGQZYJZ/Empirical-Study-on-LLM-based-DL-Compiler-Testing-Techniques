==========mod==========
#[version = "0.0.5"]
def @func_7718() -> Tensor[(9, 12, 1), float64] {
  @func_7595() /* ty=Tensor[(9, 12, 1), float64] */
}

def @func_6246() -> (Tensor[(?, ?, 16), float32], Tensor[(?, ?, 16), float64]) {
  %0 = @func_5141() /* ty=(Tensor[(?, ?, 16), float32],) */;
  %1 = %0.0;
  %2 = cast(%1, dtype="float32") /* ty=Tensor[(?, ?, 16), float32] */;
  %3 = log10(%2) /* ty=Tensor[(?, ?, 16), float32] */;
  %4 = @func_4585() /* ty=Tensor[(?, ?, 16), float64] */;
  (%3, %4)
}

def @func_7567(%var_7564: Tensor[(3), float64]) -> (Tensor[(8, 2), float32], Tensor[(3, 1, 1), float64], Tensor[(3), float64]) {
  %5 = @func_4522() /* ty=(Tensor[(8, 2), float32],) */;
  %6 = cast(%var_7564, dtype="float64") /* ty=Tensor[(3), float64] */;
  %7 = reshape(%6, newshape=[3, 1, 1]) /* ty=Tensor[(3, 1, 1), float64] */;
  %8 = %5.0;
  %9 = @func_5094(%7) /* ty=Tensor[(3, 1, 1), float64] */;
  (%8, %9, %var_7564)
}

def @func_3348() -> Tensor[(12, 3, 1), float32] {
  %10 = cast(meta[relay.Constant][0] /* ty=Tensor[(12, 3, 1), float32] */, dtype="float32") /* ty=Tensor[(12, 3, 1), float32] */;
  %11 = asinh(%10) /* ty=Tensor[(12, 3, 1), float32] */;
  %12 = cast(%11, dtype="float32") /* ty=Tensor[(12, 3, 1), float32] */;
  cosh(%12) /* ty=Tensor[(12, 3, 1), float32] */
}

def @func_3558(%var_3556: Tensor[(468), float64]) -> (Tensor[(8, 2), float32], Tensor[(13, 4, 9), bool], Tensor[(468), float64]) {
  %13 = @func_2553() /* ty=(Tensor[(8, 2), float32],) */;
  %14 = cast(%var_3556, dtype="float64") /* ty=Tensor[(468), float64] */;
  %15 = cast(%var_3556, dtype="float64") /* ty=Tensor[(468), float64] */;
  %16 = reshape(%14, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
  %17 = reshape(%15, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
  %18 = %13.0;
  %19 = @func_733(%16, %17) /* ty=Tensor[(13, 4, 9), bool] */;
  (%18, %19, %var_3556)
}

def @func_2553() -> (Tensor[(8, 2), float32],) {
  %20 = @func_2260() /* ty=(Tensor[(8, 2), float32],) */;
  %21 = %20.0;
  (%21,)
}

def @func_2804() -> (Tensor[(?, ?, 16), float32], Tensor[(9, 12, 1), float64]) {
  %22 = @func_1692() /* ty=(Tensor[(9, 12, 1), float64], Tensor[(?, ?, 16), float32], float32, Tensor[(8, 2), float32]) */;
  %23 = %22.1;
  %24 = @func_1771() /* ty=Tensor[(9, 12, 1), float64] */;
  (%23, %24)
}

def @func_4987() -> Tensor[(8, 2), float32] {
  %25 = @func_3191() /* ty=(Tensor[(8, 2), float32],) */;
  %25.0
}

def @func_2436(%var_2399: Tensor[(15, 13, 4), int8], %var_2400: Tensor[(15, 13, 4), int8], %var_2416: Tensor[(15, 13, 4), int8]) -> (Tensor[(15, 13, 4), bool], Tensor[(15, 13, 4), uint64], Tensor[(15, 13, 4), float32]) {
  %26 = cast(%var_2400, dtype="bool") /* ty=Tensor[(15, 13, 4), bool] */;
  %27 = shape_of(%var_2399, dtype="int32") /* ty=Tensor[(3), int32] */;
  %28 = cast(%var_2399, dtype="bool") /* ty=Tensor[(15, 13, 4), bool] */;
  %29 = dyn.reshape(%26, %27, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %30 = cast(%var_2416, dtype="uint64") /* ty=Tensor[(15, 13, 4), uint64] */;
  %31 = shape_of(%var_2400, dtype="int32") /* ty=Tensor[(3), int32] */;
  %32 = cast(%var_2400, dtype="uint64") /* ty=Tensor[(15, 13, 4), uint64] */;
  %33 = dyn.reshape(%30, %31, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %34 = cast(%var_2416, dtype="float32") /* ty=Tensor[(15, 13, 4), float32] */;
  %35 = less(%28, %29) /* ty=Tensor[(15, 13, 4), bool] */;
  %36 = minimum(%32, %33) /* ty=Tensor[(15, 13, 4), uint64] */;
  %37 = cos(%34) /* ty=Tensor[(15, 13, 4), float32] */;
  (%35, %36, %37)
}

def @func_2895() -> Tensor[(8, 2), float32] {
  %38 = @func_2260() /* ty=(Tensor[(8, 2), float32],) */;
  %38.0
}

def @func_4522() -> (Tensor[(8, 2), float32],) {
  %39 = @func_3191() /* ty=(Tensor[(8, 2), float32],) */;
  %40 = %39.0;
  (%40,)
}

def @func_5141() -> (Tensor[(?, ?, 16), float32],) {
  %41 = @func_3913() /* ty=(Tensor[(?, ?, 16), float32],) */;
  %42 = %41.0;
  %43 = cast(%42, dtype="float32") /* ty=Tensor[(?, ?, 16), float32] */;
  %44 = cos(%43) /* ty=Tensor[(?, ?, 16), float32] */;
  (%44,)
}

def @func_369(%var_340: float32, %var_341: Tensor[(1, 1, 16), float32]) -> (Tensor[(3, 10, 12), float32], Tensor[(360), float32], Tensor[(?, ?, 16), float32]) {
  %45 = cast(meta[relay.Constant][1] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
  %46 = reshape(%45, newshape=[3, 10, 12]) /* ty=Tensor[(3, 10, 12), float32] */;
  %47 = cast(%var_340, dtype="float32") /* ty=float32 */;
  %48 = cast(%var_341, dtype="float32") /* ty=Tensor[(1, 1, 16), float32] */;
  %49 = divide(%47, %48) /* ty=Tensor[(1, 1, 16), float32] */;
  %50 = cast(%49, dtype="float64") /* ty=Tensor[(1, 1, 16), float64] */;
  %51 = exp(%50) /* ty=Tensor[(1, 1, 16), float64] */;
  %52 = cast(%51, dtype="float64") /* ty=Tensor[(1, 1, 16), float64] */;
  %53 = rsqrt(%52) /* ty=Tensor[(1, 1, 16), float64] */;
  %54 = cast(%51, dtype="float32") /* ty=Tensor[(1, 1, 16), float32] */;
  %55 = shape_of(%53, dtype="int32") /* ty=Tensor[(3), int32] */;
  %56 = cast(%53, dtype="float32") /* ty=Tensor[(1, 1, 16), float32] */;
  %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %58 = @func_50(%46) /* ty=Tensor[(3, 10, 12), float32] */;
  %59 = floor_divide(%56, %57) /* ty=Tensor[(?, ?, 16), float32] */;
  (%58, meta[relay.Constant][1] /* ty=Tensor[(360), float32] */, %59)
}

def @func_7088() -> Tensor[(8, 2), float32] {
  @func_6516() /* ty=Tensor[(8, 2), float32] */
}

def @func_7127(%var_7114: Tensor[(15, 3, 1), float64], %var_7123: Tensor[(54), float32]) -> (Tensor[(15, 3, 1), float64], Tensor[(27, 2), float32], Tensor[(54), float32]) {
  %60 = cast(%var_7114, dtype="float64") /* ty=Tensor[(15, 3, 1), float64] */;
  %61 = cast(%var_7123, dtype="float32") /* ty=Tensor[(54), float32] */;
  %62 = reshape(%61, newshape=[27, 2]) /* ty=Tensor[(27, 2), float32] */;
  %63 = @func_2631(%62) /* ty=(Tensor[(8, 2), float32], Tensor[(6, 3, 3), float32], Tensor[(27, 2), float32]) */;
  %64 = atanh(%60) /* ty=Tensor[(15, 3, 1), float64] */;
  %65 = %63.2;
  (%64, %65, %var_7123)
}

def @func_5048() -> (Tensor[(8, 2), float32],) {
  %66 = @func_2895() /* ty=Tensor[(8, 2), float32] */;
  (%66,)
}

def @func_2984(%var_2962: Tensor[(16, 10, 6), float64], %var_2968: Tensor[(16, 10, 6), float64]) -> Tensor[(16, 10, 6), uint64] {
  %67 = cast(%var_2962, dtype="float64") /* ty=Tensor[(16, 10, 6), float64] */;
  %68 = atan(%67) /* ty=Tensor[(16, 10, 6), float64] */;
  %69 = cast(%var_2968, dtype="uint64") /* ty=Tensor[(16, 10, 6), uint64] */;
  %70 = shape_of(%68, dtype="int32") /* ty=Tensor[(3), int32] */;
  %71 = cast(%68, dtype="uint64") /* ty=Tensor[(16, 10, 6), uint64] */;
  %72 = dyn.reshape(%69, %70, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  subtract(%71, %72) /* ty=Tensor[(16, 10, 6), uint64] */
}

def @func_2080(%var_2059: Tensor[(9, 12, 3), float64]) -> (Tensor[(9, 12, 3), int32],) {
  %73 = @func_1771() /* ty=Tensor[(9, 12, 1), float64] */;
  %74 = cast(%73, dtype="int32") /* ty=Tensor[(9, 12, 1), int32] */;
  %75 = cast(%var_2059, dtype="int32") /* ty=Tensor[(9, 12, 3), int32] */;
  %76 = left_shift(%74, %75) /* ty=Tensor[(9, 12, 3), int32] */;
  %77 = cast(%73, dtype="int32") /* ty=Tensor[(9, 12, 1), int32] */;
  %78 = cast(%76, dtype="int32") /* ty=Tensor[(9, 12, 3), int32] */;
  %79 = bitwise_or(%77, %78) /* ty=Tensor[(9, 12, 3), int32] */;
  (%79,)
}

def @func_813(%var_804: Tensor[(6, 3, 3), float32]) -> (Tensor[(6, 3, 3), float32],) {
  %80 = cast(%var_804, dtype="float32") /* ty=Tensor[(6, 3, 3), float32] */;
  %81 = log(%80) /* ty=Tensor[(6, 3, 3), float32] */;
  (%81,)
}

def @func_3700() -> Tensor[(9, 12, 1), float64] {
  %82 = @func_2172() /* ty=(Tensor[(9, 12, 1), float64],) */;
  %82.0
}

def @func_3766() -> Tensor[(9, 12, 1), float32] {
  %83 = @func_1891() /* ty=(Tensor[(9, 12, 1), float64],) */;
  %84 = %83.0;
  %85 = cast(%84, dtype="float32") /* ty=Tensor[(9, 12, 1), float32] */;
  rsqrt(%85) /* ty=Tensor[(9, 12, 1), float32] */
}

def @func_4682() -> Tensor[(8, 2), float32] {
  %86 = @func_4522() /* ty=(Tensor[(8, 2), float32],) */;
  %86.0
}

def @func_6898() -> (Tensor[(9, 12, 1), float64],) {
  %87 = @func_3700() /* ty=Tensor[(9, 12, 1), float64] */;
  (%87,)
}

def @func_6294(%var_6264: Tensor[(80), int8]) -> (Tensor[(?, ?, 16), float32], Tensor[(80), int8], Tensor[(1080), bool]) {
  %88 = @func_2804() /* ty=(Tensor[(?, ?, 16), float32], Tensor[(9, 12, 1), float64]) */;
  %89 = cast(%var_6264, dtype="int8") /* ty=Tensor[(80), int8] */;
  %90 = reshape(%89, newshape=[4, 4, 5]) /* ty=Tensor[(4, 4, 5), int8] */;
  %91 = @func_4801(%90) /* ty=(Tensor[(4, 4, 5), bool], Tensor[(360), float32], Tensor[(540), float64], Tensor[(9, 12, 1), float32], Tensor[(1080), float32]) */;
  %92 = %91.4;
  %93 = cast(meta[relay.Constant][2] /* ty=Tensor[(1080), float32] */, dtype="bool") /* ty=Tensor[(1080), bool] */;
  %94 = shape_of(%92, dtype="int32") /* ty=Tensor[(1), int32] */;
  %95 = cast(%92, dtype="bool") /* ty=Tensor[(1080), bool] */;
  %96 = dyn.reshape(%93, %94, newshape=[]) /* ty=Tensor[(?), bool] */;
  %97 = %88.0;
  %98 = less(%95, %96) /* ty=Tensor[(1080), bool] */;
  (%97, %var_6264, %98)
}

def @func_5576() -> (Tensor[(54), float32],) {
  %99 = @func_4501() /* ty=Tensor[(54), float32] */;
  (%99,)
}

def @func_3913() -> (Tensor[(?, ?, 16), float32],) {
  %100 = @func_1692() /* ty=(Tensor[(9, 12, 1), float64], Tensor[(?, ?, 16), float32], float32, Tensor[(8, 2), float32]) */;
  %101 = %100.1;
  (%101,)
}

def @func_5660() -> Tensor[(13, 10, 11), float64] {
  %102 = cast(meta[relay.Constant][3] /* ty=Tensor[(13, 10, 11), float64] */, dtype="float64") /* ty=Tensor[(13, 10, 11), float64] */;
  acos(%102) /* ty=Tensor[(13, 10, 11), float64] */
}

def @func_3992(%var_3954: Tensor[(3, 10, 16), float64]) -> Tensor[(3, 10, 16), float64] {
  %103 = cast(%var_3954, dtype="float64") /* ty=Tensor[(3, 10, 16), float64] */;
  exp(%103) /* ty=Tensor[(3, 10, 16), float64] */
}

def @func_5343() -> (Tensor[(8, 2), float32],) {
  %104 = @func_3524() /* ty=Tensor[(8, 2), float32] */;
  (%104,)
}

def @func_733(%var_718: Tensor[(13, 4, 9), float64], %var_719: Tensor[(13, 4, 9), float64]) -> Tensor[(13, 4, 9), bool] {
  %105 = cast(%var_719, dtype="bool") /* ty=Tensor[(13, 4, 9), bool] */;
  %106 = shape_of(%var_718, dtype="int32") /* ty=Tensor[(3), int32] */;
  %107 = cast(%var_718, dtype="bool") /* ty=Tensor[(13, 4, 9), bool] */;
  %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%107, %108) /* ty=Tensor[(13, 4, 9), bool] */
}

def @func_4061(%var_4059: Tensor[(54), float32]) -> (Tensor[(9, 12, 1), float32], Tensor[(12, 3, 1), float32], Tensor[(6, 3, 3), float32], Tensor[(54), float32]) {
  %109 = @func_3348() /* ty=Tensor[(12, 3, 1), float32] */;
  %110 = cast(%109, dtype="float32") /* ty=Tensor[(12, 3, 1), float32] */;
  %111 = cast(%var_4059, dtype="float32") /* ty=Tensor[(54), float32] */;
  %112 = reshape(%111, newshape=[6, 3, 3]) /* ty=Tensor[(6, 3, 3), float32] */;
  %113 = @func_813(%112) /* ty=(Tensor[(6, 3, 3), float32],) */;
  %114 = @func_3766() /* ty=Tensor[(9, 12, 1), float32] */;
  %115 = acosh(%110) /* ty=Tensor[(12, 3, 1), float32] */;
  %116 = %113.0;
  (%114, %115, %116, %var_4059)
}

def @func_6321() -> Tensor[(9, 12, 1), float64] {
  %117 = @func_1692() /* ty=(Tensor[(9, 12, 1), float64], Tensor[(?, ?, 16), float32], float32, Tensor[(8, 2), float32]) */;
  %117.0
}

def @func_6385() -> Tensor[(9, 12, 1), float64] {
  %118 = @func_2172() /* ty=(Tensor[(9, 12, 1), float64],) */;
  %118.0
}

def @func_5476(%var_5453: Tensor[(16, 9, 12), float64]) -> (Tensor[(16, 9, 12), float64],) {
  %119 = cast(%var_5453, dtype="float64") /* ty=Tensor[(16, 9, 12), float64] */;
  %120 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(16, 9, 12), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %121 = cast(meta[relay.Constant][4] /* ty=Tensor[(16, 9, 12), float64] */, dtype="float64") /* ty=Tensor[(16, 9, 12), float64] */;
  %122 = dyn.reshape(%119, %120, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %123 = maximum(%121, %122) /* ty=Tensor[(16, 9, 12), float64] */;
  (%123,)
}

def @func_6611(%var_6590: int32) -> (Tensor[(5, 12, 6), float32], Tensor[(9, 13, 1), int32], int32, Tensor[(5, 12, 6), float32]) {
  %124 = cast(meta[relay.Constant][5] /* ty=Tensor[(5, 12, 6), float32] */, dtype="float32") /* ty=Tensor[(5, 12, 6), float32] */;
  %125 = log2(%124) /* ty=Tensor[(5, 12, 6), float32] */;
  %126 = cast(%125, dtype="float32") /* ty=Tensor[(5, 12, 6), float32] */;
  %127 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(5, 12, 6), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %128 = cast(meta[relay.Constant][5] /* ty=Tensor[(5, 12, 6), float32] */, dtype="float32") /* ty=Tensor[(5, 12, 6), float32] */;
  %129 = dyn.reshape(%126, %127, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %130 = cast(%var_6590, dtype="int32") /* ty=int32 */;
  %131 = reshape(%130, newshape=[]) /* ty=int32 */;
  %132 = cast(%125, dtype="float32") /* ty=Tensor[(5, 12, 6), float32] */;
  %133 = power(%128, %129) /* ty=Tensor[(5, 12, 6), float32] */;
  %134 = @func_2374(%131) /* ty=Tensor[(9, 13, 1), int32] */;
  %135 = log(%132) /* ty=Tensor[(5, 12, 6), float32] */;
  (%133, %134, %var_6590, %135)
}

def @func_6213(%var_6134: Tensor[(9, 12, 1), int8]) -> (Tensor[(9, 12, ?), int16], Tensor[(8, 2), float32], Tensor[(?, ?, 16), float64], Tensor[(?, ?, 16), float32], Tensor[(9, 12, 1), float64], Tensor[(?, ?, 16), float64], Tensor[(?, ?, 16), float32]) {
  %136 = @func_3766() /* ty=Tensor[(9, 12, 1), float32] */;
  %137 = cast(%136, dtype="float64") /* ty=Tensor[(9, 12, 1), float64] */;
  %138 = asinh(%137) /* ty=Tensor[(9, 12, 1), float64] */;
  %139 = cast(%136, dtype="int8") /* ty=Tensor[(9, 12, 1), int8] */;
  %140 = shape_of(%138, dtype="int32") /* ty=Tensor[(3), int32] */;
  %141 = cast(%138, dtype="int8") /* ty=Tensor[(9, 12, 1), int8] */;
  %142 = dyn.reshape(%139, %140, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %143 = bitwise_xor(%141, %142) /* ty=Tensor[(9, 12, ?), int8] */;
  %144 = cast(%var_6134, dtype="int16") /* ty=Tensor[(9, 12, 1), int16] */;
  %145 = shape_of(%143, dtype="int32") /* ty=Tensor[(3), int32] */;
  %146 = cast(%143, dtype="int16") /* ty=Tensor[(9, 12, ?), int16] */;
  %147 = dyn.reshape(%144, %145, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %148 = @func_5048() /* ty=(Tensor[(8, 2), float32],) */;
  %149 = @func_3913() /* ty=(Tensor[(?, ?, 16), float32],) */;
  %150 = @func_4104() /* ty=(Tensor[(9, 12, 1), float64],) */;
  %151 = @func_2804() /* ty=(Tensor[(?, ?, 16), float32], Tensor[(9, 12, 1), float64]) */;
  %152 = minimum(%146, %147) /* ty=Tensor[(9, 12, ?), int16] */;
  %153 = %148.0;
  %154 = @func_4585() /* ty=Tensor[(?, ?, 16), float64] */;
  %155 = %149.0;
  %156 = %150.0;
  %157 = @func_4585() /* ty=Tensor[(?, ?, 16), float64] */;
  %158 = %151.0;
  (%152, %153, %154, %155, %156, %157, %158)
}

def @func_3266(%var_3264: Tensor[(540), float64]) -> (float32, Tensor[(540), float64], Tensor[(540), float64]) {
  %159 = @func_2472() /* ty=(float32, Tensor[(9, 12, 1), float32]) */;
  %160 = cast(%var_3264, dtype="float64") /* ty=Tensor[(540), float64] */;
  %161 = reshape(%160, newshape=[540]) /* ty=Tensor[(540), float64] */;
  %162 = @func_2868(%161) /* ty=(Tensor[(8, 2), float32], Tensor[(360), float32], Tensor[(540), float64], Tensor[(27, 2), float32], Tensor[(54), float32]) */;
  %163 = %159.0;
  %164 = %162.2;
  (%163, %164, %var_3264)
}

def @func_7469(%var_7392: Tensor[(648), float64], %var_7453: int32) -> (Tensor[(8, 2), float32], Tensor[(54), float32], Tensor[(648), float64], Tensor[(8, 2), float32], int32) {
  %165 = @func_2553() /* ty=(Tensor[(8, 2), float32],) */;
  %166 = cast(%var_7392, dtype="float64") /* ty=Tensor[(648), float64] */;
  %167 = reshape(%166, newshape=[9, 12, 6]) /* ty=Tensor[(9, 12, 6), float64] */;
  %168 = @func_6440(%167) /* ty=(Tensor[(9, 12, 6), bool], Tensor[(54), float32]) */;
  %169 = cast(%var_7392, dtype="float64") /* ty=Tensor[(648), float64] */;
  %170 = cast(%var_7453, dtype="int32") /* ty=int32 */;
  %171 = reshape(%170, newshape=[]) /* ty=int32 */;
  %172 = @func_6341(%171) /* ty=(Tensor[(8, 2), float32], Tensor[(9, 13, 1), int32], int32) */;
  %173 = %165.0;
  %174 = %168.1;
  %175 = atanh(%169) /* ty=Tensor[(648), float64] */;
  %176 = %172.0;
  (%173, %174, %175, %176, %var_7453)
}

def @func_5535() -> (Tensor[(9, 12, 1), float64],) {
  %177 = @func_1891() /* ty=(Tensor[(9, 12, 1), float64],) */;
  %178 = %177.0;
  (%178,)
}

def @func_2631(%var_2618: Tensor[(27, 2), float32]) -> (Tensor[(8, 2), float32], Tensor[(6, 3, 3), float32], Tensor[(27, 2), float32]) {
  %179 = @func_1692() /* ty=(Tensor[(9, 12, 1), float64], Tensor[(?, ?, 16), float32], float32, Tensor[(8, 2), float32]) */;
  %180 = cast(%var_2618, dtype="float32") /* ty=Tensor[(27, 2), float32] */;
  %181 = reshape(%180, newshape=[6, 3, 3]) /* ty=Tensor[(6, 3, 3), float32] */;
  %182 = @func_813(%181) /* ty=(Tensor[(6, 3, 3), float32],) */;
  %183 = cast(%var_2618, dtype="float32") /* ty=Tensor[(27, 2), float32] */;
  %184 = %179.3;
  %185 = %182.0;
  %186 = tan(%183) /* ty=Tensor[(27, 2), float32] */;
  (%184, %185, %186)
}

def @func_5879(%var_5860: Tensor[(324), float64], %var_5866: Tensor[(9, 12, 16), float64]) -> (Tensor[(8, 2), float32], Tensor[(3, 10, 16), float64], Tensor[(480), float64], Tensor[(324), uint64], Tensor[(9, 12, 16), int16], Tensor[(8, 2), float32], Tensor[(54), float32]) {
  %187 = cast(meta[relay.Constant][6] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %188 = reshape(%187, newshape=[3, 10, 16]) /* ty=Tensor[(3, 10, 16), float64] */;
  %189 = @func_3629() /* ty=(Tensor[(8, 2), float32], Tensor[(324), float64], Tensor[(54), float32], Tensor[(12, 3, 15), bool]) */;
  %190 = %189.1;
  %191 = cast(%var_5860, dtype="uint64") /* ty=Tensor[(324), uint64] */;
  %192 = shape_of(%190, dtype="int32") /* ty=Tensor[(1), int32] */;
  %193 = cast(%190, dtype="uint64") /* ty=Tensor[(324), uint64] */;
  %194 = dyn.reshape(%191, %192, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %195 = @func_1771() /* ty=Tensor[(9, 12, 1), float64] */;
  %196 = cast(%195, dtype="int16") /* ty=Tensor[(9, 12, 1), int16] */;
  %197 = cast(%var_5866, dtype="int16") /* ty=Tensor[(9, 12, 16), int16] */;
  %198 = right_shift(%193, %194) /* ty=Tensor[(324), uint64] */;
  %199 = cast(%198, dtype="float64") /* ty=Tensor[(324), float64] */;
  %200 = cast(meta[relay.Constant][7] /* ty=Tensor[(54), float32] */, dtype="float32") /* ty=Tensor[(54), float32] */;
  %201 = reshape(%199, newshape=[9, 36]) /* ty=Tensor[(9, 36), float64] */;
  %202 = reshape(%200, newshape=[9, 6]) /* ty=Tensor[(9, 6), float32] */;
  %203 = @func_3454(%201, %202) /* ty=(Tensor[(8, 2), float32], Tensor[(8, 2), float32], Tensor[(12, 3, ?), float32], Tensor[(9, 12, 1), float32], Tensor[(9, 36), float64], Tensor[(13, 4, 9), bool], Tensor[(1728), float64], Tensor[(9, 6), float32], Tensor[(8, 2), float32]) */;
  %204 = @func_4682() /* ty=Tensor[(8, 2), float32] */;
  %205 = @func_3992(%188) /* ty=Tensor[(3, 10, 16), float64] */;
  %206 = right_shift(%196, %197) /* ty=Tensor[(9, 12, 16), int16] */;
  %207 = %203.8;
  (%204, %205, meta[relay.Constant][6] /* ty=Tensor[(480), float64] */, %198, %206, %207, meta[relay.Constant][7] /* ty=Tensor[(54), float32] */)
}

def @func_3142(%var_3140: Tensor[(324), float64]) -> (Tensor[(9, 12, 1), float32], Tensor[(9, 12, 3), int32], Tensor[(324), float64]) {
  %208 = cast(%var_3140, dtype="float64") /* ty=Tensor[(324), float64] */;
  %209 = reshape(%208, newshape=[9, 12, 3]) /* ty=Tensor[(9, 12, 3), float64] */;
  %210 = @func_2080(%209) /* ty=(Tensor[(9, 12, 3), int32],) */;
  %211 = @func_2499() /* ty=Tensor[(9, 12, 1), float32] */;
  %212 = %210.0;
  (%211, %212, %var_3140)
}

def @func_7318() -> (Tensor[(9, 12, 1), float64], Tensor[(9, 12, 1), float64]) {
  %213 = @func_7067() /* ty=(Tensor[(54), float32], Tensor[(9, 12, 1), float64]) */;
  %214 = @func_6983() /* ty=(Tensor[(9, 12, 1), float32],) */;
  %215 = %214.0;
  %216 = cast(%215, dtype="float64") /* ty=Tensor[(9, 12, 1), float64] */;
  %217 = %213.1;
  %218 = sin(%216) /* ty=Tensor[(9, 12, 1), float64] */;
  (%217, %218)
}

def @func_6341(%var_6331: int32) -> (Tensor[(8, 2), float32], Tensor[(9, 13, 1), int32], int32) {
  %219 = @func_5267() /* ty=(Tensor[(8, 2), float32], Tensor[(7800), float32]) */;
  %220 = cast(%var_6331, dtype="int32") /* ty=int32 */;
  %221 = reshape(%220, newshape=[]) /* ty=int32 */;
  %222 = %219.0;
  %223 = @func_2374(%221) /* ty=Tensor[(9, 13, 1), int32] */;
  (%222, %223, %var_6331)
}

def @func_7157() -> Tensor[(8, 2), float32] {
  %224 = @func_5343() /* ty=(Tensor[(8, 2), float32],) */;
  %224.0
}

def @func_2868(%var_2831: Tensor[(540), float64]) -> (Tensor[(8, 2), float32], Tensor[(360), float32], Tensor[(540), float64], Tensor[(27, 2), float32], Tensor[(54), float32]) {
  %225 = @func_2553() /* ty=(Tensor[(8, 2), float32],) */;
  %226 = cast(%var_2831, dtype="float64") /* ty=Tensor[(540), float64] */;
  %227 = %225.0;
  %228 = cast(%227, dtype="float32") /* ty=Tensor[(8, 2), float32] */;
  %229 = reshape(%226, newshape=[9, 12, 5]) /* ty=Tensor[(9, 12, 5), float64] */;
  %230 = reshape(%228, newshape=[16]) /* ty=Tensor[(16), float32] */;
  %231 = @func_1984(%229, %230) /* ty=(Tensor[(9, 12, 5), float64], Tensor[(360), float32], float32, Tensor[(16), float32]) */;
  %232 = cast(meta[relay.Constant][8] /* ty=Tensor[(54), float32] */, dtype="float32") /* ty=Tensor[(54), float32] */;
  %233 = reshape(%232, newshape=[27, 2]) /* ty=Tensor[(27, 2), float32] */;
  %234 = @func_2631(%233) /* ty=(Tensor[(8, 2), float32], Tensor[(6, 3, 3), float32], Tensor[(27, 2), float32]) */;
  %235 = %231.1;
  %236 = %234.2;
  (%227, %235, %var_2831, %236, meta[relay.Constant][8] /* ty=Tensor[(54), float32] */)
}

def @func_4165(%var_4150: Tensor[(9, 12, 11), float64]) -> (Tensor[(9, 12, 11), float32],) {
  %237 = @func_3700() /* ty=Tensor[(9, 12, 1), float64] */;
  %238 = cast(%237, dtype="float32") /* ty=Tensor[(9, 12, 1), float32] */;
  %239 = cast(%var_4150, dtype="float32") /* ty=Tensor[(9, 12, 11), float32] */;
  %240 = mod(%238, %239) /* ty=Tensor[(9, 12, 11), float32] */;
  (%240,)
}

def @func_50(%var_42: Tensor[(3, 10, 12), float32]) -> Tensor[(3, 10, 12), float32] {
  %241 = cast(meta[relay.Constant][9] /* ty=Tensor[(3, 10, 12), float32] */, dtype="float32") /* ty=Tensor[(3, 10, 12), float32] */;
  %242 = shape_of(%var_42, dtype="int32") /* ty=Tensor[(3), int32] */;
  %243 = cast(%var_42, dtype="float32") /* ty=Tensor[(3, 10, 12), float32] */;
  %244 = dyn.reshape(%241, %242, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  mod(%243, %244) /* ty=Tensor[(3, 10, 12), float32] */
}

def @func_3629() -> (Tensor[(8, 2), float32], Tensor[(324), float64], Tensor[(54), float32], Tensor[(12, 3, 15), bool]) {
  %245 = cast(meta[relay.Constant][10] /* ty=Tensor[(324), float64] */, dtype="float64") /* ty=Tensor[(324), float64] */;
  %246 = cast(meta[relay.Constant][11] /* ty=Tensor[(54), float32] */, dtype="float32") /* ty=Tensor[(54), float32] */;
  %247 = reshape(%245, newshape=[9, 36]) /* ty=Tensor[(9, 36), float64] */;
  %248 = reshape(%246, newshape=[9, 6]) /* ty=Tensor[(9, 6), float32] */;
  %249 = @func_3454(%247, %248) /* ty=(Tensor[(8, 2), float32], Tensor[(8, 2), float32], Tensor[(12, 3, ?), float32], Tensor[(9, 12, 1), float32], Tensor[(9, 36), float64], Tensor[(13, 4, 9), bool], Tensor[(1728), float64], Tensor[(9, 6), float32], Tensor[(8, 2), float32]) */;
  %250 = @func_3348() /* ty=Tensor[(12, 3, 1), float32] */;
  %251 = cast(%250, dtype="bool") /* ty=Tensor[(12, 3, 1), bool] */;
  %252 = cast(meta[relay.Constant][12] /* ty=Tensor[(12, 3, 15), float32] */, dtype="bool") /* ty=Tensor[(12, 3, 15), bool] */;
  %253 = %249.0;
  %254 = greater_equal(%251, %252) /* ty=Tensor[(12, 3, 15), bool] */;
  (%253, meta[relay.Constant][10] /* ty=Tensor[(324), float64] */, meta[relay.Constant][11] /* ty=Tensor[(54), float32] */, %254)
}

def @func_4585() -> Tensor[(?, ?, 16), float64] {
  %255 = @func_3913() /* ty=(Tensor[(?, ?, 16), float32],) */;
  %256 = %255.0;
  %257 = cast(meta[relay.Constant][13] /* ty=Tensor[(1, 1, 16), float32] */, dtype="float64") /* ty=Tensor[(1, 1, 16), float64] */;
  %258 = shape_of(%256, dtype="int32") /* ty=Tensor[(3), int32] */;
  %259 = cast(%256, dtype="float64") /* ty=Tensor[(?, ?, 16), float64] */;
  %260 = dyn.reshape(%257, %258, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%259, %260) /* ty=Tensor[(?, ?, 16), float64] */
}

def @func_7354() -> Tensor[(54), float32] {
  %261 = @func_5576() /* ty=(Tensor[(54), float32],) */;
  %261.0
}

def @func_5958() -> (Tensor[(?, ?, 16), float64], Tensor[(9, 12, 1), float64], Tensor[(8, 2), float32]) {
  %262 = @func_4522() /* ty=(Tensor[(8, 2), float32],) */;
  %263 = @func_4585() /* ty=Tensor[(?, ?, 16), float64] */;
  %264 = @func_1771() /* ty=Tensor[(9, 12, 1), float64] */;
  %265 = %262.0;
  (%263, %264, %265)
}

def @func_7107() -> Tensor[(7800), bool] {
  %266 = @func_6557() /* ty=Tensor[(7800), int16] */;
  %267 = cast(meta[relay.Constant][14] /* ty=Tensor[(7800), int16] */, dtype="bool") /* ty=Tensor[(7800), bool] */;
  %268 = shape_of(%266, dtype="int32") /* ty=Tensor[(1), int32] */;
  %269 = cast(%266, dtype="bool") /* ty=Tensor[(7800), bool] */;
  %270 = dyn.reshape(%267, %268, newshape=[]) /* ty=Tensor[(?), bool] */;
  not_equal(%269, %270) /* ty=Tensor[(7800), bool] */
}

def @func_7067() -> (Tensor[(54), float32], Tensor[(9, 12, 1), float64]) {
  %271 = @func_5576() /* ty=(Tensor[(54), float32],) */;
  %272 = @func_5958() /* ty=(Tensor[(?, ?, 16), float64], Tensor[(9, 12, 1), float64], Tensor[(8, 2), float32]) */;
  %273 = %271.0;
  %274 = %272.1;
  (%273, %274)
}

def @func_935(%var_856: Tensor[(9, 16, 12), float64], %var_887: Tensor[(9, 16, 12), float64], %var_897: Tensor[(54), float32]) -> (Tensor[(9, 16, 12), int8], Tensor[(13, 4, 9), bool], Tensor[(6, 78), float64], Tensor[(6, 3, 3), float32], Tensor[(54), float32], Tensor[(9, 16, 12), float64], Tensor[(13, 4, 9), bool], Tensor[(9, 16, 12), float64], Tensor[(6, 3, 3), float32]) {
  %275 = cast(%var_856, dtype="float64") /* ty=Tensor[(9, 16, 12), float64] */;
  %276 = tan(%275) /* ty=Tensor[(9, 16, 12), float64] */;
  %277 = cast(%var_856, dtype="int8") /* ty=Tensor[(9, 16, 12), int8] */;
  %278 = shape_of(%276, dtype="int32") /* ty=Tensor[(3), int32] */;
  %279 = cast(%276, dtype="int8") /* ty=Tensor[(9, 16, 12), int8] */;
  %280 = dyn.reshape(%277, %278, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %281 = cast(meta[relay.Constant][15] /* ty=Tensor[(6, 78), float64] */, dtype="float64") /* ty=Tensor[(6, 78), float64] */;
  %282 = cast(meta[relay.Constant][15] /* ty=Tensor[(6, 78), float64] */, dtype="float64") /* ty=Tensor[(6, 78), float64] */;
  %283 = reshape(%281, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
  %284 = reshape(%282, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
  %285 = cast(%var_897, dtype="float32") /* ty=Tensor[(54), float32] */;
  %286 = reshape(%285, newshape=[6, 3, 3]) /* ty=Tensor[(6, 3, 3), float32] */;
  %287 = @func_813(%286) /* ty=(Tensor[(6, 3, 3), float32],) */;
  %288 = cast(%276, dtype="float64") /* ty=Tensor[(9, 16, 12), float64] */;
  %289 = cos(%288) /* ty=Tensor[(9, 16, 12), float64] */;
  %290 = cast(%var_887, dtype="uint16") /* ty=Tensor[(9, 16, 12), uint16] */;
  %291 = shape_of(%289, dtype="int32") /* ty=Tensor[(3), int32] */;
  %292 = cast(%289, dtype="uint16") /* ty=Tensor[(9, 16, 12), uint16] */;
  %293 = dyn.reshape(%290, %291, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %294 = subtract(%292, %293) /* ty=Tensor[(9, 16, 12), uint16] */;
  %295 = cast(%294, dtype="float64") /* ty=Tensor[(9, 16, 12), float64] */;
  %296 = @func_733(%283, %284) /* ty=Tensor[(13, 4, 9), bool] */;
  %297 = cast(%296, dtype="float64") /* ty=Tensor[(13, 4, 9), float64] */;
  %298 = cast(%296, dtype="float64") /* ty=Tensor[(13, 4, 9), float64] */;
  %299 = reshape(%297, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
  %300 = reshape(%298, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
  %301 = cast(%276, dtype="float64") /* ty=Tensor[(9, 16, 12), float64] */;
  %302 = cast(%var_897, dtype="float32") /* ty=Tensor[(54), float32] */;
  %303 = reshape(%302, newshape=[6, 3, 3]) /* ty=Tensor[(6, 3, 3), float32] */;
  %304 = @func_813(%303) /* ty=(Tensor[(6, 3, 3), float32],) */;
  %305 = multiply(%279, %280) /* ty=Tensor[(9, 16, 12), int8] */;
  %306 = %287.0;
  %307 = sigmoid(%295) /* ty=Tensor[(9, 16, 12), float64] */;
  %308 = @func_733(%299, %300) /* ty=Tensor[(13, 4, 9), bool] */;
  %309 = rsqrt(%301) /* ty=Tensor[(9, 16, 12), float64] */;
  %310 = %304.0;
  (%305, %296, meta[relay.Constant][15] /* ty=Tensor[(6, 78), float64] */, %306, %var_897, %307, %308, %309, %310)
}

def @func_4801(%var_4772: Tensor[(4, 4, 5), int8]) -> (Tensor[(4, 4, 5), bool], Tensor[(360), float32], Tensor[(540), float64], Tensor[(9, 12, 1), float32], Tensor[(1080), float32]) {
  %311 = cast(meta[relay.Constant][16] /* ty=Tensor[(4, 4, 1), int8] */, dtype="bool") /* ty=Tensor[(4, 4, 1), bool] */;
  %312 = cast(%var_4772, dtype="bool") /* ty=Tensor[(4, 4, 5), bool] */;
  %313 = cast(meta[relay.Constant][17] /* ty=Tensor[(540), float64] */, dtype="float64") /* ty=Tensor[(540), float64] */;
  %314 = reshape(%313, newshape=[540]) /* ty=Tensor[(540), float64] */;
  %315 = @func_2868(%314) /* ty=(Tensor[(8, 2), float32], Tensor[(360), float32], Tensor[(540), float64], Tensor[(27, 2), float32], Tensor[(54), float32]) */;
  %316 = %315.1;
  %317 = cast(%316, dtype="float32") /* ty=Tensor[(360), float32] */;
  %318 = cast(meta[relay.Constant][18] /* ty=Tensor[(1080), float32] */, dtype="float32") /* ty=Tensor[(1080), float32] */;
  %319 = reshape(%317, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %320 = reshape(%318, newshape=[9, 12, 10]) /* ty=Tensor[(9, 12, 10), float32] */;
  %321 = @func_4359(%319, %320) /* ty=(Tensor[(9, 12, 1), float32], Tensor[(3, 10, 12), float32], Tensor[(360), float32], Tensor[(9, 12, 10), bool]) */;
  %322 = less_equal(%311, %312) /* ty=Tensor[(4, 4, 5), bool] */;
  %323 = %321.0;
  (%322, %316, meta[relay.Constant][17] /* ty=Tensor[(540), float64] */, %323, meta[relay.Constant][18] /* ty=Tensor[(1080), float32] */)
}

def @func_2344(%var_2299: Tensor[(4, 12, 1), float64], %var_2320: Tensor[(4, 12, 15), float64]) -> (Tensor[(4, 12, 1), float64], Tensor[(4, 12, 15), float64]) {
  %324 = cast(%var_2299, dtype="float64") /* ty=Tensor[(4, 12, 1), float64] */;
  %325 = cast(%var_2299, dtype="float32") /* ty=Tensor[(4, 12, 1), float32] */;
  %326 = cast(%var_2320, dtype="float32") /* ty=Tensor[(4, 12, 15), float32] */;
  %327 = power(%325, %326) /* ty=Tensor[(4, 12, 15), float32] */;
  %328 = cast(%327, dtype="float64") /* ty=Tensor[(4, 12, 15), float64] */;
  %329 = cos(%328) /* ty=Tensor[(4, 12, 15), float64] */;
  %330 = cast(%329, dtype="float64") /* ty=Tensor[(4, 12, 15), float64] */;
  %331 = asin(%324) /* ty=Tensor[(4, 12, 1), float64] */;
  %332 = acosh(%330) /* ty=Tensor[(4, 12, 15), float64] */;
  (%331, %332)
}

def @func_5267() -> (Tensor[(8, 2), float32], Tensor[(7800), float32]) {
  %333 = @func_4258() /* ty=(Tensor[(8, 2), float32], Tensor[(15, 13, 4), uint64], Tensor[(7800), int8], float32) */;
  %334 = %333.2;
  %335 = cast(%334, dtype="float32") /* ty=Tensor[(7800), float32] */;
  %336 = @func_4682() /* ty=Tensor[(8, 2), float32] */;
  %337 = atan(%335) /* ty=Tensor[(7800), float32] */;
  (%336, %337)
}

def @func_4501() -> Tensor[(54), float32] {
  %338 = @func_3629() /* ty=(Tensor[(8, 2), float32], Tensor[(324), float64], Tensor[(54), float32], Tensor[(12, 3, 15), bool]) */;
  %338.2
}

def @func_7595() -> Tensor[(9, 12, 1), float64] {
  %339 = @func_1891() /* ty=(Tensor[(9, 12, 1), float64],) */;
  %339.0
}

def @func_2260() -> (Tensor[(8, 2), float32],) {
  %340 = @func_1692() /* ty=(Tensor[(9, 12, 1), float64], Tensor[(?, ?, 16), float32], float32, Tensor[(8, 2), float32]) */;
  %341 = %340.3;
  (%341,)
}

def @func_5094(%var_5087: Tensor[(3, 1, 1), float64]) -> Tensor[(3, 1, 1), float64] {
  %342 = cast(%var_5087, dtype="float64") /* ty=Tensor[(3, 1, 1), float64] */;
  acosh(%342) /* ty=Tensor[(3, 1, 1), float64] */
}

def @func_7242() -> (Tensor[(108), int8], Tensor[(9, 12, 1), float32], Tensor[(8, 2), float32], Tensor[(?, ?, 16), float32]) {
  %343 = cast(meta[relay.Constant][19] /* ty=Tensor[(108), int8] */, dtype="int8") /* ty=Tensor[(108), int8] */;
  %344 = reshape(%343, newshape=[9, 12, 1]) /* ty=Tensor[(9, 12, 1), int8] */;
  %345 = @func_6213(%344) /* ty=(Tensor[(9, 12, ?), int16], Tensor[(8, 2), float32], Tensor[(?, ?, 16), float64], Tensor[(?, ?, 16), float32], Tensor[(9, 12, 1), float64], Tensor[(?, ?, 16), float64], Tensor[(?, ?, 16), float32]) */;
  %346 = %345.6;
  %347 = @func_4585() /* ty=Tensor[(?, ?, 16), float64] */;
  %348 = cast(%347, dtype="float32") /* ty=Tensor[(?, ?, 16), float32] */;
  %349 = shape_of(%346, dtype="int32") /* ty=Tensor[(3), int32] */;
  %350 = cast(%346, dtype="float32") /* ty=Tensor[(?, ?, 16), float32] */;
  %351 = dyn.reshape(%348, %349, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %352 = @func_2499() /* ty=Tensor[(9, 12, 1), float32] */;
  %353 = @func_2895() /* ty=Tensor[(8, 2), float32] */;
  %354 = maximum(%350, %351) /* ty=Tensor[(?, ?, 16), float32] */;
  (meta[relay.Constant][19] /* ty=Tensor[(108), int8] */, %352, %353, %354)
}

def @func_6516() -> Tensor[(8, 2), float32] {
  @func_4682() /* ty=Tensor[(8, 2), float32] */
}

def @func_4877(%var_4819: Tensor[(9, 12, 11), float32], %var_4850: Tensor[(9, 12, 11), float32]) -> (Tensor[(9, 12, 11), float64], Tensor[(8, 2), float32], Tensor[(8, 2), float32], Tensor[(9, 12, 1), float32], Tensor[(9, 12, 11), bool], Tensor[(540), float64], Tensor[(80), int8]) {
  %355 = @func_2472() /* ty=(float32, Tensor[(9, 12, 1), float32]) */;
  %356 = %355.1;
  %357 = cast(%356, dtype="int8") /* ty=Tensor[(9, 12, 1), int8] */;
  %358 = cast(%var_4819, dtype="int8") /* ty=Tensor[(9, 12, 11), int8] */;
  %359 = logical_xor(%357, %358) /* ty=Tensor[(9, 12, 11), int8] */;
  %360 = cast(%var_4819, dtype="int64") /* ty=Tensor[(9, 12, 11), int64] */;
  %361 = shape_of(%359, dtype="int32") /* ty=Tensor[(3), int32] */;
  %362 = cast(%359, dtype="int64") /* ty=Tensor[(9, 12, 11), int64] */;
  %363 = dyn.reshape(%360, %361, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %364 = bitwise_and(%362, %363) /* ty=Tensor[(9, 12, 11), int64] */;
  %365 = cast(%364, dtype="float64") /* ty=Tensor[(9, 12, 11), float64] */;
  %366 = @func_2553() /* ty=(Tensor[(8, 2), float32],) */;
  %367 = @func_2472() /* ty=(float32, Tensor[(9, 12, 1), float32]) */;
  %368 = cast(%359, dtype="float64") /* ty=Tensor[(9, 12, 11), float64] */;
  %369 = reshape(%368, newshape=[9, 12, 11]) /* ty=Tensor[(9, 12, 11), float64] */;
  %370 = @func_4165(%369) /* ty=(Tensor[(9, 12, 11), float32],) */;
  %371 = %370.0;
  %372 = cast(%var_4850, dtype="bool") /* ty=Tensor[(9, 12, 11), bool] */;
  %373 = shape_of(%371, dtype="int32") /* ty=Tensor[(3), int32] */;
  %374 = cast(%371, dtype="bool") /* ty=Tensor[(9, 12, 11), bool] */;
  %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %376 = cast(meta[relay.Constant][20] /* ty=Tensor[(80), int8] */, dtype="int8") /* ty=Tensor[(80), int8] */;
  %377 = reshape(%376, newshape=[4, 4, 5]) /* ty=Tensor[(4, 4, 5), int8] */;
  %378 = @func_4801(%377) /* ty=(Tensor[(4, 4, 5), bool], Tensor[(360), float32], Tensor[(540), float64], Tensor[(9, 12, 1), float32], Tensor[(1080), float32]) */;
  %379 = sqrt(%365) /* ty=Tensor[(9, 12, 11), float64] */;
  %380 = @func_3716() /* ty=Tensor[(8, 2), float32] */;
  %381 = %366.0;
  %382 = %367.1;
  %383 = not_equal(%374, %375) /* ty=Tensor[(9, 12, 11), bool] */;
  %384 = %378.2;
  (%379, %380, %381, %382, %383, %384, meta[relay.Constant][20] /* ty=Tensor[(80), int8] */)
}

def @func_1771() -> Tensor[(9, 12, 1), float64] {
  %385 = @func_1692() /* ty=(Tensor[(9, 12, 1), float64], Tensor[(?, ?, 16), float32], float32, Tensor[(8, 2), float32]) */;
  %385.0
}

def @func_1310(%var_1298: Tensor[(6, 16, 7), float32], %var_1299: Tensor[(6, 16, 7), float32]) -> Tensor[(6, 16, 7), bool] {
  %386 = cast(%var_1299, dtype="bool") /* ty=Tensor[(6, 16, 7), bool] */;
  %387 = shape_of(%var_1298, dtype="int32") /* ty=Tensor[(3), int32] */;
  %388 = cast(%var_1298, dtype="bool") /* ty=Tensor[(6, 16, 7), bool] */;
  %389 = dyn.reshape(%386, %387, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%388, %389) /* ty=Tensor[(6, 16, 7), bool] */
}

def @main() -> Tensor[(?, ?, 16), float32] {
  %390 = @func_3913() /* ty=(Tensor[(?, ?, 16), float32],) */;
  %391 = %390.0;
  %392 = cast(%391, dtype="float32") /* ty=Tensor[(?, ?, 16), float32] */;
  sinh(%392) /* ty=Tensor[(?, ?, 16), float32] */
}

def @func_3191() -> (Tensor[(8, 2), float32],) {
  %393 = @func_2553() /* ty=(Tensor[(8, 2), float32],) */;
  %394 = %393.0;
  (%394,)
}

def @func_1984(%var_1952: Tensor[(9, 12, 5), float64], %var_1961: Tensor[(16), float32]) -> (Tensor[(9, 12, 5), float64], Tensor[(360), float32], float32, Tensor[(16), float32]) {
  %395 = @func_1771() /* ty=Tensor[(9, 12, 1), float64] */;
  %396 = cast(%395, dtype="float64") /* ty=Tensor[(9, 12, 1), float64] */;
  %397 = cast(%var_1952, dtype="float64") /* ty=Tensor[(9, 12, 5), float64] */;
  %398 = cast(8.18021f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %399 = cast(%var_1961, dtype="float32") /* ty=Tensor[(16), float32] */;
  %400 = reshape(%398, newshape=[]) /* ty=float32 */;
  %401 = reshape(%399, newshape=[1, 1, 16]) /* ty=Tensor[(1, 1, 16), float32] */;
  %402 = @func_369(%400, %401) /* ty=(Tensor[(3, 10, 12), float32], Tensor[(360), float32], Tensor[(?, ?, 16), float32]) */;
  %403 = mod(%396, %397) /* ty=Tensor[(9, 12, 5), float64] */;
  %404 = %402.1;
  (%403, %404, 8.18021f /* ty=float32 */, %var_1961)
}

def @func_3109(%var_3099: Tensor[(9, 12, 6), float64]) -> (Tensor[(8, 2), float32], Tensor[(9, 12, ?), float64], Tensor[(9, 12, 6), uint8]) {
  %405 = @func_2172() /* ty=(Tensor[(9, 12, 1), float64],) */;
  %406 = %405.0;
  %407 = @func_2172() /* ty=(Tensor[(9, 12, 1), float64],) */;
  %408 = %407.0;
  %409 = cast(%408, dtype="float64") /* ty=Tensor[(9, 12, 1), float64] */;
  %410 = shape_of(%406, dtype="int32") /* ty=Tensor[(3), int32] */;
  %411 = cast(%406, dtype="float64") /* ty=Tensor[(9, 12, 1), float64] */;
  %412 = dyn.reshape(%409, %410, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %413 = cast(%406, dtype="uint8") /* ty=Tensor[(9, 12, 1), uint8] */;
  %414 = cast(%var_3099, dtype="uint8") /* ty=Tensor[(9, 12, 6), uint8] */;
  %415 = @func_2895() /* ty=Tensor[(8, 2), float32] */;
  %416 = mod(%411, %412) /* ty=Tensor[(9, 12, ?), float64] */;
  %417 = add(%413, %414) /* ty=Tensor[(9, 12, 6), uint8] */;
  (%415, %416, %417)
}

def @func_3524() -> Tensor[(8, 2), float32] {
  %418 = @func_2260() /* ty=(Tensor[(8, 2), float32],) */;
  %418.0
}

def @func_6027(%var_5982: Tensor[(15, 6, 16), float32], %var_5998: Tensor[(1188), float64]) -> (Tensor[(15, 6, 16), int16], Tensor[(15, 6, 16), uint16], Tensor[(8, 2), float32], Tensor[(1188), uint8]) {
  %419 = cast(meta[relay.Constant][21] /* ty=Tensor[(15, 6, 16), float32] */, dtype="float32") /* ty=Tensor[(15, 6, 16), float32] */;
  %420 = atanh(%419) /* ty=Tensor[(15, 6, 16), float32] */;
  %421 = cast(meta[relay.Constant][21] /* ty=Tensor[(15, 6, 16), float32] */, dtype="int16") /* ty=Tensor[(15, 6, 16), int16] */;
  %422 = shape_of(%420, dtype="int32") /* ty=Tensor[(3), int32] */;
  %423 = cast(%420, dtype="int16") /* ty=Tensor[(15, 6, 16), int16] */;
  %424 = dyn.reshape(%421, %422, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %425 = cast(%var_5982, dtype="uint16") /* ty=Tensor[(15, 6, 16), uint16] */;
  %426 = shape_of(%420, dtype="int32") /* ty=Tensor[(3), int32] */;
  %427 = cast(%420, dtype="uint16") /* ty=Tensor[(15, 6, 16), uint16] */;
  %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %429 = @func_2553() /* ty=(Tensor[(8, 2), float32],) */;
  %430 = cast(%var_5998, dtype="float64") /* ty=Tensor[(1188), float64] */;
  %431 = reshape(%430, newshape=[9, 12, 11]) /* ty=Tensor[(9, 12, 11), float64] */;
  %432 = @func_4165(%431) /* ty=(Tensor[(9, 12, 11), float32],) */;
  %433 = %432.0;
  %434 = cast(%433, dtype="uint8") /* ty=Tensor[(9, 12, 11), uint8] */;
  %435 = shape_of(%var_5998, dtype="int32") /* ty=Tensor[(1), int32] */;
  %436 = cast(%var_5998, dtype="uint8") /* ty=Tensor[(1188), uint8] */;
  %437 = dyn.reshape(%434, %435, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %438 = add(%423, %424) /* ty=Tensor[(15, 6, 16), int16] */;
  %439 = maximum(%427, %428) /* ty=Tensor[(15, 6, 16), uint16] */;
  %440 = %429.0;
  %441 = multiply(%436, %437) /* ty=Tensor[(1188), uint8] */;
  (%438, %439, %440, %441)
}

def @func_2538(%var_2520: Tensor[(10, 780), int8]) -> (Tensor[(15, 13, 4), uint64], Tensor[(10, 780), bool], Tensor[(9, 12, 780), uint8]) {
  %442 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 780), int8] */, dtype="int8") /* ty=Tensor[(1, 780), int8] */;
  %443 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 780), int8] */, dtype="int8") /* ty=Tensor[(1, 780), int8] */;
  %444 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 780), int8] */, dtype="int8") /* ty=Tensor[(1, 780), int8] */;
  %445 = reshape(%442, newshape=[15, 13, 4]) /* ty=Tensor[(15, 13, 4), int8] */;
  %446 = reshape(%443, newshape=[15, 13, 4]) /* ty=Tensor[(15, 13, 4), int8] */;
  %447 = reshape(%444, newshape=[15, 13, 4]) /* ty=Tensor[(15, 13, 4), int8] */;
  %448 = @func_2436(%445, %446, %447) /* ty=(Tensor[(15, 13, 4), bool], Tensor[(15, 13, 4), uint64], Tensor[(15, 13, 4), float32]) */;
  %449 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 780), int8] */, dtype="bool") /* ty=Tensor[(1, 780), bool] */;
  %450 = cast(%var_2520, dtype="bool") /* ty=Tensor[(10, 780), bool] */;
  %451 = @func_2499() /* ty=Tensor[(9, 12, 1), float32] */;
  %452 = cast(%451, dtype="uint8") /* ty=Tensor[(9, 12, 1), uint8] */;
  %453 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 780), int8] */, dtype="uint8") /* ty=Tensor[(1, 780), uint8] */;
  %454 = %448.1;
  %455 = greater_equal(%449, %450) /* ty=Tensor[(10, 780), bool] */;
  %456 = bitwise_and(%452, %453) /* ty=Tensor[(9, 12, 780), uint8] */;
  (%454, %455, %456)
}

def @func_1692() -> (Tensor[(9, 12, 1), float64], Tensor[(?, ?, 16), float32], float32, Tensor[(8, 2), float32]) {
  %457 = cast(meta[relay.Constant][23] /* ty=Tensor[(9, 12, 1), float64] */, dtype="float64") /* ty=Tensor[(9, 12, 1), float64] */;
  %458 = cast(-1.75771f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %459 = cast(meta[relay.Constant][24] /* ty=Tensor[(8, 2), float32] */, dtype="float32") /* ty=Tensor[(8, 2), float32] */;
  %460 = reshape(%458, newshape=[]) /* ty=float32 */;
  %461 = reshape(%459, newshape=[1, 1, 16]) /* ty=Tensor[(1, 1, 16), float32] */;
  %462 = @func_369(%460, %461) /* ty=(Tensor[(3, 10, 12), float32], Tensor[(360), float32], Tensor[(?, ?, 16), float32]) */;
  %463 = log10(%457) /* ty=Tensor[(9, 12, 1), float64] */;
  %464 = %462.2;
  (%463, %464, -1.75771f /* ty=float32 */, meta[relay.Constant][24] /* ty=Tensor[(8, 2), float32] */)
}

def @func_4359(%var_4332: Tensor[(360), float32], %var_4346: Tensor[(9, 12, 10), float32]) -> (Tensor[(9, 12, 1), float32], Tensor[(3, 10, 12), float32], Tensor[(360), float32], Tensor[(9, 12, 10), bool]) {
  %465 = @func_2472() /* ty=(float32, Tensor[(9, 12, 1), float32]) */;
  %466 = cast(%var_4332, dtype="float32") /* ty=Tensor[(360), float32] */;
  %467 = reshape(%466, newshape=[3, 10, 12]) /* ty=Tensor[(3, 10, 12), float32] */;
  %468 = @func_2472() /* ty=(float32, Tensor[(9, 12, 1), float32]) */;
  %469 = %468.1;
  %470 = cast(%469, dtype="bool") /* ty=Tensor[(9, 12, 1), bool] */;
  %471 = cast(%var_4346, dtype="bool") /* ty=Tensor[(9, 12, 10), bool] */;
  %472 = %465.1;
  %473 = @func_50(%467) /* ty=Tensor[(3, 10, 12), float32] */;
  %474 = greater_equal(%470, %471) /* ty=Tensor[(9, 12, 10), bool] */;
  (%472, %473, %var_4332, %474)
}

def @func_2172() -> (Tensor[(9, 12, 1), float64],) {
  %475 = @func_1891() /* ty=(Tensor[(9, 12, 1), float64],) */;
  %476 = %475.0;
  (%476,)
}

def @func_5175() -> (Tensor[(9, 12, 1), float32], Tensor[(9, 12, 1), float32], Tensor[(9, 13, 1), int32], int32, Tensor[(8, 2), float32]) {
  %477 = cast(-3 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %478 = reshape(%477, newshape=[]) /* ty=int32 */;
  %479 = @func_3766() /* ty=Tensor[(9, 12, 1), float32] */;
  %480 = @func_3766() /* ty=Tensor[(9, 12, 1), float32] */;
  %481 = @func_2374(%478) /* ty=Tensor[(9, 13, 1), int32] */;
  %482 = @func_5078() /* ty=Tensor[(8, 2), float32] */;
  (%479, %480, %481, -3 /* ty=int32 */, %482)
}

def @func_5240(%var_5189: Tensor[(2, 10, 5), float32], %var_5190: Tensor[(2, 10, 5), float32]) -> (Tensor[(2, 10, 5), bool], Tensor[(2, 10, 5), float64], Tensor[(2, 10, 5), float32], Tensor[(8, 2), float32]) {
  %483 = cast(%var_5190, dtype="bool") /* ty=Tensor[(2, 10, 5), bool] */;
  %484 = shape_of(%var_5189, dtype="int32") /* ty=Tensor[(3), int32] */;
  %485 = cast(%var_5189, dtype="bool") /* ty=Tensor[(2, 10, 5), bool] */;
  %486 = dyn.reshape(%483, %484, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %487 = cast(%var_5189, dtype="float32") /* ty=Tensor[(2, 10, 5), float32] */;
  %488 = rsqrt(%487) /* ty=Tensor[(2, 10, 5), float32] */;
  %489 = cast(%488, dtype="float32") /* ty=Tensor[(2, 10, 5), float32] */;
  %490 = atan(%489) /* ty=Tensor[(2, 10, 5), float32] */;
  %491 = cast(%490, dtype="float64") /* ty=Tensor[(2, 10, 5), float64] */;
  %492 = cast(%490, dtype="float32") /* ty=Tensor[(2, 10, 5), float32] */;
  %493 = less_equal(%485, %486) /* ty=Tensor[(2, 10, 5), bool] */;
  %494 = atanh(%491) /* ty=Tensor[(2, 10, 5), float64] */;
  %495 = asin(%492) /* ty=Tensor[(2, 10, 5), float32] */;
  %496 = @func_4987() /* ty=Tensor[(8, 2), float32] */;
  (%493, %494, %495, %496)
}

def @func_3657(%var_3644: Tensor[(9, 1, 2), float32]) -> (Tensor[(9, 1, 2), float32],) {
  %497 = cast(%var_3644, dtype="float32") /* ty=Tensor[(9, 1, 2), float32] */;
  %498 = log(%497) /* ty=Tensor[(9, 1, 2), float32] */;
  (%498,)
}

def @func_3454(%var_3417: Tensor[(9, 36), float64], %var_3421: Tensor[(9, 6), float32]) -> (Tensor[(8, 2), float32], Tensor[(8, 2), float32], Tensor[(12, 3, ?), float32], Tensor[(9, 12, 1), float32], Tensor[(9, 36), float64], Tensor[(13, 4, 9), bool], Tensor[(1728), float64], Tensor[(9, 6), float32], Tensor[(8, 2), float32]) {
  %499 = @func_3191() /* ty=(Tensor[(8, 2), float32],) */;
  %500 = @func_3348() /* ty=Tensor[(12, 3, 1), float32] */;
  %501 = cast(%500, dtype="float64") /* ty=Tensor[(12, 3, 1), float64] */;
  %502 = sqrt(%501) /* ty=Tensor[(12, 3, 1), float64] */;
  %503 = cast(%500, dtype="float32") /* ty=Tensor[(12, 3, 1), float32] */;
  %504 = shape_of(%502, dtype="int32") /* ty=Tensor[(3), int32] */;
  %505 = cast(%502, dtype="float32") /* ty=Tensor[(12, 3, 1), float32] */;
  %506 = dyn.reshape(%503, %504, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %507 = cast(%var_3417, dtype="float64") /* ty=Tensor[(9, 36), float64] */;
  %508 = reshape(%507, newshape=[324]) /* ty=Tensor[(324), float64] */;
  %509 = @func_3142(%508) /* ty=(Tensor[(9, 12, 1), float32], Tensor[(9, 12, 3), int32], Tensor[(324), float64]) */;
  %510 = cast(meta[relay.Constant][25] /* ty=Tensor[(1728), float64] */, dtype="float64") /* ty=Tensor[(1728), float64] */;
  %511 = cast(meta[relay.Constant][25] /* ty=Tensor[(1728), float64] */, dtype="float64") /* ty=Tensor[(1728), float64] */;
  %512 = cast(%var_3421, dtype="float32") /* ty=Tensor[(9, 6), float32] */;
  %513 = reshape(%510, newshape=[9, 16, 12]) /* ty=Tensor[(9, 16, 12), float64] */;
  %514 = reshape(%511, newshape=[9, 16, 12]) /* ty=Tensor[(9, 16, 12), float64] */;
  %515 = reshape(%512, newshape=[54]) /* ty=Tensor[(54), float32] */;
  %516 = @func_935(%513, %514, %515) /* ty=(Tensor[(9, 16, 12), int8], Tensor[(13, 4, 9), bool], Tensor[(6, 78), float64], Tensor[(6, 3, 3), float32], Tensor[(54), float32], Tensor[(9, 16, 12), float64], Tensor[(13, 4, 9), bool], Tensor[(9, 16, 12), float64], Tensor[(6, 3, 3), float32]) */;
  %517 = @func_2553() /* ty=(Tensor[(8, 2), float32],) */;
  %518 = %499.0;
  %519 = @func_2895() /* ty=Tensor[(8, 2), float32] */;
  %520 = floor_mod(%505, %506) /* ty=Tensor[(12, 3, ?), float32] */;
  %521 = %509.0;
  %522 = %516.1;
  %523 = %517.0;
  (%518, %519, %520, %521, %var_3417, %522, meta[relay.Constant][25] /* ty=Tensor[(1728), float64] */, %var_3421, %523)
}

def @func_7516() -> Tensor[(54), float32] {
  %524 = @func_3629() /* ty=(Tensor[(8, 2), float32], Tensor[(324), float64], Tensor[(54), float32], Tensor[(12, 3, 15), bool]) */;
  %524.2
}

def @func_5327(%var_5321: Tensor[(4, 10, 5), float64]) -> Tensor[(4, 10, 5), float64] {
  %525 = cast(%var_5321, dtype="float64") /* ty=Tensor[(4, 10, 5), float64] */;
  sqrt(%525) /* ty=Tensor[(4, 10, 5), float64] */
}

def @func_3716() -> Tensor[(8, 2), float32] {
  %526 = @func_2260() /* ty=(Tensor[(8, 2), float32],) */;
  %526.0
}

def @func_4258() -> (Tensor[(8, 2), float32], Tensor[(15, 13, 4), uint64], Tensor[(7800), int8], float32) {
  %527 = cast(meta[relay.Constant][26] /* ty=Tensor[(7800), int8] */, dtype="int8") /* ty=Tensor[(7800), int8] */;
  %528 = reshape(%527, newshape=[10, 780]) /* ty=Tensor[(10, 780), int8] */;
  %529 = @func_2538(%528) /* ty=(Tensor[(15, 13, 4), uint64], Tensor[(10, 780), bool], Tensor[(9, 12, 780), uint8]) */;
  %530 = @func_2472() /* ty=(float32, Tensor[(9, 12, 1), float32]) */;
  %531 = @func_3524() /* ty=Tensor[(8, 2), float32] */;
  %532 = %529.0;
  %533 = %530.0;
  (%531, %532, meta[relay.Constant][26] /* ty=Tensor[(7800), int8] */, %533)
}

def @func_6861() -> (Tensor[(54), float32], Tensor[(8, 2), float32], Tensor[(9, 12, 1), float32]) {
  %534 = @func_5343() /* ty=(Tensor[(8, 2), float32],) */;
  %535 = @func_4501() /* ty=Tensor[(54), float32] */;
  %536 = %534.0;
  %537 = @func_3766() /* ty=Tensor[(9, 12, 1), float32] */;
  (%535, %536, %537)
}

def @func_2472() -> (float32, Tensor[(9, 12, 1), float32]) {
  %538 = @func_1692() /* ty=(Tensor[(9, 12, 1), float64], Tensor[(?, ?, 16), float32], float32, Tensor[(8, 2), float32]) */;
  %539 = @func_1771() /* ty=Tensor[(9, 12, 1), float64] */;
  %540 = cast(%539, dtype="float32") /* ty=Tensor[(9, 12, 1), float32] */;
  %541 = %538.2;
  %542 = exp(%540) /* ty=Tensor[(9, 12, 1), float32] */;
  (%541, %542)
}

def @func_3842(%var_3795: Tensor[(7, 7, 2), uint64], %var_3815: Tensor[(1728), float64]) -> (Tensor[(7, 7, 2), uint64], Tensor[(6, 78), float64], Tensor[(1728), float64], Tensor[(54), float32], Tensor[(50, 6), float32], Tensor[(5, 6, 10), float32]) {
  %543 = cast(meta[relay.Constant][27] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %544 = cast(%var_3795, dtype="uint64") /* ty=Tensor[(7, 7, 2), uint64] */;
  %545 = cast(%var_3815, dtype="float64") /* ty=Tensor[(1728), float64] */;
  %546 = cast(%var_3815, dtype="float64") /* ty=Tensor[(1728), float64] */;
  %547 = cast(meta[relay.Constant][28] /* ty=Tensor[(54), float32] */, dtype="float32") /* ty=Tensor[(54), float32] */;
  %548 = reshape(%545, newshape=[9, 16, 12]) /* ty=Tensor[(9, 16, 12), float64] */;
  %549 = reshape(%546, newshape=[9, 16, 12]) /* ty=Tensor[(9, 16, 12), float64] */;
  %550 = reshape(%547, newshape=[54]) /* ty=Tensor[(54), float32] */;
  %551 = @func_935(%548, %549, %550) /* ty=(Tensor[(9, 16, 12), int8], Tensor[(13, 4, 9), bool], Tensor[(6, 78), float64], Tensor[(6, 3, 3), float32], Tensor[(54), float32], Tensor[(9, 16, 12), float64], Tensor[(13, 4, 9), bool], Tensor[(9, 16, 12), float64], Tensor[(6, 3, 3), float32]) */;
  %552 = cast(meta[relay.Constant][29] /* ty=Tensor[(50, 6), float32] */, dtype="float32") /* ty=Tensor[(50, 6), float32] */;
  %553 = reshape(%552, newshape=[5, 6, 10]) /* ty=Tensor[(5, 6, 10), float32] */;
  %554 = @func_2000(%553) /* ty=(Tensor[(5, 6, 10), float32], Tensor[(8, 2), float32]) */;
  %555 = %554.0;
  %556 = cast(%555, dtype="float32") /* ty=Tensor[(5, 6, 10), float32] */;
  %557 = right_shift(%543, %544) /* ty=Tensor[(7, 7, 2), uint64] */;
  %558 = %551.2;
  %559 = log2(%556) /* ty=Tensor[(5, 6, 10), float32] */;
  (%557, %558, %var_3815, meta[relay.Constant][28] /* ty=Tensor[(54), float32] */, meta[relay.Constant][29] /* ty=Tensor[(50, 6), float32] */, %559)
}

def @func_6983() -> (Tensor[(9, 12, 1), float32],) {
  %560 = @func_2472() /* ty=(float32, Tensor[(9, 12, 1), float32]) */;
  %561 = %560.1;
  (%561,)
}

def @func_2499() -> Tensor[(9, 12, 1), float32] {
  %562 = @func_2472() /* ty=(float32, Tensor[(9, 12, 1), float32]) */;
  %562.1
}

def @func_5449() -> (Tensor[(8, 2), float32], Tensor[(9, 12, 11), bool], Tensor[(1188), float32], Tensor[(9, 12, 1), float32]) {
  %563 = cast(meta[relay.Constant][30] /* ty=Tensor[(1188), float32] */, dtype="float32") /* ty=Tensor[(1188), float32] */;
  %564 = cast(meta[relay.Constant][30] /* ty=Tensor[(1188), float32] */, dtype="float32") /* ty=Tensor[(1188), float32] */;
  %565 = reshape(%563, newshape=[9, 12, 11]) /* ty=Tensor[(9, 12, 11), float32] */;
  %566 = reshape(%564, newshape=[9, 12, 11]) /* ty=Tensor[(9, 12, 11), float32] */;
  %567 = @func_4877(%565, %566) /* ty=(Tensor[(9, 12, 11), float64], Tensor[(8, 2), float32], Tensor[(8, 2), float32], Tensor[(9, 12, 1), float32], Tensor[(9, 12, 11), bool], Tensor[(540), float64], Tensor[(80), int8]) */;
  %568 = @func_2895() /* ty=Tensor[(8, 2), float32] */;
  %569 = %567.4;
  %570 = @func_2499() /* ty=Tensor[(9, 12, 1), float32] */;
  (%568, %569, meta[relay.Constant][30] /* ty=Tensor[(1188), float32] */, %570)
}

def @func_2770(%var_2740: Tensor[(360), float32], %var_2756: Tensor[(300), float32], %var_2760: int32) -> (Tensor[(9, 12, 1), float64], Tensor[(3, 10, 12), float32], Tensor[(360), float32], Tensor[(5, 6, 10), float32], Tensor[(300), float32], Tensor[(9, 13, 1), int32], int32) {
  %571 = cast(%var_2740, dtype="float32") /* ty=Tensor[(360), float32] */;
  %572 = reshape(%571, newshape=[3, 10, 12]) /* ty=Tensor[(3, 10, 12), float32] */;
  %573 = cast(%var_2756, dtype="float32") /* ty=Tensor[(300), float32] */;
  %574 = reshape(%573, newshape=[5, 6, 10]) /* ty=Tensor[(5, 6, 10), float32] */;
  %575 = @func_2000(%574) /* ty=(Tensor[(5, 6, 10), float32], Tensor[(8, 2), float32]) */;
  %576 = cast(%var_2760, dtype="int32") /* ty=int32 */;
  %577 = reshape(%576, newshape=[]) /* ty=int32 */;
  %578 = @func_1771() /* ty=Tensor[(9, 12, 1), float64] */;
  %579 = @func_50(%572) /* ty=Tensor[(3, 10, 12), float32] */;
  %580 = %575.0;
  %581 = @func_2374(%577) /* ty=Tensor[(9, 13, 1), int32] */;
  (%578, %579, %var_2740, %580, %var_2756, %581, %var_2760)
}

def @func_6557() -> Tensor[(7800), int16] {
  %582 = @func_5267() /* ty=(Tensor[(8, 2), float32], Tensor[(7800), float32]) */;
  %583 = %582.1;
  %584 = cast(meta[relay.Constant][31] /* ty=Tensor[(7800), float32] */, dtype="int16") /* ty=Tensor[(7800), int16] */;
  %585 = shape_of(%583, dtype="int32") /* ty=Tensor[(1), int32] */;
  %586 = cast(%583, dtype="int16") /* ty=Tensor[(7800), int16] */;
  %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?), int16] */;
  bitwise_and(%586, %587) /* ty=Tensor[(7800), int16] */
}

def @func_5078() -> Tensor[(8, 2), float32] {
  %588 = @func_2260() /* ty=(Tensor[(8, 2), float32],) */;
  %588.0
}

def @func_4104() -> (Tensor[(9, 12, 1), float64],) {
  %589 = @func_1771() /* ty=Tensor[(9, 12, 1), float64] */;
  %590 = cast(%589, dtype="float64") /* ty=Tensor[(9, 12, 1), float64] */;
  %591 = acosh(%590) /* ty=Tensor[(9, 12, 1), float64] */;
  (%591,)
}

def @func_7770() -> (Tensor[(54), float32], Tensor[(7800), bool]) {
  %592 = @func_5576() /* ty=(Tensor[(54), float32],) */;
  %593 = %592.0;
  %594 = @func_7107() /* ty=Tensor[(7800), bool] */;
  (%593, %594)
}

def @func_1891() -> (Tensor[(9, 12, 1), float64],) {
  %595 = @func_1692() /* ty=(Tensor[(9, 12, 1), float64], Tensor[(?, ?, 16), float32], float32, Tensor[(8, 2), float32]) */;
  %596 = %595.0;
  (%596,)
}

def @func_2374(%var_2361: int32) -> Tensor[(9, 13, 1), int32] {
  %597 = cast(%var_2361, dtype="int32") /* ty=int32 */;
  %598 = cast(meta[relay.Constant][32] /* ty=Tensor[(9, 13, 1), int32] */, dtype="int32") /* ty=Tensor[(9, 13, 1), int32] */;
  right_shift(%597, %598) /* ty=Tensor[(9, 13, 1), int32] */
}

def @func_5703(%var_5696: Tensor[(1, 54), float32], %var_5698: Tensor[(9, 12, 8), float32]) -> (Tensor[(9, 6), float32], Tensor[(324, 1), float64], Tensor[(1, 54), float32], Tensor[(9, 12, 8), int64]) {
  %599 = cast(meta[relay.Constant][33] /* ty=Tensor[(324, 1), float64] */, dtype="float64") /* ty=Tensor[(324, 1), float64] */;
  %600 = cast(%var_5696, dtype="float32") /* ty=Tensor[(1, 54), float32] */;
  %601 = reshape(%599, newshape=[9, 36]) /* ty=Tensor[(9, 36), float64] */;
  %602 = reshape(%600, newshape=[9, 6]) /* ty=Tensor[(9, 6), float32] */;
  %603 = @func_3454(%601, %602) /* ty=(Tensor[(8, 2), float32], Tensor[(8, 2), float32], Tensor[(12, 3, ?), float32], Tensor[(9, 12, 1), float32], Tensor[(9, 36), float64], Tensor[(13, 4, 9), bool], Tensor[(1728), float64], Tensor[(9, 6), float32], Tensor[(8, 2), float32]) */;
  %604 = @func_2472() /* ty=(float32, Tensor[(9, 12, 1), float32]) */;
  %605 = %604.1;
  %606 = cast(%605, dtype="float32") /* ty=Tensor[(9, 12, 1), float32] */;
  %607 = erf(%606) /* ty=Tensor[(9, 12, 1), float32] */;
  %608 = cast(%607, dtype="int64") /* ty=Tensor[(9, 12, 1), int64] */;
  %609 = cast(%var_5698, dtype="int64") /* ty=Tensor[(9, 12, 8), int64] */;
  %610 = %603.7;
  %611 = bitwise_and(%608, %609) /* ty=Tensor[(9, 12, 8), int64] */;
  (%610, meta[relay.Constant][33] /* ty=Tensor[(324, 1), float64] */, %var_5696, %611)
}

def @func_1551(%var_1537: Tensor[(13, 7, 13), float64]) -> Tensor[(13, 7, 13), float64] {
  %612 = cast(%var_1537, dtype="float64") /* ty=Tensor[(13, 7, 13), float64] */;
  rsqrt(%612) /* ty=Tensor[(13, 7, 13), float64] */
}

def @func_2000(%var_1992: Tensor[(5, 6, 10), float32]) -> (Tensor[(5, 6, 10), float32], Tensor[(8, 2), float32]) {
  %613 = cast(%var_1992, dtype="float32") /* ty=Tensor[(5, 6, 10), float32] */;
  %614 = @func_1692() /* ty=(Tensor[(9, 12, 1), float64], Tensor[(?, ?, 16), float32], float32, Tensor[(8, 2), float32]) */;
  %615 = cosh(%613) /* ty=Tensor[(5, 6, 10), float32] */;
  %616 = %614.3;
  (%615, %616)
}

def @func_6440(%var_6426: Tensor[(9, 12, 6), float64]) -> (Tensor[(9, 12, 6), bool], Tensor[(54), float32]) {
  %617 = @func_6385() /* ty=Tensor[(9, 12, 1), float64] */;
  %618 = cast(%617, dtype="bool") /* ty=Tensor[(9, 12, 1), bool] */;
  %619 = cast(%var_6426, dtype="bool") /* ty=Tensor[(9, 12, 6), bool] */;
  %620 = @func_5576() /* ty=(Tensor[(54), float32],) */;
  %621 = greater(%618, %619) /* ty=Tensor[(9, 12, 6), bool] */;
  %622 = %620.0;
  (%621, %622)
}

def @func_7785(%var_7778: Tensor[(9, 11, 7), float32]) -> (Tensor[(9, 11, 7), float32], Tensor[(9, 11, 7), float64]) {
  %623 = cast(%var_7778, dtype="float32") /* ty=Tensor[(9, 11, 7), float32] */;
  %624 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(9, 11, 7), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %625 = cast(meta[relay.Constant][34] /* ty=Tensor[(9, 11, 7), float32] */, dtype="float32") /* ty=Tensor[(9, 11, 7), float32] */;
  %626 = dyn.reshape(%623, %624, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %627 = cast(%var_7778, dtype="float64") /* ty=Tensor[(9, 11, 7), float64] */;
  %628 = subtract(%625, %626) /* ty=Tensor[(9, 11, 7), float32] */;
  %629 = log(%627) /* ty=Tensor[(9, 11, 7), float64] */;
  (%628, %629)
}

def @func_6066(%var_6056: Tensor[(7, 10, 11), float32]) -> (Tensor[(7, 10, 11), float32],) {
  %630 = cast(%var_6056, dtype="float32") /* ty=Tensor[(7, 10, 11), float32] */;
  %631 = cos(%630) /* ty=Tensor[(7, 10, 11), float32] */;
  (%631,)
}

def @func_4428() -> Tensor[(9, 12, 1), float64] {
  %632 = @func_2172() /* ty=(Tensor[(9, 12, 1), float64],) */;
  %632.0
}

def @func_5825(%var_5812: Tensor[(540), float64]) -> (Tensor[(54), float32], float32, Tensor[(540), float64], Tensor[(540), float64], Tensor[(80), int8], Tensor[(9, 12, 1), float64]) {
  %633 = cast(%var_5812, dtype="float64") /* ty=Tensor[(540), float64] */;
  %634 = reshape(%633, newshape=[540]) /* ty=Tensor[(540), float64] */;
  %635 = @func_3266(%634) /* ty=(float32, Tensor[(540), float64], Tensor[(540), float64]) */;
  %636 = cast(meta[relay.Constant][35] /* ty=Tensor[(80), int8] */, dtype="int8") /* ty=Tensor[(80), int8] */;
  %637 = reshape(%636, newshape=[4, 4, 5]) /* ty=Tensor[(4, 4, 5), int8] */;
  %638 = @func_4801(%637) /* ty=(Tensor[(4, 4, 5), bool], Tensor[(360), float32], Tensor[(540), float64], Tensor[(9, 12, 1), float32], Tensor[(1080), float32]) */;
  %639 = @func_4501() /* ty=Tensor[(54), float32] */;
  %640 = %635.0;
  %641 = %638.2;
  %642 = @func_3700() /* ty=Tensor[(9, 12, 1), float64] */;
  (%639, %640, %var_5812, %641, meta[relay.Constant][35] /* ty=Tensor[(80), int8] */, %642)
}

def @func_6732(%var_6707: Tensor[(540), float64], %var_6726: Tensor[(1188), float32], %var_6729: int32) -> (Tensor[(9, 12, ?), bool], Tensor[(540), float64], Tensor[(9, 12, 540), bool], Tensor[(8, 2), float32], Tensor[(1188), float32], Tensor[(5, 12, 6), float32], int32) {
  %643 = @func_2804() /* ty=(Tensor[(?, ?, 16), float32], Tensor[(9, 12, 1), float64]) */;
  %644 = %643.1;
  %645 = cast(%644, dtype="float32") /* ty=Tensor[(9, 12, 1), float32] */;
  %646 = log2(%645) /* ty=Tensor[(9, 12, 1), float32] */;
  %647 = cast(%644, dtype="bool") /* ty=Tensor[(9, 12, 1), bool] */;
  %648 = shape_of(%646, dtype="int32") /* ty=Tensor[(3), int32] */;
  %649 = cast(%646, dtype="bool") /* ty=Tensor[(9, 12, 1), bool] */;
  %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %651 = cast(%var_6707, dtype="float64") /* ty=Tensor[(540), float64] */;
  %652 = reshape(%651, newshape=[540]) /* ty=Tensor[(540), float64] */;
  %653 = @func_3266(%652) /* ty=(float32, Tensor[(540), float64], Tensor[(540), float64]) */;
  %654 = cast(%646, dtype="bool") /* ty=Tensor[(9, 12, 1), bool] */;
  %655 = cast(%var_6707, dtype="bool") /* ty=Tensor[(540), bool] */;
  %656 = cast(%var_6726, dtype="float32") /* ty=Tensor[(1188), float32] */;
  %657 = cast(%var_6726, dtype="float32") /* ty=Tensor[(1188), float32] */;
  %658 = reshape(%656, newshape=[9, 12, 11]) /* ty=Tensor[(9, 12, 11), float32] */;
  %659 = reshape(%657, newshape=[9, 12, 11]) /* ty=Tensor[(9, 12, 11), float32] */;
  %660 = @func_4877(%658, %659) /* ty=(Tensor[(9, 12, 11), float64], Tensor[(8, 2), float32], Tensor[(8, 2), float32], Tensor[(9, 12, 1), float32], Tensor[(9, 12, 11), bool], Tensor[(540), float64], Tensor[(80), int8]) */;
  %661 = cast(%var_6729, dtype="int32") /* ty=int32 */;
  %662 = reshape(%661, newshape=[]) /* ty=int32 */;
  %663 = @func_6611(%662) /* ty=(Tensor[(5, 12, 6), float32], Tensor[(9, 13, 1), int32], int32, Tensor[(5, 12, 6), float32]) */;
  %664 = not_equal(%649, %650) /* ty=Tensor[(9, 12, ?), bool] */;
  %665 = %653.1;
  %666 = not_equal(%654, %655) /* ty=Tensor[(9, 12, 540), bool] */;
  %667 = %660.2;
  %668 = %663.3;
  (%664, %665, %666, %667, %var_6726, %668, %var_6729)
}

def @func_4737(%var_4708: Tensor[(1728), float64], %var_4729: float32) -> (Tensor[(8, 2), float32], Tensor[(50, 6), float32], Tensor[(1728), float64], Tensor[(98, 1), float32], Tensor[(3, 10, 12), float32], float32) {
  %669 = @func_4522() /* ty=(Tensor[(8, 2), float32],) */;
  %670 = cast(meta[relay.Constant][36] /* ty=Tensor[(98, 1), uint64] */, dtype="uint64") /* ty=Tensor[(98, 1), uint64] */;
  %671 = cast(%var_4708, dtype="float64") /* ty=Tensor[(1728), float64] */;
  %672 = reshape(%670, newshape=[7, 7, 2]) /* ty=Tensor[(7, 7, 2), uint64] */;
  %673 = reshape(%671, newshape=[1728]) /* ty=Tensor[(1728), float64] */;
  %674 = @func_3842(%672, %673) /* ty=(Tensor[(7, 7, 2), uint64], Tensor[(6, 78), float64], Tensor[(1728), float64], Tensor[(54), float32], Tensor[(50, 6), float32], Tensor[(5, 6, 10), float32]) */;
  %675 = cast(meta[relay.Constant][36] /* ty=Tensor[(98, 1), uint64] */, dtype="float32") /* ty=Tensor[(98, 1), float32] */;
  %676 = cast(%var_4729, dtype="float32") /* ty=float32 */;
  %677 = %669.0;
  %678 = cast(%677, dtype="float32") /* ty=Tensor[(8, 2), float32] */;
  %679 = reshape(%676, newshape=[]) /* ty=float32 */;
  %680 = reshape(%678, newshape=[1, 1, 16]) /* ty=Tensor[(1, 1, 16), float32] */;
  %681 = @func_369(%679, %680) /* ty=(Tensor[(3, 10, 12), float32], Tensor[(360), float32], Tensor[(?, ?, 16), float32]) */;
  %682 = %674.4;
  %683 = sqrt(%675) /* ty=Tensor[(98, 1), float32] */;
  %684 = %681.0;
  (%677, %682, %var_4708, %683, %684, %var_4729)
}

def @func_5777(%var_5752: Tensor[(360), float32], %var_5769: Tensor[(16, 2, 16), float64]) -> (Tensor[(9, 12, 1), float32], Tensor[(54), float32], Tensor[(54), float32], Tensor[(8, 2), float32], Tensor[(3, 10, 12), float32], Tensor[(360), float32], Tensor[(16, 2, 16), bool]) {
  %685 = cast(meta[relay.Constant][37] /* ty=Tensor[(54), float32] */, dtype="float32") /* ty=Tensor[(54), float32] */;
  %686 = reshape(%685, newshape=[54]) /* ty=Tensor[(54), float32] */;
  %687 = @func_4061(%686) /* ty=(Tensor[(9, 12, 1), float32], Tensor[(12, 3, 1), float32], Tensor[(6, 3, 3), float32], Tensor[(54), float32]) */;
  %688 = cast(meta[relay.Constant][37] /* ty=Tensor[(54), float32] */, dtype="float32") /* ty=Tensor[(54), float32] */;
  %689 = reshape(%688, newshape=[54]) /* ty=Tensor[(54), float32] */;
  %690 = @func_4061(%689) /* ty=(Tensor[(9, 12, 1), float32], Tensor[(12, 3, 1), float32], Tensor[(6, 3, 3), float32], Tensor[(54), float32]) */;
  %691 = @func_5175() /* ty=(Tensor[(9, 12, 1), float32], Tensor[(9, 12, 1), float32], Tensor[(9, 13, 1), int32], int32, Tensor[(8, 2), float32]) */;
  %692 = cast(%var_5752, dtype="float32") /* ty=Tensor[(360), float32] */;
  %693 = reshape(%692, newshape=[3, 10, 12]) /* ty=Tensor[(3, 10, 12), float32] */;
  %694 = @func_4585() /* ty=Tensor[(?, ?, 16), float64] */;
  %695 = cast(%694, dtype="bool") /* ty=Tensor[(?, ?, 16), bool] */;
  %696 = cast(%var_5769, dtype="bool") /* ty=Tensor[(16, 2, 16), bool] */;
  %697 = %687.0;
  %698 = %690.3;
  %699 = %691.4;
  %700 = @func_50(%693) /* ty=Tensor[(3, 10, 12), float32] */;
  %701 = greater(%695, %696) /* ty=Tensor[(16, 2, 16), bool] */;
  (%697, meta[relay.Constant][37] /* ty=Tensor[(54), float32] */, %698, %699, %700, %var_5752, %701)
}

def @func_4282() -> Tensor[(9, 12, 3), float32] {
  %702 = @func_3766() /* ty=Tensor[(9, 12, 1), float32] */;
  %703 = cast(%702, dtype="float32") /* ty=Tensor[(9, 12, 1), float32] */;
  %704 = cast(meta[relay.Constant][38] /* ty=Tensor[(9, 12, 3), float32] */, dtype="float32") /* ty=Tensor[(9, 12, 3), float32] */;
  minimum(%703, %704) /* ty=Tensor[(9, 12, 3), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_3348() -> Tensor[(12, 3, 1), float32] {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(12, 3, 1), float32] */, dtype="float32") /* ty=Tensor[(12, 3, 1), float32] */;
  %1 = asinh(%0) /* ty=Tensor[(12, 3, 1), float32] */;
  %2 = cast(%1, dtype="float32") /* ty=Tensor[(12, 3, 1), float32] */;
  cosh(%2) /* ty=Tensor[(12, 3, 1), float32] */
}

def @func_3524() -> Tensor[(8, 2), float32] {
  %3 = @func_2260() /* ty=(Tensor[(8, 2), float32],) */;
  %3.0
}

def @func_2897() -> Tensor[(8, 2), float32] {
  @func_2895() /* ty=Tensor[(8, 2), float32] */
}

def @func_5050() -> (Tensor[(8, 2), float32],) {
  @func_5048() /* ty=(Tensor[(8, 2), float32],) */
}

def @func_4523() -> (Tensor[(8, 2), float32],) {
  %6 = fn () -> (Tensor[(8, 2), float32],) {
    %4 = @func_3191() /* ty=(Tensor[(8, 2), float32],) */;
    %5 = %4.0;
    (%5,)
  };
  %6() /* ty=(Tensor[(8, 2), float32],) */
}

def @func_4501() -> Tensor[(54), float32] {
  %7 = @func_3629() /* ty=(Tensor[(8, 2), float32], Tensor[(324), float64], Tensor[(54), float32], Tensor[(12, 3, 15), bool]) */;
  %7.2
}

def @func_5176() -> (Tensor[(9, 12, 1), float32], Tensor[(9, 12, 1), float32], Tensor[(9, 13, 1), int32], int32, Tensor[(8, 2), float32]) {
  %14 = fn () -> (Tensor[(9, 12, 1), float32], Tensor[(9, 12, 1), float32], Tensor[(9, 13, 1), int32], int32, Tensor[(8, 2), float32]) {
    %8 = cast(-3 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %9 = reshape(%8, newshape=[]) /* ty=int32 */;
    %10 = @func_3766() /* ty=Tensor[(9, 12, 1), float32] */;
    %11 = @func_3766() /* ty=Tensor[(9, 12, 1), float32] */;
    %12 = @func_2374(%9) /* ty=Tensor[(9, 13, 1), int32] */;
    %13 = @func_5078() /* ty=Tensor[(8, 2), float32] */;
    (%10, %11, %12, -3 /* ty=int32 */, %13)
  };
  %14() /* ty=(Tensor[(9, 12, 1), float32], Tensor[(9, 12, 1), float32], Tensor[(9, 13, 1), int32], int32, Tensor[(8, 2), float32]) */
}

def @func_4585() -> Tensor[(?, ?, 16), float64] {
  %15 = @func_3913() /* ty=(Tensor[(?, ?, 16), float32],) */;
  %16 = %15.0;
  %17 = cast(meta[relay.Constant][1] /* ty=Tensor[(1, 1, 16), float32] */, dtype="float64") /* ty=Tensor[(1, 1, 16), float64] */;
  %18 = shape_of(%16, dtype="int32") /* ty=Tensor[(3), int32] */;
  %19 = cast(%16, dtype="float64") /* ty=Tensor[(?, ?, 16), float64] */;
  %20 = dyn.reshape(%17, %18, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%19, %20) /* ty=Tensor[(?, ?, 16), float64] */
}

def @func_5662() -> Tensor[(13, 10, 11), float64] {
  @func_5660() /* ty=Tensor[(13, 10, 11), float64] */
}

def @func_7718() -> Tensor[(9, 12, 1), float64] {
  @func_7595() /* ty=Tensor[(9, 12, 1), float64] */
}

def @func_2984(%var_2962: Tensor[(16, 10, 6), float64], %var_2968: Tensor[(16, 10, 6), float64]) -> Tensor[(16, 10, 6), uint64] {
  %21 = cast(%var_2962, dtype="float64") /* ty=Tensor[(16, 10, 6), float64] */;
  %22 = atan(%21) /* ty=Tensor[(16, 10, 6), float64] */;
  %23 = cast(%var_2968, dtype="uint64") /* ty=Tensor[(16, 10, 6), uint64] */;
  %24 = shape_of(%22, dtype="int32") /* ty=Tensor[(3), int32] */;
  %25 = cast(%22, dtype="uint64") /* ty=Tensor[(16, 10, 6), uint64] */;
  %26 = dyn.reshape(%23, %24, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  subtract(%25, %26) /* ty=Tensor[(16, 10, 6), uint64] */
}

def @func_7596() -> Tensor[(9, 12, 1), float64] {
  %28 = fn () -> Tensor[(9, 12, 1), float64] {
    %27 = @func_1891() /* ty=(Tensor[(9, 12, 1), float64],) */;
    %27.0
  };
  %28() /* ty=Tensor[(9, 12, 1), float64] */
}

def @func_5958() -> (Tensor[(?, ?, 16), float64], Tensor[(9, 12, 1), float64], Tensor[(8, 2), float32]) {
  %29 = @func_4522() /* ty=(Tensor[(8, 2), float32],) */;
  %30 = @func_4585() /* ty=Tensor[(?, ?, 16), float64] */;
  %31 = @func_1771() /* ty=Tensor[(9, 12, 1), float64] */;
  %32 = %29.0;
  (%30, %31, %32)
}

def @func_7720() -> Tensor[(9, 12, 1), float64] {
  @func_7718() /* ty=Tensor[(9, 12, 1), float64] */
}

def @func_3144(%var_3143: Tensor[(324), float64]) -> (Tensor[(9, 12, 1), float32], Tensor[(9, 12, 3), int32], Tensor[(324), float64]) {
  %38 = fn (%var_3140: Tensor[(324), float64]) -> (Tensor[(9, 12, 1), float32], Tensor[(9, 12, 3), int32], Tensor[(324), float64]) {
    %33 = cast(%var_3140, dtype="float64") /* ty=Tensor[(324), float64] */;
    %34 = reshape(%33, newshape=[9, 12, 3]) /* ty=Tensor[(9, 12, 3), float64] */;
    %35 = @func_2080(%34) /* ty=(Tensor[(9, 12, 3), int32],) */;
    %36 = @func_2499() /* ty=Tensor[(9, 12, 1), float32] */;
    %37 = %35.0;
    (%36, %37, %var_3140)
  };
  %38(%var_3143) /* ty=(Tensor[(9, 12, 1), float32], Tensor[(9, 12, 3), int32], Tensor[(324), float64]) */
}

def @func_4064(%var_4062: Tensor[(54), float32]) -> (Tensor[(9, 12, 1), float32], Tensor[(12, 3, 1), float32], Tensor[(6, 3, 3), float32], Tensor[(54), float32]) {
  @func_4061(%var_4062) /* ty=(Tensor[(9, 12, 1), float32], Tensor[(12, 3, 1), float32], Tensor[(6, 3, 3), float32], Tensor[(54), float32]) */
}

def @func_4168(%var_4166: Tensor[(9, 12, 11), float64]) -> (Tensor[(9, 12, 11), float32],) {
  @func_4165(%var_4166) /* ty=(Tensor[(9, 12, 11), float32],) */
}

def @func_3768() -> Tensor[(9, 12, 1), float32] {
  @func_3766() /* ty=Tensor[(9, 12, 1), float32] */
}

def @func_3630() -> (Tensor[(8, 2), float32], Tensor[(324), float64], Tensor[(54), float32], Tensor[(12, 3, 15), bool]) {
  %49 = fn () -> (Tensor[(8, 2), float32], Tensor[(324), float64], Tensor[(54), float32], Tensor[(12, 3, 15), bool]) {
    %39 = cast(meta[relay.Constant][2] /* ty=Tensor[(324), float64] */, dtype="float64") /* ty=Tensor[(324), float64] */;
    %40 = cast(meta[relay.Constant][3] /* ty=Tensor[(54), float32] */, dtype="float32") /* ty=Tensor[(54), float32] */;
    %41 = reshape(%39, newshape=[9, 36]) /* ty=Tensor[(9, 36), float64] */;
    %42 = reshape(%40, newshape=[9, 6]) /* ty=Tensor[(9, 6), float32] */;
    %43 = @func_3454(%41, %42) /* ty=(Tensor[(8, 2), float32], Tensor[(8, 2), float32], Tensor[(12, 3, ?), float32], Tensor[(9, 12, 1), float32], Tensor[(9, 36), float64], Tensor[(13, 4, 9), bool], Tensor[(1728), float64], Tensor[(9, 6), float32], Tensor[(8, 2), float32]) */;
    %44 = @func_3348() /* ty=Tensor[(12, 3, 1), float32] */;
    %45 = cast(%44, dtype="bool") /* ty=Tensor[(12, 3, 1), bool] */;
    %46 = cast(meta[relay.Constant][4] /* ty=Tensor[(12, 3, 15), float32] */, dtype="bool") /* ty=Tensor[(12, 3, 15), bool] */;
    %47 = %43.0;
    %48 = greater_equal(%45, %46) /* ty=Tensor[(12, 3, 15), bool] */;
    (%47, meta[relay.Constant][2] /* ty=Tensor[(324), float64] */, meta[relay.Constant][3] /* ty=Tensor[(54), float32] */, %48)
  };
  %49() /* ty=(Tensor[(8, 2), float32], Tensor[(324), float64], Tensor[(54), float32], Tensor[(12, 3, 15), bool]) */
}

def @func_736(%var_734: Tensor[(13, 4, 9), float64], %var_735: Tensor[(13, 4, 9), float64]) -> Tensor[(13, 4, 9), bool] {
  %54 = fn (%var_718: Tensor[(13, 4, 9), float64], %var_719: Tensor[(13, 4, 9), float64]) -> Tensor[(13, 4, 9), bool] {
    %50 = cast(%var_719, dtype="bool") /* ty=Tensor[(13, 4, 9), bool] */;
    %51 = shape_of(%var_718, dtype="int32") /* ty=Tensor[(3), int32] */;
    %52 = cast(%var_718, dtype="bool") /* ty=Tensor[(13, 4, 9), bool] */;
    %53 = dyn.reshape(%50, %51, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less_equal(%52, %53) /* ty=Tensor[(13, 4, 9), bool] */
  };
  %54(%var_734, %var_735) /* ty=Tensor[(13, 4, 9), bool] */
}

def @func_5536() -> (Tensor[(9, 12, 1), float64],) {
  %57 = fn () -> (Tensor[(9, 12, 1), float64],) {
    %55 = @func_1891() /* ty=(Tensor[(9, 12, 1), float64],) */;
    %56 = %55.0;
    (%56,)
  };
  %57() /* ty=(Tensor[(9, 12, 1), float64],) */
}

def @func_6898() -> (Tensor[(9, 12, 1), float64],) {
  %58 = @func_3700() /* ty=Tensor[(9, 12, 1), float64] */;
  (%58,)
}

def @func_2173() -> (Tensor[(9, 12, 1), float64],) {
  %61 = fn () -> (Tensor[(9, 12, 1), float64],) {
    %59 = @func_1891() /* ty=(Tensor[(9, 12, 1), float64],) */;
    %60 = %59.0;
    (%60,)
  };
  %61() /* ty=(Tensor[(9, 12, 1), float64],) */
}

def @func_4880(%var_4878: Tensor[(9, 12, 11), float32], %var_4879: Tensor[(9, 12, 11), float32]) -> (Tensor[(9, 12, 11), float64], Tensor[(8, 2), float32], Tensor[(8, 2), float32], Tensor[(9, 12, 1), float32], Tensor[(9, 12, 11), bool], Tensor[(540), float64], Tensor[(80), int8]) {
  %92 = fn (%var_4819: Tensor[(9, 12, 11), float32], %var_4850: Tensor[(9, 12, 11), float32]) -> (Tensor[(9, 12, 11), float64], Tensor[(8, 2), float32], Tensor[(8, 2), float32], Tensor[(9, 12, 1), float32], Tensor[(9, 12, 11), bool], Tensor[(540), float64], Tensor[(80), int8]) {
    %62 = @func_2472() /* ty=(float32, Tensor[(9, 12, 1), float32]) */;
    %63 = %62.1;
    %64 = cast(%63, dtype="int8") /* ty=Tensor[(9, 12, 1), int8] */;
    %65 = cast(%var_4819, dtype="int8") /* ty=Tensor[(9, 12, 11), int8] */;
    %66 = logical_xor(%64, %65) /* ty=Tensor[(9, 12, 11), int8] */;
    %67 = cast(%var_4819, dtype="int64") /* ty=Tensor[(9, 12, 11), int64] */;
    %68 = shape_of(%66, dtype="int32") /* ty=Tensor[(3), int32] */;
    %69 = cast(%66, dtype="int64") /* ty=Tensor[(9, 12, 11), int64] */;
    %70 = dyn.reshape(%67, %68, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %71 = bitwise_and(%69, %70) /* ty=Tensor[(9, 12, 11), int64] */;
    %72 = cast(%71, dtype="float64") /* ty=Tensor[(9, 12, 11), float64] */;
    %73 = @func_2553() /* ty=(Tensor[(8, 2), float32],) */;
    %74 = @func_2472() /* ty=(float32, Tensor[(9, 12, 1), float32]) */;
    %75 = cast(%66, dtype="float64") /* ty=Tensor[(9, 12, 11), float64] */;
    %76 = reshape(%75, newshape=[9, 12, 11]) /* ty=Tensor[(9, 12, 11), float64] */;
    %77 = @func_4165(%76) /* ty=(Tensor[(9, 12, 11), float32],) */;
    %78 = %77.0;
    %79 = cast(%var_4850, dtype="bool") /* ty=Tensor[(9, 12, 11), bool] */;
    %80 = shape_of(%78, dtype="int32") /* ty=Tensor[(3), int32] */;
    %81 = cast(%78, dtype="bool") /* ty=Tensor[(9, 12, 11), bool] */;
    %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %83 = cast(meta[relay.Constant][5] /* ty=Tensor[(80), int8] */, dtype="int8") /* ty=Tensor[(80), int8] */;
    %84 = reshape(%83, newshape=[4, 4, 5]) /* ty=Tensor[(4, 4, 5), int8] */;
    %85 = @func_4801(%84) /* ty=(Tensor[(4, 4, 5), bool], Tensor[(360), float32], Tensor[(540), float64], Tensor[(9, 12, 1), float32], Tensor[(1080), float32]) */;
    %86 = sqrt(%72) /* ty=Tensor[(9, 12, 11), float64] */;
    %87 = @func_3716() /* ty=Tensor[(8, 2), float32] */;
    %88 = %73.0;
    %89 = %74.1;
    %90 = not_equal(%81, %82) /* ty=Tensor[(9, 12, 11), bool] */;
    %91 = %85.2;
    (%86, %87, %88, %89, %90, %91, meta[relay.Constant][5] /* ty=Tensor[(80), int8] */)
  };
  %92(%var_4878, %var_4879) /* ty=(Tensor[(9, 12, 11), float64], Tensor[(8, 2), float32], Tensor[(8, 2), float32], Tensor[(9, 12, 1), float32], Tensor[(9, 12, 11), bool], Tensor[(540), float64], Tensor[(80), int8]) */
}

def @func_3700() -> Tensor[(9, 12, 1), float64] {
  %93 = @func_2172() /* ty=(Tensor[(9, 12, 1), float64],) */;
  %93.0
}

def @func_5479(%var_5477: Tensor[(16, 9, 12), float64]) -> (Tensor[(16, 9, 12), float64],) {
  @func_5476(%var_5477) /* ty=(Tensor[(16, 9, 12), float64],) */
}

def @func_6321() -> Tensor[(9, 12, 1), float64] {
  %94 = @func_1692() /* ty=(Tensor[(9, 12, 1), float64], Tensor[(?, ?, 16), float32], float32, Tensor[(8, 2), float32]) */;
  %94.0
}

def @func_7067() -> (Tensor[(54), float32], Tensor[(9, 12, 1), float64]) {
  %95 = @func_5576() /* ty=(Tensor[(54), float32],) */;
  %96 = @func_5958() /* ty=(Tensor[(?, ?, 16), float64], Tensor[(9, 12, 1), float64], Tensor[(8, 2), float32]) */;
  %97 = %95.0;
  %98 = %96.1;
  (%97, %98)
}

def @func_5707(%var_5705: Tensor[(1, 54), float32], %var_5706: Tensor[(9, 12, 8), float32]) -> (Tensor[(9, 6), float32], Tensor[(324, 1), float64], Tensor[(1, 54), float32], Tensor[(9, 12, 8), int64]) {
  @func_5703(%var_5705, %var_5706) /* ty=(Tensor[(9, 6), float32], Tensor[(324, 1), float64], Tensor[(1, 54), float32], Tensor[(9, 12, 8), int64]) */
}

def @func_3766() -> Tensor[(9, 12, 1), float32] {
  %99 = @func_1891() /* ty=(Tensor[(9, 12, 1), float64],) */;
  %100 = %99.0;
  %101 = cast(%100, dtype="float32") /* ty=Tensor[(9, 12, 1), float32] */;
  rsqrt(%101) /* ty=Tensor[(9, 12, 1), float32] */
}

def @func_5451() -> (Tensor[(8, 2), float32], Tensor[(9, 12, 11), bool], Tensor[(1188), float32], Tensor[(9, 12, 1), float32]) {
  @func_5449() /* ty=(Tensor[(8, 2), float32], Tensor[(9, 12, 11), bool], Tensor[(1188), float32], Tensor[(9, 12, 1), float32]) */
}

def @func_5048() -> (Tensor[(8, 2), float32],) {
  %102 = @func_2895() /* ty=Tensor[(8, 2), float32] */;
  (%102,)
}

def @func_6344(%var_6342: int32) -> (Tensor[(8, 2), float32], Tensor[(9, 13, 1), int32], int32) {
  @func_6341(%var_6342) /* ty=(Tensor[(8, 2), float32], Tensor[(9, 13, 1), int32], int32) */
}

def @func_2347(%var_2345: Tensor[(4, 12, 1), float64], %var_2346: Tensor[(4, 12, 15), float64]) -> (Tensor[(4, 12, 1), float64], Tensor[(4, 12, 15), float64]) {
  %112 = fn (%var_2299: Tensor[(4, 12, 1), float64], %var_2320: Tensor[(4, 12, 15), float64]) -> (Tensor[(4, 12, 1), float64], Tensor[(4, 12, 15), float64]) {
    %103 = cast(%var_2299, dtype="float64") /* ty=Tensor[(4, 12, 1), float64] */;
    %104 = cast(%var_2299, dtype="float32") /* ty=Tensor[(4, 12, 1), float32] */;
    %105 = cast(%var_2320, dtype="float32") /* ty=Tensor[(4, 12, 15), float32] */;
    %106 = power(%104, %105) /* ty=Tensor[(4, 12, 15), float32] */;
    %107 = cast(%106, dtype="float64") /* ty=Tensor[(4, 12, 15), float64] */;
    %108 = cos(%107) /* ty=Tensor[(4, 12, 15), float64] */;
    %109 = cast(%108, dtype="float64") /* ty=Tensor[(4, 12, 15), float64] */;
    %110 = asin(%103) /* ty=Tensor[(4, 12, 1), float64] */;
    %111 = acosh(%109) /* ty=Tensor[(4, 12, 15), float64] */;
    (%110, %111)
  };
  %112(%var_2345, %var_2346) /* ty=(Tensor[(4, 12, 1), float64], Tensor[(4, 12, 15), float64]) */
}

def @func_6737(%var_6734: Tensor[(540), float64], %var_6735: Tensor[(1188), float32], %var_6736: int32) -> (Tensor[(9, 12, ?), bool], Tensor[(540), float64], Tensor[(9, 12, 540), bool], Tensor[(8, 2), float32], Tensor[(1188), float32], Tensor[(5, 12, 6), float32], int32) {
  @func_6732(%var_6734, %var_6735, %var_6736) /* ty=(Tensor[(9, 12, ?), bool], Tensor[(540), float64], Tensor[(9, 12, 540), bool], Tensor[(8, 2), float32], Tensor[(1188), float32], Tensor[(5, 12, 6), float32], int32) */
}

def @func_813(%var_804: Tensor[(6, 3, 3), float32]) -> (Tensor[(6, 3, 3), float32],) {
  %113 = cast(%var_804, dtype="float32") /* ty=Tensor[(6, 3, 3), float32] */;
  %114 = log(%113) /* ty=Tensor[(6, 3, 3), float32] */;
  (%114,)
}

def @func_7069() -> (Tensor[(54), float32], Tensor[(9, 12, 1), float64]) {
  @func_7067() /* ty=(Tensor[(54), float32], Tensor[(9, 12, 1), float64]) */
}

def @func_4282() -> Tensor[(9, 12, 3), float32] {
  %115 = @func_3766() /* ty=Tensor[(9, 12, 1), float32] */;
  %116 = cast(%115, dtype="float32") /* ty=Tensor[(9, 12, 1), float32] */;
  %117 = cast(meta[relay.Constant][6] /* ty=Tensor[(9, 12, 3), float32] */, dtype="float32") /* ty=Tensor[(9, 12, 3), float32] */;
  minimum(%116, %117) /* ty=Tensor[(9, 12, 3), float32] */
}

def @func_2555() -> (Tensor[(8, 2), float32],) {
  @func_2553() /* ty=(Tensor[(8, 2), float32],) */
}

def @func_7569(%var_7568: Tensor[(3), float64]) -> (Tensor[(8, 2), float32], Tensor[(3, 1, 1), float64], Tensor[(3), float64]) {
  %123 = fn (%var_7564: Tensor[(3), float64]) -> (Tensor[(8, 2), float32], Tensor[(3, 1, 1), float64], Tensor[(3), float64]) {
    %118 = @func_4522() /* ty=(Tensor[(8, 2), float32],) */;
    %119 = cast(%var_7564, dtype="float64") /* ty=Tensor[(3), float64] */;
    %120 = reshape(%119, newshape=[3, 1, 1]) /* ty=Tensor[(3, 1, 1), float64] */;
    %121 = %118.0;
    %122 = @func_5094(%120) /* ty=Tensor[(3, 1, 1), float64] */;
    (%121, %122, %var_7564)
  };
  %123(%var_7568) /* ty=(Tensor[(8, 2), float32], Tensor[(3, 1, 1), float64], Tensor[(3), float64]) */
}

def @func_4988() -> Tensor[(8, 2), float32] {
  %125 = fn () -> Tensor[(8, 2), float32] {
    %124 = @func_3191() /* ty=(Tensor[(8, 2), float32],) */;
    %124.0
  };
  %125() /* ty=Tensor[(8, 2), float32] */
}

def @func_6030(%var_6028: Tensor[(15, 6, 16), float32], %var_6029: Tensor[(1188), float64]) -> (Tensor[(15, 6, 16), int16], Tensor[(15, 6, 16), uint16], Tensor[(8, 2), float32], Tensor[(1188), uint8]) {
  %149 = fn (%var_5982: Tensor[(15, 6, 16), float32], %var_5998: Tensor[(1188), float64]) -> (Tensor[(15, 6, 16), int16], Tensor[(15, 6, 16), uint16], Tensor[(8, 2), float32], Tensor[(1188), uint8]) {
    %126 = cast(meta[relay.Constant][7] /* ty=Tensor[(15, 6, 16), float32] */, dtype="float32") /* ty=Tensor[(15, 6, 16), float32] */;
    %127 = atanh(%126) /* ty=Tensor[(15, 6, 16), float32] */;
    %128 = cast(meta[relay.Constant][7] /* ty=Tensor[(15, 6, 16), float32] */, dtype="int16") /* ty=Tensor[(15, 6, 16), int16] */;
    %129 = shape_of(%127, dtype="int32") /* ty=Tensor[(3), int32] */;
    %130 = cast(%127, dtype="int16") /* ty=Tensor[(15, 6, 16), int16] */;
    %131 = dyn.reshape(%128, %129, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %132 = cast(%var_5982, dtype="uint16") /* ty=Tensor[(15, 6, 16), uint16] */;
    %133 = shape_of(%127, dtype="int32") /* ty=Tensor[(3), int32] */;
    %134 = cast(%127, dtype="uint16") /* ty=Tensor[(15, 6, 16), uint16] */;
    %135 = dyn.reshape(%132, %133, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %136 = @func_2553() /* ty=(Tensor[(8, 2), float32],) */;
    %137 = cast(%var_5998, dtype="float64") /* ty=Tensor[(1188), float64] */;
    %138 = reshape(%137, newshape=[9, 12, 11]) /* ty=Tensor[(9, 12, 11), float64] */;
    %139 = @func_4165(%138) /* ty=(Tensor[(9, 12, 11), float32],) */;
    %140 = %139.0;
    %141 = cast(%140, dtype="uint8") /* ty=Tensor[(9, 12, 11), uint8] */;
    %142 = shape_of(%var_5998, dtype="int32") /* ty=Tensor[(1), int32] */;
    %143 = cast(%var_5998, dtype="uint8") /* ty=Tensor[(1188), uint8] */;
    %144 = dyn.reshape(%141, %142, newshape=[]) /* ty=Tensor[(?), uint8] */;
    %145 = add(%130, %131) /* ty=Tensor[(15, 6, 16), int16] */;
    %146 = maximum(%134, %135) /* ty=Tensor[(15, 6, 16), uint16] */;
    %147 = %136.0;
    %148 = multiply(%143, %144) /* ty=Tensor[(1188), uint8] */;
    (%145, %146, %147, %148)
  };
  %149(%var_6028, %var_6029) /* ty=(Tensor[(15, 6, 16), int16], Tensor[(15, 6, 16), uint16], Tensor[(8, 2), float32], Tensor[(1188), uint8]) */
}

def @func_2804() -> (Tensor[(?, ?, 16), float32], Tensor[(9, 12, 1), float64]) {
  %150 = @func_1692() /* ty=(Tensor[(9, 12, 1), float64], Tensor[(?, ?, 16), float32], float32, Tensor[(8, 2), float32]) */;
  %151 = %150.1;
  %152 = @func_1771() /* ty=Tensor[(9, 12, 1), float64] */;
  (%151, %152)
}

def @func_3659(%var_3658: Tensor[(9, 1, 2), float32]) -> (Tensor[(9, 1, 2), float32],) {
  %155 = fn (%var_3644: Tensor[(9, 1, 2), float32]) -> (Tensor[(9, 1, 2), float32],) {
    %153 = cast(%var_3644, dtype="float32") /* ty=Tensor[(9, 1, 2), float32] */;
    %154 = log(%153) /* ty=Tensor[(9, 1, 2), float32] */;
    (%154,)
  };
  %155(%var_3658) /* ty=(Tensor[(9, 1, 2), float32],) */
}

def @func_7516() -> Tensor[(54), float32] {
  %156 = @func_3629() /* ty=(Tensor[(8, 2), float32], Tensor[(324), float64], Tensor[(54), float32], Tensor[(12, 3, 15), bool]) */;
  %156.2
}

def @func_2895() -> Tensor[(8, 2), float32] {
  %157 = @func_2260() /* ty=(Tensor[(8, 2), float32],) */;
  %157.0
}

def @func_1693() -> (Tensor[(9, 12, 1), float64], Tensor[(?, ?, 16), float32], float32, Tensor[(8, 2), float32]) {
  %166 = fn () -> (Tensor[(9, 12, 1), float64], Tensor[(?, ?, 16), float32], float32, Tensor[(8, 2), float32]) {
    %158 = cast(meta[relay.Constant][8] /* ty=Tensor[(9, 12, 1), float64] */, dtype="float64") /* ty=Tensor[(9, 12, 1), float64] */;
    %159 = cast(-1.75771f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %160 = cast(meta[relay.Constant][9] /* ty=Tensor[(8, 2), float32] */, dtype="float32") /* ty=Tensor[(8, 2), float32] */;
    %161 = reshape(%159, newshape=[]) /* ty=float32 */;
    %162 = reshape(%160, newshape=[1, 1, 16]) /* ty=Tensor[(1, 1, 16), float32] */;
    %163 = @func_369(%161, %162) /* ty=(Tensor[(3, 10, 12), float32], Tensor[(360), float32], Tensor[(?, ?, 16), float32]) */;
    %164 = log10(%158) /* ty=Tensor[(9, 12, 1), float64] */;
    %165 = %163.2;
    (%164, %165, -1.75771f /* ty=float32 */, meta[relay.Constant][9] /* ty=Tensor[(8, 2), float32] */)
  };
  %166() /* ty=(Tensor[(9, 12, 1), float64], Tensor[(?, ?, 16), float32], float32, Tensor[(8, 2), float32]) */
}

def @func_2260() -> (Tensor[(8, 2), float32],) {
  %167 = @func_1692() /* ty=(Tensor[(9, 12, 1), float64], Tensor[(?, ?, 16), float32], float32, Tensor[(8, 2), float32]) */;
  %168 = %167.3;
  (%168,)
}

def @func_3842(%var_3795: Tensor[(7, 7, 2), uint64], %var_3815: Tensor[(1728), float64]) -> (Tensor[(7, 7, 2), uint64], Tensor[(6, 78), float64], Tensor[(1728), float64], Tensor[(54), float32], Tensor[(50, 6), float32], Tensor[(5, 6, 10), float32]) {
  %169 = cast(meta[relay.Constant][10] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %170 = cast(%var_3795, dtype="uint64") /* ty=Tensor[(7, 7, 2), uint64] */;
  %171 = cast(%var_3815, dtype="float64") /* ty=Tensor[(1728), float64] */;
  %172 = cast(%var_3815, dtype="float64") /* ty=Tensor[(1728), float64] */;
  %173 = cast(meta[relay.Constant][11] /* ty=Tensor[(54), float32] */, dtype="float32") /* ty=Tensor[(54), float32] */;
  %174 = reshape(%171, newshape=[9, 16, 12]) /* ty=Tensor[(9, 16, 12), float64] */;
  %175 = reshape(%172, newshape=[9, 16, 12]) /* ty=Tensor[(9, 16, 12), float64] */;
  %176 = reshape(%173, newshape=[54]) /* ty=Tensor[(54), float32] */;
  %177 = @func_935(%174, %175, %176) /* ty=(Tensor[(9, 16, 12), int8], Tensor[(13, 4, 9), bool], Tensor[(6, 78), float64], Tensor[(6, 3, 3), float32], Tensor[(54), float32], Tensor[(9, 16, 12), float64], Tensor[(13, 4, 9), bool], Tensor[(9, 16, 12), float64], Tensor[(6, 3, 3), float32]) */;
  %178 = cast(meta[relay.Constant][12] /* ty=Tensor[(50, 6), float32] */, dtype="float32") /* ty=Tensor[(50, 6), float32] */;
  %179 = reshape(%178, newshape=[5, 6, 10]) /* ty=Tensor[(5, 6, 10), float32] */;
  %180 = @func_2000(%179) /* ty=(Tensor[(5, 6, 10), float32], Tensor[(8, 2), float32]) */;
  %181 = %180.0;
  %182 = cast(%181, dtype="float32") /* ty=Tensor[(5, 6, 10), float32] */;
  %183 = right_shift(%169, %170) /* ty=Tensor[(7, 7, 2), uint64] */;
  %184 = %177.2;
  %185 = log2(%182) /* ty=Tensor[(5, 6, 10), float32] */;
  (%183, %184, %var_3815, meta[relay.Constant][11] /* ty=Tensor[(54), float32] */, meta[relay.Constant][12] /* ty=Tensor[(50, 6), float32] */, %185)
}

def @func_2633(%var_2632: Tensor[(27, 2), float32]) -> (Tensor[(8, 2), float32], Tensor[(6, 3, 3), float32], Tensor[(27, 2), float32]) {
  %194 = fn (%var_2618: Tensor[(27, 2), float32]) -> (Tensor[(8, 2), float32], Tensor[(6, 3, 3), float32], Tensor[(27, 2), float32]) {
    %186 = @func_1692() /* ty=(Tensor[(9, 12, 1), float64], Tensor[(?, ?, 16), float32], float32, Tensor[(8, 2), float32]) */;
    %187 = cast(%var_2618, dtype="float32") /* ty=Tensor[(27, 2), float32] */;
    %188 = reshape(%187, newshape=[6, 3, 3]) /* ty=Tensor[(6, 3, 3), float32] */;
    %189 = @func_813(%188) /* ty=(Tensor[(6, 3, 3), float32],) */;
    %190 = cast(%var_2618, dtype="float32") /* ty=Tensor[(27, 2), float32] */;
    %191 = %186.3;
    %192 = %189.0;
    %193 = tan(%190) /* ty=Tensor[(27, 2), float32] */;
    (%191, %192, %193)
  };
  %194(%var_2632) /* ty=(Tensor[(8, 2), float32], Tensor[(6, 3, 3), float32], Tensor[(27, 2), float32]) */
}

def @func_4260() -> (Tensor[(8, 2), float32], Tensor[(15, 13, 4), uint64], Tensor[(7800), int8], float32) {
  @func_4258() /* ty=(Tensor[(8, 2), float32], Tensor[(15, 13, 4), uint64], Tensor[(7800), int8], float32) */
}

def @func_372(%var_370: float32, %var_371: Tensor[(1, 1, 16), float32]) -> (Tensor[(3, 10, 12), float32], Tensor[(360), float32], Tensor[(?, ?, 16), float32]) {
  %210 = fn (%var_340: float32, %var_341: Tensor[(1, 1, 16), float32]) -> (Tensor[(3, 10, 12), float32], Tensor[(360), float32], Tensor[(?, ?, 16), float32]) {
    %195 = cast(meta[relay.Constant][13] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
    %196 = reshape(%195, newshape=[3, 10, 12]) /* ty=Tensor[(3, 10, 12), float32] */;
    %197 = cast(%var_340, dtype="float32") /* ty=float32 */;
    %198 = cast(%var_341, dtype="float32") /* ty=Tensor[(1, 1, 16), float32] */;
    %199 = divide(%197, %198) /* ty=Tensor[(1, 1, 16), float32] */;
    %200 = cast(%199, dtype="float64") /* ty=Tensor[(1, 1, 16), float64] */;
    %201 = exp(%200) /* ty=Tensor[(1, 1, 16), float64] */;
    %202 = cast(%201, dtype="float64") /* ty=Tensor[(1, 1, 16), float64] */;
    %203 = rsqrt(%202) /* ty=Tensor[(1, 1, 16), float64] */;
    %204 = cast(%201, dtype="float32") /* ty=Tensor[(1, 1, 16), float32] */;
    %205 = shape_of(%203, dtype="int32") /* ty=Tensor[(3), int32] */;
    %206 = cast(%203, dtype="float32") /* ty=Tensor[(1, 1, 16), float32] */;
    %207 = dyn.reshape(%204, %205, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %208 = @func_50(%196) /* ty=Tensor[(3, 10, 12), float32] */;
    %209 = floor_divide(%206, %207) /* ty=Tensor[(?, ?, 16), float32] */;
    (%208, meta[relay.Constant][13] /* ty=Tensor[(360), float32] */, %209)
  };
  %210(%var_370, %var_371) /* ty=(Tensor[(3, 10, 12), float32], Tensor[(360), float32], Tensor[(?, ?, 16), float32]) */
}

def @func_2262() -> (Tensor[(8, 2), float32],) {
  @func_2260() /* ty=(Tensor[(8, 2), float32],) */
}

def @func_7772() -> (Tensor[(54), float32], Tensor[(7800), bool]) {
  @func_7770() /* ty=(Tensor[(54), float32], Tensor[(7800), bool]) */
}

def @func_4061(%var_4059: Tensor[(54), float32]) -> (Tensor[(9, 12, 1), float32], Tensor[(12, 3, 1), float32], Tensor[(6, 3, 3), float32], Tensor[(54), float32]) {
  %211 = @func_3348() /* ty=Tensor[(12, 3, 1), float32] */;
  %212 = cast(%211, dtype="float32") /* ty=Tensor[(12, 3, 1), float32] */;
  %213 = cast(%var_4059, dtype="float32") /* ty=Tensor[(54), float32] */;
  %214 = reshape(%213, newshape=[6, 3, 3]) /* ty=Tensor[(6, 3, 3), float32] */;
  %215 = @func_813(%214) /* ty=(Tensor[(6, 3, 3), float32],) */;
  %216 = @func_3766() /* ty=Tensor[(9, 12, 1), float32] */;
  %217 = acosh(%212) /* ty=Tensor[(12, 3, 1), float32] */;
  %218 = %215.0;
  (%216, %217, %218, %var_4059)
}

def @func_6443(%var_6441: Tensor[(9, 12, 6), float64]) -> (Tensor[(9, 12, 6), bool], Tensor[(54), float32]) {
  @func_6440(%var_6441) /* ty=(Tensor[(9, 12, 6), bool], Tensor[(54), float32]) */
}

def @func_2000(%var_1992: Tensor[(5, 6, 10), float32]) -> (Tensor[(5, 6, 10), float32], Tensor[(8, 2), float32]) {
  %219 = cast(%var_1992, dtype="float32") /* ty=Tensor[(5, 6, 10), float32] */;
  %220 = @func_1692() /* ty=(Tensor[(9, 12, 1), float64], Tensor[(?, ?, 16), float32], float32, Tensor[(8, 2), float32]) */;
  %221 = cosh(%219) /* ty=Tensor[(5, 6, 10), float32] */;
  %222 = %220.3;
  (%221, %222)
}

def @func_7355() -> Tensor[(54), float32] {
  %224 = fn () -> Tensor[(54), float32] {
    %223 = @func_5576() /* ty=(Tensor[(54), float32],) */;
    %223.0
  };
  %224() /* ty=Tensor[(54), float32] */
}

def @func_3561(%var_3559: Tensor[(468), float64]) -> (Tensor[(8, 2), float32], Tensor[(13, 4, 9), bool], Tensor[(468), float64]) {
  @func_3558(%var_3559) /* ty=(Tensor[(8, 2), float32], Tensor[(13, 4, 9), bool], Tensor[(468), float64]) */
}

def @func_7130(%var_7128: Tensor[(15, 3, 1), float64], %var_7129: Tensor[(54), float32]) -> (Tensor[(15, 3, 1), float64], Tensor[(27, 2), float32], Tensor[(54), float32]) {
  %231 = fn (%var_7114: Tensor[(15, 3, 1), float64], %var_7123: Tensor[(54), float32]) -> (Tensor[(15, 3, 1), float64], Tensor[(27, 2), float32], Tensor[(54), float32]) {
    %225 = cast(%var_7114, dtype="float64") /* ty=Tensor[(15, 3, 1), float64] */;
    %226 = cast(%var_7123, dtype="float32") /* ty=Tensor[(54), float32] */;
    %227 = reshape(%226, newshape=[27, 2]) /* ty=Tensor[(27, 2), float32] */;
    %228 = @func_2631(%227) /* ty=(Tensor[(8, 2), float32], Tensor[(6, 3, 3), float32], Tensor[(27, 2), float32]) */;
    %229 = atanh(%225) /* ty=Tensor[(15, 3, 1), float64] */;
    %230 = %228.2;
    (%229, %230, %var_7123)
  };
  %231(%var_7128, %var_7129) /* ty=(Tensor[(15, 3, 1), float64], Tensor[(27, 2), float32], Tensor[(54), float32]) */
}

def @func_2775(%var_2772: Tensor[(360), float32], %var_2773: Tensor[(300), float32], %var_2774: int32) -> (Tensor[(9, 12, 1), float64], Tensor[(3, 10, 12), float32], Tensor[(360), float32], Tensor[(5, 6, 10), float32], Tensor[(300), float32], Tensor[(9, 13, 1), int32], int32) {
  @func_2770(%var_2772, %var_2773, %var_2774) /* ty=(Tensor[(9, 12, 1), float64], Tensor[(3, 10, 12), float32], Tensor[(360), float32], Tensor[(5, 6, 10), float32], Tensor[(300), float32], Tensor[(9, 13, 1), int32], int32) */
}

def @func_4737(%var_4708: Tensor[(1728), float64], %var_4729: float32) -> (Tensor[(8, 2), float32], Tensor[(50, 6), float32], Tensor[(1728), float64], Tensor[(98, 1), float32], Tensor[(3, 10, 12), float32], float32) {
  %232 = @func_4522() /* ty=(Tensor[(8, 2), float32],) */;
  %233 = cast(meta[relay.Constant][14] /* ty=Tensor[(98, 1), uint64] */, dtype="uint64") /* ty=Tensor[(98, 1), uint64] */;
  %234 = cast(%var_4708, dtype="float64") /* ty=Tensor[(1728), float64] */;
  %235 = reshape(%233, newshape=[7, 7, 2]) /* ty=Tensor[(7, 7, 2), uint64] */;
  %236 = reshape(%234, newshape=[1728]) /* ty=Tensor[(1728), float64] */;
  %237 = @func_3842(%235, %236) /* ty=(Tensor[(7, 7, 2), uint64], Tensor[(6, 78), float64], Tensor[(1728), float64], Tensor[(54), float32], Tensor[(50, 6), float32], Tensor[(5, 6, 10), float32]) */;
  %238 = cast(meta[relay.Constant][14] /* ty=Tensor[(98, 1), uint64] */, dtype="float32") /* ty=Tensor[(98, 1), float32] */;
  %239 = cast(%var_4729, dtype="float32") /* ty=float32 */;
  %240 = %232.0;
  %241 = cast(%240, dtype="float32") /* ty=Tensor[(8, 2), float32] */;
  %242 = reshape(%239, newshape=[]) /* ty=float32 */;
  %243 = reshape(%241, newshape=[1, 1, 16]) /* ty=Tensor[(1, 1, 16), float32] */;
  %244 = @func_369(%242, %243) /* ty=(Tensor[(3, 10, 12), float32], Tensor[(360), float32], Tensor[(?, ?, 16), float32]) */;
  %245 = %237.4;
  %246 = sqrt(%238) /* ty=Tensor[(98, 1), float32] */;
  %247 = %244.0;
  (%240, %245, %var_4708, %246, %247, %var_4729)
}

def @func_6558() -> Tensor[(7800), int16] {
  %254 = fn () -> Tensor[(7800), int16] {
    %248 = @func_5267() /* ty=(Tensor[(8, 2), float32], Tensor[(7800), float32]) */;
    %249 = %248.1;
    %250 = cast(meta[relay.Constant][15] /* ty=Tensor[(7800), float32] */, dtype="int16") /* ty=Tensor[(7800), int16] */;
    %251 = shape_of(%249, dtype="int32") /* ty=Tensor[(1), int32] */;
    %252 = cast(%249, dtype="int16") /* ty=Tensor[(7800), int16] */;
    %253 = dyn.reshape(%250, %251, newshape=[]) /* ty=Tensor[(?), int16] */;
    bitwise_and(%252, %253) /* ty=Tensor[(7800), int16] */
  };
  %254() /* ty=Tensor[(7800), int16] */
}

def @func_4429() -> Tensor[(9, 12, 1), float64] {
  %256 = fn () -> Tensor[(9, 12, 1), float64] {
    %255 = @func_2172() /* ty=(Tensor[(9, 12, 1), float64],) */;
    %255.0
  };
  %256() /* ty=Tensor[(9, 12, 1), float64] */
}

def @func_5703(%var_5696: Tensor[(1, 54), float32], %var_5698: Tensor[(9, 12, 8), float32]) -> (Tensor[(9, 6), float32], Tensor[(324, 1), float64], Tensor[(1, 54), float32], Tensor[(9, 12, 8), int64]) {
  %257 = cast(meta[relay.Constant][16] /* ty=Tensor[(324, 1), float64] */, dtype="float64") /* ty=Tensor[(324, 1), float64] */;
  %258 = cast(%var_5696, dtype="float32") /* ty=Tensor[(1, 54), float32] */;
  %259 = reshape(%257, newshape=[9, 36]) /* ty=Tensor[(9, 36), float64] */;
  %260 = reshape(%258, newshape=[9, 6]) /* ty=Tensor[(9, 6), float32] */;
  %261 = @func_3454(%259, %260) /* ty=(Tensor[(8, 2), float32], Tensor[(8, 2), float32], Tensor[(12, 3, ?), float32], Tensor[(9, 12, 1), float32], Tensor[(9, 36), float64], Tensor[(13, 4, 9), bool], Tensor[(1728), float64], Tensor[(9, 6), float32], Tensor[(8, 2), float32]) */;
  %262 = @func_2472() /* ty=(float32, Tensor[(9, 12, 1), float32]) */;
  %263 = %262.1;
  %264 = cast(%263, dtype="float32") /* ty=Tensor[(9, 12, 1), float32] */;
  %265 = erf(%264) /* ty=Tensor[(9, 12, 1), float32] */;
  %266 = cast(%265, dtype="int64") /* ty=Tensor[(9, 12, 1), int64] */;
  %267 = cast(%var_5698, dtype="int64") /* ty=Tensor[(9, 12, 8), int64] */;
  %268 = %261.7;
  %269 = bitwise_and(%266, %267) /* ty=Tensor[(9, 12, 8), int64] */;
  (%268, meta[relay.Constant][16] /* ty=Tensor[(324, 1), float64] */, %var_5696, %269)
}

def @func_5780(%var_5778: Tensor[(360), float32], %var_5779: Tensor[(16, 2, 16), float64]) -> (Tensor[(9, 12, 1), float32], Tensor[(54), float32], Tensor[(54), float32], Tensor[(8, 2), float32], Tensor[(3, 10, 12), float32], Tensor[(360), float32], Tensor[(16, 2, 16), bool]) {
  %287 = fn (%var_5752: Tensor[(360), float32], %var_5769: Tensor[(16, 2, 16), float64]) -> (Tensor[(9, 12, 1), float32], Tensor[(54), float32], Tensor[(54), float32], Tensor[(8, 2), float32], Tensor[(3, 10, 12), float32], Tensor[(360), float32], Tensor[(16, 2, 16), bool]) {
    %270 = cast(meta[relay.Constant][17] /* ty=Tensor[(54), float32] */, dtype="float32") /* ty=Tensor[(54), float32] */;
    %271 = reshape(%270, newshape=[54]) /* ty=Tensor[(54), float32] */;
    %272 = @func_4061(%271) /* ty=(Tensor[(9, 12, 1), float32], Tensor[(12, 3, 1), float32], Tensor[(6, 3, 3), float32], Tensor[(54), float32]) */;
    %273 = cast(meta[relay.Constant][17] /* ty=Tensor[(54), float32] */, dtype="float32") /* ty=Tensor[(54), float32] */;
    %274 = reshape(%273, newshape=[54]) /* ty=Tensor[(54), float32] */;
    %275 = @func_4061(%274) /* ty=(Tensor[(9, 12, 1), float32], Tensor[(12, 3, 1), float32], Tensor[(6, 3, 3), float32], Tensor[(54), float32]) */;
    %276 = @func_5175() /* ty=(Tensor[(9, 12, 1), float32], Tensor[(9, 12, 1), float32], Tensor[(9, 13, 1), int32], int32, Tensor[(8, 2), float32]) */;
    %277 = cast(%var_5752, dtype="float32") /* ty=Tensor[(360), float32] */;
    %278 = reshape(%277, newshape=[3, 10, 12]) /* ty=Tensor[(3, 10, 12), float32] */;
    %279 = @func_4585() /* ty=Tensor[(?, ?, 16), float64] */;
    %280 = cast(%279, dtype="bool") /* ty=Tensor[(?, ?, 16), bool] */;
    %281 = cast(%var_5769, dtype="bool") /* ty=Tensor[(16, 2, 16), bool] */;
    %282 = %272.0;
    %283 = %275.3;
    %284 = %276.4;
    %285 = @func_50(%278) /* ty=Tensor[(3, 10, 12), float32] */;
    %286 = greater(%280, %281) /* ty=Tensor[(16, 2, 16), bool] */;
    (%282, meta[relay.Constant][17] /* ty=Tensor[(54), float32] */, %283, %284, %285, %var_5752, %286)
  };
  %287(%var_5778, %var_5779) /* ty=(Tensor[(9, 12, 1), float32], Tensor[(54), float32], Tensor[(54), float32], Tensor[(8, 2), float32], Tensor[(3, 10, 12), float32], Tensor[(360), float32], Tensor[(16, 2, 16), bool]) */
}

def @func_3846(%var_3844: Tensor[(7, 7, 2), uint64], %var_3845: Tensor[(1728), float64]) -> (Tensor[(7, 7, 2), uint64], Tensor[(6, 78), float64], Tensor[(1728), float64], Tensor[(54), float32], Tensor[(50, 6), float32], Tensor[(5, 6, 10), float32]) {
  @func_3842(%var_3844, %var_3845) /* ty=(Tensor[(7, 7, 2), uint64], Tensor[(6, 78), float64], Tensor[(1728), float64], Tensor[(54), float32], Tensor[(50, 6), float32], Tensor[(5, 6, 10), float32]) */
}

def @func_4284() -> Tensor[(9, 12, 3), float32] {
  @func_4282() /* ty=Tensor[(9, 12, 3), float32] */
}

def @func_6247() -> (Tensor[(?, ?, 16), float32], Tensor[(?, ?, 16), float64]) {
  %293 = fn () -> (Tensor[(?, ?, 16), float32], Tensor[(?, ?, 16), float64]) {
    %288 = @func_5141() /* ty=(Tensor[(?, ?, 16), float32],) */;
    %289 = %288.0;
    %290 = cast(%289, dtype="float32") /* ty=Tensor[(?, ?, 16), float32] */;
    %291 = log10(%290) /* ty=Tensor[(?, ?, 16), float32] */;
    %292 = @func_4585() /* ty=Tensor[(?, ?, 16), float64] */;
    (%291, %292)
  };
  %293() /* ty=(Tensor[(?, ?, 16), float32], Tensor[(?, ?, 16), float64]) */
}

def @main() -> Tensor[(?, ?, 16), float32] {
  %294 = @func_3914() /* ty=(Tensor[(?, ?, 16), float32],) */;
  %295 = %294.0;
  %296 = cast(%295, dtype="float32") /* ty=Tensor[(?, ?, 16), float32] */;
  sinh(%296) /* ty=Tensor[(?, ?, 16), float32] */
}

def @func_5660() -> Tensor[(13, 10, 11), float64] {
  %297 = cast(meta[relay.Constant][18] /* ty=Tensor[(13, 10, 11), float64] */, dtype="float64") /* ty=Tensor[(13, 10, 11), float64] */;
  acos(%297) /* ty=Tensor[(13, 10, 11), float64] */
}

def @func_5476(%var_5453: Tensor[(16, 9, 12), float64]) -> (Tensor[(16, 9, 12), float64],) {
  %298 = cast(%var_5453, dtype="float64") /* ty=Tensor[(16, 9, 12), float64] */;
  %299 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(16, 9, 12), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %300 = cast(meta[relay.Constant][19] /* ty=Tensor[(16, 9, 12), float64] */, dtype="float64") /* ty=Tensor[(16, 9, 12), float64] */;
  %301 = dyn.reshape(%298, %299, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %302 = maximum(%300, %301) /* ty=Tensor[(16, 9, 12), float64] */;
  (%302,)
}

def @func_7243() -> (Tensor[(108), int8], Tensor[(9, 12, 1), float32], Tensor[(8, 2), float32], Tensor[(?, ?, 16), float32]) {
  %315 = fn () -> (Tensor[(108), int8], Tensor[(9, 12, 1), float32], Tensor[(8, 2), float32], Tensor[(?, ?, 16), float32]) {
    %303 = cast(meta[relay.Constant][20] /* ty=Tensor[(108), int8] */, dtype="int8") /* ty=Tensor[(108), int8] */;
    %304 = reshape(%303, newshape=[9, 12, 1]) /* ty=Tensor[(9, 12, 1), int8] */;
    %305 = @func_6213(%304) /* ty=(Tensor[(9, 12, ?), int16], Tensor[(8, 2), float32], Tensor[(?, ?, 16), float64], Tensor[(?, ?, 16), float32], Tensor[(9, 12, 1), float64], Tensor[(?, ?, 16), float64], Tensor[(?, ?, 16), float32]) */;
    %306 = %305.6;
    %307 = @func_4585() /* ty=Tensor[(?, ?, 16), float64] */;
    %308 = cast(%307, dtype="float32") /* ty=Tensor[(?, ?, 16), float32] */;
    %309 = shape_of(%306, dtype="int32") /* ty=Tensor[(3), int32] */;
    %310 = cast(%306, dtype="float32") /* ty=Tensor[(?, ?, 16), float32] */;
    %311 = dyn.reshape(%308, %309, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %312 = @func_2499() /* ty=Tensor[(9, 12, 1), float32] */;
    %313 = @func_2895() /* ty=Tensor[(8, 2), float32] */;
    %314 = maximum(%310, %311) /* ty=Tensor[(?, ?, 16), float32] */;
    (meta[relay.Constant][20] /* ty=Tensor[(108), int8] */, %312, %313, %314)
  };
  %315() /* ty=(Tensor[(108), int8], Tensor[(9, 12, 1), float32], Tensor[(8, 2), float32], Tensor[(?, ?, 16), float32]) */
}

def @func_7472(%var_7470: Tensor[(648), float64], %var_7471: int32) -> (Tensor[(8, 2), float32], Tensor[(54), float32], Tensor[(648), float64], Tensor[(8, 2), float32], int32) {
  %328 = fn (%var_7392: Tensor[(648), float64], %var_7453: int32) -> (Tensor[(8, 2), float32], Tensor[(54), float32], Tensor[(648), float64], Tensor[(8, 2), float32], int32) {
    %316 = @func_2553() /* ty=(Tensor[(8, 2), float32],) */;
    %317 = cast(%var_7392, dtype="float64") /* ty=Tensor[(648), float64] */;
    %318 = reshape(%317, newshape=[9, 12, 6]) /* ty=Tensor[(9, 12, 6), float64] */;
    %319 = @func_6440(%318) /* ty=(Tensor[(9, 12, 6), bool], Tensor[(54), float32]) */;
    %320 = cast(%var_7392, dtype="float64") /* ty=Tensor[(648), float64] */;
    %321 = cast(%var_7453, dtype="int32") /* ty=int32 */;
    %322 = reshape(%321, newshape=[]) /* ty=int32 */;
    %323 = @func_6341(%322) /* ty=(Tensor[(8, 2), float32], Tensor[(9, 13, 1), int32], int32) */;
    %324 = %316.0;
    %325 = %319.1;
    %326 = atanh(%320) /* ty=Tensor[(648), float64] */;
    %327 = %323.0;
    (%324, %325, %326, %327, %var_7453)
  };
  %328(%var_7470, %var_7471) /* ty=(Tensor[(8, 2), float32], Tensor[(54), float32], Tensor[(648), float64], Tensor[(8, 2), float32], int32) */
}

def @func_2988(%var_2986: Tensor[(16, 10, 6), float64], %var_2987: Tensor[(16, 10, 6), float64]) -> Tensor[(16, 10, 6), uint64] {
  @func_2984(%var_2986, %var_2987) /* ty=Tensor[(16, 10, 6), uint64] */
}

def @func_6983() -> (Tensor[(9, 12, 1), float32],) {
  %329 = @func_2472() /* ty=(float32, Tensor[(9, 12, 1), float32]) */;
  %330 = %329.1;
  (%330,)
}

def @func_3992(%var_3954: Tensor[(3, 10, 16), float64]) -> Tensor[(3, 10, 16), float64] {
  %331 = cast(%var_3954, dtype="float64") /* ty=Tensor[(3, 10, 16), float64] */;
  exp(%331) /* ty=Tensor[(3, 10, 16), float64] */
}

def @func_5577() -> (Tensor[(54), float32],) {
  %333 = fn () -> (Tensor[(54), float32],) {
    %332 = @func_4501() /* ty=Tensor[(54), float32] */;
    (%332,)
  };
  %333() /* ty=(Tensor[(54), float32],) */
}

def @func_2440(%var_2437: Tensor[(15, 13, 4), int8], %var_2438: Tensor[(15, 13, 4), int8], %var_2439: Tensor[(15, 13, 4), int8]) -> (Tensor[(15, 13, 4), bool], Tensor[(15, 13, 4), uint64], Tensor[(15, 13, 4), float32]) {
  %346 = fn (%var_2399: Tensor[(15, 13, 4), int8], %var_2400: Tensor[(15, 13, 4), int8], %var_2416: Tensor[(15, 13, 4), int8]) -> (Tensor[(15, 13, 4), bool], Tensor[(15, 13, 4), uint64], Tensor[(15, 13, 4), float32]) {
    %334 = cast(%var_2400, dtype="bool") /* ty=Tensor[(15, 13, 4), bool] */;
    %335 = shape_of(%var_2399, dtype="int32") /* ty=Tensor[(3), int32] */;
    %336 = cast(%var_2399, dtype="bool") /* ty=Tensor[(15, 13, 4), bool] */;
    %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %338 = cast(%var_2416, dtype="uint64") /* ty=Tensor[(15, 13, 4), uint64] */;
    %339 = shape_of(%var_2400, dtype="int32") /* ty=Tensor[(3), int32] */;
    %340 = cast(%var_2400, dtype="uint64") /* ty=Tensor[(15, 13, 4), uint64] */;
    %341 = dyn.reshape(%338, %339, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %342 = cast(%var_2416, dtype="float32") /* ty=Tensor[(15, 13, 4), float32] */;
    %343 = less(%336, %337) /* ty=Tensor[(15, 13, 4), bool] */;
    %344 = minimum(%340, %341) /* ty=Tensor[(15, 13, 4), uint64] */;
    %345 = cos(%342) /* ty=Tensor[(15, 13, 4), float32] */;
    (%343, %344, %345)
  };
  %346(%var_2437, %var_2438, %var_2439) /* ty=(Tensor[(15, 13, 4), bool], Tensor[(15, 13, 4), uint64], Tensor[(15, 13, 4), float32]) */
}

def @func_7088() -> Tensor[(8, 2), float32] {
  @func_6516() /* ty=Tensor[(8, 2), float32] */
}

def @func_816(%var_814: Tensor[(6, 3, 3), float32]) -> (Tensor[(6, 3, 3), float32],) {
  @func_813(%var_814) /* ty=(Tensor[(6, 3, 3), float32],) */
}

def @func_2540(%var_2539: Tensor[(10, 780), int8]) -> (Tensor[(15, 13, 4), uint64], Tensor[(10, 780), bool], Tensor[(9, 12, 780), uint8]) {
  %362 = fn (%var_2520: Tensor[(10, 780), int8]) -> (Tensor[(15, 13, 4), uint64], Tensor[(10, 780), bool], Tensor[(9, 12, 780), uint8]) {
    %347 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 780), int8] */, dtype="int8") /* ty=Tensor[(1, 780), int8] */;
    %348 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 780), int8] */, dtype="int8") /* ty=Tensor[(1, 780), int8] */;
    %349 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 780), int8] */, dtype="int8") /* ty=Tensor[(1, 780), int8] */;
    %350 = reshape(%347, newshape=[15, 13, 4]) /* ty=Tensor[(15, 13, 4), int8] */;
    %351 = reshape(%348, newshape=[15, 13, 4]) /* ty=Tensor[(15, 13, 4), int8] */;
    %352 = reshape(%349, newshape=[15, 13, 4]) /* ty=Tensor[(15, 13, 4), int8] */;
    %353 = @func_2436(%350, %351, %352) /* ty=(Tensor[(15, 13, 4), bool], Tensor[(15, 13, 4), uint64], Tensor[(15, 13, 4), float32]) */;
    %354 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 780), int8] */, dtype="bool") /* ty=Tensor[(1, 780), bool] */;
    %355 = cast(%var_2520, dtype="bool") /* ty=Tensor[(10, 780), bool] */;
    %356 = @func_2499() /* ty=Tensor[(9, 12, 1), float32] */;
    %357 = cast(%356, dtype="uint8") /* ty=Tensor[(9, 12, 1), uint8] */;
    %358 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 780), int8] */, dtype="uint8") /* ty=Tensor[(1, 780), uint8] */;
    %359 = %353.1;
    %360 = greater_equal(%354, %355) /* ty=Tensor[(10, 780), bool] */;
    %361 = bitwise_and(%357, %358) /* ty=Tensor[(9, 12, 780), uint8] */;
    (%359, %360, %361)
  };
  %362(%var_2539) /* ty=(Tensor[(15, 13, 4), uint64], Tensor[(10, 780), bool], Tensor[(9, 12, 780), uint8]) */
}

def @func_5960() -> (Tensor[(?, ?, 16), float64], Tensor[(9, 12, 1), float64], Tensor[(8, 2), float32]) {
  @func_5958() /* ty=(Tensor[(?, ?, 16), float64], Tensor[(9, 12, 1), float64], Tensor[(8, 2), float32]) */
}

def @func_3192() -> (Tensor[(8, 2), float32],) {
  %365 = fn () -> (Tensor[(8, 2), float32],) {
    %363 = @func_2553() /* ty=(Tensor[(8, 2), float32],) */;
    %364 = %363.0;
    (%364,)
  };
  %365() /* ty=(Tensor[(8, 2), float32],) */
}

def @func_1987(%var_1985: Tensor[(9, 12, 5), float64], %var_1986: Tensor[(16), float32]) -> (Tensor[(9, 12, 5), float64], Tensor[(360), float32], float32, Tensor[(16), float32]) {
  %376 = fn (%var_1952: Tensor[(9, 12, 5), float64], %var_1961: Tensor[(16), float32]) -> (Tensor[(9, 12, 5), float64], Tensor[(360), float32], float32, Tensor[(16), float32]) {
    %366 = @func_1771() /* ty=Tensor[(9, 12, 1), float64] */;
    %367 = cast(%366, dtype="float64") /* ty=Tensor[(9, 12, 1), float64] */;
    %368 = cast(%var_1952, dtype="float64") /* ty=Tensor[(9, 12, 5), float64] */;
    %369 = cast(8.18021f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %370 = cast(%var_1961, dtype="float32") /* ty=Tensor[(16), float32] */;
    %371 = reshape(%369, newshape=[]) /* ty=float32 */;
    %372 = reshape(%370, newshape=[1, 1, 16]) /* ty=Tensor[(1, 1, 16), float32] */;
    %373 = @func_369(%371, %372) /* ty=(Tensor[(3, 10, 12), float32], Tensor[(360), float32], Tensor[(?, ?, 16), float32]) */;
    %374 = mod(%367, %368) /* ty=Tensor[(9, 12, 5), float64] */;
    %375 = %373.1;
    (%374, %375, 8.18021f /* ty=float32 */, %var_1961)
  };
  %376(%var_1985, %var_1986) /* ty=(Tensor[(9, 12, 5), float64], Tensor[(360), float32], float32, Tensor[(16), float32]) */
}

def @func_3457(%var_3455: Tensor[(9, 36), float64], %var_3456: Tensor[(9, 6), float32]) -> (Tensor[(8, 2), float32], Tensor[(8, 2), float32], Tensor[(12, 3, ?), float32], Tensor[(9, 12, 1), float32], Tensor[(9, 36), float64], Tensor[(13, 4, 9), bool], Tensor[(1728), float64], Tensor[(9, 6), float32], Tensor[(8, 2), float32]) {
  %402 = fn (%var_3417: Tensor[(9, 36), float64], %var_3421: Tensor[(9, 6), float32]) -> (Tensor[(8, 2), float32], Tensor[(8, 2), float32], Tensor[(12, 3, ?), float32], Tensor[(9, 12, 1), float32], Tensor[(9, 36), float64], Tensor[(13, 4, 9), bool], Tensor[(1728), float64], Tensor[(9, 6), float32], Tensor[(8, 2), float32]) {
    %377 = @func_3191() /* ty=(Tensor[(8, 2), float32],) */;
    %378 = @func_3348() /* ty=Tensor[(12, 3, 1), float32] */;
    %379 = cast(%378, dtype="float64") /* ty=Tensor[(12, 3, 1), float64] */;
    %380 = sqrt(%379) /* ty=Tensor[(12, 3, 1), float64] */;
    %381 = cast(%378, dtype="float32") /* ty=Tensor[(12, 3, 1), float32] */;
    %382 = shape_of(%380, dtype="int32") /* ty=Tensor[(3), int32] */;
    %383 = cast(%380, dtype="float32") /* ty=Tensor[(12, 3, 1), float32] */;
    %384 = dyn.reshape(%381, %382, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %385 = cast(%var_3417, dtype="float64") /* ty=Tensor[(9, 36), float64] */;
    %386 = reshape(%385, newshape=[324]) /* ty=Tensor[(324), float64] */;
    %387 = @func_3142(%386) /* ty=(Tensor[(9, 12, 1), float32], Tensor[(9, 12, 3), int32], Tensor[(324), float64]) */;
    %388 = cast(meta[relay.Constant][22] /* ty=Tensor[(1728), float64] */, dtype="float64") /* ty=Tensor[(1728), float64] */;
    %389 = cast(meta[relay.Constant][22] /* ty=Tensor[(1728), float64] */, dtype="float64") /* ty=Tensor[(1728), float64] */;
    %390 = cast(%var_3421, dtype="float32") /* ty=Tensor[(9, 6), float32] */;
    %391 = reshape(%388, newshape=[9, 16, 12]) /* ty=Tensor[(9, 16, 12), float64] */;
    %392 = reshape(%389, newshape=[9, 16, 12]) /* ty=Tensor[(9, 16, 12), float64] */;
    %393 = reshape(%390, newshape=[54]) /* ty=Tensor[(54), float32] */;
    %394 = @func_935(%391, %392, %393) /* ty=(Tensor[(9, 16, 12), int8], Tensor[(13, 4, 9), bool], Tensor[(6, 78), float64], Tensor[(6, 3, 3), float32], Tensor[(54), float32], Tensor[(9, 16, 12), float64], Tensor[(13, 4, 9), bool], Tensor[(9, 16, 12), float64], Tensor[(6, 3, 3), float32]) */;
    %395 = @func_2553() /* ty=(Tensor[(8, 2), float32],) */;
    %396 = %377.0;
    %397 = @func_2895() /* ty=Tensor[(8, 2), float32] */;
    %398 = floor_mod(%383, %384) /* ty=Tensor[(12, 3, ?), float32] */;
    %399 = %387.0;
    %400 = %394.1;
    %401 = %395.0;
    (%396, %397, %398, %399, %var_3417, %400, meta[relay.Constant][22] /* ty=Tensor[(1728), float64] */, %var_3421, %401)
  };
  %402(%var_3455, %var_3456) /* ty=(Tensor[(8, 2), float32], Tensor[(8, 2), float32], Tensor[(12, 3, ?), float32], Tensor[(9, 12, 1), float32], Tensor[(9, 36), float64], Tensor[(13, 4, 9), bool], Tensor[(1728), float64], Tensor[(9, 6), float32], Tensor[(8, 2), float32]) */
}

def @func_3269(%var_3267: Tensor[(540), float64]) -> (float32, Tensor[(540), float64], Tensor[(540), float64]) {
  @func_3266(%var_3267) /* ty=(float32, Tensor[(540), float64], Tensor[(540), float64]) */
}

def @func_4503() -> Tensor[(54), float32] {
  @func_4501() /* ty=Tensor[(54), float32] */
}

def @func_3995(%var_3993: Tensor[(3, 10, 16), float64]) -> Tensor[(3, 10, 16), float64] {
  @func_3992(%var_3993) /* ty=Tensor[(3, 10, 16), float64] */
}

def @func_6068(%var_6067: Tensor[(7, 10, 11), float32]) -> (Tensor[(7, 10, 11), float32],) {
  %405 = fn (%var_6056: Tensor[(7, 10, 11), float32]) -> (Tensor[(7, 10, 11), float32],) {
    %403 = cast(%var_6056, dtype="float32") /* ty=Tensor[(7, 10, 11), float32] */;
    %404 = cos(%403) /* ty=Tensor[(7, 10, 11), float32] */;
    (%404,)
  };
  %405(%var_6067) /* ty=(Tensor[(7, 10, 11), float32],) */
}

def @func_5268() -> (Tensor[(8, 2), float32], Tensor[(7800), float32]) {
  %411 = fn () -> (Tensor[(8, 2), float32], Tensor[(7800), float32]) {
    %406 = @func_4258() /* ty=(Tensor[(8, 2), float32], Tensor[(15, 13, 4), uint64], Tensor[(7800), int8], float32) */;
    %407 = %406.2;
    %408 = cast(%407, dtype="float32") /* ty=Tensor[(7800), float32] */;
    %409 = @func_4682() /* ty=Tensor[(8, 2), float32] */;
    %410 = atan(%408) /* ty=Tensor[(7800), float32] */;
    (%409, %410)
  };
  %411() /* ty=(Tensor[(8, 2), float32], Tensor[(7800), float32]) */
}

def @func_5097(%var_5095: Tensor[(3, 1, 1), float64]) -> Tensor[(3, 1, 1), float64] {
  @func_5094(%var_5095) /* ty=Tensor[(3, 1, 1), float64] */
}

def @func_4363(%var_4361: Tensor[(360), float32], %var_4362: Tensor[(9, 12, 10), float32]) -> (Tensor[(9, 12, 1), float32], Tensor[(3, 10, 12), float32], Tensor[(360), float32], Tensor[(9, 12, 10), bool]) {
  @func_4359(%var_4361, %var_4362) /* ty=(Tensor[(9, 12, 1), float32], Tensor[(3, 10, 12), float32], Tensor[(360), float32], Tensor[(9, 12, 10), bool]) */
}

def @func_6216(%var_6214: Tensor[(9, 12, 1), int8]) -> (Tensor[(9, 12, ?), int16], Tensor[(8, 2), float32], Tensor[(?, ?, 16), float64], Tensor[(?, ?, 16), float32], Tensor[(9, 12, 1), float64], Tensor[(?, ?, 16), float64], Tensor[(?, ?, 16), float32]) {
  @func_6213(%var_6214) /* ty=(Tensor[(9, 12, ?), int16], Tensor[(8, 2), float32], Tensor[(?, ?, 16), float64], Tensor[(?, ?, 16), float32], Tensor[(9, 12, 1), float64], Tensor[(?, ?, 16), float64], Tensor[(?, ?, 16), float32]) */
}

def @func_5344() -> (Tensor[(8, 2), float32],) {
  %413 = fn () -> (Tensor[(8, 2), float32],) {
    %412 = @func_3524() /* ty=Tensor[(8, 2), float32] */;
    (%412,)
  };
  %413() /* ty=(Tensor[(8, 2), float32],) */
}

def @func_2870(%var_2869: Tensor[(540), float64]) -> (Tensor[(8, 2), float32], Tensor[(360), float32], Tensor[(540), float64], Tensor[(27, 2), float32], Tensor[(54), float32]) {
  %426 = fn (%var_2831: Tensor[(540), float64]) -> (Tensor[(8, 2), float32], Tensor[(360), float32], Tensor[(540), float64], Tensor[(27, 2), float32], Tensor[(54), float32]) {
    %414 = @func_2553() /* ty=(Tensor[(8, 2), float32],) */;
    %415 = cast(%var_2831, dtype="float64") /* ty=Tensor[(540), float64] */;
    %416 = %414.0;
    %417 = cast(%416, dtype="float32") /* ty=Tensor[(8, 2), float32] */;
    %418 = reshape(%415, newshape=[9, 12, 5]) /* ty=Tensor[(9, 12, 5), float64] */;
    %419 = reshape(%417, newshape=[16]) /* ty=Tensor[(16), float32] */;
    %420 = @func_1984(%418, %419) /* ty=(Tensor[(9, 12, 5), float64], Tensor[(360), float32], float32, Tensor[(16), float32]) */;
    %421 = cast(meta[relay.Constant][23] /* ty=Tensor[(54), float32] */, dtype="float32") /* ty=Tensor[(54), float32] */;
    %422 = reshape(%421, newshape=[27, 2]) /* ty=Tensor[(27, 2), float32] */;
    %423 = @func_2631(%422) /* ty=(Tensor[(8, 2), float32], Tensor[(6, 3, 3), float32], Tensor[(27, 2), float32]) */;
    %424 = %420.1;
    %425 = %423.2;
    (%416, %424, %var_2831, %425, meta[relay.Constant][23] /* ty=Tensor[(54), float32] */)
  };
  %426(%var_2869) /* ty=(Tensor[(8, 2), float32], Tensor[(360), float32], Tensor[(540), float64], Tensor[(27, 2), float32], Tensor[(54), float32]) */
}

def @func_6862() -> (Tensor[(54), float32], Tensor[(8, 2), float32], Tensor[(9, 12, 1), float32]) {
  %431 = fn () -> (Tensor[(54), float32], Tensor[(8, 2), float32], Tensor[(9, 12, 1), float32]) {
    %427 = @func_5343() /* ty=(Tensor[(8, 2), float32],) */;
    %428 = @func_4501() /* ty=Tensor[(54), float32] */;
    %429 = %427.0;
    %430 = @func_3766() /* ty=Tensor[(9, 12, 1), float32] */;
    (%428, %429, %430)
  };
  %431() /* ty=(Tensor[(54), float32], Tensor[(8, 2), float32], Tensor[(9, 12, 1), float32]) */
}

def @func_6900() -> (Tensor[(9, 12, 1), float64],) {
  @func_6898() /* ty=(Tensor[(9, 12, 1), float64],) */
}

def @func_1892() -> (Tensor[(9, 12, 1), float64],) {
  %434 = fn () -> (Tensor[(9, 12, 1), float64],) {
    %432 = @func_1692() /* ty=(Tensor[(9, 12, 1), float64], Tensor[(?, ?, 16), float32], float32, Tensor[(8, 2), float32]) */;
    %433 = %432.0;
    (%433,)
  };
  %434() /* ty=(Tensor[(9, 12, 1), float64],) */
}

def @func_7108() -> Tensor[(7800), bool] {
  %440 = fn () -> Tensor[(7800), bool] {
    %435 = @func_6557() /* ty=Tensor[(7800), int16] */;
    %436 = cast(meta[relay.Constant][24] /* ty=Tensor[(7800), int16] */, dtype="bool") /* ty=Tensor[(7800), bool] */;
    %437 = shape_of(%435, dtype="int32") /* ty=Tensor[(1), int32] */;
    %438 = cast(%435, dtype="bool") /* ty=Tensor[(7800), bool] */;
    %439 = dyn.reshape(%436, %437, newshape=[]) /* ty=Tensor[(?), bool] */;
    not_equal(%438, %439) /* ty=Tensor[(7800), bool] */
  };
  %440() /* ty=Tensor[(7800), bool] */
}

def @func_1553(%var_1552: Tensor[(13, 7, 13), float64]) -> Tensor[(13, 7, 13), float64] {
  %442 = fn (%var_1537: Tensor[(13, 7, 13), float64]) -> Tensor[(13, 7, 13), float64] {
    %441 = cast(%var_1537, dtype="float64") /* ty=Tensor[(13, 7, 13), float64] */;
    rsqrt(%441) /* ty=Tensor[(13, 7, 13), float64] */
  };
  %442(%var_1552) /* ty=Tensor[(13, 7, 13), float64] */
}

def @func_2553() -> (Tensor[(8, 2), float32],) {
  %443 = @func_2260() /* ty=(Tensor[(8, 2), float32],) */;
  %444 = %443.0;
  (%444,)
}

def @func_4104() -> (Tensor[(9, 12, 1), float64],) {
  %445 = @func_1771() /* ty=Tensor[(9, 12, 1), float64] */;
  %446 = cast(%445, dtype="float64") /* ty=Tensor[(9, 12, 1), float64] */;
  %447 = acosh(%446) /* ty=Tensor[(9, 12, 1), float64] */;
  (%447,)
}

def @func_2003(%var_2001: Tensor[(5, 6, 10), float32]) -> (Tensor[(5, 6, 10), float32], Tensor[(8, 2), float32]) {
  @func_2000(%var_2001) /* ty=(Tensor[(5, 6, 10), float32], Tensor[(8, 2), float32]) */
}

def @func_6440(%var_6426: Tensor[(9, 12, 6), float64]) -> (Tensor[(9, 12, 6), bool], Tensor[(54), float32]) {
  %448 = @func_6385() /* ty=Tensor[(9, 12, 1), float64] */;
  %449 = cast(%448, dtype="bool") /* ty=Tensor[(9, 12, 1), bool] */;
  %450 = cast(%var_6426, dtype="bool") /* ty=Tensor[(9, 12, 6), bool] */;
  %451 = @func_5576() /* ty=(Tensor[(54), float32],) */;
  %452 = greater(%449, %450) /* ty=Tensor[(9, 12, 6), bool] */;
  %453 = %451.0;
  (%452, %453)
}

def @func_53(%var_51: Tensor[(3, 10, 12), float32]) -> Tensor[(3, 10, 12), float32] {
  @func_50(%var_51) /* ty=Tensor[(3, 10, 12), float32] */
}

def @func_50(%var_42: Tensor[(3, 10, 12), float32]) -> Tensor[(3, 10, 12), float32] {
  %454 = cast(meta[relay.Constant][25] /* ty=Tensor[(3, 10, 12), float32] */, dtype="float32") /* ty=Tensor[(3, 10, 12), float32] */;
  %455 = shape_of(%var_42, dtype="int32") /* ty=Tensor[(3), int32] */;
  %456 = cast(%var_42, dtype="float32") /* ty=Tensor[(3, 10, 12), float32] */;
  %457 = dyn.reshape(%454, %455, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  mod(%456, %457) /* ty=Tensor[(3, 10, 12), float32] */
}

def @func_6323() -> Tensor[(9, 12, 1), float64] {
  @func_6321() /* ty=Tensor[(9, 12, 1), float64] */
}

def @func_5827(%var_5826: Tensor[(540), float64]) -> (Tensor[(54), float32], float32, Tensor[(540), float64], Tensor[(540), float64], Tensor[(80), int8], Tensor[(9, 12, 1), float64]) {
  %468 = fn (%var_5812: Tensor[(540), float64]) -> (Tensor[(54), float32], float32, Tensor[(540), float64], Tensor[(540), float64], Tensor[(80), int8], Tensor[(9, 12, 1), float64]) {
    %458 = cast(%var_5812, dtype="float64") /* ty=Tensor[(540), float64] */;
    %459 = reshape(%458, newshape=[540]) /* ty=Tensor[(540), float64] */;
    %460 = @func_3266(%459) /* ty=(float32, Tensor[(540), float64], Tensor[(540), float64]) */;
    %461 = cast(meta[relay.Constant][26] /* ty=Tensor[(80), int8] */, dtype="int8") /* ty=Tensor[(80), int8] */;
    %462 = reshape(%461, newshape=[4, 4, 5]) /* ty=Tensor[(4, 4, 5), int8] */;
    %463 = @func_4801(%462) /* ty=(Tensor[(4, 4, 5), bool], Tensor[(360), float32], Tensor[(540), float64], Tensor[(9, 12, 1), float32], Tensor[(1080), float32]) */;
    %464 = @func_4501() /* ty=Tensor[(54), float32] */;
    %465 = %460.0;
    %466 = %463.2;
    %467 = @func_3700() /* ty=Tensor[(9, 12, 1), float64] */;
    (%464, %465, %var_5812, %466, meta[relay.Constant][26] /* ty=Tensor[(80), int8] */, %467)
  };
  %468(%var_5826) /* ty=(Tensor[(54), float32], float32, Tensor[(540), float64], Tensor[(540), float64], Tensor[(80), int8], Tensor[(9, 12, 1), float64]) */
}

def @func_5329(%var_5328: Tensor[(4, 10, 5), float64]) -> Tensor[(4, 10, 5), float64] {
  %470 = fn (%var_5321: Tensor[(4, 10, 5), float64]) -> Tensor[(4, 10, 5), float64] {
    %469 = cast(%var_5321, dtype="float64") /* ty=Tensor[(4, 10, 5), float64] */;
    sqrt(%469) /* ty=Tensor[(4, 10, 5), float64] */
  };
  %470(%var_5328) /* ty=Tensor[(4, 10, 5), float64] */
}

def @func_6387() -> Tensor[(9, 12, 1), float64] {
  @func_6385() /* ty=Tensor[(9, 12, 1), float64] */
}

def @func_5244(%var_5242: Tensor[(2, 10, 5), float32], %var_5243: Tensor[(2, 10, 5), float32]) -> (Tensor[(2, 10, 5), bool], Tensor[(2, 10, 5), float64], Tensor[(2, 10, 5), float32], Tensor[(8, 2), float32]) {
  @func_5240(%var_5242, %var_5243) /* ty=(Tensor[(2, 10, 5), bool], Tensor[(2, 10, 5), float64], Tensor[(2, 10, 5), float32], Tensor[(8, 2), float32]) */
}

def @func_5879(%var_5860: Tensor[(324), float64], %var_5866: Tensor[(9, 12, 16), float64]) -> (Tensor[(8, 2), float32], Tensor[(3, 10, 16), float64], Tensor[(480), float64], Tensor[(324), uint64], Tensor[(9, 12, 16), int16], Tensor[(8, 2), float32], Tensor[(54), float32]) {
  %471 = cast(meta[relay.Constant][27] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %472 = reshape(%471, newshape=[3, 10, 16]) /* ty=Tensor[(3, 10, 16), float64] */;
  %473 = @func_3629() /* ty=(Tensor[(8, 2), float32], Tensor[(324), float64], Tensor[(54), float32], Tensor[(12, 3, 15), bool]) */;
  %474 = %473.1;
  %475 = cast(%var_5860, dtype="uint64") /* ty=Tensor[(324), uint64] */;
  %476 = shape_of(%474, dtype="int32") /* ty=Tensor[(1), int32] */;
  %477 = cast(%474, dtype="uint64") /* ty=Tensor[(324), uint64] */;
  %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %479 = @func_1771() /* ty=Tensor[(9, 12, 1), float64] */;
  %480 = cast(%479, dtype="int16") /* ty=Tensor[(9, 12, 1), int16] */;
  %481 = cast(%var_5866, dtype="int16") /* ty=Tensor[(9, 12, 16), int16] */;
  %482 = right_shift(%477, %478) /* ty=Tensor[(324), uint64] */;
  %483 = cast(%482, dtype="float64") /* ty=Tensor[(324), float64] */;
  %484 = cast(meta[relay.Constant][28] /* ty=Tensor[(54), float32] */, dtype="float32") /* ty=Tensor[(54), float32] */;
  %485 = reshape(%483, newshape=[9, 36]) /* ty=Tensor[(9, 36), float64] */;
  %486 = reshape(%484, newshape=[9, 6]) /* ty=Tensor[(9, 6), float32] */;
  %487 = @func_3454(%485, %486) /* ty=(Tensor[(8, 2), float32], Tensor[(8, 2), float32], Tensor[(12, 3, ?), float32], Tensor[(9, 12, 1), float32], Tensor[(9, 36), float64], Tensor[(13, 4, 9), bool], Tensor[(1728), float64], Tensor[(9, 6), float32], Tensor[(8, 2), float32]) */;
  %488 = @func_4682() /* ty=Tensor[(8, 2), float32] */;
  %489 = @func_3992(%472) /* ty=Tensor[(3, 10, 16), float64] */;
  %490 = right_shift(%480, %481) /* ty=Tensor[(9, 12, 16), int16] */;
  %491 = %487.8;
  (%488, %489, meta[relay.Constant][27] /* ty=Tensor[(480), float64] */, %482, %490, %491, meta[relay.Constant][28] /* ty=Tensor[(54), float32] */)
}

def @func_2806() -> (Tensor[(?, ?, 16), float32], Tensor[(9, 12, 1), float64]) {
  @func_2804() /* ty=(Tensor[(?, ?, 16), float32], Tensor[(9, 12, 1), float64]) */
}

def @func_4683() -> Tensor[(8, 2), float32] {
  %493 = fn () -> Tensor[(8, 2), float32] {
    %492 = @func_4522() /* ty=(Tensor[(8, 2), float32],) */;
    %492.0
  };
  %493() /* ty=Tensor[(8, 2), float32] */
}

def @func_4803(%var_4802: Tensor[(4, 4, 5), int8]) -> (Tensor[(4, 4, 5), bool], Tensor[(360), float32], Tensor[(540), float64], Tensor[(9, 12, 1), float32], Tensor[(1080), float32]) {
  %507 = fn (%var_4772: Tensor[(4, 4, 5), int8]) -> (Tensor[(4, 4, 5), bool], Tensor[(360), float32], Tensor[(540), float64], Tensor[(9, 12, 1), float32], Tensor[(1080), float32]) {
    %494 = cast(meta[relay.Constant][29] /* ty=Tensor[(4, 4, 1), int8] */, dtype="bool") /* ty=Tensor[(4, 4, 1), bool] */;
    %495 = cast(%var_4772, dtype="bool") /* ty=Tensor[(4, 4, 5), bool] */;
    %496 = cast(meta[relay.Constant][30] /* ty=Tensor[(540), float64] */, dtype="float64") /* ty=Tensor[(540), float64] */;
    %497 = reshape(%496, newshape=[540]) /* ty=Tensor[(540), float64] */;
    %498 = @func_2868(%497) /* ty=(Tensor[(8, 2), float32], Tensor[(360), float32], Tensor[(540), float64], Tensor[(27, 2), float32], Tensor[(54), float32]) */;
    %499 = %498.1;
    %500 = cast(%499, dtype="float32") /* ty=Tensor[(360), float32] */;
    %501 = cast(meta[relay.Constant][31] /* ty=Tensor[(1080), float32] */, dtype="float32") /* ty=Tensor[(1080), float32] */;
    %502 = reshape(%500, newshape=[360]) /* ty=Tensor[(360), float32] */;
    %503 = reshape(%501, newshape=[9, 12, 10]) /* ty=Tensor[(9, 12, 10), float32] */;
    %504 = @func_4359(%502, %503) /* ty=(Tensor[(9, 12, 1), float32], Tensor[(3, 10, 12), float32], Tensor[(360), float32], Tensor[(9, 12, 10), bool]) */;
    %505 = less_equal(%494, %495) /* ty=Tensor[(4, 4, 5), bool] */;
    %506 = %504.0;
    (%505, %499, meta[relay.Constant][30] /* ty=Tensor[(540), float64] */, %506, meta[relay.Constant][31] /* ty=Tensor[(1080), float32] */)
  };
  %507(%var_4802) /* ty=(Tensor[(4, 4, 5), bool], Tensor[(360), float32], Tensor[(540), float64], Tensor[(9, 12, 1), float32], Tensor[(1080), float32]) */
}

def @func_5143() -> (Tensor[(?, ?, 16), float32],) {
  @func_5141() /* ty=(Tensor[(?, ?, 16), float32],) */
}

def @func_3526() -> Tensor[(8, 2), float32] {
  @func_3524() /* ty=Tensor[(8, 2), float32] */
}

def @func_6518() -> Tensor[(8, 2), float32] {
  @func_6516() /* ty=Tensor[(8, 2), float32] */
}

def @func_6516() -> Tensor[(8, 2), float32] {
  @func_4682() /* ty=Tensor[(8, 2), float32] */
}

def @func_5080() -> Tensor[(8, 2), float32] {
  @func_5078() /* ty=Tensor[(8, 2), float32] */
}

def @func_5240(%var_5189: Tensor[(2, 10, 5), float32], %var_5190: Tensor[(2, 10, 5), float32]) -> (Tensor[(2, 10, 5), bool], Tensor[(2, 10, 5), float64], Tensor[(2, 10, 5), float32], Tensor[(8, 2), float32]) {
  %508 = cast(%var_5190, dtype="bool") /* ty=Tensor[(2, 10, 5), bool] */;
  %509 = shape_of(%var_5189, dtype="int32") /* ty=Tensor[(3), int32] */;
  %510 = cast(%var_5189, dtype="bool") /* ty=Tensor[(2, 10, 5), bool] */;
  %511 = dyn.reshape(%508, %509, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %512 = cast(%var_5189, dtype="float32") /* ty=Tensor[(2, 10, 5), float32] */;
  %513 = rsqrt(%512) /* ty=Tensor[(2, 10, 5), float32] */;
  %514 = cast(%513, dtype="float32") /* ty=Tensor[(2, 10, 5), float32] */;
  %515 = atan(%514) /* ty=Tensor[(2, 10, 5), float32] */;
  %516 = cast(%515, dtype="float64") /* ty=Tensor[(2, 10, 5), float64] */;
  %517 = cast(%515, dtype="float32") /* ty=Tensor[(2, 10, 5), float32] */;
  %518 = less_equal(%510, %511) /* ty=Tensor[(2, 10, 5), bool] */;
  %519 = atanh(%516) /* ty=Tensor[(2, 10, 5), float64] */;
  %520 = asin(%517) /* ty=Tensor[(2, 10, 5), float32] */;
  %521 = @func_4987() /* ty=Tensor[(8, 2), float32] */;
  (%518, %519, %520, %521)
}

def @func_4258() -> (Tensor[(8, 2), float32], Tensor[(15, 13, 4), uint64], Tensor[(7800), int8], float32) {
  %522 = cast(meta[relay.Constant][32] /* ty=Tensor[(7800), int8] */, dtype="int8") /* ty=Tensor[(7800), int8] */;
  %523 = reshape(%522, newshape=[10, 780]) /* ty=Tensor[(10, 780), int8] */;
  %524 = @func_2538(%523) /* ty=(Tensor[(15, 13, 4), uint64], Tensor[(10, 780), bool], Tensor[(9, 12, 780), uint8]) */;
  %525 = @func_2472() /* ty=(float32, Tensor[(9, 12, 1), float32]) */;
  %526 = @func_3524() /* ty=Tensor[(8, 2), float32] */;
  %527 = %524.0;
  %528 = %525.0;
  (%526, %527, meta[relay.Constant][32] /* ty=Tensor[(7800), int8] */, %528)
}

def @func_5094(%var_5087: Tensor[(3, 1, 1), float64]) -> Tensor[(3, 1, 1), float64] {
  %529 = cast(%var_5087, dtype="float64") /* ty=Tensor[(3, 1, 1), float64] */;
  acosh(%529) /* ty=Tensor[(3, 1, 1), float64] */
}

def @func_5449() -> (Tensor[(8, 2), float32], Tensor[(9, 12, 11), bool], Tensor[(1188), float32], Tensor[(9, 12, 1), float32]) {
  %530 = cast(meta[relay.Constant][33] /* ty=Tensor[(1188), float32] */, dtype="float32") /* ty=Tensor[(1188), float32] */;
  %531 = cast(meta[relay.Constant][33] /* ty=Tensor[(1188), float32] */, dtype="float32") /* ty=Tensor[(1188), float32] */;
  %532 = reshape(%530, newshape=[9, 12, 11]) /* ty=Tensor[(9, 12, 11), float32] */;
  %533 = reshape(%531, newshape=[9, 12, 11]) /* ty=Tensor[(9, 12, 11), float32] */;
  %534 = @func_4877(%532, %533) /* ty=(Tensor[(9, 12, 11), float64], Tensor[(8, 2), float32], Tensor[(8, 2), float32], Tensor[(9, 12, 1), float32], Tensor[(9, 12, 11), bool], Tensor[(540), float64], Tensor[(80), int8]) */;
  %535 = @func_2895() /* ty=Tensor[(8, 2), float32] */;
  %536 = %534.4;
  %537 = @func_2499() /* ty=Tensor[(9, 12, 1), float32] */;
  (%535, %536, meta[relay.Constant][33] /* ty=Tensor[(1188), float32] */, %537)
}

def @func_6296(%var_6295: Tensor[(80), int8]) -> (Tensor[(?, ?, 16), float32], Tensor[(80), int8], Tensor[(1080), bool]) {
  %549 = fn (%var_6264: Tensor[(80), int8]) -> (Tensor[(?, ?, 16), float32], Tensor[(80), int8], Tensor[(1080), bool]) {
    %538 = @func_2804() /* ty=(Tensor[(?, ?, 16), float32], Tensor[(9, 12, 1), float64]) */;
    %539 = cast(%var_6264, dtype="int8") /* ty=Tensor[(80), int8] */;
    %540 = reshape(%539, newshape=[4, 4, 5]) /* ty=Tensor[(4, 4, 5), int8] */;
    %541 = @func_4801(%540) /* ty=(Tensor[(4, 4, 5), bool], Tensor[(360), float32], Tensor[(540), float64], Tensor[(9, 12, 1), float32], Tensor[(1080), float32]) */;
    %542 = %541.4;
    %543 = cast(meta[relay.Constant][34] /* ty=Tensor[(1080), float32] */, dtype="bool") /* ty=Tensor[(1080), bool] */;
    %544 = shape_of(%542, dtype="int32") /* ty=Tensor[(1), int32] */;
    %545 = cast(%542, dtype="bool") /* ty=Tensor[(1080), bool] */;
    %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?), bool] */;
    %547 = %538.0;
    %548 = less(%545, %546) /* ty=Tensor[(1080), bool] */;
    (%547, %var_6264, %548)
  };
  %549(%var_6295) /* ty=(Tensor[(?, ?, 16), float32], Tensor[(80), int8], Tensor[(1080), bool]) */
}

def @func_5883(%var_5881: Tensor[(324), float64], %var_5882: Tensor[(9, 12, 16), float64]) -> (Tensor[(8, 2), float32], Tensor[(3, 10, 16), float64], Tensor[(480), float64], Tensor[(324), uint64], Tensor[(9, 12, 16), int16], Tensor[(8, 2), float32], Tensor[(54), float32]) {
  @func_5879(%var_5881, %var_5882) /* ty=(Tensor[(8, 2), float32], Tensor[(3, 10, 16), float64], Tensor[(480), float64], Tensor[(324), uint64], Tensor[(9, 12, 16), int16], Tensor[(8, 2), float32], Tensor[(54), float32]) */
}

def @func_3702() -> Tensor[(9, 12, 1), float64] {
  @func_3700() /* ty=Tensor[(9, 12, 1), float64] */
}

def @func_2377(%var_2375: int32) -> Tensor[(9, 13, 1), int32] {
  @func_2374(%var_2375) /* ty=Tensor[(9, 13, 1), int32] */
}

def @func_6213(%var_6134: Tensor[(9, 12, 1), int8]) -> (Tensor[(9, 12, ?), int16], Tensor[(8, 2), float32], Tensor[(?, ?, 16), float64], Tensor[(?, ?, 16), float32], Tensor[(9, 12, 1), float64], Tensor[(?, ?, 16), float64], Tensor[(?, ?, 16), float32]) {
  %550 = @func_3766() /* ty=Tensor[(9, 12, 1), float32] */;
  %551 = cast(%550, dtype="float64") /* ty=Tensor[(9, 12, 1), float64] */;
  %552 = asinh(%551) /* ty=Tensor[(9, 12, 1), float64] */;
  %553 = cast(%550, dtype="int8") /* ty=Tensor[(9, 12, 1), int8] */;
  %554 = shape_of(%552, dtype="int32") /* ty=Tensor[(3), int32] */;
  %555 = cast(%552, dtype="int8") /* ty=Tensor[(9, 12, 1), int8] */;
  %556 = dyn.reshape(%553, %554, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %557 = bitwise_xor(%555, %556) /* ty=Tensor[(9, 12, ?), int8] */;
  %558 = cast(%var_6134, dtype="int16") /* ty=Tensor[(9, 12, 1), int16] */;
  %559 = shape_of(%557, dtype="int32") /* ty=Tensor[(3), int32] */;
  %560 = cast(%557, dtype="int16") /* ty=Tensor[(9, 12, ?), int16] */;
  %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %562 = @func_5048() /* ty=(Tensor[(8, 2), float32],) */;
  %563 = @func_3913() /* ty=(Tensor[(?, ?, 16), float32],) */;
  %564 = @func_4104() /* ty=(Tensor[(9, 12, 1), float64],) */;
  %565 = @func_2804() /* ty=(Tensor[(?, ?, 16), float32], Tensor[(9, 12, 1), float64]) */;
  %566 = minimum(%560, %561) /* ty=Tensor[(9, 12, ?), int16] */;
  %567 = %562.0;
  %568 = @func_4585() /* ty=Tensor[(?, ?, 16), float64] */;
  %569 = %563.0;
  %570 = %564.0;
  %571 = @func_4585() /* ty=Tensor[(?, ?, 16), float64] */;
  %572 = %565.0;
  (%566, %567, %568, %569, %570, %571, %572)
}

def @func_7158() -> Tensor[(8, 2), float32] {
  %574 = fn () -> Tensor[(8, 2), float32] {
    %573 = @func_5343() /* ty=(Tensor[(8, 2), float32],) */;
    %573.0
  };
  %574() /* ty=Tensor[(8, 2), float32] */
}

def @func_6732(%var_6707: Tensor[(540), float64], %var_6726: Tensor[(1188), float32], %var_6729: int32) -> (Tensor[(9, 12, ?), bool], Tensor[(540), float64], Tensor[(9, 12, 540), bool], Tensor[(8, 2), float32], Tensor[(1188), float32], Tensor[(5, 12, 6), float32], int32) {
  %575 = @func_2804() /* ty=(Tensor[(?, ?, 16), float32], Tensor[(9, 12, 1), float64]) */;
  %576 = %575.1;
  %577 = cast(%576, dtype="float32") /* ty=Tensor[(9, 12, 1), float32] */;
  %578 = log2(%577) /* ty=Tensor[(9, 12, 1), float32] */;
  %579 = cast(%576, dtype="bool") /* ty=Tensor[(9, 12, 1), bool] */;
  %580 = shape_of(%578, dtype="int32") /* ty=Tensor[(3), int32] */;
  %581 = cast(%578, dtype="bool") /* ty=Tensor[(9, 12, 1), bool] */;
  %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %583 = cast(%var_6707, dtype="float64") /* ty=Tensor[(540), float64] */;
  %584 = reshape(%583, newshape=[540]) /* ty=Tensor[(540), float64] */;
  %585 = @func_3266(%584) /* ty=(float32, Tensor[(540), float64], Tensor[(540), float64]) */;
  %586 = cast(%578, dtype="bool") /* ty=Tensor[(9, 12, 1), bool] */;
  %587 = cast(%var_6707, dtype="bool") /* ty=Tensor[(540), bool] */;
  %588 = cast(%var_6726, dtype="float32") /* ty=Tensor[(1188), float32] */;
  %589 = cast(%var_6726, dtype="float32") /* ty=Tensor[(1188), float32] */;
  %590 = reshape(%588, newshape=[9, 12, 11]) /* ty=Tensor[(9, 12, 11), float32] */;
  %591 = reshape(%589, newshape=[9, 12, 11]) /* ty=Tensor[(9, 12, 11), float32] */;
  %592 = @func_4877(%590, %591) /* ty=(Tensor[(9, 12, 11), float64], Tensor[(8, 2), float32], Tensor[(8, 2), float32], Tensor[(9, 12, 1), float32], Tensor[(9, 12, 11), bool], Tensor[(540), float64], Tensor[(80), int8]) */;
  %593 = cast(%var_6729, dtype="int32") /* ty=int32 */;
  %594 = reshape(%593, newshape=[]) /* ty=int32 */;
  %595 = @func_6611(%594) /* ty=(Tensor[(5, 12, 6), float32], Tensor[(9, 13, 1), int32], int32, Tensor[(5, 12, 6), float32]) */;
  %596 = not_equal(%581, %582) /* ty=Tensor[(9, 12, ?), bool] */;
  %597 = %585.1;
  %598 = not_equal(%586, %587) /* ty=Tensor[(9, 12, 540), bool] */;
  %599 = %592.2;
  %600 = %595.3;
  (%596, %597, %598, %599, %var_6726, %600, %var_6729)
}

def @func_6613(%var_6612: int32) -> (Tensor[(5, 12, 6), float32], Tensor[(9, 13, 1), int32], int32, Tensor[(5, 12, 6), float32]) {
  %613 = fn (%var_6590: int32) -> (Tensor[(5, 12, 6), float32], Tensor[(9, 13, 1), int32], int32, Tensor[(5, 12, 6), float32]) {
    %601 = cast(meta[relay.Constant][35] /* ty=Tensor[(5, 12, 6), float32] */, dtype="float32") /* ty=Tensor[(5, 12, 6), float32] */;
    %602 = log2(%601) /* ty=Tensor[(5, 12, 6), float32] */;
    %603 = cast(%602, dtype="float32") /* ty=Tensor[(5, 12, 6), float32] */;
    %604 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(5, 12, 6), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %605 = cast(meta[relay.Constant][35] /* ty=Tensor[(5, 12, 6), float32] */, dtype="float32") /* ty=Tensor[(5, 12, 6), float32] */;
    %606 = dyn.reshape(%603, %604, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %607 = cast(%var_6590, dtype="int32") /* ty=int32 */;
    %608 = reshape(%607, newshape=[]) /* ty=int32 */;
    %609 = cast(%602, dtype="float32") /* ty=Tensor[(5, 12, 6), float32] */;
    %610 = power(%605, %606) /* ty=Tensor[(5, 12, 6), float32] */;
    %611 = @func_2374(%608) /* ty=Tensor[(9, 13, 1), int32] */;
    %612 = log(%609) /* ty=Tensor[(5, 12, 6), float32] */;
    (%610, %611, %var_6590, %612)
  };
  %613(%var_6612) /* ty=(Tensor[(5, 12, 6), float32], Tensor[(9, 13, 1), int32], int32, Tensor[(5, 12, 6), float32]) */
}

def @func_2473() -> (float32, Tensor[(9, 12, 1), float32]) {
  %619 = fn () -> (float32, Tensor[(9, 12, 1), float32]) {
    %614 = @func_1692() /* ty=(Tensor[(9, 12, 1), float64], Tensor[(?, ?, 16), float32], float32, Tensor[(8, 2), float32]) */;
    %615 = @func_1771() /* ty=Tensor[(9, 12, 1), float64] */;
    %616 = cast(%615, dtype="float32") /* ty=Tensor[(9, 12, 1), float32] */;
    %617 = %614.2;
    %618 = exp(%616) /* ty=Tensor[(9, 12, 1), float32] */;
    (%617, %618)
  };
  %619() /* ty=(float32, Tensor[(9, 12, 1), float32]) */
}

def @func_3717() -> Tensor[(8, 2), float32] {
  %621 = fn () -> Tensor[(8, 2), float32] {
    %620 = @func_2260() /* ty=(Tensor[(8, 2), float32],) */;
    %620.0
  };
  %621() /* ty=Tensor[(8, 2), float32] */
}

def @func_7319() -> (Tensor[(9, 12, 1), float64], Tensor[(9, 12, 1), float64]) {
  %628 = fn () -> (Tensor[(9, 12, 1), float64], Tensor[(9, 12, 1), float64]) {
    %622 = @func_7067() /* ty=(Tensor[(54), float32], Tensor[(9, 12, 1), float64]) */;
    %623 = @func_6983() /* ty=(Tensor[(9, 12, 1), float32],) */;
    %624 = %623.0;
    %625 = cast(%624, dtype="float64") /* ty=Tensor[(9, 12, 1), float64] */;
    %626 = %622.1;
    %627 = sin(%625) /* ty=Tensor[(9, 12, 1), float64] */;
    (%626, %627)
  };
  %628() /* ty=(Tensor[(9, 12, 1), float64], Tensor[(9, 12, 1), float64]) */
}

def @func_4587() -> Tensor[(?, ?, 16), float64] {
  @func_4585() /* ty=Tensor[(?, ?, 16), float64] */
}

def @func_6985() -> (Tensor[(9, 12, 1), float32],) {
  @func_6983() /* ty=(Tensor[(9, 12, 1), float32],) */
}

def @func_1313(%var_1311: Tensor[(6, 16, 7), float32], %var_1312: Tensor[(6, 16, 7), float32]) -> Tensor[(6, 16, 7), bool] {
  %633 = fn (%var_1298: Tensor[(6, 16, 7), float32], %var_1299: Tensor[(6, 16, 7), float32]) -> Tensor[(6, 16, 7), bool] {
    %629 = cast(%var_1299, dtype="bool") /* ty=Tensor[(6, 16, 7), bool] */;
    %630 = shape_of(%var_1298, dtype="int32") /* ty=Tensor[(3), int32] */;
    %631 = cast(%var_1298, dtype="bool") /* ty=Tensor[(6, 16, 7), bool] */;
    %632 = dyn.reshape(%629, %630, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater_equal(%631, %632) /* ty=Tensor[(6, 16, 7), bool] */
  };
  %633(%var_1311, %var_1312) /* ty=Tensor[(6, 16, 7), bool] */
}

def @func_7770() -> (Tensor[(54), float32], Tensor[(7800), bool]) {
  %634 = @func_5576() /* ty=(Tensor[(54), float32],) */;
  %635 = %634.0;
  %636 = @func_7107() /* ty=Tensor[(7800), bool] */;
  (%635, %636)
}

def @func_5078() -> Tensor[(8, 2), float32] {
  %637 = @func_2260() /* ty=(Tensor[(8, 2), float32],) */;
  %637.0
}

def @func_7090() -> Tensor[(8, 2), float32] {
  @func_7088() /* ty=Tensor[(8, 2), float32] */
}

def @func_2500() -> Tensor[(9, 12, 1), float32] {
  %639 = fn () -> Tensor[(9, 12, 1), float32] {
    %638 = @func_2472() /* ty=(float32, Tensor[(9, 12, 1), float32]) */;
    %638.1
  };
  %639() /* ty=Tensor[(9, 12, 1), float32] */
}

def @func_4106() -> (Tensor[(9, 12, 1), float64],) {
  @func_4104() /* ty=(Tensor[(9, 12, 1), float64],) */
}

def @func_939(%var_936: Tensor[(9, 16, 12), float64], %var_937: Tensor[(9, 16, 12), float64], %var_938: Tensor[(54), float32]) -> (Tensor[(9, 16, 12), int8], Tensor[(13, 4, 9), bool], Tensor[(6, 78), float64], Tensor[(6, 3, 3), float32], Tensor[(54), float32], Tensor[(9, 16, 12), float64], Tensor[(13, 4, 9), bool], Tensor[(9, 16, 12), float64], Tensor[(6, 3, 3), float32]) {
  %676 = fn (%var_856: Tensor[(9, 16, 12), float64], %var_887: Tensor[(9, 16, 12), float64], %var_897: Tensor[(54), float32]) -> (Tensor[(9, 16, 12), int8], Tensor[(13, 4, 9), bool], Tensor[(6, 78), float64], Tensor[(6, 3, 3), float32], Tensor[(54), float32], Tensor[(9, 16, 12), float64], Tensor[(13, 4, 9), bool], Tensor[(9, 16, 12), float64], Tensor[(6, 3, 3), float32]) {
    %640 = cast(%var_856, dtype="float64") /* ty=Tensor[(9, 16, 12), float64] */;
    %641 = tan(%640) /* ty=Tensor[(9, 16, 12), float64] */;
    %642 = cast(%var_856, dtype="int8") /* ty=Tensor[(9, 16, 12), int8] */;
    %643 = shape_of(%641, dtype="int32") /* ty=Tensor[(3), int32] */;
    %644 = cast(%641, dtype="int8") /* ty=Tensor[(9, 16, 12), int8] */;
    %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %646 = cast(meta[relay.Constant][36] /* ty=Tensor[(6, 78), float64] */, dtype="float64") /* ty=Tensor[(6, 78), float64] */;
    %647 = cast(meta[relay.Constant][36] /* ty=Tensor[(6, 78), float64] */, dtype="float64") /* ty=Tensor[(6, 78), float64] */;
    %648 = reshape(%646, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
    %649 = reshape(%647, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
    %650 = cast(%var_897, dtype="float32") /* ty=Tensor[(54), float32] */;
    %651 = reshape(%650, newshape=[6, 3, 3]) /* ty=Tensor[(6, 3, 3), float32] */;
    %652 = @func_813(%651) /* ty=(Tensor[(6, 3, 3), float32],) */;
    %653 = cast(%641, dtype="float64") /* ty=Tensor[(9, 16, 12), float64] */;
    %654 = cos(%653) /* ty=Tensor[(9, 16, 12), float64] */;
    %655 = cast(%var_887, dtype="uint16") /* ty=Tensor[(9, 16, 12), uint16] */;
    %656 = shape_of(%654, dtype="int32") /* ty=Tensor[(3), int32] */;
    %657 = cast(%654, dtype="uint16") /* ty=Tensor[(9, 16, 12), uint16] */;
    %658 = dyn.reshape(%655, %656, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %659 = subtract(%657, %658) /* ty=Tensor[(9, 16, 12), uint16] */;
    %660 = cast(%659, dtype="float64") /* ty=Tensor[(9, 16, 12), float64] */;
    %661 = @func_733(%648, %649) /* ty=Tensor[(13, 4, 9), bool] */;
    %662 = cast(%661, dtype="float64") /* ty=Tensor[(13, 4, 9), float64] */;
    %663 = cast(%661, dtype="float64") /* ty=Tensor[(13, 4, 9), float64] */;
    %664 = reshape(%662, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
    %665 = reshape(%663, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
    %666 = cast(%641, dtype="float64") /* ty=Tensor[(9, 16, 12), float64] */;
    %667 = cast(%var_897, dtype="float32") /* ty=Tensor[(54), float32] */;
    %668 = reshape(%667, newshape=[6, 3, 3]) /* ty=Tensor[(6, 3, 3), float32] */;
    %669 = @func_813(%668) /* ty=(Tensor[(6, 3, 3), float32],) */;
    %670 = multiply(%644, %645) /* ty=Tensor[(9, 16, 12), int8] */;
    %671 = %652.0;
    %672 = sigmoid(%660) /* ty=Tensor[(9, 16, 12), float64] */;
    %673 = @func_733(%664, %665) /* ty=Tensor[(13, 4, 9), bool] */;
    %674 = rsqrt(%666) /* ty=Tensor[(9, 16, 12), float64] */;
    %675 = %669.0;
    (%670, %661, meta[relay.Constant][36] /* ty=Tensor[(6, 78), float64] */, %671, %var_897, %672, %673, %674, %675)
  };
  %676(%var_936, %var_937, %var_938) /* ty=(Tensor[(9, 16, 12), int8], Tensor[(13, 4, 9), bool], Tensor[(6, 78), float64], Tensor[(6, 3, 3), float32], Tensor[(54), float32], Tensor[(9, 16, 12), float64], Tensor[(13, 4, 9), bool], Tensor[(9, 16, 12), float64], Tensor[(6, 3, 3), float32]) */
}

def @func_3914() -> (Tensor[(?, ?, 16), float32],) {
  %679 = fn () -> (Tensor[(?, ?, 16), float32],) {
    %677 = @func_1692() /* ty=(Tensor[(9, 12, 1), float64], Tensor[(?, ?, 16), float32], float32, Tensor[(8, 2), float32]) */;
    %678 = %677.1;
    (%678,)
  };
  %679() /* ty=(Tensor[(?, ?, 16), float32],) */
}

def @func_7518() -> Tensor[(54), float32] {
  @func_7516() /* ty=Tensor[(54), float32] */
}

def @func_2374(%var_2361: int32) -> Tensor[(9, 13, 1), int32] {
  %680 = cast(%var_2361, dtype="int32") /* ty=int32 */;
  %681 = cast(meta[relay.Constant][37] /* ty=Tensor[(9, 13, 1), int32] */, dtype="int32") /* ty=Tensor[(9, 13, 1), int32] */;
  right_shift(%680, %681) /* ty=Tensor[(9, 13, 1), int32] */
}

def @func_4165(%var_4150: Tensor[(9, 12, 11), float64]) -> (Tensor[(9, 12, 11), float32],) {
  %682 = @func_3700() /* ty=Tensor[(9, 12, 1), float64] */;
  %683 = cast(%682, dtype="float32") /* ty=Tensor[(9, 12, 1), float32] */;
  %684 = cast(%var_4150, dtype="float32") /* ty=Tensor[(9, 12, 11), float32] */;
  %685 = mod(%683, %684) /* ty=Tensor[(9, 12, 11), float32] */;
  (%685,)
}

def @func_3558(%var_3556: Tensor[(468), float64]) -> (Tensor[(8, 2), float32], Tensor[(13, 4, 9), bool], Tensor[(468), float64]) {
  %686 = @func_2553() /* ty=(Tensor[(8, 2), float32],) */;
  %687 = cast(%var_3556, dtype="float64") /* ty=Tensor[(468), float64] */;
  %688 = cast(%var_3556, dtype="float64") /* ty=Tensor[(468), float64] */;
  %689 = reshape(%687, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
  %690 = reshape(%688, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
  %691 = %686.0;
  %692 = @func_733(%689, %690) /* ty=Tensor[(13, 4, 9), bool] */;
  (%691, %692, %var_3556)
}

def @func_3111(%var_3110: Tensor[(9, 12, 6), float64]) -> (Tensor[(8, 2), float32], Tensor[(9, 12, ?), float64], Tensor[(9, 12, 6), uint8]) {
  %706 = fn (%var_3099: Tensor[(9, 12, 6), float64]) -> (Tensor[(8, 2), float32], Tensor[(9, 12, ?), float64], Tensor[(9, 12, 6), uint8]) {
    %693 = @func_2172() /* ty=(Tensor[(9, 12, 1), float64],) */;
    %694 = %693.0;
    %695 = @func_2172() /* ty=(Tensor[(9, 12, 1), float64],) */;
    %696 = %695.0;
    %697 = cast(%696, dtype="float64") /* ty=Tensor[(9, 12, 1), float64] */;
    %698 = shape_of(%694, dtype="int32") /* ty=Tensor[(3), int32] */;
    %699 = cast(%694, dtype="float64") /* ty=Tensor[(9, 12, 1), float64] */;
    %700 = dyn.reshape(%697, %698, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %701 = cast(%694, dtype="uint8") /* ty=Tensor[(9, 12, 1), uint8] */;
    %702 = cast(%var_3099, dtype="uint8") /* ty=Tensor[(9, 12, 6), uint8] */;
    %703 = @func_2895() /* ty=Tensor[(8, 2), float32] */;
    %704 = mod(%699, %700) /* ty=Tensor[(9, 12, ?), float64] */;
    %705 = add(%701, %702) /* ty=Tensor[(9, 12, 6), uint8] */;
    (%703, %704, %705)
  };
  %706(%var_3110) /* ty=(Tensor[(8, 2), float32], Tensor[(9, 12, ?), float64], Tensor[(9, 12, 6), uint8]) */
}

def @func_1772() -> Tensor[(9, 12, 1), float64] {
  %708 = fn () -> Tensor[(9, 12, 1), float64] {
    %707 = @func_1692() /* ty=(Tensor[(9, 12, 1), float64], Tensor[(?, ?, 16), float32], float32, Tensor[(8, 2), float32]) */;
    %707.0
  };
  %708() /* ty=Tensor[(9, 12, 1), float64] */
}

def @func_3266(%var_3264: Tensor[(540), float64]) -> (float32, Tensor[(540), float64], Tensor[(540), float64]) {
  %709 = @func_2472() /* ty=(float32, Tensor[(9, 12, 1), float32]) */;
  %710 = cast(%var_3264, dtype="float64") /* ty=Tensor[(540), float64] */;
  %711 = reshape(%710, newshape=[540]) /* ty=Tensor[(540), float64] */;
  %712 = @func_2868(%711) /* ty=(Tensor[(8, 2), float32], Tensor[(360), float32], Tensor[(540), float64], Tensor[(27, 2), float32], Tensor[(54), float32]) */;
  %713 = %709.0;
  %714 = %712.2;
  (%713, %714, %var_3264)
}

def @func_7787(%var_7786: Tensor[(9, 11, 7), float32]) -> (Tensor[(9, 11, 7), float32], Tensor[(9, 11, 7), float64]) {
  %722 = fn (%var_7778: Tensor[(9, 11, 7), float32]) -> (Tensor[(9, 11, 7), float32], Tensor[(9, 11, 7), float64]) {
    %715 = cast(%var_7778, dtype="float32") /* ty=Tensor[(9, 11, 7), float32] */;
    %716 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(9, 11, 7), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %717 = cast(meta[relay.Constant][38] /* ty=Tensor[(9, 11, 7), float32] */, dtype="float32") /* ty=Tensor[(9, 11, 7), float32] */;
    %718 = dyn.reshape(%715, %716, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %719 = cast(%var_7778, dtype="float64") /* ty=Tensor[(9, 11, 7), float64] */;
    %720 = subtract(%717, %718) /* ty=Tensor[(9, 11, 7), float32] */;
    %721 = log(%719) /* ty=Tensor[(9, 11, 7), float64] */;
    (%720, %721)
  };
  %722(%var_7786) /* ty=(Tensor[(9, 11, 7), float32], Tensor[(9, 11, 7), float64]) */
}

def @func_6385() -> Tensor[(9, 12, 1), float64] {
  %723 = @func_2172() /* ty=(Tensor[(9, 12, 1), float64],) */;
  %723.0
}

def @func_6341(%var_6331: int32) -> (Tensor[(8, 2), float32], Tensor[(9, 13, 1), int32], int32) {
  %724 = @func_5267() /* ty=(Tensor[(8, 2), float32], Tensor[(7800), float32]) */;
  %725 = cast(%var_6331, dtype="int32") /* ty=int32 */;
  %726 = reshape(%725, newshape=[]) /* ty=int32 */;
  %727 = %724.0;
  %728 = @func_2374(%726) /* ty=Tensor[(9, 13, 1), int32] */;
  (%727, %728, %var_6331)
}

def @func_2770(%var_2740: Tensor[(360), float32], %var_2756: Tensor[(300), float32], %var_2760: int32) -> (Tensor[(9, 12, 1), float64], Tensor[(3, 10, 12), float32], Tensor[(360), float32], Tensor[(5, 6, 10), float32], Tensor[(300), float32], Tensor[(9, 13, 1), int32], int32) {
  %729 = cast(%var_2740, dtype="float32") /* ty=Tensor[(360), float32] */;
  %730 = reshape(%729, newshape=[3, 10, 12]) /* ty=Tensor[(3, 10, 12), float32] */;
  %731 = cast(%var_2756, dtype="float32") /* ty=Tensor[(300), float32] */;
  %732 = reshape(%731, newshape=[5, 6, 10]) /* ty=Tensor[(5, 6, 10), float32] */;
  %733 = @func_2000(%732) /* ty=(Tensor[(5, 6, 10), float32], Tensor[(8, 2), float32]) */;
  %734 = cast(%var_2760, dtype="int32") /* ty=int32 */;
  %735 = reshape(%734, newshape=[]) /* ty=int32 */;
  %736 = @func_1771() /* ty=Tensor[(9, 12, 1), float64] */;
  %737 = @func_50(%730) /* ty=Tensor[(3, 10, 12), float32] */;
  %738 = %733.0;
  %739 = @func_2374(%735) /* ty=Tensor[(9, 13, 1), int32] */;
  (%736, %737, %var_2740, %738, %var_2756, %739, %var_2760)
}

def @func_3350() -> Tensor[(12, 3, 1), float32] {
  @func_3348() /* ty=Tensor[(12, 3, 1), float32] */
}

def @func_4359(%var_4332: Tensor[(360), float32], %var_4346: Tensor[(9, 12, 10), float32]) -> (Tensor[(9, 12, 1), float32], Tensor[(3, 10, 12), float32], Tensor[(360), float32], Tensor[(9, 12, 10), bool]) {
  %740 = @func_2472() /* ty=(float32, Tensor[(9, 12, 1), float32]) */;
  %741 = cast(%var_4332, dtype="float32") /* ty=Tensor[(360), float32] */;
  %742 = reshape(%741, newshape=[3, 10, 12]) /* ty=Tensor[(3, 10, 12), float32] */;
  %743 = @func_2472() /* ty=(float32, Tensor[(9, 12, 1), float32]) */;
  %744 = %743.1;
  %745 = cast(%744, dtype="bool") /* ty=Tensor[(9, 12, 1), bool] */;
  %746 = cast(%var_4346, dtype="bool") /* ty=Tensor[(9, 12, 10), bool] */;
  %747 = %740.1;
  %748 = @func_50(%742) /* ty=Tensor[(3, 10, 12), float32] */;
  %749 = greater_equal(%745, %746) /* ty=Tensor[(9, 12, 10), bool] */;
  (%747, %748, %var_4332, %749)
}

def @func_4741(%var_4739: Tensor[(1728), float64], %var_4740: float32) -> (Tensor[(8, 2), float32], Tensor[(50, 6), float32], Tensor[(1728), float64], Tensor[(98, 1), float32], Tensor[(3, 10, 12), float32], float32) {
  @func_4737(%var_4739, %var_4740) /* ty=(Tensor[(8, 2), float32], Tensor[(50, 6), float32], Tensor[(1728), float64], Tensor[(98, 1), float32], Tensor[(3, 10, 12), float32], float32) */
}

def @func_2082(%var_2081: Tensor[(9, 12, 3), float64]) -> (Tensor[(9, 12, 3), int32],) {
  %757 = fn (%var_2059: Tensor[(9, 12, 3), float64]) -> (Tensor[(9, 12, 3), int32],) {
    %750 = @func_1771() /* ty=Tensor[(9, 12, 1), float64] */;
    %751 = cast(%750, dtype="int32") /* ty=Tensor[(9, 12, 1), int32] */;
    %752 = cast(%var_2059, dtype="int32") /* ty=Tensor[(9, 12, 3), int32] */;
    %753 = left_shift(%751, %752) /* ty=Tensor[(9, 12, 3), int32] */;
    %754 = cast(%750, dtype="int32") /* ty=Tensor[(9, 12, 1), int32] */;
    %755 = cast(%753, dtype="int32") /* ty=Tensor[(9, 12, 3), int32] */;
    %756 = bitwise_or(%754, %755) /* ty=Tensor[(9, 12, 3), int32] */;
    (%756,)
  };
  %757(%var_2081) /* ty=(Tensor[(9, 12, 3), int32],) */
}

def @func_5141() -> (Tensor[(?, ?, 16), float32],) {
  %758 = @func_3913() /* ty=(Tensor[(?, ?, 16), float32],) */;
  %759 = %758.0;
  %760 = cast(%759, dtype="float32") /* ty=Tensor[(?, ?, 16), float32] */;
  %761 = cos(%760) /* ty=Tensor[(?, ?, 16), float32] */;
  (%761,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen427/build/output.py", line 2257, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:16:28] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

