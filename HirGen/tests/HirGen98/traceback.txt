==========mod==========
#[version = "0.0.5"]
def @func_6192(%var_6152: Tensor[(7, 7, 8), float32], %var_6177: Tensor[(12), int64], %var_6178: Tensor[(96), int64]) -> (Tensor[(6, 14, 2), bool], Tensor[(84, 2), float64], Tensor[(7, 7, 8), bool], Tensor[(392), float32], Tensor[(6, 2, 8), int64], Tensor[(12), int64], Tensor[(96), int64], Tensor[(840, 480), float64]) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(84, 2), float64] */, dtype="float64") /* ty=Tensor[(84, 2), float64] */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(84, 2), float64] */, dtype="float64") /* ty=Tensor[(84, 2), float64] */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(84, 2), float64] */, dtype="float64") /* ty=Tensor[(84, 2), float64] */;
  %3 = reshape(%0, newshape=[6, 14, 2]) /* ty=Tensor[(6, 14, 2), float64] */;
  %4 = reshape(%1, newshape=[6, 14, 2]) /* ty=Tensor[(6, 14, 2), float64] */;
  %5 = reshape(%2, newshape=[6, 14, 2]) /* ty=Tensor[(6, 14, 2), float64] */;
  %6 = @func_828(%3, %4, %5) /* ty=(Tensor[(6, 14, 2), uint32], Tensor[(6, 14, 2), bool]) */;
  %7 = @func_3847() /* ty=Tensor[(7, 7, 8), float32] */;
  %8 = cast(%var_6152, dtype="bool") /* ty=Tensor[(7, 7, 8), bool] */;
  %9 = shape_of(%7, dtype="int32") /* ty=Tensor[(3), int32] */;
  %10 = cast(%7, dtype="bool") /* ty=Tensor[(7, 7, 8), bool] */;
  %11 = dyn.reshape(%8, %9, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %12 = cast(%7, dtype="uint32") /* ty=Tensor[(7, 7, 8), uint32] */;
  %13 = cast(%7, dtype="uint32") /* ty=Tensor[(7, 7, 8), uint32] */;
  %14 = reshape(%12, newshape=[392]) /* ty=Tensor[(392), uint32] */;
  %15 = reshape(%13, newshape=[392]) /* ty=Tensor[(392), uint32] */;
  %16 = @func_5028(%14, %15) /* ty=(Tensor[(392), float32], Tensor[(392), bool], Tensor[(392), float32]) */;
  %17 = cast(%var_6177, dtype="int64") /* ty=Tensor[(12), int64] */;
  %18 = cast(%var_6178, dtype="int64") /* ty=Tensor[(96), int64] */;
  %19 = reshape(%17, newshape=[6, 2, 1]) /* ty=Tensor[(6, 2, 1), int64] */;
  %20 = reshape(%18, newshape=[6, 2, 8]) /* ty=Tensor[(6, 2, 8), int64] */;
  %21 = @func_5532() /* ty=(Tensor[(16, 5, 6), float32], Tensor[(3, 11, 12), float32], Tensor[(840, 480), float64], Tensor[(840, 480), float32]) */;
  %22 = %6.1;
  %23 = logical_and(%10, %11) /* ty=Tensor[(7, 7, 8), bool] */;
  %24 = %16.0;
  %25 = @func_1810(%19, %20) /* ty=Tensor[(6, 2, 8), int64] */;
  %26 = %21.2;
  (%22, meta[relay.Constant][0] /* ty=Tensor[(84, 2), float64] */, %23, %24, %25, %var_6177, %var_6178, %26)
}

def @func_1892(%var_1877: Tensor[(12, 5, 14), float64], %var_1878: Tensor[(12, 5, 14), float64]) -> (Tensor[(12, 5, 14), float64],) {
  %27 = cast(%var_1878, dtype="float64") /* ty=Tensor[(12, 5, 14), float64] */;
  %28 = shape_of(%var_1877, dtype="int32") /* ty=Tensor[(3), int32] */;
  %29 = cast(%var_1877, dtype="float64") /* ty=Tensor[(12, 5, 14), float64] */;
  %30 = dyn.reshape(%27, %28, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %31 = multiply(%29, %30) /* ty=Tensor[(12, 5, 14), float64] */;
  (%31,)
}

def @func_4583() -> (Tensor[(6, 14, 13), float64],) {
  %32 = cast(meta[relay.Constant][1] /* ty=Tensor[(6, 14, 13), float64] */, dtype="float64") /* ty=Tensor[(6, 14, 13), float64] */;
  %33 = erf(%32) /* ty=Tensor[(6, 14, 13), float64] */;
  (%33,)
}

def @func_1299(%var_1292: Tensor[(14, 13), float32]) -> (Tensor[(14, 13), float32],) {
  %34 = cast(%var_1292, dtype="float32") /* ty=Tensor[(14, 13), float32] */;
  %35 = log10(%34) /* ty=Tensor[(14, 13), float32] */;
  (%35,)
}

def @func_1915() -> Tensor[(13, 9, 9), float64] {
  %36 = cast(meta[relay.Constant][2] /* ty=Tensor[(13, 9, 9), float64] */, dtype="float64") /* ty=Tensor[(13, 9, 9), float64] */;
  asinh(%36) /* ty=Tensor[(13, 9, 9), float64] */
}

def @func_5532() -> (Tensor[(16, 5, 6), float32], Tensor[(3, 11, 12), float32], Tensor[(840, 480), float64], Tensor[(840, 480), float32]) {
  %37 = cast(meta[relay.Constant][3] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %38 = reshape(%37, newshape=[16, 5, 6]) /* ty=Tensor[(16, 5, 6), float32] */;
  %39 = @func_3737() /* ty=(Tensor[(3, 11, 12), float32],) */;
  %40 = @func_2693() /* ty=(Tensor[(13, 9, 9), float64], Tensor[(7, 7, 8), uint32], Tensor[(392), uint32], Tensor[(6, 14, 2), bool], Tensor[(168), float64], Tensor[(12, 5, 14), float64], Tensor[(840, 1), float64]) */;
  %41 = %40.6;
  %42 = cast(%41, dtype="float32") /* ty=Tensor[(840, 1), float32] */;
  %43 = log2(%42) /* ty=Tensor[(840, 1), float32] */;
  %44 = cast(meta[relay.Constant][3] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %45 = acos(%44) /* ty=Tensor[(480), float32] */;
  %46 = cast(%43, dtype="bool") /* ty=Tensor[(840, 1), bool] */;
  %47 = cast(%45, dtype="bool") /* ty=Tensor[(480), bool] */;
  %48 = greater_equal(%46, %47) /* ty=Tensor[(840, 480), bool] */;
  %49 = cast(%48, dtype="float64") /* ty=Tensor[(840, 480), float64] */;
  %50 = cast(%43, dtype="float64") /* ty=Tensor[(840, 1), float64] */;
  %51 = cast(%48, dtype="float32") /* ty=Tensor[(840, 480), float32] */;
  %52 = @func_2430(%38) /* ty=Tensor[(16, 5, 6), float32] */;
  %53 = %39.0;
  %54 = power(%49, %50) /* ty=Tensor[(840, 480), float64] */;
  %55 = exp(%51) /* ty=Tensor[(840, 480), float32] */;
  (%52, %53, %54, %55)
}

def @func_2236() -> (Tensor[(13, 9, 9), float64], Tensor[(7, 7, 8), uint32], Tensor[(120), uint64], Tensor[(392), uint32], Tensor[(1848), float32]) {
  %56 = cast(meta[relay.Constant][4] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %57 = cast(meta[relay.Constant][4] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %58 = cast(meta[relay.Constant][5] /* ty=Tensor[(392), uint32] */, dtype="uint32") /* ty=Tensor[(392), uint32] */;
  %59 = cast(meta[relay.Constant][6] /* ty=Tensor[(1848), float32] */, dtype="float32") /* ty=Tensor[(1848), float32] */;
  %60 = reshape(%56, newshape=[5, 4, 6]) /* ty=Tensor[(5, 4, 6), uint64] */;
  %61 = reshape(%57, newshape=[5, 4, 6]) /* ty=Tensor[(5, 4, 6), uint64] */;
  %62 = reshape(%58, newshape=[392]) /* ty=Tensor[(392), uint32] */;
  %63 = reshape(%59, newshape=[924, 2]) /* ty=Tensor[(924, 2), float32] */;
  %64 = @func_779(%60, %61, %62, %63) /* ty=(Tensor[(5, 4, 6), bool], Tensor[(7, 7, 8), uint32], Tensor[(392), bool], Tensor[(16, 9, 11), float32], Tensor[(924, 2), float32], Tensor[(16, 9, 11), int16]) */;
  %65 = @func_1915() /* ty=Tensor[(13, 9, 9), float64] */;
  %66 = %64.1;
  (%65, %66, meta[relay.Constant][4] /* ty=Tensor[(120), uint64] */, meta[relay.Constant][5] /* ty=Tensor[(392), uint32] */, meta[relay.Constant][6] /* ty=Tensor[(1848), float32] */)
}

def @func_5306() -> Tensor[(5, 13, 16), float32] {
  @func_2585() /* ty=Tensor[(5, 13, 16), float32] */
}

def @func_3929() -> (Tensor[(15, 2, 15), float32],) {
  %67 = cast(meta[relay.Constant][7] /* ty=Tensor[(15, 2, 15), float32] */, dtype="float32") /* ty=Tensor[(15, 2, 15), float32] */;
  %68 = log(%67) /* ty=Tensor[(15, 2, 15), float32] */;
  (%68,)
}

def @func_5784() -> Tensor[(5, 13, 16), float32] {
  @func_3467() /* ty=Tensor[(5, 13, 16), float32] */
}

def @func_2658() -> Tensor[(13, 9, 9), float64] {
  %69 = @func_2236() /* ty=(Tensor[(13, 9, 9), float64], Tensor[(7, 7, 8), uint32], Tensor[(120), uint64], Tensor[(392), uint32], Tensor[(1848), float32]) */;
  %69.0
}

def @func_2871(%var_2824: Tensor[(440), float64]) -> (Tensor[(3, 11, 12), float32], Tensor[(440), bool], Tensor[(5, 13, 16), float32]) {
  %70 = @func_2482() /* ty=(Tensor[(3, 11, 12), float32], Tensor[(5, 13, 16), float32], Tensor[(4, 260), float32]) */;
  %71 = cast(%var_2824, dtype="float64") /* ty=Tensor[(440), float64] */;
  %72 = cast(%var_2824, dtype="float64") /* ty=Tensor[(440), float64] */;
  %73 = reshape(%71, newshape=[10, 11, 4]) /* ty=Tensor[(10, 11, 4), float64] */;
  %74 = reshape(%72, newshape=[10, 11, 4]) /* ty=Tensor[(10, 11, 4), float64] */;
  %75 = @func_1729(%73, %74) /* ty=Tensor[(10, 11, 4), float64] */;
  %76 = cast(%var_2824, dtype="float32") /* ty=Tensor[(440), float32] */;
  %77 = shape_of(%75, dtype="int32") /* ty=Tensor[(3), int32] */;
  %78 = cast(%75, dtype="float32") /* ty=Tensor[(10, 11, 4), float32] */;
  %79 = dyn.reshape(%76, %77, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %80 = divide(%78, %79) /* ty=Tensor[(10, 11, 4), float32] */;
  %81 = cast(%80, dtype="bool") /* ty=Tensor[(10, 11, 4), bool] */;
  %82 = shape_of(%var_2824, dtype="int32") /* ty=Tensor[(1), int32] */;
  %83 = cast(%var_2824, dtype="bool") /* ty=Tensor[(440), bool] */;
  %84 = dyn.reshape(%81, %82, newshape=[]) /* ty=Tensor[(?), bool] */;
  %85 = %70.0;
  %86 = logical_or(%83, %84) /* ty=Tensor[(440), bool] */;
  %87 = @func_2585() /* ty=Tensor[(5, 13, 16), float32] */;
  (%85, %86, %87)
}

def @func_4887(%var_4879: Tensor[(16), uint32]) -> (Tensor[(13, 9, 9), float32], Tensor[(16, 1), bool], uint32, Tensor[(16), uint32]) {
  %88 = @func_2225() /* ty=(Tensor[(13, 9, 9), float32],) */;
  %89 = cast(meta[relay.Constant][8] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %90 = cast(%var_4879, dtype="uint32") /* ty=Tensor[(16), uint32] */;
  %91 = reshape(%89, newshape=[]) /* ty=uint32 */;
  %92 = reshape(%90, newshape=[16, 1]) /* ty=Tensor[(16, 1), uint32] */;
  %93 = @func_2366(%91, %92) /* ty=(Tensor[(16, 1), bool],) */;
  %94 = %88.0;
  %95 = %93.0;
  (%94, %95, meta[relay.Constant][8] /* ty=uint32 */, %var_4879)
}

def @func_5860(%var_5855: Tensor[(392), uint32], %var_5856: Tensor[(1848), float32]) -> (Tensor[(13, 9, 9), float64], Tensor[(924, 2), float32], Tensor[(120), uint64], Tensor[(392), uint32], Tensor[(1848), float32]) {
  %96 = cast(meta[relay.Constant][9] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %97 = cast(meta[relay.Constant][9] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %98 = cast(%var_5855, dtype="uint32") /* ty=Tensor[(392), uint32] */;
  %99 = cast(%var_5856, dtype="float32") /* ty=Tensor[(1848), float32] */;
  %100 = reshape(%96, newshape=[5, 4, 6]) /* ty=Tensor[(5, 4, 6), uint64] */;
  %101 = reshape(%97, newshape=[5, 4, 6]) /* ty=Tensor[(5, 4, 6), uint64] */;
  %102 = reshape(%98, newshape=[392]) /* ty=Tensor[(392), uint32] */;
  %103 = reshape(%99, newshape=[924, 2]) /* ty=Tensor[(924, 2), float32] */;
  %104 = @func_779(%100, %101, %102, %103) /* ty=(Tensor[(5, 4, 6), bool], Tensor[(7, 7, 8), uint32], Tensor[(392), bool], Tensor[(16, 9, 11), float32], Tensor[(924, 2), float32], Tensor[(16, 9, 11), int16]) */;
  %105 = @func_2658() /* ty=Tensor[(13, 9, 9), float64] */;
  %106 = %104.4;
  (%105, %106, meta[relay.Constant][9] /* ty=Tensor[(120), uint64] */, %var_5855, %var_5856)
}

def @func_5987(%var_5982: Tensor[(13, 9, 9), float64]) -> Tensor[(13, 9, 9), int64] {
  %107 = @func_1915() /* ty=Tensor[(13, 9, 9), float64] */;
  %108 = cast(%var_5982, dtype="int64") /* ty=Tensor[(13, 9, 9), int64] */;
  %109 = shape_of(%107, dtype="int32") /* ty=Tensor[(3), int32] */;
  %110 = cast(%107, dtype="int64") /* ty=Tensor[(13, 9, 9), int64] */;
  %111 = dyn.reshape(%108, %109, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_or(%110, %111) /* ty=Tensor[(13, 9, 9), int64] */
}

def @func_5392(%var_5371: Tensor[(1040, 1), float32]) -> (Tensor[(9, ?, ?), int16], Tensor[(5, 13, 16), float32], Tensor[(72), float64], Tensor[(9, 1040, ?), bool]) {
  %112 = cast(meta[relay.Constant][10] /* ty=Tensor[(9, 1, 1), float32] */, dtype="float32") /* ty=Tensor[(9, 1, 1), float32] */;
  %113 = acos(%112) /* ty=Tensor[(9, 1, 1), float32] */;
  %114 = cast(meta[relay.Constant][10] /* ty=Tensor[(9, 1, 1), float32] */, dtype="bool") /* ty=Tensor[(9, 1, 1), bool] */;
  %115 = shape_of(%113, dtype="int32") /* ty=Tensor[(3), int32] */;
  %116 = cast(%113, dtype="bool") /* ty=Tensor[(9, 1, 1), bool] */;
  %117 = dyn.reshape(%114, %115, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %118 = not_equal(%116, %117) /* ty=Tensor[(9, ?, ?), bool] */;
  %119 = cast(meta[relay.Constant][10] /* ty=Tensor[(9, 1, 1), float32] */, dtype="int16") /* ty=Tensor[(9, 1, 1), int16] */;
  %120 = shape_of(%118, dtype="int32") /* ty=Tensor[(3), int32] */;
  %121 = cast(%118, dtype="int16") /* ty=Tensor[(9, ?, ?), int16] */;
  %122 = dyn.reshape(%119, %120, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %123 = cast(meta[relay.Constant][11] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %124 = cast(%var_5371, dtype="float32") /* ty=Tensor[(1040, 1), float32] */;
  %125 = cast(meta[relay.Constant][11] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %126 = reshape(%123, newshape=[4, 3, 6]) /* ty=Tensor[(4, 3, 6), float64] */;
  %127 = reshape(%124, newshape=[1040]) /* ty=Tensor[(1040), float32] */;
  %128 = reshape(%125, newshape=[4, 3, 6]) /* ty=Tensor[(4, 3, 6), float64] */;
  %129 = @func_1997(%126, %127, %128) /* ty=(Tensor[(4, 3, 6), float64], Tensor[(5, 13, 16), float32], Tensor[(1040), float32], Tensor[(4, 3, 6), float32], Tensor[(4, 3, 6), float64]) */;
  %130 = cast(%118, dtype="bool") /* ty=Tensor[(9, ?, ?), bool] */;
  %131 = cast(%var_5371, dtype="bool") /* ty=Tensor[(1040, 1), bool] */;
  %132 = logical_xor(%121, %122) /* ty=Tensor[(9, ?, ?), int16] */;
  %133 = %129.1;
  %134 = logical_or(%130, %131) /* ty=Tensor[(9, 1040, ?), bool] */;
  (%132, %133, meta[relay.Constant][11] /* ty=Tensor[(72), float64] */, %134)
}

def @func_2644(%var_2618: Tensor[(392), uint32]) -> (Tensor[(13, 9, 9), float64], Tensor[(13, 9, 9), float32], Tensor[(392), uint32], Tensor[(7, 7, 8), float64]) {
  %135 = @func_1915() /* ty=Tensor[(13, 9, 9), float64] */;
  %136 = cast(%135, dtype="float64") /* ty=Tensor[(13, 9, 9), float64] */;
  %137 = @func_2225() /* ty=(Tensor[(13, 9, 9), float32],) */;
  %138 = cast(%var_2618, dtype="uint32") /* ty=Tensor[(392), uint32] */;
  %139 = reshape(%138, newshape=[7, 7, 8]) /* ty=Tensor[(7, 7, 8), uint32] */;
  %140 = @func_653(%139) /* ty=Tensor[(7, 7, 8), uint32] */;
  %141 = cast(%140, dtype="float64") /* ty=Tensor[(7, 7, 8), float64] */;
  %142 = log10(%136) /* ty=Tensor[(13, 9, 9), float64] */;
  %143 = %137.0;
  %144 = log10(%141) /* ty=Tensor[(7, 7, 8), float64] */;
  (%142, %143, %var_2618, %144)
}

def @func_6016() -> Tensor[(3, 11, 12), float32] {
  @func_4768() /* ty=Tensor[(3, 11, 12), float32] */
}

def @func_4720(%var_4689: Tensor[(72), float64], %var_4699: Tensor[(1440), int64]) -> (Tensor[(6, 14, 2), bool], Tensor[(6, 14, 2), uint32], Tensor[(3, 2, 12), float64], Tensor[(72), float64], Tensor[(5, 13, 16), float32], Tensor[(16, 9, 11), int16], Tensor[(1440), int64], Tensor[(392), uint32], Tensor[(5, 13, 16), float32]) {
  %145 = @func_2723() /* ty=Tensor[(6, 14, 2), bool] */;
  %146 = cast(%145, dtype="float64") /* ty=Tensor[(6, 14, 2), float64] */;
  %147 = cast(%145, dtype="float64") /* ty=Tensor[(6, 14, 2), float64] */;
  %148 = cast(%145, dtype="float64") /* ty=Tensor[(6, 14, 2), float64] */;
  %149 = reshape(%146, newshape=[6, 14, 2]) /* ty=Tensor[(6, 14, 2), float64] */;
  %150 = reshape(%147, newshape=[6, 14, 2]) /* ty=Tensor[(6, 14, 2), float64] */;
  %151 = reshape(%148, newshape=[6, 14, 2]) /* ty=Tensor[(6, 14, 2), float64] */;
  %152 = @func_828(%149, %150, %151) /* ty=(Tensor[(6, 14, 2), uint32], Tensor[(6, 14, 2), bool]) */;
  %153 = cast(%var_4689, dtype="float64") /* ty=Tensor[(72), float64] */;
  %154 = cast(%var_4689, dtype="float64") /* ty=Tensor[(72), float64] */;
  %155 = reshape(%153, newshape=[3, 2, 12]) /* ty=Tensor[(3, 2, 12), float64] */;
  %156 = reshape(%154, newshape=[3, 2, 12]) /* ty=Tensor[(3, 2, 12), float64] */;
  %157 = @func_1203(%155, %156) /* ty=(Tensor[(3, 2, 12), float64],) */;
  %158 = cast(%var_4699, dtype="int64") /* ty=Tensor[(1440), int64] */;
  %159 = cast(%var_4699, dtype="int64") /* ty=Tensor[(1440), int64] */;
  %160 = cast(meta[relay.Constant][12] /* ty=Tensor[(392), uint32] */, dtype="uint32") /* ty=Tensor[(392), uint32] */;
  %161 = @func_3467() /* ty=Tensor[(5, 13, 16), float32] */;
  %162 = cast(%161, dtype="float32") /* ty=Tensor[(5, 13, 16), float32] */;
  %163 = reshape(%158, newshape=[8, 12, 15]) /* ty=Tensor[(8, 12, 15), int64] */;
  %164 = reshape(%159, newshape=[8, 12, 15]) /* ty=Tensor[(8, 12, 15), int64] */;
  %165 = reshape(%160, newshape=[392]) /* ty=Tensor[(392), uint32] */;
  %166 = reshape(%162, newshape=[1040]) /* ty=Tensor[(1040), float32] */;
  %167 = @func_1572(%163, %164, %165, %166) /* ty=(Tensor[(8, 12, 15), int64], Tensor[(16, 9, 11), int16], Tensor[(1584), int16], Tensor[(392), bool], Tensor[(6, 20), uint64], Tensor[(392), uint32], Tensor[(84, 22), float32], Tensor[(7, 7, 8), uint32], Tensor[(5, 13, 16), float32], Tensor[(1040), float32], Tensor[(5, 13, 16), float32]) */;
  %168 = @func_3902() /* ty=(Tensor[(3, 11, 12), float32], Tensor[(5, 13, 16), float32]) */;
  %169 = %152.0;
  %170 = %157.0;
  %171 = %167.1;
  %172 = %168.1;
  (%145, %169, %170, %var_4689, %161, %171, %var_4699, meta[relay.Constant][12] /* ty=Tensor[(392), uint32] */, %172)
}

def @func_502(%var_449: Tensor[(14, 11, 12), float32]) -> (Tensor[(16, 9, 11), float32], Tensor[(1584), int16], Tensor[(16, 9, 11), int16], Tensor[(14, 11, 12), float64]) {
  %173 = cast(meta[relay.Constant][13] /* ty=Tensor[(1584), int16] */, dtype="int16") /* ty=Tensor[(1584), int16] */;
  %174 = reshape(%173, newshape=[16, 9, 11]) /* ty=Tensor[(16, 9, 11), int16] */;
  %175 = @func_342(%174) /* ty=(Tensor[(16, 9, 11), int16], Tensor[(16, 9, 11), int16], Tensor[(16, 9, 11), float32]) */;
  %176 = cast(meta[relay.Constant][13] /* ty=Tensor[(1584), int16] */, dtype="int16") /* ty=Tensor[(1584), int16] */;
  %177 = reshape(%176, newshape=[16, 9, 11]) /* ty=Tensor[(16, 9, 11), int16] */;
  %178 = @func_342(%177) /* ty=(Tensor[(16, 9, 11), int16], Tensor[(16, 9, 11), int16], Tensor[(16, 9, 11), float32]) */;
  %179 = cast(%var_449, dtype="float32") /* ty=Tensor[(14, 11, 12), float32] */;
  %180 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(14, 11, 12), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %181 = cast(meta[relay.Constant][14] /* ty=Tensor[(14, 11, 12), float32] */, dtype="float32") /* ty=Tensor[(14, 11, 12), float32] */;
  %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %183 = mod(%181, %182) /* ty=Tensor[(14, 11, 12), float32] */;
  %184 = cast(%183, dtype="float64") /* ty=Tensor[(14, 11, 12), float64] */;
  %185 = %175.2;
  %186 = %178.1;
  %187 = sigmoid(%184) /* ty=Tensor[(14, 11, 12), float64] */;
  (%185, meta[relay.Constant][13] /* ty=Tensor[(1584), int16] */, %186, %187)
}

def @func_3737() -> (Tensor[(3, 11, 12), float32],) {
  %188 = @func_2895() /* ty=Tensor[(3, 11, 12), float32] */;
  (%188,)
}

def @func_4449(%var_4439: int16) -> (Tensor[(2, 10, ?), float64],) {
  %189 = cast(%var_4439, dtype="bool") /* ty=bool */;
  %190 = cast(meta[relay.Constant][15] /* ty=Tensor[(2, 10, 1), int16] */, dtype="bool") /* ty=Tensor[(2, 10, 1), bool] */;
  %191 = less_equal(%189, %190) /* ty=Tensor[(2, 10, 1), bool] */;
  %192 = cast(meta[relay.Constant][15] /* ty=Tensor[(2, 10, 1), int16] */, dtype="float64") /* ty=Tensor[(2, 10, 1), float64] */;
  %193 = shape_of(%191, dtype="int32") /* ty=Tensor[(3), int32] */;
  %194 = cast(%191, dtype="float64") /* ty=Tensor[(2, 10, 1), float64] */;
  %195 = dyn.reshape(%192, %193, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %196 = floor_mod(%194, %195) /* ty=Tensor[(2, 10, ?), float64] */;
  (%196,)
}

def @func_3847() -> Tensor[(7, 7, 8), float32] {
  %197 = @func_2236() /* ty=(Tensor[(13, 9, 9), float64], Tensor[(7, 7, 8), uint32], Tensor[(120), uint64], Tensor[(392), uint32], Tensor[(1848), float32]) */;
  %198 = %197.1;
  %199 = cast(%198, dtype="float32") /* ty=Tensor[(7, 7, 8), float32] */;
  %200 = rsqrt(%199) /* ty=Tensor[(7, 7, 8), float32] */;
  %201 = cast(%200, dtype="float32") /* ty=Tensor[(7, 7, 8), float32] */;
  sqrt(%201) /* ty=Tensor[(7, 7, 8), float32] */
}

def @func_3961() -> (Tensor[(5, 13, 16), float32], Tensor[(16, 5, 6), float32], Tensor[(480), float32]) {
  %202 = cast(meta[relay.Constant][16] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %203 = reshape(%202, newshape=[16, 5, 6]) /* ty=Tensor[(16, 5, 6), float32] */;
  %204 = @func_3467() /* ty=Tensor[(5, 13, 16), float32] */;
  %205 = @func_2430(%203) /* ty=Tensor[(16, 5, 6), float32] */;
  (%204, %205, meta[relay.Constant][16] /* ty=Tensor[(480), float32] */)
}

def @func_5028(%var_4999: Tensor[(392), uint32], %var_5006: Tensor[(392), uint32]) -> (Tensor[(392), float32], Tensor[(392), bool], Tensor[(392), float32]) {
  %206 = @func_2693() /* ty=(Tensor[(13, 9, 9), float64], Tensor[(7, 7, 8), uint32], Tensor[(392), uint32], Tensor[(6, 14, 2), bool], Tensor[(168), float64], Tensor[(12, 5, 14), float64], Tensor[(840, 1), float64]) */;
  %207 = %206.2;
  %208 = cast(%var_4999, dtype="float32") /* ty=Tensor[(392), float32] */;
  %209 = shape_of(%207, dtype="int32") /* ty=Tensor[(1), int32] */;
  %210 = cast(%207, dtype="float32") /* ty=Tensor[(392), float32] */;
  %211 = dyn.reshape(%208, %209, newshape=[]) /* ty=Tensor[(?), float32] */;
  %212 = cast(%var_5006, dtype="bool") /* ty=Tensor[(392), bool] */;
  %213 = shape_of(%207, dtype="int32") /* ty=Tensor[(1), int32] */;
  %214 = cast(%207, dtype="bool") /* ty=Tensor[(392), bool] */;
  %215 = dyn.reshape(%212, %213, newshape=[]) /* ty=Tensor[(?), bool] */;
  %216 = cast(%var_5006, dtype="float32") /* ty=Tensor[(392), float32] */;
  %217 = mod(%210, %211) /* ty=Tensor[(392), float32] */;
  %218 = not_equal(%214, %215) /* ty=Tensor[(392), bool] */;
  %219 = asin(%216) /* ty=Tensor[(392), float32] */;
  (%217, %218, %219)
}

def @func_5415() -> (Tensor[(13, 9, 9), float32],) {
  %220 = @func_2225() /* ty=(Tensor[(13, 9, 9), float32],) */;
  %221 = %220.0;
  (%221,)
}

def @func_3375(%var_3157: Tensor[(1848), float32], %var_3290: Tensor[(9, 3, 9), float64], %var_3367: Tensor[(9, 3, 9), bool]) -> (Tensor[(1848), float32], Tensor[(1848), float32], Tensor[(10, 11, 4), float64], Tensor[(440), float64], Tensor[(10, 11, 4), float64], Tensor[(9, 3, 9), float64], Tensor[(7, 7, 8), uint32], Tensor[(5, 13, 16), float32], Tensor[(7, 7, 8), uint32], Tensor[(1848), float32], Tensor[(6, 14, 2), bool], Tensor[(120), uint64], Tensor[(12, 5, 14), float64], Tensor[(840), float64], Tensor[(9, 3, 9), bool], Tensor[(9, 3, 9), float32], Tensor[(10, 11, 4), float64], Tensor[(9, 3, 9), int64], Tensor[(5, 13, 16), float32], Tensor[(13, 9, 9), float64], Tensor[(9, 3, 9), bool]) {
  %222 = cast(%var_3157, dtype="float32") /* ty=Tensor[(1848), float32] */;
  %223 = reshape(%222, newshape=[1848]) /* ty=Tensor[(1848), float32] */;
  %224 = @func_3023(%223) /* ty=(Tensor[(1848), float32],) */;
  %225 = cast(meta[relay.Constant][17] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
  %226 = cast(meta[relay.Constant][17] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
  %227 = reshape(%225, newshape=[10, 11, 4]) /* ty=Tensor[(10, 11, 4), float64] */;
  %228 = reshape(%226, newshape=[10, 11, 4]) /* ty=Tensor[(10, 11, 4), float64] */;
  %229 = cast(meta[relay.Constant][17] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
  %230 = cast(meta[relay.Constant][17] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
  %231 = reshape(%229, newshape=[10, 11, 4]) /* ty=Tensor[(10, 11, 4), float64] */;
  %232 = reshape(%230, newshape=[10, 11, 4]) /* ty=Tensor[(10, 11, 4), float64] */;
  %233 = cast(meta[relay.Constant][18] /* ty=Tensor[(9, 3, 9), float64] */, dtype="float64") /* ty=Tensor[(9, 3, 9), float64] */;
  %234 = log10(%233) /* ty=Tensor[(9, 3, 9), float64] */;
  %235 = cast(%234, dtype="float64") /* ty=Tensor[(9, 3, 9), float64] */;
  %236 = @func_2693() /* ty=(Tensor[(13, 9, 9), float64], Tensor[(7, 7, 8), uint32], Tensor[(392), uint32], Tensor[(6, 14, 2), bool], Tensor[(168), float64], Tensor[(12, 5, 14), float64], Tensor[(840, 1), float64]) */;
  %237 = %236.1;
  %238 = cast(%237, dtype="uint32") /* ty=Tensor[(7, 7, 8), uint32] */;
  %239 = reshape(%238, newshape=[7, 7, 8]) /* ty=Tensor[(7, 7, 8), uint32] */;
  %240 = @func_2236() /* ty=(Tensor[(13, 9, 9), float64], Tensor[(7, 7, 8), uint32], Tensor[(120), uint64], Tensor[(392), uint32], Tensor[(1848), float32]) */;
  %241 = @func_2236() /* ty=(Tensor[(13, 9, 9), float64], Tensor[(7, 7, 8), uint32], Tensor[(120), uint64], Tensor[(392), uint32], Tensor[(1848), float32]) */;
  %242 = cast(meta[relay.Constant][19] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %243 = cast(meta[relay.Constant][19] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %244 = reshape(%242, newshape=[12, 5, 14]) /* ty=Tensor[(12, 5, 14), float64] */;
  %245 = reshape(%243, newshape=[12, 5, 14]) /* ty=Tensor[(12, 5, 14), float64] */;
  %246 = @func_1892(%244, %245) /* ty=(Tensor[(12, 5, 14), float64],) */;
  %247 = cast(%var_3290, dtype="bool") /* ty=Tensor[(9, 3, 9), bool] */;
  %248 = shape_of(%234, dtype="int32") /* ty=Tensor[(3), int32] */;
  %249 = cast(%234, dtype="bool") /* ty=Tensor[(9, 3, 9), bool] */;
  %250 = dyn.reshape(%247, %248, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %251 = cast(%234, dtype="float64") /* ty=Tensor[(9, 3, 9), float64] */;
  %252 = acos(%251) /* ty=Tensor[(9, 3, 9), float64] */;
  %253 = cast(%252, dtype="int16") /* ty=Tensor[(9, 3, 9), int16] */;
  %254 = shape_of(%234, dtype="int32") /* ty=Tensor[(3), int32] */;
  %255 = cast(%234, dtype="int16") /* ty=Tensor[(9, 3, 9), int16] */;
  %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %257 = bitwise_and(%255, %256) /* ty=Tensor[(9, 3, 9), int16] */;
  %258 = cast(%234, dtype="float32") /* ty=Tensor[(9, 3, 9), float32] */;
  %259 = shape_of(%257, dtype="int32") /* ty=Tensor[(3), int32] */;
  %260 = cast(%257, dtype="float32") /* ty=Tensor[(9, 3, 9), float32] */;
  %261 = dyn.reshape(%258, %259, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %262 = cast(meta[relay.Constant][17] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
  %263 = @func_1729(%227, %228) /* ty=Tensor[(10, 11, 4), float64] */;
  %264 = cast(%263, dtype="float64") /* ty=Tensor[(10, 11, 4), float64] */;
  %265 = reshape(%262, newshape=[10, 11, 4]) /* ty=Tensor[(10, 11, 4), float64] */;
  %266 = reshape(%264, newshape=[10, 11, 4]) /* ty=Tensor[(10, 11, 4), float64] */;
  %267 = cast(%257, dtype="float32") /* ty=Tensor[(9, 3, 9), float32] */;
  %268 = tan(%267) /* ty=Tensor[(9, 3, 9), float32] */;
  %269 = cast(%252, dtype="bool") /* ty=Tensor[(9, 3, 9), bool] */;
  %270 = shape_of(%268, dtype="int32") /* ty=Tensor[(3), int32] */;
  %271 = cast(%268, dtype="bool") /* ty=Tensor[(9, 3, 9), bool] */;
  %272 = dyn.reshape(%269, %270, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %273 = less(%271, %272) /* ty=Tensor[(9, 3, 9), bool] */;
  %274 = cast(%234, dtype="float32") /* ty=Tensor[(9, 3, 9), float32] */;
  %275 = cos(%274) /* ty=Tensor[(9, 3, 9), float32] */;
  %276 = cast(%275, dtype="int64") /* ty=Tensor[(9, 3, 9), int64] */;
  %277 = shape_of(%273, dtype="int32") /* ty=Tensor[(3), int32] */;
  %278 = cast(%273, dtype="int64") /* ty=Tensor[(9, 3, 9), int64] */;
  %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %280 = cast(%var_3367, dtype="bool") /* ty=Tensor[(9, 3, 9), bool] */;
  %281 = shape_of(%273, dtype="int32") /* ty=Tensor[(3), int32] */;
  %282 = cast(%273, dtype="bool") /* ty=Tensor[(9, 3, 9), bool] */;
  %283 = dyn.reshape(%280, %281, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %284 = %224.0;
  %285 = @func_1729(%231, %232) /* ty=Tensor[(10, 11, 4), float64] */;
  %286 = asinh(%235) /* ty=Tensor[(9, 3, 9), float64] */;
  %287 = @func_2585() /* ty=Tensor[(5, 13, 16), float32] */;
  %288 = @func_653(%239) /* ty=Tensor[(7, 7, 8), uint32] */;
  %289 = %240.4;
  %290 = @func_2723() /* ty=Tensor[(6, 14, 2), bool] */;
  %291 = %241.2;
  %292 = %246.0;
  %293 = logical_or(%249, %250) /* ty=Tensor[(9, 3, 9), bool] */;
  %294 = mod(%260, %261) /* ty=Tensor[(9, 3, 9), float32] */;
  %295 = @func_1729(%265, %266) /* ty=Tensor[(10, 11, 4), float64] */;
  %296 = subtract(%278, %279) /* ty=Tensor[(9, 3, 9), int64] */;
  %297 = @func_2585() /* ty=Tensor[(5, 13, 16), float32] */;
  %298 = @func_1915() /* ty=Tensor[(13, 9, 9), float64] */;
  %299 = logical_and(%282, %283) /* ty=Tensor[(9, 3, 9), bool] */;
  (%284, %var_3157, %263, meta[relay.Constant][17] /* ty=Tensor[(440), float64] */, %285, %286, %237, %287, %288, %289, %290, %291, %292, meta[relay.Constant][19] /* ty=Tensor[(840), float64] */, %293, %294, %295, %296, %297, %298, %299)
}

def @func_2051(%var_2042: Tensor[(1440), int64], %var_2043: Tensor[(392), uint32], %var_2044: Tensor[(1040), float32]) -> (Tensor[(13, 9, 9), float64], Tensor[(392), uint32], Tensor[(1440), int64], Tensor[(392), uint32], Tensor[(1040), float32]) {
  %300 = cast(%var_2042, dtype="int64") /* ty=Tensor[(1440), int64] */;
  %301 = cast(%var_2042, dtype="int64") /* ty=Tensor[(1440), int64] */;
  %302 = cast(%var_2043, dtype="uint32") /* ty=Tensor[(392), uint32] */;
  %303 = cast(%var_2044, dtype="float32") /* ty=Tensor[(1040), float32] */;
  %304 = reshape(%300, newshape=[8, 12, 15]) /* ty=Tensor[(8, 12, 15), int64] */;
  %305 = reshape(%301, newshape=[8, 12, 15]) /* ty=Tensor[(8, 12, 15), int64] */;
  %306 = reshape(%302, newshape=[392]) /* ty=Tensor[(392), uint32] */;
  %307 = reshape(%303, newshape=[1040]) /* ty=Tensor[(1040), float32] */;
  %308 = @func_1572(%304, %305, %306, %307) /* ty=(Tensor[(8, 12, 15), int64], Tensor[(16, 9, 11), int16], Tensor[(1584), int16], Tensor[(392), bool], Tensor[(6, 20), uint64], Tensor[(392), uint32], Tensor[(84, 22), float32], Tensor[(7, 7, 8), uint32], Tensor[(5, 13, 16), float32], Tensor[(1040), float32], Tensor[(5, 13, 16), float32]) */;
  %309 = @func_1915() /* ty=Tensor[(13, 9, 9), float64] */;
  %310 = %308.5;
  (%309, %310, %var_2042, %var_2043, %var_2044)
}

def @func_4572(%var_4558: Tensor[(13, 9, 9), float32]) -> (Tensor[(13, 9, 9), float32],) {
  %311 = @func_2225() /* ty=(Tensor[(13, 9, 9), float32],) */;
  %312 = %311.0;
  %313 = cast(%var_4558, dtype="float32") /* ty=Tensor[(13, 9, 9), float32] */;
  %314 = shape_of(%312, dtype="int32") /* ty=Tensor[(3), int32] */;
  %315 = cast(%312, dtype="float32") /* ty=Tensor[(13, 9, 9), float32] */;
  %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %317 = power(%315, %316) /* ty=Tensor[(13, 9, 9), float32] */;
  (%317,)
}

def @func_3902() -> (Tensor[(3, 11, 12), float32], Tensor[(5, 13, 16), float32]) {
  %318 = @func_2895() /* ty=Tensor[(3, 11, 12), float32] */;
  %319 = @func_2585() /* ty=Tensor[(5, 13, 16), float32] */;
  (%318, %319)
}

def @func_4640() -> (Tensor[(3, 11, 12), float32],) {
  %320 = @func_3737() /* ty=(Tensor[(3, 11, 12), float32],) */;
  %321 = %320.0;
  (%321,)
}

def @func_6138(%var_6125: Tensor[(16, 1, 10), float64]) -> (Tensor[(16, 1, 10), float64], Tensor[(16, 5, 6), float32]) {
  %322 = cast(%var_6125, dtype="float64") /* ty=Tensor[(16, 1, 10), float64] */;
  %323 = @func_5532() /* ty=(Tensor[(16, 5, 6), float32], Tensor[(3, 11, 12), float32], Tensor[(840, 480), float64], Tensor[(840, 480), float32]) */;
  %324 = sqrt(%322) /* ty=Tensor[(16, 1, 10), float64] */;
  %325 = %323.0;
  (%324, %325)
}

def @main(%var_6277: Tensor[(1, 4, 7), float64]) -> Tensor[(1, 4, 7), float64] {
  %326 = cast(%var_6277, dtype="float64") /* ty=Tensor[(1, 4, 7), float64] */;
  cos(%326) /* ty=Tensor[(1, 4, 7), float64] */
}

def @func_890(%var_868: Tensor[(2, 9, 7), float32]) -> (Tensor[(2, 9, 7), float32], Tensor[(392), bool], Tensor[(120), uint64], Tensor[(392), uint32], Tensor[(1848), float32]) {
  %327 = cast(%var_868, dtype="float32") /* ty=Tensor[(2, 9, 7), float32] */;
  %328 = cast(meta[relay.Constant][20] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %329 = cast(meta[relay.Constant][20] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %330 = cast(meta[relay.Constant][21] /* ty=Tensor[(392), uint32] */, dtype="uint32") /* ty=Tensor[(392), uint32] */;
  %331 = cast(meta[relay.Constant][22] /* ty=Tensor[(1848), float32] */, dtype="float32") /* ty=Tensor[(1848), float32] */;
  %332 = reshape(%328, newshape=[5, 4, 6]) /* ty=Tensor[(5, 4, 6), uint64] */;
  %333 = reshape(%329, newshape=[5, 4, 6]) /* ty=Tensor[(5, 4, 6), uint64] */;
  %334 = reshape(%330, newshape=[392]) /* ty=Tensor[(392), uint32] */;
  %335 = reshape(%331, newshape=[924, 2]) /* ty=Tensor[(924, 2), float32] */;
  %336 = @func_779(%332, %333, %334, %335) /* ty=(Tensor[(5, 4, 6), bool], Tensor[(7, 7, 8), uint32], Tensor[(392), bool], Tensor[(16, 9, 11), float32], Tensor[(924, 2), float32], Tensor[(16, 9, 11), int16]) */;
  %337 = sinh(%327) /* ty=Tensor[(2, 9, 7), float32] */;
  %338 = %336.2;
  (%337, %338, meta[relay.Constant][20] /* ty=Tensor[(120), uint64] */, meta[relay.Constant][21] /* ty=Tensor[(392), uint32] */, meta[relay.Constant][22] /* ty=Tensor[(1848), float32] */)
}

def @func_2165(%var_2150: uint64, %var_2151: Tensor[(2, 1, 13), uint64]) -> (Tensor[(2, 1, 13), bool],) {
  %339 = cast(%var_2150, dtype="uint64") /* ty=uint64 */;
  %340 = cast(%var_2151, dtype="uint64") /* ty=Tensor[(2, 1, 13), uint64] */;
  %341 = bitwise_xor(%339, %340) /* ty=Tensor[(2, 1, 13), uint64] */;
  %342 = cast(%341, dtype="bool") /* ty=Tensor[(2, 1, 13), bool] */;
  %343 = cast(%var_2150, dtype="bool") /* ty=bool */;
  %344 = less_equal(%342, %343) /* ty=Tensor[(2, 1, 13), bool] */;
  (%344,)
}

def @func_3023(%var_3018: Tensor[(1848), float32]) -> (Tensor[(1848), float32],) {
  %345 = @func_2236() /* ty=(Tensor[(13, 9, 9), float64], Tensor[(7, 7, 8), uint32], Tensor[(120), uint64], Tensor[(392), uint32], Tensor[(1848), float32]) */;
  %346 = %345.4;
  %347 = cast(%var_3018, dtype="float32") /* ty=Tensor[(1848), float32] */;
  %348 = shape_of(%346, dtype="int32") /* ty=Tensor[(1), int32] */;
  %349 = cast(%346, dtype="float32") /* ty=Tensor[(1848), float32] */;
  %350 = dyn.reshape(%347, %348, newshape=[]) /* ty=Tensor[(?), float32] */;
  %351 = multiply(%349, %350) /* ty=Tensor[(1848), float32] */;
  (%351,)
}

def @func_6204() -> Tensor[(13, 9, 9), float32] {
  %352 = @func_4004() /* ty=(Tensor[(3, 11, 12), float32], Tensor[(13, 9, 9), float32]) */;
  %352.1
}

def @func_4839(%var_4832: Tensor[(13, 9, 9), float64]) -> (Tensor[(13, 9, 9), float64],) {
  %353 = @func_2658() /* ty=Tensor[(13, 9, 9), float64] */;
  %354 = cast(%var_4832, dtype="float64") /* ty=Tensor[(13, 9, 9), float64] */;
  %355 = shape_of(%353, dtype="int32") /* ty=Tensor[(3), int32] */;
  %356 = cast(%353, dtype="float64") /* ty=Tensor[(13, 9, 9), float64] */;
  %357 = dyn.reshape(%354, %355, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %358 = floor_divide(%356, %357) /* ty=Tensor[(13, 9, 9), float64] */;
  (%358,)
}

def @func_1203(%var_1179: Tensor[(3, 2, 12), float64], %var_1180: Tensor[(3, 2, 12), float64]) -> (Tensor[(3, 2, 12), float64],) {
  %359 = cast(%var_1180, dtype="bool") /* ty=Tensor[(3, 2, 12), bool] */;
  %360 = shape_of(%var_1179, dtype="int32") /* ty=Tensor[(3), int32] */;
  %361 = cast(%var_1179, dtype="bool") /* ty=Tensor[(3, 2, 12), bool] */;
  %362 = dyn.reshape(%359, %360, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %363 = less_equal(%361, %362) /* ty=Tensor[(3, 2, 12), bool] */;
  %364 = cast(%var_1180, dtype="float64") /* ty=Tensor[(3, 2, 12), float64] */;
  %365 = shape_of(%var_1179, dtype="int32") /* ty=Tensor[(3), int32] */;
  %366 = cast(%var_1179, dtype="float64") /* ty=Tensor[(3, 2, 12), float64] */;
  %367 = dyn.reshape(%364, %365, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %368 = floor_divide(%366, %367) /* ty=Tensor[(3, 2, 12), float64] */;
  %369 = cast(%368, dtype="float64") /* ty=Tensor[(3, 2, 12), float64] */;
  %370 = shape_of(%363, dtype="int32") /* ty=Tensor[(3), int32] */;
  %371 = cast(%363, dtype="float64") /* ty=Tensor[(3, 2, 12), float64] */;
  %372 = dyn.reshape(%369, %370, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %373 = mod(%371, %372) /* ty=Tensor[(3, 2, 12), float64] */;
  (%373,)
}

def @func_779(%var_720: Tensor[(5, 4, 6), uint64], %var_721: Tensor[(5, 4, 6), uint64], %var_727: Tensor[(392), uint32], %var_742: Tensor[(924, 2), float32]) -> (Tensor[(5, 4, 6), bool], Tensor[(7, 7, 8), uint32], Tensor[(392), bool], Tensor[(16, 9, 11), float32], Tensor[(924, 2), float32], Tensor[(16, 9, 11), int16]) {
  %374 = cast(%var_721, dtype="bool") /* ty=Tensor[(5, 4, 6), bool] */;
  %375 = shape_of(%var_720, dtype="int32") /* ty=Tensor[(3), int32] */;
  %376 = cast(%var_720, dtype="bool") /* ty=Tensor[(5, 4, 6), bool] */;
  %377 = dyn.reshape(%374, %375, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %378 = cast(%var_727, dtype="uint32") /* ty=Tensor[(392), uint32] */;
  %379 = reshape(%378, newshape=[7, 7, 8]) /* ty=Tensor[(7, 7, 8), uint32] */;
  %380 = @func_653(%379) /* ty=Tensor[(7, 7, 8), uint32] */;
  %381 = cast(%380, dtype="uint32") /* ty=Tensor[(7, 7, 8), uint32] */;
  %382 = reshape(%381, newshape=[7, 7, 8]) /* ty=Tensor[(7, 7, 8), uint32] */;
  %383 = @func_653(%382) /* ty=Tensor[(7, 7, 8), uint32] */;
  %384 = cast(%383, dtype="bool") /* ty=Tensor[(7, 7, 8), bool] */;
  %385 = shape_of(%var_727, dtype="int32") /* ty=Tensor[(1), int32] */;
  %386 = cast(%var_727, dtype="bool") /* ty=Tensor[(392), bool] */;
  %387 = dyn.reshape(%384, %385, newshape=[]) /* ty=Tensor[(?), bool] */;
  %388 = cast(%var_742, dtype="float32") /* ty=Tensor[(924, 2), float32] */;
  %389 = reshape(%388, newshape=[14, 11, 12]) /* ty=Tensor[(14, 11, 12), float32] */;
  %390 = @func_502(%389) /* ty=(Tensor[(16, 9, 11), float32], Tensor[(1584), int16], Tensor[(16, 9, 11), int16], Tensor[(14, 11, 12), float64]) */;
  %391 = %390.0;
  %392 = cast(%391, dtype="int16") /* ty=Tensor[(16, 9, 11), int16] */;
  %393 = reshape(%392, newshape=[16, 9, 11]) /* ty=Tensor[(16, 9, 11), int16] */;
  %394 = @func_342(%393) /* ty=(Tensor[(16, 9, 11), int16], Tensor[(16, 9, 11), int16], Tensor[(16, 9, 11), float32]) */;
  %395 = not_equal(%376, %377) /* ty=Tensor[(5, 4, 6), bool] */;
  %396 = logical_and(%386, %387) /* ty=Tensor[(392), bool] */;
  %397 = %394.1;
  (%395, %380, %396, %391, %var_742, %397)
}

def @func_4768() -> Tensor[(3, 11, 12), float32] {
  @func_2895() /* ty=Tensor[(3, 11, 12), float32] */
}

def @func_4924() -> (Tensor[(7, 7, 8), float32],) {
  %398 = @func_3847() /* ty=Tensor[(7, 7, 8), float32] */;
  (%398,)
}

def @func_2523(%var_2502: Tensor[(480), float32], %var_2507: Tensor[(13, 9, 9), float32]) -> (Tensor[(16, 5, 6), float32], Tensor[(480), float32], Tensor[(13, 9, 9), bool]) {
  %399 = cast(%var_2502, dtype="float32") /* ty=Tensor[(480), float32] */;
  %400 = reshape(%399, newshape=[16, 5, 6]) /* ty=Tensor[(16, 5, 6), float32] */;
  %401 = @func_2225() /* ty=(Tensor[(13, 9, 9), float32],) */;
  %402 = %401.0;
  %403 = cast(%var_2507, dtype="bool") /* ty=Tensor[(13, 9, 9), bool] */;
  %404 = shape_of(%402, dtype="int32") /* ty=Tensor[(3), int32] */;
  %405 = cast(%402, dtype="bool") /* ty=Tensor[(13, 9, 9), bool] */;
  %406 = dyn.reshape(%403, %404, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %407 = @func_2430(%400) /* ty=Tensor[(16, 5, 6), float32] */;
  %408 = greater_equal(%405, %406) /* ty=Tensor[(13, 9, 9), bool] */;
  (%407, %var_2502, %408)
}

def @func_2225() -> (Tensor[(13, 9, 9), float32],) {
  %409 = @func_1915() /* ty=Tensor[(13, 9, 9), float64] */;
  %410 = cast(%409, dtype="float32") /* ty=Tensor[(13, 9, 9), float32] */;
  %411 = cos(%410) /* ty=Tensor[(13, 9, 9), float32] */;
  (%411,)
}

def @func_2970(%var_2956: Tensor[(7, 8, 12), float32], %var_2957: Tensor[(7, 8, 12), float32]) -> (Tensor[(7, 8, 12), float32],) {
  %412 = cast(%var_2957, dtype="float32") /* ty=Tensor[(7, 8, 12), float32] */;
  %413 = shape_of(%var_2956, dtype="int32") /* ty=Tensor[(3), int32] */;
  %414 = cast(%var_2956, dtype="float32") /* ty=Tensor[(7, 8, 12), float32] */;
  %415 = dyn.reshape(%412, %413, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %416 = power(%414, %415) /* ty=Tensor[(7, 8, 12), float32] */;
  (%416,)
}

def @func_2120(%var_2115: Tensor[(26, 7), float32]) -> (Tensor[(13, 9, 9), bool], Tensor[(14, 13), float32], Tensor[(26, 7), float32]) {
  %417 = @func_1915() /* ty=Tensor[(13, 9, 9), float64] */;
  %418 = cast(%417, dtype="float64") /* ty=Tensor[(13, 9, 9), float64] */;
  %419 = acosh(%418) /* ty=Tensor[(13, 9, 9), float64] */;
  %420 = cast(%417, dtype="bool") /* ty=Tensor[(13, 9, 9), bool] */;
  %421 = shape_of(%419, dtype="int32") /* ty=Tensor[(3), int32] */;
  %422 = cast(%419, dtype="bool") /* ty=Tensor[(13, 9, 9), bool] */;
  %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %424 = cast(%var_2115, dtype="float32") /* ty=Tensor[(26, 7), float32] */;
  %425 = reshape(%424, newshape=[14, 13]) /* ty=Tensor[(14, 13), float32] */;
  %426 = @func_1299(%425) /* ty=(Tensor[(14, 13), float32],) */;
  %427 = logical_or(%422, %423) /* ty=Tensor[(13, 9, 9), bool] */;
  %428 = %426.0;
  (%427, %428, %var_2115)
}

def @func_4516(%var_4476: Tensor[(4, 15, 15), bool], %var_4477: Tensor[(4, 15, 15), bool]) -> (Tensor[(4, 15, 15), bool], Tensor[(4, 15, 15), uint64], Tensor[(4, 15, 15), float32], Tensor[(6, 14, 2), uint32], Tensor[(168), float64]) {
  %429 = cast(%var_4477, dtype="bool") /* ty=Tensor[(4, 15, 15), bool] */;
  %430 = shape_of(%var_4476, dtype="int32") /* ty=Tensor[(3), int32] */;
  %431 = cast(%var_4476, dtype="bool") /* ty=Tensor[(4, 15, 15), bool] */;
  %432 = dyn.reshape(%429, %430, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %433 = cast(meta[relay.Constant][23] /* ty=Tensor[(4, 15, 15), bool] */, dtype="uint64") /* ty=Tensor[(4, 15, 15), uint64] */;
  %434 = shape_of(%var_4477, dtype="int32") /* ty=Tensor[(3), int32] */;
  %435 = cast(%var_4477, dtype="uint64") /* ty=Tensor[(4, 15, 15), uint64] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %437 = cast(%var_4476, dtype="float32") /* ty=Tensor[(4, 15, 15), float32] */;
  %438 = cast(meta[relay.Constant][24] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
  %439 = cast(meta[relay.Constant][24] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
  %440 = cast(meta[relay.Constant][24] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
  %441 = reshape(%438, newshape=[6, 14, 2]) /* ty=Tensor[(6, 14, 2), float64] */;
  %442 = reshape(%439, newshape=[6, 14, 2]) /* ty=Tensor[(6, 14, 2), float64] */;
  %443 = reshape(%440, newshape=[6, 14, 2]) /* ty=Tensor[(6, 14, 2), float64] */;
  %444 = @func_828(%441, %442, %443) /* ty=(Tensor[(6, 14, 2), uint32], Tensor[(6, 14, 2), bool]) */;
  %445 = logical_and(%431, %432) /* ty=Tensor[(4, 15, 15), bool] */;
  %446 = bitwise_xor(%435, %436) /* ty=Tensor[(4, 15, 15), uint64] */;
  %447 = atan(%437) /* ty=Tensor[(4, 15, 15), float32] */;
  %448 = %444.0;
  (%445, %446, %447, %448, meta[relay.Constant][24] /* ty=Tensor[(168), float64] */)
}

def @func_6267() -> (Tensor[(13, 9, 9), float64], Tensor[(13, 9, 9), float64], Tensor[(13, 9, 9), float64]) {
  %449 = @func_2236() /* ty=(Tensor[(13, 9, 9), float64], Tensor[(7, 7, 8), uint32], Tensor[(120), uint64], Tensor[(392), uint32], Tensor[(1848), float32]) */;
  %450 = @func_2236() /* ty=(Tensor[(13, 9, 9), float64], Tensor[(7, 7, 8), uint32], Tensor[(120), uint64], Tensor[(392), uint32], Tensor[(1848), float32]) */;
  %451 = %449.0;
  %452 = @func_2658() /* ty=Tensor[(13, 9, 9), float64] */;
  %453 = %450.0;
  (%451, %452, %453)
}

def @func_5576() -> (Tensor[(5, 13, 16), float32],) {
  %454 = @func_3467() /* ty=Tensor[(5, 13, 16), float32] */;
  (%454,)
}

def @func_6120() -> (Tensor[(3, 11, 12), float32], Tensor[(13, 9, 9), float64]) {
  %455 = @func_6016() /* ty=Tensor[(3, 11, 12), float32] */;
  %456 = @func_2658() /* ty=Tensor[(13, 9, 9), float64] */;
  (%455, %456)
}

def @func_2585() -> Tensor[(5, 13, 16), float32] {
  %457 = @func_2482() /* ty=(Tensor[(3, 11, 12), float32], Tensor[(5, 13, 16), float32], Tensor[(4, 260), float32]) */;
  %457.1
}

def @func_2723() -> Tensor[(6, 14, 2), bool] {
  %458 = @func_2693() /* ty=(Tensor[(13, 9, 9), float64], Tensor[(7, 7, 8), uint32], Tensor[(392), uint32], Tensor[(6, 14, 2), bool], Tensor[(168), float64], Tensor[(12, 5, 14), float64], Tensor[(840, 1), float64]) */;
  %458.3
}

def @func_2366(%var_2360: uint32, %var_2361: Tensor[(16, 1), uint32]) -> (Tensor[(16, 1), bool],) {
  %459 = cast(%var_2360, dtype="bool") /* ty=bool */;
  %460 = cast(%var_2361, dtype="bool") /* ty=Tensor[(16, 1), bool] */;
  %461 = not_equal(%459, %460) /* ty=Tensor[(16, 1), bool] */;
  (%461,)
}

def @func_2430(%var_2424: Tensor[(16, 5, 6), float32]) -> Tensor[(16, 5, 6), float32] {
  %462 = cast(%var_2424, dtype="float32") /* ty=Tensor[(16, 5, 6), float32] */;
  cos(%462) /* ty=Tensor[(16, 5, 6), float32] */
}

def @func_2738(%var_2725: int64, %var_2726: Tensor[(2, 12, 16), int64]) -> Tensor[(2, 12, 16), bool] {
  %463 = cast(%var_2725, dtype="bool") /* ty=bool */;
  %464 = cast(%var_2726, dtype="bool") /* ty=Tensor[(2, 12, 16), bool] */;
  not_equal(%463, %464) /* ty=Tensor[(2, 12, 16), bool] */
}

def @func_1810(%var_1805: Tensor[(6, 2, 1), int64], %var_1806: Tensor[(6, 2, 8), int64]) -> Tensor[(6, 2, 8), int64] {
  %465 = cast(%var_1805, dtype="int64") /* ty=Tensor[(6, 2, 1), int64] */;
  %466 = cast(%var_1806, dtype="int64") /* ty=Tensor[(6, 2, 8), int64] */;
  bitwise_and(%465, %466) /* ty=Tensor[(6, 2, 8), int64] */
}

def @func_4422() -> (Tensor[(5, 13, 16), bool], Tensor[(440), float64], Tensor[(5, 13, 16), float32], Tensor[(5, 13, 16), int16]) {
  %467 = @func_2585() /* ty=Tensor[(5, 13, 16), float32] */;
  %468 = cast(meta[relay.Constant][25] /* ty=Tensor[(5, 13, 16), float32] */, dtype="bool") /* ty=Tensor[(5, 13, 16), bool] */;
  %469 = shape_of(%467, dtype="int32") /* ty=Tensor[(3), int32] */;
  %470 = cast(%467, dtype="bool") /* ty=Tensor[(5, 13, 16), bool] */;
  %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %472 = @func_4149() /* ty=(Tensor[(7, 7, 8), uint32], Tensor[(392), float64], Tensor[(5, 13, 16), float32], Tensor[(440), float64]) */;
  %473 = cast(meta[relay.Constant][25] /* ty=Tensor[(5, 13, 16), float32] */, dtype="float32") /* ty=Tensor[(5, 13, 16), float32] */;
  %474 = reshape(%473, newshape=[5, 13, 16]) /* ty=Tensor[(5, 13, 16), float32] */;
  %475 = @func_1515(%474) /* ty=Tensor[(5, 13, 16), float32] */;
  %476 = cast(%475, dtype="int16") /* ty=Tensor[(5, 13, 16), int16] */;
  %477 = shape_of(%467, dtype="int32") /* ty=Tensor[(3), int32] */;
  %478 = cast(%467, dtype="int16") /* ty=Tensor[(5, 13, 16), int16] */;
  %479 = dyn.reshape(%476, %477, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %480 = greater(%470, %471) /* ty=Tensor[(5, 13, 16), bool] */;
  %481 = %472.3;
  %482 = @func_3467() /* ty=Tensor[(5, 13, 16), float32] */;
  %483 = maximum(%478, %479) /* ty=Tensor[(5, 13, 16), int16] */;
  (%480, %481, %482, %483)
}

def @func_1729(%var_1719: Tensor[(10, 11, 4), float64], %var_1720: Tensor[(10, 11, 4), float64]) -> Tensor[(10, 11, 4), float64] {
  %484 = cast(%var_1720, dtype="float64") /* ty=Tensor[(10, 11, 4), float64] */;
  %485 = shape_of(%var_1719, dtype="int32") /* ty=Tensor[(3), int32] */;
  %486 = cast(%var_1719, dtype="float64") /* ty=Tensor[(10, 11, 4), float64] */;
  %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  multiply(%486, %487) /* ty=Tensor[(10, 11, 4), float64] */
}

def @func_5971(%var_5948: Tensor[(392), uint32]) -> (Tensor[(5, 13, 16), float32], Tensor[(7, 7, 8), float32]) {
  %488 = cast(%var_5948, dtype="uint32") /* ty=Tensor[(392), uint32] */;
  %489 = reshape(%488, newshape=[7, 7, 8]) /* ty=Tensor[(7, 7, 8), uint32] */;
  %490 = @func_653(%489) /* ty=Tensor[(7, 7, 8), uint32] */;
  %491 = cast(%var_5948, dtype="uint8") /* ty=Tensor[(392), uint8] */;
  %492 = shape_of(%490, dtype="int32") /* ty=Tensor[(3), int32] */;
  %493 = cast(%490, dtype="uint8") /* ty=Tensor[(7, 7, 8), uint8] */;
  %494 = dyn.reshape(%491, %492, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %495 = right_shift(%493, %494) /* ty=Tensor[(7, 7, 8), uint8] */;
  %496 = cast(%495, dtype="bool") /* ty=Tensor[(7, 7, 8), bool] */;
  %497 = shape_of(%490, dtype="int32") /* ty=Tensor[(3), int32] */;
  %498 = cast(%490, dtype="bool") /* ty=Tensor[(7, 7, 8), bool] */;
  %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %500 = less(%498, %499) /* ty=Tensor[(7, 7, 8), bool] */;
  %501 = cast(%495, dtype="float32") /* ty=Tensor[(7, 7, 8), float32] */;
  %502 = shape_of(%500, dtype="int32") /* ty=Tensor[(3), int32] */;
  %503 = cast(%500, dtype="float32") /* ty=Tensor[(7, 7, 8), float32] */;
  %504 = dyn.reshape(%501, %502, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %505 = @func_5306() /* ty=Tensor[(5, 13, 16), float32] */;
  %506 = mod(%503, %504) /* ty=Tensor[(7, 7, 8), float32] */;
  (%505, %506)
}

def @func_2693() -> (Tensor[(13, 9, 9), float64], Tensor[(7, 7, 8), uint32], Tensor[(392), uint32], Tensor[(6, 14, 2), bool], Tensor[(168), float64], Tensor[(12, 5, 14), float64], Tensor[(840, 1), float64]) {
  %507 = cast(meta[relay.Constant][26] /* ty=Tensor[(392), uint32] */, dtype="uint32") /* ty=Tensor[(392), uint32] */;
  %508 = reshape(%507, newshape=[7, 7, 8]) /* ty=Tensor[(7, 7, 8), uint32] */;
  %509 = cast(meta[relay.Constant][27] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
  %510 = cast(meta[relay.Constant][27] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
  %511 = cast(meta[relay.Constant][27] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
  %512 = reshape(%509, newshape=[6, 14, 2]) /* ty=Tensor[(6, 14, 2), float64] */;
  %513 = reshape(%510, newshape=[6, 14, 2]) /* ty=Tensor[(6, 14, 2), float64] */;
  %514 = reshape(%511, newshape=[6, 14, 2]) /* ty=Tensor[(6, 14, 2), float64] */;
  %515 = @func_828(%512, %513, %514) /* ty=(Tensor[(6, 14, 2), uint32], Tensor[(6, 14, 2), bool]) */;
  %516 = cast(meta[relay.Constant][28] /* ty=Tensor[(840, 1), float64] */, dtype="float64") /* ty=Tensor[(840, 1), float64] */;
  %517 = cast(meta[relay.Constant][28] /* ty=Tensor[(840, 1), float64] */, dtype="float64") /* ty=Tensor[(840, 1), float64] */;
  %518 = reshape(%516, newshape=[12, 5, 14]) /* ty=Tensor[(12, 5, 14), float64] */;
  %519 = reshape(%517, newshape=[12, 5, 14]) /* ty=Tensor[(12, 5, 14), float64] */;
  %520 = @func_1892(%518, %519) /* ty=(Tensor[(12, 5, 14), float64],) */;
  %521 = @func_1915() /* ty=Tensor[(13, 9, 9), float64] */;
  %522 = @func_653(%508) /* ty=Tensor[(7, 7, 8), uint32] */;
  %523 = %515.1;
  %524 = %520.0;
  (%521, %522, meta[relay.Constant][26] /* ty=Tensor[(392), uint32] */, %523, meta[relay.Constant][27] /* ty=Tensor[(168), float64] */, %524, meta[relay.Constant][28] /* ty=Tensor[(840, 1), float64] */)
}

def @func_1572(%var_1537: Tensor[(8, 12, 15), int64], %var_1538: Tensor[(8, 12, 15), int64], %var_1551: Tensor[(392), uint32], %var_1559: Tensor[(1040), float32]) -> (Tensor[(8, 12, 15), int64], Tensor[(16, 9, 11), int16], Tensor[(1584), int16], Tensor[(392), bool], Tensor[(6, 20), uint64], Tensor[(392), uint32], Tensor[(84, 22), float32], Tensor[(7, 7, 8), uint32], Tensor[(5, 13, 16), float32], Tensor[(1040), float32], Tensor[(5, 13, 16), float32]) {
  %525 = cast(%var_1538, dtype="int64") /* ty=Tensor[(8, 12, 15), int64] */;
  %526 = shape_of(%var_1537, dtype="int32") /* ty=Tensor[(3), int32] */;
  %527 = cast(%var_1537, dtype="int64") /* ty=Tensor[(8, 12, 15), int64] */;
  %528 = dyn.reshape(%525, %526, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %529 = cast(meta[relay.Constant][29] /* ty=Tensor[(1584), int16] */, dtype="int16") /* ty=Tensor[(1584), int16] */;
  %530 = reshape(%529, newshape=[16, 9, 11]) /* ty=Tensor[(16, 9, 11), int16] */;
  %531 = @func_342(%530) /* ty=(Tensor[(16, 9, 11), int16], Tensor[(16, 9, 11), int16], Tensor[(16, 9, 11), float32]) */;
  %532 = cast(meta[relay.Constant][30] /* ty=Tensor[(6, 20), uint64] */, dtype="uint64") /* ty=Tensor[(6, 20), uint64] */;
  %533 = cast(meta[relay.Constant][30] /* ty=Tensor[(6, 20), uint64] */, dtype="uint64") /* ty=Tensor[(6, 20), uint64] */;
  %534 = cast(%var_1551, dtype="uint32") /* ty=Tensor[(392), uint32] */;
  %535 = cast(meta[relay.Constant][31] /* ty=Tensor[(84, 22), float32] */, dtype="float32") /* ty=Tensor[(84, 22), float32] */;
  %536 = reshape(%532, newshape=[5, 4, 6]) /* ty=Tensor[(5, 4, 6), uint64] */;
  %537 = reshape(%533, newshape=[5, 4, 6]) /* ty=Tensor[(5, 4, 6), uint64] */;
  %538 = reshape(%534, newshape=[392]) /* ty=Tensor[(392), uint32] */;
  %539 = reshape(%535, newshape=[924, 2]) /* ty=Tensor[(924, 2), float32] */;
  %540 = @func_779(%536, %537, %538, %539) /* ty=(Tensor[(5, 4, 6), bool], Tensor[(7, 7, 8), uint32], Tensor[(392), bool], Tensor[(16, 9, 11), float32], Tensor[(924, 2), float32], Tensor[(16, 9, 11), int16]) */;
  %541 = cast(%var_1551, dtype="uint32") /* ty=Tensor[(392), uint32] */;
  %542 = reshape(%541, newshape=[7, 7, 8]) /* ty=Tensor[(7, 7, 8), uint32] */;
  %543 = cast(%var_1559, dtype="float32") /* ty=Tensor[(1040), float32] */;
  %544 = reshape(%543, newshape=[5, 13, 16]) /* ty=Tensor[(5, 13, 16), float32] */;
  %545 = cast(%var_1559, dtype="float32") /* ty=Tensor[(1040), float32] */;
  %546 = reshape(%545, newshape=[5, 13, 16]) /* ty=Tensor[(5, 13, 16), float32] */;
  %547 = right_shift(%527, %528) /* ty=Tensor[(8, 12, 15), int64] */;
  %548 = %531.0;
  %549 = %540.2;
  %550 = @func_653(%542) /* ty=Tensor[(7, 7, 8), uint32] */;
  %551 = @func_1515(%544) /* ty=Tensor[(5, 13, 16), float32] */;
  %552 = @func_1515(%546) /* ty=Tensor[(5, 13, 16), float32] */;
  (%547, %548, meta[relay.Constant][29] /* ty=Tensor[(1584), int16] */, %549, meta[relay.Constant][30] /* ty=Tensor[(6, 20), uint64] */, %var_1551, meta[relay.Constant][31] /* ty=Tensor[(84, 22), float32] */, %550, %551, %var_1559, %552)
}

def @func_2895() -> Tensor[(3, 11, 12), float32] {
  %553 = @func_2482() /* ty=(Tensor[(3, 11, 12), float32], Tensor[(5, 13, 16), float32], Tensor[(4, 260), float32]) */;
  %553.0
}

def @func_4004() -> (Tensor[(3, 11, 12), float32], Tensor[(13, 9, 9), float32]) {
  %554 = @func_2482() /* ty=(Tensor[(3, 11, 12), float32], Tensor[(5, 13, 16), float32], Tensor[(4, 260), float32]) */;
  %555 = @func_2225() /* ty=(Tensor[(13, 9, 9), float32],) */;
  %556 = %554.0;
  %557 = %555.0;
  (%556, %557)
}

def @func_3559() -> Tensor[(6, 14, 2), float64] {
  %558 = @func_2723() /* ty=Tensor[(6, 14, 2), bool] */;
  %559 = cast(meta[relay.Constant][32] /* ty=Tensor[(6, 14, 2), bool] */, dtype="float64") /* ty=Tensor[(6, 14, 2), float64] */;
  %560 = shape_of(%558, dtype="int32") /* ty=Tensor[(3), int32] */;
  %561 = cast(%558, dtype="float64") /* ty=Tensor[(6, 14, 2), float64] */;
  %562 = dyn.reshape(%559, %560, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%561, %562) /* ty=Tensor[(6, 14, 2), float64] */
}

def @func_3108(%var_3046: Tensor[(440), float64], %var_3070: Tensor[(72), float64]) -> (Tensor[(13, 9, 9), float32], Tensor[(2, 1, 13), bool], uint64, Tensor[(26), uint64], Tensor[(10, 11, 4), float64], Tensor[(440), float64], Tensor[(16, 9, 11), float32], Tensor[(1584), int16], Tensor[(3, 2, 12), float64], Tensor[(72), float64], Tensor[(13, 9, 9), float32], Tensor[(16, 9, 11), int16], Tensor[(1848), float32]) {
  %563 = @func_2225() /* ty=(Tensor[(13, 9, 9), float32],) */;
  %564 = cast(meta[relay.Constant][33] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %565 = cast(meta[relay.Constant][34] /* ty=Tensor[(26), uint64] */, dtype="uint64") /* ty=Tensor[(26), uint64] */;
  %566 = reshape(%564, newshape=[]) /* ty=uint64 */;
  %567 = reshape(%565, newshape=[2, 1, 13]) /* ty=Tensor[(2, 1, 13), uint64] */;
  %568 = @func_2165(%566, %567) /* ty=(Tensor[(2, 1, 13), bool],) */;
  %569 = cast(%var_3046, dtype="float64") /* ty=Tensor[(440), float64] */;
  %570 = cast(%var_3046, dtype="float64") /* ty=Tensor[(440), float64] */;
  %571 = reshape(%569, newshape=[10, 11, 4]) /* ty=Tensor[(10, 11, 4), float64] */;
  %572 = reshape(%570, newshape=[10, 11, 4]) /* ty=Tensor[(10, 11, 4), float64] */;
  %573 = cast(meta[relay.Constant][35] /* ty=Tensor[(1584), int16] */, dtype="int16") /* ty=Tensor[(1584), int16] */;
  %574 = reshape(%573, newshape=[16, 9, 11]) /* ty=Tensor[(16, 9, 11), int16] */;
  %575 = @func_342(%574) /* ty=(Tensor[(16, 9, 11), int16], Tensor[(16, 9, 11), int16], Tensor[(16, 9, 11), float32]) */;
  %576 = cast(%var_3070, dtype="float64") /* ty=Tensor[(72), float64] */;
  %577 = cast(%var_3070, dtype="float64") /* ty=Tensor[(72), float64] */;
  %578 = reshape(%576, newshape=[3, 2, 12]) /* ty=Tensor[(3, 2, 12), float64] */;
  %579 = reshape(%577, newshape=[3, 2, 12]) /* ty=Tensor[(3, 2, 12), float64] */;
  %580 = @func_1203(%578, %579) /* ty=(Tensor[(3, 2, 12), float64],) */;
  %581 = @func_2225() /* ty=(Tensor[(13, 9, 9), float32],) */;
  %582 = cast(meta[relay.Constant][36] /* ty=Tensor[(1848), float32] */, dtype="float32") /* ty=Tensor[(1848), float32] */;
  %583 = reshape(%582, newshape=[14, 11, 12]) /* ty=Tensor[(14, 11, 12), float32] */;
  %584 = @func_502(%583) /* ty=(Tensor[(16, 9, 11), float32], Tensor[(1584), int16], Tensor[(16, 9, 11), int16], Tensor[(14, 11, 12), float64]) */;
  %585 = %563.0;
  %586 = %568.0;
  %587 = @func_1729(%571, %572) /* ty=Tensor[(10, 11, 4), float64] */;
  %588 = %575.2;
  %589 = %580.0;
  %590 = %581.0;
  %591 = %584.2;
  (%585, %586, meta[relay.Constant][33] /* ty=uint64 */, meta[relay.Constant][34] /* ty=Tensor[(26), uint64] */, %587, %var_3046, %588, meta[relay.Constant][35] /* ty=Tensor[(1584), int16] */, %589, %var_3070, %590, %591, meta[relay.Constant][36] /* ty=Tensor[(1848), float32] */)
}

def @func_2482() -> (Tensor[(3, 11, 12), float32], Tensor[(5, 13, 16), float32], Tensor[(4, 260), float32]) {
  %592 = cast(meta[relay.Constant][37] /* ty=Tensor[(3, 11, 12), float32] */, dtype="float32") /* ty=Tensor[(3, 11, 12), float32] */;
  %593 = cast(meta[relay.Constant][38] /* ty=Tensor[(4, 260), float32] */, dtype="float32") /* ty=Tensor[(4, 260), float32] */;
  %594 = reshape(%593, newshape=[5, 13, 16]) /* ty=Tensor[(5, 13, 16), float32] */;
  %595 = asin(%592) /* ty=Tensor[(3, 11, 12), float32] */;
  %596 = @func_1515(%594) /* ty=Tensor[(5, 13, 16), float32] */;
  (%595, %596, meta[relay.Constant][38] /* ty=Tensor[(4, 260), float32] */)
}

def @func_5257(%var_5222: Tensor[(1848), float32], %var_5234: Tensor[(1, 72), float64]) -> (Tensor[(3, 11, 12), float32], Tensor[(1584), int16], Tensor[(1848), uint32], Tensor[(6, 14, 2), uint32], Tensor[(1, 72), float64], Tensor[(1440), int64]) {
  %597 = cast(%var_5222, dtype="float32") /* ty=Tensor[(1848), float32] */;
  %598 = reshape(%597, newshape=[14, 11, 12]) /* ty=Tensor[(14, 11, 12), float32] */;
  %599 = @func_502(%598) /* ty=(Tensor[(16, 9, 11), float32], Tensor[(1584), int16], Tensor[(16, 9, 11), int16], Tensor[(14, 11, 12), float64]) */;
  %600 = cast(meta[relay.Constant][39] /* ty=Tensor[(1848), float32] */, dtype="uint32") /* ty=Tensor[(1848), uint32] */;
  %601 = shape_of(%var_5222, dtype="int32") /* ty=Tensor[(1), int32] */;
  %602 = cast(%var_5222, dtype="uint32") /* ty=Tensor[(1848), uint32] */;
  %603 = dyn.reshape(%600, %601, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %604 = cast(%var_5234, dtype="float64") /* ty=Tensor[(1, 72), float64] */;
  %605 = cast(meta[relay.Constant][40] /* ty=Tensor[(1440), int64] */, dtype="int64") /* ty=Tensor[(1440), int64] */;
  %606 = reshape(%604, newshape=[72]) /* ty=Tensor[(72), float64] */;
  %607 = reshape(%605, newshape=[1440]) /* ty=Tensor[(1440), int64] */;
  %608 = @func_4720(%606, %607) /* ty=(Tensor[(6, 14, 2), bool], Tensor[(6, 14, 2), uint32], Tensor[(3, 2, 12), float64], Tensor[(72), float64], Tensor[(5, 13, 16), float32], Tensor[(16, 9, 11), int16], Tensor[(1440), int64], Tensor[(392), uint32], Tensor[(5, 13, 16), float32]) */;
  %609 = @func_4768() /* ty=Tensor[(3, 11, 12), float32] */;
  %610 = %599.1;
  %611 = bitwise_and(%602, %603) /* ty=Tensor[(1848), uint32] */;
  %612 = %608.1;
  (%609, %610, %611, %612, %var_5234, meta[relay.Constant][40] /* ty=Tensor[(1440), int64] */)
}

def @func_5615(%var_5610: Tensor[(3, 11, 12), float32]) -> (Tensor[(3, 11, 12), bool],) {
  %613 = @func_3737() /* ty=(Tensor[(3, 11, 12), float32],) */;
  %614 = %613.0;
  %615 = cast(%var_5610, dtype="bool") /* ty=Tensor[(3, 11, 12), bool] */;
  %616 = shape_of(%614, dtype="int32") /* ty=Tensor[(3), int32] */;
  %617 = cast(%614, dtype="bool") /* ty=Tensor[(3, 11, 12), bool] */;
  %618 = dyn.reshape(%615, %616, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %619 = equal(%617, %618) /* ty=Tensor[(3, 11, 12), bool] */;
  (%619,)
}

def @func_5432(%var_5426: Tensor[(12, 14, 1), float64]) -> (Tensor[(12, 14, 1), float64],) {
  %620 = cast(%var_5426, dtype="float64") /* ty=Tensor[(12, 14, 1), float64] */;
  %621 = cosh(%620) /* ty=Tensor[(12, 14, 1), float64] */;
  (%621,)
}

def @func_653(%var_643: Tensor[(7, 7, 8), uint32]) -> Tensor[(7, 7, 8), uint32] {
  %622 = cast(meta[relay.Constant][41] /* ty=Tensor[(7, 7, 8), uint32] */, dtype="uint32") /* ty=Tensor[(7, 7, 8), uint32] */;
  %623 = shape_of(%var_643, dtype="int32") /* ty=Tensor[(3), int32] */;
  %624 = cast(%var_643, dtype="uint32") /* ty=Tensor[(7, 7, 8), uint32] */;
  %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_and(%624, %625) /* ty=Tensor[(7, 7, 8), uint32] */
}

def @func_5092(%var_5066: int16) -> (Tensor[(2, 8, 1), float32],) {
  %626 = cast(%var_5066, dtype="int16") /* ty=int16 */;
  %627 = cast(meta[relay.Constant][42] /* ty=Tensor[(2, 8, 1), int16] */, dtype="int16") /* ty=Tensor[(2, 8, 1), int16] */;
  %628 = right_shift(%626, %627) /* ty=Tensor[(2, 8, 1), int16] */;
  %629 = cast(%628, dtype="float32") /* ty=Tensor[(2, 8, 1), float32] */;
  %630 = asinh(%629) /* ty=Tensor[(2, 8, 1), float32] */;
  (%630,)
}

def @func_1515(%var_1505: Tensor[(5, 13, 16), float32]) -> Tensor[(5, 13, 16), float32] {
  %631 = cast(%var_1505, dtype="float32") /* ty=Tensor[(5, 13, 16), float32] */;
  erf(%631) /* ty=Tensor[(5, 13, 16), float32] */
}

def @func_4149() -> (Tensor[(7, 7, 8), uint32], Tensor[(392), float64], Tensor[(5, 13, 16), float32], Tensor[(440), float64]) {
  %632 = @func_2236() /* ty=(Tensor[(13, 9, 9), float64], Tensor[(7, 7, 8), uint32], Tensor[(120), uint64], Tensor[(392), uint32], Tensor[(1848), float32]) */;
  %633 = %632.3;
  %634 = cast(%633, dtype="uint32") /* ty=Tensor[(392), uint32] */;
  %635 = reshape(%634, newshape=[7, 7, 8]) /* ty=Tensor[(7, 7, 8), uint32] */;
  %636 = cast(%633, dtype="float64") /* ty=Tensor[(392), float64] */;
  %637 = cast(meta[relay.Constant][43] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
  %638 = reshape(%637, newshape=[440]) /* ty=Tensor[(440), float64] */;
  %639 = @func_2871(%638) /* ty=(Tensor[(3, 11, 12), float32], Tensor[(440), bool], Tensor[(5, 13, 16), float32]) */;
  %640 = @func_653(%635) /* ty=Tensor[(7, 7, 8), uint32] */;
  %641 = log10(%636) /* ty=Tensor[(392), float64] */;
  %642 = %639.2;
  (%640, %641, %642, meta[relay.Constant][43] /* ty=Tensor[(440), float64] */)
}

def @func_4823(%var_4813: Tensor[(5, 13, 16), float32], %var_4820: Tensor[(12), int64], %var_4821: Tensor[(4, 24), int64]) -> (Tensor[(15, 2, 15), float32], Tensor[(5, 13, 16), uint16], Tensor[(6, 2, 8), int64], Tensor[(12), int64], Tensor[(4, 24), int64]) {
  %643 = @func_3929() /* ty=(Tensor[(15, 2, 15), float32],) */;
  %644 = @func_3645() /* ty=(Tensor[(5, 13, 16), float32],) */;
  %645 = %644.0;
  %646 = cast(%var_4813, dtype="uint16") /* ty=Tensor[(5, 13, 16), uint16] */;
  %647 = shape_of(%645, dtype="int32") /* ty=Tensor[(3), int32] */;
  %648 = cast(%645, dtype="uint16") /* ty=Tensor[(5, 13, 16), uint16] */;
  %649 = dyn.reshape(%646, %647, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %650 = cast(%var_4820, dtype="int64") /* ty=Tensor[(12), int64] */;
  %651 = cast(%var_4821, dtype="int64") /* ty=Tensor[(4, 24), int64] */;
  %652 = reshape(%650, newshape=[6, 2, 1]) /* ty=Tensor[(6, 2, 1), int64] */;
  %653 = reshape(%651, newshape=[6, 2, 8]) /* ty=Tensor[(6, 2, 8), int64] */;
  %654 = %643.0;
  %655 = left_shift(%648, %649) /* ty=Tensor[(5, 13, 16), uint16] */;
  %656 = @func_1810(%652, %653) /* ty=Tensor[(6, 2, 8), int64] */;
  (%654, %655, %656, %var_4820, %var_4821)
}

def @func_5733(%var_5730: Tensor[(72), float64]) -> (Tensor[(6, 14, 13), float64], Tensor[(4, 3, 6), float32], Tensor[(72), float64], Tensor[(1040), float32]) {
  %657 = @func_4583() /* ty=(Tensor[(6, 14, 13), float64],) */;
  %658 = cast(%var_5730, dtype="float64") /* ty=Tensor[(72), float64] */;
  %659 = cast(meta[relay.Constant][44] /* ty=Tensor[(1040), float32] */, dtype="float32") /* ty=Tensor[(1040), float32] */;
  %660 = cast(%var_5730, dtype="float64") /* ty=Tensor[(72), float64] */;
  %661 = reshape(%658, newshape=[4, 3, 6]) /* ty=Tensor[(4, 3, 6), float64] */;
  %662 = reshape(%659, newshape=[1040]) /* ty=Tensor[(1040), float32] */;
  %663 = reshape(%660, newshape=[4, 3, 6]) /* ty=Tensor[(4, 3, 6), float64] */;
  %664 = @func_1997(%661, %662, %663) /* ty=(Tensor[(4, 3, 6), float64], Tensor[(5, 13, 16), float32], Tensor[(1040), float32], Tensor[(4, 3, 6), float32], Tensor[(4, 3, 6), float64]) */;
  %665 = %657.0;
  %666 = %664.3;
  (%665, %666, %var_5730, meta[relay.Constant][44] /* ty=Tensor[(1040), float32] */)
}

def @func_4633() -> Tensor[(3, 11, 12), float32] {
  %667 = @func_3902() /* ty=(Tensor[(3, 11, 12), float32], Tensor[(5, 13, 16), float32]) */;
  %667.0
}

def @func_5696(%var_5662: Tensor[(40, 26), float32], %var_5685: Tensor[(40, 26), float32]) -> (Tensor[(480), float32], Tensor[(3, 11, 12), float32], Tensor[(72), float64], Tensor[(40, 26), float32]) {
  %668 = @func_3961() /* ty=(Tensor[(5, 13, 16), float32], Tensor[(16, 5, 6), float32], Tensor[(480), float32]) */;
  %669 = @func_3737() /* ty=(Tensor[(3, 11, 12), float32],) */;
  %670 = cast(%var_5662, dtype="float32") /* ty=Tensor[(40, 26), float32] */;
  %671 = reshape(%670, newshape=[1040, 1]) /* ty=Tensor[(1040, 1), float32] */;
  %672 = @func_5392(%671) /* ty=(Tensor[(9, ?, ?), int16], Tensor[(5, 13, 16), float32], Tensor[(72), float64], Tensor[(9, 1040, ?), bool]) */;
  %673 = cast(%var_5662, dtype="float32") /* ty=Tensor[(40, 26), float32] */;
  %674 = sin(%673) /* ty=Tensor[(40, 26), float32] */;
  %675 = cast(%var_5685, dtype="float32") /* ty=Tensor[(40, 26), float32] */;
  %676 = shape_of(%674, dtype="int32") /* ty=Tensor[(2), int32] */;
  %677 = cast(%674, dtype="float32") /* ty=Tensor[(40, 26), float32] */;
  %678 = dyn.reshape(%675, %676, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %679 = %668.2;
  %680 = %669.0;
  %681 = %672.2;
  %682 = add(%677, %678) /* ty=Tensor[(40, 26), float32] */;
  (%679, %680, %681, %682)
}

def @func_828(%var_806: Tensor[(6, 14, 2), float64], %var_807: Tensor[(6, 14, 2), float64], %var_814: Tensor[(6, 14, 2), float64]) -> (Tensor[(6, 14, 2), uint32], Tensor[(6, 14, 2), bool]) {
  %683 = cast(%var_807, dtype="float64") /* ty=Tensor[(6, 14, 2), float64] */;
  %684 = shape_of(%var_806, dtype="int32") /* ty=Tensor[(3), int32] */;
  %685 = cast(%var_806, dtype="float64") /* ty=Tensor[(6, 14, 2), float64] */;
  %686 = dyn.reshape(%683, %684, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %687 = floor_mod(%685, %686) /* ty=Tensor[(6, 14, 2), float64] */;
  %688 = cast(%687, dtype="uint32") /* ty=Tensor[(6, 14, 2), uint32] */;
  %689 = shape_of(%var_807, dtype="int32") /* ty=Tensor[(3), int32] */;
  %690 = cast(%var_807, dtype="uint32") /* ty=Tensor[(6, 14, 2), uint32] */;
  %691 = dyn.reshape(%688, %689, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %692 = cast(%var_814, dtype="bool") /* ty=Tensor[(6, 14, 2), bool] */;
  %693 = shape_of(%687, dtype="int32") /* ty=Tensor[(3), int32] */;
  %694 = cast(%687, dtype="bool") /* ty=Tensor[(6, 14, 2), bool] */;
  %695 = dyn.reshape(%692, %693, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %696 = minimum(%690, %691) /* ty=Tensor[(6, 14, 2), uint32] */;
  %697 = greater(%694, %695) /* ty=Tensor[(6, 14, 2), bool] */;
  (%696, %697)
}

def @func_342(%var_306: Tensor[(16, 9, 11), int16]) -> (Tensor[(16, 9, 11), int16], Tensor[(16, 9, 11), int16], Tensor[(16, 9, 11), float32]) {
  %698 = cast(meta[relay.Constant][45] /* ty=Tensor[(16, 9, 11), int16] */, dtype="int16") /* ty=Tensor[(16, 9, 11), int16] */;
  %699 = shape_of(%var_306, dtype="int32") /* ty=Tensor[(3), int32] */;
  %700 = cast(%var_306, dtype="int16") /* ty=Tensor[(16, 9, 11), int16] */;
  %701 = dyn.reshape(%698, %699, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %702 = cast(%var_306, dtype="int16") /* ty=Tensor[(16, 9, 11), int16] */;
  %703 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(16, 9, 11), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %704 = cast(meta[relay.Constant][45] /* ty=Tensor[(16, 9, 11), int16] */, dtype="int16") /* ty=Tensor[(16, 9, 11), int16] */;
  %705 = dyn.reshape(%702, %703, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %706 = cast(%var_306, dtype="float32") /* ty=Tensor[(16, 9, 11), float32] */;
  %707 = add(%700, %701) /* ty=Tensor[(16, 9, 11), int16] */;
  %708 = multiply(%704, %705) /* ty=Tensor[(16, 9, 11), int16] */;
  %709 = acosh(%706) /* ty=Tensor[(16, 9, 11), float32] */;
  (%707, %708, %709)
}

def @func_4344() -> (Tensor[(13, 9, 9), uint32], Tensor[(5, 13, 16), float32], Tensor[(13, 9, 9), uint16], Tensor[(5, 13, 16), float32]) {
  %710 = @func_2225() /* ty=(Tensor[(13, 9, 9), float32],) */;
  %711 = %710.0;
  %712 = cast(meta[relay.Constant][46] /* ty=Tensor[(13, 9, 9), float32] */, dtype="uint32") /* ty=Tensor[(13, 9, 9), uint32] */;
  %713 = shape_of(%711, dtype="int32") /* ty=Tensor[(3), int32] */;
  %714 = cast(%711, dtype="uint32") /* ty=Tensor[(13, 9, 9), uint32] */;
  %715 = dyn.reshape(%712, %713, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %716 = @func_3645() /* ty=(Tensor[(5, 13, 16), float32],) */;
  %717 = cast(%711, dtype="float64") /* ty=Tensor[(13, 9, 9), float64] */;
  %718 = cosh(%717) /* ty=Tensor[(13, 9, 9), float64] */;
  %719 = cast(meta[relay.Constant][47] /* ty=Tensor[(13, 9, 9), float64] */, dtype="uint16") /* ty=Tensor[(13, 9, 9), uint16] */;
  %720 = shape_of(%718, dtype="int32") /* ty=Tensor[(3), int32] */;
  %721 = cast(%718, dtype="uint16") /* ty=Tensor[(13, 9, 9), uint16] */;
  %722 = dyn.reshape(%719, %720, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %723 = logical_xor(%714, %715) /* ty=Tensor[(13, 9, 9), uint32] */;
  %724 = %716.0;
  %725 = subtract(%721, %722) /* ty=Tensor[(13, 9, 9), uint16] */;
  %726 = @func_3467() /* ty=Tensor[(5, 13, 16), float32] */;
  (%723, %724, %725, %726)
}

def @func_1997(%var_1940: Tensor[(4, 3, 6), float64], %var_1958: Tensor[(1040), float32], %var_1985: Tensor[(4, 3, 6), float64]) -> (Tensor[(4, 3, 6), float64], Tensor[(5, 13, 16), float32], Tensor[(1040), float32], Tensor[(4, 3, 6), float32], Tensor[(4, 3, 6), float64]) {
  %727 = cast(%var_1940, dtype="float64") /* ty=Tensor[(4, 3, 6), float64] */;
  %728 = sin(%727) /* ty=Tensor[(4, 3, 6), float64] */;
  %729 = cast(%var_1940, dtype="float64") /* ty=Tensor[(4, 3, 6), float64] */;
  %730 = shape_of(%728, dtype="int32") /* ty=Tensor[(3), int32] */;
  %731 = cast(%728, dtype="float64") /* ty=Tensor[(4, 3, 6), float64] */;
  %732 = dyn.reshape(%729, %730, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %733 = cast(%var_1958, dtype="float32") /* ty=Tensor[(1040), float32] */;
  %734 = reshape(%733, newshape=[5, 13, 16]) /* ty=Tensor[(5, 13, 16), float32] */;
  %735 = cast(%var_1940, dtype="float64") /* ty=Tensor[(4, 3, 6), float64] */;
  %736 = sinh(%735) /* ty=Tensor[(4, 3, 6), float64] */;
  %737 = cast(%var_1985, dtype="uint32") /* ty=Tensor[(4, 3, 6), uint32] */;
  %738 = shape_of(%736, dtype="int32") /* ty=Tensor[(3), int32] */;
  %739 = cast(%736, dtype="uint32") /* ty=Tensor[(4, 3, 6), uint32] */;
  %740 = dyn.reshape(%737, %738, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %741 = left_shift(%739, %740) /* ty=Tensor[(4, 3, 6), uint32] */;
  %742 = cast(%741, dtype="float32") /* ty=Tensor[(4, 3, 6), float32] */;
  %743 = cast(%736, dtype="float64") /* ty=Tensor[(4, 3, 6), float64] */;
  %744 = floor_mod(%731, %732) /* ty=Tensor[(4, 3, 6), float64] */;
  %745 = @func_1515(%734) /* ty=Tensor[(5, 13, 16), float32] */;
  %746 = rsqrt(%742) /* ty=Tensor[(4, 3, 6), float32] */;
  %747 = cos(%743) /* ty=Tensor[(4, 3, 6), float64] */;
  (%744, %745, %var_1958, %746, %747)
}

def @func_5164(%var_5153: Tensor[(1053), float32]) -> (Tensor[(480), float32], Tensor[(16, 5, 6), float32], Tensor[(1053), float32]) {
  %748 = @func_3961() /* ty=(Tensor[(5, 13, 16), float32], Tensor[(16, 5, 6), float32], Tensor[(480), float32]) */;
  %749 = %748.2;
  %750 = cast(%749, dtype="float32") /* ty=Tensor[(480), float32] */;
  %751 = cast(%var_5153, dtype="float32") /* ty=Tensor[(1053), float32] */;
  %752 = reshape(%750, newshape=[480]) /* ty=Tensor[(480), float32] */;
  %753 = reshape(%751, newshape=[13, 9, 9]) /* ty=Tensor[(13, 9, 9), float32] */;
  %754 = @func_2523(%752, %753) /* ty=(Tensor[(16, 5, 6), float32], Tensor[(480), float32], Tensor[(13, 9, 9), bool]) */;
  %755 = %754.0;
  (%749, %755, %var_5153)
}

def @func_3645() -> (Tensor[(5, 13, 16), float32],) {
  %756 = @func_3467() /* ty=Tensor[(5, 13, 16), float32] */;
  (%756,)
}

def @func_3467() -> Tensor[(5, 13, 16), float32] {
  @func_2585() /* ty=Tensor[(5, 13, 16), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2366(%var_2360: uint32, %var_2361: Tensor[(16, 1), uint32]) -> (Tensor[(16, 1), bool],) {
  %0 = cast(%var_2360, dtype="bool") /* ty=bool */;
  %1 = cast(%var_2361, dtype="bool") /* ty=Tensor[(16, 1), bool] */;
  %2 = not_equal(%0, %1) /* ty=Tensor[(16, 1), bool] */;
  (%2,)
}

def @func_1896(%var_1894: Tensor[(12, 5, 14), float64], %var_1895: Tensor[(12, 5, 14), float64]) -> (Tensor[(12, 5, 14), float64],) {
  @func_1892(%var_1894, %var_1895) /* ty=(Tensor[(12, 5, 14), float64],) */
}

def @func_2896() -> Tensor[(3, 11, 12), float32] {
  %4 = fn () -> Tensor[(3, 11, 12), float32] {
    %3 = @func_2482() /* ty=(Tensor[(3, 11, 12), float32], Tensor[(5, 13, 16), float32], Tensor[(4, 260), float32]) */;
    %3.0
  };
  %4() /* ty=Tensor[(3, 11, 12), float32] */
}

def @func_2658() -> Tensor[(13, 9, 9), float64] {
  %5 = @func_2236() /* ty=(Tensor[(13, 9, 9), float64], Tensor[(7, 7, 8), uint32], Tensor[(120), uint64], Tensor[(392), uint32], Tensor[(1848), float32]) */;
  %5.0
}

def @func_4575(%var_4573: Tensor[(13, 9, 9), float32]) -> (Tensor[(13, 9, 9), float32],) {
  @func_4572(%var_4573) /* ty=(Tensor[(13, 9, 9), float32],) */
}

def @func_5307() -> Tensor[(5, 13, 16), float32] {
  %6 = fn () -> Tensor[(5, 13, 16), float32] {
    @func_2585() /* ty=Tensor[(5, 13, 16), float32] */
  };
  %6() /* ty=Tensor[(5, 13, 16), float32] */
}

def @func_5785() -> Tensor[(5, 13, 16), float32] {
  %7 = fn () -> Tensor[(5, 13, 16), float32] {
    @func_3467() /* ty=Tensor[(5, 13, 16), float32] */
  };
  %7() /* ty=Tensor[(5, 13, 16), float32] */
}

def @func_2724() -> Tensor[(6, 14, 2), bool] {
  %9 = fn () -> Tensor[(6, 14, 2), bool] {
    %8 = @func_2693() /* ty=(Tensor[(13, 9, 9), float64], Tensor[(7, 7, 8), uint32], Tensor[(392), uint32], Tensor[(6, 14, 2), bool], Tensor[(168), float64], Tensor[(12, 5, 14), float64], Tensor[(840, 1), float64]) */;
    %8.3
  };
  %9() /* ty=Tensor[(6, 14, 2), bool] */
}

def @func_2227() -> (Tensor[(13, 9, 9), float32],) {
  @func_2225() /* ty=(Tensor[(13, 9, 9), float32],) */
}

def @func_1206(%var_1204: Tensor[(3, 2, 12), float64], %var_1205: Tensor[(3, 2, 12), float64]) -> (Tensor[(3, 2, 12), float64],) {
  %25 = fn (%var_1179: Tensor[(3, 2, 12), float64], %var_1180: Tensor[(3, 2, 12), float64]) -> (Tensor[(3, 2, 12), float64],) {
    %10 = cast(%var_1180, dtype="bool") /* ty=Tensor[(3, 2, 12), bool] */;
    %11 = shape_of(%var_1179, dtype="int32") /* ty=Tensor[(3), int32] */;
    %12 = cast(%var_1179, dtype="bool") /* ty=Tensor[(3, 2, 12), bool] */;
    %13 = dyn.reshape(%10, %11, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %14 = less_equal(%12, %13) /* ty=Tensor[(3, 2, 12), bool] */;
    %15 = cast(%var_1180, dtype="float64") /* ty=Tensor[(3, 2, 12), float64] */;
    %16 = shape_of(%var_1179, dtype="int32") /* ty=Tensor[(3), int32] */;
    %17 = cast(%var_1179, dtype="float64") /* ty=Tensor[(3, 2, 12), float64] */;
    %18 = dyn.reshape(%15, %16, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %19 = floor_divide(%17, %18) /* ty=Tensor[(3, 2, 12), float64] */;
    %20 = cast(%19, dtype="float64") /* ty=Tensor[(3, 2, 12), float64] */;
    %21 = shape_of(%14, dtype="int32") /* ty=Tensor[(3), int32] */;
    %22 = cast(%14, dtype="float64") /* ty=Tensor[(3, 2, 12), float64] */;
    %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %24 = mod(%22, %23) /* ty=Tensor[(3, 2, 12), float64] */;
    (%24,)
  };
  %25(%var_1204, %var_1205) /* ty=(Tensor[(3, 2, 12), float64],) */
}

def @func_3904() -> (Tensor[(3, 11, 12), float32], Tensor[(5, 13, 16), float32]) {
  @func_3902() /* ty=(Tensor[(3, 11, 12), float32], Tensor[(5, 13, 16), float32]) */
}

def @func_1917() -> Tensor[(13, 9, 9), float64] {
  @func_1915() /* ty=Tensor[(13, 9, 9), float64] */
}

def @func_3111(%var_3109: Tensor[(440), float64], %var_3110: Tensor[(72), float64]) -> (Tensor[(13, 9, 9), float32], Tensor[(2, 1, 13), bool], uint64, Tensor[(26), uint64], Tensor[(10, 11, 4), float64], Tensor[(440), float64], Tensor[(16, 9, 11), float32], Tensor[(1584), int16], Tensor[(3, 2, 12), float64], Tensor[(72), float64], Tensor[(13, 9, 9), float32], Tensor[(16, 9, 11), int16], Tensor[(1848), float32]) {
  %55 = fn (%var_3046: Tensor[(440), float64], %var_3070: Tensor[(72), float64]) -> (Tensor[(13, 9, 9), float32], Tensor[(2, 1, 13), bool], uint64, Tensor[(26), uint64], Tensor[(10, 11, 4), float64], Tensor[(440), float64], Tensor[(16, 9, 11), float32], Tensor[(1584), int16], Tensor[(3, 2, 12), float64], Tensor[(72), float64], Tensor[(13, 9, 9), float32], Tensor[(16, 9, 11), int16], Tensor[(1848), float32]) {
    %26 = @func_2225() /* ty=(Tensor[(13, 9, 9), float32],) */;
    %27 = cast(meta[relay.Constant][0] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %28 = cast(meta[relay.Constant][1] /* ty=Tensor[(26), uint64] */, dtype="uint64") /* ty=Tensor[(26), uint64] */;
    %29 = reshape(%27, newshape=[]) /* ty=uint64 */;
    %30 = reshape(%28, newshape=[2, 1, 13]) /* ty=Tensor[(2, 1, 13), uint64] */;
    %31 = @func_2165(%29, %30) /* ty=(Tensor[(2, 1, 13), bool],) */;
    %32 = cast(%var_3046, dtype="float64") /* ty=Tensor[(440), float64] */;
    %33 = cast(%var_3046, dtype="float64") /* ty=Tensor[(440), float64] */;
    %34 = reshape(%32, newshape=[10, 11, 4]) /* ty=Tensor[(10, 11, 4), float64] */;
    %35 = reshape(%33, newshape=[10, 11, 4]) /* ty=Tensor[(10, 11, 4), float64] */;
    %36 = cast(meta[relay.Constant][2] /* ty=Tensor[(1584), int16] */, dtype="int16") /* ty=Tensor[(1584), int16] */;
    %37 = reshape(%36, newshape=[16, 9, 11]) /* ty=Tensor[(16, 9, 11), int16] */;
    %38 = @func_342(%37) /* ty=(Tensor[(16, 9, 11), int16], Tensor[(16, 9, 11), int16], Tensor[(16, 9, 11), float32]) */;
    %39 = cast(%var_3070, dtype="float64") /* ty=Tensor[(72), float64] */;
    %40 = cast(%var_3070, dtype="float64") /* ty=Tensor[(72), float64] */;
    %41 = reshape(%39, newshape=[3, 2, 12]) /* ty=Tensor[(3, 2, 12), float64] */;
    %42 = reshape(%40, newshape=[3, 2, 12]) /* ty=Tensor[(3, 2, 12), float64] */;
    %43 = @func_1203(%41, %42) /* ty=(Tensor[(3, 2, 12), float64],) */;
    %44 = @func_2225() /* ty=(Tensor[(13, 9, 9), float32],) */;
    %45 = cast(meta[relay.Constant][3] /* ty=Tensor[(1848), float32] */, dtype="float32") /* ty=Tensor[(1848), float32] */;
    %46 = reshape(%45, newshape=[14, 11, 12]) /* ty=Tensor[(14, 11, 12), float32] */;
    %47 = @func_502(%46) /* ty=(Tensor[(16, 9, 11), float32], Tensor[(1584), int16], Tensor[(16, 9, 11), int16], Tensor[(14, 11, 12), float64]) */;
    %48 = %26.0;
    %49 = %31.0;
    %50 = @func_1729(%34, %35) /* ty=Tensor[(10, 11, 4), float64] */;
    %51 = %38.2;
    %52 = %43.0;
    %53 = %44.0;
    %54 = %47.2;
    (%48, %49, meta[relay.Constant][0] /* ty=uint64 */, meta[relay.Constant][1] /* ty=Tensor[(26), uint64] */, %50, %var_3046, %51, meta[relay.Constant][2] /* ty=Tensor[(1584), int16] */, %52, %var_3070, %53, %54, meta[relay.Constant][3] /* ty=Tensor[(1848), float32] */)
  };
  %55(%var_3109, %var_3110) /* ty=(Tensor[(13, 9, 9), float32], Tensor[(2, 1, 13), bool], uint64, Tensor[(26), uint64], Tensor[(10, 11, 4), float64], Tensor[(440), float64], Tensor[(16, 9, 11), float32], Tensor[(1584), int16], Tensor[(3, 2, 12), float64], Tensor[(72), float64], Tensor[(13, 9, 9), float32], Tensor[(16, 9, 11), int16], Tensor[(1848), float32]) */
}

def @func_2646(%var_2645: Tensor[(392), uint32]) -> (Tensor[(13, 9, 9), float64], Tensor[(13, 9, 9), float32], Tensor[(392), uint32], Tensor[(7, 7, 8), float64]) {
  %66 = fn (%var_2618: Tensor[(392), uint32]) -> (Tensor[(13, 9, 9), float64], Tensor[(13, 9, 9), float32], Tensor[(392), uint32], Tensor[(7, 7, 8), float64]) {
    %56 = @func_1915() /* ty=Tensor[(13, 9, 9), float64] */;
    %57 = cast(%56, dtype="float64") /* ty=Tensor[(13, 9, 9), float64] */;
    %58 = @func_2225() /* ty=(Tensor[(13, 9, 9), float32],) */;
    %59 = cast(%var_2618, dtype="uint32") /* ty=Tensor[(392), uint32] */;
    %60 = reshape(%59, newshape=[7, 7, 8]) /* ty=Tensor[(7, 7, 8), uint32] */;
    %61 = @func_653(%60) /* ty=Tensor[(7, 7, 8), uint32] */;
    %62 = cast(%61, dtype="float64") /* ty=Tensor[(7, 7, 8), float64] */;
    %63 = log10(%57) /* ty=Tensor[(13, 9, 9), float64] */;
    %64 = %58.0;
    %65 = log10(%62) /* ty=Tensor[(7, 7, 8), float64] */;
    (%63, %64, %var_2618, %65)
  };
  %66(%var_2645) /* ty=(Tensor[(13, 9, 9), float64], Tensor[(13, 9, 9), float32], Tensor[(392), uint32], Tensor[(7, 7, 8), float64]) */
}

def @func_6205() -> Tensor[(13, 9, 9), float32] {
  %68 = fn () -> Tensor[(13, 9, 9), float32] {
    %67 = @func_4004() /* ty=(Tensor[(3, 11, 12), float32], Tensor[(13, 9, 9), float32]) */;
    %67.1
  };
  %68() /* ty=Tensor[(13, 9, 9), float32] */
}

def @func_4635() -> Tensor[(3, 11, 12), float32] {
  @func_4633() /* ty=Tensor[(3, 11, 12), float32] */
}

def @func_5416() -> (Tensor[(13, 9, 9), float32],) {
  %71 = fn () -> (Tensor[(13, 9, 9), float32],) {
    %69 = @func_2225() /* ty=(Tensor[(13, 9, 9), float32],) */;
    %70 = %69.0;
    (%70,)
  };
  %71() /* ty=(Tensor[(13, 9, 9), float32],) */
}

def @main(%var_6277: Tensor[(1, 4, 7), float64]) -> Tensor[(1, 4, 7), float64] {
  %72 = cast(%var_6277, dtype="float64") /* ty=Tensor[(1, 4, 7), float64] */;
  cos(%72) /* ty=Tensor[(1, 4, 7), float64] */
}

def @func_5990(%var_5988: Tensor[(13, 9, 9), float64]) -> Tensor[(13, 9, 9), int64] {
  @func_5987(%var_5988) /* ty=Tensor[(13, 9, 9), int64] */
}

def @func_5092(%var_5066: int16) -> (Tensor[(2, 8, 1), float32],) {
  %73 = cast(%var_5066, dtype="int16") /* ty=int16 */;
  %74 = cast(meta[relay.Constant][4] /* ty=Tensor[(2, 8, 1), int16] */, dtype="int16") /* ty=Tensor[(2, 8, 1), int16] */;
  %75 = right_shift(%73, %74) /* ty=Tensor[(2, 8, 1), int16] */;
  %76 = cast(%75, dtype="float32") /* ty=Tensor[(2, 8, 1), float32] */;
  %77 = asinh(%76) /* ty=Tensor[(2, 8, 1), float32] */;
  (%77,)
}

def @func_6197(%var_6194: Tensor[(7, 7, 8), float32], %var_6195: Tensor[(12), int64], %var_6196: Tensor[(96), int64]) -> (Tensor[(6, 14, 2), bool], Tensor[(84, 2), float64], Tensor[(7, 7, 8), bool], Tensor[(392), float32], Tensor[(6, 2, 8), int64], Tensor[(12), int64], Tensor[(96), int64], Tensor[(840, 480), float64]) {
  @func_6192(%var_6194, %var_6195, %var_6196) /* ty=(Tensor[(6, 14, 2), bool], Tensor[(84, 2), float64], Tensor[(7, 7, 8), bool], Tensor[(392), float32], Tensor[(6, 2, 8), int64], Tensor[(12), int64], Tensor[(96), int64], Tensor[(840, 480), float64]) */
}

def @func_1813(%var_1811: Tensor[(6, 2, 1), int64], %var_1812: Tensor[(6, 2, 8), int64]) -> Tensor[(6, 2, 8), int64] {
  %80 = fn (%var_1805: Tensor[(6, 2, 1), int64], %var_1806: Tensor[(6, 2, 8), int64]) -> Tensor[(6, 2, 8), int64] {
    %78 = cast(%var_1805, dtype="int64") /* ty=Tensor[(6, 2, 1), int64] */;
    %79 = cast(%var_1806, dtype="int64") /* ty=Tensor[(6, 2, 8), int64] */;
    bitwise_and(%78, %79) /* ty=Tensor[(6, 2, 8), int64] */
  };
  %80(%var_1811, %var_1812) /* ty=Tensor[(6, 2, 8), int64] */
}

def @func_4345() -> (Tensor[(13, 9, 9), uint32], Tensor[(5, 13, 16), float32], Tensor[(13, 9, 9), uint16], Tensor[(5, 13, 16), float32]) {
  %98 = fn () -> (Tensor[(13, 9, 9), uint32], Tensor[(5, 13, 16), float32], Tensor[(13, 9, 9), uint16], Tensor[(5, 13, 16), float32]) {
    %81 = @func_2225() /* ty=(Tensor[(13, 9, 9), float32],) */;
    %82 = %81.0;
    %83 = cast(meta[relay.Constant][5] /* ty=Tensor[(13, 9, 9), float32] */, dtype="uint32") /* ty=Tensor[(13, 9, 9), uint32] */;
    %84 = shape_of(%82, dtype="int32") /* ty=Tensor[(3), int32] */;
    %85 = cast(%82, dtype="uint32") /* ty=Tensor[(13, 9, 9), uint32] */;
    %86 = dyn.reshape(%83, %84, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %87 = @func_3645() /* ty=(Tensor[(5, 13, 16), float32],) */;
    %88 = cast(%82, dtype="float64") /* ty=Tensor[(13, 9, 9), float64] */;
    %89 = cosh(%88) /* ty=Tensor[(13, 9, 9), float64] */;
    %90 = cast(meta[relay.Constant][6] /* ty=Tensor[(13, 9, 9), float64] */, dtype="uint16") /* ty=Tensor[(13, 9, 9), uint16] */;
    %91 = shape_of(%89, dtype="int32") /* ty=Tensor[(3), int32] */;
    %92 = cast(%89, dtype="uint16") /* ty=Tensor[(13, 9, 9), uint16] */;
    %93 = dyn.reshape(%90, %91, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %94 = logical_xor(%85, %86) /* ty=Tensor[(13, 9, 9), uint32] */;
    %95 = %87.0;
    %96 = subtract(%92, %93) /* ty=Tensor[(13, 9, 9), uint16] */;
    %97 = @func_3467() /* ty=Tensor[(5, 13, 16), float32] */;
    (%94, %95, %96, %97)
  };
  %98() /* ty=(Tensor[(13, 9, 9), uint32], Tensor[(5, 13, 16), float32], Tensor[(13, 9, 9), uint16], Tensor[(5, 13, 16), float32]) */
}

def @func_3375(%var_3157: Tensor[(1848), float32], %var_3290: Tensor[(9, 3, 9), float64], %var_3367: Tensor[(9, 3, 9), bool]) -> (Tensor[(1848), float32], Tensor[(1848), float32], Tensor[(10, 11, 4), float64], Tensor[(440), float64], Tensor[(10, 11, 4), float64], Tensor[(9, 3, 9), float64], Tensor[(7, 7, 8), uint32], Tensor[(5, 13, 16), float32], Tensor[(7, 7, 8), uint32], Tensor[(1848), float32], Tensor[(6, 14, 2), bool], Tensor[(120), uint64], Tensor[(12, 5, 14), float64], Tensor[(840), float64], Tensor[(9, 3, 9), bool], Tensor[(9, 3, 9), float32], Tensor[(10, 11, 4), float64], Tensor[(9, 3, 9), int64], Tensor[(5, 13, 16), float32], Tensor[(13, 9, 9), float64], Tensor[(9, 3, 9), bool]) {
  %99 = cast(%var_3157, dtype="float32") /* ty=Tensor[(1848), float32] */;
  %100 = reshape(%99, newshape=[1848]) /* ty=Tensor[(1848), float32] */;
  %101 = @func_3023(%100) /* ty=(Tensor[(1848), float32],) */;
  %102 = cast(meta[relay.Constant][7] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
  %103 = cast(meta[relay.Constant][7] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
  %104 = reshape(%102, newshape=[10, 11, 4]) /* ty=Tensor[(10, 11, 4), float64] */;
  %105 = reshape(%103, newshape=[10, 11, 4]) /* ty=Tensor[(10, 11, 4), float64] */;
  %106 = cast(meta[relay.Constant][7] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
  %107 = cast(meta[relay.Constant][7] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
  %108 = reshape(%106, newshape=[10, 11, 4]) /* ty=Tensor[(10, 11, 4), float64] */;
  %109 = reshape(%107, newshape=[10, 11, 4]) /* ty=Tensor[(10, 11, 4), float64] */;
  %110 = cast(meta[relay.Constant][8] /* ty=Tensor[(9, 3, 9), float64] */, dtype="float64") /* ty=Tensor[(9, 3, 9), float64] */;
  %111 = log10(%110) /* ty=Tensor[(9, 3, 9), float64] */;
  %112 = cast(%111, dtype="float64") /* ty=Tensor[(9, 3, 9), float64] */;
  %113 = @func_2693() /* ty=(Tensor[(13, 9, 9), float64], Tensor[(7, 7, 8), uint32], Tensor[(392), uint32], Tensor[(6, 14, 2), bool], Tensor[(168), float64], Tensor[(12, 5, 14), float64], Tensor[(840, 1), float64]) */;
  %114 = %113.1;
  %115 = cast(%114, dtype="uint32") /* ty=Tensor[(7, 7, 8), uint32] */;
  %116 = reshape(%115, newshape=[7, 7, 8]) /* ty=Tensor[(7, 7, 8), uint32] */;
  %117 = @func_2236() /* ty=(Tensor[(13, 9, 9), float64], Tensor[(7, 7, 8), uint32], Tensor[(120), uint64], Tensor[(392), uint32], Tensor[(1848), float32]) */;
  %118 = @func_2236() /* ty=(Tensor[(13, 9, 9), float64], Tensor[(7, 7, 8), uint32], Tensor[(120), uint64], Tensor[(392), uint32], Tensor[(1848), float32]) */;
  %119 = cast(meta[relay.Constant][9] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %120 = cast(meta[relay.Constant][9] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %121 = reshape(%119, newshape=[12, 5, 14]) /* ty=Tensor[(12, 5, 14), float64] */;
  %122 = reshape(%120, newshape=[12, 5, 14]) /* ty=Tensor[(12, 5, 14), float64] */;
  %123 = @func_1892(%121, %122) /* ty=(Tensor[(12, 5, 14), float64],) */;
  %124 = cast(%var_3290, dtype="bool") /* ty=Tensor[(9, 3, 9), bool] */;
  %125 = shape_of(%111, dtype="int32") /* ty=Tensor[(3), int32] */;
  %126 = cast(%111, dtype="bool") /* ty=Tensor[(9, 3, 9), bool] */;
  %127 = dyn.reshape(%124, %125, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %128 = cast(%111, dtype="float64") /* ty=Tensor[(9, 3, 9), float64] */;
  %129 = acos(%128) /* ty=Tensor[(9, 3, 9), float64] */;
  %130 = cast(%129, dtype="int16") /* ty=Tensor[(9, 3, 9), int16] */;
  %131 = shape_of(%111, dtype="int32") /* ty=Tensor[(3), int32] */;
  %132 = cast(%111, dtype="int16") /* ty=Tensor[(9, 3, 9), int16] */;
  %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %134 = bitwise_and(%132, %133) /* ty=Tensor[(9, 3, 9), int16] */;
  %135 = cast(%111, dtype="float32") /* ty=Tensor[(9, 3, 9), float32] */;
  %136 = shape_of(%134, dtype="int32") /* ty=Tensor[(3), int32] */;
  %137 = cast(%134, dtype="float32") /* ty=Tensor[(9, 3, 9), float32] */;
  %138 = dyn.reshape(%135, %136, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %139 = cast(meta[relay.Constant][7] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
  %140 = @func_1729(%104, %105) /* ty=Tensor[(10, 11, 4), float64] */;
  %141 = cast(%140, dtype="float64") /* ty=Tensor[(10, 11, 4), float64] */;
  %142 = reshape(%139, newshape=[10, 11, 4]) /* ty=Tensor[(10, 11, 4), float64] */;
  %143 = reshape(%141, newshape=[10, 11, 4]) /* ty=Tensor[(10, 11, 4), float64] */;
  %144 = cast(%134, dtype="float32") /* ty=Tensor[(9, 3, 9), float32] */;
  %145 = tan(%144) /* ty=Tensor[(9, 3, 9), float32] */;
  %146 = cast(%129, dtype="bool") /* ty=Tensor[(9, 3, 9), bool] */;
  %147 = shape_of(%145, dtype="int32") /* ty=Tensor[(3), int32] */;
  %148 = cast(%145, dtype="bool") /* ty=Tensor[(9, 3, 9), bool] */;
  %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %150 = less(%148, %149) /* ty=Tensor[(9, 3, 9), bool] */;
  %151 = cast(%111, dtype="float32") /* ty=Tensor[(9, 3, 9), float32] */;
  %152 = cos(%151) /* ty=Tensor[(9, 3, 9), float32] */;
  %153 = cast(%152, dtype="int64") /* ty=Tensor[(9, 3, 9), int64] */;
  %154 = shape_of(%150, dtype="int32") /* ty=Tensor[(3), int32] */;
  %155 = cast(%150, dtype="int64") /* ty=Tensor[(9, 3, 9), int64] */;
  %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %157 = cast(%var_3367, dtype="bool") /* ty=Tensor[(9, 3, 9), bool] */;
  %158 = shape_of(%150, dtype="int32") /* ty=Tensor[(3), int32] */;
  %159 = cast(%150, dtype="bool") /* ty=Tensor[(9, 3, 9), bool] */;
  %160 = dyn.reshape(%157, %158, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %161 = %101.0;
  %162 = @func_1729(%108, %109) /* ty=Tensor[(10, 11, 4), float64] */;
  %163 = asinh(%112) /* ty=Tensor[(9, 3, 9), float64] */;
  %164 = @func_2585() /* ty=Tensor[(5, 13, 16), float32] */;
  %165 = @func_653(%116) /* ty=Tensor[(7, 7, 8), uint32] */;
  %166 = %117.4;
  %167 = @func_2723() /* ty=Tensor[(6, 14, 2), bool] */;
  %168 = %118.2;
  %169 = %123.0;
  %170 = logical_or(%126, %127) /* ty=Tensor[(9, 3, 9), bool] */;
  %171 = mod(%137, %138) /* ty=Tensor[(9, 3, 9), float32] */;
  %172 = @func_1729(%142, %143) /* ty=Tensor[(10, 11, 4), float64] */;
  %173 = subtract(%155, %156) /* ty=Tensor[(9, 3, 9), int64] */;
  %174 = @func_2585() /* ty=Tensor[(5, 13, 16), float32] */;
  %175 = @func_1915() /* ty=Tensor[(13, 9, 9), float64] */;
  %176 = logical_and(%159, %160) /* ty=Tensor[(9, 3, 9), bool] */;
  (%161, %var_3157, %140, meta[relay.Constant][7] /* ty=Tensor[(440), float64] */, %162, %163, %114, %164, %165, %166, %167, %168, %169, meta[relay.Constant][9] /* ty=Tensor[(840), float64] */, %170, %171, %172, %173, %174, %175, %176)
}

def @func_5164(%var_5153: Tensor[(1053), float32]) -> (Tensor[(480), float32], Tensor[(16, 5, 6), float32], Tensor[(1053), float32]) {
  %177 = @func_3961() /* ty=(Tensor[(5, 13, 16), float32], Tensor[(16, 5, 6), float32], Tensor[(480), float32]) */;
  %178 = %177.2;
  %179 = cast(%178, dtype="float32") /* ty=Tensor[(480), float32] */;
  %180 = cast(%var_5153, dtype="float32") /* ty=Tensor[(1053), float32] */;
  %181 = reshape(%179, newshape=[480]) /* ty=Tensor[(480), float32] */;
  %182 = reshape(%180, newshape=[13, 9, 9]) /* ty=Tensor[(13, 9, 9), float32] */;
  %183 = @func_2523(%181, %182) /* ty=(Tensor[(16, 5, 6), float32], Tensor[(480), float32], Tensor[(13, 9, 9), bool]) */;
  %184 = %183.0;
  (%178, %184, %var_5153)
}

def @func_5974(%var_5972: Tensor[(392), uint32]) -> (Tensor[(5, 13, 16), float32], Tensor[(7, 7, 8), float32]) {
  @func_5971(%var_5972) /* ty=(Tensor[(5, 13, 16), float32], Tensor[(7, 7, 8), float32]) */
}

def @func_3560() -> Tensor[(6, 14, 2), float64] {
  %190 = fn () -> Tensor[(6, 14, 2), float64] {
    %185 = @func_2723() /* ty=Tensor[(6, 14, 2), bool] */;
    %186 = cast(meta[relay.Constant][10] /* ty=Tensor[(6, 14, 2), bool] */, dtype="float64") /* ty=Tensor[(6, 14, 2), float64] */;
    %187 = shape_of(%185, dtype="int32") /* ty=Tensor[(3), int32] */;
    %188 = cast(%185, dtype="float64") /* ty=Tensor[(6, 14, 2), float64] */;
    %189 = dyn.reshape(%186, %187, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    floor_divide(%188, %189) /* ty=Tensor[(6, 14, 2), float64] */
  };
  %190() /* ty=Tensor[(6, 14, 2), float64] */
}

def @func_5735(%var_5734: Tensor[(72), float64]) -> (Tensor[(6, 14, 13), float64], Tensor[(4, 3, 6), float32], Tensor[(72), float64], Tensor[(1040), float32]) {
  %201 = fn (%var_5730: Tensor[(72), float64]) -> (Tensor[(6, 14, 13), float64], Tensor[(4, 3, 6), float32], Tensor[(72), float64], Tensor[(1040), float32]) {
    %191 = @func_4583() /* ty=(Tensor[(6, 14, 13), float64],) */;
    %192 = cast(%var_5730, dtype="float64") /* ty=Tensor[(72), float64] */;
    %193 = cast(meta[relay.Constant][11] /* ty=Tensor[(1040), float32] */, dtype="float32") /* ty=Tensor[(1040), float32] */;
    %194 = cast(%var_5730, dtype="float64") /* ty=Tensor[(72), float64] */;
    %195 = reshape(%192, newshape=[4, 3, 6]) /* ty=Tensor[(4, 3, 6), float64] */;
    %196 = reshape(%193, newshape=[1040]) /* ty=Tensor[(1040), float32] */;
    %197 = reshape(%194, newshape=[4, 3, 6]) /* ty=Tensor[(4, 3, 6), float64] */;
    %198 = @func_1997(%195, %196, %197) /* ty=(Tensor[(4, 3, 6), float64], Tensor[(5, 13, 16), float32], Tensor[(1040), float32], Tensor[(4, 3, 6), float32], Tensor[(4, 3, 6), float64]) */;
    %199 = %191.0;
    %200 = %198.3;
    (%199, %200, %var_5730, meta[relay.Constant][11] /* ty=Tensor[(1040), float32] */)
  };
  %201(%var_5734) /* ty=(Tensor[(6, 14, 13), float64], Tensor[(4, 3, 6), float32], Tensor[(72), float64], Tensor[(1040), float32]) */
}

def @func_5533() -> (Tensor[(16, 5, 6), float32], Tensor[(3, 11, 12), float32], Tensor[(840, 480), float64], Tensor[(840, 480), float32]) {
  %221 = fn () -> (Tensor[(16, 5, 6), float32], Tensor[(3, 11, 12), float32], Tensor[(840, 480), float64], Tensor[(840, 480), float32]) {
    %202 = cast(meta[relay.Constant][12] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
    %203 = reshape(%202, newshape=[16, 5, 6]) /* ty=Tensor[(16, 5, 6), float32] */;
    %204 = @func_3737() /* ty=(Tensor[(3, 11, 12), float32],) */;
    %205 = @func_2693() /* ty=(Tensor[(13, 9, 9), float64], Tensor[(7, 7, 8), uint32], Tensor[(392), uint32], Tensor[(6, 14, 2), bool], Tensor[(168), float64], Tensor[(12, 5, 14), float64], Tensor[(840, 1), float64]) */;
    %206 = %205.6;
    %207 = cast(%206, dtype="float32") /* ty=Tensor[(840, 1), float32] */;
    %208 = log2(%207) /* ty=Tensor[(840, 1), float32] */;
    %209 = cast(meta[relay.Constant][12] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
    %210 = acos(%209) /* ty=Tensor[(480), float32] */;
    %211 = cast(%208, dtype="bool") /* ty=Tensor[(840, 1), bool] */;
    %212 = cast(%210, dtype="bool") /* ty=Tensor[(480), bool] */;
    %213 = greater_equal(%211, %212) /* ty=Tensor[(840, 480), bool] */;
    %214 = cast(%213, dtype="float64") /* ty=Tensor[(840, 480), float64] */;
    %215 = cast(%208, dtype="float64") /* ty=Tensor[(840, 1), float64] */;
    %216 = cast(%213, dtype="float32") /* ty=Tensor[(840, 480), float32] */;
    %217 = @func_2430(%203) /* ty=Tensor[(16, 5, 6), float32] */;
    %218 = %204.0;
    %219 = power(%214, %215) /* ty=Tensor[(840, 480), float64] */;
    %220 = exp(%216) /* ty=Tensor[(840, 480), float32] */;
    (%217, %218, %219, %220)
  };
  %221() /* ty=(Tensor[(16, 5, 6), float32], Tensor[(3, 11, 12), float32], Tensor[(840, 480), float64], Tensor[(840, 480), float32]) */
}

def @func_6268() -> (Tensor[(13, 9, 9), float64], Tensor[(13, 9, 9), float64], Tensor[(13, 9, 9), float64]) {
  %227 = fn () -> (Tensor[(13, 9, 9), float64], Tensor[(13, 9, 9), float64], Tensor[(13, 9, 9), float64]) {
    %222 = @func_2236() /* ty=(Tensor[(13, 9, 9), float64], Tensor[(7, 7, 8), uint32], Tensor[(120), uint64], Tensor[(392), uint32], Tensor[(1848), float32]) */;
    %223 = @func_2236() /* ty=(Tensor[(13, 9, 9), float64], Tensor[(7, 7, 8), uint32], Tensor[(120), uint64], Tensor[(392), uint32], Tensor[(1848), float32]) */;
    %224 = %222.0;
    %225 = @func_2658() /* ty=Tensor[(13, 9, 9), float64] */;
    %226 = %223.0;
    (%224, %225, %226)
  };
  %227() /* ty=(Tensor[(13, 9, 9), float64], Tensor[(13, 9, 9), float64], Tensor[(13, 9, 9), float64]) */
}

def @func_3467() -> Tensor[(5, 13, 16), float32] {
  @func_2585() /* ty=Tensor[(5, 13, 16), float32] */
}

def @func_1733(%var_1731: Tensor[(10, 11, 4), float64], %var_1732: Tensor[(10, 11, 4), float64]) -> Tensor[(10, 11, 4), float64] {
  @func_1729(%var_1731, %var_1732) /* ty=Tensor[(10, 11, 4), float64] */
}

def @func_3380(%var_3377: Tensor[(1848), float32], %var_3378: Tensor[(9, 3, 9), float64], %var_3379: Tensor[(9, 3, 9), bool]) -> (Tensor[(1848), float32], Tensor[(1848), float32], Tensor[(10, 11, 4), float64], Tensor[(440), float64], Tensor[(10, 11, 4), float64], Tensor[(9, 3, 9), float64], Tensor[(7, 7, 8), uint32], Tensor[(5, 13, 16), float32], Tensor[(7, 7, 8), uint32], Tensor[(1848), float32], Tensor[(6, 14, 2), bool], Tensor[(120), uint64], Tensor[(12, 5, 14), float64], Tensor[(840), float64], Tensor[(9, 3, 9), bool], Tensor[(9, 3, 9), float32], Tensor[(10, 11, 4), float64], Tensor[(9, 3, 9), int64], Tensor[(5, 13, 16), float32], Tensor[(13, 9, 9), float64], Tensor[(9, 3, 9), bool]) {
  @func_3375(%var_3377, %var_3378, %var_3379) /* ty=(Tensor[(1848), float32], Tensor[(1848), float32], Tensor[(10, 11, 4), float64], Tensor[(440), float64], Tensor[(10, 11, 4), float64], Tensor[(9, 3, 9), float64], Tensor[(7, 7, 8), uint32], Tensor[(5, 13, 16), float32], Tensor[(7, 7, 8), uint32], Tensor[(1848), float32], Tensor[(6, 14, 2), bool], Tensor[(120), uint64], Tensor[(12, 5, 14), float64], Tensor[(840), float64], Tensor[(9, 3, 9), bool], Tensor[(9, 3, 9), float32], Tensor[(10, 11, 4), float64], Tensor[(9, 3, 9), int64], Tensor[(5, 13, 16), float32], Tensor[(13, 9, 9), float64], Tensor[(9, 3, 9), bool]) */
}

def @func_2695() -> (Tensor[(13, 9, 9), float64], Tensor[(7, 7, 8), uint32], Tensor[(392), uint32], Tensor[(6, 14, 2), bool], Tensor[(168), float64], Tensor[(12, 5, 14), float64], Tensor[(840, 1), float64]) {
  @func_2693() /* ty=(Tensor[(13, 9, 9), float64], Tensor[(7, 7, 8), uint32], Tensor[(392), uint32], Tensor[(6, 14, 2), bool], Tensor[(168), float64], Tensor[(12, 5, 14), float64], Tensor[(840, 1), float64]) */
}

def @func_1302(%var_1300: Tensor[(14, 13), float32]) -> (Tensor[(14, 13), float32],) {
  @func_1299(%var_1300) /* ty=(Tensor[(14, 13), float32],) */
}

def @func_4006() -> (Tensor[(3, 11, 12), float32], Tensor[(13, 9, 9), float32]) {
  @func_4004() /* ty=(Tensor[(3, 11, 12), float32], Tensor[(13, 9, 9), float32]) */
}

def @func_892(%var_891: Tensor[(2, 9, 7), float32]) -> (Tensor[(2, 9, 7), float32], Tensor[(392), bool], Tensor[(120), uint64], Tensor[(392), uint32], Tensor[(1848), float32]) {
  %240 = fn (%var_868: Tensor[(2, 9, 7), float32]) -> (Tensor[(2, 9, 7), float32], Tensor[(392), bool], Tensor[(120), uint64], Tensor[(392), uint32], Tensor[(1848), float32]) {
    %228 = cast(%var_868, dtype="float32") /* ty=Tensor[(2, 9, 7), float32] */;
    %229 = cast(meta[relay.Constant][13] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
    %230 = cast(meta[relay.Constant][13] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
    %231 = cast(meta[relay.Constant][14] /* ty=Tensor[(392), uint32] */, dtype="uint32") /* ty=Tensor[(392), uint32] */;
    %232 = cast(meta[relay.Constant][15] /* ty=Tensor[(1848), float32] */, dtype="float32") /* ty=Tensor[(1848), float32] */;
    %233 = reshape(%229, newshape=[5, 4, 6]) /* ty=Tensor[(5, 4, 6), uint64] */;
    %234 = reshape(%230, newshape=[5, 4, 6]) /* ty=Tensor[(5, 4, 6), uint64] */;
    %235 = reshape(%231, newshape=[392]) /* ty=Tensor[(392), uint32] */;
    %236 = reshape(%232, newshape=[924, 2]) /* ty=Tensor[(924, 2), float32] */;
    %237 = @func_779(%233, %234, %235, %236) /* ty=(Tensor[(5, 4, 6), bool], Tensor[(7, 7, 8), uint32], Tensor[(392), bool], Tensor[(16, 9, 11), float32], Tensor[(924, 2), float32], Tensor[(16, 9, 11), int16]) */;
    %238 = sinh(%228) /* ty=Tensor[(2, 9, 7), float32] */;
    %239 = %237.2;
    (%238, %239, meta[relay.Constant][13] /* ty=Tensor[(120), uint64] */, meta[relay.Constant][14] /* ty=Tensor[(392), uint32] */, meta[relay.Constant][15] /* ty=Tensor[(1848), float32] */)
  };
  %240(%var_891) /* ty=(Tensor[(2, 9, 7), float32], Tensor[(392), bool], Tensor[(120), uint64], Tensor[(392), uint32], Tensor[(1848), float32]) */
}

def @func_1892(%var_1877: Tensor[(12, 5, 14), float64], %var_1878: Tensor[(12, 5, 14), float64]) -> (Tensor[(12, 5, 14), float64],) {
  %241 = cast(%var_1878, dtype="float64") /* ty=Tensor[(12, 5, 14), float64] */;
  %242 = shape_of(%var_1877, dtype="int32") /* ty=Tensor[(3), int32] */;
  %243 = cast(%var_1877, dtype="float64") /* ty=Tensor[(12, 5, 14), float64] */;
  %244 = dyn.reshape(%241, %242, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %245 = multiply(%243, %244) /* ty=Tensor[(12, 5, 14), float64] */;
  (%245,)
}

def @func_2370(%var_2368: uint32, %var_2369: Tensor[(16, 1), uint32]) -> (Tensor[(16, 1), bool],) {
  @func_2366(%var_2368, %var_2369) /* ty=(Tensor[(16, 1), bool],) */
}

def @func_4150() -> (Tensor[(7, 7, 8), uint32], Tensor[(392), float64], Tensor[(5, 13, 16), float32], Tensor[(440), float64]) {
  %257 = fn () -> (Tensor[(7, 7, 8), uint32], Tensor[(392), float64], Tensor[(5, 13, 16), float32], Tensor[(440), float64]) {
    %246 = @func_2236() /* ty=(Tensor[(13, 9, 9), float64], Tensor[(7, 7, 8), uint32], Tensor[(120), uint64], Tensor[(392), uint32], Tensor[(1848), float32]) */;
    %247 = %246.3;
    %248 = cast(%247, dtype="uint32") /* ty=Tensor[(392), uint32] */;
    %249 = reshape(%248, newshape=[7, 7, 8]) /* ty=Tensor[(7, 7, 8), uint32] */;
    %250 = cast(%247, dtype="float64") /* ty=Tensor[(392), float64] */;
    %251 = cast(meta[relay.Constant][16] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
    %252 = reshape(%251, newshape=[440]) /* ty=Tensor[(440), float64] */;
    %253 = @func_2871(%252) /* ty=(Tensor[(3, 11, 12), float32], Tensor[(440), bool], Tensor[(5, 13, 16), float32]) */;
    %254 = @func_653(%249) /* ty=Tensor[(7, 7, 8), uint32] */;
    %255 = log10(%250) /* ty=Tensor[(392), float64] */;
    %256 = %253.2;
    (%254, %255, %256, meta[relay.Constant][16] /* ty=Tensor[(440), float64] */)
  };
  %257() /* ty=(Tensor[(7, 7, 8), uint32], Tensor[(392), float64], Tensor[(5, 13, 16), float32], Tensor[(440), float64]) */
}

def @func_6140(%var_6139: Tensor[(16, 1, 10), float64]) -> (Tensor[(16, 1, 10), float64], Tensor[(16, 5, 6), float32]) {
  %262 = fn (%var_6125: Tensor[(16, 1, 10), float64]) -> (Tensor[(16, 1, 10), float64], Tensor[(16, 5, 6), float32]) {
    %258 = cast(%var_6125, dtype="float64") /* ty=Tensor[(16, 1, 10), float64] */;
    %259 = @func_5532() /* ty=(Tensor[(16, 5, 6), float32], Tensor[(3, 11, 12), float32], Tensor[(840, 480), float64], Tensor[(840, 480), float32]) */;
    %260 = sqrt(%258) /* ty=Tensor[(16, 1, 10), float64] */;
    %261 = %259.0;
    (%260, %261)
  };
  %262(%var_6139) /* ty=(Tensor[(16, 1, 10), float64], Tensor[(16, 5, 6), float32]) */
}

def @func_4572(%var_4558: Tensor[(13, 9, 9), float32]) -> (Tensor[(13, 9, 9), float32],) {
  %263 = @func_2225() /* ty=(Tensor[(13, 9, 9), float32],) */;
  %264 = %263.0;
  %265 = cast(%var_4558, dtype="float32") /* ty=Tensor[(13, 9, 9), float32] */;
  %266 = shape_of(%264, dtype="int32") /* ty=Tensor[(3), int32] */;
  %267 = cast(%264, dtype="float32") /* ty=Tensor[(13, 9, 9), float32] */;
  %268 = dyn.reshape(%265, %266, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %269 = power(%267, %268) /* ty=Tensor[(13, 9, 9), float32] */;
  (%269,)
}

def @func_345(%var_343: Tensor[(16, 9, 11), int16]) -> (Tensor[(16, 9, 11), int16], Tensor[(16, 9, 11), int16], Tensor[(16, 9, 11), float32]) {
  @func_342(%var_343) /* ty=(Tensor[(16, 9, 11), int16], Tensor[(16, 9, 11), int16], Tensor[(16, 9, 11), float32]) */
}

def @func_2238() -> (Tensor[(13, 9, 9), float64], Tensor[(7, 7, 8), uint32], Tensor[(120), uint64], Tensor[(392), uint32], Tensor[(1848), float32]) {
  @func_2236() /* ty=(Tensor[(13, 9, 9), float64], Tensor[(7, 7, 8), uint32], Tensor[(120), uint64], Tensor[(392), uint32], Tensor[(1848), float32]) */
}

def @func_3469() -> Tensor[(5, 13, 16), float32] {
  @func_3467() /* ty=Tensor[(5, 13, 16), float32] */
}

def @func_4839(%var_4832: Tensor[(13, 9, 9), float64]) -> (Tensor[(13, 9, 9), float64],) {
  %270 = @func_2658() /* ty=Tensor[(13, 9, 9), float64] */;
  %271 = cast(%var_4832, dtype="float64") /* ty=Tensor[(13, 9, 9), float64] */;
  %272 = shape_of(%270, dtype="int32") /* ty=Tensor[(3), int32] */;
  %273 = cast(%270, dtype="float64") /* ty=Tensor[(13, 9, 9), float64] */;
  %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %275 = floor_divide(%273, %274) /* ty=Tensor[(13, 9, 9), float64] */;
  (%275,)
}

def @func_3646() -> (Tensor[(5, 13, 16), float32],) {
  %277 = fn () -> (Tensor[(5, 13, 16), float32],) {
    %276 = @func_3467() /* ty=Tensor[(5, 13, 16), float32] */;
    (%276,)
  };
  %277() /* ty=(Tensor[(5, 13, 16), float32],) */
}

def @func_4584() -> (Tensor[(6, 14, 13), float64],) {
  %280 = fn () -> (Tensor[(6, 14, 13), float64],) {
    %278 = cast(meta[relay.Constant][17] /* ty=Tensor[(6, 14, 13), float64] */, dtype="float64") /* ty=Tensor[(6, 14, 13), float64] */;
    %279 = erf(%278) /* ty=Tensor[(6, 14, 13), float64] */;
    (%279,)
  };
  %280() /* ty=(Tensor[(6, 14, 13), float64],) */
}

def @func_6017() -> Tensor[(3, 11, 12), float32] {
  %281 = fn () -> Tensor[(3, 11, 12), float32] {
    @func_4768() /* ty=Tensor[(3, 11, 12), float32] */
  };
  %281() /* ty=Tensor[(3, 11, 12), float32] */
}

def @func_4723(%var_4721: Tensor[(72), float64], %var_4722: Tensor[(1440), int64]) -> (Tensor[(6, 14, 2), bool], Tensor[(6, 14, 2), uint32], Tensor[(3, 2, 12), float64], Tensor[(72), float64], Tensor[(5, 13, 16), float32], Tensor[(16, 9, 11), int16], Tensor[(1440), int64], Tensor[(392), uint32], Tensor[(5, 13, 16), float32]) {
  %310 = fn (%var_4689: Tensor[(72), float64], %var_4699: Tensor[(1440), int64]) -> (Tensor[(6, 14, 2), bool], Tensor[(6, 14, 2), uint32], Tensor[(3, 2, 12), float64], Tensor[(72), float64], Tensor[(5, 13, 16), float32], Tensor[(16, 9, 11), int16], Tensor[(1440), int64], Tensor[(392), uint32], Tensor[(5, 13, 16), float32]) {
    %282 = @func_2723() /* ty=Tensor[(6, 14, 2), bool] */;
    %283 = cast(%282, dtype="float64") /* ty=Tensor[(6, 14, 2), float64] */;
    %284 = cast(%282, dtype="float64") /* ty=Tensor[(6, 14, 2), float64] */;
    %285 = cast(%282, dtype="float64") /* ty=Tensor[(6, 14, 2), float64] */;
    %286 = reshape(%283, newshape=[6, 14, 2]) /* ty=Tensor[(6, 14, 2), float64] */;
    %287 = reshape(%284, newshape=[6, 14, 2]) /* ty=Tensor[(6, 14, 2), float64] */;
    %288 = reshape(%285, newshape=[6, 14, 2]) /* ty=Tensor[(6, 14, 2), float64] */;
    %289 = @func_828(%286, %287, %288) /* ty=(Tensor[(6, 14, 2), uint32], Tensor[(6, 14, 2), bool]) */;
    %290 = cast(%var_4689, dtype="float64") /* ty=Tensor[(72), float64] */;
    %291 = cast(%var_4689, dtype="float64") /* ty=Tensor[(72), float64] */;
    %292 = reshape(%290, newshape=[3, 2, 12]) /* ty=Tensor[(3, 2, 12), float64] */;
    %293 = reshape(%291, newshape=[3, 2, 12]) /* ty=Tensor[(3, 2, 12), float64] */;
    %294 = @func_1203(%292, %293) /* ty=(Tensor[(3, 2, 12), float64],) */;
    %295 = cast(%var_4699, dtype="int64") /* ty=Tensor[(1440), int64] */;
    %296 = cast(%var_4699, dtype="int64") /* ty=Tensor[(1440), int64] */;
    %297 = cast(meta[relay.Constant][18] /* ty=Tensor[(392), uint32] */, dtype="uint32") /* ty=Tensor[(392), uint32] */;
    %298 = @func_3467() /* ty=Tensor[(5, 13, 16), float32] */;
    %299 = cast(%298, dtype="float32") /* ty=Tensor[(5, 13, 16), float32] */;
    %300 = reshape(%295, newshape=[8, 12, 15]) /* ty=Tensor[(8, 12, 15), int64] */;
    %301 = reshape(%296, newshape=[8, 12, 15]) /* ty=Tensor[(8, 12, 15), int64] */;
    %302 = reshape(%297, newshape=[392]) /* ty=Tensor[(392), uint32] */;
    %303 = reshape(%299, newshape=[1040]) /* ty=Tensor[(1040), float32] */;
    %304 = @func_1572(%300, %301, %302, %303) /* ty=(Tensor[(8, 12, 15), int64], Tensor[(16, 9, 11), int16], Tensor[(1584), int16], Tensor[(392), bool], Tensor[(6, 20), uint64], Tensor[(392), uint32], Tensor[(84, 22), float32], Tensor[(7, 7, 8), uint32], Tensor[(5, 13, 16), float32], Tensor[(1040), float32], Tensor[(5, 13, 16), float32]) */;
    %305 = @func_3902() /* ty=(Tensor[(3, 11, 12), float32], Tensor[(5, 13, 16), float32]) */;
    %306 = %289.0;
    %307 = %294.0;
    %308 = %304.1;
    %309 = %305.1;
    (%282, %306, %307, %var_4689, %298, %308, %var_4699, meta[relay.Constant][18] /* ty=Tensor[(392), uint32] */, %309)
  };
  %310(%var_4721, %var_4722) /* ty=(Tensor[(6, 14, 2), bool], Tensor[(6, 14, 2), uint32], Tensor[(3, 2, 12), float64], Tensor[(72), float64], Tensor[(5, 13, 16), float32], Tensor[(16, 9, 11), int16], Tensor[(1440), int64], Tensor[(392), uint32], Tensor[(5, 13, 16), float32]) */
}

def @func_3737() -> (Tensor[(3, 11, 12), float32],) {
  %311 = @func_2895() /* ty=Tensor[(3, 11, 12), float32] */;
  (%311,)
}

def @func_4424() -> (Tensor[(5, 13, 16), bool], Tensor[(440), float64], Tensor[(5, 13, 16), float32], Tensor[(5, 13, 16), int16]) {
  @func_4422() /* ty=(Tensor[(5, 13, 16), bool], Tensor[(440), float64], Tensor[(5, 13, 16), float32], Tensor[(5, 13, 16), int16]) */
}

def @func_5095(%var_5093: int16) -> (Tensor[(2, 8, 1), float32],) {
  @func_5092(%var_5093) /* ty=(Tensor[(2, 8, 1), float32],) */
}

def @func_5031(%var_5029: Tensor[(392), uint32], %var_5030: Tensor[(392), uint32]) -> (Tensor[(392), float32], Tensor[(392), bool], Tensor[(392), float32]) {
  %326 = fn (%var_4999: Tensor[(392), uint32], %var_5006: Tensor[(392), uint32]) -> (Tensor[(392), float32], Tensor[(392), bool], Tensor[(392), float32]) {
    %312 = @func_2693() /* ty=(Tensor[(13, 9, 9), float64], Tensor[(7, 7, 8), uint32], Tensor[(392), uint32], Tensor[(6, 14, 2), bool], Tensor[(168), float64], Tensor[(12, 5, 14), float64], Tensor[(840, 1), float64]) */;
    %313 = %312.2;
    %314 = cast(%var_4999, dtype="float32") /* ty=Tensor[(392), float32] */;
    %315 = shape_of(%313, dtype="int32") /* ty=Tensor[(1), int32] */;
    %316 = cast(%313, dtype="float32") /* ty=Tensor[(392), float32] */;
    %317 = dyn.reshape(%314, %315, newshape=[]) /* ty=Tensor[(?), float32] */;
    %318 = cast(%var_5006, dtype="bool") /* ty=Tensor[(392), bool] */;
    %319 = shape_of(%313, dtype="int32") /* ty=Tensor[(1), int32] */;
    %320 = cast(%313, dtype="bool") /* ty=Tensor[(392), bool] */;
    %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?), bool] */;
    %322 = cast(%var_5006, dtype="float32") /* ty=Tensor[(392), float32] */;
    %323 = mod(%316, %317) /* ty=Tensor[(392), float32] */;
    %324 = not_equal(%320, %321) /* ty=Tensor[(392), bool] */;
    %325 = asin(%322) /* ty=Tensor[(392), float32] */;
    (%323, %324, %325)
  };
  %326(%var_5029, %var_5030) /* ty=(Tensor[(392), float32], Tensor[(392), bool], Tensor[(392), float32]) */
}

def @func_5860(%var_5855: Tensor[(392), uint32], %var_5856: Tensor[(1848), float32]) -> (Tensor[(13, 9, 9), float64], Tensor[(924, 2), float32], Tensor[(120), uint64], Tensor[(392), uint32], Tensor[(1848), float32]) {
  %327 = cast(meta[relay.Constant][19] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %328 = cast(meta[relay.Constant][19] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %329 = cast(%var_5855, dtype="uint32") /* ty=Tensor[(392), uint32] */;
  %330 = cast(%var_5856, dtype="float32") /* ty=Tensor[(1848), float32] */;
  %331 = reshape(%327, newshape=[5, 4, 6]) /* ty=Tensor[(5, 4, 6), uint64] */;
  %332 = reshape(%328, newshape=[5, 4, 6]) /* ty=Tensor[(5, 4, 6), uint64] */;
  %333 = reshape(%329, newshape=[392]) /* ty=Tensor[(392), uint32] */;
  %334 = reshape(%330, newshape=[924, 2]) /* ty=Tensor[(924, 2), float32] */;
  %335 = @func_779(%331, %332, %333, %334) /* ty=(Tensor[(5, 4, 6), bool], Tensor[(7, 7, 8), uint32], Tensor[(392), bool], Tensor[(16, 9, 11), float32], Tensor[(924, 2), float32], Tensor[(16, 9, 11), int16]) */;
  %336 = @func_2658() /* ty=Tensor[(13, 9, 9), float64] */;
  %337 = %335.4;
  (%336, %337, meta[relay.Constant][19] /* ty=Tensor[(120), uint64] */, %var_5855, %var_5856)
}

def @func_828(%var_806: Tensor[(6, 14, 2), float64], %var_807: Tensor[(6, 14, 2), float64], %var_814: Tensor[(6, 14, 2), float64]) -> (Tensor[(6, 14, 2), uint32], Tensor[(6, 14, 2), bool]) {
  %338 = cast(%var_807, dtype="float64") /* ty=Tensor[(6, 14, 2), float64] */;
  %339 = shape_of(%var_806, dtype="int32") /* ty=Tensor[(3), int32] */;
  %340 = cast(%var_806, dtype="float64") /* ty=Tensor[(6, 14, 2), float64] */;
  %341 = dyn.reshape(%338, %339, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %342 = floor_mod(%340, %341) /* ty=Tensor[(6, 14, 2), float64] */;
  %343 = cast(%342, dtype="uint32") /* ty=Tensor[(6, 14, 2), uint32] */;
  %344 = shape_of(%var_807, dtype="int32") /* ty=Tensor[(3), int32] */;
  %345 = cast(%var_807, dtype="uint32") /* ty=Tensor[(6, 14, 2), uint32] */;
  %346 = dyn.reshape(%343, %344, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %347 = cast(%var_814, dtype="bool") /* ty=Tensor[(6, 14, 2), bool] */;
  %348 = shape_of(%342, dtype="int32") /* ty=Tensor[(3), int32] */;
  %349 = cast(%342, dtype="bool") /* ty=Tensor[(6, 14, 2), bool] */;
  %350 = dyn.reshape(%347, %348, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %351 = minimum(%345, %346) /* ty=Tensor[(6, 14, 2), uint32] */;
  %352 = greater(%349, %350) /* ty=Tensor[(6, 14, 2), bool] */;
  (%351, %352)
}

def @func_2523(%var_2502: Tensor[(480), float32], %var_2507: Tensor[(13, 9, 9), float32]) -> (Tensor[(16, 5, 6), float32], Tensor[(480), float32], Tensor[(13, 9, 9), bool]) {
  %353 = cast(%var_2502, dtype="float32") /* ty=Tensor[(480), float32] */;
  %354 = reshape(%353, newshape=[16, 5, 6]) /* ty=Tensor[(16, 5, 6), float32] */;
  %355 = @func_2225() /* ty=(Tensor[(13, 9, 9), float32],) */;
  %356 = %355.0;
  %357 = cast(%var_2507, dtype="bool") /* ty=Tensor[(13, 9, 9), bool] */;
  %358 = shape_of(%356, dtype="int32") /* ty=Tensor[(3), int32] */;
  %359 = cast(%356, dtype="bool") /* ty=Tensor[(13, 9, 9), bool] */;
  %360 = dyn.reshape(%357, %358, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %361 = @func_2430(%354) /* ty=Tensor[(16, 5, 6), float32] */;
  %362 = greater_equal(%359, %360) /* ty=Tensor[(13, 9, 9), bool] */;
  (%361, %var_2502, %362)
}

def @func_2051(%var_2042: Tensor[(1440), int64], %var_2043: Tensor[(392), uint32], %var_2044: Tensor[(1040), float32]) -> (Tensor[(13, 9, 9), float64], Tensor[(392), uint32], Tensor[(1440), int64], Tensor[(392), uint32], Tensor[(1040), float32]) {
  %363 = cast(%var_2042, dtype="int64") /* ty=Tensor[(1440), int64] */;
  %364 = cast(%var_2042, dtype="int64") /* ty=Tensor[(1440), int64] */;
  %365 = cast(%var_2043, dtype="uint32") /* ty=Tensor[(392), uint32] */;
  %366 = cast(%var_2044, dtype="float32") /* ty=Tensor[(1040), float32] */;
  %367 = reshape(%363, newshape=[8, 12, 15]) /* ty=Tensor[(8, 12, 15), int64] */;
  %368 = reshape(%364, newshape=[8, 12, 15]) /* ty=Tensor[(8, 12, 15), int64] */;
  %369 = reshape(%365, newshape=[392]) /* ty=Tensor[(392), uint32] */;
  %370 = reshape(%366, newshape=[1040]) /* ty=Tensor[(1040), float32] */;
  %371 = @func_1572(%367, %368, %369, %370) /* ty=(Tensor[(8, 12, 15), int64], Tensor[(16, 9, 11), int16], Tensor[(1584), int16], Tensor[(392), bool], Tensor[(6, 20), uint64], Tensor[(392), uint32], Tensor[(84, 22), float32], Tensor[(7, 7, 8), uint32], Tensor[(5, 13, 16), float32], Tensor[(1040), float32], Tensor[(5, 13, 16), float32]) */;
  %372 = @func_1915() /* ty=Tensor[(13, 9, 9), float64] */;
  %373 = %371.5;
  (%372, %373, %var_2042, %var_2043, %var_2044)
}

def @func_4640() -> (Tensor[(3, 11, 12), float32],) {
  %374 = @func_3737() /* ty=(Tensor[(3, 11, 12), float32],) */;
  %375 = %374.0;
  (%375,)
}

def @func_3962() -> (Tensor[(5, 13, 16), float32], Tensor[(16, 5, 6), float32], Tensor[(480), float32]) {
  %380 = fn () -> (Tensor[(5, 13, 16), float32], Tensor[(16, 5, 6), float32], Tensor[(480), float32]) {
    %376 = cast(meta[relay.Constant][20] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
    %377 = reshape(%376, newshape=[16, 5, 6]) /* ty=Tensor[(16, 5, 6), float32] */;
    %378 = @func_3467() /* ty=Tensor[(5, 13, 16), float32] */;
    %379 = @func_2430(%377) /* ty=Tensor[(16, 5, 6), float32] */;
    (%378, %379, meta[relay.Constant][20] /* ty=Tensor[(480), float32] */)
  };
  %380() /* ty=(Tensor[(5, 13, 16), float32], Tensor[(16, 5, 6), float32], Tensor[(480), float32]) */
}

def @func_2168(%var_2166: uint64, %var_2167: Tensor[(2, 1, 13), uint64]) -> (Tensor[(2, 1, 13), bool],) {
  %387 = fn (%var_2150: uint64, %var_2151: Tensor[(2, 1, 13), uint64]) -> (Tensor[(2, 1, 13), bool],) {
    %381 = cast(%var_2150, dtype="uint64") /* ty=uint64 */;
    %382 = cast(%var_2151, dtype="uint64") /* ty=Tensor[(2, 1, 13), uint64] */;
    %383 = bitwise_xor(%381, %382) /* ty=Tensor[(2, 1, 13), uint64] */;
    %384 = cast(%383, dtype="bool") /* ty=Tensor[(2, 1, 13), bool] */;
    %385 = cast(%var_2150, dtype="bool") /* ty=bool */;
    %386 = less_equal(%384, %385) /* ty=Tensor[(2, 1, 13), bool] */;
    (%386,)
  };
  %387(%var_2166, %var_2167) /* ty=(Tensor[(2, 1, 13), bool],) */
}

def @func_2122(%var_2121: Tensor[(26, 7), float32]) -> (Tensor[(13, 9, 9), bool], Tensor[(14, 13), float32], Tensor[(26, 7), float32]) {
  %400 = fn (%var_2115: Tensor[(26, 7), float32]) -> (Tensor[(13, 9, 9), bool], Tensor[(14, 13), float32], Tensor[(26, 7), float32]) {
    %388 = @func_1915() /* ty=Tensor[(13, 9, 9), float64] */;
    %389 = cast(%388, dtype="float64") /* ty=Tensor[(13, 9, 9), float64] */;
    %390 = acosh(%389) /* ty=Tensor[(13, 9, 9), float64] */;
    %391 = cast(%388, dtype="bool") /* ty=Tensor[(13, 9, 9), bool] */;
    %392 = shape_of(%390, dtype="int32") /* ty=Tensor[(3), int32] */;
    %393 = cast(%390, dtype="bool") /* ty=Tensor[(13, 9, 9), bool] */;
    %394 = dyn.reshape(%391, %392, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %395 = cast(%var_2115, dtype="float32") /* ty=Tensor[(26, 7), float32] */;
    %396 = reshape(%395, newshape=[14, 13]) /* ty=Tensor[(14, 13), float32] */;
    %397 = @func_1299(%396) /* ty=(Tensor[(14, 13), float32],) */;
    %398 = logical_or(%393, %394) /* ty=Tensor[(13, 9, 9), bool] */;
    %399 = %397.0;
    (%398, %399, %var_2115)
  };
  %400(%var_2121) /* ty=(Tensor[(13, 9, 9), bool], Tensor[(14, 13), float32], Tensor[(26, 7), float32]) */
}

def @func_5260(%var_5258: Tensor[(1848), float32], %var_5259: Tensor[(1, 72), float64]) -> (Tensor[(3, 11, 12), float32], Tensor[(1584), int16], Tensor[(1848), uint32], Tensor[(6, 14, 2), uint32], Tensor[(1, 72), float64], Tensor[(1440), int64]) {
  %417 = fn (%var_5222: Tensor[(1848), float32], %var_5234: Tensor[(1, 72), float64]) -> (Tensor[(3, 11, 12), float32], Tensor[(1584), int16], Tensor[(1848), uint32], Tensor[(6, 14, 2), uint32], Tensor[(1, 72), float64], Tensor[(1440), int64]) {
    %401 = cast(%var_5222, dtype="float32") /* ty=Tensor[(1848), float32] */;
    %402 = reshape(%401, newshape=[14, 11, 12]) /* ty=Tensor[(14, 11, 12), float32] */;
    %403 = @func_502(%402) /* ty=(Tensor[(16, 9, 11), float32], Tensor[(1584), int16], Tensor[(16, 9, 11), int16], Tensor[(14, 11, 12), float64]) */;
    %404 = cast(meta[relay.Constant][21] /* ty=Tensor[(1848), float32] */, dtype="uint32") /* ty=Tensor[(1848), uint32] */;
    %405 = shape_of(%var_5222, dtype="int32") /* ty=Tensor[(1), int32] */;
    %406 = cast(%var_5222, dtype="uint32") /* ty=Tensor[(1848), uint32] */;
    %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?), uint32] */;
    %408 = cast(%var_5234, dtype="float64") /* ty=Tensor[(1, 72), float64] */;
    %409 = cast(meta[relay.Constant][22] /* ty=Tensor[(1440), int64] */, dtype="int64") /* ty=Tensor[(1440), int64] */;
    %410 = reshape(%408, newshape=[72]) /* ty=Tensor[(72), float64] */;
    %411 = reshape(%409, newshape=[1440]) /* ty=Tensor[(1440), int64] */;
    %412 = @func_4720(%410, %411) /* ty=(Tensor[(6, 14, 2), bool], Tensor[(6, 14, 2), uint32], Tensor[(3, 2, 12), float64], Tensor[(72), float64], Tensor[(5, 13, 16), float32], Tensor[(16, 9, 11), int16], Tensor[(1440), int64], Tensor[(392), uint32], Tensor[(5, 13, 16), float32]) */;
    %413 = @func_4768() /* ty=Tensor[(3, 11, 12), float32] */;
    %414 = %403.1;
    %415 = bitwise_and(%406, %407) /* ty=Tensor[(1848), uint32] */;
    %416 = %412.1;
    (%413, %414, %415, %416, %var_5234, meta[relay.Constant][22] /* ty=Tensor[(1440), int64] */)
  };
  %417(%var_5258, %var_5259) /* ty=(Tensor[(3, 11, 12), float32], Tensor[(1584), int16], Tensor[(1848), uint32], Tensor[(6, 14, 2), uint32], Tensor[(1, 72), float64], Tensor[(1440), int64]) */
}

def @func_342(%var_306: Tensor[(16, 9, 11), int16]) -> (Tensor[(16, 9, 11), int16], Tensor[(16, 9, 11), int16], Tensor[(16, 9, 11), float32]) {
  %418 = cast(meta[relay.Constant][23] /* ty=Tensor[(16, 9, 11), int16] */, dtype="int16") /* ty=Tensor[(16, 9, 11), int16] */;
  %419 = shape_of(%var_306, dtype="int32") /* ty=Tensor[(3), int32] */;
  %420 = cast(%var_306, dtype="int16") /* ty=Tensor[(16, 9, 11), int16] */;
  %421 = dyn.reshape(%418, %419, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %422 = cast(%var_306, dtype="int16") /* ty=Tensor[(16, 9, 11), int16] */;
  %423 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(16, 9, 11), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %424 = cast(meta[relay.Constant][23] /* ty=Tensor[(16, 9, 11), int16] */, dtype="int16") /* ty=Tensor[(16, 9, 11), int16] */;
  %425 = dyn.reshape(%422, %423, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %426 = cast(%var_306, dtype="float32") /* ty=Tensor[(16, 9, 11), float32] */;
  %427 = add(%420, %421) /* ty=Tensor[(16, 9, 11), int16] */;
  %428 = multiply(%424, %425) /* ty=Tensor[(16, 9, 11), int16] */;
  %429 = acosh(%426) /* ty=Tensor[(16, 9, 11), float32] */;
  (%427, %428, %429)
}

def @func_4422() -> (Tensor[(5, 13, 16), bool], Tensor[(440), float64], Tensor[(5, 13, 16), float32], Tensor[(5, 13, 16), int16]) {
  %430 = @func_2585() /* ty=Tensor[(5, 13, 16), float32] */;
  %431 = cast(meta[relay.Constant][24] /* ty=Tensor[(5, 13, 16), float32] */, dtype="bool") /* ty=Tensor[(5, 13, 16), bool] */;
  %432 = shape_of(%430, dtype="int32") /* ty=Tensor[(3), int32] */;
  %433 = cast(%430, dtype="bool") /* ty=Tensor[(5, 13, 16), bool] */;
  %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %435 = @func_4149() /* ty=(Tensor[(7, 7, 8), uint32], Tensor[(392), float64], Tensor[(5, 13, 16), float32], Tensor[(440), float64]) */;
  %436 = cast(meta[relay.Constant][24] /* ty=Tensor[(5, 13, 16), float32] */, dtype="float32") /* ty=Tensor[(5, 13, 16), float32] */;
  %437 = reshape(%436, newshape=[5, 13, 16]) /* ty=Tensor[(5, 13, 16), float32] */;
  %438 = @func_1515(%437) /* ty=Tensor[(5, 13, 16), float32] */;
  %439 = cast(%438, dtype="int16") /* ty=Tensor[(5, 13, 16), int16] */;
  %440 = shape_of(%430, dtype="int32") /* ty=Tensor[(3), int32] */;
  %441 = cast(%430, dtype="int16") /* ty=Tensor[(5, 13, 16), int16] */;
  %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %443 = greater(%433, %434) /* ty=Tensor[(5, 13, 16), bool] */;
  %444 = %435.3;
  %445 = @func_3467() /* ty=Tensor[(5, 13, 16), float32] */;
  %446 = maximum(%441, %442) /* ty=Tensor[(5, 13, 16), int16] */;
  (%443, %444, %445, %446)
}

def @func_3930() -> (Tensor[(15, 2, 15), float32],) {
  %449 = fn () -> (Tensor[(15, 2, 15), float32],) {
    %447 = cast(meta[relay.Constant][25] /* ty=Tensor[(15, 2, 15), float32] */, dtype="float32") /* ty=Tensor[(15, 2, 15), float32] */;
    %448 = log(%447) /* ty=Tensor[(15, 2, 15), float32] */;
    (%448,)
  };
  %449() /* ty=(Tensor[(15, 2, 15), float32],) */
}

def @func_5395(%var_5393: Tensor[(1040, 1), float32]) -> (Tensor[(9, ?, ?), int16], Tensor[(5, 13, 16), float32], Tensor[(72), float64], Tensor[(9, 1040, ?), bool]) {
  @func_5392(%var_5393) /* ty=(Tensor[(9, ?, ?), int16], Tensor[(5, 13, 16), float32], Tensor[(72), float64], Tensor[(9, 1040, ?), bool]) */
}

def @func_504(%var_503: Tensor[(14, 11, 12), float32]) -> (Tensor[(16, 9, 11), float32], Tensor[(1584), int16], Tensor[(16, 9, 11), int16], Tensor[(14, 11, 12), float64]) {
  %465 = fn (%var_449: Tensor[(14, 11, 12), float32]) -> (Tensor[(16, 9, 11), float32], Tensor[(1584), int16], Tensor[(16, 9, 11), int16], Tensor[(14, 11, 12), float64]) {
    %450 = cast(meta[relay.Constant][26] /* ty=Tensor[(1584), int16] */, dtype="int16") /* ty=Tensor[(1584), int16] */;
    %451 = reshape(%450, newshape=[16, 9, 11]) /* ty=Tensor[(16, 9, 11), int16] */;
    %452 = @func_342(%451) /* ty=(Tensor[(16, 9, 11), int16], Tensor[(16, 9, 11), int16], Tensor[(16, 9, 11), float32]) */;
    %453 = cast(meta[relay.Constant][26] /* ty=Tensor[(1584), int16] */, dtype="int16") /* ty=Tensor[(1584), int16] */;
    %454 = reshape(%453, newshape=[16, 9, 11]) /* ty=Tensor[(16, 9, 11), int16] */;
    %455 = @func_342(%454) /* ty=(Tensor[(16, 9, 11), int16], Tensor[(16, 9, 11), int16], Tensor[(16, 9, 11), float32]) */;
    %456 = cast(%var_449, dtype="float32") /* ty=Tensor[(14, 11, 12), float32] */;
    %457 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(14, 11, 12), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %458 = cast(meta[relay.Constant][27] /* ty=Tensor[(14, 11, 12), float32] */, dtype="float32") /* ty=Tensor[(14, 11, 12), float32] */;
    %459 = dyn.reshape(%456, %457, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %460 = mod(%458, %459) /* ty=Tensor[(14, 11, 12), float32] */;
    %461 = cast(%460, dtype="float64") /* ty=Tensor[(14, 11, 12), float64] */;
    %462 = %452.2;
    %463 = %455.1;
    %464 = sigmoid(%461) /* ty=Tensor[(14, 11, 12), float64] */;
    (%462, meta[relay.Constant][26] /* ty=Tensor[(1584), int16] */, %463, %464)
  };
  %465(%var_503) /* ty=(Tensor[(16, 9, 11), float32], Tensor[(1584), int16], Tensor[(16, 9, 11), int16], Tensor[(14, 11, 12), float64]) */
}

def @func_2432(%var_2431: Tensor[(16, 5, 6), float32]) -> Tensor[(16, 5, 6), float32] {
  %467 = fn (%var_2424: Tensor[(16, 5, 6), float32]) -> Tensor[(16, 5, 6), float32] {
    %466 = cast(%var_2424, dtype="float32") /* ty=Tensor[(16, 5, 6), float32] */;
    cos(%466) /* ty=Tensor[(16, 5, 6), float32] */
  };
  %467(%var_2431) /* ty=Tensor[(16, 5, 6), float32] */
}

def @func_5617(%var_5616: Tensor[(3, 11, 12), float32]) -> (Tensor[(3, 11, 12), bool],) {
  %475 = fn (%var_5610: Tensor[(3, 11, 12), float32]) -> (Tensor[(3, 11, 12), bool],) {
    %468 = @func_3737() /* ty=(Tensor[(3, 11, 12), float32],) */;
    %469 = %468.0;
    %470 = cast(%var_5610, dtype="bool") /* ty=Tensor[(3, 11, 12), bool] */;
    %471 = shape_of(%469, dtype="int32") /* ty=Tensor[(3), int32] */;
    %472 = cast(%469, dtype="bool") /* ty=Tensor[(3, 11, 12), bool] */;
    %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %474 = equal(%472, %473) /* ty=Tensor[(3, 11, 12), bool] */;
    (%474,)
  };
  %475(%var_5616) /* ty=(Tensor[(3, 11, 12), bool],) */
}

def @func_5971(%var_5948: Tensor[(392), uint32]) -> (Tensor[(5, 13, 16), float32], Tensor[(7, 7, 8), float32]) {
  %476 = cast(%var_5948, dtype="uint32") /* ty=Tensor[(392), uint32] */;
  %477 = reshape(%476, newshape=[7, 7, 8]) /* ty=Tensor[(7, 7, 8), uint32] */;
  %478 = @func_653(%477) /* ty=Tensor[(7, 7, 8), uint32] */;
  %479 = cast(%var_5948, dtype="uint8") /* ty=Tensor[(392), uint8] */;
  %480 = shape_of(%478, dtype="int32") /* ty=Tensor[(3), int32] */;
  %481 = cast(%478, dtype="uint8") /* ty=Tensor[(7, 7, 8), uint8] */;
  %482 = dyn.reshape(%479, %480, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %483 = right_shift(%481, %482) /* ty=Tensor[(7, 7, 8), uint8] */;
  %484 = cast(%483, dtype="bool") /* ty=Tensor[(7, 7, 8), bool] */;
  %485 = shape_of(%478, dtype="int32") /* ty=Tensor[(3), int32] */;
  %486 = cast(%478, dtype="bool") /* ty=Tensor[(7, 7, 8), bool] */;
  %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %488 = less(%486, %487) /* ty=Tensor[(7, 7, 8), bool] */;
  %489 = cast(%483, dtype="float32") /* ty=Tensor[(7, 7, 8), float32] */;
  %490 = shape_of(%488, dtype="int32") /* ty=Tensor[(3), int32] */;
  %491 = cast(%488, dtype="float32") /* ty=Tensor[(7, 7, 8), float32] */;
  %492 = dyn.reshape(%489, %490, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %493 = @func_5306() /* ty=Tensor[(5, 13, 16), float32] */;
  %494 = mod(%491, %492) /* ty=Tensor[(7, 7, 8), float32] */;
  (%493, %494)
}

def @func_5435(%var_5433: Tensor[(12, 14, 1), float64]) -> (Tensor[(12, 14, 1), float64],) {
  @func_5432(%var_5433) /* ty=(Tensor[(12, 14, 1), float64],) */
}

def @func_2693() -> (Tensor[(13, 9, 9), float64], Tensor[(7, 7, 8), uint32], Tensor[(392), uint32], Tensor[(6, 14, 2), bool], Tensor[(168), float64], Tensor[(12, 5, 14), float64], Tensor[(840, 1), float64]) {
  %495 = cast(meta[relay.Constant][28] /* ty=Tensor[(392), uint32] */, dtype="uint32") /* ty=Tensor[(392), uint32] */;
  %496 = reshape(%495, newshape=[7, 7, 8]) /* ty=Tensor[(7, 7, 8), uint32] */;
  %497 = cast(meta[relay.Constant][29] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
  %498 = cast(meta[relay.Constant][29] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
  %499 = cast(meta[relay.Constant][29] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
  %500 = reshape(%497, newshape=[6, 14, 2]) /* ty=Tensor[(6, 14, 2), float64] */;
  %501 = reshape(%498, newshape=[6, 14, 2]) /* ty=Tensor[(6, 14, 2), float64] */;
  %502 = reshape(%499, newshape=[6, 14, 2]) /* ty=Tensor[(6, 14, 2), float64] */;
  %503 = @func_828(%500, %501, %502) /* ty=(Tensor[(6, 14, 2), uint32], Tensor[(6, 14, 2), bool]) */;
  %504 = cast(meta[relay.Constant][30] /* ty=Tensor[(840, 1), float64] */, dtype="float64") /* ty=Tensor[(840, 1), float64] */;
  %505 = cast(meta[relay.Constant][30] /* ty=Tensor[(840, 1), float64] */, dtype="float64") /* ty=Tensor[(840, 1), float64] */;
  %506 = reshape(%504, newshape=[12, 5, 14]) /* ty=Tensor[(12, 5, 14), float64] */;
  %507 = reshape(%505, newshape=[12, 5, 14]) /* ty=Tensor[(12, 5, 14), float64] */;
  %508 = @func_1892(%506, %507) /* ty=(Tensor[(12, 5, 14), float64],) */;
  %509 = @func_1915() /* ty=Tensor[(13, 9, 9), float64] */;
  %510 = @func_653(%496) /* ty=Tensor[(7, 7, 8), uint32] */;
  %511 = %503.1;
  %512 = %508.0;
  (%509, %510, meta[relay.Constant][28] /* ty=Tensor[(392), uint32] */, %511, meta[relay.Constant][29] /* ty=Tensor[(168), float64] */, %512, meta[relay.Constant][30] /* ty=Tensor[(840, 1), float64] */)
}

def @func_5392(%var_5371: Tensor[(1040, 1), float32]) -> (Tensor[(9, ?, ?), int16], Tensor[(5, 13, 16), float32], Tensor[(72), float64], Tensor[(9, 1040, ?), bool]) {
  %513 = cast(meta[relay.Constant][31] /* ty=Tensor[(9, 1, 1), float32] */, dtype="float32") /* ty=Tensor[(9, 1, 1), float32] */;
  %514 = acos(%513) /* ty=Tensor[(9, 1, 1), float32] */;
  %515 = cast(meta[relay.Constant][31] /* ty=Tensor[(9, 1, 1), float32] */, dtype="bool") /* ty=Tensor[(9, 1, 1), bool] */;
  %516 = shape_of(%514, dtype="int32") /* ty=Tensor[(3), int32] */;
  %517 = cast(%514, dtype="bool") /* ty=Tensor[(9, 1, 1), bool] */;
  %518 = dyn.reshape(%515, %516, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %519 = not_equal(%517, %518) /* ty=Tensor[(9, ?, ?), bool] */;
  %520 = cast(meta[relay.Constant][31] /* ty=Tensor[(9, 1, 1), float32] */, dtype="int16") /* ty=Tensor[(9, 1, 1), int16] */;
  %521 = shape_of(%519, dtype="int32") /* ty=Tensor[(3), int32] */;
  %522 = cast(%519, dtype="int16") /* ty=Tensor[(9, ?, ?), int16] */;
  %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %524 = cast(meta[relay.Constant][32] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %525 = cast(%var_5371, dtype="float32") /* ty=Tensor[(1040, 1), float32] */;
  %526 = cast(meta[relay.Constant][32] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %527 = reshape(%524, newshape=[4, 3, 6]) /* ty=Tensor[(4, 3, 6), float64] */;
  %528 = reshape(%525, newshape=[1040]) /* ty=Tensor[(1040), float32] */;
  %529 = reshape(%526, newshape=[4, 3, 6]) /* ty=Tensor[(4, 3, 6), float64] */;
  %530 = @func_1997(%527, %528, %529) /* ty=(Tensor[(4, 3, 6), float64], Tensor[(5, 13, 16), float32], Tensor[(1040), float32], Tensor[(4, 3, 6), float32], Tensor[(4, 3, 6), float64]) */;
  %531 = cast(%519, dtype="bool") /* ty=Tensor[(9, ?, ?), bool] */;
  %532 = cast(%var_5371, dtype="bool") /* ty=Tensor[(1040, 1), bool] */;
  %533 = logical_xor(%522, %523) /* ty=Tensor[(9, ?, ?), int16] */;
  %534 = %530.1;
  %535 = logical_or(%531, %532) /* ty=Tensor[(9, 1040, ?), bool] */;
  (%533, %534, meta[relay.Constant][32] /* ty=Tensor[(72), float64] */, %535)
}

def @func_2974(%var_2972: Tensor[(7, 8, 12), float32], %var_2973: Tensor[(7, 8, 12), float32]) -> (Tensor[(7, 8, 12), float32],) {
  @func_2970(%var_2972, %var_2973) /* ty=(Tensor[(7, 8, 12), float32],) */
}

def @func_4842(%var_4840: Tensor[(13, 9, 9), float64]) -> (Tensor[(13, 9, 9), float64],) {
  @func_4839(%var_4840) /* ty=(Tensor[(13, 9, 9), float64],) */
}

def @func_2660() -> Tensor[(13, 9, 9), float64] {
  @func_2658() /* ty=Tensor[(13, 9, 9), float64] */
}

def @func_2873(%var_2872: Tensor[(440), float64]) -> (Tensor[(3, 11, 12), float32], Tensor[(440), bool], Tensor[(5, 13, 16), float32]) {
  %554 = fn (%var_2824: Tensor[(440), float64]) -> (Tensor[(3, 11, 12), float32], Tensor[(440), bool], Tensor[(5, 13, 16), float32]) {
    %536 = @func_2482() /* ty=(Tensor[(3, 11, 12), float32], Tensor[(5, 13, 16), float32], Tensor[(4, 260), float32]) */;
    %537 = cast(%var_2824, dtype="float64") /* ty=Tensor[(440), float64] */;
    %538 = cast(%var_2824, dtype="float64") /* ty=Tensor[(440), float64] */;
    %539 = reshape(%537, newshape=[10, 11, 4]) /* ty=Tensor[(10, 11, 4), float64] */;
    %540 = reshape(%538, newshape=[10, 11, 4]) /* ty=Tensor[(10, 11, 4), float64] */;
    %541 = @func_1729(%539, %540) /* ty=Tensor[(10, 11, 4), float64] */;
    %542 = cast(%var_2824, dtype="float32") /* ty=Tensor[(440), float32] */;
    %543 = shape_of(%541, dtype="int32") /* ty=Tensor[(3), int32] */;
    %544 = cast(%541, dtype="float32") /* ty=Tensor[(10, 11, 4), float32] */;
    %545 = dyn.reshape(%542, %543, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %546 = divide(%544, %545) /* ty=Tensor[(10, 11, 4), float32] */;
    %547 = cast(%546, dtype="bool") /* ty=Tensor[(10, 11, 4), bool] */;
    %548 = shape_of(%var_2824, dtype="int32") /* ty=Tensor[(1), int32] */;
    %549 = cast(%var_2824, dtype="bool") /* ty=Tensor[(440), bool] */;
    %550 = dyn.reshape(%547, %548, newshape=[]) /* ty=Tensor[(?), bool] */;
    %551 = %536.0;
    %552 = logical_or(%549, %550) /* ty=Tensor[(440), bool] */;
    %553 = @func_2585() /* ty=Tensor[(5, 13, 16), float32] */;
    (%551, %552, %553)
  };
  %554(%var_2872) /* ty=(Tensor[(3, 11, 12), float32], Tensor[(440), bool], Tensor[(5, 13, 16), float32]) */
}

def @func_5699(%var_5697: Tensor[(40, 26), float32], %var_5698: Tensor[(40, 26), float32]) -> (Tensor[(480), float32], Tensor[(3, 11, 12), float32], Tensor[(72), float64], Tensor[(40, 26), float32]) {
  %570 = fn (%var_5662: Tensor[(40, 26), float32], %var_5685: Tensor[(40, 26), float32]) -> (Tensor[(480), float32], Tensor[(3, 11, 12), float32], Tensor[(72), float64], Tensor[(40, 26), float32]) {
    %555 = @func_3961() /* ty=(Tensor[(5, 13, 16), float32], Tensor[(16, 5, 6), float32], Tensor[(480), float32]) */;
    %556 = @func_3737() /* ty=(Tensor[(3, 11, 12), float32],) */;
    %557 = cast(%var_5662, dtype="float32") /* ty=Tensor[(40, 26), float32] */;
    %558 = reshape(%557, newshape=[1040, 1]) /* ty=Tensor[(1040, 1), float32] */;
    %559 = @func_5392(%558) /* ty=(Tensor[(9, ?, ?), int16], Tensor[(5, 13, 16), float32], Tensor[(72), float64], Tensor[(9, 1040, ?), bool]) */;
    %560 = cast(%var_5662, dtype="float32") /* ty=Tensor[(40, 26), float32] */;
    %561 = sin(%560) /* ty=Tensor[(40, 26), float32] */;
    %562 = cast(%var_5685, dtype="float32") /* ty=Tensor[(40, 26), float32] */;
    %563 = shape_of(%561, dtype="int32") /* ty=Tensor[(2), int32] */;
    %564 = cast(%561, dtype="float32") /* ty=Tensor[(40, 26), float32] */;
    %565 = dyn.reshape(%562, %563, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %566 = %555.2;
    %567 = %556.0;
    %568 = %559.2;
    %569 = add(%564, %565) /* ty=Tensor[(40, 26), float32] */;
    (%566, %567, %568, %569)
  };
  %570(%var_5697, %var_5698) /* ty=(Tensor[(480), float32], Tensor[(3, 11, 12), float32], Tensor[(72), float64], Tensor[(40, 26), float32]) */
}

def @func_4633() -> Tensor[(3, 11, 12), float32] {
  %571 = @func_3902() /* ty=(Tensor[(3, 11, 12), float32], Tensor[(5, 13, 16), float32]) */;
  %571.0
}

def @func_6121() -> (Tensor[(3, 11, 12), float32], Tensor[(13, 9, 9), float64]) {
  %574 = fn () -> (Tensor[(3, 11, 12), float32], Tensor[(13, 9, 9), float64]) {
    %572 = @func_6016() /* ty=Tensor[(3, 11, 12), float32] */;
    %573 = @func_2658() /* ty=Tensor[(13, 9, 9), float64] */;
    (%572, %573)
  };
  %574() /* ty=(Tensor[(3, 11, 12), float32], Tensor[(13, 9, 9), float64]) */
}

def @func_784(%var_780: Tensor[(5, 4, 6), uint64], %var_781: Tensor[(5, 4, 6), uint64], %var_782: Tensor[(392), uint32], %var_783: Tensor[(924, 2), float32]) -> (Tensor[(5, 4, 6), bool], Tensor[(7, 7, 8), uint32], Tensor[(392), bool], Tensor[(16, 9, 11), float32], Tensor[(924, 2), float32], Tensor[(16, 9, 11), int16]) {
  %599 = fn (%var_720: Tensor[(5, 4, 6), uint64], %var_721: Tensor[(5, 4, 6), uint64], %var_727: Tensor[(392), uint32], %var_742: Tensor[(924, 2), float32]) -> (Tensor[(5, 4, 6), bool], Tensor[(7, 7, 8), uint32], Tensor[(392), bool], Tensor[(16, 9, 11), float32], Tensor[(924, 2), float32], Tensor[(16, 9, 11), int16]) {
    %575 = cast(%var_721, dtype="bool") /* ty=Tensor[(5, 4, 6), bool] */;
    %576 = shape_of(%var_720, dtype="int32") /* ty=Tensor[(3), int32] */;
    %577 = cast(%var_720, dtype="bool") /* ty=Tensor[(5, 4, 6), bool] */;
    %578 = dyn.reshape(%575, %576, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %579 = cast(%var_727, dtype="uint32") /* ty=Tensor[(392), uint32] */;
    %580 = reshape(%579, newshape=[7, 7, 8]) /* ty=Tensor[(7, 7, 8), uint32] */;
    %581 = @func_653(%580) /* ty=Tensor[(7, 7, 8), uint32] */;
    %582 = cast(%581, dtype="uint32") /* ty=Tensor[(7, 7, 8), uint32] */;
    %583 = reshape(%582, newshape=[7, 7, 8]) /* ty=Tensor[(7, 7, 8), uint32] */;
    %584 = @func_653(%583) /* ty=Tensor[(7, 7, 8), uint32] */;
    %585 = cast(%584, dtype="bool") /* ty=Tensor[(7, 7, 8), bool] */;
    %586 = shape_of(%var_727, dtype="int32") /* ty=Tensor[(1), int32] */;
    %587 = cast(%var_727, dtype="bool") /* ty=Tensor[(392), bool] */;
    %588 = dyn.reshape(%585, %586, newshape=[]) /* ty=Tensor[(?), bool] */;
    %589 = cast(%var_742, dtype="float32") /* ty=Tensor[(924, 2), float32] */;
    %590 = reshape(%589, newshape=[14, 11, 12]) /* ty=Tensor[(14, 11, 12), float32] */;
    %591 = @func_502(%590) /* ty=(Tensor[(16, 9, 11), float32], Tensor[(1584), int16], Tensor[(16, 9, 11), int16], Tensor[(14, 11, 12), float64]) */;
    %592 = %591.0;
    %593 = cast(%592, dtype="int16") /* ty=Tensor[(16, 9, 11), int16] */;
    %594 = reshape(%593, newshape=[16, 9, 11]) /* ty=Tensor[(16, 9, 11), int16] */;
    %595 = @func_342(%594) /* ty=(Tensor[(16, 9, 11), int16], Tensor[(16, 9, 11), int16], Tensor[(16, 9, 11), float32]) */;
    %596 = not_equal(%577, %578) /* ty=Tensor[(5, 4, 6), bool] */;
    %597 = logical_and(%587, %588) /* ty=Tensor[(392), bool] */;
    %598 = %595.1;
    (%596, %581, %597, %592, %var_742, %598)
  };
  %599(%var_780, %var_781, %var_782, %var_783) /* ty=(Tensor[(5, 4, 6), bool], Tensor[(7, 7, 8), uint32], Tensor[(392), bool], Tensor[(16, 9, 11), float32], Tensor[(924, 2), float32], Tensor[(16, 9, 11), int16]) */
}

def @func_1577(%var_1573: Tensor[(8, 12, 15), int64], %var_1574: Tensor[(8, 12, 15), int64], %var_1575: Tensor[(392), uint32], %var_1576: Tensor[(1040), float32]) -> (Tensor[(8, 12, 15), int64], Tensor[(16, 9, 11), int16], Tensor[(1584), int16], Tensor[(392), bool], Tensor[(6, 20), uint64], Tensor[(392), uint32], Tensor[(84, 22), float32], Tensor[(7, 7, 8), uint32], Tensor[(5, 13, 16), float32], Tensor[(1040), float32], Tensor[(5, 13, 16), float32]) {
  %628 = fn (%var_1537: Tensor[(8, 12, 15), int64], %var_1538: Tensor[(8, 12, 15), int64], %var_1551: Tensor[(392), uint32], %var_1559: Tensor[(1040), float32]) -> (Tensor[(8, 12, 15), int64], Tensor[(16, 9, 11), int16], Tensor[(1584), int16], Tensor[(392), bool], Tensor[(6, 20), uint64], Tensor[(392), uint32], Tensor[(84, 22), float32], Tensor[(7, 7, 8), uint32], Tensor[(5, 13, 16), float32], Tensor[(1040), float32], Tensor[(5, 13, 16), float32]) {
    %600 = cast(%var_1538, dtype="int64") /* ty=Tensor[(8, 12, 15), int64] */;
    %601 = shape_of(%var_1537, dtype="int32") /* ty=Tensor[(3), int32] */;
    %602 = cast(%var_1537, dtype="int64") /* ty=Tensor[(8, 12, 15), int64] */;
    %603 = dyn.reshape(%600, %601, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %604 = cast(meta[relay.Constant][33] /* ty=Tensor[(1584), int16] */, dtype="int16") /* ty=Tensor[(1584), int16] */;
    %605 = reshape(%604, newshape=[16, 9, 11]) /* ty=Tensor[(16, 9, 11), int16] */;
    %606 = @func_342(%605) /* ty=(Tensor[(16, 9, 11), int16], Tensor[(16, 9, 11), int16], Tensor[(16, 9, 11), float32]) */;
    %607 = cast(meta[relay.Constant][34] /* ty=Tensor[(6, 20), uint64] */, dtype="uint64") /* ty=Tensor[(6, 20), uint64] */;
    %608 = cast(meta[relay.Constant][34] /* ty=Tensor[(6, 20), uint64] */, dtype="uint64") /* ty=Tensor[(6, 20), uint64] */;
    %609 = cast(%var_1551, dtype="uint32") /* ty=Tensor[(392), uint32] */;
    %610 = cast(meta[relay.Constant][35] /* ty=Tensor[(84, 22), float32] */, dtype="float32") /* ty=Tensor[(84, 22), float32] */;
    %611 = reshape(%607, newshape=[5, 4, 6]) /* ty=Tensor[(5, 4, 6), uint64] */;
    %612 = reshape(%608, newshape=[5, 4, 6]) /* ty=Tensor[(5, 4, 6), uint64] */;
    %613 = reshape(%609, newshape=[392]) /* ty=Tensor[(392), uint32] */;
    %614 = reshape(%610, newshape=[924, 2]) /* ty=Tensor[(924, 2), float32] */;
    %615 = @func_779(%611, %612, %613, %614) /* ty=(Tensor[(5, 4, 6), bool], Tensor[(7, 7, 8), uint32], Tensor[(392), bool], Tensor[(16, 9, 11), float32], Tensor[(924, 2), float32], Tensor[(16, 9, 11), int16]) */;
    %616 = cast(%var_1551, dtype="uint32") /* ty=Tensor[(392), uint32] */;
    %617 = reshape(%616, newshape=[7, 7, 8]) /* ty=Tensor[(7, 7, 8), uint32] */;
    %618 = cast(%var_1559, dtype="float32") /* ty=Tensor[(1040), float32] */;
    %619 = reshape(%618, newshape=[5, 13, 16]) /* ty=Tensor[(5, 13, 16), float32] */;
    %620 = cast(%var_1559, dtype="float32") /* ty=Tensor[(1040), float32] */;
    %621 = reshape(%620, newshape=[5, 13, 16]) /* ty=Tensor[(5, 13, 16), float32] */;
    %622 = right_shift(%602, %603) /* ty=Tensor[(8, 12, 15), int64] */;
    %623 = %606.0;
    %624 = %615.2;
    %625 = @func_653(%617) /* ty=Tensor[(7, 7, 8), uint32] */;
    %626 = @func_1515(%619) /* ty=Tensor[(5, 13, 16), float32] */;
    %627 = @func_1515(%621) /* ty=Tensor[(5, 13, 16), float32] */;
    (%622, %623, meta[relay.Constant][33] /* ty=Tensor[(1584), int16] */, %624, meta[relay.Constant][34] /* ty=Tensor[(6, 20), uint64] */, %var_1551, meta[relay.Constant][35] /* ty=Tensor[(84, 22), float32] */, %625, %626, %var_1559, %627)
  };
  %628(%var_1573, %var_1574, %var_1575, %var_1576) /* ty=(Tensor[(8, 12, 15), int64], Tensor[(16, 9, 11), int16], Tensor[(1584), int16], Tensor[(392), bool], Tensor[(6, 20), uint64], Tensor[(392), uint32], Tensor[(84, 22), float32], Tensor[(7, 7, 8), uint32], Tensor[(5, 13, 16), float32], Tensor[(1040), float32], Tensor[(5, 13, 16), float32]) */
}

def @func_6192(%var_6152: Tensor[(7, 7, 8), float32], %var_6177: Tensor[(12), int64], %var_6178: Tensor[(96), int64]) -> (Tensor[(6, 14, 2), bool], Tensor[(84, 2), float64], Tensor[(7, 7, 8), bool], Tensor[(392), float32], Tensor[(6, 2, 8), int64], Tensor[(12), int64], Tensor[(96), int64], Tensor[(840, 480), float64]) {
  %629 = cast(meta[relay.Constant][36] /* ty=Tensor[(84, 2), float64] */, dtype="float64") /* ty=Tensor[(84, 2), float64] */;
  %630 = cast(meta[relay.Constant][36] /* ty=Tensor[(84, 2), float64] */, dtype="float64") /* ty=Tensor[(84, 2), float64] */;
  %631 = cast(meta[relay.Constant][36] /* ty=Tensor[(84, 2), float64] */, dtype="float64") /* ty=Tensor[(84, 2), float64] */;
  %632 = reshape(%629, newshape=[6, 14, 2]) /* ty=Tensor[(6, 14, 2), float64] */;
  %633 = reshape(%630, newshape=[6, 14, 2]) /* ty=Tensor[(6, 14, 2), float64] */;
  %634 = reshape(%631, newshape=[6, 14, 2]) /* ty=Tensor[(6, 14, 2), float64] */;
  %635 = @func_828(%632, %633, %634) /* ty=(Tensor[(6, 14, 2), uint32], Tensor[(6, 14, 2), bool]) */;
  %636 = @func_3847() /* ty=Tensor[(7, 7, 8), float32] */;
  %637 = cast(%var_6152, dtype="bool") /* ty=Tensor[(7, 7, 8), bool] */;
  %638 = shape_of(%636, dtype="int32") /* ty=Tensor[(3), int32] */;
  %639 = cast(%636, dtype="bool") /* ty=Tensor[(7, 7, 8), bool] */;
  %640 = dyn.reshape(%637, %638, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %641 = cast(%636, dtype="uint32") /* ty=Tensor[(7, 7, 8), uint32] */;
  %642 = cast(%636, dtype="uint32") /* ty=Tensor[(7, 7, 8), uint32] */;
  %643 = reshape(%641, newshape=[392]) /* ty=Tensor[(392), uint32] */;
  %644 = reshape(%642, newshape=[392]) /* ty=Tensor[(392), uint32] */;
  %645 = @func_5028(%643, %644) /* ty=(Tensor[(392), float32], Tensor[(392), bool], Tensor[(392), float32]) */;
  %646 = cast(%var_6177, dtype="int64") /* ty=Tensor[(12), int64] */;
  %647 = cast(%var_6178, dtype="int64") /* ty=Tensor[(96), int64] */;
  %648 = reshape(%646, newshape=[6, 2, 1]) /* ty=Tensor[(6, 2, 1), int64] */;
  %649 = reshape(%647, newshape=[6, 2, 8]) /* ty=Tensor[(6, 2, 8), int64] */;
  %650 = @func_5532() /* ty=(Tensor[(16, 5, 6), float32], Tensor[(3, 11, 12), float32], Tensor[(840, 480), float64], Tensor[(840, 480), float32]) */;
  %651 = %635.1;
  %652 = logical_and(%639, %640) /* ty=Tensor[(7, 7, 8), bool] */;
  %653 = %645.0;
  %654 = @func_1810(%648, %649) /* ty=Tensor[(6, 2, 8), int64] */;
  %655 = %650.2;
  (%651, meta[relay.Constant][36] /* ty=Tensor[(84, 2), float64] */, %652, %653, %654, %var_6177, %var_6178, %655)
}

def @func_2970(%var_2956: Tensor[(7, 8, 12), float32], %var_2957: Tensor[(7, 8, 12), float32]) -> (Tensor[(7, 8, 12), float32],) {
  %656 = cast(%var_2957, dtype="float32") /* ty=Tensor[(7, 8, 12), float32] */;
  %657 = shape_of(%var_2956, dtype="int32") /* ty=Tensor[(3), int32] */;
  %658 = cast(%var_2956, dtype="float32") /* ty=Tensor[(7, 8, 12), float32] */;
  %659 = dyn.reshape(%656, %657, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %660 = power(%658, %659) /* ty=Tensor[(7, 8, 12), float32] */;
  (%660,)
}

def @func_4769() -> Tensor[(3, 11, 12), float32] {
  %661 = fn () -> Tensor[(3, 11, 12), float32] {
    @func_2895() /* ty=Tensor[(3, 11, 12), float32] */
  };
  %661() /* ty=Tensor[(3, 11, 12), float32] */
}

def @func_5432(%var_5426: Tensor[(12, 14, 1), float64]) -> (Tensor[(12, 14, 1), float64],) {
  %662 = cast(%var_5426, dtype="float64") /* ty=Tensor[(12, 14, 1), float64] */;
  %663 = cosh(%662) /* ty=Tensor[(12, 14, 1), float64] */;
  (%663,)
}

def @func_2225() -> (Tensor[(13, 9, 9), float32],) {
  %664 = @func_1915() /* ty=Tensor[(13, 9, 9), float64] */;
  %665 = cast(%664, dtype="float32") /* ty=Tensor[(13, 9, 9), float32] */;
  %666 = cos(%665) /* ty=Tensor[(13, 9, 9), float32] */;
  (%666,)
}

def @func_4924() -> (Tensor[(7, 7, 8), float32],) {
  %667 = @func_3847() /* ty=Tensor[(7, 7, 8), float32] */;
  (%667,)
}

def @func_3025(%var_3024: Tensor[(1848), float32]) -> (Tensor[(1848), float32],) {
  %675 = fn (%var_3018: Tensor[(1848), float32]) -> (Tensor[(1848), float32],) {
    %668 = @func_2236() /* ty=(Tensor[(13, 9, 9), float64], Tensor[(7, 7, 8), uint32], Tensor[(120), uint64], Tensor[(392), uint32], Tensor[(1848), float32]) */;
    %669 = %668.4;
    %670 = cast(%var_3018, dtype="float32") /* ty=Tensor[(1848), float32] */;
    %671 = shape_of(%669, dtype="int32") /* ty=Tensor[(1), int32] */;
    %672 = cast(%669, dtype="float32") /* ty=Tensor[(1848), float32] */;
    %673 = dyn.reshape(%670, %671, newshape=[]) /* ty=Tensor[(?), float32] */;
    %674 = multiply(%672, %673) /* ty=Tensor[(1848), float32] */;
    (%674,)
  };
  %675(%var_3024) /* ty=(Tensor[(1848), float32],) */
}

def @func_4004() -> (Tensor[(3, 11, 12), float32], Tensor[(13, 9, 9), float32]) {
  %676 = @func_2482() /* ty=(Tensor[(3, 11, 12), float32], Tensor[(5, 13, 16), float32], Tensor[(4, 260), float32]) */;
  %677 = @func_2225() /* ty=(Tensor[(13, 9, 9), float32],) */;
  %678 = %676.0;
  %679 = %677.0;
  (%678, %679)
}

def @func_4519(%var_4517: Tensor[(4, 15, 15), bool], %var_4518: Tensor[(4, 15, 15), bool]) -> (Tensor[(4, 15, 15), bool], Tensor[(4, 15, 15), uint64], Tensor[(4, 15, 15), float32], Tensor[(6, 14, 2), uint32], Tensor[(168), float64]) {
  %700 = fn (%var_4476: Tensor[(4, 15, 15), bool], %var_4477: Tensor[(4, 15, 15), bool]) -> (Tensor[(4, 15, 15), bool], Tensor[(4, 15, 15), uint64], Tensor[(4, 15, 15), float32], Tensor[(6, 14, 2), uint32], Tensor[(168), float64]) {
    %680 = cast(%var_4477, dtype="bool") /* ty=Tensor[(4, 15, 15), bool] */;
    %681 = shape_of(%var_4476, dtype="int32") /* ty=Tensor[(3), int32] */;
    %682 = cast(%var_4476, dtype="bool") /* ty=Tensor[(4, 15, 15), bool] */;
    %683 = dyn.reshape(%680, %681, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %684 = cast(meta[relay.Constant][37] /* ty=Tensor[(4, 15, 15), bool] */, dtype="uint64") /* ty=Tensor[(4, 15, 15), uint64] */;
    %685 = shape_of(%var_4477, dtype="int32") /* ty=Tensor[(3), int32] */;
    %686 = cast(%var_4477, dtype="uint64") /* ty=Tensor[(4, 15, 15), uint64] */;
    %687 = dyn.reshape(%684, %685, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %688 = cast(%var_4476, dtype="float32") /* ty=Tensor[(4, 15, 15), float32] */;
    %689 = cast(meta[relay.Constant][38] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
    %690 = cast(meta[relay.Constant][38] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
    %691 = cast(meta[relay.Constant][38] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
    %692 = reshape(%689, newshape=[6, 14, 2]) /* ty=Tensor[(6, 14, 2), float64] */;
    %693 = reshape(%690, newshape=[6, 14, 2]) /* ty=Tensor[(6, 14, 2), float64] */;
    %694 = reshape(%691, newshape=[6, 14, 2]) /* ty=Tensor[(6, 14, 2), float64] */;
    %695 = @func_828(%692, %693, %694) /* ty=(Tensor[(6, 14, 2), uint32], Tensor[(6, 14, 2), bool]) */;
    %696 = logical_and(%682, %683) /* ty=Tensor[(4, 15, 15), bool] */;
    %697 = bitwise_xor(%686, %687) /* ty=Tensor[(4, 15, 15), uint64] */;
    %698 = atan(%688) /* ty=Tensor[(4, 15, 15), float32] */;
    %699 = %695.0;
    (%696, %697, %698, %699, meta[relay.Constant][38] /* ty=Tensor[(168), float64] */)
  };
  %700(%var_4517, %var_4518) /* ty=(Tensor[(4, 15, 15), bool], Tensor[(4, 15, 15), uint64], Tensor[(4, 15, 15), float32], Tensor[(6, 14, 2), uint32], Tensor[(168), float64]) */
}

def @func_3848() -> Tensor[(7, 7, 8), float32] {
  %706 = fn () -> Tensor[(7, 7, 8), float32] {
    %701 = @func_2236() /* ty=(Tensor[(13, 9, 9), float64], Tensor[(7, 7, 8), uint32], Tensor[(120), uint64], Tensor[(392), uint32], Tensor[(1848), float32]) */;
    %702 = %701.1;
    %703 = cast(%702, dtype="float32") /* ty=Tensor[(7, 7, 8), float32] */;
    %704 = rsqrt(%703) /* ty=Tensor[(7, 7, 8), float32] */;
    %705 = cast(%704, dtype="float32") /* ty=Tensor[(7, 7, 8), float32] */;
    sqrt(%705) /* ty=Tensor[(7, 7, 8), float32] */
  };
  %706() /* ty=Tensor[(7, 7, 8), float32] */
}

def @func_2527(%var_2525: Tensor[(480), float32], %var_2526: Tensor[(13, 9, 9), float32]) -> (Tensor[(16, 5, 6), float32], Tensor[(480), float32], Tensor[(13, 9, 9), bool]) {
  @func_2523(%var_2525, %var_2526) /* ty=(Tensor[(16, 5, 6), float32], Tensor[(480), float32], Tensor[(13, 9, 9), bool]) */
}

def @func_2483() -> (Tensor[(3, 11, 12), float32], Tensor[(5, 13, 16), float32], Tensor[(4, 260), float32]) {
  %712 = fn () -> (Tensor[(3, 11, 12), float32], Tensor[(5, 13, 16), float32], Tensor[(4, 260), float32]) {
    %707 = cast(meta[relay.Constant][39] /* ty=Tensor[(3, 11, 12), float32] */, dtype="float32") /* ty=Tensor[(3, 11, 12), float32] */;
    %708 = cast(meta[relay.Constant][40] /* ty=Tensor[(4, 260), float32] */, dtype="float32") /* ty=Tensor[(4, 260), float32] */;
    %709 = reshape(%708, newshape=[5, 13, 16]) /* ty=Tensor[(5, 13, 16), float32] */;
    %710 = asin(%707) /* ty=Tensor[(3, 11, 12), float32] */;
    %711 = @func_1515(%709) /* ty=Tensor[(5, 13, 16), float32] */;
    (%710, %711, meta[relay.Constant][40] /* ty=Tensor[(4, 260), float32] */)
  };
  %712() /* ty=(Tensor[(3, 11, 12), float32], Tensor[(5, 13, 16), float32], Tensor[(4, 260), float32]) */
}

def @func_3739() -> (Tensor[(3, 11, 12), float32],) {
  @func_3737() /* ty=(Tensor[(3, 11, 12), float32],) */
}

def @func_2585() -> Tensor[(5, 13, 16), float32] {
  %713 = @func_2482() /* ty=(Tensor[(3, 11, 12), float32], Tensor[(5, 13, 16), float32], Tensor[(4, 260), float32]) */;
  %713.1
}

def @func_4828(%var_4825: Tensor[(5, 13, 16), float32], %var_4826: Tensor[(12), int64], %var_4827: Tensor[(4, 24), int64]) -> (Tensor[(15, 2, 15), float32], Tensor[(5, 13, 16), uint16], Tensor[(6, 2, 8), int64], Tensor[(12), int64], Tensor[(4, 24), int64]) {
  @func_4823(%var_4825, %var_4826, %var_4827) /* ty=(Tensor[(15, 2, 15), float32], Tensor[(5, 13, 16), uint16], Tensor[(6, 2, 8), int64], Tensor[(12), int64], Tensor[(4, 24), int64]) */
}

def @func_655(%var_654: Tensor[(7, 7, 8), uint32]) -> Tensor[(7, 7, 8), uint32] {
  %718 = fn (%var_643: Tensor[(7, 7, 8), uint32]) -> Tensor[(7, 7, 8), uint32] {
    %714 = cast(meta[relay.Constant][41] /* ty=Tensor[(7, 7, 8), uint32] */, dtype="uint32") /* ty=Tensor[(7, 7, 8), uint32] */;
    %715 = shape_of(%var_643, dtype="int32") /* ty=Tensor[(3), int32] */;
    %716 = cast(%var_643, dtype="uint32") /* ty=Tensor[(7, 7, 8), uint32] */;
    %717 = dyn.reshape(%714, %715, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    bitwise_and(%716, %717) /* ty=Tensor[(7, 7, 8), uint32] */
  };
  %718(%var_654) /* ty=Tensor[(7, 7, 8), uint32] */
}

def @func_5577() -> (Tensor[(5, 13, 16), float32],) {
  %720 = fn () -> (Tensor[(5, 13, 16), float32],) {
    %719 = @func_3467() /* ty=Tensor[(5, 13, 16), float32] */;
    (%719,)
  };
  %720() /* ty=(Tensor[(5, 13, 16), float32],) */
}

def @func_4889(%var_4888: Tensor[(16), uint32]) -> (Tensor[(13, 9, 9), float32], Tensor[(16, 1), bool], uint32, Tensor[(16), uint32]) {
  %729 = fn (%var_4879: Tensor[(16), uint32]) -> (Tensor[(13, 9, 9), float32], Tensor[(16, 1), bool], uint32, Tensor[(16), uint32]) {
    %721 = @func_2225() /* ty=(Tensor[(13, 9, 9), float32],) */;
    %722 = cast(meta[relay.Constant][42] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %723 = cast(%var_4879, dtype="uint32") /* ty=Tensor[(16), uint32] */;
    %724 = reshape(%722, newshape=[]) /* ty=uint32 */;
    %725 = reshape(%723, newshape=[16, 1]) /* ty=Tensor[(16, 1), uint32] */;
    %726 = @func_2366(%724, %725) /* ty=(Tensor[(16, 1), bool],) */;
    %727 = %721.0;
    %728 = %726.0;
    (%727, %728, meta[relay.Constant][42] /* ty=uint32 */, %var_4879)
  };
  %729(%var_4888) /* ty=(Tensor[(13, 9, 9), float32], Tensor[(16, 1), bool], uint32, Tensor[(16), uint32]) */
}

def @func_5864(%var_5862: Tensor[(392), uint32], %var_5863: Tensor[(1848), float32]) -> (Tensor[(13, 9, 9), float64], Tensor[(924, 2), float32], Tensor[(120), uint64], Tensor[(392), uint32], Tensor[(1848), float32]) {
  @func_5860(%var_5862, %var_5863) /* ty=(Tensor[(13, 9, 9), float64], Tensor[(924, 2), float32], Tensor[(120), uint64], Tensor[(392), uint32], Tensor[(1848), float32]) */
}

def @func_3902() -> (Tensor[(3, 11, 12), float32], Tensor[(5, 13, 16), float32]) {
  %730 = @func_2895() /* ty=Tensor[(3, 11, 12), float32] */;
  %731 = @func_2585() /* ty=Tensor[(5, 13, 16), float32] */;
  (%730, %731)
}

def @func_1915() -> Tensor[(13, 9, 9), float64] {
  %732 = cast(meta[relay.Constant][43] /* ty=Tensor[(13, 9, 9), float64] */, dtype="float64") /* ty=Tensor[(13, 9, 9), float64] */;
  asinh(%732) /* ty=Tensor[(13, 9, 9), float64] */
}

def @func_833(%var_830: Tensor[(6, 14, 2), float64], %var_831: Tensor[(6, 14, 2), float64], %var_832: Tensor[(6, 14, 2), float64]) -> (Tensor[(6, 14, 2), uint32], Tensor[(6, 14, 2), bool]) {
  @func_828(%var_830, %var_831, %var_832) /* ty=(Tensor[(6, 14, 2), uint32], Tensor[(6, 14, 2), bool]) */
}

def @func_2236() -> (Tensor[(13, 9, 9), float64], Tensor[(7, 7, 8), uint32], Tensor[(120), uint64], Tensor[(392), uint32], Tensor[(1848), float32]) {
  %733 = cast(meta[relay.Constant][44] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %734 = cast(meta[relay.Constant][44] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %735 = cast(meta[relay.Constant][45] /* ty=Tensor[(392), uint32] */, dtype="uint32") /* ty=Tensor[(392), uint32] */;
  %736 = cast(meta[relay.Constant][46] /* ty=Tensor[(1848), float32] */, dtype="float32") /* ty=Tensor[(1848), float32] */;
  %737 = reshape(%733, newshape=[5, 4, 6]) /* ty=Tensor[(5, 4, 6), uint64] */;
  %738 = reshape(%734, newshape=[5, 4, 6]) /* ty=Tensor[(5, 4, 6), uint64] */;
  %739 = reshape(%735, newshape=[392]) /* ty=Tensor[(392), uint32] */;
  %740 = reshape(%736, newshape=[924, 2]) /* ty=Tensor[(924, 2), float32] */;
  %741 = @func_779(%737, %738, %739, %740) /* ty=(Tensor[(5, 4, 6), bool], Tensor[(7, 7, 8), uint32], Tensor[(392), bool], Tensor[(16, 9, 11), float32], Tensor[(924, 2), float32], Tensor[(16, 9, 11), int16]) */;
  %742 = @func_1915() /* ty=Tensor[(13, 9, 9), float64] */;
  %743 = %741.1;
  (%742, %743, meta[relay.Constant][44] /* ty=Tensor[(120), uint64] */, meta[relay.Constant][45] /* ty=Tensor[(392), uint32] */, meta[relay.Constant][46] /* ty=Tensor[(1848), float32] */)
}

def @func_2056(%var_2053: Tensor[(1440), int64], %var_2054: Tensor[(392), uint32], %var_2055: Tensor[(1040), float32]) -> (Tensor[(13, 9, 9), float64], Tensor[(392), uint32], Tensor[(1440), int64], Tensor[(392), uint32], Tensor[(1040), float32]) {
  @func_2051(%var_2053, %var_2054, %var_2055) /* ty=(Tensor[(13, 9, 9), float64], Tensor[(392), uint32], Tensor[(1440), int64], Tensor[(392), uint32], Tensor[(1040), float32]) */
}

def @func_1299(%var_1292: Tensor[(14, 13), float32]) -> (Tensor[(14, 13), float32],) {
  %744 = cast(%var_1292, dtype="float32") /* ty=Tensor[(14, 13), float32] */;
  %745 = log10(%744) /* ty=Tensor[(14, 13), float32] */;
  (%745,)
}

def @func_5167(%var_5165: Tensor[(1053), float32]) -> (Tensor[(480), float32], Tensor[(16, 5, 6), float32], Tensor[(1053), float32]) {
  @func_5164(%var_5165) /* ty=(Tensor[(480), float32], Tensor[(16, 5, 6), float32], Tensor[(1053), float32]) */
}

def @func_1517(%var_1516: Tensor[(5, 13, 16), float32]) -> Tensor[(5, 13, 16), float32] {
  %747 = fn (%var_1505: Tensor[(5, 13, 16), float32]) -> Tensor[(5, 13, 16), float32] {
    %746 = cast(%var_1505, dtype="float32") /* ty=Tensor[(5, 13, 16), float32] */;
    erf(%746) /* ty=Tensor[(5, 13, 16), float32] */
  };
  %747(%var_1516) /* ty=Tensor[(5, 13, 16), float32] */
}

def @func_5987(%var_5982: Tensor[(13, 9, 9), float64]) -> Tensor[(13, 9, 9), int64] {
  %748 = @func_1915() /* ty=Tensor[(13, 9, 9), float64] */;
  %749 = cast(%var_5982, dtype="int64") /* ty=Tensor[(13, 9, 9), int64] */;
  %750 = shape_of(%748, dtype="int32") /* ty=Tensor[(3), int32] */;
  %751 = cast(%748, dtype="int64") /* ty=Tensor[(13, 9, 9), int64] */;
  %752 = dyn.reshape(%749, %750, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_or(%751, %752) /* ty=Tensor[(13, 9, 9), int64] */
}

def @func_4451(%var_4450: int16) -> (Tensor[(2, 10, ?), float64],) {
  %761 = fn (%var_4439: int16) -> (Tensor[(2, 10, ?), float64],) {
    %753 = cast(%var_4439, dtype="bool") /* ty=bool */;
    %754 = cast(meta[relay.Constant][47] /* ty=Tensor[(2, 10, 1), int16] */, dtype="bool") /* ty=Tensor[(2, 10, 1), bool] */;
    %755 = less_equal(%753, %754) /* ty=Tensor[(2, 10, 1), bool] */;
    %756 = cast(meta[relay.Constant][47] /* ty=Tensor[(2, 10, 1), int16] */, dtype="float64") /* ty=Tensor[(2, 10, 1), float64] */;
    %757 = shape_of(%755, dtype="int32") /* ty=Tensor[(3), int32] */;
    %758 = cast(%755, dtype="float64") /* ty=Tensor[(2, 10, 1), float64] */;
    %759 = dyn.reshape(%756, %757, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %760 = floor_mod(%758, %759) /* ty=Tensor[(2, 10, ?), float64] */;
    (%760,)
  };
  %761(%var_4450) /* ty=(Tensor[(2, 10, ?), float64],) */
}

def @func_2741(%var_2739: int64, %var_2740: Tensor[(2, 12, 16), int64]) -> Tensor[(2, 12, 16), bool] {
  %764 = fn (%var_2725: int64, %var_2726: Tensor[(2, 12, 16), int64]) -> Tensor[(2, 12, 16), bool] {
    %762 = cast(%var_2725, dtype="bool") /* ty=bool */;
    %763 = cast(%var_2726, dtype="bool") /* ty=Tensor[(2, 12, 16), bool] */;
    not_equal(%762, %763) /* ty=Tensor[(2, 12, 16), bool] */
  };
  %764(%var_2739, %var_2740) /* ty=Tensor[(2, 12, 16), bool] */
}

def @func_2587() -> Tensor[(5, 13, 16), float32] {
  @func_2585() /* ty=Tensor[(5, 13, 16), float32] */
}

def @func_1729(%var_1719: Tensor[(10, 11, 4), float64], %var_1720: Tensor[(10, 11, 4), float64]) -> Tensor[(10, 11, 4), float64] {
  %765 = cast(%var_1720, dtype="float64") /* ty=Tensor[(10, 11, 4), float64] */;
  %766 = shape_of(%var_1719, dtype="int32") /* ty=Tensor[(3), int32] */;
  %767 = cast(%var_1719, dtype="float64") /* ty=Tensor[(10, 11, 4), float64] */;
  %768 = dyn.reshape(%765, %766, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  multiply(%767, %768) /* ty=Tensor[(10, 11, 4), float64] */
}

def @func_4642() -> (Tensor[(3, 11, 12), float32],) {
  @func_4640() /* ty=(Tensor[(3, 11, 12), float32],) */
}

def @func_2001(%var_1998: Tensor[(4, 3, 6), float64], %var_1999: Tensor[(1040), float32], %var_2000: Tensor[(4, 3, 6), float64]) -> (Tensor[(4, 3, 6), float64], Tensor[(5, 13, 16), float32], Tensor[(1040), float32], Tensor[(4, 3, 6), float32], Tensor[(4, 3, 6), float64]) {
  %790 = fn (%var_1940: Tensor[(4, 3, 6), float64], %var_1958: Tensor[(1040), float32], %var_1985: Tensor[(4, 3, 6), float64]) -> (Tensor[(4, 3, 6), float64], Tensor[(5, 13, 16), float32], Tensor[(1040), float32], Tensor[(4, 3, 6), float32], Tensor[(4, 3, 6), float64]) {
    %769 = cast(%var_1940, dtype="float64") /* ty=Tensor[(4, 3, 6), float64] */;
    %770 = sin(%769) /* ty=Tensor[(4, 3, 6), float64] */;
    %771 = cast(%var_1940, dtype="float64") /* ty=Tensor[(4, 3, 6), float64] */;
    %772 = shape_of(%770, dtype="int32") /* ty=Tensor[(3), int32] */;
    %773 = cast(%770, dtype="float64") /* ty=Tensor[(4, 3, 6), float64] */;
    %774 = dyn.reshape(%771, %772, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %775 = cast(%var_1958, dtype="float32") /* ty=Tensor[(1040), float32] */;
    %776 = reshape(%775, newshape=[5, 13, 16]) /* ty=Tensor[(5, 13, 16), float32] */;
    %777 = cast(%var_1940, dtype="float64") /* ty=Tensor[(4, 3, 6), float64] */;
    %778 = sinh(%777) /* ty=Tensor[(4, 3, 6), float64] */;
    %779 = cast(%var_1985, dtype="uint32") /* ty=Tensor[(4, 3, 6), uint32] */;
    %780 = shape_of(%778, dtype="int32") /* ty=Tensor[(3), int32] */;
    %781 = cast(%778, dtype="uint32") /* ty=Tensor[(4, 3, 6), uint32] */;
    %782 = dyn.reshape(%779, %780, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %783 = left_shift(%781, %782) /* ty=Tensor[(4, 3, 6), uint32] */;
    %784 = cast(%783, dtype="float32") /* ty=Tensor[(4, 3, 6), float32] */;
    %785 = cast(%778, dtype="float64") /* ty=Tensor[(4, 3, 6), float64] */;
    %786 = floor_mod(%773, %774) /* ty=Tensor[(4, 3, 6), float64] */;
    %787 = @func_1515(%776) /* ty=Tensor[(5, 13, 16), float32] */;
    %788 = rsqrt(%784) /* ty=Tensor[(4, 3, 6), float32] */;
    %789 = cos(%785) /* ty=Tensor[(4, 3, 6), float64] */;
    (%786, %787, %var_1958, %788, %789)
  };
  %790(%var_1998, %var_1999, %var_2000) /* ty=(Tensor[(4, 3, 6), float64], Tensor[(5, 13, 16), float32], Tensor[(1040), float32], Tensor[(4, 3, 6), float32], Tensor[(4, 3, 6), float64]) */
}

def @func_4926() -> (Tensor[(7, 7, 8), float32],) {
  @func_4924() /* ty=(Tensor[(7, 7, 8), float32],) */
}

def @func_4823(%var_4813: Tensor[(5, 13, 16), float32], %var_4820: Tensor[(12), int64], %var_4821: Tensor[(4, 24), int64]) -> (Tensor[(15, 2, 15), float32], Tensor[(5, 13, 16), uint16], Tensor[(6, 2, 8), int64], Tensor[(12), int64], Tensor[(4, 24), int64]) {
  %791 = @func_3929() /* ty=(Tensor[(15, 2, 15), float32],) */;
  %792 = @func_3645() /* ty=(Tensor[(5, 13, 16), float32],) */;
  %793 = %792.0;
  %794 = cast(%var_4813, dtype="uint16") /* ty=Tensor[(5, 13, 16), uint16] */;
  %795 = shape_of(%793, dtype="int32") /* ty=Tensor[(3), int32] */;
  %796 = cast(%793, dtype="uint16") /* ty=Tensor[(5, 13, 16), uint16] */;
  %797 = dyn.reshape(%794, %795, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %798 = cast(%var_4820, dtype="int64") /* ty=Tensor[(12), int64] */;
  %799 = cast(%var_4821, dtype="int64") /* ty=Tensor[(4, 24), int64] */;
  %800 = reshape(%798, newshape=[6, 2, 1]) /* ty=Tensor[(6, 2, 1), int64] */;
  %801 = reshape(%799, newshape=[6, 2, 8]) /* ty=Tensor[(6, 2, 8), int64] */;
  %802 = %791.0;
  %803 = left_shift(%796, %797) /* ty=Tensor[(5, 13, 16), uint16] */;
  %804 = @func_1810(%800, %801) /* ty=Tensor[(6, 2, 8), int64] */;
  (%802, %803, %804, %var_4820, %var_4821)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen98/build/output.py:1796: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen98/build/output.py", line 1801, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(28) tvmgen_default_fused_cos_kernel0(double* __restrict__ T_cos, double* __restrict__ placeholder) {
  T_cos[(((int)threadIdx.x))] = cos(placeholder[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

