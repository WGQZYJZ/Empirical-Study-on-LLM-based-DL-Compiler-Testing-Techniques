==========mod==========
#[version = "0.0.5"]
def @func_11197() -> Tensor[(10, 1, 7), bool] {
  %0 = @func_10182() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) */;
  %0.2
}

def @func_7156() -> (Tensor[(10, ?, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) {
  %1 = @func_3684() /* ty=Tensor[(10, 1, 7), bool] */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(10, 1, 7), bool] */, dtype="bool") /* ty=Tensor[(10, 1, 7), bool] */;
  %3 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
  %4 = cast(%1, dtype="bool") /* ty=Tensor[(10, 1, 7), bool] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %6 = @func_3761() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %7 = @func_6126() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(352), uint16], Tensor[(1152), float64]) */;
  %8 = equal(%4, %5) /* ty=Tensor[(10, ?, 7), bool] */;
  %9 = %6.0;
  %10 = @func_5048() /* ty=Tensor[(10, 1, 7), bool] */;
  %11 = %7.0;
  (%8, %9, %10, %11)
}

def @func_9266() -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), float32]) {
  %12 = @func_3961() /* ty=Tensor[(10, 1, 7), bool] */;
  %13 = @func_4751() /* ty=Tensor[(10, 1, 7), float32] */;
  (%12, %13)
}

def @func_11446() -> (Tensor[(10, 1, 7), bool], Tensor[(10, ?, 7), bool], Tensor[(10, 88, 7), int16], Tensor[(660), int64], Tensor[(88), float64], Tensor[(10, 1, 7), bool]) {
  %14 = @func_10448() /* ty=Tensor[(10, 1, 7), bool] */;
  %15 = cast(%14, dtype="bool") /* ty=Tensor[(10, 1, 7), bool] */;
  %16 = reshape(%15, newshape=[10, 1, 7]) /* ty=Tensor[(10, 1, 7), bool] */;
  %17 = @func_3917(%16) /* ty=(Tensor[(10, ?, 7), bool],) */;
  %18 = cast(meta[relay.Constant][1] /* ty=Tensor[(660), int64] */, dtype="int64") /* ty=Tensor[(660), int64] */;
  %19 = cast(meta[relay.Constant][1] /* ty=Tensor[(660), int64] */, dtype="int64") /* ty=Tensor[(660), int64] */;
  %20 = cast(meta[relay.Constant][2] /* ty=Tensor[(88), float64] */, dtype="float64") /* ty=Tensor[(88), float64] */;
  %21 = cast(meta[relay.Constant][1] /* ty=Tensor[(660), int64] */, dtype="int64") /* ty=Tensor[(660), int64] */;
  %22 = reshape(%18, newshape=[5, 11, 12]) /* ty=Tensor[(5, 11, 12), int64] */;
  %23 = reshape(%19, newshape=[5, 11, 12]) /* ty=Tensor[(5, 11, 12), int64] */;
  %24 = reshape(%20, newshape=[88, 1]) /* ty=Tensor[(88, 1), float64] */;
  %25 = reshape(%21, newshape=[5, 11, 12]) /* ty=Tensor[(5, 11, 12), int64] */;
  %26 = @func_6193(%22, %23, %24, %25) /* ty=(Tensor[(5, 11, 12), bool], Tensor[(11, 2, 4), float64], Tensor[(5, 11, 12), bool], Tensor[(10, 88, 7), int16]) */;
  %27 = %17.0;
  %28 = %26.3;
  %29 = @func_10448() /* ty=Tensor[(10, 1, 7), bool] */;
  (%14, %27, %28, meta[relay.Constant][1] /* ty=Tensor[(660), int64] */, meta[relay.Constant][2] /* ty=Tensor[(88), float64] */, %29)
}

def @func_8092() -> Tensor[(352, 5), float64] {
  @func_5433() /* ty=Tensor[(352, 5), float64] */
}

def @func_10091(%var_10030: Tensor[(10, 6, 7), float32], %var_10071: Tensor[(2112), float32]) -> (Tensor[(10, 6, 7), bool], Tensor[(10, 1, 7), float32], Tensor[(10, 1, 7), bool], Tensor[(352, 6), bool], Tensor[(2112), float32]) {
  %30 = @func_8570() /* ty=(Tensor[(10, 1, 7), float32],) */;
  %31 = %30.0;
  %32 = cast(%31, dtype="bool") /* ty=Tensor[(10, 1, 7), bool] */;
  %33 = cast(%var_10030, dtype="bool") /* ty=Tensor[(10, 6, 7), bool] */;
  %34 = @func_6213() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %35 = %34.0;
  %36 = cast(%35, dtype="float32") /* ty=Tensor[(10, 1, 7), float32] */;
  %37 = @func_6473() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(352), uint16], Tensor[(140), float64], Tensor[(10, 1, 7), bool]) */;
  %38 = cast(%var_10071, dtype="float32") /* ty=Tensor[(2112), float32] */;
  %39 = reshape(%38, newshape=[352, 6]) /* ty=Tensor[(352, 6), float32] */;
  %40 = @func_4460(%39) /* ty=(Tensor[(352, 6), bool], Tensor[(352, 6), int16]) */;
  %41 = equal(%32, %33) /* ty=Tensor[(10, 6, 7), bool] */;
  %42 = asin(%36) /* ty=Tensor[(10, 1, 7), float32] */;
  %43 = %37.1;
  %44 = %40.0;
  (%41, %42, %43, %44, %var_10071)
}

def @func_11014() -> Tensor[(10, 1, 7), bool] {
  %45 = @func_6154() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, ?, 7), bool]) */;
  %45.0
}

def @func_8389() -> (Tensor[(10, 1, 7), bool],) {
  %46 = @func_8264() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) */;
  %47 = %46.1;
  (%47,)
}

def @func_5926() -> Tensor[(10, 1, 7), bool] {
  @func_4803() /* ty=Tensor[(10, 1, 7), bool] */
}

def @func_6531() -> (Tensor[(10, 1, 7), bool],) {
  %48 = @func_4803() /* ty=Tensor[(10, 1, 7), bool] */;
  (%48,)
}

def @func_4361(%var_4331: Tensor[(10, 1, 7), float64], %var_4347: Tensor[(128), float32]) -> (Tensor[(10, ?, 7), int32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(10, 2, 7), bool], Tensor[(140), bool]) {
  %49 = @func_3385() /* ty=(Tensor[(10, 1, 7), float64], Tensor[(10, 1, 7), float32]) */;
  %50 = %49.0;
  %51 = cast(%var_4331, dtype="int32") /* ty=Tensor[(10, 1, 7), int32] */;
  %52 = shape_of(%50, dtype="int32") /* ty=Tensor[(3), int32] */;
  %53 = cast(%50, dtype="int32") /* ty=Tensor[(10, 1, 7), int32] */;
  %54 = dyn.reshape(%51, %52, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %55 = cast(%var_4347, dtype="float32") /* ty=Tensor[(128), float32] */;
  %56 = reshape(%55, newshape=[128]) /* ty=Tensor[(128), float32] */;
  %57 = @func_3718(%56) /* ty=(Tensor[(10, 1, 7), bool], Tensor[(8, 6, 16), float32], Tensor[(128), float32]) */;
  %58 = cast(meta[relay.Constant][3] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
  %59 = reshape(%58, newshape=[10, 2, 7]) /* ty=Tensor[(10, 2, 7), bool] */;
  %60 = bitwise_or(%53, %54) /* ty=Tensor[(10, ?, 7), int32] */;
  %61 = %57.2;
  %62 = @func_4067(%59) /* ty=Tensor[(10, 2, 7), bool] */;
  (%60, %61, %var_4347, %62, meta[relay.Constant][3] /* ty=Tensor[(140), bool] */)
}

def @func_12087() -> Tensor[(352, 5), float64] {
  %63 = @func_4878() /* ty=(Tensor[(10, 1, 7), float32], Tensor[(352, 5), bool]) */;
  %64 = %63.1;
  %65 = cast(%64, dtype="float64") /* ty=Tensor[(352, 5), float64] */;
  rsqrt(%65) /* ty=Tensor[(352, 5), float64] */
}

def @func_11982() -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) {
  %66 = @func_11697() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(352, 5), float64]) */;
  %67 = @func_6071() /* ty=Tensor[(10, 1, 7), bool] */;
  %68 = %66.1;
  (%67, %68)
}

def @func_9497(%var_9480: Tensor[(32, 4), float32]) -> (Tensor[(10, 1, 7), bool], Tensor[(8, 10, 8), float64], Tensor[(320, 2), float64], Tensor[(32, 4), float32], Tensor[(8, 6, 16), float64]) {
  %69 = cast(meta[relay.Constant][4] /* ty=Tensor[(320, 2), float64] */, dtype="float64") /* ty=Tensor[(320, 2), float64] */;
  %70 = reshape(%69, newshape=[8, 10, 8]) /* ty=Tensor[(8, 10, 8), float64] */;
  %71 = @func_9328(%70) /* ty=(Tensor[(8, 10, 8), float64], Tensor[(8, 10, 8), float32]) */;
  %72 = cast(%var_9480, dtype="float32") /* ty=Tensor[(32, 4), float32] */;
  %73 = reshape(%72, newshape=[128]) /* ty=Tensor[(128), float32] */;
  %74 = @func_3718(%73) /* ty=(Tensor[(10, 1, 7), bool], Tensor[(8, 6, 16), float32], Tensor[(128), float32]) */;
  %75 = %74.1;
  %76 = cast(%75, dtype="float64") /* ty=Tensor[(8, 6, 16), float64] */;
  %77 = @func_3961() /* ty=Tensor[(10, 1, 7), bool] */;
  %78 = %71.0;
  %79 = atan(%76) /* ty=Tensor[(8, 6, 16), float64] */;
  (%77, %78, meta[relay.Constant][4] /* ty=Tensor[(320, 2), float64] */, %var_9480, %79)
}

def @func_8877() -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) {
  %80 = @func_6597() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %81 = @func_3017() /* ty=Tensor[(10, 1, 7), bool] */;
  %82 = %80.0;
  (%81, %82)
}

def @func_8570() -> (Tensor[(10, 1, 7), float32],) {
  %83 = @func_5863() /* ty=(Tensor[(10, 1, 7), float32], Tensor[(10, 1, 7), bool]) */;
  %84 = %83.0;
  (%84,)
}

def @func_11707() -> Tensor[(10, 1, 7), bool] {
  %85 = @func_10755() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 2, 7), int8], Tensor[(140), bool], Tensor[(10, 1, 7), bool]) */;
  %85.3
}

def @func_5263() -> (Tensor[(10, 1, 7), float32], Tensor[(352, 5), bool]) {
  %86 = @func_3498() /* ty=(Tensor[(10, 1, 7), float32],) */;
  %87 = @func_4878() /* ty=(Tensor[(10, 1, 7), float32], Tensor[(352, 5), bool]) */;
  %88 = %86.0;
  %89 = %87.1;
  (%88, %89)
}

def @func_10423() -> (Tensor[(352, 5), bool], Tensor[(10, 1, 7), bool]) {
  %90 = @func_6731() /* ty=(Tensor[(352, 5), bool],) */;
  %91 = %90.0;
  %92 = @func_7135() /* ty=Tensor[(10, 1, 7), bool] */;
  (%91, %92)
}

def @func_3761() -> (Tensor[(10, 1, 7), bool],) {
  %93 = @func_3017() /* ty=Tensor[(10, 1, 7), bool] */;
  (%93,)
}

def @func_6126() -> (Tensor[(10, 1, 7), bool], Tensor[(352), uint16], Tensor[(1152), float64]) {
  %94 = cast(meta[relay.Constant][5] /* ty=Tensor[(1152), float64] */, dtype="float64") /* ty=Tensor[(1152), float64] */;
  %95 = reshape(%94, newshape=[1152]) /* ty=Tensor[(1152), float64] */;
  %96 = @func_2892(%95) /* ty=(Tensor[(10, 1, 7), bool], Tensor[(352), uint16], Tensor[(1152), float64]) */;
  %97 = @func_3017() /* ty=Tensor[(10, 1, 7), bool] */;
  %98 = %96.1;
  (%97, %98, meta[relay.Constant][5] /* ty=Tensor[(1152), float64] */)
}

def @func_8264() -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) {
  %99 = @func_6597() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %100 = @func_6779() /* ty=Tensor[(10, 1, 7), bool] */;
  %101 = @func_3017() /* ty=Tensor[(10, 1, 7), bool] */;
  %102 = %99.0;
  (%100, %101, %102)
}

def @func_10359(%var_10350: Tensor[(882), bool]) -> (Tensor[(10, 1, 7), bool], Tensor[(14, 9, 7), bool], Tensor[(882), bool]) {
  %103 = @func_8450() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %104 = cast(%var_10350, dtype="bool") /* ty=Tensor[(882), bool] */;
  %105 = reshape(%104, newshape=[14, 9, 7]) /* ty=Tensor[(14, 9, 7), bool] */;
  %106 = @func_7362(%105) /* ty=(Tensor[(14, 9, 7), bool],) */;
  %107 = %103.0;
  %108 = %106.0;
  (%107, %108, %var_10350)
}

def @func_6597() -> (Tensor[(10, 1, 7), bool],) {
  %109 = @func_4803() /* ty=Tensor[(10, 1, 7), bool] */;
  (%109,)
}

def @func_11851(%var_11841: Tensor[(10, 4, 1), int8]) -> Tensor[(10, 4, 6), int8] {
  %110 = cast(%var_11841, dtype="int8") /* ty=Tensor[(10, 4, 1), int8] */;
  %111 = cast(meta[relay.Constant][6] /* ty=Tensor[(10, 4, 6), int8] */, dtype="int8") /* ty=Tensor[(10, 4, 6), int8] */;
  bitwise_and(%110, %111) /* ty=Tensor[(10, 4, 6), int8] */
}

def @func_9936(%var_9927: Tensor[(140), bool]) -> (Tensor[(352, 5), bool], Tensor[(4, 11, 8), uint16], Tensor[(352), uint16], Tensor[(140), bool]) {
  %112 = @func_7461() /* ty=(Tensor[(352, 5), bool],) */;
  %113 = cast(meta[relay.Constant][7] /* ty=Tensor[(352), uint16] */, dtype="uint16") /* ty=Tensor[(352), uint16] */;
  %114 = cast(%var_9927, dtype="bool") /* ty=Tensor[(140), bool] */;
  %115 = reshape(%113, newshape=[352]) /* ty=Tensor[(352), uint16] */;
  %116 = reshape(%114, newshape=[140]) /* ty=Tensor[(140), bool] */;
  %117 = @func_7446(%115, %116) /* ty=(Tensor[(10, 1, 7), float32], Tensor[(4, 11, 8), uint16], Tensor[(352), uint16], Tensor[(10, ?, 7), bool], Tensor[(140), bool]) */;
  %118 = %112.0;
  %119 = %117.1;
  (%118, %119, meta[relay.Constant][7] /* ty=Tensor[(352), uint16] */, %var_9927)
}

def @func_7696(%var_7658: Tensor[(140), bool], %var_7659: Tensor[(49, 10), bool], %var_7671: Tensor[(88), float64], %var_7682: Tensor[(660), int64]) -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(490), bool], Tensor[(140), bool], Tensor[(49, 10), bool], Tensor[(11, 2, 4), float32], Tensor[(88), float64], Tensor[(5, 11, 12), bool], Tensor[(660), int64]) {
  %120 = @func_2848() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), float32]) */;
  %121 = cast(%var_7658, dtype="bool") /* ty=Tensor[(140), bool] */;
  %122 = cast(%var_7659, dtype="bool") /* ty=Tensor[(49, 10), bool] */;
  %123 = reshape(%121, newshape=[140]) /* ty=Tensor[(140), bool] */;
  %124 = reshape(%122, newshape=[490]) /* ty=Tensor[(490), bool] */;
  %125 = @func_6370(%123, %124) /* ty=(Tensor[(10, ?, 7), bool], Tensor[(140), bool], Tensor[(1, 1, 9), uint64], Tensor[(10, 1, 7), bool], Tensor[(490), bool]) */;
  %126 = cast(%var_7671, dtype="float64") /* ty=Tensor[(88), float64] */;
  %127 = reshape(%126, newshape=[11, 2, 4]) /* ty=Tensor[(11, 2, 4), float64] */;
  %128 = @func_1748(%127) /* ty=(Tensor[(11, 2, 4), float64], Tensor[(11, 2, 4), float32]) */;
  %129 = cast(%var_7682, dtype="int64") /* ty=Tensor[(660), int64] */;
  %130 = cast(%var_7682, dtype="int64") /* ty=Tensor[(660), int64] */;
  %131 = cast(%var_7671, dtype="float64") /* ty=Tensor[(88), float64] */;
  %132 = cast(%var_7682, dtype="int64") /* ty=Tensor[(660), int64] */;
  %133 = reshape(%129, newshape=[5, 11, 12]) /* ty=Tensor[(5, 11, 12), int64] */;
  %134 = reshape(%130, newshape=[5, 11, 12]) /* ty=Tensor[(5, 11, 12), int64] */;
  %135 = reshape(%131, newshape=[88, 1]) /* ty=Tensor[(88, 1), float64] */;
  %136 = reshape(%132, newshape=[5, 11, 12]) /* ty=Tensor[(5, 11, 12), int64] */;
  %137 = @func_6193(%133, %134, %135, %136) /* ty=(Tensor[(5, 11, 12), bool], Tensor[(11, 2, 4), float64], Tensor[(5, 11, 12), bool], Tensor[(10, 88, 7), int16]) */;
  %138 = @func_3228() /* ty=Tensor[(10, 1, 7), bool] */;
  %139 = %120.0;
  %140 = %125.4;
  %141 = %128.1;
  %142 = %137.2;
  (%138, %139, %140, %var_7658, %var_7659, %141, %var_7671, %142, %var_7682)
}

def @func_7135() -> Tensor[(10, 1, 7), bool] {
  %143 = @func_5550() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %143.0
}

def @func_6706(%var_6697: Tensor[(288, 4), float64]) -> (Tensor[(10, ?, 7), int16], Tensor[(288, 4), int16]) {
  %144 = @func_5652() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(352, 5), bool], Tensor[(10, 1, 7), bool], Tensor[(288, 4), float64], Tensor[(10, 1, 7), bool], Tensor[(352, 5), float64], Tensor[(10, ?, 7), bool], Tensor[(352, 5), float64]) */;
  %145 = %144.3;
  %146 = cast(%var_6697, dtype="int16") /* ty=Tensor[(288, 4), int16] */;
  %147 = shape_of(%145, dtype="int32") /* ty=Tensor[(2), int32] */;
  %148 = cast(%145, dtype="int16") /* ty=Tensor[(288, 4), int16] */;
  %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %150 = @func_5743() /* ty=Tensor[(10, ?, 7), int16] */;
  %151 = bitwise_and(%148, %149) /* ty=Tensor[(288, 4), int16] */;
  (%150, %151)
}

def @func_3640() -> Tensor[(10, 1, 7), bool] {
  @func_3228() /* ty=Tensor[(10, 1, 7), bool] */
}

def @func_6370(%var_6335: Tensor[(140), bool], %var_6365: Tensor[(490), bool]) -> (Tensor[(10, ?, 7), bool], Tensor[(140), bool], Tensor[(1, 1, 9), uint64], Tensor[(10, 1, 7), bool], Tensor[(490), bool]) {
  %152 = cast(%var_6335, dtype="bool") /* ty=Tensor[(140), bool] */;
  %153 = reshape(%152, newshape=[5, 28]) /* ty=Tensor[(5, 28), bool] */;
  %154 = @func_4991(%153) /* ty=(Tensor[(10, ?, 7), bool], Tensor[(10, 1, 7), float64], Tensor[(10, ?, 7), bool], Tensor[(5, 28), bool]) */;
  %155 = cast(-7.76439f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %156 = cast(meta[relay.Constant][8] /* ty=Tensor[(1, 1, 9), float32] */, dtype="float32") /* ty=Tensor[(1, 1, 9), float32] */;
  %157 = power(%155, %156) /* ty=Tensor[(1, 1, 9), float32] */;
  %158 = cast(%157, dtype="uint64") /* ty=Tensor[(1, 1, 9), uint64] */;
  %159 = cast(-7.76439f /* ty=float32 */, dtype="uint64") /* ty=uint64 */;
  %160 = cast(%var_6365, dtype="bool") /* ty=Tensor[(490), bool] */;
  %161 = reshape(%160, newshape=[10, 7, 7]) /* ty=Tensor[(10, 7, 7), bool] */;
  %162 = @func_3171(%161) /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), float32], Tensor[(10, 7, 7), int64], Tensor[(10, 1, 7), bool]) */;
  %163 = %154.2;
  %164 = right_shift(%158, %159) /* ty=Tensor[(1, 1, 9), uint64] */;
  %165 = %162.3;
  (%163, %var_6335, %164, %165, %var_6365)
}

def @func_9328(%var_9315: Tensor[(8, 10, 8), float64]) -> (Tensor[(8, 10, 8), float64], Tensor[(8, 10, 8), float32]) {
  %166 = cast(%var_9315, dtype="float64") /* ty=Tensor[(8, 10, 8), float64] */;
  %167 = cast(%var_9315, dtype="float32") /* ty=Tensor[(8, 10, 8), float32] */;
  %168 = sin(%166) /* ty=Tensor[(8, 10, 8), float64] */;
  %169 = acos(%167) /* ty=Tensor[(8, 10, 8), float32] */;
  (%168, %169)
}

def @func_9200() -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) {
  %170 = @func_6007() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %171 = @func_8450() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %172 = %170.0;
  %173 = %171.0;
  (%172, %173)
}

def @func_9123(%var_9118: Tensor[(48), uint16]) -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], uint16, Tensor[(48), uint16]) {
  %174 = @func_6597() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %175 = cast(meta[relay.Constant][9] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %176 = cast(%var_9118, dtype="uint16") /* ty=Tensor[(48), uint16] */;
  %177 = reshape(%175, newshape=[]) /* ty=uint16 */;
  %178 = reshape(%176, newshape=[16, 3, 1]) /* ty=Tensor[(16, 3, 1), uint16] */;
  %179 = @func_7772(%177, %178) /* ty=(Tensor[(16, 3, ?), float64], Tensor[(10, 1, 7), bool]) */;
  %180 = %174.0;
  %181 = %179.1;
  (%180, %181, meta[relay.Constant][9] /* ty=uint16 */, %var_9118)
}

def @func_9670(%var_9650: Tensor[(10, 2, 7), bool]) -> (Tensor[(10, 2, 7), int8],) {
  %182 = @func_6940() /* ty=Tensor[(10, 1, 7), bool] */;
  %183 = cast(%182, dtype="int8") /* ty=Tensor[(10, 1, 7), int8] */;
  %184 = cast(%var_9650, dtype="int8") /* ty=Tensor[(10, 2, 7), int8] */;
  %185 = bitwise_xor(%183, %184) /* ty=Tensor[(10, 2, 7), int8] */;
  (%185,)
}

def @func_9057() -> (Tensor[(4, 11, 8), uint16], Tensor[(10, 1, 7), bool], Tensor[(140), bool], Tensor[(10, 1, 7), bool]) {
  %186 = @func_6643() /* ty=(Tensor[(4, 11, 8), uint16],) */;
  %187 = %186.0;
  %188 = cast(%187, dtype="uint16") /* ty=Tensor[(4, 11, 8), uint16] */;
  %189 = cast(meta[relay.Constant][10] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
  %190 = reshape(%188, newshape=[352]) /* ty=Tensor[(352), uint16] */;
  %191 = reshape(%189, newshape=[1, 140]) /* ty=Tensor[(1, 140), bool] */;
  %192 = @func_8134(%190, %191) /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), float32], Tensor[(352), uint16], Tensor[(1, 140), bool]) */;
  %193 = %192.0;
  %194 = @func_5926() /* ty=Tensor[(10, 1, 7), bool] */;
  (%187, %193, meta[relay.Constant][10] /* ty=Tensor[(140), bool] */, %194)
}

def @func_3917(%var_3909: Tensor[(10, 1, 7), bool]) -> (Tensor[(10, ?, 7), bool],) {
  %195 = @func_3836() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %196 = %195.0;
  %197 = cast(%var_3909, dtype="bool") /* ty=Tensor[(10, 1, 7), bool] */;
  %198 = shape_of(%196, dtype="int32") /* ty=Tensor[(3), int32] */;
  %199 = cast(%196, dtype="bool") /* ty=Tensor[(10, 1, 7), bool] */;
  %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %201 = logical_or(%199, %200) /* ty=Tensor[(10, ?, 7), bool] */;
  (%201,)
}

def @func_7630() -> Tensor[(10, 1, 7), bool] {
  @func_3640() /* ty=Tensor[(10, 1, 7), bool] */
}

def @func_6761(%var_6756: Tensor[(11, 8, 9), float32]) -> (Tensor[(11, 8, 9), float32],) {
  %202 = cast(%var_6756, dtype="float32") /* ty=Tensor[(11, 8, 9), float32] */;
  %203 = sinh(%202) /* ty=Tensor[(11, 8, 9), float32] */;
  (%203,)
}

def @func_10705() -> Tensor[(10, 1, 7), bool] {
  @func_6779() /* ty=Tensor[(10, 1, 7), bool] */
}

def @func_11594() -> Tensor[(9, ?, 12), uint8] {
  %204 = @func_8977() /* ty=(Tensor[(9, ?, 12), uint8],) */;
  %204.0
}

def @func_5863() -> (Tensor[(10, 1, 7), float32], Tensor[(10, 1, 7), bool]) {
  %205 = @func_5679() /* ty=Tensor[(10, 1, 7), float32] */;
  %206 = @func_4744() /* ty=Tensor[(10, 1, 7), bool] */;
  (%205, %206)
}

def @func_8521(%var_8506: Tensor[(352, 5), float64]) -> (Tensor[(352, 5), float64], Tensor[(10, 1, 7), float32]) {
  %207 = @func_8092() /* ty=Tensor[(352, 5), float64] */;
  %208 = cast(%var_8506, dtype="int32") /* ty=Tensor[(352, 5), int32] */;
  %209 = shape_of(%207, dtype="int32") /* ty=Tensor[(2), int32] */;
  %210 = cast(%207, dtype="int32") /* ty=Tensor[(352, 5), int32] */;
  %211 = dyn.reshape(%208, %209, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %212 = left_shift(%210, %211) /* ty=Tensor[(352, 5), int32] */;
  %213 = cast(%212, dtype="float64") /* ty=Tensor[(352, 5), float64] */;
  %214 = shape_of(%var_8506, dtype="int32") /* ty=Tensor[(2), int32] */;
  %215 = cast(%var_8506, dtype="float64") /* ty=Tensor[(352, 5), float64] */;
  %216 = dyn.reshape(%213, %214, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %217 = power(%215, %216) /* ty=Tensor[(352, 5), float64] */;
  %218 = @func_4751() /* ty=Tensor[(10, 1, 7), float32] */;
  (%217, %218)
}

def @func_8647(%var_8629: Tensor[(490), bool], %var_8630: Tensor[(88), float64], %var_8639: Tensor[(140), bool]) -> (Tensor[(352, 5), float64], Tensor[(4, 11, 8), uint16], Tensor[(490), bool], Tensor[(490), bool], Tensor[(88), float64], Tensor[(4, 11, 8), uint16], Tensor[(4, 11, 8), float64], Tensor[(140), bool]) {
  %219 = @func_7284() /* ty=(Tensor[(352, 5), float64],) */;
  %220 = @func_2773() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(4, 11, 8), uint16], Tensor[(352, 1), uint16]) */;
  %221 = cast(%var_8629, dtype="bool") /* ty=Tensor[(490), bool] */;
  %222 = cast(%var_8630, dtype="float64") /* ty=Tensor[(88), float64] */;
  %223 = reshape(%221, newshape=[490]) /* ty=Tensor[(490), bool] */;
  %224 = reshape(%222, newshape=[88, 1]) /* ty=Tensor[(88, 1), float64] */;
  %225 = @func_3337(%223, %224) /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(490), bool], Tensor[(11, 2, 4), float64], Tensor[(88, 1), float64]) */;
  %226 = @func_2773() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(4, 11, 8), uint16], Tensor[(352, 1), uint16]) */;
  %227 = cast(%var_8639, dtype="bool") /* ty=Tensor[(140), bool] */;
  %228 = reshape(%227, newshape=[140]) /* ty=Tensor[(140), bool] */;
  %229 = @func_7966(%228) /* ty=(Tensor[(10, 2, 7), bool], Tensor[(140), bool], Tensor[(4, 11, 8), float64]) */;
  %230 = %219.0;
  %231 = %220.1;
  %232 = %225.2;
  %233 = %226.1;
  %234 = %229.2;
  (%230, %231, %232, %var_8629, %var_8630, %233, %234, %var_8639)
}

def @func_3498() -> (Tensor[(10, 1, 7), float32],) {
  %235 = @func_3385() /* ty=(Tensor[(10, 1, 7), float64], Tensor[(10, 1, 7), float32]) */;
  %236 = %235.1;
  (%236,)
}

def @func_3836() -> (Tensor[(10, 1, 7), bool],) {
  %237 = @func_3640() /* ty=Tensor[(10, 1, 7), bool] */;
  (%237,)
}

def @func_9348() -> Tensor[(4, 11, 8), uint16] {
  %238 = @func_6643() /* ty=(Tensor[(4, 11, 8), uint16],) */;
  %238.0
}

def @func_12276() -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(140), bool], Tensor[(10, 1, 7), bool], Tensor[(9, ?, 12), bool], Tensor[(352, 5), float64]) {
  %239 = @func_8790() /* ty=(Tensor[(352, 6), int16], Tensor[(10, 1, 7), bool]) */;
  %240 = @func_8977() /* ty=(Tensor[(9, ?, 12), uint8],) */;
  %241 = %240.0;
  %242 = cast(%241, dtype="float64") /* ty=Tensor[(9, ?, 12), float64] */;
  %243 = acosh(%242) /* ty=Tensor[(9, ?, 12), float64] */;
  %244 = cast(%241, dtype="uint32") /* ty=Tensor[(9, ?, 12), uint32] */;
  %245 = shape_of(%243, dtype="int32") /* ty=Tensor[(3), int32] */;
  %246 = cast(%243, dtype="uint32") /* ty=Tensor[(9, ?, 12), uint32] */;
  %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %248 = left_shift(%246, %247) /* ty=Tensor[(9, ?, 12), uint32] */;
  %249 = cast(%248, dtype="bool") /* ty=Tensor[(9, ?, 12), bool] */;
  %250 = shape_of(%243, dtype="int32") /* ty=Tensor[(3), int32] */;
  %251 = cast(%243, dtype="bool") /* ty=Tensor[(9, ?, 12), bool] */;
  %252 = dyn.reshape(%249, %250, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %253 = @func_4622() /* ty=(Tensor[(352, 5), bool],) */;
  %254 = %253.0;
  %255 = cast(%254, dtype="float64") /* ty=Tensor[(352, 5), float64] */;
  %256 = log(%255) /* ty=Tensor[(352, 5), float64] */;
  %257 = cast(%256, dtype="float64") /* ty=Tensor[(352, 5), float64] */;
  %258 = %239.1;
  %259 = @func_4744() /* ty=Tensor[(10, 1, 7), bool] */;
  %260 = @func_11141() /* ty=Tensor[(140), bool] */;
  %261 = @func_11151() /* ty=Tensor[(10, 1, 7), bool] */;
  %262 = logical_or(%251, %252) /* ty=Tensor[(9, ?, 12), bool] */;
  %263 = sin(%257) /* ty=Tensor[(352, 5), float64] */;
  (%258, %259, %260, %261, %262, %263)
}

def @func_5652() -> (Tensor[(10, 1, 7), bool], Tensor[(352, 5), bool], Tensor[(10, 1, 7), bool], Tensor[(288, 4), float64], Tensor[(10, 1, 7), bool], Tensor[(352, 5), float64], Tensor[(10, ?, 7), bool], Tensor[(352, 5), float64]) {
  %264 = @func_3836() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %265 = @func_4622() /* ty=(Tensor[(352, 5), bool],) */;
  %266 = cast(meta[relay.Constant][11] /* ty=Tensor[(288, 4), float64] */, dtype="float64") /* ty=Tensor[(288, 4), float64] */;
  %267 = reshape(%266, newshape=[1152]) /* ty=Tensor[(1152), float64] */;
  %268 = @func_2892(%267) /* ty=(Tensor[(10, 1, 7), bool], Tensor[(352), uint16], Tensor[(1152), float64]) */;
  %269 = @func_5550() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %270 = %269.0;
  %271 = cast(%270, dtype="bool") /* ty=Tensor[(10, 1, 7), bool] */;
  %272 = reshape(%271, newshape=[10, 1, 7]) /* ty=Tensor[(10, 1, 7), bool] */;
  %273 = @func_3917(%272) /* ty=(Tensor[(10, ?, 7), bool],) */;
  %274 = %264.0;
  %275 = %265.0;
  %276 = %268.0;
  %277 = @func_5433() /* ty=Tensor[(352, 5), float64] */;
  %278 = %273.0;
  %279 = @func_5433() /* ty=Tensor[(352, 5), float64] */;
  (%274, %275, %276, meta[relay.Constant][11] /* ty=Tensor[(288, 4), float64] */, %270, %277, %278, %279)
}

def @func_6007() -> (Tensor[(10, 1, 7), bool],) {
  %280 = @func_5652() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(352, 5), bool], Tensor[(10, 1, 7), bool], Tensor[(288, 4), float64], Tensor[(10, 1, 7), bool], Tensor[(352, 5), float64], Tensor[(10, ?, 7), bool], Tensor[(352, 5), float64]) */;
  %281 = %280.0;
  (%281,)
}

def @func_7966(%var_7937: Tensor[(140), bool]) -> (Tensor[(10, 2, 7), bool], Tensor[(140), bool], Tensor[(4, 11, 8), float64]) {
  %282 = cast(%var_7937, dtype="bool") /* ty=Tensor[(140), bool] */;
  %283 = reshape(%282, newshape=[10, 2, 7]) /* ty=Tensor[(10, 2, 7), bool] */;
  %284 = @func_5044() /* ty=(Tensor[(4, 11, 8), uint16],) */;
  %285 = %284.0;
  %286 = cast(%285, dtype="uint16") /* ty=Tensor[(4, 11, 8), uint16] */;
  %287 = cast(%285, dtype="uint16") /* ty=Tensor[(4, 11, 8), uint16] */;
  %288 = reshape(%286, newshape=[4, 11, 8]) /* ty=Tensor[(4, 11, 8), uint16] */;
  %289 = reshape(%287, newshape=[4, 11, 8]) /* ty=Tensor[(4, 11, 8), uint16] */;
  %290 = @func_566(%288, %289) /* ty=Tensor[(4, 11, 8), uint16] */;
  %291 = cast(%290, dtype="float64") /* ty=Tensor[(4, 11, 8), float64] */;
  %292 = shape_of(%285, dtype="int32") /* ty=Tensor[(3), int32] */;
  %293 = cast(%285, dtype="float64") /* ty=Tensor[(4, 11, 8), float64] */;
  %294 = dyn.reshape(%291, %292, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %295 = @func_4067(%283) /* ty=Tensor[(10, 2, 7), bool] */;
  %296 = divide(%293, %294) /* ty=Tensor[(4, 11, 8), float64] */;
  (%295, %var_7937, %296)
}

def @func_8450() -> (Tensor[(10, 1, 7), bool],) {
  %297 = @func_2698() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %298 = %297.0;
  (%298,)
}

def @func_9528() -> (Tensor[(10, 1, 7), float64], Tensor[(140), bool], Tensor[(140), bool]) {
  %299 = @func_3385() /* ty=(Tensor[(10, 1, 7), float64], Tensor[(10, 1, 7), float32]) */;
  %300 = cast(meta[relay.Constant][12] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
  %301 = reshape(%300, newshape=[140]) /* ty=Tensor[(140), bool] */;
  %302 = @func_7966(%301) /* ty=(Tensor[(10, 2, 7), bool], Tensor[(140), bool], Tensor[(4, 11, 8), float64]) */;
  %303 = %299.0;
  %304 = %302.1;
  (%303, %304, meta[relay.Constant][12] /* ty=Tensor[(140), bool] */)
}

def @func_6833(%var_6820: Tensor[(490), bool], %var_6821: Tensor[(88, 1), float64]) -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(490), bool], Tensor[(88, 1), float64], Tensor[(?, 352), float64]) {
  %305 = @func_6213() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %306 = cast(%var_6820, dtype="bool") /* ty=Tensor[(490), bool] */;
  %307 = cast(%var_6821, dtype="float64") /* ty=Tensor[(88, 1), float64] */;
  %308 = reshape(%306, newshape=[490]) /* ty=Tensor[(490), bool] */;
  %309 = reshape(%307, newshape=[88, 1]) /* ty=Tensor[(88, 1), float64] */;
  %310 = @func_3337(%308, %309) /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(490), bool], Tensor[(11, 2, 4), float64], Tensor[(88, 1), float64]) */;
  %311 = cast(meta[relay.Constant][13] /* ty=Tensor[(1, 352), uint16] */, dtype="uint16") /* ty=Tensor[(1, 352), uint16] */;
  %312 = cast(meta[relay.Constant][13] /* ty=Tensor[(1, 352), uint16] */, dtype="uint16") /* ty=Tensor[(1, 352), uint16] */;
  %313 = reshape(%311, newshape=[4, 11, 8]) /* ty=Tensor[(4, 11, 8), uint16] */;
  %314 = reshape(%312, newshape=[4, 11, 8]) /* ty=Tensor[(4, 11, 8), uint16] */;
  %315 = @func_566(%313, %314) /* ty=Tensor[(4, 11, 8), uint16] */;
  %316 = cast(%315, dtype="int8") /* ty=Tensor[(4, 11, 8), int8] */;
  %317 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(1, 352), uint16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %318 = cast(meta[relay.Constant][13] /* ty=Tensor[(1, 352), uint16] */, dtype="int8") /* ty=Tensor[(1, 352), int8] */;
  %319 = dyn.reshape(%316, %317, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %320 = right_shift(%318, %319) /* ty=Tensor[(?, 352), int8] */;
  %321 = cast(%320, dtype="float64") /* ty=Tensor[(?, 352), float64] */;
  %322 = %305.0;
  %323 = @func_5926() /* ty=Tensor[(10, 1, 7), bool] */;
  %324 = %310.0;
  %325 = sin(%321) /* ty=Tensor[(?, 352), float64] */;
  (%322, %323, %324, %var_6820, %var_6821, %325)
}

def @func_10448() -> Tensor[(10, 1, 7), bool] {
  @func_8703() /* ty=Tensor[(10, 1, 7), bool] */
}

def @func_6940() -> Tensor[(10, 1, 7), bool] {
  %326 = @func_6007() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %326.0
}

def @func_5044() -> (Tensor[(4, 11, 8), uint16],) {
  %327 = @func_2773() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(4, 11, 8), uint16], Tensor[(352, 1), uint16]) */;
  %328 = %327.1;
  (%328,)
}

def @func_566(%var_561: Tensor[(4, 11, 8), uint16], %var_562: Tensor[(4, 11, 8), uint16]) -> Tensor[(4, 11, 8), uint16] {
  %329 = cast(%var_562, dtype="uint16") /* ty=Tensor[(4, 11, 8), uint16] */;
  %330 = shape_of(%var_561, dtype="int32") /* ty=Tensor[(3), int32] */;
  %331 = cast(%var_561, dtype="uint16") /* ty=Tensor[(4, 11, 8), uint16] */;
  %332 = dyn.reshape(%329, %330, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  add(%331, %332) /* ty=Tensor[(4, 11, 8), uint16] */
}

def @func_4460(%var_4449: Tensor[(352, 6), float32]) -> (Tensor[(352, 6), bool], Tensor[(352, 6), int16]) {
  %333 = @func_4248() /* ty=(Tensor[(352, 1), float32],) */;
  %334 = %333.0;
  %335 = cast(%334, dtype="bool") /* ty=Tensor[(352, 1), bool] */;
  %336 = cast(%var_4449, dtype="bool") /* ty=Tensor[(352, 6), bool] */;
  %337 = cast(%334, dtype="int16") /* ty=Tensor[(352, 1), int16] */;
  %338 = cast(%var_4449, dtype="int16") /* ty=Tensor[(352, 6), int16] */;
  %339 = logical_or(%335, %336) /* ty=Tensor[(352, 6), bool] */;
  %340 = logical_xor(%337, %338) /* ty=Tensor[(352, 6), int16] */;
  (%339, %340)
}

def @func_3017() -> Tensor[(10, 1, 7), bool] {
  %341 = @func_2698() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %341.0
}

def @func_6473() -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(352), uint16], Tensor[(140), float64], Tensor[(10, 1, 7), bool]) {
  %342 = @func_6126() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(352), uint16], Tensor[(1152), float64]) */;
  %343 = cast(meta[relay.Constant][14] /* ty=Tensor[(140), float64] */, dtype="float64") /* ty=Tensor[(140), float64] */;
  %344 = reshape(%343, newshape=[140]) /* ty=Tensor[(140), float64] */;
  %345 = @func_3285(%344) /* ty=(Tensor[(4, 11, 8), uint16], Tensor[(352), uint16], Tensor[(140), float64]) */;
  %346 = @func_6007() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %347 = %342.0;
  %348 = @func_3961() /* ty=Tensor[(10, 1, 7), bool] */;
  %349 = %345.1;
  %350 = %346.0;
  (%347, %348, %349, meta[relay.Constant][14] /* ty=Tensor[(140), float64] */, %350)
}

def @func_2892(%var_2881: Tensor[(1152), float64]) -> (Tensor[(10, 1, 7), bool], Tensor[(352), uint16], Tensor[(1152), float64]) {
  %351 = @func_2698() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %352 = cast(%var_2881, dtype="float64") /* ty=Tensor[(1152), float64] */;
  %353 = reshape(%352, newshape=[16, 6, 12]) /* ty=Tensor[(16, 6, 12), float64] */;
  %354 = @func_1000(%353) /* ty=(Tensor[(16, 6, 12), float64], Tensor[(4, 11, 8), uint16], Tensor[(352), uint16]) */;
  %355 = %351.0;
  %356 = %354.2;
  (%355, %356, %var_2881)
}

def @func_7772(%var_7726: uint16, %var_7727: Tensor[(16, 3, 1), uint16]) -> (Tensor[(16, 3, ?), float64], Tensor[(10, 1, 7), bool]) {
  %357 = cast(%var_7726, dtype="bool") /* ty=bool */;
  %358 = cast(%var_7727, dtype="bool") /* ty=Tensor[(16, 3, 1), bool] */;
  %359 = equal(%357, %358) /* ty=Tensor[(16, 3, 1), bool] */;
  %360 = cast(%var_7726, dtype="bool") /* ty=bool */;
  %361 = cast(%359, dtype="bool") /* ty=Tensor[(16, 3, 1), bool] */;
  %362 = less(%360, %361) /* ty=Tensor[(16, 3, 1), bool] */;
  %363 = cast(%362, dtype="int8") /* ty=Tensor[(16, 3, 1), int8] */;
  %364 = shape_of(%359, dtype="int32") /* ty=Tensor[(3), int32] */;
  %365 = cast(%359, dtype="int8") /* ty=Tensor[(16, 3, 1), int8] */;
  %366 = dyn.reshape(%363, %364, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %367 = multiply(%365, %366) /* ty=Tensor[(16, 3, ?), int8] */;
  %368 = cast(%367, dtype="float64") /* ty=Tensor[(16, 3, ?), float64] */;
  %369 = @func_2698() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %370 = sigmoid(%368) /* ty=Tensor[(16, 3, ?), float64] */;
  %371 = %369.0;
  (%370, %371)
}

def @func_7284() -> (Tensor[(352, 5), float64],) {
  %372 = @func_5980() /* ty=(Tensor[(352, 5), float64], Tensor[(10, 1, 7), bool]) */;
  %373 = %372.0;
  (%373,)
}

def @func_3684() -> Tensor[(10, 1, 7), bool] {
  @func_3228() /* ty=Tensor[(10, 1, 7), bool] */
}

def @func_7608() -> (Tensor[(10, 1, 7), bool],) {
  %374 = @func_6213() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %375 = %374.0;
  (%375,)
}

def @func_12815() -> Tensor[(10, 1, 7), bool] {
  %376 = @func_3761() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %376.0
}

def @func_11377() -> (Tensor[(352, 5), bool], Tensor[(10, 1, 7), bool], Tensor[(4, 12, 3), int64], Tensor[(352, 5), float64]) {
  %377 = @func_6731() /* ty=(Tensor[(352, 5), bool],) */;
  %378 = @func_5550() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %379 = cast(meta[relay.Constant][15] /* ty=Tensor[(24, 6), float64] */, dtype="float64") /* ty=Tensor[(24, 6), float64] */;
  %380 = reshape(%379, newshape=[4, 12, 3]) /* ty=Tensor[(4, 12, 3), float64] */;
  %381 = @func_7062(%380) /* ty=Tensor[(4, 12, 3), float64] */;
  %382 = cast(meta[relay.Constant][15] /* ty=Tensor[(24, 6), float64] */, dtype="int64") /* ty=Tensor[(24, 6), int64] */;
  %383 = shape_of(%381, dtype="int32") /* ty=Tensor[(3), int32] */;
  %384 = cast(%381, dtype="int64") /* ty=Tensor[(4, 12, 3), int64] */;
  %385 = dyn.reshape(%382, %383, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %386 = %377.0;
  %387 = %378.0;
  %388 = subtract(%384, %385) /* ty=Tensor[(4, 12, 3), int64] */;
  %389 = @func_10802() /* ty=Tensor[(352, 5), float64] */;
  (%386, %387, %388, %389)
}

def @func_11952() -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) {
  %390 = @func_6071() /* ty=Tensor[(10, 1, 7), bool] */;
  %391 = @func_4803() /* ty=Tensor[(10, 1, 7), bool] */;
  (%390, %391)
}

def @func_7812() -> (Tensor[(352, 5), bool], Tensor[(10, 1, 7), float32]) {
  %392 = @func_4878() /* ty=(Tensor[(10, 1, 7), float32], Tensor[(352, 5), bool]) */;
  %393 = %392.1;
  %394 = @func_5679() /* ty=Tensor[(10, 1, 7), float32] */;
  (%393, %394)
}

def @func_11813() -> Tensor[(10, 1, 7), bool] {
  %395 = @func_8877() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) */;
  %395.1
}

def @func_9868(%var_9825: Tensor[(140), bool]) -> (Tensor[(10, 1, 7), bool], Tensor[(140), bool], Tensor[(10, 1, 7), bool], Tensor[(10, ?, 7), bool], Tensor[(4, 11, 8), int8], Tensor[(140), bool]) {
  %396 = @func_3836() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %397 = @func_8450() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %398 = cast(%var_9825, dtype="bool") /* ty=Tensor[(140), bool] */;
  %399 = reshape(%398, newshape=[5, 28]) /* ty=Tensor[(5, 28), bool] */;
  %400 = @func_4991(%399) /* ty=(Tensor[(10, ?, 7), bool], Tensor[(10, 1, 7), float64], Tensor[(10, ?, 7), bool], Tensor[(5, 28), bool]) */;
  %401 = %400.2;
  %402 = @func_5926() /* ty=Tensor[(10, 1, 7), bool] */;
  %403 = cast(%402, dtype="bool") /* ty=Tensor[(10, 1, 7), bool] */;
  %404 = shape_of(%401, dtype="int32") /* ty=Tensor[(3), int32] */;
  %405 = cast(%401, dtype="bool") /* ty=Tensor[(10, ?, 7), bool] */;
  %406 = dyn.reshape(%403, %404, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %407 = @func_2773() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(4, 11, 8), uint16], Tensor[(352, 1), uint16]) */;
  %408 = %407.1;
  %409 = cast(%408, dtype="float64") /* ty=Tensor[(4, 11, 8), float64] */;
  %410 = erf(%409) /* ty=Tensor[(4, 11, 8), float64] */;
  %411 = cast(%408, dtype="int8") /* ty=Tensor[(4, 11, 8), int8] */;
  %412 = shape_of(%410, dtype="int32") /* ty=Tensor[(3), int32] */;
  %413 = cast(%410, dtype="int8") /* ty=Tensor[(4, 11, 8), int8] */;
  %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %415 = @func_9528() /* ty=(Tensor[(10, 1, 7), float64], Tensor[(140), bool], Tensor[(140), bool]) */;
  %416 = %396.0;
  %417 = %397.0;
  %418 = greater(%405, %406) /* ty=Tensor[(10, ?, 7), bool] */;
  %419 = bitwise_xor(%413, %414) /* ty=Tensor[(4, 11, 8), int8] */;
  %420 = %415.1;
  (%416, %var_9825, %417, %418, %419, %420)
}

def @func_4622() -> (Tensor[(352, 5), bool],) {
  %421 = @func_4248() /* ty=(Tensor[(352, 1), float32],) */;
  %422 = %421.0;
  %423 = cast(%422, dtype="bool") /* ty=Tensor[(352, 1), bool] */;
  %424 = cast(meta[relay.Constant][16] /* ty=Tensor[(352, 5), float32] */, dtype="bool") /* ty=Tensor[(352, 5), bool] */;
  %425 = logical_or(%423, %424) /* ty=Tensor[(352, 5), bool] */;
  (%425,)
}

def @func_7852() -> Tensor[(352, 5), bool] {
  %426 = @func_7812() /* ty=(Tensor[(352, 5), bool], Tensor[(10, 1, 7), float32]) */;
  %426.0
}

def @func_11151() -> Tensor[(10, 1, 7), bool] {
  %427 = @func_3990() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) */;
  %427.0
}

def @func_7461() -> (Tensor[(352, 5), bool],) {
  %428 = @func_4878() /* ty=(Tensor[(10, 1, 7), float32], Tensor[(352, 5), bool]) */;
  %429 = %428.1;
  (%429,)
}

def @func_12693() -> (Tensor[(10, 1, 7), float32], Tensor[(10, 1, 7), bool], Tensor[(140), bool]) {
  %430 = @func_5550() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %431 = @func_10755() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 2, 7), int8], Tensor[(140), bool], Tensor[(10, 1, 7), bool]) */;
  %432 = @func_5679() /* ty=Tensor[(10, 1, 7), float32] */;
  %433 = %430.0;
  %434 = %431.2;
  (%432, %433, %434)
}

def @func_4744() -> Tensor[(10, 1, 7), bool] {
  %435 = @func_4280() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) */;
  %435.1
}

def @func_3961() -> Tensor[(10, 1, 7), bool] {
  @func_3640() /* ty=Tensor[(10, 1, 7), bool] */
}

def @func_4248() -> (Tensor[(352, 1), float32],) {
  %436 = @func_2773() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(4, 11, 8), uint16], Tensor[(352, 1), uint16]) */;
  %437 = %436.2;
  %438 = cast(%437, dtype="float32") /* ty=Tensor[(352, 1), float32] */;
  %439 = asin(%438) /* ty=Tensor[(352, 1), float32] */;
  %440 = cast(%439, dtype="float32") /* ty=Tensor[(352, 1), float32] */;
  %441 = sin(%440) /* ty=Tensor[(352, 1), float32] */;
  (%441,)
}

def @func_6643() -> (Tensor[(4, 11, 8), uint16],) {
  %442 = @func_5044() /* ty=(Tensor[(4, 11, 8), uint16],) */;
  %443 = %442.0;
  (%443,)
}

def @func_6779() -> Tensor[(10, 1, 7), bool] {
  @func_5926() /* ty=Tensor[(10, 1, 7), bool] */
}

def @func_10674() -> (Tensor[(140), bool], Tensor[(10, 352, 7), uint32], Tensor[(10, 6, 7), int16], Tensor[(2640, 2), bool]) {
  %444 = @func_10212() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 2, 7), bool], Tensor[(140), bool]) */;
  %445 = @func_10012() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) */;
  %446 = %445.1;
  %447 = cast(meta[relay.Constant][17] /* ty=Tensor[(2640, 2), float32] */, dtype="float32") /* ty=Tensor[(2640, 2), float32] */;
  %448 = reshape(%447, newshape=[352, 15]) /* ty=Tensor[(352, 15), float32] */;
  %449 = @func_8345(%448) /* ty=(Tensor[(352, 15), bool], Tensor[(10, 1, 7), bool], Tensor[(352, 1), float64]) */;
  %450 = %449.2;
  %451 = cast(%446, dtype="uint32") /* ty=Tensor[(10, 1, 7), uint32] */;
  %452 = cast(%450, dtype="uint32") /* ty=Tensor[(352, 1), uint32] */;
  %453 = cast(%446, dtype="int16") /* ty=Tensor[(10, 1, 7), int16] */;
  %454 = cast(meta[relay.Constant][18] /* ty=Tensor[(10, 6, 7), bool] */, dtype="int16") /* ty=Tensor[(10, 6, 7), int16] */;
  %455 = cast(meta[relay.Constant][19] /* ty=Tensor[(2640, 2), float32] */, dtype="bool") /* ty=Tensor[(2640, 2), bool] */;
  %456 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(2640, 2), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %457 = cast(meta[relay.Constant][17] /* ty=Tensor[(2640, 2), float32] */, dtype="bool") /* ty=Tensor[(2640, 2), bool] */;
  %458 = dyn.reshape(%455, %456, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %459 = %444.3;
  %460 = bitwise_or(%451, %452) /* ty=Tensor[(10, 352, 7), uint32] */;
  %461 = bitwise_xor(%453, %454) /* ty=Tensor[(10, 6, 7), int16] */;
  %462 = less(%457, %458) /* ty=Tensor[(2640, 2), bool] */;
  (%459, %460, %461, %462)
}

def @func_7362(%var_7347: Tensor[(14, 9, 7), bool]) -> (Tensor[(14, 9, 7), bool],) {
  %463 = cast(%var_7347, dtype="bool") /* ty=Tensor[(14, 9, 7), bool] */;
  %464 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(14, 9, 7), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %465 = cast(meta[relay.Constant][20] /* ty=Tensor[(14, 9, 7), bool] */, dtype="bool") /* ty=Tensor[(14, 9, 7), bool] */;
  %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %467 = logical_or(%465, %466) /* ty=Tensor[(14, 9, 7), bool] */;
  (%467,)
}

def @func_9305() -> (Tensor[(10, 1, 7), bool],) {
  %468 = @func_8877() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) */;
  %469 = %468.1;
  (%469,)
}

def @func_2848() -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), float32]) {
  %470 = @func_2698() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %471 = @func_2698() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %472 = %471.0;
  %473 = cast(%472, dtype="float32") /* ty=Tensor[(10, 1, 7), float32] */;
  %474 = %470.0;
  %475 = exp(%473) /* ty=Tensor[(10, 1, 7), float32] */;
  (%474, %475)
}

def @func_12621(%var_12600: Tensor[(10, 7, 13), float64]) -> (Tensor[(10, 7, 13), float64], Tensor[(9, ?, 12), uint8], Tensor[(16, 6, 12), float64], Tensor[(1152), float64]) {
  %476 = cast(%var_12600, dtype="float64") /* ty=Tensor[(10, 7, 13), float64] */;
  %477 = cast(meta[relay.Constant][21] /* ty=Tensor[(1152), float64] */, dtype="float64") /* ty=Tensor[(1152), float64] */;
  %478 = reshape(%477, newshape=[16, 6, 12]) /* ty=Tensor[(16, 6, 12), float64] */;
  %479 = @func_1000(%478) /* ty=(Tensor[(16, 6, 12), float64], Tensor[(4, 11, 8), uint16], Tensor[(352), uint16]) */;
  %480 = exp(%476) /* ty=Tensor[(10, 7, 13), float64] */;
  %481 = @func_11594() /* ty=Tensor[(9, ?, 12), uint8] */;
  %482 = %479.0;
  (%480, %481, %482, meta[relay.Constant][21] /* ty=Tensor[(1152), float64] */)
}

def @func_4497() -> (Tensor[(10, 1, 7), bool],) {
  %483 = @func_2698() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %484 = %483.0;
  (%484,)
}

def @func_8345(%var_8301: Tensor[(352, 15), float32]) -> (Tensor[(352, 15), bool], Tensor[(10, 1, 7), bool], Tensor[(352, 1), float64]) {
  %485 = @func_4248() /* ty=(Tensor[(352, 1), float32],) */;
  %486 = %485.0;
  %487 = cast(%486, dtype="bool") /* ty=Tensor[(352, 1), bool] */;
  %488 = cast(%var_8301, dtype="bool") /* ty=Tensor[(352, 15), bool] */;
  %489 = @func_6597() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %490 = cast(%486, dtype="float32") /* ty=Tensor[(352, 1), float32] */;
  %491 = sigmoid(%490) /* ty=Tensor[(352, 1), float32] */;
  %492 = cast(%491, dtype="float64") /* ty=Tensor[(352, 1), float64] */;
  %493 = not_equal(%487, %488) /* ty=Tensor[(352, 15), bool] */;
  %494 = %489.0;
  %495 = log10(%492) /* ty=Tensor[(352, 1), float64] */;
  (%493, %494, %495)
}

def @func_1253(%var_1241: Tensor[(8, 1, 16), float32]) -> Tensor[(8, 6, 16), float32] {
  %496 = cast(%var_1241, dtype="float32") /* ty=Tensor[(8, 1, 16), float32] */;
  %497 = cast(meta[relay.Constant][22] /* ty=Tensor[(8, 6, 16), float32] */, dtype="float32") /* ty=Tensor[(8, 6, 16), float32] */;
  floor_mod(%496, %497) /* ty=Tensor[(8, 6, 16), float32] */
}

def @func_8790() -> (Tensor[(352, 6), int16], Tensor[(10, 1, 7), bool]) {
  %498 = @func_7591() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(352, 6), int16], Tensor[(2112), float32], Tensor[(10, 1, 7), float64]) */;
  %499 = %498.1;
  %500 = @func_4803() /* ty=Tensor[(10, 1, 7), bool] */;
  (%499, %500)
}

def @main(%var_12959: Tensor[(140, 1), bool], %var_12960: Tensor[(490), bool], %var_12961: Tensor[(88), float64], %var_12962: Tensor[(660), int64]) -> (Tensor[(10, 1, 7), bool], Tensor[(49, 10), bool], Tensor[(140, 1), bool], Tensor[(490), bool], Tensor[(88), float64], Tensor[(660), int64], Tensor[(4, 11, 8), bool]) {
  %501 = @func_9305() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %502 = cast(%var_12959, dtype="bool") /* ty=Tensor[(140, 1), bool] */;
  %503 = cast(%var_12960, dtype="bool") /* ty=Tensor[(490), bool] */;
  %504 = cast(%var_12961, dtype="float64") /* ty=Tensor[(88), float64] */;
  %505 = cast(%var_12962, dtype="int64") /* ty=Tensor[(660), int64] */;
  %506 = reshape(%502, newshape=[140]) /* ty=Tensor[(140), bool] */;
  %507 = reshape(%503, newshape=[49, 10]) /* ty=Tensor[(49, 10), bool] */;
  %508 = reshape(%504, newshape=[88]) /* ty=Tensor[(88), float64] */;
  %509 = reshape(%505, newshape=[660]) /* ty=Tensor[(660), int64] */;
  %510 = @func_7696(%506, %507, %508, %509) /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(490), bool], Tensor[(140), bool], Tensor[(49, 10), bool], Tensor[(11, 2, 4), float32], Tensor[(88), float64], Tensor[(5, 11, 12), bool], Tensor[(660), int64]) */;
  %511 = @func_9348() /* ty=Tensor[(4, 11, 8), uint16] */;
  %512 = cast(meta[relay.Constant][23] /* ty=Tensor[(4, 11, 8), uint16] */, dtype="bool") /* ty=Tensor[(4, 11, 8), bool] */;
  %513 = shape_of(%511, dtype="int32") /* ty=Tensor[(3), int32] */;
  %514 = cast(%511, dtype="bool") /* ty=Tensor[(4, 11, 8), bool] */;
  %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %516 = %501.0;
  %517 = %510.4;
  %518 = greater(%514, %515) /* ty=Tensor[(4, 11, 8), bool] */;
  (%516, %517, %var_12959, %var_12960, %var_12961, %var_12962, %518)
}

def @func_2698() -> (Tensor[(10, 1, 7), bool],) {
  %519 = cast(meta[relay.Constant][24] /* ty=uint16 */, dtype="bool") /* ty=bool */;
  %520 = cast(meta[relay.Constant][25] /* ty=Tensor[(10, 1, 7), uint16] */, dtype="bool") /* ty=Tensor[(10, 1, 7), bool] */;
  %521 = less_equal(%519, %520) /* ty=Tensor[(10, 1, 7), bool] */;
  (%521,)
}

def @func_11783() -> (Tensor[(352, 5), float32], Tensor[(88), float64], Tensor[(352, 5), float64]) {
  %522 = @func_10557() /* ty=(Tensor[(4, 11, 8), uint16], Tensor[(352, 5), float64]) */;
  %523 = %522.1;
  %524 = cast(%523, dtype="float32") /* ty=Tensor[(352, 5), float32] */;
  %525 = @func_11446() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, ?, 7), bool], Tensor[(10, 88, 7), int16], Tensor[(660), int64], Tensor[(88), float64], Tensor[(10, 1, 7), bool]) */;
  %526 = cast(%523, dtype="float64") /* ty=Tensor[(352, 5), float64] */;
  %527 = sinh(%526) /* ty=Tensor[(352, 5), float64] */;
  %528 = cast(%527, dtype="float64") /* ty=Tensor[(352, 5), float64] */;
  %529 = log2(%524) /* ty=Tensor[(352, 5), float32] */;
  %530 = %525.4;
  %531 = asin(%528) /* ty=Tensor[(352, 5), float64] */;
  (%529, %530, %531)
}

def @func_5048() -> Tensor[(10, 1, 7), bool] {
  %532 = @func_3761() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %532.0
}

def @func_9155() -> (Tensor[(10, 1, 7), bool],) {
  %533 = @func_3836() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %534 = %533.0;
  (%534,)
}

def @func_11090() -> Tensor[(10, 1, 7), bool] {
  %535 = @func_8264() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) */;
  %535.0
}

def @func_9753() -> (Tensor[(10, 1, 7), bool],) {
  %536 = @func_9305() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %537 = %536.0;
  (%537,)
}

def @func_10182() -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) {
  %538 = @func_9753() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %539 = @func_9200() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) */;
  %540 = @func_3961() /* ty=Tensor[(10, 1, 7), bool] */;
  %541 = %538.0;
  %542 = %539.0;
  (%540, %541, %542)
}

def @func_4803() -> Tensor[(10, 1, 7), bool] {
  @func_3961() /* ty=Tensor[(10, 1, 7), bool] */
}

def @func_4228(%var_4174: Tensor[(10, 2, 7), bool]) -> (Tensor[(10, 2, 7), float32], Tensor[(4, 11, 8), uint16], Tensor[(352), uint16], Tensor[(10, ?, 7), bool]) {
  %543 = @func_3836() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %544 = %543.0;
  %545 = cast(%544, dtype="float32") /* ty=Tensor[(10, 1, 7), float32] */;
  %546 = cast(%var_4174, dtype="float32") /* ty=Tensor[(10, 2, 7), float32] */;
  %547 = cast(meta[relay.Constant][26] /* ty=Tensor[(352), uint16] */, dtype="uint16") /* ty=Tensor[(352), uint16] */;
  %548 = cast(meta[relay.Constant][26] /* ty=Tensor[(352), uint16] */, dtype="uint16") /* ty=Tensor[(352), uint16] */;
  %549 = reshape(%547, newshape=[4, 11, 8]) /* ty=Tensor[(4, 11, 8), uint16] */;
  %550 = reshape(%548, newshape=[4, 11, 8]) /* ty=Tensor[(4, 11, 8), uint16] */;
  %551 = @func_3017() /* ty=Tensor[(10, 1, 7), bool] */;
  %552 = @func_3017() /* ty=Tensor[(10, 1, 7), bool] */;
  %553 = cast(%552, dtype="bool") /* ty=Tensor[(10, 1, 7), bool] */;
  %554 = shape_of(%551, dtype="int32") /* ty=Tensor[(3), int32] */;
  %555 = cast(%551, dtype="bool") /* ty=Tensor[(10, 1, 7), bool] */;
  %556 = dyn.reshape(%553, %554, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %557 = floor_divide(%545, %546) /* ty=Tensor[(10, 2, 7), float32] */;
  %558 = @func_566(%549, %550) /* ty=Tensor[(4, 11, 8), uint16] */;
  %559 = greater_equal(%555, %556) /* ty=Tensor[(10, ?, 7), bool] */;
  (%557, %558, meta[relay.Constant][26] /* ty=Tensor[(352), uint16] */, %559)
}

def @func_8018(%var_8010: Tensor[(70, 2), bool]) -> (Tensor[(10, 1, 7), bool], Tensor[(352, 5), bool], Tensor[(10, 1, 7), float32], Tensor[(140), bool], Tensor[(70, 2), bool]) {
  %560 = @func_6531() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %561 = @func_7812() /* ty=(Tensor[(352, 5), bool], Tensor[(10, 1, 7), float32]) */;
  %562 = cast(%var_8010, dtype="bool") /* ty=Tensor[(70, 2), bool] */;
  %563 = reshape(%562, newshape=[140]) /* ty=Tensor[(140), bool] */;
  %564 = @func_7128(%563) /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 2, 7), bool], Tensor[(140), bool]) */;
  %565 = %560.0;
  %566 = %561.0;
  %567 = @func_4751() /* ty=Tensor[(10, 1, 7), float32] */;
  %568 = %564.2;
  (%565, %566, %567, %568, %var_8010)
}

def @func_8053(%var_8047: Tensor[(5, 28), float64], %var_8051: Tensor[(88), float64]) -> (Tensor[(352, 5), bool], Tensor[(352), uint16], Tensor[(5, 28), float64], Tensor[(88, 1), float64], Tensor[(490), bool], Tensor[(88), float64]) {
  %569 = @func_7461() /* ty=(Tensor[(352, 5), bool],) */;
  %570 = cast(%var_8047, dtype="float64") /* ty=Tensor[(5, 28), float64] */;
  %571 = reshape(%570, newshape=[5, 7, 4]) /* ty=Tensor[(5, 7, 4), float64] */;
  %572 = @func_2616(%571) /* ty=(Tensor[(5, 7, 4), float64], Tensor[(4, 11, 8), uint16], Tensor[(352), uint16]) */;
  %573 = cast(meta[relay.Constant][27] /* ty=Tensor[(490), bool] */, dtype="bool") /* ty=Tensor[(490), bool] */;
  %574 = cast(%var_8051, dtype="float64") /* ty=Tensor[(88), float64] */;
  %575 = reshape(%573, newshape=[490]) /* ty=Tensor[(490), bool] */;
  %576 = reshape(%574, newshape=[88, 1]) /* ty=Tensor[(88, 1), float64] */;
  %577 = @func_3337(%575, %576) /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(490), bool], Tensor[(11, 2, 4), float64], Tensor[(88, 1), float64]) */;
  %578 = %569.0;
  %579 = %572.2;
  %580 = %577.4;
  (%578, %579, %var_8047, %580, meta[relay.Constant][27] /* ty=Tensor[(490), bool] */, %var_8051)
}

def @func_7515(%var_7480: Tensor[(882), bool], %var_7486: Tensor[(1, 128), float32]) -> (Tensor[(10, 1, 7), float32], Tensor[(14, 9, 7), bool], Tensor[(882), bool], Tensor[(8, 6, 16), float32], Tensor[(1, 128), float32]) {
  %581 = @func_3385() /* ty=(Tensor[(10, 1, 7), float64], Tensor[(10, 1, 7), float32]) */;
  %582 = cast(%var_7480, dtype="bool") /* ty=Tensor[(882), bool] */;
  %583 = reshape(%582, newshape=[14, 9, 7]) /* ty=Tensor[(14, 9, 7), bool] */;
  %584 = @func_7362(%583) /* ty=(Tensor[(14, 9, 7), bool],) */;
  %585 = cast(%var_7486, dtype="float32") /* ty=Tensor[(1, 128), float32] */;
  %586 = reshape(%585, newshape=[128]) /* ty=Tensor[(128), float32] */;
  %587 = @func_3718(%586) /* ty=(Tensor[(10, 1, 7), bool], Tensor[(8, 6, 16), float32], Tensor[(128), float32]) */;
  %588 = %581.1;
  %589 = %584.0;
  %590 = %587.1;
  (%588, %589, %var_7480, %590, %var_7486)
}

def @func_6193(%var_6156: Tensor[(5, 11, 12), int64], %var_6157: Tensor[(5, 11, 12), int64], %var_6164: Tensor[(88, 1), float64], %var_6177: Tensor[(5, 11, 12), int64]) -> (Tensor[(5, 11, 12), bool], Tensor[(11, 2, 4), float64], Tensor[(5, 11, 12), bool], Tensor[(10, 88, 7), int16]) {
  %591 = cast(%var_6157, dtype="bool") /* ty=Tensor[(5, 11, 12), bool] */;
  %592 = shape_of(%var_6156, dtype="int32") /* ty=Tensor[(3), int32] */;
  %593 = cast(%var_6156, dtype="bool") /* ty=Tensor[(5, 11, 12), bool] */;
  %594 = dyn.reshape(%591, %592, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %595 = cast(%var_6164, dtype="float64") /* ty=Tensor[(88, 1), float64] */;
  %596 = reshape(%595, newshape=[11, 2, 4]) /* ty=Tensor[(11, 2, 4), float64] */;
  %597 = @func_1748(%596) /* ty=(Tensor[(11, 2, 4), float64], Tensor[(11, 2, 4), float32]) */;
  %598 = cast(%var_6177, dtype="bool") /* ty=Tensor[(5, 11, 12), bool] */;
  %599 = shape_of(%var_6156, dtype="int32") /* ty=Tensor[(3), int32] */;
  %600 = cast(%var_6156, dtype="bool") /* ty=Tensor[(5, 11, 12), bool] */;
  %601 = dyn.reshape(%598, %599, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %602 = @func_3017() /* ty=Tensor[(10, 1, 7), bool] */;
  %603 = cast(%602, dtype="bool") /* ty=Tensor[(10, 1, 7), bool] */;
  %604 = cast(%var_6164, dtype="bool") /* ty=Tensor[(88, 1), bool] */;
  %605 = equal(%603, %604) /* ty=Tensor[(10, 88, 7), bool] */;
  %606 = cast(%605, dtype="int16") /* ty=Tensor[(10, 88, 7), int16] */;
  %607 = cast(%602, dtype="int16") /* ty=Tensor[(10, 1, 7), int16] */;
  %608 = equal(%593, %594) /* ty=Tensor[(5, 11, 12), bool] */;
  %609 = %597.0;
  %610 = not_equal(%600, %601) /* ty=Tensor[(5, 11, 12), bool] */;
  %611 = add(%606, %607) /* ty=Tensor[(10, 88, 7), int16] */;
  (%608, %609, %610, %611)
}

def @func_5948() -> (Tensor[(10, 1, 7), bool],) {
  %612 = @func_4803() /* ty=Tensor[(10, 1, 7), bool] */;
  (%612,)
}

def @func_1748(%var_1731: Tensor[(11, 2, 4), float64]) -> (Tensor[(11, 2, 4), float64], Tensor[(11, 2, 4), float32]) {
  %613 = cast(%var_1731, dtype="float64") /* ty=Tensor[(11, 2, 4), float64] */;
  %614 = cast(%var_1731, dtype="float32") /* ty=Tensor[(11, 2, 4), float32] */;
  %615 = sinh(%613) /* ty=Tensor[(11, 2, 4), float64] */;
  %616 = erf(%614) /* ty=Tensor[(11, 2, 4), float32] */;
  (%615, %616)
}

def @func_11613(%var_11604: Tensor[(10, 5, 7), bool]) -> Tensor[(10, 5, 7), int64] {
  %617 = @func_3640() /* ty=Tensor[(10, 1, 7), bool] */;
  %618 = cast(%617, dtype="int64") /* ty=Tensor[(10, 1, 7), int64] */;
  %619 = cast(%var_11604, dtype="int64") /* ty=Tensor[(10, 5, 7), int64] */;
  subtract(%618, %619) /* ty=Tensor[(10, 5, 7), int64] */
}

def @func_5228(%var_5154: Tensor[(14, 3, 4), int8], %var_5177: Tensor[(14, 3, 4), int8], %var_5219: Tensor[(2112), float32]) -> (Tensor[(14, 3, 4), int8], Tensor[(14, 3, 4), float32], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(352, 6), bool], Tensor[(2112), float32], Tensor[(10, 1, 7), bool]) {
  %620 = cast(meta[relay.Constant][28] /* ty=Tensor[(14, 3, 4), int8] */, dtype="int8") /* ty=Tensor[(14, 3, 4), int8] */;
  %621 = shape_of(%var_5154, dtype="int32") /* ty=Tensor[(3), int32] */;
  %622 = cast(%var_5154, dtype="int8") /* ty=Tensor[(14, 3, 4), int8] */;
  %623 = dyn.reshape(%620, %621, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %624 = cast(%var_5177, dtype="float32") /* ty=Tensor[(14, 3, 4), float32] */;
  %625 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(14, 3, 4), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %626 = cast(meta[relay.Constant][28] /* ty=Tensor[(14, 3, 4), int8] */, dtype="float32") /* ty=Tensor[(14, 3, 4), float32] */;
  %627 = dyn.reshape(%624, %625, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %628 = @func_3761() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %629 = cast(%var_5219, dtype="float32") /* ty=Tensor[(2112), float32] */;
  %630 = reshape(%629, newshape=[352, 6]) /* ty=Tensor[(352, 6), float32] */;
  %631 = @func_4460(%630) /* ty=(Tensor[(352, 6), bool], Tensor[(352, 6), int16]) */;
  %632 = add(%622, %623) /* ty=Tensor[(14, 3, 4), int8] */;
  %633 = multiply(%626, %627) /* ty=Tensor[(14, 3, 4), float32] */;
  %634 = %628.0;
  %635 = @func_4744() /* ty=Tensor[(10, 1, 7), bool] */;
  %636 = @func_3684() /* ty=Tensor[(10, 1, 7), bool] */;
  %637 = %631.0;
  %638 = @func_3017() /* ty=Tensor[(10, 1, 7), bool] */;
  (%632, %633, %634, %635, %636, %637, %var_5219, %638)
}

def @func_3337(%var_3301: Tensor[(490), bool], %var_3319: Tensor[(88, 1), float64]) -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(490), bool], Tensor[(11, 2, 4), float64], Tensor[(88, 1), float64]) {
  %639 = @func_2773() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(4, 11, 8), uint16], Tensor[(352, 1), uint16]) */;
  %640 = cast(%var_3301, dtype="bool") /* ty=Tensor[(490), bool] */;
  %641 = reshape(%640, newshape=[10, 7, 7]) /* ty=Tensor[(10, 7, 7), bool] */;
  %642 = @func_3171(%641) /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), float32], Tensor[(10, 7, 7), int64], Tensor[(10, 1, 7), bool]) */;
  %643 = cast(%var_3319, dtype="float64") /* ty=Tensor[(88, 1), float64] */;
  %644 = reshape(%643, newshape=[11, 2, 4]) /* ty=Tensor[(11, 2, 4), float64] */;
  %645 = @func_1748(%644) /* ty=(Tensor[(11, 2, 4), float64], Tensor[(11, 2, 4), float32]) */;
  %646 = %639.0;
  %647 = %642.0;
  %648 = %645.0;
  (%646, %647, %var_3301, %648, %var_3319)
}

def @func_4296() -> Tensor[(10, 1, 7), float64] {
  %649 = @func_3761() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %650 = %649.0;
  %651 = cast(%650, dtype="float64") /* ty=Tensor[(10, 1, 7), float64] */;
  sqrt(%651) /* ty=Tensor[(10, 1, 7), float64] */
}

def @func_6891(%var_6860: Tensor[(70, 2), bool], %var_6861: Tensor[(490), bool]) -> (Tensor[(10, 1, 7), float32], Tensor[(10, ?, 7), bool], Tensor[(70, 2), bool], Tensor[(490), bool], Tensor[(10, 1, 7), bool]) {
  %652 = @func_3385() /* ty=(Tensor[(10, 1, 7), float64], Tensor[(10, 1, 7), float32]) */;
  %653 = cast(%var_6860, dtype="bool") /* ty=Tensor[(70, 2), bool] */;
  %654 = cast(%var_6861, dtype="bool") /* ty=Tensor[(490), bool] */;
  %655 = reshape(%653, newshape=[140]) /* ty=Tensor[(140), bool] */;
  %656 = reshape(%654, newshape=[490]) /* ty=Tensor[(490), bool] */;
  %657 = @func_6370(%655, %656) /* ty=(Tensor[(10, ?, 7), bool], Tensor[(140), bool], Tensor[(1, 1, 9), uint64], Tensor[(10, 1, 7), bool], Tensor[(490), bool]) */;
  %658 = @func_2698() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %659 = %652.1;
  %660 = %657.0;
  %661 = %658.0;
  (%659, %660, %var_6860, %var_6861, %661)
}

def @func_3385() -> (Tensor[(10, 1, 7), float64], Tensor[(10, 1, 7), float32]) {
  %662 = @func_2698() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %663 = %662.0;
  %664 = cast(%663, dtype="float64") /* ty=Tensor[(10, 1, 7), float64] */;
  %665 = cast(%663, dtype="float64") /* ty=Tensor[(10, 1, 7), float64] */;
  %666 = atanh(%665) /* ty=Tensor[(10, 1, 7), float64] */;
  %667 = cast(%666, dtype="float32") /* ty=Tensor[(10, 1, 7), float32] */;
  %668 = cos(%664) /* ty=Tensor[(10, 1, 7), float64] */;
  %669 = cosh(%667) /* ty=Tensor[(10, 1, 7), float32] */;
  (%668, %669)
}

def @func_11697() -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(352, 5), float64]) {
  %670 = @func_5980() /* ty=(Tensor[(352, 5), float64], Tensor[(10, 1, 7), bool]) */;
  %671 = %670.1;
  %672 = @func_3228() /* ty=Tensor[(10, 1, 7), bool] */;
  %673 = @func_5433() /* ty=Tensor[(352, 5), float64] */;
  (%671, %672, %673)
}

def @func_10557() -> (Tensor[(4, 11, 8), uint16], Tensor[(352, 5), float64]) {
  %674 = @func_5044() /* ty=(Tensor[(4, 11, 8), uint16],) */;
  %675 = @func_8092() /* ty=Tensor[(352, 5), float64] */;
  %676 = cast(%675, dtype="float64") /* ty=Tensor[(352, 5), float64] */;
  %677 = %674.0;
  %678 = asinh(%676) /* ty=Tensor[(352, 5), float64] */;
  (%677, %678)
}

def @func_10922() -> Tensor[(10, 1, 7), bool] {
  @func_4803() /* ty=Tensor[(10, 1, 7), bool] */
}

def @func_12038() -> (Tensor[(10, 1, 7), float32], Tensor[(10, 1, 7), bool]) {
  %679 = @func_5863() /* ty=(Tensor[(10, 1, 7), float32], Tensor[(10, 1, 7), bool]) */;
  %680 = @func_8450() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %681 = %679.0;
  %682 = %680.0;
  (%681, %682)
}

def @func_12124() -> (Tensor[(10, 1, 7), bool],) {
  %683 = @func_4803() /* ty=Tensor[(10, 1, 7), bool] */;
  (%683,)
}

def @func_4751() -> Tensor[(10, 1, 7), float32] {
  %684 = @func_3498() /* ty=(Tensor[(10, 1, 7), float32],) */;
  %684.0
}

def @func_12921() -> (Tensor[(10, 1, 7), bool], Tensor[(9, ?, 12), uint8]) {
  %685 = @func_4280() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) */;
  %686 = %685.0;
  %687 = @func_11594() /* ty=Tensor[(9, ?, 12), uint8] */;
  (%686, %687)
}

def @func_4878() -> (Tensor[(10, 1, 7), float32], Tensor[(352, 5), bool]) {
  %688 = @func_3640() /* ty=Tensor[(10, 1, 7), bool] */;
  %689 = cast(%688, dtype="float32") /* ty=Tensor[(10, 1, 7), float32] */;
  %690 = @func_4622() /* ty=(Tensor[(352, 5), bool],) */;
  %691 = log(%689) /* ty=Tensor[(10, 1, 7), float32] */;
  %692 = %690.0;
  (%691, %692)
}

def @func_12402(%var_12358: Tensor[(352, 5), float64], %var_12382: Tensor[(140), bool]) -> (Tensor[(10, 1, 7), bool], Tensor[(352, 5), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(352, 5), float32], Tensor[(10, 2, 7), bool], Tensor[(140), bool], Tensor[(10, 1, 7), bool]) {
  %693 = @func_11952() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) */;
  %694 = @func_5980() /* ty=(Tensor[(352, 5), float64], Tensor[(10, 1, 7), bool]) */;
  %695 = %694.0;
  %696 = cast(%var_12358, dtype="bool") /* ty=Tensor[(352, 5), bool] */;
  %697 = shape_of(%695, dtype="int32") /* ty=Tensor[(2), int32] */;
  %698 = cast(%695, dtype="bool") /* ty=Tensor[(352, 5), bool] */;
  %699 = dyn.reshape(%696, %697, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %700 = @func_8904() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %701 = cast(%var_12358, dtype="float32") /* ty=Tensor[(352, 5), float32] */;
  %702 = cast(%var_12382, dtype="bool") /* ty=Tensor[(140), bool] */;
  %703 = reshape(%702, newshape=[140]) /* ty=Tensor[(140), bool] */;
  %704 = @func_7128(%703) /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 2, 7), bool], Tensor[(140), bool]) */;
  %705 = @func_12124() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %706 = %693.0;
  %707 = not_equal(%698, %699) /* ty=Tensor[(352, 5), bool] */;
  %708 = @func_10448() /* ty=Tensor[(10, 1, 7), bool] */;
  %709 = %700.0;
  %710 = cos(%701) /* ty=Tensor[(352, 5), float32] */;
  %711 = %704.1;
  %712 = %705.0;
  (%706, %707, %708, %709, %710, %711, %var_12382, %712)
}

def @func_11286() -> (Tensor[(10, ?, 7), bool],) {
  %713 = @func_9266() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), float32]) */;
  %714 = %713.0;
  %715 = @func_10012() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) */;
  %716 = %715.1;
  %717 = cast(%716, dtype="bool") /* ty=Tensor[(10, 1, 7), bool] */;
  %718 = shape_of(%714, dtype="int32") /* ty=Tensor[(3), int32] */;
  %719 = cast(%714, dtype="bool") /* ty=Tensor[(10, 1, 7), bool] */;
  %720 = dyn.reshape(%717, %718, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %721 = logical_and(%719, %720) /* ty=Tensor[(10, ?, 7), bool] */;
  (%721,)
}

def @func_5980() -> (Tensor[(352, 5), float64], Tensor[(10, 1, 7), bool]) {
  %722 = @func_5652() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(352, 5), bool], Tensor[(10, 1, 7), bool], Tensor[(288, 4), float64], Tensor[(10, 1, 7), bool], Tensor[(352, 5), float64], Tensor[(10, ?, 7), bool], Tensor[(352, 5), float64]) */;
  %723 = %722.7;
  %724 = @func_3228() /* ty=Tensor[(10, 1, 7), bool] */;
  (%723, %724)
}

def @func_10212() -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 2, 7), bool], Tensor[(140), bool]) {
  %725 = cast(meta[relay.Constant][29] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
  %726 = reshape(%725, newshape=[10, 2, 7]) /* ty=Tensor[(10, 2, 7), bool] */;
  %727 = @func_3684() /* ty=Tensor[(10, 1, 7), bool] */;
  %728 = @func_6071() /* ty=Tensor[(10, 1, 7), bool] */;
  %729 = @func_4067(%726) /* ty=Tensor[(10, 2, 7), bool] */;
  (%727, %728, %729, meta[relay.Constant][29] /* ty=Tensor[(140), bool] */)
}

def @func_3228() -> Tensor[(10, 1, 7), bool] {
  %730 = @func_2698() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %730.0
}

def @func_6154() -> (Tensor[(10, 1, 7), bool], Tensor[(10, ?, 7), bool]) {
  %731 = @func_5948() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %732 = %731.0;
  %733 = cast(%732, dtype="bool") /* ty=Tensor[(10, 1, 7), bool] */;
  %734 = reshape(%733, newshape=[10, 1, 7]) /* ty=Tensor[(10, 1, 7), bool] */;
  %735 = @func_3917(%734) /* ty=(Tensor[(10, ?, 7), bool],) */;
  %736 = %735.0;
  (%732, %736)
}

def @func_10501() -> (Tensor[(9, ?, 12), uint8], Tensor[(352, 5), bool]) {
  %737 = @func_8977() /* ty=(Tensor[(9, ?, 12), uint8],) */;
  %738 = @func_4878() /* ty=(Tensor[(10, 1, 7), float32], Tensor[(352, 5), bool]) */;
  %739 = %737.0;
  %740 = %738.1;
  (%739, %740)
}

def @func_10755() -> (Tensor[(10, 1, 7), bool], Tensor[(10, 2, 7), int8], Tensor[(140), bool], Tensor[(10, 1, 7), bool]) {
  %741 = @func_9200() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) */;
  %742 = cast(meta[relay.Constant][30] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
  %743 = reshape(%742, newshape=[10, 2, 7]) /* ty=Tensor[(10, 2, 7), bool] */;
  %744 = @func_9670(%743) /* ty=(Tensor[(10, 2, 7), int8],) */;
  %745 = @func_8904() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %746 = %741.0;
  %747 = %744.0;
  %748 = %745.0;
  (%746, %747, meta[relay.Constant][30] /* ty=Tensor[(140), bool] */, %748)
}

def @func_3990() -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) {
  %749 = @func_3761() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %750 = @func_2698() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %751 = %749.0;
  %752 = %750.0;
  (%751, %752)
}

def @func_4067(%var_4056: Tensor[(10, 2, 7), bool]) -> Tensor[(10, 2, 7), bool] {
  %753 = @func_3761() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %754 = %753.0;
  %755 = cast(%754, dtype="bool") /* ty=Tensor[(10, 1, 7), bool] */;
  %756 = cast(%var_4056, dtype="bool") /* ty=Tensor[(10, 2, 7), bool] */;
  equal(%755, %756) /* ty=Tensor[(10, 2, 7), bool] */
}

def @func_8904() -> (Tensor[(10, 1, 7), bool],) {
  %757 = @func_3017() /* ty=Tensor[(10, 1, 7), bool] */;
  (%757,)
}

def @func_12864(%var_12836: Tensor[(48), uint16]) -> (Tensor[(140), bool], uint16, Tensor[(48), uint16]) {
  %758 = cast(%var_12836, dtype="uint16") /* ty=Tensor[(48), uint16] */;
  %759 = reshape(%758, newshape=[48]) /* ty=Tensor[(48), uint16] */;
  %760 = @func_9123(%759) /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], uint16, Tensor[(48), uint16]) */;
  %761 = @func_11141() /* ty=Tensor[(140), bool] */;
  %762 = %760.2;
  (%761, %762, %var_12836)
}

def @func_5433() -> Tensor[(352, 5), float64] {
  %763 = @func_4622() /* ty=(Tensor[(352, 5), bool],) */;
  %764 = %763.0;
  %765 = cast(meta[relay.Constant][31] /* ty=Tensor[(352, 5), bool] */, dtype="float64") /* ty=Tensor[(352, 5), float64] */;
  %766 = shape_of(%764, dtype="int32") /* ty=Tensor[(2), int32] */;
  %767 = cast(%764, dtype="float64") /* ty=Tensor[(352, 5), float64] */;
  %768 = dyn.reshape(%765, %766, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  floor_divide(%767, %768) /* ty=Tensor[(352, 5), float64] */
}

def @func_5743() -> Tensor[(10, ?, 7), int16] {
  %769 = @func_3836() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %770 = %769.0;
  %771 = @func_3640() /* ty=Tensor[(10, 1, 7), bool] */;
  %772 = cast(%771, dtype="int16") /* ty=Tensor[(10, 1, 7), int16] */;
  %773 = shape_of(%770, dtype="int32") /* ty=Tensor[(3), int32] */;
  %774 = cast(%770, dtype="int16") /* ty=Tensor[(10, 1, 7), int16] */;
  %775 = dyn.reshape(%772, %773, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  maximum(%774, %775) /* ty=Tensor[(10, ?, 7), int16] */
}

def @func_9238() -> (Tensor[(4, 11, 8), uint16],) {
  %776 = @func_5044() /* ty=(Tensor[(4, 11, 8), uint16],) */;
  %777 = %776.0;
  (%777,)
}

def @func_2773() -> (Tensor[(10, 1, 7), bool], Tensor[(4, 11, 8), uint16], Tensor[(352, 1), uint16]) {
  %778 = @func_2698() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %779 = cast(meta[relay.Constant][32] /* ty=Tensor[(352, 1), uint16] */, dtype="uint16") /* ty=Tensor[(352, 1), uint16] */;
  %780 = cast(meta[relay.Constant][32] /* ty=Tensor[(352, 1), uint16] */, dtype="uint16") /* ty=Tensor[(352, 1), uint16] */;
  %781 = reshape(%779, newshape=[4, 11, 8]) /* ty=Tensor[(4, 11, 8), uint16] */;
  %782 = reshape(%780, newshape=[4, 11, 8]) /* ty=Tensor[(4, 11, 8), uint16] */;
  %783 = %778.0;
  %784 = @func_566(%781, %782) /* ty=Tensor[(4, 11, 8), uint16] */;
  (%783, %784, meta[relay.Constant][32] /* ty=Tensor[(352, 1), uint16] */)
}

def @func_7062(%var_7053: Tensor[(4, 12, 3), float64]) -> Tensor[(4, 12, 3), float64] {
  %785 = cast(%var_7053, dtype="float64") /* ty=Tensor[(4, 12, 3), float64] */;
  sqrt(%785) /* ty=Tensor[(4, 12, 3), float64] */
}

def @func_10802() -> Tensor[(352, 5), float64] {
  %786 = @func_7284() /* ty=(Tensor[(352, 5), float64],) */;
  %786.0
}

def @func_11877() -> (Tensor[(9, ?, 12), uint8], Tensor[(140), bool]) {
  %787 = @func_8977() /* ty=(Tensor[(9, ?, 12), uint8],) */;
  %788 = %787.0;
  %789 = @func_11141() /* ty=Tensor[(140), bool] */;
  (%788, %789)
}

def @func_12951() -> Tensor[(10, 1, 7), bool] {
  @func_11576() /* ty=Tensor[(10, 1, 7), bool] */
}

def @func_4991(%var_4988: Tensor[(5, 28), bool]) -> (Tensor[(10, ?, 7), bool], Tensor[(10, 1, 7), float64], Tensor[(10, ?, 7), bool], Tensor[(5, 28), bool]) {
  %790 = @func_3990() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) */;
  %791 = %790.1;
  %792 = cast(%791, dtype="float64") /* ty=Tensor[(10, 1, 7), float64] */;
  %793 = sigmoid(%792) /* ty=Tensor[(10, 1, 7), float64] */;
  %794 = cast(%791, dtype="bool") /* ty=Tensor[(10, 1, 7), bool] */;
  %795 = shape_of(%793, dtype="int32") /* ty=Tensor[(3), int32] */;
  %796 = cast(%793, dtype="bool") /* ty=Tensor[(10, 1, 7), bool] */;
  %797 = dyn.reshape(%794, %795, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %798 = @func_3385() /* ty=(Tensor[(10, 1, 7), float64], Tensor[(10, 1, 7), float32]) */;
  %799 = cast(%var_4988, dtype="bool") /* ty=Tensor[(5, 28), bool] */;
  %800 = reshape(%799, newshape=[10, 2, 7]) /* ty=Tensor[(10, 2, 7), bool] */;
  %801 = @func_4228(%800) /* ty=(Tensor[(10, 2, 7), float32], Tensor[(4, 11, 8), uint16], Tensor[(352), uint16], Tensor[(10, ?, 7), bool]) */;
  %802 = not_equal(%796, %797) /* ty=Tensor[(10, ?, 7), bool] */;
  %803 = %798.0;
  %804 = %801.3;
  (%802, %803, %804, %var_4988)
}

def @func_7591() -> (Tensor[(10, 1, 7), bool], Tensor[(352, 6), int16], Tensor[(2112), float32], Tensor[(10, 1, 7), float64]) {
  %805 = cast(meta[relay.Constant][33] /* ty=Tensor[(2112), float32] */, dtype="float32") /* ty=Tensor[(2112), float32] */;
  %806 = reshape(%805, newshape=[352, 6]) /* ty=Tensor[(352, 6), float32] */;
  %807 = @func_4460(%806) /* ty=(Tensor[(352, 6), bool], Tensor[(352, 6), int16]) */;
  %808 = @func_6779() /* ty=Tensor[(10, 1, 7), bool] */;
  %809 = %807.1;
  %810 = @func_4296() /* ty=Tensor[(10, 1, 7), float64] */;
  (%808, %809, meta[relay.Constant][33] /* ty=Tensor[(2112), float32] */, %810)
}

def @func_10237() -> (Tensor[(352), uint16],) {
  %811 = @func_7001() /* ty=(Tensor[(352), uint16],) */;
  %812 = %811.0;
  (%812,)
}

def @func_11919() -> (Tensor[(3, 12, 16), float32],) {
  %813 = cast(meta[relay.Constant][34] /* ty=Tensor[(3, 12, 16), float32] */, dtype="float32") /* ty=Tensor[(3, 12, 16), float32] */;
  %814 = sin(%813) /* ty=Tensor[(3, 12, 16), float32] */;
  (%814,)
}

def @func_12530(%var_12501: Tensor[(10, 352, 7), float64]) -> (Tensor[(10, 352, 7), uint64], Tensor[(4, 12, 3), int64], Tensor[(10, 352, 7), float32], Tensor[(352, 5), bool], Tensor[(10, 352, 7), float32]) {
  %815 = @func_4248() /* ty=(Tensor[(352, 1), float32],) */;
  %816 = %815.0;
  %817 = cast(%816, dtype="float64") /* ty=Tensor[(352, 1), float64] */;
  %818 = rsqrt(%817) /* ty=Tensor[(352, 1), float64] */;
  %819 = @func_4744() /* ty=Tensor[(10, 1, 7), bool] */;
  %820 = cast(%818, dtype="float64") /* ty=Tensor[(352, 1), float64] */;
  %821 = cast(%819, dtype="float64") /* ty=Tensor[(10, 1, 7), float64] */;
  %822 = floor_mod(%820, %821) /* ty=Tensor[(10, 352, 7), float64] */;
  %823 = cast(%var_12501, dtype="uint64") /* ty=Tensor[(10, 352, 7), uint64] */;
  %824 = shape_of(%822, dtype="int32") /* ty=Tensor[(3), int32] */;
  %825 = cast(%822, dtype="uint64") /* ty=Tensor[(10, 352, 7), uint64] */;
  %826 = dyn.reshape(%823, %824, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %827 = @func_11377() /* ty=(Tensor[(352, 5), bool], Tensor[(10, 1, 7), bool], Tensor[(4, 12, 3), int64], Tensor[(352, 5), float64]) */;
  %828 = cast(%var_12501, dtype="float32") /* ty=Tensor[(10, 352, 7), float32] */;
  %829 = shape_of(%822, dtype="int32") /* ty=Tensor[(3), int32] */;
  %830 = cast(%822, dtype="float32") /* ty=Tensor[(10, 352, 7), float32] */;
  %831 = dyn.reshape(%828, %829, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %832 = @func_6731() /* ty=(Tensor[(352, 5), bool],) */;
  %833 = cast(%822, dtype="float32") /* ty=Tensor[(10, 352, 7), float32] */;
  %834 = logical_xor(%825, %826) /* ty=Tensor[(10, 352, 7), uint64] */;
  %835 = %827.2;
  %836 = power(%830, %831) /* ty=Tensor[(10, 352, 7), float32] */;
  %837 = %832.0;
  %838 = log10(%833) /* ty=Tensor[(10, 352, 7), float32] */;
  (%834, %835, %836, %837, %838)
}

def @func_7446(%var_7404: Tensor[(352), uint16], %var_7436: Tensor[(140), bool]) -> (Tensor[(10, 1, 7), float32], Tensor[(4, 11, 8), uint16], Tensor[(352), uint16], Tensor[(10, ?, 7), bool], Tensor[(140), bool]) {
  %839 = @func_3385() /* ty=(Tensor[(10, 1, 7), float64], Tensor[(10, 1, 7), float32]) */;
  %840 = cast(%var_7404, dtype="uint16") /* ty=Tensor[(352), uint16] */;
  %841 = cast(%var_7404, dtype="uint16") /* ty=Tensor[(352), uint16] */;
  %842 = reshape(%840, newshape=[4, 11, 8]) /* ty=Tensor[(4, 11, 8), uint16] */;
  %843 = reshape(%841, newshape=[4, 11, 8]) /* ty=Tensor[(4, 11, 8), uint16] */;
  %844 = cast(%var_7436, dtype="bool") /* ty=Tensor[(140), bool] */;
  %845 = reshape(%844, newshape=[10, 2, 7]) /* ty=Tensor[(10, 2, 7), bool] */;
  %846 = @func_4228(%845) /* ty=(Tensor[(10, 2, 7), float32], Tensor[(4, 11, 8), uint16], Tensor[(352), uint16], Tensor[(10, ?, 7), bool]) */;
  %847 = %839.1;
  %848 = @func_566(%842, %843) /* ty=Tensor[(4, 11, 8), uint16] */;
  %849 = %846.3;
  (%847, %848, %var_7404, %849, %var_7436)
}

def @func_2616(%var_2589: Tensor[(5, 7, 4), float64]) -> (Tensor[(5, 7, 4), float64], Tensor[(4, 11, 8), uint16], Tensor[(352), uint16]) {
  %850 = cast(%var_2589, dtype="float64") /* ty=Tensor[(5, 7, 4), float64] */;
  %851 = cast(meta[relay.Constant][35] /* ty=Tensor[(352), uint16] */, dtype="uint16") /* ty=Tensor[(352), uint16] */;
  %852 = cast(meta[relay.Constant][35] /* ty=Tensor[(352), uint16] */, dtype="uint16") /* ty=Tensor[(352), uint16] */;
  %853 = reshape(%851, newshape=[4, 11, 8]) /* ty=Tensor[(4, 11, 8), uint16] */;
  %854 = reshape(%852, newshape=[4, 11, 8]) /* ty=Tensor[(4, 11, 8), uint16] */;
  %855 = asin(%850) /* ty=Tensor[(5, 7, 4), float64] */;
  %856 = @func_566(%853, %854) /* ty=Tensor[(4, 11, 8), uint16] */;
  (%855, %856, meta[relay.Constant][35] /* ty=Tensor[(352), uint16] */)
}

def @func_5550() -> (Tensor[(10, 1, 7), bool],) {
  %857 = @func_4803() /* ty=Tensor[(10, 1, 7), bool] */;
  (%857,)
}

def @func_5343() -> (Tensor[(4, 11, 8), uint16], Tensor[(352, 5), float64], Tensor[(352, 5), int64], Tensor[(352, 5), bool], Tensor[(10, 1, 7), bool], Tensor[(352, 5), float32]) {
  %858 = @func_2773() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(4, 11, 8), uint16], Tensor[(352, 1), uint16]) */;
  %859 = @func_4622() /* ty=(Tensor[(352, 5), bool],) */;
  %860 = %859.0;
  %861 = cast(%860, dtype="float64") /* ty=Tensor[(352, 5), float64] */;
  %862 = cast(%860, dtype="float32") /* ty=Tensor[(352, 5), float32] */;
  %863 = tan(%862) /* ty=Tensor[(352, 5), float32] */;
  %864 = cast(%863, dtype="uint32") /* ty=Tensor[(352, 5), uint32] */;
  %865 = shape_of(%860, dtype="int32") /* ty=Tensor[(2), int32] */;
  %866 = cast(%860, dtype="uint32") /* ty=Tensor[(352, 5), uint32] */;
  %867 = dyn.reshape(%864, %865, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %868 = bitwise_xor(%866, %867) /* ty=Tensor[(352, 5), uint32] */;
  %869 = cast(%868, dtype="int64") /* ty=Tensor[(352, 5), int64] */;
  %870 = shape_of(%860, dtype="int32") /* ty=Tensor[(2), int32] */;
  %871 = cast(%860, dtype="int64") /* ty=Tensor[(352, 5), int64] */;
  %872 = dyn.reshape(%869, %870, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %873 = @func_4622() /* ty=(Tensor[(352, 5), bool],) */;
  %874 = cast(%868, dtype="float64") /* ty=Tensor[(352, 5), float64] */;
  %875 = cosh(%874) /* ty=Tensor[(352, 5), float64] */;
  %876 = cast(%868, dtype="bool") /* ty=Tensor[(352, 5), bool] */;
  %877 = shape_of(%875, dtype="int32") /* ty=Tensor[(2), int32] */;
  %878 = cast(%875, dtype="bool") /* ty=Tensor[(352, 5), bool] */;
  %879 = dyn.reshape(%876, %877, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %880 = logical_and(%878, %879) /* ty=Tensor[(352, 5), bool] */;
  %881 = cast(%880, dtype="float32") /* ty=Tensor[(352, 5), float32] */;
  %882 = %858.1;
  %883 = acosh(%861) /* ty=Tensor[(352, 5), float64] */;
  %884 = logical_xor(%871, %872) /* ty=Tensor[(352, 5), int64] */;
  %885 = %873.0;
  %886 = @func_5048() /* ty=Tensor[(10, 1, 7), bool] */;
  %887 = atan(%881) /* ty=Tensor[(352, 5), float32] */;
  (%882, %883, %884, %885, %886, %887)
}

def @func_5679() -> Tensor[(10, 1, 7), float32] {
  %888 = @func_2848() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), float32]) */;
  %888.1
}

def @func_6213() -> (Tensor[(10, 1, 7), bool],) {
  %889 = @func_3990() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) */;
  %890 = %889.1;
  (%890,)
}

def @func_6071() -> Tensor[(10, 1, 7), bool] {
  %891 = @func_3990() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) */;
  %891.1
}

def @func_8977() -> (Tensor[(9, ?, 12), uint8],) {
  %892 = cast(meta[relay.Constant][36] /* ty=Tensor[(9, 1, 12), float32] */, dtype="float32") /* ty=Tensor[(9, 1, 12), float32] */;
  %893 = rsqrt(%892) /* ty=Tensor[(9, 1, 12), float32] */;
  %894 = cast(meta[relay.Constant][36] /* ty=Tensor[(9, 1, 12), float32] */, dtype="bool") /* ty=Tensor[(9, 1, 12), bool] */;
  %895 = shape_of(%893, dtype="int32") /* ty=Tensor[(3), int32] */;
  %896 = cast(%893, dtype="bool") /* ty=Tensor[(9, 1, 12), bool] */;
  %897 = dyn.reshape(%894, %895, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %898 = not_equal(%896, %897) /* ty=Tensor[(9, ?, 12), bool] */;
  %899 = cast(%898, dtype="uint8") /* ty=Tensor[(9, ?, 12), uint8] */;
  %900 = shape_of(%893, dtype="int32") /* ty=Tensor[(3), int32] */;
  %901 = cast(%893, dtype="uint8") /* ty=Tensor[(9, 1, 12), uint8] */;
  %902 = dyn.reshape(%899, %900, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %903 = right_shift(%901, %902) /* ty=Tensor[(9, ?, 12), uint8] */;
  (%903,)
}

def @func_7128(%var_7121: Tensor[(140), bool]) -> (Tensor[(10, 1, 7), bool], Tensor[(10, 2, 7), bool], Tensor[(140), bool]) {
  %904 = cast(%var_7121, dtype="bool") /* ty=Tensor[(140), bool] */;
  %905 = reshape(%904, newshape=[10, 2, 7]) /* ty=Tensor[(10, 2, 7), bool] */;
  %906 = @func_6071() /* ty=Tensor[(10, 1, 7), bool] */;
  %907 = @func_4067(%905) /* ty=Tensor[(10, 2, 7), bool] */;
  (%906, %907, %var_7121)
}

def @func_8134(%var_8123: Tensor[(352), uint16], %var_8124: Tensor[(1, 140), bool]) -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), float32], Tensor[(352), uint16], Tensor[(1, 140), bool]) {
  %908 = @func_4497() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %909 = cast(%var_8123, dtype="uint16") /* ty=Tensor[(352), uint16] */;
  %910 = cast(%var_8124, dtype="bool") /* ty=Tensor[(1, 140), bool] */;
  %911 = reshape(%909, newshape=[352]) /* ty=Tensor[(352), uint16] */;
  %912 = reshape(%910, newshape=[140]) /* ty=Tensor[(140), bool] */;
  %913 = @func_7446(%911, %912) /* ty=(Tensor[(10, 1, 7), float32], Tensor[(4, 11, 8), uint16], Tensor[(352), uint16], Tensor[(10, ?, 7), bool], Tensor[(140), bool]) */;
  %914 = %908.0;
  %915 = %913.0;
  (%914, %915, %var_8123, %var_8124)
}

def @func_9597() -> Tensor[(10, 1, 7), bool] {
  %916 = @func_9266() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), float32]) */;
  %916.0
}

def @func_6731() -> (Tensor[(352, 5), bool],) {
  %917 = @func_4622() /* ty=(Tensor[(352, 5), bool],) */;
  %918 = %917.0;
  (%918,)
}

def @func_3718(%var_3714: Tensor[(128), float32]) -> (Tensor[(10, 1, 7), bool], Tensor[(8, 6, 16), float32], Tensor[(128), float32]) {
  %919 = cast(%var_3714, dtype="float32") /* ty=Tensor[(128), float32] */;
  %920 = reshape(%919, newshape=[8, 1, 16]) /* ty=Tensor[(8, 1, 16), float32] */;
  %921 = @func_3684() /* ty=Tensor[(10, 1, 7), bool] */;
  %922 = @func_1253(%920) /* ty=Tensor[(8, 6, 16), float32] */;
  (%921, %922, %var_3714)
}

def @func_11398() -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) {
  %923 = @func_5550() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %924 = @func_11090() /* ty=Tensor[(10, 1, 7), bool] */;
  %925 = %923.0;
  %926 = @func_10448() /* ty=Tensor[(10, 1, 7), bool] */;
  (%924, %925, %926)
}

def @func_11576() -> Tensor[(10, 1, 7), bool] {
  @func_10922() /* ty=Tensor[(10, 1, 7), bool] */
}

def @func_10012() -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) {
  %927 = @func_6213() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %928 = @func_3836() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %929 = @func_5863() /* ty=(Tensor[(10, 1, 7), float32], Tensor[(10, 1, 7), bool]) */;
  %930 = %927.0;
  %931 = %928.0;
  %932 = %929.1;
  (%930, %931, %932)
}

def @func_11930() -> Tensor[(4, 11, 8), uint16] {
  %933 = @func_5343() /* ty=(Tensor[(4, 11, 8), uint16], Tensor[(352, 5), float64], Tensor[(352, 5), int64], Tensor[(352, 5), bool], Tensor[(10, 1, 7), bool], Tensor[(352, 5), float32]) */;
  %933.0
}

def @func_3285(%var_3281: Tensor[(140), float64]) -> (Tensor[(4, 11, 8), uint16], Tensor[(352), uint16], Tensor[(140), float64]) {
  %934 = @func_2773() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(4, 11, 8), uint16], Tensor[(352, 1), uint16]) */;
  %935 = cast(%var_3281, dtype="float64") /* ty=Tensor[(140), float64] */;
  %936 = reshape(%935, newshape=[5, 7, 4]) /* ty=Tensor[(5, 7, 4), float64] */;
  %937 = @func_2616(%936) /* ty=(Tensor[(5, 7, 4), float64], Tensor[(4, 11, 8), uint16], Tensor[(352), uint16]) */;
  %938 = %934.1;
  %939 = %937.2;
  (%938, %939, %var_3281)
}

def @func_11141() -> Tensor[(140), bool] {
  @func_10808() /* ty=Tensor[(140), bool] */
}

def @func_4280() -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) {
  %940 = @func_3990() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) */;
  %941 = @func_3228() /* ty=Tensor[(10, 1, 7), bool] */;
  %942 = %940.0;
  (%941, %942)
}

def @func_3171(%var_3157: Tensor[(10, 7, 7), bool]) -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), float32], Tensor[(10, 7, 7), int64], Tensor[(10, 1, 7), bool]) {
  %943 = @func_2773() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(4, 11, 8), uint16], Tensor[(352, 1), uint16]) */;
  %944 = @func_2848() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), float32]) */;
  %945 = %944.1;
  %946 = cast(%945, dtype="float32") /* ty=Tensor[(10, 1, 7), float32] */;
  %947 = @func_2848() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), float32]) */;
  %948 = %947.0;
  %949 = cast(%948, dtype="int64") /* ty=Tensor[(10, 1, 7), int64] */;
  %950 = cast(%var_3157, dtype="int64") /* ty=Tensor[(10, 7, 7), int64] */;
  %951 = @func_2848() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), float32]) */;
  %952 = %943.0;
  %953 = rsqrt(%946) /* ty=Tensor[(10, 1, 7), float32] */;
  %954 = right_shift(%949, %950) /* ty=Tensor[(10, 7, 7), int64] */;
  %955 = %951.0;
  (%952, %953, %954, %955)
}

def @func_7001() -> (Tensor[(352), uint16],) {
  %956 = @func_6473() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(352), uint16], Tensor[(140), float64], Tensor[(10, 1, 7), bool]) */;
  %957 = %956.2;
  (%957,)
}

def @func_10808() -> Tensor[(140), bool] {
  %958 = @func_9057() /* ty=(Tensor[(4, 11, 8), uint16], Tensor[(10, 1, 7), bool], Tensor[(140), bool], Tensor[(10, 1, 7), bool]) */;
  %958.2
}

def @func_8703() -> Tensor[(10, 1, 7), bool] {
  %959 = @func_6473() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(352), uint16], Tensor[(140), float64], Tensor[(10, 1, 7), bool]) */;
  %959.1
}

def @func_1000(%var_992: Tensor[(16, 6, 12), float64]) -> (Tensor[(16, 6, 12), float64], Tensor[(4, 11, 8), uint16], Tensor[(352), uint16]) {
  %960 = cast(%var_992, dtype="float64") /* ty=Tensor[(16, 6, 12), float64] */;
  %961 = cast(meta[relay.Constant][37] /* ty=Tensor[(352), uint16] */, dtype="uint16") /* ty=Tensor[(352), uint16] */;
  %962 = cast(meta[relay.Constant][37] /* ty=Tensor[(352), uint16] */, dtype="uint16") /* ty=Tensor[(352), uint16] */;
  %963 = reshape(%961, newshape=[4, 11, 8]) /* ty=Tensor[(4, 11, 8), uint16] */;
  %964 = reshape(%962, newshape=[4, 11, 8]) /* ty=Tensor[(4, 11, 8), uint16] */;
  %965 = acos(%960) /* ty=Tensor[(16, 6, 12), float64] */;
  %966 = @func_566(%963, %964) /* ty=Tensor[(4, 11, 8), uint16] */;
  (%965, %966, meta[relay.Constant][37] /* ty=Tensor[(352), uint16] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_3288(%var_3286: Tensor[(140), float64]) -> (Tensor[(4, 11, 8), uint16], Tensor[(352), uint16], Tensor[(140), float64]) {
  @func_3285(%var_3286) /* ty=(Tensor[(4, 11, 8), uint16], Tensor[(352), uint16], Tensor[(140), float64]) */
}

def @func_7968(%var_7967: Tensor[(140), bool]) -> (Tensor[(10, 2, 7), bool], Tensor[(140), bool], Tensor[(4, 11, 8), float64]) {
  %15 = fn (%var_7937: Tensor[(140), bool]) -> (Tensor[(10, 2, 7), bool], Tensor[(140), bool], Tensor[(4, 11, 8), float64]) {
    %0 = cast(%var_7937, dtype="bool") /* ty=Tensor[(140), bool] */;
    %1 = reshape(%0, newshape=[10, 2, 7]) /* ty=Tensor[(10, 2, 7), bool] */;
    %2 = @func_5044() /* ty=(Tensor[(4, 11, 8), uint16],) */;
    %3 = %2.0;
    %4 = cast(%3, dtype="uint16") /* ty=Tensor[(4, 11, 8), uint16] */;
    %5 = cast(%3, dtype="uint16") /* ty=Tensor[(4, 11, 8), uint16] */;
    %6 = reshape(%4, newshape=[4, 11, 8]) /* ty=Tensor[(4, 11, 8), uint16] */;
    %7 = reshape(%5, newshape=[4, 11, 8]) /* ty=Tensor[(4, 11, 8), uint16] */;
    %8 = @func_566(%6, %7) /* ty=Tensor[(4, 11, 8), uint16] */;
    %9 = cast(%8, dtype="float64") /* ty=Tensor[(4, 11, 8), float64] */;
    %10 = shape_of(%3, dtype="int32") /* ty=Tensor[(3), int32] */;
    %11 = cast(%3, dtype="float64") /* ty=Tensor[(4, 11, 8), float64] */;
    %12 = dyn.reshape(%9, %10, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %13 = @func_4067(%1) /* ty=Tensor[(10, 2, 7), bool] */;
    %14 = divide(%11, %12) /* ty=Tensor[(4, 11, 8), float64] */;
    (%13, %var_7937, %14)
  };
  %15(%var_7967) /* ty=(Tensor[(10, 2, 7), bool], Tensor[(140), bool], Tensor[(4, 11, 8), float64]) */
}

def @func_3174(%var_3172: Tensor[(10, 7, 7), bool]) -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), float32], Tensor[(10, 7, 7), int64], Tensor[(10, 1, 7), bool]) {
  @func_3171(%var_3172) /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), float32], Tensor[(10, 7, 7), int64], Tensor[(10, 1, 7), bool]) */
}

def @func_12621(%var_12600: Tensor[(10, 7, 13), float64]) -> (Tensor[(10, 7, 13), float64], Tensor[(9, ?, 12), uint8], Tensor[(16, 6, 12), float64], Tensor[(1152), float64]) {
  %16 = cast(%var_12600, dtype="float64") /* ty=Tensor[(10, 7, 13), float64] */;
  %17 = cast(meta[relay.Constant][0] /* ty=Tensor[(1152), float64] */, dtype="float64") /* ty=Tensor[(1152), float64] */;
  %18 = reshape(%17, newshape=[16, 6, 12]) /* ty=Tensor[(16, 6, 12), float64] */;
  %19 = @func_1000(%18) /* ty=(Tensor[(16, 6, 12), float64], Tensor[(4, 11, 8), uint16], Tensor[(352), uint16]) */;
  %20 = exp(%16) /* ty=Tensor[(10, 7, 13), float64] */;
  %21 = @func_11594() /* ty=Tensor[(9, ?, 12), uint8] */;
  %22 = %19.0;
  (%20, %21, %22, meta[relay.Constant][0] /* ty=Tensor[(1152), float64] */)
}

def @func_9125(%var_9124: Tensor[(48), uint16]) -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], uint16, Tensor[(48), uint16]) {
  %31 = fn (%var_9118: Tensor[(48), uint16]) -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], uint16, Tensor[(48), uint16]) {
    %23 = @func_6597() /* ty=(Tensor[(10, 1, 7), bool],) */;
    %24 = cast(meta[relay.Constant][1] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %25 = cast(%var_9118, dtype="uint16") /* ty=Tensor[(48), uint16] */;
    %26 = reshape(%24, newshape=[]) /* ty=uint16 */;
    %27 = reshape(%25, newshape=[16, 3, 1]) /* ty=Tensor[(16, 3, 1), uint16] */;
    %28 = @func_7772(%26, %27) /* ty=(Tensor[(16, 3, ?), float64], Tensor[(10, 1, 7), bool]) */;
    %29 = %23.0;
    %30 = %28.1;
    (%29, %30, meta[relay.Constant][1] /* ty=uint16 */, %var_9118)
  };
  %31(%var_9124) /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], uint16, Tensor[(48), uint16]) */
}

def @func_7772(%var_7726: uint16, %var_7727: Tensor[(16, 3, 1), uint16]) -> (Tensor[(16, 3, ?), float64], Tensor[(10, 1, 7), bool]) {
  %32 = cast(%var_7726, dtype="bool") /* ty=bool */;
  %33 = cast(%var_7727, dtype="bool") /* ty=Tensor[(16, 3, 1), bool] */;
  %34 = equal(%32, %33) /* ty=Tensor[(16, 3, 1), bool] */;
  %35 = cast(%var_7726, dtype="bool") /* ty=bool */;
  %36 = cast(%34, dtype="bool") /* ty=Tensor[(16, 3, 1), bool] */;
  %37 = less(%35, %36) /* ty=Tensor[(16, 3, 1), bool] */;
  %38 = cast(%37, dtype="int8") /* ty=Tensor[(16, 3, 1), int8] */;
  %39 = shape_of(%34, dtype="int32") /* ty=Tensor[(3), int32] */;
  %40 = cast(%34, dtype="int8") /* ty=Tensor[(16, 3, 1), int8] */;
  %41 = dyn.reshape(%38, %39, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %42 = multiply(%40, %41) /* ty=Tensor[(16, 3, ?), int8] */;
  %43 = cast(%42, dtype="float64") /* ty=Tensor[(16, 3, ?), float64] */;
  %44 = @func_2698() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %45 = sigmoid(%43) /* ty=Tensor[(16, 3, ?), float64] */;
  %46 = %44.0;
  (%45, %46)
}

def @func_11090() -> Tensor[(10, 1, 7), bool] {
  %47 = @func_8264() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) */;
  %47.0
}

def @func_6763(%var_6762: Tensor[(11, 8, 9), float32]) -> (Tensor[(11, 8, 9), float32],) {
  %50 = fn (%var_6756: Tensor[(11, 8, 9), float32]) -> (Tensor[(11, 8, 9), float32],) {
    %48 = cast(%var_6756, dtype="float32") /* ty=Tensor[(11, 8, 9), float32] */;
    %49 = sinh(%48) /* ty=Tensor[(11, 8, 9), float32] */;
    (%49,)
  };
  %50(%var_6762) /* ty=(Tensor[(11, 8, 9), float32],) */
}

def @func_10922() -> Tensor[(10, 1, 7), bool] {
  @func_4803() /* ty=Tensor[(10, 1, 7), bool] */
}

def @func_8571() -> (Tensor[(10, 1, 7), float32],) {
  %53 = fn () -> (Tensor[(10, 1, 7), float32],) {
    %51 = @func_5863() /* ty=(Tensor[(10, 1, 7), float32], Tensor[(10, 1, 7), bool]) */;
    %52 = %51.0;
    (%52,)
  };
  %53() /* ty=(Tensor[(10, 1, 7), float32],) */
}

def @func_11398() -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) {
  %54 = @func_5550() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %55 = @func_11090() /* ty=Tensor[(10, 1, 7), bool] */;
  %56 = %54.0;
  %57 = @func_10448() /* ty=Tensor[(10, 1, 7), bool] */;
  (%55, %56, %57)
}

def @func_7592() -> (Tensor[(10, 1, 7), bool], Tensor[(352, 6), int16], Tensor[(2112), float32], Tensor[(10, 1, 7), float64]) {
  %64 = fn () -> (Tensor[(10, 1, 7), bool], Tensor[(352, 6), int16], Tensor[(2112), float32], Tensor[(10, 1, 7), float64]) {
    %58 = cast(meta[relay.Constant][2] /* ty=Tensor[(2112), float32] */, dtype="float32") /* ty=Tensor[(2112), float32] */;
    %59 = reshape(%58, newshape=[352, 6]) /* ty=Tensor[(352, 6), float32] */;
    %60 = @func_4460(%59) /* ty=(Tensor[(352, 6), bool], Tensor[(352, 6), int16]) */;
    %61 = @func_6779() /* ty=Tensor[(10, 1, 7), bool] */;
    %62 = %60.1;
    %63 = @func_4296() /* ty=Tensor[(10, 1, 7), float64] */;
    (%61, %62, meta[relay.Constant][2] /* ty=Tensor[(2112), float32] */, %63)
  };
  %64() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(352, 6), int16], Tensor[(2112), float32], Tensor[(10, 1, 7), float64]) */
}

def @func_9598() -> Tensor[(10, 1, 7), bool] {
  %66 = fn () -> Tensor[(10, 1, 7), bool] {
    %65 = @func_9266() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), float32]) */;
    %65.0
  };
  %66() /* ty=Tensor[(10, 1, 7), bool] */
}

def @func_10501() -> (Tensor[(9, ?, 12), uint8], Tensor[(352, 5), bool]) {
  %67 = @func_8977() /* ty=(Tensor[(9, ?, 12), uint8],) */;
  %68 = @func_4878() /* ty=(Tensor[(10, 1, 7), float32], Tensor[(352, 5), bool]) */;
  %69 = %67.0;
  %70 = %68.1;
  (%69, %70)
}

def @func_2700() -> (Tensor[(10, 1, 7), bool],) {
  @func_2698() /* ty=(Tensor[(10, 1, 7), bool],) */
}

def @func_11708() -> Tensor[(10, 1, 7), bool] {
  %72 = fn () -> Tensor[(10, 1, 7), bool] {
    %71 = @func_10755() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 2, 7), int8], Tensor[(140), bool], Tensor[(10, 1, 7), bool]) */;
    %71.3
  };
  %72() /* ty=Tensor[(10, 1, 7), bool] */
}

def @func_5653() -> (Tensor[(10, 1, 7), bool], Tensor[(352, 5), bool], Tensor[(10, 1, 7), bool], Tensor[(288, 4), float64], Tensor[(10, 1, 7), bool], Tensor[(352, 5), float64], Tensor[(10, ?, 7), bool], Tensor[(352, 5), float64]) {
  %89 = fn () -> (Tensor[(10, 1, 7), bool], Tensor[(352, 5), bool], Tensor[(10, 1, 7), bool], Tensor[(288, 4), float64], Tensor[(10, 1, 7), bool], Tensor[(352, 5), float64], Tensor[(10, ?, 7), bool], Tensor[(352, 5), float64]) {
    %73 = @func_3836() /* ty=(Tensor[(10, 1, 7), bool],) */;
    %74 = @func_4622() /* ty=(Tensor[(352, 5), bool],) */;
    %75 = cast(meta[relay.Constant][3] /* ty=Tensor[(288, 4), float64] */, dtype="float64") /* ty=Tensor[(288, 4), float64] */;
    %76 = reshape(%75, newshape=[1152]) /* ty=Tensor[(1152), float64] */;
    %77 = @func_2892(%76) /* ty=(Tensor[(10, 1, 7), bool], Tensor[(352), uint16], Tensor[(1152), float64]) */;
    %78 = @func_5550() /* ty=(Tensor[(10, 1, 7), bool],) */;
    %79 = %78.0;
    %80 = cast(%79, dtype="bool") /* ty=Tensor[(10, 1, 7), bool] */;
    %81 = reshape(%80, newshape=[10, 1, 7]) /* ty=Tensor[(10, 1, 7), bool] */;
    %82 = @func_3917(%81) /* ty=(Tensor[(10, ?, 7), bool],) */;
    %83 = %73.0;
    %84 = %74.0;
    %85 = %77.0;
    %86 = @func_5433() /* ty=Tensor[(352, 5), float64] */;
    %87 = %82.0;
    %88 = @func_5433() /* ty=Tensor[(352, 5), float64] */;
    (%83, %84, %85, meta[relay.Constant][3] /* ty=Tensor[(288, 4), float64] */, %79, %86, %87, %88)
  };
  %89() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(352, 5), bool], Tensor[(10, 1, 7), bool], Tensor[(288, 4), float64], Tensor[(10, 1, 7), bool], Tensor[(352, 5), float64], Tensor[(10, ?, 7), bool], Tensor[(352, 5), float64]) */
}

def @func_4230(%var_4229: Tensor[(10, 2, 7), bool]) -> (Tensor[(10, 2, 7), float32], Tensor[(4, 11, 8), uint16], Tensor[(352), uint16], Tensor[(10, ?, 7), bool]) {
  %107 = fn (%var_4174: Tensor[(10, 2, 7), bool]) -> (Tensor[(10, 2, 7), float32], Tensor[(4, 11, 8), uint16], Tensor[(352), uint16], Tensor[(10, ?, 7), bool]) {
    %90 = @func_3836() /* ty=(Tensor[(10, 1, 7), bool],) */;
    %91 = %90.0;
    %92 = cast(%91, dtype="float32") /* ty=Tensor[(10, 1, 7), float32] */;
    %93 = cast(%var_4174, dtype="float32") /* ty=Tensor[(10, 2, 7), float32] */;
    %94 = cast(meta[relay.Constant][4] /* ty=Tensor[(352), uint16] */, dtype="uint16") /* ty=Tensor[(352), uint16] */;
    %95 = cast(meta[relay.Constant][4] /* ty=Tensor[(352), uint16] */, dtype="uint16") /* ty=Tensor[(352), uint16] */;
    %96 = reshape(%94, newshape=[4, 11, 8]) /* ty=Tensor[(4, 11, 8), uint16] */;
    %97 = reshape(%95, newshape=[4, 11, 8]) /* ty=Tensor[(4, 11, 8), uint16] */;
    %98 = @func_3017() /* ty=Tensor[(10, 1, 7), bool] */;
    %99 = @func_3017() /* ty=Tensor[(10, 1, 7), bool] */;
    %100 = cast(%99, dtype="bool") /* ty=Tensor[(10, 1, 7), bool] */;
    %101 = shape_of(%98, dtype="int32") /* ty=Tensor[(3), int32] */;
    %102 = cast(%98, dtype="bool") /* ty=Tensor[(10, 1, 7), bool] */;
    %103 = dyn.reshape(%100, %101, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %104 = floor_divide(%92, %93) /* ty=Tensor[(10, 2, 7), float32] */;
    %105 = @func_566(%96, %97) /* ty=Tensor[(4, 11, 8), uint16] */;
    %106 = greater_equal(%102, %103) /* ty=Tensor[(10, ?, 7), bool] */;
    (%104, %105, meta[relay.Constant][4] /* ty=Tensor[(352), uint16] */, %106)
  };
  %107(%var_4229) /* ty=(Tensor[(10, 2, 7), float32], Tensor[(4, 11, 8), uint16], Tensor[(352), uint16], Tensor[(10, ?, 7), bool]) */
}

def @func_7631() -> Tensor[(10, 1, 7), bool] {
  %108 = fn () -> Tensor[(10, 1, 7), bool] {
    @func_3640() /* ty=Tensor[(10, 1, 7), bool] */
  };
  %108() /* ty=Tensor[(10, 1, 7), bool] */
}

def @func_3962() -> Tensor[(10, 1, 7), bool] {
  %109 = fn () -> Tensor[(10, 1, 7), bool] {
    @func_3640() /* ty=Tensor[(10, 1, 7), bool] */
  };
  %109() /* ty=Tensor[(10, 1, 7), bool] */
}

def @func_5550() -> (Tensor[(10, 1, 7), bool],) {
  %110 = @func_4803() /* ty=Tensor[(10, 1, 7), bool] */;
  (%110,)
}

def @func_5552() -> (Tensor[(10, 1, 7), bool],) {
  @func_5550() /* ty=(Tensor[(10, 1, 7), bool],) */
}

def @func_5265() -> (Tensor[(10, 1, 7), float32], Tensor[(352, 5), bool]) {
  @func_5263() /* ty=(Tensor[(10, 1, 7), float32], Tensor[(352, 5), bool]) */
}

def @func_8134(%var_8123: Tensor[(352), uint16], %var_8124: Tensor[(1, 140), bool]) -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), float32], Tensor[(352), uint16], Tensor[(1, 140), bool]) {
  %111 = @func_4497() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %112 = cast(%var_8123, dtype="uint16") /* ty=Tensor[(352), uint16] */;
  %113 = cast(%var_8124, dtype="bool") /* ty=Tensor[(1, 140), bool] */;
  %114 = reshape(%112, newshape=[352]) /* ty=Tensor[(352), uint16] */;
  %115 = reshape(%113, newshape=[140]) /* ty=Tensor[(140), bool] */;
  %116 = @func_7446(%114, %115) /* ty=(Tensor[(10, 1, 7), float32], Tensor[(4, 11, 8), uint16], Tensor[(352), uint16], Tensor[(10, ?, 7), bool], Tensor[(140), bool]) */;
  %117 = %111.0;
  %118 = %116.0;
  (%117, %118, %var_8123, %var_8124)
}

def @func_2698() -> (Tensor[(10, 1, 7), bool],) {
  %119 = cast(meta[relay.Constant][5] /* ty=uint16 */, dtype="bool") /* ty=bool */;
  %120 = cast(meta[relay.Constant][6] /* ty=Tensor[(10, 1, 7), uint16] */, dtype="bool") /* ty=Tensor[(10, 1, 7), bool] */;
  %121 = less_equal(%119, %120) /* ty=Tensor[(10, 1, 7), bool] */;
  (%121,)
}

def @func_12816() -> Tensor[(10, 1, 7), bool] {
  %123 = fn () -> Tensor[(10, 1, 7), bool] {
    %122 = @func_3761() /* ty=(Tensor[(10, 1, 7), bool],) */;
    %122.0
  };
  %123() /* ty=Tensor[(10, 1, 7), bool] */
}

def @func_10425() -> (Tensor[(352, 5), bool], Tensor[(10, 1, 7), bool]) {
  @func_10423() /* ty=(Tensor[(352, 5), bool], Tensor[(10, 1, 7), bool]) */
}

def @func_2775() -> (Tensor[(10, 1, 7), bool], Tensor[(4, 11, 8), uint16], Tensor[(352, 1), uint16]) {
  @func_2773() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(4, 11, 8), uint16], Tensor[(352, 1), uint16]) */
}

def @func_8389() -> (Tensor[(10, 1, 7), bool],) {
  %124 = @func_8264() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) */;
  %125 = %124.1;
  (%125,)
}

def @func_5744() -> Tensor[(10, ?, 7), int16] {
  %133 = fn () -> Tensor[(10, ?, 7), int16] {
    %126 = @func_3836() /* ty=(Tensor[(10, 1, 7), bool],) */;
    %127 = %126.0;
    %128 = @func_3640() /* ty=Tensor[(10, 1, 7), bool] */;
    %129 = cast(%128, dtype="int16") /* ty=Tensor[(10, 1, 7), int16] */;
    %130 = shape_of(%127, dtype="int32") /* ty=Tensor[(3), int32] */;
    %131 = cast(%127, dtype="int16") /* ty=Tensor[(10, 1, 7), int16] */;
    %132 = dyn.reshape(%129, %130, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    maximum(%131, %132) /* ty=Tensor[(10, ?, 7), int16] */
  };
  %133() /* ty=Tensor[(10, ?, 7), int16] */
}

def @func_4803() -> Tensor[(10, 1, 7), bool] {
  @func_3961() /* ty=Tensor[(10, 1, 7), bool] */
}

def @func_4993(%var_4992: Tensor[(5, 28), bool]) -> (Tensor[(10, ?, 7), bool], Tensor[(10, 1, 7), float64], Tensor[(10, ?, 7), bool], Tensor[(5, 28), bool]) {
  %149 = fn (%var_4988: Tensor[(5, 28), bool]) -> (Tensor[(10, ?, 7), bool], Tensor[(10, 1, 7), float64], Tensor[(10, ?, 7), bool], Tensor[(5, 28), bool]) {
    %134 = @func_3990() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) */;
    %135 = %134.1;
    %136 = cast(%135, dtype="float64") /* ty=Tensor[(10, 1, 7), float64] */;
    %137 = sigmoid(%136) /* ty=Tensor[(10, 1, 7), float64] */;
    %138 = cast(%135, dtype="bool") /* ty=Tensor[(10, 1, 7), bool] */;
    %139 = shape_of(%137, dtype="int32") /* ty=Tensor[(3), int32] */;
    %140 = cast(%137, dtype="bool") /* ty=Tensor[(10, 1, 7), bool] */;
    %141 = dyn.reshape(%138, %139, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %142 = @func_3385() /* ty=(Tensor[(10, 1, 7), float64], Tensor[(10, 1, 7), float32]) */;
    %143 = cast(%var_4988, dtype="bool") /* ty=Tensor[(5, 28), bool] */;
    %144 = reshape(%143, newshape=[10, 2, 7]) /* ty=Tensor[(10, 2, 7), bool] */;
    %145 = @func_4228(%144) /* ty=(Tensor[(10, 2, 7), float32], Tensor[(4, 11, 8), uint16], Tensor[(352), uint16], Tensor[(10, ?, 7), bool]) */;
    %146 = not_equal(%140, %141) /* ty=Tensor[(10, ?, 7), bool] */;
    %147 = %142.0;
    %148 = %145.3;
    (%146, %147, %148, %var_4988)
  };
  %149(%var_4992) /* ty=(Tensor[(10, ?, 7), bool], Tensor[(10, 1, 7), float64], Tensor[(10, ?, 7), bool], Tensor[(5, 28), bool]) */
}

def @func_3385() -> (Tensor[(10, 1, 7), float64], Tensor[(10, 1, 7), float32]) {
  %150 = @func_2698() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %151 = %150.0;
  %152 = cast(%151, dtype="float64") /* ty=Tensor[(10, 1, 7), float64] */;
  %153 = cast(%151, dtype="float64") /* ty=Tensor[(10, 1, 7), float64] */;
  %154 = atanh(%153) /* ty=Tensor[(10, 1, 7), float64] */;
  %155 = cast(%154, dtype="float32") /* ty=Tensor[(10, 1, 7), float32] */;
  %156 = cos(%152) /* ty=Tensor[(10, 1, 7), float64] */;
  %157 = cosh(%155) /* ty=Tensor[(10, 1, 7), float32] */;
  (%156, %157)
}

def @func_10423() -> (Tensor[(352, 5), bool], Tensor[(10, 1, 7), bool]) {
  %158 = @func_6731() /* ty=(Tensor[(352, 5), bool],) */;
  %159 = %158.0;
  %160 = @func_7135() /* ty=Tensor[(10, 1, 7), bool] */;
  (%159, %160)
}

def @func_5863() -> (Tensor[(10, 1, 7), float32], Tensor[(10, 1, 7), bool]) {
  %161 = @func_5679() /* ty=Tensor[(10, 1, 7), float32] */;
  %162 = @func_4744() /* ty=Tensor[(10, 1, 7), bool] */;
  (%161, %162)
}

def @func_11092() -> Tensor[(10, 1, 7), bool] {
  @func_11090() /* ty=Tensor[(10, 1, 7), bool] */
}

def @func_2618(%var_2617: Tensor[(5, 7, 4), float64]) -> (Tensor[(5, 7, 4), float64], Tensor[(4, 11, 8), uint16], Tensor[(352), uint16]) {
  %170 = fn (%var_2589: Tensor[(5, 7, 4), float64]) -> (Tensor[(5, 7, 4), float64], Tensor[(4, 11, 8), uint16], Tensor[(352), uint16]) {
    %163 = cast(%var_2589, dtype="float64") /* ty=Tensor[(5, 7, 4), float64] */;
    %164 = cast(meta[relay.Constant][7] /* ty=Tensor[(352), uint16] */, dtype="uint16") /* ty=Tensor[(352), uint16] */;
    %165 = cast(meta[relay.Constant][7] /* ty=Tensor[(352), uint16] */, dtype="uint16") /* ty=Tensor[(352), uint16] */;
    %166 = reshape(%164, newshape=[4, 11, 8]) /* ty=Tensor[(4, 11, 8), uint16] */;
    %167 = reshape(%165, newshape=[4, 11, 8]) /* ty=Tensor[(4, 11, 8), uint16] */;
    %168 = asin(%163) /* ty=Tensor[(5, 7, 4), float64] */;
    %169 = @func_566(%166, %167) /* ty=Tensor[(4, 11, 8), uint16] */;
    (%168, %169, meta[relay.Constant][7] /* ty=Tensor[(352), uint16] */)
  };
  %170(%var_2617) /* ty=(Tensor[(5, 7, 4), float64], Tensor[(4, 11, 8), uint16], Tensor[(352), uint16]) */
}

def @func_7156() -> (Tensor[(10, ?, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) {
  %171 = @func_3684() /* ty=Tensor[(10, 1, 7), bool] */;
  %172 = cast(meta[relay.Constant][8] /* ty=Tensor[(10, 1, 7), bool] */, dtype="bool") /* ty=Tensor[(10, 1, 7), bool] */;
  %173 = shape_of(%171, dtype="int32") /* ty=Tensor[(3), int32] */;
  %174 = cast(%171, dtype="bool") /* ty=Tensor[(10, 1, 7), bool] */;
  %175 = dyn.reshape(%172, %173, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %176 = @func_3761() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %177 = @func_6126() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(352), uint16], Tensor[(1152), float64]) */;
  %178 = equal(%174, %175) /* ty=Tensor[(10, ?, 7), bool] */;
  %179 = %176.0;
  %180 = @func_5048() /* ty=Tensor[(10, 1, 7), bool] */;
  %181 = %177.0;
  (%178, %179, %180, %181)
}

def @func_3285(%var_3281: Tensor[(140), float64]) -> (Tensor[(4, 11, 8), uint16], Tensor[(352), uint16], Tensor[(140), float64]) {
  %182 = @func_2773() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(4, 11, 8), uint16], Tensor[(352, 1), uint16]) */;
  %183 = cast(%var_3281, dtype="float64") /* ty=Tensor[(140), float64] */;
  %184 = reshape(%183, newshape=[5, 7, 4]) /* ty=Tensor[(5, 7, 4), float64] */;
  %185 = @func_2616(%184) /* ty=(Tensor[(5, 7, 4), float64], Tensor[(4, 11, 8), uint16], Tensor[(352), uint16]) */;
  %186 = %182.1;
  %187 = %185.2;
  (%186, %187, %var_3281)
}

def @func_10184() -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) {
  @func_10182() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) */
}

def @func_6891(%var_6860: Tensor[(70, 2), bool], %var_6861: Tensor[(490), bool]) -> (Tensor[(10, 1, 7), float32], Tensor[(10, ?, 7), bool], Tensor[(70, 2), bool], Tensor[(490), bool], Tensor[(10, 1, 7), bool]) {
  %188 = @func_3385() /* ty=(Tensor[(10, 1, 7), float64], Tensor[(10, 1, 7), float32]) */;
  %189 = cast(%var_6860, dtype="bool") /* ty=Tensor[(70, 2), bool] */;
  %190 = cast(%var_6861, dtype="bool") /* ty=Tensor[(490), bool] */;
  %191 = reshape(%189, newshape=[140]) /* ty=Tensor[(140), bool] */;
  %192 = reshape(%190, newshape=[490]) /* ty=Tensor[(490), bool] */;
  %193 = @func_6370(%191, %192) /* ty=(Tensor[(10, ?, 7), bool], Tensor[(140), bool], Tensor[(1, 1, 9), uint64], Tensor[(10, 1, 7), bool], Tensor[(490), bool]) */;
  %194 = @func_2698() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %195 = %188.1;
  %196 = %193.0;
  %197 = %194.0;
  (%195, %196, %var_6860, %var_6861, %197)
}

def @func_11014() -> Tensor[(10, 1, 7), bool] {
  %198 = @func_6154() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, ?, 7), bool]) */;
  %198.0
}

def @func_10503() -> (Tensor[(9, ?, 12), uint8], Tensor[(352, 5), bool]) {
  @func_10501() /* ty=(Tensor[(9, ?, 12), uint8], Tensor[(352, 5), bool]) */
}

def @func_7449(%var_7447: Tensor[(352), uint16], %var_7448: Tensor[(140), bool]) -> (Tensor[(10, 1, 7), float32], Tensor[(4, 11, 8), uint16], Tensor[(352), uint16], Tensor[(10, ?, 7), bool], Tensor[(140), bool]) {
  %210 = fn (%var_7404: Tensor[(352), uint16], %var_7436: Tensor[(140), bool]) -> (Tensor[(10, 1, 7), float32], Tensor[(4, 11, 8), uint16], Tensor[(352), uint16], Tensor[(10, ?, 7), bool], Tensor[(140), bool]) {
    %199 = @func_3385() /* ty=(Tensor[(10, 1, 7), float64], Tensor[(10, 1, 7), float32]) */;
    %200 = cast(%var_7404, dtype="uint16") /* ty=Tensor[(352), uint16] */;
    %201 = cast(%var_7404, dtype="uint16") /* ty=Tensor[(352), uint16] */;
    %202 = reshape(%200, newshape=[4, 11, 8]) /* ty=Tensor[(4, 11, 8), uint16] */;
    %203 = reshape(%201, newshape=[4, 11, 8]) /* ty=Tensor[(4, 11, 8), uint16] */;
    %204 = cast(%var_7436, dtype="bool") /* ty=Tensor[(140), bool] */;
    %205 = reshape(%204, newshape=[10, 2, 7]) /* ty=Tensor[(10, 2, 7), bool] */;
    %206 = @func_4228(%205) /* ty=(Tensor[(10, 2, 7), float32], Tensor[(4, 11, 8), uint16], Tensor[(352), uint16], Tensor[(10, ?, 7), bool]) */;
    %207 = %199.1;
    %208 = @func_566(%202, %203) /* ty=Tensor[(4, 11, 8), uint16] */;
    %209 = %206.3;
    (%207, %208, %var_7404, %209, %var_7436)
  };
  %210(%var_7447, %var_7448) /* ty=(Tensor[(10, 1, 7), float32], Tensor[(4, 11, 8), uint16], Tensor[(352), uint16], Tensor[(10, ?, 7), bool], Tensor[(140), bool]) */
}

def @func_9938(%var_9937: Tensor[(140), bool]) -> (Tensor[(352, 5), bool], Tensor[(4, 11, 8), uint16], Tensor[(352), uint16], Tensor[(140), bool]) {
  %219 = fn (%var_9927: Tensor[(140), bool]) -> (Tensor[(352, 5), bool], Tensor[(4, 11, 8), uint16], Tensor[(352), uint16], Tensor[(140), bool]) {
    %211 = @func_7461() /* ty=(Tensor[(352, 5), bool],) */;
    %212 = cast(meta[relay.Constant][9] /* ty=Tensor[(352), uint16] */, dtype="uint16") /* ty=Tensor[(352), uint16] */;
    %213 = cast(%var_9927, dtype="bool") /* ty=Tensor[(140), bool] */;
    %214 = reshape(%212, newshape=[352]) /* ty=Tensor[(352), uint16] */;
    %215 = reshape(%213, newshape=[140]) /* ty=Tensor[(140), bool] */;
    %216 = @func_7446(%214, %215) /* ty=(Tensor[(10, 1, 7), float32], Tensor[(4, 11, 8), uint16], Tensor[(352), uint16], Tensor[(10, ?, 7), bool], Tensor[(140), bool]) */;
    %217 = %211.0;
    %218 = %216.1;
    (%217, %218, meta[relay.Constant][9] /* ty=Tensor[(352), uint16] */, %var_9927)
  };
  %219(%var_9937) /* ty=(Tensor[(352, 5), bool], Tensor[(4, 11, 8), uint16], Tensor[(352), uint16], Tensor[(140), bool]) */
}

def @func_11595() -> Tensor[(9, ?, 12), uint8] {
  %221 = fn () -> Tensor[(9, ?, 12), uint8] {
    %220 = @func_8977() /* ty=(Tensor[(9, ?, 12), uint8],) */;
    %220.0
  };
  %221() /* ty=Tensor[(9, ?, 12), uint8] */
}

def @func_9754() -> (Tensor[(10, 1, 7), bool],) {
  %224 = fn () -> (Tensor[(10, 1, 7), bool],) {
    %222 = @func_9305() /* ty=(Tensor[(10, 1, 7), bool],) */;
    %223 = %222.0;
    (%223,)
  };
  %224() /* ty=(Tensor[(10, 1, 7), bool],) */
}

def @func_6214() -> (Tensor[(10, 1, 7), bool],) {
  %227 = fn () -> (Tensor[(10, 1, 7), bool],) {
    %225 = @func_3990() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) */;
    %226 = %225.1;
    (%226,)
  };
  %227() /* ty=(Tensor[(10, 1, 7), bool],) */
}

def @func_6370(%var_6335: Tensor[(140), bool], %var_6365: Tensor[(490), bool]) -> (Tensor[(10, ?, 7), bool], Tensor[(140), bool], Tensor[(1, 1, 9), uint64], Tensor[(10, 1, 7), bool], Tensor[(490), bool]) {
  %228 = cast(%var_6335, dtype="bool") /* ty=Tensor[(140), bool] */;
  %229 = reshape(%228, newshape=[5, 28]) /* ty=Tensor[(5, 28), bool] */;
  %230 = @func_4991(%229) /* ty=(Tensor[(10, ?, 7), bool], Tensor[(10, 1, 7), float64], Tensor[(10, ?, 7), bool], Tensor[(5, 28), bool]) */;
  %231 = cast(-7.76439f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %232 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 1, 9), float32] */, dtype="float32") /* ty=Tensor[(1, 1, 9), float32] */;
  %233 = power(%231, %232) /* ty=Tensor[(1, 1, 9), float32] */;
  %234 = cast(%233, dtype="uint64") /* ty=Tensor[(1, 1, 9), uint64] */;
  %235 = cast(-7.76439f /* ty=float32 */, dtype="uint64") /* ty=uint64 */;
  %236 = cast(%var_6365, dtype="bool") /* ty=Tensor[(490), bool] */;
  %237 = reshape(%236, newshape=[10, 7, 7]) /* ty=Tensor[(10, 7, 7), bool] */;
  %238 = @func_3171(%237) /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), float32], Tensor[(10, 7, 7), int64], Tensor[(10, 1, 7), bool]) */;
  %239 = %230.2;
  %240 = right_shift(%234, %235) /* ty=Tensor[(1, 1, 9), uint64] */;
  %241 = %238.3;
  (%239, %var_6335, %240, %241, %var_6365)
}

def @func_4298() -> Tensor[(10, 1, 7), float64] {
  @func_4296() /* ty=Tensor[(10, 1, 7), float64] */
}

def @func_12278() -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(140), bool], Tensor[(10, 1, 7), bool], Tensor[(9, ?, 12), bool], Tensor[(352, 5), float64]) {
  @func_12276() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(140), bool], Tensor[(10, 1, 7), bool], Tensor[(9, ?, 12), bool], Tensor[(352, 5), float64]) */
}

def @func_3836() -> (Tensor[(10, 1, 7), bool],) {
  %242 = @func_3640() /* ty=Tensor[(10, 1, 7), bool] */;
  (%242,)
}

def @func_9268() -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), float32]) {
  @func_9266() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), float32]) */
}

def @func_7158() -> (Tensor[(10, ?, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) {
  @func_7156() /* ty=(Tensor[(10, ?, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) */
}

def @func_8056(%var_8054: Tensor[(5, 28), float64], %var_8055: Tensor[(88), float64]) -> (Tensor[(352, 5), bool], Tensor[(352), uint16], Tensor[(5, 28), float64], Tensor[(88, 1), float64], Tensor[(490), bool], Tensor[(88), float64]) {
  %255 = fn (%var_8047: Tensor[(5, 28), float64], %var_8051: Tensor[(88), float64]) -> (Tensor[(352, 5), bool], Tensor[(352), uint16], Tensor[(5, 28), float64], Tensor[(88, 1), float64], Tensor[(490), bool], Tensor[(88), float64]) {
    %243 = @func_7461() /* ty=(Tensor[(352, 5), bool],) */;
    %244 = cast(%var_8047, dtype="float64") /* ty=Tensor[(5, 28), float64] */;
    %245 = reshape(%244, newshape=[5, 7, 4]) /* ty=Tensor[(5, 7, 4), float64] */;
    %246 = @func_2616(%245) /* ty=(Tensor[(5, 7, 4), float64], Tensor[(4, 11, 8), uint16], Tensor[(352), uint16]) */;
    %247 = cast(meta[relay.Constant][11] /* ty=Tensor[(490), bool] */, dtype="bool") /* ty=Tensor[(490), bool] */;
    %248 = cast(%var_8051, dtype="float64") /* ty=Tensor[(88), float64] */;
    %249 = reshape(%247, newshape=[490]) /* ty=Tensor[(490), bool] */;
    %250 = reshape(%248, newshape=[88, 1]) /* ty=Tensor[(88, 1), float64] */;
    %251 = @func_3337(%249, %250) /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(490), bool], Tensor[(11, 2, 4), float64], Tensor[(88, 1), float64]) */;
    %252 = %243.0;
    %253 = %246.2;
    %254 = %251.4;
    (%252, %253, %var_8047, %254, meta[relay.Constant][11] /* ty=Tensor[(490), bool] */, %var_8051)
  };
  %255(%var_8054, %var_8055) /* ty=(Tensor[(352, 5), bool], Tensor[(352), uint16], Tensor[(5, 28), float64], Tensor[(88, 1), float64], Tensor[(490), bool], Tensor[(88), float64]) */
}

def @func_8904() -> (Tensor[(10, 1, 7), bool],) {
  %256 = @func_3017() /* ty=Tensor[(10, 1, 7), bool] */;
  (%256,)
}

def @func_12533(%var_12531: Tensor[(10, 352, 7), float64]) -> (Tensor[(10, 352, 7), uint64], Tensor[(4, 12, 3), int64], Tensor[(10, 352, 7), float32], Tensor[(352, 5), bool], Tensor[(10, 352, 7), float32]) {
  @func_12530(%var_12531) /* ty=(Tensor[(10, 352, 7), uint64], Tensor[(4, 12, 3), int64], Tensor[(10, 352, 7), float32], Tensor[(352, 5), bool], Tensor[(10, 352, 7), float32]) */
}

def @func_4296() -> Tensor[(10, 1, 7), float64] {
  %257 = @func_3761() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %258 = %257.0;
  %259 = cast(%258, dtype="float64") /* ty=Tensor[(10, 1, 7), float64] */;
  sqrt(%259) /* ty=Tensor[(10, 1, 7), float64] */
}

def @func_6374(%var_6372: Tensor[(140), bool], %var_6373: Tensor[(490), bool]) -> (Tensor[(10, ?, 7), bool], Tensor[(140), bool], Tensor[(1, 1, 9), uint64], Tensor[(10, 1, 7), bool], Tensor[(490), bool]) {
  @func_6370(%var_6372, %var_6373) /* ty=(Tensor[(10, ?, 7), bool], Tensor[(140), bool], Tensor[(1, 1, 9), uint64], Tensor[(10, 1, 7), bool], Tensor[(490), bool]) */
}

def @func_8977() -> (Tensor[(9, ?, 12), uint8],) {
  %260 = cast(meta[relay.Constant][12] /* ty=Tensor[(9, 1, 12), float32] */, dtype="float32") /* ty=Tensor[(9, 1, 12), float32] */;
  %261 = rsqrt(%260) /* ty=Tensor[(9, 1, 12), float32] */;
  %262 = cast(meta[relay.Constant][12] /* ty=Tensor[(9, 1, 12), float32] */, dtype="bool") /* ty=Tensor[(9, 1, 12), bool] */;
  %263 = shape_of(%261, dtype="int32") /* ty=Tensor[(3), int32] */;
  %264 = cast(%261, dtype="bool") /* ty=Tensor[(9, 1, 12), bool] */;
  %265 = dyn.reshape(%262, %263, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %266 = not_equal(%264, %265) /* ty=Tensor[(9, ?, 12), bool] */;
  %267 = cast(%266, dtype="uint8") /* ty=Tensor[(9, ?, 12), uint8] */;
  %268 = shape_of(%261, dtype="int32") /* ty=Tensor[(3), int32] */;
  %269 = cast(%261, dtype="uint8") /* ty=Tensor[(9, 1, 12), uint8] */;
  %270 = dyn.reshape(%267, %268, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %271 = right_shift(%269, %270) /* ty=Tensor[(9, ?, 12), uint8] */;
  (%271,)
}

def @func_7128(%var_7121: Tensor[(140), bool]) -> (Tensor[(10, 1, 7), bool], Tensor[(10, 2, 7), bool], Tensor[(140), bool]) {
  %272 = cast(%var_7121, dtype="bool") /* ty=Tensor[(140), bool] */;
  %273 = reshape(%272, newshape=[10, 2, 7]) /* ty=Tensor[(10, 2, 7), bool] */;
  %274 = @func_6071() /* ty=Tensor[(10, 1, 7), bool] */;
  %275 = @func_4067(%273) /* ty=Tensor[(10, 2, 7), bool] */;
  (%274, %275, %var_7121)
}

def @func_5232(%var_5229: Tensor[(14, 3, 4), int8], %var_5230: Tensor[(14, 3, 4), int8], %var_5231: Tensor[(2112), float32]) -> (Tensor[(14, 3, 4), int8], Tensor[(14, 3, 4), float32], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(352, 6), bool], Tensor[(2112), float32], Tensor[(10, 1, 7), bool]) {
  %295 = fn (%var_5154: Tensor[(14, 3, 4), int8], %var_5177: Tensor[(14, 3, 4), int8], %var_5219: Tensor[(2112), float32]) -> (Tensor[(14, 3, 4), int8], Tensor[(14, 3, 4), float32], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(352, 6), bool], Tensor[(2112), float32], Tensor[(10, 1, 7), bool]) {
    %276 = cast(meta[relay.Constant][13] /* ty=Tensor[(14, 3, 4), int8] */, dtype="int8") /* ty=Tensor[(14, 3, 4), int8] */;
    %277 = shape_of(%var_5154, dtype="int32") /* ty=Tensor[(3), int32] */;
    %278 = cast(%var_5154, dtype="int8") /* ty=Tensor[(14, 3, 4), int8] */;
    %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %280 = cast(%var_5177, dtype="float32") /* ty=Tensor[(14, 3, 4), float32] */;
    %281 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(14, 3, 4), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %282 = cast(meta[relay.Constant][13] /* ty=Tensor[(14, 3, 4), int8] */, dtype="float32") /* ty=Tensor[(14, 3, 4), float32] */;
    %283 = dyn.reshape(%280, %281, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %284 = @func_3761() /* ty=(Tensor[(10, 1, 7), bool],) */;
    %285 = cast(%var_5219, dtype="float32") /* ty=Tensor[(2112), float32] */;
    %286 = reshape(%285, newshape=[352, 6]) /* ty=Tensor[(352, 6), float32] */;
    %287 = @func_4460(%286) /* ty=(Tensor[(352, 6), bool], Tensor[(352, 6), int16]) */;
    %288 = add(%278, %279) /* ty=Tensor[(14, 3, 4), int8] */;
    %289 = multiply(%282, %283) /* ty=Tensor[(14, 3, 4), float32] */;
    %290 = %284.0;
    %291 = @func_4744() /* ty=Tensor[(10, 1, 7), bool] */;
    %292 = @func_3684() /* ty=Tensor[(10, 1, 7), bool] */;
    %293 = %287.0;
    %294 = @func_3017() /* ty=Tensor[(10, 1, 7), bool] */;
    (%288, %289, %290, %291, %292, %293, %var_5219, %294)
  };
  %295(%var_5229, %var_5230, %var_5231) /* ty=(Tensor[(14, 3, 4), int8], Tensor[(14, 3, 4), float32], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(352, 6), bool], Tensor[(2112), float32], Tensor[(10, 1, 7), bool]) */
}

def @func_7137() -> Tensor[(10, 1, 7), bool] {
  @func_7135() /* ty=Tensor[(10, 1, 7), bool] */
}

def @func_12624(%var_12622: Tensor[(10, 7, 13), float64]) -> (Tensor[(10, 7, 13), float64], Tensor[(9, ?, 12), uint8], Tensor[(16, 6, 12), float64], Tensor[(1152), float64]) {
  @func_12621(%var_12622) /* ty=(Tensor[(10, 7, 13), float64], Tensor[(9, ?, 12), uint8], Tensor[(16, 6, 12), float64], Tensor[(1152), float64]) */
}

def @func_11576() -> Tensor[(10, 1, 7), bool] {
  @func_10922() /* ty=Tensor[(10, 1, 7), bool] */
}

def @func_7062(%var_7053: Tensor[(4, 12, 3), float64]) -> Tensor[(4, 12, 3), float64] {
  %296 = cast(%var_7053, dtype="float64") /* ty=Tensor[(4, 12, 3), float64] */;
  sqrt(%296) /* ty=Tensor[(4, 12, 3), float64] */
}

def @func_7002() -> (Tensor[(352), uint16],) {
  %299 = fn () -> (Tensor[(352), uint16],) {
    %297 = @func_6473() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(352), uint16], Tensor[(140), float64], Tensor[(10, 1, 7), bool]) */;
    %298 = %297.2;
    (%298,)
  };
  %299() /* ty=(Tensor[(352), uint16],) */
}

def @func_9201() -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) {
  %304 = fn () -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) {
    %300 = @func_6007() /* ty=(Tensor[(10, 1, 7), bool],) */;
    %301 = @func_8450() /* ty=(Tensor[(10, 1, 7), bool],) */;
    %302 = %300.0;
    %303 = %301.0;
    (%302, %303)
  };
  %304() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) */
}

def @func_5263() -> (Tensor[(10, 1, 7), float32], Tensor[(352, 5), bool]) {
  %305 = @func_3498() /* ty=(Tensor[(10, 1, 7), float32],) */;
  %306 = @func_4878() /* ty=(Tensor[(10, 1, 7), float32], Tensor[(352, 5), bool]) */;
  %307 = %305.0;
  %308 = %306.1;
  (%307, %308)
}

def @func_8093() -> Tensor[(352, 5), float64] {
  %309 = fn () -> Tensor[(352, 5), float64] {
    @func_5433() /* ty=Tensor[(352, 5), float64] */
  };
  %309() /* ty=Tensor[(352, 5), float64] */
}

def @func_11853(%var_11852: Tensor[(10, 4, 1), int8]) -> Tensor[(10, 4, 6), int8] {
  %312 = fn (%var_11841: Tensor[(10, 4, 1), int8]) -> Tensor[(10, 4, 6), int8] {
    %310 = cast(%var_11841, dtype="int8") /* ty=Tensor[(10, 4, 1), int8] */;
    %311 = cast(meta[relay.Constant][14] /* ty=Tensor[(10, 4, 6), int8] */, dtype="int8") /* ty=Tensor[(10, 4, 6), int8] */;
    bitwise_and(%310, %311) /* ty=Tensor[(10, 4, 6), int8] */
  };
  %312(%var_11852) /* ty=Tensor[(10, 4, 6), int8] */
}

def @func_8020(%var_8019: Tensor[(70, 2), bool]) -> (Tensor[(10, 1, 7), bool], Tensor[(352, 5), bool], Tensor[(10, 1, 7), float32], Tensor[(140), bool], Tensor[(70, 2), bool]) {
  %322 = fn (%var_8010: Tensor[(70, 2), bool]) -> (Tensor[(10, 1, 7), bool], Tensor[(352, 5), bool], Tensor[(10, 1, 7), float32], Tensor[(140), bool], Tensor[(70, 2), bool]) {
    %313 = @func_6531() /* ty=(Tensor[(10, 1, 7), bool],) */;
    %314 = @func_7812() /* ty=(Tensor[(352, 5), bool], Tensor[(10, 1, 7), float32]) */;
    %315 = cast(%var_8010, dtype="bool") /* ty=Tensor[(70, 2), bool] */;
    %316 = reshape(%315, newshape=[140]) /* ty=Tensor[(140), bool] */;
    %317 = @func_7128(%316) /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 2, 7), bool], Tensor[(140), bool]) */;
    %318 = %313.0;
    %319 = %314.0;
    %320 = @func_4751() /* ty=Tensor[(10, 1, 7), float32] */;
    %321 = %317.2;
    (%318, %319, %320, %321, %var_8010)
  };
  %322(%var_8019) /* ty=(Tensor[(10, 1, 7), bool], Tensor[(352, 5), bool], Tensor[(10, 1, 7), float32], Tensor[(140), bool], Tensor[(70, 2), bool]) */
}

def @func_9306() -> (Tensor[(10, 1, 7), bool],) {
  %325 = fn () -> (Tensor[(10, 1, 7), bool],) {
    %323 = @func_8877() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) */;
    %324 = %323.1;
    (%324,)
  };
  %325() /* ty=(Tensor[(10, 1, 7), bool],) */
}

def @func_10182() -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) {
  %326 = @func_9753() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %327 = @func_9200() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) */;
  %328 = @func_3961() /* ty=Tensor[(10, 1, 7), bool] */;
  %329 = %326.0;
  %330 = %327.0;
  (%328, %329, %330)
}

def @func_12694() -> (Tensor[(10, 1, 7), float32], Tensor[(10, 1, 7), bool], Tensor[(140), bool]) {
  %336 = fn () -> (Tensor[(10, 1, 7), float32], Tensor[(10, 1, 7), bool], Tensor[(140), bool]) {
    %331 = @func_5550() /* ty=(Tensor[(10, 1, 7), bool],) */;
    %332 = @func_10755() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 2, 7), int8], Tensor[(140), bool], Tensor[(10, 1, 7), bool]) */;
    %333 = @func_5679() /* ty=Tensor[(10, 1, 7), float32] */;
    %334 = %331.0;
    %335 = %332.2;
    (%333, %334, %335)
  };
  %336() /* ty=(Tensor[(10, 1, 7), float32], Tensor[(10, 1, 7), bool], Tensor[(140), bool]) */
}

def @func_12866(%var_12865: Tensor[(48), uint16]) -> (Tensor[(140), bool], uint16, Tensor[(48), uint16]) {
  %342 = fn (%var_12836: Tensor[(48), uint16]) -> (Tensor[(140), bool], uint16, Tensor[(48), uint16]) {
    %337 = cast(%var_12836, dtype="uint16") /* ty=Tensor[(48), uint16] */;
    %338 = reshape(%337, newshape=[48]) /* ty=Tensor[(48), uint16] */;
    %339 = @func_9123(%338) /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], uint16, Tensor[(48), uint16]) */;
    %340 = @func_11141() /* ty=Tensor[(140), bool] */;
    %341 = %339.2;
    (%340, %341, %var_12836)
  };
  %342(%var_12865) /* ty=(Tensor[(140), bool], uint16, Tensor[(48), uint16]) */
}

def @func_3917(%var_3909: Tensor[(10, 1, 7), bool]) -> (Tensor[(10, ?, 7), bool],) {
  %343 = @func_3836() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %344 = %343.0;
  %345 = cast(%var_3909, dtype="bool") /* ty=Tensor[(10, 1, 7), bool] */;
  %346 = shape_of(%344, dtype="int32") /* ty=Tensor[(3), int32] */;
  %347 = cast(%344, dtype="bool") /* ty=Tensor[(10, 1, 7), bool] */;
  %348 = dyn.reshape(%345, %346, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %349 = logical_or(%347, %348) /* ty=Tensor[(10, ?, 7), bool] */;
  (%349,)
}

def @func_3500() -> (Tensor[(10, 1, 7), float32],) {
  @func_3498() /* ty=(Tensor[(10, 1, 7), float32],) */
}

def @func_7518(%var_7516: Tensor[(882), bool], %var_7517: Tensor[(1, 128), float32]) -> (Tensor[(10, 1, 7), float32], Tensor[(14, 9, 7), bool], Tensor[(882), bool], Tensor[(8, 6, 16), float32], Tensor[(1, 128), float32]) {
  %360 = fn (%var_7480: Tensor[(882), bool], %var_7486: Tensor[(1, 128), float32]) -> (Tensor[(10, 1, 7), float32], Tensor[(14, 9, 7), bool], Tensor[(882), bool], Tensor[(8, 6, 16), float32], Tensor[(1, 128), float32]) {
    %350 = @func_3385() /* ty=(Tensor[(10, 1, 7), float64], Tensor[(10, 1, 7), float32]) */;
    %351 = cast(%var_7480, dtype="bool") /* ty=Tensor[(882), bool] */;
    %352 = reshape(%351, newshape=[14, 9, 7]) /* ty=Tensor[(14, 9, 7), bool] */;
    %353 = @func_7362(%352) /* ty=(Tensor[(14, 9, 7), bool],) */;
    %354 = cast(%var_7486, dtype="float32") /* ty=Tensor[(1, 128), float32] */;
    %355 = reshape(%354, newshape=[128]) /* ty=Tensor[(128), float32] */;
    %356 = @func_3718(%355) /* ty=(Tensor[(10, 1, 7), bool], Tensor[(8, 6, 16), float32], Tensor[(128), float32]) */;
    %357 = %350.1;
    %358 = %353.0;
    %359 = %356.1;
    (%357, %358, %var_7480, %359, %var_7486)
  };
  %360(%var_7516, %var_7517) /* ty=(Tensor[(10, 1, 7), float32], Tensor[(14, 9, 7), bool], Tensor[(882), bool], Tensor[(8, 6, 16), float32], Tensor[(1, 128), float32]) */
}

def @func_11578() -> Tensor[(10, 1, 7), bool] {
  @func_11576() /* ty=Tensor[(10, 1, 7), bool] */
}

def @func_7701(%var_7697: Tensor[(140), bool], %var_7698: Tensor[(49, 10), bool], %var_7699: Tensor[(88), float64], %var_7700: Tensor[(660), int64]) -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(490), bool], Tensor[(140), bool], Tensor[(49, 10), bool], Tensor[(11, 2, 4), float32], Tensor[(88), float64], Tensor[(5, 11, 12), bool], Tensor[(660), int64]) {
  %384 = fn (%var_7658: Tensor[(140), bool], %var_7659: Tensor[(49, 10), bool], %var_7671: Tensor[(88), float64], %var_7682: Tensor[(660), int64]) -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(490), bool], Tensor[(140), bool], Tensor[(49, 10), bool], Tensor[(11, 2, 4), float32], Tensor[(88), float64], Tensor[(5, 11, 12), bool], Tensor[(660), int64]) {
    %361 = @func_2848() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), float32]) */;
    %362 = cast(%var_7658, dtype="bool") /* ty=Tensor[(140), bool] */;
    %363 = cast(%var_7659, dtype="bool") /* ty=Tensor[(49, 10), bool] */;
    %364 = reshape(%362, newshape=[140]) /* ty=Tensor[(140), bool] */;
    %365 = reshape(%363, newshape=[490]) /* ty=Tensor[(490), bool] */;
    %366 = @func_6370(%364, %365) /* ty=(Tensor[(10, ?, 7), bool], Tensor[(140), bool], Tensor[(1, 1, 9), uint64], Tensor[(10, 1, 7), bool], Tensor[(490), bool]) */;
    %367 = cast(%var_7671, dtype="float64") /* ty=Tensor[(88), float64] */;
    %368 = reshape(%367, newshape=[11, 2, 4]) /* ty=Tensor[(11, 2, 4), float64] */;
    %369 = @func_1748(%368) /* ty=(Tensor[(11, 2, 4), float64], Tensor[(11, 2, 4), float32]) */;
    %370 = cast(%var_7682, dtype="int64") /* ty=Tensor[(660), int64] */;
    %371 = cast(%var_7682, dtype="int64") /* ty=Tensor[(660), int64] */;
    %372 = cast(%var_7671, dtype="float64") /* ty=Tensor[(88), float64] */;
    %373 = cast(%var_7682, dtype="int64") /* ty=Tensor[(660), int64] */;
    %374 = reshape(%370, newshape=[5, 11, 12]) /* ty=Tensor[(5, 11, 12), int64] */;
    %375 = reshape(%371, newshape=[5, 11, 12]) /* ty=Tensor[(5, 11, 12), int64] */;
    %376 = reshape(%372, newshape=[88, 1]) /* ty=Tensor[(88, 1), float64] */;
    %377 = reshape(%373, newshape=[5, 11, 12]) /* ty=Tensor[(5, 11, 12), int64] */;
    %378 = @func_6193(%374, %375, %376, %377) /* ty=(Tensor[(5, 11, 12), bool], Tensor[(11, 2, 4), float64], Tensor[(5, 11, 12), bool], Tensor[(10, 88, 7), int16]) */;
    %379 = @func_3228() /* ty=Tensor[(10, 1, 7), bool] */;
    %380 = %361.0;
    %381 = %366.4;
    %382 = %369.1;
    %383 = %378.2;
    (%379, %380, %381, %var_7658, %var_7659, %382, %var_7671, %383, %var_7682)
  };
  %384(%var_7697, %var_7698, %var_7699, %var_7700) /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(490), bool], Tensor[(140), bool], Tensor[(49, 10), bool], Tensor[(11, 2, 4), float32], Tensor[(88), float64], Tensor[(5, 11, 12), bool], Tensor[(660), int64]) */
}

def @func_11616(%var_11614: Tensor[(10, 5, 7), bool]) -> Tensor[(10, 5, 7), int64] {
  @func_11613(%var_11614) /* ty=Tensor[(10, 5, 7), int64] */
}

def @func_12530(%var_12501: Tensor[(10, 352, 7), float64]) -> (Tensor[(10, 352, 7), uint64], Tensor[(4, 12, 3), int64], Tensor[(10, 352, 7), float32], Tensor[(352, 5), bool], Tensor[(10, 352, 7), float32]) {
  %385 = @func_4248() /* ty=(Tensor[(352, 1), float32],) */;
  %386 = %385.0;
  %387 = cast(%386, dtype="float64") /* ty=Tensor[(352, 1), float64] */;
  %388 = rsqrt(%387) /* ty=Tensor[(352, 1), float64] */;
  %389 = @func_4744() /* ty=Tensor[(10, 1, 7), bool] */;
  %390 = cast(%388, dtype="float64") /* ty=Tensor[(352, 1), float64] */;
  %391 = cast(%389, dtype="float64") /* ty=Tensor[(10, 1, 7), float64] */;
  %392 = floor_mod(%390, %391) /* ty=Tensor[(10, 352, 7), float64] */;
  %393 = cast(%var_12501, dtype="uint64") /* ty=Tensor[(10, 352, 7), uint64] */;
  %394 = shape_of(%392, dtype="int32") /* ty=Tensor[(3), int32] */;
  %395 = cast(%392, dtype="uint64") /* ty=Tensor[(10, 352, 7), uint64] */;
  %396 = dyn.reshape(%393, %394, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %397 = @func_11377() /* ty=(Tensor[(352, 5), bool], Tensor[(10, 1, 7), bool], Tensor[(4, 12, 3), int64], Tensor[(352, 5), float64]) */;
  %398 = cast(%var_12501, dtype="float32") /* ty=Tensor[(10, 352, 7), float32] */;
  %399 = shape_of(%392, dtype="int32") /* ty=Tensor[(3), int32] */;
  %400 = cast(%392, dtype="float32") /* ty=Tensor[(10, 352, 7), float32] */;
  %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %402 = @func_6731() /* ty=(Tensor[(352, 5), bool],) */;
  %403 = cast(%392, dtype="float32") /* ty=Tensor[(10, 352, 7), float32] */;
  %404 = logical_xor(%395, %396) /* ty=Tensor[(10, 352, 7), uint64] */;
  %405 = %397.2;
  %406 = power(%400, %401) /* ty=Tensor[(10, 352, 7), float32] */;
  %407 = %402.0;
  %408 = log10(%403) /* ty=Tensor[(10, 352, 7), float32] */;
  (%404, %405, %406, %407, %408)
}

def @func_4248() -> (Tensor[(352, 1), float32],) {
  %409 = @func_2773() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(4, 11, 8), uint16], Tensor[(352, 1), uint16]) */;
  %410 = %409.2;
  %411 = cast(%410, dtype="float32") /* ty=Tensor[(352, 1), float32] */;
  %412 = asin(%411) /* ty=Tensor[(352, 1), float32] */;
  %413 = cast(%412, dtype="float32") /* ty=Tensor[(352, 1), float32] */;
  %414 = sin(%413) /* ty=Tensor[(352, 1), float32] */;
  (%414,)
}

def @func_12276() -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(140), bool], Tensor[(10, 1, 7), bool], Tensor[(9, ?, 12), bool], Tensor[(352, 5), float64]) {
  %415 = @func_8790() /* ty=(Tensor[(352, 6), int16], Tensor[(10, 1, 7), bool]) */;
  %416 = @func_8977() /* ty=(Tensor[(9, ?, 12), uint8],) */;
  %417 = %416.0;
  %418 = cast(%417, dtype="float64") /* ty=Tensor[(9, ?, 12), float64] */;
  %419 = acosh(%418) /* ty=Tensor[(9, ?, 12), float64] */;
  %420 = cast(%417, dtype="uint32") /* ty=Tensor[(9, ?, 12), uint32] */;
  %421 = shape_of(%419, dtype="int32") /* ty=Tensor[(3), int32] */;
  %422 = cast(%419, dtype="uint32") /* ty=Tensor[(9, ?, 12), uint32] */;
  %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %424 = left_shift(%422, %423) /* ty=Tensor[(9, ?, 12), uint32] */;
  %425 = cast(%424, dtype="bool") /* ty=Tensor[(9, ?, 12), bool] */;
  %426 = shape_of(%419, dtype="int32") /* ty=Tensor[(3), int32] */;
  %427 = cast(%419, dtype="bool") /* ty=Tensor[(9, ?, 12), bool] */;
  %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %429 = @func_4622() /* ty=(Tensor[(352, 5), bool],) */;
  %430 = %429.0;
  %431 = cast(%430, dtype="float64") /* ty=Tensor[(352, 5), float64] */;
  %432 = log(%431) /* ty=Tensor[(352, 5), float64] */;
  %433 = cast(%432, dtype="float64") /* ty=Tensor[(352, 5), float64] */;
  %434 = %415.1;
  %435 = @func_4744() /* ty=Tensor[(10, 1, 7), bool] */;
  %436 = @func_11141() /* ty=Tensor[(140), bool] */;
  %437 = @func_11151() /* ty=Tensor[(10, 1, 7), bool] */;
  %438 = logical_or(%427, %428) /* ty=Tensor[(9, ?, 12), bool] */;
  %439 = sin(%433) /* ty=Tensor[(352, 5), float64] */;
  (%434, %435, %436, %437, %438, %439)
}

def @func_10237() -> (Tensor[(352), uint16],) {
  %440 = @func_7001() /* ty=(Tensor[(352), uint16],) */;
  %441 = %440.0;
  (%441,)
}

def @func_6533() -> (Tensor[(10, 1, 7), bool],) {
  @func_6531() /* ty=(Tensor[(10, 1, 7), bool],) */
}

def @func_9871(%var_9869: Tensor[(140), bool]) -> (Tensor[(10, 1, 7), bool], Tensor[(140), bool], Tensor[(10, 1, 7), bool], Tensor[(10, ?, 7), bool], Tensor[(4, 11, 8), int8], Tensor[(140), bool]) {
  @func_9868(%var_9869) /* ty=(Tensor[(10, 1, 7), bool], Tensor[(140), bool], Tensor[(10, 1, 7), bool], Tensor[(10, ?, 7), bool], Tensor[(4, 11, 8), int8], Tensor[(140), bool]) */
}

def @func_7853() -> Tensor[(352, 5), bool] {
  %443 = fn () -> Tensor[(352, 5), bool] {
    %442 = @func_7812() /* ty=(Tensor[(352, 5), bool], Tensor[(10, 1, 7), float32]) */;
    %442.0
  };
  %443() /* ty=Tensor[(352, 5), bool] */
}

def @func_5865() -> (Tensor[(10, 1, 7), float32], Tensor[(10, 1, 7), bool]) {
  @func_5863() /* ty=(Tensor[(10, 1, 7), float32], Tensor[(10, 1, 7), bool]) */
}

def @func_4745() -> Tensor[(10, 1, 7), bool] {
  %445 = fn () -> Tensor[(10, 1, 7), bool] {
    %444 = @func_4280() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) */;
    %444.1
  };
  %445() /* ty=Tensor[(10, 1, 7), bool] */
}

def @func_4623() -> (Tensor[(352, 5), bool],) {
  %451 = fn () -> (Tensor[(352, 5), bool],) {
    %446 = @func_4248() /* ty=(Tensor[(352, 1), float32],) */;
    %447 = %446.0;
    %448 = cast(%447, dtype="bool") /* ty=Tensor[(352, 1), bool] */;
    %449 = cast(meta[relay.Constant][15] /* ty=Tensor[(352, 5), float32] */, dtype="bool") /* ty=Tensor[(352, 5), bool] */;
    %450 = logical_or(%448, %449) /* ty=Tensor[(352, 5), bool] */;
    (%450,)
  };
  %451() /* ty=(Tensor[(352, 5), bool],) */
}

def @func_8345(%var_8301: Tensor[(352, 15), float32]) -> (Tensor[(352, 15), bool], Tensor[(10, 1, 7), bool], Tensor[(352, 1), float64]) {
  %452 = @func_4248() /* ty=(Tensor[(352, 1), float32],) */;
  %453 = %452.0;
  %454 = cast(%453, dtype="bool") /* ty=Tensor[(352, 1), bool] */;
  %455 = cast(%var_8301, dtype="bool") /* ty=Tensor[(352, 15), bool] */;
  %456 = @func_6597() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %457 = cast(%453, dtype="float32") /* ty=Tensor[(352, 1), float32] */;
  %458 = sigmoid(%457) /* ty=Tensor[(352, 1), float32] */;
  %459 = cast(%458, dtype="float64") /* ty=Tensor[(352, 1), float64] */;
  %460 = not_equal(%454, %455) /* ty=Tensor[(352, 15), bool] */;
  %461 = %456.0;
  %462 = log10(%459) /* ty=Tensor[(352, 1), float64] */;
  (%460, %461, %462)
}

def @func_3685() -> Tensor[(10, 1, 7), bool] {
  %463 = fn () -> Tensor[(10, 1, 7), bool] {
    @func_3228() /* ty=Tensor[(10, 1, 7), bool] */
  };
  %463() /* ty=Tensor[(10, 1, 7), bool] */
}

def @func_7608() -> (Tensor[(10, 1, 7), bool],) {
  %464 = @func_6213() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %465 = %464.0;
  (%465,)
}

def @func_9868(%var_9825: Tensor[(140), bool]) -> (Tensor[(10, 1, 7), bool], Tensor[(140), bool], Tensor[(10, 1, 7), bool], Tensor[(10, ?, 7), bool], Tensor[(4, 11, 8), int8], Tensor[(140), bool]) {
  %466 = @func_3836() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %467 = @func_8450() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %468 = cast(%var_9825, dtype="bool") /* ty=Tensor[(140), bool] */;
  %469 = reshape(%468, newshape=[5, 28]) /* ty=Tensor[(5, 28), bool] */;
  %470 = @func_4991(%469) /* ty=(Tensor[(10, ?, 7), bool], Tensor[(10, 1, 7), float64], Tensor[(10, ?, 7), bool], Tensor[(5, 28), bool]) */;
  %471 = %470.2;
  %472 = @func_5926() /* ty=Tensor[(10, 1, 7), bool] */;
  %473 = cast(%472, dtype="bool") /* ty=Tensor[(10, 1, 7), bool] */;
  %474 = shape_of(%471, dtype="int32") /* ty=Tensor[(3), int32] */;
  %475 = cast(%471, dtype="bool") /* ty=Tensor[(10, ?, 7), bool] */;
  %476 = dyn.reshape(%473, %474, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %477 = @func_2773() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(4, 11, 8), uint16], Tensor[(352, 1), uint16]) */;
  %478 = %477.1;
  %479 = cast(%478, dtype="float64") /* ty=Tensor[(4, 11, 8), float64] */;
  %480 = erf(%479) /* ty=Tensor[(4, 11, 8), float64] */;
  %481 = cast(%478, dtype="int8") /* ty=Tensor[(4, 11, 8), int8] */;
  %482 = shape_of(%480, dtype="int32") /* ty=Tensor[(3), int32] */;
  %483 = cast(%480, dtype="int8") /* ty=Tensor[(4, 11, 8), int8] */;
  %484 = dyn.reshape(%481, %482, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %485 = @func_9528() /* ty=(Tensor[(10, 1, 7), float64], Tensor[(140), bool], Tensor[(140), bool]) */;
  %486 = %466.0;
  %487 = %467.0;
  %488 = greater(%475, %476) /* ty=Tensor[(10, ?, 7), bool] */;
  %489 = bitwise_xor(%483, %484) /* ty=Tensor[(4, 11, 8), int8] */;
  %490 = %485.1;
  (%486, %var_9825, %487, %488, %489, %490)
}

def @func_9331(%var_9329: Tensor[(8, 10, 8), float64]) -> (Tensor[(8, 10, 8), float64], Tensor[(8, 10, 8), float32]) {
  @func_9328(%var_9329) /* ty=(Tensor[(8, 10, 8), float64], Tensor[(8, 10, 8), float32]) */
}

def @func_8651(%var_8648: Tensor[(490), bool], %var_8649: Tensor[(88), float64], %var_8650: Tensor[(140), bool]) -> (Tensor[(352, 5), float64], Tensor[(4, 11, 8), uint16], Tensor[(490), bool], Tensor[(490), bool], Tensor[(88), float64], Tensor[(4, 11, 8), uint16], Tensor[(4, 11, 8), float64], Tensor[(140), bool]) {
  %507 = fn (%var_8629: Tensor[(490), bool], %var_8630: Tensor[(88), float64], %var_8639: Tensor[(140), bool]) -> (Tensor[(352, 5), float64], Tensor[(4, 11, 8), uint16], Tensor[(490), bool], Tensor[(490), bool], Tensor[(88), float64], Tensor[(4, 11, 8), uint16], Tensor[(4, 11, 8), float64], Tensor[(140), bool]) {
    %491 = @func_7284() /* ty=(Tensor[(352, 5), float64],) */;
    %492 = @func_2773() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(4, 11, 8), uint16], Tensor[(352, 1), uint16]) */;
    %493 = cast(%var_8629, dtype="bool") /* ty=Tensor[(490), bool] */;
    %494 = cast(%var_8630, dtype="float64") /* ty=Tensor[(88), float64] */;
    %495 = reshape(%493, newshape=[490]) /* ty=Tensor[(490), bool] */;
    %496 = reshape(%494, newshape=[88, 1]) /* ty=Tensor[(88, 1), float64] */;
    %497 = @func_3337(%495, %496) /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(490), bool], Tensor[(11, 2, 4), float64], Tensor[(88, 1), float64]) */;
    %498 = @func_2773() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(4, 11, 8), uint16], Tensor[(352, 1), uint16]) */;
    %499 = cast(%var_8639, dtype="bool") /* ty=Tensor[(140), bool] */;
    %500 = reshape(%499, newshape=[140]) /* ty=Tensor[(140), bool] */;
    %501 = @func_7966(%500) /* ty=(Tensor[(10, 2, 7), bool], Tensor[(140), bool], Tensor[(4, 11, 8), float64]) */;
    %502 = %491.0;
    %503 = %492.1;
    %504 = %497.2;
    %505 = %498.1;
    %506 = %501.2;
    (%502, %503, %504, %var_8629, %var_8630, %505, %506, %var_8639)
  };
  %507(%var_8648, %var_8649, %var_8650) /* ty=(Tensor[(352, 5), float64], Tensor[(4, 11, 8), uint16], Tensor[(490), bool], Tensor[(490), bool], Tensor[(88), float64], Tensor[(4, 11, 8), uint16], Tensor[(4, 11, 8), float64], Tensor[(140), bool]) */
}

def @func_9328(%var_9315: Tensor[(8, 10, 8), float64]) -> (Tensor[(8, 10, 8), float64], Tensor[(8, 10, 8), float32]) {
  %508 = cast(%var_9315, dtype="float64") /* ty=Tensor[(8, 10, 8), float64] */;
  %509 = cast(%var_9315, dtype="float32") /* ty=Tensor[(8, 10, 8), float32] */;
  %510 = sin(%508) /* ty=Tensor[(8, 10, 8), float64] */;
  %511 = acos(%509) /* ty=Tensor[(8, 10, 8), float32] */;
  (%510, %511)
}

def @func_11378() -> (Tensor[(352, 5), bool], Tensor[(10, 1, 7), bool], Tensor[(4, 12, 3), int64], Tensor[(352, 5), float64]) {
  %525 = fn () -> (Tensor[(352, 5), bool], Tensor[(10, 1, 7), bool], Tensor[(4, 12, 3), int64], Tensor[(352, 5), float64]) {
    %512 = @func_6731() /* ty=(Tensor[(352, 5), bool],) */;
    %513 = @func_5550() /* ty=(Tensor[(10, 1, 7), bool],) */;
    %514 = cast(meta[relay.Constant][16] /* ty=Tensor[(24, 6), float64] */, dtype="float64") /* ty=Tensor[(24, 6), float64] */;
    %515 = reshape(%514, newshape=[4, 12, 3]) /* ty=Tensor[(4, 12, 3), float64] */;
    %516 = @func_7062(%515) /* ty=Tensor[(4, 12, 3), float64] */;
    %517 = cast(meta[relay.Constant][16] /* ty=Tensor[(24, 6), float64] */, dtype="int64") /* ty=Tensor[(24, 6), int64] */;
    %518 = shape_of(%516, dtype="int32") /* ty=Tensor[(3), int32] */;
    %519 = cast(%516, dtype="int64") /* ty=Tensor[(4, 12, 3), int64] */;
    %520 = dyn.reshape(%517, %518, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %521 = %512.0;
    %522 = %513.0;
    %523 = subtract(%519, %520) /* ty=Tensor[(4, 12, 3), int64] */;
    %524 = @func_10802() /* ty=Tensor[(352, 5), float64] */;
    (%521, %522, %523, %524)
  };
  %525() /* ty=(Tensor[(352, 5), bool], Tensor[(10, 1, 7), bool], Tensor[(4, 12, 3), int64], Tensor[(352, 5), float64]) */
}

def @func_11921() -> (Tensor[(3, 12, 16), float32],) {
  @func_11919() /* ty=(Tensor[(3, 12, 16), float32],) */
}

def @func_3718(%var_3714: Tensor[(128), float32]) -> (Tensor[(10, 1, 7), bool], Tensor[(8, 6, 16), float32], Tensor[(128), float32]) {
  %526 = cast(%var_3714, dtype="float32") /* ty=Tensor[(128), float32] */;
  %527 = reshape(%526, newshape=[8, 1, 16]) /* ty=Tensor[(8, 1, 16), float32] */;
  %528 = @func_3684() /* ty=Tensor[(10, 1, 7), bool] */;
  %529 = @func_1253(%527) /* ty=Tensor[(8, 6, 16), float32] */;
  (%528, %529, %var_3714)
}

def @func_10756() -> (Tensor[(10, 1, 7), bool], Tensor[(10, 2, 7), int8], Tensor[(140), bool], Tensor[(10, 1, 7), bool]) {
  %538 = fn () -> (Tensor[(10, 1, 7), bool], Tensor[(10, 2, 7), int8], Tensor[(140), bool], Tensor[(10, 1, 7), bool]) {
    %530 = @func_9200() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) */;
    %531 = cast(meta[relay.Constant][17] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
    %532 = reshape(%531, newshape=[10, 2, 7]) /* ty=Tensor[(10, 2, 7), bool] */;
    %533 = @func_9670(%532) /* ty=(Tensor[(10, 2, 7), int8],) */;
    %534 = @func_8904() /* ty=(Tensor[(10, 1, 7), bool],) */;
    %535 = %530.0;
    %536 = %533.0;
    %537 = %534.0;
    (%535, %536, meta[relay.Constant][17] /* ty=Tensor[(140), bool] */, %537)
  };
  %538() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 2, 7), int8], Tensor[(140), bool], Tensor[(10, 1, 7), bool]) */
}

def @func_11930() -> Tensor[(4, 11, 8), uint16] {
  %539 = @func_5343() /* ty=(Tensor[(4, 11, 8), uint16], Tensor[(352, 5), float64], Tensor[(352, 5), int64], Tensor[(352, 5), bool], Tensor[(10, 1, 7), bool], Tensor[(352, 5), float32]) */;
  %539.0
}

def @func_11983() -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) {
  %543 = fn () -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) {
    %540 = @func_11697() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(352, 5), float64]) */;
    %541 = @func_6071() /* ty=Tensor[(10, 1, 7), bool] */;
    %542 = %540.1;
    (%541, %542)
  };
  %543() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) */
}

def @func_3337(%var_3301: Tensor[(490), bool], %var_3319: Tensor[(88, 1), float64]) -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(490), bool], Tensor[(11, 2, 4), float64], Tensor[(88, 1), float64]) {
  %544 = @func_2773() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(4, 11, 8), uint16], Tensor[(352, 1), uint16]) */;
  %545 = cast(%var_3301, dtype="bool") /* ty=Tensor[(490), bool] */;
  %546 = reshape(%545, newshape=[10, 7, 7]) /* ty=Tensor[(10, 7, 7), bool] */;
  %547 = @func_3171(%546) /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), float32], Tensor[(10, 7, 7), int64], Tensor[(10, 1, 7), bool]) */;
  %548 = cast(%var_3319, dtype="float64") /* ty=Tensor[(88, 1), float64] */;
  %549 = reshape(%548, newshape=[11, 2, 4]) /* ty=Tensor[(11, 2, 4), float64] */;
  %550 = @func_1748(%549) /* ty=(Tensor[(11, 2, 4), float64], Tensor[(11, 2, 4), float32]) */;
  %551 = %544.0;
  %552 = %547.0;
  %553 = %550.0;
  (%551, %552, %var_3301, %553, %var_3319)
}

def @func_3991() -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) {
  %558 = fn () -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) {
    %554 = @func_3761() /* ty=(Tensor[(10, 1, 7), bool],) */;
    %555 = @func_2698() /* ty=(Tensor[(10, 1, 7), bool],) */;
    %556 = %554.0;
    %557 = %555.0;
    (%556, %557)
  };
  %558() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) */
}

def @func_11400() -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) {
  @func_11398() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) */
}

def @func_11815() -> Tensor[(10, 1, 7), bool] {
  @func_11813() /* ty=Tensor[(10, 1, 7), bool] */
}

def @main(%var_12959: Tensor[(140, 1), bool], %var_12960: Tensor[(490), bool], %var_12961: Tensor[(88), float64], %var_12962: Tensor[(660), int64]) -> (Tensor[(10, 1, 7), bool], Tensor[(49, 10), bool], Tensor[(140, 1), bool], Tensor[(490), bool], Tensor[(88), float64], Tensor[(660), int64], Tensor[(4, 11, 8), bool]) {
  %559 = @func_9306() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %560 = cast(%var_12959, dtype="bool") /* ty=Tensor[(140, 1), bool] */;
  %561 = cast(%var_12960, dtype="bool") /* ty=Tensor[(490), bool] */;
  %562 = cast(%var_12961, dtype="float64") /* ty=Tensor[(88), float64] */;
  %563 = cast(%var_12962, dtype="int64") /* ty=Tensor[(660), int64] */;
  %564 = reshape(%560, newshape=[140]) /* ty=Tensor[(140), bool] */;
  %565 = reshape(%561, newshape=[49, 10]) /* ty=Tensor[(49, 10), bool] */;
  %566 = reshape(%562, newshape=[88]) /* ty=Tensor[(88), float64] */;
  %567 = reshape(%563, newshape=[660]) /* ty=Tensor[(660), int64] */;
  %568 = @func_7701(%564, %565, %566, %567) /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(490), bool], Tensor[(140), bool], Tensor[(49, 10), bool], Tensor[(11, 2, 4), float32], Tensor[(88), float64], Tensor[(5, 11, 12), bool], Tensor[(660), int64]) */;
  %569 = @func_9348() /* ty=Tensor[(4, 11, 8), uint16] */;
  %570 = cast(meta[relay.Constant][18] /* ty=Tensor[(4, 11, 8), uint16] */, dtype="bool") /* ty=Tensor[(4, 11, 8), bool] */;
  %571 = shape_of(%569, dtype="int32") /* ty=Tensor[(3), int32] */;
  %572 = cast(%569, dtype="bool") /* ty=Tensor[(4, 11, 8), bool] */;
  %573 = dyn.reshape(%570, %571, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %574 = %559.0;
  %575 = %568.4;
  %576 = greater(%572, %573) /* ty=Tensor[(4, 11, 8), bool] */;
  (%574, %575, %var_12959, %var_12960, %var_12961, %var_12962, %576)
}

def @func_6781() -> Tensor[(10, 1, 7), bool] {
  @func_6779() /* ty=Tensor[(10, 1, 7), bool] */
}

def @func_570(%var_568: Tensor[(4, 11, 8), uint16], %var_569: Tensor[(4, 11, 8), uint16]) -> Tensor[(4, 11, 8), uint16] {
  @func_566(%var_568, %var_569) /* ty=Tensor[(4, 11, 8), uint16] */
}

def @func_6199(%var_6195: Tensor[(5, 11, 12), int64], %var_6196: Tensor[(5, 11, 12), int64], %var_6197: Tensor[(88, 1), float64], %var_6198: Tensor[(5, 11, 12), int64]) -> (Tensor[(5, 11, 12), bool], Tensor[(11, 2, 4), float64], Tensor[(5, 11, 12), bool], Tensor[(10, 88, 7), int16]) {
  @func_6193(%var_6195, %var_6196, %var_6197, %var_6198) /* ty=(Tensor[(5, 11, 12), bool], Tensor[(11, 2, 4), float64], Tensor[(5, 11, 12), bool], Tensor[(10, 88, 7), int16]) */
}

def @func_6733() -> (Tensor[(352, 5), bool],) {
  @func_6731() /* ty=(Tensor[(352, 5), bool],) */
}

def @func_11287() -> (Tensor[(10, ?, 7), bool],) {
  %586 = fn () -> (Tensor[(10, ?, 7), bool],) {
    %577 = @func_9266() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), float32]) */;
    %578 = %577.0;
    %579 = @func_10012() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) */;
    %580 = %579.1;
    %581 = cast(%580, dtype="bool") /* ty=Tensor[(10, 1, 7), bool] */;
    %582 = shape_of(%578, dtype="int32") /* ty=Tensor[(3), int32] */;
    %583 = cast(%578, dtype="bool") /* ty=Tensor[(10, 1, 7), bool] */;
    %584 = dyn.reshape(%581, %582, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %585 = logical_and(%583, %584) /* ty=Tensor[(10, ?, 7), bool] */;
    (%585,)
  };
  %586() /* ty=(Tensor[(10, ?, 7), bool],) */
}

def @func_10361(%var_10360: Tensor[(882), bool]) -> (Tensor[(10, 1, 7), bool], Tensor[(14, 9, 7), bool], Tensor[(882), bool]) {
  %593 = fn (%var_10350: Tensor[(882), bool]) -> (Tensor[(10, 1, 7), bool], Tensor[(14, 9, 7), bool], Tensor[(882), bool]) {
    %587 = @func_8450() /* ty=(Tensor[(10, 1, 7), bool],) */;
    %588 = cast(%var_10350, dtype="bool") /* ty=Tensor[(882), bool] */;
    %589 = reshape(%588, newshape=[14, 9, 7]) /* ty=Tensor[(14, 9, 7), bool] */;
    %590 = @func_7362(%589) /* ty=(Tensor[(14, 9, 7), bool],) */;
    %591 = %587.0;
    %592 = %590.0;
    (%591, %592, %var_10350)
  };
  %593(%var_10360) /* ty=(Tensor[(10, 1, 7), bool], Tensor[(14, 9, 7), bool], Tensor[(882), bool]) */
}

def @func_3230() -> Tensor[(10, 1, 7), bool] {
  @func_3228() /* ty=Tensor[(10, 1, 7), bool] */
}

def @func_12088() -> Tensor[(352, 5), float64] {
  %597 = fn () -> Tensor[(352, 5), float64] {
    %594 = @func_4878() /* ty=(Tensor[(10, 1, 7), float32], Tensor[(352, 5), bool]) */;
    %595 = %594.1;
    %596 = cast(%595, dtype="float64") /* ty=Tensor[(352, 5), float64] */;
    rsqrt(%596) /* ty=Tensor[(352, 5), float64] */
  };
  %597() /* ty=Tensor[(352, 5), float64] */
}

def @func_10014() -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) {
  @func_10012() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) */
}

def @func_7610() -> (Tensor[(10, 1, 7), bool],) {
  @func_7608() /* ty=(Tensor[(10, 1, 7), bool],) */
}

def @func_10449() -> Tensor[(10, 1, 7), bool] {
  %598 = fn () -> Tensor[(10, 1, 7), bool] {
    @func_8703() /* ty=Tensor[(10, 1, 7), bool] */
  };
  %598() /* ty=Tensor[(10, 1, 7), bool] */
}

def @func_6833(%var_6820: Tensor[(490), bool], %var_6821: Tensor[(88, 1), float64]) -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(490), bool], Tensor[(88, 1), float64], Tensor[(?, 352), float64]) {
  %599 = @func_6213() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %600 = cast(%var_6820, dtype="bool") /* ty=Tensor[(490), bool] */;
  %601 = cast(%var_6821, dtype="float64") /* ty=Tensor[(88, 1), float64] */;
  %602 = reshape(%600, newshape=[490]) /* ty=Tensor[(490), bool] */;
  %603 = reshape(%601, newshape=[88, 1]) /* ty=Tensor[(88, 1), float64] */;
  %604 = @func_3337(%602, %603) /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(490), bool], Tensor[(11, 2, 4), float64], Tensor[(88, 1), float64]) */;
  %605 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 352), uint16] */, dtype="uint16") /* ty=Tensor[(1, 352), uint16] */;
  %606 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 352), uint16] */, dtype="uint16") /* ty=Tensor[(1, 352), uint16] */;
  %607 = reshape(%605, newshape=[4, 11, 8]) /* ty=Tensor[(4, 11, 8), uint16] */;
  %608 = reshape(%606, newshape=[4, 11, 8]) /* ty=Tensor[(4, 11, 8), uint16] */;
  %609 = @func_566(%607, %608) /* ty=Tensor[(4, 11, 8), uint16] */;
  %610 = cast(%609, dtype="int8") /* ty=Tensor[(4, 11, 8), int8] */;
  %611 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(1, 352), uint16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %612 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 352), uint16] */, dtype="int8") /* ty=Tensor[(1, 352), int8] */;
  %613 = dyn.reshape(%610, %611, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %614 = right_shift(%612, %613) /* ty=Tensor[(?, 352), int8] */;
  %615 = cast(%614, dtype="float64") /* ty=Tensor[(?, 352), float64] */;
  %616 = %599.0;
  %617 = @func_5926() /* ty=Tensor[(10, 1, 7), bool] */;
  %618 = %604.0;
  %619 = sin(%615) /* ty=Tensor[(?, 352), float64] */;
  (%616, %617, %618, %var_6820, %var_6821, %619)
}

def @func_10809() -> Tensor[(140), bool] {
  %621 = fn () -> Tensor[(140), bool] {
    %620 = @func_9057() /* ty=(Tensor[(4, 11, 8), uint16], Tensor[(10, 1, 7), bool], Tensor[(140), bool], Tensor[(10, 1, 7), bool]) */;
    %620.2
  };
  %621() /* ty=Tensor[(140), bool] */
}

def @func_9350() -> Tensor[(4, 11, 8), uint16] {
  @func_9348() /* ty=Tensor[(4, 11, 8), uint16] */
}

def @func_9239() -> (Tensor[(4, 11, 8), uint16],) {
  %624 = fn () -> (Tensor[(4, 11, 8), uint16],) {
    %622 = @func_5044() /* ty=(Tensor[(4, 11, 8), uint16],) */;
    %623 = %622.0;
    (%623,)
  };
  %624() /* ty=(Tensor[(4, 11, 8), uint16],) */
}

def @func_6127() -> (Tensor[(10, 1, 7), bool], Tensor[(352), uint16], Tensor[(1152), float64]) {
  %630 = fn () -> (Tensor[(10, 1, 7), bool], Tensor[(352), uint16], Tensor[(1152), float64]) {
    %625 = cast(meta[relay.Constant][20] /* ty=Tensor[(1152), float64] */, dtype="float64") /* ty=Tensor[(1152), float64] */;
    %626 = reshape(%625, newshape=[1152]) /* ty=Tensor[(1152), float64] */;
    %627 = @func_2892(%626) /* ty=(Tensor[(10, 1, 7), bool], Tensor[(352), uint16], Tensor[(1152), float64]) */;
    %628 = @func_3017() /* ty=Tensor[(10, 1, 7), bool] */;
    %629 = %627.1;
    (%628, %629, meta[relay.Constant][20] /* ty=Tensor[(1152), float64] */)
  };
  %630() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(352), uint16], Tensor[(1152), float64]) */
}

def @func_6155() -> (Tensor[(10, 1, 7), bool], Tensor[(10, ?, 7), bool]) {
  %637 = fn () -> (Tensor[(10, 1, 7), bool], Tensor[(10, ?, 7), bool]) {
    %631 = @func_5948() /* ty=(Tensor[(10, 1, 7), bool],) */;
    %632 = %631.0;
    %633 = cast(%632, dtype="bool") /* ty=Tensor[(10, 1, 7), bool] */;
    %634 = reshape(%633, newshape=[10, 1, 7]) /* ty=Tensor[(10, 1, 7), bool] */;
    %635 = @func_3917(%634) /* ty=(Tensor[(10, ?, 7), bool],) */;
    %636 = %635.0;
    (%632, %636)
  };
  %637() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, ?, 7), bool]) */
}

def @func_8791() -> (Tensor[(352, 6), int16], Tensor[(10, 1, 7), bool]) {
  %641 = fn () -> (Tensor[(352, 6), int16], Tensor[(10, 1, 7), bool]) {
    %638 = @func_7591() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(352, 6), int16], Tensor[(2112), float32], Tensor[(10, 1, 7), float64]) */;
    %639 = %638.1;
    %640 = @func_4803() /* ty=Tensor[(10, 1, 7), bool] */;
    (%639, %640)
  };
  %641() /* ty=(Tensor[(352, 6), int16], Tensor[(10, 1, 7), bool]) */
}

def @func_6645() -> (Tensor[(4, 11, 8), uint16],) {
  @func_6643() /* ty=(Tensor[(4, 11, 8), uint16],) */
}

def @func_3642() -> Tensor[(10, 1, 7), bool] {
  @func_3640() /* ty=Tensor[(10, 1, 7), bool] */
}

def @func_3763() -> (Tensor[(10, 1, 7), bool],) {
  @func_3761() /* ty=(Tensor[(10, 1, 7), bool],) */
}

def @func_6942() -> Tensor[(10, 1, 7), bool] {
  @func_6940() /* ty=Tensor[(10, 1, 7), bool] */
}

def @func_8348(%var_8346: Tensor[(352, 15), float32]) -> (Tensor[(352, 15), bool], Tensor[(10, 1, 7), bool], Tensor[(352, 1), float64]) {
  @func_8345(%var_8346) /* ty=(Tensor[(352, 15), bool], Tensor[(10, 1, 7), bool], Tensor[(352, 1), float64]) */
}

def @func_9266() -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), float32]) {
  %642 = @func_3961() /* ty=Tensor[(10, 1, 7), bool] */;
  %643 = @func_4751() /* ty=Tensor[(10, 1, 7), float32] */;
  (%642, %643)
}

def @func_7813() -> (Tensor[(352, 5), bool], Tensor[(10, 1, 7), float32]) {
  %647 = fn () -> (Tensor[(352, 5), bool], Tensor[(10, 1, 7), float32]) {
    %644 = @func_4878() /* ty=(Tensor[(10, 1, 7), float32], Tensor[(352, 5), bool]) */;
    %645 = %644.1;
    %646 = @func_5679() /* ty=Tensor[(10, 1, 7), float32] */;
    (%645, %646)
  };
  %647() /* ty=(Tensor[(352, 5), bool], Tensor[(10, 1, 7), float32]) */
}

def @func_11447() -> (Tensor[(10, 1, 7), bool], Tensor[(10, ?, 7), bool], Tensor[(10, 88, 7), int16], Tensor[(660), int64], Tensor[(88), float64], Tensor[(10, 1, 7), bool]) {
  %664 = fn () -> (Tensor[(10, 1, 7), bool], Tensor[(10, ?, 7), bool], Tensor[(10, 88, 7), int16], Tensor[(660), int64], Tensor[(88), float64], Tensor[(10, 1, 7), bool]) {
    %648 = @func_10448() /* ty=Tensor[(10, 1, 7), bool] */;
    %649 = cast(%648, dtype="bool") /* ty=Tensor[(10, 1, 7), bool] */;
    %650 = reshape(%649, newshape=[10, 1, 7]) /* ty=Tensor[(10, 1, 7), bool] */;
    %651 = @func_3917(%650) /* ty=(Tensor[(10, ?, 7), bool],) */;
    %652 = cast(meta[relay.Constant][21] /* ty=Tensor[(660), int64] */, dtype="int64") /* ty=Tensor[(660), int64] */;
    %653 = cast(meta[relay.Constant][21] /* ty=Tensor[(660), int64] */, dtype="int64") /* ty=Tensor[(660), int64] */;
    %654 = cast(meta[relay.Constant][22] /* ty=Tensor[(88), float64] */, dtype="float64") /* ty=Tensor[(88), float64] */;
    %655 = cast(meta[relay.Constant][21] /* ty=Tensor[(660), int64] */, dtype="int64") /* ty=Tensor[(660), int64] */;
    %656 = reshape(%652, newshape=[5, 11, 12]) /* ty=Tensor[(5, 11, 12), int64] */;
    %657 = reshape(%653, newshape=[5, 11, 12]) /* ty=Tensor[(5, 11, 12), int64] */;
    %658 = reshape(%654, newshape=[88, 1]) /* ty=Tensor[(88, 1), float64] */;
    %659 = reshape(%655, newshape=[5, 11, 12]) /* ty=Tensor[(5, 11, 12), int64] */;
    %660 = @func_6193(%656, %657, %658, %659) /* ty=(Tensor[(5, 11, 12), bool], Tensor[(11, 2, 4), float64], Tensor[(5, 11, 12), bool], Tensor[(10, 88, 7), int16]) */;
    %661 = %651.0;
    %662 = %660.3;
    %663 = @func_10448() /* ty=Tensor[(10, 1, 7), bool] */;
    (%648, %661, %662, meta[relay.Constant][21] /* ty=Tensor[(660), int64] */, meta[relay.Constant][22] /* ty=Tensor[(88), float64] */, %663)
  };
  %664() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, ?, 7), bool], Tensor[(10, 88, 7), int16], Tensor[(660), int64], Tensor[(88), float64], Tensor[(10, 1, 7), bool]) */
}

def @func_5949() -> (Tensor[(10, 1, 7), bool],) {
  %666 = fn () -> (Tensor[(10, 1, 7), bool],) {
    %665 = @func_4803() /* ty=Tensor[(10, 1, 7), bool] */;
    (%665,)
  };
  %666() /* ty=(Tensor[(10, 1, 7), bool],) */
}

def @func_6531() -> (Tensor[(10, 1, 7), bool],) {
  %667 = @func_4803() /* ty=Tensor[(10, 1, 7), bool] */;
  (%667,)
}

def @func_11198() -> Tensor[(10, 1, 7), bool] {
  %669 = fn () -> Tensor[(10, 1, 7), bool] {
    %668 = @func_10182() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) */;
    %668.2
  };
  %669() /* ty=Tensor[(10, 1, 7), bool] */
}

def @func_8906() -> (Tensor[(10, 1, 7), bool],) {
  @func_8904() /* ty=(Tensor[(10, 1, 7), bool],) */
}

def @func_10239() -> (Tensor[(352), uint16],) {
  @func_10237() /* ty=(Tensor[(352), uint16],) */
}

def @func_11919() -> (Tensor[(3, 12, 16), float32],) {
  %670 = cast(meta[relay.Constant][23] /* ty=Tensor[(3, 12, 16), float32] */, dtype="float32") /* ty=Tensor[(3, 12, 16), float32] */;
  %671 = sin(%670) /* ty=Tensor[(3, 12, 16), float32] */;
  (%671,)
}

def @func_8704() -> Tensor[(10, 1, 7), bool] {
  %673 = fn () -> Tensor[(10, 1, 7), bool] {
    %672 = @func_6473() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(352), uint16], Tensor[(140), float64], Tensor[(10, 1, 7), bool]) */;
    %672.1
  };
  %673() /* ty=Tensor[(10, 1, 7), bool] */
}

def @func_3721(%var_3719: Tensor[(128), float32]) -> (Tensor[(10, 1, 7), bool], Tensor[(8, 6, 16), float32], Tensor[(128), float32]) {
  @func_3718(%var_3719) /* ty=(Tensor[(10, 1, 7), bool], Tensor[(8, 6, 16), float32], Tensor[(128), float32]) */
}

def @func_4250() -> (Tensor[(352, 1), float32],) {
  @func_4248() /* ty=(Tensor[(352, 1), float32],) */
}

def @func_11954() -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) {
  @func_11952() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) */
}

def @func_6895(%var_6893: Tensor[(70, 2), bool], %var_6894: Tensor[(490), bool]) -> (Tensor[(10, 1, 7), float32], Tensor[(10, ?, 7), bool], Tensor[(70, 2), bool], Tensor[(490), bool], Tensor[(10, 1, 7), bool]) {
  @func_6891(%var_6893, %var_6894) /* ty=(Tensor[(10, 1, 7), float32], Tensor[(10, ?, 7), bool], Tensor[(70, 2), bool], Tensor[(490), bool], Tensor[(10, 1, 7), bool]) */
}

def @func_3018() -> Tensor[(10, 1, 7), bool] {
  %675 = fn () -> Tensor[(10, 1, 7), bool] {
    %674 = @func_2698() /* ty=(Tensor[(10, 1, 7), bool],) */;
    %674.0
  };
  %675() /* ty=Tensor[(10, 1, 7), bool] */
}

def @func_11613(%var_11604: Tensor[(10, 5, 7), bool]) -> Tensor[(10, 5, 7), int64] {
  %676 = @func_3640() /* ty=Tensor[(10, 1, 7), bool] */;
  %677 = cast(%676, dtype="int64") /* ty=Tensor[(10, 1, 7), int64] */;
  %678 = cast(%var_11604, dtype="int64") /* ty=Tensor[(10, 5, 7), int64] */;
  subtract(%677, %678) /* ty=Tensor[(10, 5, 7), int64] */
}

def @func_6706(%var_6697: Tensor[(288, 4), float64]) -> (Tensor[(10, ?, 7), int16], Tensor[(288, 4), int16]) {
  %679 = @func_5652() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(352, 5), bool], Tensor[(10, 1, 7), bool], Tensor[(288, 4), float64], Tensor[(10, 1, 7), bool], Tensor[(352, 5), float64], Tensor[(10, ?, 7), bool], Tensor[(352, 5), float64]) */;
  %680 = %679.3;
  %681 = cast(%var_6697, dtype="int16") /* ty=Tensor[(288, 4), int16] */;
  %682 = shape_of(%680, dtype="int32") /* ty=Tensor[(2), int32] */;
  %683 = cast(%680, dtype="int16") /* ty=Tensor[(288, 4), int16] */;
  %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %685 = @func_5743() /* ty=Tensor[(10, ?, 7), int16] */;
  %686 = bitwise_and(%683, %684) /* ty=Tensor[(288, 4), int16] */;
  (%685, %686)
}

def @func_9348() -> Tensor[(4, 11, 8), uint16] {
  %687 = @func_6643() /* ty=(Tensor[(4, 11, 8), uint16],) */;
  %687.0
}

def @func_11932() -> Tensor[(4, 11, 8), uint16] {
  @func_11930() /* ty=Tensor[(4, 11, 8), uint16] */
}

def @func_10214() -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 2, 7), bool], Tensor[(140), bool]) {
  @func_10212() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 2, 7), bool], Tensor[(140), bool]) */
}

def @func_2849() -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), float32]) {
  %694 = fn () -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), float32]) {
    %688 = @func_2698() /* ty=(Tensor[(10, 1, 7), bool],) */;
    %689 = @func_2698() /* ty=(Tensor[(10, 1, 7), bool],) */;
    %690 = %689.0;
    %691 = cast(%690, dtype="float32") /* ty=Tensor[(10, 1, 7), float32] */;
    %692 = %688.0;
    %693 = exp(%691) /* ty=Tensor[(10, 1, 7), float32] */;
    (%692, %693)
  };
  %694() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), float32]) */
}

def @func_7776(%var_7774: uint16, %var_7775: Tensor[(16, 3, 1), uint16]) -> (Tensor[(16, 3, ?), float64], Tensor[(10, 1, 7), bool]) {
  @func_7772(%var_7774, %var_7775) /* ty=(Tensor[(16, 3, ?), float64], Tensor[(10, 1, 7), bool]) */
}

def @func_9058() -> (Tensor[(4, 11, 8), uint16], Tensor[(10, 1, 7), bool], Tensor[(140), bool], Tensor[(10, 1, 7), bool]) {
  %704 = fn () -> (Tensor[(4, 11, 8), uint16], Tensor[(10, 1, 7), bool], Tensor[(140), bool], Tensor[(10, 1, 7), bool]) {
    %695 = @func_6643() /* ty=(Tensor[(4, 11, 8), uint16],) */;
    %696 = %695.0;
    %697 = cast(%696, dtype="uint16") /* ty=Tensor[(4, 11, 8), uint16] */;
    %698 = cast(meta[relay.Constant][24] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
    %699 = reshape(%697, newshape=[352]) /* ty=Tensor[(352), uint16] */;
    %700 = reshape(%698, newshape=[1, 140]) /* ty=Tensor[(1, 140), bool] */;
    %701 = @func_8134(%699, %700) /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), float32], Tensor[(352), uint16], Tensor[(1, 140), bool]) */;
    %702 = %701.0;
    %703 = @func_5926() /* ty=Tensor[(10, 1, 7), bool] */;
    (%696, %702, meta[relay.Constant][24] /* ty=Tensor[(140), bool] */, %703)
  };
  %704() /* ty=(Tensor[(4, 11, 8), uint16], Tensor[(10, 1, 7), bool], Tensor[(140), bool], Tensor[(10, 1, 7), bool]) */
}

def @func_10924() -> Tensor[(10, 1, 7), bool] {
  @func_10922() /* ty=Tensor[(10, 1, 7), bool] */
}

def @func_11878() -> (Tensor[(9, ?, 12), uint8], Tensor[(140), bool]) {
  %708 = fn () -> (Tensor[(9, ?, 12), uint8], Tensor[(140), bool]) {
    %705 = @func_8977() /* ty=(Tensor[(9, ?, 12), uint8],) */;
    %706 = %705.0;
    %707 = @func_11141() /* ty=Tensor[(140), bool] */;
    (%706, %707)
  };
  %708() /* ty=(Tensor[(9, ?, 12), uint8], Tensor[(140), bool]) */
}

def @func_10803() -> Tensor[(352, 5), float64] {
  %710 = fn () -> Tensor[(352, 5), float64] {
    %709 = @func_7284() /* ty=(Tensor[(352, 5), float64],) */;
    %709.0
  };
  %710() /* ty=Tensor[(352, 5), float64] */
}

def @func_12124() -> (Tensor[(10, 1, 7), bool],) {
  %711 = @func_4803() /* ty=Tensor[(10, 1, 7), bool] */;
  (%711,)
}

def @func_1002(%var_1001: Tensor[(16, 6, 12), float64]) -> (Tensor[(16, 6, 12), float64], Tensor[(4, 11, 8), uint16], Tensor[(352), uint16]) {
  %719 = fn (%var_992: Tensor[(16, 6, 12), float64]) -> (Tensor[(16, 6, 12), float64], Tensor[(4, 11, 8), uint16], Tensor[(352), uint16]) {
    %712 = cast(%var_992, dtype="float64") /* ty=Tensor[(16, 6, 12), float64] */;
    %713 = cast(meta[relay.Constant][25] /* ty=Tensor[(352), uint16] */, dtype="uint16") /* ty=Tensor[(352), uint16] */;
    %714 = cast(meta[relay.Constant][25] /* ty=Tensor[(352), uint16] */, dtype="uint16") /* ty=Tensor[(352), uint16] */;
    %715 = reshape(%713, newshape=[4, 11, 8]) /* ty=Tensor[(4, 11, 8), uint16] */;
    %716 = reshape(%714, newshape=[4, 11, 8]) /* ty=Tensor[(4, 11, 8), uint16] */;
    %717 = acos(%712) /* ty=Tensor[(16, 6, 12), float64] */;
    %718 = @func_566(%715, %716) /* ty=Tensor[(4, 11, 8), uint16] */;
    (%717, %718, meta[relay.Constant][25] /* ty=Tensor[(352), uint16] */)
  };
  %719(%var_1001) /* ty=(Tensor[(16, 6, 12), float64], Tensor[(4, 11, 8), uint16], Tensor[(352), uint16]) */
}

def @func_7462() -> (Tensor[(352, 5), bool],) {
  %722 = fn () -> (Tensor[(352, 5), bool],) {
    %720 = @func_4878() /* ty=(Tensor[(10, 1, 7), float32], Tensor[(352, 5), bool]) */;
    %721 = %720.1;
    (%721,)
  };
  %722() /* ty=(Tensor[(352, 5), bool],) */
}

def @func_7131(%var_7129: Tensor[(140), bool]) -> (Tensor[(10, 1, 7), bool], Tensor[(10, 2, 7), bool], Tensor[(140), bool]) {
  @func_7128(%var_7129) /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 2, 7), bool], Tensor[(140), bool]) */
}

def @func_9528() -> (Tensor[(10, 1, 7), float64], Tensor[(140), bool], Tensor[(140), bool]) {
  %723 = @func_3385() /* ty=(Tensor[(10, 1, 7), float64], Tensor[(10, 1, 7), float32]) */;
  %724 = cast(meta[relay.Constant][26] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
  %725 = reshape(%724, newshape=[140]) /* ty=Tensor[(140), bool] */;
  %726 = @func_7966(%725) /* ty=(Tensor[(10, 2, 7), bool], Tensor[(140), bool], Tensor[(4, 11, 8), float64]) */;
  %727 = %723.0;
  %728 = %726.1;
  (%727, %728, meta[relay.Constant][26] /* ty=Tensor[(140), bool] */)
}

def @func_3640() -> Tensor[(10, 1, 7), bool] {
  @func_3228() /* ty=Tensor[(10, 1, 7), bool] */
}

def @func_8138(%var_8136: Tensor[(352), uint16], %var_8137: Tensor[(1, 140), bool]) -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), float32], Tensor[(352), uint16], Tensor[(1, 140), bool]) {
  @func_8134(%var_8136, %var_8137) /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), float32], Tensor[(352), uint16], Tensor[(1, 140), bool]) */
}

def @func_1750(%var_1749: Tensor[(11, 2, 4), float64]) -> (Tensor[(11, 2, 4), float64], Tensor[(11, 2, 4), float32]) {
  %733 = fn (%var_1731: Tensor[(11, 2, 4), float64]) -> (Tensor[(11, 2, 4), float64], Tensor[(11, 2, 4), float32]) {
    %729 = cast(%var_1731, dtype="float64") /* ty=Tensor[(11, 2, 4), float64] */;
    %730 = cast(%var_1731, dtype="float32") /* ty=Tensor[(11, 2, 4), float32] */;
    %731 = sinh(%729) /* ty=Tensor[(11, 2, 4), float64] */;
    %732 = erf(%730) /* ty=Tensor[(11, 2, 4), float32] */;
    (%731, %732)
  };
  %733(%var_1749) /* ty=(Tensor[(11, 2, 4), float64], Tensor[(11, 2, 4), float32]) */
}

def @func_2895(%var_2893: Tensor[(1152), float64]) -> (Tensor[(10, 1, 7), bool], Tensor[(352), uint16], Tensor[(1152), float64]) {
  @func_2892(%var_2893) /* ty=(Tensor[(10, 1, 7), bool], Tensor[(352), uint16], Tensor[(1152), float64]) */
}

def @func_10012() -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) {
  %734 = @func_6213() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %735 = @func_3836() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %736 = @func_5863() /* ty=(Tensor[(10, 1, 7), float32], Tensor[(10, 1, 7), bool]) */;
  %737 = %734.0;
  %738 = %735.0;
  %739 = %736.1;
  (%737, %738, %739)
}

def @func_7364(%var_7363: Tensor[(14, 9, 7), bool]) -> (Tensor[(14, 9, 7), bool],) {
  %745 = fn (%var_7347: Tensor[(14, 9, 7), bool]) -> (Tensor[(14, 9, 7), bool],) {
    %740 = cast(%var_7347, dtype="bool") /* ty=Tensor[(14, 9, 7), bool] */;
    %741 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(14, 9, 7), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %742 = cast(meta[relay.Constant][27] /* ty=Tensor[(14, 9, 7), bool] */, dtype="bool") /* ty=Tensor[(14, 9, 7), bool] */;
    %743 = dyn.reshape(%740, %741, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %744 = logical_or(%742, %743) /* ty=Tensor[(14, 9, 7), bool] */;
    (%744,)
  };
  %745(%var_7363) /* ty=(Tensor[(14, 9, 7), bool],) */
}

def @func_5343() -> (Tensor[(4, 11, 8), uint16], Tensor[(352, 5), float64], Tensor[(352, 5), int64], Tensor[(352, 5), bool], Tensor[(10, 1, 7), bool], Tensor[(352, 5), float32]) {
  %746 = @func_2773() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(4, 11, 8), uint16], Tensor[(352, 1), uint16]) */;
  %747 = @func_4622() /* ty=(Tensor[(352, 5), bool],) */;
  %748 = %747.0;
  %749 = cast(%748, dtype="float64") /* ty=Tensor[(352, 5), float64] */;
  %750 = cast(%748, dtype="float32") /* ty=Tensor[(352, 5), float32] */;
  %751 = tan(%750) /* ty=Tensor[(352, 5), float32] */;
  %752 = cast(%751, dtype="uint32") /* ty=Tensor[(352, 5), uint32] */;
  %753 = shape_of(%748, dtype="int32") /* ty=Tensor[(2), int32] */;
  %754 = cast(%748, dtype="uint32") /* ty=Tensor[(352, 5), uint32] */;
  %755 = dyn.reshape(%752, %753, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %756 = bitwise_xor(%754, %755) /* ty=Tensor[(352, 5), uint32] */;
  %757 = cast(%756, dtype="int64") /* ty=Tensor[(352, 5), int64] */;
  %758 = shape_of(%748, dtype="int32") /* ty=Tensor[(2), int32] */;
  %759 = cast(%748, dtype="int64") /* ty=Tensor[(352, 5), int64] */;
  %760 = dyn.reshape(%757, %758, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %761 = @func_4622() /* ty=(Tensor[(352, 5), bool],) */;
  %762 = cast(%756, dtype="float64") /* ty=Tensor[(352, 5), float64] */;
  %763 = cosh(%762) /* ty=Tensor[(352, 5), float64] */;
  %764 = cast(%756, dtype="bool") /* ty=Tensor[(352, 5), bool] */;
  %765 = shape_of(%763, dtype="int32") /* ty=Tensor[(2), int32] */;
  %766 = cast(%763, dtype="bool") /* ty=Tensor[(352, 5), bool] */;
  %767 = dyn.reshape(%764, %765, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %768 = logical_and(%766, %767) /* ty=Tensor[(352, 5), bool] */;
  %769 = cast(%768, dtype="float32") /* ty=Tensor[(352, 5), float32] */;
  %770 = %746.1;
  %771 = acosh(%749) /* ty=Tensor[(352, 5), float64] */;
  %772 = logical_xor(%759, %760) /* ty=Tensor[(352, 5), int64] */;
  %773 = %761.0;
  %774 = @func_5048() /* ty=Tensor[(10, 1, 7), bool] */;
  %775 = atan(%769) /* ty=Tensor[(352, 5), float32] */;
  (%770, %771, %772, %773, %774, %775)
}

def @func_4462(%var_4461: Tensor[(352, 6), float32]) -> (Tensor[(352, 6), bool], Tensor[(352, 6), int16]) {
  %784 = fn (%var_4449: Tensor[(352, 6), float32]) -> (Tensor[(352, 6), bool], Tensor[(352, 6), int16]) {
    %776 = @func_4248() /* ty=(Tensor[(352, 1), float32],) */;
    %777 = %776.0;
    %778 = cast(%777, dtype="bool") /* ty=Tensor[(352, 1), bool] */;
    %779 = cast(%var_4449, dtype="bool") /* ty=Tensor[(352, 6), bool] */;
    %780 = cast(%777, dtype="int16") /* ty=Tensor[(352, 1), int16] */;
    %781 = cast(%var_4449, dtype="int16") /* ty=Tensor[(352, 6), int16] */;
    %782 = logical_or(%778, %779) /* ty=Tensor[(352, 6), bool] */;
    %783 = logical_xor(%780, %781) /* ty=Tensor[(352, 6), int16] */;
    (%782, %783)
  };
  %784(%var_4461) /* ty=(Tensor[(352, 6), bool], Tensor[(352, 6), int16]) */
}

def @func_10675() -> (Tensor[(140), bool], Tensor[(10, 352, 7), uint32], Tensor[(10, 6, 7), int16], Tensor[(2640, 2), bool]) {
  %804 = fn () -> (Tensor[(140), bool], Tensor[(10, 352, 7), uint32], Tensor[(10, 6, 7), int16], Tensor[(2640, 2), bool]) {
    %785 = @func_10212() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 2, 7), bool], Tensor[(140), bool]) */;
    %786 = @func_10012() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) */;
    %787 = %786.1;
    %788 = cast(meta[relay.Constant][28] /* ty=Tensor[(2640, 2), float32] */, dtype="float32") /* ty=Tensor[(2640, 2), float32] */;
    %789 = reshape(%788, newshape=[352, 15]) /* ty=Tensor[(352, 15), float32] */;
    %790 = @func_8345(%789) /* ty=(Tensor[(352, 15), bool], Tensor[(10, 1, 7), bool], Tensor[(352, 1), float64]) */;
    %791 = %790.2;
    %792 = cast(%787, dtype="uint32") /* ty=Tensor[(10, 1, 7), uint32] */;
    %793 = cast(%791, dtype="uint32") /* ty=Tensor[(352, 1), uint32] */;
    %794 = cast(%787, dtype="int16") /* ty=Tensor[(10, 1, 7), int16] */;
    %795 = cast(meta[relay.Constant][29] /* ty=Tensor[(10, 6, 7), bool] */, dtype="int16") /* ty=Tensor[(10, 6, 7), int16] */;
    %796 = cast(meta[relay.Constant][30] /* ty=Tensor[(2640, 2), float32] */, dtype="bool") /* ty=Tensor[(2640, 2), bool] */;
    %797 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(2640, 2), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %798 = cast(meta[relay.Constant][28] /* ty=Tensor[(2640, 2), float32] */, dtype="bool") /* ty=Tensor[(2640, 2), bool] */;
    %799 = dyn.reshape(%796, %797, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %800 = %785.3;
    %801 = bitwise_or(%792, %793) /* ty=Tensor[(10, 352, 7), uint32] */;
    %802 = bitwise_xor(%794, %795) /* ty=Tensor[(10, 6, 7), int16] */;
    %803 = less(%798, %799) /* ty=Tensor[(2640, 2), bool] */;
    (%800, %801, %802, %803)
  };
  %804() /* ty=(Tensor[(140), bool], Tensor[(10, 352, 7), uint32], Tensor[(10, 6, 7), int16], Tensor[(2640, 2), bool]) */
}

def @func_11152() -> Tensor[(10, 1, 7), bool] {
  %806 = fn () -> Tensor[(10, 1, 7), bool] {
    %805 = @func_3990() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) */;
    %805.0
  };
  %806() /* ty=Tensor[(10, 1, 7), bool] */
}

def @func_1256(%var_1254: Tensor[(8, 1, 16), float32]) -> Tensor[(8, 6, 16), float32] {
  @func_1253(%var_1254) /* ty=Tensor[(8, 6, 16), float32] */
}

def @func_6599() -> (Tensor[(10, 1, 7), bool],) {
  @func_6597() /* ty=(Tensor[(10, 1, 7), bool],) */
}

def @func_4878() -> (Tensor[(10, 1, 7), float32], Tensor[(352, 5), bool]) {
  %807 = @func_3640() /* ty=Tensor[(10, 1, 7), bool] */;
  %808 = cast(%807, dtype="float32") /* ty=Tensor[(10, 1, 7), float32] */;
  %809 = @func_4622() /* ty=(Tensor[(352, 5), bool],) */;
  %810 = log(%808) /* ty=Tensor[(10, 1, 7), float32] */;
  %811 = %809.0;
  (%810, %811)
}

def @func_6709(%var_6707: Tensor[(288, 4), float64]) -> (Tensor[(10, ?, 7), int16], Tensor[(288, 4), int16]) {
  @func_6706(%var_6707) /* ty=(Tensor[(10, ?, 7), int16], Tensor[(288, 4), int16]) */
}

def @func_10558() -> (Tensor[(4, 11, 8), uint16], Tensor[(352, 5), float64]) {
  %817 = fn () -> (Tensor[(4, 11, 8), uint16], Tensor[(352, 5), float64]) {
    %812 = @func_5044() /* ty=(Tensor[(4, 11, 8), uint16],) */;
    %813 = @func_8092() /* ty=Tensor[(352, 5), float64] */;
    %814 = cast(%813, dtype="float64") /* ty=Tensor[(352, 5), float64] */;
    %815 = %812.0;
    %816 = asinh(%814) /* ty=Tensor[(352, 5), float64] */;
    (%815, %816)
  };
  %817() /* ty=(Tensor[(4, 11, 8), uint16], Tensor[(352, 5), float64]) */
}

def @func_12126() -> (Tensor[(10, 1, 7), bool],) {
  @func_12124() /* ty=(Tensor[(10, 1, 7), bool],) */
}

def @func_4753() -> Tensor[(10, 1, 7), float32] {
  @func_4751() /* ty=Tensor[(10, 1, 7), float32] */
}

def @func_5435() -> Tensor[(352, 5), float64] {
  @func_5433() /* ty=Tensor[(352, 5), float64] */
}

def @func_6193(%var_6156: Tensor[(5, 11, 12), int64], %var_6157: Tensor[(5, 11, 12), int64], %var_6164: Tensor[(88, 1), float64], %var_6177: Tensor[(5, 11, 12), int64]) -> (Tensor[(5, 11, 12), bool], Tensor[(11, 2, 4), float64], Tensor[(5, 11, 12), bool], Tensor[(10, 88, 7), int16]) {
  %818 = cast(%var_6157, dtype="bool") /* ty=Tensor[(5, 11, 12), bool] */;
  %819 = shape_of(%var_6156, dtype="int32") /* ty=Tensor[(3), int32] */;
  %820 = cast(%var_6156, dtype="bool") /* ty=Tensor[(5, 11, 12), bool] */;
  %821 = dyn.reshape(%818, %819, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %822 = cast(%var_6164, dtype="float64") /* ty=Tensor[(88, 1), float64] */;
  %823 = reshape(%822, newshape=[11, 2, 4]) /* ty=Tensor[(11, 2, 4), float64] */;
  %824 = @func_1748(%823) /* ty=(Tensor[(11, 2, 4), float64], Tensor[(11, 2, 4), float32]) */;
  %825 = cast(%var_6177, dtype="bool") /* ty=Tensor[(5, 11, 12), bool] */;
  %826 = shape_of(%var_6156, dtype="int32") /* ty=Tensor[(3), int32] */;
  %827 = cast(%var_6156, dtype="bool") /* ty=Tensor[(5, 11, 12), bool] */;
  %828 = dyn.reshape(%825, %826, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %829 = @func_3017() /* ty=Tensor[(10, 1, 7), bool] */;
  %830 = cast(%829, dtype="bool") /* ty=Tensor[(10, 1, 7), bool] */;
  %831 = cast(%var_6164, dtype="bool") /* ty=Tensor[(88, 1), bool] */;
  %832 = equal(%830, %831) /* ty=Tensor[(10, 88, 7), bool] */;
  %833 = cast(%832, dtype="int16") /* ty=Tensor[(10, 88, 7), int16] */;
  %834 = cast(%829, dtype="int16") /* ty=Tensor[(10, 1, 7), int16] */;
  %835 = equal(%820, %821) /* ty=Tensor[(5, 11, 12), bool] */;
  %836 = %824.0;
  %837 = not_equal(%827, %828) /* ty=Tensor[(5, 11, 12), bool] */;
  %838 = add(%833, %834) /* ty=Tensor[(10, 88, 7), int16] */;
  (%835, %836, %837, %838)
}

def @func_2892(%var_2881: Tensor[(1152), float64]) -> (Tensor[(10, 1, 7), bool], Tensor[(352), uint16], Tensor[(1152), float64]) {
  %839 = @func_2698() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %840 = cast(%var_2881, dtype="float64") /* ty=Tensor[(1152), float64] */;
  %841 = reshape(%840, newshape=[16, 6, 12]) /* ty=Tensor[(16, 6, 12), float64] */;
  %842 = @func_1000(%841) /* ty=(Tensor[(16, 6, 12), float64], Tensor[(4, 11, 8), uint16], Tensor[(352), uint16]) */;
  %843 = %839.0;
  %844 = %842.2;
  (%843, %844, %var_2881)
}

def @func_11698() -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(352, 5), float64]) {
  %849 = fn () -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(352, 5), float64]) {
    %845 = @func_5980() /* ty=(Tensor[(352, 5), float64], Tensor[(10, 1, 7), bool]) */;
    %846 = %845.1;
    %847 = @func_3228() /* ty=Tensor[(10, 1, 7), bool] */;
    %848 = @func_5433() /* ty=Tensor[(352, 5), float64] */;
    (%846, %847, %848)
  };
  %849() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(352, 5), float64]) */
}

def @func_5045() -> (Tensor[(4, 11, 8), uint16],) {
  %852 = fn () -> (Tensor[(4, 11, 8), uint16],) {
    %850 = @func_2773() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(4, 11, 8), uint16], Tensor[(352, 1), uint16]) */;
    %851 = %850.1;
    (%851,)
  };
  %852() /* ty=(Tensor[(4, 11, 8), uint16],) */
}

def @func_11016() -> Tensor[(10, 1, 7), bool] {
  @func_11014() /* ty=Tensor[(10, 1, 7), bool] */
}

def @func_12405(%var_12403: Tensor[(352, 5), float64], %var_12404: Tensor[(140), bool]) -> (Tensor[(10, 1, 7), bool], Tensor[(352, 5), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(352, 5), float32], Tensor[(10, 2, 7), bool], Tensor[(140), bool], Tensor[(10, 1, 7), bool]) {
  %873 = fn (%var_12358: Tensor[(352, 5), float64], %var_12382: Tensor[(140), bool]) -> (Tensor[(10, 1, 7), bool], Tensor[(352, 5), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(352, 5), float32], Tensor[(10, 2, 7), bool], Tensor[(140), bool], Tensor[(10, 1, 7), bool]) {
    %853 = @func_11952() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) */;
    %854 = @func_5980() /* ty=(Tensor[(352, 5), float64], Tensor[(10, 1, 7), bool]) */;
    %855 = %854.0;
    %856 = cast(%var_12358, dtype="bool") /* ty=Tensor[(352, 5), bool] */;
    %857 = shape_of(%855, dtype="int32") /* ty=Tensor[(2), int32] */;
    %858 = cast(%855, dtype="bool") /* ty=Tensor[(352, 5), bool] */;
    %859 = dyn.reshape(%856, %857, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %860 = @func_8904() /* ty=(Tensor[(10, 1, 7), bool],) */;
    %861 = cast(%var_12358, dtype="float32") /* ty=Tensor[(352, 5), float32] */;
    %862 = cast(%var_12382, dtype="bool") /* ty=Tensor[(140), bool] */;
    %863 = reshape(%862, newshape=[140]) /* ty=Tensor[(140), bool] */;
    %864 = @func_7128(%863) /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 2, 7), bool], Tensor[(140), bool]) */;
    %865 = @func_12124() /* ty=(Tensor[(10, 1, 7), bool],) */;
    %866 = %853.0;
    %867 = not_equal(%858, %859) /* ty=Tensor[(352, 5), bool] */;
    %868 = @func_10448() /* ty=Tensor[(10, 1, 7), bool] */;
    %869 = %860.0;
    %870 = cos(%861) /* ty=Tensor[(352, 5), float32] */;
    %871 = %864.1;
    %872 = %865.0;
    (%866, %867, %868, %869, %870, %871, %var_12382, %872)
  };
  %873(%var_12403, %var_12404) /* ty=(Tensor[(10, 1, 7), bool], Tensor[(352, 5), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(352, 5), float32], Tensor[(10, 2, 7), bool], Tensor[(140), bool], Tensor[(10, 1, 7), bool]) */
}

def @func_3920(%var_3918: Tensor[(10, 1, 7), bool]) -> (Tensor[(10, ?, 7), bool],) {
  @func_3917(%var_3918) /* ty=(Tensor[(10, ?, 7), bool],) */
}

def @func_9530() -> (Tensor[(10, 1, 7), float64], Tensor[(140), bool], Tensor[(140), bool]) {
  @func_9528() /* ty=(Tensor[(10, 1, 7), float64], Tensor[(140), bool], Tensor[(140), bool]) */
}

def @func_5927() -> Tensor[(10, 1, 7), bool] {
  %874 = fn () -> Tensor[(10, 1, 7), bool] {
    @func_4803() /* ty=Tensor[(10, 1, 7), bool] */
  };
  %874() /* ty=Tensor[(10, 1, 7), bool] */
}

def @func_4280() -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) {
  %875 = @func_3990() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) */;
  %876 = @func_3228() /* ty=Tensor[(10, 1, 7), bool] */;
  %877 = %875.0;
  (%876, %877)
}

def @func_5050() -> Tensor[(10, 1, 7), bool] {
  @func_5048() /* ty=Tensor[(10, 1, 7), bool] */
}

def @func_6072() -> Tensor[(10, 1, 7), bool] {
  %879 = fn () -> Tensor[(10, 1, 7), bool] {
    %878 = @func_3990() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) */;
    %878.1
  };
  %879() /* ty=Tensor[(10, 1, 7), bool] */
}

def @func_6643() -> (Tensor[(4, 11, 8), uint16],) {
  %880 = @func_5044() /* ty=(Tensor[(4, 11, 8), uint16],) */;
  %881 = %880.0;
  (%881,)
}

def @func_566(%var_561: Tensor[(4, 11, 8), uint16], %var_562: Tensor[(4, 11, 8), uint16]) -> Tensor[(4, 11, 8), uint16] {
  %882 = cast(%var_562, dtype="uint16") /* ty=Tensor[(4, 11, 8), uint16] */;
  %883 = shape_of(%var_561, dtype="int32") /* ty=Tensor[(3), int32] */;
  %884 = cast(%var_561, dtype="uint16") /* ty=Tensor[(4, 11, 8), uint16] */;
  %885 = dyn.reshape(%882, %883, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  add(%884, %885) /* ty=Tensor[(4, 11, 8), uint16] */
}

def @func_2773() -> (Tensor[(10, 1, 7), bool], Tensor[(4, 11, 8), uint16], Tensor[(352, 1), uint16]) {
  %886 = @func_2698() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %887 = cast(meta[relay.Constant][31] /* ty=Tensor[(352, 1), uint16] */, dtype="uint16") /* ty=Tensor[(352, 1), uint16] */;
  %888 = cast(meta[relay.Constant][31] /* ty=Tensor[(352, 1), uint16] */, dtype="uint16") /* ty=Tensor[(352, 1), uint16] */;
  %889 = reshape(%887, newshape=[4, 11, 8]) /* ty=Tensor[(4, 11, 8), uint16] */;
  %890 = reshape(%888, newshape=[4, 11, 8]) /* ty=Tensor[(4, 11, 8), uint16] */;
  %891 = %886.0;
  %892 = @func_566(%889, %890) /* ty=Tensor[(4, 11, 8), uint16] */;
  (%891, %892, meta[relay.Constant][31] /* ty=Tensor[(352, 1), uint16] */)
}

def @func_8266() -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) {
  @func_8264() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) */
}

def @func_11813() -> Tensor[(10, 1, 7), bool] {
  %893 = @func_8877() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) */;
  %893.1
}

def @func_4364(%var_4362: Tensor[(10, 1, 7), float64], %var_4363: Tensor[(128), float32]) -> (Tensor[(10, ?, 7), int32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(10, 2, 7), bool], Tensor[(140), bool]) {
  %908 = fn (%var_4331: Tensor[(10, 1, 7), float64], %var_4347: Tensor[(128), float32]) -> (Tensor[(10, ?, 7), int32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(10, 2, 7), bool], Tensor[(140), bool]) {
    %894 = @func_3385() /* ty=(Tensor[(10, 1, 7), float64], Tensor[(10, 1, 7), float32]) */;
    %895 = %894.0;
    %896 = cast(%var_4331, dtype="int32") /* ty=Tensor[(10, 1, 7), int32] */;
    %897 = shape_of(%895, dtype="int32") /* ty=Tensor[(3), int32] */;
    %898 = cast(%895, dtype="int32") /* ty=Tensor[(10, 1, 7), int32] */;
    %899 = dyn.reshape(%896, %897, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %900 = cast(%var_4347, dtype="float32") /* ty=Tensor[(128), float32] */;
    %901 = reshape(%900, newshape=[128]) /* ty=Tensor[(128), float32] */;
    %902 = @func_3718(%901) /* ty=(Tensor[(10, 1, 7), bool], Tensor[(8, 6, 16), float32], Tensor[(128), float32]) */;
    %903 = cast(meta[relay.Constant][32] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
    %904 = reshape(%903, newshape=[10, 2, 7]) /* ty=Tensor[(10, 2, 7), bool] */;
    %905 = bitwise_or(%898, %899) /* ty=Tensor[(10, ?, 7), int32] */;
    %906 = %902.2;
    %907 = @func_4067(%904) /* ty=Tensor[(10, 2, 7), bool] */;
    (%905, %906, %var_4347, %907, meta[relay.Constant][32] /* ty=Tensor[(140), bool] */)
  };
  %908(%var_4362, %var_4363) /* ty=(Tensor[(10, ?, 7), int32], Tensor[(128), float32], Tensor[(128), float32], Tensor[(10, 2, 7), bool], Tensor[(140), bool]) */
}

def @func_10706() -> Tensor[(10, 1, 7), bool] {
  %909 = fn () -> Tensor[(10, 1, 7), bool] {
    @func_6779() /* ty=Tensor[(10, 1, 7), bool] */
  };
  %909() /* ty=Tensor[(10, 1, 7), bool] */
}

def @func_3341(%var_3339: Tensor[(490), bool], %var_3340: Tensor[(88, 1), float64]) -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(490), bool], Tensor[(11, 2, 4), float64], Tensor[(88, 1), float64]) {
  @func_3337(%var_3339, %var_3340) /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(490), bool], Tensor[(11, 2, 4), float64], Tensor[(88, 1), float64]) */
}

def @func_3761() -> (Tensor[(10, 1, 7), bool],) {
  %910 = @func_3017() /* ty=Tensor[(10, 1, 7), bool] */;
  (%910,)
}

def @func_6731() -> (Tensor[(352, 5), bool],) {
  %911 = @func_4622() /* ty=(Tensor[(352, 5), bool],) */;
  %912 = %911.0;
  (%912,)
}

def @func_9157() -> (Tensor[(10, 1, 7), bool],) {
  @func_9155() /* ty=(Tensor[(10, 1, 7), bool],) */
}

def @func_4498() -> (Tensor[(10, 1, 7), bool],) {
  %915 = fn () -> (Tensor[(10, 1, 7), bool],) {
    %913 = @func_2698() /* ty=(Tensor[(10, 1, 7), bool],) */;
    %914 = %913.0;
    (%914,)
  };
  %915() /* ty=(Tensor[(10, 1, 7), bool],) */
}

def @func_4282() -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) {
  @func_4280() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) */
}

def @func_11784() -> (Tensor[(352, 5), float32], Tensor[(88), float64], Tensor[(352, 5), float64]) {
  %926 = fn () -> (Tensor[(352, 5), float32], Tensor[(88), float64], Tensor[(352, 5), float64]) {
    %916 = @func_10557() /* ty=(Tensor[(4, 11, 8), uint16], Tensor[(352, 5), float64]) */;
    %917 = %916.1;
    %918 = cast(%917, dtype="float32") /* ty=Tensor[(352, 5), float32] */;
    %919 = @func_11446() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, ?, 7), bool], Tensor[(10, 88, 7), int16], Tensor[(660), int64], Tensor[(88), float64], Tensor[(10, 1, 7), bool]) */;
    %920 = cast(%917, dtype="float64") /* ty=Tensor[(352, 5), float64] */;
    %921 = sinh(%920) /* ty=Tensor[(352, 5), float64] */;
    %922 = cast(%921, dtype="float64") /* ty=Tensor[(352, 5), float64] */;
    %923 = log2(%918) /* ty=Tensor[(352, 5), float32] */;
    %924 = %919.4;
    %925 = asin(%922) /* ty=Tensor[(352, 5), float64] */;
    (%923, %924, %925)
  };
  %926() /* ty=(Tensor[(352, 5), float32], Tensor[(88), float64], Tensor[(352, 5), float64]) */
}

def @func_3228() -> Tensor[(10, 1, 7), bool] {
  %927 = @func_2698() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %927.0
}

def @func_1253(%var_1241: Tensor[(8, 1, 16), float32]) -> Tensor[(8, 6, 16), float32] {
  %928 = cast(%var_1241, dtype="float32") /* ty=Tensor[(8, 1, 16), float32] */;
  %929 = cast(meta[relay.Constant][33] /* ty=Tensor[(8, 6, 16), float32] */, dtype="float32") /* ty=Tensor[(8, 6, 16), float32] */;
  floor_mod(%928, %929) /* ty=Tensor[(8, 6, 16), float32] */
}

def @func_9499(%var_9498: Tensor[(32, 4), float32]) -> (Tensor[(10, 1, 7), bool], Tensor[(8, 10, 8), float64], Tensor[(320, 2), float64], Tensor[(32, 4), float32], Tensor[(8, 6, 16), float64]) {
  %941 = fn (%var_9480: Tensor[(32, 4), float32]) -> (Tensor[(10, 1, 7), bool], Tensor[(8, 10, 8), float64], Tensor[(320, 2), float64], Tensor[(32, 4), float32], Tensor[(8, 6, 16), float64]) {
    %930 = cast(meta[relay.Constant][34] /* ty=Tensor[(320, 2), float64] */, dtype="float64") /* ty=Tensor[(320, 2), float64] */;
    %931 = reshape(%930, newshape=[8, 10, 8]) /* ty=Tensor[(8, 10, 8), float64] */;
    %932 = @func_9328(%931) /* ty=(Tensor[(8, 10, 8), float64], Tensor[(8, 10, 8), float32]) */;
    %933 = cast(%var_9480, dtype="float32") /* ty=Tensor[(32, 4), float32] */;
    %934 = reshape(%933, newshape=[128]) /* ty=Tensor[(128), float32] */;
    %935 = @func_3718(%934) /* ty=(Tensor[(10, 1, 7), bool], Tensor[(8, 6, 16), float32], Tensor[(128), float32]) */;
    %936 = %935.1;
    %937 = cast(%936, dtype="float64") /* ty=Tensor[(8, 6, 16), float64] */;
    %938 = @func_3961() /* ty=Tensor[(10, 1, 7), bool] */;
    %939 = %932.0;
    %940 = atan(%937) /* ty=Tensor[(8, 6, 16), float64] */;
    (%938, %939, meta[relay.Constant][34] /* ty=Tensor[(320, 2), float64] */, %var_9480, %940)
  };
  %941(%var_9498) /* ty=(Tensor[(10, 1, 7), bool], Tensor[(8, 10, 8), float64], Tensor[(320, 2), float64], Tensor[(32, 4), float32], Tensor[(8, 6, 16), float64]) */
}

def @func_12039() -> (Tensor[(10, 1, 7), float32], Tensor[(10, 1, 7), bool]) {
  %946 = fn () -> (Tensor[(10, 1, 7), float32], Tensor[(10, 1, 7), bool]) {
    %942 = @func_5863() /* ty=(Tensor[(10, 1, 7), float32], Tensor[(10, 1, 7), bool]) */;
    %943 = @func_8450() /* ty=(Tensor[(10, 1, 7), bool],) */;
    %944 = %942.0;
    %945 = %943.0;
    (%944, %945)
  };
  %946() /* ty=(Tensor[(10, 1, 7), float32], Tensor[(10, 1, 7), bool]) */
}

def @func_5981() -> (Tensor[(352, 5), float64], Tensor[(10, 1, 7), bool]) {
  %950 = fn () -> (Tensor[(352, 5), float64], Tensor[(10, 1, 7), bool]) {
    %947 = @func_5652() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(352, 5), bool], Tensor[(10, 1, 7), bool], Tensor[(288, 4), float64], Tensor[(10, 1, 7), bool], Tensor[(352, 5), float64], Tensor[(10, ?, 7), bool], Tensor[(352, 5), float64]) */;
    %948 = %947.7;
    %949 = @func_3228() /* ty=Tensor[(10, 1, 7), bool] */;
    (%948, %949)
  };
  %950() /* ty=(Tensor[(352, 5), float64], Tensor[(10, 1, 7), bool]) */
}

def @func_5345() -> (Tensor[(4, 11, 8), uint16], Tensor[(352, 5), float64], Tensor[(352, 5), int64], Tensor[(352, 5), bool], Tensor[(10, 1, 7), bool], Tensor[(352, 5), float32]) {
  @func_5343() /* ty=(Tensor[(4, 11, 8), uint16], Tensor[(352, 5), float64], Tensor[(352, 5), int64], Tensor[(352, 5), bool], Tensor[(10, 1, 7), bool], Tensor[(352, 5), float32]) */
}

def @func_10212() -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 2, 7), bool], Tensor[(140), bool]) {
  %951 = cast(meta[relay.Constant][35] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
  %952 = reshape(%951, newshape=[10, 2, 7]) /* ty=Tensor[(10, 2, 7), bool] */;
  %953 = @func_3684() /* ty=Tensor[(10, 1, 7), bool] */;
  %954 = @func_6071() /* ty=Tensor[(10, 1, 7), bool] */;
  %955 = @func_4067(%952) /* ty=Tensor[(10, 2, 7), bool] */;
  (%953, %954, %955, meta[relay.Constant][35] /* ty=Tensor[(140), bool] */)
}

def @func_5048() -> Tensor[(10, 1, 7), bool] {
  %956 = @func_3761() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %956.0
}

def @func_3498() -> (Tensor[(10, 1, 7), float32],) {
  %957 = @func_3385() /* ty=(Tensor[(10, 1, 7), float64], Tensor[(10, 1, 7), float32]) */;
  %958 = %957.1;
  (%958,)
}

def @func_6940() -> Tensor[(10, 1, 7), bool] {
  %959 = @func_6007() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %959.0
}

def @func_8450() -> (Tensor[(10, 1, 7), bool],) {
  %960 = @func_2698() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %961 = %960.0;
  (%961,)
}

def @func_8523(%var_8522: Tensor[(352, 5), float64]) -> (Tensor[(352, 5), float64], Tensor[(10, 1, 7), float32]) {
  %974 = fn (%var_8506: Tensor[(352, 5), float64]) -> (Tensor[(352, 5), float64], Tensor[(10, 1, 7), float32]) {
    %962 = @func_8092() /* ty=Tensor[(352, 5), float64] */;
    %963 = cast(%var_8506, dtype="int32") /* ty=Tensor[(352, 5), int32] */;
    %964 = shape_of(%962, dtype="int32") /* ty=Tensor[(2), int32] */;
    %965 = cast(%962, dtype="int32") /* ty=Tensor[(352, 5), int32] */;
    %966 = dyn.reshape(%963, %964, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
    %967 = left_shift(%965, %966) /* ty=Tensor[(352, 5), int32] */;
    %968 = cast(%967, dtype="float64") /* ty=Tensor[(352, 5), float64] */;
    %969 = shape_of(%var_8506, dtype="int32") /* ty=Tensor[(2), int32] */;
    %970 = cast(%var_8506, dtype="float64") /* ty=Tensor[(352, 5), float64] */;
    %971 = dyn.reshape(%968, %969, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %972 = power(%970, %971) /* ty=Tensor[(352, 5), float64] */;
    %973 = @func_4751() /* ty=Tensor[(10, 1, 7), float32] */;
    (%972, %973)
  };
  %974(%var_8522) /* ty=(Tensor[(352, 5), float64], Tensor[(10, 1, 7), float32]) */
}

def @func_8391() -> (Tensor[(10, 1, 7), bool],) {
  @func_8389() /* ty=(Tensor[(10, 1, 7), bool],) */
}

def @func_4069(%var_4068: Tensor[(10, 2, 7), bool]) -> Tensor[(10, 2, 7), bool] {
  %979 = fn (%var_4056: Tensor[(10, 2, 7), bool]) -> Tensor[(10, 2, 7), bool] {
    %975 = @func_3761() /* ty=(Tensor[(10, 1, 7), bool],) */;
    %976 = %975.0;
    %977 = cast(%976, dtype="bool") /* ty=Tensor[(10, 1, 7), bool] */;
    %978 = cast(%var_4056, dtype="bool") /* ty=Tensor[(10, 2, 7), bool] */;
    equal(%977, %978) /* ty=Tensor[(10, 2, 7), bool] */
  };
  %979(%var_4068) /* ty=Tensor[(10, 2, 7), bool] */
}

def @func_6474() -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(352), uint16], Tensor[(140), float64], Tensor[(10, 1, 7), bool]) {
  %989 = fn () -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(352), uint16], Tensor[(140), float64], Tensor[(10, 1, 7), bool]) {
    %980 = @func_6126() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(352), uint16], Tensor[(1152), float64]) */;
    %981 = cast(meta[relay.Constant][36] /* ty=Tensor[(140), float64] */, dtype="float64") /* ty=Tensor[(140), float64] */;
    %982 = reshape(%981, newshape=[140]) /* ty=Tensor[(140), float64] */;
    %983 = @func_3285(%982) /* ty=(Tensor[(4, 11, 8), uint16], Tensor[(352), uint16], Tensor[(140), float64]) */;
    %984 = @func_6007() /* ty=(Tensor[(10, 1, 7), bool],) */;
    %985 = %980.0;
    %986 = @func_3961() /* ty=Tensor[(10, 1, 7), bool] */;
    %987 = %983.1;
    %988 = %984.0;
    (%985, %986, %987, meta[relay.Constant][36] /* ty=Tensor[(140), float64] */, %988)
  };
  %989() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(352), uint16], Tensor[(140), float64], Tensor[(10, 1, 7), bool]) */
}

def @func_8452() -> (Tensor[(10, 1, 7), bool],) {
  @func_8450() /* ty=(Tensor[(10, 1, 7), bool],) */
}

def @func_12952() -> Tensor[(10, 1, 7), bool] {
  %990 = fn () -> Tensor[(10, 1, 7), bool] {
    @func_11576() /* ty=Tensor[(10, 1, 7), bool] */
  };
  %990() /* ty=Tensor[(10, 1, 7), bool] */
}

def @func_7285() -> (Tensor[(352, 5), float64],) {
  %993 = fn () -> (Tensor[(352, 5), float64],) {
    %991 = @func_5980() /* ty=(Tensor[(352, 5), float64], Tensor[(10, 1, 7), bool]) */;
    %992 = %991.0;
    (%992,)
  };
  %993() /* ty=(Tensor[(352, 5), float64],) */
}

def @func_6008() -> (Tensor[(10, 1, 7), bool],) {
  %996 = fn () -> (Tensor[(10, 1, 7), bool],) {
    %994 = @func_5652() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(352, 5), bool], Tensor[(10, 1, 7), bool], Tensor[(288, 4), float64], Tensor[(10, 1, 7), bool], Tensor[(352, 5), float64], Tensor[(10, ?, 7), bool], Tensor[(352, 5), float64]) */;
    %995 = %994.0;
    (%995,)
  };
  %996() /* ty=(Tensor[(10, 1, 7), bool],) */
}

def @func_3171(%var_3157: Tensor[(10, 7, 7), bool]) -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), float32], Tensor[(10, 7, 7), int64], Tensor[(10, 1, 7), bool]) {
  %997 = @func_2773() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(4, 11, 8), uint16], Tensor[(352, 1), uint16]) */;
  %998 = @func_2848() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), float32]) */;
  %999 = %998.1;
  %1000 = cast(%999, dtype="float32") /* ty=Tensor[(10, 1, 7), float32] */;
  %1001 = @func_2848() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), float32]) */;
  %1002 = %1001.0;
  %1003 = cast(%1002, dtype="int64") /* ty=Tensor[(10, 1, 7), int64] */;
  %1004 = cast(%var_3157, dtype="int64") /* ty=Tensor[(10, 7, 7), int64] */;
  %1005 = @func_2848() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), float32]) */;
  %1006 = %997.0;
  %1007 = rsqrt(%1000) /* ty=Tensor[(10, 1, 7), float32] */;
  %1008 = right_shift(%1003, %1004) /* ty=Tensor[(10, 7, 7), int64] */;
  %1009 = %1005.0;
  (%1006, %1007, %1008, %1009)
}

def @func_6779() -> Tensor[(10, 1, 7), bool] {
  @func_5926() /* ty=Tensor[(10, 1, 7), bool] */
}

def @func_12922() -> (Tensor[(10, 1, 7), bool], Tensor[(9, ?, 12), uint8]) {
  %1013 = fn () -> (Tensor[(10, 1, 7), bool], Tensor[(9, ?, 12), uint8]) {
    %1010 = @func_4280() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) */;
    %1011 = %1010.0;
    %1012 = @func_11594() /* ty=Tensor[(9, ?, 12), uint8] */;
    (%1011, %1012)
  };
  %1013() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(9, ?, 12), uint8]) */
}

def @func_3387() -> (Tensor[(10, 1, 7), float64], Tensor[(10, 1, 7), float32]) {
  @func_3385() /* ty=(Tensor[(10, 1, 7), float64], Tensor[(10, 1, 7), float32]) */
}

def @func_8264() -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) {
  %1014 = @func_6597() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %1015 = @func_6779() /* ty=Tensor[(10, 1, 7), bool] */;
  %1016 = @func_3017() /* ty=Tensor[(10, 1, 7), bool] */;
  %1017 = %1014.0;
  (%1015, %1016, %1017)
}

def @func_11142() -> Tensor[(140), bool] {
  %1018 = fn () -> Tensor[(140), bool] {
    @func_10808() /* ty=Tensor[(140), bool] */
  };
  %1018() /* ty=Tensor[(140), bool] */
}

def @func_9155() -> (Tensor[(10, 1, 7), bool],) {
  %1019 = @func_3836() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %1020 = %1019.0;
  (%1020,)
}

def @func_8979() -> (Tensor[(9, ?, 12), uint8],) {
  @func_8977() /* ty=(Tensor[(9, ?, 12), uint8],) */
}

def @func_7065(%var_7063: Tensor[(4, 12, 3), float64]) -> Tensor[(4, 12, 3), float64] {
  @func_7062(%var_7063) /* ty=Tensor[(4, 12, 3), float64] */
}

def @func_11952() -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) {
  %1021 = @func_6071() /* ty=Tensor[(10, 1, 7), bool] */;
  %1022 = @func_4803() /* ty=Tensor[(10, 1, 7), bool] */;
  (%1021, %1022)
}

def @func_7135() -> Tensor[(10, 1, 7), bool] {
  %1023 = @func_5550() /* ty=(Tensor[(10, 1, 7), bool],) */;
  %1023.0
}

def @func_4880() -> (Tensor[(10, 1, 7), float32], Tensor[(352, 5), bool]) {
  @func_4878() /* ty=(Tensor[(10, 1, 7), float32], Tensor[(352, 5), bool]) */
}

def @func_5680() -> Tensor[(10, 1, 7), float32] {
  %1025 = fn () -> Tensor[(10, 1, 7), float32] {
    %1024 = @func_2848() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), float32]) */;
    %1024.1
  };
  %1025() /* ty=Tensor[(10, 1, 7), float32] */
}

def @func_5433() -> Tensor[(352, 5), float64] {
  %1026 = @func_4622() /* ty=(Tensor[(352, 5), bool],) */;
  %1027 = %1026.0;
  %1028 = cast(meta[relay.Constant][37] /* ty=Tensor[(352, 5), bool] */, dtype="float64") /* ty=Tensor[(352, 5), float64] */;
  %1029 = shape_of(%1027, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1030 = cast(%1027, dtype="float64") /* ty=Tensor[(352, 5), float64] */;
  %1031 = dyn.reshape(%1028, %1029, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  floor_divide(%1030, %1031) /* ty=Tensor[(352, 5), float64] */
}

def @func_10094(%var_10092: Tensor[(10, 6, 7), float32], %var_10093: Tensor[(2112), float32]) -> (Tensor[(10, 6, 7), bool], Tensor[(10, 1, 7), float32], Tensor[(10, 1, 7), bool], Tensor[(352, 6), bool], Tensor[(2112), float32]) {
  %1047 = fn (%var_10030: Tensor[(10, 6, 7), float32], %var_10071: Tensor[(2112), float32]) -> (Tensor[(10, 6, 7), bool], Tensor[(10, 1, 7), float32], Tensor[(10, 1, 7), bool], Tensor[(352, 6), bool], Tensor[(2112), float32]) {
    %1032 = @func_8570() /* ty=(Tensor[(10, 1, 7), float32],) */;
    %1033 = %1032.0;
    %1034 = cast(%1033, dtype="bool") /* ty=Tensor[(10, 1, 7), bool] */;
    %1035 = cast(%var_10030, dtype="bool") /* ty=Tensor[(10, 6, 7), bool] */;
    %1036 = @func_6213() /* ty=(Tensor[(10, 1, 7), bool],) */;
    %1037 = %1036.0;
    %1038 = cast(%1037, dtype="float32") /* ty=Tensor[(10, 1, 7), float32] */;
    %1039 = @func_6473() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(352), uint16], Tensor[(140), float64], Tensor[(10, 1, 7), bool]) */;
    %1040 = cast(%var_10071, dtype="float32") /* ty=Tensor[(2112), float32] */;
    %1041 = reshape(%1040, newshape=[352, 6]) /* ty=Tensor[(352, 6), float32] */;
    %1042 = @func_4460(%1041) /* ty=(Tensor[(352, 6), bool], Tensor[(352, 6), int16]) */;
    %1043 = equal(%1034, %1035) /* ty=Tensor[(10, 6, 7), bool] */;
    %1044 = asin(%1038) /* ty=Tensor[(10, 1, 7), float32] */;
    %1045 = %1039.1;
    %1046 = %1042.0;
    (%1043, %1044, %1045, %1046, %var_10071)
  };
  %1047(%var_10092, %var_10093) /* ty=(Tensor[(10, 6, 7), bool], Tensor[(10, 1, 7), float32], Tensor[(10, 1, 7), bool], Tensor[(352, 6), bool], Tensor[(2112), float32]) */
}

def @func_4751() -> Tensor[(10, 1, 7), float32] {
  %1048 = @func_3498() /* ty=(Tensor[(10, 1, 7), float32],) */;
  %1048.0
}

def @func_4805() -> Tensor[(10, 1, 7), bool] {
  @func_4803() /* ty=Tensor[(10, 1, 7), bool] */
}

def @func_3838() -> (Tensor[(10, 1, 7), bool],) {
  @func_3836() /* ty=(Tensor[(10, 1, 7), bool],) */
}

def @func_6837(%var_6835: Tensor[(490), bool], %var_6836: Tensor[(88, 1), float64]) -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(490), bool], Tensor[(88, 1), float64], Tensor[(?, 352), float64]) {
  @func_6833(%var_6835, %var_6836) /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool], Tensor[(490), bool], Tensor[(88, 1), float64], Tensor[(?, 352), float64]) */
}

def @func_6597() -> (Tensor[(10, 1, 7), bool],) {
  %1049 = @func_4803() /* ty=Tensor[(10, 1, 7), bool] */;
  (%1049,)
}

def @func_8878() -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) {
  %1053 = fn () -> (Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) {
    %1050 = @func_6597() /* ty=(Tensor[(10, 1, 7), bool],) */;
    %1051 = @func_3017() /* ty=Tensor[(10, 1, 7), bool] */;
    %1052 = %1050.0;
    (%1051, %1052)
  };
  %1053() /* ty=(Tensor[(10, 1, 7), bool], Tensor[(10, 1, 7), bool]) */
}

def @func_9672(%var_9671: Tensor[(10, 2, 7), bool]) -> (Tensor[(10, 2, 7), int8],) {
  %1058 = fn (%var_9650: Tensor[(10, 2, 7), bool]) -> (Tensor[(10, 2, 7), int8],) {
    %1054 = @func_6940() /* ty=Tensor[(10, 1, 7), bool] */;
    %1055 = cast(%1054, dtype="int8") /* ty=Tensor[(10, 1, 7), int8] */;
    %1056 = cast(%var_9650, dtype="int8") /* ty=Tensor[(10, 2, 7), int8] */;
    %1057 = bitwise_xor(%1055, %1056) /* ty=Tensor[(10, 2, 7), int8] */;
    (%1057,)
  };
  %1058(%var_9671) /* ty=(Tensor[(10, 2, 7), int8],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen908/build/output.py", line 3465, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [14:43:13] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

