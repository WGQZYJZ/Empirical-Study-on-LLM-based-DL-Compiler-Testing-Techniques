==========mod==========
#[version = "0.0.5"]
def @func_7304(%var_7237: Tensor[(1, 168), float32]) -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(15, 4, 168), bool], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(15, 4, 168), int32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(1, 168), float32]) {
  %0 = @func_810() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %1 = cast(%var_7237, dtype="float32") /* ty=Tensor[(1, 168), float32] */;
  %2 = reshape(%1, newshape=[6, 2, 14]) /* ty=Tensor[(6, 2, 14), float32] */;
  %3 = @func_624(%2) /* ty=(Tensor[(15, 4, ?), bool], Tensor[(60, 1), int16], Tensor[(15, 4, ?), bool], Tensor[(6, 2, 14), int32], Tensor[(3, 20), int16], uint64, Tensor[(50), uint64], Tensor[(15, 4, ?), bool], Tensor[(15, 4, ?), bool], Tensor[(15, 4, ?), bool], Tensor[(15, 4, ?), bool], Tensor[(6, 2, 14), float64]) */;
  %4 = %3.9;
  %5 = cast(%4, dtype="bool") /* ty=Tensor[(15, 4, ?), bool] */;
  %6 = cast(%var_7237, dtype="bool") /* ty=Tensor[(1, 168), bool] */;
  %7 = @func_7101() /* ty=(Tensor[(14, 12, 13), float64],) */;
  %8 = @func_6183() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) */;
  %9 = cast(%var_7237, dtype="int32") /* ty=Tensor[(1, 168), int32] */;
  %10 = cast(%4, dtype="int32") /* ty=Tensor[(15, 4, ?), int32] */;
  %11 = @func_4351() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) */;
  %12 = @func_7101() /* ty=(Tensor[(14, 12, 13), float64],) */;
  %13 = @func_5702() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
  %14 = cast(%var_7237, dtype="float32") /* ty=Tensor[(1, 168), float32] */;
  %15 = @func_1055() /* ty=Tensor[(14, 12, 13), float64] */;
  %16 = %0.0;
  %17 = less_equal(%5, %6) /* ty=Tensor[(15, 4, 168), bool] */;
  %18 = %7.0;
  %19 = @func_6354() /* ty=Tensor[(14, 12, 13), float64] */;
  %20 = %8.0;
  %21 = right_shift(%9, %10) /* ty=Tensor[(15, 4, 168), int32] */;
  %22 = %11.0;
  %23 = %12.0;
  %24 = %13.0;
  %25 = exp(%14) /* ty=Tensor[(1, 168), float32] */;
  (%15, %16, %17, %18, %19, %20, %21, %22, %23, %24, %25)
}

def @func_9328() -> (Tensor[(14, 12, 13), uint32],) {
  %26 = @func_6339() /* ty=Tensor[(14, 12, 13), uint32] */;
  (%26,)
}

def @func_10088() -> (Tensor[(14, 12, 13), float64],) {
  %27 = @func_7955() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %28 = %27.0;
  %29 = cast(%28, dtype="float64") /* ty=Tensor[(14, 12, 13), float64] */;
  %30 = log10(%29) /* ty=Tensor[(14, 12, 13), float64] */;
  (%30,)
}

def @func_8824(%var_8718: Tensor[(5, 13, 12), int64], %var_8719: Tensor[(5, 13, 12), int64], %var_8728: Tensor[(1, 56), float32], %var_8729: Tensor[(728), float32], %var_8752: Tensor[(168), float32], %var_8787: Tensor[(5, 13, 12), float64], %var_8812: Tensor[(270), uint8]) -> (Tensor[(4, 13, 14), float32], Tensor[(1, 56), float32], Tensor[(728), float32], Tensor[(168), float32], Tensor[(168), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(5, 13, 12), uint16], Tensor[(5, 13, 12), uint8], Tensor[(5, 13, 12), uint32], Tensor[(14, 12, 13), float64], Tensor[(270), uint8]) {
  %31 = cast(%var_8728, dtype="float32") /* ty=Tensor[(1, 56), float32] */;
  %32 = cast(%var_8729, dtype="float32") /* ty=Tensor[(728), float32] */;
  %33 = reshape(%31, newshape=[4, 1, 14]) /* ty=Tensor[(4, 1, 14), float32] */;
  %34 = reshape(%32, newshape=[4, 13, 14]) /* ty=Tensor[(4, 13, 14), float32] */;
  %35 = cast(%var_8752, dtype="float32") /* ty=Tensor[(168), float32] */;
  %36 = reshape(%35, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %37 = @func_5906(%36) /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(168), float32], Tensor[(168), float32]) */;
  %38 = %37.1;
  %39 = cast(%38, dtype="float32") /* ty=Tensor[(168), float32] */;
  %40 = reshape(%39, newshape=[1, 168]) /* ty=Tensor[(1, 168), float32] */;
  %41 = @func_7304(%40) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(15, 4, 168), bool], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(15, 4, 168), int32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(1, 168), float32]) */;
  %42 = cast(%var_8719, dtype="int64") /* ty=Tensor[(5, 13, 12), int64] */;
  %43 = shape_of(%var_8718, dtype="int32") /* ty=Tensor[(3), int32] */;
  %44 = cast(%var_8718, dtype="int64") /* ty=Tensor[(5, 13, 12), int64] */;
  %45 = dyn.reshape(%42, %43, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %46 = left_shift(%44, %45) /* ty=Tensor[(5, 13, 12), int64] */;
  %47 = cast(%46, dtype="float64") /* ty=Tensor[(5, 13, 12), float64] */;
  %48 = tan(%47) /* ty=Tensor[(5, 13, 12), float64] */;
  %49 = cast(%48, dtype="float64") /* ty=Tensor[(5, 13, 12), float64] */;
  %50 = sigmoid(%49) /* ty=Tensor[(5, 13, 12), float64] */;
  %51 = cast(%var_8787, dtype="uint16") /* ty=Tensor[(5, 13, 12), uint16] */;
  %52 = shape_of(%50, dtype="int32") /* ty=Tensor[(3), int32] */;
  %53 = cast(%50, dtype="uint16") /* ty=Tensor[(5, 13, 12), uint16] */;
  %54 = dyn.reshape(%51, %52, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %55 = cast(%var_8718, dtype="uint8") /* ty=Tensor[(5, 13, 12), uint8] */;
  %56 = shape_of(%48, dtype="int32") /* ty=Tensor[(3), int32] */;
  %57 = cast(%48, dtype="uint8") /* ty=Tensor[(5, 13, 12), uint8] */;
  %58 = dyn.reshape(%55, %56, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %59 = cast(%46, dtype="uint32") /* ty=Tensor[(5, 13, 12), uint32] */;
  %60 = shape_of(%50, dtype="int32") /* ty=Tensor[(3), int32] */;
  %61 = cast(%50, dtype="uint32") /* ty=Tensor[(5, 13, 12), uint32] */;
  %62 = dyn.reshape(%59, %60, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %63 = cast(%var_8812, dtype="uint8") /* ty=Tensor[(270), uint8] */;
  %64 = reshape(%63, newshape=[270]) /* ty=Tensor[(270), uint8] */;
  %65 = @func_5148(%64) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(270), uint8], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
  %66 = @func_5871(%33, %34) /* ty=Tensor[(4, 13, 14), float32] */;
  %67 = @func_1191() /* ty=Tensor[(14, 12, 13), uint32] */;
  %68 = %41.5;
  %69 = @func_6626() /* ty=Tensor[(14, 12, 13), uint32] */;
  %70 = multiply(%53, %54) /* ty=Tensor[(5, 13, 12), uint16] */;
  %71 = bitwise_or(%57, %58) /* ty=Tensor[(5, 13, 12), uint8] */;
  %72 = bitwise_xor(%61, %62) /* ty=Tensor[(5, 13, 12), uint32] */;
  %73 = %65.4;
  (%66, %var_8728, %var_8729, %38, %var_8752, %67, %68, %69, %70, %71, %72, %73, %var_8812)
}

def @func_9908(%var_9898: Tensor[(10, 8, 16), float64]) -> Tensor[(10, 8, 16), float64] {
  %74 = cast(%var_9898, dtype="float64") /* ty=Tensor[(10, 8, 16), float64] */;
  sinh(%74) /* ty=Tensor[(10, 8, 16), float64] */
}

def @func_6261() -> (Tensor[(14, 12, 13), uint32],) {
  %75 = @func_778() /* ty=Tensor[(14, 12, 13), uint32] */;
  (%75,)
}

def @func_10224() -> (Tensor[(270), uint8],) {
  %76 = @func_9176() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(270), uint8]) */;
  %77 = %76.1;
  (%77,)
}

def @func_11936(%var_11923: Tensor[(5, 2, 3), float64]) -> Tensor[(5, 2, 3), float64] {
  %78 = cast(%var_11923, dtype="float64") /* ty=Tensor[(5, 2, 3), float64] */;
  log10(%78) /* ty=Tensor[(5, 2, 3), float64] */
}

def @func_7481() -> Tensor[(14, 12, 13), uint32] {
  @func_6339() /* ty=Tensor[(14, 12, 13), uint32] */
}

def @func_9198() -> (Tensor[(270), uint8],) {
  %79 = @func_8924() /* ty=Tensor[(270), uint8] */;
  (%79,)
}

def @func_10355(%var_10350: Tensor[(168), float32]) -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(168), float32], Tensor[(168), float32], Tensor[(14, 12, 13), float64]) {
  %80 = @func_4573() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %81 = @func_9328() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %82 = cast(%var_10350, dtype="float32") /* ty=Tensor[(168), float32] */;
  %83 = reshape(%82, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %84 = @func_1733(%83) /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(168), float32], Tensor[(168), float32], Tensor[(14, 12, 13), float32]) */;
  %85 = @func_1754() /* ty=Tensor[(14, 12, 13), uint32] */;
  %86 = %80.0;
  %87 = %81.0;
  %88 = %84.2;
  %89 = @func_1081() /* ty=Tensor[(14, 12, 13), float64] */;
  (%85, %86, %87, %88, %var_10350, %89)
}

def @func_910() -> (Tensor[(14, 12, 13), float64],) {
  %90 = @func_778() /* ty=Tensor[(14, 12, 13), uint32] */;
  %91 = cast(%90, dtype="float64") /* ty=Tensor[(14, 12, 13), float64] */;
  %92 = sigmoid(%91) /* ty=Tensor[(14, 12, 13), float64] */;
  (%92,)
}

def @func_9050() -> (Tensor[(14, 12, 13), float64], Tensor[(5, 10, 1), bool], uint64, Tensor[(50), uint64]) {
  %93 = @func_6280() /* ty=(Tensor[(14, 12, 13), float64],) */;
  %94 = cast(meta[relay.Constant][0] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %95 = cast(meta[relay.Constant][1] /* ty=Tensor[(50), uint64] */, dtype="uint64") /* ty=Tensor[(50), uint64] */;
  %96 = reshape(%94, newshape=[]) /* ty=uint64 */;
  %97 = reshape(%95, newshape=[5, 10, 1]) /* ty=Tensor[(5, 10, 1), uint64] */;
  %98 = @func_408(%96, %97) /* ty=(Tensor[(5, 10, 1), bool], Tensor[(15, 4, ?), bool], Tensor[(3, 20), int16]) */;
  %99 = %93.0;
  %100 = %98.0;
  (%99, %100, meta[relay.Constant][0] /* ty=uint64 */, meta[relay.Constant][1] /* ty=Tensor[(50), uint64] */)
}

def @func_8043() -> (Tensor[(14, 12, 13), float32],) {
  %101 = @func_4546() /* ty=Tensor[(14, 12, 13), float32] */;
  (%101,)
}

def @func_5529() -> Tensor[(14, 12, 13), uint32] {
  %102 = @func_4573() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %102.0
}

def @func_7848() -> (Tensor[(14, 12, 13), float64],) {
  %103 = @func_3280() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(168), float32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
  %104 = %103.0;
  (%104,)
}

def @func_8221() -> (Tensor[(14, 12, 13), uint32],) {
  %105 = @func_5187() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %106 = %105.0;
  (%106,)
}

def @func_5148(%var_5104: Tensor[(270), uint8]) -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(270), uint8], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) {
  %107 = cast(%var_5104, dtype="uint8") /* ty=Tensor[(270), uint8] */;
  %108 = reshape(%107, newshape=[270, 1]) /* ty=Tensor[(270, 1), uint8] */;
  %109 = @func_1289(%108) /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(2, 15, 9), float64], Tensor[(270, 1), uint8], Tensor[(14, 12, 13), float64]) */;
  %110 = @func_2249() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
  %111 = @func_2304() /* ty=Tensor[(14, 12, 13), float64] */;
  %112 = %109.2;
  %113 = %110.0;
  %114 = @func_2304() /* ty=Tensor[(14, 12, 13), float64] */;
  (%111, %112, %var_5104, %113, %114)
}

def @func_2817(%var_2814: Tensor[(168), float32]) -> (Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(168), float32]) {
  %115 = cast(%var_2814, dtype="float32") /* ty=Tensor[(168), float32] */;
  %116 = reshape(%115, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %117 = @func_1733(%116) /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(168), float32], Tensor[(168), float32], Tensor[(14, 12, 13), float32]) */;
  %118 = @func_2696() /* ty=Tensor[(14, 12, 13), float64] */;
  %119 = %117.2;
  (%118, %119, %var_2814)
}

def @func_4609(%var_4596: Tensor[(14, 12, 13), float64]) -> Tensor[(14, 12, 13), int64] {
  %120 = @func_3706() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(15, 4, ?), bool]) */;
  %121 = %120.2;
  %122 = cast(%var_4596, dtype="int64") /* ty=Tensor[(14, 12, 13), int64] */;
  %123 = shape_of(%121, dtype="int32") /* ty=Tensor[(3), int32] */;
  %124 = cast(%121, dtype="int64") /* ty=Tensor[(14, 12, 13), int64] */;
  %125 = dyn.reshape(%122, %123, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  maximum(%124, %125) /* ty=Tensor[(14, 12, 13), int64] */
}

def @func_6280() -> (Tensor[(14, 12, 13), float64],) {
  %126 = @func_4351() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) */;
  %127 = %126.1;
  (%127,)
}

def @func_7955() -> (Tensor[(14, 12, 13), uint32],) {
  %128 = @func_6339() /* ty=Tensor[(14, 12, 13), uint32] */;
  (%128,)
}

def @func_825() -> Tensor[(14, 12, 13), uint32] {
  @func_778() /* ty=Tensor[(14, 12, 13), uint32] */
}

def @func_4891(%var_4821: Tensor[(50), uint64], %var_4834: Tensor[(168), float32], %var_4878: Tensor[(15, 4, 168), uint8]) -> (Tensor[(270), uint8], uint64, Tensor[(50), uint64], Tensor[(168), float32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(15, 4, 168), int32]) {
  %129 = cast(%var_4834, dtype="float32") /* ty=Tensor[(168), float32] */;
  %130 = reshape(%129, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %131 = @func_1733(%130) /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(168), float32], Tensor[(168), float32], Tensor[(14, 12, 13), float32]) */;
  %132 = @func_4351() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) */;
  %133 = @func_4351() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) */;
  %134 = cast(meta[relay.Constant][2] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %135 = cast(%var_4821, dtype="uint64") /* ty=Tensor[(50), uint64] */;
  %136 = reshape(%134, newshape=[]) /* ty=uint64 */;
  %137 = reshape(%135, newshape=[10, 5]) /* ty=Tensor[(10, 5), uint64] */;
  %138 = @func_2433(%136, %137) /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], uint64, Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(60), int16], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(10, 5), uint64], Tensor[(10, 5), uint64], Tensor[(14, 12, 13), uint32], Tensor[(3, 20), int16], Tensor[(15, 4, 168), float32]) */;
  %139 = %138.12;
  %140 = cast(%139, dtype="float64") /* ty=Tensor[(15, 4, 168), float64] */;
  %141 = tan(%140) /* ty=Tensor[(15, 4, 168), float64] */;
  %142 = cast(%141, dtype="uint8") /* ty=Tensor[(15, 4, 168), uint8] */;
  %143 = cast(%var_4834, dtype="uint8") /* ty=Tensor[(168), uint8] */;
  %144 = logical_xor(%142, %143) /* ty=Tensor[(15, 4, 168), uint8] */;
  %145 = cast(%var_4878, dtype="int32") /* ty=Tensor[(15, 4, 168), int32] */;
  %146 = shape_of(%144, dtype="int32") /* ty=Tensor[(3), int32] */;
  %147 = cast(%144, dtype="int32") /* ty=Tensor[(15, 4, 168), int32] */;
  %148 = dyn.reshape(%145, %146, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %149 = @func_3625() /* ty=Tensor[(270), uint8] */;
  %150 = %131.3;
  %151 = @func_2304() /* ty=Tensor[(14, 12, 13), float64] */;
  %152 = %132.0;
  %153 = %133.0;
  %154 = subtract(%147, %148) /* ty=Tensor[(15, 4, 168), int32] */;
  (%149, meta[relay.Constant][2] /* ty=uint64 */, %var_4821, %150, %151, %152, %153, %154)
}

def @func_5086(%var_5062: Tensor[(13, 3, 7), float64]) -> (Tensor[(13, 3, 7), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) {
  %155 = cast(%var_5062, dtype="float64") /* ty=Tensor[(13, 3, 7), float64] */;
  %156 = @func_3706() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(15, 4, ?), bool]) */;
  %157 = sigmoid(%155) /* ty=Tensor[(13, 3, 7), float64] */;
  %158 = %156.2;
  %159 = @func_1055() /* ty=Tensor[(14, 12, 13), float64] */;
  (%157, %158, %159)
}

def @func_7409() -> (Tensor[(14, 12, 13), float64], Tensor[(11, 11, 12), float64], Tensor[(14, 12, 13), float64], Tensor[(273), float64], Tensor[(168), float32], Tensor[(168), float32], Tensor[(1, 50), float32], Tensor[(14, 12, 13), uint32]) {
  %160 = @func_2249() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
  %161 = cast(meta[relay.Constant][3] /* ty=Tensor[(273), float64] */, dtype="float64") /* ty=Tensor[(273), float64] */;
  %162 = reshape(%161, newshape=[13, 3, 7]) /* ty=Tensor[(13, 3, 7), float64] */;
  %163 = @func_5086(%162) /* ty=(Tensor[(13, 3, 7), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
  %164 = cast(meta[relay.Constant][4] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %165 = reshape(%164, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %166 = @func_2817(%165) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(168), float32]) */;
  %167 = @func_3441() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(1, 50), bool], Tensor[(1, 50), float32], Tensor[(14, 12, 13), float64], Tensor[(270), uint8]) */;
  %168 = @func_5237() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) */;
  %169 = %160.1;
  %170 = @func_3364() /* ty=Tensor[(11, 11, 12), float64] */;
  %171 = %163.1;
  %172 = %166.2;
  %173 = %167.2;
  %174 = %168.1;
  (%169, %170, %171, meta[relay.Constant][3] /* ty=Tensor[(273), float64] */, %172, meta[relay.Constant][4] /* ty=Tensor[(168), float32] */, %173, %174)
}

def @func_4351() -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) {
  %175 = @func_2161() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) */;
  %176 = %175.1;
  %177 = cast(%176, dtype="float64") /* ty=Tensor[(14, 12, 13), float64] */;
  %178 = reshape(%177, newshape=[14, 12, 13]) /* ty=Tensor[(14, 12, 13), float64] */;
  %179 = @func_1454(%178) /* ty=(Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), float64]) */;
  %180 = %179.1;
  (%176, %180)
}

def @func_5969() -> (Tensor[(14, 12, 13), float64],) {
  %181 = @func_3280() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(168), float32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
  %182 = %181.4;
  (%182,)
}

def @func_12027() -> (Tensor[(14, 12, 13), uint32],) {
  %183 = @func_825() /* ty=Tensor[(14, 12, 13), uint32] */;
  (%183,)
}

def @func_7716() -> (Tensor[(14, 12, 13), float64],) {
  %184 = @func_6006() /* ty=(Tensor[(14, 12, 13), float64],) */;
  %185 = %184.0;
  (%185,)
}

def @func_810() -> (Tensor[(14, 12, 13), uint32],) {
  %186 = @func_778() /* ty=Tensor[(14, 12, 13), uint32] */;
  (%186,)
}

def @func_4203() -> (Tensor[(14, 12, 13), uint32], Tensor[(2, 15, 9), float64], Tensor[(270), uint8]) {
  %187 = @func_2161() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) */;
  %188 = cast(meta[relay.Constant][5] /* ty=Tensor[(270), uint8] */, dtype="uint8") /* ty=Tensor[(270), uint8] */;
  %189 = cast(meta[relay.Constant][5] /* ty=Tensor[(270), uint8] */, dtype="uint8") /* ty=Tensor[(270), uint8] */;
  %190 = reshape(%188, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), uint8] */;
  %191 = reshape(%189, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), uint8] */;
  %192 = %187.1;
  %193 = @func_870(%190, %191) /* ty=Tensor[(2, 15, 9), float64] */;
  (%192, %193, meta[relay.Constant][5] /* ty=Tensor[(270), uint8] */)
}

def @func_3625() -> Tensor[(270), uint8] {
  %194 = @func_3441() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(1, 50), bool], Tensor[(1, 50), float32], Tensor[(14, 12, 13), float64], Tensor[(270), uint8]) */;
  %194.4
}

def @func_9370(%var_9337: uint32) -> (Tensor[(10, 7, 1), bool],) {
  %195 = cast(%var_9337, dtype="bool") /* ty=bool */;
  %196 = cast(meta[relay.Constant][6] /* ty=Tensor[(10, 7, 1), uint32] */, dtype="bool") /* ty=Tensor[(10, 7, 1), bool] */;
  %197 = less(%195, %196) /* ty=Tensor[(10, 7, 1), bool] */;
  (%197,)
}

def @func_6766(%var_6740: Tensor[(3, 11, 7), uint16], %var_6741: Tensor[(3, 11, 7), uint16]) -> Tensor[(3, 11, 7), uint16] {
  %198 = cast(%var_6741, dtype="uint16") /* ty=Tensor[(3, 11, 7), uint16] */;
  %199 = shape_of(%var_6740, dtype="int32") /* ty=Tensor[(3), int32] */;
  %200 = cast(%var_6740, dtype="uint16") /* ty=Tensor[(3, 11, 7), uint16] */;
  %201 = dyn.reshape(%198, %199, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  maximum(%200, %201) /* ty=Tensor[(3, 11, 7), uint16] */
}

def @func_5029() -> Tensor[(14, 12, 13), float64] {
  %202 = @func_2524() /* ty=(Tensor[(14, 12, 13), int32], Tensor[(14, 12, 13), float64]) */;
  %202.1
}

def @func_2696() -> Tensor[(14, 12, 13), float64] {
  @func_1229() /* ty=Tensor[(14, 12, 13), float64] */
}

def @func_5417() -> Tensor[(14, 12, 13), float64] {
  %203 = @func_3595() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
  %203.2
}

def @func_8016() -> Tensor[(270), uint8] {
  @func_4978() /* ty=Tensor[(270), uint8] */
}

def @func_11212() -> (Tensor[(14, 12, 13), float64], Tensor[(10, 7, 1), bool], uint32) {
  %204 = cast(meta[relay.Constant][7] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %205 = reshape(%204, newshape=[]) /* ty=uint32 */;
  %206 = @func_9370(%205) /* ty=(Tensor[(10, 7, 1), bool],) */;
  %207 = @func_11149() /* ty=Tensor[(14, 12, 13), float64] */;
  %208 = %206.0;
  (%207, %208, meta[relay.Constant][7] /* ty=uint32 */)
}

def @func_4711() -> Tensor[(270), uint8] {
  %209 = @func_3441() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(1, 50), bool], Tensor[(1, 50), float32], Tensor[(14, 12, 13), float64], Tensor[(270), uint8]) */;
  %209.4
}

def @func_2161() -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) {
  %210 = @func_1584() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) */;
  %211 = @func_825() /* ty=Tensor[(14, 12, 13), uint32] */;
  %212 = %210.1;
  (%211, %212)
}

def @func_12381() -> (Tensor[(14, 12, 13), float32], Tensor[(11, 11, 12), float64], Tensor[(14, 12, 13), float64]) {
  %213 = @func_4130() /* ty=(Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), float32]) */;
  %214 = %213.1;
  %215 = cast(%214, dtype="float64") /* ty=Tensor[(14, 12, 13), float64] */;
  %216 = reshape(%215, newshape=[14, 12, 13]) /* ty=Tensor[(14, 12, 13), float64] */;
  %217 = @func_1454(%216) /* ty=(Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), float64]) */;
  %218 = @func_3364() /* ty=Tensor[(11, 11, 12), float64] */;
  %219 = %217.1;
  (%214, %218, %219)
}

def @func_3706() -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(15, 4, ?), bool]) {
  %220 = @func_3595() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
  %221 = %220.1;
  %222 = cast(%221, dtype="float64") /* ty=Tensor[(14, 12, 13), float64] */;
  %223 = reshape(%222, newshape=[14, 12, 13]) /* ty=Tensor[(14, 12, 13), float64] */;
  %224 = @func_1454(%223) /* ty=(Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), float64]) */;
  %225 = @func_3123() /* ty=(Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(15, 4, ?), bool], Tensor[(6, 28), float32], Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), float64]) */;
  %226 = @func_1191() /* ty=Tensor[(14, 12, 13), uint32] */;
  %227 = %224.1;
  %228 = %225.3;
  (%226, %221, %227, %228)
}

def @func_316(%var_285: Tensor[(15, 4, 1), int16], %var_286: Tensor[(15, 4, 1), int16]) -> (Tensor[(15, 4, ?), bool],) {
  %229 = cast(%var_286, dtype="int32") /* ty=Tensor[(15, 4, 1), int32] */;
  %230 = shape_of(%var_285, dtype="int32") /* ty=Tensor[(3), int32] */;
  %231 = cast(%var_285, dtype="int32") /* ty=Tensor[(15, 4, 1), int32] */;
  %232 = dyn.reshape(%229, %230, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %233 = left_shift(%231, %232) /* ty=Tensor[(15, 4, ?), int32] */;
  %234 = cast(%var_286, dtype="bool") /* ty=Tensor[(15, 4, 1), bool] */;
  %235 = shape_of(%var_285, dtype="int32") /* ty=Tensor[(3), int32] */;
  %236 = cast(%var_285, dtype="bool") /* ty=Tensor[(15, 4, 1), bool] */;
  %237 = dyn.reshape(%234, %235, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %238 = greater(%236, %237) /* ty=Tensor[(15, 4, ?), bool] */;
  %239 = cast(%238, dtype="bool") /* ty=Tensor[(15, 4, ?), bool] */;
  %240 = shape_of(%233, dtype="int32") /* ty=Tensor[(3), int32] */;
  %241 = cast(%233, dtype="bool") /* ty=Tensor[(15, 4, ?), bool] */;
  %242 = dyn.reshape(%239, %240, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %243 = less(%241, %242) /* ty=Tensor[(15, 4, ?), bool] */;
  (%243,)
}

def @func_10614(%var_10604: Tensor[(56), float32], %var_10605: Tensor[(728), float32]) -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(270), float64], Tensor[(4, 13, 14), float32], Tensor[(56), float32], Tensor[(728), float32], Tensor[(168), float32], Tensor[(168), float32]) {
  %244 = @func_5666() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) */;
  %245 = @func_3625() /* ty=Tensor[(270), uint8] */;
  %246 = cast(meta[relay.Constant][8] /* ty=Tensor[(270), uint8] */, dtype="float64") /* ty=Tensor[(270), float64] */;
  %247 = shape_of(%245, dtype="int32") /* ty=Tensor[(1), int32] */;
  %248 = cast(%245, dtype="float64") /* ty=Tensor[(270), float64] */;
  %249 = dyn.reshape(%246, %247, newshape=[]) /* ty=Tensor[(?), float64] */;
  %250 = cast(%var_10604, dtype="float32") /* ty=Tensor[(56), float32] */;
  %251 = cast(%var_10605, dtype="float32") /* ty=Tensor[(728), float32] */;
  %252 = reshape(%250, newshape=[4, 1, 14]) /* ty=Tensor[(4, 1, 14), float32] */;
  %253 = reshape(%251, newshape=[4, 13, 14]) /* ty=Tensor[(4, 13, 14), float32] */;
  %254 = cast(meta[relay.Constant][9] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %255 = reshape(%254, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %256 = @func_5906(%255) /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(168), float32], Tensor[(168), float32]) */;
  %257 = %244.0;
  %258 = @func_7432() /* ty=Tensor[(14, 12, 13), float64] */;
  %259 = divide(%248, %249) /* ty=Tensor[(270), float64] */;
  %260 = @func_5871(%252, %253) /* ty=Tensor[(4, 13, 14), float32] */;
  %261 = %256.1;
  (%257, %258, %259, %260, %var_10604, %var_10605, %261, meta[relay.Constant][9] /* ty=Tensor[(168), float32] */)
}

def @func_4504() -> Tensor[(270), uint8] {
  %262 = @func_3441() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(1, 50), bool], Tensor[(1, 50), float32], Tensor[(14, 12, 13), float64], Tensor[(270), uint8]) */;
  %262.4
}

def @func_8345() -> (Tensor[(270), uint8], Tensor[(14, 12, 13), float64]) {
  %263 = @func_1584() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) */;
  %264 = @func_4978() /* ty=Tensor[(270), uint8] */;
  %265 = %263.0;
  (%264, %265)
}

def @func_5187() -> (Tensor[(14, 12, 13), uint32],) {
  %266 = @func_4573() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %267 = %266.0;
  (%267,)
}

def @func_7797() -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) {
  %268 = @func_1754() /* ty=Tensor[(14, 12, 13), uint32] */;
  %269 = @func_1754() /* ty=Tensor[(14, 12, 13), uint32] */;
  (%268, %269)
}

def @func_3364() -> Tensor[(11, 11, 12), float64] {
  %270 = cast(meta[relay.Constant][10] /* ty=Tensor[(11, 11, 12), float64] */, dtype="float64") /* ty=Tensor[(11, 11, 12), float64] */;
  acos(%270) /* ty=Tensor[(11, 11, 12), float64] */
}

def @func_10558(%var_10522: Tensor[(6, 3, 5), float32], %var_10552: Tensor[(6, 3, 5), float32]) -> (Tensor[(6, 3, 5), int64],) {
  %271 = cast(meta[relay.Constant][11] /* ty=Tensor[(6, 3, 5), float32] */, dtype="float32") /* ty=Tensor[(6, 3, 5), float32] */;
  %272 = shape_of(%var_10522, dtype="int32") /* ty=Tensor[(3), int32] */;
  %273 = cast(%var_10522, dtype="float32") /* ty=Tensor[(6, 3, 5), float32] */;
  %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %275 = mod(%273, %274) /* ty=Tensor[(6, 3, 5), float32] */;
  %276 = cast(%var_10552, dtype="int64") /* ty=Tensor[(6, 3, 5), int64] */;
  %277 = shape_of(%275, dtype="int32") /* ty=Tensor[(3), int32] */;
  %278 = cast(%275, dtype="int64") /* ty=Tensor[(6, 3, 5), int64] */;
  %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %280 = logical_xor(%278, %279) /* ty=Tensor[(6, 3, 5), int64] */;
  (%280,)
}

def @func_6626() -> Tensor[(14, 12, 13), uint32] {
  %281 = @func_4203() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(2, 15, 9), float64], Tensor[(270), uint8]) */;
  %281.0
}

def @func_3844() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) {
  %282 = @func_2304() /* ty=Tensor[(14, 12, 13), float64] */;
  %283 = @func_1191() /* ty=Tensor[(14, 12, 13), uint32] */;
  (%282, %283)
}

def @func_1191() -> Tensor[(14, 12, 13), uint32] {
  %284 = @func_810() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %284.0
}

def @func_2249() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) {
  %285 = @func_1055() /* ty=Tensor[(14, 12, 13), float64] */;
  %286 = cast(%285, dtype="float64") /* ty=Tensor[(14, 12, 13), float64] */;
  %287 = reshape(%286, newshape=[14, 12, 13]) /* ty=Tensor[(14, 12, 13), float64] */;
  %288 = @func_1454(%287) /* ty=(Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), float64]) */;
  %289 = %288.1;
  (%285, %289)
}

def @func_12617() -> (Tensor[(14, 12, 13), uint32],) {
  %290 = @func_1191() /* ty=Tensor[(14, 12, 13), uint32] */;
  (%290,)
}

def @func_9146() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) {
  %291 = @func_2215() /* ty=(Tensor[(14, 12, 13), float64],) */;
  %292 = %291.0;
  %293 = cast(%292, dtype="float64") /* ty=Tensor[(14, 12, 13), float64] */;
  %294 = @func_3123() /* ty=(Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(15, 4, ?), bool], Tensor[(6, 28), float32], Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), float64]) */;
  %295 = acos(%293) /* ty=Tensor[(14, 12, 13), float64] */;
  %296 = %294.6;
  (%295, %296)
}

def @func_7432() -> Tensor[(14, 12, 13), float64] {
  @func_3755() /* ty=Tensor[(14, 12, 13), float64] */
}

def @func_2433(%var_2362: uint64, %var_2405: Tensor[(10, 5), uint64]) -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], uint64, Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(60), int16], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(10, 5), uint64], Tensor[(10, 5), uint64], Tensor[(14, 12, 13), uint32], Tensor[(3, 20), int16], Tensor[(15, 4, 168), float32]) {
  %297 = @func_810() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %298 = cast(%var_2362, dtype="uint64") /* ty=uint64 */;
  %299 = reshape(%298, newshape=[]) /* ty=uint64 */;
  %300 = @func_992(%299) /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(5, 10, 1), bool], uint64, Tensor[(1, 50), uint64]) */;
  %301 = cast(meta[relay.Constant][12] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %302 = reshape(%301, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %303 = @func_1642(%302) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float32]) */;
  %304 = cast(meta[relay.Constant][12] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %305 = reshape(%304, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %306 = @func_1733(%305) /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(168), float32], Tensor[(168), float32], Tensor[(14, 12, 13), float32]) */;
  %307 = @func_910() /* ty=(Tensor[(14, 12, 13), float64],) */;
  %308 = @func_810() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %309 = cast(%var_2362, dtype="uint64") /* ty=uint64 */;
  %310 = cast(%var_2405, dtype="uint64") /* ty=Tensor[(10, 5), uint64] */;
  %311 = reshape(%309, newshape=[]) /* ty=uint64 */;
  %312 = reshape(%310, newshape=[10, 5]) /* ty=Tensor[(10, 5), uint64] */;
  %313 = @func_1920(%311, %312) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(15, 4, ?), bool], uint64, Tensor[(10, 5), uint64]) */;
  %314 = cast(%var_2362, dtype="uint64") /* ty=uint64 */;
  %315 = cast(%var_2405, dtype="uint64") /* ty=Tensor[(10, 5), uint64] */;
  %316 = reshape(%314, newshape=[]) /* ty=uint64 */;
  %317 = reshape(%315, newshape=[5, 10, 1]) /* ty=Tensor[(5, 10, 1), uint64] */;
  %318 = @func_408(%316, %317) /* ty=(Tensor[(5, 10, 1), bool], Tensor[(15, 4, ?), bool], Tensor[(3, 20), int16]) */;
  %319 = cast(meta[relay.Constant][13] /* ty=Tensor[(60), int16] */, dtype="int16") /* ty=Tensor[(60), int16] */;
  %320 = cast(meta[relay.Constant][13] /* ty=Tensor[(60), int16] */, dtype="int16") /* ty=Tensor[(60), int16] */;
  %321 = reshape(%319, newshape=[15, 4, 1]) /* ty=Tensor[(15, 4, 1), int16] */;
  %322 = reshape(%320, newshape=[15, 4, 1]) /* ty=Tensor[(15, 4, 1), int16] */;
  %323 = @func_316(%321, %322) /* ty=(Tensor[(15, 4, ?), bool],) */;
  %324 = %323.0;
  %325 = cast(meta[relay.Constant][12] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %326 = cast(%324, dtype="float32") /* ty=Tensor[(15, 4, ?), float32] */;
  %327 = %297.0;
  %328 = %300.1;
  %329 = %303.0;
  %330 = %306.0;
  %331 = %307.0;
  %332 = %308.0;
  %333 = %313.3;
  %334 = @func_1191() /* ty=Tensor[(14, 12, 13), uint32] */;
  %335 = %318.2;
  %336 = floor_mod(%325, %326) /* ty=Tensor[(15, 4, 168), float32] */;
  (%327, %328, %var_2362, %329, %330, meta[relay.Constant][13] /* ty=Tensor[(60), int16] */, %331, %332, %333, %var_2405, %334, %335, %336)
}

def @func_1289(%var_1267: Tensor[(270, 1), uint8]) -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(2, 15, 9), float64], Tensor[(270, 1), uint8], Tensor[(14, 12, 13), float64]) {
  %337 = cast(%var_1267, dtype="uint8") /* ty=Tensor[(270, 1), uint8] */;
  %338 = cast(%var_1267, dtype="uint8") /* ty=Tensor[(270, 1), uint8] */;
  %339 = reshape(%337, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), uint8] */;
  %340 = reshape(%338, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), uint8] */;
  %341 = @func_778() /* ty=Tensor[(14, 12, 13), uint32] */;
  %342 = @func_1055() /* ty=Tensor[(14, 12, 13), float64] */;
  %343 = @func_1229() /* ty=Tensor[(14, 12, 13), float64] */;
  %344 = @func_870(%339, %340) /* ty=Tensor[(2, 15, 9), float64] */;
  %345 = @func_1229() /* ty=Tensor[(14, 12, 13), float64] */;
  (%341, %342, %343, %344, %var_1267, %345)
}

def @func_7621() -> (Tensor[(14, 12, 13), float64],) {
  %346 = @func_6183() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) */;
  %347 = %346.0;
  (%347,)
}

def @func_12652() -> Tensor[(14, 12, 13), float64] {
  @func_10867() /* ty=Tensor[(14, 12, 13), float64] */
}

def @func_6482() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) {
  %348 = @func_3595() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
  %349 = @func_4075() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(6, 28), float32], Tensor[(14, 12, 13), float64]) */;
  %350 = %348.0;
  %351 = %349.3;
  (%350, %351)
}

def @func_9822() -> (Tensor[(14, 12, 13), float64],) {
  %352 = @func_6482() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
  %353 = %352.0;
  (%353,)
}

def @func_8084() -> Tensor[(14, 12, 13), float64] {
  @func_7188() /* ty=Tensor[(14, 12, 13), float64] */
}

def @func_4573() -> (Tensor[(14, 12, 13), uint32],) {
  %354 = @func_825() /* ty=Tensor[(14, 12, 13), uint32] */;
  (%354,)
}

def @func_9783() -> Tensor[(3, 50), float32] {
  %355 = @func_7409() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(11, 11, 12), float64], Tensor[(14, 12, 13), float64], Tensor[(273), float64], Tensor[(168), float32], Tensor[(168), float32], Tensor[(1, 50), float32], Tensor[(14, 12, 13), uint32]) */;
  %356 = %355.6;
  %357 = cast(%356, dtype="float32") /* ty=Tensor[(1, 50), float32] */;
  %358 = cast(meta[relay.Constant][14] /* ty=Tensor[(3, 50), float32] */, dtype="float32") /* ty=Tensor[(3, 50), float32] */;
  divide(%357, %358) /* ty=Tensor[(3, 50), float32] */
}

def @func_12299(%var_12249: uint64) -> (Tensor[(14, 12, 13), float64], Tensor[(10, 5), uint64], uint64, Tensor[(270), uint8]) {
  %359 = cast(%var_12249, dtype="uint64") /* ty=uint64 */;
  %360 = reshape(%359, newshape=[]) /* ty=uint64 */;
  %361 = @func_6917(%360) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(10, 5), uint64], uint64, Tensor[(50), uint64], Tensor[(11, 11, 12), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), int64], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) */;
  %362 = @func_9974() /* ty=Tensor[(14, 12, 13), float64] */;
  %363 = %361.1;
  %364 = @func_4504() /* ty=Tensor[(270), uint8] */;
  (%362, %363, %var_12249, %364)
}

def @func_3187(%var_3148: Tensor[(168), float32]) -> (Tensor[(14, 12, 13), uint32], Tensor[(2, 15, 9), float64], Tensor[(168), float32], Tensor[(14, 12, 13), float64]) {
  %365 = @func_825() /* ty=Tensor[(14, 12, 13), uint32] */;
  %366 = cast(%365, dtype="int32") /* ty=Tensor[(14, 12, 13), int32] */;
  %367 = cast(%var_3148, dtype="float32") /* ty=Tensor[(168), float32] */;
  %368 = reshape(%366, newshape=[14, 12, 13]) /* ty=Tensor[(14, 12, 13), int32] */;
  %369 = reshape(%367, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %370 = @func_2034(%368, %369) /* ty=(Tensor[(14, 12, 13), bool], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(2, 15, 9), float64], Tensor[(270), uint8], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), uint32], Tensor[(168), float32], Tensor[(168), float32], Tensor[(15, 4, ?), bool], Tensor[(2, 15, 9), float64]) */;
  %371 = %370.12;
  %372 = @func_1081() /* ty=Tensor[(14, 12, 13), float64] */;
  (%365, %371, %var_3148, %372)
}

def @func_10960() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) {
  %373 = @func_6354() /* ty=Tensor[(14, 12, 13), float64] */;
  %374 = cast(%373, dtype="float64") /* ty=Tensor[(14, 12, 13), float64] */;
  %375 = reshape(%374, newshape=[14, 12, 13]) /* ty=Tensor[(14, 12, 13), float64] */;
  %376 = @func_2878(%375) /* ty=(Tensor[(14, 12, 13), float32], Tensor[(1, 168), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), bool]) */;
  %377 = @func_9974() /* ty=Tensor[(14, 12, 13), float64] */;
  %378 = @func_1754() /* ty=Tensor[(14, 12, 13), uint32] */;
  %379 = %376.2;
  (%373, %377, %378, %379)
}

def @func_7495() -> Tensor[(14, 12, 13), float64] {
  %380 = @func_3595() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
  %380.1
}

def @func_1920(%var_1914: uint64, %var_1915: Tensor[(10, 5), uint64]) -> (Tensor[(14, 12, 13), float64], Tensor[(15, 4, ?), bool], uint64, Tensor[(10, 5), uint64]) {
  %381 = @func_910() /* ty=(Tensor[(14, 12, 13), float64],) */;
  %382 = cast(%var_1914, dtype="uint64") /* ty=uint64 */;
  %383 = cast(%var_1915, dtype="uint64") /* ty=Tensor[(10, 5), uint64] */;
  %384 = reshape(%382, newshape=[]) /* ty=uint64 */;
  %385 = reshape(%383, newshape=[5, 10, 1]) /* ty=Tensor[(5, 10, 1), uint64] */;
  %386 = @func_408(%384, %385) /* ty=(Tensor[(5, 10, 1), bool], Tensor[(15, 4, ?), bool], Tensor[(3, 20), int16]) */;
  %387 = %381.0;
  %388 = %386.1;
  (%387, %388, %var_1914, %var_1915)
}

def @func_3755() -> Tensor[(14, 12, 13), float64] {
  %389 = @func_3280() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(168), float32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
  %389.3
}

def @func_6339() -> Tensor[(14, 12, 13), uint32] {
  %390 = @func_6261() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %390.0
}

def @func_9684(%var_9668: Tensor[(50), uint64]) -> (Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(1, 168), float32], Tensor[(50), uint64]) {
  %391 = @func_3595() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
  %392 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 168), float32] */, dtype="float32") /* ty=Tensor[(1, 168), float32] */;
  %393 = cast(%var_9668, dtype="uint64") /* ty=Tensor[(50), uint64] */;
  %394 = reshape(%392, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %395 = reshape(%393, newshape=[50]) /* ty=Tensor[(50), uint64] */;
  %396 = @func_2622(%394, %395) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(168), float32], Tensor[(3, 20), int16], uint64, Tensor[(50), uint64]) */;
  %397 = %391.2;
  %398 = %396.1;
  (%397, %398, meta[relay.Constant][15] /* ty=Tensor[(1, 168), float32] */, %var_9668)
}

def @func_12593(%var_12530: Tensor[(9, 11, 7), float32], %var_12531: Tensor[(9, 11, 7), float32], %var_12560: Tensor[(1, 30), float64]) -> (Tensor[(9, 11, 7), float32], Tensor[(14, 12, 13), float64], Tensor[(9, 11, 7), float64], Tensor[(5, 2, 3), float64], Tensor[(1, 30), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) {
  %399 = cast(%var_12531, dtype="float32") /* ty=Tensor[(9, 11, 7), float32] */;
  %400 = shape_of(%var_12530, dtype="int32") /* ty=Tensor[(3), int32] */;
  %401 = cast(%var_12530, dtype="float32") /* ty=Tensor[(9, 11, 7), float32] */;
  %402 = dyn.reshape(%399, %400, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %403 = @func_10088() /* ty=(Tensor[(14, 12, 13), float64],) */;
  %404 = cast(%var_12531, dtype="float64") /* ty=Tensor[(9, 11, 7), float64] */;
  %405 = cast(%var_12560, dtype="float64") /* ty=Tensor[(1, 30), float64] */;
  %406 = reshape(%405, newshape=[5, 2, 3]) /* ty=Tensor[(5, 2, 3), float64] */;
  %407 = @func_5969() /* ty=(Tensor[(14, 12, 13), float64],) */;
  %408 = %403.0;
  %409 = cast(%408, dtype="float64") /* ty=Tensor[(14, 12, 13), float64] */;
  %410 = reshape(%409, newshape=[14, 12, 13]) /* ty=Tensor[(14, 12, 13), float64] */;
  %411 = @func_2878(%410) /* ty=(Tensor[(14, 12, 13), float32], Tensor[(1, 168), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), bool]) */;
  %412 = floor_mod(%401, %402) /* ty=Tensor[(9, 11, 7), float32] */;
  %413 = log2(%404) /* ty=Tensor[(9, 11, 7), float64] */;
  %414 = @func_11936(%406) /* ty=Tensor[(5, 2, 3), float64] */;
  %415 = %407.0;
  %416 = @func_7481() /* ty=Tensor[(14, 12, 13), uint32] */;
  %417 = %411.2;
  (%412, %408, %413, %414, %var_12560, %415, %416, %417)
}

def @func_10851(%var_10848: Tensor[(480), float32], %var_10849: Tensor[(168), float32]) -> (Tensor[(4, 1, 7), float64], Tensor[(270), uint8], Tensor[(14, 12, 13), float64], Tensor[(50), uint64], Tensor[(480), float32], Tensor[(168), float32]) {
  %418 = @func_8345() /* ty=(Tensor[(270), uint8], Tensor[(14, 12, 13), float64]) */;
  %419 = @func_10249() /* ty=(Tensor[(2, 15, 9), float64], Tensor[(14, 12, 13), float64]) */;
  %420 = cast(%var_10848, dtype="float32") /* ty=Tensor[(480), float32] */;
  %421 = cast(%var_10849, dtype="float32") /* ty=Tensor[(168), float32] */;
  %422 = reshape(%420, newshape=[16, 6, 5]) /* ty=Tensor[(16, 6, 5), float32] */;
  %423 = reshape(%421, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %424 = @func_7009(%422, %423) /* ty=(Tensor[(16, 6, 5), float32], Tensor[(50), uint64], Tensor[(168), float32], Tensor[(50), uint64]) */;
  %425 = @func_8381() /* ty=Tensor[(4, 1, 7), float64] */;
  %426 = %418.0;
  %427 = %419.1;
  %428 = %424.3;
  (%425, %426, %427, %428, %var_10848, %var_10849)
}

def @func_9434() -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(11, 11, 12), float64], Tensor[(1, 168), float32]) {
  %429 = @func_810() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %430 = @func_7716() /* ty=(Tensor[(14, 12, 13), float64],) */;
  %431 = %430.0;
  %432 = cast(%431, dtype="float64") /* ty=Tensor[(14, 12, 13), float64] */;
  %433 = reshape(%432, newshape=[14, 12, 13]) /* ty=Tensor[(14, 12, 13), float64] */;
  %434 = @func_2878(%433) /* ty=(Tensor[(14, 12, 13), float32], Tensor[(1, 168), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), bool]) */;
  %435 = %429.0;
  %436 = @func_3364() /* ty=Tensor[(11, 11, 12), float64] */;
  %437 = %434.1;
  (%435, %431, %436, %437)
}

def @func_11386() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(3, 50), int32], Tensor[(150), float32]) {
  %438 = @func_11270() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) */;
  %439 = cast(meta[relay.Constant][16] /* ty=Tensor[(150), float32] */, dtype="float32") /* ty=Tensor[(150), float32] */;
  %440 = reshape(%439, newshape=[3, 50]) /* ty=Tensor[(3, 50), float32] */;
  %441 = @func_10983(%440) /* ty=(Tensor[(3, 50), int32],) */;
  %442 = @func_2696() /* ty=Tensor[(14, 12, 13), float64] */;
  %443 = %438.2;
  %444 = %441.0;
  (%442, %443, %444, meta[relay.Constant][16] /* ty=Tensor[(150), float32] */)
}

def @func_6245(%var_6222: Tensor[(14, 12, 13), float64]) -> (Tensor[(14, 12, 13), int64], Tensor[(1, 168), float32]) {
  %445 = @func_3595() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
  %446 = %445.0;
  %447 = cast(%var_6222, dtype="int64") /* ty=Tensor[(14, 12, 13), int64] */;
  %448 = shape_of(%446, dtype="int32") /* ty=Tensor[(3), int32] */;
  %449 = cast(%446, dtype="int64") /* ty=Tensor[(14, 12, 13), int64] */;
  %450 = dyn.reshape(%447, %448, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %451 = bitwise_and(%449, %450) /* ty=Tensor[(14, 12, 13), int64] */;
  %452 = cast(%451, dtype="float64") /* ty=Tensor[(14, 12, 13), float64] */;
  %453 = reshape(%452, newshape=[14, 12, 13]) /* ty=Tensor[(14, 12, 13), float64] */;
  %454 = @func_2878(%453) /* ty=(Tensor[(14, 12, 13), float32], Tensor[(1, 168), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), bool]) */;
  %455 = %454.1;
  (%451, %455)
}

def @func_8924() -> Tensor[(270), uint8] {
  @func_4978() /* ty=Tensor[(270), uint8] */
}

def @func_11718() -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) {
  %456 = @func_5187() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %457 = @func_7716() /* ty=(Tensor[(14, 12, 13), float64],) */;
  %458 = %456.0;
  %459 = %457.0;
  (%458, %459)
}

def @func_8890() -> (Tensor[(14, 12, 13), float64],) {
  %460 = @func_5702() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
  %461 = %460.0;
  (%461,)
}

def @func_9636(%var_9605: Tensor[(4, 9, 8), float64]) -> (Tensor[(4, 9, 8), bool],) {
  %462 = cast(meta[relay.Constant][17] /* ty=Tensor[(4, 9, 8), float64] */, dtype="bool") /* ty=Tensor[(4, 9, 8), bool] */;
  %463 = shape_of(%var_9605, dtype="int32") /* ty=Tensor[(3), int32] */;
  %464 = cast(%var_9605, dtype="bool") /* ty=Tensor[(4, 9, 8), bool] */;
  %465 = dyn.reshape(%462, %463, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %466 = greater_equal(%464, %465) /* ty=Tensor[(4, 9, 8), bool] */;
  (%466,)
}

def @func_9594() -> Tensor[(14, 12, 13), float32] {
  %467 = @func_4130() /* ty=(Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), float32]) */;
  %467.1
}

def @func_1493() -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) {
  %468 = @func_810() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %469 = @func_1081() /* ty=Tensor[(14, 12, 13), float64] */;
  %470 = cast(meta[relay.Constant][18] /* ty=Tensor[(14, 12, 13), float64] */, dtype="bool") /* ty=Tensor[(14, 12, 13), bool] */;
  %471 = shape_of(%469, dtype="int32") /* ty=Tensor[(3), int32] */;
  %472 = cast(%469, dtype="bool") /* ty=Tensor[(14, 12, 13), bool] */;
  %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %474 = less(%472, %473) /* ty=Tensor[(14, 12, 13), bool] */;
  %475 = cast(%469, dtype="uint32") /* ty=Tensor[(14, 12, 13), uint32] */;
  %476 = shape_of(%474, dtype="int32") /* ty=Tensor[(3), int32] */;
  %477 = cast(%474, dtype="uint32") /* ty=Tensor[(14, 12, 13), uint32] */;
  %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %479 = %468.0;
  %480 = multiply(%477, %478) /* ty=Tensor[(14, 12, 13), uint32] */;
  (%479, %480)
}

def @func_12156() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) {
  %481 = @func_3123() /* ty=(Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(15, 4, ?), bool], Tensor[(6, 28), float32], Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), float64]) */;
  %482 = %481.6;
  %483 = @func_1191() /* ty=Tensor[(14, 12, 13), uint32] */;
  %484 = @func_10867() /* ty=Tensor[(14, 12, 13), float64] */;
  (%482, %483, %484)
}

def @func_2215() -> (Tensor[(14, 12, 13), float64],) {
  %485 = @func_1768() /* ty=Tensor[(14, 12, 13), float64] */;
  (%485,)
}

def @func_12439() -> (Tensor[(14, 12, 13), uint32],) {
  %486 = @func_12027() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %487 = %486.0;
  (%487,)
}

def @func_5377(%var_5335: Tensor[(15, 5, 10), int16], %var_5336: Tensor[(15, 5, 10), int16]) -> (Tensor[(15, 5, 10), bool], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) {
  %488 = cast(%var_5336, dtype="bool") /* ty=Tensor[(15, 5, 10), bool] */;
  %489 = shape_of(%var_5335, dtype="int32") /* ty=Tensor[(3), int32] */;
  %490 = cast(%var_5335, dtype="bool") /* ty=Tensor[(15, 5, 10), bool] */;
  %491 = dyn.reshape(%488, %489, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %492 = less_equal(%490, %491) /* ty=Tensor[(15, 5, 10), bool] */;
  %493 = cast(meta[relay.Constant][19] /* ty=Tensor[(15, 5, 10), bool] */, dtype="bool") /* ty=Tensor[(15, 5, 10), bool] */;
  %494 = shape_of(%492, dtype="int32") /* ty=Tensor[(3), int32] */;
  %495 = cast(%492, dtype="bool") /* ty=Tensor[(15, 5, 10), bool] */;
  %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %497 = less(%495, %496) /* ty=Tensor[(15, 5, 10), bool] */;
  %498 = @func_1229() /* ty=Tensor[(14, 12, 13), float64] */;
  %499 = @func_778() /* ty=Tensor[(14, 12, 13), uint32] */;
  (%497, %498, %499)
}

def @func_9309() -> (Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) {
  %500 = @func_4130() /* ty=(Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), float32]) */;
  %501 = @func_2161() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) */;
  %502 = @func_8267() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) */;
  %503 = %502.0;
  %504 = cast(%503, dtype="float64") /* ty=Tensor[(14, 12, 13), float64] */;
  %505 = reshape(%504, newshape=[14, 12, 13]) /* ty=Tensor[(14, 12, 13), float64] */;
  %506 = @func_1454(%505) /* ty=(Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), float64]) */;
  %507 = %500.1;
  %508 = %501.1;
  %509 = %506.1;
  (%507, %508, %503, %509)
}

def @func_7212() -> (Tensor[(14, 12, 13), float64], Tensor[(270), uint8], Tensor[(14, 12, 13), float64]) {
  %510 = @func_3595() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
  %511 = @func_1081() /* ty=Tensor[(14, 12, 13), float64] */;
  %512 = @func_4711() /* ty=Tensor[(270), uint8] */;
  %513 = %510.2;
  (%511, %512, %513)
}

def @func_10401() -> (Tensor[(14, 12, 13), float32],) {
  %514 = @func_2942() /* ty=Tensor[(14, 12, 13), float32] */;
  (%514,)
}

def @func_9888() -> Tensor[(14, 12, 13), float64] {
  @func_5029() /* ty=Tensor[(14, 12, 13), float64] */
}

def @func_7575() -> Tensor[(14, 12, 13), float32] {
  %515 = @func_4130() /* ty=(Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), float32]) */;
  %515.1
}

def @func_8381() -> Tensor[(4, 1, 7), float64] {
  %516 = cast(meta[relay.Constant][20] /* ty=Tensor[(4, 1, 7), float64] */, dtype="float64") /* ty=Tensor[(4, 1, 7), float64] */;
  sigmoid(%516) /* ty=Tensor[(4, 1, 7), float64] */
}

def @main(%var_13030: Tensor[(3, 156), float64]) -> (Tensor[(14, 12, 13), float64], Tensor[(3, 156), float32]) {
  %517 = @func_12156() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) */;
  %518 = @func_8570() /* ty=(Tensor[(270), uint8], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(3, 156), float64]) */;
  %519 = %518.3;
  %520 = cast(%var_13030, dtype="float64") /* ty=Tensor[(3, 156), float64] */;
  %521 = shape_of(%519, dtype="int32") /* ty=Tensor[(2), int32] */;
  %522 = cast(%519, dtype="float64") /* ty=Tensor[(3, 156), float64] */;
  %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %524 = minimum(%522, %523) /* ty=Tensor[(3, 156), float64] */;
  %525 = cast(%524, dtype="float32") /* ty=Tensor[(3, 156), float32] */;
  %526 = %517.0;
  %527 = rsqrt(%525) /* ty=Tensor[(3, 156), float32] */;
  (%526, %527)
}

def @func_10390() -> Tensor[(14, 12, 13), uint32] {
  %528 = @func_8267() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) */;
  %528.0
}

def @func_9470() -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) {
  %529 = @func_7797() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) */;
  %530 = @func_9176() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(270), uint8]) */;
  %531 = @func_910() /* ty=(Tensor[(14, 12, 13), float64],) */;
  %532 = %529.1;
  %533 = %530.0;
  %534 = @func_1754() /* ty=Tensor[(14, 12, 13), uint32] */;
  %535 = %531.0;
  (%532, %533, %534, %535)
}

def @func_9731() -> Tensor[(14, 12, 13), uint32] {
  %536 = @func_5187() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %536.0
}

def @func_1642(%var_1610: Tensor[(168), float32]) -> (Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float32]) {
  %537 = @func_1584() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) */;
  %538 = cast(%var_1610, dtype="float32") /* ty=Tensor[(168), float32] */;
  %539 = reshape(%538, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %540 = @func_1136(%539) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(15, 4, ?), bool], Tensor[(168), float32], Tensor[(15, 4, ?), bool]) */;
  %541 = %540.0;
  %542 = cast(%541, dtype="float32") /* ty=Tensor[(14, 12, 13), float32] */;
  %543 = %537.0;
  %544 = @func_778() /* ty=Tensor[(14, 12, 13), uint32] */;
  %545 = asinh(%542) /* ty=Tensor[(14, 12, 13), float32] */;
  (%543, %var_1610, %544, %545)
}

def @func_3280() -> (Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(168), float32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) {
  %546 = cast(meta[relay.Constant][21] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %547 = reshape(%546, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %548 = @func_3187(%547) /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(2, 15, 9), float64], Tensor[(168), float32], Tensor[(14, 12, 13), float64]) */;
  %549 = @func_2215() /* ty=(Tensor[(14, 12, 13), float64],) */;
  %550 = @func_2249() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
  %551 = @func_1768() /* ty=Tensor[(14, 12, 13), float64] */;
  %552 = %548.2;
  %553 = %549.0;
  %554 = @func_2696() /* ty=Tensor[(14, 12, 13), float64] */;
  %555 = %550.1;
  (%551, %552, meta[relay.Constant][21] /* ty=Tensor[(168), float32] */, %553, %554, %555)
}

def @func_8184(%var_8106: Tensor[(6, 16, 1), float64]) -> (Tensor[(14, 12, 13), float64], Tensor[(6, 16, ?), bool], Tensor[(6, 16, ?), float32], Tensor[(14, 12, 13), float64]) {
  %556 = cast(%var_8106, dtype="float64") /* ty=Tensor[(6, 16, 1), float64] */;
  %557 = sigmoid(%556) /* ty=Tensor[(6, 16, 1), float64] */;
  %558 = cast(%557, dtype="float32") /* ty=Tensor[(6, 16, 1), float32] */;
  %559 = log10(%558) /* ty=Tensor[(6, 16, 1), float32] */;
  %560 = cast(%559, dtype="int8") /* ty=Tensor[(6, 16, 1), int8] */;
  %561 = shape_of(%557, dtype="int32") /* ty=Tensor[(3), int32] */;
  %562 = cast(%557, dtype="int8") /* ty=Tensor[(6, 16, 1), int8] */;
  %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %564 = minimum(%562, %563) /* ty=Tensor[(6, 16, ?), int8] */;
  %565 = cast(%559, dtype="bool") /* ty=Tensor[(6, 16, 1), bool] */;
  %566 = shape_of(%564, dtype="int32") /* ty=Tensor[(3), int32] */;
  %567 = cast(%564, dtype="bool") /* ty=Tensor[(6, 16, ?), bool] */;
  %568 = dyn.reshape(%565, %566, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %569 = cast(%557, dtype="bool") /* ty=Tensor[(6, 16, 1), bool] */;
  %570 = shape_of(%559, dtype="int32") /* ty=Tensor[(3), int32] */;
  %571 = cast(%559, dtype="bool") /* ty=Tensor[(6, 16, 1), bool] */;
  %572 = dyn.reshape(%569, %570, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %573 = equal(%571, %572) /* ty=Tensor[(6, 16, ?), bool] */;
  %574 = cast(%559, dtype="float64") /* ty=Tensor[(6, 16, 1), float64] */;
  %575 = shape_of(%573, dtype="int32") /* ty=Tensor[(3), int32] */;
  %576 = cast(%573, dtype="float64") /* ty=Tensor[(6, 16, ?), float64] */;
  %577 = dyn.reshape(%574, %575, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %578 = power(%576, %577) /* ty=Tensor[(6, 16, ?), float64] */;
  %579 = cast(%578, dtype="float32") /* ty=Tensor[(6, 16, ?), float32] */;
  %580 = @func_7340() /* ty=Tensor[(14, 12, 13), float64] */;
  %581 = less_equal(%567, %568) /* ty=Tensor[(6, 16, ?), bool] */;
  %582 = asin(%579) /* ty=Tensor[(6, 16, ?), float32] */;
  %583 = @func_6354() /* ty=Tensor[(14, 12, 13), float64] */;
  (%580, %581, %582, %583)
}

def @func_6123(%var_6082: float64, %var_6083: Tensor[(9, 13, 12), float64]) -> (Tensor[(9, 13, 12), float64], Tensor[(9, 13, 12), float64]) {
  %584 = cast(%var_6082, dtype="float64") /* ty=float64 */;
  %585 = cast(%var_6083, dtype="float64") /* ty=Tensor[(9, 13, 12), float64] */;
  %586 = cast(%var_6083, dtype="float64") /* ty=Tensor[(9, 13, 12), float64] */;
  %587 = minimum(%584, %585) /* ty=Tensor[(9, 13, 12), float64] */;
  %588 = atan(%586) /* ty=Tensor[(9, 13, 12), float64] */;
  (%587, %588)
}

def @func_11849(%var_11834: Tensor[(11, 13, 7), int32]) -> Tensor[(11, 13, 7), float32] {
  %589 = cast(%var_11834, dtype="int32") /* ty=Tensor[(11, 13, 7), int32] */;
  %590 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(11, 13, 7), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %591 = cast(meta[relay.Constant][22] /* ty=Tensor[(11, 13, 7), int32] */, dtype="int32") /* ty=Tensor[(11, 13, 7), int32] */;
  %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %593 = multiply(%591, %592) /* ty=Tensor[(11, 13, 7), int32] */;
  %594 = cast(%593, dtype="float32") /* ty=Tensor[(11, 13, 7), float32] */;
  exp(%594) /* ty=Tensor[(11, 13, 7), float32] */
}

def @func_4978() -> Tensor[(270), uint8] {
  @func_4711() /* ty=Tensor[(270), uint8] */
}

def @func_9098() -> (Tensor[(14, 12, 13), uint32],) {
  %595 = @func_7955() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %596 = %595.0;
  (%596,)
}

def @func_12005(%var_11977: Tensor[(11, 9, 14), float64], %var_11982: Tensor[(12, 182), float64], %var_11985: Tensor[(12, 182), float64]) -> (Tensor[(11, 9, 14), float64], Tensor[(14, 12, 13), int64], Tensor[(12, 182), float32]) {
  %597 = cast(%var_11977, dtype="float64") /* ty=Tensor[(11, 9, 14), float64] */;
  %598 = cast(%var_11982, dtype="float64") /* ty=Tensor[(12, 182), float64] */;
  %599 = reshape(%598, newshape=[14, 12, 13]) /* ty=Tensor[(14, 12, 13), float64] */;
  %600 = cast(%var_11985, dtype="float32") /* ty=Tensor[(12, 182), float32] */;
  %601 = shape_of(%var_11982, dtype="int32") /* ty=Tensor[(2), int32] */;
  %602 = cast(%var_11982, dtype="float32") /* ty=Tensor[(12, 182), float32] */;
  %603 = dyn.reshape(%600, %601, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %604 = cos(%597) /* ty=Tensor[(11, 9, 14), float64] */;
  %605 = @func_4609(%599) /* ty=Tensor[(14, 12, 13), int64] */;
  %606 = floor_mod(%602, %603) /* ty=Tensor[(12, 182), float32] */;
  (%604, %605, %606)
}

def @func_992(%var_988: uint64) -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(5, 10, 1), bool], uint64, Tensor[(1, 50), uint64]) {
  %607 = @func_810() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %608 = cast(%var_988, dtype="uint64") /* ty=uint64 */;
  %609 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 50), uint64] */, dtype="uint64") /* ty=Tensor[(1, 50), uint64] */;
  %610 = reshape(%608, newshape=[]) /* ty=uint64 */;
  %611 = reshape(%609, newshape=[5, 10, 1]) /* ty=Tensor[(5, 10, 1), uint64] */;
  %612 = @func_408(%610, %611) /* ty=(Tensor[(5, 10, 1), bool], Tensor[(15, 4, ?), bool], Tensor[(3, 20), int16]) */;
  %613 = %607.0;
  %614 = @func_778() /* ty=Tensor[(14, 12, 13), uint32] */;
  %615 = %612.0;
  (%613, %614, %615, %var_988, meta[relay.Constant][23] /* ty=Tensor[(1, 50), uint64] */)
}

def @func_9176() -> (Tensor[(14, 12, 13), float64], Tensor[(270), uint8]) {
  %616 = @func_8345() /* ty=(Tensor[(270), uint8], Tensor[(14, 12, 13), float64]) */;
  %617 = @func_6354() /* ty=Tensor[(14, 12, 13), float64] */;
  %618 = %616.0;
  (%617, %618)
}

def @func_10867() -> Tensor[(14, 12, 13), float64] {
  @func_1081() /* ty=Tensor[(14, 12, 13), float64] */
}

def @func_10249() -> (Tensor[(2, 15, 9), float64], Tensor[(14, 12, 13), float64]) {
  %619 = @func_4203() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(2, 15, 9), float64], Tensor[(270), uint8]) */;
  %620 = @func_9822() /* ty=(Tensor[(14, 12, 13), float64],) */;
  %621 = %619.1;
  %622 = %620.0;
  (%621, %622)
}

def @func_11270() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) {
  %623 = @func_11212() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(10, 7, 1), bool], uint32) */;
  %624 = @func_9118() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %625 = @func_7797() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) */;
  %626 = @func_5417() /* ty=Tensor[(14, 12, 13), float64] */;
  %627 = @func_3755() /* ty=Tensor[(14, 12, 13), float64] */;
  %628 = %623.0;
  %629 = %624.0;
  %630 = %625.1;
  (%626, %627, %628, %629, %630)
}

def @func_5308() -> (Tensor[(14, 12, 13), float64],) {
  %631 = @func_1055() /* ty=Tensor[(14, 12, 13), float64] */;
  (%631,)
}

def @func_7539() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) {
  %632 = @func_4351() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) */;
  %633 = @func_4573() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %634 = %632.1;
  %635 = %633.0;
  (%634, %635)
}

def @func_11682() -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) {
  %636 = @func_5529() /* ty=Tensor[(14, 12, 13), uint32] */;
  %637 = @func_778() /* ty=Tensor[(14, 12, 13), uint32] */;
  (%636, %637)
}

def @func_3595() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) {
  %638 = @func_910() /* ty=(Tensor[(14, 12, 13), float64],) */;
  %639 = @func_2215() /* ty=(Tensor[(14, 12, 13), float64],) */;
  %640 = @func_2524() /* ty=(Tensor[(14, 12, 13), int32], Tensor[(14, 12, 13), float64]) */;
  %641 = %638.0;
  %642 = %639.0;
  %643 = %640.1;
  (%641, %642, %643)
}

def @func_11023() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(50), uint64]) {
  %644 = cast(meta[relay.Constant][24] /* ty=Tensor[(50), uint64] */, dtype="uint64") /* ty=Tensor[(50), uint64] */;
  %645 = reshape(%644, newshape=[50]) /* ty=Tensor[(50), uint64] */;
  %646 = @func_8508(%645) /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(168), float32], Tensor[(168), float32], Tensor[(14, 12, 13), float64], Tensor[(50), uint64], Tensor[(14, 12, 13), float64]) */;
  %647 = @func_10867() /* ty=Tensor[(14, 12, 13), float64] */;
  %648 = %646.0;
  (%647, %648, meta[relay.Constant][24] /* ty=Tensor[(50), uint64] */)
}

def @func_9118() -> (Tensor[(14, 12, 13), uint32],) {
  %649 = @func_1191() /* ty=Tensor[(14, 12, 13), uint32] */;
  (%649,)
}

def @func_1055() -> Tensor[(14, 12, 13), float64] {
  %650 = @func_810() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %651 = %650.0;
  %652 = @func_778() /* ty=Tensor[(14, 12, 13), uint32] */;
  %653 = cast(%652, dtype="float64") /* ty=Tensor[(14, 12, 13), float64] */;
  %654 = shape_of(%651, dtype="int32") /* ty=Tensor[(3), int32] */;
  %655 = cast(%651, dtype="float64") /* ty=Tensor[(14, 12, 13), float64] */;
  %656 = dyn.reshape(%653, %654, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%655, %656) /* ty=Tensor[(14, 12, 13), float64] */
}

def @func_1533() -> Tensor[(14, 12, 13), int32] {
  %657 = @func_810() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %658 = %657.0;
  %659 = cast(meta[relay.Constant][25] /* ty=Tensor[(14, 12, 13), uint32] */, dtype="int32") /* ty=Tensor[(14, 12, 13), int32] */;
  %660 = shape_of(%658, dtype="int32") /* ty=Tensor[(3), int32] */;
  %661 = cast(%658, dtype="int32") /* ty=Tensor[(14, 12, 13), int32] */;
  %662 = dyn.reshape(%659, %660, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  minimum(%661, %662) /* ty=Tensor[(14, 12, 13), int32] */
}

def @func_1081() -> Tensor[(14, 12, 13), float64] {
  @func_1055() /* ty=Tensor[(14, 12, 13), float64] */
}

def @func_1733(%var_1715: Tensor[(168), float32]) -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(168), float32], Tensor[(168), float32], Tensor[(14, 12, 13), float32]) {
  %663 = cast(%var_1715, dtype="float32") /* ty=Tensor[(168), float32] */;
  %664 = reshape(%663, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %665 = @func_1136(%664) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(15, 4, ?), bool], Tensor[(168), float32], Tensor[(15, 4, ?), bool]) */;
  %666 = @func_825() /* ty=Tensor[(14, 12, 13), uint32] */;
  %667 = cast(%666, dtype="float32") /* ty=Tensor[(14, 12, 13), float32] */;
  %668 = @func_778() /* ty=Tensor[(14, 12, 13), uint32] */;
  %669 = @func_778() /* ty=Tensor[(14, 12, 13), uint32] */;
  %670 = %665.2;
  %671 = cosh(%667) /* ty=Tensor[(14, 12, 13), float32] */;
  (%668, %669, %670, %var_1715, %671)
}

def @func_7340() -> Tensor[(14, 12, 13), float64] {
  %672 = @func_3924() /* ty=(Tensor[(13, 11, 11), bool], Tensor[(11, 11, 12), float64], Tensor[(14, 12, 13), float64]) */;
  %672.2
}

def @func_5041() -> Tensor[(11, 11, 12), float32] {
  %673 = @func_3924() /* ty=(Tensor[(13, 11, 11), bool], Tensor[(11, 11, 12), float64], Tensor[(14, 12, 13), float64]) */;
  %674 = %673.1;
  %675 = cast(%674, dtype="float32") /* ty=Tensor[(11, 11, 12), float32] */;
  cosh(%675) /* ty=Tensor[(11, 11, 12), float32] */
}

def @func_8267() -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) {
  %676 = @func_4203() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(2, 15, 9), float64], Tensor[(270), uint8]) */;
  %677 = @func_5529() /* ty=Tensor[(14, 12, 13), uint32] */;
  %678 = %676.0;
  (%677, %678)
}

def @func_8607() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float32]) {
  %679 = @func_4130() /* ty=(Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), float32]) */;
  %680 = @func_2304() /* ty=Tensor[(14, 12, 13), float64] */;
  %681 = %679.0;
  (%680, %681)
}

def @func_2304() -> Tensor[(14, 12, 13), float64] {
  %682 = @func_2215() /* ty=(Tensor[(14, 12, 13), float64],) */;
  %682.0
}

def @func_3924() -> (Tensor[(13, 11, 11), bool], Tensor[(11, 11, 12), float64], Tensor[(14, 12, 13), float64]) {
  %683 = cast(meta[relay.Constant][27] /* ty=Tensor[(13, 11, 11), uint16] */, dtype="bool") /* ty=Tensor[(13, 11, 11), bool] */;
  %684 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(13, 11, 11), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %685 = cast(meta[relay.Constant][26] /* ty=Tensor[(13, 11, 11), uint16] */, dtype="bool") /* ty=Tensor[(13, 11, 11), bool] */;
  %686 = dyn.reshape(%683, %684, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %687 = less(%685, %686) /* ty=Tensor[(13, 11, 11), bool] */;
  %688 = @func_3364() /* ty=Tensor[(11, 11, 12), float64] */;
  %689 = @func_2696() /* ty=Tensor[(14, 12, 13), float64] */;
  (%687, %688, %689)
}

def @func_5666() -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) {
  %690 = @func_810() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %691 = @func_3280() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(168), float32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
  %692 = %690.0;
  %693 = %691.3;
  (%692, %693)
}

def @func_5756() -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float32], Tensor[(168), float32]) {
  %694 = @func_810() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %695 = cast(meta[relay.Constant][28] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %696 = reshape(%695, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %697 = @func_1642(%696) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float32]) */;
  %698 = %694.0;
  %699 = %697.3;
  (%698, %699, meta[relay.Constant][28] /* ty=Tensor[(168), float32] */)
}

def @func_6183() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) {
  %700 = @func_5029() /* ty=Tensor[(14, 12, 13), float64] */;
  %701 = @func_825() /* ty=Tensor[(14, 12, 13), uint32] */;
  (%700, %701)
}

def @func_10983(%var_10978: Tensor[(3, 50), float32]) -> (Tensor[(3, 50), int32],) {
  %702 = @func_9783() /* ty=Tensor[(3, 50), float32] */;
  %703 = cast(%var_10978, dtype="int32") /* ty=Tensor[(3, 50), int32] */;
  %704 = shape_of(%702, dtype="int32") /* ty=Tensor[(2), int32] */;
  %705 = cast(%702, dtype="int32") /* ty=Tensor[(3, 50), int32] */;
  %706 = dyn.reshape(%703, %704, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %707 = left_shift(%705, %706) /* ty=Tensor[(3, 50), int32] */;
  (%707,)
}

def @func_8675(%var_8662: Tensor[(270), uint8]) -> (Tensor[(14, 12, 13), float64], Tensor[(50), uint64], Tensor[(480), float32], Tensor[(168), float32], Tensor[(14, 12, 13), float64], Tensor[(270), uint8], Tensor[(270), uint8], uint64, Tensor[(14, 12, 13), float64]) {
  %708 = @func_5969() /* ty=(Tensor[(14, 12, 13), float64],) */;
  %709 = cast(meta[relay.Constant][29] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %710 = cast(meta[relay.Constant][30] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %711 = reshape(%709, newshape=[16, 6, 5]) /* ty=Tensor[(16, 6, 5), float32] */;
  %712 = reshape(%710, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %713 = @func_7009(%711, %712) /* ty=(Tensor[(16, 6, 5), float32], Tensor[(50), uint64], Tensor[(168), float32], Tensor[(50), uint64]) */;
  %714 = @func_6183() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) */;
  %715 = cast(%var_8662, dtype="uint8") /* ty=Tensor[(270), uint8] */;
  %716 = reshape(%715, newshape=[270]) /* ty=Tensor[(270), uint8] */;
  %717 = @func_5148(%716) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(270), uint8], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
  %718 = @func_6565() /* ty=(Tensor[(14, 12, 13), float64], uint64, uint64, Tensor[(50, 1), float64]) */;
  %719 = %708.0;
  %720 = %713.1;
  %721 = %714.0;
  %722 = %717.2;
  %723 = %718.1;
  %724 = @func_1229() /* ty=Tensor[(14, 12, 13), float64] */;
  (%719, %720, meta[relay.Constant][29] /* ty=Tensor[(480), float32] */, meta[relay.Constant][30] /* ty=Tensor[(168), float32] */, %721, %722, %var_8662, %723, %724)
}

def @func_2942() -> Tensor[(14, 12, 13), float32] {
  %725 = @func_1191() /* ty=Tensor[(14, 12, 13), uint32] */;
  %726 = cast(%725, dtype="float32") /* ty=Tensor[(14, 12, 13), float32] */;
  exp(%726) /* ty=Tensor[(14, 12, 13), float32] */
}

def @func_7101() -> (Tensor[(14, 12, 13), float64],) {
  %727 = @func_2696() /* ty=Tensor[(14, 12, 13), float64] */;
  (%727,)
}

def @func_10821() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) {
  %728 = @func_4573() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %729 = @func_6354() /* ty=Tensor[(14, 12, 13), float64] */;
  %730 = %728.0;
  (%729, %730)
}

def @func_10496() -> Tensor[(11, 11, 12), float64] {
  %731 = @func_3924() /* ty=(Tensor[(13, 11, 11), bool], Tensor[(11, 11, 12), float64], Tensor[(14, 12, 13), float64]) */;
  %731.1
}

def @func_6419(%var_6391: Tensor[(6, 28), float32]) -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(15, 4, ?), bool], Tensor[(6, 28), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(168), float32]) {
  %732 = @func_1584() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) */;
  %733 = cast(%var_6391, dtype="float32") /* ty=Tensor[(6, 28), float32] */;
  %734 = reshape(%733, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %735 = @func_1136(%734) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(15, 4, ?), bool], Tensor[(168), float32], Tensor[(15, 4, ?), bool]) */;
  %736 = @func_778() /* ty=Tensor[(14, 12, 13), uint32] */;
  %737 = cast(%736, dtype="float64") /* ty=Tensor[(14, 12, 13), float64] */;
  %738 = reshape(%737, newshape=[14, 12, 13]) /* ty=Tensor[(14, 12, 13), float64] */;
  %739 = @func_2878(%738) /* ty=(Tensor[(14, 12, 13), float32], Tensor[(1, 168), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), bool]) */;
  %740 = cast(%var_6391, dtype="float32") /* ty=Tensor[(6, 28), float32] */;
  %741 = reshape(%740, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %742 = @func_2817(%741) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(168), float32]) */;
  %743 = %732.0;
  %744 = @func_6339() /* ty=Tensor[(14, 12, 13), uint32] */;
  %745 = %735.1;
  %746 = %739.2;
  %747 = %742.1;
  (%743, %744, %745, %var_6391, %736, %746, %747)
}

def @func_778() -> Tensor[(14, 12, 13), uint32] {
  %748 = cast(meta[relay.Constant][31] /* ty=Tensor[(14, 12, 13), float32] */, dtype="float32") /* ty=Tensor[(14, 12, 13), float32] */;
  %749 = cos(%748) /* ty=Tensor[(14, 12, 13), float32] */;
  %750 = cast(meta[relay.Constant][31] /* ty=Tensor[(14, 12, 13), float32] */, dtype="uint32") /* ty=Tensor[(14, 12, 13), uint32] */;
  %751 = shape_of(%749, dtype="int32") /* ty=Tensor[(3), int32] */;
  %752 = cast(%749, dtype="uint32") /* ty=Tensor[(14, 12, 13), uint32] */;
  %753 = dyn.reshape(%750, %751, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_or(%752, %753) /* ty=Tensor[(14, 12, 13), uint32] */
}

def @func_3978(%var_3972: Tensor[(9, 13, 4), uint8], %var_3973: Tensor[(9, 13, 4), uint8]) -> Tensor[(9, 13, 4), bool] {
  %754 = cast(%var_3973, dtype="bool") /* ty=Tensor[(9, 13, 4), bool] */;
  %755 = shape_of(%var_3972, dtype="int32") /* ty=Tensor[(3), int32] */;
  %756 = cast(%var_3972, dtype="bool") /* ty=Tensor[(9, 13, 4), bool] */;
  %757 = dyn.reshape(%754, %755, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%756, %757) /* ty=Tensor[(9, 13, 4), bool] */
}

def @func_11408() -> (Tensor[(14, 12, 13), float64],) {
  %758 = @func_11149() /* ty=Tensor[(14, 12, 13), float64] */;
  (%758,)
}

def @func_6565() -> (Tensor[(14, 12, 13), float64], uint64, uint64, Tensor[(50, 1), float64]) {
  %759 = @func_910() /* ty=(Tensor[(14, 12, 13), float64],) */;
  %760 = cast(meta[relay.Constant][32] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %761 = cast(meta[relay.Constant][33] /* ty=Tensor[(50, 1), uint64] */, dtype="uint64") /* ty=Tensor[(50, 1), uint64] */;
  %762 = reshape(%760, newshape=[]) /* ty=uint64 */;
  %763 = reshape(%761, newshape=[10, 5]) /* ty=Tensor[(10, 5), uint64] */;
  %764 = @func_1920(%762, %763) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(15, 4, ?), bool], uint64, Tensor[(10, 5), uint64]) */;
  %765 = cast(meta[relay.Constant][33] /* ty=Tensor[(50, 1), uint64] */, dtype="float64") /* ty=Tensor[(50, 1), float64] */;
  %766 = %759.0;
  %767 = %764.2;
  %768 = atanh(%765) /* ty=Tensor[(50, 1), float64] */;
  (%766, %767, meta[relay.Constant][32] /* ty=uint64 */, %768)
}

def @func_4546() -> Tensor[(14, 12, 13), float32] {
  %769 = @func_2524() /* ty=(Tensor[(14, 12, 13), int32], Tensor[(14, 12, 13), float64]) */;
  %770 = %769.0;
  %771 = cast(%770, dtype="float32") /* ty=Tensor[(14, 12, 13), float32] */;
  atan(%771) /* ty=Tensor[(14, 12, 13), float32] */
}

def @func_10480() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), uint32]) {
  %772 = @func_2161() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) */;
  %773 = @func_7432() /* ty=Tensor[(14, 12, 13), float64] */;
  %774 = @func_2942() /* ty=Tensor[(14, 12, 13), float32] */;
  %775 = %772.1;
  (%773, %774, %775)
}

def @func_4130() -> (Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), float32]) {
  %776 = @func_2942() /* ty=Tensor[(14, 12, 13), float32] */;
  %777 = @func_2942() /* ty=Tensor[(14, 12, 13), float32] */;
  (%776, %777)
}

def @func_10761() -> Tensor[(14, 12, 13), uint32] {
  @func_6339() /* ty=Tensor[(14, 12, 13), uint32] */
}

def @func_408(%var_380: uint64, %var_381: Tensor[(5, 10, 1), uint64]) -> (Tensor[(5, 10, 1), bool], Tensor[(15, 4, ?), bool], Tensor[(3, 20), int16]) {
  %778 = cast(%var_380, dtype="bool") /* ty=bool */;
  %779 = cast(%var_381, dtype="bool") /* ty=Tensor[(5, 10, 1), bool] */;
  %780 = cast(meta[relay.Constant][34] /* ty=Tensor[(3, 20), int16] */, dtype="int16") /* ty=Tensor[(3, 20), int16] */;
  %781 = cast(meta[relay.Constant][34] /* ty=Tensor[(3, 20), int16] */, dtype="int16") /* ty=Tensor[(3, 20), int16] */;
  %782 = reshape(%780, newshape=[15, 4, 1]) /* ty=Tensor[(15, 4, 1), int16] */;
  %783 = reshape(%781, newshape=[15, 4, 1]) /* ty=Tensor[(15, 4, 1), int16] */;
  %784 = @func_316(%782, %783) /* ty=(Tensor[(15, 4, ?), bool],) */;
  %785 = greater_equal(%778, %779) /* ty=Tensor[(5, 10, 1), bool] */;
  %786 = %784.0;
  (%785, %786, meta[relay.Constant][34] /* ty=Tensor[(3, 20), int16] */)
}

def @func_9984() -> Tensor[(14, 12, 13), float64] {
  @func_7188() /* ty=Tensor[(14, 12, 13), float64] */
}

def @func_11596(%var_11559: Tensor[(480), float32], %var_11560: Tensor[(168), float32]) -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(480), float32], Tensor[(168), float32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) {
  %787 = @func_10960() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) */;
  %788 = @func_11212() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(10, 7, 1), bool], uint32) */;
  %789 = cast(%var_11559, dtype="float32") /* ty=Tensor[(480), float32] */;
  %790 = cast(%var_11560, dtype="float32") /* ty=Tensor[(168), float32] */;
  %791 = reshape(%789, newshape=[480]) /* ty=Tensor[(480), float32] */;
  %792 = reshape(%790, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %793 = @func_10851(%791, %792) /* ty=(Tensor[(4, 1, 7), float64], Tensor[(270), uint8], Tensor[(14, 12, 13), float64], Tensor[(50), uint64], Tensor[(480), float32], Tensor[(168), float32]) */;
  %794 = @func_11408() /* ty=(Tensor[(14, 12, 13), float64],) */;
  %795 = cast(%var_11560, dtype="float32") /* ty=Tensor[(168), float32] */;
  %796 = reshape(%795, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %797 = @func_1642(%796) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float32]) */;
  %798 = %787.0;
  %799 = %788.0;
  %800 = %793.2;
  %801 = %794.0;
  %802 = %797.0;
  (%798, %799, %800, %var_11559, %var_11560, %801, %802)
}

def @func_1454(%var_1438: Tensor[(14, 12, 13), float64]) -> (Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), float64]) {
  %803 = @func_910() /* ty=(Tensor[(14, 12, 13), float64],) */;
  %804 = %803.0;
  %805 = cast(%var_1438, dtype="float32") /* ty=Tensor[(14, 12, 13), float32] */;
  %806 = shape_of(%804, dtype="int32") /* ty=Tensor[(3), int32] */;
  %807 = cast(%804, dtype="float32") /* ty=Tensor[(14, 12, 13), float32] */;
  %808 = dyn.reshape(%805, %806, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %809 = divide(%807, %808) /* ty=Tensor[(14, 12, 13), float32] */;
  %810 = @func_1055() /* ty=Tensor[(14, 12, 13), float64] */;
  (%809, %810)
}

def @func_1584() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) {
  %811 = @func_1229() /* ty=Tensor[(14, 12, 13), float64] */;
  %812 = @func_1191() /* ty=Tensor[(14, 12, 13), uint32] */;
  (%811, %812)
}

def @func_6917(%var_6793: uint64) -> (Tensor[(14, 12, 13), float64], Tensor[(10, 5), uint64], uint64, Tensor[(50), uint64], Tensor[(11, 11, 12), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), int64], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) {
  %813 = @func_6280() /* ty=(Tensor[(14, 12, 13), float64],) */;
  %814 = cast(%var_6793, dtype="uint64") /* ty=uint64 */;
  %815 = cast(meta[relay.Constant][35] /* ty=Tensor[(50), uint64] */, dtype="uint64") /* ty=Tensor[(50), uint64] */;
  %816 = reshape(%814, newshape=[]) /* ty=uint64 */;
  %817 = reshape(%815, newshape=[10, 5]) /* ty=Tensor[(10, 5), uint64] */;
  %818 = @func_2433(%816, %817) /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], uint64, Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(60), int16], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(10, 5), uint64], Tensor[(10, 5), uint64], Tensor[(14, 12, 13), uint32], Tensor[(3, 20), int16], Tensor[(15, 4, 168), float32]) */;
  %819 = @func_3924() /* ty=(Tensor[(13, 11, 11), bool], Tensor[(11, 11, 12), float64], Tensor[(14, 12, 13), float64]) */;
  %820 = @func_5666() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) */;
  %821 = %813.0;
  %822 = cast(%821, dtype="float64") /* ty=Tensor[(14, 12, 13), float64] */;
  %823 = reshape(%822, newshape=[14, 12, 13]) /* ty=Tensor[(14, 12, 13), float64] */;
  %824 = @func_2161() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) */;
  %825 = @func_810() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %826 = %818.9;
  %827 = %819.1;
  %828 = %820.1;
  %829 = @func_4609(%823) /* ty=Tensor[(14, 12, 13), int64] */;
  %830 = %824.1;
  %831 = %825.0;
  %832 = @func_1768() /* ty=Tensor[(14, 12, 13), float64] */;
  (%821, %826, %var_6793, meta[relay.Constant][35] /* ty=Tensor[(50), uint64] */, %827, %828, %829, %830, %831, %832)
}

def @func_7774() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) {
  %833 = @func_5702() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
  %834 = %833.1;
  %835 = @func_1754() /* ty=Tensor[(14, 12, 13), uint32] */;
  (%834, %835)
}

def @func_8688() -> (Tensor[(270), uint8],) {
  %836 = @func_3625() /* ty=Tensor[(270), uint8] */;
  (%836,)
}

def @func_9974() -> Tensor[(14, 12, 13), float64] {
  @func_8084() /* ty=Tensor[(14, 12, 13), float64] */
}

def @func_1754() -> Tensor[(14, 12, 13), uint32] {
  @func_1191() /* ty=Tensor[(14, 12, 13), uint32] */
}

def @func_5237() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) {
  %837 = @func_2249() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
  %838 = @func_810() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %839 = %837.0;
  %840 = %838.0;
  (%839, %840)
}

def @func_8508(%var_8489: Tensor[(50), uint64]) -> (Tensor[(14, 12, 13), uint32], Tensor[(168), float32], Tensor[(168), float32], Tensor[(14, 12, 13), float64], Tensor[(50), uint64], Tensor[(14, 12, 13), float64]) {
  %841 = @func_7774() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) */;
  %842 = cast(meta[relay.Constant][36] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %843 = reshape(%842, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %844 = @func_2817(%843) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(168), float32]) */;
  %845 = cast(meta[relay.Constant][36] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %846 = cast(%var_8489, dtype="uint64") /* ty=Tensor[(50), uint64] */;
  %847 = reshape(%845, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %848 = reshape(%846, newshape=[50]) /* ty=Tensor[(50), uint64] */;
  %849 = @func_2622(%847, %848) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(168), float32], Tensor[(3, 20), int16], uint64, Tensor[(50), uint64]) */;
  %850 = %841.1;
  %851 = %844.2;
  %852 = %849.0;
  %853 = @func_7340() /* ty=Tensor[(14, 12, 13), float64] */;
  (%850, %851, meta[relay.Constant][36] /* ty=Tensor[(168), float32] */, %852, %var_8489, %853)
}

def @func_12991() -> (Tensor[(14, 12, 13), uint32],) {
  %854 = @func_7797() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) */;
  %855 = %854.0;
  (%855,)
}

def @func_2524() -> (Tensor[(14, 12, 13), int32], Tensor[(14, 12, 13), float64]) {
  %856 = @func_1533() /* ty=Tensor[(14, 12, 13), int32] */;
  %857 = @func_1081() /* ty=Tensor[(14, 12, 13), float64] */;
  (%856, %857)
}

def @func_11418() -> Tensor[(14, 12, 13), uint32] {
  @func_7481() /* ty=Tensor[(14, 12, 13), uint32] */
}

def @func_9738() -> Tensor[(12, 3, 3), float32] {
  %858 = cast(meta[relay.Constant][37] /* ty=Tensor[(12, 3, 3), float32] */, dtype="float32") /* ty=Tensor[(12, 3, 3), float32] */;
  tan(%858) /* ty=Tensor[(12, 3, 3), float32] */
}

def @func_11818() -> Tensor[(14, 12, 13), float64] {
  %859 = @func_10088() /* ty=(Tensor[(14, 12, 13), float64],) */;
  %859.0
}

def @func_12122() -> (Tensor[(270), uint8], Tensor[(270), uint8], Tensor[(270), uint8], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) {
  %860 = @func_10224() /* ty=(Tensor[(270), uint8],) */;
  %861 = %860.0;
  %862 = cast(%861, dtype="uint8") /* ty=Tensor[(270), uint8] */;
  %863 = reshape(%862, newshape=[270]) /* ty=Tensor[(270), uint8] */;
  %864 = @func_5148(%863) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(270), uint8], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
  %865 = @func_8221() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %866 = @func_4504() /* ty=Tensor[(270), uint8] */;
  %867 = %864.2;
  %868 = %865.0;
  %869 = @func_1768() /* ty=Tensor[(14, 12, 13), float64] */;
  (%861, %866, %867, %868, %869)
}

def @func_11814() -> (Tensor[(11, 11, 12), float32],) {
  %870 = @func_5041() /* ty=Tensor[(11, 11, 12), float32] */;
  (%870,)
}

def @func_3441() -> (Tensor[(14, 12, 13), float64], Tensor[(1, 50), bool], Tensor[(1, 50), float32], Tensor[(14, 12, 13), float64], Tensor[(270), uint8]) {
  %871 = @func_2524() /* ty=(Tensor[(14, 12, 13), int32], Tensor[(14, 12, 13), float64]) */;
  %872 = cast(meta[relay.Constant][38] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %873 = reshape(%872, newshape=[]) /* ty=uint64 */;
  %874 = @func_992(%873) /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(5, 10, 1), bool], uint64, Tensor[(1, 50), uint64]) */;
  %875 = %874.4;
  %876 = cast(%875, dtype="float32") /* ty=Tensor[(1, 50), float32] */;
  %877 = acosh(%876) /* ty=Tensor[(1, 50), float32] */;
  %878 = cast(%877, dtype="bool") /* ty=Tensor[(1, 50), bool] */;
  %879 = cast(meta[relay.Constant][38] /* ty=uint64 */, dtype="bool") /* ty=bool */;
  %880 = cast(%875, dtype="float32") /* ty=Tensor[(1, 50), float32] */;
  %881 = cast(meta[relay.Constant][39] /* ty=Tensor[(270), uint8] */, dtype="uint8") /* ty=Tensor[(270), uint8] */;
  %882 = reshape(%881, newshape=[270, 1]) /* ty=Tensor[(270, 1), uint8] */;
  %883 = @func_1289(%882) /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(2, 15, 9), float64], Tensor[(270, 1), uint8], Tensor[(14, 12, 13), float64]) */;
  %884 = %871.1;
  %885 = equal(%878, %879) /* ty=Tensor[(1, 50), bool] */;
  %886 = sqrt(%880) /* ty=Tensor[(1, 50), float32] */;
  %887 = %883.5;
  (%884, %885, %886, %887, meta[relay.Constant][39] /* ty=Tensor[(270), uint8] */)
}

def @func_3123() -> (Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(15, 4, ?), bool], Tensor[(6, 28), float32], Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), float64]) {
  %888 = @func_1584() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) */;
  %889 = @func_1493() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) */;
  %890 = cast(meta[relay.Constant][40] /* ty=Tensor[(6, 28), float32] */, dtype="float32") /* ty=Tensor[(6, 28), float32] */;
  %891 = reshape(%890, newshape=[6, 2, 14]) /* ty=Tensor[(6, 2, 14), float32] */;
  %892 = @func_624(%891) /* ty=(Tensor[(15, 4, ?), bool], Tensor[(60, 1), int16], Tensor[(15, 4, ?), bool], Tensor[(6, 2, 14), int32], Tensor[(3, 20), int16], uint64, Tensor[(50), uint64], Tensor[(15, 4, ?), bool], Tensor[(15, 4, ?), bool], Tensor[(15, 4, ?), bool], Tensor[(15, 4, ?), bool], Tensor[(6, 2, 14), float64]) */;
  %893 = @func_2524() /* ty=(Tensor[(14, 12, 13), int32], Tensor[(14, 12, 13), float64]) */;
  %894 = %893.1;
  %895 = @func_1493() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) */;
  %896 = %895.0;
  %897 = cast(%896, dtype="int32") /* ty=Tensor[(14, 12, 13), int32] */;
  %898 = shape_of(%894, dtype="int32") /* ty=Tensor[(3), int32] */;
  %899 = cast(%894, dtype="int32") /* ty=Tensor[(14, 12, 13), int32] */;
  %900 = dyn.reshape(%897, %898, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %901 = left_shift(%899, %900) /* ty=Tensor[(14, 12, 13), int32] */;
  %902 = cast(%901, dtype="float64") /* ty=Tensor[(14, 12, 13), float64] */;
  %903 = @func_2942() /* ty=Tensor[(14, 12, 13), float32] */;
  %904 = %888.1;
  %905 = %889.0;
  %906 = %892.9;
  %907 = @func_2942() /* ty=Tensor[(14, 12, 13), float32] */;
  %908 = rsqrt(%902) /* ty=Tensor[(14, 12, 13), float64] */;
  (%903, %904, %905, %906, meta[relay.Constant][40] /* ty=Tensor[(6, 28), float32] */, %907, %908)
}

def @func_5508(%var_5493: Tensor[(14, 12, 13), float64]) -> (Tensor[(11, 6, 5), bool], Tensor[(66), int64], Tensor[(14, 12, 13), bool], Tensor[(14, 12, 13), uint32]) {
  %909 = cast(meta[relay.Constant][41] /* ty=Tensor[(66), int64] */, dtype="int64") /* ty=Tensor[(66), int64] */;
  %910 = reshape(%909, newshape=[11, 6, 1]) /* ty=Tensor[(11, 6, 1), int64] */;
  %911 = @func_4440(%910) /* ty=(Tensor[(11, 6, 5), int64], Tensor[(11, 6, 5), bool]) */;
  %912 = @func_1055() /* ty=Tensor[(14, 12, 13), float64] */;
  %913 = cast(%var_5493, dtype="bool") /* ty=Tensor[(14, 12, 13), bool] */;
  %914 = shape_of(%912, dtype="int32") /* ty=Tensor[(3), int32] */;
  %915 = cast(%912, dtype="bool") /* ty=Tensor[(14, 12, 13), bool] */;
  %916 = dyn.reshape(%913, %914, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %917 = @func_810() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %918 = %911.1;
  %919 = logical_or(%915, %916) /* ty=Tensor[(14, 12, 13), bool] */;
  %920 = %917.0;
  (%918, meta[relay.Constant][41] /* ty=Tensor[(66), int64] */, %919, %920)
}

def @func_12772() -> Tensor[(14, 12, 13), float32] {
  %921 = @func_10401() /* ty=(Tensor[(14, 12, 13), float32],) */;
  %921.0
}

def @func_5871(%var_5862: Tensor[(4, 1, 14), float32], %var_5863: Tensor[(4, 13, 14), float32]) -> Tensor[(4, 13, 14), float32] {
  %922 = cast(%var_5862, dtype="float32") /* ty=Tensor[(4, 1, 14), float32] */;
  %923 = cast(%var_5863, dtype="float32") /* ty=Tensor[(4, 13, 14), float32] */;
  floor_mod(%922, %923) /* ty=Tensor[(4, 13, 14), float32] */
}

def @func_8570() -> (Tensor[(270), uint8], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(3, 156), float64]) {
  %924 = @func_7697() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(15, 4, 168), bool], Tensor[(168), float32], Tensor[(14, 12, 13), float64], Tensor[(270), uint8]) */;
  %925 = @func_7774() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) */;
  %926 = @func_2215() /* ty=(Tensor[(14, 12, 13), float64],) */;
  %927 = cast(meta[relay.Constant][42] /* ty=Tensor[(3, 156), uint8] */, dtype="uint8") /* ty=Tensor[(3, 156), uint8] */;
  %928 = cast(meta[relay.Constant][42] /* ty=Tensor[(3, 156), uint8] */, dtype="uint8") /* ty=Tensor[(3, 156), uint8] */;
  %929 = reshape(%927, newshape=[9, 13, 4]) /* ty=Tensor[(9, 13, 4), uint8] */;
  %930 = reshape(%928, newshape=[9, 13, 4]) /* ty=Tensor[(9, 13, 4), uint8] */;
  %931 = @func_3978(%929, %930) /* ty=Tensor[(9, 13, 4), bool] */;
  %932 = cast(%931, dtype="float64") /* ty=Tensor[(9, 13, 4), float64] */;
  %933 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(3, 156), uint8] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %934 = cast(meta[relay.Constant][42] /* ty=Tensor[(3, 156), uint8] */, dtype="float64") /* ty=Tensor[(3, 156), float64] */;
  %935 = dyn.reshape(%932, %933, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %936 = %924.4;
  %937 = %925.1;
  %938 = %926.0;
  %939 = add(%934, %935) /* ty=Tensor[(3, 156), float64] */;
  (%936, %937, %938, %939)
}

def @func_11748() -> Tensor[(14, 12, 13), uint32] {
  %940 = @func_2161() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) */;
  %940.0
}

def @func_11504() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(4, 13, 14), float32], Tensor[(56), float32], Tensor[(728), float32]) {
  %941 = @func_5702() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
  %942 = @func_6261() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %943 = cast(meta[relay.Constant][43] /* ty=Tensor[(56), float32] */, dtype="float32") /* ty=Tensor[(56), float32] */;
  %944 = cast(meta[relay.Constant][44] /* ty=Tensor[(728), float32] */, dtype="float32") /* ty=Tensor[(728), float32] */;
  %945 = reshape(%943, newshape=[4, 1, 14]) /* ty=Tensor[(4, 1, 14), float32] */;
  %946 = reshape(%944, newshape=[4, 13, 14]) /* ty=Tensor[(4, 13, 14), float32] */;
  %947 = %941.1;
  %948 = %942.0;
  %949 = @func_5871(%945, %946) /* ty=Tensor[(4, 13, 14), float32] */;
  (%947, %948, %949, meta[relay.Constant][43] /* ty=Tensor[(56), float32] */, meta[relay.Constant][44] /* ty=Tensor[(728), float32] */)
}

def @func_7697() -> (Tensor[(14, 12, 13), uint32], Tensor[(15, 4, 168), bool], Tensor[(168), float32], Tensor[(14, 12, 13), float64], Tensor[(270), uint8]) {
  %950 = @func_1493() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) */;
  %951 = cast(meta[relay.Constant][45] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %952 = reshape(%951, newshape=[1, 168]) /* ty=Tensor[(1, 168), float32] */;
  %953 = @func_7304(%952) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(15, 4, 168), bool], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(15, 4, 168), int32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(1, 168), float32]) */;
  %954 = %950.1;
  %955 = %953.2;
  %956 = @func_2696() /* ty=Tensor[(14, 12, 13), float64] */;
  %957 = @func_3625() /* ty=Tensor[(270), uint8] */;
  (%954, %955, meta[relay.Constant][45] /* ty=Tensor[(168), float32] */, %956, %957)
}

def @func_8704() -> (Tensor[(14, 12, 13), float64],) {
  %958 = @func_4351() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) */;
  %959 = %958.1;
  (%959,)
}

def @func_1768() -> Tensor[(14, 12, 13), float64] {
  @func_1229() /* ty=Tensor[(14, 12, 13), float64] */
}

def @func_1229() -> Tensor[(14, 12, 13), float64] {
  %960 = @func_810() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %961 = %960.0;
  %962 = cast(%961, dtype="float64") /* ty=Tensor[(14, 12, 13), float64] */;
  sqrt(%962) /* ty=Tensor[(14, 12, 13), float64] */
}

def @func_11149() -> Tensor[(14, 12, 13), float64] {
  %963 = @func_5969() /* ty=(Tensor[(14, 12, 13), float64],) */;
  %963.0
}

def @func_10717(%var_10640: Tensor[(168), float32]) -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(270), uint8]) {
  %964 = @func_9118() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %965 = cast(%var_10640, dtype="float32") /* ty=Tensor[(168), float32] */;
  %966 = reshape(%965, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %967 = @func_2817(%966) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(168), float32]) */;
  %968 = @func_9176() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(270), uint8]) */;
  %969 = %964.0;
  %970 = %967.0;
  %971 = %968.1;
  (%969, %970, %var_10640, %971)
}

def @func_1136(%var_1103: Tensor[(168), float32]) -> (Tensor[(14, 12, 13), float64], Tensor[(15, 4, ?), bool], Tensor[(168), float32], Tensor[(15, 4, ?), bool]) {
  %972 = cast(%var_1103, dtype="float32") /* ty=Tensor[(168), float32] */;
  %973 = reshape(%972, newshape=[6, 2, 14]) /* ty=Tensor[(6, 2, 14), float32] */;
  %974 = @func_624(%973) /* ty=(Tensor[(15, 4, ?), bool], Tensor[(60, 1), int16], Tensor[(15, 4, ?), bool], Tensor[(6, 2, 14), int32], Tensor[(3, 20), int16], uint64, Tensor[(50), uint64], Tensor[(15, 4, ?), bool], Tensor[(15, 4, ?), bool], Tensor[(15, 4, ?), bool], Tensor[(15, 4, ?), bool], Tensor[(6, 2, 14), float64]) */;
  %975 = %974.0;
  %976 = cast(%975, dtype="int16") /* ty=Tensor[(15, 4, ?), int16] */;
  %977 = cast(%975, dtype="int16") /* ty=Tensor[(15, 4, ?), int16] */;
  %978 = reshape(%976, newshape=[15, 4, 1]) /* ty=Tensor[(15, 4, 1), int16] */;
  %979 = reshape(%977, newshape=[15, 4, 1]) /* ty=Tensor[(15, 4, 1), int16] */;
  %980 = @func_316(%978, %979) /* ty=(Tensor[(15, 4, ?), bool],) */;
  %981 = @func_1081() /* ty=Tensor[(14, 12, 13), float64] */;
  %982 = %980.0;
  (%981, %975, %var_1103, %982)
}

def @func_2622(%var_2612: Tensor[(168), float32], %var_2616: Tensor[(50), uint64]) -> (Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(168), float32], Tensor[(3, 20), int16], uint64, Tensor[(50), uint64]) {
  %983 = @func_1584() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) */;
  %984 = cast(%var_2612, dtype="float32") /* ty=Tensor[(168), float32] */;
  %985 = reshape(%984, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %986 = @func_1642(%985) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float32]) */;
  %987 = cast(meta[relay.Constant][46] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %988 = cast(%var_2616, dtype="uint64") /* ty=Tensor[(50), uint64] */;
  %989 = reshape(%987, newshape=[]) /* ty=uint64 */;
  %990 = reshape(%988, newshape=[5, 10, 1]) /* ty=Tensor[(5, 10, 1), uint64] */;
  %991 = @func_408(%989, %990) /* ty=(Tensor[(5, 10, 1), bool], Tensor[(15, 4, ?), bool], Tensor[(3, 20), int16]) */;
  %992 = %983.0;
  %993 = %986.1;
  %994 = %991.2;
  (%992, %993, %var_2612, %994, meta[relay.Constant][46] /* ty=uint64 */, %var_2616)
}

def @func_870(%var_854: Tensor[(2, 15, 9), uint8], %var_855: Tensor[(2, 15, 9), uint8]) -> Tensor[(2, 15, 9), float64] {
  %995 = cast(%var_855, dtype="uint8") /* ty=Tensor[(2, 15, 9), uint8] */;
  %996 = shape_of(%var_854, dtype="int32") /* ty=Tensor[(3), int32] */;
  %997 = cast(%var_854, dtype="uint8") /* ty=Tensor[(2, 15, 9), uint8] */;
  %998 = dyn.reshape(%995, %996, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %999 = add(%997, %998) /* ty=Tensor[(2, 15, 9), uint8] */;
  %1000 = cast(%999, dtype="float64") /* ty=Tensor[(2, 15, 9), float64] */;
  tan(%1000) /* ty=Tensor[(2, 15, 9), float64] */
}

def @func_2034(%var_1949: Tensor[(14, 12, 13), int32], %var_1999: Tensor[(168), float32]) -> (Tensor[(14, 12, 13), bool], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(2, 15, 9), float64], Tensor[(270), uint8], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), uint32], Tensor[(168), float32], Tensor[(168), float32], Tensor[(15, 4, ?), bool], Tensor[(2, 15, 9), float64]) {
  %1001 = @func_1533() /* ty=Tensor[(14, 12, 13), int32] */;
  %1002 = cast(%var_1949, dtype="bool") /* ty=Tensor[(14, 12, 13), bool] */;
  %1003 = shape_of(%1001, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1004 = cast(%1001, dtype="bool") /* ty=Tensor[(14, 12, 13), bool] */;
  %1005 = dyn.reshape(%1002, %1003, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1006 = equal(%1004, %1005) /* ty=Tensor[(14, 12, 13), bool] */;
  %1007 = cast(%1006, dtype="bool") /* ty=Tensor[(14, 12, 13), bool] */;
  %1008 = shape_of(%var_1949, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1009 = cast(%var_1949, dtype="bool") /* ty=Tensor[(14, 12, 13), bool] */;
  %1010 = dyn.reshape(%1007, %1008, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1011 = cast(%1001, dtype="float64") /* ty=Tensor[(14, 12, 13), float64] */;
  %1012 = cast(meta[relay.Constant][47] /* ty=Tensor[(270), uint8] */, dtype="uint8") /* ty=Tensor[(270), uint8] */;
  %1013 = cast(meta[relay.Constant][47] /* ty=Tensor[(270), uint8] */, dtype="uint8") /* ty=Tensor[(270), uint8] */;
  %1014 = reshape(%1012, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), uint8] */;
  %1015 = reshape(%1013, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), uint8] */;
  %1016 = cast(%1006, dtype="float32") /* ty=Tensor[(14, 12, 13), float32] */;
  %1017 = cast(%var_1999, dtype="float32") /* ty=Tensor[(168), float32] */;
  %1018 = reshape(%1017, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %1019 = @func_1733(%1018) /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(168), float32], Tensor[(168), float32], Tensor[(14, 12, 13), float32]) */;
  %1020 = %1019.3;
  %1021 = cast(%1020, dtype="float32") /* ty=Tensor[(168), float32] */;
  %1022 = reshape(%1021, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %1023 = @func_1136(%1022) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(15, 4, ?), bool], Tensor[(168), float32], Tensor[(15, 4, ?), bool]) */;
  %1024 = cast(meta[relay.Constant][47] /* ty=Tensor[(270), uint8] */, dtype="uint8") /* ty=Tensor[(270), uint8] */;
  %1025 = cast(meta[relay.Constant][47] /* ty=Tensor[(270), uint8] */, dtype="uint8") /* ty=Tensor[(270), uint8] */;
  %1026 = reshape(%1024, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), uint8] */;
  %1027 = reshape(%1025, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), uint8] */;
  %1028 = greater_equal(%1009, %1010) /* ty=Tensor[(14, 12, 13), bool] */;
  %1029 = sinh(%1011) /* ty=Tensor[(14, 12, 13), float64] */;
  %1030 = @func_825() /* ty=Tensor[(14, 12, 13), uint32] */;
  %1031 = @func_825() /* ty=Tensor[(14, 12, 13), uint32] */;
  %1032 = @func_870(%1014, %1015) /* ty=Tensor[(2, 15, 9), float64] */;
  %1033 = @func_1081() /* ty=Tensor[(14, 12, 13), float64] */;
  %1034 = tan(%1016) /* ty=Tensor[(14, 12, 13), float32] */;
  %1035 = @func_778() /* ty=Tensor[(14, 12, 13), uint32] */;
  %1036 = %1023.1;
  %1037 = @func_870(%1026, %1027) /* ty=Tensor[(2, 15, 9), float64] */;
  (%1028, %1029, %1030, %1031, %1032, meta[relay.Constant][47] /* ty=Tensor[(270), uint8] */, %1033, %1034, %1035, %1020, %var_1999, %1036, %1037)
}

def @func_7939(%var_7907: Tensor[(168), float32]) -> (Tensor[(4, 6, 8), float64], Tensor[(14, 12, 13), uint32], Tensor[(168), float32], Tensor[(14, 12, 13), float64], Tensor[(13, 11, 11), bool]) {
  %1038 = cast(meta[relay.Constant][48] /* ty=Tensor[(4, 6, 8), float64] */, dtype="float64") /* ty=Tensor[(4, 6, 8), float64] */;
  %1039 = cast(%var_7907, dtype="float32") /* ty=Tensor[(168), float32] */;
  %1040 = reshape(%1039, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %1041 = @func_1642(%1040) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float32]) */;
  %1042 = @func_3924() /* ty=(Tensor[(13, 11, 11), bool], Tensor[(11, 11, 12), float64], Tensor[(14, 12, 13), float64]) */;
  %1043 = acosh(%1038) /* ty=Tensor[(4, 6, 8), float64] */;
  %1044 = %1041.2;
  %1045 = @func_7340() /* ty=Tensor[(14, 12, 13), float64] */;
  %1046 = %1042.0;
  (%1043, %1044, %var_7907, %1045, %1046)
}

def @func_11809() -> Tensor[(50), uint64] {
  %1047 = @func_11023() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(50), uint64]) */;
  %1047.2
}

def @func_4075() -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(6, 28), float32], Tensor[(14, 12, 13), float64]) {
  %1048 = @func_3706() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(15, 4, ?), bool]) */;
  %1049 = @func_2215() /* ty=(Tensor[(14, 12, 13), float64],) */;
  %1050 = @func_810() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %1051 = %1050.0;
  %1052 = cast(%1051, dtype="float32") /* ty=Tensor[(14, 12, 13), float32] */;
  %1053 = asin(%1052) /* ty=Tensor[(14, 12, 13), float32] */;
  %1054 = cast(%1053, dtype="float64") /* ty=Tensor[(14, 12, 13), float64] */;
  %1055 = @func_3123() /* ty=(Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(15, 4, ?), bool], Tensor[(6, 28), float32], Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), float64]) */;
  %1056 = %1048.0;
  %1057 = %1049.0;
  %1058 = @func_825() /* ty=Tensor[(14, 12, 13), uint32] */;
  %1059 = log(%1054) /* ty=Tensor[(14, 12, 13), float64] */;
  %1060 = %1055.4;
  %1061 = @func_1229() /* ty=Tensor[(14, 12, 13), float64] */;
  (%1056, %1057, %1058, %1059, %1060, %1061)
}

def @func_11968() -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) {
  %1062 = @func_6261() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %1063 = @func_7955() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %1064 = %1062.0;
  %1065 = %1063.0;
  (%1064, %1065)
}

def @func_6354() -> Tensor[(14, 12, 13), float64] {
  %1066 = @func_2249() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
  %1066.0
}

def @func_7009(%var_6994: Tensor[(16, 6, 5), float32], %var_7003: Tensor[(168), float32]) -> (Tensor[(16, 6, 5), float32], Tensor[(50), uint64], Tensor[(168), float32], Tensor[(50), uint64]) {
  %1067 = cast(%var_6994, dtype="float32") /* ty=Tensor[(16, 6, 5), float32] */;
  %1068 = cast(%var_7003, dtype="float32") /* ty=Tensor[(168), float32] */;
  %1069 = cast(meta[relay.Constant][49] /* ty=Tensor[(50), uint64] */, dtype="uint64") /* ty=Tensor[(50), uint64] */;
  %1070 = reshape(%1068, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %1071 = reshape(%1069, newshape=[50]) /* ty=Tensor[(50), uint64] */;
  %1072 = @func_2622(%1070, %1071) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(168), float32], Tensor[(3, 20), int16], uint64, Tensor[(50), uint64]) */;
  %1073 = log(%1067) /* ty=Tensor[(16, 6, 5), float32] */;
  %1074 = %1072.5;
  (%1073, %1074, %var_7003, meta[relay.Constant][49] /* ty=Tensor[(50), uint64] */)
}

def @func_5906(%var_5904: Tensor[(168), float32]) -> (Tensor[(14, 12, 13), uint32], Tensor[(168), float32], Tensor[(168), float32]) {
  %1075 = cast(%var_5904, dtype="float32") /* ty=Tensor[(168), float32] */;
  %1076 = reshape(%1075, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %1077 = @func_2817(%1076) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(168), float32]) */;
  %1078 = @func_5529() /* ty=Tensor[(14, 12, 13), uint32] */;
  %1079 = %1077.1;
  (%1078, %1079, %var_5904)
}

def @func_12717() -> (Tensor[(11, 11, 12), float32],) {
  %1080 = @func_5041() /* ty=Tensor[(11, 11, 12), float32] */;
  (%1080,)
}

def @func_4440(%var_4429: Tensor[(11, 6, 1), int64]) -> (Tensor[(11, 6, 5), int64], Tensor[(11, 6, 5), bool]) {
  %1081 = cast(%var_4429, dtype="int64") /* ty=Tensor[(11, 6, 1), int64] */;
  %1082 = cast(meta[relay.Constant][50] /* ty=Tensor[(11, 6, 5), int64] */, dtype="int64") /* ty=Tensor[(11, 6, 5), int64] */;
  %1083 = cast(%var_4429, dtype="bool") /* ty=Tensor[(11, 6, 1), bool] */;
  %1084 = cast(meta[relay.Constant][50] /* ty=Tensor[(11, 6, 5), int64] */, dtype="bool") /* ty=Tensor[(11, 6, 5), bool] */;
  %1085 = left_shift(%1081, %1082) /* ty=Tensor[(11, 6, 5), int64] */;
  %1086 = greater(%1083, %1084) /* ty=Tensor[(11, 6, 5), bool] */;
  (%1085, %1086)
}

def @func_7188() -> Tensor[(14, 12, 13), float64] {
  %1087 = @func_3844() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) */;
  %1087.0
}

def @func_624(%var_528: Tensor[(6, 2, 14), float32]) -> (Tensor[(15, 4, ?), bool], Tensor[(60, 1), int16], Tensor[(15, 4, ?), bool], Tensor[(6, 2, 14), int32], Tensor[(3, 20), int16], uint64, Tensor[(50), uint64], Tensor[(15, 4, ?), bool], Tensor[(15, 4, ?), bool], Tensor[(15, 4, ?), bool], Tensor[(15, 4, ?), bool], Tensor[(6, 2, 14), float64]) {
  %1088 = cast(meta[relay.Constant][51] /* ty=Tensor[(60, 1), int16] */, dtype="int16") /* ty=Tensor[(60, 1), int16] */;
  %1089 = cast(meta[relay.Constant][51] /* ty=Tensor[(60, 1), int16] */, dtype="int16") /* ty=Tensor[(60, 1), int16] */;
  %1090 = reshape(%1088, newshape=[15, 4, 1]) /* ty=Tensor[(15, 4, 1), int16] */;
  %1091 = reshape(%1089, newshape=[15, 4, 1]) /* ty=Tensor[(15, 4, 1), int16] */;
  %1092 = @func_316(%1090, %1091) /* ty=(Tensor[(15, 4, ?), bool],) */;
  %1093 = cast(meta[relay.Constant][51] /* ty=Tensor[(60, 1), int16] */, dtype="int16") /* ty=Tensor[(60, 1), int16] */;
  %1094 = cast(meta[relay.Constant][51] /* ty=Tensor[(60, 1), int16] */, dtype="int16") /* ty=Tensor[(60, 1), int16] */;
  %1095 = reshape(%1093, newshape=[15, 4, 1]) /* ty=Tensor[(15, 4, 1), int16] */;
  %1096 = reshape(%1094, newshape=[15, 4, 1]) /* ty=Tensor[(15, 4, 1), int16] */;
  %1097 = @func_316(%1095, %1096) /* ty=(Tensor[(15, 4, ?), bool],) */;
  %1098 = cast(%var_528, dtype="float32") /* ty=Tensor[(6, 2, 14), float32] */;
  %1099 = acos(%1098) /* ty=Tensor[(6, 2, 14), float32] */;
  %1100 = cast(%1099, dtype="float64") /* ty=Tensor[(6, 2, 14), float64] */;
  %1101 = cosh(%1100) /* ty=Tensor[(6, 2, 14), float64] */;
  %1102 = cast(%var_528, dtype="int32") /* ty=Tensor[(6, 2, 14), int32] */;
  %1103 = shape_of(%1101, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1104 = cast(%1101, dtype="int32") /* ty=Tensor[(6, 2, 14), int32] */;
  %1105 = dyn.reshape(%1102, %1103, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %1106 = cast(meta[relay.Constant][52] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %1107 = cast(meta[relay.Constant][53] /* ty=Tensor[(50), uint64] */, dtype="uint64") /* ty=Tensor[(50), uint64] */;
  %1108 = reshape(%1106, newshape=[]) /* ty=uint64 */;
  %1109 = reshape(%1107, newshape=[5, 10, 1]) /* ty=Tensor[(5, 10, 1), uint64] */;
  %1110 = @func_408(%1108, %1109) /* ty=(Tensor[(5, 10, 1), bool], Tensor[(15, 4, ?), bool], Tensor[(3, 20), int16]) */;
  %1111 = %1110.2;
  %1112 = cast(%1111, dtype="int16") /* ty=Tensor[(3, 20), int16] */;
  %1113 = %1097.0;
  %1114 = cast(%1113, dtype="int16") /* ty=Tensor[(15, 4, ?), int16] */;
  %1115 = reshape(%1112, newshape=[15, 4, 1]) /* ty=Tensor[(15, 4, 1), int16] */;
  %1116 = reshape(%1114, newshape=[15, 4, 1]) /* ty=Tensor[(15, 4, 1), int16] */;
  %1117 = @func_316(%1115, %1116) /* ty=(Tensor[(15, 4, ?), bool],) */;
  %1118 = cast(%1113, dtype="int16") /* ty=Tensor[(15, 4, ?), int16] */;
  %1119 = cast(meta[relay.Constant][51] /* ty=Tensor[(60, 1), int16] */, dtype="int16") /* ty=Tensor[(60, 1), int16] */;
  %1120 = reshape(%1118, newshape=[15, 4, 1]) /* ty=Tensor[(15, 4, 1), int16] */;
  %1121 = reshape(%1119, newshape=[15, 4, 1]) /* ty=Tensor[(15, 4, 1), int16] */;
  %1122 = @func_316(%1120, %1121) /* ty=(Tensor[(15, 4, ?), bool],) */;
  %1123 = cast(meta[relay.Constant][52] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %1124 = cast(meta[relay.Constant][53] /* ty=Tensor[(50), uint64] */, dtype="uint64") /* ty=Tensor[(50), uint64] */;
  %1125 = reshape(%1123, newshape=[]) /* ty=uint64 */;
  %1126 = reshape(%1124, newshape=[5, 10, 1]) /* ty=Tensor[(5, 10, 1), uint64] */;
  %1127 = @func_408(%1125, %1126) /* ty=(Tensor[(5, 10, 1), bool], Tensor[(15, 4, ?), bool], Tensor[(3, 20), int16]) */;
  %1128 = cast(meta[relay.Constant][52] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %1129 = cast(meta[relay.Constant][53] /* ty=Tensor[(50), uint64] */, dtype="uint64") /* ty=Tensor[(50), uint64] */;
  %1130 = reshape(%1128, newshape=[]) /* ty=uint64 */;
  %1131 = reshape(%1129, newshape=[5, 10, 1]) /* ty=Tensor[(5, 10, 1), uint64] */;
  %1132 = @func_408(%1130, %1131) /* ty=(Tensor[(5, 10, 1), bool], Tensor[(15, 4, ?), bool], Tensor[(3, 20), int16]) */;
  %1133 = cast(%1101, dtype="float32") /* ty=Tensor[(6, 2, 14), float32] */;
  %1134 = shape_of(%1099, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1135 = cast(%1099, dtype="float32") /* ty=Tensor[(6, 2, 14), float32] */;
  %1136 = dyn.reshape(%1133, %1134, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1137 = mod(%1135, %1136) /* ty=Tensor[(6, 2, 14), float32] */;
  %1138 = cast(%1137, dtype="float32") /* ty=Tensor[(6, 2, 14), float32] */;
  %1139 = log(%1138) /* ty=Tensor[(6, 2, 14), float32] */;
  %1140 = cast(%1139, dtype="float64") /* ty=Tensor[(6, 2, 14), float64] */;
  %1141 = %1092.0;
  %1142 = right_shift(%1104, %1105) /* ty=Tensor[(6, 2, 14), int32] */;
  %1143 = %1117.0;
  %1144 = %1122.0;
  %1145 = %1127.1;
  %1146 = %1132.1;
  %1147 = asin(%1140) /* ty=Tensor[(6, 2, 14), float64] */;
  (%1141, meta[relay.Constant][51] /* ty=Tensor[(60, 1), int16] */, %1113, %1142, %1111, meta[relay.Constant][52] /* ty=uint64 */, meta[relay.Constant][53] /* ty=Tensor[(50), uint64] */, %1143, %1144, %1145, %1146, %1147)
}

def @func_2878(%var_2873: Tensor[(14, 12, 13), float64]) -> (Tensor[(14, 12, 13), float32], Tensor[(1, 168), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), bool]) {
  %1148 = cast(meta[relay.Constant][54] /* ty=Tensor[(1, 168), float32] */, dtype="float32") /* ty=Tensor[(1, 168), float32] */;
  %1149 = reshape(%1148, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %1150 = @func_1642(%1149) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float32]) */;
  %1151 = cast(meta[relay.Constant][54] /* ty=Tensor[(1, 168), float32] */, dtype="float32") /* ty=Tensor[(1, 168), float32] */;
  %1152 = reshape(%1151, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %1153 = @func_1733(%1152) /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(168), float32], Tensor[(168), float32], Tensor[(14, 12, 13), float32]) */;
  %1154 = @func_2249() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
  %1155 = %1154.1;
  %1156 = cast(%1155, dtype="float64") /* ty=Tensor[(14, 12, 13), float64] */;
  %1157 = acosh(%1156) /* ty=Tensor[(14, 12, 13), float64] */;
  %1158 = cast(%var_2873, dtype="bool") /* ty=Tensor[(14, 12, 13), bool] */;
  %1159 = shape_of(%1157, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1160 = cast(%1157, dtype="bool") /* ty=Tensor[(14, 12, 13), bool] */;
  %1161 = dyn.reshape(%1158, %1159, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1162 = %1150.3;
  %1163 = %1153.0;
  %1164 = logical_and(%1160, %1161) /* ty=Tensor[(14, 12, 13), bool] */;
  (%1162, meta[relay.Constant][54] /* ty=Tensor[(1, 168), float32] */, %1163, %1164)
}

def @func_5702() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) {
  %1165 = @func_910() /* ty=(Tensor[(14, 12, 13), float64],) */;
  %1166 = @func_1081() /* ty=Tensor[(14, 12, 13), float64] */;
  %1167 = %1165.0;
  (%1166, %1167)
}

def @func_10513(%var_10509: Tensor[(1, 168), float32]) -> (Tensor[(15, 6, 10), float32], Tensor[(14, 12, 13), float64], Tensor[(1, 168), float32]) {
  %1168 = cast(meta[relay.Constant][55] /* ty=Tensor[(15, 6, 10), float32] */, dtype="float32") /* ty=Tensor[(15, 6, 10), float32] */;
  %1169 = cast(%var_10509, dtype="float32") /* ty=Tensor[(1, 168), float32] */;
  %1170 = reshape(%1169, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %1171 = @func_1136(%1170) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(15, 4, ?), bool], Tensor[(168), float32], Tensor[(15, 4, ?), bool]) */;
  %1172 = cos(%1168) /* ty=Tensor[(15, 6, 10), float32] */;
  %1173 = %1171.0;
  (%1172, %1173, %var_10509)
}

def @func_6006() -> (Tensor[(14, 12, 13), float64],) {
  %1174 = @func_3123() /* ty=(Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(15, 4, ?), bool], Tensor[(6, 28), float32], Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), float64]) */;
  %1175 = %1174.6;
  (%1175,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4353() -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) {
  @func_4351() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) */
}

def @func_10515(%var_10514: Tensor[(1, 168), float32]) -> (Tensor[(15, 6, 10), float32], Tensor[(14, 12, 13), float64], Tensor[(1, 168), float32]) {
  %6 = fn (%var_10509: Tensor[(1, 168), float32]) -> (Tensor[(15, 6, 10), float32], Tensor[(14, 12, 13), float64], Tensor[(1, 168), float32]) {
    %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(15, 6, 10), float32] */, dtype="float32") /* ty=Tensor[(15, 6, 10), float32] */;
    %1 = cast(%var_10509, dtype="float32") /* ty=Tensor[(1, 168), float32] */;
    %2 = reshape(%1, newshape=[168]) /* ty=Tensor[(168), float32] */;
    %3 = @func_1136(%2) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(15, 4, ?), bool], Tensor[(168), float32], Tensor[(15, 4, ?), bool]) */;
    %4 = cos(%0) /* ty=Tensor[(15, 6, 10), float32] */;
    %5 = %3.0;
    (%4, %5, %var_10509)
  };
  %6(%var_10514) /* ty=(Tensor[(15, 6, 10), float32], Tensor[(14, 12, 13), float64], Tensor[(1, 168), float32]) */
}

def @func_1920(%var_1914: uint64, %var_1915: Tensor[(10, 5), uint64]) -> (Tensor[(14, 12, 13), float64], Tensor[(15, 4, ?), bool], uint64, Tensor[(10, 5), uint64]) {
  %7 = @func_910() /* ty=(Tensor[(14, 12, 13), float64],) */;
  %8 = cast(%var_1914, dtype="uint64") /* ty=uint64 */;
  %9 = cast(%var_1915, dtype="uint64") /* ty=Tensor[(10, 5), uint64] */;
  %10 = reshape(%8, newshape=[]) /* ty=uint64 */;
  %11 = reshape(%9, newshape=[5, 10, 1]) /* ty=Tensor[(5, 10, 1), uint64] */;
  %12 = @func_408(%10, %11) /* ty=(Tensor[(5, 10, 1), bool], Tensor[(15, 4, ?), bool], Tensor[(3, 20), int16]) */;
  %13 = %7.0;
  %14 = %12.1;
  (%13, %14, %var_1914, %var_1915)
}

def @func_3281() -> (Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(168), float32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) {
  %25 = fn () -> (Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(168), float32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) {
    %15 = cast(meta[relay.Constant][1] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
    %16 = reshape(%15, newshape=[168]) /* ty=Tensor[(168), float32] */;
    %17 = @func_3187(%16) /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(2, 15, 9), float64], Tensor[(168), float32], Tensor[(14, 12, 13), float64]) */;
    %18 = @func_2215() /* ty=(Tensor[(14, 12, 13), float64],) */;
    %19 = @func_2249() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
    %20 = @func_1768() /* ty=Tensor[(14, 12, 13), float64] */;
    %21 = %17.2;
    %22 = %18.0;
    %23 = @func_2696() /* ty=Tensor[(14, 12, 13), float64] */;
    %24 = %19.1;
    (%20, %21, meta[relay.Constant][1] /* ty=Tensor[(168), float32] */, %22, %23, %24)
  };
  %25() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(168), float32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */
}

def @func_2625(%var_2623: Tensor[(168), float32], %var_2624: Tensor[(50), uint64]) -> (Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(168), float32], Tensor[(3, 20), int16], uint64, Tensor[(50), uint64]) {
  %38 = fn (%var_2612: Tensor[(168), float32], %var_2616: Tensor[(50), uint64]) -> (Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(168), float32], Tensor[(3, 20), int16], uint64, Tensor[(50), uint64]) {
    %26 = @func_1584() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) */;
    %27 = cast(%var_2612, dtype="float32") /* ty=Tensor[(168), float32] */;
    %28 = reshape(%27, newshape=[168]) /* ty=Tensor[(168), float32] */;
    %29 = @func_1642(%28) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float32]) */;
    %30 = cast(meta[relay.Constant][2] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %31 = cast(%var_2616, dtype="uint64") /* ty=Tensor[(50), uint64] */;
    %32 = reshape(%30, newshape=[]) /* ty=uint64 */;
    %33 = reshape(%31, newshape=[5, 10, 1]) /* ty=Tensor[(5, 10, 1), uint64] */;
    %34 = @func_408(%32, %33) /* ty=(Tensor[(5, 10, 1), bool], Tensor[(15, 4, ?), bool], Tensor[(3, 20), int16]) */;
    %35 = %26.0;
    %36 = %29.1;
    %37 = %34.2;
    (%35, %36, %var_2612, %37, meta[relay.Constant][2] /* ty=uint64 */, %var_2616)
  };
  %38(%var_2623, %var_2624) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(168), float32], Tensor[(3, 20), int16], uint64, Tensor[(50), uint64]) */
}

def @func_5668() -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) {
  @func_5666() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) */
}

def @func_12382() -> (Tensor[(14, 12, 13), float32], Tensor[(11, 11, 12), float64], Tensor[(14, 12, 13), float64]) {
  %46 = fn () -> (Tensor[(14, 12, 13), float32], Tensor[(11, 11, 12), float64], Tensor[(14, 12, 13), float64]) {
    %39 = @func_4130() /* ty=(Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), float32]) */;
    %40 = %39.1;
    %41 = cast(%40, dtype="float64") /* ty=Tensor[(14, 12, 13), float64] */;
    %42 = reshape(%41, newshape=[14, 12, 13]) /* ty=Tensor[(14, 12, 13), float64] */;
    %43 = @func_1454(%42) /* ty=(Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), float64]) */;
    %44 = @func_3364() /* ty=Tensor[(11, 11, 12), float64] */;
    %45 = %43.1;
    (%40, %44, %45)
  };
  %46() /* ty=(Tensor[(14, 12, 13), float32], Tensor[(11, 11, 12), float64], Tensor[(14, 12, 13), float64]) */
}

def @func_7304(%var_7237: Tensor[(1, 168), float32]) -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(15, 4, 168), bool], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(15, 4, 168), int32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(1, 168), float32]) {
  %47 = @func_810() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %48 = cast(%var_7237, dtype="float32") /* ty=Tensor[(1, 168), float32] */;
  %49 = reshape(%48, newshape=[6, 2, 14]) /* ty=Tensor[(6, 2, 14), float32] */;
  %50 = @func_624(%49) /* ty=(Tensor[(15, 4, ?), bool], Tensor[(60, 1), int16], Tensor[(15, 4, ?), bool], Tensor[(6, 2, 14), int32], Tensor[(3, 20), int16], uint64, Tensor[(50), uint64], Tensor[(15, 4, ?), bool], Tensor[(15, 4, ?), bool], Tensor[(15, 4, ?), bool], Tensor[(15, 4, ?), bool], Tensor[(6, 2, 14), float64]) */;
  %51 = %50.9;
  %52 = cast(%51, dtype="bool") /* ty=Tensor[(15, 4, ?), bool] */;
  %53 = cast(%var_7237, dtype="bool") /* ty=Tensor[(1, 168), bool] */;
  %54 = @func_7101() /* ty=(Tensor[(14, 12, 13), float64],) */;
  %55 = @func_6183() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) */;
  %56 = cast(%var_7237, dtype="int32") /* ty=Tensor[(1, 168), int32] */;
  %57 = cast(%51, dtype="int32") /* ty=Tensor[(15, 4, ?), int32] */;
  %58 = @func_4351() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) */;
  %59 = @func_7101() /* ty=(Tensor[(14, 12, 13), float64],) */;
  %60 = @func_5702() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
  %61 = cast(%var_7237, dtype="float32") /* ty=Tensor[(1, 168), float32] */;
  %62 = @func_1055() /* ty=Tensor[(14, 12, 13), float64] */;
  %63 = %47.0;
  %64 = less_equal(%52, %53) /* ty=Tensor[(15, 4, 168), bool] */;
  %65 = %54.0;
  %66 = @func_6354() /* ty=Tensor[(14, 12, 13), float64] */;
  %67 = %55.0;
  %68 = right_shift(%56, %57) /* ty=Tensor[(15, 4, 168), int32] */;
  %69 = %58.0;
  %70 = %59.0;
  %71 = %60.0;
  %72 = exp(%61) /* ty=Tensor[(1, 168), float32] */;
  (%62, %63, %64, %65, %66, %67, %68, %69, %70, %71, %72)
}

def @func_6919(%var_6918: uint64) -> (Tensor[(14, 12, 13), float64], Tensor[(10, 5), uint64], uint64, Tensor[(50), uint64], Tensor[(11, 11, 12), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), int64], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) {
  %93 = fn (%var_6793: uint64) -> (Tensor[(14, 12, 13), float64], Tensor[(10, 5), uint64], uint64, Tensor[(50), uint64], Tensor[(11, 11, 12), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), int64], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) {
    %73 = @func_6280() /* ty=(Tensor[(14, 12, 13), float64],) */;
    %74 = cast(%var_6793, dtype="uint64") /* ty=uint64 */;
    %75 = cast(meta[relay.Constant][3] /* ty=Tensor[(50), uint64] */, dtype="uint64") /* ty=Tensor[(50), uint64] */;
    %76 = reshape(%74, newshape=[]) /* ty=uint64 */;
    %77 = reshape(%75, newshape=[10, 5]) /* ty=Tensor[(10, 5), uint64] */;
    %78 = @func_2433(%76, %77) /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], uint64, Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(60), int16], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(10, 5), uint64], Tensor[(10, 5), uint64], Tensor[(14, 12, 13), uint32], Tensor[(3, 20), int16], Tensor[(15, 4, 168), float32]) */;
    %79 = @func_3924() /* ty=(Tensor[(13, 11, 11), bool], Tensor[(11, 11, 12), float64], Tensor[(14, 12, 13), float64]) */;
    %80 = @func_5666() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) */;
    %81 = %73.0;
    %82 = cast(%81, dtype="float64") /* ty=Tensor[(14, 12, 13), float64] */;
    %83 = reshape(%82, newshape=[14, 12, 13]) /* ty=Tensor[(14, 12, 13), float64] */;
    %84 = @func_2161() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) */;
    %85 = @func_810() /* ty=(Tensor[(14, 12, 13), uint32],) */;
    %86 = %78.9;
    %87 = %79.1;
    %88 = %80.1;
    %89 = @func_4609(%83) /* ty=Tensor[(14, 12, 13), int64] */;
    %90 = %84.1;
    %91 = %85.0;
    %92 = @func_1768() /* ty=Tensor[(14, 12, 13), float64] */;
    (%81, %86, %var_6793, meta[relay.Constant][3] /* ty=Tensor[(50), uint64] */, %87, %88, %89, %90, %91, %92)
  };
  %93(%var_6918) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(10, 5), uint64], uint64, Tensor[(50), uint64], Tensor[(11, 11, 12), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), int64], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) */
}

def @func_7622() -> (Tensor[(14, 12, 13), float64],) {
  %96 = fn () -> (Tensor[(14, 12, 13), float64],) {
    %94 = @func_6183() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) */;
    %95 = %94.0;
    (%95,)
  };
  %96() /* ty=(Tensor[(14, 12, 13), float64],) */
}

def @func_8186(%var_8185: Tensor[(6, 16, 1), float64]) -> (Tensor[(14, 12, 13), float64], Tensor[(6, 16, ?), bool], Tensor[(6, 16, ?), float32], Tensor[(14, 12, 13), float64]) {
  %125 = fn (%var_8106: Tensor[(6, 16, 1), float64]) -> (Tensor[(14, 12, 13), float64], Tensor[(6, 16, ?), bool], Tensor[(6, 16, ?), float32], Tensor[(14, 12, 13), float64]) {
    %97 = cast(%var_8106, dtype="float64") /* ty=Tensor[(6, 16, 1), float64] */;
    %98 = sigmoid(%97) /* ty=Tensor[(6, 16, 1), float64] */;
    %99 = cast(%98, dtype="float32") /* ty=Tensor[(6, 16, 1), float32] */;
    %100 = log10(%99) /* ty=Tensor[(6, 16, 1), float32] */;
    %101 = cast(%100, dtype="int8") /* ty=Tensor[(6, 16, 1), int8] */;
    %102 = shape_of(%98, dtype="int32") /* ty=Tensor[(3), int32] */;
    %103 = cast(%98, dtype="int8") /* ty=Tensor[(6, 16, 1), int8] */;
    %104 = dyn.reshape(%101, %102, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %105 = minimum(%103, %104) /* ty=Tensor[(6, 16, ?), int8] */;
    %106 = cast(%100, dtype="bool") /* ty=Tensor[(6, 16, 1), bool] */;
    %107 = shape_of(%105, dtype="int32") /* ty=Tensor[(3), int32] */;
    %108 = cast(%105, dtype="bool") /* ty=Tensor[(6, 16, ?), bool] */;
    %109 = dyn.reshape(%106, %107, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %110 = cast(%98, dtype="bool") /* ty=Tensor[(6, 16, 1), bool] */;
    %111 = shape_of(%100, dtype="int32") /* ty=Tensor[(3), int32] */;
    %112 = cast(%100, dtype="bool") /* ty=Tensor[(6, 16, 1), bool] */;
    %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %114 = equal(%112, %113) /* ty=Tensor[(6, 16, ?), bool] */;
    %115 = cast(%100, dtype="float64") /* ty=Tensor[(6, 16, 1), float64] */;
    %116 = shape_of(%114, dtype="int32") /* ty=Tensor[(3), int32] */;
    %117 = cast(%114, dtype="float64") /* ty=Tensor[(6, 16, ?), float64] */;
    %118 = dyn.reshape(%115, %116, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %119 = power(%117, %118) /* ty=Tensor[(6, 16, ?), float64] */;
    %120 = cast(%119, dtype="float32") /* ty=Tensor[(6, 16, ?), float32] */;
    %121 = @func_7340() /* ty=Tensor[(14, 12, 13), float64] */;
    %122 = less_equal(%108, %109) /* ty=Tensor[(6, 16, ?), bool] */;
    %123 = asin(%120) /* ty=Tensor[(6, 16, ?), float32] */;
    %124 = @func_6354() /* ty=Tensor[(14, 12, 13), float64] */;
    (%121, %122, %123, %124)
  };
  %125(%var_8185) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(6, 16, ?), bool], Tensor[(6, 16, ?), float32], Tensor[(14, 12, 13), float64]) */
}

def @func_4612(%var_4610: Tensor[(14, 12, 13), float64]) -> Tensor[(14, 12, 13), int64] {
  @func_4609(%var_4610) /* ty=Tensor[(14, 12, 13), int64] */
}

def @func_10390() -> Tensor[(14, 12, 13), uint32] {
  %126 = @func_8267() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) */;
  %126.0
}

def @func_6261() -> (Tensor[(14, 12, 13), uint32],) {
  %127 = @func_778() /* ty=Tensor[(14, 12, 13), uint32] */;
  (%127,)
}

def @func_1769() -> Tensor[(14, 12, 13), float64] {
  %128 = fn () -> Tensor[(14, 12, 13), float64] {
    @func_1229() /* ty=Tensor[(14, 12, 13), float64] */
  };
  %128() /* ty=Tensor[(14, 12, 13), float64] */
}

def @func_1756() -> Tensor[(14, 12, 13), uint32] {
  @func_1754() /* ty=Tensor[(14, 12, 13), uint32] */
}

def @func_2251() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) {
  @func_2249() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */
}

def @func_7434() -> Tensor[(14, 12, 13), float64] {
  @func_7432() /* ty=Tensor[(14, 12, 13), float64] */
}

def @func_3846() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) {
  @func_3844() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) */
}

def @func_10089() -> (Tensor[(14, 12, 13), float64],) {
  %133 = fn () -> (Tensor[(14, 12, 13), float64],) {
    %129 = @func_7955() /* ty=(Tensor[(14, 12, 13), uint32],) */;
    %130 = %129.0;
    %131 = cast(%130, dtype="float64") /* ty=Tensor[(14, 12, 13), float64] */;
    %132 = log10(%131) /* ty=Tensor[(14, 12, 13), float64] */;
    (%132,)
  };
  %133() /* ty=(Tensor[(14, 12, 13), float64],) */
}

def @func_2697() -> Tensor[(14, 12, 13), float64] {
  %134 = fn () -> Tensor[(14, 12, 13), float64] {
    @func_1229() /* ty=Tensor[(14, 12, 13), float64] */
  };
  %134() /* ty=Tensor[(14, 12, 13), float64] */
}

def @func_9687(%var_9685: Tensor[(50), uint64]) -> (Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(1, 168), float32], Tensor[(50), uint64]) {
  @func_9684(%var_9685) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(1, 168), float32], Tensor[(50), uint64]) */
}

def @func_7849() -> (Tensor[(14, 12, 13), float64],) {
  %137 = fn () -> (Tensor[(14, 12, 13), float64],) {
    %135 = @func_3280() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(168), float32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
    %136 = %135.0;
    (%136,)
  };
  %137() /* ty=(Tensor[(14, 12, 13), float64],) */
}

def @func_1056() -> Tensor[(14, 12, 13), float64] {
  %145 = fn () -> Tensor[(14, 12, 13), float64] {
    %138 = @func_810() /* ty=(Tensor[(14, 12, 13), uint32],) */;
    %139 = %138.0;
    %140 = @func_778() /* ty=Tensor[(14, 12, 13), uint32] */;
    %141 = cast(%140, dtype="float64") /* ty=Tensor[(14, 12, 13), float64] */;
    %142 = shape_of(%139, dtype="int32") /* ty=Tensor[(3), int32] */;
    %143 = cast(%139, dtype="float64") /* ty=Tensor[(14, 12, 13), float64] */;
    %144 = dyn.reshape(%141, %142, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    floor_divide(%143, %144) /* ty=Tensor[(14, 12, 13), float64] */
  };
  %145() /* ty=Tensor[(14, 12, 13), float64] */
}

def @func_5029() -> Tensor[(14, 12, 13), float64] {
  %146 = @func_2524() /* ty=(Tensor[(14, 12, 13), int32], Tensor[(14, 12, 13), float64]) */;
  %146.1
}

def @func_9984() -> Tensor[(14, 12, 13), float64] {
  @func_7188() /* ty=Tensor[(14, 12, 13), float64] */
}

def @func_10960() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) {
  %147 = @func_6354() /* ty=Tensor[(14, 12, 13), float64] */;
  %148 = cast(%147, dtype="float64") /* ty=Tensor[(14, 12, 13), float64] */;
  %149 = reshape(%148, newshape=[14, 12, 13]) /* ty=Tensor[(14, 12, 13), float64] */;
  %150 = @func_2878(%149) /* ty=(Tensor[(14, 12, 13), float32], Tensor[(1, 168), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), bool]) */;
  %151 = @func_9974() /* ty=Tensor[(14, 12, 13), float64] */;
  %152 = @func_1754() /* ty=Tensor[(14, 12, 13), uint32] */;
  %153 = %150.2;
  (%147, %151, %152, %153)
}

def @func_9910(%var_9909: Tensor[(10, 8, 16), float64]) -> Tensor[(10, 8, 16), float64] {
  %155 = fn (%var_9898: Tensor[(10, 8, 16), float64]) -> Tensor[(10, 8, 16), float64] {
    %154 = cast(%var_9898, dtype="float64") /* ty=Tensor[(10, 8, 16), float64] */;
    sinh(%154) /* ty=Tensor[(10, 8, 16), float64] */
  };
  %155(%var_9909) /* ty=Tensor[(10, 8, 16), float64] */
}

def @func_6422(%var_6420: Tensor[(6, 28), float32]) -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(15, 4, ?), bool], Tensor[(6, 28), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(168), float32]) {
  @func_6419(%var_6420) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(15, 4, ?), bool], Tensor[(6, 28), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(168), float32]) */
}

def @func_6627() -> Tensor[(14, 12, 13), uint32] {
  %157 = fn () -> Tensor[(14, 12, 13), uint32] {
    %156 = @func_4203() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(2, 15, 9), float64], Tensor[(270), uint8]) */;
    %156.0
  };
  %157() /* ty=Tensor[(14, 12, 13), uint32] */
}

def @func_6123(%var_6082: float64, %var_6083: Tensor[(9, 13, 12), float64]) -> (Tensor[(9, 13, 12), float64], Tensor[(9, 13, 12), float64]) {
  %158 = cast(%var_6082, dtype="float64") /* ty=float64 */;
  %159 = cast(%var_6083, dtype="float64") /* ty=Tensor[(9, 13, 12), float64] */;
  %160 = cast(%var_6083, dtype="float64") /* ty=Tensor[(9, 13, 12), float64] */;
  %161 = minimum(%158, %159) /* ty=Tensor[(9, 13, 12), float64] */;
  %162 = atan(%160) /* ty=Tensor[(9, 13, 12), float64] */;
  (%161, %162)
}

def @func_10618(%var_10616: Tensor[(56), float32], %var_10617: Tensor[(728), float32]) -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(270), float64], Tensor[(4, 13, 14), float32], Tensor[(56), float32], Tensor[(728), float32], Tensor[(168), float32], Tensor[(168), float32]) {
  @func_10614(%var_10616, %var_10617) /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(270), float64], Tensor[(4, 13, 14), float32], Tensor[(56), float32], Tensor[(728), float32], Tensor[(168), float32], Tensor[(168), float32]) */
}

def @func_2525() -> (Tensor[(14, 12, 13), int32], Tensor[(14, 12, 13), float64]) {
  %165 = fn () -> (Tensor[(14, 12, 13), int32], Tensor[(14, 12, 13), float64]) {
    %163 = @func_1533() /* ty=Tensor[(14, 12, 13), int32] */;
    %164 = @func_1081() /* ty=Tensor[(14, 12, 13), float64] */;
    (%163, %164)
  };
  %165() /* ty=(Tensor[(14, 12, 13), int32], Tensor[(14, 12, 13), float64]) */
}

def @func_2249() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) {
  %166 = @func_1055() /* ty=Tensor[(14, 12, 13), float64] */;
  %167 = cast(%166, dtype="float64") /* ty=Tensor[(14, 12, 13), float64] */;
  %168 = reshape(%167, newshape=[14, 12, 13]) /* ty=Tensor[(14, 12, 13), float64] */;
  %169 = @func_1454(%168) /* ty=(Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), float64]) */;
  %170 = %169.1;
  (%166, %170)
}

def @func_11388() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(3, 50), int32], Tensor[(150), float32]) {
  @func_11386() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(3, 50), int32], Tensor[(150), float32]) */
}

def @func_12028() -> (Tensor[(14, 12, 13), uint32],) {
  %172 = fn () -> (Tensor[(14, 12, 13), uint32],) {
    %171 = @func_825() /* ty=Tensor[(14, 12, 13), uint32] */;
    (%171,)
  };
  %172() /* ty=(Tensor[(14, 12, 13), uint32],) */
}

def @func_6770(%var_6768: Tensor[(3, 11, 7), uint16], %var_6769: Tensor[(3, 11, 7), uint16]) -> Tensor[(3, 11, 7), uint16] {
  @func_6766(%var_6768, %var_6769) /* ty=Tensor[(3, 11, 7), uint16] */
}

def @func_12440() -> (Tensor[(14, 12, 13), uint32],) {
  %175 = fn () -> (Tensor[(14, 12, 13), uint32],) {
    %173 = @func_12027() /* ty=(Tensor[(14, 12, 13), uint32],) */;
    %174 = %173.0;
    (%174,)
  };
  %175() /* ty=(Tensor[(14, 12, 13), uint32],) */
}

def @func_11718() -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) {
  %176 = @func_5187() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %177 = @func_7716() /* ty=(Tensor[(14, 12, 13), float64],) */;
  %178 = %176.0;
  %179 = %177.0;
  (%178, %179)
}

def @func_8346() -> (Tensor[(270), uint8], Tensor[(14, 12, 13), float64]) {
  %183 = fn () -> (Tensor[(270), uint8], Tensor[(14, 12, 13), float64]) {
    %180 = @func_1584() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) */;
    %181 = @func_4978() /* ty=Tensor[(270), uint8] */;
    %182 = %180.0;
    (%181, %182)
  };
  %183() /* ty=(Tensor[(270), uint8], Tensor[(14, 12, 13), float64]) */
}

def @func_10867() -> Tensor[(14, 12, 13), float64] {
  @func_1081() /* ty=Tensor[(14, 12, 13), float64] */
}

def @func_10480() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), uint32]) {
  %184 = @func_2161() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) */;
  %185 = @func_7432() /* ty=Tensor[(14, 12, 13), float64] */;
  %186 = @func_2942() /* ty=Tensor[(14, 12, 13), float32] */;
  %187 = %184.1;
  (%185, %186, %187)
}

def @func_992(%var_988: uint64) -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(5, 10, 1), bool], uint64, Tensor[(1, 50), uint64]) {
  %188 = @func_810() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %189 = cast(%var_988, dtype="uint64") /* ty=uint64 */;
  %190 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 50), uint64] */, dtype="uint64") /* ty=Tensor[(1, 50), uint64] */;
  %191 = reshape(%189, newshape=[]) /* ty=uint64 */;
  %192 = reshape(%190, newshape=[5, 10, 1]) /* ty=Tensor[(5, 10, 1), uint64] */;
  %193 = @func_408(%191, %192) /* ty=(Tensor[(5, 10, 1), bool], Tensor[(15, 4, ?), bool], Tensor[(3, 20), int16]) */;
  %194 = %188.0;
  %195 = @func_778() /* ty=Tensor[(14, 12, 13), uint32] */;
  %196 = %193.0;
  (%194, %195, %196, %var_988, meta[relay.Constant][4] /* ty=Tensor[(1, 50), uint64] */)
}

def @func_10761() -> Tensor[(14, 12, 13), uint32] {
  @func_6339() /* ty=Tensor[(14, 12, 13), uint32] */
}

def @func_3627() -> Tensor[(270), uint8] {
  @func_3625() /* ty=Tensor[(270), uint8] */
}

def @func_9784() -> Tensor[(3, 50), float32] {
  %201 = fn () -> Tensor[(3, 50), float32] {
    %197 = @func_7409() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(11, 11, 12), float64], Tensor[(14, 12, 13), float64], Tensor[(273), float64], Tensor[(168), float32], Tensor[(168), float32], Tensor[(1, 50), float32], Tensor[(14, 12, 13), uint32]) */;
    %198 = %197.6;
    %199 = cast(%198, dtype="float32") /* ty=Tensor[(1, 50), float32] */;
    %200 = cast(meta[relay.Constant][5] /* ty=Tensor[(3, 50), float32] */, dtype="float32") /* ty=Tensor[(3, 50), float32] */;
    divide(%199, %200) /* ty=Tensor[(3, 50), float32] */
  };
  %201() /* ty=Tensor[(3, 50), float32] */
}

def @func_6185() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) {
  @func_6183() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) */
}

def @func_10402() -> (Tensor[(14, 12, 13), float32],) {
  %203 = fn () -> (Tensor[(14, 12, 13), float32],) {
    %202 = @func_2942() /* ty=Tensor[(14, 12, 13), float32] */;
    (%202,)
  };
  %203() /* ty=(Tensor[(14, 12, 13), float32],) */
}

def @func_6127(%var_6125: float64, %var_6126: Tensor[(9, 13, 12), float64]) -> (Tensor[(9, 13, 12), float64], Tensor[(9, 13, 12), float64]) {
  @func_6123(%var_6125, %var_6126) /* ty=(Tensor[(9, 13, 12), float64], Tensor[(9, 13, 12), float64]) */
}

def @func_11684() -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) {
  @func_11682() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) */
}

def @func_12772() -> Tensor[(14, 12, 13), float32] {
  %204 = @func_10401() /* ty=(Tensor[(14, 12, 13), float32],) */;
  %204.0
}

def @func_5238() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) {
  %209 = fn () -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) {
    %205 = @func_2249() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
    %206 = @func_810() /* ty=(Tensor[(14, 12, 13), uint32],) */;
    %207 = %205.0;
    %208 = %206.0;
    (%207, %208)
  };
  %209() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) */
}

def @func_6566() -> (Tensor[(14, 12, 13), float64], uint64, uint64, Tensor[(50, 1), float64]) {
  %220 = fn () -> (Tensor[(14, 12, 13), float64], uint64, uint64, Tensor[(50, 1), float64]) {
    %210 = @func_910() /* ty=(Tensor[(14, 12, 13), float64],) */;
    %211 = cast(meta[relay.Constant][6] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %212 = cast(meta[relay.Constant][7] /* ty=Tensor[(50, 1), uint64] */, dtype="uint64") /* ty=Tensor[(50, 1), uint64] */;
    %213 = reshape(%211, newshape=[]) /* ty=uint64 */;
    %214 = reshape(%212, newshape=[10, 5]) /* ty=Tensor[(10, 5), uint64] */;
    %215 = @func_1920(%213, %214) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(15, 4, ?), bool], uint64, Tensor[(10, 5), uint64]) */;
    %216 = cast(meta[relay.Constant][7] /* ty=Tensor[(50, 1), uint64] */, dtype="float64") /* ty=Tensor[(50, 1), float64] */;
    %217 = %210.0;
    %218 = %215.2;
    %219 = atanh(%216) /* ty=Tensor[(50, 1), float64] */;
    (%217, %218, meta[relay.Constant][6] /* ty=uint64 */, %219)
  };
  %220() /* ty=(Tensor[(14, 12, 13), float64], uint64, uint64, Tensor[(50, 1), float64]) */
}

def @func_1136(%var_1103: Tensor[(168), float32]) -> (Tensor[(14, 12, 13), float64], Tensor[(15, 4, ?), bool], Tensor[(168), float32], Tensor[(15, 4, ?), bool]) {
  %221 = cast(%var_1103, dtype="float32") /* ty=Tensor[(168), float32] */;
  %222 = reshape(%221, newshape=[6, 2, 14]) /* ty=Tensor[(6, 2, 14), float32] */;
  %223 = @func_624(%222) /* ty=(Tensor[(15, 4, ?), bool], Tensor[(60, 1), int16], Tensor[(15, 4, ?), bool], Tensor[(6, 2, 14), int32], Tensor[(3, 20), int16], uint64, Tensor[(50), uint64], Tensor[(15, 4, ?), bool], Tensor[(15, 4, ?), bool], Tensor[(15, 4, ?), bool], Tensor[(15, 4, ?), bool], Tensor[(6, 2, 14), float64]) */;
  %224 = %223.0;
  %225 = cast(%224, dtype="int16") /* ty=Tensor[(15, 4, ?), int16] */;
  %226 = cast(%224, dtype="int16") /* ty=Tensor[(15, 4, ?), int16] */;
  %227 = reshape(%225, newshape=[15, 4, 1]) /* ty=Tensor[(15, 4, 1), int16] */;
  %228 = reshape(%226, newshape=[15, 4, 1]) /* ty=Tensor[(15, 4, 1), int16] */;
  %229 = @func_316(%227, %228) /* ty=(Tensor[(15, 4, ?), bool],) */;
  %230 = @func_1081() /* ty=Tensor[(14, 12, 13), float64] */;
  %231 = %229.0;
  (%230, %224, %var_1103, %231)
}

def @func_8221() -> (Tensor[(14, 12, 13), uint32],) {
  %232 = @func_5187() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %233 = %232.0;
  (%233,)
}

def @func_5909(%var_5907: Tensor[(168), float32]) -> (Tensor[(14, 12, 13), uint32], Tensor[(168), float32], Tensor[(168), float32]) {
  @func_5906(%var_5907) /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(168), float32], Tensor[(168), float32]) */
}

def @func_4204() -> (Tensor[(14, 12, 13), uint32], Tensor[(2, 15, 9), float64], Tensor[(270), uint8]) {
  %241 = fn () -> (Tensor[(14, 12, 13), uint32], Tensor[(2, 15, 9), float64], Tensor[(270), uint8]) {
    %234 = @func_2161() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) */;
    %235 = cast(meta[relay.Constant][8] /* ty=Tensor[(270), uint8] */, dtype="uint8") /* ty=Tensor[(270), uint8] */;
    %236 = cast(meta[relay.Constant][8] /* ty=Tensor[(270), uint8] */, dtype="uint8") /* ty=Tensor[(270), uint8] */;
    %237 = reshape(%235, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), uint8] */;
    %238 = reshape(%236, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), uint8] */;
    %239 = %234.1;
    %240 = @func_870(%237, %238) /* ty=Tensor[(2, 15, 9), float64] */;
    (%239, %240, meta[relay.Constant][8] /* ty=Tensor[(270), uint8] */)
  };
  %241() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(2, 15, 9), float64], Tensor[(270), uint8]) */
}

def @func_4440(%var_4429: Tensor[(11, 6, 1), int64]) -> (Tensor[(11, 6, 5), int64], Tensor[(11, 6, 5), bool]) {
  %242 = cast(%var_4429, dtype="int64") /* ty=Tensor[(11, 6, 1), int64] */;
  %243 = cast(meta[relay.Constant][9] /* ty=Tensor[(11, 6, 5), int64] */, dtype="int64") /* ty=Tensor[(11, 6, 5), int64] */;
  %244 = cast(%var_4429, dtype="bool") /* ty=Tensor[(11, 6, 1), bool] */;
  %245 = cast(meta[relay.Constant][9] /* ty=Tensor[(11, 6, 5), int64] */, dtype="bool") /* ty=Tensor[(11, 6, 5), bool] */;
  %246 = left_shift(%242, %243) /* ty=Tensor[(11, 6, 5), int64] */;
  %247 = greater(%244, %245) /* ty=Tensor[(11, 6, 5), bool] */;
  (%246, %247)
}

def @func_2163() -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) {
  @func_2161() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) */
}

def @func_8890() -> (Tensor[(14, 12, 13), float64],) {
  %248 = @func_5702() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
  %249 = %248.0;
  (%249,)
}

def @func_11720() -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) {
  @func_11718() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) */
}

def @func_320(%var_318: Tensor[(15, 4, 1), int16], %var_319: Tensor[(15, 4, 1), int16]) -> (Tensor[(15, 4, ?), bool],) {
  @func_316(%var_318, %var_319) /* ty=(Tensor[(15, 4, ?), bool],) */
}

def @func_4132() -> (Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), float32]) {
  @func_4130() /* ty=(Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), float32]) */
}

def @func_12718() -> (Tensor[(11, 11, 12), float32],) {
  %251 = fn () -> (Tensor[(11, 11, 12), float32],) {
    %250 = @func_5041() /* ty=Tensor[(11, 11, 12), float32] */;
    (%250,)
  };
  %251() /* ty=(Tensor[(11, 11, 12), float32],) */
}

def @func_780() -> Tensor[(14, 12, 13), uint32] {
  @func_778() /* ty=Tensor[(14, 12, 13), uint32] */
}

def @func_5088(%var_5087: Tensor[(13, 3, 7), float64]) -> (Tensor[(13, 3, 7), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) {
  %257 = fn (%var_5062: Tensor[(13, 3, 7), float64]) -> (Tensor[(13, 3, 7), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) {
    %252 = cast(%var_5062, dtype="float64") /* ty=Tensor[(13, 3, 7), float64] */;
    %253 = @func_3706() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(15, 4, ?), bool]) */;
    %254 = sigmoid(%252) /* ty=Tensor[(13, 3, 7), float64] */;
    %255 = %253.2;
    %256 = @func_1055() /* ty=Tensor[(14, 12, 13), float64] */;
    (%254, %255, %256)
  };
  %257(%var_5087) /* ty=(Tensor[(13, 3, 7), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */
}

def @func_1289(%var_1267: Tensor[(270, 1), uint8]) -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(2, 15, 9), float64], Tensor[(270, 1), uint8], Tensor[(14, 12, 13), float64]) {
  %258 = cast(%var_1267, dtype="uint8") /* ty=Tensor[(270, 1), uint8] */;
  %259 = cast(%var_1267, dtype="uint8") /* ty=Tensor[(270, 1), uint8] */;
  %260 = reshape(%258, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), uint8] */;
  %261 = reshape(%259, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), uint8] */;
  %262 = @func_778() /* ty=Tensor[(14, 12, 13), uint32] */;
  %263 = @func_1055() /* ty=Tensor[(14, 12, 13), float64] */;
  %264 = @func_1229() /* ty=Tensor[(14, 12, 13), float64] */;
  %265 = @func_870(%260, %261) /* ty=Tensor[(2, 15, 9), float64] */;
  %266 = @func_1229() /* ty=Tensor[(14, 12, 13), float64] */;
  (%262, %263, %264, %265, %var_1267, %266)
}

def @func_11750() -> Tensor[(14, 12, 13), uint32] {
  @func_11748() /* ty=Tensor[(14, 12, 13), uint32] */
}

def @func_8086() -> Tensor[(14, 12, 13), float64] {
  @func_8084() /* ty=Tensor[(14, 12, 13), float64] */
}

def @func_8016() -> Tensor[(270), uint8] {
  @func_4978() /* ty=Tensor[(270), uint8] */
}

def @func_8832(%var_8825: Tensor[(5, 13, 12), int64], %var_8826: Tensor[(5, 13, 12), int64], %var_8827: Tensor[(1, 56), float32], %var_8828: Tensor[(728), float32], %var_8829: Tensor[(168), float32], %var_8830: Tensor[(5, 13, 12), float64], %var_8831: Tensor[(270), uint8]) -> (Tensor[(4, 13, 14), float32], Tensor[(1, 56), float32], Tensor[(728), float32], Tensor[(168), float32], Tensor[(168), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(5, 13, 12), uint16], Tensor[(5, 13, 12), uint8], Tensor[(5, 13, 12), uint32], Tensor[(14, 12, 13), float64], Tensor[(270), uint8]) {
  %310 = fn (%var_8718: Tensor[(5, 13, 12), int64], %var_8719: Tensor[(5, 13, 12), int64], %var_8728: Tensor[(1, 56), float32], %var_8729: Tensor[(728), float32], %var_8752: Tensor[(168), float32], %var_8787: Tensor[(5, 13, 12), float64], %var_8812: Tensor[(270), uint8]) -> (Tensor[(4, 13, 14), float32], Tensor[(1, 56), float32], Tensor[(728), float32], Tensor[(168), float32], Tensor[(168), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(5, 13, 12), uint16], Tensor[(5, 13, 12), uint8], Tensor[(5, 13, 12), uint32], Tensor[(14, 12, 13), float64], Tensor[(270), uint8]) {
    %267 = cast(%var_8728, dtype="float32") /* ty=Tensor[(1, 56), float32] */;
    %268 = cast(%var_8729, dtype="float32") /* ty=Tensor[(728), float32] */;
    %269 = reshape(%267, newshape=[4, 1, 14]) /* ty=Tensor[(4, 1, 14), float32] */;
    %270 = reshape(%268, newshape=[4, 13, 14]) /* ty=Tensor[(4, 13, 14), float32] */;
    %271 = cast(%var_8752, dtype="float32") /* ty=Tensor[(168), float32] */;
    %272 = reshape(%271, newshape=[168]) /* ty=Tensor[(168), float32] */;
    %273 = @func_5906(%272) /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(168), float32], Tensor[(168), float32]) */;
    %274 = %273.1;
    %275 = cast(%274, dtype="float32") /* ty=Tensor[(168), float32] */;
    %276 = reshape(%275, newshape=[1, 168]) /* ty=Tensor[(1, 168), float32] */;
    %277 = @func_7304(%276) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(15, 4, 168), bool], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(15, 4, 168), int32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(1, 168), float32]) */;
    %278 = cast(%var_8719, dtype="int64") /* ty=Tensor[(5, 13, 12), int64] */;
    %279 = shape_of(%var_8718, dtype="int32") /* ty=Tensor[(3), int32] */;
    %280 = cast(%var_8718, dtype="int64") /* ty=Tensor[(5, 13, 12), int64] */;
    %281 = dyn.reshape(%278, %279, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %282 = left_shift(%280, %281) /* ty=Tensor[(5, 13, 12), int64] */;
    %283 = cast(%282, dtype="float64") /* ty=Tensor[(5, 13, 12), float64] */;
    %284 = tan(%283) /* ty=Tensor[(5, 13, 12), float64] */;
    %285 = cast(%284, dtype="float64") /* ty=Tensor[(5, 13, 12), float64] */;
    %286 = sigmoid(%285) /* ty=Tensor[(5, 13, 12), float64] */;
    %287 = cast(%var_8787, dtype="uint16") /* ty=Tensor[(5, 13, 12), uint16] */;
    %288 = shape_of(%286, dtype="int32") /* ty=Tensor[(3), int32] */;
    %289 = cast(%286, dtype="uint16") /* ty=Tensor[(5, 13, 12), uint16] */;
    %290 = dyn.reshape(%287, %288, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %291 = cast(%var_8718, dtype="uint8") /* ty=Tensor[(5, 13, 12), uint8] */;
    %292 = shape_of(%284, dtype="int32") /* ty=Tensor[(3), int32] */;
    %293 = cast(%284, dtype="uint8") /* ty=Tensor[(5, 13, 12), uint8] */;
    %294 = dyn.reshape(%291, %292, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %295 = cast(%282, dtype="uint32") /* ty=Tensor[(5, 13, 12), uint32] */;
    %296 = shape_of(%286, dtype="int32") /* ty=Tensor[(3), int32] */;
    %297 = cast(%286, dtype="uint32") /* ty=Tensor[(5, 13, 12), uint32] */;
    %298 = dyn.reshape(%295, %296, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %299 = cast(%var_8812, dtype="uint8") /* ty=Tensor[(270), uint8] */;
    %300 = reshape(%299, newshape=[270]) /* ty=Tensor[(270), uint8] */;
    %301 = @func_5148(%300) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(270), uint8], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
    %302 = @func_5871(%269, %270) /* ty=Tensor[(4, 13, 14), float32] */;
    %303 = @func_1191() /* ty=Tensor[(14, 12, 13), uint32] */;
    %304 = %277.5;
    %305 = @func_6626() /* ty=Tensor[(14, 12, 13), uint32] */;
    %306 = multiply(%289, %290) /* ty=Tensor[(5, 13, 12), uint16] */;
    %307 = bitwise_or(%293, %294) /* ty=Tensor[(5, 13, 12), uint8] */;
    %308 = bitwise_xor(%297, %298) /* ty=Tensor[(5, 13, 12), uint32] */;
    %309 = %301.4;
    (%302, %var_8728, %var_8729, %274, %var_8752, %303, %304, %305, %306, %307, %308, %309, %var_8812)
  };
  %310(%var_8825, %var_8826, %var_8827, %var_8828, %var_8829, %var_8830, %var_8831) /* ty=(Tensor[(4, 13, 14), float32], Tensor[(1, 56), float32], Tensor[(728), float32], Tensor[(168), float32], Tensor[(168), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(5, 13, 12), uint16], Tensor[(5, 13, 12), uint8], Tensor[(5, 13, 12), uint32], Tensor[(14, 12, 13), float64], Tensor[(270), uint8]) */
}

def @func_11272() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) {
  @func_11270() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) */
}

def @func_11938(%var_11937: Tensor[(5, 2, 3), float64]) -> Tensor[(5, 2, 3), float64] {
  %312 = fn (%var_11923: Tensor[(5, 2, 3), float64]) -> Tensor[(5, 2, 3), float64] {
    %311 = cast(%var_11923, dtype="float64") /* ty=Tensor[(5, 2, 3), float64] */;
    log10(%311) /* ty=Tensor[(5, 2, 3), float64] */
  };
  %312(%var_11937) /* ty=Tensor[(5, 2, 3), float64] */
}

def @func_6281() -> (Tensor[(14, 12, 13), float64],) {
  %315 = fn () -> (Tensor[(14, 12, 13), float64],) {
    %313 = @func_4351() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) */;
    %314 = %313.1;
    (%314,)
  };
  %315() /* ty=(Tensor[(14, 12, 13), float64],) */
}

def @func_10763() -> Tensor[(14, 12, 13), uint32] {
  @func_10761() /* ty=Tensor[(14, 12, 13), uint32] */
}

def @func_11151() -> Tensor[(14, 12, 13), float64] {
  @func_11149() /* ty=Tensor[(14, 12, 13), float64] */
}

def @func_4978() -> Tensor[(270), uint8] {
  @func_4711() /* ty=Tensor[(270), uint8] */
}

def @func_2433(%var_2362: uint64, %var_2405: Tensor[(10, 5), uint64]) -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], uint64, Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(60), int16], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(10, 5), uint64], Tensor[(10, 5), uint64], Tensor[(14, 12, 13), uint32], Tensor[(3, 20), int16], Tensor[(15, 4, 168), float32]) {
  %316 = @func_810() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %317 = cast(%var_2362, dtype="uint64") /* ty=uint64 */;
  %318 = reshape(%317, newshape=[]) /* ty=uint64 */;
  %319 = @func_992(%318) /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(5, 10, 1), bool], uint64, Tensor[(1, 50), uint64]) */;
  %320 = cast(meta[relay.Constant][10] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %321 = reshape(%320, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %322 = @func_1642(%321) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float32]) */;
  %323 = cast(meta[relay.Constant][10] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %324 = reshape(%323, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %325 = @func_1733(%324) /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(168), float32], Tensor[(168), float32], Tensor[(14, 12, 13), float32]) */;
  %326 = @func_910() /* ty=(Tensor[(14, 12, 13), float64],) */;
  %327 = @func_810() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %328 = cast(%var_2362, dtype="uint64") /* ty=uint64 */;
  %329 = cast(%var_2405, dtype="uint64") /* ty=Tensor[(10, 5), uint64] */;
  %330 = reshape(%328, newshape=[]) /* ty=uint64 */;
  %331 = reshape(%329, newshape=[10, 5]) /* ty=Tensor[(10, 5), uint64] */;
  %332 = @func_1920(%330, %331) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(15, 4, ?), bool], uint64, Tensor[(10, 5), uint64]) */;
  %333 = cast(%var_2362, dtype="uint64") /* ty=uint64 */;
  %334 = cast(%var_2405, dtype="uint64") /* ty=Tensor[(10, 5), uint64] */;
  %335 = reshape(%333, newshape=[]) /* ty=uint64 */;
  %336 = reshape(%334, newshape=[5, 10, 1]) /* ty=Tensor[(5, 10, 1), uint64] */;
  %337 = @func_408(%335, %336) /* ty=(Tensor[(5, 10, 1), bool], Tensor[(15, 4, ?), bool], Tensor[(3, 20), int16]) */;
  %338 = cast(meta[relay.Constant][11] /* ty=Tensor[(60), int16] */, dtype="int16") /* ty=Tensor[(60), int16] */;
  %339 = cast(meta[relay.Constant][11] /* ty=Tensor[(60), int16] */, dtype="int16") /* ty=Tensor[(60), int16] */;
  %340 = reshape(%338, newshape=[15, 4, 1]) /* ty=Tensor[(15, 4, 1), int16] */;
  %341 = reshape(%339, newshape=[15, 4, 1]) /* ty=Tensor[(15, 4, 1), int16] */;
  %342 = @func_316(%340, %341) /* ty=(Tensor[(15, 4, ?), bool],) */;
  %343 = %342.0;
  %344 = cast(meta[relay.Constant][10] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %345 = cast(%343, dtype="float32") /* ty=Tensor[(15, 4, ?), float32] */;
  %346 = %316.0;
  %347 = %319.1;
  %348 = %322.0;
  %349 = %325.0;
  %350 = %326.0;
  %351 = %327.0;
  %352 = %332.3;
  %353 = @func_1191() /* ty=Tensor[(14, 12, 13), uint32] */;
  %354 = %337.2;
  %355 = floor_mod(%344, %345) /* ty=Tensor[(15, 4, 168), float32] */;
  (%346, %347, %var_2362, %348, %349, meta[relay.Constant][11] /* ty=Tensor[(60), int16] */, %350, %351, %352, %var_2405, %353, %354, %355)
}

def @func_5703() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) {
  %359 = fn () -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) {
    %356 = @func_910() /* ty=(Tensor[(14, 12, 13), float64],) */;
    %357 = @func_1081() /* ty=Tensor[(14, 12, 13), float64] */;
    %358 = %356.0;
    (%357, %358)
  };
  %359() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */
}

def @func_995(%var_993: uint64) -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(5, 10, 1), bool], uint64, Tensor[(1, 50), uint64]) {
  @func_992(%var_993) /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(5, 10, 1), bool], uint64, Tensor[(1, 50), uint64]) */
}

def @func_8508(%var_8489: Tensor[(50), uint64]) -> (Tensor[(14, 12, 13), uint32], Tensor[(168), float32], Tensor[(168), float32], Tensor[(14, 12, 13), float64], Tensor[(50), uint64], Tensor[(14, 12, 13), float64]) {
  %360 = @func_7774() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) */;
  %361 = cast(meta[relay.Constant][12] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %362 = reshape(%361, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %363 = @func_2817(%362) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(168), float32]) */;
  %364 = cast(meta[relay.Constant][12] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %365 = cast(%var_8489, dtype="uint64") /* ty=Tensor[(50), uint64] */;
  %366 = reshape(%364, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %367 = reshape(%365, newshape=[50]) /* ty=Tensor[(50), uint64] */;
  %368 = @func_2622(%366, %367) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(168), float32], Tensor[(3, 20), int16], uint64, Tensor[(50), uint64]) */;
  %369 = %360.1;
  %370 = %363.2;
  %371 = %368.0;
  %372 = @func_7340() /* ty=Tensor[(14, 12, 13), float64] */;
  (%369, %370, meta[relay.Constant][12] /* ty=Tensor[(168), float32] */, %371, %var_8489, %372)
}

def @func_11851(%var_11850: Tensor[(11, 13, 7), int32]) -> Tensor[(11, 13, 7), float32] {
  %379 = fn (%var_11834: Tensor[(11, 13, 7), int32]) -> Tensor[(11, 13, 7), float32] {
    %373 = cast(%var_11834, dtype="int32") /* ty=Tensor[(11, 13, 7), int32] */;
    %374 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(11, 13, 7), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %375 = cast(meta[relay.Constant][13] /* ty=Tensor[(11, 13, 7), int32] */, dtype="int32") /* ty=Tensor[(11, 13, 7), int32] */;
    %376 = dyn.reshape(%373, %374, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %377 = multiply(%375, %376) /* ty=Tensor[(11, 13, 7), int32] */;
    %378 = cast(%377, dtype="float32") /* ty=Tensor[(11, 13, 7), float32] */;
    exp(%378) /* ty=Tensor[(11, 13, 7), float32] */
  };
  %379(%var_11850) /* ty=Tensor[(11, 13, 7), float32] */
}

def @func_7697() -> (Tensor[(14, 12, 13), uint32], Tensor[(15, 4, 168), bool], Tensor[(168), float32], Tensor[(14, 12, 13), float64], Tensor[(270), uint8]) {
  %380 = @func_1493() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) */;
  %381 = cast(meta[relay.Constant][14] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %382 = reshape(%381, newshape=[1, 168]) /* ty=Tensor[(1, 168), float32] */;
  %383 = @func_7304(%382) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(15, 4, 168), bool], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(15, 4, 168), int32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(1, 168), float32]) */;
  %384 = %380.1;
  %385 = %383.2;
  %386 = @func_2696() /* ty=Tensor[(14, 12, 13), float64] */;
  %387 = @func_3625() /* ty=Tensor[(270), uint8] */;
  (%384, %385, meta[relay.Constant][14] /* ty=Tensor[(168), float32] */, %386, %387)
}

def @func_5970() -> (Tensor[(14, 12, 13), float64],) {
  %390 = fn () -> (Tensor[(14, 12, 13), float64],) {
    %388 = @func_3280() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(168), float32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
    %389 = %388.4;
    (%389,)
  };
  %390() /* ty=(Tensor[(14, 12, 13), float64],) */
}

def @func_826() -> Tensor[(14, 12, 13), uint32] {
  %391 = fn () -> Tensor[(14, 12, 13), uint32] {
    @func_778() /* ty=Tensor[(14, 12, 13), uint32] */
  };
  %391() /* ty=Tensor[(14, 12, 13), uint32] */
}

def @func_3442() -> (Tensor[(14, 12, 13), float64], Tensor[(1, 50), bool], Tensor[(1, 50), float32], Tensor[(14, 12, 13), float64], Tensor[(270), uint8]) {
  %409 = fn () -> (Tensor[(14, 12, 13), float64], Tensor[(1, 50), bool], Tensor[(1, 50), float32], Tensor[(14, 12, 13), float64], Tensor[(270), uint8]) {
    %392 = @func_2524() /* ty=(Tensor[(14, 12, 13), int32], Tensor[(14, 12, 13), float64]) */;
    %393 = cast(meta[relay.Constant][15] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %394 = reshape(%393, newshape=[]) /* ty=uint64 */;
    %395 = @func_992(%394) /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(5, 10, 1), bool], uint64, Tensor[(1, 50), uint64]) */;
    %396 = %395.4;
    %397 = cast(%396, dtype="float32") /* ty=Tensor[(1, 50), float32] */;
    %398 = acosh(%397) /* ty=Tensor[(1, 50), float32] */;
    %399 = cast(%398, dtype="bool") /* ty=Tensor[(1, 50), bool] */;
    %400 = cast(meta[relay.Constant][15] /* ty=uint64 */, dtype="bool") /* ty=bool */;
    %401 = cast(%396, dtype="float32") /* ty=Tensor[(1, 50), float32] */;
    %402 = cast(meta[relay.Constant][16] /* ty=Tensor[(270), uint8] */, dtype="uint8") /* ty=Tensor[(270), uint8] */;
    %403 = reshape(%402, newshape=[270, 1]) /* ty=Tensor[(270, 1), uint8] */;
    %404 = @func_1289(%403) /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(2, 15, 9), float64], Tensor[(270, 1), uint8], Tensor[(14, 12, 13), float64]) */;
    %405 = %392.1;
    %406 = equal(%399, %400) /* ty=Tensor[(1, 50), bool] */;
    %407 = sqrt(%401) /* ty=Tensor[(1, 50), float32] */;
    %408 = %404.5;
    (%405, %406, %407, %408, meta[relay.Constant][16] /* ty=Tensor[(270), uint8] */)
  };
  %409() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(1, 50), bool], Tensor[(1, 50), float32], Tensor[(14, 12, 13), float64], Tensor[(270), uint8]) */
}

def @func_1139(%var_1137: Tensor[(168), float32]) -> (Tensor[(14, 12, 13), float64], Tensor[(15, 4, ?), bool], Tensor[(168), float32], Tensor[(15, 4, ?), bool]) {
  @func_1136(%var_1137) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(15, 4, ?), bool], Tensor[(168), float32], Tensor[(15, 4, ?), bool]) */
}

def @func_7956() -> (Tensor[(14, 12, 13), uint32],) {
  %411 = fn () -> (Tensor[(14, 12, 13), uint32],) {
    %410 = @func_6339() /* ty=Tensor[(14, 12, 13), uint32] */;
    (%410,)
  };
  %411() /* ty=(Tensor[(14, 12, 13), uint32],) */
}

def @func_5417() -> Tensor[(14, 12, 13), float64] {
  %412 = @func_3595() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
  %412.2
}

def @func_2880(%var_2879: Tensor[(14, 12, 13), float64]) -> (Tensor[(14, 12, 13), float32], Tensor[(1, 168), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), bool]) {
  %430 = fn (%var_2873: Tensor[(14, 12, 13), float64]) -> (Tensor[(14, 12, 13), float32], Tensor[(1, 168), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), bool]) {
    %413 = cast(meta[relay.Constant][17] /* ty=Tensor[(1, 168), float32] */, dtype="float32") /* ty=Tensor[(1, 168), float32] */;
    %414 = reshape(%413, newshape=[168]) /* ty=Tensor[(168), float32] */;
    %415 = @func_1642(%414) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float32]) */;
    %416 = cast(meta[relay.Constant][17] /* ty=Tensor[(1, 168), float32] */, dtype="float32") /* ty=Tensor[(1, 168), float32] */;
    %417 = reshape(%416, newshape=[168]) /* ty=Tensor[(168), float32] */;
    %418 = @func_1733(%417) /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(168), float32], Tensor[(168), float32], Tensor[(14, 12, 13), float32]) */;
    %419 = @func_2249() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
    %420 = %419.1;
    %421 = cast(%420, dtype="float64") /* ty=Tensor[(14, 12, 13), float64] */;
    %422 = acosh(%421) /* ty=Tensor[(14, 12, 13), float64] */;
    %423 = cast(%var_2873, dtype="bool") /* ty=Tensor[(14, 12, 13), bool] */;
    %424 = shape_of(%422, dtype="int32") /* ty=Tensor[(3), int32] */;
    %425 = cast(%422, dtype="bool") /* ty=Tensor[(14, 12, 13), bool] */;
    %426 = dyn.reshape(%423, %424, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %427 = %415.3;
    %428 = %418.0;
    %429 = logical_and(%425, %426) /* ty=Tensor[(14, 12, 13), bool] */;
    (%427, meta[relay.Constant][17] /* ty=Tensor[(1, 168), float32] */, %428, %429)
  };
  %430(%var_2879) /* ty=(Tensor[(14, 12, 13), float32], Tensor[(1, 168), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), bool]) */
}

def @func_5310() -> (Tensor[(14, 12, 13), float64],) {
  @func_5308() /* ty=(Tensor[(14, 12, 13), float64],) */
}

def @func_11682() -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) {
  %431 = @func_5529() /* ty=Tensor[(14, 12, 13), uint32] */;
  %432 = @func_778() /* ty=Tensor[(14, 12, 13), uint32] */;
  (%431, %432)
}

def @func_11748() -> Tensor[(14, 12, 13), uint32] {
  %433 = @func_2161() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) */;
  %433.0
}

def @func_9890() -> Tensor[(14, 12, 13), float64] {
  @func_9888() /* ty=Tensor[(14, 12, 13), float64] */
}

def @func_5510(%var_5509: Tensor[(14, 12, 13), float64]) -> (Tensor[(11, 6, 5), bool], Tensor[(66), int64], Tensor[(14, 12, 13), bool], Tensor[(14, 12, 13), uint32]) {
  %446 = fn (%var_5493: Tensor[(14, 12, 13), float64]) -> (Tensor[(11, 6, 5), bool], Tensor[(66), int64], Tensor[(14, 12, 13), bool], Tensor[(14, 12, 13), uint32]) {
    %434 = cast(meta[relay.Constant][18] /* ty=Tensor[(66), int64] */, dtype="int64") /* ty=Tensor[(66), int64] */;
    %435 = reshape(%434, newshape=[11, 6, 1]) /* ty=Tensor[(11, 6, 1), int64] */;
    %436 = @func_4440(%435) /* ty=(Tensor[(11, 6, 5), int64], Tensor[(11, 6, 5), bool]) */;
    %437 = @func_1055() /* ty=Tensor[(14, 12, 13), float64] */;
    %438 = cast(%var_5493, dtype="bool") /* ty=Tensor[(14, 12, 13), bool] */;
    %439 = shape_of(%437, dtype="int32") /* ty=Tensor[(3), int32] */;
    %440 = cast(%437, dtype="bool") /* ty=Tensor[(14, 12, 13), bool] */;
    %441 = dyn.reshape(%438, %439, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %442 = @func_810() /* ty=(Tensor[(14, 12, 13), uint32],) */;
    %443 = %436.1;
    %444 = logical_or(%440, %441) /* ty=Tensor[(14, 12, 13), bool] */;
    %445 = %442.0;
    (%443, meta[relay.Constant][18] /* ty=Tensor[(66), int64] */, %444, %445)
  };
  %446(%var_5509) /* ty=(Tensor[(11, 6, 5), bool], Tensor[(66), int64], Tensor[(14, 12, 13), bool], Tensor[(14, 12, 13), uint32]) */
}

def @func_3706() -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(15, 4, ?), bool]) {
  %447 = @func_3595() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
  %448 = %447.1;
  %449 = cast(%448, dtype="float64") /* ty=Tensor[(14, 12, 13), float64] */;
  %450 = reshape(%449, newshape=[14, 12, 13]) /* ty=Tensor[(14, 12, 13), float64] */;
  %451 = @func_1454(%450) /* ty=(Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), float64]) */;
  %452 = @func_3123() /* ty=(Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(15, 4, ?), bool], Tensor[(6, 28), float32], Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), float64]) */;
  %453 = @func_1191() /* ty=Tensor[(14, 12, 13), uint32] */;
  %454 = %451.1;
  %455 = %452.3;
  (%453, %448, %454, %455)
}

def @func_5757() -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float32], Tensor[(168), float32]) {
  %462 = fn () -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float32], Tensor[(168), float32]) {
    %456 = @func_810() /* ty=(Tensor[(14, 12, 13), uint32],) */;
    %457 = cast(meta[relay.Constant][19] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
    %458 = reshape(%457, newshape=[168]) /* ty=Tensor[(168), float32] */;
    %459 = @func_1642(%458) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float32]) */;
    %460 = %456.0;
    %461 = %459.3;
    (%460, %461, meta[relay.Constant][19] /* ty=Tensor[(168), float32] */)
  };
  %462() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float32], Tensor[(168), float32]) */
}

def @func_3366() -> Tensor[(11, 11, 12), float64] {
  @func_3364() /* ty=Tensor[(11, 11, 12), float64] */
}

def @func_7189() -> Tensor[(14, 12, 13), float64] {
  %464 = fn () -> Tensor[(14, 12, 13), float64] {
    %463 = @func_3844() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) */;
    %463.0
  };
  %464() /* ty=Tensor[(14, 12, 13), float64] */
}

def @func_5874(%var_5872: Tensor[(4, 1, 14), float32], %var_5873: Tensor[(4, 13, 14), float32]) -> Tensor[(4, 13, 14), float32] {
  %467 = fn (%var_5862: Tensor[(4, 1, 14), float32], %var_5863: Tensor[(4, 13, 14), float32]) -> Tensor[(4, 13, 14), float32] {
    %465 = cast(%var_5862, dtype="float32") /* ty=Tensor[(4, 1, 14), float32] */;
    %466 = cast(%var_5863, dtype="float32") /* ty=Tensor[(4, 13, 14), float32] */;
    floor_mod(%465, %466) /* ty=Tensor[(4, 13, 14), float32] */
  };
  %467(%var_5872, %var_5873) /* ty=Tensor[(4, 13, 14), float32] */
}

def @func_8269() -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) {
  @func_8267() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) */
}

def @func_3364() -> Tensor[(11, 11, 12), float64] {
  %468 = cast(meta[relay.Constant][20] /* ty=Tensor[(11, 11, 12), float64] */, dtype="float64") /* ty=Tensor[(11, 11, 12), float64] */;
  acos(%468) /* ty=Tensor[(11, 11, 12), float64] */
}

def @func_810() -> (Tensor[(14, 12, 13), uint32],) {
  %469 = @func_778() /* ty=Tensor[(14, 12, 13), uint32] */;
  (%469,)
}

def @func_4546() -> Tensor[(14, 12, 13), float32] {
  %470 = @func_2524() /* ty=(Tensor[(14, 12, 13), int32], Tensor[(14, 12, 13), float64]) */;
  %471 = %470.0;
  %472 = cast(%471, dtype="float32") /* ty=Tensor[(14, 12, 13), float32] */;
  atan(%472) /* ty=Tensor[(14, 12, 13), float32] */
}

def @func_10482() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), uint32]) {
  @func_10480() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), uint32]) */
}

def @func_6263() -> (Tensor[(14, 12, 13), uint32],) {
  @func_6261() /* ty=(Tensor[(14, 12, 13), uint32],) */
}

def @func_4713() -> Tensor[(270), uint8] {
  @func_4711() /* ty=Tensor[(270), uint8] */
}

def @func_7496() -> Tensor[(14, 12, 13), float64] {
  %474 = fn () -> Tensor[(14, 12, 13), float64] {
    %473 = @func_3595() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
    %473.1
  };
  %474() /* ty=Tensor[(14, 12, 13), float64] */
}

def @func_4711() -> Tensor[(270), uint8] {
  %475 = @func_3441() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(1, 50), bool], Tensor[(1, 50), float32], Tensor[(14, 12, 13), float64], Tensor[(270), uint8]) */;
  %475.4
}

def @func_9732() -> Tensor[(14, 12, 13), uint32] {
  %477 = fn () -> Tensor[(14, 12, 13), uint32] {
    %476 = @func_5187() /* ty=(Tensor[(14, 12, 13), uint32],) */;
    %476.0
  };
  %477() /* ty=Tensor[(14, 12, 13), uint32] */
}

def @func_9684(%var_9668: Tensor[(50), uint64]) -> (Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(1, 168), float32], Tensor[(50), uint64]) {
  %478 = @func_3595() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
  %479 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 168), float32] */, dtype="float32") /* ty=Tensor[(1, 168), float32] */;
  %480 = cast(%var_9668, dtype="uint64") /* ty=Tensor[(50), uint64] */;
  %481 = reshape(%479, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %482 = reshape(%480, newshape=[50]) /* ty=Tensor[(50), uint64] */;
  %483 = @func_2622(%481, %482) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(168), float32], Tensor[(3, 20), int16], uint64, Tensor[(50), uint64]) */;
  %484 = %478.2;
  %485 = %483.1;
  (%484, %485, meta[relay.Constant][21] /* ty=Tensor[(1, 168), float32] */, %var_9668)
}

def @func_5906(%var_5904: Tensor[(168), float32]) -> (Tensor[(14, 12, 13), uint32], Tensor[(168), float32], Tensor[(168), float32]) {
  %486 = cast(%var_5904, dtype="float32") /* ty=Tensor[(168), float32] */;
  %487 = reshape(%486, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %488 = @func_2817(%487) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(168), float32]) */;
  %489 = @func_5529() /* ty=Tensor[(14, 12, 13), uint32] */;
  %490 = %488.1;
  (%489, %490, %var_5904)
}

def @func_12652() -> Tensor[(14, 12, 13), float64] {
  @func_10867() /* ty=Tensor[(14, 12, 13), float64] */
}

def @func_11149() -> Tensor[(14, 12, 13), float64] {
  %491 = @func_5969() /* ty=(Tensor[(14, 12, 13), float64],) */;
  %491.0
}

def @func_10355(%var_10350: Tensor[(168), float32]) -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(168), float32], Tensor[(168), float32], Tensor[(14, 12, 13), float64]) {
  %492 = @func_4573() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %493 = @func_9328() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %494 = cast(%var_10350, dtype="float32") /* ty=Tensor[(168), float32] */;
  %495 = reshape(%494, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %496 = @func_1733(%495) /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(168), float32], Tensor[(168), float32], Tensor[(14, 12, 13), float32]) */;
  %497 = @func_1754() /* ty=Tensor[(14, 12, 13), uint32] */;
  %498 = %492.0;
  %499 = %493.0;
  %500 = %496.2;
  %501 = @func_1081() /* ty=Tensor[(14, 12, 13), float64] */;
  (%497, %498, %499, %500, %var_10350, %501)
}

def @func_12619() -> (Tensor[(14, 12, 13), uint32],) {
  @func_12617() /* ty=(Tensor[(14, 12, 13), uint32],) */
}

def @func_6245(%var_6222: Tensor[(14, 12, 13), float64]) -> (Tensor[(14, 12, 13), int64], Tensor[(1, 168), float32]) {
  %502 = @func_3595() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
  %503 = %502.0;
  %504 = cast(%var_6222, dtype="int64") /* ty=Tensor[(14, 12, 13), int64] */;
  %505 = shape_of(%503, dtype="int32") /* ty=Tensor[(3), int32] */;
  %506 = cast(%503, dtype="int64") /* ty=Tensor[(14, 12, 13), int64] */;
  %507 = dyn.reshape(%504, %505, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %508 = bitwise_and(%506, %507) /* ty=Tensor[(14, 12, 13), int64] */;
  %509 = cast(%508, dtype="float64") /* ty=Tensor[(14, 12, 13), float64] */;
  %510 = reshape(%509, newshape=[14, 12, 13]) /* ty=Tensor[(14, 12, 13), float64] */;
  %511 = @func_2878(%510) /* ty=(Tensor[(14, 12, 13), float32], Tensor[(1, 168), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), bool]) */;
  %512 = %511.1;
  (%508, %512)
}

def @func_11600(%var_11598: Tensor[(480), float32], %var_11599: Tensor[(168), float32]) -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(480), float32], Tensor[(168), float32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) {
  @func_11596(%var_11598, %var_11599) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(480), float32], Tensor[(168), float32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */
}

def @func_3925() -> (Tensor[(13, 11, 11), bool], Tensor[(11, 11, 12), float64], Tensor[(14, 12, 13), float64]) {
  %520 = fn () -> (Tensor[(13, 11, 11), bool], Tensor[(11, 11, 12), float64], Tensor[(14, 12, 13), float64]) {
    %513 = cast(meta[relay.Constant][23] /* ty=Tensor[(13, 11, 11), uint16] */, dtype="bool") /* ty=Tensor[(13, 11, 11), bool] */;
    %514 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(13, 11, 11), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %515 = cast(meta[relay.Constant][22] /* ty=Tensor[(13, 11, 11), uint16] */, dtype="bool") /* ty=Tensor[(13, 11, 11), bool] */;
    %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %517 = less(%515, %516) /* ty=Tensor[(13, 11, 11), bool] */;
    %518 = @func_3364() /* ty=Tensor[(11, 11, 12), float64] */;
    %519 = @func_2696() /* ty=Tensor[(14, 12, 13), float64] */;
    (%517, %518, %519)
  };
  %520() /* ty=(Tensor[(13, 11, 11), bool], Tensor[(11, 11, 12), float64], Tensor[(14, 12, 13), float64]) */
}

def @func_11596(%var_11559: Tensor[(480), float32], %var_11560: Tensor[(168), float32]) -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(480), float32], Tensor[(168), float32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) {
  %521 = @func_10960() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) */;
  %522 = @func_11212() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(10, 7, 1), bool], uint32) */;
  %523 = cast(%var_11559, dtype="float32") /* ty=Tensor[(480), float32] */;
  %524 = cast(%var_11560, dtype="float32") /* ty=Tensor[(168), float32] */;
  %525 = reshape(%523, newshape=[480]) /* ty=Tensor[(480), float32] */;
  %526 = reshape(%524, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %527 = @func_10851(%525, %526) /* ty=(Tensor[(4, 1, 7), float64], Tensor[(270), uint8], Tensor[(14, 12, 13), float64], Tensor[(50), uint64], Tensor[(480), float32], Tensor[(168), float32]) */;
  %528 = @func_11408() /* ty=(Tensor[(14, 12, 13), float64],) */;
  %529 = cast(%var_11560, dtype="float32") /* ty=Tensor[(168), float32] */;
  %530 = reshape(%529, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %531 = @func_1642(%530) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float32]) */;
  %532 = %521.0;
  %533 = %522.0;
  %534 = %527.2;
  %535 = %528.0;
  %536 = %531.0;
  (%532, %533, %534, %var_11559, %var_11560, %535, %536)
}

def @func_4504() -> Tensor[(270), uint8] {
  %537 = @func_3441() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(1, 50), bool], Tensor[(1, 50), float32], Tensor[(14, 12, 13), float64], Tensor[(270), uint8]) */;
  %537.4
}

def @func_5377(%var_5335: Tensor[(15, 5, 10), int16], %var_5336: Tensor[(15, 5, 10), int16]) -> (Tensor[(15, 5, 10), bool], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) {
  %538 = cast(%var_5336, dtype="bool") /* ty=Tensor[(15, 5, 10), bool] */;
  %539 = shape_of(%var_5335, dtype="int32") /* ty=Tensor[(3), int32] */;
  %540 = cast(%var_5335, dtype="bool") /* ty=Tensor[(15, 5, 10), bool] */;
  %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %542 = less_equal(%540, %541) /* ty=Tensor[(15, 5, 10), bool] */;
  %543 = cast(meta[relay.Constant][24] /* ty=Tensor[(15, 5, 10), bool] */, dtype="bool") /* ty=Tensor[(15, 5, 10), bool] */;
  %544 = shape_of(%542, dtype="int32") /* ty=Tensor[(3), int32] */;
  %545 = cast(%542, dtype="bool") /* ty=Tensor[(15, 5, 10), bool] */;
  %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %547 = less(%545, %546) /* ty=Tensor[(15, 5, 10), bool] */;
  %548 = @func_1229() /* ty=Tensor[(14, 12, 13), float64] */;
  %549 = @func_778() /* ty=Tensor[(14, 12, 13), uint32] */;
  (%547, %548, %549)
}

def @func_5187() -> (Tensor[(14, 12, 13), uint32],) {
  %550 = @func_4573() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %551 = %550.0;
  (%551,)
}

def @func_12158() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) {
  @func_12156() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) */
}

def @func_4980() -> Tensor[(270), uint8] {
  @func_4978() /* ty=Tensor[(270), uint8] */
}

def @func_9199() -> (Tensor[(270), uint8],) {
  %553 = fn () -> (Tensor[(270), uint8],) {
    %552 = @func_8924() /* ty=Tensor[(270), uint8] */;
    (%552,)
  };
  %553() /* ty=(Tensor[(270), uint8],) */
}

def @func_2817(%var_2814: Tensor[(168), float32]) -> (Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(168), float32]) {
  %554 = cast(%var_2814, dtype="float32") /* ty=Tensor[(168), float32] */;
  %555 = reshape(%554, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %556 = @func_1733(%555) /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(168), float32], Tensor[(168), float32], Tensor[(14, 12, 13), float32]) */;
  %557 = @func_2696() /* ty=Tensor[(14, 12, 13), float64] */;
  %558 = %556.2;
  (%557, %558, %var_2814)
}

def @func_11815() -> (Tensor[(11, 11, 12), float32],) {
  %560 = fn () -> (Tensor[(11, 11, 12), float32],) {
    %559 = @func_5041() /* ty=Tensor[(11, 11, 12), float32] */;
    (%559,)
  };
  %560() /* ty=(Tensor[(11, 11, 12), float32],) */
}

def @func_9638(%var_9637: Tensor[(4, 9, 8), float64]) -> (Tensor[(4, 9, 8), bool],) {
  %566 = fn (%var_9605: Tensor[(4, 9, 8), float64]) -> (Tensor[(4, 9, 8), bool],) {
    %561 = cast(meta[relay.Constant][25] /* ty=Tensor[(4, 9, 8), float64] */, dtype="bool") /* ty=Tensor[(4, 9, 8), bool] */;
    %562 = shape_of(%var_9605, dtype="int32") /* ty=Tensor[(3), int32] */;
    %563 = cast(%var_9605, dtype="bool") /* ty=Tensor[(4, 9, 8), bool] */;
    %564 = dyn.reshape(%561, %562, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %565 = greater_equal(%563, %564) /* ty=Tensor[(4, 9, 8), bool] */;
    (%565,)
  };
  %566(%var_9637) /* ty=(Tensor[(4, 9, 8), bool],) */
}

def @func_10719(%var_10718: Tensor[(168), float32]) -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(270), uint8]) {
  %575 = fn (%var_10640: Tensor[(168), float32]) -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(270), uint8]) {
    %567 = @func_9118() /* ty=(Tensor[(14, 12, 13), uint32],) */;
    %568 = cast(%var_10640, dtype="float32") /* ty=Tensor[(168), float32] */;
    %569 = reshape(%568, newshape=[168]) /* ty=Tensor[(168), float32] */;
    %570 = @func_2817(%569) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(168), float32]) */;
    %571 = @func_9176() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(270), uint8]) */;
    %572 = %567.0;
    %573 = %570.0;
    %574 = %571.1;
    (%572, %573, %var_10640, %574)
  };
  %575(%var_10718) /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(270), uint8]) */
}

def @func_1082() -> Tensor[(14, 12, 13), float64] {
  %576 = fn () -> Tensor[(14, 12, 13), float64] {
    @func_1055() /* ty=Tensor[(14, 12, 13), float64] */
  };
  %576() /* ty=Tensor[(14, 12, 13), float64] */
}

def @func_3597() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) {
  @func_3595() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */
}

def @func_1192() -> Tensor[(14, 12, 13), uint32] {
  %578 = fn () -> Tensor[(14, 12, 13), uint32] {
    %577 = @func_810() /* ty=(Tensor[(14, 12, 13), uint32],) */;
    %577.0
  };
  %578() /* ty=Tensor[(14, 12, 13), uint32] */
}

def @func_3124() -> (Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(15, 4, ?), bool], Tensor[(6, 28), float32], Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), float64]) {
  %600 = fn () -> (Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(15, 4, ?), bool], Tensor[(6, 28), float32], Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), float64]) {
    %579 = @func_1584() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) */;
    %580 = @func_1493() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) */;
    %581 = cast(meta[relay.Constant][26] /* ty=Tensor[(6, 28), float32] */, dtype="float32") /* ty=Tensor[(6, 28), float32] */;
    %582 = reshape(%581, newshape=[6, 2, 14]) /* ty=Tensor[(6, 2, 14), float32] */;
    %583 = @func_624(%582) /* ty=(Tensor[(15, 4, ?), bool], Tensor[(60, 1), int16], Tensor[(15, 4, ?), bool], Tensor[(6, 2, 14), int32], Tensor[(3, 20), int16], uint64, Tensor[(50), uint64], Tensor[(15, 4, ?), bool], Tensor[(15, 4, ?), bool], Tensor[(15, 4, ?), bool], Tensor[(15, 4, ?), bool], Tensor[(6, 2, 14), float64]) */;
    %584 = @func_2524() /* ty=(Tensor[(14, 12, 13), int32], Tensor[(14, 12, 13), float64]) */;
    %585 = %584.1;
    %586 = @func_1493() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) */;
    %587 = %586.0;
    %588 = cast(%587, dtype="int32") /* ty=Tensor[(14, 12, 13), int32] */;
    %589 = shape_of(%585, dtype="int32") /* ty=Tensor[(3), int32] */;
    %590 = cast(%585, dtype="int32") /* ty=Tensor[(14, 12, 13), int32] */;
    %591 = dyn.reshape(%588, %589, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %592 = left_shift(%590, %591) /* ty=Tensor[(14, 12, 13), int32] */;
    %593 = cast(%592, dtype="float64") /* ty=Tensor[(14, 12, 13), float64] */;
    %594 = @func_2942() /* ty=Tensor[(14, 12, 13), float32] */;
    %595 = %579.1;
    %596 = %580.0;
    %597 = %583.9;
    %598 = @func_2942() /* ty=Tensor[(14, 12, 13), float32] */;
    %599 = rsqrt(%593) /* ty=Tensor[(14, 12, 13), float64] */;
    (%594, %595, %596, %597, meta[relay.Constant][26] /* ty=Tensor[(6, 28), float32] */, %598, %599)
  };
  %600() /* ty=(Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(15, 4, ?), bool], Tensor[(6, 28), float32], Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), float64]) */
}

def @func_8609() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float32]) {
  @func_8607() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float32]) */
}

def @func_8018() -> Tensor[(270), uint8] {
  @func_8016() /* ty=Tensor[(270), uint8] */
}

def @func_12010(%var_12007: Tensor[(11, 9, 14), float64], %var_12008: Tensor[(12, 182), float64], %var_12009: Tensor[(12, 182), float64]) -> (Tensor[(11, 9, 14), float64], Tensor[(14, 12, 13), int64], Tensor[(12, 182), float32]) {
  @func_12005(%var_12007, %var_12008, %var_12009) /* ty=(Tensor[(11, 9, 14), float64], Tensor[(14, 12, 13), int64], Tensor[(12, 182), float32]) */
}

def @func_2161() -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) {
  %601 = @func_1584() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) */;
  %602 = @func_825() /* ty=Tensor[(14, 12, 13), uint32] */;
  %603 = %601.1;
  (%602, %603)
}

def @func_4548() -> Tensor[(14, 12, 13), float32] {
  @func_4546() /* ty=Tensor[(14, 12, 13), float32] */
}

def @func_5150(%var_5149: Tensor[(270), uint8]) -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(270), uint8], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) {
  %612 = fn (%var_5104: Tensor[(270), uint8]) -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(270), uint8], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) {
    %604 = cast(%var_5104, dtype="uint8") /* ty=Tensor[(270), uint8] */;
    %605 = reshape(%604, newshape=[270, 1]) /* ty=Tensor[(270, 1), uint8] */;
    %606 = @func_1289(%605) /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(2, 15, 9), float64], Tensor[(270, 1), uint8], Tensor[(14, 12, 13), float64]) */;
    %607 = @func_2249() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
    %608 = @func_2304() /* ty=Tensor[(14, 12, 13), float64] */;
    %609 = %606.2;
    %610 = %607.0;
    %611 = @func_2304() /* ty=Tensor[(14, 12, 13), float64] */;
    (%608, %609, %var_5104, %610, %611)
  };
  %612(%var_5149) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(270), uint8], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */
}

def @func_2820(%var_2818: Tensor[(168), float32]) -> (Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(168), float32]) {
  @func_2817(%var_2818) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(168), float32]) */
}

def @func_6007() -> (Tensor[(14, 12, 13), float64],) {
  %615 = fn () -> (Tensor[(14, 12, 13), float64],) {
    %613 = @func_3123() /* ty=(Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(15, 4, ?), bool], Tensor[(6, 28), float32], Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), float64]) */;
    %614 = %613.6;
    (%614,)
  };
  %615() /* ty=(Tensor[(14, 12, 13), float64],) */
}

def @func_6483() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) {
  %620 = fn () -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) {
    %616 = @func_3595() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
    %617 = @func_4075() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(6, 28), float32], Tensor[(14, 12, 13), float64]) */;
    %618 = %616.0;
    %619 = %617.3;
    (%618, %619)
  };
  %620() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */
}

def @func_6354() -> Tensor[(14, 12, 13), float64] {
  %621 = @func_2249() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
  %621.0
}

def @func_11408() -> (Tensor[(14, 12, 13), float64],) {
  %622 = @func_11149() /* ty=Tensor[(14, 12, 13), float64] */;
  (%622,)
}

def @func_7776() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) {
  @func_7774() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) */
}

def @func_9373(%var_9371: uint32) -> (Tensor[(10, 7, 1), bool],) {
  @func_9370(%var_9371) /* ty=(Tensor[(10, 7, 1), bool],) */
}

def @func_4573() -> (Tensor[(14, 12, 13), uint32],) {
  %623 = @func_825() /* ty=Tensor[(14, 12, 13), uint32] */;
  (%623,)
}

def @func_1456(%var_1455: Tensor[(14, 12, 13), float64]) -> (Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), float64]) {
  %632 = fn (%var_1438: Tensor[(14, 12, 13), float64]) -> (Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), float64]) {
    %624 = @func_910() /* ty=(Tensor[(14, 12, 13), float64],) */;
    %625 = %624.0;
    %626 = cast(%var_1438, dtype="float32") /* ty=Tensor[(14, 12, 13), float32] */;
    %627 = shape_of(%625, dtype="int32") /* ty=Tensor[(3), int32] */;
    %628 = cast(%625, dtype="float32") /* ty=Tensor[(14, 12, 13), float32] */;
    %629 = dyn.reshape(%626, %627, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %630 = divide(%628, %629) /* ty=Tensor[(14, 12, 13), float32] */;
    %631 = @func_1055() /* ty=Tensor[(14, 12, 13), float64] */;
    (%630, %631)
  };
  %632(%var_1455) /* ty=(Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), float64]) */
}

def @func_10962() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) {
  @func_10960() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) */
}

def @func_870(%var_854: Tensor[(2, 15, 9), uint8], %var_855: Tensor[(2, 15, 9), uint8]) -> Tensor[(2, 15, 9), float64] {
  %633 = cast(%var_855, dtype="uint8") /* ty=Tensor[(2, 15, 9), uint8] */;
  %634 = shape_of(%var_854, dtype="int32") /* ty=Tensor[(3), int32] */;
  %635 = cast(%var_854, dtype="uint8") /* ty=Tensor[(2, 15, 9), uint8] */;
  %636 = dyn.reshape(%633, %634, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %637 = add(%635, %636) /* ty=Tensor[(2, 15, 9), uint8] */;
  %638 = cast(%637, dtype="float64") /* ty=Tensor[(2, 15, 9), float64] */;
  tan(%638) /* ty=Tensor[(2, 15, 9), float64] */
}

def @func_10250() -> (Tensor[(2, 15, 9), float64], Tensor[(14, 12, 13), float64]) {
  %643 = fn () -> (Tensor[(2, 15, 9), float64], Tensor[(14, 12, 13), float64]) {
    %639 = @func_4203() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(2, 15, 9), float64], Tensor[(270), uint8]) */;
    %640 = @func_9822() /* ty=(Tensor[(14, 12, 13), float64],) */;
    %641 = %639.1;
    %642 = %640.0;
    (%641, %642)
  };
  %643() /* ty=(Tensor[(2, 15, 9), float64], Tensor[(14, 12, 13), float64]) */
}

def @func_624(%var_528: Tensor[(6, 2, 14), float32]) -> (Tensor[(15, 4, ?), bool], Tensor[(60, 1), int16], Tensor[(15, 4, ?), bool], Tensor[(6, 2, 14), int32], Tensor[(3, 20), int16], uint64, Tensor[(50), uint64], Tensor[(15, 4, ?), bool], Tensor[(15, 4, ?), bool], Tensor[(15, 4, ?), bool], Tensor[(15, 4, ?), bool], Tensor[(6, 2, 14), float64]) {
  %644 = cast(meta[relay.Constant][27] /* ty=Tensor[(60, 1), int16] */, dtype="int16") /* ty=Tensor[(60, 1), int16] */;
  %645 = cast(meta[relay.Constant][27] /* ty=Tensor[(60, 1), int16] */, dtype="int16") /* ty=Tensor[(60, 1), int16] */;
  %646 = reshape(%644, newshape=[15, 4, 1]) /* ty=Tensor[(15, 4, 1), int16] */;
  %647 = reshape(%645, newshape=[15, 4, 1]) /* ty=Tensor[(15, 4, 1), int16] */;
  %648 = @func_316(%646, %647) /* ty=(Tensor[(15, 4, ?), bool],) */;
  %649 = cast(meta[relay.Constant][27] /* ty=Tensor[(60, 1), int16] */, dtype="int16") /* ty=Tensor[(60, 1), int16] */;
  %650 = cast(meta[relay.Constant][27] /* ty=Tensor[(60, 1), int16] */, dtype="int16") /* ty=Tensor[(60, 1), int16] */;
  %651 = reshape(%649, newshape=[15, 4, 1]) /* ty=Tensor[(15, 4, 1), int16] */;
  %652 = reshape(%650, newshape=[15, 4, 1]) /* ty=Tensor[(15, 4, 1), int16] */;
  %653 = @func_316(%651, %652) /* ty=(Tensor[(15, 4, ?), bool],) */;
  %654 = cast(%var_528, dtype="float32") /* ty=Tensor[(6, 2, 14), float32] */;
  %655 = acos(%654) /* ty=Tensor[(6, 2, 14), float32] */;
  %656 = cast(%655, dtype="float64") /* ty=Tensor[(6, 2, 14), float64] */;
  %657 = cosh(%656) /* ty=Tensor[(6, 2, 14), float64] */;
  %658 = cast(%var_528, dtype="int32") /* ty=Tensor[(6, 2, 14), int32] */;
  %659 = shape_of(%657, dtype="int32") /* ty=Tensor[(3), int32] */;
  %660 = cast(%657, dtype="int32") /* ty=Tensor[(6, 2, 14), int32] */;
  %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %662 = cast(meta[relay.Constant][28] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %663 = cast(meta[relay.Constant][29] /* ty=Tensor[(50), uint64] */, dtype="uint64") /* ty=Tensor[(50), uint64] */;
  %664 = reshape(%662, newshape=[]) /* ty=uint64 */;
  %665 = reshape(%663, newshape=[5, 10, 1]) /* ty=Tensor[(5, 10, 1), uint64] */;
  %666 = @func_408(%664, %665) /* ty=(Tensor[(5, 10, 1), bool], Tensor[(15, 4, ?), bool], Tensor[(3, 20), int16]) */;
  %667 = %666.2;
  %668 = cast(%667, dtype="int16") /* ty=Tensor[(3, 20), int16] */;
  %669 = %653.0;
  %670 = cast(%669, dtype="int16") /* ty=Tensor[(15, 4, ?), int16] */;
  %671 = reshape(%668, newshape=[15, 4, 1]) /* ty=Tensor[(15, 4, 1), int16] */;
  %672 = reshape(%670, newshape=[15, 4, 1]) /* ty=Tensor[(15, 4, 1), int16] */;
  %673 = @func_316(%671, %672) /* ty=(Tensor[(15, 4, ?), bool],) */;
  %674 = cast(%669, dtype="int16") /* ty=Tensor[(15, 4, ?), int16] */;
  %675 = cast(meta[relay.Constant][27] /* ty=Tensor[(60, 1), int16] */, dtype="int16") /* ty=Tensor[(60, 1), int16] */;
  %676 = reshape(%674, newshape=[15, 4, 1]) /* ty=Tensor[(15, 4, 1), int16] */;
  %677 = reshape(%675, newshape=[15, 4, 1]) /* ty=Tensor[(15, 4, 1), int16] */;
  %678 = @func_316(%676, %677) /* ty=(Tensor[(15, 4, ?), bool],) */;
  %679 = cast(meta[relay.Constant][28] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %680 = cast(meta[relay.Constant][29] /* ty=Tensor[(50), uint64] */, dtype="uint64") /* ty=Tensor[(50), uint64] */;
  %681 = reshape(%679, newshape=[]) /* ty=uint64 */;
  %682 = reshape(%680, newshape=[5, 10, 1]) /* ty=Tensor[(5, 10, 1), uint64] */;
  %683 = @func_408(%681, %682) /* ty=(Tensor[(5, 10, 1), bool], Tensor[(15, 4, ?), bool], Tensor[(3, 20), int16]) */;
  %684 = cast(meta[relay.Constant][28] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %685 = cast(meta[relay.Constant][29] /* ty=Tensor[(50), uint64] */, dtype="uint64") /* ty=Tensor[(50), uint64] */;
  %686 = reshape(%684, newshape=[]) /* ty=uint64 */;
  %687 = reshape(%685, newshape=[5, 10, 1]) /* ty=Tensor[(5, 10, 1), uint64] */;
  %688 = @func_408(%686, %687) /* ty=(Tensor[(5, 10, 1), bool], Tensor[(15, 4, ?), bool], Tensor[(3, 20), int16]) */;
  %689 = cast(%657, dtype="float32") /* ty=Tensor[(6, 2, 14), float32] */;
  %690 = shape_of(%655, dtype="int32") /* ty=Tensor[(3), int32] */;
  %691 = cast(%655, dtype="float32") /* ty=Tensor[(6, 2, 14), float32] */;
  %692 = dyn.reshape(%689, %690, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %693 = mod(%691, %692) /* ty=Tensor[(6, 2, 14), float32] */;
  %694 = cast(%693, dtype="float32") /* ty=Tensor[(6, 2, 14), float32] */;
  %695 = log(%694) /* ty=Tensor[(6, 2, 14), float32] */;
  %696 = cast(%695, dtype="float64") /* ty=Tensor[(6, 2, 14), float64] */;
  %697 = %648.0;
  %698 = right_shift(%660, %661) /* ty=Tensor[(6, 2, 14), int32] */;
  %699 = %673.0;
  %700 = %678.0;
  %701 = %683.1;
  %702 = %688.1;
  %703 = asin(%696) /* ty=Tensor[(6, 2, 14), float64] */;
  (%697, meta[relay.Constant][27] /* ty=Tensor[(60, 1), int16] */, %669, %698, %667, meta[relay.Constant][28] /* ty=uint64 */, meta[relay.Constant][29] /* ty=Tensor[(50), uint64] */, %699, %700, %701, %702, %703)
}

def @func_9177() -> (Tensor[(14, 12, 13), float64], Tensor[(270), uint8]) {
  %707 = fn () -> (Tensor[(14, 12, 13), float64], Tensor[(270), uint8]) {
    %704 = @func_8345() /* ty=(Tensor[(270), uint8], Tensor[(14, 12, 13), float64]) */;
    %705 = @func_6354() /* ty=Tensor[(14, 12, 13), float64] */;
    %706 = %704.0;
    (%705, %706)
  };
  %707() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(270), uint8]) */
}

def @func_7212() -> (Tensor[(14, 12, 13), float64], Tensor[(270), uint8], Tensor[(14, 12, 13), float64]) {
  %708 = @func_3595() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
  %709 = @func_1081() /* ty=Tensor[(14, 12, 13), float64] */;
  %710 = @func_4711() /* ty=Tensor[(270), uint8] */;
  %711 = %708.2;
  (%709, %710, %711)
}

def @func_3625() -> Tensor[(270), uint8] {
  %712 = @func_3441() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(1, 50), bool], Tensor[(1, 50), float32], Tensor[(14, 12, 13), float64], Tensor[(270), uint8]) */;
  %712.4
}

def @func_4076() -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(6, 28), float32], Tensor[(14, 12, 13), float64]) {
  %727 = fn () -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(6, 28), float32], Tensor[(14, 12, 13), float64]) {
    %713 = @func_3706() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(15, 4, ?), bool]) */;
    %714 = @func_2215() /* ty=(Tensor[(14, 12, 13), float64],) */;
    %715 = @func_810() /* ty=(Tensor[(14, 12, 13), uint32],) */;
    %716 = %715.0;
    %717 = cast(%716, dtype="float32") /* ty=Tensor[(14, 12, 13), float32] */;
    %718 = asin(%717) /* ty=Tensor[(14, 12, 13), float32] */;
    %719 = cast(%718, dtype="float64") /* ty=Tensor[(14, 12, 13), float64] */;
    %720 = @func_3123() /* ty=(Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(15, 4, ?), bool], Tensor[(6, 28), float32], Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), float64]) */;
    %721 = %713.0;
    %722 = %714.0;
    %723 = @func_825() /* ty=Tensor[(14, 12, 13), uint32] */;
    %724 = log(%719) /* ty=Tensor[(14, 12, 13), float64] */;
    %725 = %720.4;
    %726 = @func_1229() /* ty=Tensor[(14, 12, 13), float64] */;
    (%721, %722, %723, %724, %725, %726)
  };
  %727() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(6, 28), float32], Tensor[(14, 12, 13), float64]) */
}

def @func_3844() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) {
  %728 = @func_2304() /* ty=Tensor[(14, 12, 13), float64] */;
  %729 = @func_1191() /* ty=Tensor[(14, 12, 13), uint32] */;
  (%728, %729)
}

def @func_8045() -> (Tensor[(14, 12, 13), float32],) {
  @func_8043() /* ty=(Tensor[(14, 12, 13), float32],) */
}

def @func_9120() -> (Tensor[(14, 12, 13), uint32],) {
  @func_9118() /* ty=(Tensor[(14, 12, 13), uint32],) */
}

def @func_411(%var_409: uint64, %var_410: Tensor[(5, 10, 1), uint64]) -> (Tensor[(5, 10, 1), bool], Tensor[(15, 4, ?), bool], Tensor[(3, 20), int16]) {
  %739 = fn (%var_380: uint64, %var_381: Tensor[(5, 10, 1), uint64]) -> (Tensor[(5, 10, 1), bool], Tensor[(15, 4, ?), bool], Tensor[(3, 20), int16]) {
    %730 = cast(%var_380, dtype="bool") /* ty=bool */;
    %731 = cast(%var_381, dtype="bool") /* ty=Tensor[(5, 10, 1), bool] */;
    %732 = cast(meta[relay.Constant][30] /* ty=Tensor[(3, 20), int16] */, dtype="int16") /* ty=Tensor[(3, 20), int16] */;
    %733 = cast(meta[relay.Constant][30] /* ty=Tensor[(3, 20), int16] */, dtype="int16") /* ty=Tensor[(3, 20), int16] */;
    %734 = reshape(%732, newshape=[15, 4, 1]) /* ty=Tensor[(15, 4, 1), int16] */;
    %735 = reshape(%733, newshape=[15, 4, 1]) /* ty=Tensor[(15, 4, 1), int16] */;
    %736 = @func_316(%734, %735) /* ty=(Tensor[(15, 4, ?), bool],) */;
    %737 = greater_equal(%730, %731) /* ty=Tensor[(5, 10, 1), bool] */;
    %738 = %736.0;
    (%737, %738, meta[relay.Constant][30] /* ty=Tensor[(3, 20), int16] */)
  };
  %739(%var_409, %var_410) /* ty=(Tensor[(5, 10, 1), bool], Tensor[(15, 4, ?), bool], Tensor[(3, 20), int16]) */
}

def @func_3708() -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(15, 4, ?), bool]) {
  @func_3706() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(15, 4, ?), bool]) */
}

def @func_9148() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) {
  @func_9146() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */
}

def @func_1586() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) {
  @func_1584() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) */
}

def @func_12156() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) {
  %740 = @func_3123() /* ty=(Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(15, 4, ?), bool], Tensor[(6, 28), float32], Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), float64]) */;
  %741 = %740.6;
  %742 = @func_1191() /* ty=Tensor[(14, 12, 13), uint32] */;
  %743 = @func_10867() /* ty=Tensor[(14, 12, 13), float64] */;
  (%741, %742, %743)
}

def @func_4443(%var_4441: Tensor[(11, 6, 1), int64]) -> (Tensor[(11, 6, 5), int64], Tensor[(11, 6, 5), bool]) {
  @func_4440(%var_4441) /* ty=(Tensor[(11, 6, 5), int64], Tensor[(11, 6, 5), bool]) */
}

def @func_4575() -> (Tensor[(14, 12, 13), uint32],) {
  @func_4573() /* ty=(Tensor[(14, 12, 13), uint32],) */
}

def @func_9099() -> (Tensor[(14, 12, 13), uint32],) {
  %746 = fn () -> (Tensor[(14, 12, 13), uint32],) {
    %744 = @func_7955() /* ty=(Tensor[(14, 12, 13), uint32],) */;
    %745 = %744.0;
    (%745,)
  };
  %746() /* ty=(Tensor[(14, 12, 13), uint32],) */
}

def @func_6340() -> Tensor[(14, 12, 13), uint32] {
  %748 = fn () -> Tensor[(14, 12, 13), uint32] {
    %747 = @func_6261() /* ty=(Tensor[(14, 12, 13), uint32],) */;
    %747.0
  };
  %748() /* ty=Tensor[(14, 12, 13), uint32] */
}

def @func_7214() -> (Tensor[(14, 12, 13), float64], Tensor[(270), uint8], Tensor[(14, 12, 13), float64]) {
  @func_7212() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(270), uint8], Tensor[(14, 12, 13), float64]) */
}

def @func_9595() -> Tensor[(14, 12, 13), float32] {
  %750 = fn () -> Tensor[(14, 12, 13), float32] {
    %749 = @func_4130() /* ty=(Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), float32]) */;
    %749.1
  };
  %750() /* ty=Tensor[(14, 12, 13), float32] */
}

def @func_9146() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) {
  %751 = @func_2215() /* ty=(Tensor[(14, 12, 13), float64],) */;
  %752 = %751.0;
  %753 = cast(%752, dtype="float64") /* ty=Tensor[(14, 12, 13), float64] */;
  %754 = @func_3123() /* ty=(Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(15, 4, ?), bool], Tensor[(6, 28), float32], Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), float64]) */;
  %755 = acos(%753) /* ty=Tensor[(14, 12, 13), float64] */;
  %756 = %754.6;
  (%755, %756)
}

def @func_9888() -> Tensor[(14, 12, 13), float64] {
  @func_5029() /* ty=Tensor[(14, 12, 13), float64] */
}

def @func_10854(%var_10852: Tensor[(480), float32], %var_10853: Tensor[(168), float32]) -> (Tensor[(4, 1, 7), float64], Tensor[(270), uint8], Tensor[(14, 12, 13), float64], Tensor[(50), uint64], Tensor[(480), float32], Tensor[(168), float32]) {
  %768 = fn (%var_10848: Tensor[(480), float32], %var_10849: Tensor[(168), float32]) -> (Tensor[(4, 1, 7), float64], Tensor[(270), uint8], Tensor[(14, 12, 13), float64], Tensor[(50), uint64], Tensor[(480), float32], Tensor[(168), float32]) {
    %757 = @func_8345() /* ty=(Tensor[(270), uint8], Tensor[(14, 12, 13), float64]) */;
    %758 = @func_10249() /* ty=(Tensor[(2, 15, 9), float64], Tensor[(14, 12, 13), float64]) */;
    %759 = cast(%var_10848, dtype="float32") /* ty=Tensor[(480), float32] */;
    %760 = cast(%var_10849, dtype="float32") /* ty=Tensor[(168), float32] */;
    %761 = reshape(%759, newshape=[16, 6, 5]) /* ty=Tensor[(16, 6, 5), float32] */;
    %762 = reshape(%760, newshape=[168]) /* ty=Tensor[(168), float32] */;
    %763 = @func_7009(%761, %762) /* ty=(Tensor[(16, 6, 5), float32], Tensor[(50), uint64], Tensor[(168), float32], Tensor[(50), uint64]) */;
    %764 = @func_8381() /* ty=Tensor[(4, 1, 7), float64] */;
    %765 = %757.0;
    %766 = %758.1;
    %767 = %763.3;
    (%764, %765, %766, %767, %var_10848, %var_10849)
  };
  %768(%var_10852, %var_10853) /* ty=(Tensor[(4, 1, 7), float64], Tensor[(270), uint8], Tensor[(14, 12, 13), float64], Tensor[(50), uint64], Tensor[(480), float32], Tensor[(168), float32]) */
}

def @func_778() -> Tensor[(14, 12, 13), uint32] {
  %769 = cast(meta[relay.Constant][31] /* ty=Tensor[(14, 12, 13), float32] */, dtype="float32") /* ty=Tensor[(14, 12, 13), float32] */;
  %770 = cos(%769) /* ty=Tensor[(14, 12, 13), float32] */;
  %771 = cast(meta[relay.Constant][31] /* ty=Tensor[(14, 12, 13), float32] */, dtype="uint32") /* ty=Tensor[(14, 12, 13), uint32] */;
  %772 = shape_of(%770, dtype="int32") /* ty=Tensor[(3), int32] */;
  %773 = cast(%770, dtype="uint32") /* ty=Tensor[(14, 12, 13), uint32] */;
  %774 = dyn.reshape(%771, %772, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_or(%773, %774) /* ty=Tensor[(14, 12, 13), uint32] */
}

def @func_11970() -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) {
  @func_11968() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) */
}

def @func_7410() -> (Tensor[(14, 12, 13), float64], Tensor[(11, 11, 12), float64], Tensor[(14, 12, 13), float64], Tensor[(273), float64], Tensor[(168), float32], Tensor[(168), float32], Tensor[(1, 50), float32], Tensor[(14, 12, 13), uint32]) {
  %790 = fn () -> (Tensor[(14, 12, 13), float64], Tensor[(11, 11, 12), float64], Tensor[(14, 12, 13), float64], Tensor[(273), float64], Tensor[(168), float32], Tensor[(168), float32], Tensor[(1, 50), float32], Tensor[(14, 12, 13), uint32]) {
    %775 = @func_2249() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
    %776 = cast(meta[relay.Constant][32] /* ty=Tensor[(273), float64] */, dtype="float64") /* ty=Tensor[(273), float64] */;
    %777 = reshape(%776, newshape=[13, 3, 7]) /* ty=Tensor[(13, 3, 7), float64] */;
    %778 = @func_5086(%777) /* ty=(Tensor[(13, 3, 7), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
    %779 = cast(meta[relay.Constant][33] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
    %780 = reshape(%779, newshape=[168]) /* ty=Tensor[(168), float32] */;
    %781 = @func_2817(%780) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(168), float32]) */;
    %782 = @func_3441() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(1, 50), bool], Tensor[(1, 50), float32], Tensor[(14, 12, 13), float64], Tensor[(270), uint8]) */;
    %783 = @func_5237() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) */;
    %784 = %775.1;
    %785 = @func_3364() /* ty=Tensor[(11, 11, 12), float64] */;
    %786 = %778.1;
    %787 = %781.2;
    %788 = %782.2;
    %789 = %783.1;
    (%784, %785, %786, meta[relay.Constant][32] /* ty=Tensor[(273), float64] */, %787, meta[relay.Constant][33] /* ty=Tensor[(168), float32] */, %788, %789)
  };
  %790() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(11, 11, 12), float64], Tensor[(14, 12, 13), float64], Tensor[(273), float64], Tensor[(168), float32], Tensor[(168), float32], Tensor[(1, 50), float32], Tensor[(14, 12, 13), uint32]) */
}

def @func_3756() -> Tensor[(14, 12, 13), float64] {
  %792 = fn () -> Tensor[(14, 12, 13), float64] {
    %791 = @func_3280() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(168), float32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
    %791.3
  };
  %792() /* ty=Tensor[(14, 12, 13), float64] */
}

def @func_627(%var_625: Tensor[(6, 2, 14), float32]) -> (Tensor[(15, 4, ?), bool], Tensor[(60, 1), int16], Tensor[(15, 4, ?), bool], Tensor[(6, 2, 14), int32], Tensor[(3, 20), int16], uint64, Tensor[(50), uint64], Tensor[(15, 4, ?), bool], Tensor[(15, 4, ?), bool], Tensor[(15, 4, ?), bool], Tensor[(15, 4, ?), bool], Tensor[(6, 2, 14), float64]) {
  @func_624(%var_625) /* ty=(Tensor[(15, 4, ?), bool], Tensor[(60, 1), int16], Tensor[(15, 4, ?), bool], Tensor[(6, 2, 14), int32], Tensor[(3, 20), int16], uint64, Tensor[(50), uint64], Tensor[(15, 4, ?), bool], Tensor[(15, 4, ?), bool], Tensor[(15, 4, ?), bool], Tensor[(15, 4, ?), bool], Tensor[(6, 2, 14), float64]) */
}

def @func_9472() -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) {
  @func_9470() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) */
}

def @func_10225() -> (Tensor[(270), uint8],) {
  %795 = fn () -> (Tensor[(270), uint8],) {
    %793 = @func_9176() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(270), uint8]) */;
    %794 = %793.1;
    (%794,)
  };
  %795() /* ty=(Tensor[(270), uint8],) */
}

def @func_8223() -> (Tensor[(14, 12, 13), uint32],) {
  @func_8221() /* ty=(Tensor[(14, 12, 13), uint32],) */
}

def @func_8511(%var_8509: Tensor[(50), uint64]) -> (Tensor[(14, 12, 13), uint32], Tensor[(168), float32], Tensor[(168), float32], Tensor[(14, 12, 13), float64], Tensor[(50), uint64], Tensor[(14, 12, 13), float64]) {
  @func_8508(%var_8509) /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(168), float32], Tensor[(168), float32], Tensor[(14, 12, 13), float64], Tensor[(50), uint64], Tensor[(14, 12, 13), float64]) */
}

def @func_2944() -> Tensor[(14, 12, 13), float32] {
  @func_2942() /* ty=Tensor[(14, 12, 13), float32] */
}

def @func_5381(%var_5379: Tensor[(15, 5, 10), int16], %var_5380: Tensor[(15, 5, 10), int16]) -> (Tensor[(15, 5, 10), bool], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) {
  @func_5377(%var_5379, %var_5380) /* ty=(Tensor[(15, 5, 10), bool], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) */
}

def @func_12593(%var_12530: Tensor[(9, 11, 7), float32], %var_12531: Tensor[(9, 11, 7), float32], %var_12560: Tensor[(1, 30), float64]) -> (Tensor[(9, 11, 7), float32], Tensor[(14, 12, 13), float64], Tensor[(9, 11, 7), float64], Tensor[(5, 2, 3), float64], Tensor[(1, 30), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) {
  %796 = cast(%var_12531, dtype="float32") /* ty=Tensor[(9, 11, 7), float32] */;
  %797 = shape_of(%var_12530, dtype="int32") /* ty=Tensor[(3), int32] */;
  %798 = cast(%var_12530, dtype="float32") /* ty=Tensor[(9, 11, 7), float32] */;
  %799 = dyn.reshape(%796, %797, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %800 = @func_10088() /* ty=(Tensor[(14, 12, 13), float64],) */;
  %801 = cast(%var_12531, dtype="float64") /* ty=Tensor[(9, 11, 7), float64] */;
  %802 = cast(%var_12560, dtype="float64") /* ty=Tensor[(1, 30), float64] */;
  %803 = reshape(%802, newshape=[5, 2, 3]) /* ty=Tensor[(5, 2, 3), float64] */;
  %804 = @func_5969() /* ty=(Tensor[(14, 12, 13), float64],) */;
  %805 = %800.0;
  %806 = cast(%805, dtype="float64") /* ty=Tensor[(14, 12, 13), float64] */;
  %807 = reshape(%806, newshape=[14, 12, 13]) /* ty=Tensor[(14, 12, 13), float64] */;
  %808 = @func_2878(%807) /* ty=(Tensor[(14, 12, 13), float32], Tensor[(1, 168), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), bool]) */;
  %809 = floor_mod(%798, %799) /* ty=Tensor[(9, 11, 7), float32] */;
  %810 = log2(%801) /* ty=Tensor[(9, 11, 7), float64] */;
  %811 = @func_11936(%803) /* ty=Tensor[(5, 2, 3), float64] */;
  %812 = %804.0;
  %813 = @func_7481() /* ty=Tensor[(14, 12, 13), uint32] */;
  %814 = %808.2;
  (%809, %805, %810, %811, %var_12560, %812, %813, %814)
}

def @func_8043() -> (Tensor[(14, 12, 13), float32],) {
  %815 = @func_4546() /* ty=Tensor[(14, 12, 13), float32] */;
  (%815,)
}

def @func_1494() -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) {
  %829 = fn () -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) {
    %816 = @func_810() /* ty=(Tensor[(14, 12, 13), uint32],) */;
    %817 = @func_1081() /* ty=Tensor[(14, 12, 13), float64] */;
    %818 = cast(meta[relay.Constant][34] /* ty=Tensor[(14, 12, 13), float64] */, dtype="bool") /* ty=Tensor[(14, 12, 13), bool] */;
    %819 = shape_of(%817, dtype="int32") /* ty=Tensor[(3), int32] */;
    %820 = cast(%817, dtype="bool") /* ty=Tensor[(14, 12, 13), bool] */;
    %821 = dyn.reshape(%818, %819, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %822 = less(%820, %821) /* ty=Tensor[(14, 12, 13), bool] */;
    %823 = cast(%817, dtype="uint32") /* ty=Tensor[(14, 12, 13), uint32] */;
    %824 = shape_of(%822, dtype="int32") /* ty=Tensor[(3), int32] */;
    %825 = cast(%822, dtype="uint32") /* ty=Tensor[(14, 12, 13), uint32] */;
    %826 = dyn.reshape(%823, %824, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %827 = %816.0;
    %828 = multiply(%825, %826) /* ty=Tensor[(14, 12, 13), uint32] */;
    (%827, %828)
  };
  %829() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) */
}

def @main(%var_13030: Tensor[(3, 156), float64]) -> (Tensor[(14, 12, 13), float64], Tensor[(3, 156), float32]) {
  %830 = @func_12158() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) */;
  %831 = @func_8571() /* ty=(Tensor[(270), uint8], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(3, 156), float64]) */;
  %832 = %831.3;
  %833 = cast(%var_13030, dtype="float64") /* ty=Tensor[(3, 156), float64] */;
  %834 = shape_of(%832, dtype="int32") /* ty=Tensor[(2), int32] */;
  %835 = cast(%832, dtype="float64") /* ty=Tensor[(3, 156), float64] */;
  %836 = dyn.reshape(%833, %834, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %837 = minimum(%835, %836) /* ty=Tensor[(3, 156), float64] */;
  %838 = cast(%837, dtype="float32") /* ty=Tensor[(3, 156), float32] */;
  %839 = %830.0;
  %840 = rsqrt(%838) /* ty=Tensor[(3, 156), float32] */;
  (%839, %840)
}

def @func_2942() -> Tensor[(14, 12, 13), float32] {
  %841 = @func_1191() /* ty=Tensor[(14, 12, 13), uint32] */;
  %842 = cast(%841, dtype="float32") /* ty=Tensor[(14, 12, 13), float32] */;
  exp(%842) /* ty=Tensor[(14, 12, 13), float32] */
}

def @func_10869() -> Tensor[(14, 12, 13), float64] {
  @func_10867() /* ty=Tensor[(14, 12, 13), float64] */
}

def @func_5189() -> (Tensor[(14, 12, 13), uint32],) {
  @func_5187() /* ty=(Tensor[(14, 12, 13), uint32],) */
}

def @func_11410() -> (Tensor[(14, 12, 13), float64],) {
  @func_11408() /* ty=(Tensor[(14, 12, 13), float64],) */
}

def @func_12654() -> Tensor[(14, 12, 13), float64] {
  @func_12652() /* ty=Tensor[(14, 12, 13), float64] */
}

def @func_2216() -> (Tensor[(14, 12, 13), float64],) {
  %844 = fn () -> (Tensor[(14, 12, 13), float64],) {
    %843 = @func_1768() /* ty=Tensor[(14, 12, 13), float64] */;
    (%843,)
  };
  %844() /* ty=(Tensor[(14, 12, 13), float64],) */
}

def @func_7342() -> Tensor[(14, 12, 13), float64] {
  @func_7340() /* ty=Tensor[(14, 12, 13), float64] */
}

def @func_9986() -> Tensor[(14, 12, 13), float64] {
  @func_9984() /* ty=Tensor[(14, 12, 13), float64] */
}

def @func_11213() -> (Tensor[(14, 12, 13), float64], Tensor[(10, 7, 1), bool], uint32) {
  %850 = fn () -> (Tensor[(14, 12, 13), float64], Tensor[(10, 7, 1), bool], uint32) {
    %845 = cast(meta[relay.Constant][35] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %846 = reshape(%845, newshape=[]) /* ty=uint32 */;
    %847 = @func_9370(%846) /* ty=(Tensor[(10, 7, 1), bool],) */;
    %848 = @func_11149() /* ty=Tensor[(14, 12, 13), float64] */;
    %849 = %847.0;
    (%848, %849, meta[relay.Constant][35] /* ty=uint32 */)
  };
  %850() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(10, 7, 1), bool], uint32) */
}

def @func_7576() -> Tensor[(14, 12, 13), float32] {
  %852 = fn () -> Tensor[(14, 12, 13), float32] {
    %851 = @func_4130() /* ty=(Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), float32]) */;
    %851.1
  };
  %852() /* ty=Tensor[(14, 12, 13), float32] */
}

def @func_2037(%var_2035: Tensor[(14, 12, 13), int32], %var_2036: Tensor[(168), float32]) -> (Tensor[(14, 12, 13), bool], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(2, 15, 9), float64], Tensor[(270), uint8], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), uint32], Tensor[(168), float32], Tensor[(168), float32], Tensor[(15, 4, ?), bool], Tensor[(2, 15, 9), float64]) {
  %890 = fn (%var_1949: Tensor[(14, 12, 13), int32], %var_1999: Tensor[(168), float32]) -> (Tensor[(14, 12, 13), bool], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(2, 15, 9), float64], Tensor[(270), uint8], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), uint32], Tensor[(168), float32], Tensor[(168), float32], Tensor[(15, 4, ?), bool], Tensor[(2, 15, 9), float64]) {
    %853 = @func_1533() /* ty=Tensor[(14, 12, 13), int32] */;
    %854 = cast(%var_1949, dtype="bool") /* ty=Tensor[(14, 12, 13), bool] */;
    %855 = shape_of(%853, dtype="int32") /* ty=Tensor[(3), int32] */;
    %856 = cast(%853, dtype="bool") /* ty=Tensor[(14, 12, 13), bool] */;
    %857 = dyn.reshape(%854, %855, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %858 = equal(%856, %857) /* ty=Tensor[(14, 12, 13), bool] */;
    %859 = cast(%858, dtype="bool") /* ty=Tensor[(14, 12, 13), bool] */;
    %860 = shape_of(%var_1949, dtype="int32") /* ty=Tensor[(3), int32] */;
    %861 = cast(%var_1949, dtype="bool") /* ty=Tensor[(14, 12, 13), bool] */;
    %862 = dyn.reshape(%859, %860, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %863 = cast(%853, dtype="float64") /* ty=Tensor[(14, 12, 13), float64] */;
    %864 = cast(meta[relay.Constant][36] /* ty=Tensor[(270), uint8] */, dtype="uint8") /* ty=Tensor[(270), uint8] */;
    %865 = cast(meta[relay.Constant][36] /* ty=Tensor[(270), uint8] */, dtype="uint8") /* ty=Tensor[(270), uint8] */;
    %866 = reshape(%864, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), uint8] */;
    %867 = reshape(%865, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), uint8] */;
    %868 = cast(%858, dtype="float32") /* ty=Tensor[(14, 12, 13), float32] */;
    %869 = cast(%var_1999, dtype="float32") /* ty=Tensor[(168), float32] */;
    %870 = reshape(%869, newshape=[168]) /* ty=Tensor[(168), float32] */;
    %871 = @func_1733(%870) /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(168), float32], Tensor[(168), float32], Tensor[(14, 12, 13), float32]) */;
    %872 = %871.3;
    %873 = cast(%872, dtype="float32") /* ty=Tensor[(168), float32] */;
    %874 = reshape(%873, newshape=[168]) /* ty=Tensor[(168), float32] */;
    %875 = @func_1136(%874) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(15, 4, ?), bool], Tensor[(168), float32], Tensor[(15, 4, ?), bool]) */;
    %876 = cast(meta[relay.Constant][36] /* ty=Tensor[(270), uint8] */, dtype="uint8") /* ty=Tensor[(270), uint8] */;
    %877 = cast(meta[relay.Constant][36] /* ty=Tensor[(270), uint8] */, dtype="uint8") /* ty=Tensor[(270), uint8] */;
    %878 = reshape(%876, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), uint8] */;
    %879 = reshape(%877, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), uint8] */;
    %880 = greater_equal(%861, %862) /* ty=Tensor[(14, 12, 13), bool] */;
    %881 = sinh(%863) /* ty=Tensor[(14, 12, 13), float64] */;
    %882 = @func_825() /* ty=Tensor[(14, 12, 13), uint32] */;
    %883 = @func_825() /* ty=Tensor[(14, 12, 13), uint32] */;
    %884 = @func_870(%866, %867) /* ty=Tensor[(2, 15, 9), float64] */;
    %885 = @func_1081() /* ty=Tensor[(14, 12, 13), float64] */;
    %886 = tan(%868) /* ty=Tensor[(14, 12, 13), float32] */;
    %887 = @func_778() /* ty=Tensor[(14, 12, 13), uint32] */;
    %888 = %875.1;
    %889 = @func_870(%878, %879) /* ty=Tensor[(2, 15, 9), float64] */;
    (%880, %881, %882, %883, %884, meta[relay.Constant][36] /* ty=Tensor[(270), uint8] */, %885, %886, %887, %872, %var_1999, %888, %889)
  };
  %890(%var_2035, %var_2036) /* ty=(Tensor[(14, 12, 13), bool], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(2, 15, 9), float64], Tensor[(270), uint8], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), uint32], Tensor[(168), float32], Tensor[(168), float32], Tensor[(15, 4, ?), bool], Tensor[(2, 15, 9), float64]) */
}

def @func_8690() -> (Tensor[(270), uint8],) {
  @func_8688() /* ty=(Tensor[(270), uint8],) */
}

def @func_7941(%var_7940: Tensor[(168), float32]) -> (Tensor[(4, 6, 8), float64], Tensor[(14, 12, 13), uint32], Tensor[(168), float32], Tensor[(14, 12, 13), float64], Tensor[(13, 11, 11), bool]) {
  %900 = fn (%var_7907: Tensor[(168), float32]) -> (Tensor[(4, 6, 8), float64], Tensor[(14, 12, 13), uint32], Tensor[(168), float32], Tensor[(14, 12, 13), float64], Tensor[(13, 11, 11), bool]) {
    %891 = cast(meta[relay.Constant][37] /* ty=Tensor[(4, 6, 8), float64] */, dtype="float64") /* ty=Tensor[(4, 6, 8), float64] */;
    %892 = cast(%var_7907, dtype="float32") /* ty=Tensor[(168), float32] */;
    %893 = reshape(%892, newshape=[168]) /* ty=Tensor[(168), float32] */;
    %894 = @func_1642(%893) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float32]) */;
    %895 = @func_3924() /* ty=(Tensor[(13, 11, 11), bool], Tensor[(11, 11, 12), float64], Tensor[(14, 12, 13), float64]) */;
    %896 = acosh(%891) /* ty=Tensor[(4, 6, 8), float64] */;
    %897 = %894.2;
    %898 = @func_7340() /* ty=Tensor[(14, 12, 13), float64] */;
    %899 = %895.0;
    (%896, %897, %var_7907, %898, %899)
  };
  %900(%var_7940) /* ty=(Tensor[(4, 6, 8), float64], Tensor[(14, 12, 13), uint32], Tensor[(168), float32], Tensor[(14, 12, 13), float64], Tensor[(13, 11, 11), bool]) */
}

def @func_7798() -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) {
  %903 = fn () -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) {
    %901 = @func_1754() /* ty=Tensor[(14, 12, 13), uint32] */;
    %902 = @func_1754() /* ty=Tensor[(14, 12, 13), uint32] */;
    (%901, %902)
  };
  %903() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) */
}

def @func_9739() -> Tensor[(12, 3, 3), float32] {
  %905 = fn () -> Tensor[(12, 3, 3), float32] {
    %904 = cast(meta[relay.Constant][38] /* ty=Tensor[(12, 3, 3), float32] */, dtype="float32") /* ty=Tensor[(12, 3, 3), float32] */;
    tan(%904) /* ty=Tensor[(12, 3, 3), float32] */
  };
  %905() /* ty=Tensor[(12, 3, 3), float32] */
}

def @func_9329() -> (Tensor[(14, 12, 13), uint32],) {
  %907 = fn () -> (Tensor[(14, 12, 13), uint32],) {
    %906 = @func_6339() /* ty=Tensor[(14, 12, 13), uint32] */;
    (%906,)
  };
  %907() /* ty=(Tensor[(14, 12, 13), uint32],) */
}

def @func_10561(%var_10559: Tensor[(6, 3, 5), float32], %var_10560: Tensor[(6, 3, 5), float32]) -> (Tensor[(6, 3, 5), int64],) {
  %918 = fn (%var_10522: Tensor[(6, 3, 5), float32], %var_10552: Tensor[(6, 3, 5), float32]) -> (Tensor[(6, 3, 5), int64],) {
    %908 = cast(meta[relay.Constant][39] /* ty=Tensor[(6, 3, 5), float32] */, dtype="float32") /* ty=Tensor[(6, 3, 5), float32] */;
    %909 = shape_of(%var_10522, dtype="int32") /* ty=Tensor[(3), int32] */;
    %910 = cast(%var_10522, dtype="float32") /* ty=Tensor[(6, 3, 5), float32] */;
    %911 = dyn.reshape(%908, %909, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %912 = mod(%910, %911) /* ty=Tensor[(6, 3, 5), float32] */;
    %913 = cast(%var_10552, dtype="int64") /* ty=Tensor[(6, 3, 5), int64] */;
    %914 = shape_of(%912, dtype="int32") /* ty=Tensor[(3), int32] */;
    %915 = cast(%912, dtype="int64") /* ty=Tensor[(6, 3, 5), int64] */;
    %916 = dyn.reshape(%913, %914, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %917 = logical_xor(%915, %916) /* ty=Tensor[(6, 3, 5), int64] */;
    (%917,)
  };
  %918(%var_10559, %var_10560) /* ty=(Tensor[(6, 3, 5), int64],) */
}

def @func_2437(%var_2435: uint64, %var_2436: Tensor[(10, 5), uint64]) -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], uint64, Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(60), int16], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(10, 5), uint64], Tensor[(10, 5), uint64], Tensor[(14, 12, 13), uint32], Tensor[(3, 20), int16], Tensor[(15, 4, 168), float32]) {
  @func_2433(%var_2435, %var_2436) /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], uint64, Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(60), int16], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(10, 5), uint64], Tensor[(10, 5), uint64], Tensor[(14, 12, 13), uint32], Tensor[(3, 20), int16], Tensor[(15, 4, 168), float32]) */
}

def @func_9051() -> (Tensor[(14, 12, 13), float64], Tensor[(5, 10, 1), bool], uint64, Tensor[(50), uint64]) {
  %927 = fn () -> (Tensor[(14, 12, 13), float64], Tensor[(5, 10, 1), bool], uint64, Tensor[(50), uint64]) {
    %919 = @func_6280() /* ty=(Tensor[(14, 12, 13), float64],) */;
    %920 = cast(meta[relay.Constant][40] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %921 = cast(meta[relay.Constant][41] /* ty=Tensor[(50), uint64] */, dtype="uint64") /* ty=Tensor[(50), uint64] */;
    %922 = reshape(%920, newshape=[]) /* ty=uint64 */;
    %923 = reshape(%921, newshape=[5, 10, 1]) /* ty=Tensor[(5, 10, 1), uint64] */;
    %924 = @func_408(%922, %923) /* ty=(Tensor[(5, 10, 1), bool], Tensor[(15, 4, ?), bool], Tensor[(3, 20), int16]) */;
    %925 = %919.0;
    %926 = %924.0;
    (%925, %926, meta[relay.Constant][40] /* ty=uint64 */, meta[relay.Constant][41] /* ty=Tensor[(50), uint64] */)
  };
  %927() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(5, 10, 1), bool], uint64, Tensor[(50), uint64]) */
}

def @func_8705() -> (Tensor[(14, 12, 13), float64],) {
  %930 = fn () -> (Tensor[(14, 12, 13), float64],) {
    %928 = @func_4351() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) */;
    %929 = %928.1;
    (%929,)
  };
  %930() /* ty=(Tensor[(14, 12, 13), float64],) */
}

def @func_874(%var_872: Tensor[(2, 15, 9), uint8], %var_873: Tensor[(2, 15, 9), uint8]) -> Tensor[(2, 15, 9), float64] {
  @func_870(%var_872, %var_873) /* ty=Tensor[(2, 15, 9), float64] */
}

def @func_1924(%var_1922: uint64, %var_1923: Tensor[(10, 5), uint64]) -> (Tensor[(14, 12, 13), float64], Tensor[(15, 4, ?), bool], uint64, Tensor[(10, 5), uint64]) {
  @func_1920(%var_1922, %var_1923) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(15, 4, ?), bool], uint64, Tensor[(10, 5), uint64]) */
}

def @func_4609(%var_4596: Tensor[(14, 12, 13), float64]) -> Tensor[(14, 12, 13), int64] {
  %931 = @func_3706() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(15, 4, ?), bool]) */;
  %932 = %931.2;
  %933 = cast(%var_4596, dtype="int64") /* ty=Tensor[(14, 12, 13), int64] */;
  %934 = shape_of(%932, dtype="int32") /* ty=Tensor[(3), int32] */;
  %935 = cast(%932, dtype="int64") /* ty=Tensor[(14, 12, 13), int64] */;
  %936 = dyn.reshape(%933, %934, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  maximum(%935, %936) /* ty=Tensor[(14, 12, 13), int64] */
}

def @func_3982(%var_3980: Tensor[(9, 13, 4), uint8], %var_3981: Tensor[(9, 13, 4), uint8]) -> Tensor[(9, 13, 4), bool] {
  @func_3978(%var_3980, %var_3981) /* ty=Tensor[(9, 13, 4), bool] */
}

def @func_6183() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) {
  %937 = @func_5029() /* ty=Tensor[(14, 12, 13), float64] */;
  %938 = @func_825() /* ty=Tensor[(14, 12, 13), uint32] */;
  (%937, %938)
}

def @func_2305() -> Tensor[(14, 12, 13), float64] {
  %940 = fn () -> Tensor[(14, 12, 13), float64] {
    %939 = @func_2215() /* ty=(Tensor[(14, 12, 13), float64],) */;
    %939.0
  };
  %940() /* ty=Tensor[(14, 12, 13), float64] */
}

def @func_8607() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float32]) {
  %941 = @func_4130() /* ty=(Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), float32]) */;
  %942 = @func_2304() /* ty=Tensor[(14, 12, 13), float64] */;
  %943 = %941.0;
  (%942, %943)
}

def @func_5419() -> Tensor[(14, 12, 13), float64] {
  @func_5417() /* ty=Tensor[(14, 12, 13), float64] */
}

def @func_8677(%var_8676: Tensor[(270), uint8]) -> (Tensor[(14, 12, 13), float64], Tensor[(50), uint64], Tensor[(480), float32], Tensor[(168), float32], Tensor[(14, 12, 13), float64], Tensor[(270), uint8], Tensor[(270), uint8], uint64, Tensor[(14, 12, 13), float64]) {
  %961 = fn (%var_8662: Tensor[(270), uint8]) -> (Tensor[(14, 12, 13), float64], Tensor[(50), uint64], Tensor[(480), float32], Tensor[(168), float32], Tensor[(14, 12, 13), float64], Tensor[(270), uint8], Tensor[(270), uint8], uint64, Tensor[(14, 12, 13), float64]) {
    %944 = @func_5969() /* ty=(Tensor[(14, 12, 13), float64],) */;
    %945 = cast(meta[relay.Constant][42] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
    %946 = cast(meta[relay.Constant][43] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
    %947 = reshape(%945, newshape=[16, 6, 5]) /* ty=Tensor[(16, 6, 5), float32] */;
    %948 = reshape(%946, newshape=[168]) /* ty=Tensor[(168), float32] */;
    %949 = @func_7009(%947, %948) /* ty=(Tensor[(16, 6, 5), float32], Tensor[(50), uint64], Tensor[(168), float32], Tensor[(50), uint64]) */;
    %950 = @func_6183() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) */;
    %951 = cast(%var_8662, dtype="uint8") /* ty=Tensor[(270), uint8] */;
    %952 = reshape(%951, newshape=[270]) /* ty=Tensor[(270), uint8] */;
    %953 = @func_5148(%952) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(270), uint8], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
    %954 = @func_6565() /* ty=(Tensor[(14, 12, 13), float64], uint64, uint64, Tensor[(50, 1), float64]) */;
    %955 = %944.0;
    %956 = %949.1;
    %957 = %950.0;
    %958 = %953.2;
    %959 = %954.1;
    %960 = @func_1229() /* ty=Tensor[(14, 12, 13), float64] */;
    (%955, %956, meta[relay.Constant][42] /* ty=Tensor[(480), float32] */, meta[relay.Constant][43] /* ty=Tensor[(168), float32] */, %957, %958, %var_8662, %959, %960)
  };
  %961(%var_8676) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(50), uint64], Tensor[(480), float32], Tensor[(168), float32], Tensor[(14, 12, 13), float64], Tensor[(270), uint8], Tensor[(270), uint8], uint64, Tensor[(14, 12, 13), float64]) */
}

def @func_4130() -> (Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), float32]) {
  %962 = @func_2942() /* ty=Tensor[(14, 12, 13), float32] */;
  %963 = @func_2942() /* ty=Tensor[(14, 12, 13), float32] */;
  (%962, %963)
}

def @func_7307(%var_7305: Tensor[(1, 168), float32]) -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(15, 4, 168), bool], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(15, 4, 168), int32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(1, 168), float32]) {
  @func_7304(%var_7305) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(15, 4, 168), bool], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(15, 4, 168), int32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(1, 168), float32]) */
}

def @func_9370(%var_9337: uint32) -> (Tensor[(10, 7, 1), bool],) {
  %964 = cast(%var_9337, dtype="bool") /* ty=bool */;
  %965 = cast(meta[relay.Constant][44] /* ty=Tensor[(10, 7, 1), uint32] */, dtype="bool") /* ty=Tensor[(10, 7, 1), bool] */;
  %966 = less(%964, %965) /* ty=Tensor[(10, 7, 1), bool] */;
  (%966,)
}

def @func_7717() -> (Tensor[(14, 12, 13), float64],) {
  %969 = fn () -> (Tensor[(14, 12, 13), float64],) {
    %967 = @func_6006() /* ty=(Tensor[(14, 12, 13), float64],) */;
    %968 = %967.0;
    (%968,)
  };
  %969() /* ty=(Tensor[(14, 12, 13), float64],) */
}

def @func_8382() -> Tensor[(4, 1, 7), float64] {
  %971 = fn () -> Tensor[(4, 1, 7), float64] {
    %970 = cast(meta[relay.Constant][45] /* ty=Tensor[(4, 1, 7), float64] */, dtype="float64") /* ty=Tensor[(4, 1, 7), float64] */;
    sigmoid(%970) /* ty=Tensor[(4, 1, 7), float64] */
  };
  %971() /* ty=Tensor[(4, 1, 7), float64] */
}

def @func_10985(%var_10984: Tensor[(3, 50), float32]) -> (Tensor[(3, 50), int32],) {
  %978 = fn (%var_10978: Tensor[(3, 50), float32]) -> (Tensor[(3, 50), int32],) {
    %972 = @func_9783() /* ty=Tensor[(3, 50), float32] */;
    %973 = cast(%var_10978, dtype="int32") /* ty=Tensor[(3, 50), int32] */;
    %974 = shape_of(%972, dtype="int32") /* ty=Tensor[(2), int32] */;
    %975 = cast(%972, dtype="int32") /* ty=Tensor[(3, 50), int32] */;
    %976 = dyn.reshape(%973, %974, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
    %977 = left_shift(%975, %976) /* ty=Tensor[(3, 50), int32] */;
    (%977,)
  };
  %978(%var_10984) /* ty=(Tensor[(3, 50), int32],) */
}

def @func_12598(%var_12595: Tensor[(9, 11, 7), float32], %var_12596: Tensor[(9, 11, 7), float32], %var_12597: Tensor[(1, 30), float64]) -> (Tensor[(9, 11, 7), float32], Tensor[(14, 12, 13), float64], Tensor[(9, 11, 7), float64], Tensor[(5, 2, 3), float64], Tensor[(1, 30), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) {
  @func_12593(%var_12595, %var_12596, %var_12597) /* ty=(Tensor[(9, 11, 7), float32], Tensor[(14, 12, 13), float64], Tensor[(9, 11, 7), float64], Tensor[(5, 2, 3), float64], Tensor[(1, 30), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) */
}

def @func_10822() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) {
  %982 = fn () -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) {
    %979 = @func_4573() /* ty=(Tensor[(14, 12, 13), uint32],) */;
    %980 = @func_6354() /* ty=Tensor[(14, 12, 13), float64] */;
    %981 = %979.0;
    (%980, %981)
  };
  %982() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) */
}

def @func_4891(%var_4821: Tensor[(50), uint64], %var_4834: Tensor[(168), float32], %var_4878: Tensor[(15, 4, 168), uint8]) -> (Tensor[(270), uint8], uint64, Tensor[(50), uint64], Tensor[(168), float32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(15, 4, 168), int32]) {
  %983 = cast(%var_4834, dtype="float32") /* ty=Tensor[(168), float32] */;
  %984 = reshape(%983, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %985 = @func_1733(%984) /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(168), float32], Tensor[(168), float32], Tensor[(14, 12, 13), float32]) */;
  %986 = @func_4351() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) */;
  %987 = @func_4351() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) */;
  %988 = cast(meta[relay.Constant][46] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %989 = cast(%var_4821, dtype="uint64") /* ty=Tensor[(50), uint64] */;
  %990 = reshape(%988, newshape=[]) /* ty=uint64 */;
  %991 = reshape(%989, newshape=[10, 5]) /* ty=Tensor[(10, 5), uint64] */;
  %992 = @func_2433(%990, %991) /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], uint64, Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(60), int16], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(10, 5), uint64], Tensor[(10, 5), uint64], Tensor[(14, 12, 13), uint32], Tensor[(3, 20), int16], Tensor[(15, 4, 168), float32]) */;
  %993 = %992.12;
  %994 = cast(%993, dtype="float64") /* ty=Tensor[(15, 4, 168), float64] */;
  %995 = tan(%994) /* ty=Tensor[(15, 4, 168), float64] */;
  %996 = cast(%995, dtype="uint8") /* ty=Tensor[(15, 4, 168), uint8] */;
  %997 = cast(%var_4834, dtype="uint8") /* ty=Tensor[(168), uint8] */;
  %998 = logical_xor(%996, %997) /* ty=Tensor[(15, 4, 168), uint8] */;
  %999 = cast(%var_4878, dtype="int32") /* ty=Tensor[(15, 4, 168), int32] */;
  %1000 = shape_of(%998, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1001 = cast(%998, dtype="int32") /* ty=Tensor[(15, 4, 168), int32] */;
  %1002 = dyn.reshape(%999, %1000, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %1003 = @func_3625() /* ty=Tensor[(270), uint8] */;
  %1004 = %985.3;
  %1005 = @func_2304() /* ty=Tensor[(14, 12, 13), float64] */;
  %1006 = %986.0;
  %1007 = %987.0;
  %1008 = subtract(%1001, %1002) /* ty=Tensor[(15, 4, 168), int32] */;
  (%1003, meta[relay.Constant][46] /* ty=uint64 */, %var_4821, %1004, %1005, %1006, %1007, %1008)
}

def @func_9470() -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) {
  %1009 = @func_7797() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) */;
  %1010 = @func_9176() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(270), uint8]) */;
  %1011 = @func_910() /* ty=(Tensor[(14, 12, 13), float64],) */;
  %1012 = %1009.1;
  %1013 = %1010.0;
  %1014 = @func_1754() /* ty=Tensor[(14, 12, 13), uint32] */;
  %1015 = %1011.0;
  (%1012, %1013, %1014, %1015)
}

def @func_12993() -> (Tensor[(14, 12, 13), uint32],) {
  @func_12991() /* ty=(Tensor[(14, 12, 13), uint32],) */
}

def @func_10497() -> Tensor[(11, 11, 12), float64] {
  %1017 = fn () -> Tensor[(11, 11, 12), float64] {
    %1016 = @func_3924() /* ty=(Tensor[(13, 11, 11), bool], Tensor[(11, 11, 12), float64], Tensor[(14, 12, 13), float64]) */;
    %1016.1
  };
  %1017() /* ty=Tensor[(11, 11, 12), float64] */
}

def @func_1292(%var_1290: Tensor[(270, 1), uint8]) -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(2, 15, 9), float64], Tensor[(270, 1), uint8], Tensor[(14, 12, 13), float64]) {
  @func_1289(%var_1290) /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(2, 15, 9), float64], Tensor[(270, 1), uint8], Tensor[(14, 12, 13), float64]) */
}

def @func_11420() -> Tensor[(14, 12, 13), uint32] {
  @func_11418() /* ty=Tensor[(14, 12, 13), uint32] */
}

def @func_11968() -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) {
  %1018 = @func_6261() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %1019 = @func_7955() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %1020 = %1018.0;
  %1021 = %1019.0;
  (%1020, %1021)
}

def @func_11809() -> Tensor[(50), uint64] {
  %1022 = @func_11023() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(50), uint64]) */;
  %1022.2
}

def @func_1229() -> Tensor[(14, 12, 13), float64] {
  %1023 = @func_810() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %1024 = %1023.0;
  %1025 = cast(%1024, dtype="float64") /* ty=Tensor[(14, 12, 13), float64] */;
  sqrt(%1025) /* ty=Tensor[(14, 12, 13), float64] */
}

def @func_10358(%var_10356: Tensor[(168), float32]) -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(168), float32], Tensor[(168), float32], Tensor[(14, 12, 13), float64]) {
  @func_10355(%var_10356) /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(168), float32], Tensor[(168), float32], Tensor[(14, 12, 13), float64]) */
}

def @func_11811() -> Tensor[(50), uint64] {
  @func_11809() /* ty=Tensor[(50), uint64] */
}

def @func_911() -> (Tensor[(14, 12, 13), float64],) {
  %1029 = fn () -> (Tensor[(14, 12, 13), float64],) {
    %1026 = @func_778() /* ty=Tensor[(14, 12, 13), uint32] */;
    %1027 = cast(%1026, dtype="float64") /* ty=Tensor[(14, 12, 13), float64] */;
    %1028 = sigmoid(%1027) /* ty=Tensor[(14, 12, 13), float64] */;
    (%1028,)
  };
  %1029() /* ty=(Tensor[(14, 12, 13), float64],) */
}

def @func_12301(%var_12300: uint64) -> (Tensor[(14, 12, 13), float64], Tensor[(10, 5), uint64], uint64, Tensor[(270), uint8]) {
  %1036 = fn (%var_12249: uint64) -> (Tensor[(14, 12, 13), float64], Tensor[(10, 5), uint64], uint64, Tensor[(270), uint8]) {
    %1030 = cast(%var_12249, dtype="uint64") /* ty=uint64 */;
    %1031 = reshape(%1030, newshape=[]) /* ty=uint64 */;
    %1032 = @func_6917(%1031) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(10, 5), uint64], uint64, Tensor[(50), uint64], Tensor[(11, 11, 12), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), int64], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) */;
    %1033 = @func_9974() /* ty=Tensor[(14, 12, 13), float64] */;
    %1034 = %1032.1;
    %1035 = @func_4504() /* ty=Tensor[(270), uint8] */;
    (%1033, %1034, %var_12249, %1035)
  };
  %1036(%var_12300) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(10, 5), uint64], uint64, Tensor[(270), uint8]) */
}

def @func_8688() -> (Tensor[(270), uint8],) {
  %1037 = @func_3625() /* ty=Tensor[(270), uint8] */;
  (%1037,)
}

def @func_4506() -> Tensor[(270), uint8] {
  @func_4504() /* ty=Tensor[(270), uint8] */
}

def @func_3978(%var_3972: Tensor[(9, 13, 4), uint8], %var_3973: Tensor[(9, 13, 4), uint8]) -> Tensor[(9, 13, 4), bool] {
  %1038 = cast(%var_3973, dtype="bool") /* ty=Tensor[(9, 13, 4), bool] */;
  %1039 = shape_of(%var_3972, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1040 = cast(%var_3972, dtype="bool") /* ty=Tensor[(9, 13, 4), bool] */;
  %1041 = dyn.reshape(%1038, %1039, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%1040, %1041) /* ty=Tensor[(9, 13, 4), bool] */
}

def @func_4351() -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) {
  %1042 = @func_2161() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) */;
  %1043 = %1042.1;
  %1044 = cast(%1043, dtype="float64") /* ty=Tensor[(14, 12, 13), float64] */;
  %1045 = reshape(%1044, newshape=[14, 12, 13]) /* ty=Tensor[(14, 12, 13), float64] */;
  %1046 = @func_1454(%1045) /* ty=(Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), float64]) */;
  %1047 = %1046.1;
  (%1043, %1047)
}

def @func_1534() -> Tensor[(14, 12, 13), int32] {
  %1054 = fn () -> Tensor[(14, 12, 13), int32] {
    %1048 = @func_810() /* ty=(Tensor[(14, 12, 13), uint32],) */;
    %1049 = %1048.0;
    %1050 = cast(meta[relay.Constant][47] /* ty=Tensor[(14, 12, 13), uint32] */, dtype="int32") /* ty=Tensor[(14, 12, 13), int32] */;
    %1051 = shape_of(%1049, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1052 = cast(%1049, dtype="int32") /* ty=Tensor[(14, 12, 13), int32] */;
    %1053 = dyn.reshape(%1050, %1051, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    minimum(%1052, %1053) /* ty=Tensor[(14, 12, 13), int32] */
  };
  %1054() /* ty=Tensor[(14, 12, 13), int32] */
}

def @func_7102() -> (Tensor[(14, 12, 13), float64],) {
  %1056 = fn () -> (Tensor[(14, 12, 13), float64],) {
    %1055 = @func_2696() /* ty=Tensor[(14, 12, 13), float64] */;
    (%1055,)
  };
  %1056() /* ty=(Tensor[(14, 12, 13), float64],) */
}

def @func_6356() -> Tensor[(14, 12, 13), float64] {
  @func_6354() /* ty=Tensor[(14, 12, 13), float64] */
}

def @func_11270() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) {
  %1057 = @func_11212() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(10, 7, 1), bool], uint32) */;
  %1058 = @func_9118() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %1059 = @func_7797() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) */;
  %1060 = @func_5417() /* ty=Tensor[(14, 12, 13), float64] */;
  %1061 = @func_3755() /* ty=Tensor[(14, 12, 13), float64] */;
  %1062 = %1057.0;
  %1063 = %1058.0;
  %1064 = %1059.1;
  (%1060, %1061, %1062, %1063, %1064)
}

def @func_5666() -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) {
  %1065 = @func_810() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %1066 = @func_3280() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(168), float32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
  %1067 = %1065.0;
  %1068 = %1066.3;
  (%1067, %1068)
}

def @func_7012(%var_7010: Tensor[(16, 6, 5), float32], %var_7011: Tensor[(168), float32]) -> (Tensor[(16, 6, 5), float32], Tensor[(50), uint64], Tensor[(168), float32], Tensor[(50), uint64]) {
  %1077 = fn (%var_6994: Tensor[(16, 6, 5), float32], %var_7003: Tensor[(168), float32]) -> (Tensor[(16, 6, 5), float32], Tensor[(50), uint64], Tensor[(168), float32], Tensor[(50), uint64]) {
    %1069 = cast(%var_6994, dtype="float32") /* ty=Tensor[(16, 6, 5), float32] */;
    %1070 = cast(%var_7003, dtype="float32") /* ty=Tensor[(168), float32] */;
    %1071 = cast(meta[relay.Constant][48] /* ty=Tensor[(50), uint64] */, dtype="uint64") /* ty=Tensor[(50), uint64] */;
    %1072 = reshape(%1070, newshape=[168]) /* ty=Tensor[(168), float32] */;
    %1073 = reshape(%1071, newshape=[50]) /* ty=Tensor[(50), uint64] */;
    %1074 = @func_2622(%1072, %1073) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(168), float32], Tensor[(3, 20), int16], uint64, Tensor[(50), uint64]) */;
    %1075 = log(%1069) /* ty=Tensor[(16, 6, 5), float32] */;
    %1076 = %1074.5;
    (%1075, %1076, %var_7003, meta[relay.Constant][48] /* ty=Tensor[(50), uint64] */)
  };
  %1077(%var_7010, %var_7011) /* ty=(Tensor[(16, 6, 5), float32], Tensor[(50), uint64], Tensor[(168), float32], Tensor[(50), uint64]) */
}

def @func_8925() -> Tensor[(270), uint8] {
  %1078 = fn () -> Tensor[(270), uint8] {
    @func_4978() /* ty=Tensor[(270), uint8] */
  };
  %1078() /* ty=Tensor[(270), uint8] */
}

def @func_9118() -> (Tensor[(14, 12, 13), uint32],) {
  %1079 = @func_1191() /* ty=Tensor[(14, 12, 13), uint32] */;
  (%1079,)
}

def @func_7699() -> (Tensor[(14, 12, 13), uint32], Tensor[(15, 4, 168), bool], Tensor[(168), float32], Tensor[(14, 12, 13), float64], Tensor[(270), uint8]) {
  @func_7697() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(15, 4, 168), bool], Tensor[(168), float32], Tensor[(14, 12, 13), float64], Tensor[(270), uint8]) */
}

def @func_5031() -> Tensor[(14, 12, 13), float64] {
  @func_5029() /* ty=Tensor[(14, 12, 13), float64] */
}

def @func_9310() -> (Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) {
  %1090 = fn () -> (Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) {
    %1080 = @func_4130() /* ty=(Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), float32]) */;
    %1081 = @func_2161() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) */;
    %1082 = @func_8267() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) */;
    %1083 = %1082.0;
    %1084 = cast(%1083, dtype="float64") /* ty=Tensor[(14, 12, 13), float64] */;
    %1085 = reshape(%1084, newshape=[14, 12, 13]) /* ty=Tensor[(14, 12, 13), float64] */;
    %1086 = @func_1454(%1085) /* ty=(Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), float64]) */;
    %1087 = %1080.1;
    %1088 = %1081.1;
    %1089 = %1086.1;
    (%1087, %1088, %1083, %1089)
  };
  %1090() /* ty=(Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) */
}

def @func_1754() -> Tensor[(14, 12, 13), uint32] {
  @func_1191() /* ty=Tensor[(14, 12, 13), uint32] */
}

def @func_8267() -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) {
  %1091 = @func_4203() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(2, 15, 9), float64], Tensor[(270), uint8]) */;
  %1092 = @func_5529() /* ty=Tensor[(14, 12, 13), uint32] */;
  %1093 = %1091.0;
  (%1092, %1093)
}

def @func_6766(%var_6740: Tensor[(3, 11, 7), uint16], %var_6741: Tensor[(3, 11, 7), uint16]) -> Tensor[(3, 11, 7), uint16] {
  %1094 = cast(%var_6741, dtype="uint16") /* ty=Tensor[(3, 11, 7), uint16] */;
  %1095 = shape_of(%var_6740, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1096 = cast(%var_6740, dtype="uint16") /* ty=Tensor[(3, 11, 7), uint16] */;
  %1097 = dyn.reshape(%1094, %1095, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  maximum(%1096, %1097) /* ty=Tensor[(3, 11, 7), uint16] */
}

def @func_12005(%var_11977: Tensor[(11, 9, 14), float64], %var_11982: Tensor[(12, 182), float64], %var_11985: Tensor[(12, 182), float64]) -> (Tensor[(11, 9, 14), float64], Tensor[(14, 12, 13), int64], Tensor[(12, 182), float32]) {
  %1098 = cast(%var_11977, dtype="float64") /* ty=Tensor[(11, 9, 14), float64] */;
  %1099 = cast(%var_11982, dtype="float64") /* ty=Tensor[(12, 182), float64] */;
  %1100 = reshape(%1099, newshape=[14, 12, 13]) /* ty=Tensor[(14, 12, 13), float64] */;
  %1101 = cast(%var_11985, dtype="float32") /* ty=Tensor[(12, 182), float32] */;
  %1102 = shape_of(%var_11982, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1103 = cast(%var_11982, dtype="float32") /* ty=Tensor[(12, 182), float32] */;
  %1104 = dyn.reshape(%1101, %1102, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %1105 = cos(%1098) /* ty=Tensor[(11, 9, 14), float64] */;
  %1106 = @func_4609(%1100) /* ty=Tensor[(14, 12, 13), int64] */;
  %1107 = floor_mod(%1103, %1104) /* ty=Tensor[(12, 182), float32] */;
  (%1105, %1106, %1107)
}

def @func_11386() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(3, 50), int32], Tensor[(150), float32]) {
  %1108 = @func_11270() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) */;
  %1109 = cast(meta[relay.Constant][49] /* ty=Tensor[(150), float32] */, dtype="float32") /* ty=Tensor[(150), float32] */;
  %1110 = reshape(%1109, newshape=[3, 50]) /* ty=Tensor[(3, 50), float32] */;
  %1111 = @func_10983(%1110) /* ty=(Tensor[(3, 50), int32],) */;
  %1112 = @func_2696() /* ty=Tensor[(14, 12, 13), float64] */;
  %1113 = %1108.2;
  %1114 = %1111.0;
  (%1112, %1113, %1114, meta[relay.Constant][49] /* ty=Tensor[(150), float32] */)
}

def @func_6419(%var_6391: Tensor[(6, 28), float32]) -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(15, 4, ?), bool], Tensor[(6, 28), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(168), float32]) {
  %1115 = @func_1584() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) */;
  %1116 = cast(%var_6391, dtype="float32") /* ty=Tensor[(6, 28), float32] */;
  %1117 = reshape(%1116, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %1118 = @func_1136(%1117) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(15, 4, ?), bool], Tensor[(168), float32], Tensor[(15, 4, ?), bool]) */;
  %1119 = @func_778() /* ty=Tensor[(14, 12, 13), uint32] */;
  %1120 = cast(%1119, dtype="float64") /* ty=Tensor[(14, 12, 13), float64] */;
  %1121 = reshape(%1120, newshape=[14, 12, 13]) /* ty=Tensor[(14, 12, 13), float64] */;
  %1122 = @func_2878(%1121) /* ty=(Tensor[(14, 12, 13), float32], Tensor[(1, 168), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), bool]) */;
  %1123 = cast(%var_6391, dtype="float32") /* ty=Tensor[(6, 28), float32] */;
  %1124 = reshape(%1123, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %1125 = @func_2817(%1124) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(168), float32]) */;
  %1126 = %1115.0;
  %1127 = @func_6339() /* ty=Tensor[(14, 12, 13), uint32] */;
  %1128 = %1118.1;
  %1129 = %1122.2;
  %1130 = %1125.1;
  (%1126, %1127, %1128, %var_6391, %1119, %1129, %1130)
}

def @func_7774() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) {
  %1131 = @func_5702() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
  %1132 = %1131.1;
  %1133 = @func_1754() /* ty=Tensor[(14, 12, 13), uint32] */;
  (%1132, %1133)
}

def @func_1231() -> Tensor[(14, 12, 13), float64] {
  @func_1229() /* ty=Tensor[(14, 12, 13), float64] */
}

def @func_11418() -> Tensor[(14, 12, 13), uint32] {
  @func_7481() /* ty=Tensor[(14, 12, 13), uint32] */
}

def @func_3595() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) {
  %1134 = @func_910() /* ty=(Tensor[(14, 12, 13), float64],) */;
  %1135 = @func_2215() /* ty=(Tensor[(14, 12, 13), float64],) */;
  %1136 = @func_2524() /* ty=(Tensor[(14, 12, 13), int32], Tensor[(14, 12, 13), float64]) */;
  %1137 = %1134.0;
  %1138 = %1135.0;
  %1139 = %1136.1;
  (%1137, %1138, %1139)
}

def @func_5042() -> Tensor[(11, 11, 12), float32] {
  %1143 = fn () -> Tensor[(11, 11, 12), float32] {
    %1140 = @func_3924() /* ty=(Tensor[(13, 11, 11), bool], Tensor[(11, 11, 12), float64], Tensor[(14, 12, 13), float64]) */;
    %1141 = %1140.1;
    %1142 = cast(%1141, dtype="float32") /* ty=Tensor[(11, 11, 12), float32] */;
    cosh(%1142) /* ty=Tensor[(11, 11, 12), float32] */
  };
  %1143() /* ty=Tensor[(11, 11, 12), float32] */
}

def @func_6248(%var_6246: Tensor[(14, 12, 13), float64]) -> (Tensor[(14, 12, 13), int64], Tensor[(1, 168), float32]) {
  @func_6245(%var_6246) /* ty=(Tensor[(14, 12, 13), int64], Tensor[(1, 168), float32]) */
}

def @func_9435() -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(11, 11, 12), float64], Tensor[(1, 168), float32]) {
  %1153 = fn () -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(11, 11, 12), float64], Tensor[(1, 168), float32]) {
    %1144 = @func_810() /* ty=(Tensor[(14, 12, 13), uint32],) */;
    %1145 = @func_7716() /* ty=(Tensor[(14, 12, 13), float64],) */;
    %1146 = %1145.0;
    %1147 = cast(%1146, dtype="float64") /* ty=Tensor[(14, 12, 13), float64] */;
    %1148 = reshape(%1147, newshape=[14, 12, 13]) /* ty=Tensor[(14, 12, 13), float64] */;
    %1149 = @func_2878(%1148) /* ty=(Tensor[(14, 12, 13), float32], Tensor[(1, 168), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), bool]) */;
    %1150 = %1144.0;
    %1151 = @func_3364() /* ty=Tensor[(11, 11, 12), float64] */;
    %1152 = %1149.1;
    (%1150, %1146, %1151, %1152)
  };
  %1153() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(11, 11, 12), float64], Tensor[(1, 168), float32]) */
}

def @func_5530() -> Tensor[(14, 12, 13), uint32] {
  %1155 = fn () -> Tensor[(14, 12, 13), uint32] {
    %1154 = @func_4573() /* ty=(Tensor[(14, 12, 13), uint32],) */;
    %1154.0
  };
  %1155() /* ty=Tensor[(14, 12, 13), uint32] */
}

def @func_11505() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(4, 13, 14), float32], Tensor[(56), float32], Tensor[(728), float32]) {
  %1165 = fn () -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(4, 13, 14), float32], Tensor[(56), float32], Tensor[(728), float32]) {
    %1156 = @func_5702() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
    %1157 = @func_6261() /* ty=(Tensor[(14, 12, 13), uint32],) */;
    %1158 = cast(meta[relay.Constant][50] /* ty=Tensor[(56), float32] */, dtype="float32") /* ty=Tensor[(56), float32] */;
    %1159 = cast(meta[relay.Constant][51] /* ty=Tensor[(728), float32] */, dtype="float32") /* ty=Tensor[(728), float32] */;
    %1160 = reshape(%1158, newshape=[4, 1, 14]) /* ty=Tensor[(4, 1, 14), float32] */;
    %1161 = reshape(%1159, newshape=[4, 13, 14]) /* ty=Tensor[(4, 13, 14), float32] */;
    %1162 = %1156.1;
    %1163 = %1157.0;
    %1164 = @func_5871(%1160, %1161) /* ty=Tensor[(4, 13, 14), float32] */;
    (%1162, %1163, %1164, meta[relay.Constant][50] /* ty=Tensor[(56), float32] */, meta[relay.Constant][51] /* ty=Tensor[(728), float32] */)
  };
  %1165() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(4, 13, 14), float32], Tensor[(56), float32], Tensor[(728), float32]) */
}

def @func_11819() -> Tensor[(14, 12, 13), float64] {
  %1167 = fn () -> Tensor[(14, 12, 13), float64] {
    %1166 = @func_10088() /* ty=(Tensor[(14, 12, 13), float64],) */;
    %1166.0
  };
  %1167() /* ty=Tensor[(14, 12, 13), float64] */
}

def @func_8892() -> (Tensor[(14, 12, 13), float64],) {
  @func_8890() /* ty=(Tensor[(14, 12, 13), float64],) */
}

def @func_12122() -> (Tensor[(270), uint8], Tensor[(270), uint8], Tensor[(270), uint8], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) {
  %1168 = @func_10224() /* ty=(Tensor[(270), uint8],) */;
  %1169 = %1168.0;
  %1170 = cast(%1169, dtype="uint8") /* ty=Tensor[(270), uint8] */;
  %1171 = reshape(%1170, newshape=[270]) /* ty=Tensor[(270), uint8] */;
  %1172 = @func_5148(%1171) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64], Tensor[(270), uint8], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
  %1173 = @func_8221() /* ty=(Tensor[(14, 12, 13), uint32],) */;
  %1174 = @func_4504() /* ty=Tensor[(270), uint8] */;
  %1175 = %1172.2;
  %1176 = %1173.0;
  %1177 = @func_1768() /* ty=Tensor[(14, 12, 13), float64] */;
  (%1169, %1174, %1175, %1176, %1177)
}

def @func_316(%var_285: Tensor[(15, 4, 1), int16], %var_286: Tensor[(15, 4, 1), int16]) -> (Tensor[(15, 4, ?), bool],) {
  %1178 = cast(%var_286, dtype="int32") /* ty=Tensor[(15, 4, 1), int32] */;
  %1179 = shape_of(%var_285, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1180 = cast(%var_285, dtype="int32") /* ty=Tensor[(15, 4, 1), int32] */;
  %1181 = dyn.reshape(%1178, %1179, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %1182 = left_shift(%1180, %1181) /* ty=Tensor[(15, 4, ?), int32] */;
  %1183 = cast(%var_286, dtype="bool") /* ty=Tensor[(15, 4, 1), bool] */;
  %1184 = shape_of(%var_285, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1185 = cast(%var_285, dtype="bool") /* ty=Tensor[(15, 4, 1), bool] */;
  %1186 = dyn.reshape(%1183, %1184, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1187 = greater(%1185, %1186) /* ty=Tensor[(15, 4, ?), bool] */;
  %1188 = cast(%1187, dtype="bool") /* ty=Tensor[(15, 4, ?), bool] */;
  %1189 = shape_of(%1182, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1190 = cast(%1182, dtype="bool") /* ty=Tensor[(15, 4, ?), bool] */;
  %1191 = dyn.reshape(%1188, %1189, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1192 = less(%1190, %1191) /* ty=Tensor[(15, 4, ?), bool] */;
  (%1192,)
}

def @func_7340() -> Tensor[(14, 12, 13), float64] {
  %1193 = @func_3924() /* ty=(Tensor[(13, 11, 11), bool], Tensor[(11, 11, 12), float64], Tensor[(14, 12, 13), float64]) */;
  %1193.2
}

def @func_12774() -> Tensor[(14, 12, 13), float32] {
  @func_12772() /* ty=Tensor[(14, 12, 13), float32] */
}

def @func_8084() -> Tensor[(14, 12, 13), float64] {
  @func_7188() /* ty=Tensor[(14, 12, 13), float64] */
}

def @func_812() -> (Tensor[(14, 12, 13), uint32],) {
  @func_810() /* ty=(Tensor[(14, 12, 13), uint32],) */
}

def @func_5308() -> (Tensor[(14, 12, 13), float64],) {
  %1194 = @func_1055() /* ty=Tensor[(14, 12, 13), float64] */;
  (%1194,)
}

def @func_12124() -> (Tensor[(270), uint8], Tensor[(270), uint8], Tensor[(270), uint8], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) {
  @func_12122() /* ty=(Tensor[(270), uint8], Tensor[(270), uint8], Tensor[(270), uint8], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) */
}

def @func_7482() -> Tensor[(14, 12, 13), uint32] {
  %1195 = fn () -> Tensor[(14, 12, 13), uint32] {
    @func_6339() /* ty=Tensor[(14, 12, 13), uint32] */
  };
  %1195() /* ty=Tensor[(14, 12, 13), uint32] */
}

def @func_7540() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) {
  %1200 = fn () -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) {
    %1196 = @func_4351() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) */;
    %1197 = @func_4573() /* ty=(Tensor[(14, 12, 13), uint32],) */;
    %1198 = %1196.1;
    %1199 = %1197.0;
    (%1198, %1199)
  };
  %1200() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) */
}

def @func_1644(%var_1643: Tensor[(168), float32]) -> (Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float32]) {
  %1210 = fn (%var_1610: Tensor[(168), float32]) -> (Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float32]) {
    %1201 = @func_1584() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) */;
    %1202 = cast(%var_1610, dtype="float32") /* ty=Tensor[(168), float32] */;
    %1203 = reshape(%1202, newshape=[168]) /* ty=Tensor[(168), float32] */;
    %1204 = @func_1136(%1203) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(15, 4, ?), bool], Tensor[(168), float32], Tensor[(15, 4, ?), bool]) */;
    %1205 = %1204.0;
    %1206 = cast(%1205, dtype="float32") /* ty=Tensor[(14, 12, 13), float32] */;
    %1207 = %1201.0;
    %1208 = @func_778() /* ty=Tensor[(14, 12, 13), uint32] */;
    %1209 = asinh(%1206) /* ty=Tensor[(14, 12, 13), float32] */;
    (%1207, %var_1610, %1208, %1209)
  };
  %1210(%var_1643) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(168), float32], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float32]) */
}

def @func_9975() -> Tensor[(14, 12, 13), float64] {
  %1211 = fn () -> Tensor[(14, 12, 13), float64] {
    @func_8084() /* ty=Tensor[(14, 12, 13), float64] */
  };
  %1211() /* ty=Tensor[(14, 12, 13), float64] */
}

def @func_7432() -> Tensor[(14, 12, 13), float64] {
  @func_3755() /* ty=Tensor[(14, 12, 13), float64] */
}

def @func_8571() -> (Tensor[(270), uint8], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(3, 156), float64]) {
  %1228 = fn () -> (Tensor[(270), uint8], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(3, 156), float64]) {
    %1212 = @func_7697() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(15, 4, 168), bool], Tensor[(168), float32], Tensor[(14, 12, 13), float64], Tensor[(270), uint8]) */;
    %1213 = @func_7774() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) */;
    %1214 = @func_2215() /* ty=(Tensor[(14, 12, 13), float64],) */;
    %1215 = cast(meta[relay.Constant][52] /* ty=Tensor[(3, 156), uint8] */, dtype="uint8") /* ty=Tensor[(3, 156), uint8] */;
    %1216 = cast(meta[relay.Constant][52] /* ty=Tensor[(3, 156), uint8] */, dtype="uint8") /* ty=Tensor[(3, 156), uint8] */;
    %1217 = reshape(%1215, newshape=[9, 13, 4]) /* ty=Tensor[(9, 13, 4), uint8] */;
    %1218 = reshape(%1216, newshape=[9, 13, 4]) /* ty=Tensor[(9, 13, 4), uint8] */;
    %1219 = @func_3978(%1217, %1218) /* ty=Tensor[(9, 13, 4), bool] */;
    %1220 = cast(%1219, dtype="float64") /* ty=Tensor[(9, 13, 4), float64] */;
    %1221 = shape_of(meta[relay.Constant][52] /* ty=Tensor[(3, 156), uint8] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1222 = cast(meta[relay.Constant][52] /* ty=Tensor[(3, 156), uint8] */, dtype="float64") /* ty=Tensor[(3, 156), float64] */;
    %1223 = dyn.reshape(%1220, %1221, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %1224 = %1212.4;
    %1225 = %1213.1;
    %1226 = %1214.0;
    %1227 = add(%1222, %1223) /* ty=Tensor[(3, 156), float64] */;
    (%1224, %1225, %1226, %1227)
  };
  %1228() /* ty=(Tensor[(270), uint8], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(3, 156), float64]) */
}

def @func_9823() -> (Tensor[(14, 12, 13), float64],) {
  %1231 = fn () -> (Tensor[(14, 12, 13), float64],) {
    %1229 = @func_6482() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float64]) */;
    %1230 = %1229.0;
    (%1230,)
  };
  %1231() /* ty=(Tensor[(14, 12, 13), float64],) */
}

def @func_4896(%var_4893: Tensor[(50), uint64], %var_4894: Tensor[(168), float32], %var_4895: Tensor[(15, 4, 168), uint8]) -> (Tensor[(270), uint8], uint64, Tensor[(50), uint64], Tensor[(168), float32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(15, 4, 168), int32]) {
  @func_4891(%var_4893, %var_4894, %var_4895) /* ty=(Tensor[(270), uint8], uint64, Tensor[(50), uint64], Tensor[(168), float32], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(15, 4, 168), int32]) */
}

def @func_11024() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(50), uint64]) {
  %1237 = fn () -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(50), uint64]) {
    %1232 = cast(meta[relay.Constant][53] /* ty=Tensor[(50), uint64] */, dtype="uint64") /* ty=Tensor[(50), uint64] */;
    %1233 = reshape(%1232, newshape=[50]) /* ty=Tensor[(50), uint64] */;
    %1234 = @func_8508(%1233) /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(168), float32], Tensor[(168), float32], Tensor[(14, 12, 13), float64], Tensor[(50), uint64], Tensor[(14, 12, 13), float64]) */;
    %1235 = @func_10867() /* ty=Tensor[(14, 12, 13), float64] */;
    %1236 = %1234.0;
    (%1235, %1236, meta[relay.Constant][53] /* ty=Tensor[(50), uint64] */)
  };
  %1237() /* ty=(Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(50), uint64]) */
}

def @func_1735(%var_1734: Tensor[(168), float32]) -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(168), float32], Tensor[(168), float32], Tensor[(14, 12, 13), float32]) {
  %1247 = fn (%var_1715: Tensor[(168), float32]) -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(168), float32], Tensor[(168), float32], Tensor[(14, 12, 13), float32]) {
    %1238 = cast(%var_1715, dtype="float32") /* ty=Tensor[(168), float32] */;
    %1239 = reshape(%1238, newshape=[168]) /* ty=Tensor[(168), float32] */;
    %1240 = @func_1136(%1239) /* ty=(Tensor[(14, 12, 13), float64], Tensor[(15, 4, ?), bool], Tensor[(168), float32], Tensor[(15, 4, ?), bool]) */;
    %1241 = @func_825() /* ty=Tensor[(14, 12, 13), uint32] */;
    %1242 = cast(%1241, dtype="float32") /* ty=Tensor[(14, 12, 13), float32] */;
    %1243 = @func_778() /* ty=Tensor[(14, 12, 13), uint32] */;
    %1244 = @func_778() /* ty=Tensor[(14, 12, 13), uint32] */;
    %1245 = %1240.2;
    %1246 = cosh(%1242) /* ty=Tensor[(14, 12, 13), float32] */;
    (%1243, %1244, %1245, %var_1715, %1246)
  };
  %1247(%var_1734) /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(168), float32], Tensor[(168), float32], Tensor[(14, 12, 13), float32]) */
}

def @func_1584() -> (Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32]) {
  %1248 = @func_1229() /* ty=Tensor[(14, 12, 13), float64] */;
  %1249 = @func_1191() /* ty=Tensor[(14, 12, 13), uint32] */;
  (%1248, %1249)
}

def @func_10614(%var_10604: Tensor[(56), float32], %var_10605: Tensor[(728), float32]) -> (Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64], Tensor[(270), float64], Tensor[(4, 13, 14), float32], Tensor[(56), float32], Tensor[(728), float32], Tensor[(168), float32], Tensor[(168), float32]) {
  %1250 = @func_5666() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), float64]) */;
  %1251 = @func_3625() /* ty=Tensor[(270), uint8] */;
  %1252 = cast(meta[relay.Constant][54] /* ty=Tensor[(270), uint8] */, dtype="float64") /* ty=Tensor[(270), float64] */;
  %1253 = shape_of(%1251, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1254 = cast(%1251, dtype="float64") /* ty=Tensor[(270), float64] */;
  %1255 = dyn.reshape(%1252, %1253, newshape=[]) /* ty=Tensor[(?), float64] */;
  %1256 = cast(%var_10604, dtype="float32") /* ty=Tensor[(56), float32] */;
  %1257 = cast(%var_10605, dtype="float32") /* ty=Tensor[(728), float32] */;
  %1258 = reshape(%1256, newshape=[4, 1, 14]) /* ty=Tensor[(4, 1, 14), float32] */;
  %1259 = reshape(%1257, newshape=[4, 13, 14]) /* ty=Tensor[(4, 13, 14), float32] */;
  %1260 = cast(meta[relay.Constant][55] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %1261 = reshape(%1260, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %1262 = @func_5906(%1261) /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(168), float32], Tensor[(168), float32]) */;
  %1263 = %1250.0;
  %1264 = @func_7432() /* ty=Tensor[(14, 12, 13), float64] */;
  %1265 = divide(%1254, %1255) /* ty=Tensor[(270), float64] */;
  %1266 = @func_5871(%1258, %1259) /* ty=Tensor[(4, 13, 14), float32] */;
  %1267 = %1262.1;
  (%1263, %1264, %1265, %1266, %var_10604, %var_10605, %1267, meta[relay.Constant][55] /* ty=Tensor[(168), float32] */)
}

def @func_10392() -> Tensor[(14, 12, 13), uint32] {
  @func_10390() /* ty=Tensor[(14, 12, 13), uint32] */
}

def @func_12991() -> (Tensor[(14, 12, 13), uint32],) {
  %1268 = @func_7797() /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32]) */;
  %1269 = %1268.0;
  (%1269,)
}

def @func_12617() -> (Tensor[(14, 12, 13), uint32],) {
  %1270 = @func_1191() /* ty=Tensor[(14, 12, 13), uint32] */;
  (%1270,)
}

def @func_3189(%var_3188: Tensor[(168), float32]) -> (Tensor[(14, 12, 13), uint32], Tensor[(2, 15, 9), float64], Tensor[(168), float32], Tensor[(14, 12, 13), float64]) {
  %1279 = fn (%var_3148: Tensor[(168), float32]) -> (Tensor[(14, 12, 13), uint32], Tensor[(2, 15, 9), float64], Tensor[(168), float32], Tensor[(14, 12, 13), float64]) {
    %1271 = @func_825() /* ty=Tensor[(14, 12, 13), uint32] */;
    %1272 = cast(%1271, dtype="int32") /* ty=Tensor[(14, 12, 13), int32] */;
    %1273 = cast(%var_3148, dtype="float32") /* ty=Tensor[(168), float32] */;
    %1274 = reshape(%1272, newshape=[14, 12, 13]) /* ty=Tensor[(14, 12, 13), int32] */;
    %1275 = reshape(%1273, newshape=[168]) /* ty=Tensor[(168), float32] */;
    %1276 = @func_2034(%1274, %1275) /* ty=(Tensor[(14, 12, 13), bool], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), uint32], Tensor[(14, 12, 13), uint32], Tensor[(2, 15, 9), float64], Tensor[(270), uint8], Tensor[(14, 12, 13), float64], Tensor[(14, 12, 13), float32], Tensor[(14, 12, 13), uint32], Tensor[(168), float32], Tensor[(168), float32], Tensor[(15, 4, ?), bool], Tensor[(2, 15, 9), float64]) */;
    %1277 = %1276.12;
    %1278 = @func_1081() /* ty=Tensor[(14, 12, 13), float64] */;
    (%1271, %1277, %var_3148, %1278)
  };
  %1279(%var_3188) /* ty=(Tensor[(14, 12, 13), uint32], Tensor[(2, 15, 9), float64], Tensor[(168), float32], Tensor[(14, 12, 13), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen575/build/output.py", line 4170, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:34:53] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

