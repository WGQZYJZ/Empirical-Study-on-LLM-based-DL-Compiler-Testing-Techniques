==========mod==========
#[version = "0.0.5"]
def @func_8803() -> Tensor[(11, 5, 4), float64] {
  @func_8301() /* ty=Tensor[(11, 5, 4), float64] */
}

def @func_9677() -> (Tensor[(11, 5, 4), float64], Tensor[(11, 5, 4), float64]) {
  %0 = @func_7647() /* ty=(Tensor[(11, 5, 4), float64],) */;
  %1 = %0.0;
  %2 = @func_9630() /* ty=Tensor[(11, 5, 4), float64] */;
  (%1, %2)
}

def @func_1774(%var_1739: int64, %var_1740: Tensor[(13, 16, 10), int64], %var_1760: Tensor[(702), float64]) -> (Tensor[(6, 9, 13), float64], Tensor[(702), float64], Tensor[(13, 16, 10), bool]) {
  %3 = cast(%var_1760, dtype="float64") /* ty=Tensor[(702), float64] */;
  %4 = reshape(%3, newshape=[6, 9, 13]) /* ty=Tensor[(6, 9, 13), float64] */;
  %5 = @func_115(%4) /* ty=(Tensor[(6, 9, 13), float64], Tensor[(6, 9, 13), float64]) */;
  %6 = cast(%var_1739, dtype="int64") /* ty=int64 */;
  %7 = cast(%var_1740, dtype="int64") /* ty=Tensor[(13, 16, 10), int64] */;
  %8 = minimum(%6, %7) /* ty=Tensor[(13, 16, 10), int64] */;
  %9 = cast(%8, dtype="bool") /* ty=Tensor[(13, 16, 10), bool] */;
  %10 = shape_of(%var_1740, dtype="int32") /* ty=Tensor[(3), int32] */;
  %11 = cast(%var_1740, dtype="bool") /* ty=Tensor[(13, 16, 10), bool] */;
  %12 = dyn.reshape(%9, %10, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %13 = %5.1;
  %14 = logical_and(%11, %12) /* ty=Tensor[(13, 16, 10), bool] */;
  (%13, %var_1760, %14)
}

def @func_4652(%var_4603: Tensor[(15, 13, 12), int8], %var_4604: Tensor[(15, 13, 12), int8], %var_4633: Tensor[(1092), int16], %var_4637: Tensor[(117), int32]) -> (Tensor[(15, 13, 12), int8], int32, Tensor[(504), bool], Tensor[(14, 13, 6), int16], Tensor[(78), int16], Tensor[(1092), int16], Tensor[(1, 13, 9), bool], Tensor[(117), int32]) {
  %15 = cast(%var_4604, dtype="int8") /* ty=Tensor[(15, 13, 12), int8] */;
  %16 = shape_of(%var_4603, dtype="int32") /* ty=Tensor[(3), int32] */;
  %17 = cast(%var_4603, dtype="int8") /* ty=Tensor[(15, 13, 12), int8] */;
  %18 = dyn.reshape(%15, %16, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %19 = cast(meta[relay.Constant][0] /* ty=Tensor[(504), bool] */, dtype="bool") /* ty=Tensor[(504), bool] */;
  %20 = cast(meta[relay.Constant][0] /* ty=Tensor[(504), bool] */, dtype="bool") /* ty=Tensor[(504), bool] */;
  %21 = reshape(%19, newshape=[14, 3, 12]) /* ty=Tensor[(14, 3, 12), bool] */;
  %22 = reshape(%20, newshape=[14, 3, 12]) /* ty=Tensor[(14, 3, 12), bool] */;
  %23 = @func_4461(%21, %22) /* ty=(Tensor[(14, 3, 12), bool], int32, Tensor[(144), bool], int32, Tensor[(13, 9), int32]) */;
  %24 = cast(meta[relay.Constant][1] /* ty=Tensor[(78), int16] */, dtype="int16") /* ty=Tensor[(78), int16] */;
  %25 = cast(%var_4633, dtype="int16") /* ty=Tensor[(1092), int16] */;
  %26 = reshape(%24, newshape=[1, 13, 6]) /* ty=Tensor[(1, 13, 6), int16] */;
  %27 = reshape(%25, newshape=[14, 13, 6]) /* ty=Tensor[(14, 13, 6), int16] */;
  %28 = %23.1;
  %29 = cast(%28, dtype="int32") /* ty=int32 */;
  %30 = cast(%var_4637, dtype="int32") /* ty=Tensor[(117), int32] */;
  %31 = reshape(%29, newshape=[]) /* ty=int32 */;
  %32 = reshape(%30, newshape=[1, 13, 9]) /* ty=Tensor[(1, 13, 9), int32] */;
  %33 = @func_1419(%31, %32) /* ty=(Tensor[(1, 13, 9), bool],) */;
  %34 = maximum(%17, %18) /* ty=Tensor[(15, 13, 12), int8] */;
  %35 = @func_1276(%26, %27) /* ty=Tensor[(14, 13, 6), int16] */;
  %36 = %33.0;
  (%34, %28, meta[relay.Constant][0] /* ty=Tensor[(504), bool] */, %35, meta[relay.Constant][1] /* ty=Tensor[(78), int16] */, %var_4633, %36, %var_4637)
}

def @func_9192() -> (Tensor[(11, 5, 4), float64],) {
  %37 = @func_7647() /* ty=(Tensor[(11, 5, 4), float64],) */;
  %38 = %37.0;
  (%38,)
}

def @func_8352() -> (Tensor[(11, 5, 4), float64], Tensor[(78), int16], Tensor[(14, 13, 6), int16]) {
  %39 = cast(meta[relay.Constant][2] /* ty=Tensor[(78), int16] */, dtype="int16") /* ty=Tensor[(78), int16] */;
  %40 = cast(meta[relay.Constant][3] /* ty=Tensor[(182, 6), int16] */, dtype="int16") /* ty=Tensor[(182, 6), int16] */;
  %41 = reshape(%39, newshape=[1, 13, 6]) /* ty=Tensor[(1, 13, 6), int16] */;
  %42 = reshape(%40, newshape=[14, 13, 6]) /* ty=Tensor[(14, 13, 6), int16] */;
  %43 = @func_1276(%41, %42) /* ty=Tensor[(14, 13, 6), int16] */;
  %44 = cast(meta[relay.Constant][3] /* ty=Tensor[(182, 6), int16] */, dtype="int16") /* ty=Tensor[(182, 6), int16] */;
  %45 = shape_of(%43, dtype="int32") /* ty=Tensor[(3), int32] */;
  %46 = cast(%43, dtype="int16") /* ty=Tensor[(14, 13, 6), int16] */;
  %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %48 = @func_8071() /* ty=Tensor[(11, 5, 4), float64] */;
  %49 = bitwise_and(%46, %47) /* ty=Tensor[(14, 13, 6), int16] */;
  (%48, meta[relay.Constant][2] /* ty=Tensor[(78), int16] */, %49)
}

def @func_10413() -> Tensor[(11, 5, 4), float64] {
  @func_8242() /* ty=Tensor[(11, 5, 4), float64] */
}

def @func_8868(%var_8859: Tensor[(11, 5, 4), float64]) -> (Tensor[(11, 5, 4), float64], Tensor[(11, 5, 4), bool]) {
  %50 = @func_7834() /* ty=(Tensor[(11, 5, 4), float64],) */;
  %51 = @func_7647() /* ty=(Tensor[(11, 5, 4), float64],) */;
  %52 = %51.0;
  %53 = cast(%var_8859, dtype="bool") /* ty=Tensor[(11, 5, 4), bool] */;
  %54 = shape_of(%52, dtype="int32") /* ty=Tensor[(3), int32] */;
  %55 = cast(%52, dtype="bool") /* ty=Tensor[(11, 5, 4), bool] */;
  %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %57 = %50.0;
  %58 = logical_or(%55, %56) /* ty=Tensor[(11, 5, 4), bool] */;
  (%57, %58)
}

def @func_9365() -> Tensor[(11, 5, 4), float64] {
  %59 = @func_8419() /* ty=(Tensor[(11, 5, 4), float64],) */;
  %59.0
}

def @func_4388(%var_4383: float64) -> Tensor[(10, 6, 1), float64] {
  %60 = cast(%var_4383, dtype="float64") /* ty=float64 */;
  %61 = cast(meta[relay.Constant][4] /* ty=Tensor[(10, 6, 1), float64] */, dtype="float64") /* ty=Tensor[(10, 6, 1), float64] */;
  divide(%60, %61) /* ty=Tensor[(10, 6, 1), float64] */
}

def @func_3884(%var_3877: Tensor[(10, 10, 1), int16]) -> Tensor[(10, 10, 1), int16] {
  %62 = cast(meta[relay.Constant][5] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %63 = cast(%var_3877, dtype="int16") /* ty=Tensor[(10, 10, 1), int16] */;
  left_shift(%62, %63) /* ty=Tensor[(10, 10, 1), int16] */
}

def @func_9512() -> (Tensor[(11, 5, 4), float64], Tensor[(11, 5, 4), float64]) {
  %64 = @func_7888() /* ty=(Tensor[(11, 5, 4), float64],) */;
  %65 = @func_9365() /* ty=Tensor[(11, 5, 4), float64] */;
  %66 = %64.0;
  (%65, %66)
}

def @func_2363(%var_2316: Tensor[(12, 4, 11), float64], %var_2329: Tensor[(12, 4, 11), float64]) -> (Tensor[(12, 4, 11), float64], Tensor[(10, 4, 5), int64], int64, Tensor[(200), int64]) {
  %67 = cast(%var_2316, dtype="float64") /* ty=Tensor[(12, 4, 11), float64] */;
  %68 = sin(%67) /* ty=Tensor[(12, 4, 11), float64] */;
  %69 = cast(%var_2329, dtype="float64") /* ty=Tensor[(12, 4, 11), float64] */;
  %70 = shape_of(%68, dtype="int32") /* ty=Tensor[(3), int32] */;
  %71 = cast(%68, dtype="float64") /* ty=Tensor[(12, 4, 11), float64] */;
  %72 = dyn.reshape(%69, %70, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %73 = cast(3 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %74 = cast(meta[relay.Constant][6] /* ty=Tensor[(200), int64] */, dtype="int64") /* ty=Tensor[(200), int64] */;
  %75 = reshape(%73, newshape=[]) /* ty=int64 */;
  %76 = reshape(%74, newshape=[10, 4, 5]) /* ty=Tensor[(10, 4, 5), int64] */;
  %77 = @func_1528(%75, %76) /* ty=(Tensor[(10, 4, 5), int64],) */;
  %78 = floor_mod(%71, %72) /* ty=Tensor[(12, 4, 11), float64] */;
  %79 = %77.0;
  (%78, %79, 3 /* ty=int64 */, meta[relay.Constant][6] /* ty=Tensor[(200), int64] */)
}

def @func_9850() -> (Tensor[(11, 5, 4), float64],) {
  %80 = @func_9400() /* ty=(Tensor[(11, 5, 4), float64], Tensor[(11, 5, 4), float64]) */;
  %81 = %80.0;
  (%81,)
}

def @func_3792(%var_3787: Tensor[(12, 7, 4), float32]) -> Tensor[(12, 7, 4), float32] {
  %82 = cast(%var_3787, dtype="float32") /* ty=Tensor[(12, 7, 4), float32] */;
  atanh(%82) /* ty=Tensor[(12, 7, 4), float32] */
}

def @func_9751() -> Tensor[(11, 5, 4), float64] {
  %83 = @func_8419() /* ty=(Tensor[(11, 5, 4), float64],) */;
  %83.0
}

def @func_5728(%var_5708: Tensor[(10, 1, 3), int32], %var_5709: Tensor[(10, 13, 3), int32], %var_5713: Tensor[(10, 13, 3), int32]) -> (Tensor[(10, 13, 3), int8], Tensor[(10, 1, 3), float64]) {
  %84 = cast(%var_5708, dtype="int32") /* ty=Tensor[(10, 1, 3), int32] */;
  %85 = cast(%var_5709, dtype="int32") /* ty=Tensor[(10, 13, 3), int32] */;
  %86 = bitwise_and(%84, %85) /* ty=Tensor[(10, 13, 3), int32] */;
  %87 = cast(%var_5713, dtype="int8") /* ty=Tensor[(10, 13, 3), int8] */;
  %88 = shape_of(%86, dtype="int32") /* ty=Tensor[(3), int32] */;
  %89 = cast(%86, dtype="int8") /* ty=Tensor[(10, 13, 3), int8] */;
  %90 = dyn.reshape(%87, %88, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %91 = cast(%var_5708, dtype="float64") /* ty=Tensor[(10, 1, 3), float64] */;
  %92 = right_shift(%89, %90) /* ty=Tensor[(10, 13, 3), int8] */;
  %93 = atanh(%91) /* ty=Tensor[(10, 1, 3), float64] */;
  (%92, %93)
}

def @func_10048(%var_10036: int32, %var_10037: Tensor[(117), int32]) -> (Tensor[(11, 5, 4), float64], Tensor[(1, 13, 9), bool], int32, Tensor[(117), int32]) {
  %94 = cast(%var_10036, dtype="int32") /* ty=int32 */;
  %95 = cast(%var_10037, dtype="int32") /* ty=Tensor[(117), int32] */;
  %96 = reshape(%94, newshape=[]) /* ty=int32 */;
  %97 = reshape(%95, newshape=[1, 13, 9]) /* ty=Tensor[(1, 13, 9), int32] */;
  %98 = @func_1419(%96, %97) /* ty=(Tensor[(1, 13, 9), bool],) */;
  %99 = @func_8071() /* ty=Tensor[(11, 5, 4), float64] */;
  %100 = %98.0;
  (%99, %100, %var_10036, %var_10037)
}

def @func_9045() -> Tensor[(11, 5, 4), float64] {
  @func_8242() /* ty=Tensor[(11, 5, 4), float64] */
}

def @func_7570(%var_7456: Tensor[(11, 10, 16), int32], %var_7457: Tensor[(11, 10, 16), int32], %var_7524: Tensor[(336, 1), int8], %var_7526: Tensor[(117), int32], %var_7529: Tensor[(144), bool]) -> (Tensor[(11, 10, 16), bool], Tensor[(6, 9, 13), uint64], Tensor[(117), int32], Tensor[(144), bool], Tensor[(11, 10, 16), bool], Tensor[(336, 1), bool], Tensor[(10, 13, 3), int8], Tensor[(12), float32], Tensor[(180), float32], Tensor[(30), int32], Tensor[(390, 1), int32], Tensor[(78), int16], Tensor[(117), uint16]) {
  %101 = cast(%var_7457, dtype="bool") /* ty=Tensor[(11, 10, 16), bool] */;
  %102 = shape_of(%var_7456, dtype="int32") /* ty=Tensor[(3), int32] */;
  %103 = cast(%var_7456, dtype="bool") /* ty=Tensor[(11, 10, 16), bool] */;
  %104 = dyn.reshape(%101, %102, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %105 = cast(meta[relay.Constant][7] /* ty=Tensor[(3, 234), float64] */, dtype="float64") /* ty=Tensor[(3, 234), float64] */;
  %106 = reshape(%105, newshape=[6, 9, 13]) /* ty=Tensor[(6, 9, 13), float64] */;
  %107 = @func_115(%106) /* ty=(Tensor[(6, 9, 13), float64], Tensor[(6, 9, 13), float64]) */;
  %108 = %107.0;
  %109 = cast(meta[relay.Constant][7] /* ty=Tensor[(3, 234), float64] */, dtype="uint64") /* ty=Tensor[(3, 234), uint64] */;
  %110 = shape_of(%108, dtype="int32") /* ty=Tensor[(3), int32] */;
  %111 = cast(%108, dtype="uint64") /* ty=Tensor[(6, 9, 13), uint64] */;
  %112 = dyn.reshape(%109, %110, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %113 = cast(%var_7529, dtype="bool") /* ty=Tensor[(144), bool] */;
  %114 = cast(%var_7529, dtype="bool") /* ty=Tensor[(144), bool] */;
  %115 = cast(%var_7524, dtype="int8") /* ty=Tensor[(336, 1), int8] */;
  %116 = cast(%var_7524, dtype="int8") /* ty=Tensor[(336, 1), int8] */;
  %117 = cast(7 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %118 = cast(%var_7526, dtype="int32") /* ty=Tensor[(117), int32] */;
  %119 = reshape(%115, newshape=[12, 14, 2]) /* ty=Tensor[(12, 14, 2), int8] */;
  %120 = reshape(%116, newshape=[12, 14, 2]) /* ty=Tensor[(12, 14, 2), int8] */;
  %121 = reshape(%117, newshape=[]) /* ty=int32 */;
  %122 = reshape(%118, newshape=[117]) /* ty=Tensor[(117), int32] */;
  %123 = @func_2512(%119, %120, %121, %122) /* ty=(Tensor[(12, 14, 2), int8], Tensor[(1, 13, 9), bool], int32, Tensor[(117), int32]) */;
  %124 = %123.2;
  %125 = cast(%124, dtype="int32") /* ty=int32 */;
  %126 = cast(%var_7526, dtype="int32") /* ty=Tensor[(117), int32] */;
  %127 = reshape(%113, newshape=[4, 12, 3]) /* ty=Tensor[(4, 12, 3), bool] */;
  %128 = reshape(%114, newshape=[4, 12, 3]) /* ty=Tensor[(4, 12, 3), bool] */;
  %129 = reshape(%125, newshape=[]) /* ty=int32 */;
  %130 = reshape(%126, newshape=[117]) /* ty=Tensor[(117), int32] */;
  %131 = @func_1891(%127, %128, %129, %130) /* ty=(Tensor[(4, 12, 3), bool], Tensor[(1, 13, 9), bool], int32, Tensor[(117), int32]) */;
  %132 = cast(%var_7457, dtype="float64") /* ty=Tensor[(11, 10, 16), float64] */;
  %133 = acos(%132) /* ty=Tensor[(11, 10, 16), float64] */;
  %134 = cast(%var_7456, dtype="float64") /* ty=Tensor[(11, 10, 16), float64] */;
  %135 = tan(%134) /* ty=Tensor[(11, 10, 16), float64] */;
  %136 = cast(%135, dtype="bool") /* ty=Tensor[(11, 10, 16), bool] */;
  %137 = shape_of(%133, dtype="int32") /* ty=Tensor[(3), int32] */;
  %138 = cast(%133, dtype="bool") /* ty=Tensor[(11, 10, 16), bool] */;
  %139 = dyn.reshape(%136, %137, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %140 = cast(%var_7524, dtype="bool") /* ty=Tensor[(336, 1), bool] */;
  %141 = cast(%124, dtype="bool") /* ty=bool */;
  %142 = cast(meta[relay.Constant][8] /* ty=Tensor[(12), float32] */, dtype="float32") /* ty=Tensor[(12), float32] */;
  %143 = logical_and(%140, %141) /* ty=Tensor[(336, 1), bool] */;
  %144 = cast(%143, dtype="float32") /* ty=Tensor[(336, 1), float32] */;
  %145 = cast(meta[relay.Constant][9] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %146 = cast(7 /* ty=int32 */, dtype="int64") /* ty=int64 */;
  %147 = cast(meta[relay.Constant][10] /* ty=Tensor[(30), int32] */, dtype="int32") /* ty=Tensor[(30), int32] */;
  %148 = cast(meta[relay.Constant][11] /* ty=Tensor[(390, 1), int32] */, dtype="int32") /* ty=Tensor[(390, 1), int32] */;
  %149 = cast(meta[relay.Constant][12] /* ty=Tensor[(78), int16] */, dtype="int16") /* ty=Tensor[(78), int16] */;
  %150 = reshape(%142, newshape=[1, 1, 12]) /* ty=Tensor[(1, 1, 12), float32] */;
  %151 = reshape(%144, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %152 = reshape(%145, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %153 = reshape(%146, newshape=[]) /* ty=int64 */;
  %154 = reshape(%147, newshape=[30]) /* ty=Tensor[(30), int32] */;
  %155 = reshape(%148, newshape=[390]) /* ty=Tensor[(390), int32] */;
  %156 = reshape(%149, newshape=[78]) /* ty=Tensor[(78), int16] */;
  %157 = @func_6606(%150, %151, %152, %153, %154, %155, %156) /* ty=(Tensor[(12, 7, 4), float32], Tensor[(336), float32], int64, Tensor[(180), float32], int64, Tensor[(200), int64], Tensor[(10, 13, 3), int8], Tensor[(30), int32], Tensor[(390), int32], Tensor[(12, 7, 4), float32], Tensor[(6, 9, 13), float64], Tensor[(36, 24), float32], Tensor[(14, 13, 6), int16], Tensor[(78), int16], Tensor[(1092), int16], Tensor[(13, 15, 12), int8], Tensor[(?, ?, 12), bool], Tensor[(13, 15, 12), bool]) */;
  %158 = cast(%var_7526, dtype="float64") /* ty=Tensor[(117), float64] */;
  %159 = atan(%158) /* ty=Tensor[(117), float64] */;
  %160 = cast(%159, dtype="uint16") /* ty=Tensor[(117), uint16] */;
  %161 = cast(7 /* ty=int32 */, dtype="uint16") /* ty=uint16 */;
  %162 = greater(%103, %104) /* ty=Tensor[(11, 10, 16), bool] */;
  %163 = left_shift(%111, %112) /* ty=Tensor[(6, 9, 13), uint64] */;
  %164 = %131.3;
  %165 = greater_equal(%138, %139) /* ty=Tensor[(11, 10, 16), bool] */;
  %166 = %157.6;
  %167 = bitwise_or(%160, %161) /* ty=Tensor[(117), uint16] */;
  (%162, %163, %164, %var_7529, %165, %143, %166, meta[relay.Constant][8] /* ty=Tensor[(12), float32] */, meta[relay.Constant][9] /* ty=Tensor[(180), float32] */, meta[relay.Constant][10] /* ty=Tensor[(30), int32] */, meta[relay.Constant][11] /* ty=Tensor[(390, 1), int32] */, meta[relay.Constant][12] /* ty=Tensor[(78), int16] */, %167)
}

def @func_9484(%var_9481: Tensor[(10, 2, 2), float64]) -> (Tensor[(10, 2, 2), float64],) {
  %168 = cast(%var_9481, dtype="float64") /* ty=Tensor[(10, 2, 2), float64] */;
  %169 = asin(%168) /* ty=Tensor[(10, 2, 2), float64] */;
  (%169,)
}

def @func_10145() -> Tensor[(11, 5, 4), float64] {
  %170 = @func_7888() /* ty=(Tensor[(11, 5, 4), float64],) */;
  %170.0
}

def @func_8242() -> Tensor[(11, 5, 4), float64] {
  %171 = @func_7834() /* ty=(Tensor[(11, 5, 4), float64],) */;
  %171.0
}

def @func_9400() -> (Tensor[(11, 5, 4), float64], Tensor[(11, 5, 4), float64]) {
  %172 = @func_8419() /* ty=(Tensor[(11, 5, 4), float64],) */;
  %173 = @func_9149() /* ty=Tensor[(11, 5, 4), float64] */;
  %174 = %172.0;
  (%173, %174)
}

def @func_9243() -> Tensor[(1, 11, 16), float64] {
  %175 = cast(meta[relay.Constant][13] /* ty=Tensor[(1, 11, 16), float64] */, dtype="float64") /* ty=Tensor[(1, 11, 16), float64] */;
  sinh(%175) /* ty=Tensor[(1, 11, 16), float64] */
}

def @func_9149() -> Tensor[(11, 5, 4), float64] {
  %176 = @func_8773() /* ty=(Tensor[(11, 5, 4), float64],) */;
  %176.0
}

def @func_9121() -> (Tensor[(11, 5, 4), float64], Tensor[(12, 9, 8), int8], Tensor[(864), float32]) {
  %177 = @func_8279() /* ty=(Tensor[(11, 5, 4), float64],) */;
  %178 = cast(meta[relay.Constant][14] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %179 = cast(meta[relay.Constant][14] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %180 = reshape(%178, newshape=[12, 9, 8]) /* ty=Tensor[(12, 9, 8), float32] */;
  %181 = reshape(%179, newshape=[12, 9, 8]) /* ty=Tensor[(12, 9, 8), float32] */;
  %182 = @func_658(%180, %181) /* ty=(Tensor[(12, 9, 8), int8], Tensor[(6, 9, 13), float64], Tensor[(702), float64]) */;
  %183 = %177.0;
  %184 = %182.0;
  (%183, %184, meta[relay.Constant][14] /* ty=Tensor[(864), float32] */)
}

def @func_6606(%var_6481: Tensor[(1, 1, 12), float32], %var_6499: Tensor[(336), float32], %var_6511: Tensor[(180), float32], %var_6512: int64, %var_6520: Tensor[(30), int32], %var_6521: Tensor[(390), int32], %var_6566: Tensor[(78), int16]) -> (Tensor[(12, 7, 4), float32], Tensor[(336), float32], int64, Tensor[(180), float32], int64, Tensor[(200), int64], Tensor[(10, 13, 3), int8], Tensor[(30), int32], Tensor[(390), int32], Tensor[(12, 7, 4), float32], Tensor[(6, 9, 13), float64], Tensor[(36, 24), float32], Tensor[(14, 13, 6), int16], Tensor[(78), int16], Tensor[(1092), int16], Tensor[(13, 15, 12), int8], Tensor[(?, ?, 12), bool], Tensor[(13, 15, 12), bool]) {
  %185 = cast(%var_6499, dtype="float32") /* ty=Tensor[(336), float32] */;
  %186 = reshape(%185, newshape=[12, 7, 4]) /* ty=Tensor[(12, 7, 4), float32] */;
  %187 = cast(%var_6511, dtype="float32") /* ty=Tensor[(180), float32] */;
  %188 = @func_3792(%186) /* ty=Tensor[(12, 7, 4), float32] */;
  %189 = cast(%188, dtype="float32") /* ty=Tensor[(12, 7, 4), float32] */;
  %190 = cast(%var_6512, dtype="int64") /* ty=int64 */;
  %191 = cast(meta[relay.Constant][15] /* ty=Tensor[(200), int64] */, dtype="int64") /* ty=Tensor[(200), int64] */;
  %192 = reshape(%187, newshape=[9, 5, 4]) /* ty=Tensor[(9, 5, 4), float32] */;
  %193 = reshape(%189, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %194 = reshape(%190, newshape=[]) /* ty=int64 */;
  %195 = reshape(%191, newshape=[200]) /* ty=Tensor[(200), int64] */;
  %196 = @func_4243(%192, %193, %194, %195) /* ty=(Tensor[(12, 7, 4), float32], Tensor[(336), float32], Tensor[(10, 4, 5), int64], int64, Tensor[(200), int64], Tensor[(7, 14, 10), float64], Tensor[(980), float64], Tensor[(9, 5, 4), float32]) */;
  %197 = cast(%var_6520, dtype="int32") /* ty=Tensor[(30), int32] */;
  %198 = cast(%var_6521, dtype="int32") /* ty=Tensor[(390), int32] */;
  %199 = cast(%var_6521, dtype="int32") /* ty=Tensor[(390), int32] */;
  %200 = reshape(%197, newshape=[10, 1, 3]) /* ty=Tensor[(10, 1, 3), int32] */;
  %201 = reshape(%198, newshape=[10, 13, 3]) /* ty=Tensor[(10, 13, 3), int32] */;
  %202 = reshape(%199, newshape=[10, 13, 3]) /* ty=Tensor[(10, 13, 3), int32] */;
  %203 = @func_5728(%200, %201, %202) /* ty=(Tensor[(10, 13, 3), int8], Tensor[(10, 1, 3), float64]) */;
  %204 = cast(%188, dtype="float32") /* ty=Tensor[(12, 7, 4), float32] */;
  %205 = reshape(%204, newshape=[12, 7, 4]) /* ty=Tensor[(12, 7, 4), float32] */;
  %206 = cast(meta[relay.Constant][16] /* ty=Tensor[(36, 24), float32] */, dtype="float32") /* ty=Tensor[(36, 24), float32] */;
  %207 = cast(meta[relay.Constant][16] /* ty=Tensor[(36, 24), float32] */, dtype="float32") /* ty=Tensor[(36, 24), float32] */;
  %208 = reshape(%206, newshape=[12, 9, 8]) /* ty=Tensor[(12, 9, 8), float32] */;
  %209 = reshape(%207, newshape=[12, 9, 8]) /* ty=Tensor[(12, 9, 8), float32] */;
  %210 = @func_658(%208, %209) /* ty=(Tensor[(12, 9, 8), int8], Tensor[(6, 9, 13), float64], Tensor[(702), float64]) */;
  %211 = cast(%var_6566, dtype="int16") /* ty=Tensor[(78), int16] */;
  %212 = cast(meta[relay.Constant][17] /* ty=Tensor[(1092), int16] */, dtype="int16") /* ty=Tensor[(1092), int16] */;
  %213 = reshape(%211, newshape=[1, 13, 6]) /* ty=Tensor[(1, 13, 6), int16] */;
  %214 = reshape(%212, newshape=[14, 13, 6]) /* ty=Tensor[(14, 13, 6), int16] */;
  %215 = cast(%var_6481, dtype="float32") /* ty=Tensor[(1, 1, 12), float32] */;
  %216 = atan(%215) /* ty=Tensor[(1, 1, 12), float32] */;
  %217 = cast(%var_6481, dtype="bool") /* ty=Tensor[(1, 1, 12), bool] */;
  %218 = shape_of(%216, dtype="int32") /* ty=Tensor[(3), int32] */;
  %219 = cast(%216, dtype="bool") /* ty=Tensor[(1, 1, 12), bool] */;
  %220 = dyn.reshape(%217, %218, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %221 = logical_and(%219, %220) /* ty=Tensor[(?, ?, 12), bool] */;
  %222 = cast(%221, dtype="float64") /* ty=Tensor[(?, ?, 12), float64] */;
  %223 = cosh(%222) /* ty=Tensor[(?, ?, 12), float64] */;
  %224 = cast(%216, dtype="bool") /* ty=Tensor[(1, 1, 12), bool] */;
  %225 = shape_of(%223, dtype="int32") /* ty=Tensor[(3), int32] */;
  %226 = cast(%223, dtype="bool") /* ty=Tensor[(?, ?, 12), bool] */;
  %227 = dyn.reshape(%224, %225, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %228 = greater(%226, %227) /* ty=Tensor[(?, ?, 12), bool] */;
  %229 = cast(%228, dtype="int8") /* ty=Tensor[(?, ?, 12), int8] */;
  %230 = cast(meta[relay.Constant][18] /* ty=Tensor[(13, 15, 12), bool] */, dtype="int8") /* ty=Tensor[(13, 15, 12), int8] */;
  %231 = cast(%var_6481, dtype="float32") /* ty=Tensor[(1, 1, 12), float32] */;
  %232 = log10(%231) /* ty=Tensor[(1, 1, 12), float32] */;
  %233 = cast(%232, dtype="bool") /* ty=Tensor[(1, 1, 12), bool] */;
  %234 = shape_of(%228, dtype="int32") /* ty=Tensor[(3), int32] */;
  %235 = cast(%228, dtype="bool") /* ty=Tensor[(?, ?, 12), bool] */;
  %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %237 = cast(%216, dtype="bool") /* ty=Tensor[(1, 1, 12), bool] */;
  %238 = cast(meta[relay.Constant][18] /* ty=Tensor[(13, 15, 12), bool] */, dtype="bool") /* ty=Tensor[(13, 15, 12), bool] */;
  %239 = %196.3;
  %240 = %203.0;
  %241 = @func_3792(%205) /* ty=Tensor[(12, 7, 4), float32] */;
  %242 = %210.1;
  %243 = @func_1276(%213, %214) /* ty=Tensor[(14, 13, 6), int16] */;
  %244 = bitwise_xor(%229, %230) /* ty=Tensor[(13, 15, 12), int8] */;
  %245 = logical_or(%235, %236) /* ty=Tensor[(?, ?, 12), bool] */;
  %246 = greater_equal(%237, %238) /* ty=Tensor[(13, 15, 12), bool] */;
  (%188, %var_6499, %239, %var_6511, %var_6512, meta[relay.Constant][15] /* ty=Tensor[(200), int64] */, %240, %var_6520, %var_6521, %241, %242, meta[relay.Constant][16] /* ty=Tensor[(36, 24), float32] */, %243, %var_6566, meta[relay.Constant][17] /* ty=Tensor[(1092), int16] */, %244, %245, %246)
}

def @func_3966(%var_3901: Tensor[(6, 2, 7), float32]) -> (Tensor[(6, 2, 7), float32], Tensor[(7, 10, 3), bool], Tensor[(210), float64]) {
  %247 = cast(%var_3901, dtype="float32") /* ty=Tensor[(6, 2, 7), float32] */;
  %248 = cast(meta[relay.Constant][19] /* ty=Tensor[(210), float64] */, dtype="float64") /* ty=Tensor[(210), float64] */;
  %249 = reshape(%248, newshape=[7, 10, 3]) /* ty=Tensor[(7, 10, 3), float64] */;
  %250 = @func_3420(%249) /* ty=(Tensor[(7, 10, 3), bool],) */;
  %251 = sigmoid(%247) /* ty=Tensor[(6, 2, 7), float32] */;
  %252 = %250.0;
  (%251, %252, meta[relay.Constant][19] /* ty=Tensor[(210), float64] */)
}

def @func_8773() -> (Tensor[(11, 5, 4), float64],) {
  %253 = @func_8242() /* ty=Tensor[(11, 5, 4), float64] */;
  (%253,)
}

def @func_8419() -> (Tensor[(11, 5, 4), float64],) {
  %254 = @func_7888() /* ty=(Tensor[(11, 5, 4), float64],) */;
  %255 = %254.0;
  (%255,)
}

def @func_1276(%var_1264: Tensor[(1, 13, 6), int16], %var_1265: Tensor[(14, 13, 6), int16]) -> Tensor[(14, 13, 6), int16] {
  %256 = cast(%var_1264, dtype="int16") /* ty=Tensor[(1, 13, 6), int16] */;
  %257 = cast(%var_1265, dtype="int16") /* ty=Tensor[(14, 13, 6), int16] */;
  bitwise_or(%256, %257) /* ty=Tensor[(14, 13, 6), int16] */
}

def @func_10173() -> (Tensor[(11, 5, 4), uint32],) {
  %258 = @func_9829() /* ty=Tensor[(11, 5, 4), float64] */;
  %259 = cast(meta[relay.Constant][20] /* ty=Tensor[(11, 5, 4), float64] */, dtype="uint32") /* ty=Tensor[(11, 5, 4), uint32] */;
  %260 = shape_of(%258, dtype="int32") /* ty=Tensor[(3), int32] */;
  %261 = cast(%258, dtype="uint32") /* ty=Tensor[(11, 5, 4), uint32] */;
  %262 = dyn.reshape(%259, %260, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %263 = bitwise_xor(%261, %262) /* ty=Tensor[(11, 5, 4), uint32] */;
  (%263,)
}

def @func_10217() -> Tensor[(11, 5, 4), float64] {
  %264 = @func_9829() /* ty=Tensor[(11, 5, 4), float64] */;
  %265 = cast(%264, dtype="float64") /* ty=Tensor[(11, 5, 4), float64] */;
  sigmoid(%265) /* ty=Tensor[(11, 5, 4), float64] */
}

def @func_1935(%var_1903: Tensor[(5, 13, 6), float32], %var_1904: Tensor[(5, 13, 6), float32]) -> (Tensor[(5, 13, 6), bool],) {
  %266 = cast(%var_1904, dtype="bool") /* ty=Tensor[(5, 13, 6), bool] */;
  %267 = shape_of(%var_1903, dtype="int32") /* ty=Tensor[(3), int32] */;
  %268 = cast(%var_1903, dtype="bool") /* ty=Tensor[(5, 13, 6), bool] */;
  %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %270 = less_equal(%268, %269) /* ty=Tensor[(5, 13, 6), bool] */;
  (%270,)
}

def @func_7888() -> (Tensor[(11, 5, 4), float64],) {
  %271 = @func_7647() /* ty=(Tensor[(11, 5, 4), float64],) */;
  %272 = %271.0;
  (%272,)
}

def @func_8676(%var_8515: Tensor[(15, 11, 2), int16], %var_8580: Tensor[(560, 2), float32], %var_8616: Tensor[(210), float64], %var_8651: Tensor[(200), int64]) -> (Tensor[(15, 11, 2), float32], Tensor[(15, 11, 2), float32], Tensor[(11, 5, 4), float64], Tensor[(15, 11, 2), bool], Tensor[(5, 16, 14), float32], Tensor[(560, 2), float32], Tensor[(15, 11, 2), float32], Tensor[(15, 11, 2), uint32], Tensor[(7, 10, 3), bool], Tensor[(210), float64], Tensor[(10, 5, 8), bool], Tensor[(400), bool], Tensor[(10, 4, 5), int64], int64, Tensor[(200), int64]) {
  %273 = cast(%var_8515, dtype="float32") /* ty=Tensor[(15, 11, 2), float32] */;
  %274 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 11, 2), int16] */, dtype="float32") /* ty=Tensor[(1, 11, 2), float32] */;
  %275 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 11, 2), int16] */, dtype="int16") /* ty=Tensor[(1, 11, 2), int16] */;
  %276 = cast(%var_8515, dtype="int16") /* ty=Tensor[(15, 11, 2), int16] */;
  %277 = subtract(%275, %276) /* ty=Tensor[(15, 11, 2), int16] */;
  %278 = cast(%277, dtype="float32") /* ty=Tensor[(15, 11, 2), float32] */;
  %279 = @func_7647() /* ty=(Tensor[(11, 5, 4), float64],) */;
  %280 = cast(%277, dtype="float64") /* ty=Tensor[(15, 11, 2), float64] */;
  %281 = acosh(%280) /* ty=Tensor[(15, 11, 2), float64] */;
  %282 = cast(%281, dtype="float32") /* ty=Tensor[(15, 11, 2), float32] */;
  %283 = atan(%282) /* ty=Tensor[(15, 11, 2), float32] */;
  %284 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 11, 2), int16] */, dtype="uint16") /* ty=Tensor[(1, 11, 2), uint16] */;
  %285 = cast(%277, dtype="uint16") /* ty=Tensor[(15, 11, 2), uint16] */;
  %286 = bitwise_and(%284, %285) /* ty=Tensor[(15, 11, 2), uint16] */;
  %287 = cast(%286, dtype="bool") /* ty=Tensor[(15, 11, 2), bool] */;
  %288 = shape_of(%283, dtype="int32") /* ty=Tensor[(3), int32] */;
  %289 = cast(%283, dtype="bool") /* ty=Tensor[(15, 11, 2), bool] */;
  %290 = dyn.reshape(%287, %288, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %291 = cast(%var_8580, dtype="float32") /* ty=Tensor[(560, 2), float32] */;
  %292 = reshape(%291, newshape=[5, 16, 14]) /* ty=Tensor[(5, 16, 14), float32] */;
  %293 = cast(%283, dtype="float32") /* ty=Tensor[(15, 11, 2), float32] */;
  %294 = cast(%281, dtype="uint32") /* ty=Tensor[(15, 11, 2), uint32] */;
  %295 = shape_of(%283, dtype="int32") /* ty=Tensor[(3), int32] */;
  %296 = cast(%283, dtype="uint32") /* ty=Tensor[(15, 11, 2), uint32] */;
  %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %298 = cast(%var_8616, dtype="float64") /* ty=Tensor[(210), float64] */;
  %299 = reshape(%298, newshape=[7, 10, 3]) /* ty=Tensor[(7, 10, 3), float64] */;
  %300 = @func_3420(%299) /* ty=(Tensor[(7, 10, 3), bool],) */;
  %301 = cast(meta[relay.Constant][22] /* ty=Tensor[(400), bool] */, dtype="bool") /* ty=Tensor[(400), bool] */;
  %302 = reshape(%301, newshape=[10, 5, 8]) /* ty=Tensor[(10, 5, 8), bool] */;
  %303 = @func_2907(%302) /* ty=(Tensor[(10, 5, 8), bool], Tensor[(10, 5, 8), int16]) */;
  %304 = cast(1 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %305 = cast(%var_8651, dtype="int64") /* ty=Tensor[(200), int64] */;
  %306 = reshape(%304, newshape=[]) /* ty=int64 */;
  %307 = reshape(%305, newshape=[10, 4, 5]) /* ty=Tensor[(10, 4, 5), int64] */;
  %308 = @func_1528(%306, %307) /* ty=(Tensor[(10, 4, 5), int64],) */;
  %309 = add(%273, %274) /* ty=Tensor[(15, 11, 2), float32] */;
  %310 = sqrt(%278) /* ty=Tensor[(15, 11, 2), float32] */;
  %311 = %279.0;
  %312 = logical_or(%289, %290) /* ty=Tensor[(15, 11, 2), bool] */;
  %313 = @func_1076(%292) /* ty=Tensor[(5, 16, 14), float32] */;
  %314 = cos(%293) /* ty=Tensor[(15, 11, 2), float32] */;
  %315 = left_shift(%296, %297) /* ty=Tensor[(15, 11, 2), uint32] */;
  %316 = %300.0;
  %317 = %303.0;
  %318 = %308.0;
  (%309, %310, %311, %312, %313, %var_8580, %314, %315, %316, %var_8616, %317, meta[relay.Constant][22] /* ty=Tensor[(400), bool] */, %318, 1 /* ty=int64 */, %var_8651)
}

def @func_1891(%var_1875: Tensor[(4, 12, 3), bool], %var_1876: Tensor[(4, 12, 3), bool], %var_1886: int32, %var_1887: Tensor[(117), int32]) -> (Tensor[(4, 12, 3), bool], Tensor[(1, 13, 9), bool], int32, Tensor[(117), int32]) {
  %319 = cast(%var_1876, dtype="bool") /* ty=Tensor[(4, 12, 3), bool] */;
  %320 = shape_of(%var_1875, dtype="int32") /* ty=Tensor[(3), int32] */;
  %321 = cast(%var_1875, dtype="bool") /* ty=Tensor[(4, 12, 3), bool] */;
  %322 = dyn.reshape(%319, %320, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %323 = cast(%var_1886, dtype="int32") /* ty=int32 */;
  %324 = cast(%var_1887, dtype="int32") /* ty=Tensor[(117), int32] */;
  %325 = reshape(%323, newshape=[]) /* ty=int32 */;
  %326 = reshape(%324, newshape=[1, 13, 9]) /* ty=Tensor[(1, 13, 9), int32] */;
  %327 = @func_1419(%325, %326) /* ty=(Tensor[(1, 13, 9), bool],) */;
  %328 = logical_and(%321, %322) /* ty=Tensor[(4, 12, 3), bool] */;
  %329 = %327.0;
  (%328, %329, %var_1886, %var_1887)
}

def @func_9886() -> (Tensor[(11, 5, 4), float64], Tensor[(864), float32], Tensor[(10, 4, 5), int64], int64, Tensor[(200), int64], Tensor[(7, 10, 3), bool], Tensor[(5, 42), float64]) {
  %330 = @func_9121() /* ty=(Tensor[(11, 5, 4), float64], Tensor[(12, 9, 8), int8], Tensor[(864), float32]) */;
  %331 = cast(9 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %332 = cast(meta[relay.Constant][23] /* ty=Tensor[(200), int64] */, dtype="int64") /* ty=Tensor[(200), int64] */;
  %333 = reshape(%331, newshape=[]) /* ty=int64 */;
  %334 = reshape(%332, newshape=[10, 4, 5]) /* ty=Tensor[(10, 4, 5), int64] */;
  %335 = @func_1528(%333, %334) /* ty=(Tensor[(10, 4, 5), int64],) */;
  %336 = cast(meta[relay.Constant][24] /* ty=Tensor[(5, 42), float64] */, dtype="float64") /* ty=Tensor[(5, 42), float64] */;
  %337 = reshape(%336, newshape=[7, 10, 3]) /* ty=Tensor[(7, 10, 3), float64] */;
  %338 = @func_3420(%337) /* ty=(Tensor[(7, 10, 3), bool],) */;
  %339 = @func_8242() /* ty=Tensor[(11, 5, 4), float64] */;
  %340 = %330.2;
  %341 = %335.0;
  %342 = %338.0;
  (%339, %340, %341, 9 /* ty=int64 */, meta[relay.Constant][23] /* ty=Tensor[(200), int64] */, %342, meta[relay.Constant][24] /* ty=Tensor[(5, 42), float64] */)
}

def @func_10262(%var_10258: int32, %var_10259: Tensor[(117), int32]) -> (Tensor[(7, 10, 3), bool], Tensor[(1, 13, 9), bool], int32, Tensor[(117), int32]) {
  %343 = @func_9886() /* ty=(Tensor[(11, 5, 4), float64], Tensor[(864), float32], Tensor[(10, 4, 5), int64], int64, Tensor[(200), int64], Tensor[(7, 10, 3), bool], Tensor[(5, 42), float64]) */;
  %344 = cast(%var_10258, dtype="int32") /* ty=int32 */;
  %345 = cast(%var_10259, dtype="int32") /* ty=Tensor[(117), int32] */;
  %346 = reshape(%344, newshape=[]) /* ty=int32 */;
  %347 = reshape(%345, newshape=[1, 13, 9]) /* ty=Tensor[(1, 13, 9), int32] */;
  %348 = @func_1419(%346, %347) /* ty=(Tensor[(1, 13, 9), bool],) */;
  %349 = %343.5;
  %350 = %348.0;
  (%349, %350, %var_10258, %var_10259)
}

def @func_10442() -> Tensor[(11, 5, 4), float64] {
  %351 = @func_9677() /* ty=(Tensor[(11, 5, 4), float64], Tensor[(11, 5, 4), float64]) */;
  %351.0
}

def @func_3420(%var_3398: Tensor[(7, 10, 3), float64]) -> (Tensor[(7, 10, 3), bool],) {
  %352 = cast(%var_3398, dtype="float64") /* ty=Tensor[(7, 10, 3), float64] */;
  %353 = atanh(%352) /* ty=Tensor[(7, 10, 3), float64] */;
  %354 = cast(%var_3398, dtype="bool") /* ty=Tensor[(7, 10, 3), bool] */;
  %355 = shape_of(%353, dtype="int32") /* ty=Tensor[(3), int32] */;
  %356 = cast(%353, dtype="bool") /* ty=Tensor[(7, 10, 3), bool] */;
  %357 = dyn.reshape(%354, %355, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %358 = equal(%356, %357) /* ty=Tensor[(7, 10, 3), bool] */;
  (%358,)
}

def @func_5972(%var_5966: float32, %var_5967: Tensor[(7, 7, 14), float32]) -> (Tensor[(7, 7, 14), float32],) {
  %359 = cast(%var_5966, dtype="float32") /* ty=float32 */;
  %360 = cast(%var_5967, dtype="float32") /* ty=Tensor[(7, 7, 14), float32] */;
  %361 = divide(%359, %360) /* ty=Tensor[(7, 7, 14), float32] */;
  (%361,)
}

def @func_8279() -> (Tensor[(11, 5, 4), float64],) {
  %362 = @func_8174() /* ty=Tensor[(11, 5, 4), float64] */;
  (%362,)
}

def @func_658(%var_613: Tensor[(12, 9, 8), float32], %var_614: Tensor[(12, 9, 8), float32]) -> (Tensor[(12, 9, 8), int8], Tensor[(6, 9, 13), float64], Tensor[(702), float64]) {
  %363 = cast(%var_614, dtype="float32") /* ty=Tensor[(12, 9, 8), float32] */;
  %364 = shape_of(%var_613, dtype="int32") /* ty=Tensor[(3), int32] */;
  %365 = cast(%var_613, dtype="float32") /* ty=Tensor[(12, 9, 8), float32] */;
  %366 = dyn.reshape(%363, %364, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %367 = floor_divide(%365, %366) /* ty=Tensor[(12, 9, 8), float32] */;
  %368 = cast(%var_613, dtype="int8") /* ty=Tensor[(12, 9, 8), int8] */;
  %369 = shape_of(%367, dtype="int32") /* ty=Tensor[(3), int32] */;
  %370 = cast(%367, dtype="int8") /* ty=Tensor[(12, 9, 8), int8] */;
  %371 = dyn.reshape(%368, %369, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %372 = cast(meta[relay.Constant][25] /* ty=Tensor[(702), float64] */, dtype="float64") /* ty=Tensor[(702), float64] */;
  %373 = reshape(%372, newshape=[6, 9, 13]) /* ty=Tensor[(6, 9, 13), float64] */;
  %374 = @func_115(%373) /* ty=(Tensor[(6, 9, 13), float64], Tensor[(6, 9, 13), float64]) */;
  %375 = bitwise_xor(%370, %371) /* ty=Tensor[(12, 9, 8), int8] */;
  %376 = %374.0;
  (%375, %376, meta[relay.Constant][25] /* ty=Tensor[(702), float64] */)
}

def @func_1419(%var_1409: int32, %var_1410: Tensor[(1, 13, 9), int32]) -> (Tensor[(1, 13, 9), bool],) {
  %377 = cast(%var_1409, dtype="int32") /* ty=int32 */;
  %378 = cast(%var_1410, dtype="int32") /* ty=Tensor[(1, 13, 9), int32] */;
  %379 = subtract(%377, %378) /* ty=Tensor[(1, 13, 9), int32] */;
  %380 = cast(%379, dtype="bool") /* ty=Tensor[(1, 13, 9), bool] */;
  %381 = cast(%var_1409, dtype="bool") /* ty=bool */;
  %382 = less_equal(%380, %381) /* ty=Tensor[(1, 13, 9), bool] */;
  (%382,)
}

def @func_2104(%var_2089: Tensor[(7, 14, 10), float64]) -> (Tensor[(7, 14, 10), float64],) {
  %383 = cast(%var_2089, dtype="float64") /* ty=Tensor[(7, 14, 10), float64] */;
  %384 = exp(%383) /* ty=Tensor[(7, 14, 10), float64] */;
  (%384,)
}

def @func_7957(%var_7948: Tensor[(15, 12, 16), float64], %var_7952: Tensor[(84), float32]) -> (Tensor[(15, 12, 16), float64], Tensor[(210), float64], Tensor[(84), float32]) {
  %385 = cast(%var_7948, dtype="float64") /* ty=Tensor[(15, 12, 16), float64] */;
  %386 = cast(%var_7952, dtype="float32") /* ty=Tensor[(84), float32] */;
  %387 = reshape(%386, newshape=[6, 2, 7]) /* ty=Tensor[(6, 2, 7), float32] */;
  %388 = @func_3966(%387) /* ty=(Tensor[(6, 2, 7), float32], Tensor[(7, 10, 3), bool], Tensor[(210), float64]) */;
  %389 = exp(%385) /* ty=Tensor[(15, 12, 16), float64] */;
  %390 = %388.2;
  (%389, %390, %var_7952)
}

def @func_8174() -> Tensor[(11, 5, 4), float64] {
  %391 = @func_7888() /* ty=(Tensor[(11, 5, 4), float64],) */;
  %391.0
}

def @func_9630() -> Tensor[(11, 5, 4), float64] {
  %392 = @func_9045() /* ty=Tensor[(11, 5, 4), float64] */;
  %393 = cast(%392, dtype="float64") /* ty=Tensor[(11, 5, 4), float64] */;
  log10(%393) /* ty=Tensor[(11, 5, 4), float64] */
}

def @func_10394() -> (Tensor[(11, 5, 4), float64],) {
  %394 = @func_8773() /* ty=(Tensor[(11, 5, 4), float64],) */;
  %395 = %394.0;
  (%395,)
}

def @func_9230(%var_9210: Tensor[(11, 5, 4), float64]) -> (Tensor[(?, 16, 9), bool], Tensor[(13, 144), float64], Tensor[(11, 5, 4), bool]) {
  %396 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 144), float32] */, dtype="float32") /* ty=Tensor[(1, 144), float32] */;
  %397 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 144), float32] */, dtype="float32") /* ty=Tensor[(1, 144), float32] */;
  %398 = reshape(%396, newshape=[1, 16, 9]) /* ty=Tensor[(1, 16, 9), float32] */;
  %399 = reshape(%397, newshape=[1, 16, 9]) /* ty=Tensor[(1, 16, 9), float32] */;
  %400 = @func_1866(%398, %399) /* ty=(Tensor[(?, 16, 9), bool],) */;
  %401 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 144), float32] */, dtype="float64") /* ty=Tensor[(1, 144), float64] */;
  %402 = cast(meta[relay.Constant][27] /* ty=Tensor[(13, 144), float32] */, dtype="float64") /* ty=Tensor[(13, 144), float64] */;
  %403 = @func_8279() /* ty=(Tensor[(11, 5, 4), float64],) */;
  %404 = %403.0;
  %405 = cast(%var_9210, dtype="bool") /* ty=Tensor[(11, 5, 4), bool] */;
  %406 = shape_of(%404, dtype="int32") /* ty=Tensor[(3), int32] */;
  %407 = cast(%404, dtype="bool") /* ty=Tensor[(11, 5, 4), bool] */;
  %408 = dyn.reshape(%405, %406, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %409 = %400.0;
  %410 = power(%401, %402) /* ty=Tensor[(13, 144), float64] */;
  %411 = greater(%407, %408) /* ty=Tensor[(11, 5, 4), bool] */;
  (%409, %410, %411)
}

def @func_7834() -> (Tensor[(11, 5, 4), float64],) {
  %412 = @func_7647() /* ty=(Tensor[(11, 5, 4), float64],) */;
  %413 = %412.0;
  (%413,)
}

def @func_9323(%var_9260: Tensor[(11, 5, 4), float64], %var_9295: Tensor[(528), float64]) -> (Tensor[(11, 5, 4), uint32], Tensor[(200), int64], Tensor[(528), float64], Tensor[(11, 5, 4), float32], Tensor[(11, 5, 4), float64], Tensor[(1120), float32], Tensor[(7, 10, 3), bool], Tensor[(210), float64]) {
  %414 = @func_9149() /* ty=Tensor[(11, 5, 4), float64] */;
  %415 = cast(%var_9260, dtype="uint32") /* ty=Tensor[(11, 5, 4), uint32] */;
  %416 = shape_of(%414, dtype="int32") /* ty=Tensor[(3), int32] */;
  %417 = cast(%414, dtype="uint32") /* ty=Tensor[(11, 5, 4), uint32] */;
  %418 = dyn.reshape(%415, %416, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %419 = cast(%var_9295, dtype="float64") /* ty=Tensor[(528), float64] */;
  %420 = cast(%var_9295, dtype="float64") /* ty=Tensor[(528), float64] */;
  %421 = reshape(%419, newshape=[12, 4, 11]) /* ty=Tensor[(12, 4, 11), float64] */;
  %422 = reshape(%420, newshape=[12, 4, 11]) /* ty=Tensor[(12, 4, 11), float64] */;
  %423 = @func_2363(%421, %422) /* ty=(Tensor[(12, 4, 11), float64], Tensor[(10, 4, 5), int64], int64, Tensor[(200), int64]) */;
  %424 = cast(%414, dtype="float64") /* ty=Tensor[(11, 5, 4), float64] */;
  %425 = log(%424) /* ty=Tensor[(11, 5, 4), float64] */;
  %426 = cast(%425, dtype="float32") /* ty=Tensor[(11, 5, 4), float32] */;
  %427 = cast(meta[relay.Constant][28] /* ty=Tensor[(1120), float32] */, dtype="float32") /* ty=Tensor[(1120), float32] */;
  %428 = reshape(%427, newshape=[4, 280]) /* ty=Tensor[(4, 280), float32] */;
  %429 = @func_8230(%428) /* ty=(Tensor[(5, 16, 14), float32], Tensor[(4, 280), float32], Tensor[(11, 5, 4), float64]) */;
  %430 = cast(meta[relay.Constant][29] /* ty=Tensor[(210), float64] */, dtype="float64") /* ty=Tensor[(210), float64] */;
  %431 = reshape(%430, newshape=[7, 10, 3]) /* ty=Tensor[(7, 10, 3), float64] */;
  %432 = @func_3420(%431) /* ty=(Tensor[(7, 10, 3), bool],) */;
  %433 = logical_xor(%417, %418) /* ty=Tensor[(11, 5, 4), uint32] */;
  %434 = %423.3;
  %435 = asinh(%426) /* ty=Tensor[(11, 5, 4), float32] */;
  %436 = %429.2;
  %437 = %432.0;
  (%433, %434, %var_9295, %435, %436, meta[relay.Constant][28] /* ty=Tensor[(1120), float32] */, %437, meta[relay.Constant][29] /* ty=Tensor[(210), float64] */)
}

def @func_7782(%var_7775: float64, %var_7776: Tensor[(13, 1), float64]) -> (Tensor[(11, 5, 4), float64], Tensor[(1, 13), float64], float64, Tensor[(13, 1), float64]) {
  %438 = @func_7647() /* ty=(Tensor[(11, 5, 4), float64],) */;
  %439 = cast(%var_7775, dtype="float64") /* ty=float64 */;
  %440 = cast(%var_7776, dtype="float64") /* ty=Tensor[(13, 1), float64] */;
  %441 = reshape(%439, newshape=[]) /* ty=float64 */;
  %442 = reshape(%440, newshape=[1, 13]) /* ty=Tensor[(1, 13), float64] */;
  %443 = @func_4924(%441, %442) /* ty=(Tensor[(1, 13), float64],) */;
  %444 = %438.0;
  %445 = %443.0;
  (%444, %445, %var_7775, %var_7776)
}

def @func_1528(%var_1501: int64, %var_1502: Tensor[(10, 4, 5), int64]) -> (Tensor[(10, 4, 5), int64],) {
  %446 = cast(%var_1501, dtype="int64") /* ty=int64 */;
  %447 = cast(%var_1502, dtype="int64") /* ty=Tensor[(10, 4, 5), int64] */;
  %448 = right_shift(%446, %447) /* ty=Tensor[(10, 4, 5), int64] */;
  (%448,)
}

def @func_8126(%var_8087: Tensor[(15, 15, 5), int8], %var_8088: Tensor[(15, 15, 5), int8], %var_8109: int64, %var_8120: Tensor[(8, 18), bool]) -> (Tensor[(15, 15, 5), int8], Tensor[(6, 10, 4), float32], Tensor[(240), float32], Tensor[(10, 5, 8), bool], Tensor[(2, 200), bool], Tensor[(7, 14, 10), float64], Tensor[(180), float32], Tensor[(336, 1), float32], int64, Tensor[(5, 40), int64], Tensor[(7, 14, 10), float64], int32, Tensor[(8, 18), bool], Tensor[(13, 9), int32]) {
  %449 = cast(%var_8088, dtype="int8") /* ty=Tensor[(15, 15, 5), int8] */;
  %450 = shape_of(%var_8087, dtype="int32") /* ty=Tensor[(3), int32] */;
  %451 = cast(%var_8087, dtype="int8") /* ty=Tensor[(15, 15, 5), int8] */;
  %452 = dyn.reshape(%449, %450, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %453 = cast(meta[relay.Constant][30] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %454 = reshape(%453, newshape=[6, 10, 4]) /* ty=Tensor[(6, 10, 4), float32] */;
  %455 = cast(meta[relay.Constant][31] /* ty=Tensor[(2, 200), bool] */, dtype="bool") /* ty=Tensor[(2, 200), bool] */;
  %456 = reshape(%455, newshape=[10, 5, 8]) /* ty=Tensor[(10, 5, 8), bool] */;
  %457 = @func_2907(%456) /* ty=(Tensor[(10, 5, 8), bool], Tensor[(10, 5, 8), int16]) */;
  %458 = cast(meta[relay.Constant][32] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %459 = cast(meta[relay.Constant][33] /* ty=Tensor[(336, 1), float32] */, dtype="float32") /* ty=Tensor[(336, 1), float32] */;
  %460 = cast(%var_8109, dtype="int64") /* ty=int64 */;
  %461 = cast(meta[relay.Constant][34] /* ty=Tensor[(5, 40), int64] */, dtype="int64") /* ty=Tensor[(5, 40), int64] */;
  %462 = reshape(%458, newshape=[9, 5, 4]) /* ty=Tensor[(9, 5, 4), float32] */;
  %463 = reshape(%459, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %464 = reshape(%460, newshape=[]) /* ty=int64 */;
  %465 = reshape(%461, newshape=[200]) /* ty=Tensor[(200), int64] */;
  %466 = @func_4243(%462, %463, %464, %465) /* ty=(Tensor[(12, 7, 4), float32], Tensor[(336), float32], Tensor[(10, 4, 5), int64], int64, Tensor[(200), int64], Tensor[(7, 14, 10), float64], Tensor[(980), float64], Tensor[(9, 5, 4), float32]) */;
  %467 = %466.5;
  %468 = cast(%467, dtype="float64") /* ty=Tensor[(7, 14, 10), float64] */;
  %469 = reshape(%468, newshape=[7, 14, 10]) /* ty=Tensor[(7, 14, 10), float64] */;
  %470 = @func_2104(%469) /* ty=(Tensor[(7, 14, 10), float64],) */;
  %471 = cast(%var_8120, dtype="bool") /* ty=Tensor[(8, 18), bool] */;
  %472 = cast(%var_8120, dtype="bool") /* ty=Tensor[(8, 18), bool] */;
  %473 = cast(%var_8109, dtype="int32") /* ty=int32 */;
  %474 = cast(meta[relay.Constant][35] /* ty=Tensor[(13, 9), int32] */, dtype="int32") /* ty=Tensor[(13, 9), int32] */;
  %475 = reshape(%471, newshape=[4, 12, 3]) /* ty=Tensor[(4, 12, 3), bool] */;
  %476 = reshape(%472, newshape=[4, 12, 3]) /* ty=Tensor[(4, 12, 3), bool] */;
  %477 = reshape(%473, newshape=[]) /* ty=int32 */;
  %478 = reshape(%474, newshape=[117]) /* ty=Tensor[(117), int32] */;
  %479 = @func_1891(%475, %476, %477, %478) /* ty=(Tensor[(4, 12, 3), bool], Tensor[(1, 13, 9), bool], int32, Tensor[(117), int32]) */;
  %480 = right_shift(%451, %452) /* ty=Tensor[(15, 15, 5), int8] */;
  %481 = @func_2260(%454) /* ty=Tensor[(6, 10, 4), float32] */;
  %482 = %457.0;
  %483 = %470.0;
  %484 = %479.2;
  (%480, %481, meta[relay.Constant][30] /* ty=Tensor[(240), float32] */, %482, meta[relay.Constant][31] /* ty=Tensor[(2, 200), bool] */, %467, meta[relay.Constant][32] /* ty=Tensor[(180), float32] */, meta[relay.Constant][33] /* ty=Tensor[(336, 1), float32] */, %var_8109, meta[relay.Constant][34] /* ty=Tensor[(5, 40), int64] */, %483, %484, %var_8120, meta[relay.Constant][35] /* ty=Tensor[(13, 9), int32] */)
}

def @func_7762(%var_7743: Tensor[(400), bool], %var_7753: Tensor[(400), bool]) -> (Tensor[(11, 5, 4), float64], Tensor[(10, 5, 8), int16], Tensor[(10, 10, 1), int16], Tensor[(100), int16], Tensor[(400), float64]) {
  %485 = @func_7647() /* ty=(Tensor[(11, 5, 4), float64],) */;
  %486 = cast(%var_7743, dtype="bool") /* ty=Tensor[(400), bool] */;
  %487 = reshape(%486, newshape=[10, 5, 8]) /* ty=Tensor[(10, 5, 8), bool] */;
  %488 = @func_2907(%487) /* ty=(Tensor[(10, 5, 8), bool], Tensor[(10, 5, 8), int16]) */;
  %489 = cast(meta[relay.Constant][36] /* ty=Tensor[(100), int16] */, dtype="int16") /* ty=Tensor[(100), int16] */;
  %490 = reshape(%489, newshape=[10, 10, 1]) /* ty=Tensor[(10, 10, 1), int16] */;
  %491 = cast(%var_7753, dtype="float64") /* ty=Tensor[(400), float64] */;
  %492 = shape_of(%var_7743, dtype="int32") /* ty=Tensor[(1), int32] */;
  %493 = cast(%var_7743, dtype="float64") /* ty=Tensor[(400), float64] */;
  %494 = dyn.reshape(%491, %492, newshape=[]) /* ty=Tensor[(?), float64] */;
  %495 = %485.0;
  %496 = %488.1;
  %497 = @func_3884(%490) /* ty=Tensor[(10, 10, 1), int16] */;
  %498 = power(%493, %494) /* ty=Tensor[(400), float64] */;
  (%495, %496, %497, meta[relay.Constant][36] /* ty=Tensor[(100), int16] */, %498)
}

def @func_3256(%var_3245: float64) -> (Tensor[(10, 15, 10), float64], Tensor[(5, 13, 6), bool], Tensor[(390), float32]) {
  %499 = cast(%var_3245, dtype="float64") /* ty=float64 */;
  %500 = cast(meta[relay.Constant][37] /* ty=Tensor[(10, 15, 10), float64] */, dtype="float64") /* ty=Tensor[(10, 15, 10), float64] */;
  %501 = cast(meta[relay.Constant][38] /* ty=Tensor[(390), float32] */, dtype="float32") /* ty=Tensor[(390), float32] */;
  %502 = cast(meta[relay.Constant][38] /* ty=Tensor[(390), float32] */, dtype="float32") /* ty=Tensor[(390), float32] */;
  %503 = reshape(%501, newshape=[5, 13, 6]) /* ty=Tensor[(5, 13, 6), float32] */;
  %504 = reshape(%502, newshape=[5, 13, 6]) /* ty=Tensor[(5, 13, 6), float32] */;
  %505 = @func_1935(%503, %504) /* ty=(Tensor[(5, 13, 6), bool],) */;
  %506 = floor_divide(%499, %500) /* ty=Tensor[(10, 15, 10), float64] */;
  %507 = %505.0;
  (%506, %507, meta[relay.Constant][38] /* ty=Tensor[(390), float32] */)
}

def @func_4243(%var_4164: Tensor[(9, 5, 4), float32], %var_4180: Tensor[(336), float32], %var_4221: int64, %var_4222: Tensor[(200), int64]) -> (Tensor[(12, 7, 4), float32], Tensor[(336), float32], Tensor[(10, 4, 5), int64], int64, Tensor[(200), int64], Tensor[(7, 14, 10), float64], Tensor[(980), float64], Tensor[(9, 5, 4), float32]) {
  %508 = cast(%var_4180, dtype="float32") /* ty=Tensor[(336), float32] */;
  %509 = reshape(%508, newshape=[12, 7, 4]) /* ty=Tensor[(12, 7, 4), float32] */;
  %510 = cast(%var_4221, dtype="int64") /* ty=int64 */;
  %511 = cast(%var_4222, dtype="int64") /* ty=Tensor[(200), int64] */;
  %512 = reshape(%510, newshape=[]) /* ty=int64 */;
  %513 = reshape(%511, newshape=[10, 4, 5]) /* ty=Tensor[(10, 4, 5), int64] */;
  %514 = @func_1528(%512, %513) /* ty=(Tensor[(10, 4, 5), int64],) */;
  %515 = cast(meta[relay.Constant][39] /* ty=Tensor[(980), float64] */, dtype="float64") /* ty=Tensor[(980), float64] */;
  %516 = reshape(%515, newshape=[7, 14, 10]) /* ty=Tensor[(7, 14, 10), float64] */;
  %517 = @func_2104(%516) /* ty=(Tensor[(7, 14, 10), float64],) */;
  %518 = cast(%var_4164, dtype="float32") /* ty=Tensor[(9, 5, 4), float32] */;
  %519 = sin(%518) /* ty=Tensor[(9, 5, 4), float32] */;
  %520 = cast(%519, dtype="float32") /* ty=Tensor[(9, 5, 4), float32] */;
  %521 = sqrt(%520) /* ty=Tensor[(9, 5, 4), float32] */;
  %522 = cast(%521, dtype="float32") /* ty=Tensor[(9, 5, 4), float32] */;
  %523 = @func_3792(%509) /* ty=Tensor[(12, 7, 4), float32] */;
  %524 = %514.0;
  %525 = %517.0;
  %526 = acosh(%522) /* ty=Tensor[(9, 5, 4), float32] */;
  (%523, %var_4180, %524, %var_4221, %var_4222, %525, meta[relay.Constant][39] /* ty=Tensor[(980), float64] */, %526)
}

def @func_115(%var_89: Tensor[(6, 9, 13), float64]) -> (Tensor[(6, 9, 13), float64], Tensor[(6, 9, 13), float64]) {
  %527 = cast(%var_89, dtype="float64") /* ty=Tensor[(6, 9, 13), float64] */;
  %528 = cast(%var_89, dtype="float64") /* ty=Tensor[(6, 9, 13), float64] */;
  %529 = acos(%527) /* ty=Tensor[(6, 9, 13), float64] */;
  %530 = sigmoid(%528) /* ty=Tensor[(6, 9, 13), float64] */;
  (%529, %530)
}

def @func_2512(%var_2501: Tensor[(12, 14, 2), int8], %var_2502: Tensor[(12, 14, 2), int8], %var_2509: int32, %var_2510: Tensor[(117), int32]) -> (Tensor[(12, 14, 2), int8], Tensor[(1, 13, 9), bool], int32, Tensor[(117), int32]) {
  %531 = cast(%var_2502, dtype="int8") /* ty=Tensor[(12, 14, 2), int8] */;
  %532 = shape_of(%var_2501, dtype="int32") /* ty=Tensor[(3), int32] */;
  %533 = cast(%var_2501, dtype="int8") /* ty=Tensor[(12, 14, 2), int8] */;
  %534 = dyn.reshape(%531, %532, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %535 = cast(%var_2509, dtype="int32") /* ty=int32 */;
  %536 = cast(%var_2510, dtype="int32") /* ty=Tensor[(117), int32] */;
  %537 = reshape(%535, newshape=[]) /* ty=int32 */;
  %538 = reshape(%536, newshape=[1, 13, 9]) /* ty=Tensor[(1, 13, 9), int32] */;
  %539 = @func_1419(%537, %538) /* ty=(Tensor[(1, 13, 9), bool],) */;
  %540 = add(%533, %534) /* ty=Tensor[(12, 14, 2), int8] */;
  %541 = %539.0;
  (%540, %541, %var_2509, %var_2510)
}

def @func_4461(%var_4445: Tensor[(14, 3, 12), bool], %var_4446: Tensor[(14, 3, 12), bool]) -> (Tensor[(14, 3, 12), bool], int32, Tensor[(144), bool], int32, Tensor[(13, 9), int32]) {
  %542 = cast(%var_4446, dtype="bool") /* ty=Tensor[(14, 3, 12), bool] */;
  %543 = shape_of(%var_4445, dtype="int32") /* ty=Tensor[(3), int32] */;
  %544 = cast(%var_4445, dtype="bool") /* ty=Tensor[(14, 3, 12), bool] */;
  %545 = dyn.reshape(%542, %543, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %546 = cast(meta[relay.Constant][40] /* ty=Tensor[(144), bool] */, dtype="bool") /* ty=Tensor[(144), bool] */;
  %547 = cast(meta[relay.Constant][40] /* ty=Tensor[(144), bool] */, dtype="bool") /* ty=Tensor[(144), bool] */;
  %548 = cast(-5 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %549 = cast(meta[relay.Constant][41] /* ty=Tensor[(13, 9), int32] */, dtype="int32") /* ty=Tensor[(13, 9), int32] */;
  %550 = reshape(%546, newshape=[4, 12, 3]) /* ty=Tensor[(4, 12, 3), bool] */;
  %551 = reshape(%547, newshape=[4, 12, 3]) /* ty=Tensor[(4, 12, 3), bool] */;
  %552 = reshape(%548, newshape=[]) /* ty=int32 */;
  %553 = reshape(%549, newshape=[117]) /* ty=Tensor[(117), int32] */;
  %554 = @func_1891(%550, %551, %552, %553) /* ty=(Tensor[(4, 12, 3), bool], Tensor[(1, 13, 9), bool], int32, Tensor[(117), int32]) */;
  %555 = logical_or(%544, %545) /* ty=Tensor[(14, 3, 12), bool] */;
  %556 = %554.2;
  (%555, %556, meta[relay.Constant][40] /* ty=Tensor[(144), bool] */, -5 /* ty=int32 */, meta[relay.Constant][41] /* ty=Tensor[(13, 9), int32] */)
}

def @func_7928(%var_7891: Tensor[(16, 12, 11), float64], %var_7904: Tensor[(180), float32]) -> (Tensor[(16, 12, 11), float32], Tensor[(10, 4, 5), int64], Tensor[(180), float32], Tensor[(8, 42), float32], int64, Tensor[(200), int64], Tensor[(16, 12, 11), float32]) {
  %557 = cast(%var_7891, dtype="float64") /* ty=Tensor[(16, 12, 11), float64] */;
  %558 = exp(%557) /* ty=Tensor[(16, 12, 11), float64] */;
  %559 = cast(%558, dtype="float32") /* ty=Tensor[(16, 12, 11), float32] */;
  %560 = cast(%var_7904, dtype="float32") /* ty=Tensor[(180), float32] */;
  %561 = cast(meta[relay.Constant][42] /* ty=Tensor[(8, 42), float32] */, dtype="float32") /* ty=Tensor[(8, 42), float32] */;
  %562 = cast(-6 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %563 = cast(meta[relay.Constant][43] /* ty=Tensor[(200), int64] */, dtype="int64") /* ty=Tensor[(200), int64] */;
  %564 = reshape(%560, newshape=[9, 5, 4]) /* ty=Tensor[(9, 5, 4), float32] */;
  %565 = reshape(%561, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %566 = reshape(%562, newshape=[]) /* ty=int64 */;
  %567 = reshape(%563, newshape=[200]) /* ty=Tensor[(200), int64] */;
  %568 = @func_4243(%564, %565, %566, %567) /* ty=(Tensor[(12, 7, 4), float32], Tensor[(336), float32], Tensor[(10, 4, 5), int64], int64, Tensor[(200), int64], Tensor[(7, 14, 10), float64], Tensor[(980), float64], Tensor[(9, 5, 4), float32]) */;
  %569 = cast(%var_7891, dtype="float32") /* ty=Tensor[(16, 12, 11), float32] */;
  %570 = sinh(%559) /* ty=Tensor[(16, 12, 11), float32] */;
  %571 = %568.2;
  %572 = sin(%569) /* ty=Tensor[(16, 12, 11), float32] */;
  (%570, %571, %var_7904, meta[relay.Constant][42] /* ty=Tensor[(8, 42), float32] */, -6 /* ty=int64 */, meta[relay.Constant][43] /* ty=Tensor[(200), int64] */, %572)
}

def @func_8071() -> Tensor[(11, 5, 4), float64] {
  %573 = @func_7888() /* ty=(Tensor[(11, 5, 4), float64],) */;
  %573.0
}

def @func_7675(%var_7666: Tensor[(14, 4, 11), float32]) -> Tensor[(14, 4, 11), float64] {
  %574 = cast(%var_7666, dtype="float32") /* ty=Tensor[(14, 4, 11), float32] */;
  %575 = asin(%574) /* ty=Tensor[(14, 4, 11), float32] */;
  %576 = cast(%575, dtype="float64") /* ty=Tensor[(14, 4, 11), float64] */;
  rsqrt(%576) /* ty=Tensor[(14, 4, 11), float64] */
}

def @func_9829() -> Tensor[(11, 5, 4), float64] {
  @func_8835() /* ty=Tensor[(11, 5, 4), float64] */
}

def @func_8835() -> Tensor[(11, 5, 4), float64] {
  %577 = @func_8773() /* ty=(Tensor[(11, 5, 4), float64],) */;
  %577.0
}

def @func_9956(%var_9939: Tensor[(2, 3, 6), int16], %var_9940: Tensor[(2, 3, 6), int16], %var_9947: Tensor[(1, 220), float64]) -> (Tensor[(2, 3, 6), bool], Tensor[(11, 5, 4), bool], Tensor[(1, 220), float64]) {
  %578 = cast(%var_9940, dtype="bool") /* ty=Tensor[(2, 3, 6), bool] */;
  %579 = shape_of(%var_9939, dtype="int32") /* ty=Tensor[(3), int32] */;
  %580 = cast(%var_9939, dtype="bool") /* ty=Tensor[(2, 3, 6), bool] */;
  %581 = dyn.reshape(%578, %579, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %582 = cast(%var_9947, dtype="float64") /* ty=Tensor[(1, 220), float64] */;
  %583 = reshape(%582, newshape=[11, 5, 4]) /* ty=Tensor[(11, 5, 4), float64] */;
  %584 = @func_9230(%583) /* ty=(Tensor[(?, 16, 9), bool], Tensor[(13, 144), float64], Tensor[(11, 5, 4), bool]) */;
  %585 = less(%580, %581) /* ty=Tensor[(2, 3, 6), bool] */;
  %586 = %584.2;
  (%585, %586, %var_9947)
}

def @func_8004(%var_7978: Tensor[(528), float64], %var_7993: Tensor[(78), int16]) -> (Tensor[(11, 5, 4), float64], int64, Tensor[(528), float64], Tensor[(14, 13, 6), int16], Tensor[(78), int16], Tensor[(7, 156), int16]) {
  %587 = @func_7647() /* ty=(Tensor[(11, 5, 4), float64],) */;
  %588 = cast(%var_7978, dtype="float64") /* ty=Tensor[(528), float64] */;
  %589 = cast(%var_7978, dtype="float64") /* ty=Tensor[(528), float64] */;
  %590 = reshape(%588, newshape=[12, 4, 11]) /* ty=Tensor[(12, 4, 11), float64] */;
  %591 = reshape(%589, newshape=[12, 4, 11]) /* ty=Tensor[(12, 4, 11), float64] */;
  %592 = @func_2363(%590, %591) /* ty=(Tensor[(12, 4, 11), float64], Tensor[(10, 4, 5), int64], int64, Tensor[(200), int64]) */;
  %593 = cast(%var_7993, dtype="int16") /* ty=Tensor[(78), int16] */;
  %594 = cast(meta[relay.Constant][44] /* ty=Tensor[(7, 156), int16] */, dtype="int16") /* ty=Tensor[(7, 156), int16] */;
  %595 = reshape(%593, newshape=[1, 13, 6]) /* ty=Tensor[(1, 13, 6), int16] */;
  %596 = reshape(%594, newshape=[14, 13, 6]) /* ty=Tensor[(14, 13, 6), int16] */;
  %597 = %587.0;
  %598 = %592.2;
  %599 = @func_1276(%595, %596) /* ty=Tensor[(14, 13, 6), int16] */;
  (%597, %598, %var_7978, %599, %var_7993, meta[relay.Constant][44] /* ty=Tensor[(7, 156), int16] */)
}

def @func_8301() -> Tensor[(11, 5, 4), float64] {
  @func_8242() /* ty=Tensor[(11, 5, 4), float64] */
}

def @func_1076(%var_1072: Tensor[(5, 16, 14), float32]) -> Tensor[(5, 16, 14), float32] {
  %600 = cast(%var_1072, dtype="float32") /* ty=Tensor[(5, 16, 14), float32] */;
  sqrt(%600) /* ty=Tensor[(5, 16, 14), float32] */
}

def @main() -> (Tensor[(14, 8, 8), float64],) {
  %601 = cast(meta[relay.Constant][45] /* ty=Tensor[(14, 8, 8), float64] */, dtype="float64") /* ty=Tensor[(14, 8, 8), float64] */;
  %602 = erf(%601) /* ty=Tensor[(14, 8, 8), float64] */;
  (%602,)
}

def @func_6878(%var_6852: Tensor[(5, 42), float64]) -> (Tensor[(6, 10, 4), float32], Tensor[(240), float32], Tensor[(9, 11, 2), bool], Tensor[(7, 10, 3), bool], Tensor[(5, 42), bool]) {
  %603 = cast(meta[relay.Constant][46] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %604 = reshape(%603, newshape=[6, 10, 4]) /* ty=Tensor[(6, 10, 4), float32] */;
  %605 = cast(meta[relay.Constant][47] /* ty=Tensor[(9, 11, 2), float32] */, dtype="float32") /* ty=Tensor[(9, 11, 2), float32] */;
  %606 = cosh(%605) /* ty=Tensor[(9, 11, 2), float32] */;
  %607 = cast(meta[relay.Constant][47] /* ty=Tensor[(9, 11, 2), float32] */, dtype="int16") /* ty=Tensor[(9, 11, 2), int16] */;
  %608 = shape_of(%606, dtype="int32") /* ty=Tensor[(3), int32] */;
  %609 = cast(%606, dtype="int16") /* ty=Tensor[(9, 11, 2), int16] */;
  %610 = dyn.reshape(%607, %608, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %611 = bitwise_or(%609, %610) /* ty=Tensor[(9, 11, 2), int16] */;
  %612 = cast(%611, dtype="bool") /* ty=Tensor[(9, 11, 2), bool] */;
  %613 = shape_of(meta[relay.Constant][47] /* ty=Tensor[(9, 11, 2), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %614 = cast(meta[relay.Constant][47] /* ty=Tensor[(9, 11, 2), float32] */, dtype="bool") /* ty=Tensor[(9, 11, 2), bool] */;
  %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %616 = cast(meta[relay.Constant][48] /* ty=Tensor[(5, 42), float64] */, dtype="float64") /* ty=Tensor[(5, 42), float64] */;
  %617 = reshape(%616, newshape=[7, 10, 3]) /* ty=Tensor[(7, 10, 3), float64] */;
  %618 = @func_3420(%617) /* ty=(Tensor[(7, 10, 3), bool],) */;
  %619 = cast(%var_6852, dtype="bool") /* ty=Tensor[(5, 42), bool] */;
  %620 = shape_of(meta[relay.Constant][48] /* ty=Tensor[(5, 42), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %621 = cast(meta[relay.Constant][48] /* ty=Tensor[(5, 42), float64] */, dtype="bool") /* ty=Tensor[(5, 42), bool] */;
  %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %623 = @func_2260(%604) /* ty=Tensor[(6, 10, 4), float32] */;
  %624 = equal(%614, %615) /* ty=Tensor[(9, 11, 2), bool] */;
  %625 = %618.0;
  %626 = logical_or(%621, %622) /* ty=Tensor[(5, 42), bool] */;
  (%623, meta[relay.Constant][46] /* ty=Tensor[(240), float32] */, %624, %625, %626)
}

def @func_10492(%var_10467: Tensor[(336), int8]) -> (Tensor[(11, 5, 4), float64], int32, Tensor[(336), int8], int32, Tensor[(117), int32], Tensor[(1, 13), float64], Tensor[(13), float64]) {
  %627 = @func_9512() /* ty=(Tensor[(11, 5, 4), float64], Tensor[(11, 5, 4), float64]) */;
  %628 = cast(%var_10467, dtype="int8") /* ty=Tensor[(336), int8] */;
  %629 = cast(%var_10467, dtype="int8") /* ty=Tensor[(336), int8] */;
  %630 = cast(-2 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %631 = cast(meta[relay.Constant][49] /* ty=Tensor[(117), int32] */, dtype="int32") /* ty=Tensor[(117), int32] */;
  %632 = reshape(%628, newshape=[12, 14, 2]) /* ty=Tensor[(12, 14, 2), int8] */;
  %633 = reshape(%629, newshape=[12, 14, 2]) /* ty=Tensor[(12, 14, 2), int8] */;
  %634 = reshape(%630, newshape=[]) /* ty=int32 */;
  %635 = reshape(%631, newshape=[117]) /* ty=Tensor[(117), int32] */;
  %636 = @func_2512(%632, %633, %634, %635) /* ty=(Tensor[(12, 14, 2), int8], Tensor[(1, 13, 9), bool], int32, Tensor[(117), int32]) */;
  %637 = %636.2;
  %638 = cast(%637, dtype="float64") /* ty=float64 */;
  %639 = cast(meta[relay.Constant][50] /* ty=Tensor[(13), float64] */, dtype="float64") /* ty=Tensor[(13), float64] */;
  %640 = reshape(%638, newshape=[]) /* ty=float64 */;
  %641 = reshape(%639, newshape=[13, 1]) /* ty=Tensor[(13, 1), float64] */;
  %642 = @func_7782(%640, %641) /* ty=(Tensor[(11, 5, 4), float64], Tensor[(1, 13), float64], float64, Tensor[(13, 1), float64]) */;
  %643 = %627.0;
  %644 = %642.1;
  (%643, %637, %var_10467, -2 /* ty=int32 */, meta[relay.Constant][49] /* ty=Tensor[(117), int32] */, %644, meta[relay.Constant][50] /* ty=Tensor[(13), float64] */)
}

def @func_7647() -> (Tensor[(11, 5, 4), float64],) {
  %645 = cast(meta[relay.Constant][52] /* ty=Tensor[(11, 5, 4), float64] */, dtype="float64") /* ty=Tensor[(11, 5, 4), float64] */;
  %646 = shape_of(meta[relay.Constant][51] /* ty=Tensor[(11, 5, 4), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %647 = cast(meta[relay.Constant][51] /* ty=Tensor[(11, 5, 4), float64] */, dtype="float64") /* ty=Tensor[(11, 5, 4), float64] */;
  %648 = dyn.reshape(%645, %646, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %649 = floor_divide(%647, %648) /* ty=Tensor[(11, 5, 4), float64] */;
  (%649,)
}

def @func_1866(%var_1857: Tensor[(1, 16, 9), float32], %var_1862: Tensor[(1, 16, 9), float32]) -> (Tensor[(?, 16, 9), bool],) {
  %650 = cast(%var_1857, dtype="float32") /* ty=Tensor[(1, 16, 9), float32] */;
  %651 = acosh(%650) /* ty=Tensor[(1, 16, 9), float32] */;
  %652 = cast(%var_1862, dtype="bool") /* ty=Tensor[(1, 16, 9), bool] */;
  %653 = shape_of(%651, dtype="int32") /* ty=Tensor[(3), int32] */;
  %654 = cast(%651, dtype="bool") /* ty=Tensor[(1, 16, 9), bool] */;
  %655 = dyn.reshape(%652, %653, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %656 = less(%654, %655) /* ty=Tensor[(?, 16, 9), bool] */;
  (%656,)
}

def @func_2907(%var_2888: Tensor[(10, 5, 8), bool]) -> (Tensor[(10, 5, 8), bool], Tensor[(10, 5, 8), int16]) {
  %657 = cast(meta[relay.Constant][53] /* ty=Tensor[(10, 5, 8), bool] */, dtype="bool") /* ty=Tensor[(10, 5, 8), bool] */;
  %658 = shape_of(%var_2888, dtype="int32") /* ty=Tensor[(3), int32] */;
  %659 = cast(%var_2888, dtype="bool") /* ty=Tensor[(10, 5, 8), bool] */;
  %660 = dyn.reshape(%657, %658, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %661 = cast(%var_2888, dtype="int16") /* ty=Tensor[(10, 5, 8), int16] */;
  %662 = shape_of(meta[relay.Constant][53] /* ty=Tensor[(10, 5, 8), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %663 = cast(meta[relay.Constant][53] /* ty=Tensor[(10, 5, 8), bool] */, dtype="int16") /* ty=Tensor[(10, 5, 8), int16] */;
  %664 = dyn.reshape(%661, %662, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %665 = logical_or(%659, %660) /* ty=Tensor[(10, 5, 8), bool] */;
  %666 = right_shift(%663, %664) /* ty=Tensor[(10, 5, 8), int16] */;
  (%665, %666)
}

def @func_5063(%var_5058: int16, %var_5059: Tensor[(10, 7, 8), int16]) -> (Tensor[(10, 7, 8), int16],) {
  %667 = cast(%var_5058, dtype="int16") /* ty=int16 */;
  %668 = cast(%var_5059, dtype="int16") /* ty=Tensor[(10, 7, 8), int16] */;
  %669 = logical_xor(%667, %668) /* ty=Tensor[(10, 7, 8), int16] */;
  (%669,)
}

def @func_9476() -> Tensor[(11, 5, 4), float64] {
  @func_8242() /* ty=Tensor[(11, 5, 4), float64] */
}

def @func_7171(%var_7123: Tensor[(14, 5, 5), int64], %var_7124: Tensor[(14, 5, 5), int64], %var_7133: Tensor[(90, 2), float32], %var_7134: int64, %var_7136: Tensor[(390), int32], %var_7140: Tensor[(702), float64], %var_7154: Tensor[(1092), int16], %var_7158: Tensor[(528), float64]) -> (Tensor[(14, 5, 5), int64], Tensor[(?, ?, 12), bool], Tensor[(12), float32], Tensor[(336), float32], int64, Tensor[(30), int32], Tensor[(390), int32], Tensor[(78), int16], Tensor[(6, 9, 13), float64], Tensor[(702), float64], Tensor[(90, 2), float64], Tensor[(1, 13, 9), bool], Tensor[(2340), int8], Tensor[(1092), int16], Tensor[(117), int32], Tensor[(10, 4, 5), int64], Tensor[(528), float64]) {
  %670 = cast(%var_7124, dtype="int64") /* ty=Tensor[(14, 5, 5), int64] */;
  %671 = shape_of(%var_7123, dtype="int32") /* ty=Tensor[(3), int32] */;
  %672 = cast(%var_7123, dtype="int64") /* ty=Tensor[(14, 5, 5), int64] */;
  %673 = dyn.reshape(%670, %671, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %674 = cast(meta[relay.Constant][54] /* ty=Tensor[(12), float32] */, dtype="float32") /* ty=Tensor[(12), float32] */;
  %675 = cast(meta[relay.Constant][55] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %676 = cast(%var_7133, dtype="float32") /* ty=Tensor[(90, 2), float32] */;
  %677 = cast(%var_7134, dtype="int64") /* ty=int64 */;
  %678 = cast(meta[relay.Constant][56] /* ty=Tensor[(30), int32] */, dtype="int32") /* ty=Tensor[(30), int32] */;
  %679 = cast(%var_7136, dtype="int32") /* ty=Tensor[(390), int32] */;
  %680 = cast(meta[relay.Constant][57] /* ty=Tensor[(78), int16] */, dtype="int16") /* ty=Tensor[(78), int16] */;
  %681 = reshape(%674, newshape=[1, 1, 12]) /* ty=Tensor[(1, 1, 12), float32] */;
  %682 = reshape(%675, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %683 = reshape(%676, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %684 = reshape(%677, newshape=[]) /* ty=int64 */;
  %685 = reshape(%678, newshape=[30]) /* ty=Tensor[(30), int32] */;
  %686 = reshape(%679, newshape=[390]) /* ty=Tensor[(390), int32] */;
  %687 = reshape(%680, newshape=[78]) /* ty=Tensor[(78), int16] */;
  %688 = @func_6606(%681, %682, %683, %684, %685, %686, %687) /* ty=(Tensor[(12, 7, 4), float32], Tensor[(336), float32], int64, Tensor[(180), float32], int64, Tensor[(200), int64], Tensor[(10, 13, 3), int8], Tensor[(30), int32], Tensor[(390), int32], Tensor[(12, 7, 4), float32], Tensor[(6, 9, 13), float64], Tensor[(36, 24), float32], Tensor[(14, 13, 6), int16], Tensor[(78), int16], Tensor[(1092), int16], Tensor[(13, 15, 12), int8], Tensor[(?, ?, 12), bool], Tensor[(13, 15, 12), bool]) */;
  %689 = cast(%var_7140, dtype="float64") /* ty=Tensor[(702), float64] */;
  %690 = reshape(%689, newshape=[6, 9, 13]) /* ty=Tensor[(6, 9, 13), float64] */;
  %691 = @func_115(%690) /* ty=(Tensor[(6, 9, 13), float64], Tensor[(6, 9, 13), float64]) */;
  %692 = cast(%var_7133, dtype="float32") /* ty=Tensor[(90, 2), float32] */;
  %693 = sinh(%692) /* ty=Tensor[(90, 2), float32] */;
  %694 = cast(%693, dtype="float64") /* ty=Tensor[(90, 2), float64] */;
  %695 = cast(meta[relay.Constant][58] /* ty=Tensor[(2340), int8] */, dtype="int8") /* ty=Tensor[(2340), int8] */;
  %696 = cast(meta[relay.Constant][58] /* ty=Tensor[(2340), int8] */, dtype="int8") /* ty=Tensor[(2340), int8] */;
  %697 = cast(%var_7154, dtype="int16") /* ty=Tensor[(1092), int16] */;
  %698 = cast(meta[relay.Constant][59] /* ty=Tensor[(117), int32] */, dtype="int32") /* ty=Tensor[(117), int32] */;
  %699 = reshape(%695, newshape=[15, 13, 12]) /* ty=Tensor[(15, 13, 12), int8] */;
  %700 = reshape(%696, newshape=[15, 13, 12]) /* ty=Tensor[(15, 13, 12), int8] */;
  %701 = reshape(%697, newshape=[1092]) /* ty=Tensor[(1092), int16] */;
  %702 = reshape(%698, newshape=[117]) /* ty=Tensor[(117), int32] */;
  %703 = @func_4652(%699, %700, %701, %702) /* ty=(Tensor[(15, 13, 12), int8], int32, Tensor[(504), bool], Tensor[(14, 13, 6), int16], Tensor[(78), int16], Tensor[(1092), int16], Tensor[(1, 13, 9), bool], Tensor[(117), int32]) */;
  %704 = cast(%var_7158, dtype="float64") /* ty=Tensor[(528), float64] */;
  %705 = cast(%var_7158, dtype="float64") /* ty=Tensor[(528), float64] */;
  %706 = reshape(%704, newshape=[12, 4, 11]) /* ty=Tensor[(12, 4, 11), float64] */;
  %707 = reshape(%705, newshape=[12, 4, 11]) /* ty=Tensor[(12, 4, 11), float64] */;
  %708 = @func_2363(%706, %707) /* ty=(Tensor[(12, 4, 11), float64], Tensor[(10, 4, 5), int64], int64, Tensor[(200), int64]) */;
  %709 = bitwise_xor(%672, %673) /* ty=Tensor[(14, 5, 5), int64] */;
  %710 = %688.16;
  %711 = %691.0;
  %712 = acos(%694) /* ty=Tensor[(90, 2), float64] */;
  %713 = %703.6;
  %714 = %708.1;
  (%709, %710, meta[relay.Constant][54] /* ty=Tensor[(12), float32] */, meta[relay.Constant][55] /* ty=Tensor[(336), float32] */, %var_7134, meta[relay.Constant][56] /* ty=Tensor[(30), int32] */, %var_7136, meta[relay.Constant][57] /* ty=Tensor[(78), int16] */, %711, %var_7140, %712, %713, meta[relay.Constant][58] /* ty=Tensor[(2340), int8] */, %var_7154, meta[relay.Constant][59] /* ty=Tensor[(117), int32] */, %714, %var_7158)
}

def @func_9009() -> Tensor[(11, 5, 4), float64] {
  %715 = @func_8301() /* ty=Tensor[(11, 5, 4), float64] */;
  %716 = cast(%715, dtype="float64") /* ty=Tensor[(11, 5, 4), float64] */;
  log2(%716) /* ty=Tensor[(11, 5, 4), float64] */
}

def @func_8753(%var_8718: Tensor[(14, 16, 1), int8], %var_8719: Tensor[(14, 16, 13), int8], %var_8744: Tensor[(14, 16, 1), int8]) -> (Tensor[(14, 16, 13), int8], Tensor[(14, 16, 13), bool], Tensor[(14, 16, ?), bool]) {
  %717 = cast(%var_8718, dtype="int8") /* ty=Tensor[(14, 16, 1), int8] */;
  %718 = cast(%var_8719, dtype="int8") /* ty=Tensor[(14, 16, 13), int8] */;
  %719 = cast(%var_8719, dtype="bool") /* ty=Tensor[(14, 16, 13), bool] */;
  %720 = cast(%var_8718, dtype="bool") /* ty=Tensor[(14, 16, 1), bool] */;
  %721 = cast(%var_8744, dtype="bool") /* ty=Tensor[(14, 16, 1), bool] */;
  %722 = shape_of(%var_8718, dtype="int32") /* ty=Tensor[(3), int32] */;
  %723 = cast(%var_8718, dtype="bool") /* ty=Tensor[(14, 16, 1), bool] */;
  %724 = dyn.reshape(%721, %722, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %725 = subtract(%717, %718) /* ty=Tensor[(14, 16, 13), int8] */;
  %726 = equal(%719, %720) /* ty=Tensor[(14, 16, 13), bool] */;
  %727 = greater_equal(%723, %724) /* ty=Tensor[(14, 16, ?), bool] */;
  (%725, %726, %727)
}

def @func_2260(%var_2255: Tensor[(6, 10, 4), float32]) -> Tensor[(6, 10, 4), float32] {
  %728 = cast(%var_2255, dtype="float32") /* ty=Tensor[(6, 10, 4), float32] */;
  cos(%728) /* ty=Tensor[(6, 10, 4), float32] */
}

def @func_8951() -> (Tensor[(11, 5, 4), float64],) {
  %729 = @func_7888() /* ty=(Tensor[(11, 5, 4), float64],) */;
  %730 = %729.0;
  (%730,)
}

def @func_8230(%var_8222: Tensor[(4, 280), float32]) -> (Tensor[(5, 16, 14), float32], Tensor[(4, 280), float32], Tensor[(11, 5, 4), float64]) {
  %731 = cast(%var_8222, dtype="float32") /* ty=Tensor[(4, 280), float32] */;
  %732 = reshape(%731, newshape=[5, 16, 14]) /* ty=Tensor[(5, 16, 14), float32] */;
  %733 = @func_7888() /* ty=(Tensor[(11, 5, 4), float64],) */;
  %734 = %733.0;
  %735 = cast(%734, dtype="float64") /* ty=Tensor[(11, 5, 4), float64] */;
  %736 = @func_1076(%732) /* ty=Tensor[(5, 16, 14), float32] */;
  %737 = sin(%735) /* ty=Tensor[(11, 5, 4), float64] */;
  (%736, %var_8222, %737)
}

def @func_4924(%var_4909: float64, %var_4910: Tensor[(1, 13), float64]) -> (Tensor[(1, 13), float64],) {
  %738 = cast(%var_4909, dtype="float64") /* ty=float64 */;
  %739 = cast(%var_4910, dtype="float64") /* ty=Tensor[(1, 13), float64] */;
  %740 = mod(%738, %739) /* ty=Tensor[(1, 13), float64] */;
  (%740,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_9852() -> (Tensor[(11, 5, 4), float64],) {
  @func_9850() /* ty=(Tensor[(11, 5, 4), float64],) */
}

def @func_8243() -> Tensor[(11, 5, 4), float64] {
  %1 = fn () -> Tensor[(11, 5, 4), float64] {
    %0 = @func_7834() /* ty=(Tensor[(11, 5, 4), float64],) */;
    %0.0
  };
  %1() /* ty=Tensor[(11, 5, 4), float64] */
}

def @func_2909(%var_2908: Tensor[(10, 5, 8), bool]) -> (Tensor[(10, 5, 8), bool], Tensor[(10, 5, 8), int16]) {
  %12 = fn (%var_2888: Tensor[(10, 5, 8), bool]) -> (Tensor[(10, 5, 8), bool], Tensor[(10, 5, 8), int16]) {
    %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(10, 5, 8), bool] */, dtype="bool") /* ty=Tensor[(10, 5, 8), bool] */;
    %3 = shape_of(%var_2888, dtype="int32") /* ty=Tensor[(3), int32] */;
    %4 = cast(%var_2888, dtype="bool") /* ty=Tensor[(10, 5, 8), bool] */;
    %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %6 = cast(%var_2888, dtype="int16") /* ty=Tensor[(10, 5, 8), int16] */;
    %7 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(10, 5, 8), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %8 = cast(meta[relay.Constant][0] /* ty=Tensor[(10, 5, 8), bool] */, dtype="int16") /* ty=Tensor[(10, 5, 8), int16] */;
    %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %10 = logical_or(%4, %5) /* ty=Tensor[(10, 5, 8), bool] */;
    %11 = right_shift(%8, %9) /* ty=Tensor[(10, 5, 8), int16] */;
    (%10, %11)
  };
  %12(%var_2908) /* ty=(Tensor[(10, 5, 8), bool], Tensor[(10, 5, 8), int16]) */
}

def @func_8836() -> Tensor[(11, 5, 4), float64] {
  %14 = fn () -> Tensor[(11, 5, 4), float64] {
    %13 = @func_8773() /* ty=(Tensor[(11, 5, 4), float64],) */;
    %13.0
  };
  %14() /* ty=Tensor[(11, 5, 4), float64] */
}

def @func_9123() -> (Tensor[(11, 5, 4), float64], Tensor[(12, 9, 8), int8], Tensor[(864), float32]) {
  @func_9121() /* ty=(Tensor[(11, 5, 4), float64], Tensor[(12, 9, 8), int8], Tensor[(864), float32]) */
}

def @func_2263(%var_2261: Tensor[(6, 10, 4), float32]) -> Tensor[(6, 10, 4), float32] {
  @func_2260(%var_2261) /* ty=Tensor[(6, 10, 4), float32] */
}

def @func_1779(%var_1776: int64, %var_1777: Tensor[(13, 16, 10), int64], %var_1778: Tensor[(702), float64]) -> (Tensor[(6, 9, 13), float64], Tensor[(702), float64], Tensor[(13, 16, 10), bool]) {
  @func_1774(%var_1776, %var_1777, %var_1778) /* ty=(Tensor[(6, 9, 13), float64], Tensor[(702), float64], Tensor[(13, 16, 10), bool]) */
}

def @func_5733(%var_5730: Tensor[(10, 1, 3), int32], %var_5731: Tensor[(10, 13, 3), int32], %var_5732: Tensor[(10, 13, 3), int32]) -> (Tensor[(10, 13, 3), int8], Tensor[(10, 1, 3), float64]) {
  @func_5728(%var_5730, %var_5731, %var_5732) /* ty=(Tensor[(10, 13, 3), int8], Tensor[(10, 1, 3), float64]) */
}

def @func_7932(%var_7930: Tensor[(16, 12, 11), float64], %var_7931: Tensor[(180), float32]) -> (Tensor[(16, 12, 11), float32], Tensor[(10, 4, 5), int64], Tensor[(180), float32], Tensor[(8, 42), float32], int64, Tensor[(200), int64], Tensor[(16, 12, 11), float32]) {
  @func_7928(%var_7930, %var_7931) /* ty=(Tensor[(16, 12, 11), float32], Tensor[(10, 4, 5), int64], Tensor[(180), float32], Tensor[(8, 42), float32], int64, Tensor[(200), int64], Tensor[(16, 12, 11), float32]) */
}

def @func_8758(%var_8755: Tensor[(14, 16, 1), int8], %var_8756: Tensor[(14, 16, 13), int8], %var_8757: Tensor[(14, 16, 1), int8]) -> (Tensor[(14, 16, 13), int8], Tensor[(14, 16, 13), bool], Tensor[(14, 16, ?), bool]) {
  @func_8753(%var_8755, %var_8756, %var_8757) /* ty=(Tensor[(14, 16, 13), int8], Tensor[(14, 16, 13), bool], Tensor[(14, 16, ?), bool]) */
}

def @func_9487(%var_9485: Tensor[(10, 2, 2), float64]) -> (Tensor[(10, 2, 2), float64],) {
  @func_9484(%var_9485) /* ty=(Tensor[(10, 2, 2), float64],) */
}

def @func_8352() -> (Tensor[(11, 5, 4), float64], Tensor[(78), int16], Tensor[(14, 13, 6), int16]) {
  %15 = cast(meta[relay.Constant][1] /* ty=Tensor[(78), int16] */, dtype="int16") /* ty=Tensor[(78), int16] */;
  %16 = cast(meta[relay.Constant][2] /* ty=Tensor[(182, 6), int16] */, dtype="int16") /* ty=Tensor[(182, 6), int16] */;
  %17 = reshape(%15, newshape=[1, 13, 6]) /* ty=Tensor[(1, 13, 6), int16] */;
  %18 = reshape(%16, newshape=[14, 13, 6]) /* ty=Tensor[(14, 13, 6), int16] */;
  %19 = @func_1276(%17, %18) /* ty=Tensor[(14, 13, 6), int16] */;
  %20 = cast(meta[relay.Constant][2] /* ty=Tensor[(182, 6), int16] */, dtype="int16") /* ty=Tensor[(182, 6), int16] */;
  %21 = shape_of(%19, dtype="int32") /* ty=Tensor[(3), int32] */;
  %22 = cast(%19, dtype="int16") /* ty=Tensor[(14, 13, 6), int16] */;
  %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %24 = @func_8071() /* ty=Tensor[(11, 5, 4), float64] */;
  %25 = bitwise_and(%22, %23) /* ty=Tensor[(14, 13, 6), int16] */;
  (%24, meta[relay.Constant][1] /* ty=Tensor[(78), int16] */, %25)
}

def @func_4657(%var_4653: Tensor[(15, 13, 12), int8], %var_4654: Tensor[(15, 13, 12), int8], %var_4655: Tensor[(1092), int16], %var_4656: Tensor[(117), int32]) -> (Tensor[(15, 13, 12), int8], int32, Tensor[(504), bool], Tensor[(14, 13, 6), int16], Tensor[(78), int16], Tensor[(1092), int16], Tensor[(1, 13, 9), bool], Tensor[(117), int32]) {
  %48 = fn (%var_4603: Tensor[(15, 13, 12), int8], %var_4604: Tensor[(15, 13, 12), int8], %var_4633: Tensor[(1092), int16], %var_4637: Tensor[(117), int32]) -> (Tensor[(15, 13, 12), int8], int32, Tensor[(504), bool], Tensor[(14, 13, 6), int16], Tensor[(78), int16], Tensor[(1092), int16], Tensor[(1, 13, 9), bool], Tensor[(117), int32]) {
    %26 = cast(%var_4604, dtype="int8") /* ty=Tensor[(15, 13, 12), int8] */;
    %27 = shape_of(%var_4603, dtype="int32") /* ty=Tensor[(3), int32] */;
    %28 = cast(%var_4603, dtype="int8") /* ty=Tensor[(15, 13, 12), int8] */;
    %29 = dyn.reshape(%26, %27, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %30 = cast(meta[relay.Constant][3] /* ty=Tensor[(504), bool] */, dtype="bool") /* ty=Tensor[(504), bool] */;
    %31 = cast(meta[relay.Constant][3] /* ty=Tensor[(504), bool] */, dtype="bool") /* ty=Tensor[(504), bool] */;
    %32 = reshape(%30, newshape=[14, 3, 12]) /* ty=Tensor[(14, 3, 12), bool] */;
    %33 = reshape(%31, newshape=[14, 3, 12]) /* ty=Tensor[(14, 3, 12), bool] */;
    %34 = @func_4461(%32, %33) /* ty=(Tensor[(14, 3, 12), bool], int32, Tensor[(144), bool], int32, Tensor[(13, 9), int32]) */;
    %35 = cast(meta[relay.Constant][4] /* ty=Tensor[(78), int16] */, dtype="int16") /* ty=Tensor[(78), int16] */;
    %36 = cast(%var_4633, dtype="int16") /* ty=Tensor[(1092), int16] */;
    %37 = reshape(%35, newshape=[1, 13, 6]) /* ty=Tensor[(1, 13, 6), int16] */;
    %38 = reshape(%36, newshape=[14, 13, 6]) /* ty=Tensor[(14, 13, 6), int16] */;
    %39 = %34.1;
    %40 = cast(%39, dtype="int32") /* ty=int32 */;
    %41 = cast(%var_4637, dtype="int32") /* ty=Tensor[(117), int32] */;
    %42 = reshape(%40, newshape=[]) /* ty=int32 */;
    %43 = reshape(%41, newshape=[1, 13, 9]) /* ty=Tensor[(1, 13, 9), int32] */;
    %44 = @func_1419(%42, %43) /* ty=(Tensor[(1, 13, 9), bool],) */;
    %45 = maximum(%28, %29) /* ty=Tensor[(15, 13, 12), int8] */;
    %46 = @func_1276(%37, %38) /* ty=Tensor[(14, 13, 6), int16] */;
    %47 = %44.0;
    (%45, %39, meta[relay.Constant][3] /* ty=Tensor[(504), bool] */, %46, meta[relay.Constant][4] /* ty=Tensor[(78), int16] */, %var_4633, %47, %var_4637)
  };
  %48(%var_4653, %var_4654, %var_4655, %var_4656) /* ty=(Tensor[(15, 13, 12), int8], int32, Tensor[(504), bool], Tensor[(14, 13, 6), int16], Tensor[(78), int16], Tensor[(1092), int16], Tensor[(1, 13, 9), bool], Tensor[(117), int32]) */
}

def @func_9193() -> (Tensor[(11, 5, 4), float64],) {
  %51 = fn () -> (Tensor[(11, 5, 4), float64],) {
    %49 = @func_7647() /* ty=(Tensor[(11, 5, 4), float64],) */;
    %50 = %49.0;
    (%50,)
  };
  %51() /* ty=(Tensor[(11, 5, 4), float64],) */
}

def @func_1531(%var_1529: int64, %var_1530: Tensor[(10, 4, 5), int64]) -> (Tensor[(10, 4, 5), int64],) {
  %55 = fn (%var_1501: int64, %var_1502: Tensor[(10, 4, 5), int64]) -> (Tensor[(10, 4, 5), int64],) {
    %52 = cast(%var_1501, dtype="int64") /* ty=int64 */;
    %53 = cast(%var_1502, dtype="int64") /* ty=Tensor[(10, 4, 5), int64] */;
    %54 = right_shift(%52, %53) /* ty=Tensor[(10, 4, 5), int64] */;
    (%54,)
  };
  %55(%var_1529, %var_1530) /* ty=(Tensor[(10, 4, 5), int64],) */
}

def @func_4388(%var_4383: float64) -> Tensor[(10, 6, 1), float64] {
  %56 = cast(%var_4383, dtype="float64") /* ty=float64 */;
  %57 = cast(meta[relay.Constant][5] /* ty=Tensor[(10, 6, 1), float64] */, dtype="float64") /* ty=Tensor[(10, 6, 1), float64] */;
  divide(%56, %57) /* ty=Tensor[(10, 6, 1), float64] */
}

def @func_6878(%var_6852: Tensor[(5, 42), float64]) -> (Tensor[(6, 10, 4), float32], Tensor[(240), float32], Tensor[(9, 11, 2), bool], Tensor[(7, 10, 3), bool], Tensor[(5, 42), bool]) {
  %58 = cast(meta[relay.Constant][6] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %59 = reshape(%58, newshape=[6, 10, 4]) /* ty=Tensor[(6, 10, 4), float32] */;
  %60 = cast(meta[relay.Constant][7] /* ty=Tensor[(9, 11, 2), float32] */, dtype="float32") /* ty=Tensor[(9, 11, 2), float32] */;
  %61 = cosh(%60) /* ty=Tensor[(9, 11, 2), float32] */;
  %62 = cast(meta[relay.Constant][7] /* ty=Tensor[(9, 11, 2), float32] */, dtype="int16") /* ty=Tensor[(9, 11, 2), int16] */;
  %63 = shape_of(%61, dtype="int32") /* ty=Tensor[(3), int32] */;
  %64 = cast(%61, dtype="int16") /* ty=Tensor[(9, 11, 2), int16] */;
  %65 = dyn.reshape(%62, %63, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %66 = bitwise_or(%64, %65) /* ty=Tensor[(9, 11, 2), int16] */;
  %67 = cast(%66, dtype="bool") /* ty=Tensor[(9, 11, 2), bool] */;
  %68 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(9, 11, 2), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %69 = cast(meta[relay.Constant][7] /* ty=Tensor[(9, 11, 2), float32] */, dtype="bool") /* ty=Tensor[(9, 11, 2), bool] */;
  %70 = dyn.reshape(%67, %68, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %71 = cast(meta[relay.Constant][8] /* ty=Tensor[(5, 42), float64] */, dtype="float64") /* ty=Tensor[(5, 42), float64] */;
  %72 = reshape(%71, newshape=[7, 10, 3]) /* ty=Tensor[(7, 10, 3), float64] */;
  %73 = @func_3420(%72) /* ty=(Tensor[(7, 10, 3), bool],) */;
  %74 = cast(%var_6852, dtype="bool") /* ty=Tensor[(5, 42), bool] */;
  %75 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(5, 42), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %76 = cast(meta[relay.Constant][8] /* ty=Tensor[(5, 42), float64] */, dtype="bool") /* ty=Tensor[(5, 42), bool] */;
  %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %78 = @func_2260(%59) /* ty=Tensor[(6, 10, 4), float32] */;
  %79 = equal(%69, %70) /* ty=Tensor[(9, 11, 2), bool] */;
  %80 = %73.0;
  %81 = logical_or(%76, %77) /* ty=Tensor[(5, 42), bool] */;
  (%78, meta[relay.Constant][6] /* ty=Tensor[(240), float32] */, %79, %80, %81)
}

def @func_6881(%var_6879: Tensor[(5, 42), float64]) -> (Tensor[(6, 10, 4), float32], Tensor[(240), float32], Tensor[(9, 11, 2), bool], Tensor[(7, 10, 3), bool], Tensor[(5, 42), bool]) {
  @func_6878(%var_6879) /* ty=(Tensor[(6, 10, 4), float32], Tensor[(240), float32], Tensor[(9, 11, 2), bool], Tensor[(7, 10, 3), bool], Tensor[(5, 42), bool]) */
}

def @func_8071() -> Tensor[(11, 5, 4), float64] {
  %82 = @func_7888() /* ty=(Tensor[(11, 5, 4), float64],) */;
  %82.0
}

def @func_9326(%var_9324: Tensor[(11, 5, 4), float64], %var_9325: Tensor[(528), float64]) -> (Tensor[(11, 5, 4), uint32], Tensor[(200), int64], Tensor[(528), float64], Tensor[(11, 5, 4), float32], Tensor[(11, 5, 4), float64], Tensor[(1120), float32], Tensor[(7, 10, 3), bool], Tensor[(210), float64]) {
  %107 = fn (%var_9260: Tensor[(11, 5, 4), float64], %var_9295: Tensor[(528), float64]) -> (Tensor[(11, 5, 4), uint32], Tensor[(200), int64], Tensor[(528), float64], Tensor[(11, 5, 4), float32], Tensor[(11, 5, 4), float64], Tensor[(1120), float32], Tensor[(7, 10, 3), bool], Tensor[(210), float64]) {
    %83 = @func_9149() /* ty=Tensor[(11, 5, 4), float64] */;
    %84 = cast(%var_9260, dtype="uint32") /* ty=Tensor[(11, 5, 4), uint32] */;
    %85 = shape_of(%83, dtype="int32") /* ty=Tensor[(3), int32] */;
    %86 = cast(%83, dtype="uint32") /* ty=Tensor[(11, 5, 4), uint32] */;
    %87 = dyn.reshape(%84, %85, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %88 = cast(%var_9295, dtype="float64") /* ty=Tensor[(528), float64] */;
    %89 = cast(%var_9295, dtype="float64") /* ty=Tensor[(528), float64] */;
    %90 = reshape(%88, newshape=[12, 4, 11]) /* ty=Tensor[(12, 4, 11), float64] */;
    %91 = reshape(%89, newshape=[12, 4, 11]) /* ty=Tensor[(12, 4, 11), float64] */;
    %92 = @func_2363(%90, %91) /* ty=(Tensor[(12, 4, 11), float64], Tensor[(10, 4, 5), int64], int64, Tensor[(200), int64]) */;
    %93 = cast(%83, dtype="float64") /* ty=Tensor[(11, 5, 4), float64] */;
    %94 = log(%93) /* ty=Tensor[(11, 5, 4), float64] */;
    %95 = cast(%94, dtype="float32") /* ty=Tensor[(11, 5, 4), float32] */;
    %96 = cast(meta[relay.Constant][9] /* ty=Tensor[(1120), float32] */, dtype="float32") /* ty=Tensor[(1120), float32] */;
    %97 = reshape(%96, newshape=[4, 280]) /* ty=Tensor[(4, 280), float32] */;
    %98 = @func_8230(%97) /* ty=(Tensor[(5, 16, 14), float32], Tensor[(4, 280), float32], Tensor[(11, 5, 4), float64]) */;
    %99 = cast(meta[relay.Constant][10] /* ty=Tensor[(210), float64] */, dtype="float64") /* ty=Tensor[(210), float64] */;
    %100 = reshape(%99, newshape=[7, 10, 3]) /* ty=Tensor[(7, 10, 3), float64] */;
    %101 = @func_3420(%100) /* ty=(Tensor[(7, 10, 3), bool],) */;
    %102 = logical_xor(%86, %87) /* ty=Tensor[(11, 5, 4), uint32] */;
    %103 = %92.3;
    %104 = asinh(%95) /* ty=Tensor[(11, 5, 4), float32] */;
    %105 = %98.2;
    %106 = %101.0;
    (%102, %103, %var_9295, %104, %105, meta[relay.Constant][9] /* ty=Tensor[(1120), float32] */, %106, meta[relay.Constant][10] /* ty=Tensor[(210), float64] */)
  };
  %107(%var_9324, %var_9325) /* ty=(Tensor[(11, 5, 4), uint32], Tensor[(200), int64], Tensor[(528), float64], Tensor[(11, 5, 4), float32], Tensor[(11, 5, 4), float64], Tensor[(1120), float32], Tensor[(7, 10, 3), bool], Tensor[(210), float64]) */
}

def @func_9752() -> Tensor[(11, 5, 4), float64] {
  %109 = fn () -> Tensor[(11, 5, 4), float64] {
    %108 = @func_8419() /* ty=(Tensor[(11, 5, 4), float64],) */;
    %108.0
  };
  %109() /* ty=Tensor[(11, 5, 4), float64] */
}

def @func_3420(%var_3398: Tensor[(7, 10, 3), float64]) -> (Tensor[(7, 10, 3), bool],) {
  %110 = cast(%var_3398, dtype="float64") /* ty=Tensor[(7, 10, 3), float64] */;
  %111 = atanh(%110) /* ty=Tensor[(7, 10, 3), float64] */;
  %112 = cast(%var_3398, dtype="bool") /* ty=Tensor[(7, 10, 3), bool] */;
  %113 = shape_of(%111, dtype="int32") /* ty=Tensor[(3), int32] */;
  %114 = cast(%111, dtype="bool") /* ty=Tensor[(7, 10, 3), bool] */;
  %115 = dyn.reshape(%112, %113, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %116 = equal(%114, %115) /* ty=Tensor[(7, 10, 3), bool] */;
  (%116,)
}

def @func_8073() -> Tensor[(11, 5, 4), float64] {
  @func_8071() /* ty=Tensor[(11, 5, 4), float64] */
}

def @func_7180(%var_7172: Tensor[(14, 5, 5), int64], %var_7173: Tensor[(14, 5, 5), int64], %var_7174: Tensor[(90, 2), float32], %var_7175: int64, %var_7176: Tensor[(390), int32], %var_7177: Tensor[(702), float64], %var_7178: Tensor[(1092), int16], %var_7179: Tensor[(528), float64]) -> (Tensor[(14, 5, 5), int64], Tensor[(?, ?, 12), bool], Tensor[(12), float32], Tensor[(336), float32], int64, Tensor[(30), int32], Tensor[(390), int32], Tensor[(78), int16], Tensor[(6, 9, 13), float64], Tensor[(702), float64], Tensor[(90, 2), float64], Tensor[(1, 13, 9), bool], Tensor[(2340), int8], Tensor[(1092), int16], Tensor[(117), int32], Tensor[(10, 4, 5), int64], Tensor[(528), float64]) {
  %162 = fn (%var_7123: Tensor[(14, 5, 5), int64], %var_7124: Tensor[(14, 5, 5), int64], %var_7133: Tensor[(90, 2), float32], %var_7134: int64, %var_7136: Tensor[(390), int32], %var_7140: Tensor[(702), float64], %var_7154: Tensor[(1092), int16], %var_7158: Tensor[(528), float64]) -> (Tensor[(14, 5, 5), int64], Tensor[(?, ?, 12), bool], Tensor[(12), float32], Tensor[(336), float32], int64, Tensor[(30), int32], Tensor[(390), int32], Tensor[(78), int16], Tensor[(6, 9, 13), float64], Tensor[(702), float64], Tensor[(90, 2), float64], Tensor[(1, 13, 9), bool], Tensor[(2340), int8], Tensor[(1092), int16], Tensor[(117), int32], Tensor[(10, 4, 5), int64], Tensor[(528), float64]) {
    %117 = cast(%var_7124, dtype="int64") /* ty=Tensor[(14, 5, 5), int64] */;
    %118 = shape_of(%var_7123, dtype="int32") /* ty=Tensor[(3), int32] */;
    %119 = cast(%var_7123, dtype="int64") /* ty=Tensor[(14, 5, 5), int64] */;
    %120 = dyn.reshape(%117, %118, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %121 = cast(meta[relay.Constant][11] /* ty=Tensor[(12), float32] */, dtype="float32") /* ty=Tensor[(12), float32] */;
    %122 = cast(meta[relay.Constant][12] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
    %123 = cast(%var_7133, dtype="float32") /* ty=Tensor[(90, 2), float32] */;
    %124 = cast(%var_7134, dtype="int64") /* ty=int64 */;
    %125 = cast(meta[relay.Constant][13] /* ty=Tensor[(30), int32] */, dtype="int32") /* ty=Tensor[(30), int32] */;
    %126 = cast(%var_7136, dtype="int32") /* ty=Tensor[(390), int32] */;
    %127 = cast(meta[relay.Constant][14] /* ty=Tensor[(78), int16] */, dtype="int16") /* ty=Tensor[(78), int16] */;
    %128 = reshape(%121, newshape=[1, 1, 12]) /* ty=Tensor[(1, 1, 12), float32] */;
    %129 = reshape(%122, newshape=[336]) /* ty=Tensor[(336), float32] */;
    %130 = reshape(%123, newshape=[180]) /* ty=Tensor[(180), float32] */;
    %131 = reshape(%124, newshape=[]) /* ty=int64 */;
    %132 = reshape(%125, newshape=[30]) /* ty=Tensor[(30), int32] */;
    %133 = reshape(%126, newshape=[390]) /* ty=Tensor[(390), int32] */;
    %134 = reshape(%127, newshape=[78]) /* ty=Tensor[(78), int16] */;
    %135 = @func_6606(%128, %129, %130, %131, %132, %133, %134) /* ty=(Tensor[(12, 7, 4), float32], Tensor[(336), float32], int64, Tensor[(180), float32], int64, Tensor[(200), int64], Tensor[(10, 13, 3), int8], Tensor[(30), int32], Tensor[(390), int32], Tensor[(12, 7, 4), float32], Tensor[(6, 9, 13), float64], Tensor[(36, 24), float32], Tensor[(14, 13, 6), int16], Tensor[(78), int16], Tensor[(1092), int16], Tensor[(13, 15, 12), int8], Tensor[(?, ?, 12), bool], Tensor[(13, 15, 12), bool]) */;
    %136 = cast(%var_7140, dtype="float64") /* ty=Tensor[(702), float64] */;
    %137 = reshape(%136, newshape=[6, 9, 13]) /* ty=Tensor[(6, 9, 13), float64] */;
    %138 = @func_115(%137) /* ty=(Tensor[(6, 9, 13), float64], Tensor[(6, 9, 13), float64]) */;
    %139 = cast(%var_7133, dtype="float32") /* ty=Tensor[(90, 2), float32] */;
    %140 = sinh(%139) /* ty=Tensor[(90, 2), float32] */;
    %141 = cast(%140, dtype="float64") /* ty=Tensor[(90, 2), float64] */;
    %142 = cast(meta[relay.Constant][15] /* ty=Tensor[(2340), int8] */, dtype="int8") /* ty=Tensor[(2340), int8] */;
    %143 = cast(meta[relay.Constant][15] /* ty=Tensor[(2340), int8] */, dtype="int8") /* ty=Tensor[(2340), int8] */;
    %144 = cast(%var_7154, dtype="int16") /* ty=Tensor[(1092), int16] */;
    %145 = cast(meta[relay.Constant][16] /* ty=Tensor[(117), int32] */, dtype="int32") /* ty=Tensor[(117), int32] */;
    %146 = reshape(%142, newshape=[15, 13, 12]) /* ty=Tensor[(15, 13, 12), int8] */;
    %147 = reshape(%143, newshape=[15, 13, 12]) /* ty=Tensor[(15, 13, 12), int8] */;
    %148 = reshape(%144, newshape=[1092]) /* ty=Tensor[(1092), int16] */;
    %149 = reshape(%145, newshape=[117]) /* ty=Tensor[(117), int32] */;
    %150 = @func_4652(%146, %147, %148, %149) /* ty=(Tensor[(15, 13, 12), int8], int32, Tensor[(504), bool], Tensor[(14, 13, 6), int16], Tensor[(78), int16], Tensor[(1092), int16], Tensor[(1, 13, 9), bool], Tensor[(117), int32]) */;
    %151 = cast(%var_7158, dtype="float64") /* ty=Tensor[(528), float64] */;
    %152 = cast(%var_7158, dtype="float64") /* ty=Tensor[(528), float64] */;
    %153 = reshape(%151, newshape=[12, 4, 11]) /* ty=Tensor[(12, 4, 11), float64] */;
    %154 = reshape(%152, newshape=[12, 4, 11]) /* ty=Tensor[(12, 4, 11), float64] */;
    %155 = @func_2363(%153, %154) /* ty=(Tensor[(12, 4, 11), float64], Tensor[(10, 4, 5), int64], int64, Tensor[(200), int64]) */;
    %156 = bitwise_xor(%119, %120) /* ty=Tensor[(14, 5, 5), int64] */;
    %157 = %135.16;
    %158 = %138.0;
    %159 = acos(%141) /* ty=Tensor[(90, 2), float64] */;
    %160 = %150.6;
    %161 = %155.1;
    (%156, %157, meta[relay.Constant][11] /* ty=Tensor[(12), float32] */, meta[relay.Constant][12] /* ty=Tensor[(336), float32] */, %var_7134, meta[relay.Constant][13] /* ty=Tensor[(30), int32] */, %var_7136, meta[relay.Constant][14] /* ty=Tensor[(78), int16] */, %158, %var_7140, %159, %160, meta[relay.Constant][15] /* ty=Tensor[(2340), int8] */, %var_7154, meta[relay.Constant][16] /* ty=Tensor[(117), int32] */, %161, %var_7158)
  };
  %162(%var_7172, %var_7173, %var_7174, %var_7175, %var_7176, %var_7177, %var_7178, %var_7179) /* ty=(Tensor[(14, 5, 5), int64], Tensor[(?, ?, 12), bool], Tensor[(12), float32], Tensor[(336), float32], int64, Tensor[(30), int32], Tensor[(390), int32], Tensor[(78), int16], Tensor[(6, 9, 13), float64], Tensor[(702), float64], Tensor[(90, 2), float64], Tensor[(1, 13, 9), bool], Tensor[(2340), int8], Tensor[(1092), int16], Tensor[(117), int32], Tensor[(10, 4, 5), int64], Tensor[(528), float64]) */
}

def @func_10415() -> Tensor[(11, 5, 4), float64] {
  @func_10413() /* ty=Tensor[(11, 5, 4), float64] */
}

def @main() -> (Tensor[(14, 8, 8), float64],) {
  %163 = cast(meta[relay.Constant][17] /* ty=Tensor[(14, 8, 8), float64] */, dtype="float64") /* ty=Tensor[(14, 8, 8), float64] */;
  %164 = erf(%163) /* ty=Tensor[(14, 8, 8), float64] */;
  (%164,)
}

def @func_4243(%var_4164: Tensor[(9, 5, 4), float32], %var_4180: Tensor[(336), float32], %var_4221: int64, %var_4222: Tensor[(200), int64]) -> (Tensor[(12, 7, 4), float32], Tensor[(336), float32], Tensor[(10, 4, 5), int64], int64, Tensor[(200), int64], Tensor[(7, 14, 10), float64], Tensor[(980), float64], Tensor[(9, 5, 4), float32]) {
  %165 = cast(%var_4180, dtype="float32") /* ty=Tensor[(336), float32] */;
  %166 = reshape(%165, newshape=[12, 7, 4]) /* ty=Tensor[(12, 7, 4), float32] */;
  %167 = cast(%var_4221, dtype="int64") /* ty=int64 */;
  %168 = cast(%var_4222, dtype="int64") /* ty=Tensor[(200), int64] */;
  %169 = reshape(%167, newshape=[]) /* ty=int64 */;
  %170 = reshape(%168, newshape=[10, 4, 5]) /* ty=Tensor[(10, 4, 5), int64] */;
  %171 = @func_1528(%169, %170) /* ty=(Tensor[(10, 4, 5), int64],) */;
  %172 = cast(meta[relay.Constant][18] /* ty=Tensor[(980), float64] */, dtype="float64") /* ty=Tensor[(980), float64] */;
  %173 = reshape(%172, newshape=[7, 14, 10]) /* ty=Tensor[(7, 14, 10), float64] */;
  %174 = @func_2104(%173) /* ty=(Tensor[(7, 14, 10), float64],) */;
  %175 = cast(%var_4164, dtype="float32") /* ty=Tensor[(9, 5, 4), float32] */;
  %176 = sin(%175) /* ty=Tensor[(9, 5, 4), float32] */;
  %177 = cast(%176, dtype="float32") /* ty=Tensor[(9, 5, 4), float32] */;
  %178 = sqrt(%177) /* ty=Tensor[(9, 5, 4), float32] */;
  %179 = cast(%178, dtype="float32") /* ty=Tensor[(9, 5, 4), float32] */;
  %180 = @func_3792(%166) /* ty=Tensor[(12, 7, 4), float32] */;
  %181 = %171.0;
  %182 = %174.0;
  %183 = acosh(%179) /* ty=Tensor[(9, 5, 4), float32] */;
  (%180, %var_4180, %181, %var_4221, %var_4222, %182, meta[relay.Constant][18] /* ty=Tensor[(980), float64] */, %183)
}

def @func_4461(%var_4445: Tensor[(14, 3, 12), bool], %var_4446: Tensor[(14, 3, 12), bool]) -> (Tensor[(14, 3, 12), bool], int32, Tensor[(144), bool], int32, Tensor[(13, 9), int32]) {
  %184 = cast(%var_4446, dtype="bool") /* ty=Tensor[(14, 3, 12), bool] */;
  %185 = shape_of(%var_4445, dtype="int32") /* ty=Tensor[(3), int32] */;
  %186 = cast(%var_4445, dtype="bool") /* ty=Tensor[(14, 3, 12), bool] */;
  %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %188 = cast(meta[relay.Constant][19] /* ty=Tensor[(144), bool] */, dtype="bool") /* ty=Tensor[(144), bool] */;
  %189 = cast(meta[relay.Constant][19] /* ty=Tensor[(144), bool] */, dtype="bool") /* ty=Tensor[(144), bool] */;
  %190 = cast(-5 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %191 = cast(meta[relay.Constant][20] /* ty=Tensor[(13, 9), int32] */, dtype="int32") /* ty=Tensor[(13, 9), int32] */;
  %192 = reshape(%188, newshape=[4, 12, 3]) /* ty=Tensor[(4, 12, 3), bool] */;
  %193 = reshape(%189, newshape=[4, 12, 3]) /* ty=Tensor[(4, 12, 3), bool] */;
  %194 = reshape(%190, newshape=[]) /* ty=int32 */;
  %195 = reshape(%191, newshape=[117]) /* ty=Tensor[(117), int32] */;
  %196 = @func_1891(%192, %193, %194, %195) /* ty=(Tensor[(4, 12, 3), bool], Tensor[(1, 13, 9), bool], int32, Tensor[(117), int32]) */;
  %197 = logical_or(%186, %187) /* ty=Tensor[(14, 3, 12), bool] */;
  %198 = %196.2;
  (%197, %198, meta[relay.Constant][19] /* ty=Tensor[(144), bool] */, -5 /* ty=int32 */, meta[relay.Constant][20] /* ty=Tensor[(13, 9), int32] */)
}

def @func_3969(%var_3967: Tensor[(6, 2, 7), float32]) -> (Tensor[(6, 2, 7), float32], Tensor[(7, 10, 3), bool], Tensor[(210), float64]) {
  @func_3966(%var_3967) /* ty=(Tensor[(6, 2, 7), float32], Tensor[(7, 10, 3), bool], Tensor[(210), float64]) */
}

def @func_9514() -> (Tensor[(11, 5, 4), float64], Tensor[(11, 5, 4), float64]) {
  @func_9512() /* ty=(Tensor[(11, 5, 4), float64], Tensor[(11, 5, 4), float64]) */
}

def @func_9960(%var_9957: Tensor[(2, 3, 6), int16], %var_9958: Tensor[(2, 3, 6), int16], %var_9959: Tensor[(1, 220), float64]) -> (Tensor[(2, 3, 6), bool], Tensor[(11, 5, 4), bool], Tensor[(1, 220), float64]) {
  %208 = fn (%var_9939: Tensor[(2, 3, 6), int16], %var_9940: Tensor[(2, 3, 6), int16], %var_9947: Tensor[(1, 220), float64]) -> (Tensor[(2, 3, 6), bool], Tensor[(11, 5, 4), bool], Tensor[(1, 220), float64]) {
    %199 = cast(%var_9940, dtype="bool") /* ty=Tensor[(2, 3, 6), bool] */;
    %200 = shape_of(%var_9939, dtype="int32") /* ty=Tensor[(3), int32] */;
    %201 = cast(%var_9939, dtype="bool") /* ty=Tensor[(2, 3, 6), bool] */;
    %202 = dyn.reshape(%199, %200, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %203 = cast(%var_9947, dtype="float64") /* ty=Tensor[(1, 220), float64] */;
    %204 = reshape(%203, newshape=[11, 5, 4]) /* ty=Tensor[(11, 5, 4), float64] */;
    %205 = @func_9230(%204) /* ty=(Tensor[(?, 16, 9), bool], Tensor[(13, 144), float64], Tensor[(11, 5, 4), bool]) */;
    %206 = less(%201, %202) /* ty=Tensor[(2, 3, 6), bool] */;
    %207 = %205.2;
    (%206, %207, %var_9947)
  };
  %208(%var_9957, %var_9958, %var_9959) /* ty=(Tensor[(2, 3, 6), bool], Tensor[(11, 5, 4), bool], Tensor[(1, 220), float64]) */
}

def @func_7675(%var_7666: Tensor[(14, 4, 11), float32]) -> Tensor[(14, 4, 11), float64] {
  %209 = cast(%var_7666, dtype="float32") /* ty=Tensor[(14, 4, 11), float32] */;
  %210 = asin(%209) /* ty=Tensor[(14, 4, 11), float32] */;
  %211 = cast(%210, dtype="float64") /* ty=Tensor[(14, 4, 11), float64] */;
  rsqrt(%211) /* ty=Tensor[(14, 4, 11), float64] */
}

def @func_1422(%var_1420: int32, %var_1421: Tensor[(1, 13, 9), int32]) -> (Tensor[(1, 13, 9), bool],) {
  %218 = fn (%var_1409: int32, %var_1410: Tensor[(1, 13, 9), int32]) -> (Tensor[(1, 13, 9), bool],) {
    %212 = cast(%var_1409, dtype="int32") /* ty=int32 */;
    %213 = cast(%var_1410, dtype="int32") /* ty=Tensor[(1, 13, 9), int32] */;
    %214 = subtract(%212, %213) /* ty=Tensor[(1, 13, 9), int32] */;
    %215 = cast(%214, dtype="bool") /* ty=Tensor[(1, 13, 9), bool] */;
    %216 = cast(%var_1409, dtype="bool") /* ty=bool */;
    %217 = less_equal(%215, %216) /* ty=Tensor[(1, 13, 9), bool] */;
    (%217,)
  };
  %218(%var_1420, %var_1421) /* ty=(Tensor[(1, 13, 9), bool],) */
}

def @func_7835() -> (Tensor[(11, 5, 4), float64],) {
  %221 = fn () -> (Tensor[(11, 5, 4), float64],) {
    %219 = @func_7647() /* ty=(Tensor[(11, 5, 4), float64],) */;
    %220 = %219.0;
    (%220,)
  };
  %221() /* ty=(Tensor[(11, 5, 4), float64],) */
}

def @func_1939(%var_1937: Tensor[(5, 13, 6), float32], %var_1938: Tensor[(5, 13, 6), float32]) -> (Tensor[(5, 13, 6), bool],) {
  @func_1935(%var_1937, %var_1938) /* ty=(Tensor[(5, 13, 6), bool],) */
}

def @func_8279() -> (Tensor[(11, 5, 4), float64],) {
  %222 = @func_8174() /* ty=Tensor[(11, 5, 4), float64] */;
  (%222,)
}

def @func_10442() -> Tensor[(11, 5, 4), float64] {
  %223 = @func_9677() /* ty=(Tensor[(11, 5, 4), float64], Tensor[(11, 5, 4), float64]) */;
  %223.0
}

def @func_10395() -> (Tensor[(11, 5, 4), float64],) {
  %226 = fn () -> (Tensor[(11, 5, 4), float64],) {
    %224 = @func_8773() /* ty=(Tensor[(11, 5, 4), float64],) */;
    %225 = %224.0;
    (%225,)
  };
  %226() /* ty=(Tensor[(11, 5, 4), float64],) */
}

def @func_1078(%var_1077: Tensor[(5, 16, 14), float32]) -> Tensor[(5, 16, 14), float32] {
  %228 = fn (%var_1072: Tensor[(5, 16, 14), float32]) -> Tensor[(5, 16, 14), float32] {
    %227 = cast(%var_1072, dtype="float32") /* ty=Tensor[(5, 16, 14), float32] */;
    sqrt(%227) /* ty=Tensor[(5, 16, 14), float32] */
  };
  %228(%var_1077) /* ty=Tensor[(5, 16, 14), float32] */
}

def @func_10265(%var_10263: int32, %var_10264: Tensor[(117), int32]) -> (Tensor[(7, 10, 3), bool], Tensor[(1, 13, 9), bool], int32, Tensor[(117), int32]) {
  %237 = fn (%var_10258: int32, %var_10259: Tensor[(117), int32]) -> (Tensor[(7, 10, 3), bool], Tensor[(1, 13, 9), bool], int32, Tensor[(117), int32]) {
    %229 = @func_9886() /* ty=(Tensor[(11, 5, 4), float64], Tensor[(864), float32], Tensor[(10, 4, 5), int64], int64, Tensor[(200), int64], Tensor[(7, 10, 3), bool], Tensor[(5, 42), float64]) */;
    %230 = cast(%var_10258, dtype="int32") /* ty=int32 */;
    %231 = cast(%var_10259, dtype="int32") /* ty=Tensor[(117), int32] */;
    %232 = reshape(%230, newshape=[]) /* ty=int32 */;
    %233 = reshape(%231, newshape=[1, 13, 9]) /* ty=Tensor[(1, 13, 9), int32] */;
    %234 = @func_1419(%232, %233) /* ty=(Tensor[(1, 13, 9), bool],) */;
    %235 = %229.5;
    %236 = %234.0;
    (%235, %236, %var_10258, %var_10259)
  };
  %237(%var_10263, %var_10264) /* ty=(Tensor[(7, 10, 3), bool], Tensor[(1, 13, 9), bool], int32, Tensor[(117), int32]) */
}

def @func_1869(%var_1867: Tensor[(1, 16, 9), float32], %var_1868: Tensor[(1, 16, 9), float32]) -> (Tensor[(?, 16, 9), bool],) {
  %245 = fn (%var_1857: Tensor[(1, 16, 9), float32], %var_1862: Tensor[(1, 16, 9), float32]) -> (Tensor[(?, 16, 9), bool],) {
    %238 = cast(%var_1857, dtype="float32") /* ty=Tensor[(1, 16, 9), float32] */;
    %239 = acosh(%238) /* ty=Tensor[(1, 16, 9), float32] */;
    %240 = cast(%var_1862, dtype="bool") /* ty=Tensor[(1, 16, 9), bool] */;
    %241 = shape_of(%239, dtype="int32") /* ty=Tensor[(3), int32] */;
    %242 = cast(%239, dtype="bool") /* ty=Tensor[(1, 16, 9), bool] */;
    %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %244 = less(%242, %243) /* ty=Tensor[(?, 16, 9), bool] */;
    (%244,)
  };
  %245(%var_1867, %var_1868) /* ty=(Tensor[(?, 16, 9), bool],) */
}

def @func_4391(%var_4389: float64) -> Tensor[(10, 6, 1), float64] {
  @func_4388(%var_4389) /* ty=Tensor[(10, 6, 1), float64] */
}

def @func_7678(%var_7676: Tensor[(14, 4, 11), float32]) -> Tensor[(14, 4, 11), float64] {
  @func_7675(%var_7676) /* ty=Tensor[(14, 4, 11), float64] */
}

def @func_8131(%var_8127: Tensor[(15, 15, 5), int8], %var_8128: Tensor[(15, 15, 5), int8], %var_8129: int64, %var_8130: Tensor[(8, 18), bool]) -> (Tensor[(15, 15, 5), int8], Tensor[(6, 10, 4), float32], Tensor[(240), float32], Tensor[(10, 5, 8), bool], Tensor[(2, 200), bool], Tensor[(7, 14, 10), float64], Tensor[(180), float32], Tensor[(336, 1), float32], int64, Tensor[(5, 40), int64], Tensor[(7, 14, 10), float64], int32, Tensor[(8, 18), bool], Tensor[(13, 9), int32]) {
  %282 = fn (%var_8087: Tensor[(15, 15, 5), int8], %var_8088: Tensor[(15, 15, 5), int8], %var_8109: int64, %var_8120: Tensor[(8, 18), bool]) -> (Tensor[(15, 15, 5), int8], Tensor[(6, 10, 4), float32], Tensor[(240), float32], Tensor[(10, 5, 8), bool], Tensor[(2, 200), bool], Tensor[(7, 14, 10), float64], Tensor[(180), float32], Tensor[(336, 1), float32], int64, Tensor[(5, 40), int64], Tensor[(7, 14, 10), float64], int32, Tensor[(8, 18), bool], Tensor[(13, 9), int32]) {
    %246 = cast(%var_8088, dtype="int8") /* ty=Tensor[(15, 15, 5), int8] */;
    %247 = shape_of(%var_8087, dtype="int32") /* ty=Tensor[(3), int32] */;
    %248 = cast(%var_8087, dtype="int8") /* ty=Tensor[(15, 15, 5), int8] */;
    %249 = dyn.reshape(%246, %247, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %250 = cast(meta[relay.Constant][21] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
    %251 = reshape(%250, newshape=[6, 10, 4]) /* ty=Tensor[(6, 10, 4), float32] */;
    %252 = cast(meta[relay.Constant][22] /* ty=Tensor[(2, 200), bool] */, dtype="bool") /* ty=Tensor[(2, 200), bool] */;
    %253 = reshape(%252, newshape=[10, 5, 8]) /* ty=Tensor[(10, 5, 8), bool] */;
    %254 = @func_2907(%253) /* ty=(Tensor[(10, 5, 8), bool], Tensor[(10, 5, 8), int16]) */;
    %255 = cast(meta[relay.Constant][23] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
    %256 = cast(meta[relay.Constant][24] /* ty=Tensor[(336, 1), float32] */, dtype="float32") /* ty=Tensor[(336, 1), float32] */;
    %257 = cast(%var_8109, dtype="int64") /* ty=int64 */;
    %258 = cast(meta[relay.Constant][25] /* ty=Tensor[(5, 40), int64] */, dtype="int64") /* ty=Tensor[(5, 40), int64] */;
    %259 = reshape(%255, newshape=[9, 5, 4]) /* ty=Tensor[(9, 5, 4), float32] */;
    %260 = reshape(%256, newshape=[336]) /* ty=Tensor[(336), float32] */;
    %261 = reshape(%257, newshape=[]) /* ty=int64 */;
    %262 = reshape(%258, newshape=[200]) /* ty=Tensor[(200), int64] */;
    %263 = @func_4243(%259, %260, %261, %262) /* ty=(Tensor[(12, 7, 4), float32], Tensor[(336), float32], Tensor[(10, 4, 5), int64], int64, Tensor[(200), int64], Tensor[(7, 14, 10), float64], Tensor[(980), float64], Tensor[(9, 5, 4), float32]) */;
    %264 = %263.5;
    %265 = cast(%264, dtype="float64") /* ty=Tensor[(7, 14, 10), float64] */;
    %266 = reshape(%265, newshape=[7, 14, 10]) /* ty=Tensor[(7, 14, 10), float64] */;
    %267 = @func_2104(%266) /* ty=(Tensor[(7, 14, 10), float64],) */;
    %268 = cast(%var_8120, dtype="bool") /* ty=Tensor[(8, 18), bool] */;
    %269 = cast(%var_8120, dtype="bool") /* ty=Tensor[(8, 18), bool] */;
    %270 = cast(%var_8109, dtype="int32") /* ty=int32 */;
    %271 = cast(meta[relay.Constant][26] /* ty=Tensor[(13, 9), int32] */, dtype="int32") /* ty=Tensor[(13, 9), int32] */;
    %272 = reshape(%268, newshape=[4, 12, 3]) /* ty=Tensor[(4, 12, 3), bool] */;
    %273 = reshape(%269, newshape=[4, 12, 3]) /* ty=Tensor[(4, 12, 3), bool] */;
    %274 = reshape(%270, newshape=[]) /* ty=int32 */;
    %275 = reshape(%271, newshape=[117]) /* ty=Tensor[(117), int32] */;
    %276 = @func_1891(%272, %273, %274, %275) /* ty=(Tensor[(4, 12, 3), bool], Tensor[(1, 13, 9), bool], int32, Tensor[(117), int32]) */;
    %277 = right_shift(%248, %249) /* ty=Tensor[(15, 15, 5), int8] */;
    %278 = @func_2260(%251) /* ty=Tensor[(6, 10, 4), float32] */;
    %279 = %254.0;
    %280 = %267.0;
    %281 = %276.2;
    (%277, %278, meta[relay.Constant][21] /* ty=Tensor[(240), float32] */, %279, meta[relay.Constant][22] /* ty=Tensor[(2, 200), bool] */, %264, meta[relay.Constant][23] /* ty=Tensor[(180), float32] */, meta[relay.Constant][24] /* ty=Tensor[(336, 1), float32] */, %var_8109, meta[relay.Constant][25] /* ty=Tensor[(5, 40), int64] */, %280, %281, %var_8120, meta[relay.Constant][26] /* ty=Tensor[(13, 9), int32] */)
  };
  %282(%var_8127, %var_8128, %var_8129, %var_8130) /* ty=(Tensor[(15, 15, 5), int8], Tensor[(6, 10, 4), float32], Tensor[(240), float32], Tensor[(10, 5, 8), bool], Tensor[(2, 200), bool], Tensor[(7, 14, 10), float64], Tensor[(180), float32], Tensor[(336, 1), float32], int64, Tensor[(5, 40), int64], Tensor[(7, 14, 10), float64], int32, Tensor[(8, 18), bool], Tensor[(13, 9), int32]) */
}

def @func_5066(%var_5064: int16, %var_5065: Tensor[(10, 7, 8), int16]) -> (Tensor[(10, 7, 8), int16],) {
  %286 = fn (%var_5058: int16, %var_5059: Tensor[(10, 7, 8), int16]) -> (Tensor[(10, 7, 8), int16],) {
    %283 = cast(%var_5058, dtype="int16") /* ty=int16 */;
    %284 = cast(%var_5059, dtype="int16") /* ty=Tensor[(10, 7, 8), int16] */;
    %285 = logical_xor(%283, %284) /* ty=Tensor[(10, 7, 8), int16] */;
    (%285,)
  };
  %286(%var_5064, %var_5065) /* ty=(Tensor[(10, 7, 8), int16],) */
}

def @func_8302() -> Tensor[(11, 5, 4), float64] {
  %287 = fn () -> Tensor[(11, 5, 4), float64] {
    @func_8242() /* ty=Tensor[(11, 5, 4), float64] */
  };
  %287() /* ty=Tensor[(11, 5, 4), float64] */
}

def @func_9400() -> (Tensor[(11, 5, 4), float64], Tensor[(11, 5, 4), float64]) {
  %288 = @func_8419() /* ty=(Tensor[(11, 5, 4), float64],) */;
  %289 = @func_9149() /* ty=Tensor[(11, 5, 4), float64] */;
  %290 = %288.0;
  (%289, %290)
}

def @func_3795(%var_3793: Tensor[(12, 7, 4), float32]) -> Tensor[(12, 7, 4), float32] {
  @func_3792(%var_3793) /* ty=Tensor[(12, 7, 4), float32] */
}

def @func_8176() -> Tensor[(11, 5, 4), float64] {
  @func_8174() /* ty=Tensor[(11, 5, 4), float64] */
}

def @func_3258(%var_3257: float64) -> (Tensor[(10, 15, 10), float64], Tensor[(5, 13, 6), bool], Tensor[(390), float32]) {
  %300 = fn (%var_3245: float64) -> (Tensor[(10, 15, 10), float64], Tensor[(5, 13, 6), bool], Tensor[(390), float32]) {
    %291 = cast(%var_3245, dtype="float64") /* ty=float64 */;
    %292 = cast(meta[relay.Constant][27] /* ty=Tensor[(10, 15, 10), float64] */, dtype="float64") /* ty=Tensor[(10, 15, 10), float64] */;
    %293 = cast(meta[relay.Constant][28] /* ty=Tensor[(390), float32] */, dtype="float32") /* ty=Tensor[(390), float32] */;
    %294 = cast(meta[relay.Constant][28] /* ty=Tensor[(390), float32] */, dtype="float32") /* ty=Tensor[(390), float32] */;
    %295 = reshape(%293, newshape=[5, 13, 6]) /* ty=Tensor[(5, 13, 6), float32] */;
    %296 = reshape(%294, newshape=[5, 13, 6]) /* ty=Tensor[(5, 13, 6), float32] */;
    %297 = @func_1935(%295, %296) /* ty=(Tensor[(5, 13, 6), bool],) */;
    %298 = floor_divide(%291, %292) /* ty=Tensor[(10, 15, 10), float64] */;
    %299 = %297.0;
    (%298, %299, meta[relay.Constant][28] /* ty=Tensor[(390), float32] */)
  };
  %300(%var_3257) /* ty=(Tensor[(10, 15, 10), float64], Tensor[(5, 13, 6), bool], Tensor[(390), float32]) */
}

def @func_9243() -> Tensor[(1, 11, 16), float64] {
  %301 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 11, 16), float64] */, dtype="float64") /* ty=Tensor[(1, 11, 16), float64] */;
  sinh(%301) /* ty=Tensor[(1, 11, 16), float64] */
}

def @func_3887(%var_3885: Tensor[(10, 10, 1), int16]) -> Tensor[(10, 10, 1), int16] {
  @func_3884(%var_3885) /* ty=Tensor[(10, 10, 1), int16] */
}

def @func_7647() -> (Tensor[(11, 5, 4), float64],) {
  %302 = cast(meta[relay.Constant][31] /* ty=Tensor[(11, 5, 4), float64] */, dtype="float64") /* ty=Tensor[(11, 5, 4), float64] */;
  %303 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(11, 5, 4), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %304 = cast(meta[relay.Constant][30] /* ty=Tensor[(11, 5, 4), float64] */, dtype="float64") /* ty=Tensor[(11, 5, 4), float64] */;
  %305 = dyn.reshape(%302, %303, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %306 = floor_divide(%304, %305) /* ty=Tensor[(11, 5, 4), float64] */;
  (%306,)
}

def @func_10217() -> Tensor[(11, 5, 4), float64] {
  %307 = @func_9829() /* ty=Tensor[(11, 5, 4), float64] */;
  %308 = cast(%307, dtype="float64") /* ty=Tensor[(11, 5, 4), float64] */;
  sigmoid(%308) /* ty=Tensor[(11, 5, 4), float64] */
}

def @func_115(%var_89: Tensor[(6, 9, 13), float64]) -> (Tensor[(6, 9, 13), float64], Tensor[(6, 9, 13), float64]) {
  %309 = cast(%var_89, dtype="float64") /* ty=Tensor[(6, 9, 13), float64] */;
  %310 = cast(%var_89, dtype="float64") /* ty=Tensor[(6, 9, 13), float64] */;
  %311 = acos(%309) /* ty=Tensor[(6, 9, 13), float64] */;
  %312 = sigmoid(%310) /* ty=Tensor[(6, 9, 13), float64] */;
  (%311, %312)
}

def @func_7888() -> (Tensor[(11, 5, 4), float64],) {
  %313 = @func_7647() /* ty=(Tensor[(11, 5, 4), float64],) */;
  %314 = %313.0;
  (%314,)
}

def @func_10145() -> Tensor[(11, 5, 4), float64] {
  %315 = @func_7888() /* ty=(Tensor[(11, 5, 4), float64],) */;
  %315.0
}

def @func_10494(%var_10493: Tensor[(336), int8]) -> (Tensor[(11, 5, 4), float64], int32, Tensor[(336), int8], int32, Tensor[(117), int32], Tensor[(1, 13), float64], Tensor[(13), float64]) {
  %334 = fn (%var_10467: Tensor[(336), int8]) -> (Tensor[(11, 5, 4), float64], int32, Tensor[(336), int8], int32, Tensor[(117), int32], Tensor[(1, 13), float64], Tensor[(13), float64]) {
    %316 = @func_9512() /* ty=(Tensor[(11, 5, 4), float64], Tensor[(11, 5, 4), float64]) */;
    %317 = cast(%var_10467, dtype="int8") /* ty=Tensor[(336), int8] */;
    %318 = cast(%var_10467, dtype="int8") /* ty=Tensor[(336), int8] */;
    %319 = cast(-2 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %320 = cast(meta[relay.Constant][32] /* ty=Tensor[(117), int32] */, dtype="int32") /* ty=Tensor[(117), int32] */;
    %321 = reshape(%317, newshape=[12, 14, 2]) /* ty=Tensor[(12, 14, 2), int8] */;
    %322 = reshape(%318, newshape=[12, 14, 2]) /* ty=Tensor[(12, 14, 2), int8] */;
    %323 = reshape(%319, newshape=[]) /* ty=int32 */;
    %324 = reshape(%320, newshape=[117]) /* ty=Tensor[(117), int32] */;
    %325 = @func_2512(%321, %322, %323, %324) /* ty=(Tensor[(12, 14, 2), int8], Tensor[(1, 13, 9), bool], int32, Tensor[(117), int32]) */;
    %326 = %325.2;
    %327 = cast(%326, dtype="float64") /* ty=float64 */;
    %328 = cast(meta[relay.Constant][33] /* ty=Tensor[(13), float64] */, dtype="float64") /* ty=Tensor[(13), float64] */;
    %329 = reshape(%327, newshape=[]) /* ty=float64 */;
    %330 = reshape(%328, newshape=[13, 1]) /* ty=Tensor[(13, 1), float64] */;
    %331 = @func_7782(%329, %330) /* ty=(Tensor[(11, 5, 4), float64], Tensor[(1, 13), float64], float64, Tensor[(13, 1), float64]) */;
    %332 = %316.0;
    %333 = %331.1;
    (%332, %326, %var_10467, -2 /* ty=int32 */, meta[relay.Constant][32] /* ty=Tensor[(117), int32] */, %333, meta[relay.Constant][33] /* ty=Tensor[(13), float64] */)
  };
  %334(%var_10493) /* ty=(Tensor[(11, 5, 4), float64], int32, Tensor[(336), int8], int32, Tensor[(117), int32], Tensor[(1, 13), float64], Tensor[(13), float64]) */
}

def @func_7786(%var_7784: float64, %var_7785: Tensor[(13, 1), float64]) -> (Tensor[(11, 5, 4), float64], Tensor[(1, 13), float64], float64, Tensor[(13, 1), float64]) {
  @func_7782(%var_7784, %var_7785) /* ty=(Tensor[(11, 5, 4), float64], Tensor[(1, 13), float64], float64, Tensor[(13, 1), float64]) */
}

def @func_9512() -> (Tensor[(11, 5, 4), float64], Tensor[(11, 5, 4), float64]) {
  %335 = @func_7888() /* ty=(Tensor[(11, 5, 4), float64],) */;
  %336 = @func_9365() /* ty=Tensor[(11, 5, 4), float64] */;
  %337 = %335.0;
  (%336, %337)
}

def @func_10413() -> Tensor[(11, 5, 4), float64] {
  @func_8242() /* ty=Tensor[(11, 5, 4), float64] */
}

def @func_8281() -> (Tensor[(11, 5, 4), float64],) {
  @func_8279() /* ty=(Tensor[(11, 5, 4), float64],) */
}

def @func_118(%var_116: Tensor[(6, 9, 13), float64]) -> (Tensor[(6, 9, 13), float64], Tensor[(6, 9, 13), float64]) {
  @func_115(%var_116) /* ty=(Tensor[(6, 9, 13), float64], Tensor[(6, 9, 13), float64]) */
}

def @func_9630() -> Tensor[(11, 5, 4), float64] {
  %338 = @func_9045() /* ty=Tensor[(11, 5, 4), float64] */;
  %339 = cast(%338, dtype="float64") /* ty=Tensor[(11, 5, 4), float64] */;
  log10(%339) /* ty=Tensor[(11, 5, 4), float64] */
}

def @func_1896(%var_1892: Tensor[(4, 12, 3), bool], %var_1893: Tensor[(4, 12, 3), bool], %var_1894: int32, %var_1895: Tensor[(117), int32]) -> (Tensor[(4, 12, 3), bool], Tensor[(1, 13, 9), bool], int32, Tensor[(117), int32]) {
  %351 = fn (%var_1875: Tensor[(4, 12, 3), bool], %var_1876: Tensor[(4, 12, 3), bool], %var_1886: int32, %var_1887: Tensor[(117), int32]) -> (Tensor[(4, 12, 3), bool], Tensor[(1, 13, 9), bool], int32, Tensor[(117), int32]) {
    %340 = cast(%var_1876, dtype="bool") /* ty=Tensor[(4, 12, 3), bool] */;
    %341 = shape_of(%var_1875, dtype="int32") /* ty=Tensor[(3), int32] */;
    %342 = cast(%var_1875, dtype="bool") /* ty=Tensor[(4, 12, 3), bool] */;
    %343 = dyn.reshape(%340, %341, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %344 = cast(%var_1886, dtype="int32") /* ty=int32 */;
    %345 = cast(%var_1887, dtype="int32") /* ty=Tensor[(117), int32] */;
    %346 = reshape(%344, newshape=[]) /* ty=int32 */;
    %347 = reshape(%345, newshape=[1, 13, 9]) /* ty=Tensor[(1, 13, 9), int32] */;
    %348 = @func_1419(%346, %347) /* ty=(Tensor[(1, 13, 9), bool],) */;
    %349 = logical_and(%342, %343) /* ty=Tensor[(4, 12, 3), bool] */;
    %350 = %348.0;
    (%349, %350, %var_1886, %var_1887)
  };
  %351(%var_1892, %var_1893, %var_1894, %var_1895) /* ty=(Tensor[(4, 12, 3), bool], Tensor[(1, 13, 9), bool], int32, Tensor[(117), int32]) */
}

def @func_7960(%var_7958: Tensor[(15, 12, 16), float64], %var_7959: Tensor[(84), float32]) -> (Tensor[(15, 12, 16), float64], Tensor[(210), float64], Tensor[(84), float32]) {
  %358 = fn (%var_7948: Tensor[(15, 12, 16), float64], %var_7952: Tensor[(84), float32]) -> (Tensor[(15, 12, 16), float64], Tensor[(210), float64], Tensor[(84), float32]) {
    %352 = cast(%var_7948, dtype="float64") /* ty=Tensor[(15, 12, 16), float64] */;
    %353 = cast(%var_7952, dtype="float32") /* ty=Tensor[(84), float32] */;
    %354 = reshape(%353, newshape=[6, 2, 7]) /* ty=Tensor[(6, 2, 7), float32] */;
    %355 = @func_3966(%354) /* ty=(Tensor[(6, 2, 7), float32], Tensor[(7, 10, 3), bool], Tensor[(210), float64]) */;
    %356 = exp(%352) /* ty=Tensor[(15, 12, 16), float64] */;
    %357 = %355.2;
    (%356, %357, %var_7952)
  };
  %358(%var_7958, %var_7959) /* ty=(Tensor[(15, 12, 16), float64], Tensor[(210), float64], Tensor[(84), float32]) */
}

def @func_9477() -> Tensor[(11, 5, 4), float64] {
  %359 = fn () -> Tensor[(11, 5, 4), float64] {
    @func_8242() /* ty=Tensor[(11, 5, 4), float64] */
  };
  %359() /* ty=Tensor[(11, 5, 4), float64] */
}

def @func_10051(%var_10049: int32, %var_10050: Tensor[(117), int32]) -> (Tensor[(11, 5, 4), float64], Tensor[(1, 13, 9), bool], int32, Tensor[(117), int32]) {
  %367 = fn (%var_10036: int32, %var_10037: Tensor[(117), int32]) -> (Tensor[(11, 5, 4), float64], Tensor[(1, 13, 9), bool], int32, Tensor[(117), int32]) {
    %360 = cast(%var_10036, dtype="int32") /* ty=int32 */;
    %361 = cast(%var_10037, dtype="int32") /* ty=Tensor[(117), int32] */;
    %362 = reshape(%360, newshape=[]) /* ty=int32 */;
    %363 = reshape(%361, newshape=[1, 13, 9]) /* ty=Tensor[(1, 13, 9), int32] */;
    %364 = @func_1419(%362, %363) /* ty=(Tensor[(1, 13, 9), bool],) */;
    %365 = @func_8071() /* ty=Tensor[(11, 5, 4), float64] */;
    %366 = %364.0;
    (%365, %366, %var_10036, %var_10037)
  };
  %367(%var_10049, %var_10050) /* ty=(Tensor[(11, 5, 4), float64], Tensor[(1, 13, 9), bool], int32, Tensor[(117), int32]) */
}

def @func_4249(%var_4245: Tensor[(9, 5, 4), float32], %var_4246: Tensor[(336), float32], %var_4247: int64, %var_4248: Tensor[(200), int64]) -> (Tensor[(12, 7, 4), float32], Tensor[(336), float32], Tensor[(10, 4, 5), int64], int64, Tensor[(200), int64], Tensor[(7, 14, 10), float64], Tensor[(980), float64], Tensor[(9, 5, 4), float32]) {
  @func_4243(%var_4245, %var_4246, %var_4247, %var_4248) /* ty=(Tensor[(12, 7, 4), float32], Tensor[(336), float32], Tensor[(10, 4, 5), int64], int64, Tensor[(200), int64], Tensor[(7, 14, 10), float64], Tensor[(980), float64], Tensor[(9, 5, 4), float32]) */
}

def @func_8773() -> (Tensor[(11, 5, 4), float64],) {
  %368 = @func_8242() /* ty=Tensor[(11, 5, 4), float64] */;
  (%368,)
}

def @func_5728(%var_5708: Tensor[(10, 1, 3), int32], %var_5709: Tensor[(10, 13, 3), int32], %var_5713: Tensor[(10, 13, 3), int32]) -> (Tensor[(10, 13, 3), int8], Tensor[(10, 1, 3), float64]) {
  %369 = cast(%var_5708, dtype="int32") /* ty=Tensor[(10, 1, 3), int32] */;
  %370 = cast(%var_5709, dtype="int32") /* ty=Tensor[(10, 13, 3), int32] */;
  %371 = bitwise_and(%369, %370) /* ty=Tensor[(10, 13, 3), int32] */;
  %372 = cast(%var_5713, dtype="int8") /* ty=Tensor[(10, 13, 3), int8] */;
  %373 = shape_of(%371, dtype="int32") /* ty=Tensor[(3), int32] */;
  %374 = cast(%371, dtype="int8") /* ty=Tensor[(10, 13, 3), int8] */;
  %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %376 = cast(%var_5708, dtype="float64") /* ty=Tensor[(10, 1, 3), float64] */;
  %377 = right_shift(%374, %375) /* ty=Tensor[(10, 13, 3), int8] */;
  %378 = atanh(%376) /* ty=Tensor[(10, 1, 3), float64] */;
  (%377, %378)
}

def @func_9677() -> (Tensor[(11, 5, 4), float64], Tensor[(11, 5, 4), float64]) {
  %379 = @func_7647() /* ty=(Tensor[(11, 5, 4), float64],) */;
  %380 = %379.0;
  %381 = @func_9630() /* ty=Tensor[(11, 5, 4), float64] */;
  (%380, %381)
}

def @func_662(%var_660: Tensor[(12, 9, 8), float32], %var_661: Tensor[(12, 9, 8), float32]) -> (Tensor[(12, 9, 8), int8], Tensor[(6, 9, 13), float64], Tensor[(702), float64]) {
  @func_658(%var_660, %var_661) /* ty=(Tensor[(12, 9, 8), int8], Tensor[(6, 9, 13), float64], Tensor[(702), float64]) */
}

def @func_3792(%var_3787: Tensor[(12, 7, 4), float32]) -> Tensor[(12, 7, 4), float32] {
  %382 = cast(%var_3787, dtype="float32") /* ty=Tensor[(12, 7, 4), float32] */;
  atanh(%382) /* ty=Tensor[(12, 7, 4), float32] */
}

def @func_5975(%var_5973: float32, %var_5974: Tensor[(7, 7, 14), float32]) -> (Tensor[(7, 7, 14), float32],) {
  %386 = fn (%var_5966: float32, %var_5967: Tensor[(7, 7, 14), float32]) -> (Tensor[(7, 7, 14), float32],) {
    %383 = cast(%var_5966, dtype="float32") /* ty=float32 */;
    %384 = cast(%var_5967, dtype="float32") /* ty=Tensor[(7, 7, 14), float32] */;
    %385 = divide(%383, %384) /* ty=Tensor[(7, 7, 14), float32] */;
    (%385,)
  };
  %386(%var_5973, %var_5974) /* ty=(Tensor[(7, 7, 14), float32],) */
}

def @func_1774(%var_1739: int64, %var_1740: Tensor[(13, 16, 10), int64], %var_1760: Tensor[(702), float64]) -> (Tensor[(6, 9, 13), float64], Tensor[(702), float64], Tensor[(13, 16, 10), bool]) {
  %387 = cast(%var_1760, dtype="float64") /* ty=Tensor[(702), float64] */;
  %388 = reshape(%387, newshape=[6, 9, 13]) /* ty=Tensor[(6, 9, 13), float64] */;
  %389 = @func_115(%388) /* ty=(Tensor[(6, 9, 13), float64], Tensor[(6, 9, 13), float64]) */;
  %390 = cast(%var_1739, dtype="int64") /* ty=int64 */;
  %391 = cast(%var_1740, dtype="int64") /* ty=Tensor[(13, 16, 10), int64] */;
  %392 = minimum(%390, %391) /* ty=Tensor[(13, 16, 10), int64] */;
  %393 = cast(%392, dtype="bool") /* ty=Tensor[(13, 16, 10), bool] */;
  %394 = shape_of(%var_1740, dtype="int32") /* ty=Tensor[(3), int32] */;
  %395 = cast(%var_1740, dtype="bool") /* ty=Tensor[(13, 16, 10), bool] */;
  %396 = dyn.reshape(%393, %394, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %397 = %389.1;
  %398 = logical_and(%395, %396) /* ty=Tensor[(13, 16, 10), bool] */;
  (%397, %var_1760, %398)
}

def @func_10219() -> Tensor[(11, 5, 4), float64] {
  @func_10217() /* ty=Tensor[(11, 5, 4), float64] */
}

def @func_2512(%var_2501: Tensor[(12, 14, 2), int8], %var_2502: Tensor[(12, 14, 2), int8], %var_2509: int32, %var_2510: Tensor[(117), int32]) -> (Tensor[(12, 14, 2), int8], Tensor[(1, 13, 9), bool], int32, Tensor[(117), int32]) {
  %399 = cast(%var_2502, dtype="int8") /* ty=Tensor[(12, 14, 2), int8] */;
  %400 = shape_of(%var_2501, dtype="int32") /* ty=Tensor[(3), int32] */;
  %401 = cast(%var_2501, dtype="int8") /* ty=Tensor[(12, 14, 2), int8] */;
  %402 = dyn.reshape(%399, %400, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %403 = cast(%var_2509, dtype="int32") /* ty=int32 */;
  %404 = cast(%var_2510, dtype="int32") /* ty=Tensor[(117), int32] */;
  %405 = reshape(%403, newshape=[]) /* ty=int32 */;
  %406 = reshape(%404, newshape=[1, 13, 9]) /* ty=Tensor[(1, 13, 9), int32] */;
  %407 = @func_1419(%405, %406) /* ty=(Tensor[(1, 13, 9), bool],) */;
  %408 = add(%401, %402) /* ty=Tensor[(12, 14, 2), int8] */;
  %409 = %407.0;
  (%408, %409, %var_2509, %var_2510)
}

def @func_8805() -> Tensor[(11, 5, 4), float64] {
  @func_8803() /* ty=Tensor[(11, 5, 4), float64] */
}

def @func_9887() -> (Tensor[(11, 5, 4), float64], Tensor[(864), float32], Tensor[(10, 4, 5), int64], int64, Tensor[(200), int64], Tensor[(7, 10, 3), bool], Tensor[(5, 42), float64]) {
  %423 = fn () -> (Tensor[(11, 5, 4), float64], Tensor[(864), float32], Tensor[(10, 4, 5), int64], int64, Tensor[(200), int64], Tensor[(7, 10, 3), bool], Tensor[(5, 42), float64]) {
    %410 = @func_9121() /* ty=(Tensor[(11, 5, 4), float64], Tensor[(12, 9, 8), int8], Tensor[(864), float32]) */;
    %411 = cast(9 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %412 = cast(meta[relay.Constant][34] /* ty=Tensor[(200), int64] */, dtype="int64") /* ty=Tensor[(200), int64] */;
    %413 = reshape(%411, newshape=[]) /* ty=int64 */;
    %414 = reshape(%412, newshape=[10, 4, 5]) /* ty=Tensor[(10, 4, 5), int64] */;
    %415 = @func_1528(%413, %414) /* ty=(Tensor[(10, 4, 5), int64],) */;
    %416 = cast(meta[relay.Constant][35] /* ty=Tensor[(5, 42), float64] */, dtype="float64") /* ty=Tensor[(5, 42), float64] */;
    %417 = reshape(%416, newshape=[7, 10, 3]) /* ty=Tensor[(7, 10, 3), float64] */;
    %418 = @func_3420(%417) /* ty=(Tensor[(7, 10, 3), bool],) */;
    %419 = @func_8242() /* ty=Tensor[(11, 5, 4), float64] */;
    %420 = %410.2;
    %421 = %415.0;
    %422 = %418.0;
    (%419, %420, %421, 9 /* ty=int64 */, meta[relay.Constant][34] /* ty=Tensor[(200), int64] */, %422, meta[relay.Constant][35] /* ty=Tensor[(5, 42), float64] */)
  };
  %423() /* ty=(Tensor[(11, 5, 4), float64], Tensor[(864), float32], Tensor[(10, 4, 5), int64], int64, Tensor[(200), int64], Tensor[(7, 10, 3), bool], Tensor[(5, 42), float64]) */
}

def @func_8007(%var_8005: Tensor[(528), float64], %var_8006: Tensor[(78), int16]) -> (Tensor[(11, 5, 4), float64], int64, Tensor[(528), float64], Tensor[(14, 13, 6), int16], Tensor[(78), int16], Tensor[(7, 156), int16]) {
  %437 = fn (%var_7978: Tensor[(528), float64], %var_7993: Tensor[(78), int16]) -> (Tensor[(11, 5, 4), float64], int64, Tensor[(528), float64], Tensor[(14, 13, 6), int16], Tensor[(78), int16], Tensor[(7, 156), int16]) {
    %424 = @func_7647() /* ty=(Tensor[(11, 5, 4), float64],) */;
    %425 = cast(%var_7978, dtype="float64") /* ty=Tensor[(528), float64] */;
    %426 = cast(%var_7978, dtype="float64") /* ty=Tensor[(528), float64] */;
    %427 = reshape(%425, newshape=[12, 4, 11]) /* ty=Tensor[(12, 4, 11), float64] */;
    %428 = reshape(%426, newshape=[12, 4, 11]) /* ty=Tensor[(12, 4, 11), float64] */;
    %429 = @func_2363(%427, %428) /* ty=(Tensor[(12, 4, 11), float64], Tensor[(10, 4, 5), int64], int64, Tensor[(200), int64]) */;
    %430 = cast(%var_7993, dtype="int16") /* ty=Tensor[(78), int16] */;
    %431 = cast(meta[relay.Constant][36] /* ty=Tensor[(7, 156), int16] */, dtype="int16") /* ty=Tensor[(7, 156), int16] */;
    %432 = reshape(%430, newshape=[1, 13, 6]) /* ty=Tensor[(1, 13, 6), int16] */;
    %433 = reshape(%431, newshape=[14, 13, 6]) /* ty=Tensor[(14, 13, 6), int16] */;
    %434 = %424.0;
    %435 = %429.2;
    %436 = @func_1276(%432, %433) /* ty=Tensor[(14, 13, 6), int16] */;
    (%434, %435, %var_7978, %436, %var_7993, meta[relay.Constant][36] /* ty=Tensor[(7, 156), int16] */)
  };
  %437(%var_8005, %var_8006) /* ty=(Tensor[(11, 5, 4), float64], int64, Tensor[(528), float64], Tensor[(14, 13, 6), int16], Tensor[(78), int16], Tensor[(7, 156), int16]) */
}

def @func_2518(%var_2514: Tensor[(12, 14, 2), int8], %var_2515: Tensor[(12, 14, 2), int8], %var_2516: int32, %var_2517: Tensor[(117), int32]) -> (Tensor[(12, 14, 2), int8], Tensor[(1, 13, 9), bool], int32, Tensor[(117), int32]) {
  @func_2512(%var_2514, %var_2515, %var_2516, %var_2517) /* ty=(Tensor[(12, 14, 2), int8], Tensor[(1, 13, 9), bool], int32, Tensor[(117), int32]) */
}

def @func_7782(%var_7775: float64, %var_7776: Tensor[(13, 1), float64]) -> (Tensor[(11, 5, 4), float64], Tensor[(1, 13), float64], float64, Tensor[(13, 1), float64]) {
  %438 = @func_7647() /* ty=(Tensor[(11, 5, 4), float64],) */;
  %439 = cast(%var_7775, dtype="float64") /* ty=float64 */;
  %440 = cast(%var_7776, dtype="float64") /* ty=Tensor[(13, 1), float64] */;
  %441 = reshape(%439, newshape=[]) /* ty=float64 */;
  %442 = reshape(%440, newshape=[1, 13]) /* ty=Tensor[(1, 13), float64] */;
  %443 = @func_4924(%441, %442) /* ty=(Tensor[(1, 13), float64],) */;
  %444 = %438.0;
  %445 = %443.0;
  (%444, %445, %var_7775, %var_7776)
}

def @func_1935(%var_1903: Tensor[(5, 13, 6), float32], %var_1904: Tensor[(5, 13, 6), float32]) -> (Tensor[(5, 13, 6), bool],) {
  %446 = cast(%var_1904, dtype="bool") /* ty=Tensor[(5, 13, 6), bool] */;
  %447 = shape_of(%var_1903, dtype="int32") /* ty=Tensor[(3), int32] */;
  %448 = cast(%var_1903, dtype="bool") /* ty=Tensor[(5, 13, 6), bool] */;
  %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %450 = less_equal(%448, %449) /* ty=Tensor[(5, 13, 6), bool] */;
  (%450,)
}

def @func_9232(%var_9231: Tensor[(11, 5, 4), float64]) -> (Tensor[(?, 16, 9), bool], Tensor[(13, 144), float64], Tensor[(11, 5, 4), bool]) {
  %467 = fn (%var_9210: Tensor[(11, 5, 4), float64]) -> (Tensor[(?, 16, 9), bool], Tensor[(13, 144), float64], Tensor[(11, 5, 4), bool]) {
    %451 = cast(meta[relay.Constant][37] /* ty=Tensor[(1, 144), float32] */, dtype="float32") /* ty=Tensor[(1, 144), float32] */;
    %452 = cast(meta[relay.Constant][37] /* ty=Tensor[(1, 144), float32] */, dtype="float32") /* ty=Tensor[(1, 144), float32] */;
    %453 = reshape(%451, newshape=[1, 16, 9]) /* ty=Tensor[(1, 16, 9), float32] */;
    %454 = reshape(%452, newshape=[1, 16, 9]) /* ty=Tensor[(1, 16, 9), float32] */;
    %455 = @func_1866(%453, %454) /* ty=(Tensor[(?, 16, 9), bool],) */;
    %456 = cast(meta[relay.Constant][37] /* ty=Tensor[(1, 144), float32] */, dtype="float64") /* ty=Tensor[(1, 144), float64] */;
    %457 = cast(meta[relay.Constant][38] /* ty=Tensor[(13, 144), float32] */, dtype="float64") /* ty=Tensor[(13, 144), float64] */;
    %458 = @func_8279() /* ty=(Tensor[(11, 5, 4), float64],) */;
    %459 = %458.0;
    %460 = cast(%var_9210, dtype="bool") /* ty=Tensor[(11, 5, 4), bool] */;
    %461 = shape_of(%459, dtype="int32") /* ty=Tensor[(3), int32] */;
    %462 = cast(%459, dtype="bool") /* ty=Tensor[(11, 5, 4), bool] */;
    %463 = dyn.reshape(%460, %461, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %464 = %455.0;
    %465 = power(%456, %457) /* ty=Tensor[(13, 144), float64] */;
    %466 = greater(%462, %463) /* ty=Tensor[(11, 5, 4), bool] */;
    (%464, %465, %466)
  };
  %467(%var_9231) /* ty=(Tensor[(?, 16, 9), bool], Tensor[(13, 144), float64], Tensor[(11, 5, 4), bool]) */
}

def @func_9366() -> Tensor[(11, 5, 4), float64] {
  %469 = fn () -> Tensor[(11, 5, 4), float64] {
    %468 = @func_8419() /* ty=(Tensor[(11, 5, 4), float64],) */;
    %468.0
  };
  %469() /* ty=Tensor[(11, 5, 4), float64] */
}

def @func_9829() -> Tensor[(11, 5, 4), float64] {
  @func_8835() /* ty=Tensor[(11, 5, 4), float64] */
}

def @func_8232(%var_8231: Tensor[(4, 280), float32]) -> (Tensor[(5, 16, 14), float32], Tensor[(4, 280), float32], Tensor[(11, 5, 4), float64]) {
  %477 = fn (%var_8222: Tensor[(4, 280), float32]) -> (Tensor[(5, 16, 14), float32], Tensor[(4, 280), float32], Tensor[(11, 5, 4), float64]) {
    %470 = cast(%var_8222, dtype="float32") /* ty=Tensor[(4, 280), float32] */;
    %471 = reshape(%470, newshape=[5, 16, 14]) /* ty=Tensor[(5, 16, 14), float32] */;
    %472 = @func_7888() /* ty=(Tensor[(11, 5, 4), float64],) */;
    %473 = %472.0;
    %474 = cast(%473, dtype="float64") /* ty=Tensor[(11, 5, 4), float64] */;
    %475 = @func_1076(%471) /* ty=Tensor[(5, 16, 14), float32] */;
    %476 = sin(%474) /* ty=Tensor[(11, 5, 4), float64] */;
    (%475, %var_8222, %476)
  };
  %477(%var_8231) /* ty=(Tensor[(5, 16, 14), float32], Tensor[(4, 280), float32], Tensor[(11, 5, 4), float64]) */
}

def @func_3966(%var_3901: Tensor[(6, 2, 7), float32]) -> (Tensor[(6, 2, 7), float32], Tensor[(7, 10, 3), bool], Tensor[(210), float64]) {
  %478 = cast(%var_3901, dtype="float32") /* ty=Tensor[(6, 2, 7), float32] */;
  %479 = cast(meta[relay.Constant][39] /* ty=Tensor[(210), float64] */, dtype="float64") /* ty=Tensor[(210), float64] */;
  %480 = reshape(%479, newshape=[7, 10, 3]) /* ty=Tensor[(7, 10, 3), float64] */;
  %481 = @func_3420(%480) /* ty=(Tensor[(7, 10, 3), bool],) */;
  %482 = sigmoid(%478) /* ty=Tensor[(6, 2, 7), float32] */;
  %483 = %481.0;
  (%482, %483, meta[relay.Constant][39] /* ty=Tensor[(210), float64] */)
}

def @func_9679() -> (Tensor[(11, 5, 4), float64], Tensor[(11, 5, 4), float64]) {
  @func_9677() /* ty=(Tensor[(11, 5, 4), float64], Tensor[(11, 5, 4), float64]) */
}

def @func_4924(%var_4909: float64, %var_4910: Tensor[(1, 13), float64]) -> (Tensor[(1, 13), float64],) {
  %484 = cast(%var_4909, dtype="float64") /* ty=float64 */;
  %485 = cast(%var_4910, dtype="float64") /* ty=Tensor[(1, 13), float64] */;
  %486 = mod(%484, %485) /* ty=Tensor[(1, 13), float64] */;
  (%486,)
}

def @func_7765(%var_7763: Tensor[(400), bool], %var_7764: Tensor[(400), bool]) -> (Tensor[(11, 5, 4), float64], Tensor[(10, 5, 8), int16], Tensor[(10, 10, 1), int16], Tensor[(100), int16], Tensor[(400), float64]) {
  %501 = fn (%var_7743: Tensor[(400), bool], %var_7753: Tensor[(400), bool]) -> (Tensor[(11, 5, 4), float64], Tensor[(10, 5, 8), int16], Tensor[(10, 10, 1), int16], Tensor[(100), int16], Tensor[(400), float64]) {
    %487 = @func_7647() /* ty=(Tensor[(11, 5, 4), float64],) */;
    %488 = cast(%var_7743, dtype="bool") /* ty=Tensor[(400), bool] */;
    %489 = reshape(%488, newshape=[10, 5, 8]) /* ty=Tensor[(10, 5, 8), bool] */;
    %490 = @func_2907(%489) /* ty=(Tensor[(10, 5, 8), bool], Tensor[(10, 5, 8), int16]) */;
    %491 = cast(meta[relay.Constant][40] /* ty=Tensor[(100), int16] */, dtype="int16") /* ty=Tensor[(100), int16] */;
    %492 = reshape(%491, newshape=[10, 10, 1]) /* ty=Tensor[(10, 10, 1), int16] */;
    %493 = cast(%var_7753, dtype="float64") /* ty=Tensor[(400), float64] */;
    %494 = shape_of(%var_7743, dtype="int32") /* ty=Tensor[(1), int32] */;
    %495 = cast(%var_7743, dtype="float64") /* ty=Tensor[(400), float64] */;
    %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?), float64] */;
    %497 = %487.0;
    %498 = %490.1;
    %499 = @func_3884(%492) /* ty=Tensor[(10, 10, 1), int16] */;
    %500 = power(%495, %496) /* ty=Tensor[(400), float64] */;
    (%497, %498, %499, meta[relay.Constant][40] /* ty=Tensor[(100), int16] */, %500)
  };
  %501(%var_7763, %var_7764) /* ty=(Tensor[(11, 5, 4), float64], Tensor[(10, 5, 8), int16], Tensor[(10, 10, 1), int16], Tensor[(100), int16], Tensor[(400), float64]) */
}

def @func_4928(%var_4926: float64, %var_4927: Tensor[(1, 13), float64]) -> (Tensor[(1, 13), float64],) {
  @func_4924(%var_4926, %var_4927) /* ty=(Tensor[(1, 13), float64],) */
}

def @func_2260(%var_2255: Tensor[(6, 10, 4), float32]) -> Tensor[(6, 10, 4), float32] {
  %502 = cast(%var_2255, dtype="float32") /* ty=Tensor[(6, 10, 4), float32] */;
  cos(%502) /* ty=Tensor[(6, 10, 4), float32] */
}

def @func_9245() -> Tensor[(1, 11, 16), float64] {
  @func_9243() /* ty=Tensor[(1, 11, 16), float64] */
}

def @func_9850() -> (Tensor[(11, 5, 4), float64],) {
  %503 = @func_9400() /* ty=(Tensor[(11, 5, 4), float64], Tensor[(11, 5, 4), float64]) */;
  %504 = %503.0;
  (%504,)
}

def @func_8870(%var_8869: Tensor[(11, 5, 4), float64]) -> (Tensor[(11, 5, 4), float64], Tensor[(11, 5, 4), bool]) {
  %514 = fn (%var_8859: Tensor[(11, 5, 4), float64]) -> (Tensor[(11, 5, 4), float64], Tensor[(11, 5, 4), bool]) {
    %505 = @func_7834() /* ty=(Tensor[(11, 5, 4), float64],) */;
    %506 = @func_7647() /* ty=(Tensor[(11, 5, 4), float64],) */;
    %507 = %506.0;
    %508 = cast(%var_8859, dtype="bool") /* ty=Tensor[(11, 5, 4), bool] */;
    %509 = shape_of(%507, dtype="int32") /* ty=Tensor[(3), int32] */;
    %510 = cast(%507, dtype="bool") /* ty=Tensor[(11, 5, 4), bool] */;
    %511 = dyn.reshape(%508, %509, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %512 = %505.0;
    %513 = logical_or(%510, %511) /* ty=Tensor[(11, 5, 4), bool] */;
    (%512, %513)
  };
  %514(%var_8869) /* ty=(Tensor[(11, 5, 4), float64], Tensor[(11, 5, 4), bool]) */
}

def @func_4465(%var_4463: Tensor[(14, 3, 12), bool], %var_4464: Tensor[(14, 3, 12), bool]) -> (Tensor[(14, 3, 12), bool], int32, Tensor[(144), bool], int32, Tensor[(13, 9), int32]) {
  @func_4461(%var_4463, %var_4464) /* ty=(Tensor[(14, 3, 12), bool], int32, Tensor[(144), bool], int32, Tensor[(13, 9), int32]) */
}

def @func_10174() -> (Tensor[(11, 5, 4), uint32],) {
  %521 = fn () -> (Tensor[(11, 5, 4), uint32],) {
    %515 = @func_9829() /* ty=Tensor[(11, 5, 4), float64] */;
    %516 = cast(meta[relay.Constant][41] /* ty=Tensor[(11, 5, 4), float64] */, dtype="uint32") /* ty=Tensor[(11, 5, 4), uint32] */;
    %517 = shape_of(%515, dtype="int32") /* ty=Tensor[(3), int32] */;
    %518 = cast(%515, dtype="uint32") /* ty=Tensor[(11, 5, 4), uint32] */;
    %519 = dyn.reshape(%516, %517, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %520 = bitwise_xor(%518, %519) /* ty=Tensor[(11, 5, 4), uint32] */;
    (%520,)
  };
  %521() /* ty=(Tensor[(11, 5, 4), uint32],) */
}

def @func_2106(%var_2105: Tensor[(7, 14, 10), float64]) -> (Tensor[(7, 14, 10), float64],) {
  %524 = fn (%var_2089: Tensor[(7, 14, 10), float64]) -> (Tensor[(7, 14, 10), float64],) {
    %522 = cast(%var_2089, dtype="float64") /* ty=Tensor[(7, 14, 10), float64] */;
    %523 = exp(%522) /* ty=Tensor[(7, 14, 10), float64] */;
    (%523,)
  };
  %524(%var_2105) /* ty=(Tensor[(7, 14, 10), float64],) */
}

def @func_6614(%var_6607: Tensor[(1, 1, 12), float32], %var_6608: Tensor[(336), float32], %var_6609: Tensor[(180), float32], %var_6610: int64, %var_6611: Tensor[(30), int32], %var_6612: Tensor[(390), int32], %var_6613: Tensor[(78), int16]) -> (Tensor[(12, 7, 4), float32], Tensor[(336), float32], int64, Tensor[(180), float32], int64, Tensor[(200), int64], Tensor[(10, 13, 3), int8], Tensor[(30), int32], Tensor[(390), int32], Tensor[(12, 7, 4), float32], Tensor[(6, 9, 13), float64], Tensor[(36, 24), float32], Tensor[(14, 13, 6), int16], Tensor[(78), int16], Tensor[(1092), int16], Tensor[(13, 15, 12), int8], Tensor[(?, ?, 12), bool], Tensor[(13, 15, 12), bool]) {
  %587 = fn (%var_6481: Tensor[(1, 1, 12), float32], %var_6499: Tensor[(336), float32], %var_6511: Tensor[(180), float32], %var_6512: int64, %var_6520: Tensor[(30), int32], %var_6521: Tensor[(390), int32], %var_6566: Tensor[(78), int16]) -> (Tensor[(12, 7, 4), float32], Tensor[(336), float32], int64, Tensor[(180), float32], int64, Tensor[(200), int64], Tensor[(10, 13, 3), int8], Tensor[(30), int32], Tensor[(390), int32], Tensor[(12, 7, 4), float32], Tensor[(6, 9, 13), float64], Tensor[(36, 24), float32], Tensor[(14, 13, 6), int16], Tensor[(78), int16], Tensor[(1092), int16], Tensor[(13, 15, 12), int8], Tensor[(?, ?, 12), bool], Tensor[(13, 15, 12), bool]) {
    %525 = cast(%var_6499, dtype="float32") /* ty=Tensor[(336), float32] */;
    %526 = reshape(%525, newshape=[12, 7, 4]) /* ty=Tensor[(12, 7, 4), float32] */;
    %527 = cast(%var_6511, dtype="float32") /* ty=Tensor[(180), float32] */;
    %528 = @func_3792(%526) /* ty=Tensor[(12, 7, 4), float32] */;
    %529 = cast(%528, dtype="float32") /* ty=Tensor[(12, 7, 4), float32] */;
    %530 = cast(%var_6512, dtype="int64") /* ty=int64 */;
    %531 = cast(meta[relay.Constant][42] /* ty=Tensor[(200), int64] */, dtype="int64") /* ty=Tensor[(200), int64] */;
    %532 = reshape(%527, newshape=[9, 5, 4]) /* ty=Tensor[(9, 5, 4), float32] */;
    %533 = reshape(%529, newshape=[336]) /* ty=Tensor[(336), float32] */;
    %534 = reshape(%530, newshape=[]) /* ty=int64 */;
    %535 = reshape(%531, newshape=[200]) /* ty=Tensor[(200), int64] */;
    %536 = @func_4243(%532, %533, %534, %535) /* ty=(Tensor[(12, 7, 4), float32], Tensor[(336), float32], Tensor[(10, 4, 5), int64], int64, Tensor[(200), int64], Tensor[(7, 14, 10), float64], Tensor[(980), float64], Tensor[(9, 5, 4), float32]) */;
    %537 = cast(%var_6520, dtype="int32") /* ty=Tensor[(30), int32] */;
    %538 = cast(%var_6521, dtype="int32") /* ty=Tensor[(390), int32] */;
    %539 = cast(%var_6521, dtype="int32") /* ty=Tensor[(390), int32] */;
    %540 = reshape(%537, newshape=[10, 1, 3]) /* ty=Tensor[(10, 1, 3), int32] */;
    %541 = reshape(%538, newshape=[10, 13, 3]) /* ty=Tensor[(10, 13, 3), int32] */;
    %542 = reshape(%539, newshape=[10, 13, 3]) /* ty=Tensor[(10, 13, 3), int32] */;
    %543 = @func_5728(%540, %541, %542) /* ty=(Tensor[(10, 13, 3), int8], Tensor[(10, 1, 3), float64]) */;
    %544 = cast(%528, dtype="float32") /* ty=Tensor[(12, 7, 4), float32] */;
    %545 = reshape(%544, newshape=[12, 7, 4]) /* ty=Tensor[(12, 7, 4), float32] */;
    %546 = cast(meta[relay.Constant][43] /* ty=Tensor[(36, 24), float32] */, dtype="float32") /* ty=Tensor[(36, 24), float32] */;
    %547 = cast(meta[relay.Constant][43] /* ty=Tensor[(36, 24), float32] */, dtype="float32") /* ty=Tensor[(36, 24), float32] */;
    %548 = reshape(%546, newshape=[12, 9, 8]) /* ty=Tensor[(12, 9, 8), float32] */;
    %549 = reshape(%547, newshape=[12, 9, 8]) /* ty=Tensor[(12, 9, 8), float32] */;
    %550 = @func_658(%548, %549) /* ty=(Tensor[(12, 9, 8), int8], Tensor[(6, 9, 13), float64], Tensor[(702), float64]) */;
    %551 = cast(%var_6566, dtype="int16") /* ty=Tensor[(78), int16] */;
    %552 = cast(meta[relay.Constant][44] /* ty=Tensor[(1092), int16] */, dtype="int16") /* ty=Tensor[(1092), int16] */;
    %553 = reshape(%551, newshape=[1, 13, 6]) /* ty=Tensor[(1, 13, 6), int16] */;
    %554 = reshape(%552, newshape=[14, 13, 6]) /* ty=Tensor[(14, 13, 6), int16] */;
    %555 = cast(%var_6481, dtype="float32") /* ty=Tensor[(1, 1, 12), float32] */;
    %556 = atan(%555) /* ty=Tensor[(1, 1, 12), float32] */;
    %557 = cast(%var_6481, dtype="bool") /* ty=Tensor[(1, 1, 12), bool] */;
    %558 = shape_of(%556, dtype="int32") /* ty=Tensor[(3), int32] */;
    %559 = cast(%556, dtype="bool") /* ty=Tensor[(1, 1, 12), bool] */;
    %560 = dyn.reshape(%557, %558, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %561 = logical_and(%559, %560) /* ty=Tensor[(?, ?, 12), bool] */;
    %562 = cast(%561, dtype="float64") /* ty=Tensor[(?, ?, 12), float64] */;
    %563 = cosh(%562) /* ty=Tensor[(?, ?, 12), float64] */;
    %564 = cast(%556, dtype="bool") /* ty=Tensor[(1, 1, 12), bool] */;
    %565 = shape_of(%563, dtype="int32") /* ty=Tensor[(3), int32] */;
    %566 = cast(%563, dtype="bool") /* ty=Tensor[(?, ?, 12), bool] */;
    %567 = dyn.reshape(%564, %565, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %568 = greater(%566, %567) /* ty=Tensor[(?, ?, 12), bool] */;
    %569 = cast(%568, dtype="int8") /* ty=Tensor[(?, ?, 12), int8] */;
    %570 = cast(meta[relay.Constant][45] /* ty=Tensor[(13, 15, 12), bool] */, dtype="int8") /* ty=Tensor[(13, 15, 12), int8] */;
    %571 = cast(%var_6481, dtype="float32") /* ty=Tensor[(1, 1, 12), float32] */;
    %572 = log10(%571) /* ty=Tensor[(1, 1, 12), float32] */;
    %573 = cast(%572, dtype="bool") /* ty=Tensor[(1, 1, 12), bool] */;
    %574 = shape_of(%568, dtype="int32") /* ty=Tensor[(3), int32] */;
    %575 = cast(%568, dtype="bool") /* ty=Tensor[(?, ?, 12), bool] */;
    %576 = dyn.reshape(%573, %574, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %577 = cast(%556, dtype="bool") /* ty=Tensor[(1, 1, 12), bool] */;
    %578 = cast(meta[relay.Constant][45] /* ty=Tensor[(13, 15, 12), bool] */, dtype="bool") /* ty=Tensor[(13, 15, 12), bool] */;
    %579 = %536.3;
    %580 = %543.0;
    %581 = @func_3792(%545) /* ty=Tensor[(12, 7, 4), float32] */;
    %582 = %550.1;
    %583 = @func_1276(%553, %554) /* ty=Tensor[(14, 13, 6), int16] */;
    %584 = bitwise_xor(%569, %570) /* ty=Tensor[(13, 15, 12), int8] */;
    %585 = logical_or(%575, %576) /* ty=Tensor[(?, ?, 12), bool] */;
    %586 = greater_equal(%577, %578) /* ty=Tensor[(13, 15, 12), bool] */;
    (%528, %var_6499, %579, %var_6511, %var_6512, meta[relay.Constant][42] /* ty=Tensor[(200), int64] */, %580, %var_6520, %var_6521, %581, %582, meta[relay.Constant][43] /* ty=Tensor[(36, 24), float32] */, %583, %var_6566, meta[relay.Constant][44] /* ty=Tensor[(1092), int16] */, %584, %585, %586)
  };
  %587(%var_6607, %var_6608, %var_6609, %var_6610, %var_6611, %var_6612, %var_6613) /* ty=(Tensor[(12, 7, 4), float32], Tensor[(336), float32], int64, Tensor[(180), float32], int64, Tensor[(200), int64], Tensor[(10, 13, 3), int8], Tensor[(30), int32], Tensor[(390), int32], Tensor[(12, 7, 4), float32], Tensor[(6, 9, 13), float64], Tensor[(36, 24), float32], Tensor[(14, 13, 6), int16], Tensor[(78), int16], Tensor[(1092), int16], Tensor[(13, 15, 12), int8], Tensor[(?, ?, 12), bool], Tensor[(13, 15, 12), bool]) */
}

def @func_8775() -> (Tensor[(11, 5, 4), float64],) {
  @func_8773() /* ty=(Tensor[(11, 5, 4), float64],) */
}

def @func_9047() -> Tensor[(11, 5, 4), float64] {
  @func_9045() /* ty=Tensor[(11, 5, 4), float64] */
}

def @func_9010() -> Tensor[(11, 5, 4), float64] {
  %590 = fn () -> Tensor[(11, 5, 4), float64] {
    %588 = @func_8301() /* ty=Tensor[(11, 5, 4), float64] */;
    %589 = cast(%588, dtype="float64") /* ty=Tensor[(11, 5, 4), float64] */;
    log2(%589) /* ty=Tensor[(11, 5, 4), float64] */
  };
  %590() /* ty=Tensor[(11, 5, 4), float64] */
}

def @func_9632() -> Tensor[(11, 5, 4), float64] {
  @func_9630() /* ty=Tensor[(11, 5, 4), float64] */
}

def @func_8803() -> Tensor[(11, 5, 4), float64] {
  @func_8301() /* ty=Tensor[(11, 5, 4), float64] */
}

def @func_7928(%var_7891: Tensor[(16, 12, 11), float64], %var_7904: Tensor[(180), float32]) -> (Tensor[(16, 12, 11), float32], Tensor[(10, 4, 5), int64], Tensor[(180), float32], Tensor[(8, 42), float32], int64, Tensor[(200), int64], Tensor[(16, 12, 11), float32]) {
  %591 = cast(%var_7891, dtype="float64") /* ty=Tensor[(16, 12, 11), float64] */;
  %592 = exp(%591) /* ty=Tensor[(16, 12, 11), float64] */;
  %593 = cast(%592, dtype="float32") /* ty=Tensor[(16, 12, 11), float32] */;
  %594 = cast(%var_7904, dtype="float32") /* ty=Tensor[(180), float32] */;
  %595 = cast(meta[relay.Constant][46] /* ty=Tensor[(8, 42), float32] */, dtype="float32") /* ty=Tensor[(8, 42), float32] */;
  %596 = cast(-6 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %597 = cast(meta[relay.Constant][47] /* ty=Tensor[(200), int64] */, dtype="int64") /* ty=Tensor[(200), int64] */;
  %598 = reshape(%594, newshape=[9, 5, 4]) /* ty=Tensor[(9, 5, 4), float32] */;
  %599 = reshape(%595, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %600 = reshape(%596, newshape=[]) /* ty=int64 */;
  %601 = reshape(%597, newshape=[200]) /* ty=Tensor[(200), int64] */;
  %602 = @func_4243(%598, %599, %600, %601) /* ty=(Tensor[(12, 7, 4), float32], Tensor[(336), float32], Tensor[(10, 4, 5), int64], int64, Tensor[(200), int64], Tensor[(7, 14, 10), float64], Tensor[(980), float64], Tensor[(9, 5, 4), float32]) */;
  %603 = cast(%var_7891, dtype="float32") /* ty=Tensor[(16, 12, 11), float32] */;
  %604 = sinh(%593) /* ty=Tensor[(16, 12, 11), float32] */;
  %605 = %602.2;
  %606 = sin(%603) /* ty=Tensor[(16, 12, 11), float32] */;
  (%604, %605, %var_7904, meta[relay.Constant][46] /* ty=Tensor[(8, 42), float32] */, -6 /* ty=int64 */, meta[relay.Constant][47] /* ty=Tensor[(200), int64] */, %606)
}

def @func_8681(%var_8677: Tensor[(15, 11, 2), int16], %var_8678: Tensor[(560, 2), float32], %var_8679: Tensor[(210), float64], %var_8680: Tensor[(200), int64]) -> (Tensor[(15, 11, 2), float32], Tensor[(15, 11, 2), float32], Tensor[(11, 5, 4), float64], Tensor[(15, 11, 2), bool], Tensor[(5, 16, 14), float32], Tensor[(560, 2), float32], Tensor[(15, 11, 2), float32], Tensor[(15, 11, 2), uint32], Tensor[(7, 10, 3), bool], Tensor[(210), float64], Tensor[(10, 5, 8), bool], Tensor[(400), bool], Tensor[(10, 4, 5), int64], int64, Tensor[(200), int64]) {
  %653 = fn (%var_8515: Tensor[(15, 11, 2), int16], %var_8580: Tensor[(560, 2), float32], %var_8616: Tensor[(210), float64], %var_8651: Tensor[(200), int64]) -> (Tensor[(15, 11, 2), float32], Tensor[(15, 11, 2), float32], Tensor[(11, 5, 4), float64], Tensor[(15, 11, 2), bool], Tensor[(5, 16, 14), float32], Tensor[(560, 2), float32], Tensor[(15, 11, 2), float32], Tensor[(15, 11, 2), uint32], Tensor[(7, 10, 3), bool], Tensor[(210), float64], Tensor[(10, 5, 8), bool], Tensor[(400), bool], Tensor[(10, 4, 5), int64], int64, Tensor[(200), int64]) {
    %607 = cast(%var_8515, dtype="float32") /* ty=Tensor[(15, 11, 2), float32] */;
    %608 = cast(meta[relay.Constant][48] /* ty=Tensor[(1, 11, 2), int16] */, dtype="float32") /* ty=Tensor[(1, 11, 2), float32] */;
    %609 = cast(meta[relay.Constant][48] /* ty=Tensor[(1, 11, 2), int16] */, dtype="int16") /* ty=Tensor[(1, 11, 2), int16] */;
    %610 = cast(%var_8515, dtype="int16") /* ty=Tensor[(15, 11, 2), int16] */;
    %611 = subtract(%609, %610) /* ty=Tensor[(15, 11, 2), int16] */;
    %612 = cast(%611, dtype="float32") /* ty=Tensor[(15, 11, 2), float32] */;
    %613 = @func_7647() /* ty=(Tensor[(11, 5, 4), float64],) */;
    %614 = cast(%611, dtype="float64") /* ty=Tensor[(15, 11, 2), float64] */;
    %615 = acosh(%614) /* ty=Tensor[(15, 11, 2), float64] */;
    %616 = cast(%615, dtype="float32") /* ty=Tensor[(15, 11, 2), float32] */;
    %617 = atan(%616) /* ty=Tensor[(15, 11, 2), float32] */;
    %618 = cast(meta[relay.Constant][48] /* ty=Tensor[(1, 11, 2), int16] */, dtype="uint16") /* ty=Tensor[(1, 11, 2), uint16] */;
    %619 = cast(%611, dtype="uint16") /* ty=Tensor[(15, 11, 2), uint16] */;
    %620 = bitwise_and(%618, %619) /* ty=Tensor[(15, 11, 2), uint16] */;
    %621 = cast(%620, dtype="bool") /* ty=Tensor[(15, 11, 2), bool] */;
    %622 = shape_of(%617, dtype="int32") /* ty=Tensor[(3), int32] */;
    %623 = cast(%617, dtype="bool") /* ty=Tensor[(15, 11, 2), bool] */;
    %624 = dyn.reshape(%621, %622, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %625 = cast(%var_8580, dtype="float32") /* ty=Tensor[(560, 2), float32] */;
    %626 = reshape(%625, newshape=[5, 16, 14]) /* ty=Tensor[(5, 16, 14), float32] */;
    %627 = cast(%617, dtype="float32") /* ty=Tensor[(15, 11, 2), float32] */;
    %628 = cast(%615, dtype="uint32") /* ty=Tensor[(15, 11, 2), uint32] */;
    %629 = shape_of(%617, dtype="int32") /* ty=Tensor[(3), int32] */;
    %630 = cast(%617, dtype="uint32") /* ty=Tensor[(15, 11, 2), uint32] */;
    %631 = dyn.reshape(%628, %629, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %632 = cast(%var_8616, dtype="float64") /* ty=Tensor[(210), float64] */;
    %633 = reshape(%632, newshape=[7, 10, 3]) /* ty=Tensor[(7, 10, 3), float64] */;
    %634 = @func_3420(%633) /* ty=(Tensor[(7, 10, 3), bool],) */;
    %635 = cast(meta[relay.Constant][49] /* ty=Tensor[(400), bool] */, dtype="bool") /* ty=Tensor[(400), bool] */;
    %636 = reshape(%635, newshape=[10, 5, 8]) /* ty=Tensor[(10, 5, 8), bool] */;
    %637 = @func_2907(%636) /* ty=(Tensor[(10, 5, 8), bool], Tensor[(10, 5, 8), int16]) */;
    %638 = cast(1 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %639 = cast(%var_8651, dtype="int64") /* ty=Tensor[(200), int64] */;
    %640 = reshape(%638, newshape=[]) /* ty=int64 */;
    %641 = reshape(%639, newshape=[10, 4, 5]) /* ty=Tensor[(10, 4, 5), int64] */;
    %642 = @func_1528(%640, %641) /* ty=(Tensor[(10, 4, 5), int64],) */;
    %643 = add(%607, %608) /* ty=Tensor[(15, 11, 2), float32] */;
    %644 = sqrt(%612) /* ty=Tensor[(15, 11, 2), float32] */;
    %645 = %613.0;
    %646 = logical_or(%623, %624) /* ty=Tensor[(15, 11, 2), bool] */;
    %647 = @func_1076(%626) /* ty=Tensor[(5, 16, 14), float32] */;
    %648 = cos(%627) /* ty=Tensor[(15, 11, 2), float32] */;
    %649 = left_shift(%630, %631) /* ty=Tensor[(15, 11, 2), uint32] */;
    %650 = %634.0;
    %651 = %637.0;
    %652 = %642.0;
    (%643, %644, %645, %646, %647, %var_8580, %648, %649, %650, %var_8616, %651, meta[relay.Constant][49] /* ty=Tensor[(400), bool] */, %652, 1 /* ty=int64 */, %var_8651)
  };
  %653(%var_8677, %var_8678, %var_8679, %var_8680) /* ty=(Tensor[(15, 11, 2), float32], Tensor[(15, 11, 2), float32], Tensor[(11, 5, 4), float64], Tensor[(15, 11, 2), bool], Tensor[(5, 16, 14), float32], Tensor[(560, 2), float32], Tensor[(15, 11, 2), float32], Tensor[(15, 11, 2), uint32], Tensor[(7, 10, 3), bool], Tensor[(210), float64], Tensor[(10, 5, 8), bool], Tensor[(400), bool], Tensor[(10, 4, 5), int64], int64, Tensor[(200), int64]) */
}

def @func_10444() -> Tensor[(11, 5, 4), float64] {
  @func_10442() /* ty=Tensor[(11, 5, 4), float64] */
}

def @func_8420() -> (Tensor[(11, 5, 4), float64],) {
  %656 = fn () -> (Tensor[(11, 5, 4), float64],) {
    %654 = @func_7888() /* ty=(Tensor[(11, 5, 4), float64],) */;
    %655 = %654.0;
    (%655,)
  };
  %656() /* ty=(Tensor[(11, 5, 4), float64],) */
}

def @func_658(%var_613: Tensor[(12, 9, 8), float32], %var_614: Tensor[(12, 9, 8), float32]) -> (Tensor[(12, 9, 8), int8], Tensor[(6, 9, 13), float64], Tensor[(702), float64]) {
  %657 = cast(%var_614, dtype="float32") /* ty=Tensor[(12, 9, 8), float32] */;
  %658 = shape_of(%var_613, dtype="int32") /* ty=Tensor[(3), int32] */;
  %659 = cast(%var_613, dtype="float32") /* ty=Tensor[(12, 9, 8), float32] */;
  %660 = dyn.reshape(%657, %658, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %661 = floor_divide(%659, %660) /* ty=Tensor[(12, 9, 8), float32] */;
  %662 = cast(%var_613, dtype="int8") /* ty=Tensor[(12, 9, 8), int8] */;
  %663 = shape_of(%661, dtype="int32") /* ty=Tensor[(3), int32] */;
  %664 = cast(%661, dtype="int8") /* ty=Tensor[(12, 9, 8), int8] */;
  %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %666 = cast(meta[relay.Constant][50] /* ty=Tensor[(702), float64] */, dtype="float64") /* ty=Tensor[(702), float64] */;
  %667 = reshape(%666, newshape=[6, 9, 13]) /* ty=Tensor[(6, 9, 13), float64] */;
  %668 = @func_115(%667) /* ty=(Tensor[(6, 9, 13), float64], Tensor[(6, 9, 13), float64]) */;
  %669 = bitwise_xor(%664, %665) /* ty=Tensor[(12, 9, 8), int8] */;
  %670 = %668.0;
  (%669, %670, meta[relay.Constant][50] /* ty=Tensor[(702), float64] */)
}

def @func_7576(%var_7571: Tensor[(11, 10, 16), int32], %var_7572: Tensor[(11, 10, 16), int32], %var_7573: Tensor[(336, 1), int8], %var_7574: Tensor[(117), int32], %var_7575: Tensor[(144), bool]) -> (Tensor[(11, 10, 16), bool], Tensor[(6, 9, 13), uint64], Tensor[(117), int32], Tensor[(144), bool], Tensor[(11, 10, 16), bool], Tensor[(336, 1), bool], Tensor[(10, 13, 3), int8], Tensor[(12), float32], Tensor[(180), float32], Tensor[(30), int32], Tensor[(390, 1), int32], Tensor[(78), int16], Tensor[(117), uint16]) {
  %738 = fn (%var_7456: Tensor[(11, 10, 16), int32], %var_7457: Tensor[(11, 10, 16), int32], %var_7524: Tensor[(336, 1), int8], %var_7526: Tensor[(117), int32], %var_7529: Tensor[(144), bool]) -> (Tensor[(11, 10, 16), bool], Tensor[(6, 9, 13), uint64], Tensor[(117), int32], Tensor[(144), bool], Tensor[(11, 10, 16), bool], Tensor[(336, 1), bool], Tensor[(10, 13, 3), int8], Tensor[(12), float32], Tensor[(180), float32], Tensor[(30), int32], Tensor[(390, 1), int32], Tensor[(78), int16], Tensor[(117), uint16]) {
    %671 = cast(%var_7457, dtype="bool") /* ty=Tensor[(11, 10, 16), bool] */;
    %672 = shape_of(%var_7456, dtype="int32") /* ty=Tensor[(3), int32] */;
    %673 = cast(%var_7456, dtype="bool") /* ty=Tensor[(11, 10, 16), bool] */;
    %674 = dyn.reshape(%671, %672, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %675 = cast(meta[relay.Constant][51] /* ty=Tensor[(3, 234), float64] */, dtype="float64") /* ty=Tensor[(3, 234), float64] */;
    %676 = reshape(%675, newshape=[6, 9, 13]) /* ty=Tensor[(6, 9, 13), float64] */;
    %677 = @func_115(%676) /* ty=(Tensor[(6, 9, 13), float64], Tensor[(6, 9, 13), float64]) */;
    %678 = %677.0;
    %679 = cast(meta[relay.Constant][51] /* ty=Tensor[(3, 234), float64] */, dtype="uint64") /* ty=Tensor[(3, 234), uint64] */;
    %680 = shape_of(%678, dtype="int32") /* ty=Tensor[(3), int32] */;
    %681 = cast(%678, dtype="uint64") /* ty=Tensor[(6, 9, 13), uint64] */;
    %682 = dyn.reshape(%679, %680, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %683 = cast(%var_7529, dtype="bool") /* ty=Tensor[(144), bool] */;
    %684 = cast(%var_7529, dtype="bool") /* ty=Tensor[(144), bool] */;
    %685 = cast(%var_7524, dtype="int8") /* ty=Tensor[(336, 1), int8] */;
    %686 = cast(%var_7524, dtype="int8") /* ty=Tensor[(336, 1), int8] */;
    %687 = cast(7 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %688 = cast(%var_7526, dtype="int32") /* ty=Tensor[(117), int32] */;
    %689 = reshape(%685, newshape=[12, 14, 2]) /* ty=Tensor[(12, 14, 2), int8] */;
    %690 = reshape(%686, newshape=[12, 14, 2]) /* ty=Tensor[(12, 14, 2), int8] */;
    %691 = reshape(%687, newshape=[]) /* ty=int32 */;
    %692 = reshape(%688, newshape=[117]) /* ty=Tensor[(117), int32] */;
    %693 = @func_2512(%689, %690, %691, %692) /* ty=(Tensor[(12, 14, 2), int8], Tensor[(1, 13, 9), bool], int32, Tensor[(117), int32]) */;
    %694 = %693.2;
    %695 = cast(%694, dtype="int32") /* ty=int32 */;
    %696 = cast(%var_7526, dtype="int32") /* ty=Tensor[(117), int32] */;
    %697 = reshape(%683, newshape=[4, 12, 3]) /* ty=Tensor[(4, 12, 3), bool] */;
    %698 = reshape(%684, newshape=[4, 12, 3]) /* ty=Tensor[(4, 12, 3), bool] */;
    %699 = reshape(%695, newshape=[]) /* ty=int32 */;
    %700 = reshape(%696, newshape=[117]) /* ty=Tensor[(117), int32] */;
    %701 = @func_1891(%697, %698, %699, %700) /* ty=(Tensor[(4, 12, 3), bool], Tensor[(1, 13, 9), bool], int32, Tensor[(117), int32]) */;
    %702 = cast(%var_7457, dtype="float64") /* ty=Tensor[(11, 10, 16), float64] */;
    %703 = acos(%702) /* ty=Tensor[(11, 10, 16), float64] */;
    %704 = cast(%var_7456, dtype="float64") /* ty=Tensor[(11, 10, 16), float64] */;
    %705 = tan(%704) /* ty=Tensor[(11, 10, 16), float64] */;
    %706 = cast(%705, dtype="bool") /* ty=Tensor[(11, 10, 16), bool] */;
    %707 = shape_of(%703, dtype="int32") /* ty=Tensor[(3), int32] */;
    %708 = cast(%703, dtype="bool") /* ty=Tensor[(11, 10, 16), bool] */;
    %709 = dyn.reshape(%706, %707, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %710 = cast(%var_7524, dtype="bool") /* ty=Tensor[(336, 1), bool] */;
    %711 = cast(%694, dtype="bool") /* ty=bool */;
    %712 = cast(meta[relay.Constant][52] /* ty=Tensor[(12), float32] */, dtype="float32") /* ty=Tensor[(12), float32] */;
    %713 = logical_and(%710, %711) /* ty=Tensor[(336, 1), bool] */;
    %714 = cast(%713, dtype="float32") /* ty=Tensor[(336, 1), float32] */;
    %715 = cast(meta[relay.Constant][53] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
    %716 = cast(7 /* ty=int32 */, dtype="int64") /* ty=int64 */;
    %717 = cast(meta[relay.Constant][54] /* ty=Tensor[(30), int32] */, dtype="int32") /* ty=Tensor[(30), int32] */;
    %718 = cast(meta[relay.Constant][55] /* ty=Tensor[(390, 1), int32] */, dtype="int32") /* ty=Tensor[(390, 1), int32] */;
    %719 = cast(meta[relay.Constant][56] /* ty=Tensor[(78), int16] */, dtype="int16") /* ty=Tensor[(78), int16] */;
    %720 = reshape(%712, newshape=[1, 1, 12]) /* ty=Tensor[(1, 1, 12), float32] */;
    %721 = reshape(%714, newshape=[336]) /* ty=Tensor[(336), float32] */;
    %722 = reshape(%715, newshape=[180]) /* ty=Tensor[(180), float32] */;
    %723 = reshape(%716, newshape=[]) /* ty=int64 */;
    %724 = reshape(%717, newshape=[30]) /* ty=Tensor[(30), int32] */;
    %725 = reshape(%718, newshape=[390]) /* ty=Tensor[(390), int32] */;
    %726 = reshape(%719, newshape=[78]) /* ty=Tensor[(78), int16] */;
    %727 = @func_6606(%720, %721, %722, %723, %724, %725, %726) /* ty=(Tensor[(12, 7, 4), float32], Tensor[(336), float32], int64, Tensor[(180), float32], int64, Tensor[(200), int64], Tensor[(10, 13, 3), int8], Tensor[(30), int32], Tensor[(390), int32], Tensor[(12, 7, 4), float32], Tensor[(6, 9, 13), float64], Tensor[(36, 24), float32], Tensor[(14, 13, 6), int16], Tensor[(78), int16], Tensor[(1092), int16], Tensor[(13, 15, 12), int8], Tensor[(?, ?, 12), bool], Tensor[(13, 15, 12), bool]) */;
    %728 = cast(%var_7526, dtype="float64") /* ty=Tensor[(117), float64] */;
    %729 = atan(%728) /* ty=Tensor[(117), float64] */;
    %730 = cast(%729, dtype="uint16") /* ty=Tensor[(117), uint16] */;
    %731 = cast(7 /* ty=int32 */, dtype="uint16") /* ty=uint16 */;
    %732 = greater(%673, %674) /* ty=Tensor[(11, 10, 16), bool] */;
    %733 = left_shift(%681, %682) /* ty=Tensor[(6, 9, 13), uint64] */;
    %734 = %701.3;
    %735 = greater_equal(%708, %709) /* ty=Tensor[(11, 10, 16), bool] */;
    %736 = %727.6;
    %737 = bitwise_or(%730, %731) /* ty=Tensor[(117), uint16] */;
    (%732, %733, %734, %var_7529, %735, %713, %736, meta[relay.Constant][52] /* ty=Tensor[(12), float32] */, meta[relay.Constant][53] /* ty=Tensor[(180), float32] */, meta[relay.Constant][54] /* ty=Tensor[(30), int32] */, meta[relay.Constant][55] /* ty=Tensor[(390, 1), int32] */, meta[relay.Constant][56] /* ty=Tensor[(78), int16] */, %737)
  };
  %738(%var_7571, %var_7572, %var_7573, %var_7574, %var_7575) /* ty=(Tensor[(11, 10, 16), bool], Tensor[(6, 9, 13), uint64], Tensor[(117), int32], Tensor[(144), bool], Tensor[(11, 10, 16), bool], Tensor[(336, 1), bool], Tensor[(10, 13, 3), int8], Tensor[(12), float32], Tensor[(180), float32], Tensor[(30), int32], Tensor[(390, 1), int32], Tensor[(78), int16], Tensor[(117), uint16]) */
}

def @func_9402() -> (Tensor[(11, 5, 4), float64], Tensor[(11, 5, 4), float64]) {
  @func_9400() /* ty=(Tensor[(11, 5, 4), float64], Tensor[(11, 5, 4), float64]) */
}

def @func_10147() -> Tensor[(11, 5, 4), float64] {
  @func_10145() /* ty=Tensor[(11, 5, 4), float64] */
}

def @func_3423(%var_3421: Tensor[(7, 10, 3), float64]) -> (Tensor[(7, 10, 3), bool],) {
  @func_3420(%var_3421) /* ty=(Tensor[(7, 10, 3), bool],) */
}

def @func_9831() -> Tensor[(11, 5, 4), float64] {
  @func_9829() /* ty=Tensor[(11, 5, 4), float64] */
}

def @func_8953() -> (Tensor[(11, 5, 4), float64],) {
  @func_8951() /* ty=(Tensor[(11, 5, 4), float64],) */
}

def @func_1280(%var_1278: Tensor[(1, 13, 6), int16], %var_1279: Tensor[(14, 13, 6), int16]) -> Tensor[(14, 13, 6), int16] {
  @func_1276(%var_1278, %var_1279) /* ty=Tensor[(14, 13, 6), int16] */
}

def @func_8174() -> Tensor[(11, 5, 4), float64] {
  %739 = @func_7888() /* ty=(Tensor[(11, 5, 4), float64],) */;
  %739.0
}

def @func_8753(%var_8718: Tensor[(14, 16, 1), int8], %var_8719: Tensor[(14, 16, 13), int8], %var_8744: Tensor[(14, 16, 1), int8]) -> (Tensor[(14, 16, 13), int8], Tensor[(14, 16, 13), bool], Tensor[(14, 16, ?), bool]) {
  %740 = cast(%var_8718, dtype="int8") /* ty=Tensor[(14, 16, 1), int8] */;
  %741 = cast(%var_8719, dtype="int8") /* ty=Tensor[(14, 16, 13), int8] */;
  %742 = cast(%var_8719, dtype="bool") /* ty=Tensor[(14, 16, 13), bool] */;
  %743 = cast(%var_8718, dtype="bool") /* ty=Tensor[(14, 16, 1), bool] */;
  %744 = cast(%var_8744, dtype="bool") /* ty=Tensor[(14, 16, 1), bool] */;
  %745 = shape_of(%var_8718, dtype="int32") /* ty=Tensor[(3), int32] */;
  %746 = cast(%var_8718, dtype="bool") /* ty=Tensor[(14, 16, 1), bool] */;
  %747 = dyn.reshape(%744, %745, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %748 = subtract(%740, %741) /* ty=Tensor[(14, 16, 13), int8] */;
  %749 = equal(%742, %743) /* ty=Tensor[(14, 16, 13), bool] */;
  %750 = greater_equal(%746, %747) /* ty=Tensor[(14, 16, ?), bool] */;
  (%748, %749, %750)
}

def @func_1276(%var_1264: Tensor[(1, 13, 6), int16], %var_1265: Tensor[(14, 13, 6), int16]) -> Tensor[(14, 13, 6), int16] {
  %751 = cast(%var_1264, dtype="int16") /* ty=Tensor[(1, 13, 6), int16] */;
  %752 = cast(%var_1265, dtype="int16") /* ty=Tensor[(14, 13, 6), int16] */;
  bitwise_or(%751, %752) /* ty=Tensor[(14, 13, 6), int16] */
}

def @func_9045() -> Tensor[(11, 5, 4), float64] {
  @func_8242() /* ty=Tensor[(11, 5, 4), float64] */
}

def @func_9484(%var_9481: Tensor[(10, 2, 2), float64]) -> (Tensor[(10, 2, 2), float64],) {
  %753 = cast(%var_9481, dtype="float64") /* ty=Tensor[(10, 2, 2), float64] */;
  %754 = asin(%753) /* ty=Tensor[(10, 2, 2), float64] */;
  (%754,)
}

def @func_7649() -> (Tensor[(11, 5, 4), float64],) {
  @func_7647() /* ty=(Tensor[(11, 5, 4), float64],) */
}

def @func_7890() -> (Tensor[(11, 5, 4), float64],) {
  @func_7888() /* ty=(Tensor[(11, 5, 4), float64],) */
}

def @func_9150() -> Tensor[(11, 5, 4), float64] {
  %756 = fn () -> Tensor[(11, 5, 4), float64] {
    %755 = @func_8773() /* ty=(Tensor[(11, 5, 4), float64],) */;
    %755.0
  };
  %756() /* ty=Tensor[(11, 5, 4), float64] */
}

def @func_8951() -> (Tensor[(11, 5, 4), float64],) {
  %757 = @func_7888() /* ty=(Tensor[(11, 5, 4), float64],) */;
  %758 = %757.0;
  (%758,)
}

def @func_9121() -> (Tensor[(11, 5, 4), float64], Tensor[(12, 9, 8), int8], Tensor[(864), float32]) {
  %759 = @func_8279() /* ty=(Tensor[(11, 5, 4), float64],) */;
  %760 = cast(meta[relay.Constant][57] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %761 = cast(meta[relay.Constant][57] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %762 = reshape(%760, newshape=[12, 9, 8]) /* ty=Tensor[(12, 9, 8), float32] */;
  %763 = reshape(%761, newshape=[12, 9, 8]) /* ty=Tensor[(12, 9, 8), float32] */;
  %764 = @func_658(%762, %763) /* ty=(Tensor[(12, 9, 8), int8], Tensor[(6, 9, 13), float64], Tensor[(702), float64]) */;
  %765 = %759.0;
  %766 = %764.0;
  (%765, %766, meta[relay.Constant][57] /* ty=Tensor[(864), float32] */)
}

def @func_8354() -> (Tensor[(11, 5, 4), float64], Tensor[(78), int16], Tensor[(14, 13, 6), int16]) {
  @func_8352() /* ty=(Tensor[(11, 5, 4), float64], Tensor[(78), int16], Tensor[(14, 13, 6), int16]) */
}

def @func_2366(%var_2364: Tensor[(12, 4, 11), float64], %var_2365: Tensor[(12, 4, 11), float64]) -> (Tensor[(12, 4, 11), float64], Tensor[(10, 4, 5), int64], int64, Tensor[(200), int64]) {
  %780 = fn (%var_2316: Tensor[(12, 4, 11), float64], %var_2329: Tensor[(12, 4, 11), float64]) -> (Tensor[(12, 4, 11), float64], Tensor[(10, 4, 5), int64], int64, Tensor[(200), int64]) {
    %767 = cast(%var_2316, dtype="float64") /* ty=Tensor[(12, 4, 11), float64] */;
    %768 = sin(%767) /* ty=Tensor[(12, 4, 11), float64] */;
    %769 = cast(%var_2329, dtype="float64") /* ty=Tensor[(12, 4, 11), float64] */;
    %770 = shape_of(%768, dtype="int32") /* ty=Tensor[(3), int32] */;
    %771 = cast(%768, dtype="float64") /* ty=Tensor[(12, 4, 11), float64] */;
    %772 = dyn.reshape(%769, %770, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %773 = cast(3 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %774 = cast(meta[relay.Constant][58] /* ty=Tensor[(200), int64] */, dtype="int64") /* ty=Tensor[(200), int64] */;
    %775 = reshape(%773, newshape=[]) /* ty=int64 */;
    %776 = reshape(%774, newshape=[10, 4, 5]) /* ty=Tensor[(10, 4, 5), int64] */;
    %777 = @func_1528(%775, %776) /* ty=(Tensor[(10, 4, 5), int64],) */;
    %778 = floor_mod(%771, %772) /* ty=Tensor[(12, 4, 11), float64] */;
    %779 = %777.0;
    (%778, %779, 3 /* ty=int64 */, meta[relay.Constant][58] /* ty=Tensor[(200), int64] */)
  };
  %780(%var_2364, %var_2365) /* ty=(Tensor[(12, 4, 11), float64], Tensor[(10, 4, 5), int64], int64, Tensor[(200), int64]) */
}

def @func_3884(%var_3877: Tensor[(10, 10, 1), int16]) -> Tensor[(10, 10, 1), int16] {
  %781 = cast(meta[relay.Constant][59] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %782 = cast(%var_3877, dtype="int16") /* ty=Tensor[(10, 10, 1), int16] */;
  left_shift(%781, %782) /* ty=Tensor[(10, 10, 1), int16] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen452/build/output.py:1816: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen452/build/output.py:1821: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='cuda')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen452/build/output.py:1850: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen452/build/output.py:1855: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='cuda')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen452/build/output.py:1860: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mutated_mod, target='llvm')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen452/build/output.py:1865: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mutated_mod, target='cuda')

===================================
#[version = "0.0.5"]
type GradCell[T] {
  Raw(T),
  One(fn () -> T),
  Zero(fn () -> T),
}

def @FromGradCell[T](%g: GradCell[T]) -> T {
  match (%g) {
    Raw(%x: T) => {
      %x
    },
    One(%x1: fn () -> T) => {
      %x1() /* ty=T */
    },
    Zero(%x2: fn () -> T) => {
      %x2() /* ty=T */
    },
  }
}

def @main() -> ((Tensor[(14, 8, 8), float64],), ()) {
  %0 = (meta[relay.Constant][0] /* ty=Tensor[(14, 8, 8), float64] */,);
  %1 = ();
  (%0, %1)
}

def @MultiplyGradCell[T](%multiply: fn (T, T) -> T, %l: GradCell[T], %r: GradCell[T]) -> GradCell[T] {
  %2 = (%l, %r);
  match (%2) {
    (Zero(_), _) => {
      %l
    },
    (_, Zero(_)) => {
      %r
    },
    (One(_), _) => {
      %r
    },
    (_, One(_)) => {
      %l
    },
    _ => {
      %3 = match (%l) {
        Raw(%x3: T) => {
          %x3
        },
        One(%x4: fn () -> T) => {
          %x4() /* ty=T */
        },
        Zero(%x5: fn () -> T) => {
          %x5() /* ty=T */
        },
      };
      %4 = match (%r) {
        Raw(%x6: T) => {
          %x6
        },
        One(%x7: fn () -> T) => {
          %x7() /* ty=T */
        },
        Zero(%x8: fn () -> T) => {
          %x8() /* ty=T */
        },
      };
      %5 = %multiply(%3, %4) /* ty=T */;
      Raw(%5) /* ty=GradCell[T] */
    },
  }
}

def @AddGradCell[T](%add: fn (T, T) -> T, %l1: GradCell[T], %r1: GradCell[T]) -> GradCell[T] {
  %6 = (%l1, %r1);
  match (%6) {
    (Zero(_), _) => {
      %r1
    },
    (_, Zero(_)) => {
      %l1
    },
    _ => {
      %7 = match (%l1) {
        Raw(%x9: T) => {
          %x9
        },
        One(%x10: fn () -> T) => {
          %x10() /* ty=T */
        },
        Zero(%x11: fn () -> T) => {
          %x11() /* ty=T */
        },
      };
      %8 = match (%r1) {
        Raw(%x12: T) => {
          %x12
        },
        One(%x13: fn () -> T) => {
          %x13() /* ty=T */
        },
        Zero(%x14: fn () -> T) => {
          %x14() /* ty=T */
        },
      };
      %9 = %add(%7, %8) /* ty=T */;
      Raw(%9) /* ty=GradCell[T] */
    },
  }
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
