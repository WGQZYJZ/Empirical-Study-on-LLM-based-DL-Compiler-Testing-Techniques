==========mod==========
#[version = "0.0.5"]
def @func_5977() -> (Tensor[(14, 7, 10), float64], Tensor[(14, 7, 10), bool]) {
  %0 = @func_3538() /* ty=(Tensor[(14, 7, 10), float64],) */;
  %1 = %0.0;
  %2 = @func_3322() /* ty=Tensor[(14, 7, 10), bool] */;
  (%1, %2)
}

def @func_11191(%var_11169: Tensor[(540), bool]) -> (Tensor[(182), float64], Tensor[(6, 6, 15), bool], Tensor[(540), bool], Tensor[(14, 7, 10), uint64]) {
  %3 = cast(%var_11169, dtype="bool") /* ty=Tensor[(540), bool] */;
  %4 = reshape(%3, newshape=[6, 6, 15]) /* ty=Tensor[(6, 6, 15), bool] */;
  %5 = @func_4376(%4) /* ty=(Tensor[(6, 6, 15), bool],) */;
  %6 = @func_6658() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %7 = @func_1808() /* ty=Tensor[(182), float64] */;
  %8 = %5.0;
  %9 = %6.0;
  (%7, %8, %var_11169, %9)
}

def @func_6970() -> (Tensor[(182), float64],) {
  %10 = @func_1041() /* ty=Tensor[(182), float64] */;
  (%10,)
}

def @func_6245() -> (Tensor[(4, 15, 5), uint8], Tensor[(14, 7, 10), bool], Tensor[(8, 2, 11), float32], float32, Tensor[(176), float32]) {
  %11 = @func_2925() /* ty=(Tensor[(4, 15, 5), uint8], Tensor[(182), float32]) */;
  %12 = @func_1157() /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), bool]) */;
  %13 = cast(0.58269f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %14 = cast(meta[relay.Constant][0] /* ty=Tensor[(176), float32] */, dtype="float32") /* ty=Tensor[(176), float32] */;
  %15 = reshape(%13, newshape=[]) /* ty=float32 */;
  %16 = reshape(%14, newshape=[8, 2, 11]) /* ty=Tensor[(8, 2, 11), float32] */;
  %17 = %11.0;
  %18 = %12.1;
  %19 = @func_3449(%15, %16) /* ty=Tensor[(8, 2, 11), float32] */;
  (%17, %18, %19, 0.58269f /* ty=float32 */, meta[relay.Constant][0] /* ty=Tensor[(176), float32] */)
}

def @func_11937(%var_11919: Tensor[(7, 8, 9), uint8], %var_11920: Tensor[(7, 8, 9), uint8], %var_11931: Tensor[(7, 8, 9), uint8]) -> (Tensor[(7, 8, 9), uint8], Tensor[(7, 8, 9), bool]) {
  %20 = cast(%var_11920, dtype="uint8") /* ty=Tensor[(7, 8, 9), uint8] */;
  %21 = shape_of(%var_11919, dtype="int32") /* ty=Tensor[(3), int32] */;
  %22 = cast(%var_11919, dtype="uint8") /* ty=Tensor[(7, 8, 9), uint8] */;
  %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %24 = cast(%var_11931, dtype="bool") /* ty=Tensor[(7, 8, 9), bool] */;
  %25 = shape_of(%var_11920, dtype="int32") /* ty=Tensor[(3), int32] */;
  %26 = cast(%var_11920, dtype="bool") /* ty=Tensor[(7, 8, 9), bool] */;
  %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %28 = logical_xor(%22, %23) /* ty=Tensor[(7, 8, 9), uint8] */;
  %29 = logical_or(%26, %27) /* ty=Tensor[(7, 8, 9), bool] */;
  (%28, %29)
}

def @func_8069(%var_8056: Tensor[(182), float32]) -> (Tensor[(182), bool], Tensor[(182), uint64]) {
  %30 = @func_4209() /* ty=Tensor[(182), float32] */;
  %31 = cast(%var_8056, dtype="bool") /* ty=Tensor[(182), bool] */;
  %32 = shape_of(%30, dtype="int32") /* ty=Tensor[(1), int32] */;
  %33 = cast(%30, dtype="bool") /* ty=Tensor[(182), bool] */;
  %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?), bool] */;
  %35 = cast(%var_8056, dtype="uint64") /* ty=Tensor[(182), uint64] */;
  %36 = shape_of(%30, dtype="int32") /* ty=Tensor[(1), int32] */;
  %37 = cast(%30, dtype="uint64") /* ty=Tensor[(182), uint64] */;
  %38 = dyn.reshape(%35, %36, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %39 = greater_equal(%33, %34) /* ty=Tensor[(182), bool] */;
  %40 = bitwise_or(%37, %38) /* ty=Tensor[(182), uint64] */;
  (%39, %40)
}

def @func_11582(%var_11567: Tensor[(4, 15, 5), uint8]) -> (Tensor[(4, 15, 5), bool],) {
  %41 = @func_10120() /* ty=(Tensor[(4, 15, 5), uint8],) */;
  %42 = %41.0;
  %43 = cast(%var_11567, dtype="bool") /* ty=Tensor[(4, 15, 5), bool] */;
  %44 = shape_of(%42, dtype="int32") /* ty=Tensor[(3), int32] */;
  %45 = cast(%42, dtype="bool") /* ty=Tensor[(4, 15, 5), bool] */;
  %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %47 = less_equal(%45, %46) /* ty=Tensor[(4, 15, 5), bool] */;
  (%47,)
}

def @func_5963() -> (Tensor[(182), float64], Tensor[(182), float64], Tensor[(14, 7, 10), float64]) {
  %48 = @func_1808() /* ty=Tensor[(182), float64] */;
  %49 = cast(%48, dtype="float64") /* ty=Tensor[(182), float64] */;
  %50 = reshape(%49, newshape=[182]) /* ty=Tensor[(182), float64] */;
  %51 = @func_2642() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %52 = %51.0;
  %53 = cast(%52, dtype="float64") /* ty=Tensor[(14, 7, 10), float64] */;
  %54 = @func_5432(%50) /* ty=Tensor[(182), float64] */;
  %55 = acosh(%53) /* ty=Tensor[(14, 7, 10), float64] */;
  (%48, %54, %55)
}

def @func_5229() -> (Tensor[(182), float64], Tensor[(16, 15, 14), int8], Tensor[(3360), int8], Tensor[(480, 2), int8], Tensor[(6, 6, 15), bool], Tensor[(540), bool]) {
  %56 = cast(meta[relay.Constant][1] /* ty=Tensor[(3360), int8] */, dtype="int8") /* ty=Tensor[(3360), int8] */;
  %57 = cast(meta[relay.Constant][2] /* ty=Tensor[(480, 2), int8] */, dtype="int8") /* ty=Tensor[(480, 2), int8] */;
  %58 = reshape(%56, newshape=[16, 15, 14]) /* ty=Tensor[(16, 15, 14), int8] */;
  %59 = reshape(%57, newshape=[16, 15, 4]) /* ty=Tensor[(16, 15, 4), int8] */;
  %60 = @func_2494(%58, %59) /* ty=(Tensor[(16, 15, 14), int8], Tensor[(16, 15, 4), bool], Tensor[(16, 15, 1), float64], Tensor[(14, 7, 10), uint64]) */;
  %61 = @func_1338() /* ty=Tensor[(182), float64] */;
  %62 = cast(%61, dtype="float64") /* ty=Tensor[(182), float64] */;
  %63 = cast(meta[relay.Constant][3] /* ty=Tensor[(540), bool] */, dtype="bool") /* ty=Tensor[(540), bool] */;
  %64 = reshape(%62, newshape=[182]) /* ty=Tensor[(182), float64] */;
  %65 = reshape(%63, newshape=[540]) /* ty=Tensor[(540), bool] */;
  %66 = @func_4890(%64, %65) /* ty=(Tensor[(182), bool], Tensor[(6, 6, 15), bool], Tensor[(540), bool], Tensor[(14, 7, 10), bool], Tensor[(14, 7, 10), bool]) */;
  %67 = %60.0;
  %68 = %66.1;
  (%61, %67, meta[relay.Constant][1] /* ty=Tensor[(3360), int8] */, meta[relay.Constant][2] /* ty=Tensor[(480, 2), int8] */, %68, meta[relay.Constant][3] /* ty=Tensor[(540), bool] */)
}

def @func_7441() -> (Tensor[(14, 7, 10), uint64], Tensor[(182), float64], Tensor[(182), uint64]) {
  %69 = @func_3193() /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), uint64]) */;
  %70 = @func_2901() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(182), uint64]) */;
  %71 = %69.1;
  %72 = @func_1338() /* ty=Tensor[(182), float64] */;
  %73 = %70.1;
  (%71, %72, %73)
}

def @func_1540(%var_1523: Tensor[(2730), int64]) -> (Tensor[(14, 7, 10), uint64], Tensor[(182), float64], int64, Tensor[(2730), int64]) {
  %74 = @func_830() /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), uint64]) */;
  %75 = cast(5 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %76 = cast(%var_1523, dtype="int64") /* ty=Tensor[(2730), int64] */;
  %77 = reshape(%75, newshape=[]) /* ty=int64 */;
  %78 = reshape(%76, newshape=[14, 13, 15]) /* ty=Tensor[(14, 13, 15), int64] */;
  %79 = @func_1067(%77, %78) /* ty=(Tensor[(14, 13, 15), int64], Tensor[(182), float64]) */;
  %80 = %74.1;
  %81 = %79.1;
  (%80, %81, 5 /* ty=int64 */, %var_1523)
}

def @func_1596() -> (Tensor[(14, 7, 10), uint64],) {
  %82 = @func_865() /* ty=Tensor[(14, 7, 10), uint64] */;
  (%82,)
}

def @func_7921() -> Tensor[(182), float64] {
  %83 = @func_3193() /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), uint64]) */;
  %83.0
}

def @func_8161() -> (Tensor[(182), float32], Tensor[(14, 7, 10), uint64]) {
  %84 = @func_7441() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(182), float64], Tensor[(182), uint64]) */;
  %85 = %84.1;
  %86 = cast(%85, dtype="float32") /* ty=Tensor[(182), float32] */;
  %87 = @func_5587() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %88 = acosh(%86) /* ty=Tensor[(182), float32] */;
  %89 = %87.0;
  (%88, %89)
}

def @func_9263() -> (Tensor[(182), float32], Tensor[(182), float32], Tensor[(14, 7, 10), uint8], Tensor[(1, 980), uint64], Tensor[(14, 7, 10), uint64]) {
  %90 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 980), uint64] */, dtype="uint64") /* ty=Tensor[(1, 980), uint64] */;
  %91 = reshape(%90, newshape=[14, 7, 10]) /* ty=Tensor[(14, 7, 10), uint64] */;
  %92 = @func_4209() /* ty=Tensor[(182), float32] */;
  %93 = @func_2362() /* ty=Tensor[(182), float32] */;
  %94 = @func_7028(%91) /* ty=Tensor[(14, 7, 10), uint8] */;
  %95 = @func_7529() /* ty=Tensor[(14, 7, 10), uint64] */;
  (%92, %93, %94, meta[relay.Constant][4] /* ty=Tensor[(1, 980), uint64] */, %95)
}

def @func_9494(%var_9486: Tensor[(12, 2, 4), float64]) -> Tensor[(12, 2, 4), float64] {
  %96 = cast(%var_9486, dtype="float64") /* ty=Tensor[(12, 2, 4), float64] */;
  cos(%96) /* ty=Tensor[(12, 2, 4), float64] */
}

def @func_8666() -> (Tensor[(182), int64],) {
  %97 = @func_2155() /* ty=(Tensor[(182), float32],) */;
  %98 = %97.0;
  %99 = cast(meta[relay.Constant][5] /* ty=Tensor[(182), float32] */, dtype="int64") /* ty=Tensor[(182), int64] */;
  %100 = shape_of(%98, dtype="int32") /* ty=Tensor[(1), int32] */;
  %101 = cast(%98, dtype="int64") /* ty=Tensor[(182), int64] */;
  %102 = dyn.reshape(%99, %100, newshape=[]) /* ty=Tensor[(?), int64] */;
  %103 = maximum(%101, %102) /* ty=Tensor[(182), int64] */;
  (%103,)
}

def @func_5028(%var_5014: Tensor[(7, 15, 12), uint64]) -> Tensor[(7, 15, 12), bool] {
  %104 = cast(%var_5014, dtype="bool") /* ty=Tensor[(7, 15, 12), bool] */;
  %105 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(7, 15, 12), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %106 = cast(meta[relay.Constant][6] /* ty=Tensor[(7, 15, 12), uint64] */, dtype="bool") /* ty=Tensor[(7, 15, 12), bool] */;
  %107 = dyn.reshape(%104, %105, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%106, %107) /* ty=Tensor[(7, 15, 12), bool] */
}

def @func_5942() -> (Tensor[(14, 7, 10), uint64], Tensor[(182), float64], Tensor[(14, 7, 10), uint64]) {
  %108 = @func_5315() /* ty=(Tensor[(182), float32],) */;
  %109 = %108.0;
  %110 = cast(%109, dtype="float64") /* ty=Tensor[(182), float64] */;
  %111 = @func_1483() /* ty=Tensor[(14, 7, 10), uint64] */;
  %112 = log2(%110) /* ty=Tensor[(182), float64] */;
  %113 = @func_5177() /* ty=Tensor[(14, 7, 10), uint64] */;
  (%111, %112, %113)
}

def @func_10175() -> (Tensor[(1560, 1), float64], Tensor[(14, 7, 10), uint64]) {
  %114 = @func_8778() /* ty=Tensor[(1560, 1), float64] */;
  %115 = @func_7903() /* ty=Tensor[(14, 7, 10), uint64] */;
  (%114, %115)
}

def @func_7529() -> Tensor[(14, 7, 10), uint64] {
  %116 = @func_1596() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %116.0
}

def @func_3864(%var_3856: Tensor[(16, 14, 6), uint64], %var_3857: Tensor[(16, 14, 6), uint64]) -> Tensor[(16, 14, 6), uint64] {
  %117 = cast(%var_3857, dtype="uint64") /* ty=Tensor[(16, 14, 6), uint64] */;
  %118 = shape_of(%var_3856, dtype="int32") /* ty=Tensor[(3), int32] */;
  %119 = cast(%var_3856, dtype="uint64") /* ty=Tensor[(16, 14, 6), uint64] */;
  %120 = dyn.reshape(%117, %118, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  left_shift(%119, %120) /* ty=Tensor[(16, 14, 6), uint64] */
}

def @func_6784() -> (Tensor[(14, 7, 10), float64], Tensor[(8, 2, 11), float32], float32, Tensor[(176), float32]) {
  %121 = @func_5977() /* ty=(Tensor[(14, 7, 10), float64], Tensor[(14, 7, 10), bool]) */;
  %122 = cast(8.01186f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %123 = cast(meta[relay.Constant][7] /* ty=Tensor[(176), float32] */, dtype="float32") /* ty=Tensor[(176), float32] */;
  %124 = reshape(%122, newshape=[]) /* ty=float32 */;
  %125 = reshape(%123, newshape=[8, 2, 11]) /* ty=Tensor[(8, 2, 11), float32] */;
  %126 = %121.0;
  %127 = @func_3449(%124, %125) /* ty=Tensor[(8, 2, 11), float32] */;
  (%126, %127, 8.01186f /* ty=float32 */, meta[relay.Constant][7] /* ty=Tensor[(176), float32] */)
}

def @func_9847() -> (Tensor[(14, 7, 10), uint64],) {
  %128 = @func_1662() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %129 = %128.0;
  (%129,)
}

def @func_7801(%var_7794: Tensor[(1, 9, 11), bool], %var_7795: Tensor[(1, 9, 11), bool]) -> (Tensor[(?, 9, 11), bool],) {
  %130 = cast(%var_7795, dtype="bool") /* ty=Tensor[(1, 9, 11), bool] */;
  %131 = shape_of(%var_7794, dtype="int32") /* ty=Tensor[(3), int32] */;
  %132 = cast(%var_7794, dtype="bool") /* ty=Tensor[(1, 9, 11), bool] */;
  %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %134 = logical_or(%132, %133) /* ty=Tensor[(?, 9, 11), bool] */;
  (%134,)
}

def @func_7837() -> Tensor[(14, 7, 10), float64] {
  %135 = @func_5963() /* ty=(Tensor[(182), float64], Tensor[(182), float64], Tensor[(14, 7, 10), float64]) */;
  %135.2
}

def @func_6860() -> (Tensor[(14, 7, 10), uint64],) {
  %136 = @func_2083() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %137 = %136.0;
  (%137,)
}

def @func_10947() -> Tensor[(14, 7, 10), uint64] {
  %138 = @func_2901() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(182), uint64]) */;
  %138.0
}

def @func_9866() -> (Tensor[(14, 7, 10), uint64],) {
  %139 = @func_8861() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), bool]) */;
  %140 = %139.1;
  (%140,)
}

def @func_10030(%var_9941: Tensor[(1560), float64], %var_9964: Tensor[(2730), int64]) -> (Tensor[(182), float64], Tensor[(14, 7, 10), uint64], Tensor[(12, 10, 3), uint64], Tensor[(3136), float64], Tensor[(14, 7, 10), uint64], Tensor[(2730), int64], Tensor[(182), float32], Tensor[(182), float32], Tensor[(1560), float32], Tensor[(182), float32], Tensor[(14, 7, 10), float32]) {
  %141 = @func_938() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %142 = cast(meta[relay.Constant][8] /* ty=Tensor[(3136), float64] */, dtype="float64") /* ty=Tensor[(3136), float64] */;
  %143 = cast(%var_9941, dtype="float64") /* ty=Tensor[(1560), float64] */;
  %144 = reshape(%142, newshape=[16, 14, 14]) /* ty=Tensor[(16, 14, 14), float64] */;
  %145 = reshape(%143, newshape=[1560]) /* ty=Tensor[(1560), float64] */;
  %146 = @func_9059(%144, %145) /* ty=(Tensor[(16, 14, 14), float64], Tensor[(15, 12, 15), float64], Tensor[(12, 10, 3), uint64], Tensor[(1560), float64], Tensor[(14, 7, 10), uint64]) */;
  %147 = cast(%var_9964, dtype="int64") /* ty=Tensor[(2730), int64] */;
  %148 = reshape(%147, newshape=[2730]) /* ty=Tensor[(2730), int64] */;
  %149 = @func_1540(%148) /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(182), float64], int64, Tensor[(2730), int64]) */;
  %150 = @func_1338() /* ty=Tensor[(182), float64] */;
  %151 = cast(%150, dtype="float64") /* ty=Tensor[(182), float64] */;
  %152 = reshape(%151, newshape=[182]) /* ty=Tensor[(182), float64] */;
  %153 = @func_6931(%152) /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(3360), int8], Tensor[(960), int8], Tensor[(182), float32], Tensor[(15, 12, 15), float32]) */;
  %154 = cast(%var_9941, dtype="float64") /* ty=Tensor[(1560), float64] */;
  %155 = log10(%154) /* ty=Tensor[(1560), float64] */;
  %156 = cast(%155, dtype="float32") /* ty=Tensor[(1560), float32] */;
  %157 = %141.0;
  %158 = %146.2;
  %159 = %149.0;
  %160 = @func_6728() /* ty=Tensor[(182), float32] */;
  %161 = %153.3;
  %162 = sigmoid(%156) /* ty=Tensor[(1560), float32] */;
  %163 = @func_5803() /* ty=Tensor[(182), float32] */;
  %164 = @func_4251() /* ty=Tensor[(14, 7, 10), float32] */;
  (%150, %157, %158, meta[relay.Constant][8] /* ty=Tensor[(3136), float64] */, %159, %var_9964, %160, %161, %162, %163, %164)
}

def @func_9059(%var_9020: Tensor[(16, 14, 14), float64], %var_9043: Tensor[(1560), float64]) -> (Tensor[(16, 14, 14), float64], Tensor[(15, 12, 15), float64], Tensor[(12, 10, 3), uint64], Tensor[(1560), float64], Tensor[(14, 7, 10), uint64]) {
  %165 = cast(%var_9020, dtype="float64") /* ty=Tensor[(16, 14, 14), float64] */;
  %166 = @func_5463() /* ty=(Tensor[(15, 12, 15), float32],) */;
  %167 = %166.0;
  %168 = cast(%167, dtype="float64") /* ty=Tensor[(15, 12, 15), float64] */;
  %169 = cast(%var_9043, dtype="float64") /* ty=Tensor[(1560), float64] */;
  %170 = reshape(%169, newshape=[1560]) /* ty=Tensor[(1560), float64] */;
  %171 = @func_405(%170) /* ty=(Tensor[(13, 8, 15), float64], Tensor[(1560), float64], Tensor[(13, 8, 15), float64], Tensor[(12, 10, 3), uint64], Tensor[(13, 8, 15), float64], Tensor[(13, 8, 15), float64]) */;
  %172 = @func_6072() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(176), float32]) */;
  %173 = acosh(%165) /* ty=Tensor[(16, 14, 14), float64] */;
  %174 = log2(%168) /* ty=Tensor[(15, 12, 15), float64] */;
  %175 = %171.3;
  %176 = %172.0;
  (%173, %174, %175, %var_9043, %176)
}

def @func_10817() -> (Tensor[(3360), int8], Tensor[(14, 7, 10), bool], Tensor[(182), float64]) {
  %177 = @func_6836() /* ty=(Tensor[(182), float64], Tensor[(3360), int8], Tensor[(3360), float64]) */;
  %178 = @func_1157() /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), bool]) */;
  %179 = @func_5942() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(182), float64], Tensor[(14, 7, 10), uint64]) */;
  %180 = %177.1;
  %181 = %178.1;
  %182 = %179.1;
  (%180, %181, %182)
}

def @main(%var_12111: Tensor[(21, 3), uint16], %var_12112: Tensor[(504), uint16]) -> (Tensor[(14, 7, 10), uint64], Tensor[(210), bool], Tensor[(182), float32], Tensor[(182), float64], Tensor[(14, 7, 10), uint64], Tensor[(182), float32], Tensor[(14, 7, 10), uint64], Tensor[(13, 8, 15), float64], Tensor[(21, 3), uint16], Tensor[(504), uint16], Tensor[(13, 8, 15), float64], Tensor[(8, 7, 9), float64]) {
  %183 = @func_11796() /* ty=(Tensor[(182), float32],) */;
  %184 = @func_6836() /* ty=(Tensor[(182), float64], Tensor[(3360), int8], Tensor[(3360), float64]) */;
  %185 = @func_11632() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %186 = @func_8161() /* ty=(Tensor[(182), float32], Tensor[(14, 7, 10), uint64]) */;
  %187 = @func_6658() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %188 = @func_2005() /* ty=(Tensor[(14, 7, 10), float32], Tensor[(14, 7, 10), uint64], Tensor[(672), int8], Tensor[(14, 7, 10), uint64], Tensor[(13, 8, 15), float64], Tensor[(1560, 1), float64]) */;
  %189 = %188.4;
  %190 = cast(%189, dtype="float64") /* ty=Tensor[(13, 8, 15), float64] */;
  %191 = reshape(%190, newshape=[1560]) /* ty=Tensor[(1560), float64] */;
  %192 = @func_405(%191) /* ty=(Tensor[(13, 8, 15), float64], Tensor[(1560), float64], Tensor[(13, 8, 15), float64], Tensor[(12, 10, 3), uint64], Tensor[(13, 8, 15), float64], Tensor[(13, 8, 15), float64]) */;
  %193 = cast(%var_12111, dtype="uint16") /* ty=Tensor[(21, 3), uint16] */;
  %194 = cast(%var_12112, dtype="uint16") /* ty=Tensor[(504), uint16] */;
  %195 = reshape(%193, newshape=[1, 7, 9]) /* ty=Tensor[(1, 7, 9), uint16] */;
  %196 = reshape(%194, newshape=[8, 7, 9]) /* ty=Tensor[(8, 7, 9), uint16] */;
  %197 = @func_11286(%195, %196) /* ty=(Tensor[(8, 7, 9), bool],) */;
  %198 = %197.0;
  %199 = cast(%198, dtype="float64") /* ty=Tensor[(8, 7, 9), float64] */;
  %200 = @func_7710() /* ty=Tensor[(14, 7, 10), uint64] */;
  %201 = @func_5087() /* ty=Tensor[(210), bool] */;
  %202 = %183.0;
  %203 = %184.0;
  %204 = %185.0;
  %205 = %186.0;
  %206 = %187.0;
  %207 = %192.2;
  %208 = sigmoid(%199) /* ty=Tensor[(8, 7, 9), float64] */;
  (%200, %201, %202, %203, %204, %205, %206, %189, %var_12111, %var_12112, %207, %208)
}

def @func_7028(%var_7021: Tensor[(14, 7, 10), uint64]) -> Tensor[(14, 7, 10), uint8] {
  %209 = @func_6860() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %210 = %209.0;
  %211 = cast(%var_7021, dtype="uint8") /* ty=Tensor[(14, 7, 10), uint8] */;
  %212 = shape_of(%210, dtype="int32") /* ty=Tensor[(3), int32] */;
  %213 = cast(%210, dtype="uint8") /* ty=Tensor[(14, 7, 10), uint8] */;
  %214 = dyn.reshape(%211, %212, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  subtract(%213, %214) /* ty=Tensor[(14, 7, 10), uint8] */
}

def @func_4801() -> (Tensor[(14, 7, 10), float32], Tensor[(182), float64], Tensor[(182), float64]) {
  %215 = @func_3193() /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), uint64]) */;
  %216 = %215.1;
  %217 = cast(%216, dtype="float32") /* ty=Tensor[(14, 7, 10), float32] */;
  %218 = cast(meta[relay.Constant][9] /* ty=Tensor[(182), float64] */, dtype="float64") /* ty=Tensor[(182), float64] */;
  %219 = reshape(%218, newshape=[182]) /* ty=Tensor[(182), float64] */;
  %220 = acos(%217) /* ty=Tensor[(14, 7, 10), float32] */;
  %221 = @func_2311(%219) /* ty=Tensor[(182), float64] */;
  (%220, %221, meta[relay.Constant][9] /* ty=Tensor[(182), float64] */)
}

def @func_492(%var_476: Tensor[(1, 13, 14), float32]) -> Tensor[(1, 13, 14), float32] {
  %222 = cast(%var_476, dtype="float32") /* ty=Tensor[(1, 13, 14), float32] */;
  log2(%222) /* ty=Tensor[(1, 13, 14), float32] */
}

def @func_4950(%var_4907: Tensor[(182), float64]) -> (Tensor[(182), bool], Tensor[(14, 7, 10), uint64]) {
  %223 = @func_1808() /* ty=Tensor[(182), float64] */;
  %224 = cast(%var_4907, dtype="uint64") /* ty=Tensor[(182), uint64] */;
  %225 = shape_of(%223, dtype="int32") /* ty=Tensor[(1), int32] */;
  %226 = cast(%223, dtype="uint64") /* ty=Tensor[(182), uint64] */;
  %227 = dyn.reshape(%224, %225, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %228 = add(%226, %227) /* ty=Tensor[(182), uint64] */;
  %229 = cast(meta[relay.Constant][10] /* ty=Tensor[(182), uint64] */, dtype="bool") /* ty=Tensor[(182), bool] */;
  %230 = shape_of(%228, dtype="int32") /* ty=Tensor[(1), int32] */;
  %231 = cast(%228, dtype="bool") /* ty=Tensor[(182), bool] */;
  %232 = dyn.reshape(%229, %230, newshape=[]) /* ty=Tensor[(?), bool] */;
  %233 = greater(%231, %232) /* ty=Tensor[(182), bool] */;
  %234 = @func_1483() /* ty=Tensor[(14, 7, 10), uint64] */;
  (%233, %234)
}

def @func_5265() -> (Tensor[(16, 15, 14), float64],) {
  %235 = @func_5229() /* ty=(Tensor[(182), float64], Tensor[(16, 15, 14), int8], Tensor[(3360), int8], Tensor[(480, 2), int8], Tensor[(6, 6, 15), bool], Tensor[(540), bool]) */;
  %236 = %235.1;
  %237 = cast(%236, dtype="float64") /* ty=Tensor[(16, 15, 14), float64] */;
  %238 = acosh(%237) /* ty=Tensor[(16, 15, 14), float64] */;
  (%238,)
}

def @func_2399() -> (Tensor[(14, 7, 10), float32], Tensor[(182), float32]) {
  %239 = @func_1321() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %240 = %239.0;
  %241 = cast(%240, dtype="float32") /* ty=Tensor[(14, 7, 10), float32] */;
  %242 = @func_2155() /* ty=(Tensor[(182), float32],) */;
  %243 = rsqrt(%241) /* ty=Tensor[(14, 7, 10), float32] */;
  %244 = %242.0;
  (%243, %244)
}

def @func_2005() -> (Tensor[(14, 7, 10), float32], Tensor[(14, 7, 10), uint64], Tensor[(672), int8], Tensor[(14, 7, 10), uint64], Tensor[(13, 8, 15), float64], Tensor[(1560, 1), float64]) {
  %245 = @func_1281() /* ty=(Tensor[(14, 7, 10), float32],) */;
  %246 = cast(meta[relay.Constant][11] /* ty=Tensor[(672), int8] */, dtype="int8") /* ty=Tensor[(672), int8] */;
  %247 = cast(meta[relay.Constant][11] /* ty=Tensor[(672), int8] */, dtype="int8") /* ty=Tensor[(672), int8] */;
  %248 = reshape(%246, newshape=[12, 14, 4]) /* ty=Tensor[(12, 14, 4), int8] */;
  %249 = reshape(%247, newshape=[12, 14, 4]) /* ty=Tensor[(12, 14, 4), int8] */;
  %250 = @func_1355(%248, %249) /* ty=(Tensor[(12, 14, 4), bool], Tensor[(14, 7, 10), uint64]) */;
  %251 = @func_1374() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %252 = cast(meta[relay.Constant][12] /* ty=Tensor[(1560, 1), float64] */, dtype="float64") /* ty=Tensor[(1560, 1), float64] */;
  %253 = reshape(%252, newshape=[13, 8, 15]) /* ty=Tensor[(13, 8, 15), float64] */;
  %254 = %245.0;
  %255 = %250.1;
  %256 = %251.0;
  %257 = @func_177(%253) /* ty=Tensor[(13, 8, 15), float64] */;
  (%254, %255, meta[relay.Constant][11] /* ty=Tensor[(672), int8] */, %256, %257, meta[relay.Constant][12] /* ty=Tensor[(1560, 1), float64] */)
}

def @func_7071() -> (Tensor[(11, 6, 8), int32], Tensor[(11, 6, 8), float32]) {
  %258 = cast(meta[relay.Constant][14] /* ty=Tensor[(11, 6, 8), int32] */, dtype="int32") /* ty=Tensor[(11, 6, 8), int32] */;
  %259 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(11, 6, 8), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %260 = cast(meta[relay.Constant][13] /* ty=Tensor[(11, 6, 8), int32] */, dtype="int32") /* ty=Tensor[(11, 6, 8), int32] */;
  %261 = dyn.reshape(%258, %259, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %262 = cast(meta[relay.Constant][14] /* ty=Tensor[(11, 6, 8), int32] */, dtype="float32") /* ty=Tensor[(11, 6, 8), float32] */;
  %263 = bitwise_and(%260, %261) /* ty=Tensor[(11, 6, 8), int32] */;
  %264 = asin(%262) /* ty=Tensor[(11, 6, 8), float32] */;
  (%263, %264)
}

def @func_5803() -> Tensor[(182), float32] {
  %265 = @func_5315() /* ty=(Tensor[(182), float32],) */;
  %265.0
}

def @func_938() -> (Tensor[(14, 7, 10), uint64],) {
  %266 = @func_830() /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), uint64]) */;
  %267 = %266.1;
  (%267,)
}

def @func_8797() -> Tensor[(14, 7, 10), uint64] {
  %268 = @func_1035() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) */;
  %268.2
}

def @func_405(%var_387: Tensor[(1560), float64]) -> (Tensor[(13, 8, 15), float64], Tensor[(1560), float64], Tensor[(13, 8, 15), float64], Tensor[(12, 10, 3), uint64], Tensor[(13, 8, 15), float64], Tensor[(13, 8, 15), float64]) {
  %269 = cast(%var_387, dtype="float64") /* ty=Tensor[(1560), float64] */;
  %270 = reshape(%269, newshape=[13, 8, 15]) /* ty=Tensor[(13, 8, 15), float64] */;
  %271 = @func_177(%270) /* ty=Tensor[(13, 8, 15), float64] */;
  %272 = cast(%271, dtype="float64") /* ty=Tensor[(13, 8, 15), float64] */;
  %273 = reshape(%272, newshape=[13, 8, 15]) /* ty=Tensor[(13, 8, 15), float64] */;
  %274 = cast(meta[relay.Constant][15] /* ty=Tensor[(12, 10, 3), float64] */, dtype="float64") /* ty=Tensor[(12, 10, 3), float64] */;
  %275 = acos(%274) /* ty=Tensor[(12, 10, 3), float64] */;
  %276 = cast(meta[relay.Constant][15] /* ty=Tensor[(12, 10, 3), float64] */, dtype="uint64") /* ty=Tensor[(12, 10, 3), uint64] */;
  %277 = shape_of(%275, dtype="int32") /* ty=Tensor[(3), int32] */;
  %278 = cast(%275, dtype="uint64") /* ty=Tensor[(12, 10, 3), uint64] */;
  %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %280 = @func_177(%273) /* ty=Tensor[(13, 8, 15), float64] */;
  %281 = cast(%280, dtype="float64") /* ty=Tensor[(13, 8, 15), float64] */;
  %282 = reshape(%281, newshape=[13, 8, 15]) /* ty=Tensor[(13, 8, 15), float64] */;
  %283 = @func_177(%282) /* ty=Tensor[(13, 8, 15), float64] */;
  %284 = cast(%283, dtype="float64") /* ty=Tensor[(13, 8, 15), float64] */;
  %285 = reshape(%284, newshape=[13, 8, 15]) /* ty=Tensor[(13, 8, 15), float64] */;
  %286 = multiply(%278, %279) /* ty=Tensor[(12, 10, 3), uint64] */;
  %287 = @func_177(%285) /* ty=Tensor[(13, 8, 15), float64] */;
  (%271, %var_387, %280, %286, %283, %287)
}

def @func_10992() -> (Tensor[(3360), int8],) {
  %288 = @func_6836() /* ty=(Tensor[(182), float64], Tensor[(3360), int8], Tensor[(3360), float64]) */;
  %289 = %288.1;
  (%289,)
}

def @func_1821() -> Tensor[(182), float64] {
  @func_1041() /* ty=Tensor[(182), float64] */
}

def @func_6836() -> (Tensor[(182), float64], Tensor[(3360), int8], Tensor[(3360), float64]) {
  %290 = cast(meta[relay.Constant][16] /* ty=Tensor[(3360), int8] */, dtype="int8") /* ty=Tensor[(3360), int8] */;
  %291 = reshape(%290, newshape=[3360]) /* ty=Tensor[(3360), int8] */;
  %292 = @func_3213(%291) /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(16, 15, 1), float64], Tensor[(3360), int8], Tensor[(960), int8], Tensor[(13, 8, 15), float64], Tensor[(1, 945), uint8]) */;
  %293 = %292.2;
  %294 = cast(%293, dtype="float64") /* ty=Tensor[(3360), float64] */;
  %295 = @func_1041() /* ty=Tensor[(182), float64] */;
  %296 = log(%294) /* ty=Tensor[(3360), float64] */;
  (%295, meta[relay.Constant][16] /* ty=Tensor[(3360), int8] */, %296)
}

def @func_4199(%var_4182: float64) -> (Tensor[(7, 2, 15), float64], Tensor[(980), uint64], Tensor[(14, 7, 10), uint16]) {
  %297 = cast(%var_4182, dtype="float64") /* ty=float64 */;
  %298 = cast(meta[relay.Constant][17] /* ty=Tensor[(7, 2, 15), float64] */, dtype="float64") /* ty=Tensor[(7, 2, 15), float64] */;
  %299 = cast(meta[relay.Constant][18] /* ty=Tensor[(980), uint64] */, dtype="uint64") /* ty=Tensor[(980), uint64] */;
  %300 = reshape(%299, newshape=[14, 7, 10]) /* ty=Tensor[(14, 7, 10), uint64] */;
  %301 = @func_1253(%300) /* ty=(Tensor[(14, 7, 10), int16], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), bool]) */;
  %302 = %301.0;
  %303 = cast(%302, dtype="uint16") /* ty=Tensor[(14, 7, 10), uint16] */;
  %304 = cast(%var_4182, dtype="uint16") /* ty=uint16 */;
  %305 = mod(%297, %298) /* ty=Tensor[(7, 2, 15), float64] */;
  %306 = logical_xor(%303, %304) /* ty=Tensor[(14, 7, 10), uint16] */;
  (%305, meta[relay.Constant][18] /* ty=Tensor[(980), uint64] */, %306)
}

def @func_8778() -> Tensor[(1560, 1), float64] {
  %307 = @func_2005() /* ty=(Tensor[(14, 7, 10), float32], Tensor[(14, 7, 10), uint64], Tensor[(672), int8], Tensor[(14, 7, 10), uint64], Tensor[(13, 8, 15), float64], Tensor[(1560, 1), float64]) */;
  %307.5
}

def @func_8637() -> Tensor[(14, 7, 10), uint64] {
  @func_3687() /* ty=Tensor[(14, 7, 10), uint64] */
}

def @func_4209() -> Tensor[(182), float32] {
  @func_2362() /* ty=Tensor[(182), float32] */
}

def @func_11742() -> (Tensor[(182), float64],) {
  %308 = @func_8125() /* ty=(Tensor[(182), float64],) */;
  %309 = %308.0;
  (%309,)
}

def @func_2609() -> (Tensor[(14, 7, 10), float32],) {
  %310 = @func_1281() /* ty=(Tensor[(14, 7, 10), float32],) */;
  %311 = %310.0;
  %312 = cast(%311, dtype="float32") /* ty=Tensor[(14, 7, 10), float32] */;
  %313 = log10(%312) /* ty=Tensor[(14, 7, 10), float32] */;
  (%313,)
}

def @func_5008() -> (Tensor[(14, 7, 10), uint64],) {
  %314 = @func_2200() /* ty=Tensor[(14, 7, 10), uint64] */;
  (%314,)
}

def @func_6789() -> Tensor[(14, 7, 10), bool] {
  %315 = @func_5977() /* ty=(Tensor[(14, 7, 10), float64], Tensor[(14, 7, 10), bool]) */;
  %315.1
}

def @func_11253() -> (Tensor[(14, 7, 10), uint64], Tensor[(4, 15, 5), uint8]) {
  %316 = @func_4537() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %317 = @func_10120() /* ty=(Tensor[(4, 15, 5), uint8],) */;
  %318 = %316.0;
  %319 = %317.0;
  (%318, %319)
}

def @func_2642() -> (Tensor[(14, 7, 10), uint64],) {
  %320 = @func_938() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %321 = %320.0;
  (%321,)
}

def @func_1321() -> (Tensor[(14, 7, 10), uint64],) {
  %322 = @func_865() /* ty=Tensor[(14, 7, 10), uint64] */;
  (%322,)
}

def @func_1808() -> Tensor[(182), float64] {
  @func_1041() /* ty=Tensor[(182), float64] */
}

def @func_11086(%var_11019: Tensor[(1560, 11), float64], %var_11028: uint64, %var_11029: Tensor[(2640), uint64]) -> (Tensor[(15, 16, 11), uint64], uint64, Tensor[(2640), uint64], Tensor[(1560, 11), uint64], Tensor[(14, 7, 10), uint64], Tensor[(182), float64], Tensor[(14, 7, 10), uint64], Tensor[(1560, 11), bool], Tensor[(1560, 11), float32]) {
  %323 = cast(%var_11028, dtype="uint64") /* ty=uint64 */;
  %324 = cast(%var_11029, dtype="uint64") /* ty=Tensor[(2640), uint64] */;
  %325 = reshape(%323, newshape=[]) /* ty=uint64 */;
  %326 = reshape(%324, newshape=[15, 16, 11]) /* ty=Tensor[(15, 16, 11), uint64] */;
  %327 = @func_10175() /* ty=(Tensor[(1560, 1), float64], Tensor[(14, 7, 10), uint64]) */;
  %328 = %327.0;
  %329 = cast(%328, dtype="float32") /* ty=Tensor[(1560, 1), float32] */;
  %330 = cast(%var_11019, dtype="float32") /* ty=Tensor[(1560, 11), float32] */;
  %331 = power(%329, %330) /* ty=Tensor[(1560, 11), float32] */;
  %332 = cast(%331, dtype="uint64") /* ty=Tensor[(1560, 11), uint64] */;
  %333 = shape_of(%var_11019, dtype="int32") /* ty=Tensor[(2), int32] */;
  %334 = cast(%var_11019, dtype="uint64") /* ty=Tensor[(1560, 11), uint64] */;
  %335 = dyn.reshape(%332, %333, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %336 = cast(meta[relay.Constant][19] /* ty=Tensor[(182), float64] */, dtype="float64") /* ty=Tensor[(182), float64] */;
  %337 = reshape(%336, newshape=[182]) /* ty=Tensor[(182), float64] */;
  %338 = @func_4950(%337) /* ty=(Tensor[(182), bool], Tensor[(14, 7, 10), uint64]) */;
  %339 = @func_9705() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %340 = cast(%331, dtype="bool") /* ty=Tensor[(1560, 11), bool] */;
  %341 = cast(%328, dtype="bool") /* ty=Tensor[(1560, 1), bool] */;
  %342 = cast(%var_11019, dtype="float32") /* ty=Tensor[(1560, 11), float32] */;
  %343 = @func_9652(%325, %326) /* ty=Tensor[(15, 16, 11), uint64] */;
  %344 = minimum(%334, %335) /* ty=Tensor[(1560, 11), uint64] */;
  %345 = %338.1;
  %346 = %339.0;
  %347 = greater(%340, %341) /* ty=Tensor[(1560, 11), bool] */;
  %348 = sinh(%342) /* ty=Tensor[(1560, 11), float32] */;
  (%343, %var_11028, %var_11029, %344, %345, meta[relay.Constant][19] /* ty=Tensor[(182), float64] */, %346, %347, %348)
}

def @func_2954() -> (Tensor[(182), float64],) {
  %349 = @func_1041() /* ty=Tensor[(182), float64] */;
  (%349,)
}

def @func_11479() -> (Tensor[(14, 7, 10), float64],) {
  %350 = @func_6784() /* ty=(Tensor[(14, 7, 10), float64], Tensor[(8, 2, 11), float32], float32, Tensor[(176), float32]) */;
  %351 = %350.0;
  (%351,)
}

def @func_10845() -> (Tensor[(182), float32], Tensor[(1560, 1), float32]) {
  %352 = @func_2005() /* ty=(Tensor[(14, 7, 10), float32], Tensor[(14, 7, 10), uint64], Tensor[(672), int8], Tensor[(14, 7, 10), uint64], Tensor[(13, 8, 15), float64], Tensor[(1560, 1), float64]) */;
  %353 = %352.5;
  %354 = cast(%353, dtype="float32") /* ty=Tensor[(1560, 1), float32] */;
  %355 = @func_5803() /* ty=Tensor[(182), float32] */;
  %356 = rsqrt(%354) /* ty=Tensor[(1560, 1), float32] */;
  (%355, %356)
}

def @func_2901() -> (Tensor[(14, 7, 10), uint64], Tensor[(182), uint64]) {
  %357 = @func_2843() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(4, 15, 5), uint8]) */;
  %358 = @func_1808() /* ty=Tensor[(182), float64] */;
  %359 = cast(meta[relay.Constant][20] /* ty=Tensor[(182), float64] */, dtype="uint64") /* ty=Tensor[(182), uint64] */;
  %360 = shape_of(%358, dtype="int32") /* ty=Tensor[(1), int32] */;
  %361 = cast(%358, dtype="uint64") /* ty=Tensor[(182), uint64] */;
  %362 = dyn.reshape(%359, %360, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %363 = %357.0;
  %364 = bitwise_xor(%361, %362) /* ty=Tensor[(182), uint64] */;
  (%363, %364)
}

def @func_8708() -> (Tensor[(14, 7, 10), uint64],) {
  %365 = @func_2200() /* ty=Tensor[(14, 7, 10), uint64] */;
  (%365,)
}

def @func_3030(%var_3020: Tensor[(16, 8, 5), float64]) -> Tensor[(16, 8, 5), float64] {
  %366 = cast(%var_3020, dtype="float64") /* ty=Tensor[(16, 8, 5), float64] */;
  asinh(%366) /* ty=Tensor[(16, 8, 5), float64] */
}

def @func_8274() -> (Tensor[(14, 7, 10), uint64], Tensor[(1560, 1), float64], Tensor[(14, 7, 10), bool]) {
  %367 = @func_2083() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %368 = @func_2005() /* ty=(Tensor[(14, 7, 10), float32], Tensor[(14, 7, 10), uint64], Tensor[(672), int8], Tensor[(14, 7, 10), uint64], Tensor[(13, 8, 15), float64], Tensor[(1560, 1), float64]) */;
  %369 = %367.0;
  %370 = %368.5;
  %371 = @func_6789() /* ty=Tensor[(14, 7, 10), bool] */;
  (%369, %370, %371)
}

def @func_11632() -> (Tensor[(14, 7, 10), uint64],) {
  %372 = @func_6508() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %373 = %372.0;
  (%373,)
}

def @func_10204() -> (Tensor[(182), float64],) {
  %374 = @func_1808() /* ty=Tensor[(182), float64] */;
  (%374,)
}

def @func_9403(%var_9371: Tensor[(176), float32], %var_9381: Tensor[(3360), int8], %var_9395: Tensor[(9, 60), bool]) -> (Tensor[(14, 7, 10), float32], Tensor[(14, 7, 10), uint64], Tensor[(3360), int16], Tensor[(14, 7, 10), uint64], Tensor[(176), float32], Tensor[(3360), float32], Tensor[(4, 15, 5), uint8], Tensor[(540), bool], Tensor[(182), float64], Tensor[(9, 60), bool]) {
  %375 = @func_1281() /* ty=(Tensor[(14, 7, 10), float32],) */;
  %376 = @func_3983() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) */;
  %377 = @func_5229() /* ty=(Tensor[(182), float64], Tensor[(16, 15, 14), int8], Tensor[(3360), int8], Tensor[(480, 2), int8], Tensor[(6, 6, 15), bool], Tensor[(540), bool]) */;
  %378 = %377.2;
  %379 = cast(meta[relay.Constant][21] /* ty=Tensor[(3360), int8] */, dtype="int16") /* ty=Tensor[(3360), int16] */;
  %380 = shape_of(%378, dtype="int32") /* ty=Tensor[(1), int32] */;
  %381 = cast(%378, dtype="int16") /* ty=Tensor[(3360), int16] */;
  %382 = dyn.reshape(%379, %380, newshape=[]) /* ty=Tensor[(?), int16] */;
  %383 = cast(%var_9371, dtype="float32") /* ty=Tensor[(176), float32] */;
  %384 = reshape(%383, newshape=[176]) /* ty=Tensor[(176), float32] */;
  %385 = @func_4343(%384) /* ty=(Tensor[(182), float32], Tensor[(8, 2, 11), float32], float32, Tensor[(176), float32], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), float32]) */;
  %386 = @func_5229() /* ty=(Tensor[(182), float64], Tensor[(16, 15, 14), int8], Tensor[(3360), int8], Tensor[(480, 2), int8], Tensor[(6, 6, 15), bool], Tensor[(540), bool]) */;
  %387 = %386.2;
  %388 = cast(%var_9381, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %389 = shape_of(%387, dtype="int32") /* ty=Tensor[(1), int32] */;
  %390 = cast(%387, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %391 = dyn.reshape(%388, %389, newshape=[]) /* ty=Tensor[(?), float32] */;
  %392 = cast(meta[relay.Constant][22] /* ty=Tensor[(182), float64] */, dtype="float64") /* ty=Tensor[(182), float64] */;
  %393 = cast(%var_9395, dtype="bool") /* ty=Tensor[(9, 60), bool] */;
  %394 = reshape(%392, newshape=[182]) /* ty=Tensor[(182), float64] */;
  %395 = reshape(%393, newshape=[540]) /* ty=Tensor[(540), bool] */;
  %396 = @func_4890(%394, %395) /* ty=(Tensor[(182), bool], Tensor[(6, 6, 15), bool], Tensor[(540), bool], Tensor[(14, 7, 10), bool], Tensor[(14, 7, 10), bool]) */;
  %397 = %375.0;
  %398 = %376.1;
  %399 = add(%381, %382) /* ty=Tensor[(3360), int16] */;
  %400 = %385.4;
  %401 = floor_divide(%390, %391) /* ty=Tensor[(3360), float32] */;
  %402 = @func_3758() /* ty=Tensor[(4, 15, 5), uint8] */;
  %403 = %396.2;
  (%397, %398, %399, %400, %var_9371, %401, %402, %403, meta[relay.Constant][22] /* ty=Tensor[(182), float64] */, %var_9395)
}

def @func_5087() -> Tensor[(210), bool] {
  %404 = @func_4040() /* ty=(Tensor[(210), bool],) */;
  %404.0
}

def @func_10120() -> (Tensor[(4, 15, 5), uint8],) {
  %405 = @func_3758() /* ty=Tensor[(4, 15, 5), uint8] */;
  (%405,)
}

def @func_11828() -> (Tensor[(14, 7, 10), bool],) {
  %406 = @func_8274() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(1560, 1), float64], Tensor[(14, 7, 10), bool]) */;
  %407 = %406.2;
  (%407,)
}

def @func_2494(%var_2446: Tensor[(16, 15, 14), int8], %var_2467: Tensor[(16, 15, 4), int8]) -> (Tensor[(16, 15, 14), int8], Tensor[(16, 15, 4), bool], Tensor[(16, 15, 1), float64], Tensor[(14, 7, 10), uint64]) {
  %408 = cast(meta[relay.Constant][23] /* ty=Tensor[(16, 15, 1), int8] */, dtype="int8") /* ty=Tensor[(16, 15, 1), int8] */;
  %409 = cast(%var_2446, dtype="int8") /* ty=Tensor[(16, 15, 14), int8] */;
  %410 = cast(meta[relay.Constant][23] /* ty=Tensor[(16, 15, 1), int8] */, dtype="bool") /* ty=Tensor[(16, 15, 1), bool] */;
  %411 = cast(%var_2467, dtype="bool") /* ty=Tensor[(16, 15, 4), bool] */;
  %412 = cast(meta[relay.Constant][23] /* ty=Tensor[(16, 15, 1), int8] */, dtype="float64") /* ty=Tensor[(16, 15, 1), float64] */;
  %413 = @func_2115() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(672), int8]) */;
  %414 = subtract(%408, %409) /* ty=Tensor[(16, 15, 14), int8] */;
  %415 = not_equal(%410, %411) /* ty=Tensor[(16, 15, 4), bool] */;
  %416 = cos(%412) /* ty=Tensor[(16, 15, 1), float64] */;
  %417 = %413.0;
  (%414, %415, %416, %417)
}

def @func_865() -> Tensor[(14, 7, 10), uint64] {
  %418 = @func_830() /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), uint64]) */;
  %418.1
}

def @func_1959(%var_1942: Tensor[(11, 2, 10), int32], %var_1943: Tensor[(11, 2, 10), int32]) -> (Tensor[(11, 2, 10), bool], Tensor[(11, 2, 10), float64]) {
  %419 = cast(%var_1943, dtype="bool") /* ty=Tensor[(11, 2, 10), bool] */;
  %420 = shape_of(%var_1942, dtype="int32") /* ty=Tensor[(3), int32] */;
  %421 = cast(%var_1942, dtype="bool") /* ty=Tensor[(11, 2, 10), bool] */;
  %422 = dyn.reshape(%419, %420, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %423 = cast(%var_1943, dtype="float64") /* ty=Tensor[(11, 2, 10), float64] */;
  %424 = greater_equal(%421, %422) /* ty=Tensor[(11, 2, 10), bool] */;
  %425 = asinh(%423) /* ty=Tensor[(11, 2, 10), float64] */;
  (%424, %425)
}

def @func_4040() -> (Tensor[(210), bool],) {
  %426 = @func_1717() /* ty=(Tensor[(14, 7, 10), float32], Tensor[(5, 14, 3), bool], Tensor[(210), bool], Tensor[(182), float64]) */;
  %427 = %426.2;
  (%427,)
}

def @func_9566() -> (Tensor[(14, 7, 10), float32], Tensor[(14, 7, 10), uint64], Tensor[(182), float32]) {
  %428 = @func_6456() /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), float32]) */;
  %429 = @func_3983() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) */;
  %430 = %428.1;
  %431 = %429.0;
  %432 = @func_7216() /* ty=Tensor[(182), float32] */;
  (%430, %431, %432)
}

def @func_1003() -> (Tensor[(14, 7, 10), uint64],) {
  %433 = @func_865() /* ty=Tensor[(14, 7, 10), uint64] */;
  (%433,)
}

def @func_5315() -> (Tensor[(182), float32],) {
  %434 = @func_2790() /* ty=Tensor[(182), float32] */;
  (%434,)
}

def @func_2560() -> (Tensor[(182), float64], Tensor[(14, 7, 10), uint64]) {
  %435 = @func_1596() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %436 = @func_1808() /* ty=Tensor[(182), float64] */;
  %437 = %435.0;
  (%436, %437)
}

def @func_830() -> (Tensor[(182), float64], Tensor[(14, 7, 10), uint64]) {
  %438 = cast(meta[relay.Constant][24] /* ty=Tensor[(182), float32] */, dtype="float32") /* ty=Tensor[(182), float32] */;
  %439 = reshape(%438, newshape=[1, 13, 14]) /* ty=Tensor[(1, 13, 14), float32] */;
  %440 = @func_492(%439) /* ty=Tensor[(1, 13, 14), float32] */;
  %441 = cast(%440, dtype="float64") /* ty=Tensor[(1, 13, 14), float64] */;
  %442 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(182), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %443 = cast(meta[relay.Constant][24] /* ty=Tensor[(182), float32] */, dtype="float64") /* ty=Tensor[(182), float64] */;
  %444 = dyn.reshape(%441, %442, newshape=[]) /* ty=Tensor[(?), float64] */;
  %445 = cast(meta[relay.Constant][25] /* ty=Tensor[(14, 7, 10), float32] */, dtype="float32") /* ty=Tensor[(14, 7, 10), float32] */;
  %446 = log2(%445) /* ty=Tensor[(14, 7, 10), float32] */;
  %447 = cast(meta[relay.Constant][26] /* ty=Tensor[(14, 7, 10), float32] */, dtype="uint64") /* ty=Tensor[(14, 7, 10), uint64] */;
  %448 = shape_of(%446, dtype="int32") /* ty=Tensor[(3), int32] */;
  %449 = cast(%446, dtype="uint64") /* ty=Tensor[(14, 7, 10), uint64] */;
  %450 = dyn.reshape(%447, %448, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %451 = power(%443, %444) /* ty=Tensor[(182), float64] */;
  %452 = bitwise_or(%449, %450) /* ty=Tensor[(14, 7, 10), uint64] */;
  (%451, %452)
}

def @func_5463() -> (Tensor[(15, 12, 15), float32],) {
  %453 = cast(meta[relay.Constant][28] /* ty=Tensor[(15, 12, 15), float32] */, dtype="float32") /* ty=Tensor[(15, 12, 15), float32] */;
  %454 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(15, 12, 15), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %455 = cast(meta[relay.Constant][27] /* ty=Tensor[(15, 12, 15), float32] */, dtype="float32") /* ty=Tensor[(15, 12, 15), float32] */;
  %456 = dyn.reshape(%453, %454, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %457 = floor_mod(%455, %456) /* ty=Tensor[(15, 12, 15), float32] */;
  (%457,)
}

def @func_7767(%var_7743: Tensor[(12, 13, 15), uint64]) -> (Tensor[(12, 13, 15), bool], Tensor[(14, 7, 10), uint64]) {
  %458 = cast(meta[relay.Constant][29] /* ty=Tensor[(12, 13, 15), uint64] */, dtype="bool") /* ty=Tensor[(12, 13, 15), bool] */;
  %459 = shape_of(%var_7743, dtype="int32") /* ty=Tensor[(3), int32] */;
  %460 = cast(%var_7743, dtype="bool") /* ty=Tensor[(12, 13, 15), bool] */;
  %461 = dyn.reshape(%458, %459, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %462 = @func_938() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %463 = greater(%460, %461) /* ty=Tensor[(12, 13, 15), bool] */;
  %464 = %462.0;
  (%463, %464)
}

def @func_2200() -> Tensor[(14, 7, 10), uint64] {
  %465 = @func_2083() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %465.0
}

def @func_4492() -> (Tensor[(8, 2, 11), bool],) {
  %466 = @func_4466() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(176), float32], Tensor[(8, 2, 11), bool]) */;
  %467 = %466.2;
  (%467,)
}

def @func_3434() -> (Tensor[(14, 7, 10), uint64], Tensor[(182), float32], Tensor[(5, 14, 3), bool]) {
  %468 = @func_1003() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %469 = @func_2552() /* ty=Tensor[(182), float32] */;
  %470 = cast(%469, dtype="float32") /* ty=Tensor[(182), float32] */;
  %471 = @func_1717() /* ty=(Tensor[(14, 7, 10), float32], Tensor[(5, 14, 3), bool], Tensor[(210), bool], Tensor[(182), float64]) */;
  %472 = %468.0;
  %473 = cosh(%470) /* ty=Tensor[(182), float32] */;
  %474 = %471.1;
  (%472, %473, %474)
}

def @func_4466() -> (Tensor[(14, 7, 10), uint64], Tensor[(176), float32], Tensor[(8, 2, 11), bool]) {
  %475 = @func_1662() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %476 = cast(-8.0541f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %477 = cast(meta[relay.Constant][30] /* ty=Tensor[(176), float32] */, dtype="float32") /* ty=Tensor[(176), float32] */;
  %478 = reshape(%476, newshape=[]) /* ty=float32 */;
  %479 = reshape(%477, newshape=[8, 2, 11]) /* ty=Tensor[(8, 2, 11), float32] */;
  %480 = @func_3449(%478, %479) /* ty=Tensor[(8, 2, 11), float32] */;
  %481 = cast(%480, dtype="float32") /* ty=Tensor[(8, 2, 11), float32] */;
  %482 = atanh(%481) /* ty=Tensor[(8, 2, 11), float32] */;
  %483 = cast(%480, dtype="bool") /* ty=Tensor[(8, 2, 11), bool] */;
  %484 = cast(-8.0541f /* ty=float32 */, dtype="bool") /* ty=bool */;
  %485 = equal(%483, %484) /* ty=Tensor[(8, 2, 11), bool] */;
  %486 = cast(%485, dtype="bool") /* ty=Tensor[(8, 2, 11), bool] */;
  %487 = shape_of(%482, dtype="int32") /* ty=Tensor[(3), int32] */;
  %488 = cast(%482, dtype="bool") /* ty=Tensor[(8, 2, 11), bool] */;
  %489 = dyn.reshape(%486, %487, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %490 = %475.0;
  %491 = logical_or(%488, %489) /* ty=Tensor[(8, 2, 11), bool] */;
  (%490, meta[relay.Constant][30] /* ty=Tensor[(176), float32] */, %491)
}

def @func_2989() -> (Tensor[(14, 7, 10), uint64], Tensor[(182), float64]) {
  %492 = @func_1596() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %493 = %492.0;
  %494 = @func_1338() /* ty=Tensor[(182), float64] */;
  (%493, %494)
}

def @func_2362() -> Tensor[(182), float32] {
  %495 = @func_2155() /* ty=(Tensor[(182), float32],) */;
  %495.0
}

def @func_6630(%var_6591: Tensor[(10, 10, 7), float32], %var_6592: Tensor[(10, 10, 7), float32]) -> (Tensor[(10, 10, 7), bool], Tensor[(14, 7, 10), float32], float64) {
  %496 = cast(%var_6592, dtype="float32") /* ty=Tensor[(10, 10, 7), float32] */;
  %497 = shape_of(%var_6591, dtype="int32") /* ty=Tensor[(3), int32] */;
  %498 = cast(%var_6591, dtype="float32") /* ty=Tensor[(10, 10, 7), float32] */;
  %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %500 = divide(%498, %499) /* ty=Tensor[(10, 10, 7), float32] */;
  %501 = cast(meta[relay.Constant][31] /* ty=Tensor[(10, 10, 7), float32] */, dtype="bool") /* ty=Tensor[(10, 10, 7), bool] */;
  %502 = shape_of(%500, dtype="int32") /* ty=Tensor[(3), int32] */;
  %503 = cast(%500, dtype="bool") /* ty=Tensor[(10, 10, 7), bool] */;
  %504 = dyn.reshape(%501, %502, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %505 = cast(5.70814f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %506 = reshape(%505, newshape=[]) /* ty=float64 */;
  %507 = @func_4691(%506) /* ty=(Tensor[(14, 7, 10), float32], Tensor[(7, 2, 15), float64], float64, Tensor[(14, 7, 10), float32], Tensor[(143, 14), float32], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) */;
  %508 = less(%503, %504) /* ty=Tensor[(10, 10, 7), bool] */;
  %509 = %507.0;
  (%508, %509, 5.70814f64 /* ty=float64 */)
}

def @func_4304() -> (Tensor[(14, 7, 10), uint64],) {
  %510 = @func_1483() /* ty=Tensor[(14, 7, 10), uint64] */;
  (%510,)
}

def @func_6508() -> (Tensor[(14, 7, 10), uint64],) {
  %511 = @func_4304() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %512 = %511.0;
  (%512,)
}

def @func_7316() -> (Tensor[(14, 7, 10), uint64], Tensor[(182), float64]) {
  %513 = @func_938() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %514 = @func_2560() /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), uint64]) */;
  %515 = %513.0;
  %516 = %514.0;
  (%515, %516)
}

def @func_11149() -> (Tensor[(14, 7, 10), uint64], Tensor[(182), float64]) {
  %517 = @func_1035() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) */;
  %518 = %517.2;
  %519 = @func_7921() /* ty=Tensor[(182), float64] */;
  (%518, %519)
}

def @func_9141() -> Tensor[(182), float32] {
  %520 = @func_2155() /* ty=(Tensor[(182), float32],) */;
  %520.0
}

def @func_1717() -> (Tensor[(14, 7, 10), float32], Tensor[(5, 14, 3), bool], Tensor[(210), bool], Tensor[(182), float64]) {
  %521 = @func_1281() /* ty=(Tensor[(14, 7, 10), float32],) */;
  %522 = cast(meta[relay.Constant][32] /* ty=Tensor[(210), bool] */, dtype="bool") /* ty=Tensor[(210), bool] */;
  %523 = reshape(%522, newshape=[5, 14, 3]) /* ty=Tensor[(5, 14, 3), bool] */;
  %524 = @func_830() /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), uint64]) */;
  %525 = %524.0;
  %526 = cast(%525, dtype="float64") /* ty=Tensor[(182), float64] */;
  %527 = log(%526) /* ty=Tensor[(182), float64] */;
  %528 = cast(%527, dtype="float64") /* ty=Tensor[(182), float64] */;
  %529 = %521.0;
  %530 = @func_1457(%523) /* ty=Tensor[(5, 14, 3), bool] */;
  %531 = sigmoid(%528) /* ty=Tensor[(182), float64] */;
  (%529, %530, meta[relay.Constant][32] /* ty=Tensor[(210), bool] */, %531)
}

def @func_1041() -> Tensor[(182), float64] {
  %532 = @func_830() /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), uint64]) */;
  %532.0
}

def @func_4251() -> Tensor[(14, 7, 10), float32] {
  %533 = @func_2609() /* ty=(Tensor[(14, 7, 10), float32],) */;
  %533.0
}

def @func_11767() -> (Tensor[(5, 14, 3), bool], Tensor[(176), float32]) {
  %534 = @func_3434() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(182), float32], Tensor[(5, 14, 3), bool]) */;
  %535 = @func_4466() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(176), float32], Tensor[(8, 2, 11), bool]) */;
  %536 = %534.2;
  %537 = %535.1;
  (%536, %537)
}

def @func_3983() -> (Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) {
  %538 = @func_1321() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %539 = %538.0;
  %540 = @func_1483() /* ty=Tensor[(14, 7, 10), uint64] */;
  (%539, %540)
}

def @func_8951(%var_8910: Tensor[(182), float64], %var_8938: Tensor[(3360), int8]) -> (Tensor[(8, 2, 11), float32], Tensor[(8, 2, 11), float32], Tensor[(182), float64], Tensor[(182), float64], Tensor[(540), bool], Tensor[(3360), int8], Tensor[(3360), int8]) {
  %541 = @func_6245() /* ty=(Tensor[(4, 15, 5), uint8], Tensor[(14, 7, 10), bool], Tensor[(8, 2, 11), float32], float32, Tensor[(176), float32]) */;
  %542 = @func_6245() /* ty=(Tensor[(4, 15, 5), uint8], Tensor[(14, 7, 10), bool], Tensor[(8, 2, 11), float32], float32, Tensor[(176), float32]) */;
  %543 = cast(%var_8910, dtype="float64") /* ty=Tensor[(182), float64] */;
  %544 = reshape(%543, newshape=[182]) /* ty=Tensor[(182), float64] */;
  %545 = @func_5229() /* ty=(Tensor[(182), float64], Tensor[(16, 15, 14), int8], Tensor[(3360), int8], Tensor[(480, 2), int8], Tensor[(6, 6, 15), bool], Tensor[(540), bool]) */;
  %546 = cast(%var_8938, dtype="int8") /* ty=Tensor[(3360), int8] */;
  %547 = reshape(%546, newshape=[3360]) /* ty=Tensor[(3360), int8] */;
  %548 = @func_5688(%547) /* ty=(Tensor[(14, 7, 10), float32], Tensor[(13, 8, 15), float64], Tensor[(3360), int8]) */;
  %549 = %541.2;
  %550 = %542.2;
  %551 = @func_2311(%544) /* ty=Tensor[(182), float64] */;
  %552 = %545.5;
  %553 = %548.2;
  (%549, %550, %551, %var_8910, %552, %553, %var_8938)
}

def @func_9652(%var_9642: uint64, %var_9643: Tensor[(15, 16, 11), uint64]) -> Tensor[(15, 16, 11), uint64] {
  %554 = cast(%var_9642, dtype="uint64") /* ty=uint64 */;
  %555 = cast(%var_9643, dtype="uint64") /* ty=Tensor[(15, 16, 11), uint64] */;
  left_shift(%554, %555) /* ty=Tensor[(15, 16, 11), uint64] */
}

def @func_3798() -> (Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) {
  %556 = @func_1035() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) */;
  %557 = @func_1596() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %558 = %556.2;
  %559 = %557.0;
  (%558, %559)
}

def @func_4124(%var_4079: Tensor[(11, 13, 14), float32]) -> (Tensor[(?, 13, 14), int64], Tensor[(11, 13, 14), uint64], Tensor[(14, 7, 10), float32], Tensor[(1, 13, 14), float32], Tensor[(14, 7, 10), bool]) {
  %560 = @func_1338() /* ty=Tensor[(182), float64] */;
  %561 = cast(%560, dtype="float32") /* ty=Tensor[(182), float32] */;
  %562 = reshape(%561, newshape=[1, 13, 14]) /* ty=Tensor[(1, 13, 14), float32] */;
  %563 = @func_492(%562) /* ty=Tensor[(1, 13, 14), float32] */;
  %564 = cast(%560, dtype="int64") /* ty=Tensor[(182), int64] */;
  %565 = shape_of(%563, dtype="int32") /* ty=Tensor[(3), int32] */;
  %566 = cast(%563, dtype="int64") /* ty=Tensor[(1, 13, 14), int64] */;
  %567 = dyn.reshape(%564, %565, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %568 = cast(%563, dtype="uint64") /* ty=Tensor[(1, 13, 14), uint64] */;
  %569 = cast(%var_4079, dtype="uint64") /* ty=Tensor[(11, 13, 14), uint64] */;
  %570 = @func_2399() /* ty=(Tensor[(14, 7, 10), float32], Tensor[(182), float32]) */;
  %571 = cast(%563, dtype="float32") /* ty=Tensor[(1, 13, 14), float32] */;
  %572 = @func_1157() /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), bool]) */;
  %573 = subtract(%566, %567) /* ty=Tensor[(?, 13, 14), int64] */;
  %574 = bitwise_xor(%568, %569) /* ty=Tensor[(11, 13, 14), uint64] */;
  %575 = %570.0;
  %576 = sin(%571) /* ty=Tensor[(1, 13, 14), float32] */;
  %577 = %572.1;
  (%573, %574, %575, %576, %577)
}

def @func_11974() -> (Tensor[(182), float64], Tensor[(14, 7, 10), bool]) {
  %578 = @func_5963() /* ty=(Tensor[(182), float64], Tensor[(182), float64], Tensor[(14, 7, 10), float64]) */;
  %579 = @func_3516() /* ty=(Tensor[(14, 7, 10), bool], Tensor[(14, 7, 10), uint64]) */;
  %580 = %578.1;
  %581 = %579.0;
  (%580, %581)
}

def @func_10913() -> (Tensor[(14, 7, 10), uint64], Tensor[(182), float64]) {
  %582 = @func_5963() /* ty=(Tensor[(182), float64], Tensor[(182), float64], Tensor[(14, 7, 10), float64]) */;
  %583 = @func_8797() /* ty=Tensor[(14, 7, 10), uint64] */;
  %584 = %582.1;
  (%583, %584)
}

def @func_4376(%var_4348: Tensor[(6, 6, 15), bool]) -> (Tensor[(6, 6, 15), bool],) {
  %585 = cast(%var_4348, dtype="bool") /* ty=Tensor[(6, 6, 15), bool] */;
  %586 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(6, 6, 15), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %587 = cast(meta[relay.Constant][33] /* ty=Tensor[(6, 6, 15), bool] */, dtype="bool") /* ty=Tensor[(6, 6, 15), bool] */;
  %588 = dyn.reshape(%585, %586, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %589 = logical_and(%587, %588) /* ty=Tensor[(6, 6, 15), bool] */;
  (%589,)
}

def @func_6728() -> Tensor[(182), float32] {
  %590 = @func_3434() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(182), float32], Tensor[(5, 14, 3), bool]) */;
  %590.1
}

def @func_3568(%var_3553: Tensor[(14, 7, 10), uint64]) -> (Tensor[(14, 7, 10), float32],) {
  %591 = @func_1415() /* ty=(Tensor[(182), float64], Tensor[(1, 13, 14), float32], Tensor[(14, 7, 10), uint64]) */;
  %592 = %591.2;
  %593 = cast(%var_3553, dtype="float32") /* ty=Tensor[(14, 7, 10), float32] */;
  %594 = shape_of(%592, dtype="int32") /* ty=Tensor[(3), int32] */;
  %595 = cast(%592, dtype="float32") /* ty=Tensor[(14, 7, 10), float32] */;
  %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %597 = power(%595, %596) /* ty=Tensor[(14, 7, 10), float32] */;
  (%597,)
}

def @func_10611(%var_10581: Tensor[(540), bool]) -> (Tensor[(14, 7, 10), uint64], Tensor[(672), int8], Tensor[(14, 7, 10), float64], Tensor[(14, 7, 10), uint64], Tensor[(176), float32], Tensor[(3360), int8], Tensor[(540), bool]) {
  %598 = @func_2115() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(672), int8]) */;
  %599 = cast(meta[relay.Constant][34] /* ty=Tensor[(176), float32] */, dtype="float32") /* ty=Tensor[(176), float32] */;
  %600 = cast(meta[relay.Constant][35] /* ty=Tensor[(3360), int8] */, dtype="int8") /* ty=Tensor[(3360), int8] */;
  %601 = cast(%var_10581, dtype="bool") /* ty=Tensor[(540), bool] */;
  %602 = reshape(%599, newshape=[176]) /* ty=Tensor[(176), float32] */;
  %603 = reshape(%600, newshape=[3360]) /* ty=Tensor[(3360), int8] */;
  %604 = reshape(%601, newshape=[9, 60]) /* ty=Tensor[(9, 60), bool] */;
  %605 = @func_9403(%602, %603, %604) /* ty=(Tensor[(14, 7, 10), float32], Tensor[(14, 7, 10), uint64], Tensor[(3360), int16], Tensor[(14, 7, 10), uint64], Tensor[(176), float32], Tensor[(3360), float32], Tensor[(4, 15, 5), uint8], Tensor[(540), bool], Tensor[(182), float64], Tensor[(9, 60), bool]) */;
  %606 = @func_5177() /* ty=Tensor[(14, 7, 10), uint64] */;
  %607 = %598.1;
  %608 = @func_7837() /* ty=Tensor[(14, 7, 10), float64] */;
  %609 = %605.3;
  (%606, %607, %608, %609, meta[relay.Constant][34] /* ty=Tensor[(176), float32] */, meta[relay.Constant][35] /* ty=Tensor[(3360), int8] */, %var_10581)
}

def @func_3193() -> (Tensor[(182), float64], Tensor[(14, 7, 10), uint64]) {
  %610 = @func_1003() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %611 = @func_1821() /* ty=Tensor[(182), float64] */;
  %612 = %610.0;
  (%611, %612)
}

def @func_5118() -> (Tensor[(14, 7, 10), uint64],) {
  %613 = @func_830() /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), uint64]) */;
  %614 = %613.1;
  (%614,)
}

def @func_6318(%var_6289: float64) -> (Tensor[(14, 7, 10), float32], Tensor[(182), float32], Tensor[(14, 7, 10), float32], float64, Tensor[(13, 8, 15), float64], Tensor[(945), uint8], Tensor[(14, 7, 10), uint64]) {
  %615 = @func_2609() /* ty=(Tensor[(14, 7, 10), float32],) */;
  %616 = @func_2925() /* ty=(Tensor[(4, 15, 5), uint8], Tensor[(182), float32]) */;
  %617 = cast(%var_6289, dtype="float64") /* ty=float64 */;
  %618 = reshape(%617, newshape=[]) /* ty=float64 */;
  %619 = @func_4691(%618) /* ty=(Tensor[(14, 7, 10), float32], Tensor[(7, 2, 15), float64], float64, Tensor[(14, 7, 10), float32], Tensor[(143, 14), float32], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) */;
  %620 = cast(meta[relay.Constant][36] /* ty=Tensor[(945), uint8] */, dtype="uint8") /* ty=Tensor[(945), uint8] */;
  %621 = cast(meta[relay.Constant][36] /* ty=Tensor[(945), uint8] */, dtype="uint8") /* ty=Tensor[(945), uint8] */;
  %622 = reshape(%620, newshape=[15, 9, 7]) /* ty=Tensor[(15, 9, 7), uint8] */;
  %623 = reshape(%621, newshape=[15, 9, 7]) /* ty=Tensor[(15, 9, 7), uint8] */;
  %624 = @func_3068(%622, %623) /* ty=(Tensor[(15, 9, 7), bool], Tensor[(13, 8, 15), float64], Tensor[(182), float32], Tensor[(182), float64]) */;
  %625 = @func_1662() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %626 = %615.0;
  %627 = %616.1;
  %628 = %619.0;
  %629 = %624.1;
  %630 = %625.0;
  (%626, %627, %628, %var_6289, %629, meta[relay.Constant][36] /* ty=Tensor[(945), uint8] */, %630)
}

def @func_11537() -> (Tensor[(182), float64], Tensor[(14, 7, 10), float32], Tensor[(14, 7, 10), uint64], Tensor[(960), int8]) {
  %631 = @func_1281() /* ty=(Tensor[(14, 7, 10), float32],) */;
  %632 = @func_3516() /* ty=(Tensor[(14, 7, 10), bool], Tensor[(14, 7, 10), uint64]) */;
  %633 = @func_1821() /* ty=Tensor[(182), float64] */;
  %634 = cast(%633, dtype="float64") /* ty=Tensor[(182), float64] */;
  %635 = reshape(%634, newshape=[182]) /* ty=Tensor[(182), float64] */;
  %636 = @func_6931(%635) /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(3360), int8], Tensor[(960), int8], Tensor[(182), float32], Tensor[(15, 12, 15), float32]) */;
  %637 = %631.0;
  %638 = %632.1;
  %639 = %636.2;
  (%633, %637, %638, %639)
}

def @func_1281() -> (Tensor[(14, 7, 10), float32],) {
  %640 = @func_865() /* ty=Tensor[(14, 7, 10), uint64] */;
  %641 = cast(%640, dtype="float32") /* ty=Tensor[(14, 7, 10), float32] */;
  %642 = erf(%641) /* ty=Tensor[(14, 7, 10), float32] */;
  (%642,)
}

def @func_8015(%var_7982: Tensor[(15, 63), uint8]) -> (Tensor[(14, 7, 10), float32], Tensor[(14, 7, 10), float64], Tensor[(15, 63), uint8], Tensor[(182), float32]) {
  %643 = @func_6456() /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), float32]) */;
  %644 = cast(%var_7982, dtype="uint8") /* ty=Tensor[(15, 63), uint8] */;
  %645 = reshape(%644, newshape=[945]) /* ty=Tensor[(945), uint8] */;
  %646 = @func_3651(%645) /* ty=(Tensor[(14, 7, 10), float64], Tensor[(13, 8, 15), float64], Tensor[(945), uint8]) */;
  %647 = %643.1;
  %648 = %646.0;
  %649 = @func_2362() /* ty=Tensor[(182), float32] */;
  (%647, %648, %var_7982, %649)
}

def @func_3516() -> (Tensor[(14, 7, 10), bool], Tensor[(14, 7, 10), uint64]) {
  %650 = @func_2901() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(182), uint64]) */;
  %651 = %650.0;
  %652 = cast(meta[relay.Constant][37] /* ty=Tensor[(14, 7, 10), uint64] */, dtype="bool") /* ty=Tensor[(14, 7, 10), bool] */;
  %653 = shape_of(%651, dtype="int32") /* ty=Tensor[(3), int32] */;
  %654 = cast(%651, dtype="bool") /* ty=Tensor[(14, 7, 10), bool] */;
  %655 = dyn.reshape(%652, %653, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %656 = @func_1596() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %657 = logical_or(%654, %655) /* ty=Tensor[(14, 7, 10), bool] */;
  %658 = %656.0;
  (%657, %658)
}

def @func_2843() -> (Tensor[(14, 7, 10), uint64], Tensor[(4, 15, 5), uint8]) {
  %659 = @func_1035() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) */;
  %660 = cast(meta[relay.Constant][38] /* ty=Tensor[(4, 15, 5), float32] */, dtype="float32") /* ty=Tensor[(4, 15, 5), float32] */;
  %661 = rsqrt(%660) /* ty=Tensor[(4, 15, 5), float32] */;
  %662 = cast(%661, dtype="float64") /* ty=Tensor[(4, 15, 5), float64] */;
  %663 = sqrt(%662) /* ty=Tensor[(4, 15, 5), float64] */;
  %664 = cast(meta[relay.Constant][38] /* ty=Tensor[(4, 15, 5), float32] */, dtype="uint8") /* ty=Tensor[(4, 15, 5), uint8] */;
  %665 = shape_of(%663, dtype="int32") /* ty=Tensor[(3), int32] */;
  %666 = cast(%663, dtype="uint8") /* ty=Tensor[(4, 15, 5), uint8] */;
  %667 = dyn.reshape(%664, %665, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %668 = %659.0;
  %669 = bitwise_xor(%666, %667) /* ty=Tensor[(4, 15, 5), uint8] */;
  (%668, %669)
}

def @func_2540(%var_2521: Tensor[(14, 7, 10), uint64]) -> (Tensor[(14, 7, 10), bool], Tensor[(13, 8, 15), float64], Tensor[(1560), float64]) {
  %670 = @func_1321() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %671 = %670.0;
  %672 = cast(%var_2521, dtype="bool") /* ty=Tensor[(14, 7, 10), bool] */;
  %673 = shape_of(%671, dtype="int32") /* ty=Tensor[(3), int32] */;
  %674 = cast(%671, dtype="bool") /* ty=Tensor[(14, 7, 10), bool] */;
  %675 = dyn.reshape(%672, %673, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %676 = cast(meta[relay.Constant][39] /* ty=Tensor[(1560), float64] */, dtype="float64") /* ty=Tensor[(1560), float64] */;
  %677 = reshape(%676, newshape=[13, 8, 15]) /* ty=Tensor[(13, 8, 15), float64] */;
  %678 = less(%674, %675) /* ty=Tensor[(14, 7, 10), bool] */;
  %679 = @func_177(%677) /* ty=Tensor[(13, 8, 15), float64] */;
  (%678, %679, meta[relay.Constant][39] /* ty=Tensor[(1560), float64] */)
}

def @func_10057() -> Tensor[(14, 7, 10), uint64] {
  @func_1483() /* ty=Tensor[(14, 7, 10), uint64] */
}

def @func_3322() -> Tensor[(14, 7, 10), bool] {
  %680 = @func_1157() /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), bool]) */;
  %680.1
}

def @func_6658() -> (Tensor[(14, 7, 10), uint64],) {
  %681 = @func_6072() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(176), float32]) */;
  %682 = %681.0;
  (%682,)
}

def @func_1374() -> (Tensor[(14, 7, 10), uint64],) {
  %683 = @func_1003() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %684 = %683.0;
  (%684,)
}

def @func_6092() -> (Tensor[(182), float64], Tensor[(14, 7, 10), uint64]) {
  %685 = @func_5963() /* ty=(Tensor[(182), float64], Tensor[(182), float64], Tensor[(14, 7, 10), float64]) */;
  %686 = @func_2642() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %687 = %685.0;
  %688 = %686.0;
  (%687, %688)
}

def @func_2552() -> Tensor[(182), float32] {
  @func_2362() /* ty=Tensor[(182), float32] */
}

def @func_4537() -> (Tensor[(14, 7, 10), uint64],) {
  %689 = @func_938() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %690 = %689.0;
  (%690,)
}

def @func_5688(%var_5677: Tensor[(3360), int8]) -> (Tensor[(14, 7, 10), float32], Tensor[(13, 8, 15), float64], Tensor[(3360), int8]) {
  %691 = @func_2609() /* ty=(Tensor[(14, 7, 10), float32],) */;
  %692 = cast(%var_5677, dtype="int8") /* ty=Tensor[(3360), int8] */;
  %693 = reshape(%692, newshape=[3360]) /* ty=Tensor[(3360), int8] */;
  %694 = @func_3213(%693) /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(16, 15, 1), float64], Tensor[(3360), int8], Tensor[(960), int8], Tensor[(13, 8, 15), float64], Tensor[(1, 945), uint8]) */;
  %695 = %691.0;
  %696 = %694.4;
  (%695, %696, %var_5677)
}

def @func_10743(%var_10741: Tensor[(176), float32]) -> (Tensor[(182), float32], Tensor[(1, 13, 14), float32], Tensor[(176, 1), float32], Tensor[(176), float32]) {
  %697 = @func_2155() /* ty=(Tensor[(182), float32],) */;
  %698 = %697.0;
  %699 = cast(%698, dtype="float32") /* ty=Tensor[(182), float32] */;
  %700 = reshape(%699, newshape=[1, 13, 14]) /* ty=Tensor[(1, 13, 14), float32] */;
  %701 = cast(%var_10741, dtype="float32") /* ty=Tensor[(176), float32] */;
  %702 = reshape(%701, newshape=[176, 1]) /* ty=Tensor[(176, 1), float32] */;
  %703 = @func_7135(%702) /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(8, 2, 11), float32], Tensor[(176, 1), float32]) */;
  %704 = @func_492(%700) /* ty=Tensor[(1, 13, 14), float32] */;
  %705 = %703.4;
  (%698, %704, %705, %var_10741)
}

def @func_9824() -> Tensor[(14, 7, 10), uint64] {
  %706 = @func_5587() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %706.0
}

def @func_10705() -> (Tensor[(14, 7, 10), float32], Tensor[(14, 7, 10), uint64], Tensor[(4, 15, 5), uint8], Tensor[(14, 7, 10), uint64]) {
  %707 = @func_2609() /* ty=(Tensor[(14, 7, 10), float32],) */;
  %708 = @func_10120() /* ty=(Tensor[(4, 15, 5), uint8],) */;
  %709 = @func_1374() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %710 = %707.0;
  %711 = @func_7710() /* ty=Tensor[(14, 7, 10), uint64] */;
  %712 = %708.0;
  %713 = %709.0;
  (%710, %711, %712, %713)
}

def @func_2115() -> (Tensor[(14, 7, 10), uint64], Tensor[(672), int8]) {
  %714 = @func_2005() /* ty=(Tensor[(14, 7, 10), float32], Tensor[(14, 7, 10), uint64], Tensor[(672), int8], Tensor[(14, 7, 10), uint64], Tensor[(13, 8, 15), float64], Tensor[(1560, 1), float64]) */;
  %715 = @func_1483() /* ty=Tensor[(14, 7, 10), uint64] */;
  %716 = %714.2;
  (%715, %716)
}

def @func_3538() -> (Tensor[(14, 7, 10), float64],) {
  %717 = @func_1374() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %718 = %717.0;
  %719 = cast(%718, dtype="float64") /* ty=Tensor[(14, 7, 10), float64] */;
  %720 = atan(%719) /* ty=Tensor[(14, 7, 10), float64] */;
  (%720,)
}

def @func_11286(%var_11274: Tensor[(1, 7, 9), uint16], %var_11275: Tensor[(8, 7, 9), uint16]) -> (Tensor[(8, 7, 9), bool],) {
  %721 = cast(%var_11274, dtype="bool") /* ty=Tensor[(1, 7, 9), bool] */;
  %722 = cast(%var_11275, dtype="bool") /* ty=Tensor[(8, 7, 9), bool] */;
  %723 = equal(%721, %722) /* ty=Tensor[(8, 7, 9), bool] */;
  (%723,)
}

def @func_7216() -> Tensor[(182), float32] {
  %724 = @func_2399() /* ty=(Tensor[(14, 7, 10), float32], Tensor[(182), float32]) */;
  %724.1
}

def @func_3687() -> Tensor[(14, 7, 10), uint64] {
  %725 = @func_1415() /* ty=(Tensor[(182), float64], Tensor[(1, 13, 14), float32], Tensor[(14, 7, 10), uint64]) */;
  %725.2
}

def @func_3213(%var_3202: Tensor[(3360), int8]) -> (Tensor[(14, 7, 10), uint64], Tensor[(16, 15, 1), float64], Tensor[(3360), int8], Tensor[(960), int8], Tensor[(13, 8, 15), float64], Tensor[(1, 945), uint8]) {
  %726 = cast(%var_3202, dtype="int8") /* ty=Tensor[(3360), int8] */;
  %727 = cast(meta[relay.Constant][40] /* ty=Tensor[(960), int8] */, dtype="int8") /* ty=Tensor[(960), int8] */;
  %728 = reshape(%726, newshape=[16, 15, 14]) /* ty=Tensor[(16, 15, 14), int8] */;
  %729 = reshape(%727, newshape=[16, 15, 4]) /* ty=Tensor[(16, 15, 4), int8] */;
  %730 = @func_2494(%728, %729) /* ty=(Tensor[(16, 15, 14), int8], Tensor[(16, 15, 4), bool], Tensor[(16, 15, 1), float64], Tensor[(14, 7, 10), uint64]) */;
  %731 = cast(meta[relay.Constant][41] /* ty=Tensor[(1, 945), uint8] */, dtype="uint8") /* ty=Tensor[(1, 945), uint8] */;
  %732 = cast(meta[relay.Constant][41] /* ty=Tensor[(1, 945), uint8] */, dtype="uint8") /* ty=Tensor[(1, 945), uint8] */;
  %733 = reshape(%731, newshape=[15, 9, 7]) /* ty=Tensor[(15, 9, 7), uint8] */;
  %734 = reshape(%732, newshape=[15, 9, 7]) /* ty=Tensor[(15, 9, 7), uint8] */;
  %735 = @func_3068(%733, %734) /* ty=(Tensor[(15, 9, 7), bool], Tensor[(13, 8, 15), float64], Tensor[(182), float32], Tensor[(182), float64]) */;
  %736 = @func_1483() /* ty=Tensor[(14, 7, 10), uint64] */;
  %737 = %730.2;
  %738 = %735.1;
  (%736, %737, %var_3202, meta[relay.Constant][40] /* ty=Tensor[(960), int8] */, %738, meta[relay.Constant][41] /* ty=Tensor[(1, 945), uint8] */)
}

def @func_5177() -> Tensor[(14, 7, 10), uint64] {
  @func_865() /* ty=Tensor[(14, 7, 10), uint64] */
}

def @func_10241() -> (Tensor[(14, 7, 10), uint64],) {
  %739 = @func_7179() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %740 = %739.0;
  (%740,)
}

def @func_1415() -> (Tensor[(182), float64], Tensor[(1, 13, 14), float32], Tensor[(14, 7, 10), uint64]) {
  %741 = @func_1338() /* ty=Tensor[(182), float64] */;
  %742 = cast(%741, dtype="float32") /* ty=Tensor[(182), float32] */;
  %743 = reshape(%742, newshape=[1, 13, 14]) /* ty=Tensor[(1, 13, 14), float32] */;
  %744 = @func_938() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %745 = @func_492(%743) /* ty=Tensor[(1, 13, 14), float32] */;
  %746 = %744.0;
  (%741, %745, %746)
}

def @func_3477(%var_3473: Tensor[(9, 16, 16), float64]) -> Tensor[(9, 16, 16), uint32] {
  %747 = cast(meta[relay.Constant][42] /* ty=Tensor[(9, 16, 16), float64] */, dtype="float64") /* ty=Tensor[(9, 16, 16), float64] */;
  %748 = sigmoid(%747) /* ty=Tensor[(9, 16, 16), float64] */;
  %749 = cast(%var_3473, dtype="uint32") /* ty=Tensor[(9, 16, 16), uint32] */;
  %750 = shape_of(%748, dtype="int32") /* ty=Tensor[(3), int32] */;
  %751 = cast(%748, dtype="uint32") /* ty=Tensor[(9, 16, 16), uint32] */;
  %752 = dyn.reshape(%749, %750, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  right_shift(%751, %752) /* ty=Tensor[(9, 16, 16), uint32] */
}

def @func_11314() -> Tensor[(14, 7, 10), uint64] {
  %753 = @func_9705() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %753.0
}

def @func_1157() -> (Tensor[(182), float64], Tensor[(14, 7, 10), bool]) {
  %754 = @func_1003() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %755 = %754.0;
  %756 = @func_1003() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %757 = %756.0;
  %758 = cast(%757, dtype="bool") /* ty=Tensor[(14, 7, 10), bool] */;
  %759 = shape_of(%755, dtype="int32") /* ty=Tensor[(3), int32] */;
  %760 = cast(%755, dtype="bool") /* ty=Tensor[(14, 7, 10), bool] */;
  %761 = dyn.reshape(%758, %759, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %762 = @func_1041() /* ty=Tensor[(182), float64] */;
  %763 = greater(%760, %761) /* ty=Tensor[(14, 7, 10), bool] */;
  (%762, %763)
}

def @func_11163() -> Tensor[(182), float32] {
  @func_6728() /* ty=Tensor[(182), float32] */
}

def @func_5856() -> (Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) {
  %764 = @func_1321() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %765 = @func_865() /* ty=Tensor[(14, 7, 10), uint64] */;
  %766 = %764.0;
  (%765, %766)
}

def @func_1457(%var_1447: Tensor[(5, 14, 3), bool]) -> Tensor[(5, 14, 3), bool] {
  %767 = cast(%var_1447, dtype="bool") /* ty=Tensor[(5, 14, 3), bool] */;
  %768 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(5, 14, 3), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %769 = cast(meta[relay.Constant][43] /* ty=Tensor[(5, 14, 3), bool] */, dtype="bool") /* ty=Tensor[(5, 14, 3), bool] */;
  %770 = dyn.reshape(%767, %768, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%769, %770) /* ty=Tensor[(5, 14, 3), bool] */
}

def @func_6456() -> (Tensor[(182), float64], Tensor[(14, 7, 10), float32]) {
  %771 = @func_2954() /* ty=(Tensor[(182), float64],) */;
  %772 = %771.0;
  %773 = @func_4251() /* ty=Tensor[(14, 7, 10), float32] */;
  (%772, %773)
}

def @func_1338() -> Tensor[(182), float64] {
  @func_1041() /* ty=Tensor[(182), float64] */
}

def @func_8125() -> (Tensor[(182), float64],) {
  %774 = @func_1338() /* ty=Tensor[(182), float64] */;
  (%774,)
}

def @func_11796() -> (Tensor[(182), float32],) {
  %775 = @func_6728() /* ty=Tensor[(182), float32] */;
  (%775,)
}

def @func_2850() -> Tensor[(14, 7, 10), uint64] {
  @func_2200() /* ty=Tensor[(14, 7, 10), uint64] */
}

def @func_2083() -> (Tensor[(14, 7, 10), uint64],) {
  %776 = @func_1321() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %777 = %776.0;
  (%777,)
}

def @func_7710() -> Tensor[(14, 7, 10), uint64] {
  %778 = @func_6860() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %778.0
}

def @func_7606() -> (Tensor[(182), float64],) {
  %779 = @func_1041() /* ty=Tensor[(182), float64] */;
  (%779,)
}

def @func_7483(%var_7479: Tensor[(3360), int8]) -> (Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(3360), int8]) {
  %780 = @func_5008() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %781 = cast(%var_7479, dtype="int8") /* ty=Tensor[(3360), int8] */;
  %782 = reshape(%781, newshape=[3360]) /* ty=Tensor[(3360), int8] */;
  %783 = @func_3213(%782) /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(16, 15, 1), float64], Tensor[(3360), int8], Tensor[(960), int8], Tensor[(13, 8, 15), float64], Tensor[(1, 945), uint8]) */;
  %784 = %780.0;
  %785 = %783.0;
  (%784, %785, %var_7479)
}

def @func_5827() -> (Tensor[(182), float64],) {
  %786 = @func_2560() /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), uint64]) */;
  %787 = %786.0;
  (%787,)
}

def @func_3651(%var_3638: Tensor[(945), uint8]) -> (Tensor[(14, 7, 10), float64], Tensor[(13, 8, 15), float64], Tensor[(945), uint8]) {
  %788 = @func_1035() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) */;
  %789 = %788.0;
  %790 = cast(%789, dtype="float64") /* ty=Tensor[(14, 7, 10), float64] */;
  %791 = cast(%var_3638, dtype="uint8") /* ty=Tensor[(945), uint8] */;
  %792 = cast(%var_3638, dtype="uint8") /* ty=Tensor[(945), uint8] */;
  %793 = reshape(%791, newshape=[15, 9, 7]) /* ty=Tensor[(15, 9, 7), uint8] */;
  %794 = reshape(%792, newshape=[15, 9, 7]) /* ty=Tensor[(15, 9, 7), uint8] */;
  %795 = @func_3068(%793, %794) /* ty=(Tensor[(15, 9, 7), bool], Tensor[(13, 8, 15), float64], Tensor[(182), float32], Tensor[(182), float64]) */;
  %796 = asinh(%790) /* ty=Tensor[(14, 7, 10), float64] */;
  %797 = %795.1;
  (%796, %797, %var_3638)
}

def @func_5587() -> (Tensor[(14, 7, 10), uint64],) {
  %798 = @func_2901() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(182), uint64]) */;
  %799 = %798.0;
  (%799,)
}

def @func_8232(%var_8205: Tensor[(11, 6, 8), float32]) -> Tensor[(11, 6, 8), float32] {
  %800 = @func_7071() /* ty=(Tensor[(11, 6, 8), int32], Tensor[(11, 6, 8), float32]) */;
  %801 = %800.1;
  %802 = cast(%var_8205, dtype="float32") /* ty=Tensor[(11, 6, 8), float32] */;
  %803 = shape_of(%801, dtype="int32") /* ty=Tensor[(3), int32] */;
  %804 = cast(%801, dtype="float32") /* ty=Tensor[(11, 6, 8), float32] */;
  %805 = dyn.reshape(%802, %803, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%804, %805) /* ty=Tensor[(11, 6, 8), float32] */
}

def @func_8576() -> (Tensor[(14, 7, 10), uint64],) {
  %806 = @func_5856() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) */;
  %807 = %806.1;
  (%807,)
}

def @func_8725() -> (Tensor[(14, 7, 10), uint64], Tensor[(182), float32]) {
  %808 = @func_1374() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %809 = %808.0;
  %810 = @func_4209() /* ty=Tensor[(182), float32] */;
  (%809, %810)
}

def @func_7903() -> Tensor[(14, 7, 10), uint64] {
  %811 = @func_2115() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(672), int8]) */;
  %811.0
}

def @func_4890(%var_4850: Tensor[(182), float64], %var_4862: Tensor[(540), bool]) -> (Tensor[(182), bool], Tensor[(6, 6, 15), bool], Tensor[(540), bool], Tensor[(14, 7, 10), bool], Tensor[(14, 7, 10), bool]) {
  %812 = @func_1041() /* ty=Tensor[(182), float64] */;
  %813 = cast(%var_4850, dtype="bool") /* ty=Tensor[(182), bool] */;
  %814 = shape_of(%812, dtype="int32") /* ty=Tensor[(1), int32] */;
  %815 = cast(%812, dtype="bool") /* ty=Tensor[(182), bool] */;
  %816 = dyn.reshape(%813, %814, newshape=[]) /* ty=Tensor[(?), bool] */;
  %817 = cast(%var_4862, dtype="bool") /* ty=Tensor[(540), bool] */;
  %818 = reshape(%817, newshape=[6, 6, 15]) /* ty=Tensor[(6, 6, 15), bool] */;
  %819 = @func_4376(%818) /* ty=(Tensor[(6, 6, 15), bool],) */;
  %820 = @func_3516() /* ty=(Tensor[(14, 7, 10), bool], Tensor[(14, 7, 10), uint64]) */;
  %821 = less_equal(%815, %816) /* ty=Tensor[(182), bool] */;
  %822 = %819.0;
  %823 = %820.0;
  %824 = @func_3322() /* ty=Tensor[(14, 7, 10), bool] */;
  (%821, %822, %var_4862, %823, %824)
}

def @func_2155() -> (Tensor[(182), float32],) {
  %825 = @func_1808() /* ty=Tensor[(182), float64] */;
  %826 = cast(%825, dtype="float32") /* ty=Tensor[(182), float32] */;
  %827 = tan(%826) /* ty=Tensor[(182), float32] */;
  (%827,)
}

def @func_1253(%var_1230: Tensor[(14, 7, 10), uint64]) -> (Tensor[(14, 7, 10), int16], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), bool]) {
  %828 = @func_1003() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %829 = %828.0;
  %830 = cast(%var_1230, dtype="int16") /* ty=Tensor[(14, 7, 10), int16] */;
  %831 = shape_of(%829, dtype="int32") /* ty=Tensor[(3), int32] */;
  %832 = cast(%829, dtype="int16") /* ty=Tensor[(14, 7, 10), int16] */;
  %833 = dyn.reshape(%830, %831, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %834 = cast(meta[relay.Constant][44] /* ty=Tensor[(14, 7, 10), uint64] */, dtype="bool") /* ty=Tensor[(14, 7, 10), bool] */;
  %835 = shape_of(%var_1230, dtype="int32") /* ty=Tensor[(3), int32] */;
  %836 = cast(%var_1230, dtype="bool") /* ty=Tensor[(14, 7, 10), bool] */;
  %837 = dyn.reshape(%834, %835, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %838 = bitwise_and(%832, %833) /* ty=Tensor[(14, 7, 10), int16] */;
  %839 = @func_865() /* ty=Tensor[(14, 7, 10), uint64] */;
  %840 = greater_equal(%836, %837) /* ty=Tensor[(14, 7, 10), bool] */;
  (%838, %839, %840)
}

def @func_5992() -> Tensor[(182), float32] {
  @func_2552() /* ty=Tensor[(182), float32] */
}

def @func_8432() -> (Tensor[(182), float64], Tensor[(4, 14, 11), bool], int8) {
  %841 = @func_6970() /* ty=(Tensor[(182), float64],) */;
  %842 = cast(meta[relay.Constant][45] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %843 = reshape(%842, newshape=[]) /* ty=int8 */;
  %844 = @func_1574(%843) /* ty=(Tensor[(4, 14, 11), bool], Tensor[(182), float64], Tensor[(14, 7, 10), float64]) */;
  %845 = %841.0;
  %846 = %844.0;
  (%845, %846, meta[relay.Constant][45] /* ty=int8 */)
}

def @func_6072() -> (Tensor[(14, 7, 10), uint64], Tensor[(176), float32]) {
  %847 = @func_3798() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) */;
  %848 = @func_4466() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(176), float32], Tensor[(8, 2, 11), bool]) */;
  %849 = %847.0;
  %850 = %848.1;
  (%849, %850)
}

def @func_3758() -> Tensor[(4, 15, 5), uint8] {
  %851 = @func_2843() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(4, 15, 5), uint8]) */;
  %851.1
}

def @func_7179() -> (Tensor[(14, 7, 10), uint64],) {
  %852 = @func_5856() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) */;
  %853 = %852.1;
  (%853,)
}

def @func_177(%var_168: Tensor[(13, 8, 15), float64]) -> Tensor[(13, 8, 15), float64] {
  %854 = cast(%var_168, dtype="float64") /* ty=Tensor[(13, 8, 15), float64] */;
  rsqrt(%854) /* ty=Tensor[(13, 8, 15), float64] */
}

def @func_8499() -> (Tensor[(11, 6, 8), int32], Tensor[(182), bool], Tensor[(182), float32]) {
  %855 = @func_7071() /* ty=(Tensor[(11, 6, 8), int32], Tensor[(11, 6, 8), float32]) */;
  %856 = cast(meta[relay.Constant][46] /* ty=Tensor[(182), float32] */, dtype="float32") /* ty=Tensor[(182), float32] */;
  %857 = reshape(%856, newshape=[182]) /* ty=Tensor[(182), float32] */;
  %858 = @func_8069(%857) /* ty=(Tensor[(182), bool], Tensor[(182), uint64]) */;
  %859 = %855.0;
  %860 = %858.0;
  (%859, %860, meta[relay.Constant][46] /* ty=Tensor[(182), float32] */)
}

def @func_8861() -> (Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), bool]) {
  %861 = @func_2200() /* ty=Tensor[(14, 7, 10), uint64] */;
  %862 = cast(%861, dtype="uint64") /* ty=Tensor[(14, 7, 10), uint64] */;
  %863 = reshape(%862, newshape=[14, 7, 10]) /* ty=Tensor[(14, 7, 10), uint64] */;
  %864 = @func_1253(%863) /* ty=(Tensor[(14, 7, 10), int16], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), bool]) */;
  %865 = @func_1157() /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), bool]) */;
  %866 = %864.1;
  %867 = %865.1;
  (%861, %866, %867)
}

def @func_11871() -> (Tensor[(14, 7, 10), uint64], Tensor[(182), float32]) {
  %868 = @func_8499() /* ty=(Tensor[(11, 6, 8), int32], Tensor[(182), bool], Tensor[(182), float32]) */;
  %869 = @func_7710() /* ty=Tensor[(14, 7, 10), uint64] */;
  %870 = %868.2;
  (%869, %870)
}

def @func_11911() -> Tensor[(182), float32] {
  %871 = @func_2155() /* ty=(Tensor[(182), float32],) */;
  %871.0
}

def @func_1035() -> (Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) {
  %872 = @func_1003() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %873 = @func_938() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %874 = @func_830() /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), uint64]) */;
  %875 = @func_830() /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), uint64]) */;
  %876 = %872.0;
  %877 = %873.0;
  %878 = %874.1;
  %879 = %875.1;
  (%876, %877, %878, %879)
}

def @func_4343(%var_4328: Tensor[(176), float32]) -> (Tensor[(182), float32], Tensor[(8, 2, 11), float32], float32, Tensor[(176), float32], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), float32]) {
  %880 = @func_2399() /* ty=(Tensor[(14, 7, 10), float32], Tensor[(182), float32]) */;
  %881 = cast(2.33949f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %882 = cast(%var_4328, dtype="float32") /* ty=Tensor[(176), float32] */;
  %883 = reshape(%881, newshape=[]) /* ty=float32 */;
  %884 = reshape(%882, newshape=[8, 2, 11]) /* ty=Tensor[(8, 2, 11), float32] */;
  %885 = @func_3516() /* ty=(Tensor[(14, 7, 10), bool], Tensor[(14, 7, 10), uint64]) */;
  %886 = %880.1;
  %887 = @func_3449(%883, %884) /* ty=Tensor[(8, 2, 11), float32] */;
  %888 = %885.1;
  %889 = @func_4251() /* ty=Tensor[(14, 7, 10), float32] */;
  (%886, %887, 2.33949f /* ty=float32 */, %var_4328, %888, %889)
}

def @func_10358() -> (Tensor[(182), float64], Tensor[(14, 7, 10), uint64], Tensor[(168, 4), int8], Tensor[(6, 6, 15), bool], Tensor[(540), bool], Tensor[(182), float32], Tensor[(182), float32], Tensor[(14, 7, 10), uint64], Tensor[(16, 15, 14), float64]) {
  %890 = @func_9890() /* ty=(Tensor[(182), float64],) */;
  %891 = cast(meta[relay.Constant][47] /* ty=Tensor[(168, 4), int8] */, dtype="int8") /* ty=Tensor[(168, 4), int8] */;
  %892 = cast(meta[relay.Constant][47] /* ty=Tensor[(168, 4), int8] */, dtype="int8") /* ty=Tensor[(168, 4), int8] */;
  %893 = reshape(%891, newshape=[12, 14, 4]) /* ty=Tensor[(12, 14, 4), int8] */;
  %894 = reshape(%892, newshape=[12, 14, 4]) /* ty=Tensor[(12, 14, 4), int8] */;
  %895 = @func_1355(%893, %894) /* ty=(Tensor[(12, 14, 4), bool], Tensor[(14, 7, 10), uint64]) */;
  %896 = cast(meta[relay.Constant][48] /* ty=Tensor[(540), bool] */, dtype="bool") /* ty=Tensor[(540), bool] */;
  %897 = reshape(%896, newshape=[6, 6, 15]) /* ty=Tensor[(6, 6, 15), bool] */;
  %898 = @func_4376(%897) /* ty=(Tensor[(6, 6, 15), bool],) */;
  %899 = @func_9109() /* ty=(Tensor[(182), float32], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) */;
  %900 = @func_5265() /* ty=(Tensor[(16, 15, 14), float64],) */;
  %901 = %890.0;
  %902 = %895.1;
  %903 = %898.0;
  %904 = @func_6728() /* ty=Tensor[(182), float32] */;
  %905 = %899.0;
  %906 = @func_7903() /* ty=Tensor[(14, 7, 10), uint64] */;
  %907 = %900.0;
  (%901, %902, meta[relay.Constant][47] /* ty=Tensor[(168, 4), int8] */, %903, meta[relay.Constant][48] /* ty=Tensor[(540), bool] */, %904, %905, %906, %907)
}

def @func_11954(%var_11950: Tensor[(1, 1344), uint64]) -> (Tensor[(14, 7, 10), uint64], Tensor[(16, 14, 6), uint64], Tensor[(1, 1344), uint64]) {
  %908 = cast(%var_11950, dtype="uint64") /* ty=Tensor[(1, 1344), uint64] */;
  %909 = cast(%var_11950, dtype="uint64") /* ty=Tensor[(1, 1344), uint64] */;
  %910 = reshape(%908, newshape=[16, 14, 6]) /* ty=Tensor[(16, 14, 6), uint64] */;
  %911 = reshape(%909, newshape=[16, 14, 6]) /* ty=Tensor[(16, 14, 6), uint64] */;
  %912 = @func_7529() /* ty=Tensor[(14, 7, 10), uint64] */;
  %913 = @func_3864(%910, %911) /* ty=Tensor[(16, 14, 6), uint64] */;
  (%912, %913, %var_11950)
}

def @func_1355(%var_1340: Tensor[(12, 14, 4), int8], %var_1341: Tensor[(12, 14, 4), int8]) -> (Tensor[(12, 14, 4), bool], Tensor[(14, 7, 10), uint64]) {
  %914 = cast(%var_1341, dtype="bool") /* ty=Tensor[(12, 14, 4), bool] */;
  %915 = shape_of(%var_1340, dtype="int32") /* ty=Tensor[(3), int32] */;
  %916 = cast(%var_1340, dtype="bool") /* ty=Tensor[(12, 14, 4), bool] */;
  %917 = dyn.reshape(%914, %915, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %918 = @func_1003() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %919 = not_equal(%916, %917) /* ty=Tensor[(12, 14, 4), bool] */;
  %920 = %918.0;
  (%919, %920)
}

def @func_2790() -> Tensor[(182), float32] {
  @func_2552() /* ty=Tensor[(182), float32] */
}

def @func_6931(%var_6892: Tensor[(182), float64]) -> (Tensor[(14, 7, 10), uint64], Tensor[(3360), int8], Tensor[(960), int8], Tensor[(182), float32], Tensor[(15, 12, 15), float32]) {
  %921 = cast(meta[relay.Constant][49] /* ty=Tensor[(3360), int8] */, dtype="int8") /* ty=Tensor[(3360), int8] */;
  %922 = cast(meta[relay.Constant][50] /* ty=Tensor[(960), int8] */, dtype="int8") /* ty=Tensor[(960), int8] */;
  %923 = reshape(%921, newshape=[16, 15, 14]) /* ty=Tensor[(16, 15, 14), int8] */;
  %924 = reshape(%922, newshape=[16, 15, 4]) /* ty=Tensor[(16, 15, 4), int8] */;
  %925 = @func_2494(%923, %924) /* ty=(Tensor[(16, 15, 14), int8], Tensor[(16, 15, 4), bool], Tensor[(16, 15, 1), float64], Tensor[(14, 7, 10), uint64]) */;
  %926 = @func_5229() /* ty=(Tensor[(182), float64], Tensor[(16, 15, 14), int8], Tensor[(3360), int8], Tensor[(480, 2), int8], Tensor[(6, 6, 15), bool], Tensor[(540), bool]) */;
  %927 = %926.0;
  %928 = cast(%var_6892, dtype="bool") /* ty=Tensor[(182), bool] */;
  %929 = shape_of(%927, dtype="int32") /* ty=Tensor[(1), int32] */;
  %930 = cast(%927, dtype="bool") /* ty=Tensor[(182), bool] */;
  %931 = dyn.reshape(%928, %929, newshape=[]) /* ty=Tensor[(?), bool] */;
  %932 = not_equal(%930, %931) /* ty=Tensor[(182), bool] */;
  %933 = cast(%932, dtype="float32") /* ty=Tensor[(182), float32] */;
  %934 = @func_5463() /* ty=(Tensor[(15, 12, 15), float32],) */;
  %935 = %925.3;
  %936 = asin(%933) /* ty=Tensor[(182), float32] */;
  %937 = %934.0;
  (%935, meta[relay.Constant][49] /* ty=Tensor[(3360), int8] */, meta[relay.Constant][50] /* ty=Tensor[(960), int8] */, %936, %937)
}

def @func_5374(%var_5369: Tensor[(5, 14, 3), bool]) -> Tensor[(5, 14, 3), float64] {
  %938 = @func_3434() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(182), float32], Tensor[(5, 14, 3), bool]) */;
  %939 = %938.2;
  %940 = cast(%var_5369, dtype="float64") /* ty=Tensor[(5, 14, 3), float64] */;
  %941 = shape_of(%939, dtype="int32") /* ty=Tensor[(3), int32] */;
  %942 = cast(%939, dtype="float64") /* ty=Tensor[(5, 14, 3), float64] */;
  %943 = dyn.reshape(%940, %941, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%942, %943) /* ty=Tensor[(5, 14, 3), float64] */
}

def @func_1574(%var_1550: int8) -> (Tensor[(4, 14, 11), bool], Tensor[(182), float64], Tensor[(14, 7, 10), float64]) {
  %944 = cast(%var_1550, dtype="bool") /* ty=bool */;
  %945 = cast(meta[relay.Constant][51] /* ty=Tensor[(4, 14, 11), int8] */, dtype="bool") /* ty=Tensor[(4, 14, 11), bool] */;
  %946 = @func_865() /* ty=Tensor[(14, 7, 10), uint64] */;
  %947 = cast(%946, dtype="float64") /* ty=Tensor[(14, 7, 10), float64] */;
  %948 = less_equal(%944, %945) /* ty=Tensor[(4, 14, 11), bool] */;
  %949 = @func_1041() /* ty=Tensor[(182), float64] */;
  %950 = atanh(%947) /* ty=Tensor[(14, 7, 10), float64] */;
  (%948, %949, %950)
}

def @func_9705() -> (Tensor[(14, 7, 10), uint64],) {
  %951 = @func_1374() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %952 = %951.0;
  (%952,)
}

def @func_9109() -> (Tensor[(182), float32], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) {
  %953 = @func_3434() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(182), float32], Tensor[(5, 14, 3), bool]) */;
  %954 = %953.1;
  %955 = @func_865() /* ty=Tensor[(14, 7, 10), uint64] */;
  %956 = @func_865() /* ty=Tensor[(14, 7, 10), uint64] */;
  (%954, %955, %956)
}

def @func_5432(%var_5417: Tensor[(182), float64]) -> Tensor[(182), float64] {
  %957 = @func_1821() /* ty=Tensor[(182), float64] */;
  %958 = cast(%var_5417, dtype="float64") /* ty=Tensor[(182), float64] */;
  %959 = shape_of(%957, dtype="int32") /* ty=Tensor[(1), int32] */;
  %960 = cast(%957, dtype="float64") /* ty=Tensor[(182), float64] */;
  %961 = dyn.reshape(%958, %959, newshape=[]) /* ty=Tensor[(?), float64] */;
  divide(%960, %961) /* ty=Tensor[(182), float64] */
}

def @func_1483() -> Tensor[(14, 7, 10), uint64] {
  %962 = @func_938() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %962.0
}

def @func_1067(%var_1060: int64, %var_1061: Tensor[(14, 13, 15), int64]) -> (Tensor[(14, 13, 15), int64], Tensor[(182), float64]) {
  %963 = cast(%var_1060, dtype="int64") /* ty=int64 */;
  %964 = cast(%var_1061, dtype="int64") /* ty=Tensor[(14, 13, 15), int64] */;
  %965 = bitwise_xor(%963, %964) /* ty=Tensor[(14, 13, 15), int64] */;
  %966 = @func_1041() /* ty=Tensor[(182), float64] */;
  (%965, %966)
}

def @func_10507(%var_10442: Tensor[(2640), uint64]) -> (Tensor[(14, 7, 10), uint64], Tensor[(182), float64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), float32], Tensor[(15, 16, 11), uint64], uint64, Tensor[(2640), uint64], Tensor[(12, 2, 4), float64], Tensor[(96), float64], Tensor[(1, 13, 14), float32]) {
  %967 = @func_5008() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %968 = @func_6970() /* ty=(Tensor[(182), float64],) */;
  %969 = @func_9866() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %970 = @func_1003() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %971 = @func_2850() /* ty=Tensor[(14, 7, 10), uint64] */;
  %972 = cast(%971, dtype="float32") /* ty=Tensor[(14, 7, 10), float32] */;
  %973 = cast(meta[relay.Constant][52] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %974 = cast(%var_10442, dtype="uint64") /* ty=Tensor[(2640), uint64] */;
  %975 = reshape(%973, newshape=[]) /* ty=uint64 */;
  %976 = reshape(%974, newshape=[15, 16, 11]) /* ty=Tensor[(15, 16, 11), uint64] */;
  %977 = cast(meta[relay.Constant][53] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
  %978 = reshape(%977, newshape=[12, 2, 4]) /* ty=Tensor[(12, 2, 4), float64] */;
  %979 = %968.0;
  %980 = cast(%979, dtype="float32") /* ty=Tensor[(182), float32] */;
  %981 = reshape(%980, newshape=[1, 13, 14]) /* ty=Tensor[(1, 13, 14), float32] */;
  %982 = %967.0;
  %983 = %969.0;
  %984 = %970.0;
  %985 = sinh(%972) /* ty=Tensor[(14, 7, 10), float32] */;
  %986 = @func_9652(%975, %976) /* ty=Tensor[(15, 16, 11), uint64] */;
  %987 = @func_9494(%978) /* ty=Tensor[(12, 2, 4), float64] */;
  %988 = @func_492(%981) /* ty=Tensor[(1, 13, 14), float32] */;
  (%982, %979, %983, %984, %985, %986, meta[relay.Constant][52] /* ty=uint64 */, %var_10442, %987, meta[relay.Constant][53] /* ty=Tensor[(96), float64] */, %988)
}

def @func_4830(%var_4807: float32, %var_4808: Tensor[(11, 6, 4), float32]) -> Tensor[(11, 6, 4), float32] {
  %989 = cast(%var_4807, dtype="bool") /* ty=bool */;
  %990 = cast(%var_4808, dtype="bool") /* ty=Tensor[(11, 6, 4), bool] */;
  %991 = greater_equal(%989, %990) /* ty=Tensor[(11, 6, 4), bool] */;
  %992 = cast(%991, dtype="float32") /* ty=Tensor[(11, 6, 4), float32] */;
  exp(%992) /* ty=Tensor[(11, 6, 4), float32] */
}

def @func_3068(%var_3046: Tensor[(15, 9, 7), uint8], %var_3047: Tensor[(15, 9, 7), uint8]) -> (Tensor[(15, 9, 7), bool], Tensor[(13, 8, 15), float64], Tensor[(182), float32], Tensor[(182), float64]) {
  %993 = cast(%var_3047, dtype="bool") /* ty=Tensor[(15, 9, 7), bool] */;
  %994 = shape_of(%var_3046, dtype="int32") /* ty=Tensor[(3), int32] */;
  %995 = cast(%var_3046, dtype="bool") /* ty=Tensor[(15, 9, 7), bool] */;
  %996 = dyn.reshape(%993, %994, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %997 = @func_2005() /* ty=(Tensor[(14, 7, 10), float32], Tensor[(14, 7, 10), uint64], Tensor[(672), int8], Tensor[(14, 7, 10), uint64], Tensor[(13, 8, 15), float64], Tensor[(1560, 1), float64]) */;
  %998 = @func_2925() /* ty=(Tensor[(4, 15, 5), uint8], Tensor[(182), float32]) */;
  %999 = less_equal(%995, %996) /* ty=Tensor[(15, 9, 7), bool] */;
  %1000 = %997.4;
  %1001 = %998.1;
  %1002 = @func_1338() /* ty=Tensor[(182), float64] */;
  (%999, %1000, %1001, %1002)
}

def @func_2311(%var_2302: Tensor[(182), float64]) -> Tensor[(182), float64] {
  %1003 = @func_1415() /* ty=(Tensor[(182), float64], Tensor[(1, 13, 14), float32], Tensor[(14, 7, 10), uint64]) */;
  %1004 = %1003.0;
  %1005 = cast(%var_2302, dtype="float64") /* ty=Tensor[(182), float64] */;
  %1006 = shape_of(%1004, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1007 = cast(%1004, dtype="float64") /* ty=Tensor[(182), float64] */;
  %1008 = dyn.reshape(%1005, %1006, newshape=[]) /* ty=Tensor[(?), float64] */;
  floor_mod(%1007, %1008) /* ty=Tensor[(182), float64] */
}

def @func_9890() -> (Tensor[(182), float64],) {
  %1009 = @func_1808() /* ty=Tensor[(182), float64] */;
  (%1009,)
}

def @func_3449(%var_3437: float32, %var_3438: Tensor[(8, 2, 11), float32]) -> Tensor[(8, 2, 11), float32] {
  %1010 = cast(%var_3437, dtype="float32") /* ty=float32 */;
  %1011 = cast(%var_3438, dtype="float32") /* ty=Tensor[(8, 2, 11), float32] */;
  divide(%1010, %1011) /* ty=Tensor[(8, 2, 11), float32] */
}

def @func_2925() -> (Tensor[(4, 15, 5), uint8], Tensor[(182), float32]) {
  %1012 = @func_2843() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(4, 15, 5), uint8]) */;
  %1013 = @func_2399() /* ty=(Tensor[(14, 7, 10), float32], Tensor[(182), float32]) */;
  %1014 = %1013.1;
  %1015 = cast(%1014, dtype="float32") /* ty=Tensor[(182), float32] */;
  %1016 = %1012.1;
  %1017 = sqrt(%1015) /* ty=Tensor[(182), float32] */;
  (%1016, %1017)
}

def @func_1662() -> (Tensor[(14, 7, 10), uint64],) {
  %1018 = @func_1483() /* ty=Tensor[(14, 7, 10), uint64] */;
  (%1018,)
}

def @func_4691(%var_4632: float64) -> (Tensor[(14, 7, 10), float32], Tensor[(7, 2, 15), float64], float64, Tensor[(14, 7, 10), float32], Tensor[(143, 14), float32], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) {
  %1019 = @func_2609() /* ty=(Tensor[(14, 7, 10), float32],) */;
  %1020 = cast(%var_4632, dtype="float64") /* ty=float64 */;
  %1021 = reshape(%1020, newshape=[]) /* ty=float64 */;
  %1022 = @func_4199(%1021) /* ty=(Tensor[(7, 2, 15), float64], Tensor[(980), uint64], Tensor[(14, 7, 10), uint16]) */;
  %1023 = cast(meta[relay.Constant][54] /* ty=Tensor[(143, 14), float32] */, dtype="float32") /* ty=Tensor[(143, 14), float32] */;
  %1024 = reshape(%1023, newshape=[11, 13, 14]) /* ty=Tensor[(11, 13, 14), float32] */;
  %1025 = @func_4124(%1024) /* ty=(Tensor[(?, 13, 14), int64], Tensor[(11, 13, 14), uint64], Tensor[(14, 7, 10), float32], Tensor[(1, 13, 14), float32], Tensor[(14, 7, 10), bool]) */;
  %1026 = @func_1035() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) */;
  %1027 = @func_2642() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %1028 = %1019.0;
  %1029 = %1022.0;
  %1030 = %1025.2;
  %1031 = @func_1483() /* ty=Tensor[(14, 7, 10), uint64] */;
  %1032 = %1026.2;
  %1033 = %1027.0;
  (%1028, %1029, %var_4632, %1030, meta[relay.Constant][54] /* ty=Tensor[(143, 14), float32] */, %1031, %1032, %1033)
}

def @func_11700() -> (Tensor[(14, 7, 10), uint64],) {
  %1034 = @func_6508() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %1035 = %1034.0;
  (%1035,)
}

def @func_7135(%var_7108: Tensor[(176, 1), float32]) -> (Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(8, 2, 11), float32], Tensor[(176, 1), float32]) {
  %1036 = @func_5856() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) */;
  %1037 = @func_4466() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(176), float32], Tensor[(8, 2, 11), bool]) */;
  %1038 = @func_1662() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %1039 = cast(%var_7108, dtype="float32") /* ty=Tensor[(176, 1), float32] */;
  %1040 = reshape(%1039, newshape=[176]) /* ty=Tensor[(176), float32] */;
  %1041 = @func_4343(%1040) /* ty=(Tensor[(182), float32], Tensor[(8, 2, 11), float32], float32, Tensor[(176), float32], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), float32]) */;
  %1042 = %1036.1;
  %1043 = %1037.0;
  %1044 = %1038.0;
  %1045 = %1041.1;
  (%1042, %1043, %1044, %1045, %var_7108)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1959(%var_1942: Tensor[(11, 2, 10), int32], %var_1943: Tensor[(11, 2, 10), int32]) -> (Tensor[(11, 2, 10), bool], Tensor[(11, 2, 10), float64]) {
  %0 = cast(%var_1943, dtype="bool") /* ty=Tensor[(11, 2, 10), bool] */;
  %1 = shape_of(%var_1942, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(%var_1942, dtype="bool") /* ty=Tensor[(11, 2, 10), bool] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %4 = cast(%var_1943, dtype="float64") /* ty=Tensor[(11, 2, 10), float64] */;
  %5 = greater_equal(%2, %3) /* ty=Tensor[(11, 2, 10), bool] */;
  %6 = asinh(%4) /* ty=Tensor[(11, 2, 10), float64] */;
  (%5, %6)
}

def @func_11086(%var_11019: Tensor[(1560, 11), float64], %var_11028: uint64, %var_11029: Tensor[(2640), uint64]) -> (Tensor[(15, 16, 11), uint64], uint64, Tensor[(2640), uint64], Tensor[(1560, 11), uint64], Tensor[(14, 7, 10), uint64], Tensor[(182), float64], Tensor[(14, 7, 10), uint64], Tensor[(1560, 11), bool], Tensor[(1560, 11), float32]) {
  %7 = cast(%var_11028, dtype="uint64") /* ty=uint64 */;
  %8 = cast(%var_11029, dtype="uint64") /* ty=Tensor[(2640), uint64] */;
  %9 = reshape(%7, newshape=[]) /* ty=uint64 */;
  %10 = reshape(%8, newshape=[15, 16, 11]) /* ty=Tensor[(15, 16, 11), uint64] */;
  %11 = @func_10175() /* ty=(Tensor[(1560, 1), float64], Tensor[(14, 7, 10), uint64]) */;
  %12 = %11.0;
  %13 = cast(%12, dtype="float32") /* ty=Tensor[(1560, 1), float32] */;
  %14 = cast(%var_11019, dtype="float32") /* ty=Tensor[(1560, 11), float32] */;
  %15 = power(%13, %14) /* ty=Tensor[(1560, 11), float32] */;
  %16 = cast(%15, dtype="uint64") /* ty=Tensor[(1560, 11), uint64] */;
  %17 = shape_of(%var_11019, dtype="int32") /* ty=Tensor[(2), int32] */;
  %18 = cast(%var_11019, dtype="uint64") /* ty=Tensor[(1560, 11), uint64] */;
  %19 = dyn.reshape(%16, %17, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %20 = cast(meta[relay.Constant][0] /* ty=Tensor[(182), float64] */, dtype="float64") /* ty=Tensor[(182), float64] */;
  %21 = reshape(%20, newshape=[182]) /* ty=Tensor[(182), float64] */;
  %22 = @func_4950(%21) /* ty=(Tensor[(182), bool], Tensor[(14, 7, 10), uint64]) */;
  %23 = @func_9705() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %24 = cast(%15, dtype="bool") /* ty=Tensor[(1560, 11), bool] */;
  %25 = cast(%12, dtype="bool") /* ty=Tensor[(1560, 1), bool] */;
  %26 = cast(%var_11019, dtype="float32") /* ty=Tensor[(1560, 11), float32] */;
  %27 = @func_9652(%9, %10) /* ty=Tensor[(15, 16, 11), uint64] */;
  %28 = minimum(%18, %19) /* ty=Tensor[(1560, 11), uint64] */;
  %29 = %22.1;
  %30 = %23.0;
  %31 = greater(%24, %25) /* ty=Tensor[(1560, 11), bool] */;
  %32 = sinh(%26) /* ty=Tensor[(1560, 11), float32] */;
  (%27, %var_11028, %var_11029, %28, %29, meta[relay.Constant][0] /* ty=Tensor[(182), float64] */, %30, %31, %32)
}

def @func_1718() -> (Tensor[(14, 7, 10), float32], Tensor[(5, 14, 3), bool], Tensor[(210), bool], Tensor[(182), float64]) {
  %44 = fn () -> (Tensor[(14, 7, 10), float32], Tensor[(5, 14, 3), bool], Tensor[(210), bool], Tensor[(182), float64]) {
    %33 = @func_1281() /* ty=(Tensor[(14, 7, 10), float32],) */;
    %34 = cast(meta[relay.Constant][1] /* ty=Tensor[(210), bool] */, dtype="bool") /* ty=Tensor[(210), bool] */;
    %35 = reshape(%34, newshape=[5, 14, 3]) /* ty=Tensor[(5, 14, 3), bool] */;
    %36 = @func_830() /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), uint64]) */;
    %37 = %36.0;
    %38 = cast(%37, dtype="float64") /* ty=Tensor[(182), float64] */;
    %39 = log(%38) /* ty=Tensor[(182), float64] */;
    %40 = cast(%39, dtype="float64") /* ty=Tensor[(182), float64] */;
    %41 = %33.0;
    %42 = @func_1457(%35) /* ty=Tensor[(5, 14, 3), bool] */;
    %43 = sigmoid(%40) /* ty=Tensor[(182), float64] */;
    (%41, %42, meta[relay.Constant][1] /* ty=Tensor[(210), bool] */, %43)
  };
  %44() /* ty=(Tensor[(14, 7, 10), float32], Tensor[(5, 14, 3), bool], Tensor[(210), bool], Tensor[(182), float64]) */
}

def @func_6934(%var_6932: Tensor[(182), float64]) -> (Tensor[(14, 7, 10), uint64], Tensor[(3360), int8], Tensor[(960), int8], Tensor[(182), float32], Tensor[(15, 12, 15), float32]) {
  @func_6931(%var_6932) /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(3360), int8], Tensor[(960), int8], Tensor[(182), float32], Tensor[(15, 12, 15), float32]) */
}

def @func_4199(%var_4182: float64) -> (Tensor[(7, 2, 15), float64], Tensor[(980), uint64], Tensor[(14, 7, 10), uint16]) {
  %45 = cast(%var_4182, dtype="float64") /* ty=float64 */;
  %46 = cast(meta[relay.Constant][2] /* ty=Tensor[(7, 2, 15), float64] */, dtype="float64") /* ty=Tensor[(7, 2, 15), float64] */;
  %47 = cast(meta[relay.Constant][3] /* ty=Tensor[(980), uint64] */, dtype="uint64") /* ty=Tensor[(980), uint64] */;
  %48 = reshape(%47, newshape=[14, 7, 10]) /* ty=Tensor[(14, 7, 10), uint64] */;
  %49 = @func_1253(%48) /* ty=(Tensor[(14, 7, 10), int16], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), bool]) */;
  %50 = %49.0;
  %51 = cast(%50, dtype="uint16") /* ty=Tensor[(14, 7, 10), uint16] */;
  %52 = cast(%var_4182, dtype="uint16") /* ty=uint16 */;
  %53 = mod(%45, %46) /* ty=Tensor[(7, 2, 15), float64] */;
  %54 = logical_xor(%51, %52) /* ty=Tensor[(14, 7, 10), uint16] */;
  (%53, meta[relay.Constant][3] /* ty=Tensor[(980), uint64] */, %54)
}

def @func_7138(%var_7136: Tensor[(176, 1), float32]) -> (Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(8, 2, 11), float32], Tensor[(176, 1), float32]) {
  @func_7135(%var_7136) /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(8, 2, 11), float32], Tensor[(176, 1), float32]) */
}

def @func_7442() -> (Tensor[(14, 7, 10), uint64], Tensor[(182), float64], Tensor[(182), uint64]) {
  %60 = fn () -> (Tensor[(14, 7, 10), uint64], Tensor[(182), float64], Tensor[(182), uint64]) {
    %55 = @func_3193() /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), uint64]) */;
    %56 = @func_2901() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(182), uint64]) */;
    %57 = %55.1;
    %58 = @func_1338() /* ty=Tensor[(182), float64] */;
    %59 = %56.1;
    (%57, %58, %59)
  };
  %60() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(182), float64], Tensor[(182), uint64]) */
}

def @func_7905() -> Tensor[(14, 7, 10), uint64] {
  @func_7903() /* ty=Tensor[(14, 7, 10), uint64] */
}

def @func_3689() -> Tensor[(14, 7, 10), uint64] {
  @func_3687() /* ty=Tensor[(14, 7, 10), uint64] */
}

def @func_4041() -> (Tensor[(210), bool],) {
  %63 = fn () -> (Tensor[(210), bool],) {
    %61 = @func_1717() /* ty=(Tensor[(14, 7, 10), float32], Tensor[(5, 14, 3), bool], Tensor[(210), bool], Tensor[(182), float64]) */;
    %62 = %61.2;
    (%62,)
  };
  %63() /* ty=(Tensor[(210), bool],) */
}

def @func_3687() -> Tensor[(14, 7, 10), uint64] {
  %64 = @func_1415() /* ty=(Tensor[(182), float64], Tensor[(1, 13, 14), float32], Tensor[(14, 7, 10), uint64]) */;
  %64.2
}

def @func_5977() -> (Tensor[(14, 7, 10), float64], Tensor[(14, 7, 10), bool]) {
  %65 = @func_3538() /* ty=(Tensor[(14, 7, 10), float64],) */;
  %66 = %65.0;
  %67 = @func_3322() /* ty=Tensor[(14, 7, 10), bool] */;
  (%66, %67)
}

def @func_2155() -> (Tensor[(182), float32],) {
  %68 = @func_1808() /* ty=Tensor[(182), float64] */;
  %69 = cast(%68, dtype="float32") /* ty=Tensor[(182), float32] */;
  %70 = tan(%69) /* ty=Tensor[(182), float32] */;
  (%70,)
}

def @func_9263() -> (Tensor[(182), float32], Tensor[(182), float32], Tensor[(14, 7, 10), uint8], Tensor[(1, 980), uint64], Tensor[(14, 7, 10), uint64]) {
  %71 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 980), uint64] */, dtype="uint64") /* ty=Tensor[(1, 980), uint64] */;
  %72 = reshape(%71, newshape=[14, 7, 10]) /* ty=Tensor[(14, 7, 10), uint64] */;
  %73 = @func_4209() /* ty=Tensor[(182), float32] */;
  %74 = @func_2362() /* ty=Tensor[(182), float32] */;
  %75 = @func_7028(%72) /* ty=Tensor[(14, 7, 10), uint8] */;
  %76 = @func_7529() /* ty=Tensor[(14, 7, 10), uint64] */;
  (%73, %74, %75, meta[relay.Constant][4] /* ty=Tensor[(1, 980), uint64] */, %76)
}

def @func_10058() -> Tensor[(14, 7, 10), uint64] {
  %77 = fn () -> Tensor[(14, 7, 10), uint64] {
    @func_1483() /* ty=Tensor[(14, 7, 10), uint64] */
  };
  %77() /* ty=Tensor[(14, 7, 10), uint64] */
}

def @func_1255(%var_1254: Tensor[(14, 7, 10), uint64]) -> (Tensor[(14, 7, 10), int16], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), bool]) {
  %91 = fn (%var_1230: Tensor[(14, 7, 10), uint64]) -> (Tensor[(14, 7, 10), int16], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), bool]) {
    %78 = @func_1003() /* ty=(Tensor[(14, 7, 10), uint64],) */;
    %79 = %78.0;
    %80 = cast(%var_1230, dtype="int16") /* ty=Tensor[(14, 7, 10), int16] */;
    %81 = shape_of(%79, dtype="int32") /* ty=Tensor[(3), int32] */;
    %82 = cast(%79, dtype="int16") /* ty=Tensor[(14, 7, 10), int16] */;
    %83 = dyn.reshape(%80, %81, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %84 = cast(meta[relay.Constant][5] /* ty=Tensor[(14, 7, 10), uint64] */, dtype="bool") /* ty=Tensor[(14, 7, 10), bool] */;
    %85 = shape_of(%var_1230, dtype="int32") /* ty=Tensor[(3), int32] */;
    %86 = cast(%var_1230, dtype="bool") /* ty=Tensor[(14, 7, 10), bool] */;
    %87 = dyn.reshape(%84, %85, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %88 = bitwise_and(%82, %83) /* ty=Tensor[(14, 7, 10), int16] */;
    %89 = @func_865() /* ty=Tensor[(14, 7, 10), uint64] */;
    %90 = greater_equal(%86, %87) /* ty=Tensor[(14, 7, 10), bool] */;
    (%88, %89, %90)
  };
  %91(%var_1254) /* ty=(Tensor[(14, 7, 10), int16], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), bool]) */
}

def @func_3213(%var_3202: Tensor[(3360), int8]) -> (Tensor[(14, 7, 10), uint64], Tensor[(16, 15, 1), float64], Tensor[(3360), int8], Tensor[(960), int8], Tensor[(13, 8, 15), float64], Tensor[(1, 945), uint8]) {
  %92 = cast(%var_3202, dtype="int8") /* ty=Tensor[(3360), int8] */;
  %93 = cast(meta[relay.Constant][6] /* ty=Tensor[(960), int8] */, dtype="int8") /* ty=Tensor[(960), int8] */;
  %94 = reshape(%92, newshape=[16, 15, 14]) /* ty=Tensor[(16, 15, 14), int8] */;
  %95 = reshape(%93, newshape=[16, 15, 4]) /* ty=Tensor[(16, 15, 4), int8] */;
  %96 = @func_2494(%94, %95) /* ty=(Tensor[(16, 15, 14), int8], Tensor[(16, 15, 4), bool], Tensor[(16, 15, 1), float64], Tensor[(14, 7, 10), uint64]) */;
  %97 = cast(meta[relay.Constant][7] /* ty=Tensor[(1, 945), uint8] */, dtype="uint8") /* ty=Tensor[(1, 945), uint8] */;
  %98 = cast(meta[relay.Constant][7] /* ty=Tensor[(1, 945), uint8] */, dtype="uint8") /* ty=Tensor[(1, 945), uint8] */;
  %99 = reshape(%97, newshape=[15, 9, 7]) /* ty=Tensor[(15, 9, 7), uint8] */;
  %100 = reshape(%98, newshape=[15, 9, 7]) /* ty=Tensor[(15, 9, 7), uint8] */;
  %101 = @func_3068(%99, %100) /* ty=(Tensor[(15, 9, 7), bool], Tensor[(13, 8, 15), float64], Tensor[(182), float32], Tensor[(182), float64]) */;
  %102 = @func_1483() /* ty=Tensor[(14, 7, 10), uint64] */;
  %103 = %96.2;
  %104 = %101.1;
  (%102, %103, %var_3202, meta[relay.Constant][6] /* ty=Tensor[(960), int8] */, %104, meta[relay.Constant][7] /* ty=Tensor[(1, 945), uint8] */)
}

def @func_8861() -> (Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), bool]) {
  %105 = @func_2200() /* ty=Tensor[(14, 7, 10), uint64] */;
  %106 = cast(%105, dtype="uint64") /* ty=Tensor[(14, 7, 10), uint64] */;
  %107 = reshape(%106, newshape=[14, 7, 10]) /* ty=Tensor[(14, 7, 10), uint64] */;
  %108 = @func_1253(%107) /* ty=(Tensor[(14, 7, 10), int16], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), bool]) */;
  %109 = @func_1157() /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), bool]) */;
  %110 = %108.1;
  %111 = %109.1;
  (%105, %110, %111)
}

def @func_9891() -> (Tensor[(182), float64],) {
  %113 = fn () -> (Tensor[(182), float64],) {
    %112 = @func_1808() /* ty=Tensor[(182), float64] */;
    (%112,)
  };
  %113() /* ty=(Tensor[(182), float64],) */
}

def @func_6634(%var_6632: Tensor[(10, 10, 7), float32], %var_6633: Tensor[(10, 10, 7), float32]) -> (Tensor[(10, 10, 7), bool], Tensor[(14, 7, 10), float32], float64) {
  @func_6630(%var_6632, %var_6633) /* ty=(Tensor[(10, 10, 7), bool], Tensor[(14, 7, 10), float32], float64) */
}

def @func_8071(%var_8070: Tensor[(182), float32]) -> (Tensor[(182), bool], Tensor[(182), uint64]) {
  %125 = fn (%var_8056: Tensor[(182), float32]) -> (Tensor[(182), bool], Tensor[(182), uint64]) {
    %114 = @func_4209() /* ty=Tensor[(182), float32] */;
    %115 = cast(%var_8056, dtype="bool") /* ty=Tensor[(182), bool] */;
    %116 = shape_of(%114, dtype="int32") /* ty=Tensor[(1), int32] */;
    %117 = cast(%114, dtype="bool") /* ty=Tensor[(182), bool] */;
    %118 = dyn.reshape(%115, %116, newshape=[]) /* ty=Tensor[(?), bool] */;
    %119 = cast(%var_8056, dtype="uint64") /* ty=Tensor[(182), uint64] */;
    %120 = shape_of(%114, dtype="int32") /* ty=Tensor[(1), int32] */;
    %121 = cast(%114, dtype="uint64") /* ty=Tensor[(182), uint64] */;
    %122 = dyn.reshape(%119, %120, newshape=[]) /* ty=Tensor[(?), uint64] */;
    %123 = greater_equal(%117, %118) /* ty=Tensor[(182), bool] */;
    %124 = bitwise_or(%121, %122) /* ty=Tensor[(182), uint64] */;
    (%123, %124)
  };
  %125(%var_8070) /* ty=(Tensor[(182), bool], Tensor[(182), uint64]) */
}

def @func_1036() -> (Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) {
  %134 = fn () -> (Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) {
    %126 = @func_1003() /* ty=(Tensor[(14, 7, 10), uint64],) */;
    %127 = @func_938() /* ty=(Tensor[(14, 7, 10), uint64],) */;
    %128 = @func_830() /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), uint64]) */;
    %129 = @func_830() /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), uint64]) */;
    %130 = %126.0;
    %131 = %127.0;
    %132 = %128.1;
    %133 = %129.1;
    (%130, %131, %132, %133)
  };
  %134() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) */
}

def @func_1483() -> Tensor[(14, 7, 10), uint64] {
  %135 = @func_938() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %135.0
}

def @func_1963(%var_1961: Tensor[(11, 2, 10), int32], %var_1962: Tensor[(11, 2, 10), int32]) -> (Tensor[(11, 2, 10), bool], Tensor[(11, 2, 10), float64]) {
  @func_1959(%var_1961, %var_1962) /* ty=(Tensor[(11, 2, 10), bool], Tensor[(11, 2, 10), float64]) */
}

def @func_7318() -> (Tensor[(14, 7, 10), uint64], Tensor[(182), float64]) {
  @func_7316() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(182), float64]) */
}

def @func_2157() -> (Tensor[(182), float32],) {
  @func_2155() /* ty=(Tensor[(182), float32],) */
}

def @func_3868(%var_3866: Tensor[(16, 14, 6), uint64], %var_3867: Tensor[(16, 14, 6), uint64]) -> Tensor[(16, 14, 6), uint64] {
  @func_3864(%var_3866, %var_3867) /* ty=Tensor[(16, 14, 6), uint64] */
}

def @func_11912() -> Tensor[(182), float32] {
  %137 = fn () -> Tensor[(182), float32] {
    %136 = @func_2155() /* ty=(Tensor[(182), float32],) */;
    %136.0
  };
  %137() /* ty=Tensor[(182), float32] */
}

def @func_4345(%var_4344: Tensor[(176), float32]) -> (Tensor[(182), float32], Tensor[(8, 2, 11), float32], float32, Tensor[(176), float32], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), float32]) {
  %148 = fn (%var_4328: Tensor[(176), float32]) -> (Tensor[(182), float32], Tensor[(8, 2, 11), float32], float32, Tensor[(176), float32], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), float32]) {
    %138 = @func_2399() /* ty=(Tensor[(14, 7, 10), float32], Tensor[(182), float32]) */;
    %139 = cast(2.33949f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %140 = cast(%var_4328, dtype="float32") /* ty=Tensor[(176), float32] */;
    %141 = reshape(%139, newshape=[]) /* ty=float32 */;
    %142 = reshape(%140, newshape=[8, 2, 11]) /* ty=Tensor[(8, 2, 11), float32] */;
    %143 = @func_3516() /* ty=(Tensor[(14, 7, 10), bool], Tensor[(14, 7, 10), uint64]) */;
    %144 = %138.1;
    %145 = @func_3449(%141, %142) /* ty=Tensor[(8, 2, 11), float32] */;
    %146 = %143.1;
    %147 = @func_4251() /* ty=Tensor[(14, 7, 10), float32] */;
    (%144, %145, 2.33949f /* ty=float32 */, %var_4328, %146, %147)
  };
  %148(%var_4344) /* ty=(Tensor[(182), float32], Tensor[(8, 2, 11), float32], float32, Tensor[(176), float32], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), float32]) */
}

def @func_11956(%var_11955: Tensor[(1, 1344), uint64]) -> (Tensor[(14, 7, 10), uint64], Tensor[(16, 14, 6), uint64], Tensor[(1, 1344), uint64]) {
  %155 = fn (%var_11950: Tensor[(1, 1344), uint64]) -> (Tensor[(14, 7, 10), uint64], Tensor[(16, 14, 6), uint64], Tensor[(1, 1344), uint64]) {
    %149 = cast(%var_11950, dtype="uint64") /* ty=Tensor[(1, 1344), uint64] */;
    %150 = cast(%var_11950, dtype="uint64") /* ty=Tensor[(1, 1344), uint64] */;
    %151 = reshape(%149, newshape=[16, 14, 6]) /* ty=Tensor[(16, 14, 6), uint64] */;
    %152 = reshape(%150, newshape=[16, 14, 6]) /* ty=Tensor[(16, 14, 6), uint64] */;
    %153 = @func_7529() /* ty=Tensor[(14, 7, 10), uint64] */;
    %154 = @func_3864(%151, %152) /* ty=Tensor[(16, 14, 6), uint64] */;
    (%153, %154, %var_11950)
  };
  %155(%var_11955) /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(16, 14, 6), uint64], Tensor[(1, 1344), uint64]) */
}

def @func_2989() -> (Tensor[(14, 7, 10), uint64], Tensor[(182), float64]) {
  %156 = @func_1596() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %157 = %156.0;
  %158 = @func_1338() /* ty=Tensor[(182), float64] */;
  (%157, %158)
}

def @func_3193() -> (Tensor[(182), float64], Tensor[(14, 7, 10), uint64]) {
  %159 = @func_1003() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %160 = @func_1821() /* ty=Tensor[(182), float64] */;
  %161 = %159.0;
  (%160, %161)
}

def @func_2925() -> (Tensor[(4, 15, 5), uint8], Tensor[(182), float32]) {
  %162 = @func_2843() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(4, 15, 5), uint8]) */;
  %163 = @func_2399() /* ty=(Tensor[(14, 7, 10), float32], Tensor[(182), float32]) */;
  %164 = %163.1;
  %165 = cast(%164, dtype="float32") /* ty=Tensor[(182), float32] */;
  %166 = %162.1;
  %167 = sqrt(%165) /* ty=Tensor[(182), float32] */;
  (%166, %167)
}

def @func_9825() -> Tensor[(14, 7, 10), uint64] {
  %169 = fn () -> Tensor[(14, 7, 10), uint64] {
    %168 = @func_5587() /* ty=(Tensor[(14, 7, 10), uint64],) */;
    %168.0
  };
  %169() /* ty=Tensor[(14, 7, 10), uint64] */
}

def @func_7837() -> Tensor[(14, 7, 10), float64] {
  %170 = @func_5963() /* ty=(Tensor[(182), float64], Tensor[(182), float64], Tensor[(14, 7, 10), float64]) */;
  %170.2
}

def @func_11254() -> (Tensor[(14, 7, 10), uint64], Tensor[(4, 15, 5), uint8]) {
  %175 = fn () -> (Tensor[(14, 7, 10), uint64], Tensor[(4, 15, 5), uint8]) {
    %171 = @func_4537() /* ty=(Tensor[(14, 7, 10), uint64],) */;
    %172 = @func_10120() /* ty=(Tensor[(4, 15, 5), uint8],) */;
    %173 = %171.0;
    %174 = %172.0;
    (%173, %174)
  };
  %175() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(4, 15, 5), uint8]) */
}

def @func_5691(%var_5689: Tensor[(3360), int8]) -> (Tensor[(14, 7, 10), float32], Tensor[(13, 8, 15), float64], Tensor[(3360), int8]) {
  @func_5688(%var_5689) /* ty=(Tensor[(14, 7, 10), float32], Tensor[(13, 8, 15), float64], Tensor[(3360), int8]) */
}

def @func_6457() -> (Tensor[(182), float64], Tensor[(14, 7, 10), float32]) {
  %179 = fn () -> (Tensor[(182), float64], Tensor[(14, 7, 10), float32]) {
    %176 = @func_2954() /* ty=(Tensor[(182), float64],) */;
    %177 = %176.0;
    %178 = @func_4251() /* ty=Tensor[(14, 7, 10), float32] */;
    (%177, %178)
  };
  %179() /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), float32]) */
}

def @func_1576(%var_1575: int8) -> (Tensor[(4, 14, 11), bool], Tensor[(182), float64], Tensor[(14, 7, 10), float64]) {
  %187 = fn (%var_1550: int8) -> (Tensor[(4, 14, 11), bool], Tensor[(182), float64], Tensor[(14, 7, 10), float64]) {
    %180 = cast(%var_1550, dtype="bool") /* ty=bool */;
    %181 = cast(meta[relay.Constant][8] /* ty=Tensor[(4, 14, 11), int8] */, dtype="bool") /* ty=Tensor[(4, 14, 11), bool] */;
    %182 = @func_865() /* ty=Tensor[(14, 7, 10), uint64] */;
    %183 = cast(%182, dtype="float64") /* ty=Tensor[(14, 7, 10), float64] */;
    %184 = less_equal(%180, %181) /* ty=Tensor[(4, 14, 11), bool] */;
    %185 = @func_1041() /* ty=Tensor[(182), float64] */;
    %186 = atanh(%183) /* ty=Tensor[(14, 7, 10), float64] */;
    (%184, %185, %186)
  };
  %187(%var_1575) /* ty=(Tensor[(4, 14, 11), bool], Tensor[(182), float64], Tensor[(14, 7, 10), float64]) */
}

def @func_408(%var_406: Tensor[(1560), float64]) -> (Tensor[(13, 8, 15), float64], Tensor[(1560), float64], Tensor[(13, 8, 15), float64], Tensor[(12, 10, 3), uint64], Tensor[(13, 8, 15), float64], Tensor[(13, 8, 15), float64]) {
  @func_405(%var_406) /* ty=(Tensor[(13, 8, 15), float64], Tensor[(1560), float64], Tensor[(13, 8, 15), float64], Tensor[(12, 10, 3), uint64], Tensor[(13, 8, 15), float64], Tensor[(13, 8, 15), float64]) */
}

def @func_832() -> (Tensor[(182), float64], Tensor[(14, 7, 10), uint64]) {
  @func_830() /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), uint64]) */
}

def @func_5177() -> Tensor[(14, 7, 10), uint64] {
  @func_865() /* ty=Tensor[(14, 7, 10), uint64] */
}

def @func_9707() -> (Tensor[(14, 7, 10), uint64],) {
  @func_9705() /* ty=(Tensor[(14, 7, 10), uint64],) */
}

def @func_10705() -> (Tensor[(14, 7, 10), float32], Tensor[(14, 7, 10), uint64], Tensor[(4, 15, 5), uint8], Tensor[(14, 7, 10), uint64]) {
  %188 = @func_2609() /* ty=(Tensor[(14, 7, 10), float32],) */;
  %189 = @func_10120() /* ty=(Tensor[(4, 15, 5), uint8],) */;
  %190 = @func_1374() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %191 = %188.0;
  %192 = @func_7710() /* ty=Tensor[(14, 7, 10), uint64] */;
  %193 = %189.0;
  %194 = %190.0;
  (%191, %192, %193, %194)
}

def @func_9407(%var_9404: Tensor[(176), float32], %var_9405: Tensor[(3360), int8], %var_9406: Tensor[(9, 60), bool]) -> (Tensor[(14, 7, 10), float32], Tensor[(14, 7, 10), uint64], Tensor[(3360), int16], Tensor[(14, 7, 10), uint64], Tensor[(176), float32], Tensor[(3360), float32], Tensor[(4, 15, 5), uint8], Tensor[(540), bool], Tensor[(182), float64], Tensor[(9, 60), bool]) {
  %224 = fn (%var_9371: Tensor[(176), float32], %var_9381: Tensor[(3360), int8], %var_9395: Tensor[(9, 60), bool]) -> (Tensor[(14, 7, 10), float32], Tensor[(14, 7, 10), uint64], Tensor[(3360), int16], Tensor[(14, 7, 10), uint64], Tensor[(176), float32], Tensor[(3360), float32], Tensor[(4, 15, 5), uint8], Tensor[(540), bool], Tensor[(182), float64], Tensor[(9, 60), bool]) {
    %195 = @func_1281() /* ty=(Tensor[(14, 7, 10), float32],) */;
    %196 = @func_3983() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) */;
    %197 = @func_5229() /* ty=(Tensor[(182), float64], Tensor[(16, 15, 14), int8], Tensor[(3360), int8], Tensor[(480, 2), int8], Tensor[(6, 6, 15), bool], Tensor[(540), bool]) */;
    %198 = %197.2;
    %199 = cast(meta[relay.Constant][9] /* ty=Tensor[(3360), int8] */, dtype="int16") /* ty=Tensor[(3360), int16] */;
    %200 = shape_of(%198, dtype="int32") /* ty=Tensor[(1), int32] */;
    %201 = cast(%198, dtype="int16") /* ty=Tensor[(3360), int16] */;
    %202 = dyn.reshape(%199, %200, newshape=[]) /* ty=Tensor[(?), int16] */;
    %203 = cast(%var_9371, dtype="float32") /* ty=Tensor[(176), float32] */;
    %204 = reshape(%203, newshape=[176]) /* ty=Tensor[(176), float32] */;
    %205 = @func_4343(%204) /* ty=(Tensor[(182), float32], Tensor[(8, 2, 11), float32], float32, Tensor[(176), float32], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), float32]) */;
    %206 = @func_5229() /* ty=(Tensor[(182), float64], Tensor[(16, 15, 14), int8], Tensor[(3360), int8], Tensor[(480, 2), int8], Tensor[(6, 6, 15), bool], Tensor[(540), bool]) */;
    %207 = %206.2;
    %208 = cast(%var_9381, dtype="float32") /* ty=Tensor[(3360), float32] */;
    %209 = shape_of(%207, dtype="int32") /* ty=Tensor[(1), int32] */;
    %210 = cast(%207, dtype="float32") /* ty=Tensor[(3360), float32] */;
    %211 = dyn.reshape(%208, %209, newshape=[]) /* ty=Tensor[(?), float32] */;
    %212 = cast(meta[relay.Constant][10] /* ty=Tensor[(182), float64] */, dtype="float64") /* ty=Tensor[(182), float64] */;
    %213 = cast(%var_9395, dtype="bool") /* ty=Tensor[(9, 60), bool] */;
    %214 = reshape(%212, newshape=[182]) /* ty=Tensor[(182), float64] */;
    %215 = reshape(%213, newshape=[540]) /* ty=Tensor[(540), bool] */;
    %216 = @func_4890(%214, %215) /* ty=(Tensor[(182), bool], Tensor[(6, 6, 15), bool], Tensor[(540), bool], Tensor[(14, 7, 10), bool], Tensor[(14, 7, 10), bool]) */;
    %217 = %195.0;
    %218 = %196.1;
    %219 = add(%201, %202) /* ty=Tensor[(3360), int16] */;
    %220 = %205.4;
    %221 = floor_divide(%210, %211) /* ty=Tensor[(3360), float32] */;
    %222 = @func_3758() /* ty=Tensor[(4, 15, 5), uint8] */;
    %223 = %216.2;
    (%217, %218, %219, %220, %var_9371, %221, %222, %223, meta[relay.Constant][10] /* ty=Tensor[(182), float64] */, %var_9395)
  };
  %224(%var_9404, %var_9405, %var_9406) /* ty=(Tensor[(14, 7, 10), float32], Tensor[(14, 7, 10), uint64], Tensor[(3360), int16], Tensor[(14, 7, 10), uint64], Tensor[(176), float32], Tensor[(3360), float32], Tensor[(4, 15, 5), uint8], Tensor[(540), bool], Tensor[(182), float64], Tensor[(9, 60), bool]) */
}

def @func_6094() -> (Tensor[(182), float64], Tensor[(14, 7, 10), uint64]) {
  @func_6092() /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), uint64]) */
}

def @func_2115() -> (Tensor[(14, 7, 10), uint64], Tensor[(672), int8]) {
  %225 = @func_2005() /* ty=(Tensor[(14, 7, 10), float32], Tensor[(14, 7, 10), uint64], Tensor[(672), int8], Tensor[(14, 7, 10), uint64], Tensor[(13, 8, 15), float64], Tensor[(1560, 1), float64]) */;
  %226 = @func_1483() /* ty=Tensor[(14, 7, 10), uint64] */;
  %227 = %225.2;
  (%226, %227)
}

def @func_830() -> (Tensor[(182), float64], Tensor[(14, 7, 10), uint64]) {
  %228 = cast(meta[relay.Constant][11] /* ty=Tensor[(182), float32] */, dtype="float32") /* ty=Tensor[(182), float32] */;
  %229 = reshape(%228, newshape=[1, 13, 14]) /* ty=Tensor[(1, 13, 14), float32] */;
  %230 = @func_492(%229) /* ty=Tensor[(1, 13, 14), float32] */;
  %231 = cast(%230, dtype="float64") /* ty=Tensor[(1, 13, 14), float64] */;
  %232 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(182), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %233 = cast(meta[relay.Constant][11] /* ty=Tensor[(182), float32] */, dtype="float64") /* ty=Tensor[(182), float64] */;
  %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?), float64] */;
  %235 = cast(meta[relay.Constant][12] /* ty=Tensor[(14, 7, 10), float32] */, dtype="float32") /* ty=Tensor[(14, 7, 10), float32] */;
  %236 = log2(%235) /* ty=Tensor[(14, 7, 10), float32] */;
  %237 = cast(meta[relay.Constant][13] /* ty=Tensor[(14, 7, 10), float32] */, dtype="uint64") /* ty=Tensor[(14, 7, 10), uint64] */;
  %238 = shape_of(%236, dtype="int32") /* ty=Tensor[(3), int32] */;
  %239 = cast(%236, dtype="uint64") /* ty=Tensor[(14, 7, 10), uint64] */;
  %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %241 = power(%233, %234) /* ty=Tensor[(182), float64] */;
  %242 = bitwise_or(%239, %240) /* ty=Tensor[(14, 7, 10), uint64] */;
  (%241, %242)
}

def @func_5963() -> (Tensor[(182), float64], Tensor[(182), float64], Tensor[(14, 7, 10), float64]) {
  %243 = @func_1808() /* ty=Tensor[(182), float64] */;
  %244 = cast(%243, dtype="float64") /* ty=Tensor[(182), float64] */;
  %245 = reshape(%244, newshape=[182]) /* ty=Tensor[(182), float64] */;
  %246 = @func_2642() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %247 = %246.0;
  %248 = cast(%247, dtype="float64") /* ty=Tensor[(14, 7, 10), float64] */;
  %249 = @func_5432(%245) /* ty=Tensor[(182), float64] */;
  %250 = acosh(%248) /* ty=Tensor[(14, 7, 10), float64] */;
  (%243, %249, %250)
}

def @func_2843() -> (Tensor[(14, 7, 10), uint64], Tensor[(4, 15, 5), uint8]) {
  %251 = @func_1035() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) */;
  %252 = cast(meta[relay.Constant][14] /* ty=Tensor[(4, 15, 5), float32] */, dtype="float32") /* ty=Tensor[(4, 15, 5), float32] */;
  %253 = rsqrt(%252) /* ty=Tensor[(4, 15, 5), float32] */;
  %254 = cast(%253, dtype="float64") /* ty=Tensor[(4, 15, 5), float64] */;
  %255 = sqrt(%254) /* ty=Tensor[(4, 15, 5), float64] */;
  %256 = cast(meta[relay.Constant][14] /* ty=Tensor[(4, 15, 5), float32] */, dtype="uint8") /* ty=Tensor[(4, 15, 5), uint8] */;
  %257 = shape_of(%255, dtype="int32") /* ty=Tensor[(3), int32] */;
  %258 = cast(%255, dtype="uint8") /* ty=Tensor[(4, 15, 5), uint8] */;
  %259 = dyn.reshape(%256, %257, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %260 = %251.0;
  %261 = bitwise_xor(%258, %259) /* ty=Tensor[(4, 15, 5), uint8] */;
  (%260, %261)
}

def @func_8161() -> (Tensor[(182), float32], Tensor[(14, 7, 10), uint64]) {
  %262 = @func_7441() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(182), float64], Tensor[(182), uint64]) */;
  %263 = %262.1;
  %264 = cast(%263, dtype="float32") /* ty=Tensor[(182), float32] */;
  %265 = @func_5587() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %266 = acosh(%264) /* ty=Tensor[(182), float32] */;
  %267 = %265.0;
  (%266, %267)
}

def @func_9265() -> (Tensor[(182), float32], Tensor[(182), float32], Tensor[(14, 7, 10), uint8], Tensor[(1, 980), uint64], Tensor[(14, 7, 10), uint64]) {
  @func_9263() /* ty=(Tensor[(182), float32], Tensor[(182), float32], Tensor[(14, 7, 10), uint8], Tensor[(1, 980), uint64], Tensor[(14, 7, 10), uint64]) */
}

def @func_11481() -> (Tensor[(14, 7, 10), float64],) {
  @func_11479() /* ty=(Tensor[(14, 7, 10), float64],) */
}

def @func_1070(%var_1068: int64, %var_1069: Tensor[(14, 13, 15), int64]) -> (Tensor[(14, 13, 15), int64], Tensor[(182), float64]) {
  %272 = fn (%var_1060: int64, %var_1061: Tensor[(14, 13, 15), int64]) -> (Tensor[(14, 13, 15), int64], Tensor[(182), float64]) {
    %268 = cast(%var_1060, dtype="int64") /* ty=int64 */;
    %269 = cast(%var_1061, dtype="int64") /* ty=Tensor[(14, 13, 15), int64] */;
    %270 = bitwise_xor(%268, %269) /* ty=Tensor[(14, 13, 15), int64] */;
    %271 = @func_1041() /* ty=Tensor[(182), float64] */;
    (%270, %271)
  };
  %272(%var_1068, %var_1069) /* ty=(Tensor[(14, 13, 15), int64], Tensor[(182), float64]) */
}

def @func_1459(%var_1458: Tensor[(5, 14, 3), bool]) -> Tensor[(5, 14, 3), bool] {
  %277 = fn (%var_1447: Tensor[(5, 14, 3), bool]) -> Tensor[(5, 14, 3), bool] {
    %273 = cast(%var_1447, dtype="bool") /* ty=Tensor[(5, 14, 3), bool] */;
    %274 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(5, 14, 3), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %275 = cast(meta[relay.Constant][15] /* ty=Tensor[(5, 14, 3), bool] */, dtype="bool") /* ty=Tensor[(5, 14, 3), bool] */;
    %276 = dyn.reshape(%273, %274, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_and(%275, %276) /* ty=Tensor[(5, 14, 3), bool] */
  };
  %277(%var_1458) /* ty=Tensor[(5, 14, 3), bool] */
}

def @func_2611() -> (Tensor[(14, 7, 10), float32],) {
  @func_2609() /* ty=(Tensor[(14, 7, 10), float32],) */
}

def @func_1043() -> Tensor[(182), float64] {
  @func_1041() /* ty=Tensor[(182), float64] */
}

def @func_2314(%var_2312: Tensor[(182), float64]) -> Tensor[(182), float64] {
  @func_2311(%var_2312) /* ty=Tensor[(182), float64] */
}

def @func_4378(%var_4377: Tensor[(6, 6, 15), bool]) -> (Tensor[(6, 6, 15), bool],) {
  %283 = fn (%var_4348: Tensor[(6, 6, 15), bool]) -> (Tensor[(6, 6, 15), bool],) {
    %278 = cast(%var_4348, dtype="bool") /* ty=Tensor[(6, 6, 15), bool] */;
    %279 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(6, 6, 15), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %280 = cast(meta[relay.Constant][16] /* ty=Tensor[(6, 6, 15), bool] */, dtype="bool") /* ty=Tensor[(6, 6, 15), bool] */;
    %281 = dyn.reshape(%278, %279, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %282 = logical_and(%280, %281) /* ty=Tensor[(6, 6, 15), bool] */;
    (%282,)
  };
  %283(%var_4377) /* ty=(Tensor[(6, 6, 15), bool],) */
}

def @func_6860() -> (Tensor[(14, 7, 10), uint64],) {
  %284 = @func_2083() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %285 = %284.0;
  (%285,)
}

def @func_11314() -> Tensor[(14, 7, 10), uint64] {
  %286 = @func_9705() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %286.0
}

def @func_405(%var_387: Tensor[(1560), float64]) -> (Tensor[(13, 8, 15), float64], Tensor[(1560), float64], Tensor[(13, 8, 15), float64], Tensor[(12, 10, 3), uint64], Tensor[(13, 8, 15), float64], Tensor[(13, 8, 15), float64]) {
  %287 = cast(%var_387, dtype="float64") /* ty=Tensor[(1560), float64] */;
  %288 = reshape(%287, newshape=[13, 8, 15]) /* ty=Tensor[(13, 8, 15), float64] */;
  %289 = @func_177(%288) /* ty=Tensor[(13, 8, 15), float64] */;
  %290 = cast(%289, dtype="float64") /* ty=Tensor[(13, 8, 15), float64] */;
  %291 = reshape(%290, newshape=[13, 8, 15]) /* ty=Tensor[(13, 8, 15), float64] */;
  %292 = cast(meta[relay.Constant][17] /* ty=Tensor[(12, 10, 3), float64] */, dtype="float64") /* ty=Tensor[(12, 10, 3), float64] */;
  %293 = acos(%292) /* ty=Tensor[(12, 10, 3), float64] */;
  %294 = cast(meta[relay.Constant][17] /* ty=Tensor[(12, 10, 3), float64] */, dtype="uint64") /* ty=Tensor[(12, 10, 3), uint64] */;
  %295 = shape_of(%293, dtype="int32") /* ty=Tensor[(3), int32] */;
  %296 = cast(%293, dtype="uint64") /* ty=Tensor[(12, 10, 3), uint64] */;
  %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %298 = @func_177(%291) /* ty=Tensor[(13, 8, 15), float64] */;
  %299 = cast(%298, dtype="float64") /* ty=Tensor[(13, 8, 15), float64] */;
  %300 = reshape(%299, newshape=[13, 8, 15]) /* ty=Tensor[(13, 8, 15), float64] */;
  %301 = @func_177(%300) /* ty=Tensor[(13, 8, 15), float64] */;
  %302 = cast(%301, dtype="float64") /* ty=Tensor[(13, 8, 15), float64] */;
  %303 = reshape(%302, newshape=[13, 8, 15]) /* ty=Tensor[(13, 8, 15), float64] */;
  %304 = multiply(%296, %297) /* ty=Tensor[(12, 10, 3), uint64] */;
  %305 = @func_177(%303) /* ty=Tensor[(13, 8, 15), float64] */;
  (%289, %var_387, %298, %304, %301, %305)
}

def @func_2494(%var_2446: Tensor[(16, 15, 14), int8], %var_2467: Tensor[(16, 15, 4), int8]) -> (Tensor[(16, 15, 14), int8], Tensor[(16, 15, 4), bool], Tensor[(16, 15, 1), float64], Tensor[(14, 7, 10), uint64]) {
  %306 = cast(meta[relay.Constant][18] /* ty=Tensor[(16, 15, 1), int8] */, dtype="int8") /* ty=Tensor[(16, 15, 1), int8] */;
  %307 = cast(%var_2446, dtype="int8") /* ty=Tensor[(16, 15, 14), int8] */;
  %308 = cast(meta[relay.Constant][18] /* ty=Tensor[(16, 15, 1), int8] */, dtype="bool") /* ty=Tensor[(16, 15, 1), bool] */;
  %309 = cast(%var_2467, dtype="bool") /* ty=Tensor[(16, 15, 4), bool] */;
  %310 = cast(meta[relay.Constant][18] /* ty=Tensor[(16, 15, 1), int8] */, dtype="float64") /* ty=Tensor[(16, 15, 1), float64] */;
  %311 = @func_2115() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(672), int8]) */;
  %312 = subtract(%306, %307) /* ty=Tensor[(16, 15, 14), int8] */;
  %313 = not_equal(%308, %309) /* ty=Tensor[(16, 15, 4), bool] */;
  %314 = cos(%310) /* ty=Tensor[(16, 15, 1), float64] */;
  %315 = %311.0;
  (%312, %313, %314, %315)
}

def @func_7486(%var_7484: Tensor[(3360), int8]) -> (Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(3360), int8]) {
  @func_7483(%var_7484) /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(3360), int8]) */
}

def @func_11942(%var_11939: Tensor[(7, 8, 9), uint8], %var_11940: Tensor[(7, 8, 9), uint8], %var_11941: Tensor[(7, 8, 9), uint8]) -> (Tensor[(7, 8, 9), uint8], Tensor[(7, 8, 9), bool]) {
  @func_11937(%var_11939, %var_11940, %var_11941) /* ty=(Tensor[(7, 8, 9), uint8], Tensor[(7, 8, 9), bool]) */
}

def @func_1822() -> Tensor[(182), float64] {
  %316 = fn () -> Tensor[(182), float64] {
    @func_1041() /* ty=Tensor[(182), float64] */
  };
  %316() /* ty=Tensor[(182), float64] */
}

def @func_11974() -> (Tensor[(182), float64], Tensor[(14, 7, 10), bool]) {
  %317 = @func_5963() /* ty=(Tensor[(182), float64], Tensor[(182), float64], Tensor[(14, 7, 10), float64]) */;
  %318 = @func_3516() /* ty=(Tensor[(14, 7, 10), bool], Tensor[(14, 7, 10), uint64]) */;
  %319 = %317.1;
  %320 = %318.0;
  (%319, %320)
}

def @func_3322() -> Tensor[(14, 7, 10), bool] {
  %321 = @func_1157() /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), bool]) */;
  %321.1
}

def @func_4305() -> (Tensor[(14, 7, 10), uint64],) {
  %323 = fn () -> (Tensor[(14, 7, 10), uint64],) {
    %322 = @func_1483() /* ty=Tensor[(14, 7, 10), uint64] */;
    (%322,)
  };
  %323() /* ty=(Tensor[(14, 7, 10), uint64],) */
}

def @func_4950(%var_4907: Tensor[(182), float64]) -> (Tensor[(182), bool], Tensor[(14, 7, 10), uint64]) {
  %324 = @func_1808() /* ty=Tensor[(182), float64] */;
  %325 = cast(%var_4907, dtype="uint64") /* ty=Tensor[(182), uint64] */;
  %326 = shape_of(%324, dtype="int32") /* ty=Tensor[(1), int32] */;
  %327 = cast(%324, dtype="uint64") /* ty=Tensor[(182), uint64] */;
  %328 = dyn.reshape(%325, %326, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %329 = add(%327, %328) /* ty=Tensor[(182), uint64] */;
  %330 = cast(meta[relay.Constant][19] /* ty=Tensor[(182), uint64] */, dtype="bool") /* ty=Tensor[(182), bool] */;
  %331 = shape_of(%329, dtype="int32") /* ty=Tensor[(1), int32] */;
  %332 = cast(%329, dtype="bool") /* ty=Tensor[(182), bool] */;
  %333 = dyn.reshape(%330, %331, newshape=[]) /* ty=Tensor[(?), bool] */;
  %334 = greater(%332, %333) /* ty=Tensor[(182), bool] */;
  %335 = @func_1483() /* ty=Tensor[(14, 7, 10), uint64] */;
  (%334, %335)
}

def @func_8163() -> (Tensor[(182), float32], Tensor[(14, 7, 10), uint64]) {
  @func_8161() /* ty=(Tensor[(182), float32], Tensor[(14, 7, 10), uint64]) */
}

def @func_1321() -> (Tensor[(14, 7, 10), uint64],) {
  %336 = @func_865() /* ty=Tensor[(14, 7, 10), uint64] */;
  (%336,)
}

def @func_9705() -> (Tensor[(14, 7, 10), uint64],) {
  %337 = @func_1374() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %338 = %337.0;
  (%338,)
}

def @func_8274() -> (Tensor[(14, 7, 10), uint64], Tensor[(1560, 1), float64], Tensor[(14, 7, 10), bool]) {
  %339 = @func_2083() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %340 = @func_2005() /* ty=(Tensor[(14, 7, 10), float32], Tensor[(14, 7, 10), uint64], Tensor[(672), int8], Tensor[(14, 7, 10), uint64], Tensor[(13, 8, 15), float64], Tensor[(1560, 1), float64]) */;
  %341 = %339.0;
  %342 = %340.5;
  %343 = @func_6789() /* ty=Tensor[(14, 7, 10), bool] */;
  (%341, %342, %343)
}

def @func_2560() -> (Tensor[(182), float64], Tensor[(14, 7, 10), uint64]) {
  %344 = @func_1596() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %345 = @func_1808() /* ty=Tensor[(182), float64] */;
  %346 = %344.0;
  (%345, %346)
}

def @func_3434() -> (Tensor[(14, 7, 10), uint64], Tensor[(182), float32], Tensor[(5, 14, 3), bool]) {
  %347 = @func_1003() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %348 = @func_2552() /* ty=Tensor[(182), float32] */;
  %349 = cast(%348, dtype="float32") /* ty=Tensor[(182), float32] */;
  %350 = @func_1717() /* ty=(Tensor[(14, 7, 10), float32], Tensor[(5, 14, 3), bool], Tensor[(210), bool], Tensor[(182), float64]) */;
  %351 = %347.0;
  %352 = cosh(%349) /* ty=Tensor[(182), float32] */;
  %353 = %350.1;
  (%351, %352, %353)
}

def @func_7135(%var_7108: Tensor[(176, 1), float32]) -> (Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(8, 2, 11), float32], Tensor[(176, 1), float32]) {
  %354 = @func_5856() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) */;
  %355 = @func_4466() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(176), float32], Tensor[(8, 2, 11), bool]) */;
  %356 = @func_1662() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %357 = cast(%var_7108, dtype="float32") /* ty=Tensor[(176, 1), float32] */;
  %358 = reshape(%357, newshape=[176]) /* ty=Tensor[(176), float32] */;
  %359 = @func_4343(%358) /* ty=(Tensor[(182), float32], Tensor[(8, 2, 11), float32], float32, Tensor[(176), float32], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), float32]) */;
  %360 = %354.1;
  %361 = %355.0;
  %362 = %356.0;
  %363 = %359.1;
  (%360, %361, %362, %363, %var_7108)
}

def @func_11632() -> (Tensor[(14, 7, 10), uint64],) {
  %364 = @func_6508() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %365 = %364.0;
  (%365,)
}

def @func_8666() -> (Tensor[(182), int64],) {
  %366 = @func_2155() /* ty=(Tensor[(182), float32],) */;
  %367 = %366.0;
  %368 = cast(meta[relay.Constant][20] /* ty=Tensor[(182), float32] */, dtype="int64") /* ty=Tensor[(182), int64] */;
  %369 = shape_of(%367, dtype="int32") /* ty=Tensor[(1), int32] */;
  %370 = cast(%367, dtype="int64") /* ty=Tensor[(182), int64] */;
  %371 = dyn.reshape(%368, %369, newshape=[]) /* ty=Tensor[(?), int64] */;
  %372 = maximum(%370, %371) /* ty=Tensor[(182), int64] */;
  (%372,)
}

def @func_2201() -> Tensor[(14, 7, 10), uint64] {
  %374 = fn () -> Tensor[(14, 7, 10), uint64] {
    %373 = @func_2083() /* ty=(Tensor[(14, 7, 10), uint64],) */;
    %373.0
  };
  %374() /* ty=Tensor[(14, 7, 10), uint64] */
}

def @func_5009() -> (Tensor[(14, 7, 10), uint64],) {
  %376 = fn () -> (Tensor[(14, 7, 10), uint64],) {
    %375 = @func_2200() /* ty=Tensor[(14, 7, 10), uint64] */;
    (%375,)
  };
  %376() /* ty=(Tensor[(14, 7, 10), uint64],) */
}

def @func_8639() -> Tensor[(14, 7, 10), uint64] {
  @func_8637() /* ty=Tensor[(14, 7, 10), uint64] */
}

def @func_2927() -> (Tensor[(4, 15, 5), uint8], Tensor[(182), float32]) {
  @func_2925() /* ty=(Tensor[(4, 15, 5), uint8], Tensor[(182), float32]) */
}

def @func_3517() -> (Tensor[(14, 7, 10), bool], Tensor[(14, 7, 10), uint64]) {
  %386 = fn () -> (Tensor[(14, 7, 10), bool], Tensor[(14, 7, 10), uint64]) {
    %377 = @func_2901() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(182), uint64]) */;
    %378 = %377.0;
    %379 = cast(meta[relay.Constant][21] /* ty=Tensor[(14, 7, 10), uint64] */, dtype="bool") /* ty=Tensor[(14, 7, 10), bool] */;
    %380 = shape_of(%378, dtype="int32") /* ty=Tensor[(3), int32] */;
    %381 = cast(%378, dtype="bool") /* ty=Tensor[(14, 7, 10), bool] */;
    %382 = dyn.reshape(%379, %380, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %383 = @func_1596() /* ty=(Tensor[(14, 7, 10), uint64],) */;
    %384 = logical_or(%381, %382) /* ty=Tensor[(14, 7, 10), bool] */;
    %385 = %383.0;
    (%384, %385)
  };
  %386() /* ty=(Tensor[(14, 7, 10), bool], Tensor[(14, 7, 10), uint64]) */
}

def @func_3538() -> (Tensor[(14, 7, 10), float64],) {
  %387 = @func_1374() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %388 = %387.0;
  %389 = cast(%388, dtype="float64") /* ty=Tensor[(14, 7, 10), float64] */;
  %390 = atan(%389) /* ty=Tensor[(14, 7, 10), float64] */;
  (%390,)
}

def @func_8668() -> (Tensor[(182), int64],) {
  @func_8666() /* ty=(Tensor[(182), int64],) */
}

def @func_1542(%var_1541: Tensor[(2730), int64]) -> (Tensor[(14, 7, 10), uint64], Tensor[(182), float64], int64, Tensor[(2730), int64]) {
  %399 = fn (%var_1523: Tensor[(2730), int64]) -> (Tensor[(14, 7, 10), uint64], Tensor[(182), float64], int64, Tensor[(2730), int64]) {
    %391 = @func_830() /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), uint64]) */;
    %392 = cast(5 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %393 = cast(%var_1523, dtype="int64") /* ty=Tensor[(2730), int64] */;
    %394 = reshape(%392, newshape=[]) /* ty=int64 */;
    %395 = reshape(%393, newshape=[14, 13, 15]) /* ty=Tensor[(14, 13, 15), int64] */;
    %396 = @func_1067(%394, %395) /* ty=(Tensor[(14, 13, 15), int64], Tensor[(182), float64]) */;
    %397 = %391.1;
    %398 = %396.1;
    (%397, %398, 5 /* ty=int64 */, %var_1523)
  };
  %399(%var_1541) /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(182), float64], int64, Tensor[(2730), int64]) */
}

def @func_11316() -> Tensor[(14, 7, 10), uint64] {
  @func_11314() /* ty=Tensor[(14, 7, 10), uint64] */
}

def @func_4124(%var_4079: Tensor[(11, 13, 14), float32]) -> (Tensor[(?, 13, 14), int64], Tensor[(11, 13, 14), uint64], Tensor[(14, 7, 10), float32], Tensor[(1, 13, 14), float32], Tensor[(14, 7, 10), bool]) {
  %400 = @func_1338() /* ty=Tensor[(182), float64] */;
  %401 = cast(%400, dtype="float32") /* ty=Tensor[(182), float32] */;
  %402 = reshape(%401, newshape=[1, 13, 14]) /* ty=Tensor[(1, 13, 14), float32] */;
  %403 = @func_492(%402) /* ty=Tensor[(1, 13, 14), float32] */;
  %404 = cast(%400, dtype="int64") /* ty=Tensor[(182), int64] */;
  %405 = shape_of(%403, dtype="int32") /* ty=Tensor[(3), int32] */;
  %406 = cast(%403, dtype="int64") /* ty=Tensor[(1, 13, 14), int64] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %408 = cast(%403, dtype="uint64") /* ty=Tensor[(1, 13, 14), uint64] */;
  %409 = cast(%var_4079, dtype="uint64") /* ty=Tensor[(11, 13, 14), uint64] */;
  %410 = @func_2399() /* ty=(Tensor[(14, 7, 10), float32], Tensor[(182), float32]) */;
  %411 = cast(%403, dtype="float32") /* ty=Tensor[(1, 13, 14), float32] */;
  %412 = @func_1157() /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), bool]) */;
  %413 = subtract(%406, %407) /* ty=Tensor[(?, 13, 14), int64] */;
  %414 = bitwise_xor(%408, %409) /* ty=Tensor[(11, 13, 14), uint64] */;
  %415 = %410.0;
  %416 = sin(%411) /* ty=Tensor[(1, 13, 14), float32] */;
  %417 = %412.1;
  (%413, %414, %415, %416, %417)
}

def @func_4890(%var_4850: Tensor[(182), float64], %var_4862: Tensor[(540), bool]) -> (Tensor[(182), bool], Tensor[(6, 6, 15), bool], Tensor[(540), bool], Tensor[(14, 7, 10), bool], Tensor[(14, 7, 10), bool]) {
  %418 = @func_1041() /* ty=Tensor[(182), float64] */;
  %419 = cast(%var_4850, dtype="bool") /* ty=Tensor[(182), bool] */;
  %420 = shape_of(%418, dtype="int32") /* ty=Tensor[(1), int32] */;
  %421 = cast(%418, dtype="bool") /* ty=Tensor[(182), bool] */;
  %422 = dyn.reshape(%419, %420, newshape=[]) /* ty=Tensor[(?), bool] */;
  %423 = cast(%var_4862, dtype="bool") /* ty=Tensor[(540), bool] */;
  %424 = reshape(%423, newshape=[6, 6, 15]) /* ty=Tensor[(6, 6, 15), bool] */;
  %425 = @func_4376(%424) /* ty=(Tensor[(6, 6, 15), bool],) */;
  %426 = @func_3516() /* ty=(Tensor[(14, 7, 10), bool], Tensor[(14, 7, 10), uint64]) */;
  %427 = less_equal(%421, %422) /* ty=Tensor[(182), bool] */;
  %428 = %425.0;
  %429 = %426.0;
  %430 = @func_3322() /* ty=Tensor[(14, 7, 10), bool] */;
  (%427, %428, %var_4862, %429, %430)
}

def @func_7316() -> (Tensor[(14, 7, 10), uint64], Tensor[(182), float64]) {
  %431 = @func_938() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %432 = @func_2560() /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), uint64]) */;
  %433 = %431.0;
  %434 = %432.0;
  (%433, %434)
}

def @func_867() -> Tensor[(14, 7, 10), uint64] {
  @func_865() /* ty=Tensor[(14, 7, 10), uint64] */
}

def @func_4252() -> Tensor[(14, 7, 10), float32] {
  %436 = fn () -> Tensor[(14, 7, 10), float32] {
    %435 = @func_2609() /* ty=(Tensor[(14, 7, 10), float32],) */;
    %435.0
  };
  %436() /* ty=Tensor[(14, 7, 10), float32] */
}

def @func_11479() -> (Tensor[(14, 7, 10), float64],) {
  %437 = @func_6784() /* ty=(Tensor[(14, 7, 10), float64], Tensor[(8, 2, 11), float32], float32, Tensor[(176), float32]) */;
  %438 = %437.0;
  (%438,)
}

def @func_11091(%var_11088: Tensor[(1560, 11), float64], %var_11089: uint64, %var_11090: Tensor[(2640), uint64]) -> (Tensor[(15, 16, 11), uint64], uint64, Tensor[(2640), uint64], Tensor[(1560, 11), uint64], Tensor[(14, 7, 10), uint64], Tensor[(182), float64], Tensor[(14, 7, 10), uint64], Tensor[(1560, 11), bool], Tensor[(1560, 11), float32]) {
  @func_11086(%var_11088, %var_11089, %var_11090) /* ty=(Tensor[(15, 16, 11), uint64], uint64, Tensor[(2640), uint64], Tensor[(1560, 11), uint64], Tensor[(14, 7, 10), uint64], Tensor[(182), float64], Tensor[(14, 7, 10), uint64], Tensor[(1560, 11), bool], Tensor[(1560, 11), float32]) */
}

def @func_5179() -> Tensor[(14, 7, 10), uint64] {
  @func_5177() /* ty=Tensor[(14, 7, 10), uint64] */
}

def @func_1282() -> (Tensor[(14, 7, 10), float32],) {
  %442 = fn () -> (Tensor[(14, 7, 10), float32],) {
    %439 = @func_865() /* ty=Tensor[(14, 7, 10), uint64] */;
    %440 = cast(%439, dtype="float32") /* ty=Tensor[(14, 7, 10), float32] */;
    %441 = erf(%440) /* ty=Tensor[(14, 7, 10), float32] */;
    (%441,)
  };
  %442() /* ty=(Tensor[(14, 7, 10), float32],) */
}

def @func_2791() -> Tensor[(182), float32] {
  %443 = fn () -> Tensor[(182), float32] {
    @func_2552() /* ty=Tensor[(182), float32] */
  };
  %443() /* ty=Tensor[(182), float32] */
}

def @func_2117() -> (Tensor[(14, 7, 10), uint64], Tensor[(672), int8]) {
  @func_2115() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(672), int8]) */
}

def @func_8433() -> (Tensor[(182), float64], Tensor[(4, 14, 11), bool], int8) {
  %450 = fn () -> (Tensor[(182), float64], Tensor[(4, 14, 11), bool], int8) {
    %444 = @func_6970() /* ty=(Tensor[(182), float64],) */;
    %445 = cast(meta[relay.Constant][22] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %446 = reshape(%445, newshape=[]) /* ty=int8 */;
    %447 = @func_1574(%446) /* ty=(Tensor[(4, 14, 11), bool], Tensor[(182), float64], Tensor[(14, 7, 10), float64]) */;
    %448 = %444.0;
    %449 = %447.0;
    (%448, %449, meta[relay.Constant][22] /* ty=int8 */)
  };
  %450() /* ty=(Tensor[(182), float64], Tensor[(4, 14, 11), bool], int8) */
}

def @func_11193(%var_11192: Tensor[(540), bool]) -> (Tensor[(182), float64], Tensor[(6, 6, 15), bool], Tensor[(540), bool], Tensor[(14, 7, 10), uint64]) {
  %458 = fn (%var_11169: Tensor[(540), bool]) -> (Tensor[(182), float64], Tensor[(6, 6, 15), bool], Tensor[(540), bool], Tensor[(14, 7, 10), uint64]) {
    %451 = cast(%var_11169, dtype="bool") /* ty=Tensor[(540), bool] */;
    %452 = reshape(%451, newshape=[6, 6, 15]) /* ty=Tensor[(6, 6, 15), bool] */;
    %453 = @func_4376(%452) /* ty=(Tensor[(6, 6, 15), bool],) */;
    %454 = @func_6658() /* ty=(Tensor[(14, 7, 10), uint64],) */;
    %455 = @func_1808() /* ty=Tensor[(182), float64] */;
    %456 = %453.0;
    %457 = %454.0;
    (%455, %456, %var_11169, %457)
  };
  %458(%var_11192) /* ty=(Tensor[(182), float64], Tensor[(6, 6, 15), bool], Tensor[(540), bool], Tensor[(14, 7, 10), uint64]) */
}

def @func_5118() -> (Tensor[(14, 7, 10), uint64],) {
  %459 = @func_830() /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), uint64]) */;
  %460 = %459.1;
  (%460,)
}

def @func_179(%var_178: Tensor[(13, 8, 15), float64]) -> Tensor[(13, 8, 15), float64] {
  %462 = fn (%var_168: Tensor[(13, 8, 15), float64]) -> Tensor[(13, 8, 15), float64] {
    %461 = cast(%var_168, dtype="float64") /* ty=Tensor[(13, 8, 15), float64] */;
    rsqrt(%461) /* ty=Tensor[(13, 8, 15), float64] */
  };
  %462(%var_178) /* ty=Tensor[(13, 8, 15), float64] */
}

def @func_6321(%var_6319: float64) -> (Tensor[(14, 7, 10), float32], Tensor[(182), float32], Tensor[(14, 7, 10), float32], float64, Tensor[(13, 8, 15), float64], Tensor[(945), uint8], Tensor[(14, 7, 10), uint64]) {
  @func_6318(%var_6319) /* ty=(Tensor[(14, 7, 10), float32], Tensor[(182), float32], Tensor[(14, 7, 10), float32], float64, Tensor[(13, 8, 15), float64], Tensor[(945), uint8], Tensor[(14, 7, 10), uint64]) */
}

def @func_5828() -> (Tensor[(182), float64],) {
  %465 = fn () -> (Tensor[(182), float64],) {
    %463 = @func_2560() /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), uint64]) */;
    %464 = %463.0;
    (%464,)
  };
  %465() /* ty=(Tensor[(182), float64],) */
}

def @func_3032(%var_3031: Tensor[(16, 8, 5), float64]) -> Tensor[(16, 8, 5), float64] {
  %467 = fn (%var_3020: Tensor[(16, 8, 5), float64]) -> Tensor[(16, 8, 5), float64] {
    %466 = cast(%var_3020, dtype="float64") /* ty=Tensor[(16, 8, 5), float64] */;
    asinh(%466) /* ty=Tensor[(16, 8, 5), float64] */
  };
  %467(%var_3031) /* ty=Tensor[(16, 8, 5), float64] */
}

def @func_1159() -> (Tensor[(182), float64], Tensor[(14, 7, 10), bool]) {
  @func_1157() /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), bool]) */
}

def @func_11634() -> (Tensor[(14, 7, 10), uint64],) {
  @func_11632() /* ty=(Tensor[(14, 7, 10), uint64],) */
}

def @func_6729() -> Tensor[(182), float32] {
  %469 = fn () -> Tensor[(182), float32] {
    %468 = @func_3434() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(182), float32], Tensor[(5, 14, 3), bool]) */;
    %468.1
  };
  %469() /* ty=Tensor[(182), float32] */
}

def @func_1664() -> (Tensor[(14, 7, 10), uint64],) {
  @func_1662() /* ty=(Tensor[(14, 7, 10), uint64],) */
}

def @func_6508() -> (Tensor[(14, 7, 10), uint64],) {
  %470 = @func_4304() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %471 = %470.0;
  (%471,)
}

def @func_8727() -> (Tensor[(14, 7, 10), uint64], Tensor[(182), float32]) {
  @func_8725() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(182), float32]) */
}

def @func_2991() -> (Tensor[(14, 7, 10), uint64], Tensor[(182), float64]) {
  @func_2989() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(182), float64]) */
}

def @func_3540() -> (Tensor[(14, 7, 10), float64],) {
  @func_3538() /* ty=(Tensor[(14, 7, 10), float64],) */
}

def @main(%var_12111: Tensor[(21, 3), uint16], %var_12112: Tensor[(504), uint16]) -> (Tensor[(14, 7, 10), uint64], Tensor[(210), bool], Tensor[(182), float32], Tensor[(182), float64], Tensor[(14, 7, 10), uint64], Tensor[(182), float32], Tensor[(14, 7, 10), uint64], Tensor[(13, 8, 15), float64], Tensor[(21, 3), uint16], Tensor[(504), uint16], Tensor[(13, 8, 15), float64], Tensor[(8, 7, 9), float64]) {
  %472 = @func_11797() /* ty=(Tensor[(182), float32],) */;
  %473 = @func_6837() /* ty=(Tensor[(182), float64], Tensor[(3360), int8], Tensor[(3360), float64]) */;
  %474 = @func_11634() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %475 = @func_8163() /* ty=(Tensor[(182), float32], Tensor[(14, 7, 10), uint64]) */;
  %476 = @func_6660() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %477 = @func_2007() /* ty=(Tensor[(14, 7, 10), float32], Tensor[(14, 7, 10), uint64], Tensor[(672), int8], Tensor[(14, 7, 10), uint64], Tensor[(13, 8, 15), float64], Tensor[(1560, 1), float64]) */;
  %478 = @func_2005() /* ty=(Tensor[(14, 7, 10), float32], Tensor[(14, 7, 10), uint64], Tensor[(672), int8], Tensor[(14, 7, 10), uint64], Tensor[(13, 8, 15), float64], Tensor[(1560, 1), float64]) */;
  %479 = %478.4;
  %480 = cast(%479, dtype="float64") /* ty=Tensor[(13, 8, 15), float64] */;
  %481 = reshape(%480, newshape=[1560]) /* ty=Tensor[(1560), float64] */;
  %482 = @func_408(%481) /* ty=(Tensor[(13, 8, 15), float64], Tensor[(1560), float64], Tensor[(13, 8, 15), float64], Tensor[(12, 10, 3), uint64], Tensor[(13, 8, 15), float64], Tensor[(13, 8, 15), float64]) */;
  %483 = cast(%var_12111, dtype="uint16") /* ty=Tensor[(21, 3), uint16] */;
  %484 = cast(%var_12112, dtype="uint16") /* ty=Tensor[(504), uint16] */;
  %485 = reshape(%483, newshape=[1, 7, 9]) /* ty=Tensor[(1, 7, 9), uint16] */;
  %486 = reshape(%484, newshape=[8, 7, 9]) /* ty=Tensor[(8, 7, 9), uint16] */;
  %487 = @func_11289(%485, %486) /* ty=(Tensor[(8, 7, 9), bool],) */;
  %488 = %487.0;
  %489 = cast(%488, dtype="float64") /* ty=Tensor[(8, 7, 9), float64] */;
  %490 = @func_7710() /* ty=Tensor[(14, 7, 10), uint64] */;
  %491 = @func_5087() /* ty=Tensor[(210), bool] */;
  %492 = %472.0;
  %493 = %473.0;
  %494 = %474.0;
  %495 = %475.0;
  %496 = %476.0;
  %497 = %477.4;
  %498 = %482.2;
  %499 = sigmoid(%489) /* ty=Tensor[(8, 7, 9), float64] */;
  (%490, %491, %492, %493, %494, %495, %496, %497, %var_12111, %var_12112, %498, %499)
}

def @func_5376(%var_5375: Tensor[(5, 14, 3), bool]) -> Tensor[(5, 14, 3), float64] {
  %506 = fn (%var_5369: Tensor[(5, 14, 3), bool]) -> Tensor[(5, 14, 3), float64] {
    %500 = @func_3434() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(182), float32], Tensor[(5, 14, 3), bool]) */;
    %501 = %500.2;
    %502 = cast(%var_5369, dtype="float64") /* ty=Tensor[(5, 14, 3), float64] */;
    %503 = shape_of(%501, dtype="int32") /* ty=Tensor[(3), int32] */;
    %504 = cast(%501, dtype="float64") /* ty=Tensor[(5, 14, 3), float64] */;
    %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    divide(%504, %505) /* ty=Tensor[(5, 14, 3), float64] */
  };
  %506(%var_5375) /* ty=Tensor[(5, 14, 3), float64] */
}

def @func_11539() -> (Tensor[(182), float64], Tensor[(14, 7, 10), float32], Tensor[(14, 7, 10), uint64], Tensor[(960), int8]) {
  @func_11537() /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), float32], Tensor[(14, 7, 10), uint64], Tensor[(960), int8]) */
}

def @func_1597() -> (Tensor[(14, 7, 10), uint64],) {
  %508 = fn () -> (Tensor[(14, 7, 10), uint64],) {
    %507 = @func_865() /* ty=Tensor[(14, 7, 10), uint64] */;
    (%507,)
  };
  %508() /* ty=(Tensor[(14, 7, 10), uint64],) */
}

def @func_8709() -> (Tensor[(14, 7, 10), uint64],) {
  %510 = fn () -> (Tensor[(14, 7, 10), uint64],) {
    %509 = @func_2200() /* ty=Tensor[(14, 7, 10), uint64] */;
    (%509,)
  };
  %510() /* ty=(Tensor[(14, 7, 10), uint64],) */
}

def @func_5804() -> Tensor[(182), float32] {
  %512 = fn () -> Tensor[(182), float32] {
    %511 = @func_5315() /* ty=(Tensor[(182), float32],) */;
    %511.0
  };
  %512() /* ty=Tensor[(182), float32] */
}

def @func_2954() -> (Tensor[(182), float64],) {
  %513 = @func_1041() /* ty=Tensor[(182), float64] */;
  (%513,)
}

def @func_10177() -> (Tensor[(1560, 1), float64], Tensor[(14, 7, 10), uint64]) {
  @func_10175() /* ty=(Tensor[(1560, 1), float64], Tensor[(14, 7, 10), uint64]) */
}

def @func_10510(%var_10508: Tensor[(2640), uint64]) -> (Tensor[(14, 7, 10), uint64], Tensor[(182), float64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), float32], Tensor[(15, 16, 11), uint64], uint64, Tensor[(2640), uint64], Tensor[(12, 2, 4), float64], Tensor[(96), float64], Tensor[(1, 13, 14), float32]) {
  @func_10507(%var_10508) /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(182), float64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), float32], Tensor[(15, 16, 11), uint64], uint64, Tensor[(2640), uint64], Tensor[(12, 2, 4), float64], Tensor[(96), float64], Tensor[(1, 13, 14), float32]) */
}

def @func_7804(%var_7802: Tensor[(1, 9, 11), bool], %var_7803: Tensor[(1, 9, 11), bool]) -> (Tensor[(?, 9, 11), bool],) {
  %519 = fn (%var_7794: Tensor[(1, 9, 11), bool], %var_7795: Tensor[(1, 9, 11), bool]) -> (Tensor[(?, 9, 11), bool],) {
    %514 = cast(%var_7795, dtype="bool") /* ty=Tensor[(1, 9, 11), bool] */;
    %515 = shape_of(%var_7794, dtype="int32") /* ty=Tensor[(3), int32] */;
    %516 = cast(%var_7794, dtype="bool") /* ty=Tensor[(1, 9, 11), bool] */;
    %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %518 = logical_or(%516, %517) /* ty=Tensor[(?, 9, 11), bool] */;
    (%518,)
  };
  %519(%var_7802, %var_7803) /* ty=(Tensor[(?, 9, 11), bool],) */
}

def @func_9062(%var_9060: Tensor[(16, 14, 14), float64], %var_9061: Tensor[(1560), float64]) -> (Tensor[(16, 14, 14), float64], Tensor[(15, 12, 15), float64], Tensor[(12, 10, 3), uint64], Tensor[(1560), float64], Tensor[(14, 7, 10), uint64]) {
  %532 = fn (%var_9020: Tensor[(16, 14, 14), float64], %var_9043: Tensor[(1560), float64]) -> (Tensor[(16, 14, 14), float64], Tensor[(15, 12, 15), float64], Tensor[(12, 10, 3), uint64], Tensor[(1560), float64], Tensor[(14, 7, 10), uint64]) {
    %520 = cast(%var_9020, dtype="float64") /* ty=Tensor[(16, 14, 14), float64] */;
    %521 = @func_5463() /* ty=(Tensor[(15, 12, 15), float32],) */;
    %522 = %521.0;
    %523 = cast(%522, dtype="float64") /* ty=Tensor[(15, 12, 15), float64] */;
    %524 = cast(%var_9043, dtype="float64") /* ty=Tensor[(1560), float64] */;
    %525 = reshape(%524, newshape=[1560]) /* ty=Tensor[(1560), float64] */;
    %526 = @func_405(%525) /* ty=(Tensor[(13, 8, 15), float64], Tensor[(1560), float64], Tensor[(13, 8, 15), float64], Tensor[(12, 10, 3), uint64], Tensor[(13, 8, 15), float64], Tensor[(13, 8, 15), float64]) */;
    %527 = @func_6072() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(176), float32]) */;
    %528 = acosh(%520) /* ty=Tensor[(16, 14, 14), float64] */;
    %529 = log2(%523) /* ty=Tensor[(15, 12, 15), float64] */;
    %530 = %526.3;
    %531 = %527.0;
    (%528, %529, %530, %var_9043, %531)
  };
  %532(%var_9060, %var_9061) /* ty=(Tensor[(16, 14, 14), float64], Tensor[(15, 12, 15), float64], Tensor[(12, 10, 3), uint64], Tensor[(1560), float64], Tensor[(14, 7, 10), uint64]) */
}

def @func_10175() -> (Tensor[(1560, 1), float64], Tensor[(14, 7, 10), uint64]) {
  %533 = @func_8778() /* ty=Tensor[(1560, 1), float64] */;
  %534 = @func_7903() /* ty=Tensor[(14, 7, 10), uint64] */;
  (%533, %534)
}

def @func_10818() -> (Tensor[(3360), int8], Tensor[(14, 7, 10), bool], Tensor[(182), float64]) {
  %541 = fn () -> (Tensor[(3360), int8], Tensor[(14, 7, 10), bool], Tensor[(182), float64]) {
    %535 = @func_6836() /* ty=(Tensor[(182), float64], Tensor[(3360), int8], Tensor[(3360), float64]) */;
    %536 = @func_1157() /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), bool]) */;
    %537 = @func_5942() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(182), float64], Tensor[(14, 7, 10), uint64]) */;
    %538 = %535.1;
    %539 = %536.1;
    %540 = %537.1;
    (%538, %539, %540)
  };
  %541() /* ty=(Tensor[(3360), int8], Tensor[(14, 7, 10), bool], Tensor[(182), float64]) */
}

def @func_2498(%var_2496: Tensor[(16, 15, 14), int8], %var_2497: Tensor[(16, 15, 4), int8]) -> (Tensor[(16, 15, 14), int8], Tensor[(16, 15, 4), bool], Tensor[(16, 15, 1), float64], Tensor[(14, 7, 10), uint64]) {
  @func_2494(%var_2496, %var_2497) /* ty=(Tensor[(16, 15, 14), int8], Tensor[(16, 15, 4), bool], Tensor[(16, 15, 1), float64], Tensor[(14, 7, 10), uint64]) */
}

def @func_2084() -> (Tensor[(14, 7, 10), uint64],) {
  %544 = fn () -> (Tensor[(14, 7, 10), uint64],) {
    %542 = @func_1321() /* ty=(Tensor[(14, 7, 10), uint64],) */;
    %543 = %542.0;
    (%543,)
  };
  %544() /* ty=(Tensor[(14, 7, 10), uint64],) */
}

def @func_6658() -> (Tensor[(14, 7, 10), uint64],) {
  %545 = @func_6072() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(176), float32]) */;
  %546 = %545.0;
  (%546,)
}

def @func_2364() -> Tensor[(182), float32] {
  @func_2362() /* ty=Tensor[(182), float32] */
}

def @func_10033(%var_10031: Tensor[(1560), float64], %var_10032: Tensor[(2730), int64]) -> (Tensor[(182), float64], Tensor[(14, 7, 10), uint64], Tensor[(12, 10, 3), uint64], Tensor[(3136), float64], Tensor[(14, 7, 10), uint64], Tensor[(2730), int64], Tensor[(182), float32], Tensor[(182), float32], Tensor[(1560), float32], Tensor[(182), float32], Tensor[(14, 7, 10), float32]) {
  %571 = fn (%var_9941: Tensor[(1560), float64], %var_9964: Tensor[(2730), int64]) -> (Tensor[(182), float64], Tensor[(14, 7, 10), uint64], Tensor[(12, 10, 3), uint64], Tensor[(3136), float64], Tensor[(14, 7, 10), uint64], Tensor[(2730), int64], Tensor[(182), float32], Tensor[(182), float32], Tensor[(1560), float32], Tensor[(182), float32], Tensor[(14, 7, 10), float32]) {
    %547 = @func_938() /* ty=(Tensor[(14, 7, 10), uint64],) */;
    %548 = cast(meta[relay.Constant][23] /* ty=Tensor[(3136), float64] */, dtype="float64") /* ty=Tensor[(3136), float64] */;
    %549 = cast(%var_9941, dtype="float64") /* ty=Tensor[(1560), float64] */;
    %550 = reshape(%548, newshape=[16, 14, 14]) /* ty=Tensor[(16, 14, 14), float64] */;
    %551 = reshape(%549, newshape=[1560]) /* ty=Tensor[(1560), float64] */;
    %552 = @func_9059(%550, %551) /* ty=(Tensor[(16, 14, 14), float64], Tensor[(15, 12, 15), float64], Tensor[(12, 10, 3), uint64], Tensor[(1560), float64], Tensor[(14, 7, 10), uint64]) */;
    %553 = cast(%var_9964, dtype="int64") /* ty=Tensor[(2730), int64] */;
    %554 = reshape(%553, newshape=[2730]) /* ty=Tensor[(2730), int64] */;
    %555 = @func_1540(%554) /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(182), float64], int64, Tensor[(2730), int64]) */;
    %556 = @func_1338() /* ty=Tensor[(182), float64] */;
    %557 = cast(%556, dtype="float64") /* ty=Tensor[(182), float64] */;
    %558 = reshape(%557, newshape=[182]) /* ty=Tensor[(182), float64] */;
    %559 = @func_6931(%558) /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(3360), int8], Tensor[(960), int8], Tensor[(182), float32], Tensor[(15, 12, 15), float32]) */;
    %560 = cast(%var_9941, dtype="float64") /* ty=Tensor[(1560), float64] */;
    %561 = log10(%560) /* ty=Tensor[(1560), float64] */;
    %562 = cast(%561, dtype="float32") /* ty=Tensor[(1560), float32] */;
    %563 = %547.0;
    %564 = %552.2;
    %565 = %555.0;
    %566 = @func_6728() /* ty=Tensor[(182), float32] */;
    %567 = %559.3;
    %568 = sigmoid(%562) /* ty=Tensor[(1560), float32] */;
    %569 = @func_5803() /* ty=Tensor[(182), float32] */;
    %570 = @func_4251() /* ty=Tensor[(14, 7, 10), float32] */;
    (%556, %563, %564, meta[relay.Constant][23] /* ty=Tensor[(3136), float64] */, %565, %var_9964, %566, %567, %568, %569, %570)
  };
  %571(%var_10031, %var_10032) /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), uint64], Tensor[(12, 10, 3), uint64], Tensor[(3136), float64], Tensor[(14, 7, 10), uint64], Tensor[(2730), int64], Tensor[(182), float32], Tensor[(182), float32], Tensor[(1560), float32], Tensor[(182), float32], Tensor[(14, 7, 10), float32]) */
}

def @func_6837() -> (Tensor[(182), float64], Tensor[(3360), int8], Tensor[(3360), float64]) {
  %579 = fn () -> (Tensor[(182), float64], Tensor[(3360), int8], Tensor[(3360), float64]) {
    %572 = cast(meta[relay.Constant][24] /* ty=Tensor[(3360), int8] */, dtype="int8") /* ty=Tensor[(3360), int8] */;
    %573 = reshape(%572, newshape=[3360]) /* ty=Tensor[(3360), int8] */;
    %574 = @func_3213(%573) /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(16, 15, 1), float64], Tensor[(3360), int8], Tensor[(960), int8], Tensor[(13, 8, 15), float64], Tensor[(1, 945), uint8]) */;
    %575 = %574.2;
    %576 = cast(%575, dtype="float64") /* ty=Tensor[(3360), float64] */;
    %577 = @func_1041() /* ty=Tensor[(182), float64] */;
    %578 = log(%576) /* ty=Tensor[(3360), float64] */;
    (%577, meta[relay.Constant][24] /* ty=Tensor[(3360), int8] */, %578)
  };
  %579() /* ty=(Tensor[(182), float64], Tensor[(3360), int8], Tensor[(3360), float64]) */
}

def @func_3864(%var_3856: Tensor[(16, 14, 6), uint64], %var_3857: Tensor[(16, 14, 6), uint64]) -> Tensor[(16, 14, 6), uint64] {
  %580 = cast(%var_3857, dtype="uint64") /* ty=Tensor[(16, 14, 6), uint64] */;
  %581 = shape_of(%var_3856, dtype="int32") /* ty=Tensor[(3), int32] */;
  %582 = cast(%var_3856, dtype="uint64") /* ty=Tensor[(16, 14, 6), uint64] */;
  %583 = dyn.reshape(%580, %581, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  left_shift(%582, %583) /* ty=Tensor[(16, 14, 6), uint64] */
}

def @func_9567() -> (Tensor[(14, 7, 10), float32], Tensor[(14, 7, 10), uint64], Tensor[(182), float32]) {
  %589 = fn () -> (Tensor[(14, 7, 10), float32], Tensor[(14, 7, 10), uint64], Tensor[(182), float32]) {
    %584 = @func_6456() /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), float32]) */;
    %585 = @func_3983() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) */;
    %586 = %584.1;
    %587 = %585.0;
    %588 = @func_7216() /* ty=Tensor[(182), float32] */;
    (%586, %587, %588)
  };
  %589() /* ty=(Tensor[(14, 7, 10), float32], Tensor[(14, 7, 10), uint64], Tensor[(182), float32]) */
}

def @func_7607() -> (Tensor[(182), float64],) {
  %591 = fn () -> (Tensor[(182), float64],) {
    %590 = @func_1041() /* ty=Tensor[(182), float64] */;
    (%590,)
  };
  %591() /* ty=(Tensor[(182), float64],) */
}

def @func_1355(%var_1340: Tensor[(12, 14, 4), int8], %var_1341: Tensor[(12, 14, 4), int8]) -> (Tensor[(12, 14, 4), bool], Tensor[(14, 7, 10), uint64]) {
  %592 = cast(%var_1341, dtype="bool") /* ty=Tensor[(12, 14, 4), bool] */;
  %593 = shape_of(%var_1340, dtype="int32") /* ty=Tensor[(3), int32] */;
  %594 = cast(%var_1340, dtype="bool") /* ty=Tensor[(12, 14, 4), bool] */;
  %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %596 = @func_1003() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %597 = not_equal(%594, %595) /* ty=Tensor[(12, 14, 4), bool] */;
  %598 = %596.0;
  (%597, %598)
}

def @func_10948() -> Tensor[(14, 7, 10), uint64] {
  %600 = fn () -> Tensor[(14, 7, 10), uint64] {
    %599 = @func_2901() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(182), uint64]) */;
    %599.0
  };
  %600() /* ty=Tensor[(14, 7, 10), uint64] */
}

def @func_11873() -> (Tensor[(14, 7, 10), uint64], Tensor[(182), float32]) {
  @func_11871() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(182), float32]) */
}

def @func_1157() -> (Tensor[(182), float64], Tensor[(14, 7, 10), bool]) {
  %601 = @func_1003() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %602 = %601.0;
  %603 = @func_1003() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %604 = %603.0;
  %605 = cast(%604, dtype="bool") /* ty=Tensor[(14, 7, 10), bool] */;
  %606 = shape_of(%602, dtype="int32") /* ty=Tensor[(3), int32] */;
  %607 = cast(%602, dtype="bool") /* ty=Tensor[(14, 7, 10), bool] */;
  %608 = dyn.reshape(%605, %606, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %609 = @func_1041() /* ty=Tensor[(182), float64] */;
  %610 = greater(%607, %608) /* ty=Tensor[(14, 7, 10), bool] */;
  (%609, %610)
}

def @func_3653(%var_3652: Tensor[(945), uint8]) -> (Tensor[(14, 7, 10), float64], Tensor[(13, 8, 15), float64], Tensor[(945), uint8]) {
  %621 = fn (%var_3638: Tensor[(945), uint8]) -> (Tensor[(14, 7, 10), float64], Tensor[(13, 8, 15), float64], Tensor[(945), uint8]) {
    %611 = @func_1035() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) */;
    %612 = %611.0;
    %613 = cast(%612, dtype="float64") /* ty=Tensor[(14, 7, 10), float64] */;
    %614 = cast(%var_3638, dtype="uint8") /* ty=Tensor[(945), uint8] */;
    %615 = cast(%var_3638, dtype="uint8") /* ty=Tensor[(945), uint8] */;
    %616 = reshape(%614, newshape=[15, 9, 7]) /* ty=Tensor[(15, 9, 7), uint8] */;
    %617 = reshape(%615, newshape=[15, 9, 7]) /* ty=Tensor[(15, 9, 7), uint8] */;
    %618 = @func_3068(%616, %617) /* ty=(Tensor[(15, 9, 7), bool], Tensor[(13, 8, 15), float64], Tensor[(182), float32], Tensor[(182), float64]) */;
    %619 = asinh(%613) /* ty=Tensor[(14, 7, 10), float64] */;
    %620 = %618.1;
    (%619, %620, %var_3638)
  };
  %621(%var_3652) /* ty=(Tensor[(14, 7, 10), float64], Tensor[(13, 8, 15), float64], Tensor[(945), uint8]) */
}

def @func_5994() -> Tensor[(182), float32] {
  @func_5992() /* ty=Tensor[(182), float32] */
}

def @func_6246() -> (Tensor[(4, 15, 5), uint8], Tensor[(14, 7, 10), bool], Tensor[(8, 2, 11), float32], float32, Tensor[(176), float32]) {
  %631 = fn () -> (Tensor[(4, 15, 5), uint8], Tensor[(14, 7, 10), bool], Tensor[(8, 2, 11), float32], float32, Tensor[(176), float32]) {
    %622 = @func_2925() /* ty=(Tensor[(4, 15, 5), uint8], Tensor[(182), float32]) */;
    %623 = @func_1157() /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), bool]) */;
    %624 = cast(0.58269f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %625 = cast(meta[relay.Constant][25] /* ty=Tensor[(176), float32] */, dtype="float32") /* ty=Tensor[(176), float32] */;
    %626 = reshape(%624, newshape=[]) /* ty=float32 */;
    %627 = reshape(%625, newshape=[8, 2, 11]) /* ty=Tensor[(8, 2, 11), float32] */;
    %628 = %622.0;
    %629 = %623.1;
    %630 = @func_3449(%626, %627) /* ty=Tensor[(8, 2, 11), float32] */;
    (%628, %629, %630, 0.58269f /* ty=float32 */, meta[relay.Constant][25] /* ty=Tensor[(176), float32] */)
  };
  %631() /* ty=(Tensor[(4, 15, 5), uint8], Tensor[(14, 7, 10), bool], Tensor[(8, 2, 11), float32], float32, Tensor[(176), float32]) */
}

def @func_2845() -> (Tensor[(14, 7, 10), uint64], Tensor[(4, 15, 5), uint8]) {
  @func_2843() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(4, 15, 5), uint8]) */
}

def @func_9110() -> (Tensor[(182), float32], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) {
  %636 = fn () -> (Tensor[(182), float32], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) {
    %632 = @func_3434() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(182), float32], Tensor[(5, 14, 3), bool]) */;
    %633 = %632.1;
    %634 = @func_865() /* ty=Tensor[(14, 7, 10), uint64] */;
    %635 = @func_865() /* ty=Tensor[(14, 7, 10), uint64] */;
    (%633, %634, %635)
  };
  %636() /* ty=(Tensor[(182), float32], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) */
}

def @func_11537() -> (Tensor[(182), float64], Tensor[(14, 7, 10), float32], Tensor[(14, 7, 10), uint64], Tensor[(960), int8]) {
  %637 = @func_1281() /* ty=(Tensor[(14, 7, 10), float32],) */;
  %638 = @func_3516() /* ty=(Tensor[(14, 7, 10), bool], Tensor[(14, 7, 10), uint64]) */;
  %639 = @func_1821() /* ty=Tensor[(182), float64] */;
  %640 = cast(%639, dtype="float64") /* ty=Tensor[(182), float64] */;
  %641 = reshape(%640, newshape=[182]) /* ty=Tensor[(182), float64] */;
  %642 = @func_6931(%641) /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(3360), int8], Tensor[(960), int8], Tensor[(182), float32], Tensor[(15, 12, 15), float32]) */;
  %643 = %637.0;
  %644 = %638.1;
  %645 = %642.2;
  (%639, %643, %644, %645)
}

def @func_11585(%var_11583: Tensor[(4, 15, 5), uint8]) -> (Tensor[(4, 15, 5), bool],) {
  @func_11582(%var_11583) /* ty=(Tensor[(4, 15, 5), bool],) */
}

def @func_3480(%var_3478: Tensor[(9, 16, 16), float64]) -> Tensor[(9, 16, 16), uint32] {
  @func_3477(%var_3478) /* ty=Tensor[(9, 16, 16), uint32] */
}

def @func_5088() -> Tensor[(210), bool] {
  %647 = fn () -> Tensor[(210), bool] {
    %646 = @func_4040() /* ty=(Tensor[(210), bool],) */;
    %646.0
  };
  %647() /* ty=Tensor[(210), bool] */
}

def @func_1485() -> Tensor[(14, 7, 10), uint64] {
  @func_1483() /* ty=Tensor[(14, 7, 10), uint64] */
}

def @func_5943() -> (Tensor[(14, 7, 10), uint64], Tensor[(182), float64], Tensor[(14, 7, 10), uint64]) {
  %654 = fn () -> (Tensor[(14, 7, 10), uint64], Tensor[(182), float64], Tensor[(14, 7, 10), uint64]) {
    %648 = @func_5315() /* ty=(Tensor[(182), float32],) */;
    %649 = %648.0;
    %650 = cast(%649, dtype="float64") /* ty=Tensor[(182), float64] */;
    %651 = @func_1483() /* ty=Tensor[(14, 7, 10), uint64] */;
    %652 = log2(%650) /* ty=Tensor[(182), float64] */;
    %653 = @func_5177() /* ty=Tensor[(14, 7, 10), uint64] */;
    (%651, %652, %653)
  };
  %654() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(182), float64], Tensor[(14, 7, 10), uint64]) */
}

def @func_1662() -> (Tensor[(14, 7, 10), uint64],) {
  %655 = @func_1483() /* ty=Tensor[(14, 7, 10), uint64] */;
  (%655,)
}

def @func_2902() -> (Tensor[(14, 7, 10), uint64], Tensor[(182), uint64]) {
  %664 = fn () -> (Tensor[(14, 7, 10), uint64], Tensor[(182), uint64]) {
    %656 = @func_2843() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(4, 15, 5), uint8]) */;
    %657 = @func_1808() /* ty=Tensor[(182), float64] */;
    %658 = cast(meta[relay.Constant][26] /* ty=Tensor[(182), float64] */, dtype="uint64") /* ty=Tensor[(182), uint64] */;
    %659 = shape_of(%657, dtype="int32") /* ty=Tensor[(1), int32] */;
    %660 = cast(%657, dtype="uint64") /* ty=Tensor[(182), uint64] */;
    %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?), uint64] */;
    %662 = %656.0;
    %663 = bitwise_xor(%660, %661) /* ty=Tensor[(182), uint64] */;
    (%662, %663)
  };
  %664() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(182), uint64]) */
}

def @func_7712() -> Tensor[(14, 7, 10), uint64] {
  @func_7710() /* ty=Tensor[(14, 7, 10), uint64] */
}

def @func_11702() -> (Tensor[(14, 7, 10), uint64],) {
  @func_11700() /* ty=(Tensor[(14, 7, 10), uint64],) */
}

def @func_3072(%var_3070: Tensor[(15, 9, 7), uint8], %var_3071: Tensor[(15, 9, 7), uint8]) -> (Tensor[(15, 9, 7), bool], Tensor[(13, 8, 15), float64], Tensor[(182), float32], Tensor[(182), float64]) {
  @func_3068(%var_3070, %var_3071) /* ty=(Tensor[(15, 9, 7), bool], Tensor[(13, 8, 15), float64], Tensor[(182), float32], Tensor[(182), float64]) */
}

def @func_5688(%var_5677: Tensor[(3360), int8]) -> (Tensor[(14, 7, 10), float32], Tensor[(13, 8, 15), float64], Tensor[(3360), int8]) {
  %665 = @func_2609() /* ty=(Tensor[(14, 7, 10), float32],) */;
  %666 = cast(%var_5677, dtype="int8") /* ty=Tensor[(3360), int8] */;
  %667 = reshape(%666, newshape=[3360]) /* ty=Tensor[(3360), int8] */;
  %668 = @func_3213(%667) /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(16, 15, 1), float64], Tensor[(3360), int8], Tensor[(960), int8], Tensor[(13, 8, 15), float64], Tensor[(1, 945), uint8]) */;
  %669 = %665.0;
  %670 = %668.4;
  (%669, %670, %var_5677)
}

def @func_8955(%var_8953: Tensor[(182), float64], %var_8954: Tensor[(3360), int8]) -> (Tensor[(8, 2, 11), float32], Tensor[(8, 2, 11), float32], Tensor[(182), float64], Tensor[(182), float64], Tensor[(540), bool], Tensor[(3360), int8], Tensor[(3360), int8]) {
  @func_8951(%var_8953, %var_8954) /* ty=(Tensor[(8, 2, 11), float32], Tensor[(8, 2, 11), float32], Tensor[(182), float64], Tensor[(182), float64], Tensor[(540), bool], Tensor[(3360), int8], Tensor[(3360), int8]) */
}

def @func_2543(%var_2541: Tensor[(14, 7, 10), uint64]) -> (Tensor[(14, 7, 10), bool], Tensor[(13, 8, 15), float64], Tensor[(1560), float64]) {
  @func_2540(%var_2541) /* ty=(Tensor[(14, 7, 10), bool], Tensor[(13, 8, 15), float64], Tensor[(1560), float64]) */
}

def @func_5230() -> (Tensor[(182), float64], Tensor[(16, 15, 14), int8], Tensor[(3360), int8], Tensor[(480, 2), int8], Tensor[(6, 6, 15), bool], Tensor[(540), bool]) {
  %684 = fn () -> (Tensor[(182), float64], Tensor[(16, 15, 14), int8], Tensor[(3360), int8], Tensor[(480, 2), int8], Tensor[(6, 6, 15), bool], Tensor[(540), bool]) {
    %671 = cast(meta[relay.Constant][27] /* ty=Tensor[(3360), int8] */, dtype="int8") /* ty=Tensor[(3360), int8] */;
    %672 = cast(meta[relay.Constant][28] /* ty=Tensor[(480, 2), int8] */, dtype="int8") /* ty=Tensor[(480, 2), int8] */;
    %673 = reshape(%671, newshape=[16, 15, 14]) /* ty=Tensor[(16, 15, 14), int8] */;
    %674 = reshape(%672, newshape=[16, 15, 4]) /* ty=Tensor[(16, 15, 4), int8] */;
    %675 = @func_2494(%673, %674) /* ty=(Tensor[(16, 15, 14), int8], Tensor[(16, 15, 4), bool], Tensor[(16, 15, 1), float64], Tensor[(14, 7, 10), uint64]) */;
    %676 = @func_1338() /* ty=Tensor[(182), float64] */;
    %677 = cast(%676, dtype="float64") /* ty=Tensor[(182), float64] */;
    %678 = cast(meta[relay.Constant][29] /* ty=Tensor[(540), bool] */, dtype="bool") /* ty=Tensor[(540), bool] */;
    %679 = reshape(%677, newshape=[182]) /* ty=Tensor[(182), float64] */;
    %680 = reshape(%678, newshape=[540]) /* ty=Tensor[(540), bool] */;
    %681 = @func_4890(%679, %680) /* ty=(Tensor[(182), bool], Tensor[(6, 6, 15), bool], Tensor[(540), bool], Tensor[(14, 7, 10), bool], Tensor[(14, 7, 10), bool]) */;
    %682 = %675.0;
    %683 = %681.1;
    (%676, %682, meta[relay.Constant][27] /* ty=Tensor[(3360), int8] */, meta[relay.Constant][28] /* ty=Tensor[(480, 2), int8] */, %683, meta[relay.Constant][29] /* ty=Tensor[(540), bool] */)
  };
  %684() /* ty=(Tensor[(182), float64], Tensor[(16, 15, 14), int8], Tensor[(3360), int8], Tensor[(480, 2), int8], Tensor[(6, 6, 15), bool], Tensor[(540), bool]) */
}

def @func_5965() -> (Tensor[(182), float64], Tensor[(182), float64], Tensor[(14, 7, 10), float64]) {
  @func_5963() /* ty=(Tensor[(182), float64], Tensor[(182), float64], Tensor[(14, 7, 10), float64]) */
}

def @func_7767(%var_7743: Tensor[(12, 13, 15), uint64]) -> (Tensor[(12, 13, 15), bool], Tensor[(14, 7, 10), uint64]) {
  %685 = cast(meta[relay.Constant][30] /* ty=Tensor[(12, 13, 15), uint64] */, dtype="bool") /* ty=Tensor[(12, 13, 15), bool] */;
  %686 = shape_of(%var_7743, dtype="int32") /* ty=Tensor[(3), int32] */;
  %687 = cast(%var_7743, dtype="bool") /* ty=Tensor[(12, 13, 15), bool] */;
  %688 = dyn.reshape(%685, %686, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %689 = @func_938() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %690 = greater(%687, %688) /* ty=Tensor[(12, 13, 15), bool] */;
  %691 = %689.0;
  (%690, %691)
}

def @func_1374() -> (Tensor[(14, 7, 10), uint64],) {
  %692 = @func_1003() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %693 = %692.0;
  (%693,)
}

def @func_2007() -> (Tensor[(14, 7, 10), float32], Tensor[(14, 7, 10), uint64], Tensor[(672), int8], Tensor[(14, 7, 10), uint64], Tensor[(13, 8, 15), float64], Tensor[(1560, 1), float64]) {
  @func_2005() /* ty=(Tensor[(14, 7, 10), float32], Tensor[(14, 7, 10), uint64], Tensor[(672), int8], Tensor[(14, 7, 10), uint64], Tensor[(13, 8, 15), float64], Tensor[(1560, 1), float64]) */
}

def @func_2554() -> Tensor[(182), float32] {
  @func_2552() /* ty=Tensor[(182), float32] */
}

def @func_11149() -> (Tensor[(14, 7, 10), uint64], Tensor[(182), float64]) {
  %694 = @func_1035() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) */;
  %695 = %694.2;
  %696 = @func_7921() /* ty=Tensor[(182), float64] */;
  (%695, %696)
}

def @func_8797() -> Tensor[(14, 7, 10), uint64] {
  %697 = @func_1035() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) */;
  %697.2
}

def @func_1041() -> Tensor[(182), float64] {
  %698 = @func_830() /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), uint64]) */;
  %698.0
}

def @func_1339() -> Tensor[(182), float64] {
  %699 = fn () -> Tensor[(182), float64] {
    @func_1041() /* ty=Tensor[(182), float64] */
  };
  %699() /* ty=Tensor[(182), float64] */
}

def @func_6630(%var_6591: Tensor[(10, 10, 7), float32], %var_6592: Tensor[(10, 10, 7), float32]) -> (Tensor[(10, 10, 7), bool], Tensor[(14, 7, 10), float32], float64) {
  %700 = cast(%var_6592, dtype="float32") /* ty=Tensor[(10, 10, 7), float32] */;
  %701 = shape_of(%var_6591, dtype="int32") /* ty=Tensor[(3), int32] */;
  %702 = cast(%var_6591, dtype="float32") /* ty=Tensor[(10, 10, 7), float32] */;
  %703 = dyn.reshape(%700, %701, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %704 = divide(%702, %703) /* ty=Tensor[(10, 10, 7), float32] */;
  %705 = cast(meta[relay.Constant][31] /* ty=Tensor[(10, 10, 7), float32] */, dtype="bool") /* ty=Tensor[(10, 10, 7), bool] */;
  %706 = shape_of(%704, dtype="int32") /* ty=Tensor[(3), int32] */;
  %707 = cast(%704, dtype="bool") /* ty=Tensor[(10, 10, 7), bool] */;
  %708 = dyn.reshape(%705, %706, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %709 = cast(5.70814f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %710 = reshape(%709, newshape=[]) /* ty=float64 */;
  %711 = @func_4691(%710) /* ty=(Tensor[(14, 7, 10), float32], Tensor[(7, 2, 15), float64], float64, Tensor[(14, 7, 10), float32], Tensor[(143, 14), float32], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) */;
  %712 = less(%707, %708) /* ty=Tensor[(10, 10, 7), bool] */;
  %713 = %711.0;
  (%712, %713, 5.70814f64 /* ty=float64 */)
}

def @func_9848() -> (Tensor[(14, 7, 10), uint64],) {
  %716 = fn () -> (Tensor[(14, 7, 10), uint64],) {
    %714 = @func_1662() /* ty=(Tensor[(14, 7, 10), uint64],) */;
    %715 = %714.0;
    (%715,)
  };
  %716() /* ty=(Tensor[(14, 7, 10), uint64],) */
}

def @func_7839() -> Tensor[(14, 7, 10), float64] {
  @func_7837() /* ty=Tensor[(14, 7, 10), float64] */
}

def @func_865() -> Tensor[(14, 7, 10), uint64] {
  %717 = @func_830() /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), uint64]) */;
  %717.1
}

def @func_8499() -> (Tensor[(11, 6, 8), int32], Tensor[(182), bool], Tensor[(182), float32]) {
  %718 = @func_7071() /* ty=(Tensor[(11, 6, 8), int32], Tensor[(11, 6, 8), float32]) */;
  %719 = cast(meta[relay.Constant][32] /* ty=Tensor[(182), float32] */, dtype="float32") /* ty=Tensor[(182), float32] */;
  %720 = reshape(%719, newshape=[182]) /* ty=Tensor[(182), float32] */;
  %721 = @func_8069(%720) /* ty=(Tensor[(182), bool], Tensor[(182), uint64]) */;
  %722 = %718.0;
  %723 = %721.0;
  (%722, %723, meta[relay.Constant][32] /* ty=Tensor[(182), float32] */)
}

def @func_10993() -> (Tensor[(3360), int8],) {
  %726 = fn () -> (Tensor[(3360), int8],) {
    %724 = @func_6836() /* ty=(Tensor[(182), float64], Tensor[(3360), int8], Tensor[(3360), float64]) */;
    %725 = %724.1;
    (%725,)
  };
  %726() /* ty=(Tensor[(3360), int8],) */
}

def @func_7180() -> (Tensor[(14, 7, 10), uint64],) {
  %729 = fn () -> (Tensor[(14, 7, 10), uint64],) {
    %727 = @func_5856() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) */;
    %728 = %727.1;
    (%728,)
  };
  %729() /* ty=(Tensor[(14, 7, 10), uint64],) */
}

def @func_8501() -> (Tensor[(11, 6, 8), int32], Tensor[(182), bool], Tensor[(182), float32]) {
  @func_8499() /* ty=(Tensor[(11, 6, 8), int32], Tensor[(182), bool], Tensor[(182), float32]) */
}

def @func_4127(%var_4125: Tensor[(11, 13, 14), float32]) -> (Tensor[(?, 13, 14), int64], Tensor[(11, 13, 14), uint64], Tensor[(14, 7, 10), float32], Tensor[(1, 13, 14), float32], Tensor[(14, 7, 10), bool]) {
  @func_4124(%var_4125) /* ty=(Tensor[(?, 13, 14), int64], Tensor[(11, 13, 14), uint64], Tensor[(14, 7, 10), float32], Tensor[(1, 13, 14), float32], Tensor[(14, 7, 10), bool]) */
}

def @func_5858() -> (Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) {
  @func_5856() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) */
}

def @func_5465() -> (Tensor[(15, 12, 15), float32],) {
  @func_5463() /* ty=(Tensor[(15, 12, 15), float32],) */
}

def @func_10915() -> (Tensor[(14, 7, 10), uint64], Tensor[(182), float64]) {
  @func_10913() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(182), float64]) */
}

def @func_9867() -> (Tensor[(14, 7, 10), uint64],) {
  %732 = fn () -> (Tensor[(14, 7, 10), uint64],) {
    %730 = @func_8861() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), bool]) */;
    %731 = %730.1;
    (%731,)
  };
  %732() /* ty=(Tensor[(14, 7, 10), uint64],) */
}

def @func_1416() -> (Tensor[(182), float64], Tensor[(1, 13, 14), float32], Tensor[(14, 7, 10), uint64]) {
  %739 = fn () -> (Tensor[(182), float64], Tensor[(1, 13, 14), float32], Tensor[(14, 7, 10), uint64]) {
    %733 = @func_1338() /* ty=Tensor[(182), float64] */;
    %734 = cast(%733, dtype="float32") /* ty=Tensor[(182), float32] */;
    %735 = reshape(%734, newshape=[1, 13, 14]) /* ty=Tensor[(1, 13, 14), float32] */;
    %736 = @func_938() /* ty=(Tensor[(14, 7, 10), uint64],) */;
    %737 = @func_492(%735) /* ty=Tensor[(1, 13, 14), float32] */;
    %738 = %736.0;
    (%733, %737, %738)
  };
  %739() /* ty=(Tensor[(182), float64], Tensor[(1, 13, 14), float32], Tensor[(14, 7, 10), uint64]) */
}

def @func_10121() -> (Tensor[(4, 15, 5), uint8],) {
  %741 = fn () -> (Tensor[(4, 15, 5), uint8],) {
    %740 = @func_3758() /* ty=Tensor[(4, 15, 5), uint8] */;
    (%740,)
  };
  %741() /* ty=(Tensor[(4, 15, 5), uint8],) */
}

def @func_3568(%var_3553: Tensor[(14, 7, 10), uint64]) -> (Tensor[(14, 7, 10), float32],) {
  %742 = @func_1415() /* ty=(Tensor[(182), float64], Tensor[(1, 13, 14), float32], Tensor[(14, 7, 10), uint64]) */;
  %743 = %742.2;
  %744 = cast(%var_3553, dtype="float32") /* ty=Tensor[(14, 7, 10), float32] */;
  %745 = shape_of(%743, dtype="int32") /* ty=Tensor[(3), int32] */;
  %746 = cast(%743, dtype="float32") /* ty=Tensor[(14, 7, 10), float32] */;
  %747 = dyn.reshape(%744, %745, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %748 = power(%746, %747) /* ty=Tensor[(14, 7, 10), float32] */;
  (%748,)
}

def @func_4834(%var_4832: float32, %var_4833: Tensor[(11, 6, 4), float32]) -> Tensor[(11, 6, 4), float32] {
  @func_4830(%var_4832, %var_4833) /* ty=Tensor[(11, 6, 4), float32] */
}

def @func_495(%var_493: Tensor[(1, 13, 14), float32]) -> Tensor[(1, 13, 14), float32] {
  @func_492(%var_493) /* ty=Tensor[(1, 13, 14), float32] */
}

def @func_5587() -> (Tensor[(14, 7, 10), uint64],) {
  %749 = @func_2901() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(182), uint64]) */;
  %750 = %749.0;
  (%750,)
}

def @func_5589() -> (Tensor[(14, 7, 10), uint64],) {
  @func_5587() /* ty=(Tensor[(14, 7, 10), uint64],) */
}

def @func_5266() -> (Tensor[(16, 15, 14), float64],) {
  %755 = fn () -> (Tensor[(16, 15, 14), float64],) {
    %751 = @func_5229() /* ty=(Tensor[(182), float64], Tensor[(16, 15, 14), int8], Tensor[(3360), int8], Tensor[(480, 2), int8], Tensor[(6, 6, 15), bool], Tensor[(540), bool]) */;
    %752 = %751.1;
    %753 = cast(%752, dtype="float64") /* ty=Tensor[(16, 15, 14), float64] */;
    %754 = acosh(%753) /* ty=Tensor[(16, 15, 14), float64] */;
    (%754,)
  };
  %755() /* ty=(Tensor[(16, 15, 14), float64],) */
}

def @func_3571(%var_3569: Tensor[(14, 7, 10), uint64]) -> (Tensor[(14, 7, 10), float32],) {
  @func_3568(%var_3569) /* ty=(Tensor[(14, 7, 10), float32],) */
}

def @func_8234(%var_8233: Tensor[(11, 6, 8), float32]) -> Tensor[(11, 6, 8), float32] {
  %762 = fn (%var_8205: Tensor[(11, 6, 8), float32]) -> Tensor[(11, 6, 8), float32] {
    %756 = @func_7071() /* ty=(Tensor[(11, 6, 8), int32], Tensor[(11, 6, 8), float32]) */;
    %757 = %756.1;
    %758 = cast(%var_8205, dtype="float32") /* ty=Tensor[(11, 6, 8), float32] */;
    %759 = shape_of(%757, dtype="int32") /* ty=Tensor[(3), int32] */;
    %760 = cast(%757, dtype="float32") /* ty=Tensor[(11, 6, 8), float32] */;
    %761 = dyn.reshape(%758, %759, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    power(%760, %761) /* ty=Tensor[(11, 6, 8), float32] */
  };
  %762(%var_8233) /* ty=Tensor[(11, 6, 8), float32] */
}

def @func_11289(%var_11287: Tensor[(1, 7, 9), uint16], %var_11288: Tensor[(8, 7, 9), uint16]) -> (Tensor[(8, 7, 9), bool],) {
  %766 = fn (%var_11274: Tensor[(1, 7, 9), uint16], %var_11275: Tensor[(8, 7, 9), uint16]) -> (Tensor[(8, 7, 9), bool],) {
    %763 = cast(%var_11274, dtype="bool") /* ty=Tensor[(1, 7, 9), bool] */;
    %764 = cast(%var_11275, dtype="bool") /* ty=Tensor[(8, 7, 9), bool] */;
    %765 = equal(%763, %764) /* ty=Tensor[(8, 7, 9), bool] */;
    (%765,)
  };
  %766(%var_11287, %var_11288) /* ty=(Tensor[(8, 7, 9), bool],) */
}

def @func_8863() -> (Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), bool]) {
  @func_8861() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), bool]) */
}

def @func_10242() -> (Tensor[(14, 7, 10), uint64],) {
  %769 = fn () -> (Tensor[(14, 7, 10), uint64],) {
    %767 = @func_7179() /* ty=(Tensor[(14, 7, 10), uint64],) */;
    %768 = %767.0;
    (%768,)
  };
  %769() /* ty=(Tensor[(14, 7, 10), uint64],) */
}

def @func_9143() -> Tensor[(182), float32] {
  @func_9141() /* ty=Tensor[(182), float32] */
}

def @func_3452(%var_3450: float32, %var_3451: Tensor[(8, 2, 11), float32]) -> Tensor[(8, 2, 11), float32] {
  %772 = fn (%var_3437: float32, %var_3438: Tensor[(8, 2, 11), float32]) -> Tensor[(8, 2, 11), float32] {
    %770 = cast(%var_3437, dtype="float32") /* ty=float32 */;
    %771 = cast(%var_3438, dtype="float32") /* ty=Tensor[(8, 2, 11), float32] */;
    divide(%770, %771) /* ty=Tensor[(8, 2, 11), float32] */
  };
  %772(%var_3450, %var_3451) /* ty=Tensor[(8, 2, 11), float32] */
}

def @func_9494(%var_9486: Tensor[(12, 2, 4), float64]) -> Tensor[(12, 2, 4), float64] {
  %773 = cast(%var_9486, dtype="float64") /* ty=Tensor[(12, 2, 4), float64] */;
  cos(%773) /* ty=Tensor[(12, 2, 4), float64] */
}

def @func_4493() -> (Tensor[(8, 2, 11), bool],) {
  %776 = fn () -> (Tensor[(8, 2, 11), bool],) {
    %774 = @func_4466() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(176), float32], Tensor[(8, 2, 11), bool]) */;
    %775 = %774.2;
    (%775,)
  };
  %776() /* ty=(Tensor[(8, 2, 11), bool],) */
}

def @func_6971() -> (Tensor[(182), float64],) {
  %778 = fn () -> (Tensor[(182), float64],) {
    %777 = @func_1041() /* ty=Tensor[(182), float64] */;
    (%777,)
  };
  %778() /* ty=(Tensor[(182), float64],) */
}

def @func_939() -> (Tensor[(14, 7, 10), uint64],) {
  %781 = fn () -> (Tensor[(14, 7, 10), uint64],) {
    %779 = @func_830() /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), uint64]) */;
    %780 = %779.1;
    (%780,)
  };
  %781() /* ty=(Tensor[(14, 7, 10), uint64],) */
}

def @func_2609() -> (Tensor[(14, 7, 10), float32],) {
  %782 = @func_1281() /* ty=(Tensor[(14, 7, 10), float32],) */;
  %783 = %782.0;
  %784 = cast(%783, dtype="float32") /* ty=Tensor[(14, 7, 10), float32] */;
  %785 = log10(%784) /* ty=Tensor[(14, 7, 10), float32] */;
  (%785,)
}

def @func_8799() -> Tensor[(14, 7, 10), uint64] {
  @func_8797() /* ty=Tensor[(14, 7, 10), uint64] */
}

def @func_10745(%var_10744: Tensor[(176), float32]) -> (Tensor[(182), float32], Tensor[(1, 13, 14), float32], Tensor[(176, 1), float32], Tensor[(176), float32]) {
  %795 = fn (%var_10741: Tensor[(176), float32]) -> (Tensor[(182), float32], Tensor[(1, 13, 14), float32], Tensor[(176, 1), float32], Tensor[(176), float32]) {
    %786 = @func_2155() /* ty=(Tensor[(182), float32],) */;
    %787 = %786.0;
    %788 = cast(%787, dtype="float32") /* ty=Tensor[(182), float32] */;
    %789 = reshape(%788, newshape=[1, 13, 14]) /* ty=Tensor[(1, 13, 14), float32] */;
    %790 = cast(%var_10741, dtype="float32") /* ty=Tensor[(176), float32] */;
    %791 = reshape(%790, newshape=[176, 1]) /* ty=Tensor[(176, 1), float32] */;
    %792 = @func_7135(%791) /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(8, 2, 11), float32], Tensor[(176, 1), float32]) */;
    %793 = @func_492(%789) /* ty=Tensor[(1, 13, 14), float32] */;
    %794 = %792.4;
    (%787, %793, %794, %var_10741)
  };
  %795(%var_10744) /* ty=(Tensor[(182), float32], Tensor[(1, 13, 14), float32], Tensor[(176, 1), float32], Tensor[(176), float32]) */
}

def @func_11151() -> (Tensor[(14, 7, 10), uint64], Tensor[(182), float64]) {
  @func_11149() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(182), float64]) */
}

def @func_7030(%var_7029: Tensor[(14, 7, 10), uint64]) -> Tensor[(14, 7, 10), uint8] {
  %802 = fn (%var_7021: Tensor[(14, 7, 10), uint64]) -> Tensor[(14, 7, 10), uint8] {
    %796 = @func_6860() /* ty=(Tensor[(14, 7, 10), uint64],) */;
    %797 = %796.0;
    %798 = cast(%var_7021, dtype="uint8") /* ty=Tensor[(14, 7, 10), uint8] */;
    %799 = shape_of(%797, dtype="int32") /* ty=Tensor[(3), int32] */;
    %800 = cast(%797, dtype="uint8") /* ty=Tensor[(14, 7, 10), uint8] */;
    %801 = dyn.reshape(%798, %799, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    subtract(%800, %801) /* ty=Tensor[(14, 7, 10), uint8] */
  };
  %802(%var_7029) /* ty=Tensor[(14, 7, 10), uint8] */
}

def @func_4209() -> Tensor[(182), float32] {
  @func_2362() /* ty=Tensor[(182), float32] */
}

def @func_2005() -> (Tensor[(14, 7, 10), float32], Tensor[(14, 7, 10), uint64], Tensor[(672), int8], Tensor[(14, 7, 10), uint64], Tensor[(13, 8, 15), float64], Tensor[(1560, 1), float64]) {
  %803 = @func_1281() /* ty=(Tensor[(14, 7, 10), float32],) */;
  %804 = cast(meta[relay.Constant][33] /* ty=Tensor[(672), int8] */, dtype="int8") /* ty=Tensor[(672), int8] */;
  %805 = cast(meta[relay.Constant][33] /* ty=Tensor[(672), int8] */, dtype="int8") /* ty=Tensor[(672), int8] */;
  %806 = reshape(%804, newshape=[12, 14, 4]) /* ty=Tensor[(12, 14, 4), int8] */;
  %807 = reshape(%805, newshape=[12, 14, 4]) /* ty=Tensor[(12, 14, 4), int8] */;
  %808 = @func_1355(%806, %807) /* ty=(Tensor[(12, 14, 4), bool], Tensor[(14, 7, 10), uint64]) */;
  %809 = @func_1374() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %810 = cast(meta[relay.Constant][34] /* ty=Tensor[(1560, 1), float64] */, dtype="float64") /* ty=Tensor[(1560, 1), float64] */;
  %811 = reshape(%810, newshape=[13, 8, 15]) /* ty=Tensor[(13, 8, 15), float64] */;
  %812 = %803.0;
  %813 = %808.1;
  %814 = %809.0;
  %815 = @func_177(%811) /* ty=Tensor[(13, 8, 15), float64] */;
  (%812, %813, meta[relay.Constant][33] /* ty=Tensor[(672), int8] */, %814, %815, meta[relay.Constant][34] /* ty=Tensor[(1560, 1), float64] */)
}

def @func_3436() -> (Tensor[(14, 7, 10), uint64], Tensor[(182), float32], Tensor[(5, 14, 3), bool]) {
  @func_3434() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(182), float32], Tensor[(5, 14, 3), bool]) */
}

def @func_3195() -> (Tensor[(182), float64], Tensor[(14, 7, 10), uint64]) {
  @func_3193() /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), uint64]) */
}

def @func_7531() -> Tensor[(14, 7, 10), uint64] {
  @func_7529() /* ty=Tensor[(14, 7, 10), uint64] */
}

def @func_7922() -> Tensor[(182), float64] {
  %817 = fn () -> Tensor[(182), float64] {
    %816 = @func_3193() /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), uint64]) */;
    %816.0
  };
  %817() /* ty=Tensor[(182), float64] */
}

def @func_492(%var_476: Tensor[(1, 13, 14), float32]) -> Tensor[(1, 13, 14), float32] {
  %818 = cast(%var_476, dtype="float32") /* ty=Tensor[(1, 13, 14), float32] */;
  log2(%818) /* ty=Tensor[(1, 13, 14), float32] */
}

def @func_10507(%var_10442: Tensor[(2640), uint64]) -> (Tensor[(14, 7, 10), uint64], Tensor[(182), float64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), float32], Tensor[(15, 16, 11), uint64], uint64, Tensor[(2640), uint64], Tensor[(12, 2, 4), float64], Tensor[(96), float64], Tensor[(1, 13, 14), float32]) {
  %819 = @func_5008() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %820 = @func_6970() /* ty=(Tensor[(182), float64],) */;
  %821 = @func_9866() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %822 = @func_1003() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %823 = @func_2850() /* ty=Tensor[(14, 7, 10), uint64] */;
  %824 = cast(%823, dtype="float32") /* ty=Tensor[(14, 7, 10), float32] */;
  %825 = cast(meta[relay.Constant][35] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %826 = cast(%var_10442, dtype="uint64") /* ty=Tensor[(2640), uint64] */;
  %827 = reshape(%825, newshape=[]) /* ty=uint64 */;
  %828 = reshape(%826, newshape=[15, 16, 11]) /* ty=Tensor[(15, 16, 11), uint64] */;
  %829 = cast(meta[relay.Constant][36] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
  %830 = reshape(%829, newshape=[12, 2, 4]) /* ty=Tensor[(12, 2, 4), float64] */;
  %831 = %820.0;
  %832 = cast(%831, dtype="float32") /* ty=Tensor[(182), float32] */;
  %833 = reshape(%832, newshape=[1, 13, 14]) /* ty=Tensor[(1, 13, 14), float32] */;
  %834 = %819.0;
  %835 = %821.0;
  %836 = %822.0;
  %837 = sinh(%824) /* ty=Tensor[(14, 7, 10), float32] */;
  %838 = @func_9652(%827, %828) /* ty=Tensor[(15, 16, 11), uint64] */;
  %839 = @func_9494(%830) /* ty=Tensor[(12, 2, 4), float64] */;
  %840 = @func_492(%833) /* ty=Tensor[(1, 13, 14), float32] */;
  (%834, %831, %835, %836, %837, %838, meta[relay.Constant][35] /* ty=uint64 */, %var_10442, %839, meta[relay.Constant][36] /* ty=Tensor[(96), float64] */, %840)
}

def @func_4691(%var_4632: float64) -> (Tensor[(14, 7, 10), float32], Tensor[(7, 2, 15), float64], float64, Tensor[(14, 7, 10), float32], Tensor[(143, 14), float32], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) {
  %841 = @func_2609() /* ty=(Tensor[(14, 7, 10), float32],) */;
  %842 = cast(%var_4632, dtype="float64") /* ty=float64 */;
  %843 = reshape(%842, newshape=[]) /* ty=float64 */;
  %844 = @func_4199(%843) /* ty=(Tensor[(7, 2, 15), float64], Tensor[(980), uint64], Tensor[(14, 7, 10), uint16]) */;
  %845 = cast(meta[relay.Constant][37] /* ty=Tensor[(143, 14), float32] */, dtype="float32") /* ty=Tensor[(143, 14), float32] */;
  %846 = reshape(%845, newshape=[11, 13, 14]) /* ty=Tensor[(11, 13, 14), float32] */;
  %847 = @func_4124(%846) /* ty=(Tensor[(?, 13, 14), int64], Tensor[(11, 13, 14), uint64], Tensor[(14, 7, 10), float32], Tensor[(1, 13, 14), float32], Tensor[(14, 7, 10), bool]) */;
  %848 = @func_1035() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) */;
  %849 = @func_2642() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %850 = %841.0;
  %851 = %844.0;
  %852 = %847.2;
  %853 = @func_1483() /* ty=Tensor[(14, 7, 10), uint64] */;
  %854 = %848.2;
  %855 = %849.0;
  (%850, %851, %var_4632, %852, meta[relay.Constant][37] /* ty=Tensor[(143, 14), float32] */, %853, %854, %855)
}

def @func_10611(%var_10581: Tensor[(540), bool]) -> (Tensor[(14, 7, 10), uint64], Tensor[(672), int8], Tensor[(14, 7, 10), float64], Tensor[(14, 7, 10), uint64], Tensor[(176), float32], Tensor[(3360), int8], Tensor[(540), bool]) {
  %856 = @func_2115() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(672), int8]) */;
  %857 = cast(meta[relay.Constant][38] /* ty=Tensor[(176), float32] */, dtype="float32") /* ty=Tensor[(176), float32] */;
  %858 = cast(meta[relay.Constant][39] /* ty=Tensor[(3360), int8] */, dtype="int8") /* ty=Tensor[(3360), int8] */;
  %859 = cast(%var_10581, dtype="bool") /* ty=Tensor[(540), bool] */;
  %860 = reshape(%857, newshape=[176]) /* ty=Tensor[(176), float32] */;
  %861 = reshape(%858, newshape=[3360]) /* ty=Tensor[(3360), int8] */;
  %862 = reshape(%859, newshape=[9, 60]) /* ty=Tensor[(9, 60), bool] */;
  %863 = @func_9403(%860, %861, %862) /* ty=(Tensor[(14, 7, 10), float32], Tensor[(14, 7, 10), uint64], Tensor[(3360), int16], Tensor[(14, 7, 10), uint64], Tensor[(176), float32], Tensor[(3360), float32], Tensor[(4, 15, 5), uint8], Tensor[(540), bool], Tensor[(182), float64], Tensor[(9, 60), bool]) */;
  %864 = @func_5177() /* ty=Tensor[(14, 7, 10), uint64] */;
  %865 = %856.1;
  %866 = @func_7837() /* ty=Tensor[(14, 7, 10), float64] */;
  %867 = %863.3;
  (%864, %865, %866, %867, meta[relay.Constant][38] /* ty=Tensor[(176), float32] */, meta[relay.Constant][39] /* ty=Tensor[(3360), int8] */, %var_10581)
}

def @func_3477(%var_3473: Tensor[(9, 16, 16), float64]) -> Tensor[(9, 16, 16), uint32] {
  %868 = cast(meta[relay.Constant][40] /* ty=Tensor[(9, 16, 16), float64] */, dtype="float64") /* ty=Tensor[(9, 16, 16), float64] */;
  %869 = sigmoid(%868) /* ty=Tensor[(9, 16, 16), float64] */;
  %870 = cast(%var_3473, dtype="uint32") /* ty=Tensor[(9, 16, 16), uint32] */;
  %871 = shape_of(%869, dtype="int32") /* ty=Tensor[(3), int32] */;
  %872 = cast(%869, dtype="uint32") /* ty=Tensor[(9, 16, 16), uint32] */;
  %873 = dyn.reshape(%870, %871, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  right_shift(%872, %873) /* ty=Tensor[(9, 16, 16), uint32] */
}

def @func_8126() -> (Tensor[(182), float64],) {
  %875 = fn () -> (Tensor[(182), float64],) {
    %874 = @func_1338() /* ty=Tensor[(182), float64] */;
    (%874,)
  };
  %875() /* ty=(Tensor[(182), float64],) */
}

def @func_8578() -> (Tensor[(14, 7, 10), uint64],) {
  @func_8576() /* ty=(Tensor[(14, 7, 10), uint64],) */
}

def @func_8015(%var_7982: Tensor[(15, 63), uint8]) -> (Tensor[(14, 7, 10), float32], Tensor[(14, 7, 10), float64], Tensor[(15, 63), uint8], Tensor[(182), float32]) {
  %876 = @func_6456() /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), float32]) */;
  %877 = cast(%var_7982, dtype="uint8") /* ty=Tensor[(15, 63), uint8] */;
  %878 = reshape(%877, newshape=[945]) /* ty=Tensor[(945), uint8] */;
  %879 = @func_3651(%878) /* ty=(Tensor[(14, 7, 10), float64], Tensor[(13, 8, 15), float64], Tensor[(945), uint8]) */;
  %880 = %876.1;
  %881 = %879.0;
  %882 = @func_2362() /* ty=Tensor[(182), float32] */;
  (%880, %881, %var_7982, %882)
}

def @func_10205() -> (Tensor[(182), float64],) {
  %884 = fn () -> (Tensor[(182), float64],) {
    %883 = @func_1808() /* ty=Tensor[(182), float64] */;
    (%883,)
  };
  %884() /* ty=(Tensor[(182), float64],) */
}

def @func_11744() -> (Tensor[(182), float64],) {
  @func_11742() /* ty=(Tensor[(182), float64],) */
}

def @func_4830(%var_4807: float32, %var_4808: Tensor[(11, 6, 4), float32]) -> Tensor[(11, 6, 4), float32] {
  %885 = cast(%var_4807, dtype="bool") /* ty=bool */;
  %886 = cast(%var_4808, dtype="bool") /* ty=Tensor[(11, 6, 4), bool] */;
  %887 = greater_equal(%885, %886) /* ty=Tensor[(11, 6, 4), bool] */;
  %888 = cast(%887, dtype="float32") /* ty=Tensor[(11, 6, 4), float32] */;
  exp(%888) /* ty=Tensor[(11, 6, 4), float32] */
}

def @func_4694(%var_4692: float64) -> (Tensor[(14, 7, 10), float32], Tensor[(7, 2, 15), float64], float64, Tensor[(14, 7, 10), float32], Tensor[(143, 14), float32], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) {
  @func_4691(%var_4692) /* ty=(Tensor[(14, 7, 10), float32], Tensor[(7, 2, 15), float64], float64, Tensor[(14, 7, 10), float32], Tensor[(143, 14), float32], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) */
}

def @func_10846() -> (Tensor[(182), float32], Tensor[(1560, 1), float32]) {
  %894 = fn () -> (Tensor[(182), float32], Tensor[(1560, 1), float32]) {
    %889 = @func_2005() /* ty=(Tensor[(14, 7, 10), float32], Tensor[(14, 7, 10), uint64], Tensor[(672), int8], Tensor[(14, 7, 10), uint64], Tensor[(13, 8, 15), float64], Tensor[(1560, 1), float64]) */;
    %890 = %889.5;
    %891 = cast(%890, dtype="float32") /* ty=Tensor[(1560, 1), float32] */;
    %892 = @func_5803() /* ty=Tensor[(182), float32] */;
    %893 = rsqrt(%891) /* ty=Tensor[(1560, 1), float32] */;
    (%892, %893)
  };
  %894() /* ty=(Tensor[(182), float32], Tensor[(1560, 1), float32]) */
}

def @func_2562() -> (Tensor[(182), float64], Tensor[(14, 7, 10), uint64]) {
  @func_2560() /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), uint64]) */
}

def @func_7710() -> Tensor[(14, 7, 10), uint64] {
  %895 = @func_6860() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %895.0
}

def @func_11829() -> (Tensor[(14, 7, 10), bool],) {
  %898 = fn () -> (Tensor[(14, 7, 10), bool],) {
    %896 = @func_8274() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(1560, 1), float64], Tensor[(14, 7, 10), bool]) */;
    %897 = %896.2;
    (%897,)
  };
  %898() /* ty=(Tensor[(14, 7, 10), bool],) */
}

def @func_2311(%var_2302: Tensor[(182), float64]) -> Tensor[(182), float64] {
  %899 = @func_1415() /* ty=(Tensor[(182), float64], Tensor[(1, 13, 14), float32], Tensor[(14, 7, 10), uint64]) */;
  %900 = %899.0;
  %901 = cast(%var_2302, dtype="float64") /* ty=Tensor[(182), float64] */;
  %902 = shape_of(%900, dtype="int32") /* ty=Tensor[(1), int32] */;
  %903 = cast(%900, dtype="float64") /* ty=Tensor[(182), float64] */;
  %904 = dyn.reshape(%901, %902, newshape=[]) /* ty=Tensor[(?), float64] */;
  floor_mod(%903, %904) /* ty=Tensor[(182), float64] */
}

def @func_2401() -> (Tensor[(14, 7, 10), float32], Tensor[(182), float32]) {
  @func_2399() /* ty=(Tensor[(14, 7, 10), float32], Tensor[(182), float32]) */
}

def @func_2956() -> (Tensor[(182), float64],) {
  @func_2954() /* ty=(Tensor[(182), float64],) */
}

def @func_4538() -> (Tensor[(14, 7, 10), uint64],) {
  %907 = fn () -> (Tensor[(14, 7, 10), uint64],) {
    %905 = @func_938() /* ty=(Tensor[(14, 7, 10), uint64],) */;
    %906 = %905.0;
    (%906,)
  };
  %907() /* ty=(Tensor[(14, 7, 10), uint64],) */
}

def @func_8725() -> (Tensor[(14, 7, 10), uint64], Tensor[(182), float32]) {
  %908 = @func_1374() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %909 = %908.0;
  %910 = @func_4209() /* ty=Tensor[(182), float32] */;
  (%909, %910)
}

def @func_5030(%var_5029: Tensor[(7, 15, 12), uint64]) -> Tensor[(7, 15, 12), bool] {
  %915 = fn (%var_5014: Tensor[(7, 15, 12), uint64]) -> Tensor[(7, 15, 12), bool] {
    %911 = cast(%var_5014, dtype="bool") /* ty=Tensor[(7, 15, 12), bool] */;
    %912 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(7, 15, 12), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %913 = cast(meta[relay.Constant][41] /* ty=Tensor[(7, 15, 12), uint64] */, dtype="bool") /* ty=Tensor[(7, 15, 12), bool] */;
    %914 = dyn.reshape(%911, %912, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    equal(%913, %914) /* ty=Tensor[(7, 15, 12), bool] */
  };
  %915(%var_5029) /* ty=Tensor[(7, 15, 12), bool] */
}

def @func_10707() -> (Tensor[(14, 7, 10), float32], Tensor[(14, 7, 10), uint64], Tensor[(4, 15, 5), uint8], Tensor[(14, 7, 10), uint64]) {
  @func_10705() /* ty=(Tensor[(14, 7, 10), float32], Tensor[(14, 7, 10), uint64], Tensor[(4, 15, 5), uint8], Tensor[(14, 7, 10), uint64]) */
}

def @func_2540(%var_2521: Tensor[(14, 7, 10), uint64]) -> (Tensor[(14, 7, 10), bool], Tensor[(13, 8, 15), float64], Tensor[(1560), float64]) {
  %916 = @func_1321() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %917 = %916.0;
  %918 = cast(%var_2521, dtype="bool") /* ty=Tensor[(14, 7, 10), bool] */;
  %919 = shape_of(%917, dtype="int32") /* ty=Tensor[(3), int32] */;
  %920 = cast(%917, dtype="bool") /* ty=Tensor[(14, 7, 10), bool] */;
  %921 = dyn.reshape(%918, %919, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %922 = cast(meta[relay.Constant][42] /* ty=Tensor[(1560), float64] */, dtype="float64") /* ty=Tensor[(1560), float64] */;
  %923 = reshape(%922, newshape=[13, 8, 15]) /* ty=Tensor[(13, 8, 15), float64] */;
  %924 = less(%920, %921) /* ty=Tensor[(14, 7, 10), bool] */;
  %925 = @func_177(%923) /* ty=Tensor[(13, 8, 15), float64] */;
  (%924, %925, meta[relay.Constant][42] /* ty=Tensor[(1560), float64] */)
}

def @func_6931(%var_6892: Tensor[(182), float64]) -> (Tensor[(14, 7, 10), uint64], Tensor[(3360), int8], Tensor[(960), int8], Tensor[(182), float32], Tensor[(15, 12, 15), float32]) {
  %926 = cast(meta[relay.Constant][43] /* ty=Tensor[(3360), int8] */, dtype="int8") /* ty=Tensor[(3360), int8] */;
  %927 = cast(meta[relay.Constant][44] /* ty=Tensor[(960), int8] */, dtype="int8") /* ty=Tensor[(960), int8] */;
  %928 = reshape(%926, newshape=[16, 15, 14]) /* ty=Tensor[(16, 15, 14), int8] */;
  %929 = reshape(%927, newshape=[16, 15, 4]) /* ty=Tensor[(16, 15, 4), int8] */;
  %930 = @func_2494(%928, %929) /* ty=(Tensor[(16, 15, 14), int8], Tensor[(16, 15, 4), bool], Tensor[(16, 15, 1), float64], Tensor[(14, 7, 10), uint64]) */;
  %931 = @func_5229() /* ty=(Tensor[(182), float64], Tensor[(16, 15, 14), int8], Tensor[(3360), int8], Tensor[(480, 2), int8], Tensor[(6, 6, 15), bool], Tensor[(540), bool]) */;
  %932 = %931.0;
  %933 = cast(%var_6892, dtype="bool") /* ty=Tensor[(182), bool] */;
  %934 = shape_of(%932, dtype="int32") /* ty=Tensor[(1), int32] */;
  %935 = cast(%932, dtype="bool") /* ty=Tensor[(182), bool] */;
  %936 = dyn.reshape(%933, %934, newshape=[]) /* ty=Tensor[(?), bool] */;
  %937 = not_equal(%935, %936) /* ty=Tensor[(182), bool] */;
  %938 = cast(%937, dtype="float32") /* ty=Tensor[(182), float32] */;
  %939 = @func_5463() /* ty=(Tensor[(15, 12, 15), float32],) */;
  %940 = %930.3;
  %941 = asin(%938) /* ty=Tensor[(182), float32] */;
  %942 = %939.0;
  (%940, meta[relay.Constant][43] /* ty=Tensor[(3360), int8] */, meta[relay.Constant][44] /* ty=Tensor[(960), int8] */, %941, %942)
}

def @func_4953(%var_4951: Tensor[(182), float64]) -> (Tensor[(182), bool], Tensor[(14, 7, 10), uint64]) {
  @func_4950(%var_4951) /* ty=(Tensor[(182), bool], Tensor[(14, 7, 10), uint64]) */
}

def @func_8018(%var_8016: Tensor[(15, 63), uint8]) -> (Tensor[(14, 7, 10), float32], Tensor[(14, 7, 10), float64], Tensor[(15, 63), uint8], Tensor[(182), float32]) {
  @func_8015(%var_8016) /* ty=(Tensor[(14, 7, 10), float32], Tensor[(14, 7, 10), float64], Tensor[(15, 63), uint8], Tensor[(182), float32]) */
}

def @func_11582(%var_11567: Tensor[(4, 15, 5), uint8]) -> (Tensor[(4, 15, 5), bool],) {
  %943 = @func_10120() /* ty=(Tensor[(4, 15, 5), uint8],) */;
  %944 = %943.0;
  %945 = cast(%var_11567, dtype="bool") /* ty=Tensor[(4, 15, 5), bool] */;
  %946 = shape_of(%944, dtype="int32") /* ty=Tensor[(3), int32] */;
  %947 = cast(%944, dtype="bool") /* ty=Tensor[(4, 15, 5), bool] */;
  %948 = dyn.reshape(%945, %946, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %949 = less_equal(%947, %948) /* ty=Tensor[(4, 15, 5), bool] */;
  (%949,)
}

def @func_4467() -> (Tensor[(14, 7, 10), uint64], Tensor[(176), float32], Tensor[(8, 2, 11), bool]) {
  %967 = fn () -> (Tensor[(14, 7, 10), uint64], Tensor[(176), float32], Tensor[(8, 2, 11), bool]) {
    %950 = @func_1662() /* ty=(Tensor[(14, 7, 10), uint64],) */;
    %951 = cast(-8.0541f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %952 = cast(meta[relay.Constant][45] /* ty=Tensor[(176), float32] */, dtype="float32") /* ty=Tensor[(176), float32] */;
    %953 = reshape(%951, newshape=[]) /* ty=float32 */;
    %954 = reshape(%952, newshape=[8, 2, 11]) /* ty=Tensor[(8, 2, 11), float32] */;
    %955 = @func_3449(%953, %954) /* ty=Tensor[(8, 2, 11), float32] */;
    %956 = cast(%955, dtype="float32") /* ty=Tensor[(8, 2, 11), float32] */;
    %957 = atanh(%956) /* ty=Tensor[(8, 2, 11), float32] */;
    %958 = cast(%955, dtype="bool") /* ty=Tensor[(8, 2, 11), bool] */;
    %959 = cast(-8.0541f /* ty=float32 */, dtype="bool") /* ty=bool */;
    %960 = equal(%958, %959) /* ty=Tensor[(8, 2, 11), bool] */;
    %961 = cast(%960, dtype="bool") /* ty=Tensor[(8, 2, 11), bool] */;
    %962 = shape_of(%957, dtype="int32") /* ty=Tensor[(3), int32] */;
    %963 = cast(%957, dtype="bool") /* ty=Tensor[(8, 2, 11), bool] */;
    %964 = dyn.reshape(%961, %962, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %965 = %950.0;
    %966 = logical_or(%963, %964) /* ty=Tensor[(8, 2, 11), bool] */;
    (%965, meta[relay.Constant][45] /* ty=Tensor[(176), float32] */, %966)
  };
  %967() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(176), float32], Tensor[(8, 2, 11), bool]) */
}

def @func_8576() -> (Tensor[(14, 7, 10), uint64],) {
  %968 = @func_5856() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) */;
  %969 = %968.1;
  (%969,)
}

def @func_5463() -> (Tensor[(15, 12, 15), float32],) {
  %970 = cast(meta[relay.Constant][47] /* ty=Tensor[(15, 12, 15), float32] */, dtype="float32") /* ty=Tensor[(15, 12, 15), float32] */;
  %971 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(15, 12, 15), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %972 = cast(meta[relay.Constant][46] /* ty=Tensor[(15, 12, 15), float32] */, dtype="float32") /* ty=Tensor[(15, 12, 15), float32] */;
  %973 = dyn.reshape(%970, %971, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %974 = floor_mod(%972, %973) /* ty=Tensor[(15, 12, 15), float32] */;
  (%974,)
}

def @func_3984() -> (Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) {
  %978 = fn () -> (Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) {
    %975 = @func_1321() /* ty=(Tensor[(14, 7, 10), uint64],) */;
    %976 = %975.0;
    %977 = @func_1483() /* ty=Tensor[(14, 7, 10), uint64] */;
    (%976, %977)
  };
  %978() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) */
}

def @func_8951(%var_8910: Tensor[(182), float64], %var_8938: Tensor[(3360), int8]) -> (Tensor[(8, 2, 11), float32], Tensor[(8, 2, 11), float32], Tensor[(182), float64], Tensor[(182), float64], Tensor[(540), bool], Tensor[(3360), int8], Tensor[(3360), int8]) {
  %979 = @func_6245() /* ty=(Tensor[(4, 15, 5), uint8], Tensor[(14, 7, 10), bool], Tensor[(8, 2, 11), float32], float32, Tensor[(176), float32]) */;
  %980 = @func_6245() /* ty=(Tensor[(4, 15, 5), uint8], Tensor[(14, 7, 10), bool], Tensor[(8, 2, 11), float32], float32, Tensor[(176), float32]) */;
  %981 = cast(%var_8910, dtype="float64") /* ty=Tensor[(182), float64] */;
  %982 = reshape(%981, newshape=[182]) /* ty=Tensor[(182), float64] */;
  %983 = @func_5229() /* ty=(Tensor[(182), float64], Tensor[(16, 15, 14), int8], Tensor[(3360), int8], Tensor[(480, 2), int8], Tensor[(6, 6, 15), bool], Tensor[(540), bool]) */;
  %984 = cast(%var_8938, dtype="int8") /* ty=Tensor[(3360), int8] */;
  %985 = reshape(%984, newshape=[3360]) /* ty=Tensor[(3360), int8] */;
  %986 = @func_5688(%985) /* ty=(Tensor[(14, 7, 10), float32], Tensor[(13, 8, 15), float64], Tensor[(3360), int8]) */;
  %987 = %979.2;
  %988 = %980.2;
  %989 = @func_2311(%982) /* ty=Tensor[(182), float64] */;
  %990 = %983.5;
  %991 = %986.2;
  (%987, %988, %989, %var_8910, %990, %991, %var_8938)
}

def @func_10614(%var_10612: Tensor[(540), bool]) -> (Tensor[(14, 7, 10), uint64], Tensor[(672), int8], Tensor[(14, 7, 10), float64], Tensor[(14, 7, 10), uint64], Tensor[(176), float32], Tensor[(3360), int8], Tensor[(540), bool]) {
  @func_10611(%var_10612) /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(672), int8], Tensor[(14, 7, 10), float64], Tensor[(14, 7, 10), uint64], Tensor[(176), float32], Tensor[(3360), int8], Tensor[(540), bool]) */
}

def @func_11797() -> (Tensor[(182), float32],) {
  %993 = fn () -> (Tensor[(182), float32],) {
    %992 = @func_6728() /* ty=Tensor[(182), float32] */;
    (%992,)
  };
  %993() /* ty=(Tensor[(182), float32],) */
}

def @func_1323() -> (Tensor[(14, 7, 10), uint64],) {
  @func_1321() /* ty=(Tensor[(14, 7, 10), uint64],) */
}

def @func_7529() -> Tensor[(14, 7, 10), uint64] {
  %994 = @func_1596() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %994.0
}

def @func_11163() -> Tensor[(182), float32] {
  @func_6728() /* ty=Tensor[(182), float32] */
}

def @func_7770(%var_7768: Tensor[(12, 13, 15), uint64]) -> (Tensor[(12, 13, 15), bool], Tensor[(14, 7, 10), uint64]) {
  @func_7767(%var_7768) /* ty=(Tensor[(12, 13, 15), bool], Tensor[(14, 7, 10), uint64]) */
}

def @func_2362() -> Tensor[(182), float32] {
  %995 = @func_2155() /* ty=(Tensor[(182), float32],) */;
  %995.0
}

def @func_5120() -> (Tensor[(14, 7, 10), uint64],) {
  @func_5118() /* ty=(Tensor[(14, 7, 10), uint64],) */
}

def @func_10358() -> (Tensor[(182), float64], Tensor[(14, 7, 10), uint64], Tensor[(168, 4), int8], Tensor[(6, 6, 15), bool], Tensor[(540), bool], Tensor[(182), float32], Tensor[(182), float32], Tensor[(14, 7, 10), uint64], Tensor[(16, 15, 14), float64]) {
  %996 = @func_9890() /* ty=(Tensor[(182), float64],) */;
  %997 = cast(meta[relay.Constant][48] /* ty=Tensor[(168, 4), int8] */, dtype="int8") /* ty=Tensor[(168, 4), int8] */;
  %998 = cast(meta[relay.Constant][48] /* ty=Tensor[(168, 4), int8] */, dtype="int8") /* ty=Tensor[(168, 4), int8] */;
  %999 = reshape(%997, newshape=[12, 14, 4]) /* ty=Tensor[(12, 14, 4), int8] */;
  %1000 = reshape(%998, newshape=[12, 14, 4]) /* ty=Tensor[(12, 14, 4), int8] */;
  %1001 = @func_1355(%999, %1000) /* ty=(Tensor[(12, 14, 4), bool], Tensor[(14, 7, 10), uint64]) */;
  %1002 = cast(meta[relay.Constant][49] /* ty=Tensor[(540), bool] */, dtype="bool") /* ty=Tensor[(540), bool] */;
  %1003 = reshape(%1002, newshape=[6, 6, 15]) /* ty=Tensor[(6, 6, 15), bool] */;
  %1004 = @func_4376(%1003) /* ty=(Tensor[(6, 6, 15), bool],) */;
  %1005 = @func_9109() /* ty=(Tensor[(182), float32], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) */;
  %1006 = @func_5265() /* ty=(Tensor[(16, 15, 14), float64],) */;
  %1007 = %996.0;
  %1008 = %1001.1;
  %1009 = %1004.0;
  %1010 = @func_6728() /* ty=Tensor[(182), float32] */;
  %1011 = %1005.0;
  %1012 = @func_7903() /* ty=Tensor[(14, 7, 10), uint64] */;
  %1013 = %1006.0;
  (%1007, %1008, meta[relay.Constant][48] /* ty=Tensor[(168, 4), int8] */, %1009, meta[relay.Constant][49] /* ty=Tensor[(540), bool] */, %1010, %1011, %1012, %1013)
}

def @func_5434(%var_5433: Tensor[(182), float64]) -> Tensor[(182), float64] {
  %1019 = fn (%var_5417: Tensor[(182), float64]) -> Tensor[(182), float64] {
    %1014 = @func_1821() /* ty=Tensor[(182), float64] */;
    %1015 = cast(%var_5417, dtype="float64") /* ty=Tensor[(182), float64] */;
    %1016 = shape_of(%1014, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1017 = cast(%1014, dtype="float64") /* ty=Tensor[(182), float64] */;
    %1018 = dyn.reshape(%1015, %1016, newshape=[]) /* ty=Tensor[(?), float64] */;
    divide(%1017, %1018) /* ty=Tensor[(182), float64] */
  };
  %1019(%var_5433) /* ty=Tensor[(182), float64] */
}

def @func_4803() -> (Tensor[(14, 7, 10), float32], Tensor[(182), float64], Tensor[(182), float64]) {
  @func_4801() /* ty=(Tensor[(14, 7, 10), float32], Tensor[(182), float64], Tensor[(182), float64]) */
}

def @func_6660() -> (Tensor[(14, 7, 10), uint64],) {
  @func_6658() /* ty=(Tensor[(14, 7, 10), uint64],) */
}

def @func_9141() -> Tensor[(182), float32] {
  %1020 = @func_2155() /* ty=(Tensor[(182), float32],) */;
  %1020.0
}

def @func_10360() -> (Tensor[(182), float64], Tensor[(14, 7, 10), uint64], Tensor[(168, 4), int8], Tensor[(6, 6, 15), bool], Tensor[(540), bool], Tensor[(182), float32], Tensor[(182), float32], Tensor[(14, 7, 10), uint64], Tensor[(16, 15, 14), float64]) {
  @func_10358() /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), uint64], Tensor[(168, 4), int8], Tensor[(6, 6, 15), bool], Tensor[(540), bool], Tensor[(182), float32], Tensor[(182), float32], Tensor[(14, 7, 10), uint64], Tensor[(16, 15, 14), float64]) */
}

def @func_6790() -> Tensor[(14, 7, 10), bool] {
  %1022 = fn () -> Tensor[(14, 7, 10), bool] {
    %1021 = @func_5977() /* ty=(Tensor[(14, 7, 10), float64], Tensor[(14, 7, 10), bool]) */;
    %1021.1
  };
  %1022() /* ty=Tensor[(14, 7, 10), bool] */
}

def @func_9497(%var_9495: Tensor[(12, 2, 4), float64]) -> Tensor[(12, 2, 4), float64] {
  @func_9494(%var_9495) /* ty=Tensor[(12, 2, 4), float64] */
}

def @func_4202(%var_4200: float64) -> (Tensor[(7, 2, 15), float64], Tensor[(980), uint64], Tensor[(14, 7, 10), uint16]) {
  @func_4199(%var_4200) /* ty=(Tensor[(7, 2, 15), float64], Tensor[(980), uint64], Tensor[(14, 7, 10), uint16]) */
}

def @func_7217() -> Tensor[(182), float32] {
  %1024 = fn () -> Tensor[(182), float32] {
    %1023 = @func_2399() /* ty=(Tensor[(14, 7, 10), float32], Tensor[(182), float32]) */;
    %1023.1
  };
  %1024() /* ty=Tensor[(182), float32] */
}

def @func_4894(%var_4892: Tensor[(182), float64], %var_4893: Tensor[(540), bool]) -> (Tensor[(182), bool], Tensor[(6, 6, 15), bool], Tensor[(540), bool], Tensor[(14, 7, 10), bool], Tensor[(14, 7, 10), bool]) {
  @func_4890(%var_4892, %var_4893) /* ty=(Tensor[(182), bool], Tensor[(6, 6, 15), bool], Tensor[(540), bool], Tensor[(14, 7, 10), bool], Tensor[(14, 7, 10), bool]) */
}

def @func_6073() -> (Tensor[(14, 7, 10), uint64], Tensor[(176), float32]) {
  %1029 = fn () -> (Tensor[(14, 7, 10), uint64], Tensor[(176), float32]) {
    %1025 = @func_3798() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) */;
    %1026 = @func_4466() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(176), float32], Tensor[(8, 2, 11), bool]) */;
    %1027 = %1025.0;
    %1028 = %1026.1;
    (%1027, %1028)
  };
  %1029() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(176), float32]) */
}

def @func_11976() -> (Tensor[(182), float64], Tensor[(14, 7, 10), bool]) {
  @func_11974() /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), bool]) */
}

def @func_1376() -> (Tensor[(14, 7, 10), uint64],) {
  @func_1374() /* ty=(Tensor[(14, 7, 10), uint64],) */
}

def @func_7483(%var_7479: Tensor[(3360), int8]) -> (Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(3360), int8]) {
  %1030 = @func_5008() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %1031 = cast(%var_7479, dtype="int8") /* ty=Tensor[(3360), int8] */;
  %1032 = reshape(%1031, newshape=[3360]) /* ty=Tensor[(3360), int8] */;
  %1033 = @func_3213(%1032) /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(16, 15, 1), float64], Tensor[(3360), int8], Tensor[(960), int8], Tensor[(13, 8, 15), float64], Tensor[(1, 945), uint8]) */;
  %1034 = %1030.0;
  %1035 = %1033.0;
  (%1034, %1035, %var_7479)
}

def @func_5979() -> (Tensor[(14, 7, 10), float64], Tensor[(14, 7, 10), bool]) {
  @func_5977() /* ty=(Tensor[(14, 7, 10), float64], Tensor[(14, 7, 10), bool]) */
}

def @func_7903() -> Tensor[(14, 7, 10), uint64] {
  %1036 = @func_2115() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(672), int8]) */;
  %1036.0
}

def @func_1809() -> Tensor[(182), float64] {
  %1037 = fn () -> Tensor[(182), float64] {
    @func_1041() /* ty=Tensor[(182), float64] */
  };
  %1037() /* ty=Tensor[(182), float64] */
}

def @func_11769() -> (Tensor[(5, 14, 3), bool], Tensor[(176), float32]) {
  @func_11767() /* ty=(Tensor[(5, 14, 3), bool], Tensor[(176), float32]) */
}

def @func_3216(%var_3214: Tensor[(3360), int8]) -> (Tensor[(14, 7, 10), uint64], Tensor[(16, 15, 1), float64], Tensor[(3360), int8], Tensor[(960), int8], Tensor[(13, 8, 15), float64], Tensor[(1, 945), uint8]) {
  @func_3213(%var_3214) /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(16, 15, 1), float64], Tensor[(3360), int8], Tensor[(960), int8], Tensor[(13, 8, 15), float64], Tensor[(1, 945), uint8]) */
}

def @func_2552() -> Tensor[(182), float32] {
  @func_2362() /* ty=Tensor[(182), float32] */
}

def @func_11700() -> (Tensor[(14, 7, 10), uint64],) {
  %1038 = @func_6508() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %1039 = %1038.0;
  (%1039,)
}

def @func_6785() -> (Tensor[(14, 7, 10), float64], Tensor[(8, 2, 11), float32], float32, Tensor[(176), float32]) {
  %1047 = fn () -> (Tensor[(14, 7, 10), float64], Tensor[(8, 2, 11), float32], float32, Tensor[(176), float32]) {
    %1040 = @func_5977() /* ty=(Tensor[(14, 7, 10), float64], Tensor[(14, 7, 10), bool]) */;
    %1041 = cast(8.01186f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %1042 = cast(meta[relay.Constant][50] /* ty=Tensor[(176), float32] */, dtype="float32") /* ty=Tensor[(176), float32] */;
    %1043 = reshape(%1041, newshape=[]) /* ty=float32 */;
    %1044 = reshape(%1042, newshape=[8, 2, 11]) /* ty=Tensor[(8, 2, 11), float32] */;
    %1045 = %1040.0;
    %1046 = @func_3449(%1043, %1044) /* ty=Tensor[(8, 2, 11), float32] */;
    (%1045, %1046, 8.01186f /* ty=float32 */, meta[relay.Constant][50] /* ty=Tensor[(176), float32] */)
  };
  %1047() /* ty=(Tensor[(14, 7, 10), float64], Tensor[(8, 2, 11), float32], float32, Tensor[(176), float32]) */
}

def @func_9655(%var_9653: uint64, %var_9654: Tensor[(15, 16, 11), uint64]) -> Tensor[(15, 16, 11), uint64] {
  %1050 = fn (%var_9642: uint64, %var_9643: Tensor[(15, 16, 11), uint64]) -> Tensor[(15, 16, 11), uint64] {
    %1048 = cast(%var_9642, dtype="uint64") /* ty=uint64 */;
    %1049 = cast(%var_9643, dtype="uint64") /* ty=Tensor[(15, 16, 11), uint64] */;
    left_shift(%1048, %1049) /* ty=Tensor[(15, 16, 11), uint64] */
  };
  %1050(%var_9653, %var_9654) /* ty=Tensor[(15, 16, 11), uint64] */
}

def @func_4801() -> (Tensor[(14, 7, 10), float32], Tensor[(182), float64], Tensor[(182), float64]) {
  %1051 = @func_3193() /* ty=(Tensor[(182), float64], Tensor[(14, 7, 10), uint64]) */;
  %1052 = %1051.1;
  %1053 = cast(%1052, dtype="float32") /* ty=Tensor[(14, 7, 10), float32] */;
  %1054 = cast(meta[relay.Constant][51] /* ty=Tensor[(182), float64] */, dtype="float64") /* ty=Tensor[(182), float64] */;
  %1055 = reshape(%1054, newshape=[182]) /* ty=Tensor[(182), float64] */;
  %1056 = acos(%1053) /* ty=Tensor[(14, 7, 10), float32] */;
  %1057 = @func_2311(%1055) /* ty=Tensor[(182), float64] */;
  (%1056, %1057, meta[relay.Constant][51] /* ty=Tensor[(182), float64] */)
}

def @func_3759() -> Tensor[(4, 15, 5), uint8] {
  %1059 = fn () -> Tensor[(4, 15, 5), uint8] {
    %1058 = @func_2843() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(4, 15, 5), uint8]) */;
    %1058.1
  };
  %1059() /* ty=Tensor[(4, 15, 5), uint8] */
}

def @func_7072() -> (Tensor[(11, 6, 8), int32], Tensor[(11, 6, 8), float32]) {
  %1067 = fn () -> (Tensor[(11, 6, 8), int32], Tensor[(11, 6, 8), float32]) {
    %1060 = cast(meta[relay.Constant][53] /* ty=Tensor[(11, 6, 8), int32] */, dtype="int32") /* ty=Tensor[(11, 6, 8), int32] */;
    %1061 = shape_of(meta[relay.Constant][52] /* ty=Tensor[(11, 6, 8), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1062 = cast(meta[relay.Constant][52] /* ty=Tensor[(11, 6, 8), int32] */, dtype="int32") /* ty=Tensor[(11, 6, 8), int32] */;
    %1063 = dyn.reshape(%1060, %1061, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %1064 = cast(meta[relay.Constant][53] /* ty=Tensor[(11, 6, 8), int32] */, dtype="float32") /* ty=Tensor[(11, 6, 8), float32] */;
    %1065 = bitwise_and(%1062, %1063) /* ty=Tensor[(11, 6, 8), int32] */;
    %1066 = asin(%1064) /* ty=Tensor[(11, 6, 8), float32] */;
    (%1065, %1066)
  };
  %1067() /* ty=(Tensor[(11, 6, 8), int32], Tensor[(11, 6, 8), float32]) */
}

def @func_3799() -> (Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) {
  %1072 = fn () -> (Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) {
    %1068 = @func_1035() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) */;
    %1069 = @func_1596() /* ty=(Tensor[(14, 7, 10), uint64],) */;
    %1070 = %1068.2;
    %1071 = %1069.0;
    (%1070, %1071)
  };
  %1072() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) */
}

def @func_2851() -> Tensor[(14, 7, 10), uint64] {
  %1073 = fn () -> Tensor[(14, 7, 10), uint64] {
    @func_2200() /* ty=Tensor[(14, 7, 10), uint64] */
  };
  %1073() /* ty=Tensor[(14, 7, 10), uint64] */
}

def @func_8276() -> (Tensor[(14, 7, 10), uint64], Tensor[(1560, 1), float64], Tensor[(14, 7, 10), bool]) {
  @func_8274() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(1560, 1), float64], Tensor[(14, 7, 10), bool]) */
}

def @func_11767() -> (Tensor[(5, 14, 3), bool], Tensor[(176), float32]) {
  %1074 = @func_3434() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(182), float32], Tensor[(5, 14, 3), bool]) */;
  %1075 = @func_4466() /* ty=(Tensor[(14, 7, 10), uint64], Tensor[(176), float32], Tensor[(8, 2, 11), bool]) */;
  %1076 = %1074.2;
  %1077 = %1075.1;
  (%1076, %1077)
}

def @func_10913() -> (Tensor[(14, 7, 10), uint64], Tensor[(182), float64]) {
  %1078 = @func_5963() /* ty=(Tensor[(182), float64], Tensor[(182), float64], Tensor[(14, 7, 10), float64]) */;
  %1079 = @func_8797() /* ty=Tensor[(14, 7, 10), uint64] */;
  %1080 = %1078.1;
  (%1079, %1080)
}

def @func_8778() -> Tensor[(1560, 1), float64] {
  %1081 = @func_2005() /* ty=(Tensor[(14, 7, 10), float32], Tensor[(14, 7, 10), uint64], Tensor[(672), int8], Tensor[(14, 7, 10), uint64], Tensor[(13, 8, 15), float64], Tensor[(1560, 1), float64]) */;
  %1081.5
}

def @func_2643() -> (Tensor[(14, 7, 10), uint64],) {
  %1084 = fn () -> (Tensor[(14, 7, 10), uint64],) {
    %1082 = @func_938() /* ty=(Tensor[(14, 7, 10), uint64],) */;
    %1083 = %1082.0;
    (%1083,)
  };
  %1084() /* ty=(Tensor[(14, 7, 10), uint64],) */
}

def @func_5316() -> (Tensor[(182), float32],) {
  %1086 = fn () -> (Tensor[(182), float32],) {
    %1085 = @func_2790() /* ty=Tensor[(182), float32] */;
    (%1085,)
  };
  %1086() /* ty=(Tensor[(182), float32],) */
}

def @func_11742() -> (Tensor[(182), float64],) {
  %1087 = @func_8125() /* ty=(Tensor[(182), float64],) */;
  %1088 = %1087.0;
  (%1088,)
}

def @func_8637() -> Tensor[(14, 7, 10), uint64] {
  @func_3687() /* ty=Tensor[(14, 7, 10), uint64] */
}

def @func_1359(%var_1357: Tensor[(12, 14, 4), int8], %var_1358: Tensor[(12, 14, 4), int8]) -> (Tensor[(12, 14, 4), bool], Tensor[(14, 7, 10), uint64]) {
  @func_1355(%var_1357, %var_1358) /* ty=(Tensor[(12, 14, 4), bool], Tensor[(14, 7, 10), uint64]) */
}

def @func_8780() -> Tensor[(1560, 1), float64] {
  @func_8778() /* ty=Tensor[(1560, 1), float64] */
}

def @func_3324() -> Tensor[(14, 7, 10), bool] {
  @func_3322() /* ty=Tensor[(14, 7, 10), bool] */
}

def @func_3068(%var_3046: Tensor[(15, 9, 7), uint8], %var_3047: Tensor[(15, 9, 7), uint8]) -> (Tensor[(15, 9, 7), bool], Tensor[(13, 8, 15), float64], Tensor[(182), float32], Tensor[(182), float64]) {
  %1089 = cast(%var_3047, dtype="bool") /* ty=Tensor[(15, 9, 7), bool] */;
  %1090 = shape_of(%var_3046, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1091 = cast(%var_3046, dtype="bool") /* ty=Tensor[(15, 9, 7), bool] */;
  %1092 = dyn.reshape(%1089, %1090, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1093 = @func_2005() /* ty=(Tensor[(14, 7, 10), float32], Tensor[(14, 7, 10), uint64], Tensor[(672), int8], Tensor[(14, 7, 10), uint64], Tensor[(13, 8, 15), float64], Tensor[(1560, 1), float64]) */;
  %1094 = @func_2925() /* ty=(Tensor[(4, 15, 5), uint8], Tensor[(182), float32]) */;
  %1095 = less_equal(%1091, %1092) /* ty=Tensor[(15, 9, 7), bool] */;
  %1096 = %1093.4;
  %1097 = %1094.1;
  %1098 = @func_1338() /* ty=Tensor[(182), float64] */;
  (%1095, %1096, %1097, %1098)
}

def @func_11871() -> (Tensor[(14, 7, 10), uint64], Tensor[(182), float32]) {
  %1099 = @func_8499() /* ty=(Tensor[(11, 6, 8), int32], Tensor[(182), bool], Tensor[(182), float32]) */;
  %1100 = @func_7710() /* ty=Tensor[(14, 7, 10), uint64] */;
  %1101 = %1099.2;
  (%1100, %1101)
}

def @func_11937(%var_11919: Tensor[(7, 8, 9), uint8], %var_11920: Tensor[(7, 8, 9), uint8], %var_11931: Tensor[(7, 8, 9), uint8]) -> (Tensor[(7, 8, 9), uint8], Tensor[(7, 8, 9), bool]) {
  %1102 = cast(%var_11920, dtype="uint8") /* ty=Tensor[(7, 8, 9), uint8] */;
  %1103 = shape_of(%var_11919, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1104 = cast(%var_11919, dtype="uint8") /* ty=Tensor[(7, 8, 9), uint8] */;
  %1105 = dyn.reshape(%1102, %1103, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %1106 = cast(%var_11931, dtype="bool") /* ty=Tensor[(7, 8, 9), bool] */;
  %1107 = shape_of(%var_11920, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1108 = cast(%var_11920, dtype="bool") /* ty=Tensor[(7, 8, 9), bool] */;
  %1109 = dyn.reshape(%1106, %1107, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1110 = logical_xor(%1104, %1105) /* ty=Tensor[(7, 8, 9), uint8] */;
  %1111 = logical_or(%1108, %1109) /* ty=Tensor[(7, 8, 9), bool] */;
  (%1110, %1111)
}

def @func_11165() -> Tensor[(182), float32] {
  @func_11163() /* ty=Tensor[(182), float32] */
}

def @func_5992() -> Tensor[(182), float32] {
  @func_2552() /* ty=Tensor[(182), float32] */
}

def @func_1004() -> (Tensor[(14, 7, 10), uint64],) {
  %1113 = fn () -> (Tensor[(14, 7, 10), uint64],) {
    %1112 = @func_865() /* ty=Tensor[(14, 7, 10), uint64] */;
    (%1112,)
  };
  %1113() /* ty=(Tensor[(14, 7, 10), uint64],) */
}

def @func_6092() -> (Tensor[(182), float64], Tensor[(14, 7, 10), uint64]) {
  %1114 = @func_5963() /* ty=(Tensor[(182), float64], Tensor[(182), float64], Tensor[(14, 7, 10), float64]) */;
  %1115 = @func_2642() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %1116 = %1114.0;
  %1117 = %1115.0;
  (%1116, %1117)
}

def @func_6862() -> (Tensor[(14, 7, 10), uint64],) {
  @func_6860() /* ty=(Tensor[(14, 7, 10), uint64],) */
}

def @func_6318(%var_6289: float64) -> (Tensor[(14, 7, 10), float32], Tensor[(182), float32], Tensor[(14, 7, 10), float32], float64, Tensor[(13, 8, 15), float64], Tensor[(945), uint8], Tensor[(14, 7, 10), uint64]) {
  %1118 = @func_2609() /* ty=(Tensor[(14, 7, 10), float32],) */;
  %1119 = @func_2925() /* ty=(Tensor[(4, 15, 5), uint8], Tensor[(182), float32]) */;
  %1120 = cast(%var_6289, dtype="float64") /* ty=float64 */;
  %1121 = reshape(%1120, newshape=[]) /* ty=float64 */;
  %1122 = @func_4691(%1121) /* ty=(Tensor[(14, 7, 10), float32], Tensor[(7, 2, 15), float64], float64, Tensor[(14, 7, 10), float32], Tensor[(143, 14), float32], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) */;
  %1123 = cast(meta[relay.Constant][54] /* ty=Tensor[(945), uint8] */, dtype="uint8") /* ty=Tensor[(945), uint8] */;
  %1124 = cast(meta[relay.Constant][54] /* ty=Tensor[(945), uint8] */, dtype="uint8") /* ty=Tensor[(945), uint8] */;
  %1125 = reshape(%1123, newshape=[15, 9, 7]) /* ty=Tensor[(15, 9, 7), uint8] */;
  %1126 = reshape(%1124, newshape=[15, 9, 7]) /* ty=Tensor[(15, 9, 7), uint8] */;
  %1127 = @func_3068(%1125, %1126) /* ty=(Tensor[(15, 9, 7), bool], Tensor[(13, 8, 15), float64], Tensor[(182), float32], Tensor[(182), float64]) */;
  %1128 = @func_1662() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %1129 = %1118.0;
  %1130 = %1119.1;
  %1131 = %1122.0;
  %1132 = %1127.1;
  %1133 = %1128.0;
  (%1129, %1130, %1131, %var_6289, %1132, meta[relay.Constant][54] /* ty=Tensor[(945), uint8] */, %1133)
}

def @func_5856() -> (Tensor[(14, 7, 10), uint64], Tensor[(14, 7, 10), uint64]) {
  %1134 = @func_1321() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %1135 = @func_865() /* ty=Tensor[(14, 7, 10), uint64] */;
  %1136 = %1134.0;
  (%1135, %1136)
}

def @func_4211() -> Tensor[(182), float32] {
  @func_4209() /* ty=Tensor[(182), float32] */
}

def @func_6510() -> (Tensor[(14, 7, 10), uint64],) {
  @func_6508() /* ty=(Tensor[(14, 7, 10), uint64],) */
}

def @func_2399() -> (Tensor[(14, 7, 10), float32], Tensor[(182), float32]) {
  %1137 = @func_1321() /* ty=(Tensor[(14, 7, 10), uint64],) */;
  %1138 = %1137.0;
  %1139 = cast(%1138, dtype="float32") /* ty=Tensor[(14, 7, 10), float32] */;
  %1140 = @func_2155() /* ty=(Tensor[(182), float32],) */;
  %1141 = rsqrt(%1139) /* ty=Tensor[(14, 7, 10), float32] */;
  %1142 = %1140.0;
  (%1141, %1142)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen378/build/output.py", line 4021, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:11:55] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

