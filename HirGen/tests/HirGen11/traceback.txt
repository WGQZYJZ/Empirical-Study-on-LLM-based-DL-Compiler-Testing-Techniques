==========mod==========
#[version = "0.0.5"]
def @func_1386() -> Tensor[(8, 12, 6), float64] {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(8, 12, 6), float64] */, dtype="float64") /* ty=Tensor[(8, 12, 6), float64] */;
  asinh(%0) /* ty=Tensor[(8, 12, 6), float64] */
}

def @func_2595() -> (Tensor[(8, 12, 6), float64], Tensor[(15, 2, 14), bool], Tensor[(420), uint8]) {
  %1 = @func_2123() /* ty=(Tensor[(8, 12, 6), float64],) */;
  %2 = cast(meta[relay.Constant][1] /* ty=Tensor[(420), uint8] */, dtype="uint8") /* ty=Tensor[(420), uint8] */;
  %3 = cast(meta[relay.Constant][1] /* ty=Tensor[(420), uint8] */, dtype="uint8") /* ty=Tensor[(420), uint8] */;
  %4 = reshape(%2, newshape=[15, 2, 14]) /* ty=Tensor[(15, 2, 14), uint8] */;
  %5 = reshape(%3, newshape=[15, 2, 14]) /* ty=Tensor[(15, 2, 14), uint8] */;
  %6 = @func_326(%4, %5) /* ty=(Tensor[(15, 2, 14), bool],) */;
  %7 = %1.0;
  %8 = %6.0;
  (%7, %8, meta[relay.Constant][1] /* ty=Tensor[(420), uint8] */)
}

def @func_2080() -> (Tensor[(8, 12, 6), float32],) {
  %9 = @func_1996() /* ty=(Tensor[(8, 12, 6), float32],) */;
  %10 = %9.0;
  (%10,)
}

def @func_4018() -> (Tensor[(8, 12, 6), float64],) {
  %11 = @func_2754() /* ty=(Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float32]) */;
  %12 = %11.0;
  (%12,)
}

def @func_4128() -> (Tensor[(8, 12, 6), float64], Tensor[(11, 7, 3), int16], Tensor[(231), int16]) {
  %13 = @func_3318() /* ty=(Tensor[(8, 12, 6), float64],) */;
  %14 = cast(meta[relay.Constant][2] /* ty=Tensor[(231), int16] */, dtype="int16") /* ty=Tensor[(231), int16] */;
  %15 = cast(meta[relay.Constant][2] /* ty=Tensor[(231), int16] */, dtype="int16") /* ty=Tensor[(231), int16] */;
  %16 = reshape(%14, newshape=[11, 7, 3]) /* ty=Tensor[(11, 7, 3), int16] */;
  %17 = reshape(%15, newshape=[11, 7, 3]) /* ty=Tensor[(11, 7, 3), int16] */;
  %18 = @func_295(%16, %17) /* ty=(Tensor[(11, 7, 3), int16],) */;
  %19 = %13.0;
  %20 = %18.0;
  (%19, %20, meta[relay.Constant][2] /* ty=Tensor[(231), int16] */)
}

def @func_4265() -> (Tensor[(8, 12, 6), float32],) {
  %21 = @func_3286() /* ty=(Tensor[(8, 12, 6), float32],) */;
  %22 = %21.0;
  (%22,)
}

def @func_2123() -> (Tensor[(8, 12, 6), float64],) {
  %23 = @func_1386() /* ty=Tensor[(8, 12, 6), float64] */;
  %24 = cast(%23, dtype="float64") /* ty=Tensor[(8, 12, 6), float64] */;
  %25 = erf(%24) /* ty=Tensor[(8, 12, 6), float64] */;
  (%25,)
}

def @func_4525() -> (Tensor[(8, 12, 6), float64], Tensor[(15, 2, 14), bool], Tensor[(8, 12, 6), float32]) {
  %26 = @func_3404() /* ty=(Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float32], Tensor[(50), int8], Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), int64], Tensor[(5, 2, 5), bool]) */;
  %27 = %26.5;
  %28 = cast(%27, dtype="float64") /* ty=Tensor[(8, 12, 6), float64] */;
  %29 = @func_1996() /* ty=(Tensor[(8, 12, 6), float32],) */;
  %30 = log(%28) /* ty=Tensor[(8, 12, 6), float64] */;
  %31 = @func_3856() /* ty=Tensor[(15, 2, 14), bool] */;
  %32 = %29.0;
  (%30, %31, %32)
}

def @func_5011() -> (Tensor[(8, 12, 6), float32],) {
  %33 = @func_3286() /* ty=(Tensor[(8, 12, 6), float32],) */;
  %34 = %33.0;
  (%34,)
}

def @func_1924(%var_1840: Tensor[(8, 64), float32], %var_1884: uint64, %var_1901: Tensor[(104), float32], %var_1920: Tensor[(9, 100), float64], %var_1921: Tensor[(2016), float64]) -> (Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float64], Tensor[(160), uint64], Tensor[(270, 6), float64], Tensor[(160), uint64], Tensor[(1, 13, 8), float32], Tensor[(104), float32], Tensor[(2, 16, 16), float64], Tensor[(2, 16, 16), int64], Tensor[(104), float32], Tensor[(9, 100), float64], Tensor[(2016), float64]) {
  %35 = @func_1482() /* ty=(Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float32]) */;
  %36 = cast(meta[relay.Constant][3] /* ty=Tensor[(270, 6), float64] */, dtype="float64") /* ty=Tensor[(270, 6), float64] */;
  %37 = cast(%var_1884, dtype="uint64") /* ty=uint64 */;
  %38 = reshape(%36, newshape=[1620]) /* ty=Tensor[(1620), float64] */;
  %39 = reshape(%37, newshape=[]) /* ty=uint64 */;
  %40 = @func_1680(%38, %39) /* ty=(Tensor[(8, 12, 6), float64], Tensor[(2, 16, 16), int16], Tensor[(2, 256), float32], Tensor[(160), uint64], Tensor[(26, 4), float32], uint64, Tensor[(15, 2, 14), bool], Tensor[(420), uint8], Tensor[(1620), uint32]) */;
  %41 = cast(meta[relay.Constant][3] /* ty=Tensor[(270, 6), float64] */, dtype="float64") /* ty=Tensor[(270, 6), float64] */;
  %42 = cast(%var_1884, dtype="uint64") /* ty=uint64 */;
  %43 = reshape(%41, newshape=[1620]) /* ty=Tensor[(1620), float64] */;
  %44 = reshape(%42, newshape=[]) /* ty=uint64 */;
  %45 = @func_1680(%43, %44) /* ty=(Tensor[(8, 12, 6), float64], Tensor[(2, 16, 16), int16], Tensor[(2, 256), float32], Tensor[(160), uint64], Tensor[(26, 4), float32], uint64, Tensor[(15, 2, 14), bool], Tensor[(420), uint8], Tensor[(1620), uint32]) */;
  %46 = cast(%var_1901, dtype="float32") /* ty=Tensor[(104), float32] */;
  %47 = reshape(%46, newshape=[1, 13, 8]) /* ty=Tensor[(1, 13, 8), float32] */;
  %48 = @func_594(%47) /* ty=(Tensor[(1, 13, 8), float32],) */;
  %49 = cast(%var_1840, dtype="float32") /* ty=Tensor[(8, 64), float32] */;
  %50 = cast(%var_1840, dtype="float32") /* ty=Tensor[(8, 64), float32] */;
  %51 = cast(%var_1840, dtype="float32") /* ty=Tensor[(8, 64), float32] */;
  %52 = cast(%var_1840, dtype="float32") /* ty=Tensor[(8, 64), float32] */;
  %53 = reshape(%49, newshape=[2, 16, 16]) /* ty=Tensor[(2, 16, 16), float32] */;
  %54 = reshape(%50, newshape=[2, 16, 16]) /* ty=Tensor[(2, 16, 16), float32] */;
  %55 = reshape(%51, newshape=[2, 16, 16]) /* ty=Tensor[(2, 16, 16), float32] */;
  %56 = reshape(%52, newshape=[2, 16, 16]) /* ty=Tensor[(2, 16, 16), float32] */;
  %57 = @func_1540(%53, %54, %55, %56) /* ty=(Tensor[(2, 16, 16), float32], Tensor[(2, 16, 16), int16], Tensor[(2, 16, 16), int64], Tensor[(8, 12, 6), float32]) */;
  %58 = %57.0;
  %59 = cast(%var_1840, dtype="int64") /* ty=Tensor[(8, 64), int64] */;
  %60 = shape_of(%58, dtype="int32") /* ty=Tensor[(3), int32] */;
  %61 = cast(%58, dtype="int64") /* ty=Tensor[(2, 16, 16), int64] */;
  %62 = dyn.reshape(%59, %60, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %63 = bitwise_or(%61, %62) /* ty=Tensor[(2, 16, 16), int64] */;
  %64 = cast(%63, dtype="float64") /* ty=Tensor[(2, 16, 16), float64] */;
  %65 = cast(%63, dtype="float64") /* ty=Tensor[(2, 16, 16), float64] */;
  %66 = atanh(%65) /* ty=Tensor[(2, 16, 16), float64] */;
  %67 = cast(%66, dtype="int64") /* ty=Tensor[(2, 16, 16), int64] */;
  %68 = cast(%var_1884, dtype="int64") /* ty=int64 */;
  %69 = cast(%var_1920, dtype="float64") /* ty=Tensor[(9, 100), float64] */;
  %70 = cast(%var_1921, dtype="float64") /* ty=Tensor[(2016), float64] */;
  %71 = cast(%var_1901, dtype="float32") /* ty=Tensor[(104), float32] */;
  %72 = cast(%var_1884, dtype="uint64") /* ty=uint64 */;
  %73 = %40.3;
  %74 = cast(%73, dtype="uint64") /* ty=Tensor[(160), uint64] */;
  %75 = reshape(%69, newshape=[12, 5, 15]) /* ty=Tensor[(12, 5, 15), float64] */;
  %76 = reshape(%70, newshape=[14, 144]) /* ty=Tensor[(14, 144), float64] */;
  %77 = reshape(%71, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %78 = reshape(%72, newshape=[]) /* ty=uint64 */;
  %79 = reshape(%74, newshape=[160]) /* ty=Tensor[(160), uint64] */;
  %80 = @func_838(%75, %76, %77, %78, %79) /* ty=(Tensor[(12, 5, 15), float64], Tensor[(1, 13, 8), float32], Tensor[(14, 144), float64], Tensor[(104), float32], Tensor[(1, 13, 8), float32], Tensor[(16, 5, 2), uint64], uint64, Tensor[(160), uint64], Tensor[(11, 7, 3), int16], Tensor[(231), int16], Tensor[(104), float32], Tensor[(1, 13, 8), float32]) */;
  %81 = %35.1;
  %82 = @func_1386() /* ty=Tensor[(8, 12, 6), float64] */;
  %83 = %45.3;
  %84 = %48.0;
  %85 = erf(%64) /* ty=Tensor[(2, 16, 16), float64] */;
  %86 = left_shift(%67, %68) /* ty=Tensor[(2, 16, 16), int64] */;
  %87 = %80.10;
  (%81, %82, %73, meta[relay.Constant][3] /* ty=Tensor[(270, 6), float64] */, %83, %84, %var_1901, %85, %86, %87, %var_1920, %var_1921)
}

def @func_4834() -> (Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), bool], Tensor[(8, 12, 6), float64], Tensor[(15, 2, 14), bool], Tensor[(15, 2, 14), bool]) {
  %88 = @func_3563() /* ty=Tensor[(8, 12, 6), float64] */;
  %89 = cast(%88, dtype="float32") /* ty=Tensor[(8, 12, 6), float32] */;
  %90 = reshape(%89, newshape=[8, 12, 6]) /* ty=Tensor[(8, 12, 6), float32] */;
  %91 = @func_3455(%90) /* ty=(Tensor[(8, 12, 6), bool],) */;
  %92 = @func_2595() /* ty=(Tensor[(8, 12, 6), float64], Tensor[(15, 2, 14), bool], Tensor[(420), uint8]) */;
  %93 = @func_2595() /* ty=(Tensor[(8, 12, 6), float64], Tensor[(15, 2, 14), bool], Tensor[(420), uint8]) */;
  %94 = @func_4606() /* ty=(Tensor[(16, 4, 13), float64], Tensor[(15, 2, 14), bool], Tensor[(8, 12, 6), float32]) */;
  %95 = %91.0;
  %96 = %92.0;
  %97 = %93.1;
  %98 = %94.1;
  (%88, %95, %96, %97, %98)
}

def @func_4377(%var_4359: Tensor[(6, 9, 2), float64]) -> (Tensor[(6, 9, 2), uint8],) {
  %99 = cast(%var_4359, dtype="float64") /* ty=Tensor[(6, 9, 2), float64] */;
  %100 = acosh(%99) /* ty=Tensor[(6, 9, 2), float64] */;
  %101 = cast(%var_4359, dtype="uint8") /* ty=Tensor[(6, 9, 2), uint8] */;
  %102 = shape_of(%100, dtype="int32") /* ty=Tensor[(3), int32] */;
  %103 = cast(%100, dtype="uint8") /* ty=Tensor[(6, 9, 2), uint8] */;
  %104 = dyn.reshape(%101, %102, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %105 = bitwise_and(%103, %104) /* ty=Tensor[(6, 9, 2), uint8] */;
  (%105,)
}

def @func_4166() -> Tensor[(8, 12, 6), float64] {
  %106 = @func_4018() /* ty=(Tensor[(8, 12, 6), float64],) */;
  %106.0
}

def @func_3050(%var_3012: Tensor[(5, 2, 5), int8]) -> (Tensor[(5, 2, 5), bool], Tensor[(8, 12, 6), float32]) {
  %107 = cast(%var_3012, dtype="bool") /* ty=Tensor[(5, 2, 5), bool] */;
  %108 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(5, 2, 5), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %109 = cast(meta[relay.Constant][4] /* ty=Tensor[(5, 2, 5), int8] */, dtype="bool") /* ty=Tensor[(5, 2, 5), bool] */;
  %110 = dyn.reshape(%107, %108, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %111 = @func_1996() /* ty=(Tensor[(8, 12, 6), float32],) */;
  %112 = greater_equal(%109, %110) /* ty=Tensor[(5, 2, 5), bool] */;
  %113 = %111.0;
  (%112, %113)
}

def @func_3318() -> (Tensor[(8, 12, 6), float64],) {
  %114 = @func_2754() /* ty=(Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float32]) */;
  %115 = %114.0;
  (%115,)
}

def @func_5205() -> (Tensor[(2, 16, 14), float32], Tensor[(8, 12, 6), float32]) {
  %116 = @func_3133() /* ty=Tensor[(2, 16, 14), float32] */;
  %117 = cast(%116, dtype="float32") /* ty=Tensor[(2, 16, 14), float32] */;
  %118 = @func_3286() /* ty=(Tensor[(8, 12, 6), float32],) */;
  %119 = asin(%117) /* ty=Tensor[(2, 16, 14), float32] */;
  %120 = %118.0;
  (%119, %120)
}

def @func_2348(%var_2250: Tensor[(1, 6, 14), int16], %var_2291: Tensor[(2, 256), float32], %var_2292: uint64, %var_2293: Tensor[(104), float32], %var_2294: Tensor[(1, 900), float64], %var_2295: Tensor[(2016), float64]) -> (Tensor[(14, 6, 14), bool], Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float32], Tensor[(9, 100), float64], Tensor[(104), float32], Tensor[(2016), float64], Tensor[(1, 900), bool], Tensor[(14, 6, 14), bool], Tensor[(2, 256), float64], Tensor[(1, 13, 8), float32]) {
  %121 = cast(%var_2250, dtype="bool") /* ty=Tensor[(1, 6, 14), bool] */;
  %122 = cast(meta[relay.Constant][5] /* ty=Tensor[(14, 6, 14), int16] */, dtype="bool") /* ty=Tensor[(14, 6, 14), bool] */;
  %123 = @func_2240() /* ty=(Tensor[(8, 12, 6), float32], Tensor[(52, 2), bool]) */;
  %124 = @func_1996() /* ty=(Tensor[(8, 12, 6), float32],) */;
  %125 = cast(%var_2291, dtype="float32") /* ty=Tensor[(2, 256), float32] */;
  %126 = cast(%var_2292, dtype="uint64") /* ty=uint64 */;
  %127 = cast(%var_2293, dtype="float32") /* ty=Tensor[(104), float32] */;
  %128 = cast(%var_2294, dtype="float64") /* ty=Tensor[(1, 900), float64] */;
  %129 = cast(%var_2295, dtype="float64") /* ty=Tensor[(2016), float64] */;
  %130 = reshape(%125, newshape=[8, 64]) /* ty=Tensor[(8, 64), float32] */;
  %131 = reshape(%126, newshape=[]) /* ty=uint64 */;
  %132 = reshape(%127, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %133 = reshape(%128, newshape=[9, 100]) /* ty=Tensor[(9, 100), float64] */;
  %134 = reshape(%129, newshape=[2016]) /* ty=Tensor[(2016), float64] */;
  %135 = @func_1924(%130, %131, %132, %133, %134) /* ty=(Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float64], Tensor[(160), uint64], Tensor[(270, 6), float64], Tensor[(160), uint64], Tensor[(1, 13, 8), float32], Tensor[(104), float32], Tensor[(2, 16, 16), float64], Tensor[(2, 16, 16), int64], Tensor[(104), float32], Tensor[(9, 100), float64], Tensor[(2016), float64]) */;
  %136 = cast(%var_2292, dtype="bool") /* ty=bool */;
  %137 = cast(%var_2294, dtype="bool") /* ty=Tensor[(1, 900), bool] */;
  %138 = cast(%var_2250, dtype="bool") /* ty=Tensor[(1, 6, 14), bool] */;
  %139 = cast(meta[relay.Constant][5] /* ty=Tensor[(14, 6, 14), int16] */, dtype="bool") /* ty=Tensor[(14, 6, 14), bool] */;
  %140 = cast(%var_2291, dtype="float64") /* ty=Tensor[(2, 256), float64] */;
  %141 = cast(%var_2292, dtype="float64") /* ty=float64 */;
  %142 = subtract(%140, %141) /* ty=Tensor[(2, 256), float64] */;
  %143 = cast(%142, dtype="float32") /* ty=Tensor[(2, 256), float32] */;
  %144 = cast(%var_2292, dtype="uint64") /* ty=uint64 */;
  %145 = cast(%var_2293, dtype="float32") /* ty=Tensor[(104), float32] */;
  %146 = greater(%136, %137) /* ty=Tensor[(1, 900), bool] */;
  %147 = cast(%146, dtype="float64") /* ty=Tensor[(1, 900), float64] */;
  %148 = cast(%var_2295, dtype="float64") /* ty=Tensor[(2016), float64] */;
  %149 = reshape(%143, newshape=[8, 64]) /* ty=Tensor[(8, 64), float32] */;
  %150 = reshape(%144, newshape=[]) /* ty=uint64 */;
  %151 = reshape(%145, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %152 = reshape(%147, newshape=[9, 100]) /* ty=Tensor[(9, 100), float64] */;
  %153 = reshape(%148, newshape=[2016]) /* ty=Tensor[(2016), float64] */;
  %154 = @func_1924(%149, %150, %151, %152, %153) /* ty=(Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float64], Tensor[(160), uint64], Tensor[(270, 6), float64], Tensor[(160), uint64], Tensor[(1, 13, 8), float32], Tensor[(104), float32], Tensor[(2, 16, 16), float64], Tensor[(2, 16, 16), int64], Tensor[(104), float32], Tensor[(9, 100), float64], Tensor[(2016), float64]) */;
  %155 = less_equal(%121, %122) /* ty=Tensor[(14, 6, 14), bool] */;
  %156 = %123.0;
  %157 = %124.0;
  %158 = %135.10;
  %159 = not_equal(%138, %139) /* ty=Tensor[(14, 6, 14), bool] */;
  %160 = %154.5;
  (%155, %156, %157, %158, %var_2293, %var_2295, %146, %159, %142, %160)
}

def @func_5840() -> (Tensor[(8, 12, 6), float32],) {
  %161 = @func_3989() /* ty=(Tensor[(8, 12, 6), float32],) */;
  %162 = %161.0;
  (%162,)
}

def @func_3295() -> (Tensor[(15, 2, 14), bool],) {
  %163 = @func_2595() /* ty=(Tensor[(8, 12, 6), float64], Tensor[(15, 2, 14), bool], Tensor[(420), uint8]) */;
  %164 = %163.1;
  (%164,)
}

def @func_4245() -> (Tensor[(15, 2, 14), uint8], Tensor[(8, 12, 6), uint8]) {
  %165 = cast(meta[relay.Constant][6] /* ty=Tensor[(420), uint8] */, dtype="uint8") /* ty=Tensor[(420), uint8] */;
  %166 = cast(meta[relay.Constant][6] /* ty=Tensor[(420), uint8] */, dtype="uint8") /* ty=Tensor[(420), uint8] */;
  %167 = reshape(%165, newshape=[15, 2, 14]) /* ty=Tensor[(15, 2, 14), uint8] */;
  %168 = reshape(%166, newshape=[15, 2, 14]) /* ty=Tensor[(15, 2, 14), uint8] */;
  %169 = @func_326(%167, %168) /* ty=(Tensor[(15, 2, 14), bool],) */;
  %170 = %169.0;
  %171 = cast(meta[relay.Constant][6] /* ty=Tensor[(420), uint8] */, dtype="uint8") /* ty=Tensor[(420), uint8] */;
  %172 = shape_of(%170, dtype="int32") /* ty=Tensor[(3), int32] */;
  %173 = cast(%170, dtype="uint8") /* ty=Tensor[(15, 2, 14), uint8] */;
  %174 = dyn.reshape(%171, %172, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %175 = @func_3989() /* ty=(Tensor[(8, 12, 6), float32],) */;
  %176 = %175.0;
  %177 = cast(meta[relay.Constant][7] /* ty=Tensor[(8, 12, 6), float32] */, dtype="uint8") /* ty=Tensor[(8, 12, 6), uint8] */;
  %178 = shape_of(%176, dtype="int32") /* ty=Tensor[(3), int32] */;
  %179 = cast(%176, dtype="uint8") /* ty=Tensor[(8, 12, 6), uint8] */;
  %180 = dyn.reshape(%177, %178, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %181 = bitwise_and(%173, %174) /* ty=Tensor[(15, 2, 14), uint8] */;
  %182 = right_shift(%179, %180) /* ty=Tensor[(8, 12, 6), uint8] */;
  (%181, %182)
}

def @func_4744() -> Tensor[(8, 12, 6), float32] {
  %183 = @func_3286() /* ty=(Tensor[(8, 12, 6), float32],) */;
  %183.0
}

def @func_2784(%var_2778: uint64, %var_2779: Tensor[(160), uint64]) -> (Tensor[(8, 12, 6), float64], Tensor[(16, 5, 2), uint64], uint64, Tensor[(160), uint64]) {
  %184 = @func_1996() /* ty=(Tensor[(8, 12, 6), float32],) */;
  %185 = %184.0;
  %186 = cast(%185, dtype="float64") /* ty=Tensor[(8, 12, 6), float64] */;
  %187 = cast(%var_2778, dtype="uint64") /* ty=uint64 */;
  %188 = cast(%var_2779, dtype="uint64") /* ty=Tensor[(160), uint64] */;
  %189 = reshape(%187, newshape=[]) /* ty=uint64 */;
  %190 = reshape(%188, newshape=[16, 5, 2]) /* ty=Tensor[(16, 5, 2), uint64] */;
  %191 = @func_427(%189, %190) /* ty=(Tensor[(16, 5, 2), uint64],) */;
  %192 = cosh(%186) /* ty=Tensor[(8, 12, 6), float64] */;
  %193 = %191.0;
  (%192, %193, %var_2778, %var_2779)
}

def @func_5492(%var_5318: Tensor[(1620, 1), float64], %var_5324: Tensor[(231), int16], %var_5440: Tensor[(6, 18), float64]) -> (Tensor[(8, 12, 6), float64], Tensor[(160), uint64], Tensor[(104), float32], uint64, Tensor[(2, 9, 9), float64], Tensor[(162), float64], Tensor[(2, 16, 14), float32], Tensor[(2, 9, 9), float64], Tensor[(1620, 1), float32], Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float32], Tensor[(6, 9, 2), uint8], Tensor[(6, 18), float64], Tensor[(8, 12, 6), float32], Tensor[(1620, 231), float32], Tensor[(231), uint8], Tensor[(231), int32]) {
  %194 = @func_4018() /* ty=(Tensor[(8, 12, 6), float64],) */;
  %195 = cast(%var_5318, dtype="float64") /* ty=Tensor[(1620, 1), float64] */;
  %196 = cast(meta[relay.Constant][8] /* ty=Tensor[(104), float32] */, dtype="float32") /* ty=Tensor[(104), float32] */;
  %197 = cast(meta[relay.Constant][9] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %198 = reshape(%195, newshape=[9, 12, 15]) /* ty=Tensor[(9, 12, 15), float64] */;
  %199 = reshape(%196, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %200 = reshape(%197, newshape=[]) /* ty=uint64 */;
  %201 = @func_1353(%198, %199, %200) /* ty=(Tensor[(9, 12, 15), float32], Tensor[(1, 13, 8), float32], Tensor[(104), float32], Tensor[(16, 5, 2), uint64], uint64, Tensor[(160), uint64]) */;
  %202 = cast(meta[relay.Constant][10] /* ty=Tensor[(162), float64] */, dtype="float64") /* ty=Tensor[(162), float64] */;
  %203 = cast(meta[relay.Constant][10] /* ty=Tensor[(162), float64] */, dtype="float64") /* ty=Tensor[(162), float64] */;
  %204 = reshape(%202, newshape=[2, 9, 9]) /* ty=Tensor[(2, 9, 9), float64] */;
  %205 = reshape(%203, newshape=[2, 9, 9]) /* ty=Tensor[(2, 9, 9), float64] */;
  %206 = @func_4288(%204, %205) /* ty=(Tensor[(2, 9, 9), float64],) */;
  %207 = %206.0;
  %208 = cast(%207, dtype="float64") /* ty=Tensor[(2, 9, 9), float64] */;
  %209 = cast(meta[relay.Constant][10] /* ty=Tensor[(162), float64] */, dtype="float64") /* ty=Tensor[(162), float64] */;
  %210 = reshape(%208, newshape=[2, 9, 9]) /* ty=Tensor[(2, 9, 9), float64] */;
  %211 = reshape(%209, newshape=[2, 9, 9]) /* ty=Tensor[(2, 9, 9), float64] */;
  %212 = @func_4288(%210, %211) /* ty=(Tensor[(2, 9, 9), float64],) */;
  %213 = cast(%var_5318, dtype="float32") /* ty=Tensor[(1620, 1), float32] */;
  %214 = cast(meta[relay.Constant][9] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %215 = %201.5;
  %216 = cast(%215, dtype="uint64") /* ty=Tensor[(160), uint64] */;
  %217 = reshape(%214, newshape=[]) /* ty=uint64 */;
  %218 = reshape(%216, newshape=[1, 160]) /* ty=Tensor[(1, 160), uint64] */;
  %219 = @func_3679(%217, %218) /* ty=(Tensor[(15, 2, 14), float64], Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float64], Tensor[(16, 5, 2), uint64], uint64, Tensor[(1, 160), uint64], Tensor[(15, 2, 14), bool]) */;
  %220 = @func_4956() /* ty=(Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float32]) */;
  %221 = cast(%var_5440, dtype="float64") /* ty=Tensor[(6, 18), float64] */;
  %222 = reshape(%221, newshape=[6, 9, 2]) /* ty=Tensor[(6, 9, 2), float64] */;
  %223 = @func_4377(%222) /* ty=(Tensor[(6, 9, 2), uint8],) */;
  %224 = @func_3989() /* ty=(Tensor[(8, 12, 6), float32],) */;
  %225 = cast(%var_5324, dtype="float64") /* ty=Tensor[(231), float64] */;
  %226 = tan(%225) /* ty=Tensor[(231), float64] */;
  %227 = cast(%226, dtype="float32") /* ty=Tensor[(231), float32] */;
  %228 = log2(%227) /* ty=Tensor[(231), float32] */;
  %229 = cast(%228, dtype="float32") /* ty=Tensor[(231), float32] */;
  %230 = cos(%229) /* ty=Tensor[(231), float32] */;
  %231 = cast(%var_5324, dtype="uint8") /* ty=Tensor[(231), uint8] */;
  %232 = cast(%var_5318, dtype="uint8") /* ty=Tensor[(1620, 1), uint8] */;
  %233 = logical_xor(%231, %232) /* ty=Tensor[(1620, 231), uint8] */;
  %234 = cast(%230, dtype="float32") /* ty=Tensor[(231), float32] */;
  %235 = cast(%233, dtype="float32") /* ty=Tensor[(1620, 231), float32] */;
  %236 = cast(%var_5324, dtype="uint8") /* ty=Tensor[(231), uint8] */;
  %237 = shape_of(%226, dtype="int32") /* ty=Tensor[(1), int32] */;
  %238 = cast(%226, dtype="uint8") /* ty=Tensor[(231), uint8] */;
  %239 = dyn.reshape(%236, %237, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %240 = cast(%var_5324, dtype="int16") /* ty=Tensor[(231), int16] */;
  %241 = cast(%var_5324, dtype="int16") /* ty=Tensor[(231), int16] */;
  %242 = reshape(%240, newshape=[11, 7, 3]) /* ty=Tensor[(11, 7, 3), int16] */;
  %243 = reshape(%241, newshape=[11, 7, 3]) /* ty=Tensor[(11, 7, 3), int16] */;
  %244 = @func_295(%242, %243) /* ty=(Tensor[(11, 7, 3), int16],) */;
  %245 = %244.0;
  %246 = cast(%245, dtype="int16") /* ty=Tensor[(11, 7, 3), int16] */;
  %247 = shape_of(%230, dtype="int32") /* ty=Tensor[(1), int32] */;
  %248 = cast(%230, dtype="int16") /* ty=Tensor[(231), int16] */;
  %249 = dyn.reshape(%246, %247, newshape=[]) /* ty=Tensor[(?), int16] */;
  %250 = right_shift(%248, %249) /* ty=Tensor[(231), int16] */;
  %251 = cast(%250, dtype="int32") /* ty=Tensor[(231), int32] */;
  %252 = shape_of(%226, dtype="int32") /* ty=Tensor[(1), int32] */;
  %253 = cast(%226, dtype="int32") /* ty=Tensor[(231), int32] */;
  %254 = dyn.reshape(%251, %252, newshape=[]) /* ty=Tensor[(?), int32] */;
  %255 = %194.0;
  %256 = @func_3133() /* ty=Tensor[(2, 16, 14), float32] */;
  %257 = %212.0;
  %258 = sqrt(%213) /* ty=Tensor[(1620, 1), float32] */;
  %259 = %219.1;
  %260 = %220.0;
  %261 = %223.0;
  %262 = %224.0;
  %263 = mod(%234, %235) /* ty=Tensor[(1620, 231), float32] */;
  %264 = subtract(%238, %239) /* ty=Tensor[(231), uint8] */;
  %265 = bitwise_and(%253, %254) /* ty=Tensor[(231), int32] */;
  (%255, %215, meta[relay.Constant][8] /* ty=Tensor[(104), float32] */, meta[relay.Constant][9] /* ty=uint64 */, %207, meta[relay.Constant][10] /* ty=Tensor[(162), float64] */, %256, %257, %258, %259, %260, %261, %var_5440, %262, %263, %264, %265)
}

def @func_1482() -> (Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float32]) {
  %266 = @func_1386() /* ty=Tensor[(8, 12, 6), float64] */;
  %267 = cast(%266, dtype="float32") /* ty=Tensor[(8, 12, 6), float32] */;
  %268 = @func_1386() /* ty=Tensor[(8, 12, 6), float64] */;
  %269 = sigmoid(%267) /* ty=Tensor[(8, 12, 6), float32] */;
  (%268, %269)
}

def @func_295(%var_275: Tensor[(11, 7, 3), int16], %var_276: Tensor[(11, 7, 3), int16]) -> (Tensor[(11, 7, 3), int16],) {
  %270 = cast(%var_276, dtype="int16") /* ty=Tensor[(11, 7, 3), int16] */;
  %271 = shape_of(%var_275, dtype="int32") /* ty=Tensor[(3), int32] */;
  %272 = cast(%var_275, dtype="int16") /* ty=Tensor[(11, 7, 3), int16] */;
  %273 = dyn.reshape(%270, %271, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %274 = right_shift(%272, %273) /* ty=Tensor[(11, 7, 3), int16] */;
  (%274,)
}

def @func_4940() -> (Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float64]) {
  %275 = @func_4018() /* ty=(Tensor[(8, 12, 6), float64],) */;
  %276 = %275.0;
  %277 = @func_4166() /* ty=Tensor[(8, 12, 6), float64] */;
  (%276, %277)
}

def @func_3286() -> (Tensor[(8, 12, 6), float32],) {
  %278 = @func_2519() /* ty=Tensor[(8, 12, 6), float32] */;
  (%278,)
}

def @func_594(%var_565: Tensor[(1, 13, 8), float32]) -> (Tensor[(1, 13, 8), float32],) {
  %279 = cast(%var_565, dtype="float32") /* ty=Tensor[(1, 13, 8), float32] */;
  %280 = rsqrt(%279) /* ty=Tensor[(1, 13, 8), float32] */;
  (%280,)
}

def @func_5107(%var_5101: Tensor[(14, 10, 3), float64]) -> Tensor[(14, 10, 3), uint64] {
  %281 = @func_4401() /* ty=Tensor[(14, 10, 3), float64] */;
  %282 = cast(%var_5101, dtype="uint64") /* ty=Tensor[(14, 10, 3), uint64] */;
  %283 = shape_of(%281, dtype="int32") /* ty=Tensor[(3), int32] */;
  %284 = cast(%281, dtype="uint64") /* ty=Tensor[(14, 10, 3), uint64] */;
  %285 = dyn.reshape(%282, %283, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  minimum(%284, %285) /* ty=Tensor[(14, 10, 3), uint64] */
}

def @main() -> (Tensor[(52, 2), float32],) {
  %286 = @func_2240() /* ty=(Tensor[(8, 12, 6), float32], Tensor[(52, 2), bool]) */;
  %287 = %286.1;
  %288 = cast(%287, dtype="float64") /* ty=Tensor[(52, 2), float64] */;
  %289 = acos(%288) /* ty=Tensor[(52, 2), float64] */;
  %290 = cast(%289, dtype="float32") /* ty=Tensor[(52, 2), float32] */;
  %291 = rsqrt(%290) /* ty=Tensor[(52, 2), float32] */;
  (%291,)
}

def @func_2098(%var_2086: Tensor[(270, 6), float64]) -> (Tensor[(2, 256), float32], Tensor[(270, 6), float64], Tensor[(8, 12, 6), bool]) {
  %292 = cast(%var_2086, dtype="float64") /* ty=Tensor[(270, 6), float64] */;
  %293 = cast(meta[relay.Constant][11] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %294 = reshape(%292, newshape=[1620]) /* ty=Tensor[(1620), float64] */;
  %295 = reshape(%293, newshape=[]) /* ty=uint64 */;
  %296 = @func_1680(%294, %295) /* ty=(Tensor[(8, 12, 6), float64], Tensor[(2, 16, 16), int16], Tensor[(2, 256), float32], Tensor[(160), uint64], Tensor[(26, 4), float32], uint64, Tensor[(15, 2, 14), bool], Tensor[(420), uint8], Tensor[(1620), uint32]) */;
  %297 = @func_2080() /* ty=(Tensor[(8, 12, 6), float32],) */;
  %298 = %297.0;
  %299 = cast(%298, dtype="bool") /* ty=Tensor[(8, 12, 6), bool] */;
  %300 = cast(meta[relay.Constant][11] /* ty=uint64 */, dtype="bool") /* ty=bool */;
  %301 = %296.2;
  %302 = equal(%299, %300) /* ty=Tensor[(8, 12, 6), bool] */;
  (%301, %var_2086, %302)
}

def @func_5698(%var_5646: Tensor[(4, 10, 12), uint64], %var_5647: Tensor[(4, 10, 12), uint64], %var_5683: uint64) -> (Tensor[(4, 10, 12), bool], Tensor[(104), float32], Tensor[(1620), float64], Tensor[(104), float32], uint64, Tensor[(8, 12, 6), float64], Tensor[(576), float64], Tensor[(4, 10, 12), bool]) {
  %303 = cast(%var_5647, dtype="uint64") /* ty=Tensor[(4, 10, 12), uint64] */;
  %304 = shape_of(%var_5646, dtype="int32") /* ty=Tensor[(3), int32] */;
  %305 = cast(%var_5646, dtype="uint64") /* ty=Tensor[(4, 10, 12), uint64] */;
  %306 = dyn.reshape(%303, %304, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %307 = bitwise_or(%305, %306) /* ty=Tensor[(4, 10, 12), uint64] */;
  %308 = cast(%307, dtype="float32") /* ty=Tensor[(4, 10, 12), float32] */;
  %309 = erf(%308) /* ty=Tensor[(4, 10, 12), float32] */;
  %310 = cast(meta[relay.Constant][12] /* ty=Tensor[(4, 10, 12), float32] */, dtype="bool") /* ty=Tensor[(4, 10, 12), bool] */;
  %311 = shape_of(%309, dtype="int32") /* ty=Tensor[(3), int32] */;
  %312 = cast(%309, dtype="bool") /* ty=Tensor[(4, 10, 12), bool] */;
  %313 = dyn.reshape(%310, %311, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %314 = less(%312, %313) /* ty=Tensor[(4, 10, 12), bool] */;
  %315 = cast(%314, dtype="bool") /* ty=Tensor[(4, 10, 12), bool] */;
  %316 = shape_of(%309, dtype="int32") /* ty=Tensor[(3), int32] */;
  %317 = cast(%309, dtype="bool") /* ty=Tensor[(4, 10, 12), bool] */;
  %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %319 = cast(meta[relay.Constant][13] /* ty=Tensor[(1620), float64] */, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %320 = cast(meta[relay.Constant][14] /* ty=Tensor[(104), float32] */, dtype="float32") /* ty=Tensor[(104), float32] */;
  %321 = cast(%var_5683, dtype="uint64") /* ty=uint64 */;
  %322 = reshape(%319, newshape=[9, 12, 15]) /* ty=Tensor[(9, 12, 15), float64] */;
  %323 = reshape(%320, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %324 = reshape(%321, newshape=[]) /* ty=uint64 */;
  %325 = @func_1353(%322, %323, %324) /* ty=(Tensor[(9, 12, 15), float32], Tensor[(1, 13, 8), float32], Tensor[(104), float32], Tensor[(16, 5, 2), uint64], uint64, Tensor[(160), uint64]) */;
  %326 = cast(meta[relay.Constant][15] /* ty=Tensor[(576), float64] */, dtype="float64") /* ty=Tensor[(576), float64] */;
  %327 = reshape(%326, newshape=[8, 12, 6]) /* ty=Tensor[(8, 12, 6), float64] */;
  %328 = @func_2439(%327) /* ty=(Tensor[(8, 12, 6), bool], Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float64]) */;
  %329 = cast(meta[relay.Constant][12] /* ty=Tensor[(4, 10, 12), float32] */, dtype="bool") /* ty=Tensor[(4, 10, 12), bool] */;
  %330 = shape_of(%309, dtype="int32") /* ty=Tensor[(3), int32] */;
  %331 = cast(%309, dtype="bool") /* ty=Tensor[(4, 10, 12), bool] */;
  %332 = dyn.reshape(%329, %330, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %333 = less_equal(%317, %318) /* ty=Tensor[(4, 10, 12), bool] */;
  %334 = %325.2;
  %335 = %328.2;
  %336 = greater_equal(%331, %332) /* ty=Tensor[(4, 10, 12), bool] */;
  (%333, %334, meta[relay.Constant][13] /* ty=Tensor[(1620), float64] */, meta[relay.Constant][14] /* ty=Tensor[(104), float32] */, %var_5683, %335, meta[relay.Constant][15] /* ty=Tensor[(576), float64] */, %336)
}

def @func_628(%var_616: Tensor[(12, 14, 12), float64], %var_617: Tensor[(12, 14, 12), float64], %var_622: Tensor[(104), float32]) -> (Tensor[(12, 14, 12), float64], Tensor[(1, 13, 8), float32], Tensor[(104), float32], Tensor[(1, 13, 8), float32]) {
  %337 = cast(%var_617, dtype="float64") /* ty=Tensor[(12, 14, 12), float64] */;
  %338 = shape_of(%var_616, dtype="int32") /* ty=Tensor[(3), int32] */;
  %339 = cast(%var_616, dtype="float64") /* ty=Tensor[(12, 14, 12), float64] */;
  %340 = dyn.reshape(%337, %338, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %341 = cast(%var_622, dtype="float32") /* ty=Tensor[(104), float32] */;
  %342 = reshape(%341, newshape=[1, 13, 8]) /* ty=Tensor[(1, 13, 8), float32] */;
  %343 = @func_594(%342) /* ty=(Tensor[(1, 13, 8), float32],) */;
  %344 = cast(%var_622, dtype="float32") /* ty=Tensor[(104), float32] */;
  %345 = reshape(%344, newshape=[1, 13, 8]) /* ty=Tensor[(1, 13, 8), float32] */;
  %346 = @func_594(%345) /* ty=(Tensor[(1, 13, 8), float32],) */;
  %347 = divide(%339, %340) /* ty=Tensor[(12, 14, 12), float64] */;
  %348 = %343.0;
  %349 = %346.0;
  (%347, %348, %var_622, %349)
}

def @func_3404() -> (Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float32], Tensor[(50), int8], Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), int64], Tensor[(5, 2, 5), bool]) {
  %350 = @func_2123() /* ty=(Tensor[(8, 12, 6), float64],) */;
  %351 = %350.0;
  %352 = cast(%351, dtype="float64") /* ty=Tensor[(8, 12, 6), float64] */;
  %353 = sin(%352) /* ty=Tensor[(8, 12, 6), float64] */;
  %354 = cast(%353, dtype="float32") /* ty=Tensor[(8, 12, 6), float32] */;
  %355 = shape_of(%351, dtype="int32") /* ty=Tensor[(3), int32] */;
  %356 = cast(%351, dtype="float32") /* ty=Tensor[(8, 12, 6), float32] */;
  %357 = dyn.reshape(%354, %355, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %358 = cast(%351, dtype="float64") /* ty=Tensor[(8, 12, 6), float64] */;
  %359 = cast(meta[relay.Constant][16] /* ty=Tensor[(50), int8] */, dtype="int8") /* ty=Tensor[(50), int8] */;
  %360 = reshape(%359, newshape=[5, 2, 5]) /* ty=Tensor[(5, 2, 5), int8] */;
  %361 = @func_3050(%360) /* ty=(Tensor[(5, 2, 5), bool], Tensor[(8, 12, 6), float32]) */;
  %362 = @func_2754() /* ty=(Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float32]) */;
  %363 = cast(%351, dtype="float32") /* ty=Tensor[(8, 12, 6), float32] */;
  %364 = log10(%363) /* ty=Tensor[(8, 12, 6), float32] */;
  %365 = cast(%351, dtype="int64") /* ty=Tensor[(8, 12, 6), int64] */;
  %366 = shape_of(%364, dtype="int32") /* ty=Tensor[(3), int32] */;
  %367 = cast(%364, dtype="int64") /* ty=Tensor[(8, 12, 6), int64] */;
  %368 = dyn.reshape(%365, %366, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %369 = cast(meta[relay.Constant][16] /* ty=Tensor[(50), int8] */, dtype="int8") /* ty=Tensor[(50), int8] */;
  %370 = reshape(%369, newshape=[5, 2, 5]) /* ty=Tensor[(5, 2, 5), int8] */;
  %371 = @func_3050(%370) /* ty=(Tensor[(5, 2, 5), bool], Tensor[(8, 12, 6), float32]) */;
  %372 = floor_mod(%356, %357) /* ty=Tensor[(8, 12, 6), float32] */;
  %373 = atan(%358) /* ty=Tensor[(8, 12, 6), float64] */;
  %374 = %361.1;
  %375 = %362.1;
  %376 = logical_xor(%367, %368) /* ty=Tensor[(8, 12, 6), int64] */;
  %377 = %371.0;
  (%372, %373, %374, meta[relay.Constant][16] /* ty=Tensor[(50), int8] */, %375, %376, %377)
}

def @func_1540(%var_1515: Tensor[(2, 16, 16), float32], %var_1516: Tensor[(2, 16, 16), float32], %var_1522: Tensor[(2, 16, 16), float32], %var_1526: Tensor[(2, 16, 16), float32]) -> (Tensor[(2, 16, 16), float32], Tensor[(2, 16, 16), int16], Tensor[(2, 16, 16), int64], Tensor[(8, 12, 6), float32]) {
  %378 = cast(%var_1516, dtype="float32") /* ty=Tensor[(2, 16, 16), float32] */;
  %379 = shape_of(%var_1515, dtype="int32") /* ty=Tensor[(3), int32] */;
  %380 = cast(%var_1515, dtype="float32") /* ty=Tensor[(2, 16, 16), float32] */;
  %381 = dyn.reshape(%378, %379, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %382 = cast(%var_1522, dtype="int16") /* ty=Tensor[(2, 16, 16), int16] */;
  %383 = shape_of(%var_1515, dtype="int32") /* ty=Tensor[(3), int32] */;
  %384 = cast(%var_1515, dtype="int16") /* ty=Tensor[(2, 16, 16), int16] */;
  %385 = dyn.reshape(%382, %383, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %386 = cast(%var_1526, dtype="int64") /* ty=Tensor[(2, 16, 16), int64] */;
  %387 = shape_of(%var_1522, dtype="int32") /* ty=Tensor[(3), int32] */;
  %388 = cast(%var_1522, dtype="int64") /* ty=Tensor[(2, 16, 16), int64] */;
  %389 = dyn.reshape(%386, %387, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %390 = @func_1482() /* ty=(Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float32]) */;
  %391 = mod(%380, %381) /* ty=Tensor[(2, 16, 16), float32] */;
  %392 = subtract(%384, %385) /* ty=Tensor[(2, 16, 16), int16] */;
  %393 = bitwise_and(%388, %389) /* ty=Tensor[(2, 16, 16), int64] */;
  %394 = %390.1;
  (%391, %392, %393, %394)
}

def @func_3829(%var_3747: Tensor[(160), float64], %var_3773: Tensor[(160), float64]) -> (Tensor[(8, 12, 6), float64], Tensor[(1, 13, 8), float32], Tensor[(104), float32], Tensor[(2, 16, 5), float32], Tensor[(2, 16, 14), float32], Tensor[(160), float32], Tensor[(8, 12, 6), float32]) {
  %395 = @func_3505() /* ty=(Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float64]) */;
  %396 = cast(meta[relay.Constant][17] /* ty=Tensor[(104), float32] */, dtype="float32") /* ty=Tensor[(104), float32] */;
  %397 = reshape(%396, newshape=[1, 13, 8]) /* ty=Tensor[(1, 13, 8), float32] */;
  %398 = @func_594(%397) /* ty=(Tensor[(1, 13, 8), float32],) */;
  %399 = cast(%var_3747, dtype="float64") /* ty=Tensor[(160), float64] */;
  %400 = cast(%var_3747, dtype="float64") /* ty=Tensor[(160), float64] */;
  %401 = reshape(%399, newshape=[2, 16, 5]) /* ty=Tensor[(2, 16, 5), float64] */;
  %402 = reshape(%400, newshape=[2, 16, 5]) /* ty=Tensor[(2, 16, 5), float64] */;
  %403 = @func_2722(%401, %402) /* ty=(Tensor[(2, 16, 5), float64], Tensor[(2, 16, 5), float64]) */;
  %404 = %403.0;
  %405 = cast(%404, dtype="float32") /* ty=Tensor[(2, 16, 5), float32] */;
  %406 = cast(%var_3773, dtype="int16") /* ty=Tensor[(160), int16] */;
  %407 = shape_of(%var_3747, dtype="int32") /* ty=Tensor[(1), int32] */;
  %408 = cast(%var_3747, dtype="int16") /* ty=Tensor[(160), int16] */;
  %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?), int16] */;
  %410 = bitwise_and(%408, %409) /* ty=Tensor[(160), int16] */;
  %411 = cast(%410, dtype="float32") /* ty=Tensor[(160), float32] */;
  %412 = @func_3286() /* ty=(Tensor[(8, 12, 6), float32],) */;
  %413 = %395.0;
  %414 = %398.0;
  %415 = cos(%405) /* ty=Tensor[(2, 16, 5), float32] */;
  %416 = @func_3133() /* ty=Tensor[(2, 16, 14), float32] */;
  %417 = sigmoid(%411) /* ty=Tensor[(160), float32] */;
  %418 = %412.0;
  (%413, %414, meta[relay.Constant][17] /* ty=Tensor[(104), float32] */, %415, %416, %417, %418)
}

def @func_5756() -> Tensor[(8, 12, 6), float64] {
  %419 = @func_4834() /* ty=(Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), bool], Tensor[(8, 12, 6), float64], Tensor[(15, 2, 14), bool], Tensor[(15, 2, 14), bool]) */;
  %419.2
}

def @func_427(%var_422: uint64, %var_423: Tensor[(16, 5, 2), uint64]) -> (Tensor[(16, 5, 2), uint64],) {
  %420 = cast(%var_422, dtype="uint64") /* ty=uint64 */;
  %421 = cast(%var_423, dtype="uint64") /* ty=Tensor[(16, 5, 2), uint64] */;
  %422 = bitwise_and(%420, %421) /* ty=Tensor[(16, 5, 2), uint64] */;
  (%422,)
}

def @func_3679(%var_3670: uint64, %var_3671: Tensor[(1, 160), uint64]) -> (Tensor[(15, 2, 14), float64], Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float64], Tensor[(16, 5, 2), uint64], uint64, Tensor[(1, 160), uint64], Tensor[(15, 2, 14), bool]) {
  %423 = @func_3295() /* ty=(Tensor[(15, 2, 14), bool],) */;
  %424 = %423.0;
  %425 = cast(%424, dtype="float64") /* ty=Tensor[(15, 2, 14), float64] */;
  %426 = @func_3404() /* ty=(Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float32], Tensor[(50), int8], Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), int64], Tensor[(5, 2, 5), bool]) */;
  %427 = @func_2123() /* ty=(Tensor[(8, 12, 6), float64],) */;
  %428 = cast(%var_3670, dtype="uint64") /* ty=uint64 */;
  %429 = cast(%var_3671, dtype="uint64") /* ty=Tensor[(1, 160), uint64] */;
  %430 = reshape(%428, newshape=[]) /* ty=uint64 */;
  %431 = reshape(%429, newshape=[16, 5, 2]) /* ty=Tensor[(16, 5, 2), uint64] */;
  %432 = @func_427(%430, %431) /* ty=(Tensor[(16, 5, 2), uint64],) */;
  %433 = @func_3295() /* ty=(Tensor[(15, 2, 14), bool],) */;
  %434 = erf(%425) /* ty=Tensor[(15, 2, 14), float64] */;
  %435 = %426.2;
  %436 = %427.0;
  %437 = %432.0;
  %438 = %433.0;
  (%434, %435, %436, %437, %var_3670, %var_3671, %438)
}

def @func_2722(%var_2703: Tensor[(2, 16, 5), float64], %var_2704: Tensor[(2, 16, 5), float64]) -> (Tensor[(2, 16, 5), float64], Tensor[(2, 16, 5), float64]) {
  %439 = cast(%var_2704, dtype="float64") /* ty=Tensor[(2, 16, 5), float64] */;
  %440 = shape_of(%var_2703, dtype="int32") /* ty=Tensor[(3), int32] */;
  %441 = cast(%var_2703, dtype="float64") /* ty=Tensor[(2, 16, 5), float64] */;
  %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %443 = cast(%var_2703, dtype="float64") /* ty=Tensor[(2, 16, 5), float64] */;
  %444 = mod(%441, %442) /* ty=Tensor[(2, 16, 5), float64] */;
  %445 = sigmoid(%443) /* ty=Tensor[(2, 16, 5), float64] */;
  (%444, %445)
}

def @func_3133() -> Tensor[(2, 16, 14), float32] {
  %446 = @func_2856() /* ty=(Tensor[(2, 16, 14), float32],) */;
  %446.0
}

def @func_2519() -> Tensor[(8, 12, 6), float32] {
  %447 = @func_2080() /* ty=(Tensor[(8, 12, 6), float32],) */;
  %447.0
}

def @func_4699(%var_4667: Tensor[(2016), float64]) -> (Tensor[(8, 12, 6), float32], Tensor[(2016), float64], Tensor[(15, 2, 14), bool], Tensor[(?, 13, 8), bool]) {
  %448 = @func_4265() /* ty=(Tensor[(8, 12, 6), float32],) */;
  %449 = cast(%var_4667, dtype="float64") /* ty=Tensor[(2016), float64] */;
  %450 = cast(%var_4667, dtype="float64") /* ty=Tensor[(2016), float64] */;
  %451 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 104), float32] */, dtype="float32") /* ty=Tensor[(1, 104), float32] */;
  %452 = reshape(%449, newshape=[12, 14, 12]) /* ty=Tensor[(12, 14, 12), float64] */;
  %453 = reshape(%450, newshape=[12, 14, 12]) /* ty=Tensor[(12, 14, 12), float64] */;
  %454 = reshape(%451, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %455 = @func_628(%452, %453, %454) /* ty=(Tensor[(12, 14, 12), float64], Tensor[(1, 13, 8), float32], Tensor[(104), float32], Tensor[(1, 13, 8), float32]) */;
  %456 = %455.3;
  %457 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 104), float32] */, dtype="bool") /* ty=Tensor[(1, 104), bool] */;
  %458 = shape_of(%456, dtype="int32") /* ty=Tensor[(3), int32] */;
  %459 = cast(%456, dtype="bool") /* ty=Tensor[(1, 13, 8), bool] */;
  %460 = dyn.reshape(%457, %458, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %461 = %448.0;
  %462 = @func_3856() /* ty=Tensor[(15, 2, 14), bool] */;
  %463 = not_equal(%459, %460) /* ty=Tensor[(?, 13, 8), bool] */;
  (%461, %var_4667, %462, %463)
}

def @func_1803(%var_1791: Tensor[(8, 12, 6), float64]) -> (Tensor[(8, 12, 6), float32],) {
  %464 = @func_1482() /* ty=(Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float32]) */;
  %465 = %464.0;
  %466 = cast(%var_1791, dtype="int8") /* ty=Tensor[(8, 12, 6), int8] */;
  %467 = shape_of(%465, dtype="int32") /* ty=Tensor[(3), int32] */;
  %468 = cast(%465, dtype="int8") /* ty=Tensor[(8, 12, 6), int8] */;
  %469 = dyn.reshape(%466, %467, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %470 = bitwise_and(%468, %469) /* ty=Tensor[(8, 12, 6), int8] */;
  %471 = cast(%470, dtype="float64") /* ty=Tensor[(8, 12, 6), float64] */;
  %472 = acos(%471) /* ty=Tensor[(8, 12, 6), float64] */;
  %473 = cast(%470, dtype="float32") /* ty=Tensor[(8, 12, 6), float32] */;
  %474 = shape_of(%472, dtype="int32") /* ty=Tensor[(3), int32] */;
  %475 = cast(%472, dtype="float32") /* ty=Tensor[(8, 12, 6), float32] */;
  %476 = dyn.reshape(%473, %474, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %477 = divide(%475, %476) /* ty=Tensor[(8, 12, 6), float32] */;
  (%477,)
}

def @func_4439(%var_4430: Tensor[(10, 5), int8], %var_4434: Tensor[(5, 2, 5), bool]) -> (Tensor[(8, 12, 6), float64], Tensor[(10, 5), int8], Tensor[(5, 2, 5), uint8]) {
  %478 = cast(%var_4430, dtype="int8") /* ty=Tensor[(10, 5), int8] */;
  %479 = reshape(%478, newshape=[5, 2, 5]) /* ty=Tensor[(5, 2, 5), int8] */;
  %480 = @func_3050(%479) /* ty=(Tensor[(5, 2, 5), bool], Tensor[(8, 12, 6), float32]) */;
  %481 = %480.0;
  %482 = cast(%var_4434, dtype="uint8") /* ty=Tensor[(5, 2, 5), uint8] */;
  %483 = shape_of(%481, dtype="int32") /* ty=Tensor[(3), int32] */;
  %484 = cast(%481, dtype="uint8") /* ty=Tensor[(5, 2, 5), uint8] */;
  %485 = dyn.reshape(%482, %483, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %486 = @func_4166() /* ty=Tensor[(8, 12, 6), float64] */;
  %487 = right_shift(%484, %485) /* ty=Tensor[(5, 2, 5), uint8] */;
  (%486, %var_4430, %487)
}

def @func_4553() -> (Tensor[(8, 12, 6), float64],) {
  %488 = @func_1386() /* ty=Tensor[(8, 12, 6), float64] */;
  (%488,)
}

def @func_3630(%var_3571: Tensor[(8, 12, 6), float32], %var_3610: Tensor[(8, 12, 6), float32]) -> (Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float32]) {
  %489 = @func_1996() /* ty=(Tensor[(8, 12, 6), float32],) */;
  %490 = %489.0;
  %491 = cast(%var_3571, dtype="float64") /* ty=Tensor[(8, 12, 6), float64] */;
  %492 = shape_of(%490, dtype="int32") /* ty=Tensor[(3), int32] */;
  %493 = cast(%490, dtype="float64") /* ty=Tensor[(8, 12, 6), float64] */;
  %494 = dyn.reshape(%491, %492, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %495 = @func_2080() /* ty=(Tensor[(8, 12, 6), float32],) */;
  %496 = cast(%490, dtype="float32") /* ty=Tensor[(8, 12, 6), float32] */;
  %497 = atanh(%496) /* ty=Tensor[(8, 12, 6), float32] */;
  %498 = cast(%var_3610, dtype="float32") /* ty=Tensor[(8, 12, 6), float32] */;
  %499 = shape_of(%497, dtype="int32") /* ty=Tensor[(3), int32] */;
  %500 = cast(%497, dtype="float32") /* ty=Tensor[(8, 12, 6), float32] */;
  %501 = dyn.reshape(%498, %499, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %502 = floor_divide(%493, %494) /* ty=Tensor[(8, 12, 6), float64] */;
  %503 = %495.0;
  %504 = subtract(%500, %501) /* ty=Tensor[(8, 12, 6), float32] */;
  (%502, %503, %504)
}

def @func_5908(%var_5879: Tensor[(12, 6, 6), uint64], %var_5880: Tensor[(12, 6, 6), uint64]) -> (Tensor[(12, 6, 6), uint16], Tensor[(12, 6, 6), uint16], Tensor[(12, 6, 6), float32]) {
  %505 = cast(%var_5880, dtype="uint64") /* ty=Tensor[(12, 6, 6), uint64] */;
  %506 = shape_of(%var_5879, dtype="int32") /* ty=Tensor[(3), int32] */;
  %507 = cast(%var_5879, dtype="uint64") /* ty=Tensor[(12, 6, 6), uint64] */;
  %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %509 = right_shift(%507, %508) /* ty=Tensor[(12, 6, 6), uint64] */;
  %510 = cast(%var_5879, dtype="uint16") /* ty=Tensor[(12, 6, 6), uint16] */;
  %511 = shape_of(%509, dtype="int32") /* ty=Tensor[(3), int32] */;
  %512 = cast(%509, dtype="uint16") /* ty=Tensor[(12, 6, 6), uint16] */;
  %513 = dyn.reshape(%510, %511, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %514 = cast(%var_5879, dtype="uint16") /* ty=Tensor[(12, 6, 6), uint16] */;
  %515 = shape_of(%var_5880, dtype="int32") /* ty=Tensor[(3), int32] */;
  %516 = cast(%var_5880, dtype="uint16") /* ty=Tensor[(12, 6, 6), uint16] */;
  %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %518 = cast(%var_5879, dtype="float32") /* ty=Tensor[(12, 6, 6), float32] */;
  %519 = maximum(%512, %513) /* ty=Tensor[(12, 6, 6), uint16] */;
  %520 = subtract(%516, %517) /* ty=Tensor[(12, 6, 6), uint16] */;
  %521 = acosh(%518) /* ty=Tensor[(12, 6, 6), float32] */;
  (%519, %520, %521)
}

def @func_3229(%var_3224: Tensor[(8, 12, 6), float32]) -> Tensor[(8, 12, 6), bool] {
  %522 = @func_2080() /* ty=(Tensor[(8, 12, 6), float32],) */;
  %523 = %522.0;
  %524 = cast(%523, dtype="float32") /* ty=Tensor[(8, 12, 6), float32] */;
  %525 = exp(%524) /* ty=Tensor[(8, 12, 6), float32] */;
  %526 = cast(%var_3224, dtype="bool") /* ty=Tensor[(8, 12, 6), bool] */;
  %527 = shape_of(%525, dtype="int32") /* ty=Tensor[(3), int32] */;
  %528 = cast(%525, dtype="bool") /* ty=Tensor[(8, 12, 6), bool] */;
  %529 = dyn.reshape(%526, %527, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%528, %529) /* ty=Tensor[(8, 12, 6), bool] */
}

def @func_3455(%var_3438: Tensor[(8, 12, 6), float32]) -> (Tensor[(8, 12, 6), bool],) {
  %530 = @func_2240() /* ty=(Tensor[(8, 12, 6), float32], Tensor[(52, 2), bool]) */;
  %531 = %530.0;
  %532 = cast(%var_3438, dtype="bool") /* ty=Tensor[(8, 12, 6), bool] */;
  %533 = shape_of(%531, dtype="int32") /* ty=Tensor[(3), int32] */;
  %534 = cast(%531, dtype="bool") /* ty=Tensor[(8, 12, 6), bool] */;
  %535 = dyn.reshape(%532, %533, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %536 = greater_equal(%534, %535) /* ty=Tensor[(8, 12, 6), bool] */;
  (%536,)
}

def @func_3934(%var_3865: Tensor[(1620), float64], %var_3866: Tensor[(104), float32], %var_3867: uint64, %var_3892: Tensor[(104), float32]) -> (Tensor[(8, 12, 6), float32], Tensor[(1620), float64], uint64, uint64, Tensor[(160), uint64], Tensor[(2, 16, 14), float32], Tensor[(104), float64], Tensor[(8, 12, 6), float32], Tensor[(52, 2), uint8], Tensor[(8, 12, 6), float64]) {
  %537 = @func_3286() /* ty=(Tensor[(8, 12, 6), float32],) */;
  %538 = cast(%var_3867, dtype="uint64") /* ty=uint64 */;
  %539 = cast(meta[relay.Constant][19] /* ty=Tensor[(160), uint64] */, dtype="uint64") /* ty=Tensor[(160), uint64] */;
  %540 = reshape(%538, newshape=[]) /* ty=uint64 */;
  %541 = reshape(%539, newshape=[160]) /* ty=Tensor[(160), uint64] */;
  %542 = @func_2784(%540, %541) /* ty=(Tensor[(8, 12, 6), float64], Tensor[(16, 5, 2), uint64], uint64, Tensor[(160), uint64]) */;
  %543 = cast(%var_3892, dtype="float64") /* ty=Tensor[(104), float64] */;
  %544 = shape_of(%var_3866, dtype="int32") /* ty=Tensor[(1), int32] */;
  %545 = cast(%var_3866, dtype="float64") /* ty=Tensor[(104), float64] */;
  %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?), float64] */;
  %547 = %537.0;
  %548 = cast(%547, dtype="float32") /* ty=Tensor[(8, 12, 6), float32] */;
  %549 = cast(%547, dtype="float32") /* ty=Tensor[(8, 12, 6), float32] */;
  %550 = reshape(%548, newshape=[8, 12, 6]) /* ty=Tensor[(8, 12, 6), float32] */;
  %551 = reshape(%549, newshape=[8, 12, 6]) /* ty=Tensor[(8, 12, 6), float32] */;
  %552 = @func_3630(%550, %551) /* ty=(Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float32]) */;
  %553 = @func_2240() /* ty=(Tensor[(8, 12, 6), float32], Tensor[(52, 2), bool]) */;
  %554 = %553.1;
  %555 = cast(%var_3865, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %556 = cast(%var_3866, dtype="float32") /* ty=Tensor[(104), float32] */;
  %557 = cast(%var_3867, dtype="uint64") /* ty=uint64 */;
  %558 = reshape(%555, newshape=[1620]) /* ty=Tensor[(1620), float64] */;
  %559 = reshape(%556, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %560 = reshape(%557, newshape=[]) /* ty=uint64 */;
  %561 = @func_2497(%558, %559, %560) /* ty=(Tensor[(8, 12, 6), float64], Tensor[(1, 13, 8), float32], Tensor[(1620), float64], Tensor[(104), float32], uint64) */;
  %562 = %561.3;
  %563 = cast(%562, dtype="uint8") /* ty=Tensor[(104), uint8] */;
  %564 = shape_of(%554, dtype="int32") /* ty=Tensor[(2), int32] */;
  %565 = cast(%554, dtype="uint8") /* ty=Tensor[(52, 2), uint8] */;
  %566 = dyn.reshape(%563, %564, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %567 = cast(%547, dtype="float64") /* ty=Tensor[(8, 12, 6), float64] */;
  %568 = reshape(%567, newshape=[8, 12, 6]) /* ty=Tensor[(8, 12, 6), float64] */;
  %569 = @func_2439(%568) /* ty=(Tensor[(8, 12, 6), bool], Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float64]) */;
  %570 = %542.2;
  %571 = @func_3133() /* ty=Tensor[(2, 16, 14), float32] */;
  %572 = mod(%545, %546) /* ty=Tensor[(104), float64] */;
  %573 = %552.1;
  %574 = add(%565, %566) /* ty=Tensor[(52, 2), uint8] */;
  %575 = %569.2;
  (%547, %var_3865, %var_3867, %570, meta[relay.Constant][19] /* ty=Tensor[(160), uint64] */, %571, %572, %573, %574, %575)
}

def @func_4413() -> (Tensor[(8, 12, 6), float32],) {
  %576 = @func_4265() /* ty=(Tensor[(8, 12, 6), float32],) */;
  %577 = %576.0;
  (%577,)
}

def @func_4893(%var_4860: Tensor[(14, 10, 3), float64], %var_4868: Tensor[(14, 10, 3), float64]) -> (Tensor[(8, 12, 6), float32], Tensor[(14, 10, 3), bool], Tensor[(14, 10, 3), bool], Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float64]) {
  %578 = @func_1996() /* ty=(Tensor[(8, 12, 6), float32],) */;
  %579 = @func_4401() /* ty=Tensor[(14, 10, 3), float64] */;
  %580 = cast(%var_4860, dtype="bool") /* ty=Tensor[(14, 10, 3), bool] */;
  %581 = shape_of(%579, dtype="int32") /* ty=Tensor[(3), int32] */;
  %582 = cast(%579, dtype="bool") /* ty=Tensor[(14, 10, 3), bool] */;
  %583 = dyn.reshape(%580, %581, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %584 = cast(%var_4868, dtype="bool") /* ty=Tensor[(14, 10, 3), bool] */;
  %585 = shape_of(%var_4860, dtype="int32") /* ty=Tensor[(3), int32] */;
  %586 = cast(%var_4860, dtype="bool") /* ty=Tensor[(14, 10, 3), bool] */;
  %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %588 = @func_2123() /* ty=(Tensor[(8, 12, 6), float64],) */;
  %589 = @func_2123() /* ty=(Tensor[(8, 12, 6), float64],) */;
  %590 = %578.0;
  %591 = logical_and(%582, %583) /* ty=Tensor[(14, 10, 3), bool] */;
  %592 = greater_equal(%586, %587) /* ty=Tensor[(14, 10, 3), bool] */;
  %593 = %588.0;
  %594 = %589.0;
  (%590, %591, %592, %593, %594)
}

def @func_3563() -> Tensor[(8, 12, 6), float64] {
  @func_1386() /* ty=Tensor[(8, 12, 6), float64] */
}

def @func_2439(%var_2409: Tensor[(8, 12, 6), float64]) -> (Tensor[(8, 12, 6), bool], Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float64]) {
  %595 = @func_1482() /* ty=(Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float32]) */;
  %596 = %595.0;
  %597 = cast(%var_2409, dtype="bool") /* ty=Tensor[(8, 12, 6), bool] */;
  %598 = shape_of(%596, dtype="int32") /* ty=Tensor[(3), int32] */;
  %599 = cast(%596, dtype="bool") /* ty=Tensor[(8, 12, 6), bool] */;
  %600 = dyn.reshape(%597, %598, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %601 = @func_1996() /* ty=(Tensor[(8, 12, 6), float32],) */;
  %602 = cast(%var_2409, dtype="float64") /* ty=Tensor[(8, 12, 6), float64] */;
  %603 = logical_and(%599, %600) /* ty=Tensor[(8, 12, 6), bool] */;
  %604 = %601.0;
  %605 = cos(%602) /* ty=Tensor[(8, 12, 6), float64] */;
  (%603, %604, %605)
}

def @func_4606() -> (Tensor[(16, 4, 13), float64], Tensor[(15, 2, 14), bool], Tensor[(8, 12, 6), float32]) {
  %606 = cast(meta[relay.Constant][20] /* ty=Tensor[(16, 4, 13), float64] */, dtype="float64") /* ty=Tensor[(16, 4, 13), float64] */;
  %607 = @func_2595() /* ty=(Tensor[(8, 12, 6), float64], Tensor[(15, 2, 14), bool], Tensor[(420), uint8]) */;
  %608 = @func_3404() /* ty=(Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float32], Tensor[(50), int8], Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), int64], Tensor[(5, 2, 5), bool]) */;
  %609 = sin(%606) /* ty=Tensor[(16, 4, 13), float64] */;
  %610 = %607.1;
  %611 = %608.2;
  (%609, %610, %611)
}

def @func_4956() -> (Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float32]) {
  %612 = @func_3989() /* ty=(Tensor[(8, 12, 6), float32],) */;
  %613 = @func_4413() /* ty=(Tensor[(8, 12, 6), float32],) */;
  %614 = @func_4265() /* ty=(Tensor[(8, 12, 6), float32],) */;
  %615 = %612.0;
  %616 = %613.0;
  %617 = %614.0;
  (%615, %616, %617)
}

def @func_3989() -> (Tensor[(8, 12, 6), float32],) {
  %618 = @func_2519() /* ty=Tensor[(8, 12, 6), float32] */;
  (%618,)
}

def @func_4288(%var_4282: Tensor[(2, 9, 9), float64], %var_4283: Tensor[(2, 9, 9), float64]) -> (Tensor[(2, 9, 9), float64],) {
  %619 = cast(%var_4283, dtype="float64") /* ty=Tensor[(2, 9, 9), float64] */;
  %620 = shape_of(%var_4282, dtype="int32") /* ty=Tensor[(3), int32] */;
  %621 = cast(%var_4282, dtype="float64") /* ty=Tensor[(2, 9, 9), float64] */;
  %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %623 = floor_mod(%621, %622) /* ty=Tensor[(2, 9, 9), float64] */;
  (%623,)
}

def @func_838(%var_766: Tensor[(12, 5, 15), float64], %var_797: Tensor[(14, 144), float64], %var_798: Tensor[(104), float32], %var_808: uint64, %var_809: Tensor[(160), uint64]) -> (Tensor[(12, 5, 15), float64], Tensor[(1, 13, 8), float32], Tensor[(14, 144), float64], Tensor[(104), float32], Tensor[(1, 13, 8), float32], Tensor[(16, 5, 2), uint64], uint64, Tensor[(160), uint64], Tensor[(11, 7, 3), int16], Tensor[(231), int16], Tensor[(104), float32], Tensor[(1, 13, 8), float32]) {
  %624 = cast(%var_766, dtype="float64") /* ty=Tensor[(12, 5, 15), float64] */;
  %625 = cast(%var_797, dtype="float64") /* ty=Tensor[(14, 144), float64] */;
  %626 = cast(%var_797, dtype="float64") /* ty=Tensor[(14, 144), float64] */;
  %627 = cast(%var_798, dtype="float32") /* ty=Tensor[(104), float32] */;
  %628 = reshape(%625, newshape=[12, 14, 12]) /* ty=Tensor[(12, 14, 12), float64] */;
  %629 = reshape(%626, newshape=[12, 14, 12]) /* ty=Tensor[(12, 14, 12), float64] */;
  %630 = reshape(%627, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %631 = @func_628(%628, %629, %630) /* ty=(Tensor[(12, 14, 12), float64], Tensor[(1, 13, 8), float32], Tensor[(104), float32], Tensor[(1, 13, 8), float32]) */;
  %632 = cast(%var_798, dtype="float32") /* ty=Tensor[(104), float32] */;
  %633 = reshape(%632, newshape=[1, 13, 8]) /* ty=Tensor[(1, 13, 8), float32] */;
  %634 = @func_594(%633) /* ty=(Tensor[(1, 13, 8), float32],) */;
  %635 = cast(%var_808, dtype="uint64") /* ty=uint64 */;
  %636 = cast(%var_809, dtype="uint64") /* ty=Tensor[(160), uint64] */;
  %637 = reshape(%635, newshape=[]) /* ty=uint64 */;
  %638 = reshape(%636, newshape=[16, 5, 2]) /* ty=Tensor[(16, 5, 2), uint64] */;
  %639 = @func_427(%637, %638) /* ty=(Tensor[(16, 5, 2), uint64],) */;
  %640 = cast(meta[relay.Constant][21] /* ty=Tensor[(231), int16] */, dtype="int16") /* ty=Tensor[(231), int16] */;
  %641 = cast(meta[relay.Constant][21] /* ty=Tensor[(231), int16] */, dtype="int16") /* ty=Tensor[(231), int16] */;
  %642 = reshape(%640, newshape=[11, 7, 3]) /* ty=Tensor[(11, 7, 3), int16] */;
  %643 = reshape(%641, newshape=[11, 7, 3]) /* ty=Tensor[(11, 7, 3), int16] */;
  %644 = @func_295(%642, %643) /* ty=(Tensor[(11, 7, 3), int16],) */;
  %645 = cast(%var_797, dtype="float64") /* ty=Tensor[(14, 144), float64] */;
  %646 = cast(%var_797, dtype="float64") /* ty=Tensor[(14, 144), float64] */;
  %647 = cast(%var_798, dtype="float32") /* ty=Tensor[(104), float32] */;
  %648 = reshape(%645, newshape=[12, 14, 12]) /* ty=Tensor[(12, 14, 12), float64] */;
  %649 = reshape(%646, newshape=[12, 14, 12]) /* ty=Tensor[(12, 14, 12), float64] */;
  %650 = reshape(%647, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %651 = @func_628(%648, %649, %650) /* ty=(Tensor[(12, 14, 12), float64], Tensor[(1, 13, 8), float32], Tensor[(104), float32], Tensor[(1, 13, 8), float32]) */;
  %652 = cast(%var_798, dtype="float32") /* ty=Tensor[(104), float32] */;
  %653 = reshape(%652, newshape=[1, 13, 8]) /* ty=Tensor[(1, 13, 8), float32] */;
  %654 = @func_594(%653) /* ty=(Tensor[(1, 13, 8), float32],) */;
  %655 = sigmoid(%624) /* ty=Tensor[(12, 5, 15), float64] */;
  %656 = %631.3;
  %657 = %634.0;
  %658 = %639.0;
  %659 = %644.0;
  %660 = %651.2;
  %661 = %654.0;
  (%655, %656, %var_797, %var_798, %657, %658, %var_808, %var_809, %659, meta[relay.Constant][21] /* ty=Tensor[(231), int16] */, %660, %661)
}

def @func_3505() -> (Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float64]) {
  %662 = @func_3404() /* ty=(Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float32], Tensor[(50), int8], Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), int64], Tensor[(5, 2, 5), bool]) */;
  %663 = %662.1;
  %664 = cast(%663, dtype="float32") /* ty=Tensor[(8, 12, 6), float32] */;
  %665 = rsqrt(%664) /* ty=Tensor[(8, 12, 6), float32] */;
  %666 = cast(%665, dtype="float64") /* ty=Tensor[(8, 12, 6), float64] */;
  %667 = shape_of(%663, dtype="int32") /* ty=Tensor[(3), int32] */;
  %668 = cast(%663, dtype="float64") /* ty=Tensor[(8, 12, 6), float64] */;
  %669 = dyn.reshape(%666, %667, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %670 = @func_2595() /* ty=(Tensor[(8, 12, 6), float64], Tensor[(15, 2, 14), bool], Tensor[(420), uint8]) */;
  %671 = @func_2123() /* ty=(Tensor[(8, 12, 6), float64],) */;
  %672 = mod(%668, %669) /* ty=Tensor[(8, 12, 6), float64] */;
  %673 = %670.0;
  %674 = %671.0;
  (%672, %673, %674)
}

def @func_3856() -> Tensor[(15, 2, 14), bool] {
  %675 = @func_2595() /* ty=(Tensor[(8, 12, 6), float64], Tensor[(15, 2, 14), bool], Tensor[(420), uint8]) */;
  %675.1
}

def @func_326(%var_319: Tensor[(15, 2, 14), uint8], %var_320: Tensor[(15, 2, 14), uint8]) -> (Tensor[(15, 2, 14), bool],) {
  %676 = cast(%var_320, dtype="bool") /* ty=Tensor[(15, 2, 14), bool] */;
  %677 = shape_of(%var_319, dtype="int32") /* ty=Tensor[(3), int32] */;
  %678 = cast(%var_319, dtype="bool") /* ty=Tensor[(15, 2, 14), bool] */;
  %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %680 = not_equal(%678, %679) /* ty=Tensor[(15, 2, 14), bool] */;
  (%680,)
}

def @func_2754() -> (Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float32]) {
  %681 = @func_2080() /* ty=(Tensor[(8, 12, 6), float32],) */;
  %682 = @func_1386() /* ty=Tensor[(8, 12, 6), float64] */;
  %683 = %681.0;
  (%682, %683)
}

def @func_2856() -> (Tensor[(2, 16, 14), float32],) {
  %684 = cast(meta[relay.Constant][23] /* ty=Tensor[(2, 16, 14), float32] */, dtype="float32") /* ty=Tensor[(2, 16, 14), float32] */;
  %685 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(2, 16, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %686 = cast(meta[relay.Constant][22] /* ty=Tensor[(2, 16, 14), float32] */, dtype="float32") /* ty=Tensor[(2, 16, 14), float32] */;
  %687 = dyn.reshape(%684, %685, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %688 = floor_divide(%686, %687) /* ty=Tensor[(2, 16, 14), float32] */;
  (%688,)
}

def @func_2954(%var_2916: uint64, %var_2917: Tensor[(160), uint64]) -> (Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float64], Tensor[(160), uint64], Tensor[(16, 5, 2), bool]) {
  %689 = cast(%var_2916, dtype="uint64") /* ty=uint64 */;
  %690 = cast(%var_2917, dtype="uint64") /* ty=Tensor[(160), uint64] */;
  %691 = reshape(%689, newshape=[]) /* ty=uint64 */;
  %692 = reshape(%690, newshape=[160]) /* ty=Tensor[(160), uint64] */;
  %693 = @func_2784(%691, %692) /* ty=(Tensor[(8, 12, 6), float64], Tensor[(16, 5, 2), uint64], uint64, Tensor[(160), uint64]) */;
  %694 = cast(%var_2916, dtype="uint64") /* ty=uint64 */;
  %695 = cast(%var_2917, dtype="uint64") /* ty=Tensor[(160), uint64] */;
  %696 = reshape(%694, newshape=[]) /* ty=uint64 */;
  %697 = reshape(%695, newshape=[16, 5, 2]) /* ty=Tensor[(16, 5, 2), uint64] */;
  %698 = @func_427(%696, %697) /* ty=(Tensor[(16, 5, 2), uint64],) */;
  %699 = %698.0;
  %700 = cast(%699, dtype="bool") /* ty=Tensor[(16, 5, 2), bool] */;
  %701 = cast(%var_2916, dtype="bool") /* ty=bool */;
  %702 = @func_1386() /* ty=Tensor[(8, 12, 6), float64] */;
  %703 = %693.0;
  %704 = greater(%700, %701) /* ty=Tensor[(16, 5, 2), bool] */;
  (%702, %703, %var_2917, %704)
}

def @func_2240() -> (Tensor[(8, 12, 6), float32], Tensor[(52, 2), bool]) {
  %705 = @func_1996() /* ty=(Tensor[(8, 12, 6), float32],) */;
  %706 = %705.0;
  %707 = cast(%706, dtype="float32") /* ty=Tensor[(8, 12, 6), float32] */;
  %708 = reshape(%707, newshape=[8, 12, 6]) /* ty=Tensor[(8, 12, 6), float32] */;
  %709 = @func_2062(%708) /* ty=(Tensor[(8, 12, 6), float32], Tensor[(6, 270), float64], uint64, Tensor[(52, 2), bool]) */;
  %710 = %709.3;
  (%706, %710)
}

def @func_1187(%var_1133: Tensor[(6, 8, 2), float64], %var_1161: Tensor[(104), float32]) -> (Tensor[(6, 8, 2), float64], Tensor[(12, 14, 12), float64], Tensor[(2016), float64], Tensor[(104), float32], Tensor[(6, 8, 2), float64]) {
  %711 = cast(%var_1133, dtype="float64") /* ty=Tensor[(6, 8, 2), float64] */;
  %712 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(6, 8, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %713 = cast(meta[relay.Constant][24] /* ty=Tensor[(6, 8, 2), float64] */, dtype="float64") /* ty=Tensor[(6, 8, 2), float64] */;
  %714 = dyn.reshape(%711, %712, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %715 = cast(meta[relay.Constant][25] /* ty=Tensor[(2016), float64] */, dtype="float64") /* ty=Tensor[(2016), float64] */;
  %716 = cast(meta[relay.Constant][25] /* ty=Tensor[(2016), float64] */, dtype="float64") /* ty=Tensor[(2016), float64] */;
  %717 = cast(%var_1161, dtype="float32") /* ty=Tensor[(104), float32] */;
  %718 = reshape(%715, newshape=[12, 14, 12]) /* ty=Tensor[(12, 14, 12), float64] */;
  %719 = reshape(%716, newshape=[12, 14, 12]) /* ty=Tensor[(12, 14, 12), float64] */;
  %720 = reshape(%717, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %721 = @func_628(%718, %719, %720) /* ty=(Tensor[(12, 14, 12), float64], Tensor[(1, 13, 8), float32], Tensor[(104), float32], Tensor[(1, 13, 8), float32]) */;
  %722 = cast(meta[relay.Constant][24] /* ty=Tensor[(6, 8, 2), float64] */, dtype="float32") /* ty=Tensor[(6, 8, 2), float32] */;
  %723 = sigmoid(%722) /* ty=Tensor[(6, 8, 2), float32] */;
  %724 = cast(%723, dtype="float64") /* ty=Tensor[(6, 8, 2), float64] */;
  %725 = log(%724) /* ty=Tensor[(6, 8, 2), float64] */;
  %726 = cast(%725, dtype="float64") /* ty=Tensor[(6, 8, 2), float64] */;
  %727 = power(%713, %714) /* ty=Tensor[(6, 8, 2), float64] */;
  %728 = %721.0;
  %729 = atan(%726) /* ty=Tensor[(6, 8, 2), float64] */;
  (%727, %728, meta[relay.Constant][25] /* ty=Tensor[(2016), float64] */, %var_1161, %729)
}

def @func_2062(%var_2042: Tensor[(8, 12, 6), float32]) -> (Tensor[(8, 12, 6), float32], Tensor[(6, 270), float64], uint64, Tensor[(52, 2), bool]) {
  %730 = @func_1996() /* ty=(Tensor[(8, 12, 6), float32],) */;
  %731 = %730.0;
  %732 = cast(%731, dtype="float32") /* ty=Tensor[(8, 12, 6), float32] */;
  %733 = log2(%732) /* ty=Tensor[(8, 12, 6), float32] */;
  %734 = cast(%var_2042, dtype="float32") /* ty=Tensor[(8, 12, 6), float32] */;
  %735 = shape_of(%733, dtype="int32") /* ty=Tensor[(3), int32] */;
  %736 = cast(%733, dtype="float32") /* ty=Tensor[(8, 12, 6), float32] */;
  %737 = dyn.reshape(%734, %735, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %738 = cast(meta[relay.Constant][26] /* ty=Tensor[(6, 270), float64] */, dtype="float64") /* ty=Tensor[(6, 270), float64] */;
  %739 = cast(meta[relay.Constant][28] /* ty=Tensor[(52, 2), float32] */, dtype="float32") /* ty=Tensor[(52, 2), float32] */;
  %740 = cast(meta[relay.Constant][27] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %741 = reshape(%738, newshape=[9, 12, 15]) /* ty=Tensor[(9, 12, 15), float64] */;
  %742 = reshape(%739, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %743 = reshape(%740, newshape=[]) /* ty=uint64 */;
  %744 = @func_1353(%741, %742, %743) /* ty=(Tensor[(9, 12, 15), float32], Tensor[(1, 13, 8), float32], Tensor[(104), float32], Tensor[(16, 5, 2), uint64], uint64, Tensor[(160), uint64]) */;
  %745 = %744.4;
  %746 = cast(meta[relay.Constant][28] /* ty=Tensor[(52, 2), float32] */, dtype="bool") /* ty=Tensor[(52, 2), bool] */;
  %747 = cast(%745, dtype="bool") /* ty=bool */;
  %748 = add(%736, %737) /* ty=Tensor[(8, 12, 6), float32] */;
  %749 = less(%746, %747) /* ty=Tensor[(52, 2), bool] */;
  (%748, meta[relay.Constant][26] /* ty=Tensor[(6, 270), float64] */, meta[relay.Constant][27] /* ty=uint64 */, %749)
}

def @func_1680(%var_1637: Tensor[(1620), float64], %var_1639: uint64) -> (Tensor[(8, 12, 6), float64], Tensor[(2, 16, 16), int16], Tensor[(2, 256), float32], Tensor[(160), uint64], Tensor[(26, 4), float32], uint64, Tensor[(15, 2, 14), bool], Tensor[(420), uint8], Tensor[(1620), uint32]) {
  %750 = @func_1482() /* ty=(Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float32]) */;
  %751 = cast(meta[relay.Constant][29] /* ty=Tensor[(2, 256), float32] */, dtype="float32") /* ty=Tensor[(2, 256), float32] */;
  %752 = cast(meta[relay.Constant][29] /* ty=Tensor[(2, 256), float32] */, dtype="float32") /* ty=Tensor[(2, 256), float32] */;
  %753 = cast(meta[relay.Constant][29] /* ty=Tensor[(2, 256), float32] */, dtype="float32") /* ty=Tensor[(2, 256), float32] */;
  %754 = cast(meta[relay.Constant][29] /* ty=Tensor[(2, 256), float32] */, dtype="float32") /* ty=Tensor[(2, 256), float32] */;
  %755 = reshape(%751, newshape=[2, 16, 16]) /* ty=Tensor[(2, 16, 16), float32] */;
  %756 = reshape(%752, newshape=[2, 16, 16]) /* ty=Tensor[(2, 16, 16), float32] */;
  %757 = reshape(%753, newshape=[2, 16, 16]) /* ty=Tensor[(2, 16, 16), float32] */;
  %758 = reshape(%754, newshape=[2, 16, 16]) /* ty=Tensor[(2, 16, 16), float32] */;
  %759 = @func_1540(%755, %756, %757, %758) /* ty=(Tensor[(2, 16, 16), float32], Tensor[(2, 16, 16), int16], Tensor[(2, 16, 16), int64], Tensor[(8, 12, 6), float32]) */;
  %760 = cast(%var_1637, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %761 = cast(meta[relay.Constant][30] /* ty=Tensor[(26, 4), float32] */, dtype="float32") /* ty=Tensor[(26, 4), float32] */;
  %762 = cast(%var_1639, dtype="uint64") /* ty=uint64 */;
  %763 = reshape(%760, newshape=[9, 12, 15]) /* ty=Tensor[(9, 12, 15), float64] */;
  %764 = reshape(%761, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %765 = reshape(%762, newshape=[]) /* ty=uint64 */;
  %766 = @func_1353(%763, %764, %765) /* ty=(Tensor[(9, 12, 15), float32], Tensor[(1, 13, 8), float32], Tensor[(104), float32], Tensor[(16, 5, 2), uint64], uint64, Tensor[(160), uint64]) */;
  %767 = cast(meta[relay.Constant][31] /* ty=Tensor[(420), uint8] */, dtype="uint8") /* ty=Tensor[(420), uint8] */;
  %768 = cast(meta[relay.Constant][31] /* ty=Tensor[(420), uint8] */, dtype="uint8") /* ty=Tensor[(420), uint8] */;
  %769 = reshape(%767, newshape=[15, 2, 14]) /* ty=Tensor[(15, 2, 14), uint8] */;
  %770 = reshape(%768, newshape=[15, 2, 14]) /* ty=Tensor[(15, 2, 14), uint8] */;
  %771 = @func_326(%769, %770) /* ty=(Tensor[(15, 2, 14), bool],) */;
  %772 = cast(%var_1637, dtype="float32") /* ty=Tensor[(1620), float32] */;
  %773 = rsqrt(%772) /* ty=Tensor[(1620), float32] */;
  %774 = cast(%773, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %775 = erf(%774) /* ty=Tensor[(1620), float64] */;
  %776 = cast(%var_1637, dtype="bool") /* ty=Tensor[(1620), bool] */;
  %777 = shape_of(%775, dtype="int32") /* ty=Tensor[(1), int32] */;
  %778 = cast(%775, dtype="bool") /* ty=Tensor[(1620), bool] */;
  %779 = dyn.reshape(%776, %777, newshape=[]) /* ty=Tensor[(?), bool] */;
  %780 = less_equal(%778, %779) /* ty=Tensor[(1620), bool] */;
  %781 = cast(%var_1637, dtype="bool") /* ty=Tensor[(1620), bool] */;
  %782 = shape_of(%780, dtype="int32") /* ty=Tensor[(1), int32] */;
  %783 = cast(%780, dtype="bool") /* ty=Tensor[(1620), bool] */;
  %784 = dyn.reshape(%781, %782, newshape=[]) /* ty=Tensor[(?), bool] */;
  %785 = greater(%783, %784) /* ty=Tensor[(1620), bool] */;
  %786 = cast(%785, dtype="uint32") /* ty=Tensor[(1620), uint32] */;
  %787 = shape_of(%780, dtype="int32") /* ty=Tensor[(1), int32] */;
  %788 = cast(%780, dtype="uint32") /* ty=Tensor[(1620), uint32] */;
  %789 = dyn.reshape(%786, %787, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %790 = %750.0;
  %791 = %759.1;
  %792 = %766.5;
  %793 = %771.0;
  %794 = add(%788, %789) /* ty=Tensor[(1620), uint32] */;
  (%790, %791, meta[relay.Constant][29] /* ty=Tensor[(2, 256), float32] */, %792, meta[relay.Constant][30] /* ty=Tensor[(26, 4), float32] */, %var_1639, %793, meta[relay.Constant][31] /* ty=Tensor[(420), uint8] */, %794)
}

def @func_2497(%var_2479: Tensor[(1620), float64], %var_2480: Tensor[(104), float32], %var_2481: uint64) -> (Tensor[(8, 12, 6), float64], Tensor[(1, 13, 8), float32], Tensor[(1620), float64], Tensor[(104), float32], uint64) {
  %795 = @func_1482() /* ty=(Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float32]) */;
  %796 = %795.0;
  %797 = cast(%796, dtype="float64") /* ty=Tensor[(8, 12, 6), float64] */;
  %798 = cast(%var_2479, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %799 = cast(%var_2480, dtype="float32") /* ty=Tensor[(104), float32] */;
  %800 = cast(%var_2481, dtype="uint64") /* ty=uint64 */;
  %801 = reshape(%798, newshape=[9, 12, 15]) /* ty=Tensor[(9, 12, 15), float64] */;
  %802 = reshape(%799, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %803 = reshape(%800, newshape=[]) /* ty=uint64 */;
  %804 = @func_1353(%801, %802, %803) /* ty=(Tensor[(9, 12, 15), float32], Tensor[(1, 13, 8), float32], Tensor[(104), float32], Tensor[(16, 5, 2), uint64], uint64, Tensor[(160), uint64]) */;
  %805 = sinh(%797) /* ty=Tensor[(8, 12, 6), float64] */;
  %806 = %804.1;
  (%805, %806, %var_2479, %var_2480, %var_2481)
}

def @func_4401() -> Tensor[(14, 10, 3), float64] {
  %807 = cast(meta[relay.Constant][32] /* ty=Tensor[(14, 10, 3), float64] */, dtype="float64") /* ty=Tensor[(14, 10, 3), float64] */;
  asinh(%807) /* ty=Tensor[(14, 10, 3), float64] */
}

def @func_2994() -> Tensor[(8, 12, 6), float32] {
  %808 = @func_2080() /* ty=(Tensor[(8, 12, 6), float32],) */;
  %808.0
}

def @func_4071() -> Tensor[(8, 12, 6), float32] {
  %809 = @func_3989() /* ty=(Tensor[(8, 12, 6), float32],) */;
  %809.0
}

def @func_1996() -> (Tensor[(8, 12, 6), float32],) {
  %810 = @func_1482() /* ty=(Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float32]) */;
  %811 = %810.1;
  (%811,)
}

def @func_1353(%var_1328: Tensor[(9, 12, 15), float64], %var_1346: Tensor[(104), float32], %var_1349: uint64) -> (Tensor[(9, 12, 15), float32], Tensor[(1, 13, 8), float32], Tensor[(104), float32], Tensor[(16, 5, 2), uint64], uint64, Tensor[(160), uint64]) {
  %812 = cast(%var_1328, dtype="float64") /* ty=Tensor[(9, 12, 15), float64] */;
  %813 = asinh(%812) /* ty=Tensor[(9, 12, 15), float64] */;
  %814 = cast(%813, dtype="float32") /* ty=Tensor[(9, 12, 15), float32] */;
  %815 = cast(%var_1346, dtype="float32") /* ty=Tensor[(104), float32] */;
  %816 = reshape(%815, newshape=[1, 13, 8]) /* ty=Tensor[(1, 13, 8), float32] */;
  %817 = @func_594(%816) /* ty=(Tensor[(1, 13, 8), float32],) */;
  %818 = cast(%var_1349, dtype="uint64") /* ty=uint64 */;
  %819 = cast(meta[relay.Constant][33] /* ty=Tensor[(160), uint64] */, dtype="uint64") /* ty=Tensor[(160), uint64] */;
  %820 = reshape(%818, newshape=[]) /* ty=uint64 */;
  %821 = reshape(%819, newshape=[16, 5, 2]) /* ty=Tensor[(16, 5, 2), uint64] */;
  %822 = @func_427(%820, %821) /* ty=(Tensor[(16, 5, 2), uint64],) */;
  %823 = exp(%814) /* ty=Tensor[(9, 12, 15), float32] */;
  %824 = %817.0;
  %825 = %822.0;
  (%823, %824, %var_1346, %825, %var_1349, meta[relay.Constant][33] /* ty=Tensor[(160), uint64] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4555() -> (Tensor[(8, 12, 6), float64],) {
  @func_4553() /* ty=(Tensor[(8, 12, 6), float64],) */
}

def @func_3052(%var_3051: Tensor[(5, 2, 5), int8]) -> (Tensor[(5, 2, 5), bool], Tensor[(8, 12, 6), float32]) {
  %7 = fn (%var_3012: Tensor[(5, 2, 5), int8]) -> (Tensor[(5, 2, 5), bool], Tensor[(8, 12, 6), float32]) {
    %0 = cast(%var_3012, dtype="bool") /* ty=Tensor[(5, 2, 5), bool] */;
    %1 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(5, 2, 5), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(5, 2, 5), int8] */, dtype="bool") /* ty=Tensor[(5, 2, 5), bool] */;
    %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %4 = @func_1996() /* ty=(Tensor[(8, 12, 6), float32],) */;
    %5 = greater_equal(%2, %3) /* ty=Tensor[(5, 2, 5), bool] */;
    %6 = %4.0;
    (%5, %6)
  };
  %7(%var_3051) /* ty=(Tensor[(5, 2, 5), bool], Tensor[(8, 12, 6), float32]) */
}

def @func_4526() -> (Tensor[(8, 12, 6), float64], Tensor[(15, 2, 14), bool], Tensor[(8, 12, 6), float32]) {
  %15 = fn () -> (Tensor[(8, 12, 6), float64], Tensor[(15, 2, 14), bool], Tensor[(8, 12, 6), float32]) {
    %8 = @func_3404() /* ty=(Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float32], Tensor[(50), int8], Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), int64], Tensor[(5, 2, 5), bool]) */;
    %9 = %8.5;
    %10 = cast(%9, dtype="float64") /* ty=Tensor[(8, 12, 6), float64] */;
    %11 = @func_1996() /* ty=(Tensor[(8, 12, 6), float32],) */;
    %12 = log(%10) /* ty=Tensor[(8, 12, 6), float64] */;
    %13 = @func_3856() /* ty=Tensor[(15, 2, 14), bool] */;
    %14 = %11.0;
    (%12, %13, %14)
  };
  %15() /* ty=(Tensor[(8, 12, 6), float64], Tensor[(15, 2, 14), bool], Tensor[(8, 12, 6), float32]) */
}

def @func_3682(%var_3680: uint64, %var_3681: Tensor[(1, 160), uint64]) -> (Tensor[(15, 2, 14), float64], Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float64], Tensor[(16, 5, 2), uint64], uint64, Tensor[(1, 160), uint64], Tensor[(15, 2, 14), bool]) {
  %32 = fn (%var_3670: uint64, %var_3671: Tensor[(1, 160), uint64]) -> (Tensor[(15, 2, 14), float64], Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float64], Tensor[(16, 5, 2), uint64], uint64, Tensor[(1, 160), uint64], Tensor[(15, 2, 14), bool]) {
    %16 = @func_3295() /* ty=(Tensor[(15, 2, 14), bool],) */;
    %17 = %16.0;
    %18 = cast(%17, dtype="float64") /* ty=Tensor[(15, 2, 14), float64] */;
    %19 = @func_3404() /* ty=(Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float32], Tensor[(50), int8], Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), int64], Tensor[(5, 2, 5), bool]) */;
    %20 = @func_2123() /* ty=(Tensor[(8, 12, 6), float64],) */;
    %21 = cast(%var_3670, dtype="uint64") /* ty=uint64 */;
    %22 = cast(%var_3671, dtype="uint64") /* ty=Tensor[(1, 160), uint64] */;
    %23 = reshape(%21, newshape=[]) /* ty=uint64 */;
    %24 = reshape(%22, newshape=[16, 5, 2]) /* ty=Tensor[(16, 5, 2), uint64] */;
    %25 = @func_427(%23, %24) /* ty=(Tensor[(16, 5, 2), uint64],) */;
    %26 = @func_3295() /* ty=(Tensor[(15, 2, 14), bool],) */;
    %27 = erf(%18) /* ty=Tensor[(15, 2, 14), float64] */;
    %28 = %19.2;
    %29 = %20.0;
    %30 = %25.0;
    %31 = %26.0;
    (%27, %28, %29, %30, %var_3670, %var_3671, %31)
  };
  %32(%var_3680, %var_3681) /* ty=(Tensor[(15, 2, 14), float64], Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float64], Tensor[(16, 5, 2), uint64], uint64, Tensor[(1, 160), uint64], Tensor[(15, 2, 14), bool]) */
}

def @func_2788(%var_2786: uint64, %var_2787: Tensor[(160), uint64]) -> (Tensor[(8, 12, 6), float64], Tensor[(16, 5, 2), uint64], uint64, Tensor[(160), uint64]) {
  @func_2784(%var_2786, %var_2787) /* ty=(Tensor[(8, 12, 6), float64], Tensor[(16, 5, 2), uint64], uint64, Tensor[(160), uint64]) */
}

def @func_2755() -> (Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float32]) {
  %36 = fn () -> (Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float32]) {
    %33 = @func_2080() /* ty=(Tensor[(8, 12, 6), float32],) */;
    %34 = @func_1386() /* ty=Tensor[(8, 12, 6), float64] */;
    %35 = %33.0;
    (%34, %35)
  };
  %36() /* ty=(Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float32]) */
}

def @func_633(%var_630: Tensor[(12, 14, 12), float64], %var_631: Tensor[(12, 14, 12), float64], %var_632: Tensor[(104), float32]) -> (Tensor[(12, 14, 12), float64], Tensor[(1, 13, 8), float32], Tensor[(104), float32], Tensor[(1, 13, 8), float32]) {
  @func_628(%var_630, %var_631, %var_632) /* ty=(Tensor[(12, 14, 12), float64], Tensor[(1, 13, 8), float32], Tensor[(104), float32], Tensor[(1, 13, 8), float32]) */
}

def @func_3135() -> Tensor[(2, 16, 14), float32] {
  @func_3133() /* ty=Tensor[(2, 16, 14), float32] */
}

def @func_1191(%var_1189: Tensor[(6, 8, 2), float64], %var_1190: Tensor[(104), float32]) -> (Tensor[(6, 8, 2), float64], Tensor[(12, 14, 12), float64], Tensor[(2016), float64], Tensor[(104), float32], Tensor[(6, 8, 2), float64]) {
  @func_1187(%var_1189, %var_1190) /* ty=(Tensor[(6, 8, 2), float64], Tensor[(12, 14, 12), float64], Tensor[(2016), float64], Tensor[(104), float32], Tensor[(6, 8, 2), float64]) */
}

def @func_3856() -> Tensor[(15, 2, 14), bool] {
  %37 = @func_2595() /* ty=(Tensor[(8, 12, 6), float64], Tensor[(15, 2, 14), bool], Tensor[(420), uint8]) */;
  %37.1
}

def @func_3634(%var_3632: Tensor[(8, 12, 6), float32], %var_3633: Tensor[(8, 12, 6), float32]) -> (Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float32]) {
  @func_3630(%var_3632, %var_3633) /* ty=(Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float32]) */
}

def @func_4413() -> (Tensor[(8, 12, 6), float32],) {
  %38 = @func_4265() /* ty=(Tensor[(8, 12, 6), float32],) */;
  %39 = %38.0;
  (%39,)
}

def @func_628(%var_616: Tensor[(12, 14, 12), float64], %var_617: Tensor[(12, 14, 12), float64], %var_622: Tensor[(104), float32]) -> (Tensor[(12, 14, 12), float64], Tensor[(1, 13, 8), float32], Tensor[(104), float32], Tensor[(1, 13, 8), float32]) {
  %40 = cast(%var_617, dtype="float64") /* ty=Tensor[(12, 14, 12), float64] */;
  %41 = shape_of(%var_616, dtype="int32") /* ty=Tensor[(3), int32] */;
  %42 = cast(%var_616, dtype="float64") /* ty=Tensor[(12, 14, 12), float64] */;
  %43 = dyn.reshape(%40, %41, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %44 = cast(%var_622, dtype="float32") /* ty=Tensor[(104), float32] */;
  %45 = reshape(%44, newshape=[1, 13, 8]) /* ty=Tensor[(1, 13, 8), float32] */;
  %46 = @func_594(%45) /* ty=(Tensor[(1, 13, 8), float32],) */;
  %47 = cast(%var_622, dtype="float32") /* ty=Tensor[(104), float32] */;
  %48 = reshape(%47, newshape=[1, 13, 8]) /* ty=Tensor[(1, 13, 8), float32] */;
  %49 = @func_594(%48) /* ty=(Tensor[(1, 13, 8), float32],) */;
  %50 = divide(%42, %43) /* ty=Tensor[(12, 14, 12), float64] */;
  %51 = %46.0;
  %52 = %49.0;
  (%50, %51, %var_622, %52)
}

def @func_4291(%var_4289: Tensor[(2, 9, 9), float64], %var_4290: Tensor[(2, 9, 9), float64]) -> (Tensor[(2, 9, 9), float64],) {
  %58 = fn (%var_4282: Tensor[(2, 9, 9), float64], %var_4283: Tensor[(2, 9, 9), float64]) -> (Tensor[(2, 9, 9), float64],) {
    %53 = cast(%var_4283, dtype="float64") /* ty=Tensor[(2, 9, 9), float64] */;
    %54 = shape_of(%var_4282, dtype="int32") /* ty=Tensor[(3), int32] */;
    %55 = cast(%var_4282, dtype="float64") /* ty=Tensor[(2, 9, 9), float64] */;
    %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %57 = floor_mod(%55, %56) /* ty=Tensor[(2, 9, 9), float64] */;
    (%57,)
  };
  %58(%var_4289, %var_4290) /* ty=(Tensor[(2, 9, 9), float64],) */
}

def @func_3320() -> (Tensor[(8, 12, 6), float64],) {
  @func_3318() /* ty=(Tensor[(8, 12, 6), float64],) */
}

def @func_2241() -> (Tensor[(8, 12, 6), float32], Tensor[(52, 2), bool]) {
  %65 = fn () -> (Tensor[(8, 12, 6), float32], Tensor[(52, 2), bool]) {
    %59 = @func_1996() /* ty=(Tensor[(8, 12, 6), float32],) */;
    %60 = %59.0;
    %61 = cast(%60, dtype="float32") /* ty=Tensor[(8, 12, 6), float32] */;
    %62 = reshape(%61, newshape=[8, 12, 6]) /* ty=Tensor[(8, 12, 6), float32] */;
    %63 = @func_2062(%62) /* ty=(Tensor[(8, 12, 6), float32], Tensor[(6, 270), float64], uint64, Tensor[(52, 2), bool]) */;
    %64 = %63.3;
    (%60, %64)
  };
  %65() /* ty=(Tensor[(8, 12, 6), float32], Tensor[(52, 2), bool]) */
}

def @func_4893(%var_4860: Tensor[(14, 10, 3), float64], %var_4868: Tensor[(14, 10, 3), float64]) -> (Tensor[(8, 12, 6), float32], Tensor[(14, 10, 3), bool], Tensor[(14, 10, 3), bool], Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float64]) {
  %66 = @func_1996() /* ty=(Tensor[(8, 12, 6), float32],) */;
  %67 = @func_4401() /* ty=Tensor[(14, 10, 3), float64] */;
  %68 = cast(%var_4860, dtype="bool") /* ty=Tensor[(14, 10, 3), bool] */;
  %69 = shape_of(%67, dtype="int32") /* ty=Tensor[(3), int32] */;
  %70 = cast(%67, dtype="bool") /* ty=Tensor[(14, 10, 3), bool] */;
  %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %72 = cast(%var_4868, dtype="bool") /* ty=Tensor[(14, 10, 3), bool] */;
  %73 = shape_of(%var_4860, dtype="int32") /* ty=Tensor[(3), int32] */;
  %74 = cast(%var_4860, dtype="bool") /* ty=Tensor[(14, 10, 3), bool] */;
  %75 = dyn.reshape(%72, %73, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %76 = @func_2123() /* ty=(Tensor[(8, 12, 6), float64],) */;
  %77 = @func_2123() /* ty=(Tensor[(8, 12, 6), float64],) */;
  %78 = %66.0;
  %79 = logical_and(%70, %71) /* ty=Tensor[(14, 10, 3), bool] */;
  %80 = greater_equal(%74, %75) /* ty=Tensor[(14, 10, 3), bool] */;
  %81 = %76.0;
  %82 = %77.0;
  (%78, %79, %80, %81, %82)
}

def @func_3630(%var_3571: Tensor[(8, 12, 6), float32], %var_3610: Tensor[(8, 12, 6), float32]) -> (Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float32]) {
  %83 = @func_1996() /* ty=(Tensor[(8, 12, 6), float32],) */;
  %84 = %83.0;
  %85 = cast(%var_3571, dtype="float64") /* ty=Tensor[(8, 12, 6), float64] */;
  %86 = shape_of(%84, dtype="int32") /* ty=Tensor[(3), int32] */;
  %87 = cast(%84, dtype="float64") /* ty=Tensor[(8, 12, 6), float64] */;
  %88 = dyn.reshape(%85, %86, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %89 = @func_2080() /* ty=(Tensor[(8, 12, 6), float32],) */;
  %90 = cast(%84, dtype="float32") /* ty=Tensor[(8, 12, 6), float32] */;
  %91 = atanh(%90) /* ty=Tensor[(8, 12, 6), float32] */;
  %92 = cast(%var_3610, dtype="float32") /* ty=Tensor[(8, 12, 6), float32] */;
  %93 = shape_of(%91, dtype="int32") /* ty=Tensor[(3), int32] */;
  %94 = cast(%91, dtype="float32") /* ty=Tensor[(8, 12, 6), float32] */;
  %95 = dyn.reshape(%92, %93, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %96 = floor_divide(%87, %88) /* ty=Tensor[(8, 12, 6), float64] */;
  %97 = %89.0;
  %98 = subtract(%94, %95) /* ty=Tensor[(8, 12, 6), float32] */;
  (%96, %97, %98)
}

def @func_5758() -> Tensor[(8, 12, 6), float64] {
  @func_5756() /* ty=Tensor[(8, 12, 6), float64] */
}

def @func_5703(%var_5700: Tensor[(4, 10, 12), uint64], %var_5701: Tensor[(4, 10, 12), uint64], %var_5702: uint64) -> (Tensor[(4, 10, 12), bool], Tensor[(104), float32], Tensor[(1620), float64], Tensor[(104), float32], uint64, Tensor[(8, 12, 6), float64], Tensor[(576), float64], Tensor[(4, 10, 12), bool]) {
  @func_5698(%var_5700, %var_5701, %var_5702) /* ty=(Tensor[(4, 10, 12), bool], Tensor[(104), float32], Tensor[(1620), float64], Tensor[(104), float32], uint64, Tensor[(8, 12, 6), float64], Tensor[(576), float64], Tensor[(4, 10, 12), bool]) */
}

def @func_2123() -> (Tensor[(8, 12, 6), float64],) {
  %99 = @func_1386() /* ty=Tensor[(8, 12, 6), float64] */;
  %100 = cast(%99, dtype="float64") /* ty=Tensor[(8, 12, 6), float64] */;
  %101 = erf(%100) /* ty=Tensor[(8, 12, 6), float64] */;
  (%101,)
}

def @func_1388() -> Tensor[(8, 12, 6), float64] {
  @func_1386() /* ty=Tensor[(8, 12, 6), float64] */
}

def @func_1931(%var_1926: Tensor[(8, 64), float32], %var_1927: uint64, %var_1928: Tensor[(104), float32], %var_1929: Tensor[(9, 100), float64], %var_1930: Tensor[(2016), float64]) -> (Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float64], Tensor[(160), uint64], Tensor[(270, 6), float64], Tensor[(160), uint64], Tensor[(1, 13, 8), float32], Tensor[(104), float32], Tensor[(2, 16, 16), float64], Tensor[(2, 16, 16), int64], Tensor[(104), float32], Tensor[(9, 100), float64], Tensor[(2016), float64]) {
  @func_1924(%var_1926, %var_1927, %var_1928, %var_1929, %var_1930) /* ty=(Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float64], Tensor[(160), uint64], Tensor[(270, 6), float64], Tensor[(160), uint64], Tensor[(1, 13, 8), float32], Tensor[(104), float32], Tensor[(2, 16, 16), float64], Tensor[(2, 16, 16), int64], Tensor[(104), float32], Tensor[(9, 100), float64], Tensor[(2016), float64]) */
}

def @func_4128() -> (Tensor[(8, 12, 6), float64], Tensor[(11, 7, 3), int16], Tensor[(231), int16]) {
  %102 = @func_3318() /* ty=(Tensor[(8, 12, 6), float64],) */;
  %103 = cast(meta[relay.Constant][1] /* ty=Tensor[(231), int16] */, dtype="int16") /* ty=Tensor[(231), int16] */;
  %104 = cast(meta[relay.Constant][1] /* ty=Tensor[(231), int16] */, dtype="int16") /* ty=Tensor[(231), int16] */;
  %105 = reshape(%103, newshape=[11, 7, 3]) /* ty=Tensor[(11, 7, 3), int16] */;
  %106 = reshape(%104, newshape=[11, 7, 3]) /* ty=Tensor[(11, 7, 3), int16] */;
  %107 = @func_295(%105, %106) /* ty=(Tensor[(11, 7, 3), int16],) */;
  %108 = %102.0;
  %109 = %107.0;
  (%108, %109, meta[relay.Constant][1] /* ty=Tensor[(231), int16] */)
}

def @func_3295() -> (Tensor[(15, 2, 14), bool],) {
  %110 = @func_2595() /* ty=(Tensor[(8, 12, 6), float64], Tensor[(15, 2, 14), bool], Tensor[(420), uint8]) */;
  %111 = %110.1;
  (%111,)
}

def @func_329(%var_327: Tensor[(15, 2, 14), uint8], %var_328: Tensor[(15, 2, 14), uint8]) -> (Tensor[(15, 2, 14), bool],) {
  %117 = fn (%var_319: Tensor[(15, 2, 14), uint8], %var_320: Tensor[(15, 2, 14), uint8]) -> (Tensor[(15, 2, 14), bool],) {
    %112 = cast(%var_320, dtype="bool") /* ty=Tensor[(15, 2, 14), bool] */;
    %113 = shape_of(%var_319, dtype="int32") /* ty=Tensor[(3), int32] */;
    %114 = cast(%var_319, dtype="bool") /* ty=Tensor[(15, 2, 14), bool] */;
    %115 = dyn.reshape(%112, %113, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %116 = not_equal(%114, %115) /* ty=Tensor[(15, 2, 14), bool] */;
    (%116,)
  };
  %117(%var_327, %var_328) /* ty=(Tensor[(15, 2, 14), bool],) */
}

def @func_4415() -> (Tensor[(8, 12, 6), float32],) {
  @func_4413() /* ty=(Tensor[(8, 12, 6), float32],) */
}

def @func_2520() -> Tensor[(8, 12, 6), float32] {
  %119 = fn () -> Tensor[(8, 12, 6), float32] {
    %118 = @func_2080() /* ty=(Tensor[(8, 12, 6), float32],) */;
    %118.0
  };
  %119() /* ty=Tensor[(8, 12, 6), float32] */
}

def @func_1386() -> Tensor[(8, 12, 6), float64] {
  %120 = cast(meta[relay.Constant][2] /* ty=Tensor[(8, 12, 6), float64] */, dtype="float64") /* ty=Tensor[(8, 12, 6), float64] */;
  asinh(%120) /* ty=Tensor[(8, 12, 6), float64] */
}

def @func_298(%var_296: Tensor[(11, 7, 3), int16], %var_297: Tensor[(11, 7, 3), int16]) -> (Tensor[(11, 7, 3), int16],) {
  %126 = fn (%var_275: Tensor[(11, 7, 3), int16], %var_276: Tensor[(11, 7, 3), int16]) -> (Tensor[(11, 7, 3), int16],) {
    %121 = cast(%var_276, dtype="int16") /* ty=Tensor[(11, 7, 3), int16] */;
    %122 = shape_of(%var_275, dtype="int32") /* ty=Tensor[(3), int32] */;
    %123 = cast(%var_275, dtype="int16") /* ty=Tensor[(11, 7, 3), int16] */;
    %124 = dyn.reshape(%121, %122, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %125 = right_shift(%123, %124) /* ty=Tensor[(11, 7, 3), int16] */;
    (%125,)
  };
  %126(%var_296, %var_297) /* ty=(Tensor[(11, 7, 3), int16],) */
}

def @func_5207() -> (Tensor[(2, 16, 14), float32], Tensor[(8, 12, 6), float32]) {
  @func_5205() /* ty=(Tensor[(2, 16, 14), float32], Tensor[(8, 12, 6), float32]) */
}

def @func_4380(%var_4378: Tensor[(6, 9, 2), float64]) -> (Tensor[(6, 9, 2), uint8],) {
  @func_4377(%var_4378) /* ty=(Tensor[(6, 9, 2), uint8],) */
}

def @func_4745() -> Tensor[(8, 12, 6), float32] {
  %128 = fn () -> Tensor[(8, 12, 6), float32] {
    %127 = @func_3286() /* ty=(Tensor[(8, 12, 6), float32],) */;
    %127.0
  };
  %128() /* ty=Tensor[(8, 12, 6), float32] */
}

def @func_4957() -> (Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float32]) {
  %135 = fn () -> (Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float32]) {
    %129 = @func_3989() /* ty=(Tensor[(8, 12, 6), float32],) */;
    %130 = @func_4413() /* ty=(Tensor[(8, 12, 6), float32],) */;
    %131 = @func_4265() /* ty=(Tensor[(8, 12, 6), float32],) */;
    %132 = %129.0;
    %133 = %130.0;
    %134 = %131.0;
    (%132, %133, %134)
  };
  %135() /* ty=(Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float32]) */
}

def @func_3939(%var_3935: Tensor[(1620), float64], %var_3936: Tensor[(104), float32], %var_3937: uint64, %var_3938: Tensor[(104), float32]) -> (Tensor[(8, 12, 6), float32], Tensor[(1620), float64], uint64, uint64, Tensor[(160), uint64], Tensor[(2, 16, 14), float32], Tensor[(104), float64], Tensor[(8, 12, 6), float32], Tensor[(52, 2), uint8], Tensor[(8, 12, 6), float64]) {
  %175 = fn (%var_3865: Tensor[(1620), float64], %var_3866: Tensor[(104), float32], %var_3867: uint64, %var_3892: Tensor[(104), float32]) -> (Tensor[(8, 12, 6), float32], Tensor[(1620), float64], uint64, uint64, Tensor[(160), uint64], Tensor[(2, 16, 14), float32], Tensor[(104), float64], Tensor[(8, 12, 6), float32], Tensor[(52, 2), uint8], Tensor[(8, 12, 6), float64]) {
    %136 = @func_3286() /* ty=(Tensor[(8, 12, 6), float32],) */;
    %137 = cast(%var_3867, dtype="uint64") /* ty=uint64 */;
    %138 = cast(meta[relay.Constant][3] /* ty=Tensor[(160), uint64] */, dtype="uint64") /* ty=Tensor[(160), uint64] */;
    %139 = reshape(%137, newshape=[]) /* ty=uint64 */;
    %140 = reshape(%138, newshape=[160]) /* ty=Tensor[(160), uint64] */;
    %141 = @func_2784(%139, %140) /* ty=(Tensor[(8, 12, 6), float64], Tensor[(16, 5, 2), uint64], uint64, Tensor[(160), uint64]) */;
    %142 = cast(%var_3892, dtype="float64") /* ty=Tensor[(104), float64] */;
    %143 = shape_of(%var_3866, dtype="int32") /* ty=Tensor[(1), int32] */;
    %144 = cast(%var_3866, dtype="float64") /* ty=Tensor[(104), float64] */;
    %145 = dyn.reshape(%142, %143, newshape=[]) /* ty=Tensor[(?), float64] */;
    %146 = %136.0;
    %147 = cast(%146, dtype="float32") /* ty=Tensor[(8, 12, 6), float32] */;
    %148 = cast(%146, dtype="float32") /* ty=Tensor[(8, 12, 6), float32] */;
    %149 = reshape(%147, newshape=[8, 12, 6]) /* ty=Tensor[(8, 12, 6), float32] */;
    %150 = reshape(%148, newshape=[8, 12, 6]) /* ty=Tensor[(8, 12, 6), float32] */;
    %151 = @func_3630(%149, %150) /* ty=(Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float32]) */;
    %152 = @func_2240() /* ty=(Tensor[(8, 12, 6), float32], Tensor[(52, 2), bool]) */;
    %153 = %152.1;
    %154 = cast(%var_3865, dtype="float64") /* ty=Tensor[(1620), float64] */;
    %155 = cast(%var_3866, dtype="float32") /* ty=Tensor[(104), float32] */;
    %156 = cast(%var_3867, dtype="uint64") /* ty=uint64 */;
    %157 = reshape(%154, newshape=[1620]) /* ty=Tensor[(1620), float64] */;
    %158 = reshape(%155, newshape=[104]) /* ty=Tensor[(104), float32] */;
    %159 = reshape(%156, newshape=[]) /* ty=uint64 */;
    %160 = @func_2497(%157, %158, %159) /* ty=(Tensor[(8, 12, 6), float64], Tensor[(1, 13, 8), float32], Tensor[(1620), float64], Tensor[(104), float32], uint64) */;
    %161 = %160.3;
    %162 = cast(%161, dtype="uint8") /* ty=Tensor[(104), uint8] */;
    %163 = shape_of(%153, dtype="int32") /* ty=Tensor[(2), int32] */;
    %164 = cast(%153, dtype="uint8") /* ty=Tensor[(52, 2), uint8] */;
    %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %166 = cast(%146, dtype="float64") /* ty=Tensor[(8, 12, 6), float64] */;
    %167 = reshape(%166, newshape=[8, 12, 6]) /* ty=Tensor[(8, 12, 6), float64] */;
    %168 = @func_2439(%167) /* ty=(Tensor[(8, 12, 6), bool], Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float64]) */;
    %169 = %141.2;
    %170 = @func_3133() /* ty=Tensor[(2, 16, 14), float32] */;
    %171 = mod(%144, %145) /* ty=Tensor[(104), float64] */;
    %172 = %151.1;
    %173 = add(%164, %165) /* ty=Tensor[(52, 2), uint8] */;
    %174 = %168.2;
    (%146, %var_3865, %var_3867, %169, meta[relay.Constant][3] /* ty=Tensor[(160), uint64] */, %170, %171, %172, %173, %174)
  };
  %175(%var_3935, %var_3936, %var_3937, %var_3938) /* ty=(Tensor[(8, 12, 6), float32], Tensor[(1620), float64], uint64, uint64, Tensor[(160), uint64], Tensor[(2, 16, 14), float32], Tensor[(104), float64], Tensor[(8, 12, 6), float32], Tensor[(52, 2), uint8], Tensor[(8, 12, 6), float64]) */
}

def @func_3990() -> (Tensor[(8, 12, 6), float32],) {
  %177 = fn () -> (Tensor[(8, 12, 6), float32],) {
    %176 = @func_2519() /* ty=Tensor[(8, 12, 6), float32] */;
    (%176,)
  };
  %177() /* ty=(Tensor[(8, 12, 6), float32],) */
}

def @func_596(%var_595: Tensor[(1, 13, 8), float32]) -> (Tensor[(1, 13, 8), float32],) {
  %180 = fn (%var_565: Tensor[(1, 13, 8), float32]) -> (Tensor[(1, 13, 8), float32],) {
    %178 = cast(%var_565, dtype="float32") /* ty=Tensor[(1, 13, 8), float32] */;
    %179 = rsqrt(%178) /* ty=Tensor[(1, 13, 8), float32] */;
    (%179,)
  };
  %180(%var_595) /* ty=(Tensor[(1, 13, 8), float32],) */
}

def @func_5205() -> (Tensor[(2, 16, 14), float32], Tensor[(8, 12, 6), float32]) {
  %181 = @func_3133() /* ty=Tensor[(2, 16, 14), float32] */;
  %182 = cast(%181, dtype="float32") /* ty=Tensor[(2, 16, 14), float32] */;
  %183 = @func_3286() /* ty=(Tensor[(8, 12, 6), float32],) */;
  %184 = asin(%182) /* ty=Tensor[(2, 16, 14), float32] */;
  %185 = %183.0;
  (%184, %185)
}

def @func_2958(%var_2956: uint64, %var_2957: Tensor[(160), uint64]) -> (Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float64], Tensor[(160), uint64], Tensor[(16, 5, 2), bool]) {
  @func_2954(%var_2956, %var_2957) /* ty=(Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float64], Tensor[(160), uint64], Tensor[(16, 5, 2), bool]) */
}

def @func_1805(%var_1804: Tensor[(8, 12, 6), float64]) -> (Tensor[(8, 12, 6), float32],) {
  %200 = fn (%var_1791: Tensor[(8, 12, 6), float64]) -> (Tensor[(8, 12, 6), float32],) {
    %186 = @func_1482() /* ty=(Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float32]) */;
    %187 = %186.0;
    %188 = cast(%var_1791, dtype="int8") /* ty=Tensor[(8, 12, 6), int8] */;
    %189 = shape_of(%187, dtype="int32") /* ty=Tensor[(3), int32] */;
    %190 = cast(%187, dtype="int8") /* ty=Tensor[(8, 12, 6), int8] */;
    %191 = dyn.reshape(%188, %189, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %192 = bitwise_and(%190, %191) /* ty=Tensor[(8, 12, 6), int8] */;
    %193 = cast(%192, dtype="float64") /* ty=Tensor[(8, 12, 6), float64] */;
    %194 = acos(%193) /* ty=Tensor[(8, 12, 6), float64] */;
    %195 = cast(%192, dtype="float32") /* ty=Tensor[(8, 12, 6), float32] */;
    %196 = shape_of(%194, dtype="int32") /* ty=Tensor[(3), int32] */;
    %197 = cast(%194, dtype="float32") /* ty=Tensor[(8, 12, 6), float32] */;
    %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %199 = divide(%197, %198) /* ty=Tensor[(8, 12, 6), float32] */;
    (%199,)
  };
  %200(%var_1804) /* ty=(Tensor[(8, 12, 6), float32],) */
}

def @func_838(%var_766: Tensor[(12, 5, 15), float64], %var_797: Tensor[(14, 144), float64], %var_798: Tensor[(104), float32], %var_808: uint64, %var_809: Tensor[(160), uint64]) -> (Tensor[(12, 5, 15), float64], Tensor[(1, 13, 8), float32], Tensor[(14, 144), float64], Tensor[(104), float32], Tensor[(1, 13, 8), float32], Tensor[(16, 5, 2), uint64], uint64, Tensor[(160), uint64], Tensor[(11, 7, 3), int16], Tensor[(231), int16], Tensor[(104), float32], Tensor[(1, 13, 8), float32]) {
  %201 = cast(%var_766, dtype="float64") /* ty=Tensor[(12, 5, 15), float64] */;
  %202 = cast(%var_797, dtype="float64") /* ty=Tensor[(14, 144), float64] */;
  %203 = cast(%var_797, dtype="float64") /* ty=Tensor[(14, 144), float64] */;
  %204 = cast(%var_798, dtype="float32") /* ty=Tensor[(104), float32] */;
  %205 = reshape(%202, newshape=[12, 14, 12]) /* ty=Tensor[(12, 14, 12), float64] */;
  %206 = reshape(%203, newshape=[12, 14, 12]) /* ty=Tensor[(12, 14, 12), float64] */;
  %207 = reshape(%204, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %208 = @func_628(%205, %206, %207) /* ty=(Tensor[(12, 14, 12), float64], Tensor[(1, 13, 8), float32], Tensor[(104), float32], Tensor[(1, 13, 8), float32]) */;
  %209 = cast(%var_798, dtype="float32") /* ty=Tensor[(104), float32] */;
  %210 = reshape(%209, newshape=[1, 13, 8]) /* ty=Tensor[(1, 13, 8), float32] */;
  %211 = @func_594(%210) /* ty=(Tensor[(1, 13, 8), float32],) */;
  %212 = cast(%var_808, dtype="uint64") /* ty=uint64 */;
  %213 = cast(%var_809, dtype="uint64") /* ty=Tensor[(160), uint64] */;
  %214 = reshape(%212, newshape=[]) /* ty=uint64 */;
  %215 = reshape(%213, newshape=[16, 5, 2]) /* ty=Tensor[(16, 5, 2), uint64] */;
  %216 = @func_427(%214, %215) /* ty=(Tensor[(16, 5, 2), uint64],) */;
  %217 = cast(meta[relay.Constant][4] /* ty=Tensor[(231), int16] */, dtype="int16") /* ty=Tensor[(231), int16] */;
  %218 = cast(meta[relay.Constant][4] /* ty=Tensor[(231), int16] */, dtype="int16") /* ty=Tensor[(231), int16] */;
  %219 = reshape(%217, newshape=[11, 7, 3]) /* ty=Tensor[(11, 7, 3), int16] */;
  %220 = reshape(%218, newshape=[11, 7, 3]) /* ty=Tensor[(11, 7, 3), int16] */;
  %221 = @func_295(%219, %220) /* ty=(Tensor[(11, 7, 3), int16],) */;
  %222 = cast(%var_797, dtype="float64") /* ty=Tensor[(14, 144), float64] */;
  %223 = cast(%var_797, dtype="float64") /* ty=Tensor[(14, 144), float64] */;
  %224 = cast(%var_798, dtype="float32") /* ty=Tensor[(104), float32] */;
  %225 = reshape(%222, newshape=[12, 14, 12]) /* ty=Tensor[(12, 14, 12), float64] */;
  %226 = reshape(%223, newshape=[12, 14, 12]) /* ty=Tensor[(12, 14, 12), float64] */;
  %227 = reshape(%224, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %228 = @func_628(%225, %226, %227) /* ty=(Tensor[(12, 14, 12), float64], Tensor[(1, 13, 8), float32], Tensor[(104), float32], Tensor[(1, 13, 8), float32]) */;
  %229 = cast(%var_798, dtype="float32") /* ty=Tensor[(104), float32] */;
  %230 = reshape(%229, newshape=[1, 13, 8]) /* ty=Tensor[(1, 13, 8), float32] */;
  %231 = @func_594(%230) /* ty=(Tensor[(1, 13, 8), float32],) */;
  %232 = sigmoid(%201) /* ty=Tensor[(12, 5, 15), float64] */;
  %233 = %208.3;
  %234 = %211.0;
  %235 = %216.0;
  %236 = %221.0;
  %237 = %228.2;
  %238 = %231.0;
  (%232, %233, %var_797, %var_798, %234, %235, %var_808, %var_809, %236, meta[relay.Constant][4] /* ty=Tensor[(231), int16] */, %237, %238)
}

def @func_1482() -> (Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float32]) {
  %239 = @func_1386() /* ty=Tensor[(8, 12, 6), float64] */;
  %240 = cast(%239, dtype="float32") /* ty=Tensor[(8, 12, 6), float32] */;
  %241 = @func_1386() /* ty=Tensor[(8, 12, 6), float64] */;
  %242 = sigmoid(%240) /* ty=Tensor[(8, 12, 6), float32] */;
  (%241, %242)
}

def @func_4897(%var_4895: Tensor[(14, 10, 3), float64], %var_4896: Tensor[(14, 10, 3), float64]) -> (Tensor[(8, 12, 6), float32], Tensor[(14, 10, 3), bool], Tensor[(14, 10, 3), bool], Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float64]) {
  @func_4893(%var_4895, %var_4896) /* ty=(Tensor[(8, 12, 6), float32], Tensor[(14, 10, 3), bool], Tensor[(14, 10, 3), bool], Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float64]) */
}

def @func_3563() -> Tensor[(8, 12, 6), float64] {
  @func_1386() /* ty=Tensor[(8, 12, 6), float64] */
}

def @func_2441(%var_2440: Tensor[(8, 12, 6), float64]) -> (Tensor[(8, 12, 6), bool], Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float64]) {
  %254 = fn (%var_2409: Tensor[(8, 12, 6), float64]) -> (Tensor[(8, 12, 6), bool], Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float64]) {
    %243 = @func_1482() /* ty=(Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float32]) */;
    %244 = %243.0;
    %245 = cast(%var_2409, dtype="bool") /* ty=Tensor[(8, 12, 6), bool] */;
    %246 = shape_of(%244, dtype="int32") /* ty=Tensor[(3), int32] */;
    %247 = cast(%244, dtype="bool") /* ty=Tensor[(8, 12, 6), bool] */;
    %248 = dyn.reshape(%245, %246, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %249 = @func_1996() /* ty=(Tensor[(8, 12, 6), float32],) */;
    %250 = cast(%var_2409, dtype="float64") /* ty=Tensor[(8, 12, 6), float64] */;
    %251 = logical_and(%247, %248) /* ty=Tensor[(8, 12, 6), bool] */;
    %252 = %249.0;
    %253 = cos(%250) /* ty=Tensor[(8, 12, 6), float64] */;
    (%251, %252, %253)
  };
  %254(%var_2440) /* ty=(Tensor[(8, 12, 6), bool], Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float64]) */
}

def @func_5908(%var_5879: Tensor[(12, 6, 6), uint64], %var_5880: Tensor[(12, 6, 6), uint64]) -> (Tensor[(12, 6, 6), uint16], Tensor[(12, 6, 6), uint16], Tensor[(12, 6, 6), float32]) {
  %255 = cast(%var_5880, dtype="uint64") /* ty=Tensor[(12, 6, 6), uint64] */;
  %256 = shape_of(%var_5879, dtype="int32") /* ty=Tensor[(3), int32] */;
  %257 = cast(%var_5879, dtype="uint64") /* ty=Tensor[(12, 6, 6), uint64] */;
  %258 = dyn.reshape(%255, %256, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %259 = right_shift(%257, %258) /* ty=Tensor[(12, 6, 6), uint64] */;
  %260 = cast(%var_5879, dtype="uint16") /* ty=Tensor[(12, 6, 6), uint16] */;
  %261 = shape_of(%259, dtype="int32") /* ty=Tensor[(3), int32] */;
  %262 = cast(%259, dtype="uint16") /* ty=Tensor[(12, 6, 6), uint16] */;
  %263 = dyn.reshape(%260, %261, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %264 = cast(%var_5879, dtype="uint16") /* ty=Tensor[(12, 6, 6), uint16] */;
  %265 = shape_of(%var_5880, dtype="int32") /* ty=Tensor[(3), int32] */;
  %266 = cast(%var_5880, dtype="uint16") /* ty=Tensor[(12, 6, 6), uint16] */;
  %267 = dyn.reshape(%264, %265, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %268 = cast(%var_5879, dtype="float32") /* ty=Tensor[(12, 6, 6), float32] */;
  %269 = maximum(%262, %263) /* ty=Tensor[(12, 6, 6), uint16] */;
  %270 = subtract(%266, %267) /* ty=Tensor[(12, 6, 6), uint16] */;
  %271 = acosh(%268) /* ty=Tensor[(12, 6, 6), float32] */;
  (%269, %270, %271)
}

def @func_1545(%var_1541: Tensor[(2, 16, 16), float32], %var_1542: Tensor[(2, 16, 16), float32], %var_1543: Tensor[(2, 16, 16), float32], %var_1544: Tensor[(2, 16, 16), float32]) -> (Tensor[(2, 16, 16), float32], Tensor[(2, 16, 16), int16], Tensor[(2, 16, 16), int64], Tensor[(8, 12, 6), float32]) {
  %289 = fn (%var_1515: Tensor[(2, 16, 16), float32], %var_1516: Tensor[(2, 16, 16), float32], %var_1522: Tensor[(2, 16, 16), float32], %var_1526: Tensor[(2, 16, 16), float32]) -> (Tensor[(2, 16, 16), float32], Tensor[(2, 16, 16), int16], Tensor[(2, 16, 16), int64], Tensor[(8, 12, 6), float32]) {
    %272 = cast(%var_1516, dtype="float32") /* ty=Tensor[(2, 16, 16), float32] */;
    %273 = shape_of(%var_1515, dtype="int32") /* ty=Tensor[(3), int32] */;
    %274 = cast(%var_1515, dtype="float32") /* ty=Tensor[(2, 16, 16), float32] */;
    %275 = dyn.reshape(%272, %273, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %276 = cast(%var_1522, dtype="int16") /* ty=Tensor[(2, 16, 16), int16] */;
    %277 = shape_of(%var_1515, dtype="int32") /* ty=Tensor[(3), int32] */;
    %278 = cast(%var_1515, dtype="int16") /* ty=Tensor[(2, 16, 16), int16] */;
    %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %280 = cast(%var_1526, dtype="int64") /* ty=Tensor[(2, 16, 16), int64] */;
    %281 = shape_of(%var_1522, dtype="int32") /* ty=Tensor[(3), int32] */;
    %282 = cast(%var_1522, dtype="int64") /* ty=Tensor[(2, 16, 16), int64] */;
    %283 = dyn.reshape(%280, %281, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %284 = @func_1482() /* ty=(Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float32]) */;
    %285 = mod(%274, %275) /* ty=Tensor[(2, 16, 16), float32] */;
    %286 = subtract(%278, %279) /* ty=Tensor[(2, 16, 16), int16] */;
    %287 = bitwise_and(%282, %283) /* ty=Tensor[(2, 16, 16), int64] */;
    %288 = %284.1;
    (%285, %286, %287, %288)
  };
  %289(%var_1541, %var_1542, %var_1543, %var_1544) /* ty=(Tensor[(2, 16, 16), float32], Tensor[(2, 16, 16), int16], Tensor[(2, 16, 16), int64], Tensor[(8, 12, 6), float32]) */
}

def @func_3287() -> (Tensor[(8, 12, 6), float32],) {
  %291 = fn () -> (Tensor[(8, 12, 6), float32],) {
    %290 = @func_2519() /* ty=Tensor[(8, 12, 6), float32] */;
    (%290,)
  };
  %291() /* ty=(Tensor[(8, 12, 6), float32],) */
}

def @main() -> (Tensor[(52, 2), float32],) {
  %292 = @func_2241() /* ty=(Tensor[(8, 12, 6), float32], Tensor[(52, 2), bool]) */;
  %293 = %292.1;
  %294 = cast(%293, dtype="float64") /* ty=Tensor[(52, 2), float64] */;
  %295 = acos(%294) /* ty=Tensor[(52, 2), float64] */;
  %296 = cast(%295, dtype="float32") /* ty=Tensor[(52, 2), float32] */;
  %297 = rsqrt(%296) /* ty=Tensor[(52, 2), float32] */;
  (%297,)
}

def @func_2501(%var_2498: Tensor[(1620), float64], %var_2499: Tensor[(104), float32], %var_2500: uint64) -> (Tensor[(8, 12, 6), float64], Tensor[(1, 13, 8), float32], Tensor[(1620), float64], Tensor[(104), float32], uint64) {
  %310 = fn (%var_2479: Tensor[(1620), float64], %var_2480: Tensor[(104), float32], %var_2481: uint64) -> (Tensor[(8, 12, 6), float64], Tensor[(1, 13, 8), float32], Tensor[(1620), float64], Tensor[(104), float32], uint64) {
    %298 = @func_1482() /* ty=(Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float32]) */;
    %299 = %298.0;
    %300 = cast(%299, dtype="float64") /* ty=Tensor[(8, 12, 6), float64] */;
    %301 = cast(%var_2479, dtype="float64") /* ty=Tensor[(1620), float64] */;
    %302 = cast(%var_2480, dtype="float32") /* ty=Tensor[(104), float32] */;
    %303 = cast(%var_2481, dtype="uint64") /* ty=uint64 */;
    %304 = reshape(%301, newshape=[9, 12, 15]) /* ty=Tensor[(9, 12, 15), float64] */;
    %305 = reshape(%302, newshape=[104]) /* ty=Tensor[(104), float32] */;
    %306 = reshape(%303, newshape=[]) /* ty=uint64 */;
    %307 = @func_1353(%304, %305, %306) /* ty=(Tensor[(9, 12, 15), float32], Tensor[(1, 13, 8), float32], Tensor[(104), float32], Tensor[(16, 5, 2), uint64], uint64, Tensor[(160), uint64]) */;
    %308 = sinh(%300) /* ty=Tensor[(8, 12, 6), float64] */;
    %309 = %307.1;
    (%308, %309, %var_2479, %var_2480, %var_2481)
  };
  %310(%var_2498, %var_2499, %var_2500) /* ty=(Tensor[(8, 12, 6), float64], Tensor[(1, 13, 8), float32], Tensor[(1620), float64], Tensor[(104), float32], uint64) */
}

def @func_2597() -> (Tensor[(8, 12, 6), float64], Tensor[(15, 2, 14), bool], Tensor[(420), uint8]) {
  @func_2595() /* ty=(Tensor[(8, 12, 6), float64], Tensor[(15, 2, 14), bool], Tensor[(420), uint8]) */
}

def @func_845(%var_840: Tensor[(12, 5, 15), float64], %var_841: Tensor[(14, 144), float64], %var_842: Tensor[(104), float32], %var_843: uint64, %var_844: Tensor[(160), uint64]) -> (Tensor[(12, 5, 15), float64], Tensor[(1, 13, 8), float32], Tensor[(14, 144), float64], Tensor[(104), float32], Tensor[(1, 13, 8), float32], Tensor[(16, 5, 2), uint64], uint64, Tensor[(160), uint64], Tensor[(11, 7, 3), int16], Tensor[(231), int16], Tensor[(104), float32], Tensor[(1, 13, 8), float32]) {
  @func_838(%var_840, %var_841, %var_842, %var_843, %var_844) /* ty=(Tensor[(12, 5, 15), float64], Tensor[(1, 13, 8), float32], Tensor[(14, 144), float64], Tensor[(104), float32], Tensor[(1, 13, 8), float32], Tensor[(16, 5, 2), uint64], uint64, Tensor[(160), uint64], Tensor[(11, 7, 3), int16], Tensor[(231), int16], Tensor[(104), float32], Tensor[(1, 13, 8), float32]) */
}

def @func_3297() -> (Tensor[(15, 2, 14), bool],) {
  @func_3295() /* ty=(Tensor[(15, 2, 14), bool],) */
}

def @func_2725(%var_2723: Tensor[(2, 16, 5), float64], %var_2724: Tensor[(2, 16, 5), float64]) -> (Tensor[(2, 16, 5), float64], Tensor[(2, 16, 5), float64]) {
  %318 = fn (%var_2703: Tensor[(2, 16, 5), float64], %var_2704: Tensor[(2, 16, 5), float64]) -> (Tensor[(2, 16, 5), float64], Tensor[(2, 16, 5), float64]) {
    %311 = cast(%var_2704, dtype="float64") /* ty=Tensor[(2, 16, 5), float64] */;
    %312 = shape_of(%var_2703, dtype="int32") /* ty=Tensor[(3), int32] */;
    %313 = cast(%var_2703, dtype="float64") /* ty=Tensor[(2, 16, 5), float64] */;
    %314 = dyn.reshape(%311, %312, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %315 = cast(%var_2703, dtype="float64") /* ty=Tensor[(2, 16, 5), float64] */;
    %316 = mod(%313, %314) /* ty=Tensor[(2, 16, 5), float64] */;
    %317 = sigmoid(%315) /* ty=Tensor[(2, 16, 5), float64] */;
    (%316, %317)
  };
  %318(%var_2723, %var_2724) /* ty=(Tensor[(2, 16, 5), float64], Tensor[(2, 16, 5), float64]) */
}

def @func_2065(%var_2063: Tensor[(8, 12, 6), float32]) -> (Tensor[(8, 12, 6), float32], Tensor[(6, 270), float64], uint64, Tensor[(52, 2), bool]) {
  @func_2062(%var_2063) /* ty=(Tensor[(8, 12, 6), float32], Tensor[(6, 270), float64], uint64, Tensor[(52, 2), bool]) */
}

def @func_3565() -> Tensor[(8, 12, 6), float64] {
  @func_3563() /* ty=Tensor[(8, 12, 6), float64] */
}

def @func_1684(%var_1682: Tensor[(1620), float64], %var_1683: uint64) -> (Tensor[(8, 12, 6), float64], Tensor[(2, 16, 16), int16], Tensor[(2, 256), float32], Tensor[(160), uint64], Tensor[(26, 4), float32], uint64, Tensor[(15, 2, 14), bool], Tensor[(420), uint8], Tensor[(1620), uint32]) {
  @func_1680(%var_1682, %var_1683) /* ty=(Tensor[(8, 12, 6), float64], Tensor[(2, 16, 16), int16], Tensor[(2, 256), float32], Tensor[(160), uint64], Tensor[(26, 4), float32], uint64, Tensor[(15, 2, 14), bool], Tensor[(420), uint8], Tensor[(1620), uint32]) */
}

def @func_4130() -> (Tensor[(8, 12, 6), float64], Tensor[(11, 7, 3), int16], Tensor[(231), int16]) {
  @func_4128() /* ty=(Tensor[(8, 12, 6), float64], Tensor[(11, 7, 3), int16], Tensor[(231), int16]) */
}

def @func_2784(%var_2778: uint64, %var_2779: Tensor[(160), uint64]) -> (Tensor[(8, 12, 6), float64], Tensor[(16, 5, 2), uint64], uint64, Tensor[(160), uint64]) {
  %319 = @func_1996() /* ty=(Tensor[(8, 12, 6), float32],) */;
  %320 = %319.0;
  %321 = cast(%320, dtype="float64") /* ty=Tensor[(8, 12, 6), float64] */;
  %322 = cast(%var_2778, dtype="uint64") /* ty=uint64 */;
  %323 = cast(%var_2779, dtype="uint64") /* ty=Tensor[(160), uint64] */;
  %324 = reshape(%322, newshape=[]) /* ty=uint64 */;
  %325 = reshape(%323, newshape=[16, 5, 2]) /* ty=Tensor[(16, 5, 2), uint64] */;
  %326 = @func_427(%324, %325) /* ty=(Tensor[(16, 5, 2), uint64],) */;
  %327 = cosh(%321) /* ty=Tensor[(8, 12, 6), float64] */;
  %328 = %326.0;
  (%327, %328, %var_2778, %var_2779)
}

def @func_2100(%var_2099: Tensor[(270, 6), float64]) -> (Tensor[(2, 256), float32], Tensor[(270, 6), float64], Tensor[(8, 12, 6), bool]) {
  %340 = fn (%var_2086: Tensor[(270, 6), float64]) -> (Tensor[(2, 256), float32], Tensor[(270, 6), float64], Tensor[(8, 12, 6), bool]) {
    %329 = cast(%var_2086, dtype="float64") /* ty=Tensor[(270, 6), float64] */;
    %330 = cast(meta[relay.Constant][5] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %331 = reshape(%329, newshape=[1620]) /* ty=Tensor[(1620), float64] */;
    %332 = reshape(%330, newshape=[]) /* ty=uint64 */;
    %333 = @func_1680(%331, %332) /* ty=(Tensor[(8, 12, 6), float64], Tensor[(2, 16, 16), int16], Tensor[(2, 256), float32], Tensor[(160), uint64], Tensor[(26, 4), float32], uint64, Tensor[(15, 2, 14), bool], Tensor[(420), uint8], Tensor[(1620), uint32]) */;
    %334 = @func_2080() /* ty=(Tensor[(8, 12, 6), float32],) */;
    %335 = %334.0;
    %336 = cast(%335, dtype="bool") /* ty=Tensor[(8, 12, 6), bool] */;
    %337 = cast(meta[relay.Constant][5] /* ty=uint64 */, dtype="bool") /* ty=bool */;
    %338 = %333.2;
    %339 = equal(%336, %337) /* ty=Tensor[(8, 12, 6), bool] */;
    (%338, %var_2086, %339)
  };
  %340(%var_2099) /* ty=(Tensor[(2, 256), float32], Tensor[(270, 6), float64], Tensor[(8, 12, 6), bool]) */
}

def @func_4167() -> Tensor[(8, 12, 6), float64] {
  %342 = fn () -> Tensor[(8, 12, 6), float64] {
    %341 = @func_4018() /* ty=(Tensor[(8, 12, 6), float64],) */;
    %341.0
  };
  %342() /* ty=Tensor[(8, 12, 6), float64] */
}

def @func_4702(%var_4700: Tensor[(2016), float64]) -> (Tensor[(8, 12, 6), float32], Tensor[(2016), float64], Tensor[(15, 2, 14), bool], Tensor[(?, 13, 8), bool]) {
  @func_4699(%var_4700) /* ty=(Tensor[(8, 12, 6), float32], Tensor[(2016), float64], Tensor[(15, 2, 14), bool], Tensor[(?, 13, 8), bool]) */
}

def @func_1924(%var_1840: Tensor[(8, 64), float32], %var_1884: uint64, %var_1901: Tensor[(104), float32], %var_1920: Tensor[(9, 100), float64], %var_1921: Tensor[(2016), float64]) -> (Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float64], Tensor[(160), uint64], Tensor[(270, 6), float64], Tensor[(160), uint64], Tensor[(1, 13, 8), float32], Tensor[(104), float32], Tensor[(2, 16, 16), float64], Tensor[(2, 16, 16), int64], Tensor[(104), float32], Tensor[(9, 100), float64], Tensor[(2016), float64]) {
  %343 = @func_1482() /* ty=(Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float32]) */;
  %344 = cast(meta[relay.Constant][6] /* ty=Tensor[(270, 6), float64] */, dtype="float64") /* ty=Tensor[(270, 6), float64] */;
  %345 = cast(%var_1884, dtype="uint64") /* ty=uint64 */;
  %346 = reshape(%344, newshape=[1620]) /* ty=Tensor[(1620), float64] */;
  %347 = reshape(%345, newshape=[]) /* ty=uint64 */;
  %348 = @func_1680(%346, %347) /* ty=(Tensor[(8, 12, 6), float64], Tensor[(2, 16, 16), int16], Tensor[(2, 256), float32], Tensor[(160), uint64], Tensor[(26, 4), float32], uint64, Tensor[(15, 2, 14), bool], Tensor[(420), uint8], Tensor[(1620), uint32]) */;
  %349 = cast(meta[relay.Constant][6] /* ty=Tensor[(270, 6), float64] */, dtype="float64") /* ty=Tensor[(270, 6), float64] */;
  %350 = cast(%var_1884, dtype="uint64") /* ty=uint64 */;
  %351 = reshape(%349, newshape=[1620]) /* ty=Tensor[(1620), float64] */;
  %352 = reshape(%350, newshape=[]) /* ty=uint64 */;
  %353 = @func_1680(%351, %352) /* ty=(Tensor[(8, 12, 6), float64], Tensor[(2, 16, 16), int16], Tensor[(2, 256), float32], Tensor[(160), uint64], Tensor[(26, 4), float32], uint64, Tensor[(15, 2, 14), bool], Tensor[(420), uint8], Tensor[(1620), uint32]) */;
  %354 = cast(%var_1901, dtype="float32") /* ty=Tensor[(104), float32] */;
  %355 = reshape(%354, newshape=[1, 13, 8]) /* ty=Tensor[(1, 13, 8), float32] */;
  %356 = @func_594(%355) /* ty=(Tensor[(1, 13, 8), float32],) */;
  %357 = cast(%var_1840, dtype="float32") /* ty=Tensor[(8, 64), float32] */;
  %358 = cast(%var_1840, dtype="float32") /* ty=Tensor[(8, 64), float32] */;
  %359 = cast(%var_1840, dtype="float32") /* ty=Tensor[(8, 64), float32] */;
  %360 = cast(%var_1840, dtype="float32") /* ty=Tensor[(8, 64), float32] */;
  %361 = reshape(%357, newshape=[2, 16, 16]) /* ty=Tensor[(2, 16, 16), float32] */;
  %362 = reshape(%358, newshape=[2, 16, 16]) /* ty=Tensor[(2, 16, 16), float32] */;
  %363 = reshape(%359, newshape=[2, 16, 16]) /* ty=Tensor[(2, 16, 16), float32] */;
  %364 = reshape(%360, newshape=[2, 16, 16]) /* ty=Tensor[(2, 16, 16), float32] */;
  %365 = @func_1540(%361, %362, %363, %364) /* ty=(Tensor[(2, 16, 16), float32], Tensor[(2, 16, 16), int16], Tensor[(2, 16, 16), int64], Tensor[(8, 12, 6), float32]) */;
  %366 = %365.0;
  %367 = cast(%var_1840, dtype="int64") /* ty=Tensor[(8, 64), int64] */;
  %368 = shape_of(%366, dtype="int32") /* ty=Tensor[(3), int32] */;
  %369 = cast(%366, dtype="int64") /* ty=Tensor[(2, 16, 16), int64] */;
  %370 = dyn.reshape(%367, %368, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %371 = bitwise_or(%369, %370) /* ty=Tensor[(2, 16, 16), int64] */;
  %372 = cast(%371, dtype="float64") /* ty=Tensor[(2, 16, 16), float64] */;
  %373 = cast(%371, dtype="float64") /* ty=Tensor[(2, 16, 16), float64] */;
  %374 = atanh(%373) /* ty=Tensor[(2, 16, 16), float64] */;
  %375 = cast(%374, dtype="int64") /* ty=Tensor[(2, 16, 16), int64] */;
  %376 = cast(%var_1884, dtype="int64") /* ty=int64 */;
  %377 = cast(%var_1920, dtype="float64") /* ty=Tensor[(9, 100), float64] */;
  %378 = cast(%var_1921, dtype="float64") /* ty=Tensor[(2016), float64] */;
  %379 = cast(%var_1901, dtype="float32") /* ty=Tensor[(104), float32] */;
  %380 = cast(%var_1884, dtype="uint64") /* ty=uint64 */;
  %381 = %348.3;
  %382 = cast(%381, dtype="uint64") /* ty=Tensor[(160), uint64] */;
  %383 = reshape(%377, newshape=[12, 5, 15]) /* ty=Tensor[(12, 5, 15), float64] */;
  %384 = reshape(%378, newshape=[14, 144]) /* ty=Tensor[(14, 144), float64] */;
  %385 = reshape(%379, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %386 = reshape(%380, newshape=[]) /* ty=uint64 */;
  %387 = reshape(%382, newshape=[160]) /* ty=Tensor[(160), uint64] */;
  %388 = @func_838(%383, %384, %385, %386, %387) /* ty=(Tensor[(12, 5, 15), float64], Tensor[(1, 13, 8), float32], Tensor[(14, 144), float64], Tensor[(104), float32], Tensor[(1, 13, 8), float32], Tensor[(16, 5, 2), uint64], uint64, Tensor[(160), uint64], Tensor[(11, 7, 3), int16], Tensor[(231), int16], Tensor[(104), float32], Tensor[(1, 13, 8), float32]) */;
  %389 = %343.1;
  %390 = @func_1386() /* ty=Tensor[(8, 12, 6), float64] */;
  %391 = %353.3;
  %392 = %356.0;
  %393 = erf(%372) /* ty=Tensor[(2, 16, 16), float64] */;
  %394 = left_shift(%375, %376) /* ty=Tensor[(2, 16, 16), int64] */;
  %395 = %388.10;
  (%389, %390, %381, meta[relay.Constant][6] /* ty=Tensor[(270, 6), float64] */, %391, %392, %var_1901, %393, %394, %395, %var_1920, %var_1921)
}

def @func_1680(%var_1637: Tensor[(1620), float64], %var_1639: uint64) -> (Tensor[(8, 12, 6), float64], Tensor[(2, 16, 16), int16], Tensor[(2, 256), float32], Tensor[(160), uint64], Tensor[(26, 4), float32], uint64, Tensor[(15, 2, 14), bool], Tensor[(420), uint8], Tensor[(1620), uint32]) {
  %396 = @func_1482() /* ty=(Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float32]) */;
  %397 = cast(meta[relay.Constant][7] /* ty=Tensor[(2, 256), float32] */, dtype="float32") /* ty=Tensor[(2, 256), float32] */;
  %398 = cast(meta[relay.Constant][7] /* ty=Tensor[(2, 256), float32] */, dtype="float32") /* ty=Tensor[(2, 256), float32] */;
  %399 = cast(meta[relay.Constant][7] /* ty=Tensor[(2, 256), float32] */, dtype="float32") /* ty=Tensor[(2, 256), float32] */;
  %400 = cast(meta[relay.Constant][7] /* ty=Tensor[(2, 256), float32] */, dtype="float32") /* ty=Tensor[(2, 256), float32] */;
  %401 = reshape(%397, newshape=[2, 16, 16]) /* ty=Tensor[(2, 16, 16), float32] */;
  %402 = reshape(%398, newshape=[2, 16, 16]) /* ty=Tensor[(2, 16, 16), float32] */;
  %403 = reshape(%399, newshape=[2, 16, 16]) /* ty=Tensor[(2, 16, 16), float32] */;
  %404 = reshape(%400, newshape=[2, 16, 16]) /* ty=Tensor[(2, 16, 16), float32] */;
  %405 = @func_1540(%401, %402, %403, %404) /* ty=(Tensor[(2, 16, 16), float32], Tensor[(2, 16, 16), int16], Tensor[(2, 16, 16), int64], Tensor[(8, 12, 6), float32]) */;
  %406 = cast(%var_1637, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %407 = cast(meta[relay.Constant][8] /* ty=Tensor[(26, 4), float32] */, dtype="float32") /* ty=Tensor[(26, 4), float32] */;
  %408 = cast(%var_1639, dtype="uint64") /* ty=uint64 */;
  %409 = reshape(%406, newshape=[9, 12, 15]) /* ty=Tensor[(9, 12, 15), float64] */;
  %410 = reshape(%407, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %411 = reshape(%408, newshape=[]) /* ty=uint64 */;
  %412 = @func_1353(%409, %410, %411) /* ty=(Tensor[(9, 12, 15), float32], Tensor[(1, 13, 8), float32], Tensor[(104), float32], Tensor[(16, 5, 2), uint64], uint64, Tensor[(160), uint64]) */;
  %413 = cast(meta[relay.Constant][9] /* ty=Tensor[(420), uint8] */, dtype="uint8") /* ty=Tensor[(420), uint8] */;
  %414 = cast(meta[relay.Constant][9] /* ty=Tensor[(420), uint8] */, dtype="uint8") /* ty=Tensor[(420), uint8] */;
  %415 = reshape(%413, newshape=[15, 2, 14]) /* ty=Tensor[(15, 2, 14), uint8] */;
  %416 = reshape(%414, newshape=[15, 2, 14]) /* ty=Tensor[(15, 2, 14), uint8] */;
  %417 = @func_326(%415, %416) /* ty=(Tensor[(15, 2, 14), bool],) */;
  %418 = cast(%var_1637, dtype="float32") /* ty=Tensor[(1620), float32] */;
  %419 = rsqrt(%418) /* ty=Tensor[(1620), float32] */;
  %420 = cast(%419, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %421 = erf(%420) /* ty=Tensor[(1620), float64] */;
  %422 = cast(%var_1637, dtype="bool") /* ty=Tensor[(1620), bool] */;
  %423 = shape_of(%421, dtype="int32") /* ty=Tensor[(1), int32] */;
  %424 = cast(%421, dtype="bool") /* ty=Tensor[(1620), bool] */;
  %425 = dyn.reshape(%422, %423, newshape=[]) /* ty=Tensor[(?), bool] */;
  %426 = less_equal(%424, %425) /* ty=Tensor[(1620), bool] */;
  %427 = cast(%var_1637, dtype="bool") /* ty=Tensor[(1620), bool] */;
  %428 = shape_of(%426, dtype="int32") /* ty=Tensor[(1), int32] */;
  %429 = cast(%426, dtype="bool") /* ty=Tensor[(1620), bool] */;
  %430 = dyn.reshape(%427, %428, newshape=[]) /* ty=Tensor[(?), bool] */;
  %431 = greater(%429, %430) /* ty=Tensor[(1620), bool] */;
  %432 = cast(%431, dtype="uint32") /* ty=Tensor[(1620), uint32] */;
  %433 = shape_of(%426, dtype="int32") /* ty=Tensor[(1), int32] */;
  %434 = cast(%426, dtype="uint32") /* ty=Tensor[(1620), uint32] */;
  %435 = dyn.reshape(%432, %433, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %436 = %396.0;
  %437 = %405.1;
  %438 = %412.5;
  %439 = %417.0;
  %440 = add(%434, %435) /* ty=Tensor[(1620), uint32] */;
  (%436, %437, meta[relay.Constant][7] /* ty=Tensor[(2, 256), float32] */, %438, meta[relay.Constant][8] /* ty=Tensor[(26, 4), float32] */, %var_1639, %439, meta[relay.Constant][9] /* ty=Tensor[(420), uint8] */, %440)
}

def @func_2125() -> (Tensor[(8, 12, 6), float64],) {
  @func_2123() /* ty=(Tensor[(8, 12, 6), float64],) */
}

def @func_5013() -> (Tensor[(8, 12, 6), float32],) {
  @func_5011() /* ty=(Tensor[(8, 12, 6), float32],) */
}

def @func_5107(%var_5101: Tensor[(14, 10, 3), float64]) -> Tensor[(14, 10, 3), uint64] {
  %441 = @func_4401() /* ty=Tensor[(14, 10, 3), float64] */;
  %442 = cast(%var_5101, dtype="uint64") /* ty=Tensor[(14, 10, 3), uint64] */;
  %443 = shape_of(%441, dtype="int32") /* ty=Tensor[(3), int32] */;
  %444 = cast(%441, dtype="uint64") /* ty=Tensor[(14, 10, 3), uint64] */;
  %445 = dyn.reshape(%442, %443, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  minimum(%444, %445) /* ty=Tensor[(14, 10, 3), uint64] */
}

def @func_1187(%var_1133: Tensor[(6, 8, 2), float64], %var_1161: Tensor[(104), float32]) -> (Tensor[(6, 8, 2), float64], Tensor[(12, 14, 12), float64], Tensor[(2016), float64], Tensor[(104), float32], Tensor[(6, 8, 2), float64]) {
  %446 = cast(%var_1133, dtype="float64") /* ty=Tensor[(6, 8, 2), float64] */;
  %447 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(6, 8, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %448 = cast(meta[relay.Constant][10] /* ty=Tensor[(6, 8, 2), float64] */, dtype="float64") /* ty=Tensor[(6, 8, 2), float64] */;
  %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %450 = cast(meta[relay.Constant][11] /* ty=Tensor[(2016), float64] */, dtype="float64") /* ty=Tensor[(2016), float64] */;
  %451 = cast(meta[relay.Constant][11] /* ty=Tensor[(2016), float64] */, dtype="float64") /* ty=Tensor[(2016), float64] */;
  %452 = cast(%var_1161, dtype="float32") /* ty=Tensor[(104), float32] */;
  %453 = reshape(%450, newshape=[12, 14, 12]) /* ty=Tensor[(12, 14, 12), float64] */;
  %454 = reshape(%451, newshape=[12, 14, 12]) /* ty=Tensor[(12, 14, 12), float64] */;
  %455 = reshape(%452, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %456 = @func_628(%453, %454, %455) /* ty=(Tensor[(12, 14, 12), float64], Tensor[(1, 13, 8), float32], Tensor[(104), float32], Tensor[(1, 13, 8), float32]) */;
  %457 = cast(meta[relay.Constant][10] /* ty=Tensor[(6, 8, 2), float64] */, dtype="float32") /* ty=Tensor[(6, 8, 2), float32] */;
  %458 = sigmoid(%457) /* ty=Tensor[(6, 8, 2), float32] */;
  %459 = cast(%458, dtype="float64") /* ty=Tensor[(6, 8, 2), float64] */;
  %460 = log(%459) /* ty=Tensor[(6, 8, 2), float64] */;
  %461 = cast(%460, dtype="float64") /* ty=Tensor[(6, 8, 2), float64] */;
  %462 = power(%448, %449) /* ty=Tensor[(6, 8, 2), float64] */;
  %463 = %456.0;
  %464 = atan(%461) /* ty=Tensor[(6, 8, 2), float64] */;
  (%462, %463, meta[relay.Constant][11] /* ty=Tensor[(2016), float64] */, %var_1161, %464)
}

def @func_4699(%var_4667: Tensor[(2016), float64]) -> (Tensor[(8, 12, 6), float32], Tensor[(2016), float64], Tensor[(15, 2, 14), bool], Tensor[(?, 13, 8), bool]) {
  %465 = @func_4265() /* ty=(Tensor[(8, 12, 6), float32],) */;
  %466 = cast(%var_4667, dtype="float64") /* ty=Tensor[(2016), float64] */;
  %467 = cast(%var_4667, dtype="float64") /* ty=Tensor[(2016), float64] */;
  %468 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 104), float32] */, dtype="float32") /* ty=Tensor[(1, 104), float32] */;
  %469 = reshape(%466, newshape=[12, 14, 12]) /* ty=Tensor[(12, 14, 12), float64] */;
  %470 = reshape(%467, newshape=[12, 14, 12]) /* ty=Tensor[(12, 14, 12), float64] */;
  %471 = reshape(%468, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %472 = @func_628(%469, %470, %471) /* ty=(Tensor[(12, 14, 12), float64], Tensor[(1, 13, 8), float32], Tensor[(104), float32], Tensor[(1, 13, 8), float32]) */;
  %473 = %472.3;
  %474 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 104), float32] */, dtype="bool") /* ty=Tensor[(1, 104), bool] */;
  %475 = shape_of(%473, dtype="int32") /* ty=Tensor[(3), int32] */;
  %476 = cast(%473, dtype="bool") /* ty=Tensor[(1, 13, 8), bool] */;
  %477 = dyn.reshape(%474, %475, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %478 = %465.0;
  %479 = @func_3856() /* ty=Tensor[(15, 2, 14), bool] */;
  %480 = not_equal(%476, %477) /* ty=Tensor[(?, 13, 8), bool] */;
  (%478, %var_4667, %479, %480)
}

def @func_3318() -> (Tensor[(8, 12, 6), float64],) {
  %481 = @func_2754() /* ty=(Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float32]) */;
  %482 = %481.0;
  (%482,)
}

def @func_4247() -> (Tensor[(15, 2, 14), uint8], Tensor[(8, 12, 6), uint8]) {
  @func_4245() /* ty=(Tensor[(15, 2, 14), uint8], Tensor[(8, 12, 6), uint8]) */
}

def @func_3458(%var_3456: Tensor[(8, 12, 6), float32]) -> (Tensor[(8, 12, 6), bool],) {
  @func_3455(%var_3456) /* ty=(Tensor[(8, 12, 6), bool],) */
}

def @func_4403() -> Tensor[(14, 10, 3), float64] {
  @func_4401() /* ty=Tensor[(14, 10, 3), float64] */
}

def @func_1484() -> (Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float32]) {
  @func_1482() /* ty=(Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float32]) */
}

def @func_4245() -> (Tensor[(15, 2, 14), uint8], Tensor[(8, 12, 6), uint8]) {
  %483 = cast(meta[relay.Constant][13] /* ty=Tensor[(420), uint8] */, dtype="uint8") /* ty=Tensor[(420), uint8] */;
  %484 = cast(meta[relay.Constant][13] /* ty=Tensor[(420), uint8] */, dtype="uint8") /* ty=Tensor[(420), uint8] */;
  %485 = reshape(%483, newshape=[15, 2, 14]) /* ty=Tensor[(15, 2, 14), uint8] */;
  %486 = reshape(%484, newshape=[15, 2, 14]) /* ty=Tensor[(15, 2, 14), uint8] */;
  %487 = @func_326(%485, %486) /* ty=(Tensor[(15, 2, 14), bool],) */;
  %488 = %487.0;
  %489 = cast(meta[relay.Constant][13] /* ty=Tensor[(420), uint8] */, dtype="uint8") /* ty=Tensor[(420), uint8] */;
  %490 = shape_of(%488, dtype="int32") /* ty=Tensor[(3), int32] */;
  %491 = cast(%488, dtype="uint8") /* ty=Tensor[(15, 2, 14), uint8] */;
  %492 = dyn.reshape(%489, %490, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %493 = @func_3989() /* ty=(Tensor[(8, 12, 6), float32],) */;
  %494 = %493.0;
  %495 = cast(meta[relay.Constant][14] /* ty=Tensor[(8, 12, 6), float32] */, dtype="uint8") /* ty=Tensor[(8, 12, 6), uint8] */;
  %496 = shape_of(%494, dtype="int32") /* ty=Tensor[(3), int32] */;
  %497 = cast(%494, dtype="uint8") /* ty=Tensor[(8, 12, 6), uint8] */;
  %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %499 = bitwise_and(%491, %492) /* ty=Tensor[(15, 2, 14), uint8] */;
  %500 = right_shift(%497, %498) /* ty=Tensor[(8, 12, 6), uint8] */;
  (%499, %500)
}

def @func_4834() -> (Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), bool], Tensor[(8, 12, 6), float64], Tensor[(15, 2, 14), bool], Tensor[(15, 2, 14), bool]) {
  %501 = @func_3563() /* ty=Tensor[(8, 12, 6), float64] */;
  %502 = cast(%501, dtype="float32") /* ty=Tensor[(8, 12, 6), float32] */;
  %503 = reshape(%502, newshape=[8, 12, 6]) /* ty=Tensor[(8, 12, 6), float32] */;
  %504 = @func_3455(%503) /* ty=(Tensor[(8, 12, 6), bool],) */;
  %505 = @func_2595() /* ty=(Tensor[(8, 12, 6), float64], Tensor[(15, 2, 14), bool], Tensor[(420), uint8]) */;
  %506 = @func_2595() /* ty=(Tensor[(8, 12, 6), float64], Tensor[(15, 2, 14), bool], Tensor[(420), uint8]) */;
  %507 = @func_4606() /* ty=(Tensor[(16, 4, 13), float64], Tensor[(15, 2, 14), bool], Tensor[(8, 12, 6), float32]) */;
  %508 = %504.0;
  %509 = %505.0;
  %510 = %506.1;
  %511 = %507.1;
  (%501, %508, %509, %510, %511)
}

def @func_4553() -> (Tensor[(8, 12, 6), float64],) {
  %512 = @func_1386() /* ty=Tensor[(8, 12, 6), float64] */;
  (%512,)
}

def @func_4836() -> (Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), bool], Tensor[(8, 12, 6), float64], Tensor[(15, 2, 14), bool], Tensor[(15, 2, 14), bool]) {
  @func_4834() /* ty=(Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), bool], Tensor[(8, 12, 6), float64], Tensor[(15, 2, 14), bool], Tensor[(15, 2, 14), bool]) */
}

def @func_430(%var_428: uint64, %var_429: Tensor[(16, 5, 2), uint64]) -> (Tensor[(16, 5, 2), uint64],) {
  %516 = fn (%var_422: uint64, %var_423: Tensor[(16, 5, 2), uint64]) -> (Tensor[(16, 5, 2), uint64],) {
    %513 = cast(%var_422, dtype="uint64") /* ty=uint64 */;
    %514 = cast(%var_423, dtype="uint64") /* ty=Tensor[(16, 5, 2), uint64] */;
    %515 = bitwise_and(%513, %514) /* ty=Tensor[(16, 5, 2), uint64] */;
    (%515,)
  };
  %516(%var_428, %var_429) /* ty=(Tensor[(16, 5, 2), uint64],) */
}

def @func_4607() -> (Tensor[(16, 4, 13), float64], Tensor[(15, 2, 14), bool], Tensor[(8, 12, 6), float32]) {
  %523 = fn () -> (Tensor[(16, 4, 13), float64], Tensor[(15, 2, 14), bool], Tensor[(8, 12, 6), float32]) {
    %517 = cast(meta[relay.Constant][15] /* ty=Tensor[(16, 4, 13), float64] */, dtype="float64") /* ty=Tensor[(16, 4, 13), float64] */;
    %518 = @func_2595() /* ty=(Tensor[(8, 12, 6), float64], Tensor[(15, 2, 14), bool], Tensor[(420), uint8]) */;
    %519 = @func_3404() /* ty=(Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float32], Tensor[(50), int8], Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), int64], Tensor[(5, 2, 5), bool]) */;
    %520 = sin(%517) /* ty=Tensor[(16, 4, 13), float64] */;
    %521 = %518.1;
    %522 = %519.2;
    (%520, %521, %522)
  };
  %523() /* ty=(Tensor[(16, 4, 13), float64], Tensor[(15, 2, 14), bool], Tensor[(8, 12, 6), float32]) */
}

def @func_3832(%var_3830: Tensor[(160), float64], %var_3831: Tensor[(160), float64]) -> (Tensor[(8, 12, 6), float64], Tensor[(1, 13, 8), float32], Tensor[(104), float32], Tensor[(2, 16, 5), float32], Tensor[(2, 16, 14), float32], Tensor[(160), float32], Tensor[(8, 12, 6), float32]) {
  %548 = fn (%var_3747: Tensor[(160), float64], %var_3773: Tensor[(160), float64]) -> (Tensor[(8, 12, 6), float64], Tensor[(1, 13, 8), float32], Tensor[(104), float32], Tensor[(2, 16, 5), float32], Tensor[(2, 16, 14), float32], Tensor[(160), float32], Tensor[(8, 12, 6), float32]) {
    %524 = @func_3505() /* ty=(Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float64]) */;
    %525 = cast(meta[relay.Constant][16] /* ty=Tensor[(104), float32] */, dtype="float32") /* ty=Tensor[(104), float32] */;
    %526 = reshape(%525, newshape=[1, 13, 8]) /* ty=Tensor[(1, 13, 8), float32] */;
    %527 = @func_594(%526) /* ty=(Tensor[(1, 13, 8), float32],) */;
    %528 = cast(%var_3747, dtype="float64") /* ty=Tensor[(160), float64] */;
    %529 = cast(%var_3747, dtype="float64") /* ty=Tensor[(160), float64] */;
    %530 = reshape(%528, newshape=[2, 16, 5]) /* ty=Tensor[(2, 16, 5), float64] */;
    %531 = reshape(%529, newshape=[2, 16, 5]) /* ty=Tensor[(2, 16, 5), float64] */;
    %532 = @func_2722(%530, %531) /* ty=(Tensor[(2, 16, 5), float64], Tensor[(2, 16, 5), float64]) */;
    %533 = %532.0;
    %534 = cast(%533, dtype="float32") /* ty=Tensor[(2, 16, 5), float32] */;
    %535 = cast(%var_3773, dtype="int16") /* ty=Tensor[(160), int16] */;
    %536 = shape_of(%var_3747, dtype="int32") /* ty=Tensor[(1), int32] */;
    %537 = cast(%var_3747, dtype="int16") /* ty=Tensor[(160), int16] */;
    %538 = dyn.reshape(%535, %536, newshape=[]) /* ty=Tensor[(?), int16] */;
    %539 = bitwise_and(%537, %538) /* ty=Tensor[(160), int16] */;
    %540 = cast(%539, dtype="float32") /* ty=Tensor[(160), float32] */;
    %541 = @func_3286() /* ty=(Tensor[(8, 12, 6), float32],) */;
    %542 = %524.0;
    %543 = %527.0;
    %544 = cos(%534) /* ty=Tensor[(2, 16, 5), float32] */;
    %545 = @func_3133() /* ty=Tensor[(2, 16, 14), float32] */;
    %546 = sigmoid(%540) /* ty=Tensor[(160), float32] */;
    %547 = %541.0;
    (%542, %543, meta[relay.Constant][16] /* ty=Tensor[(104), float32] */, %544, %545, %546, %547)
  };
  %548(%var_3830, %var_3831) /* ty=(Tensor[(8, 12, 6), float64], Tensor[(1, 13, 8), float32], Tensor[(104), float32], Tensor[(2, 16, 5), float32], Tensor[(2, 16, 14), float32], Tensor[(160), float32], Tensor[(8, 12, 6), float32]) */
}

def @func_5011() -> (Tensor[(8, 12, 6), float32],) {
  %549 = @func_3286() /* ty=(Tensor[(8, 12, 6), float32],) */;
  %550 = %549.0;
  (%550,)
}

def @func_2996() -> Tensor[(8, 12, 6), float32] {
  @func_2994() /* ty=Tensor[(8, 12, 6), float32] */
}

def @func_3858() -> Tensor[(15, 2, 14), bool] {
  @func_3856() /* ty=Tensor[(15, 2, 14), bool] */
}

def @func_2857() -> (Tensor[(2, 16, 14), float32],) {
  %556 = fn () -> (Tensor[(2, 16, 14), float32],) {
    %551 = cast(meta[relay.Constant][18] /* ty=Tensor[(2, 16, 14), float32] */, dtype="float32") /* ty=Tensor[(2, 16, 14), float32] */;
    %552 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(2, 16, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %553 = cast(meta[relay.Constant][17] /* ty=Tensor[(2, 16, 14), float32] */, dtype="float32") /* ty=Tensor[(2, 16, 14), float32] */;
    %554 = dyn.reshape(%551, %552, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %555 = floor_divide(%553, %554) /* ty=Tensor[(2, 16, 14), float32] */;
    (%555,)
  };
  %556() /* ty=(Tensor[(2, 16, 14), float32],) */
}

def @func_1358(%var_1355: Tensor[(9, 12, 15), float64], %var_1356: Tensor[(104), float32], %var_1357: uint64) -> (Tensor[(9, 12, 15), float32], Tensor[(1, 13, 8), float32], Tensor[(104), float32], Tensor[(16, 5, 2), uint64], uint64, Tensor[(160), uint64]) {
  @func_1353(%var_1355, %var_1356, %var_1357) /* ty=(Tensor[(9, 12, 15), float32], Tensor[(1, 13, 8), float32], Tensor[(104), float32], Tensor[(16, 5, 2), uint64], uint64, Tensor[(160), uint64]) */
}

def @func_2994() -> Tensor[(8, 12, 6), float32] {
  %557 = @func_2080() /* ty=(Tensor[(8, 12, 6), float32],) */;
  %557.0
}

def @func_5110(%var_5108: Tensor[(14, 10, 3), float64]) -> Tensor[(14, 10, 3), uint64] {
  @func_5107(%var_5108) /* ty=Tensor[(14, 10, 3), uint64] */
}

def @func_4267() -> (Tensor[(8, 12, 6), float32],) {
  @func_4265() /* ty=(Tensor[(8, 12, 6), float32],) */
}

def @func_3231(%var_3230: Tensor[(8, 12, 6), float32]) -> Tensor[(8, 12, 6), bool] {
  %566 = fn (%var_3224: Tensor[(8, 12, 6), float32]) -> Tensor[(8, 12, 6), bool] {
    %558 = @func_2080() /* ty=(Tensor[(8, 12, 6), float32],) */;
    %559 = %558.0;
    %560 = cast(%559, dtype="float32") /* ty=Tensor[(8, 12, 6), float32] */;
    %561 = exp(%560) /* ty=Tensor[(8, 12, 6), float32] */;
    %562 = cast(%var_3224, dtype="bool") /* ty=Tensor[(8, 12, 6), bool] */;
    %563 = shape_of(%561, dtype="int32") /* ty=Tensor[(3), int32] */;
    %564 = cast(%561, dtype="bool") /* ty=Tensor[(8, 12, 6), bool] */;
    %565 = dyn.reshape(%562, %563, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    not_equal(%564, %565) /* ty=Tensor[(8, 12, 6), bool] */
  };
  %566(%var_3230) /* ty=Tensor[(8, 12, 6), bool] */
}

def @func_3455(%var_3438: Tensor[(8, 12, 6), float32]) -> (Tensor[(8, 12, 6), bool],) {
  %567 = @func_2240() /* ty=(Tensor[(8, 12, 6), float32], Tensor[(52, 2), bool]) */;
  %568 = %567.0;
  %569 = cast(%var_3438, dtype="bool") /* ty=Tensor[(8, 12, 6), bool] */;
  %570 = shape_of(%568, dtype="int32") /* ty=Tensor[(3), int32] */;
  %571 = cast(%568, dtype="bool") /* ty=Tensor[(8, 12, 6), bool] */;
  %572 = dyn.reshape(%569, %570, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %573 = greater_equal(%571, %572) /* ty=Tensor[(8, 12, 6), bool] */;
  (%573,)
}

def @func_4265() -> (Tensor[(8, 12, 6), float32],) {
  %574 = @func_3286() /* ty=(Tensor[(8, 12, 6), float32],) */;
  %575 = %574.0;
  (%575,)
}

def @func_4401() -> Tensor[(14, 10, 3), float64] {
  %576 = cast(meta[relay.Constant][19] /* ty=Tensor[(14, 10, 3), float64] */, dtype="float64") /* ty=Tensor[(14, 10, 3), float64] */;
  asinh(%576) /* ty=Tensor[(14, 10, 3), float64] */
}

def @func_5842() -> (Tensor[(8, 12, 6), float32],) {
  @func_5840() /* ty=(Tensor[(8, 12, 6), float32],) */
}

def @func_1997() -> (Tensor[(8, 12, 6), float32],) {
  %579 = fn () -> (Tensor[(8, 12, 6), float32],) {
    %577 = @func_1482() /* ty=(Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float32]) */;
    %578 = %577.1;
    (%578,)
  };
  %579() /* ty=(Tensor[(8, 12, 6), float32],) */
}

def @func_5698(%var_5646: Tensor[(4, 10, 12), uint64], %var_5647: Tensor[(4, 10, 12), uint64], %var_5683: uint64) -> (Tensor[(4, 10, 12), bool], Tensor[(104), float32], Tensor[(1620), float64], Tensor[(104), float32], uint64, Tensor[(8, 12, 6), float64], Tensor[(576), float64], Tensor[(4, 10, 12), bool]) {
  %580 = cast(%var_5647, dtype="uint64") /* ty=Tensor[(4, 10, 12), uint64] */;
  %581 = shape_of(%var_5646, dtype="int32") /* ty=Tensor[(3), int32] */;
  %582 = cast(%var_5646, dtype="uint64") /* ty=Tensor[(4, 10, 12), uint64] */;
  %583 = dyn.reshape(%580, %581, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %584 = bitwise_or(%582, %583) /* ty=Tensor[(4, 10, 12), uint64] */;
  %585 = cast(%584, dtype="float32") /* ty=Tensor[(4, 10, 12), float32] */;
  %586 = erf(%585) /* ty=Tensor[(4, 10, 12), float32] */;
  %587 = cast(meta[relay.Constant][20] /* ty=Tensor[(4, 10, 12), float32] */, dtype="bool") /* ty=Tensor[(4, 10, 12), bool] */;
  %588 = shape_of(%586, dtype="int32") /* ty=Tensor[(3), int32] */;
  %589 = cast(%586, dtype="bool") /* ty=Tensor[(4, 10, 12), bool] */;
  %590 = dyn.reshape(%587, %588, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %591 = less(%589, %590) /* ty=Tensor[(4, 10, 12), bool] */;
  %592 = cast(%591, dtype="bool") /* ty=Tensor[(4, 10, 12), bool] */;
  %593 = shape_of(%586, dtype="int32") /* ty=Tensor[(3), int32] */;
  %594 = cast(%586, dtype="bool") /* ty=Tensor[(4, 10, 12), bool] */;
  %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %596 = cast(meta[relay.Constant][21] /* ty=Tensor[(1620), float64] */, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %597 = cast(meta[relay.Constant][22] /* ty=Tensor[(104), float32] */, dtype="float32") /* ty=Tensor[(104), float32] */;
  %598 = cast(%var_5683, dtype="uint64") /* ty=uint64 */;
  %599 = reshape(%596, newshape=[9, 12, 15]) /* ty=Tensor[(9, 12, 15), float64] */;
  %600 = reshape(%597, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %601 = reshape(%598, newshape=[]) /* ty=uint64 */;
  %602 = @func_1353(%599, %600, %601) /* ty=(Tensor[(9, 12, 15), float32], Tensor[(1, 13, 8), float32], Tensor[(104), float32], Tensor[(16, 5, 2), uint64], uint64, Tensor[(160), uint64]) */;
  %603 = cast(meta[relay.Constant][23] /* ty=Tensor[(576), float64] */, dtype="float64") /* ty=Tensor[(576), float64] */;
  %604 = reshape(%603, newshape=[8, 12, 6]) /* ty=Tensor[(8, 12, 6), float64] */;
  %605 = @func_2439(%604) /* ty=(Tensor[(8, 12, 6), bool], Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float64]) */;
  %606 = cast(meta[relay.Constant][20] /* ty=Tensor[(4, 10, 12), float32] */, dtype="bool") /* ty=Tensor[(4, 10, 12), bool] */;
  %607 = shape_of(%586, dtype="int32") /* ty=Tensor[(3), int32] */;
  %608 = cast(%586, dtype="bool") /* ty=Tensor[(4, 10, 12), bool] */;
  %609 = dyn.reshape(%606, %607, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %610 = less_equal(%594, %595) /* ty=Tensor[(4, 10, 12), bool] */;
  %611 = %602.2;
  %612 = %605.2;
  %613 = greater_equal(%608, %609) /* ty=Tensor[(4, 10, 12), bool] */;
  (%610, %611, meta[relay.Constant][21] /* ty=Tensor[(1620), float64] */, meta[relay.Constant][22] /* ty=Tensor[(104), float32] */, %var_5683, %612, meta[relay.Constant][23] /* ty=Tensor[(576), float64] */, %613)
}

def @func_2062(%var_2042: Tensor[(8, 12, 6), float32]) -> (Tensor[(8, 12, 6), float32], Tensor[(6, 270), float64], uint64, Tensor[(52, 2), bool]) {
  %614 = @func_1996() /* ty=(Tensor[(8, 12, 6), float32],) */;
  %615 = %614.0;
  %616 = cast(%615, dtype="float32") /* ty=Tensor[(8, 12, 6), float32] */;
  %617 = log2(%616) /* ty=Tensor[(8, 12, 6), float32] */;
  %618 = cast(%var_2042, dtype="float32") /* ty=Tensor[(8, 12, 6), float32] */;
  %619 = shape_of(%617, dtype="int32") /* ty=Tensor[(3), int32] */;
  %620 = cast(%617, dtype="float32") /* ty=Tensor[(8, 12, 6), float32] */;
  %621 = dyn.reshape(%618, %619, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %622 = cast(meta[relay.Constant][24] /* ty=Tensor[(6, 270), float64] */, dtype="float64") /* ty=Tensor[(6, 270), float64] */;
  %623 = cast(meta[relay.Constant][26] /* ty=Tensor[(52, 2), float32] */, dtype="float32") /* ty=Tensor[(52, 2), float32] */;
  %624 = cast(meta[relay.Constant][25] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %625 = reshape(%622, newshape=[9, 12, 15]) /* ty=Tensor[(9, 12, 15), float64] */;
  %626 = reshape(%623, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %627 = reshape(%624, newshape=[]) /* ty=uint64 */;
  %628 = @func_1353(%625, %626, %627) /* ty=(Tensor[(9, 12, 15), float32], Tensor[(1, 13, 8), float32], Tensor[(104), float32], Tensor[(16, 5, 2), uint64], uint64, Tensor[(160), uint64]) */;
  %629 = %628.4;
  %630 = cast(meta[relay.Constant][26] /* ty=Tensor[(52, 2), float32] */, dtype="bool") /* ty=Tensor[(52, 2), bool] */;
  %631 = cast(%629, dtype="bool") /* ty=bool */;
  %632 = add(%620, %621) /* ty=Tensor[(8, 12, 6), float32] */;
  %633 = less(%630, %631) /* ty=Tensor[(52, 2), bool] */;
  (%632, meta[relay.Constant][24] /* ty=Tensor[(6, 270), float64] */, meta[relay.Constant][25] /* ty=uint64 */, %633)
}

def @func_2356(%var_2350: Tensor[(1, 6, 14), int16], %var_2351: Tensor[(2, 256), float32], %var_2352: uint64, %var_2353: Tensor[(104), float32], %var_2354: Tensor[(1, 900), float64], %var_2355: Tensor[(2016), float64]) -> (Tensor[(14, 6, 14), bool], Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float32], Tensor[(9, 100), float64], Tensor[(104), float32], Tensor[(2016), float64], Tensor[(1, 900), bool], Tensor[(14, 6, 14), bool], Tensor[(2, 256), float64], Tensor[(1, 13, 8), float32]) {
  @func_2348(%var_2350, %var_2351, %var_2352, %var_2353, %var_2354, %var_2355) /* ty=(Tensor[(14, 6, 14), bool], Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float32], Tensor[(9, 100), float64], Tensor[(104), float32], Tensor[(2016), float64], Tensor[(1, 900), bool], Tensor[(14, 6, 14), bool], Tensor[(2, 256), float64], Tensor[(1, 13, 8), float32]) */
}

def @func_2082() -> (Tensor[(8, 12, 6), float32],) {
  @func_2080() /* ty=(Tensor[(8, 12, 6), float32],) */
}

def @func_2595() -> (Tensor[(8, 12, 6), float64], Tensor[(15, 2, 14), bool], Tensor[(420), uint8]) {
  %634 = @func_2123() /* ty=(Tensor[(8, 12, 6), float64],) */;
  %635 = cast(meta[relay.Constant][27] /* ty=Tensor[(420), uint8] */, dtype="uint8") /* ty=Tensor[(420), uint8] */;
  %636 = cast(meta[relay.Constant][27] /* ty=Tensor[(420), uint8] */, dtype="uint8") /* ty=Tensor[(420), uint8] */;
  %637 = reshape(%635, newshape=[15, 2, 14]) /* ty=Tensor[(15, 2, 14), uint8] */;
  %638 = reshape(%636, newshape=[15, 2, 14]) /* ty=Tensor[(15, 2, 14), uint8] */;
  %639 = @func_326(%637, %638) /* ty=(Tensor[(15, 2, 14), bool],) */;
  %640 = %634.0;
  %641 = %639.0;
  (%640, %641, meta[relay.Constant][27] /* ty=Tensor[(420), uint8] */)
}

def @func_3133() -> Tensor[(2, 16, 14), float32] {
  %642 = @func_2856() /* ty=(Tensor[(2, 16, 14), float32],) */;
  %642.0
}

def @func_4377(%var_4359: Tensor[(6, 9, 2), float64]) -> (Tensor[(6, 9, 2), uint8],) {
  %643 = cast(%var_4359, dtype="float64") /* ty=Tensor[(6, 9, 2), float64] */;
  %644 = acosh(%643) /* ty=Tensor[(6, 9, 2), float64] */;
  %645 = cast(%var_4359, dtype="uint8") /* ty=Tensor[(6, 9, 2), uint8] */;
  %646 = shape_of(%644, dtype="int32") /* ty=Tensor[(3), int32] */;
  %647 = cast(%644, dtype="uint8") /* ty=Tensor[(6, 9, 2), uint8] */;
  %648 = dyn.reshape(%645, %646, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %649 = bitwise_and(%647, %648) /* ty=Tensor[(6, 9, 2), uint8] */;
  (%649,)
}

def @func_2954(%var_2916: uint64, %var_2917: Tensor[(160), uint64]) -> (Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float64], Tensor[(160), uint64], Tensor[(16, 5, 2), bool]) {
  %650 = cast(%var_2916, dtype="uint64") /* ty=uint64 */;
  %651 = cast(%var_2917, dtype="uint64") /* ty=Tensor[(160), uint64] */;
  %652 = reshape(%650, newshape=[]) /* ty=uint64 */;
  %653 = reshape(%651, newshape=[160]) /* ty=Tensor[(160), uint64] */;
  %654 = @func_2784(%652, %653) /* ty=(Tensor[(8, 12, 6), float64], Tensor[(16, 5, 2), uint64], uint64, Tensor[(160), uint64]) */;
  %655 = cast(%var_2916, dtype="uint64") /* ty=uint64 */;
  %656 = cast(%var_2917, dtype="uint64") /* ty=Tensor[(160), uint64] */;
  %657 = reshape(%655, newshape=[]) /* ty=uint64 */;
  %658 = reshape(%656, newshape=[16, 5, 2]) /* ty=Tensor[(16, 5, 2), uint64] */;
  %659 = @func_427(%657, %658) /* ty=(Tensor[(16, 5, 2), uint64],) */;
  %660 = %659.0;
  %661 = cast(%660, dtype="bool") /* ty=Tensor[(16, 5, 2), bool] */;
  %662 = cast(%var_2916, dtype="bool") /* ty=bool */;
  %663 = @func_1386() /* ty=Tensor[(8, 12, 6), float64] */;
  %664 = %654.0;
  %665 = greater(%661, %662) /* ty=Tensor[(16, 5, 2), bool] */;
  (%663, %664, %var_2917, %665)
}

def @func_5496(%var_5493: Tensor[(1620, 1), float64], %var_5494: Tensor[(231), int16], %var_5495: Tensor[(6, 18), float64]) -> (Tensor[(8, 12, 6), float64], Tensor[(160), uint64], Tensor[(104), float32], uint64, Tensor[(2, 9, 9), float64], Tensor[(162), float64], Tensor[(2, 16, 14), float32], Tensor[(2, 9, 9), float64], Tensor[(1620, 1), float32], Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float32], Tensor[(6, 9, 2), uint8], Tensor[(6, 18), float64], Tensor[(8, 12, 6), float32], Tensor[(1620, 231), float32], Tensor[(231), uint8], Tensor[(231), int32]) {
  %738 = fn (%var_5318: Tensor[(1620, 1), float64], %var_5324: Tensor[(231), int16], %var_5440: Tensor[(6, 18), float64]) -> (Tensor[(8, 12, 6), float64], Tensor[(160), uint64], Tensor[(104), float32], uint64, Tensor[(2, 9, 9), float64], Tensor[(162), float64], Tensor[(2, 16, 14), float32], Tensor[(2, 9, 9), float64], Tensor[(1620, 1), float32], Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float32], Tensor[(6, 9, 2), uint8], Tensor[(6, 18), float64], Tensor[(8, 12, 6), float32], Tensor[(1620, 231), float32], Tensor[(231), uint8], Tensor[(231), int32]) {
    %666 = @func_4018() /* ty=(Tensor[(8, 12, 6), float64],) */;
    %667 = cast(%var_5318, dtype="float64") /* ty=Tensor[(1620, 1), float64] */;
    %668 = cast(meta[relay.Constant][28] /* ty=Tensor[(104), float32] */, dtype="float32") /* ty=Tensor[(104), float32] */;
    %669 = cast(meta[relay.Constant][29] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %670 = reshape(%667, newshape=[9, 12, 15]) /* ty=Tensor[(9, 12, 15), float64] */;
    %671 = reshape(%668, newshape=[104]) /* ty=Tensor[(104), float32] */;
    %672 = reshape(%669, newshape=[]) /* ty=uint64 */;
    %673 = @func_1353(%670, %671, %672) /* ty=(Tensor[(9, 12, 15), float32], Tensor[(1, 13, 8), float32], Tensor[(104), float32], Tensor[(16, 5, 2), uint64], uint64, Tensor[(160), uint64]) */;
    %674 = cast(meta[relay.Constant][30] /* ty=Tensor[(162), float64] */, dtype="float64") /* ty=Tensor[(162), float64] */;
    %675 = cast(meta[relay.Constant][30] /* ty=Tensor[(162), float64] */, dtype="float64") /* ty=Tensor[(162), float64] */;
    %676 = reshape(%674, newshape=[2, 9, 9]) /* ty=Tensor[(2, 9, 9), float64] */;
    %677 = reshape(%675, newshape=[2, 9, 9]) /* ty=Tensor[(2, 9, 9), float64] */;
    %678 = @func_4288(%676, %677) /* ty=(Tensor[(2, 9, 9), float64],) */;
    %679 = %678.0;
    %680 = cast(%679, dtype="float64") /* ty=Tensor[(2, 9, 9), float64] */;
    %681 = cast(meta[relay.Constant][30] /* ty=Tensor[(162), float64] */, dtype="float64") /* ty=Tensor[(162), float64] */;
    %682 = reshape(%680, newshape=[2, 9, 9]) /* ty=Tensor[(2, 9, 9), float64] */;
    %683 = reshape(%681, newshape=[2, 9, 9]) /* ty=Tensor[(2, 9, 9), float64] */;
    %684 = @func_4288(%682, %683) /* ty=(Tensor[(2, 9, 9), float64],) */;
    %685 = cast(%var_5318, dtype="float32") /* ty=Tensor[(1620, 1), float32] */;
    %686 = cast(meta[relay.Constant][29] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %687 = %673.5;
    %688 = cast(%687, dtype="uint64") /* ty=Tensor[(160), uint64] */;
    %689 = reshape(%686, newshape=[]) /* ty=uint64 */;
    %690 = reshape(%688, newshape=[1, 160]) /* ty=Tensor[(1, 160), uint64] */;
    %691 = @func_3679(%689, %690) /* ty=(Tensor[(15, 2, 14), float64], Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float64], Tensor[(16, 5, 2), uint64], uint64, Tensor[(1, 160), uint64], Tensor[(15, 2, 14), bool]) */;
    %692 = @func_4956() /* ty=(Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float32]) */;
    %693 = cast(%var_5440, dtype="float64") /* ty=Tensor[(6, 18), float64] */;
    %694 = reshape(%693, newshape=[6, 9, 2]) /* ty=Tensor[(6, 9, 2), float64] */;
    %695 = @func_4377(%694) /* ty=(Tensor[(6, 9, 2), uint8],) */;
    %696 = @func_3989() /* ty=(Tensor[(8, 12, 6), float32],) */;
    %697 = cast(%var_5324, dtype="float64") /* ty=Tensor[(231), float64] */;
    %698 = tan(%697) /* ty=Tensor[(231), float64] */;
    %699 = cast(%698, dtype="float32") /* ty=Tensor[(231), float32] */;
    %700 = log2(%699) /* ty=Tensor[(231), float32] */;
    %701 = cast(%700, dtype="float32") /* ty=Tensor[(231), float32] */;
    %702 = cos(%701) /* ty=Tensor[(231), float32] */;
    %703 = cast(%var_5324, dtype="uint8") /* ty=Tensor[(231), uint8] */;
    %704 = cast(%var_5318, dtype="uint8") /* ty=Tensor[(1620, 1), uint8] */;
    %705 = logical_xor(%703, %704) /* ty=Tensor[(1620, 231), uint8] */;
    %706 = cast(%702, dtype="float32") /* ty=Tensor[(231), float32] */;
    %707 = cast(%705, dtype="float32") /* ty=Tensor[(1620, 231), float32] */;
    %708 = cast(%var_5324, dtype="uint8") /* ty=Tensor[(231), uint8] */;
    %709 = shape_of(%698, dtype="int32") /* ty=Tensor[(1), int32] */;
    %710 = cast(%698, dtype="uint8") /* ty=Tensor[(231), uint8] */;
    %711 = dyn.reshape(%708, %709, newshape=[]) /* ty=Tensor[(?), uint8] */;
    %712 = cast(%var_5324, dtype="int16") /* ty=Tensor[(231), int16] */;
    %713 = cast(%var_5324, dtype="int16") /* ty=Tensor[(231), int16] */;
    %714 = reshape(%712, newshape=[11, 7, 3]) /* ty=Tensor[(11, 7, 3), int16] */;
    %715 = reshape(%713, newshape=[11, 7, 3]) /* ty=Tensor[(11, 7, 3), int16] */;
    %716 = @func_295(%714, %715) /* ty=(Tensor[(11, 7, 3), int16],) */;
    %717 = %716.0;
    %718 = cast(%717, dtype="int16") /* ty=Tensor[(11, 7, 3), int16] */;
    %719 = shape_of(%702, dtype="int32") /* ty=Tensor[(1), int32] */;
    %720 = cast(%702, dtype="int16") /* ty=Tensor[(231), int16] */;
    %721 = dyn.reshape(%718, %719, newshape=[]) /* ty=Tensor[(?), int16] */;
    %722 = right_shift(%720, %721) /* ty=Tensor[(231), int16] */;
    %723 = cast(%722, dtype="int32") /* ty=Tensor[(231), int32] */;
    %724 = shape_of(%698, dtype="int32") /* ty=Tensor[(1), int32] */;
    %725 = cast(%698, dtype="int32") /* ty=Tensor[(231), int32] */;
    %726 = dyn.reshape(%723, %724, newshape=[]) /* ty=Tensor[(?), int32] */;
    %727 = %666.0;
    %728 = @func_3133() /* ty=Tensor[(2, 16, 14), float32] */;
    %729 = %684.0;
    %730 = sqrt(%685) /* ty=Tensor[(1620, 1), float32] */;
    %731 = %691.1;
    %732 = %692.0;
    %733 = %695.0;
    %734 = %696.0;
    %735 = mod(%706, %707) /* ty=Tensor[(1620, 231), float32] */;
    %736 = subtract(%710, %711) /* ty=Tensor[(231), uint8] */;
    %737 = bitwise_and(%725, %726) /* ty=Tensor[(231), int32] */;
    (%727, %687, meta[relay.Constant][28] /* ty=Tensor[(104), float32] */, meta[relay.Constant][29] /* ty=uint64 */, %679, meta[relay.Constant][30] /* ty=Tensor[(162), float64] */, %728, %729, %730, %731, %732, %733, %var_5440, %734, %735, %736, %737)
  };
  %738(%var_5493, %var_5494, %var_5495) /* ty=(Tensor[(8, 12, 6), float64], Tensor[(160), uint64], Tensor[(104), float32], uint64, Tensor[(2, 9, 9), float64], Tensor[(162), float64], Tensor[(2, 16, 14), float32], Tensor[(2, 9, 9), float64], Tensor[(1620, 1), float32], Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float32], Tensor[(6, 9, 2), uint8], Tensor[(6, 18), float64], Tensor[(8, 12, 6), float32], Tensor[(1620, 231), float32], Tensor[(231), uint8], Tensor[(231), int32]) */
}

def @func_4019() -> (Tensor[(8, 12, 6), float64],) {
  %741 = fn () -> (Tensor[(8, 12, 6), float64],) {
    %739 = @func_2754() /* ty=(Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float32]) */;
    %740 = %739.0;
    (%740,)
  };
  %741() /* ty=(Tensor[(8, 12, 6), float64],) */
}

def @func_4442(%var_4440: Tensor[(10, 5), int8], %var_4441: Tensor[(5, 2, 5), bool]) -> (Tensor[(8, 12, 6), float64], Tensor[(10, 5), int8], Tensor[(5, 2, 5), uint8]) {
  %752 = fn (%var_4430: Tensor[(10, 5), int8], %var_4434: Tensor[(5, 2, 5), bool]) -> (Tensor[(8, 12, 6), float64], Tensor[(10, 5), int8], Tensor[(5, 2, 5), uint8]) {
    %742 = cast(%var_4430, dtype="int8") /* ty=Tensor[(10, 5), int8] */;
    %743 = reshape(%742, newshape=[5, 2, 5]) /* ty=Tensor[(5, 2, 5), int8] */;
    %744 = @func_3050(%743) /* ty=(Tensor[(5, 2, 5), bool], Tensor[(8, 12, 6), float32]) */;
    %745 = %744.0;
    %746 = cast(%var_4434, dtype="uint8") /* ty=Tensor[(5, 2, 5), uint8] */;
    %747 = shape_of(%745, dtype="int32") /* ty=Tensor[(3), int32] */;
    %748 = cast(%745, dtype="uint8") /* ty=Tensor[(5, 2, 5), uint8] */;
    %749 = dyn.reshape(%746, %747, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %750 = @func_4166() /* ty=Tensor[(8, 12, 6), float64] */;
    %751 = right_shift(%748, %749) /* ty=Tensor[(5, 2, 5), uint8] */;
    (%750, %var_4430, %751)
  };
  %752(%var_4440, %var_4441) /* ty=(Tensor[(8, 12, 6), float64], Tensor[(10, 5), int8], Tensor[(5, 2, 5), uint8]) */
}

def @func_5756() -> Tensor[(8, 12, 6), float64] {
  %753 = @func_4834() /* ty=(Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), bool], Tensor[(8, 12, 6), float64], Tensor[(15, 2, 14), bool], Tensor[(15, 2, 14), bool]) */;
  %753.2
}

def @func_5912(%var_5910: Tensor[(12, 6, 6), uint64], %var_5911: Tensor[(12, 6, 6), uint64]) -> (Tensor[(12, 6, 6), uint16], Tensor[(12, 6, 6), uint16], Tensor[(12, 6, 6), float32]) {
  @func_5908(%var_5910, %var_5911) /* ty=(Tensor[(12, 6, 6), uint16], Tensor[(12, 6, 6), uint16], Tensor[(12, 6, 6), float32]) */
}

def @func_3506() -> (Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float64]) {
  %767 = fn () -> (Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float64]) {
    %754 = @func_3404() /* ty=(Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float32], Tensor[(50), int8], Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), int64], Tensor[(5, 2, 5), bool]) */;
    %755 = %754.1;
    %756 = cast(%755, dtype="float32") /* ty=Tensor[(8, 12, 6), float32] */;
    %757 = rsqrt(%756) /* ty=Tensor[(8, 12, 6), float32] */;
    %758 = cast(%757, dtype="float64") /* ty=Tensor[(8, 12, 6), float64] */;
    %759 = shape_of(%755, dtype="int32") /* ty=Tensor[(3), int32] */;
    %760 = cast(%755, dtype="float64") /* ty=Tensor[(8, 12, 6), float64] */;
    %761 = dyn.reshape(%758, %759, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %762 = @func_2595() /* ty=(Tensor[(8, 12, 6), float64], Tensor[(15, 2, 14), bool], Tensor[(420), uint8]) */;
    %763 = @func_2123() /* ty=(Tensor[(8, 12, 6), float64],) */;
    %764 = mod(%760, %761) /* ty=Tensor[(8, 12, 6), float64] */;
    %765 = %762.0;
    %766 = %763.0;
    (%764, %765, %766)
  };
  %767() /* ty=(Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float64]) */
}

def @func_4072() -> Tensor[(8, 12, 6), float32] {
  %769 = fn () -> Tensor[(8, 12, 6), float32] {
    %768 = @func_3989() /* ty=(Tensor[(8, 12, 6), float32],) */;
    %768.0
  };
  %769() /* ty=Tensor[(8, 12, 6), float32] */
}

def @func_3405() -> (Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float32], Tensor[(50), int8], Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), int64], Tensor[(5, 2, 5), bool]) {
  %798 = fn () -> (Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float32], Tensor[(50), int8], Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), int64], Tensor[(5, 2, 5), bool]) {
    %770 = @func_2123() /* ty=(Tensor[(8, 12, 6), float64],) */;
    %771 = %770.0;
    %772 = cast(%771, dtype="float64") /* ty=Tensor[(8, 12, 6), float64] */;
    %773 = sin(%772) /* ty=Tensor[(8, 12, 6), float64] */;
    %774 = cast(%773, dtype="float32") /* ty=Tensor[(8, 12, 6), float32] */;
    %775 = shape_of(%771, dtype="int32") /* ty=Tensor[(3), int32] */;
    %776 = cast(%771, dtype="float32") /* ty=Tensor[(8, 12, 6), float32] */;
    %777 = dyn.reshape(%774, %775, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %778 = cast(%771, dtype="float64") /* ty=Tensor[(8, 12, 6), float64] */;
    %779 = cast(meta[relay.Constant][31] /* ty=Tensor[(50), int8] */, dtype="int8") /* ty=Tensor[(50), int8] */;
    %780 = reshape(%779, newshape=[5, 2, 5]) /* ty=Tensor[(5, 2, 5), int8] */;
    %781 = @func_3050(%780) /* ty=(Tensor[(5, 2, 5), bool], Tensor[(8, 12, 6), float32]) */;
    %782 = @func_2754() /* ty=(Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float32]) */;
    %783 = cast(%771, dtype="float32") /* ty=Tensor[(8, 12, 6), float32] */;
    %784 = log10(%783) /* ty=Tensor[(8, 12, 6), float32] */;
    %785 = cast(%771, dtype="int64") /* ty=Tensor[(8, 12, 6), int64] */;
    %786 = shape_of(%784, dtype="int32") /* ty=Tensor[(3), int32] */;
    %787 = cast(%784, dtype="int64") /* ty=Tensor[(8, 12, 6), int64] */;
    %788 = dyn.reshape(%785, %786, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %789 = cast(meta[relay.Constant][31] /* ty=Tensor[(50), int8] */, dtype="int8") /* ty=Tensor[(50), int8] */;
    %790 = reshape(%789, newshape=[5, 2, 5]) /* ty=Tensor[(5, 2, 5), int8] */;
    %791 = @func_3050(%790) /* ty=(Tensor[(5, 2, 5), bool], Tensor[(8, 12, 6), float32]) */;
    %792 = floor_mod(%776, %777) /* ty=Tensor[(8, 12, 6), float32] */;
    %793 = atan(%778) /* ty=Tensor[(8, 12, 6), float64] */;
    %794 = %781.1;
    %795 = %782.1;
    %796 = logical_xor(%787, %788) /* ty=Tensor[(8, 12, 6), int64] */;
    %797 = %791.0;
    (%792, %793, %794, meta[relay.Constant][31] /* ty=Tensor[(50), int8] */, %795, %796, %797)
  };
  %798() /* ty=(Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float32], Tensor[(50), int8], Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), int64], Tensor[(5, 2, 5), bool]) */
}

def @func_5840() -> (Tensor[(8, 12, 6), float32],) {
  %799 = @func_3989() /* ty=(Tensor[(8, 12, 6), float32],) */;
  %800 = %799.0;
  (%800,)
}

def @func_2080() -> (Tensor[(8, 12, 6), float32],) {
  %801 = @func_1996() /* ty=(Tensor[(8, 12, 6), float32],) */;
  %802 = %801.0;
  (%802,)
}

def @func_2348(%var_2250: Tensor[(1, 6, 14), int16], %var_2291: Tensor[(2, 256), float32], %var_2292: uint64, %var_2293: Tensor[(104), float32], %var_2294: Tensor[(1, 900), float64], %var_2295: Tensor[(2016), float64]) -> (Tensor[(14, 6, 14), bool], Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float32], Tensor[(9, 100), float64], Tensor[(104), float32], Tensor[(2016), float64], Tensor[(1, 900), bool], Tensor[(14, 6, 14), bool], Tensor[(2, 256), float64], Tensor[(1, 13, 8), float32]) {
  %803 = cast(%var_2250, dtype="bool") /* ty=Tensor[(1, 6, 14), bool] */;
  %804 = cast(meta[relay.Constant][32] /* ty=Tensor[(14, 6, 14), int16] */, dtype="bool") /* ty=Tensor[(14, 6, 14), bool] */;
  %805 = @func_2240() /* ty=(Tensor[(8, 12, 6), float32], Tensor[(52, 2), bool]) */;
  %806 = @func_1996() /* ty=(Tensor[(8, 12, 6), float32],) */;
  %807 = cast(%var_2291, dtype="float32") /* ty=Tensor[(2, 256), float32] */;
  %808 = cast(%var_2292, dtype="uint64") /* ty=uint64 */;
  %809 = cast(%var_2293, dtype="float32") /* ty=Tensor[(104), float32] */;
  %810 = cast(%var_2294, dtype="float64") /* ty=Tensor[(1, 900), float64] */;
  %811 = cast(%var_2295, dtype="float64") /* ty=Tensor[(2016), float64] */;
  %812 = reshape(%807, newshape=[8, 64]) /* ty=Tensor[(8, 64), float32] */;
  %813 = reshape(%808, newshape=[]) /* ty=uint64 */;
  %814 = reshape(%809, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %815 = reshape(%810, newshape=[9, 100]) /* ty=Tensor[(9, 100), float64] */;
  %816 = reshape(%811, newshape=[2016]) /* ty=Tensor[(2016), float64] */;
  %817 = @func_1924(%812, %813, %814, %815, %816) /* ty=(Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float64], Tensor[(160), uint64], Tensor[(270, 6), float64], Tensor[(160), uint64], Tensor[(1, 13, 8), float32], Tensor[(104), float32], Tensor[(2, 16, 16), float64], Tensor[(2, 16, 16), int64], Tensor[(104), float32], Tensor[(9, 100), float64], Tensor[(2016), float64]) */;
  %818 = cast(%var_2292, dtype="bool") /* ty=bool */;
  %819 = cast(%var_2294, dtype="bool") /* ty=Tensor[(1, 900), bool] */;
  %820 = cast(%var_2250, dtype="bool") /* ty=Tensor[(1, 6, 14), bool] */;
  %821 = cast(meta[relay.Constant][32] /* ty=Tensor[(14, 6, 14), int16] */, dtype="bool") /* ty=Tensor[(14, 6, 14), bool] */;
  %822 = cast(%var_2291, dtype="float64") /* ty=Tensor[(2, 256), float64] */;
  %823 = cast(%var_2292, dtype="float64") /* ty=float64 */;
  %824 = subtract(%822, %823) /* ty=Tensor[(2, 256), float64] */;
  %825 = cast(%824, dtype="float32") /* ty=Tensor[(2, 256), float32] */;
  %826 = cast(%var_2292, dtype="uint64") /* ty=uint64 */;
  %827 = cast(%var_2293, dtype="float32") /* ty=Tensor[(104), float32] */;
  %828 = greater(%818, %819) /* ty=Tensor[(1, 900), bool] */;
  %829 = cast(%828, dtype="float64") /* ty=Tensor[(1, 900), float64] */;
  %830 = cast(%var_2295, dtype="float64") /* ty=Tensor[(2016), float64] */;
  %831 = reshape(%825, newshape=[8, 64]) /* ty=Tensor[(8, 64), float32] */;
  %832 = reshape(%826, newshape=[]) /* ty=uint64 */;
  %833 = reshape(%827, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %834 = reshape(%829, newshape=[9, 100]) /* ty=Tensor[(9, 100), float64] */;
  %835 = reshape(%830, newshape=[2016]) /* ty=Tensor[(2016), float64] */;
  %836 = @func_1924(%831, %832, %833, %834, %835) /* ty=(Tensor[(8, 12, 6), float32], Tensor[(8, 12, 6), float64], Tensor[(160), uint64], Tensor[(270, 6), float64], Tensor[(160), uint64], Tensor[(1, 13, 8), float32], Tensor[(104), float32], Tensor[(2, 16, 16), float64], Tensor[(2, 16, 16), int64], Tensor[(104), float32], Tensor[(9, 100), float64], Tensor[(2016), float64]) */;
  %837 = less_equal(%803, %804) /* ty=Tensor[(14, 6, 14), bool] */;
  %838 = %805.0;
  %839 = %806.0;
  %840 = %817.10;
  %841 = not_equal(%820, %821) /* ty=Tensor[(14, 6, 14), bool] */;
  %842 = %836.5;
  (%837, %838, %839, %840, %var_2293, %var_2295, %828, %841, %824, %842)
}

def @func_4941() -> (Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float64]) {
  %846 = fn () -> (Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float64]) {
    %843 = @func_4018() /* ty=(Tensor[(8, 12, 6), float64],) */;
    %844 = %843.0;
    %845 = @func_4166() /* ty=Tensor[(8, 12, 6), float64] */;
    (%844, %845)
  };
  %846() /* ty=(Tensor[(8, 12, 6), float64], Tensor[(8, 12, 6), float64]) */
}

def @func_1353(%var_1328: Tensor[(9, 12, 15), float64], %var_1346: Tensor[(104), float32], %var_1349: uint64) -> (Tensor[(9, 12, 15), float32], Tensor[(1, 13, 8), float32], Tensor[(104), float32], Tensor[(16, 5, 2), uint64], uint64, Tensor[(160), uint64]) {
  %847 = cast(%var_1328, dtype="float64") /* ty=Tensor[(9, 12, 15), float64] */;
  %848 = asinh(%847) /* ty=Tensor[(9, 12, 15), float64] */;
  %849 = cast(%848, dtype="float32") /* ty=Tensor[(9, 12, 15), float32] */;
  %850 = cast(%var_1346, dtype="float32") /* ty=Tensor[(104), float32] */;
  %851 = reshape(%850, newshape=[1, 13, 8]) /* ty=Tensor[(1, 13, 8), float32] */;
  %852 = @func_594(%851) /* ty=(Tensor[(1, 13, 8), float32],) */;
  %853 = cast(%var_1349, dtype="uint64") /* ty=uint64 */;
  %854 = cast(meta[relay.Constant][33] /* ty=Tensor[(160), uint64] */, dtype="uint64") /* ty=Tensor[(160), uint64] */;
  %855 = reshape(%853, newshape=[]) /* ty=uint64 */;
  %856 = reshape(%854, newshape=[16, 5, 2]) /* ty=Tensor[(16, 5, 2), uint64] */;
  %857 = @func_427(%855, %856) /* ty=(Tensor[(16, 5, 2), uint64],) */;
  %858 = exp(%849) /* ty=Tensor[(9, 12, 15), float32] */;
  %859 = %852.0;
  %860 = %857.0;
  (%858, %859, %var_1346, %860, %var_1349, meta[relay.Constant][33] /* ty=Tensor[(160), uint64] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */The type inference pass was unable to infer a type for this expression.
This usually occurs when an operator call is under constrained in some way, check other reported errors for hints of what may of happened.
The type inference pass was unable to infer a type for this expression.
This usually occurs when an operator call is under constrained in some way, check other reported errors for hints of what may of happened.
The type inference pass was unable to infer a type for this expression.
This usually occurs when an operator call is under constrained in some way, check other reported errors for hints of what may of happened.
The type inference pass was unable to infer a type for this expression.
This usually occurs when an operator call is under constrained in some way, check other reported errors for hints of what may of happened.

===================================
note: run with `TVM_BACKTRACE=1` environment variable to display a backtrace.
