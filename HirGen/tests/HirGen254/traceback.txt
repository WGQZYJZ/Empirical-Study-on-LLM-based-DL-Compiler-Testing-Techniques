==========mod==========
#[version = "0.0.5"]
def @func_2480() -> Tensor[(16, 2, 10), float64] {
  %0 = @func_2421() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(16, 2, 10), float64], Tensor[(4, 80), float64]) */;
  %1 = %0.1;
  %2 = cast(%1, dtype="float64") /* ty=Tensor[(16, 2, 10), float64] */;
  acosh(%2) /* ty=Tensor[(16, 2, 10), float64] */
}

def @func_6237() -> (Tensor[(120), float32], Tensor[(192), float64], Tensor[(2, 96), float64]) {
  %3 = @func_3008() /* ty=(Tensor[(6, 14, 6), bool], Tensor[(120), int16], Tensor[(6, 14, 6), float64]) */;
  %4 = %3.1;
  %5 = cast(%4, dtype="float32") /* ty=Tensor[(120), float32] */;
  %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 96), float64] */, dtype="float64") /* ty=Tensor[(2, 96), float64] */;
  %7 = reshape(%6, newshape=[192]) /* ty=Tensor[(192), float64] */;
  %8 = @func_1602(%7) /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(3, 9, 12), float32], Tensor[(192), float64], Tensor[(4, 11, 5), float32], Tensor[(12, 4, 4), float64], Tensor[(2, 24), float64]) */;
  %9 = sin(%5) /* ty=Tensor[(120), float32] */;
  %10 = %8.3;
  (%9, %10, meta[relay.Constant][0] /* ty=Tensor[(2, 96), float64] */)
}

def @func_3885() -> (Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), bool], Tensor[(16, 2, 10), float64]) {
  %11 = @func_3518() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float64]) */;
  %12 = @func_2060() /* ty=(Tensor[(4, 11, 5), bool], Tensor[(4, 11, 5), float32]) */;
  %13 = %11.0;
  %14 = @func_3400() /* ty=Tensor[(4, 11, 5), float32] */;
  %15 = %12.0;
  %16 = @func_2480() /* ty=Tensor[(16, 2, 10), float64] */;
  (%13, %14, %15, %16)
}

def @func_5777(%var_5770: Tensor[(11, 9), float64]) -> (Tensor[(120), int16], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(11, 9), float64]) {
  %17 = @func_4336() /* ty=(Tensor[(120), int16], Tensor[(4, 11, 5), float64]) */;
  %18 = cast(%var_5770, dtype="float64") /* ty=Tensor[(11, 9), float64] */;
  %19 = reshape(%18, newshape=[9, 1, 11]) /* ty=Tensor[(9, 1, 11), float64] */;
  %20 = @func_3081(%19) /* ty=(Tensor[(9, 1, 11), float64], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32]) */;
  %21 = %17.0;
  %22 = @func_5656() /* ty=Tensor[(4, 11, 5), float32] */;
  %23 = @func_1332() /* ty=Tensor[(4, 11, 5), float32] */;
  %24 = %20.2;
  (%21, %22, %23, %24, %var_5770)
}

def @func_6396(%var_6298: Tensor[(1, 4, 1), float32]) -> (Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(?, 4, ?), float32], Tensor[(1, 4, 1), float32], Tensor[(4, 11, 5), int8], Tensor[(504, 1), float64], Tensor[(16, 2, 10), float64], Tensor[(192), int64], Tensor[(1, 4, 1), float64], Tensor[(?, 4, ?), int32], Tensor[(?, 4, ?), bool]) {
  %25 = @func_4987() /* ty=(Tensor[(4, 11, 5), float64], Tensor[(4, 11, 5), float32]) */;
  %26 = cast(%var_6298, dtype="float32") /* ty=Tensor[(1, 4, 1), float32] */;
  %27 = asin(%26) /* ty=Tensor[(1, 4, 1), float32] */;
  %28 = cast(%27, dtype="float32") /* ty=Tensor[(1, 4, 1), float32] */;
  %29 = erf(%28) /* ty=Tensor[(1, 4, 1), float32] */;
  %30 = cast(%27, dtype="float32") /* ty=Tensor[(1, 4, 1), float32] */;
  %31 = shape_of(%29, dtype="int32") /* ty=Tensor[(3), int32] */;
  %32 = cast(%29, dtype="float32") /* ty=Tensor[(1, 4, 1), float32] */;
  %33 = dyn.reshape(%30, %31, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %34 = cast(%27, dtype="float32") /* ty=Tensor[(1, 4, 1), float32] */;
  %35 = cast(meta[relay.Constant][1] /* ty=Tensor[(504, 1), float64] */, dtype="float64") /* ty=Tensor[(504, 1), float64] */;
  %36 = reshape(%35, newshape=[6, 14, 6]) /* ty=Tensor[(6, 14, 6), float64] */;
  %37 = @func_5500(%36) /* ty=(Tensor[(4, 11, 5), int8], Tensor[(6, 14, 6), uint32], Tensor[(6, 14, 6), uint8]) */;
  %38 = cast(meta[relay.Constant][2] /* ty=Tensor[(192), int64] */, dtype="int64") /* ty=Tensor[(192), int64] */;
  %39 = reshape(%38, newshape=[192]) /* ty=Tensor[(192), int64] */;
  %40 = @func_2616(%39) /* ty=(Tensor[(4, 11, 5), float64], Tensor[(16, 2, 10), float64], Tensor[(192), int64]) */;
  %41 = cast(%29, dtype="float64") /* ty=Tensor[(1, 4, 1), float64] */;
  %42 = sqrt(%41) /* ty=Tensor[(1, 4, 1), float64] */;
  %43 = cast(%42, dtype="float64") /* ty=Tensor[(1, 4, 1), float64] */;
  %44 = cast(%42, dtype="int32") /* ty=Tensor[(1, 4, 1), int32] */;
  %45 = shape_of(%27, dtype="int32") /* ty=Tensor[(3), int32] */;
  %46 = cast(%27, dtype="int32") /* ty=Tensor[(1, 4, 1), int32] */;
  %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %48 = cast(%var_6298, dtype="bool") /* ty=Tensor[(1, 4, 1), bool] */;
  %49 = shape_of(%42, dtype="int32") /* ty=Tensor[(3), int32] */;
  %50 = cast(%42, dtype="bool") /* ty=Tensor[(1, 4, 1), bool] */;
  %51 = dyn.reshape(%48, %49, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %52 = @func_2742() /* ty=Tensor[(4, 11, 5), float32] */;
  %53 = %25.1;
  %54 = floor_divide(%32, %33) /* ty=Tensor[(?, 4, ?), float32] */;
  %55 = tan(%34) /* ty=Tensor[(1, 4, 1), float32] */;
  %56 = %37.0;
  %57 = %40.1;
  %58 = rsqrt(%43) /* ty=Tensor[(1, 4, 1), float64] */;
  %59 = bitwise_and(%46, %47) /* ty=Tensor[(?, 4, ?), int32] */;
  %60 = equal(%50, %51) /* ty=Tensor[(?, 4, ?), bool] */;
  (%52, %53, %54, %55, %56, meta[relay.Constant][1] /* ty=Tensor[(504, 1), float64] */, %57, meta[relay.Constant][2] /* ty=Tensor[(192), int64] */, %58, %59, %60)
}

def @func_4523() -> (Tensor[(4, 11, 5), float32], Tensor[(16, 2, 10), float64]) {
  %61 = @func_2348() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32]) */;
  %62 = @func_2421() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(16, 2, 10), float64], Tensor[(4, 80), float64]) */;
  %63 = %61.1;
  %64 = %62.1;
  (%63, %64)
}

def @func_7298() -> Tensor[(216), float64] {
  @func_2852() /* ty=Tensor[(216), float64] */
}

def @func_2197() -> Tensor[(4, 11, 5), float64] {
  %65 = @func_1824() /* ty=(Tensor[(4, 11, 5), float64],) */;
  %65.0
}

def @func_3216() -> (Tensor[(4, 11, 5), float64],) {
  %66 = @func_1665() /* ty=(Tensor[(4, 11, 5), float64],) */;
  %67 = %66.0;
  (%67,)
}

def @func_3400() -> Tensor[(4, 11, 5), float32] {
  %68 = @func_2901() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(12, 3, 8), bool], Tensor[(72, 4), bool]) */;
  %68.0
}

def @func_4674() -> (Tensor[(13, 1, 8), float64], Tensor[(120), int16]) {
  %69 = cast(meta[relay.Constant][3] /* ty=Tensor[(13, 1, 8), float64] */, dtype="float64") /* ty=Tensor[(13, 1, 8), float64] */;
  %70 = @func_4269() /* ty=(Tensor[(120), int16],) */;
  %71 = sqrt(%69) /* ty=Tensor[(13, 1, 8), float64] */;
  %72 = %70.0;
  (%71, %72)
}

def @func_6093() -> Tensor[(4, 11, 5), float64] {
  @func_2870() /* ty=Tensor[(4, 11, 5), float64] */
}

def @func_1651() -> (Tensor[(4, 11, 5), float32], Tensor[(216), float64], Tensor[(216), float64], Tensor[(4, 11, 5), float32]) {
  %73 = cast(meta[relay.Constant][4] /* ty=Tensor[(216), float64] */, dtype="float64") /* ty=Tensor[(216), float64] */;
  %74 = reshape(%73, newshape=[216]) /* ty=Tensor[(216), float64] */;
  %75 = @func_1162(%74) /* ty=(Tensor[(4, 11, 5), float32], Tensor[(16, 2, 10), bool], Tensor[(216), float64], Tensor[(192), float64], Tensor[(320), float64], Tensor[(12, 4, 4), float64], Tensor[(1, 48), float64], Tensor[(320), float64]) */;
  %76 = @func_1197() /* ty=Tensor[(4, 11, 5), float32] */;
  %77 = %75.2;
  %78 = @func_1197() /* ty=Tensor[(4, 11, 5), float32] */;
  (%76, %77, meta[relay.Constant][4] /* ty=Tensor[(216), float64] */, %78)
}

def @func_1963() -> (Tensor[(4, 11, 5), float32], Tensor[(6, 4, 5), bool], Tensor[(120), int16]) {
  %79 = cast(meta[relay.Constant][5] /* ty=Tensor[(120), int16] */, dtype="int16") /* ty=Tensor[(120), int16] */;
  %80 = cast(meta[relay.Constant][5] /* ty=Tensor[(120), int16] */, dtype="float64") /* ty=Tensor[(120), float64] */;
  %81 = reshape(%79, newshape=[6, 4, 5]) /* ty=Tensor[(6, 4, 5), int16] */;
  %82 = reshape(%80, newshape=[6, 4, 5]) /* ty=Tensor[(6, 4, 5), float64] */;
  %83 = @func_190(%81, %82) /* ty=(Tensor[(6, 4, 5), bool], Tensor[(6, 4, 5), bool]) */;
  %84 = @func_1452() /* ty=Tensor[(4, 11, 5), float32] */;
  %85 = %83.1;
  (%84, %85, meta[relay.Constant][5] /* ty=Tensor[(120), int16] */)
}

def @func_1911(%var_1869: Tensor[(8, 11, 4), uint16], %var_1870: Tensor[(8, 11, 4), uint16], %var_1909: Tensor[(4, 48), int64]) -> (Tensor[(8, 11, 4), bool], Tensor[(320), float64], Tensor[(4, 48), int64]) {
  %86 = cast(%var_1870, dtype="bool") /* ty=Tensor[(8, 11, 4), bool] */;
  %87 = shape_of(%var_1869, dtype="int32") /* ty=Tensor[(3), int32] */;
  %88 = cast(%var_1869, dtype="bool") /* ty=Tensor[(8, 11, 4), bool] */;
  %89 = dyn.reshape(%86, %87, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %90 = equal(%88, %89) /* ty=Tensor[(8, 11, 4), bool] */;
  %91 = cast(meta[relay.Constant][6] /* ty=Tensor[(8, 11, 4), bool] */, dtype="bool") /* ty=Tensor[(8, 11, 4), bool] */;
  %92 = shape_of(%90, dtype="int32") /* ty=Tensor[(3), int32] */;
  %93 = cast(%90, dtype="bool") /* ty=Tensor[(8, 11, 4), bool] */;
  %94 = dyn.reshape(%91, %92, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %95 = cast(%var_1909, dtype="int64") /* ty=Tensor[(4, 48), int64] */;
  %96 = reshape(%95, newshape=[3, 16, 4]) /* ty=Tensor[(3, 16, 4), int64] */;
  %97 = @func_1110(%96) /* ty=(Tensor[(3, 16, 4), int64], Tensor[(16, 2, 10), float64], Tensor[(320), float64], Tensor[(3, 16, 4), float32]) */;
  %98 = less_equal(%93, %94) /* ty=Tensor[(8, 11, 4), bool] */;
  %99 = %97.2;
  (%98, %99, %var_1909)
}

def @func_3455() -> Tensor[(120), int16] {
  %100 = @func_1963() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(6, 4, 5), bool], Tensor[(120), int16]) */;
  %100.2
}

def @func_1824() -> (Tensor[(4, 11, 5), float64],) {
  %101 = @func_1665() /* ty=(Tensor[(4, 11, 5), float64],) */;
  %102 = %101.0;
  (%102,)
}

def @func_4269() -> (Tensor[(120), int16],) {
  %103 = @func_3455() /* ty=Tensor[(120), int16] */;
  (%103,)
}

def @func_7613() -> (Tensor[(216), float64], Tensor[(4, 11, 5), float32], Tensor[(99), float64]) {
  %104 = @func_1651() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(216), float64], Tensor[(216), float64], Tensor[(4, 11, 5), float32]) */;
  %105 = cast(meta[relay.Constant][7] /* ty=Tensor[(99), float64] */, dtype="float64") /* ty=Tensor[(99), float64] */;
  %106 = reshape(%105, newshape=[9, 1, 11]) /* ty=Tensor[(9, 1, 11), float64] */;
  %107 = @func_3081(%106) /* ty=(Tensor[(9, 1, 11), float64], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32]) */;
  %108 = %104.1;
  %109 = %107.1;
  (%108, %109, meta[relay.Constant][7] /* ty=Tensor[(99), float64] */)
}

def @func_3518() -> (Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float64]) {
  %110 = @func_2468() /* ty=Tensor[(4, 11, 5), float32] */;
  %111 = cast(%110, dtype="float64") /* ty=Tensor[(4, 11, 5), float64] */;
  %112 = reshape(%111, newshape=[4, 11, 5]) /* ty=Tensor[(4, 11, 5), float64] */;
  %113 = @func_1256(%112) /* ty=Tensor[(4, 11, 5), float64] */;
  (%110, %113)
}

def @func_2367() -> Tensor[(4, 11, 5), float32] {
  @func_1452() /* ty=Tensor[(4, 11, 5), float32] */
}

def @func_2825(%var_2788: Tensor[(440, 1), int8]) -> (Tensor[(4, 11, 5), float32], Tensor[(440, ?), uint8]) {
  %114 = cast(%var_2788, dtype="int8") /* ty=Tensor[(440, 1), int8] */;
  %115 = cast(%var_2788, dtype="int8") /* ty=Tensor[(440, 1), int8] */;
  %116 = reshape(%114, newshape=[11, 10, 4]) /* ty=Tensor[(11, 10, 4), int8] */;
  %117 = reshape(%115, newshape=[11, 10, 4]) /* ty=Tensor[(11, 10, 4), int8] */;
  %118 = @func_1090(%116, %117) /* ty=(Tensor[(11, 10, 4), bool], Tensor[(12, 4, 4), float64], Tensor[(48), float64], Tensor[(192), float64]) */;
  %119 = %118.0;
  %120 = cast(%119, dtype="uint8") /* ty=Tensor[(11, 10, 4), uint8] */;
  %121 = shape_of(%var_2788, dtype="int32") /* ty=Tensor[(2), int32] */;
  %122 = cast(%var_2788, dtype="uint8") /* ty=Tensor[(440, 1), uint8] */;
  %123 = dyn.reshape(%120, %121, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %124 = @func_882() /* ty=Tensor[(4, 11, 5), float32] */;
  %125 = right_shift(%122, %123) /* ty=Tensor[(440, ?), uint8] */;
  (%124, %125)
}

def @func_2421() -> (Tensor[(4, 11, 5), float32], Tensor[(16, 2, 10), float64], Tensor[(4, 80), float64]) {
  %126 = @func_2150() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(6, 4, 5), bool]) */;
  %127 = cast(meta[relay.Constant][8] /* ty=Tensor[(4, 80), float64] */, dtype="float64") /* ty=Tensor[(4, 80), float64] */;
  %128 = reshape(%127, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float64] */;
  %129 = @func_285(%128) /* ty=(Tensor[(16, 2, 10), float64],) */;
  %130 = %126.1;
  %131 = %129.0;
  (%130, %131, meta[relay.Constant][8] /* ty=Tensor[(4, 80), float64] */)
}

def @func_190(%var_123: Tensor[(6, 4, 5), int16], %var_180: Tensor[(6, 4, 5), float64]) -> (Tensor[(6, 4, 5), bool], Tensor[(6, 4, 5), bool]) {
  %132 = cast(meta[relay.Constant][9] /* ty=Tensor[(6, 4, 5), int16] */, dtype="bool") /* ty=Tensor[(6, 4, 5), bool] */;
  %133 = shape_of(%var_123, dtype="int32") /* ty=Tensor[(3), int32] */;
  %134 = cast(%var_123, dtype="bool") /* ty=Tensor[(6, 4, 5), bool] */;
  %135 = dyn.reshape(%132, %133, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %136 = cast(%var_123, dtype="float64") /* ty=Tensor[(6, 4, 5), float64] */;
  %137 = sin(%136) /* ty=Tensor[(6, 4, 5), float64] */;
  %138 = cast(%137, dtype="float32") /* ty=Tensor[(6, 4, 5), float32] */;
  %139 = atan(%138) /* ty=Tensor[(6, 4, 5), float32] */;
  %140 = cast(%139, dtype="float64") /* ty=Tensor[(6, 4, 5), float64] */;
  %141 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(6, 4, 5), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %142 = cast(meta[relay.Constant][9] /* ty=Tensor[(6, 4, 5), int16] */, dtype="float64") /* ty=Tensor[(6, 4, 5), float64] */;
  %143 = dyn.reshape(%140, %141, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %144 = mod(%142, %143) /* ty=Tensor[(6, 4, 5), float64] */;
  %145 = cast(%var_180, dtype="bool") /* ty=Tensor[(6, 4, 5), bool] */;
  %146 = shape_of(%144, dtype="int32") /* ty=Tensor[(3), int32] */;
  %147 = cast(%144, dtype="bool") /* ty=Tensor[(6, 4, 5), bool] */;
  %148 = dyn.reshape(%145, %146, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %149 = not_equal(%134, %135) /* ty=Tensor[(6, 4, 5), bool] */;
  %150 = logical_or(%147, %148) /* ty=Tensor[(6, 4, 5), bool] */;
  (%149, %150)
}

def @func_5236(%var_5229: Tensor[(96, 2), int64]) -> (Tensor[(4, 11, 5), float64], Tensor[(16, 2, 10), float64], Tensor[(96, 2), bool]) {
  %151 = @func_4405() /* ty=(Tensor[(4, 11, 5), float64], Tensor[(4, 11, 5), float64], Tensor[(4, 11, 5), float32], Tensor[(120), int16]) */;
  %152 = cast(meta[relay.Constant][10] /* ty=Tensor[(96, 2), int64] */, dtype="int64") /* ty=Tensor[(96, 2), int64] */;
  %153 = reshape(%152, newshape=[192]) /* ty=Tensor[(192), int64] */;
  %154 = @func_2616(%153) /* ty=(Tensor[(4, 11, 5), float64], Tensor[(16, 2, 10), float64], Tensor[(192), int64]) */;
  %155 = cast(%var_5229, dtype="bool") /* ty=Tensor[(96, 2), bool] */;
  %156 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(96, 2), int64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %157 = cast(meta[relay.Constant][10] /* ty=Tensor[(96, 2), int64] */, dtype="bool") /* ty=Tensor[(96, 2), bool] */;
  %158 = dyn.reshape(%155, %156, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %159 = %151.1;
  %160 = %154.1;
  %161 = less_equal(%157, %158) /* ty=Tensor[(96, 2), bool] */;
  (%159, %160, %161)
}

def @func_6667(%var_6619: Tensor[(10, 11, 5), float64], %var_6625: int64, %var_6642: Tensor[(320), float64], %var_6645: Tensor[(99), float64]) -> (Tensor[(10, 11, 5), float64], Tensor[(4, 11, 5), float32], int64, Tensor[(1040), int64], Tensor[(12, 4, 4), float64], Tensor[(48), float64], Tensor[(1, 192), float64], Tensor[(4, 11, 5), float32], Tensor[(320), float64], Tensor[(4, 11, 5), float32], Tensor[(99), float64]) {
  %162 = cast(meta[relay.Constant][11] /* ty=Tensor[(10, 11, 5), float64] */, dtype="float64") /* ty=Tensor[(10, 11, 5), float64] */;
  %163 = shape_of(%var_6619, dtype="int32") /* ty=Tensor[(3), int32] */;
  %164 = cast(%var_6619, dtype="float64") /* ty=Tensor[(10, 11, 5), float64] */;
  %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %166 = cast(%var_6625, dtype="int64") /* ty=int64 */;
  %167 = cast(meta[relay.Constant][12] /* ty=Tensor[(1040), int64] */, dtype="int64") /* ty=Tensor[(1040), int64] */;
  %168 = reshape(%166, newshape=[]) /* ty=int64 */;
  %169 = reshape(%167, newshape=[1040]) /* ty=Tensor[(1040), int64] */;
  %170 = @func_3487(%168, %169) /* ty=(Tensor[(4, 11, 5), float32], Tensor[(10, 8, 13), int64], int64, Tensor[(1040), int64]) */;
  %171 = cast(meta[relay.Constant][13] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %172 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 192), float64] */, dtype="float64") /* ty=Tensor[(1, 192), float64] */;
  %173 = reshape(%171, newshape=[12, 4, 1]) /* ty=Tensor[(12, 4, 1), float64] */;
  %174 = reshape(%172, newshape=[12, 4, 4]) /* ty=Tensor[(12, 4, 4), float64] */;
  %175 = @func_307(%173, %174) /* ty=(Tensor[(12, 4, 4), float64], Tensor[(12, 4, 4), float64]) */;
  %176 = cast(%var_6642, dtype="float64") /* ty=Tensor[(320), float64] */;
  %177 = reshape(%176, newshape=[320]) /* ty=Tensor[(320), float64] */;
  %178 = @func_3426(%177) /* ty=(Tensor[(4, 11, 5), float32], Tensor[(16, 2, 10), float64], Tensor[(320), float64]) */;
  %179 = cast(%var_6645, dtype="float64") /* ty=Tensor[(99), float64] */;
  %180 = reshape(%179, newshape=[9, 1, 11]) /* ty=Tensor[(9, 1, 11), float64] */;
  %181 = @func_3081(%180) /* ty=(Tensor[(9, 1, 11), float64], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32]) */;
  %182 = add(%164, %165) /* ty=Tensor[(10, 11, 5), float64] */;
  %183 = %170.0;
  %184 = %175.1;
  %185 = %178.0;
  %186 = %181.1;
  (%182, %183, %var_6625, meta[relay.Constant][12] /* ty=Tensor[(1040), int64] */, %184, meta[relay.Constant][13] /* ty=Tensor[(48), float64] */, meta[relay.Constant][14] /* ty=Tensor[(1, 192), float64] */, %185, %var_6642, %186, %var_6645)
}

def @func_6828() -> (Tensor[(4, 11, 5), float32],) {
  %187 = @func_2367() /* ty=Tensor[(4, 11, 5), float32] */;
  (%187,)
}

def @func_1175(%var_1167: Tensor[(12, 3, 8), bool]) -> Tensor[(12, 3, 8), bool] {
  %188 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 3, 8), bool] */, dtype="bool") /* ty=Tensor[(1, 3, 8), bool] */;
  %189 = cast(%var_1167, dtype="bool") /* ty=Tensor[(12, 3, 8), bool] */;
  logical_and(%188, %189) /* ty=Tensor[(12, 3, 8), bool] */
}

def @func_5713() -> (Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32]) {
  %190 = @func_3755() /* ty=(Tensor[(4, 11, 5), float32],) */;
  %191 = %190.0;
  %192 = @func_5405() /* ty=Tensor[(4, 11, 5), float32] */;
  (%191, %192)
}

def @func_2348() -> (Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32]) {
  %193 = @func_1332() /* ty=Tensor[(4, 11, 5), float32] */;
  %194 = @func_1298() /* ty=Tensor[(4, 11, 5), float32] */;
  (%193, %194)
}

def @func_5968(%var_5960: Tensor[(15, 7, 7), float64], %var_5963: Tensor[(15, 7, 7), float64]) -> Tensor[(15, 7, 7), uint32] {
  %195 = cast(%var_5960, dtype="float64") /* ty=Tensor[(15, 7, 7), float64] */;
  %196 = sigmoid(%195) /* ty=Tensor[(15, 7, 7), float64] */;
  %197 = cast(%var_5963, dtype="uint32") /* ty=Tensor[(15, 7, 7), uint32] */;
  %198 = shape_of(%196, dtype="int32") /* ty=Tensor[(3), int32] */;
  %199 = cast(%196, dtype="uint32") /* ty=Tensor[(15, 7, 7), uint32] */;
  %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  logical_xor(%199, %200) /* ty=Tensor[(15, 7, 7), uint32] */
}

def @func_882() -> Tensor[(4, 11, 5), float32] {
  %201 = cast(meta[relay.Constant][16] /* ty=Tensor[(4, 11, 5), float64] */, dtype="float64") /* ty=Tensor[(4, 11, 5), float64] */;
  %202 = sin(%201) /* ty=Tensor[(4, 11, 5), float64] */;
  %203 = cast(%202, dtype="float32") /* ty=Tensor[(4, 11, 5), float32] */;
  cos(%203) /* ty=Tensor[(4, 11, 5), float32] */
}

def @func_3081(%var_3057: Tensor[(9, 1, 11), float64]) -> (Tensor[(9, 1, 11), float64], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32]) {
  %204 = cast(%var_3057, dtype="float64") /* ty=Tensor[(9, 1, 11), float64] */;
  %205 = @func_2971() /* ty=(Tensor[(4, 11, 5), float32],) */;
  %206 = sigmoid(%204) /* ty=Tensor[(9, 1, 11), float64] */;
  %207 = %205.0;
  %208 = @func_882() /* ty=Tensor[(4, 11, 5), float32] */;
  (%206, %207, %208)
}

def @func_7447(%var_7427: Tensor[(2, 96), int8]) -> (Tensor[(4, 11, 5), float32], Tensor[(96, 2), int64], Tensor[(2, 96), float32]) {
  %209 = @func_5713() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32]) */;
  %210 = cast(meta[relay.Constant][17] /* ty=Tensor[(96, 2), int64] */, dtype="int64") /* ty=Tensor[(96, 2), int64] */;
  %211 = reshape(%210, newshape=[2, 96]) /* ty=Tensor[(2, 96), int64] */;
  %212 = @func_3177(%211) /* ty=(Tensor[(4, 11, 5), float64], Tensor[(320), float64], Tensor[(2, 96), int8], Tensor[(4, 11, 5), float64]) */;
  %213 = %212.2;
  %214 = cast(%var_7427, dtype="float32") /* ty=Tensor[(2, 96), float32] */;
  %215 = shape_of(%213, dtype="int32") /* ty=Tensor[(2), int32] */;
  %216 = cast(%213, dtype="float32") /* ty=Tensor[(2, 96), float32] */;
  %217 = dyn.reshape(%214, %215, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %218 = %209.0;
  %219 = floor_divide(%216, %217) /* ty=Tensor[(2, 96), float32] */;
  (%218, meta[relay.Constant][17] /* ty=Tensor[(96, 2), int64] */, %219)
}

def @func_1256(%var_1249: Tensor[(4, 11, 5), float64]) -> Tensor[(4, 11, 5), float64] {
  %220 = @func_882() /* ty=Tensor[(4, 11, 5), float32] */;
  %221 = cast(%220, dtype="float64") /* ty=Tensor[(4, 11, 5), float64] */;
  %222 = acos(%221) /* ty=Tensor[(4, 11, 5), float64] */;
  %223 = cast(%var_1249, dtype="float64") /* ty=Tensor[(4, 11, 5), float64] */;
  %224 = shape_of(%222, dtype="int32") /* ty=Tensor[(3), int32] */;
  %225 = cast(%222, dtype="float64") /* ty=Tensor[(4, 11, 5), float64] */;
  %226 = dyn.reshape(%223, %224, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%225, %226) /* ty=Tensor[(4, 11, 5), float64] */
}

def @func_3974() -> (Tensor[(4, 11, 5), int8],) {
  %227 = @func_1665() /* ty=(Tensor[(4, 11, 5), float64],) */;
  %228 = %227.0;
  %229 = cast(meta[relay.Constant][18] /* ty=Tensor[(4, 11, 5), float64] */, dtype="int8") /* ty=Tensor[(4, 11, 5), int8] */;
  %230 = shape_of(%228, dtype="int32") /* ty=Tensor[(3), int32] */;
  %231 = cast(%228, dtype="int8") /* ty=Tensor[(4, 11, 5), int8] */;
  %232 = dyn.reshape(%229, %230, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %233 = add(%231, %232) /* ty=Tensor[(4, 11, 5), int8] */;
  (%233,)
}

def @func_3712(%var_3649: Tensor[(768), int8]) -> (Tensor[(48), float64], Tensor[(768), int8], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float64], Tensor[(9, 13, 7), bool], Tensor[(819), uint64]) {
  %234 = cast(%var_3649, dtype="int8") /* ty=Tensor[(768), int8] */;
  %235 = cast(%var_3649, dtype="int8") /* ty=Tensor[(768), int8] */;
  %236 = cast(%var_3649, dtype="int8") /* ty=Tensor[(768), int8] */;
  %237 = reshape(%234, newshape=[16, 3, 16]) /* ty=Tensor[(16, 3, 16), int8] */;
  %238 = reshape(%235, newshape=[16, 3, 16]) /* ty=Tensor[(16, 3, 16), int8] */;
  %239 = reshape(%236, newshape=[16, 3, 16]) /* ty=Tensor[(16, 3, 16), int8] */;
  %240 = @func_3299(%237, %238, %239) /* ty=(Tensor[(16, 3, 16), int8], Tensor[(16, 3, 16), bool], Tensor[(4, 11, 5), float32], Tensor[(16, 3, 16), bool], Tensor[(48), float64], Tensor[(192), float64], Tensor[(16, 3, 16), float64]) */;
  %241 = @func_2518() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(9, 13, 7), bool], Tensor[(819), uint32]) */;
  %242 = @func_1452() /* ty=Tensor[(4, 11, 5), float32] */;
  %243 = cast(%242, dtype="float32") /* ty=Tensor[(4, 11, 5), float32] */;
  %244 = acosh(%243) /* ty=Tensor[(4, 11, 5), float32] */;
  %245 = cast(%244, dtype="float64") /* ty=Tensor[(4, 11, 5), float64] */;
  %246 = erf(%245) /* ty=Tensor[(4, 11, 5), float64] */;
  %247 = cast(%246, dtype="float64") /* ty=Tensor[(4, 11, 5), float64] */;
  %248 = cast(meta[relay.Constant][19] /* ty=Tensor[(819), uint64] */, dtype="uint64") /* ty=Tensor[(819), uint64] */;
  %249 = reshape(%248, newshape=[9, 13, 7]) /* ty=Tensor[(9, 13, 7), uint64] */;
  %250 = @func_275(%249) /* ty=(Tensor[(9, 13, 7), bool], Tensor[(6, 4, 5), bool], Tensor[(120), int16]) */;
  %251 = %240.4;
  %252 = %241.0;
  %253 = atanh(%247) /* ty=Tensor[(4, 11, 5), float64] */;
  %254 = %250.0;
  (%251, %var_3649, %252, %253, %254, meta[relay.Constant][19] /* ty=Tensor[(819), uint64] */)
}

def @func_4072() -> (Tensor[(16, 2, 10), float64],) {
  %255 = @func_2480() /* ty=Tensor[(16, 2, 10), float64] */;
  (%255,)
}

def @func_3487(%var_3468: int64, %var_3469: Tensor[(1040), int64]) -> (Tensor[(4, 11, 5), float32], Tensor[(10, 8, 13), int64], int64, Tensor[(1040), int64]) {
  %256 = @func_2150() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(6, 4, 5), bool]) */;
  %257 = cast(%var_3468, dtype="int64") /* ty=int64 */;
  %258 = cast(%var_3469, dtype="int64") /* ty=Tensor[(1040), int64] */;
  %259 = reshape(%257, newshape=[]) /* ty=int64 */;
  %260 = reshape(%258, newshape=[10, 8, 13]) /* ty=Tensor[(10, 8, 13), int64] */;
  %261 = %256.1;
  %262 = @func_2214(%259, %260) /* ty=Tensor[(10, 8, 13), int64] */;
  (%261, %262, %var_3468, %var_3469)
}

def @func_1090(%var_1056: Tensor[(11, 10, 4), int8], %var_1057: Tensor[(11, 10, 4), int8]) -> (Tensor[(11, 10, 4), bool], Tensor[(12, 4, 4), float64], Tensor[(48), float64], Tensor[(192), float64]) {
  %263 = cast(%var_1057, dtype="bool") /* ty=Tensor[(11, 10, 4), bool] */;
  %264 = shape_of(%var_1056, dtype="int32") /* ty=Tensor[(3), int32] */;
  %265 = cast(%var_1056, dtype="bool") /* ty=Tensor[(11, 10, 4), bool] */;
  %266 = dyn.reshape(%263, %264, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %267 = less_equal(%265, %266) /* ty=Tensor[(11, 10, 4), bool] */;
  %268 = cast(%var_1057, dtype="bool") /* ty=Tensor[(11, 10, 4), bool] */;
  %269 = shape_of(%267, dtype="int32") /* ty=Tensor[(3), int32] */;
  %270 = cast(%267, dtype="bool") /* ty=Tensor[(11, 10, 4), bool] */;
  %271 = dyn.reshape(%268, %269, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %272 = cast(meta[relay.Constant][20] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %273 = cast(meta[relay.Constant][21] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
  %274 = reshape(%272, newshape=[12, 4, 1]) /* ty=Tensor[(12, 4, 1), float64] */;
  %275 = reshape(%273, newshape=[12, 4, 4]) /* ty=Tensor[(12, 4, 4), float64] */;
  %276 = @func_307(%274, %275) /* ty=(Tensor[(12, 4, 4), float64], Tensor[(12, 4, 4), float64]) */;
  %277 = less(%270, %271) /* ty=Tensor[(11, 10, 4), bool] */;
  %278 = %276.1;
  (%277, %278, meta[relay.Constant][20] /* ty=Tensor[(48), float64] */, meta[relay.Constant][21] /* ty=Tensor[(192), float64] */)
}

def @func_6111() -> Tensor[(15, 10, 2), uint8] {
  %279 = cast(meta[relay.Constant][23] /* ty=Tensor[(15, 10, 2), uint8] */, dtype="uint8") /* ty=Tensor[(15, 10, 2), uint8] */;
  %280 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(15, 10, 2), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %281 = cast(meta[relay.Constant][22] /* ty=Tensor[(15, 10, 2), uint8] */, dtype="uint8") /* ty=Tensor[(15, 10, 2), uint8] */;
  %282 = dyn.reshape(%279, %280, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  left_shift(%281, %282) /* ty=Tensor[(15, 10, 2), uint8] */
}

def @func_6773() -> (Tensor[(8, 8), float64], Tensor[(16, 2, 10), float64]) {
  %283 = cast(meta[relay.Constant][24] /* ty=Tensor[(8, 8), float64] */, dtype="float64") /* ty=Tensor[(8, 8), float64] */;
  %284 = sqrt(%283) /* ty=Tensor[(8, 8), float64] */;
  %285 = @func_2480() /* ty=Tensor[(16, 2, 10), float64] */;
  (%284, %285)
}

def @func_1665() -> (Tensor[(4, 11, 5), float64],) {
  %286 = @func_1651() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(216), float64], Tensor[(216), float64], Tensor[(4, 11, 5), float32]) */;
  %287 = %286.0;
  %288 = cast(%287, dtype="float64") /* ty=Tensor[(4, 11, 5), float64] */;
  %289 = rsqrt(%288) /* ty=Tensor[(4, 11, 5), float64] */;
  (%289,)
}

def @func_5450() -> Tensor[(4, 11, 5), float32] {
  @func_3400() /* ty=Tensor[(4, 11, 5), float32] */
}

def @func_5984() -> (Tensor[(4, 11, 5), float64],) {
  %290 = @func_3216() /* ty=(Tensor[(4, 11, 5), float64],) */;
  %291 = %290.0;
  (%291,)
}

def @func_2150() -> (Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(6, 4, 5), bool]) {
  %292 = @func_1197() /* ty=Tensor[(4, 11, 5), float32] */;
  %293 = cast(%292, dtype="float32") /* ty=Tensor[(4, 11, 5), float32] */;
  %294 = @func_1963() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(6, 4, 5), bool], Tensor[(120), int16]) */;
  %295 = @func_882() /* ty=Tensor[(4, 11, 5), float32] */;
  %296 = log10(%293) /* ty=Tensor[(4, 11, 5), float32] */;
  %297 = %294.1;
  (%295, %296, %297)
}

def @func_4405() -> (Tensor[(4, 11, 5), float64], Tensor[(4, 11, 5), float64], Tensor[(4, 11, 5), float32], Tensor[(120), int16]) {
  %298 = @func_3216() /* ty=(Tensor[(4, 11, 5), float64],) */;
  %299 = @func_3216() /* ty=(Tensor[(4, 11, 5), float64],) */;
  %300 = @func_4323() /* ty=(Tensor[(4, 11, 5), float32],) */;
  %301 = @func_4336() /* ty=(Tensor[(120), int16], Tensor[(4, 11, 5), float64]) */;
  %302 = %298.0;
  %303 = %299.0;
  %304 = %300.0;
  %305 = %301.0;
  (%302, %303, %304, %305)
}

def @func_1427(%var_1389: Tensor[(24, 2), float64], %var_1395: Tensor[(4, 11, 5), float32], %var_1402: Tensor[(144, 2), bool]) -> (Tensor[(24, 2), float64], Tensor[(4, 11, 5), int32], Tensor[(12, 3, 8), bool], Tensor[(144, 2), bool], Tensor[(12, 4, 4), int16], Tensor[(4, 11, 5), float32]) {
  %306 = @func_1197() /* ty=Tensor[(4, 11, 5), float32] */;
  %307 = cast(%var_1395, dtype="int32") /* ty=Tensor[(4, 11, 5), int32] */;
  %308 = shape_of(%306, dtype="int32") /* ty=Tensor[(3), int32] */;
  %309 = cast(%306, dtype="int32") /* ty=Tensor[(4, 11, 5), int32] */;
  %310 = dyn.reshape(%307, %308, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %311 = cast(%var_1402, dtype="bool") /* ty=Tensor[(144, 2), bool] */;
  %312 = reshape(%311, newshape=[12, 3, 8]) /* ty=Tensor[(12, 3, 8), bool] */;
  %313 = cast(%var_1389, dtype="float64") /* ty=Tensor[(24, 2), float64] */;
  %314 = cast(meta[relay.Constant][25] /* ty=Tensor[(24, 8), float64] */, dtype="float64") /* ty=Tensor[(24, 8), float64] */;
  %315 = reshape(%313, newshape=[12, 4, 1]) /* ty=Tensor[(12, 4, 1), float64] */;
  %316 = reshape(%314, newshape=[12, 4, 4]) /* ty=Tensor[(12, 4, 4), float64] */;
  %317 = @func_307(%315, %316) /* ty=(Tensor[(12, 4, 4), float64], Tensor[(12, 4, 4), float64]) */;
  %318 = %317.1;
  %319 = cast(meta[relay.Constant][25] /* ty=Tensor[(24, 8), float64] */, dtype="int16") /* ty=Tensor[(24, 8), int16] */;
  %320 = shape_of(%318, dtype="int32") /* ty=Tensor[(3), int32] */;
  %321 = cast(%318, dtype="int16") /* ty=Tensor[(12, 4, 4), int16] */;
  %322 = dyn.reshape(%319, %320, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %323 = logical_xor(%309, %310) /* ty=Tensor[(4, 11, 5), int32] */;
  %324 = @func_1175(%312) /* ty=Tensor[(12, 3, 8), bool] */;
  %325 = minimum(%321, %322) /* ty=Tensor[(12, 4, 4), int16] */;
  %326 = @func_1298() /* ty=Tensor[(4, 11, 5), float32] */;
  (%var_1389, %323, %324, %var_1402, %325, %326)
}

def @func_7235() -> (Tensor[(120), float32], Tensor[(216), float64]) {
  %327 = @func_6237() /* ty=(Tensor[(120), float32], Tensor[(192), float64], Tensor[(2, 96), float64]) */;
  %328 = %327.0;
  %329 = @func_2852() /* ty=Tensor[(216), float64] */;
  (%328, %329)
}

def @func_4323() -> (Tensor[(4, 11, 5), float32],) {
  %330 = @func_3518() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float64]) */;
  %331 = %330.0;
  (%331,)
}

def @func_1197() -> Tensor[(4, 11, 5), float32] {
  @func_882() /* ty=Tensor[(4, 11, 5), float32] */
}

def @func_5500(%var_5482: Tensor[(6, 14, 6), float64]) -> (Tensor[(4, 11, 5), int8], Tensor[(6, 14, 6), uint32], Tensor[(6, 14, 6), uint8]) {
  %332 = @func_3008() /* ty=(Tensor[(6, 14, 6), bool], Tensor[(120), int16], Tensor[(6, 14, 6), float64]) */;
  %333 = %332.2;
  %334 = cast(%var_5482, dtype="uint32") /* ty=Tensor[(6, 14, 6), uint32] */;
  %335 = shape_of(%333, dtype="int32") /* ty=Tensor[(3), int32] */;
  %336 = cast(%333, dtype="uint32") /* ty=Tensor[(6, 14, 6), uint32] */;
  %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %338 = cast(%333, dtype="uint8") /* ty=Tensor[(6, 14, 6), uint8] */;
  %339 = shape_of(%var_5482, dtype="int32") /* ty=Tensor[(3), int32] */;
  %340 = cast(%var_5482, dtype="uint8") /* ty=Tensor[(6, 14, 6), uint8] */;
  %341 = dyn.reshape(%338, %339, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %342 = @func_5460() /* ty=Tensor[(4, 11, 5), int8] */;
  %343 = maximum(%336, %337) /* ty=Tensor[(6, 14, 6), uint32] */;
  %344 = bitwise_or(%340, %341) /* ty=Tensor[(6, 14, 6), uint8] */;
  (%342, %343, %344)
}

def @func_423(%var_421: Tensor[(192), float64]) -> (Tensor[(3, 9, 12), float32], Tensor[(12, 4, 4), float64], Tensor[(48), float64], Tensor[(192), float64]) {
  %345 = cast(meta[relay.Constant][26] /* ty=Tensor[(3, 9, 12), float32] */, dtype="float32") /* ty=Tensor[(3, 9, 12), float32] */;
  %346 = cast(meta[relay.Constant][27] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %347 = cast(%var_421, dtype="float64") /* ty=Tensor[(192), float64] */;
  %348 = reshape(%346, newshape=[12, 4, 1]) /* ty=Tensor[(12, 4, 1), float64] */;
  %349 = reshape(%347, newshape=[12, 4, 4]) /* ty=Tensor[(12, 4, 4), float64] */;
  %350 = @func_307(%348, %349) /* ty=(Tensor[(12, 4, 4), float64], Tensor[(12, 4, 4), float64]) */;
  %351 = acos(%345) /* ty=Tensor[(3, 9, 12), float32] */;
  %352 = %350.1;
  (%351, %352, meta[relay.Constant][27] /* ty=Tensor[(48), float64] */, %var_421)
}

def @func_5460() -> Tensor[(4, 11, 5), int8] {
  %353 = @func_3974() /* ty=(Tensor[(4, 11, 5), int8],) */;
  %353.0
}

def @func_6294() -> (Tensor[(4, 11, 5), float32],) {
  %354 = @func_4155() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32]) */;
  %355 = %354.0;
  (%355,)
}

def @func_1864(%var_1853: Tensor[(8, 2, 8), float32], %var_1858: Tensor[(192), float64]) -> (Tensor[(8, 2, 8), float32], Tensor[(48), float64], Tensor[(192), float64], Tensor[(4, 11, 5), float32], Tensor[(216), float64]) {
  %356 = cast(%var_1853, dtype="float32") /* ty=Tensor[(8, 2, 8), float32] */;
  %357 = cast(%var_1858, dtype="float64") /* ty=Tensor[(192), float64] */;
  %358 = reshape(%357, newshape=[192]) /* ty=Tensor[(192), float64] */;
  %359 = @func_423(%358) /* ty=(Tensor[(3, 9, 12), float32], Tensor[(12, 4, 4), float64], Tensor[(48), float64], Tensor[(192), float64]) */;
  %360 = cast(meta[relay.Constant][28] /* ty=Tensor[(216), float64] */, dtype="float64") /* ty=Tensor[(216), float64] */;
  %361 = cast(%var_1858, dtype="float64") /* ty=Tensor[(192), float64] */;
  %362 = reshape(%360, newshape=[216]) /* ty=Tensor[(216), float64] */;
  %363 = reshape(%361, newshape=[192]) /* ty=Tensor[(192), float64] */;
  %364 = @func_1767(%362, %363) /* ty=(Tensor[(192), float64], Tensor[(320), float64], Tensor[(16, 2, 10), float64], Tensor[(4, 11, 5), int16], Tensor[(4, 6, 9), float64], Tensor[(4, 11, 5), float32]) */;
  %365 = log2(%356) /* ty=Tensor[(8, 2, 8), float32] */;
  %366 = %359.2;
  %367 = %364.5;
  (%365, %366, %var_1858, %367, meta[relay.Constant][28] /* ty=Tensor[(216), float64] */)
}

def @func_3008() -> (Tensor[(6, 14, 6), bool], Tensor[(120), int16], Tensor[(6, 14, 6), float64]) {
  %368 = cast(meta[relay.Constant][29] /* ty=Tensor[(6, 14, 6), float32] */, dtype="float32") /* ty=Tensor[(6, 14, 6), float32] */;
  %369 = tan(%368) /* ty=Tensor[(6, 14, 6), float32] */;
  %370 = cast(%369, dtype="bool") /* ty=Tensor[(6, 14, 6), bool] */;
  %371 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(6, 14, 6), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %372 = cast(meta[relay.Constant][29] /* ty=Tensor[(6, 14, 6), float32] */, dtype="bool") /* ty=Tensor[(6, 14, 6), bool] */;
  %373 = dyn.reshape(%370, %371, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %374 = @func_1963() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(6, 4, 5), bool], Tensor[(120), int16]) */;
  %375 = cast(%369, dtype="float64") /* ty=Tensor[(6, 14, 6), float64] */;
  %376 = logical_or(%372, %373) /* ty=Tensor[(6, 14, 6), bool] */;
  %377 = %374.2;
  %378 = rsqrt(%375) /* ty=Tensor[(6, 14, 6), float64] */;
  (%376, %377, %378)
}

def @func_1162(%var_1118: Tensor[(216), float64]) -> (Tensor[(4, 11, 5), float32], Tensor[(16, 2, 10), bool], Tensor[(216), float64], Tensor[(192), float64], Tensor[(320), float64], Tensor[(12, 4, 4), float64], Tensor[(1, 48), float64], Tensor[(320), float64]) {
  %379 = cast(%var_1118, dtype="float64") /* ty=Tensor[(216), float64] */;
  %380 = cast(meta[relay.Constant][30] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
  %381 = reshape(%379, newshape=[216]) /* ty=Tensor[(216), float64] */;
  %382 = reshape(%380, newshape=[48, 4]) /* ty=Tensor[(48, 4), float64] */;
  %383 = @func_1049(%381, %382) /* ty=(Tensor[(4, 11, 5), float32], Tensor[(16, 2, 10), bool], Tensor[(4, 6, 9), float64], Tensor[(216), float64], Tensor[(120), int16], Tensor[(819), uint64], Tensor[(16, 2, 10), float64], Tensor[(4, 6, 9), float64], Tensor[(16, 2, 10), float64], Tensor[(12, 4, 4), float64], Tensor[(48, 4), float64]) */;
  %384 = cast(meta[relay.Constant][30] /* ty=Tensor[(192), float64] */, dtype="int64") /* ty=Tensor[(192), int64] */;
  %385 = reshape(%384, newshape=[3, 16, 4]) /* ty=Tensor[(3, 16, 4), int64] */;
  %386 = @func_1110(%385) /* ty=(Tensor[(3, 16, 4), int64], Tensor[(16, 2, 10), float64], Tensor[(320), float64], Tensor[(3, 16, 4), float32]) */;
  %387 = cast(meta[relay.Constant][31] /* ty=Tensor[(1, 48), float64] */, dtype="float64") /* ty=Tensor[(1, 48), float64] */;
  %388 = cast(meta[relay.Constant][30] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
  %389 = reshape(%387, newshape=[12, 4, 1]) /* ty=Tensor[(12, 4, 1), float64] */;
  %390 = reshape(%388, newshape=[12, 4, 4]) /* ty=Tensor[(12, 4, 4), float64] */;
  %391 = @func_307(%389, %390) /* ty=(Tensor[(12, 4, 4), float64], Tensor[(12, 4, 4), float64]) */;
  %392 = cast(meta[relay.Constant][30] /* ty=Tensor[(192), float64] */, dtype="int64") /* ty=Tensor[(192), int64] */;
  %393 = reshape(%392, newshape=[3, 16, 4]) /* ty=Tensor[(3, 16, 4), int64] */;
  %394 = @func_1110(%393) /* ty=(Tensor[(3, 16, 4), int64], Tensor[(16, 2, 10), float64], Tensor[(320), float64], Tensor[(3, 16, 4), float32]) */;
  %395 = @func_882() /* ty=Tensor[(4, 11, 5), float32] */;
  %396 = %383.1;
  %397 = %386.2;
  %398 = %391.0;
  %399 = %394.2;
  (%395, %396, %var_1118, meta[relay.Constant][30] /* ty=Tensor[(192), float64] */, %397, %398, meta[relay.Constant][31] /* ty=Tensor[(1, 48), float64] */, %399)
}

def @func_7110() -> (Tensor[(9, 13, 7), int64], Tensor[(120), int16], Tensor[(4, 11, 5), float32]) {
  %400 = @func_2518() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(9, 13, 7), bool], Tensor[(819), uint32]) */;
  %401 = %400.2;
  %402 = cast(meta[relay.Constant][32] /* ty=Tensor[(9, 13, 7), bool] */, dtype="int64") /* ty=Tensor[(9, 13, 7), int64] */;
  %403 = shape_of(%401, dtype="int32") /* ty=Tensor[(3), int32] */;
  %404 = cast(%401, dtype="int64") /* ty=Tensor[(9, 13, 7), int64] */;
  %405 = dyn.reshape(%402, %403, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %406 = subtract(%404, %405) /* ty=Tensor[(9, 13, 7), int64] */;
  %407 = @func_3455() /* ty=Tensor[(120), int16] */;
  %408 = @func_5405() /* ty=Tensor[(4, 11, 5), float32] */;
  (%406, %407, %408)
}

def @func_5197() -> (Tensor[(4, 11, 5), float32],) {
  %409 = @func_1197() /* ty=Tensor[(4, 11, 5), float32] */;
  (%409,)
}

def @func_1049(%var_1009: Tensor[(216), float64], %var_1043: Tensor[(48, 4), float64]) -> (Tensor[(4, 11, 5), float32], Tensor[(16, 2, 10), bool], Tensor[(4, 6, 9), float64], Tensor[(216), float64], Tensor[(120), int16], Tensor[(819), uint64], Tensor[(16, 2, 10), float64], Tensor[(4, 6, 9), float64], Tensor[(16, 2, 10), float64], Tensor[(12, 4, 4), float64], Tensor[(48, 4), float64]) {
  %410 = cast(meta[relay.Constant][33] /* ty=Tensor[(8, 40), float64] */, dtype="float64") /* ty=Tensor[(8, 40), float64] */;
  %411 = reshape(%410, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float64] */;
  %412 = @func_285(%411) /* ty=(Tensor[(16, 2, 10), float64],) */;
  %413 = %412.0;
  %414 = cast(meta[relay.Constant][33] /* ty=Tensor[(8, 40), float64] */, dtype="bool") /* ty=Tensor[(8, 40), bool] */;
  %415 = shape_of(%413, dtype="int32") /* ty=Tensor[(3), int32] */;
  %416 = cast(%413, dtype="bool") /* ty=Tensor[(16, 2, 10), bool] */;
  %417 = dyn.reshape(%414, %415, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %418 = cast(%var_1009, dtype="float64") /* ty=Tensor[(216), float64] */;
  %419 = reshape(%418, newshape=[4, 6, 9]) /* ty=Tensor[(4, 6, 9), float64] */;
  %420 = @func_699(%419) /* ty=(Tensor[(4, 6, 9), float64],) */;
  %421 = cast(meta[relay.Constant][34] /* ty=Tensor[(819), uint64] */, dtype="uint64") /* ty=Tensor[(819), uint64] */;
  %422 = reshape(%421, newshape=[9, 13, 7]) /* ty=Tensor[(9, 13, 7), uint64] */;
  %423 = @func_275(%422) /* ty=(Tensor[(9, 13, 7), bool], Tensor[(6, 4, 5), bool], Tensor[(120), int16]) */;
  %424 = cast(meta[relay.Constant][33] /* ty=Tensor[(8, 40), float64] */, dtype="float64") /* ty=Tensor[(8, 40), float64] */;
  %425 = reshape(%424, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float64] */;
  %426 = @func_285(%425) /* ty=(Tensor[(16, 2, 10), float64],) */;
  %427 = cast(%var_1009, dtype="float64") /* ty=Tensor[(216), float64] */;
  %428 = reshape(%427, newshape=[4, 6, 9]) /* ty=Tensor[(4, 6, 9), float64] */;
  %429 = @func_699(%428) /* ty=(Tensor[(4, 6, 9), float64],) */;
  %430 = %426.0;
  %431 = cast(%430, dtype="float64") /* ty=Tensor[(16, 2, 10), float64] */;
  %432 = reshape(%431, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float64] */;
  %433 = @func_285(%432) /* ty=(Tensor[(16, 2, 10), float64],) */;
  %434 = cast(%var_1043, dtype="float64") /* ty=Tensor[(48, 4), float64] */;
  %435 = reshape(%434, newshape=[192]) /* ty=Tensor[(192), float64] */;
  %436 = @func_423(%435) /* ty=(Tensor[(3, 9, 12), float32], Tensor[(12, 4, 4), float64], Tensor[(48), float64], Tensor[(192), float64]) */;
  %437 = @func_882() /* ty=Tensor[(4, 11, 5), float32] */;
  %438 = less(%416, %417) /* ty=Tensor[(16, 2, 10), bool] */;
  %439 = %420.0;
  %440 = %423.2;
  %441 = %429.0;
  %442 = %433.0;
  %443 = %436.1;
  (%437, %438, %439, %var_1009, %440, meta[relay.Constant][34] /* ty=Tensor[(819), uint64] */, %430, %441, %442, %443, %var_1043)
}

def @func_5946() -> (Tensor[(4, 11, 5), float32],) {
  %444 = @func_4018() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(120), int16]) */;
  %445 = %444.1;
  (%445,)
}

def @func_4440() -> Tensor[(320), float64] {
  %446 = @func_2577() /* ty=(Tensor[(16, 2, 10), float64], Tensor[(320), float64], Tensor[(9, 13, 7), float64]) */;
  %446.1
}

def @func_1332() -> Tensor[(4, 11, 5), float32] {
  @func_1197() /* ty=Tensor[(4, 11, 5), float32] */
}

def @func_4862(%var_4859: Tensor[(768), int8]) -> (Tensor[(8, 12, 14), float64], Tensor[(4, 11, 5), float64], Tensor[(9, 13, 7), float64], Tensor[(16, 3, 16), bool], Tensor[(768), int8]) {
  %447 = cast(meta[relay.Constant][35] /* ty=Tensor[(8, 12, 14), float64] */, dtype="float64") /* ty=Tensor[(8, 12, 14), float64] */;
  %448 = @func_3518() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float64]) */;
  %449 = @func_2577() /* ty=(Tensor[(16, 2, 10), float64], Tensor[(320), float64], Tensor[(9, 13, 7), float64]) */;
  %450 = cast(%var_4859, dtype="int8") /* ty=Tensor[(768), int8] */;
  %451 = cast(%var_4859, dtype="int8") /* ty=Tensor[(768), int8] */;
  %452 = cast(%var_4859, dtype="int8") /* ty=Tensor[(768), int8] */;
  %453 = reshape(%450, newshape=[16, 3, 16]) /* ty=Tensor[(16, 3, 16), int8] */;
  %454 = reshape(%451, newshape=[16, 3, 16]) /* ty=Tensor[(16, 3, 16), int8] */;
  %455 = reshape(%452, newshape=[16, 3, 16]) /* ty=Tensor[(16, 3, 16), int8] */;
  %456 = @func_3299(%453, %454, %455) /* ty=(Tensor[(16, 3, 16), int8], Tensor[(16, 3, 16), bool], Tensor[(4, 11, 5), float32], Tensor[(16, 3, 16), bool], Tensor[(48), float64], Tensor[(192), float64], Tensor[(16, 3, 16), float64]) */;
  %457 = sinh(%447) /* ty=Tensor[(8, 12, 14), float64] */;
  %458 = %448.1;
  %459 = %449.2;
  %460 = %456.1;
  (%457, %458, %459, %460, %var_4859)
}

def @func_2518() -> (Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(9, 13, 7), bool], Tensor[(819), uint32]) {
  %461 = cast(meta[relay.Constant][36] /* ty=Tensor[(819), uint64] */, dtype="uint64") /* ty=Tensor[(819), uint64] */;
  %462 = reshape(%461, newshape=[9, 13, 7]) /* ty=Tensor[(9, 13, 7), uint64] */;
  %463 = @func_275(%462) /* ty=(Tensor[(9, 13, 7), bool], Tensor[(6, 4, 5), bool], Tensor[(120), int16]) */;
  %464 = cast(meta[relay.Constant][36] /* ty=Tensor[(819), uint64] */, dtype="float32") /* ty=Tensor[(819), float32] */;
  %465 = erf(%464) /* ty=Tensor[(819), float32] */;
  %466 = cast(meta[relay.Constant][36] /* ty=Tensor[(819), uint64] */, dtype="uint32") /* ty=Tensor[(819), uint32] */;
  %467 = shape_of(%465, dtype="int32") /* ty=Tensor[(1), int32] */;
  %468 = cast(%465, dtype="uint32") /* ty=Tensor[(819), uint32] */;
  %469 = dyn.reshape(%466, %467, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %470 = @func_2468() /* ty=Tensor[(4, 11, 5), float32] */;
  %471 = @func_2468() /* ty=Tensor[(4, 11, 5), float32] */;
  %472 = %463.0;
  %473 = subtract(%468, %469) /* ty=Tensor[(819), uint32] */;
  (%470, %471, %472, %473)
}

def @func_3177(%var_3136: Tensor[(2, 96), int64]) -> (Tensor[(4, 11, 5), float64], Tensor[(320), float64], Tensor[(2, 96), int8], Tensor[(4, 11, 5), float64]) {
  %474 = @func_1824() /* ty=(Tensor[(4, 11, 5), float64],) */;
  %475 = cast(%var_3136, dtype="int64") /* ty=Tensor[(2, 96), int64] */;
  %476 = reshape(%475, newshape=[3, 16, 4]) /* ty=Tensor[(3, 16, 4), int64] */;
  %477 = @func_1110(%476) /* ty=(Tensor[(3, 16, 4), int64], Tensor[(16, 2, 10), float64], Tensor[(320), float64], Tensor[(3, 16, 4), float32]) */;
  %478 = cast(meta[relay.Constant][37] /* ty=Tensor[(2, 96), int64] */, dtype="uint64") /* ty=Tensor[(2, 96), uint64] */;
  %479 = shape_of(%var_3136, dtype="int32") /* ty=Tensor[(2), int32] */;
  %480 = cast(%var_3136, dtype="uint64") /* ty=Tensor[(2, 96), uint64] */;
  %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %482 = logical_xor(%480, %481) /* ty=Tensor[(2, 96), uint64] */;
  %483 = cast(%482, dtype="int8") /* ty=Tensor[(2, 96), int8] */;
  %484 = shape_of(%var_3136, dtype="int32") /* ty=Tensor[(2), int32] */;
  %485 = cast(%var_3136, dtype="int8") /* ty=Tensor[(2, 96), int8] */;
  %486 = dyn.reshape(%483, %484, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %487 = @func_1824() /* ty=(Tensor[(4, 11, 5), float64],) */;
  %488 = %474.0;
  %489 = %477.2;
  %490 = bitwise_and(%485, %486) /* ty=Tensor[(2, 96), int8] */;
  %491 = %487.0;
  (%488, %489, %490, %491)
}

def @func_7315() -> Tensor[(4, 11, 5), float64] {
  %492 = @func_1824() /* ty=(Tensor[(4, 11, 5), float64],) */;
  %492.0
}

def @main() -> (Tensor[(320), bool], Tensor[(192), float64]) {
  %493 = @func_2577() /* ty=(Tensor[(16, 2, 10), float64], Tensor[(320), float64], Tensor[(9, 13, 7), float64]) */;
  %494 = %493.1;
  %495 = cast(meta[relay.Constant][38] /* ty=Tensor[(320), float64] */, dtype="bool") /* ty=Tensor[(320), bool] */;
  %496 = shape_of(%494, dtype="int32") /* ty=Tensor[(1), int32] */;
  %497 = cast(%494, dtype="bool") /* ty=Tensor[(320), bool] */;
  %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?), bool] */;
  %499 = @func_6237() /* ty=(Tensor[(120), float32], Tensor[(192), float64], Tensor[(2, 96), float64]) */;
  %500 = %499.1;
  %501 = cast(%500, dtype="float64") /* ty=Tensor[(192), float64] */;
  %502 = equal(%497, %498) /* ty=Tensor[(320), bool] */;
  %503 = atan(%501) /* ty=Tensor[(192), float64] */;
  (%502, %503)
}

def @func_6537() -> (Tensor[(4, 11, 5), float32],) {
  %504 = @func_1651() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(216), float64], Tensor[(216), float64], Tensor[(4, 11, 5), float32]) */;
  %505 = %504.3;
  (%505,)
}

def @func_4589() -> Tensor[(4, 11, 5), float64] {
  @func_2197() /* ty=Tensor[(4, 11, 5), float64] */
}

def @func_285(%var_282: Tensor[(16, 2, 10), float64]) -> (Tensor[(16, 2, 10), float64],) {
  %506 = cast(%var_282, dtype="float64") /* ty=Tensor[(16, 2, 10), float64] */;
  %507 = cosh(%506) /* ty=Tensor[(16, 2, 10), float64] */;
  (%507,)
}

def @func_2616(%var_2597: Tensor[(192), int64]) -> (Tensor[(4, 11, 5), float64], Tensor[(16, 2, 10), float64], Tensor[(192), int64]) {
  %508 = @func_1665() /* ty=(Tensor[(4, 11, 5), float64],) */;
  %509 = cast(%var_2597, dtype="int64") /* ty=Tensor[(192), int64] */;
  %510 = reshape(%509, newshape=[3, 16, 4]) /* ty=Tensor[(3, 16, 4), int64] */;
  %511 = @func_1110(%510) /* ty=(Tensor[(3, 16, 4), int64], Tensor[(16, 2, 10), float64], Tensor[(320), float64], Tensor[(3, 16, 4), float32]) */;
  %512 = %508.0;
  %513 = %511.1;
  (%512, %513, %var_2597)
}

def @func_2742() -> Tensor[(4, 11, 5), float32] {
  @func_2367() /* ty=Tensor[(4, 11, 5), float32] */
}

def @func_5405() -> Tensor[(4, 11, 5), float32] {
  %514 = @func_3755() /* ty=(Tensor[(4, 11, 5), float32],) */;
  %514.0
}

def @func_2060() -> (Tensor[(4, 11, 5), bool], Tensor[(4, 11, 5), float32]) {
  %515 = @func_1332() /* ty=Tensor[(4, 11, 5), float32] */;
  %516 = @func_1452() /* ty=Tensor[(4, 11, 5), float32] */;
  %517 = cast(%516, dtype="bool") /* ty=Tensor[(4, 11, 5), bool] */;
  %518 = shape_of(%515, dtype="int32") /* ty=Tensor[(3), int32] */;
  %519 = cast(%515, dtype="bool") /* ty=Tensor[(4, 11, 5), bool] */;
  %520 = dyn.reshape(%517, %518, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %521 = greater_equal(%519, %520) /* ty=Tensor[(4, 11, 5), bool] */;
  %522 = @func_882() /* ty=Tensor[(4, 11, 5), float32] */;
  (%521, %522)
}

def @func_1452() -> Tensor[(4, 11, 5), float32] {
  %523 = @func_1197() /* ty=Tensor[(4, 11, 5), float32] */;
  %524 = cast(%523, dtype="float32") /* ty=Tensor[(4, 11, 5), float32] */;
  atan(%524) /* ty=Tensor[(4, 11, 5), float32] */
}

def @func_4767(%var_4721: Tensor[(216), float64]) -> (Tensor[(4, 11, 5), float64], Tensor[(320), float64], Tensor[(216), float64], Tensor[(192), float64], Tensor[(120), int16]) {
  %525 = cast(%var_4721, dtype="float64") /* ty=Tensor[(216), float64] */;
  %526 = cast(meta[relay.Constant][39] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
  %527 = reshape(%525, newshape=[216]) /* ty=Tensor[(216), float64] */;
  %528 = reshape(%526, newshape=[192]) /* ty=Tensor[(192), float64] */;
  %529 = @func_1767(%527, %528) /* ty=(Tensor[(192), float64], Tensor[(320), float64], Tensor[(16, 2, 10), float64], Tensor[(4, 11, 5), int16], Tensor[(4, 6, 9), float64], Tensor[(4, 11, 5), float32]) */;
  %530 = @func_3582() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(120), int16]) */;
  %531 = @func_2197() /* ty=Tensor[(4, 11, 5), float64] */;
  %532 = %529.1;
  %533 = %530.1;
  (%531, %532, %var_4721, meta[relay.Constant][39] /* ty=Tensor[(192), float64] */, %533)
}

def @func_4780() -> (Tensor[(4, 11, 5), float32],) {
  %534 = @func_3885() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), bool], Tensor[(16, 2, 10), float64]) */;
  %535 = %534.0;
  (%535,)
}

def @func_2971() -> (Tensor[(4, 11, 5), float32],) {
  %536 = @func_1197() /* ty=Tensor[(4, 11, 5), float32] */;
  (%536,)
}

def @func_4923(%var_4892: Tensor[(4, 11, 5), float32]) -> (Tensor[(4, 11, 5), int64], Tensor[(4, 11, 5), float32], Tensor[(16, 3, 16), float64], Tensor[(768), int8]) {
  %537 = @func_2367() /* ty=Tensor[(4, 11, 5), float32] */;
  %538 = cast(%var_4892, dtype="int64") /* ty=Tensor[(4, 11, 5), int64] */;
  %539 = shape_of(%537, dtype="int32") /* ty=Tensor[(3), int32] */;
  %540 = cast(%537, dtype="int64") /* ty=Tensor[(4, 11, 5), int64] */;
  %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %542 = @func_1963() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(6, 4, 5), bool], Tensor[(120), int16]) */;
  %543 = cast(meta[relay.Constant][40] /* ty=Tensor[(768), int8] */, dtype="int8") /* ty=Tensor[(768), int8] */;
  %544 = cast(meta[relay.Constant][40] /* ty=Tensor[(768), int8] */, dtype="int8") /* ty=Tensor[(768), int8] */;
  %545 = cast(meta[relay.Constant][40] /* ty=Tensor[(768), int8] */, dtype="int8") /* ty=Tensor[(768), int8] */;
  %546 = reshape(%543, newshape=[16, 3, 16]) /* ty=Tensor[(16, 3, 16), int8] */;
  %547 = reshape(%544, newshape=[16, 3, 16]) /* ty=Tensor[(16, 3, 16), int8] */;
  %548 = reshape(%545, newshape=[16, 3, 16]) /* ty=Tensor[(16, 3, 16), int8] */;
  %549 = @func_3299(%546, %547, %548) /* ty=(Tensor[(16, 3, 16), int8], Tensor[(16, 3, 16), bool], Tensor[(4, 11, 5), float32], Tensor[(16, 3, 16), bool], Tensor[(48), float64], Tensor[(192), float64], Tensor[(16, 3, 16), float64]) */;
  %550 = left_shift(%540, %541) /* ty=Tensor[(4, 11, 5), int64] */;
  %551 = %542.0;
  %552 = %549.6;
  (%550, %551, %552, meta[relay.Constant][40] /* ty=Tensor[(768), int8] */)
}

def @func_3582() -> (Tensor[(4, 11, 5), float32], Tensor[(120), int16]) {
  %553 = @func_2348() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32]) */;
  %554 = %553.1;
  %555 = @func_2367() /* ty=Tensor[(4, 11, 5), float32] */;
  %556 = cast(%555, dtype="float32") /* ty=Tensor[(4, 11, 5), float32] */;
  %557 = shape_of(%554, dtype="int32") /* ty=Tensor[(3), int32] */;
  %558 = cast(%554, dtype="float32") /* ty=Tensor[(4, 11, 5), float32] */;
  %559 = dyn.reshape(%556, %557, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %560 = power(%558, %559) /* ty=Tensor[(4, 11, 5), float32] */;
  %561 = @func_3455() /* ty=Tensor[(120), int16] */;
  (%560, %561)
}

def @func_5821(%var_5811: Tensor[(13, 5, 5), float32]) -> Tensor[(13, 5, 5), float32] {
  %562 = cast(%var_5811, dtype="float32") /* ty=Tensor[(13, 5, 5), float32] */;
  tan(%562) /* ty=Tensor[(13, 5, 5), float32] */
}

def @func_5160(%var_5115: Tensor[(6, 14, 6), bool], %var_5126: Tensor[(6, 14, 6), bool]) -> (Tensor[(6, 14, 6), float64], Tensor[(6, 14, 6), float64]) {
  %563 = @func_3008() /* ty=(Tensor[(6, 14, 6), bool], Tensor[(120), int16], Tensor[(6, 14, 6), float64]) */;
  %564 = %563.0;
  %565 = cast(%564, dtype="float64") /* ty=Tensor[(6, 14, 6), float64] */;
  %566 = cast(%var_5115, dtype="bool") /* ty=Tensor[(6, 14, 6), bool] */;
  %567 = shape_of(%564, dtype="int32") /* ty=Tensor[(3), int32] */;
  %568 = cast(%564, dtype="bool") /* ty=Tensor[(6, 14, 6), bool] */;
  %569 = dyn.reshape(%566, %567, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %570 = greater_equal(%568, %569) /* ty=Tensor[(6, 14, 6), bool] */;
  %571 = cast(%var_5126, dtype="float32") /* ty=Tensor[(6, 14, 6), float32] */;
  %572 = shape_of(%570, dtype="int32") /* ty=Tensor[(3), int32] */;
  %573 = cast(%570, dtype="float32") /* ty=Tensor[(6, 14, 6), float32] */;
  %574 = dyn.reshape(%571, %572, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %575 = floor_mod(%573, %574) /* ty=Tensor[(6, 14, 6), float32] */;
  %576 = cast(%575, dtype="float64") /* ty=Tensor[(6, 14, 6), float64] */;
  %577 = acosh(%576) /* ty=Tensor[(6, 14, 6), float64] */;
  %578 = cast(%577, dtype="float64") /* ty=Tensor[(6, 14, 6), float64] */;
  %579 = erf(%578) /* ty=Tensor[(6, 14, 6), float64] */;
  %580 = cast(%579, dtype="float64") /* ty=Tensor[(6, 14, 6), float64] */;
  %581 = atanh(%580) /* ty=Tensor[(6, 14, 6), float64] */;
  %582 = cast(%581, dtype="float64") /* ty=Tensor[(6, 14, 6), float64] */;
  %583 = asinh(%565) /* ty=Tensor[(6, 14, 6), float64] */;
  %584 = log2(%582) /* ty=Tensor[(6, 14, 6), float64] */;
  (%583, %584)
}

def @func_2901() -> (Tensor[(4, 11, 5), float32], Tensor[(12, 3, 8), bool], Tensor[(72, 4), bool]) {
  %585 = cast(meta[relay.Constant][41] /* ty=Tensor[(72, 4), bool] */, dtype="bool") /* ty=Tensor[(72, 4), bool] */;
  %586 = reshape(%585, newshape=[12, 3, 8]) /* ty=Tensor[(12, 3, 8), bool] */;
  %587 = @func_1332() /* ty=Tensor[(4, 11, 5), float32] */;
  %588 = @func_1175(%586) /* ty=Tensor[(12, 3, 8), bool] */;
  (%587, %588, meta[relay.Constant][41] /* ty=Tensor[(72, 4), bool] */)
}

def @func_5656() -> Tensor[(4, 11, 5), float32] {
  %589 = @func_2971() /* ty=(Tensor[(4, 11, 5), float32],) */;
  %589.0
}

def @func_6513() -> (Tensor[(4, 11, 5), float64],) {
  %590 = @func_6058() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float64]) */;
  %591 = %590.2;
  (%591,)
}

def @func_7392() -> (Tensor[(4, 11, 5), float64], Tensor[(4, 11, 5), float32]) {
  %592 = @func_5984() /* ty=(Tensor[(4, 11, 5), float64],) */;
  %593 = %592.0;
  %594 = @func_882() /* ty=Tensor[(4, 11, 5), float32] */;
  (%593, %594)
}

def @func_4934() -> Tensor[(4, 11, 5), float32] {
  @func_1298() /* ty=Tensor[(4, 11, 5), float32] */
}

def @func_6607() -> Tensor[(216), float64] {
  @func_2852() /* ty=Tensor[(216), float64] */
}

def @func_307(%var_294: Tensor[(12, 4, 1), float64], %var_295: Tensor[(12, 4, 4), float64]) -> (Tensor[(12, 4, 4), float64], Tensor[(12, 4, 4), float64]) {
  %595 = cast(%var_294, dtype="float64") /* ty=Tensor[(12, 4, 1), float64] */;
  %596 = cast(%var_295, dtype="float64") /* ty=Tensor[(12, 4, 4), float64] */;
  %597 = cast(%var_295, dtype="float64") /* ty=Tensor[(12, 4, 4), float64] */;
  %598 = floor_mod(%595, %596) /* ty=Tensor[(12, 4, 4), float64] */;
  %599 = asinh(%597) /* ty=Tensor[(12, 4, 4), float64] */;
  (%598, %599)
}

def @func_3808() -> (Tensor[(4, 11, 5), float64],) {
  %600 = @func_3216() /* ty=(Tensor[(4, 11, 5), float64],) */;
  %601 = %600.0;
  (%601,)
}

def @func_7557() -> (Tensor[(4, 11, 5), float32],) {
  %602 = @func_3755() /* ty=(Tensor[(4, 11, 5), float32],) */;
  %603 = %602.0;
  (%603,)
}

def @func_6981() -> Tensor[(9, 13, 7), float64] {
  %604 = @func_2577() /* ty=(Tensor[(16, 2, 10), float64], Tensor[(320), float64], Tensor[(9, 13, 7), float64]) */;
  %604.2
}

def @func_2109(%var_2091: Tensor[(4, 11, 5), float64], %var_2096: Tensor[(4, 11, 5), uint64]) -> Tensor[(4, 11, 5), bool] {
  %605 = @func_1665() /* ty=(Tensor[(4, 11, 5), float64],) */;
  %606 = %605.0;
  %607 = cast(%var_2091, dtype="uint64") /* ty=Tensor[(4, 11, 5), uint64] */;
  %608 = shape_of(%606, dtype="int32") /* ty=Tensor[(3), int32] */;
  %609 = cast(%606, dtype="uint64") /* ty=Tensor[(4, 11, 5), uint64] */;
  %610 = dyn.reshape(%607, %608, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %611 = maximum(%609, %610) /* ty=Tensor[(4, 11, 5), uint64] */;
  %612 = cast(%var_2096, dtype="bool") /* ty=Tensor[(4, 11, 5), bool] */;
  %613 = shape_of(%611, dtype="int32") /* ty=Tensor[(3), int32] */;
  %614 = cast(%611, dtype="bool") /* ty=Tensor[(4, 11, 5), bool] */;
  %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%614, %615) /* ty=Tensor[(4, 11, 5), bool] */
}

def @func_7365() -> (Tensor[(120), int16], Tensor[(4, 11, 5), float64]) {
  %616 = @func_3582() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(120), int16]) */;
  %617 = @func_6513() /* ty=(Tensor[(4, 11, 5), float64],) */;
  %618 = %616.1;
  %619 = %617.0;
  (%618, %619)
}

def @func_3299(%var_3229: Tensor[(16, 3, 16), int8], %var_3230: Tensor[(16, 3, 16), int8], %var_3246: Tensor[(16, 3, 16), int8]) -> (Tensor[(16, 3, 16), int8], Tensor[(16, 3, 16), bool], Tensor[(4, 11, 5), float32], Tensor[(16, 3, 16), bool], Tensor[(48), float64], Tensor[(192), float64], Tensor[(16, 3, 16), float64]) {
  %620 = cast(%var_3230, dtype="int8") /* ty=Tensor[(16, 3, 16), int8] */;
  %621 = shape_of(%var_3229, dtype="int32") /* ty=Tensor[(3), int32] */;
  %622 = cast(%var_3229, dtype="int8") /* ty=Tensor[(16, 3, 16), int8] */;
  %623 = dyn.reshape(%620, %621, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %624 = cast(%var_3246, dtype="bool") /* ty=Tensor[(16, 3, 16), bool] */;
  %625 = shape_of(%var_3229, dtype="int32") /* ty=Tensor[(3), int32] */;
  %626 = cast(%var_3229, dtype="bool") /* ty=Tensor[(16, 3, 16), bool] */;
  %627 = dyn.reshape(%624, %625, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %628 = cast(%var_3229, dtype="bool") /* ty=Tensor[(16, 3, 16), bool] */;
  %629 = shape_of(%var_3230, dtype="int32") /* ty=Tensor[(3), int32] */;
  %630 = cast(%var_3230, dtype="bool") /* ty=Tensor[(16, 3, 16), bool] */;
  %631 = dyn.reshape(%628, %629, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %632 = cast(meta[relay.Constant][42] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
  %633 = reshape(%632, newshape=[192]) /* ty=Tensor[(192), float64] */;
  %634 = @func_423(%633) /* ty=(Tensor[(3, 9, 12), float32], Tensor[(12, 4, 4), float64], Tensor[(48), float64], Tensor[(192), float64]) */;
  %635 = cast(%var_3229, dtype="float64") /* ty=Tensor[(16, 3, 16), float64] */;
  %636 = bitwise_or(%622, %623) /* ty=Tensor[(16, 3, 16), int8] */;
  %637 = less(%626, %627) /* ty=Tensor[(16, 3, 16), bool] */;
  %638 = @func_1332() /* ty=Tensor[(4, 11, 5), float32] */;
  %639 = not_equal(%630, %631) /* ty=Tensor[(16, 3, 16), bool] */;
  %640 = %634.2;
  %641 = acosh(%635) /* ty=Tensor[(16, 3, 16), float64] */;
  (%636, %637, %638, %639, %640, meta[relay.Constant][42] /* ty=Tensor[(192), float64] */, %641)
}

def @func_4840(%var_4804: Tensor[(4, 12, 10), float32], %var_4833: Tensor[(99), float64]) -> (Tensor[(4, 12, 10), float32], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float64], Tensor[(99), float64], Tensor[(4, 11, 5), float32]) {
  %642 = cast(%var_4804, dtype="float32") /* ty=Tensor[(4, 12, 10), float32] */;
  %643 = log(%642) /* ty=Tensor[(4, 12, 10), float32] */;
  %644 = cast(%643, dtype="float32") /* ty=Tensor[(4, 12, 10), float32] */;
  %645 = cast(%var_4833, dtype="float64") /* ty=Tensor[(99), float64] */;
  %646 = reshape(%645, newshape=[99]) /* ty=Tensor[(99), float64] */;
  %647 = @func_4255(%646) /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float64], Tensor[(99), bool], Tensor[(120), int16], Tensor[(320), float64], Tensor[(192), int64]) */;
  %648 = sinh(%644) /* ty=Tensor[(4, 12, 10), float32] */;
  %649 = @func_3400() /* ty=Tensor[(4, 11, 5), float32] */;
  %650 = %647.3;
  %651 = @func_1332() /* ty=Tensor[(4, 11, 5), float32] */;
  (%648, %649, %650, %var_4833, %651)
}

def @func_2577() -> (Tensor[(16, 2, 10), float64], Tensor[(320), float64], Tensor[(9, 13, 7), float64]) {
  %652 = cast(meta[relay.Constant][43] /* ty=Tensor[(320), float64] */, dtype="float64") /* ty=Tensor[(320), float64] */;
  %653 = reshape(%652, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float64] */;
  %654 = @func_285(%653) /* ty=(Tensor[(16, 2, 10), float64],) */;
  %655 = @func_2518() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(9, 13, 7), bool], Tensor[(819), uint32]) */;
  %656 = %655.2;
  %657 = cast(%656, dtype="float64") /* ty=Tensor[(9, 13, 7), float64] */;
  %658 = %654.0;
  %659 = acos(%657) /* ty=Tensor[(9, 13, 7), float64] */;
  (%658, meta[relay.Constant][43] /* ty=Tensor[(320), float64] */, %659)
}

def @func_3426(%var_3420: Tensor[(320), float64]) -> (Tensor[(4, 11, 5), float32], Tensor[(16, 2, 10), float64], Tensor[(320), float64]) {
  %660 = cast(%var_3420, dtype="float64") /* ty=Tensor[(320), float64] */;
  %661 = reshape(%660, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float64] */;
  %662 = @func_285(%661) /* ty=(Tensor[(16, 2, 10), float64],) */;
  %663 = @func_3400() /* ty=Tensor[(4, 11, 5), float32] */;
  %664 = %662.0;
  (%663, %664, %var_3420)
}

def @func_1602(%var_1582: Tensor[(192), float64]) -> (Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(3, 9, 12), float32], Tensor[(192), float64], Tensor[(4, 11, 5), float32], Tensor[(12, 4, 4), float64], Tensor[(2, 24), float64]) {
  %665 = cast(%var_1582, dtype="float64") /* ty=Tensor[(192), float64] */;
  %666 = reshape(%665, newshape=[192]) /* ty=Tensor[(192), float64] */;
  %667 = @func_423(%666) /* ty=(Tensor[(3, 9, 12), float32], Tensor[(12, 4, 4), float64], Tensor[(48), float64], Tensor[(192), float64]) */;
  %668 = cast(meta[relay.Constant][44] /* ty=Tensor[(2, 24), float64] */, dtype="float64") /* ty=Tensor[(2, 24), float64] */;
  %669 = cast(%var_1582, dtype="float64") /* ty=Tensor[(192), float64] */;
  %670 = reshape(%668, newshape=[12, 4, 1]) /* ty=Tensor[(12, 4, 1), float64] */;
  %671 = reshape(%669, newshape=[12, 4, 4]) /* ty=Tensor[(12, 4, 4), float64] */;
  %672 = @func_307(%670, %671) /* ty=(Tensor[(12, 4, 4), float64], Tensor[(12, 4, 4), float64]) */;
  %673 = @func_882() /* ty=Tensor[(4, 11, 5), float32] */;
  %674 = @func_1452() /* ty=Tensor[(4, 11, 5), float32] */;
  %675 = %667.0;
  %676 = @func_1298() /* ty=Tensor[(4, 11, 5), float32] */;
  %677 = %672.1;
  (%673, %674, %675, %var_1582, %676, %677, meta[relay.Constant][44] /* ty=Tensor[(2, 24), float64] */)
}

def @func_6005() -> Tensor[(4, 11, 5), float32] {
  @func_4934() /* ty=Tensor[(4, 11, 5), float32] */
}

def @func_6440() -> (Tensor[(4, 11, 5), bool], Tensor[(16, 2, 10), float64]) {
  %678 = @func_2060() /* ty=(Tensor[(4, 11, 5), bool], Tensor[(4, 11, 5), float32]) */;
  %679 = %678.0;
  %680 = @func_2480() /* ty=Tensor[(16, 2, 10), float64] */;
  (%679, %680)
}

def @func_5914(%var_5909: Tensor[(10, 9, 8), float64], %var_5910: Tensor[(10, 9, 8), float64]) -> (Tensor[(10, 9, 8), float64],) {
  %681 = cast(%var_5910, dtype="float64") /* ty=Tensor[(10, 9, 8), float64] */;
  %682 = shape_of(%var_5909, dtype="int32") /* ty=Tensor[(3), int32] */;
  %683 = cast(%var_5909, dtype="float64") /* ty=Tensor[(10, 9, 8), float64] */;
  %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %685 = floor_divide(%683, %684) /* ty=Tensor[(10, 9, 8), float64] */;
  (%685,)
}

def @func_6885() -> (Tensor[(216), float64], Tensor[(15, 7, 7), uint32], Tensor[(735), float64]) {
  %686 = cast(meta[relay.Constant][45] /* ty=Tensor[(735), float64] */, dtype="float64") /* ty=Tensor[(735), float64] */;
  %687 = cast(meta[relay.Constant][45] /* ty=Tensor[(735), float64] */, dtype="float64") /* ty=Tensor[(735), float64] */;
  %688 = reshape(%686, newshape=[15, 7, 7]) /* ty=Tensor[(15, 7, 7), float64] */;
  %689 = reshape(%687, newshape=[15, 7, 7]) /* ty=Tensor[(15, 7, 7), float64] */;
  %690 = @func_2852() /* ty=Tensor[(216), float64] */;
  %691 = @func_5968(%688, %689) /* ty=Tensor[(15, 7, 7), uint32] */;
  (%690, %691, meta[relay.Constant][45] /* ty=Tensor[(735), float64] */)
}

def @func_4987() -> (Tensor[(4, 11, 5), float64], Tensor[(4, 11, 5), float32]) {
  %692 = @func_3216() /* ty=(Tensor[(4, 11, 5), float64],) */;
  %693 = @func_2971() /* ty=(Tensor[(4, 11, 5), float32],) */;
  %694 = %692.0;
  %695 = %693.0;
  (%694, %695)
}

def @func_7518(%var_7496: Tensor[(15, 16, 4), float64]) -> (Tensor[(15, 16, 4), float64], Tensor[(216), float64], Tensor[(216), float64], Tensor[(192), float64]) {
  %696 = cast(%var_7496, dtype="float64") /* ty=Tensor[(15, 16, 4), float64] */;
  %697 = cast(meta[relay.Constant][46] /* ty=Tensor[(216), float64] */, dtype="float64") /* ty=Tensor[(216), float64] */;
  %698 = cast(meta[relay.Constant][47] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
  %699 = reshape(%697, newshape=[216]) /* ty=Tensor[(216), float64] */;
  %700 = reshape(%698, newshape=[48, 4]) /* ty=Tensor[(48, 4), float64] */;
  %701 = @func_1049(%699, %700) /* ty=(Tensor[(4, 11, 5), float32], Tensor[(16, 2, 10), bool], Tensor[(4, 6, 9), float64], Tensor[(216), float64], Tensor[(120), int16], Tensor[(819), uint64], Tensor[(16, 2, 10), float64], Tensor[(4, 6, 9), float64], Tensor[(16, 2, 10), float64], Tensor[(12, 4, 4), float64], Tensor[(48, 4), float64]) */;
  %702 = log2(%696) /* ty=Tensor[(15, 16, 4), float64] */;
  %703 = %701.3;
  (%702, %703, meta[relay.Constant][46] /* ty=Tensor[(216), float64] */, meta[relay.Constant][47] /* ty=Tensor[(192), float64] */)
}

def @func_6058() -> (Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float64]) {
  %704 = @func_5197() /* ty=(Tensor[(4, 11, 5), float32],) */;
  %705 = %704.0;
  %706 = @func_5656() /* ty=Tensor[(4, 11, 5), float32] */;
  %707 = @func_2197() /* ty=Tensor[(4, 11, 5), float64] */;
  (%705, %706, %707)
}

def @func_4018() -> (Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(120), int16]) {
  %708 = @func_882() /* ty=Tensor[(4, 11, 5), float32] */;
  %709 = @func_2468() /* ty=Tensor[(4, 11, 5), float32] */;
  %710 = @func_3455() /* ty=Tensor[(120), int16] */;
  (%708, %709, %710)
}

def @func_7194() -> (Tensor[(6, 14, 6), int16],) {
  %711 = @func_3008() /* ty=(Tensor[(6, 14, 6), bool], Tensor[(120), int16], Tensor[(6, 14, 6), float64]) */;
  %712 = %711.0;
  %713 = cast(%712, dtype="float64") /* ty=Tensor[(6, 14, 6), float64] */;
  %714 = sigmoid(%713) /* ty=Tensor[(6, 14, 6), float64] */;
  %715 = cast(%712, dtype="int16") /* ty=Tensor[(6, 14, 6), int16] */;
  %716 = shape_of(%714, dtype="int32") /* ty=Tensor[(3), int32] */;
  %717 = cast(%714, dtype="int16") /* ty=Tensor[(6, 14, 6), int16] */;
  %718 = dyn.reshape(%715, %716, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %719 = bitwise_xor(%717, %718) /* ty=Tensor[(6, 14, 6), int16] */;
  (%719,)
}

def @func_4336() -> (Tensor[(120), int16], Tensor[(4, 11, 5), float64]) {
  %720 = @func_4269() /* ty=(Tensor[(120), int16],) */;
  %721 = @func_1824() /* ty=(Tensor[(4, 11, 5), float64],) */;
  %722 = %720.0;
  %723 = %721.0;
  (%722, %723)
}

def @func_6180() -> (Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32]) {
  %724 = @func_5197() /* ty=(Tensor[(4, 11, 5), float32],) */;
  %725 = %724.0;
  %726 = @func_2468() /* ty=Tensor[(4, 11, 5), float32] */;
  (%725, %726)
}

def @func_2214(%var_2205: int64, %var_2206: Tensor[(10, 8, 13), int64]) -> Tensor[(10, 8, 13), int64] {
  %727 = cast(%var_2205, dtype="int64") /* ty=int64 */;
  %728 = cast(%var_2206, dtype="int64") /* ty=Tensor[(10, 8, 13), int64] */;
  add(%727, %728) /* ty=Tensor[(10, 8, 13), int64] */
}

def @func_1767(%var_1693: Tensor[(216), float64], %var_1694: Tensor[(192), float64]) -> (Tensor[(192), float64], Tensor[(320), float64], Tensor[(16, 2, 10), float64], Tensor[(4, 11, 5), int16], Tensor[(4, 6, 9), float64], Tensor[(4, 11, 5), float32]) {
  %729 = cast(%var_1694, dtype="int64") /* ty=Tensor[(192), int64] */;
  %730 = reshape(%729, newshape=[3, 16, 4]) /* ty=Tensor[(3, 16, 4), int64] */;
  %731 = @func_1110(%730) /* ty=(Tensor[(3, 16, 4), int64], Tensor[(16, 2, 10), float64], Tensor[(320), float64], Tensor[(3, 16, 4), float32]) */;
  %732 = cast(%var_1694, dtype="int64") /* ty=Tensor[(192), int64] */;
  %733 = reshape(%732, newshape=[3, 16, 4]) /* ty=Tensor[(3, 16, 4), int64] */;
  %734 = @func_1110(%733) /* ty=(Tensor[(3, 16, 4), int64], Tensor[(16, 2, 10), float64], Tensor[(320), float64], Tensor[(3, 16, 4), float32]) */;
  %735 = @func_1197() /* ty=Tensor[(4, 11, 5), float32] */;
  %736 = cast(%735, dtype="float64") /* ty=Tensor[(4, 11, 5), float64] */;
  %737 = reshape(%736, newshape=[4, 11, 5]) /* ty=Tensor[(4, 11, 5), float64] */;
  %738 = @func_1256(%737) /* ty=Tensor[(4, 11, 5), float64] */;
  %739 = cast(%735, dtype="int16") /* ty=Tensor[(4, 11, 5), int16] */;
  %740 = shape_of(%738, dtype="int32") /* ty=Tensor[(3), int32] */;
  %741 = cast(%738, dtype="int16") /* ty=Tensor[(4, 11, 5), int16] */;
  %742 = dyn.reshape(%739, %740, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %743 = cast(%var_1693, dtype="float64") /* ty=Tensor[(216), float64] */;
  %744 = cast(%var_1694, dtype="float64") /* ty=Tensor[(192), float64] */;
  %745 = reshape(%743, newshape=[216]) /* ty=Tensor[(216), float64] */;
  %746 = reshape(%744, newshape=[48, 4]) /* ty=Tensor[(48, 4), float64] */;
  %747 = @func_1049(%745, %746) /* ty=(Tensor[(4, 11, 5), float32], Tensor[(16, 2, 10), bool], Tensor[(4, 6, 9), float64], Tensor[(216), float64], Tensor[(120), int16], Tensor[(819), uint64], Tensor[(16, 2, 10), float64], Tensor[(4, 6, 9), float64], Tensor[(16, 2, 10), float64], Tensor[(12, 4, 4), float64], Tensor[(48, 4), float64]) */;
  %748 = %747.7;
  %749 = cast(%var_1693, dtype="float64") /* ty=Tensor[(216), float64] */;
  %750 = shape_of(%748, dtype="int32") /* ty=Tensor[(3), int32] */;
  %751 = cast(%748, dtype="float64") /* ty=Tensor[(4, 6, 9), float64] */;
  %752 = dyn.reshape(%749, %750, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %753 = cast(%735, dtype="float32") /* ty=Tensor[(4, 11, 5), float32] */;
  %754 = %731.2;
  %755 = %734.1;
  %756 = bitwise_or(%741, %742) /* ty=Tensor[(4, 11, 5), int16] */;
  %757 = divide(%751, %752) /* ty=Tensor[(4, 6, 9), float64] */;
  %758 = asin(%753) /* ty=Tensor[(4, 11, 5), float32] */;
  (%var_1694, %754, %755, %756, %757, %758)
}

def @func_275(%var_268: Tensor[(9, 13, 7), uint64]) -> (Tensor[(9, 13, 7), bool], Tensor[(6, 4, 5), bool], Tensor[(120), int16]) {
  %759 = cast(%var_268, dtype="bool") /* ty=Tensor[(9, 13, 7), bool] */;
  %760 = shape_of(meta[relay.Constant][48] /* ty=Tensor[(9, 13, 7), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %761 = cast(meta[relay.Constant][48] /* ty=Tensor[(9, 13, 7), uint64] */, dtype="bool") /* ty=Tensor[(9, 13, 7), bool] */;
  %762 = dyn.reshape(%759, %760, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %763 = cast(meta[relay.Constant][49] /* ty=Tensor[(120), int16] */, dtype="int16") /* ty=Tensor[(120), int16] */;
  %764 = cast(meta[relay.Constant][49] /* ty=Tensor[(120), int16] */, dtype="float64") /* ty=Tensor[(120), float64] */;
  %765 = reshape(%763, newshape=[6, 4, 5]) /* ty=Tensor[(6, 4, 5), int16] */;
  %766 = reshape(%764, newshape=[6, 4, 5]) /* ty=Tensor[(6, 4, 5), float64] */;
  %767 = @func_190(%765, %766) /* ty=(Tensor[(6, 4, 5), bool], Tensor[(6, 4, 5), bool]) */;
  %768 = less(%761, %762) /* ty=Tensor[(9, 13, 7), bool] */;
  %769 = %767.0;
  (%768, %769, meta[relay.Constant][49] /* ty=Tensor[(120), int16] */)
}

def @func_6741(%var_6712: Tensor[(11, 9, 4), int16]) -> (Tensor[(11, 9, 4), int16], Tensor[(4, 6, 9), float64], Tensor[(216), float64], Tensor[(192), float64]) {
  %770 = cast(%var_6712, dtype="int16") /* ty=Tensor[(11, 9, 4), int16] */;
  %771 = shape_of(meta[relay.Constant][50] /* ty=Tensor[(11, 9, 4), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %772 = cast(meta[relay.Constant][50] /* ty=Tensor[(11, 9, 4), int16] */, dtype="int16") /* ty=Tensor[(11, 9, 4), int16] */;
  %773 = dyn.reshape(%770, %771, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %774 = cast(meta[relay.Constant][51] /* ty=Tensor[(216), float64] */, dtype="float64") /* ty=Tensor[(216), float64] */;
  %775 = cast(meta[relay.Constant][52] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
  %776 = reshape(%774, newshape=[216]) /* ty=Tensor[(216), float64] */;
  %777 = reshape(%775, newshape=[192]) /* ty=Tensor[(192), float64] */;
  %778 = @func_1767(%776, %777) /* ty=(Tensor[(192), float64], Tensor[(320), float64], Tensor[(16, 2, 10), float64], Tensor[(4, 11, 5), int16], Tensor[(4, 6, 9), float64], Tensor[(4, 11, 5), float32]) */;
  %779 = add(%772, %773) /* ty=Tensor[(11, 9, 4), int16] */;
  %780 = %778.4;
  (%779, %780, meta[relay.Constant][51] /* ty=Tensor[(216), float64] */, meta[relay.Constant][52] /* ty=Tensor[(192), float64] */)
}

def @func_4155() -> (Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32]) {
  %781 = @func_4018() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(120), int16]) */;
  %782 = %781.1;
  %783 = @func_1332() /* ty=Tensor[(4, 11, 5), float32] */;
  (%782, %783)
}

def @func_6575() -> (Tensor[(16, 2, 10), float64], Tensor[(3, 16, 4), int64], Tensor[(192), int64]) {
  %784 = @func_3885() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), bool], Tensor[(16, 2, 10), float64]) */;
  %785 = cast(meta[relay.Constant][53] /* ty=Tensor[(192), int64] */, dtype="int64") /* ty=Tensor[(192), int64] */;
  %786 = reshape(%785, newshape=[3, 16, 4]) /* ty=Tensor[(3, 16, 4), int64] */;
  %787 = @func_1110(%786) /* ty=(Tensor[(3, 16, 4), int64], Tensor[(16, 2, 10), float64], Tensor[(320), float64], Tensor[(3, 16, 4), float32]) */;
  %788 = %784.3;
  %789 = %787.0;
  (%788, %789, meta[relay.Constant][53] /* ty=Tensor[(192), int64] */)
}

def @func_2468() -> Tensor[(4, 11, 5), float32] {
  %790 = @func_2150() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(6, 4, 5), bool]) */;
  %790.1
}

def @func_1298() -> Tensor[(4, 11, 5), float32] {
  @func_1197() /* ty=Tensor[(4, 11, 5), float32] */
}

def @func_4255(%var_4191: Tensor[(99), float64]) -> (Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float64], Tensor[(99), bool], Tensor[(120), int16], Tensor[(320), float64], Tensor[(192), int64]) {
  %791 = @func_2971() /* ty=(Tensor[(4, 11, 5), float32],) */;
  %792 = @func_4018() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(120), int16]) */;
  %793 = cast(%var_4191, dtype="float64") /* ty=Tensor[(99), float64] */;
  %794 = reshape(%793, newshape=[9, 1, 11]) /* ty=Tensor[(9, 1, 11), float64] */;
  %795 = @func_3081(%794) /* ty=(Tensor[(9, 1, 11), float64], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32]) */;
  %796 = %795.0;
  %797 = cast(%796, dtype="bool") /* ty=Tensor[(9, 1, 11), bool] */;
  %798 = shape_of(%var_4191, dtype="int32") /* ty=Tensor[(1), int32] */;
  %799 = cast(%var_4191, dtype="bool") /* ty=Tensor[(99), bool] */;
  %800 = dyn.reshape(%797, %798, newshape=[]) /* ty=Tensor[(?), bool] */;
  %801 = cast(meta[relay.Constant][54] /* ty=Tensor[(192), int64] */, dtype="int64") /* ty=Tensor[(192), int64] */;
  %802 = reshape(%801, newshape=[2, 96]) /* ty=Tensor[(2, 96), int64] */;
  %803 = @func_3177(%802) /* ty=(Tensor[(4, 11, 5), float64], Tensor[(320), float64], Tensor[(2, 96), int8], Tensor[(4, 11, 5), float64]) */;
  %804 = %791.0;
  %805 = %792.0;
  %806 = @func_1332() /* ty=Tensor[(4, 11, 5), float32] */;
  %807 = @func_2197() /* ty=Tensor[(4, 11, 5), float64] */;
  %808 = less(%799, %800) /* ty=Tensor[(99), bool] */;
  %809 = @func_3455() /* ty=Tensor[(120), int16] */;
  %810 = %803.1;
  (%804, %805, %806, %807, %808, %809, %810, meta[relay.Constant][54] /* ty=Tensor[(192), int64] */)
}

def @func_1110(%var_1098: Tensor[(3, 16, 4), int64]) -> (Tensor[(3, 16, 4), int64], Tensor[(16, 2, 10), float64], Tensor[(320), float64], Tensor[(3, 16, 4), float32]) {
  %811 = cast(-8 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %812 = cast(%var_1098, dtype="int64") /* ty=Tensor[(3, 16, 4), int64] */;
  %813 = cast(meta[relay.Constant][55] /* ty=Tensor[(320), float64] */, dtype="float64") /* ty=Tensor[(320), float64] */;
  %814 = reshape(%813, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float64] */;
  %815 = @func_285(%814) /* ty=(Tensor[(16, 2, 10), float64],) */;
  %816 = cast(%var_1098, dtype="float32") /* ty=Tensor[(3, 16, 4), float32] */;
  %817 = right_shift(%811, %812) /* ty=Tensor[(3, 16, 4), int64] */;
  %818 = %815.0;
  %819 = asin(%816) /* ty=Tensor[(3, 16, 4), float32] */;
  (%817, %818, meta[relay.Constant][55] /* ty=Tensor[(320), float64] */, %819)
}

def @func_5344(%var_5288: Tensor[(6, 8, 14), uint8], %var_5289: Tensor[(6, 8, 14), uint8]) -> (Tensor[(6, 8, 14), float64],) {
  %820 = cast(%var_5289, dtype="uint8") /* ty=Tensor[(6, 8, 14), uint8] */;
  %821 = shape_of(%var_5288, dtype="int32") /* ty=Tensor[(3), int32] */;
  %822 = cast(%var_5288, dtype="uint8") /* ty=Tensor[(6, 8, 14), uint8] */;
  %823 = dyn.reshape(%820, %821, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %824 = multiply(%822, %823) /* ty=Tensor[(6, 8, 14), uint8] */;
  %825 = cast(%824, dtype="float64") /* ty=Tensor[(6, 8, 14), float64] */;
  %826 = atanh(%825) /* ty=Tensor[(6, 8, 14), float64] */;
  (%826,)
}

def @func_3755() -> (Tensor[(4, 11, 5), float32],) {
  %827 = @func_2348() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32]) */;
  %828 = %827.0;
  (%828,)
}

def @func_3317(%var_3311: int16) -> (Tensor[(11, 3, 5), bool],) {
  %829 = cast(%var_3311, dtype="bool") /* ty=bool */;
  %830 = cast(meta[relay.Constant][56] /* ty=Tensor[(11, 3, 5), int16] */, dtype="bool") /* ty=Tensor[(11, 3, 5), bool] */;
  %831 = greater(%829, %830) /* ty=Tensor[(11, 3, 5), bool] */;
  (%831,)
}

def @func_699(%var_671: Tensor[(4, 6, 9), float64]) -> (Tensor[(4, 6, 9), float64],) {
  %832 = cast(%var_671, dtype="float64") /* ty=Tensor[(4, 6, 9), float64] */;
  %833 = atanh(%832) /* ty=Tensor[(4, 6, 9), float64] */;
  (%833,)
}

def @func_2852() -> Tensor[(216), float64] {
  %834 = @func_1651() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(216), float64], Tensor[(216), float64], Tensor[(4, 11, 5), float32]) */;
  %834.2
}

def @func_2870() -> Tensor[(4, 11, 5), float64] {
  %835 = @func_1665() /* ty=(Tensor[(4, 11, 5), float64],) */;
  %835.0
}

def @func_805(%var_792: uint64, %var_793: Tensor[(7, 1, 9), uint64]) -> (Tensor[(7, 1, 9), uint64], Tensor[(6, 4, 5), bool], Tensor[(819, 1), uint64]) {
  %836 = cast(%var_792, dtype="uint64") /* ty=uint64 */;
  %837 = cast(%var_793, dtype="uint64") /* ty=Tensor[(7, 1, 9), uint64] */;
  %838 = cast(meta[relay.Constant][57] /* ty=Tensor[(819, 1), uint64] */, dtype="uint64") /* ty=Tensor[(819, 1), uint64] */;
  %839 = reshape(%838, newshape=[9, 13, 7]) /* ty=Tensor[(9, 13, 7), uint64] */;
  %840 = @func_275(%839) /* ty=(Tensor[(9, 13, 7), bool], Tensor[(6, 4, 5), bool], Tensor[(120), int16]) */;
  %841 = left_shift(%836, %837) /* ty=Tensor[(7, 1, 9), uint64] */;
  %842 = %840.1;
  (%841, %842, meta[relay.Constant][57] /* ty=Tensor[(819, 1), uint64] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1110(%var_1098: Tensor[(3, 16, 4), int64]) -> (Tensor[(3, 16, 4), int64], Tensor[(16, 2, 10), float64], Tensor[(320), float64], Tensor[(3, 16, 4), float32]) {
  %0 = cast(-8 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %1 = cast(%var_1098, dtype="int64") /* ty=Tensor[(3, 16, 4), int64] */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(320), float64] */, dtype="float64") /* ty=Tensor[(320), float64] */;
  %3 = reshape(%2, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float64] */;
  %4 = @func_285(%3) /* ty=(Tensor[(16, 2, 10), float64],) */;
  %5 = cast(%var_1098, dtype="float32") /* ty=Tensor[(3, 16, 4), float32] */;
  %6 = right_shift(%0, %1) /* ty=Tensor[(3, 16, 4), int64] */;
  %7 = %4.0;
  %8 = asin(%5) /* ty=Tensor[(3, 16, 4), float32] */;
  (%6, %7, meta[relay.Constant][0] /* ty=Tensor[(320), float64] */, %8)
}

def @func_1911(%var_1869: Tensor[(8, 11, 4), uint16], %var_1870: Tensor[(8, 11, 4), uint16], %var_1909: Tensor[(4, 48), int64]) -> (Tensor[(8, 11, 4), bool], Tensor[(320), float64], Tensor[(4, 48), int64]) {
  %9 = cast(%var_1870, dtype="bool") /* ty=Tensor[(8, 11, 4), bool] */;
  %10 = shape_of(%var_1869, dtype="int32") /* ty=Tensor[(3), int32] */;
  %11 = cast(%var_1869, dtype="bool") /* ty=Tensor[(8, 11, 4), bool] */;
  %12 = dyn.reshape(%9, %10, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %13 = equal(%11, %12) /* ty=Tensor[(8, 11, 4), bool] */;
  %14 = cast(meta[relay.Constant][1] /* ty=Tensor[(8, 11, 4), bool] */, dtype="bool") /* ty=Tensor[(8, 11, 4), bool] */;
  %15 = shape_of(%13, dtype="int32") /* ty=Tensor[(3), int32] */;
  %16 = cast(%13, dtype="bool") /* ty=Tensor[(8, 11, 4), bool] */;
  %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %18 = cast(%var_1909, dtype="int64") /* ty=Tensor[(4, 48), int64] */;
  %19 = reshape(%18, newshape=[3, 16, 4]) /* ty=Tensor[(3, 16, 4), int64] */;
  %20 = @func_1110(%19) /* ty=(Tensor[(3, 16, 4), int64], Tensor[(16, 2, 10), float64], Tensor[(320), float64], Tensor[(3, 16, 4), float32]) */;
  %21 = less_equal(%16, %17) /* ty=Tensor[(8, 11, 4), bool] */;
  %22 = %20.2;
  (%21, %22, %var_1909)
}

def @func_2618(%var_2617: Tensor[(192), int64]) -> (Tensor[(4, 11, 5), float64], Tensor[(16, 2, 10), float64], Tensor[(192), int64]) {
  %29 = fn (%var_2597: Tensor[(192), int64]) -> (Tensor[(4, 11, 5), float64], Tensor[(16, 2, 10), float64], Tensor[(192), int64]) {
    %23 = @func_1665() /* ty=(Tensor[(4, 11, 5), float64],) */;
    %24 = cast(%var_2597, dtype="int64") /* ty=Tensor[(192), int64] */;
    %25 = reshape(%24, newshape=[3, 16, 4]) /* ty=Tensor[(3, 16, 4), int64] */;
    %26 = @func_1110(%25) /* ty=(Tensor[(3, 16, 4), int64], Tensor[(16, 2, 10), float64], Tensor[(320), float64], Tensor[(3, 16, 4), float32]) */;
    %27 = %23.0;
    %28 = %26.1;
    (%27, %28, %var_2597)
  };
  %29(%var_2617) /* ty=(Tensor[(4, 11, 5), float64], Tensor[(16, 2, 10), float64], Tensor[(192), int64]) */
}

def @func_6886() -> (Tensor[(216), float64], Tensor[(15, 7, 7), uint32], Tensor[(735), float64]) {
  %36 = fn () -> (Tensor[(216), float64], Tensor[(15, 7, 7), uint32], Tensor[(735), float64]) {
    %30 = cast(meta[relay.Constant][2] /* ty=Tensor[(735), float64] */, dtype="float64") /* ty=Tensor[(735), float64] */;
    %31 = cast(meta[relay.Constant][2] /* ty=Tensor[(735), float64] */, dtype="float64") /* ty=Tensor[(735), float64] */;
    %32 = reshape(%30, newshape=[15, 7, 7]) /* ty=Tensor[(15, 7, 7), float64] */;
    %33 = reshape(%31, newshape=[15, 7, 7]) /* ty=Tensor[(15, 7, 7), float64] */;
    %34 = @func_2852() /* ty=Tensor[(216), float64] */;
    %35 = @func_5968(%32, %33) /* ty=Tensor[(15, 7, 7), uint32] */;
    (%34, %35, meta[relay.Constant][2] /* ty=Tensor[(735), float64] */)
  };
  %36() /* ty=(Tensor[(216), float64], Tensor[(15, 7, 7), uint32], Tensor[(735), float64]) */
}

def @func_6828() -> (Tensor[(4, 11, 5), float32],) {
  %37 = @func_2367() /* ty=Tensor[(4, 11, 5), float32] */;
  (%37,)
}

def @func_4155() -> (Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32]) {
  %38 = @func_4018() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(120), int16]) */;
  %39 = %38.1;
  %40 = @func_1332() /* ty=Tensor[(4, 11, 5), float32] */;
  (%39, %40)
}

def @func_2520() -> (Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(9, 13, 7), bool], Tensor[(819), uint32]) {
  @func_2518() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(9, 13, 7), bool], Tensor[(819), uint32]) */
}

def @func_7366() -> (Tensor[(120), int16], Tensor[(4, 11, 5), float64]) {
  %45 = fn () -> (Tensor[(120), int16], Tensor[(4, 11, 5), float64]) {
    %41 = @func_3582() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(120), int16]) */;
    %42 = @func_6513() /* ty=(Tensor[(4, 11, 5), float64],) */;
    %43 = %41.1;
    %44 = %42.0;
    (%43, %44)
  };
  %45() /* ty=(Tensor[(120), int16], Tensor[(4, 11, 5), float64]) */
}

def @func_5199() -> (Tensor[(4, 11, 5), float32],) {
  @func_5197() /* ty=(Tensor[(4, 11, 5), float32],) */
}

def @func_4934() -> Tensor[(4, 11, 5), float32] {
  @func_1298() /* ty=Tensor[(4, 11, 5), float32] */
}

def @func_4925(%var_4924: Tensor[(4, 11, 5), float32]) -> (Tensor[(4, 11, 5), int64], Tensor[(4, 11, 5), float32], Tensor[(16, 3, 16), float64], Tensor[(768), int8]) {
  %62 = fn (%var_4892: Tensor[(4, 11, 5), float32]) -> (Tensor[(4, 11, 5), int64], Tensor[(4, 11, 5), float32], Tensor[(16, 3, 16), float64], Tensor[(768), int8]) {
    %46 = @func_2367() /* ty=Tensor[(4, 11, 5), float32] */;
    %47 = cast(%var_4892, dtype="int64") /* ty=Tensor[(4, 11, 5), int64] */;
    %48 = shape_of(%46, dtype="int32") /* ty=Tensor[(3), int32] */;
    %49 = cast(%46, dtype="int64") /* ty=Tensor[(4, 11, 5), int64] */;
    %50 = dyn.reshape(%47, %48, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %51 = @func_1963() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(6, 4, 5), bool], Tensor[(120), int16]) */;
    %52 = cast(meta[relay.Constant][3] /* ty=Tensor[(768), int8] */, dtype="int8") /* ty=Tensor[(768), int8] */;
    %53 = cast(meta[relay.Constant][3] /* ty=Tensor[(768), int8] */, dtype="int8") /* ty=Tensor[(768), int8] */;
    %54 = cast(meta[relay.Constant][3] /* ty=Tensor[(768), int8] */, dtype="int8") /* ty=Tensor[(768), int8] */;
    %55 = reshape(%52, newshape=[16, 3, 16]) /* ty=Tensor[(16, 3, 16), int8] */;
    %56 = reshape(%53, newshape=[16, 3, 16]) /* ty=Tensor[(16, 3, 16), int8] */;
    %57 = reshape(%54, newshape=[16, 3, 16]) /* ty=Tensor[(16, 3, 16), int8] */;
    %58 = @func_3299(%55, %56, %57) /* ty=(Tensor[(16, 3, 16), int8], Tensor[(16, 3, 16), bool], Tensor[(4, 11, 5), float32], Tensor[(16, 3, 16), bool], Tensor[(48), float64], Tensor[(192), float64], Tensor[(16, 3, 16), float64]) */;
    %59 = left_shift(%49, %50) /* ty=Tensor[(4, 11, 5), int64] */;
    %60 = %51.0;
    %61 = %58.6;
    (%59, %60, %61, meta[relay.Constant][3] /* ty=Tensor[(768), int8] */)
  };
  %62(%var_4924) /* ty=(Tensor[(4, 11, 5), int64], Tensor[(4, 11, 5), float32], Tensor[(16, 3, 16), float64], Tensor[(768), int8]) */
}

def @func_6399(%var_6397: Tensor[(1, 4, 1), float32]) -> (Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(?, 4, ?), float32], Tensor[(1, 4, 1), float32], Tensor[(4, 11, 5), int8], Tensor[(504, 1), float64], Tensor[(16, 2, 10), float64], Tensor[(192), int64], Tensor[(1, 4, 1), float64], Tensor[(?, 4, ?), int32], Tensor[(?, 4, ?), bool]) {
  @func_6396(%var_6397) /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(?, 4, ?), float32], Tensor[(1, 4, 1), float32], Tensor[(4, 11, 5), int8], Tensor[(504, 1), float64], Tensor[(16, 2, 10), float64], Tensor[(192), int64], Tensor[(1, 4, 1), float64], Tensor[(?, 4, ?), int32], Tensor[(?, 4, ?), bool]) */
}

def @func_883() -> Tensor[(4, 11, 5), float32] {
  %66 = fn () -> Tensor[(4, 11, 5), float32] {
    %63 = cast(meta[relay.Constant][4] /* ty=Tensor[(4, 11, 5), float64] */, dtype="float64") /* ty=Tensor[(4, 11, 5), float64] */;
    %64 = sin(%63) /* ty=Tensor[(4, 11, 5), float64] */;
    %65 = cast(%64, dtype="float32") /* ty=Tensor[(4, 11, 5), float32] */;
    cos(%65) /* ty=Tensor[(4, 11, 5), float32] */
  };
  %66() /* ty=Tensor[(4, 11, 5), float32] */
}

def @func_7237() -> (Tensor[(120), float32], Tensor[(216), float64]) {
  @func_7235() /* ty=(Tensor[(120), float32], Tensor[(216), float64]) */
}

def @func_6773() -> (Tensor[(8, 8), float64], Tensor[(16, 2, 10), float64]) {
  %67 = cast(meta[relay.Constant][5] /* ty=Tensor[(8, 8), float64] */, dtype="float64") /* ty=Tensor[(8, 8), float64] */;
  %68 = sqrt(%67) /* ty=Tensor[(8, 8), float64] */;
  %69 = @func_2480() /* ty=Tensor[(16, 2, 10), float64] */;
  (%68, %69)
}

def @func_5714() -> (Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32]) {
  %73 = fn () -> (Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32]) {
    %70 = @func_3755() /* ty=(Tensor[(4, 11, 5), float32],) */;
    %71 = %70.0;
    %72 = @func_5405() /* ty=Tensor[(4, 11, 5), float32] */;
    (%71, %72)
  };
  %73() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32]) */
}

def @func_7518(%var_7496: Tensor[(15, 16, 4), float64]) -> (Tensor[(15, 16, 4), float64], Tensor[(216), float64], Tensor[(216), float64], Tensor[(192), float64]) {
  %74 = cast(%var_7496, dtype="float64") /* ty=Tensor[(15, 16, 4), float64] */;
  %75 = cast(meta[relay.Constant][6] /* ty=Tensor[(216), float64] */, dtype="float64") /* ty=Tensor[(216), float64] */;
  %76 = cast(meta[relay.Constant][7] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
  %77 = reshape(%75, newshape=[216]) /* ty=Tensor[(216), float64] */;
  %78 = reshape(%76, newshape=[48, 4]) /* ty=Tensor[(48, 4), float64] */;
  %79 = @func_1049(%77, %78) /* ty=(Tensor[(4, 11, 5), float32], Tensor[(16, 2, 10), bool], Tensor[(4, 6, 9), float64], Tensor[(216), float64], Tensor[(120), int16], Tensor[(819), uint64], Tensor[(16, 2, 10), float64], Tensor[(4, 6, 9), float64], Tensor[(16, 2, 10), float64], Tensor[(12, 4, 4), float64], Tensor[(48, 4), float64]) */;
  %80 = log2(%74) /* ty=Tensor[(15, 16, 4), float64] */;
  %81 = %79.3;
  (%80, %81, meta[relay.Constant][6] /* ty=Tensor[(216), float64] */, meta[relay.Constant][7] /* ty=Tensor[(192), float64] */)
}

def @func_3177(%var_3136: Tensor[(2, 96), int64]) -> (Tensor[(4, 11, 5), float64], Tensor[(320), float64], Tensor[(2, 96), int8], Tensor[(4, 11, 5), float64]) {
  %82 = @func_1824() /* ty=(Tensor[(4, 11, 5), float64],) */;
  %83 = cast(%var_3136, dtype="int64") /* ty=Tensor[(2, 96), int64] */;
  %84 = reshape(%83, newshape=[3, 16, 4]) /* ty=Tensor[(3, 16, 4), int64] */;
  %85 = @func_1110(%84) /* ty=(Tensor[(3, 16, 4), int64], Tensor[(16, 2, 10), float64], Tensor[(320), float64], Tensor[(3, 16, 4), float32]) */;
  %86 = cast(meta[relay.Constant][8] /* ty=Tensor[(2, 96), int64] */, dtype="uint64") /* ty=Tensor[(2, 96), uint64] */;
  %87 = shape_of(%var_3136, dtype="int32") /* ty=Tensor[(2), int32] */;
  %88 = cast(%var_3136, dtype="uint64") /* ty=Tensor[(2, 96), uint64] */;
  %89 = dyn.reshape(%86, %87, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %90 = logical_xor(%88, %89) /* ty=Tensor[(2, 96), uint64] */;
  %91 = cast(%90, dtype="int8") /* ty=Tensor[(2, 96), int8] */;
  %92 = shape_of(%var_3136, dtype="int32") /* ty=Tensor[(2), int32] */;
  %93 = cast(%var_3136, dtype="int8") /* ty=Tensor[(2, 96), int8] */;
  %94 = dyn.reshape(%91, %92, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %95 = @func_1824() /* ty=(Tensor[(4, 11, 5), float64],) */;
  %96 = %82.0;
  %97 = %85.2;
  %98 = bitwise_and(%93, %94) /* ty=Tensor[(2, 96), int8] */;
  %99 = %95.0;
  (%96, %97, %98, %99)
}

def @func_7196() -> (Tensor[(6, 14, 6), int16],) {
  @func_7194() /* ty=(Tensor[(6, 14, 6), int16],) */
}

def @func_5160(%var_5115: Tensor[(6, 14, 6), bool], %var_5126: Tensor[(6, 14, 6), bool]) -> (Tensor[(6, 14, 6), float64], Tensor[(6, 14, 6), float64]) {
  %100 = @func_3008() /* ty=(Tensor[(6, 14, 6), bool], Tensor[(120), int16], Tensor[(6, 14, 6), float64]) */;
  %101 = %100.0;
  %102 = cast(%101, dtype="float64") /* ty=Tensor[(6, 14, 6), float64] */;
  %103 = cast(%var_5115, dtype="bool") /* ty=Tensor[(6, 14, 6), bool] */;
  %104 = shape_of(%101, dtype="int32") /* ty=Tensor[(3), int32] */;
  %105 = cast(%101, dtype="bool") /* ty=Tensor[(6, 14, 6), bool] */;
  %106 = dyn.reshape(%103, %104, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %107 = greater_equal(%105, %106) /* ty=Tensor[(6, 14, 6), bool] */;
  %108 = cast(%var_5126, dtype="float32") /* ty=Tensor[(6, 14, 6), float32] */;
  %109 = shape_of(%107, dtype="int32") /* ty=Tensor[(3), int32] */;
  %110 = cast(%107, dtype="float32") /* ty=Tensor[(6, 14, 6), float32] */;
  %111 = dyn.reshape(%108, %109, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %112 = floor_mod(%110, %111) /* ty=Tensor[(6, 14, 6), float32] */;
  %113 = cast(%112, dtype="float64") /* ty=Tensor[(6, 14, 6), float64] */;
  %114 = acosh(%113) /* ty=Tensor[(6, 14, 6), float64] */;
  %115 = cast(%114, dtype="float64") /* ty=Tensor[(6, 14, 6), float64] */;
  %116 = erf(%115) /* ty=Tensor[(6, 14, 6), float64] */;
  %117 = cast(%116, dtype="float64") /* ty=Tensor[(6, 14, 6), float64] */;
  %118 = atanh(%117) /* ty=Tensor[(6, 14, 6), float64] */;
  %119 = cast(%118, dtype="float64") /* ty=Tensor[(6, 14, 6), float64] */;
  %120 = asinh(%102) /* ty=Tensor[(6, 14, 6), float64] */;
  %121 = log2(%119) /* ty=Tensor[(6, 14, 6), float64] */;
  (%120, %121)
}

def @func_3885() -> (Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), bool], Tensor[(16, 2, 10), float64]) {
  %122 = @func_3518() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float64]) */;
  %123 = @func_2060() /* ty=(Tensor[(4, 11, 5), bool], Tensor[(4, 11, 5), float32]) */;
  %124 = %122.0;
  %125 = @func_3400() /* ty=Tensor[(4, 11, 5), float32] */;
  %126 = %123.0;
  %127 = @func_2480() /* ty=Tensor[(16, 2, 10), float64] */;
  (%124, %125, %126, %127)
}

def @func_3180(%var_3178: Tensor[(2, 96), int64]) -> (Tensor[(4, 11, 5), float64], Tensor[(320), float64], Tensor[(2, 96), int8], Tensor[(4, 11, 5), float64]) {
  @func_3177(%var_3178) /* ty=(Tensor[(4, 11, 5), float64], Tensor[(320), float64], Tensor[(2, 96), int8], Tensor[(4, 11, 5), float64]) */
}

def @func_809(%var_807: uint64, %var_808: Tensor[(7, 1, 9), uint64]) -> (Tensor[(7, 1, 9), uint64], Tensor[(6, 4, 5), bool], Tensor[(819, 1), uint64]) {
  @func_805(%var_807, %var_808) /* ty=(Tensor[(7, 1, 9), uint64], Tensor[(6, 4, 5), bool], Tensor[(819, 1), uint64]) */
}

def @func_423(%var_421: Tensor[(192), float64]) -> (Tensor[(3, 9, 12), float32], Tensor[(12, 4, 4), float64], Tensor[(48), float64], Tensor[(192), float64]) {
  %128 = cast(meta[relay.Constant][9] /* ty=Tensor[(3, 9, 12), float32] */, dtype="float32") /* ty=Tensor[(3, 9, 12), float32] */;
  %129 = cast(meta[relay.Constant][10] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %130 = cast(%var_421, dtype="float64") /* ty=Tensor[(192), float64] */;
  %131 = reshape(%129, newshape=[12, 4, 1]) /* ty=Tensor[(12, 4, 1), float64] */;
  %132 = reshape(%130, newshape=[12, 4, 4]) /* ty=Tensor[(12, 4, 4), float64] */;
  %133 = @func_307(%131, %132) /* ty=(Tensor[(12, 4, 4), float64], Tensor[(12, 4, 4), float64]) */;
  %134 = acos(%128) /* ty=Tensor[(3, 9, 12), float32] */;
  %135 = %133.1;
  (%134, %135, meta[relay.Constant][10] /* ty=Tensor[(48), float64] */, %var_421)
}

def @func_2217(%var_2215: int64, %var_2216: Tensor[(10, 8, 13), int64]) -> Tensor[(10, 8, 13), int64] {
  %138 = fn (%var_2205: int64, %var_2206: Tensor[(10, 8, 13), int64]) -> Tensor[(10, 8, 13), int64] {
    %136 = cast(%var_2205, dtype="int64") /* ty=int64 */;
    %137 = cast(%var_2206, dtype="int64") /* ty=Tensor[(10, 8, 13), int64] */;
    add(%136, %137) /* ty=Tensor[(10, 8, 13), int64] */
  };
  %138(%var_2215, %var_2216) /* ty=Tensor[(10, 8, 13), int64] */
}

def @func_4865(%var_4863: Tensor[(768), int8]) -> (Tensor[(8, 12, 14), float64], Tensor[(4, 11, 5), float64], Tensor[(9, 13, 7), float64], Tensor[(16, 3, 16), bool], Tensor[(768), int8]) {
  @func_4862(%var_4863) /* ty=(Tensor[(8, 12, 14), float64], Tensor[(4, 11, 5), float64], Tensor[(9, 13, 7), float64], Tensor[(16, 3, 16), bool], Tensor[(768), int8]) */
}

def @func_6537() -> (Tensor[(4, 11, 5), float32],) {
  %139 = @func_1651() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(216), float64], Tensor[(216), float64], Tensor[(4, 11, 5), float32]) */;
  %140 = %139.3;
  (%140,)
}

def @func_6182() -> (Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32]) {
  @func_6180() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32]) */
}

def @func_4524() -> (Tensor[(4, 11, 5), float32], Tensor[(16, 2, 10), float64]) {
  %145 = fn () -> (Tensor[(4, 11, 5), float32], Tensor[(16, 2, 10), float64]) {
    %141 = @func_2348() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32]) */;
    %142 = @func_2421() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(16, 2, 10), float64], Tensor[(4, 80), float64]) */;
    %143 = %141.1;
    %144 = %142.1;
    (%143, %144)
  };
  %145() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(16, 2, 10), float64]) */
}

def @func_4781() -> (Tensor[(4, 11, 5), float32],) {
  %148 = fn () -> (Tensor[(4, 11, 5), float32],) {
    %146 = @func_3885() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), bool], Tensor[(16, 2, 10), float64]) */;
    %147 = %146.0;
    (%147,)
  };
  %148() /* ty=(Tensor[(4, 11, 5), float32],) */
}

def @func_1113(%var_1111: Tensor[(3, 16, 4), int64]) -> (Tensor[(3, 16, 4), int64], Tensor[(16, 2, 10), float64], Tensor[(320), float64], Tensor[(3, 16, 4), float32]) {
  @func_1110(%var_1111) /* ty=(Tensor[(3, 16, 4), int64], Tensor[(16, 2, 10), float64], Tensor[(320), float64], Tensor[(3, 16, 4), float32]) */
}

def @func_6059() -> (Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float64]) {
  %153 = fn () -> (Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float64]) {
    %149 = @func_5197() /* ty=(Tensor[(4, 11, 5), float32],) */;
    %150 = %149.0;
    %151 = @func_5656() /* ty=Tensor[(4, 11, 5), float32] */;
    %152 = @func_2197() /* ty=Tensor[(4, 11, 5), float64] */;
    (%150, %151, %152)
  };
  %153() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float64]) */
}

def @func_2198() -> Tensor[(4, 11, 5), float64] {
  %155 = fn () -> Tensor[(4, 11, 5), float64] {
    %154 = @func_1824() /* ty=(Tensor[(4, 11, 5), float64],) */;
    %154.0
  };
  %155() /* ty=Tensor[(4, 11, 5), float64] */
}

def @func_3582() -> (Tensor[(4, 11, 5), float32], Tensor[(120), int16]) {
  %156 = @func_2348() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32]) */;
  %157 = %156.1;
  %158 = @func_2367() /* ty=Tensor[(4, 11, 5), float32] */;
  %159 = cast(%158, dtype="float32") /* ty=Tensor[(4, 11, 5), float32] */;
  %160 = shape_of(%157, dtype="int32") /* ty=Tensor[(3), int32] */;
  %161 = cast(%157, dtype="float32") /* ty=Tensor[(4, 11, 5), float32] */;
  %162 = dyn.reshape(%159, %160, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %163 = power(%161, %162) /* ty=Tensor[(4, 11, 5), float32] */;
  %164 = @func_3455() /* ty=Tensor[(120), int16] */;
  (%163, %164)
}

def @func_3217() -> (Tensor[(4, 11, 5), float64],) {
  %167 = fn () -> (Tensor[(4, 11, 5), float64],) {
    %165 = @func_1665() /* ty=(Tensor[(4, 11, 5), float64],) */;
    %166 = %165.0;
    (%166,)
  };
  %167() /* ty=(Tensor[(4, 11, 5), float64],) */
}

def @func_6577() -> (Tensor[(16, 2, 10), float64], Tensor[(3, 16, 4), int64], Tensor[(192), int64]) {
  @func_6575() /* ty=(Tensor[(16, 2, 10), float64], Tensor[(3, 16, 4), int64], Tensor[(192), int64]) */
}

def @func_1652() -> (Tensor[(4, 11, 5), float32], Tensor[(216), float64], Tensor[(216), float64], Tensor[(4, 11, 5), float32]) {
  %174 = fn () -> (Tensor[(4, 11, 5), float32], Tensor[(216), float64], Tensor[(216), float64], Tensor[(4, 11, 5), float32]) {
    %168 = cast(meta[relay.Constant][11] /* ty=Tensor[(216), float64] */, dtype="float64") /* ty=Tensor[(216), float64] */;
    %169 = reshape(%168, newshape=[216]) /* ty=Tensor[(216), float64] */;
    %170 = @func_1162(%169) /* ty=(Tensor[(4, 11, 5), float32], Tensor[(16, 2, 10), bool], Tensor[(216), float64], Tensor[(192), float64], Tensor[(320), float64], Tensor[(12, 4, 4), float64], Tensor[(1, 48), float64], Tensor[(320), float64]) */;
    %171 = @func_1197() /* ty=Tensor[(4, 11, 5), float32] */;
    %172 = %170.2;
    %173 = @func_1197() /* ty=Tensor[(4, 11, 5), float32] */;
    (%171, %172, meta[relay.Constant][11] /* ty=Tensor[(216), float64] */, %173)
  };
  %174() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(216), float64], Tensor[(216), float64], Tensor[(4, 11, 5), float32]) */
}

def @func_3757() -> (Tensor[(4, 11, 5), float32],) {
  @func_3755() /* ty=(Tensor[(4, 11, 5), float32],) */
}

def @func_193(%var_191: Tensor[(6, 4, 5), int16], %var_192: Tensor[(6, 4, 5), float64]) -> (Tensor[(6, 4, 5), bool], Tensor[(6, 4, 5), bool]) {
  %194 = fn (%var_123: Tensor[(6, 4, 5), int16], %var_180: Tensor[(6, 4, 5), float64]) -> (Tensor[(6, 4, 5), bool], Tensor[(6, 4, 5), bool]) {
    %175 = cast(meta[relay.Constant][12] /* ty=Tensor[(6, 4, 5), int16] */, dtype="bool") /* ty=Tensor[(6, 4, 5), bool] */;
    %176 = shape_of(%var_123, dtype="int32") /* ty=Tensor[(3), int32] */;
    %177 = cast(%var_123, dtype="bool") /* ty=Tensor[(6, 4, 5), bool] */;
    %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %179 = cast(%var_123, dtype="float64") /* ty=Tensor[(6, 4, 5), float64] */;
    %180 = sin(%179) /* ty=Tensor[(6, 4, 5), float64] */;
    %181 = cast(%180, dtype="float32") /* ty=Tensor[(6, 4, 5), float32] */;
    %182 = atan(%181) /* ty=Tensor[(6, 4, 5), float32] */;
    %183 = cast(%182, dtype="float64") /* ty=Tensor[(6, 4, 5), float64] */;
    %184 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(6, 4, 5), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %185 = cast(meta[relay.Constant][12] /* ty=Tensor[(6, 4, 5), int16] */, dtype="float64") /* ty=Tensor[(6, 4, 5), float64] */;
    %186 = dyn.reshape(%183, %184, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %187 = mod(%185, %186) /* ty=Tensor[(6, 4, 5), float64] */;
    %188 = cast(%var_180, dtype="bool") /* ty=Tensor[(6, 4, 5), bool] */;
    %189 = shape_of(%187, dtype="int32") /* ty=Tensor[(3), int32] */;
    %190 = cast(%187, dtype="bool") /* ty=Tensor[(6, 4, 5), bool] */;
    %191 = dyn.reshape(%188, %189, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %192 = not_equal(%177, %178) /* ty=Tensor[(6, 4, 5), bool] */;
    %193 = logical_or(%190, %191) /* ty=Tensor[(6, 4, 5), bool] */;
    (%192, %193)
  };
  %194(%var_191, %var_192) /* ty=(Tensor[(6, 4, 5), bool], Tensor[(6, 4, 5), bool]) */
}

def @func_1965() -> (Tensor[(4, 11, 5), float32], Tensor[(6, 4, 5), bool], Tensor[(120), int16]) {
  @func_1963() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(6, 4, 5), bool], Tensor[(120), int16]) */
}

def @func_7450(%var_7448: Tensor[(2, 96), int8]) -> (Tensor[(4, 11, 5), float32], Tensor[(96, 2), int64], Tensor[(2, 96), float32]) {
  @func_7447(%var_7448) /* ty=(Tensor[(4, 11, 5), float32], Tensor[(96, 2), int64], Tensor[(2, 96), float32]) */
}

def @func_3584() -> (Tensor[(4, 11, 5), float32], Tensor[(120), int16]) {
  @func_3582() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(120), int16]) */
}

def @func_7317() -> Tensor[(4, 11, 5), float64] {
  @func_7315() /* ty=Tensor[(4, 11, 5), float64] */
}

def @func_6295() -> (Tensor[(4, 11, 5), float32],) {
  %197 = fn () -> (Tensor[(4, 11, 5), float32],) {
    %195 = @func_4155() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32]) */;
    %196 = %195.0;
    (%196,)
  };
  %197() /* ty=(Tensor[(4, 11, 5), float32],) */
}

def @func_287(%var_286: Tensor[(16, 2, 10), float64]) -> (Tensor[(16, 2, 10), float64],) {
  %200 = fn (%var_282: Tensor[(16, 2, 10), float64]) -> (Tensor[(16, 2, 10), float64],) {
    %198 = cast(%var_282, dtype="float64") /* ty=Tensor[(16, 2, 10), float64] */;
    %199 = cosh(%198) /* ty=Tensor[(16, 2, 10), float64] */;
    (%199,)
  };
  %200(%var_286) /* ty=(Tensor[(16, 2, 10), float64],) */
}

def @func_5824(%var_5822: Tensor[(13, 5, 5), float32]) -> Tensor[(13, 5, 5), float32] {
  @func_5821(%var_5822) /* ty=Tensor[(13, 5, 5), float32] */
}

def @func_6609() -> Tensor[(216), float64] {
  @func_6607() /* ty=Tensor[(216), float64] */
}

def @func_2422() -> (Tensor[(4, 11, 5), float32], Tensor[(16, 2, 10), float64], Tensor[(4, 80), float64]) {
  %207 = fn () -> (Tensor[(4, 11, 5), float32], Tensor[(16, 2, 10), float64], Tensor[(4, 80), float64]) {
    %201 = @func_2150() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(6, 4, 5), bool]) */;
    %202 = cast(meta[relay.Constant][13] /* ty=Tensor[(4, 80), float64] */, dtype="float64") /* ty=Tensor[(4, 80), float64] */;
    %203 = reshape(%202, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float64] */;
    %204 = @func_285(%203) /* ty=(Tensor[(16, 2, 10), float64],) */;
    %205 = %201.1;
    %206 = %204.0;
    (%205, %206, meta[relay.Constant][13] /* ty=Tensor[(4, 80), float64] */)
  };
  %207() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(16, 2, 10), float64], Tensor[(4, 80), float64]) */
}

def @func_3320(%var_3318: int16) -> (Tensor[(11, 3, 5), bool],) {
  @func_3317(%var_3318) /* ty=(Tensor[(11, 3, 5), bool],) */
}

def @func_3009() -> (Tensor[(6, 14, 6), bool], Tensor[(120), int16], Tensor[(6, 14, 6), float64]) {
  %219 = fn () -> (Tensor[(6, 14, 6), bool], Tensor[(120), int16], Tensor[(6, 14, 6), float64]) {
    %208 = cast(meta[relay.Constant][14] /* ty=Tensor[(6, 14, 6), float32] */, dtype="float32") /* ty=Tensor[(6, 14, 6), float32] */;
    %209 = tan(%208) /* ty=Tensor[(6, 14, 6), float32] */;
    %210 = cast(%209, dtype="bool") /* ty=Tensor[(6, 14, 6), bool] */;
    %211 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(6, 14, 6), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %212 = cast(meta[relay.Constant][14] /* ty=Tensor[(6, 14, 6), float32] */, dtype="bool") /* ty=Tensor[(6, 14, 6), bool] */;
    %213 = dyn.reshape(%210, %211, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %214 = @func_1963() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(6, 4, 5), bool], Tensor[(120), int16]) */;
    %215 = cast(%209, dtype="float64") /* ty=Tensor[(6, 14, 6), float64] */;
    %216 = logical_or(%212, %213) /* ty=Tensor[(6, 14, 6), bool] */;
    %217 = %214.2;
    %218 = rsqrt(%215) /* ty=Tensor[(6, 14, 6), float64] */;
    (%216, %217, %218)
  };
  %219() /* ty=(Tensor[(6, 14, 6), bool], Tensor[(120), int16], Tensor[(6, 14, 6), float64]) */
}

def @func_5238(%var_5237: Tensor[(96, 2), int64]) -> (Tensor[(4, 11, 5), float64], Tensor[(16, 2, 10), float64], Tensor[(96, 2), bool]) {
  %231 = fn (%var_5229: Tensor[(96, 2), int64]) -> (Tensor[(4, 11, 5), float64], Tensor[(16, 2, 10), float64], Tensor[(96, 2), bool]) {
    %220 = @func_4405() /* ty=(Tensor[(4, 11, 5), float64], Tensor[(4, 11, 5), float64], Tensor[(4, 11, 5), float32], Tensor[(120), int16]) */;
    %221 = cast(meta[relay.Constant][15] /* ty=Tensor[(96, 2), int64] */, dtype="int64") /* ty=Tensor[(96, 2), int64] */;
    %222 = reshape(%221, newshape=[192]) /* ty=Tensor[(192), int64] */;
    %223 = @func_2616(%222) /* ty=(Tensor[(4, 11, 5), float64], Tensor[(16, 2, 10), float64], Tensor[(192), int64]) */;
    %224 = cast(%var_5229, dtype="bool") /* ty=Tensor[(96, 2), bool] */;
    %225 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(96, 2), int64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %226 = cast(meta[relay.Constant][15] /* ty=Tensor[(96, 2), int64] */, dtype="bool") /* ty=Tensor[(96, 2), bool] */;
    %227 = dyn.reshape(%224, %225, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %228 = %220.1;
    %229 = %223.1;
    %230 = less_equal(%226, %227) /* ty=Tensor[(96, 2), bool] */;
    (%228, %229, %230)
  };
  %231(%var_5237) /* ty=(Tensor[(4, 11, 5), float64], Tensor[(16, 2, 10), float64], Tensor[(96, 2), bool]) */
}

def @func_5946() -> (Tensor[(4, 11, 5), float32],) {
  %232 = @func_4018() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(120), int16]) */;
  %233 = %232.1;
  (%233,)
}

def @func_7111() -> (Tensor[(9, 13, 7), int64], Tensor[(120), int16], Tensor[(4, 11, 5), float32]) {
  %243 = fn () -> (Tensor[(9, 13, 7), int64], Tensor[(120), int16], Tensor[(4, 11, 5), float32]) {
    %234 = @func_2518() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(9, 13, 7), bool], Tensor[(819), uint32]) */;
    %235 = %234.2;
    %236 = cast(meta[relay.Constant][16] /* ty=Tensor[(9, 13, 7), bool] */, dtype="int64") /* ty=Tensor[(9, 13, 7), int64] */;
    %237 = shape_of(%235, dtype="int32") /* ty=Tensor[(3), int32] */;
    %238 = cast(%235, dtype="int64") /* ty=Tensor[(9, 13, 7), int64] */;
    %239 = dyn.reshape(%236, %237, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %240 = subtract(%238, %239) /* ty=Tensor[(9, 13, 7), int64] */;
    %241 = @func_3455() /* ty=Tensor[(120), int16] */;
    %242 = @func_5405() /* ty=Tensor[(4, 11, 5), float32] */;
    (%240, %241, %242)
  };
  %243() /* ty=(Tensor[(9, 13, 7), int64], Tensor[(120), int16], Tensor[(4, 11, 5), float32]) */
}

def @func_1334() -> Tensor[(4, 11, 5), float32] {
  @func_1332() /* ty=Tensor[(4, 11, 5), float32] */
}

def @func_1332() -> Tensor[(4, 11, 5), float32] {
  @func_1197() /* ty=Tensor[(4, 11, 5), float32] */
}

def @func_4936() -> Tensor[(4, 11, 5), float32] {
  @func_4934() /* ty=Tensor[(4, 11, 5), float32] */
}

def @func_4269() -> (Tensor[(120), int16],) {
  %244 = @func_3455() /* ty=Tensor[(120), int16] */;
  (%244,)
}

def @func_7393() -> (Tensor[(4, 11, 5), float64], Tensor[(4, 11, 5), float32]) {
  %248 = fn () -> (Tensor[(4, 11, 5), float64], Tensor[(4, 11, 5), float32]) {
    %245 = @func_5984() /* ty=(Tensor[(4, 11, 5), float64],) */;
    %246 = %245.0;
    %247 = @func_882() /* ty=Tensor[(4, 11, 5), float32] */;
    (%246, %247)
  };
  %248() /* ty=(Tensor[(4, 11, 5), float64], Tensor[(4, 11, 5), float32]) */
}

def @func_6983() -> Tensor[(9, 13, 7), float64] {
  @func_6981() /* ty=Tensor[(9, 13, 7), float64] */
}

def @func_3490(%var_3488: int64, %var_3489: Tensor[(1040), int64]) -> (Tensor[(4, 11, 5), float32], Tensor[(10, 8, 13), int64], int64, Tensor[(1040), int64]) {
  %256 = fn (%var_3468: int64, %var_3469: Tensor[(1040), int64]) -> (Tensor[(4, 11, 5), float32], Tensor[(10, 8, 13), int64], int64, Tensor[(1040), int64]) {
    %249 = @func_2150() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(6, 4, 5), bool]) */;
    %250 = cast(%var_3468, dtype="int64") /* ty=int64 */;
    %251 = cast(%var_3469, dtype="int64") /* ty=Tensor[(1040), int64] */;
    %252 = reshape(%250, newshape=[]) /* ty=int64 */;
    %253 = reshape(%251, newshape=[10, 8, 13]) /* ty=Tensor[(10, 8, 13), int64] */;
    %254 = %249.1;
    %255 = @func_2214(%252, %253) /* ty=Tensor[(10, 8, 13), int64] */;
    (%254, %255, %var_3468, %var_3469)
  };
  %256(%var_3488, %var_3489) /* ty=(Tensor[(4, 11, 5), float32], Tensor[(10, 8, 13), int64], int64, Tensor[(1040), int64]) */
}

def @func_2480() -> Tensor[(16, 2, 10), float64] {
  %257 = @func_2421() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(16, 2, 10), float64], Tensor[(4, 80), float64]) */;
  %258 = %257.1;
  %259 = cast(%258, dtype="float64") /* ty=Tensor[(16, 2, 10), float64] */;
  acosh(%259) /* ty=Tensor[(16, 2, 10), float64] */
}

def @func_5164(%var_5162: Tensor[(6, 14, 6), bool], %var_5163: Tensor[(6, 14, 6), bool]) -> (Tensor[(6, 14, 6), float64], Tensor[(6, 14, 6), float64]) {
  @func_5160(%var_5162, %var_5163) /* ty=(Tensor[(6, 14, 6), float64], Tensor[(6, 14, 6), float64]) */
}

def @func_4338() -> (Tensor[(120), int16], Tensor[(4, 11, 5), float64]) {
  @func_4336() /* ty=(Tensor[(120), int16], Tensor[(4, 11, 5), float64]) */
}

def @func_1431(%var_1428: Tensor[(24, 2), float64], %var_1429: Tensor[(4, 11, 5), float32], %var_1430: Tensor[(144, 2), bool]) -> (Tensor[(24, 2), float64], Tensor[(4, 11, 5), int32], Tensor[(12, 3, 8), bool], Tensor[(144, 2), bool], Tensor[(12, 4, 4), int16], Tensor[(4, 11, 5), float32]) {
  %281 = fn (%var_1389: Tensor[(24, 2), float64], %var_1395: Tensor[(4, 11, 5), float32], %var_1402: Tensor[(144, 2), bool]) -> (Tensor[(24, 2), float64], Tensor[(4, 11, 5), int32], Tensor[(12, 3, 8), bool], Tensor[(144, 2), bool], Tensor[(12, 4, 4), int16], Tensor[(4, 11, 5), float32]) {
    %260 = @func_1197() /* ty=Tensor[(4, 11, 5), float32] */;
    %261 = cast(%var_1395, dtype="int32") /* ty=Tensor[(4, 11, 5), int32] */;
    %262 = shape_of(%260, dtype="int32") /* ty=Tensor[(3), int32] */;
    %263 = cast(%260, dtype="int32") /* ty=Tensor[(4, 11, 5), int32] */;
    %264 = dyn.reshape(%261, %262, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %265 = cast(%var_1402, dtype="bool") /* ty=Tensor[(144, 2), bool] */;
    %266 = reshape(%265, newshape=[12, 3, 8]) /* ty=Tensor[(12, 3, 8), bool] */;
    %267 = cast(%var_1389, dtype="float64") /* ty=Tensor[(24, 2), float64] */;
    %268 = cast(meta[relay.Constant][17] /* ty=Tensor[(24, 8), float64] */, dtype="float64") /* ty=Tensor[(24, 8), float64] */;
    %269 = reshape(%267, newshape=[12, 4, 1]) /* ty=Tensor[(12, 4, 1), float64] */;
    %270 = reshape(%268, newshape=[12, 4, 4]) /* ty=Tensor[(12, 4, 4), float64] */;
    %271 = @func_307(%269, %270) /* ty=(Tensor[(12, 4, 4), float64], Tensor[(12, 4, 4), float64]) */;
    %272 = %271.1;
    %273 = cast(meta[relay.Constant][17] /* ty=Tensor[(24, 8), float64] */, dtype="int16") /* ty=Tensor[(24, 8), int16] */;
    %274 = shape_of(%272, dtype="int32") /* ty=Tensor[(3), int32] */;
    %275 = cast(%272, dtype="int16") /* ty=Tensor[(12, 4, 4), int16] */;
    %276 = dyn.reshape(%273, %274, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %277 = logical_xor(%263, %264) /* ty=Tensor[(4, 11, 5), int32] */;
    %278 = @func_1175(%266) /* ty=Tensor[(12, 3, 8), bool] */;
    %279 = minimum(%275, %276) /* ty=Tensor[(12, 4, 4), int16] */;
    %280 = @func_1298() /* ty=Tensor[(4, 11, 5), float32] */;
    (%var_1389, %277, %278, %var_1402, %279, %280)
  };
  %281(%var_1428, %var_1429, %var_1430) /* ty=(Tensor[(24, 2), float64], Tensor[(4, 11, 5), int32], Tensor[(12, 3, 8), bool], Tensor[(144, 2), bool], Tensor[(12, 4, 4), int16], Tensor[(4, 11, 5), float32]) */
}

def @func_6667(%var_6619: Tensor[(10, 11, 5), float64], %var_6625: int64, %var_6642: Tensor[(320), float64], %var_6645: Tensor[(99), float64]) -> (Tensor[(10, 11, 5), float64], Tensor[(4, 11, 5), float32], int64, Tensor[(1040), int64], Tensor[(12, 4, 4), float64], Tensor[(48), float64], Tensor[(1, 192), float64], Tensor[(4, 11, 5), float32], Tensor[(320), float64], Tensor[(4, 11, 5), float32], Tensor[(99), float64]) {
  %282 = cast(meta[relay.Constant][18] /* ty=Tensor[(10, 11, 5), float64] */, dtype="float64") /* ty=Tensor[(10, 11, 5), float64] */;
  %283 = shape_of(%var_6619, dtype="int32") /* ty=Tensor[(3), int32] */;
  %284 = cast(%var_6619, dtype="float64") /* ty=Tensor[(10, 11, 5), float64] */;
  %285 = dyn.reshape(%282, %283, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %286 = cast(%var_6625, dtype="int64") /* ty=int64 */;
  %287 = cast(meta[relay.Constant][19] /* ty=Tensor[(1040), int64] */, dtype="int64") /* ty=Tensor[(1040), int64] */;
  %288 = reshape(%286, newshape=[]) /* ty=int64 */;
  %289 = reshape(%287, newshape=[1040]) /* ty=Tensor[(1040), int64] */;
  %290 = @func_3487(%288, %289) /* ty=(Tensor[(4, 11, 5), float32], Tensor[(10, 8, 13), int64], int64, Tensor[(1040), int64]) */;
  %291 = cast(meta[relay.Constant][20] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %292 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 192), float64] */, dtype="float64") /* ty=Tensor[(1, 192), float64] */;
  %293 = reshape(%291, newshape=[12, 4, 1]) /* ty=Tensor[(12, 4, 1), float64] */;
  %294 = reshape(%292, newshape=[12, 4, 4]) /* ty=Tensor[(12, 4, 4), float64] */;
  %295 = @func_307(%293, %294) /* ty=(Tensor[(12, 4, 4), float64], Tensor[(12, 4, 4), float64]) */;
  %296 = cast(%var_6642, dtype="float64") /* ty=Tensor[(320), float64] */;
  %297 = reshape(%296, newshape=[320]) /* ty=Tensor[(320), float64] */;
  %298 = @func_3426(%297) /* ty=(Tensor[(4, 11, 5), float32], Tensor[(16, 2, 10), float64], Tensor[(320), float64]) */;
  %299 = cast(%var_6645, dtype="float64") /* ty=Tensor[(99), float64] */;
  %300 = reshape(%299, newshape=[9, 1, 11]) /* ty=Tensor[(9, 1, 11), float64] */;
  %301 = @func_3081(%300) /* ty=(Tensor[(9, 1, 11), float64], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32]) */;
  %302 = add(%284, %285) /* ty=Tensor[(10, 11, 5), float64] */;
  %303 = %290.0;
  %304 = %295.1;
  %305 = %298.0;
  %306 = %301.1;
  (%302, %303, %var_6625, meta[relay.Constant][19] /* ty=Tensor[(1040), int64] */, %304, meta[relay.Constant][20] /* ty=Tensor[(48), float64] */, meta[relay.Constant][21] /* ty=Tensor[(1, 192), float64] */, %305, %var_6642, %306, %var_6645)
}

def @func_1963() -> (Tensor[(4, 11, 5), float32], Tensor[(6, 4, 5), bool], Tensor[(120), int16]) {
  %307 = cast(meta[relay.Constant][22] /* ty=Tensor[(120), int16] */, dtype="int16") /* ty=Tensor[(120), int16] */;
  %308 = cast(meta[relay.Constant][22] /* ty=Tensor[(120), int16] */, dtype="float64") /* ty=Tensor[(120), float64] */;
  %309 = reshape(%307, newshape=[6, 4, 5]) /* ty=Tensor[(6, 4, 5), int16] */;
  %310 = reshape(%308, newshape=[6, 4, 5]) /* ty=Tensor[(6, 4, 5), float64] */;
  %311 = @func_190(%309, %310) /* ty=(Tensor[(6, 4, 5), bool], Tensor[(6, 4, 5), bool]) */;
  %312 = @func_1452() /* ty=Tensor[(4, 11, 5), float32] */;
  %313 = %311.1;
  (%312, %313, meta[relay.Constant][22] /* ty=Tensor[(120), int16] */)
}

def @func_2743() -> Tensor[(4, 11, 5), float32] {
  %314 = fn () -> Tensor[(4, 11, 5), float32] {
    @func_2367() /* ty=Tensor[(4, 11, 5), float32] */
  };
  %314() /* ty=Tensor[(4, 11, 5), float32] */
}

def @func_2482() -> Tensor[(16, 2, 10), float64] {
  @func_2480() /* ty=Tensor[(16, 2, 10), float64] */
}

def @func_5777(%var_5770: Tensor[(11, 9), float64]) -> (Tensor[(120), int16], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(11, 9), float64]) {
  %315 = @func_4336() /* ty=(Tensor[(120), int16], Tensor[(4, 11, 5), float64]) */;
  %316 = cast(%var_5770, dtype="float64") /* ty=Tensor[(11, 9), float64] */;
  %317 = reshape(%316, newshape=[9, 1, 11]) /* ty=Tensor[(9, 1, 11), float64] */;
  %318 = @func_3081(%317) /* ty=(Tensor[(9, 1, 11), float64], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32]) */;
  %319 = %315.0;
  %320 = @func_5656() /* ty=Tensor[(4, 11, 5), float32] */;
  %321 = @func_1332() /* ty=Tensor[(4, 11, 5), float32] */;
  %322 = %318.2;
  (%319, %320, %321, %322, %var_5770)
}

def @func_2870() -> Tensor[(4, 11, 5), float64] {
  %323 = @func_1665() /* ty=(Tensor[(4, 11, 5), float64],) */;
  %323.0
}

def @func_2350() -> (Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32]) {
  @func_2348() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32]) */
}

def @func_2872() -> Tensor[(4, 11, 5), float64] {
  @func_2870() /* ty=Tensor[(4, 11, 5), float64] */
}

def @func_2903() -> (Tensor[(4, 11, 5), float32], Tensor[(12, 3, 8), bool], Tensor[(72, 4), bool]) {
  @func_2901() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(12, 3, 8), bool], Tensor[(72, 4), bool]) */
}

def @func_6112() -> Tensor[(15, 10, 2), uint8] {
  %328 = fn () -> Tensor[(15, 10, 2), uint8] {
    %324 = cast(meta[relay.Constant][24] /* ty=Tensor[(15, 10, 2), uint8] */, dtype="uint8") /* ty=Tensor[(15, 10, 2), uint8] */;
    %325 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(15, 10, 2), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %326 = cast(meta[relay.Constant][23] /* ty=Tensor[(15, 10, 2), uint8] */, dtype="uint8") /* ty=Tensor[(15, 10, 2), uint8] */;
    %327 = dyn.reshape(%324, %325, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    left_shift(%326, %327) /* ty=Tensor[(15, 10, 2), uint8] */
  };
  %328() /* ty=Tensor[(15, 10, 2), uint8] */
}

def @func_5197() -> (Tensor[(4, 11, 5), float32],) {
  %329 = @func_1197() /* ty=Tensor[(4, 11, 5), float32] */;
  (%329,)
}

def @func_3083(%var_3082: Tensor[(9, 1, 11), float64]) -> (Tensor[(9, 1, 11), float64], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32]) {
  %335 = fn (%var_3057: Tensor[(9, 1, 11), float64]) -> (Tensor[(9, 1, 11), float64], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32]) {
    %330 = cast(%var_3057, dtype="float64") /* ty=Tensor[(9, 1, 11), float64] */;
    %331 = @func_2971() /* ty=(Tensor[(4, 11, 5), float32],) */;
    %332 = sigmoid(%330) /* ty=Tensor[(9, 1, 11), float64] */;
    %333 = %331.0;
    %334 = @func_882() /* ty=Tensor[(4, 11, 5), float32] */;
    (%332, %333, %334)
  };
  %335(%var_3082) /* ty=(Tensor[(9, 1, 11), float64], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32]) */
}

def @func_2468() -> Tensor[(4, 11, 5), float32] {
  %336 = @func_2150() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(6, 4, 5), bool]) */;
  %336.1
}

def @func_4440() -> Tensor[(320), float64] {
  %337 = @func_2577() /* ty=(Tensor[(16, 2, 10), float64], Tensor[(320), float64], Tensor[(9, 13, 7), float64]) */;
  %337.1
}

def @func_2973() -> (Tensor[(4, 11, 5), float32],) {
  @func_2971() /* ty=(Tensor[(4, 11, 5), float32],) */
}

def @func_2518() -> (Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(9, 13, 7), bool], Tensor[(819), uint32]) {
  %338 = cast(meta[relay.Constant][25] /* ty=Tensor[(819), uint64] */, dtype="uint64") /* ty=Tensor[(819), uint64] */;
  %339 = reshape(%338, newshape=[9, 13, 7]) /* ty=Tensor[(9, 13, 7), uint64] */;
  %340 = @func_275(%339) /* ty=(Tensor[(9, 13, 7), bool], Tensor[(6, 4, 5), bool], Tensor[(120), int16]) */;
  %341 = cast(meta[relay.Constant][25] /* ty=Tensor[(819), uint64] */, dtype="float32") /* ty=Tensor[(819), float32] */;
  %342 = erf(%341) /* ty=Tensor[(819), float32] */;
  %343 = cast(meta[relay.Constant][25] /* ty=Tensor[(819), uint64] */, dtype="uint32") /* ty=Tensor[(819), uint32] */;
  %344 = shape_of(%342, dtype="int32") /* ty=Tensor[(1), int32] */;
  %345 = cast(%342, dtype="uint32") /* ty=Tensor[(819), uint32] */;
  %346 = dyn.reshape(%343, %344, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %347 = @func_2468() /* ty=Tensor[(4, 11, 5), float32] */;
  %348 = @func_2468() /* ty=Tensor[(4, 11, 5), float32] */;
  %349 = %340.0;
  %350 = subtract(%345, %346) /* ty=Tensor[(819), uint32] */;
  (%347, %348, %349, %350)
}

def @func_1198() -> Tensor[(4, 11, 5), float32] {
  %351 = fn () -> Tensor[(4, 11, 5), float32] {
    @func_882() /* ty=Tensor[(4, 11, 5), float32] */
  };
  %351() /* ty=Tensor[(4, 11, 5), float32] */
}

def @func_4073() -> (Tensor[(16, 2, 10), float64],) {
  %353 = fn () -> (Tensor[(16, 2, 10), float64],) {
    %352 = @func_2480() /* ty=Tensor[(16, 2, 10), float64] */;
    (%352,)
  };
  %353() /* ty=(Tensor[(16, 2, 10), float64],) */
}

def @func_1452() -> Tensor[(4, 11, 5), float32] {
  %354 = @func_1197() /* ty=Tensor[(4, 11, 5), float32] */;
  %355 = cast(%354, dtype="float32") /* ty=Tensor[(4, 11, 5), float32] */;
  atan(%355) /* ty=Tensor[(4, 11, 5), float32] */
}

def @func_2828(%var_2826: Tensor[(440, 1), int8]) -> (Tensor[(4, 11, 5), float32], Tensor[(440, ?), uint8]) {
  @func_2825(%var_2826) /* ty=(Tensor[(4, 11, 5), float32], Tensor[(440, ?), uint8]) */
}

def @func_4862(%var_4859: Tensor[(768), int8]) -> (Tensor[(8, 12, 14), float64], Tensor[(4, 11, 5), float64], Tensor[(9, 13, 7), float64], Tensor[(16, 3, 16), bool], Tensor[(768), int8]) {
  %356 = cast(meta[relay.Constant][26] /* ty=Tensor[(8, 12, 14), float64] */, dtype="float64") /* ty=Tensor[(8, 12, 14), float64] */;
  %357 = @func_3518() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float64]) */;
  %358 = @func_2577() /* ty=(Tensor[(16, 2, 10), float64], Tensor[(320), float64], Tensor[(9, 13, 7), float64]) */;
  %359 = cast(%var_4859, dtype="int8") /* ty=Tensor[(768), int8] */;
  %360 = cast(%var_4859, dtype="int8") /* ty=Tensor[(768), int8] */;
  %361 = cast(%var_4859, dtype="int8") /* ty=Tensor[(768), int8] */;
  %362 = reshape(%359, newshape=[16, 3, 16]) /* ty=Tensor[(16, 3, 16), int8] */;
  %363 = reshape(%360, newshape=[16, 3, 16]) /* ty=Tensor[(16, 3, 16), int8] */;
  %364 = reshape(%361, newshape=[16, 3, 16]) /* ty=Tensor[(16, 3, 16), int8] */;
  %365 = @func_3299(%362, %363, %364) /* ty=(Tensor[(16, 3, 16), int8], Tensor[(16, 3, 16), bool], Tensor[(4, 11, 5), float32], Tensor[(16, 3, 16), bool], Tensor[(48), float64], Tensor[(192), float64], Tensor[(16, 3, 16), float64]) */;
  %366 = sinh(%356) /* ty=Tensor[(8, 12, 14), float64] */;
  %367 = %357.1;
  %368 = %358.2;
  %369 = %365.1;
  (%366, %367, %368, %369, %var_4859)
}

def @func_1052(%var_1050: Tensor[(216), float64], %var_1051: Tensor[(48, 4), float64]) -> (Tensor[(4, 11, 5), float32], Tensor[(16, 2, 10), bool], Tensor[(4, 6, 9), float64], Tensor[(216), float64], Tensor[(120), int16], Tensor[(819), uint64], Tensor[(16, 2, 10), float64], Tensor[(4, 6, 9), float64], Tensor[(16, 2, 10), float64], Tensor[(12, 4, 4), float64], Tensor[(48, 4), float64]) {
  %404 = fn (%var_1009: Tensor[(216), float64], %var_1043: Tensor[(48, 4), float64]) -> (Tensor[(4, 11, 5), float32], Tensor[(16, 2, 10), bool], Tensor[(4, 6, 9), float64], Tensor[(216), float64], Tensor[(120), int16], Tensor[(819), uint64], Tensor[(16, 2, 10), float64], Tensor[(4, 6, 9), float64], Tensor[(16, 2, 10), float64], Tensor[(12, 4, 4), float64], Tensor[(48, 4), float64]) {
    %370 = cast(meta[relay.Constant][27] /* ty=Tensor[(8, 40), float64] */, dtype="float64") /* ty=Tensor[(8, 40), float64] */;
    %371 = reshape(%370, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float64] */;
    %372 = @func_285(%371) /* ty=(Tensor[(16, 2, 10), float64],) */;
    %373 = %372.0;
    %374 = cast(meta[relay.Constant][27] /* ty=Tensor[(8, 40), float64] */, dtype="bool") /* ty=Tensor[(8, 40), bool] */;
    %375 = shape_of(%373, dtype="int32") /* ty=Tensor[(3), int32] */;
    %376 = cast(%373, dtype="bool") /* ty=Tensor[(16, 2, 10), bool] */;
    %377 = dyn.reshape(%374, %375, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %378 = cast(%var_1009, dtype="float64") /* ty=Tensor[(216), float64] */;
    %379 = reshape(%378, newshape=[4, 6, 9]) /* ty=Tensor[(4, 6, 9), float64] */;
    %380 = @func_699(%379) /* ty=(Tensor[(4, 6, 9), float64],) */;
    %381 = cast(meta[relay.Constant][28] /* ty=Tensor[(819), uint64] */, dtype="uint64") /* ty=Tensor[(819), uint64] */;
    %382 = reshape(%381, newshape=[9, 13, 7]) /* ty=Tensor[(9, 13, 7), uint64] */;
    %383 = @func_275(%382) /* ty=(Tensor[(9, 13, 7), bool], Tensor[(6, 4, 5), bool], Tensor[(120), int16]) */;
    %384 = cast(meta[relay.Constant][27] /* ty=Tensor[(8, 40), float64] */, dtype="float64") /* ty=Tensor[(8, 40), float64] */;
    %385 = reshape(%384, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float64] */;
    %386 = @func_285(%385) /* ty=(Tensor[(16, 2, 10), float64],) */;
    %387 = cast(%var_1009, dtype="float64") /* ty=Tensor[(216), float64] */;
    %388 = reshape(%387, newshape=[4, 6, 9]) /* ty=Tensor[(4, 6, 9), float64] */;
    %389 = @func_699(%388) /* ty=(Tensor[(4, 6, 9), float64],) */;
    %390 = %386.0;
    %391 = cast(%390, dtype="float64") /* ty=Tensor[(16, 2, 10), float64] */;
    %392 = reshape(%391, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float64] */;
    %393 = @func_285(%392) /* ty=(Tensor[(16, 2, 10), float64],) */;
    %394 = cast(%var_1043, dtype="float64") /* ty=Tensor[(48, 4), float64] */;
    %395 = reshape(%394, newshape=[192]) /* ty=Tensor[(192), float64] */;
    %396 = @func_423(%395) /* ty=(Tensor[(3, 9, 12), float32], Tensor[(12, 4, 4), float64], Tensor[(48), float64], Tensor[(192), float64]) */;
    %397 = @func_882() /* ty=Tensor[(4, 11, 5), float32] */;
    %398 = less(%376, %377) /* ty=Tensor[(16, 2, 10), bool] */;
    %399 = %380.0;
    %400 = %383.2;
    %401 = %389.0;
    %402 = %393.0;
    %403 = %396.1;
    (%397, %398, %399, %var_1009, %400, meta[relay.Constant][28] /* ty=Tensor[(819), uint64] */, %390, %401, %402, %403, %var_1043)
  };
  %404(%var_1050, %var_1051) /* ty=(Tensor[(4, 11, 5), float32], Tensor[(16, 2, 10), bool], Tensor[(4, 6, 9), float64], Tensor[(216), float64], Tensor[(120), int16], Tensor[(819), uint64], Tensor[(16, 2, 10), float64], Tensor[(4, 6, 9), float64], Tensor[(16, 2, 10), float64], Tensor[(12, 4, 4), float64], Tensor[(48, 4), float64]) */
}

def @func_7447(%var_7427: Tensor[(2, 96), int8]) -> (Tensor[(4, 11, 5), float32], Tensor[(96, 2), int64], Tensor[(2, 96), float32]) {
  %405 = @func_5713() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32]) */;
  %406 = cast(meta[relay.Constant][29] /* ty=Tensor[(96, 2), int64] */, dtype="int64") /* ty=Tensor[(96, 2), int64] */;
  %407 = reshape(%406, newshape=[2, 96]) /* ty=Tensor[(2, 96), int64] */;
  %408 = @func_3177(%407) /* ty=(Tensor[(4, 11, 5), float64], Tensor[(320), float64], Tensor[(2, 96), int8], Tensor[(4, 11, 5), float64]) */;
  %409 = %408.2;
  %410 = cast(%var_7427, dtype="float32") /* ty=Tensor[(2, 96), float32] */;
  %411 = shape_of(%409, dtype="int32") /* ty=Tensor[(2), int32] */;
  %412 = cast(%409, dtype="float32") /* ty=Tensor[(2, 96), float32] */;
  %413 = dyn.reshape(%410, %411, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %414 = %405.0;
  %415 = floor_divide(%412, %413) /* ty=Tensor[(2, 96), float32] */;
  (%414, meta[relay.Constant][29] /* ty=Tensor[(96, 2), int64] */, %415)
}

def @func_2112(%var_2110: Tensor[(4, 11, 5), float64], %var_2111: Tensor[(4, 11, 5), uint64]) -> Tensor[(4, 11, 5), bool] {
  %427 = fn (%var_2091: Tensor[(4, 11, 5), float64], %var_2096: Tensor[(4, 11, 5), uint64]) -> Tensor[(4, 11, 5), bool] {
    %416 = @func_1665() /* ty=(Tensor[(4, 11, 5), float64],) */;
    %417 = %416.0;
    %418 = cast(%var_2091, dtype="uint64") /* ty=Tensor[(4, 11, 5), uint64] */;
    %419 = shape_of(%417, dtype="int32") /* ty=Tensor[(3), int32] */;
    %420 = cast(%417, dtype="uint64") /* ty=Tensor[(4, 11, 5), uint64] */;
    %421 = dyn.reshape(%418, %419, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %422 = maximum(%420, %421) /* ty=Tensor[(4, 11, 5), uint64] */;
    %423 = cast(%var_2096, dtype="bool") /* ty=Tensor[(4, 11, 5), bool] */;
    %424 = shape_of(%422, dtype="int32") /* ty=Tensor[(3), int32] */;
    %425 = cast(%422, dtype="bool") /* ty=Tensor[(4, 11, 5), bool] */;
    %426 = dyn.reshape(%423, %424, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    equal(%425, %426) /* ty=Tensor[(4, 11, 5), bool] */
  };
  %427(%var_2110, %var_2111) /* ty=Tensor[(4, 11, 5), bool] */
}

def @func_4442() -> Tensor[(320), float64] {
  @func_4440() /* ty=Tensor[(320), float64] */
}

def @func_7315() -> Tensor[(4, 11, 5), float64] {
  %428 = @func_1824() /* ty=(Tensor[(4, 11, 5), float64],) */;
  %428.0
}

def @func_2369() -> Tensor[(4, 11, 5), float32] {
  @func_2367() /* ty=Tensor[(4, 11, 5), float32] */
}

def @func_2470() -> Tensor[(4, 11, 5), float32] {
  @func_2468() /* ty=Tensor[(4, 11, 5), float32] */
}

def @func_2578() -> (Tensor[(16, 2, 10), float64], Tensor[(320), float64], Tensor[(9, 13, 7), float64]) {
  %437 = fn () -> (Tensor[(16, 2, 10), float64], Tensor[(320), float64], Tensor[(9, 13, 7), float64]) {
    %429 = cast(meta[relay.Constant][30] /* ty=Tensor[(320), float64] */, dtype="float64") /* ty=Tensor[(320), float64] */;
    %430 = reshape(%429, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float64] */;
    %431 = @func_285(%430) /* ty=(Tensor[(16, 2, 10), float64],) */;
    %432 = @func_2518() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(9, 13, 7), bool], Tensor[(819), uint32]) */;
    %433 = %432.2;
    %434 = cast(%433, dtype="float64") /* ty=Tensor[(9, 13, 7), float64] */;
    %435 = %431.0;
    %436 = acos(%434) /* ty=Tensor[(9, 13, 7), float64] */;
    (%435, meta[relay.Constant][30] /* ty=Tensor[(320), float64] */, %436)
  };
  %437() /* ty=(Tensor[(16, 2, 10), float64], Tensor[(320), float64], Tensor[(9, 13, 7), float64]) */
}

def @func_3426(%var_3420: Tensor[(320), float64]) -> (Tensor[(4, 11, 5), float32], Tensor[(16, 2, 10), float64], Tensor[(320), float64]) {
  %438 = cast(%var_3420, dtype="float64") /* ty=Tensor[(320), float64] */;
  %439 = reshape(%438, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float64] */;
  %440 = @func_285(%439) /* ty=(Tensor[(16, 2, 10), float64],) */;
  %441 = @func_3400() /* ty=Tensor[(4, 11, 5), float32] */;
  %442 = %440.0;
  (%441, %442, %var_3420)
}

def @func_4675() -> (Tensor[(13, 1, 8), float64], Tensor[(120), int16]) {
  %447 = fn () -> (Tensor[(13, 1, 8), float64], Tensor[(120), int16]) {
    %443 = cast(meta[relay.Constant][31] /* ty=Tensor[(13, 1, 8), float64] */, dtype="float64") /* ty=Tensor[(13, 1, 8), float64] */;
    %444 = @func_4269() /* ty=(Tensor[(120), int16],) */;
    %445 = sqrt(%443) /* ty=Tensor[(13, 1, 8), float64] */;
    %446 = %444.0;
    (%445, %446)
  };
  %447() /* ty=(Tensor[(13, 1, 8), float64], Tensor[(120), int16]) */
}

def @func_4019() -> (Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(120), int16]) {
  %451 = fn () -> (Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(120), int16]) {
    %448 = @func_882() /* ty=Tensor[(4, 11, 5), float32] */;
    %449 = @func_2468() /* ty=Tensor[(4, 11, 5), float32] */;
    %450 = @func_3455() /* ty=Tensor[(120), int16] */;
    (%448, %449, %450)
  };
  %451() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(120), int16]) */
}

def @func_6607() -> Tensor[(216), float64] {
  @func_2852() /* ty=Tensor[(216), float64] */
}

def @func_7615() -> (Tensor[(216), float64], Tensor[(4, 11, 5), float32], Tensor[(99), float64]) {
  @func_7613() /* ty=(Tensor[(216), float64], Tensor[(4, 11, 5), float32], Tensor[(99), float64]) */
}

def @func_2825(%var_2788: Tensor[(440, 1), int8]) -> (Tensor[(4, 11, 5), float32], Tensor[(440, ?), uint8]) {
  %452 = cast(%var_2788, dtype="int8") /* ty=Tensor[(440, 1), int8] */;
  %453 = cast(%var_2788, dtype="int8") /* ty=Tensor[(440, 1), int8] */;
  %454 = reshape(%452, newshape=[11, 10, 4]) /* ty=Tensor[(11, 10, 4), int8] */;
  %455 = reshape(%453, newshape=[11, 10, 4]) /* ty=Tensor[(11, 10, 4), int8] */;
  %456 = @func_1090(%454, %455) /* ty=(Tensor[(11, 10, 4), bool], Tensor[(12, 4, 4), float64], Tensor[(48), float64], Tensor[(192), float64]) */;
  %457 = %456.0;
  %458 = cast(%457, dtype="uint8") /* ty=Tensor[(11, 10, 4), uint8] */;
  %459 = shape_of(%var_2788, dtype="int32") /* ty=Tensor[(2), int32] */;
  %460 = cast(%var_2788, dtype="uint8") /* ty=Tensor[(440, 1), uint8] */;
  %461 = dyn.reshape(%458, %459, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %462 = @func_882() /* ty=Tensor[(4, 11, 5), float32] */;
  %463 = right_shift(%460, %461) /* ty=Tensor[(440, ?), uint8] */;
  (%462, %463)
}

def @func_1454() -> Tensor[(4, 11, 5), float32] {
  @func_1452() /* ty=Tensor[(4, 11, 5), float32] */
}

def @func_5821(%var_5811: Tensor[(13, 5, 5), float32]) -> Tensor[(13, 5, 5), float32] {
  %464 = cast(%var_5811, dtype="float32") /* ty=Tensor[(13, 5, 5), float32] */;
  tan(%464) /* ty=Tensor[(13, 5, 5), float32] */
}

def @func_5656() -> Tensor[(4, 11, 5), float32] {
  %465 = @func_2971() /* ty=(Tensor[(4, 11, 5), float32],) */;
  %465.0
}

def @func_1299() -> Tensor[(4, 11, 5), float32] {
  %466 = fn () -> Tensor[(4, 11, 5), float32] {
    @func_1197() /* ty=Tensor[(4, 11, 5), float32] */
  };
  %466() /* ty=Tensor[(4, 11, 5), float32] */
}

def @func_2151() -> (Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(6, 4, 5), bool]) {
  %473 = fn () -> (Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(6, 4, 5), bool]) {
    %467 = @func_1197() /* ty=Tensor[(4, 11, 5), float32] */;
    %468 = cast(%467, dtype="float32") /* ty=Tensor[(4, 11, 5), float32] */;
    %469 = @func_1963() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(6, 4, 5), bool], Tensor[(120), int16]) */;
    %470 = @func_882() /* ty=Tensor[(4, 11, 5), float32] */;
    %471 = log10(%468) /* ty=Tensor[(4, 11, 5), float32] */;
    %472 = %469.1;
    (%470, %471, %472)
  };
  %473() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(6, 4, 5), bool]) */
}

def @func_7521(%var_7519: Tensor[(15, 16, 4), float64]) -> (Tensor[(15, 16, 4), float64], Tensor[(216), float64], Tensor[(216), float64], Tensor[(192), float64]) {
  @func_7518(%var_7519) /* ty=(Tensor[(15, 16, 4), float64], Tensor[(216), float64], Tensor[(216), float64], Tensor[(192), float64]) */
}

def @func_3317(%var_3311: int16) -> (Tensor[(11, 3, 5), bool],) {
  %474 = cast(%var_3311, dtype="bool") /* ty=bool */;
  %475 = cast(meta[relay.Constant][32] /* ty=Tensor[(11, 3, 5), int16] */, dtype="bool") /* ty=Tensor[(11, 3, 5), bool] */;
  %476 = greater(%474, %475) /* ty=Tensor[(11, 3, 5), bool] */;
  (%476,)
}

def @func_6442() -> (Tensor[(4, 11, 5), bool], Tensor[(16, 2, 10), float64]) {
  @func_6440() /* ty=(Tensor[(4, 11, 5), bool], Tensor[(16, 2, 10), float64]) */
}

def @func_4324() -> (Tensor[(4, 11, 5), float32],) {
  %479 = fn () -> (Tensor[(4, 11, 5), float32],) {
    %477 = @func_3518() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float64]) */;
    %478 = %477.0;
    (%478,)
  };
  %479() /* ty=(Tensor[(4, 11, 5), float32],) */
}

def @func_2901() -> (Tensor[(4, 11, 5), float32], Tensor[(12, 3, 8), bool], Tensor[(72, 4), bool]) {
  %480 = cast(meta[relay.Constant][33] /* ty=Tensor[(72, 4), bool] */, dtype="bool") /* ty=Tensor[(72, 4), bool] */;
  %481 = reshape(%480, newshape=[12, 3, 8]) /* ty=Tensor[(12, 3, 8), bool] */;
  %482 = @func_1332() /* ty=Tensor[(4, 11, 5), float32] */;
  %483 = @func_1175(%481) /* ty=Tensor[(12, 3, 8), bool] */;
  (%482, %483, meta[relay.Constant][33] /* ty=Tensor[(72, 4), bool] */)
}

def @func_3975() -> (Tensor[(4, 11, 5), int8],) {
  %491 = fn () -> (Tensor[(4, 11, 5), int8],) {
    %484 = @func_1665() /* ty=(Tensor[(4, 11, 5), float64],) */;
    %485 = %484.0;
    %486 = cast(meta[relay.Constant][34] /* ty=Tensor[(4, 11, 5), float64] */, dtype="int8") /* ty=Tensor[(4, 11, 5), int8] */;
    %487 = shape_of(%485, dtype="int32") /* ty=Tensor[(3), int32] */;
    %488 = cast(%485, dtype="int8") /* ty=Tensor[(4, 11, 5), int8] */;
    %489 = dyn.reshape(%486, %487, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %490 = add(%488, %489) /* ty=Tensor[(4, 11, 5), int8] */;
    (%490,)
  };
  %491() /* ty=(Tensor[(4, 11, 5), int8],) */
}

def @func_701(%var_700: Tensor[(4, 6, 9), float64]) -> (Tensor[(4, 6, 9), float64],) {
  %494 = fn (%var_671: Tensor[(4, 6, 9), float64]) -> (Tensor[(4, 6, 9), float64],) {
    %492 = cast(%var_671, dtype="float64") /* ty=Tensor[(4, 6, 9), float64] */;
    %493 = atanh(%492) /* ty=Tensor[(4, 6, 9), float64] */;
    (%493,)
  };
  %494(%var_700) /* ty=(Tensor[(4, 6, 9), float64],) */
}

def @func_4767(%var_4721: Tensor[(216), float64]) -> (Tensor[(4, 11, 5), float64], Tensor[(320), float64], Tensor[(216), float64], Tensor[(192), float64], Tensor[(120), int16]) {
  %495 = cast(%var_4721, dtype="float64") /* ty=Tensor[(216), float64] */;
  %496 = cast(meta[relay.Constant][35] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
  %497 = reshape(%495, newshape=[216]) /* ty=Tensor[(216), float64] */;
  %498 = reshape(%496, newshape=[192]) /* ty=Tensor[(192), float64] */;
  %499 = @func_1767(%497, %498) /* ty=(Tensor[(192), float64], Tensor[(320), float64], Tensor[(16, 2, 10), float64], Tensor[(4, 11, 5), int16], Tensor[(4, 6, 9), float64], Tensor[(4, 11, 5), float32]) */;
  %500 = @func_3582() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(120), int16]) */;
  %501 = @func_2197() /* ty=Tensor[(4, 11, 5), float64] */;
  %502 = %499.1;
  %503 = %500.1;
  (%501, %502, %var_4721, meta[relay.Constant][35] /* ty=Tensor[(192), float64] */, %503)
}

def @func_4258(%var_4256: Tensor[(99), float64]) -> (Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float64], Tensor[(99), bool], Tensor[(120), int16], Tensor[(320), float64], Tensor[(192), int64]) {
  @func_4255(%var_4256) /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float64], Tensor[(99), bool], Tensor[(120), int16], Tensor[(320), float64], Tensor[(192), int64]) */
}

def @func_4271() -> (Tensor[(120), int16],) {
  @func_4269() /* ty=(Tensor[(120), int16],) */
}

def @func_4844(%var_4842: Tensor[(4, 12, 10), float32], %var_4843: Tensor[(99), float64]) -> (Tensor[(4, 12, 10), float32], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float64], Tensor[(99), float64], Tensor[(4, 11, 5), float32]) {
  @func_4840(%var_4842, %var_4843) /* ty=(Tensor[(4, 12, 10), float32], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float64], Tensor[(99), float64], Tensor[(4, 11, 5), float32]) */
}

def @func_1825() -> (Tensor[(4, 11, 5), float64],) {
  %506 = fn () -> (Tensor[(4, 11, 5), float64],) {
    %504 = @func_1665() /* ty=(Tensor[(4, 11, 5), float64],) */;
    %505 = %504.0;
    (%505,)
  };
  %506() /* ty=(Tensor[(4, 11, 5), float64],) */
}

def @func_5917(%var_5915: Tensor[(10, 9, 8), float64], %var_5916: Tensor[(10, 9, 8), float64]) -> (Tensor[(10, 9, 8), float64],) {
  %512 = fn (%var_5909: Tensor[(10, 9, 8), float64], %var_5910: Tensor[(10, 9, 8), float64]) -> (Tensor[(10, 9, 8), float64],) {
    %507 = cast(%var_5910, dtype="float64") /* ty=Tensor[(10, 9, 8), float64] */;
    %508 = shape_of(%var_5909, dtype="int32") /* ty=Tensor[(3), int32] */;
    %509 = cast(%var_5909, dtype="float64") /* ty=Tensor[(10, 9, 8), float64] */;
    %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %511 = floor_divide(%509, %510) /* ty=Tensor[(10, 9, 8), float64] */;
    (%511,)
  };
  %512(%var_5915, %var_5916) /* ty=(Tensor[(10, 9, 8), float64],) */
}

def @func_3429(%var_3427: Tensor[(320), float64]) -> (Tensor[(4, 11, 5), float32], Tensor[(16, 2, 10), float64], Tensor[(320), float64]) {
  @func_3426(%var_3427) /* ty=(Tensor[(4, 11, 5), float32], Tensor[(16, 2, 10), float64], Tensor[(320), float64]) */
}

def @func_1770(%var_1768: Tensor[(216), float64], %var_1769: Tensor[(192), float64]) -> (Tensor[(192), float64], Tensor[(320), float64], Tensor[(16, 2, 10), float64], Tensor[(4, 11, 5), int16], Tensor[(4, 6, 9), float64], Tensor[(4, 11, 5), float32]) {
  %543 = fn (%var_1693: Tensor[(216), float64], %var_1694: Tensor[(192), float64]) -> (Tensor[(192), float64], Tensor[(320), float64], Tensor[(16, 2, 10), float64], Tensor[(4, 11, 5), int16], Tensor[(4, 6, 9), float64], Tensor[(4, 11, 5), float32]) {
    %513 = cast(%var_1694, dtype="int64") /* ty=Tensor[(192), int64] */;
    %514 = reshape(%513, newshape=[3, 16, 4]) /* ty=Tensor[(3, 16, 4), int64] */;
    %515 = @func_1110(%514) /* ty=(Tensor[(3, 16, 4), int64], Tensor[(16, 2, 10), float64], Tensor[(320), float64], Tensor[(3, 16, 4), float32]) */;
    %516 = cast(%var_1694, dtype="int64") /* ty=Tensor[(192), int64] */;
    %517 = reshape(%516, newshape=[3, 16, 4]) /* ty=Tensor[(3, 16, 4), int64] */;
    %518 = @func_1110(%517) /* ty=(Tensor[(3, 16, 4), int64], Tensor[(16, 2, 10), float64], Tensor[(320), float64], Tensor[(3, 16, 4), float32]) */;
    %519 = @func_1197() /* ty=Tensor[(4, 11, 5), float32] */;
    %520 = cast(%519, dtype="float64") /* ty=Tensor[(4, 11, 5), float64] */;
    %521 = reshape(%520, newshape=[4, 11, 5]) /* ty=Tensor[(4, 11, 5), float64] */;
    %522 = @func_1256(%521) /* ty=Tensor[(4, 11, 5), float64] */;
    %523 = cast(%519, dtype="int16") /* ty=Tensor[(4, 11, 5), int16] */;
    %524 = shape_of(%522, dtype="int32") /* ty=Tensor[(3), int32] */;
    %525 = cast(%522, dtype="int16") /* ty=Tensor[(4, 11, 5), int16] */;
    %526 = dyn.reshape(%523, %524, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %527 = cast(%var_1693, dtype="float64") /* ty=Tensor[(216), float64] */;
    %528 = cast(%var_1694, dtype="float64") /* ty=Tensor[(192), float64] */;
    %529 = reshape(%527, newshape=[216]) /* ty=Tensor[(216), float64] */;
    %530 = reshape(%528, newshape=[48, 4]) /* ty=Tensor[(48, 4), float64] */;
    %531 = @func_1049(%529, %530) /* ty=(Tensor[(4, 11, 5), float32], Tensor[(16, 2, 10), bool], Tensor[(4, 6, 9), float64], Tensor[(216), float64], Tensor[(120), int16], Tensor[(819), uint64], Tensor[(16, 2, 10), float64], Tensor[(4, 6, 9), float64], Tensor[(16, 2, 10), float64], Tensor[(12, 4, 4), float64], Tensor[(48, 4), float64]) */;
    %532 = %531.7;
    %533 = cast(%var_1693, dtype="float64") /* ty=Tensor[(216), float64] */;
    %534 = shape_of(%532, dtype="int32") /* ty=Tensor[(3), int32] */;
    %535 = cast(%532, dtype="float64") /* ty=Tensor[(4, 6, 9), float64] */;
    %536 = dyn.reshape(%533, %534, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %537 = cast(%519, dtype="float32") /* ty=Tensor[(4, 11, 5), float32] */;
    %538 = %515.2;
    %539 = %518.1;
    %540 = bitwise_or(%525, %526) /* ty=Tensor[(4, 11, 5), int16] */;
    %541 = divide(%535, %536) /* ty=Tensor[(4, 6, 9), float64] */;
    %542 = asin(%537) /* ty=Tensor[(4, 11, 5), float32] */;
    (%var_1694, %538, %539, %540, %541, %542)
  };
  %543(%var_1768, %var_1769) /* ty=(Tensor[(192), float64], Tensor[(320), float64], Tensor[(16, 2, 10), float64], Tensor[(4, 11, 5), int16], Tensor[(4, 6, 9), float64], Tensor[(4, 11, 5), float32]) */
}

def @func_1665() -> (Tensor[(4, 11, 5), float64],) {
  %544 = @func_1651() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(216), float64], Tensor[(216), float64], Tensor[(4, 11, 5), float32]) */;
  %545 = %544.0;
  %546 = cast(%545, dtype="float64") /* ty=Tensor[(4, 11, 5), float64] */;
  %547 = rsqrt(%546) /* ty=Tensor[(4, 11, 5), float64] */;
  (%547,)
}

def @func_6673(%var_6669: Tensor[(10, 11, 5), float64], %var_6670: int64, %var_6671: Tensor[(320), float64], %var_6672: Tensor[(99), float64]) -> (Tensor[(10, 11, 5), float64], Tensor[(4, 11, 5), float32], int64, Tensor[(1040), int64], Tensor[(12, 4, 4), float64], Tensor[(48), float64], Tensor[(1, 192), float64], Tensor[(4, 11, 5), float32], Tensor[(320), float64], Tensor[(4, 11, 5), float32], Tensor[(99), float64]) {
  @func_6667(%var_6669, %var_6670, %var_6671, %var_6672) /* ty=(Tensor[(10, 11, 5), float64], Tensor[(4, 11, 5), float32], int64, Tensor[(1040), int64], Tensor[(12, 4, 4), float64], Tensor[(48), float64], Tensor[(1, 192), float64], Tensor[(4, 11, 5), float32], Tensor[(320), float64], Tensor[(4, 11, 5), float32], Tensor[(99), float64]) */
}

def @func_4336() -> (Tensor[(120), int16], Tensor[(4, 11, 5), float64]) {
  %548 = @func_4269() /* ty=(Tensor[(120), int16],) */;
  %549 = @func_1824() /* ty=(Tensor[(4, 11, 5), float64],) */;
  %550 = %548.0;
  %551 = %549.0;
  (%550, %551)
}

def @func_6238() -> (Tensor[(120), float32], Tensor[(192), float64], Tensor[(2, 96), float64]) {
  %560 = fn () -> (Tensor[(120), float32], Tensor[(192), float64], Tensor[(2, 96), float64]) {
    %552 = @func_3008() /* ty=(Tensor[(6, 14, 6), bool], Tensor[(120), int16], Tensor[(6, 14, 6), float64]) */;
    %553 = %552.1;
    %554 = cast(%553, dtype="float32") /* ty=Tensor[(120), float32] */;
    %555 = cast(meta[relay.Constant][36] /* ty=Tensor[(2, 96), float64] */, dtype="float64") /* ty=Tensor[(2, 96), float64] */;
    %556 = reshape(%555, newshape=[192]) /* ty=Tensor[(192), float64] */;
    %557 = @func_1602(%556) /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(3, 9, 12), float32], Tensor[(192), float64], Tensor[(4, 11, 5), float32], Tensor[(12, 4, 4), float64], Tensor[(2, 24), float64]) */;
    %558 = sin(%554) /* ty=Tensor[(120), float32] */;
    %559 = %557.3;
    (%558, %559, meta[relay.Constant][36] /* ty=Tensor[(2, 96), float64] */)
  };
  %560() /* ty=(Tensor[(120), float32], Tensor[(192), float64], Tensor[(2, 96), float64]) */
}

def @func_4840(%var_4804: Tensor[(4, 12, 10), float32], %var_4833: Tensor[(99), float64]) -> (Tensor[(4, 12, 10), float32], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float64], Tensor[(99), float64], Tensor[(4, 11, 5), float32]) {
  %561 = cast(%var_4804, dtype="float32") /* ty=Tensor[(4, 12, 10), float32] */;
  %562 = log(%561) /* ty=Tensor[(4, 12, 10), float32] */;
  %563 = cast(%562, dtype="float32") /* ty=Tensor[(4, 12, 10), float32] */;
  %564 = cast(%var_4833, dtype="float64") /* ty=Tensor[(99), float64] */;
  %565 = reshape(%564, newshape=[99]) /* ty=Tensor[(99), float64] */;
  %566 = @func_4255(%565) /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float64], Tensor[(99), bool], Tensor[(120), int16], Tensor[(320), float64], Tensor[(192), int64]) */;
  %567 = sinh(%563) /* ty=Tensor[(4, 12, 10), float32] */;
  %568 = @func_3400() /* ty=Tensor[(4, 11, 5), float32] */;
  %569 = %566.3;
  %570 = @func_1332() /* ty=Tensor[(4, 11, 5), float32] */;
  (%567, %568, %569, %var_4833, %570)
}

def @func_6981() -> Tensor[(9, 13, 7), float64] {
  %571 = @func_2577() /* ty=(Tensor[(16, 2, 10), float64], Tensor[(320), float64], Tensor[(9, 13, 7), float64]) */;
  %571.2
}

def @func_3520() -> (Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float64]) {
  @func_3518() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float64]) */
}

def @func_1093(%var_1091: Tensor[(11, 10, 4), int8], %var_1092: Tensor[(11, 10, 4), int8]) -> (Tensor[(11, 10, 4), bool], Tensor[(12, 4, 4), float64], Tensor[(48), float64], Tensor[(192), float64]) {
  %588 = fn (%var_1056: Tensor[(11, 10, 4), int8], %var_1057: Tensor[(11, 10, 4), int8]) -> (Tensor[(11, 10, 4), bool], Tensor[(12, 4, 4), float64], Tensor[(48), float64], Tensor[(192), float64]) {
    %572 = cast(%var_1057, dtype="bool") /* ty=Tensor[(11, 10, 4), bool] */;
    %573 = shape_of(%var_1056, dtype="int32") /* ty=Tensor[(3), int32] */;
    %574 = cast(%var_1056, dtype="bool") /* ty=Tensor[(11, 10, 4), bool] */;
    %575 = dyn.reshape(%572, %573, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %576 = less_equal(%574, %575) /* ty=Tensor[(11, 10, 4), bool] */;
    %577 = cast(%var_1057, dtype="bool") /* ty=Tensor[(11, 10, 4), bool] */;
    %578 = shape_of(%576, dtype="int32") /* ty=Tensor[(3), int32] */;
    %579 = cast(%576, dtype="bool") /* ty=Tensor[(11, 10, 4), bool] */;
    %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %581 = cast(meta[relay.Constant][37] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
    %582 = cast(meta[relay.Constant][38] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
    %583 = reshape(%581, newshape=[12, 4, 1]) /* ty=Tensor[(12, 4, 1), float64] */;
    %584 = reshape(%582, newshape=[12, 4, 4]) /* ty=Tensor[(12, 4, 4), float64] */;
    %585 = @func_307(%583, %584) /* ty=(Tensor[(12, 4, 4), float64], Tensor[(12, 4, 4), float64]) */;
    %586 = less(%579, %580) /* ty=Tensor[(11, 10, 4), bool] */;
    %587 = %585.1;
    (%586, %587, meta[relay.Constant][37] /* ty=Tensor[(48), float64] */, meta[relay.Constant][38] /* ty=Tensor[(192), float64] */)
  };
  %588(%var_1091, %var_1092) /* ty=(Tensor[(11, 10, 4), bool], Tensor[(12, 4, 4), float64], Tensor[(48), float64], Tensor[(192), float64]) */
}

def @func_1867(%var_1865: Tensor[(8, 2, 8), float32], %var_1866: Tensor[(192), float64]) -> (Tensor[(8, 2, 8), float32], Tensor[(48), float64], Tensor[(192), float64], Tensor[(4, 11, 5), float32], Tensor[(216), float64]) {
  %601 = fn (%var_1853: Tensor[(8, 2, 8), float32], %var_1858: Tensor[(192), float64]) -> (Tensor[(8, 2, 8), float32], Tensor[(48), float64], Tensor[(192), float64], Tensor[(4, 11, 5), float32], Tensor[(216), float64]) {
    %589 = cast(%var_1853, dtype="float32") /* ty=Tensor[(8, 2, 8), float32] */;
    %590 = cast(%var_1858, dtype="float64") /* ty=Tensor[(192), float64] */;
    %591 = reshape(%590, newshape=[192]) /* ty=Tensor[(192), float64] */;
    %592 = @func_423(%591) /* ty=(Tensor[(3, 9, 12), float32], Tensor[(12, 4, 4), float64], Tensor[(48), float64], Tensor[(192), float64]) */;
    %593 = cast(meta[relay.Constant][39] /* ty=Tensor[(216), float64] */, dtype="float64") /* ty=Tensor[(216), float64] */;
    %594 = cast(%var_1858, dtype="float64") /* ty=Tensor[(192), float64] */;
    %595 = reshape(%593, newshape=[216]) /* ty=Tensor[(216), float64] */;
    %596 = reshape(%594, newshape=[192]) /* ty=Tensor[(192), float64] */;
    %597 = @func_1767(%595, %596) /* ty=(Tensor[(192), float64], Tensor[(320), float64], Tensor[(16, 2, 10), float64], Tensor[(4, 11, 5), int16], Tensor[(4, 6, 9), float64], Tensor[(4, 11, 5), float32]) */;
    %598 = log2(%589) /* ty=Tensor[(8, 2, 8), float32] */;
    %599 = %592.2;
    %600 = %597.5;
    (%598, %599, %var_1858, %600, meta[relay.Constant][39] /* ty=Tensor[(216), float64] */)
  };
  %601(%var_1865, %var_1866) /* ty=(Tensor[(8, 2, 8), float32], Tensor[(48), float64], Tensor[(192), float64], Tensor[(4, 11, 5), float32], Tensor[(216), float64]) */
}

def @func_6830() -> (Tensor[(4, 11, 5), float32],) {
  @func_6828() /* ty=(Tensor[(4, 11, 5), float32],) */
}

def @func_5406() -> Tensor[(4, 11, 5), float32] {
  %603 = fn () -> Tensor[(4, 11, 5), float32] {
    %602 = @func_3755() /* ty=(Tensor[(4, 11, 5), float32],) */;
    %602.0
  };
  %603() /* ty=Tensor[(4, 11, 5), float32] */
}

def @func_7299() -> Tensor[(216), float64] {
  %604 = fn () -> Tensor[(216), float64] {
    @func_2852() /* ty=Tensor[(216), float64] */
  };
  %604() /* ty=Tensor[(216), float64] */
}

def @func_3809() -> (Tensor[(4, 11, 5), float64],) {
  %607 = fn () -> (Tensor[(4, 11, 5), float64],) {
    %605 = @func_3216() /* ty=(Tensor[(4, 11, 5), float64],) */;
    %606 = %605.0;
    (%606,)
  };
  %607() /* ty=(Tensor[(4, 11, 5), float64],) */
}

def @func_5347(%var_5345: Tensor[(6, 8, 14), uint8], %var_5346: Tensor[(6, 8, 14), uint8]) -> (Tensor[(6, 8, 14), float64],) {
  %615 = fn (%var_5288: Tensor[(6, 8, 14), uint8], %var_5289: Tensor[(6, 8, 14), uint8]) -> (Tensor[(6, 8, 14), float64],) {
    %608 = cast(%var_5289, dtype="uint8") /* ty=Tensor[(6, 8, 14), uint8] */;
    %609 = shape_of(%var_5288, dtype="int32") /* ty=Tensor[(3), int32] */;
    %610 = cast(%var_5288, dtype="uint8") /* ty=Tensor[(6, 8, 14), uint8] */;
    %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %612 = multiply(%610, %611) /* ty=Tensor[(6, 8, 14), uint8] */;
    %613 = cast(%612, dtype="float64") /* ty=Tensor[(6, 8, 14), float64] */;
    %614 = atanh(%613) /* ty=Tensor[(6, 8, 14), float64] */;
    (%614,)
  };
  %615(%var_5345, %var_5346) /* ty=(Tensor[(6, 8, 14), float64],) */
}

def @func_6180() -> (Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32]) {
  %616 = @func_5197() /* ty=(Tensor[(4, 11, 5), float32],) */;
  %617 = %616.0;
  %618 = @func_2468() /* ty=Tensor[(4, 11, 5), float32] */;
  (%617, %618)
}

def @func_6514() -> (Tensor[(4, 11, 5), float64],) {
  %621 = fn () -> (Tensor[(4, 11, 5), float64],) {
    %619 = @func_6058() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float64]) */;
    %620 = %619.2;
    (%620,)
  };
  %621() /* ty=(Tensor[(4, 11, 5), float64],) */
}

def @func_1177(%var_1176: Tensor[(12, 3, 8), bool]) -> Tensor[(12, 3, 8), bool] {
  %624 = fn (%var_1167: Tensor[(12, 3, 8), bool]) -> Tensor[(12, 3, 8), bool] {
    %622 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 3, 8), bool] */, dtype="bool") /* ty=Tensor[(1, 3, 8), bool] */;
    %623 = cast(%var_1167, dtype="bool") /* ty=Tensor[(12, 3, 8), bool] */;
    logical_and(%622, %623) /* ty=Tensor[(12, 3, 8), bool] */
  };
  %624(%var_1176) /* ty=Tensor[(12, 3, 8), bool] */
}

def @func_3518() -> (Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float64]) {
  %625 = @func_2468() /* ty=Tensor[(4, 11, 5), float32] */;
  %626 = cast(%625, dtype="float64") /* ty=Tensor[(4, 11, 5), float64] */;
  %627 = reshape(%626, newshape=[4, 11, 5]) /* ty=Tensor[(4, 11, 5), float64] */;
  %628 = @func_1256(%627) /* ty=Tensor[(4, 11, 5), float64] */;
  (%625, %628)
}

def @func_1258(%var_1257: Tensor[(4, 11, 5), float64]) -> Tensor[(4, 11, 5), float64] {
  %636 = fn (%var_1249: Tensor[(4, 11, 5), float64]) -> Tensor[(4, 11, 5), float64] {
    %629 = @func_882() /* ty=Tensor[(4, 11, 5), float32] */;
    %630 = cast(%629, dtype="float64") /* ty=Tensor[(4, 11, 5), float64] */;
    %631 = acos(%630) /* ty=Tensor[(4, 11, 5), float64] */;
    %632 = cast(%var_1249, dtype="float64") /* ty=Tensor[(4, 11, 5), float64] */;
    %633 = shape_of(%631, dtype="int32") /* ty=Tensor[(3), int32] */;
    %634 = cast(%631, dtype="float64") /* ty=Tensor[(4, 11, 5), float64] */;
    %635 = dyn.reshape(%632, %633, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    floor_divide(%634, %635) /* ty=Tensor[(4, 11, 5), float64] */
  };
  %636(%var_1257) /* ty=Tensor[(4, 11, 5), float64] */
}

def @func_4988() -> (Tensor[(4, 11, 5), float64], Tensor[(4, 11, 5), float32]) {
  %641 = fn () -> (Tensor[(4, 11, 5), float64], Tensor[(4, 11, 5), float32]) {
    %637 = @func_3216() /* ty=(Tensor[(4, 11, 5), float64],) */;
    %638 = @func_2971() /* ty=(Tensor[(4, 11, 5), float32],) */;
    %639 = %637.0;
    %640 = %638.0;
    (%639, %640)
  };
  %641() /* ty=(Tensor[(4, 11, 5), float64], Tensor[(4, 11, 5), float32]) */
}

def @func_7194() -> (Tensor[(6, 14, 6), int16],) {
  %642 = @func_3008() /* ty=(Tensor[(6, 14, 6), bool], Tensor[(120), int16], Tensor[(6, 14, 6), float64]) */;
  %643 = %642.0;
  %644 = cast(%643, dtype="float64") /* ty=Tensor[(6, 14, 6), float64] */;
  %645 = sigmoid(%644) /* ty=Tensor[(6, 14, 6), float64] */;
  %646 = cast(%643, dtype="int16") /* ty=Tensor[(6, 14, 6), int16] */;
  %647 = shape_of(%645, dtype="int32") /* ty=Tensor[(3), int32] */;
  %648 = cast(%645, dtype="int16") /* ty=Tensor[(6, 14, 6), int16] */;
  %649 = dyn.reshape(%646, %647, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %650 = bitwise_xor(%648, %649) /* ty=Tensor[(6, 14, 6), int16] */;
  (%650,)
}

def @func_5985() -> (Tensor[(4, 11, 5), float64],) {
  %653 = fn () -> (Tensor[(4, 11, 5), float64],) {
    %651 = @func_3216() /* ty=(Tensor[(4, 11, 5), float64],) */;
    %652 = %651.0;
    (%652,)
  };
  %653() /* ty=(Tensor[(4, 11, 5), float64],) */
}

def @func_426(%var_424: Tensor[(192), float64]) -> (Tensor[(3, 9, 12), float32], Tensor[(12, 4, 4), float64], Tensor[(48), float64], Tensor[(192), float64]) {
  @func_423(%var_424) /* ty=(Tensor[(3, 9, 12), float32], Tensor[(12, 4, 4), float64], Tensor[(48), float64], Tensor[(192), float64]) */
}

def @func_6094() -> Tensor[(4, 11, 5), float64] {
  %654 = fn () -> Tensor[(4, 11, 5), float64] {
    @func_2870() /* ty=Tensor[(4, 11, 5), float64] */
  };
  %654() /* ty=Tensor[(4, 11, 5), float64] */
}

def @func_805(%var_792: uint64, %var_793: Tensor[(7, 1, 9), uint64]) -> (Tensor[(7, 1, 9), uint64], Tensor[(6, 4, 5), bool], Tensor[(819, 1), uint64]) {
  %655 = cast(%var_792, dtype="uint64") /* ty=uint64 */;
  %656 = cast(%var_793, dtype="uint64") /* ty=Tensor[(7, 1, 9), uint64] */;
  %657 = cast(meta[relay.Constant][41] /* ty=Tensor[(819, 1), uint64] */, dtype="uint64") /* ty=Tensor[(819, 1), uint64] */;
  %658 = reshape(%657, newshape=[9, 13, 7]) /* ty=Tensor[(9, 13, 7), uint64] */;
  %659 = @func_275(%658) /* ty=(Tensor[(9, 13, 7), bool], Tensor[(6, 4, 5), bool], Tensor[(120), int16]) */;
  %660 = left_shift(%655, %656) /* ty=Tensor[(7, 1, 9), uint64] */;
  %661 = %659.1;
  (%660, %661, meta[relay.Constant][41] /* ty=Tensor[(819, 1), uint64] */)
}

def @main() -> (Tensor[(320), bool], Tensor[(192), float64]) {
  %662 = @func_2578() /* ty=(Tensor[(16, 2, 10), float64], Tensor[(320), float64], Tensor[(9, 13, 7), float64]) */;
  %663 = %662.1;
  %664 = cast(meta[relay.Constant][42] /* ty=Tensor[(320), float64] */, dtype="bool") /* ty=Tensor[(320), bool] */;
  %665 = shape_of(%663, dtype="int32") /* ty=Tensor[(1), int32] */;
  %666 = cast(%663, dtype="bool") /* ty=Tensor[(320), bool] */;
  %667 = dyn.reshape(%664, %665, newshape=[]) /* ty=Tensor[(?), bool] */;
  %668 = @func_6238() /* ty=(Tensor[(120), float32], Tensor[(192), float64], Tensor[(2, 96), float64]) */;
  %669 = %668.1;
  %670 = cast(%669, dtype="float64") /* ty=Tensor[(192), float64] */;
  %671 = equal(%666, %667) /* ty=Tensor[(320), bool] */;
  %672 = atan(%670) /* ty=Tensor[(192), float64] */;
  (%671, %672)
}

def @func_4157() -> (Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32]) {
  @func_4155() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32]) */
}

def @func_5658() -> Tensor[(4, 11, 5), float32] {
  @func_5656() /* ty=Tensor[(4, 11, 5), float32] */
}

def @func_2348() -> (Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32]) {
  %673 = @func_1332() /* ty=Tensor[(4, 11, 5), float32] */;
  %674 = @func_1298() /* ty=Tensor[(4, 11, 5), float32] */;
  (%673, %674)
}

def @func_4406() -> (Tensor[(4, 11, 5), float64], Tensor[(4, 11, 5), float64], Tensor[(4, 11, 5), float32], Tensor[(120), int16]) {
  %683 = fn () -> (Tensor[(4, 11, 5), float64], Tensor[(4, 11, 5), float64], Tensor[(4, 11, 5), float32], Tensor[(120), int16]) {
    %675 = @func_3216() /* ty=(Tensor[(4, 11, 5), float64],) */;
    %676 = @func_3216() /* ty=(Tensor[(4, 11, 5), float64],) */;
    %677 = @func_4323() /* ty=(Tensor[(4, 11, 5), float32],) */;
    %678 = @func_4336() /* ty=(Tensor[(120), int16], Tensor[(4, 11, 5), float64]) */;
    %679 = %675.0;
    %680 = %676.0;
    %681 = %677.0;
    %682 = %678.0;
    (%679, %680, %681, %682)
  };
  %683() /* ty=(Tensor[(4, 11, 5), float64], Tensor[(4, 11, 5), float64], Tensor[(4, 11, 5), float32], Tensor[(120), int16]) */
}

def @func_6575() -> (Tensor[(16, 2, 10), float64], Tensor[(3, 16, 4), int64], Tensor[(192), int64]) {
  %684 = @func_3885() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), bool], Tensor[(16, 2, 10), float64]) */;
  %685 = cast(meta[relay.Constant][43] /* ty=Tensor[(192), int64] */, dtype="int64") /* ty=Tensor[(192), int64] */;
  %686 = reshape(%685, newshape=[3, 16, 4]) /* ty=Tensor[(3, 16, 4), int64] */;
  %687 = @func_1110(%686) /* ty=(Tensor[(3, 16, 4), int64], Tensor[(16, 2, 10), float64], Tensor[(320), float64], Tensor[(3, 16, 4), float32]) */;
  %688 = %684.3;
  %689 = %687.0;
  (%688, %689, meta[relay.Constant][43] /* ty=Tensor[(192), int64] */)
}

def @func_4770(%var_4768: Tensor[(216), float64]) -> (Tensor[(4, 11, 5), float64], Tensor[(320), float64], Tensor[(216), float64], Tensor[(192), float64], Tensor[(120), int16]) {
  @func_4767(%var_4768) /* ty=(Tensor[(4, 11, 5), float64], Tensor[(320), float64], Tensor[(216), float64], Tensor[(192), float64], Tensor[(120), int16]) */
}

def @func_6539() -> (Tensor[(4, 11, 5), float32],) {
  @func_6537() /* ty=(Tensor[(4, 11, 5), float32],) */
}

def @func_4590() -> Tensor[(4, 11, 5), float64] {
  %690 = fn () -> Tensor[(4, 11, 5), float64] {
    @func_2197() /* ty=Tensor[(4, 11, 5), float64] */
  };
  %690() /* ty=Tensor[(4, 11, 5), float64] */
}

def @func_5450() -> Tensor[(4, 11, 5), float32] {
  @func_3400() /* ty=Tensor[(4, 11, 5), float32] */
}

def @func_2971() -> (Tensor[(4, 11, 5), float32],) {
  %691 = @func_1197() /* ty=Tensor[(4, 11, 5), float32] */;
  (%691,)
}

def @func_6006() -> Tensor[(4, 11, 5), float32] {
  %692 = fn () -> Tensor[(4, 11, 5), float32] {
    @func_4934() /* ty=Tensor[(4, 11, 5), float32] */
  };
  %692() /* ty=Tensor[(4, 11, 5), float32] */
}

def @func_5502(%var_5501: Tensor[(6, 14, 6), float64]) -> (Tensor[(4, 11, 5), int8], Tensor[(6, 14, 6), uint32], Tensor[(6, 14, 6), uint8]) {
  %706 = fn (%var_5482: Tensor[(6, 14, 6), float64]) -> (Tensor[(4, 11, 5), int8], Tensor[(6, 14, 6), uint32], Tensor[(6, 14, 6), uint8]) {
    %693 = @func_3008() /* ty=(Tensor[(6, 14, 6), bool], Tensor[(120), int16], Tensor[(6, 14, 6), float64]) */;
    %694 = %693.2;
    %695 = cast(%var_5482, dtype="uint32") /* ty=Tensor[(6, 14, 6), uint32] */;
    %696 = shape_of(%694, dtype="int32") /* ty=Tensor[(3), int32] */;
    %697 = cast(%694, dtype="uint32") /* ty=Tensor[(6, 14, 6), uint32] */;
    %698 = dyn.reshape(%695, %696, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %699 = cast(%694, dtype="uint8") /* ty=Tensor[(6, 14, 6), uint8] */;
    %700 = shape_of(%var_5482, dtype="int32") /* ty=Tensor[(3), int32] */;
    %701 = cast(%var_5482, dtype="uint8") /* ty=Tensor[(6, 14, 6), uint8] */;
    %702 = dyn.reshape(%699, %700, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %703 = @func_5460() /* ty=Tensor[(4, 11, 5), int8] */;
    %704 = maximum(%697, %698) /* ty=Tensor[(6, 14, 6), uint32] */;
    %705 = bitwise_or(%701, %702) /* ty=Tensor[(6, 14, 6), uint8] */;
    (%703, %704, %705)
  };
  %706(%var_5501) /* ty=(Tensor[(4, 11, 5), int8], Tensor[(6, 14, 6), uint32], Tensor[(6, 14, 6), uint8]) */
}

def @func_7558() -> (Tensor[(4, 11, 5), float32],) {
  %709 = fn () -> (Tensor[(4, 11, 5), float32],) {
    %707 = @func_3755() /* ty=(Tensor[(4, 11, 5), float32],) */;
    %708 = %707.0;
    (%708,)
  };
  %709() /* ty=(Tensor[(4, 11, 5), float32],) */
}

def @func_4255(%var_4191: Tensor[(99), float64]) -> (Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float64], Tensor[(99), bool], Tensor[(120), int16], Tensor[(320), float64], Tensor[(192), int64]) {
  %710 = @func_2971() /* ty=(Tensor[(4, 11, 5), float32],) */;
  %711 = @func_4018() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(120), int16]) */;
  %712 = cast(%var_4191, dtype="float64") /* ty=Tensor[(99), float64] */;
  %713 = reshape(%712, newshape=[9, 1, 11]) /* ty=Tensor[(9, 1, 11), float64] */;
  %714 = @func_3081(%713) /* ty=(Tensor[(9, 1, 11), float64], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32]) */;
  %715 = %714.0;
  %716 = cast(%715, dtype="bool") /* ty=Tensor[(9, 1, 11), bool] */;
  %717 = shape_of(%var_4191, dtype="int32") /* ty=Tensor[(1), int32] */;
  %718 = cast(%var_4191, dtype="bool") /* ty=Tensor[(99), bool] */;
  %719 = dyn.reshape(%716, %717, newshape=[]) /* ty=Tensor[(?), bool] */;
  %720 = cast(meta[relay.Constant][44] /* ty=Tensor[(192), int64] */, dtype="int64") /* ty=Tensor[(192), int64] */;
  %721 = reshape(%720, newshape=[2, 96]) /* ty=Tensor[(2, 96), int64] */;
  %722 = @func_3177(%721) /* ty=(Tensor[(4, 11, 5), float64], Tensor[(320), float64], Tensor[(2, 96), int8], Tensor[(4, 11, 5), float64]) */;
  %723 = %710.0;
  %724 = %711.0;
  %725 = @func_1332() /* ty=Tensor[(4, 11, 5), float32] */;
  %726 = @func_2197() /* ty=Tensor[(4, 11, 5), float64] */;
  %727 = less(%718, %719) /* ty=Tensor[(99), bool] */;
  %728 = @func_3455() /* ty=Tensor[(120), int16] */;
  %729 = %722.1;
  (%723, %724, %725, %726, %727, %728, %729, meta[relay.Constant][44] /* ty=Tensor[(192), int64] */)
}

def @func_277(%var_276: Tensor[(9, 13, 7), uint64]) -> (Tensor[(9, 13, 7), bool], Tensor[(6, 4, 5), bool], Tensor[(120), int16]) {
  %741 = fn (%var_268: Tensor[(9, 13, 7), uint64]) -> (Tensor[(9, 13, 7), bool], Tensor[(6, 4, 5), bool], Tensor[(120), int16]) {
    %730 = cast(%var_268, dtype="bool") /* ty=Tensor[(9, 13, 7), bool] */;
    %731 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(9, 13, 7), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %732 = cast(meta[relay.Constant][45] /* ty=Tensor[(9, 13, 7), uint64] */, dtype="bool") /* ty=Tensor[(9, 13, 7), bool] */;
    %733 = dyn.reshape(%730, %731, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %734 = cast(meta[relay.Constant][46] /* ty=Tensor[(120), int16] */, dtype="int16") /* ty=Tensor[(120), int16] */;
    %735 = cast(meta[relay.Constant][46] /* ty=Tensor[(120), int16] */, dtype="float64") /* ty=Tensor[(120), float64] */;
    %736 = reshape(%734, newshape=[6, 4, 5]) /* ty=Tensor[(6, 4, 5), int16] */;
    %737 = reshape(%735, newshape=[6, 4, 5]) /* ty=Tensor[(6, 4, 5), float64] */;
    %738 = @func_190(%736, %737) /* ty=(Tensor[(6, 4, 5), bool], Tensor[(6, 4, 5), bool]) */;
    %739 = less(%732, %733) /* ty=Tensor[(9, 13, 7), bool] */;
    %740 = %738.0;
    (%739, %740, meta[relay.Constant][46] /* ty=Tensor[(120), int16] */)
  };
  %741(%var_276) /* ty=(Tensor[(9, 13, 7), bool], Tensor[(6, 4, 5), bool], Tensor[(120), int16]) */
}

def @func_7235() -> (Tensor[(120), float32], Tensor[(216), float64]) {
  %742 = @func_6237() /* ty=(Tensor[(120), float32], Tensor[(192), float64], Tensor[(2, 96), float64]) */;
  %743 = %742.0;
  %744 = @func_2852() /* ty=Tensor[(216), float64] */;
  (%743, %744)
}

def @func_5948() -> (Tensor[(4, 11, 5), float32],) {
  @func_5946() /* ty=(Tensor[(4, 11, 5), float32],) */
}

def @func_6396(%var_6298: Tensor[(1, 4, 1), float32]) -> (Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(?, 4, ?), float32], Tensor[(1, 4, 1), float32], Tensor[(4, 11, 5), int8], Tensor[(504, 1), float64], Tensor[(16, 2, 10), float64], Tensor[(192), int64], Tensor[(1, 4, 1), float64], Tensor[(?, 4, ?), int32], Tensor[(?, 4, ?), bool]) {
  %745 = @func_4987() /* ty=(Tensor[(4, 11, 5), float64], Tensor[(4, 11, 5), float32]) */;
  %746 = cast(%var_6298, dtype="float32") /* ty=Tensor[(1, 4, 1), float32] */;
  %747 = asin(%746) /* ty=Tensor[(1, 4, 1), float32] */;
  %748 = cast(%747, dtype="float32") /* ty=Tensor[(1, 4, 1), float32] */;
  %749 = erf(%748) /* ty=Tensor[(1, 4, 1), float32] */;
  %750 = cast(%747, dtype="float32") /* ty=Tensor[(1, 4, 1), float32] */;
  %751 = shape_of(%749, dtype="int32") /* ty=Tensor[(3), int32] */;
  %752 = cast(%749, dtype="float32") /* ty=Tensor[(1, 4, 1), float32] */;
  %753 = dyn.reshape(%750, %751, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %754 = cast(%747, dtype="float32") /* ty=Tensor[(1, 4, 1), float32] */;
  %755 = cast(meta[relay.Constant][47] /* ty=Tensor[(504, 1), float64] */, dtype="float64") /* ty=Tensor[(504, 1), float64] */;
  %756 = reshape(%755, newshape=[6, 14, 6]) /* ty=Tensor[(6, 14, 6), float64] */;
  %757 = @func_5500(%756) /* ty=(Tensor[(4, 11, 5), int8], Tensor[(6, 14, 6), uint32], Tensor[(6, 14, 6), uint8]) */;
  %758 = cast(meta[relay.Constant][48] /* ty=Tensor[(192), int64] */, dtype="int64") /* ty=Tensor[(192), int64] */;
  %759 = reshape(%758, newshape=[192]) /* ty=Tensor[(192), int64] */;
  %760 = @func_2616(%759) /* ty=(Tensor[(4, 11, 5), float64], Tensor[(16, 2, 10), float64], Tensor[(192), int64]) */;
  %761 = cast(%749, dtype="float64") /* ty=Tensor[(1, 4, 1), float64] */;
  %762 = sqrt(%761) /* ty=Tensor[(1, 4, 1), float64] */;
  %763 = cast(%762, dtype="float64") /* ty=Tensor[(1, 4, 1), float64] */;
  %764 = cast(%762, dtype="int32") /* ty=Tensor[(1, 4, 1), int32] */;
  %765 = shape_of(%747, dtype="int32") /* ty=Tensor[(3), int32] */;
  %766 = cast(%747, dtype="int32") /* ty=Tensor[(1, 4, 1), int32] */;
  %767 = dyn.reshape(%764, %765, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %768 = cast(%var_6298, dtype="bool") /* ty=Tensor[(1, 4, 1), bool] */;
  %769 = shape_of(%762, dtype="int32") /* ty=Tensor[(3), int32] */;
  %770 = cast(%762, dtype="bool") /* ty=Tensor[(1, 4, 1), bool] */;
  %771 = dyn.reshape(%768, %769, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %772 = @func_2742() /* ty=Tensor[(4, 11, 5), float32] */;
  %773 = %745.1;
  %774 = floor_divide(%752, %753) /* ty=Tensor[(?, 4, ?), float32] */;
  %775 = tan(%754) /* ty=Tensor[(1, 4, 1), float32] */;
  %776 = %757.0;
  %777 = %760.1;
  %778 = rsqrt(%763) /* ty=Tensor[(1, 4, 1), float64] */;
  %779 = bitwise_and(%766, %767) /* ty=Tensor[(?, 4, ?), int32] */;
  %780 = equal(%770, %771) /* ty=Tensor[(?, 4, ?), bool] */;
  (%772, %773, %774, %775, %776, meta[relay.Constant][47] /* ty=Tensor[(504, 1), float64] */, %777, meta[relay.Constant][48] /* ty=Tensor[(192), int64] */, %778, %779, %780)
}

def @func_1164(%var_1163: Tensor[(216), float64]) -> (Tensor[(4, 11, 5), float32], Tensor[(16, 2, 10), bool], Tensor[(216), float64], Tensor[(192), float64], Tensor[(320), float64], Tensor[(12, 4, 4), float64], Tensor[(1, 48), float64], Tensor[(320), float64]) {
  %802 = fn (%var_1118: Tensor[(216), float64]) -> (Tensor[(4, 11, 5), float32], Tensor[(16, 2, 10), bool], Tensor[(216), float64], Tensor[(192), float64], Tensor[(320), float64], Tensor[(12, 4, 4), float64], Tensor[(1, 48), float64], Tensor[(320), float64]) {
    %781 = cast(%var_1118, dtype="float64") /* ty=Tensor[(216), float64] */;
    %782 = cast(meta[relay.Constant][49] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
    %783 = reshape(%781, newshape=[216]) /* ty=Tensor[(216), float64] */;
    %784 = reshape(%782, newshape=[48, 4]) /* ty=Tensor[(48, 4), float64] */;
    %785 = @func_1049(%783, %784) /* ty=(Tensor[(4, 11, 5), float32], Tensor[(16, 2, 10), bool], Tensor[(4, 6, 9), float64], Tensor[(216), float64], Tensor[(120), int16], Tensor[(819), uint64], Tensor[(16, 2, 10), float64], Tensor[(4, 6, 9), float64], Tensor[(16, 2, 10), float64], Tensor[(12, 4, 4), float64], Tensor[(48, 4), float64]) */;
    %786 = cast(meta[relay.Constant][49] /* ty=Tensor[(192), float64] */, dtype="int64") /* ty=Tensor[(192), int64] */;
    %787 = reshape(%786, newshape=[3, 16, 4]) /* ty=Tensor[(3, 16, 4), int64] */;
    %788 = @func_1110(%787) /* ty=(Tensor[(3, 16, 4), int64], Tensor[(16, 2, 10), float64], Tensor[(320), float64], Tensor[(3, 16, 4), float32]) */;
    %789 = cast(meta[relay.Constant][50] /* ty=Tensor[(1, 48), float64] */, dtype="float64") /* ty=Tensor[(1, 48), float64] */;
    %790 = cast(meta[relay.Constant][49] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
    %791 = reshape(%789, newshape=[12, 4, 1]) /* ty=Tensor[(12, 4, 1), float64] */;
    %792 = reshape(%790, newshape=[12, 4, 4]) /* ty=Tensor[(12, 4, 4), float64] */;
    %793 = @func_307(%791, %792) /* ty=(Tensor[(12, 4, 4), float64], Tensor[(12, 4, 4), float64]) */;
    %794 = cast(meta[relay.Constant][49] /* ty=Tensor[(192), float64] */, dtype="int64") /* ty=Tensor[(192), int64] */;
    %795 = reshape(%794, newshape=[3, 16, 4]) /* ty=Tensor[(3, 16, 4), int64] */;
    %796 = @func_1110(%795) /* ty=(Tensor[(3, 16, 4), int64], Tensor[(16, 2, 10), float64], Tensor[(320), float64], Tensor[(3, 16, 4), float32]) */;
    %797 = @func_882() /* ty=Tensor[(4, 11, 5), float32] */;
    %798 = %785.1;
    %799 = %788.2;
    %800 = %793.0;
    %801 = %796.2;
    (%797, %798, %var_1118, meta[relay.Constant][49] /* ty=Tensor[(192), float64] */, %799, %800, meta[relay.Constant][50] /* ty=Tensor[(1, 48), float64] */, %801)
  };
  %802(%var_1163) /* ty=(Tensor[(4, 11, 5), float32], Tensor[(16, 2, 10), bool], Tensor[(216), float64], Tensor[(192), float64], Tensor[(320), float64], Tensor[(12, 4, 4), float64], Tensor[(1, 48), float64], Tensor[(320), float64]) */
}

def @func_2854() -> Tensor[(216), float64] {
  @func_2852() /* ty=Tensor[(216), float64] */
}

def @func_3400() -> Tensor[(4, 11, 5), float32] {
  %803 = @func_2901() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(12, 3, 8), bool], Tensor[(72, 4), bool]) */;
  %803.0
}

def @func_2367() -> Tensor[(4, 11, 5), float32] {
  @func_1452() /* ty=Tensor[(4, 11, 5), float32] */
}

def @func_3755() -> (Tensor[(4, 11, 5), float32],) {
  %804 = @func_2348() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32]) */;
  %805 = %804.0;
  (%805,)
}

def @func_5461() -> Tensor[(4, 11, 5), int8] {
  %807 = fn () -> Tensor[(4, 11, 5), int8] {
    %806 = @func_3974() /* ty=(Tensor[(4, 11, 5), int8],) */;
    %806.0
  };
  %807() /* ty=Tensor[(4, 11, 5), int8] */
}

def @func_1604(%var_1603: Tensor[(192), float64]) -> (Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(3, 9, 12), float32], Tensor[(192), float64], Tensor[(4, 11, 5), float32], Tensor[(12, 4, 4), float64], Tensor[(2, 24), float64]) {
  %821 = fn (%var_1582: Tensor[(192), float64]) -> (Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(3, 9, 12), float32], Tensor[(192), float64], Tensor[(4, 11, 5), float32], Tensor[(12, 4, 4), float64], Tensor[(2, 24), float64]) {
    %808 = cast(%var_1582, dtype="float64") /* ty=Tensor[(192), float64] */;
    %809 = reshape(%808, newshape=[192]) /* ty=Tensor[(192), float64] */;
    %810 = @func_423(%809) /* ty=(Tensor[(3, 9, 12), float32], Tensor[(12, 4, 4), float64], Tensor[(48), float64], Tensor[(192), float64]) */;
    %811 = cast(meta[relay.Constant][51] /* ty=Tensor[(2, 24), float64] */, dtype="float64") /* ty=Tensor[(2, 24), float64] */;
    %812 = cast(%var_1582, dtype="float64") /* ty=Tensor[(192), float64] */;
    %813 = reshape(%811, newshape=[12, 4, 1]) /* ty=Tensor[(12, 4, 1), float64] */;
    %814 = reshape(%812, newshape=[12, 4, 4]) /* ty=Tensor[(12, 4, 4), float64] */;
    %815 = @func_307(%813, %814) /* ty=(Tensor[(12, 4, 4), float64], Tensor[(12, 4, 4), float64]) */;
    %816 = @func_882() /* ty=Tensor[(4, 11, 5), float32] */;
    %817 = @func_1452() /* ty=Tensor[(4, 11, 5), float32] */;
    %818 = %810.0;
    %819 = @func_1298() /* ty=Tensor[(4, 11, 5), float32] */;
    %820 = %815.1;
    (%816, %817, %818, %var_1582, %819, %820, meta[relay.Constant][51] /* ty=Tensor[(2, 24), float64] */)
  };
  %821(%var_1603) /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(3, 9, 12), float32], Tensor[(192), float64], Tensor[(4, 11, 5), float32], Tensor[(12, 4, 4), float64], Tensor[(2, 24), float64]) */
}

def @func_6775() -> (Tensor[(8, 8), float64], Tensor[(16, 2, 10), float64]) {
  @func_6773() /* ty=(Tensor[(8, 8), float64], Tensor[(16, 2, 10), float64]) */
}

def @func_2061() -> (Tensor[(4, 11, 5), bool], Tensor[(4, 11, 5), float32]) {
  %830 = fn () -> (Tensor[(4, 11, 5), bool], Tensor[(4, 11, 5), float32]) {
    %822 = @func_1332() /* ty=Tensor[(4, 11, 5), float32] */;
    %823 = @func_1452() /* ty=Tensor[(4, 11, 5), float32] */;
    %824 = cast(%823, dtype="bool") /* ty=Tensor[(4, 11, 5), bool] */;
    %825 = shape_of(%822, dtype="int32") /* ty=Tensor[(3), int32] */;
    %826 = cast(%822, dtype="bool") /* ty=Tensor[(4, 11, 5), bool] */;
    %827 = dyn.reshape(%824, %825, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %828 = greater_equal(%826, %827) /* ty=Tensor[(4, 11, 5), bool] */;
    %829 = @func_882() /* ty=Tensor[(4, 11, 5), float32] */;
    (%828, %829)
  };
  %830() /* ty=(Tensor[(4, 11, 5), bool], Tensor[(4, 11, 5), float32]) */
}

def @func_6440() -> (Tensor[(4, 11, 5), bool], Tensor[(16, 2, 10), float64]) {
  %831 = @func_2060() /* ty=(Tensor[(4, 11, 5), bool], Tensor[(4, 11, 5), float32]) */;
  %832 = %831.0;
  %833 = @func_2480() /* ty=Tensor[(16, 2, 10), float64] */;
  (%832, %833)
}

def @func_311(%var_309: Tensor[(12, 4, 1), float64], %var_310: Tensor[(12, 4, 4), float64]) -> (Tensor[(12, 4, 4), float64], Tensor[(12, 4, 4), float64]) {
  @func_307(%var_309, %var_310) /* ty=(Tensor[(12, 4, 4), float64], Tensor[(12, 4, 4), float64]) */
}

def @func_1667() -> (Tensor[(4, 11, 5), float64],) {
  @func_1665() /* ty=(Tensor[(4, 11, 5), float64],) */
}

def @func_2852() -> Tensor[(216), float64] {
  %834 = @func_1651() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(216), float64], Tensor[(216), float64], Tensor[(4, 11, 5), float32]) */;
  %834.2
}

def @func_307(%var_294: Tensor[(12, 4, 1), float64], %var_295: Tensor[(12, 4, 4), float64]) -> (Tensor[(12, 4, 4), float64], Tensor[(12, 4, 4), float64]) {
  %835 = cast(%var_294, dtype="float64") /* ty=Tensor[(12, 4, 1), float64] */;
  %836 = cast(%var_295, dtype="float64") /* ty=Tensor[(12, 4, 4), float64] */;
  %837 = cast(%var_295, dtype="float64") /* ty=Tensor[(12, 4, 4), float64] */;
  %838 = floor_mod(%835, %836) /* ty=Tensor[(12, 4, 4), float64] */;
  %839 = asinh(%837) /* ty=Tensor[(12, 4, 4), float64] */;
  (%838, %839)
}

def @func_3714(%var_3713: Tensor[(768), int8]) -> (Tensor[(48), float64], Tensor[(768), int8], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float64], Tensor[(9, 13, 7), bool], Tensor[(819), uint64]) {
  %861 = fn (%var_3649: Tensor[(768), int8]) -> (Tensor[(48), float64], Tensor[(768), int8], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float64], Tensor[(9, 13, 7), bool], Tensor[(819), uint64]) {
    %840 = cast(%var_3649, dtype="int8") /* ty=Tensor[(768), int8] */;
    %841 = cast(%var_3649, dtype="int8") /* ty=Tensor[(768), int8] */;
    %842 = cast(%var_3649, dtype="int8") /* ty=Tensor[(768), int8] */;
    %843 = reshape(%840, newshape=[16, 3, 16]) /* ty=Tensor[(16, 3, 16), int8] */;
    %844 = reshape(%841, newshape=[16, 3, 16]) /* ty=Tensor[(16, 3, 16), int8] */;
    %845 = reshape(%842, newshape=[16, 3, 16]) /* ty=Tensor[(16, 3, 16), int8] */;
    %846 = @func_3299(%843, %844, %845) /* ty=(Tensor[(16, 3, 16), int8], Tensor[(16, 3, 16), bool], Tensor[(4, 11, 5), float32], Tensor[(16, 3, 16), bool], Tensor[(48), float64], Tensor[(192), float64], Tensor[(16, 3, 16), float64]) */;
    %847 = @func_2518() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(9, 13, 7), bool], Tensor[(819), uint32]) */;
    %848 = @func_1452() /* ty=Tensor[(4, 11, 5), float32] */;
    %849 = cast(%848, dtype="float32") /* ty=Tensor[(4, 11, 5), float32] */;
    %850 = acosh(%849) /* ty=Tensor[(4, 11, 5), float32] */;
    %851 = cast(%850, dtype="float64") /* ty=Tensor[(4, 11, 5), float64] */;
    %852 = erf(%851) /* ty=Tensor[(4, 11, 5), float64] */;
    %853 = cast(%852, dtype="float64") /* ty=Tensor[(4, 11, 5), float64] */;
    %854 = cast(meta[relay.Constant][52] /* ty=Tensor[(819), uint64] */, dtype="uint64") /* ty=Tensor[(819), uint64] */;
    %855 = reshape(%854, newshape=[9, 13, 7]) /* ty=Tensor[(9, 13, 7), uint64] */;
    %856 = @func_275(%855) /* ty=(Tensor[(9, 13, 7), bool], Tensor[(6, 4, 5), bool], Tensor[(120), int16]) */;
    %857 = %846.4;
    %858 = %847.0;
    %859 = atanh(%853) /* ty=Tensor[(4, 11, 5), float64] */;
    %860 = %856.0;
    (%857, %var_3649, %858, %859, %860, meta[relay.Constant][52] /* ty=Tensor[(819), uint64] */)
  };
  %861(%var_3713) /* ty=(Tensor[(48), float64], Tensor[(768), int8], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float64], Tensor[(9, 13, 7), bool], Tensor[(819), uint64]) */
}

def @func_3887() -> (Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), bool], Tensor[(16, 2, 10), float64]) {
  @func_3885() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), bool], Tensor[(16, 2, 10), float64]) */
}

def @func_5452() -> Tensor[(4, 11, 5), float32] {
  @func_5450() /* ty=Tensor[(4, 11, 5), float32] */
}

def @func_5780(%var_5778: Tensor[(11, 9), float64]) -> (Tensor[(120), int16], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(11, 9), float64]) {
  @func_5777(%var_5778) /* ty=(Tensor[(120), int16], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32], Tensor[(11, 9), float64]) */
}

def @func_6743(%var_6742: Tensor[(11, 9, 4), int16]) -> (Tensor[(11, 9, 4), int16], Tensor[(4, 6, 9), float64], Tensor[(216), float64], Tensor[(192), float64]) {
  %873 = fn (%var_6712: Tensor[(11, 9, 4), int16]) -> (Tensor[(11, 9, 4), int16], Tensor[(4, 6, 9), float64], Tensor[(216), float64], Tensor[(192), float64]) {
    %862 = cast(%var_6712, dtype="int16") /* ty=Tensor[(11, 9, 4), int16] */;
    %863 = shape_of(meta[relay.Constant][53] /* ty=Tensor[(11, 9, 4), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %864 = cast(meta[relay.Constant][53] /* ty=Tensor[(11, 9, 4), int16] */, dtype="int16") /* ty=Tensor[(11, 9, 4), int16] */;
    %865 = dyn.reshape(%862, %863, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %866 = cast(meta[relay.Constant][54] /* ty=Tensor[(216), float64] */, dtype="float64") /* ty=Tensor[(216), float64] */;
    %867 = cast(meta[relay.Constant][55] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
    %868 = reshape(%866, newshape=[216]) /* ty=Tensor[(216), float64] */;
    %869 = reshape(%867, newshape=[192]) /* ty=Tensor[(192), float64] */;
    %870 = @func_1767(%868, %869) /* ty=(Tensor[(192), float64], Tensor[(320), float64], Tensor[(16, 2, 10), float64], Tensor[(4, 11, 5), int16], Tensor[(4, 6, 9), float64], Tensor[(4, 11, 5), float32]) */;
    %871 = add(%864, %865) /* ty=Tensor[(11, 9, 4), int16] */;
    %872 = %870.4;
    (%871, %872, meta[relay.Constant][54] /* ty=Tensor[(216), float64] */, meta[relay.Constant][55] /* ty=Tensor[(192), float64] */)
  };
  %873(%var_6742) /* ty=(Tensor[(11, 9, 4), int16], Tensor[(4, 6, 9), float64], Tensor[(216), float64], Tensor[(192), float64]) */
}

def @func_7613() -> (Tensor[(216), float64], Tensor[(4, 11, 5), float32], Tensor[(99), float64]) {
  %874 = @func_1651() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(216), float64], Tensor[(216), float64], Tensor[(4, 11, 5), float32]) */;
  %875 = cast(meta[relay.Constant][56] /* ty=Tensor[(99), float64] */, dtype="float64") /* ty=Tensor[(99), float64] */;
  %876 = reshape(%875, newshape=[9, 1, 11]) /* ty=Tensor[(9, 1, 11), float64] */;
  %877 = @func_3081(%876) /* ty=(Tensor[(9, 1, 11), float64], Tensor[(4, 11, 5), float32], Tensor[(4, 11, 5), float32]) */;
  %878 = %874.1;
  %879 = %877.1;
  (%878, %879, meta[relay.Constant][56] /* ty=Tensor[(99), float64] */)
}

def @func_3456() -> Tensor[(120), int16] {
  %881 = fn () -> Tensor[(120), int16] {
    %880 = @func_1963() /* ty=(Tensor[(4, 11, 5), float32], Tensor[(6, 4, 5), bool], Tensor[(120), int16]) */;
    %880.2
  };
  %881() /* ty=Tensor[(120), int16] */
}

def @func_1916(%var_1913: Tensor[(8, 11, 4), uint16], %var_1914: Tensor[(8, 11, 4), uint16], %var_1915: Tensor[(4, 48), int64]) -> (Tensor[(8, 11, 4), bool], Tensor[(320), float64], Tensor[(4, 48), int64]) {
  @func_1911(%var_1913, %var_1914, %var_1915) /* ty=(Tensor[(8, 11, 4), bool], Tensor[(320), float64], Tensor[(4, 48), int64]) */
}

def @func_3402() -> Tensor[(4, 11, 5), float32] {
  @func_3400() /* ty=Tensor[(4, 11, 5), float32] */
}

def @func_5971(%var_5969: Tensor[(15, 7, 7), float64], %var_5970: Tensor[(15, 7, 7), float64]) -> Tensor[(15, 7, 7), uint32] {
  %888 = fn (%var_5960: Tensor[(15, 7, 7), float64], %var_5963: Tensor[(15, 7, 7), float64]) -> Tensor[(15, 7, 7), uint32] {
    %882 = cast(%var_5960, dtype="float64") /* ty=Tensor[(15, 7, 7), float64] */;
    %883 = sigmoid(%882) /* ty=Tensor[(15, 7, 7), float64] */;
    %884 = cast(%var_5963, dtype="uint32") /* ty=Tensor[(15, 7, 7), uint32] */;
    %885 = shape_of(%883, dtype="int32") /* ty=Tensor[(3), int32] */;
    %886 = cast(%883, dtype="uint32") /* ty=Tensor[(15, 7, 7), uint32] */;
    %887 = dyn.reshape(%884, %885, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    logical_xor(%886, %887) /* ty=Tensor[(15, 7, 7), uint32] */
  };
  %888(%var_5969, %var_5970) /* ty=Tensor[(15, 7, 7), uint32] */
}

def @func_3303(%var_3300: Tensor[(16, 3, 16), int8], %var_3301: Tensor[(16, 3, 16), int8], %var_3302: Tensor[(16, 3, 16), int8]) -> (Tensor[(16, 3, 16), int8], Tensor[(16, 3, 16), bool], Tensor[(4, 11, 5), float32], Tensor[(16, 3, 16), bool], Tensor[(48), float64], Tensor[(192), float64], Tensor[(16, 3, 16), float64]) {
  %911 = fn (%var_3229: Tensor[(16, 3, 16), int8], %var_3230: Tensor[(16, 3, 16), int8], %var_3246: Tensor[(16, 3, 16), int8]) -> (Tensor[(16, 3, 16), int8], Tensor[(16, 3, 16), bool], Tensor[(4, 11, 5), float32], Tensor[(16, 3, 16), bool], Tensor[(48), float64], Tensor[(192), float64], Tensor[(16, 3, 16), float64]) {
    %889 = cast(%var_3230, dtype="int8") /* ty=Tensor[(16, 3, 16), int8] */;
    %890 = shape_of(%var_3229, dtype="int32") /* ty=Tensor[(3), int32] */;
    %891 = cast(%var_3229, dtype="int8") /* ty=Tensor[(16, 3, 16), int8] */;
    %892 = dyn.reshape(%889, %890, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %893 = cast(%var_3246, dtype="bool") /* ty=Tensor[(16, 3, 16), bool] */;
    %894 = shape_of(%var_3229, dtype="int32") /* ty=Tensor[(3), int32] */;
    %895 = cast(%var_3229, dtype="bool") /* ty=Tensor[(16, 3, 16), bool] */;
    %896 = dyn.reshape(%893, %894, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %897 = cast(%var_3229, dtype="bool") /* ty=Tensor[(16, 3, 16), bool] */;
    %898 = shape_of(%var_3230, dtype="int32") /* ty=Tensor[(3), int32] */;
    %899 = cast(%var_3230, dtype="bool") /* ty=Tensor[(16, 3, 16), bool] */;
    %900 = dyn.reshape(%897, %898, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %901 = cast(meta[relay.Constant][57] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
    %902 = reshape(%901, newshape=[192]) /* ty=Tensor[(192), float64] */;
    %903 = @func_423(%902) /* ty=(Tensor[(3, 9, 12), float32], Tensor[(12, 4, 4), float64], Tensor[(48), float64], Tensor[(192), float64]) */;
    %904 = cast(%var_3229, dtype="float64") /* ty=Tensor[(16, 3, 16), float64] */;
    %905 = bitwise_or(%891, %892) /* ty=Tensor[(16, 3, 16), int8] */;
    %906 = less(%895, %896) /* ty=Tensor[(16, 3, 16), bool] */;
    %907 = @func_1332() /* ty=Tensor[(4, 11, 5), float32] */;
    %908 = not_equal(%899, %900) /* ty=Tensor[(16, 3, 16), bool] */;
    %909 = %903.2;
    %910 = acosh(%904) /* ty=Tensor[(16, 3, 16), float64] */;
    (%905, %906, %907, %908, %909, meta[relay.Constant][57] /* ty=Tensor[(192), float64] */, %910)
  };
  %911(%var_3300, %var_3301, %var_3302) /* ty=(Tensor[(16, 3, 16), int8], Tensor[(16, 3, 16), bool], Tensor[(4, 11, 5), float32], Tensor[(16, 3, 16), bool], Tensor[(48), float64], Tensor[(192), float64], Tensor[(16, 3, 16), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen254/build/output.py", line 2627, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:01:16] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

