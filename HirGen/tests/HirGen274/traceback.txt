==========mod==========
#[version = "0.0.5"]
def @func_7727() -> (Tensor[(120), float32], Tensor[(120), float32]) {
  %0 = @func_6663() /* ty=(Tensor[(120), float32],) */;
  %1 = @func_5701() /* ty=(Tensor[(120), float32],) */;
  %2 = %0.0;
  %3 = %1.0;
  (%2, %3)
}

def @func_7783(%var_7764: Tensor[(1, 13, 16), int8], %var_7765: Tensor[(16, 13, 16), int8], %var_7780: Tensor[(15), float32]) -> (Tensor[(16, 13, 16), int8], Tensor[(120), float32], Tensor[(15), float32], Tensor[(525), int16]) {
  %4 = cast(%var_7764, dtype="int8") /* ty=Tensor[(1, 13, 16), int8] */;
  %5 = cast(%var_7765, dtype="int8") /* ty=Tensor[(16, 13, 16), int8] */;
  %6 = cast(%var_7780, dtype="float32") /* ty=Tensor[(15), float32] */;
  %7 = cast(meta[relay.Constant][0] /* ty=Tensor[(525), int16] */, dtype="int16") /* ty=Tensor[(525), int16] */;
  %8 = reshape(%6, newshape=[15]) /* ty=Tensor[(15), float32] */;
  %9 = reshape(%7, newshape=[525]) /* ty=Tensor[(525), int16] */;
  %10 = @func_3179(%8, %9) /* ty=(Tensor[(120), float32], Tensor[(120), float32], Tensor[(15), float32], Tensor[(525), int16], Tensor[(5, 4, 6), float32], Tensor[(600), float32], Tensor[(15), int16]) */;
  %11 = bitwise_and(%4, %5) /* ty=Tensor[(16, 13, 16), int8] */;
  %12 = %10.0;
  (%11, %12, %var_7780, meta[relay.Constant][0] /* ty=Tensor[(525), int16] */)
}

def @func_4198() -> (Tensor[(120), float32],) {
  %13 = @func_3695() /* ty=(Tensor[(120), float32], Tensor[(16, 16), float32]) */;
  %14 = %13.0;
  (%14,)
}

def @func_3082(%var_2971: Tensor[(15, 12, 4), float32], %var_3026: Tensor[(15), float32], %var_3033: Tensor[(18), float32], %var_3050: Tensor[(15, 12, 4), float64], %var_3064: Tensor[(1680), float64], %var_3065: Tensor[(600), float32]) -> (Tensor[(5, 4, 6), float32], Tensor[(120), float32], Tensor[(15), float32], Tensor[(1, 525), int16], Tensor[(1, 2, 9), float32], Tensor[(18), float32], Tensor[(16, 16), float32], Tensor[(15, 12, 4), int64], Tensor[(15, 12, 4), uint64], Tensor[(15, 12, 4), float64], Tensor[(600), float32], Tensor[(1680), float64], Tensor[(600), float32]) {
  %15 = @func_1670() /* ty=(Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(5, 4, 6), float32]) */;
  %16 = cast(%var_3026, dtype="float32") /* ty=Tensor[(15), float32] */;
  %17 = cast(meta[relay.Constant][1] /* ty=Tensor[(1, 525), int16] */, dtype="int16") /* ty=Tensor[(1, 525), int16] */;
  %18 = reshape(%16, newshape=[15]) /* ty=Tensor[(15), float32] */;
  %19 = reshape(%17, newshape=[1, 525]) /* ty=Tensor[(1, 525), int16] */;
  %20 = @func_2206(%18, %19) /* ty=(Tensor[(120), float32], Tensor[(14, 5, 3), bool], Tensor[(15), float32], Tensor[(210), float32], Tensor[(120), uint32], Tensor[(5, 15, 7), int64], Tensor[(1, 525), int16], Tensor[(120), float32]) */;
  %21 = cast(%var_3033, dtype="float32") /* ty=Tensor[(18), float32] */;
  %22 = reshape(%21, newshape=[1, 2, 9]) /* ty=Tensor[(1, 2, 9), float32] */;
  %23 = @func_1836(%22) /* ty=(Tensor[(1, 2, 9), float32],) */;
  %24 = @func_2747() /* ty=(Tensor[(16, 16), float32],) */;
  %25 = cast(%var_2971, dtype="float32") /* ty=Tensor[(15, 12, 4), float32] */;
  %26 = acos(%25) /* ty=Tensor[(15, 12, 4), float32] */;
  %27 = cast(%var_2971, dtype="float64") /* ty=Tensor[(15, 12, 4), float64] */;
  %28 = sinh(%27) /* ty=Tensor[(15, 12, 4), float64] */;
  %29 = cast(%28, dtype="int64") /* ty=Tensor[(15, 12, 4), int64] */;
  %30 = shape_of(%26, dtype="int32") /* ty=Tensor[(3), int32] */;
  %31 = cast(%26, dtype="int64") /* ty=Tensor[(15, 12, 4), int64] */;
  %32 = dyn.reshape(%29, %30, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %33 = cast(%var_3050, dtype="uint64") /* ty=Tensor[(15, 12, 4), uint64] */;
  %34 = shape_of(%28, dtype="int32") /* ty=Tensor[(3), int32] */;
  %35 = cast(%28, dtype="uint64") /* ty=Tensor[(15, 12, 4), uint64] */;
  %36 = dyn.reshape(%33, %34, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %37 = cast(%var_2971, dtype="float64") /* ty=Tensor[(15, 12, 4), float64] */;
  %38 = cos(%37) /* ty=Tensor[(15, 12, 4), float64] */;
  %39 = cast(%26, dtype="float64") /* ty=Tensor[(15, 12, 4), float64] */;
  %40 = shape_of(%38, dtype="int32") /* ty=Tensor[(3), int32] */;
  %41 = cast(%38, dtype="float64") /* ty=Tensor[(15, 12, 4), float64] */;
  %42 = dyn.reshape(%39, %40, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %43 = cast(%var_3064, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %44 = cast(%var_3026, dtype="int16") /* ty=Tensor[(15), int16] */;
  %45 = cast(%var_3065, dtype="float32") /* ty=Tensor[(600), float32] */;
  %46 = reshape(%43, newshape=[1680]) /* ty=Tensor[(1680), float64] */;
  %47 = reshape(%44, newshape=[15]) /* ty=Tensor[(15), int16] */;
  %48 = reshape(%45, newshape=[600]) /* ty=Tensor[(600), float32] */;
  %49 = @func_2676(%46, %47, %48) /* ty=(Tensor[(120), float32], Tensor[(6, 4, 2), float64], Tensor[(48), float64], Tensor[(120), uint32], Tensor[(15, 1, 1), int16], Tensor[(1680), float64], Tensor[(15), int16], Tensor[(525), int16], Tensor[(5, 12, 10), float32], Tensor[(600), float32]) */;
  %50 = %15.2;
  %51 = %20.7;
  %52 = %23.0;
  %53 = %24.0;
  %54 = bitwise_or(%31, %32) /* ty=Tensor[(15, 12, 4), int64] */;
  %55 = minimum(%35, %36) /* ty=Tensor[(15, 12, 4), uint64] */;
  %56 = divide(%41, %42) /* ty=Tensor[(15, 12, 4), float64] */;
  %57 = %49.9;
  (%50, %51, %var_3026, meta[relay.Constant][1] /* ty=Tensor[(1, 525), int16] */, %52, %var_3033, %53, %54, %55, %56, %57, %var_3064, %var_3065)
}

def @func_9082() -> Tensor[(120), float32] {
  %58 = @func_5701() /* ty=(Tensor[(120), float32],) */;
  %58.0
}

def @func_6902(%var_6871: Tensor[(720), float32], %var_6872: Tensor[(15), float32], %var_6873: Tensor[(18), float32]) -> (Tensor[(120), float32], Tensor[(120), float32], Tensor[(120), float64], Tensor[(1680), float32], Tensor[(18), float32], Tensor[(720), float32], Tensor[(15), float32], Tensor[(18), float32], Tensor[(6, 100), float32], Tensor[(120), float32]) {
  %59 = cast(meta[relay.Constant][2] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %60 = cast(meta[relay.Constant][2] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %61 = reshape(%59, newshape=[1680]) /* ty=Tensor[(1680), float64] */;
  %62 = reshape(%60, newshape=[1680]) /* ty=Tensor[(1680), float64] */;
  %63 = @func_2632(%61, %62) /* ty=(Tensor[(120), float32], Tensor[(525), int16], Tensor[(15), int16], Tensor[(525), int16], Tensor[(6, 4, 2), float64], Tensor[(48), float64], Tensor[(120), uint32], Tensor[(1680), bool]) */;
  %64 = cast(meta[relay.Constant][2] /* ty=Tensor[(1680), float64] */, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %65 = cast(%var_6871, dtype="float32") /* ty=Tensor[(720), float32] */;
  %66 = cast(%var_6872, dtype="float32") /* ty=Tensor[(15), float32] */;
  %67 = cast(%var_6873, dtype="float32") /* ty=Tensor[(18), float32] */;
  %68 = cast(%var_6871, dtype="float64") /* ty=Tensor[(720), float64] */;
  %69 = cast(meta[relay.Constant][2] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %70 = cast(meta[relay.Constant][3] /* ty=Tensor[(6, 100), float32] */, dtype="float32") /* ty=Tensor[(6, 100), float32] */;
  %71 = reshape(%65, newshape=[15, 12, 4]) /* ty=Tensor[(15, 12, 4), float32] */;
  %72 = reshape(%66, newshape=[15]) /* ty=Tensor[(15), float32] */;
  %73 = reshape(%67, newshape=[18]) /* ty=Tensor[(18), float32] */;
  %74 = reshape(%68, newshape=[15, 12, 4]) /* ty=Tensor[(15, 12, 4), float64] */;
  %75 = reshape(%69, newshape=[1680]) /* ty=Tensor[(1680), float64] */;
  %76 = reshape(%70, newshape=[600]) /* ty=Tensor[(600), float32] */;
  %77 = @func_3082(%71, %72, %73, %74, %75, %76) /* ty=(Tensor[(5, 4, 6), float32], Tensor[(120), float32], Tensor[(15), float32], Tensor[(1, 525), int16], Tensor[(1, 2, 9), float32], Tensor[(18), float32], Tensor[(16, 16), float32], Tensor[(15, 12, 4), int64], Tensor[(15, 12, 4), uint64], Tensor[(15, 12, 4), float64], Tensor[(600), float32], Tensor[(1680), float64], Tensor[(600), float32]) */;
  %78 = @func_6752() /* ty=Tensor[(120), float32] */;
  %79 = %63.0;
  %80 = @func_2841() /* ty=Tensor[(120), float64] */;
  %81 = sin(%64) /* ty=Tensor[(1680), float32] */;
  %82 = %77.5;
  %83 = @func_6752() /* ty=Tensor[(120), float32] */;
  (%78, %79, %80, %81, %82, %var_6871, %var_6872, %var_6873, meta[relay.Constant][3] /* ty=Tensor[(6, 100), float32] */, %83)
}

def @func_6394() -> (Tensor[(16, 16), float32], Tensor[(16, 16), float32]) {
  %84 = @func_3695() /* ty=(Tensor[(120), float32], Tensor[(16, 16), float32]) */;
  %85 = @func_3555() /* ty=Tensor[(16, 16), float32] */;
  %86 = %84.1;
  (%85, %86)
}

def @func_2487() -> (Tensor[(16, 16), float32], Tensor[(5, 4, 6), int16]) {
  %87 = @func_1670() /* ty=(Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(5, 4, 6), float32]) */;
  %88 = @func_1670() /* ty=(Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(5, 4, 6), float32]) */;
  %89 = %88.2;
  %90 = cast(meta[relay.Constant][4] /* ty=Tensor[(5, 4, 6), float32] */, dtype="int16") /* ty=Tensor[(5, 4, 6), int16] */;
  %91 = shape_of(%89, dtype="int32") /* ty=Tensor[(3), int32] */;
  %92 = cast(%89, dtype="int16") /* ty=Tensor[(5, 4, 6), int16] */;
  %93 = dyn.reshape(%90, %91, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %94 = %87.0;
  %95 = left_shift(%92, %93) /* ty=Tensor[(5, 4, 6), int16] */;
  (%94, %95)
}

def @func_4908(%var_4864: Tensor[(12, 14, 5), float32], %var_4905: Tensor[(15), float32], %var_4906: Tensor[(210), float32]) -> (Tensor[(12, 14, 5), float32], Tensor[(12, 14, 5), bool], Tensor[(32), float32], Tensor[(14, 5, 3), bool], Tensor[(15), float32], Tensor[(210), float32]) {
  %96 = cast(%var_4864, dtype="float32") /* ty=Tensor[(12, 14, 5), float32] */;
  %97 = cast(meta[relay.Constant][5] /* ty=Tensor[(12, 14, 5), float32] */, dtype="bool") /* ty=Tensor[(12, 14, 5), bool] */;
  %98 = shape_of(%var_4864, dtype="int32") /* ty=Tensor[(3), int32] */;
  %99 = cast(%var_4864, dtype="bool") /* ty=Tensor[(12, 14, 5), bool] */;
  %100 = dyn.reshape(%97, %98, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %101 = @func_4562() /* ty=(Tensor[(120), float32], Tensor[(2, ?, 16), float32], Tensor[(32), float32]) */;
  %102 = cast(%var_4905, dtype="float32") /* ty=Tensor[(15), float32] */;
  %103 = cast(%var_4906, dtype="float32") /* ty=Tensor[(210), float32] */;
  %104 = reshape(%102, newshape=[1, 5, 3]) /* ty=Tensor[(1, 5, 3), float32] */;
  %105 = reshape(%103, newshape=[14, 5, 3]) /* ty=Tensor[(14, 5, 3), float32] */;
  %106 = cos(%96) /* ty=Tensor[(12, 14, 5), float32] */;
  %107 = not_equal(%99, %100) /* ty=Tensor[(12, 14, 5), bool] */;
  %108 = %101.2;
  %109 = @func_1735(%104, %105) /* ty=Tensor[(14, 5, 3), bool] */;
  (%106, %107, %108, %109, %var_4905, %var_4906)
}

def @func_3539() -> Tensor[(120), float32] {
  %110 = @func_3381() /* ty=(Tensor[(120), float32],) */;
  %110.0
}

def @func_3762(%var_3721: Tensor[(14, 14, 4), float64]) -> (Tensor[(120), float32], Tensor[(14, 14, 4), float32]) {
  %111 = cast(%var_3721, dtype="float64") /* ty=Tensor[(14, 14, 4), float64] */;
  %112 = rsqrt(%111) /* ty=Tensor[(14, 14, 4), float64] */;
  %113 = cast(%112, dtype="float32") /* ty=Tensor[(14, 14, 4), float32] */;
  %114 = @func_3539() /* ty=Tensor[(120), float32] */;
  %115 = cos(%113) /* ty=Tensor[(14, 14, 4), float32] */;
  (%114, %115)
}

def @func_3695() -> (Tensor[(120), float32], Tensor[(16, 16), float32]) {
  %116 = @func_2747() /* ty=(Tensor[(16, 16), float32],) */;
  %117 = @func_3539() /* ty=Tensor[(120), float32] */;
  %118 = %116.0;
  (%117, %118)
}

def @func_6048() -> Tensor[(120), float32] {
  %119 = @func_3695() /* ty=(Tensor[(120), float32], Tensor[(16, 16), float32]) */;
  %119.0
}

def @func_2841() -> Tensor[(120), float64] {
  %120 = @func_1670() /* ty=(Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(5, 4, 6), float32]) */;
  %121 = %120.1;
  %122 = cast(%121, dtype="float64") /* ty=Tensor[(120), float64] */;
  cosh(%122) /* ty=Tensor[(120), float64] */
}

def @func_4971() -> (Tensor[(120), float32], Tensor[(120), float32]) {
  %123 = @func_3381() /* ty=(Tensor[(120), float32],) */;
  %124 = @func_3539() /* ty=Tensor[(120), float32] */;
  %125 = %123.0;
  (%124, %125)
}

def @func_1138(%var_1118: Tensor[(5, 4, 6), float32]) -> Tensor[(5, 4, 6), float32] {
  %126 = cast(%var_1118, dtype="float32") /* ty=Tensor[(5, 4, 6), float32] */;
  acos(%126) /* ty=Tensor[(5, 4, 6), float32] */
}

def @func_6504(%var_6500: Tensor[(525), int16]) -> (Tensor[(120), float32], Tensor[(16, 16), float32], Tensor[(1680), float64], Tensor[(80), uint64], Tensor[(525), int16]) {
  %127 = @func_2747() /* ty=(Tensor[(16, 16), float32],) */;
  %128 = cast(meta[relay.Constant][6] /* ty=Tensor[(80), uint64] */, dtype="uint64") /* ty=Tensor[(80), uint64] */;
  %129 = cast(%var_6500, dtype="int16") /* ty=Tensor[(525), int16] */;
  %130 = reshape(%128, newshape=[2, 40]) /* ty=Tensor[(2, 40), uint64] */;
  %131 = reshape(%129, newshape=[525]) /* ty=Tensor[(525), int16] */;
  %132 = @func_4062(%130, %131) /* ty=(Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(15), int16], Tensor[(2, 40), uint64], Tensor[(1680), float64], Tensor[(6, 4, 2), float64], Tensor[(48), float64], Tensor[(2, 4, 10), int16], Tensor[(120), float32], Tensor[(525), int16]) */;
  %133 = @func_6262() /* ty=Tensor[(120), float32] */;
  %134 = %127.0;
  %135 = %132.4;
  (%133, %134, %135, meta[relay.Constant][6] /* ty=Tensor[(80), uint64] */, %var_6500)
}

def @func_9194(%var_9160: Tensor[(14, 2, 6), int64]) -> (Tensor[(14, 2, 6), int64], Tensor[(120), float32], Tensor[(16, 16), float32]) {
  %136 = cast(meta[relay.Constant][7] /* ty=Tensor[(14, 2, 6), int64] */, dtype="int64") /* ty=Tensor[(14, 2, 6), int64] */;
  %137 = shape_of(%var_9160, dtype="int32") /* ty=Tensor[(3), int32] */;
  %138 = cast(%var_9160, dtype="int64") /* ty=Tensor[(14, 2, 6), int64] */;
  %139 = dyn.reshape(%136, %137, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %140 = @func_7611() /* ty=(Tensor[(120), float32],) */;
  %141 = left_shift(%138, %139) /* ty=Tensor[(14, 2, 6), int64] */;
  %142 = %140.0;
  %143 = @func_8448() /* ty=Tensor[(16, 16), float32] */;
  (%141, %142, %143)
}

def @func_2891() -> Tensor[(120), float32] {
  %144 = @func_2145() /* ty=(Tensor[(120), float32],) */;
  %144.0
}

def @func_5987(%var_5959: Tensor[(2, 300), float32], %var_5960: Tensor[(960), float64], %var_5961: Tensor[(15), int16]) -> (Tensor[(120), float32], Tensor[(5, 4, 6), float32], Tensor[(2, 300), float32], Tensor[(960), float64], Tensor[(15), int16], Tensor[(120), float32]) {
  %145 = @func_5146() /* ty=(Tensor[(120), float32], Tensor[(120), float32], Tensor[(?, 48), bool]) */;
  %146 = cast(%var_5959, dtype="float32") /* ty=Tensor[(2, 300), float32] */;
  %147 = cast(%var_5960, dtype="float64") /* ty=Tensor[(960), float64] */;
  %148 = cast(%var_5961, dtype="int16") /* ty=Tensor[(15), int16] */;
  %149 = cast(%var_5960, dtype="float64") /* ty=Tensor[(960), float64] */;
  %150 = reshape(%146, newshape=[600]) /* ty=Tensor[(600), float32] */;
  %151 = reshape(%147, newshape=[16, 5, 12]) /* ty=Tensor[(16, 5, 12), float64] */;
  %152 = reshape(%148, newshape=[15]) /* ty=Tensor[(15), int16] */;
  %153 = reshape(%149, newshape=[16, 5, 12]) /* ty=Tensor[(16, 5, 12), float64] */;
  %154 = @func_4711(%150, %151, %152, %153) /* ty=(Tensor[(5, 4, 6), float32], Tensor[(525, 1), int16], Tensor[(600), float32], Tensor[(16, 5, 12), bool], Tensor[(16, 5, 12), uint64], Tensor[(15, 1, 1), int16], Tensor[(192), float32], Tensor[(15), int16], Tensor[(16, 5, 12), bool], Tensor[(9, 5, 9), float32], Tensor[(405), float32]) */;
  %155 = %145.0;
  %156 = %154.0;
  %157 = @func_4122() /* ty=Tensor[(120), float32] */;
  (%155, %156, %var_5959, %var_5960, %var_5961, %157)
}

def @func_6472(%var_6443: Tensor[(1680), float64]) -> (Tensor[(120), float32], Tensor[(6, 4, 2), float64], Tensor[(1680), float64]) {
  %158 = @func_4198() /* ty=(Tensor[(120), float32],) */;
  %159 = cast(%var_6443, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %160 = cast(%var_6443, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %161 = reshape(%159, newshape=[1680]) /* ty=Tensor[(1680), float64] */;
  %162 = reshape(%160, newshape=[1680]) /* ty=Tensor[(1680), float64] */;
  %163 = @func_2632(%161, %162) /* ty=(Tensor[(120), float32], Tensor[(525), int16], Tensor[(15), int16], Tensor[(525), int16], Tensor[(6, 4, 2), float64], Tensor[(48), float64], Tensor[(120), uint32], Tensor[(1680), bool]) */;
  %164 = %158.0;
  %165 = %163.4;
  (%164, %165, %var_6443)
}

def @func_7930() -> (Tensor[(120), float32], Tensor[(15), float32]) {
  %166 = @func_4971() /* ty=(Tensor[(120), float32], Tensor[(120), float32]) */;
  %167 = @func_6162() /* ty=(Tensor[(120), float32], Tensor[(11, 11, 12), int64], Tensor[(15), float32]) */;
  %168 = %166.0;
  %169 = %167.2;
  (%168, %169)
}

def @main() -> (Tensor[(120), float32], Tensor[(120), float64], Tensor[(16, 16), float32], Tensor[(5, 3), float32], Tensor[(720), float32], Tensor[(16, 16), float32], Tensor[(168), int64], Tensor[(448), float32]) {
  %170 = @func_8612() /* ty=(Tensor[(120), float32], Tensor[(120), float32]) */;
  %171 = cast(meta[relay.Constant][8] /* ty=Tensor[(448), float64] */, dtype="float64") /* ty=Tensor[(448), float64] */;
  %172 = cast(meta[relay.Constant][8] /* ty=Tensor[(448), float64] */, dtype="float64") /* ty=Tensor[(448), float64] */;
  %173 = reshape(%171, newshape=[2, 14, 16]) /* ty=Tensor[(2, 14, 16), float64] */;
  %174 = reshape(%172, newshape=[2, 14, 16]) /* ty=Tensor[(2, 14, 16), float64] */;
  %175 = @func_8169(%173, %174) /* ty=(Tensor[(120), float32], Tensor[(120), float64], Tensor[(2, 14, 16), int16], Tensor[(2, 14, 16), float64]) */;
  %176 = @func_3695() /* ty=(Tensor[(120), float32], Tensor[(16, 16), float32]) */;
  %177 = cast(meta[relay.Constant][9] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %178 = reshape(%177, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %179 = @func_7655(%178) /* ty=(Tensor[(16, 16), float32], Tensor[(5, 4, 6), float32], Tensor[(720), float32], Tensor[(5, 3), float32], Tensor[(18), float32], Tensor[(1680), float64], Tensor[(600, 1), float32]) */;
  %180 = cast(meta[relay.Constant][10] /* ty=Tensor[(168), int64] */, dtype="int64") /* ty=Tensor[(168), int64] */;
  %181 = reshape(%180, newshape=[14, 2, 6]) /* ty=Tensor[(14, 2, 6), int64] */;
  %182 = @func_9194(%181) /* ty=(Tensor[(14, 2, 6), int64], Tensor[(120), float32], Tensor[(16, 16), float32]) */;
  %183 = cast(meta[relay.Constant][8] /* ty=Tensor[(448), float64] */, dtype="float64") /* ty=Tensor[(448), float64] */;
  %184 = asinh(%183) /* ty=Tensor[(448), float64] */;
  %185 = cast(%184, dtype="float32") /* ty=Tensor[(448), float32] */;
  %186 = %170.1;
  %187 = %175.1;
  %188 = %176.1;
  %189 = %179.3;
  %190 = %182.2;
  %191 = sqrt(%185) /* ty=Tensor[(448), float32] */;
  (%186, %187, %188, %189, meta[relay.Constant][9] /* ty=Tensor[(720), float32] */, %190, meta[relay.Constant][10] /* ty=Tensor[(168), int64] */, %191)
}

def @func_9146() -> (Tensor[(120), float32],) {
  %192 = @func_4122() /* ty=Tensor[(120), float32] */;
  (%192,)
}

def @func_8987() -> (Tensor[(16, 16), float32], Tensor[(600), float32], Tensor[(5, 12, 10), float32]) {
  %193 = @func_6394() /* ty=(Tensor[(16, 16), float32], Tensor[(16, 16), float32]) */;
  %194 = cast(meta[relay.Constant][11] /* ty=Tensor[(600), float32] */, dtype="float32") /* ty=Tensor[(600), float32] */;
  %195 = reshape(%194, newshape=[5, 12, 10]) /* ty=Tensor[(5, 12, 10), float32] */;
  %196 = @func_1606(%195) /* ty=(Tensor[(5, 12, 10), float32],) */;
  %197 = %196.0;
  %198 = cast(%197, dtype="float32") /* ty=Tensor[(5, 12, 10), float32] */;
  %199 = %193.1;
  %200 = sin(%198) /* ty=Tensor[(5, 12, 10), float32] */;
  (%199, meta[relay.Constant][11] /* ty=Tensor[(600), float32] */, %200)
}

def @func_6262() -> Tensor[(120), float32] {
  %201 = @func_3869() /* ty=(Tensor[(16, 16), float32], Tensor[(16, 16), float32], Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(120), float32], Tensor[(120), float32], Tensor[(15), float32], Tensor[(525), int16], Tensor[(120), float32], Tensor[(16, 16), float32]) */;
  %201.3
}

def @func_4389(%var_4375: Tensor[(210), float32]) -> (Tensor[(120), float32], Tensor[(15), float32], Tensor[(210), bool], Tensor[(525), float64]) {
  %202 = @func_2292() /* ty=(Tensor[(120), float32],) */;
  %203 = cast(meta[relay.Constant][12] /* ty=Tensor[(15), float32] */, dtype="float32") /* ty=Tensor[(15), float32] */;
  %204 = cast(meta[relay.Constant][13] /* ty=Tensor[(525), int16] */, dtype="int16") /* ty=Tensor[(525), int16] */;
  %205 = reshape(%203, newshape=[15]) /* ty=Tensor[(15), float32] */;
  %206 = reshape(%204, newshape=[1, 525]) /* ty=Tensor[(1, 525), int16] */;
  %207 = @func_2206(%205, %206) /* ty=(Tensor[(120), float32], Tensor[(14, 5, 3), bool], Tensor[(15), float32], Tensor[(210), float32], Tensor[(120), uint32], Tensor[(5, 15, 7), int64], Tensor[(1, 525), int16], Tensor[(120), float32]) */;
  %208 = %207.3;
  %209 = cast(%var_4375, dtype="bool") /* ty=Tensor[(210), bool] */;
  %210 = shape_of(%208, dtype="int32") /* ty=Tensor[(1), int32] */;
  %211 = cast(%208, dtype="bool") /* ty=Tensor[(210), bool] */;
  %212 = dyn.reshape(%209, %210, newshape=[]) /* ty=Tensor[(?), bool] */;
  %213 = cast(meta[relay.Constant][13] /* ty=Tensor[(525), int16] */, dtype="float64") /* ty=Tensor[(525), float64] */;
  %214 = %202.0;
  %215 = equal(%211, %212) /* ty=Tensor[(210), bool] */;
  %216 = atanh(%213) /* ty=Tensor[(525), float64] */;
  (%214, meta[relay.Constant][12] /* ty=Tensor[(15), float32] */, %215, %216)
}

def @func_7611() -> (Tensor[(120), float32],) {
  %217 = @func_6663() /* ty=(Tensor[(120), float32],) */;
  %218 = %217.0;
  (%218,)
}

def @func_6274() -> (Tensor[(120), float32], Tensor[(11, 11, 12), int64]) {
  %219 = @func_3240() /* ty=(Tensor[(120), float32], Tensor[(120), float32]) */;
  %220 = @func_6162() /* ty=(Tensor[(120), float32], Tensor[(11, 11, 12), int64], Tensor[(15), float32]) */;
  %221 = %219.1;
  %222 = %220.1;
  (%221, %222)
}

def @func_5510(%var_5457: Tensor[(15), int16], %var_5472: Tensor[(720), float32], %var_5474: Tensor[(600), float32]) -> (Tensor[(120), float64], Tensor[(120), float32], Tensor[(7, 16, 15), uint8], Tensor[(1680), float64], Tensor[(15), int16], Tensor[(525), int16], Tensor[(7, 16, 15), int64], Tensor[(1680), float64], Tensor[(720), float32], Tensor[(18), float32], Tensor[(600), float32], Tensor[(120), float32]) {
  %223 = @func_4474() /* ty=(Tensor[(120), float64],) */;
  %224 = @func_2145() /* ty=(Tensor[(120), float32],) */;
  %225 = cast(meta[relay.Constant][14] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %226 = cast(%var_5457, dtype="int16") /* ty=Tensor[(15), int16] */;
  %227 = cast(meta[relay.Constant][15] /* ty=Tensor[(525), int16] */, dtype="int16") /* ty=Tensor[(525), int16] */;
  %228 = cast(meta[relay.Constant][14] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %229 = reshape(%225, newshape=[7, 16, 15]) /* ty=Tensor[(7, 16, 15), float64] */;
  %230 = reshape(%226, newshape=[15]) /* ty=Tensor[(15), int16] */;
  %231 = reshape(%227, newshape=[525]) /* ty=Tensor[(525), int16] */;
  %232 = reshape(%228, newshape=[7, 16, 15]) /* ty=Tensor[(7, 16, 15), float64] */;
  %233 = @func_985(%229, %230, %231, %232) /* ty=(Tensor[(2, 6, 16), bool], Tensor[(192), float32], Tensor[(15), int16], Tensor[(15, 1, 1), int16], Tensor[(525), int16], Tensor[(525), int16], Tensor[(2, 6, 16), bool], Tensor[(2, 6, 16), bool], Tensor[(5, 15, 7), int64], Tensor[(15, 1, 1), int16], Tensor[(525), int16], Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64], Tensor[(7, 16, 15), uint8], Tensor[(15, 1, 1), int16], Tensor[(2, 6, 16), bool], Tensor[(7, 16, 15), int64], Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(7, 16, 15), float64], Tensor[(7, 16, 15), float32], Tensor[(15, 1, 1), int16]) */;
  %234 = cast(meta[relay.Constant][14] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %235 = cast(%var_5457, dtype="int16") /* ty=Tensor[(15), int16] */;
  %236 = cast(meta[relay.Constant][15] /* ty=Tensor[(525), int16] */, dtype="int16") /* ty=Tensor[(525), int16] */;
  %237 = cast(meta[relay.Constant][14] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %238 = reshape(%234, newshape=[7, 16, 15]) /* ty=Tensor[(7, 16, 15), float64] */;
  %239 = reshape(%235, newshape=[15]) /* ty=Tensor[(15), int16] */;
  %240 = reshape(%236, newshape=[525]) /* ty=Tensor[(525), int16] */;
  %241 = reshape(%237, newshape=[7, 16, 15]) /* ty=Tensor[(7, 16, 15), float64] */;
  %242 = @func_985(%238, %239, %240, %241) /* ty=(Tensor[(2, 6, 16), bool], Tensor[(192), float32], Tensor[(15), int16], Tensor[(15, 1, 1), int16], Tensor[(525), int16], Tensor[(525), int16], Tensor[(2, 6, 16), bool], Tensor[(2, 6, 16), bool], Tensor[(5, 15, 7), int64], Tensor[(15, 1, 1), int16], Tensor[(525), int16], Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64], Tensor[(7, 16, 15), uint8], Tensor[(15, 1, 1), int16], Tensor[(2, 6, 16), bool], Tensor[(7, 16, 15), int64], Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(7, 16, 15), float64], Tensor[(7, 16, 15), float32], Tensor[(15, 1, 1), int16]) */;
  %243 = cast(%var_5472, dtype="float32") /* ty=Tensor[(720), float32] */;
  %244 = cast(%var_5457, dtype="float32") /* ty=Tensor[(15), float32] */;
  %245 = cast(meta[relay.Constant][16] /* ty=Tensor[(18), float32] */, dtype="float32") /* ty=Tensor[(18), float32] */;
  %246 = cast(%var_5472, dtype="float64") /* ty=Tensor[(720), float64] */;
  %247 = %242.16;
  %248 = cast(%247, dtype="float64") /* ty=Tensor[(7, 16, 15), float64] */;
  %249 = cast(%var_5474, dtype="float32") /* ty=Tensor[(600), float32] */;
  %250 = reshape(%243, newshape=[15, 12, 4]) /* ty=Tensor[(15, 12, 4), float32] */;
  %251 = reshape(%244, newshape=[15]) /* ty=Tensor[(15), float32] */;
  %252 = reshape(%245, newshape=[18]) /* ty=Tensor[(18), float32] */;
  %253 = reshape(%246, newshape=[15, 12, 4]) /* ty=Tensor[(15, 12, 4), float64] */;
  %254 = reshape(%248, newshape=[1680]) /* ty=Tensor[(1680), float64] */;
  %255 = reshape(%249, newshape=[600]) /* ty=Tensor[(600), float32] */;
  %256 = @func_3082(%250, %251, %252, %253, %254, %255) /* ty=(Tensor[(5, 4, 6), float32], Tensor[(120), float32], Tensor[(15), float32], Tensor[(1, 525), int16], Tensor[(1, 2, 9), float32], Tensor[(18), float32], Tensor[(16, 16), float32], Tensor[(15, 12, 4), int64], Tensor[(15, 12, 4), uint64], Tensor[(15, 12, 4), float64], Tensor[(600), float32], Tensor[(1680), float64], Tensor[(600), float32]) */;
  %257 = @func_4198() /* ty=(Tensor[(120), float32],) */;
  %258 = %223.0;
  %259 = %224.0;
  %260 = %233.13;
  %261 = %256.11;
  %262 = %257.0;
  (%258, %259, %260, meta[relay.Constant][14] /* ty=Tensor[(1680), float64] */, %var_5457, meta[relay.Constant][15] /* ty=Tensor[(525), int16] */, %247, %261, %var_5472, meta[relay.Constant][16] /* ty=Tensor[(18), float32] */, %var_5474, %262)
}

def @func_5202(%var_5189: Tensor[(15), float32]) -> (Tensor[(11, 11, 12), int64], Tensor[(11, 11, 12), float32], Tensor[(120), float32], Tensor[(14, 5, 3), bool], Tensor[(15), float32], Tensor[(210), float32], Tensor[(120), float32]) {
  %263 = cast(meta[relay.Constant][18] /* ty=Tensor[(11, 11, 12), int64] */, dtype="int64") /* ty=Tensor[(11, 11, 12), int64] */;
  %264 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(11, 11, 12), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %265 = cast(meta[relay.Constant][17] /* ty=Tensor[(11, 11, 12), int64] */, dtype="int64") /* ty=Tensor[(11, 11, 12), int64] */;
  %266 = dyn.reshape(%263, %264, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %267 = cast(meta[relay.Constant][17] /* ty=Tensor[(11, 11, 12), int64] */, dtype="float32") /* ty=Tensor[(11, 11, 12), float32] */;
  %268 = @func_3648() /* ty=(Tensor[(120), float32],) */;
  %269 = cast(%var_5189, dtype="float32") /* ty=Tensor[(15), float32] */;
  %270 = cast(meta[relay.Constant][19] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %271 = reshape(%269, newshape=[1, 5, 3]) /* ty=Tensor[(1, 5, 3), float32] */;
  %272 = reshape(%270, newshape=[14, 5, 3]) /* ty=Tensor[(14, 5, 3), float32] */;
  %273 = @func_2809() /* ty=(Tensor[(120), float32],) */;
  %274 = logical_xor(%265, %266) /* ty=Tensor[(11, 11, 12), int64] */;
  %275 = erf(%267) /* ty=Tensor[(11, 11, 12), float32] */;
  %276 = %268.0;
  %277 = @func_1735(%271, %272) /* ty=Tensor[(14, 5, 3), bool] */;
  %278 = %273.0;
  (%274, %275, %276, %277, %var_5189, meta[relay.Constant][19] /* ty=Tensor[(210), float32] */, %278)
}

def @func_5920(%var_5866: Tensor[(3, 13, 11), float32], %var_5867: Tensor[(3, 13, 11), float32]) -> (Tensor[(32), float32], Tensor[(3, 13, 11), uint64], Tensor[(120), float64], Tensor[(1, 2, 9), float32], Tensor[(18), float32]) {
  %279 = @func_4562() /* ty=(Tensor[(120), float32], Tensor[(2, ?, 16), float32], Tensor[(32), float32]) */;
  %280 = cast(%var_5867, dtype="bool") /* ty=Tensor[(3, 13, 11), bool] */;
  %281 = shape_of(%var_5866, dtype="int32") /* ty=Tensor[(3), int32] */;
  %282 = cast(%var_5866, dtype="bool") /* ty=Tensor[(3, 13, 11), bool] */;
  %283 = dyn.reshape(%280, %281, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %284 = not_equal(%282, %283) /* ty=Tensor[(3, 13, 11), bool] */;
  %285 = cast(%284, dtype="uint64") /* ty=Tensor[(3, 13, 11), uint64] */;
  %286 = shape_of(%var_5867, dtype="int32") /* ty=Tensor[(3), int32] */;
  %287 = cast(%var_5867, dtype="uint64") /* ty=Tensor[(3, 13, 11), uint64] */;
  %288 = dyn.reshape(%285, %286, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %289 = cast(meta[relay.Constant][20] /* ty=Tensor[(18), float32] */, dtype="float32") /* ty=Tensor[(18), float32] */;
  %290 = reshape(%289, newshape=[1, 2, 9]) /* ty=Tensor[(1, 2, 9), float32] */;
  %291 = @func_1836(%290) /* ty=(Tensor[(1, 2, 9), float32],) */;
  %292 = %279.2;
  %293 = bitwise_or(%287, %288) /* ty=Tensor[(3, 13, 11), uint64] */;
  %294 = @func_2841() /* ty=Tensor[(120), float64] */;
  %295 = %291.0;
  (%292, %293, %294, %295, meta[relay.Constant][20] /* ty=Tensor[(18), float32] */)
}

def @func_1670() -> (Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(5, 4, 6), float32]) {
  %296 = cast(meta[relay.Constant][21] /* ty=Tensor[(16, 16), float32] */, dtype="float32") /* ty=Tensor[(16, 16), float32] */;
  %297 = cast(meta[relay.Constant][22] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %298 = reshape(%297, newshape=[5, 4, 6]) /* ty=Tensor[(5, 4, 6), float32] */;
  %299 = @func_1138(%298) /* ty=Tensor[(5, 4, 6), float32] */;
  %300 = cast(%299, dtype="float32") /* ty=Tensor[(5, 4, 6), float32] */;
  %301 = sinh(%296) /* ty=Tensor[(16, 16), float32] */;
  %302 = cos(%300) /* ty=Tensor[(5, 4, 6), float32] */;
  (%301, meta[relay.Constant][22] /* ty=Tensor[(120), float32] */, %302)
}

def @func_8879(%var_8844: Tensor[(6, 48), bool]) -> (Tensor[(6, 48), float32], Tensor[(15, 6, 9), bool]) {
  %303 = @func_5146() /* ty=(Tensor[(120), float32], Tensor[(120), float32], Tensor[(?, 48), bool]) */;
  %304 = %303.2;
  %305 = cast(%304, dtype="bool") /* ty=Tensor[(?, 48), bool] */;
  %306 = cast(%var_8844, dtype="bool") /* ty=Tensor[(6, 48), bool] */;
  %307 = greater(%305, %306) /* ty=Tensor[(6, 48), bool] */;
  %308 = cast(%var_8844, dtype="float32") /* ty=Tensor[(6, 48), float32] */;
  %309 = shape_of(%307, dtype="int32") /* ty=Tensor[(2), int32] */;
  %310 = cast(%307, dtype="float32") /* ty=Tensor[(6, 48), float32] */;
  %311 = dyn.reshape(%308, %309, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %312 = cast(meta[relay.Constant][23] /* ty=Tensor[(15, 6, 9), float64] */, dtype="float64") /* ty=Tensor[(15, 6, 9), float64] */;
  %313 = tan(%312) /* ty=Tensor[(15, 6, 9), float64] */;
  %314 = cast(%313, dtype="bool") /* ty=Tensor[(15, 6, 9), bool] */;
  %315 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(15, 6, 9), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %316 = cast(meta[relay.Constant][23] /* ty=Tensor[(15, 6, 9), float64] */, dtype="bool") /* ty=Tensor[(15, 6, 9), bool] */;
  %317 = dyn.reshape(%314, %315, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %318 = divide(%310, %311) /* ty=Tensor[(6, 48), float32] */;
  %319 = equal(%316, %317) /* ty=Tensor[(15, 6, 9), bool] */;
  (%318, %319)
}

def @func_7422() -> Tensor[(120), float32] {
  @func_3539() /* ty=Tensor[(120), float32] */
}

def @func_5343(%var_5332: Tensor[(600), float32]) -> (Tensor[(120), float32], Tensor[(405), float32], Tensor[(600), float32], Tensor[(120, 8), float64], Tensor[(15), int16]) {
  %320 = @func_5146() /* ty=(Tensor[(120), float32], Tensor[(120), float32], Tensor[(?, 48), bool]) */;
  %321 = cast(%var_5332, dtype="float32") /* ty=Tensor[(600), float32] */;
  %322 = cast(meta[relay.Constant][24] /* ty=Tensor[(120, 8), float64] */, dtype="float64") /* ty=Tensor[(120, 8), float64] */;
  %323 = cast(meta[relay.Constant][25] /* ty=Tensor[(15), int16] */, dtype="int16") /* ty=Tensor[(15), int16] */;
  %324 = cast(meta[relay.Constant][24] /* ty=Tensor[(120, 8), float64] */, dtype="float64") /* ty=Tensor[(120, 8), float64] */;
  %325 = reshape(%321, newshape=[600]) /* ty=Tensor[(600), float32] */;
  %326 = reshape(%322, newshape=[16, 5, 12]) /* ty=Tensor[(16, 5, 12), float64] */;
  %327 = reshape(%323, newshape=[15]) /* ty=Tensor[(15), int16] */;
  %328 = reshape(%324, newshape=[16, 5, 12]) /* ty=Tensor[(16, 5, 12), float64] */;
  %329 = @func_4711(%325, %326, %327, %328) /* ty=(Tensor[(5, 4, 6), float32], Tensor[(525, 1), int16], Tensor[(600), float32], Tensor[(16, 5, 12), bool], Tensor[(16, 5, 12), uint64], Tensor[(15, 1, 1), int16], Tensor[(192), float32], Tensor[(15), int16], Tensor[(16, 5, 12), bool], Tensor[(9, 5, 9), float32], Tensor[(405), float32]) */;
  %330 = %320.1;
  %331 = %329.10;
  (%330, %331, %var_5332, meta[relay.Constant][24] /* ty=Tensor[(120, 8), float64] */, meta[relay.Constant][25] /* ty=Tensor[(15), int16] */)
}

def @func_8825(%var_8823: Tensor[(784), float64]) -> (Tensor[(1, 12, 4), float32], Tensor[(120), float32], Tensor[(784), float64]) {
  %332 = cast(%var_8823, dtype="float64") /* ty=Tensor[(784), float64] */;
  %333 = reshape(%332, newshape=[14, 14, 4]) /* ty=Tensor[(14, 14, 4), float64] */;
  %334 = @func_3762(%333) /* ty=(Tensor[(120), float32], Tensor[(14, 14, 4), float32]) */;
  %335 = @func_6039() /* ty=Tensor[(1, 12, 4), float32] */;
  %336 = %334.0;
  (%335, %336, %var_8823)
}

def @func_4062(%var_4007: Tensor[(2, 40), uint64], %var_4058: Tensor[(525), int16]) -> (Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(15), int16], Tensor[(2, 40), uint64], Tensor[(1680), float64], Tensor[(6, 4, 2), float64], Tensor[(48), float64], Tensor[(2, 4, 10), int16], Tensor[(120), float32], Tensor[(525), int16]) {
  %337 = @func_2487() /* ty=(Tensor[(16, 16), float32], Tensor[(5, 4, 6), int16]) */;
  %338 = cast(%var_4007, dtype="uint64") /* ty=Tensor[(2, 40), uint64] */;
  %339 = cast(meta[relay.Constant][26] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %340 = reshape(%338, newshape=[2, 4, 10]) /* ty=Tensor[(2, 4, 10), uint64] */;
  %341 = reshape(%339, newshape=[12, 140]) /* ty=Tensor[(12, 140), float64] */;
  %342 = @func_3297(%340, %341) /* ty=(Tensor[(2, 4, 10), bool], Tensor[(2, 4, 10), int16], Tensor[(15, 1, 1), int16], Tensor[(12, 140), float64], Tensor[(15), int16], Tensor[(525), int16]) */;
  %343 = cast(meta[relay.Constant][27] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %344 = cast(meta[relay.Constant][27] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %345 = reshape(%343, newshape=[6, 4, 2]) /* ty=Tensor[(6, 4, 2), float64] */;
  %346 = reshape(%344, newshape=[6, 4, 2]) /* ty=Tensor[(6, 4, 2), float64] */;
  %347 = @func_1395(%345, %346) /* ty=(Tensor[(6, 4, 2), float64], Tensor[(6, 4, 2), float64]) */;
  %348 = cast(%var_4007, dtype="uint64") /* ty=Tensor[(2, 40), uint64] */;
  %349 = cast(meta[relay.Constant][26] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %350 = reshape(%348, newshape=[2, 4, 10]) /* ty=Tensor[(2, 4, 10), uint64] */;
  %351 = reshape(%349, newshape=[12, 140]) /* ty=Tensor[(12, 140), float64] */;
  %352 = @func_3297(%350, %351) /* ty=(Tensor[(2, 4, 10), bool], Tensor[(2, 4, 10), int16], Tensor[(15, 1, 1), int16], Tensor[(12, 140), float64], Tensor[(15), int16], Tensor[(525), int16]) */;
  %353 = %342.4;
  %354 = cast(%353, dtype="float32") /* ty=Tensor[(15), float32] */;
  %355 = cast(%var_4058, dtype="int16") /* ty=Tensor[(525), int16] */;
  %356 = reshape(%354, newshape=[15]) /* ty=Tensor[(15), float32] */;
  %357 = reshape(%355, newshape=[1, 525]) /* ty=Tensor[(1, 525), int16] */;
  %358 = @func_2206(%356, %357) /* ty=(Tensor[(120), float32], Tensor[(14, 5, 3), bool], Tensor[(15), float32], Tensor[(210), float32], Tensor[(120), uint32], Tensor[(5, 15, 7), int64], Tensor[(1, 525), int16], Tensor[(120), float32]) */;
  %359 = %337.0;
  %360 = @func_2891() /* ty=Tensor[(120), float32] */;
  %361 = %347.0;
  %362 = %352.1;
  %363 = %358.7;
  (%359, %360, %353, %var_4007, meta[relay.Constant][26] /* ty=Tensor[(1680), float64] */, %361, meta[relay.Constant][27] /* ty=Tensor[(48), float64] */, %362, %363, %var_4058)
}

def @func_3576() -> Tensor[(120), float32] {
  %364 = @func_3381() /* ty=(Tensor[(120), float32],) */;
  %364.0
}

def @func_8224() -> (Tensor[(2, ?, 16), float32],) {
  %365 = @func_4562() /* ty=(Tensor[(120), float32], Tensor[(2, ?, 16), float32], Tensor[(32), float32]) */;
  %366 = %365.1;
  (%366,)
}

def @func_7249() -> Tensor[(120), float32] {
  %367 = @func_7078() /* ty=(Tensor[(120), float32],) */;
  %367.0
}

def @func_2632(%var_2559: Tensor[(1680), float64], %var_2600: Tensor[(1680), float64]) -> (Tensor[(120), float32], Tensor[(525), int16], Tensor[(15), int16], Tensor[(525), int16], Tensor[(6, 4, 2), float64], Tensor[(48), float64], Tensor[(120), uint32], Tensor[(1680), bool]) {
  %368 = @func_2292() /* ty=(Tensor[(120), float32],) */;
  %369 = cast(%var_2559, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %370 = cast(meta[relay.Constant][28] /* ty=Tensor[(15), int16] */, dtype="int16") /* ty=Tensor[(15), int16] */;
  %371 = cast(meta[relay.Constant][29] /* ty=Tensor[(525), int16] */, dtype="int16") /* ty=Tensor[(525), int16] */;
  %372 = cast(%var_2559, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %373 = reshape(%369, newshape=[7, 16, 15]) /* ty=Tensor[(7, 16, 15), float64] */;
  %374 = reshape(%370, newshape=[15]) /* ty=Tensor[(15), int16] */;
  %375 = reshape(%371, newshape=[525]) /* ty=Tensor[(525), int16] */;
  %376 = reshape(%372, newshape=[7, 16, 15]) /* ty=Tensor[(7, 16, 15), float64] */;
  %377 = @func_985(%373, %374, %375, %376) /* ty=(Tensor[(2, 6, 16), bool], Tensor[(192), float32], Tensor[(15), int16], Tensor[(15, 1, 1), int16], Tensor[(525), int16], Tensor[(525), int16], Tensor[(2, 6, 16), bool], Tensor[(2, 6, 16), bool], Tensor[(5, 15, 7), int64], Tensor[(15, 1, 1), int16], Tensor[(525), int16], Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64], Tensor[(7, 16, 15), uint8], Tensor[(15, 1, 1), int16], Tensor[(2, 6, 16), bool], Tensor[(7, 16, 15), int64], Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(7, 16, 15), float64], Tensor[(7, 16, 15), float32], Tensor[(15, 1, 1), int16]) */;
  %378 = cast(meta[relay.Constant][30] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %379 = cast(meta[relay.Constant][30] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %380 = reshape(%378, newshape=[6, 4, 2]) /* ty=Tensor[(6, 4, 2), float64] */;
  %381 = reshape(%379, newshape=[6, 4, 2]) /* ty=Tensor[(6, 4, 2), float64] */;
  %382 = @func_1395(%380, %381) /* ty=(Tensor[(6, 4, 2), float64], Tensor[(6, 4, 2), float64]) */;
  %383 = %368.0;
  %384 = cast(%383, dtype="float32") /* ty=Tensor[(120), float32] */;
  %385 = reshape(%384, newshape=[120]) /* ty=Tensor[(120), float32] */;
  %386 = cast(%var_2600, dtype="bool") /* ty=Tensor[(1680), bool] */;
  %387 = shape_of(%var_2559, dtype="int32") /* ty=Tensor[(1), int32] */;
  %388 = cast(%var_2559, dtype="bool") /* ty=Tensor[(1680), bool] */;
  %389 = dyn.reshape(%386, %387, newshape=[]) /* ty=Tensor[(?), bool] */;
  %390 = %377.10;
  %391 = %382.0;
  %392 = @func_2018(%385) /* ty=Tensor[(120), uint32] */;
  %393 = not_equal(%388, %389) /* ty=Tensor[(1680), bool] */;
  (%383, %390, meta[relay.Constant][28] /* ty=Tensor[(15), int16] */, meta[relay.Constant][29] /* ty=Tensor[(525), int16] */, %391, meta[relay.Constant][30] /* ty=Tensor[(48), float64] */, %392, %393)
}

def @func_2145() -> (Tensor[(120), float32],) {
  %394 = @func_1670() /* ty=(Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(5, 4, 6), float32]) */;
  %395 = %394.1;
  (%395,)
}

def @func_3869() -> (Tensor[(16, 16), float32], Tensor[(16, 16), float32], Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(120), float32], Tensor[(120), float32], Tensor[(15), float32], Tensor[(525), int16], Tensor[(120), float32], Tensor[(16, 16), float32]) {
  %396 = @func_3695() /* ty=(Tensor[(120), float32], Tensor[(16, 16), float32]) */;
  %397 = @func_1670() /* ty=(Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(5, 4, 6), float32]) */;
  %398 = @func_2809() /* ty=(Tensor[(120), float32],) */;
  %399 = cast(meta[relay.Constant][31] /* ty=Tensor[(15), float32] */, dtype="float32") /* ty=Tensor[(15), float32] */;
  %400 = cast(meta[relay.Constant][32] /* ty=Tensor[(525), int16] */, dtype="int16") /* ty=Tensor[(525), int16] */;
  %401 = reshape(%399, newshape=[15]) /* ty=Tensor[(15), float32] */;
  %402 = reshape(%400, newshape=[525]) /* ty=Tensor[(525), int16] */;
  %403 = @func_3179(%401, %402) /* ty=(Tensor[(120), float32], Tensor[(120), float32], Tensor[(15), float32], Tensor[(525), int16], Tensor[(5, 4, 6), float32], Tensor[(600), float32], Tensor[(15), int16]) */;
  %404 = cast(meta[relay.Constant][31] /* ty=Tensor[(15), float32] */, dtype="float32") /* ty=Tensor[(15), float32] */;
  %405 = cast(meta[relay.Constant][32] /* ty=Tensor[(525), int16] */, dtype="int16") /* ty=Tensor[(525), int16] */;
  %406 = reshape(%404, newshape=[15]) /* ty=Tensor[(15), float32] */;
  %407 = reshape(%405, newshape=[525]) /* ty=Tensor[(525), int16] */;
  %408 = @func_3179(%406, %407) /* ty=(Tensor[(120), float32], Tensor[(120), float32], Tensor[(15), float32], Tensor[(525), int16], Tensor[(5, 4, 6), float32], Tensor[(600), float32], Tensor[(15), int16]) */;
  %409 = %396.1;
  %410 = @func_3555() /* ty=Tensor[(16, 16), float32] */;
  %411 = %397.0;
  %412 = @func_3539() /* ty=Tensor[(120), float32] */;
  %413 = %398.0;
  %414 = %403.1;
  %415 = %408.0;
  %416 = @func_3555() /* ty=Tensor[(16, 16), float32] */;
  (%409, %410, %411, %412, %413, %414, meta[relay.Constant][31] /* ty=Tensor[(15), float32] */, meta[relay.Constant][32] /* ty=Tensor[(525), int16] */, %415, %416)
}

def @func_5046() -> (Tensor[(120), float32],) {
  %417 = @func_2145() /* ty=(Tensor[(120), float32],) */;
  %418 = %417.0;
  (%418,)
}

def @func_7036(%var_7009: Tensor[(6, 5, 4), float64]) -> (Tensor[(6, 5, 4), float64],) {
  %419 = cast(%var_7009, dtype="float64") /* ty=Tensor[(6, 5, 4), float64] */;
  %420 = asin(%419) /* ty=Tensor[(6, 5, 4), float64] */;
  %421 = cast(%420, dtype="float64") /* ty=Tensor[(6, 5, 4), float64] */;
  %422 = atan(%421) /* ty=Tensor[(6, 5, 4), float64] */;
  (%422,)
}

def @func_6205() -> (Tensor[(120), float32],) {
  %423 = @func_2292() /* ty=(Tensor[(120), float32],) */;
  %424 = %423.0;
  (%424,)
}

def @func_1836(%var_1804: Tensor[(1, 2, 9), float32]) -> (Tensor[(1, 2, 9), float32],) {
  %425 = cast(%var_1804, dtype="float32") /* ty=Tensor[(1, 2, 9), float32] */;
  %426 = sigmoid(%425) /* ty=Tensor[(1, 2, 9), float32] */;
  (%426,)
}

def @func_3930(%var_3893: Tensor[(525, 1), int16]) -> (Tensor[(5, 15, 7), int64], Tensor[(600), float32], Tensor[(525, 120), bool], Tensor[(16, 16), float32]) {
  %427 = cast(%var_3893, dtype="int16") /* ty=Tensor[(525, 1), int16] */;
  %428 = cast(meta[relay.Constant][33] /* ty=Tensor[(600), float32] */, dtype="float32") /* ty=Tensor[(600), float32] */;
  %429 = reshape(%427, newshape=[175, 3]) /* ty=Tensor[(175, 3), int16] */;
  %430 = reshape(%428, newshape=[600]) /* ty=Tensor[(600), float32] */;
  %431 = @func_2451(%429, %430) /* ty=(Tensor[(120), float32], Tensor[(210), float32], Tensor[(15), float32], Tensor[(175, 3), int16], Tensor[(5, 15, 7), int64], Tensor[(5, 12, 10), float32], Tensor[(600), float32]) */;
  %432 = @func_3648() /* ty=(Tensor[(120), float32],) */;
  %433 = %432.0;
  %434 = cast(%433, dtype="int32") /* ty=Tensor[(120), int32] */;
  %435 = cast(%var_3893, dtype="int32") /* ty=Tensor[(525, 1), int32] */;
  %436 = bitwise_xor(%434, %435) /* ty=Tensor[(525, 120), int32] */;
  %437 = cast(%433, dtype="bool") /* ty=Tensor[(120), bool] */;
  %438 = cast(%436, dtype="bool") /* ty=Tensor[(525, 120), bool] */;
  %439 = @func_2747() /* ty=(Tensor[(16, 16), float32],) */;
  %440 = %431.4;
  %441 = not_equal(%437, %438) /* ty=Tensor[(525, 120), bool] */;
  %442 = %439.0;
  (%440, meta[relay.Constant][33] /* ty=Tensor[(600), float32] */, %441, %442)
}

def @func_6745(%var_6735: Tensor[(3, 4, 15), float32]) -> (Tensor[(3, 4, 15), float32], Tensor[(3, 4, 15), float32]) {
  %443 = cast(%var_6735, dtype="float32") /* ty=Tensor[(3, 4, 15), float32] */;
  %444 = cast(%var_6735, dtype="float32") /* ty=Tensor[(3, 4, 15), float32] */;
  %445 = acos(%443) /* ty=Tensor[(3, 4, 15), float32] */;
  %446 = erf(%444) /* ty=Tensor[(3, 4, 15), float32] */;
  (%445, %446)
}

def @func_3648() -> (Tensor[(120), float32],) {
  %447 = @func_2891() /* ty=Tensor[(120), float32] */;
  (%447,)
}

def @func_3179(%var_3133: Tensor[(15), float32], %var_3134: Tensor[(525), int16]) -> (Tensor[(120), float32], Tensor[(120), float32], Tensor[(15), float32], Tensor[(525), int16], Tensor[(5, 4, 6), float32], Tensor[(600), float32], Tensor[(15), int16]) {
  %448 = @func_1670() /* ty=(Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(5, 4, 6), float32]) */;
  %449 = cast(%var_3133, dtype="float32") /* ty=Tensor[(15), float32] */;
  %450 = cast(%var_3134, dtype="int16") /* ty=Tensor[(525), int16] */;
  %451 = reshape(%449, newshape=[15]) /* ty=Tensor[(15), float32] */;
  %452 = reshape(%450, newshape=[1, 525]) /* ty=Tensor[(1, 525), int16] */;
  %453 = @func_2206(%451, %452) /* ty=(Tensor[(120), float32], Tensor[(14, 5, 3), bool], Tensor[(15), float32], Tensor[(210), float32], Tensor[(120), uint32], Tensor[(5, 15, 7), int64], Tensor[(1, 525), int16], Tensor[(120), float32]) */;
  %454 = cast(%var_3134, dtype="int16") /* ty=Tensor[(525), int16] */;
  %455 = cast(meta[relay.Constant][34] /* ty=Tensor[(600), float32] */, dtype="float32") /* ty=Tensor[(600), float32] */;
  %456 = reshape(%454, newshape=[1, 525]) /* ty=Tensor[(1, 525), int16] */;
  %457 = reshape(%455, newshape=[12, 50]) /* ty=Tensor[(12, 50), float32] */;
  %458 = @func_1970(%456, %457) /* ty=(Tensor[(120), float32], Tensor[(2, 840), float64], Tensor[(15), int16], Tensor[(5, 12, 10), float32], Tensor[(12, 50), float32], Tensor[(?, 525), bool], Tensor[(5, 15, 7), float64], Tensor[(5, 4, 6), float32]) */;
  %459 = cast(%var_3134, dtype="int16") /* ty=Tensor[(525), int16] */;
  %460 = cast(meta[relay.Constant][34] /* ty=Tensor[(600), float32] */, dtype="float32") /* ty=Tensor[(600), float32] */;
  %461 = reshape(%459, newshape=[1, 525]) /* ty=Tensor[(1, 525), int16] */;
  %462 = reshape(%460, newshape=[12, 50]) /* ty=Tensor[(12, 50), float32] */;
  %463 = @func_1970(%461, %462) /* ty=(Tensor[(120), float32], Tensor[(2, 840), float64], Tensor[(15), int16], Tensor[(5, 12, 10), float32], Tensor[(12, 50), float32], Tensor[(?, 525), bool], Tensor[(5, 15, 7), float64], Tensor[(5, 4, 6), float32]) */;
  %464 = %448.1;
  %465 = %453.7;
  %466 = %458.7;
  %467 = %463.2;
  (%464, %465, %var_3133, %var_3134, %466, meta[relay.Constant][34] /* ty=Tensor[(600), float32] */, %467)
}

def @func_7473() -> (Tensor[(120), float32], Tensor[(6, 5, 4), float64], Tensor[(16, 16), float32]) {
  %468 = @func_5607() /* ty=Tensor[(120), float32] */;
  %469 = cast(%468, dtype="float64") /* ty=Tensor[(120), float64] */;
  %470 = reshape(%469, newshape=[6, 5, 4]) /* ty=Tensor[(6, 5, 4), float64] */;
  %471 = @func_7036(%470) /* ty=(Tensor[(6, 5, 4), float64],) */;
  %472 = @func_6394() /* ty=(Tensor[(16, 16), float32], Tensor[(16, 16), float32]) */;
  %473 = %471.0;
  %474 = %472.1;
  (%468, %473, %474)
}

def @func_5146() -> (Tensor[(120), float32], Tensor[(120), float32], Tensor[(?, 48), bool]) {
  %475 = @func_5102() /* ty=(Tensor[(120), float32],) */;
  %476 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 48), float64] */, dtype="float64") /* ty=Tensor[(1, 48), float64] */;
  %477 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 48), float64] */, dtype="float64") /* ty=Tensor[(1, 48), float64] */;
  %478 = reshape(%476, newshape=[6, 4, 2]) /* ty=Tensor[(6, 4, 2), float64] */;
  %479 = reshape(%477, newshape=[6, 4, 2]) /* ty=Tensor[(6, 4, 2), float64] */;
  %480 = @func_1395(%478, %479) /* ty=(Tensor[(6, 4, 2), float64], Tensor[(6, 4, 2), float64]) */;
  %481 = %480.0;
  %482 = cast(%481, dtype="bool") /* ty=Tensor[(6, 4, 2), bool] */;
  %483 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(1, 48), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %484 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 48), float64] */, dtype="bool") /* ty=Tensor[(1, 48), bool] */;
  %485 = dyn.reshape(%482, %483, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %486 = %475.0;
  %487 = @func_3539() /* ty=Tensor[(120), float32] */;
  %488 = equal(%484, %485) /* ty=Tensor[(?, 48), bool] */;
  (%486, %487, %488)
}

def @func_3381() -> (Tensor[(120), float32],) {
  %489 = @func_2891() /* ty=Tensor[(120), float32] */;
  (%489,)
}

def @func_6596(%var_6591: Tensor[(784), float64]) -> (Tensor[(5, 4, 6), uint16], Tensor[(5, 4, 6), uint32], Tensor[(14, 14, 4), float32], Tensor[(784), float64]) {
  %490 = @func_1670() /* ty=(Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(5, 4, 6), float32]) */;
  %491 = %490.2;
  %492 = cast(meta[relay.Constant][36] /* ty=Tensor[(5, 4, 6), float32] */, dtype="float64") /* ty=Tensor[(5, 4, 6), float64] */;
  %493 = shape_of(%491, dtype="int32") /* ty=Tensor[(3), int32] */;
  %494 = cast(%491, dtype="float64") /* ty=Tensor[(5, 4, 6), float64] */;
  %495 = dyn.reshape(%492, %493, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %496 = divide(%494, %495) /* ty=Tensor[(5, 4, 6), float64] */;
  %497 = cast(meta[relay.Constant][37] /* ty=Tensor[(5, 4, 6), float64] */, dtype="uint32") /* ty=Tensor[(5, 4, 6), uint32] */;
  %498 = shape_of(%496, dtype="int32") /* ty=Tensor[(3), int32] */;
  %499 = cast(%496, dtype="uint32") /* ty=Tensor[(5, 4, 6), uint32] */;
  %500 = dyn.reshape(%497, %498, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %501 = minimum(%499, %500) /* ty=Tensor[(5, 4, 6), uint32] */;
  %502 = cast(%496, dtype="uint16") /* ty=Tensor[(5, 4, 6), uint16] */;
  %503 = shape_of(%501, dtype="int32") /* ty=Tensor[(3), int32] */;
  %504 = cast(%501, dtype="uint16") /* ty=Tensor[(5, 4, 6), uint16] */;
  %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %506 = cast(meta[relay.Constant][38] /* ty=Tensor[(5, 4, 6), float64] */, dtype="uint32") /* ty=Tensor[(5, 4, 6), uint32] */;
  %507 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(5, 4, 6), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %508 = cast(meta[relay.Constant][37] /* ty=Tensor[(5, 4, 6), float64] */, dtype="uint32") /* ty=Tensor[(5, 4, 6), uint32] */;
  %509 = dyn.reshape(%506, %507, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %510 = cast(%var_6591, dtype="float64") /* ty=Tensor[(784), float64] */;
  %511 = reshape(%510, newshape=[14, 14, 4]) /* ty=Tensor[(14, 14, 4), float64] */;
  %512 = @func_3762(%511) /* ty=(Tensor[(120), float32], Tensor[(14, 14, 4), float32]) */;
  %513 = maximum(%504, %505) /* ty=Tensor[(5, 4, 6), uint16] */;
  %514 = add(%508, %509) /* ty=Tensor[(5, 4, 6), uint32] */;
  %515 = %512.1;
  (%513, %514, %515, %var_6591)
}

def @func_6663() -> (Tensor[(120), float32],) {
  %516 = @func_3539() /* ty=Tensor[(120), float32] */;
  (%516,)
}

def @func_7890() -> Tensor[(120), float32] {
  %517 = @func_5757() /* ty=(Tensor[(120), float32],) */;
  %517.0
}

def @func_8468() -> (Tensor[(16, 16), float32],) {
  %518 = @func_3555() /* ty=Tensor[(16, 16), float32] */;
  (%518,)
}

def @func_4448() -> (Tensor[(16, 16), float32],) {
  %519 = @func_3869() /* ty=(Tensor[(16, 16), float32], Tensor[(16, 16), float32], Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(120), float32], Tensor[(120), float32], Tensor[(15), float32], Tensor[(525), int16], Tensor[(120), float32], Tensor[(16, 16), float32]) */;
  %520 = %519.1;
  (%520,)
}

def @func_2676(%var_2667: Tensor[(1680), float64], %var_2668: Tensor[(15), int16], %var_2673: Tensor[(600), float32]) -> (Tensor[(120), float32], Tensor[(6, 4, 2), float64], Tensor[(48), float64], Tensor[(120), uint32], Tensor[(15, 1, 1), int16], Tensor[(1680), float64], Tensor[(15), int16], Tensor[(525), int16], Tensor[(5, 12, 10), float32], Tensor[(600), float32]) {
  %521 = @func_2292() /* ty=(Tensor[(120), float32],) */;
  %522 = cast(meta[relay.Constant][39] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %523 = cast(meta[relay.Constant][39] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %524 = reshape(%522, newshape=[6, 4, 2]) /* ty=Tensor[(6, 4, 2), float64] */;
  %525 = reshape(%523, newshape=[6, 4, 2]) /* ty=Tensor[(6, 4, 2), float64] */;
  %526 = @func_1395(%524, %525) /* ty=(Tensor[(6, 4, 2), float64], Tensor[(6, 4, 2), float64]) */;
  %527 = %521.0;
  %528 = cast(%527, dtype="float32") /* ty=Tensor[(120), float32] */;
  %529 = reshape(%528, newshape=[120]) /* ty=Tensor[(120), float32] */;
  %530 = cast(%var_2667, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %531 = cast(%var_2668, dtype="int16") /* ty=Tensor[(15), int16] */;
  %532 = cast(meta[relay.Constant][40] /* ty=Tensor[(525), int16] */, dtype="int16") /* ty=Tensor[(525), int16] */;
  %533 = cast(%var_2667, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %534 = reshape(%530, newshape=[7, 16, 15]) /* ty=Tensor[(7, 16, 15), float64] */;
  %535 = reshape(%531, newshape=[15]) /* ty=Tensor[(15), int16] */;
  %536 = reshape(%532, newshape=[525]) /* ty=Tensor[(525), int16] */;
  %537 = reshape(%533, newshape=[7, 16, 15]) /* ty=Tensor[(7, 16, 15), float64] */;
  %538 = @func_985(%534, %535, %536, %537) /* ty=(Tensor[(2, 6, 16), bool], Tensor[(192), float32], Tensor[(15), int16], Tensor[(15, 1, 1), int16], Tensor[(525), int16], Tensor[(525), int16], Tensor[(2, 6, 16), bool], Tensor[(2, 6, 16), bool], Tensor[(5, 15, 7), int64], Tensor[(15, 1, 1), int16], Tensor[(525), int16], Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64], Tensor[(7, 16, 15), uint8], Tensor[(15, 1, 1), int16], Tensor[(2, 6, 16), bool], Tensor[(7, 16, 15), int64], Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(7, 16, 15), float64], Tensor[(7, 16, 15), float32], Tensor[(15, 1, 1), int16]) */;
  %539 = cast(%var_2673, dtype="float32") /* ty=Tensor[(600), float32] */;
  %540 = reshape(%539, newshape=[5, 12, 10]) /* ty=Tensor[(5, 12, 10), float32] */;
  %541 = @func_1606(%540) /* ty=(Tensor[(5, 12, 10), float32],) */;
  %542 = %526.1;
  %543 = @func_2018(%529) /* ty=Tensor[(120), uint32] */;
  %544 = %538.9;
  %545 = %541.0;
  (%527, %542, meta[relay.Constant][39] /* ty=Tensor[(48), float64] */, %543, %544, %var_2667, %var_2668, meta[relay.Constant][40] /* ty=Tensor[(525), int16] */, %545, %var_2673)
}

def @func_1498(%var_1463: Tensor[(2, 1, 16), float32]) -> Tensor[(2, ?, 16), float32] {
  %546 = cast(%var_1463, dtype="float32") /* ty=Tensor[(2, 1, 16), float32] */;
  %547 = cos(%546) /* ty=Tensor[(2, 1, 16), float32] */;
  %548 = cast(%var_1463, dtype="uint8") /* ty=Tensor[(2, 1, 16), uint8] */;
  %549 = shape_of(%547, dtype="int32") /* ty=Tensor[(3), int32] */;
  %550 = cast(%547, dtype="uint8") /* ty=Tensor[(2, 1, 16), uint8] */;
  %551 = dyn.reshape(%548, %549, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %552 = minimum(%550, %551) /* ty=Tensor[(2, ?, 16), uint8] */;
  %553 = cast(%552, dtype="float32") /* ty=Tensor[(2, ?, 16), float32] */;
  atan(%553) /* ty=Tensor[(2, ?, 16), float32] */
}

def @func_8448() -> Tensor[(16, 16), float32] {
  %554 = @func_2487() /* ty=(Tensor[(16, 16), float32], Tensor[(5, 4, 6), int16]) */;
  %554.0
}

def @func_4711(%var_4595: Tensor[(600), float32], %var_4610: Tensor[(16, 5, 12), float64], %var_4625: Tensor[(15), int16], %var_4636: Tensor[(16, 5, 12), float64]) -> (Tensor[(5, 4, 6), float32], Tensor[(525, 1), int16], Tensor[(600), float32], Tensor[(16, 5, 12), bool], Tensor[(16, 5, 12), uint64], Tensor[(15, 1, 1), int16], Tensor[(192), float32], Tensor[(15), int16], Tensor[(16, 5, 12), bool], Tensor[(9, 5, 9), float32], Tensor[(405), float32]) {
  %555 = cast(meta[relay.Constant][41] /* ty=Tensor[(525, 1), int16] */, dtype="int16") /* ty=Tensor[(525, 1), int16] */;
  %556 = cast(%var_4595, dtype="float32") /* ty=Tensor[(600), float32] */;
  %557 = reshape(%555, newshape=[1, 525]) /* ty=Tensor[(1, 525), int16] */;
  %558 = reshape(%556, newshape=[12, 50]) /* ty=Tensor[(12, 50), float32] */;
  %559 = @func_1970(%557, %558) /* ty=(Tensor[(120), float32], Tensor[(2, 840), float64], Tensor[(15), int16], Tensor[(5, 12, 10), float32], Tensor[(12, 50), float32], Tensor[(?, 525), bool], Tensor[(5, 15, 7), float64], Tensor[(5, 4, 6), float32]) */;
  %560 = cast(meta[relay.Constant][42] /* ty=Tensor[(16, 5, 12), float64] */, dtype="float64") /* ty=Tensor[(16, 5, 12), float64] */;
  %561 = asin(%560) /* ty=Tensor[(16, 5, 12), float64] */;
  %562 = cast(meta[relay.Constant][42] /* ty=Tensor[(16, 5, 12), float64] */, dtype="bool") /* ty=Tensor[(16, 5, 12), bool] */;
  %563 = shape_of(%561, dtype="int32") /* ty=Tensor[(3), int32] */;
  %564 = cast(%561, dtype="bool") /* ty=Tensor[(16, 5, 12), bool] */;
  %565 = dyn.reshape(%562, %563, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %566 = cast(%var_4610, dtype="uint64") /* ty=Tensor[(16, 5, 12), uint64] */;
  %567 = shape_of(%561, dtype="int32") /* ty=Tensor[(3), int32] */;
  %568 = cast(%561, dtype="uint64") /* ty=Tensor[(16, 5, 12), uint64] */;
  %569 = dyn.reshape(%566, %567, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %570 = cast(meta[relay.Constant][43] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %571 = cast(%var_4625, dtype="int16") /* ty=Tensor[(15), int16] */;
  %572 = reshape(%570, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float32] */;
  %573 = reshape(%571, newshape=[5, 3]) /* ty=Tensor[(5, 3), int16] */;
  %574 = @func_682(%572, %573) /* ty=(Tensor[(2, 6, 16), bool], Tensor[(2, 6, 16), float64], Tensor[(15, 1, 1), int16], Tensor[(5, 3), int16], Tensor[(525), int16], Tensor[(2, 6, 16), bool], Tensor[(15, 1, 1), int16]) */;
  %575 = cast(%561, dtype="float32") /* ty=Tensor[(16, 5, 12), float32] */;
  %576 = sinh(%575) /* ty=Tensor[(16, 5, 12), float32] */;
  %577 = cast(%576, dtype="float64") /* ty=Tensor[(16, 5, 12), float64] */;
  %578 = exp(%577) /* ty=Tensor[(16, 5, 12), float64] */;
  %579 = cast(%var_4636, dtype="bool") /* ty=Tensor[(16, 5, 12), bool] */;
  %580 = shape_of(%578, dtype="int32") /* ty=Tensor[(3), int32] */;
  %581 = cast(%578, dtype="bool") /* ty=Tensor[(16, 5, 12), bool] */;
  %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %583 = cast(meta[relay.Constant][44] /* ty=Tensor[(405), float32] */, dtype="float32") /* ty=Tensor[(405), float32] */;
  %584 = reshape(%583, newshape=[9, 5, 9]) /* ty=Tensor[(9, 5, 9), float32] */;
  %585 = @func_3420(%584) /* ty=(Tensor[(9, 5, 9), float32], Tensor[(120), float32]) */;
  %586 = %559.7;
  %587 = logical_or(%564, %565) /* ty=Tensor[(16, 5, 12), bool] */;
  %588 = logical_xor(%568, %569) /* ty=Tensor[(16, 5, 12), uint64] */;
  %589 = %574.6;
  %590 = less(%581, %582) /* ty=Tensor[(16, 5, 12), bool] */;
  %591 = %585.0;
  (%586, meta[relay.Constant][41] /* ty=Tensor[(525, 1), int16] */, %var_4595, %587, %588, %589, meta[relay.Constant][43] /* ty=Tensor[(192), float32] */, %var_4625, %590, %591, meta[relay.Constant][44] /* ty=Tensor[(405), float32] */)
}

def @func_8069() -> Tensor[(16, 16), float32] {
  @func_3555() /* ty=Tensor[(16, 16), float32] */
}

def @func_5418() -> (Tensor[(16, 16), float32],) {
  %592 = @func_2747() /* ty=(Tensor[(16, 16), float32],) */;
  %593 = %592.0;
  (%593,)
}

def @func_6802(%var_6797: Tensor[(15), float32], %var_6799: Tensor[(12, 140), float64], %var_6800: Tensor[(6, 100), float32]) -> (Tensor[(120), float32], Tensor[(15), float32], Tensor[(4, 180), float32], Tensor[(15), float32], Tensor[(3, 6), float32], Tensor[(12, 140), float64], Tensor[(6, 100), float32]) {
  %594 = @func_3381() /* ty=(Tensor[(120), float32],) */;
  %595 = cast(meta[relay.Constant][45] /* ty=Tensor[(4, 180), float32] */, dtype="float32") /* ty=Tensor[(4, 180), float32] */;
  %596 = cast(%var_6797, dtype="float32") /* ty=Tensor[(15), float32] */;
  %597 = cast(meta[relay.Constant][46] /* ty=Tensor[(3, 6), float32] */, dtype="float32") /* ty=Tensor[(3, 6), float32] */;
  %598 = cast(meta[relay.Constant][45] /* ty=Tensor[(4, 180), float32] */, dtype="float64") /* ty=Tensor[(4, 180), float64] */;
  %599 = cast(%var_6799, dtype="float64") /* ty=Tensor[(12, 140), float64] */;
  %600 = cast(%var_6800, dtype="float32") /* ty=Tensor[(6, 100), float32] */;
  %601 = reshape(%595, newshape=[15, 12, 4]) /* ty=Tensor[(15, 12, 4), float32] */;
  %602 = reshape(%596, newshape=[15]) /* ty=Tensor[(15), float32] */;
  %603 = reshape(%597, newshape=[18]) /* ty=Tensor[(18), float32] */;
  %604 = reshape(%598, newshape=[15, 12, 4]) /* ty=Tensor[(15, 12, 4), float64] */;
  %605 = reshape(%599, newshape=[1680]) /* ty=Tensor[(1680), float64] */;
  %606 = reshape(%600, newshape=[600]) /* ty=Tensor[(600), float32] */;
  %607 = @func_3082(%601, %602, %603, %604, %605, %606) /* ty=(Tensor[(5, 4, 6), float32], Tensor[(120), float32], Tensor[(15), float32], Tensor[(1, 525), int16], Tensor[(1, 2, 9), float32], Tensor[(18), float32], Tensor[(16, 16), float32], Tensor[(15, 12, 4), int64], Tensor[(15, 12, 4), uint64], Tensor[(15, 12, 4), float64], Tensor[(600), float32], Tensor[(1680), float64], Tensor[(600), float32]) */;
  %608 = %594.0;
  %609 = %607.2;
  (%608, %609, meta[relay.Constant][45] /* ty=Tensor[(4, 180), float32] */, %var_6797, meta[relay.Constant][46] /* ty=Tensor[(3, 6), float32] */, %var_6799, %var_6800)
}

def @func_7171() -> (Tensor[(120), float64],) {
  %610 = @func_4474() /* ty=(Tensor[(120), float64],) */;
  %611 = %610.0;
  (%611,)
}

def @func_2809() -> (Tensor[(120), float32],) {
  %612 = @func_2145() /* ty=(Tensor[(120), float32],) */;
  %613 = %612.0;
  (%613,)
}

def @func_1041(%var_1013: float64, %var_1014: Tensor[(4, 4, 15), float64], %var_1020: Tensor[(15), int16], %var_1030: Tensor[(525), int16]) -> (Tensor[(4, 4, 15), float64], Tensor[(15, 1, 1), int16], Tensor[(192), float32], Tensor[(15), int16], Tensor[(5, 15, 7), int64], Tensor[(1680), float64], Tensor[(525), int16]) {
  %614 = cast(%var_1013, dtype="float64") /* ty=float64 */;
  %615 = cast(%var_1014, dtype="float64") /* ty=Tensor[(4, 4, 15), float64] */;
  %616 = cast(meta[relay.Constant][47] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %617 = cast(%var_1020, dtype="int16") /* ty=Tensor[(15), int16] */;
  %618 = reshape(%616, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float32] */;
  %619 = reshape(%617, newshape=[5, 3]) /* ty=Tensor[(5, 3), int16] */;
  %620 = @func_682(%618, %619) /* ty=(Tensor[(2, 6, 16), bool], Tensor[(2, 6, 16), float64], Tensor[(15, 1, 1), int16], Tensor[(5, 3), int16], Tensor[(525), int16], Tensor[(2, 6, 16), bool], Tensor[(15, 1, 1), int16]) */;
  %621 = cast(meta[relay.Constant][48] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %622 = cast(%var_1020, dtype="int16") /* ty=Tensor[(15), int16] */;
  %623 = cast(%var_1030, dtype="int16") /* ty=Tensor[(525), int16] */;
  %624 = cast(meta[relay.Constant][48] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %625 = reshape(%621, newshape=[7, 16, 15]) /* ty=Tensor[(7, 16, 15), float64] */;
  %626 = reshape(%622, newshape=[15]) /* ty=Tensor[(15), int16] */;
  %627 = reshape(%623, newshape=[525]) /* ty=Tensor[(525), int16] */;
  %628 = reshape(%624, newshape=[7, 16, 15]) /* ty=Tensor[(7, 16, 15), float64] */;
  %629 = @func_985(%625, %626, %627, %628) /* ty=(Tensor[(2, 6, 16), bool], Tensor[(192), float32], Tensor[(15), int16], Tensor[(15, 1, 1), int16], Tensor[(525), int16], Tensor[(525), int16], Tensor[(2, 6, 16), bool], Tensor[(2, 6, 16), bool], Tensor[(5, 15, 7), int64], Tensor[(15, 1, 1), int16], Tensor[(525), int16], Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64], Tensor[(7, 16, 15), uint8], Tensor[(15, 1, 1), int16], Tensor[(2, 6, 16), bool], Tensor[(7, 16, 15), int64], Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(7, 16, 15), float64], Tensor[(7, 16, 15), float32], Tensor[(15, 1, 1), int16]) */;
  %630 = add(%614, %615) /* ty=Tensor[(4, 4, 15), float64] */;
  %631 = %620.6;
  %632 = %629.12;
  (%630, %631, meta[relay.Constant][47] /* ty=Tensor[(192), float32] */, %var_1020, %632, meta[relay.Constant][48] /* ty=Tensor[(1680), float64] */, %var_1030)
}

def @func_3555() -> Tensor[(16, 16), float32] {
  %633 = @func_1670() /* ty=(Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(5, 4, 6), float32]) */;
  %633.0
}

def @func_3448() -> (Tensor[(120), float32],) {
  %634 = @func_3240() /* ty=(Tensor[(120), float32], Tensor[(120), float32]) */;
  %635 = %634.0;
  (%635,)
}

def @func_4314(%var_4213: Tensor[(11, 6, 12), float64], %var_4283: Tensor[(15), int16]) -> (Tensor[(120), float32], Tensor[(120), float32], Tensor[(5, 4, 6), float32], Tensor[(120), float32], Tensor[(120), float32], Tensor[(784, 1), float64], Tensor[(120), float32], Tensor[(11, 6, 12), float32], Tensor[(2, 6, 16), float64], Tensor[(192), float32], Tensor[(15), int16], Tensor[(15, 1, 1), int16], Tensor[(5, 4, 6), int16]) {
  %636 = @func_3240() /* ty=(Tensor[(120), float32], Tensor[(120), float32]) */;
  %637 = @func_3381() /* ty=(Tensor[(120), float32],) */;
  %638 = @func_1670() /* ty=(Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(5, 4, 6), float32]) */;
  %639 = @func_4198() /* ty=(Tensor[(120), float32],) */;
  %640 = cast(meta[relay.Constant][49] /* ty=Tensor[(784, 1), float64] */, dtype="float64") /* ty=Tensor[(784, 1), float64] */;
  %641 = reshape(%640, newshape=[14, 14, 4]) /* ty=Tensor[(14, 14, 4), float64] */;
  %642 = @func_3762(%641) /* ty=(Tensor[(120), float32], Tensor[(14, 14, 4), float32]) */;
  %643 = @func_3648() /* ty=(Tensor[(120), float32],) */;
  %644 = cast(%var_4213, dtype="float64") /* ty=Tensor[(11, 6, 12), float64] */;
  %645 = tan(%644) /* ty=Tensor[(11, 6, 12), float64] */;
  %646 = cast(%645, dtype="float64") /* ty=Tensor[(11, 6, 12), float64] */;
  %647 = atanh(%646) /* ty=Tensor[(11, 6, 12), float64] */;
  %648 = cast(%647, dtype="float32") /* ty=Tensor[(11, 6, 12), float32] */;
  %649 = cast(meta[relay.Constant][50] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %650 = cast(%var_4283, dtype="int16") /* ty=Tensor[(15), int16] */;
  %651 = reshape(%649, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float32] */;
  %652 = reshape(%650, newshape=[5, 3]) /* ty=Tensor[(5, 3), int16] */;
  %653 = @func_682(%651, %652) /* ty=(Tensor[(2, 6, 16), bool], Tensor[(2, 6, 16), float64], Tensor[(15, 1, 1), int16], Tensor[(5, 3), int16], Tensor[(525), int16], Tensor[(2, 6, 16), bool], Tensor[(15, 1, 1), int16]) */;
  %654 = %653.1;
  %655 = cast(%654, dtype="float32") /* ty=Tensor[(2, 6, 16), float32] */;
  %656 = cast(%var_4283, dtype="int16") /* ty=Tensor[(15), int16] */;
  %657 = reshape(%655, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float32] */;
  %658 = reshape(%656, newshape=[5, 3]) /* ty=Tensor[(5, 3), int16] */;
  %659 = @func_682(%657, %658) /* ty=(Tensor[(2, 6, 16), bool], Tensor[(2, 6, 16), float64], Tensor[(15, 1, 1), int16], Tensor[(5, 3), int16], Tensor[(525), int16], Tensor[(2, 6, 16), bool], Tensor[(15, 1, 1), int16]) */;
  %660 = @func_2487() /* ty=(Tensor[(16, 16), float32], Tensor[(5, 4, 6), int16]) */;
  %661 = %636.1;
  %662 = %637.0;
  %663 = %638.2;
  %664 = %639.0;
  %665 = %642.0;
  %666 = %643.0;
  %667 = acos(%648) /* ty=Tensor[(11, 6, 12), float32] */;
  %668 = %659.2;
  %669 = %660.1;
  (%661, %662, %663, %664, %665, meta[relay.Constant][49] /* ty=Tensor[(784, 1), float64] */, %666, %667, %654, meta[relay.Constant][50] /* ty=Tensor[(192), float32] */, %var_4283, %668, %669)
}

def @func_5102() -> (Tensor[(120), float32],) {
  %670 = @func_3817() /* ty=(Tensor[(120), float32],) */;
  %671 = %670.0;
  (%671,)
}

def @func_6073() -> Tensor[(16, 16), float32] {
  %672 = @func_4448() /* ty=(Tensor[(16, 16), float32],) */;
  %672.0
}

def @func_4346(%var_4327: Tensor[(840, 2), float64], %var_4328: Tensor[(1, 15), int16], %var_4329: Tensor[(525), int16]) -> (Tensor[(120), float32], Tensor[(16, 16), float32], Tensor[(7, 16, 15), uint8], Tensor[(840, 2), float64], Tensor[(1, 15), int16], Tensor[(525), bool]) {
  %673 = @func_3869() /* ty=(Tensor[(16, 16), float32], Tensor[(16, 16), float32], Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(120), float32], Tensor[(120), float32], Tensor[(15), float32], Tensor[(525), int16], Tensor[(120), float32], Tensor[(16, 16), float32]) */;
  %674 = cast(%var_4327, dtype="float64") /* ty=Tensor[(840, 2), float64] */;
  %675 = cast(%var_4328, dtype="int16") /* ty=Tensor[(1, 15), int16] */;
  %676 = cast(%var_4329, dtype="int16") /* ty=Tensor[(525), int16] */;
  %677 = cast(%var_4327, dtype="float64") /* ty=Tensor[(840, 2), float64] */;
  %678 = reshape(%674, newshape=[7, 16, 15]) /* ty=Tensor[(7, 16, 15), float64] */;
  %679 = reshape(%675, newshape=[15]) /* ty=Tensor[(15), int16] */;
  %680 = reshape(%676, newshape=[525]) /* ty=Tensor[(525), int16] */;
  %681 = reshape(%677, newshape=[7, 16, 15]) /* ty=Tensor[(7, 16, 15), float64] */;
  %682 = @func_985(%678, %679, %680, %681) /* ty=(Tensor[(2, 6, 16), bool], Tensor[(192), float32], Tensor[(15), int16], Tensor[(15, 1, 1), int16], Tensor[(525), int16], Tensor[(525), int16], Tensor[(2, 6, 16), bool], Tensor[(2, 6, 16), bool], Tensor[(5, 15, 7), int64], Tensor[(15, 1, 1), int16], Tensor[(525), int16], Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64], Tensor[(7, 16, 15), uint8], Tensor[(15, 1, 1), int16], Tensor[(2, 6, 16), bool], Tensor[(7, 16, 15), int64], Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(7, 16, 15), float64], Tensor[(7, 16, 15), float32], Tensor[(15, 1, 1), int16]) */;
  %683 = cast(meta[relay.Constant][51] /* ty=Tensor[(525), int16] */, dtype="bool") /* ty=Tensor[(525), bool] */;
  %684 = shape_of(%var_4329, dtype="int32") /* ty=Tensor[(1), int32] */;
  %685 = cast(%var_4329, dtype="bool") /* ty=Tensor[(525), bool] */;
  %686 = dyn.reshape(%683, %684, newshape=[]) /* ty=Tensor[(?), bool] */;
  %687 = @func_3576() /* ty=Tensor[(120), float32] */;
  %688 = %673.2;
  %689 = %682.13;
  %690 = less(%685, %686) /* ty=Tensor[(525), bool] */;
  (%687, %688, %689, %var_4327, %var_4328, %690)
}

def @func_7236() -> (Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(120), float32], Tensor[(120), float64], Tensor[(120), float32]) {
  %691 = @func_1670() /* ty=(Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(5, 4, 6), float32]) */;
  %692 = @func_6274() /* ty=(Tensor[(120), float32], Tensor[(11, 11, 12), int64]) */;
  %693 = @func_5757() /* ty=(Tensor[(120), float32],) */;
  %694 = @func_3240() /* ty=(Tensor[(120), float32], Tensor[(120), float32]) */;
  %695 = %691.0;
  %696 = %692.0;
  %697 = %693.0;
  %698 = @func_2841() /* ty=Tensor[(120), float64] */;
  %699 = %694.0;
  (%695, %696, %697, %698, %699)
}

def @func_5933() -> Tensor[(120), float64] {
  @func_2841() /* ty=Tensor[(120), float64] */
}

def @func_4562() -> (Tensor[(120), float32], Tensor[(2, ?, 16), float32], Tensor[(32), float32]) {
  %700 = @func_4198() /* ty=(Tensor[(120), float32],) */;
  %701 = cast(meta[relay.Constant][52] /* ty=Tensor[(32), float32] */, dtype="float32") /* ty=Tensor[(32), float32] */;
  %702 = reshape(%701, newshape=[2, 1, 16]) /* ty=Tensor[(2, 1, 16), float32] */;
  %703 = %700.0;
  %704 = @func_1498(%702) /* ty=Tensor[(2, ?, 16), float32] */;
  (%703, %704, meta[relay.Constant][52] /* ty=Tensor[(32), float32] */)
}

def @func_3240() -> (Tensor[(120), float32], Tensor[(120), float32]) {
  %705 = @func_2292() /* ty=(Tensor[(120), float32],) */;
  %706 = @func_2145() /* ty=(Tensor[(120), float32],) */;
  %707 = %705.0;
  %708 = %706.0;
  (%707, %708)
}

def @func_8612() -> (Tensor[(120), float32], Tensor[(120), float32]) {
  %709 = @func_4198() /* ty=(Tensor[(120), float32],) */;
  %710 = @func_6663() /* ty=(Tensor[(120), float32],) */;
  %711 = %709.0;
  %712 = %710.0;
  (%711, %712)
}

def @func_5701() -> (Tensor[(120), float32],) {
  %713 = @func_5102() /* ty=(Tensor[(120), float32],) */;
  %714 = %713.0;
  (%714,)
}

def @func_1606(%var_1600: Tensor[(5, 12, 10), float32]) -> (Tensor[(5, 12, 10), float32],) {
  %715 = cast(%var_1600, dtype="float32") /* ty=Tensor[(5, 12, 10), float32] */;
  %716 = shape_of(meta[relay.Constant][53] /* ty=Tensor[(5, 12, 10), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %717 = cast(meta[relay.Constant][53] /* ty=Tensor[(5, 12, 10), float32] */, dtype="float32") /* ty=Tensor[(5, 12, 10), float32] */;
  %718 = dyn.reshape(%715, %716, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %719 = floor_divide(%717, %718) /* ty=Tensor[(5, 12, 10), float32] */;
  (%719,)
}

def @func_6039() -> Tensor[(1, 12, 4), float32] {
  %720 = cast(meta[relay.Constant][54] /* ty=Tensor[(1, 12, 4), float32] */, dtype="float32") /* ty=Tensor[(1, 12, 4), float32] */;
  atanh(%720) /* ty=Tensor[(1, 12, 4), float32] */
}

def @func_3817() -> (Tensor[(120), float32],) {
  %721 = @func_2292() /* ty=(Tensor[(120), float32],) */;
  %722 = %721.0;
  (%722,)
}

def @func_6720() -> Tensor[(2, 15, 5), float64] {
  %723 = cast(meta[relay.Constant][55] /* ty=Tensor[(2, 15, 5), float64] */, dtype="float64") /* ty=Tensor[(2, 15, 5), float64] */;
  log10(%723) /* ty=Tensor[(2, 15, 5), float64] */
}

def @func_9122() -> Tensor[(11, 12, 11), int64] {
  %724 = cast(meta[relay.Constant][57] /* ty=Tensor[(11, 12, 11), int64] */, dtype="int64") /* ty=Tensor[(11, 12, 11), int64] */;
  %725 = shape_of(meta[relay.Constant][56] /* ty=Tensor[(11, 12, 11), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %726 = cast(meta[relay.Constant][56] /* ty=Tensor[(11, 12, 11), int64] */, dtype="int64") /* ty=Tensor[(11, 12, 11), int64] */;
  %727 = dyn.reshape(%724, %725, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  multiply(%726, %727) /* ty=Tensor[(11, 12, 11), int64] */
}

def @func_2451(%var_2394: Tensor[(175, 3), int16], %var_2420: Tensor[(600), float32]) -> (Tensor[(120), float32], Tensor[(210), float32], Tensor[(15), float32], Tensor[(175, 3), int16], Tensor[(5, 15, 7), int64], Tensor[(5, 12, 10), float32], Tensor[(600), float32]) {
  %728 = @func_2145() /* ty=(Tensor[(120), float32],) */;
  %729 = cast(meta[relay.Constant][58] /* ty=Tensor[(15), float32] */, dtype="float32") /* ty=Tensor[(15), float32] */;
  %730 = cast(%var_2394, dtype="int16") /* ty=Tensor[(175, 3), int16] */;
  %731 = reshape(%729, newshape=[15]) /* ty=Tensor[(15), float32] */;
  %732 = reshape(%730, newshape=[1, 525]) /* ty=Tensor[(1, 525), int16] */;
  %733 = @func_2206(%731, %732) /* ty=(Tensor[(120), float32], Tensor[(14, 5, 3), bool], Tensor[(15), float32], Tensor[(210), float32], Tensor[(120), uint32], Tensor[(5, 15, 7), int64], Tensor[(1, 525), int16], Tensor[(120), float32]) */;
  %734 = cast(meta[relay.Constant][58] /* ty=Tensor[(15), float32] */, dtype="int16") /* ty=Tensor[(15), int16] */;
  %735 = cast(%var_2394, dtype="int16") /* ty=Tensor[(175, 3), int16] */;
  %736 = reshape(%734, newshape=[15, 1, 1]) /* ty=Tensor[(15, 1, 1), int16] */;
  %737 = reshape(%735, newshape=[5, 15, 7]) /* ty=Tensor[(5, 15, 7), int16] */;
  %738 = @func_341(%736, %737) /* ty=(Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64]) */;
  %739 = cast(%var_2420, dtype="float32") /* ty=Tensor[(600), float32] */;
  %740 = reshape(%739, newshape=[5, 12, 10]) /* ty=Tensor[(5, 12, 10), float32] */;
  %741 = @func_1606(%740) /* ty=(Tensor[(5, 12, 10), float32],) */;
  %742 = %728.0;
  %743 = %733.3;
  %744 = %738.1;
  %745 = %741.0;
  (%742, %743, meta[relay.Constant][58] /* ty=Tensor[(15), float32] */, %var_2394, %744, %745, %var_2420)
}

def @func_5607() -> Tensor[(120), float32] {
  %746 = @func_4971() /* ty=(Tensor[(120), float32], Tensor[(120), float32]) */;
  %746.0
}

def @func_3297(%var_3282: Tensor[(2, 4, 10), uint64], %var_3288: Tensor[(12, 140), float64]) -> (Tensor[(2, 4, 10), bool], Tensor[(2, 4, 10), int16], Tensor[(15, 1, 1), int16], Tensor[(12, 140), float64], Tensor[(15), int16], Tensor[(525), int16]) {
  %747 = cast(meta[relay.Constant][60] /* ty=Tensor[(2, 4, 10), uint64] */, dtype="bool") /* ty=Tensor[(2, 4, 10), bool] */;
  %748 = shape_of(meta[relay.Constant][59] /* ty=Tensor[(2, 4, 10), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %749 = cast(meta[relay.Constant][59] /* ty=Tensor[(2, 4, 10), uint64] */, dtype="bool") /* ty=Tensor[(2, 4, 10), bool] */;
  %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %751 = cast(%var_3282, dtype="int16") /* ty=Tensor[(2, 4, 10), int16] */;
  %752 = shape_of(meta[relay.Constant][60] /* ty=Tensor[(2, 4, 10), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %753 = cast(meta[relay.Constant][60] /* ty=Tensor[(2, 4, 10), uint64] */, dtype="int16") /* ty=Tensor[(2, 4, 10), int16] */;
  %754 = dyn.reshape(%751, %752, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %755 = cast(%var_3288, dtype="float64") /* ty=Tensor[(12, 140), float64] */;
  %756 = cast(meta[relay.Constant][61] /* ty=Tensor[(15), int16] */, dtype="int16") /* ty=Tensor[(15), int16] */;
  %757 = cast(meta[relay.Constant][62] /* ty=Tensor[(525), int16] */, dtype="int16") /* ty=Tensor[(525), int16] */;
  %758 = cast(%var_3288, dtype="float64") /* ty=Tensor[(12, 140), float64] */;
  %759 = reshape(%755, newshape=[7, 16, 15]) /* ty=Tensor[(7, 16, 15), float64] */;
  %760 = reshape(%756, newshape=[15]) /* ty=Tensor[(15), int16] */;
  %761 = reshape(%757, newshape=[525]) /* ty=Tensor[(525), int16] */;
  %762 = reshape(%758, newshape=[7, 16, 15]) /* ty=Tensor[(7, 16, 15), float64] */;
  %763 = @func_985(%759, %760, %761, %762) /* ty=(Tensor[(2, 6, 16), bool], Tensor[(192), float32], Tensor[(15), int16], Tensor[(15, 1, 1), int16], Tensor[(525), int16], Tensor[(525), int16], Tensor[(2, 6, 16), bool], Tensor[(2, 6, 16), bool], Tensor[(5, 15, 7), int64], Tensor[(15, 1, 1), int16], Tensor[(525), int16], Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64], Tensor[(7, 16, 15), uint8], Tensor[(15, 1, 1), int16], Tensor[(2, 6, 16), bool], Tensor[(7, 16, 15), int64], Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(7, 16, 15), float64], Tensor[(7, 16, 15), float32], Tensor[(15, 1, 1), int16]) */;
  %764 = greater(%749, %750) /* ty=Tensor[(2, 4, 10), bool] */;
  %765 = right_shift(%753, %754) /* ty=Tensor[(2, 4, 10), int16] */;
  %766 = %763.11;
  (%764, %765, %766, %var_3288, meta[relay.Constant][61] /* ty=Tensor[(15), int16] */, meta[relay.Constant][62] /* ty=Tensor[(525), int16] */)
}

def @func_2206(%var_2170: Tensor[(15), float32], %var_2195: Tensor[(1, 525), int16]) -> (Tensor[(120), float32], Tensor[(14, 5, 3), bool], Tensor[(15), float32], Tensor[(210), float32], Tensor[(120), uint32], Tensor[(5, 15, 7), int64], Tensor[(1, 525), int16], Tensor[(120), float32]) {
  %767 = @func_2145() /* ty=(Tensor[(120), float32],) */;
  %768 = cast(%var_2170, dtype="float32") /* ty=Tensor[(15), float32] */;
  %769 = cast(meta[relay.Constant][63] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %770 = reshape(%768, newshape=[1, 5, 3]) /* ty=Tensor[(1, 5, 3), float32] */;
  %771 = reshape(%769, newshape=[14, 5, 3]) /* ty=Tensor[(14, 5, 3), float32] */;
  %772 = %767.0;
  %773 = cast(%772, dtype="float32") /* ty=Tensor[(120), float32] */;
  %774 = reshape(%773, newshape=[120]) /* ty=Tensor[(120), float32] */;
  %775 = cast(%var_2170, dtype="int16") /* ty=Tensor[(15), int16] */;
  %776 = cast(%var_2195, dtype="int16") /* ty=Tensor[(1, 525), int16] */;
  %777 = reshape(%775, newshape=[15, 1, 1]) /* ty=Tensor[(15, 1, 1), int16] */;
  %778 = reshape(%776, newshape=[5, 15, 7]) /* ty=Tensor[(5, 15, 7), int16] */;
  %779 = @func_341(%777, %778) /* ty=(Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64]) */;
  %780 = @func_2145() /* ty=(Tensor[(120), float32],) */;
  %781 = @func_1735(%770, %771) /* ty=Tensor[(14, 5, 3), bool] */;
  %782 = @func_2018(%774) /* ty=Tensor[(120), uint32] */;
  %783 = %779.1;
  %784 = %780.0;
  (%772, %781, %var_2170, meta[relay.Constant][63] /* ty=Tensor[(210), float32] */, %782, %783, %var_2195, %784)
}

def @func_8298() -> (Tensor[(120), float32],) {
  %785 = @func_3817() /* ty=(Tensor[(120), float32],) */;
  %786 = %785.0;
  (%786,)
}

def @func_2018(%var_2013: Tensor[(120), float32]) -> Tensor[(120), uint32] {
  %787 = @func_1670() /* ty=(Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(5, 4, 6), float32]) */;
  %788 = %787.1;
  %789 = cast(%var_2013, dtype="uint32") /* ty=Tensor[(120), uint32] */;
  %790 = shape_of(%788, dtype="int32") /* ty=Tensor[(1), int32] */;
  %791 = cast(%788, dtype="uint32") /* ty=Tensor[(120), uint32] */;
  %792 = dyn.reshape(%789, %790, newshape=[]) /* ty=Tensor[(?), uint32] */;
  left_shift(%791, %792) /* ty=Tensor[(120), uint32] */
}

def @func_2292() -> (Tensor[(120), float32],) {
  %793 = @func_2145() /* ty=(Tensor[(120), float32],) */;
  %794 = %793.0;
  (%794,)
}

def @func_341(%var_325: Tensor[(15, 1, 1), int16], %var_335: Tensor[(5, 15, 7), int16]) -> (Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64]) {
  %795 = cast(meta[relay.Constant][64] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %796 = cast(%var_325, dtype="int16") /* ty=Tensor[(15, 1, 1), int16] */;
  %797 = cast(meta[relay.Constant][64] /* ty=int16 */, dtype="int64") /* ty=int64 */;
  %798 = cast(%var_335, dtype="int64") /* ty=Tensor[(5, 15, 7), int64] */;
  %799 = right_shift(%795, %796) /* ty=Tensor[(15, 1, 1), int16] */;
  %800 = minimum(%797, %798) /* ty=Tensor[(5, 15, 7), int64] */;
  (%799, %800)
}

def @func_4474() -> (Tensor[(120), float64],) {
  %801 = @func_2841() /* ty=Tensor[(120), float64] */;
  (%801,)
}

def @func_7136(%var_7126: Tensor[(1, 15), float32], %var_7128: Tensor[(1680), float64]) -> (Tensor[(120), float32], Tensor[(1, 2, 9), float32], Tensor[(720), float32], Tensor[(1, 15), float32], Tensor[(1, 18), float32], Tensor[(1680), float64], Tensor[(600), float32]) {
  %802 = @func_3869() /* ty=(Tensor[(16, 16), float32], Tensor[(16, 16), float32], Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(120), float32], Tensor[(120), float32], Tensor[(15), float32], Tensor[(525), int16], Tensor[(120), float32], Tensor[(16, 16), float32]) */;
  %803 = cast(meta[relay.Constant][65] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %804 = cast(%var_7126, dtype="float32") /* ty=Tensor[(1, 15), float32] */;
  %805 = cast(meta[relay.Constant][66] /* ty=Tensor[(1, 18), float32] */, dtype="float32") /* ty=Tensor[(1, 18), float32] */;
  %806 = cast(meta[relay.Constant][65] /* ty=Tensor[(720), float32] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %807 = cast(%var_7128, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %808 = cast(meta[relay.Constant][67] /* ty=Tensor[(600), float32] */, dtype="float32") /* ty=Tensor[(600), float32] */;
  %809 = reshape(%803, newshape=[15, 12, 4]) /* ty=Tensor[(15, 12, 4), float32] */;
  %810 = reshape(%804, newshape=[15]) /* ty=Tensor[(15), float32] */;
  %811 = reshape(%805, newshape=[18]) /* ty=Tensor[(18), float32] */;
  %812 = reshape(%806, newshape=[15, 12, 4]) /* ty=Tensor[(15, 12, 4), float64] */;
  %813 = reshape(%807, newshape=[1680]) /* ty=Tensor[(1680), float64] */;
  %814 = reshape(%808, newshape=[600]) /* ty=Tensor[(600), float32] */;
  %815 = @func_3082(%809, %810, %811, %812, %813, %814) /* ty=(Tensor[(5, 4, 6), float32], Tensor[(120), float32], Tensor[(15), float32], Tensor[(1, 525), int16], Tensor[(1, 2, 9), float32], Tensor[(18), float32], Tensor[(16, 16), float32], Tensor[(15, 12, 4), int64], Tensor[(15, 12, 4), uint64], Tensor[(15, 12, 4), float64], Tensor[(600), float32], Tensor[(1680), float64], Tensor[(600), float32]) */;
  %816 = %802.5;
  %817 = %815.4;
  (%816, %817, meta[relay.Constant][65] /* ty=Tensor[(720), float32] */, %var_7126, meta[relay.Constant][66] /* ty=Tensor[(1, 18), float32] */, %var_7128, meta[relay.Constant][67] /* ty=Tensor[(600), float32] */)
}

def @func_3420(%var_3415: Tensor[(9, 5, 9), float32]) -> (Tensor[(9, 5, 9), float32], Tensor[(120), float32]) {
  %818 = cast(%var_3415, dtype="float32") /* ty=Tensor[(9, 5, 9), float32] */;
  %819 = @func_3381() /* ty=(Tensor[(120), float32],) */;
  %820 = atanh(%818) /* ty=Tensor[(9, 5, 9), float32] */;
  %821 = %819.0;
  (%820, %821)
}

def @func_5277(%var_5229: float64, %var_5230: Tensor[(24, 10), float64], %var_5268: Tensor[(525), float32]) -> (float64, Tensor[(24, 10), float64], Tensor[(15, 1), int16], Tensor[(525), float64], Tensor[(525), float32], Tensor[(525), bool]) {
  %822 = @func_3869() /* ty=(Tensor[(16, 16), float32], Tensor[(16, 16), float32], Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(120), float32], Tensor[(120), float32], Tensor[(15), float32], Tensor[(525), int16], Tensor[(120), float32], Tensor[(16, 16), float32]) */;
  %823 = %822.7;
  %824 = cast(meta[relay.Constant][69] /* ty=Tensor[(525), int16] */, dtype="float64") /* ty=Tensor[(525), float64] */;
  %825 = shape_of(%823, dtype="int32") /* ty=Tensor[(1), int32] */;
  %826 = cast(%823, dtype="float64") /* ty=Tensor[(525), float64] */;
  %827 = dyn.reshape(%824, %825, newshape=[]) /* ty=Tensor[(?), float64] */;
  %828 = cast(%823, dtype="float32") /* ty=Tensor[(525), float32] */;
  %829 = shape_of(meta[relay.Constant][69] /* ty=Tensor[(525), int16] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %830 = cast(meta[relay.Constant][69] /* ty=Tensor[(525), int16] */, dtype="float32") /* ty=Tensor[(525), float32] */;
  %831 = dyn.reshape(%828, %829, newshape=[]) /* ty=Tensor[(?), float32] */;
  %832 = cast(%var_5229, dtype="float64") /* ty=float64 */;
  %833 = cast(%var_5230, dtype="float64") /* ty=Tensor[(24, 10), float64] */;
  %834 = cast(meta[relay.Constant][68] /* ty=Tensor[(15, 1), int16] */, dtype="int16") /* ty=Tensor[(15, 1), int16] */;
  %835 = cast(%823, dtype="int16") /* ty=Tensor[(525), int16] */;
  %836 = reshape(%832, newshape=[]) /* ty=float64 */;
  %837 = reshape(%833, newshape=[4, 4, 15]) /* ty=Tensor[(4, 4, 15), float64] */;
  %838 = reshape(%834, newshape=[15]) /* ty=Tensor[(15), int16] */;
  %839 = reshape(%835, newshape=[525]) /* ty=Tensor[(525), int16] */;
  %840 = @func_1041(%836, %837, %838, %839) /* ty=(Tensor[(4, 4, 15), float64], Tensor[(15, 1, 1), int16], Tensor[(192), float32], Tensor[(15), int16], Tensor[(5, 15, 7), int64], Tensor[(1680), float64], Tensor[(525), int16]) */;
  %841 = %840.6;
  %842 = cast(%841, dtype="float32") /* ty=Tensor[(525), float32] */;
  %843 = cos(%842) /* ty=Tensor[(525), float32] */;
  %844 = cast(%var_5268, dtype="bool") /* ty=Tensor[(525), bool] */;
  %845 = shape_of(%843, dtype="int32") /* ty=Tensor[(1), int32] */;
  %846 = cast(%843, dtype="bool") /* ty=Tensor[(525), bool] */;
  %847 = dyn.reshape(%844, %845, newshape=[]) /* ty=Tensor[(?), bool] */;
  %848 = power(%826, %827) /* ty=Tensor[(525), float64] */;
  %849 = divide(%830, %831) /* ty=Tensor[(525), float32] */;
  %850 = greater_equal(%846, %847) /* ty=Tensor[(525), bool] */;
  (%var_5229, %var_5230, meta[relay.Constant][68] /* ty=Tensor[(15, 1), int16] */, %848, %849, %850)
}

def @func_1395(%var_1335: Tensor[(6, 4, 2), float64], %var_1341: Tensor[(6, 4, 2), float64]) -> (Tensor[(6, 4, 2), float64], Tensor[(6, 4, 2), float64]) {
  %851 = cast(%var_1335, dtype="float64") /* ty=Tensor[(6, 4, 2), float64] */;
  %852 = cast(%var_1341, dtype="float64") /* ty=Tensor[(6, 4, 2), float64] */;
  %853 = shape_of(%var_1335, dtype="int32") /* ty=Tensor[(3), int32] */;
  %854 = cast(%var_1335, dtype="float64") /* ty=Tensor[(6, 4, 2), float64] */;
  %855 = dyn.reshape(%852, %853, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %856 = asin(%851) /* ty=Tensor[(6, 4, 2), float64] */;
  %857 = mod(%854, %855) /* ty=Tensor[(6, 4, 2), float64] */;
  (%856, %857)
}

def @func_2747() -> (Tensor[(16, 16), float32],) {
  %858 = @func_2487() /* ty=(Tensor[(16, 16), float32], Tensor[(5, 4, 6), int16]) */;
  %859 = %858.0;
  (%859,)
}

def @func_6752() -> Tensor[(120), float32] {
  %860 = @func_5102() /* ty=(Tensor[(120), float32],) */;
  %860.0
}

def @func_5692() -> (Tensor[(16, 16), float32],) {
  %861 = @func_2487() /* ty=(Tensor[(16, 16), float32], Tensor[(5, 4, 6), int16]) */;
  %862 = %861.0;
  (%862,)
}

def @func_5555(%var_5536: Tensor[(840), float32], %var_5537: Tensor[(15), float32]) -> (Tensor[(120), float32], Tensor[(14, 5, 3), bool], Tensor[(840), float32], Tensor[(15), float32], Tensor[(210), float32], Tensor[(3, 9, 5), uint8], Tensor[(45, 3), bool]) {
  %863 = cast(%var_5536, dtype="float32") /* ty=Tensor[(840), float32] */;
  %864 = cast(%var_5537, dtype="float32") /* ty=Tensor[(15), float32] */;
  %865 = cast(meta[relay.Constant][70] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %866 = reshape(%863, newshape=[12, 14, 5]) /* ty=Tensor[(12, 14, 5), float32] */;
  %867 = reshape(%864, newshape=[15]) /* ty=Tensor[(15), float32] */;
  %868 = reshape(%865, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %869 = @func_4908(%866, %867, %868) /* ty=(Tensor[(12, 14, 5), float32], Tensor[(12, 14, 5), bool], Tensor[(32), float32], Tensor[(14, 5, 3), bool], Tensor[(15), float32], Tensor[(210), float32]) */;
  %870 = cast(meta[relay.Constant][71] /* ty=Tensor[(45, 3), bool] */, dtype="bool") /* ty=Tensor[(45, 3), bool] */;
  %871 = reshape(%870, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), bool] */;
  %872 = @func_4122() /* ty=Tensor[(120), float32] */;
  %873 = %869.3;
  %874 = @func_1165(%871) /* ty=Tensor[(3, 9, 5), uint8] */;
  (%872, %873, %var_5536, %var_5537, meta[relay.Constant][70] /* ty=Tensor[(210), float32] */, %874, meta[relay.Constant][71] /* ty=Tensor[(45, 3), bool] */)
}

def @func_7836() -> (Tensor[(120), float32], Tensor[(16, 16), float32], Tensor[(2, 24), uint32]) {
  %875 = @func_5146() /* ty=(Tensor[(120), float32], Tensor[(120), float32], Tensor[(?, 48), bool]) */;
  %876 = cast(meta[relay.Constant][72] /* ty=Tensor[(2, 24), float64] */, dtype="float64") /* ty=Tensor[(2, 24), float64] */;
  %877 = reshape(%876, newshape=[4, 12]) /* ty=Tensor[(4, 12), float64] */;
  %878 = @func_1893(%877) /* ty=(Tensor[(16, 16), float32], Tensor[(6, 4, 2), float64], Tensor[(4, 12), float64]) */;
  %879 = cast(meta[relay.Constant][72] /* ty=Tensor[(2, 24), float64] */, dtype="float32") /* ty=Tensor[(2, 24), float32] */;
  %880 = tan(%879) /* ty=Tensor[(2, 24), float32] */;
  %881 = cast(meta[relay.Constant][72] /* ty=Tensor[(2, 24), float64] */, dtype="uint32") /* ty=Tensor[(2, 24), uint32] */;
  %882 = shape_of(%880, dtype="int32") /* ty=Tensor[(2), int32] */;
  %883 = cast(%880, dtype="uint32") /* ty=Tensor[(2, 24), uint32] */;
  %884 = dyn.reshape(%881, %882, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %885 = %875.1;
  %886 = %878.0;
  %887 = left_shift(%883, %884) /* ty=Tensor[(2, 24), uint32] */;
  (%885, %886, %887)
}

def @func_1970(%var_1921: Tensor[(1, 525), int16], %var_1932: Tensor[(12, 50), float32]) -> (Tensor[(120), float32], Tensor[(2, 840), float64], Tensor[(15), int16], Tensor[(5, 12, 10), float32], Tensor[(12, 50), float32], Tensor[(?, 525), bool], Tensor[(5, 15, 7), float64], Tensor[(5, 4, 6), float32]) {
  %888 = @func_1670() /* ty=(Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(5, 4, 6), float32]) */;
  %889 = cast(%var_1932, dtype="float32") /* ty=Tensor[(12, 50), float32] */;
  %890 = reshape(%889, newshape=[5, 12, 10]) /* ty=Tensor[(5, 12, 10), float32] */;
  %891 = @func_1606(%890) /* ty=(Tensor[(5, 12, 10), float32],) */;
  %892 = cast(meta[relay.Constant][73] /* ty=Tensor[(2, 840), float64] */, dtype="float64") /* ty=Tensor[(2, 840), float64] */;
  %893 = cast(meta[relay.Constant][74] /* ty=Tensor[(15), int16] */, dtype="int16") /* ty=Tensor[(15), int16] */;
  %894 = cast(%var_1921, dtype="int16") /* ty=Tensor[(1, 525), int16] */;
  %895 = cast(meta[relay.Constant][73] /* ty=Tensor[(2, 840), float64] */, dtype="float64") /* ty=Tensor[(2, 840), float64] */;
  %896 = reshape(%892, newshape=[7, 16, 15]) /* ty=Tensor[(7, 16, 15), float64] */;
  %897 = reshape(%893, newshape=[15]) /* ty=Tensor[(15), int16] */;
  %898 = reshape(%894, newshape=[525]) /* ty=Tensor[(525), int16] */;
  %899 = reshape(%895, newshape=[7, 16, 15]) /* ty=Tensor[(7, 16, 15), float64] */;
  %900 = @func_985(%896, %897, %898, %899) /* ty=(Tensor[(2, 6, 16), bool], Tensor[(192), float32], Tensor[(15), int16], Tensor[(15, 1, 1), int16], Tensor[(525), int16], Tensor[(525), int16], Tensor[(2, 6, 16), bool], Tensor[(2, 6, 16), bool], Tensor[(5, 15, 7), int64], Tensor[(15, 1, 1), int16], Tensor[(525), int16], Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64], Tensor[(7, 16, 15), uint8], Tensor[(15, 1, 1), int16], Tensor[(2, 6, 16), bool], Tensor[(7, 16, 15), int64], Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(7, 16, 15), float64], Tensor[(7, 16, 15), float32], Tensor[(15, 1, 1), int16]) */;
  %901 = %900.19;
  %902 = cast(%var_1921, dtype="bool") /* ty=Tensor[(1, 525), bool] */;
  %903 = shape_of(%901, dtype="int32") /* ty=Tensor[(3), int32] */;
  %904 = cast(%901, dtype="bool") /* ty=Tensor[(5, 15, 7), bool] */;
  %905 = dyn.reshape(%902, %903, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %906 = greater_equal(%904, %905) /* ty=Tensor[(5, 15, 7), bool] */;
  %907 = cast(%906, dtype="bool") /* ty=Tensor[(5, 15, 7), bool] */;
  %908 = shape_of(%var_1921, dtype="int32") /* ty=Tensor[(2), int32] */;
  %909 = cast(%var_1921, dtype="bool") /* ty=Tensor[(1, 525), bool] */;
  %910 = dyn.reshape(%907, %908, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %911 = cast(%var_1921, dtype="float64") /* ty=Tensor[(1, 525), float64] */;
  %912 = shape_of(%901, dtype="int32") /* ty=Tensor[(3), int32] */;
  %913 = cast(%901, dtype="float64") /* ty=Tensor[(5, 15, 7), float64] */;
  %914 = dyn.reshape(%911, %912, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %915 = @func_1670() /* ty=(Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(5, 4, 6), float32]) */;
  %916 = %888.1;
  %917 = %891.0;
  %918 = less(%909, %910) /* ty=Tensor[(?, 525), bool] */;
  %919 = mod(%913, %914) /* ty=Tensor[(5, 15, 7), float64] */;
  %920 = %915.2;
  (%916, meta[relay.Constant][73] /* ty=Tensor[(2, 840), float64] */, meta[relay.Constant][74] /* ty=Tensor[(15), int16] */, %917, %var_1932, %918, %919, %920)
}

def @func_1893(%var_1860: Tensor[(4, 12), float64]) -> (Tensor[(16, 16), float32], Tensor[(6, 4, 2), float64], Tensor[(4, 12), float64]) {
  %921 = @func_1670() /* ty=(Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(5, 4, 6), float32]) */;
  %922 = cast(%var_1860, dtype="float64") /* ty=Tensor[(4, 12), float64] */;
  %923 = cast(%var_1860, dtype="float64") /* ty=Tensor[(4, 12), float64] */;
  %924 = reshape(%922, newshape=[6, 4, 2]) /* ty=Tensor[(6, 4, 2), float64] */;
  %925 = reshape(%923, newshape=[6, 4, 2]) /* ty=Tensor[(6, 4, 2), float64] */;
  %926 = @func_1395(%924, %925) /* ty=(Tensor[(6, 4, 2), float64], Tensor[(6, 4, 2), float64]) */;
  %927 = %921.0;
  %928 = %926.0;
  (%927, %928, %var_1860)
}

def @func_6162() -> (Tensor[(120), float32], Tensor[(11, 11, 12), int64], Tensor[(15), float32]) {
  %929 = cast(meta[relay.Constant][75] /* ty=Tensor[(15), float32] */, dtype="float32") /* ty=Tensor[(15), float32] */;
  %930 = reshape(%929, newshape=[15]) /* ty=Tensor[(15), float32] */;
  %931 = @func_5202(%930) /* ty=(Tensor[(11, 11, 12), int64], Tensor[(11, 11, 12), float32], Tensor[(120), float32], Tensor[(14, 5, 3), bool], Tensor[(15), float32], Tensor[(210), float32], Tensor[(120), float32]) */;
  %932 = @func_3539() /* ty=Tensor[(120), float32] */;
  %933 = %931.0;
  (%932, %933, meta[relay.Constant][75] /* ty=Tensor[(15), float32] */)
}

def @func_7982() -> (Tensor[(120), float32],) {
  %934 = @func_5701() /* ty=(Tensor[(120), float32],) */;
  %935 = %934.0;
  (%935,)
}

def @func_8169(%var_8127: Tensor[(2, 14, 16), float64], %var_8128: Tensor[(2, 14, 16), float64]) -> (Tensor[(120), float32], Tensor[(120), float64], Tensor[(2, 14, 16), int16], Tensor[(2, 14, 16), float64]) {
  %936 = @func_3869() /* ty=(Tensor[(16, 16), float32], Tensor[(16, 16), float32], Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(120), float32], Tensor[(120), float32], Tensor[(15), float32], Tensor[(525), int16], Tensor[(120), float32], Tensor[(16, 16), float32]) */;
  %937 = cast(%var_8128, dtype="float64") /* ty=Tensor[(2, 14, 16), float64] */;
  %938 = shape_of(%var_8127, dtype="int32") /* ty=Tensor[(3), int32] */;
  %939 = cast(%var_8127, dtype="float64") /* ty=Tensor[(2, 14, 16), float64] */;
  %940 = dyn.reshape(%937, %938, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %941 = subtract(%939, %940) /* ty=Tensor[(2, 14, 16), float64] */;
  %942 = cast(%941, dtype="int16") /* ty=Tensor[(2, 14, 16), int16] */;
  %943 = shape_of(%var_8127, dtype="int32") /* ty=Tensor[(3), int32] */;
  %944 = cast(%var_8127, dtype="int16") /* ty=Tensor[(2, 14, 16), int16] */;
  %945 = dyn.reshape(%942, %943, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %946 = cast(%941, dtype="float64") /* ty=Tensor[(2, 14, 16), float64] */;
  %947 = %936.4;
  %948 = @func_2841() /* ty=Tensor[(120), float64] */;
  %949 = multiply(%944, %945) /* ty=Tensor[(2, 14, 16), int16] */;
  %950 = rsqrt(%946) /* ty=Tensor[(2, 14, 16), float64] */;
  (%947, %948, %949, %950)
}

def @func_1165(%var_1148: Tensor[(3, 9, 5), bool]) -> Tensor[(3, 9, 5), uint8] {
  %951 = cast(meta[relay.Constant][76] /* ty=Tensor[(3, 9, 5), bool] */, dtype="bool") /* ty=Tensor[(3, 9, 5), bool] */;
  %952 = shape_of(%var_1148, dtype="int32") /* ty=Tensor[(3), int32] */;
  %953 = cast(%var_1148, dtype="bool") /* ty=Tensor[(3, 9, 5), bool] */;
  %954 = dyn.reshape(%951, %952, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %955 = logical_or(%953, %954) /* ty=Tensor[(3, 9, 5), bool] */;
  %956 = cast(%955, dtype="uint8") /* ty=Tensor[(3, 9, 5), uint8] */;
  %957 = shape_of(meta[relay.Constant][76] /* ty=Tensor[(3, 9, 5), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %958 = cast(meta[relay.Constant][76] /* ty=Tensor[(3, 9, 5), bool] */, dtype="uint8") /* ty=Tensor[(3, 9, 5), uint8] */;
  %959 = dyn.reshape(%956, %957, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  bitwise_xor(%958, %959) /* ty=Tensor[(3, 9, 5), uint8] */
}

def @func_5757() -> (Tensor[(120), float32],) {
  %960 = @func_3448() /* ty=(Tensor[(120), float32],) */;
  %961 = %960.0;
  (%961,)
}

def @func_8727(%var_8704: Tensor[(208), int8], %var_8705: Tensor[(3328), int8], %var_8706: Tensor[(15), float32]) -> (Tensor[(120), float64], Tensor[(120), float32], Tensor[(208), int8], Tensor[(3328), int8], Tensor[(15), float32], Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(5, 12, 10), float32], Tensor[(60, 10), float32]) {
  %962 = cast(%var_8704, dtype="int8") /* ty=Tensor[(208), int8] */;
  %963 = cast(%var_8705, dtype="int8") /* ty=Tensor[(3328), int8] */;
  %964 = cast(%var_8706, dtype="float32") /* ty=Tensor[(15), float32] */;
  %965 = reshape(%962, newshape=[1, 13, 16]) /* ty=Tensor[(1, 13, 16), int8] */;
  %966 = reshape(%963, newshape=[16, 13, 16]) /* ty=Tensor[(16, 13, 16), int8] */;
  %967 = reshape(%964, newshape=[15]) /* ty=Tensor[(15), float32] */;
  %968 = @func_7783(%965, %966, %967) /* ty=(Tensor[(16, 13, 16), int8], Tensor[(120), float32], Tensor[(15), float32], Tensor[(525), int16]) */;
  %969 = @func_3695() /* ty=(Tensor[(120), float32], Tensor[(16, 16), float32]) */;
  %970 = @func_3381() /* ty=(Tensor[(120), float32],) */;
  %971 = cast(meta[relay.Constant][77] /* ty=Tensor[(60, 10), float32] */, dtype="float32") /* ty=Tensor[(60, 10), float32] */;
  %972 = reshape(%971, newshape=[5, 12, 10]) /* ty=Tensor[(5, 12, 10), float32] */;
  %973 = @func_1606(%972) /* ty=(Tensor[(5, 12, 10), float32],) */;
  %974 = @func_5933() /* ty=Tensor[(120), float64] */;
  %975 = %968.1;
  %976 = %969.1;
  %977 = %970.0;
  %978 = %973.0;
  (%974, %975, %var_8704, %var_8705, %var_8706, %976, %977, %978, meta[relay.Constant][77] /* ty=Tensor[(60, 10), float32] */)
}

def @func_7631() -> (Tensor[(525), int16], Tensor[(120), float32]) {
  %979 = @func_3869() /* ty=(Tensor[(16, 16), float32], Tensor[(16, 16), float32], Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(120), float32], Tensor[(120), float32], Tensor[(15), float32], Tensor[(525), int16], Tensor[(120), float32], Tensor[(16, 16), float32]) */;
  %980 = %979.7;
  %981 = @func_7249() /* ty=Tensor[(120), float32] */;
  (%980, %981)
}

def @func_5735(%var_5719: Tensor[(11, 8, 2), float32]) -> Tensor[(11, 8, 2), uint8] {
  %982 = cast(%var_5719, dtype="float32") /* ty=Tensor[(11, 8, 2), float32] */;
  %983 = atanh(%982) /* ty=Tensor[(11, 8, 2), float32] */;
  %984 = cast(%983, dtype="float32") /* ty=Tensor[(11, 8, 2), float32] */;
  %985 = cos(%984) /* ty=Tensor[(11, 8, 2), float32] */;
  %986 = cast(%var_5719, dtype="uint8") /* ty=Tensor[(11, 8, 2), uint8] */;
  %987 = shape_of(%985, dtype="int32") /* ty=Tensor[(3), int32] */;
  %988 = cast(%985, dtype="uint8") /* ty=Tensor[(11, 8, 2), uint8] */;
  %989 = dyn.reshape(%986, %987, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  add(%988, %989) /* ty=Tensor[(11, 8, 2), uint8] */
}

def @func_7078() -> (Tensor[(120), float32],) {
  %990 = @func_2891() /* ty=Tensor[(120), float32] */;
  (%990,)
}

def @func_985(%var_790: Tensor[(7, 16, 15), float64], %var_795: Tensor[(15), int16], %var_804: Tensor[(525), int16], %var_896: Tensor[(7, 16, 15), float64]) -> (Tensor[(2, 6, 16), bool], Tensor[(192), float32], Tensor[(15), int16], Tensor[(15, 1, 1), int16], Tensor[(525), int16], Tensor[(525), int16], Tensor[(2, 6, 16), bool], Tensor[(2, 6, 16), bool], Tensor[(5, 15, 7), int64], Tensor[(15, 1, 1), int16], Tensor[(525), int16], Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64], Tensor[(7, 16, 15), uint8], Tensor[(15, 1, 1), int16], Tensor[(2, 6, 16), bool], Tensor[(7, 16, 15), int64], Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(7, 16, 15), float64], Tensor[(7, 16, 15), float32], Tensor[(15, 1, 1), int16]) {
  %991 = cast(meta[relay.Constant][78] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %992 = cast(%var_795, dtype="int16") /* ty=Tensor[(15), int16] */;
  %993 = reshape(%991, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float32] */;
  %994 = reshape(%992, newshape=[5, 3]) /* ty=Tensor[(5, 3), int16] */;
  %995 = @func_682(%993, %994) /* ty=(Tensor[(2, 6, 16), bool], Tensor[(2, 6, 16), float64], Tensor[(15, 1, 1), int16], Tensor[(5, 3), int16], Tensor[(525), int16], Tensor[(2, 6, 16), bool], Tensor[(15, 1, 1), int16]) */;
  %996 = cast(%var_795, dtype="int16") /* ty=Tensor[(15), int16] */;
  %997 = cast(%var_804, dtype="int16") /* ty=Tensor[(525), int16] */;
  %998 = reshape(%996, newshape=[15, 1, 1]) /* ty=Tensor[(15, 1, 1), int16] */;
  %999 = reshape(%997, newshape=[5, 15, 7]) /* ty=Tensor[(5, 15, 7), int16] */;
  %1000 = @func_341(%998, %999) /* ty=(Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64]) */;
  %1001 = %995.5;
  %1002 = cast(%1001, dtype="float32") /* ty=Tensor[(2, 6, 16), float32] */;
  %1003 = cast(%var_795, dtype="int16") /* ty=Tensor[(15), int16] */;
  %1004 = reshape(%1002, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float32] */;
  %1005 = reshape(%1003, newshape=[5, 3]) /* ty=Tensor[(5, 3), int16] */;
  %1006 = @func_682(%1004, %1005) /* ty=(Tensor[(2, 6, 16), bool], Tensor[(2, 6, 16), float64], Tensor[(15, 1, 1), int16], Tensor[(5, 3), int16], Tensor[(525), int16], Tensor[(2, 6, 16), bool], Tensor[(15, 1, 1), int16]) */;
  %1007 = cast(meta[relay.Constant][78] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %1008 = %1000.0;
  %1009 = cast(%1008, dtype="int16") /* ty=Tensor[(15, 1, 1), int16] */;
  %1010 = reshape(%1007, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float32] */;
  %1011 = reshape(%1009, newshape=[5, 3]) /* ty=Tensor[(5, 3), int16] */;
  %1012 = @func_682(%1010, %1011) /* ty=(Tensor[(2, 6, 16), bool], Tensor[(2, 6, 16), float64], Tensor[(15, 1, 1), int16], Tensor[(5, 3), int16], Tensor[(525), int16], Tensor[(2, 6, 16), bool], Tensor[(15, 1, 1), int16]) */;
  %1013 = %1012.5;
  %1014 = cast(%1013, dtype="float32") /* ty=Tensor[(2, 6, 16), float32] */;
  %1015 = cast(%var_795, dtype="int16") /* ty=Tensor[(15), int16] */;
  %1016 = reshape(%1014, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float32] */;
  %1017 = reshape(%1015, newshape=[5, 3]) /* ty=Tensor[(5, 3), int16] */;
  %1018 = @func_682(%1016, %1017) /* ty=(Tensor[(2, 6, 16), bool], Tensor[(2, 6, 16), float64], Tensor[(15, 1, 1), int16], Tensor[(5, 3), int16], Tensor[(525), int16], Tensor[(2, 6, 16), bool], Tensor[(15, 1, 1), int16]) */;
  %1019 = cast(%var_795, dtype="int16") /* ty=Tensor[(15), int16] */;
  %1020 = cast(%var_804, dtype="int16") /* ty=Tensor[(525), int16] */;
  %1021 = reshape(%1019, newshape=[15, 1, 1]) /* ty=Tensor[(15, 1, 1), int16] */;
  %1022 = reshape(%1020, newshape=[5, 15, 7]) /* ty=Tensor[(5, 15, 7), int16] */;
  %1023 = @func_341(%1021, %1022) /* ty=(Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64]) */;
  %1024 = cast(%var_795, dtype="int16") /* ty=Tensor[(15), int16] */;
  %1025 = %1006.4;
  %1026 = cast(%1025, dtype="int16") /* ty=Tensor[(525), int16] */;
  %1027 = reshape(%1024, newshape=[15, 1, 1]) /* ty=Tensor[(15, 1, 1), int16] */;
  %1028 = reshape(%1026, newshape=[5, 15, 7]) /* ty=Tensor[(5, 15, 7), int16] */;
  %1029 = @func_341(%1027, %1028) /* ty=(Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64]) */;
  %1030 = cast(meta[relay.Constant][78] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %1031 = cast(%1008, dtype="int16") /* ty=Tensor[(15, 1, 1), int16] */;
  %1032 = reshape(%1030, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float32] */;
  %1033 = reshape(%1031, newshape=[5, 3]) /* ty=Tensor[(5, 3), int16] */;
  %1034 = @func_682(%1032, %1033) /* ty=(Tensor[(2, 6, 16), bool], Tensor[(2, 6, 16), float64], Tensor[(15, 1, 1), int16], Tensor[(5, 3), int16], Tensor[(525), int16], Tensor[(2, 6, 16), bool], Tensor[(15, 1, 1), int16]) */;
  %1035 = cast(meta[relay.Constant][78] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %1036 = %1029.0;
  %1037 = cast(%1036, dtype="int16") /* ty=Tensor[(15, 1, 1), int16] */;
  %1038 = reshape(%1035, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float32] */;
  %1039 = reshape(%1037, newshape=[5, 3]) /* ty=Tensor[(5, 3), int16] */;
  %1040 = @func_682(%1038, %1039) /* ty=(Tensor[(2, 6, 16), bool], Tensor[(2, 6, 16), float64], Tensor[(15, 1, 1), int16], Tensor[(5, 3), int16], Tensor[(525), int16], Tensor[(2, 6, 16), bool], Tensor[(15, 1, 1), int16]) */;
  %1041 = cast(%1036, dtype="int16") /* ty=Tensor[(15, 1, 1), int16] */;
  %1042 = cast(%1025, dtype="int16") /* ty=Tensor[(525), int16] */;
  %1043 = reshape(%1041, newshape=[15, 1, 1]) /* ty=Tensor[(15, 1, 1), int16] */;
  %1044 = reshape(%1042, newshape=[5, 15, 7]) /* ty=Tensor[(5, 15, 7), int16] */;
  %1045 = @func_341(%1043, %1044) /* ty=(Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64]) */;
  %1046 = cast(%var_790, dtype="float64") /* ty=Tensor[(7, 16, 15), float64] */;
  %1047 = asin(%1046) /* ty=Tensor[(7, 16, 15), float64] */;
  %1048 = cast(%1047, dtype="float64") /* ty=Tensor[(7, 16, 15), float64] */;
  %1049 = sinh(%1048) /* ty=Tensor[(7, 16, 15), float64] */;
  %1050 = cast(meta[relay.Constant][79] /* ty=Tensor[(7, 16, 15), float64] */, dtype="bool") /* ty=Tensor[(7, 16, 15), bool] */;
  %1051 = shape_of(%1049, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1052 = cast(%1049, dtype="bool") /* ty=Tensor[(7, 16, 15), bool] */;
  %1053 = dyn.reshape(%1050, %1051, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1054 = logical_and(%1052, %1053) /* ty=Tensor[(7, 16, 15), bool] */;
  %1055 = cast(%1049, dtype="uint8") /* ty=Tensor[(7, 16, 15), uint8] */;
  %1056 = shape_of(%1054, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1057 = cast(%1054, dtype="uint8") /* ty=Tensor[(7, 16, 15), uint8] */;
  %1058 = dyn.reshape(%1055, %1056, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %1059 = cast(%1036, dtype="int16") /* ty=Tensor[(15, 1, 1), int16] */;
  %1060 = %1023.1;
  %1061 = cast(%1060, dtype="int16") /* ty=Tensor[(5, 15, 7), int16] */;
  %1062 = reshape(%1059, newshape=[15, 1, 1]) /* ty=Tensor[(15, 1, 1), int16] */;
  %1063 = reshape(%1061, newshape=[5, 15, 7]) /* ty=Tensor[(5, 15, 7), int16] */;
  %1064 = @func_341(%1062, %1063) /* ty=(Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64]) */;
  %1065 = cast(%1013, dtype="float32") /* ty=Tensor[(2, 6, 16), float32] */;
  %1066 = %1064.0;
  %1067 = cast(%1066, dtype="int16") /* ty=Tensor[(15, 1, 1), int16] */;
  %1068 = reshape(%1065, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float32] */;
  %1069 = reshape(%1067, newshape=[5, 3]) /* ty=Tensor[(5, 3), int16] */;
  %1070 = @func_682(%1068, %1069) /* ty=(Tensor[(2, 6, 16), bool], Tensor[(2, 6, 16), float64], Tensor[(15, 1, 1), int16], Tensor[(5, 3), int16], Tensor[(525), int16], Tensor[(2, 6, 16), bool], Tensor[(15, 1, 1), int16]) */;
  %1071 = cast(%1047, dtype="float64") /* ty=Tensor[(7, 16, 15), float64] */;
  %1072 = asinh(%1071) /* ty=Tensor[(7, 16, 15), float64] */;
  %1073 = cast(%var_896, dtype="int64") /* ty=Tensor[(7, 16, 15), int64] */;
  %1074 = shape_of(%1072, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1075 = cast(%1072, dtype="int64") /* ty=Tensor[(7, 16, 15), int64] */;
  %1076 = dyn.reshape(%1073, %1074, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %1077 = cast(%1036, dtype="int16") /* ty=Tensor[(15, 1, 1), int16] */;
  %1078 = cast(%var_804, dtype="int16") /* ty=Tensor[(525), int16] */;
  %1079 = reshape(%1077, newshape=[15, 1, 1]) /* ty=Tensor[(15, 1, 1), int16] */;
  %1080 = reshape(%1078, newshape=[5, 15, 7]) /* ty=Tensor[(5, 15, 7), int16] */;
  %1081 = @func_341(%1079, %1080) /* ty=(Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64]) */;
  %1082 = cast(%1066, dtype="int16") /* ty=Tensor[(15, 1, 1), int16] */;
  %1083 = cast(%1025, dtype="int16") /* ty=Tensor[(525), int16] */;
  %1084 = reshape(%1082, newshape=[15, 1, 1]) /* ty=Tensor[(15, 1, 1), int16] */;
  %1085 = reshape(%1083, newshape=[5, 15, 7]) /* ty=Tensor[(5, 15, 7), int16] */;
  %1086 = @func_341(%1084, %1085) /* ty=(Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64]) */;
  %1087 = %1081.0;
  %1088 = cast(%1087, dtype="int16") /* ty=Tensor[(15, 1, 1), int16] */;
  %1089 = cast(%1025, dtype="int16") /* ty=Tensor[(525), int16] */;
  %1090 = reshape(%1088, newshape=[15, 1, 1]) /* ty=Tensor[(15, 1, 1), int16] */;
  %1091 = reshape(%1089, newshape=[5, 15, 7]) /* ty=Tensor[(5, 15, 7), int16] */;
  %1092 = @func_341(%1090, %1091) /* ty=(Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64]) */;
  %1093 = cast(%1036, dtype="int16") /* ty=Tensor[(15, 1, 1), int16] */;
  %1094 = cast(%var_804, dtype="int16") /* ty=Tensor[(525), int16] */;
  %1095 = reshape(%1093, newshape=[15, 1, 1]) /* ty=Tensor[(15, 1, 1), int16] */;
  %1096 = reshape(%1094, newshape=[5, 15, 7]) /* ty=Tensor[(5, 15, 7), int16] */;
  %1097 = @func_341(%1095, %1096) /* ty=(Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64]) */;
  %1098 = cast(%1036, dtype="int16") /* ty=Tensor[(15, 1, 1), int16] */;
  %1099 = cast(%var_804, dtype="int16") /* ty=Tensor[(525), int16] */;
  %1100 = reshape(%1098, newshape=[15, 1, 1]) /* ty=Tensor[(15, 1, 1), int16] */;
  %1101 = reshape(%1099, newshape=[5, 15, 7]) /* ty=Tensor[(5, 15, 7), int16] */;
  %1102 = @func_341(%1100, %1101) /* ty=(Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64]) */;
  %1103 = cast(%1047, dtype="float64") /* ty=Tensor[(7, 16, 15), float64] */;
  %1104 = cast(%1054, dtype="float32") /* ty=Tensor[(7, 16, 15), float32] */;
  %1105 = cast(%1066, dtype="int16") /* ty=Tensor[(15, 1, 1), int16] */;
  %1106 = %1102.1;
  %1107 = cast(%1106, dtype="int16") /* ty=Tensor[(5, 15, 7), int16] */;
  %1108 = reshape(%1105, newshape=[15, 1, 1]) /* ty=Tensor[(15, 1, 1), int16] */;
  %1109 = reshape(%1107, newshape=[5, 15, 7]) /* ty=Tensor[(5, 15, 7), int16] */;
  %1110 = @func_341(%1108, %1109) /* ty=(Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64]) */;
  %1111 = %1018.0;
  %1112 = %1034.4;
  %1113 = %1040.6;
  %1114 = %1045.1;
  %1115 = multiply(%1057, %1058) /* ty=Tensor[(7, 16, 15), uint8] */;
  %1116 = %1070.0;
  %1117 = right_shift(%1075, %1076) /* ty=Tensor[(7, 16, 15), int64] */;
  %1118 = %1086.1;
  %1119 = %1092.1;
  %1120 = %1097.1;
  %1121 = rsqrt(%1103) /* ty=Tensor[(7, 16, 15), float64] */;
  %1122 = sigmoid(%1104) /* ty=Tensor[(7, 16, 15), float32] */;
  %1123 = %1110.0;
  (%1001, meta[relay.Constant][78] /* ty=Tensor[(192), float32] */, %var_795, %1008, %var_804, %1025, %1013, %1111, %1060, %1036, %1112, %1113, %1114, %1115, %1066, %1116, %1117, %1087, %1118, %1119, %1120, %1106, %1121, %1122, %1123)
}

def @func_4122() -> Tensor[(120), float32] {
  %1124 = @func_3381() /* ty=(Tensor[(120), float32],) */;
  %1124.0
}

def @func_682(%var_639: Tensor[(2, 6, 16), float32], %var_663: Tensor[(5, 3), int16]) -> (Tensor[(2, 6, 16), bool], Tensor[(2, 6, 16), float64], Tensor[(15, 1, 1), int16], Tensor[(5, 3), int16], Tensor[(525), int16], Tensor[(2, 6, 16), bool], Tensor[(15, 1, 1), int16]) {
  %1125 = cast(%var_639, dtype="bool") /* ty=Tensor[(2, 6, 16), bool] */;
  %1126 = shape_of(meta[relay.Constant][80] /* ty=Tensor[(2, 6, 16), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1127 = cast(meta[relay.Constant][80] /* ty=Tensor[(2, 6, 16), float32] */, dtype="bool") /* ty=Tensor[(2, 6, 16), bool] */;
  %1128 = dyn.reshape(%1125, %1126, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1129 = cast(%var_639, dtype="float64") /* ty=Tensor[(2, 6, 16), float64] */;
  %1130 = cast(%var_663, dtype="int16") /* ty=Tensor[(5, 3), int16] */;
  %1131 = cast(meta[relay.Constant][81] /* ty=Tensor[(525), int16] */, dtype="int16") /* ty=Tensor[(525), int16] */;
  %1132 = reshape(%1130, newshape=[15, 1, 1]) /* ty=Tensor[(15, 1, 1), int16] */;
  %1133 = reshape(%1131, newshape=[5, 15, 7]) /* ty=Tensor[(5, 15, 7), int16] */;
  %1134 = @func_341(%1132, %1133) /* ty=(Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64]) */;
  %1135 = cast(%var_639, dtype="bool") /* ty=Tensor[(2, 6, 16), bool] */;
  %1136 = shape_of(meta[relay.Constant][80] /* ty=Tensor[(2, 6, 16), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1137 = cast(meta[relay.Constant][80] /* ty=Tensor[(2, 6, 16), float32] */, dtype="bool") /* ty=Tensor[(2, 6, 16), bool] */;
  %1138 = dyn.reshape(%1135, %1136, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1139 = cast(%var_663, dtype="int16") /* ty=Tensor[(5, 3), int16] */;
  %1140 = cast(meta[relay.Constant][81] /* ty=Tensor[(525), int16] */, dtype="int16") /* ty=Tensor[(525), int16] */;
  %1141 = reshape(%1139, newshape=[15, 1, 1]) /* ty=Tensor[(15, 1, 1), int16] */;
  %1142 = reshape(%1140, newshape=[5, 15, 7]) /* ty=Tensor[(5, 15, 7), int16] */;
  %1143 = @func_341(%1141, %1142) /* ty=(Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64]) */;
  %1144 = less(%1127, %1128) /* ty=Tensor[(2, 6, 16), bool] */;
  %1145 = atanh(%1129) /* ty=Tensor[(2, 6, 16), float64] */;
  %1146 = %1134.0;
  %1147 = logical_and(%1137, %1138) /* ty=Tensor[(2, 6, 16), bool] */;
  %1148 = %1143.0;
  (%1144, %1145, %1146, %var_663, meta[relay.Constant][81] /* ty=Tensor[(525), int16] */, %1147, %1148)
}

def @func_7655(%var_7649: Tensor[(720), float32]) -> (Tensor[(16, 16), float32], Tensor[(5, 4, 6), float32], Tensor[(720), float32], Tensor[(5, 3), float32], Tensor[(18), float32], Tensor[(1680), float64], Tensor[(600, 1), float32]) {
  %1149 = cast(%var_7649, dtype="float32") /* ty=Tensor[(720), float32] */;
  %1150 = cast(meta[relay.Constant][82] /* ty=Tensor[(5, 3), float32] */, dtype="float32") /* ty=Tensor[(5, 3), float32] */;
  %1151 = cast(meta[relay.Constant][83] /* ty=Tensor[(18), float32] */, dtype="float32") /* ty=Tensor[(18), float32] */;
  %1152 = cast(%var_7649, dtype="float64") /* ty=Tensor[(720), float64] */;
  %1153 = cast(meta[relay.Constant][84] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %1154 = cast(meta[relay.Constant][85] /* ty=Tensor[(600, 1), float32] */, dtype="float32") /* ty=Tensor[(600, 1), float32] */;
  %1155 = reshape(%1149, newshape=[15, 12, 4]) /* ty=Tensor[(15, 12, 4), float32] */;
  %1156 = reshape(%1150, newshape=[15]) /* ty=Tensor[(15), float32] */;
  %1157 = reshape(%1151, newshape=[18]) /* ty=Tensor[(18), float32] */;
  %1158 = reshape(%1152, newshape=[15, 12, 4]) /* ty=Tensor[(15, 12, 4), float64] */;
  %1159 = reshape(%1153, newshape=[1680]) /* ty=Tensor[(1680), float64] */;
  %1160 = reshape(%1154, newshape=[600]) /* ty=Tensor[(600), float32] */;
  %1161 = @func_3082(%1155, %1156, %1157, %1158, %1159, %1160) /* ty=(Tensor[(5, 4, 6), float32], Tensor[(120), float32], Tensor[(15), float32], Tensor[(1, 525), int16], Tensor[(1, 2, 9), float32], Tensor[(18), float32], Tensor[(16, 16), float32], Tensor[(15, 12, 4), int64], Tensor[(15, 12, 4), uint64], Tensor[(15, 12, 4), float64], Tensor[(600), float32], Tensor[(1680), float64], Tensor[(600), float32]) */;
  %1162 = @func_3555() /* ty=Tensor[(16, 16), float32] */;
  %1163 = %1161.0;
  (%1162, %1163, %var_7649, meta[relay.Constant][82] /* ty=Tensor[(5, 3), float32] */, meta[relay.Constant][83] /* ty=Tensor[(18), float32] */, meta[relay.Constant][84] /* ty=Tensor[(1680), float64] */, meta[relay.Constant][85] /* ty=Tensor[(600, 1), float32] */)
}

def @func_6402() -> (Tensor[(120), float32],) {
  %1164 = @func_6205() /* ty=(Tensor[(120), float32],) */;
  %1165 = %1164.0;
  (%1165,)
}

def @func_1735(%var_1715: Tensor[(1, 5, 3), float32], %var_1720: Tensor[(14, 5, 3), float32]) -> Tensor[(14, 5, 3), bool] {
  %1166 = cast(%var_1715, dtype="float32") /* ty=Tensor[(1, 5, 3), float32] */;
  %1167 = sin(%1166) /* ty=Tensor[(1, 5, 3), float32] */;
  %1168 = cast(%1167, dtype="bool") /* ty=Tensor[(1, 5, 3), bool] */;
  %1169 = cast(%var_1720, dtype="bool") /* ty=Tensor[(14, 5, 3), bool] */;
  greater_equal(%1168, %1169) /* ty=Tensor[(14, 5, 3), bool] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2636(%var_2634: Tensor[(1680), float64], %var_2635: Tensor[(1680), float64]) -> (Tensor[(120), float32], Tensor[(525), int16], Tensor[(15), int16], Tensor[(525), int16], Tensor[(6, 4, 2), float64], Tensor[(48), float64], Tensor[(120), uint32], Tensor[(1680), bool]) {
  @func_2632(%var_2634, %var_2635) /* ty=(Tensor[(120), float32], Tensor[(525), int16], Tensor[(15), int16], Tensor[(525), int16], Tensor[(6, 4, 2), float64], Tensor[(48), float64], Tensor[(120), uint32], Tensor[(1680), bool]) */
}

def @func_4971() -> (Tensor[(120), float32], Tensor[(120), float32]) {
  %0 = @func_3381() /* ty=(Tensor[(120), float32],) */;
  %1 = @func_3539() /* ty=Tensor[(120), float32] */;
  %2 = %0.0;
  (%1, %2)
}

def @func_5046() -> (Tensor[(120), float32],) {
  %3 = @func_2145() /* ty=(Tensor[(120), float32],) */;
  %4 = %3.0;
  (%4,)
}

def @func_5418() -> (Tensor[(16, 16), float32],) {
  %5 = @func_2747() /* ty=(Tensor[(16, 16), float32],) */;
  %6 = %5.0;
  (%6,)
}

def @func_6049() -> Tensor[(120), float32] {
  %8 = fn () -> Tensor[(120), float32] {
    %7 = @func_3695() /* ty=(Tensor[(120), float32], Tensor[(16, 16), float32]) */;
    %7.0
  };
  %8() /* ty=Tensor[(120), float32] */
}

def @func_5102() -> (Tensor[(120), float32],) {
  %9 = @func_3817() /* ty=(Tensor[(120), float32],) */;
  %10 = %9.0;
  (%10,)
}

def @func_7172() -> (Tensor[(120), float64],) {
  %13 = fn () -> (Tensor[(120), float64],) {
    %11 = @func_4474() /* ty=(Tensor[(120), float64],) */;
    %12 = %11.0;
    (%12,)
  };
  %13() /* ty=(Tensor[(120), float64],) */
}

def @func_3555() -> Tensor[(16, 16), float32] {
  %14 = @func_1670() /* ty=(Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(5, 4, 6), float32]) */;
  %14.0
}

def @func_7657(%var_7656: Tensor[(720), float32]) -> (Tensor[(16, 16), float32], Tensor[(5, 4, 6), float32], Tensor[(720), float32], Tensor[(5, 3), float32], Tensor[(18), float32], Tensor[(1680), float64], Tensor[(600, 1), float32]) {
  %30 = fn (%var_7649: Tensor[(720), float32]) -> (Tensor[(16, 16), float32], Tensor[(5, 4, 6), float32], Tensor[(720), float32], Tensor[(5, 3), float32], Tensor[(18), float32], Tensor[(1680), float64], Tensor[(600, 1), float32]) {
    %15 = cast(%var_7649, dtype="float32") /* ty=Tensor[(720), float32] */;
    %16 = cast(meta[relay.Constant][0] /* ty=Tensor[(5, 3), float32] */, dtype="float32") /* ty=Tensor[(5, 3), float32] */;
    %17 = cast(meta[relay.Constant][1] /* ty=Tensor[(18), float32] */, dtype="float32") /* ty=Tensor[(18), float32] */;
    %18 = cast(%var_7649, dtype="float64") /* ty=Tensor[(720), float64] */;
    %19 = cast(meta[relay.Constant][2] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
    %20 = cast(meta[relay.Constant][3] /* ty=Tensor[(600, 1), float32] */, dtype="float32") /* ty=Tensor[(600, 1), float32] */;
    %21 = reshape(%15, newshape=[15, 12, 4]) /* ty=Tensor[(15, 12, 4), float32] */;
    %22 = reshape(%16, newshape=[15]) /* ty=Tensor[(15), float32] */;
    %23 = reshape(%17, newshape=[18]) /* ty=Tensor[(18), float32] */;
    %24 = reshape(%18, newshape=[15, 12, 4]) /* ty=Tensor[(15, 12, 4), float64] */;
    %25 = reshape(%19, newshape=[1680]) /* ty=Tensor[(1680), float64] */;
    %26 = reshape(%20, newshape=[600]) /* ty=Tensor[(600), float32] */;
    %27 = @func_3082(%21, %22, %23, %24, %25, %26) /* ty=(Tensor[(5, 4, 6), float32], Tensor[(120), float32], Tensor[(15), float32], Tensor[(1, 525), int16], Tensor[(1, 2, 9), float32], Tensor[(18), float32], Tensor[(16, 16), float32], Tensor[(15, 12, 4), int64], Tensor[(15, 12, 4), uint64], Tensor[(15, 12, 4), float64], Tensor[(600), float32], Tensor[(1680), float64], Tensor[(600), float32]) */;
    %28 = @func_3555() /* ty=Tensor[(16, 16), float32] */;
    %29 = %27.0;
    (%28, %29, %var_7649, meta[relay.Constant][0] /* ty=Tensor[(5, 3), float32] */, meta[relay.Constant][1] /* ty=Tensor[(18), float32] */, meta[relay.Constant][2] /* ty=Tensor[(1680), float64] */, meta[relay.Constant][3] /* ty=Tensor[(600, 1), float32] */)
  };
  %30(%var_7656) /* ty=(Tensor[(16, 16), float32], Tensor[(5, 4, 6), float32], Tensor[(720), float32], Tensor[(5, 3), float32], Tensor[(18), float32], Tensor[(1680), float64], Tensor[(600, 1), float32]) */
}

def @func_6396() -> (Tensor[(16, 16), float32], Tensor[(16, 16), float32]) {
  @func_6394() /* ty=(Tensor[(16, 16), float32], Tensor[(16, 16), float32]) */
}

def @func_4562() -> (Tensor[(120), float32], Tensor[(2, ?, 16), float32], Tensor[(32), float32]) {
  %31 = @func_4198() /* ty=(Tensor[(120), float32],) */;
  %32 = cast(meta[relay.Constant][4] /* ty=Tensor[(32), float32] */, dtype="float32") /* ty=Tensor[(32), float32] */;
  %33 = reshape(%32, newshape=[2, 1, 16]) /* ty=Tensor[(2, 1, 16), float32] */;
  %34 = %31.0;
  %35 = @func_1498(%33) /* ty=Tensor[(2, ?, 16), float32] */;
  (%34, %35, meta[relay.Constant][4] /* ty=Tensor[(32), float32] */)
}

def @func_7140(%var_7138: Tensor[(1, 15), float32], %var_7139: Tensor[(1680), float64]) -> (Tensor[(120), float32], Tensor[(1, 2, 9), float32], Tensor[(720), float32], Tensor[(1, 15), float32], Tensor[(1, 18), float32], Tensor[(1680), float64], Tensor[(600), float32]) {
  @func_7136(%var_7138, %var_7139) /* ty=(Tensor[(120), float32], Tensor[(1, 2, 9), float32], Tensor[(720), float32], Tensor[(1, 15), float32], Tensor[(1, 18), float32], Tensor[(1680), float64], Tensor[(600), float32]) */
}

def @func_3422(%var_3421: Tensor[(9, 5, 9), float32]) -> (Tensor[(9, 5, 9), float32], Tensor[(120), float32]) {
  %40 = fn (%var_3415: Tensor[(9, 5, 9), float32]) -> (Tensor[(9, 5, 9), float32], Tensor[(120), float32]) {
    %36 = cast(%var_3415, dtype="float32") /* ty=Tensor[(9, 5, 9), float32] */;
    %37 = @func_3381() /* ty=(Tensor[(120), float32],) */;
    %38 = atanh(%36) /* ty=Tensor[(9, 5, 9), float32] */;
    %39 = %37.0;
    (%38, %39)
  };
  %40(%var_3421) /* ty=(Tensor[(9, 5, 9), float32], Tensor[(120), float32]) */
}

def @func_3870() -> (Tensor[(16, 16), float32], Tensor[(16, 16), float32], Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(120), float32], Tensor[(120), float32], Tensor[(15), float32], Tensor[(525), int16], Tensor[(120), float32], Tensor[(16, 16), float32]) {
  %62 = fn () -> (Tensor[(16, 16), float32], Tensor[(16, 16), float32], Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(120), float32], Tensor[(120), float32], Tensor[(15), float32], Tensor[(525), int16], Tensor[(120), float32], Tensor[(16, 16), float32]) {
    %41 = @func_3695() /* ty=(Tensor[(120), float32], Tensor[(16, 16), float32]) */;
    %42 = @func_1670() /* ty=(Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(5, 4, 6), float32]) */;
    %43 = @func_2809() /* ty=(Tensor[(120), float32],) */;
    %44 = cast(meta[relay.Constant][5] /* ty=Tensor[(15), float32] */, dtype="float32") /* ty=Tensor[(15), float32] */;
    %45 = cast(meta[relay.Constant][6] /* ty=Tensor[(525), int16] */, dtype="int16") /* ty=Tensor[(525), int16] */;
    %46 = reshape(%44, newshape=[15]) /* ty=Tensor[(15), float32] */;
    %47 = reshape(%45, newshape=[525]) /* ty=Tensor[(525), int16] */;
    %48 = @func_3179(%46, %47) /* ty=(Tensor[(120), float32], Tensor[(120), float32], Tensor[(15), float32], Tensor[(525), int16], Tensor[(5, 4, 6), float32], Tensor[(600), float32], Tensor[(15), int16]) */;
    %49 = cast(meta[relay.Constant][5] /* ty=Tensor[(15), float32] */, dtype="float32") /* ty=Tensor[(15), float32] */;
    %50 = cast(meta[relay.Constant][6] /* ty=Tensor[(525), int16] */, dtype="int16") /* ty=Tensor[(525), int16] */;
    %51 = reshape(%49, newshape=[15]) /* ty=Tensor[(15), float32] */;
    %52 = reshape(%50, newshape=[525]) /* ty=Tensor[(525), int16] */;
    %53 = @func_3179(%51, %52) /* ty=(Tensor[(120), float32], Tensor[(120), float32], Tensor[(15), float32], Tensor[(525), int16], Tensor[(5, 4, 6), float32], Tensor[(600), float32], Tensor[(15), int16]) */;
    %54 = %41.1;
    %55 = @func_3555() /* ty=Tensor[(16, 16), float32] */;
    %56 = %42.0;
    %57 = @func_3539() /* ty=Tensor[(120), float32] */;
    %58 = %43.0;
    %59 = %48.1;
    %60 = %53.0;
    %61 = @func_3555() /* ty=Tensor[(16, 16), float32] */;
    (%54, %55, %56, %57, %58, %59, meta[relay.Constant][5] /* ty=Tensor[(15), float32] */, meta[relay.Constant][6] /* ty=Tensor[(525), int16] */, %60, %61)
  };
  %62() /* ty=(Tensor[(16, 16), float32], Tensor[(16, 16), float32], Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(120), float32], Tensor[(120), float32], Tensor[(15), float32], Tensor[(525), int16], Tensor[(120), float32], Tensor[(16, 16), float32]) */
}

def @func_7474() -> (Tensor[(120), float32], Tensor[(6, 5, 4), float64], Tensor[(16, 16), float32]) {
  %70 = fn () -> (Tensor[(120), float32], Tensor[(6, 5, 4), float64], Tensor[(16, 16), float32]) {
    %63 = @func_5607() /* ty=Tensor[(120), float32] */;
    %64 = cast(%63, dtype="float64") /* ty=Tensor[(120), float64] */;
    %65 = reshape(%64, newshape=[6, 5, 4]) /* ty=Tensor[(6, 5, 4), float64] */;
    %66 = @func_7036(%65) /* ty=(Tensor[(6, 5, 4), float64],) */;
    %67 = @func_6394() /* ty=(Tensor[(16, 16), float32], Tensor[(16, 16), float32]) */;
    %68 = %66.0;
    %69 = %67.1;
    (%63, %68, %69)
  };
  %70() /* ty=(Tensor[(120), float32], Tensor[(6, 5, 4), float64], Tensor[(16, 16), float32]) */
}

def @func_8449() -> Tensor[(16, 16), float32] {
  %72 = fn () -> Tensor[(16, 16), float32] {
    %71 = @func_2487() /* ty=(Tensor[(16, 16), float32], Tensor[(5, 4, 6), int16]) */;
    %71.0
  };
  %72() /* ty=Tensor[(16, 16), float32] */
}

def @func_1970(%var_1921: Tensor[(1, 525), int16], %var_1932: Tensor[(12, 50), float32]) -> (Tensor[(120), float32], Tensor[(2, 840), float64], Tensor[(15), int16], Tensor[(5, 12, 10), float32], Tensor[(12, 50), float32], Tensor[(?, 525), bool], Tensor[(5, 15, 7), float64], Tensor[(5, 4, 6), float32]) {
  %73 = @func_1670() /* ty=(Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(5, 4, 6), float32]) */;
  %74 = cast(%var_1932, dtype="float32") /* ty=Tensor[(12, 50), float32] */;
  %75 = reshape(%74, newshape=[5, 12, 10]) /* ty=Tensor[(5, 12, 10), float32] */;
  %76 = @func_1606(%75) /* ty=(Tensor[(5, 12, 10), float32],) */;
  %77 = cast(meta[relay.Constant][7] /* ty=Tensor[(2, 840), float64] */, dtype="float64") /* ty=Tensor[(2, 840), float64] */;
  %78 = cast(meta[relay.Constant][8] /* ty=Tensor[(15), int16] */, dtype="int16") /* ty=Tensor[(15), int16] */;
  %79 = cast(%var_1921, dtype="int16") /* ty=Tensor[(1, 525), int16] */;
  %80 = cast(meta[relay.Constant][7] /* ty=Tensor[(2, 840), float64] */, dtype="float64") /* ty=Tensor[(2, 840), float64] */;
  %81 = reshape(%77, newshape=[7, 16, 15]) /* ty=Tensor[(7, 16, 15), float64] */;
  %82 = reshape(%78, newshape=[15]) /* ty=Tensor[(15), int16] */;
  %83 = reshape(%79, newshape=[525]) /* ty=Tensor[(525), int16] */;
  %84 = reshape(%80, newshape=[7, 16, 15]) /* ty=Tensor[(7, 16, 15), float64] */;
  %85 = @func_985(%81, %82, %83, %84) /* ty=(Tensor[(2, 6, 16), bool], Tensor[(192), float32], Tensor[(15), int16], Tensor[(15, 1, 1), int16], Tensor[(525), int16], Tensor[(525), int16], Tensor[(2, 6, 16), bool], Tensor[(2, 6, 16), bool], Tensor[(5, 15, 7), int64], Tensor[(15, 1, 1), int16], Tensor[(525), int16], Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64], Tensor[(7, 16, 15), uint8], Tensor[(15, 1, 1), int16], Tensor[(2, 6, 16), bool], Tensor[(7, 16, 15), int64], Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(7, 16, 15), float64], Tensor[(7, 16, 15), float32], Tensor[(15, 1, 1), int16]) */;
  %86 = %85.19;
  %87 = cast(%var_1921, dtype="bool") /* ty=Tensor[(1, 525), bool] */;
  %88 = shape_of(%86, dtype="int32") /* ty=Tensor[(3), int32] */;
  %89 = cast(%86, dtype="bool") /* ty=Tensor[(5, 15, 7), bool] */;
  %90 = dyn.reshape(%87, %88, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %91 = greater_equal(%89, %90) /* ty=Tensor[(5, 15, 7), bool] */;
  %92 = cast(%91, dtype="bool") /* ty=Tensor[(5, 15, 7), bool] */;
  %93 = shape_of(%var_1921, dtype="int32") /* ty=Tensor[(2), int32] */;
  %94 = cast(%var_1921, dtype="bool") /* ty=Tensor[(1, 525), bool] */;
  %95 = dyn.reshape(%92, %93, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %96 = cast(%var_1921, dtype="float64") /* ty=Tensor[(1, 525), float64] */;
  %97 = shape_of(%86, dtype="int32") /* ty=Tensor[(3), int32] */;
  %98 = cast(%86, dtype="float64") /* ty=Tensor[(5, 15, 7), float64] */;
  %99 = dyn.reshape(%96, %97, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %100 = @func_1670() /* ty=(Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(5, 4, 6), float32]) */;
  %101 = %73.1;
  %102 = %76.0;
  %103 = less(%94, %95) /* ty=Tensor[(?, 525), bool] */;
  %104 = mod(%98, %99) /* ty=Tensor[(5, 15, 7), float64] */;
  %105 = %100.2;
  (%101, meta[relay.Constant][7] /* ty=Tensor[(2, 840), float64] */, meta[relay.Constant][8] /* ty=Tensor[(15), int16] */, %102, %var_1932, %103, %104, %105)
}

def @func_3382() -> (Tensor[(120), float32],) {
  %107 = fn () -> (Tensor[(120), float32],) {
    %106 = @func_2891() /* ty=Tensor[(120), float32] */;
    (%106,)
  };
  %107() /* ty=(Tensor[(120), float32],) */
}

def @func_4124() -> Tensor[(120), float32] {
  @func_4122() /* ty=Tensor[(120), float32] */
}

def @func_1395(%var_1335: Tensor[(6, 4, 2), float64], %var_1341: Tensor[(6, 4, 2), float64]) -> (Tensor[(6, 4, 2), float64], Tensor[(6, 4, 2), float64]) {
  %108 = cast(%var_1335, dtype="float64") /* ty=Tensor[(6, 4, 2), float64] */;
  %109 = cast(%var_1341, dtype="float64") /* ty=Tensor[(6, 4, 2), float64] */;
  %110 = shape_of(%var_1335, dtype="int32") /* ty=Tensor[(3), int32] */;
  %111 = cast(%var_1335, dtype="float64") /* ty=Tensor[(6, 4, 2), float64] */;
  %112 = dyn.reshape(%109, %110, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %113 = asin(%108) /* ty=Tensor[(6, 4, 2), float64] */;
  %114 = mod(%111, %112) /* ty=Tensor[(6, 4, 2), float64] */;
  (%113, %114)
}

def @func_3764(%var_3763: Tensor[(14, 14, 4), float64]) -> (Tensor[(120), float32], Tensor[(14, 14, 4), float32]) {
  %120 = fn (%var_3721: Tensor[(14, 14, 4), float64]) -> (Tensor[(120), float32], Tensor[(14, 14, 4), float32]) {
    %115 = cast(%var_3721, dtype="float64") /* ty=Tensor[(14, 14, 4), float64] */;
    %116 = rsqrt(%115) /* ty=Tensor[(14, 14, 4), float64] */;
    %117 = cast(%116, dtype="float32") /* ty=Tensor[(14, 14, 4), float32] */;
    %118 = @func_3539() /* ty=Tensor[(120), float32] */;
    %119 = cos(%117) /* ty=Tensor[(14, 14, 4), float32] */;
    (%118, %119)
  };
  %120(%var_3763) /* ty=(Tensor[(120), float32], Tensor[(14, 14, 4), float32]) */
}

def @func_6907(%var_6904: Tensor[(720), float32], %var_6905: Tensor[(15), float32], %var_6906: Tensor[(18), float32]) -> (Tensor[(120), float32], Tensor[(120), float32], Tensor[(120), float64], Tensor[(1680), float32], Tensor[(18), float32], Tensor[(720), float32], Tensor[(15), float32], Tensor[(18), float32], Tensor[(6, 100), float32], Tensor[(120), float32]) {
  @func_6902(%var_6904, %var_6905, %var_6906) /* ty=(Tensor[(120), float32], Tensor[(120), float32], Tensor[(120), float64], Tensor[(1680), float32], Tensor[(18), float32], Tensor[(720), float32], Tensor[(15), float32], Tensor[(18), float32], Tensor[(6, 100), float32], Tensor[(120), float32]) */
}

def @func_1140(%var_1139: Tensor[(5, 4, 6), float32]) -> Tensor[(5, 4, 6), float32] {
  %122 = fn (%var_1118: Tensor[(5, 4, 6), float32]) -> Tensor[(5, 4, 6), float32] {
    %121 = cast(%var_1118, dtype="float32") /* ty=Tensor[(5, 4, 6), float32] */;
    acos(%121) /* ty=Tensor[(5, 4, 6), float32] */
  };
  %122(%var_1139) /* ty=Tensor[(5, 4, 6), float32] */
}

def @func_4716(%var_4712: Tensor[(600), float32], %var_4713: Tensor[(16, 5, 12), float64], %var_4714: Tensor[(15), int16], %var_4715: Tensor[(16, 5, 12), float64]) -> (Tensor[(5, 4, 6), float32], Tensor[(525, 1), int16], Tensor[(600), float32], Tensor[(16, 5, 12), bool], Tensor[(16, 5, 12), uint64], Tensor[(15, 1, 1), int16], Tensor[(192), float32], Tensor[(15), int16], Tensor[(16, 5, 12), bool], Tensor[(9, 5, 9), float32], Tensor[(405), float32]) {
  %160 = fn (%var_4595: Tensor[(600), float32], %var_4610: Tensor[(16, 5, 12), float64], %var_4625: Tensor[(15), int16], %var_4636: Tensor[(16, 5, 12), float64]) -> (Tensor[(5, 4, 6), float32], Tensor[(525, 1), int16], Tensor[(600), float32], Tensor[(16, 5, 12), bool], Tensor[(16, 5, 12), uint64], Tensor[(15, 1, 1), int16], Tensor[(192), float32], Tensor[(15), int16], Tensor[(16, 5, 12), bool], Tensor[(9, 5, 9), float32], Tensor[(405), float32]) {
    %123 = cast(meta[relay.Constant][9] /* ty=Tensor[(525, 1), int16] */, dtype="int16") /* ty=Tensor[(525, 1), int16] */;
    %124 = cast(%var_4595, dtype="float32") /* ty=Tensor[(600), float32] */;
    %125 = reshape(%123, newshape=[1, 525]) /* ty=Tensor[(1, 525), int16] */;
    %126 = reshape(%124, newshape=[12, 50]) /* ty=Tensor[(12, 50), float32] */;
    %127 = @func_1970(%125, %126) /* ty=(Tensor[(120), float32], Tensor[(2, 840), float64], Tensor[(15), int16], Tensor[(5, 12, 10), float32], Tensor[(12, 50), float32], Tensor[(?, 525), bool], Tensor[(5, 15, 7), float64], Tensor[(5, 4, 6), float32]) */;
    %128 = cast(meta[relay.Constant][10] /* ty=Tensor[(16, 5, 12), float64] */, dtype="float64") /* ty=Tensor[(16, 5, 12), float64] */;
    %129 = asin(%128) /* ty=Tensor[(16, 5, 12), float64] */;
    %130 = cast(meta[relay.Constant][10] /* ty=Tensor[(16, 5, 12), float64] */, dtype="bool") /* ty=Tensor[(16, 5, 12), bool] */;
    %131 = shape_of(%129, dtype="int32") /* ty=Tensor[(3), int32] */;
    %132 = cast(%129, dtype="bool") /* ty=Tensor[(16, 5, 12), bool] */;
    %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %134 = cast(%var_4610, dtype="uint64") /* ty=Tensor[(16, 5, 12), uint64] */;
    %135 = shape_of(%129, dtype="int32") /* ty=Tensor[(3), int32] */;
    %136 = cast(%129, dtype="uint64") /* ty=Tensor[(16, 5, 12), uint64] */;
    %137 = dyn.reshape(%134, %135, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %138 = cast(meta[relay.Constant][11] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
    %139 = cast(%var_4625, dtype="int16") /* ty=Tensor[(15), int16] */;
    %140 = reshape(%138, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float32] */;
    %141 = reshape(%139, newshape=[5, 3]) /* ty=Tensor[(5, 3), int16] */;
    %142 = @func_682(%140, %141) /* ty=(Tensor[(2, 6, 16), bool], Tensor[(2, 6, 16), float64], Tensor[(15, 1, 1), int16], Tensor[(5, 3), int16], Tensor[(525), int16], Tensor[(2, 6, 16), bool], Tensor[(15, 1, 1), int16]) */;
    %143 = cast(%129, dtype="float32") /* ty=Tensor[(16, 5, 12), float32] */;
    %144 = sinh(%143) /* ty=Tensor[(16, 5, 12), float32] */;
    %145 = cast(%144, dtype="float64") /* ty=Tensor[(16, 5, 12), float64] */;
    %146 = exp(%145) /* ty=Tensor[(16, 5, 12), float64] */;
    %147 = cast(%var_4636, dtype="bool") /* ty=Tensor[(16, 5, 12), bool] */;
    %148 = shape_of(%146, dtype="int32") /* ty=Tensor[(3), int32] */;
    %149 = cast(%146, dtype="bool") /* ty=Tensor[(16, 5, 12), bool] */;
    %150 = dyn.reshape(%147, %148, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %151 = cast(meta[relay.Constant][12] /* ty=Tensor[(405), float32] */, dtype="float32") /* ty=Tensor[(405), float32] */;
    %152 = reshape(%151, newshape=[9, 5, 9]) /* ty=Tensor[(9, 5, 9), float32] */;
    %153 = @func_3420(%152) /* ty=(Tensor[(9, 5, 9), float32], Tensor[(120), float32]) */;
    %154 = %127.7;
    %155 = logical_or(%132, %133) /* ty=Tensor[(16, 5, 12), bool] */;
    %156 = logical_xor(%136, %137) /* ty=Tensor[(16, 5, 12), uint64] */;
    %157 = %142.6;
    %158 = less(%149, %150) /* ty=Tensor[(16, 5, 12), bool] */;
    %159 = %153.0;
    (%154, meta[relay.Constant][9] /* ty=Tensor[(525, 1), int16] */, %var_4595, %155, %156, %157, meta[relay.Constant][11] /* ty=Tensor[(192), float32] */, %var_4625, %158, %159, meta[relay.Constant][12] /* ty=Tensor[(405), float32] */)
  };
  %160(%var_4712, %var_4713, %var_4714, %var_4715) /* ty=(Tensor[(5, 4, 6), float32], Tensor[(525, 1), int16], Tensor[(600), float32], Tensor[(16, 5, 12), bool], Tensor[(16, 5, 12), uint64], Tensor[(15, 1, 1), int16], Tensor[(192), float32], Tensor[(15), int16], Tensor[(16, 5, 12), bool], Tensor[(9, 5, 9), float32], Tensor[(405), float32]) */
}

def @func_6207() -> (Tensor[(120), float32],) {
  @func_6205() /* ty=(Tensor[(120), float32],) */
}

def @func_6722() -> Tensor[(2, 15, 5), float64] {
  @func_6720() /* ty=Tensor[(2, 15, 5), float64] */
}

def @func_8614() -> (Tensor[(120), float32], Tensor[(120), float32]) {
  @func_8612() /* ty=(Tensor[(120), float32], Tensor[(120), float32]) */
}

def @func_6274() -> (Tensor[(120), float32], Tensor[(11, 11, 12), int64]) {
  %161 = @func_3240() /* ty=(Tensor[(120), float32], Tensor[(120), float32]) */;
  %162 = @func_6162() /* ty=(Tensor[(120), float32], Tensor[(11, 11, 12), int64], Tensor[(15), float32]) */;
  %163 = %161.1;
  %164 = %162.1;
  (%163, %164)
}

def @func_8226() -> (Tensor[(2, ?, 16), float32],) {
  @func_8224() /* ty=(Tensor[(2, ?, 16), float32],) */
}

def @func_991(%var_987: Tensor[(7, 16, 15), float64], %var_988: Tensor[(15), int16], %var_989: Tensor[(525), int16], %var_990: Tensor[(7, 16, 15), float64]) -> (Tensor[(2, 6, 16), bool], Tensor[(192), float32], Tensor[(15), int16], Tensor[(15, 1, 1), int16], Tensor[(525), int16], Tensor[(525), int16], Tensor[(2, 6, 16), bool], Tensor[(2, 6, 16), bool], Tensor[(5, 15, 7), int64], Tensor[(15, 1, 1), int16], Tensor[(525), int16], Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64], Tensor[(7, 16, 15), uint8], Tensor[(15, 1, 1), int16], Tensor[(2, 6, 16), bool], Tensor[(7, 16, 15), int64], Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(7, 16, 15), float64], Tensor[(7, 16, 15), float32], Tensor[(15, 1, 1), int16]) {
  @func_985(%var_987, %var_988, %var_989, %var_990) /* ty=(Tensor[(2, 6, 16), bool], Tensor[(192), float32], Tensor[(15), int16], Tensor[(15, 1, 1), int16], Tensor[(525), int16], Tensor[(525), int16], Tensor[(2, 6, 16), bool], Tensor[(2, 6, 16), bool], Tensor[(5, 15, 7), int64], Tensor[(15, 1, 1), int16], Tensor[(525), int16], Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64], Tensor[(7, 16, 15), uint8], Tensor[(15, 1, 1), int16], Tensor[(2, 6, 16), bool], Tensor[(7, 16, 15), int64], Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(7, 16, 15), float64], Tensor[(7, 16, 15), float32], Tensor[(15, 1, 1), int16]) */
}

def @func_6402() -> (Tensor[(120), float32],) {
  %165 = @func_6205() /* ty=(Tensor[(120), float32],) */;
  %166 = %165.0;
  (%166,)
}

def @func_6596(%var_6591: Tensor[(784), float64]) -> (Tensor[(5, 4, 6), uint16], Tensor[(5, 4, 6), uint32], Tensor[(14, 14, 4), float32], Tensor[(784), float64]) {
  %167 = @func_1670() /* ty=(Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(5, 4, 6), float32]) */;
  %168 = %167.2;
  %169 = cast(meta[relay.Constant][13] /* ty=Tensor[(5, 4, 6), float32] */, dtype="float64") /* ty=Tensor[(5, 4, 6), float64] */;
  %170 = shape_of(%168, dtype="int32") /* ty=Tensor[(3), int32] */;
  %171 = cast(%168, dtype="float64") /* ty=Tensor[(5, 4, 6), float64] */;
  %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %173 = divide(%171, %172) /* ty=Tensor[(5, 4, 6), float64] */;
  %174 = cast(meta[relay.Constant][14] /* ty=Tensor[(5, 4, 6), float64] */, dtype="uint32") /* ty=Tensor[(5, 4, 6), uint32] */;
  %175 = shape_of(%173, dtype="int32") /* ty=Tensor[(3), int32] */;
  %176 = cast(%173, dtype="uint32") /* ty=Tensor[(5, 4, 6), uint32] */;
  %177 = dyn.reshape(%174, %175, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %178 = minimum(%176, %177) /* ty=Tensor[(5, 4, 6), uint32] */;
  %179 = cast(%173, dtype="uint16") /* ty=Tensor[(5, 4, 6), uint16] */;
  %180 = shape_of(%178, dtype="int32") /* ty=Tensor[(3), int32] */;
  %181 = cast(%178, dtype="uint16") /* ty=Tensor[(5, 4, 6), uint16] */;
  %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %183 = cast(meta[relay.Constant][15] /* ty=Tensor[(5, 4, 6), float64] */, dtype="uint32") /* ty=Tensor[(5, 4, 6), uint32] */;
  %184 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(5, 4, 6), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %185 = cast(meta[relay.Constant][14] /* ty=Tensor[(5, 4, 6), float64] */, dtype="uint32") /* ty=Tensor[(5, 4, 6), uint32] */;
  %186 = dyn.reshape(%183, %184, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %187 = cast(%var_6591, dtype="float64") /* ty=Tensor[(784), float64] */;
  %188 = reshape(%187, newshape=[14, 14, 4]) /* ty=Tensor[(14, 14, 4), float64] */;
  %189 = @func_3762(%188) /* ty=(Tensor[(120), float32], Tensor[(14, 14, 4), float32]) */;
  %190 = maximum(%181, %182) /* ty=Tensor[(5, 4, 6), uint16] */;
  %191 = add(%185, %186) /* ty=Tensor[(5, 4, 6), uint32] */;
  %192 = %189.1;
  (%190, %191, %192, %var_6591)
}

def @func_6748(%var_6746: Tensor[(3, 4, 15), float32]) -> (Tensor[(3, 4, 15), float32], Tensor[(3, 4, 15), float32]) {
  @func_6745(%var_6746) /* ty=(Tensor[(3, 4, 15), float32], Tensor[(3, 4, 15), float32]) */
}

def @func_7039(%var_7037: Tensor[(6, 5, 4), float64]) -> (Tensor[(6, 5, 4), float64],) {
  @func_7036(%var_7037) /* ty=(Tensor[(6, 5, 4), float64],) */
}

def @func_4062(%var_4007: Tensor[(2, 40), uint64], %var_4058: Tensor[(525), int16]) -> (Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(15), int16], Tensor[(2, 40), uint64], Tensor[(1680), float64], Tensor[(6, 4, 2), float64], Tensor[(48), float64], Tensor[(2, 4, 10), int16], Tensor[(120), float32], Tensor[(525), int16]) {
  %193 = @func_2487() /* ty=(Tensor[(16, 16), float32], Tensor[(5, 4, 6), int16]) */;
  %194 = cast(%var_4007, dtype="uint64") /* ty=Tensor[(2, 40), uint64] */;
  %195 = cast(meta[relay.Constant][16] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %196 = reshape(%194, newshape=[2, 4, 10]) /* ty=Tensor[(2, 4, 10), uint64] */;
  %197 = reshape(%195, newshape=[12, 140]) /* ty=Tensor[(12, 140), float64] */;
  %198 = @func_3297(%196, %197) /* ty=(Tensor[(2, 4, 10), bool], Tensor[(2, 4, 10), int16], Tensor[(15, 1, 1), int16], Tensor[(12, 140), float64], Tensor[(15), int16], Tensor[(525), int16]) */;
  %199 = cast(meta[relay.Constant][17] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %200 = cast(meta[relay.Constant][17] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %201 = reshape(%199, newshape=[6, 4, 2]) /* ty=Tensor[(6, 4, 2), float64] */;
  %202 = reshape(%200, newshape=[6, 4, 2]) /* ty=Tensor[(6, 4, 2), float64] */;
  %203 = @func_1395(%201, %202) /* ty=(Tensor[(6, 4, 2), float64], Tensor[(6, 4, 2), float64]) */;
  %204 = cast(%var_4007, dtype="uint64") /* ty=Tensor[(2, 40), uint64] */;
  %205 = cast(meta[relay.Constant][16] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %206 = reshape(%204, newshape=[2, 4, 10]) /* ty=Tensor[(2, 4, 10), uint64] */;
  %207 = reshape(%205, newshape=[12, 140]) /* ty=Tensor[(12, 140), float64] */;
  %208 = @func_3297(%206, %207) /* ty=(Tensor[(2, 4, 10), bool], Tensor[(2, 4, 10), int16], Tensor[(15, 1, 1), int16], Tensor[(12, 140), float64], Tensor[(15), int16], Tensor[(525), int16]) */;
  %209 = %198.4;
  %210 = cast(%209, dtype="float32") /* ty=Tensor[(15), float32] */;
  %211 = cast(%var_4058, dtype="int16") /* ty=Tensor[(525), int16] */;
  %212 = reshape(%210, newshape=[15]) /* ty=Tensor[(15), float32] */;
  %213 = reshape(%211, newshape=[1, 525]) /* ty=Tensor[(1, 525), int16] */;
  %214 = @func_2206(%212, %213) /* ty=(Tensor[(120), float32], Tensor[(14, 5, 3), bool], Tensor[(15), float32], Tensor[(210), float32], Tensor[(120), uint32], Tensor[(5, 15, 7), int64], Tensor[(1, 525), int16], Tensor[(120), float32]) */;
  %215 = %193.0;
  %216 = @func_2891() /* ty=Tensor[(120), float32] */;
  %217 = %203.0;
  %218 = %208.1;
  %219 = %214.7;
  (%215, %216, %209, %var_4007, meta[relay.Constant][16] /* ty=Tensor[(1680), float64] */, %217, meta[relay.Constant][17] /* ty=Tensor[(48), float64] */, %218, %219, %var_4058)
}

def @func_2632(%var_2559: Tensor[(1680), float64], %var_2600: Tensor[(1680), float64]) -> (Tensor[(120), float32], Tensor[(525), int16], Tensor[(15), int16], Tensor[(525), int16], Tensor[(6, 4, 2), float64], Tensor[(48), float64], Tensor[(120), uint32], Tensor[(1680), bool]) {
  %220 = @func_2292() /* ty=(Tensor[(120), float32],) */;
  %221 = cast(%var_2559, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %222 = cast(meta[relay.Constant][18] /* ty=Tensor[(15), int16] */, dtype="int16") /* ty=Tensor[(15), int16] */;
  %223 = cast(meta[relay.Constant][19] /* ty=Tensor[(525), int16] */, dtype="int16") /* ty=Tensor[(525), int16] */;
  %224 = cast(%var_2559, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %225 = reshape(%221, newshape=[7, 16, 15]) /* ty=Tensor[(7, 16, 15), float64] */;
  %226 = reshape(%222, newshape=[15]) /* ty=Tensor[(15), int16] */;
  %227 = reshape(%223, newshape=[525]) /* ty=Tensor[(525), int16] */;
  %228 = reshape(%224, newshape=[7, 16, 15]) /* ty=Tensor[(7, 16, 15), float64] */;
  %229 = @func_985(%225, %226, %227, %228) /* ty=(Tensor[(2, 6, 16), bool], Tensor[(192), float32], Tensor[(15), int16], Tensor[(15, 1, 1), int16], Tensor[(525), int16], Tensor[(525), int16], Tensor[(2, 6, 16), bool], Tensor[(2, 6, 16), bool], Tensor[(5, 15, 7), int64], Tensor[(15, 1, 1), int16], Tensor[(525), int16], Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64], Tensor[(7, 16, 15), uint8], Tensor[(15, 1, 1), int16], Tensor[(2, 6, 16), bool], Tensor[(7, 16, 15), int64], Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(7, 16, 15), float64], Tensor[(7, 16, 15), float32], Tensor[(15, 1, 1), int16]) */;
  %230 = cast(meta[relay.Constant][20] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %231 = cast(meta[relay.Constant][20] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %232 = reshape(%230, newshape=[6, 4, 2]) /* ty=Tensor[(6, 4, 2), float64] */;
  %233 = reshape(%231, newshape=[6, 4, 2]) /* ty=Tensor[(6, 4, 2), float64] */;
  %234 = @func_1395(%232, %233) /* ty=(Tensor[(6, 4, 2), float64], Tensor[(6, 4, 2), float64]) */;
  %235 = %220.0;
  %236 = cast(%235, dtype="float32") /* ty=Tensor[(120), float32] */;
  %237 = reshape(%236, newshape=[120]) /* ty=Tensor[(120), float32] */;
  %238 = cast(%var_2600, dtype="bool") /* ty=Tensor[(1680), bool] */;
  %239 = shape_of(%var_2559, dtype="int32") /* ty=Tensor[(1), int32] */;
  %240 = cast(%var_2559, dtype="bool") /* ty=Tensor[(1680), bool] */;
  %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?), bool] */;
  %242 = %229.10;
  %243 = %234.0;
  %244 = @func_2018(%237) /* ty=Tensor[(120), uint32] */;
  %245 = not_equal(%240, %241) /* ty=Tensor[(1680), bool] */;
  (%235, %242, meta[relay.Constant][18] /* ty=Tensor[(15), int16] */, meta[relay.Constant][19] /* ty=Tensor[(525), int16] */, %243, meta[relay.Constant][20] /* ty=Tensor[(48), float64] */, %244, %245)
}

def @func_3089(%var_3083: Tensor[(15, 12, 4), float32], %var_3084: Tensor[(15), float32], %var_3085: Tensor[(18), float32], %var_3086: Tensor[(15, 12, 4), float64], %var_3087: Tensor[(1680), float64], %var_3088: Tensor[(600), float32]) -> (Tensor[(5, 4, 6), float32], Tensor[(120), float32], Tensor[(15), float32], Tensor[(1, 525), int16], Tensor[(1, 2, 9), float32], Tensor[(18), float32], Tensor[(16, 16), float32], Tensor[(15, 12, 4), int64], Tensor[(15, 12, 4), uint64], Tensor[(15, 12, 4), float64], Tensor[(600), float32], Tensor[(1680), float64], Tensor[(600), float32]) {
  %289 = fn (%var_2971: Tensor[(15, 12, 4), float32], %var_3026: Tensor[(15), float32], %var_3033: Tensor[(18), float32], %var_3050: Tensor[(15, 12, 4), float64], %var_3064: Tensor[(1680), float64], %var_3065: Tensor[(600), float32]) -> (Tensor[(5, 4, 6), float32], Tensor[(120), float32], Tensor[(15), float32], Tensor[(1, 525), int16], Tensor[(1, 2, 9), float32], Tensor[(18), float32], Tensor[(16, 16), float32], Tensor[(15, 12, 4), int64], Tensor[(15, 12, 4), uint64], Tensor[(15, 12, 4), float64], Tensor[(600), float32], Tensor[(1680), float64], Tensor[(600), float32]) {
    %246 = @func_1670() /* ty=(Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(5, 4, 6), float32]) */;
    %247 = cast(%var_3026, dtype="float32") /* ty=Tensor[(15), float32] */;
    %248 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 525), int16] */, dtype="int16") /* ty=Tensor[(1, 525), int16] */;
    %249 = reshape(%247, newshape=[15]) /* ty=Tensor[(15), float32] */;
    %250 = reshape(%248, newshape=[1, 525]) /* ty=Tensor[(1, 525), int16] */;
    %251 = @func_2206(%249, %250) /* ty=(Tensor[(120), float32], Tensor[(14, 5, 3), bool], Tensor[(15), float32], Tensor[(210), float32], Tensor[(120), uint32], Tensor[(5, 15, 7), int64], Tensor[(1, 525), int16], Tensor[(120), float32]) */;
    %252 = cast(%var_3033, dtype="float32") /* ty=Tensor[(18), float32] */;
    %253 = reshape(%252, newshape=[1, 2, 9]) /* ty=Tensor[(1, 2, 9), float32] */;
    %254 = @func_1836(%253) /* ty=(Tensor[(1, 2, 9), float32],) */;
    %255 = @func_2747() /* ty=(Tensor[(16, 16), float32],) */;
    %256 = cast(%var_2971, dtype="float32") /* ty=Tensor[(15, 12, 4), float32] */;
    %257 = acos(%256) /* ty=Tensor[(15, 12, 4), float32] */;
    %258 = cast(%var_2971, dtype="float64") /* ty=Tensor[(15, 12, 4), float64] */;
    %259 = sinh(%258) /* ty=Tensor[(15, 12, 4), float64] */;
    %260 = cast(%259, dtype="int64") /* ty=Tensor[(15, 12, 4), int64] */;
    %261 = shape_of(%257, dtype="int32") /* ty=Tensor[(3), int32] */;
    %262 = cast(%257, dtype="int64") /* ty=Tensor[(15, 12, 4), int64] */;
    %263 = dyn.reshape(%260, %261, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %264 = cast(%var_3050, dtype="uint64") /* ty=Tensor[(15, 12, 4), uint64] */;
    %265 = shape_of(%259, dtype="int32") /* ty=Tensor[(3), int32] */;
    %266 = cast(%259, dtype="uint64") /* ty=Tensor[(15, 12, 4), uint64] */;
    %267 = dyn.reshape(%264, %265, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %268 = cast(%var_2971, dtype="float64") /* ty=Tensor[(15, 12, 4), float64] */;
    %269 = cos(%268) /* ty=Tensor[(15, 12, 4), float64] */;
    %270 = cast(%257, dtype="float64") /* ty=Tensor[(15, 12, 4), float64] */;
    %271 = shape_of(%269, dtype="int32") /* ty=Tensor[(3), int32] */;
    %272 = cast(%269, dtype="float64") /* ty=Tensor[(15, 12, 4), float64] */;
    %273 = dyn.reshape(%270, %271, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %274 = cast(%var_3064, dtype="float64") /* ty=Tensor[(1680), float64] */;
    %275 = cast(%var_3026, dtype="int16") /* ty=Tensor[(15), int16] */;
    %276 = cast(%var_3065, dtype="float32") /* ty=Tensor[(600), float32] */;
    %277 = reshape(%274, newshape=[1680]) /* ty=Tensor[(1680), float64] */;
    %278 = reshape(%275, newshape=[15]) /* ty=Tensor[(15), int16] */;
    %279 = reshape(%276, newshape=[600]) /* ty=Tensor[(600), float32] */;
    %280 = @func_2676(%277, %278, %279) /* ty=(Tensor[(120), float32], Tensor[(6, 4, 2), float64], Tensor[(48), float64], Tensor[(120), uint32], Tensor[(15, 1, 1), int16], Tensor[(1680), float64], Tensor[(15), int16], Tensor[(525), int16], Tensor[(5, 12, 10), float32], Tensor[(600), float32]) */;
    %281 = %246.2;
    %282 = %251.7;
    %283 = %254.0;
    %284 = %255.0;
    %285 = bitwise_or(%262, %263) /* ty=Tensor[(15, 12, 4), int64] */;
    %286 = minimum(%266, %267) /* ty=Tensor[(15, 12, 4), uint64] */;
    %287 = divide(%272, %273) /* ty=Tensor[(15, 12, 4), float64] */;
    %288 = %280.9;
    (%281, %282, %var_3026, meta[relay.Constant][21] /* ty=Tensor[(1, 525), int16] */, %283, %var_3033, %284, %285, %286, %287, %288, %var_3064, %var_3065)
  };
  %289(%var_3083, %var_3084, %var_3085, %var_3086, %var_3087, %var_3088) /* ty=(Tensor[(5, 4, 6), float32], Tensor[(120), float32], Tensor[(15), float32], Tensor[(1, 525), int16], Tensor[(1, 2, 9), float32], Tensor[(18), float32], Tensor[(16, 16), float32], Tensor[(15, 12, 4), int64], Tensor[(15, 12, 4), uint64], Tensor[(15, 12, 4), float64], Tensor[(600), float32], Tensor[(1680), float64], Tensor[(600), float32]) */
}

def @func_5559(%var_5557: Tensor[(840), float32], %var_5558: Tensor[(15), float32]) -> (Tensor[(120), float32], Tensor[(14, 5, 3), bool], Tensor[(840), float32], Tensor[(15), float32], Tensor[(210), float32], Tensor[(3, 9, 5), uint8], Tensor[(45, 3), bool]) {
  @func_5555(%var_5557, %var_5558) /* ty=(Tensor[(120), float32], Tensor[(14, 5, 3), bool], Tensor[(840), float32], Tensor[(15), float32], Tensor[(210), float32], Tensor[(3, 9, 5), uint8], Tensor[(45, 3), bool]) */
}

def @func_5555(%var_5536: Tensor[(840), float32], %var_5537: Tensor[(15), float32]) -> (Tensor[(120), float32], Tensor[(14, 5, 3), bool], Tensor[(840), float32], Tensor[(15), float32], Tensor[(210), float32], Tensor[(3, 9, 5), uint8], Tensor[(45, 3), bool]) {
  %290 = cast(%var_5536, dtype="float32") /* ty=Tensor[(840), float32] */;
  %291 = cast(%var_5537, dtype="float32") /* ty=Tensor[(15), float32] */;
  %292 = cast(meta[relay.Constant][22] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %293 = reshape(%290, newshape=[12, 14, 5]) /* ty=Tensor[(12, 14, 5), float32] */;
  %294 = reshape(%291, newshape=[15]) /* ty=Tensor[(15), float32] */;
  %295 = reshape(%292, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %296 = @func_4908(%293, %294, %295) /* ty=(Tensor[(12, 14, 5), float32], Tensor[(12, 14, 5), bool], Tensor[(32), float32], Tensor[(14, 5, 3), bool], Tensor[(15), float32], Tensor[(210), float32]) */;
  %297 = cast(meta[relay.Constant][23] /* ty=Tensor[(45, 3), bool] */, dtype="bool") /* ty=Tensor[(45, 3), bool] */;
  %298 = reshape(%297, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), bool] */;
  %299 = @func_4122() /* ty=Tensor[(120), float32] */;
  %300 = %296.3;
  %301 = @func_1165(%298) /* ty=Tensor[(3, 9, 5), uint8] */;
  (%299, %300, %var_5536, %var_5537, meta[relay.Constant][22] /* ty=Tensor[(210), float32] */, %301, meta[relay.Constant][23] /* ty=Tensor[(45, 3), bool] */)
}

def @func_4475() -> (Tensor[(120), float64],) {
  %303 = fn () -> (Tensor[(120), float64],) {
    %302 = @func_2841() /* ty=Tensor[(120), float64] */;
    (%302,)
  };
  %303() /* ty=(Tensor[(120), float64],) */
}

def @func_6507(%var_6505: Tensor[(525), int16]) -> (Tensor[(120), float32], Tensor[(16, 16), float32], Tensor[(1680), float64], Tensor[(80), uint64], Tensor[(525), int16]) {
  @func_6504(%var_6505) /* ty=(Tensor[(120), float32], Tensor[(16, 16), float32], Tensor[(1680), float64], Tensor[(80), uint64], Tensor[(525), int16]) */
}

def @func_6663() -> (Tensor[(120), float32],) {
  %304 = @func_3539() /* ty=Tensor[(120), float32] */;
  (%304,)
}

def @func_7891() -> Tensor[(120), float32] {
  %306 = fn () -> Tensor[(120), float32] {
    %305 = @func_5757() /* ty=(Tensor[(120), float32],) */;
    %305.0
  };
  %306() /* ty=Tensor[(120), float32] */
}

def @func_6040() -> Tensor[(1, 12, 4), float32] {
  %308 = fn () -> Tensor[(1, 12, 4), float32] {
    %307 = cast(meta[relay.Constant][24] /* ty=Tensor[(1, 12, 4), float32] */, dtype="float32") /* ty=Tensor[(1, 12, 4), float32] */;
    atanh(%307) /* ty=Tensor[(1, 12, 4), float32] */
  };
  %308() /* ty=Tensor[(1, 12, 4), float32] */
}

def @func_7783(%var_7764: Tensor[(1, 13, 16), int8], %var_7765: Tensor[(16, 13, 16), int8], %var_7780: Tensor[(15), float32]) -> (Tensor[(16, 13, 16), int8], Tensor[(120), float32], Tensor[(15), float32], Tensor[(525), int16]) {
  %309 = cast(%var_7764, dtype="int8") /* ty=Tensor[(1, 13, 16), int8] */;
  %310 = cast(%var_7765, dtype="int8") /* ty=Tensor[(16, 13, 16), int8] */;
  %311 = cast(%var_7780, dtype="float32") /* ty=Tensor[(15), float32] */;
  %312 = cast(meta[relay.Constant][25] /* ty=Tensor[(525), int16] */, dtype="int16") /* ty=Tensor[(525), int16] */;
  %313 = reshape(%311, newshape=[15]) /* ty=Tensor[(15), float32] */;
  %314 = reshape(%312, newshape=[525]) /* ty=Tensor[(525), int16] */;
  %315 = @func_3179(%313, %314) /* ty=(Tensor[(120), float32], Tensor[(120), float32], Tensor[(15), float32], Tensor[(525), int16], Tensor[(5, 4, 6), float32], Tensor[(600), float32], Tensor[(15), int16]) */;
  %316 = bitwise_and(%309, %310) /* ty=Tensor[(16, 13, 16), int8] */;
  %317 = %315.0;
  (%316, %317, %var_7780, meta[relay.Constant][25] /* ty=Tensor[(525), int16] */)
}

def @func_7079() -> (Tensor[(120), float32],) {
  %319 = fn () -> (Tensor[(120), float32],) {
    %318 = @func_2891() /* ty=Tensor[(120), float32] */;
    (%318,)
  };
  %319() /* ty=(Tensor[(120), float32],) */
}

def @func_4122() -> Tensor[(120), float32] {
  %320 = @func_3381() /* ty=(Tensor[(120), float32],) */;
  %320.0
}

def @func_5702() -> (Tensor[(120), float32],) {
  %323 = fn () -> (Tensor[(120), float32],) {
    %321 = @func_5102() /* ty=(Tensor[(120), float32],) */;
    %322 = %321.0;
    (%322,)
  };
  %323() /* ty=(Tensor[(120), float32],) */
}

def @func_7982() -> (Tensor[(120), float32],) {
  %324 = @func_5701() /* ty=(Tensor[(120), float32],) */;
  %325 = %324.0;
  (%325,)
}

def @func_7788(%var_7785: Tensor[(1, 13, 16), int8], %var_7786: Tensor[(16, 13, 16), int8], %var_7787: Tensor[(15), float32]) -> (Tensor[(16, 13, 16), int8], Tensor[(120), float32], Tensor[(15), float32], Tensor[(525), int16]) {
  @func_7783(%var_7785, %var_7786, %var_7787) /* ty=(Tensor[(16, 13, 16), int8], Tensor[(120), float32], Tensor[(15), float32], Tensor[(525), int16]) */
}

def @func_1738(%var_1736: Tensor[(1, 5, 3), float32], %var_1737: Tensor[(14, 5, 3), float32]) -> Tensor[(14, 5, 3), bool] {
  %330 = fn (%var_1715: Tensor[(1, 5, 3), float32], %var_1720: Tensor[(14, 5, 3), float32]) -> Tensor[(14, 5, 3), bool] {
    %326 = cast(%var_1715, dtype="float32") /* ty=Tensor[(1, 5, 3), float32] */;
    %327 = sin(%326) /* ty=Tensor[(1, 5, 3), float32] */;
    %328 = cast(%327, dtype="bool") /* ty=Tensor[(1, 5, 3), bool] */;
    %329 = cast(%var_1720, dtype="bool") /* ty=Tensor[(14, 5, 3), bool] */;
    greater_equal(%328, %329) /* ty=Tensor[(14, 5, 3), bool] */
  };
  %330(%var_1736, %var_1737) /* ty=Tensor[(14, 5, 3), bool] */
}

def @func_1896(%var_1894: Tensor[(4, 12), float64]) -> (Tensor[(16, 16), float32], Tensor[(6, 4, 2), float64], Tensor[(4, 12), float64]) {
  @func_1893(%var_1894) /* ty=(Tensor[(16, 16), float32], Tensor[(6, 4, 2), float64], Tensor[(4, 12), float64]) */
}

def @func_5202(%var_5189: Tensor[(15), float32]) -> (Tensor[(11, 11, 12), int64], Tensor[(11, 11, 12), float32], Tensor[(120), float32], Tensor[(14, 5, 3), bool], Tensor[(15), float32], Tensor[(210), float32], Tensor[(120), float32]) {
  %331 = cast(meta[relay.Constant][27] /* ty=Tensor[(11, 11, 12), int64] */, dtype="int64") /* ty=Tensor[(11, 11, 12), int64] */;
  %332 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(11, 11, 12), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %333 = cast(meta[relay.Constant][26] /* ty=Tensor[(11, 11, 12), int64] */, dtype="int64") /* ty=Tensor[(11, 11, 12), int64] */;
  %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %335 = cast(meta[relay.Constant][26] /* ty=Tensor[(11, 11, 12), int64] */, dtype="float32") /* ty=Tensor[(11, 11, 12), float32] */;
  %336 = @func_3648() /* ty=(Tensor[(120), float32],) */;
  %337 = cast(%var_5189, dtype="float32") /* ty=Tensor[(15), float32] */;
  %338 = cast(meta[relay.Constant][28] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %339 = reshape(%337, newshape=[1, 5, 3]) /* ty=Tensor[(1, 5, 3), float32] */;
  %340 = reshape(%338, newshape=[14, 5, 3]) /* ty=Tensor[(14, 5, 3), float32] */;
  %341 = @func_2809() /* ty=(Tensor[(120), float32],) */;
  %342 = logical_xor(%333, %334) /* ty=Tensor[(11, 11, 12), int64] */;
  %343 = erf(%335) /* ty=Tensor[(11, 11, 12), float32] */;
  %344 = %336.0;
  %345 = @func_1735(%339, %340) /* ty=Tensor[(14, 5, 3), bool] */;
  %346 = %341.0;
  (%342, %343, %344, %345, %var_5189, meta[relay.Constant][28] /* ty=Tensor[(210), float32] */, %346)
}

def @func_1501(%var_1499: Tensor[(2, 1, 16), float32]) -> Tensor[(2, ?, 16), float32] {
  @func_1498(%var_1499) /* ty=Tensor[(2, ?, 16), float32] */
}

def @func_3450() -> (Tensor[(120), float32],) {
  @func_3448() /* ty=(Tensor[(120), float32],) */
}

def @func_6394() -> (Tensor[(16, 16), float32], Tensor[(16, 16), float32]) {
  %347 = @func_3695() /* ty=(Tensor[(120), float32], Tensor[(16, 16), float32]) */;
  %348 = @func_3555() /* ty=Tensor[(16, 16), float32] */;
  %349 = %347.1;
  (%348, %349)
}

def @func_4317(%var_4315: Tensor[(11, 6, 12), float64], %var_4316: Tensor[(15), int16]) -> (Tensor[(120), float32], Tensor[(120), float32], Tensor[(5, 4, 6), float32], Tensor[(120), float32], Tensor[(120), float32], Tensor[(784, 1), float64], Tensor[(120), float32], Tensor[(11, 6, 12), float32], Tensor[(2, 6, 16), float64], Tensor[(192), float32], Tensor[(15), int16], Tensor[(15, 1, 1), int16], Tensor[(5, 4, 6), int16]) {
  %384 = fn (%var_4213: Tensor[(11, 6, 12), float64], %var_4283: Tensor[(15), int16]) -> (Tensor[(120), float32], Tensor[(120), float32], Tensor[(5, 4, 6), float32], Tensor[(120), float32], Tensor[(120), float32], Tensor[(784, 1), float64], Tensor[(120), float32], Tensor[(11, 6, 12), float32], Tensor[(2, 6, 16), float64], Tensor[(192), float32], Tensor[(15), int16], Tensor[(15, 1, 1), int16], Tensor[(5, 4, 6), int16]) {
    %350 = @func_3240() /* ty=(Tensor[(120), float32], Tensor[(120), float32]) */;
    %351 = @func_3381() /* ty=(Tensor[(120), float32],) */;
    %352 = @func_1670() /* ty=(Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(5, 4, 6), float32]) */;
    %353 = @func_4198() /* ty=(Tensor[(120), float32],) */;
    %354 = cast(meta[relay.Constant][29] /* ty=Tensor[(784, 1), float64] */, dtype="float64") /* ty=Tensor[(784, 1), float64] */;
    %355 = reshape(%354, newshape=[14, 14, 4]) /* ty=Tensor[(14, 14, 4), float64] */;
    %356 = @func_3762(%355) /* ty=(Tensor[(120), float32], Tensor[(14, 14, 4), float32]) */;
    %357 = @func_3648() /* ty=(Tensor[(120), float32],) */;
    %358 = cast(%var_4213, dtype="float64") /* ty=Tensor[(11, 6, 12), float64] */;
    %359 = tan(%358) /* ty=Tensor[(11, 6, 12), float64] */;
    %360 = cast(%359, dtype="float64") /* ty=Tensor[(11, 6, 12), float64] */;
    %361 = atanh(%360) /* ty=Tensor[(11, 6, 12), float64] */;
    %362 = cast(%361, dtype="float32") /* ty=Tensor[(11, 6, 12), float32] */;
    %363 = cast(meta[relay.Constant][30] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
    %364 = cast(%var_4283, dtype="int16") /* ty=Tensor[(15), int16] */;
    %365 = reshape(%363, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float32] */;
    %366 = reshape(%364, newshape=[5, 3]) /* ty=Tensor[(5, 3), int16] */;
    %367 = @func_682(%365, %366) /* ty=(Tensor[(2, 6, 16), bool], Tensor[(2, 6, 16), float64], Tensor[(15, 1, 1), int16], Tensor[(5, 3), int16], Tensor[(525), int16], Tensor[(2, 6, 16), bool], Tensor[(15, 1, 1), int16]) */;
    %368 = %367.1;
    %369 = cast(%368, dtype="float32") /* ty=Tensor[(2, 6, 16), float32] */;
    %370 = cast(%var_4283, dtype="int16") /* ty=Tensor[(15), int16] */;
    %371 = reshape(%369, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float32] */;
    %372 = reshape(%370, newshape=[5, 3]) /* ty=Tensor[(5, 3), int16] */;
    %373 = @func_682(%371, %372) /* ty=(Tensor[(2, 6, 16), bool], Tensor[(2, 6, 16), float64], Tensor[(15, 1, 1), int16], Tensor[(5, 3), int16], Tensor[(525), int16], Tensor[(2, 6, 16), bool], Tensor[(15, 1, 1), int16]) */;
    %374 = @func_2487() /* ty=(Tensor[(16, 16), float32], Tensor[(5, 4, 6), int16]) */;
    %375 = %350.1;
    %376 = %351.0;
    %377 = %352.2;
    %378 = %353.0;
    %379 = %356.0;
    %380 = %357.0;
    %381 = acos(%362) /* ty=Tensor[(11, 6, 12), float32] */;
    %382 = %373.2;
    %383 = %374.1;
    (%375, %376, %377, %378, %379, meta[relay.Constant][29] /* ty=Tensor[(784, 1), float64] */, %380, %381, %368, meta[relay.Constant][30] /* ty=Tensor[(192), float32] */, %var_4283, %382, %383)
  };
  %384(%var_4315, %var_4316) /* ty=(Tensor[(120), float32], Tensor[(120), float32], Tensor[(5, 4, 6), float32], Tensor[(120), float32], Tensor[(120), float32], Tensor[(784, 1), float64], Tensor[(120), float32], Tensor[(11, 6, 12), float32], Tensor[(2, 6, 16), float64], Tensor[(192), float32], Tensor[(15), int16], Tensor[(15, 1, 1), int16], Tensor[(5, 4, 6), int16]) */
}

def @func_3300(%var_3298: Tensor[(2, 4, 10), uint64], %var_3299: Tensor[(12, 140), float64]) -> (Tensor[(2, 4, 10), bool], Tensor[(2, 4, 10), int16], Tensor[(15, 1, 1), int16], Tensor[(12, 140), float64], Tensor[(15), int16], Tensor[(525), int16]) {
  %405 = fn (%var_3282: Tensor[(2, 4, 10), uint64], %var_3288: Tensor[(12, 140), float64]) -> (Tensor[(2, 4, 10), bool], Tensor[(2, 4, 10), int16], Tensor[(15, 1, 1), int16], Tensor[(12, 140), float64], Tensor[(15), int16], Tensor[(525), int16]) {
    %385 = cast(meta[relay.Constant][32] /* ty=Tensor[(2, 4, 10), uint64] */, dtype="bool") /* ty=Tensor[(2, 4, 10), bool] */;
    %386 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(2, 4, 10), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %387 = cast(meta[relay.Constant][31] /* ty=Tensor[(2, 4, 10), uint64] */, dtype="bool") /* ty=Tensor[(2, 4, 10), bool] */;
    %388 = dyn.reshape(%385, %386, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %389 = cast(%var_3282, dtype="int16") /* ty=Tensor[(2, 4, 10), int16] */;
    %390 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(2, 4, 10), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %391 = cast(meta[relay.Constant][32] /* ty=Tensor[(2, 4, 10), uint64] */, dtype="int16") /* ty=Tensor[(2, 4, 10), int16] */;
    %392 = dyn.reshape(%389, %390, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %393 = cast(%var_3288, dtype="float64") /* ty=Tensor[(12, 140), float64] */;
    %394 = cast(meta[relay.Constant][33] /* ty=Tensor[(15), int16] */, dtype="int16") /* ty=Tensor[(15), int16] */;
    %395 = cast(meta[relay.Constant][34] /* ty=Tensor[(525), int16] */, dtype="int16") /* ty=Tensor[(525), int16] */;
    %396 = cast(%var_3288, dtype="float64") /* ty=Tensor[(12, 140), float64] */;
    %397 = reshape(%393, newshape=[7, 16, 15]) /* ty=Tensor[(7, 16, 15), float64] */;
    %398 = reshape(%394, newshape=[15]) /* ty=Tensor[(15), int16] */;
    %399 = reshape(%395, newshape=[525]) /* ty=Tensor[(525), int16] */;
    %400 = reshape(%396, newshape=[7, 16, 15]) /* ty=Tensor[(7, 16, 15), float64] */;
    %401 = @func_985(%397, %398, %399, %400) /* ty=(Tensor[(2, 6, 16), bool], Tensor[(192), float32], Tensor[(15), int16], Tensor[(15, 1, 1), int16], Tensor[(525), int16], Tensor[(525), int16], Tensor[(2, 6, 16), bool], Tensor[(2, 6, 16), bool], Tensor[(5, 15, 7), int64], Tensor[(15, 1, 1), int16], Tensor[(525), int16], Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64], Tensor[(7, 16, 15), uint8], Tensor[(15, 1, 1), int16], Tensor[(2, 6, 16), bool], Tensor[(7, 16, 15), int64], Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(7, 16, 15), float64], Tensor[(7, 16, 15), float32], Tensor[(15, 1, 1), int16]) */;
    %402 = greater(%387, %388) /* ty=Tensor[(2, 4, 10), bool] */;
    %403 = right_shift(%391, %392) /* ty=Tensor[(2, 4, 10), int16] */;
    %404 = %401.11;
    (%402, %403, %404, %var_3288, meta[relay.Constant][33] /* ty=Tensor[(15), int16] */, meta[relay.Constant][34] /* ty=Tensor[(525), int16] */)
  };
  %405(%var_3298, %var_3299) /* ty=(Tensor[(2, 4, 10), bool], Tensor[(2, 4, 10), int16], Tensor[(15, 1, 1), int16], Tensor[(12, 140), float64], Tensor[(15), int16], Tensor[(525), int16]) */
}

def @func_7837() -> (Tensor[(120), float32], Tensor[(16, 16), float32], Tensor[(2, 24), uint32]) {
  %419 = fn () -> (Tensor[(120), float32], Tensor[(16, 16), float32], Tensor[(2, 24), uint32]) {
    %406 = @func_5146() /* ty=(Tensor[(120), float32], Tensor[(120), float32], Tensor[(?, 48), bool]) */;
    %407 = cast(meta[relay.Constant][35] /* ty=Tensor[(2, 24), float64] */, dtype="float64") /* ty=Tensor[(2, 24), float64] */;
    %408 = reshape(%407, newshape=[4, 12]) /* ty=Tensor[(4, 12), float64] */;
    %409 = @func_1893(%408) /* ty=(Tensor[(16, 16), float32], Tensor[(6, 4, 2), float64], Tensor[(4, 12), float64]) */;
    %410 = cast(meta[relay.Constant][35] /* ty=Tensor[(2, 24), float64] */, dtype="float32") /* ty=Tensor[(2, 24), float32] */;
    %411 = tan(%410) /* ty=Tensor[(2, 24), float32] */;
    %412 = cast(meta[relay.Constant][35] /* ty=Tensor[(2, 24), float64] */, dtype="uint32") /* ty=Tensor[(2, 24), uint32] */;
    %413 = shape_of(%411, dtype="int32") /* ty=Tensor[(2), int32] */;
    %414 = cast(%411, dtype="uint32") /* ty=Tensor[(2, 24), uint32] */;
    %415 = dyn.reshape(%412, %413, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
    %416 = %406.1;
    %417 = %409.0;
    %418 = left_shift(%414, %415) /* ty=Tensor[(2, 24), uint32] */;
    (%416, %417, %418)
  };
  %419() /* ty=(Tensor[(120), float32], Tensor[(16, 16), float32], Tensor[(2, 24), uint32]) */
}

def @func_1893(%var_1860: Tensor[(4, 12), float64]) -> (Tensor[(16, 16), float32], Tensor[(6, 4, 2), float64], Tensor[(4, 12), float64]) {
  %420 = @func_1670() /* ty=(Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(5, 4, 6), float32]) */;
  %421 = cast(%var_1860, dtype="float64") /* ty=Tensor[(4, 12), float64] */;
  %422 = cast(%var_1860, dtype="float64") /* ty=Tensor[(4, 12), float64] */;
  %423 = reshape(%421, newshape=[6, 4, 2]) /* ty=Tensor[(6, 4, 2), float64] */;
  %424 = reshape(%422, newshape=[6, 4, 2]) /* ty=Tensor[(6, 4, 2), float64] */;
  %425 = @func_1395(%423, %424) /* ty=(Tensor[(6, 4, 2), float64], Tensor[(6, 4, 2), float64]) */;
  %426 = %420.0;
  %427 = %425.0;
  (%426, %427, %var_1860)
}

def @func_3578() -> Tensor[(120), float32] {
  @func_3576() /* ty=Tensor[(120), float32] */
}

def @func_8172(%var_8170: Tensor[(2, 14, 16), float64], %var_8171: Tensor[(2, 14, 16), float64]) -> (Tensor[(120), float32], Tensor[(120), float64], Tensor[(2, 14, 16), int16], Tensor[(2, 14, 16), float64]) {
  %443 = fn (%var_8127: Tensor[(2, 14, 16), float64], %var_8128: Tensor[(2, 14, 16), float64]) -> (Tensor[(120), float32], Tensor[(120), float64], Tensor[(2, 14, 16), int16], Tensor[(2, 14, 16), float64]) {
    %428 = @func_3869() /* ty=(Tensor[(16, 16), float32], Tensor[(16, 16), float32], Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(120), float32], Tensor[(120), float32], Tensor[(15), float32], Tensor[(525), int16], Tensor[(120), float32], Tensor[(16, 16), float32]) */;
    %429 = cast(%var_8128, dtype="float64") /* ty=Tensor[(2, 14, 16), float64] */;
    %430 = shape_of(%var_8127, dtype="int32") /* ty=Tensor[(3), int32] */;
    %431 = cast(%var_8127, dtype="float64") /* ty=Tensor[(2, 14, 16), float64] */;
    %432 = dyn.reshape(%429, %430, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %433 = subtract(%431, %432) /* ty=Tensor[(2, 14, 16), float64] */;
    %434 = cast(%433, dtype="int16") /* ty=Tensor[(2, 14, 16), int16] */;
    %435 = shape_of(%var_8127, dtype="int32") /* ty=Tensor[(3), int32] */;
    %436 = cast(%var_8127, dtype="int16") /* ty=Tensor[(2, 14, 16), int16] */;
    %437 = dyn.reshape(%434, %435, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %438 = cast(%433, dtype="float64") /* ty=Tensor[(2, 14, 16), float64] */;
    %439 = %428.4;
    %440 = @func_2841() /* ty=Tensor[(120), float64] */;
    %441 = multiply(%436, %437) /* ty=Tensor[(2, 14, 16), int16] */;
    %442 = rsqrt(%438) /* ty=Tensor[(2, 14, 16), float64] */;
    (%439, %440, %441, %442)
  };
  %443(%var_8170, %var_8171) /* ty=(Tensor[(120), float32], Tensor[(120), float64], Tensor[(2, 14, 16), int16], Tensor[(2, 14, 16), float64]) */
}

def @func_5277(%var_5229: float64, %var_5230: Tensor[(24, 10), float64], %var_5268: Tensor[(525), float32]) -> (float64, Tensor[(24, 10), float64], Tensor[(15, 1), int16], Tensor[(525), float64], Tensor[(525), float32], Tensor[(525), bool]) {
  %444 = @func_3869() /* ty=(Tensor[(16, 16), float32], Tensor[(16, 16), float32], Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(120), float32], Tensor[(120), float32], Tensor[(15), float32], Tensor[(525), int16], Tensor[(120), float32], Tensor[(16, 16), float32]) */;
  %445 = %444.7;
  %446 = cast(meta[relay.Constant][37] /* ty=Tensor[(525), int16] */, dtype="float64") /* ty=Tensor[(525), float64] */;
  %447 = shape_of(%445, dtype="int32") /* ty=Tensor[(1), int32] */;
  %448 = cast(%445, dtype="float64") /* ty=Tensor[(525), float64] */;
  %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?), float64] */;
  %450 = cast(%445, dtype="float32") /* ty=Tensor[(525), float32] */;
  %451 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(525), int16] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %452 = cast(meta[relay.Constant][37] /* ty=Tensor[(525), int16] */, dtype="float32") /* ty=Tensor[(525), float32] */;
  %453 = dyn.reshape(%450, %451, newshape=[]) /* ty=Tensor[(?), float32] */;
  %454 = cast(%var_5229, dtype="float64") /* ty=float64 */;
  %455 = cast(%var_5230, dtype="float64") /* ty=Tensor[(24, 10), float64] */;
  %456 = cast(meta[relay.Constant][36] /* ty=Tensor[(15, 1), int16] */, dtype="int16") /* ty=Tensor[(15, 1), int16] */;
  %457 = cast(%445, dtype="int16") /* ty=Tensor[(525), int16] */;
  %458 = reshape(%454, newshape=[]) /* ty=float64 */;
  %459 = reshape(%455, newshape=[4, 4, 15]) /* ty=Tensor[(4, 4, 15), float64] */;
  %460 = reshape(%456, newshape=[15]) /* ty=Tensor[(15), int16] */;
  %461 = reshape(%457, newshape=[525]) /* ty=Tensor[(525), int16] */;
  %462 = @func_1041(%458, %459, %460, %461) /* ty=(Tensor[(4, 4, 15), float64], Tensor[(15, 1, 1), int16], Tensor[(192), float32], Tensor[(15), int16], Tensor[(5, 15, 7), int64], Tensor[(1680), float64], Tensor[(525), int16]) */;
  %463 = %462.6;
  %464 = cast(%463, dtype="float32") /* ty=Tensor[(525), float32] */;
  %465 = cos(%464) /* ty=Tensor[(525), float32] */;
  %466 = cast(%var_5268, dtype="bool") /* ty=Tensor[(525), bool] */;
  %467 = shape_of(%465, dtype="int32") /* ty=Tensor[(1), int32] */;
  %468 = cast(%465, dtype="bool") /* ty=Tensor[(525), bool] */;
  %469 = dyn.reshape(%466, %467, newshape=[]) /* ty=Tensor[(?), bool] */;
  %470 = power(%448, %449) /* ty=Tensor[(525), float64] */;
  %471 = divide(%452, %453) /* ty=Tensor[(525), float32] */;
  %472 = greater_equal(%468, %469) /* ty=Tensor[(525), bool] */;
  (%var_5229, %var_5230, meta[relay.Constant][36] /* ty=Tensor[(15, 1), int16] */, %470, %471, %472)
}

def @func_6902(%var_6871: Tensor[(720), float32], %var_6872: Tensor[(15), float32], %var_6873: Tensor[(18), float32]) -> (Tensor[(120), float32], Tensor[(120), float32], Tensor[(120), float64], Tensor[(1680), float32], Tensor[(18), float32], Tensor[(720), float32], Tensor[(15), float32], Tensor[(18), float32], Tensor[(6, 100), float32], Tensor[(120), float32]) {
  %473 = cast(meta[relay.Constant][38] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %474 = cast(meta[relay.Constant][38] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %475 = reshape(%473, newshape=[1680]) /* ty=Tensor[(1680), float64] */;
  %476 = reshape(%474, newshape=[1680]) /* ty=Tensor[(1680), float64] */;
  %477 = @func_2632(%475, %476) /* ty=(Tensor[(120), float32], Tensor[(525), int16], Tensor[(15), int16], Tensor[(525), int16], Tensor[(6, 4, 2), float64], Tensor[(48), float64], Tensor[(120), uint32], Tensor[(1680), bool]) */;
  %478 = cast(meta[relay.Constant][38] /* ty=Tensor[(1680), float64] */, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %479 = cast(%var_6871, dtype="float32") /* ty=Tensor[(720), float32] */;
  %480 = cast(%var_6872, dtype="float32") /* ty=Tensor[(15), float32] */;
  %481 = cast(%var_6873, dtype="float32") /* ty=Tensor[(18), float32] */;
  %482 = cast(%var_6871, dtype="float64") /* ty=Tensor[(720), float64] */;
  %483 = cast(meta[relay.Constant][38] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %484 = cast(meta[relay.Constant][39] /* ty=Tensor[(6, 100), float32] */, dtype="float32") /* ty=Tensor[(6, 100), float32] */;
  %485 = reshape(%479, newshape=[15, 12, 4]) /* ty=Tensor[(15, 12, 4), float32] */;
  %486 = reshape(%480, newshape=[15]) /* ty=Tensor[(15), float32] */;
  %487 = reshape(%481, newshape=[18]) /* ty=Tensor[(18), float32] */;
  %488 = reshape(%482, newshape=[15, 12, 4]) /* ty=Tensor[(15, 12, 4), float64] */;
  %489 = reshape(%483, newshape=[1680]) /* ty=Tensor[(1680), float64] */;
  %490 = reshape(%484, newshape=[600]) /* ty=Tensor[(600), float32] */;
  %491 = @func_3082(%485, %486, %487, %488, %489, %490) /* ty=(Tensor[(5, 4, 6), float32], Tensor[(120), float32], Tensor[(15), float32], Tensor[(1, 525), int16], Tensor[(1, 2, 9), float32], Tensor[(18), float32], Tensor[(16, 16), float32], Tensor[(15, 12, 4), int64], Tensor[(15, 12, 4), uint64], Tensor[(15, 12, 4), float64], Tensor[(600), float32], Tensor[(1680), float64], Tensor[(600), float32]) */;
  %492 = @func_6752() /* ty=Tensor[(120), float32] */;
  %493 = %477.0;
  %494 = @func_2841() /* ty=Tensor[(120), float64] */;
  %495 = sin(%478) /* ty=Tensor[(1680), float32] */;
  %496 = %491.5;
  %497 = @func_6752() /* ty=Tensor[(120), float32] */;
  (%492, %493, %494, %495, %496, %var_6871, %var_6872, %var_6873, meta[relay.Constant][39] /* ty=Tensor[(6, 100), float32] */, %497)
}

def @func_6205() -> (Tensor[(120), float32],) {
  %498 = @func_2292() /* ty=(Tensor[(120), float32],) */;
  %499 = %498.0;
  (%499,)
}

def @func_1671() -> (Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(5, 4, 6), float32]) {
  %507 = fn () -> (Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(5, 4, 6), float32]) {
    %500 = cast(meta[relay.Constant][40] /* ty=Tensor[(16, 16), float32] */, dtype="float32") /* ty=Tensor[(16, 16), float32] */;
    %501 = cast(meta[relay.Constant][41] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
    %502 = reshape(%501, newshape=[5, 4, 6]) /* ty=Tensor[(5, 4, 6), float32] */;
    %503 = @func_1138(%502) /* ty=Tensor[(5, 4, 6), float32] */;
    %504 = cast(%503, dtype="float32") /* ty=Tensor[(5, 4, 6), float32] */;
    %505 = sinh(%500) /* ty=Tensor[(16, 16), float32] */;
    %506 = cos(%504) /* ty=Tensor[(5, 4, 6), float32] */;
    (%505, meta[relay.Constant][41] /* ty=Tensor[(120), float32] */, %506)
  };
  %507() /* ty=(Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(5, 4, 6), float32]) */
}

def @func_5514(%var_5511: Tensor[(15), int16], %var_5512: Tensor[(720), float32], %var_5513: Tensor[(600), float32]) -> (Tensor[(120), float64], Tensor[(120), float32], Tensor[(7, 16, 15), uint8], Tensor[(1680), float64], Tensor[(15), int16], Tensor[(525), int16], Tensor[(7, 16, 15), int64], Tensor[(1680), float64], Tensor[(720), float32], Tensor[(18), float32], Tensor[(600), float32], Tensor[(120), float32]) {
  %548 = fn (%var_5457: Tensor[(15), int16], %var_5472: Tensor[(720), float32], %var_5474: Tensor[(600), float32]) -> (Tensor[(120), float64], Tensor[(120), float32], Tensor[(7, 16, 15), uint8], Tensor[(1680), float64], Tensor[(15), int16], Tensor[(525), int16], Tensor[(7, 16, 15), int64], Tensor[(1680), float64], Tensor[(720), float32], Tensor[(18), float32], Tensor[(600), float32], Tensor[(120), float32]) {
    %508 = @func_4474() /* ty=(Tensor[(120), float64],) */;
    %509 = @func_2145() /* ty=(Tensor[(120), float32],) */;
    %510 = cast(meta[relay.Constant][42] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
    %511 = cast(%var_5457, dtype="int16") /* ty=Tensor[(15), int16] */;
    %512 = cast(meta[relay.Constant][43] /* ty=Tensor[(525), int16] */, dtype="int16") /* ty=Tensor[(525), int16] */;
    %513 = cast(meta[relay.Constant][42] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
    %514 = reshape(%510, newshape=[7, 16, 15]) /* ty=Tensor[(7, 16, 15), float64] */;
    %515 = reshape(%511, newshape=[15]) /* ty=Tensor[(15), int16] */;
    %516 = reshape(%512, newshape=[525]) /* ty=Tensor[(525), int16] */;
    %517 = reshape(%513, newshape=[7, 16, 15]) /* ty=Tensor[(7, 16, 15), float64] */;
    %518 = @func_985(%514, %515, %516, %517) /* ty=(Tensor[(2, 6, 16), bool], Tensor[(192), float32], Tensor[(15), int16], Tensor[(15, 1, 1), int16], Tensor[(525), int16], Tensor[(525), int16], Tensor[(2, 6, 16), bool], Tensor[(2, 6, 16), bool], Tensor[(5, 15, 7), int64], Tensor[(15, 1, 1), int16], Tensor[(525), int16], Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64], Tensor[(7, 16, 15), uint8], Tensor[(15, 1, 1), int16], Tensor[(2, 6, 16), bool], Tensor[(7, 16, 15), int64], Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(7, 16, 15), float64], Tensor[(7, 16, 15), float32], Tensor[(15, 1, 1), int16]) */;
    %519 = cast(meta[relay.Constant][42] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
    %520 = cast(%var_5457, dtype="int16") /* ty=Tensor[(15), int16] */;
    %521 = cast(meta[relay.Constant][43] /* ty=Tensor[(525), int16] */, dtype="int16") /* ty=Tensor[(525), int16] */;
    %522 = cast(meta[relay.Constant][42] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
    %523 = reshape(%519, newshape=[7, 16, 15]) /* ty=Tensor[(7, 16, 15), float64] */;
    %524 = reshape(%520, newshape=[15]) /* ty=Tensor[(15), int16] */;
    %525 = reshape(%521, newshape=[525]) /* ty=Tensor[(525), int16] */;
    %526 = reshape(%522, newshape=[7, 16, 15]) /* ty=Tensor[(7, 16, 15), float64] */;
    %527 = @func_985(%523, %524, %525, %526) /* ty=(Tensor[(2, 6, 16), bool], Tensor[(192), float32], Tensor[(15), int16], Tensor[(15, 1, 1), int16], Tensor[(525), int16], Tensor[(525), int16], Tensor[(2, 6, 16), bool], Tensor[(2, 6, 16), bool], Tensor[(5, 15, 7), int64], Tensor[(15, 1, 1), int16], Tensor[(525), int16], Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64], Tensor[(7, 16, 15), uint8], Tensor[(15, 1, 1), int16], Tensor[(2, 6, 16), bool], Tensor[(7, 16, 15), int64], Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(7, 16, 15), float64], Tensor[(7, 16, 15), float32], Tensor[(15, 1, 1), int16]) */;
    %528 = cast(%var_5472, dtype="float32") /* ty=Tensor[(720), float32] */;
    %529 = cast(%var_5457, dtype="float32") /* ty=Tensor[(15), float32] */;
    %530 = cast(meta[relay.Constant][44] /* ty=Tensor[(18), float32] */, dtype="float32") /* ty=Tensor[(18), float32] */;
    %531 = cast(%var_5472, dtype="float64") /* ty=Tensor[(720), float64] */;
    %532 = %527.16;
    %533 = cast(%532, dtype="float64") /* ty=Tensor[(7, 16, 15), float64] */;
    %534 = cast(%var_5474, dtype="float32") /* ty=Tensor[(600), float32] */;
    %535 = reshape(%528, newshape=[15, 12, 4]) /* ty=Tensor[(15, 12, 4), float32] */;
    %536 = reshape(%529, newshape=[15]) /* ty=Tensor[(15), float32] */;
    %537 = reshape(%530, newshape=[18]) /* ty=Tensor[(18), float32] */;
    %538 = reshape(%531, newshape=[15, 12, 4]) /* ty=Tensor[(15, 12, 4), float64] */;
    %539 = reshape(%533, newshape=[1680]) /* ty=Tensor[(1680), float64] */;
    %540 = reshape(%534, newshape=[600]) /* ty=Tensor[(600), float32] */;
    %541 = @func_3082(%535, %536, %537, %538, %539, %540) /* ty=(Tensor[(5, 4, 6), float32], Tensor[(120), float32], Tensor[(15), float32], Tensor[(1, 525), int16], Tensor[(1, 2, 9), float32], Tensor[(18), float32], Tensor[(16, 16), float32], Tensor[(15, 12, 4), int64], Tensor[(15, 12, 4), uint64], Tensor[(15, 12, 4), float64], Tensor[(600), float32], Tensor[(1680), float64], Tensor[(600), float32]) */;
    %542 = @func_4198() /* ty=(Tensor[(120), float32],) */;
    %543 = %508.0;
    %544 = %509.0;
    %545 = %518.13;
    %546 = %541.11;
    %547 = %542.0;
    (%543, %544, %545, meta[relay.Constant][42] /* ty=Tensor[(1680), float64] */, %var_5457, meta[relay.Constant][43] /* ty=Tensor[(525), int16] */, %532, %546, %var_5472, meta[relay.Constant][44] /* ty=Tensor[(18), float32] */, %var_5474, %547)
  };
  %548(%var_5511, %var_5512, %var_5513) /* ty=(Tensor[(120), float64], Tensor[(120), float32], Tensor[(7, 16, 15), uint8], Tensor[(1680), float64], Tensor[(15), int16], Tensor[(525), int16], Tensor[(7, 16, 15), int64], Tensor[(1680), float64], Tensor[(720), float32], Tensor[(18), float32], Tensor[(600), float32], Tensor[(120), float32]) */
}

def @func_2843() -> Tensor[(120), float64] {
  @func_2841() /* ty=Tensor[(120), float64] */
}

def @func_1498(%var_1463: Tensor[(2, 1, 16), float32]) -> Tensor[(2, ?, 16), float32] {
  %549 = cast(%var_1463, dtype="float32") /* ty=Tensor[(2, 1, 16), float32] */;
  %550 = cos(%549) /* ty=Tensor[(2, 1, 16), float32] */;
  %551 = cast(%var_1463, dtype="uint8") /* ty=Tensor[(2, 1, 16), uint8] */;
  %552 = shape_of(%550, dtype="int32") /* ty=Tensor[(3), int32] */;
  %553 = cast(%550, dtype="uint8") /* ty=Tensor[(2, 1, 16), uint8] */;
  %554 = dyn.reshape(%551, %552, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %555 = minimum(%553, %554) /* ty=Tensor[(2, ?, 16), uint8] */;
  %556 = cast(%555, dtype="float32") /* ty=Tensor[(2, ?, 16), float32] */;
  atan(%556) /* ty=Tensor[(2, ?, 16), float32] */
}

def @func_2454(%var_2452: Tensor[(175, 3), int16], %var_2453: Tensor[(600), float32]) -> (Tensor[(120), float32], Tensor[(210), float32], Tensor[(15), float32], Tensor[(175, 3), int16], Tensor[(5, 15, 7), int64], Tensor[(5, 12, 10), float32], Tensor[(600), float32]) {
  %575 = fn (%var_2394: Tensor[(175, 3), int16], %var_2420: Tensor[(600), float32]) -> (Tensor[(120), float32], Tensor[(210), float32], Tensor[(15), float32], Tensor[(175, 3), int16], Tensor[(5, 15, 7), int64], Tensor[(5, 12, 10), float32], Tensor[(600), float32]) {
    %557 = @func_2145() /* ty=(Tensor[(120), float32],) */;
    %558 = cast(meta[relay.Constant][45] /* ty=Tensor[(15), float32] */, dtype="float32") /* ty=Tensor[(15), float32] */;
    %559 = cast(%var_2394, dtype="int16") /* ty=Tensor[(175, 3), int16] */;
    %560 = reshape(%558, newshape=[15]) /* ty=Tensor[(15), float32] */;
    %561 = reshape(%559, newshape=[1, 525]) /* ty=Tensor[(1, 525), int16] */;
    %562 = @func_2206(%560, %561) /* ty=(Tensor[(120), float32], Tensor[(14, 5, 3), bool], Tensor[(15), float32], Tensor[(210), float32], Tensor[(120), uint32], Tensor[(5, 15, 7), int64], Tensor[(1, 525), int16], Tensor[(120), float32]) */;
    %563 = cast(meta[relay.Constant][45] /* ty=Tensor[(15), float32] */, dtype="int16") /* ty=Tensor[(15), int16] */;
    %564 = cast(%var_2394, dtype="int16") /* ty=Tensor[(175, 3), int16] */;
    %565 = reshape(%563, newshape=[15, 1, 1]) /* ty=Tensor[(15, 1, 1), int16] */;
    %566 = reshape(%564, newshape=[5, 15, 7]) /* ty=Tensor[(5, 15, 7), int16] */;
    %567 = @func_341(%565, %566) /* ty=(Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64]) */;
    %568 = cast(%var_2420, dtype="float32") /* ty=Tensor[(600), float32] */;
    %569 = reshape(%568, newshape=[5, 12, 10]) /* ty=Tensor[(5, 12, 10), float32] */;
    %570 = @func_1606(%569) /* ty=(Tensor[(5, 12, 10), float32],) */;
    %571 = %557.0;
    %572 = %562.3;
    %573 = %567.1;
    %574 = %570.0;
    (%571, %572, meta[relay.Constant][45] /* ty=Tensor[(15), float32] */, %var_2394, %573, %574, %var_2420)
  };
  %575(%var_2452, %var_2453) /* ty=(Tensor[(120), float32], Tensor[(210), float32], Tensor[(15), float32], Tensor[(175, 3), int16], Tensor[(5, 15, 7), int64], Tensor[(5, 12, 10), float32], Tensor[(600), float32]) */
}

def @func_1399(%var_1397: Tensor[(6, 4, 2), float64], %var_1398: Tensor[(6, 4, 2), float64]) -> (Tensor[(6, 4, 2), float64], Tensor[(6, 4, 2), float64]) {
  @func_1395(%var_1397, %var_1398) /* ty=(Tensor[(6, 4, 2), float64], Tensor[(6, 4, 2), float64]) */
}

def @func_2892() -> Tensor[(120), float32] {
  %577 = fn () -> Tensor[(120), float32] {
    %576 = @func_2145() /* ty=(Tensor[(120), float32],) */;
    %576.0
  };
  %577() /* ty=Tensor[(120), float32] */
}

def @func_4973() -> (Tensor[(120), float32], Tensor[(120), float32]) {
  @func_4971() /* ty=(Tensor[(120), float32], Tensor[(120), float32]) */
}

def @func_1606(%var_1600: Tensor[(5, 12, 10), float32]) -> (Tensor[(5, 12, 10), float32],) {
  %578 = cast(%var_1600, dtype="float32") /* ty=Tensor[(5, 12, 10), float32] */;
  %579 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(5, 12, 10), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %580 = cast(meta[relay.Constant][46] /* ty=Tensor[(5, 12, 10), float32] */, dtype="float32") /* ty=Tensor[(5, 12, 10), float32] */;
  %581 = dyn.reshape(%578, %579, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %582 = floor_divide(%580, %581) /* ty=Tensor[(5, 12, 10), float32] */;
  (%582,)
}

def @func_2748() -> (Tensor[(16, 16), float32],) {
  %585 = fn () -> (Tensor[(16, 16), float32],) {
    %583 = @func_2487() /* ty=(Tensor[(16, 16), float32], Tensor[(5, 4, 6), int16]) */;
    %584 = %583.0;
    (%584,)
  };
  %585() /* ty=(Tensor[(16, 16), float32],) */
}

def @func_5920(%var_5866: Tensor[(3, 13, 11), float32], %var_5867: Tensor[(3, 13, 11), float32]) -> (Tensor[(32), float32], Tensor[(3, 13, 11), uint64], Tensor[(120), float64], Tensor[(1, 2, 9), float32], Tensor[(18), float32]) {
  %586 = @func_4562() /* ty=(Tensor[(120), float32], Tensor[(2, ?, 16), float32], Tensor[(32), float32]) */;
  %587 = cast(%var_5867, dtype="bool") /* ty=Tensor[(3, 13, 11), bool] */;
  %588 = shape_of(%var_5866, dtype="int32") /* ty=Tensor[(3), int32] */;
  %589 = cast(%var_5866, dtype="bool") /* ty=Tensor[(3, 13, 11), bool] */;
  %590 = dyn.reshape(%587, %588, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %591 = not_equal(%589, %590) /* ty=Tensor[(3, 13, 11), bool] */;
  %592 = cast(%591, dtype="uint64") /* ty=Tensor[(3, 13, 11), uint64] */;
  %593 = shape_of(%var_5867, dtype="int32") /* ty=Tensor[(3), int32] */;
  %594 = cast(%var_5867, dtype="uint64") /* ty=Tensor[(3, 13, 11), uint64] */;
  %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %596 = cast(meta[relay.Constant][47] /* ty=Tensor[(18), float32] */, dtype="float32") /* ty=Tensor[(18), float32] */;
  %597 = reshape(%596, newshape=[1, 2, 9]) /* ty=Tensor[(1, 2, 9), float32] */;
  %598 = @func_1836(%597) /* ty=(Tensor[(1, 2, 9), float32],) */;
  %599 = %586.2;
  %600 = bitwise_or(%594, %595) /* ty=Tensor[(3, 13, 11), uint64] */;
  %601 = @func_2841() /* ty=Tensor[(120), float64] */;
  %602 = %598.0;
  (%599, %600, %601, %602, meta[relay.Constant][47] /* ty=Tensor[(18), float32] */)
}

def @func_2293() -> (Tensor[(120), float32],) {
  %605 = fn () -> (Tensor[(120), float32],) {
    %603 = @func_2145() /* ty=(Tensor[(120), float32],) */;
    %604 = %603.0;
    (%604,)
  };
  %605() /* ty=(Tensor[(120), float32],) */
}

def @func_6073() -> Tensor[(16, 16), float32] {
  %606 = @func_4448() /* ty=(Tensor[(16, 16), float32],) */;
  %606.0
}

def @func_985(%var_790: Tensor[(7, 16, 15), float64], %var_795: Tensor[(15), int16], %var_804: Tensor[(525), int16], %var_896: Tensor[(7, 16, 15), float64]) -> (Tensor[(2, 6, 16), bool], Tensor[(192), float32], Tensor[(15), int16], Tensor[(15, 1, 1), int16], Tensor[(525), int16], Tensor[(525), int16], Tensor[(2, 6, 16), bool], Tensor[(2, 6, 16), bool], Tensor[(5, 15, 7), int64], Tensor[(15, 1, 1), int16], Tensor[(525), int16], Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64], Tensor[(7, 16, 15), uint8], Tensor[(15, 1, 1), int16], Tensor[(2, 6, 16), bool], Tensor[(7, 16, 15), int64], Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(7, 16, 15), float64], Tensor[(7, 16, 15), float32], Tensor[(15, 1, 1), int16]) {
  %607 = cast(meta[relay.Constant][48] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %608 = cast(%var_795, dtype="int16") /* ty=Tensor[(15), int16] */;
  %609 = reshape(%607, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float32] */;
  %610 = reshape(%608, newshape=[5, 3]) /* ty=Tensor[(5, 3), int16] */;
  %611 = @func_682(%609, %610) /* ty=(Tensor[(2, 6, 16), bool], Tensor[(2, 6, 16), float64], Tensor[(15, 1, 1), int16], Tensor[(5, 3), int16], Tensor[(525), int16], Tensor[(2, 6, 16), bool], Tensor[(15, 1, 1), int16]) */;
  %612 = cast(%var_795, dtype="int16") /* ty=Tensor[(15), int16] */;
  %613 = cast(%var_804, dtype="int16") /* ty=Tensor[(525), int16] */;
  %614 = reshape(%612, newshape=[15, 1, 1]) /* ty=Tensor[(15, 1, 1), int16] */;
  %615 = reshape(%613, newshape=[5, 15, 7]) /* ty=Tensor[(5, 15, 7), int16] */;
  %616 = @func_341(%614, %615) /* ty=(Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64]) */;
  %617 = %611.5;
  %618 = cast(%617, dtype="float32") /* ty=Tensor[(2, 6, 16), float32] */;
  %619 = cast(%var_795, dtype="int16") /* ty=Tensor[(15), int16] */;
  %620 = reshape(%618, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float32] */;
  %621 = reshape(%619, newshape=[5, 3]) /* ty=Tensor[(5, 3), int16] */;
  %622 = @func_682(%620, %621) /* ty=(Tensor[(2, 6, 16), bool], Tensor[(2, 6, 16), float64], Tensor[(15, 1, 1), int16], Tensor[(5, 3), int16], Tensor[(525), int16], Tensor[(2, 6, 16), bool], Tensor[(15, 1, 1), int16]) */;
  %623 = cast(meta[relay.Constant][48] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %624 = %616.0;
  %625 = cast(%624, dtype="int16") /* ty=Tensor[(15, 1, 1), int16] */;
  %626 = reshape(%623, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float32] */;
  %627 = reshape(%625, newshape=[5, 3]) /* ty=Tensor[(5, 3), int16] */;
  %628 = @func_682(%626, %627) /* ty=(Tensor[(2, 6, 16), bool], Tensor[(2, 6, 16), float64], Tensor[(15, 1, 1), int16], Tensor[(5, 3), int16], Tensor[(525), int16], Tensor[(2, 6, 16), bool], Tensor[(15, 1, 1), int16]) */;
  %629 = %628.5;
  %630 = cast(%629, dtype="float32") /* ty=Tensor[(2, 6, 16), float32] */;
  %631 = cast(%var_795, dtype="int16") /* ty=Tensor[(15), int16] */;
  %632 = reshape(%630, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float32] */;
  %633 = reshape(%631, newshape=[5, 3]) /* ty=Tensor[(5, 3), int16] */;
  %634 = @func_682(%632, %633) /* ty=(Tensor[(2, 6, 16), bool], Tensor[(2, 6, 16), float64], Tensor[(15, 1, 1), int16], Tensor[(5, 3), int16], Tensor[(525), int16], Tensor[(2, 6, 16), bool], Tensor[(15, 1, 1), int16]) */;
  %635 = cast(%var_795, dtype="int16") /* ty=Tensor[(15), int16] */;
  %636 = cast(%var_804, dtype="int16") /* ty=Tensor[(525), int16] */;
  %637 = reshape(%635, newshape=[15, 1, 1]) /* ty=Tensor[(15, 1, 1), int16] */;
  %638 = reshape(%636, newshape=[5, 15, 7]) /* ty=Tensor[(5, 15, 7), int16] */;
  %639 = @func_341(%637, %638) /* ty=(Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64]) */;
  %640 = cast(%var_795, dtype="int16") /* ty=Tensor[(15), int16] */;
  %641 = %622.4;
  %642 = cast(%641, dtype="int16") /* ty=Tensor[(525), int16] */;
  %643 = reshape(%640, newshape=[15, 1, 1]) /* ty=Tensor[(15, 1, 1), int16] */;
  %644 = reshape(%642, newshape=[5, 15, 7]) /* ty=Tensor[(5, 15, 7), int16] */;
  %645 = @func_341(%643, %644) /* ty=(Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64]) */;
  %646 = cast(meta[relay.Constant][48] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %647 = cast(%624, dtype="int16") /* ty=Tensor[(15, 1, 1), int16] */;
  %648 = reshape(%646, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float32] */;
  %649 = reshape(%647, newshape=[5, 3]) /* ty=Tensor[(5, 3), int16] */;
  %650 = @func_682(%648, %649) /* ty=(Tensor[(2, 6, 16), bool], Tensor[(2, 6, 16), float64], Tensor[(15, 1, 1), int16], Tensor[(5, 3), int16], Tensor[(525), int16], Tensor[(2, 6, 16), bool], Tensor[(15, 1, 1), int16]) */;
  %651 = cast(meta[relay.Constant][48] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %652 = %645.0;
  %653 = cast(%652, dtype="int16") /* ty=Tensor[(15, 1, 1), int16] */;
  %654 = reshape(%651, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float32] */;
  %655 = reshape(%653, newshape=[5, 3]) /* ty=Tensor[(5, 3), int16] */;
  %656 = @func_682(%654, %655) /* ty=(Tensor[(2, 6, 16), bool], Tensor[(2, 6, 16), float64], Tensor[(15, 1, 1), int16], Tensor[(5, 3), int16], Tensor[(525), int16], Tensor[(2, 6, 16), bool], Tensor[(15, 1, 1), int16]) */;
  %657 = cast(%652, dtype="int16") /* ty=Tensor[(15, 1, 1), int16] */;
  %658 = cast(%641, dtype="int16") /* ty=Tensor[(525), int16] */;
  %659 = reshape(%657, newshape=[15, 1, 1]) /* ty=Tensor[(15, 1, 1), int16] */;
  %660 = reshape(%658, newshape=[5, 15, 7]) /* ty=Tensor[(5, 15, 7), int16] */;
  %661 = @func_341(%659, %660) /* ty=(Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64]) */;
  %662 = cast(%var_790, dtype="float64") /* ty=Tensor[(7, 16, 15), float64] */;
  %663 = asin(%662) /* ty=Tensor[(7, 16, 15), float64] */;
  %664 = cast(%663, dtype="float64") /* ty=Tensor[(7, 16, 15), float64] */;
  %665 = sinh(%664) /* ty=Tensor[(7, 16, 15), float64] */;
  %666 = cast(meta[relay.Constant][49] /* ty=Tensor[(7, 16, 15), float64] */, dtype="bool") /* ty=Tensor[(7, 16, 15), bool] */;
  %667 = shape_of(%665, dtype="int32") /* ty=Tensor[(3), int32] */;
  %668 = cast(%665, dtype="bool") /* ty=Tensor[(7, 16, 15), bool] */;
  %669 = dyn.reshape(%666, %667, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %670 = logical_and(%668, %669) /* ty=Tensor[(7, 16, 15), bool] */;
  %671 = cast(%665, dtype="uint8") /* ty=Tensor[(7, 16, 15), uint8] */;
  %672 = shape_of(%670, dtype="int32") /* ty=Tensor[(3), int32] */;
  %673 = cast(%670, dtype="uint8") /* ty=Tensor[(7, 16, 15), uint8] */;
  %674 = dyn.reshape(%671, %672, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %675 = cast(%652, dtype="int16") /* ty=Tensor[(15, 1, 1), int16] */;
  %676 = %639.1;
  %677 = cast(%676, dtype="int16") /* ty=Tensor[(5, 15, 7), int16] */;
  %678 = reshape(%675, newshape=[15, 1, 1]) /* ty=Tensor[(15, 1, 1), int16] */;
  %679 = reshape(%677, newshape=[5, 15, 7]) /* ty=Tensor[(5, 15, 7), int16] */;
  %680 = @func_341(%678, %679) /* ty=(Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64]) */;
  %681 = cast(%629, dtype="float32") /* ty=Tensor[(2, 6, 16), float32] */;
  %682 = %680.0;
  %683 = cast(%682, dtype="int16") /* ty=Tensor[(15, 1, 1), int16] */;
  %684 = reshape(%681, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float32] */;
  %685 = reshape(%683, newshape=[5, 3]) /* ty=Tensor[(5, 3), int16] */;
  %686 = @func_682(%684, %685) /* ty=(Tensor[(2, 6, 16), bool], Tensor[(2, 6, 16), float64], Tensor[(15, 1, 1), int16], Tensor[(5, 3), int16], Tensor[(525), int16], Tensor[(2, 6, 16), bool], Tensor[(15, 1, 1), int16]) */;
  %687 = cast(%663, dtype="float64") /* ty=Tensor[(7, 16, 15), float64] */;
  %688 = asinh(%687) /* ty=Tensor[(7, 16, 15), float64] */;
  %689 = cast(%var_896, dtype="int64") /* ty=Tensor[(7, 16, 15), int64] */;
  %690 = shape_of(%688, dtype="int32") /* ty=Tensor[(3), int32] */;
  %691 = cast(%688, dtype="int64") /* ty=Tensor[(7, 16, 15), int64] */;
  %692 = dyn.reshape(%689, %690, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %693 = cast(%652, dtype="int16") /* ty=Tensor[(15, 1, 1), int16] */;
  %694 = cast(%var_804, dtype="int16") /* ty=Tensor[(525), int16] */;
  %695 = reshape(%693, newshape=[15, 1, 1]) /* ty=Tensor[(15, 1, 1), int16] */;
  %696 = reshape(%694, newshape=[5, 15, 7]) /* ty=Tensor[(5, 15, 7), int16] */;
  %697 = @func_341(%695, %696) /* ty=(Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64]) */;
  %698 = cast(%682, dtype="int16") /* ty=Tensor[(15, 1, 1), int16] */;
  %699 = cast(%641, dtype="int16") /* ty=Tensor[(525), int16] */;
  %700 = reshape(%698, newshape=[15, 1, 1]) /* ty=Tensor[(15, 1, 1), int16] */;
  %701 = reshape(%699, newshape=[5, 15, 7]) /* ty=Tensor[(5, 15, 7), int16] */;
  %702 = @func_341(%700, %701) /* ty=(Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64]) */;
  %703 = %697.0;
  %704 = cast(%703, dtype="int16") /* ty=Tensor[(15, 1, 1), int16] */;
  %705 = cast(%641, dtype="int16") /* ty=Tensor[(525), int16] */;
  %706 = reshape(%704, newshape=[15, 1, 1]) /* ty=Tensor[(15, 1, 1), int16] */;
  %707 = reshape(%705, newshape=[5, 15, 7]) /* ty=Tensor[(5, 15, 7), int16] */;
  %708 = @func_341(%706, %707) /* ty=(Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64]) */;
  %709 = cast(%652, dtype="int16") /* ty=Tensor[(15, 1, 1), int16] */;
  %710 = cast(%var_804, dtype="int16") /* ty=Tensor[(525), int16] */;
  %711 = reshape(%709, newshape=[15, 1, 1]) /* ty=Tensor[(15, 1, 1), int16] */;
  %712 = reshape(%710, newshape=[5, 15, 7]) /* ty=Tensor[(5, 15, 7), int16] */;
  %713 = @func_341(%711, %712) /* ty=(Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64]) */;
  %714 = cast(%652, dtype="int16") /* ty=Tensor[(15, 1, 1), int16] */;
  %715 = cast(%var_804, dtype="int16") /* ty=Tensor[(525), int16] */;
  %716 = reshape(%714, newshape=[15, 1, 1]) /* ty=Tensor[(15, 1, 1), int16] */;
  %717 = reshape(%715, newshape=[5, 15, 7]) /* ty=Tensor[(5, 15, 7), int16] */;
  %718 = @func_341(%716, %717) /* ty=(Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64]) */;
  %719 = cast(%663, dtype="float64") /* ty=Tensor[(7, 16, 15), float64] */;
  %720 = cast(%670, dtype="float32") /* ty=Tensor[(7, 16, 15), float32] */;
  %721 = cast(%682, dtype="int16") /* ty=Tensor[(15, 1, 1), int16] */;
  %722 = %718.1;
  %723 = cast(%722, dtype="int16") /* ty=Tensor[(5, 15, 7), int16] */;
  %724 = reshape(%721, newshape=[15, 1, 1]) /* ty=Tensor[(15, 1, 1), int16] */;
  %725 = reshape(%723, newshape=[5, 15, 7]) /* ty=Tensor[(5, 15, 7), int16] */;
  %726 = @func_341(%724, %725) /* ty=(Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64]) */;
  %727 = %634.0;
  %728 = %650.4;
  %729 = %656.6;
  %730 = %661.1;
  %731 = multiply(%673, %674) /* ty=Tensor[(7, 16, 15), uint8] */;
  %732 = %686.0;
  %733 = right_shift(%691, %692) /* ty=Tensor[(7, 16, 15), int64] */;
  %734 = %702.1;
  %735 = %708.1;
  %736 = %713.1;
  %737 = rsqrt(%719) /* ty=Tensor[(7, 16, 15), float64] */;
  %738 = sigmoid(%720) /* ty=Tensor[(7, 16, 15), float32] */;
  %739 = %726.0;
  (%617, meta[relay.Constant][48] /* ty=Tensor[(192), float32] */, %var_795, %624, %var_804, %641, %629, %727, %676, %652, %728, %729, %730, %731, %682, %732, %733, %703, %734, %735, %736, %722, %737, %738, %739)
}

def @func_4198() -> (Tensor[(120), float32],) {
  %740 = @func_3695() /* ty=(Tensor[(120), float32], Tensor[(16, 16), float32]) */;
  %741 = %740.0;
  (%741,)
}

def @func_8069() -> Tensor[(16, 16), float32] {
  @func_3555() /* ty=Tensor[(16, 16), float32] */
}

def @func_2206(%var_2170: Tensor[(15), float32], %var_2195: Tensor[(1, 525), int16]) -> (Tensor[(120), float32], Tensor[(14, 5, 3), bool], Tensor[(15), float32], Tensor[(210), float32], Tensor[(120), uint32], Tensor[(5, 15, 7), int64], Tensor[(1, 525), int16], Tensor[(120), float32]) {
  %742 = @func_2145() /* ty=(Tensor[(120), float32],) */;
  %743 = cast(%var_2170, dtype="float32") /* ty=Tensor[(15), float32] */;
  %744 = cast(meta[relay.Constant][50] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %745 = reshape(%743, newshape=[1, 5, 3]) /* ty=Tensor[(1, 5, 3), float32] */;
  %746 = reshape(%744, newshape=[14, 5, 3]) /* ty=Tensor[(14, 5, 3), float32] */;
  %747 = %742.0;
  %748 = cast(%747, dtype="float32") /* ty=Tensor[(120), float32] */;
  %749 = reshape(%748, newshape=[120]) /* ty=Tensor[(120), float32] */;
  %750 = cast(%var_2170, dtype="int16") /* ty=Tensor[(15), int16] */;
  %751 = cast(%var_2195, dtype="int16") /* ty=Tensor[(1, 525), int16] */;
  %752 = reshape(%750, newshape=[15, 1, 1]) /* ty=Tensor[(15, 1, 1), int16] */;
  %753 = reshape(%751, newshape=[5, 15, 7]) /* ty=Tensor[(5, 15, 7), int16] */;
  %754 = @func_341(%752, %753) /* ty=(Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64]) */;
  %755 = @func_2145() /* ty=(Tensor[(120), float32],) */;
  %756 = @func_1735(%745, %746) /* ty=Tensor[(14, 5, 3), bool] */;
  %757 = @func_2018(%749) /* ty=Tensor[(120), uint32] */;
  %758 = %754.1;
  %759 = %755.0;
  (%747, %756, %var_2170, meta[relay.Constant][50] /* ty=Tensor[(210), float32] */, %757, %758, %var_2195, %759)
}

def @func_5991(%var_5988: Tensor[(2, 300), float32], %var_5989: Tensor[(960), float64], %var_5990: Tensor[(15), int16]) -> (Tensor[(120), float32], Tensor[(5, 4, 6), float32], Tensor[(2, 300), float32], Tensor[(960), float64], Tensor[(15), int16], Tensor[(120), float32]) {
  %773 = fn (%var_5959: Tensor[(2, 300), float32], %var_5960: Tensor[(960), float64], %var_5961: Tensor[(15), int16]) -> (Tensor[(120), float32], Tensor[(5, 4, 6), float32], Tensor[(2, 300), float32], Tensor[(960), float64], Tensor[(15), int16], Tensor[(120), float32]) {
    %760 = @func_5146() /* ty=(Tensor[(120), float32], Tensor[(120), float32], Tensor[(?, 48), bool]) */;
    %761 = cast(%var_5959, dtype="float32") /* ty=Tensor[(2, 300), float32] */;
    %762 = cast(%var_5960, dtype="float64") /* ty=Tensor[(960), float64] */;
    %763 = cast(%var_5961, dtype="int16") /* ty=Tensor[(15), int16] */;
    %764 = cast(%var_5960, dtype="float64") /* ty=Tensor[(960), float64] */;
    %765 = reshape(%761, newshape=[600]) /* ty=Tensor[(600), float32] */;
    %766 = reshape(%762, newshape=[16, 5, 12]) /* ty=Tensor[(16, 5, 12), float64] */;
    %767 = reshape(%763, newshape=[15]) /* ty=Tensor[(15), int16] */;
    %768 = reshape(%764, newshape=[16, 5, 12]) /* ty=Tensor[(16, 5, 12), float64] */;
    %769 = @func_4711(%765, %766, %767, %768) /* ty=(Tensor[(5, 4, 6), float32], Tensor[(525, 1), int16], Tensor[(600), float32], Tensor[(16, 5, 12), bool], Tensor[(16, 5, 12), uint64], Tensor[(15, 1, 1), int16], Tensor[(192), float32], Tensor[(15), int16], Tensor[(16, 5, 12), bool], Tensor[(9, 5, 9), float32], Tensor[(405), float32]) */;
    %770 = %760.0;
    %771 = %769.0;
    %772 = @func_4122() /* ty=Tensor[(120), float32] */;
    (%770, %771, %var_5959, %var_5960, %var_5961, %772)
  };
  %773(%var_5988, %var_5989, %var_5990) /* ty=(Tensor[(120), float32], Tensor[(5, 4, 6), float32], Tensor[(2, 300), float32], Tensor[(960), float64], Tensor[(15), int16], Tensor[(120), float32]) */
}

def @func_7930() -> (Tensor[(120), float32], Tensor[(15), float32]) {
  %774 = @func_4971() /* ty=(Tensor[(120), float32], Tensor[(120), float32]) */;
  %775 = @func_6162() /* ty=(Tensor[(120), float32], Tensor[(11, 11, 12), int64], Tensor[(15), float32]) */;
  %776 = %774.0;
  %777 = %775.2;
  (%776, %777)
}

def @func_2018(%var_2013: Tensor[(120), float32]) -> Tensor[(120), uint32] {
  %778 = @func_1670() /* ty=(Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(5, 4, 6), float32]) */;
  %779 = %778.1;
  %780 = cast(%var_2013, dtype="uint32") /* ty=Tensor[(120), uint32] */;
  %781 = shape_of(%779, dtype="int32") /* ty=Tensor[(1), int32] */;
  %782 = cast(%779, dtype="uint32") /* ty=Tensor[(120), uint32] */;
  %783 = dyn.reshape(%780, %781, newshape=[]) /* ty=Tensor[(?), uint32] */;
  left_shift(%782, %783) /* ty=Tensor[(120), uint32] */
}

def @func_5147() -> (Tensor[(120), float32], Tensor[(120), float32], Tensor[(?, 48), bool]) {
  %798 = fn () -> (Tensor[(120), float32], Tensor[(120), float32], Tensor[(?, 48), bool]) {
    %784 = @func_5102() /* ty=(Tensor[(120), float32],) */;
    %785 = cast(meta[relay.Constant][51] /* ty=Tensor[(1, 48), float64] */, dtype="float64") /* ty=Tensor[(1, 48), float64] */;
    %786 = cast(meta[relay.Constant][51] /* ty=Tensor[(1, 48), float64] */, dtype="float64") /* ty=Tensor[(1, 48), float64] */;
    %787 = reshape(%785, newshape=[6, 4, 2]) /* ty=Tensor[(6, 4, 2), float64] */;
    %788 = reshape(%786, newshape=[6, 4, 2]) /* ty=Tensor[(6, 4, 2), float64] */;
    %789 = @func_1395(%787, %788) /* ty=(Tensor[(6, 4, 2), float64], Tensor[(6, 4, 2), float64]) */;
    %790 = %789.0;
    %791 = cast(%790, dtype="bool") /* ty=Tensor[(6, 4, 2), bool] */;
    %792 = shape_of(meta[relay.Constant][51] /* ty=Tensor[(1, 48), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %793 = cast(meta[relay.Constant][51] /* ty=Tensor[(1, 48), float64] */, dtype="bool") /* ty=Tensor[(1, 48), bool] */;
    %794 = dyn.reshape(%791, %792, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %795 = %784.0;
    %796 = @func_3539() /* ty=Tensor[(120), float32] */;
    %797 = equal(%793, %794) /* ty=Tensor[(?, 48), bool] */;
    (%795, %796, %797)
  };
  %798() /* ty=(Tensor[(120), float32], Tensor[(120), float32], Tensor[(?, 48), bool]) */
}

def @func_3448() -> (Tensor[(120), float32],) {
  %799 = @func_3240() /* ty=(Tensor[(120), float32], Tensor[(120), float32]) */;
  %800 = %799.0;
  (%800,)
}

def @func_3541() -> Tensor[(120), float32] {
  @func_3539() /* ty=Tensor[(120), float32] */
}

def @func_5607() -> Tensor[(120), float32] {
  %801 = @func_4971() /* ty=(Tensor[(120), float32], Tensor[(120), float32]) */;
  %801.0
}

def @func_4912(%var_4909: Tensor[(12, 14, 5), float32], %var_4910: Tensor[(15), float32], %var_4911: Tensor[(210), float32]) -> (Tensor[(12, 14, 5), float32], Tensor[(12, 14, 5), bool], Tensor[(32), float32], Tensor[(14, 5, 3), bool], Tensor[(15), float32], Tensor[(210), float32]) {
  %816 = fn (%var_4864: Tensor[(12, 14, 5), float32], %var_4905: Tensor[(15), float32], %var_4906: Tensor[(210), float32]) -> (Tensor[(12, 14, 5), float32], Tensor[(12, 14, 5), bool], Tensor[(32), float32], Tensor[(14, 5, 3), bool], Tensor[(15), float32], Tensor[(210), float32]) {
    %802 = cast(%var_4864, dtype="float32") /* ty=Tensor[(12, 14, 5), float32] */;
    %803 = cast(meta[relay.Constant][52] /* ty=Tensor[(12, 14, 5), float32] */, dtype="bool") /* ty=Tensor[(12, 14, 5), bool] */;
    %804 = shape_of(%var_4864, dtype="int32") /* ty=Tensor[(3), int32] */;
    %805 = cast(%var_4864, dtype="bool") /* ty=Tensor[(12, 14, 5), bool] */;
    %806 = dyn.reshape(%803, %804, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %807 = @func_4562() /* ty=(Tensor[(120), float32], Tensor[(2, ?, 16), float32], Tensor[(32), float32]) */;
    %808 = cast(%var_4905, dtype="float32") /* ty=Tensor[(15), float32] */;
    %809 = cast(%var_4906, dtype="float32") /* ty=Tensor[(210), float32] */;
    %810 = reshape(%808, newshape=[1, 5, 3]) /* ty=Tensor[(1, 5, 3), float32] */;
    %811 = reshape(%809, newshape=[14, 5, 3]) /* ty=Tensor[(14, 5, 3), float32] */;
    %812 = cos(%802) /* ty=Tensor[(12, 14, 5), float32] */;
    %813 = not_equal(%805, %806) /* ty=Tensor[(12, 14, 5), bool] */;
    %814 = %807.2;
    %815 = @func_1735(%810, %811) /* ty=Tensor[(14, 5, 3), bool] */;
    (%812, %813, %814, %815, %var_4905, %var_4906)
  };
  %816(%var_4909, %var_4910, %var_4911) /* ty=(Tensor[(12, 14, 5), float32], Tensor[(12, 14, 5), bool], Tensor[(32), float32], Tensor[(14, 5, 3), bool], Tensor[(15), float32], Tensor[(210), float32]) */
}

def @func_9122() -> Tensor[(11, 12, 11), int64] {
  %817 = cast(meta[relay.Constant][54] /* ty=Tensor[(11, 12, 11), int64] */, dtype="int64") /* ty=Tensor[(11, 12, 11), int64] */;
  %818 = shape_of(meta[relay.Constant][53] /* ty=Tensor[(11, 12, 11), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %819 = cast(meta[relay.Constant][53] /* ty=Tensor[(11, 12, 11), int64] */, dtype="int64") /* ty=Tensor[(11, 12, 11), int64] */;
  %820 = dyn.reshape(%817, %818, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  multiply(%819, %820) /* ty=Tensor[(11, 12, 11), int64] */
}

def @func_9147() -> (Tensor[(120), float32],) {
  %822 = fn () -> (Tensor[(120), float32],) {
    %821 = @func_4122() /* ty=Tensor[(120), float32] */;
    (%821,)
  };
  %822() /* ty=(Tensor[(120), float32],) */
}

def @func_5934() -> Tensor[(120), float64] {
  %823 = fn () -> Tensor[(120), float64] {
    @func_2841() /* ty=Tensor[(120), float64] */
  };
  %823() /* ty=Tensor[(120), float64] */
}

def @func_6162() -> (Tensor[(120), float32], Tensor[(11, 11, 12), int64], Tensor[(15), float32]) {
  %824 = cast(meta[relay.Constant][55] /* ty=Tensor[(15), float32] */, dtype="float32") /* ty=Tensor[(15), float32] */;
  %825 = reshape(%824, newshape=[15]) /* ty=Tensor[(15), float32] */;
  %826 = @func_5202(%825) /* ty=(Tensor[(11, 11, 12), int64], Tensor[(11, 11, 12), float32], Tensor[(120), float32], Tensor[(14, 5, 3), bool], Tensor[(15), float32], Tensor[(210), float32], Tensor[(120), float32]) */;
  %827 = @func_3539() /* ty=Tensor[(120), float32] */;
  %828 = %826.0;
  (%827, %828, meta[relay.Constant][55] /* ty=Tensor[(15), float32] */)
}

def @func_5345(%var_5344: Tensor[(600), float32]) -> (Tensor[(120), float32], Tensor[(405), float32], Tensor[(600), float32], Tensor[(120, 8), float64], Tensor[(15), int16]) {
  %841 = fn (%var_5332: Tensor[(600), float32]) -> (Tensor[(120), float32], Tensor[(405), float32], Tensor[(600), float32], Tensor[(120, 8), float64], Tensor[(15), int16]) {
    %829 = @func_5146() /* ty=(Tensor[(120), float32], Tensor[(120), float32], Tensor[(?, 48), bool]) */;
    %830 = cast(%var_5332, dtype="float32") /* ty=Tensor[(600), float32] */;
    %831 = cast(meta[relay.Constant][56] /* ty=Tensor[(120, 8), float64] */, dtype="float64") /* ty=Tensor[(120, 8), float64] */;
    %832 = cast(meta[relay.Constant][57] /* ty=Tensor[(15), int16] */, dtype="int16") /* ty=Tensor[(15), int16] */;
    %833 = cast(meta[relay.Constant][56] /* ty=Tensor[(120, 8), float64] */, dtype="float64") /* ty=Tensor[(120, 8), float64] */;
    %834 = reshape(%830, newshape=[600]) /* ty=Tensor[(600), float32] */;
    %835 = reshape(%831, newshape=[16, 5, 12]) /* ty=Tensor[(16, 5, 12), float64] */;
    %836 = reshape(%832, newshape=[15]) /* ty=Tensor[(15), int16] */;
    %837 = reshape(%833, newshape=[16, 5, 12]) /* ty=Tensor[(16, 5, 12), float64] */;
    %838 = @func_4711(%834, %835, %836, %837) /* ty=(Tensor[(5, 4, 6), float32], Tensor[(525, 1), int16], Tensor[(600), float32], Tensor[(16, 5, 12), bool], Tensor[(16, 5, 12), uint64], Tensor[(15, 1, 1), int16], Tensor[(192), float32], Tensor[(15), int16], Tensor[(16, 5, 12), bool], Tensor[(9, 5, 9), float32], Tensor[(405), float32]) */;
    %839 = %829.1;
    %840 = %838.10;
    (%839, %840, %var_5332, meta[relay.Constant][56] /* ty=Tensor[(120, 8), float64] */, meta[relay.Constant][57] /* ty=Tensor[(15), int16] */)
  };
  %841(%var_5344) /* ty=(Tensor[(120), float32], Tensor[(405), float32], Tensor[(600), float32], Tensor[(120, 8), float64], Tensor[(15), int16]) */
}

def @func_5758() -> (Tensor[(120), float32],) {
  %844 = fn () -> (Tensor[(120), float32],) {
    %842 = @func_3448() /* ty=(Tensor[(120), float32],) */;
    %843 = %842.0;
    (%843,)
  };
  %844() /* ty=(Tensor[(120), float32],) */
}

def @func_8300() -> (Tensor[(120), float32],) {
  @func_8298() /* ty=(Tensor[(120), float32],) */
}

def @func_9083() -> Tensor[(120), float32] {
  %846 = fn () -> Tensor[(120), float32] {
    %845 = @func_5701() /* ty=(Tensor[(120), float32],) */;
    %845.0
  };
  %846() /* ty=Tensor[(120), float32] */
}

def @func_6752() -> Tensor[(120), float32] {
  %847 = @func_5102() /* ty=(Tensor[(120), float32],) */;
  %847.0
}

def @func_8827(%var_8826: Tensor[(784), float64]) -> (Tensor[(1, 12, 4), float32], Tensor[(120), float32], Tensor[(784), float64]) {
  %853 = fn (%var_8823: Tensor[(784), float64]) -> (Tensor[(1, 12, 4), float32], Tensor[(120), float32], Tensor[(784), float64]) {
    %848 = cast(%var_8823, dtype="float64") /* ty=Tensor[(784), float64] */;
    %849 = reshape(%848, newshape=[14, 14, 4]) /* ty=Tensor[(14, 14, 4), float64] */;
    %850 = @func_3762(%849) /* ty=(Tensor[(120), float32], Tensor[(14, 14, 4), float32]) */;
    %851 = @func_6039() /* ty=Tensor[(1, 12, 4), float32] */;
    %852 = %850.0;
    (%851, %852, %var_8823)
  };
  %853(%var_8826) /* ty=(Tensor[(1, 12, 4), float32], Tensor[(120), float32], Tensor[(784), float64]) */
}

def @func_1836(%var_1804: Tensor[(1, 2, 9), float32]) -> (Tensor[(1, 2, 9), float32],) {
  %854 = cast(%var_1804, dtype="float32") /* ty=Tensor[(1, 2, 9), float32] */;
  %855 = sigmoid(%854) /* ty=Tensor[(1, 2, 9), float32] */;
  (%855,)
}

def @func_8612() -> (Tensor[(120), float32], Tensor[(120), float32]) {
  %856 = @func_4198() /* ty=(Tensor[(120), float32],) */;
  %857 = @func_6663() /* ty=(Tensor[(120), float32],) */;
  %858 = %856.0;
  %859 = %857.0;
  (%858, %859)
}

def @func_5609() -> Tensor[(120), float32] {
  @func_5607() /* ty=Tensor[(120), float32] */
}

def @func_7932() -> (Tensor[(120), float32], Tensor[(15), float32]) {
  @func_7930() /* ty=(Tensor[(120), float32], Tensor[(15), float32]) */
}

def @func_3182(%var_3180: Tensor[(15), float32], %var_3181: Tensor[(525), int16]) -> (Tensor[(120), float32], Tensor[(120), float32], Tensor[(15), float32], Tensor[(525), int16], Tensor[(5, 4, 6), float32], Tensor[(600), float32], Tensor[(15), int16]) {
  %880 = fn (%var_3133: Tensor[(15), float32], %var_3134: Tensor[(525), int16]) -> (Tensor[(120), float32], Tensor[(120), float32], Tensor[(15), float32], Tensor[(525), int16], Tensor[(5, 4, 6), float32], Tensor[(600), float32], Tensor[(15), int16]) {
    %860 = @func_1670() /* ty=(Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(5, 4, 6), float32]) */;
    %861 = cast(%var_3133, dtype="float32") /* ty=Tensor[(15), float32] */;
    %862 = cast(%var_3134, dtype="int16") /* ty=Tensor[(525), int16] */;
    %863 = reshape(%861, newshape=[15]) /* ty=Tensor[(15), float32] */;
    %864 = reshape(%862, newshape=[1, 525]) /* ty=Tensor[(1, 525), int16] */;
    %865 = @func_2206(%863, %864) /* ty=(Tensor[(120), float32], Tensor[(14, 5, 3), bool], Tensor[(15), float32], Tensor[(210), float32], Tensor[(120), uint32], Tensor[(5, 15, 7), int64], Tensor[(1, 525), int16], Tensor[(120), float32]) */;
    %866 = cast(%var_3134, dtype="int16") /* ty=Tensor[(525), int16] */;
    %867 = cast(meta[relay.Constant][58] /* ty=Tensor[(600), float32] */, dtype="float32") /* ty=Tensor[(600), float32] */;
    %868 = reshape(%866, newshape=[1, 525]) /* ty=Tensor[(1, 525), int16] */;
    %869 = reshape(%867, newshape=[12, 50]) /* ty=Tensor[(12, 50), float32] */;
    %870 = @func_1970(%868, %869) /* ty=(Tensor[(120), float32], Tensor[(2, 840), float64], Tensor[(15), int16], Tensor[(5, 12, 10), float32], Tensor[(12, 50), float32], Tensor[(?, 525), bool], Tensor[(5, 15, 7), float64], Tensor[(5, 4, 6), float32]) */;
    %871 = cast(%var_3134, dtype="int16") /* ty=Tensor[(525), int16] */;
    %872 = cast(meta[relay.Constant][58] /* ty=Tensor[(600), float32] */, dtype="float32") /* ty=Tensor[(600), float32] */;
    %873 = reshape(%871, newshape=[1, 525]) /* ty=Tensor[(1, 525), int16] */;
    %874 = reshape(%872, newshape=[12, 50]) /* ty=Tensor[(12, 50), float32] */;
    %875 = @func_1970(%873, %874) /* ty=(Tensor[(120), float32], Tensor[(2, 840), float64], Tensor[(15), int16], Tensor[(5, 12, 10), float32], Tensor[(12, 50), float32], Tensor[(?, 525), bool], Tensor[(5, 15, 7), float64], Tensor[(5, 4, 6), float32]) */;
    %876 = %860.1;
    %877 = %865.7;
    %878 = %870.7;
    %879 = %875.2;
    (%876, %877, %var_3133, %var_3134, %878, meta[relay.Constant][58] /* ty=Tensor[(600), float32] */, %879)
  };
  %880(%var_3180, %var_3181) /* ty=(Tensor[(120), float32], Tensor[(120), float32], Tensor[(15), float32], Tensor[(525), int16], Tensor[(5, 4, 6), float32], Tensor[(600), float32], Tensor[(15), int16]) */
}

def @func_6599(%var_6597: Tensor[(784), float64]) -> (Tensor[(5, 4, 6), uint16], Tensor[(5, 4, 6), uint32], Tensor[(14, 14, 4), float32], Tensor[(784), float64]) {
  @func_6596(%var_6597) /* ty=(Tensor[(5, 4, 6), uint16], Tensor[(5, 4, 6), uint32], Tensor[(14, 14, 4), float32], Tensor[(784), float64]) */
}

def @func_9124() -> Tensor[(11, 12, 11), int64] {
  @func_9122() /* ty=Tensor[(11, 12, 11), int64] */
}

def @func_3242() -> (Tensor[(120), float32], Tensor[(120), float32]) {
  @func_3240() /* ty=(Tensor[(120), float32], Tensor[(120), float32]) */
}

def @func_6665() -> (Tensor[(120), float32],) {
  @func_6663() /* ty=(Tensor[(120), float32],) */
}

def @func_5737(%var_5736: Tensor[(11, 8, 2), float32]) -> Tensor[(11, 8, 2), uint8] {
  %889 = fn (%var_5719: Tensor[(11, 8, 2), float32]) -> Tensor[(11, 8, 2), uint8] {
    %881 = cast(%var_5719, dtype="float32") /* ty=Tensor[(11, 8, 2), float32] */;
    %882 = atanh(%881) /* ty=Tensor[(11, 8, 2), float32] */;
    %883 = cast(%882, dtype="float32") /* ty=Tensor[(11, 8, 2), float32] */;
    %884 = cos(%883) /* ty=Tensor[(11, 8, 2), float32] */;
    %885 = cast(%var_5719, dtype="uint8") /* ty=Tensor[(11, 8, 2), uint8] */;
    %886 = shape_of(%884, dtype="int32") /* ty=Tensor[(3), int32] */;
    %887 = cast(%884, dtype="uint8") /* ty=Tensor[(11, 8, 2), uint8] */;
    %888 = dyn.reshape(%885, %886, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    add(%887, %888) /* ty=Tensor[(11, 8, 2), uint8] */
  };
  %889(%var_5736) /* ty=Tensor[(11, 8, 2), uint8] */
}

def @func_7250() -> Tensor[(120), float32] {
  %891 = fn () -> Tensor[(120), float32] {
    %890 = @func_7078() /* ty=(Tensor[(120), float32],) */;
    %890.0
  };
  %891() /* ty=Tensor[(120), float32] */
}

def @func_7728() -> (Tensor[(120), float32], Tensor[(120), float32]) {
  %896 = fn () -> (Tensor[(120), float32], Tensor[(120), float32]) {
    %892 = @func_6663() /* ty=(Tensor[(120), float32],) */;
    %893 = @func_5701() /* ty=(Tensor[(120), float32],) */;
    %894 = %892.0;
    %895 = %893.0;
    (%894, %895)
  };
  %896() /* ty=(Tensor[(120), float32], Tensor[(120), float32]) */
}

def @func_6504(%var_6500: Tensor[(525), int16]) -> (Tensor[(120), float32], Tensor[(16, 16), float32], Tensor[(1680), float64], Tensor[(80), uint64], Tensor[(525), int16]) {
  %897 = @func_2747() /* ty=(Tensor[(16, 16), float32],) */;
  %898 = cast(meta[relay.Constant][59] /* ty=Tensor[(80), uint64] */, dtype="uint64") /* ty=Tensor[(80), uint64] */;
  %899 = cast(%var_6500, dtype="int16") /* ty=Tensor[(525), int16] */;
  %900 = reshape(%898, newshape=[2, 40]) /* ty=Tensor[(2, 40), uint64] */;
  %901 = reshape(%899, newshape=[525]) /* ty=Tensor[(525), int16] */;
  %902 = @func_4062(%900, %901) /* ty=(Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(15), int16], Tensor[(2, 40), uint64], Tensor[(1680), float64], Tensor[(6, 4, 2), float64], Tensor[(48), float64], Tensor[(2, 4, 10), int16], Tensor[(120), float32], Tensor[(525), int16]) */;
  %903 = @func_6262() /* ty=Tensor[(120), float32] */;
  %904 = %897.0;
  %905 = %902.4;
  (%903, %904, %905, meta[relay.Constant][59] /* ty=Tensor[(80), uint64] */, %var_6500)
}

def @func_3539() -> Tensor[(120), float32] {
  %906 = @func_3381() /* ty=(Tensor[(120), float32],) */;
  %906.0
}

def @func_8224() -> (Tensor[(2, ?, 16), float32],) {
  %907 = @func_4562() /* ty=(Tensor[(120), float32], Tensor[(2, ?, 16), float32], Tensor[(32), float32]) */;
  %908 = %907.1;
  (%908,)
}

def @func_1168(%var_1166: Tensor[(3, 9, 5), bool]) -> Tensor[(3, 9, 5), uint8] {
  @func_1165(%var_1166) /* ty=Tensor[(3, 9, 5), uint8] */
}

def @func_2021(%var_2019: Tensor[(120), float32]) -> Tensor[(120), uint32] {
  @func_2018(%var_2019) /* ty=Tensor[(120), uint32] */
}

def @func_3240() -> (Tensor[(120), float32], Tensor[(120), float32]) {
  %909 = @func_2292() /* ty=(Tensor[(120), float32],) */;
  %910 = @func_2145() /* ty=(Tensor[(120), float32],) */;
  %911 = %909.0;
  %912 = %910.0;
  (%911, %912)
}

def @func_2488() -> (Tensor[(16, 16), float32], Tensor[(5, 4, 6), int16]) {
  %922 = fn () -> (Tensor[(16, 16), float32], Tensor[(5, 4, 6), int16]) {
    %913 = @func_1670() /* ty=(Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(5, 4, 6), float32]) */;
    %914 = @func_1670() /* ty=(Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(5, 4, 6), float32]) */;
    %915 = %914.2;
    %916 = cast(meta[relay.Constant][60] /* ty=Tensor[(5, 4, 6), float32] */, dtype="int16") /* ty=Tensor[(5, 4, 6), int16] */;
    %917 = shape_of(%915, dtype="int32") /* ty=Tensor[(3), int32] */;
    %918 = cast(%915, dtype="int16") /* ty=Tensor[(5, 4, 6), int16] */;
    %919 = dyn.reshape(%916, %917, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %920 = %913.0;
    %921 = left_shift(%918, %919) /* ty=Tensor[(5, 4, 6), int16] */;
    (%920, %921)
  };
  %922() /* ty=(Tensor[(16, 16), float32], Tensor[(5, 4, 6), int16]) */
}

def @func_7632() -> (Tensor[(525), int16], Tensor[(120), float32]) {
  %926 = fn () -> (Tensor[(525), int16], Tensor[(120), float32]) {
    %923 = @func_3869() /* ty=(Tensor[(16, 16), float32], Tensor[(16, 16), float32], Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(120), float32], Tensor[(120), float32], Tensor[(15), float32], Tensor[(525), int16], Tensor[(120), float32], Tensor[(16, 16), float32]) */;
    %924 = %923.7;
    %925 = @func_7249() /* ty=Tensor[(120), float32] */;
    (%924, %925)
  };
  %926() /* ty=(Tensor[(525), int16], Tensor[(120), float32]) */
}

def @func_8071() -> Tensor[(16, 16), float32] {
  @func_8069() /* ty=Tensor[(16, 16), float32] */
}

def @func_6474(%var_6473: Tensor[(1680), float64]) -> (Tensor[(120), float32], Tensor[(6, 4, 2), float64], Tensor[(1680), float64]) {
  %935 = fn (%var_6443: Tensor[(1680), float64]) -> (Tensor[(120), float32], Tensor[(6, 4, 2), float64], Tensor[(1680), float64]) {
    %927 = @func_4198() /* ty=(Tensor[(120), float32],) */;
    %928 = cast(%var_6443, dtype="float64") /* ty=Tensor[(1680), float64] */;
    %929 = cast(%var_6443, dtype="float64") /* ty=Tensor[(1680), float64] */;
    %930 = reshape(%928, newshape=[1680]) /* ty=Tensor[(1680), float64] */;
    %931 = reshape(%929, newshape=[1680]) /* ty=Tensor[(1680), float64] */;
    %932 = @func_2632(%930, %931) /* ty=(Tensor[(120), float32], Tensor[(525), int16], Tensor[(15), int16], Tensor[(525), int16], Tensor[(6, 4, 2), float64], Tensor[(48), float64], Tensor[(120), uint32], Tensor[(1680), bool]) */;
    %933 = %927.0;
    %934 = %932.4;
    (%933, %934, %var_6443)
  };
  %935(%var_6473) /* ty=(Tensor[(120), float32], Tensor[(6, 4, 2), float64], Tensor[(1680), float64]) */
}

def @func_1839(%var_1837: Tensor[(1, 2, 9), float32]) -> (Tensor[(1, 2, 9), float32],) {
  @func_1836(%var_1837) /* ty=(Tensor[(1, 2, 9), float32],) */
}

def @main() -> (Tensor[(120), float32], Tensor[(120), float64], Tensor[(16, 16), float32], Tensor[(5, 3), float32], Tensor[(720), float32], Tensor[(16, 16), float32], Tensor[(168), int64], Tensor[(448), float32]) {
  %936 = @func_8614() /* ty=(Tensor[(120), float32], Tensor[(120), float32]) */;
  %937 = cast(meta[relay.Constant][61] /* ty=Tensor[(448), float64] */, dtype="float64") /* ty=Tensor[(448), float64] */;
  %938 = cast(meta[relay.Constant][61] /* ty=Tensor[(448), float64] */, dtype="float64") /* ty=Tensor[(448), float64] */;
  %939 = reshape(%937, newshape=[2, 14, 16]) /* ty=Tensor[(2, 14, 16), float64] */;
  %940 = reshape(%938, newshape=[2, 14, 16]) /* ty=Tensor[(2, 14, 16), float64] */;
  %941 = @func_8172(%939, %940) /* ty=(Tensor[(120), float32], Tensor[(120), float64], Tensor[(2, 14, 16), int16], Tensor[(2, 14, 16), float64]) */;
  %942 = @func_3697() /* ty=(Tensor[(120), float32], Tensor[(16, 16), float32]) */;
  %943 = cast(meta[relay.Constant][62] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %944 = reshape(%943, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %945 = @func_7657(%944) /* ty=(Tensor[(16, 16), float32], Tensor[(5, 4, 6), float32], Tensor[(720), float32], Tensor[(5, 3), float32], Tensor[(18), float32], Tensor[(1680), float64], Tensor[(600, 1), float32]) */;
  %946 = cast(meta[relay.Constant][63] /* ty=Tensor[(168), int64] */, dtype="int64") /* ty=Tensor[(168), int64] */;
  %947 = reshape(%946, newshape=[14, 2, 6]) /* ty=Tensor[(14, 2, 6), int64] */;
  %948 = @func_9196(%947) /* ty=(Tensor[(14, 2, 6), int64], Tensor[(120), float32], Tensor[(16, 16), float32]) */;
  %949 = cast(meta[relay.Constant][61] /* ty=Tensor[(448), float64] */, dtype="float64") /* ty=Tensor[(448), float64] */;
  %950 = asinh(%949) /* ty=Tensor[(448), float64] */;
  %951 = cast(%950, dtype="float32") /* ty=Tensor[(448), float32] */;
  %952 = %936.1;
  %953 = %941.1;
  %954 = %942.1;
  %955 = %945.3;
  %956 = %948.2;
  %957 = sqrt(%951) /* ty=Tensor[(448), float32] */;
  (%952, %953, %954, %955, meta[relay.Constant][62] /* ty=Tensor[(720), float32] */, %956, meta[relay.Constant][63] /* ty=Tensor[(168), int64] */, %957)
}

def @func_7612() -> (Tensor[(120), float32],) {
  %960 = fn () -> (Tensor[(120), float32],) {
    %958 = @func_6663() /* ty=(Tensor[(120), float32],) */;
    %959 = %958.0;
    (%959,)
  };
  %960() /* ty=(Tensor[(120), float32],) */
}

def @func_5693() -> (Tensor[(16, 16), float32],) {
  %963 = fn () -> (Tensor[(16, 16), float32],) {
    %961 = @func_2487() /* ty=(Tensor[(16, 16), float32], Tensor[(5, 4, 6), int16]) */;
    %962 = %961.0;
    (%962,)
  };
  %963() /* ty=(Tensor[(16, 16), float32],) */
}

def @func_2145() -> (Tensor[(120), float32],) {
  %964 = @func_1670() /* ty=(Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(5, 4, 6), float32]) */;
  %965 = %964.1;
  (%965,)
}

def @func_6264() -> Tensor[(120), float32] {
  @func_6262() /* ty=Tensor[(120), float32] */
}

def @func_6745(%var_6735: Tensor[(3, 4, 15), float32]) -> (Tensor[(3, 4, 15), float32], Tensor[(3, 4, 15), float32]) {
  %966 = cast(%var_6735, dtype="float32") /* ty=Tensor[(3, 4, 15), float32] */;
  %967 = cast(%var_6735, dtype="float32") /* ty=Tensor[(3, 4, 15), float32] */;
  %968 = acos(%966) /* ty=Tensor[(3, 4, 15), float32] */;
  %969 = erf(%967) /* ty=Tensor[(3, 4, 15), float32] */;
  (%968, %969)
}

def @func_1046(%var_1042: float64, %var_1043: Tensor[(4, 4, 15), float64], %var_1044: Tensor[(15), int16], %var_1045: Tensor[(525), int16]) -> (Tensor[(4, 4, 15), float64], Tensor[(15, 1, 1), int16], Tensor[(192), float32], Tensor[(15), int16], Tensor[(5, 15, 7), int64], Tensor[(1680), float64], Tensor[(525), int16]) {
  %989 = fn (%var_1013: float64, %var_1014: Tensor[(4, 4, 15), float64], %var_1020: Tensor[(15), int16], %var_1030: Tensor[(525), int16]) -> (Tensor[(4, 4, 15), float64], Tensor[(15, 1, 1), int16], Tensor[(192), float32], Tensor[(15), int16], Tensor[(5, 15, 7), int64], Tensor[(1680), float64], Tensor[(525), int16]) {
    %970 = cast(%var_1013, dtype="float64") /* ty=float64 */;
    %971 = cast(%var_1014, dtype="float64") /* ty=Tensor[(4, 4, 15), float64] */;
    %972 = cast(meta[relay.Constant][64] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
    %973 = cast(%var_1020, dtype="int16") /* ty=Tensor[(15), int16] */;
    %974 = reshape(%972, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float32] */;
    %975 = reshape(%973, newshape=[5, 3]) /* ty=Tensor[(5, 3), int16] */;
    %976 = @func_682(%974, %975) /* ty=(Tensor[(2, 6, 16), bool], Tensor[(2, 6, 16), float64], Tensor[(15, 1, 1), int16], Tensor[(5, 3), int16], Tensor[(525), int16], Tensor[(2, 6, 16), bool], Tensor[(15, 1, 1), int16]) */;
    %977 = cast(meta[relay.Constant][65] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
    %978 = cast(%var_1020, dtype="int16") /* ty=Tensor[(15), int16] */;
    %979 = cast(%var_1030, dtype="int16") /* ty=Tensor[(525), int16] */;
    %980 = cast(meta[relay.Constant][65] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
    %981 = reshape(%977, newshape=[7, 16, 15]) /* ty=Tensor[(7, 16, 15), float64] */;
    %982 = reshape(%978, newshape=[15]) /* ty=Tensor[(15), int16] */;
    %983 = reshape(%979, newshape=[525]) /* ty=Tensor[(525), int16] */;
    %984 = reshape(%980, newshape=[7, 16, 15]) /* ty=Tensor[(7, 16, 15), float64] */;
    %985 = @func_985(%981, %982, %983, %984) /* ty=(Tensor[(2, 6, 16), bool], Tensor[(192), float32], Tensor[(15), int16], Tensor[(15, 1, 1), int16], Tensor[(525), int16], Tensor[(525), int16], Tensor[(2, 6, 16), bool], Tensor[(2, 6, 16), bool], Tensor[(5, 15, 7), int64], Tensor[(15, 1, 1), int16], Tensor[(525), int16], Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64], Tensor[(7, 16, 15), uint8], Tensor[(15, 1, 1), int16], Tensor[(2, 6, 16), bool], Tensor[(7, 16, 15), int64], Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(7, 16, 15), float64], Tensor[(7, 16, 15), float32], Tensor[(15, 1, 1), int16]) */;
    %986 = add(%970, %971) /* ty=Tensor[(4, 4, 15), float64] */;
    %987 = %976.6;
    %988 = %985.12;
    (%986, %987, meta[relay.Constant][64] /* ty=Tensor[(192), float32] */, %var_1020, %988, meta[relay.Constant][65] /* ty=Tensor[(1680), float64] */, %var_1030)
  };
  %989(%var_1042, %var_1043, %var_1044, %var_1045) /* ty=(Tensor[(4, 4, 15), float64], Tensor[(15, 1, 1), int16], Tensor[(192), float32], Tensor[(15), int16], Tensor[(5, 15, 7), int64], Tensor[(1680), float64], Tensor[(525), int16]) */
}

def @func_6806(%var_6803: Tensor[(15), float32], %var_6804: Tensor[(12, 140), float64], %var_6805: Tensor[(6, 100), float32]) -> (Tensor[(120), float32], Tensor[(15), float32], Tensor[(4, 180), float32], Tensor[(15), float32], Tensor[(3, 6), float32], Tensor[(12, 140), float64], Tensor[(6, 100), float32]) {
  %1006 = fn (%var_6797: Tensor[(15), float32], %var_6799: Tensor[(12, 140), float64], %var_6800: Tensor[(6, 100), float32]) -> (Tensor[(120), float32], Tensor[(15), float32], Tensor[(4, 180), float32], Tensor[(15), float32], Tensor[(3, 6), float32], Tensor[(12, 140), float64], Tensor[(6, 100), float32]) {
    %990 = @func_3381() /* ty=(Tensor[(120), float32],) */;
    %991 = cast(meta[relay.Constant][66] /* ty=Tensor[(4, 180), float32] */, dtype="float32") /* ty=Tensor[(4, 180), float32] */;
    %992 = cast(%var_6797, dtype="float32") /* ty=Tensor[(15), float32] */;
    %993 = cast(meta[relay.Constant][67] /* ty=Tensor[(3, 6), float32] */, dtype="float32") /* ty=Tensor[(3, 6), float32] */;
    %994 = cast(meta[relay.Constant][66] /* ty=Tensor[(4, 180), float32] */, dtype="float64") /* ty=Tensor[(4, 180), float64] */;
    %995 = cast(%var_6799, dtype="float64") /* ty=Tensor[(12, 140), float64] */;
    %996 = cast(%var_6800, dtype="float32") /* ty=Tensor[(6, 100), float32] */;
    %997 = reshape(%991, newshape=[15, 12, 4]) /* ty=Tensor[(15, 12, 4), float32] */;
    %998 = reshape(%992, newshape=[15]) /* ty=Tensor[(15), float32] */;
    %999 = reshape(%993, newshape=[18]) /* ty=Tensor[(18), float32] */;
    %1000 = reshape(%994, newshape=[15, 12, 4]) /* ty=Tensor[(15, 12, 4), float64] */;
    %1001 = reshape(%995, newshape=[1680]) /* ty=Tensor[(1680), float64] */;
    %1002 = reshape(%996, newshape=[600]) /* ty=Tensor[(600), float32] */;
    %1003 = @func_3082(%997, %998, %999, %1000, %1001, %1002) /* ty=(Tensor[(5, 4, 6), float32], Tensor[(120), float32], Tensor[(15), float32], Tensor[(1, 525), int16], Tensor[(1, 2, 9), float32], Tensor[(18), float32], Tensor[(16, 16), float32], Tensor[(15, 12, 4), int64], Tensor[(15, 12, 4), uint64], Tensor[(15, 12, 4), float64], Tensor[(600), float32], Tensor[(1680), float64], Tensor[(600), float32]) */;
    %1004 = %990.0;
    %1005 = %1003.2;
    (%1004, %1005, meta[relay.Constant][66] /* ty=Tensor[(4, 180), float32] */, %var_6797, meta[relay.Constant][67] /* ty=Tensor[(3, 6), float32] */, %var_6799, %var_6800)
  };
  %1006(%var_6803, %var_6804, %var_6805) /* ty=(Tensor[(120), float32], Tensor[(15), float32], Tensor[(4, 180), float32], Tensor[(15), float32], Tensor[(3, 6), float32], Tensor[(12, 140), float64], Tensor[(6, 100), float32]) */
}

def @func_4392(%var_4390: Tensor[(210), float32]) -> (Tensor[(120), float32], Tensor[(15), float32], Tensor[(210), bool], Tensor[(525), float64]) {
  @func_4389(%var_4390) /* ty=(Tensor[(120), float32], Tensor[(15), float32], Tensor[(210), bool], Tensor[(525), float64]) */
}

def @func_7984() -> (Tensor[(120), float32],) {
  @func_7982() /* ty=(Tensor[(120), float32],) */
}

def @func_1165(%var_1148: Tensor[(3, 9, 5), bool]) -> Tensor[(3, 9, 5), uint8] {
  %1007 = cast(meta[relay.Constant][68] /* ty=Tensor[(3, 9, 5), bool] */, dtype="bool") /* ty=Tensor[(3, 9, 5), bool] */;
  %1008 = shape_of(%var_1148, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1009 = cast(%var_1148, dtype="bool") /* ty=Tensor[(3, 9, 5), bool] */;
  %1010 = dyn.reshape(%1007, %1008, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1011 = logical_or(%1009, %1010) /* ty=Tensor[(3, 9, 5), bool] */;
  %1012 = cast(%1011, dtype="uint8") /* ty=Tensor[(3, 9, 5), uint8] */;
  %1013 = shape_of(meta[relay.Constant][68] /* ty=Tensor[(3, 9, 5), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1014 = cast(meta[relay.Constant][68] /* ty=Tensor[(3, 9, 5), bool] */, dtype="uint8") /* ty=Tensor[(3, 9, 5), uint8] */;
  %1015 = dyn.reshape(%1012, %1013, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  bitwise_xor(%1014, %1015) /* ty=Tensor[(3, 9, 5), uint8] */
}

def @func_5282(%var_5279: float64, %var_5280: Tensor[(24, 10), float64], %var_5281: Tensor[(525), float32]) -> (float64, Tensor[(24, 10), float64], Tensor[(15, 1), int16], Tensor[(525), float64], Tensor[(525), float32], Tensor[(525), bool]) {
  @func_5277(%var_5279, %var_5280, %var_5281) /* ty=(float64, Tensor[(24, 10), float64], Tensor[(15, 1), int16], Tensor[(525), float64], Tensor[(525), float32], Tensor[(525), bool]) */
}

def @func_7136(%var_7126: Tensor[(1, 15), float32], %var_7128: Tensor[(1680), float64]) -> (Tensor[(120), float32], Tensor[(1, 2, 9), float32], Tensor[(720), float32], Tensor[(1, 15), float32], Tensor[(1, 18), float32], Tensor[(1680), float64], Tensor[(600), float32]) {
  %1016 = @func_3869() /* ty=(Tensor[(16, 16), float32], Tensor[(16, 16), float32], Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(120), float32], Tensor[(120), float32], Tensor[(15), float32], Tensor[(525), int16], Tensor[(120), float32], Tensor[(16, 16), float32]) */;
  %1017 = cast(meta[relay.Constant][69] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %1018 = cast(%var_7126, dtype="float32") /* ty=Tensor[(1, 15), float32] */;
  %1019 = cast(meta[relay.Constant][70] /* ty=Tensor[(1, 18), float32] */, dtype="float32") /* ty=Tensor[(1, 18), float32] */;
  %1020 = cast(meta[relay.Constant][69] /* ty=Tensor[(720), float32] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %1021 = cast(%var_7128, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %1022 = cast(meta[relay.Constant][71] /* ty=Tensor[(600), float32] */, dtype="float32") /* ty=Tensor[(600), float32] */;
  %1023 = reshape(%1017, newshape=[15, 12, 4]) /* ty=Tensor[(15, 12, 4), float32] */;
  %1024 = reshape(%1018, newshape=[15]) /* ty=Tensor[(15), float32] */;
  %1025 = reshape(%1019, newshape=[18]) /* ty=Tensor[(18), float32] */;
  %1026 = reshape(%1020, newshape=[15, 12, 4]) /* ty=Tensor[(15, 12, 4), float64] */;
  %1027 = reshape(%1021, newshape=[1680]) /* ty=Tensor[(1680), float64] */;
  %1028 = reshape(%1022, newshape=[600]) /* ty=Tensor[(600), float32] */;
  %1029 = @func_3082(%1023, %1024, %1025, %1026, %1027, %1028) /* ty=(Tensor[(5, 4, 6), float32], Tensor[(120), float32], Tensor[(15), float32], Tensor[(1, 525), int16], Tensor[(1, 2, 9), float32], Tensor[(18), float32], Tensor[(16, 16), float32], Tensor[(15, 12, 4), int64], Tensor[(15, 12, 4), uint64], Tensor[(15, 12, 4), float64], Tensor[(600), float32], Tensor[(1680), float64], Tensor[(600), float32]) */;
  %1030 = %1016.5;
  %1031 = %1029.4;
  (%1030, %1031, meta[relay.Constant][69] /* ty=Tensor[(720), float32] */, %var_7126, meta[relay.Constant][70] /* ty=Tensor[(1, 18), float32] */, %var_7128, meta[relay.Constant][71] /* ty=Tensor[(600), float32] */)
}

def @func_341(%var_325: Tensor[(15, 1, 1), int16], %var_335: Tensor[(5, 15, 7), int16]) -> (Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64]) {
  %1032 = cast(meta[relay.Constant][72] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %1033 = cast(%var_325, dtype="int16") /* ty=Tensor[(15, 1, 1), int16] */;
  %1034 = cast(meta[relay.Constant][72] /* ty=int16 */, dtype="int64") /* ty=int64 */;
  %1035 = cast(%var_335, dtype="int64") /* ty=Tensor[(5, 15, 7), int64] */;
  %1036 = right_shift(%1032, %1033) /* ty=Tensor[(15, 1, 1), int16] */;
  %1037 = minimum(%1034, %1035) /* ty=Tensor[(5, 15, 7), int64] */;
  (%1036, %1037)
}

def @func_3695() -> (Tensor[(120), float32], Tensor[(16, 16), float32]) {
  %1038 = @func_2747() /* ty=(Tensor[(16, 16), float32],) */;
  %1039 = @func_3539() /* ty=Tensor[(120), float32] */;
  %1040 = %1038.0;
  (%1039, %1040)
}

def @func_8298() -> (Tensor[(120), float32],) {
  %1041 = @func_3817() /* ty=(Tensor[(120), float32],) */;
  %1042 = %1041.0;
  (%1042,)
}

def @func_2841() -> Tensor[(120), float64] {
  %1043 = @func_1670() /* ty=(Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(5, 4, 6), float32]) */;
  %1044 = %1043.1;
  %1045 = cast(%1044, dtype="float64") /* ty=Tensor[(120), float64] */;
  cosh(%1045) /* ty=Tensor[(120), float64] */
}

def @func_3817() -> (Tensor[(120), float32],) {
  %1046 = @func_2292() /* ty=(Tensor[(120), float32],) */;
  %1047 = %1046.0;
  (%1047,)
}

def @func_345(%var_343: Tensor[(15, 1, 1), int16], %var_344: Tensor[(5, 15, 7), int16]) -> (Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64]) {
  @func_341(%var_343, %var_344) /* ty=(Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64]) */
}

def @func_8881(%var_8880: Tensor[(6, 48), bool]) -> (Tensor[(6, 48), float32], Tensor[(15, 6, 9), bool]) {
  %1065 = fn (%var_8844: Tensor[(6, 48), bool]) -> (Tensor[(6, 48), float32], Tensor[(15, 6, 9), bool]) {
    %1048 = @func_5146() /* ty=(Tensor[(120), float32], Tensor[(120), float32], Tensor[(?, 48), bool]) */;
    %1049 = %1048.2;
    %1050 = cast(%1049, dtype="bool") /* ty=Tensor[(?, 48), bool] */;
    %1051 = cast(%var_8844, dtype="bool") /* ty=Tensor[(6, 48), bool] */;
    %1052 = greater(%1050, %1051) /* ty=Tensor[(6, 48), bool] */;
    %1053 = cast(%var_8844, dtype="float32") /* ty=Tensor[(6, 48), float32] */;
    %1054 = shape_of(%1052, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1055 = cast(%1052, dtype="float32") /* ty=Tensor[(6, 48), float32] */;
    %1056 = dyn.reshape(%1053, %1054, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %1057 = cast(meta[relay.Constant][73] /* ty=Tensor[(15, 6, 9), float64] */, dtype="float64") /* ty=Tensor[(15, 6, 9), float64] */;
    %1058 = tan(%1057) /* ty=Tensor[(15, 6, 9), float64] */;
    %1059 = cast(%1058, dtype="bool") /* ty=Tensor[(15, 6, 9), bool] */;
    %1060 = shape_of(meta[relay.Constant][73] /* ty=Tensor[(15, 6, 9), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1061 = cast(meta[relay.Constant][73] /* ty=Tensor[(15, 6, 9), float64] */, dtype="bool") /* ty=Tensor[(15, 6, 9), bool] */;
    %1062 = dyn.reshape(%1059, %1060, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1063 = divide(%1055, %1056) /* ty=Tensor[(6, 48), float32] */;
    %1064 = equal(%1061, %1062) /* ty=Tensor[(15, 6, 9), bool] */;
    (%1063, %1064)
  };
  %1065(%var_8880) /* ty=(Tensor[(6, 48), float32], Tensor[(15, 6, 9), bool]) */
}

def @func_6754() -> Tensor[(120), float32] {
  @func_6752() /* ty=Tensor[(120), float32] */
}

def @func_7238() -> (Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(120), float32], Tensor[(120), float64], Tensor[(120), float32]) {
  @func_7236() /* ty=(Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(120), float32], Tensor[(120), float64], Tensor[(120), float32]) */
}

def @func_8988() -> (Tensor[(16, 16), float32], Tensor[(600), float32], Tensor[(5, 12, 10), float32]) {
  %1074 = fn () -> (Tensor[(16, 16), float32], Tensor[(600), float32], Tensor[(5, 12, 10), float32]) {
    %1066 = @func_6394() /* ty=(Tensor[(16, 16), float32], Tensor[(16, 16), float32]) */;
    %1067 = cast(meta[relay.Constant][74] /* ty=Tensor[(600), float32] */, dtype="float32") /* ty=Tensor[(600), float32] */;
    %1068 = reshape(%1067, newshape=[5, 12, 10]) /* ty=Tensor[(5, 12, 10), float32] */;
    %1069 = @func_1606(%1068) /* ty=(Tensor[(5, 12, 10), float32],) */;
    %1070 = %1069.0;
    %1071 = cast(%1070, dtype="float32") /* ty=Tensor[(5, 12, 10), float32] */;
    %1072 = %1066.1;
    %1073 = sin(%1071) /* ty=Tensor[(5, 12, 10), float32] */;
    (%1072, meta[relay.Constant][74] /* ty=Tensor[(600), float32] */, %1073)
  };
  %1074() /* ty=(Tensor[(16, 16), float32], Tensor[(600), float32], Tensor[(5, 12, 10), float32]) */
}

def @func_5205(%var_5203: Tensor[(15), float32]) -> (Tensor[(11, 11, 12), int64], Tensor[(11, 11, 12), float32], Tensor[(120), float32], Tensor[(14, 5, 3), bool], Tensor[(15), float32], Tensor[(210), float32], Tensor[(120), float32]) {
  @func_5202(%var_5203) /* ty=(Tensor[(11, 11, 12), int64], Tensor[(11, 11, 12), float32], Tensor[(120), float32], Tensor[(14, 5, 3), bool], Tensor[(15), float32], Tensor[(210), float32], Tensor[(120), float32]) */
}

def @func_2810() -> (Tensor[(120), float32],) {
  %1077 = fn () -> (Tensor[(120), float32],) {
    %1075 = @func_2145() /* ty=(Tensor[(120), float32],) */;
    %1076 = %1075.0;
    (%1076,)
  };
  %1077() /* ty=(Tensor[(120), float32],) */
}

def @func_3648() -> (Tensor[(120), float32],) {
  %1078 = @func_2891() /* ty=Tensor[(120), float32] */;
  (%1078,)
}

def @func_3650() -> (Tensor[(120), float32],) {
  @func_3648() /* ty=(Tensor[(120), float32],) */
}

def @func_7236() -> (Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(120), float32], Tensor[(120), float64], Tensor[(120), float32]) {
  %1079 = @func_1670() /* ty=(Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(5, 4, 6), float32]) */;
  %1080 = @func_6274() /* ty=(Tensor[(120), float32], Tensor[(11, 11, 12), int64]) */;
  %1081 = @func_5757() /* ty=(Tensor[(120), float32],) */;
  %1082 = @func_3240() /* ty=(Tensor[(120), float32], Tensor[(120), float32]) */;
  %1083 = %1079.0;
  %1084 = %1080.0;
  %1085 = %1081.0;
  %1086 = @func_2841() /* ty=Tensor[(120), float64] */;
  %1087 = %1082.0;
  (%1083, %1084, %1085, %1086, %1087)
}

def @func_6276() -> (Tensor[(120), float32], Tensor[(11, 11, 12), int64]) {
  @func_6274() /* ty=(Tensor[(120), float32], Tensor[(11, 11, 12), int64]) */
}

def @func_3697() -> (Tensor[(120), float32], Tensor[(16, 16), float32]) {
  @func_3695() /* ty=(Tensor[(120), float32], Tensor[(16, 16), float32]) */
}

def @func_6262() -> Tensor[(120), float32] {
  %1088 = @func_3869() /* ty=(Tensor[(16, 16), float32], Tensor[(16, 16), float32], Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(120), float32], Tensor[(120), float32], Tensor[(15), float32], Tensor[(525), int16], Tensor[(120), float32], Tensor[(16, 16), float32]) */;
  %1088.3
}

def @func_8468() -> (Tensor[(16, 16), float32],) {
  %1089 = @func_3555() /* ty=Tensor[(16, 16), float32] */;
  (%1089,)
}

def @func_4066(%var_4064: Tensor[(2, 40), uint64], %var_4065: Tensor[(525), int16]) -> (Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(15), int16], Tensor[(2, 40), uint64], Tensor[(1680), float64], Tensor[(6, 4, 2), float64], Tensor[(48), float64], Tensor[(2, 4, 10), int16], Tensor[(120), float32], Tensor[(525), int16]) {
  @func_4062(%var_4064, %var_4065) /* ty=(Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(15), int16], Tensor[(2, 40), uint64], Tensor[(1680), float64], Tensor[(6, 4, 2), float64], Tensor[(48), float64], Tensor[(2, 4, 10), int16], Tensor[(120), float32], Tensor[(525), int16]) */
}

def @func_8727(%var_8704: Tensor[(208), int8], %var_8705: Tensor[(3328), int8], %var_8706: Tensor[(15), float32]) -> (Tensor[(120), float64], Tensor[(120), float32], Tensor[(208), int8], Tensor[(3328), int8], Tensor[(15), float32], Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(5, 12, 10), float32], Tensor[(60, 10), float32]) {
  %1090 = cast(%var_8704, dtype="int8") /* ty=Tensor[(208), int8] */;
  %1091 = cast(%var_8705, dtype="int8") /* ty=Tensor[(3328), int8] */;
  %1092 = cast(%var_8706, dtype="float32") /* ty=Tensor[(15), float32] */;
  %1093 = reshape(%1090, newshape=[1, 13, 16]) /* ty=Tensor[(1, 13, 16), int8] */;
  %1094 = reshape(%1091, newshape=[16, 13, 16]) /* ty=Tensor[(16, 13, 16), int8] */;
  %1095 = reshape(%1092, newshape=[15]) /* ty=Tensor[(15), float32] */;
  %1096 = @func_7783(%1093, %1094, %1095) /* ty=(Tensor[(16, 13, 16), int8], Tensor[(120), float32], Tensor[(15), float32], Tensor[(525), int16]) */;
  %1097 = @func_3695() /* ty=(Tensor[(120), float32], Tensor[(16, 16), float32]) */;
  %1098 = @func_3381() /* ty=(Tensor[(120), float32],) */;
  %1099 = cast(meta[relay.Constant][75] /* ty=Tensor[(60, 10), float32] */, dtype="float32") /* ty=Tensor[(60, 10), float32] */;
  %1100 = reshape(%1099, newshape=[5, 12, 10]) /* ty=Tensor[(5, 12, 10), float32] */;
  %1101 = @func_1606(%1100) /* ty=(Tensor[(5, 12, 10), float32],) */;
  %1102 = @func_5933() /* ty=Tensor[(120), float64] */;
  %1103 = %1096.1;
  %1104 = %1097.1;
  %1105 = %1098.0;
  %1106 = %1101.0;
  (%1102, %1103, %var_8704, %var_8705, %var_8706, %1104, %1105, %1106, meta[relay.Constant][75] /* ty=Tensor[(60, 10), float32] */)
}

def @func_1609(%var_1607: Tensor[(5, 12, 10), float32]) -> (Tensor[(5, 12, 10), float32],) {
  @func_1606(%var_1607) /* ty=(Tensor[(5, 12, 10), float32],) */
}

def @func_4389(%var_4375: Tensor[(210), float32]) -> (Tensor[(120), float32], Tensor[(15), float32], Tensor[(210), bool], Tensor[(525), float64]) {
  %1107 = @func_2292() /* ty=(Tensor[(120), float32],) */;
  %1108 = cast(meta[relay.Constant][76] /* ty=Tensor[(15), float32] */, dtype="float32") /* ty=Tensor[(15), float32] */;
  %1109 = cast(meta[relay.Constant][77] /* ty=Tensor[(525), int16] */, dtype="int16") /* ty=Tensor[(525), int16] */;
  %1110 = reshape(%1108, newshape=[15]) /* ty=Tensor[(15), float32] */;
  %1111 = reshape(%1109, newshape=[1, 525]) /* ty=Tensor[(1, 525), int16] */;
  %1112 = @func_2206(%1110, %1111) /* ty=(Tensor[(120), float32], Tensor[(14, 5, 3), bool], Tensor[(15), float32], Tensor[(210), float32], Tensor[(120), uint32], Tensor[(5, 15, 7), int64], Tensor[(1, 525), int16], Tensor[(120), float32]) */;
  %1113 = %1112.3;
  %1114 = cast(%var_4375, dtype="bool") /* ty=Tensor[(210), bool] */;
  %1115 = shape_of(%1113, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1116 = cast(%1113, dtype="bool") /* ty=Tensor[(210), bool] */;
  %1117 = dyn.reshape(%1114, %1115, newshape=[]) /* ty=Tensor[(?), bool] */;
  %1118 = cast(meta[relay.Constant][77] /* ty=Tensor[(525), int16] */, dtype="float64") /* ty=Tensor[(525), float64] */;
  %1119 = %1107.0;
  %1120 = equal(%1116, %1117) /* ty=Tensor[(210), bool] */;
  %1121 = atanh(%1118) /* ty=Tensor[(525), float64] */;
  (%1119, meta[relay.Constant][76] /* ty=Tensor[(15), float32] */, %1120, %1121)
}

def @func_5420() -> (Tensor[(16, 16), float32],) {
  @func_5418() /* ty=(Tensor[(16, 16), float32],) */
}

def @func_3576() -> Tensor[(120), float32] {
  %1122 = @func_3381() /* ty=(Tensor[(120), float32],) */;
  %1122.0
}

def @func_8732(%var_8729: Tensor[(208), int8], %var_8730: Tensor[(3328), int8], %var_8731: Tensor[(15), float32]) -> (Tensor[(120), float64], Tensor[(120), float32], Tensor[(208), int8], Tensor[(3328), int8], Tensor[(15), float32], Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(5, 12, 10), float32], Tensor[(60, 10), float32]) {
  @func_8727(%var_8729, %var_8730, %var_8731) /* ty=(Tensor[(120), float64], Tensor[(120), float32], Tensor[(208), int8], Tensor[(3328), int8], Tensor[(15), float32], Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(5, 12, 10), float32], Tensor[(60, 10), float32]) */
}

def @func_6164() -> (Tensor[(120), float32], Tensor[(11, 11, 12), int64], Tensor[(15), float32]) {
  @func_6162() /* ty=(Tensor[(120), float32], Tensor[(11, 11, 12), int64], Tensor[(15), float32]) */
}

def @func_8470() -> (Tensor[(16, 16), float32],) {
  @func_8468() /* ty=(Tensor[(16, 16), float32],) */
}

def @func_2681(%var_2678: Tensor[(1680), float64], %var_2679: Tensor[(15), int16], %var_2680: Tensor[(600), float32]) -> (Tensor[(120), float32], Tensor[(6, 4, 2), float64], Tensor[(48), float64], Tensor[(120), uint32], Tensor[(15, 1, 1), int16], Tensor[(1680), float64], Tensor[(15), int16], Tensor[(525), int16], Tensor[(5, 12, 10), float32], Tensor[(600), float32]) {
  @func_2676(%var_2678, %var_2679, %var_2680) /* ty=(Tensor[(120), float32], Tensor[(6, 4, 2), float64], Tensor[(48), float64], Tensor[(120), uint32], Tensor[(15, 1, 1), int16], Tensor[(1680), float64], Tensor[(15), int16], Tensor[(525), int16], Tensor[(5, 12, 10), float32], Tensor[(600), float32]) */
}

def @func_4350(%var_4347: Tensor[(840, 2), float64], %var_4348: Tensor[(1, 15), int16], %var_4349: Tensor[(525), int16]) -> (Tensor[(120), float32], Tensor[(16, 16), float32], Tensor[(7, 16, 15), uint8], Tensor[(840, 2), float64], Tensor[(1, 15), int16], Tensor[(525), bool]) {
  %1141 = fn (%var_4327: Tensor[(840, 2), float64], %var_4328: Tensor[(1, 15), int16], %var_4329: Tensor[(525), int16]) -> (Tensor[(120), float32], Tensor[(16, 16), float32], Tensor[(7, 16, 15), uint8], Tensor[(840, 2), float64], Tensor[(1, 15), int16], Tensor[(525), bool]) {
    %1123 = @func_3869() /* ty=(Tensor[(16, 16), float32], Tensor[(16, 16), float32], Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(120), float32], Tensor[(120), float32], Tensor[(15), float32], Tensor[(525), int16], Tensor[(120), float32], Tensor[(16, 16), float32]) */;
    %1124 = cast(%var_4327, dtype="float64") /* ty=Tensor[(840, 2), float64] */;
    %1125 = cast(%var_4328, dtype="int16") /* ty=Tensor[(1, 15), int16] */;
    %1126 = cast(%var_4329, dtype="int16") /* ty=Tensor[(525), int16] */;
    %1127 = cast(%var_4327, dtype="float64") /* ty=Tensor[(840, 2), float64] */;
    %1128 = reshape(%1124, newshape=[7, 16, 15]) /* ty=Tensor[(7, 16, 15), float64] */;
    %1129 = reshape(%1125, newshape=[15]) /* ty=Tensor[(15), int16] */;
    %1130 = reshape(%1126, newshape=[525]) /* ty=Tensor[(525), int16] */;
    %1131 = reshape(%1127, newshape=[7, 16, 15]) /* ty=Tensor[(7, 16, 15), float64] */;
    %1132 = @func_985(%1128, %1129, %1130, %1131) /* ty=(Tensor[(2, 6, 16), bool], Tensor[(192), float32], Tensor[(15), int16], Tensor[(15, 1, 1), int16], Tensor[(525), int16], Tensor[(525), int16], Tensor[(2, 6, 16), bool], Tensor[(2, 6, 16), bool], Tensor[(5, 15, 7), int64], Tensor[(15, 1, 1), int16], Tensor[(525), int16], Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64], Tensor[(7, 16, 15), uint8], Tensor[(15, 1, 1), int16], Tensor[(2, 6, 16), bool], Tensor[(7, 16, 15), int64], Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(7, 16, 15), float64], Tensor[(7, 16, 15), float32], Tensor[(15, 1, 1), int16]) */;
    %1133 = cast(meta[relay.Constant][78] /* ty=Tensor[(525), int16] */, dtype="bool") /* ty=Tensor[(525), bool] */;
    %1134 = shape_of(%var_4329, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1135 = cast(%var_4329, dtype="bool") /* ty=Tensor[(525), bool] */;
    %1136 = dyn.reshape(%1133, %1134, newshape=[]) /* ty=Tensor[(?), bool] */;
    %1137 = @func_3576() /* ty=Tensor[(120), float32] */;
    %1138 = %1123.2;
    %1139 = %1132.13;
    %1140 = less(%1135, %1136) /* ty=Tensor[(525), bool] */;
    (%1137, %1138, %1139, %var_4327, %var_4328, %1140)
  };
  %1141(%var_4347, %var_4348, %var_4349) /* ty=(Tensor[(120), float32], Tensor[(16, 16), float32], Tensor[(7, 16, 15), uint8], Tensor[(840, 2), float64], Tensor[(1, 15), int16], Tensor[(525), bool]) */
}

def @func_2210(%var_2208: Tensor[(15), float32], %var_2209: Tensor[(1, 525), int16]) -> (Tensor[(120), float32], Tensor[(14, 5, 3), bool], Tensor[(15), float32], Tensor[(210), float32], Tensor[(120), uint32], Tensor[(5, 15, 7), int64], Tensor[(1, 525), int16], Tensor[(120), float32]) {
  @func_2206(%var_2208, %var_2209) /* ty=(Tensor[(120), float32], Tensor[(14, 5, 3), bool], Tensor[(15), float32], Tensor[(210), float32], Tensor[(120), uint32], Tensor[(5, 15, 7), int64], Tensor[(1, 525), int16], Tensor[(120), float32]) */
}

def @func_2676(%var_2667: Tensor[(1680), float64], %var_2668: Tensor[(15), int16], %var_2673: Tensor[(600), float32]) -> (Tensor[(120), float32], Tensor[(6, 4, 2), float64], Tensor[(48), float64], Tensor[(120), uint32], Tensor[(15, 1, 1), int16], Tensor[(1680), float64], Tensor[(15), int16], Tensor[(525), int16], Tensor[(5, 12, 10), float32], Tensor[(600), float32]) {
  %1142 = @func_2292() /* ty=(Tensor[(120), float32],) */;
  %1143 = cast(meta[relay.Constant][79] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %1144 = cast(meta[relay.Constant][79] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %1145 = reshape(%1143, newshape=[6, 4, 2]) /* ty=Tensor[(6, 4, 2), float64] */;
  %1146 = reshape(%1144, newshape=[6, 4, 2]) /* ty=Tensor[(6, 4, 2), float64] */;
  %1147 = @func_1395(%1145, %1146) /* ty=(Tensor[(6, 4, 2), float64], Tensor[(6, 4, 2), float64]) */;
  %1148 = %1142.0;
  %1149 = cast(%1148, dtype="float32") /* ty=Tensor[(120), float32] */;
  %1150 = reshape(%1149, newshape=[120]) /* ty=Tensor[(120), float32] */;
  %1151 = cast(%var_2667, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %1152 = cast(%var_2668, dtype="int16") /* ty=Tensor[(15), int16] */;
  %1153 = cast(meta[relay.Constant][80] /* ty=Tensor[(525), int16] */, dtype="int16") /* ty=Tensor[(525), int16] */;
  %1154 = cast(%var_2667, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %1155 = reshape(%1151, newshape=[7, 16, 15]) /* ty=Tensor[(7, 16, 15), float64] */;
  %1156 = reshape(%1152, newshape=[15]) /* ty=Tensor[(15), int16] */;
  %1157 = reshape(%1153, newshape=[525]) /* ty=Tensor[(525), int16] */;
  %1158 = reshape(%1154, newshape=[7, 16, 15]) /* ty=Tensor[(7, 16, 15), float64] */;
  %1159 = @func_985(%1155, %1156, %1157, %1158) /* ty=(Tensor[(2, 6, 16), bool], Tensor[(192), float32], Tensor[(15), int16], Tensor[(15, 1, 1), int16], Tensor[(525), int16], Tensor[(525), int16], Tensor[(2, 6, 16), bool], Tensor[(2, 6, 16), bool], Tensor[(5, 15, 7), int64], Tensor[(15, 1, 1), int16], Tensor[(525), int16], Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64], Tensor[(7, 16, 15), uint8], Tensor[(15, 1, 1), int16], Tensor[(2, 6, 16), bool], Tensor[(7, 16, 15), int64], Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(5, 15, 7), int64], Tensor[(7, 16, 15), float64], Tensor[(7, 16, 15), float32], Tensor[(15, 1, 1), int16]) */;
  %1160 = cast(%var_2673, dtype="float32") /* ty=Tensor[(600), float32] */;
  %1161 = reshape(%1160, newshape=[5, 12, 10]) /* ty=Tensor[(5, 12, 10), float32] */;
  %1162 = @func_1606(%1161) /* ty=(Tensor[(5, 12, 10), float32],) */;
  %1163 = %1147.1;
  %1164 = @func_2018(%1150) /* ty=Tensor[(120), uint32] */;
  %1165 = %1159.9;
  %1166 = %1162.0;
  (%1148, %1163, meta[relay.Constant][79] /* ty=Tensor[(48), float64] */, %1164, %1165, %var_2667, %var_2668, meta[relay.Constant][80] /* ty=Tensor[(525), int16] */, %1166, %var_2673)
}

def @func_5924(%var_5922: Tensor[(3, 13, 11), float32], %var_5923: Tensor[(3, 13, 11), float32]) -> (Tensor[(32), float32], Tensor[(3, 13, 11), uint64], Tensor[(120), float64], Tensor[(1, 2, 9), float32], Tensor[(18), float32]) {
  @func_5920(%var_5922, %var_5923) /* ty=(Tensor[(32), float32], Tensor[(3, 13, 11), uint64], Tensor[(120), float64], Tensor[(1, 2, 9), float32], Tensor[(18), float32]) */
}

def @func_7036(%var_7009: Tensor[(6, 5, 4), float64]) -> (Tensor[(6, 5, 4), float64],) {
  %1167 = cast(%var_7009, dtype="float64") /* ty=Tensor[(6, 5, 4), float64] */;
  %1168 = asin(%1167) /* ty=Tensor[(6, 5, 4), float64] */;
  %1169 = cast(%1168, dtype="float64") /* ty=Tensor[(6, 5, 4), float64] */;
  %1170 = atan(%1169) /* ty=Tensor[(6, 5, 4), float64] */;
  (%1170,)
}

def @func_685(%var_683: Tensor[(2, 6, 16), float32], %var_684: Tensor[(5, 3), int16]) -> (Tensor[(2, 6, 16), bool], Tensor[(2, 6, 16), float64], Tensor[(15, 1, 1), int16], Tensor[(5, 3), int16], Tensor[(525), int16], Tensor[(2, 6, 16), bool], Tensor[(15, 1, 1), int16]) {
  %1195 = fn (%var_639: Tensor[(2, 6, 16), float32], %var_663: Tensor[(5, 3), int16]) -> (Tensor[(2, 6, 16), bool], Tensor[(2, 6, 16), float64], Tensor[(15, 1, 1), int16], Tensor[(5, 3), int16], Tensor[(525), int16], Tensor[(2, 6, 16), bool], Tensor[(15, 1, 1), int16]) {
    %1171 = cast(%var_639, dtype="bool") /* ty=Tensor[(2, 6, 16), bool] */;
    %1172 = shape_of(meta[relay.Constant][81] /* ty=Tensor[(2, 6, 16), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1173 = cast(meta[relay.Constant][81] /* ty=Tensor[(2, 6, 16), float32] */, dtype="bool") /* ty=Tensor[(2, 6, 16), bool] */;
    %1174 = dyn.reshape(%1171, %1172, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1175 = cast(%var_639, dtype="float64") /* ty=Tensor[(2, 6, 16), float64] */;
    %1176 = cast(%var_663, dtype="int16") /* ty=Tensor[(5, 3), int16] */;
    %1177 = cast(meta[relay.Constant][82] /* ty=Tensor[(525), int16] */, dtype="int16") /* ty=Tensor[(525), int16] */;
    %1178 = reshape(%1176, newshape=[15, 1, 1]) /* ty=Tensor[(15, 1, 1), int16] */;
    %1179 = reshape(%1177, newshape=[5, 15, 7]) /* ty=Tensor[(5, 15, 7), int16] */;
    %1180 = @func_341(%1178, %1179) /* ty=(Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64]) */;
    %1181 = cast(%var_639, dtype="bool") /* ty=Tensor[(2, 6, 16), bool] */;
    %1182 = shape_of(meta[relay.Constant][81] /* ty=Tensor[(2, 6, 16), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1183 = cast(meta[relay.Constant][81] /* ty=Tensor[(2, 6, 16), float32] */, dtype="bool") /* ty=Tensor[(2, 6, 16), bool] */;
    %1184 = dyn.reshape(%1181, %1182, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1185 = cast(%var_663, dtype="int16") /* ty=Tensor[(5, 3), int16] */;
    %1186 = cast(meta[relay.Constant][82] /* ty=Tensor[(525), int16] */, dtype="int16") /* ty=Tensor[(525), int16] */;
    %1187 = reshape(%1185, newshape=[15, 1, 1]) /* ty=Tensor[(15, 1, 1), int16] */;
    %1188 = reshape(%1186, newshape=[5, 15, 7]) /* ty=Tensor[(5, 15, 7), int16] */;
    %1189 = @func_341(%1187, %1188) /* ty=(Tensor[(15, 1, 1), int16], Tensor[(5, 15, 7), int64]) */;
    %1190 = less(%1173, %1174) /* ty=Tensor[(2, 6, 16), bool] */;
    %1191 = atanh(%1175) /* ty=Tensor[(2, 6, 16), float64] */;
    %1192 = %1180.0;
    %1193 = logical_and(%1183, %1184) /* ty=Tensor[(2, 6, 16), bool] */;
    %1194 = %1189.0;
    (%1190, %1191, %1192, %var_663, meta[relay.Constant][82] /* ty=Tensor[(525), int16] */, %1193, %1194)
  };
  %1195(%var_683, %var_684) /* ty=(Tensor[(2, 6, 16), bool], Tensor[(2, 6, 16), float64], Tensor[(15, 1, 1), int16], Tensor[(5, 3), int16], Tensor[(525), int16], Tensor[(2, 6, 16), bool], Tensor[(15, 1, 1), int16]) */
}

def @func_1974(%var_1972: Tensor[(1, 525), int16], %var_1973: Tensor[(12, 50), float32]) -> (Tensor[(120), float32], Tensor[(2, 840), float64], Tensor[(15), int16], Tensor[(5, 12, 10), float32], Tensor[(12, 50), float32], Tensor[(?, 525), bool], Tensor[(5, 15, 7), float64], Tensor[(5, 4, 6), float32]) {
  @func_1970(%var_1972, %var_1973) /* ty=(Tensor[(120), float32], Tensor[(2, 840), float64], Tensor[(15), int16], Tensor[(5, 12, 10), float32], Tensor[(12, 50), float32], Tensor[(?, 525), bool], Tensor[(5, 15, 7), float64], Tensor[(5, 4, 6), float32]) */
}

def @func_7424() -> Tensor[(120), float32] {
  @func_7422() /* ty=Tensor[(120), float32] */
}

def @func_3932(%var_3931: Tensor[(525, 1), int16]) -> (Tensor[(5, 15, 7), int64], Tensor[(600), float32], Tensor[(525, 120), bool], Tensor[(16, 16), float32]) {
  %1212 = fn (%var_3893: Tensor[(525, 1), int16]) -> (Tensor[(5, 15, 7), int64], Tensor[(600), float32], Tensor[(525, 120), bool], Tensor[(16, 16), float32]) {
    %1196 = cast(%var_3893, dtype="int16") /* ty=Tensor[(525, 1), int16] */;
    %1197 = cast(meta[relay.Constant][83] /* ty=Tensor[(600), float32] */, dtype="float32") /* ty=Tensor[(600), float32] */;
    %1198 = reshape(%1196, newshape=[175, 3]) /* ty=Tensor[(175, 3), int16] */;
    %1199 = reshape(%1197, newshape=[600]) /* ty=Tensor[(600), float32] */;
    %1200 = @func_2451(%1198, %1199) /* ty=(Tensor[(120), float32], Tensor[(210), float32], Tensor[(15), float32], Tensor[(175, 3), int16], Tensor[(5, 15, 7), int64], Tensor[(5, 12, 10), float32], Tensor[(600), float32]) */;
    %1201 = @func_3648() /* ty=(Tensor[(120), float32],) */;
    %1202 = %1201.0;
    %1203 = cast(%1202, dtype="int32") /* ty=Tensor[(120), int32] */;
    %1204 = cast(%var_3893, dtype="int32") /* ty=Tensor[(525, 1), int32] */;
    %1205 = bitwise_xor(%1203, %1204) /* ty=Tensor[(525, 120), int32] */;
    %1206 = cast(%1202, dtype="bool") /* ty=Tensor[(120), bool] */;
    %1207 = cast(%1205, dtype="bool") /* ty=Tensor[(525, 120), bool] */;
    %1208 = @func_2747() /* ty=(Tensor[(16, 16), float32],) */;
    %1209 = %1200.4;
    %1210 = not_equal(%1206, %1207) /* ty=Tensor[(525, 120), bool] */;
    %1211 = %1208.0;
    (%1209, meta[relay.Constant][83] /* ty=Tensor[(600), float32] */, %1210, %1211)
  };
  %1212(%var_3931) /* ty=(Tensor[(5, 15, 7), int64], Tensor[(600), float32], Tensor[(525, 120), bool], Tensor[(16, 16), float32]) */
}

def @func_4450() -> (Tensor[(16, 16), float32],) {
  @func_4448() /* ty=(Tensor[(16, 16), float32],) */
}

def @func_6404() -> (Tensor[(120), float32],) {
  @func_6402() /* ty=(Tensor[(120), float32],) */
}

def @func_4564() -> (Tensor[(120), float32], Tensor[(2, ?, 16), float32], Tensor[(32), float32]) {
  @func_4562() /* ty=(Tensor[(120), float32], Tensor[(2, ?, 16), float32], Tensor[(32), float32]) */
}

def @func_4200() -> (Tensor[(120), float32],) {
  @func_4198() /* ty=(Tensor[(120), float32],) */
}

def @func_5104() -> (Tensor[(120), float32],) {
  @func_5102() /* ty=(Tensor[(120), float32],) */
}

def @func_3819() -> (Tensor[(120), float32],) {
  @func_3817() /* ty=(Tensor[(120), float32],) */
}

def @func_6720() -> Tensor[(2, 15, 5), float64] {
  %1213 = cast(meta[relay.Constant][84] /* ty=Tensor[(2, 15, 5), float64] */, dtype="float64") /* ty=Tensor[(2, 15, 5), float64] */;
  log10(%1213) /* ty=Tensor[(2, 15, 5), float64] */
}

def @func_5048() -> (Tensor[(120), float32],) {
  @func_5046() /* ty=(Tensor[(120), float32],) */
}

def @func_6075() -> Tensor[(16, 16), float32] {
  @func_6073() /* ty=Tensor[(16, 16), float32] */
}

def @func_3557() -> Tensor[(16, 16), float32] {
  @func_3555() /* ty=Tensor[(16, 16), float32] */
}

def @func_2147() -> (Tensor[(120), float32],) {
  @func_2145() /* ty=(Tensor[(120), float32],) */
}

def @func_4448() -> (Tensor[(16, 16), float32],) {
  %1214 = @func_3869() /* ty=(Tensor[(16, 16), float32], Tensor[(16, 16), float32], Tensor[(16, 16), float32], Tensor[(120), float32], Tensor[(120), float32], Tensor[(120), float32], Tensor[(15), float32], Tensor[(525), int16], Tensor[(120), float32], Tensor[(16, 16), float32]) */;
  %1215 = %1214.1;
  (%1215,)
}

def @func_7422() -> Tensor[(120), float32] {
  @func_3539() /* ty=Tensor[(120), float32] */
}

def @func_9196(%var_9195: Tensor[(14, 2, 6), int64]) -> (Tensor[(14, 2, 6), int64], Tensor[(120), float32], Tensor[(16, 16), float32]) {
  %1224 = fn (%var_9160: Tensor[(14, 2, 6), int64]) -> (Tensor[(14, 2, 6), int64], Tensor[(120), float32], Tensor[(16, 16), float32]) {
    %1216 = cast(meta[relay.Constant][85] /* ty=Tensor[(14, 2, 6), int64] */, dtype="int64") /* ty=Tensor[(14, 2, 6), int64] */;
    %1217 = shape_of(%var_9160, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1218 = cast(%var_9160, dtype="int64") /* ty=Tensor[(14, 2, 6), int64] */;
    %1219 = dyn.reshape(%1216, %1217, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %1220 = @func_7611() /* ty=(Tensor[(120), float32],) */;
    %1221 = left_shift(%1218, %1219) /* ty=Tensor[(14, 2, 6), int64] */;
    %1222 = %1220.0;
    %1223 = @func_8448() /* ty=Tensor[(16, 16), float32] */;
    (%1221, %1222, %1223)
  };
  %1224(%var_9195) /* ty=(Tensor[(14, 2, 6), int64], Tensor[(120), float32], Tensor[(16, 16), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen274/build/output.py", line 2744, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:02:51] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

