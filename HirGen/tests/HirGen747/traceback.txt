==========mod==========
#[version = "0.0.5"]
def @func_11424() -> Tensor[(5, 60), float64] {
  %0 = @func_10874() /* ty=(Tensor[(5, 60), float64],) */;
  %0.0
}

def @func_9842(%var_9820: Tensor[(5, 60), bool]) -> (Tensor[(5, 60), int16], Tensor[(10, 5, 6), bool]) {
  %1 = @func_9792() /* ty=(Tensor[(5, 60), bool],) */;
  %2 = %1.0;
  %3 = cast(%var_9820, dtype="int16") /* ty=Tensor[(5, 60), int16] */;
  %4 = shape_of(%2, dtype="int32") /* ty=Tensor[(2), int32] */;
  %5 = cast(%2, dtype="int16") /* ty=Tensor[(5, 60), int16] */;
  %6 = dyn.reshape(%3, %4, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %7 = cast(%2, dtype="float32") /* ty=Tensor[(5, 60), float32] */;
  %8 = reshape(%7, newshape=[10, 5, 6]) /* ty=Tensor[(10, 5, 6), float32] */;
  %9 = multiply(%5, %6) /* ty=Tensor[(5, 60), int16] */;
  %10 = @func_1812(%8) /* ty=Tensor[(10, 5, 6), bool] */;
  (%9, %10)
}

def @func_2179() -> Tensor[(5, 60), float64] {
  %11 = @func_2004() /* ty=(Tensor[(5, 60), bool],) */;
  %12 = %11.0;
  %13 = cast(%12, dtype="float64") /* ty=Tensor[(5, 60), float64] */;
  %14 = log2(%13) /* ty=Tensor[(5, 60), float64] */;
  %15 = cast(%14, dtype="float64") /* ty=Tensor[(5, 60), float64] */;
  rsqrt(%15) /* ty=Tensor[(5, 60), float64] */
}

def @func_3274() -> (Tensor[(15, 15, 7), float64],) {
  %16 = @func_2088() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) */;
  %17 = %16.0;
  (%17,)
}

def @func_9583() -> Tensor[(5, 60), bool] {
  @func_2482() /* ty=Tensor[(5, 60), bool] */
}

def @func_9472() -> (Tensor[(10, 30), float32],) {
  %18 = @func_2856() /* ty=(Tensor[(864), float64], Tensor[(10, 5, 6), bool], Tensor[(10, 30), float32]) */;
  %19 = %18.2;
  (%19,)
}

def @func_5834() -> (Tensor[(864), float64], Tensor[(864), float64], Tensor[(5, 60), float64], Tensor[(864), float64]) {
  %20 = @func_2856() /* ty=(Tensor[(864), float64], Tensor[(10, 5, 6), bool], Tensor[(10, 30), float32]) */;
  %21 = @func_1840() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(864), float64]) */;
  %22 = @func_1840() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(864), float64]) */;
  %23 = %20.0;
  %24 = %21.2;
  %25 = @func_2179() /* ty=Tensor[(5, 60), float64] */;
  %26 = %22.2;
  (%23, %24, %25, %26)
}

def @func_7710() -> (Tensor[(6, 9, 16), float64],) {
  %27 = @func_7057() /* ty=(Tensor[(6, 9, 16), float64],) */;
  %28 = %27.0;
  (%28,)
}

def @func_8645(%var_8626: Tensor[(7, 2, 3), float64]) -> (Tensor[(7, 2, 3), float32],) {
  %29 = cast(%var_8626, dtype="float64") /* ty=Tensor[(7, 2, 3), float64] */;
  %30 = log2(%29) /* ty=Tensor[(7, 2, 3), float64] */;
  %31 = cast(%var_8626, dtype="float32") /* ty=Tensor[(7, 2, 3), float32] */;
  %32 = shape_of(%30, dtype="int32") /* ty=Tensor[(3), int32] */;
  %33 = cast(%30, dtype="float32") /* ty=Tensor[(7, 2, 3), float32] */;
  %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %35 = add(%33, %34) /* ty=Tensor[(7, 2, 3), float32] */;
  (%35,)
}

def @func_10088() -> Tensor[(5, 60), bool] {
  %36 = @func_2004() /* ty=(Tensor[(5, 60), bool],) */;
  %36.0
}

def @func_11567() -> (Tensor[(5, 60), bool],) {
  %37 = @func_2004() /* ty=(Tensor[(5, 60), bool],) */;
  %38 = %37.0;
  (%38,)
}

def @func_6439() -> Tensor[(65), float32] {
  @func_5735() /* ty=Tensor[(65), float32] */
}

def @func_4389() -> (Tensor[(65), bool], Tensor[(5, 60), bool]) {
  %39 = @func_2458() /* ty=(Tensor[(65), bool],) */;
  %40 = @func_3404() /* ty=(Tensor[(5, 60), bool],) */;
  %41 = %39.0;
  %42 = %40.0;
  (%41, %42)
}

def @func_12012(%var_11988: Tensor[(990), uint16], %var_11989: Tensor[(65), float32]) -> (Tensor[(120), bool], Tensor[(300), float32], bool, Tensor[(5, 60), float64], Tensor[(990), uint16], Tensor[(65), float32], Tensor[(5, 60), float32]) {
  %43 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %44 = reshape(%43, newshape=[]) /* ty=bool */;
  %45 = @func_10377(%44) /* ty=(Tensor[(5, 42), int8], Tensor[(5, 60), bool], Tensor[(300), float32], bool, Tensor[(5, 60), float64], Tensor[(15, 15, 7), int64], Tensor[(1575), float64]) */;
  %46 = cast(%var_11988, dtype="uint16") /* ty=Tensor[(990), uint16] */;
  %47 = cast(%var_11989, dtype="float32") /* ty=Tensor[(65), float32] */;
  %48 = reshape(%46, newshape=[990]) /* ty=Tensor[(990), uint16] */;
  %49 = reshape(%47, newshape=[65]) /* ty=Tensor[(65), float32] */;
  %50 = @func_10293(%48, %49) /* ty=(Tensor[(5, 60), bool], Tensor[(990), uint16], Tensor[(65), float32], Tensor[(5, 60), float64]) */;
  %51 = @func_10435() /* ty=(Tensor[(5, 60), float32],) */;
  %52 = @func_10403() /* ty=Tensor[(120), bool] */;
  %53 = %45.2;
  %54 = %50.3;
  %55 = %51.0;
  (%52, %53, False /* ty=bool */, %54, %var_11988, %var_11989, %55)
}

def @func_8049() -> (Tensor[(210), int8],) {
  %56 = @func_4813() /* ty=(Tensor[(6, 9, 16), float64], Tensor[(14, 3, 5), uint8], Tensor[(210), int8]) */;
  %57 = %56.2;
  (%57,)
}

def @func_10390(%var_10387: Tensor[(14, 13, 8), float64]) -> Tensor[(14, 13, 8), float64] {
  %58 = cast(%var_10387, dtype="float64") /* ty=Tensor[(14, 13, 8), float64] */;
  asinh(%58) /* ty=Tensor[(14, 13, 8), float64] */
}

def @func_2368(%var_2357: Tensor[(65), bool]) -> (Tensor[(864), float64], Tensor[(1, 5, 13), bool], Tensor[(65), bool]) {
  %59 = @func_1840() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(864), float64]) */;
  %60 = cast(%var_2357, dtype="bool") /* ty=Tensor[(65), bool] */;
  %61 = reshape(%60, newshape=[1, 5, 13]) /* ty=Tensor[(1, 5, 13), bool] */;
  %62 = @func_459(%61) /* ty=(Tensor[(1, 5, 13), bool],) */;
  %63 = %59.2;
  %64 = %62.0;
  (%63, %64, %var_2357)
}

def @func_10761() -> (Tensor[(65), float32], Tensor[(1, 65), float64], Tensor[(840), float32], bool, Tensor[(60, 2), bool]) {
  %65 = cast(meta[relay.Constant][0] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %66 = @func_6439() /* ty=Tensor[(65), float32] */;
  %67 = cast(%66, dtype="bool") /* ty=Tensor[(65), bool] */;
  %68 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %69 = cast(meta[relay.Constant][1] /* ty=Tensor[(60, 2), bool] */, dtype="bool") /* ty=Tensor[(60, 2), bool] */;
  %70 = reshape(%65, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %71 = reshape(%67, newshape=[1, 65]) /* ty=Tensor[(1, 65), bool] */;
  %72 = reshape(%68, newshape=[]) /* ty=bool */;
  %73 = reshape(%69, newshape=[120]) /* ty=Tensor[(120), bool] */;
  %74 = @func_5680(%70, %71, %72, %73) /* ty=(Tensor[(840), float32], Tensor[(840), float32], Tensor[(120), bool], Tensor[(5, 60), float32], Tensor[(1, 65), float64]) */;
  %75 = %74.4;
  (%66, %75, meta[relay.Constant][0] /* ty=Tensor[(840), float32] */, False /* ty=bool */, meta[relay.Constant][1] /* ty=Tensor[(60, 2), bool] */)
}

def @func_5375() -> (Tensor[(65), float32], Tensor[(15, 15, 7), float64], Tensor[(300), bool]) {
  %76 = cast(meta[relay.Constant][2] /* ty=Tensor[(300), bool] */, dtype="bool") /* ty=Tensor[(300), bool] */;
  %77 = reshape(%76, newshape=[5, 60]) /* ty=Tensor[(5, 60), bool] */;
  %78 = @func_3375(%77) /* ty=(Tensor[(5, 60), float32], Tensor[(15, 15, 7), float64]) */;
  %79 = @func_3334() /* ty=Tensor[(65), float32] */;
  %80 = %78.1;
  (%79, %80, meta[relay.Constant][2] /* ty=Tensor[(300), bool] */)
}

def @func_1939(%var_1914: Tensor[(840), float32], %var_1915: Tensor[(65, 1), bool], %var_1935: bool, %var_1936: Tensor[(120), bool]) -> (Tensor[(15, 15, 7), float64], Tensor[(15, 15, 7), float64], Tensor[(65), bool], Tensor[(840), float32], Tensor[(65, 1), bool], Tensor[(14, 3, 5), float64], bool, Tensor[(120), bool]) {
  %81 = @func_1840() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(864), float64]) */;
  %82 = @func_1840() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(864), float64]) */;
  %83 = cast(%var_1914, dtype="float32") /* ty=Tensor[(840), float32] */;
  %84 = cast(%var_1915, dtype="bool") /* ty=Tensor[(65, 1), bool] */;
  %85 = reshape(%83, newshape=[12, 10, 7]) /* ty=Tensor[(12, 10, 7), float32] */;
  %86 = reshape(%84, newshape=[65]) /* ty=Tensor[(65), bool] */;
  %87 = @func_573(%85, %86) /* ty=(Tensor[(12, 10, 7), float32], Tensor[(1, 5, 13), bool], Tensor[(65), bool]) */;
  %88 = cast(%var_1935, dtype="bool") /* ty=bool */;
  %89 = cast(%var_1936, dtype="bool") /* ty=Tensor[(120), bool] */;
  %90 = reshape(%88, newshape=[]) /* ty=bool */;
  %91 = reshape(%89, newshape=[10, 12, 1]) /* ty=Tensor[(10, 12, 1), bool] */;
  %92 = @func_399(%90, %91) /* ty=(Tensor[(14, 3, 5), float64], Tensor[(210), int8], Tensor[(10, 12, ?), int64]) */;
  %93 = %81.0;
  %94 = %82.0;
  %95 = %87.2;
  %96 = %92.0;
  (%93, %94, %95, %var_1914, %var_1915, %96, %var_1935, %var_1936)
}

def @func_9292(%var_9176: Tensor[(5, 60), bool]) -> (Tensor[(5, 60), float32], Tensor[(7, 2, 3), float32], Tensor[(7, 6), float64], Tensor[(5, 60), bool], Tensor[(65), bool], Tensor[(840), float32], Tensor[(840), float32], Tensor[(5, 60), bool]) {
  %97 = @func_2269() /* ty=(Tensor[(5, 60), bool], Tensor[(5, 60), bool]) */;
  %98 = %97.0;
  %99 = cast(%var_9176, dtype="uint8") /* ty=Tensor[(5, 60), uint8] */;
  %100 = shape_of(%98, dtype="int32") /* ty=Tensor[(2), int32] */;
  %101 = cast(%98, dtype="uint8") /* ty=Tensor[(5, 60), uint8] */;
  %102 = dyn.reshape(%99, %100, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %103 = maximum(%101, %102) /* ty=Tensor[(5, 60), uint8] */;
  %104 = cast(%103, dtype="float32") /* ty=Tensor[(5, 60), float32] */;
  %105 = cast(meta[relay.Constant][3] /* ty=Tensor[(7, 6), float64] */, dtype="float64") /* ty=Tensor[(7, 6), float64] */;
  %106 = reshape(%105, newshape=[7, 2, 3]) /* ty=Tensor[(7, 2, 3), float64] */;
  %107 = @func_8645(%106) /* ty=(Tensor[(7, 2, 3), float32],) */;
  %108 = @func_6835() /* ty=(Tensor[(5, 60), bool],) */;
  %109 = @func_2458() /* ty=(Tensor[(65), bool],) */;
  %110 = cast(meta[relay.Constant][4] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %111 = %109.0;
  %112 = cast(%111, dtype="bool") /* ty=Tensor[(65), bool] */;
  %113 = reshape(%110, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %114 = reshape(%112, newshape=[65]) /* ty=Tensor[(65), bool] */;
  %115 = @func_4932(%113, %114) /* ty=(Tensor[(6, 9, 16), float32], Tensor[(65), bool], Tensor[(840), float32], Tensor[(65), bool]) */;
  %116 = @func_7262() /* ty=(Tensor[(5, 60), bool],) */;
  %117 = cosh(%104) /* ty=Tensor[(5, 60), float32] */;
  %118 = %107.0;
  %119 = %108.0;
  %120 = %115.2;
  %121 = %116.0;
  (%117, %118, meta[relay.Constant][3] /* ty=Tensor[(7, 6), float64] */, %119, %111, %120, meta[relay.Constant][4] /* ty=Tensor[(840), float32] */, %121)
}

def @func_10502() -> (Tensor[(5, 60), bool],) {
  %122 = @func_9583() /* ty=Tensor[(5, 60), bool] */;
  (%122,)
}

def @func_3375(%var_3361: Tensor[(5, 60), bool]) -> (Tensor[(5, 60), float32], Tensor[(15, 15, 7), float64]) {
  %123 = @func_2088() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) */;
  %124 = %123.3;
  %125 = cast(%var_3361, dtype="float32") /* ty=Tensor[(5, 60), float32] */;
  %126 = shape_of(%124, dtype="int32") /* ty=Tensor[(2), int32] */;
  %127 = cast(%124, dtype="float32") /* ty=Tensor[(5, 60), float32] */;
  %128 = dyn.reshape(%125, %126, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %129 = @func_1840() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(864), float64]) */;
  %130 = floor_divide(%127, %128) /* ty=Tensor[(5, 60), float32] */;
  %131 = %129.0;
  (%130, %131)
}

def @func_6835() -> (Tensor[(5, 60), bool],) {
  %132 = @func_2475() /* ty=(Tensor[(5, 60), bool],) */;
  %133 = %132.0;
  (%133,)
}

def @func_3491() -> (Tensor[(5, 60), float32],) {
  %134 = @func_2475() /* ty=(Tensor[(5, 60), bool],) */;
  %135 = %134.0;
  %136 = cast(%135, dtype="float32") /* ty=Tensor[(5, 60), float32] */;
  %137 = sinh(%136) /* ty=Tensor[(5, 60), float32] */;
  (%137,)
}

def @func_3252() -> Tensor[(120), bool] {
  %138 = @func_2428() /* ty=(Tensor[(14, 1, 13), bool], Tensor[(6, 9, 16), float64], Tensor[(120), bool], Tensor[(840), float32], Tensor[(65), bool], Tensor[(120), bool], Tensor[(6, 9, 16), float64]) */;
  %138.2
}

def @func_5179() -> (Tensor[(5, 60), float64],) {
  %139 = @func_3984() /* ty=Tensor[(5, 60), float64] */;
  (%139,)
}

def @func_9489() -> (Tensor[(5, 60), bool],) {
  %140 = @func_3420() /* ty=Tensor[(5, 60), bool] */;
  (%140,)
}

def @func_4086() -> (Tensor[(15, 15, 7), float64], Tensor[(5, 60), float64]) {
  %141 = @func_1840() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(864), float64]) */;
  %142 = @func_3664() /* ty=(Tensor[(5, 60), float64],) */;
  %143 = %141.0;
  %144 = %142.0;
  (%143, %144)
}

def @func_2575() -> (Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) {
  %145 = @func_2428() /* ty=(Tensor[(14, 1, 13), bool], Tensor[(6, 9, 16), float64], Tensor[(120), bool], Tensor[(840), float32], Tensor[(65), bool], Tensor[(120), bool], Tensor[(6, 9, 16), float64]) */;
  %146 = %145.1;
  %147 = @func_2482() /* ty=Tensor[(5, 60), bool] */;
  (%146, %147)
}

def @func_5735() -> Tensor[(65), float32] {
  %148 = @func_2458() /* ty=(Tensor[(65), bool],) */;
  %149 = %148.0;
  %150 = cast(%149, dtype="float32") /* ty=Tensor[(65), float32] */;
  sin(%150) /* ty=Tensor[(65), float32] */
}

def @func_2867() -> (Tensor[(6, 9, 16), float64],) {
  %151 = @func_2428() /* ty=(Tensor[(14, 1, 13), bool], Tensor[(6, 9, 16), float64], Tensor[(120), bool], Tensor[(840), float32], Tensor[(65), bool], Tensor[(120), bool], Tensor[(6, 9, 16), float64]) */;
  %152 = %151.1;
  (%152,)
}

def @func_105(%var_74: Tensor[(14, 3, 5), int8], %var_94: Tensor[(14, 3, 5), int8]) -> (Tensor[(14, 3, 5), float64], Tensor[(14, 3, 5), uint64], Tensor[(14, 3, 5), uint8]) {
  %153 = cast(meta[relay.Constant][5] /* ty=Tensor[(14, 3, 5), int8] */, dtype="int8") /* ty=Tensor[(14, 3, 5), int8] */;
  %154 = shape_of(%var_74, dtype="int32") /* ty=Tensor[(3), int32] */;
  %155 = cast(%var_74, dtype="int8") /* ty=Tensor[(14, 3, 5), int8] */;
  %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %157 = left_shift(%155, %156) /* ty=Tensor[(14, 3, 5), int8] */;
  %158 = cast(%var_74, dtype="float64") /* ty=Tensor[(14, 3, 5), float64] */;
  %159 = shape_of(%157, dtype="int32") /* ty=Tensor[(3), int32] */;
  %160 = cast(%157, dtype="float64") /* ty=Tensor[(14, 3, 5), float64] */;
  %161 = dyn.reshape(%158, %159, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %162 = cast(%157, dtype="uint64") /* ty=Tensor[(14, 3, 5), uint64] */;
  %163 = shape_of(%var_74, dtype="int32") /* ty=Tensor[(3), int32] */;
  %164 = cast(%var_74, dtype="uint64") /* ty=Tensor[(14, 3, 5), uint64] */;
  %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %166 = cast(%var_94, dtype="uint8") /* ty=Tensor[(14, 3, 5), uint8] */;
  %167 = shape_of(%157, dtype="int32") /* ty=Tensor[(3), int32] */;
  %168 = cast(%157, dtype="uint8") /* ty=Tensor[(14, 3, 5), uint8] */;
  %169 = dyn.reshape(%166, %167, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %170 = floor_mod(%160, %161) /* ty=Tensor[(14, 3, 5), float64] */;
  %171 = maximum(%164, %165) /* ty=Tensor[(14, 3, 5), uint64] */;
  %172 = logical_xor(%168, %169) /* ty=Tensor[(14, 3, 5), uint8] */;
  (%170, %171, %172)
}

def @func_3989() -> Tensor[(10, 30), float32] {
  %173 = @func_2856() /* ty=(Tensor[(864), float64], Tensor[(10, 5, 6), bool], Tensor[(10, 30), float32]) */;
  %173.2
}

def @func_7788() -> (Tensor[(5, 60), float32], Tensor[(5, 60), bool], Tensor[(15, 15, 7), float64]) {
  %174 = @func_3491() /* ty=(Tensor[(5, 60), float32],) */;
  %175 = @func_5922() /* ty=(Tensor[(5, 60), bool],) */;
  %176 = %174.0;
  %177 = %175.0;
  %178 = @func_4026() /* ty=Tensor[(15, 15, 7), float64] */;
  (%176, %177, %178)
}

def @func_4544(%var_4486: Tensor[(840), float32]) -> (Tensor[(5, 60), bool], Tensor[(120), bool], Tensor[(840), float32], Tensor[(65), bool], bool, Tensor[(3, 40), bool], Tensor[(5, 60), float64], Tensor[(5, 60), float32], Tensor[(5, 60), bool], Tensor[(14, 3, 5), float64], Tensor[(10, 30), float32]) {
  %179 = @func_2004() /* ty=(Tensor[(5, 60), bool],) */;
  %180 = cast(%var_4486, dtype="float32") /* ty=Tensor[(840), float32] */;
  %181 = cast(meta[relay.Constant][6] /* ty=Tensor[(65), bool] */, dtype="bool") /* ty=Tensor[(65), bool] */;
  %182 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %183 = cast(meta[relay.Constant][7] /* ty=Tensor[(3, 40), bool] */, dtype="bool") /* ty=Tensor[(3, 40), bool] */;
  %184 = reshape(%180, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %185 = reshape(%181, newshape=[65, 1]) /* ty=Tensor[(65, 1), bool] */;
  %186 = reshape(%182, newshape=[]) /* ty=bool */;
  %187 = reshape(%183, newshape=[120]) /* ty=Tensor[(120), bool] */;
  %188 = @func_1939(%184, %185, %186, %187) /* ty=(Tensor[(15, 15, 7), float64], Tensor[(15, 15, 7), float64], Tensor[(65), bool], Tensor[(840), float32], Tensor[(65, 1), bool], Tensor[(14, 3, 5), float64], bool, Tensor[(120), bool]) */;
  %189 = %179.0;
  %190 = cast(%189, dtype="float64") /* ty=Tensor[(5, 60), float64] */;
  %191 = cast(%189, dtype="float64") /* ty=Tensor[(5, 60), float64] */;
  %192 = reshape(%190, newshape=[5, 60]) /* ty=Tensor[(5, 60), float64] */;
  %193 = reshape(%191, newshape=[5, 60]) /* ty=Tensor[(5, 60), float64] */;
  %194 = @func_2238(%192, %193) /* ty=(Tensor[(5, 60), float64], Tensor[(5, 60), bool]) */;
  %195 = @func_4206() /* ty=(Tensor[(5, 60), float32],) */;
  %196 = @func_2475() /* ty=(Tensor[(5, 60), bool],) */;
  %197 = cast(%var_4486, dtype="float32") /* ty=Tensor[(840), float32] */;
  %198 = cast(meta[relay.Constant][6] /* ty=Tensor[(65), bool] */, dtype="bool") /* ty=Tensor[(65), bool] */;
  %199 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %200 = %188.7;
  %201 = cast(%200, dtype="bool") /* ty=Tensor[(120), bool] */;
  %202 = reshape(%197, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %203 = reshape(%198, newshape=[65, 1]) /* ty=Tensor[(65, 1), bool] */;
  %204 = reshape(%199, newshape=[]) /* ty=bool */;
  %205 = reshape(%201, newshape=[120]) /* ty=Tensor[(120), bool] */;
  %206 = @func_1939(%202, %203, %204, %205) /* ty=(Tensor[(15, 15, 7), float64], Tensor[(15, 15, 7), float64], Tensor[(65), bool], Tensor[(840), float32], Tensor[(65, 1), bool], Tensor[(14, 3, 5), float64], bool, Tensor[(120), bool]) */;
  %207 = %196.0;
  %208 = cast(%207, dtype="float32") /* ty=Tensor[(5, 60), float32] */;
  %209 = reshape(%208, newshape=[10, 30]) /* ty=Tensor[(10, 30), float32] */;
  %210 = @func_3120(%209) /* ty=(Tensor[(10, 30), float32], Tensor[(15, 15, 7), float64], Tensor[(10, 30), uint64]) */;
  %211 = %194.0;
  %212 = %195.0;
  %213 = %206.5;
  %214 = %210.0;
  (%189, %200, %var_4486, meta[relay.Constant][6] /* ty=Tensor[(65), bool] */, False /* ty=bool */, meta[relay.Constant][7] /* ty=Tensor[(3, 40), bool] */, %211, %212, %207, %213, %214)
}

def @func_2458() -> (Tensor[(65), bool],) {
  %215 = @func_2428() /* ty=(Tensor[(14, 1, 13), bool], Tensor[(6, 9, 16), float64], Tensor[(120), bool], Tensor[(840), float32], Tensor[(65), bool], Tensor[(120), bool], Tensor[(6, 9, 16), float64]) */;
  %216 = %215.4;
  (%216,)
}

def @func_5277(%var_5212: bool) -> (Tensor[(16, 16, 13), bool], Tensor[(16, 16, 13), float64], Tensor[(5, 60), bool], Tensor[(5, 60), bool], Tensor[(6, 9, 16), float32]) {
  %217 = cast(%var_5212, dtype="bool") /* ty=bool */;
  %218 = cast(meta[relay.Constant][8] /* ty=Tensor[(16, 16, 13), bool] */, dtype="bool") /* ty=Tensor[(16, 16, 13), bool] */;
  %219 = cast(meta[relay.Constant][8] /* ty=Tensor[(16, 16, 13), bool] */, dtype="float64") /* ty=Tensor[(16, 16, 13), float64] */;
  %220 = @func_2475() /* ty=(Tensor[(5, 60), bool],) */;
  %221 = @func_3971() /* ty=(Tensor[(5, 60), bool], Tensor[(15, 15, 7), float64], Tensor[(5, 60), bool], Tensor[(5, 60), bool], Tensor[(120), bool], Tensor[(840), float32], Tensor[(65), bool], Tensor[(6, 9, 16), float64], Tensor[(5, 60), float64], Tensor[(5, 60), bool]) */;
  %222 = @func_2867() /* ty=(Tensor[(6, 9, 16), float64],) */;
  %223 = %222.0;
  %224 = cast(%223, dtype="float32") /* ty=Tensor[(6, 9, 16), float32] */;
  %225 = logical_or(%217, %218) /* ty=Tensor[(16, 16, 13), bool] */;
  %226 = asin(%219) /* ty=Tensor[(16, 16, 13), float64] */;
  %227 = %220.0;
  %228 = %221.2;
  %229 = log(%224) /* ty=Tensor[(6, 9, 16), float32] */;
  (%225, %226, %227, %228, %229)
}

def @func_1974() -> (Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) {
  %230 = @func_1840() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(864), float64]) */;
  %231 = cast(meta[relay.Constant][9] /* ty=Tensor[(5, 60), float32] */, dtype="float32") /* ty=Tensor[(5, 60), float32] */;
  %232 = reshape(%231, newshape=[10, 5, 6]) /* ty=Tensor[(10, 5, 6), float32] */;
  %233 = @func_1812(%232) /* ty=Tensor[(10, 5, 6), bool] */;
  %234 = cast(%233, dtype="bool") /* ty=Tensor[(10, 5, 6), bool] */;
  %235 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(5, 60), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %236 = cast(meta[relay.Constant][9] /* ty=Tensor[(5, 60), float32] */, dtype="bool") /* ty=Tensor[(5, 60), bool] */;
  %237 = dyn.reshape(%234, %235, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %238 = %230.1;
  %239 = equal(%236, %237) /* ty=Tensor[(5, 60), bool] */;
  (%238, %239)
}

def @func_3404() -> (Tensor[(5, 60), bool],) {
  %240 = @func_2575() /* ty=(Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) */;
  %241 = %240.1;
  (%241,)
}

def @func_3984() -> Tensor[(5, 60), float64] {
  @func_2179() /* ty=Tensor[(5, 60), float64] */
}

def @func_4736(%var_4645: Tensor[(3, 7, 3), float64], %var_4655: Tensor[(2, 420), float32], %var_4733: bool, %var_4734: Tensor[(120), bool]) -> (Tensor[(3, 7, 3), float64], Tensor[(5, 60), bool], Tensor[(6, 9, 16), float64], Tensor[(2, 420), int64], Tensor[(5, 60), bool], Tensor[(65), bool], Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool], Tensor[(14, 3, 5), float64], bool, Tensor[(120), bool]) {
  %242 = cast(%var_4645, dtype="float64") /* ty=Tensor[(3, 7, 3), float64] */;
  %243 = @func_4282() /* ty=(Tensor[(6, 9, 16), float32], Tensor[(6, 9, 16), float64]) */;
  %244 = cast(meta[relay.Constant][10] /* ty=Tensor[(2, 420), float32] */, dtype="int64") /* ty=Tensor[(2, 420), int64] */;
  %245 = shape_of(%var_4655, dtype="int32") /* ty=Tensor[(2), int32] */;
  %246 = cast(%var_4655, dtype="int64") /* ty=Tensor[(2, 420), int64] */;
  %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %248 = cast(%var_4655, dtype="float32") /* ty=Tensor[(2, 420), float32] */;
  %249 = reshape(%248, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %250 = @func_4544(%249) /* ty=(Tensor[(5, 60), bool], Tensor[(120), bool], Tensor[(840), float32], Tensor[(65), bool], bool, Tensor[(3, 40), bool], Tensor[(5, 60), float64], Tensor[(5, 60), float32], Tensor[(5, 60), bool], Tensor[(14, 3, 5), float64], Tensor[(10, 30), float32]) */;
  %251 = %250.8;
  %252 = cast(meta[relay.Constant][11] /* ty=Tensor[(5, 60), bool] */, dtype="bool") /* ty=Tensor[(5, 60), bool] */;
  %253 = shape_of(%251, dtype="int32") /* ty=Tensor[(2), int32] */;
  %254 = cast(%251, dtype="bool") /* ty=Tensor[(5, 60), bool] */;
  %255 = dyn.reshape(%252, %253, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %256 = @func_3971() /* ty=(Tensor[(5, 60), bool], Tensor[(15, 15, 7), float64], Tensor[(5, 60), bool], Tensor[(5, 60), bool], Tensor[(120), bool], Tensor[(840), float32], Tensor[(65), bool], Tensor[(6, 9, 16), float64], Tensor[(5, 60), float64], Tensor[(5, 60), bool]) */;
  %257 = @func_3274() /* ty=(Tensor[(15, 15, 7), float64],) */;
  %258 = @func_3971() /* ty=(Tensor[(5, 60), bool], Tensor[(15, 15, 7), float64], Tensor[(5, 60), bool], Tensor[(5, 60), bool], Tensor[(120), bool], Tensor[(840), float32], Tensor[(65), bool], Tensor[(6, 9, 16), float64], Tensor[(5, 60), float64], Tensor[(5, 60), bool]) */;
  %259 = @func_3404() /* ty=(Tensor[(5, 60), bool],) */;
  %260 = cast(%var_4733, dtype="bool") /* ty=bool */;
  %261 = cast(%var_4734, dtype="bool") /* ty=Tensor[(120), bool] */;
  %262 = reshape(%260, newshape=[]) /* ty=bool */;
  %263 = reshape(%261, newshape=[10, 12, 1]) /* ty=Tensor[(10, 12, 1), bool] */;
  %264 = @func_399(%262, %263) /* ty=(Tensor[(14, 3, 5), float64], Tensor[(210), int8], Tensor[(10, 12, ?), int64]) */;
  %265 = cos(%242) /* ty=Tensor[(3, 7, 3), float64] */;
  %266 = @func_2482() /* ty=Tensor[(5, 60), bool] */;
  %267 = %243.1;
  %268 = right_shift(%246, %247) /* ty=Tensor[(2, 420), int64] */;
  %269 = greater_equal(%254, %255) /* ty=Tensor[(5, 60), bool] */;
  %270 = %256.6;
  %271 = %257.0;
  %272 = %258.7;
  %273 = %259.0;
  %274 = %264.0;
  (%265, %266, %267, %268, %269, %270, %271, %272, %273, %274, %var_4733, %var_4734)
}

def @func_4282() -> (Tensor[(6, 9, 16), float32], Tensor[(6, 9, 16), float64]) {
  %275 = @func_2428() /* ty=(Tensor[(14, 1, 13), bool], Tensor[(6, 9, 16), float64], Tensor[(120), bool], Tensor[(840), float32], Tensor[(65), bool], Tensor[(120), bool], Tensor[(6, 9, 16), float64]) */;
  %276 = %275.6;
  %277 = cast(meta[relay.Constant][12] /* ty=Tensor[(6, 9, 16), float64] */, dtype="float32") /* ty=Tensor[(6, 9, 16), float32] */;
  %278 = shape_of(%276, dtype="int32") /* ty=Tensor[(3), int32] */;
  %279 = cast(%276, dtype="float32") /* ty=Tensor[(6, 9, 16), float32] */;
  %280 = dyn.reshape(%277, %278, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %281 = @func_2088() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) */;
  %282 = floor_mod(%279, %280) /* ty=Tensor[(6, 9, 16), float32] */;
  %283 = %281.2;
  (%282, %283)
}

def @func_1840() -> (Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(864), float64]) {
  %284 = cast(meta[relay.Constant][13] /* ty=Tensor[(15, 15, 7), float64] */, dtype="float64") /* ty=Tensor[(15, 15, 7), float64] */;
  %285 = cast(meta[relay.Constant][14] /* ty=Tensor[(864), float64] */, dtype="float64") /* ty=Tensor[(864), float64] */;
  %286 = reshape(%285, newshape=[6, 9, 16]) /* ty=Tensor[(6, 9, 16), float64] */;
  %287 = @func_1346(%286) /* ty=(Tensor[(6, 9, 16), float64],) */;
  %288 = exp(%284) /* ty=Tensor[(15, 15, 7), float64] */;
  %289 = %287.0;
  (%288, %289, meta[relay.Constant][14] /* ty=Tensor[(864), float64] */)
}

def @func_10441() -> Tensor[(5, 60), float64] {
  %290 = @func_10022() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(3, 4, 13), float32], Tensor[(156), float32], Tensor[(5, 60), bool], Tensor[(5, 60), float64]) */;
  %290.4
}

def @func_4151() -> (Tensor[(6, 9, 16), float32], Tensor[(5, 60), uint64], Tensor[(300, 1), float32], Tensor[(1, 210), int8], Tensor[(5, 42), int8]) {
  %291 = @func_2867() /* ty=(Tensor[(6, 9, 16), float64],) */;
  %292 = %291.0;
  %293 = cast(meta[relay.Constant][15] /* ty=Tensor[(6, 9, 16), float64] */, dtype="float32") /* ty=Tensor[(6, 9, 16), float32] */;
  %294 = shape_of(%292, dtype="int32") /* ty=Tensor[(3), int32] */;
  %295 = cast(%292, dtype="float32") /* ty=Tensor[(6, 9, 16), float32] */;
  %296 = dyn.reshape(%293, %294, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %297 = cast(meta[relay.Constant][16] /* ty=Tensor[(300, 1), bool] */, dtype="bool") /* ty=Tensor[(300, 1), bool] */;
  %298 = reshape(%297, newshape=[5, 60]) /* ty=Tensor[(5, 60), bool] */;
  %299 = @func_2141(%298) /* ty=(Tensor[(5, 60), bool], Tensor[(5, 60), uint64]) */;
  %300 = cast(meta[relay.Constant][16] /* ty=Tensor[(300, 1), bool] */, dtype="float32") /* ty=Tensor[(300, 1), float32] */;
  %301 = cast(meta[relay.Constant][16] /* ty=Tensor[(300, 1), bool] */, dtype="bool") /* ty=Tensor[(300, 1), bool] */;
  %302 = cast(meta[relay.Constant][17] /* ty=Tensor[(5, 42), int8] */, dtype="int8") /* ty=Tensor[(5, 42), int8] */;
  %303 = reshape(%301, newshape=[5, 60]) /* ty=Tensor[(5, 60), bool] */;
  %304 = reshape(%302, newshape=[1, 210]) /* ty=Tensor[(1, 210), int8] */;
  %305 = @func_2948(%303, %304) /* ty=(Tensor[(5, 60), int8], Tensor[(14, 3, 5), uint8], Tensor[(1, 210), int8]) */;
  %306 = mod(%295, %296) /* ty=Tensor[(6, 9, 16), float32] */;
  %307 = %299.1;
  %308 = sinh(%300) /* ty=Tensor[(300, 1), float32] */;
  %309 = %305.2;
  (%306, %307, %308, %309, meta[relay.Constant][17] /* ty=Tensor[(5, 42), int8] */)
}

def @func_6544(%var_6529: Tensor[(6, 9, 16), float32]) -> (Tensor[(6, 9, 16), float32], Tensor[(5, 60), bool], Tensor[(110, 9), uint16]) {
  %310 = @func_4413() /* ty=(Tensor[(6, 9, 16), float32], Tensor[(5, 60), float64]) */;
  %311 = %310.0;
  %312 = cast(%var_6529, dtype="float32") /* ty=Tensor[(6, 9, 16), float32] */;
  %313 = shape_of(%311, dtype="int32") /* ty=Tensor[(3), int32] */;
  %314 = cast(%311, dtype="float32") /* ty=Tensor[(6, 9, 16), float32] */;
  %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %316 = cast(meta[relay.Constant][18] /* ty=Tensor[(110, 9), uint16] */, dtype="uint16") /* ty=Tensor[(110, 9), uint16] */;
  %317 = cast(meta[relay.Constant][18] /* ty=Tensor[(110, 9), uint16] */, dtype="uint16") /* ty=Tensor[(110, 9), uint16] */;
  %318 = reshape(%316, newshape=[15, 6, 11]) /* ty=Tensor[(15, 6, 11), uint16] */;
  %319 = reshape(%317, newshape=[15, 6, 11]) /* ty=Tensor[(15, 6, 11), uint16] */;
  %320 = @func_3208(%318, %319) /* ty=(Tensor[(15, 6, 11), bool], Tensor[(5, 60), bool]) */;
  %321 = floor_divide(%314, %315) /* ty=Tensor[(6, 9, 16), float32] */;
  %322 = %320.1;
  (%321, %322, meta[relay.Constant][18] /* ty=Tensor[(110, 9), uint16] */)
}

def @func_8987(%var_8975: Tensor[(16, 7, 7), uint8], %var_8976: Tensor[(16, 7, 7), uint8]) -> (Tensor[(16, 7, 7), bool],) {
  %323 = cast(%var_8976, dtype="bool") /* ty=Tensor[(16, 7, 7), bool] */;
  %324 = shape_of(%var_8975, dtype="int32") /* ty=Tensor[(3), int32] */;
  %325 = cast(%var_8975, dtype="bool") /* ty=Tensor[(16, 7, 7), bool] */;
  %326 = dyn.reshape(%323, %324, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %327 = not_equal(%325, %326) /* ty=Tensor[(16, 7, 7), bool] */;
  (%327,)
}

def @func_6085() -> (Tensor[(5, 60), float64],) {
  %328 = @func_2179() /* ty=Tensor[(5, 60), float64] */;
  (%328,)
}

def @func_10926(%var_10919: Tensor[(400), float64]) -> (Tensor[(65), float32], Tensor[(16, 5, 5), float64], Tensor[(400), float64]) {
  %329 = cast(%var_10919, dtype="float64") /* ty=Tensor[(400), float64] */;
  %330 = cast(%var_10919, dtype="float64") /* ty=Tensor[(400), float64] */;
  %331 = reshape(%329, newshape=[16, 5, 5]) /* ty=Tensor[(16, 5, 5), float64] */;
  %332 = reshape(%330, newshape=[16, 5, 5]) /* ty=Tensor[(16, 5, 5), float64] */;
  %333 = @func_8255(%331, %332) /* ty=(Tensor[(16, 5, 5), float64], Tensor[(16, 5, 5), float64]) */;
  %334 = @func_6439() /* ty=Tensor[(65), float32] */;
  %335 = %333.0;
  (%334, %335, %var_10919)
}

def @func_8837() -> (Tensor[(5, 60), bool],) {
  %336 = @func_5997() /* ty=(Tensor[(5, 60), bool],) */;
  %337 = %336.0;
  (%337,)
}

def @func_2746(%var_2720: Tensor[(5, 60), bool]) -> Tensor[(5, 60), int64] {
  %338 = @func_2575() /* ty=(Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) */;
  %339 = %338.1;
  %340 = cast(%var_2720, dtype="int64") /* ty=Tensor[(5, 60), int64] */;
  %341 = shape_of(%339, dtype="int32") /* ty=Tensor[(2), int32] */;
  %342 = cast(%339, dtype="int64") /* ty=Tensor[(5, 60), int64] */;
  %343 = dyn.reshape(%340, %341, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  right_shift(%342, %343) /* ty=Tensor[(5, 60), int64] */
}

def @func_6593() -> (Tensor[(5, 60), float64], Tensor[(5, 60), bool]) {
  %344 = @func_2475() /* ty=(Tensor[(5, 60), bool],) */;
  %345 = %344.0;
  %346 = cast(%345, dtype="float64") /* ty=Tensor[(5, 60), float64] */;
  %347 = @func_2088() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) */;
  %348 = %347.3;
  %349 = cast(%345, dtype="bool") /* ty=Tensor[(5, 60), bool] */;
  %350 = shape_of(%348, dtype="int32") /* ty=Tensor[(2), int32] */;
  %351 = cast(%348, dtype="bool") /* ty=Tensor[(5, 60), bool] */;
  %352 = dyn.reshape(%349, %350, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %353 = acos(%346) /* ty=Tensor[(5, 60), float64] */;
  %354 = not_equal(%351, %352) /* ty=Tensor[(5, 60), bool] */;
  (%353, %354)
}

def @func_7419() -> (Tensor[(210), int8],) {
  %355 = @func_4813() /* ty=(Tensor[(6, 9, 16), float64], Tensor[(14, 3, 5), uint8], Tensor[(210), int8]) */;
  %356 = %355.2;
  (%356,)
}

def @func_3208(%var_3152: Tensor[(15, 6, 11), uint16], %var_3153: Tensor[(15, 6, 11), uint16]) -> (Tensor[(15, 6, 11), bool], Tensor[(5, 60), bool]) {
  %357 = cast(%var_3153, dtype="bool") /* ty=Tensor[(15, 6, 11), bool] */;
  %358 = shape_of(%var_3152, dtype="int32") /* ty=Tensor[(3), int32] */;
  %359 = cast(%var_3152, dtype="bool") /* ty=Tensor[(15, 6, 11), bool] */;
  %360 = dyn.reshape(%357, %358, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %361 = @func_2475() /* ty=(Tensor[(5, 60), bool],) */;
  %362 = greater(%359, %360) /* ty=Tensor[(15, 6, 11), bool] */;
  %363 = %361.0;
  (%362, %363)
}

def @func_10377(%var_10342: bool) -> (Tensor[(5, 42), int8], Tensor[(5, 60), bool], Tensor[(300), float32], bool, Tensor[(5, 60), float64], Tensor[(15, 15, 7), int64], Tensor[(1575), float64]) {
  %364 = @func_4151() /* ty=(Tensor[(6, 9, 16), float32], Tensor[(5, 60), uint64], Tensor[(300, 1), float32], Tensor[(1, 210), int8], Tensor[(5, 42), int8]) */;
  %365 = cast(meta[relay.Constant][19] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
  %366 = cast(meta[relay.Constant][19] /* ty=Tensor[(300), float32] */, dtype="int16") /* ty=Tensor[(300), int16] */;
  %367 = cast(%var_10342, dtype="bool") /* ty=bool */;
  %368 = reshape(%365, newshape=[10, 30]) /* ty=Tensor[(10, 30), float32] */;
  %369 = reshape(%366, newshape=[10, 30]) /* ty=Tensor[(10, 30), int16] */;
  %370 = reshape(%367, newshape=[]) /* ty=bool */;
  %371 = @func_7123(%368, %369, %370) /* ty=(Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool], Tensor[(10, 30), bool], Tensor[(15, 15, 7), float64], Tensor[(840), float32], bool, Tensor[(120), bool]) */;
  %372 = cast(meta[relay.Constant][20] /* ty=Tensor[(1575), float64] */, dtype="float64") /* ty=Tensor[(1575), float64] */;
  %373 = reshape(%372, newshape=[15, 15, 7]) /* ty=Tensor[(15, 15, 7), float64] */;
  %374 = %364.4;
  %375 = %371.1;
  %376 = @func_5891() /* ty=Tensor[(5, 60), float64] */;
  %377 = @func_4632(%373) /* ty=Tensor[(15, 15, 7), int64] */;
  (%374, %375, meta[relay.Constant][19] /* ty=Tensor[(300), float32] */, %var_10342, %376, %377, meta[relay.Constant][20] /* ty=Tensor[(1575), float64] */)
}

def @func_2088() -> (Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) {
  %378 = @func_1840() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(864), float64]) */;
  %379 = @func_1840() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(864), float64]) */;
  %380 = %379.1;
  %381 = cast(%380, dtype="float64") /* ty=Tensor[(6, 9, 16), float64] */;
  %382 = reshape(%381, newshape=[6, 9, 16]) /* ty=Tensor[(6, 9, 16), float64] */;
  %383 = @func_1346(%382) /* ty=(Tensor[(6, 9, 16), float64],) */;
  %384 = @func_2004() /* ty=(Tensor[(5, 60), bool],) */;
  %385 = %378.0;
  %386 = %383.0;
  %387 = %384.0;
  (%385, %380, %386, %387)
}

def @func_9792() -> (Tensor[(5, 60), bool],) {
  %388 = @func_7676() /* ty=(Tensor[(5, 60), float32], Tensor[(5, 60), float64], Tensor[(10, 5, 6), bool], Tensor[(5, 60), bool]) */;
  %389 = %388.3;
  (%389,)
}

def @func_3120(%var_3065: Tensor[(10, 30), float32]) -> (Tensor[(10, 30), float32], Tensor[(15, 15, 7), float64], Tensor[(10, 30), uint64]) {
  %390 = @func_2856() /* ty=(Tensor[(864), float64], Tensor[(10, 5, 6), bool], Tensor[(10, 30), float32]) */;
  %391 = %390.2;
  %392 = cast(%391, dtype="float32") /* ty=Tensor[(10, 30), float32] */;
  %393 = @func_2088() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) */;
  %394 = cast(%var_3065, dtype="bool") /* ty=Tensor[(10, 30), bool] */;
  %395 = shape_of(%391, dtype="int32") /* ty=Tensor[(2), int32] */;
  %396 = cast(%391, dtype="bool") /* ty=Tensor[(10, 30), bool] */;
  %397 = dyn.reshape(%394, %395, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %398 = less(%396, %397) /* ty=Tensor[(10, 30), bool] */;
  %399 = cast(%391, dtype="uint64") /* ty=Tensor[(10, 30), uint64] */;
  %400 = shape_of(%398, dtype="int32") /* ty=Tensor[(2), int32] */;
  %401 = cast(%398, dtype="uint64") /* ty=Tensor[(10, 30), uint64] */;
  %402 = dyn.reshape(%399, %400, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %403 = subtract(%401, %402) /* ty=Tensor[(10, 30), uint64] */;
  %404 = cast(%391, dtype="uint64") /* ty=Tensor[(10, 30), uint64] */;
  %405 = shape_of(%403, dtype="int32") /* ty=Tensor[(2), int32] */;
  %406 = cast(%403, dtype="uint64") /* ty=Tensor[(10, 30), uint64] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %408 = cosh(%392) /* ty=Tensor[(10, 30), float32] */;
  %409 = %393.0;
  %410 = left_shift(%406, %407) /* ty=Tensor[(10, 30), uint64] */;
  (%408, %409, %410)
}

def @func_1812(%var_1783: Tensor[(10, 5, 6), float32]) -> Tensor[(10, 5, 6), bool] {
  %411 = cast(%var_1783, dtype="float32") /* ty=Tensor[(10, 5, 6), float32] */;
  %412 = asin(%411) /* ty=Tensor[(10, 5, 6), float32] */;
  %413 = cast(%412, dtype="bool") /* ty=Tensor[(10, 5, 6), bool] */;
  %414 = shape_of(%var_1783, dtype="int32") /* ty=Tensor[(3), int32] */;
  %415 = cast(%var_1783, dtype="bool") /* ty=Tensor[(10, 5, 6), bool] */;
  %416 = dyn.reshape(%413, %414, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%415, %416) /* ty=Tensor[(10, 5, 6), bool] */
}

def @func_6280() -> (Tensor[(5, 60), bool], Tensor[(6, 9, 16), float64], Tensor[(5, 60), float64]) {
  %417 = @func_2475() /* ty=(Tensor[(5, 60), bool],) */;
  %418 = @func_4813() /* ty=(Tensor[(6, 9, 16), float64], Tensor[(14, 3, 5), uint8], Tensor[(210), int8]) */;
  %419 = @func_5997() /* ty=(Tensor[(5, 60), bool],) */;
  %420 = %419.0;
  %421 = cast(%420, dtype="float32") /* ty=Tensor[(5, 60), float32] */;
  %422 = log10(%421) /* ty=Tensor[(5, 60), float32] */;
  %423 = cast(%422, dtype="float64") /* ty=Tensor[(5, 60), float64] */;
  %424 = %417.0;
  %425 = %418.0;
  %426 = atan(%423) /* ty=Tensor[(5, 60), float64] */;
  (%424, %425, %426)
}

def @func_4813() -> (Tensor[(6, 9, 16), float64], Tensor[(14, 3, 5), uint8], Tensor[(210), int8]) {
  %427 = @func_2867() /* ty=(Tensor[(6, 9, 16), float64],) */;
  %428 = cast(meta[relay.Constant][21] /* ty=Tensor[(210), int8] */, dtype="int8") /* ty=Tensor[(210), int8] */;
  %429 = cast(meta[relay.Constant][21] /* ty=Tensor[(210), int8] */, dtype="int8") /* ty=Tensor[(210), int8] */;
  %430 = reshape(%428, newshape=[14, 3, 5]) /* ty=Tensor[(14, 3, 5), int8] */;
  %431 = reshape(%429, newshape=[14, 3, 5]) /* ty=Tensor[(14, 3, 5), int8] */;
  %432 = @func_105(%430, %431) /* ty=(Tensor[(14, 3, 5), float64], Tensor[(14, 3, 5), uint64], Tensor[(14, 3, 5), uint8]) */;
  %433 = %427.0;
  %434 = %432.2;
  (%433, %434, meta[relay.Constant][21] /* ty=Tensor[(210), int8] */)
}

def @func_3817(%var_3811: Tensor[(2, 16, 13), float32], %var_3812: Tensor[(2, 16, 13), float32]) -> Tensor[(2, 16, 13), float32] {
  %435 = cast(%var_3812, dtype="float32") /* ty=Tensor[(2, 16, 13), float32] */;
  %436 = shape_of(%var_3811, dtype="int32") /* ty=Tensor[(3), int32] */;
  %437 = cast(%var_3811, dtype="float32") /* ty=Tensor[(2, 16, 13), float32] */;
  %438 = dyn.reshape(%435, %436, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  multiply(%437, %438) /* ty=Tensor[(2, 16, 13), float32] */
}

def @func_9366() -> (Tensor[(5, 60), bool], Tensor[(5, 60), float64]) {
  %439 = @func_7586() /* ty=(Tensor[(5, 60), bool], Tensor[(5, 60), bool], Tensor[(10, 30), float32], Tensor[(6, 9, 16), float32]) */;
  %440 = %439.0;
  %441 = @func_3984() /* ty=Tensor[(5, 60), float64] */;
  (%440, %441)
}

def @func_12117() -> (Tensor[(5, 60), bool],) {
  %442 = @func_11400() /* ty=(Tensor[(5, 60), bool],) */;
  %443 = %442.0;
  (%443,)
}

def @func_4026() -> Tensor[(15, 15, 7), float64] {
  %444 = @func_2088() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) */;
  %444.0
}

def @func_8823() -> Tensor[(5, 60), bool] {
  %445 = @func_7586() /* ty=(Tensor[(5, 60), bool], Tensor[(5, 60), bool], Tensor[(10, 30), float32], Tensor[(6, 9, 16), float32]) */;
  %445.1
}

def @func_12153(%var_12138: Tensor[(50, 6), bool]) -> (Tensor[(6, 9, 16), float64], Tensor[(210), int8], Tensor[(10, 5, 6), bool], Tensor[(50, 6), bool]) {
  %446 = @func_1974() /* ty=(Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) */;
  %447 = cast(%var_12138, dtype="bool") /* ty=Tensor[(50, 6), bool] */;
  %448 = reshape(%447, newshape=[5, 60]) /* ty=Tensor[(5, 60), bool] */;
  %449 = @func_7233(%448) /* ty=(Tensor[(5, 60), bool], Tensor[(5, 60), float64], Tensor[(65), bool], Tensor[(10, 5, 6), bool], Tensor[(6, 9, 16), float64]) */;
  %450 = %446.0;
  %451 = @func_8448() /* ty=Tensor[(210), int8] */;
  %452 = %449.3;
  (%450, %451, %452, %var_12138)
}

def @func_5089(%var_5060: Tensor[(300), bool], %var_5061: Tensor[(1, 210), int8]) -> (Tensor[(6, 9, 16), float64], Tensor[(6, 9, 16), float64], Tensor[(1, 210), int8], Tensor[(300), bool], Tensor[(1, 210), int8], Tensor[(10, 5, 6), bool], Tensor[(120), bool]) {
  %453 = @func_2867() /* ty=(Tensor[(6, 9, 16), float64],) */;
  %454 = @func_2867() /* ty=(Tensor[(6, 9, 16), float64],) */;
  %455 = cast(%var_5060, dtype="bool") /* ty=Tensor[(300), bool] */;
  %456 = cast(%var_5061, dtype="int8") /* ty=Tensor[(1, 210), int8] */;
  %457 = reshape(%455, newshape=[5, 60]) /* ty=Tensor[(5, 60), bool] */;
  %458 = reshape(%456, newshape=[1, 210]) /* ty=Tensor[(1, 210), int8] */;
  %459 = @func_2948(%457, %458) /* ty=(Tensor[(5, 60), int8], Tensor[(14, 3, 5), uint8], Tensor[(1, 210), int8]) */;
  %460 = cast(%var_5060, dtype="float32") /* ty=Tensor[(300), float32] */;
  %461 = reshape(%460, newshape=[10, 5, 6]) /* ty=Tensor[(10, 5, 6), float32] */;
  %462 = %453.0;
  %463 = %454.0;
  %464 = %459.2;
  %465 = @func_1812(%461) /* ty=Tensor[(10, 5, 6), bool] */;
  %466 = @func_3252() /* ty=Tensor[(120), bool] */;
  (%462, %463, %464, %var_5060, %var_5061, %465, %466)
}

def @func_6057(%var_6039: Tensor[(840), float32]) -> (Tensor[(840), uint64], Tensor[(6, 9, 16), float64]) {
  %467 = @func_3971() /* ty=(Tensor[(5, 60), bool], Tensor[(15, 15, 7), float64], Tensor[(5, 60), bool], Tensor[(5, 60), bool], Tensor[(120), bool], Tensor[(840), float32], Tensor[(65), bool], Tensor[(6, 9, 16), float64], Tensor[(5, 60), float64], Tensor[(5, 60), bool]) */;
  %468 = %467.5;
  %469 = cast(%var_6039, dtype="uint64") /* ty=Tensor[(840), uint64] */;
  %470 = shape_of(%468, dtype="int32") /* ty=Tensor[(1), int32] */;
  %471 = cast(%468, dtype="uint64") /* ty=Tensor[(840), uint64] */;
  %472 = dyn.reshape(%469, %470, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %473 = @func_2575() /* ty=(Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) */;
  %474 = bitwise_xor(%471, %472) /* ty=Tensor[(840), uint64] */;
  %475 = %473.0;
  (%474, %475)
}

def @func_6871(%var_6854: Tensor[(12, 2, 8), float64]) -> (Tensor[(12, 2, 8), float64], Tensor[(65), float32]) {
  %476 = cast(%var_6854, dtype="float64") /* ty=Tensor[(12, 2, 8), float64] */;
  %477 = exp(%476) /* ty=Tensor[(12, 2, 8), float64] */;
  %478 = @func_5735() /* ty=Tensor[(65), float32] */;
  (%477, %478)
}

def @func_4932(%var_4918: Tensor[(840), float32], %var_4919: Tensor[(65), bool]) -> (Tensor[(6, 9, 16), float32], Tensor[(65), bool], Tensor[(840), float32], Tensor[(65), bool]) {
  %479 = @func_4282() /* ty=(Tensor[(6, 9, 16), float32], Tensor[(6, 9, 16), float64]) */;
  %480 = cast(%var_4918, dtype="float32") /* ty=Tensor[(840), float32] */;
  %481 = cast(%var_4919, dtype="bool") /* ty=Tensor[(65), bool] */;
  %482 = reshape(%480, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %483 = reshape(%481, newshape=[65]) /* ty=Tensor[(65), bool] */;
  %484 = @func_2650(%482, %483) /* ty=(Tensor[(5, 60), float32], Tensor[(5, 60), bool], bool, Tensor[(840), float32], Tensor[(65), bool], bool, Tensor[(120), bool]) */;
  %485 = %479.0;
  %486 = %484.4;
  (%485, %486, %var_4918, %var_4919)
}

def @func_11344() -> (Tensor[(5, 60), float64], Tensor[(5, 60), float64], Tensor[(65), bool], Tensor[(5, 60), float64]) {
  %487 = @func_3971() /* ty=(Tensor[(5, 60), bool], Tensor[(15, 15, 7), float64], Tensor[(5, 60), bool], Tensor[(5, 60), bool], Tensor[(120), bool], Tensor[(840), float32], Tensor[(65), bool], Tensor[(6, 9, 16), float64], Tensor[(5, 60), float64], Tensor[(5, 60), bool]) */;
  %488 = @func_8529() /* ty=Tensor[(5, 60), float64] */;
  %489 = cast(%488, dtype="float64") /* ty=Tensor[(5, 60), float64] */;
  %490 = @func_3984() /* ty=Tensor[(5, 60), float64] */;
  %491 = cast(%490, dtype="float64") /* ty=Tensor[(5, 60), float64] */;
  %492 = reshape(%489, newshape=[5, 60]) /* ty=Tensor[(5, 60), float64] */;
  %493 = reshape(%491, newshape=[5, 60]) /* ty=Tensor[(5, 60), float64] */;
  %494 = @func_2238(%492, %493) /* ty=(Tensor[(5, 60), float64], Tensor[(5, 60), bool]) */;
  %495 = %487.6;
  %496 = %494.0;
  (%490, %488, %495, %496)
}

def @func_11881(%var_11803: Tensor[(5, 42), int8], %var_11840: Tensor[(840), float32], %var_11853: Tensor[(3, 40), bool]) -> (Tensor[(6, 9, 16), float64], Tensor[(10, 5, 6), bool], Tensor[(300), bool], Tensor[(15, 15, 7), float64], Tensor[(1, 210), int8], Tensor[(5, 42), int8], Tensor[(784), uint8], Tensor[(63), float64], Tensor[(840), float32], bool, Tensor[(1, 65), float64], Tensor[(3, 40), bool], Tensor[(6, 9, 16), float64], Tensor[(210), int8], Tensor[(65), float32]) {
  %497 = @func_7710() /* ty=(Tensor[(6, 9, 16), float64],) */;
  %498 = cast(meta[relay.Constant][22] /* ty=Tensor[(300), bool] */, dtype="bool") /* ty=Tensor[(300), bool] */;
  %499 = reshape(%498, newshape=[5, 60]) /* ty=Tensor[(5, 60), bool] */;
  %500 = @func_7233(%499) /* ty=(Tensor[(5, 60), bool], Tensor[(5, 60), float64], Tensor[(65), bool], Tensor[(10, 5, 6), bool], Tensor[(6, 9, 16), float64]) */;
  %501 = %500.3;
  %502 = cast(%501, dtype="bool") /* ty=Tensor[(10, 5, 6), bool] */;
  %503 = cast(%var_11803, dtype="int8") /* ty=Tensor[(5, 42), int8] */;
  %504 = reshape(%502, newshape=[300]) /* ty=Tensor[(300), bool] */;
  %505 = reshape(%503, newshape=[1, 210]) /* ty=Tensor[(1, 210), int8] */;
  %506 = @func_5089(%504, %505) /* ty=(Tensor[(6, 9, 16), float64], Tensor[(6, 9, 16), float64], Tensor[(1, 210), int8], Tensor[(300), bool], Tensor[(1, 210), int8], Tensor[(10, 5, 6), bool], Tensor[(120), bool]) */;
  %507 = cast(meta[relay.Constant][23] /* ty=Tensor[(63), float64] */, dtype="float64") /* ty=Tensor[(63), float64] */;
  %508 = cast(%var_11840, dtype="float32") /* ty=Tensor[(840), float32] */;
  %509 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %510 = reshape(%507, newshape=[63]) /* ty=Tensor[(63), float64] */;
  %511 = reshape(%508, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %512 = reshape(%509, newshape=[]) /* ty=bool */;
  %513 = @func_10670(%510, %511, %512) /* ty=(Tensor[(5, 60), float64], Tensor[(5, 60), bool], Tensor[(3, 7, 3), float64], Tensor[(63), float64], Tensor[(840), float32], bool, Tensor[(60, 2), bool], Tensor[(16, 7, 7), bool], Tensor[(784), uint8]) */;
  %514 = cast(%var_11840, dtype="float32") /* ty=Tensor[(840), float32] */;
  %515 = cast(meta[relay.Constant][24] /* ty=Tensor[(65), bool] */, dtype="bool") /* ty=Tensor[(65), bool] */;
  %516 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %517 = cast(%var_11853, dtype="bool") /* ty=Tensor[(3, 40), bool] */;
  %518 = reshape(%514, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %519 = reshape(%515, newshape=[1, 65]) /* ty=Tensor[(1, 65), bool] */;
  %520 = reshape(%516, newshape=[]) /* ty=bool */;
  %521 = reshape(%517, newshape=[120]) /* ty=Tensor[(120), bool] */;
  %522 = @func_5680(%518, %519, %520, %521) /* ty=(Tensor[(840), float32], Tensor[(840), float32], Tensor[(120), bool], Tensor[(5, 60), float32], Tensor[(1, 65), float64]) */;
  %523 = @func_2088() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) */;
  %524 = @func_4813() /* ty=(Tensor[(6, 9, 16), float64], Tensor[(14, 3, 5), uint8], Tensor[(210), int8]) */;
  %525 = cast(meta[relay.Constant][24] /* ty=Tensor[(65), bool] */, dtype="float32") /* ty=Tensor[(65), float32] */;
  %526 = %497.0;
  %527 = @func_4026() /* ty=Tensor[(15, 15, 7), float64] */;
  %528 = %506.4;
  %529 = %513.8;
  %530 = %522.4;
  %531 = %523.2;
  %532 = %524.2;
  %533 = cosh(%525) /* ty=Tensor[(65), float32] */;
  (%526, %501, meta[relay.Constant][22] /* ty=Tensor[(300), bool] */, %527, %528, %var_11803, %529, meta[relay.Constant][23] /* ty=Tensor[(63), float64] */, %var_11840, True /* ty=bool */, %530, %var_11853, %531, %532, %533)
}

def @func_7233(%var_7179: Tensor[(5, 60), bool]) -> (Tensor[(5, 60), bool], Tensor[(5, 60), float64], Tensor[(65), bool], Tensor[(10, 5, 6), bool], Tensor[(6, 9, 16), float64]) {
  %534 = @func_2004() /* ty=(Tensor[(5, 60), bool],) */;
  %535 = %534.0;
  %536 = cast(%var_7179, dtype="bool") /* ty=Tensor[(5, 60), bool] */;
  %537 = shape_of(%535, dtype="int32") /* ty=Tensor[(2), int32] */;
  %538 = cast(%535, dtype="bool") /* ty=Tensor[(5, 60), bool] */;
  %539 = dyn.reshape(%536, %537, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %540 = @func_4086() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(5, 60), float64]) */;
  %541 = cast(%535, dtype="float32") /* ty=Tensor[(5, 60), float32] */;
  %542 = reshape(%541, newshape=[10, 5, 6]) /* ty=Tensor[(10, 5, 6), float32] */;
  %543 = @func_6280() /* ty=(Tensor[(5, 60), bool], Tensor[(6, 9, 16), float64], Tensor[(5, 60), float64]) */;
  %544 = less(%538, %539) /* ty=Tensor[(5, 60), bool] */;
  %545 = %540.1;
  %546 = @func_3477() /* ty=Tensor[(65), bool] */;
  %547 = @func_1812(%542) /* ty=Tensor[(10, 5, 6), bool] */;
  %548 = %543.1;
  (%544, %545, %546, %547, %548)
}

def @func_8255(%var_8243: Tensor[(16, 5, 5), float64], %var_8244: Tensor[(16, 5, 5), float64]) -> (Tensor[(16, 5, 5), float64], Tensor[(16, 5, 5), float64]) {
  %549 = cast(%var_8244, dtype="float64") /* ty=Tensor[(16, 5, 5), float64] */;
  %550 = shape_of(%var_8243, dtype="int32") /* ty=Tensor[(3), int32] */;
  %551 = cast(%var_8243, dtype="float64") /* ty=Tensor[(16, 5, 5), float64] */;
  %552 = dyn.reshape(%549, %550, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %553 = cast(%var_8243, dtype="float32") /* ty=Tensor[(16, 5, 5), float32] */;
  %554 = asinh(%553) /* ty=Tensor[(16, 5, 5), float32] */;
  %555 = cast(%554, dtype="float64") /* ty=Tensor[(16, 5, 5), float64] */;
  %556 = subtract(%551, %552) /* ty=Tensor[(16, 5, 5), float64] */;
  %557 = tan(%555) /* ty=Tensor[(16, 5, 5), float64] */;
  (%556, %557)
}

def @func_2141(%var_2101: Tensor[(5, 60), bool]) -> (Tensor[(5, 60), bool], Tensor[(5, 60), uint64]) {
  %558 = @func_2004() /* ty=(Tensor[(5, 60), bool],) */;
  %559 = %558.0;
  %560 = cast(%var_2101, dtype="bool") /* ty=Tensor[(5, 60), bool] */;
  %561 = shape_of(%559, dtype="int32") /* ty=Tensor[(2), int32] */;
  %562 = cast(%559, dtype="bool") /* ty=Tensor[(5, 60), bool] */;
  %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %564 = cast(%var_2101, dtype="uint64") /* ty=Tensor[(5, 60), uint64] */;
  %565 = shape_of(%559, dtype="int32") /* ty=Tensor[(2), int32] */;
  %566 = cast(%559, dtype="uint64") /* ty=Tensor[(5, 60), uint64] */;
  %567 = dyn.reshape(%564, %565, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %568 = greater(%562, %563) /* ty=Tensor[(5, 60), bool] */;
  %569 = left_shift(%566, %567) /* ty=Tensor[(5, 60), uint64] */;
  (%568, %569)
}

def @func_3477() -> Tensor[(65), bool] {
  %570 = @func_2458() /* ty=(Tensor[(65), bool],) */;
  %570.0
}

def @func_2856() -> (Tensor[(864), float64], Tensor[(10, 5, 6), bool], Tensor[(10, 30), float32]) {
  %571 = @func_1840() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(864), float64]) */;
  %572 = cast(meta[relay.Constant][25] /* ty=Tensor[(10, 30), float32] */, dtype="float32") /* ty=Tensor[(10, 30), float32] */;
  %573 = reshape(%572, newshape=[10, 5, 6]) /* ty=Tensor[(10, 5, 6), float32] */;
  %574 = %571.2;
  %575 = @func_1812(%573) /* ty=Tensor[(10, 5, 6), bool] */;
  (%574, %575, meta[relay.Constant][25] /* ty=Tensor[(10, 30), float32] */)
}

def @func_2269() -> (Tensor[(5, 60), bool], Tensor[(5, 60), bool]) {
  %576 = @func_1974() /* ty=(Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) */;
  %577 = @func_2088() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) */;
  %578 = %576.1;
  %579 = %577.3;
  (%578, %579)
}

def @func_8969() -> Tensor[(5, 60), bool] {
  %580 = @func_2475() /* ty=(Tensor[(5, 60), bool],) */;
  %580.0
}

def @func_10874() -> (Tensor[(5, 60), float64],) {
  %581 = @func_5891() /* ty=Tensor[(5, 60), float64] */;
  (%581,)
}

def @func_6622() -> (Tensor[(5, 60), bool],) {
  %582 = @func_3404() /* ty=(Tensor[(5, 60), bool],) */;
  %583 = %582.0;
  (%583,)
}

def @func_7123(%var_7099: Tensor[(10, 30), float32], %var_7107: Tensor[(10, 30), int16], %var_7118: bool) -> (Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool], Tensor[(10, 30), bool], Tensor[(15, 15, 7), float64], Tensor[(840), float32], bool, Tensor[(120), bool]) {
  %584 = @func_6816() /* ty=(Tensor[(6, 9, 16), float64],) */;
  %585 = @func_3989() /* ty=Tensor[(10, 30), float32] */;
  %586 = cast(%var_7099, dtype="int16") /* ty=Tensor[(10, 30), int16] */;
  %587 = shape_of(%585, dtype="int32") /* ty=Tensor[(2), int32] */;
  %588 = cast(%585, dtype="int16") /* ty=Tensor[(10, 30), int16] */;
  %589 = dyn.reshape(%586, %587, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %590 = bitwise_xor(%588, %589) /* ty=Tensor[(10, 30), int16] */;
  %591 = cast(%var_7107, dtype="bool") /* ty=Tensor[(10, 30), bool] */;
  %592 = shape_of(%590, dtype="int32") /* ty=Tensor[(2), int32] */;
  %593 = cast(%590, dtype="bool") /* ty=Tensor[(10, 30), bool] */;
  %594 = dyn.reshape(%591, %592, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %595 = cast(meta[relay.Constant][26] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %596 = cast(%var_7118, dtype="bool") /* ty=bool */;
  %597 = cast(meta[relay.Constant][27] /* ty=Tensor[(120), bool] */, dtype="bool") /* ty=Tensor[(120), bool] */;
  %598 = reshape(%595, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %599 = reshape(%596, newshape=[]) /* ty=bool */;
  %600 = reshape(%597, newshape=[60, 2]) /* ty=Tensor[(60, 2), bool] */;
  %601 = @func_5538(%598, %599, %600) /* ty=(Tensor[(5, 60), bool], Tensor[(15, 15, 7), float64], Tensor[(840), float32], Tensor[(840), float32], Tensor[(65), bool], Tensor[(60, 2), int8], Tensor[(5, 60), bool]) */;
  %602 = %584.0;
  %603 = @func_2482() /* ty=Tensor[(5, 60), bool] */;
  %604 = greater_equal(%593, %594) /* ty=Tensor[(10, 30), bool] */;
  %605 = %601.1;
  (%602, %603, %604, %605, meta[relay.Constant][26] /* ty=Tensor[(840), float32] */, %var_7118, meta[relay.Constant][27] /* ty=Tensor[(120), bool] */)
}

def @func_6883(%var_6876: Tensor[(11, 9, 7), int8]) -> Tensor[(11, 9, 7), int8] {
  %606 = cast(meta[relay.Constant][28] /* ty=Tensor[(11, 9, 7), int8] */, dtype="int8") /* ty=Tensor[(11, 9, 7), int8] */;
  %607 = shape_of(%var_6876, dtype="int32") /* ty=Tensor[(3), int32] */;
  %608 = cast(%var_6876, dtype="int8") /* ty=Tensor[(11, 9, 7), int8] */;
  %609 = dyn.reshape(%606, %607, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  add(%608, %609) /* ty=Tensor[(11, 9, 7), int8] */
}

def @func_2238(%var_2211: Tensor[(5, 60), float64], %var_2224: Tensor[(5, 60), float64]) -> (Tensor[(5, 60), float64], Tensor[(5, 60), bool]) {
  %610 = @func_2179() /* ty=Tensor[(5, 60), float64] */;
  %611 = cast(%var_2211, dtype="float64") /* ty=Tensor[(5, 60), float64] */;
  %612 = shape_of(%610, dtype="int32") /* ty=Tensor[(2), int32] */;
  %613 = cast(%610, dtype="float64") /* ty=Tensor[(5, 60), float64] */;
  %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %615 = cast(%var_2224, dtype="bool") /* ty=Tensor[(5, 60), bool] */;
  %616 = shape_of(%var_2211, dtype="int32") /* ty=Tensor[(2), int32] */;
  %617 = cast(%var_2211, dtype="bool") /* ty=Tensor[(5, 60), bool] */;
  %618 = dyn.reshape(%615, %616, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %619 = add(%613, %614) /* ty=Tensor[(5, 60), float64] */;
  %620 = logical_or(%617, %618) /* ty=Tensor[(5, 60), bool] */;
  (%619, %620)
}

def @func_2428() -> (Tensor[(14, 1, 13), bool], Tensor[(6, 9, 16), float64], Tensor[(120), bool], Tensor[(840), float32], Tensor[(65), bool], Tensor[(120), bool], Tensor[(6, 9, 16), float64]) {
  %621 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %622 = cast(meta[relay.Constant][29] /* ty=Tensor[(14, 1, 13), bool] */, dtype="bool") /* ty=Tensor[(14, 1, 13), bool] */;
  %623 = @func_2088() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) */;
  %624 = cast(meta[relay.Constant][30] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %625 = cast(meta[relay.Constant][31] /* ty=Tensor[(65), bool] */, dtype="bool") /* ty=Tensor[(65), bool] */;
  %626 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %627 = cast(meta[relay.Constant][32] /* ty=Tensor[(120), bool] */, dtype="bool") /* ty=Tensor[(120), bool] */;
  %628 = reshape(%624, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %629 = reshape(%625, newshape=[65, 1]) /* ty=Tensor[(65, 1), bool] */;
  %630 = reshape(%626, newshape=[]) /* ty=bool */;
  %631 = reshape(%627, newshape=[120]) /* ty=Tensor[(120), bool] */;
  %632 = @func_1939(%628, %629, %630, %631) /* ty=(Tensor[(15, 15, 7), float64], Tensor[(15, 15, 7), float64], Tensor[(65), bool], Tensor[(840), float32], Tensor[(65, 1), bool], Tensor[(14, 3, 5), float64], bool, Tensor[(120), bool]) */;
  %633 = @func_1974() /* ty=(Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) */;
  %634 = logical_and(%621, %622) /* ty=Tensor[(14, 1, 13), bool] */;
  %635 = %623.1;
  %636 = %632.7;
  %637 = %633.0;
  (%634, %635, %636, meta[relay.Constant][30] /* ty=Tensor[(840), float32] */, meta[relay.Constant][31] /* ty=Tensor[(65), bool] */, meta[relay.Constant][32] /* ty=Tensor[(120), bool] */, %637)
}

def @func_10135(%var_10128: Tensor[(300), bool], %var_10129: Tensor[(210), int8]) -> (Tensor[(6, 9, 16), int64], Tensor[(1, 210), int8], Tensor[(300), bool], Tensor[(210), int8]) {
  %638 = @func_7057() /* ty=(Tensor[(6, 9, 16), float64],) */;
  %639 = %638.0;
  %640 = cast(meta[relay.Constant][33] /* ty=Tensor[(6, 9, 16), float64] */, dtype="int64") /* ty=Tensor[(6, 9, 16), int64] */;
  %641 = shape_of(%639, dtype="int32") /* ty=Tensor[(3), int32] */;
  %642 = cast(%639, dtype="int64") /* ty=Tensor[(6, 9, 16), int64] */;
  %643 = dyn.reshape(%640, %641, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %644 = cast(%var_10128, dtype="bool") /* ty=Tensor[(300), bool] */;
  %645 = cast(%var_10129, dtype="int8") /* ty=Tensor[(210), int8] */;
  %646 = reshape(%644, newshape=[300]) /* ty=Tensor[(300), bool] */;
  %647 = reshape(%645, newshape=[1, 210]) /* ty=Tensor[(1, 210), int8] */;
  %648 = @func_5089(%646, %647) /* ty=(Tensor[(6, 9, 16), float64], Tensor[(6, 9, 16), float64], Tensor[(1, 210), int8], Tensor[(300), bool], Tensor[(1, 210), int8], Tensor[(10, 5, 6), bool], Tensor[(120), bool]) */;
  %649 = bitwise_or(%642, %643) /* ty=Tensor[(6, 9, 16), int64] */;
  %650 = %648.4;
  (%649, %650, %var_10128, %var_10129)
}

def @func_10415() -> (Tensor[(5, 60), bool],) {
  %651 = @func_9489() /* ty=(Tensor[(5, 60), bool],) */;
  %652 = %651.0;
  (%652,)
}

def @func_10819() -> (Tensor[(5, 60), bool], Tensor[(120), bool], Tensor[(5, 60), uint64]) {
  %653 = @func_6835() /* ty=(Tensor[(5, 60), bool],) */;
  %654 = @func_10613() /* ty=Tensor[(5, 60), float32] */;
  %655 = @func_4151() /* ty=(Tensor[(6, 9, 16), float32], Tensor[(5, 60), uint64], Tensor[(300, 1), float32], Tensor[(1, 210), int8], Tensor[(5, 42), int8]) */;
  %656 = %655.2;
  %657 = cast(%656, dtype="uint64") /* ty=Tensor[(300, 1), uint64] */;
  %658 = shape_of(%654, dtype="int32") /* ty=Tensor[(2), int32] */;
  %659 = cast(%654, dtype="uint64") /* ty=Tensor[(5, 60), uint64] */;
  %660 = dyn.reshape(%657, %658, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %661 = %653.0;
  %662 = @func_10403() /* ty=Tensor[(120), bool] */;
  %663 = minimum(%659, %660) /* ty=Tensor[(5, 60), uint64] */;
  (%661, %662, %663)
}

def @func_4785() -> (Tensor[(5, 60), float64],) {
  %664 = @func_2179() /* ty=Tensor[(5, 60), float64] */;
  (%664,)
}

def @func_6775() -> Tensor[(15, 15, 7), float64] {
  %665 = @func_5399() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(5, 60), float64]) */;
  %665.0
}

def @func_8912() -> Tensor[(864), float64] {
  %666 = @func_2856() /* ty=(Tensor[(864), float64], Tensor[(10, 5, 6), bool], Tensor[(10, 30), float32]) */;
  %666.0
}

def @func_8448() -> Tensor[(210), int8] {
  %667 = @func_4813() /* ty=(Tensor[(6, 9, 16), float64], Tensor[(14, 3, 5), uint8], Tensor[(210), int8]) */;
  %667.2
}

def @func_7949() -> Tensor[(5, 60), float32] {
  %668 = @func_4206() /* ty=(Tensor[(5, 60), float32],) */;
  %668.0
}

def @func_10435() -> (Tensor[(5, 60), float32],) {
  %669 = @func_6186() /* ty=(Tensor[(5, 60), float32], Tensor[(15, 15, 7), float64]) */;
  %670 = %669.0;
  (%670,)
}

def @func_2482() -> Tensor[(5, 60), bool] {
  %671 = @func_2475() /* ty=(Tensor[(5, 60), bool],) */;
  %671.0
}

def @func_8490() -> (Tensor[(6, 9, 16), float32],) {
  %672 = @func_4151() /* ty=(Tensor[(6, 9, 16), float32], Tensor[(5, 60), uint64], Tensor[(300, 1), float32], Tensor[(1, 210), int8], Tensor[(5, 42), int8]) */;
  %673 = %672.0;
  (%673,)
}

def @func_3971() -> (Tensor[(5, 60), bool], Tensor[(15, 15, 7), float64], Tensor[(5, 60), bool], Tensor[(5, 60), bool], Tensor[(120), bool], Tensor[(840), float32], Tensor[(65), bool], Tensor[(6, 9, 16), float64], Tensor[(5, 60), float64], Tensor[(5, 60), bool]) {
  %674 = @func_3274() /* ty=(Tensor[(15, 15, 7), float64],) */;
  %675 = @func_2475() /* ty=(Tensor[(5, 60), bool],) */;
  %676 = %675.0;
  %677 = cast(%676, dtype="bool") /* ty=Tensor[(5, 60), bool] */;
  %678 = reshape(%677, newshape=[5, 60]) /* ty=Tensor[(5, 60), bool] */;
  %679 = @func_2141(%678) /* ty=(Tensor[(5, 60), bool], Tensor[(5, 60), uint64]) */;
  %680 = cast(meta[relay.Constant][34] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %681 = cast(meta[relay.Constant][35] /* ty=Tensor[(65), bool] */, dtype="bool") /* ty=Tensor[(65), bool] */;
  %682 = reshape(%680, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %683 = reshape(%681, newshape=[65]) /* ty=Tensor[(65), bool] */;
  %684 = @func_2650(%682, %683) /* ty=(Tensor[(5, 60), float32], Tensor[(5, 60), bool], bool, Tensor[(840), float32], Tensor[(65), bool], bool, Tensor[(120), bool]) */;
  %685 = @func_2088() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) */;
  %686 = @func_3420() /* ty=Tensor[(5, 60), bool] */;
  %687 = cast(meta[relay.Constant][36] /* ty=Tensor[(5, 60), bool] */, dtype="float64") /* ty=Tensor[(5, 60), float64] */;
  %688 = shape_of(%686, dtype="int32") /* ty=Tensor[(2), int32] */;
  %689 = cast(%686, dtype="float64") /* ty=Tensor[(5, 60), float64] */;
  %690 = dyn.reshape(%687, %688, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %691 = @func_2475() /* ty=(Tensor[(5, 60), bool],) */;
  %692 = @func_2482() /* ty=Tensor[(5, 60), bool] */;
  %693 = %674.0;
  %694 = %679.0;
  %695 = %684.6;
  %696 = %685.2;
  %697 = floor_mod(%689, %690) /* ty=Tensor[(5, 60), float64] */;
  %698 = %691.0;
  (%692, %693, %676, %694, %695, meta[relay.Constant][34] /* ty=Tensor[(840), float32] */, meta[relay.Constant][35] /* ty=Tensor[(65), bool] */, %696, %697, %698)
}

def @func_7609() -> (Tensor[(65), float32], Tensor[(300, 1), float32]) {
  %699 = @func_4151() /* ty=(Tensor[(6, 9, 16), float32], Tensor[(5, 60), uint64], Tensor[(300, 1), float32], Tensor[(1, 210), int8], Tensor[(5, 42), int8]) */;
  %700 = @func_6439() /* ty=Tensor[(65), float32] */;
  %701 = %699.2;
  (%700, %701)
}

def @func_8119(%var_8112: Tensor[(8, 1, 10), float32]) -> Tensor[(8, 1, 10), float32] {
  %702 = cast(%var_8112, dtype="float32") /* ty=Tensor[(8, 1, 10), float32] */;
  asinh(%702) /* ty=Tensor[(8, 1, 10), float32] */
}

def @func_9629(%var_9624: Tensor[(1, 65), bool]) -> (Tensor[(10, 30), float32], Tensor[(65), bool], Tensor[(420, 2), float32], Tensor[(1, 65), bool]) {
  %703 = @func_2856() /* ty=(Tensor[(864), float64], Tensor[(10, 5, 6), bool], Tensor[(10, 30), float32]) */;
  %704 = cast(meta[relay.Constant][37] /* ty=Tensor[(420, 2), float32] */, dtype="float32") /* ty=Tensor[(420, 2), float32] */;
  %705 = cast(%var_9624, dtype="bool") /* ty=Tensor[(1, 65), bool] */;
  %706 = reshape(%704, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %707 = reshape(%705, newshape=[65]) /* ty=Tensor[(65), bool] */;
  %708 = @func_4932(%706, %707) /* ty=(Tensor[(6, 9, 16), float32], Tensor[(65), bool], Tensor[(840), float32], Tensor[(65), bool]) */;
  %709 = %703.2;
  %710 = %708.1;
  (%709, %710, meta[relay.Constant][37] /* ty=Tensor[(420, 2), float32] */, %var_9624)
}

def @func_10670(%var_10649: Tensor[(63), float64], %var_10650: Tensor[(840), float32], %var_10651: bool) -> (Tensor[(5, 60), float64], Tensor[(5, 60), bool], Tensor[(3, 7, 3), float64], Tensor[(63), float64], Tensor[(840), float32], bool, Tensor[(60, 2), bool], Tensor[(16, 7, 7), bool], Tensor[(784), uint8]) {
  %711 = @func_9513() /* ty=Tensor[(5, 60), float32] */;
  %712 = cast(%711, dtype="float64") /* ty=Tensor[(5, 60), float64] */;
  %713 = @func_9792() /* ty=(Tensor[(5, 60), bool],) */;
  %714 = cast(%var_10649, dtype="float64") /* ty=Tensor[(63), float64] */;
  %715 = cast(%var_10650, dtype="float32") /* ty=Tensor[(840), float32] */;
  %716 = cast(%var_10651, dtype="bool") /* ty=bool */;
  %717 = cast(meta[relay.Constant][38] /* ty=Tensor[(60, 2), bool] */, dtype="bool") /* ty=Tensor[(60, 2), bool] */;
  %718 = reshape(%714, newshape=[3, 7, 3]) /* ty=Tensor[(3, 7, 3), float64] */;
  %719 = reshape(%715, newshape=[2, 420]) /* ty=Tensor[(2, 420), float32] */;
  %720 = reshape(%716, newshape=[]) /* ty=bool */;
  %721 = reshape(%717, newshape=[120]) /* ty=Tensor[(120), bool] */;
  %722 = @func_4736(%718, %719, %720, %721) /* ty=(Tensor[(3, 7, 3), float64], Tensor[(5, 60), bool], Tensor[(6, 9, 16), float64], Tensor[(2, 420), int64], Tensor[(5, 60), bool], Tensor[(65), bool], Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool], Tensor[(14, 3, 5), float64], bool, Tensor[(120), bool]) */;
  %723 = cast(meta[relay.Constant][39] /* ty=Tensor[(784), uint8] */, dtype="uint8") /* ty=Tensor[(784), uint8] */;
  %724 = cast(meta[relay.Constant][39] /* ty=Tensor[(784), uint8] */, dtype="uint8") /* ty=Tensor[(784), uint8] */;
  %725 = reshape(%723, newshape=[16, 7, 7]) /* ty=Tensor[(16, 7, 7), uint8] */;
  %726 = reshape(%724, newshape=[16, 7, 7]) /* ty=Tensor[(16, 7, 7), uint8] */;
  %727 = @func_8987(%725, %726) /* ty=(Tensor[(16, 7, 7), bool],) */;
  %728 = exp(%712) /* ty=Tensor[(5, 60), float64] */;
  %729 = %713.0;
  %730 = %722.0;
  %731 = %727.0;
  (%728, %729, %730, %var_10649, %var_10650, %var_10651, meta[relay.Constant][38] /* ty=Tensor[(60, 2), bool] */, %731, meta[relay.Constant][39] /* ty=Tensor[(784), uint8] */)
}

def @func_9069() -> (Tensor[(15, 15, 7), float64],) {
  %732 = @func_4026() /* ty=Tensor[(15, 15, 7), float64] */;
  (%732,)
}

def @func_5922() -> (Tensor[(5, 60), bool],) {
  %733 = @func_1974() /* ty=(Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) */;
  %734 = %733.1;
  (%734,)
}

def @func_10022() -> (Tensor[(15, 15, 7), float64], Tensor[(3, 4, 13), float32], Tensor[(156), float32], Tensor[(5, 60), bool], Tensor[(5, 60), float64]) {
  %735 = @func_4086() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(5, 60), float64]) */;
  %736 = cast(meta[relay.Constant][40] /* ty=Tensor[(156), float32] */, dtype="float32") /* ty=Tensor[(156), float32] */;
  %737 = reshape(%736, newshape=[3, 4, 13]) /* ty=Tensor[(3, 4, 13), float32] */;
  %738 = @func_7143(%737) /* ty=(Tensor[(3, 4, 13), float32],) */;
  %739 = @func_6593() /* ty=(Tensor[(5, 60), float64], Tensor[(5, 60), bool]) */;
  %740 = %735.0;
  %741 = %738.0;
  %742 = %739.1;
  %743 = @func_2179() /* ty=Tensor[(5, 60), float64] */;
  (%740, %741, meta[relay.Constant][40] /* ty=Tensor[(156), float32] */, %742, %743)
}

def @func_5891() -> Tensor[(5, 60), float64] {
  %744 = @func_4785() /* ty=(Tensor[(5, 60), float64],) */;
  %744.0
}

def @func_11400() -> (Tensor[(5, 60), bool],) {
  %745 = @func_5922() /* ty=(Tensor[(5, 60), bool],) */;
  %746 = %745.0;
  (%746,)
}

def @func_5997() -> (Tensor[(5, 60), bool],) {
  %747 = @func_3420() /* ty=Tensor[(5, 60), bool] */;
  (%747,)
}

def @func_9156(%var_9144: Tensor[(840), float32]) -> (Tensor[(5, 60), float32], Tensor[(6, 9, 16), float64], Tensor[(840), float32]) {
  %748 = @func_8210() /* ty=(Tensor[(5, 60), bool], Tensor[(5, 60), float32]) */;
  %749 = cast(%var_9144, dtype="float32") /* ty=Tensor[(840), float32] */;
  %750 = reshape(%749, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %751 = @func_6057(%750) /* ty=(Tensor[(840), uint64], Tensor[(6, 9, 16), float64]) */;
  %752 = %748.1;
  %753 = %751.1;
  (%752, %753, %var_9144)
}

def @func_8796() -> (Tensor[(5, 60), bool],) {
  %754 = @func_6280() /* ty=(Tensor[(5, 60), bool], Tensor[(6, 9, 16), float64], Tensor[(5, 60), float64]) */;
  %755 = %754.0;
  (%755,)
}

def @func_9754() -> Tensor[(5, 60), float64] {
  %756 = @func_4785() /* ty=(Tensor[(5, 60), float64],) */;
  %757 = %756.0;
  %758 = cast(%757, dtype="float64") /* ty=Tensor[(5, 60), float64] */;
  acosh(%758) /* ty=Tensor[(5, 60), float64] */
}

def @func_10600() -> (Tensor[(5, 60), bool], Tensor[(5, 60), bool], Tensor[(65), float32], Tensor[(65), bool]) {
  %759 = @func_10088() /* ty=Tensor[(5, 60), bool] */;
  %760 = cast(%759, dtype="bool") /* ty=Tensor[(5, 60), bool] */;
  %761 = reshape(%760, newshape=[5, 60]) /* ty=Tensor[(5, 60), bool] */;
  %762 = @func_2141(%761) /* ty=(Tensor[(5, 60), bool], Tensor[(5, 60), uint64]) */;
  %763 = @func_6703() /* ty=(Tensor[(65), float32], Tensor[(120), bool]) */;
  %764 = %762.0;
  %765 = %763.0;
  %766 = @func_3477() /* ty=Tensor[(65), bool] */;
  (%759, %764, %765, %766)
}

def @func_11713() -> (Tensor[(10, 5, 6), bool],) {
  %767 = @func_7404() /* ty=(Tensor[(6, 9, 16), float32], Tensor[(10, 5, 6), bool], Tensor[(300), float32], Tensor[(65), bool]) */;
  %768 = %767.1;
  (%768,)
}

def @func_12045(%var_12040: Tensor[(300), float64]) -> (Tensor[(15, 15, 7), float64], Tensor[(1, 65), bool], Tensor[(65), bool], Tensor[(5, 60), float64], Tensor[(300), float64]) {
  %769 = @func_1840() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(864), float64]) */;
  %770 = cast(meta[relay.Constant][41] /* ty=Tensor[(65), bool] */, dtype="bool") /* ty=Tensor[(65), bool] */;
  %771 = reshape(%770, newshape=[1, 65]) /* ty=Tensor[(1, 65), bool] */;
  %772 = @func_9629(%771) /* ty=(Tensor[(10, 30), float32], Tensor[(65), bool], Tensor[(420, 2), float32], Tensor[(1, 65), bool]) */;
  %773 = cast(%var_12040, dtype="float64") /* ty=Tensor[(300), float64] */;
  %774 = cast(%var_12040, dtype="float64") /* ty=Tensor[(300), float64] */;
  %775 = reshape(%773, newshape=[5, 60]) /* ty=Tensor[(5, 60), float64] */;
  %776 = reshape(%774, newshape=[5, 60]) /* ty=Tensor[(5, 60), float64] */;
  %777 = @func_2238(%775, %776) /* ty=(Tensor[(5, 60), float64], Tensor[(5, 60), bool]) */;
  %778 = %769.0;
  %779 = %772.3;
  %780 = %777.0;
  (%778, %779, meta[relay.Constant][41] /* ty=Tensor[(65), bool] */, %780, %var_12040)
}

def @func_8074() -> Tensor[(15, 15, 7), float64] {
  @func_6775() /* ty=Tensor[(15, 15, 7), float64] */
}

def @func_6816() -> (Tensor[(6, 9, 16), float64],) {
  %781 = @func_1840() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(864), float64]) */;
  %782 = %781.1;
  (%782,)
}

def @main(%var_12250: Tensor[(10, 16, 1), float64], %var_12268: Tensor[(50, 6), bool], %var_12269: Tensor[(210), int8]) -> (Tensor[(210), int8], Tensor[(50, 6), bool], Tensor[(210), int8], Tensor[(10, 16, ?), float64]) {
  %783 = cast(%var_12268, dtype="bool") /* ty=Tensor[(50, 6), bool] */;
  %784 = cast(%var_12269, dtype="int8") /* ty=Tensor[(210), int8] */;
  %785 = reshape(%783, newshape=[300]) /* ty=Tensor[(300), bool] */;
  %786 = reshape(%784, newshape=[210]) /* ty=Tensor[(210), int8] */;
  %787 = @func_10135(%785, %786) /* ty=(Tensor[(6, 9, 16), int64], Tensor[(1, 210), int8], Tensor[(300), bool], Tensor[(210), int8]) */;
  %788 = cast(%var_12250, dtype="float64") /* ty=Tensor[(10, 16, 1), float64] */;
  %789 = acos(%788) /* ty=Tensor[(10, 16, 1), float64] */;
  %790 = cast(%var_12250, dtype="float64") /* ty=Tensor[(10, 16, 1), float64] */;
  %791 = shape_of(%789, dtype="int32") /* ty=Tensor[(3), int32] */;
  %792 = cast(%789, dtype="float64") /* ty=Tensor[(10, 16, 1), float64] */;
  %793 = dyn.reshape(%790, %791, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %794 = divide(%792, %793) /* ty=Tensor[(10, 16, ?), float64] */;
  %795 = cast(%794, dtype="float64") /* ty=Tensor[(10, 16, ?), float64] */;
  %796 = %787.3;
  %797 = log2(%795) /* ty=Tensor[(10, 16, ?), float64] */;
  (%796, %var_12268, %var_12269, %797)
}

def @func_11075(%var_11035: Tensor[(1, 840), float32]) -> (Tensor[(1, 840), float32], Tensor[(6, 20), bool], Tensor[(63), float64], Tensor[(5, 60), bool]) {
  %798 = @func_3404() /* ty=(Tensor[(5, 60), bool],) */;
  %799 = %798.0;
  %800 = cast(%var_11035, dtype="float32") /* ty=Tensor[(1, 840), float32] */;
  %801 = cast(meta[relay.Constant][42] /* ty=Tensor[(6, 20), bool] */, dtype="bool") /* ty=Tensor[(6, 20), bool] */;
  %802 = cast(%var_11035, dtype="float32") /* ty=Tensor[(1, 840), float32] */;
  %803 = cast(meta[relay.Constant][43] /* ty=Tensor[(63), float64] */, dtype="float64") /* ty=Tensor[(63), float64] */;
  %804 = reshape(%800, newshape=[420, 2]) /* ty=Tensor[(420, 2), float32] */;
  %805 = reshape(%801, newshape=[120]) /* ty=Tensor[(120), bool] */;
  %806 = reshape(%802, newshape=[420, 2]) /* ty=Tensor[(420, 2), float32] */;
  %807 = reshape(%803, newshape=[63]) /* ty=Tensor[(63), float64] */;
  %808 = @func_7873(%804, %805, %806, %807) /* ty=(Tensor[(15, 15, 7), float64], Tensor[(15, 15, 7), float64], bool, Tensor[(120), bool], Tensor[(5, 60), bool], Tensor[(63), float64], Tensor[(420, 2), float32]) */;
  %809 = %808.2;
  %810 = cast(%799, dtype="bool") /* ty=Tensor[(5, 60), bool] */;
  %811 = cast(%809, dtype="bool") /* ty=bool */;
  %812 = logical_and(%810, %811) /* ty=Tensor[(5, 60), bool] */;
  (%var_11035, meta[relay.Constant][42] /* ty=Tensor[(6, 20), bool] */, meta[relay.Constant][43] /* ty=Tensor[(63), float64] */, %812)
}

def @func_5463() -> (Tensor[(5, 60), bool], Tensor[(10, 30), float32]) {
  %813 = @func_3404() /* ty=(Tensor[(5, 60), bool],) */;
  %814 = @func_3989() /* ty=Tensor[(10, 30), float32] */;
  %815 = cast(%814, dtype="float32") /* ty=Tensor[(10, 30), float32] */;
  %816 = %813.0;
  %817 = acosh(%815) /* ty=Tensor[(10, 30), float32] */;
  (%816, %817)
}

def @func_9418(%var_9369: Tensor[(12, 11, 8), float32]) -> (Tensor[(12, 11, 8), uint16],) {
  %818 = cast(%var_9369, dtype="float32") /* ty=Tensor[(12, 11, 8), float32] */;
  %819 = log(%818) /* ty=Tensor[(12, 11, 8), float32] */;
  %820 = cast(%819, dtype="float64") /* ty=Tensor[(12, 11, 8), float64] */;
  %821 = atanh(%820) /* ty=Tensor[(12, 11, 8), float64] */;
  %822 = cast(%821, dtype="float64") /* ty=Tensor[(12, 11, 8), float64] */;
  %823 = acos(%822) /* ty=Tensor[(12, 11, 8), float64] */;
  %824 = cast(%var_9369, dtype="uint16") /* ty=Tensor[(12, 11, 8), uint16] */;
  %825 = shape_of(%823, dtype="int32") /* ty=Tensor[(3), int32] */;
  %826 = cast(%823, dtype="uint16") /* ty=Tensor[(12, 11, 8), uint16] */;
  %827 = dyn.reshape(%824, %825, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %828 = bitwise_xor(%826, %827) /* ty=Tensor[(12, 11, 8), uint16] */;
  (%828,)
}

def @func_9513() -> Tensor[(5, 60), float32] {
  %829 = @func_6186() /* ty=(Tensor[(5, 60), float32], Tensor[(15, 15, 7), float64]) */;
  %829.0
}

def @func_7036() -> (Tensor[(5, 60), float64],) {
  %830 = @func_5760() /* ty=(Tensor[(5, 60), float64],) */;
  %831 = %830.0;
  (%831,)
}

def @func_8210() -> (Tensor[(5, 60), bool], Tensor[(5, 60), float32]) {
  %832 = @func_2475() /* ty=(Tensor[(5, 60), bool],) */;
  %833 = @func_3664() /* ty=(Tensor[(5, 60), float64],) */;
  %834 = %833.0;
  %835 = @func_5399() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(5, 60), float64]) */;
  %836 = %835.1;
  %837 = cast(%836, dtype="float32") /* ty=Tensor[(5, 60), float32] */;
  %838 = shape_of(%834, dtype="int32") /* ty=Tensor[(2), int32] */;
  %839 = cast(%834, dtype="float32") /* ty=Tensor[(5, 60), float32] */;
  %840 = dyn.reshape(%837, %838, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %841 = %832.0;
  %842 = mod(%839, %840) /* ty=Tensor[(5, 60), float32] */;
  (%841, %842)
}

def @func_12203() -> (Tensor[(5, 60), bool],) {
  %843 = @func_3971() /* ty=(Tensor[(5, 60), bool], Tensor[(15, 15, 7), float64], Tensor[(5, 60), bool], Tensor[(5, 60), bool], Tensor[(120), bool], Tensor[(840), float32], Tensor[(65), bool], Tensor[(6, 9, 16), float64], Tensor[(5, 60), float64], Tensor[(5, 60), bool]) */;
  %844 = %843.0;
  (%844,)
}

def @func_2650(%var_2641: Tensor[(840), float32], %var_2642: Tensor[(65), bool]) -> (Tensor[(5, 60), float32], Tensor[(5, 60), bool], bool, Tensor[(840), float32], Tensor[(65), bool], bool, Tensor[(120), bool]) {
  %845 = @func_2269() /* ty=(Tensor[(5, 60), bool], Tensor[(5, 60), bool]) */;
  %846 = %845.0;
  %847 = cast(%846, dtype="float32") /* ty=Tensor[(5, 60), float32] */;
  %848 = @func_2475() /* ty=(Tensor[(5, 60), bool],) */;
  %849 = cast(%var_2641, dtype="float32") /* ty=Tensor[(840), float32] */;
  %850 = cast(%var_2642, dtype="bool") /* ty=Tensor[(65), bool] */;
  %851 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %852 = cast(meta[relay.Constant][44] /* ty=Tensor[(120), bool] */, dtype="bool") /* ty=Tensor[(120), bool] */;
  %853 = reshape(%849, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %854 = reshape(%850, newshape=[65, 1]) /* ty=Tensor[(65, 1), bool] */;
  %855 = reshape(%851, newshape=[]) /* ty=bool */;
  %856 = reshape(%852, newshape=[120]) /* ty=Tensor[(120), bool] */;
  %857 = @func_1939(%853, %854, %855, %856) /* ty=(Tensor[(15, 15, 7), float64], Tensor[(15, 15, 7), float64], Tensor[(65), bool], Tensor[(840), float32], Tensor[(65, 1), bool], Tensor[(14, 3, 5), float64], bool, Tensor[(120), bool]) */;
  %858 = atanh(%847) /* ty=Tensor[(5, 60), float32] */;
  %859 = %848.0;
  %860 = %857.6;
  (%858, %859, %860, %var_2641, %var_2642, False /* ty=bool */, meta[relay.Constant][44] /* ty=Tensor[(120), bool] */)
}

def @func_10613() -> Tensor[(5, 60), float32] {
  @func_9513() /* ty=Tensor[(5, 60), float32] */
}

def @func_11018() -> (Tensor[(10, 30), float32], Tensor[(3, 4, 13), float32], Tensor[(156), float32], Tensor[(5, 60), bool]) {
  %861 = @func_4348() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(10, 30), float32]) */;
  %862 = cast(meta[relay.Constant][45] /* ty=Tensor[(156), float32] */, dtype="float32") /* ty=Tensor[(156), float32] */;
  %863 = reshape(%862, newshape=[3, 4, 13]) /* ty=Tensor[(3, 4, 13), float32] */;
  %864 = @func_7143(%863) /* ty=(Tensor[(3, 4, 13), float32],) */;
  %865 = @func_5463() /* ty=(Tensor[(5, 60), bool], Tensor[(10, 30), float32]) */;
  %866 = %861.1;
  %867 = %864.0;
  %868 = %865.0;
  (%866, %867, meta[relay.Constant][45] /* ty=Tensor[(156), float32] */, %868)
}

def @func_4413() -> (Tensor[(6, 9, 16), float32], Tensor[(5, 60), float64]) {
  %869 = @func_4282() /* ty=(Tensor[(6, 9, 16), float32], Tensor[(6, 9, 16), float64]) */;
  %870 = %869.0;
  %871 = @func_3984() /* ty=Tensor[(5, 60), float64] */;
  (%870, %871)
}

def @func_9869() -> (Tensor[(5, 60), float64], Tensor[(65), float32]) {
  %872 = @func_3477() /* ty=Tensor[(65), bool] */;
  %873 = cast(%872, dtype="float32") /* ty=Tensor[(65), float32] */;
  %874 = @func_9754() /* ty=Tensor[(5, 60), float64] */;
  %875 = exp(%873) /* ty=Tensor[(65), float32] */;
  (%874, %875)
}

def @func_573(%var_563: Tensor[(12, 10, 7), float32], %var_567: Tensor[(65), bool]) -> (Tensor[(12, 10, 7), float32], Tensor[(1, 5, 13), bool], Tensor[(65), bool]) {
  %876 = cast(%var_563, dtype="float32") /* ty=Tensor[(12, 10, 7), float32] */;
  %877 = cast(%var_567, dtype="bool") /* ty=Tensor[(65), bool] */;
  %878 = reshape(%877, newshape=[1, 5, 13]) /* ty=Tensor[(1, 5, 13), bool] */;
  %879 = @func_459(%878) /* ty=(Tensor[(1, 5, 13), bool],) */;
  %880 = erf(%876) /* ty=Tensor[(12, 10, 7), float32] */;
  %881 = %879.0;
  (%880, %881, %var_567)
}

def @func_8427() -> (Tensor[(5, 60), bool], Tensor[(65), float32], Tensor[(15, 15, 7), float64], Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(15, 15, 7), float64], Tensor[(5, 60), bool], Tensor[(5, 60), bool]) {
  %882 = @func_5997() /* ty=(Tensor[(5, 60), bool],) */;
  %883 = %882.0;
  %884 = cast(%883, dtype="bool") /* ty=Tensor[(5, 60), bool] */;
  %885 = reshape(%884, newshape=[5, 60]) /* ty=Tensor[(5, 60), bool] */;
  %886 = @func_3375(%885) /* ty=(Tensor[(5, 60), float32], Tensor[(15, 15, 7), float64]) */;
  %887 = @func_4086() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(5, 60), float64]) */;
  %888 = @func_4813() /* ty=(Tensor[(6, 9, 16), float64], Tensor[(14, 3, 5), uint8], Tensor[(210), int8]) */;
  %889 = cast(%883, dtype="bool") /* ty=Tensor[(5, 60), bool] */;
  %890 = reshape(%889, newshape=[5, 60]) /* ty=Tensor[(5, 60), bool] */;
  %891 = @func_3375(%890) /* ty=(Tensor[(5, 60), float32], Tensor[(15, 15, 7), float64]) */;
  %892 = @func_5997() /* ty=(Tensor[(5, 60), bool],) */;
  %893 = @func_2004() /* ty=(Tensor[(5, 60), bool],) */;
  %894 = @func_7724() /* ty=Tensor[(65), float32] */;
  %895 = %886.1;
  %896 = %887.0;
  %897 = %888.0;
  %898 = %891.1;
  %899 = %892.0;
  %900 = %893.0;
  (%883, %894, %895, %896, %897, %898, %899, %900)
}

def @func_7143(%var_7131: Tensor[(3, 4, 13), float32]) -> (Tensor[(3, 4, 13), float32],) {
  %901 = cast(%var_7131, dtype="float32") /* ty=Tensor[(3, 4, 13), float32] */;
  %902 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(3, 4, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %903 = cast(meta[relay.Constant][46] /* ty=Tensor[(3, 4, 13), float32] */, dtype="float32") /* ty=Tensor[(3, 4, 13), float32] */;
  %904 = dyn.reshape(%901, %902, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %905 = floor_mod(%903, %904) /* ty=Tensor[(3, 4, 13), float32] */;
  (%905,)
}

def @func_4348() -> (Tensor[(15, 15, 7), float64], Tensor[(10, 30), float32]) {
  %906 = @func_4086() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(5, 60), float64]) */;
  %907 = %906.0;
  %908 = @func_3989() /* ty=Tensor[(10, 30), float32] */;
  (%907, %908)
}

def @func_10189(%var_10168: Tensor[(1, 210), int8]) -> (Tensor[(65), float32], Tensor[(1, 210), int8], Tensor[(300), bool], Tensor[(1, 210), int8], Tensor[(5, 60), bool], Tensor[(10, 5, 6), bool]) {
  %909 = cast(meta[relay.Constant][47] /* ty=Tensor[(300), bool] */, dtype="bool") /* ty=Tensor[(300), bool] */;
  %910 = cast(%var_10168, dtype="int8") /* ty=Tensor[(1, 210), int8] */;
  %911 = reshape(%909, newshape=[5, 60]) /* ty=Tensor[(5, 60), bool] */;
  %912 = reshape(%910, newshape=[1, 210]) /* ty=Tensor[(1, 210), int8] */;
  %913 = @func_2948(%911, %912) /* ty=(Tensor[(5, 60), int8], Tensor[(14, 3, 5), uint8], Tensor[(1, 210), int8]) */;
  %914 = @func_3404() /* ty=(Tensor[(5, 60), bool],) */;
  %915 = cast(meta[relay.Constant][47] /* ty=Tensor[(300), bool] */, dtype="float32") /* ty=Tensor[(300), float32] */;
  %916 = reshape(%915, newshape=[10, 5, 6]) /* ty=Tensor[(10, 5, 6), float32] */;
  %917 = @func_5735() /* ty=Tensor[(65), float32] */;
  %918 = %913.2;
  %919 = %914.0;
  %920 = @func_1812(%916) /* ty=Tensor[(10, 5, 6), bool] */;
  (%917, %918, meta[relay.Constant][47] /* ty=Tensor[(300), bool] */, %var_10168, %919, %920)
}

def @func_3777(%var_3757: Tensor[(5, 60), bool]) -> (Tensor[(65), float32], Tensor[(5, 60), uint16]) {
  %921 = @func_2004() /* ty=(Tensor[(5, 60), bool],) */;
  %922 = %921.0;
  %923 = cast(%var_3757, dtype="uint16") /* ty=Tensor[(5, 60), uint16] */;
  %924 = shape_of(%922, dtype="int32") /* ty=Tensor[(2), int32] */;
  %925 = cast(%922, dtype="uint16") /* ty=Tensor[(5, 60), uint16] */;
  %926 = dyn.reshape(%923, %924, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %927 = @func_3334() /* ty=Tensor[(65), float32] */;
  %928 = subtract(%925, %926) /* ty=Tensor[(5, 60), uint16] */;
  (%927, %928)
}

def @func_11938() -> (Tensor[(5, 60), float64], Tensor[(65), bool]) {
  %929 = @func_4785() /* ty=(Tensor[(5, 60), float64],) */;
  %930 = @func_7404() /* ty=(Tensor[(6, 9, 16), float32], Tensor[(10, 5, 6), bool], Tensor[(300), float32], Tensor[(65), bool]) */;
  %931 = %929.0;
  %932 = %930.3;
  (%931, %932)
}

def @func_8618() -> (Tensor[(5, 60), float64], Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(5, 60), float64]) {
  %933 = @func_5179() /* ty=(Tensor[(5, 60), float64],) */;
  %934 = @func_4348() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(10, 30), float32]) */;
  %935 = @func_6816() /* ty=(Tensor[(6, 9, 16), float64],) */;
  %936 = @func_7036() /* ty=(Tensor[(5, 60), float64],) */;
  %937 = %933.0;
  %938 = %934.0;
  %939 = %935.0;
  %940 = %936.0;
  (%937, %938, %939, %940)
}

def @func_7489() -> (Tensor[(5, 60), int16], Tensor[(5, 60), float32], Tensor[(6, 9, 16), float64]) {
  %941 = @func_2179() /* ty=Tensor[(5, 60), float64] */;
  %942 = cast(%941, dtype="float64") /* ty=Tensor[(5, 60), float64] */;
  %943 = reshape(%942, newshape=[5, 60]) /* ty=Tensor[(5, 60), float64] */;
  %944 = @func_7341(%943) /* ty=(Tensor[(5, 60), int16],) */;
  %945 = cast(%941, dtype="float32") /* ty=Tensor[(5, 60), float32] */;
  %946 = @func_2867() /* ty=(Tensor[(6, 9, 16), float64],) */;
  %947 = %944.0;
  %948 = cos(%945) /* ty=Tensor[(5, 60), float32] */;
  %949 = %946.0;
  (%947, %948, %949)
}

def @func_2004() -> (Tensor[(5, 60), bool],) {
  %950 = @func_1974() /* ty=(Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) */;
  %951 = %950.1;
  (%951,)
}

def @func_6703() -> (Tensor[(65), float32], Tensor[(120), bool]) {
  %952 = @func_6439() /* ty=Tensor[(65), float32] */;
  %953 = @func_3252() /* ty=Tensor[(120), bool] */;
  (%952, %953)
}

def @func_7676() -> (Tensor[(5, 60), float32], Tensor[(5, 60), float64], Tensor[(10, 5, 6), bool], Tensor[(5, 60), bool]) {
  %954 = @func_6186() /* ty=(Tensor[(5, 60), float32], Tensor[(15, 15, 7), float64]) */;
  %955 = @func_7404() /* ty=(Tensor[(6, 9, 16), float32], Tensor[(10, 5, 6), bool], Tensor[(300), float32], Tensor[(65), bool]) */;
  %956 = @func_3404() /* ty=(Tensor[(5, 60), bool],) */;
  %957 = %954.0;
  %958 = @func_5891() /* ty=Tensor[(5, 60), float64] */;
  %959 = %955.1;
  %960 = %956.0;
  (%957, %958, %959, %960)
}

def @func_7341(%var_7319: Tensor[(5, 60), float64]) -> (Tensor[(5, 60), int16],) {
  %961 = @func_4785() /* ty=(Tensor[(5, 60), float64],) */;
  %962 = %961.0;
  %963 = cast(%var_7319, dtype="int16") /* ty=Tensor[(5, 60), int16] */;
  %964 = shape_of(%962, dtype="int32") /* ty=Tensor[(2), int32] */;
  %965 = cast(%962, dtype="int16") /* ty=Tensor[(5, 60), int16] */;
  %966 = dyn.reshape(%963, %964, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %967 = bitwise_and(%965, %966) /* ty=Tensor[(5, 60), int16] */;
  (%967,)
}

def @func_5538(%var_5488: Tensor[(840), float32], %var_5490: bool, %var_5491: Tensor[(60, 2), bool]) -> (Tensor[(5, 60), bool], Tensor[(15, 15, 7), float64], Tensor[(840), float32], Tensor[(840), float32], Tensor[(65), bool], Tensor[(60, 2), int8], Tensor[(5, 60), bool]) {
  %968 = @func_3971() /* ty=(Tensor[(5, 60), bool], Tensor[(15, 15, 7), float64], Tensor[(5, 60), bool], Tensor[(5, 60), bool], Tensor[(120), bool], Tensor[(840), float32], Tensor[(65), bool], Tensor[(6, 9, 16), float64], Tensor[(5, 60), float64], Tensor[(5, 60), bool]) */;
  %969 = cast(%var_5488, dtype="float32") /* ty=Tensor[(840), float32] */;
  %970 = cast(meta[relay.Constant][48] /* ty=Tensor[(65), bool] */, dtype="bool") /* ty=Tensor[(65), bool] */;
  %971 = cast(%var_5490, dtype="bool") /* ty=bool */;
  %972 = cast(%var_5491, dtype="bool") /* ty=Tensor[(60, 2), bool] */;
  %973 = reshape(%969, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %974 = reshape(%970, newshape=[65, 1]) /* ty=Tensor[(65, 1), bool] */;
  %975 = reshape(%971, newshape=[]) /* ty=bool */;
  %976 = reshape(%972, newshape=[120]) /* ty=Tensor[(120), bool] */;
  %977 = @func_1939(%973, %974, %975, %976) /* ty=(Tensor[(15, 15, 7), float64], Tensor[(15, 15, 7), float64], Tensor[(65), bool], Tensor[(840), float32], Tensor[(65, 1), bool], Tensor[(14, 3, 5), float64], bool, Tensor[(120), bool]) */;
  %978 = cast(%var_5490, dtype="int8") /* ty=int8 */;
  %979 = cast(%var_5491, dtype="int8") /* ty=Tensor[(60, 2), int8] */;
  %980 = @func_5463() /* ty=(Tensor[(5, 60), bool], Tensor[(10, 30), float32]) */;
  %981 = %968.2;
  %982 = @func_4026() /* ty=Tensor[(15, 15, 7), float64] */;
  %983 = %977.3;
  %984 = bitwise_or(%978, %979) /* ty=Tensor[(60, 2), int8] */;
  %985 = %980.0;
  (%981, %982, %983, %var_5488, meta[relay.Constant][48] /* ty=Tensor[(65), bool] */, %984, %985)
}

def @func_7057() -> (Tensor[(6, 9, 16), float64],) {
  %986 = @func_4813() /* ty=(Tensor[(6, 9, 16), float64], Tensor[(14, 3, 5), uint8], Tensor[(210), int8]) */;
  %987 = %986.0;
  (%987,)
}

def @func_2948(%var_2937: Tensor[(5, 60), bool], %var_2946: Tensor[(1, 210), int8]) -> (Tensor[(5, 60), int8], Tensor[(14, 3, 5), uint8], Tensor[(1, 210), int8]) {
  %988 = @func_1974() /* ty=(Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) */;
  %989 = %988.1;
  %990 = cast(%var_2937, dtype="int8") /* ty=Tensor[(5, 60), int8] */;
  %991 = shape_of(%989, dtype="int32") /* ty=Tensor[(2), int32] */;
  %992 = cast(%989, dtype="int8") /* ty=Tensor[(5, 60), int8] */;
  %993 = dyn.reshape(%990, %991, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %994 = cast(%var_2946, dtype="int8") /* ty=Tensor[(1, 210), int8] */;
  %995 = cast(%var_2946, dtype="int8") /* ty=Tensor[(1, 210), int8] */;
  %996 = reshape(%994, newshape=[14, 3, 5]) /* ty=Tensor[(14, 3, 5), int8] */;
  %997 = reshape(%995, newshape=[14, 3, 5]) /* ty=Tensor[(14, 3, 5), int8] */;
  %998 = @func_105(%996, %997) /* ty=(Tensor[(14, 3, 5), float64], Tensor[(14, 3, 5), uint64], Tensor[(14, 3, 5), uint8]) */;
  %999 = bitwise_xor(%992, %993) /* ty=Tensor[(5, 60), int8] */;
  %1000 = %998.2;
  (%999, %1000, %var_2946)
}

def @func_3334() -> Tensor[(65), float32] {
  %1001 = @func_2458() /* ty=(Tensor[(65), bool],) */;
  %1002 = %1001.0;
  %1003 = cast(%1002, dtype="float32") /* ty=Tensor[(65), float32] */;
  %1004 = erf(%1003) /* ty=Tensor[(65), float32] */;
  %1005 = cast(%1004, dtype="float32") /* ty=Tensor[(65), float32] */;
  sigmoid(%1005) /* ty=Tensor[(65), float32] */
}

def @func_10403() -> Tensor[(120), bool] {
  %1006 = @func_6703() /* ty=(Tensor[(65), float32], Tensor[(120), bool]) */;
  %1006.1
}

def @func_11463() -> (Tensor[(120), bool], Tensor[(6, 9, 16), float64], Tensor[(864), float64], Tensor[(65), bool]) {
  %1007 = cast(meta[relay.Constant][49] /* ty=Tensor[(864), float64] */, dtype="float64") /* ty=Tensor[(864), float64] */;
  %1008 = reshape(%1007, newshape=[6, 9, 16]) /* ty=Tensor[(6, 9, 16), float64] */;
  %1009 = @func_1346(%1008) /* ty=(Tensor[(6, 9, 16), float64],) */;
  %1010 = @func_3252() /* ty=Tensor[(120), bool] */;
  %1011 = %1009.0;
  %1012 = @func_3477() /* ty=Tensor[(65), bool] */;
  (%1010, %1011, meta[relay.Constant][49] /* ty=Tensor[(864), float64] */, %1012)
}

def @func_8872() -> (Tensor[(5, 60), bool],) {
  %1013 = @func_8796() /* ty=(Tensor[(5, 60), bool],) */;
  %1014 = %1013.0;
  (%1014,)
}

def @func_5399() -> (Tensor[(15, 15, 7), float64], Tensor[(5, 60), float64]) {
  %1015 = @func_2088() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) */;
  %1016 = %1015.0;
  %1017 = @func_2179() /* ty=Tensor[(5, 60), float64] */;
  (%1016, %1017)
}

def @func_4206() -> (Tensor[(5, 60), float32],) {
  %1018 = @func_2475() /* ty=(Tensor[(5, 60), bool],) */;
  %1019 = %1018.0;
  %1020 = cast(meta[relay.Constant][50] /* ty=Tensor[(5, 60), bool] */, dtype="float32") /* ty=Tensor[(5, 60), float32] */;
  %1021 = shape_of(%1019, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1022 = cast(%1019, dtype="float32") /* ty=Tensor[(5, 60), float32] */;
  %1023 = dyn.reshape(%1020, %1021, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %1024 = divide(%1022, %1023) /* ty=Tensor[(5, 60), float32] */;
  (%1024,)
}

def @func_11638() -> (Tensor[(5, 60), bool], Tensor[(6, 9, 16), float64], Tensor[(10, 30), float32]) {
  %1025 = @func_2475() /* ty=(Tensor[(5, 60), bool],) */;
  %1026 = @func_7710() /* ty=(Tensor[(6, 9, 16), float64],) */;
  %1027 = @func_2856() /* ty=(Tensor[(864), float64], Tensor[(10, 5, 6), bool], Tensor[(10, 30), float32]) */;
  %1028 = %1025.0;
  %1029 = %1026.0;
  %1030 = %1027.2;
  (%1028, %1029, %1030)
}

def @func_6741(%var_6734: Tensor[(2, 420), float32]) -> (Tensor[(10, 30), float32], Tensor[(840), float32], Tensor[(2, 420), float32], Tensor[(65), bool]) {
  %1031 = @func_5463() /* ty=(Tensor[(5, 60), bool], Tensor[(10, 30), float32]) */;
  %1032 = cast(%var_6734, dtype="float32") /* ty=Tensor[(2, 420), float32] */;
  %1033 = cast(meta[relay.Constant][51] /* ty=Tensor[(65), bool] */, dtype="bool") /* ty=Tensor[(65), bool] */;
  %1034 = reshape(%1032, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %1035 = reshape(%1033, newshape=[65]) /* ty=Tensor[(65), bool] */;
  %1036 = @func_2650(%1034, %1035) /* ty=(Tensor[(5, 60), float32], Tensor[(5, 60), bool], bool, Tensor[(840), float32], Tensor[(65), bool], bool, Tensor[(120), bool]) */;
  %1037 = %1031.1;
  %1038 = %1036.3;
  (%1037, %1038, %var_6734, meta[relay.Constant][51] /* ty=Tensor[(65), bool] */)
}

def @func_10293(%var_10275: Tensor[(990), uint16], %var_10277: Tensor[(65), float32]) -> (Tensor[(5, 60), bool], Tensor[(990), uint16], Tensor[(65), float32], Tensor[(5, 60), float64]) {
  %1039 = cast(%var_10275, dtype="uint16") /* ty=Tensor[(990), uint16] */;
  %1040 = cast(%var_10275, dtype="uint16") /* ty=Tensor[(990), uint16] */;
  %1041 = reshape(%1039, newshape=[15, 6, 11]) /* ty=Tensor[(15, 6, 11), uint16] */;
  %1042 = reshape(%1040, newshape=[15, 6, 11]) /* ty=Tensor[(15, 6, 11), uint16] */;
  %1043 = @func_3208(%1041, %1042) /* ty=(Tensor[(15, 6, 11), bool], Tensor[(5, 60), bool]) */;
  %1044 = @func_3334() /* ty=Tensor[(65), float32] */;
  %1045 = cast(%var_10277, dtype="float32") /* ty=Tensor[(65), float32] */;
  %1046 = shape_of(%1044, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1047 = cast(%1044, dtype="float32") /* ty=Tensor[(65), float32] */;
  %1048 = dyn.reshape(%1045, %1046, newshape=[]) /* ty=Tensor[(?), float32] */;
  %1049 = @func_4086() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(5, 60), float64]) */;
  %1050 = %1043.1;
  %1051 = floor_mod(%1047, %1048) /* ty=Tensor[(65), float32] */;
  %1052 = %1049.1;
  (%1050, %var_10275, %1051, %1052)
}

def @func_2475() -> (Tensor[(5, 60), bool],) {
  %1053 = @func_2004() /* ty=(Tensor[(5, 60), bool],) */;
  %1054 = %1053.0;
  (%1054,)
}

def @func_8267() -> (Tensor[(65), float32],) {
  %1055 = @func_3334() /* ty=Tensor[(65), float32] */;
  (%1055,)
}

def @func_5760() -> (Tensor[(5, 60), float64],) {
  %1056 = @func_3491() /* ty=(Tensor[(5, 60), float32],) */;
  %1057 = %1056.0;
  %1058 = cast(%1057, dtype="float64") /* ty=Tensor[(5, 60), float64] */;
  %1059 = sin(%1058) /* ty=Tensor[(5, 60), float64] */;
  (%1059,)
}

def @func_7586() -> (Tensor[(5, 60), bool], Tensor[(5, 60), bool], Tensor[(10, 30), float32], Tensor[(6, 9, 16), float32]) {
  %1060 = @func_6280() /* ty=(Tensor[(5, 60), bool], Tensor[(6, 9, 16), float64], Tensor[(5, 60), float64]) */;
  %1061 = @func_6622() /* ty=(Tensor[(5, 60), bool],) */;
  %1062 = @func_5463() /* ty=(Tensor[(5, 60), bool], Tensor[(10, 30), float32]) */;
  %1063 = @func_4413() /* ty=(Tensor[(6, 9, 16), float32], Tensor[(5, 60), float64]) */;
  %1064 = %1060.0;
  %1065 = %1061.0;
  %1066 = %1062.1;
  %1067 = %1063.0;
  (%1064, %1065, %1066, %1067)
}

def @func_10041(%var_10031: Tensor[(840), float32], %var_10033: bool, %var_10034: Tensor[(120), bool]) -> (Tensor[(10, 30), float32], Tensor[(6, 9, 16), float64], Tensor[(864), float64], Tensor[(1, 65), float64], Tensor[(840), float32], Tensor[(65), bool], bool, Tensor[(120), bool]) {
  %1068 = @func_2856() /* ty=(Tensor[(864), float64], Tensor[(10, 5, 6), bool], Tensor[(10, 30), float32]) */;
  %1069 = cast(meta[relay.Constant][52] /* ty=Tensor[(864), float64] */, dtype="float64") /* ty=Tensor[(864), float64] */;
  %1070 = reshape(%1069, newshape=[6, 9, 16]) /* ty=Tensor[(6, 9, 16), float64] */;
  %1071 = @func_1346(%1070) /* ty=(Tensor[(6, 9, 16), float64],) */;
  %1072 = cast(%var_10031, dtype="float32") /* ty=Tensor[(840), float32] */;
  %1073 = cast(meta[relay.Constant][53] /* ty=Tensor[(65), bool] */, dtype="bool") /* ty=Tensor[(65), bool] */;
  %1074 = cast(%var_10033, dtype="bool") /* ty=bool */;
  %1075 = cast(%var_10034, dtype="bool") /* ty=Tensor[(120), bool] */;
  %1076 = reshape(%1072, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %1077 = reshape(%1073, newshape=[1, 65]) /* ty=Tensor[(1, 65), bool] */;
  %1078 = reshape(%1074, newshape=[]) /* ty=bool */;
  %1079 = reshape(%1075, newshape=[120]) /* ty=Tensor[(120), bool] */;
  %1080 = @func_5680(%1076, %1077, %1078, %1079) /* ty=(Tensor[(840), float32], Tensor[(840), float32], Tensor[(120), bool], Tensor[(5, 60), float32], Tensor[(1, 65), float64]) */;
  %1081 = %1068.2;
  %1082 = %1071.0;
  %1083 = %1080.4;
  (%1081, %1082, meta[relay.Constant][52] /* ty=Tensor[(864), float64] */, %1083, %var_10031, meta[relay.Constant][53] /* ty=Tensor[(65), bool] */, %var_10033, %var_10034)
}

def @func_7873(%var_7830: Tensor[(420, 2), float32], %var_7832: Tensor[(120), bool], %var_7836: Tensor[(420, 2), float32], %var_7841: Tensor[(63), float64]) -> (Tensor[(15, 15, 7), float64], Tensor[(15, 15, 7), float64], bool, Tensor[(120), bool], Tensor[(5, 60), bool], Tensor[(63), float64], Tensor[(420, 2), float32]) {
  %1084 = @func_4086() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(5, 60), float64]) */;
  %1085 = cast(%var_7830, dtype="float32") /* ty=Tensor[(420, 2), float32] */;
  %1086 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %1087 = cast(%var_7832, dtype="bool") /* ty=Tensor[(120), bool] */;
  %1088 = reshape(%1085, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %1089 = reshape(%1086, newshape=[]) /* ty=bool */;
  %1090 = reshape(%1087, newshape=[60, 2]) /* ty=Tensor[(60, 2), bool] */;
  %1091 = @func_5538(%1088, %1089, %1090) /* ty=(Tensor[(5, 60), bool], Tensor[(15, 15, 7), float64], Tensor[(840), float32], Tensor[(840), float32], Tensor[(65), bool], Tensor[(60, 2), int8], Tensor[(5, 60), bool]) */;
  %1092 = cast(%var_7841, dtype="float64") /* ty=Tensor[(63), float64] */;
  %1093 = cast(%var_7830, dtype="float32") /* ty=Tensor[(420, 2), float32] */;
  %1094 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %1095 = cast(%var_7832, dtype="bool") /* ty=Tensor[(120), bool] */;
  %1096 = reshape(%1092, newshape=[3, 7, 3]) /* ty=Tensor[(3, 7, 3), float64] */;
  %1097 = reshape(%1093, newshape=[2, 420]) /* ty=Tensor[(2, 420), float32] */;
  %1098 = reshape(%1094, newshape=[]) /* ty=bool */;
  %1099 = reshape(%1095, newshape=[120]) /* ty=Tensor[(120), bool] */;
  %1100 = @func_4736(%1096, %1097, %1098, %1099) /* ty=(Tensor[(3, 7, 3), float64], Tensor[(5, 60), bool], Tensor[(6, 9, 16), float64], Tensor[(2, 420), int64], Tensor[(5, 60), bool], Tensor[(65), bool], Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool], Tensor[(14, 3, 5), float64], bool, Tensor[(120), bool]) */;
  %1101 = cast(%var_7836, dtype="uint8") /* ty=Tensor[(420, 2), uint8] */;
  %1102 = shape_of(%var_7830, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1103 = cast(%var_7830, dtype="uint8") /* ty=Tensor[(420, 2), uint8] */;
  %1104 = dyn.reshape(%1101, %1102, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %1105 = left_shift(%1103, %1104) /* ty=Tensor[(420, 2), uint8] */;
  %1106 = cast(%1105, dtype="float64") /* ty=Tensor[(420, 2), float64] */;
  %1107 = shape_of(%var_7836, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1108 = cast(%var_7836, dtype="float64") /* ty=Tensor[(420, 2), float64] */;
  %1109 = dyn.reshape(%1106, %1107, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %1110 = floor_mod(%1108, %1109) /* ty=Tensor[(420, 2), float64] */;
  %1111 = cast(%1110, dtype="float32") /* ty=Tensor[(420, 2), float32] */;
  %1112 = %1084.0;
  %1113 = %1091.1;
  %1114 = %1100.1;
  %1115 = cos(%1111) /* ty=Tensor[(420, 2), float32] */;
  (%1112, %1113, True /* ty=bool */, %var_7832, %1114, %var_7841, %1115)
}

def @func_10773() -> Tensor[(5, 60), float64] {
  %1116 = @func_8618() /* ty=(Tensor[(5, 60), float64], Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(5, 60), float64]) */;
  %1116.3
}

def @func_8529() -> Tensor[(5, 60), float64] {
  %1117 = @func_6085() /* ty=(Tensor[(5, 60), float64],) */;
  %1117.0
}

def @func_11555() -> (Tensor[(5, 60), bool], Tensor[(10, 5, 6), bool], Tensor[(864), float64]) {
  %1118 = @func_2269() /* ty=(Tensor[(5, 60), bool], Tensor[(5, 60), bool]) */;
  %1119 = @func_7676() /* ty=(Tensor[(5, 60), float32], Tensor[(5, 60), float64], Tensor[(10, 5, 6), bool], Tensor[(5, 60), bool]) */;
  %1120 = %1118.0;
  %1121 = %1119.2;
  %1122 = @func_8912() /* ty=Tensor[(864), float64] */;
  (%1120, %1121, %1122)
}

def @func_12079() -> Tensor[(5, 60), bool] {
  %1123 = @func_5997() /* ty=(Tensor[(5, 60), bool],) */;
  %1123.0
}

def @func_6186() -> (Tensor[(5, 60), float32], Tensor[(15, 15, 7), float64]) {
  %1124 = @func_3491() /* ty=(Tensor[(5, 60), float32],) */;
  %1125 = %1124.0;
  %1126 = cast(%1125, dtype="bool") /* ty=Tensor[(5, 60), bool] */;
  %1127 = reshape(%1126, newshape=[5, 60]) /* ty=Tensor[(5, 60), bool] */;
  %1128 = @func_3375(%1127) /* ty=(Tensor[(5, 60), float32], Tensor[(15, 15, 7), float64]) */;
  %1129 = %1128.1;
  (%1125, %1129)
}

def @func_12189() -> Tensor[(5, 60), float32] {
  %1130 = @func_7489() /* ty=(Tensor[(5, 60), int16], Tensor[(5, 60), float32], Tensor[(6, 9, 16), float64]) */;
  %1130.1
}

def @func_1346(%var_1337: Tensor[(6, 9, 16), float64]) -> (Tensor[(6, 9, 16), float64],) {
  %1131 = cast(%var_1337, dtype="float64") /* ty=Tensor[(6, 9, 16), float64] */;
  %1132 = atan(%1131) /* ty=Tensor[(6, 9, 16), float64] */;
  (%1132,)
}

def @func_399(%var_325: bool, %var_326: Tensor[(10, 12, 1), bool]) -> (Tensor[(14, 3, 5), float64], Tensor[(210), int8], Tensor[(10, 12, ?), int64]) {
  %1133 = cast(meta[relay.Constant][54] /* ty=Tensor[(210), int8] */, dtype="int8") /* ty=Tensor[(210), int8] */;
  %1134 = cast(meta[relay.Constant][54] /* ty=Tensor[(210), int8] */, dtype="int8") /* ty=Tensor[(210), int8] */;
  %1135 = reshape(%1133, newshape=[14, 3, 5]) /* ty=Tensor[(14, 3, 5), int8] */;
  %1136 = reshape(%1134, newshape=[14, 3, 5]) /* ty=Tensor[(14, 3, 5), int8] */;
  %1137 = @func_105(%1135, %1136) /* ty=(Tensor[(14, 3, 5), float64], Tensor[(14, 3, 5), uint64], Tensor[(14, 3, 5), uint8]) */;
  %1138 = cast(%var_325, dtype="bool") /* ty=bool */;
  %1139 = cast(%var_326, dtype="bool") /* ty=Tensor[(10, 12, 1), bool] */;
  %1140 = logical_or(%1138, %1139) /* ty=Tensor[(10, 12, 1), bool] */;
  %1141 = cast(%1140, dtype="int64") /* ty=Tensor[(10, 12, 1), int64] */;
  %1142 = shape_of(%var_326, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1143 = cast(%var_326, dtype="int64") /* ty=Tensor[(10, 12, 1), int64] */;
  %1144 = dyn.reshape(%1141, %1142, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %1145 = %1137.0;
  %1146 = add(%1143, %1144) /* ty=Tensor[(10, 12, ?), int64] */;
  (%1145, meta[relay.Constant][54] /* ty=Tensor[(210), int8] */, %1146)
}

def @func_11507() -> (Tensor[(15, 15, 7), float64], Tensor[(5, 60), bool]) {
  %1147 = @func_4348() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(10, 30), float32]) */;
  %1148 = @func_6835() /* ty=(Tensor[(5, 60), bool],) */;
  %1149 = %1147.0;
  %1150 = %1148.0;
  (%1149, %1150)
}

def @func_11162() -> (Tensor[(864), float64], Tensor[(5, 60), bool]) {
  %1151 = @func_5834() /* ty=(Tensor[(864), float64], Tensor[(864), float64], Tensor[(5, 60), float64], Tensor[(864), float64]) */;
  %1152 = @func_10502() /* ty=(Tensor[(5, 60), bool],) */;
  %1153 = %1151.0;
  %1154 = %1152.0;
  (%1153, %1154)
}

def @func_7404() -> (Tensor[(6, 9, 16), float32], Tensor[(10, 5, 6), bool], Tensor[(300), float32], Tensor[(65), bool]) {
  %1155 = @func_4151() /* ty=(Tensor[(6, 9, 16), float32], Tensor[(5, 60), uint64], Tensor[(300, 1), float32], Tensor[(1, 210), int8], Tensor[(5, 42), int8]) */;
  %1156 = cast(meta[relay.Constant][55] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
  %1157 = reshape(%1156, newshape=[10, 5, 6]) /* ty=Tensor[(10, 5, 6), float32] */;
  %1158 = %1155.0;
  %1159 = @func_1812(%1157) /* ty=Tensor[(10, 5, 6), bool] */;
  %1160 = @func_3477() /* ty=Tensor[(65), bool] */;
  (%1158, %1159, meta[relay.Constant][55] /* ty=Tensor[(300), float32] */, %1160)
}

def @func_7262() -> (Tensor[(5, 60), bool],) {
  %1161 = @func_5922() /* ty=(Tensor[(5, 60), bool],) */;
  %1162 = %1161.0;
  (%1162,)
}

def @func_9575() -> (Tensor[(15, 15, 7), float64], Tensor[(10, 30), float32], Tensor[(65), float32], Tensor[(15, 15, 7), float64]) {
  %1163 = @func_9069() /* ty=(Tensor[(15, 15, 7), float64],) */;
  %1164 = @func_4348() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(10, 30), float32]) */;
  %1165 = @func_4348() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(10, 30), float32]) */;
  %1166 = %1163.0;
  %1167 = %1164.1;
  %1168 = @func_5735() /* ty=Tensor[(65), float32] */;
  %1169 = %1165.0;
  (%1166, %1167, %1168, %1169)
}

def @func_5680(%var_5638: Tensor[(840), float32], %var_5639: Tensor[(1, 65), bool], %var_5640: bool, %var_5641: Tensor[(120), bool]) -> (Tensor[(840), float32], Tensor[(840), float32], Tensor[(120), bool], Tensor[(5, 60), float32], Tensor[(1, 65), float64]) {
  %1170 = cast(%var_5638, dtype="float32") /* ty=Tensor[(840), float32] */;
  %1171 = cast(%var_5639, dtype="bool") /* ty=Tensor[(1, 65), bool] */;
  %1172 = cast(%var_5640, dtype="bool") /* ty=bool */;
  %1173 = cast(%var_5641, dtype="bool") /* ty=Tensor[(120), bool] */;
  %1174 = reshape(%1170, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %1175 = reshape(%1171, newshape=[65, 1]) /* ty=Tensor[(65, 1), bool] */;
  %1176 = reshape(%1172, newshape=[]) /* ty=bool */;
  %1177 = reshape(%1173, newshape=[120]) /* ty=Tensor[(120), bool] */;
  %1178 = @func_1939(%1174, %1175, %1176, %1177) /* ty=(Tensor[(15, 15, 7), float64], Tensor[(15, 15, 7), float64], Tensor[(65), bool], Tensor[(840), float32], Tensor[(65, 1), bool], Tensor[(14, 3, 5), float64], bool, Tensor[(120), bool]) */;
  %1179 = @func_3664() /* ty=(Tensor[(5, 60), float64],) */;
  %1180 = %1179.0;
  %1181 = cast(%1180, dtype="float32") /* ty=Tensor[(5, 60), float32] */;
  %1182 = cast(%var_5639, dtype="float64") /* ty=Tensor[(1, 65), float64] */;
  %1183 = cast(%var_5640, dtype="float64") /* ty=float64 */;
  %1184 = %1178.3;
  %1185 = sqrt(%1181) /* ty=Tensor[(5, 60), float32] */;
  %1186 = floor_mod(%1182, %1183) /* ty=Tensor[(1, 65), float64] */;
  (%1184, %var_5638, %var_5641, %1185, %1186)
}

def @func_3664() -> (Tensor[(5, 60), float64],) {
  %1187 = @func_2475() /* ty=(Tensor[(5, 60), bool],) */;
  %1188 = %1187.0;
  %1189 = cast(%1188, dtype="float64") /* ty=Tensor[(5, 60), float64] */;
  %1190 = tan(%1189) /* ty=Tensor[(5, 60), float64] */;
  (%1190,)
}

def @func_3907(%var_3893: Tensor[(15, 15, 7), float64]) -> (Tensor[(15, 15, 7), bool], Tensor[(5, 60), bool], Tensor[(65), bool]) {
  %1191 = @func_1840() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(864), float64]) */;
  %1192 = %1191.0;
  %1193 = cast(%var_3893, dtype="bool") /* ty=Tensor[(15, 15, 7), bool] */;
  %1194 = shape_of(%1192, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1195 = cast(%1192, dtype="bool") /* ty=Tensor[(15, 15, 7), bool] */;
  %1196 = dyn.reshape(%1193, %1194, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1197 = @func_2458() /* ty=(Tensor[(65), bool],) */;
  %1198 = not_equal(%1195, %1196) /* ty=Tensor[(15, 15, 7), bool] */;
  %1199 = @func_2482() /* ty=Tensor[(5, 60), bool] */;
  %1200 = %1197.0;
  (%1198, %1199, %1200)
}

def @func_3420() -> Tensor[(5, 60), bool] {
  %1201 = @func_2004() /* ty=(Tensor[(5, 60), bool],) */;
  %1201.0
}

def @func_459(%var_455: Tensor[(1, 5, 13), bool]) -> (Tensor[(1, 5, 13), bool],) {
  %1202 = cast(meta[relay.Constant][56] /* ty=Tensor[(1, 5, 1), bool] */, dtype="bool") /* ty=Tensor[(1, 5, 1), bool] */;
  %1203 = cast(%var_455, dtype="bool") /* ty=Tensor[(1, 5, 13), bool] */;
  %1204 = logical_and(%1202, %1203) /* ty=Tensor[(1, 5, 13), bool] */;
  (%1204,)
}

def @func_11252(%var_11222: Tensor[(2, 2, 16), float64]) -> (Tensor[(2, 2, 16), bool], Tensor[(5, 60), float64]) {
  %1205 = cast(meta[relay.Constant][57] /* ty=Tensor[(2, 2, 16), float64] */, dtype="float64") /* ty=Tensor[(2, 2, 16), float64] */;
  %1206 = shape_of(%var_11222, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1207 = cast(%var_11222, dtype="float64") /* ty=Tensor[(2, 2, 16), float64] */;
  %1208 = dyn.reshape(%1205, %1206, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1209 = divide(%1207, %1208) /* ty=Tensor[(2, 2, 16), float64] */;
  %1210 = cast(%1209, dtype="bool") /* ty=Tensor[(2, 2, 16), bool] */;
  %1211 = shape_of(%var_11222, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1212 = cast(%var_11222, dtype="bool") /* ty=Tensor[(2, 2, 16), bool] */;
  %1213 = dyn.reshape(%1210, %1211, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1214 = @func_4413() /* ty=(Tensor[(6, 9, 16), float32], Tensor[(5, 60), float64]) */;
  %1215 = equal(%1212, %1213) /* ty=Tensor[(2, 2, 16), bool] */;
  %1216 = %1214.1;
  (%1215, %1216)
}

def @func_7724() -> Tensor[(65), float32] {
  @func_3334() /* ty=Tensor[(65), float32] */
}

def @func_4632(%var_4617: Tensor[(15, 15, 7), float64]) -> Tensor[(15, 15, 7), int64] {
  %1217 = @func_4026() /* ty=Tensor[(15, 15, 7), float64] */;
  %1218 = cast(%var_4617, dtype="int64") /* ty=Tensor[(15, 15, 7), int64] */;
  %1219 = shape_of(%1217, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1220 = cast(%1217, dtype="int64") /* ty=Tensor[(15, 15, 7), int64] */;
  %1221 = dyn.reshape(%1218, %1219, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_and(%1220, %1221) /* ty=Tensor[(15, 15, 7), int64] */
}

def @func_5195() -> (Tensor[(5, 60), bool], Tensor[(5, 60), float64]) {
  %1222 = @func_3404() /* ty=(Tensor[(5, 60), bool],) */;
  %1223 = @func_5179() /* ty=(Tensor[(5, 60), float64],) */;
  %1224 = %1222.0;
  %1225 = %1223.0;
  (%1224, %1225)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4086() -> (Tensor[(15, 15, 7), float64], Tensor[(5, 60), float64]) {
  %0 = @func_1840() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(864), float64]) */;
  %1 = @func_3664() /* ty=(Tensor[(5, 60), float64],) */;
  %2 = %0.0;
  %3 = %1.0;
  (%2, %3)
}

def @func_11939() -> (Tensor[(5, 60), float64], Tensor[(65), bool]) {
  %8 = fn () -> (Tensor[(5, 60), float64], Tensor[(65), bool]) {
    %4 = @func_4785() /* ty=(Tensor[(5, 60), float64],) */;
    %5 = @func_7404() /* ty=(Tensor[(6, 9, 16), float32], Tensor[(10, 5, 6), bool], Tensor[(300), float32], Tensor[(65), bool]) */;
    %6 = %4.0;
    %7 = %5.3;
    (%6, %7)
  };
  %8() /* ty=(Tensor[(5, 60), float64], Tensor[(65), bool]) */
}

def @main(%var_12250: Tensor[(10, 16, 1), float64], %var_12268: Tensor[(50, 6), bool], %var_12269: Tensor[(210), int8]) -> (Tensor[(210), int8], Tensor[(50, 6), bool], Tensor[(210), int8], Tensor[(10, 16, ?), float64]) {
  %9 = cast(%var_12268, dtype="bool") /* ty=Tensor[(50, 6), bool] */;
  %10 = cast(%var_12269, dtype="int8") /* ty=Tensor[(210), int8] */;
  %11 = reshape(%9, newshape=[300]) /* ty=Tensor[(300), bool] */;
  %12 = reshape(%10, newshape=[210]) /* ty=Tensor[(210), int8] */;
  %13 = @func_10138(%11, %12) /* ty=(Tensor[(6, 9, 16), int64], Tensor[(1, 210), int8], Tensor[(300), bool], Tensor[(210), int8]) */;
  %14 = cast(%var_12250, dtype="float64") /* ty=Tensor[(10, 16, 1), float64] */;
  %15 = acos(%14) /* ty=Tensor[(10, 16, 1), float64] */;
  %16 = cast(%var_12250, dtype="float64") /* ty=Tensor[(10, 16, 1), float64] */;
  %17 = shape_of(%15, dtype="int32") /* ty=Tensor[(3), int32] */;
  %18 = cast(%15, dtype="float64") /* ty=Tensor[(10, 16, 1), float64] */;
  %19 = dyn.reshape(%16, %17, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %20 = divide(%18, %19) /* ty=Tensor[(10, 16, ?), float64] */;
  %21 = cast(%20, dtype="float64") /* ty=Tensor[(10, 16, ?), float64] */;
  %22 = %13.3;
  %23 = log2(%21) /* ty=Tensor[(10, 16, ?), float64] */;
  (%22, %var_12268, %var_12269, %23)
}

def @func_9514() -> Tensor[(5, 60), float32] {
  %25 = fn () -> Tensor[(5, 60), float32] {
    %24 = @func_6186() /* ty=(Tensor[(5, 60), float32], Tensor[(15, 15, 7), float64]) */;
    %24.0
  };
  %25() /* ty=Tensor[(5, 60), float32] */
}

def @func_6085() -> (Tensor[(5, 60), float64],) {
  %26 = @func_2179() /* ty=Tensor[(5, 60), float64] */;
  (%26,)
}

def @func_10670(%var_10649: Tensor[(63), float64], %var_10650: Tensor[(840), float32], %var_10651: bool) -> (Tensor[(5, 60), float64], Tensor[(5, 60), bool], Tensor[(3, 7, 3), float64], Tensor[(63), float64], Tensor[(840), float32], bool, Tensor[(60, 2), bool], Tensor[(16, 7, 7), bool], Tensor[(784), uint8]) {
  %27 = @func_9513() /* ty=Tensor[(5, 60), float32] */;
  %28 = cast(%27, dtype="float64") /* ty=Tensor[(5, 60), float64] */;
  %29 = @func_9792() /* ty=(Tensor[(5, 60), bool],) */;
  %30 = cast(%var_10649, dtype="float64") /* ty=Tensor[(63), float64] */;
  %31 = cast(%var_10650, dtype="float32") /* ty=Tensor[(840), float32] */;
  %32 = cast(%var_10651, dtype="bool") /* ty=bool */;
  %33 = cast(meta[relay.Constant][0] /* ty=Tensor[(60, 2), bool] */, dtype="bool") /* ty=Tensor[(60, 2), bool] */;
  %34 = reshape(%30, newshape=[3, 7, 3]) /* ty=Tensor[(3, 7, 3), float64] */;
  %35 = reshape(%31, newshape=[2, 420]) /* ty=Tensor[(2, 420), float32] */;
  %36 = reshape(%32, newshape=[]) /* ty=bool */;
  %37 = reshape(%33, newshape=[120]) /* ty=Tensor[(120), bool] */;
  %38 = @func_4736(%34, %35, %36, %37) /* ty=(Tensor[(3, 7, 3), float64], Tensor[(5, 60), bool], Tensor[(6, 9, 16), float64], Tensor[(2, 420), int64], Tensor[(5, 60), bool], Tensor[(65), bool], Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool], Tensor[(14, 3, 5), float64], bool, Tensor[(120), bool]) */;
  %39 = cast(meta[relay.Constant][1] /* ty=Tensor[(784), uint8] */, dtype="uint8") /* ty=Tensor[(784), uint8] */;
  %40 = cast(meta[relay.Constant][1] /* ty=Tensor[(784), uint8] */, dtype="uint8") /* ty=Tensor[(784), uint8] */;
  %41 = reshape(%39, newshape=[16, 7, 7]) /* ty=Tensor[(16, 7, 7), uint8] */;
  %42 = reshape(%40, newshape=[16, 7, 7]) /* ty=Tensor[(16, 7, 7), uint8] */;
  %43 = @func_8987(%41, %42) /* ty=(Tensor[(16, 7, 7), bool],) */;
  %44 = exp(%28) /* ty=Tensor[(5, 60), float64] */;
  %45 = %29.0;
  %46 = %38.0;
  %47 = %43.0;
  (%44, %45, %46, %var_10649, %var_10650, %var_10651, meta[relay.Constant][0] /* ty=Tensor[(60, 2), bool] */, %47, meta[relay.Constant][1] /* ty=Tensor[(784), uint8] */)
}

def @func_10403() -> Tensor[(120), bool] {
  %48 = @func_6703() /* ty=(Tensor[(65), float32], Tensor[(120), bool]) */;
  %48.1
}

def @func_7038() -> (Tensor[(5, 60), float64],) {
  @func_7036() /* ty=(Tensor[(5, 60), float64],) */
}

def @func_7262() -> (Tensor[(5, 60), bool],) {
  %49 = @func_5922() /* ty=(Tensor[(5, 60), bool],) */;
  %50 = %49.0;
  (%50,)
}

def @func_6441() -> Tensor[(65), float32] {
  @func_6439() /* ty=Tensor[(65), float32] */
}

def @func_8823() -> Tensor[(5, 60), bool] {
  %51 = @func_7586() /* ty=(Tensor[(5, 60), bool], Tensor[(5, 60), bool], Tensor[(10, 30), float32], Tensor[(6, 9, 16), float32]) */;
  %51.1
}

def @func_5179() -> (Tensor[(5, 60), float64],) {
  %52 = @func_3984() /* ty=Tensor[(5, 60), float64] */;
  (%52,)
}

def @func_8492() -> (Tensor[(6, 9, 16), float32],) {
  @func_8490() /* ty=(Tensor[(6, 9, 16), float32],) */
}

def @func_2005() -> (Tensor[(5, 60), bool],) {
  %55 = fn () -> (Tensor[(5, 60), bool],) {
    %53 = @func_1974() /* ty=(Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) */;
    %54 = %53.1;
    (%54,)
  };
  %55() /* ty=(Tensor[(5, 60), bool],) */
}

def @func_9491() -> (Tensor[(5, 60), bool],) {
  @func_9489() /* ty=(Tensor[(5, 60), bool],) */
}

def @func_6874(%var_6872: Tensor[(12, 2, 8), float64]) -> (Tensor[(12, 2, 8), float64], Tensor[(65), float32]) {
  @func_6871(%var_6872) /* ty=(Tensor[(12, 2, 8), float64], Tensor[(65), float32]) */
}

def @func_3779(%var_3778: Tensor[(5, 60), bool]) -> (Tensor[(65), float32], Tensor[(5, 60), uint16]) {
  %64 = fn (%var_3757: Tensor[(5, 60), bool]) -> (Tensor[(65), float32], Tensor[(5, 60), uint16]) {
    %56 = @func_2004() /* ty=(Tensor[(5, 60), bool],) */;
    %57 = %56.0;
    %58 = cast(%var_3757, dtype="uint16") /* ty=Tensor[(5, 60), uint16] */;
    %59 = shape_of(%57, dtype="int32") /* ty=Tensor[(2), int32] */;
    %60 = cast(%57, dtype="uint16") /* ty=Tensor[(5, 60), uint16] */;
    %61 = dyn.reshape(%58, %59, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    %62 = @func_3334() /* ty=Tensor[(65), float32] */;
    %63 = subtract(%60, %61) /* ty=Tensor[(5, 60), uint16] */;
    (%62, %63)
  };
  %64(%var_3778) /* ty=(Tensor[(65), float32], Tensor[(5, 60), uint16]) */
}

def @func_8210() -> (Tensor[(5, 60), bool], Tensor[(5, 60), float32]) {
  %65 = @func_2475() /* ty=(Tensor[(5, 60), bool],) */;
  %66 = @func_3664() /* ty=(Tensor[(5, 60), float64],) */;
  %67 = %66.0;
  %68 = @func_5399() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(5, 60), float64]) */;
  %69 = %68.1;
  %70 = cast(%69, dtype="float32") /* ty=Tensor[(5, 60), float32] */;
  %71 = shape_of(%67, dtype="int32") /* ty=Tensor[(2), int32] */;
  %72 = cast(%67, dtype="float32") /* ty=Tensor[(5, 60), float32] */;
  %73 = dyn.reshape(%70, %71, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %74 = %65.0;
  %75 = mod(%72, %73) /* ty=Tensor[(5, 60), float32] */;
  (%74, %75)
}

def @func_8258(%var_8256: Tensor[(16, 5, 5), float64], %var_8257: Tensor[(16, 5, 5), float64]) -> (Tensor[(16, 5, 5), float64], Tensor[(16, 5, 5), float64]) {
  %85 = fn (%var_8243: Tensor[(16, 5, 5), float64], %var_8244: Tensor[(16, 5, 5), float64]) -> (Tensor[(16, 5, 5), float64], Tensor[(16, 5, 5), float64]) {
    %76 = cast(%var_8244, dtype="float64") /* ty=Tensor[(16, 5, 5), float64] */;
    %77 = shape_of(%var_8243, dtype="int32") /* ty=Tensor[(3), int32] */;
    %78 = cast(%var_8243, dtype="float64") /* ty=Tensor[(16, 5, 5), float64] */;
    %79 = dyn.reshape(%76, %77, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %80 = cast(%var_8243, dtype="float32") /* ty=Tensor[(16, 5, 5), float32] */;
    %81 = asinh(%80) /* ty=Tensor[(16, 5, 5), float32] */;
    %82 = cast(%81, dtype="float64") /* ty=Tensor[(16, 5, 5), float64] */;
    %83 = subtract(%78, %79) /* ty=Tensor[(16, 5, 5), float64] */;
    %84 = tan(%82) /* ty=Tensor[(16, 5, 5), float64] */;
    (%83, %84)
  };
  %85(%var_8256, %var_8257) /* ty=(Tensor[(16, 5, 5), float64], Tensor[(16, 5, 5), float64]) */
}

def @func_3276() -> (Tensor[(15, 15, 7), float64],) {
  @func_3274() /* ty=(Tensor[(15, 15, 7), float64],) */
}

def @func_3334() -> Tensor[(65), float32] {
  %86 = @func_2458() /* ty=(Tensor[(65), bool],) */;
  %87 = %86.0;
  %88 = cast(%87, dtype="float32") /* ty=Tensor[(65), float32] */;
  %89 = erf(%88) /* ty=Tensor[(65), float32] */;
  %90 = cast(%89, dtype="float32") /* ty=Tensor[(65), float32] */;
  sigmoid(%90) /* ty=Tensor[(65), float32] */
}

def @func_10090() -> Tensor[(5, 60), bool] {
  @func_10088() /* ty=Tensor[(5, 60), bool] */
}

def @func_9869() -> (Tensor[(5, 60), float64], Tensor[(65), float32]) {
  %91 = @func_3477() /* ty=Tensor[(65), bool] */;
  %92 = cast(%91, dtype="float32") /* ty=Tensor[(65), float32] */;
  %93 = @func_9754() /* ty=Tensor[(5, 60), float64] */;
  %94 = exp(%92) /* ty=Tensor[(65), float32] */;
  (%93, %94)
}

def @func_8874() -> (Tensor[(5, 60), bool],) {
  @func_8872() /* ty=(Tensor[(5, 60), bool],) */
}

def @func_11402() -> (Tensor[(5, 60), bool],) {
  @func_11400() /* ty=(Tensor[(5, 60), bool],) */
}

def @func_11556() -> (Tensor[(5, 60), bool], Tensor[(10, 5, 6), bool], Tensor[(864), float64]) {
  %100 = fn () -> (Tensor[(5, 60), bool], Tensor[(10, 5, 6), bool], Tensor[(864), float64]) {
    %95 = @func_2269() /* ty=(Tensor[(5, 60), bool], Tensor[(5, 60), bool]) */;
    %96 = @func_7676() /* ty=(Tensor[(5, 60), float32], Tensor[(5, 60), float64], Tensor[(10, 5, 6), bool], Tensor[(5, 60), bool]) */;
    %97 = %95.0;
    %98 = %96.2;
    %99 = @func_8912() /* ty=Tensor[(864), float64] */;
    (%97, %98, %99)
  };
  %100() /* ty=(Tensor[(5, 60), bool], Tensor[(10, 5, 6), bool], Tensor[(864), float64]) */
}

def @func_11509() -> (Tensor[(15, 15, 7), float64], Tensor[(5, 60), bool]) {
  @func_11507() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(5, 60), bool]) */
}

def @func_4813() -> (Tensor[(6, 9, 16), float64], Tensor[(14, 3, 5), uint8], Tensor[(210), int8]) {
  %101 = @func_2867() /* ty=(Tensor[(6, 9, 16), float64],) */;
  %102 = cast(meta[relay.Constant][2] /* ty=Tensor[(210), int8] */, dtype="int8") /* ty=Tensor[(210), int8] */;
  %103 = cast(meta[relay.Constant][2] /* ty=Tensor[(210), int8] */, dtype="int8") /* ty=Tensor[(210), int8] */;
  %104 = reshape(%102, newshape=[14, 3, 5]) /* ty=Tensor[(14, 3, 5), int8] */;
  %105 = reshape(%103, newshape=[14, 3, 5]) /* ty=Tensor[(14, 3, 5), int8] */;
  %106 = @func_105(%104, %105) /* ty=(Tensor[(14, 3, 5), float64], Tensor[(14, 3, 5), uint64], Tensor[(14, 3, 5), uint8]) */;
  %107 = %101.0;
  %108 = %106.2;
  (%107, %108, meta[relay.Constant][2] /* ty=Tensor[(210), int8] */)
}

def @func_9156(%var_9144: Tensor[(840), float32]) -> (Tensor[(5, 60), float32], Tensor[(6, 9, 16), float64], Tensor[(840), float32]) {
  %109 = @func_8210() /* ty=(Tensor[(5, 60), bool], Tensor[(5, 60), float32]) */;
  %110 = cast(%var_9144, dtype="float32") /* ty=Tensor[(840), float32] */;
  %111 = reshape(%110, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %112 = @func_6057(%111) /* ty=(Tensor[(840), uint64], Tensor[(6, 9, 16), float64]) */;
  %113 = %109.1;
  %114 = %112.1;
  (%113, %114, %var_9144)
}

def @func_8619() -> (Tensor[(5, 60), float64], Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(5, 60), float64]) {
  %123 = fn () -> (Tensor[(5, 60), float64], Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(5, 60), float64]) {
    %115 = @func_5179() /* ty=(Tensor[(5, 60), float64],) */;
    %116 = @func_4348() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(10, 30), float32]) */;
    %117 = @func_6816() /* ty=(Tensor[(6, 9, 16), float64],) */;
    %118 = @func_7036() /* ty=(Tensor[(5, 60), float64],) */;
    %119 = %115.0;
    %120 = %116.0;
    %121 = %117.0;
    %122 = %118.0;
    (%119, %120, %121, %122)
  };
  %123() /* ty=(Tensor[(5, 60), float64], Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(5, 60), float64]) */
}

def @func_10297(%var_10295: Tensor[(990), uint16], %var_10296: Tensor[(65), float32]) -> (Tensor[(5, 60), bool], Tensor[(990), uint16], Tensor[(65), float32], Tensor[(5, 60), float64]) {
  @func_10293(%var_10295, %var_10296) /* ty=(Tensor[(5, 60), bool], Tensor[(990), uint16], Tensor[(65), float32], Tensor[(5, 60), float64]) */
}

def @func_6775() -> Tensor[(15, 15, 7), float64] {
  %124 = @func_5399() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(5, 60), float64]) */;
  %124.0
}

def @func_3665() -> (Tensor[(5, 60), float64],) {
  %129 = fn () -> (Tensor[(5, 60), float64],) {
    %125 = @func_2475() /* ty=(Tensor[(5, 60), bool],) */;
    %126 = %125.0;
    %127 = cast(%126, dtype="float64") /* ty=Tensor[(5, 60), float64] */;
    %128 = tan(%127) /* ty=Tensor[(5, 60), float64] */;
    (%128,)
  };
  %129() /* ty=(Tensor[(5, 60), float64],) */
}

def @func_5836() -> (Tensor[(864), float64], Tensor[(864), float64], Tensor[(5, 60), float64], Tensor[(864), float64]) {
  @func_5834() /* ty=(Tensor[(864), float64], Tensor[(864), float64], Tensor[(5, 60), float64], Tensor[(864), float64]) */
}

def @func_8990(%var_8988: Tensor[(16, 7, 7), uint8], %var_8989: Tensor[(16, 7, 7), uint8]) -> (Tensor[(16, 7, 7), bool],) {
  %135 = fn (%var_8975: Tensor[(16, 7, 7), uint8], %var_8976: Tensor[(16, 7, 7), uint8]) -> (Tensor[(16, 7, 7), bool],) {
    %130 = cast(%var_8976, dtype="bool") /* ty=Tensor[(16, 7, 7), bool] */;
    %131 = shape_of(%var_8975, dtype="int32") /* ty=Tensor[(3), int32] */;
    %132 = cast(%var_8975, dtype="bool") /* ty=Tensor[(16, 7, 7), bool] */;
    %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %134 = not_equal(%132, %133) /* ty=Tensor[(16, 7, 7), bool] */;
    (%134,)
  };
  %135(%var_8988, %var_8989) /* ty=(Tensor[(16, 7, 7), bool],) */
}

def @func_9489() -> (Tensor[(5, 60), bool],) {
  %136 = @func_3420() /* ty=Tensor[(5, 60), bool] */;
  (%136,)
}

def @func_6282() -> (Tensor[(5, 60), bool], Tensor[(6, 9, 16), float64], Tensor[(5, 60), float64]) {
  @func_6280() /* ty=(Tensor[(5, 60), bool], Tensor[(6, 9, 16), float64], Tensor[(5, 60), float64]) */
}

def @func_2241(%var_2239: Tensor[(5, 60), float64], %var_2240: Tensor[(5, 60), float64]) -> (Tensor[(5, 60), float64], Tensor[(5, 60), bool]) {
  %148 = fn (%var_2211: Tensor[(5, 60), float64], %var_2224: Tensor[(5, 60), float64]) -> (Tensor[(5, 60), float64], Tensor[(5, 60), bool]) {
    %137 = @func_2179() /* ty=Tensor[(5, 60), float64] */;
    %138 = cast(%var_2211, dtype="float64") /* ty=Tensor[(5, 60), float64] */;
    %139 = shape_of(%137, dtype="int32") /* ty=Tensor[(2), int32] */;
    %140 = cast(%137, dtype="float64") /* ty=Tensor[(5, 60), float64] */;
    %141 = dyn.reshape(%138, %139, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %142 = cast(%var_2224, dtype="bool") /* ty=Tensor[(5, 60), bool] */;
    %143 = shape_of(%var_2211, dtype="int32") /* ty=Tensor[(2), int32] */;
    %144 = cast(%var_2211, dtype="bool") /* ty=Tensor[(5, 60), bool] */;
    %145 = dyn.reshape(%142, %143, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %146 = add(%140, %141) /* ty=Tensor[(5, 60), float64] */;
    %147 = logical_or(%144, %145) /* ty=Tensor[(5, 60), bool] */;
    (%146, %147)
  };
  %148(%var_2239, %var_2240) /* ty=(Tensor[(5, 60), float64], Tensor[(5, 60), bool]) */
}

def @func_1841() -> (Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(864), float64]) {
  %155 = fn () -> (Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(864), float64]) {
    %149 = cast(meta[relay.Constant][3] /* ty=Tensor[(15, 15, 7), float64] */, dtype="float64") /* ty=Tensor[(15, 15, 7), float64] */;
    %150 = cast(meta[relay.Constant][4] /* ty=Tensor[(864), float64] */, dtype="float64") /* ty=Tensor[(864), float64] */;
    %151 = reshape(%150, newshape=[6, 9, 16]) /* ty=Tensor[(6, 9, 16), float64] */;
    %152 = @func_1346(%151) /* ty=(Tensor[(6, 9, 16), float64],) */;
    %153 = exp(%149) /* ty=Tensor[(15, 15, 7), float64] */;
    %154 = %152.0;
    (%153, %154, meta[relay.Constant][4] /* ty=Tensor[(864), float64] */)
  };
  %155() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(864), float64]) */
}

def @func_11715() -> (Tensor[(10, 5, 6), bool],) {
  @func_11713() /* ty=(Tensor[(10, 5, 6), bool],) */
}

def @func_3420() -> Tensor[(5, 60), bool] {
  %156 = @func_2004() /* ty=(Tensor[(5, 60), bool],) */;
  %156.0
}

def @func_7406() -> (Tensor[(6, 9, 16), float32], Tensor[(10, 5, 6), bool], Tensor[(300), float32], Tensor[(65), bool]) {
  @func_7404() /* ty=(Tensor[(6, 9, 16), float32], Tensor[(10, 5, 6), bool], Tensor[(300), float32], Tensor[(65), bool]) */
}

def @func_5196() -> (Tensor[(5, 60), bool], Tensor[(5, 60), float64]) {
  %161 = fn () -> (Tensor[(5, 60), bool], Tensor[(5, 60), float64]) {
    %157 = @func_3404() /* ty=(Tensor[(5, 60), bool],) */;
    %158 = @func_5179() /* ty=(Tensor[(5, 60), float64],) */;
    %159 = %157.0;
    %160 = %158.0;
    (%159, %160)
  };
  %161() /* ty=(Tensor[(5, 60), bool], Tensor[(5, 60), float64]) */
}

def @func_5401() -> (Tensor[(15, 15, 7), float64], Tensor[(5, 60), float64]) {
  @func_5399() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(5, 60), float64]) */
}

def @func_10024() -> (Tensor[(15, 15, 7), float64], Tensor[(3, 4, 13), float32], Tensor[(156), float32], Tensor[(5, 60), bool], Tensor[(5, 60), float64]) {
  @func_10022() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(3, 4, 13), float32], Tensor[(156), float32], Tensor[(5, 60), bool], Tensor[(5, 60), float64]) */
}

def @func_11075(%var_11035: Tensor[(1, 840), float32]) -> (Tensor[(1, 840), float32], Tensor[(6, 20), bool], Tensor[(63), float64], Tensor[(5, 60), bool]) {
  %162 = @func_3404() /* ty=(Tensor[(5, 60), bool],) */;
  %163 = %162.0;
  %164 = cast(%var_11035, dtype="float32") /* ty=Tensor[(1, 840), float32] */;
  %165 = cast(meta[relay.Constant][5] /* ty=Tensor[(6, 20), bool] */, dtype="bool") /* ty=Tensor[(6, 20), bool] */;
  %166 = cast(%var_11035, dtype="float32") /* ty=Tensor[(1, 840), float32] */;
  %167 = cast(meta[relay.Constant][6] /* ty=Tensor[(63), float64] */, dtype="float64") /* ty=Tensor[(63), float64] */;
  %168 = reshape(%164, newshape=[420, 2]) /* ty=Tensor[(420, 2), float32] */;
  %169 = reshape(%165, newshape=[120]) /* ty=Tensor[(120), bool] */;
  %170 = reshape(%166, newshape=[420, 2]) /* ty=Tensor[(420, 2), float32] */;
  %171 = reshape(%167, newshape=[63]) /* ty=Tensor[(63), float64] */;
  %172 = @func_7873(%168, %169, %170, %171) /* ty=(Tensor[(15, 15, 7), float64], Tensor[(15, 15, 7), float64], bool, Tensor[(120), bool], Tensor[(5, 60), bool], Tensor[(63), float64], Tensor[(420, 2), float32]) */;
  %173 = %172.2;
  %174 = cast(%163, dtype="bool") /* ty=Tensor[(5, 60), bool] */;
  %175 = cast(%173, dtype="bool") /* ty=bool */;
  %176 = logical_and(%174, %175) /* ty=Tensor[(5, 60), bool] */;
  (%var_11035, meta[relay.Constant][5] /* ty=Tensor[(6, 20), bool] */, meta[relay.Constant][6] /* ty=Tensor[(63), float64] */, %176)
}

def @func_3973() -> (Tensor[(5, 60), bool], Tensor[(15, 15, 7), float64], Tensor[(5, 60), bool], Tensor[(5, 60), bool], Tensor[(120), bool], Tensor[(840), float32], Tensor[(65), bool], Tensor[(6, 9, 16), float64], Tensor[(5, 60), float64], Tensor[(5, 60), bool]) {
  @func_3971() /* ty=(Tensor[(5, 60), bool], Tensor[(15, 15, 7), float64], Tensor[(5, 60), bool], Tensor[(5, 60), bool], Tensor[(120), bool], Tensor[(840), float32], Tensor[(65), bool], Tensor[(6, 9, 16), float64], Tensor[(5, 60), float64], Tensor[(5, 60), bool]) */
}

def @func_5093(%var_5091: Tensor[(300), bool], %var_5092: Tensor[(1, 210), int8]) -> (Tensor[(6, 9, 16), float64], Tensor[(6, 9, 16), float64], Tensor[(1, 210), int8], Tensor[(300), bool], Tensor[(1, 210), int8], Tensor[(10, 5, 6), bool], Tensor[(120), bool]) {
  @func_5089(%var_5091, %var_5092) /* ty=(Tensor[(6, 9, 16), float64], Tensor[(6, 9, 16), float64], Tensor[(1, 210), int8], Tensor[(300), bool], Tensor[(1, 210), int8], Tensor[(10, 5, 6), bool], Tensor[(120), bool]) */
}

def @func_12205() -> (Tensor[(5, 60), bool],) {
  @func_12203() /* ty=(Tensor[(5, 60), bool],) */
}

def @func_11507() -> (Tensor[(15, 15, 7), float64], Tensor[(5, 60), bool]) {
  %177 = @func_4348() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(10, 30), float32]) */;
  %178 = @func_6835() /* ty=(Tensor[(5, 60), bool],) */;
  %179 = %177.0;
  %180 = %178.0;
  (%179, %180)
}

def @func_402(%var_400: bool, %var_401: Tensor[(10, 12, 1), bool]) -> (Tensor[(14, 3, 5), float64], Tensor[(210), int8], Tensor[(10, 12, ?), int64]) {
  %195 = fn (%var_325: bool, %var_326: Tensor[(10, 12, 1), bool]) -> (Tensor[(14, 3, 5), float64], Tensor[(210), int8], Tensor[(10, 12, ?), int64]) {
    %181 = cast(meta[relay.Constant][7] /* ty=Tensor[(210), int8] */, dtype="int8") /* ty=Tensor[(210), int8] */;
    %182 = cast(meta[relay.Constant][7] /* ty=Tensor[(210), int8] */, dtype="int8") /* ty=Tensor[(210), int8] */;
    %183 = reshape(%181, newshape=[14, 3, 5]) /* ty=Tensor[(14, 3, 5), int8] */;
    %184 = reshape(%182, newshape=[14, 3, 5]) /* ty=Tensor[(14, 3, 5), int8] */;
    %185 = @func_105(%183, %184) /* ty=(Tensor[(14, 3, 5), float64], Tensor[(14, 3, 5), uint64], Tensor[(14, 3, 5), uint8]) */;
    %186 = cast(%var_325, dtype="bool") /* ty=bool */;
    %187 = cast(%var_326, dtype="bool") /* ty=Tensor[(10, 12, 1), bool] */;
    %188 = logical_or(%186, %187) /* ty=Tensor[(10, 12, 1), bool] */;
    %189 = cast(%188, dtype="int64") /* ty=Tensor[(10, 12, 1), int64] */;
    %190 = shape_of(%var_326, dtype="int32") /* ty=Tensor[(3), int32] */;
    %191 = cast(%var_326, dtype="int64") /* ty=Tensor[(10, 12, 1), int64] */;
    %192 = dyn.reshape(%189, %190, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %193 = %185.0;
    %194 = add(%191, %192) /* ty=Tensor[(10, 12, ?), int64] */;
    (%193, meta[relay.Constant][7] /* ty=Tensor[(210), int8] */, %194)
  };
  %195(%var_400, %var_401) /* ty=(Tensor[(14, 3, 5), float64], Tensor[(210), int8], Tensor[(10, 12, ?), int64]) */
}

def @func_8825() -> Tensor[(5, 60), bool] {
  @func_8823() /* ty=Tensor[(5, 60), bool] */
}

def @func_5376() -> (Tensor[(65), float32], Tensor[(15, 15, 7), float64], Tensor[(300), bool]) {
  %201 = fn () -> (Tensor[(65), float32], Tensor[(15, 15, 7), float64], Tensor[(300), bool]) {
    %196 = cast(meta[relay.Constant][8] /* ty=Tensor[(300), bool] */, dtype="bool") /* ty=Tensor[(300), bool] */;
    %197 = reshape(%196, newshape=[5, 60]) /* ty=Tensor[(5, 60), bool] */;
    %198 = @func_3375(%197) /* ty=(Tensor[(5, 60), float32], Tensor[(15, 15, 7), float64]) */;
    %199 = @func_3334() /* ty=Tensor[(65), float32] */;
    %200 = %198.1;
    (%199, %200, meta[relay.Constant][8] /* ty=Tensor[(300), bool] */)
  };
  %201() /* ty=(Tensor[(65), float32], Tensor[(15, 15, 7), float64], Tensor[(300), bool]) */
}

def @func_7711() -> (Tensor[(6, 9, 16), float64],) {
  %204 = fn () -> (Tensor[(6, 9, 16), float64],) {
    %202 = @func_7057() /* ty=(Tensor[(6, 9, 16), float64],) */;
    %203 = %202.0;
    (%203,)
  };
  %204() /* ty=(Tensor[(6, 9, 16), float64],) */
}

def @func_8647(%var_8646: Tensor[(7, 2, 3), float64]) -> (Tensor[(7, 2, 3), float32],) {
  %212 = fn (%var_8626: Tensor[(7, 2, 3), float64]) -> (Tensor[(7, 2, 3), float32],) {
    %205 = cast(%var_8626, dtype="float64") /* ty=Tensor[(7, 2, 3), float64] */;
    %206 = log2(%205) /* ty=Tensor[(7, 2, 3), float64] */;
    %207 = cast(%var_8626, dtype="float32") /* ty=Tensor[(7, 2, 3), float32] */;
    %208 = shape_of(%206, dtype="int32") /* ty=Tensor[(3), int32] */;
    %209 = cast(%206, dtype="float32") /* ty=Tensor[(7, 2, 3), float32] */;
    %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %211 = add(%209, %210) /* ty=Tensor[(7, 2, 3), float32] */;
    (%211,)
  };
  %212(%var_8646) /* ty=(Tensor[(7, 2, 3), float32],) */
}

def @func_3274() -> (Tensor[(15, 15, 7), float64],) {
  %213 = @func_2088() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) */;
  %214 = %213.0;
  (%214,)
}

def @func_10762() -> (Tensor[(65), float32], Tensor[(1, 65), float64], Tensor[(840), float32], bool, Tensor[(60, 2), bool]) {
  %226 = fn () -> (Tensor[(65), float32], Tensor[(1, 65), float64], Tensor[(840), float32], bool, Tensor[(60, 2), bool]) {
    %215 = cast(meta[relay.Constant][9] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
    %216 = @func_6439() /* ty=Tensor[(65), float32] */;
    %217 = cast(%216, dtype="bool") /* ty=Tensor[(65), bool] */;
    %218 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
    %219 = cast(meta[relay.Constant][10] /* ty=Tensor[(60, 2), bool] */, dtype="bool") /* ty=Tensor[(60, 2), bool] */;
    %220 = reshape(%215, newshape=[840]) /* ty=Tensor[(840), float32] */;
    %221 = reshape(%217, newshape=[1, 65]) /* ty=Tensor[(1, 65), bool] */;
    %222 = reshape(%218, newshape=[]) /* ty=bool */;
    %223 = reshape(%219, newshape=[120]) /* ty=Tensor[(120), bool] */;
    %224 = @func_5680(%220, %221, %222, %223) /* ty=(Tensor[(840), float32], Tensor[(840), float32], Tensor[(120), bool], Tensor[(5, 60), float32], Tensor[(1, 65), float64]) */;
    %225 = %224.4;
    (%216, %225, meta[relay.Constant][9] /* ty=Tensor[(840), float32] */, False /* ty=bool */, meta[relay.Constant][10] /* ty=Tensor[(60, 2), bool] */)
  };
  %226() /* ty=(Tensor[(65), float32], Tensor[(1, 65), float64], Tensor[(840), float32], bool, Tensor[(60, 2), bool]) */
}

def @func_10405() -> Tensor[(120), bool] {
  @func_10403() /* ty=Tensor[(120), bool] */
}

def @func_12045(%var_12040: Tensor[(300), float64]) -> (Tensor[(15, 15, 7), float64], Tensor[(1, 65), bool], Tensor[(65), bool], Tensor[(5, 60), float64], Tensor[(300), float64]) {
  %227 = @func_1840() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(864), float64]) */;
  %228 = cast(meta[relay.Constant][11] /* ty=Tensor[(65), bool] */, dtype="bool") /* ty=Tensor[(65), bool] */;
  %229 = reshape(%228, newshape=[1, 65]) /* ty=Tensor[(1, 65), bool] */;
  %230 = @func_9629(%229) /* ty=(Tensor[(10, 30), float32], Tensor[(65), bool], Tensor[(420, 2), float32], Tensor[(1, 65), bool]) */;
  %231 = cast(%var_12040, dtype="float64") /* ty=Tensor[(300), float64] */;
  %232 = cast(%var_12040, dtype="float64") /* ty=Tensor[(300), float64] */;
  %233 = reshape(%231, newshape=[5, 60]) /* ty=Tensor[(5, 60), float64] */;
  %234 = reshape(%232, newshape=[5, 60]) /* ty=Tensor[(5, 60), float64] */;
  %235 = @func_2238(%233, %234) /* ty=(Tensor[(5, 60), float64], Tensor[(5, 60), bool]) */;
  %236 = %227.0;
  %237 = %230.3;
  %238 = %235.0;
  (%236, %237, meta[relay.Constant][11] /* ty=Tensor[(65), bool] */, %238, %var_12040)
}

def @func_8267() -> (Tensor[(65), float32],) {
  %239 = @func_3334() /* ty=Tensor[(65), float32] */;
  (%239,)
}

def @func_1976() -> (Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) {
  @func_1974() /* ty=(Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) */
}

def @func_5089(%var_5060: Tensor[(300), bool], %var_5061: Tensor[(1, 210), int8]) -> (Tensor[(6, 9, 16), float64], Tensor[(6, 9, 16), float64], Tensor[(1, 210), int8], Tensor[(300), bool], Tensor[(1, 210), int8], Tensor[(10, 5, 6), bool], Tensor[(120), bool]) {
  %240 = @func_2867() /* ty=(Tensor[(6, 9, 16), float64],) */;
  %241 = @func_2867() /* ty=(Tensor[(6, 9, 16), float64],) */;
  %242 = cast(%var_5060, dtype="bool") /* ty=Tensor[(300), bool] */;
  %243 = cast(%var_5061, dtype="int8") /* ty=Tensor[(1, 210), int8] */;
  %244 = reshape(%242, newshape=[5, 60]) /* ty=Tensor[(5, 60), bool] */;
  %245 = reshape(%243, newshape=[1, 210]) /* ty=Tensor[(1, 210), int8] */;
  %246 = @func_2948(%244, %245) /* ty=(Tensor[(5, 60), int8], Tensor[(14, 3, 5), uint8], Tensor[(1, 210), int8]) */;
  %247 = cast(%var_5060, dtype="float32") /* ty=Tensor[(300), float32] */;
  %248 = reshape(%247, newshape=[10, 5, 6]) /* ty=Tensor[(10, 5, 6), float32] */;
  %249 = %240.0;
  %250 = %241.0;
  %251 = %246.2;
  %252 = @func_1812(%248) /* ty=Tensor[(10, 5, 6), bool] */;
  %253 = @func_3252() /* ty=Tensor[(120), bool] */;
  (%249, %250, %251, %var_5060, %var_5061, %252, %253)
}

def @func_6818() -> (Tensor[(6, 9, 16), float64],) {
  @func_6816() /* ty=(Tensor[(6, 9, 16), float64],) */
}

def @func_8450() -> Tensor[(210), int8] {
  @func_8448() /* ty=Tensor[(210), int8] */
}

def @func_8839() -> (Tensor[(5, 60), bool],) {
  @func_8837() /* ty=(Tensor[(5, 60), bool],) */
}

def @func_4741(%var_4737: Tensor[(3, 7, 3), float64], %var_4738: Tensor[(2, 420), float32], %var_4739: bool, %var_4740: Tensor[(120), bool]) -> (Tensor[(3, 7, 3), float64], Tensor[(5, 60), bool], Tensor[(6, 9, 16), float64], Tensor[(2, 420), int64], Tensor[(5, 60), bool], Tensor[(65), bool], Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool], Tensor[(14, 3, 5), float64], bool, Tensor[(120), bool]) {
  %287 = fn (%var_4645: Tensor[(3, 7, 3), float64], %var_4655: Tensor[(2, 420), float32], %var_4733: bool, %var_4734: Tensor[(120), bool]) -> (Tensor[(3, 7, 3), float64], Tensor[(5, 60), bool], Tensor[(6, 9, 16), float64], Tensor[(2, 420), int64], Tensor[(5, 60), bool], Tensor[(65), bool], Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool], Tensor[(14, 3, 5), float64], bool, Tensor[(120), bool]) {
    %254 = cast(%var_4645, dtype="float64") /* ty=Tensor[(3, 7, 3), float64] */;
    %255 = @func_4282() /* ty=(Tensor[(6, 9, 16), float32], Tensor[(6, 9, 16), float64]) */;
    %256 = cast(meta[relay.Constant][12] /* ty=Tensor[(2, 420), float32] */, dtype="int64") /* ty=Tensor[(2, 420), int64] */;
    %257 = shape_of(%var_4655, dtype="int32") /* ty=Tensor[(2), int32] */;
    %258 = cast(%var_4655, dtype="int64") /* ty=Tensor[(2, 420), int64] */;
    %259 = dyn.reshape(%256, %257, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
    %260 = cast(%var_4655, dtype="float32") /* ty=Tensor[(2, 420), float32] */;
    %261 = reshape(%260, newshape=[840]) /* ty=Tensor[(840), float32] */;
    %262 = @func_4544(%261) /* ty=(Tensor[(5, 60), bool], Tensor[(120), bool], Tensor[(840), float32], Tensor[(65), bool], bool, Tensor[(3, 40), bool], Tensor[(5, 60), float64], Tensor[(5, 60), float32], Tensor[(5, 60), bool], Tensor[(14, 3, 5), float64], Tensor[(10, 30), float32]) */;
    %263 = %262.8;
    %264 = cast(meta[relay.Constant][13] /* ty=Tensor[(5, 60), bool] */, dtype="bool") /* ty=Tensor[(5, 60), bool] */;
    %265 = shape_of(%263, dtype="int32") /* ty=Tensor[(2), int32] */;
    %266 = cast(%263, dtype="bool") /* ty=Tensor[(5, 60), bool] */;
    %267 = dyn.reshape(%264, %265, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %268 = @func_3971() /* ty=(Tensor[(5, 60), bool], Tensor[(15, 15, 7), float64], Tensor[(5, 60), bool], Tensor[(5, 60), bool], Tensor[(120), bool], Tensor[(840), float32], Tensor[(65), bool], Tensor[(6, 9, 16), float64], Tensor[(5, 60), float64], Tensor[(5, 60), bool]) */;
    %269 = @func_3274() /* ty=(Tensor[(15, 15, 7), float64],) */;
    %270 = @func_3971() /* ty=(Tensor[(5, 60), bool], Tensor[(15, 15, 7), float64], Tensor[(5, 60), bool], Tensor[(5, 60), bool], Tensor[(120), bool], Tensor[(840), float32], Tensor[(65), bool], Tensor[(6, 9, 16), float64], Tensor[(5, 60), float64], Tensor[(5, 60), bool]) */;
    %271 = @func_3404() /* ty=(Tensor[(5, 60), bool],) */;
    %272 = cast(%var_4733, dtype="bool") /* ty=bool */;
    %273 = cast(%var_4734, dtype="bool") /* ty=Tensor[(120), bool] */;
    %274 = reshape(%272, newshape=[]) /* ty=bool */;
    %275 = reshape(%273, newshape=[10, 12, 1]) /* ty=Tensor[(10, 12, 1), bool] */;
    %276 = @func_399(%274, %275) /* ty=(Tensor[(14, 3, 5), float64], Tensor[(210), int8], Tensor[(10, 12, ?), int64]) */;
    %277 = cos(%254) /* ty=Tensor[(3, 7, 3), float64] */;
    %278 = @func_2482() /* ty=Tensor[(5, 60), bool] */;
    %279 = %255.1;
    %280 = right_shift(%258, %259) /* ty=Tensor[(2, 420), int64] */;
    %281 = greater_equal(%266, %267) /* ty=Tensor[(5, 60), bool] */;
    %282 = %268.6;
    %283 = %269.0;
    %284 = %270.7;
    %285 = %271.0;
    %286 = %276.0;
    (%277, %278, %279, %280, %281, %282, %283, %284, %285, %286, %var_4733, %var_4734)
  };
  %287(%var_4737, %var_4738, %var_4739, %var_4740) /* ty=(Tensor[(3, 7, 3), float64], Tensor[(5, 60), bool], Tensor[(6, 9, 16), float64], Tensor[(2, 420), int64], Tensor[(5, 60), bool], Tensor[(65), bool], Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool], Tensor[(14, 3, 5), float64], bool, Tensor[(120), bool]) */
}

def @func_6595() -> (Tensor[(5, 60), float64], Tensor[(5, 60), bool]) {
  @func_6593() /* ty=(Tensor[(5, 60), float64], Tensor[(5, 60), bool]) */
}

def @func_2857() -> (Tensor[(864), float64], Tensor[(10, 5, 6), bool], Tensor[(10, 30), float32]) {
  %293 = fn () -> (Tensor[(864), float64], Tensor[(10, 5, 6), bool], Tensor[(10, 30), float32]) {
    %288 = @func_1840() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(864), float64]) */;
    %289 = cast(meta[relay.Constant][14] /* ty=Tensor[(10, 30), float32] */, dtype="float32") /* ty=Tensor[(10, 30), float32] */;
    %290 = reshape(%289, newshape=[10, 5, 6]) /* ty=Tensor[(10, 5, 6), float32] */;
    %291 = %288.2;
    %292 = @func_1812(%290) /* ty=Tensor[(10, 5, 6), bool] */;
    (%291, %292, meta[relay.Constant][14] /* ty=Tensor[(10, 30), float32] */)
  };
  %293() /* ty=(Tensor[(864), float64], Tensor[(10, 5, 6), bool], Tensor[(10, 30), float32]) */
}

def @func_7343(%var_7342: Tensor[(5, 60), float64]) -> (Tensor[(5, 60), int16],) {
  %301 = fn (%var_7319: Tensor[(5, 60), float64]) -> (Tensor[(5, 60), int16],) {
    %294 = @func_4785() /* ty=(Tensor[(5, 60), float64],) */;
    %295 = %294.0;
    %296 = cast(%var_7319, dtype="int16") /* ty=Tensor[(5, 60), int16] */;
    %297 = shape_of(%295, dtype="int32") /* ty=Tensor[(2), int32] */;
    %298 = cast(%295, dtype="int16") /* ty=Tensor[(5, 60), int16] */;
    %299 = dyn.reshape(%296, %297, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %300 = bitwise_and(%298, %299) /* ty=Tensor[(5, 60), int16] */;
    (%300,)
  };
  %301(%var_7342) /* ty=(Tensor[(5, 60), int16],) */
}

def @func_11346() -> (Tensor[(5, 60), float64], Tensor[(5, 60), float64], Tensor[(65), bool], Tensor[(5, 60), float64]) {
  @func_11344() /* ty=(Tensor[(5, 60), float64], Tensor[(5, 60), float64], Tensor[(65), bool], Tensor[(5, 60), float64]) */
}

def @func_10041(%var_10031: Tensor[(840), float32], %var_10033: bool, %var_10034: Tensor[(120), bool]) -> (Tensor[(10, 30), float32], Tensor[(6, 9, 16), float64], Tensor[(864), float64], Tensor[(1, 65), float64], Tensor[(840), float32], Tensor[(65), bool], bool, Tensor[(120), bool]) {
  %302 = @func_2856() /* ty=(Tensor[(864), float64], Tensor[(10, 5, 6), bool], Tensor[(10, 30), float32]) */;
  %303 = cast(meta[relay.Constant][15] /* ty=Tensor[(864), float64] */, dtype="float64") /* ty=Tensor[(864), float64] */;
  %304 = reshape(%303, newshape=[6, 9, 16]) /* ty=Tensor[(6, 9, 16), float64] */;
  %305 = @func_1346(%304) /* ty=(Tensor[(6, 9, 16), float64],) */;
  %306 = cast(%var_10031, dtype="float32") /* ty=Tensor[(840), float32] */;
  %307 = cast(meta[relay.Constant][16] /* ty=Tensor[(65), bool] */, dtype="bool") /* ty=Tensor[(65), bool] */;
  %308 = cast(%var_10033, dtype="bool") /* ty=bool */;
  %309 = cast(%var_10034, dtype="bool") /* ty=Tensor[(120), bool] */;
  %310 = reshape(%306, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %311 = reshape(%307, newshape=[1, 65]) /* ty=Tensor[(1, 65), bool] */;
  %312 = reshape(%308, newshape=[]) /* ty=bool */;
  %313 = reshape(%309, newshape=[120]) /* ty=Tensor[(120), bool] */;
  %314 = @func_5680(%310, %311, %312, %313) /* ty=(Tensor[(840), float32], Tensor[(840), float32], Tensor[(120), bool], Tensor[(5, 60), float32], Tensor[(1, 65), float64]) */;
  %315 = %302.2;
  %316 = %305.0;
  %317 = %314.4;
  (%315, %316, meta[relay.Constant][15] /* ty=Tensor[(864), float64] */, %317, %var_10031, meta[relay.Constant][16] /* ty=Tensor[(65), bool] */, %var_10033, %var_10034)
}

def @func_8969() -> Tensor[(5, 60), bool] {
  %318 = @func_2475() /* ty=(Tensor[(5, 60), bool],) */;
  %318.0
}

def @func_2088() -> (Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) {
  %319 = @func_1840() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(864), float64]) */;
  %320 = @func_1840() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(864), float64]) */;
  %321 = %320.1;
  %322 = cast(%321, dtype="float64") /* ty=Tensor[(6, 9, 16), float64] */;
  %323 = reshape(%322, newshape=[6, 9, 16]) /* ty=Tensor[(6, 9, 16), float64] */;
  %324 = @func_1346(%323) /* ty=(Tensor[(6, 9, 16), float64],) */;
  %325 = @func_2004() /* ty=(Tensor[(5, 60), bool],) */;
  %326 = %319.0;
  %327 = %324.0;
  %328 = %325.0;
  (%326, %321, %327, %328)
}

def @func_8797() -> (Tensor[(5, 60), bool],) {
  %331 = fn () -> (Tensor[(5, 60), bool],) {
    %329 = @func_6280() /* ty=(Tensor[(5, 60), bool], Tensor[(6, 9, 16), float64], Tensor[(5, 60), float64]) */;
    %330 = %329.0;
    (%330,)
  };
  %331() /* ty=(Tensor[(5, 60), bool],) */
}

def @func_7609() -> (Tensor[(65), float32], Tensor[(300, 1), float32]) {
  %332 = @func_4151() /* ty=(Tensor[(6, 9, 16), float32], Tensor[(5, 60), uint64], Tensor[(300, 1), float32], Tensor[(1, 210), int8], Tensor[(5, 42), int8]) */;
  %333 = @func_6439() /* ty=Tensor[(65), float32] */;
  %334 = %332.2;
  (%333, %334)
}

def @func_2370(%var_2369: Tensor[(65), bool]) -> (Tensor[(864), float64], Tensor[(1, 5, 13), bool], Tensor[(65), bool]) {
  %341 = fn (%var_2357: Tensor[(65), bool]) -> (Tensor[(864), float64], Tensor[(1, 5, 13), bool], Tensor[(65), bool]) {
    %335 = @func_1840() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(864), float64]) */;
    %336 = cast(%var_2357, dtype="bool") /* ty=Tensor[(65), bool] */;
    %337 = reshape(%336, newshape=[1, 5, 13]) /* ty=Tensor[(1, 5, 13), bool] */;
    %338 = @func_459(%337) /* ty=(Tensor[(1, 5, 13), bool],) */;
    %339 = %335.2;
    %340 = %338.0;
    (%339, %340, %var_2357)
  };
  %341(%var_2369) /* ty=(Tensor[(864), float64], Tensor[(1, 5, 13), bool], Tensor[(65), bool]) */
}

def @func_11638() -> (Tensor[(5, 60), bool], Tensor[(6, 9, 16), float64], Tensor[(10, 30), float32]) {
  %342 = @func_2475() /* ty=(Tensor[(5, 60), bool],) */;
  %343 = @func_7710() /* ty=(Tensor[(6, 9, 16), float64],) */;
  %344 = @func_2856() /* ty=(Tensor[(864), float64], Tensor[(10, 5, 6), bool], Tensor[(10, 30), float32]) */;
  %345 = %342.0;
  %346 = %343.0;
  %347 = %344.2;
  (%345, %346, %347)
}

def @func_2090() -> (Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) {
  @func_2088() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) */
}

def @func_5761() -> (Tensor[(5, 60), float64],) {
  %352 = fn () -> (Tensor[(5, 60), float64],) {
    %348 = @func_3491() /* ty=(Tensor[(5, 60), float32],) */;
    %349 = %348.0;
    %350 = cast(%349, dtype="float64") /* ty=Tensor[(5, 60), float64] */;
    %351 = sin(%350) /* ty=Tensor[(5, 60), float64] */;
    (%351,)
  };
  %352() /* ty=(Tensor[(5, 60), float64],) */
}

def @func_9069() -> (Tensor[(15, 15, 7), float64],) {
  %353 = @func_4026() /* ty=Tensor[(15, 15, 7), float64] */;
  (%353,)
}

def @func_10926(%var_10919: Tensor[(400), float64]) -> (Tensor[(65), float32], Tensor[(16, 5, 5), float64], Tensor[(400), float64]) {
  %354 = cast(%var_10919, dtype="float64") /* ty=Tensor[(400), float64] */;
  %355 = cast(%var_10919, dtype="float64") /* ty=Tensor[(400), float64] */;
  %356 = reshape(%354, newshape=[16, 5, 5]) /* ty=Tensor[(16, 5, 5), float64] */;
  %357 = reshape(%355, newshape=[16, 5, 5]) /* ty=Tensor[(16, 5, 5), float64] */;
  %358 = @func_8255(%356, %357) /* ty=(Tensor[(16, 5, 5), float64], Tensor[(16, 5, 5), float64]) */;
  %359 = @func_6439() /* ty=Tensor[(65), float32] */;
  %360 = %358.0;
  (%359, %360, %var_10919)
}

def @func_5465() -> (Tensor[(5, 60), bool], Tensor[(10, 30), float32]) {
  @func_5463() /* ty=(Tensor[(5, 60), bool], Tensor[(10, 30), float32]) */
}

def @func_1974() -> (Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) {
  %361 = @func_1840() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(864), float64]) */;
  %362 = cast(meta[relay.Constant][17] /* ty=Tensor[(5, 60), float32] */, dtype="float32") /* ty=Tensor[(5, 60), float32] */;
  %363 = reshape(%362, newshape=[10, 5, 6]) /* ty=Tensor[(10, 5, 6), float32] */;
  %364 = @func_1812(%363) /* ty=Tensor[(10, 5, 6), bool] */;
  %365 = cast(%364, dtype="bool") /* ty=Tensor[(10, 5, 6), bool] */;
  %366 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(5, 60), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %367 = cast(meta[relay.Constant][17] /* ty=Tensor[(5, 60), float32] */, dtype="bool") /* ty=Tensor[(5, 60), bool] */;
  %368 = dyn.reshape(%365, %366, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %369 = %361.1;
  %370 = equal(%367, %368) /* ty=Tensor[(5, 60), bool] */;
  (%369, %370)
}

def @func_7146(%var_7144: Tensor[(3, 4, 13), float32]) -> (Tensor[(3, 4, 13), float32],) {
  @func_7143(%var_7144) /* ty=(Tensor[(3, 4, 13), float32],) */
}

def @func_9583() -> Tensor[(5, 60), bool] {
  @func_2482() /* ty=Tensor[(5, 60), bool] */
}

def @func_4815() -> (Tensor[(6, 9, 16), float64], Tensor[(14, 3, 5), uint8], Tensor[(210), int8]) {
  @func_4813() /* ty=(Tensor[(6, 9, 16), float64], Tensor[(14, 3, 5), uint8], Tensor[(210), int8]) */
}

def @func_7878(%var_7874: Tensor[(420, 2), float32], %var_7875: Tensor[(120), bool], %var_7876: Tensor[(420, 2), float32], %var_7877: Tensor[(63), float64]) -> (Tensor[(15, 15, 7), float64], Tensor[(15, 15, 7), float64], bool, Tensor[(120), bool], Tensor[(5, 60), bool], Tensor[(63), float64], Tensor[(420, 2), float32]) {
  %403 = fn (%var_7830: Tensor[(420, 2), float32], %var_7832: Tensor[(120), bool], %var_7836: Tensor[(420, 2), float32], %var_7841: Tensor[(63), float64]) -> (Tensor[(15, 15, 7), float64], Tensor[(15, 15, 7), float64], bool, Tensor[(120), bool], Tensor[(5, 60), bool], Tensor[(63), float64], Tensor[(420, 2), float32]) {
    %371 = @func_4086() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(5, 60), float64]) */;
    %372 = cast(%var_7830, dtype="float32") /* ty=Tensor[(420, 2), float32] */;
    %373 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
    %374 = cast(%var_7832, dtype="bool") /* ty=Tensor[(120), bool] */;
    %375 = reshape(%372, newshape=[840]) /* ty=Tensor[(840), float32] */;
    %376 = reshape(%373, newshape=[]) /* ty=bool */;
    %377 = reshape(%374, newshape=[60, 2]) /* ty=Tensor[(60, 2), bool] */;
    %378 = @func_5538(%375, %376, %377) /* ty=(Tensor[(5, 60), bool], Tensor[(15, 15, 7), float64], Tensor[(840), float32], Tensor[(840), float32], Tensor[(65), bool], Tensor[(60, 2), int8], Tensor[(5, 60), bool]) */;
    %379 = cast(%var_7841, dtype="float64") /* ty=Tensor[(63), float64] */;
    %380 = cast(%var_7830, dtype="float32") /* ty=Tensor[(420, 2), float32] */;
    %381 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
    %382 = cast(%var_7832, dtype="bool") /* ty=Tensor[(120), bool] */;
    %383 = reshape(%379, newshape=[3, 7, 3]) /* ty=Tensor[(3, 7, 3), float64] */;
    %384 = reshape(%380, newshape=[2, 420]) /* ty=Tensor[(2, 420), float32] */;
    %385 = reshape(%381, newshape=[]) /* ty=bool */;
    %386 = reshape(%382, newshape=[120]) /* ty=Tensor[(120), bool] */;
    %387 = @func_4736(%383, %384, %385, %386) /* ty=(Tensor[(3, 7, 3), float64], Tensor[(5, 60), bool], Tensor[(6, 9, 16), float64], Tensor[(2, 420), int64], Tensor[(5, 60), bool], Tensor[(65), bool], Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool], Tensor[(14, 3, 5), float64], bool, Tensor[(120), bool]) */;
    %388 = cast(%var_7836, dtype="uint8") /* ty=Tensor[(420, 2), uint8] */;
    %389 = shape_of(%var_7830, dtype="int32") /* ty=Tensor[(2), int32] */;
    %390 = cast(%var_7830, dtype="uint8") /* ty=Tensor[(420, 2), uint8] */;
    %391 = dyn.reshape(%388, %389, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %392 = left_shift(%390, %391) /* ty=Tensor[(420, 2), uint8] */;
    %393 = cast(%392, dtype="float64") /* ty=Tensor[(420, 2), float64] */;
    %394 = shape_of(%var_7836, dtype="int32") /* ty=Tensor[(2), int32] */;
    %395 = cast(%var_7836, dtype="float64") /* ty=Tensor[(420, 2), float64] */;
    %396 = dyn.reshape(%393, %394, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %397 = floor_mod(%395, %396) /* ty=Tensor[(420, 2), float64] */;
    %398 = cast(%397, dtype="float32") /* ty=Tensor[(420, 2), float32] */;
    %399 = %371.0;
    %400 = %378.1;
    %401 = %387.1;
    %402 = cos(%398) /* ty=Tensor[(420, 2), float32] */;
    (%399, %400, True /* ty=bool */, %var_7832, %401, %var_7841, %402)
  };
  %403(%var_7874, %var_7875, %var_7876, %var_7877) /* ty=(Tensor[(15, 15, 7), float64], Tensor[(15, 15, 7), float64], bool, Tensor[(120), bool], Tensor[(5, 60), bool], Tensor[(63), float64], Tensor[(420, 2), float32]) */
}

def @func_2869() -> (Tensor[(6, 9, 16), float64],) {
  @func_2867() /* ty=(Tensor[(6, 9, 16), float64],) */
}

def @func_6816() -> (Tensor[(6, 9, 16), float64],) {
  %404 = @func_1840() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(864), float64]) */;
  %405 = %404.1;
  (%405,)
}

def @func_11254(%var_11253: Tensor[(2, 2, 16), float64]) -> (Tensor[(2, 2, 16), bool], Tensor[(5, 60), float64]) {
  %418 = fn (%var_11222: Tensor[(2, 2, 16), float64]) -> (Tensor[(2, 2, 16), bool], Tensor[(5, 60), float64]) {
    %406 = cast(meta[relay.Constant][18] /* ty=Tensor[(2, 2, 16), float64] */, dtype="float64") /* ty=Tensor[(2, 2, 16), float64] */;
    %407 = shape_of(%var_11222, dtype="int32") /* ty=Tensor[(3), int32] */;
    %408 = cast(%var_11222, dtype="float64") /* ty=Tensor[(2, 2, 16), float64] */;
    %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %410 = divide(%408, %409) /* ty=Tensor[(2, 2, 16), float64] */;
    %411 = cast(%410, dtype="bool") /* ty=Tensor[(2, 2, 16), bool] */;
    %412 = shape_of(%var_11222, dtype="int32") /* ty=Tensor[(3), int32] */;
    %413 = cast(%var_11222, dtype="bool") /* ty=Tensor[(2, 2, 16), bool] */;
    %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %415 = @func_4413() /* ty=(Tensor[(6, 9, 16), float32], Tensor[(5, 60), float64]) */;
    %416 = equal(%413, %414) /* ty=Tensor[(2, 2, 16), bool] */;
    %417 = %415.1;
    (%416, %417)
  };
  %418(%var_11253) /* ty=(Tensor[(2, 2, 16), bool], Tensor[(5, 60), float64]) */
}

def @func_5543(%var_5540: Tensor[(840), float32], %var_5541: bool, %var_5542: Tensor[(60, 2), bool]) -> (Tensor[(5, 60), bool], Tensor[(15, 15, 7), float64], Tensor[(840), float32], Tensor[(840), float32], Tensor[(65), bool], Tensor[(60, 2), int8], Tensor[(5, 60), bool]) {
  @func_5538(%var_5540, %var_5541, %var_5542) /* ty=(Tensor[(5, 60), bool], Tensor[(15, 15, 7), float64], Tensor[(840), float32], Tensor[(840), float32], Tensor[(65), bool], Tensor[(60, 2), int8], Tensor[(5, 60), bool]) */
}

def @func_2482() -> Tensor[(5, 60), bool] {
  %419 = @func_2475() /* ty=(Tensor[(5, 60), bool],) */;
  %419.0
}

def @func_3986() -> Tensor[(5, 60), float64] {
  @func_3984() /* ty=Tensor[(5, 60), float64] */
}

def @func_8427() -> (Tensor[(5, 60), bool], Tensor[(65), float32], Tensor[(15, 15, 7), float64], Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(15, 15, 7), float64], Tensor[(5, 60), bool], Tensor[(5, 60), bool]) {
  %420 = @func_5997() /* ty=(Tensor[(5, 60), bool],) */;
  %421 = %420.0;
  %422 = cast(%421, dtype="bool") /* ty=Tensor[(5, 60), bool] */;
  %423 = reshape(%422, newshape=[5, 60]) /* ty=Tensor[(5, 60), bool] */;
  %424 = @func_3375(%423) /* ty=(Tensor[(5, 60), float32], Tensor[(15, 15, 7), float64]) */;
  %425 = @func_4086() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(5, 60), float64]) */;
  %426 = @func_4813() /* ty=(Tensor[(6, 9, 16), float64], Tensor[(14, 3, 5), uint8], Tensor[(210), int8]) */;
  %427 = cast(%421, dtype="bool") /* ty=Tensor[(5, 60), bool] */;
  %428 = reshape(%427, newshape=[5, 60]) /* ty=Tensor[(5, 60), bool] */;
  %429 = @func_3375(%428) /* ty=(Tensor[(5, 60), float32], Tensor[(15, 15, 7), float64]) */;
  %430 = @func_5997() /* ty=(Tensor[(5, 60), bool],) */;
  %431 = @func_2004() /* ty=(Tensor[(5, 60), bool],) */;
  %432 = @func_7724() /* ty=Tensor[(65), float32] */;
  %433 = %424.1;
  %434 = %425.0;
  %435 = %426.0;
  %436 = %429.1;
  %437 = %430.0;
  %438 = %431.0;
  (%421, %432, %433, %434, %435, %436, %437, %438)
}

def @func_12203() -> (Tensor[(5, 60), bool],) {
  %439 = @func_3971() /* ty=(Tensor[(5, 60), bool], Tensor[(15, 15, 7), float64], Tensor[(5, 60), bool], Tensor[(5, 60), bool], Tensor[(120), bool], Tensor[(840), float32], Tensor[(65), bool], Tensor[(6, 9, 16), float64], Tensor[(5, 60), float64], Tensor[(5, 60), bool]) */;
  %440 = %439.0;
  (%440,)
}

def @func_5893() -> Tensor[(5, 60), float64] {
  @func_5891() /* ty=Tensor[(5, 60), float64] */
}

def @func_7128(%var_7125: Tensor[(10, 30), float32], %var_7126: Tensor[(10, 30), int16], %var_7127: bool) -> (Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool], Tensor[(10, 30), bool], Tensor[(15, 15, 7), float64], Tensor[(840), float32], bool, Tensor[(120), bool]) {
  @func_7123(%var_7125, %var_7126, %var_7127) /* ty=(Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool], Tensor[(10, 30), bool], Tensor[(15, 15, 7), float64], Tensor[(840), float32], bool, Tensor[(120), bool]) */
}

def @func_2459() -> (Tensor[(65), bool],) {
  %443 = fn () -> (Tensor[(65), bool],) {
    %441 = @func_2428() /* ty=(Tensor[(14, 1, 13), bool], Tensor[(6, 9, 16), float64], Tensor[(120), bool], Tensor[(840), float32], Tensor[(65), bool], Tensor[(120), bool], Tensor[(6, 9, 16), float64]) */;
    %442 = %441.4;
    (%442,)
  };
  %443() /* ty=(Tensor[(65), bool],) */
}

def @func_7790() -> (Tensor[(5, 60), float32], Tensor[(5, 60), bool], Tensor[(15, 15, 7), float64]) {
  @func_7788() /* ty=(Tensor[(5, 60), float32], Tensor[(5, 60), bool], Tensor[(15, 15, 7), float64]) */
}

def @func_8050() -> (Tensor[(210), int8],) {
  %446 = fn () -> (Tensor[(210), int8],) {
    %444 = @func_4813() /* ty=(Tensor[(6, 9, 16), float64], Tensor[(14, 3, 5), uint8], Tensor[(210), int8]) */;
    %445 = %444.2;
    (%445,)
  };
  %446() /* ty=(Tensor[(210), int8],) */
}

def @func_4027() -> Tensor[(15, 15, 7), float64] {
  %448 = fn () -> Tensor[(15, 15, 7), float64] {
    %447 = @func_2088() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) */;
    %447.0
  };
  %448() /* ty=Tensor[(15, 15, 7), float64] */
}

def @func_7588() -> (Tensor[(5, 60), bool], Tensor[(5, 60), bool], Tensor[(10, 30), float32], Tensor[(6, 9, 16), float32]) {
  @func_7586() /* ty=(Tensor[(5, 60), bool], Tensor[(5, 60), bool], Tensor[(10, 30), float32], Tensor[(6, 9, 16), float32]) */
}

def @func_12015(%var_12013: Tensor[(990), uint16], %var_12014: Tensor[(65), float32]) -> (Tensor[(120), bool], Tensor[(300), float32], bool, Tensor[(5, 60), float64], Tensor[(990), uint16], Tensor[(65), float32], Tensor[(5, 60), float32]) {
  %462 = fn (%var_11988: Tensor[(990), uint16], %var_11989: Tensor[(65), float32]) -> (Tensor[(120), bool], Tensor[(300), float32], bool, Tensor[(5, 60), float64], Tensor[(990), uint16], Tensor[(65), float32], Tensor[(5, 60), float32]) {
    %449 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
    %450 = reshape(%449, newshape=[]) /* ty=bool */;
    %451 = @func_10377(%450) /* ty=(Tensor[(5, 42), int8], Tensor[(5, 60), bool], Tensor[(300), float32], bool, Tensor[(5, 60), float64], Tensor[(15, 15, 7), int64], Tensor[(1575), float64]) */;
    %452 = cast(%var_11988, dtype="uint16") /* ty=Tensor[(990), uint16] */;
    %453 = cast(%var_11989, dtype="float32") /* ty=Tensor[(65), float32] */;
    %454 = reshape(%452, newshape=[990]) /* ty=Tensor[(990), uint16] */;
    %455 = reshape(%453, newshape=[65]) /* ty=Tensor[(65), float32] */;
    %456 = @func_10293(%454, %455) /* ty=(Tensor[(5, 60), bool], Tensor[(990), uint16], Tensor[(65), float32], Tensor[(5, 60), float64]) */;
    %457 = @func_10435() /* ty=(Tensor[(5, 60), float32],) */;
    %458 = @func_10403() /* ty=Tensor[(120), bool] */;
    %459 = %451.2;
    %460 = %456.3;
    %461 = %457.0;
    (%458, %459, False /* ty=bool */, %460, %var_11988, %var_11989, %461)
  };
  %462(%var_12013, %var_12014) /* ty=(Tensor[(120), bool], Tensor[(300), float32], bool, Tensor[(5, 60), float64], Tensor[(990), uint16], Tensor[(65), float32], Tensor[(5, 60), float32]) */
}

def @func_9794() -> (Tensor[(5, 60), bool],) {
  @func_9792() /* ty=(Tensor[(5, 60), bool],) */
}

def @func_11640() -> (Tensor[(5, 60), bool], Tensor[(6, 9, 16), float64], Tensor[(10, 30), float32]) {
  @func_11638() /* ty=(Tensor[(5, 60), bool], Tensor[(6, 9, 16), float64], Tensor[(10, 30), float32]) */
}

def @func_12190() -> Tensor[(5, 60), float32] {
  %464 = fn () -> Tensor[(5, 60), float32] {
    %463 = @func_7489() /* ty=(Tensor[(5, 60), int16], Tensor[(5, 60), float32], Tensor[(6, 9, 16), float64]) */;
    %463.1
  };
  %464() /* ty=Tensor[(5, 60), float32] */
}

def @func_12081() -> Tensor[(5, 60), bool] {
  @func_12079() /* ty=Tensor[(5, 60), bool] */
}

def @func_8872() -> (Tensor[(5, 60), bool],) {
  %465 = @func_8796() /* ty=(Tensor[(5, 60), bool],) */;
  %466 = %465.0;
  (%466,)
}

def @func_3984() -> Tensor[(5, 60), float64] {
  @func_2179() /* ty=Tensor[(5, 60), float64] */
}

def @func_8076() -> Tensor[(15, 15, 7), float64] {
  @func_8074() /* ty=Tensor[(15, 15, 7), float64] */
}

def @func_3406() -> (Tensor[(5, 60), bool],) {
  @func_3404() /* ty=(Tensor[(5, 60), bool],) */
}

def @func_10416() -> (Tensor[(5, 60), bool],) {
  %469 = fn () -> (Tensor[(5, 60), bool],) {
    %467 = @func_9489() /* ty=(Tensor[(5, 60), bool],) */;
    %468 = %467.0;
    (%468,)
  };
  %469() /* ty=(Tensor[(5, 60), bool],) */
}

def @func_10436() -> (Tensor[(5, 60), float32],) {
  %472 = fn () -> (Tensor[(5, 60), float32],) {
    %470 = @func_6186() /* ty=(Tensor[(5, 60), float32], Tensor[(15, 15, 7), float64]) */;
    %471 = %470.0;
    (%471,)
  };
  %472() /* ty=(Tensor[(5, 60), float32],) */
}

def @func_11162() -> (Tensor[(864), float64], Tensor[(5, 60), bool]) {
  %473 = @func_5834() /* ty=(Tensor[(864), float64], Tensor[(864), float64], Tensor[(5, 60), float64], Tensor[(864), float64]) */;
  %474 = @func_10502() /* ty=(Tensor[(5, 60), bool],) */;
  %475 = %473.0;
  %476 = %474.0;
  (%475, %476)
}

def @func_2484() -> Tensor[(5, 60), bool] {
  @func_2482() /* ty=Tensor[(5, 60), bool] */
}

def @func_10379(%var_10378: bool) -> (Tensor[(5, 42), int8], Tensor[(5, 60), bool], Tensor[(300), float32], bool, Tensor[(5, 60), float64], Tensor[(15, 15, 7), int64], Tensor[(1575), float64]) {
  %491 = fn (%var_10342: bool) -> (Tensor[(5, 42), int8], Tensor[(5, 60), bool], Tensor[(300), float32], bool, Tensor[(5, 60), float64], Tensor[(15, 15, 7), int64], Tensor[(1575), float64]) {
    %477 = @func_4151() /* ty=(Tensor[(6, 9, 16), float32], Tensor[(5, 60), uint64], Tensor[(300, 1), float32], Tensor[(1, 210), int8], Tensor[(5, 42), int8]) */;
    %478 = cast(meta[relay.Constant][19] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
    %479 = cast(meta[relay.Constant][19] /* ty=Tensor[(300), float32] */, dtype="int16") /* ty=Tensor[(300), int16] */;
    %480 = cast(%var_10342, dtype="bool") /* ty=bool */;
    %481 = reshape(%478, newshape=[10, 30]) /* ty=Tensor[(10, 30), float32] */;
    %482 = reshape(%479, newshape=[10, 30]) /* ty=Tensor[(10, 30), int16] */;
    %483 = reshape(%480, newshape=[]) /* ty=bool */;
    %484 = @func_7123(%481, %482, %483) /* ty=(Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool], Tensor[(10, 30), bool], Tensor[(15, 15, 7), float64], Tensor[(840), float32], bool, Tensor[(120), bool]) */;
    %485 = cast(meta[relay.Constant][20] /* ty=Tensor[(1575), float64] */, dtype="float64") /* ty=Tensor[(1575), float64] */;
    %486 = reshape(%485, newshape=[15, 15, 7]) /* ty=Tensor[(15, 15, 7), float64] */;
    %487 = %477.4;
    %488 = %484.1;
    %489 = @func_5891() /* ty=Tensor[(5, 60), float64] */;
    %490 = @func_4632(%486) /* ty=Tensor[(15, 15, 7), int64] */;
    (%487, %488, meta[relay.Constant][19] /* ty=Tensor[(300), float32] */, %var_10342, %489, %490, meta[relay.Constant][20] /* ty=Tensor[(1575), float64] */)
  };
  %491(%var_10378) /* ty=(Tensor[(5, 42), int8], Tensor[(5, 60), bool], Tensor[(300), float32], bool, Tensor[(5, 60), float64], Tensor[(15, 15, 7), int64], Tensor[(1575), float64]) */
}

def @func_6744(%var_6742: Tensor[(2, 420), float32]) -> (Tensor[(10, 30), float32], Tensor[(840), float32], Tensor[(2, 420), float32], Tensor[(65), bool]) {
  @func_6741(%var_6742) /* ty=(Tensor[(10, 30), float32], Tensor[(840), float32], Tensor[(2, 420), float32], Tensor[(65), bool]) */
}

def @func_6777() -> Tensor[(15, 15, 7), float64] {
  @func_6775() /* ty=Tensor[(15, 15, 7), float64] */
}

def @func_11885(%var_11882: Tensor[(5, 42), int8], %var_11883: Tensor[(840), float32], %var_11884: Tensor[(3, 40), bool]) -> (Tensor[(6, 9, 16), float64], Tensor[(10, 5, 6), bool], Tensor[(300), bool], Tensor[(15, 15, 7), float64], Tensor[(1, 210), int8], Tensor[(5, 42), int8], Tensor[(784), uint8], Tensor[(63), float64], Tensor[(840), float32], bool, Tensor[(1, 65), float64], Tensor[(3, 40), bool], Tensor[(6, 9, 16), float64], Tensor[(210), int8], Tensor[(65), float32]) {
  %529 = fn (%var_11803: Tensor[(5, 42), int8], %var_11840: Tensor[(840), float32], %var_11853: Tensor[(3, 40), bool]) -> (Tensor[(6, 9, 16), float64], Tensor[(10, 5, 6), bool], Tensor[(300), bool], Tensor[(15, 15, 7), float64], Tensor[(1, 210), int8], Tensor[(5, 42), int8], Tensor[(784), uint8], Tensor[(63), float64], Tensor[(840), float32], bool, Tensor[(1, 65), float64], Tensor[(3, 40), bool], Tensor[(6, 9, 16), float64], Tensor[(210), int8], Tensor[(65), float32]) {
    %492 = @func_7710() /* ty=(Tensor[(6, 9, 16), float64],) */;
    %493 = cast(meta[relay.Constant][21] /* ty=Tensor[(300), bool] */, dtype="bool") /* ty=Tensor[(300), bool] */;
    %494 = reshape(%493, newshape=[5, 60]) /* ty=Tensor[(5, 60), bool] */;
    %495 = @func_7233(%494) /* ty=(Tensor[(5, 60), bool], Tensor[(5, 60), float64], Tensor[(65), bool], Tensor[(10, 5, 6), bool], Tensor[(6, 9, 16), float64]) */;
    %496 = %495.3;
    %497 = cast(%496, dtype="bool") /* ty=Tensor[(10, 5, 6), bool] */;
    %498 = cast(%var_11803, dtype="int8") /* ty=Tensor[(5, 42), int8] */;
    %499 = reshape(%497, newshape=[300]) /* ty=Tensor[(300), bool] */;
    %500 = reshape(%498, newshape=[1, 210]) /* ty=Tensor[(1, 210), int8] */;
    %501 = @func_5089(%499, %500) /* ty=(Tensor[(6, 9, 16), float64], Tensor[(6, 9, 16), float64], Tensor[(1, 210), int8], Tensor[(300), bool], Tensor[(1, 210), int8], Tensor[(10, 5, 6), bool], Tensor[(120), bool]) */;
    %502 = cast(meta[relay.Constant][22] /* ty=Tensor[(63), float64] */, dtype="float64") /* ty=Tensor[(63), float64] */;
    %503 = cast(%var_11840, dtype="float32") /* ty=Tensor[(840), float32] */;
    %504 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
    %505 = reshape(%502, newshape=[63]) /* ty=Tensor[(63), float64] */;
    %506 = reshape(%503, newshape=[840]) /* ty=Tensor[(840), float32] */;
    %507 = reshape(%504, newshape=[]) /* ty=bool */;
    %508 = @func_10670(%505, %506, %507) /* ty=(Tensor[(5, 60), float64], Tensor[(5, 60), bool], Tensor[(3, 7, 3), float64], Tensor[(63), float64], Tensor[(840), float32], bool, Tensor[(60, 2), bool], Tensor[(16, 7, 7), bool], Tensor[(784), uint8]) */;
    %509 = cast(%var_11840, dtype="float32") /* ty=Tensor[(840), float32] */;
    %510 = cast(meta[relay.Constant][23] /* ty=Tensor[(65), bool] */, dtype="bool") /* ty=Tensor[(65), bool] */;
    %511 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
    %512 = cast(%var_11853, dtype="bool") /* ty=Tensor[(3, 40), bool] */;
    %513 = reshape(%509, newshape=[840]) /* ty=Tensor[(840), float32] */;
    %514 = reshape(%510, newshape=[1, 65]) /* ty=Tensor[(1, 65), bool] */;
    %515 = reshape(%511, newshape=[]) /* ty=bool */;
    %516 = reshape(%512, newshape=[120]) /* ty=Tensor[(120), bool] */;
    %517 = @func_5680(%513, %514, %515, %516) /* ty=(Tensor[(840), float32], Tensor[(840), float32], Tensor[(120), bool], Tensor[(5, 60), float32], Tensor[(1, 65), float64]) */;
    %518 = @func_2088() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) */;
    %519 = @func_4813() /* ty=(Tensor[(6, 9, 16), float64], Tensor[(14, 3, 5), uint8], Tensor[(210), int8]) */;
    %520 = cast(meta[relay.Constant][23] /* ty=Tensor[(65), bool] */, dtype="float32") /* ty=Tensor[(65), float32] */;
    %521 = %492.0;
    %522 = @func_4026() /* ty=Tensor[(15, 15, 7), float64] */;
    %523 = %501.4;
    %524 = %508.8;
    %525 = %517.4;
    %526 = %518.2;
    %527 = %519.2;
    %528 = cosh(%520) /* ty=Tensor[(65), float32] */;
    (%521, %496, meta[relay.Constant][21] /* ty=Tensor[(300), bool] */, %522, %523, %var_11803, %524, meta[relay.Constant][22] /* ty=Tensor[(63), float64] */, %var_11840, True /* ty=bool */, %525, %var_11853, %526, %527, %528)
  };
  %529(%var_11882, %var_11883, %var_11884) /* ty=(Tensor[(6, 9, 16), float64], Tensor[(10, 5, 6), bool], Tensor[(300), bool], Tensor[(15, 15, 7), float64], Tensor[(1, 210), int8], Tensor[(5, 42), int8], Tensor[(784), uint8], Tensor[(63), float64], Tensor[(840), float32], bool, Tensor[(1, 65), float64], Tensor[(3, 40), bool], Tensor[(6, 9, 16), float64], Tensor[(210), int8], Tensor[(65), float32]) */
}

def @func_7490() -> (Tensor[(5, 60), int16], Tensor[(5, 60), float32], Tensor[(6, 9, 16), float64]) {
  %539 = fn () -> (Tensor[(5, 60), int16], Tensor[(5, 60), float32], Tensor[(6, 9, 16), float64]) {
    %530 = @func_2179() /* ty=Tensor[(5, 60), float64] */;
    %531 = cast(%530, dtype="float64") /* ty=Tensor[(5, 60), float64] */;
    %532 = reshape(%531, newshape=[5, 60]) /* ty=Tensor[(5, 60), float64] */;
    %533 = @func_7341(%532) /* ty=(Tensor[(5, 60), int16],) */;
    %534 = cast(%530, dtype="float32") /* ty=Tensor[(5, 60), float32] */;
    %535 = @func_2867() /* ty=(Tensor[(6, 9, 16), float64],) */;
    %536 = %533.0;
    %537 = cos(%534) /* ty=Tensor[(5, 60), float32] */;
    %538 = %535.0;
    (%536, %537, %538)
  };
  %539() /* ty=(Tensor[(5, 60), int16], Tensor[(5, 60), float32], Tensor[(6, 9, 16), float64]) */
}

def @func_6439() -> Tensor[(65), float32] {
  @func_5735() /* ty=Tensor[(65), float32] */
}

def @func_1348(%var_1347: Tensor[(6, 9, 16), float64]) -> (Tensor[(6, 9, 16), float64],) {
  %542 = fn (%var_1337: Tensor[(6, 9, 16), float64]) -> (Tensor[(6, 9, 16), float64],) {
    %540 = cast(%var_1337, dtype="float64") /* ty=Tensor[(6, 9, 16), float64] */;
    %541 = atan(%540) /* ty=Tensor[(6, 9, 16), float64] */;
    (%541,)
  };
  %542(%var_1347) /* ty=(Tensor[(6, 9, 16), float64],) */
}

def @func_5737() -> Tensor[(65), float32] {
  @func_5735() /* ty=Tensor[(65), float32] */
}

def @func_10022() -> (Tensor[(15, 15, 7), float64], Tensor[(3, 4, 13), float32], Tensor[(156), float32], Tensor[(5, 60), bool], Tensor[(5, 60), float64]) {
  %543 = @func_4086() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(5, 60), float64]) */;
  %544 = cast(meta[relay.Constant][24] /* ty=Tensor[(156), float32] */, dtype="float32") /* ty=Tensor[(156), float32] */;
  %545 = reshape(%544, newshape=[3, 4, 13]) /* ty=Tensor[(3, 4, 13), float32] */;
  %546 = @func_7143(%545) /* ty=(Tensor[(3, 4, 13), float32],) */;
  %547 = @func_6593() /* ty=(Tensor[(5, 60), float64], Tensor[(5, 60), bool]) */;
  %548 = %543.0;
  %549 = %546.0;
  %550 = %547.1;
  %551 = @func_2179() /* ty=Tensor[(5, 60), float64] */;
  (%548, %549, meta[relay.Constant][24] /* ty=Tensor[(156), float32] */, %550, %551)
}

def @func_7788() -> (Tensor[(5, 60), float32], Tensor[(5, 60), bool], Tensor[(15, 15, 7), float64]) {
  %552 = @func_3491() /* ty=(Tensor[(5, 60), float32],) */;
  %553 = @func_5922() /* ty=(Tensor[(5, 60), bool],) */;
  %554 = %552.0;
  %555 = %553.0;
  %556 = @func_4026() /* ty=Tensor[(15, 15, 7), float64] */;
  (%554, %555, %556)
}

def @func_577(%var_575: Tensor[(12, 10, 7), float32], %var_576: Tensor[(65), bool]) -> (Tensor[(12, 10, 7), float32], Tensor[(1, 5, 13), bool], Tensor[(65), bool]) {
  @func_573(%var_575, %var_576) /* ty=(Tensor[(12, 10, 7), float32], Tensor[(1, 5, 13), bool], Tensor[(65), bool]) */
}

def @func_6593() -> (Tensor[(5, 60), float64], Tensor[(5, 60), bool]) {
  %557 = @func_2475() /* ty=(Tensor[(5, 60), bool],) */;
  %558 = %557.0;
  %559 = cast(%558, dtype="float64") /* ty=Tensor[(5, 60), float64] */;
  %560 = @func_2088() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) */;
  %561 = %560.3;
  %562 = cast(%558, dtype="bool") /* ty=Tensor[(5, 60), bool] */;
  %563 = shape_of(%561, dtype="int32") /* ty=Tensor[(2), int32] */;
  %564 = cast(%561, dtype="bool") /* ty=Tensor[(5, 60), bool] */;
  %565 = dyn.reshape(%562, %563, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %566 = acos(%559) /* ty=Tensor[(5, 60), float64] */;
  %567 = not_equal(%564, %565) /* ty=Tensor[(5, 60), bool] */;
  (%566, %567)
}

def @func_7058() -> (Tensor[(6, 9, 16), float64],) {
  %570 = fn () -> (Tensor[(6, 9, 16), float64],) {
    %568 = @func_4813() /* ty=(Tensor[(6, 9, 16), float64], Tensor[(14, 3, 5), uint8], Tensor[(210), int8]) */;
    %569 = %568.0;
    (%569,)
  };
  %570() /* ty=(Tensor[(6, 9, 16), float64],) */
}

def @func_8914() -> Tensor[(864), float64] {
  @func_8912() /* ty=Tensor[(864), float64] */
}

def @func_8971() -> Tensor[(5, 60), bool] {
  @func_8969() /* ty=Tensor[(5, 60), bool] */
}

def @func_108(%var_106: Tensor[(14, 3, 5), int8], %var_107: Tensor[(14, 3, 5), int8]) -> (Tensor[(14, 3, 5), float64], Tensor[(14, 3, 5), uint64], Tensor[(14, 3, 5), uint8]) {
  %591 = fn (%var_74: Tensor[(14, 3, 5), int8], %var_94: Tensor[(14, 3, 5), int8]) -> (Tensor[(14, 3, 5), float64], Tensor[(14, 3, 5), uint64], Tensor[(14, 3, 5), uint8]) {
    %571 = cast(meta[relay.Constant][25] /* ty=Tensor[(14, 3, 5), int8] */, dtype="int8") /* ty=Tensor[(14, 3, 5), int8] */;
    %572 = shape_of(%var_74, dtype="int32") /* ty=Tensor[(3), int32] */;
    %573 = cast(%var_74, dtype="int8") /* ty=Tensor[(14, 3, 5), int8] */;
    %574 = dyn.reshape(%571, %572, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %575 = left_shift(%573, %574) /* ty=Tensor[(14, 3, 5), int8] */;
    %576 = cast(%var_74, dtype="float64") /* ty=Tensor[(14, 3, 5), float64] */;
    %577 = shape_of(%575, dtype="int32") /* ty=Tensor[(3), int32] */;
    %578 = cast(%575, dtype="float64") /* ty=Tensor[(14, 3, 5), float64] */;
    %579 = dyn.reshape(%576, %577, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %580 = cast(%575, dtype="uint64") /* ty=Tensor[(14, 3, 5), uint64] */;
    %581 = shape_of(%var_74, dtype="int32") /* ty=Tensor[(3), int32] */;
    %582 = cast(%var_74, dtype="uint64") /* ty=Tensor[(14, 3, 5), uint64] */;
    %583 = dyn.reshape(%580, %581, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %584 = cast(%var_94, dtype="uint8") /* ty=Tensor[(14, 3, 5), uint8] */;
    %585 = shape_of(%575, dtype="int32") /* ty=Tensor[(3), int32] */;
    %586 = cast(%575, dtype="uint8") /* ty=Tensor[(14, 3, 5), uint8] */;
    %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %588 = floor_mod(%578, %579) /* ty=Tensor[(14, 3, 5), float64] */;
    %589 = maximum(%582, %583) /* ty=Tensor[(14, 3, 5), uint64] */;
    %590 = logical_xor(%586, %587) /* ty=Tensor[(14, 3, 5), uint8] */;
    (%588, %589, %590)
  };
  %591(%var_106, %var_107) /* ty=(Tensor[(14, 3, 5), float64], Tensor[(14, 3, 5), uint64], Tensor[(14, 3, 5), uint8]) */
}

def @func_9585() -> Tensor[(5, 60), bool] {
  @func_9583() /* ty=Tensor[(5, 60), bool] */
}

def @func_6871(%var_6854: Tensor[(12, 2, 8), float64]) -> (Tensor[(12, 2, 8), float64], Tensor[(65), float32]) {
  %592 = cast(%var_6854, dtype="float64") /* ty=Tensor[(12, 2, 8), float64] */;
  %593 = exp(%592) /* ty=Tensor[(12, 2, 8), float64] */;
  %594 = @func_5735() /* ty=Tensor[(65), float32] */;
  (%593, %594)
}

def @func_10046(%var_10043: Tensor[(840), float32], %var_10044: bool, %var_10045: Tensor[(120), bool]) -> (Tensor[(10, 30), float32], Tensor[(6, 9, 16), float64], Tensor[(864), float64], Tensor[(1, 65), float64], Tensor[(840), float32], Tensor[(65), bool], bool, Tensor[(120), bool]) {
  @func_10041(%var_10043, %var_10044, %var_10045) /* ty=(Tensor[(10, 30), float32], Tensor[(6, 9, 16), float64], Tensor[(864), float64], Tensor[(1, 65), float64], Tensor[(840), float32], Tensor[(65), bool], bool, Tensor[(120), bool]) */
}

def @func_5922() -> (Tensor[(5, 60), bool],) {
  %595 = @func_1974() /* ty=(Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) */;
  %596 = %595.1;
  (%596,)
}

def @func_4634(%var_4633: Tensor[(15, 15, 7), float64]) -> Tensor[(15, 15, 7), int64] {
  %602 = fn (%var_4617: Tensor[(15, 15, 7), float64]) -> Tensor[(15, 15, 7), int64] {
    %597 = @func_4026() /* ty=Tensor[(15, 15, 7), float64] */;
    %598 = cast(%var_4617, dtype="int64") /* ty=Tensor[(15, 15, 7), int64] */;
    %599 = shape_of(%597, dtype="int32") /* ty=Tensor[(3), int32] */;
    %600 = cast(%597, dtype="int64") /* ty=Tensor[(15, 15, 7), int64] */;
    %601 = dyn.reshape(%598, %599, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    bitwise_and(%600, %601) /* ty=Tensor[(15, 15, 7), int64] */
  };
  %602(%var_4633) /* ty=Tensor[(15, 15, 7), int64] */
}

def @func_4936(%var_4934: Tensor[(840), float32], %var_4935: Tensor[(65), bool]) -> (Tensor[(6, 9, 16), float32], Tensor[(65), bool], Tensor[(840), float32], Tensor[(65), bool]) {
  @func_4932(%var_4934, %var_4935) /* ty=(Tensor[(6, 9, 16), float32], Tensor[(65), bool], Tensor[(840), float32], Tensor[(65), bool]) */
}

def @func_8212() -> (Tensor[(5, 60), bool], Tensor[(5, 60), float32]) {
  @func_8210() /* ty=(Tensor[(5, 60), bool], Tensor[(5, 60), float32]) */
}

def @func_4088() -> (Tensor[(15, 15, 7), float64], Tensor[(5, 60), float64]) {
  @func_4086() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(5, 60), float64]) */
}

def @func_11400() -> (Tensor[(5, 60), bool],) {
  %603 = @func_5922() /* ty=(Tensor[(5, 60), bool],) */;
  %604 = %603.0;
  (%604,)
}

def @func_8530() -> Tensor[(5, 60), float64] {
  %606 = fn () -> Tensor[(5, 60), float64] {
    %605 = @func_6085() /* ty=(Tensor[(5, 60), float64],) */;
    %605.0
  };
  %606() /* ty=Tensor[(5, 60), float64] */
}

def @func_9421(%var_9419: Tensor[(12, 11, 8), float32]) -> (Tensor[(12, 11, 8), uint16],) {
  @func_9418(%var_9419) /* ty=(Tensor[(12, 11, 8), uint16],) */
}

def @func_11425() -> Tensor[(5, 60), float64] {
  %608 = fn () -> Tensor[(5, 60), float64] {
    %607 = @func_10874() /* ty=(Tensor[(5, 60), float64],) */;
    %607.0
  };
  %608() /* ty=Tensor[(5, 60), float64] */
}

def @func_8121(%var_8120: Tensor[(8, 1, 10), float32]) -> Tensor[(8, 1, 10), float32] {
  %610 = fn (%var_8112: Tensor[(8, 1, 10), float32]) -> Tensor[(8, 1, 10), float32] {
    %609 = cast(%var_8112, dtype="float32") /* ty=Tensor[(8, 1, 10), float32] */;
    asinh(%609) /* ty=Tensor[(8, 1, 10), float32] */
  };
  %610(%var_8120) /* ty=Tensor[(8, 1, 10), float32] */
}

def @func_10875() -> (Tensor[(5, 60), float64],) {
  %612 = fn () -> (Tensor[(5, 60), float64],) {
    %611 = @func_5891() /* ty=Tensor[(5, 60), float64] */;
    (%611,)
  };
  %612() /* ty=(Tensor[(5, 60), float64],) */
}

def @func_12048(%var_12046: Tensor[(300), float64]) -> (Tensor[(15, 15, 7), float64], Tensor[(1, 65), bool], Tensor[(65), bool], Tensor[(5, 60), float64], Tensor[(300), float64]) {
  @func_12045(%var_12046) /* ty=(Tensor[(15, 15, 7), float64], Tensor[(1, 65), bool], Tensor[(65), bool], Tensor[(5, 60), float64], Tensor[(300), float64]) */
}

def @func_5891() -> Tensor[(5, 60), float64] {
  %613 = @func_4785() /* ty=(Tensor[(5, 60), float64],) */;
  %613.0
}

def @func_3404() -> (Tensor[(5, 60), bool],) {
  %614 = @func_2575() /* ty=(Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) */;
  %615 = %614.1;
  (%615,)
}

def @func_573(%var_563: Tensor[(12, 10, 7), float32], %var_567: Tensor[(65), bool]) -> (Tensor[(12, 10, 7), float32], Tensor[(1, 5, 13), bool], Tensor[(65), bool]) {
  %616 = cast(%var_563, dtype="float32") /* ty=Tensor[(12, 10, 7), float32] */;
  %617 = cast(%var_567, dtype="bool") /* ty=Tensor[(65), bool] */;
  %618 = reshape(%617, newshape=[1, 5, 13]) /* ty=Tensor[(1, 5, 13), bool] */;
  %619 = @func_459(%618) /* ty=(Tensor[(1, 5, 13), bool],) */;
  %620 = erf(%616) /* ty=Tensor[(12, 10, 7), float32] */;
  %621 = %619.0;
  (%620, %621, %var_567)
}

def @func_2746(%var_2720: Tensor[(5, 60), bool]) -> Tensor[(5, 60), int64] {
  %622 = @func_2575() /* ty=(Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) */;
  %623 = %622.1;
  %624 = cast(%var_2720, dtype="int64") /* ty=Tensor[(5, 60), int64] */;
  %625 = shape_of(%623, dtype="int32") /* ty=Tensor[(2), int32] */;
  %626 = cast(%623, dtype="int64") /* ty=Tensor[(5, 60), int64] */;
  %627 = dyn.reshape(%624, %625, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  right_shift(%626, %627) /* ty=Tensor[(5, 60), int64] */
}

def @func_3253() -> Tensor[(120), bool] {
  %629 = fn () -> Tensor[(120), bool] {
    %628 = @func_2428() /* ty=(Tensor[(14, 1, 13), bool], Tensor[(6, 9, 16), float64], Tensor[(120), bool], Tensor[(840), float32], Tensor[(65), bool], Tensor[(120), bool], Tensor[(6, 9, 16), float64]) */;
    %628.2
  };
  %629() /* ty=Tensor[(120), bool] */
}

def @func_3909(%var_3908: Tensor[(15, 15, 7), float64]) -> (Tensor[(15, 15, 7), bool], Tensor[(5, 60), bool], Tensor[(65), bool]) {
  %640 = fn (%var_3893: Tensor[(15, 15, 7), float64]) -> (Tensor[(15, 15, 7), bool], Tensor[(5, 60), bool], Tensor[(65), bool]) {
    %630 = @func_1840() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(864), float64]) */;
    %631 = %630.0;
    %632 = cast(%var_3893, dtype="bool") /* ty=Tensor[(15, 15, 7), bool] */;
    %633 = shape_of(%631, dtype="int32") /* ty=Tensor[(3), int32] */;
    %634 = cast(%631, dtype="bool") /* ty=Tensor[(15, 15, 7), bool] */;
    %635 = dyn.reshape(%632, %633, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %636 = @func_2458() /* ty=(Tensor[(65), bool],) */;
    %637 = not_equal(%634, %635) /* ty=Tensor[(15, 15, 7), bool] */;
    %638 = @func_2482() /* ty=Tensor[(5, 60), bool] */;
    %639 = %636.0;
    (%637, %638, %639)
  };
  %640(%var_3908) /* ty=(Tensor[(15, 15, 7), bool], Tensor[(5, 60), bool], Tensor[(65), bool]) */
}

def @func_10088() -> Tensor[(5, 60), bool] {
  %641 = @func_2004() /* ty=(Tensor[(5, 60), bool],) */;
  %641.0
}

def @func_3377(%var_3376: Tensor[(5, 60), bool]) -> (Tensor[(5, 60), float32], Tensor[(15, 15, 7), float64]) {
  %651 = fn (%var_3361: Tensor[(5, 60), bool]) -> (Tensor[(5, 60), float32], Tensor[(15, 15, 7), float64]) {
    %642 = @func_2088() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) */;
    %643 = %642.3;
    %644 = cast(%var_3361, dtype="float32") /* ty=Tensor[(5, 60), float32] */;
    %645 = shape_of(%643, dtype="int32") /* ty=Tensor[(2), int32] */;
    %646 = cast(%643, dtype="float32") /* ty=Tensor[(5, 60), float32] */;
    %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %648 = @func_1840() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(864), float64]) */;
    %649 = floor_divide(%646, %647) /* ty=Tensor[(5, 60), float32] */;
    %650 = %648.0;
    (%649, %650)
  };
  %651(%var_3376) /* ty=(Tensor[(5, 60), float32], Tensor[(15, 15, 7), float64]) */
}

def @func_12155(%var_12154: Tensor[(50, 6), bool]) -> (Tensor[(6, 9, 16), float64], Tensor[(210), int8], Tensor[(10, 5, 6), bool], Tensor[(50, 6), bool]) {
  %659 = fn (%var_12138: Tensor[(50, 6), bool]) -> (Tensor[(6, 9, 16), float64], Tensor[(210), int8], Tensor[(10, 5, 6), bool], Tensor[(50, 6), bool]) {
    %652 = @func_1974() /* ty=(Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) */;
    %653 = cast(%var_12138, dtype="bool") /* ty=Tensor[(50, 6), bool] */;
    %654 = reshape(%653, newshape=[5, 60]) /* ty=Tensor[(5, 60), bool] */;
    %655 = @func_7233(%654) /* ty=(Tensor[(5, 60), bool], Tensor[(5, 60), float64], Tensor[(65), bool], Tensor[(10, 5, 6), bool], Tensor[(6, 9, 16), float64]) */;
    %656 = %652.0;
    %657 = @func_8448() /* ty=Tensor[(210), int8] */;
    %658 = %655.3;
    (%656, %657, %658, %var_12138)
  };
  %659(%var_12154) /* ty=(Tensor[(6, 9, 16), float64], Tensor[(210), int8], Tensor[(10, 5, 6), bool], Tensor[(50, 6), bool]) */
}

def @func_11018() -> (Tensor[(10, 30), float32], Tensor[(3, 4, 13), float32], Tensor[(156), float32], Tensor[(5, 60), bool]) {
  %660 = @func_4348() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(10, 30), float32]) */;
  %661 = cast(meta[relay.Constant][26] /* ty=Tensor[(156), float32] */, dtype="float32") /* ty=Tensor[(156), float32] */;
  %662 = reshape(%661, newshape=[3, 4, 13]) /* ty=Tensor[(3, 4, 13), float32] */;
  %663 = @func_7143(%662) /* ty=(Tensor[(3, 4, 13), float32],) */;
  %664 = @func_5463() /* ty=(Tensor[(5, 60), bool], Tensor[(10, 30), float32]) */;
  %665 = %660.1;
  %666 = %663.0;
  %667 = %664.0;
  (%665, %666, meta[relay.Constant][26] /* ty=Tensor[(156), float32] */, %667)
}

def @func_7036() -> (Tensor[(5, 60), float64],) {
  %668 = @func_5760() /* ty=(Tensor[(5, 60), float64],) */;
  %669 = %668.0;
  (%669,)
}

def @func_7950() -> Tensor[(5, 60), float32] {
  %671 = fn () -> Tensor[(5, 60), float32] {
    %670 = @func_4206() /* ty=(Tensor[(5, 60), float32],) */;
    %670.0
  };
  %671() /* ty=Tensor[(5, 60), float32] */
}

def @func_11568() -> (Tensor[(5, 60), bool],) {
  %674 = fn () -> (Tensor[(5, 60), bool],) {
    %672 = @func_2004() /* ty=(Tensor[(5, 60), bool],) */;
    %673 = %672.0;
    (%673,)
  };
  %674() /* ty=(Tensor[(5, 60), bool],) */
}

def @func_6885(%var_6884: Tensor[(11, 9, 7), int8]) -> Tensor[(11, 9, 7), int8] {
  %679 = fn (%var_6876: Tensor[(11, 9, 7), int8]) -> Tensor[(11, 9, 7), int8] {
    %675 = cast(meta[relay.Constant][27] /* ty=Tensor[(11, 9, 7), int8] */, dtype="int8") /* ty=Tensor[(11, 9, 7), int8] */;
    %676 = shape_of(%var_6876, dtype="int32") /* ty=Tensor[(3), int32] */;
    %677 = cast(%var_6876, dtype="int8") /* ty=Tensor[(11, 9, 7), int8] */;
    %678 = dyn.reshape(%675, %676, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    add(%677, %678) /* ty=Tensor[(11, 9, 7), int8] */
  };
  %679(%var_6884) /* ty=Tensor[(11, 9, 7), int8] */
}

def @func_11463() -> (Tensor[(120), bool], Tensor[(6, 9, 16), float64], Tensor[(864), float64], Tensor[(65), bool]) {
  %680 = cast(meta[relay.Constant][28] /* ty=Tensor[(864), float64] */, dtype="float64") /* ty=Tensor[(864), float64] */;
  %681 = reshape(%680, newshape=[6, 9, 16]) /* ty=Tensor[(6, 9, 16), float64] */;
  %682 = @func_1346(%681) /* ty=(Tensor[(6, 9, 16), float64],) */;
  %683 = @func_3252() /* ty=Tensor[(120), bool] */;
  %684 = %682.0;
  %685 = @func_3477() /* ty=Tensor[(65), bool] */;
  (%683, %684, meta[relay.Constant][28] /* ty=Tensor[(864), float64] */, %685)
}

def @func_1815(%var_1813: Tensor[(10, 5, 6), float32]) -> Tensor[(10, 5, 6), bool] {
  @func_1812(%var_1813) /* ty=Tensor[(10, 5, 6), bool] */
}

def @func_10775() -> Tensor[(5, 60), float64] {
  @func_10773() /* ty=Tensor[(5, 60), float64] */
}

def @func_3990() -> Tensor[(10, 30), float32] {
  %687 = fn () -> Tensor[(10, 30), float32] {
    %686 = @func_2856() /* ty=(Tensor[(864), float64], Tensor[(10, 5, 6), bool], Tensor[(10, 30), float32]) */;
    %686.2
  };
  %687() /* ty=Tensor[(10, 30), float32] */
}

def @func_2476() -> (Tensor[(5, 60), bool],) {
  %690 = fn () -> (Tensor[(5, 60), bool],) {
    %688 = @func_2004() /* ty=(Tensor[(5, 60), bool],) */;
    %689 = %688.0;
    (%689,)
  };
  %690() /* ty=(Tensor[(5, 60), bool],) */
}

def @func_12079() -> Tensor[(5, 60), bool] {
  %691 = @func_5997() /* ty=(Tensor[(5, 60), bool],) */;
  %691.0
}

def @func_4349() -> (Tensor[(15, 15, 7), float64], Tensor[(10, 30), float32]) {
  %695 = fn () -> (Tensor[(15, 15, 7), float64], Tensor[(10, 30), float32]) {
    %692 = @func_4086() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(5, 60), float64]) */;
    %693 = %692.0;
    %694 = @func_3989() /* ty=Tensor[(10, 30), float32] */;
    (%693, %694)
  };
  %695() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(10, 30), float32]) */
}

def @func_6741(%var_6734: Tensor[(2, 420), float32]) -> (Tensor[(10, 30), float32], Tensor[(840), float32], Tensor[(2, 420), float32], Tensor[(65), bool]) {
  %696 = @func_5463() /* ty=(Tensor[(5, 60), bool], Tensor[(10, 30), float32]) */;
  %697 = cast(%var_6734, dtype="float32") /* ty=Tensor[(2, 420), float32] */;
  %698 = cast(meta[relay.Constant][29] /* ty=Tensor[(65), bool] */, dtype="bool") /* ty=Tensor[(65), bool] */;
  %699 = reshape(%697, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %700 = reshape(%698, newshape=[65]) /* ty=Tensor[(65), bool] */;
  %701 = @func_2650(%699, %700) /* ty=(Tensor[(5, 60), float32], Tensor[(5, 60), bool], bool, Tensor[(840), float32], Tensor[(65), bool], bool, Tensor[(120), bool]) */;
  %702 = %696.1;
  %703 = %701.3;
  (%702, %703, %var_6734, meta[relay.Constant][29] /* ty=Tensor[(65), bool] */)
}

def @func_10675(%var_10672: Tensor[(63), float64], %var_10673: Tensor[(840), float32], %var_10674: bool) -> (Tensor[(5, 60), float64], Tensor[(5, 60), bool], Tensor[(3, 7, 3), float64], Tensor[(63), float64], Tensor[(840), float32], bool, Tensor[(60, 2), bool], Tensor[(16, 7, 7), bool], Tensor[(784), uint8]) {
  @func_10670(%var_10672, %var_10673, %var_10674) /* ty=(Tensor[(5, 60), float64], Tensor[(5, 60), bool], Tensor[(3, 7, 3), float64], Tensor[(63), float64], Tensor[(840), float32], bool, Tensor[(60, 2), bool], Tensor[(16, 7, 7), bool], Tensor[(784), uint8]) */
}

def @func_9418(%var_9369: Tensor[(12, 11, 8), float32]) -> (Tensor[(12, 11, 8), uint16],) {
  %704 = cast(%var_9369, dtype="float32") /* ty=Tensor[(12, 11, 8), float32] */;
  %705 = log(%704) /* ty=Tensor[(12, 11, 8), float32] */;
  %706 = cast(%705, dtype="float64") /* ty=Tensor[(12, 11, 8), float64] */;
  %707 = atanh(%706) /* ty=Tensor[(12, 11, 8), float64] */;
  %708 = cast(%707, dtype="float64") /* ty=Tensor[(12, 11, 8), float64] */;
  %709 = acos(%708) /* ty=Tensor[(12, 11, 8), float64] */;
  %710 = cast(%var_9369, dtype="uint16") /* ty=Tensor[(12, 11, 8), uint16] */;
  %711 = shape_of(%709, dtype="int32") /* ty=Tensor[(3), int32] */;
  %712 = cast(%709, dtype="uint16") /* ty=Tensor[(12, 11, 8), uint16] */;
  %713 = dyn.reshape(%710, %711, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %714 = bitwise_xor(%712, %713) /* ty=Tensor[(12, 11, 8), uint16] */;
  (%714,)
}

def @func_3212(%var_3210: Tensor[(15, 6, 11), uint16], %var_3211: Tensor[(15, 6, 11), uint16]) -> (Tensor[(15, 6, 11), bool], Tensor[(5, 60), bool]) {
  @func_3208(%var_3210, %var_3211) /* ty=(Tensor[(15, 6, 11), bool], Tensor[(5, 60), bool]) */
}

def @func_3336() -> Tensor[(65), float32] {
  @func_3334() /* ty=Tensor[(65), float32] */
}

def @func_10138(%var_10136: Tensor[(300), bool], %var_10137: Tensor[(210), int8]) -> (Tensor[(6, 9, 16), int64], Tensor[(1, 210), int8], Tensor[(300), bool], Tensor[(210), int8]) {
  %728 = fn (%var_10128: Tensor[(300), bool], %var_10129: Tensor[(210), int8]) -> (Tensor[(6, 9, 16), int64], Tensor[(1, 210), int8], Tensor[(300), bool], Tensor[(210), int8]) {
    %715 = @func_7057() /* ty=(Tensor[(6, 9, 16), float64],) */;
    %716 = %715.0;
    %717 = cast(meta[relay.Constant][30] /* ty=Tensor[(6, 9, 16), float64] */, dtype="int64") /* ty=Tensor[(6, 9, 16), int64] */;
    %718 = shape_of(%716, dtype="int32") /* ty=Tensor[(3), int32] */;
    %719 = cast(%716, dtype="int64") /* ty=Tensor[(6, 9, 16), int64] */;
    %720 = dyn.reshape(%717, %718, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %721 = cast(%var_10128, dtype="bool") /* ty=Tensor[(300), bool] */;
    %722 = cast(%var_10129, dtype="int8") /* ty=Tensor[(210), int8] */;
    %723 = reshape(%721, newshape=[300]) /* ty=Tensor[(300), bool] */;
    %724 = reshape(%722, newshape=[1, 210]) /* ty=Tensor[(1, 210), int8] */;
    %725 = @func_5089(%723, %724) /* ty=(Tensor[(6, 9, 16), float64], Tensor[(6, 9, 16), float64], Tensor[(1, 210), int8], Tensor[(300), bool], Tensor[(1, 210), int8], Tensor[(10, 5, 6), bool], Tensor[(120), bool]) */;
    %726 = bitwise_or(%719, %720) /* ty=Tensor[(6, 9, 16), int64] */;
    %727 = %725.4;
    (%726, %727, %var_10128, %var_10129)
  };
  %728(%var_10136, %var_10137) /* ty=(Tensor[(6, 9, 16), int64], Tensor[(1, 210), int8], Tensor[(300), bool], Tensor[(210), int8]) */
}

def @func_2867() -> (Tensor[(6, 9, 16), float64],) {
  %729 = @func_2428() /* ty=(Tensor[(14, 1, 13), bool], Tensor[(6, 9, 16), float64], Tensor[(120), bool], Tensor[(840), float32], Tensor[(65), bool], Tensor[(120), bool], Tensor[(6, 9, 16), float64]) */;
  %730 = %729.1;
  (%730,)
}

def @func_6087() -> (Tensor[(5, 60), float64],) {
  @func_6085() /* ty=(Tensor[(5, 60), float64],) */
}

def @func_8074() -> Tensor[(15, 15, 7), float64] {
  @func_6775() /* ty=Tensor[(15, 15, 7), float64] */
}

def @func_4389() -> (Tensor[(65), bool], Tensor[(5, 60), bool]) {
  %731 = @func_2458() /* ty=(Tensor[(65), bool],) */;
  %732 = @func_3404() /* ty=(Tensor[(5, 60), bool],) */;
  %733 = %731.0;
  %734 = %732.0;
  (%733, %734)
}

def @func_7420() -> (Tensor[(210), int8],) {
  %737 = fn () -> (Tensor[(210), int8],) {
    %735 = @func_4813() /* ty=(Tensor[(6, 9, 16), float64], Tensor[(14, 3, 5), uint8], Tensor[(210), int8]) */;
    %736 = %735.2;
    (%736,)
  };
  %737() /* ty=(Tensor[(210), int8],) */
}

def @func_5735() -> Tensor[(65), float32] {
  %738 = @func_2458() /* ty=(Tensor[(65), bool],) */;
  %739 = %738.0;
  %740 = cast(%739, dtype="float32") /* ty=Tensor[(65), float32] */;
  sin(%740) /* ty=Tensor[(65), float32] */
}

def @func_3422() -> Tensor[(5, 60), bool] {
  @func_3420() /* ty=Tensor[(5, 60), bool] */
}

def @func_9368() -> (Tensor[(5, 60), bool], Tensor[(5, 60), float64]) {
  @func_9366() /* ty=(Tensor[(5, 60), bool], Tensor[(5, 60), float64]) */
}

def @func_3478() -> Tensor[(65), bool] {
  %742 = fn () -> Tensor[(65), bool] {
    %741 = @func_2458() /* ty=(Tensor[(65), bool],) */;
    %741.0
  };
  %742() /* ty=Tensor[(65), bool] */
}

def @func_11713() -> (Tensor[(10, 5, 6), bool],) {
  %743 = @func_7404() /* ty=(Tensor[(6, 9, 16), float32], Tensor[(10, 5, 6), bool], Tensor[(300), float32], Tensor[(65), bool]) */;
  %744 = %743.1;
  (%744,)
}

def @func_5280(%var_5278: bool) -> (Tensor[(16, 16, 13), bool], Tensor[(16, 16, 13), float64], Tensor[(5, 60), bool], Tensor[(5, 60), bool], Tensor[(6, 9, 16), float32]) {
  @func_5277(%var_5278) /* ty=(Tensor[(16, 16, 13), bool], Tensor[(16, 16, 13), float64], Tensor[(5, 60), bool], Tensor[(5, 60), bool], Tensor[(6, 9, 16), float32]) */
}

def @func_11078(%var_11076: Tensor[(1, 840), float32]) -> (Tensor[(1, 840), float32], Tensor[(6, 20), bool], Tensor[(63), float64], Tensor[(5, 60), bool]) {
  @func_11075(%var_11076) /* ty=(Tensor[(1, 840), float32], Tensor[(6, 20), bool], Tensor[(63), float64], Tensor[(5, 60), bool]) */
}

def @func_4207() -> (Tensor[(5, 60), float32],) {
  %752 = fn () -> (Tensor[(5, 60), float32],) {
    %745 = @func_2475() /* ty=(Tensor[(5, 60), bool],) */;
    %746 = %745.0;
    %747 = cast(meta[relay.Constant][31] /* ty=Tensor[(5, 60), bool] */, dtype="float32") /* ty=Tensor[(5, 60), float32] */;
    %748 = shape_of(%746, dtype="int32") /* ty=Tensor[(2), int32] */;
    %749 = cast(%746, dtype="float32") /* ty=Tensor[(5, 60), float32] */;
    %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %751 = divide(%749, %750) /* ty=Tensor[(5, 60), float32] */;
    (%751,)
  };
  %752() /* ty=(Tensor[(5, 60), float32],) */
}

def @func_3817(%var_3811: Tensor[(2, 16, 13), float32], %var_3812: Tensor[(2, 16, 13), float32]) -> Tensor[(2, 16, 13), float32] {
  %753 = cast(%var_3812, dtype="float32") /* ty=Tensor[(2, 16, 13), float32] */;
  %754 = shape_of(%var_3811, dtype="int32") /* ty=Tensor[(3), int32] */;
  %755 = cast(%var_3811, dtype="float32") /* ty=Tensor[(2, 16, 13), float32] */;
  %756 = dyn.reshape(%753, %754, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  multiply(%755, %756) /* ty=Tensor[(2, 16, 13), float32] */
}

def @func_2429() -> (Tensor[(14, 1, 13), bool], Tensor[(6, 9, 16), float64], Tensor[(120), bool], Tensor[(840), float32], Tensor[(65), bool], Tensor[(120), bool], Tensor[(6, 9, 16), float64]) {
  %774 = fn () -> (Tensor[(14, 1, 13), bool], Tensor[(6, 9, 16), float64], Tensor[(120), bool], Tensor[(840), float32], Tensor[(65), bool], Tensor[(120), bool], Tensor[(6, 9, 16), float64]) {
    %757 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
    %758 = cast(meta[relay.Constant][32] /* ty=Tensor[(14, 1, 13), bool] */, dtype="bool") /* ty=Tensor[(14, 1, 13), bool] */;
    %759 = @func_2088() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) */;
    %760 = cast(meta[relay.Constant][33] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
    %761 = cast(meta[relay.Constant][34] /* ty=Tensor[(65), bool] */, dtype="bool") /* ty=Tensor[(65), bool] */;
    %762 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
    %763 = cast(meta[relay.Constant][35] /* ty=Tensor[(120), bool] */, dtype="bool") /* ty=Tensor[(120), bool] */;
    %764 = reshape(%760, newshape=[840]) /* ty=Tensor[(840), float32] */;
    %765 = reshape(%761, newshape=[65, 1]) /* ty=Tensor[(65, 1), bool] */;
    %766 = reshape(%762, newshape=[]) /* ty=bool */;
    %767 = reshape(%763, newshape=[120]) /* ty=Tensor[(120), bool] */;
    %768 = @func_1939(%764, %765, %766, %767) /* ty=(Tensor[(15, 15, 7), float64], Tensor[(15, 15, 7), float64], Tensor[(65), bool], Tensor[(840), float32], Tensor[(65, 1), bool], Tensor[(14, 3, 5), float64], bool, Tensor[(120), bool]) */;
    %769 = @func_1974() /* ty=(Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) */;
    %770 = logical_and(%757, %758) /* ty=Tensor[(14, 1, 13), bool] */;
    %771 = %759.1;
    %772 = %768.7;
    %773 = %769.0;
    (%770, %771, %772, meta[relay.Constant][33] /* ty=Tensor[(840), float32] */, meta[relay.Constant][34] /* ty=Tensor[(65), bool] */, meta[relay.Constant][35] /* ty=Tensor[(120), bool] */, %773)
  };
  %774() /* ty=(Tensor[(14, 1, 13), bool], Tensor[(6, 9, 16), float64], Tensor[(120), bool], Tensor[(840), float32], Tensor[(65), bool], Tensor[(120), bool], Tensor[(6, 9, 16), float64]) */
}

def @func_7123(%var_7099: Tensor[(10, 30), float32], %var_7107: Tensor[(10, 30), int16], %var_7118: bool) -> (Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool], Tensor[(10, 30), bool], Tensor[(15, 15, 7), float64], Tensor[(840), float32], bool, Tensor[(120), bool]) {
  %775 = @func_6816() /* ty=(Tensor[(6, 9, 16), float64],) */;
  %776 = @func_3989() /* ty=Tensor[(10, 30), float32] */;
  %777 = cast(%var_7099, dtype="int16") /* ty=Tensor[(10, 30), int16] */;
  %778 = shape_of(%776, dtype="int32") /* ty=Tensor[(2), int32] */;
  %779 = cast(%776, dtype="int16") /* ty=Tensor[(10, 30), int16] */;
  %780 = dyn.reshape(%777, %778, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %781 = bitwise_xor(%779, %780) /* ty=Tensor[(10, 30), int16] */;
  %782 = cast(%var_7107, dtype="bool") /* ty=Tensor[(10, 30), bool] */;
  %783 = shape_of(%781, dtype="int32") /* ty=Tensor[(2), int32] */;
  %784 = cast(%781, dtype="bool") /* ty=Tensor[(10, 30), bool] */;
  %785 = dyn.reshape(%782, %783, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %786 = cast(meta[relay.Constant][36] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %787 = cast(%var_7118, dtype="bool") /* ty=bool */;
  %788 = cast(meta[relay.Constant][37] /* ty=Tensor[(120), bool] */, dtype="bool") /* ty=Tensor[(120), bool] */;
  %789 = reshape(%786, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %790 = reshape(%787, newshape=[]) /* ty=bool */;
  %791 = reshape(%788, newshape=[60, 2]) /* ty=Tensor[(60, 2), bool] */;
  %792 = @func_5538(%789, %790, %791) /* ty=(Tensor[(5, 60), bool], Tensor[(15, 15, 7), float64], Tensor[(840), float32], Tensor[(840), float32], Tensor[(65), bool], Tensor[(60, 2), int8], Tensor[(5, 60), bool]) */;
  %793 = %775.0;
  %794 = @func_2482() /* ty=Tensor[(5, 60), bool] */;
  %795 = greater_equal(%784, %785) /* ty=Tensor[(10, 30), bool] */;
  %796 = %792.1;
  (%793, %794, %795, %796, meta[relay.Constant][36] /* ty=Tensor[(840), float32] */, %var_7118, meta[relay.Constant][37] /* ty=Tensor[(120), bool] */)
}

def @func_7264() -> (Tensor[(5, 60), bool],) {
  @func_7262() /* ty=(Tensor[(5, 60), bool],) */
}

def @func_3971() -> (Tensor[(5, 60), bool], Tensor[(15, 15, 7), float64], Tensor[(5, 60), bool], Tensor[(5, 60), bool], Tensor[(120), bool], Tensor[(840), float32], Tensor[(65), bool], Tensor[(6, 9, 16), float64], Tensor[(5, 60), float64], Tensor[(5, 60), bool]) {
  %797 = @func_3274() /* ty=(Tensor[(15, 15, 7), float64],) */;
  %798 = @func_2475() /* ty=(Tensor[(5, 60), bool],) */;
  %799 = %798.0;
  %800 = cast(%799, dtype="bool") /* ty=Tensor[(5, 60), bool] */;
  %801 = reshape(%800, newshape=[5, 60]) /* ty=Tensor[(5, 60), bool] */;
  %802 = @func_2141(%801) /* ty=(Tensor[(5, 60), bool], Tensor[(5, 60), uint64]) */;
  %803 = cast(meta[relay.Constant][38] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %804 = cast(meta[relay.Constant][39] /* ty=Tensor[(65), bool] */, dtype="bool") /* ty=Tensor[(65), bool] */;
  %805 = reshape(%803, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %806 = reshape(%804, newshape=[65]) /* ty=Tensor[(65), bool] */;
  %807 = @func_2650(%805, %806) /* ty=(Tensor[(5, 60), float32], Tensor[(5, 60), bool], bool, Tensor[(840), float32], Tensor[(65), bool], bool, Tensor[(120), bool]) */;
  %808 = @func_2088() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) */;
  %809 = @func_3420() /* ty=Tensor[(5, 60), bool] */;
  %810 = cast(meta[relay.Constant][40] /* ty=Tensor[(5, 60), bool] */, dtype="float64") /* ty=Tensor[(5, 60), float64] */;
  %811 = shape_of(%809, dtype="int32") /* ty=Tensor[(2), int32] */;
  %812 = cast(%809, dtype="float64") /* ty=Tensor[(5, 60), float64] */;
  %813 = dyn.reshape(%810, %811, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %814 = @func_2475() /* ty=(Tensor[(5, 60), bool],) */;
  %815 = @func_2482() /* ty=Tensor[(5, 60), bool] */;
  %816 = %797.0;
  %817 = %802.0;
  %818 = %807.6;
  %819 = %808.2;
  %820 = floor_mod(%812, %813) /* ty=Tensor[(5, 60), float64] */;
  %821 = %814.0;
  (%815, %816, %799, %817, %818, meta[relay.Constant][38] /* ty=Tensor[(840), float32] */, meta[relay.Constant][39] /* ty=Tensor[(65), bool] */, %819, %820, %821)
}

def @func_1939(%var_1914: Tensor[(840), float32], %var_1915: Tensor[(65, 1), bool], %var_1935: bool, %var_1936: Tensor[(120), bool]) -> (Tensor[(15, 15, 7), float64], Tensor[(15, 15, 7), float64], Tensor[(65), bool], Tensor[(840), float32], Tensor[(65, 1), bool], Tensor[(14, 3, 5), float64], bool, Tensor[(120), bool]) {
  %822 = @func_1840() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(864), float64]) */;
  %823 = @func_1840() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(864), float64]) */;
  %824 = cast(%var_1914, dtype="float32") /* ty=Tensor[(840), float32] */;
  %825 = cast(%var_1915, dtype="bool") /* ty=Tensor[(65, 1), bool] */;
  %826 = reshape(%824, newshape=[12, 10, 7]) /* ty=Tensor[(12, 10, 7), float32] */;
  %827 = reshape(%825, newshape=[65]) /* ty=Tensor[(65), bool] */;
  %828 = @func_573(%826, %827) /* ty=(Tensor[(12, 10, 7), float32], Tensor[(1, 5, 13), bool], Tensor[(65), bool]) */;
  %829 = cast(%var_1935, dtype="bool") /* ty=bool */;
  %830 = cast(%var_1936, dtype="bool") /* ty=Tensor[(120), bool] */;
  %831 = reshape(%829, newshape=[]) /* ty=bool */;
  %832 = reshape(%830, newshape=[10, 12, 1]) /* ty=Tensor[(10, 12, 1), bool] */;
  %833 = @func_399(%831, %832) /* ty=(Tensor[(14, 3, 5), float64], Tensor[(210), int8], Tensor[(10, 12, ?), int64]) */;
  %834 = %822.0;
  %835 = %823.0;
  %836 = %828.2;
  %837 = %833.0;
  (%834, %835, %836, %var_1914, %var_1915, %837, %var_1935, %var_1936)
}

def @func_9871() -> (Tensor[(5, 60), float64], Tensor[(65), float32]) {
  @func_9869() /* ty=(Tensor[(5, 60), float64], Tensor[(65), float32]) */
}

def @func_7724() -> Tensor[(65), float32] {
  @func_3334() /* ty=Tensor[(65), float32] */
}

def @func_10929(%var_10927: Tensor[(400), float64]) -> (Tensor[(65), float32], Tensor[(16, 5, 5), float64], Tensor[(400), float64]) {
  @func_10926(%var_10927) /* ty=(Tensor[(65), float32], Tensor[(16, 5, 5), float64], Tensor[(400), float64]) */
}

def @func_7236(%var_7234: Tensor[(5, 60), bool]) -> (Tensor[(5, 60), bool], Tensor[(5, 60), float64], Tensor[(65), bool], Tensor[(10, 5, 6), bool], Tensor[(6, 9, 16), float64]) {
  @func_7233(%var_7234) /* ty=(Tensor[(5, 60), bool], Tensor[(5, 60), float64], Tensor[(65), bool], Tensor[(10, 5, 6), bool], Tensor[(6, 9, 16), float64]) */
}

def @func_5277(%var_5212: bool) -> (Tensor[(16, 16, 13), bool], Tensor[(16, 16, 13), float64], Tensor[(5, 60), bool], Tensor[(5, 60), bool], Tensor[(6, 9, 16), float32]) {
  %838 = cast(%var_5212, dtype="bool") /* ty=bool */;
  %839 = cast(meta[relay.Constant][41] /* ty=Tensor[(16, 16, 13), bool] */, dtype="bool") /* ty=Tensor[(16, 16, 13), bool] */;
  %840 = cast(meta[relay.Constant][41] /* ty=Tensor[(16, 16, 13), bool] */, dtype="float64") /* ty=Tensor[(16, 16, 13), float64] */;
  %841 = @func_2475() /* ty=(Tensor[(5, 60), bool],) */;
  %842 = @func_3971() /* ty=(Tensor[(5, 60), bool], Tensor[(15, 15, 7), float64], Tensor[(5, 60), bool], Tensor[(5, 60), bool], Tensor[(120), bool], Tensor[(840), float32], Tensor[(65), bool], Tensor[(6, 9, 16), float64], Tensor[(5, 60), float64], Tensor[(5, 60), bool]) */;
  %843 = @func_2867() /* ty=(Tensor[(6, 9, 16), float64],) */;
  %844 = %843.0;
  %845 = cast(%844, dtype="float32") /* ty=Tensor[(6, 9, 16), float32] */;
  %846 = logical_or(%838, %839) /* ty=Tensor[(16, 16, 13), bool] */;
  %847 = asin(%840) /* ty=Tensor[(16, 16, 13), float64] */;
  %848 = %841.0;
  %849 = %842.2;
  %850 = log(%845) /* ty=Tensor[(6, 9, 16), float32] */;
  (%846, %847, %848, %849, %850)
}

def @func_6187() -> (Tensor[(5, 60), float32], Tensor[(15, 15, 7), float64]) {
  %857 = fn () -> (Tensor[(5, 60), float32], Tensor[(15, 15, 7), float64]) {
    %851 = @func_3491() /* ty=(Tensor[(5, 60), float32],) */;
    %852 = %851.0;
    %853 = cast(%852, dtype="bool") /* ty=Tensor[(5, 60), bool] */;
    %854 = reshape(%853, newshape=[5, 60]) /* ty=Tensor[(5, 60), bool] */;
    %855 = @func_3375(%854) /* ty=(Tensor[(5, 60), float32], Tensor[(15, 15, 7), float64]) */;
    %856 = %855.1;
    (%852, %856)
  };
  %857() /* ty=(Tensor[(5, 60), float32], Tensor[(15, 15, 7), float64]) */
}

def @func_9294(%var_9293: Tensor[(5, 60), bool]) -> (Tensor[(5, 60), float32], Tensor[(7, 2, 3), float32], Tensor[(7, 6), float64], Tensor[(5, 60), bool], Tensor[(65), bool], Tensor[(840), float32], Tensor[(840), float32], Tensor[(5, 60), bool]) {
  %883 = fn (%var_9176: Tensor[(5, 60), bool]) -> (Tensor[(5, 60), float32], Tensor[(7, 2, 3), float32], Tensor[(7, 6), float64], Tensor[(5, 60), bool], Tensor[(65), bool], Tensor[(840), float32], Tensor[(840), float32], Tensor[(5, 60), bool]) {
    %858 = @func_2269() /* ty=(Tensor[(5, 60), bool], Tensor[(5, 60), bool]) */;
    %859 = %858.0;
    %860 = cast(%var_9176, dtype="uint8") /* ty=Tensor[(5, 60), uint8] */;
    %861 = shape_of(%859, dtype="int32") /* ty=Tensor[(2), int32] */;
    %862 = cast(%859, dtype="uint8") /* ty=Tensor[(5, 60), uint8] */;
    %863 = dyn.reshape(%860, %861, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %864 = maximum(%862, %863) /* ty=Tensor[(5, 60), uint8] */;
    %865 = cast(%864, dtype="float32") /* ty=Tensor[(5, 60), float32] */;
    %866 = cast(meta[relay.Constant][42] /* ty=Tensor[(7, 6), float64] */, dtype="float64") /* ty=Tensor[(7, 6), float64] */;
    %867 = reshape(%866, newshape=[7, 2, 3]) /* ty=Tensor[(7, 2, 3), float64] */;
    %868 = @func_8645(%867) /* ty=(Tensor[(7, 2, 3), float32],) */;
    %869 = @func_6835() /* ty=(Tensor[(5, 60), bool],) */;
    %870 = @func_2458() /* ty=(Tensor[(65), bool],) */;
    %871 = cast(meta[relay.Constant][43] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
    %872 = %870.0;
    %873 = cast(%872, dtype="bool") /* ty=Tensor[(65), bool] */;
    %874 = reshape(%871, newshape=[840]) /* ty=Tensor[(840), float32] */;
    %875 = reshape(%873, newshape=[65]) /* ty=Tensor[(65), bool] */;
    %876 = @func_4932(%874, %875) /* ty=(Tensor[(6, 9, 16), float32], Tensor[(65), bool], Tensor[(840), float32], Tensor[(65), bool]) */;
    %877 = @func_7262() /* ty=(Tensor[(5, 60), bool],) */;
    %878 = cosh(%865) /* ty=Tensor[(5, 60), float32] */;
    %879 = %868.0;
    %880 = %869.0;
    %881 = %876.2;
    %882 = %877.0;
    (%878, %879, meta[relay.Constant][42] /* ty=Tensor[(7, 6), float64] */, %880, %872, %881, meta[relay.Constant][43] /* ty=Tensor[(840), float32] */, %882)
  };
  %883(%var_9293) /* ty=(Tensor[(5, 60), float32], Tensor[(7, 2, 3), float32], Tensor[(7, 6), float64], Tensor[(5, 60), bool], Tensor[(65), bool], Tensor[(840), float32], Tensor[(840), float32], Tensor[(5, 60), bool]) */
}

def @func_461(%var_460: Tensor[(1, 5, 13), bool]) -> (Tensor[(1, 5, 13), bool],) {
  %887 = fn (%var_455: Tensor[(1, 5, 13), bool]) -> (Tensor[(1, 5, 13), bool],) {
    %884 = cast(meta[relay.Constant][44] /* ty=Tensor[(1, 5, 1), bool] */, dtype="bool") /* ty=Tensor[(1, 5, 1), bool] */;
    %885 = cast(%var_455, dtype="bool") /* ty=Tensor[(1, 5, 13), bool] */;
    %886 = logical_and(%884, %885) /* ty=Tensor[(1, 5, 13), bool] */;
    (%886,)
  };
  %887(%var_460) /* ty=(Tensor[(1, 5, 13), bool],) */
}

def @func_7233(%var_7179: Tensor[(5, 60), bool]) -> (Tensor[(5, 60), bool], Tensor[(5, 60), float64], Tensor[(65), bool], Tensor[(10, 5, 6), bool], Tensor[(6, 9, 16), float64]) {
  %888 = @func_2004() /* ty=(Tensor[(5, 60), bool],) */;
  %889 = %888.0;
  %890 = cast(%var_7179, dtype="bool") /* ty=Tensor[(5, 60), bool] */;
  %891 = shape_of(%889, dtype="int32") /* ty=Tensor[(2), int32] */;
  %892 = cast(%889, dtype="bool") /* ty=Tensor[(5, 60), bool] */;
  %893 = dyn.reshape(%890, %891, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %894 = @func_4086() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(5, 60), float64]) */;
  %895 = cast(%889, dtype="float32") /* ty=Tensor[(5, 60), float32] */;
  %896 = reshape(%895, newshape=[10, 5, 6]) /* ty=Tensor[(10, 5, 6), float32] */;
  %897 = @func_6280() /* ty=(Tensor[(5, 60), bool], Tensor[(6, 9, 16), float64], Tensor[(5, 60), float64]) */;
  %898 = less(%892, %893) /* ty=Tensor[(5, 60), bool] */;
  %899 = %894.1;
  %900 = @func_3477() /* ty=Tensor[(65), bool] */;
  %901 = @func_1812(%896) /* ty=Tensor[(10, 5, 6), bool] */;
  %902 = %897.1;
  (%898, %899, %900, %901, %902)
}

def @func_11465() -> (Tensor[(120), bool], Tensor[(6, 9, 16), float64], Tensor[(864), float64], Tensor[(65), bool]) {
  @func_11463() /* ty=(Tensor[(120), bool], Tensor[(6, 9, 16), float64], Tensor[(864), float64], Tensor[(65), bool]) */
}

def @func_4283() -> (Tensor[(6, 9, 16), float32], Tensor[(6, 9, 16), float64]) {
  %912 = fn () -> (Tensor[(6, 9, 16), float32], Tensor[(6, 9, 16), float64]) {
    %903 = @func_2428() /* ty=(Tensor[(14, 1, 13), bool], Tensor[(6, 9, 16), float64], Tensor[(120), bool], Tensor[(840), float32], Tensor[(65), bool], Tensor[(120), bool], Tensor[(6, 9, 16), float64]) */;
    %904 = %903.6;
    %905 = cast(meta[relay.Constant][45] /* ty=Tensor[(6, 9, 16), float64] */, dtype="float32") /* ty=Tensor[(6, 9, 16), float32] */;
    %906 = shape_of(%904, dtype="int32") /* ty=Tensor[(3), int32] */;
    %907 = cast(%904, dtype="float32") /* ty=Tensor[(6, 9, 16), float32] */;
    %908 = dyn.reshape(%905, %906, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %909 = @func_2088() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) */;
    %910 = floor_mod(%907, %908) /* ty=Tensor[(6, 9, 16), float32] */;
    %911 = %909.2;
    (%910, %911)
  };
  %912() /* ty=(Tensor[(6, 9, 16), float32], Tensor[(6, 9, 16), float64]) */
}

def @func_9792() -> (Tensor[(5, 60), bool],) {
  %913 = @func_7676() /* ty=(Tensor[(5, 60), float32], Tensor[(5, 60), float64], Tensor[(10, 5, 6), bool], Tensor[(5, 60), bool]) */;
  %914 = %913.3;
  (%914,)
}

def @func_12118() -> (Tensor[(5, 60), bool],) {
  %917 = fn () -> (Tensor[(5, 60), bool],) {
    %915 = @func_11400() /* ty=(Tensor[(5, 60), bool],) */;
    %916 = %915.0;
    (%916,)
  };
  %917() /* ty=(Tensor[(5, 60), bool],) */
}

def @func_11344() -> (Tensor[(5, 60), float64], Tensor[(5, 60), float64], Tensor[(65), bool], Tensor[(5, 60), float64]) {
  %918 = @func_3971() /* ty=(Tensor[(5, 60), bool], Tensor[(15, 15, 7), float64], Tensor[(5, 60), bool], Tensor[(5, 60), bool], Tensor[(120), bool], Tensor[(840), float32], Tensor[(65), bool], Tensor[(6, 9, 16), float64], Tensor[(5, 60), float64], Tensor[(5, 60), bool]) */;
  %919 = @func_8529() /* ty=Tensor[(5, 60), float64] */;
  %920 = cast(%919, dtype="float64") /* ty=Tensor[(5, 60), float64] */;
  %921 = @func_3984() /* ty=Tensor[(5, 60), float64] */;
  %922 = cast(%921, dtype="float64") /* ty=Tensor[(5, 60), float64] */;
  %923 = reshape(%920, newshape=[5, 60]) /* ty=Tensor[(5, 60), float64] */;
  %924 = reshape(%922, newshape=[5, 60]) /* ty=Tensor[(5, 60), float64] */;
  %925 = @func_2238(%923, %924) /* ty=(Tensor[(5, 60), float64], Tensor[(5, 60), bool]) */;
  %926 = %918.6;
  %927 = %925.0;
  (%921, %919, %926, %927)
}

def @func_2653(%var_2651: Tensor[(840), float32], %var_2652: Tensor[(65), bool]) -> (Tensor[(5, 60), float32], Tensor[(5, 60), bool], bool, Tensor[(840), float32], Tensor[(65), bool], bool, Tensor[(120), bool]) {
  %944 = fn (%var_2641: Tensor[(840), float32], %var_2642: Tensor[(65), bool]) -> (Tensor[(5, 60), float32], Tensor[(5, 60), bool], bool, Tensor[(840), float32], Tensor[(65), bool], bool, Tensor[(120), bool]) {
    %928 = @func_2269() /* ty=(Tensor[(5, 60), bool], Tensor[(5, 60), bool]) */;
    %929 = %928.0;
    %930 = cast(%929, dtype="float32") /* ty=Tensor[(5, 60), float32] */;
    %931 = @func_2475() /* ty=(Tensor[(5, 60), bool],) */;
    %932 = cast(%var_2641, dtype="float32") /* ty=Tensor[(840), float32] */;
    %933 = cast(%var_2642, dtype="bool") /* ty=Tensor[(65), bool] */;
    %934 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
    %935 = cast(meta[relay.Constant][46] /* ty=Tensor[(120), bool] */, dtype="bool") /* ty=Tensor[(120), bool] */;
    %936 = reshape(%932, newshape=[840]) /* ty=Tensor[(840), float32] */;
    %937 = reshape(%933, newshape=[65, 1]) /* ty=Tensor[(65, 1), bool] */;
    %938 = reshape(%934, newshape=[]) /* ty=bool */;
    %939 = reshape(%935, newshape=[120]) /* ty=Tensor[(120), bool] */;
    %940 = @func_1939(%936, %937, %938, %939) /* ty=(Tensor[(15, 15, 7), float64], Tensor[(15, 15, 7), float64], Tensor[(65), bool], Tensor[(840), float32], Tensor[(65, 1), bool], Tensor[(14, 3, 5), float64], bool, Tensor[(120), bool]) */;
    %941 = atanh(%930) /* ty=Tensor[(5, 60), float32] */;
    %942 = %931.0;
    %943 = %940.6;
    (%941, %942, %943, %var_2641, %var_2642, False /* ty=bool */, meta[relay.Constant][46] /* ty=Tensor[(120), bool] */)
  };
  %944(%var_2651, %var_2652) /* ty=(Tensor[(5, 60), float32], Tensor[(5, 60), bool], bool, Tensor[(840), float32], Tensor[(65), bool], bool, Tensor[(120), bool]) */
}

def @func_3208(%var_3152: Tensor[(15, 6, 11), uint16], %var_3153: Tensor[(15, 6, 11), uint16]) -> (Tensor[(15, 6, 11), bool], Tensor[(5, 60), bool]) {
  %945 = cast(%var_3153, dtype="bool") /* ty=Tensor[(15, 6, 11), bool] */;
  %946 = shape_of(%var_3152, dtype="int32") /* ty=Tensor[(3), int32] */;
  %947 = cast(%var_3152, dtype="bool") /* ty=Tensor[(15, 6, 11), bool] */;
  %948 = dyn.reshape(%945, %946, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %949 = @func_2475() /* ty=(Tensor[(5, 60), bool],) */;
  %950 = greater(%947, %948) /* ty=Tensor[(15, 6, 11), bool] */;
  %951 = %949.0;
  (%950, %951)
}

def @func_6280() -> (Tensor[(5, 60), bool], Tensor[(6, 9, 16), float64], Tensor[(5, 60), float64]) {
  %952 = @func_2475() /* ty=(Tensor[(5, 60), bool],) */;
  %953 = @func_4813() /* ty=(Tensor[(6, 9, 16), float64], Tensor[(14, 3, 5), uint8], Tensor[(210), int8]) */;
  %954 = @func_5997() /* ty=(Tensor[(5, 60), bool],) */;
  %955 = %954.0;
  %956 = cast(%955, dtype="float32") /* ty=Tensor[(5, 60), float32] */;
  %957 = log10(%956) /* ty=Tensor[(5, 60), float32] */;
  %958 = cast(%957, dtype="float64") /* ty=Tensor[(5, 60), float64] */;
  %959 = %952.0;
  %960 = %953.0;
  %961 = atan(%958) /* ty=Tensor[(5, 60), float64] */;
  (%959, %960, %961)
}

def @func_5924() -> (Tensor[(5, 60), bool],) {
  @func_5922() /* ty=(Tensor[(5, 60), bool],) */
}

def @func_10392(%var_10391: Tensor[(14, 13, 8), float64]) -> Tensor[(14, 13, 8), float64] {
  %963 = fn (%var_10387: Tensor[(14, 13, 8), float64]) -> Tensor[(14, 13, 8), float64] {
    %962 = cast(%var_10387, dtype="float64") /* ty=Tensor[(14, 13, 8), float64] */;
    asinh(%962) /* ty=Tensor[(14, 13, 8), float64] */
  };
  %963(%var_10391) /* ty=Tensor[(14, 13, 8), float64] */
}

def @func_9844(%var_9843: Tensor[(5, 60), bool]) -> (Tensor[(5, 60), int16], Tensor[(10, 5, 6), bool]) {
  %974 = fn (%var_9820: Tensor[(5, 60), bool]) -> (Tensor[(5, 60), int16], Tensor[(10, 5, 6), bool]) {
    %964 = @func_9792() /* ty=(Tensor[(5, 60), bool],) */;
    %965 = %964.0;
    %966 = cast(%var_9820, dtype="int16") /* ty=Tensor[(5, 60), int16] */;
    %967 = shape_of(%965, dtype="int32") /* ty=Tensor[(2), int32] */;
    %968 = cast(%965, dtype="int16") /* ty=Tensor[(5, 60), int16] */;
    %969 = dyn.reshape(%966, %967, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %970 = cast(%965, dtype="float32") /* ty=Tensor[(5, 60), float32] */;
    %971 = reshape(%970, newshape=[10, 5, 6]) /* ty=Tensor[(10, 5, 6), float32] */;
    %972 = multiply(%968, %969) /* ty=Tensor[(5, 60), int16] */;
    %973 = @func_1812(%971) /* ty=Tensor[(10, 5, 6), bool] */;
    (%972, %973)
  };
  %974(%var_9843) /* ty=(Tensor[(5, 60), int16], Tensor[(10, 5, 6), bool]) */
}

def @func_5998() -> (Tensor[(5, 60), bool],) {
  %976 = fn () -> (Tensor[(5, 60), bool],) {
    %975 = @func_3420() /* ty=Tensor[(5, 60), bool] */;
    (%975,)
  };
  %976() /* ty=(Tensor[(5, 60), bool],) */
}

def @func_8912() -> Tensor[(864), float64] {
  %977 = @func_2856() /* ty=(Tensor[(864), float64], Tensor[(10, 5, 6), bool], Tensor[(10, 30), float32]) */;
  %977.0
}

def @func_9576() -> (Tensor[(15, 15, 7), float64], Tensor[(10, 30), float32], Tensor[(65), float32], Tensor[(15, 15, 7), float64]) {
  %985 = fn () -> (Tensor[(15, 15, 7), float64], Tensor[(10, 30), float32], Tensor[(65), float32], Tensor[(15, 15, 7), float64]) {
    %978 = @func_9069() /* ty=(Tensor[(15, 15, 7), float64],) */;
    %979 = @func_4348() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(10, 30), float32]) */;
    %980 = @func_4348() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(10, 30), float32]) */;
    %981 = %978.0;
    %982 = %979.1;
    %983 = @func_5735() /* ty=Tensor[(65), float32] */;
    %984 = %980.0;
    (%981, %982, %983, %984)
  };
  %985() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(10, 30), float32], Tensor[(65), float32], Tensor[(15, 15, 7), float64]) */
}

def @func_10503() -> (Tensor[(5, 60), bool],) {
  %987 = fn () -> (Tensor[(5, 60), bool],) {
    %986 = @func_9583() /* ty=Tensor[(5, 60), bool] */;
    (%986,)
  };
  %987() /* ty=(Tensor[(5, 60), bool],) */
}

def @func_4546(%var_4545: Tensor[(840), float32]) -> (Tensor[(5, 60), bool], Tensor[(120), bool], Tensor[(840), float32], Tensor[(65), bool], bool, Tensor[(3, 40), bool], Tensor[(5, 60), float64], Tensor[(5, 60), float32], Tensor[(5, 60), bool], Tensor[(14, 3, 5), float64], Tensor[(10, 30), float32]) {
  %1024 = fn (%var_4486: Tensor[(840), float32]) -> (Tensor[(5, 60), bool], Tensor[(120), bool], Tensor[(840), float32], Tensor[(65), bool], bool, Tensor[(3, 40), bool], Tensor[(5, 60), float64], Tensor[(5, 60), float32], Tensor[(5, 60), bool], Tensor[(14, 3, 5), float64], Tensor[(10, 30), float32]) {
    %988 = @func_2004() /* ty=(Tensor[(5, 60), bool],) */;
    %989 = cast(%var_4486, dtype="float32") /* ty=Tensor[(840), float32] */;
    %990 = cast(meta[relay.Constant][47] /* ty=Tensor[(65), bool] */, dtype="bool") /* ty=Tensor[(65), bool] */;
    %991 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
    %992 = cast(meta[relay.Constant][48] /* ty=Tensor[(3, 40), bool] */, dtype="bool") /* ty=Tensor[(3, 40), bool] */;
    %993 = reshape(%989, newshape=[840]) /* ty=Tensor[(840), float32] */;
    %994 = reshape(%990, newshape=[65, 1]) /* ty=Tensor[(65, 1), bool] */;
    %995 = reshape(%991, newshape=[]) /* ty=bool */;
    %996 = reshape(%992, newshape=[120]) /* ty=Tensor[(120), bool] */;
    %997 = @func_1939(%993, %994, %995, %996) /* ty=(Tensor[(15, 15, 7), float64], Tensor[(15, 15, 7), float64], Tensor[(65), bool], Tensor[(840), float32], Tensor[(65, 1), bool], Tensor[(14, 3, 5), float64], bool, Tensor[(120), bool]) */;
    %998 = %988.0;
    %999 = cast(%998, dtype="float64") /* ty=Tensor[(5, 60), float64] */;
    %1000 = cast(%998, dtype="float64") /* ty=Tensor[(5, 60), float64] */;
    %1001 = reshape(%999, newshape=[5, 60]) /* ty=Tensor[(5, 60), float64] */;
    %1002 = reshape(%1000, newshape=[5, 60]) /* ty=Tensor[(5, 60), float64] */;
    %1003 = @func_2238(%1001, %1002) /* ty=(Tensor[(5, 60), float64], Tensor[(5, 60), bool]) */;
    %1004 = @func_4206() /* ty=(Tensor[(5, 60), float32],) */;
    %1005 = @func_2475() /* ty=(Tensor[(5, 60), bool],) */;
    %1006 = cast(%var_4486, dtype="float32") /* ty=Tensor[(840), float32] */;
    %1007 = cast(meta[relay.Constant][47] /* ty=Tensor[(65), bool] */, dtype="bool") /* ty=Tensor[(65), bool] */;
    %1008 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
    %1009 = %997.7;
    %1010 = cast(%1009, dtype="bool") /* ty=Tensor[(120), bool] */;
    %1011 = reshape(%1006, newshape=[840]) /* ty=Tensor[(840), float32] */;
    %1012 = reshape(%1007, newshape=[65, 1]) /* ty=Tensor[(65, 1), bool] */;
    %1013 = reshape(%1008, newshape=[]) /* ty=bool */;
    %1014 = reshape(%1010, newshape=[120]) /* ty=Tensor[(120), bool] */;
    %1015 = @func_1939(%1011, %1012, %1013, %1014) /* ty=(Tensor[(15, 15, 7), float64], Tensor[(15, 15, 7), float64], Tensor[(65), bool], Tensor[(840), float32], Tensor[(65, 1), bool], Tensor[(14, 3, 5), float64], bool, Tensor[(120), bool]) */;
    %1016 = %1005.0;
    %1017 = cast(%1016, dtype="float32") /* ty=Tensor[(5, 60), float32] */;
    %1018 = reshape(%1017, newshape=[10, 30]) /* ty=Tensor[(10, 30), float32] */;
    %1019 = @func_3120(%1018) /* ty=(Tensor[(10, 30), float32], Tensor[(15, 15, 7), float64], Tensor[(10, 30), uint64]) */;
    %1020 = %1003.0;
    %1021 = %1004.0;
    %1022 = %1015.5;
    %1023 = %1019.0;
    (%998, %1009, %var_4486, meta[relay.Constant][47] /* ty=Tensor[(65), bool] */, False /* ty=bool */, meta[relay.Constant][48] /* ty=Tensor[(3, 40), bool] */, %1020, %1021, %1016, %1022, %1023)
  };
  %1024(%var_4545) /* ty=(Tensor[(5, 60), bool], Tensor[(120), bool], Tensor[(840), float32], Tensor[(65), bool], bool, Tensor[(3, 40), bool], Tensor[(5, 60), float64], Tensor[(5, 60), float32], Tensor[(5, 60), bool], Tensor[(14, 3, 5), float64], Tensor[(10, 30), float32]) */
}

def @func_7143(%var_7131: Tensor[(3, 4, 13), float32]) -> (Tensor[(3, 4, 13), float32],) {
  %1025 = cast(%var_7131, dtype="float32") /* ty=Tensor[(3, 4, 13), float32] */;
  %1026 = shape_of(meta[relay.Constant][49] /* ty=Tensor[(3, 4, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1027 = cast(meta[relay.Constant][49] /* ty=Tensor[(3, 4, 13), float32] */, dtype="float32") /* ty=Tensor[(3, 4, 13), float32] */;
  %1028 = dyn.reshape(%1025, %1026, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1029 = floor_mod(%1027, %1028) /* ty=Tensor[(3, 4, 13), float32] */;
  (%1029,)
}

def @func_3491() -> (Tensor[(5, 60), float32],) {
  %1030 = @func_2475() /* ty=(Tensor[(5, 60), bool],) */;
  %1031 = %1030.0;
  %1032 = cast(%1031, dtype="float32") /* ty=Tensor[(5, 60), float32] */;
  %1033 = sinh(%1032) /* ty=Tensor[(5, 60), float32] */;
  (%1033,)
}

def @func_4414() -> (Tensor[(6, 9, 16), float32], Tensor[(5, 60), float64]) {
  %1037 = fn () -> (Tensor[(6, 9, 16), float32], Tensor[(5, 60), float64]) {
    %1034 = @func_4282() /* ty=(Tensor[(6, 9, 16), float32], Tensor[(6, 9, 16), float64]) */;
    %1035 = %1034.0;
    %1036 = @func_3984() /* ty=Tensor[(5, 60), float64] */;
    (%1035, %1036)
  };
  %1037() /* ty=(Tensor[(6, 9, 16), float32], Tensor[(5, 60), float64]) */
}

def @func_4785() -> (Tensor[(5, 60), float64],) {
  %1038 = @func_2179() /* ty=Tensor[(5, 60), float64] */;
  (%1038,)
}

def @func_10442() -> Tensor[(5, 60), float64] {
  %1040 = fn () -> Tensor[(5, 60), float64] {
    %1039 = @func_10022() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(3, 4, 13), float32], Tensor[(156), float32], Tensor[(5, 60), bool], Tensor[(5, 60), float64]) */;
    %1039.4
  };
  %1040() /* ty=Tensor[(5, 60), float64] */
}

def @func_5463() -> (Tensor[(5, 60), bool], Tensor[(10, 30), float32]) {
  %1041 = @func_3404() /* ty=(Tensor[(5, 60), bool],) */;
  %1042 = @func_3989() /* ty=Tensor[(10, 30), float32] */;
  %1043 = cast(%1042, dtype="float32") /* ty=Tensor[(10, 30), float32] */;
  %1044 = %1041.0;
  %1045 = acosh(%1043) /* ty=Tensor[(10, 30), float32] */;
  (%1044, %1045)
}

def @func_7611() -> (Tensor[(65), float32], Tensor[(300, 1), float32]) {
  @func_7609() /* ty=(Tensor[(65), float32], Tensor[(300, 1), float32]) */
}

def @func_2269() -> (Tensor[(5, 60), bool], Tensor[(5, 60), bool]) {
  %1046 = @func_1974() /* ty=(Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) */;
  %1047 = @func_2088() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) */;
  %1048 = %1046.1;
  %1049 = %1047.3;
  (%1048, %1049)
}

def @func_6703() -> (Tensor[(65), float32], Tensor[(120), bool]) {
  %1050 = @func_6439() /* ty=Tensor[(65), float32] */;
  %1051 = @func_3252() /* ty=Tensor[(120), bool] */;
  (%1050, %1051)
}

def @func_6836() -> (Tensor[(5, 60), bool],) {
  %1054 = fn () -> (Tensor[(5, 60), bool],) {
    %1052 = @func_2475() /* ty=(Tensor[(5, 60), bool],) */;
    %1053 = %1052.0;
    (%1053,)
  };
  %1054() /* ty=(Tensor[(5, 60), bool],) */
}

def @func_2951(%var_2949: Tensor[(5, 60), bool], %var_2950: Tensor[(1, 210), int8]) -> (Tensor[(5, 60), int8], Tensor[(14, 3, 5), uint8], Tensor[(1, 210), int8]) {
  %1068 = fn (%var_2937: Tensor[(5, 60), bool], %var_2946: Tensor[(1, 210), int8]) -> (Tensor[(5, 60), int8], Tensor[(14, 3, 5), uint8], Tensor[(1, 210), int8]) {
    %1055 = @func_1974() /* ty=(Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) */;
    %1056 = %1055.1;
    %1057 = cast(%var_2937, dtype="int8") /* ty=Tensor[(5, 60), int8] */;
    %1058 = shape_of(%1056, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1059 = cast(%1056, dtype="int8") /* ty=Tensor[(5, 60), int8] */;
    %1060 = dyn.reshape(%1057, %1058, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
    %1061 = cast(%var_2946, dtype="int8") /* ty=Tensor[(1, 210), int8] */;
    %1062 = cast(%var_2946, dtype="int8") /* ty=Tensor[(1, 210), int8] */;
    %1063 = reshape(%1061, newshape=[14, 3, 5]) /* ty=Tensor[(14, 3, 5), int8] */;
    %1064 = reshape(%1062, newshape=[14, 3, 5]) /* ty=Tensor[(14, 3, 5), int8] */;
    %1065 = @func_105(%1063, %1064) /* ty=(Tensor[(14, 3, 5), float64], Tensor[(14, 3, 5), uint64], Tensor[(14, 3, 5), uint8]) */;
    %1066 = bitwise_xor(%1059, %1060) /* ty=Tensor[(5, 60), int8] */;
    %1067 = %1065.2;
    (%1066, %1067, %var_2946)
  };
  %1068(%var_2949, %var_2950) /* ty=(Tensor[(5, 60), int8], Tensor[(14, 3, 5), uint8], Tensor[(1, 210), int8]) */
}

def @func_10613() -> Tensor[(5, 60), float32] {
  @func_9513() /* ty=Tensor[(5, 60), float32] */
}

def @func_8269() -> (Tensor[(65), float32],) {
  @func_8267() /* ty=(Tensor[(65), float32],) */
}

def @func_1812(%var_1783: Tensor[(10, 5, 6), float32]) -> Tensor[(10, 5, 6), bool] {
  %1069 = cast(%var_1783, dtype="float32") /* ty=Tensor[(10, 5, 6), float32] */;
  %1070 = asin(%1069) /* ty=Tensor[(10, 5, 6), float32] */;
  %1071 = cast(%1070, dtype="bool") /* ty=Tensor[(10, 5, 6), bool] */;
  %1072 = shape_of(%var_1783, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1073 = cast(%var_1783, dtype="bool") /* ty=Tensor[(10, 5, 6), bool] */;
  %1074 = dyn.reshape(%1071, %1072, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%1073, %1074) /* ty=Tensor[(10, 5, 6), bool] */
}

def @func_9755() -> Tensor[(5, 60), float64] {
  %1078 = fn () -> Tensor[(5, 60), float64] {
    %1075 = @func_4785() /* ty=(Tensor[(5, 60), float64],) */;
    %1076 = %1075.0;
    %1077 = cast(%1076, dtype="float64") /* ty=Tensor[(5, 60), float64] */;
    acosh(%1077) /* ty=Tensor[(5, 60), float64] */
  };
  %1078() /* ty=Tensor[(5, 60), float64] */
}

def @func_4391() -> (Tensor[(65), bool], Tensor[(5, 60), bool]) {
  @func_4389() /* ty=(Tensor[(65), bool], Tensor[(5, 60), bool]) */
}

def @func_6623() -> (Tensor[(5, 60), bool],) {
  %1081 = fn () -> (Tensor[(5, 60), bool],) {
    %1079 = @func_3404() /* ty=(Tensor[(5, 60), bool],) */;
    %1080 = %1079.0;
    (%1080,)
  };
  %1081() /* ty=(Tensor[(5, 60), bool],) */
}

def @func_3122(%var_3121: Tensor[(10, 30), float32]) -> (Tensor[(10, 30), float32], Tensor[(15, 15, 7), float64], Tensor[(10, 30), uint64]) {
  %1103 = fn (%var_3065: Tensor[(10, 30), float32]) -> (Tensor[(10, 30), float32], Tensor[(15, 15, 7), float64], Tensor[(10, 30), uint64]) {
    %1082 = @func_2856() /* ty=(Tensor[(864), float64], Tensor[(10, 5, 6), bool], Tensor[(10, 30), float32]) */;
    %1083 = %1082.2;
    %1084 = cast(%1083, dtype="float32") /* ty=Tensor[(10, 30), float32] */;
    %1085 = @func_2088() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) */;
    %1086 = cast(%var_3065, dtype="bool") /* ty=Tensor[(10, 30), bool] */;
    %1087 = shape_of(%1083, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1088 = cast(%1083, dtype="bool") /* ty=Tensor[(10, 30), bool] */;
    %1089 = dyn.reshape(%1086, %1087, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %1090 = less(%1088, %1089) /* ty=Tensor[(10, 30), bool] */;
    %1091 = cast(%1083, dtype="uint64") /* ty=Tensor[(10, 30), uint64] */;
    %1092 = shape_of(%1090, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1093 = cast(%1090, dtype="uint64") /* ty=Tensor[(10, 30), uint64] */;
    %1094 = dyn.reshape(%1091, %1092, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %1095 = subtract(%1093, %1094) /* ty=Tensor[(10, 30), uint64] */;
    %1096 = cast(%1083, dtype="uint64") /* ty=Tensor[(10, 30), uint64] */;
    %1097 = shape_of(%1095, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1098 = cast(%1095, dtype="uint64") /* ty=Tensor[(10, 30), uint64] */;
    %1099 = dyn.reshape(%1096, %1097, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %1100 = cosh(%1084) /* ty=Tensor[(10, 30), float32] */;
    %1101 = %1085.0;
    %1102 = left_shift(%1098, %1099) /* ty=Tensor[(10, 30), uint64] */;
    (%1100, %1101, %1102)
  };
  %1103(%var_3121) /* ty=(Tensor[(10, 30), float32], Tensor[(15, 15, 7), float64], Tensor[(10, 30), uint64]) */
}

def @func_5538(%var_5488: Tensor[(840), float32], %var_5490: bool, %var_5491: Tensor[(60, 2), bool]) -> (Tensor[(5, 60), bool], Tensor[(15, 15, 7), float64], Tensor[(840), float32], Tensor[(840), float32], Tensor[(65), bool], Tensor[(60, 2), int8], Tensor[(5, 60), bool]) {
  %1104 = @func_3971() /* ty=(Tensor[(5, 60), bool], Tensor[(15, 15, 7), float64], Tensor[(5, 60), bool], Tensor[(5, 60), bool], Tensor[(120), bool], Tensor[(840), float32], Tensor[(65), bool], Tensor[(6, 9, 16), float64], Tensor[(5, 60), float64], Tensor[(5, 60), bool]) */;
  %1105 = cast(%var_5488, dtype="float32") /* ty=Tensor[(840), float32] */;
  %1106 = cast(meta[relay.Constant][50] /* ty=Tensor[(65), bool] */, dtype="bool") /* ty=Tensor[(65), bool] */;
  %1107 = cast(%var_5490, dtype="bool") /* ty=bool */;
  %1108 = cast(%var_5491, dtype="bool") /* ty=Tensor[(60, 2), bool] */;
  %1109 = reshape(%1105, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %1110 = reshape(%1106, newshape=[65, 1]) /* ty=Tensor[(65, 1), bool] */;
  %1111 = reshape(%1107, newshape=[]) /* ty=bool */;
  %1112 = reshape(%1108, newshape=[120]) /* ty=Tensor[(120), bool] */;
  %1113 = @func_1939(%1109, %1110, %1111, %1112) /* ty=(Tensor[(15, 15, 7), float64], Tensor[(15, 15, 7), float64], Tensor[(65), bool], Tensor[(840), float32], Tensor[(65, 1), bool], Tensor[(14, 3, 5), float64], bool, Tensor[(120), bool]) */;
  %1114 = cast(%var_5490, dtype="int8") /* ty=int8 */;
  %1115 = cast(%var_5491, dtype="int8") /* ty=Tensor[(60, 2), int8] */;
  %1116 = @func_5463() /* ty=(Tensor[(5, 60), bool], Tensor[(10, 30), float32]) */;
  %1117 = %1104.2;
  %1118 = @func_4026() /* ty=Tensor[(15, 15, 7), float64] */;
  %1119 = %1113.3;
  %1120 = bitwise_or(%1114, %1115) /* ty=Tensor[(60, 2), int8] */;
  %1121 = %1116.0;
  (%1117, %1118, %1119, %var_5488, meta[relay.Constant][50] /* ty=Tensor[(65), bool] */, %1120, %1121)
}

def @func_10192(%var_10190: Tensor[(1, 210), int8]) -> (Tensor[(65), float32], Tensor[(1, 210), int8], Tensor[(300), bool], Tensor[(1, 210), int8], Tensor[(5, 60), bool], Tensor[(10, 5, 6), bool]) {
  @func_10189(%var_10190) /* ty=(Tensor[(65), float32], Tensor[(1, 210), int8], Tensor[(300), bool], Tensor[(1, 210), int8], Tensor[(5, 60), bool], Tensor[(10, 5, 6), bool]) */
}

def @func_9631(%var_9630: Tensor[(1, 65), bool]) -> (Tensor[(10, 30), float32], Tensor[(65), bool], Tensor[(420, 2), float32], Tensor[(1, 65), bool]) {
  %1130 = fn (%var_9624: Tensor[(1, 65), bool]) -> (Tensor[(10, 30), float32], Tensor[(65), bool], Tensor[(420, 2), float32], Tensor[(1, 65), bool]) {
    %1122 = @func_2856() /* ty=(Tensor[(864), float64], Tensor[(10, 5, 6), bool], Tensor[(10, 30), float32]) */;
    %1123 = cast(meta[relay.Constant][51] /* ty=Tensor[(420, 2), float32] */, dtype="float32") /* ty=Tensor[(420, 2), float32] */;
    %1124 = cast(%var_9624, dtype="bool") /* ty=Tensor[(1, 65), bool] */;
    %1125 = reshape(%1123, newshape=[840]) /* ty=Tensor[(840), float32] */;
    %1126 = reshape(%1124, newshape=[65]) /* ty=Tensor[(65), bool] */;
    %1127 = @func_4932(%1125, %1126) /* ty=(Tensor[(6, 9, 16), float32], Tensor[(65), bool], Tensor[(840), float32], Tensor[(65), bool]) */;
    %1128 = %1122.2;
    %1129 = %1127.1;
    (%1128, %1129, meta[relay.Constant][51] /* ty=Tensor[(420, 2), float32] */, %var_9624)
  };
  %1130(%var_9630) /* ty=(Tensor[(10, 30), float32], Tensor[(65), bool], Tensor[(420, 2), float32], Tensor[(1, 65), bool]) */
}

def @func_1945(%var_1941: Tensor[(840), float32], %var_1942: Tensor[(65, 1), bool], %var_1943: bool, %var_1944: Tensor[(120), bool]) -> (Tensor[(15, 15, 7), float64], Tensor[(15, 15, 7), float64], Tensor[(65), bool], Tensor[(840), float32], Tensor[(65, 1), bool], Tensor[(14, 3, 5), float64], bool, Tensor[(120), bool]) {
  @func_1939(%var_1941, %var_1942, %var_1943, %var_1944) /* ty=(Tensor[(15, 15, 7), float64], Tensor[(15, 15, 7), float64], Tensor[(65), bool], Tensor[(840), float32], Tensor[(65, 1), bool], Tensor[(14, 3, 5), float64], bool, Tensor[(120), bool]) */
}

def @func_2576() -> (Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) {
  %1134 = fn () -> (Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) {
    %1131 = @func_2428() /* ty=(Tensor[(14, 1, 13), bool], Tensor[(6, 9, 16), float64], Tensor[(120), bool], Tensor[(840), float32], Tensor[(65), bool], Tensor[(120), bool], Tensor[(6, 9, 16), float64]) */;
    %1132 = %1131.1;
    %1133 = @func_2482() /* ty=Tensor[(5, 60), bool] */;
    (%1132, %1133)
  };
  %1134() /* ty=(Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) */
}

def @func_8490() -> (Tensor[(6, 9, 16), float32],) {
  %1135 = @func_4151() /* ty=(Tensor[(6, 9, 16), float32], Tensor[(5, 60), uint64], Tensor[(300, 1), float32], Tensor[(1, 210), int8], Tensor[(5, 42), int8]) */;
  %1136 = %1135.0;
  (%1136,)
}

def @func_10615() -> Tensor[(5, 60), float32] {
  @func_10613() /* ty=Tensor[(5, 60), float32] */
}

def @func_11164() -> (Tensor[(864), float64], Tensor[(5, 60), bool]) {
  @func_11162() /* ty=(Tensor[(864), float64], Tensor[(5, 60), bool]) */
}

def @func_7586() -> (Tensor[(5, 60), bool], Tensor[(5, 60), bool], Tensor[(10, 30), float32], Tensor[(6, 9, 16), float32]) {
  %1137 = @func_6280() /* ty=(Tensor[(5, 60), bool], Tensor[(6, 9, 16), float64], Tensor[(5, 60), float64]) */;
  %1138 = @func_6622() /* ty=(Tensor[(5, 60), bool],) */;
  %1139 = @func_5463() /* ty=(Tensor[(5, 60), bool], Tensor[(10, 30), float32]) */;
  %1140 = @func_4413() /* ty=(Tensor[(6, 9, 16), float32], Tensor[(5, 60), float64]) */;
  %1141 = %1137.0;
  %1142 = %1138.0;
  %1143 = %1139.1;
  %1144 = %1140.0;
  (%1141, %1142, %1143, %1144)
}

def @func_4787() -> (Tensor[(5, 60), float64],) {
  @func_4785() /* ty=(Tensor[(5, 60), float64],) */
}

def @func_7404() -> (Tensor[(6, 9, 16), float32], Tensor[(10, 5, 6), bool], Tensor[(300), float32], Tensor[(65), bool]) {
  %1145 = @func_4151() /* ty=(Tensor[(6, 9, 16), float32], Tensor[(5, 60), uint64], Tensor[(300, 1), float32], Tensor[(1, 210), int8], Tensor[(5, 42), int8]) */;
  %1146 = cast(meta[relay.Constant][52] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
  %1147 = reshape(%1146, newshape=[10, 5, 6]) /* ty=Tensor[(10, 5, 6), float32] */;
  %1148 = %1145.0;
  %1149 = @func_1812(%1147) /* ty=Tensor[(10, 5, 6), bool] */;
  %1150 = @func_3477() /* ty=Tensor[(65), bool] */;
  (%1148, %1149, meta[relay.Constant][52] /* ty=Tensor[(300), float32] */, %1150)
}

def @func_9473() -> (Tensor[(10, 30), float32],) {
  %1153 = fn () -> (Tensor[(10, 30), float32],) {
    %1151 = @func_2856() /* ty=(Tensor[(864), float64], Tensor[(10, 5, 6), bool], Tensor[(10, 30), float32]) */;
    %1152 = %1151.2;
    (%1152,)
  };
  %1153() /* ty=(Tensor[(10, 30), float32],) */
}

def @func_3821(%var_3819: Tensor[(2, 16, 13), float32], %var_3820: Tensor[(2, 16, 13), float32]) -> Tensor[(2, 16, 13), float32] {
  @func_3817(%var_3819, %var_3820) /* ty=Tensor[(2, 16, 13), float32] */
}

def @func_8837() -> (Tensor[(5, 60), bool],) {
  %1154 = @func_5997() /* ty=(Tensor[(5, 60), bool],) */;
  %1155 = %1154.0;
  (%1155,)
}

def @func_6059(%var_6058: Tensor[(840), float32]) -> (Tensor[(840), uint64], Tensor[(6, 9, 16), float64]) {
  %1165 = fn (%var_6039: Tensor[(840), float32]) -> (Tensor[(840), uint64], Tensor[(6, 9, 16), float64]) {
    %1156 = @func_3971() /* ty=(Tensor[(5, 60), bool], Tensor[(15, 15, 7), float64], Tensor[(5, 60), bool], Tensor[(5, 60), bool], Tensor[(120), bool], Tensor[(840), float32], Tensor[(65), bool], Tensor[(6, 9, 16), float64], Tensor[(5, 60), float64], Tensor[(5, 60), bool]) */;
    %1157 = %1156.5;
    %1158 = cast(%var_6039, dtype="uint64") /* ty=Tensor[(840), uint64] */;
    %1159 = shape_of(%1157, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1160 = cast(%1157, dtype="uint64") /* ty=Tensor[(840), uint64] */;
    %1161 = dyn.reshape(%1158, %1159, newshape=[]) /* ty=Tensor[(?), uint64] */;
    %1162 = @func_2575() /* ty=(Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) */;
    %1163 = bitwise_xor(%1160, %1161) /* ty=Tensor[(840), uint64] */;
    %1164 = %1162.0;
    (%1163, %1164)
  };
  %1165(%var_6058) /* ty=(Tensor[(840), uint64], Tensor[(6, 9, 16), float64]) */
}

def @func_10820() -> (Tensor[(5, 60), bool], Tensor[(120), bool], Tensor[(5, 60), uint64]) {
  %1177 = fn () -> (Tensor[(5, 60), bool], Tensor[(120), bool], Tensor[(5, 60), uint64]) {
    %1166 = @func_6835() /* ty=(Tensor[(5, 60), bool],) */;
    %1167 = @func_10613() /* ty=Tensor[(5, 60), float32] */;
    %1168 = @func_4151() /* ty=(Tensor[(6, 9, 16), float32], Tensor[(5, 60), uint64], Tensor[(300, 1), float32], Tensor[(1, 210), int8], Tensor[(5, 42), int8]) */;
    %1169 = %1168.2;
    %1170 = cast(%1169, dtype="uint64") /* ty=Tensor[(300, 1), uint64] */;
    %1171 = shape_of(%1167, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1172 = cast(%1167, dtype="uint64") /* ty=Tensor[(5, 60), uint64] */;
    %1173 = dyn.reshape(%1170, %1171, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %1174 = %1166.0;
    %1175 = @func_10403() /* ty=Tensor[(120), bool] */;
    %1176 = minimum(%1172, %1173) /* ty=Tensor[(5, 60), uint64] */;
    (%1174, %1175, %1176)
  };
  %1177() /* ty=(Tensor[(5, 60), bool], Tensor[(120), bool], Tensor[(5, 60), uint64]) */
}

def @func_11020() -> (Tensor[(10, 30), float32], Tensor[(3, 4, 13), float32], Tensor[(156), float32], Tensor[(5, 60), bool]) {
  @func_11018() /* ty=(Tensor[(10, 30), float32], Tensor[(3, 4, 13), float32], Tensor[(156), float32], Tensor[(5, 60), bool]) */
}

def @func_4932(%var_4918: Tensor[(840), float32], %var_4919: Tensor[(65), bool]) -> (Tensor[(6, 9, 16), float32], Tensor[(65), bool], Tensor[(840), float32], Tensor[(65), bool]) {
  %1178 = @func_4282() /* ty=(Tensor[(6, 9, 16), float32], Tensor[(6, 9, 16), float64]) */;
  %1179 = cast(%var_4918, dtype="float32") /* ty=Tensor[(840), float32] */;
  %1180 = cast(%var_4919, dtype="bool") /* ty=Tensor[(65), bool] */;
  %1181 = reshape(%1179, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %1182 = reshape(%1180, newshape=[65]) /* ty=Tensor[(65), bool] */;
  %1183 = @func_2650(%1181, %1182) /* ty=(Tensor[(5, 60), float32], Tensor[(5, 60), bool], bool, Tensor[(840), float32], Tensor[(65), bool], bool, Tensor[(120), bool]) */;
  %1184 = %1178.0;
  %1185 = %1183.4;
  (%1184, %1185, %var_4918, %var_4919)
}

def @func_5685(%var_5681: Tensor[(840), float32], %var_5682: Tensor[(1, 65), bool], %var_5683: bool, %var_5684: Tensor[(120), bool]) -> (Tensor[(840), float32], Tensor[(840), float32], Tensor[(120), bool], Tensor[(5, 60), float32], Tensor[(1, 65), float64]) {
  %1203 = fn (%var_5638: Tensor[(840), float32], %var_5639: Tensor[(1, 65), bool], %var_5640: bool, %var_5641: Tensor[(120), bool]) -> (Tensor[(840), float32], Tensor[(840), float32], Tensor[(120), bool], Tensor[(5, 60), float32], Tensor[(1, 65), float64]) {
    %1186 = cast(%var_5638, dtype="float32") /* ty=Tensor[(840), float32] */;
    %1187 = cast(%var_5639, dtype="bool") /* ty=Tensor[(1, 65), bool] */;
    %1188 = cast(%var_5640, dtype="bool") /* ty=bool */;
    %1189 = cast(%var_5641, dtype="bool") /* ty=Tensor[(120), bool] */;
    %1190 = reshape(%1186, newshape=[840]) /* ty=Tensor[(840), float32] */;
    %1191 = reshape(%1187, newshape=[65, 1]) /* ty=Tensor[(65, 1), bool] */;
    %1192 = reshape(%1188, newshape=[]) /* ty=bool */;
    %1193 = reshape(%1189, newshape=[120]) /* ty=Tensor[(120), bool] */;
    %1194 = @func_1939(%1190, %1191, %1192, %1193) /* ty=(Tensor[(15, 15, 7), float64], Tensor[(15, 15, 7), float64], Tensor[(65), bool], Tensor[(840), float32], Tensor[(65, 1), bool], Tensor[(14, 3, 5), float64], bool, Tensor[(120), bool]) */;
    %1195 = @func_3664() /* ty=(Tensor[(5, 60), float64],) */;
    %1196 = %1195.0;
    %1197 = cast(%1196, dtype="float32") /* ty=Tensor[(5, 60), float32] */;
    %1198 = cast(%var_5639, dtype="float64") /* ty=Tensor[(1, 65), float64] */;
    %1199 = cast(%var_5640, dtype="float64") /* ty=float64 */;
    %1200 = %1194.3;
    %1201 = sqrt(%1197) /* ty=Tensor[(5, 60), float32] */;
    %1202 = floor_mod(%1198, %1199) /* ty=Tensor[(1, 65), float64] */;
    (%1200, %var_5638, %var_5641, %1201, %1202)
  };
  %1203(%var_5681, %var_5682, %var_5683, %var_5684) /* ty=(Tensor[(840), float32], Tensor[(840), float32], Tensor[(120), bool], Tensor[(5, 60), float32], Tensor[(1, 65), float64]) */
}

def @func_9159(%var_9157: Tensor[(840), float32]) -> (Tensor[(5, 60), float32], Tensor[(6, 9, 16), float64], Tensor[(840), float32]) {
  @func_9156(%var_9157) /* ty=(Tensor[(5, 60), float32], Tensor[(6, 9, 16), float64], Tensor[(840), float32]) */
}

def @func_4152() -> (Tensor[(6, 9, 16), float32], Tensor[(5, 60), uint64], Tensor[(300, 1), float32], Tensor[(1, 210), int8], Tensor[(5, 42), int8]) {
  %1223 = fn () -> (Tensor[(6, 9, 16), float32], Tensor[(5, 60), uint64], Tensor[(300, 1), float32], Tensor[(1, 210), int8], Tensor[(5, 42), int8]) {
    %1204 = @func_2867() /* ty=(Tensor[(6, 9, 16), float64],) */;
    %1205 = %1204.0;
    %1206 = cast(meta[relay.Constant][53] /* ty=Tensor[(6, 9, 16), float64] */, dtype="float32") /* ty=Tensor[(6, 9, 16), float32] */;
    %1207 = shape_of(%1205, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1208 = cast(%1205, dtype="float32") /* ty=Tensor[(6, 9, 16), float32] */;
    %1209 = dyn.reshape(%1206, %1207, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %1210 = cast(meta[relay.Constant][54] /* ty=Tensor[(300, 1), bool] */, dtype="bool") /* ty=Tensor[(300, 1), bool] */;
    %1211 = reshape(%1210, newshape=[5, 60]) /* ty=Tensor[(5, 60), bool] */;
    %1212 = @func_2141(%1211) /* ty=(Tensor[(5, 60), bool], Tensor[(5, 60), uint64]) */;
    %1213 = cast(meta[relay.Constant][54] /* ty=Tensor[(300, 1), bool] */, dtype="float32") /* ty=Tensor[(300, 1), float32] */;
    %1214 = cast(meta[relay.Constant][54] /* ty=Tensor[(300, 1), bool] */, dtype="bool") /* ty=Tensor[(300, 1), bool] */;
    %1215 = cast(meta[relay.Constant][55] /* ty=Tensor[(5, 42), int8] */, dtype="int8") /* ty=Tensor[(5, 42), int8] */;
    %1216 = reshape(%1214, newshape=[5, 60]) /* ty=Tensor[(5, 60), bool] */;
    %1217 = reshape(%1215, newshape=[1, 210]) /* ty=Tensor[(1, 210), int8] */;
    %1218 = @func_2948(%1216, %1217) /* ty=(Tensor[(5, 60), int8], Tensor[(14, 3, 5), uint8], Tensor[(1, 210), int8]) */;
    %1219 = mod(%1208, %1209) /* ty=Tensor[(6, 9, 16), float32] */;
    %1220 = %1212.1;
    %1221 = sinh(%1213) /* ty=Tensor[(300, 1), float32] */;
    %1222 = %1218.2;
    (%1219, %1220, %1221, %1222, meta[relay.Constant][55] /* ty=Tensor[(5, 42), int8] */)
  };
  %1223() /* ty=(Tensor[(6, 9, 16), float32], Tensor[(5, 60), uint64], Tensor[(300, 1), float32], Tensor[(1, 210), int8], Tensor[(5, 42), int8]) */
}

def @func_10189(%var_10168: Tensor[(1, 210), int8]) -> (Tensor[(65), float32], Tensor[(1, 210), int8], Tensor[(300), bool], Tensor[(1, 210), int8], Tensor[(5, 60), bool], Tensor[(10, 5, 6), bool]) {
  %1224 = cast(meta[relay.Constant][56] /* ty=Tensor[(300), bool] */, dtype="bool") /* ty=Tensor[(300), bool] */;
  %1225 = cast(%var_10168, dtype="int8") /* ty=Tensor[(1, 210), int8] */;
  %1226 = reshape(%1224, newshape=[5, 60]) /* ty=Tensor[(5, 60), bool] */;
  %1227 = reshape(%1225, newshape=[1, 210]) /* ty=Tensor[(1, 210), int8] */;
  %1228 = @func_2948(%1226, %1227) /* ty=(Tensor[(5, 60), int8], Tensor[(14, 3, 5), uint8], Tensor[(1, 210), int8]) */;
  %1229 = @func_3404() /* ty=(Tensor[(5, 60), bool],) */;
  %1230 = cast(meta[relay.Constant][56] /* ty=Tensor[(300), bool] */, dtype="float32") /* ty=Tensor[(300), float32] */;
  %1231 = reshape(%1230, newshape=[10, 5, 6]) /* ty=Tensor[(10, 5, 6), float32] */;
  %1232 = @func_5735() /* ty=Tensor[(65), float32] */;
  %1233 = %1228.2;
  %1234 = %1229.0;
  %1235 = @func_1812(%1231) /* ty=Tensor[(10, 5, 6), bool] */;
  (%1232, %1233, meta[relay.Constant][56] /* ty=Tensor[(300), bool] */, %var_10168, %1234, %1235)
}

def @func_2143(%var_2142: Tensor[(5, 60), bool]) -> (Tensor[(5, 60), bool], Tensor[(5, 60), uint64]) {
  %1248 = fn (%var_2101: Tensor[(5, 60), bool]) -> (Tensor[(5, 60), bool], Tensor[(5, 60), uint64]) {
    %1236 = @func_2004() /* ty=(Tensor[(5, 60), bool],) */;
    %1237 = %1236.0;
    %1238 = cast(%var_2101, dtype="bool") /* ty=Tensor[(5, 60), bool] */;
    %1239 = shape_of(%1237, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1240 = cast(%1237, dtype="bool") /* ty=Tensor[(5, 60), bool] */;
    %1241 = dyn.reshape(%1238, %1239, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %1242 = cast(%var_2101, dtype="uint64") /* ty=Tensor[(5, 60), uint64] */;
    %1243 = shape_of(%1237, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1244 = cast(%1237, dtype="uint64") /* ty=Tensor[(5, 60), uint64] */;
    %1245 = dyn.reshape(%1242, %1243, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %1246 = greater(%1240, %1241) /* ty=Tensor[(5, 60), bool] */;
    %1247 = left_shift(%1244, %1245) /* ty=Tensor[(5, 60), uint64] */;
    (%1246, %1247)
  };
  %1248(%var_2142) /* ty=(Tensor[(5, 60), bool], Tensor[(5, 60), uint64]) */
}

def @func_6705() -> (Tensor[(65), float32], Tensor[(120), bool]) {
  @func_6703() /* ty=(Tensor[(65), float32], Tensor[(120), bool]) */
}

def @func_5181() -> (Tensor[(5, 60), float64],) {
  @func_5179() /* ty=(Tensor[(5, 60), float64],) */
}

def @func_7677() -> (Tensor[(5, 60), float32], Tensor[(5, 60), float64], Tensor[(10, 5, 6), bool], Tensor[(5, 60), bool]) {
  %1256 = fn () -> (Tensor[(5, 60), float32], Tensor[(5, 60), float64], Tensor[(10, 5, 6), bool], Tensor[(5, 60), bool]) {
    %1249 = @func_6186() /* ty=(Tensor[(5, 60), float32], Tensor[(15, 15, 7), float64]) */;
    %1250 = @func_7404() /* ty=(Tensor[(6, 9, 16), float32], Tensor[(10, 5, 6), bool], Tensor[(300), float32], Tensor[(65), bool]) */;
    %1251 = @func_3404() /* ty=(Tensor[(5, 60), bool],) */;
    %1252 = %1249.0;
    %1253 = @func_5891() /* ty=Tensor[(5, 60), float64] */;
    %1254 = %1250.1;
    %1255 = %1251.0;
    (%1252, %1253, %1254, %1255)
  };
  %1256() /* ty=(Tensor[(5, 60), float32], Tensor[(5, 60), float64], Tensor[(10, 5, 6), bool], Tensor[(5, 60), bool]) */
}

def @func_8429() -> (Tensor[(5, 60), bool], Tensor[(65), float32], Tensor[(15, 15, 7), float64], Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(15, 15, 7), float64], Tensor[(5, 60), bool], Tensor[(5, 60), bool]) {
  @func_8427() /* ty=(Tensor[(5, 60), bool], Tensor[(65), float32], Tensor[(15, 15, 7), float64], Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(15, 15, 7), float64], Tensor[(5, 60), bool], Tensor[(5, 60), bool]) */
}

def @func_9071() -> (Tensor[(15, 15, 7), float64],) {
  @func_9069() /* ty=(Tensor[(15, 15, 7), float64],) */
}

def @func_8448() -> Tensor[(210), int8] {
  %1257 = @func_4813() /* ty=(Tensor[(6, 9, 16), float64], Tensor[(14, 3, 5), uint8], Tensor[(210), int8]) */;
  %1257.2
}

def @func_10293(%var_10275: Tensor[(990), uint16], %var_10277: Tensor[(65), float32]) -> (Tensor[(5, 60), bool], Tensor[(990), uint16], Tensor[(65), float32], Tensor[(5, 60), float64]) {
  %1258 = cast(%var_10275, dtype="uint16") /* ty=Tensor[(990), uint16] */;
  %1259 = cast(%var_10275, dtype="uint16") /* ty=Tensor[(990), uint16] */;
  %1260 = reshape(%1258, newshape=[15, 6, 11]) /* ty=Tensor[(15, 6, 11), uint16] */;
  %1261 = reshape(%1259, newshape=[15, 6, 11]) /* ty=Tensor[(15, 6, 11), uint16] */;
  %1262 = @func_3208(%1260, %1261) /* ty=(Tensor[(15, 6, 11), bool], Tensor[(5, 60), bool]) */;
  %1263 = @func_3334() /* ty=Tensor[(65), float32] */;
  %1264 = cast(%var_10277, dtype="float32") /* ty=Tensor[(65), float32] */;
  %1265 = shape_of(%1263, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1266 = cast(%1263, dtype="float32") /* ty=Tensor[(65), float32] */;
  %1267 = dyn.reshape(%1264, %1265, newshape=[]) /* ty=Tensor[(?), float32] */;
  %1268 = @func_4086() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(5, 60), float64]) */;
  %1269 = %1262.1;
  %1270 = floor_mod(%1266, %1267) /* ty=Tensor[(65), float32] */;
  %1271 = %1268.1;
  (%1269, %var_10275, %1270, %1271)
}

def @func_2180() -> Tensor[(5, 60), float64] {
  %1277 = fn () -> Tensor[(5, 60), float64] {
    %1272 = @func_2004() /* ty=(Tensor[(5, 60), bool],) */;
    %1273 = %1272.0;
    %1274 = cast(%1273, dtype="float64") /* ty=Tensor[(5, 60), float64] */;
    %1275 = log2(%1274) /* ty=Tensor[(5, 60), float64] */;
    %1276 = cast(%1275, dtype="float64") /* ty=Tensor[(5, 60), float64] */;
    rsqrt(%1276) /* ty=Tensor[(5, 60), float64] */
  };
  %1277() /* ty=Tensor[(5, 60), float64] */
}

def @func_6546(%var_6545: Tensor[(6, 9, 16), float32]) -> (Tensor[(6, 9, 16), float32], Tensor[(5, 60), bool], Tensor[(110, 9), uint16]) {
  %1291 = fn (%var_6529: Tensor[(6, 9, 16), float32]) -> (Tensor[(6, 9, 16), float32], Tensor[(5, 60), bool], Tensor[(110, 9), uint16]) {
    %1278 = @func_4413() /* ty=(Tensor[(6, 9, 16), float32], Tensor[(5, 60), float64]) */;
    %1279 = %1278.0;
    %1280 = cast(%var_6529, dtype="float32") /* ty=Tensor[(6, 9, 16), float32] */;
    %1281 = shape_of(%1279, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1282 = cast(%1279, dtype="float32") /* ty=Tensor[(6, 9, 16), float32] */;
    %1283 = dyn.reshape(%1280, %1281, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %1284 = cast(meta[relay.Constant][57] /* ty=Tensor[(110, 9), uint16] */, dtype="uint16") /* ty=Tensor[(110, 9), uint16] */;
    %1285 = cast(meta[relay.Constant][57] /* ty=Tensor[(110, 9), uint16] */, dtype="uint16") /* ty=Tensor[(110, 9), uint16] */;
    %1286 = reshape(%1284, newshape=[15, 6, 11]) /* ty=Tensor[(15, 6, 11), uint16] */;
    %1287 = reshape(%1285, newshape=[15, 6, 11]) /* ty=Tensor[(15, 6, 11), uint16] */;
    %1288 = @func_3208(%1286, %1287) /* ty=(Tensor[(15, 6, 11), bool], Tensor[(5, 60), bool]) */;
    %1289 = floor_divide(%1282, %1283) /* ty=Tensor[(6, 9, 16), float32] */;
    %1290 = %1288.1;
    (%1289, %1290, meta[relay.Constant][57] /* ty=Tensor[(110, 9), uint16] */)
  };
  %1291(%var_6545) /* ty=(Tensor[(6, 9, 16), float32], Tensor[(5, 60), bool], Tensor[(110, 9), uint16]) */
}

def @func_7726() -> Tensor[(65), float32] {
  @func_7724() /* ty=Tensor[(65), float32] */
}

def @func_9366() -> (Tensor[(5, 60), bool], Tensor[(5, 60), float64]) {
  %1292 = @func_7586() /* ty=(Tensor[(5, 60), bool], Tensor[(5, 60), bool], Tensor[(10, 30), float32], Tensor[(6, 9, 16), float32]) */;
  %1293 = %1292.0;
  %1294 = @func_3984() /* ty=Tensor[(5, 60), float64] */;
  (%1293, %1294)
}

def @func_10773() -> Tensor[(5, 60), float64] {
  %1295 = @func_8618() /* ty=(Tensor[(5, 60), float64], Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(5, 60), float64]) */;
  %1295.3
}

def @func_5399() -> (Tensor[(15, 15, 7), float64], Tensor[(5, 60), float64]) {
  %1296 = @func_2088() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(6, 9, 16), float64], Tensor[(5, 60), bool]) */;
  %1297 = %1296.0;
  %1298 = @func_2179() /* ty=Tensor[(5, 60), float64] */;
  (%1297, %1298)
}

def @func_10601() -> (Tensor[(5, 60), bool], Tensor[(5, 60), bool], Tensor[(65), float32], Tensor[(65), bool]) {
  %1307 = fn () -> (Tensor[(5, 60), bool], Tensor[(5, 60), bool], Tensor[(65), float32], Tensor[(65), bool]) {
    %1299 = @func_10088() /* ty=Tensor[(5, 60), bool] */;
    %1300 = cast(%1299, dtype="bool") /* ty=Tensor[(5, 60), bool] */;
    %1301 = reshape(%1300, newshape=[5, 60]) /* ty=Tensor[(5, 60), bool] */;
    %1302 = @func_2141(%1301) /* ty=(Tensor[(5, 60), bool], Tensor[(5, 60), uint64]) */;
    %1303 = @func_6703() /* ty=(Tensor[(65), float32], Tensor[(120), bool]) */;
    %1304 = %1302.0;
    %1305 = %1303.0;
    %1306 = @func_3477() /* ty=Tensor[(65), bool] */;
    (%1299, %1304, %1305, %1306)
  };
  %1307() /* ty=(Tensor[(5, 60), bool], Tensor[(5, 60), bool], Tensor[(65), float32], Tensor[(65), bool]) */
}

def @func_2271() -> (Tensor[(5, 60), bool], Tensor[(5, 60), bool]) {
  @func_2269() /* ty=(Tensor[(5, 60), bool], Tensor[(5, 60), bool]) */
}

def @func_3493() -> (Tensor[(5, 60), float32],) {
  @func_3491() /* ty=(Tensor[(5, 60), float32],) */
}

def @func_5834() -> (Tensor[(864), float64], Tensor[(864), float64], Tensor[(5, 60), float64], Tensor[(864), float64]) {
  %1308 = @func_2856() /* ty=(Tensor[(864), float64], Tensor[(10, 5, 6), bool], Tensor[(10, 30), float32]) */;
  %1309 = @func_1840() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(864), float64]) */;
  %1310 = @func_1840() /* ty=(Tensor[(15, 15, 7), float64], Tensor[(6, 9, 16), float64], Tensor[(864), float64]) */;
  %1311 = %1308.0;
  %1312 = %1309.2;
  %1313 = @func_2179() /* ty=Tensor[(5, 60), float64] */;
  %1314 = %1310.2;
  (%1311, %1312, %1313, %1314)
}

def @func_2749(%var_2747: Tensor[(5, 60), bool]) -> Tensor[(5, 60), int64] {
  @func_2746(%var_2747) /* ty=Tensor[(5, 60), int64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen747/build/output.py", line 3831, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [14:04:39] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

