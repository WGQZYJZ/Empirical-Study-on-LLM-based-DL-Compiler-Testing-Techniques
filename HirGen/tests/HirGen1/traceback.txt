==========mod==========
#[version = "0.0.5"]
def @func_3378() -> (Tensor[(3, 2, 10), int16], Tensor[(10, 5, 4), float64], Tensor[(200), uint16]) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(3, 1, 10), int16] */, dtype="int16") /* ty=Tensor[(3, 1, 10), int16] */;
  %1 = cast(meta[relay.Constant][1] /* ty=Tensor[(3, 2, 10), int16] */, dtype="int16") /* ty=Tensor[(3, 2, 10), int16] */;
  %2 = cast(meta[relay.Constant][2] /* ty=Tensor[(200), uint16] */, dtype="uint16") /* ty=Tensor[(200), uint16] */;
  %3 = reshape(%2, newshape=[10, 5, 4]) /* ty=Tensor[(10, 5, 4), uint16] */;
  %4 = bitwise_or(%0, %1) /* ty=Tensor[(3, 2, 10), int16] */;
  %5 = @func_234(%3) /* ty=Tensor[(10, 5, 4), float64] */;
  (%4, %5, meta[relay.Constant][2] /* ty=Tensor[(200), uint16] */)
}

def @func_4900(%var_4837: Tensor[(13, 1, 7), float32], %var_4848: Tensor[(525), float32]) -> (Tensor[(525), float32], Tensor[(525), int64], Tensor[(13, ?, 7), bool], Tensor[(14, 1, 15), bool], Tensor[(13, ?, 7), int64]) {
  %6 = cast(meta[relay.Constant][3] /* ty=Tensor[(525), float32] */, dtype="float32") /* ty=Tensor[(525), float32] */;
  %7 = reshape(%6, newshape=[525]) /* ty=Tensor[(525), float32] */;
  %8 = @func_3411(%7) /* ty=(Tensor[(3, 2, 10), uint16], Tensor[(15, 7, 5), bool], Tensor[(525), float32], Tensor[(3, 2, 10), float64]) */;
  %9 = cast(%var_4848, dtype="int64") /* ty=Tensor[(525), int64] */;
  %10 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(525), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %11 = cast(meta[relay.Constant][3] /* ty=Tensor[(525), float32] */, dtype="int64") /* ty=Tensor[(525), int64] */;
  %12 = dyn.reshape(%9, %10, newshape=[]) /* ty=Tensor[(?), int64] */;
  %13 = cast(%var_4837, dtype="float32") /* ty=Tensor[(13, 1, 7), float32] */;
  %14 = atan(%13) /* ty=Tensor[(13, 1, 7), float32] */;
  %15 = cast(%14, dtype="bool") /* ty=Tensor[(13, 1, 7), bool] */;
  %16 = shape_of(%var_4837, dtype="int32") /* ty=Tensor[(3), int32] */;
  %17 = cast(%var_4837, dtype="bool") /* ty=Tensor[(13, 1, 7), bool] */;
  %18 = dyn.reshape(%15, %16, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %19 = cast(%14, dtype="float32") /* ty=Tensor[(13, 1, 7), float32] */;
  %20 = acosh(%19) /* ty=Tensor[(13, 1, 7), float32] */;
  %21 = cast(%var_4837, dtype="uint8") /* ty=Tensor[(13, 1, 7), uint8] */;
  %22 = shape_of(%14, dtype="int32") /* ty=Tensor[(3), int32] */;
  %23 = cast(%14, dtype="uint8") /* ty=Tensor[(13, 1, 7), uint8] */;
  %24 = dyn.reshape(%21, %22, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %25 = maximum(%23, %24) /* ty=Tensor[(13, ?, 7), uint8] */;
  %26 = cast(%25, dtype="int64") /* ty=Tensor[(13, ?, 7), int64] */;
  %27 = shape_of(%20, dtype="int32") /* ty=Tensor[(3), int32] */;
  %28 = cast(%20, dtype="int64") /* ty=Tensor[(13, 1, 7), int64] */;
  %29 = dyn.reshape(%26, %27, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %30 = %8.2;
  %31 = maximum(%11, %12) /* ty=Tensor[(525), int64] */;
  %32 = logical_and(%17, %18) /* ty=Tensor[(13, ?, 7), bool] */;
  %33 = @func_3826() /* ty=Tensor[(14, 1, 15), bool] */;
  %34 = logical_xor(%28, %29) /* ty=Tensor[(13, ?, 7), int64] */;
  (%30, %31, %32, %33, %34)
}

def @func_1270(%var_1263: Tensor[(2, 8, 1), float32]) -> (Tensor[(2, 8, 1), float32],) {
  %35 = cast(%var_1263, dtype="float32") /* ty=Tensor[(2, 8, 1), float32] */;
  %36 = asin(%35) /* ty=Tensor[(2, 8, 1), float32] */;
  (%36,)
}

def @func_234(%var_214: Tensor[(10, 5, 4), uint16]) -> Tensor[(10, 5, 4), float64] {
  %37 = cast(%var_214, dtype="uint16") /* ty=Tensor[(10, 5, 4), uint16] */;
  %38 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(10, 5, 4), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %39 = cast(meta[relay.Constant][4] /* ty=Tensor[(10, 5, 4), uint16] */, dtype="uint16") /* ty=Tensor[(10, 5, 4), uint16] */;
  %40 = dyn.reshape(%37, %38, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %41 = logical_xor(%39, %40) /* ty=Tensor[(10, 5, 4), uint16] */;
  %42 = cast(%41, dtype="float64") /* ty=Tensor[(10, 5, 4), float64] */;
  sinh(%42) /* ty=Tensor[(10, 5, 4), float64] */
}

def @func_3697() -> (Tensor[(7, 13, 9), float32],) {
  %43 = cast(meta[relay.Constant][5] /* ty=Tensor[(7, 13, 9), float32] */, dtype="float32") /* ty=Tensor[(7, 13, 9), float32] */;
  %44 = log(%43) /* ty=Tensor[(7, 13, 9), float32] */;
  (%44,)
}

def @func_5334() -> (Tensor[(10, 5, 4), float32], Tensor[(1, 1470), float64], Tensor[(15, 14, 7), float64], Tensor[(13, ?, 7), int64], Tensor[(91), float32], Tensor[(525), float32], Tensor[(13, 9, 9), bool], Tensor[(1053), float32]) {
  %45 = @func_3494() /* ty=(Tensor[(3, 2, 10), int16], Tensor[(10, 5, 4), float32], Tensor[(16, 4, 14), float64], Tensor[(896), float64], Tensor[(3, 2, 10), float64], Tensor[(525), float32]) */;
  %46 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 1470), float64] */, dtype="float64") /* ty=Tensor[(1, 1470), float64] */;
  %47 = reshape(%46, newshape=[15, 14, 7]) /* ty=Tensor[(15, 14, 7), float64] */;
  %48 = @func_2733(%47) /* ty=Tensor[(15, 14, 7), bool] */;
  %49 = cast(%48, dtype="float64") /* ty=Tensor[(15, 14, 7), float64] */;
  %50 = tan(%49) /* ty=Tensor[(15, 14, 7), float64] */;
  %51 = cast(%50, dtype="float64") /* ty=Tensor[(15, 14, 7), float64] */;
  %52 = cast(meta[relay.Constant][7] /* ty=Tensor[(91), float32] */, dtype="float32") /* ty=Tensor[(91), float32] */;
  %53 = cast(meta[relay.Constant][8] /* ty=Tensor[(525), float32] */, dtype="float32") /* ty=Tensor[(525), float32] */;
  %54 = reshape(%52, newshape=[13, 1, 7]) /* ty=Tensor[(13, 1, 7), float32] */;
  %55 = reshape(%53, newshape=[525]) /* ty=Tensor[(525), float32] */;
  %56 = @func_4900(%54, %55) /* ty=(Tensor[(525), float32], Tensor[(525), int64], Tensor[(13, ?, 7), bool], Tensor[(14, 1, 15), bool], Tensor[(13, ?, 7), int64]) */;
  %57 = cast(meta[relay.Constant][9] /* ty=Tensor[(1053), float32] */, dtype="float32") /* ty=Tensor[(1053), float32] */;
  %58 = cast(meta[relay.Constant][9] /* ty=Tensor[(1053), float32] */, dtype="float32") /* ty=Tensor[(1053), float32] */;
  %59 = reshape(%57, newshape=[13, 9, 9]) /* ty=Tensor[(13, 9, 9), float32] */;
  %60 = reshape(%58, newshape=[13, 9, 9]) /* ty=Tensor[(13, 9, 9), float32] */;
  %61 = @func_3627(%59, %60) /* ty=(Tensor[(13, 9, 9), bool],) */;
  %62 = %45.1;
  %63 = acos(%51) /* ty=Tensor[(15, 14, 7), float64] */;
  %64 = %56.4;
  %65 = %61.0;
  (%62, meta[relay.Constant][6] /* ty=Tensor[(1, 1470), float64] */, %63, %64, meta[relay.Constant][7] /* ty=Tensor[(91), float32] */, meta[relay.Constant][8] /* ty=Tensor[(525), float32] */, %65, meta[relay.Constant][9] /* ty=Tensor[(1053), float32] */)
}

def @func_3750() -> (Tensor[(525), float32],) {
  %66 = @func_3687() /* ty=Tensor[(525), float32] */;
  (%66,)
}

def @func_1204(%var_1194: Tensor[(16, 4, 14), float64]) -> (Tensor[(16, 4, 14), float64],) {
  %67 = cast(%var_1194, dtype="float64") /* ty=Tensor[(16, 4, 14), float64] */;
  %68 = sinh(%67) /* ty=Tensor[(16, 4, 14), float64] */;
  %69 = cast(%68, dtype="float64") /* ty=Tensor[(16, 4, 14), float64] */;
  %70 = sin(%69) /* ty=Tensor[(16, 4, 14), float64] */;
  (%70,)
}

def @func_5275() -> (Tensor[(525), float64],) {
  %71 = @func_3750() /* ty=(Tensor[(525), float32],) */;
  %72 = %71.0;
  %73 = cast(%72, dtype="float64") /* ty=Tensor[(525), float64] */;
  %74 = sigmoid(%73) /* ty=Tensor[(525), float64] */;
  (%74,)
}

def @func_5751() -> (Tensor[(525), float64], Tensor[(200), uint16]) {
  %75 = @func_5002() /* ty=Tensor[(525), float32] */;
  %76 = cast(%75, dtype="float64") /* ty=Tensor[(525), float64] */;
  %77 = @func_5250() /* ty=(Tensor[(200), uint16],) */;
  %78 = acosh(%76) /* ty=Tensor[(525), float64] */;
  %79 = %77.0;
  (%78, %79)
}

def @func_3712() -> (Tensor[(7, 13, 9), float32],) {
  %80 = @func_3697() /* ty=(Tensor[(7, 13, 9), float32],) */;
  %81 = %80.0;
  (%81,)
}

def @func_3892(%var_3884: uint8) -> Tensor[(14, 16, 10), bool] {
  %82 = cast(%var_3884, dtype="bool") /* ty=bool */;
  %83 = cast(meta[relay.Constant][10] /* ty=Tensor[(14, 16, 10), uint8] */, dtype="bool") /* ty=Tensor[(14, 16, 10), bool] */;
  not_equal(%82, %83) /* ty=Tensor[(14, 16, 10), bool] */
}

def @func_2543(%var_2484: Tensor[(3, 6, 11), float32], %var_2527: Tensor[(896), float64], %var_2529: Tensor[(16), float32], %var_2530: Tensor[(200), uint16], %var_2538: Tensor[(1280), uint16]) -> (Tensor[(3, 6, 11), bool], Tensor[(12, 6, 16), float64], Tensor[(1152), float64], Tensor[(4, 15, 12), bool], Tensor[(720), int64], Tensor[(10, 5, 4), float64], uint16, Tensor[(13), uint16], Tensor[(896), float64], Tensor[(27, 1), float64], Tensor[(16), float32], Tensor[(200), uint16], Tensor[(2, 2, 11), bool], Tensor[(44), float64], Tensor[(16, 8, 10), uint16], Tensor[(1280), uint16]) {
  %84 = cast(meta[relay.Constant][11] /* ty=Tensor[(3, 6, 11), float32] */, dtype="bool") /* ty=Tensor[(3, 6, 11), bool] */;
  %85 = shape_of(%var_2484, dtype="int32") /* ty=Tensor[(3), int32] */;
  %86 = cast(%var_2484, dtype="bool") /* ty=Tensor[(3, 6, 11), bool] */;
  %87 = dyn.reshape(%84, %85, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %88 = cast(meta[relay.Constant][12] /* ty=Tensor[(1152), float64] */, dtype="float64") /* ty=Tensor[(1152), float64] */;
  %89 = reshape(%88, newshape=[12, 6, 16]) /* ty=Tensor[(12, 6, 16), float64] */;
  %90 = @func_394(%89) /* ty=(Tensor[(12, 6, 16), float64], Tensor[(12, 6, 16), float64]) */;
  %91 = cast(meta[relay.Constant][13] /* ty=Tensor[(720), int64] */, dtype="int64") /* ty=Tensor[(720), int64] */;
  %92 = reshape(%91, newshape=[4, 15, 12]) /* ty=Tensor[(4, 15, 12), int64] */;
  %93 = @func_1412(%92) /* ty=(Tensor[(4, 15, 12), bool],) */;
  %94 = cast(meta[relay.Constant][14] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %95 = cast(meta[relay.Constant][15] /* ty=Tensor[(13), uint16] */, dtype="uint16") /* ty=Tensor[(13), uint16] */;
  %96 = cast(%var_2527, dtype="float64") /* ty=Tensor[(896), float64] */;
  %97 = cast(meta[relay.Constant][16] /* ty=Tensor[(27, 1), float64] */, dtype="float64") /* ty=Tensor[(27, 1), float64] */;
  %98 = %93.0;
  %99 = cast(%98, dtype="int64") /* ty=Tensor[(4, 15, 12), int64] */;
  %100 = cast(%var_2529, dtype="float32") /* ty=Tensor[(16), float32] */;
  %101 = cast(%var_2530, dtype="uint16") /* ty=Tensor[(200), uint16] */;
  %102 = reshape(%94, newshape=[]) /* ty=uint16 */;
  %103 = reshape(%95, newshape=[1, 13]) /* ty=Tensor[(1, 13), uint16] */;
  %104 = reshape(%96, newshape=[896]) /* ty=Tensor[(896), float64] */;
  %105 = reshape(%97, newshape=[27]) /* ty=Tensor[(27), float64] */;
  %106 = reshape(%99, newshape=[720]) /* ty=Tensor[(720), int64] */;
  %107 = reshape(%100, newshape=[16]) /* ty=Tensor[(16), float32] */;
  %108 = reshape(%101, newshape=[200]) /* ty=Tensor[(200), uint16] */;
  %109 = @func_1883(%102, %103, %104, %105, %106, %107, %108) /* ty=(Tensor[(1, 13), uint16], Tensor[(16, 4, 14), float64], Tensor[(896), float64], Tensor[(10, 5, 4), float64], Tensor[(4, 15, 12), bool], Tensor[(720), int64], Tensor[(2, 8, 1), float32], Tensor[(16), float32], Tensor[(200), bool], Tensor[(9, ?, 3), uint16]) */;
  %110 = cast(meta[relay.Constant][17] /* ty=Tensor[(44), float64] */, dtype="float64") /* ty=Tensor[(44), float64] */;
  %111 = cast(meta[relay.Constant][12] /* ty=Tensor[(1152), float64] */, dtype="float64") /* ty=Tensor[(1152), float64] */;
  %112 = cast(%var_2529, dtype="float32") /* ty=Tensor[(16), float32] */;
  %113 = reshape(%110, newshape=[2, 2, 11]) /* ty=Tensor[(2, 2, 11), float64] */;
  %114 = reshape(%111, newshape=[24, 48]) /* ty=Tensor[(24, 48), float64] */;
  %115 = reshape(%112, newshape=[8, 2]) /* ty=Tensor[(8, 2), float32] */;
  %116 = @func_2026(%113, %114, %115) /* ty=(Tensor[(12, 6, 16), float64], Tensor[(24, 48), float64], Tensor[(3, 10, 4), int16], int16, Tensor[(8, 2), float32], Tensor[(2, 2, 11), bool]) */;
  %117 = cast(%var_2538, dtype="uint16") /* ty=Tensor[(1280), uint16] */;
  %118 = cast(%var_2538, dtype="uint16") /* ty=Tensor[(1280), uint16] */;
  %119 = reshape(%117, newshape=[16, 8, 10]) /* ty=Tensor[(16, 8, 10), uint16] */;
  %120 = reshape(%118, newshape=[16, 8, 10]) /* ty=Tensor[(16, 8, 10), uint16] */;
  %121 = @func_2356(%119, %120) /* ty=(Tensor[(16, 8, 10), uint16],) */;
  %122 = not_equal(%86, %87) /* ty=Tensor[(3, 6, 11), bool] */;
  %123 = %90.1;
  %124 = %109.3;
  %125 = %116.5;
  %126 = %121.0;
  (%122, %123, meta[relay.Constant][12] /* ty=Tensor[(1152), float64] */, %98, meta[relay.Constant][13] /* ty=Tensor[(720), int64] */, %124, meta[relay.Constant][14] /* ty=uint16 */, meta[relay.Constant][15] /* ty=Tensor[(13), uint16] */, %var_2527, meta[relay.Constant][16] /* ty=Tensor[(27, 1), float64] */, %var_2529, %var_2530, %125, meta[relay.Constant][17] /* ty=Tensor[(44), float64] */, %126, %var_2538)
}

def @func_5792() -> Tensor[(525), float64] {
  %127 = @func_4667() /* ty=(Tensor[(525), float64],) */;
  %127.0
}

def @func_4234() -> (Tensor[(3, 2, 10), float32],) {
  %128 = @func_3378() /* ty=(Tensor[(3, 2, 10), int16], Tensor[(10, 5, 4), float64], Tensor[(200), uint16]) */;
  %129 = %128.0;
  %130 = cast(%129, dtype="float64") /* ty=Tensor[(3, 2, 10), float64] */;
  %131 = cosh(%130) /* ty=Tensor[(3, 2, 10), float64] */;
  %132 = cast(%131, dtype="float32") /* ty=Tensor[(3, 2, 10), float32] */;
  %133 = sqrt(%132) /* ty=Tensor[(3, 2, 10), float32] */;
  (%133,)
}

def @func_5401() -> (Tensor[(7, 13, 9), float32],) {
  %134 = @func_4557() /* ty=Tensor[(7, 13, 9), float32] */;
  (%134,)
}

def @func_6092(%var_6059: Tensor[(27), float64], %var_6060: Tensor[(720), int64]) -> (Tensor[(525), float32], Tensor[(27), float64], Tensor[(720), int64], Tensor[(3, 2, 10), float64], Tensor[(525), bool], Tensor[(3, 2, 10), float64]) {
  %135 = cast(%var_6059, dtype="float64") /* ty=Tensor[(27), float64] */;
  %136 = cast(%var_6060, dtype="int64") /* ty=Tensor[(720), int64] */;
  %137 = reshape(%135, newshape=[27]) /* ty=Tensor[(27), float64] */;
  %138 = reshape(%136, newshape=[720]) /* ty=Tensor[(720), int64] */;
  %139 = @func_6047(%137, %138) /* ty=(Tensor[(525), float32], Tensor[(3, 2, 10), float64], Tensor[(7, 13, 9), int64], Tensor[(9, 1, 3), float64], Tensor[(27), float32], Tensor[(4, 15, 12), bool], Tensor[(720), int64]) */;
  %140 = @func_3544() /* ty=(Tensor[(3, 2, 10), float64],) */;
  %141 = @func_5792() /* ty=Tensor[(525), float64] */;
  %142 = cast(meta[relay.Constant][18] /* ty=Tensor[(525), float64] */, dtype="bool") /* ty=Tensor[(525), bool] */;
  %143 = shape_of(%141, dtype="int32") /* ty=Tensor[(1), int32] */;
  %144 = cast(%141, dtype="bool") /* ty=Tensor[(525), bool] */;
  %145 = dyn.reshape(%142, %143, newshape=[]) /* ty=Tensor[(?), bool] */;
  %146 = %139.0;
  %147 = %140.0;
  %148 = logical_and(%144, %145) /* ty=Tensor[(525), bool] */;
  %149 = @func_4373() /* ty=Tensor[(3, 2, 10), float64] */;
  (%146, %var_6059, %var_6060, %147, %148, %149)
}

def @func_4009(%var_4004: Tensor[(2002), int64]) -> (Tensor[(7, 13, 9), float32], Tensor[(14, 11, 13), bool], Tensor[(2002), int64]) {
  %150 = @func_3697() /* ty=(Tensor[(7, 13, 9), float32],) */;
  %151 = cast(%var_4004, dtype="int64") /* ty=Tensor[(2002), int64] */;
  %152 = cast(%var_4004, dtype="int64") /* ty=Tensor[(2002), int64] */;
  %153 = reshape(%151, newshape=[14, 11, 13]) /* ty=Tensor[(14, 11, 13), int64] */;
  %154 = reshape(%152, newshape=[14, 11, 13]) /* ty=Tensor[(14, 11, 13), int64] */;
  %155 = %150.0;
  %156 = @func_3312(%153, %154) /* ty=Tensor[(14, 11, 13), bool] */;
  (%155, %156, %var_4004)
}

def @main() -> (Tensor[(525), float32],) {
  %157 = @func_3750() /* ty=(Tensor[(525), float32],) */;
  %158 = %157.0;
  %159 = cast(%158, dtype="float32") /* ty=Tensor[(525), float32] */;
  %160 = asin(%159) /* ty=Tensor[(525), float32] */;
  (%160,)
}

def @func_6293(%var_6290: Tensor[(8, 1, 6), float32]) -> (Tensor[(8, 1, 6), float32],) {
  %161 = cast(%var_6290, dtype="float32") /* ty=Tensor[(8, 1, 6), float32] */;
  %162 = rsqrt(%161) /* ty=Tensor[(8, 1, 6), float32] */;
  (%162,)
}

def @func_912(%var_897: Tensor[(9, 1, 3), float64]) -> (Tensor[(9, 1, 3), float64],) {
  %163 = cast(%var_897, dtype="float64") /* ty=Tensor[(9, 1, 3), float64] */;
  %164 = asin(%163) /* ty=Tensor[(9, 1, 3), float64] */;
  (%164,)
}

def @func_2026(%var_1990: Tensor[(2, 2, 11), float64], %var_1999: Tensor[(24, 48), float64], %var_2011: Tensor[(8, 2), float32]) -> (Tensor[(12, 6, 16), float64], Tensor[(24, 48), float64], Tensor[(3, 10, 4), int16], int16, Tensor[(8, 2), float32], Tensor[(2, 2, 11), bool]) {
  %165 = cast(%var_1999, dtype="float64") /* ty=Tensor[(24, 48), float64] */;
  %166 = reshape(%165, newshape=[12, 6, 16]) /* ty=Tensor[(12, 6, 16), float64] */;
  %167 = @func_394(%166) /* ty=(Tensor[(12, 6, 16), float64], Tensor[(12, 6, 16), float64]) */;
  %168 = cast(meta[relay.Constant][19] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %169 = cast(%var_1999, dtype="float64") /* ty=Tensor[(24, 48), float64] */;
  %170 = cast(%var_2011, dtype="float32") /* ty=Tensor[(8, 2), float32] */;
  %171 = reshape(%168, newshape=[]) /* ty=int16 */;
  %172 = reshape(%169, newshape=[1152]) /* ty=Tensor[(1152), float64] */;
  %173 = reshape(%170, newshape=[4, 4]) /* ty=Tensor[(4, 4), float32] */;
  %174 = @func_1516(%171, %172, %173) /* ty=(Tensor[(3, 10, 4), int16], Tensor[(12, 6, 16), float64], Tensor[(1152), float64], Tensor[(2, 8, 1), float32], Tensor[(4, 4), float32], Tensor[(2, 8, 1), float32], Tensor[(12, 6, 16), float64]) */;
  %175 = cast(%var_1990, dtype="float64") /* ty=Tensor[(2, 2, 11), float64] */;
  %176 = rsqrt(%175) /* ty=Tensor[(2, 2, 11), float64] */;
  %177 = cast(meta[relay.Constant][20] /* ty=Tensor[(2, 2, 11), float64] */, dtype="bool") /* ty=Tensor[(2, 2, 11), bool] */;
  %178 = shape_of(%176, dtype="int32") /* ty=Tensor[(3), int32] */;
  %179 = cast(%176, dtype="bool") /* ty=Tensor[(2, 2, 11), bool] */;
  %180 = dyn.reshape(%177, %178, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %181 = %167.0;
  %182 = %174.0;
  %183 = logical_and(%179, %180) /* ty=Tensor[(2, 2, 11), bool] */;
  (%181, %var_1999, %182, meta[relay.Constant][19] /* ty=int16 */, %var_2011, %183)
}

def @func_394(%var_376: Tensor[(12, 6, 16), float64]) -> (Tensor[(12, 6, 16), float64], Tensor[(12, 6, 16), float64]) {
  %184 = cast(%var_376, dtype="float64") /* ty=Tensor[(12, 6, 16), float64] */;
  %185 = cast(%var_376, dtype="float64") /* ty=Tensor[(12, 6, 16), float64] */;
  %186 = cos(%184) /* ty=Tensor[(12, 6, 16), float64] */;
  %187 = acosh(%185) /* ty=Tensor[(12, 6, 16), float64] */;
  (%186, %187)
}

def @func_4194(%var_4162: uint8, %var_4163: Tensor[(784), uint8]) -> (Tensor[(525), int64], Tensor[(525), float32], Tensor[(4, 14, 14), uint8], uint8, Tensor[(784), uint8], Tensor[(4, 4), float32], Tensor[(1, 16), float32], Tensor[(3, 2, 10), int16]) {
  %188 = @func_3750() /* ty=(Tensor[(525), float32],) */;
  %189 = %188.0;
  %190 = cast(meta[relay.Constant][21] /* ty=Tensor[(525), float32] */, dtype="int64") /* ty=Tensor[(525), int64] */;
  %191 = shape_of(%189, dtype="int32") /* ty=Tensor[(1), int32] */;
  %192 = cast(%189, dtype="int64") /* ty=Tensor[(525), int64] */;
  %193 = dyn.reshape(%190, %191, newshape=[]) /* ty=Tensor[(?), int64] */;
  %194 = cast(meta[relay.Constant][21] /* ty=Tensor[(525), float32] */, dtype="float32") /* ty=Tensor[(525), float32] */;
  %195 = cast(%var_4162, dtype="uint8") /* ty=uint8 */;
  %196 = cast(%var_4163, dtype="uint8") /* ty=Tensor[(784), uint8] */;
  %197 = reshape(%195, newshape=[]) /* ty=uint8 */;
  %198 = reshape(%196, newshape=[4, 14, 14]) /* ty=Tensor[(4, 14, 14), uint8] */;
  %199 = @func_2452(%197, %198) /* ty=(Tensor[(4, 14, 14), uint8], Tensor[(4, 14, 14), float64]) */;
  %200 = cast(%var_4162, dtype="int16") /* ty=int16 */;
  %201 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 16), float32] */, dtype="float32") /* ty=Tensor[(1, 16), float32] */;
  %202 = reshape(%200, newshape=[]) /* ty=int16 */;
  %203 = reshape(%201, newshape=[4, 4]) /* ty=Tensor[(4, 4), float32] */;
  %204 = @func_3583(%202, %203) /* ty=(Tensor[(3, 2, 10), float64], Tensor[(3, 10, 4), int16], int16, Tensor[(1152), float64], Tensor[(4, 4), float32]) */;
  %205 = @func_3378() /* ty=(Tensor[(3, 2, 10), int16], Tensor[(10, 5, 4), float64], Tensor[(200), uint16]) */;
  %206 = bitwise_or(%192, %193) /* ty=Tensor[(525), int64] */;
  %207 = tan(%194) /* ty=Tensor[(525), float32] */;
  %208 = %199.0;
  %209 = %204.4;
  %210 = %205.0;
  (%206, %207, %208, %var_4162, %var_4163, %209, meta[relay.Constant][22] /* ty=Tensor[(1, 16), float32] */, %210)
}

def @func_3196(%var_3186: Tensor[(2, 12, 15), float64], %var_3189: Tensor[(2, 12, 15), float64]) -> (Tensor[(2, 12, 15), int32],) {
  %211 = cast(%var_3186, dtype="float64") /* ty=Tensor[(2, 12, 15), float64] */;
  %212 = cosh(%211) /* ty=Tensor[(2, 12, 15), float64] */;
  %213 = cast(%var_3189, dtype="int32") /* ty=Tensor[(2, 12, 15), int32] */;
  %214 = shape_of(%212, dtype="int32") /* ty=Tensor[(3), int32] */;
  %215 = cast(%212, dtype="int32") /* ty=Tensor[(2, 12, 15), int32] */;
  %216 = dyn.reshape(%213, %214, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %217 = maximum(%215, %216) /* ty=Tensor[(2, 12, 15), int32] */;
  (%217,)
}

def @func_3922(%var_3905: Tensor[(8, 15, 8), uint64], %var_3913: Tensor[(16), float32]) -> (Tensor[(8, 15, 8), bool], Tensor[(4, 4), float32], int16, Tensor[(16), float32], Tensor[(14, 16, 10), bool], Tensor[(8, 4, 3), float32], Tensor[(4, 24), float64]) {
  %218 = cast(meta[relay.Constant][23] /* ty=Tensor[(8, 15, 8), uint64] */, dtype="bool") /* ty=Tensor[(8, 15, 8), bool] */;
  %219 = shape_of(%var_3905, dtype="int32") /* ty=Tensor[(3), int32] */;
  %220 = cast(%var_3905, dtype="bool") /* ty=Tensor[(8, 15, 8), bool] */;
  %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %222 = cast(meta[relay.Constant][24] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %223 = cast(%var_3913, dtype="float32") /* ty=Tensor[(16), float32] */;
  %224 = reshape(%222, newshape=[]) /* ty=int16 */;
  %225 = reshape(%223, newshape=[4, 4]) /* ty=Tensor[(4, 4), float32] */;
  %226 = @func_3583(%224, %225) /* ty=(Tensor[(3, 2, 10), float64], Tensor[(3, 10, 4), int16], int16, Tensor[(1152), float64], Tensor[(4, 4), float32]) */;
  %227 = cast(meta[relay.Constant][24] /* ty=int16 */, dtype="uint8") /* ty=uint8 */;
  %228 = reshape(%227, newshape=[]) /* ty=uint8 */;
  %229 = cast(meta[relay.Constant][25] /* ty=Tensor[(4, 24), float64] */, dtype="float64") /* ty=Tensor[(4, 24), float64] */;
  %230 = reshape(%229, newshape=[8, 4, 3]) /* ty=Tensor[(8, 4, 3), float64] */;
  %231 = equal(%220, %221) /* ty=Tensor[(8, 15, 8), bool] */;
  %232 = %226.4;
  %233 = @func_3892(%228) /* ty=Tensor[(14, 16, 10), bool] */;
  %234 = @func_2597(%230) /* ty=Tensor[(8, 4, 3), float32] */;
  (%231, %232, meta[relay.Constant][24] /* ty=int16 */, %var_3913, %233, %234, meta[relay.Constant][25] /* ty=Tensor[(4, 24), float64] */)
}

def @func_4072() -> (Tensor[(525), float32], Tensor[(200), uint16], Tensor[(525), float64]) {
  %235 = @func_3750() /* ty=(Tensor[(525), float32],) */;
  %236 = @func_3378() /* ty=(Tensor[(3, 2, 10), int16], Tensor[(10, 5, 4), float64], Tensor[(200), uint16]) */;
  %237 = @func_3750() /* ty=(Tensor[(525), float32],) */;
  %238 = %237.0;
  %239 = cast(%238, dtype="float64") /* ty=Tensor[(525), float64] */;
  %240 = %235.0;
  %241 = %236.2;
  %242 = log(%239) /* ty=Tensor[(525), float64] */;
  (%240, %241, %242)
}

def @func_1516(%var_1463: int16, %var_1472: Tensor[(1152), float64], %var_1492: Tensor[(4, 4), float32]) -> (Tensor[(3, 10, 4), int16], Tensor[(12, 6, 16), float64], Tensor[(1152), float64], Tensor[(2, 8, 1), float32], Tensor[(4, 4), float32], Tensor[(2, 8, 1), float32], Tensor[(12, 6, 16), float64]) {
  %243 = cast(%var_1463, dtype="int16") /* ty=int16 */;
  %244 = cast(meta[relay.Constant][26] /* ty=Tensor[(3, 10, 4), int16] */, dtype="int16") /* ty=Tensor[(3, 10, 4), int16] */;
  %245 = cast(%var_1472, dtype="float64") /* ty=Tensor[(1152), float64] */;
  %246 = reshape(%245, newshape=[12, 6, 16]) /* ty=Tensor[(12, 6, 16), float64] */;
  %247 = @func_394(%246) /* ty=(Tensor[(12, 6, 16), float64], Tensor[(12, 6, 16), float64]) */;
  %248 = cast(%var_1492, dtype="float32") /* ty=Tensor[(4, 4), float32] */;
  %249 = reshape(%248, newshape=[2, 8, 1]) /* ty=Tensor[(2, 8, 1), float32] */;
  %250 = @func_1270(%249) /* ty=(Tensor[(2, 8, 1), float32],) */;
  %251 = cast(%var_1492, dtype="float32") /* ty=Tensor[(4, 4), float32] */;
  %252 = reshape(%251, newshape=[2, 8, 1]) /* ty=Tensor[(2, 8, 1), float32] */;
  %253 = @func_1270(%252) /* ty=(Tensor[(2, 8, 1), float32],) */;
  %254 = %247.1;
  %255 = cast(%254, dtype="float64") /* ty=Tensor[(12, 6, 16), float64] */;
  %256 = reshape(%255, newshape=[12, 6, 16]) /* ty=Tensor[(12, 6, 16), float64] */;
  %257 = @func_394(%256) /* ty=(Tensor[(12, 6, 16), float64], Tensor[(12, 6, 16), float64]) */;
  %258 = %257.0;
  %259 = cast(%258, dtype="float64") /* ty=Tensor[(12, 6, 16), float64] */;
  %260 = logical_xor(%243, %244) /* ty=Tensor[(3, 10, 4), int16] */;
  %261 = %250.0;
  %262 = %253.0;
  %263 = acos(%259) /* ty=Tensor[(12, 6, 16), float64] */;
  (%260, %254, %var_1472, %261, %var_1492, %262, %263)
}

def @func_3494() -> (Tensor[(3, 2, 10), int16], Tensor[(10, 5, 4), float32], Tensor[(16, 4, 14), float64], Tensor[(896), float64], Tensor[(3, 2, 10), float64], Tensor[(525), float32]) {
  %264 = @func_3378() /* ty=(Tensor[(3, 2, 10), int16], Tensor[(10, 5, 4), float64], Tensor[(200), uint16]) */;
  %265 = @func_3378() /* ty=(Tensor[(3, 2, 10), int16], Tensor[(10, 5, 4), float64], Tensor[(200), uint16]) */;
  %266 = %265.1;
  %267 = cast(%266, dtype="float32") /* ty=Tensor[(10, 5, 4), float32] */;
  %268 = cast(meta[relay.Constant][27] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
  %269 = reshape(%268, newshape=[16, 4, 14]) /* ty=Tensor[(16, 4, 14), float64] */;
  %270 = @func_1204(%269) /* ty=(Tensor[(16, 4, 14), float64],) */;
  %271 = cast(meta[relay.Constant][28] /* ty=Tensor[(525), float32] */, dtype="float32") /* ty=Tensor[(525), float32] */;
  %272 = reshape(%271, newshape=[525]) /* ty=Tensor[(525), float32] */;
  %273 = @func_3411(%272) /* ty=(Tensor[(3, 2, 10), uint16], Tensor[(15, 7, 5), bool], Tensor[(525), float32], Tensor[(3, 2, 10), float64]) */;
  %274 = %264.0;
  %275 = asinh(%267) /* ty=Tensor[(10, 5, 4), float32] */;
  %276 = %270.0;
  %277 = %273.3;
  (%274, %275, %276, meta[relay.Constant][27] /* ty=Tensor[(896), float64] */, %277, meta[relay.Constant][28] /* ty=Tensor[(525), float32] */)
}

def @func_1412(%var_1406: Tensor[(4, 15, 12), int64]) -> (Tensor[(4, 15, 12), bool],) {
  %278 = cast(%var_1406, dtype="bool") /* ty=Tensor[(4, 15, 12), bool] */;
  %279 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(4, 15, 12), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %280 = cast(meta[relay.Constant][29] /* ty=Tensor[(4, 15, 12), int64] */, dtype="bool") /* ty=Tensor[(4, 15, 12), bool] */;
  %281 = dyn.reshape(%278, %279, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %282 = less_equal(%280, %281) /* ty=Tensor[(4, 15, 12), bool] */;
  (%282,)
}

def @func_4667() -> (Tensor[(525), float64],) {
  %283 = @func_4072() /* ty=(Tensor[(525), float32], Tensor[(200), uint16], Tensor[(525), float64]) */;
  %284 = %283.2;
  (%284,)
}

def @func_3664(%var_3658: int16, %var_3659: Tensor[(1152), float64]) -> (Tensor[(3, 2, 10), float32], Tensor[(2, 8, 1), float32], int16, Tensor[(1152), float64], Tensor[(2, 8), float32]) {
  %285 = @func_3378() /* ty=(Tensor[(3, 2, 10), int16], Tensor[(10, 5, 4), float64], Tensor[(200), uint16]) */;
  %286 = %285.0;
  %287 = cast(%286, dtype="float32") /* ty=Tensor[(3, 2, 10), float32] */;
  %288 = cast(%var_3658, dtype="int16") /* ty=int16 */;
  %289 = cast(%var_3659, dtype="float64") /* ty=Tensor[(1152), float64] */;
  %290 = cast(meta[relay.Constant][30] /* ty=Tensor[(2, 8), float32] */, dtype="float32") /* ty=Tensor[(2, 8), float32] */;
  %291 = reshape(%288, newshape=[]) /* ty=int16 */;
  %292 = reshape(%289, newshape=[1152]) /* ty=Tensor[(1152), float64] */;
  %293 = reshape(%290, newshape=[4, 4]) /* ty=Tensor[(4, 4), float32] */;
  %294 = @func_1516(%291, %292, %293) /* ty=(Tensor[(3, 10, 4), int16], Tensor[(12, 6, 16), float64], Tensor[(1152), float64], Tensor[(2, 8, 1), float32], Tensor[(4, 4), float32], Tensor[(2, 8, 1), float32], Tensor[(12, 6, 16), float64]) */;
  %295 = asinh(%287) /* ty=Tensor[(3, 2, 10), float32] */;
  %296 = %294.3;
  (%295, %296, %var_3658, %var_3659, meta[relay.Constant][30] /* ty=Tensor[(2, 8), float32] */)
}

def @func_4696(%var_4676: Tensor[(7, 13, 12), float32], %var_4688: Tensor[(16), float32]) -> (Tensor[(7, 13, 12), float32], Tensor[(3, 10, 4), int16], int16, Tensor[(16), float32]) {
  %297 = cast(%var_4676, dtype="float32") /* ty=Tensor[(7, 13, 12), float32] */;
  %298 = cast(meta[relay.Constant][31] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %299 = cast(%var_4688, dtype="float32") /* ty=Tensor[(16), float32] */;
  %300 = reshape(%298, newshape=[]) /* ty=int16 */;
  %301 = reshape(%299, newshape=[4, 4]) /* ty=Tensor[(4, 4), float32] */;
  %302 = @func_3583(%300, %301) /* ty=(Tensor[(3, 2, 10), float64], Tensor[(3, 10, 4), int16], int16, Tensor[(1152), float64], Tensor[(4, 4), float32]) */;
  %303 = erf(%297) /* ty=Tensor[(7, 13, 12), float32] */;
  %304 = %302.1;
  (%303, %304, meta[relay.Constant][31] /* ty=int16 */, %var_4688)
}

def @func_5250() -> (Tensor[(200), uint16],) {
  %305 = @func_4072() /* ty=(Tensor[(525), float32], Tensor[(200), uint16], Tensor[(525), float64]) */;
  %306 = %305.1;
  (%306,)
}

def @func_1637(%var_1620: Tensor[(6, 16, 12), uint32], %var_1621: Tensor[(6, 16, 12), uint32]) -> Tensor[(6, 16, 12), uint32] {
  %307 = cast(%var_1621, dtype="uint32") /* ty=Tensor[(6, 16, 12), uint32] */;
  %308 = shape_of(%var_1620, dtype="int32") /* ty=Tensor[(3), int32] */;
  %309 = cast(%var_1620, dtype="uint32") /* ty=Tensor[(6, 16, 12), uint32] */;
  %310 = dyn.reshape(%307, %308, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  maximum(%309, %310) /* ty=Tensor[(6, 16, 12), uint32] */
}

def @func_4825(%var_4811: Tensor[(4, 9, 3), float32]) -> (Tensor[(7, 13, 9), float32], float32, Tensor[(108), float32], Tensor[(4, 9, 3), float32]) {
  %311 = @func_4557() /* ty=Tensor[(7, 13, 9), float32] */;
  %312 = cast(%311, dtype="float64") /* ty=Tensor[(7, 13, 9), float64] */;
  %313 = cos(%312) /* ty=Tensor[(7, 13, 9), float64] */;
  %314 = cast(%313, dtype="float32") /* ty=Tensor[(7, 13, 9), float32] */;
  %315 = shape_of(%311, dtype="int32") /* ty=Tensor[(3), int32] */;
  %316 = cast(%311, dtype="float32") /* ty=Tensor[(7, 13, 9), float32] */;
  %317 = dyn.reshape(%314, %315, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %318 = cast(-5.24762f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %319 = cast(meta[relay.Constant][32] /* ty=Tensor[(108), float32] */, dtype="float32") /* ty=Tensor[(108), float32] */;
  %320 = reshape(%318, newshape=[]) /* ty=float32 */;
  %321 = reshape(%319, newshape=[4, 9, 3]) /* ty=Tensor[(4, 9, 3), float32] */;
  %322 = @func_2974(%320, %321) /* ty=(Tensor[(4, 9, 3), float32],) */;
  %323 = %322.0;
  %324 = cast(%var_4811, dtype="float32") /* ty=Tensor[(4, 9, 3), float32] */;
  %325 = shape_of(%323, dtype="int32") /* ty=Tensor[(3), int32] */;
  %326 = cast(%323, dtype="float32") /* ty=Tensor[(4, 9, 3), float32] */;
  %327 = dyn.reshape(%324, %325, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %328 = mod(%316, %317) /* ty=Tensor[(7, 13, 9), float32] */;
  %329 = minimum(%326, %327) /* ty=Tensor[(4, 9, 3), float32] */;
  (%328, -5.24762f /* ty=float32 */, meta[relay.Constant][32] /* ty=Tensor[(108), float32] */, %329)
}

def @func_5721(%var_5717: Tensor[(16, 11, 12), float32]) -> (Tensor[(16, 11, 12), float32],) {
  %330 = cast(%var_5717, dtype="float32") /* ty=Tensor[(16, 11, 12), float32] */;
  %331 = atan(%330) /* ty=Tensor[(16, 11, 12), float32] */;
  (%331,)
}

def @func_5200() -> (Tensor[(3, 2, 10), float32],) {
  %332 = @func_4234() /* ty=(Tensor[(3, 2, 10), float32],) */;
  %333 = %332.0;
  %334 = cast(%333, dtype="float32") /* ty=Tensor[(3, 2, 10), float32] */;
  %335 = rsqrt(%334) /* ty=Tensor[(3, 2, 10), float32] */;
  (%335,)
}

def @func_4618() -> (Tensor[(7, 13, 9), float32],) {
  %336 = @func_4557() /* ty=Tensor[(7, 13, 9), float32] */;
  (%336,)
}

def @func_5054() -> (Tensor[(3, 2, 10), float32],) {
  %337 = @func_4234() /* ty=(Tensor[(3, 2, 10), float32],) */;
  %338 = %337.0;
  (%338,)
}

def @func_2452(%var_2443: uint8, %var_2444: Tensor[(4, 14, 14), uint8]) -> (Tensor[(4, 14, 14), uint8], Tensor[(4, 14, 14), float64]) {
  %339 = cast(%var_2443, dtype="uint8") /* ty=uint8 */;
  %340 = cast(%var_2444, dtype="uint8") /* ty=Tensor[(4, 14, 14), uint8] */;
  %341 = cast(%var_2444, dtype="float64") /* ty=Tensor[(4, 14, 14), float64] */;
  %342 = left_shift(%339, %340) /* ty=Tensor[(4, 14, 14), uint8] */;
  %343 = sin(%341) /* ty=Tensor[(4, 14, 14), float64] */;
  (%342, %343)
}

def @func_4949() -> Tensor[(525), float32] {
  %344 = @func_4707() /* ty=(Tensor[(525), float32],) */;
  %344.0
}

def @func_3627(%var_3609: Tensor[(13, 9, 9), float32], %var_3610: Tensor[(13, 9, 9), float32]) -> (Tensor[(13, 9, 9), bool],) {
  %345 = cast(%var_3610, dtype="bool") /* ty=Tensor[(13, 9, 9), bool] */;
  %346 = shape_of(%var_3609, dtype="int32") /* ty=Tensor[(3), int32] */;
  %347 = cast(%var_3609, dtype="bool") /* ty=Tensor[(13, 9, 9), bool] */;
  %348 = dyn.reshape(%345, %346, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %349 = not_equal(%347, %348) /* ty=Tensor[(13, 9, 9), bool] */;
  (%349,)
}

def @func_5547() -> (Tensor[(7, 13, 9), float32],) {
  %350 = @func_3697() /* ty=(Tensor[(7, 13, 9), float32],) */;
  %351 = %350.0;
  %352 = cast(%351, dtype="float32") /* ty=Tensor[(7, 13, 9), float32] */;
  %353 = sinh(%352) /* ty=Tensor[(7, 13, 9), float32] */;
  (%353,)
}

def @func_2974(%var_2951: float32, %var_2952: Tensor[(4, 9, 3), float32]) -> (Tensor[(4, 9, 3), float32],) {
  %354 = cast(%var_2951, dtype="float32") /* ty=float32 */;
  %355 = cast(%var_2952, dtype="float32") /* ty=Tensor[(4, 9, 3), float32] */;
  %356 = floor_mod(%354, %355) /* ty=Tensor[(4, 9, 3), float32] */;
  (%356,)
}

def @func_2733(%var_2716: Tensor[(15, 14, 7), float64]) -> Tensor[(15, 14, 7), bool] {
  %357 = cast(%var_2716, dtype="float64") /* ty=Tensor[(15, 14, 7), float64] */;
  %358 = sinh(%357) /* ty=Tensor[(15, 14, 7), float64] */;
  %359 = cast(%var_2716, dtype="bool") /* ty=Tensor[(15, 14, 7), bool] */;
  %360 = shape_of(%358, dtype="int32") /* ty=Tensor[(3), int32] */;
  %361 = cast(%358, dtype="bool") /* ty=Tensor[(15, 14, 7), bool] */;
  %362 = dyn.reshape(%359, %360, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %363 = not_equal(%361, %362) /* ty=Tensor[(15, 14, 7), bool] */;
  %364 = cast(%363, dtype="bool") /* ty=Tensor[(15, 14, 7), bool] */;
  %365 = shape_of(%358, dtype="int32") /* ty=Tensor[(3), int32] */;
  %366 = cast(%358, dtype="bool") /* ty=Tensor[(15, 14, 7), bool] */;
  %367 = dyn.reshape(%364, %365, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%366, %367) /* ty=Tensor[(15, 14, 7), bool] */
}

def @func_4288(%var_4273: Tensor[(525), float32], %var_4276: Tensor[(392, 2), uint8]) -> (Tensor[(10, 5, 4), float64], Tensor[(1152), float64], int16, Tensor[(16), float32], Tensor[(15, 7, 5), bool], Tensor[(525), float32], Tensor[(1, 16), float32], Tensor[(392, 2), uint8], Tensor[(7, 13, 9), float32]) {
  %368 = @func_3378() /* ty=(Tensor[(3, 2, 10), int16], Tensor[(10, 5, 4), float64], Tensor[(200), uint16]) */;
  %369 = cast(meta[relay.Constant][33] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %370 = cast(meta[relay.Constant][34] /* ty=Tensor[(16), float32] */, dtype="float32") /* ty=Tensor[(16), float32] */;
  %371 = reshape(%369, newshape=[]) /* ty=int16 */;
  %372 = reshape(%370, newshape=[4, 4]) /* ty=Tensor[(4, 4), float32] */;
  %373 = @func_3583(%371, %372) /* ty=(Tensor[(3, 2, 10), float64], Tensor[(3, 10, 4), int16], int16, Tensor[(1152), float64], Tensor[(4, 4), float32]) */;
  %374 = cast(%var_4273, dtype="float32") /* ty=Tensor[(525), float32] */;
  %375 = reshape(%374, newshape=[15, 7, 5]) /* ty=Tensor[(15, 7, 5), float32] */;
  %376 = cast(meta[relay.Constant][33] /* ty=int16 */, dtype="uint8") /* ty=uint8 */;
  %377 = cast(%var_4276, dtype="uint8") /* ty=Tensor[(392, 2), uint8] */;
  %378 = reshape(%376, newshape=[]) /* ty=uint8 */;
  %379 = reshape(%377, newshape=[784]) /* ty=Tensor[(784), uint8] */;
  %380 = @func_4194(%378, %379) /* ty=(Tensor[(525), int64], Tensor[(525), float32], Tensor[(4, 14, 14), uint8], uint8, Tensor[(784), uint8], Tensor[(4, 4), float32], Tensor[(1, 16), float32], Tensor[(3, 2, 10), int16]) */;
  %381 = @func_3697() /* ty=(Tensor[(7, 13, 9), float32],) */;
  %382 = %368.1;
  %383 = %373.3;
  %384 = @func_698(%375) /* ty=Tensor[(15, 7, 5), bool] */;
  %385 = %380.6;
  %386 = %381.0;
  (%382, %383, meta[relay.Constant][33] /* ty=int16 */, meta[relay.Constant][34] /* ty=Tensor[(16), float32] */, %384, %var_4273, %385, %var_4276, %386)
}

def @func_2292(%var_2283: Tensor[(2, 7, 9), float64]) -> (Tensor[(2, 7, 9), float64],) {
  %387 = cast(%var_2283, dtype="float64") /* ty=Tensor[(2, 7, 9), float64] */;
  %388 = tan(%387) /* ty=Tensor[(2, 7, 9), float64] */;
  (%388,)
}

def @func_4524() -> (Tensor[(525), float32], Tensor[(3, 2, 10), float32]) {
  %389 = @func_4373() /* ty=Tensor[(3, 2, 10), float64] */;
  %390 = cast(%389, dtype="float32") /* ty=Tensor[(3, 2, 10), float32] */;
  %391 = atan(%390) /* ty=Tensor[(3, 2, 10), float32] */;
  %392 = cast(meta[relay.Constant][35] /* ty=Tensor[(3, 2, 10), float32] */, dtype="float32") /* ty=Tensor[(3, 2, 10), float32] */;
  %393 = shape_of(%391, dtype="int32") /* ty=Tensor[(3), int32] */;
  %394 = cast(%391, dtype="float32") /* ty=Tensor[(3, 2, 10), float32] */;
  %395 = dyn.reshape(%392, %393, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %396 = @func_3687() /* ty=Tensor[(525), float32] */;
  %397 = divide(%394, %395) /* ty=Tensor[(3, 2, 10), float32] */;
  (%396, %397)
}

def @func_5389(%var_5370: Tensor[(2, 392), uint8]) -> (Tensor[(7, 13, 9), float32], Tensor[(525), int64], uint8, Tensor[(2, 392), uint8], Tensor[(44), float64], Tensor[(1152), float64], Tensor[(120), int16], Tensor[(525), float64]) {
  %398 = @func_4618() /* ty=(Tensor[(7, 13, 9), float32],) */;
  %399 = cast(meta[relay.Constant][36] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %400 = cast(%var_5370, dtype="uint8") /* ty=Tensor[(2, 392), uint8] */;
  %401 = reshape(%399, newshape=[]) /* ty=uint8 */;
  %402 = reshape(%400, newshape=[784]) /* ty=Tensor[(784), uint8] */;
  %403 = @func_4194(%401, %402) /* ty=(Tensor[(525), int64], Tensor[(525), float32], Tensor[(4, 14, 14), uint8], uint8, Tensor[(784), uint8], Tensor[(4, 4), float32], Tensor[(1, 16), float32], Tensor[(3, 2, 10), int16]) */;
  %404 = cast(meta[relay.Constant][37] /* ty=Tensor[(1152), float64] */, dtype="float64") /* ty=Tensor[(1152), float64] */;
  %405 = cast(meta[relay.Constant][38] /* ty=Tensor[(120), int16] */, dtype="int16") /* ty=Tensor[(120), int16] */;
  %406 = reshape(%404, newshape=[1152]) /* ty=Tensor[(1152), float64] */;
  %407 = reshape(%405, newshape=[3, 10, 4]) /* ty=Tensor[(3, 10, 4), int16] */;
  %408 = @func_5187(%406, %407) /* ty=(Tensor[(3, 2, 10), int16], Tensor[(44), float64], Tensor[(1152), float64], Tensor[(16, 1), float32], Tensor[(3, 10, 4), float64]) */;
  %409 = @func_4072() /* ty=(Tensor[(525), float32], Tensor[(200), uint16], Tensor[(525), float64]) */;
  %410 = %398.0;
  %411 = %403.0;
  %412 = %408.1;
  %413 = %409.2;
  (%410, %411, meta[relay.Constant][36] /* ty=uint8 */, %var_5370, %412, meta[relay.Constant][37] /* ty=Tensor[(1152), float64] */, meta[relay.Constant][38] /* ty=Tensor[(120), int16] */, %413)
}

def @func_1883(%var_1799: uint16, %var_1800: Tensor[(1, 13), uint16], %var_1805: Tensor[(896), float64], %var_1839: Tensor[(27), float64], %var_1848: Tensor[(720), int64], %var_1854: Tensor[(16), float32], %var_1870: Tensor[(200), uint16]) -> (Tensor[(1, 13), uint16], Tensor[(16, 4, 14), float64], Tensor[(896), float64], Tensor[(10, 5, 4), float64], Tensor[(4, 15, 12), bool], Tensor[(720), int64], Tensor[(2, 8, 1), float32], Tensor[(16), float32], Tensor[(200), bool], Tensor[(9, ?, 3), uint16]) {
  %414 = cast(%var_1799, dtype="uint16") /* ty=uint16 */;
  %415 = cast(%var_1800, dtype="uint16") /* ty=Tensor[(1, 13), uint16] */;
  %416 = cast(%var_1805, dtype="float64") /* ty=Tensor[(896), float64] */;
  %417 = reshape(%416, newshape=[16, 4, 14]) /* ty=Tensor[(16, 4, 14), float64] */;
  %418 = @func_1204(%417) /* ty=(Tensor[(16, 4, 14), float64],) */;
  %419 = cast(meta[relay.Constant][39] /* ty=Tensor[(200), uint16] */, dtype="uint16") /* ty=Tensor[(200), uint16] */;
  %420 = reshape(%419, newshape=[10, 5, 4]) /* ty=Tensor[(10, 5, 4), uint16] */;
  %421 = cast(%var_1848, dtype="int64") /* ty=Tensor[(720), int64] */;
  %422 = reshape(%421, newshape=[4, 15, 12]) /* ty=Tensor[(4, 15, 12), int64] */;
  %423 = @func_1412(%422) /* ty=(Tensor[(4, 15, 12), bool],) */;
  %424 = cast(%var_1854, dtype="float32") /* ty=Tensor[(16), float32] */;
  %425 = reshape(%424, newshape=[2, 8, 1]) /* ty=Tensor[(2, 8, 1), float32] */;
  %426 = @func_1270(%425) /* ty=(Tensor[(2, 8, 1), float32],) */;
  %427 = cast(%var_1870, dtype="bool") /* ty=Tensor[(200), bool] */;
  %428 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(200), uint16] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %429 = cast(meta[relay.Constant][39] /* ty=Tensor[(200), uint16] */, dtype="bool") /* ty=Tensor[(200), bool] */;
  %430 = dyn.reshape(%427, %428, newshape=[]) /* ty=Tensor[(?), bool] */;
  %431 = cast(%var_1839, dtype="float64") /* ty=Tensor[(27), float64] */;
  %432 = reshape(%431, newshape=[9, 1, 3]) /* ty=Tensor[(9, 1, 3), float64] */;
  %433 = @func_912(%432) /* ty=(Tensor[(9, 1, 3), float64],) */;
  %434 = %433.0;
  %435 = cast(%var_1839, dtype="bool") /* ty=Tensor[(27), bool] */;
  %436 = shape_of(%434, dtype="int32") /* ty=Tensor[(3), int32] */;
  %437 = cast(%434, dtype="bool") /* ty=Tensor[(9, 1, 3), bool] */;
  %438 = dyn.reshape(%435, %436, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %439 = less(%437, %438) /* ty=Tensor[(9, ?, 3), bool] */;
  %440 = cast(%439, dtype="uint16") /* ty=Tensor[(9, ?, 3), uint16] */;
  %441 = shape_of(%434, dtype="int32") /* ty=Tensor[(3), int32] */;
  %442 = cast(%434, dtype="uint16") /* ty=Tensor[(9, 1, 3), uint16] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %444 = logical_xor(%414, %415) /* ty=Tensor[(1, 13), uint16] */;
  %445 = %418.0;
  %446 = @func_234(%420) /* ty=Tensor[(10, 5, 4), float64] */;
  %447 = %423.0;
  %448 = %426.0;
  %449 = equal(%429, %430) /* ty=Tensor[(200), bool] */;
  %450 = maximum(%442, %443) /* ty=Tensor[(9, ?, 3), uint16] */;
  (%444, %445, %var_1805, %446, %447, %var_1848, %448, %var_1854, %449, %450)
}

def @func_4992() -> (Tensor[(525), float32],) {
  %451 = @func_4707() /* ty=(Tensor[(525), float32],) */;
  %452 = %451.0;
  (%452,)
}

def @func_2356(%var_2349: Tensor[(16, 8, 10), uint16], %var_2350: Tensor[(16, 8, 10), uint16]) -> (Tensor[(16, 8, 10), uint16],) {
  %453 = cast(%var_2350, dtype="uint16") /* ty=Tensor[(16, 8, 10), uint16] */;
  %454 = shape_of(%var_2349, dtype="int32") /* ty=Tensor[(3), int32] */;
  %455 = cast(%var_2349, dtype="uint16") /* ty=Tensor[(16, 8, 10), uint16] */;
  %456 = dyn.reshape(%453, %454, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %457 = maximum(%455, %456) /* ty=Tensor[(16, 8, 10), uint16] */;
  (%457,)
}

def @func_3049(%var_3037: Tensor[(3, 4, 7), float32]) -> (Tensor[(3, 4, 7), float32],) {
  %458 = cast(%var_3037, dtype="float32") /* ty=Tensor[(3, 4, 7), float32] */;
  %459 = log(%458) /* ty=Tensor[(3, 4, 7), float32] */;
  %460 = cast(%459, dtype="float32") /* ty=Tensor[(3, 4, 7), float32] */;
  %461 = atanh(%460) /* ty=Tensor[(3, 4, 7), float32] */;
  (%461,)
}

def @func_550(%var_537: Tensor[(9, 5, 10), float64]) -> Tensor[(9, 5, 10), float64] {
  %462 = cast(%var_537, dtype="float64") /* ty=Tensor[(9, 5, 10), float64] */;
  log2(%462) /* ty=Tensor[(9, 5, 10), float64] */
}

def @func_5187(%var_5179: Tensor[(1152), float64], %var_5182: Tensor[(3, 10, 4), int16]) -> (Tensor[(3, 2, 10), int16], Tensor[(44), float64], Tensor[(1152), float64], Tensor[(16, 1), float32], Tensor[(3, 10, 4), float64]) {
  %463 = @func_5054() /* ty=(Tensor[(3, 2, 10), float32],) */;
  %464 = %463.0;
  %465 = cast(meta[relay.Constant][40] /* ty=Tensor[(3, 2, 10), float32] */, dtype="int16") /* ty=Tensor[(3, 2, 10), int16] */;
  %466 = shape_of(%464, dtype="int32") /* ty=Tensor[(3), int32] */;
  %467 = cast(%464, dtype="int16") /* ty=Tensor[(3, 2, 10), int16] */;
  %468 = dyn.reshape(%465, %466, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %469 = cast(meta[relay.Constant][41] /* ty=Tensor[(44), float64] */, dtype="float64") /* ty=Tensor[(44), float64] */;
  %470 = cast(%var_5179, dtype="float64") /* ty=Tensor[(1152), float64] */;
  %471 = cast(meta[relay.Constant][42] /* ty=Tensor[(16, 1), float32] */, dtype="float32") /* ty=Tensor[(16, 1), float32] */;
  %472 = reshape(%469, newshape=[2, 2, 11]) /* ty=Tensor[(2, 2, 11), float64] */;
  %473 = reshape(%470, newshape=[24, 48]) /* ty=Tensor[(24, 48), float64] */;
  %474 = reshape(%471, newshape=[8, 2]) /* ty=Tensor[(8, 2), float32] */;
  %475 = @func_2026(%472, %473, %474) /* ty=(Tensor[(12, 6, 16), float64], Tensor[(24, 48), float64], Tensor[(3, 10, 4), int16], int16, Tensor[(8, 2), float32], Tensor[(2, 2, 11), bool]) */;
  %476 = %475.2;
  %477 = cast(%var_5182, dtype="float64") /* ty=Tensor[(3, 10, 4), float64] */;
  %478 = shape_of(%476, dtype="int32") /* ty=Tensor[(3), int32] */;
  %479 = cast(%476, dtype="float64") /* ty=Tensor[(3, 10, 4), float64] */;
  %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %481 = logical_xor(%467, %468) /* ty=Tensor[(3, 2, 10), int16] */;
  %482 = floor_mod(%479, %480) /* ty=Tensor[(3, 10, 4), float64] */;
  (%481, meta[relay.Constant][41] /* ty=Tensor[(44), float64] */, %var_5179, meta[relay.Constant][42] /* ty=Tensor[(16, 1), float32] */, %482)
}

def @func_4426(%var_4381: Tensor[(525), float32], %var_4382: Tensor[(784), uint8], %var_4412: Tensor[(360), float64]) -> (Tensor[(3, 2, 10), float64], Tensor[(16), float32], Tensor[(525), float32], Tensor[(784), uint8], Tensor[(2, 12, 15), int32], Tensor[(360), float64]) {
  %483 = cast(%var_4381, dtype="float32") /* ty=Tensor[(525), float32] */;
  %484 = cast(%var_4382, dtype="uint8") /* ty=Tensor[(784), uint8] */;
  %485 = reshape(%483, newshape=[525]) /* ty=Tensor[(525), float32] */;
  %486 = reshape(%484, newshape=[392, 2]) /* ty=Tensor[(392, 2), uint8] */;
  %487 = @func_4288(%485, %486) /* ty=(Tensor[(10, 5, 4), float64], Tensor[(1152), float64], int16, Tensor[(16), float32], Tensor[(15, 7, 5), bool], Tensor[(525), float32], Tensor[(1, 16), float32], Tensor[(392, 2), uint8], Tensor[(7, 13, 9), float32]) */;
  %488 = cast(%var_4412, dtype="float64") /* ty=Tensor[(360), float64] */;
  %489 = cast(%var_4412, dtype="float64") /* ty=Tensor[(360), float64] */;
  %490 = reshape(%488, newshape=[2, 12, 15]) /* ty=Tensor[(2, 12, 15), float64] */;
  %491 = reshape(%489, newshape=[2, 12, 15]) /* ty=Tensor[(2, 12, 15), float64] */;
  %492 = @func_3196(%490, %491) /* ty=(Tensor[(2, 12, 15), int32],) */;
  %493 = @func_4373() /* ty=Tensor[(3, 2, 10), float64] */;
  %494 = %487.3;
  %495 = %492.0;
  (%493, %494, %var_4381, %var_4382, %495, %var_4412)
}

def @func_4549(%var_4540: Tensor[(14, 3, 15), float32], %var_4546: Tensor[(1, 525), float32]) -> (Tensor[(14, 3, 15), int8], Tensor[(3, 2, 10), uint16], Tensor[(1, 525), float32]) {
  %496 = @func_3826() /* ty=Tensor[(14, 1, 15), bool] */;
  %497 = cast(%496, dtype="float32") /* ty=Tensor[(14, 1, 15), float32] */;
  %498 = tan(%497) /* ty=Tensor[(14, 1, 15), float32] */;
  %499 = cast(%498, dtype="int8") /* ty=Tensor[(14, 1, 15), int8] */;
  %500 = cast(%var_4540, dtype="int8") /* ty=Tensor[(14, 3, 15), int8] */;
  %501 = cast(%var_4546, dtype="float32") /* ty=Tensor[(1, 525), float32] */;
  %502 = reshape(%501, newshape=[525]) /* ty=Tensor[(525), float32] */;
  %503 = @func_3411(%502) /* ty=(Tensor[(3, 2, 10), uint16], Tensor[(15, 7, 5), bool], Tensor[(525), float32], Tensor[(3, 2, 10), float64]) */;
  %504 = minimum(%499, %500) /* ty=Tensor[(14, 3, 15), int8] */;
  %505 = %503.0;
  (%504, %505, %var_4546)
}

def @func_5934() -> (Tensor[(525), float64], Tensor[(4, 15, 12), bool], Tensor[(1, 720), int64], Tensor[(15, 7, 5), bool]) {
  %506 = cast(meta[relay.Constant][43] /* ty=Tensor[(1, 720), int64] */, dtype="int64") /* ty=Tensor[(1, 720), int64] */;
  %507 = reshape(%506, newshape=[4, 15, 12]) /* ty=Tensor[(4, 15, 12), int64] */;
  %508 = @func_1412(%507) /* ty=(Tensor[(4, 15, 12), bool],) */;
  %509 = @func_5792() /* ty=Tensor[(525), float64] */;
  %510 = cast(%509, dtype="float32") /* ty=Tensor[(525), float32] */;
  %511 = reshape(%510, newshape=[15, 7, 5]) /* ty=Tensor[(15, 7, 5), float32] */;
  %512 = %508.0;
  %513 = @func_698(%511) /* ty=Tensor[(15, 7, 5), bool] */;
  (%509, %512, meta[relay.Constant][43] /* ty=Tensor[(1, 720), int64] */, %513)
}

def @func_698(%var_669: Tensor[(15, 7, 5), float32]) -> Tensor[(15, 7, 5), bool] {
  %514 = cast(%var_669, dtype="float32") /* ty=Tensor[(15, 7, 5), float32] */;
  %515 = sinh(%514) /* ty=Tensor[(15, 7, 5), float32] */;
  %516 = cast(%var_669, dtype="bool") /* ty=Tensor[(15, 7, 5), bool] */;
  %517 = shape_of(%515, dtype="int32") /* ty=Tensor[(3), int32] */;
  %518 = cast(%515, dtype="bool") /* ty=Tensor[(15, 7, 5), bool] */;
  %519 = dyn.reshape(%516, %517, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%518, %519) /* ty=Tensor[(15, 7, 5), bool] */
}

def @func_3312(%var_3307: Tensor[(14, 11, 13), int64], %var_3308: Tensor[(14, 11, 13), int64]) -> Tensor[(14, 11, 13), bool] {
  %520 = cast(%var_3308, dtype="bool") /* ty=Tensor[(14, 11, 13), bool] */;
  %521 = shape_of(%var_3307, dtype="int32") /* ty=Tensor[(3), int32] */;
  %522 = cast(%var_3307, dtype="bool") /* ty=Tensor[(14, 11, 13), bool] */;
  %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%522, %523) /* ty=Tensor[(14, 11, 13), bool] */
}

def @func_5123(%var_5119: Tensor[(288, 4), float64], %var_5120: Tensor[(16), float32]) -> (Tensor[(15, 12, 1), float32], Tensor[(7, 13, 9), float32], Tensor[(2, 2, 11), bool], Tensor[(44), float64], Tensor[(288, 4), float64], Tensor[(16), float32]) {
  %524 = cast(meta[relay.Constant][44] /* ty=Tensor[(15, 12, 1), float32] */, dtype="float32") /* ty=Tensor[(15, 12, 1), float32] */;
  %525 = @func_3697() /* ty=(Tensor[(7, 13, 9), float32],) */;
  %526 = cast(meta[relay.Constant][45] /* ty=Tensor[(44), float64] */, dtype="float64") /* ty=Tensor[(44), float64] */;
  %527 = cast(%var_5119, dtype="float64") /* ty=Tensor[(288, 4), float64] */;
  %528 = cast(%var_5120, dtype="float32") /* ty=Tensor[(16), float32] */;
  %529 = reshape(%526, newshape=[2, 2, 11]) /* ty=Tensor[(2, 2, 11), float64] */;
  %530 = reshape(%527, newshape=[24, 48]) /* ty=Tensor[(24, 48), float64] */;
  %531 = reshape(%528, newshape=[8, 2]) /* ty=Tensor[(8, 2), float32] */;
  %532 = @func_2026(%529, %530, %531) /* ty=(Tensor[(12, 6, 16), float64], Tensor[(24, 48), float64], Tensor[(3, 10, 4), int16], int16, Tensor[(8, 2), float32], Tensor[(2, 2, 11), bool]) */;
  %533 = acosh(%524) /* ty=Tensor[(15, 12, 1), float32] */;
  %534 = %525.0;
  %535 = %532.5;
  (%533, %534, %535, meta[relay.Constant][45] /* ty=Tensor[(44), float64] */, %var_5119, %var_5120)
}

def @func_4373() -> Tensor[(3, 2, 10), float64] {
  %536 = @func_3494() /* ty=(Tensor[(3, 2, 10), int16], Tensor[(10, 5, 4), float32], Tensor[(16, 4, 14), float64], Tensor[(896), float64], Tensor[(3, 2, 10), float64], Tensor[(525), float32]) */;
  %536.4
}

def @func_3786() -> Tensor[(525), float32] {
  @func_3687() /* ty=Tensor[(525), float32] */
}

def @func_4557() -> Tensor[(7, 13, 9), float32] {
  %537 = @func_3712() /* ty=(Tensor[(7, 13, 9), float32],) */;
  %537.0
}

def @func_3583(%var_3576: int16, %var_3578: Tensor[(4, 4), float32]) -> (Tensor[(3, 2, 10), float64], Tensor[(3, 10, 4), int16], int16, Tensor[(1152), float64], Tensor[(4, 4), float32]) {
  %538 = @func_3544() /* ty=(Tensor[(3, 2, 10), float64],) */;
  %539 = cast(%var_3576, dtype="int16") /* ty=int16 */;
  %540 = cast(meta[relay.Constant][46] /* ty=Tensor[(1152), float64] */, dtype="float64") /* ty=Tensor[(1152), float64] */;
  %541 = cast(%var_3578, dtype="float32") /* ty=Tensor[(4, 4), float32] */;
  %542 = reshape(%539, newshape=[]) /* ty=int16 */;
  %543 = reshape(%540, newshape=[1152]) /* ty=Tensor[(1152), float64] */;
  %544 = reshape(%541, newshape=[4, 4]) /* ty=Tensor[(4, 4), float32] */;
  %545 = @func_1516(%542, %543, %544) /* ty=(Tensor[(3, 10, 4), int16], Tensor[(12, 6, 16), float64], Tensor[(1152), float64], Tensor[(2, 8, 1), float32], Tensor[(4, 4), float32], Tensor[(2, 8, 1), float32], Tensor[(12, 6, 16), float64]) */;
  %546 = %538.0;
  %547 = %545.0;
  (%546, %547, %var_3576, meta[relay.Constant][46] /* ty=Tensor[(1152), float64] */, %var_3578)
}

def @func_4337(%var_4319: Tensor[(525), float32], %var_4332: Tensor[(312), int16], %var_4333: Tensor[(1152), uint32]) -> (Tensor[(525), float32], Tensor[(2, 12, 15), int32], Tensor[(360), float64], Tensor[(1152), uint32], Tensor[(312), int16], Tensor[(1152), uint32]) {
  %548 = @func_3786() /* ty=Tensor[(525), float32] */;
  %549 = cast(%var_4319, dtype="float32") /* ty=Tensor[(525), float32] */;
  %550 = shape_of(%548, dtype="int32") /* ty=Tensor[(1), int32] */;
  %551 = cast(%548, dtype="float32") /* ty=Tensor[(525), float32] */;
  %552 = dyn.reshape(%549, %550, newshape=[]) /* ty=Tensor[(?), float32] */;
  %553 = cast(meta[relay.Constant][47] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %554 = cast(meta[relay.Constant][47] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %555 = reshape(%553, newshape=[2, 12, 15]) /* ty=Tensor[(2, 12, 15), float64] */;
  %556 = reshape(%554, newshape=[2, 12, 15]) /* ty=Tensor[(2, 12, 15), float64] */;
  %557 = @func_3196(%555, %556) /* ty=(Tensor[(2, 12, 15), int32],) */;
  %558 = cast(%var_4332, dtype="int16") /* ty=Tensor[(312), int16] */;
  %559 = cast(%var_4333, dtype="uint32") /* ty=Tensor[(1152), uint32] */;
  %560 = reshape(%558, newshape=[13, 12, 2]) /* ty=Tensor[(13, 12, 2), int16] */;
  %561 = reshape(%559, newshape=[1152]) /* ty=Tensor[(1152), uint32] */;
  %562 = @func_2843(%560, %561) /* ty=(Tensor[(13, 12, 2), bool], Tensor[(720), int64], Tensor[(4, 15, 12), uint8], Tensor[(13, 12, 2), float32], Tensor[(6, 16, 12), uint32], Tensor[(1152), uint32]) */;
  %563 = floor_mod(%551, %552) /* ty=Tensor[(525), float32] */;
  %564 = %557.0;
  %565 = %562.5;
  (%563, %564, meta[relay.Constant][47] /* ty=Tensor[(360), float64] */, %565, %var_4332, %var_4333)
}

def @func_5460(%var_5455: Tensor[(8, 2, 16), int8]) -> (Tensor[(8, 2, 16), bool],) {
  %566 = cast(meta[relay.Constant][48] /* ty=Tensor[(8, 2, 16), int8] */, dtype="bool") /* ty=Tensor[(8, 2, 16), bool] */;
  %567 = shape_of(%var_5455, dtype="int32") /* ty=Tensor[(3), int32] */;
  %568 = cast(%var_5455, dtype="bool") /* ty=Tensor[(8, 2, 16), bool] */;
  %569 = dyn.reshape(%566, %567, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %570 = equal(%568, %569) /* ty=Tensor[(8, 2, 16), bool] */;
  (%570,)
}

def @func_4707() -> (Tensor[(525), float32],) {
  %571 = @func_3687() /* ty=Tensor[(525), float32] */;
  (%571,)
}

def @func_5084(%var_5076: Tensor[(1280), uint16]) -> Tensor[(1280), bool] {
  %572 = @func_5039() /* ty=(Tensor[(7, 13, 9), int16], Tensor[(16, 8, 10), uint16], Tensor[(1280), uint16]) */;
  %573 = %572.2;
  %574 = cast(%var_5076, dtype="bool") /* ty=Tensor[(1280), bool] */;
  %575 = shape_of(%573, dtype="int32") /* ty=Tensor[(1), int32] */;
  %576 = cast(%573, dtype="bool") /* ty=Tensor[(1280), bool] */;
  %577 = dyn.reshape(%574, %575, newshape=[]) /* ty=Tensor[(?), bool] */;
  logical_and(%576, %577) /* ty=Tensor[(1280), bool] */
}

def @func_5491(%var_5467: Tensor[(14, 6, 9), int8], %var_5468: Tensor[(14, 6, 9), int8]) -> Tensor[(14, 6, 9), int8] {
  %578 = cast(%var_5468, dtype="int8") /* ty=Tensor[(14, 6, 9), int8] */;
  %579 = shape_of(%var_5467, dtype="int32") /* ty=Tensor[(3), int32] */;
  %580 = cast(%var_5467, dtype="int8") /* ty=Tensor[(14, 6, 9), int8] */;
  %581 = dyn.reshape(%578, %579, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  minimum(%580, %581) /* ty=Tensor[(14, 6, 9), int8] */
}

def @func_3411(%var_3400: Tensor[(525), float32]) -> (Tensor[(3, 2, 10), uint16], Tensor[(15, 7, 5), bool], Tensor[(525), float32], Tensor[(3, 2, 10), float64]) {
  %582 = @func_3378() /* ty=(Tensor[(3, 2, 10), int16], Tensor[(10, 5, 4), float64], Tensor[(200), uint16]) */;
  %583 = %582.0;
  %584 = cast(meta[relay.Constant][49] /* ty=Tensor[(3, 2, 10), int16] */, dtype="uint16") /* ty=Tensor[(3, 2, 10), uint16] */;
  %585 = shape_of(%583, dtype="int32") /* ty=Tensor[(3), int32] */;
  %586 = cast(%583, dtype="uint16") /* ty=Tensor[(3, 2, 10), uint16] */;
  %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %588 = cast(%var_3400, dtype="float32") /* ty=Tensor[(525), float32] */;
  %589 = reshape(%588, newshape=[15, 7, 5]) /* ty=Tensor[(15, 7, 5), float32] */;
  %590 = cast(%583, dtype="float64") /* ty=Tensor[(3, 2, 10), float64] */;
  %591 = multiply(%586, %587) /* ty=Tensor[(3, 2, 10), uint16] */;
  %592 = @func_698(%589) /* ty=Tensor[(15, 7, 5), bool] */;
  %593 = sigmoid(%590) /* ty=Tensor[(3, 2, 10), float64] */;
  (%591, %592, %var_3400, %593)
}

def @func_5892() -> Tensor[(3, 2, 10), float32] {
  %594 = @func_4234() /* ty=(Tensor[(3, 2, 10), float32],) */;
  %594.0
}

def @func_4482(%var_4480: Tensor[(720), int64]) -> (Tensor[(7, 13, 9), float32], Tensor[(4, 15, 12), bool], Tensor[(720), int64]) {
  %595 = @func_3712() /* ty=(Tensor[(7, 13, 9), float32],) */;
  %596 = cast(%var_4480, dtype="int64") /* ty=Tensor[(720), int64] */;
  %597 = reshape(%596, newshape=[4, 15, 12]) /* ty=Tensor[(4, 15, 12), int64] */;
  %598 = @func_1412(%597) /* ty=(Tensor[(4, 15, 12), bool],) */;
  %599 = %595.0;
  %600 = %598.0;
  (%599, %600, %var_4480)
}

def @func_6047(%var_6038: Tensor[(27), float64], %var_6045: Tensor[(720), int64]) -> (Tensor[(525), float32], Tensor[(3, 2, 10), float64], Tensor[(7, 13, 9), int64], Tensor[(9, 1, 3), float64], Tensor[(27), float32], Tensor[(4, 15, 12), bool], Tensor[(720), int64]) {
  %601 = @func_4707() /* ty=(Tensor[(525), float32],) */;
  %602 = @func_3544() /* ty=(Tensor[(3, 2, 10), float64],) */;
  %603 = @func_5401() /* ty=(Tensor[(7, 13, 9), float32],) */;
  %604 = %603.0;
  %605 = cast(%604, dtype="float32") /* ty=Tensor[(7, 13, 9), float32] */;
  %606 = atanh(%605) /* ty=Tensor[(7, 13, 9), float32] */;
  %607 = cast(%606, dtype="int64") /* ty=Tensor[(7, 13, 9), int64] */;
  %608 = shape_of(%604, dtype="int32") /* ty=Tensor[(3), int32] */;
  %609 = cast(%604, dtype="int64") /* ty=Tensor[(7, 13, 9), int64] */;
  %610 = dyn.reshape(%607, %608, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %611 = cast(%var_6038, dtype="float64") /* ty=Tensor[(27), float64] */;
  %612 = reshape(%611, newshape=[9, 1, 3]) /* ty=Tensor[(9, 1, 3), float64] */;
  %613 = @func_912(%612) /* ty=(Tensor[(9, 1, 3), float64],) */;
  %614 = cast(%var_6038, dtype="float32") /* ty=Tensor[(27), float32] */;
  %615 = cast(%var_6045, dtype="int64") /* ty=Tensor[(720), int64] */;
  %616 = reshape(%615, newshape=[720]) /* ty=Tensor[(720), int64] */;
  %617 = @func_4482(%616) /* ty=(Tensor[(7, 13, 9), float32], Tensor[(4, 15, 12), bool], Tensor[(720), int64]) */;
  %618 = %601.0;
  %619 = %602.0;
  %620 = minimum(%609, %610) /* ty=Tensor[(7, 13, 9), int64] */;
  %621 = %613.0;
  %622 = asinh(%614) /* ty=Tensor[(27), float32] */;
  %623 = %617.1;
  (%618, %619, %620, %621, %622, %623, %var_6045)
}

def @func_3244(%var_3226: Tensor[(12, 1, 5), float32], %var_3232: Tensor[(12, 16, 5), float32]) -> (Tensor[(12, 16, 5), uint8],) {
  %624 = cast(%var_3226, dtype="float32") /* ty=Tensor[(12, 1, 5), float32] */;
  %625 = log10(%624) /* ty=Tensor[(12, 1, 5), float32] */;
  %626 = cast(%625, dtype="uint8") /* ty=Tensor[(12, 1, 5), uint8] */;
  %627 = cast(%var_3232, dtype="uint8") /* ty=Tensor[(12, 16, 5), uint8] */;
  %628 = bitwise_xor(%626, %627) /* ty=Tensor[(12, 16, 5), uint8] */;
  (%628,)
}

def @func_2597(%var_2566: Tensor[(8, 4, 3), float64]) -> Tensor[(8, 4, 3), float32] {
  %629 = cast(%var_2566, dtype="float64") /* ty=Tensor[(8, 4, 3), float64] */;
  %630 = cos(%629) /* ty=Tensor[(8, 4, 3), float64] */;
  %631 = cast(%630, dtype="float32") /* ty=Tensor[(8, 4, 3), float32] */;
  atanh(%631) /* ty=Tensor[(8, 4, 3), float32] */
}

def @func_5588(%var_5586: Tensor[(1152), uint32]) -> (Tensor[(525), float32], Tensor[(3, 4, 7), float32], Tensor[(84), float32], Tensor[(7, 13, 9), float32], Tensor[(2002), int64], Tensor[(6, 16, 12), uint32], Tensor[(1152), uint32]) {
  %632 = @func_4992() /* ty=(Tensor[(525), float32],) */;
  %633 = cast(meta[relay.Constant][50] /* ty=Tensor[(84), float32] */, dtype="float32") /* ty=Tensor[(84), float32] */;
  %634 = reshape(%633, newshape=[3, 4, 7]) /* ty=Tensor[(3, 4, 7), float32] */;
  %635 = @func_3049(%634) /* ty=(Tensor[(3, 4, 7), float32],) */;
  %636 = cast(meta[relay.Constant][51] /* ty=Tensor[(2002), int64] */, dtype="int64") /* ty=Tensor[(2002), int64] */;
  %637 = reshape(%636, newshape=[2002]) /* ty=Tensor[(2002), int64] */;
  %638 = @func_4009(%637) /* ty=(Tensor[(7, 13, 9), float32], Tensor[(14, 11, 13), bool], Tensor[(2002), int64]) */;
  %639 = cast(%var_5586, dtype="uint32") /* ty=Tensor[(1152), uint32] */;
  %640 = cast(%var_5586, dtype="uint32") /* ty=Tensor[(1152), uint32] */;
  %641 = reshape(%639, newshape=[6, 16, 12]) /* ty=Tensor[(6, 16, 12), uint32] */;
  %642 = reshape(%640, newshape=[6, 16, 12]) /* ty=Tensor[(6, 16, 12), uint32] */;
  %643 = %632.0;
  %644 = %635.0;
  %645 = %638.0;
  %646 = @func_1637(%641, %642) /* ty=Tensor[(6, 16, 12), uint32] */;
  (%643, %644, meta[relay.Constant][50] /* ty=Tensor[(84), float32] */, %645, meta[relay.Constant][51] /* ty=Tensor[(2002), int64] */, %646, %var_5586)
}

def @func_2644(%var_2625: Tensor[(4, 10, 14), uint8], %var_2626: Tensor[(4, 10, 14), uint8]) -> (Tensor[(4, 10, 14), uint8], Tensor[(16, 4, 14), float64], Tensor[(896), float64]) {
  %647 = cast(%var_2626, dtype="uint8") /* ty=Tensor[(4, 10, 14), uint8] */;
  %648 = shape_of(%var_2625, dtype="int32") /* ty=Tensor[(3), int32] */;
  %649 = cast(%var_2625, dtype="uint8") /* ty=Tensor[(4, 10, 14), uint8] */;
  %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %651 = cast(meta[relay.Constant][52] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
  %652 = reshape(%651, newshape=[16, 4, 14]) /* ty=Tensor[(16, 4, 14), float64] */;
  %653 = @func_1204(%652) /* ty=(Tensor[(16, 4, 14), float64],) */;
  %654 = multiply(%649, %650) /* ty=Tensor[(4, 10, 14), uint8] */;
  %655 = %653.0;
  (%654, %655, meta[relay.Constant][52] /* ty=Tensor[(896), float64] */)
}

def @func_3544() -> (Tensor[(3, 2, 10), float64],) {
  %656 = @func_3494() /* ty=(Tensor[(3, 2, 10), int16], Tensor[(10, 5, 4), float32], Tensor[(16, 4, 14), float64], Tensor[(896), float64], Tensor[(3, 2, 10), float64], Tensor[(525), float32]) */;
  %657 = %656.4;
  (%657,)
}

def @func_5039() -> (Tensor[(7, 13, 9), int16], Tensor[(16, 8, 10), uint16], Tensor[(1280), uint16]) {
  %658 = @func_3712() /* ty=(Tensor[(7, 13, 9), float32],) */;
  %659 = %658.0;
  %660 = cast(meta[relay.Constant][53] /* ty=Tensor[(7, 13, 9), float32] */, dtype="int16") /* ty=Tensor[(7, 13, 9), int16] */;
  %661 = shape_of(%659, dtype="int32") /* ty=Tensor[(3), int32] */;
  %662 = cast(%659, dtype="int16") /* ty=Tensor[(7, 13, 9), int16] */;
  %663 = dyn.reshape(%660, %661, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %664 = cast(meta[relay.Constant][54] /* ty=Tensor[(1280), uint16] */, dtype="uint16") /* ty=Tensor[(1280), uint16] */;
  %665 = cast(meta[relay.Constant][54] /* ty=Tensor[(1280), uint16] */, dtype="uint16") /* ty=Tensor[(1280), uint16] */;
  %666 = reshape(%664, newshape=[16, 8, 10]) /* ty=Tensor[(16, 8, 10), uint16] */;
  %667 = reshape(%665, newshape=[16, 8, 10]) /* ty=Tensor[(16, 8, 10), uint16] */;
  %668 = @func_2356(%666, %667) /* ty=(Tensor[(16, 8, 10), uint16],) */;
  %669 = logical_xor(%662, %663) /* ty=Tensor[(7, 13, 9), int16] */;
  %670 = %668.0;
  (%669, %670, meta[relay.Constant][54] /* ty=Tensor[(1280), uint16] */)
}

def @func_4594(%var_4567: Tensor[(525), float32], %var_4583: Tensor[(1280), uint16]) -> (Tensor[(525), bool], Tensor[(16, 8, 10), uint16], Tensor[(1280), uint16]) {
  %671 = @func_3786() /* ty=Tensor[(525), float32] */;
  %672 = cast(%var_4567, dtype="bool") /* ty=Tensor[(525), bool] */;
  %673 = shape_of(%671, dtype="int32") /* ty=Tensor[(1), int32] */;
  %674 = cast(%671, dtype="bool") /* ty=Tensor[(525), bool] */;
  %675 = dyn.reshape(%672, %673, newshape=[]) /* ty=Tensor[(?), bool] */;
  %676 = cast(%var_4583, dtype="uint16") /* ty=Tensor[(1280), uint16] */;
  %677 = cast(%var_4583, dtype="uint16") /* ty=Tensor[(1280), uint16] */;
  %678 = reshape(%676, newshape=[16, 8, 10]) /* ty=Tensor[(16, 8, 10), uint16] */;
  %679 = reshape(%677, newshape=[16, 8, 10]) /* ty=Tensor[(16, 8, 10), uint16] */;
  %680 = @func_2356(%678, %679) /* ty=(Tensor[(16, 8, 10), uint16],) */;
  %681 = equal(%674, %675) /* ty=Tensor[(525), bool] */;
  %682 = %680.0;
  (%681, %682, %var_4583)
}

def @func_6191(%var_6159: Tensor[(3, 2, 10), float32], %var_6166: Tensor[(4, 180), int64]) -> (Tensor[(3, 2, 10), float32], Tensor[(4, 180), int64], Tensor[(525), float32], Tensor[(4, 15, 12), float32]) {
  %683 = @func_5200() /* ty=(Tensor[(3, 2, 10), float32],) */;
  %684 = %683.0;
  %685 = cast(%var_6159, dtype="float32") /* ty=Tensor[(3, 2, 10), float32] */;
  %686 = shape_of(%684, dtype="int32") /* ty=Tensor[(3), int32] */;
  %687 = cast(%684, dtype="float32") /* ty=Tensor[(3, 2, 10), float32] */;
  %688 = dyn.reshape(%685, %686, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %689 = @func_5334() /* ty=(Tensor[(10, 5, 4), float32], Tensor[(1, 1470), float64], Tensor[(15, 14, 7), float64], Tensor[(13, ?, 7), int64], Tensor[(91), float32], Tensor[(525), float32], Tensor[(13, 9, 9), bool], Tensor[(1053), float32]) */;
  %690 = cast(%var_6166, dtype="int64") /* ty=Tensor[(4, 180), int64] */;
  %691 = reshape(%690, newshape=[4, 15, 12]) /* ty=Tensor[(4, 15, 12), int64] */;
  %692 = @func_1412(%691) /* ty=(Tensor[(4, 15, 12), bool],) */;
  %693 = %692.0;
  %694 = cast(%693, dtype="float32") /* ty=Tensor[(4, 15, 12), float32] */;
  %695 = floor_mod(%687, %688) /* ty=Tensor[(3, 2, 10), float32] */;
  %696 = %689.5;
  %697 = atanh(%694) /* ty=Tensor[(4, 15, 12), float32] */;
  (%695, %var_6166, %696, %697)
}

def @func_5837() -> Tensor[(3, 2, 10), uint8] {
  %698 = @func_5054() /* ty=(Tensor[(3, 2, 10), float32],) */;
  %699 = %698.0;
  %700 = cast(meta[relay.Constant][55] /* ty=Tensor[(3, 2, 10), float32] */, dtype="uint8") /* ty=Tensor[(3, 2, 10), uint8] */;
  %701 = shape_of(%699, dtype="int32") /* ty=Tensor[(3), int32] */;
  %702 = cast(%699, dtype="uint8") /* ty=Tensor[(3, 2, 10), uint8] */;
  %703 = dyn.reshape(%700, %701, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  subtract(%702, %703) /* ty=Tensor[(3, 2, 10), uint8] */
}

def @func_3826() -> Tensor[(14, 1, 15), bool] {
  %704 = cast(1.53753f /* ty=float32 */, dtype="bool") /* ty=bool */;
  %705 = cast(meta[relay.Constant][56] /* ty=Tensor[(14, 1, 15), float32] */, dtype="bool") /* ty=Tensor[(14, 1, 15), bool] */;
  greater(%704, %705) /* ty=Tensor[(14, 1, 15), bool] */
}

def @func_2843(%var_2800: Tensor[(13, 12, 2), int16], %var_2839: Tensor[(1152), uint32]) -> (Tensor[(13, 12, 2), bool], Tensor[(720), int64], Tensor[(4, 15, 12), uint8], Tensor[(13, 12, 2), float32], Tensor[(6, 16, 12), uint32], Tensor[(1152), uint32]) {
  %706 = cast(meta[relay.Constant][57] /* ty=int16 */, dtype="bool") /* ty=bool */;
  %707 = cast(%var_2800, dtype="bool") /* ty=Tensor[(13, 12, 2), bool] */;
  %708 = less_equal(%706, %707) /* ty=Tensor[(13, 12, 2), bool] */;
  %709 = cast(%708, dtype="bool") /* ty=Tensor[(13, 12, 2), bool] */;
  %710 = cast(meta[relay.Constant][57] /* ty=int16 */, dtype="bool") /* ty=bool */;
  %711 = cast(meta[relay.Constant][58] /* ty=Tensor[(720), int64] */, dtype="int64") /* ty=Tensor[(720), int64] */;
  %712 = reshape(%711, newshape=[4, 15, 12]) /* ty=Tensor[(4, 15, 12), int64] */;
  %713 = @func_1412(%712) /* ty=(Tensor[(4, 15, 12), bool],) */;
  %714 = %713.0;
  %715 = cast(%714, dtype="float32") /* ty=Tensor[(4, 15, 12), float32] */;
  %716 = cosh(%715) /* ty=Tensor[(4, 15, 12), float32] */;
  %717 = cast(%716, dtype="int16") /* ty=Tensor[(4, 15, 12), int16] */;
  %718 = cast(meta[relay.Constant][57] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %719 = bitwise_and(%717, %718) /* ty=Tensor[(4, 15, 12), int16] */;
  %720 = cast(%719, dtype="uint8") /* ty=Tensor[(4, 15, 12), uint8] */;
  %721 = shape_of(%716, dtype="int32") /* ty=Tensor[(3), int32] */;
  %722 = cast(%716, dtype="uint8") /* ty=Tensor[(4, 15, 12), uint8] */;
  %723 = dyn.reshape(%720, %721, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %724 = cast(%708, dtype="float32") /* ty=Tensor[(13, 12, 2), float32] */;
  %725 = cast(meta[relay.Constant][57] /* ty=int16 */, dtype="float32") /* ty=float32 */;
  %726 = cast(%var_2839, dtype="uint32") /* ty=Tensor[(1152), uint32] */;
  %727 = cast(%var_2839, dtype="uint32") /* ty=Tensor[(1152), uint32] */;
  %728 = reshape(%726, newshape=[6, 16, 12]) /* ty=Tensor[(6, 16, 12), uint32] */;
  %729 = reshape(%727, newshape=[6, 16, 12]) /* ty=Tensor[(6, 16, 12), uint32] */;
  %730 = logical_and(%709, %710) /* ty=Tensor[(13, 12, 2), bool] */;
  %731 = left_shift(%722, %723) /* ty=Tensor[(4, 15, 12), uint8] */;
  %732 = power(%724, %725) /* ty=Tensor[(13, 12, 2), float32] */;
  %733 = @func_1637(%728, %729) /* ty=Tensor[(6, 16, 12), uint32] */;
  (%730, meta[relay.Constant][58] /* ty=Tensor[(720), int64] */, %731, %732, %733, %var_2839)
}

def @func_3438(%var_3428: Tensor[(198), float32]) -> (Tensor[(200), uint16], Tensor[(16, 8, 10), uint16], Tensor[(198), float32], Tensor[(896), float64], Tensor[(4, 4), float32], Tensor[(1280), uint16], Tensor[(10, 5, 4), float64]) {
  %734 = @func_3378() /* ty=(Tensor[(3, 2, 10), int16], Tensor[(10, 5, 4), float64], Tensor[(200), uint16]) */;
  %735 = cast(%var_3428, dtype="float32") /* ty=Tensor[(198), float32] */;
  %736 = cast(meta[relay.Constant][59] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
  %737 = cast(meta[relay.Constant][60] /* ty=Tensor[(4, 4), float32] */, dtype="float32") /* ty=Tensor[(4, 4), float32] */;
  %738 = %734.2;
  %739 = cast(%738, dtype="uint16") /* ty=Tensor[(200), uint16] */;
  %740 = cast(meta[relay.Constant][61] /* ty=Tensor[(1280), uint16] */, dtype="uint16") /* ty=Tensor[(1280), uint16] */;
  %741 = reshape(%735, newshape=[3, 6, 11]) /* ty=Tensor[(3, 6, 11), float32] */;
  %742 = reshape(%736, newshape=[896]) /* ty=Tensor[(896), float64] */;
  %743 = reshape(%737, newshape=[16]) /* ty=Tensor[(16), float32] */;
  %744 = reshape(%739, newshape=[200]) /* ty=Tensor[(200), uint16] */;
  %745 = reshape(%740, newshape=[1280]) /* ty=Tensor[(1280), uint16] */;
  %746 = @func_2543(%741, %742, %743, %744, %745) /* ty=(Tensor[(3, 6, 11), bool], Tensor[(12, 6, 16), float64], Tensor[(1152), float64], Tensor[(4, 15, 12), bool], Tensor[(720), int64], Tensor[(10, 5, 4), float64], uint16, Tensor[(13), uint16], Tensor[(896), float64], Tensor[(27, 1), float64], Tensor[(16), float32], Tensor[(200), uint16], Tensor[(2, 2, 11), bool], Tensor[(44), float64], Tensor[(16, 8, 10), uint16], Tensor[(1280), uint16]) */;
  %747 = cast(%738, dtype="uint16") /* ty=Tensor[(200), uint16] */;
  %748 = reshape(%747, newshape=[10, 5, 4]) /* ty=Tensor[(10, 5, 4), uint16] */;
  %749 = %746.14;
  %750 = @func_234(%748) /* ty=Tensor[(10, 5, 4), float64] */;
  (%738, %749, %var_3428, meta[relay.Constant][59] /* ty=Tensor[(896), float64] */, meta[relay.Constant][60] /* ty=Tensor[(4, 4), float32] */, meta[relay.Constant][61] /* ty=Tensor[(1280), uint16] */, %750)
}

def @func_5002() -> Tensor[(525), float32] {
  %751 = @func_4072() /* ty=(Tensor[(525), float32], Tensor[(200), uint16], Tensor[(525), float64]) */;
  %751.0
}

def @func_3687() -> Tensor[(525), float32] {
  %752 = @func_3494() /* ty=(Tensor[(3, 2, 10), int16], Tensor[(10, 5, 4), float32], Tensor[(16, 4, 14), float64], Tensor[(896), float64], Tensor[(3, 2, 10), float64], Tensor[(525), float32]) */;
  %752.5
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1637(%var_1620: Tensor[(6, 16, 12), uint32], %var_1621: Tensor[(6, 16, 12), uint32]) -> Tensor[(6, 16, 12), uint32] {
  %0 = cast(%var_1621, dtype="uint32") /* ty=Tensor[(6, 16, 12), uint32] */;
  %1 = shape_of(%var_1620, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(%var_1620, dtype="uint32") /* ty=Tensor[(6, 16, 12), uint32] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  maximum(%2, %3) /* ty=Tensor[(6, 16, 12), uint32] */
}

def @func_3698() -> (Tensor[(7, 13, 9), float32],) {
  %6 = fn () -> (Tensor[(7, 13, 9), float32],) {
    %4 = cast(meta[relay.Constant][0] /* ty=Tensor[(7, 13, 9), float32] */, dtype="float32") /* ty=Tensor[(7, 13, 9), float32] */;
    %5 = log(%4) /* ty=Tensor[(7, 13, 9), float32] */;
    (%5,)
  };
  %6() /* ty=(Tensor[(7, 13, 9), float32],) */
}

def @func_915(%var_913: Tensor[(9, 1, 3), float64]) -> (Tensor[(9, 1, 3), float64],) {
  @func_912(%var_913) /* ty=(Tensor[(9, 1, 3), float64],) */
}

def @func_5935() -> (Tensor[(525), float64], Tensor[(4, 15, 12), bool], Tensor[(1, 720), int64], Tensor[(15, 7, 5), bool]) {
  %15 = fn () -> (Tensor[(525), float64], Tensor[(4, 15, 12), bool], Tensor[(1, 720), int64], Tensor[(15, 7, 5), bool]) {
    %7 = cast(meta[relay.Constant][1] /* ty=Tensor[(1, 720), int64] */, dtype="int64") /* ty=Tensor[(1, 720), int64] */;
    %8 = reshape(%7, newshape=[4, 15, 12]) /* ty=Tensor[(4, 15, 12), int64] */;
    %9 = @func_1412(%8) /* ty=(Tensor[(4, 15, 12), bool],) */;
    %10 = @func_5792() /* ty=Tensor[(525), float64] */;
    %11 = cast(%10, dtype="float32") /* ty=Tensor[(525), float32] */;
    %12 = reshape(%11, newshape=[15, 7, 5]) /* ty=Tensor[(15, 7, 5), float32] */;
    %13 = %9.0;
    %14 = @func_698(%12) /* ty=Tensor[(15, 7, 5), bool] */;
    (%10, %13, meta[relay.Constant][1] /* ty=Tensor[(1, 720), int64] */, %14)
  };
  %15() /* ty=(Tensor[(525), float64], Tensor[(4, 15, 12), bool], Tensor[(1, 720), int64], Tensor[(15, 7, 5), bool]) */
}

def @func_1516(%var_1463: int16, %var_1472: Tensor[(1152), float64], %var_1492: Tensor[(4, 4), float32]) -> (Tensor[(3, 10, 4), int16], Tensor[(12, 6, 16), float64], Tensor[(1152), float64], Tensor[(2, 8, 1), float32], Tensor[(4, 4), float32], Tensor[(2, 8, 1), float32], Tensor[(12, 6, 16), float64]) {
  %16 = cast(%var_1463, dtype="int16") /* ty=int16 */;
  %17 = cast(meta[relay.Constant][2] /* ty=Tensor[(3, 10, 4), int16] */, dtype="int16") /* ty=Tensor[(3, 10, 4), int16] */;
  %18 = cast(%var_1472, dtype="float64") /* ty=Tensor[(1152), float64] */;
  %19 = reshape(%18, newshape=[12, 6, 16]) /* ty=Tensor[(12, 6, 16), float64] */;
  %20 = @func_394(%19) /* ty=(Tensor[(12, 6, 16), float64], Tensor[(12, 6, 16), float64]) */;
  %21 = cast(%var_1492, dtype="float32") /* ty=Tensor[(4, 4), float32] */;
  %22 = reshape(%21, newshape=[2, 8, 1]) /* ty=Tensor[(2, 8, 1), float32] */;
  %23 = @func_1270(%22) /* ty=(Tensor[(2, 8, 1), float32],) */;
  %24 = cast(%var_1492, dtype="float32") /* ty=Tensor[(4, 4), float32] */;
  %25 = reshape(%24, newshape=[2, 8, 1]) /* ty=Tensor[(2, 8, 1), float32] */;
  %26 = @func_1270(%25) /* ty=(Tensor[(2, 8, 1), float32],) */;
  %27 = %20.1;
  %28 = cast(%27, dtype="float64") /* ty=Tensor[(12, 6, 16), float64] */;
  %29 = reshape(%28, newshape=[12, 6, 16]) /* ty=Tensor[(12, 6, 16), float64] */;
  %30 = @func_394(%29) /* ty=(Tensor[(12, 6, 16), float64], Tensor[(12, 6, 16), float64]) */;
  %31 = %30.0;
  %32 = cast(%31, dtype="float64") /* ty=Tensor[(12, 6, 16), float64] */;
  %33 = logical_xor(%16, %17) /* ty=Tensor[(3, 10, 4), int16] */;
  %34 = %23.0;
  %35 = %26.0;
  %36 = acos(%32) /* ty=Tensor[(12, 6, 16), float64] */;
  (%33, %27, %var_1472, %34, %var_1492, %35, %36)
}

def @func_5721(%var_5717: Tensor[(16, 11, 12), float32]) -> (Tensor[(16, 11, 12), float32],) {
  %37 = cast(%var_5717, dtype="float32") /* ty=Tensor[(16, 11, 12), float32] */;
  %38 = atan(%37) /* ty=Tensor[(16, 11, 12), float32] */;
  (%38,)
}

def @func_5491(%var_5467: Tensor[(14, 6, 9), int8], %var_5468: Tensor[(14, 6, 9), int8]) -> Tensor[(14, 6, 9), int8] {
  %39 = cast(%var_5468, dtype="int8") /* ty=Tensor[(14, 6, 9), int8] */;
  %40 = shape_of(%var_5467, dtype="int32") /* ty=Tensor[(3), int32] */;
  %41 = cast(%var_5467, dtype="int8") /* ty=Tensor[(14, 6, 9), int8] */;
  %42 = dyn.reshape(%39, %40, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  minimum(%41, %42) /* ty=Tensor[(14, 6, 9), int8] */
}

def @func_553(%var_551: Tensor[(9, 5, 10), float64]) -> Tensor[(9, 5, 10), float64] {
  @func_550(%var_551) /* ty=Tensor[(9, 5, 10), float64] */
}

def @func_6295(%var_6294: Tensor[(8, 1, 6), float32]) -> (Tensor[(8, 1, 6), float32],) {
  %45 = fn (%var_6290: Tensor[(8, 1, 6), float32]) -> (Tensor[(8, 1, 6), float32],) {
    %43 = cast(%var_6290, dtype="float32") /* ty=Tensor[(8, 1, 6), float32] */;
    %44 = rsqrt(%43) /* ty=Tensor[(8, 1, 6), float32] */;
    (%44,)
  };
  %45(%var_6294) /* ty=(Tensor[(8, 1, 6), float32],) */
}

def @func_2735(%var_2734: Tensor[(15, 14, 7), float64]) -> Tensor[(15, 14, 7), bool] {
  %57 = fn (%var_2716: Tensor[(15, 14, 7), float64]) -> Tensor[(15, 14, 7), bool] {
    %46 = cast(%var_2716, dtype="float64") /* ty=Tensor[(15, 14, 7), float64] */;
    %47 = sinh(%46) /* ty=Tensor[(15, 14, 7), float64] */;
    %48 = cast(%var_2716, dtype="bool") /* ty=Tensor[(15, 14, 7), bool] */;
    %49 = shape_of(%47, dtype="int32") /* ty=Tensor[(3), int32] */;
    %50 = cast(%47, dtype="bool") /* ty=Tensor[(15, 14, 7), bool] */;
    %51 = dyn.reshape(%48, %49, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %52 = not_equal(%50, %51) /* ty=Tensor[(15, 14, 7), bool] */;
    %53 = cast(%52, dtype="bool") /* ty=Tensor[(15, 14, 7), bool] */;
    %54 = shape_of(%47, dtype="int32") /* ty=Tensor[(3), int32] */;
    %55 = cast(%47, dtype="bool") /* ty=Tensor[(15, 14, 7), bool] */;
    %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    equal(%55, %56) /* ty=Tensor[(15, 14, 7), bool] */
  };
  %57(%var_2734) /* ty=Tensor[(15, 14, 7), bool] */
}

def @func_5334() -> (Tensor[(10, 5, 4), float32], Tensor[(1, 1470), float64], Tensor[(15, 14, 7), float64], Tensor[(13, ?, 7), int64], Tensor[(91), float32], Tensor[(525), float32], Tensor[(13, 9, 9), bool], Tensor[(1053), float32]) {
  %58 = @func_3494() /* ty=(Tensor[(3, 2, 10), int16], Tensor[(10, 5, 4), float32], Tensor[(16, 4, 14), float64], Tensor[(896), float64], Tensor[(3, 2, 10), float64], Tensor[(525), float32]) */;
  %59 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 1470), float64] */, dtype="float64") /* ty=Tensor[(1, 1470), float64] */;
  %60 = reshape(%59, newshape=[15, 14, 7]) /* ty=Tensor[(15, 14, 7), float64] */;
  %61 = @func_2733(%60) /* ty=Tensor[(15, 14, 7), bool] */;
  %62 = cast(%61, dtype="float64") /* ty=Tensor[(15, 14, 7), float64] */;
  %63 = tan(%62) /* ty=Tensor[(15, 14, 7), float64] */;
  %64 = cast(%63, dtype="float64") /* ty=Tensor[(15, 14, 7), float64] */;
  %65 = cast(meta[relay.Constant][4] /* ty=Tensor[(91), float32] */, dtype="float32") /* ty=Tensor[(91), float32] */;
  %66 = cast(meta[relay.Constant][5] /* ty=Tensor[(525), float32] */, dtype="float32") /* ty=Tensor[(525), float32] */;
  %67 = reshape(%65, newshape=[13, 1, 7]) /* ty=Tensor[(13, 1, 7), float32] */;
  %68 = reshape(%66, newshape=[525]) /* ty=Tensor[(525), float32] */;
  %69 = @func_4900(%67, %68) /* ty=(Tensor[(525), float32], Tensor[(525), int64], Tensor[(13, ?, 7), bool], Tensor[(14, 1, 15), bool], Tensor[(13, ?, 7), int64]) */;
  %70 = cast(meta[relay.Constant][6] /* ty=Tensor[(1053), float32] */, dtype="float32") /* ty=Tensor[(1053), float32] */;
  %71 = cast(meta[relay.Constant][6] /* ty=Tensor[(1053), float32] */, dtype="float32") /* ty=Tensor[(1053), float32] */;
  %72 = reshape(%70, newshape=[13, 9, 9]) /* ty=Tensor[(13, 9, 9), float32] */;
  %73 = reshape(%71, newshape=[13, 9, 9]) /* ty=Tensor[(13, 9, 9), float32] */;
  %74 = @func_3627(%72, %73) /* ty=(Tensor[(13, 9, 9), bool],) */;
  %75 = %58.1;
  %76 = acos(%64) /* ty=Tensor[(15, 14, 7), float64] */;
  %77 = %69.4;
  %78 = %74.0;
  (%75, meta[relay.Constant][3] /* ty=Tensor[(1, 1470), float64] */, %76, %77, meta[relay.Constant][4] /* ty=Tensor[(91), float32] */, meta[relay.Constant][5] /* ty=Tensor[(525), float32] */, %78, meta[relay.Constant][6] /* ty=Tensor[(1053), float32] */)
}

def @func_5794() -> Tensor[(525), float64] {
  @func_5792() /* ty=Tensor[(525), float64] */
}

def @func_4707() -> (Tensor[(525), float32],) {
  %79 = @func_3687() /* ty=Tensor[(525), float32] */;
  (%79,)
}

def @func_5389(%var_5370: Tensor[(2, 392), uint8]) -> (Tensor[(7, 13, 9), float32], Tensor[(525), int64], uint8, Tensor[(2, 392), uint8], Tensor[(44), float64], Tensor[(1152), float64], Tensor[(120), int16], Tensor[(525), float64]) {
  %80 = @func_4618() /* ty=(Tensor[(7, 13, 9), float32],) */;
  %81 = cast(meta[relay.Constant][7] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %82 = cast(%var_5370, dtype="uint8") /* ty=Tensor[(2, 392), uint8] */;
  %83 = reshape(%81, newshape=[]) /* ty=uint8 */;
  %84 = reshape(%82, newshape=[784]) /* ty=Tensor[(784), uint8] */;
  %85 = @func_4194(%83, %84) /* ty=(Tensor[(525), int64], Tensor[(525), float32], Tensor[(4, 14, 14), uint8], uint8, Tensor[(784), uint8], Tensor[(4, 4), float32], Tensor[(1, 16), float32], Tensor[(3, 2, 10), int16]) */;
  %86 = cast(meta[relay.Constant][8] /* ty=Tensor[(1152), float64] */, dtype="float64") /* ty=Tensor[(1152), float64] */;
  %87 = cast(meta[relay.Constant][9] /* ty=Tensor[(120), int16] */, dtype="int16") /* ty=Tensor[(120), int16] */;
  %88 = reshape(%86, newshape=[1152]) /* ty=Tensor[(1152), float64] */;
  %89 = reshape(%87, newshape=[3, 10, 4]) /* ty=Tensor[(3, 10, 4), int16] */;
  %90 = @func_5187(%88, %89) /* ty=(Tensor[(3, 2, 10), int16], Tensor[(44), float64], Tensor[(1152), float64], Tensor[(16, 1), float32], Tensor[(3, 10, 4), float64]) */;
  %91 = @func_4072() /* ty=(Tensor[(525), float32], Tensor[(200), uint16], Tensor[(525), float64]) */;
  %92 = %80.0;
  %93 = %85.0;
  %94 = %90.1;
  %95 = %91.2;
  (%92, %93, meta[relay.Constant][7] /* ty=uint8 */, %var_5370, %94, meta[relay.Constant][8] /* ty=Tensor[(1152), float64] */, meta[relay.Constant][9] /* ty=Tensor[(120), int16] */, %95)
}

def @func_5191(%var_5189: Tensor[(1152), float64], %var_5190: Tensor[(3, 10, 4), int16]) -> (Tensor[(3, 2, 10), int16], Tensor[(44), float64], Tensor[(1152), float64], Tensor[(16, 1), float32], Tensor[(3, 10, 4), float64]) {
  @func_5187(%var_5189, %var_5190) /* ty=(Tensor[(3, 2, 10), int16], Tensor[(44), float64], Tensor[(1152), float64], Tensor[(16, 1), float32], Tensor[(3, 10, 4), float64]) */
}

def @func_2847(%var_2845: Tensor[(13, 12, 2), int16], %var_2846: Tensor[(1152), uint32]) -> (Tensor[(13, 12, 2), bool], Tensor[(720), int64], Tensor[(4, 15, 12), uint8], Tensor[(13, 12, 2), float32], Tensor[(6, 16, 12), uint32], Tensor[(1152), uint32]) {
  @func_2843(%var_2845, %var_2846) /* ty=(Tensor[(13, 12, 2), bool], Tensor[(720), int64], Tensor[(4, 15, 12), uint8], Tensor[(13, 12, 2), float32], Tensor[(6, 16, 12), uint32], Tensor[(1152), uint32]) */
}

def @func_4709() -> (Tensor[(525), float32],) {
  @func_4707() /* ty=(Tensor[(525), float32],) */
}

def @func_6092(%var_6059: Tensor[(27), float64], %var_6060: Tensor[(720), int64]) -> (Tensor[(525), float32], Tensor[(27), float64], Tensor[(720), int64], Tensor[(3, 2, 10), float64], Tensor[(525), bool], Tensor[(3, 2, 10), float64]) {
  %96 = cast(%var_6059, dtype="float64") /* ty=Tensor[(27), float64] */;
  %97 = cast(%var_6060, dtype="int64") /* ty=Tensor[(720), int64] */;
  %98 = reshape(%96, newshape=[27]) /* ty=Tensor[(27), float64] */;
  %99 = reshape(%97, newshape=[720]) /* ty=Tensor[(720), int64] */;
  %100 = @func_6047(%98, %99) /* ty=(Tensor[(525), float32], Tensor[(3, 2, 10), float64], Tensor[(7, 13, 9), int64], Tensor[(9, 1, 3), float64], Tensor[(27), float32], Tensor[(4, 15, 12), bool], Tensor[(720), int64]) */;
  %101 = @func_3544() /* ty=(Tensor[(3, 2, 10), float64],) */;
  %102 = @func_5792() /* ty=Tensor[(525), float64] */;
  %103 = cast(meta[relay.Constant][10] /* ty=Tensor[(525), float64] */, dtype="bool") /* ty=Tensor[(525), bool] */;
  %104 = shape_of(%102, dtype="int32") /* ty=Tensor[(1), int32] */;
  %105 = cast(%102, dtype="bool") /* ty=Tensor[(525), bool] */;
  %106 = dyn.reshape(%103, %104, newshape=[]) /* ty=Tensor[(?), bool] */;
  %107 = %100.0;
  %108 = %101.0;
  %109 = logical_and(%105, %106) /* ty=Tensor[(525), bool] */;
  %110 = @func_4373() /* ty=Tensor[(3, 2, 10), float64] */;
  (%107, %var_6059, %var_6060, %108, %109, %110)
}

def @func_3411(%var_3400: Tensor[(525), float32]) -> (Tensor[(3, 2, 10), uint16], Tensor[(15, 7, 5), bool], Tensor[(525), float32], Tensor[(3, 2, 10), float64]) {
  %111 = @func_3378() /* ty=(Tensor[(3, 2, 10), int16], Tensor[(10, 5, 4), float64], Tensor[(200), uint16]) */;
  %112 = %111.0;
  %113 = cast(meta[relay.Constant][11] /* ty=Tensor[(3, 2, 10), int16] */, dtype="uint16") /* ty=Tensor[(3, 2, 10), uint16] */;
  %114 = shape_of(%112, dtype="int32") /* ty=Tensor[(3), int32] */;
  %115 = cast(%112, dtype="uint16") /* ty=Tensor[(3, 2, 10), uint16] */;
  %116 = dyn.reshape(%113, %114, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %117 = cast(%var_3400, dtype="float32") /* ty=Tensor[(525), float32] */;
  %118 = reshape(%117, newshape=[15, 7, 5]) /* ty=Tensor[(15, 7, 5), float32] */;
  %119 = cast(%112, dtype="float64") /* ty=Tensor[(3, 2, 10), float64] */;
  %120 = multiply(%115, %116) /* ty=Tensor[(3, 2, 10), uint16] */;
  %121 = @func_698(%118) /* ty=Tensor[(15, 7, 5), bool] */;
  %122 = sigmoid(%119) /* ty=Tensor[(3, 2, 10), float64] */;
  (%120, %121, %var_3400, %122)
}

def @func_5892() -> Tensor[(3, 2, 10), float32] {
  %123 = @func_4234() /* ty=(Tensor[(3, 2, 10), float32],) */;
  %123.0
}

def @func_6195(%var_6193: Tensor[(3, 2, 10), float32], %var_6194: Tensor[(4, 180), int64]) -> (Tensor[(3, 2, 10), float32], Tensor[(4, 180), int64], Tensor[(525), float32], Tensor[(4, 15, 12), float32]) {
  @func_6191(%var_6193, %var_6194) /* ty=(Tensor[(3, 2, 10), float32], Tensor[(4, 180), int64], Tensor[(525), float32], Tensor[(4, 15, 12), float32]) */
}

def @func_6096(%var_6094: Tensor[(27), float64], %var_6095: Tensor[(720), int64]) -> (Tensor[(525), float32], Tensor[(27), float64], Tensor[(720), int64], Tensor[(3, 2, 10), float64], Tensor[(525), bool], Tensor[(3, 2, 10), float64]) {
  @func_6092(%var_6094, %var_6095) /* ty=(Tensor[(525), float32], Tensor[(27), float64], Tensor[(720), int64], Tensor[(3, 2, 10), float64], Tensor[(525), bool], Tensor[(3, 2, 10), float64]) */
}

def @func_4558() -> Tensor[(7, 13, 9), float32] {
  %125 = fn () -> Tensor[(7, 13, 9), float32] {
    %124 = @func_3712() /* ty=(Tensor[(7, 13, 9), float32],) */;
    %124.0
  };
  %125() /* ty=Tensor[(7, 13, 9), float32] */
}

def @func_6051(%var_6049: Tensor[(27), float64], %var_6050: Tensor[(720), int64]) -> (Tensor[(525), float32], Tensor[(3, 2, 10), float64], Tensor[(7, 13, 9), int64], Tensor[(9, 1, 3), float64], Tensor[(27), float32], Tensor[(4, 15, 12), bool], Tensor[(720), int64]) {
  @func_6047(%var_6049, %var_6050) /* ty=(Tensor[(525), float32], Tensor[(3, 2, 10), float64], Tensor[(7, 13, 9), int64], Tensor[(9, 1, 3), float64], Tensor[(27), float32], Tensor[(4, 15, 12), bool], Tensor[(720), int64]) */
}

def @func_5463(%var_5461: Tensor[(8, 2, 16), int8]) -> (Tensor[(8, 2, 16), bool],) {
  @func_5460(%var_5461) /* ty=(Tensor[(8, 2, 16), bool],) */
}

def @func_5003() -> Tensor[(525), float32] {
  %127 = fn () -> Tensor[(525), float32] {
    %126 = @func_4072() /* ty=(Tensor[(525), float32], Tensor[(200), uint16], Tensor[(525), float64]) */;
    %126.0
  };
  %127() /* ty=Tensor[(525), float32] */
}

def @func_2026(%var_1990: Tensor[(2, 2, 11), float64], %var_1999: Tensor[(24, 48), float64], %var_2011: Tensor[(8, 2), float32]) -> (Tensor[(12, 6, 16), float64], Tensor[(24, 48), float64], Tensor[(3, 10, 4), int16], int16, Tensor[(8, 2), float32], Tensor[(2, 2, 11), bool]) {
  %128 = cast(%var_1999, dtype="float64") /* ty=Tensor[(24, 48), float64] */;
  %129 = reshape(%128, newshape=[12, 6, 16]) /* ty=Tensor[(12, 6, 16), float64] */;
  %130 = @func_394(%129) /* ty=(Tensor[(12, 6, 16), float64], Tensor[(12, 6, 16), float64]) */;
  %131 = cast(meta[relay.Constant][12] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %132 = cast(%var_1999, dtype="float64") /* ty=Tensor[(24, 48), float64] */;
  %133 = cast(%var_2011, dtype="float32") /* ty=Tensor[(8, 2), float32] */;
  %134 = reshape(%131, newshape=[]) /* ty=int16 */;
  %135 = reshape(%132, newshape=[1152]) /* ty=Tensor[(1152), float64] */;
  %136 = reshape(%133, newshape=[4, 4]) /* ty=Tensor[(4, 4), float32] */;
  %137 = @func_1516(%134, %135, %136) /* ty=(Tensor[(3, 10, 4), int16], Tensor[(12, 6, 16), float64], Tensor[(1152), float64], Tensor[(2, 8, 1), float32], Tensor[(4, 4), float32], Tensor[(2, 8, 1), float32], Tensor[(12, 6, 16), float64]) */;
  %138 = cast(%var_1990, dtype="float64") /* ty=Tensor[(2, 2, 11), float64] */;
  %139 = rsqrt(%138) /* ty=Tensor[(2, 2, 11), float64] */;
  %140 = cast(meta[relay.Constant][13] /* ty=Tensor[(2, 2, 11), float64] */, dtype="bool") /* ty=Tensor[(2, 2, 11), bool] */;
  %141 = shape_of(%139, dtype="int32") /* ty=Tensor[(3), int32] */;
  %142 = cast(%139, dtype="bool") /* ty=Tensor[(2, 2, 11), bool] */;
  %143 = dyn.reshape(%140, %141, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %144 = %130.0;
  %145 = %137.0;
  %146 = logical_and(%142, %143) /* ty=Tensor[(2, 2, 11), bool] */;
  (%144, %var_1999, %145, meta[relay.Constant][12] /* ty=int16 */, %var_2011, %146)
}

def @func_4993() -> (Tensor[(525), float32],) {
  %149 = fn () -> (Tensor[(525), float32],) {
    %147 = @func_4707() /* ty=(Tensor[(525), float32],) */;
    %148 = %147.0;
    (%148,)
  };
  %149() /* ty=(Tensor[(525), float32],) */
}

def @func_6047(%var_6038: Tensor[(27), float64], %var_6045: Tensor[(720), int64]) -> (Tensor[(525), float32], Tensor[(3, 2, 10), float64], Tensor[(7, 13, 9), int64], Tensor[(9, 1, 3), float64], Tensor[(27), float32], Tensor[(4, 15, 12), bool], Tensor[(720), int64]) {
  %150 = @func_4707() /* ty=(Tensor[(525), float32],) */;
  %151 = @func_3544() /* ty=(Tensor[(3, 2, 10), float64],) */;
  %152 = @func_5401() /* ty=(Tensor[(7, 13, 9), float32],) */;
  %153 = %152.0;
  %154 = cast(%153, dtype="float32") /* ty=Tensor[(7, 13, 9), float32] */;
  %155 = atanh(%154) /* ty=Tensor[(7, 13, 9), float32] */;
  %156 = cast(%155, dtype="int64") /* ty=Tensor[(7, 13, 9), int64] */;
  %157 = shape_of(%153, dtype="int32") /* ty=Tensor[(3), int32] */;
  %158 = cast(%153, dtype="int64") /* ty=Tensor[(7, 13, 9), int64] */;
  %159 = dyn.reshape(%156, %157, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %160 = cast(%var_6038, dtype="float64") /* ty=Tensor[(27), float64] */;
  %161 = reshape(%160, newshape=[9, 1, 3]) /* ty=Tensor[(9, 1, 3), float64] */;
  %162 = @func_912(%161) /* ty=(Tensor[(9, 1, 3), float64],) */;
  %163 = cast(%var_6038, dtype="float32") /* ty=Tensor[(27), float32] */;
  %164 = cast(%var_6045, dtype="int64") /* ty=Tensor[(720), int64] */;
  %165 = reshape(%164, newshape=[720]) /* ty=Tensor[(720), int64] */;
  %166 = @func_4482(%165) /* ty=(Tensor[(7, 13, 9), float32], Tensor[(4, 15, 12), bool], Tensor[(720), int64]) */;
  %167 = %150.0;
  %168 = %151.0;
  %169 = minimum(%158, %159) /* ty=Tensor[(7, 13, 9), int64] */;
  %170 = %162.0;
  %171 = asinh(%163) /* ty=Tensor[(27), float32] */;
  %172 = %166.1;
  (%167, %168, %169, %170, %171, %172, %var_6045)
}

def @func_4553(%var_4551: Tensor[(14, 3, 15), float32], %var_4552: Tensor[(1, 525), float32]) -> (Tensor[(14, 3, 15), int8], Tensor[(3, 2, 10), uint16], Tensor[(1, 525), float32]) {
  @func_4549(%var_4551, %var_4552) /* ty=(Tensor[(14, 3, 15), int8], Tensor[(3, 2, 10), uint16], Tensor[(1, 525), float32]) */
}

def @func_5495(%var_5493: Tensor[(14, 6, 9), int8], %var_5494: Tensor[(14, 6, 9), int8]) -> Tensor[(14, 6, 9), int8] {
  @func_5491(%var_5493, %var_5494) /* ty=Tensor[(14, 6, 9), int8] */
}

def @func_237(%var_235: Tensor[(10, 5, 4), uint16]) -> Tensor[(10, 5, 4), float64] {
  @func_234(%var_235) /* ty=Tensor[(10, 5, 4), float64] */
}

def @func_1204(%var_1194: Tensor[(16, 4, 14), float64]) -> (Tensor[(16, 4, 14), float64],) {
  %173 = cast(%var_1194, dtype="float64") /* ty=Tensor[(16, 4, 14), float64] */;
  %174 = sinh(%173) /* ty=Tensor[(16, 4, 14), float64] */;
  %175 = cast(%174, dtype="float64") /* ty=Tensor[(16, 4, 14), float64] */;
  %176 = sin(%175) /* ty=Tensor[(16, 4, 14), float64] */;
  (%176,)
}

def @func_4597(%var_4595: Tensor[(525), float32], %var_4596: Tensor[(1280), uint16]) -> (Tensor[(525), bool], Tensor[(16, 8, 10), uint16], Tensor[(1280), uint16]) {
  %189 = fn (%var_4567: Tensor[(525), float32], %var_4583: Tensor[(1280), uint16]) -> (Tensor[(525), bool], Tensor[(16, 8, 10), uint16], Tensor[(1280), uint16]) {
    %177 = @func_3786() /* ty=Tensor[(525), float32] */;
    %178 = cast(%var_4567, dtype="bool") /* ty=Tensor[(525), bool] */;
    %179 = shape_of(%177, dtype="int32") /* ty=Tensor[(1), int32] */;
    %180 = cast(%177, dtype="bool") /* ty=Tensor[(525), bool] */;
    %181 = dyn.reshape(%178, %179, newshape=[]) /* ty=Tensor[(?), bool] */;
    %182 = cast(%var_4583, dtype="uint16") /* ty=Tensor[(1280), uint16] */;
    %183 = cast(%var_4583, dtype="uint16") /* ty=Tensor[(1280), uint16] */;
    %184 = reshape(%182, newshape=[16, 8, 10]) /* ty=Tensor[(16, 8, 10), uint16] */;
    %185 = reshape(%183, newshape=[16, 8, 10]) /* ty=Tensor[(16, 8, 10), uint16] */;
    %186 = @func_2356(%184, %185) /* ty=(Tensor[(16, 8, 10), uint16],) */;
    %187 = equal(%180, %181) /* ty=Tensor[(525), bool] */;
    %188 = %186.0;
    (%187, %188, %var_4583)
  };
  %189(%var_4595, %var_4596) /* ty=(Tensor[(525), bool], Tensor[(16, 8, 10), uint16], Tensor[(1280), uint16]) */
}

def @func_4828(%var_4826: Tensor[(4, 9, 3), float32]) -> (Tensor[(7, 13, 9), float32], float32, Tensor[(108), float32], Tensor[(4, 9, 3), float32]) {
  @func_4825(%var_4826) /* ty=(Tensor[(7, 13, 9), float32], float32, Tensor[(108), float32], Tensor[(4, 9, 3), float32]) */
}

def @func_3827() -> Tensor[(14, 1, 15), bool] {
  %192 = fn () -> Tensor[(14, 1, 15), bool] {
    %190 = cast(1.53753f /* ty=float32 */, dtype="bool") /* ty=bool */;
    %191 = cast(meta[relay.Constant][14] /* ty=Tensor[(14, 1, 15), float32] */, dtype="bool") /* ty=Tensor[(14, 1, 15), bool] */;
    greater(%190, %191) /* ty=Tensor[(14, 1, 15), bool] */
  };
  %192() /* ty=Tensor[(14, 1, 15), bool] */
}

def @func_5126(%var_5124: Tensor[(288, 4), float64], %var_5125: Tensor[(16), float32]) -> (Tensor[(15, 12, 1), float32], Tensor[(7, 13, 9), float32], Tensor[(2, 2, 11), bool], Tensor[(44), float64], Tensor[(288, 4), float64], Tensor[(16), float32]) {
  %205 = fn (%var_5119: Tensor[(288, 4), float64], %var_5120: Tensor[(16), float32]) -> (Tensor[(15, 12, 1), float32], Tensor[(7, 13, 9), float32], Tensor[(2, 2, 11), bool], Tensor[(44), float64], Tensor[(288, 4), float64], Tensor[(16), float32]) {
    %193 = cast(meta[relay.Constant][15] /* ty=Tensor[(15, 12, 1), float32] */, dtype="float32") /* ty=Tensor[(15, 12, 1), float32] */;
    %194 = @func_3697() /* ty=(Tensor[(7, 13, 9), float32],) */;
    %195 = cast(meta[relay.Constant][16] /* ty=Tensor[(44), float64] */, dtype="float64") /* ty=Tensor[(44), float64] */;
    %196 = cast(%var_5119, dtype="float64") /* ty=Tensor[(288, 4), float64] */;
    %197 = cast(%var_5120, dtype="float32") /* ty=Tensor[(16), float32] */;
    %198 = reshape(%195, newshape=[2, 2, 11]) /* ty=Tensor[(2, 2, 11), float64] */;
    %199 = reshape(%196, newshape=[24, 48]) /* ty=Tensor[(24, 48), float64] */;
    %200 = reshape(%197, newshape=[8, 2]) /* ty=Tensor[(8, 2), float32] */;
    %201 = @func_2026(%198, %199, %200) /* ty=(Tensor[(12, 6, 16), float64], Tensor[(24, 48), float64], Tensor[(3, 10, 4), int16], int16, Tensor[(8, 2), float32], Tensor[(2, 2, 11), bool]) */;
    %202 = acosh(%193) /* ty=Tensor[(15, 12, 1), float32] */;
    %203 = %194.0;
    %204 = %201.5;
    (%202, %203, %204, meta[relay.Constant][16] /* ty=Tensor[(44), float64] */, %var_5119, %var_5120)
  };
  %205(%var_5124, %var_5125) /* ty=(Tensor[(15, 12, 1), float32], Tensor[(7, 13, 9), float32], Tensor[(2, 2, 11), bool], Tensor[(44), float64], Tensor[(288, 4), float64], Tensor[(16), float32]) */
}

def @func_5460(%var_5455: Tensor[(8, 2, 16), int8]) -> (Tensor[(8, 2, 16), bool],) {
  %206 = cast(meta[relay.Constant][17] /* ty=Tensor[(8, 2, 16), int8] */, dtype="bool") /* ty=Tensor[(8, 2, 16), bool] */;
  %207 = shape_of(%var_5455, dtype="int32") /* ty=Tensor[(3), int32] */;
  %208 = cast(%var_5455, dtype="bool") /* ty=Tensor[(8, 2, 16), bool] */;
  %209 = dyn.reshape(%206, %207, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %210 = equal(%208, %209) /* ty=Tensor[(8, 2, 16), bool] */;
  (%210,)
}

def @func_1207(%var_1205: Tensor[(16, 4, 14), float64]) -> (Tensor[(16, 4, 14), float64],) {
  @func_1204(%var_1205) /* ty=(Tensor[(16, 4, 14), float64],) */
}

def @func_5040() -> (Tensor[(7, 13, 9), int16], Tensor[(16, 8, 10), uint16], Tensor[(1280), uint16]) {
  %224 = fn () -> (Tensor[(7, 13, 9), int16], Tensor[(16, 8, 10), uint16], Tensor[(1280), uint16]) {
    %211 = @func_3712() /* ty=(Tensor[(7, 13, 9), float32],) */;
    %212 = %211.0;
    %213 = cast(meta[relay.Constant][18] /* ty=Tensor[(7, 13, 9), float32] */, dtype="int16") /* ty=Tensor[(7, 13, 9), int16] */;
    %214 = shape_of(%212, dtype="int32") /* ty=Tensor[(3), int32] */;
    %215 = cast(%212, dtype="int16") /* ty=Tensor[(7, 13, 9), int16] */;
    %216 = dyn.reshape(%213, %214, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %217 = cast(meta[relay.Constant][19] /* ty=Tensor[(1280), uint16] */, dtype="uint16") /* ty=Tensor[(1280), uint16] */;
    %218 = cast(meta[relay.Constant][19] /* ty=Tensor[(1280), uint16] */, dtype="uint16") /* ty=Tensor[(1280), uint16] */;
    %219 = reshape(%217, newshape=[16, 8, 10]) /* ty=Tensor[(16, 8, 10), uint16] */;
    %220 = reshape(%218, newshape=[16, 8, 10]) /* ty=Tensor[(16, 8, 10), uint16] */;
    %221 = @func_2356(%219, %220) /* ty=(Tensor[(16, 8, 10), uint16],) */;
    %222 = logical_xor(%215, %216) /* ty=Tensor[(7, 13, 9), int16] */;
    %223 = %221.0;
    (%222, %223, meta[relay.Constant][19] /* ty=Tensor[(1280), uint16] */)
  };
  %224() /* ty=(Tensor[(7, 13, 9), int16], Tensor[(16, 8, 10), uint16], Tensor[(1280), uint16]) */
}

def @func_4072() -> (Tensor[(525), float32], Tensor[(200), uint16], Tensor[(525), float64]) {
  %225 = @func_3750() /* ty=(Tensor[(525), float32],) */;
  %226 = @func_3378() /* ty=(Tensor[(3, 2, 10), int16], Tensor[(10, 5, 4), float64], Tensor[(200), uint16]) */;
  %227 = @func_3750() /* ty=(Tensor[(525), float32],) */;
  %228 = %227.0;
  %229 = cast(%228, dtype="float64") /* ty=Tensor[(525), float64] */;
  %230 = %225.0;
  %231 = %226.2;
  %232 = log(%229) /* ty=Tensor[(525), float64] */;
  (%230, %231, %232)
}

def @func_2977(%var_2975: float32, %var_2976: Tensor[(4, 9, 3), float32]) -> (Tensor[(4, 9, 3), float32],) {
  %236 = fn (%var_2951: float32, %var_2952: Tensor[(4, 9, 3), float32]) -> (Tensor[(4, 9, 3), float32],) {
    %233 = cast(%var_2951, dtype="float32") /* ty=float32 */;
    %234 = cast(%var_2952, dtype="float32") /* ty=Tensor[(4, 9, 3), float32] */;
    %235 = floor_mod(%233, %234) /* ty=Tensor[(4, 9, 3), float32] */;
    (%235,)
  };
  %236(%var_2975, %var_2976) /* ty=(Tensor[(4, 9, 3), float32],) */
}

def @func_550(%var_537: Tensor[(9, 5, 10), float64]) -> Tensor[(9, 5, 10), float64] {
  %237 = cast(%var_537, dtype="float64") /* ty=Tensor[(9, 5, 10), float64] */;
  log2(%237) /* ty=Tensor[(9, 5, 10), float64] */
}

def @func_5549() -> (Tensor[(7, 13, 9), float32],) {
  @func_5547() /* ty=(Tensor[(7, 13, 9), float32],) */
}

def @func_5752() -> (Tensor[(525), float64], Tensor[(200), uint16]) {
  %243 = fn () -> (Tensor[(525), float64], Tensor[(200), uint16]) {
    %238 = @func_5002() /* ty=Tensor[(525), float32] */;
    %239 = cast(%238, dtype="float64") /* ty=Tensor[(525), float64] */;
    %240 = @func_5250() /* ty=(Tensor[(200), uint16],) */;
    %241 = acosh(%239) /* ty=Tensor[(525), float64] */;
    %242 = %240.0;
    (%241, %242)
  };
  %243() /* ty=(Tensor[(525), float64], Tensor[(200), uint16]) */
}

def @func_4291(%var_4289: Tensor[(525), float32], %var_4290: Tensor[(392, 2), uint8]) -> (Tensor[(10, 5, 4), float64], Tensor[(1152), float64], int16, Tensor[(16), float32], Tensor[(15, 7, 5), bool], Tensor[(525), float32], Tensor[(1, 16), float32], Tensor[(392, 2), uint8], Tensor[(7, 13, 9), float32]) {
  %263 = fn (%var_4273: Tensor[(525), float32], %var_4276: Tensor[(392, 2), uint8]) -> (Tensor[(10, 5, 4), float64], Tensor[(1152), float64], int16, Tensor[(16), float32], Tensor[(15, 7, 5), bool], Tensor[(525), float32], Tensor[(1, 16), float32], Tensor[(392, 2), uint8], Tensor[(7, 13, 9), float32]) {
    %244 = @func_3378() /* ty=(Tensor[(3, 2, 10), int16], Tensor[(10, 5, 4), float64], Tensor[(200), uint16]) */;
    %245 = cast(meta[relay.Constant][20] /* ty=int16 */, dtype="int16") /* ty=int16 */;
    %246 = cast(meta[relay.Constant][21] /* ty=Tensor[(16), float32] */, dtype="float32") /* ty=Tensor[(16), float32] */;
    %247 = reshape(%245, newshape=[]) /* ty=int16 */;
    %248 = reshape(%246, newshape=[4, 4]) /* ty=Tensor[(4, 4), float32] */;
    %249 = @func_3583(%247, %248) /* ty=(Tensor[(3, 2, 10), float64], Tensor[(3, 10, 4), int16], int16, Tensor[(1152), float64], Tensor[(4, 4), float32]) */;
    %250 = cast(%var_4273, dtype="float32") /* ty=Tensor[(525), float32] */;
    %251 = reshape(%250, newshape=[15, 7, 5]) /* ty=Tensor[(15, 7, 5), float32] */;
    %252 = cast(meta[relay.Constant][20] /* ty=int16 */, dtype="uint8") /* ty=uint8 */;
    %253 = cast(%var_4276, dtype="uint8") /* ty=Tensor[(392, 2), uint8] */;
    %254 = reshape(%252, newshape=[]) /* ty=uint8 */;
    %255 = reshape(%253, newshape=[784]) /* ty=Tensor[(784), uint8] */;
    %256 = @func_4194(%254, %255) /* ty=(Tensor[(525), int64], Tensor[(525), float32], Tensor[(4, 14, 14), uint8], uint8, Tensor[(784), uint8], Tensor[(4, 4), float32], Tensor[(1, 16), float32], Tensor[(3, 2, 10), int16]) */;
    %257 = @func_3697() /* ty=(Tensor[(7, 13, 9), float32],) */;
    %258 = %244.1;
    %259 = %249.3;
    %260 = @func_698(%251) /* ty=Tensor[(15, 7, 5), bool] */;
    %261 = %256.6;
    %262 = %257.0;
    (%258, %259, meta[relay.Constant][20] /* ty=int16 */, meta[relay.Constant][21] /* ty=Tensor[(16), float32] */, %260, %var_4273, %261, %var_4276, %262)
  };
  %263(%var_4289, %var_4290) /* ty=(Tensor[(10, 5, 4), float64], Tensor[(1152), float64], int16, Tensor[(16), float32], Tensor[(15, 7, 5), bool], Tensor[(525), float32], Tensor[(1, 16), float32], Tensor[(392, 2), uint8], Tensor[(7, 13, 9), float32]) */
}

def @func_4668() -> (Tensor[(525), float64],) {
  %266 = fn () -> (Tensor[(525), float64],) {
    %264 = @func_4072() /* ty=(Tensor[(525), float32], Tensor[(200), uint16], Tensor[(525), float64]) */;
    %265 = %264.2;
    (%265,)
  };
  %266() /* ty=(Tensor[(525), float64],) */
}

def @func_1892(%var_1885: uint16, %var_1886: Tensor[(1, 13), uint16], %var_1887: Tensor[(896), float64], %var_1888: Tensor[(27), float64], %var_1889: Tensor[(720), int64], %var_1890: Tensor[(16), float32], %var_1891: Tensor[(200), uint16]) -> (Tensor[(1, 13), uint16], Tensor[(16, 4, 14), float64], Tensor[(896), float64], Tensor[(10, 5, 4), float64], Tensor[(4, 15, 12), bool], Tensor[(720), int64], Tensor[(2, 8, 1), float32], Tensor[(16), float32], Tensor[(200), bool], Tensor[(9, ?, 3), uint16]) {
  @func_1883(%var_1885, %var_1886, %var_1887, %var_1888, %var_1889, %var_1890, %var_1891) /* ty=(Tensor[(1, 13), uint16], Tensor[(16, 4, 14), float64], Tensor[(896), float64], Tensor[(10, 5, 4), float64], Tensor[(4, 15, 12), bool], Tensor[(720), int64], Tensor[(2, 8, 1), float32], Tensor[(16), float32], Tensor[(200), bool], Tensor[(9, ?, 3), uint16]) */
}

def @func_2292(%var_2283: Tensor[(2, 7, 9), float64]) -> (Tensor[(2, 7, 9), float64],) {
  %267 = cast(%var_2283, dtype="float64") /* ty=Tensor[(2, 7, 9), float64] */;
  %268 = tan(%267) /* ty=Tensor[(2, 7, 9), float64] */;
  (%268,)
}

def @func_5838() -> Tensor[(3, 2, 10), uint8] {
  %275 = fn () -> Tensor[(3, 2, 10), uint8] {
    %269 = @func_5054() /* ty=(Tensor[(3, 2, 10), float32],) */;
    %270 = %269.0;
    %271 = cast(meta[relay.Constant][22] /* ty=Tensor[(3, 2, 10), float32] */, dtype="uint8") /* ty=Tensor[(3, 2, 10), uint8] */;
    %272 = shape_of(%270, dtype="int32") /* ty=Tensor[(3), int32] */;
    %273 = cast(%270, dtype="uint8") /* ty=Tensor[(3, 2, 10), uint8] */;
    %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    subtract(%273, %274) /* ty=Tensor[(3, 2, 10), uint8] */
  };
  %275() /* ty=Tensor[(3, 2, 10), uint8] */
}

def @func_3380() -> (Tensor[(3, 2, 10), int16], Tensor[(10, 5, 4), float64], Tensor[(200), uint16]) {
  @func_3378() /* ty=(Tensor[(3, 2, 10), int16], Tensor[(10, 5, 4), float64], Tensor[(200), uint16]) */
}

def @func_3052(%var_3050: Tensor[(3, 4, 7), float32]) -> (Tensor[(3, 4, 7), float32],) {
  @func_3049(%var_3050) /* ty=(Tensor[(3, 4, 7), float32],) */
}

def @func_912(%var_897: Tensor[(9, 1, 3), float64]) -> (Tensor[(9, 1, 3), float64],) {
  %276 = cast(%var_897, dtype="float64") /* ty=Tensor[(9, 1, 3), float64] */;
  %277 = asin(%276) /* ty=Tensor[(9, 1, 3), float64] */;
  (%277,)
}

def @func_5252() -> (Tensor[(200), uint16],) {
  @func_5250() /* ty=(Tensor[(200), uint16],) */
}

def @func_3049(%var_3037: Tensor[(3, 4, 7), float32]) -> (Tensor[(3, 4, 7), float32],) {
  %278 = cast(%var_3037, dtype="float32") /* ty=Tensor[(3, 4, 7), float32] */;
  %279 = log(%278) /* ty=Tensor[(3, 4, 7), float32] */;
  %280 = cast(%279, dtype="float32") /* ty=Tensor[(3, 4, 7), float32] */;
  %281 = atanh(%280) /* ty=Tensor[(3, 4, 7), float32] */;
  (%281,)
}

def @func_4011(%var_4010: Tensor[(2002), int64]) -> (Tensor[(7, 13, 9), float32], Tensor[(14, 11, 13), bool], Tensor[(2002), int64]) {
  %289 = fn (%var_4004: Tensor[(2002), int64]) -> (Tensor[(7, 13, 9), float32], Tensor[(14, 11, 13), bool], Tensor[(2002), int64]) {
    %282 = @func_3697() /* ty=(Tensor[(7, 13, 9), float32],) */;
    %283 = cast(%var_4004, dtype="int64") /* ty=Tensor[(2002), int64] */;
    %284 = cast(%var_4004, dtype="int64") /* ty=Tensor[(2002), int64] */;
    %285 = reshape(%283, newshape=[14, 11, 13]) /* ty=Tensor[(14, 11, 13), int64] */;
    %286 = reshape(%284, newshape=[14, 11, 13]) /* ty=Tensor[(14, 11, 13), int64] */;
    %287 = %282.0;
    %288 = @func_3312(%285, %286) /* ty=Tensor[(14, 11, 13), bool] */;
    (%287, %288, %var_4004)
  };
  %289(%var_4010) /* ty=(Tensor[(7, 13, 9), float32], Tensor[(14, 11, 13), bool], Tensor[(2002), int64]) */
}

def @func_2549(%var_2544: Tensor[(3, 6, 11), float32], %var_2545: Tensor[(896), float64], %var_2546: Tensor[(16), float32], %var_2547: Tensor[(200), uint16], %var_2548: Tensor[(1280), uint16]) -> (Tensor[(3, 6, 11), bool], Tensor[(12, 6, 16), float64], Tensor[(1152), float64], Tensor[(4, 15, 12), bool], Tensor[(720), int64], Tensor[(10, 5, 4), float64], uint16, Tensor[(13), uint16], Tensor[(896), float64], Tensor[(27, 1), float64], Tensor[(16), float32], Tensor[(200), uint16], Tensor[(2, 2, 11), bool], Tensor[(44), float64], Tensor[(16, 8, 10), uint16], Tensor[(1280), uint16]) {
  %333 = fn (%var_2484: Tensor[(3, 6, 11), float32], %var_2527: Tensor[(896), float64], %var_2529: Tensor[(16), float32], %var_2530: Tensor[(200), uint16], %var_2538: Tensor[(1280), uint16]) -> (Tensor[(3, 6, 11), bool], Tensor[(12, 6, 16), float64], Tensor[(1152), float64], Tensor[(4, 15, 12), bool], Tensor[(720), int64], Tensor[(10, 5, 4), float64], uint16, Tensor[(13), uint16], Tensor[(896), float64], Tensor[(27, 1), float64], Tensor[(16), float32], Tensor[(200), uint16], Tensor[(2, 2, 11), bool], Tensor[(44), float64], Tensor[(16, 8, 10), uint16], Tensor[(1280), uint16]) {
    %290 = cast(meta[relay.Constant][23] /* ty=Tensor[(3, 6, 11), float32] */, dtype="bool") /* ty=Tensor[(3, 6, 11), bool] */;
    %291 = shape_of(%var_2484, dtype="int32") /* ty=Tensor[(3), int32] */;
    %292 = cast(%var_2484, dtype="bool") /* ty=Tensor[(3, 6, 11), bool] */;
    %293 = dyn.reshape(%290, %291, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %294 = cast(meta[relay.Constant][24] /* ty=Tensor[(1152), float64] */, dtype="float64") /* ty=Tensor[(1152), float64] */;
    %295 = reshape(%294, newshape=[12, 6, 16]) /* ty=Tensor[(12, 6, 16), float64] */;
    %296 = @func_394(%295) /* ty=(Tensor[(12, 6, 16), float64], Tensor[(12, 6, 16), float64]) */;
    %297 = cast(meta[relay.Constant][25] /* ty=Tensor[(720), int64] */, dtype="int64") /* ty=Tensor[(720), int64] */;
    %298 = reshape(%297, newshape=[4, 15, 12]) /* ty=Tensor[(4, 15, 12), int64] */;
    %299 = @func_1412(%298) /* ty=(Tensor[(4, 15, 12), bool],) */;
    %300 = cast(meta[relay.Constant][26] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %301 = cast(meta[relay.Constant][27] /* ty=Tensor[(13), uint16] */, dtype="uint16") /* ty=Tensor[(13), uint16] */;
    %302 = cast(%var_2527, dtype="float64") /* ty=Tensor[(896), float64] */;
    %303 = cast(meta[relay.Constant][28] /* ty=Tensor[(27, 1), float64] */, dtype="float64") /* ty=Tensor[(27, 1), float64] */;
    %304 = %299.0;
    %305 = cast(%304, dtype="int64") /* ty=Tensor[(4, 15, 12), int64] */;
    %306 = cast(%var_2529, dtype="float32") /* ty=Tensor[(16), float32] */;
    %307 = cast(%var_2530, dtype="uint16") /* ty=Tensor[(200), uint16] */;
    %308 = reshape(%300, newshape=[]) /* ty=uint16 */;
    %309 = reshape(%301, newshape=[1, 13]) /* ty=Tensor[(1, 13), uint16] */;
    %310 = reshape(%302, newshape=[896]) /* ty=Tensor[(896), float64] */;
    %311 = reshape(%303, newshape=[27]) /* ty=Tensor[(27), float64] */;
    %312 = reshape(%305, newshape=[720]) /* ty=Tensor[(720), int64] */;
    %313 = reshape(%306, newshape=[16]) /* ty=Tensor[(16), float32] */;
    %314 = reshape(%307, newshape=[200]) /* ty=Tensor[(200), uint16] */;
    %315 = @func_1883(%308, %309, %310, %311, %312, %313, %314) /* ty=(Tensor[(1, 13), uint16], Tensor[(16, 4, 14), float64], Tensor[(896), float64], Tensor[(10, 5, 4), float64], Tensor[(4, 15, 12), bool], Tensor[(720), int64], Tensor[(2, 8, 1), float32], Tensor[(16), float32], Tensor[(200), bool], Tensor[(9, ?, 3), uint16]) */;
    %316 = cast(meta[relay.Constant][29] /* ty=Tensor[(44), float64] */, dtype="float64") /* ty=Tensor[(44), float64] */;
    %317 = cast(meta[relay.Constant][24] /* ty=Tensor[(1152), float64] */, dtype="float64") /* ty=Tensor[(1152), float64] */;
    %318 = cast(%var_2529, dtype="float32") /* ty=Tensor[(16), float32] */;
    %319 = reshape(%316, newshape=[2, 2, 11]) /* ty=Tensor[(2, 2, 11), float64] */;
    %320 = reshape(%317, newshape=[24, 48]) /* ty=Tensor[(24, 48), float64] */;
    %321 = reshape(%318, newshape=[8, 2]) /* ty=Tensor[(8, 2), float32] */;
    %322 = @func_2026(%319, %320, %321) /* ty=(Tensor[(12, 6, 16), float64], Tensor[(24, 48), float64], Tensor[(3, 10, 4), int16], int16, Tensor[(8, 2), float32], Tensor[(2, 2, 11), bool]) */;
    %323 = cast(%var_2538, dtype="uint16") /* ty=Tensor[(1280), uint16] */;
    %324 = cast(%var_2538, dtype="uint16") /* ty=Tensor[(1280), uint16] */;
    %325 = reshape(%323, newshape=[16, 8, 10]) /* ty=Tensor[(16, 8, 10), uint16] */;
    %326 = reshape(%324, newshape=[16, 8, 10]) /* ty=Tensor[(16, 8, 10), uint16] */;
    %327 = @func_2356(%325, %326) /* ty=(Tensor[(16, 8, 10), uint16],) */;
    %328 = not_equal(%292, %293) /* ty=Tensor[(3, 6, 11), bool] */;
    %329 = %296.1;
    %330 = %315.3;
    %331 = %322.5;
    %332 = %327.0;
    (%328, %329, meta[relay.Constant][24] /* ty=Tensor[(1152), float64] */, %304, meta[relay.Constant][25] /* ty=Tensor[(720), int64] */, %330, meta[relay.Constant][26] /* ty=uint16 */, meta[relay.Constant][27] /* ty=Tensor[(13), uint16] */, %var_2527, meta[relay.Constant][28] /* ty=Tensor[(27, 1), float64] */, %var_2529, %var_2530, %331, meta[relay.Constant][29] /* ty=Tensor[(44), float64] */, %332, %var_2538)
  };
  %333(%var_2544, %var_2545, %var_2546, %var_2547, %var_2548) /* ty=(Tensor[(3, 6, 11), bool], Tensor[(12, 6, 16), float64], Tensor[(1152), float64], Tensor[(4, 15, 12), bool], Tensor[(720), int64], Tensor[(10, 5, 4), float64], uint16, Tensor[(13), uint16], Tensor[(896), float64], Tensor[(27, 1), float64], Tensor[(16), float32], Tensor[(200), uint16], Tensor[(2, 2, 11), bool], Tensor[(44), float64], Tensor[(16, 8, 10), uint16], Tensor[(1280), uint16]) */
}

def @func_4825(%var_4811: Tensor[(4, 9, 3), float32]) -> (Tensor[(7, 13, 9), float32], float32, Tensor[(108), float32], Tensor[(4, 9, 3), float32]) {
  %334 = @func_4557() /* ty=Tensor[(7, 13, 9), float32] */;
  %335 = cast(%334, dtype="float64") /* ty=Tensor[(7, 13, 9), float64] */;
  %336 = cos(%335) /* ty=Tensor[(7, 13, 9), float64] */;
  %337 = cast(%336, dtype="float32") /* ty=Tensor[(7, 13, 9), float32] */;
  %338 = shape_of(%334, dtype="int32") /* ty=Tensor[(3), int32] */;
  %339 = cast(%334, dtype="float32") /* ty=Tensor[(7, 13, 9), float32] */;
  %340 = dyn.reshape(%337, %338, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %341 = cast(-5.24762f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %342 = cast(meta[relay.Constant][30] /* ty=Tensor[(108), float32] */, dtype="float32") /* ty=Tensor[(108), float32] */;
  %343 = reshape(%341, newshape=[]) /* ty=float32 */;
  %344 = reshape(%342, newshape=[4, 9, 3]) /* ty=Tensor[(4, 9, 3), float32] */;
  %345 = @func_2974(%343, %344) /* ty=(Tensor[(4, 9, 3), float32],) */;
  %346 = %345.0;
  %347 = cast(%var_4811, dtype="float32") /* ty=Tensor[(4, 9, 3), float32] */;
  %348 = shape_of(%346, dtype="int32") /* ty=Tensor[(3), int32] */;
  %349 = cast(%346, dtype="float32") /* ty=Tensor[(4, 9, 3), float32] */;
  %350 = dyn.reshape(%347, %348, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %351 = mod(%339, %340) /* ty=Tensor[(7, 13, 9), float32] */;
  %352 = minimum(%349, %350) /* ty=Tensor[(4, 9, 3), float32] */;
  (%351, -5.24762f /* ty=float32 */, meta[relay.Constant][30] /* ty=Tensor[(108), float32] */, %352)
}

def @func_4373() -> Tensor[(3, 2, 10), float64] {
  %353 = @func_3494() /* ty=(Tensor[(3, 2, 10), int16], Tensor[(10, 5, 4), float32], Tensor[(16, 4, 14), float64], Tensor[(896), float64], Tensor[(3, 2, 10), float64], Tensor[(525), float32]) */;
  %353.4
}

def @func_2360(%var_2358: Tensor[(16, 8, 10), uint16], %var_2359: Tensor[(16, 8, 10), uint16]) -> (Tensor[(16, 8, 10), uint16],) {
  @func_2356(%var_2358, %var_2359) /* ty=(Tensor[(16, 8, 10), uint16],) */
}

def @func_3751() -> (Tensor[(525), float32],) {
  %355 = fn () -> (Tensor[(525), float32],) {
    %354 = @func_3687() /* ty=Tensor[(525), float32] */;
    (%354,)
  };
  %355() /* ty=(Tensor[(525), float32],) */
}

def @func_3248(%var_3246: Tensor[(12, 1, 5), float32], %var_3247: Tensor[(12, 16, 5), float32]) -> (Tensor[(12, 16, 5), uint8],) {
  @func_3244(%var_3246, %var_3247) /* ty=(Tensor[(12, 16, 5), uint8],) */
}

def @func_5055() -> (Tensor[(3, 2, 10), float32],) {
  %358 = fn () -> (Tensor[(3, 2, 10), float32],) {
    %356 = @func_4234() /* ty=(Tensor[(3, 2, 10), float32],) */;
    %357 = %356.0;
    (%357,)
  };
  %358() /* ty=(Tensor[(3, 2, 10), float32],) */
}

def @func_4484(%var_4483: Tensor[(720), int64]) -> (Tensor[(7, 13, 9), float32], Tensor[(4, 15, 12), bool], Tensor[(720), int64]) {
  %365 = fn (%var_4480: Tensor[(720), int64]) -> (Tensor[(7, 13, 9), float32], Tensor[(4, 15, 12), bool], Tensor[(720), int64]) {
    %359 = @func_3712() /* ty=(Tensor[(7, 13, 9), float32],) */;
    %360 = cast(%var_4480, dtype="int64") /* ty=Tensor[(720), int64] */;
    %361 = reshape(%360, newshape=[4, 15, 12]) /* ty=Tensor[(4, 15, 12), int64] */;
    %362 = @func_1412(%361) /* ty=(Tensor[(4, 15, 12), bool],) */;
    %363 = %359.0;
    %364 = %362.0;
    (%363, %364, %var_4480)
  };
  %365(%var_4483) /* ty=(Tensor[(7, 13, 9), float32], Tensor[(4, 15, 12), bool], Tensor[(720), int64]) */
}

def @func_5187(%var_5179: Tensor[(1152), float64], %var_5182: Tensor[(3, 10, 4), int16]) -> (Tensor[(3, 2, 10), int16], Tensor[(44), float64], Tensor[(1152), float64], Tensor[(16, 1), float32], Tensor[(3, 10, 4), float64]) {
  %366 = @func_5054() /* ty=(Tensor[(3, 2, 10), float32],) */;
  %367 = %366.0;
  %368 = cast(meta[relay.Constant][31] /* ty=Tensor[(3, 2, 10), float32] */, dtype="int16") /* ty=Tensor[(3, 2, 10), int16] */;
  %369 = shape_of(%367, dtype="int32") /* ty=Tensor[(3), int32] */;
  %370 = cast(%367, dtype="int16") /* ty=Tensor[(3, 2, 10), int16] */;
  %371 = dyn.reshape(%368, %369, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %372 = cast(meta[relay.Constant][32] /* ty=Tensor[(44), float64] */, dtype="float64") /* ty=Tensor[(44), float64] */;
  %373 = cast(%var_5179, dtype="float64") /* ty=Tensor[(1152), float64] */;
  %374 = cast(meta[relay.Constant][33] /* ty=Tensor[(16, 1), float32] */, dtype="float32") /* ty=Tensor[(16, 1), float32] */;
  %375 = reshape(%372, newshape=[2, 2, 11]) /* ty=Tensor[(2, 2, 11), float64] */;
  %376 = reshape(%373, newshape=[24, 48]) /* ty=Tensor[(24, 48), float64] */;
  %377 = reshape(%374, newshape=[8, 2]) /* ty=Tensor[(8, 2), float32] */;
  %378 = @func_2026(%375, %376, %377) /* ty=(Tensor[(12, 6, 16), float64], Tensor[(24, 48), float64], Tensor[(3, 10, 4), int16], int16, Tensor[(8, 2), float32], Tensor[(2, 2, 11), bool]) */;
  %379 = %378.2;
  %380 = cast(%var_5182, dtype="float64") /* ty=Tensor[(3, 10, 4), float64] */;
  %381 = shape_of(%379, dtype="int32") /* ty=Tensor[(3), int32] */;
  %382 = cast(%379, dtype="float64") /* ty=Tensor[(3, 10, 4), float64] */;
  %383 = dyn.reshape(%380, %381, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %384 = logical_xor(%370, %371) /* ty=Tensor[(3, 2, 10), int16] */;
  %385 = floor_mod(%382, %383) /* ty=Tensor[(3, 10, 4), float64] */;
  (%384, meta[relay.Constant][32] /* ty=Tensor[(44), float64] */, %var_5179, meta[relay.Constant][33] /* ty=Tensor[(16, 1), float32] */, %385)
}

def @func_2597(%var_2566: Tensor[(8, 4, 3), float64]) -> Tensor[(8, 4, 3), float32] {
  %386 = cast(%var_2566, dtype="float64") /* ty=Tensor[(8, 4, 3), float64] */;
  %387 = cos(%386) /* ty=Tensor[(8, 4, 3), float64] */;
  %388 = cast(%387, dtype="float32") /* ty=Tensor[(8, 4, 3), float32] */;
  atanh(%388) /* ty=Tensor[(8, 4, 3), float32] */
}

def @func_3688() -> Tensor[(525), float32] {
  %390 = fn () -> Tensor[(525), float32] {
    %389 = @func_3494() /* ty=(Tensor[(3, 2, 10), int16], Tensor[(10, 5, 4), float32], Tensor[(16, 4, 14), float64], Tensor[(896), float64], Tensor[(3, 2, 10), float64], Tensor[(525), float32]) */;
    %389.5
  };
  %390() /* ty=Tensor[(525), float32] */
}

def @func_2031(%var_2028: Tensor[(2, 2, 11), float64], %var_2029: Tensor[(24, 48), float64], %var_2030: Tensor[(8, 2), float32]) -> (Tensor[(12, 6, 16), float64], Tensor[(24, 48), float64], Tensor[(3, 10, 4), int16], int16, Tensor[(8, 2), float32], Tensor[(2, 2, 11), bool]) {
  @func_2026(%var_2028, %var_2029, %var_2030) /* ty=(Tensor[(12, 6, 16), float64], Tensor[(24, 48), float64], Tensor[(3, 10, 4), int16], int16, Tensor[(8, 2), float32], Tensor[(2, 2, 11), bool]) */
}

def @func_4951() -> Tensor[(525), float32] {
  @func_4949() /* ty=Tensor[(525), float32] */
}

def @func_3631(%var_3629: Tensor[(13, 9, 9), float32], %var_3630: Tensor[(13, 9, 9), float32]) -> (Tensor[(13, 9, 9), bool],) {
  @func_3627(%var_3629, %var_3630) /* ty=(Tensor[(13, 9, 9), bool],) */
}

def @func_2356(%var_2349: Tensor[(16, 8, 10), uint16], %var_2350: Tensor[(16, 8, 10), uint16]) -> (Tensor[(16, 8, 10), uint16],) {
  %391 = cast(%var_2350, dtype="uint16") /* ty=Tensor[(16, 8, 10), uint16] */;
  %392 = shape_of(%var_2349, dtype="int32") /* ty=Tensor[(3), int32] */;
  %393 = cast(%var_2349, dtype="uint16") /* ty=Tensor[(16, 8, 10), uint16] */;
  %394 = dyn.reshape(%391, %392, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %395 = maximum(%393, %394) /* ty=Tensor[(16, 8, 10), uint16] */;
  (%395,)
}

def @func_5894() -> Tensor[(3, 2, 10), float32] {
  @func_5892() /* ty=Tensor[(3, 2, 10), float32] */
}

def @func_5336() -> (Tensor[(10, 5, 4), float32], Tensor[(1, 1470), float64], Tensor[(15, 14, 7), float64], Tensor[(13, ?, 7), int64], Tensor[(91), float32], Tensor[(525), float32], Tensor[(13, 9, 9), bool], Tensor[(1053), float32]) {
  @func_5334() /* ty=(Tensor[(10, 5, 4), float32], Tensor[(1, 1470), float64], Tensor[(15, 14, 7), float64], Tensor[(13, ?, 7), int64], Tensor[(91), float32], Tensor[(525), float32], Tensor[(13, 9, 9), bool], Tensor[(1053), float32]) */
}

def @func_6191(%var_6159: Tensor[(3, 2, 10), float32], %var_6166: Tensor[(4, 180), int64]) -> (Tensor[(3, 2, 10), float32], Tensor[(4, 180), int64], Tensor[(525), float32], Tensor[(4, 15, 12), float32]) {
  %396 = @func_5200() /* ty=(Tensor[(3, 2, 10), float32],) */;
  %397 = %396.0;
  %398 = cast(%var_6159, dtype="float32") /* ty=Tensor[(3, 2, 10), float32] */;
  %399 = shape_of(%397, dtype="int32") /* ty=Tensor[(3), int32] */;
  %400 = cast(%397, dtype="float32") /* ty=Tensor[(3, 2, 10), float32] */;
  %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %402 = @func_5334() /* ty=(Tensor[(10, 5, 4), float32], Tensor[(1, 1470), float64], Tensor[(15, 14, 7), float64], Tensor[(13, ?, 7), int64], Tensor[(91), float32], Tensor[(525), float32], Tensor[(13, 9, 9), bool], Tensor[(1053), float32]) */;
  %403 = cast(%var_6166, dtype="int64") /* ty=Tensor[(4, 180), int64] */;
  %404 = reshape(%403, newshape=[4, 15, 12]) /* ty=Tensor[(4, 15, 12), int64] */;
  %405 = @func_1412(%404) /* ty=(Tensor[(4, 15, 12), bool],) */;
  %406 = %405.0;
  %407 = cast(%406, dtype="float32") /* ty=Tensor[(4, 15, 12), float32] */;
  %408 = floor_mod(%400, %401) /* ty=Tensor[(3, 2, 10), float32] */;
  %409 = %402.5;
  %410 = atanh(%407) /* ty=Tensor[(4, 15, 12), float32] */;
  (%408, %var_6166, %409, %410)
}

def @func_3895(%var_3893: uint8) -> Tensor[(14, 16, 10), bool] {
  @func_3892(%var_3893) /* ty=Tensor[(14, 16, 10), bool] */
}

def @func_3714() -> (Tensor[(7, 13, 9), float32],) {
  @func_3712() /* ty=(Tensor[(7, 13, 9), float32],) */
}

def @func_4430(%var_4427: Tensor[(525), float32], %var_4428: Tensor[(784), uint8], %var_4429: Tensor[(360), float64]) -> (Tensor[(3, 2, 10), float64], Tensor[(16), float32], Tensor[(525), float32], Tensor[(784), uint8], Tensor[(2, 12, 15), int32], Tensor[(360), float64]) {
  %424 = fn (%var_4381: Tensor[(525), float32], %var_4382: Tensor[(784), uint8], %var_4412: Tensor[(360), float64]) -> (Tensor[(3, 2, 10), float64], Tensor[(16), float32], Tensor[(525), float32], Tensor[(784), uint8], Tensor[(2, 12, 15), int32], Tensor[(360), float64]) {
    %411 = cast(%var_4381, dtype="float32") /* ty=Tensor[(525), float32] */;
    %412 = cast(%var_4382, dtype="uint8") /* ty=Tensor[(784), uint8] */;
    %413 = reshape(%411, newshape=[525]) /* ty=Tensor[(525), float32] */;
    %414 = reshape(%412, newshape=[392, 2]) /* ty=Tensor[(392, 2), uint8] */;
    %415 = @func_4288(%413, %414) /* ty=(Tensor[(10, 5, 4), float64], Tensor[(1152), float64], int16, Tensor[(16), float32], Tensor[(15, 7, 5), bool], Tensor[(525), float32], Tensor[(1, 16), float32], Tensor[(392, 2), uint8], Tensor[(7, 13, 9), float32]) */;
    %416 = cast(%var_4412, dtype="float64") /* ty=Tensor[(360), float64] */;
    %417 = cast(%var_4412, dtype="float64") /* ty=Tensor[(360), float64] */;
    %418 = reshape(%416, newshape=[2, 12, 15]) /* ty=Tensor[(2, 12, 15), float64] */;
    %419 = reshape(%417, newshape=[2, 12, 15]) /* ty=Tensor[(2, 12, 15), float64] */;
    %420 = @func_3196(%418, %419) /* ty=(Tensor[(2, 12, 15), int32],) */;
    %421 = @func_4373() /* ty=Tensor[(3, 2, 10), float64] */;
    %422 = %415.3;
    %423 = %420.0;
    (%421, %422, %var_4381, %var_4382, %423, %var_4412)
  };
  %424(%var_4427, %var_4428, %var_4429) /* ty=(Tensor[(3, 2, 10), float64], Tensor[(16), float32], Tensor[(525), float32], Tensor[(784), uint8], Tensor[(2, 12, 15), int32], Tensor[(360), float64]) */
}

def @func_3441(%var_3439: Tensor[(198), float32]) -> (Tensor[(200), uint16], Tensor[(16, 8, 10), uint16], Tensor[(198), float32], Tensor[(896), float64], Tensor[(4, 4), float32], Tensor[(1280), uint16], Tensor[(10, 5, 4), float64]) {
  @func_3438(%var_3439) /* ty=(Tensor[(200), uint16], Tensor[(16, 8, 10), uint16], Tensor[(198), float32], Tensor[(896), float64], Tensor[(4, 4), float32], Tensor[(1280), uint16], Tensor[(10, 5, 4), float64]) */
}

def @func_2456(%var_2454: uint8, %var_2455: Tensor[(4, 14, 14), uint8]) -> (Tensor[(4, 14, 14), uint8], Tensor[(4, 14, 14), float64]) {
  @func_2452(%var_2454, %var_2455) /* ty=(Tensor[(4, 14, 14), uint8], Tensor[(4, 14, 14), float64]) */
}

def @func_234(%var_214: Tensor[(10, 5, 4), uint16]) -> Tensor[(10, 5, 4), float64] {
  %425 = cast(%var_214, dtype="uint16") /* ty=Tensor[(10, 5, 4), uint16] */;
  %426 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(10, 5, 4), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %427 = cast(meta[relay.Constant][34] /* ty=Tensor[(10, 5, 4), uint16] */, dtype="uint16") /* ty=Tensor[(10, 5, 4), uint16] */;
  %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %429 = logical_xor(%427, %428) /* ty=Tensor[(10, 5, 4), uint16] */;
  %430 = cast(%429, dtype="float64") /* ty=Tensor[(10, 5, 4), float64] */;
  sinh(%430) /* ty=Tensor[(10, 5, 4), float64] */
}

def @func_5250() -> (Tensor[(200), uint16],) {
  %431 = @func_4072() /* ty=(Tensor[(525), float32], Tensor[(200), uint16], Tensor[(525), float64]) */;
  %432 = %431.1;
  (%432,)
}

def @func_5084(%var_5076: Tensor[(1280), uint16]) -> Tensor[(1280), bool] {
  %433 = @func_5039() /* ty=(Tensor[(7, 13, 9), int16], Tensor[(16, 8, 10), uint16], Tensor[(1280), uint16]) */;
  %434 = %433.2;
  %435 = cast(%var_5076, dtype="bool") /* ty=Tensor[(1280), bool] */;
  %436 = shape_of(%434, dtype="int32") /* ty=Tensor[(1), int32] */;
  %437 = cast(%434, dtype="bool") /* ty=Tensor[(1280), bool] */;
  %438 = dyn.reshape(%435, %436, newshape=[]) /* ty=Tensor[(?), bool] */;
  logical_and(%437, %438) /* ty=Tensor[(1280), bool] */
}

def @func_3495() -> (Tensor[(3, 2, 10), int16], Tensor[(10, 5, 4), float32], Tensor[(16, 4, 14), float64], Tensor[(896), float64], Tensor[(3, 2, 10), float64], Tensor[(525), float32]) {
  %453 = fn () -> (Tensor[(3, 2, 10), int16], Tensor[(10, 5, 4), float32], Tensor[(16, 4, 14), float64], Tensor[(896), float64], Tensor[(3, 2, 10), float64], Tensor[(525), float32]) {
    %439 = @func_3378() /* ty=(Tensor[(3, 2, 10), int16], Tensor[(10, 5, 4), float64], Tensor[(200), uint16]) */;
    %440 = @func_3378() /* ty=(Tensor[(3, 2, 10), int16], Tensor[(10, 5, 4), float64], Tensor[(200), uint16]) */;
    %441 = %440.1;
    %442 = cast(%441, dtype="float32") /* ty=Tensor[(10, 5, 4), float32] */;
    %443 = cast(meta[relay.Constant][35] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
    %444 = reshape(%443, newshape=[16, 4, 14]) /* ty=Tensor[(16, 4, 14), float64] */;
    %445 = @func_1204(%444) /* ty=(Tensor[(16, 4, 14), float64],) */;
    %446 = cast(meta[relay.Constant][36] /* ty=Tensor[(525), float32] */, dtype="float32") /* ty=Tensor[(525), float32] */;
    %447 = reshape(%446, newshape=[525]) /* ty=Tensor[(525), float32] */;
    %448 = @func_3411(%447) /* ty=(Tensor[(3, 2, 10), uint16], Tensor[(15, 7, 5), bool], Tensor[(525), float32], Tensor[(3, 2, 10), float64]) */;
    %449 = %439.0;
    %450 = asinh(%442) /* ty=Tensor[(10, 5, 4), float32] */;
    %451 = %445.0;
    %452 = %448.3;
    (%449, %450, %451, meta[relay.Constant][35] /* ty=Tensor[(896), float64] */, %452, meta[relay.Constant][36] /* ty=Tensor[(525), float32] */)
  };
  %453() /* ty=(Tensor[(3, 2, 10), int16], Tensor[(10, 5, 4), float32], Tensor[(16, 4, 14), float64], Tensor[(896), float64], Tensor[(3, 2, 10), float64], Tensor[(525), float32]) */
}

def @func_2648(%var_2646: Tensor[(4, 10, 14), uint8], %var_2647: Tensor[(4, 10, 14), uint8]) -> (Tensor[(4, 10, 14), uint8], Tensor[(16, 4, 14), float64], Tensor[(896), float64]) {
  @func_2644(%var_2646, %var_2647) /* ty=(Tensor[(4, 10, 14), uint8], Tensor[(16, 4, 14), float64], Tensor[(896), float64]) */
}

def @func_3546() -> (Tensor[(3, 2, 10), float64],) {
  @func_3544() /* ty=(Tensor[(3, 2, 10), float64],) */
}

def @func_3315(%var_3313: Tensor[(14, 11, 13), int64], %var_3314: Tensor[(14, 11, 13), int64]) -> Tensor[(14, 11, 13), bool] {
  %458 = fn (%var_3307: Tensor[(14, 11, 13), int64], %var_3308: Tensor[(14, 11, 13), int64]) -> Tensor[(14, 11, 13), bool] {
    %454 = cast(%var_3308, dtype="bool") /* ty=Tensor[(14, 11, 13), bool] */;
    %455 = shape_of(%var_3307, dtype="int32") /* ty=Tensor[(3), int32] */;
    %456 = cast(%var_3307, dtype="bool") /* ty=Tensor[(14, 11, 13), bool] */;
    %457 = dyn.reshape(%454, %455, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater(%456, %457) /* ty=Tensor[(14, 11, 13), bool] */
  };
  %458(%var_3313, %var_3314) /* ty=Tensor[(14, 11, 13), bool] */
}

def @func_5724(%var_5722: Tensor[(16, 11, 12), float32]) -> (Tensor[(16, 11, 12), float32],) {
  @func_5721(%var_5722) /* ty=(Tensor[(16, 11, 12), float32],) */
}

def @func_3892(%var_3884: uint8) -> Tensor[(14, 16, 10), bool] {
  %459 = cast(%var_3884, dtype="bool") /* ty=bool */;
  %460 = cast(meta[relay.Constant][37] /* ty=Tensor[(14, 16, 10), uint8] */, dtype="bool") /* ty=Tensor[(14, 16, 10), bool] */;
  not_equal(%459, %460) /* ty=Tensor[(14, 16, 10), bool] */
}

def @func_5276() -> (Tensor[(525), float64],) {
  %465 = fn () -> (Tensor[(525), float64],) {
    %461 = @func_3750() /* ty=(Tensor[(525), float32],) */;
    %462 = %461.0;
    %463 = cast(%462, dtype="float64") /* ty=Tensor[(525), float64] */;
    %464 = sigmoid(%463) /* ty=Tensor[(525), float64] */;
    (%464,)
  };
  %465() /* ty=(Tensor[(525), float64],) */
}

def @func_4341(%var_4338: Tensor[(525), float32], %var_4339: Tensor[(312), int16], %var_4340: Tensor[(1152), uint32]) -> (Tensor[(525), float32], Tensor[(2, 12, 15), int32], Tensor[(360), float64], Tensor[(1152), uint32], Tensor[(312), int16], Tensor[(1152), uint32]) {
  %484 = fn (%var_4319: Tensor[(525), float32], %var_4332: Tensor[(312), int16], %var_4333: Tensor[(1152), uint32]) -> (Tensor[(525), float32], Tensor[(2, 12, 15), int32], Tensor[(360), float64], Tensor[(1152), uint32], Tensor[(312), int16], Tensor[(1152), uint32]) {
    %466 = @func_3786() /* ty=Tensor[(525), float32] */;
    %467 = cast(%var_4319, dtype="float32") /* ty=Tensor[(525), float32] */;
    %468 = shape_of(%466, dtype="int32") /* ty=Tensor[(1), int32] */;
    %469 = cast(%466, dtype="float32") /* ty=Tensor[(525), float32] */;
    %470 = dyn.reshape(%467, %468, newshape=[]) /* ty=Tensor[(?), float32] */;
    %471 = cast(meta[relay.Constant][38] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
    %472 = cast(meta[relay.Constant][38] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
    %473 = reshape(%471, newshape=[2, 12, 15]) /* ty=Tensor[(2, 12, 15), float64] */;
    %474 = reshape(%472, newshape=[2, 12, 15]) /* ty=Tensor[(2, 12, 15), float64] */;
    %475 = @func_3196(%473, %474) /* ty=(Tensor[(2, 12, 15), int32],) */;
    %476 = cast(%var_4332, dtype="int16") /* ty=Tensor[(312), int16] */;
    %477 = cast(%var_4333, dtype="uint32") /* ty=Tensor[(1152), uint32] */;
    %478 = reshape(%476, newshape=[13, 12, 2]) /* ty=Tensor[(13, 12, 2), int16] */;
    %479 = reshape(%477, newshape=[1152]) /* ty=Tensor[(1152), uint32] */;
    %480 = @func_2843(%478, %479) /* ty=(Tensor[(13, 12, 2), bool], Tensor[(720), int64], Tensor[(4, 15, 12), uint8], Tensor[(13, 12, 2), float32], Tensor[(6, 16, 12), uint32], Tensor[(1152), uint32]) */;
    %481 = floor_mod(%469, %470) /* ty=Tensor[(525), float32] */;
    %482 = %475.0;
    %483 = %480.5;
    (%481, %482, meta[relay.Constant][38] /* ty=Tensor[(360), float64] */, %483, %var_4332, %var_4333)
  };
  %484(%var_4338, %var_4339, %var_4340) /* ty=(Tensor[(525), float32], Tensor[(2, 12, 15), int32], Tensor[(360), float64], Tensor[(1152), uint32], Tensor[(312), int16], Tensor[(1152), uint32]) */
}

def @func_698(%var_669: Tensor[(15, 7, 5), float32]) -> Tensor[(15, 7, 5), bool] {
  %485 = cast(%var_669, dtype="float32") /* ty=Tensor[(15, 7, 5), float32] */;
  %486 = sinh(%485) /* ty=Tensor[(15, 7, 5), float32] */;
  %487 = cast(%var_669, dtype="bool") /* ty=Tensor[(15, 7, 5), bool] */;
  %488 = shape_of(%486, dtype="int32") /* ty=Tensor[(3), int32] */;
  %489 = cast(%486, dtype="bool") /* ty=Tensor[(15, 7, 5), bool] */;
  %490 = dyn.reshape(%487, %488, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%489, %490) /* ty=Tensor[(15, 7, 5), bool] */
}

def @func_5547() -> (Tensor[(7, 13, 9), float32],) {
  %491 = @func_3697() /* ty=(Tensor[(7, 13, 9), float32],) */;
  %492 = %491.0;
  %493 = cast(%492, dtype="float32") /* ty=Tensor[(7, 13, 9), float32] */;
  %494 = sinh(%493) /* ty=Tensor[(7, 13, 9), float32] */;
  (%494,)
}

def @func_4619() -> (Tensor[(7, 13, 9), float32],) {
  %496 = fn () -> (Tensor[(7, 13, 9), float32],) {
    %495 = @func_4557() /* ty=Tensor[(7, 13, 9), float32] */;
    (%495,)
  };
  %496() /* ty=(Tensor[(7, 13, 9), float32],) */
}

def @func_2600(%var_2598: Tensor[(8, 4, 3), float64]) -> Tensor[(8, 4, 3), float32] {
  @func_2597(%var_2598) /* ty=Tensor[(8, 4, 3), float32] */
}

def @func_701(%var_699: Tensor[(15, 7, 5), float32]) -> Tensor[(15, 7, 5), bool] {
  @func_698(%var_699) /* ty=Tensor[(15, 7, 5), bool] */
}

def @func_3199(%var_3197: Tensor[(2, 12, 15), float64], %var_3198: Tensor[(2, 12, 15), float64]) -> (Tensor[(2, 12, 15), int32],) {
  %504 = fn (%var_3186: Tensor[(2, 12, 15), float64], %var_3189: Tensor[(2, 12, 15), float64]) -> (Tensor[(2, 12, 15), int32],) {
    %497 = cast(%var_3186, dtype="float64") /* ty=Tensor[(2, 12, 15), float64] */;
    %498 = cosh(%497) /* ty=Tensor[(2, 12, 15), float64] */;
    %499 = cast(%var_3189, dtype="int32") /* ty=Tensor[(2, 12, 15), int32] */;
    %500 = shape_of(%498, dtype="int32") /* ty=Tensor[(3), int32] */;
    %501 = cast(%498, dtype="int32") /* ty=Tensor[(2, 12, 15), int32] */;
    %502 = dyn.reshape(%499, %500, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %503 = maximum(%501, %502) /* ty=Tensor[(2, 12, 15), int32] */;
    (%503,)
  };
  %504(%var_3197, %var_3198) /* ty=(Tensor[(2, 12, 15), int32],) */
}

def @func_3926(%var_3924: Tensor[(8, 15, 8), uint64], %var_3925: Tensor[(16), float32]) -> (Tensor[(8, 15, 8), bool], Tensor[(4, 4), float32], int16, Tensor[(16), float32], Tensor[(14, 16, 10), bool], Tensor[(8, 4, 3), float32], Tensor[(4, 24), float64]) {
  @func_3922(%var_3924, %var_3925) /* ty=(Tensor[(8, 15, 8), bool], Tensor[(4, 4), float32], int16, Tensor[(16), float32], Tensor[(14, 16, 10), bool], Tensor[(8, 4, 3), float32], Tensor[(4, 24), float64]) */
}

def @func_1272(%var_1271: Tensor[(2, 8, 1), float32]) -> (Tensor[(2, 8, 1), float32],) {
  %507 = fn (%var_1263: Tensor[(2, 8, 1), float32]) -> (Tensor[(2, 8, 1), float32],) {
    %505 = cast(%var_1263, dtype="float32") /* ty=Tensor[(2, 8, 1), float32] */;
    %506 = asin(%505) /* ty=Tensor[(2, 8, 1), float32] */;
    (%506,)
  };
  %507(%var_1271) /* ty=(Tensor[(2, 8, 1), float32],) */
}

def @func_4525() -> (Tensor[(525), float32], Tensor[(3, 2, 10), float32]) {
  %517 = fn () -> (Tensor[(525), float32], Tensor[(3, 2, 10), float32]) {
    %508 = @func_4373() /* ty=Tensor[(3, 2, 10), float64] */;
    %509 = cast(%508, dtype="float32") /* ty=Tensor[(3, 2, 10), float32] */;
    %510 = atan(%509) /* ty=Tensor[(3, 2, 10), float32] */;
    %511 = cast(meta[relay.Constant][39] /* ty=Tensor[(3, 2, 10), float32] */, dtype="float32") /* ty=Tensor[(3, 2, 10), float32] */;
    %512 = shape_of(%510, dtype="int32") /* ty=Tensor[(3), int32] */;
    %513 = cast(%510, dtype="float32") /* ty=Tensor[(3, 2, 10), float32] */;
    %514 = dyn.reshape(%511, %512, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %515 = @func_3687() /* ty=Tensor[(525), float32] */;
    %516 = divide(%513, %514) /* ty=Tensor[(3, 2, 10), float32] */;
    (%515, %516)
  };
  %517() /* ty=(Tensor[(525), float32], Tensor[(3, 2, 10), float32]) */
}

def @func_396(%var_395: Tensor[(12, 6, 16), float64]) -> (Tensor[(12, 6, 16), float64], Tensor[(12, 6, 16), float64]) {
  %522 = fn (%var_376: Tensor[(12, 6, 16), float64]) -> (Tensor[(12, 6, 16), float64], Tensor[(12, 6, 16), float64]) {
    %518 = cast(%var_376, dtype="float64") /* ty=Tensor[(12, 6, 16), float64] */;
    %519 = cast(%var_376, dtype="float64") /* ty=Tensor[(12, 6, 16), float64] */;
    %520 = cos(%518) /* ty=Tensor[(12, 6, 16), float64] */;
    %521 = acosh(%519) /* ty=Tensor[(12, 6, 16), float64] */;
    (%520, %521)
  };
  %522(%var_395) /* ty=(Tensor[(12, 6, 16), float64], Tensor[(12, 6, 16), float64]) */
}

def @func_1883(%var_1799: uint16, %var_1800: Tensor[(1, 13), uint16], %var_1805: Tensor[(896), float64], %var_1839: Tensor[(27), float64], %var_1848: Tensor[(720), int64], %var_1854: Tensor[(16), float32], %var_1870: Tensor[(200), uint16]) -> (Tensor[(1, 13), uint16], Tensor[(16, 4, 14), float64], Tensor[(896), float64], Tensor[(10, 5, 4), float64], Tensor[(4, 15, 12), bool], Tensor[(720), int64], Tensor[(2, 8, 1), float32], Tensor[(16), float32], Tensor[(200), bool], Tensor[(9, ?, 3), uint16]) {
  %523 = cast(%var_1799, dtype="uint16") /* ty=uint16 */;
  %524 = cast(%var_1800, dtype="uint16") /* ty=Tensor[(1, 13), uint16] */;
  %525 = cast(%var_1805, dtype="float64") /* ty=Tensor[(896), float64] */;
  %526 = reshape(%525, newshape=[16, 4, 14]) /* ty=Tensor[(16, 4, 14), float64] */;
  %527 = @func_1204(%526) /* ty=(Tensor[(16, 4, 14), float64],) */;
  %528 = cast(meta[relay.Constant][40] /* ty=Tensor[(200), uint16] */, dtype="uint16") /* ty=Tensor[(200), uint16] */;
  %529 = reshape(%528, newshape=[10, 5, 4]) /* ty=Tensor[(10, 5, 4), uint16] */;
  %530 = cast(%var_1848, dtype="int64") /* ty=Tensor[(720), int64] */;
  %531 = reshape(%530, newshape=[4, 15, 12]) /* ty=Tensor[(4, 15, 12), int64] */;
  %532 = @func_1412(%531) /* ty=(Tensor[(4, 15, 12), bool],) */;
  %533 = cast(%var_1854, dtype="float32") /* ty=Tensor[(16), float32] */;
  %534 = reshape(%533, newshape=[2, 8, 1]) /* ty=Tensor[(2, 8, 1), float32] */;
  %535 = @func_1270(%534) /* ty=(Tensor[(2, 8, 1), float32],) */;
  %536 = cast(%var_1870, dtype="bool") /* ty=Tensor[(200), bool] */;
  %537 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(200), uint16] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %538 = cast(meta[relay.Constant][40] /* ty=Tensor[(200), uint16] */, dtype="bool") /* ty=Tensor[(200), bool] */;
  %539 = dyn.reshape(%536, %537, newshape=[]) /* ty=Tensor[(?), bool] */;
  %540 = cast(%var_1839, dtype="float64") /* ty=Tensor[(27), float64] */;
  %541 = reshape(%540, newshape=[9, 1, 3]) /* ty=Tensor[(9, 1, 3), float64] */;
  %542 = @func_912(%541) /* ty=(Tensor[(9, 1, 3), float64],) */;
  %543 = %542.0;
  %544 = cast(%var_1839, dtype="bool") /* ty=Tensor[(27), bool] */;
  %545 = shape_of(%543, dtype="int32") /* ty=Tensor[(3), int32] */;
  %546 = cast(%543, dtype="bool") /* ty=Tensor[(9, 1, 3), bool] */;
  %547 = dyn.reshape(%544, %545, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %548 = less(%546, %547) /* ty=Tensor[(9, ?, 3), bool] */;
  %549 = cast(%548, dtype="uint16") /* ty=Tensor[(9, ?, 3), uint16] */;
  %550 = shape_of(%543, dtype="int32") /* ty=Tensor[(3), int32] */;
  %551 = cast(%543, dtype="uint16") /* ty=Tensor[(9, 1, 3), uint16] */;
  %552 = dyn.reshape(%549, %550, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %553 = logical_xor(%523, %524) /* ty=Tensor[(1, 13), uint16] */;
  %554 = %527.0;
  %555 = @func_234(%529) /* ty=Tensor[(10, 5, 4), float64] */;
  %556 = %532.0;
  %557 = %535.0;
  %558 = equal(%538, %539) /* ty=Tensor[(200), bool] */;
  %559 = maximum(%551, %552) /* ty=Tensor[(9, ?, 3), uint16] */;
  (%553, %554, %var_1805, %555, %556, %var_1848, %557, %var_1854, %558, %559)
}

def @func_3544() -> (Tensor[(3, 2, 10), float64],) {
  %560 = @func_3494() /* ty=(Tensor[(3, 2, 10), int16], Tensor[(10, 5, 4), float32], Tensor[(16, 4, 14), float64], Tensor[(896), float64], Tensor[(3, 2, 10), float64], Tensor[(525), float32]) */;
  %561 = %560.4;
  (%561,)
}

def @func_4904(%var_4902: Tensor[(13, 1, 7), float32], %var_4903: Tensor[(525), float32]) -> (Tensor[(525), float32], Tensor[(525), int64], Tensor[(13, ?, 7), bool], Tensor[(14, 1, 15), bool], Tensor[(13, ?, 7), int64]) {
  @func_4900(%var_4902, %var_4903) /* ty=(Tensor[(525), float32], Tensor[(525), int64], Tensor[(13, ?, 7), bool], Tensor[(14, 1, 15), bool], Tensor[(13, ?, 7), int64]) */
}

def @func_3583(%var_3576: int16, %var_3578: Tensor[(4, 4), float32]) -> (Tensor[(3, 2, 10), float64], Tensor[(3, 10, 4), int16], int16, Tensor[(1152), float64], Tensor[(4, 4), float32]) {
  %562 = @func_3544() /* ty=(Tensor[(3, 2, 10), float64],) */;
  %563 = cast(%var_3576, dtype="int16") /* ty=int16 */;
  %564 = cast(meta[relay.Constant][41] /* ty=Tensor[(1152), float64] */, dtype="float64") /* ty=Tensor[(1152), float64] */;
  %565 = cast(%var_3578, dtype="float32") /* ty=Tensor[(4, 4), float32] */;
  %566 = reshape(%563, newshape=[]) /* ty=int16 */;
  %567 = reshape(%564, newshape=[1152]) /* ty=Tensor[(1152), float64] */;
  %568 = reshape(%565, newshape=[4, 4]) /* ty=Tensor[(4, 4), float32] */;
  %569 = @func_1516(%566, %567, %568) /* ty=(Tensor[(3, 10, 4), int16], Tensor[(12, 6, 16), float64], Tensor[(1152), float64], Tensor[(2, 8, 1), float32], Tensor[(4, 4), float32], Tensor[(2, 8, 1), float32], Tensor[(12, 6, 16), float64]) */;
  %570 = %562.0;
  %571 = %569.0;
  (%570, %571, %var_3576, meta[relay.Constant][41] /* ty=Tensor[(1152), float64] */, %var_3578)
}

def @main() -> (Tensor[(525), float32],) {
  %572 = @func_3751() /* ty=(Tensor[(525), float32],) */;
  %573 = %572.0;
  %574 = cast(%573, dtype="float32") /* ty=Tensor[(525), float32] */;
  %575 = asin(%574) /* ty=Tensor[(525), float32] */;
  (%575,)
}

def @func_4900(%var_4837: Tensor[(13, 1, 7), float32], %var_4848: Tensor[(525), float32]) -> (Tensor[(525), float32], Tensor[(525), int64], Tensor[(13, ?, 7), bool], Tensor[(14, 1, 15), bool], Tensor[(13, ?, 7), int64]) {
  %576 = cast(meta[relay.Constant][42] /* ty=Tensor[(525), float32] */, dtype="float32") /* ty=Tensor[(525), float32] */;
  %577 = reshape(%576, newshape=[525]) /* ty=Tensor[(525), float32] */;
  %578 = @func_3411(%577) /* ty=(Tensor[(3, 2, 10), uint16], Tensor[(15, 7, 5), bool], Tensor[(525), float32], Tensor[(3, 2, 10), float64]) */;
  %579 = cast(%var_4848, dtype="int64") /* ty=Tensor[(525), int64] */;
  %580 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(525), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %581 = cast(meta[relay.Constant][42] /* ty=Tensor[(525), float32] */, dtype="int64") /* ty=Tensor[(525), int64] */;
  %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?), int64] */;
  %583 = cast(%var_4837, dtype="float32") /* ty=Tensor[(13, 1, 7), float32] */;
  %584 = atan(%583) /* ty=Tensor[(13, 1, 7), float32] */;
  %585 = cast(%584, dtype="bool") /* ty=Tensor[(13, 1, 7), bool] */;
  %586 = shape_of(%var_4837, dtype="int32") /* ty=Tensor[(3), int32] */;
  %587 = cast(%var_4837, dtype="bool") /* ty=Tensor[(13, 1, 7), bool] */;
  %588 = dyn.reshape(%585, %586, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %589 = cast(%584, dtype="float32") /* ty=Tensor[(13, 1, 7), float32] */;
  %590 = acosh(%589) /* ty=Tensor[(13, 1, 7), float32] */;
  %591 = cast(%var_4837, dtype="uint8") /* ty=Tensor[(13, 1, 7), uint8] */;
  %592 = shape_of(%584, dtype="int32") /* ty=Tensor[(3), int32] */;
  %593 = cast(%584, dtype="uint8") /* ty=Tensor[(13, 1, 7), uint8] */;
  %594 = dyn.reshape(%591, %592, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %595 = maximum(%593, %594) /* ty=Tensor[(13, ?, 7), uint8] */;
  %596 = cast(%595, dtype="int64") /* ty=Tensor[(13, ?, 7), int64] */;
  %597 = shape_of(%590, dtype="int32") /* ty=Tensor[(3), int32] */;
  %598 = cast(%590, dtype="int64") /* ty=Tensor[(13, 1, 7), int64] */;
  %599 = dyn.reshape(%596, %597, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %600 = %578.2;
  %601 = maximum(%581, %582) /* ty=Tensor[(525), int64] */;
  %602 = logical_and(%587, %588) /* ty=Tensor[(13, ?, 7), bool] */;
  %603 = @func_3826() /* ty=Tensor[(14, 1, 15), bool] */;
  %604 = logical_xor(%598, %599) /* ty=Tensor[(13, ?, 7), int64] */;
  (%600, %601, %602, %603, %604)
}

def @func_3627(%var_3609: Tensor[(13, 9, 9), float32], %var_3610: Tensor[(13, 9, 9), float32]) -> (Tensor[(13, 9, 9), bool],) {
  %605 = cast(%var_3610, dtype="bool") /* ty=Tensor[(13, 9, 9), bool] */;
  %606 = shape_of(%var_3609, dtype="int32") /* ty=Tensor[(3), int32] */;
  %607 = cast(%var_3609, dtype="bool") /* ty=Tensor[(13, 9, 9), bool] */;
  %608 = dyn.reshape(%605, %606, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %609 = not_equal(%607, %608) /* ty=Tensor[(13, 9, 9), bool] */;
  (%609,)
}

def @func_3244(%var_3226: Tensor[(12, 1, 5), float32], %var_3232: Tensor[(12, 16, 5), float32]) -> (Tensor[(12, 16, 5), uint8],) {
  %610 = cast(%var_3226, dtype="float32") /* ty=Tensor[(12, 1, 5), float32] */;
  %611 = log10(%610) /* ty=Tensor[(12, 1, 5), float32] */;
  %612 = cast(%611, dtype="uint8") /* ty=Tensor[(12, 1, 5), uint8] */;
  %613 = cast(%var_3232, dtype="uint8") /* ty=Tensor[(12, 16, 5), uint8] */;
  %614 = bitwise_xor(%612, %613) /* ty=Tensor[(12, 16, 5), uint8] */;
  (%614,)
}

def @func_4949() -> Tensor[(525), float32] {
  %615 = @func_4707() /* ty=(Tensor[(525), float32],) */;
  %615.0
}

def @func_5200() -> (Tensor[(3, 2, 10), float32],) {
  %616 = @func_4234() /* ty=(Tensor[(3, 2, 10), float32],) */;
  %617 = %616.0;
  %618 = cast(%617, dtype="float32") /* ty=Tensor[(3, 2, 10), float32] */;
  %619 = rsqrt(%618) /* ty=Tensor[(3, 2, 10), float32] */;
  (%619,)
}

def @func_3667(%var_3665: int16, %var_3666: Tensor[(1152), float64]) -> (Tensor[(3, 2, 10), float32], Tensor[(2, 8, 1), float32], int16, Tensor[(1152), float64], Tensor[(2, 8), float32]) {
  %632 = fn (%var_3658: int16, %var_3659: Tensor[(1152), float64]) -> (Tensor[(3, 2, 10), float32], Tensor[(2, 8, 1), float32], int16, Tensor[(1152), float64], Tensor[(2, 8), float32]) {
    %620 = @func_3378() /* ty=(Tensor[(3, 2, 10), int16], Tensor[(10, 5, 4), float64], Tensor[(200), uint16]) */;
    %621 = %620.0;
    %622 = cast(%621, dtype="float32") /* ty=Tensor[(3, 2, 10), float32] */;
    %623 = cast(%var_3658, dtype="int16") /* ty=int16 */;
    %624 = cast(%var_3659, dtype="float64") /* ty=Tensor[(1152), float64] */;
    %625 = cast(meta[relay.Constant][43] /* ty=Tensor[(2, 8), float32] */, dtype="float32") /* ty=Tensor[(2, 8), float32] */;
    %626 = reshape(%623, newshape=[]) /* ty=int16 */;
    %627 = reshape(%624, newshape=[1152]) /* ty=Tensor[(1152), float64] */;
    %628 = reshape(%625, newshape=[4, 4]) /* ty=Tensor[(4, 4), float32] */;
    %629 = @func_1516(%626, %627, %628) /* ty=(Tensor[(3, 10, 4), int16], Tensor[(12, 6, 16), float64], Tensor[(1152), float64], Tensor[(2, 8, 1), float32], Tensor[(4, 4), float32], Tensor[(2, 8, 1), float32], Tensor[(12, 6, 16), float64]) */;
    %630 = asinh(%622) /* ty=Tensor[(3, 2, 10), float32] */;
    %631 = %629.3;
    (%630, %631, %var_3658, %var_3659, meta[relay.Constant][43] /* ty=Tensor[(2, 8), float32] */)
  };
  %632(%var_3665, %var_3666) /* ty=(Tensor[(3, 2, 10), float32], Tensor[(2, 8, 1), float32], int16, Tensor[(1152), float64], Tensor[(2, 8), float32]) */
}

def @func_3414(%var_3412: Tensor[(525), float32]) -> (Tensor[(3, 2, 10), uint16], Tensor[(15, 7, 5), bool], Tensor[(525), float32], Tensor[(3, 2, 10), float64]) {
  @func_3411(%var_3412) /* ty=(Tensor[(3, 2, 10), uint16], Tensor[(15, 7, 5), bool], Tensor[(525), float32], Tensor[(3, 2, 10), float64]) */
}

def @func_4699(%var_4697: Tensor[(7, 13, 12), float32], %var_4698: Tensor[(16), float32]) -> (Tensor[(7, 13, 12), float32], Tensor[(3, 10, 4), int16], int16, Tensor[(16), float32]) {
  %641 = fn (%var_4676: Tensor[(7, 13, 12), float32], %var_4688: Tensor[(16), float32]) -> (Tensor[(7, 13, 12), float32], Tensor[(3, 10, 4), int16], int16, Tensor[(16), float32]) {
    %633 = cast(%var_4676, dtype="float32") /* ty=Tensor[(7, 13, 12), float32] */;
    %634 = cast(meta[relay.Constant][44] /* ty=int16 */, dtype="int16") /* ty=int16 */;
    %635 = cast(%var_4688, dtype="float32") /* ty=Tensor[(16), float32] */;
    %636 = reshape(%634, newshape=[]) /* ty=int16 */;
    %637 = reshape(%635, newshape=[4, 4]) /* ty=Tensor[(4, 4), float32] */;
    %638 = @func_3583(%636, %637) /* ty=(Tensor[(3, 2, 10), float64], Tensor[(3, 10, 4), int16], int16, Tensor[(1152), float64], Tensor[(4, 4), float32]) */;
    %639 = erf(%633) /* ty=Tensor[(7, 13, 12), float32] */;
    %640 = %638.1;
    (%639, %640, meta[relay.Constant][44] /* ty=int16 */, %var_4688)
  };
  %641(%var_4697, %var_4698) /* ty=(Tensor[(7, 13, 12), float32], Tensor[(3, 10, 4), int16], int16, Tensor[(16), float32]) */
}

def @func_5087(%var_5085: Tensor[(1280), uint16]) -> Tensor[(1280), bool] {
  @func_5084(%var_5085) /* ty=Tensor[(1280), bool] */
}

def @func_5590(%var_5589: Tensor[(1152), uint32]) -> (Tensor[(525), float32], Tensor[(3, 4, 7), float32], Tensor[(84), float32], Tensor[(7, 13, 9), float32], Tensor[(2002), int64], Tensor[(6, 16, 12), uint32], Tensor[(1152), uint32]) {
  %657 = fn (%var_5586: Tensor[(1152), uint32]) -> (Tensor[(525), float32], Tensor[(3, 4, 7), float32], Tensor[(84), float32], Tensor[(7, 13, 9), float32], Tensor[(2002), int64], Tensor[(6, 16, 12), uint32], Tensor[(1152), uint32]) {
    %642 = @func_4992() /* ty=(Tensor[(525), float32],) */;
    %643 = cast(meta[relay.Constant][45] /* ty=Tensor[(84), float32] */, dtype="float32") /* ty=Tensor[(84), float32] */;
    %644 = reshape(%643, newshape=[3, 4, 7]) /* ty=Tensor[(3, 4, 7), float32] */;
    %645 = @func_3049(%644) /* ty=(Tensor[(3, 4, 7), float32],) */;
    %646 = cast(meta[relay.Constant][46] /* ty=Tensor[(2002), int64] */, dtype="int64") /* ty=Tensor[(2002), int64] */;
    %647 = reshape(%646, newshape=[2002]) /* ty=Tensor[(2002), int64] */;
    %648 = @func_4009(%647) /* ty=(Tensor[(7, 13, 9), float32], Tensor[(14, 11, 13), bool], Tensor[(2002), int64]) */;
    %649 = cast(%var_5586, dtype="uint32") /* ty=Tensor[(1152), uint32] */;
    %650 = cast(%var_5586, dtype="uint32") /* ty=Tensor[(1152), uint32] */;
    %651 = reshape(%649, newshape=[6, 16, 12]) /* ty=Tensor[(6, 16, 12), uint32] */;
    %652 = reshape(%650, newshape=[6, 16, 12]) /* ty=Tensor[(6, 16, 12), uint32] */;
    %653 = %642.0;
    %654 = %645.0;
    %655 = %648.0;
    %656 = @func_1637(%651, %652) /* ty=Tensor[(6, 16, 12), uint32] */;
    (%653, %654, meta[relay.Constant][45] /* ty=Tensor[(84), float32] */, %655, meta[relay.Constant][46] /* ty=Tensor[(2002), int64] */, %656, %var_5586)
  };
  %657(%var_5589) /* ty=(Tensor[(525), float32], Tensor[(3, 4, 7), float32], Tensor[(84), float32], Tensor[(7, 13, 9), float32], Tensor[(2002), int64], Tensor[(6, 16, 12), uint32], Tensor[(1152), uint32]) */
}

def @func_5792() -> Tensor[(525), float64] {
  %658 = @func_4667() /* ty=(Tensor[(525), float64],) */;
  %658.0
}

def @func_3378() -> (Tensor[(3, 2, 10), int16], Tensor[(10, 5, 4), float64], Tensor[(200), uint16]) {
  %659 = cast(meta[relay.Constant][47] /* ty=Tensor[(3, 1, 10), int16] */, dtype="int16") /* ty=Tensor[(3, 1, 10), int16] */;
  %660 = cast(meta[relay.Constant][48] /* ty=Tensor[(3, 2, 10), int16] */, dtype="int16") /* ty=Tensor[(3, 2, 10), int16] */;
  %661 = cast(meta[relay.Constant][49] /* ty=Tensor[(200), uint16] */, dtype="uint16") /* ty=Tensor[(200), uint16] */;
  %662 = reshape(%661, newshape=[10, 5, 4]) /* ty=Tensor[(10, 5, 4), uint16] */;
  %663 = bitwise_or(%659, %660) /* ty=Tensor[(3, 2, 10), int16] */;
  %664 = @func_234(%662) /* ty=Tensor[(10, 5, 4), float64] */;
  (%663, %664, meta[relay.Constant][49] /* ty=Tensor[(200), uint16] */)
}

def @func_3712() -> (Tensor[(7, 13, 9), float32],) {
  %665 = @func_3697() /* ty=(Tensor[(7, 13, 9), float32],) */;
  %666 = %665.0;
  (%666,)
}

def @func_2843(%var_2800: Tensor[(13, 12, 2), int16], %var_2839: Tensor[(1152), uint32]) -> (Tensor[(13, 12, 2), bool], Tensor[(720), int64], Tensor[(4, 15, 12), uint8], Tensor[(13, 12, 2), float32], Tensor[(6, 16, 12), uint32], Tensor[(1152), uint32]) {
  %667 = cast(meta[relay.Constant][50] /* ty=int16 */, dtype="bool") /* ty=bool */;
  %668 = cast(%var_2800, dtype="bool") /* ty=Tensor[(13, 12, 2), bool] */;
  %669 = less_equal(%667, %668) /* ty=Tensor[(13, 12, 2), bool] */;
  %670 = cast(%669, dtype="bool") /* ty=Tensor[(13, 12, 2), bool] */;
  %671 = cast(meta[relay.Constant][50] /* ty=int16 */, dtype="bool") /* ty=bool */;
  %672 = cast(meta[relay.Constant][51] /* ty=Tensor[(720), int64] */, dtype="int64") /* ty=Tensor[(720), int64] */;
  %673 = reshape(%672, newshape=[4, 15, 12]) /* ty=Tensor[(4, 15, 12), int64] */;
  %674 = @func_1412(%673) /* ty=(Tensor[(4, 15, 12), bool],) */;
  %675 = %674.0;
  %676 = cast(%675, dtype="float32") /* ty=Tensor[(4, 15, 12), float32] */;
  %677 = cosh(%676) /* ty=Tensor[(4, 15, 12), float32] */;
  %678 = cast(%677, dtype="int16") /* ty=Tensor[(4, 15, 12), int16] */;
  %679 = cast(meta[relay.Constant][50] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %680 = bitwise_and(%678, %679) /* ty=Tensor[(4, 15, 12), int16] */;
  %681 = cast(%680, dtype="uint8") /* ty=Tensor[(4, 15, 12), uint8] */;
  %682 = shape_of(%677, dtype="int32") /* ty=Tensor[(3), int32] */;
  %683 = cast(%677, dtype="uint8") /* ty=Tensor[(4, 15, 12), uint8] */;
  %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %685 = cast(%669, dtype="float32") /* ty=Tensor[(13, 12, 2), float32] */;
  %686 = cast(meta[relay.Constant][50] /* ty=int16 */, dtype="float32") /* ty=float32 */;
  %687 = cast(%var_2839, dtype="uint32") /* ty=Tensor[(1152), uint32] */;
  %688 = cast(%var_2839, dtype="uint32") /* ty=Tensor[(1152), uint32] */;
  %689 = reshape(%687, newshape=[6, 16, 12]) /* ty=Tensor[(6, 16, 12), uint32] */;
  %690 = reshape(%688, newshape=[6, 16, 12]) /* ty=Tensor[(6, 16, 12), uint32] */;
  %691 = logical_and(%670, %671) /* ty=Tensor[(13, 12, 2), bool] */;
  %692 = left_shift(%683, %684) /* ty=Tensor[(4, 15, 12), uint8] */;
  %693 = power(%685, %686) /* ty=Tensor[(13, 12, 2), float32] */;
  %694 = @func_1637(%689, %690) /* ty=Tensor[(6, 16, 12), uint32] */;
  (%691, meta[relay.Constant][51] /* ty=Tensor[(720), int64] */, %692, %693, %694, %var_2839)
}

def @func_4074() -> (Tensor[(525), float32], Tensor[(200), uint16], Tensor[(525), float64]) {
  @func_4072() /* ty=(Tensor[(525), float32], Tensor[(200), uint16], Tensor[(525), float64]) */
}

def @func_3587(%var_3585: int16, %var_3586: Tensor[(4, 4), float32]) -> (Tensor[(3, 2, 10), float64], Tensor[(3, 10, 4), int16], int16, Tensor[(1152), float64], Tensor[(4, 4), float32]) {
  @func_3583(%var_3585, %var_3586) /* ty=(Tensor[(3, 2, 10), float64], Tensor[(3, 10, 4), int16], int16, Tensor[(1152), float64], Tensor[(4, 4), float32]) */
}

def @func_5402() -> (Tensor[(7, 13, 9), float32],) {
  %696 = fn () -> (Tensor[(7, 13, 9), float32],) {
    %695 = @func_4557() /* ty=Tensor[(7, 13, 9), float32] */;
    (%695,)
  };
  %696() /* ty=(Tensor[(7, 13, 9), float32],) */
}

def @func_3787() -> Tensor[(525), float32] {
  %697 = fn () -> Tensor[(525), float32] {
    @func_3687() /* ty=Tensor[(525), float32] */
  };
  %697() /* ty=Tensor[(525), float32] */
}

def @func_2295(%var_2293: Tensor[(2, 7, 9), float64]) -> (Tensor[(2, 7, 9), float64],) {
  @func_2292(%var_2293) /* ty=(Tensor[(2, 7, 9), float64],) */
}

def @func_5392(%var_5390: Tensor[(2, 392), uint8]) -> (Tensor[(7, 13, 9), float32], Tensor[(525), int64], uint8, Tensor[(2, 392), uint8], Tensor[(44), float64], Tensor[(1152), float64], Tensor[(120), int16], Tensor[(525), float64]) {
  @func_5389(%var_5390) /* ty=(Tensor[(7, 13, 9), float32], Tensor[(525), int64], uint8, Tensor[(2, 392), uint8], Tensor[(44), float64], Tensor[(1152), float64], Tensor[(120), int16], Tensor[(525), float64]) */
}

def @func_3438(%var_3428: Tensor[(198), float32]) -> (Tensor[(200), uint16], Tensor[(16, 8, 10), uint16], Tensor[(198), float32], Tensor[(896), float64], Tensor[(4, 4), float32], Tensor[(1280), uint16], Tensor[(10, 5, 4), float64]) {
  %698 = @func_3378() /* ty=(Tensor[(3, 2, 10), int16], Tensor[(10, 5, 4), float64], Tensor[(200), uint16]) */;
  %699 = cast(%var_3428, dtype="float32") /* ty=Tensor[(198), float32] */;
  %700 = cast(meta[relay.Constant][52] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
  %701 = cast(meta[relay.Constant][53] /* ty=Tensor[(4, 4), float32] */, dtype="float32") /* ty=Tensor[(4, 4), float32] */;
  %702 = %698.2;
  %703 = cast(%702, dtype="uint16") /* ty=Tensor[(200), uint16] */;
  %704 = cast(meta[relay.Constant][54] /* ty=Tensor[(1280), uint16] */, dtype="uint16") /* ty=Tensor[(1280), uint16] */;
  %705 = reshape(%699, newshape=[3, 6, 11]) /* ty=Tensor[(3, 6, 11), float32] */;
  %706 = reshape(%700, newshape=[896]) /* ty=Tensor[(896), float64] */;
  %707 = reshape(%701, newshape=[16]) /* ty=Tensor[(16), float32] */;
  %708 = reshape(%703, newshape=[200]) /* ty=Tensor[(200), uint16] */;
  %709 = reshape(%704, newshape=[1280]) /* ty=Tensor[(1280), uint16] */;
  %710 = @func_2543(%705, %706, %707, %708, %709) /* ty=(Tensor[(3, 6, 11), bool], Tensor[(12, 6, 16), float64], Tensor[(1152), float64], Tensor[(4, 15, 12), bool], Tensor[(720), int64], Tensor[(10, 5, 4), float64], uint16, Tensor[(13), uint16], Tensor[(896), float64], Tensor[(27, 1), float64], Tensor[(16), float32], Tensor[(200), uint16], Tensor[(2, 2, 11), bool], Tensor[(44), float64], Tensor[(16, 8, 10), uint16], Tensor[(1280), uint16]) */;
  %711 = cast(%702, dtype="uint16") /* ty=Tensor[(200), uint16] */;
  %712 = reshape(%711, newshape=[10, 5, 4]) /* ty=Tensor[(10, 5, 4), uint16] */;
  %713 = %710.14;
  %714 = @func_234(%712) /* ty=Tensor[(10, 5, 4), float64] */;
  (%702, %713, %var_3428, meta[relay.Constant][52] /* ty=Tensor[(896), float64] */, meta[relay.Constant][53] /* ty=Tensor[(4, 4), float32] */, meta[relay.Constant][54] /* ty=Tensor[(1280), uint16] */, %714)
}

def @func_5202() -> (Tensor[(3, 2, 10), float32],) {
  @func_5200() /* ty=(Tensor[(3, 2, 10), float32],) */
}

def @func_2644(%var_2625: Tensor[(4, 10, 14), uint8], %var_2626: Tensor[(4, 10, 14), uint8]) -> (Tensor[(4, 10, 14), uint8], Tensor[(16, 4, 14), float64], Tensor[(896), float64]) {
  %715 = cast(%var_2626, dtype="uint8") /* ty=Tensor[(4, 10, 14), uint8] */;
  %716 = shape_of(%var_2625, dtype="int32") /* ty=Tensor[(3), int32] */;
  %717 = cast(%var_2625, dtype="uint8") /* ty=Tensor[(4, 10, 14), uint8] */;
  %718 = dyn.reshape(%715, %716, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %719 = cast(meta[relay.Constant][55] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
  %720 = reshape(%719, newshape=[16, 4, 14]) /* ty=Tensor[(16, 4, 14), float64] */;
  %721 = @func_1204(%720) /* ty=(Tensor[(16, 4, 14), float64],) */;
  %722 = multiply(%717, %718) /* ty=Tensor[(4, 10, 14), uint8] */;
  %723 = %721.0;
  (%722, %723, meta[relay.Constant][55] /* ty=Tensor[(896), float64] */)
}

def @func_2452(%var_2443: uint8, %var_2444: Tensor[(4, 14, 14), uint8]) -> (Tensor[(4, 14, 14), uint8], Tensor[(4, 14, 14), float64]) {
  %724 = cast(%var_2443, dtype="uint8") /* ty=uint8 */;
  %725 = cast(%var_2444, dtype="uint8") /* ty=Tensor[(4, 14, 14), uint8] */;
  %726 = cast(%var_2444, dtype="float64") /* ty=Tensor[(4, 14, 14), float64] */;
  %727 = left_shift(%724, %725) /* ty=Tensor[(4, 14, 14), uint8] */;
  %728 = sin(%726) /* ty=Tensor[(4, 14, 14), float64] */;
  (%727, %728)
}

def @func_1641(%var_1639: Tensor[(6, 16, 12), uint32], %var_1640: Tensor[(6, 16, 12), uint32]) -> Tensor[(6, 16, 12), uint32] {
  @func_1637(%var_1639, %var_1640) /* ty=Tensor[(6, 16, 12), uint32] */
}

def @func_4197(%var_4195: uint8, %var_4196: Tensor[(784), uint8]) -> (Tensor[(525), int64], Tensor[(525), float32], Tensor[(4, 14, 14), uint8], uint8, Tensor[(784), uint8], Tensor[(4, 4), float32], Tensor[(1, 16), float32], Tensor[(3, 2, 10), int16]) {
  %752 = fn (%var_4162: uint8, %var_4163: Tensor[(784), uint8]) -> (Tensor[(525), int64], Tensor[(525), float32], Tensor[(4, 14, 14), uint8], uint8, Tensor[(784), uint8], Tensor[(4, 4), float32], Tensor[(1, 16), float32], Tensor[(3, 2, 10), int16]) {
    %729 = @func_3750() /* ty=(Tensor[(525), float32],) */;
    %730 = %729.0;
    %731 = cast(meta[relay.Constant][56] /* ty=Tensor[(525), float32] */, dtype="int64") /* ty=Tensor[(525), int64] */;
    %732 = shape_of(%730, dtype="int32") /* ty=Tensor[(1), int32] */;
    %733 = cast(%730, dtype="int64") /* ty=Tensor[(525), int64] */;
    %734 = dyn.reshape(%731, %732, newshape=[]) /* ty=Tensor[(?), int64] */;
    %735 = cast(meta[relay.Constant][56] /* ty=Tensor[(525), float32] */, dtype="float32") /* ty=Tensor[(525), float32] */;
    %736 = cast(%var_4162, dtype="uint8") /* ty=uint8 */;
    %737 = cast(%var_4163, dtype="uint8") /* ty=Tensor[(784), uint8] */;
    %738 = reshape(%736, newshape=[]) /* ty=uint8 */;
    %739 = reshape(%737, newshape=[4, 14, 14]) /* ty=Tensor[(4, 14, 14), uint8] */;
    %740 = @func_2452(%738, %739) /* ty=(Tensor[(4, 14, 14), uint8], Tensor[(4, 14, 14), float64]) */;
    %741 = cast(%var_4162, dtype="int16") /* ty=int16 */;
    %742 = cast(meta[relay.Constant][57] /* ty=Tensor[(1, 16), float32] */, dtype="float32") /* ty=Tensor[(1, 16), float32] */;
    %743 = reshape(%741, newshape=[]) /* ty=int16 */;
    %744 = reshape(%742, newshape=[4, 4]) /* ty=Tensor[(4, 4), float32] */;
    %745 = @func_3583(%743, %744) /* ty=(Tensor[(3, 2, 10), float64], Tensor[(3, 10, 4), int16], int16, Tensor[(1152), float64], Tensor[(4, 4), float32]) */;
    %746 = @func_3378() /* ty=(Tensor[(3, 2, 10), int16], Tensor[(10, 5, 4), float64], Tensor[(200), uint16]) */;
    %747 = bitwise_or(%733, %734) /* ty=Tensor[(525), int64] */;
    %748 = tan(%735) /* ty=Tensor[(525), float32] */;
    %749 = %740.0;
    %750 = %745.4;
    %751 = %746.0;
    (%747, %748, %749, %var_4162, %var_4163, %750, meta[relay.Constant][57] /* ty=Tensor[(1, 16), float32] */, %751)
  };
  %752(%var_4195, %var_4196) /* ty=(Tensor[(525), int64], Tensor[(525), float32], Tensor[(4, 14, 14), uint8], uint8, Tensor[(784), uint8], Tensor[(4, 4), float32], Tensor[(1, 16), float32], Tensor[(3, 2, 10), int16]) */
}

def @func_4549(%var_4540: Tensor[(14, 3, 15), float32], %var_4546: Tensor[(1, 525), float32]) -> (Tensor[(14, 3, 15), int8], Tensor[(3, 2, 10), uint16], Tensor[(1, 525), float32]) {
  %753 = @func_3826() /* ty=Tensor[(14, 1, 15), bool] */;
  %754 = cast(%753, dtype="float32") /* ty=Tensor[(14, 1, 15), float32] */;
  %755 = tan(%754) /* ty=Tensor[(14, 1, 15), float32] */;
  %756 = cast(%755, dtype="int8") /* ty=Tensor[(14, 1, 15), int8] */;
  %757 = cast(%var_4540, dtype="int8") /* ty=Tensor[(14, 3, 15), int8] */;
  %758 = cast(%var_4546, dtype="float32") /* ty=Tensor[(1, 525), float32] */;
  %759 = reshape(%758, newshape=[525]) /* ty=Tensor[(525), float32] */;
  %760 = @func_3411(%759) /* ty=(Tensor[(3, 2, 10), uint16], Tensor[(15, 7, 5), bool], Tensor[(525), float32], Tensor[(3, 2, 10), float64]) */;
  %761 = minimum(%756, %757) /* ty=Tensor[(14, 3, 15), int8] */;
  %762 = %760.0;
  (%761, %762, %var_4546)
}

def @func_4375() -> Tensor[(3, 2, 10), float64] {
  @func_4373() /* ty=Tensor[(3, 2, 10), float64] */
}

def @func_3922(%var_3905: Tensor[(8, 15, 8), uint64], %var_3913: Tensor[(16), float32]) -> (Tensor[(8, 15, 8), bool], Tensor[(4, 4), float32], int16, Tensor[(16), float32], Tensor[(14, 16, 10), bool], Tensor[(8, 4, 3), float32], Tensor[(4, 24), float64]) {
  %763 = cast(meta[relay.Constant][58] /* ty=Tensor[(8, 15, 8), uint64] */, dtype="bool") /* ty=Tensor[(8, 15, 8), bool] */;
  %764 = shape_of(%var_3905, dtype="int32") /* ty=Tensor[(3), int32] */;
  %765 = cast(%var_3905, dtype="bool") /* ty=Tensor[(8, 15, 8), bool] */;
  %766 = dyn.reshape(%763, %764, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %767 = cast(meta[relay.Constant][59] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %768 = cast(%var_3913, dtype="float32") /* ty=Tensor[(16), float32] */;
  %769 = reshape(%767, newshape=[]) /* ty=int16 */;
  %770 = reshape(%768, newshape=[4, 4]) /* ty=Tensor[(4, 4), float32] */;
  %771 = @func_3583(%769, %770) /* ty=(Tensor[(3, 2, 10), float64], Tensor[(3, 10, 4), int16], int16, Tensor[(1152), float64], Tensor[(4, 4), float32]) */;
  %772 = cast(meta[relay.Constant][59] /* ty=int16 */, dtype="uint8") /* ty=uint8 */;
  %773 = reshape(%772, newshape=[]) /* ty=uint8 */;
  %774 = cast(meta[relay.Constant][60] /* ty=Tensor[(4, 24), float64] */, dtype="float64") /* ty=Tensor[(4, 24), float64] */;
  %775 = reshape(%774, newshape=[8, 4, 3]) /* ty=Tensor[(8, 4, 3), float64] */;
  %776 = equal(%765, %766) /* ty=Tensor[(8, 15, 8), bool] */;
  %777 = %771.4;
  %778 = @func_3892(%773) /* ty=Tensor[(14, 16, 10), bool] */;
  %779 = @func_2597(%775) /* ty=Tensor[(8, 4, 3), float32] */;
  (%776, %777, meta[relay.Constant][59] /* ty=int16 */, %var_3913, %778, %779, meta[relay.Constant][60] /* ty=Tensor[(4, 24), float64] */)
}

def @func_4235() -> (Tensor[(3, 2, 10), float32],) {
  %786 = fn () -> (Tensor[(3, 2, 10), float32],) {
    %780 = @func_3378() /* ty=(Tensor[(3, 2, 10), int16], Tensor[(10, 5, 4), float64], Tensor[(200), uint16]) */;
    %781 = %780.0;
    %782 = cast(%781, dtype="float64") /* ty=Tensor[(3, 2, 10), float64] */;
    %783 = cosh(%782) /* ty=Tensor[(3, 2, 10), float64] */;
    %784 = cast(%783, dtype="float32") /* ty=Tensor[(3, 2, 10), float32] */;
    %785 = sqrt(%784) /* ty=Tensor[(3, 2, 10), float32] */;
    (%785,)
  };
  %786() /* ty=(Tensor[(3, 2, 10), float32],) */
}

def @func_1414(%var_1413: Tensor[(4, 15, 12), int64]) -> (Tensor[(4, 15, 12), bool],) {
  %792 = fn (%var_1406: Tensor[(4, 15, 12), int64]) -> (Tensor[(4, 15, 12), bool],) {
    %787 = cast(%var_1406, dtype="bool") /* ty=Tensor[(4, 15, 12), bool] */;
    %788 = shape_of(meta[relay.Constant][61] /* ty=Tensor[(4, 15, 12), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %789 = cast(meta[relay.Constant][61] /* ty=Tensor[(4, 15, 12), int64] */, dtype="bool") /* ty=Tensor[(4, 15, 12), bool] */;
    %790 = dyn.reshape(%787, %788, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %791 = less_equal(%789, %790) /* ty=Tensor[(4, 15, 12), bool] */;
    (%791,)
  };
  %792(%var_1413) /* ty=(Tensor[(4, 15, 12), bool],) */
}

def @func_1521(%var_1518: int16, %var_1519: Tensor[(1152), float64], %var_1520: Tensor[(4, 4), float32]) -> (Tensor[(3, 10, 4), int16], Tensor[(12, 6, 16), float64], Tensor[(1152), float64], Tensor[(2, 8, 1), float32], Tensor[(4, 4), float32], Tensor[(2, 8, 1), float32], Tensor[(12, 6, 16), float64]) {
  @func_1516(%var_1518, %var_1519, %var_1520) /* ty=(Tensor[(3, 10, 4), int16], Tensor[(12, 6, 16), float64], Tensor[(1152), float64], Tensor[(2, 8, 1), float32], Tensor[(4, 4), float32], Tensor[(2, 8, 1), float32], Tensor[(12, 6, 16), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen1/build/output.py", line 1922, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:43:12] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

