==========mod==========
#[version = "0.0.5"]
def @func_4384() -> Tensor[(450), int8] {
  @func_3558() /* ty=Tensor[(450), int8] */
}

def @func_3753(%var_3738: Tensor[(10, 4, 1), float32], %var_3745: Tensor[(10, 4, 12), float32]) -> (Tensor[(10, 4, 12), bool],) {
  %0 = cast(%var_3738, dtype="float32") /* ty=Tensor[(10, 4, 1), float32] */;
  %1 = cosh(%0) /* ty=Tensor[(10, 4, 1), float32] */;
  %2 = cast(%1, dtype="bool") /* ty=Tensor[(10, 4, 1), bool] */;
  %3 = cast(%var_3745, dtype="bool") /* ty=Tensor[(10, 4, 12), bool] */;
  %4 = not_equal(%2, %3) /* ty=Tensor[(10, 4, 12), bool] */;
  (%4,)
}

def @func_6126() -> (Tensor[(450), bool], Tensor[(450), bool]) {
  %5 = @func_3941() /* ty=(Tensor[(450), bool], Tensor[(450), bool]) */;
  %6 = @func_3589() /* ty=(Tensor[(450), bool],) */;
  %7 = %5.1;
  %8 = %6.0;
  (%7, %8)
}

def @func_4034(%var_4026: Tensor[(75), int8]) -> (Tensor[(7, 13, 7), float64], Tensor[(5, 6, 15), float32], Tensor[(75), int8], Tensor[(728, 1), uint8]) {
  %9 = @func_2410() /* ty=(Tensor[(7, 13, 7), float64],) */;
  %10 = cast(%var_4026, dtype="int8") /* ty=Tensor[(75), int8] */;
  %11 = cast(meta[relay.Constant][0] /* ty=Tensor[(728, 1), uint8] */, dtype="uint8") /* ty=Tensor[(728, 1), uint8] */;
  %12 = reshape(%10, newshape=[15, 1, 5]) /* ty=Tensor[(15, 1, 5), int8] */;
  %13 = reshape(%11, newshape=[728]) /* ty=Tensor[(728), uint8] */;
  %14 = @func_2279(%12, %13) /* ty=(Tensor[(15, 1, 5), int8], Tensor[(5, 6, 15), float32], Tensor[(450), float32], Tensor[(8, 7, 13), uint8], Tensor[(728), uint8], Tensor[(1575), int16]) */;
  %15 = %9.0;
  %16 = %14.1;
  (%15, %16, %var_4026, meta[relay.Constant][0] /* ty=Tensor[(728, 1), uint8] */)
}

def @func_5337() -> (Tensor[(450), bool], Tensor[(5, 6, 15), float32], Tensor[(78), uint8], Tensor[(1575), int16]) {
  %17 = cast(meta[relay.Constant][1] /* ty=Tensor[(78), uint8] */, dtype="uint8") /* ty=Tensor[(78), uint8] */;
  %18 = cast(meta[relay.Constant][2] /* ty=Tensor[(1575), int16] */, dtype="int16") /* ty=Tensor[(1575), int16] */;
  %19 = reshape(%17, newshape=[6, 1, 13]) /* ty=Tensor[(6, 1, 13), uint8] */;
  %20 = reshape(%18, newshape=[1575]) /* ty=Tensor[(1575), int16] */;
  %21 = @func_2073(%19, %20) /* ty=(Tensor[(6, 4, 13), bool], Tensor[(5, 6, 15), float32], Tensor[(450), float32], Tensor[(5, 6, 15), float32], Tensor[(1080), bool], Tensor[(1575), int16], Tensor[(6, ?, 13), float32]) */;
  %22 = @func_2858() /* ty=Tensor[(450), bool] */;
  %23 = %21.1;
  (%22, %23, meta[relay.Constant][1] /* ty=Tensor[(78), uint8] */, meta[relay.Constant][2] /* ty=Tensor[(1575), int16] */)
}

def @func_1401(%var_1387: Tensor[(6, 13, 3), float32]) -> (Tensor[(6, 13, 3), float32],) {
  %24 = cast(%var_1387, dtype="float32") /* ty=Tensor[(6, 13, 3), float32] */;
  %25 = cosh(%24) /* ty=Tensor[(6, 13, 3), float32] */;
  (%25,)
}

def @func_5761(%var_5758: Tensor[(15, 8, 9), float32]) -> (Tensor[(15, 8, 9), float32],) {
  %26 = cast(%var_5758, dtype="float32") /* ty=Tensor[(15, 8, 9), float32] */;
  %27 = sqrt(%26) /* ty=Tensor[(15, 8, 9), float32] */;
  (%27,)
}

def @func_6486(%var_6477: Tensor[(6, 10, 16), float64]) -> (Tensor[(6, 10, 16), float64], Tensor[(7, 13, 7), float64], Tensor[(7, 13, 7), float64]) {
  %28 = cast(%var_6477, dtype="float64") /* ty=Tensor[(6, 10, 16), float64] */;
  %29 = @func_2683() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(450), int8]) */;
  %30 = @func_6038() /* ty=(Tensor[(450), float64], Tensor[(7, 13, 7), float64], Tensor[(450), bool], Tensor[(5, 6, 15), float64]) */;
  %31 = sin(%28) /* ty=Tensor[(6, 10, 16), float64] */;
  %32 = %29.0;
  %33 = %30.1;
  (%31, %32, %33)
}

def @func_6589() -> Tensor[(780), bool] {
  @func_5719() /* ty=Tensor[(780), bool] */
}

def @func_6317() -> (Tensor[(780), float32], Tensor[(16, 2, 12), float32]) {
  %34 = @func_6091() /* ty=Tensor[(16, 2, 12), float64] */;
  %35 = cast(%34, dtype="float32") /* ty=Tensor[(16, 2, 12), float32] */;
  %36 = @func_4415() /* ty=Tensor[(780), float32] */;
  %37 = log2(%35) /* ty=Tensor[(16, 2, 12), float32] */;
  (%36, %37)
}

def @func_6761() -> Tensor[(7, 13, 7), float64] {
  %38 = @func_2198() /* ty=(Tensor[(7, 13, 7), float64],) */;
  %38.0
}

def @func_6165(%var_6151: uint32, %var_6152: Tensor[(6, 5, 7), uint32], %var_6158: Tensor[(40), float32]) -> (Tensor[(6, 5, 7), uint32], Tensor[(10, 4, 12), bool], Tensor[(40), float32], Tensor[(480), float32]) {
  %39 = cast(%var_6151, dtype="uint32") /* ty=uint32 */;
  %40 = cast(%var_6152, dtype="uint32") /* ty=Tensor[(6, 5, 7), uint32] */;
  %41 = cast(%var_6158, dtype="float32") /* ty=Tensor[(40), float32] */;
  %42 = cast(meta[relay.Constant][3] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %43 = reshape(%41, newshape=[10, 4, 1]) /* ty=Tensor[(10, 4, 1), float32] */;
  %44 = reshape(%42, newshape=[10, 4, 12]) /* ty=Tensor[(10, 4, 12), float32] */;
  %45 = @func_3753(%43, %44) /* ty=(Tensor[(10, 4, 12), bool],) */;
  %46 = maximum(%39, %40) /* ty=Tensor[(6, 5, 7), uint32] */;
  %47 = %45.0;
  (%46, %47, %var_6158, meta[relay.Constant][3] /* ty=Tensor[(480), float32] */)
}

def @func_2632(%var_2627: Tensor[(1080), bool], %var_2628: Tensor[(15, 105), int16]) -> (Tensor[(132, 2), float32], Tensor[(7, 13, 7), float64], Tensor[(5, 6, 15), float32], Tensor[(1080), bool], Tensor[(15, 105), int16]) {
  %48 = @func_2399() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(12, 11, 2), float64], Tensor[(132, 2), float32]) */;
  %49 = %48.2;
  %50 = cast(%49, dtype="float32") /* ty=Tensor[(132, 2), float32] */;
  %51 = @func_2410() /* ty=(Tensor[(7, 13, 7), float64],) */;
  %52 = cast(%var_2627, dtype="bool") /* ty=Tensor[(1080), bool] */;
  %53 = cast(%var_2628, dtype="int16") /* ty=Tensor[(15, 105), int16] */;
  %54 = reshape(%52, newshape=[10, 9, 12]) /* ty=Tensor[(10, 9, 12), bool] */;
  %55 = reshape(%53, newshape=[105, 15]) /* ty=Tensor[(105, 15), int16] */;
  %56 = @func_1928(%54, %55) /* ty=(Tensor[(10, 9, 12), bool], Tensor[(5, 6, 15), float32], Tensor[(105, 15), int16], Tensor[(450), float32]) */;
  %57 = tan(%50) /* ty=Tensor[(132, 2), float32] */;
  %58 = %51.0;
  %59 = %56.1;
  (%57, %58, %59, %var_2627, %var_2628)
}

def @func_6091() -> Tensor[(16, 2, 12), float64] {
  %60 = @func_6063() /* ty=Tensor[(16, 2, 12), float64] */;
  %61 = cast(%60, dtype="float64") /* ty=Tensor[(16, 2, 12), float64] */;
  atanh(%61) /* ty=Tensor[(16, 2, 12), float64] */
}

def @func_2683() -> (Tensor[(7, 13, 7), float64], Tensor[(450), int8]) {
  %62 = @func_2198() /* ty=(Tensor[(7, 13, 7), float64],) */;
  %63 = cast(meta[relay.Constant][4] /* ty=Tensor[(450), float32] */, dtype="float32") /* ty=Tensor[(450), float32] */;
  %64 = reshape(%63, newshape=[5, 6, 15]) /* ty=Tensor[(5, 6, 15), float32] */;
  %65 = @func_166(%64) /* ty=Tensor[(5, 6, 15), float32] */;
  %66 = cast(%65, dtype="int8") /* ty=Tensor[(5, 6, 15), int8] */;
  %67 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(450), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %68 = cast(meta[relay.Constant][4] /* ty=Tensor[(450), float32] */, dtype="int8") /* ty=Tensor[(450), int8] */;
  %69 = dyn.reshape(%66, %67, newshape=[]) /* ty=Tensor[(?), int8] */;
  %70 = %62.0;
  %71 = subtract(%68, %69) /* ty=Tensor[(450), int8] */;
  (%70, %71)
}

def @func_3181() -> (Tensor[(450), bool],) {
  %72 = @func_2909() /* ty=Tensor[(450), bool] */;
  (%72,)
}

def @func_7679() -> Tensor[(7, 13, 7), float64] {
  %73 = @func_2198() /* ty=(Tensor[(7, 13, 7), float64],) */;
  %73.0
}

def @func_2302(%var_2295: Tensor[(6, 10, 13), float32]) -> (Tensor[(6, 10, 13), float32],) {
  %74 = cast(2.65088f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %75 = cast(%var_2295, dtype="float32") /* ty=Tensor[(6, 10, 13), float32] */;
  %76 = divide(%74, %75) /* ty=Tensor[(6, 10, 13), float32] */;
  (%76,)
}

def @func_3287(%var_3266: int32, %var_3267: Tensor[(1, 2, 4), int32]) -> (Tensor[(1, 2, 4), uint32], Tensor[(1, 2, 4), float32]) {
  %77 = cast(%var_3266, dtype="uint32") /* ty=uint32 */;
  %78 = cast(%var_3267, dtype="uint32") /* ty=Tensor[(1, 2, 4), uint32] */;
  %79 = cast(%var_3266, dtype="int32") /* ty=int32 */;
  %80 = cast(%var_3267, dtype="int32") /* ty=Tensor[(1, 2, 4), int32] */;
  %81 = left_shift(%79, %80) /* ty=Tensor[(1, 2, 4), int32] */;
  %82 = cast(%81, dtype="float32") /* ty=Tensor[(1, 2, 4), float32] */;
  %83 = right_shift(%77, %78) /* ty=Tensor[(1, 2, 4), uint32] */;
  %84 = atanh(%82) /* ty=Tensor[(1, 2, 4), float32] */;
  (%83, %84)
}

def @func_6210(%var_6205: Tensor[(7, 13, 7), float64]) -> Tensor[(7, 13, 7), int32] {
  %85 = @func_4624() /* ty=(Tensor[(7, 13, 7), float64],) */;
  %86 = %85.0;
  %87 = cast(%var_6205, dtype="int32") /* ty=Tensor[(7, 13, 7), int32] */;
  %88 = shape_of(%86, dtype="int32") /* ty=Tensor[(3), int32] */;
  %89 = cast(%86, dtype="int32") /* ty=Tensor[(7, 13, 7), int32] */;
  %90 = dyn.reshape(%87, %88, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  subtract(%89, %90) /* ty=Tensor[(7, 13, 7), int32] */
}

def @func_4499() -> (Tensor[(450), int8],) {
  %91 = @func_2791() /* ty=(Tensor[(450), int8],) */;
  %92 = %91.0;
  (%92,)
}

def @func_4114() -> (Tensor[(450), bool], Tensor[(8, 8, 4), float64]) {
  %93 = @func_3553() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(450), bool]) */;
  %94 = cast(meta[relay.Constant][5] /* ty=Tensor[(8, 8, 4), float32] */, dtype="float32") /* ty=Tensor[(8, 8, 4), float32] */;
  %95 = sin(%94) /* ty=Tensor[(8, 8, 4), float32] */;
  %96 = cast(%95, dtype="float32") /* ty=Tensor[(8, 8, 4), float32] */;
  %97 = sigmoid(%96) /* ty=Tensor[(8, 8, 4), float32] */;
  %98 = cast(%97, dtype="float64") /* ty=Tensor[(8, 8, 4), float64] */;
  %99 = %93.1;
  %100 = atanh(%98) /* ty=Tensor[(8, 8, 4), float64] */;
  (%99, %100)
}

def @func_6748(%var_6729: uint32, %var_6730: Tensor[(210), uint32], %var_6731: Tensor[(20, 2), float32]) -> (Tensor[(450), bool], Tensor[(480), float32], uint32, Tensor[(210), uint32], Tensor[(20, 2), float32], Tensor[(450), bool]) {
  %101 = cast(%var_6729, dtype="uint32") /* ty=uint32 */;
  %102 = cast(%var_6730, dtype="uint32") /* ty=Tensor[(210), uint32] */;
  %103 = cast(%var_6731, dtype="float32") /* ty=Tensor[(20, 2), float32] */;
  %104 = reshape(%101, newshape=[]) /* ty=uint32 */;
  %105 = reshape(%102, newshape=[6, 5, 7]) /* ty=Tensor[(6, 5, 7), uint32] */;
  %106 = reshape(%103, newshape=[40]) /* ty=Tensor[(40), float32] */;
  %107 = @func_6165(%104, %105, %106) /* ty=(Tensor[(6, 5, 7), uint32], Tensor[(10, 4, 12), bool], Tensor[(40), float32], Tensor[(480), float32]) */;
  %108 = @func_2909() /* ty=Tensor[(450), bool] */;
  %109 = %107.3;
  %110 = @func_4219() /* ty=Tensor[(450), bool] */;
  (%108, %109, %var_6729, %var_6730, %var_6731, %110)
}

def @func_5973() -> Tensor[(450), float64] {
  %111 = @func_4438() /* ty=(Tensor[(450), float64],) */;
  %112 = %111.0;
  %113 = cast(%112, dtype="float64") /* ty=Tensor[(450), float64] */;
  log(%113) /* ty=Tensor[(450), float64] */
}

def @func_7077() -> (Tensor[(450), bool], Tensor[(210), float32], Tensor[(6, 5, 7), int16]) {
  %114 = @func_3589() /* ty=(Tensor[(450), bool],) */;
  %115 = cast(meta[relay.Constant][6] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %116 = reshape(%115, newshape=[6, 5, 7]) /* ty=Tensor[(6, 5, 7), float32] */;
  %117 = @func_3790(%116) /* ty=(Tensor[(6, 5, 7), float64],) */;
  %118 = %117.0;
  %119 = cast(%118, dtype="float32") /* ty=Tensor[(6, 5, 7), float32] */;
  %120 = rsqrt(%119) /* ty=Tensor[(6, 5, 7), float32] */;
  %121 = cast(%118, dtype="int16") /* ty=Tensor[(6, 5, 7), int16] */;
  %122 = shape_of(%120, dtype="int32") /* ty=Tensor[(3), int32] */;
  %123 = cast(%120, dtype="int16") /* ty=Tensor[(6, 5, 7), int16] */;
  %124 = dyn.reshape(%121, %122, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %125 = %114.0;
  %126 = left_shift(%123, %124) /* ty=Tensor[(6, 5, 7), int16] */;
  (%125, meta[relay.Constant][6] /* ty=Tensor[(210), float32] */, %126)
}

def @func_7540() -> Tensor[(7, 13, 7), float64] {
  %127 = @func_2410() /* ty=(Tensor[(7, 13, 7), float64],) */;
  %127.0
}

def @func_4219() -> Tensor[(450), bool] {
  @func_4183() /* ty=Tensor[(450), bool] */
}

def @func_2765() -> (Tensor[(7, 13, 7), float64], Tensor[(6, 10, 13), float32], Tensor[(780), float32]) {
  %128 = @func_2683() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(450), int8]) */;
  %129 = cast(meta[relay.Constant][7] /* ty=Tensor[(780), float32] */, dtype="float32") /* ty=Tensor[(780), float32] */;
  %130 = reshape(%129, newshape=[6, 10, 13]) /* ty=Tensor[(6, 10, 13), float32] */;
  %131 = @func_2302(%130) /* ty=(Tensor[(6, 10, 13), float32],) */;
  %132 = %128.0;
  %133 = %131.0;
  (%132, %133, meta[relay.Constant][7] /* ty=Tensor[(780), float32] */)
}

def @func_4675(%var_4655: Tensor[(15, 10, 3), float64]) -> (Tensor[(15, 10, 3), float64], Tensor[(12, 11, 2), float64], Tensor[(780), float32]) {
  %134 = cast(%var_4655, dtype="float64") /* ty=Tensor[(15, 10, 3), float64] */;
  %135 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(15, 10, 3), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %136 = cast(meta[relay.Constant][8] /* ty=Tensor[(15, 10, 3), float64] */, dtype="float64") /* ty=Tensor[(15, 10, 3), float64] */;
  %137 = dyn.reshape(%134, %135, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %138 = @func_2399() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(12, 11, 2), float64], Tensor[(132, 2), float32]) */;
  %139 = %138.1;
  %140 = cast(%139, dtype="float64") /* ty=Tensor[(12, 11, 2), float64] */;
  %141 = @func_3628() /* ty=(Tensor[(780), float32], Tensor[(450), int8]) */;
  %142 = divide(%136, %137) /* ty=Tensor[(15, 10, 3), float64] */;
  %143 = asinh(%140) /* ty=Tensor[(12, 11, 2), float64] */;
  %144 = %141.0;
  (%142, %143, %144)
}

def @func_7098() -> (Tensor[(450), int8],) {
  %145 = @func_5230() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(450), int8], Tensor[(450), int8]) */;
  %146 = %145.2;
  (%146,)
}

def @func_7495(%var_7450: Tensor[(1080), bool], %var_7451: Tensor[(1575, 1), int16]) -> (Tensor[(450), int8], Tensor[(210), float32], Tensor[(450), float32], Tensor[(1575, 450), int64], Tensor[(1575, 1080), uint64]) {
  %147 = @func_7077() /* ty=(Tensor[(450), bool], Tensor[(210), float32], Tensor[(6, 5, 7), int16]) */;
  %148 = cast(%var_7450, dtype="bool") /* ty=Tensor[(1080), bool] */;
  %149 = cast(%var_7451, dtype="int16") /* ty=Tensor[(1575, 1), int16] */;
  %150 = reshape(%148, newshape=[10, 9, 12]) /* ty=Tensor[(10, 9, 12), bool] */;
  %151 = reshape(%149, newshape=[105, 15]) /* ty=Tensor[(105, 15), int16] */;
  %152 = @func_1928(%150, %151) /* ty=(Tensor[(10, 9, 12), bool], Tensor[(5, 6, 15), float32], Tensor[(105, 15), int16], Tensor[(450), float32]) */;
  %153 = cast(%var_7451, dtype="float32") /* ty=Tensor[(1575, 1), float32] */;
  %154 = sqrt(%153) /* ty=Tensor[(1575, 1), float32] */;
  %155 = @func_2858() /* ty=Tensor[(450), bool] */;
  %156 = cast(%154, dtype="int64") /* ty=Tensor[(1575, 1), int64] */;
  %157 = cast(%155, dtype="int64") /* ty=Tensor[(450), int64] */;
  %158 = cast(%var_7450, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
  %159 = cast(%154, dtype="uint64") /* ty=Tensor[(1575, 1), uint64] */;
  %160 = @func_4128() /* ty=Tensor[(450), int8] */;
  %161 = %147.1;
  %162 = %152.3;
  %163 = bitwise_and(%156, %157) /* ty=Tensor[(1575, 450), int64] */;
  %164 = left_shift(%158, %159) /* ty=Tensor[(1575, 1080), uint64] */;
  (%160, %161, %162, %163, %164)
}

def @func_7650(%var_7646: Tensor[(256), float64]) -> (Tensor[(6, 10, 13), float32], Tensor[(220), float32], Tensor[(256), float64]) {
  %165 = @func_2765() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(6, 10, 13), float32], Tensor[(780), float32]) */;
  %166 = cast(%var_7646, dtype="float64") /* ty=Tensor[(256), float64] */;
  %167 = reshape(%166, newshape=[8, 8, 4]) /* ty=Tensor[(8, 8, 4), float64] */;
  %168 = @func_5578(%167) /* ty=(Tensor[(8, 8, 4), float64], Tensor[(22050), int16], Tensor[(220), float32], Tensor[(8, 8, 4), float64]) */;
  %169 = %165.1;
  %170 = %168.2;
  (%169, %170, %var_7646)
}

def @func_5003(%var_4990: Tensor[(234), float32]) -> (Tensor[(450), bool], Tensor[(6, 13, 3), float32], Tensor[(234), float32]) {
  %171 = @func_3181() /* ty=(Tensor[(450), bool],) */;
  %172 = cast(%var_4990, dtype="float32") /* ty=Tensor[(234), float32] */;
  %173 = reshape(%172, newshape=[6, 13, 3]) /* ty=Tensor[(6, 13, 3), float32] */;
  %174 = @func_1401(%173) /* ty=(Tensor[(6, 13, 3), float32],) */;
  %175 = %171.0;
  %176 = %174.0;
  (%175, %176, %var_4990)
}

def @func_3941() -> (Tensor[(450), bool], Tensor[(450), bool]) {
  %177 = @func_3181() /* ty=(Tensor[(450), bool],) */;
  %178 = @func_2909() /* ty=Tensor[(450), bool] */;
  %179 = %177.0;
  (%178, %179)
}

def @func_7887() -> Tensor[(7, 13, 7), float64] {
  %180 = @func_4852() /* ty=(Tensor[(7, 13, 7), float64],) */;
  %180.0
}

def @func_4852() -> (Tensor[(7, 13, 7), float64],) {
  %181 = @func_2399() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(12, 11, 2), float64], Tensor[(132, 2), float32]) */;
  %182 = %181.0;
  (%182,)
}

def @func_3092(%var_3073: Tensor[(450), int8]) -> (Tensor[(450), float32], Tensor[(450), bool]) {
  %183 = @func_2791() /* ty=(Tensor[(450), int8],) */;
  %184 = %183.0;
  %185 = cast(%var_3073, dtype="float32") /* ty=Tensor[(450), float32] */;
  %186 = shape_of(%184, dtype="int32") /* ty=Tensor[(1), int32] */;
  %187 = cast(%184, dtype="float32") /* ty=Tensor[(450), float32] */;
  %188 = dyn.reshape(%185, %186, newshape=[]) /* ty=Tensor[(?), float32] */;
  %189 = floor_divide(%187, %188) /* ty=Tensor[(450), float32] */;
  %190 = @func_2858() /* ty=Tensor[(450), bool] */;
  (%189, %190)
}

def @func_728(%var_644: Tensor[(7, 15, 15), int16], %var_656: Tensor[(1, 450), float32]) -> (Tensor[(7, 15, 15), int16], Tensor[(5, 6, 15), float32], Tensor[(?, 450), uint64], Tensor[(5, 6, 15), float32], Tensor[(?, 450), int16]) {
  %191 = cast(meta[relay.Constant][9] /* ty=Tensor[(7, 15, 15), int16] */, dtype="int16") /* ty=Tensor[(7, 15, 15), int16] */;
  %192 = shape_of(%var_644, dtype="int32") /* ty=Tensor[(3), int32] */;
  %193 = cast(%var_644, dtype="int16") /* ty=Tensor[(7, 15, 15), int16] */;
  %194 = dyn.reshape(%191, %192, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %195 = cast(%var_656, dtype="float32") /* ty=Tensor[(1, 450), float32] */;
  %196 = reshape(%195, newshape=[5, 6, 15]) /* ty=Tensor[(5, 6, 15), float32] */;
  %197 = cast(%var_656, dtype="float32") /* ty=Tensor[(1, 450), float32] */;
  %198 = acos(%197) /* ty=Tensor[(1, 450), float32] */;
  %199 = cast(%198, dtype="float32") /* ty=Tensor[(1, 450), float32] */;
  %200 = sin(%199) /* ty=Tensor[(1, 450), float32] */;
  %201 = cast(%200, dtype="float64") /* ty=Tensor[(1, 450), float64] */;
  %202 = asin(%201) /* ty=Tensor[(1, 450), float64] */;
  %203 = cast(%198, dtype="float32") /* ty=Tensor[(1, 450), float32] */;
  %204 = reshape(%203, newshape=[5, 6, 15]) /* ty=Tensor[(5, 6, 15), float32] */;
  %205 = @func_166(%204) /* ty=Tensor[(5, 6, 15), float32] */;
  %206 = cast(%205, dtype="uint64") /* ty=Tensor[(5, 6, 15), uint64] */;
  %207 = shape_of(%202, dtype="int32") /* ty=Tensor[(2), int32] */;
  %208 = cast(%202, dtype="uint64") /* ty=Tensor[(1, 450), uint64] */;
  %209 = dyn.reshape(%206, %207, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %210 = @func_166(%196) /* ty=Tensor[(5, 6, 15), float32] */;
  %211 = cast(%210, dtype="float32") /* ty=Tensor[(5, 6, 15), float32] */;
  %212 = reshape(%211, newshape=[5, 6, 15]) /* ty=Tensor[(5, 6, 15), float32] */;
  %213 = cast(%202, dtype="float64") /* ty=Tensor[(1, 450), float64] */;
  %214 = atanh(%213) /* ty=Tensor[(1, 450), float64] */;
  %215 = cast(%200, dtype="int16") /* ty=Tensor[(1, 450), int16] */;
  %216 = shape_of(%214, dtype="int32") /* ty=Tensor[(2), int32] */;
  %217 = cast(%214, dtype="int16") /* ty=Tensor[(1, 450), int16] */;
  %218 = dyn.reshape(%215, %216, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %219 = right_shift(%193, %194) /* ty=Tensor[(7, 15, 15), int16] */;
  %220 = add(%208, %209) /* ty=Tensor[(?, 450), uint64] */;
  %221 = @func_166(%212) /* ty=Tensor[(5, 6, 15), float32] */;
  %222 = bitwise_and(%217, %218) /* ty=Tensor[(?, 450), int16] */;
  (%219, %210, %220, %221, %222)
}

def @func_2073(%var_2043: Tensor[(6, 1, 13), uint8], %var_2059: Tensor[(1575), int16]) -> (Tensor[(6, 4, 13), bool], Tensor[(5, 6, 15), float32], Tensor[(450), float32], Tensor[(5, 6, 15), float32], Tensor[(1080), bool], Tensor[(1575), int16], Tensor[(6, ?, 13), float32]) {
  %223 = cast(%var_2043, dtype="bool") /* ty=Tensor[(6, 1, 13), bool] */;
  %224 = cast(meta[relay.Constant][10] /* ty=Tensor[(6, 4, 13), uint8] */, dtype="bool") /* ty=Tensor[(6, 4, 13), bool] */;
  %225 = cast(meta[relay.Constant][11] /* ty=Tensor[(450), float32] */, dtype="float32") /* ty=Tensor[(450), float32] */;
  %226 = reshape(%225, newshape=[5, 6, 15]) /* ty=Tensor[(5, 6, 15), float32] */;
  %227 = cast(meta[relay.Constant][12] /* ty=Tensor[(1080), bool] */, dtype="bool") /* ty=Tensor[(1080), bool] */;
  %228 = cast(%var_2059, dtype="int16") /* ty=Tensor[(1575), int16] */;
  %229 = reshape(%227, newshape=[10, 9, 12]) /* ty=Tensor[(10, 9, 12), bool] */;
  %230 = reshape(%228, newshape=[105, 15]) /* ty=Tensor[(105, 15), int16] */;
  %231 = @func_1928(%229, %230) /* ty=(Tensor[(10, 9, 12), bool], Tensor[(5, 6, 15), float32], Tensor[(105, 15), int16], Tensor[(450), float32]) */;
  %232 = cast(meta[relay.Constant][13] /* ty=Tensor[(6, 1, 13), uint8] */, dtype="float32") /* ty=Tensor[(6, 1, 13), float32] */;
  %233 = shape_of(%var_2043, dtype="int32") /* ty=Tensor[(3), int32] */;
  %234 = cast(%var_2043, dtype="float32") /* ty=Tensor[(6, 1, 13), float32] */;
  %235 = dyn.reshape(%232, %233, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %236 = greater(%223, %224) /* ty=Tensor[(6, 4, 13), bool] */;
  %237 = @func_166(%226) /* ty=Tensor[(5, 6, 15), float32] */;
  %238 = %231.1;
  %239 = maximum(%234, %235) /* ty=Tensor[(6, ?, 13), float32] */;
  (%236, %237, meta[relay.Constant][11] /* ty=Tensor[(450), float32] */, %238, meta[relay.Constant][12] /* ty=Tensor[(1080), bool] */, %var_2059, %239)
}

def @func_3790(%var_3763: Tensor[(6, 5, 7), float32]) -> (Tensor[(6, 5, 7), float64],) {
  %240 = cast(%var_3763, dtype="float32") /* ty=Tensor[(6, 5, 7), float32] */;
  %241 = log10(%240) /* ty=Tensor[(6, 5, 7), float32] */;
  %242 = cast(%241, dtype="float64") /* ty=Tensor[(6, 5, 7), float64] */;
  %243 = asin(%242) /* ty=Tensor[(6, 5, 7), float64] */;
  (%243,)
}

def @func_5041(%var_5036: Tensor[(8, 9, 7), float64], %var_5037: Tensor[(8, 9, 7), float64]) -> (Tensor[(8, 9, 7), float64],) {
  %244 = cast(%var_5037, dtype="float64") /* ty=Tensor[(8, 9, 7), float64] */;
  %245 = shape_of(%var_5036, dtype="int32") /* ty=Tensor[(3), int32] */;
  %246 = cast(%var_5036, dtype="float64") /* ty=Tensor[(8, 9, 7), float64] */;
  %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %248 = floor_divide(%246, %247) /* ty=Tensor[(8, 9, 7), float64] */;
  (%248,)
}

def @func_5230() -> (Tensor[(7, 13, 7), float64], Tensor[(450), int8], Tensor[(450), int8]) {
  %249 = @func_3553() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(450), bool]) */;
  %250 = @func_3628() /* ty=(Tensor[(780), float32], Tensor[(450), int8]) */;
  %251 = @func_4499() /* ty=(Tensor[(450), int8],) */;
  %252 = %249.0;
  %253 = %250.1;
  %254 = %251.0;
  (%252, %253, %254)
}

def @func_1983(%var_1977: Tensor[(12, 11, 2), float32]) -> Tensor[(12, 11, 2), float64] {
  %255 = cast(%var_1977, dtype="float32") /* ty=Tensor[(12, 11, 2), float32] */;
  %256 = sinh(%255) /* ty=Tensor[(12, 11, 2), float32] */;
  %257 = cast(%256, dtype="float64") /* ty=Tensor[(12, 11, 2), float64] */;
  exp(%257) /* ty=Tensor[(12, 11, 2), float64] */
}

def @main(%var_7890: Tensor[(9, 14, 7), float32], %var_7891: Tensor[(9, 14, 7), float32]) -> (Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), float64]) {
  %258 = cast(%var_7891, dtype="float32") /* ty=Tensor[(9, 14, 7), float32] */;
  %259 = shape_of(%var_7890, dtype="int32") /* ty=Tensor[(3), int32] */;
  %260 = cast(%var_7890, dtype="float32") /* ty=Tensor[(9, 14, 7), float32] */;
  %261 = dyn.reshape(%258, %259, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %262 = cast(%var_7891, dtype="float64") /* ty=Tensor[(9, 14, 7), float64] */;
  %263 = power(%260, %261) /* ty=Tensor[(9, 14, 7), float32] */;
  %264 = tan(%262) /* ty=Tensor[(9, 14, 7), float64] */;
  (%263, %264)
}

def @func_5884(%var_5877: Tensor[(16, 13, 1), int8]) -> Tensor[(16, 13, 10), int8] {
  %265 = cast(%var_5877, dtype="int8") /* ty=Tensor[(16, 13, 1), int8] */;
  %266 = cast(meta[relay.Constant][14] /* ty=Tensor[(16, 13, 10), int8] */, dtype="int8") /* ty=Tensor[(16, 13, 10), int8] */;
  maximum(%265, %266) /* ty=Tensor[(16, 13, 10), int8] */
}

def @func_5268() -> Tensor[(7, 13, 7), float64] {
  %267 = @func_5131() /* ty=(Tensor[(7, 13, 7), float64],) */;
  %267.0
}

def @func_3258() -> (Tensor[(7, 13, 7), float64], Tensor[(7, 13, 7), float64]) {
  %268 = @func_3148() /* ty=(Tensor[(450), bool], Tensor[(7, 13, 7), float64], Tensor[(132, 2), float64], Tensor[(132, 2), float64], Tensor[(7, 13, 7), float64]) */;
  %269 = @func_3148() /* ty=(Tensor[(450), bool], Tensor[(7, 13, 7), float64], Tensor[(132, 2), float64], Tensor[(132, 2), float64], Tensor[(7, 13, 7), float64]) */;
  %270 = %268.4;
  %271 = %269.4;
  (%270, %271)
}

def @func_3825() -> Tensor[(7, 13, 7), float64] {
  %272 = @func_2198() /* ty=(Tensor[(7, 13, 7), float64],) */;
  %273 = %272.0;
  %274 = cast(%273, dtype="float32") /* ty=Tensor[(7, 13, 7), float32] */;
  %275 = atan(%274) /* ty=Tensor[(7, 13, 7), float32] */;
  %276 = cast(%275, dtype="float64") /* ty=Tensor[(7, 13, 7), float64] */;
  %277 = shape_of(%273, dtype="int32") /* ty=Tensor[(3), int32] */;
  %278 = cast(%273, dtype="float64") /* ty=Tensor[(7, 13, 7), float64] */;
  %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%278, %279) /* ty=Tensor[(7, 13, 7), float64] */
}

def @func_3558() -> Tensor[(450), int8] {
  %280 = @func_2683() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(450), int8]) */;
  %280.1
}

def @func_4183() -> Tensor[(450), bool] {
  @func_2909() /* ty=Tensor[(450), bool] */
}

def @func_2399() -> (Tensor[(7, 13, 7), float64], Tensor[(12, 11, 2), float64], Tensor[(132, 2), float32]) {
  %281 = @func_2198() /* ty=(Tensor[(7, 13, 7), float64],) */;
  %282 = cast(meta[relay.Constant][15] /* ty=Tensor[(132, 2), float32] */, dtype="float32") /* ty=Tensor[(132, 2), float32] */;
  %283 = reshape(%282, newshape=[12, 11, 2]) /* ty=Tensor[(12, 11, 2), float32] */;
  %284 = %281.0;
  %285 = @func_1983(%283) /* ty=Tensor[(12, 11, 2), float64] */;
  (%284, %285, meta[relay.Constant][15] /* ty=Tensor[(132, 2), float32] */)
}

def @func_4438() -> (Tensor[(450), float64],) {
  %286 = @func_2791() /* ty=(Tensor[(450), int8],) */;
  %287 = %286.0;
  %288 = cast(meta[relay.Constant][16] /* ty=Tensor[(450), int8] */, dtype="float64") /* ty=Tensor[(450), float64] */;
  %289 = shape_of(%287, dtype="int32") /* ty=Tensor[(1), int32] */;
  %290 = cast(%287, dtype="float64") /* ty=Tensor[(450), float64] */;
  %291 = dyn.reshape(%288, %289, newshape=[]) /* ty=Tensor[(?), float64] */;
  %292 = mod(%290, %291) /* ty=Tensor[(450), float64] */;
  (%292,)
}

def @func_7004() -> Tensor[(780), float32] {
  %293 = @func_3193() /* ty=(Tensor[(780), float32],) */;
  %293.0
}

def @func_2791() -> (Tensor[(450), int8],) {
  %294 = @func_2683() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(450), int8]) */;
  %295 = %294.1;
  (%295,)
}

def @func_3628() -> (Tensor[(780), float32], Tensor[(450), int8]) {
  %296 = @func_3193() /* ty=(Tensor[(780), float32],) */;
  %297 = @func_2683() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(450), int8]) */;
  %298 = %296.0;
  %299 = %297.1;
  (%298, %299)
}

def @func_7023() -> (Tensor[(132, 2), float64],) {
  %300 = @func_3148() /* ty=(Tensor[(450), bool], Tensor[(7, 13, 7), float64], Tensor[(132, 2), float64], Tensor[(132, 2), float64], Tensor[(7, 13, 7), float64]) */;
  %301 = %300.3;
  (%301,)
}

def @func_5294() -> (Tensor[(450), bool], Tensor[(7, 13, 7), float64]) {
  %302 = @func_4219() /* ty=Tensor[(450), bool] */;
  %303 = @func_5268() /* ty=Tensor[(7, 13, 7), float64] */;
  (%302, %303)
}

def @func_6063() -> Tensor[(16, 2, 12), float64] {
  %304 = @func_4335() /* ty=(Tensor[(450), int8], Tensor[(16, 2, 12), uint32], Tensor[(384), uint32]) */;
  %305 = %304.1;
  %306 = cast(%305, dtype="float64") /* ty=Tensor[(16, 2, 12), float64] */;
  exp(%306) /* ty=Tensor[(16, 2, 12), float64] */
}

def @func_7624() -> Tensor[(450), bool] {
  %307 = @func_6126() /* ty=(Tensor[(450), bool], Tensor[(450), bool]) */;
  %307.0
}

def @func_4063() -> (Tensor[(450), int8],) {
  %308 = @func_2791() /* ty=(Tensor[(450), int8],) */;
  %309 = %308.0;
  (%309,)
}

def @func_4415() -> Tensor[(780), float32] {
  @func_4237() /* ty=Tensor[(780), float32] */
}

def @func_3589() -> (Tensor[(450), bool],) {
  %310 = @func_3181() /* ty=(Tensor[(450), bool],) */;
  %311 = %310.0;
  (%311,)
}

def @func_5438() -> (Tensor[(450), float64], Tensor[(7, 13, 7), int32], Tensor[(7, 15, 15), int16], Tensor[(1575), int16]) {
  %312 = @func_4438() /* ty=(Tensor[(450), float64],) */;
  %313 = @func_3430() /* ty=Tensor[(7, 13, 7), float64] */;
  %314 = cast(%313, dtype="float64") /* ty=Tensor[(7, 13, 7), float64] */;
  %315 = erf(%314) /* ty=Tensor[(7, 13, 7), float64] */;
  %316 = cast(%315, dtype="int32") /* ty=Tensor[(7, 13, 7), int32] */;
  %317 = shape_of(%313, dtype="int32") /* ty=Tensor[(3), int32] */;
  %318 = cast(%313, dtype="int32") /* ty=Tensor[(7, 13, 7), int32] */;
  %319 = dyn.reshape(%316, %317, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %320 = cast(meta[relay.Constant][17] /* ty=Tensor[(1575), int16] */, dtype="int16") /* ty=Tensor[(1575), int16] */;
  %321 = %312.0;
  %322 = cast(%321, dtype="float32") /* ty=Tensor[(450), float32] */;
  %323 = reshape(%320, newshape=[7, 15, 15]) /* ty=Tensor[(7, 15, 15), int16] */;
  %324 = reshape(%322, newshape=[1, 450]) /* ty=Tensor[(1, 450), float32] */;
  %325 = @func_728(%323, %324) /* ty=(Tensor[(7, 15, 15), int16], Tensor[(5, 6, 15), float32], Tensor[(?, 450), uint64], Tensor[(5, 6, 15), float32], Tensor[(?, 450), int16]) */;
  %326 = bitwise_and(%318, %319) /* ty=Tensor[(7, 13, 7), int32] */;
  %327 = %325.0;
  (%321, %326, %327, meta[relay.Constant][17] /* ty=Tensor[(1575), int16] */)
}

def @func_5131() -> (Tensor[(7, 13, 7), float64],) {
  %328 = @func_3258() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(7, 13, 7), float64]) */;
  %329 = %328.1;
  (%329,)
}

def @func_3718() -> (Tensor[(450), int8], Tensor[(7, 13, 7), float32]) {
  %330 = @func_2683() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(450), int8]) */;
  %331 = %330.0;
  %332 = cast(%331, dtype="float32") /* ty=Tensor[(7, 13, 7), float32] */;
  %333 = @func_3558() /* ty=Tensor[(450), int8] */;
  %334 = cosh(%332) /* ty=Tensor[(7, 13, 7), float32] */;
  (%333, %334)
}

def @func_6038() -> (Tensor[(450), float64], Tensor[(7, 13, 7), float64], Tensor[(450), bool], Tensor[(5, 6, 15), float64]) {
  %335 = @func_4438() /* ty=(Tensor[(450), float64],) */;
  %336 = @func_4624() /* ty=(Tensor[(7, 13, 7), float64],) */;
  %337 = %335.0;
  %338 = cast(%337, dtype="float32") /* ty=Tensor[(450), float32] */;
  %339 = reshape(%338, newshape=[5, 6, 15]) /* ty=Tensor[(5, 6, 15), float32] */;
  %340 = @func_166(%339) /* ty=Tensor[(5, 6, 15), float32] */;
  %341 = cast(%340, dtype="float64") /* ty=Tensor[(5, 6, 15), float64] */;
  %342 = %336.0;
  %343 = @func_2909() /* ty=Tensor[(450), bool] */;
  %344 = acos(%341) /* ty=Tensor[(5, 6, 15), float64] */;
  (%337, %342, %343, %344)
}

def @func_5578(%var_5554: Tensor[(8, 8, 4), float64]) -> (Tensor[(8, 8, 4), float64], Tensor[(22050), int16], Tensor[(220), float32], Tensor[(8, 8, 4), float64]) {
  %345 = @func_4114() /* ty=(Tensor[(450), bool], Tensor[(8, 8, 4), float64]) */;
  %346 = %345.1;
  %347 = cast(%var_5554, dtype="float64") /* ty=Tensor[(8, 8, 4), float64] */;
  %348 = shape_of(%346, dtype="int32") /* ty=Tensor[(3), int32] */;
  %349 = cast(%346, dtype="float64") /* ty=Tensor[(8, 8, 4), float64] */;
  %350 = dyn.reshape(%347, %348, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %351 = cast(meta[relay.Constant][18] /* ty=Tensor[(220), float32] */, dtype="float32") /* ty=Tensor[(220), float32] */;
  %352 = reshape(%351, newshape=[220]) /* ty=Tensor[(220), float32] */;
  %353 = @func_5182(%352) /* ty=(Tensor[(7, 13, 7), float64], Tensor[(5, 4, 11), float32], Tensor[(220), float32], Tensor[(22050), int16]) */;
  %354 = cast(%var_5554, dtype="float64") /* ty=Tensor[(8, 8, 4), float64] */;
  %355 = divide(%349, %350) /* ty=Tensor[(8, 8, 4), float64] */;
  %356 = %353.3;
  %357 = rsqrt(%354) /* ty=Tensor[(8, 8, 4), float64] */;
  (%355, %356, meta[relay.Constant][18] /* ty=Tensor[(220), float32] */, %357)
}

def @func_5664(%var_5644: Tensor[(5, 315), int16]) -> (Tensor[(?, 450), int16], Tensor[(5, 315), int16], Tensor[(450), float32], Tensor[(7, 13, 7), bool]) {
  %358 = cast(%var_5644, dtype="int16") /* ty=Tensor[(5, 315), int16] */;
  %359 = cast(meta[relay.Constant][19] /* ty=Tensor[(450), float32] */, dtype="float32") /* ty=Tensor[(450), float32] */;
  %360 = reshape(%358, newshape=[7, 15, 15]) /* ty=Tensor[(7, 15, 15), int16] */;
  %361 = reshape(%359, newshape=[1, 450]) /* ty=Tensor[(1, 450), float32] */;
  %362 = @func_728(%360, %361) /* ty=(Tensor[(7, 15, 15), int16], Tensor[(5, 6, 15), float32], Tensor[(?, 450), uint64], Tensor[(5, 6, 15), float32], Tensor[(?, 450), int16]) */;
  %363 = @func_3825() /* ty=Tensor[(7, 13, 7), float64] */;
  %364 = cast(%363, dtype="float64") /* ty=Tensor[(7, 13, 7), float64] */;
  %365 = log(%364) /* ty=Tensor[(7, 13, 7), float64] */;
  %366 = cast(%363, dtype="bool") /* ty=Tensor[(7, 13, 7), bool] */;
  %367 = shape_of(%365, dtype="int32") /* ty=Tensor[(3), int32] */;
  %368 = cast(%365, dtype="bool") /* ty=Tensor[(7, 13, 7), bool] */;
  %369 = dyn.reshape(%366, %367, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %370 = %362.4;
  %371 = logical_and(%368, %369) /* ty=Tensor[(7, 13, 7), bool] */;
  (%370, %var_5644, meta[relay.Constant][19] /* ty=Tensor[(450), float32] */, %371)
}

def @func_7184(%var_7164: Tensor[(7, 13, 7), float64], %var_7174: Tensor[(1, 378), float32], %var_7180: Tensor[(728), uint8], %var_7182: Tensor[(50, 9), float32]) -> (Tensor[(7, 13, 7), float32], Tensor[(6, 9, 7), bool], Tensor[(1, 378), float32], Tensor[(?, 450), uint64], Tensor[(728), uint8], Tensor[(1575), int16], Tensor[(50, 9), float32]) {
  %372 = @func_4852() /* ty=(Tensor[(7, 13, 7), float64],) */;
  %373 = %372.0;
  %374 = cast(%var_7164, dtype="float64") /* ty=Tensor[(7, 13, 7), float64] */;
  %375 = shape_of(%373, dtype="int32") /* ty=Tensor[(3), int32] */;
  %376 = cast(%373, dtype="float64") /* ty=Tensor[(7, 13, 7), float64] */;
  %377 = dyn.reshape(%374, %375, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %378 = floor_mod(%376, %377) /* ty=Tensor[(7, 13, 7), float64] */;
  %379 = cast(%378, dtype="float32") /* ty=Tensor[(7, 13, 7), float32] */;
  %380 = cast(%var_7174, dtype="float32") /* ty=Tensor[(1, 378), float32] */;
  %381 = reshape(%380, newshape=[6, 9, 7]) /* ty=Tensor[(6, 9, 7), float32] */;
  %382 = cast(%var_7180, dtype="uint8") /* ty=Tensor[(728), uint8] */;
  %383 = cast(meta[relay.Constant][20] /* ty=Tensor[(1575), int16] */, dtype="int16") /* ty=Tensor[(1575), int16] */;
  %384 = cast(%var_7182, dtype="float32") /* ty=Tensor[(50, 9), float32] */;
  %385 = reshape(%382, newshape=[8, 7, 13]) /* ty=Tensor[(8, 7, 13), uint8] */;
  %386 = reshape(%383, newshape=[1575]) /* ty=Tensor[(1575), int16] */;
  %387 = reshape(%384, newshape=[450]) /* ty=Tensor[(450), float32] */;
  %388 = @func_1666(%385, %386, %387) /* ty=(Tensor[(8, 7, 13), uint8], Tensor[(?, 450), int16], Tensor[(1575), int16], Tensor[(450), float32], Tensor[(?, 450), uint64], Tensor[(?, 450), uint64]) */;
  %389 = cos(%379) /* ty=Tensor[(7, 13, 7), float32] */;
  %390 = @func_4275(%381) /* ty=Tensor[(6, 9, 7), bool] */;
  %391 = %388.5;
  (%389, %390, %var_7174, %391, %var_7180, meta[relay.Constant][20] /* ty=Tensor[(1575), int16] */, %var_7182)
}

def @func_2909() -> Tensor[(450), bool] {
  @func_2858() /* ty=Tensor[(450), bool] */
}

def @func_3430() -> Tensor[(7, 13, 7), float64] {
  %392 = @func_3258() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(7, 13, 7), float64]) */;
  %392.0
}

def @func_3193() -> (Tensor[(780), float32],) {
  %393 = @func_2765() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(6, 10, 13), float32], Tensor[(780), float32]) */;
  %394 = %393.2;
  (%394,)
}

def @func_4863() -> Tensor[(780), float32] {
  %395 = @func_3359() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(780), float32]) */;
  %395.1
}

def @func_7409(%var_7401: Tensor[(1, 15, 12), int32]) -> (Tensor[(2, 15, 12), int32],) {
  %396 = cast(%var_7401, dtype="int32") /* ty=Tensor[(1, 15, 12), int32] */;
  %397 = cast(meta[relay.Constant][21] /* ty=Tensor[(2, 15, 12), int32] */, dtype="int32") /* ty=Tensor[(2, 15, 12), int32] */;
  %398 = bitwise_or(%396, %397) /* ty=Tensor[(2, 15, 12), int32] */;
  (%398,)
}

def @func_4335() -> (Tensor[(450), int8], Tensor[(16, 2, 12), uint32], Tensor[(384), uint32]) {
  %399 = cast(meta[relay.Constant][22] /* ty=Tensor[(384), uint32] */, dtype="uint32") /* ty=Tensor[(384), uint32] */;
  %400 = reshape(%399, newshape=[16, 2, 12]) /* ty=Tensor[(16, 2, 12), uint32] */;
  %401 = @func_3558() /* ty=Tensor[(450), int8] */;
  %402 = @func_2580(%400) /* ty=Tensor[(16, 2, 12), uint32] */;
  (%401, %402, meta[relay.Constant][22] /* ty=Tensor[(384), uint32] */)
}

def @func_6196() -> (Tensor[(450), bool],) {
  %403 = @func_3506() /* ty=Tensor[(450), bool] */;
  (%403,)
}

def @func_7200() -> Tensor[(11, 15, 2), float64] {
  %404 = cast(meta[relay.Constant][23] /* ty=Tensor[(11, 15, 2), float64] */, dtype="float64") /* ty=Tensor[(11, 15, 2), float64] */;
  sqrt(%404) /* ty=Tensor[(11, 15, 2), float64] */
}

def @func_7281() -> (Tensor[(7, 13, 7), float64],) {
  %405 = @func_3430() /* ty=Tensor[(7, 13, 7), float64] */;
  (%405,)
}

def @func_4624() -> (Tensor[(7, 13, 7), float64],) {
  %406 = @func_3359() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(780), float32]) */;
  %407 = %406.0;
  (%407,)
}

def @func_2198() -> (Tensor[(7, 13, 7), float64],) {
  %408 = cast(meta[relay.Constant][24] /* ty=Tensor[(7, 13, 7), float64] */, dtype="float64") /* ty=Tensor[(7, 13, 7), float64] */;
  %409 = asin(%408) /* ty=Tensor[(7, 13, 7), float64] */;
  (%409,)
}

def @func_4144() -> (Tensor[(450), bool],) {
  %410 = @func_2909() /* ty=Tensor[(450), bool] */;
  (%410,)
}

def @func_3553() -> (Tensor[(7, 13, 7), float64], Tensor[(450), bool]) {
  %411 = @func_3258() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(7, 13, 7), float64]) */;
  %412 = @func_3181() /* ty=(Tensor[(450), bool],) */;
  %413 = %411.1;
  %414 = %412.0;
  (%413, %414)
}

def @func_2410() -> (Tensor[(7, 13, 7), float64],) {
  %415 = @func_2399() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(12, 11, 2), float64], Tensor[(132, 2), float32]) */;
  %416 = %415.0;
  (%416,)
}

def @func_3506() -> Tensor[(450), bool] {
  %417 = @func_3181() /* ty=(Tensor[(450), bool],) */;
  %417.0
}

def @func_2540(%var_2512: Tensor[(5, 4, 11), float32], %var_2513: Tensor[(5, 4, 11), float32], %var_2524: Tensor[(14, 1575), int16], %var_2533: Tensor[(14, 1575), uint64]) -> (Tensor[(5, 4, 11), float32], Tensor[(1575), int16], Tensor[(78), uint8], Tensor[(132, 2), float32], Tensor[(14, 1575), float32]) {
  %418 = cast(%var_2513, dtype="float32") /* ty=Tensor[(5, 4, 11), float32] */;
  %419 = shape_of(%var_2512, dtype="int32") /* ty=Tensor[(3), int32] */;
  %420 = cast(%var_2512, dtype="float32") /* ty=Tensor[(5, 4, 11), float32] */;
  %421 = dyn.reshape(%418, %419, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %422 = cast(meta[relay.Constant][25] /* ty=Tensor[(78), uint8] */, dtype="uint8") /* ty=Tensor[(78), uint8] */;
  %423 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 1575), int16] */, dtype="int16") /* ty=Tensor[(1, 1575), int16] */;
  %424 = reshape(%422, newshape=[6, 1, 13]) /* ty=Tensor[(6, 1, 13), uint8] */;
  %425 = reshape(%423, newshape=[1575]) /* ty=Tensor[(1575), int16] */;
  %426 = @func_2073(%424, %425) /* ty=(Tensor[(6, 4, 13), bool], Tensor[(5, 6, 15), float32], Tensor[(450), float32], Tensor[(5, 6, 15), float32], Tensor[(1080), bool], Tensor[(1575), int16], Tensor[(6, ?, 13), float32]) */;
  %427 = @func_2399() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(12, 11, 2), float64], Tensor[(132, 2), float32]) */;
  %428 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 1575), int16] */, dtype="uint64") /* ty=Tensor[(1, 1575), uint64] */;
  %429 = cast(%var_2524, dtype="uint64") /* ty=Tensor[(14, 1575), uint64] */;
  %430 = minimum(%428, %429) /* ty=Tensor[(14, 1575), uint64] */;
  %431 = cast(%var_2533, dtype="float32") /* ty=Tensor[(14, 1575), float32] */;
  %432 = shape_of(%430, dtype="int32") /* ty=Tensor[(2), int32] */;
  %433 = cast(%430, dtype="float32") /* ty=Tensor[(14, 1575), float32] */;
  %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %435 = subtract(%420, %421) /* ty=Tensor[(5, 4, 11), float32] */;
  %436 = %426.5;
  %437 = %427.2;
  %438 = floor_mod(%433, %434) /* ty=Tensor[(14, 1575), float32] */;
  (%435, %436, meta[relay.Constant][25] /* ty=Tensor[(78), uint8] */, %437, %438)
}

def @func_3021(%var_2969: Tensor[(12, 11, 2), float64]) -> (Tensor[(7, 13, 7), float64], Tensor[(1575), int16], Tensor[(12, 11, 2), bool], Tensor[(1080), float64], Tensor[(5, 6, 15), float32], Tensor[(?, 450), int16], Tensor[(12, 11, 2), int32]) {
  %439 = cast(meta[relay.Constant][27] /* ty=Tensor[(1080), bool] */, dtype="bool") /* ty=Tensor[(1080), bool] */;
  %440 = cast(meta[relay.Constant][28] /* ty=Tensor[(1575), int16] */, dtype="int16") /* ty=Tensor[(1575), int16] */;
  %441 = reshape(%439, newshape=[1080]) /* ty=Tensor[(1080), bool] */;
  %442 = reshape(%440, newshape=[15, 105]) /* ty=Tensor[(15, 105), int16] */;
  %443 = @func_2632(%441, %442) /* ty=(Tensor[(132, 2), float32], Tensor[(7, 13, 7), float64], Tensor[(5, 6, 15), float32], Tensor[(1080), bool], Tensor[(15, 105), int16]) */;
  %444 = @func_2399() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(12, 11, 2), float64], Tensor[(132, 2), float32]) */;
  %445 = %444.1;
  %446 = cast(%var_2969, dtype="bool") /* ty=Tensor[(12, 11, 2), bool] */;
  %447 = shape_of(%445, dtype="int32") /* ty=Tensor[(3), int32] */;
  %448 = cast(%445, dtype="bool") /* ty=Tensor[(12, 11, 2), bool] */;
  %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %450 = cast(meta[relay.Constant][27] /* ty=Tensor[(1080), bool] */, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %451 = cast(meta[relay.Constant][27] /* ty=Tensor[(1080), bool] */, dtype="bool") /* ty=Tensor[(1080), bool] */;
  %452 = cast(meta[relay.Constant][28] /* ty=Tensor[(1575), int16] */, dtype="int16") /* ty=Tensor[(1575), int16] */;
  %453 = reshape(%451, newshape=[10, 9, 12]) /* ty=Tensor[(10, 9, 12), bool] */;
  %454 = reshape(%452, newshape=[105, 15]) /* ty=Tensor[(105, 15), int16] */;
  %455 = @func_1928(%453, %454) /* ty=(Tensor[(10, 9, 12), bool], Tensor[(5, 6, 15), float32], Tensor[(105, 15), int16], Tensor[(450), float32]) */;
  %456 = cast(meta[relay.Constant][28] /* ty=Tensor[(1575), int16] */, dtype="int16") /* ty=Tensor[(1575), int16] */;
  %457 = %455.1;
  %458 = cast(%457, dtype="float32") /* ty=Tensor[(5, 6, 15), float32] */;
  %459 = reshape(%456, newshape=[7, 15, 15]) /* ty=Tensor[(7, 15, 15), int16] */;
  %460 = reshape(%458, newshape=[1, 450]) /* ty=Tensor[(1, 450), float32] */;
  %461 = @func_728(%459, %460) /* ty=(Tensor[(7, 15, 15), int16], Tensor[(5, 6, 15), float32], Tensor[(?, 450), uint64], Tensor[(5, 6, 15), float32], Tensor[(?, 450), int16]) */;
  %462 = cast(%var_2969, dtype="float64") /* ty=Tensor[(12, 11, 2), float64] */;
  %463 = log2(%462) /* ty=Tensor[(12, 11, 2), float64] */;
  %464 = cast(%445, dtype="int32") /* ty=Tensor[(12, 11, 2), int32] */;
  %465 = shape_of(%463, dtype="int32") /* ty=Tensor[(3), int32] */;
  %466 = cast(%463, dtype="int32") /* ty=Tensor[(12, 11, 2), int32] */;
  %467 = dyn.reshape(%464, %465, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %468 = %443.1;
  %469 = logical_and(%448, %449) /* ty=Tensor[(12, 11, 2), bool] */;
  %470 = log10(%450) /* ty=Tensor[(1080), float64] */;
  %471 = %461.4;
  %472 = left_shift(%466, %467) /* ty=Tensor[(12, 11, 2), int32] */;
  (%468, meta[relay.Constant][28] /* ty=Tensor[(1575), int16] */, %469, %470, %457, %471, %472)
}

def @func_4237() -> Tensor[(780), float32] {
  %473 = @func_3628() /* ty=(Tensor[(780), float32], Tensor[(450), int8]) */;
  %473.0
}

def @func_4739(%var_4704: Tensor[(16, 2, 12), uint32]) -> (Tensor[(16, 2, 12), float64], Tensor[(16, 2, 12), float64]) {
  %474 = @func_4335() /* ty=(Tensor[(450), int8], Tensor[(16, 2, 12), uint32], Tensor[(384), uint32]) */;
  %475 = %474.1;
  %476 = cast(%var_4704, dtype="float64") /* ty=Tensor[(16, 2, 12), float64] */;
  %477 = shape_of(%475, dtype="int32") /* ty=Tensor[(3), int32] */;
  %478 = cast(%475, dtype="float64") /* ty=Tensor[(16, 2, 12), float64] */;
  %479 = dyn.reshape(%476, %477, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %480 = cast(%var_4704, dtype="float64") /* ty=Tensor[(16, 2, 12), float64] */;
  %481 = shape_of(%475, dtype="int32") /* ty=Tensor[(3), int32] */;
  %482 = cast(%475, dtype="float64") /* ty=Tensor[(16, 2, 12), float64] */;
  %483 = dyn.reshape(%480, %481, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %484 = power(%478, %479) /* ty=Tensor[(16, 2, 12), float64] */;
  %485 = divide(%482, %483) /* ty=Tensor[(16, 2, 12), float64] */;
  (%484, %485)
}

def @func_6561() -> (Tensor[(16, 2, 12), uint32],) {
  %486 = @func_4335() /* ty=(Tensor[(450), int8], Tensor[(16, 2, 12), uint32], Tensor[(384), uint32]) */;
  %487 = %486.1;
  (%487,)
}

def @func_2580(%var_2570: Tensor[(16, 2, 12), uint32]) -> Tensor[(16, 2, 12), uint32] {
  %488 = cast(meta[relay.Constant][29] /* ty=Tensor[(16, 2, 12), uint32] */, dtype="uint32") /* ty=Tensor[(16, 2, 12), uint32] */;
  %489 = shape_of(%var_2570, dtype="int32") /* ty=Tensor[(3), int32] */;
  %490 = cast(%var_2570, dtype="uint32") /* ty=Tensor[(16, 2, 12), uint32] */;
  %491 = dyn.reshape(%488, %489, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  logical_xor(%490, %491) /* ty=Tensor[(16, 2, 12), uint32] */
}

def @func_6426() -> (Tensor[(450), int8],) {
  %492 = @func_4063() /* ty=(Tensor[(450), int8],) */;
  %493 = %492.0;
  (%493,)
}

def @func_4128() -> Tensor[(450), int8] {
  @func_3558() /* ty=Tensor[(450), int8] */
}

def @func_3148() -> (Tensor[(450), bool], Tensor[(7, 13, 7), float64], Tensor[(132, 2), float64], Tensor[(132, 2), float64], Tensor[(7, 13, 7), float64]) {
  %494 = @func_2683() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(450), int8]) */;
  %495 = @func_2399() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(12, 11, 2), float64], Tensor[(132, 2), float32]) */;
  %496 = %495.2;
  %497 = cast(%496, dtype="float32") /* ty=Tensor[(132, 2), float32] */;
  %498 = asin(%497) /* ty=Tensor[(132, 2), float32] */;
  %499 = cast(%498, dtype="float64") /* ty=Tensor[(132, 2), float64] */;
  %500 = cast(meta[relay.Constant][30] /* ty=Tensor[(132, 2), float32] */, dtype="float64") /* ty=Tensor[(132, 2), float64] */;
  %501 = shape_of(%498, dtype="int32") /* ty=Tensor[(2), int32] */;
  %502 = cast(%498, dtype="float64") /* ty=Tensor[(132, 2), float64] */;
  %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %504 = @func_2198() /* ty=(Tensor[(7, 13, 7), float64],) */;
  %505 = @func_2858() /* ty=Tensor[(450), bool] */;
  %506 = %494.0;
  %507 = atan(%499) /* ty=Tensor[(132, 2), float64] */;
  %508 = mod(%502, %503) /* ty=Tensor[(132, 2), float64] */;
  %509 = %504.0;
  (%505, %506, %507, %508, %509)
}

def @func_6633(%var_6592: Tensor[(6, 1, 2), float32], %var_6597: Tensor[(234), float32]) -> (Tensor[(6, 13, 3), float32], Tensor[(234), float32], Tensor[(450), float64], Tensor[(6, ?, 2), bool], Tensor[(450), int8], Tensor[(40), float32], uint32, Tensor[(210), uint32], Tensor[(40), float32]) {
  %510 = cast(%var_6597, dtype="float32") /* ty=Tensor[(234), float32] */;
  %511 = reshape(%510, newshape=[6, 13, 3]) /* ty=Tensor[(6, 13, 3), float32] */;
  %512 = @func_1401(%511) /* ty=(Tensor[(6, 13, 3), float32],) */;
  %513 = cast(%var_6592, dtype="float32") /* ty=Tensor[(6, 1, 2), float32] */;
  %514 = tan(%513) /* ty=Tensor[(6, 1, 2), float32] */;
  %515 = cast(%var_6592, dtype="bool") /* ty=Tensor[(6, 1, 2), bool] */;
  %516 = shape_of(%514, dtype="int32") /* ty=Tensor[(3), int32] */;
  %517 = cast(%514, dtype="bool") /* ty=Tensor[(6, 1, 2), bool] */;
  %518 = dyn.reshape(%515, %516, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %519 = @func_4063() /* ty=(Tensor[(450), int8],) */;
  %520 = cast(meta[relay.Constant][31] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %521 = cast(meta[relay.Constant][32] /* ty=Tensor[(210), uint32] */, dtype="uint32") /* ty=Tensor[(210), uint32] */;
  %522 = cast(meta[relay.Constant][33] /* ty=Tensor[(40), float32] */, dtype="float32") /* ty=Tensor[(40), float32] */;
  %523 = reshape(%520, newshape=[]) /* ty=uint32 */;
  %524 = reshape(%521, newshape=[6, 5, 7]) /* ty=Tensor[(6, 5, 7), uint32] */;
  %525 = reshape(%522, newshape=[40]) /* ty=Tensor[(40), float32] */;
  %526 = @func_6165(%523, %524, %525) /* ty=(Tensor[(6, 5, 7), uint32], Tensor[(10, 4, 12), bool], Tensor[(40), float32], Tensor[(480), float32]) */;
  %527 = %512.0;
  %528 = @func_5973() /* ty=Tensor[(450), float64] */;
  %529 = logical_or(%517, %518) /* ty=Tensor[(6, ?, 2), bool] */;
  %530 = %519.0;
  %531 = %526.2;
  (%527, %var_6597, %528, %529, %530, %531, meta[relay.Constant][31] /* ty=uint32 */, meta[relay.Constant][32] /* ty=Tensor[(210), uint32] */, meta[relay.Constant][33] /* ty=Tensor[(40), float32] */)
}

def @func_1666(%var_1627: Tensor[(8, 7, 13), uint8], %var_1638: Tensor[(1575), int16], %var_1639: Tensor[(450), float32]) -> (Tensor[(8, 7, 13), uint8], Tensor[(?, 450), int16], Tensor[(1575), int16], Tensor[(450), float32], Tensor[(?, 450), uint64], Tensor[(?, 450), uint64]) {
  %532 = cast(%var_1627, dtype="uint8") /* ty=Tensor[(8, 7, 13), uint8] */;
  %533 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(8, 7, 13), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %534 = cast(meta[relay.Constant][34] /* ty=Tensor[(8, 7, 13), uint8] */, dtype="uint8") /* ty=Tensor[(8, 7, 13), uint8] */;
  %535 = dyn.reshape(%532, %533, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %536 = cast(%var_1638, dtype="int16") /* ty=Tensor[(1575), int16] */;
  %537 = cast(%var_1639, dtype="float32") /* ty=Tensor[(450), float32] */;
  %538 = reshape(%536, newshape=[7, 15, 15]) /* ty=Tensor[(7, 15, 15), int16] */;
  %539 = reshape(%537, newshape=[1, 450]) /* ty=Tensor[(1, 450), float32] */;
  %540 = @func_728(%538, %539) /* ty=(Tensor[(7, 15, 15), int16], Tensor[(5, 6, 15), float32], Tensor[(?, 450), uint64], Tensor[(5, 6, 15), float32], Tensor[(?, 450), int16]) */;
  %541 = cast(%var_1638, dtype="int16") /* ty=Tensor[(1575), int16] */;
  %542 = %540.4;
  %543 = cast(%542, dtype="float32") /* ty=Tensor[(?, 450), float32] */;
  %544 = reshape(%541, newshape=[7, 15, 15]) /* ty=Tensor[(7, 15, 15), int16] */;
  %545 = reshape(%543, newshape=[1, 450]) /* ty=Tensor[(1, 450), float32] */;
  %546 = @func_728(%544, %545) /* ty=(Tensor[(7, 15, 15), int16], Tensor[(5, 6, 15), float32], Tensor[(?, 450), uint64], Tensor[(5, 6, 15), float32], Tensor[(?, 450), int16]) */;
  %547 = cast(%var_1638, dtype="int16") /* ty=Tensor[(1575), int16] */;
  %548 = cast(%542, dtype="float32") /* ty=Tensor[(?, 450), float32] */;
  %549 = reshape(%547, newshape=[7, 15, 15]) /* ty=Tensor[(7, 15, 15), int16] */;
  %550 = reshape(%548, newshape=[1, 450]) /* ty=Tensor[(1, 450), float32] */;
  %551 = @func_728(%549, %550) /* ty=(Tensor[(7, 15, 15), int16], Tensor[(5, 6, 15), float32], Tensor[(?, 450), uint64], Tensor[(5, 6, 15), float32], Tensor[(?, 450), int16]) */;
  %552 = left_shift(%534, %535) /* ty=Tensor[(8, 7, 13), uint8] */;
  %553 = %546.2;
  %554 = %551.2;
  (%552, %542, %var_1638, %var_1639, %553, %554)
}

def @func_5719() -> Tensor[(780), bool] {
  %555 = @func_4415() /* ty=Tensor[(780), float32] */;
  %556 = @func_4863() /* ty=Tensor[(780), float32] */;
  %557 = cast(%556, dtype="bool") /* ty=Tensor[(780), bool] */;
  %558 = shape_of(%555, dtype="int32") /* ty=Tensor[(1), int32] */;
  %559 = cast(%555, dtype="bool") /* ty=Tensor[(780), bool] */;
  %560 = dyn.reshape(%557, %558, newshape=[]) /* ty=Tensor[(?), bool] */;
  greater_equal(%559, %560) /* ty=Tensor[(780), bool] */
}

def @func_6381(%var_6363: Tensor[(450), int8]) -> (Tensor[(450), float64],) {
  %561 = @func_3628() /* ty=(Tensor[(780), float32], Tensor[(450), int8]) */;
  %562 = %561.1;
  %563 = cast(%var_6363, dtype="float64") /* ty=Tensor[(450), float64] */;
  %564 = shape_of(%562, dtype="int32") /* ty=Tensor[(1), int32] */;
  %565 = cast(%562, dtype="float64") /* ty=Tensor[(450), float64] */;
  %566 = dyn.reshape(%563, %564, newshape=[]) /* ty=Tensor[(?), float64] */;
  %567 = floor_mod(%565, %566) /* ty=Tensor[(450), float64] */;
  (%567,)
}

def @func_6859(%var_6855: Tensor[(75), int8]) -> (Tensor[(450), bool], Tensor[(450), int8], Tensor[(75), int8]) {
  %568 = cast(%var_6855, dtype="int8") /* ty=Tensor[(75), int8] */;
  %569 = reshape(%568, newshape=[75]) /* ty=Tensor[(75), int8] */;
  %570 = @func_4602(%569) /* ty=(Tensor[(450), bool], Tensor[(5, 6, 15), float32], Tensor[(2400), bool], Tensor[(75), int8], Tensor[(728, 9), bool], Tensor[(728, 9), float32], Tensor[(450), bool], Tensor[(450), int8], Tensor[(450), int8]) */;
  %571 = @func_3506() /* ty=Tensor[(450), bool] */;
  %572 = %570.7;
  (%571, %572, %var_6855)
}

def @func_5748(%var_5734: Tensor[(1575), int16], %var_5735: Tensor[(450), float32]) -> (Tensor[(780), float64], Tensor[(5, 6, 15), float32], Tensor[(1575), int16], Tensor[(450), float32]) {
  %573 = @func_3193() /* ty=(Tensor[(780), float32],) */;
  %574 = %573.0;
  %575 = cast(%574, dtype="float64") /* ty=Tensor[(780), float64] */;
  %576 = cast(%var_5734, dtype="int16") /* ty=Tensor[(1575), int16] */;
  %577 = cast(%var_5735, dtype="float32") /* ty=Tensor[(450), float32] */;
  %578 = reshape(%576, newshape=[7, 15, 15]) /* ty=Tensor[(7, 15, 15), int16] */;
  %579 = reshape(%577, newshape=[1, 450]) /* ty=Tensor[(1, 450), float32] */;
  %580 = @func_728(%578, %579) /* ty=(Tensor[(7, 15, 15), int16], Tensor[(5, 6, 15), float32], Tensor[(?, 450), uint64], Tensor[(5, 6, 15), float32], Tensor[(?, 450), int16]) */;
  %581 = atanh(%575) /* ty=Tensor[(780), float64] */;
  %582 = %580.3;
  (%581, %582, %var_5734, %var_5735)
}

def @func_5776() -> (Tensor[(450), int8],) {
  %583 = @func_4958() /* ty=(Tensor[(450), int8],) */;
  %584 = %583.0;
  (%584,)
}

def @func_6893() -> (Tensor[(450), int8], Tensor[(450), int8], Tensor[(7, 13, 7), float64]) {
  %585 = @func_3718() /* ty=(Tensor[(450), int8], Tensor[(7, 13, 7), float32]) */;
  %586 = @func_6426() /* ty=(Tensor[(450), int8],) */;
  %587 = @func_2765() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(6, 10, 13), float32], Tensor[(780), float32]) */;
  %588 = %585.0;
  %589 = %586.0;
  %590 = %587.0;
  (%588, %589, %590)
}

def @func_7231() -> Tensor[(450), int8] {
  %591 = @func_6426() /* ty=(Tensor[(450), int8],) */;
  %591.0
}

def @func_4002() -> (Tensor[(780), float32], Tensor[(7, 13, 7), float64], Tensor[(780), float32]) {
  %592 = @func_2765() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(6, 10, 13), float32], Tensor[(780), float32]) */;
  %593 = @func_2765() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(6, 10, 13), float32], Tensor[(780), float32]) */;
  %594 = @func_3628() /* ty=(Tensor[(780), float32], Tensor[(450), int8]) */;
  %595 = %592.2;
  %596 = %593.0;
  %597 = %594.0;
  (%595, %596, %597)
}

def @func_7868(%var_7850: Tensor[(7, 13, 7), float64]) -> (Tensor[(7, 13, 7), bool], Tensor[(450), float64]) {
  %598 = @func_5268() /* ty=Tensor[(7, 13, 7), float64] */;
  %599 = cast(%var_7850, dtype="bool") /* ty=Tensor[(7, 13, 7), bool] */;
  %600 = shape_of(%598, dtype="int32") /* ty=Tensor[(3), int32] */;
  %601 = cast(%598, dtype="bool") /* ty=Tensor[(7, 13, 7), bool] */;
  %602 = dyn.reshape(%599, %600, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %603 = logical_or(%601, %602) /* ty=Tensor[(7, 13, 7), bool] */;
  %604 = @func_5973() /* ty=Tensor[(450), float64] */;
  (%603, %604)
}

def @func_3061(%var_3025: int16, %var_3026: Tensor[(7, 14, 12), int16]) -> (Tensor[(7, 14, 12), int16], Tensor[(12, 11, 2), float64], Tensor[(7, 13, 7), float64], Tensor[(7, 13, 7), float64], Tensor[(264, 1), uint64]) {
  %605 = cast(%var_3025, dtype="int16") /* ty=int16 */;
  %606 = cast(%var_3026, dtype="int16") /* ty=Tensor[(7, 14, 12), int16] */;
  %607 = cast(meta[relay.Constant][35] /* ty=Tensor[(264, 1), float32] */, dtype="float32") /* ty=Tensor[(264, 1), float32] */;
  %608 = reshape(%607, newshape=[12, 11, 2]) /* ty=Tensor[(12, 11, 2), float32] */;
  %609 = @func_1983(%608) /* ty=Tensor[(12, 11, 2), float64] */;
  %610 = cast(%609, dtype="float64") /* ty=Tensor[(12, 11, 2), float64] */;
  %611 = reshape(%610, newshape=[12, 11, 2]) /* ty=Tensor[(12, 11, 2), float64] */;
  %612 = @func_3021(%611) /* ty=(Tensor[(7, 13, 7), float64], Tensor[(1575), int16], Tensor[(12, 11, 2), bool], Tensor[(1080), float64], Tensor[(5, 6, 15), float32], Tensor[(?, 450), int16], Tensor[(12, 11, 2), int32]) */;
  %613 = @func_2198() /* ty=(Tensor[(7, 13, 7), float64],) */;
  %614 = cast(meta[relay.Constant][35] /* ty=Tensor[(264, 1), float32] */, dtype="uint64") /* ty=Tensor[(264, 1), uint64] */;
  %615 = cast(%var_3025, dtype="uint64") /* ty=uint64 */;
  %616 = add(%605, %606) /* ty=Tensor[(7, 14, 12), int16] */;
  %617 = %612.0;
  %618 = %613.0;
  %619 = bitwise_xor(%614, %615) /* ty=Tensor[(264, 1), uint64] */;
  (%616, %609, %617, %618, %619)
}

def @func_166(%var_160: Tensor[(5, 6, 15), float32]) -> Tensor[(5, 6, 15), float32] {
  %620 = cast(%var_160, dtype="float32") /* ty=Tensor[(5, 6, 15), float32] */;
  acosh(%620) /* ty=Tensor[(5, 6, 15), float32] */
}

def @func_5182(%var_5174: Tensor[(220), float32]) -> (Tensor[(7, 13, 7), float64], Tensor[(5, 4, 11), float32], Tensor[(220), float32], Tensor[(22050), int16]) {
  %621 = @func_5131() /* ty=(Tensor[(7, 13, 7), float64],) */;
  %622 = cast(%var_5174, dtype="float32") /* ty=Tensor[(220), float32] */;
  %623 = cast(%var_5174, dtype="float32") /* ty=Tensor[(220), float32] */;
  %624 = cast(meta[relay.Constant][36] /* ty=Tensor[(22050), int16] */, dtype="int16") /* ty=Tensor[(22050), int16] */;
  %625 = cast(meta[relay.Constant][36] /* ty=Tensor[(22050), int16] */, dtype="uint64") /* ty=Tensor[(22050), uint64] */;
  %626 = reshape(%622, newshape=[5, 4, 11]) /* ty=Tensor[(5, 4, 11), float32] */;
  %627 = reshape(%623, newshape=[5, 4, 11]) /* ty=Tensor[(5, 4, 11), float32] */;
  %628 = reshape(%624, newshape=[14, 1575]) /* ty=Tensor[(14, 1575), int16] */;
  %629 = reshape(%625, newshape=[14, 1575]) /* ty=Tensor[(14, 1575), uint64] */;
  %630 = @func_2540(%626, %627, %628, %629) /* ty=(Tensor[(5, 4, 11), float32], Tensor[(1575), int16], Tensor[(78), uint8], Tensor[(132, 2), float32], Tensor[(14, 1575), float32]) */;
  %631 = %621.0;
  %632 = %630.0;
  (%631, %632, %var_5174, meta[relay.Constant][36] /* ty=Tensor[(22050), int16] */)
}

def @func_1928(%var_1908: Tensor[(10, 9, 12), bool], %var_1915: Tensor[(105, 15), int16]) -> (Tensor[(10, 9, 12), bool], Tensor[(5, 6, 15), float32], Tensor[(105, 15), int16], Tensor[(450), float32]) {
  %633 = cast(meta[relay.Constant][37] /* ty=Tensor[(10, 9, 12), bool] */, dtype="bool") /* ty=Tensor[(10, 9, 12), bool] */;
  %634 = shape_of(%var_1908, dtype="int32") /* ty=Tensor[(3), int32] */;
  %635 = cast(%var_1908, dtype="bool") /* ty=Tensor[(10, 9, 12), bool] */;
  %636 = dyn.reshape(%633, %634, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %637 = cast(%var_1915, dtype="int16") /* ty=Tensor[(105, 15), int16] */;
  %638 = cast(meta[relay.Constant][38] /* ty=Tensor[(450), float32] */, dtype="float32") /* ty=Tensor[(450), float32] */;
  %639 = reshape(%637, newshape=[7, 15, 15]) /* ty=Tensor[(7, 15, 15), int16] */;
  %640 = reshape(%638, newshape=[1, 450]) /* ty=Tensor[(1, 450), float32] */;
  %641 = @func_728(%639, %640) /* ty=(Tensor[(7, 15, 15), int16], Tensor[(5, 6, 15), float32], Tensor[(?, 450), uint64], Tensor[(5, 6, 15), float32], Tensor[(?, 450), int16]) */;
  %642 = logical_and(%635, %636) /* ty=Tensor[(10, 9, 12), bool] */;
  %643 = %641.1;
  (%642, %643, %var_1915, meta[relay.Constant][38] /* ty=Tensor[(450), float32] */)
}

def @func_2279(%var_2244: Tensor[(15, 1, 5), int8], %var_2268: Tensor[(728), uint8]) -> (Tensor[(15, 1, 5), int8], Tensor[(5, 6, 15), float32], Tensor[(450), float32], Tensor[(8, 7, 13), uint8], Tensor[(728), uint8], Tensor[(1575), int16]) {
  %644 = cast(meta[relay.Constant][39] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %645 = cast(%var_2244, dtype="int8") /* ty=Tensor[(15, 1, 5), int8] */;
  %646 = cast(meta[relay.Constant][40] /* ty=Tensor[(450), float32] */, dtype="float32") /* ty=Tensor[(450), float32] */;
  %647 = reshape(%646, newshape=[5, 6, 15]) /* ty=Tensor[(5, 6, 15), float32] */;
  %648 = cast(%var_2268, dtype="uint8") /* ty=Tensor[(728), uint8] */;
  %649 = cast(meta[relay.Constant][41] /* ty=Tensor[(1575), int16] */, dtype="int16") /* ty=Tensor[(1575), int16] */;
  %650 = @func_166(%647) /* ty=Tensor[(5, 6, 15), float32] */;
  %651 = cast(%650, dtype="float32") /* ty=Tensor[(5, 6, 15), float32] */;
  %652 = reshape(%648, newshape=[8, 7, 13]) /* ty=Tensor[(8, 7, 13), uint8] */;
  %653 = reshape(%649, newshape=[1575]) /* ty=Tensor[(1575), int16] */;
  %654 = reshape(%651, newshape=[450]) /* ty=Tensor[(450), float32] */;
  %655 = @func_1666(%652, %653, %654) /* ty=(Tensor[(8, 7, 13), uint8], Tensor[(?, 450), int16], Tensor[(1575), int16], Tensor[(450), float32], Tensor[(?, 450), uint64], Tensor[(?, 450), uint64]) */;
  %656 = bitwise_and(%644, %645) /* ty=Tensor[(15, 1, 5), int8] */;
  %657 = %655.0;
  (%656, %650, meta[relay.Constant][40] /* ty=Tensor[(450), float32] */, %657, %var_2268, meta[relay.Constant][41] /* ty=Tensor[(1575), int16] */)
}

def @func_7325() -> (Tensor[(780), float32], Tensor[(?, 450), int16], Tensor[(264), float64]) {
  %658 = @func_6317() /* ty=(Tensor[(780), float32], Tensor[(16, 2, 12), float32]) */;
  %659 = cast(meta[relay.Constant][42] /* ty=Tensor[(264), float64] */, dtype="float64") /* ty=Tensor[(264), float64] */;
  %660 = reshape(%659, newshape=[12, 11, 2]) /* ty=Tensor[(12, 11, 2), float64] */;
  %661 = @func_3021(%660) /* ty=(Tensor[(7, 13, 7), float64], Tensor[(1575), int16], Tensor[(12, 11, 2), bool], Tensor[(1080), float64], Tensor[(5, 6, 15), float32], Tensor[(?, 450), int16], Tensor[(12, 11, 2), int32]) */;
  %662 = %658.0;
  %663 = %661.5;
  (%662, %663, meta[relay.Constant][42] /* ty=Tensor[(264), float64] */)
}

def @func_2858() -> Tensor[(450), bool] {
  %664 = @func_2791() /* ty=(Tensor[(450), int8],) */;
  %665 = %664.0;
  %666 = cast(%665, dtype="float64") /* ty=Tensor[(450), float64] */;
  %667 = sigmoid(%666) /* ty=Tensor[(450), float64] */;
  %668 = cast(%667, dtype="bool") /* ty=Tensor[(450), bool] */;
  %669 = shape_of(%665, dtype="int32") /* ty=Tensor[(1), int32] */;
  %670 = cast(%665, dtype="bool") /* ty=Tensor[(450), bool] */;
  %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?), bool] */;
  not_equal(%670, %671) /* ty=Tensor[(450), bool] */
}

def @func_4958() -> (Tensor[(450), int8],) {
  %672 = @func_4499() /* ty=(Tensor[(450), int8],) */;
  %673 = %672.0;
  (%673,)
}

def @func_6255() -> (Tensor[(450), bool],) {
  %674 = @func_2909() /* ty=Tensor[(450), bool] */;
  (%674,)
}

def @func_1144(%var_1115: Tensor[(10, 15, 16), bool], %var_1116: Tensor[(10, 15, 16), bool], %var_1127: Tensor[(450), float32]) -> (Tensor[(5, 6, 15), float32], Tensor[(450), float32], Tensor[(10, 15, 16), bool], Tensor[(5, 6, 15), float32]) {
  %675 = cast(%var_1127, dtype="float32") /* ty=Tensor[(450), float32] */;
  %676 = reshape(%675, newshape=[5, 6, 15]) /* ty=Tensor[(5, 6, 15), float32] */;
  %677 = cast(%var_1116, dtype="bool") /* ty=Tensor[(10, 15, 16), bool] */;
  %678 = shape_of(%var_1115, dtype="int32") /* ty=Tensor[(3), int32] */;
  %679 = cast(%var_1115, dtype="bool") /* ty=Tensor[(10, 15, 16), bool] */;
  %680 = dyn.reshape(%677, %678, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %681 = logical_or(%679, %680) /* ty=Tensor[(10, 15, 16), bool] */;
  %682 = cast(%681, dtype="float64") /* ty=Tensor[(10, 15, 16), float64] */;
  %683 = acosh(%682) /* ty=Tensor[(10, 15, 16), float64] */;
  %684 = cast(%681, dtype="bool") /* ty=Tensor[(10, 15, 16), bool] */;
  %685 = shape_of(%683, dtype="int32") /* ty=Tensor[(3), int32] */;
  %686 = cast(%683, dtype="bool") /* ty=Tensor[(10, 15, 16), bool] */;
  %687 = dyn.reshape(%684, %685, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %688 = cast(%var_1127, dtype="float32") /* ty=Tensor[(450), float32] */;
  %689 = reshape(%688, newshape=[5, 6, 15]) /* ty=Tensor[(5, 6, 15), float32] */;
  %690 = @func_166(%676) /* ty=Tensor[(5, 6, 15), float32] */;
  %691 = less_equal(%686, %687) /* ty=Tensor[(10, 15, 16), bool] */;
  %692 = @func_166(%689) /* ty=Tensor[(5, 6, 15), float32] */;
  (%690, %var_1127, %691, %692)
}

def @func_4275(%var_4239: Tensor[(6, 9, 7), float32]) -> Tensor[(6, 9, 7), bool] {
  %693 = cast(%var_4239, dtype="float32") /* ty=Tensor[(6, 9, 7), float32] */;
  %694 = rsqrt(%693) /* ty=Tensor[(6, 9, 7), float32] */;
  %695 = cast(%694, dtype="float32") /* ty=Tensor[(6, 9, 7), float32] */;
  %696 = asin(%695) /* ty=Tensor[(6, 9, 7), float32] */;
  %697 = cast(%696, dtype="bool") /* ty=Tensor[(6, 9, 7), bool] */;
  %698 = shape_of(%694, dtype="int32") /* ty=Tensor[(3), int32] */;
  %699 = cast(%694, dtype="bool") /* ty=Tensor[(6, 9, 7), bool] */;
  %700 = dyn.reshape(%697, %698, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%699, %700) /* ty=Tensor[(6, 9, 7), bool] */
}

def @func_3359() -> (Tensor[(7, 13, 7), float64], Tensor[(780), float32]) {
  %701 = @func_2399() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(12, 11, 2), float64], Tensor[(132, 2), float32]) */;
  %702 = @func_3193() /* ty=(Tensor[(780), float32],) */;
  %703 = %701.0;
  %704 = %702.0;
  (%703, %704)
}

def @func_4602(%var_4538: Tensor[(75), int8]) -> (Tensor[(450), bool], Tensor[(5, 6, 15), float32], Tensor[(2400), bool], Tensor[(75), int8], Tensor[(728, 9), bool], Tensor[(728, 9), float32], Tensor[(450), bool], Tensor[(450), int8], Tensor[(450), int8]) {
  %705 = @func_3589() /* ty=(Tensor[(450), bool],) */;
  %706 = cast(meta[relay.Constant][43] /* ty=Tensor[(2400), bool] */, dtype="bool") /* ty=Tensor[(2400), bool] */;
  %707 = cast(meta[relay.Constant][43] /* ty=Tensor[(2400), bool] */, dtype="bool") /* ty=Tensor[(2400), bool] */;
  %708 = %705.0;
  %709 = cast(%708, dtype="float32") /* ty=Tensor[(450), float32] */;
  %710 = reshape(%706, newshape=[10, 15, 16]) /* ty=Tensor[(10, 15, 16), bool] */;
  %711 = reshape(%707, newshape=[10, 15, 16]) /* ty=Tensor[(10, 15, 16), bool] */;
  %712 = reshape(%709, newshape=[450]) /* ty=Tensor[(450), float32] */;
  %713 = @func_1144(%710, %711, %712) /* ty=(Tensor[(5, 6, 15), float32], Tensor[(450), float32], Tensor[(10, 15, 16), bool], Tensor[(5, 6, 15), float32]) */;
  %714 = cast(meta[relay.Constant][44] /* ty=Tensor[(728, 9), float32] */, dtype="float32") /* ty=Tensor[(728, 9), float32] */;
  %715 = acos(%714) /* ty=Tensor[(728, 9), float32] */;
  %716 = cast(%715, dtype="float64") /* ty=Tensor[(728, 9), float64] */;
  %717 = atanh(%716) /* ty=Tensor[(728, 9), float64] */;
  %718 = cast(%var_4538, dtype="int8") /* ty=Tensor[(75), int8] */;
  %719 = reshape(%718, newshape=[75]) /* ty=Tensor[(75), int8] */;
  %720 = @func_4034(%719) /* ty=(Tensor[(7, 13, 7), float64], Tensor[(5, 6, 15), float32], Tensor[(75), int8], Tensor[(728, 1), uint8]) */;
  %721 = %720.3;
  %722 = cast(%721, dtype="float32") /* ty=Tensor[(728, 1), float32] */;
  %723 = atan(%722) /* ty=Tensor[(728, 1), float32] */;
  %724 = cast(%723, dtype="bool") /* ty=Tensor[(728, 1), bool] */;
  %725 = cast(meta[relay.Constant][44] /* ty=Tensor[(728, 9), float32] */, dtype="bool") /* ty=Tensor[(728, 9), bool] */;
  %726 = not_equal(%724, %725) /* ty=Tensor[(728, 9), bool] */;
  %727 = cast(%726, dtype="bool") /* ty=Tensor[(728, 9), bool] */;
  %728 = shape_of(%717, dtype="int32") /* ty=Tensor[(2), int32] */;
  %729 = cast(%717, dtype="bool") /* ty=Tensor[(728, 9), bool] */;
  %730 = dyn.reshape(%727, %728, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %731 = cast(%717, dtype="float32") /* ty=Tensor[(728, 9), float32] */;
  %732 = @func_3941() /* ty=(Tensor[(450), bool], Tensor[(450), bool]) */;
  %733 = %713.3;
  %734 = equal(%729, %730) /* ty=Tensor[(728, 9), bool] */;
  %735 = exp(%731) /* ty=Tensor[(728, 9), float32] */;
  %736 = %732.0;
  %737 = @func_4128() /* ty=Tensor[(450), int8] */;
  %738 = @func_4384() /* ty=Tensor[(450), int8] */;
  (%708, %733, meta[relay.Constant][43] /* ty=Tensor[(2400), bool] */, %var_4538, %734, %735, %736, %737, %738)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5295() -> (Tensor[(450), bool], Tensor[(7, 13, 7), float64]) {
  %2 = fn () -> (Tensor[(450), bool], Tensor[(7, 13, 7), float64]) {
    %0 = @func_4219() /* ty=Tensor[(450), bool] */;
    %1 = @func_5268() /* ty=Tensor[(7, 13, 7), float64] */;
    (%0, %1)
  };
  %2() /* ty=(Tensor[(450), bool], Tensor[(7, 13, 7), float64]) */
}

def @func_2793() -> (Tensor[(450), int8],) {
  @func_2791() /* ty=(Tensor[(450), int8],) */
}

def @func_6381(%var_6363: Tensor[(450), int8]) -> (Tensor[(450), float64],) {
  %3 = @func_3628() /* ty=(Tensor[(780), float32], Tensor[(450), int8]) */;
  %4 = %3.1;
  %5 = cast(%var_6363, dtype="float64") /* ty=Tensor[(450), float64] */;
  %6 = shape_of(%4, dtype="int32") /* ty=Tensor[(1), int32] */;
  %7 = cast(%4, dtype="float64") /* ty=Tensor[(450), float64] */;
  %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?), float64] */;
  %9 = floor_mod(%7, %8) /* ty=Tensor[(450), float64] */;
  (%9,)
}

def @func_6894() -> (Tensor[(450), int8], Tensor[(450), int8], Tensor[(7, 13, 7), float64]) {
  %16 = fn () -> (Tensor[(450), int8], Tensor[(450), int8], Tensor[(7, 13, 7), float64]) {
    %10 = @func_3718() /* ty=(Tensor[(450), int8], Tensor[(7, 13, 7), float32]) */;
    %11 = @func_6426() /* ty=(Tensor[(450), int8],) */;
    %12 = @func_2765() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(6, 10, 13), float32], Tensor[(780), float32]) */;
    %13 = %10.0;
    %14 = %11.0;
    %15 = %12.0;
    (%13, %14, %15)
  };
  %16() /* ty=(Tensor[(450), int8], Tensor[(450), int8], Tensor[(7, 13, 7), float64]) */
}

def @func_4065() -> (Tensor[(450), int8],) {
  @func_4063() /* ty=(Tensor[(450), int8],) */
}

def @func_1403(%var_1402: Tensor[(6, 13, 3), float32]) -> (Tensor[(6, 13, 3), float32],) {
  %19 = fn (%var_1387: Tensor[(6, 13, 3), float32]) -> (Tensor[(6, 13, 3), float32],) {
    %17 = cast(%var_1387, dtype="float32") /* ty=Tensor[(6, 13, 3), float32] */;
    %18 = cosh(%17) /* ty=Tensor[(6, 13, 3), float32] */;
    (%18,)
  };
  %19(%var_1402) /* ty=(Tensor[(6, 13, 3), float32],) */
}

def @func_166(%var_160: Tensor[(5, 6, 15), float32]) -> Tensor[(5, 6, 15), float32] {
  %20 = cast(%var_160, dtype="float32") /* ty=Tensor[(5, 6, 15), float32] */;
  acosh(%20) /* ty=Tensor[(5, 6, 15), float32] */
}

def @func_3061(%var_3025: int16, %var_3026: Tensor[(7, 14, 12), int16]) -> (Tensor[(7, 14, 12), int16], Tensor[(12, 11, 2), float64], Tensor[(7, 13, 7), float64], Tensor[(7, 13, 7), float64], Tensor[(264, 1), uint64]) {
  %21 = cast(%var_3025, dtype="int16") /* ty=int16 */;
  %22 = cast(%var_3026, dtype="int16") /* ty=Tensor[(7, 14, 12), int16] */;
  %23 = cast(meta[relay.Constant][0] /* ty=Tensor[(264, 1), float32] */, dtype="float32") /* ty=Tensor[(264, 1), float32] */;
  %24 = reshape(%23, newshape=[12, 11, 2]) /* ty=Tensor[(12, 11, 2), float32] */;
  %25 = @func_1983(%24) /* ty=Tensor[(12, 11, 2), float64] */;
  %26 = cast(%25, dtype="float64") /* ty=Tensor[(12, 11, 2), float64] */;
  %27 = reshape(%26, newshape=[12, 11, 2]) /* ty=Tensor[(12, 11, 2), float64] */;
  %28 = @func_3021(%27) /* ty=(Tensor[(7, 13, 7), float64], Tensor[(1575), int16], Tensor[(12, 11, 2), bool], Tensor[(1080), float64], Tensor[(5, 6, 15), float32], Tensor[(?, 450), int16], Tensor[(12, 11, 2), int32]) */;
  %29 = @func_2198() /* ty=(Tensor[(7, 13, 7), float64],) */;
  %30 = cast(meta[relay.Constant][0] /* ty=Tensor[(264, 1), float32] */, dtype="uint64") /* ty=Tensor[(264, 1), uint64] */;
  %31 = cast(%var_3025, dtype="uint64") /* ty=uint64 */;
  %32 = add(%21, %22) /* ty=Tensor[(7, 14, 12), int16] */;
  %33 = %28.0;
  %34 = %29.0;
  %35 = bitwise_xor(%30, %31) /* ty=Tensor[(264, 1), uint64] */;
  (%32, %25, %33, %34, %35)
}

def @func_5666(%var_5665: Tensor[(5, 315), int16]) -> (Tensor[(?, 450), int16], Tensor[(5, 315), int16], Tensor[(450), float32], Tensor[(7, 13, 7), bool]) {
  %50 = fn (%var_5644: Tensor[(5, 315), int16]) -> (Tensor[(?, 450), int16], Tensor[(5, 315), int16], Tensor[(450), float32], Tensor[(7, 13, 7), bool]) {
    %36 = cast(%var_5644, dtype="int16") /* ty=Tensor[(5, 315), int16] */;
    %37 = cast(meta[relay.Constant][1] /* ty=Tensor[(450), float32] */, dtype="float32") /* ty=Tensor[(450), float32] */;
    %38 = reshape(%36, newshape=[7, 15, 15]) /* ty=Tensor[(7, 15, 15), int16] */;
    %39 = reshape(%37, newshape=[1, 450]) /* ty=Tensor[(1, 450), float32] */;
    %40 = @func_728(%38, %39) /* ty=(Tensor[(7, 15, 15), int16], Tensor[(5, 6, 15), float32], Tensor[(?, 450), uint64], Tensor[(5, 6, 15), float32], Tensor[(?, 450), int16]) */;
    %41 = @func_3825() /* ty=Tensor[(7, 13, 7), float64] */;
    %42 = cast(%41, dtype="float64") /* ty=Tensor[(7, 13, 7), float64] */;
    %43 = log(%42) /* ty=Tensor[(7, 13, 7), float64] */;
    %44 = cast(%41, dtype="bool") /* ty=Tensor[(7, 13, 7), bool] */;
    %45 = shape_of(%43, dtype="int32") /* ty=Tensor[(3), int32] */;
    %46 = cast(%43, dtype="bool") /* ty=Tensor[(7, 13, 7), bool] */;
    %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %48 = %40.4;
    %49 = logical_and(%46, %47) /* ty=Tensor[(7, 13, 7), bool] */;
    (%48, %var_5644, meta[relay.Constant][1] /* ty=Tensor[(450), float32] */, %49)
  };
  %50(%var_5665) /* ty=(Tensor[(?, 450), int16], Tensor[(5, 315), int16], Tensor[(450), float32], Tensor[(7, 13, 7), bool]) */
}

def @func_7326() -> (Tensor[(780), float32], Tensor[(?, 450), int16], Tensor[(264), float64]) {
  %57 = fn () -> (Tensor[(780), float32], Tensor[(?, 450), int16], Tensor[(264), float64]) {
    %51 = @func_6317() /* ty=(Tensor[(780), float32], Tensor[(16, 2, 12), float32]) */;
    %52 = cast(meta[relay.Constant][2] /* ty=Tensor[(264), float64] */, dtype="float64") /* ty=Tensor[(264), float64] */;
    %53 = reshape(%52, newshape=[12, 11, 2]) /* ty=Tensor[(12, 11, 2), float64] */;
    %54 = @func_3021(%53) /* ty=(Tensor[(7, 13, 7), float64], Tensor[(1575), int16], Tensor[(12, 11, 2), bool], Tensor[(1080), float64], Tensor[(5, 6, 15), float32], Tensor[(?, 450), int16], Tensor[(12, 11, 2), int32]) */;
    %55 = %51.0;
    %56 = %54.5;
    (%55, %56, meta[relay.Constant][2] /* ty=Tensor[(264), float64] */)
  };
  %57() /* ty=(Tensor[(780), float32], Tensor[(?, 450), int16], Tensor[(264), float64]) */
}

def @func_3590() -> (Tensor[(450), bool],) {
  %60 = fn () -> (Tensor[(450), bool],) {
    %58 = @func_3181() /* ty=(Tensor[(450), bool],) */;
    %59 = %58.0;
    (%59,)
  };
  %60() /* ty=(Tensor[(450), bool],) */
}

def @func_6486(%var_6477: Tensor[(6, 10, 16), float64]) -> (Tensor[(6, 10, 16), float64], Tensor[(7, 13, 7), float64], Tensor[(7, 13, 7), float64]) {
  %61 = cast(%var_6477, dtype="float64") /* ty=Tensor[(6, 10, 16), float64] */;
  %62 = @func_2683() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(450), int8]) */;
  %63 = @func_6038() /* ty=(Tensor[(450), float64], Tensor[(7, 13, 7), float64], Tensor[(450), bool], Tensor[(5, 6, 15), float64]) */;
  %64 = sin(%61) /* ty=Tensor[(6, 10, 16), float64] */;
  %65 = %62.0;
  %66 = %63.1;
  (%64, %65, %66)
}

def @func_3793(%var_3791: Tensor[(6, 5, 7), float32]) -> (Tensor[(6, 5, 7), float64],) {
  @func_3790(%var_3791) /* ty=(Tensor[(6, 5, 7), float64],) */
}

def @func_4852() -> (Tensor[(7, 13, 7), float64],) {
  %67 = @func_2399() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(12, 11, 2), float64], Tensor[(132, 2), float32]) */;
  %68 = %67.0;
  (%68,)
}

def @func_6256() -> (Tensor[(450), bool],) {
  %70 = fn () -> (Tensor[(450), bool],) {
    %69 = @func_2909() /* ty=Tensor[(450), bool] */;
    (%69,)
  };
  %70() /* ty=(Tensor[(450), bool],) */
}

def @func_6427() -> (Tensor[(450), int8],) {
  %73 = fn () -> (Tensor[(450), int8],) {
    %71 = @func_4063() /* ty=(Tensor[(450), int8],) */;
    %72 = %71.0;
    (%72,)
  };
  %73() /* ty=(Tensor[(450), int8],) */
}

def @func_5045(%var_5043: Tensor[(8, 9, 7), float64], %var_5044: Tensor[(8, 9, 7), float64]) -> (Tensor[(8, 9, 7), float64],) {
  @func_5041(%var_5043, %var_5044) /* ty=(Tensor[(8, 9, 7), float64],) */
}

def @func_4063() -> (Tensor[(450), int8],) {
  %74 = @func_2791() /* ty=(Tensor[(450), int8],) */;
  %75 = %74.0;
  (%75,)
}

def @func_7498(%var_7496: Tensor[(1080), bool], %var_7497: Tensor[(1575, 1), int16]) -> (Tensor[(450), int8], Tensor[(210), float32], Tensor[(450), float32], Tensor[(1575, 450), int64], Tensor[(1575, 1080), uint64]) {
  %94 = fn (%var_7450: Tensor[(1080), bool], %var_7451: Tensor[(1575, 1), int16]) -> (Tensor[(450), int8], Tensor[(210), float32], Tensor[(450), float32], Tensor[(1575, 450), int64], Tensor[(1575, 1080), uint64]) {
    %76 = @func_7077() /* ty=(Tensor[(450), bool], Tensor[(210), float32], Tensor[(6, 5, 7), int16]) */;
    %77 = cast(%var_7450, dtype="bool") /* ty=Tensor[(1080), bool] */;
    %78 = cast(%var_7451, dtype="int16") /* ty=Tensor[(1575, 1), int16] */;
    %79 = reshape(%77, newshape=[10, 9, 12]) /* ty=Tensor[(10, 9, 12), bool] */;
    %80 = reshape(%78, newshape=[105, 15]) /* ty=Tensor[(105, 15), int16] */;
    %81 = @func_1928(%79, %80) /* ty=(Tensor[(10, 9, 12), bool], Tensor[(5, 6, 15), float32], Tensor[(105, 15), int16], Tensor[(450), float32]) */;
    %82 = cast(%var_7451, dtype="float32") /* ty=Tensor[(1575, 1), float32] */;
    %83 = sqrt(%82) /* ty=Tensor[(1575, 1), float32] */;
    %84 = @func_2858() /* ty=Tensor[(450), bool] */;
    %85 = cast(%83, dtype="int64") /* ty=Tensor[(1575, 1), int64] */;
    %86 = cast(%84, dtype="int64") /* ty=Tensor[(450), int64] */;
    %87 = cast(%var_7450, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
    %88 = cast(%83, dtype="uint64") /* ty=Tensor[(1575, 1), uint64] */;
    %89 = @func_4128() /* ty=Tensor[(450), int8] */;
    %90 = %76.1;
    %91 = %81.3;
    %92 = bitwise_and(%85, %86) /* ty=Tensor[(1575, 450), int64] */;
    %93 = left_shift(%87, %88) /* ty=Tensor[(1575, 1080), uint64] */;
    (%89, %90, %91, %92, %93)
  };
  %94(%var_7496, %var_7497) /* ty=(Tensor[(450), int8], Tensor[(210), float32], Tensor[(450), float32], Tensor[(1575, 450), int64], Tensor[(1575, 1080), uint64]) */
}

def @func_2765() -> (Tensor[(7, 13, 7), float64], Tensor[(6, 10, 13), float32], Tensor[(780), float32]) {
  %95 = @func_2683() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(450), int8]) */;
  %96 = cast(meta[relay.Constant][3] /* ty=Tensor[(780), float32] */, dtype="float32") /* ty=Tensor[(780), float32] */;
  %97 = reshape(%96, newshape=[6, 10, 13]) /* ty=Tensor[(6, 10, 13), float32] */;
  %98 = @func_2302(%97) /* ty=(Tensor[(6, 10, 13), float32],) */;
  %99 = %95.0;
  %100 = %98.0;
  (%99, %100, meta[relay.Constant][3] /* ty=Tensor[(780), float32] */)
}

def @func_7412(%var_7410: Tensor[(1, 15, 12), int32]) -> (Tensor[(2, 15, 12), int32],) {
  @func_7409(%var_7410) /* ty=(Tensor[(2, 15, 12), int32],) */
}

def @func_2683() -> (Tensor[(7, 13, 7), float64], Tensor[(450), int8]) {
  %101 = @func_2198() /* ty=(Tensor[(7, 13, 7), float64],) */;
  %102 = cast(meta[relay.Constant][4] /* ty=Tensor[(450), float32] */, dtype="float32") /* ty=Tensor[(450), float32] */;
  %103 = reshape(%102, newshape=[5, 6, 15]) /* ty=Tensor[(5, 6, 15), float32] */;
  %104 = @func_166(%103) /* ty=Tensor[(5, 6, 15), float32] */;
  %105 = cast(%104, dtype="int8") /* ty=Tensor[(5, 6, 15), int8] */;
  %106 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(450), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %107 = cast(meta[relay.Constant][4] /* ty=Tensor[(450), float32] */, dtype="int8") /* ty=Tensor[(450), int8] */;
  %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?), int8] */;
  %109 = %101.0;
  %110 = subtract(%107, %108) /* ty=Tensor[(450), int8] */;
  (%109, %110)
}

def @func_4116() -> (Tensor[(450), bool], Tensor[(8, 8, 4), float64]) {
  @func_4114() /* ty=(Tensor[(450), bool], Tensor[(8, 8, 4), float64]) */
}

def @func_3148() -> (Tensor[(450), bool], Tensor[(7, 13, 7), float64], Tensor[(132, 2), float64], Tensor[(132, 2), float64], Tensor[(7, 13, 7), float64]) {
  %111 = @func_2683() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(450), int8]) */;
  %112 = @func_2399() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(12, 11, 2), float64], Tensor[(132, 2), float32]) */;
  %113 = %112.2;
  %114 = cast(%113, dtype="float32") /* ty=Tensor[(132, 2), float32] */;
  %115 = asin(%114) /* ty=Tensor[(132, 2), float32] */;
  %116 = cast(%115, dtype="float64") /* ty=Tensor[(132, 2), float64] */;
  %117 = cast(meta[relay.Constant][5] /* ty=Tensor[(132, 2), float32] */, dtype="float64") /* ty=Tensor[(132, 2), float64] */;
  %118 = shape_of(%115, dtype="int32") /* ty=Tensor[(2), int32] */;
  %119 = cast(%115, dtype="float64") /* ty=Tensor[(132, 2), float64] */;
  %120 = dyn.reshape(%117, %118, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %121 = @func_2198() /* ty=(Tensor[(7, 13, 7), float64],) */;
  %122 = @func_2858() /* ty=Tensor[(450), bool] */;
  %123 = %111.0;
  %124 = atan(%116) /* ty=Tensor[(132, 2), float64] */;
  %125 = mod(%119, %120) /* ty=Tensor[(132, 2), float64] */;
  %126 = %121.0;
  (%122, %123, %124, %125, %126)
}

def @func_5232() -> (Tensor[(7, 13, 7), float64], Tensor[(450), int8], Tensor[(450), int8]) {
  @func_5230() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(450), int8], Tensor[(450), int8]) */
}

def @func_4386() -> Tensor[(450), int8] {
  @func_4384() /* ty=Tensor[(450), int8] */
}

def @func_1149(%var_1146: Tensor[(10, 15, 16), bool], %var_1147: Tensor[(10, 15, 16), bool], %var_1148: Tensor[(450), float32]) -> (Tensor[(5, 6, 15), float32], Tensor[(450), float32], Tensor[(10, 15, 16), bool], Tensor[(5, 6, 15), float32]) {
  @func_1144(%var_1146, %var_1147, %var_1148) /* ty=(Tensor[(5, 6, 15), float32], Tensor[(450), float32], Tensor[(10, 15, 16), bool], Tensor[(5, 6, 15), float32]) */
}

def @func_4602(%var_4538: Tensor[(75), int8]) -> (Tensor[(450), bool], Tensor[(5, 6, 15), float32], Tensor[(2400), bool], Tensor[(75), int8], Tensor[(728, 9), bool], Tensor[(728, 9), float32], Tensor[(450), bool], Tensor[(450), int8], Tensor[(450), int8]) {
  %127 = @func_3589() /* ty=(Tensor[(450), bool],) */;
  %128 = cast(meta[relay.Constant][6] /* ty=Tensor[(2400), bool] */, dtype="bool") /* ty=Tensor[(2400), bool] */;
  %129 = cast(meta[relay.Constant][6] /* ty=Tensor[(2400), bool] */, dtype="bool") /* ty=Tensor[(2400), bool] */;
  %130 = %127.0;
  %131 = cast(%130, dtype="float32") /* ty=Tensor[(450), float32] */;
  %132 = reshape(%128, newshape=[10, 15, 16]) /* ty=Tensor[(10, 15, 16), bool] */;
  %133 = reshape(%129, newshape=[10, 15, 16]) /* ty=Tensor[(10, 15, 16), bool] */;
  %134 = reshape(%131, newshape=[450]) /* ty=Tensor[(450), float32] */;
  %135 = @func_1144(%132, %133, %134) /* ty=(Tensor[(5, 6, 15), float32], Tensor[(450), float32], Tensor[(10, 15, 16), bool], Tensor[(5, 6, 15), float32]) */;
  %136 = cast(meta[relay.Constant][7] /* ty=Tensor[(728, 9), float32] */, dtype="float32") /* ty=Tensor[(728, 9), float32] */;
  %137 = acos(%136) /* ty=Tensor[(728, 9), float32] */;
  %138 = cast(%137, dtype="float64") /* ty=Tensor[(728, 9), float64] */;
  %139 = atanh(%138) /* ty=Tensor[(728, 9), float64] */;
  %140 = cast(%var_4538, dtype="int8") /* ty=Tensor[(75), int8] */;
  %141 = reshape(%140, newshape=[75]) /* ty=Tensor[(75), int8] */;
  %142 = @func_4034(%141) /* ty=(Tensor[(7, 13, 7), float64], Tensor[(5, 6, 15), float32], Tensor[(75), int8], Tensor[(728, 1), uint8]) */;
  %143 = %142.3;
  %144 = cast(%143, dtype="float32") /* ty=Tensor[(728, 1), float32] */;
  %145 = atan(%144) /* ty=Tensor[(728, 1), float32] */;
  %146 = cast(%145, dtype="bool") /* ty=Tensor[(728, 1), bool] */;
  %147 = cast(meta[relay.Constant][7] /* ty=Tensor[(728, 9), float32] */, dtype="bool") /* ty=Tensor[(728, 9), bool] */;
  %148 = not_equal(%146, %147) /* ty=Tensor[(728, 9), bool] */;
  %149 = cast(%148, dtype="bool") /* ty=Tensor[(728, 9), bool] */;
  %150 = shape_of(%139, dtype="int32") /* ty=Tensor[(2), int32] */;
  %151 = cast(%139, dtype="bool") /* ty=Tensor[(728, 9), bool] */;
  %152 = dyn.reshape(%149, %150, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %153 = cast(%139, dtype="float32") /* ty=Tensor[(728, 9), float32] */;
  %154 = @func_3941() /* ty=(Tensor[(450), bool], Tensor[(450), bool]) */;
  %155 = %135.3;
  %156 = equal(%151, %152) /* ty=Tensor[(728, 9), bool] */;
  %157 = exp(%153) /* ty=Tensor[(728, 9), float32] */;
  %158 = %154.0;
  %159 = @func_4128() /* ty=Tensor[(450), int8] */;
  %160 = @func_4384() /* ty=Tensor[(450), int8] */;
  (%130, %155, meta[relay.Constant][6] /* ty=Tensor[(2400), bool] */, %var_4538, %156, %157, %158, %159, %160)
}

def @func_4036(%var_4035: Tensor[(75), int8]) -> (Tensor[(7, 13, 7), float64], Tensor[(5, 6, 15), float32], Tensor[(75), int8], Tensor[(728, 1), uint8]) {
  %169 = fn (%var_4026: Tensor[(75), int8]) -> (Tensor[(7, 13, 7), float64], Tensor[(5, 6, 15), float32], Tensor[(75), int8], Tensor[(728, 1), uint8]) {
    %161 = @func_2410() /* ty=(Tensor[(7, 13, 7), float64],) */;
    %162 = cast(%var_4026, dtype="int8") /* ty=Tensor[(75), int8] */;
    %163 = cast(meta[relay.Constant][8] /* ty=Tensor[(728, 1), uint8] */, dtype="uint8") /* ty=Tensor[(728, 1), uint8] */;
    %164 = reshape(%162, newshape=[15, 1, 5]) /* ty=Tensor[(15, 1, 5), int8] */;
    %165 = reshape(%163, newshape=[728]) /* ty=Tensor[(728), uint8] */;
    %166 = @func_2279(%164, %165) /* ty=(Tensor[(15, 1, 5), int8], Tensor[(5, 6, 15), float32], Tensor[(450), float32], Tensor[(8, 7, 13), uint8], Tensor[(728), uint8], Tensor[(1575), int16]) */;
    %167 = %161.0;
    %168 = %166.1;
    (%167, %168, %var_4026, meta[relay.Constant][8] /* ty=Tensor[(728, 1), uint8] */)
  };
  %169(%var_4035) /* ty=(Tensor[(7, 13, 7), float64], Tensor[(5, 6, 15), float32], Tensor[(75), int8], Tensor[(728, 1), uint8]) */
}

def @func_4439() -> (Tensor[(450), float64],) {
  %177 = fn () -> (Tensor[(450), float64],) {
    %170 = @func_2791() /* ty=(Tensor[(450), int8],) */;
    %171 = %170.0;
    %172 = cast(meta[relay.Constant][9] /* ty=Tensor[(450), int8] */, dtype="float64") /* ty=Tensor[(450), float64] */;
    %173 = shape_of(%171, dtype="int32") /* ty=Tensor[(1), int32] */;
    %174 = cast(%171, dtype="float64") /* ty=Tensor[(450), float64] */;
    %175 = dyn.reshape(%172, %173, newshape=[]) /* ty=Tensor[(?), float64] */;
    %176 = mod(%174, %175) /* ty=Tensor[(450), float64] */;
    (%176,)
  };
  %177() /* ty=(Tensor[(450), float64],) */
}

def @func_4854() -> (Tensor[(7, 13, 7), float64],) {
  @func_4852() /* ty=(Tensor[(7, 13, 7), float64],) */
}

def @func_7099() -> (Tensor[(450), int8],) {
  %180 = fn () -> (Tensor[(450), int8],) {
    %178 = @func_5230() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(450), int8], Tensor[(450), int8]) */;
    %179 = %178.2;
    (%179,)
  };
  %180() /* ty=(Tensor[(450), int8],) */
}

def @func_3259() -> (Tensor[(7, 13, 7), float64], Tensor[(7, 13, 7), float64]) {
  %185 = fn () -> (Tensor[(7, 13, 7), float64], Tensor[(7, 13, 7), float64]) {
    %181 = @func_3148() /* ty=(Tensor[(450), bool], Tensor[(7, 13, 7), float64], Tensor[(132, 2), float64], Tensor[(132, 2), float64], Tensor[(7, 13, 7), float64]) */;
    %182 = @func_3148() /* ty=(Tensor[(450), bool], Tensor[(7, 13, 7), float64], Tensor[(132, 2), float64], Tensor[(132, 2), float64], Tensor[(7, 13, 7), float64]) */;
    %183 = %181.4;
    %184 = %182.4;
    (%183, %184)
  };
  %185() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(7, 13, 7), float64]) */
}

def @func_6633(%var_6592: Tensor[(6, 1, 2), float32], %var_6597: Tensor[(234), float32]) -> (Tensor[(6, 13, 3), float32], Tensor[(234), float32], Tensor[(450), float64], Tensor[(6, ?, 2), bool], Tensor[(450), int8], Tensor[(40), float32], uint32, Tensor[(210), uint32], Tensor[(40), float32]) {
  %186 = cast(%var_6597, dtype="float32") /* ty=Tensor[(234), float32] */;
  %187 = reshape(%186, newshape=[6, 13, 3]) /* ty=Tensor[(6, 13, 3), float32] */;
  %188 = @func_1401(%187) /* ty=(Tensor[(6, 13, 3), float32],) */;
  %189 = cast(%var_6592, dtype="float32") /* ty=Tensor[(6, 1, 2), float32] */;
  %190 = tan(%189) /* ty=Tensor[(6, 1, 2), float32] */;
  %191 = cast(%var_6592, dtype="bool") /* ty=Tensor[(6, 1, 2), bool] */;
  %192 = shape_of(%190, dtype="int32") /* ty=Tensor[(3), int32] */;
  %193 = cast(%190, dtype="bool") /* ty=Tensor[(6, 1, 2), bool] */;
  %194 = dyn.reshape(%191, %192, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %195 = @func_4063() /* ty=(Tensor[(450), int8],) */;
  %196 = cast(meta[relay.Constant][10] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %197 = cast(meta[relay.Constant][11] /* ty=Tensor[(210), uint32] */, dtype="uint32") /* ty=Tensor[(210), uint32] */;
  %198 = cast(meta[relay.Constant][12] /* ty=Tensor[(40), float32] */, dtype="float32") /* ty=Tensor[(40), float32] */;
  %199 = reshape(%196, newshape=[]) /* ty=uint32 */;
  %200 = reshape(%197, newshape=[6, 5, 7]) /* ty=Tensor[(6, 5, 7), uint32] */;
  %201 = reshape(%198, newshape=[40]) /* ty=Tensor[(40), float32] */;
  %202 = @func_6165(%199, %200, %201) /* ty=(Tensor[(6, 5, 7), uint32], Tensor[(10, 4, 12), bool], Tensor[(40), float32], Tensor[(480), float32]) */;
  %203 = %188.0;
  %204 = @func_5973() /* ty=Tensor[(450), float64] */;
  %205 = logical_or(%193, %194) /* ty=Tensor[(6, ?, 2), bool] */;
  %206 = %195.0;
  %207 = %202.2;
  (%203, %var_6597, %204, %205, %206, %207, meta[relay.Constant][10] /* ty=uint32 */, meta[relay.Constant][11] /* ty=Tensor[(210), uint32] */, meta[relay.Constant][12] /* ty=Tensor[(40), float32] */)
}

def @func_6591() -> Tensor[(780), bool] {
  @func_6589() /* ty=Tensor[(780), bool] */
}

def @func_6318() -> (Tensor[(780), float32], Tensor[(16, 2, 12), float32]) {
  %212 = fn () -> (Tensor[(780), float32], Tensor[(16, 2, 12), float32]) {
    %208 = @func_6091() /* ty=Tensor[(16, 2, 12), float64] */;
    %209 = cast(%208, dtype="float32") /* ty=Tensor[(16, 2, 12), float32] */;
    %210 = @func_4415() /* ty=Tensor[(780), float32] */;
    %211 = log2(%209) /* ty=Tensor[(16, 2, 12), float32] */;
    (%210, %211)
  };
  %212() /* ty=(Tensor[(780), float32], Tensor[(16, 2, 12), float32]) */
}

def @func_6861(%var_6860: Tensor[(75), int8]) -> (Tensor[(450), bool], Tensor[(450), int8], Tensor[(75), int8]) {
  %218 = fn (%var_6855: Tensor[(75), int8]) -> (Tensor[(450), bool], Tensor[(450), int8], Tensor[(75), int8]) {
    %213 = cast(%var_6855, dtype="int8") /* ty=Tensor[(75), int8] */;
    %214 = reshape(%213, newshape=[75]) /* ty=Tensor[(75), int8] */;
    %215 = @func_4602(%214) /* ty=(Tensor[(450), bool], Tensor[(5, 6, 15), float32], Tensor[(2400), bool], Tensor[(75), int8], Tensor[(728, 9), bool], Tensor[(728, 9), float32], Tensor[(450), bool], Tensor[(450), int8], Tensor[(450), int8]) */;
    %216 = @func_3506() /* ty=Tensor[(450), bool] */;
    %217 = %215.7;
    (%216, %217, %var_6855)
  };
  %218(%var_6860) /* ty=(Tensor[(450), bool], Tensor[(450), int8], Tensor[(75), int8]) */
}

def @func_5132() -> (Tensor[(7, 13, 7), float64],) {
  %221 = fn () -> (Tensor[(7, 13, 7), float64],) {
    %219 = @func_3258() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(7, 13, 7), float64]) */;
    %220 = %219.1;
    (%220,)
  };
  %221() /* ty=(Tensor[(7, 13, 7), float64],) */
}

def @func_5041(%var_5036: Tensor[(8, 9, 7), float64], %var_5037: Tensor[(8, 9, 7), float64]) -> (Tensor[(8, 9, 7), float64],) {
  %222 = cast(%var_5037, dtype="float64") /* ty=Tensor[(8, 9, 7), float64] */;
  %223 = shape_of(%var_5036, dtype="int32") /* ty=Tensor[(3), int32] */;
  %224 = cast(%var_5036, dtype="float64") /* ty=Tensor[(8, 9, 7), float64] */;
  %225 = dyn.reshape(%222, %223, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %226 = floor_divide(%224, %225) /* ty=Tensor[(8, 9, 7), float64] */;
  (%226,)
}

def @func_1983(%var_1977: Tensor[(12, 11, 2), float32]) -> Tensor[(12, 11, 2), float64] {
  %227 = cast(%var_1977, dtype="float32") /* ty=Tensor[(12, 11, 2), float32] */;
  %228 = sinh(%227) /* ty=Tensor[(12, 11, 2), float32] */;
  %229 = cast(%228, dtype="float64") /* ty=Tensor[(12, 11, 2), float64] */;
  exp(%229) /* ty=Tensor[(12, 11, 2), float64] */
}

def @func_2400() -> (Tensor[(7, 13, 7), float64], Tensor[(12, 11, 2), float64], Tensor[(132, 2), float32]) {
  %235 = fn () -> (Tensor[(7, 13, 7), float64], Tensor[(12, 11, 2), float64], Tensor[(132, 2), float32]) {
    %230 = @func_2198() /* ty=(Tensor[(7, 13, 7), float64],) */;
    %231 = cast(meta[relay.Constant][13] /* ty=Tensor[(132, 2), float32] */, dtype="float32") /* ty=Tensor[(132, 2), float32] */;
    %232 = reshape(%231, newshape=[12, 11, 2]) /* ty=Tensor[(12, 11, 2), float32] */;
    %233 = %230.0;
    %234 = @func_1983(%232) /* ty=Tensor[(12, 11, 2), float64] */;
    (%233, %234, meta[relay.Constant][13] /* ty=Tensor[(132, 2), float32] */)
  };
  %235() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(12, 11, 2), float64], Tensor[(132, 2), float32]) */
}

def @func_7680() -> Tensor[(7, 13, 7), float64] {
  %237 = fn () -> Tensor[(7, 13, 7), float64] {
    %236 = @func_2198() /* ty=(Tensor[(7, 13, 7), float64],) */;
    %236.0
  };
  %237() /* ty=Tensor[(7, 13, 7), float64] */
}

def @func_4146() -> (Tensor[(450), bool],) {
  @func_4144() /* ty=(Tensor[(450), bool],) */
}

def @func_2304(%var_2303: Tensor[(6, 10, 13), float32]) -> (Tensor[(6, 10, 13), float32],) {
  %241 = fn (%var_2295: Tensor[(6, 10, 13), float32]) -> (Tensor[(6, 10, 13), float32],) {
    %238 = cast(2.65088f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %239 = cast(%var_2295, dtype="float32") /* ty=Tensor[(6, 10, 13), float32] */;
    %240 = divide(%238, %239) /* ty=Tensor[(6, 10, 13), float32] */;
    (%240,)
  };
  %241(%var_2303) /* ty=(Tensor[(6, 10, 13), float32],) */
}

def @func_1666(%var_1627: Tensor[(8, 7, 13), uint8], %var_1638: Tensor[(1575), int16], %var_1639: Tensor[(450), float32]) -> (Tensor[(8, 7, 13), uint8], Tensor[(?, 450), int16], Tensor[(1575), int16], Tensor[(450), float32], Tensor[(?, 450), uint64], Tensor[(?, 450), uint64]) {
  %242 = cast(%var_1627, dtype="uint8") /* ty=Tensor[(8, 7, 13), uint8] */;
  %243 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(8, 7, 13), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %244 = cast(meta[relay.Constant][14] /* ty=Tensor[(8, 7, 13), uint8] */, dtype="uint8") /* ty=Tensor[(8, 7, 13), uint8] */;
  %245 = dyn.reshape(%242, %243, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %246 = cast(%var_1638, dtype="int16") /* ty=Tensor[(1575), int16] */;
  %247 = cast(%var_1639, dtype="float32") /* ty=Tensor[(450), float32] */;
  %248 = reshape(%246, newshape=[7, 15, 15]) /* ty=Tensor[(7, 15, 15), int16] */;
  %249 = reshape(%247, newshape=[1, 450]) /* ty=Tensor[(1, 450), float32] */;
  %250 = @func_728(%248, %249) /* ty=(Tensor[(7, 15, 15), int16], Tensor[(5, 6, 15), float32], Tensor[(?, 450), uint64], Tensor[(5, 6, 15), float32], Tensor[(?, 450), int16]) */;
  %251 = cast(%var_1638, dtype="int16") /* ty=Tensor[(1575), int16] */;
  %252 = %250.4;
  %253 = cast(%252, dtype="float32") /* ty=Tensor[(?, 450), float32] */;
  %254 = reshape(%251, newshape=[7, 15, 15]) /* ty=Tensor[(7, 15, 15), int16] */;
  %255 = reshape(%253, newshape=[1, 450]) /* ty=Tensor[(1, 450), float32] */;
  %256 = @func_728(%254, %255) /* ty=(Tensor[(7, 15, 15), int16], Tensor[(5, 6, 15), float32], Tensor[(?, 450), uint64], Tensor[(5, 6, 15), float32], Tensor[(?, 450), int16]) */;
  %257 = cast(%var_1638, dtype="int16") /* ty=Tensor[(1575), int16] */;
  %258 = cast(%252, dtype="float32") /* ty=Tensor[(?, 450), float32] */;
  %259 = reshape(%257, newshape=[7, 15, 15]) /* ty=Tensor[(7, 15, 15), int16] */;
  %260 = reshape(%258, newshape=[1, 450]) /* ty=Tensor[(1, 450), float32] */;
  %261 = @func_728(%259, %260) /* ty=(Tensor[(7, 15, 15), int16], Tensor[(5, 6, 15), float32], Tensor[(?, 450), uint64], Tensor[(5, 6, 15), float32], Tensor[(?, 450), int16]) */;
  %262 = left_shift(%244, %245) /* ty=Tensor[(8, 7, 13), uint8] */;
  %263 = %256.2;
  %264 = %261.2;
  (%262, %252, %var_1638, %var_1639, %263, %264)
}

def @func_2545(%var_2541: Tensor[(5, 4, 11), float32], %var_2542: Tensor[(5, 4, 11), float32], %var_2543: Tensor[(14, 1575), int16], %var_2544: Tensor[(14, 1575), uint64]) -> (Tensor[(5, 4, 11), float32], Tensor[(1575), int16], Tensor[(78), uint8], Tensor[(132, 2), float32], Tensor[(14, 1575), float32]) {
  %286 = fn (%var_2512: Tensor[(5, 4, 11), float32], %var_2513: Tensor[(5, 4, 11), float32], %var_2524: Tensor[(14, 1575), int16], %var_2533: Tensor[(14, 1575), uint64]) -> (Tensor[(5, 4, 11), float32], Tensor[(1575), int16], Tensor[(78), uint8], Tensor[(132, 2), float32], Tensor[(14, 1575), float32]) {
    %265 = cast(%var_2513, dtype="float32") /* ty=Tensor[(5, 4, 11), float32] */;
    %266 = shape_of(%var_2512, dtype="int32") /* ty=Tensor[(3), int32] */;
    %267 = cast(%var_2512, dtype="float32") /* ty=Tensor[(5, 4, 11), float32] */;
    %268 = dyn.reshape(%265, %266, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %269 = cast(meta[relay.Constant][15] /* ty=Tensor[(78), uint8] */, dtype="uint8") /* ty=Tensor[(78), uint8] */;
    %270 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 1575), int16] */, dtype="int16") /* ty=Tensor[(1, 1575), int16] */;
    %271 = reshape(%269, newshape=[6, 1, 13]) /* ty=Tensor[(6, 1, 13), uint8] */;
    %272 = reshape(%270, newshape=[1575]) /* ty=Tensor[(1575), int16] */;
    %273 = @func_2073(%271, %272) /* ty=(Tensor[(6, 4, 13), bool], Tensor[(5, 6, 15), float32], Tensor[(450), float32], Tensor[(5, 6, 15), float32], Tensor[(1080), bool], Tensor[(1575), int16], Tensor[(6, ?, 13), float32]) */;
    %274 = @func_2399() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(12, 11, 2), float64], Tensor[(132, 2), float32]) */;
    %275 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 1575), int16] */, dtype="uint64") /* ty=Tensor[(1, 1575), uint64] */;
    %276 = cast(%var_2524, dtype="uint64") /* ty=Tensor[(14, 1575), uint64] */;
    %277 = minimum(%275, %276) /* ty=Tensor[(14, 1575), uint64] */;
    %278 = cast(%var_2533, dtype="float32") /* ty=Tensor[(14, 1575), float32] */;
    %279 = shape_of(%277, dtype="int32") /* ty=Tensor[(2), int32] */;
    %280 = cast(%277, dtype="float32") /* ty=Tensor[(14, 1575), float32] */;
    %281 = dyn.reshape(%278, %279, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %282 = subtract(%267, %268) /* ty=Tensor[(5, 4, 11), float32] */;
    %283 = %273.5;
    %284 = %274.2;
    %285 = floor_mod(%280, %281) /* ty=Tensor[(14, 1575), float32] */;
    (%282, %283, meta[relay.Constant][15] /* ty=Tensor[(78), uint8] */, %284, %285)
  };
  %286(%var_2541, %var_2542, %var_2543, %var_2544) /* ty=(Tensor[(5, 4, 11), float32], Tensor[(1575), int16], Tensor[(78), uint8], Tensor[(132, 2), float32], Tensor[(14, 1575), float32]) */
}

def @func_6637(%var_6635: Tensor[(6, 1, 2), float32], %var_6636: Tensor[(234), float32]) -> (Tensor[(6, 13, 3), float32], Tensor[(234), float32], Tensor[(450), float64], Tensor[(6, ?, 2), bool], Tensor[(450), int8], Tensor[(40), float32], uint32, Tensor[(210), uint32], Tensor[(40), float32]) {
  @func_6633(%var_6635, %var_6636) /* ty=(Tensor[(6, 13, 3), float32], Tensor[(234), float32], Tensor[(450), float64], Tensor[(6, ?, 2), bool], Tensor[(450), int8], Tensor[(40), float32], uint32, Tensor[(210), uint32], Tensor[(40), float32]) */
}

def @func_2685() -> (Tensor[(7, 13, 7), float64], Tensor[(450), int8]) {
  @func_2683() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(450), int8]) */
}

def @func_5185(%var_5183: Tensor[(220), float32]) -> (Tensor[(7, 13, 7), float64], Tensor[(5, 4, 11), float32], Tensor[(220), float32], Tensor[(22050), int16]) {
  @func_5182(%var_5183) /* ty=(Tensor[(7, 13, 7), float64], Tensor[(5, 4, 11), float32], Tensor[(220), float32], Tensor[(22050), int16]) */
}

def @func_3559() -> Tensor[(450), int8] {
  %288 = fn () -> Tensor[(450), int8] {
    %287 = @func_2683() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(450), int8]) */;
    %287.1
  };
  %288() /* ty=Tensor[(450), int8] */
}

def @func_5887(%var_5885: Tensor[(16, 13, 1), int8]) -> Tensor[(16, 13, 10), int8] {
  @func_5884(%var_5885) /* ty=Tensor[(16, 13, 10), int8] */
}

def @func_3757(%var_3755: Tensor[(10, 4, 1), float32], %var_3756: Tensor[(10, 4, 12), float32]) -> (Tensor[(10, 4, 12), bool],) {
  @func_3753(%var_3755, %var_3756) /* ty=(Tensor[(10, 4, 12), bool],) */
}

def @func_732(%var_730: Tensor[(7, 15, 15), int16], %var_731: Tensor[(1, 450), float32]) -> (Tensor[(7, 15, 15), int16], Tensor[(5, 6, 15), float32], Tensor[(?, 450), uint64], Tensor[(5, 6, 15), float32], Tensor[(?, 450), int16]) {
  @func_728(%var_730, %var_731) /* ty=(Tensor[(7, 15, 15), int16], Tensor[(5, 6, 15), float32], Tensor[(?, 450), uint64], Tensor[(5, 6, 15), float32], Tensor[(?, 450), int16]) */
}

def @func_6561() -> (Tensor[(16, 2, 12), uint32],) {
  %289 = @func_4335() /* ty=(Tensor[(450), int8], Tensor[(16, 2, 12), uint32], Tensor[(384), uint32]) */;
  %290 = %289.1;
  (%290,)
}

def @func_3065(%var_3063: int16, %var_3064: Tensor[(7, 14, 12), int16]) -> (Tensor[(7, 14, 12), int16], Tensor[(12, 11, 2), float64], Tensor[(7, 13, 7), float64], Tensor[(7, 13, 7), float64], Tensor[(264, 1), uint64]) {
  @func_3061(%var_3063, %var_3064) /* ty=(Tensor[(7, 14, 12), int16], Tensor[(12, 11, 2), float64], Tensor[(7, 13, 7), float64], Tensor[(7, 13, 7), float64], Tensor[(264, 1), uint64]) */
}

def @func_5268() -> Tensor[(7, 13, 7), float64] {
  %291 = @func_5131() /* ty=(Tensor[(7, 13, 7), float64],) */;
  %291.0
}

def @func_7409(%var_7401: Tensor[(1, 15, 12), int32]) -> (Tensor[(2, 15, 12), int32],) {
  %292 = cast(%var_7401, dtype="int32") /* ty=Tensor[(1, 15, 12), int32] */;
  %293 = cast(meta[relay.Constant][17] /* ty=Tensor[(2, 15, 12), int32] */, dtype="int32") /* ty=Tensor[(2, 15, 12), int32] */;
  %294 = bitwise_or(%292, %293) /* ty=Tensor[(2, 15, 12), int32] */;
  (%294,)
}

def @func_6212(%var_6211: Tensor[(7, 13, 7), float64]) -> Tensor[(7, 13, 7), int32] {
  %301 = fn (%var_6205: Tensor[(7, 13, 7), float64]) -> Tensor[(7, 13, 7), int32] {
    %295 = @func_4624() /* ty=(Tensor[(7, 13, 7), float64],) */;
    %296 = %295.0;
    %297 = cast(%var_6205, dtype="int32") /* ty=Tensor[(7, 13, 7), int32] */;
    %298 = shape_of(%296, dtype="int32") /* ty=Tensor[(3), int32] */;
    %299 = cast(%296, dtype="int32") /* ty=Tensor[(7, 13, 7), int32] */;
    %300 = dyn.reshape(%297, %298, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    subtract(%299, %300) /* ty=Tensor[(7, 13, 7), int32] */
  };
  %301(%var_6211) /* ty=Tensor[(7, 13, 7), int32] */
}

def @func_6040() -> (Tensor[(450), float64], Tensor[(7, 13, 7), float64], Tensor[(450), bool], Tensor[(5, 6, 15), float64]) {
  @func_6038() /* ty=(Tensor[(450), float64], Tensor[(7, 13, 7), float64], Tensor[(450), bool], Tensor[(5, 6, 15), float64]) */
}

def @func_6762() -> Tensor[(7, 13, 7), float64] {
  %303 = fn () -> Tensor[(7, 13, 7), float64] {
    %302 = @func_2198() /* ty=(Tensor[(7, 13, 7), float64],) */;
    %302.0
  };
  %303() /* ty=Tensor[(7, 13, 7), float64] */
}

def @func_4130() -> Tensor[(450), int8] {
  @func_4128() /* ty=Tensor[(450), int8] */
}

def @func_3431() -> Tensor[(7, 13, 7), float64] {
  %305 = fn () -> Tensor[(7, 13, 7), float64] {
    %304 = @func_3258() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(7, 13, 7), float64]) */;
    %304.0
  };
  %305() /* ty=Tensor[(7, 13, 7), float64] */
}

def @main(%var_7890: Tensor[(9, 14, 7), float32], %var_7891: Tensor[(9, 14, 7), float32]) -> (Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), float64]) {
  %306 = cast(%var_7891, dtype="float32") /* ty=Tensor[(9, 14, 7), float32] */;
  %307 = shape_of(%var_7890, dtype="int32") /* ty=Tensor[(3), int32] */;
  %308 = cast(%var_7890, dtype="float32") /* ty=Tensor[(9, 14, 7), float32] */;
  %309 = dyn.reshape(%306, %307, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %310 = cast(%var_7891, dtype="float64") /* ty=Tensor[(9, 14, 7), float64] */;
  %311 = power(%308, %309) /* ty=Tensor[(9, 14, 7), float32] */;
  %312 = tan(%310) /* ty=Tensor[(9, 14, 7), float64] */;
  (%311, %312)
}

def @func_7281() -> (Tensor[(7, 13, 7), float64],) {
  %313 = @func_3430() /* ty=Tensor[(7, 13, 7), float64] */;
  (%313,)
}

def @func_1144(%var_1115: Tensor[(10, 15, 16), bool], %var_1116: Tensor[(10, 15, 16), bool], %var_1127: Tensor[(450), float32]) -> (Tensor[(5, 6, 15), float32], Tensor[(450), float32], Tensor[(10, 15, 16), bool], Tensor[(5, 6, 15), float32]) {
  %314 = cast(%var_1127, dtype="float32") /* ty=Tensor[(450), float32] */;
  %315 = reshape(%314, newshape=[5, 6, 15]) /* ty=Tensor[(5, 6, 15), float32] */;
  %316 = cast(%var_1116, dtype="bool") /* ty=Tensor[(10, 15, 16), bool] */;
  %317 = shape_of(%var_1115, dtype="int32") /* ty=Tensor[(3), int32] */;
  %318 = cast(%var_1115, dtype="bool") /* ty=Tensor[(10, 15, 16), bool] */;
  %319 = dyn.reshape(%316, %317, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %320 = logical_or(%318, %319) /* ty=Tensor[(10, 15, 16), bool] */;
  %321 = cast(%320, dtype="float64") /* ty=Tensor[(10, 15, 16), float64] */;
  %322 = acosh(%321) /* ty=Tensor[(10, 15, 16), float64] */;
  %323 = cast(%320, dtype="bool") /* ty=Tensor[(10, 15, 16), bool] */;
  %324 = shape_of(%322, dtype="int32") /* ty=Tensor[(3), int32] */;
  %325 = cast(%322, dtype="bool") /* ty=Tensor[(10, 15, 16), bool] */;
  %326 = dyn.reshape(%323, %324, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %327 = cast(%var_1127, dtype="float32") /* ty=Tensor[(450), float32] */;
  %328 = reshape(%327, newshape=[5, 6, 15]) /* ty=Tensor[(5, 6, 15), float32] */;
  %329 = @func_166(%315) /* ty=Tensor[(5, 6, 15), float32] */;
  %330 = less_equal(%325, %326) /* ty=Tensor[(10, 15, 16), bool] */;
  %331 = @func_166(%328) /* ty=Tensor[(5, 6, 15), float32] */;
  (%329, %var_1127, %330, %331)
}

def @func_4220() -> Tensor[(450), bool] {
  %332 = fn () -> Tensor[(450), bool] {
    @func_4183() /* ty=Tensor[(450), bool] */
  };
  %332() /* ty=Tensor[(450), bool] */
}

def @func_7625() -> Tensor[(450), bool] {
  %334 = fn () -> Tensor[(450), bool] {
    %333 = @func_6126() /* ty=(Tensor[(450), bool], Tensor[(450), bool]) */;
    %333.0
  };
  %334() /* ty=Tensor[(450), bool] */
}

def @func_3826() -> Tensor[(7, 13, 7), float64] {
  %343 = fn () -> Tensor[(7, 13, 7), float64] {
    %335 = @func_2198() /* ty=(Tensor[(7, 13, 7), float64],) */;
    %336 = %335.0;
    %337 = cast(%336, dtype="float32") /* ty=Tensor[(7, 13, 7), float32] */;
    %338 = atan(%337) /* ty=Tensor[(7, 13, 7), float32] */;
    %339 = cast(%338, dtype="float64") /* ty=Tensor[(7, 13, 7), float64] */;
    %340 = shape_of(%336, dtype="int32") /* ty=Tensor[(3), int32] */;
    %341 = cast(%336, dtype="float64") /* ty=Tensor[(7, 13, 7), float64] */;
    %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    floor_divide(%341, %342) /* ty=Tensor[(7, 13, 7), float64] */
  };
  %343() /* ty=Tensor[(7, 13, 7), float64] */
}

def @func_4678(%var_4676: Tensor[(15, 10, 3), float64]) -> (Tensor[(15, 10, 3), float64], Tensor[(12, 11, 2), float64], Tensor[(780), float32]) {
  @func_4675(%var_4676) /* ty=(Tensor[(15, 10, 3), float64], Tensor[(12, 11, 2), float64], Tensor[(780), float32]) */
}

def @func_6170(%var_6167: uint32, %var_6168: Tensor[(6, 5, 7), uint32], %var_6169: Tensor[(40), float32]) -> (Tensor[(6, 5, 7), uint32], Tensor[(10, 4, 12), bool], Tensor[(40), float32], Tensor[(480), float32]) {
  @func_6165(%var_6167, %var_6168, %var_6169) /* ty=(Tensor[(6, 5, 7), uint32], Tensor[(10, 4, 12), bool], Tensor[(40), float32], Tensor[(480), float32]) */
}

def @func_6563() -> (Tensor[(16, 2, 12), uint32],) {
  @func_6561() /* ty=(Tensor[(16, 2, 12), uint32],) */
}

def @func_6092() -> Tensor[(16, 2, 12), float64] {
  %346 = fn () -> Tensor[(16, 2, 12), float64] {
    %344 = @func_6063() /* ty=Tensor[(16, 2, 12), float64] */;
    %345 = cast(%344, dtype="float64") /* ty=Tensor[(16, 2, 12), float64] */;
    atanh(%345) /* ty=Tensor[(16, 2, 12), float64] */
  };
  %346() /* ty=Tensor[(16, 2, 12), float64] */
}

def @func_2076(%var_2074: Tensor[(6, 1, 13), uint8], %var_2075: Tensor[(1575), int16]) -> (Tensor[(6, 4, 13), bool], Tensor[(5, 6, 15), float32], Tensor[(450), float32], Tensor[(5, 6, 15), float32], Tensor[(1080), bool], Tensor[(1575), int16], Tensor[(6, ?, 13), float32]) {
  %364 = fn (%var_2043: Tensor[(6, 1, 13), uint8], %var_2059: Tensor[(1575), int16]) -> (Tensor[(6, 4, 13), bool], Tensor[(5, 6, 15), float32], Tensor[(450), float32], Tensor[(5, 6, 15), float32], Tensor[(1080), bool], Tensor[(1575), int16], Tensor[(6, ?, 13), float32]) {
    %347 = cast(%var_2043, dtype="bool") /* ty=Tensor[(6, 1, 13), bool] */;
    %348 = cast(meta[relay.Constant][18] /* ty=Tensor[(6, 4, 13), uint8] */, dtype="bool") /* ty=Tensor[(6, 4, 13), bool] */;
    %349 = cast(meta[relay.Constant][19] /* ty=Tensor[(450), float32] */, dtype="float32") /* ty=Tensor[(450), float32] */;
    %350 = reshape(%349, newshape=[5, 6, 15]) /* ty=Tensor[(5, 6, 15), float32] */;
    %351 = cast(meta[relay.Constant][20] /* ty=Tensor[(1080), bool] */, dtype="bool") /* ty=Tensor[(1080), bool] */;
    %352 = cast(%var_2059, dtype="int16") /* ty=Tensor[(1575), int16] */;
    %353 = reshape(%351, newshape=[10, 9, 12]) /* ty=Tensor[(10, 9, 12), bool] */;
    %354 = reshape(%352, newshape=[105, 15]) /* ty=Tensor[(105, 15), int16] */;
    %355 = @func_1928(%353, %354) /* ty=(Tensor[(10, 9, 12), bool], Tensor[(5, 6, 15), float32], Tensor[(105, 15), int16], Tensor[(450), float32]) */;
    %356 = cast(meta[relay.Constant][21] /* ty=Tensor[(6, 1, 13), uint8] */, dtype="float32") /* ty=Tensor[(6, 1, 13), float32] */;
    %357 = shape_of(%var_2043, dtype="int32") /* ty=Tensor[(3), int32] */;
    %358 = cast(%var_2043, dtype="float32") /* ty=Tensor[(6, 1, 13), float32] */;
    %359 = dyn.reshape(%356, %357, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %360 = greater(%347, %348) /* ty=Tensor[(6, 4, 13), bool] */;
    %361 = @func_166(%350) /* ty=Tensor[(5, 6, 15), float32] */;
    %362 = %355.1;
    %363 = maximum(%358, %359) /* ty=Tensor[(6, ?, 13), float32] */;
    (%360, %361, meta[relay.Constant][19] /* ty=Tensor[(450), float32] */, %362, meta[relay.Constant][20] /* ty=Tensor[(1080), bool] */, %var_2059, %363)
  };
  %364(%var_2074, %var_2075) /* ty=(Tensor[(6, 4, 13), bool], Tensor[(5, 6, 15), float32], Tensor[(450), float32], Tensor[(5, 6, 15), float32], Tensor[(1080), bool], Tensor[(1575), int16], Tensor[(6, ?, 13), float32]) */
}

def @func_7232() -> Tensor[(450), int8] {
  %366 = fn () -> Tensor[(450), int8] {
    %365 = @func_6426() /* ty=(Tensor[(450), int8],) */;
    %365.0
  };
  %366() /* ty=Tensor[(450), int8] */
}

def @func_6165(%var_6151: uint32, %var_6152: Tensor[(6, 5, 7), uint32], %var_6158: Tensor[(40), float32]) -> (Tensor[(6, 5, 7), uint32], Tensor[(10, 4, 12), bool], Tensor[(40), float32], Tensor[(480), float32]) {
  %367 = cast(%var_6151, dtype="uint32") /* ty=uint32 */;
  %368 = cast(%var_6152, dtype="uint32") /* ty=Tensor[(6, 5, 7), uint32] */;
  %369 = cast(%var_6158, dtype="float32") /* ty=Tensor[(40), float32] */;
  %370 = cast(meta[relay.Constant][22] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %371 = reshape(%369, newshape=[10, 4, 1]) /* ty=Tensor[(10, 4, 1), float32] */;
  %372 = reshape(%370, newshape=[10, 4, 12]) /* ty=Tensor[(10, 4, 12), float32] */;
  %373 = @func_3753(%371, %372) /* ty=(Tensor[(10, 4, 12), bool],) */;
  %374 = maximum(%367, %368) /* ty=Tensor[(6, 5, 7), uint32] */;
  %375 = %373.0;
  (%374, %375, %var_6158, meta[relay.Constant][22] /* ty=Tensor[(480), float32] */)
}

def @func_3287(%var_3266: int32, %var_3267: Tensor[(1, 2, 4), int32]) -> (Tensor[(1, 2, 4), uint32], Tensor[(1, 2, 4), float32]) {
  %376 = cast(%var_3266, dtype="uint32") /* ty=uint32 */;
  %377 = cast(%var_3267, dtype="uint32") /* ty=Tensor[(1, 2, 4), uint32] */;
  %378 = cast(%var_3266, dtype="int32") /* ty=int32 */;
  %379 = cast(%var_3267, dtype="int32") /* ty=Tensor[(1, 2, 4), int32] */;
  %380 = left_shift(%378, %379) /* ty=Tensor[(1, 2, 4), int32] */;
  %381 = cast(%380, dtype="float32") /* ty=Tensor[(1, 2, 4), float32] */;
  %382 = right_shift(%376, %377) /* ty=Tensor[(1, 2, 4), uint32] */;
  %383 = atanh(%381) /* ty=Tensor[(1, 2, 4), float32] */;
  (%382, %383)
}

def @func_6589() -> Tensor[(780), bool] {
  @func_5719() /* ty=Tensor[(780), bool] */
}

def @func_3790(%var_3763: Tensor[(6, 5, 7), float32]) -> (Tensor[(6, 5, 7), float64],) {
  %384 = cast(%var_3763, dtype="float32") /* ty=Tensor[(6, 5, 7), float32] */;
  %385 = log10(%384) /* ty=Tensor[(6, 5, 7), float32] */;
  %386 = cast(%385, dtype="float64") /* ty=Tensor[(6, 5, 7), float64] */;
  %387 = asin(%386) /* ty=Tensor[(6, 5, 7), float64] */;
  (%387,)
}

def @func_3629() -> (Tensor[(780), float32], Tensor[(450), int8]) {
  %392 = fn () -> (Tensor[(780), float32], Tensor[(450), int8]) {
    %388 = @func_3193() /* ty=(Tensor[(780), float32],) */;
    %389 = @func_2683() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(450), int8]) */;
    %390 = %388.0;
    %391 = %389.1;
    (%390, %391)
  };
  %392() /* ty=(Tensor[(780), float32], Tensor[(450), int8]) */
}

def @func_4003() -> (Tensor[(780), float32], Tensor[(7, 13, 7), float64], Tensor[(780), float32]) {
  %399 = fn () -> (Tensor[(780), float32], Tensor[(7, 13, 7), float64], Tensor[(780), float32]) {
    %393 = @func_2765() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(6, 10, 13), float32], Tensor[(780), float32]) */;
    %394 = @func_2765() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(6, 10, 13), float32], Tensor[(780), float32]) */;
    %395 = @func_3628() /* ty=(Tensor[(780), float32], Tensor[(450), int8]) */;
    %396 = %393.2;
    %397 = %394.0;
    %398 = %395.0;
    (%396, %397, %398)
  };
  %399() /* ty=(Tensor[(780), float32], Tensor[(7, 13, 7), float64], Tensor[(780), float32]) */
}

def @func_4675(%var_4655: Tensor[(15, 10, 3), float64]) -> (Tensor[(15, 10, 3), float64], Tensor[(12, 11, 2), float64], Tensor[(780), float32]) {
  %400 = cast(%var_4655, dtype="float64") /* ty=Tensor[(15, 10, 3), float64] */;
  %401 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(15, 10, 3), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %402 = cast(meta[relay.Constant][23] /* ty=Tensor[(15, 10, 3), float64] */, dtype="float64") /* ty=Tensor[(15, 10, 3), float64] */;
  %403 = dyn.reshape(%400, %401, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %404 = @func_2399() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(12, 11, 2), float64], Tensor[(132, 2), float32]) */;
  %405 = %404.1;
  %406 = cast(%405, dtype="float64") /* ty=Tensor[(12, 11, 2), float64] */;
  %407 = @func_3628() /* ty=(Tensor[(780), float32], Tensor[(450), int8]) */;
  %408 = divide(%402, %403) /* ty=Tensor[(15, 10, 3), float64] */;
  %409 = asinh(%406) /* ty=Tensor[(12, 11, 2), float64] */;
  %410 = %407.0;
  (%408, %409, %410)
}

def @func_4500() -> (Tensor[(450), int8],) {
  %413 = fn () -> (Tensor[(450), int8],) {
    %411 = @func_2791() /* ty=(Tensor[(450), int8],) */;
    %412 = %411.0;
    (%412,)
  };
  %413() /* ty=(Tensor[(450), int8],) */
}

def @func_5439() -> (Tensor[(450), float64], Tensor[(7, 13, 7), int32], Tensor[(7, 15, 15), int16], Tensor[(1575), int16]) {
  %430 = fn () -> (Tensor[(450), float64], Tensor[(7, 13, 7), int32], Tensor[(7, 15, 15), int16], Tensor[(1575), int16]) {
    %414 = @func_4438() /* ty=(Tensor[(450), float64],) */;
    %415 = @func_3430() /* ty=Tensor[(7, 13, 7), float64] */;
    %416 = cast(%415, dtype="float64") /* ty=Tensor[(7, 13, 7), float64] */;
    %417 = erf(%416) /* ty=Tensor[(7, 13, 7), float64] */;
    %418 = cast(%417, dtype="int32") /* ty=Tensor[(7, 13, 7), int32] */;
    %419 = shape_of(%415, dtype="int32") /* ty=Tensor[(3), int32] */;
    %420 = cast(%415, dtype="int32") /* ty=Tensor[(7, 13, 7), int32] */;
    %421 = dyn.reshape(%418, %419, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %422 = cast(meta[relay.Constant][24] /* ty=Tensor[(1575), int16] */, dtype="int16") /* ty=Tensor[(1575), int16] */;
    %423 = %414.0;
    %424 = cast(%423, dtype="float32") /* ty=Tensor[(450), float32] */;
    %425 = reshape(%422, newshape=[7, 15, 15]) /* ty=Tensor[(7, 15, 15), int16] */;
    %426 = reshape(%424, newshape=[1, 450]) /* ty=Tensor[(1, 450), float32] */;
    %427 = @func_728(%425, %426) /* ty=(Tensor[(7, 15, 15), int16], Tensor[(5, 6, 15), float32], Tensor[(?, 450), uint64], Tensor[(5, 6, 15), float32], Tensor[(?, 450), int16]) */;
    %428 = bitwise_and(%420, %421) /* ty=Tensor[(7, 13, 7), int32] */;
    %429 = %427.0;
    (%423, %428, %429, meta[relay.Constant][24] /* ty=Tensor[(1575), int16] */)
  };
  %430() /* ty=(Tensor[(450), float64], Tensor[(7, 13, 7), int32], Tensor[(7, 15, 15), int16], Tensor[(1575), int16]) */
}

def @func_7868(%var_7850: Tensor[(7, 13, 7), float64]) -> (Tensor[(7, 13, 7), bool], Tensor[(450), float64]) {
  %431 = @func_5268() /* ty=Tensor[(7, 13, 7), float64] */;
  %432 = cast(%var_7850, dtype="bool") /* ty=Tensor[(7, 13, 7), bool] */;
  %433 = shape_of(%431, dtype="int32") /* ty=Tensor[(3), int32] */;
  %434 = cast(%431, dtype="bool") /* ty=Tensor[(7, 13, 7), bool] */;
  %435 = dyn.reshape(%432, %433, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %436 = logical_or(%434, %435) /* ty=Tensor[(7, 13, 7), bool] */;
  %437 = @func_5973() /* ty=Tensor[(450), float64] */;
  (%436, %437)
}

def @func_3291(%var_3289: int32, %var_3290: Tensor[(1, 2, 4), int32]) -> (Tensor[(1, 2, 4), uint32], Tensor[(1, 2, 4), float32]) {
  @func_3287(%var_3289, %var_3290) /* ty=(Tensor[(1, 2, 4), uint32], Tensor[(1, 2, 4), float32]) */
}

def @func_7650(%var_7646: Tensor[(256), float64]) -> (Tensor[(6, 10, 13), float32], Tensor[(220), float32], Tensor[(256), float64]) {
  %438 = @func_2765() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(6, 10, 13), float32], Tensor[(780), float32]) */;
  %439 = cast(%var_7646, dtype="float64") /* ty=Tensor[(256), float64] */;
  %440 = reshape(%439, newshape=[8, 8, 4]) /* ty=Tensor[(8, 8, 4), float64] */;
  %441 = @func_5578(%440) /* ty=(Tensor[(8, 8, 4), float64], Tensor[(22050), int16], Tensor[(220), float32], Tensor[(8, 8, 4), float64]) */;
  %442 = %438.1;
  %443 = %441.2;
  (%442, %443, %var_7646)
}

def @func_7024() -> (Tensor[(132, 2), float64],) {
  %446 = fn () -> (Tensor[(132, 2), float64],) {
    %444 = @func_3148() /* ty=(Tensor[(450), bool], Tensor[(7, 13, 7), float64], Tensor[(132, 2), float64], Tensor[(132, 2), float64], Tensor[(7, 13, 7), float64]) */;
    %445 = %444.3;
    (%445,)
  };
  %446() /* ty=(Tensor[(132, 2), float64],) */
}

def @func_3753(%var_3738: Tensor[(10, 4, 1), float32], %var_3745: Tensor[(10, 4, 12), float32]) -> (Tensor[(10, 4, 12), bool],) {
  %447 = cast(%var_3738, dtype="float32") /* ty=Tensor[(10, 4, 1), float32] */;
  %448 = cosh(%447) /* ty=Tensor[(10, 4, 1), float32] */;
  %449 = cast(%448, dtype="bool") /* ty=Tensor[(10, 4, 1), bool] */;
  %450 = cast(%var_3745, dtype="bool") /* ty=Tensor[(10, 4, 12), bool] */;
  %451 = not_equal(%449, %450) /* ty=Tensor[(10, 4, 12), bool] */;
  (%451,)
}

def @func_4144() -> (Tensor[(450), bool],) {
  %452 = @func_2909() /* ty=Tensor[(450), bool] */;
  (%452,)
}

def @func_728(%var_644: Tensor[(7, 15, 15), int16], %var_656: Tensor[(1, 450), float32]) -> (Tensor[(7, 15, 15), int16], Tensor[(5, 6, 15), float32], Tensor[(?, 450), uint64], Tensor[(5, 6, 15), float32], Tensor[(?, 450), int16]) {
  %453 = cast(meta[relay.Constant][25] /* ty=Tensor[(7, 15, 15), int16] */, dtype="int16") /* ty=Tensor[(7, 15, 15), int16] */;
  %454 = shape_of(%var_644, dtype="int32") /* ty=Tensor[(3), int32] */;
  %455 = cast(%var_644, dtype="int16") /* ty=Tensor[(7, 15, 15), int16] */;
  %456 = dyn.reshape(%453, %454, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %457 = cast(%var_656, dtype="float32") /* ty=Tensor[(1, 450), float32] */;
  %458 = reshape(%457, newshape=[5, 6, 15]) /* ty=Tensor[(5, 6, 15), float32] */;
  %459 = cast(%var_656, dtype="float32") /* ty=Tensor[(1, 450), float32] */;
  %460 = acos(%459) /* ty=Tensor[(1, 450), float32] */;
  %461 = cast(%460, dtype="float32") /* ty=Tensor[(1, 450), float32] */;
  %462 = sin(%461) /* ty=Tensor[(1, 450), float32] */;
  %463 = cast(%462, dtype="float64") /* ty=Tensor[(1, 450), float64] */;
  %464 = asin(%463) /* ty=Tensor[(1, 450), float64] */;
  %465 = cast(%460, dtype="float32") /* ty=Tensor[(1, 450), float32] */;
  %466 = reshape(%465, newshape=[5, 6, 15]) /* ty=Tensor[(5, 6, 15), float32] */;
  %467 = @func_166(%466) /* ty=Tensor[(5, 6, 15), float32] */;
  %468 = cast(%467, dtype="uint64") /* ty=Tensor[(5, 6, 15), uint64] */;
  %469 = shape_of(%464, dtype="int32") /* ty=Tensor[(2), int32] */;
  %470 = cast(%464, dtype="uint64") /* ty=Tensor[(1, 450), uint64] */;
  %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %472 = @func_166(%458) /* ty=Tensor[(5, 6, 15), float32] */;
  %473 = cast(%472, dtype="float32") /* ty=Tensor[(5, 6, 15), float32] */;
  %474 = reshape(%473, newshape=[5, 6, 15]) /* ty=Tensor[(5, 6, 15), float32] */;
  %475 = cast(%464, dtype="float64") /* ty=Tensor[(1, 450), float64] */;
  %476 = atanh(%475) /* ty=Tensor[(1, 450), float64] */;
  %477 = cast(%462, dtype="int16") /* ty=Tensor[(1, 450), int16] */;
  %478 = shape_of(%476, dtype="int32") /* ty=Tensor[(2), int32] */;
  %479 = cast(%476, dtype="int16") /* ty=Tensor[(1, 450), int16] */;
  %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %481 = right_shift(%455, %456) /* ty=Tensor[(7, 15, 15), int16] */;
  %482 = add(%470, %471) /* ty=Tensor[(?, 450), uint64] */;
  %483 = @func_166(%474) /* ty=Tensor[(5, 6, 15), float32] */;
  %484 = bitwise_and(%479, %480) /* ty=Tensor[(?, 450), int16] */;
  (%481, %472, %482, %483, %484)
}

def @func_2282(%var_2280: Tensor[(15, 1, 5), int8], %var_2281: Tensor[(728), uint8]) -> (Tensor[(15, 1, 5), int8], Tensor[(5, 6, 15), float32], Tensor[(450), float32], Tensor[(8, 7, 13), uint8], Tensor[(728), uint8], Tensor[(1575), int16]) {
  %499 = fn (%var_2244: Tensor[(15, 1, 5), int8], %var_2268: Tensor[(728), uint8]) -> (Tensor[(15, 1, 5), int8], Tensor[(5, 6, 15), float32], Tensor[(450), float32], Tensor[(8, 7, 13), uint8], Tensor[(728), uint8], Tensor[(1575), int16]) {
    %485 = cast(meta[relay.Constant][26] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %486 = cast(%var_2244, dtype="int8") /* ty=Tensor[(15, 1, 5), int8] */;
    %487 = cast(meta[relay.Constant][27] /* ty=Tensor[(450), float32] */, dtype="float32") /* ty=Tensor[(450), float32] */;
    %488 = reshape(%487, newshape=[5, 6, 15]) /* ty=Tensor[(5, 6, 15), float32] */;
    %489 = cast(%var_2268, dtype="uint8") /* ty=Tensor[(728), uint8] */;
    %490 = cast(meta[relay.Constant][28] /* ty=Tensor[(1575), int16] */, dtype="int16") /* ty=Tensor[(1575), int16] */;
    %491 = @func_166(%488) /* ty=Tensor[(5, 6, 15), float32] */;
    %492 = cast(%491, dtype="float32") /* ty=Tensor[(5, 6, 15), float32] */;
    %493 = reshape(%489, newshape=[8, 7, 13]) /* ty=Tensor[(8, 7, 13), uint8] */;
    %494 = reshape(%490, newshape=[1575]) /* ty=Tensor[(1575), int16] */;
    %495 = reshape(%492, newshape=[450]) /* ty=Tensor[(450), float32] */;
    %496 = @func_1666(%493, %494, %495) /* ty=(Tensor[(8, 7, 13), uint8], Tensor[(?, 450), int16], Tensor[(1575), int16], Tensor[(450), float32], Tensor[(?, 450), uint64], Tensor[(?, 450), uint64]) */;
    %497 = bitwise_and(%485, %486) /* ty=Tensor[(15, 1, 5), int8] */;
    %498 = %496.0;
    (%497, %491, meta[relay.Constant][27] /* ty=Tensor[(450), float32] */, %498, %var_2268, meta[relay.Constant][28] /* ty=Tensor[(1575), int16] */)
  };
  %499(%var_2280, %var_2281) /* ty=(Tensor[(15, 1, 5), int8], Tensor[(5, 6, 15), float32], Tensor[(450), float32], Tensor[(8, 7, 13), uint8], Tensor[(728), uint8], Tensor[(1575), int16]) */
}

def @func_3095(%var_3093: Tensor[(450), int8]) -> (Tensor[(450), float32], Tensor[(450), bool]) {
  @func_3092(%var_3093) /* ty=(Tensor[(450), float32], Tensor[(450), bool]) */
}

def @func_5270() -> Tensor[(7, 13, 7), float64] {
  @func_5268() /* ty=Tensor[(7, 13, 7), float64] */
}

def @func_5338() -> (Tensor[(450), bool], Tensor[(5, 6, 15), float32], Tensor[(78), uint8], Tensor[(1575), int16]) {
  %507 = fn () -> (Tensor[(450), bool], Tensor[(5, 6, 15), float32], Tensor[(78), uint8], Tensor[(1575), int16]) {
    %500 = cast(meta[relay.Constant][29] /* ty=Tensor[(78), uint8] */, dtype="uint8") /* ty=Tensor[(78), uint8] */;
    %501 = cast(meta[relay.Constant][30] /* ty=Tensor[(1575), int16] */, dtype="int16") /* ty=Tensor[(1575), int16] */;
    %502 = reshape(%500, newshape=[6, 1, 13]) /* ty=Tensor[(6, 1, 13), uint8] */;
    %503 = reshape(%501, newshape=[1575]) /* ty=Tensor[(1575), int16] */;
    %504 = @func_2073(%502, %503) /* ty=(Tensor[(6, 4, 13), bool], Tensor[(5, 6, 15), float32], Tensor[(450), float32], Tensor[(5, 6, 15), float32], Tensor[(1080), bool], Tensor[(1575), int16], Tensor[(6, ?, 13), float32]) */;
    %505 = @func_2858() /* ty=Tensor[(450), bool] */;
    %506 = %504.1;
    (%505, %506, meta[relay.Constant][29] /* ty=Tensor[(78), uint8] */, meta[relay.Constant][30] /* ty=Tensor[(1575), int16] */)
  };
  %507() /* ty=(Tensor[(450), bool], Tensor[(5, 6, 15), float32], Tensor[(78), uint8], Tensor[(1575), int16]) */
}

def @func_7078() -> (Tensor[(450), bool], Tensor[(210), float32], Tensor[(6, 5, 7), int16]) {
  %521 = fn () -> (Tensor[(450), bool], Tensor[(210), float32], Tensor[(6, 5, 7), int16]) {
    %508 = @func_3589() /* ty=(Tensor[(450), bool],) */;
    %509 = cast(meta[relay.Constant][31] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
    %510 = reshape(%509, newshape=[6, 5, 7]) /* ty=Tensor[(6, 5, 7), float32] */;
    %511 = @func_3790(%510) /* ty=(Tensor[(6, 5, 7), float64],) */;
    %512 = %511.0;
    %513 = cast(%512, dtype="float32") /* ty=Tensor[(6, 5, 7), float32] */;
    %514 = rsqrt(%513) /* ty=Tensor[(6, 5, 7), float32] */;
    %515 = cast(%512, dtype="int16") /* ty=Tensor[(6, 5, 7), int16] */;
    %516 = shape_of(%514, dtype="int32") /* ty=Tensor[(3), int32] */;
    %517 = cast(%514, dtype="int16") /* ty=Tensor[(6, 5, 7), int16] */;
    %518 = dyn.reshape(%515, %516, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %519 = %508.0;
    %520 = left_shift(%517, %518) /* ty=Tensor[(6, 5, 7), int16] */;
    (%519, meta[relay.Constant][31] /* ty=Tensor[(210), float32] */, %520)
  };
  %521() /* ty=(Tensor[(450), bool], Tensor[(210), float32], Tensor[(6, 5, 7), int16]) */
}

def @func_1671(%var_1668: Tensor[(8, 7, 13), uint8], %var_1669: Tensor[(1575), int16], %var_1670: Tensor[(450), float32]) -> (Tensor[(8, 7, 13), uint8], Tensor[(?, 450), int16], Tensor[(1575), int16], Tensor[(450), float32], Tensor[(?, 450), uint64], Tensor[(?, 450), uint64]) {
  @func_1666(%var_1668, %var_1669, %var_1670) /* ty=(Tensor[(8, 7, 13), uint8], Tensor[(?, 450), int16], Tensor[(1575), int16], Tensor[(450), float32], Tensor[(?, 450), uint64], Tensor[(?, 450), uint64]) */
}

def @func_7190(%var_7186: Tensor[(7, 13, 7), float64], %var_7187: Tensor[(1, 378), float32], %var_7188: Tensor[(728), uint8], %var_7189: Tensor[(50, 9), float32]) -> (Tensor[(7, 13, 7), float32], Tensor[(6, 9, 7), bool], Tensor[(1, 378), float32], Tensor[(?, 450), uint64], Tensor[(728), uint8], Tensor[(1575), int16], Tensor[(50, 9), float32]) {
  @func_7184(%var_7186, %var_7187, %var_7188, %var_7189) /* ty=(Tensor[(7, 13, 7), float32], Tensor[(6, 9, 7), bool], Tensor[(1, 378), float32], Tensor[(?, 450), uint64], Tensor[(728), uint8], Tensor[(1575), int16], Tensor[(50, 9), float32]) */
}

def @func_5974() -> Tensor[(450), float64] {
  %525 = fn () -> Tensor[(450), float64] {
    %522 = @func_4438() /* ty=(Tensor[(450), float64],) */;
    %523 = %522.0;
    %524 = cast(%523, dtype="float64") /* ty=Tensor[(450), float64] */;
    log(%524) /* ty=Tensor[(450), float64] */
  };
  %525() /* ty=Tensor[(450), float64] */
}

def @func_5721() -> Tensor[(780), bool] {
  @func_5719() /* ty=Tensor[(780), bool] */
}

def @func_4277(%var_4276: Tensor[(6, 9, 7), float32]) -> Tensor[(6, 9, 7), bool] {
  %534 = fn (%var_4239: Tensor[(6, 9, 7), float32]) -> Tensor[(6, 9, 7), bool] {
    %526 = cast(%var_4239, dtype="float32") /* ty=Tensor[(6, 9, 7), float32] */;
    %527 = rsqrt(%526) /* ty=Tensor[(6, 9, 7), float32] */;
    %528 = cast(%527, dtype="float32") /* ty=Tensor[(6, 9, 7), float32] */;
    %529 = asin(%528) /* ty=Tensor[(6, 9, 7), float32] */;
    %530 = cast(%529, dtype="bool") /* ty=Tensor[(6, 9, 7), bool] */;
    %531 = shape_of(%527, dtype="int32") /* ty=Tensor[(3), int32] */;
    %532 = cast(%527, dtype="bool") /* ty=Tensor[(6, 9, 7), bool] */;
    %533 = dyn.reshape(%530, %531, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    not_equal(%532, %533) /* ty=Tensor[(6, 9, 7), bool] */
  };
  %534(%var_4276) /* ty=Tensor[(6, 9, 7), bool] */
}

def @func_6127() -> (Tensor[(450), bool], Tensor[(450), bool]) {
  %539 = fn () -> (Tensor[(450), bool], Tensor[(450), bool]) {
    %535 = @func_3941() /* ty=(Tensor[(450), bool], Tensor[(450), bool]) */;
    %536 = @func_3589() /* ty=(Tensor[(450), bool],) */;
    %537 = %535.1;
    %538 = %536.0;
    (%537, %538)
  };
  %539() /* ty=(Tensor[(450), bool], Tensor[(450), bool]) */
}

def @func_7653(%var_7651: Tensor[(256), float64]) -> (Tensor[(6, 10, 13), float32], Tensor[(220), float32], Tensor[(256), float64]) {
  @func_7650(%var_7651) /* ty=(Tensor[(6, 10, 13), float32], Tensor[(220), float32], Tensor[(256), float64]) */
}

def @func_1986(%var_1984: Tensor[(12, 11, 2), float32]) -> Tensor[(12, 11, 2), float64] {
  @func_1983(%var_1984) /* ty=Tensor[(12, 11, 2), float64] */
}

def @func_2635(%var_2633: Tensor[(1080), bool], %var_2634: Tensor[(15, 105), int16]) -> (Tensor[(132, 2), float32], Tensor[(7, 13, 7), float64], Tensor[(5, 6, 15), float32], Tensor[(1080), bool], Tensor[(15, 105), int16]) {
  %552 = fn (%var_2627: Tensor[(1080), bool], %var_2628: Tensor[(15, 105), int16]) -> (Tensor[(132, 2), float32], Tensor[(7, 13, 7), float64], Tensor[(5, 6, 15), float32], Tensor[(1080), bool], Tensor[(15, 105), int16]) {
    %540 = @func_2399() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(12, 11, 2), float64], Tensor[(132, 2), float32]) */;
    %541 = %540.2;
    %542 = cast(%541, dtype="float32") /* ty=Tensor[(132, 2), float32] */;
    %543 = @func_2410() /* ty=(Tensor[(7, 13, 7), float64],) */;
    %544 = cast(%var_2627, dtype="bool") /* ty=Tensor[(1080), bool] */;
    %545 = cast(%var_2628, dtype="int16") /* ty=Tensor[(15, 105), int16] */;
    %546 = reshape(%544, newshape=[10, 9, 12]) /* ty=Tensor[(10, 9, 12), bool] */;
    %547 = reshape(%545, newshape=[105, 15]) /* ty=Tensor[(105, 15), int16] */;
    %548 = @func_1928(%546, %547) /* ty=(Tensor[(10, 9, 12), bool], Tensor[(5, 6, 15), float32], Tensor[(105, 15), int16], Tensor[(450), float32]) */;
    %549 = tan(%542) /* ty=Tensor[(132, 2), float32] */;
    %550 = %543.0;
    %551 = %548.1;
    (%549, %550, %551, %var_2627, %var_2628)
  };
  %552(%var_2633, %var_2634) /* ty=(Tensor[(132, 2), float32], Tensor[(7, 13, 7), float64], Tensor[(5, 6, 15), float32], Tensor[(1080), bool], Tensor[(15, 105), int16]) */
}

def @func_5182(%var_5174: Tensor[(220), float32]) -> (Tensor[(7, 13, 7), float64], Tensor[(5, 4, 11), float32], Tensor[(220), float32], Tensor[(22050), int16]) {
  %553 = @func_5131() /* ty=(Tensor[(7, 13, 7), float64],) */;
  %554 = cast(%var_5174, dtype="float32") /* ty=Tensor[(220), float32] */;
  %555 = cast(%var_5174, dtype="float32") /* ty=Tensor[(220), float32] */;
  %556 = cast(meta[relay.Constant][32] /* ty=Tensor[(22050), int16] */, dtype="int16") /* ty=Tensor[(22050), int16] */;
  %557 = cast(meta[relay.Constant][32] /* ty=Tensor[(22050), int16] */, dtype="uint64") /* ty=Tensor[(22050), uint64] */;
  %558 = reshape(%554, newshape=[5, 4, 11]) /* ty=Tensor[(5, 4, 11), float32] */;
  %559 = reshape(%555, newshape=[5, 4, 11]) /* ty=Tensor[(5, 4, 11), float32] */;
  %560 = reshape(%556, newshape=[14, 1575]) /* ty=Tensor[(14, 1575), int16] */;
  %561 = reshape(%557, newshape=[14, 1575]) /* ty=Tensor[(14, 1575), uint64] */;
  %562 = @func_2540(%558, %559, %560, %561) /* ty=(Tensor[(5, 4, 11), float32], Tensor[(1575), int16], Tensor[(78), uint8], Tensor[(132, 2), float32], Tensor[(14, 1575), float32]) */;
  %563 = %553.0;
  %564 = %562.0;
  (%563, %564, %var_5174, meta[relay.Constant][32] /* ty=Tensor[(22050), int16] */)
}

def @func_169(%var_167: Tensor[(5, 6, 15), float32]) -> Tensor[(5, 6, 15), float32] {
  @func_166(%var_167) /* ty=Tensor[(5, 6, 15), float32] */
}

def @func_5763(%var_5762: Tensor[(15, 8, 9), float32]) -> (Tensor[(15, 8, 9), float32],) {
  %567 = fn (%var_5758: Tensor[(15, 8, 9), float32]) -> (Tensor[(15, 8, 9), float32],) {
    %565 = cast(%var_5758, dtype="float32") /* ty=Tensor[(15, 8, 9), float32] */;
    %566 = sqrt(%565) /* ty=Tensor[(15, 8, 9), float32] */;
    (%566,)
  };
  %567(%var_5762) /* ty=(Tensor[(15, 8, 9), float32],) */
}

def @func_6064() -> Tensor[(16, 2, 12), float64] {
  %571 = fn () -> Tensor[(16, 2, 12), float64] {
    %568 = @func_4335() /* ty=(Tensor[(450), int8], Tensor[(16, 2, 12), uint32], Tensor[(384), uint32]) */;
    %569 = %568.1;
    %570 = cast(%569, dtype="float64") /* ty=Tensor[(16, 2, 12), float64] */;
    exp(%570) /* ty=Tensor[(16, 2, 12), float64] */
  };
  %571() /* ty=Tensor[(16, 2, 12), float64] */
}

def @func_2910() -> Tensor[(450), bool] {
  %572 = fn () -> Tensor[(450), bool] {
    @func_2858() /* ty=Tensor[(450), bool] */
  };
  %572() /* ty=Tensor[(450), bool] */
}

def @func_5884(%var_5877: Tensor[(16, 13, 1), int8]) -> Tensor[(16, 13, 10), int8] {
  %573 = cast(%var_5877, dtype="int8") /* ty=Tensor[(16, 13, 1), int8] */;
  %574 = cast(meta[relay.Constant][33] /* ty=Tensor[(16, 13, 10), int8] */, dtype="int8") /* ty=Tensor[(16, 13, 10), int8] */;
  maximum(%573, %574) /* ty=Tensor[(16, 13, 10), int8] */
}

def @func_6197() -> (Tensor[(450), bool],) {
  %576 = fn () -> (Tensor[(450), bool],) {
    %575 = @func_3506() /* ty=Tensor[(450), bool] */;
    (%575,)
  };
  %576() /* ty=(Tensor[(450), bool],) */
}

def @func_3360() -> (Tensor[(7, 13, 7), float64], Tensor[(780), float32]) {
  %581 = fn () -> (Tensor[(7, 13, 7), float64], Tensor[(780), float32]) {
    %577 = @func_2399() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(12, 11, 2), float64], Tensor[(132, 2), float32]) */;
    %578 = @func_3193() /* ty=(Tensor[(780), float32],) */;
    %579 = %577.0;
    %580 = %578.0;
    (%579, %580)
  };
  %581() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(780), float32]) */
}

def @func_7005() -> Tensor[(780), float32] {
  %583 = fn () -> Tensor[(780), float32] {
    %582 = @func_3193() /* ty=(Tensor[(780), float32],) */;
    %582.0
  };
  %583() /* ty=Tensor[(780), float32] */
}

def @func_5751(%var_5749: Tensor[(1575), int16], %var_5750: Tensor[(450), float32]) -> (Tensor[(780), float64], Tensor[(5, 6, 15), float32], Tensor[(1575), int16], Tensor[(450), float32]) {
  %594 = fn (%var_5734: Tensor[(1575), int16], %var_5735: Tensor[(450), float32]) -> (Tensor[(780), float64], Tensor[(5, 6, 15), float32], Tensor[(1575), int16], Tensor[(450), float32]) {
    %584 = @func_3193() /* ty=(Tensor[(780), float32],) */;
    %585 = %584.0;
    %586 = cast(%585, dtype="float64") /* ty=Tensor[(780), float64] */;
    %587 = cast(%var_5734, dtype="int16") /* ty=Tensor[(1575), int16] */;
    %588 = cast(%var_5735, dtype="float32") /* ty=Tensor[(450), float32] */;
    %589 = reshape(%587, newshape=[7, 15, 15]) /* ty=Tensor[(7, 15, 15), int16] */;
    %590 = reshape(%588, newshape=[1, 450]) /* ty=Tensor[(1, 450), float32] */;
    %591 = @func_728(%589, %590) /* ty=(Tensor[(7, 15, 15), int16], Tensor[(5, 6, 15), float32], Tensor[(?, 450), uint64], Tensor[(5, 6, 15), float32], Tensor[(?, 450), int16]) */;
    %592 = atanh(%586) /* ty=Tensor[(780), float64] */;
    %593 = %591.3;
    (%592, %593, %var_5734, %var_5735)
  };
  %594(%var_5749, %var_5750) /* ty=(Tensor[(780), float64], Tensor[(5, 6, 15), float32], Tensor[(1575), int16], Tensor[(450), float32]) */
}

def @func_3092(%var_3073: Tensor[(450), int8]) -> (Tensor[(450), float32], Tensor[(450), bool]) {
  %595 = @func_2791() /* ty=(Tensor[(450), int8],) */;
  %596 = %595.0;
  %597 = cast(%var_3073, dtype="float32") /* ty=Tensor[(450), float32] */;
  %598 = shape_of(%596, dtype="int32") /* ty=Tensor[(1), int32] */;
  %599 = cast(%596, dtype="float32") /* ty=Tensor[(450), float32] */;
  %600 = dyn.reshape(%597, %598, newshape=[]) /* ty=Tensor[(?), float32] */;
  %601 = floor_divide(%599, %600) /* ty=Tensor[(450), float32] */;
  %602 = @func_2858() /* ty=Tensor[(450), bool] */;
  (%601, %602)
}

def @func_5580(%var_5579: Tensor[(8, 8, 4), float64]) -> (Tensor[(8, 8, 4), float64], Tensor[(22050), int16], Tensor[(220), float32], Tensor[(8, 8, 4), float64]) {
  %616 = fn (%var_5554: Tensor[(8, 8, 4), float64]) -> (Tensor[(8, 8, 4), float64], Tensor[(22050), int16], Tensor[(220), float32], Tensor[(8, 8, 4), float64]) {
    %603 = @func_4114() /* ty=(Tensor[(450), bool], Tensor[(8, 8, 4), float64]) */;
    %604 = %603.1;
    %605 = cast(%var_5554, dtype="float64") /* ty=Tensor[(8, 8, 4), float64] */;
    %606 = shape_of(%604, dtype="int32") /* ty=Tensor[(3), int32] */;
    %607 = cast(%604, dtype="float64") /* ty=Tensor[(8, 8, 4), float64] */;
    %608 = dyn.reshape(%605, %606, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %609 = cast(meta[relay.Constant][34] /* ty=Tensor[(220), float32] */, dtype="float32") /* ty=Tensor[(220), float32] */;
    %610 = reshape(%609, newshape=[220]) /* ty=Tensor[(220), float32] */;
    %611 = @func_5182(%610) /* ty=(Tensor[(7, 13, 7), float64], Tensor[(5, 4, 11), float32], Tensor[(220), float32], Tensor[(22050), int16]) */;
    %612 = cast(%var_5554, dtype="float64") /* ty=Tensor[(8, 8, 4), float64] */;
    %613 = divide(%607, %608) /* ty=Tensor[(8, 8, 4), float64] */;
    %614 = %611.3;
    %615 = rsqrt(%612) /* ty=Tensor[(8, 8, 4), float64] */;
    (%613, %614, meta[relay.Constant][34] /* ty=Tensor[(220), float32] */, %615)
  };
  %616(%var_5579) /* ty=(Tensor[(8, 8, 4), float64], Tensor[(22050), int16], Tensor[(220), float32], Tensor[(8, 8, 4), float64]) */
}

def @func_3182() -> (Tensor[(450), bool],) {
  %618 = fn () -> (Tensor[(450), bool],) {
    %617 = @func_2909() /* ty=Tensor[(450), bool] */;
    (%617,)
  };
  %618() /* ty=(Tensor[(450), bool],) */
}

def @func_4114() -> (Tensor[(450), bool], Tensor[(8, 8, 4), float64]) {
  %619 = @func_3553() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(450), bool]) */;
  %620 = cast(meta[relay.Constant][35] /* ty=Tensor[(8, 8, 4), float32] */, dtype="float32") /* ty=Tensor[(8, 8, 4), float32] */;
  %621 = sin(%620) /* ty=Tensor[(8, 8, 4), float32] */;
  %622 = cast(%621, dtype="float32") /* ty=Tensor[(8, 8, 4), float32] */;
  %623 = sigmoid(%622) /* ty=Tensor[(8, 8, 4), float32] */;
  %624 = cast(%623, dtype="float64") /* ty=Tensor[(8, 8, 4), float64] */;
  %625 = %619.1;
  %626 = atanh(%624) /* ty=Tensor[(8, 8, 4), float64] */;
  (%625, %626)
}

def @func_4742(%var_4740: Tensor[(16, 2, 12), uint32]) -> (Tensor[(16, 2, 12), float64], Tensor[(16, 2, 12), float64]) {
  @func_4739(%var_4740) /* ty=(Tensor[(16, 2, 12), float64], Tensor[(16, 2, 12), float64]) */
}

def @func_6752(%var_6749: uint32, %var_6750: Tensor[(210), uint32], %var_6751: Tensor[(20, 2), float32]) -> (Tensor[(450), bool], Tensor[(480), float32], uint32, Tensor[(210), uint32], Tensor[(20, 2), float32], Tensor[(450), bool]) {
  %637 = fn (%var_6729: uint32, %var_6730: Tensor[(210), uint32], %var_6731: Tensor[(20, 2), float32]) -> (Tensor[(450), bool], Tensor[(480), float32], uint32, Tensor[(210), uint32], Tensor[(20, 2), float32], Tensor[(450), bool]) {
    %627 = cast(%var_6729, dtype="uint32") /* ty=uint32 */;
    %628 = cast(%var_6730, dtype="uint32") /* ty=Tensor[(210), uint32] */;
    %629 = cast(%var_6731, dtype="float32") /* ty=Tensor[(20, 2), float32] */;
    %630 = reshape(%627, newshape=[]) /* ty=uint32 */;
    %631 = reshape(%628, newshape=[6, 5, 7]) /* ty=Tensor[(6, 5, 7), uint32] */;
    %632 = reshape(%629, newshape=[40]) /* ty=Tensor[(40), float32] */;
    %633 = @func_6165(%630, %631, %632) /* ty=(Tensor[(6, 5, 7), uint32], Tensor[(10, 4, 12), bool], Tensor[(40), float32], Tensor[(480), float32]) */;
    %634 = @func_2909() /* ty=Tensor[(450), bool] */;
    %635 = %633.3;
    %636 = @func_4219() /* ty=Tensor[(450), bool] */;
    (%634, %635, %var_6729, %var_6730, %var_6731, %636)
  };
  %637(%var_6749, %var_6750, %var_6751) /* ty=(Tensor[(450), bool], Tensor[(480), float32], uint32, Tensor[(210), uint32], Tensor[(20, 2), float32], Tensor[(450), bool]) */
}

def @func_4960() -> (Tensor[(450), int8],) {
  @func_4958() /* ty=(Tensor[(450), int8],) */
}

def @func_7202() -> Tensor[(11, 15, 2), float64] {
  @func_7200() /* ty=Tensor[(11, 15, 2), float64] */
}

def @func_7200() -> Tensor[(11, 15, 2), float64] {
  %638 = cast(meta[relay.Constant][36] /* ty=Tensor[(11, 15, 2), float64] */, dtype="float64") /* ty=Tensor[(11, 15, 2), float64] */;
  sqrt(%638) /* ty=Tensor[(11, 15, 2), float64] */
}

def @func_4384() -> Tensor[(450), int8] {
  @func_3558() /* ty=Tensor[(450), int8] */
}

def @func_7184(%var_7164: Tensor[(7, 13, 7), float64], %var_7174: Tensor[(1, 378), float32], %var_7180: Tensor[(728), uint8], %var_7182: Tensor[(50, 9), float32]) -> (Tensor[(7, 13, 7), float32], Tensor[(6, 9, 7), bool], Tensor[(1, 378), float32], Tensor[(?, 450), uint64], Tensor[(728), uint8], Tensor[(1575), int16], Tensor[(50, 9), float32]) {
  %639 = @func_4852() /* ty=(Tensor[(7, 13, 7), float64],) */;
  %640 = %639.0;
  %641 = cast(%var_7164, dtype="float64") /* ty=Tensor[(7, 13, 7), float64] */;
  %642 = shape_of(%640, dtype="int32") /* ty=Tensor[(3), int32] */;
  %643 = cast(%640, dtype="float64") /* ty=Tensor[(7, 13, 7), float64] */;
  %644 = dyn.reshape(%641, %642, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %645 = floor_mod(%643, %644) /* ty=Tensor[(7, 13, 7), float64] */;
  %646 = cast(%645, dtype="float32") /* ty=Tensor[(7, 13, 7), float32] */;
  %647 = cast(%var_7174, dtype="float32") /* ty=Tensor[(1, 378), float32] */;
  %648 = reshape(%647, newshape=[6, 9, 7]) /* ty=Tensor[(6, 9, 7), float32] */;
  %649 = cast(%var_7180, dtype="uint8") /* ty=Tensor[(728), uint8] */;
  %650 = cast(meta[relay.Constant][37] /* ty=Tensor[(1575), int16] */, dtype="int16") /* ty=Tensor[(1575), int16] */;
  %651 = cast(%var_7182, dtype="float32") /* ty=Tensor[(50, 9), float32] */;
  %652 = reshape(%649, newshape=[8, 7, 13]) /* ty=Tensor[(8, 7, 13), uint8] */;
  %653 = reshape(%650, newshape=[1575]) /* ty=Tensor[(1575), int16] */;
  %654 = reshape(%651, newshape=[450]) /* ty=Tensor[(450), float32] */;
  %655 = @func_1666(%652, %653, %654) /* ty=(Tensor[(8, 7, 13), uint8], Tensor[(?, 450), int16], Tensor[(1575), int16], Tensor[(450), float32], Tensor[(?, 450), uint64], Tensor[(?, 450), uint64]) */;
  %656 = cos(%646) /* ty=Tensor[(7, 13, 7), float32] */;
  %657 = @func_4275(%648) /* ty=Tensor[(6, 9, 7), bool] */;
  %658 = %655.5;
  (%656, %657, %var_7174, %658, %var_7180, meta[relay.Constant][37] /* ty=Tensor[(1575), int16] */, %var_7182)
}

def @func_2199() -> (Tensor[(7, 13, 7), float64],) {
  %661 = fn () -> (Tensor[(7, 13, 7), float64],) {
    %659 = cast(meta[relay.Constant][38] /* ty=Tensor[(7, 13, 7), float64] */, dtype="float64") /* ty=Tensor[(7, 13, 7), float64] */;
    %660 = asin(%659) /* ty=Tensor[(7, 13, 7), float64] */;
    (%660,)
  };
  %661() /* ty=(Tensor[(7, 13, 7), float64],) */
}

def @func_4336() -> (Tensor[(450), int8], Tensor[(16, 2, 12), uint32], Tensor[(384), uint32]) {
  %666 = fn () -> (Tensor[(450), int8], Tensor[(16, 2, 12), uint32], Tensor[(384), uint32]) {
    %662 = cast(meta[relay.Constant][39] /* ty=Tensor[(384), uint32] */, dtype="uint32") /* ty=Tensor[(384), uint32] */;
    %663 = reshape(%662, newshape=[16, 2, 12]) /* ty=Tensor[(16, 2, 12), uint32] */;
    %664 = @func_3558() /* ty=Tensor[(450), int8] */;
    %665 = @func_2580(%663) /* ty=Tensor[(16, 2, 12), uint32] */;
    (%664, %665, meta[relay.Constant][39] /* ty=Tensor[(384), uint32] */)
  };
  %666() /* ty=(Tensor[(450), int8], Tensor[(16, 2, 12), uint32], Tensor[(384), uint32]) */
}

def @func_7871(%var_7869: Tensor[(7, 13, 7), float64]) -> (Tensor[(7, 13, 7), bool], Tensor[(450), float64]) {
  @func_7868(%var_7869) /* ty=(Tensor[(7, 13, 7), bool], Tensor[(450), float64]) */
}

def @func_4416() -> Tensor[(780), float32] {
  %667 = fn () -> Tensor[(780), float32] {
    @func_4237() /* ty=Tensor[(780), float32] */
  };
  %667() /* ty=Tensor[(780), float32] */
}

def @func_7541() -> Tensor[(7, 13, 7), float64] {
  %669 = fn () -> Tensor[(7, 13, 7), float64] {
    %668 = @func_2410() /* ty=(Tensor[(7, 13, 7), float64],) */;
    %668.0
  };
  %669() /* ty=Tensor[(7, 13, 7), float64] */
}

def @func_5230() -> (Tensor[(7, 13, 7), float64], Tensor[(450), int8], Tensor[(450), int8]) {
  %670 = @func_3553() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(450), bool]) */;
  %671 = @func_3628() /* ty=(Tensor[(780), float32], Tensor[(450), int8]) */;
  %672 = @func_4499() /* ty=(Tensor[(450), int8],) */;
  %673 = %670.0;
  %674 = %671.1;
  %675 = %672.0;
  (%673, %674, %675)
}

def @func_7887() -> Tensor[(7, 13, 7), float64] {
  %676 = @func_4852() /* ty=(Tensor[(7, 13, 7), float64],) */;
  %676.0
}

def @func_4958() -> (Tensor[(450), int8],) {
  %677 = @func_4499() /* ty=(Tensor[(450), int8],) */;
  %678 = %677.0;
  (%678,)
}

def @func_4625() -> (Tensor[(7, 13, 7), float64],) {
  %681 = fn () -> (Tensor[(7, 13, 7), float64],) {
    %679 = @func_3359() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(780), float32]) */;
    %680 = %679.0;
    (%680,)
  };
  %681() /* ty=(Tensor[(7, 13, 7), float64],) */
}

def @func_3506() -> Tensor[(450), bool] {
  %682 = @func_3181() /* ty=(Tensor[(450), bool],) */;
  %682.0
}

def @func_2767() -> (Tensor[(7, 13, 7), float64], Tensor[(6, 10, 13), float32], Tensor[(780), float32]) {
  @func_2765() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(6, 10, 13), float32], Tensor[(780), float32]) */
}

def @func_2582(%var_2581: Tensor[(16, 2, 12), uint32]) -> Tensor[(16, 2, 12), uint32] {
  %687 = fn (%var_2570: Tensor[(16, 2, 12), uint32]) -> Tensor[(16, 2, 12), uint32] {
    %683 = cast(meta[relay.Constant][40] /* ty=Tensor[(16, 2, 12), uint32] */, dtype="uint32") /* ty=Tensor[(16, 2, 12), uint32] */;
    %684 = shape_of(%var_2570, dtype="int32") /* ty=Tensor[(3), int32] */;
    %685 = cast(%var_2570, dtype="uint32") /* ty=Tensor[(16, 2, 12), uint32] */;
    %686 = dyn.reshape(%683, %684, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    logical_xor(%685, %686) /* ty=Tensor[(16, 2, 12), uint32] */
  };
  %687(%var_2581) /* ty=Tensor[(16, 2, 12), uint32] */
}

def @func_4128() -> Tensor[(450), int8] {
  @func_3558() /* ty=Tensor[(450), int8] */
}

def @func_6038() -> (Tensor[(450), float64], Tensor[(7, 13, 7), float64], Tensor[(450), bool], Tensor[(5, 6, 15), float64]) {
  %688 = @func_4438() /* ty=(Tensor[(450), float64],) */;
  %689 = @func_4624() /* ty=(Tensor[(7, 13, 7), float64],) */;
  %690 = %688.0;
  %691 = cast(%690, dtype="float32") /* ty=Tensor[(450), float32] */;
  %692 = reshape(%691, newshape=[5, 6, 15]) /* ty=Tensor[(5, 6, 15), float32] */;
  %693 = @func_166(%692) /* ty=Tensor[(5, 6, 15), float32] */;
  %694 = cast(%693, dtype="float64") /* ty=Tensor[(5, 6, 15), float64] */;
  %695 = %689.0;
  %696 = @func_2909() /* ty=Tensor[(450), bool] */;
  %697 = acos(%694) /* ty=Tensor[(5, 6, 15), float64] */;
  (%690, %695, %696, %697)
}

def @func_5777() -> (Tensor[(450), int8],) {
  %700 = fn () -> (Tensor[(450), int8],) {
    %698 = @func_4958() /* ty=(Tensor[(450), int8],) */;
    %699 = %698.0;
    (%699,)
  };
  %700() /* ty=(Tensor[(450), int8],) */
}

def @func_3555() -> (Tensor[(7, 13, 7), float64], Tensor[(450), bool]) {
  @func_3553() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(450), bool]) */
}

def @func_6489(%var_6487: Tensor[(6, 10, 16), float64]) -> (Tensor[(6, 10, 16), float64], Tensor[(7, 13, 7), float64], Tensor[(7, 13, 7), float64]) {
  @func_6486(%var_6487) /* ty=(Tensor[(6, 10, 16), float64], Tensor[(7, 13, 7), float64], Tensor[(7, 13, 7), float64]) */
}

def @func_3150() -> (Tensor[(450), bool], Tensor[(7, 13, 7), float64], Tensor[(132, 2), float64], Tensor[(132, 2), float64], Tensor[(7, 13, 7), float64]) {
  @func_3148() /* ty=(Tensor[(450), bool], Tensor[(7, 13, 7), float64], Tensor[(132, 2), float64], Tensor[(132, 2), float64], Tensor[(7, 13, 7), float64]) */
}

def @func_2411() -> (Tensor[(7, 13, 7), float64],) {
  %703 = fn () -> (Tensor[(7, 13, 7), float64],) {
    %701 = @func_2399() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(12, 11, 2), float64], Tensor[(132, 2), float32]) */;
    %702 = %701.0;
    (%702,)
  };
  %703() /* ty=(Tensor[(7, 13, 7), float64],) */
}

def @func_4739(%var_4704: Tensor[(16, 2, 12), uint32]) -> (Tensor[(16, 2, 12), float64], Tensor[(16, 2, 12), float64]) {
  %704 = @func_4335() /* ty=(Tensor[(450), int8], Tensor[(16, 2, 12), uint32], Tensor[(384), uint32]) */;
  %705 = %704.1;
  %706 = cast(%var_4704, dtype="float64") /* ty=Tensor[(16, 2, 12), float64] */;
  %707 = shape_of(%705, dtype="int32") /* ty=Tensor[(3), int32] */;
  %708 = cast(%705, dtype="float64") /* ty=Tensor[(16, 2, 12), float64] */;
  %709 = dyn.reshape(%706, %707, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %710 = cast(%var_4704, dtype="float64") /* ty=Tensor[(16, 2, 12), float64] */;
  %711 = shape_of(%705, dtype="int32") /* ty=Tensor[(3), int32] */;
  %712 = cast(%705, dtype="float64") /* ty=Tensor[(16, 2, 12), float64] */;
  %713 = dyn.reshape(%710, %711, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %714 = power(%708, %709) /* ty=Tensor[(16, 2, 12), float64] */;
  %715 = divide(%712, %713) /* ty=Tensor[(16, 2, 12), float64] */;
  (%714, %715)
}

def @func_5719() -> Tensor[(780), bool] {
  %716 = @func_4415() /* ty=Tensor[(780), float32] */;
  %717 = @func_4863() /* ty=Tensor[(780), float32] */;
  %718 = cast(%717, dtype="bool") /* ty=Tensor[(780), bool] */;
  %719 = shape_of(%716, dtype="int32") /* ty=Tensor[(1), int32] */;
  %720 = cast(%716, dtype="bool") /* ty=Tensor[(780), bool] */;
  %721 = dyn.reshape(%718, %719, newshape=[]) /* ty=Tensor[(?), bool] */;
  greater_equal(%720, %721) /* ty=Tensor[(780), bool] */
}

def @func_3942() -> (Tensor[(450), bool], Tensor[(450), bool]) {
  %725 = fn () -> (Tensor[(450), bool], Tensor[(450), bool]) {
    %722 = @func_3181() /* ty=(Tensor[(450), bool],) */;
    %723 = @func_2909() /* ty=Tensor[(450), bool] */;
    %724 = %722.0;
    (%723, %724)
  };
  %725() /* ty=(Tensor[(450), bool], Tensor[(450), bool]) */
}

def @func_3023(%var_3022: Tensor[(12, 11, 2), float64]) -> (Tensor[(7, 13, 7), float64], Tensor[(1575), int16], Tensor[(12, 11, 2), bool], Tensor[(1080), float64], Tensor[(5, 6, 15), float32], Tensor[(?, 450), int16], Tensor[(12, 11, 2), int32]) {
  %760 = fn (%var_2969: Tensor[(12, 11, 2), float64]) -> (Tensor[(7, 13, 7), float64], Tensor[(1575), int16], Tensor[(12, 11, 2), bool], Tensor[(1080), float64], Tensor[(5, 6, 15), float32], Tensor[(?, 450), int16], Tensor[(12, 11, 2), int32]) {
    %726 = cast(meta[relay.Constant][41] /* ty=Tensor[(1080), bool] */, dtype="bool") /* ty=Tensor[(1080), bool] */;
    %727 = cast(meta[relay.Constant][42] /* ty=Tensor[(1575), int16] */, dtype="int16") /* ty=Tensor[(1575), int16] */;
    %728 = reshape(%726, newshape=[1080]) /* ty=Tensor[(1080), bool] */;
    %729 = reshape(%727, newshape=[15, 105]) /* ty=Tensor[(15, 105), int16] */;
    %730 = @func_2632(%728, %729) /* ty=(Tensor[(132, 2), float32], Tensor[(7, 13, 7), float64], Tensor[(5, 6, 15), float32], Tensor[(1080), bool], Tensor[(15, 105), int16]) */;
    %731 = @func_2399() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(12, 11, 2), float64], Tensor[(132, 2), float32]) */;
    %732 = %731.1;
    %733 = cast(%var_2969, dtype="bool") /* ty=Tensor[(12, 11, 2), bool] */;
    %734 = shape_of(%732, dtype="int32") /* ty=Tensor[(3), int32] */;
    %735 = cast(%732, dtype="bool") /* ty=Tensor[(12, 11, 2), bool] */;
    %736 = dyn.reshape(%733, %734, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %737 = cast(meta[relay.Constant][41] /* ty=Tensor[(1080), bool] */, dtype="float64") /* ty=Tensor[(1080), float64] */;
    %738 = cast(meta[relay.Constant][41] /* ty=Tensor[(1080), bool] */, dtype="bool") /* ty=Tensor[(1080), bool] */;
    %739 = cast(meta[relay.Constant][42] /* ty=Tensor[(1575), int16] */, dtype="int16") /* ty=Tensor[(1575), int16] */;
    %740 = reshape(%738, newshape=[10, 9, 12]) /* ty=Tensor[(10, 9, 12), bool] */;
    %741 = reshape(%739, newshape=[105, 15]) /* ty=Tensor[(105, 15), int16] */;
    %742 = @func_1928(%740, %741) /* ty=(Tensor[(10, 9, 12), bool], Tensor[(5, 6, 15), float32], Tensor[(105, 15), int16], Tensor[(450), float32]) */;
    %743 = cast(meta[relay.Constant][42] /* ty=Tensor[(1575), int16] */, dtype="int16") /* ty=Tensor[(1575), int16] */;
    %744 = %742.1;
    %745 = cast(%744, dtype="float32") /* ty=Tensor[(5, 6, 15), float32] */;
    %746 = reshape(%743, newshape=[7, 15, 15]) /* ty=Tensor[(7, 15, 15), int16] */;
    %747 = reshape(%745, newshape=[1, 450]) /* ty=Tensor[(1, 450), float32] */;
    %748 = @func_728(%746, %747) /* ty=(Tensor[(7, 15, 15), int16], Tensor[(5, 6, 15), float32], Tensor[(?, 450), uint64], Tensor[(5, 6, 15), float32], Tensor[(?, 450), int16]) */;
    %749 = cast(%var_2969, dtype="float64") /* ty=Tensor[(12, 11, 2), float64] */;
    %750 = log2(%749) /* ty=Tensor[(12, 11, 2), float64] */;
    %751 = cast(%732, dtype="int32") /* ty=Tensor[(12, 11, 2), int32] */;
    %752 = shape_of(%750, dtype="int32") /* ty=Tensor[(3), int32] */;
    %753 = cast(%750, dtype="int32") /* ty=Tensor[(12, 11, 2), int32] */;
    %754 = dyn.reshape(%751, %752, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %755 = %730.1;
    %756 = logical_and(%735, %736) /* ty=Tensor[(12, 11, 2), bool] */;
    %757 = log10(%737) /* ty=Tensor[(1080), float64] */;
    %758 = %748.4;
    %759 = left_shift(%753, %754) /* ty=Tensor[(12, 11, 2), int32] */;
    (%755, meta[relay.Constant][42] /* ty=Tensor[(1575), int16] */, %756, %757, %744, %758, %759)
  };
  %760(%var_3022) /* ty=(Tensor[(7, 13, 7), float64], Tensor[(1575), int16], Tensor[(12, 11, 2), bool], Tensor[(1080), float64], Tensor[(5, 6, 15), float32], Tensor[(?, 450), int16], Tensor[(12, 11, 2), int32]) */
}

def @func_3194() -> (Tensor[(780), float32],) {
  %763 = fn () -> (Tensor[(780), float32],) {
    %761 = @func_2765() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(6, 10, 13), float32], Tensor[(780), float32]) */;
    %762 = %761.2;
    (%762,)
  };
  %763() /* ty=(Tensor[(780), float32],) */
}

def @func_4864() -> Tensor[(780), float32] {
  %765 = fn () -> Tensor[(780), float32] {
    %764 = @func_3359() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(780), float32]) */;
    %764.1
  };
  %765() /* ty=Tensor[(780), float32] */
}

def @func_3553() -> (Tensor[(7, 13, 7), float64], Tensor[(450), bool]) {
  %766 = @func_3258() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(7, 13, 7), float64]) */;
  %767 = @func_3181() /* ty=(Tensor[(450), bool],) */;
  %768 = %766.1;
  %769 = %767.0;
  (%768, %769)
}

def @func_7283() -> (Tensor[(7, 13, 7), float64],) {
  @func_7281() /* ty=(Tensor[(7, 13, 7), float64],) */
}

def @func_4605(%var_4603: Tensor[(75), int8]) -> (Tensor[(450), bool], Tensor[(5, 6, 15), float32], Tensor[(2400), bool], Tensor[(75), int8], Tensor[(728, 9), bool], Tensor[(728, 9), float32], Tensor[(450), bool], Tensor[(450), int8], Tensor[(450), int8]) {
  @func_4602(%var_4603) /* ty=(Tensor[(450), bool], Tensor[(5, 6, 15), float32], Tensor[(2400), bool], Tensor[(75), int8], Tensor[(728, 9), bool], Tensor[(728, 9), float32], Tensor[(450), bool], Tensor[(450), int8], Tensor[(450), int8]) */
}

def @func_4184() -> Tensor[(450), bool] {
  %770 = fn () -> Tensor[(450), bool] {
    @func_2909() /* ty=Tensor[(450), bool] */
  };
  %770() /* ty=Tensor[(450), bool] */
}

def @func_3508() -> Tensor[(450), bool] {
  @func_3506() /* ty=Tensor[(450), bool] */
}

def @func_3719() -> (Tensor[(450), int8], Tensor[(7, 13, 7), float32]) {
  %776 = fn () -> (Tensor[(450), int8], Tensor[(7, 13, 7), float32]) {
    %771 = @func_2683() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(450), int8]) */;
    %772 = %771.0;
    %773 = cast(%772, dtype="float32") /* ty=Tensor[(7, 13, 7), float32] */;
    %774 = @func_3558() /* ty=Tensor[(450), int8] */;
    %775 = cosh(%773) /* ty=Tensor[(7, 13, 7), float32] */;
    (%774, %775)
  };
  %776() /* ty=(Tensor[(450), int8], Tensor[(7, 13, 7), float32]) */
}

def @func_5005(%var_5004: Tensor[(234), float32]) -> (Tensor[(450), bool], Tensor[(6, 13, 3), float32], Tensor[(234), float32]) {
  %783 = fn (%var_4990: Tensor[(234), float32]) -> (Tensor[(450), bool], Tensor[(6, 13, 3), float32], Tensor[(234), float32]) {
    %777 = @func_3181() /* ty=(Tensor[(450), bool],) */;
    %778 = cast(%var_4990, dtype="float32") /* ty=Tensor[(234), float32] */;
    %779 = reshape(%778, newshape=[6, 13, 3]) /* ty=Tensor[(6, 13, 3), float32] */;
    %780 = @func_1401(%779) /* ty=(Tensor[(6, 13, 3), float32],) */;
    %781 = %777.0;
    %782 = %780.0;
    (%781, %782, %var_4990)
  };
  %783(%var_5004) /* ty=(Tensor[(450), bool], Tensor[(6, 13, 3), float32], Tensor[(234), float32]) */
}

def @func_2859() -> Tensor[(450), bool] {
  %792 = fn () -> Tensor[(450), bool] {
    %784 = @func_2791() /* ty=(Tensor[(450), int8],) */;
    %785 = %784.0;
    %786 = cast(%785, dtype="float64") /* ty=Tensor[(450), float64] */;
    %787 = sigmoid(%786) /* ty=Tensor[(450), float64] */;
    %788 = cast(%787, dtype="bool") /* ty=Tensor[(450), bool] */;
    %789 = shape_of(%785, dtype="int32") /* ty=Tensor[(1), int32] */;
    %790 = cast(%785, dtype="bool") /* ty=Tensor[(450), bool] */;
    %791 = dyn.reshape(%788, %789, newshape=[]) /* ty=Tensor[(?), bool] */;
    not_equal(%790, %791) /* ty=Tensor[(450), bool] */
  };
  %792() /* ty=Tensor[(450), bool] */
}

def @func_2791() -> (Tensor[(450), int8],) {
  %793 = @func_2683() /* ty=(Tensor[(7, 13, 7), float64], Tensor[(450), int8]) */;
  %794 = %793.1;
  (%794,)
}

def @func_1931(%var_1929: Tensor[(10, 9, 12), bool], %var_1930: Tensor[(105, 15), int16]) -> (Tensor[(10, 9, 12), bool], Tensor[(5, 6, 15), float32], Tensor[(105, 15), int16], Tensor[(450), float32]) {
  %806 = fn (%var_1908: Tensor[(10, 9, 12), bool], %var_1915: Tensor[(105, 15), int16]) -> (Tensor[(10, 9, 12), bool], Tensor[(5, 6, 15), float32], Tensor[(105, 15), int16], Tensor[(450), float32]) {
    %795 = cast(meta[relay.Constant][43] /* ty=Tensor[(10, 9, 12), bool] */, dtype="bool") /* ty=Tensor[(10, 9, 12), bool] */;
    %796 = shape_of(%var_1908, dtype="int32") /* ty=Tensor[(3), int32] */;
    %797 = cast(%var_1908, dtype="bool") /* ty=Tensor[(10, 9, 12), bool] */;
    %798 = dyn.reshape(%795, %796, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %799 = cast(%var_1915, dtype="int16") /* ty=Tensor[(105, 15), int16] */;
    %800 = cast(meta[relay.Constant][44] /* ty=Tensor[(450), float32] */, dtype="float32") /* ty=Tensor[(450), float32] */;
    %801 = reshape(%799, newshape=[7, 15, 15]) /* ty=Tensor[(7, 15, 15), int16] */;
    %802 = reshape(%800, newshape=[1, 450]) /* ty=Tensor[(1, 450), float32] */;
    %803 = @func_728(%801, %802) /* ty=(Tensor[(7, 15, 15), int16], Tensor[(5, 6, 15), float32], Tensor[(?, 450), uint64], Tensor[(5, 6, 15), float32], Tensor[(?, 450), int16]) */;
    %804 = logical_and(%797, %798) /* ty=Tensor[(10, 9, 12), bool] */;
    %805 = %803.1;
    (%804, %805, %var_1915, meta[relay.Constant][44] /* ty=Tensor[(450), float32] */)
  };
  %806(%var_1929, %var_1930) /* ty=(Tensor[(10, 9, 12), bool], Tensor[(5, 6, 15), float32], Tensor[(105, 15), int16], Tensor[(450), float32]) */
}

def @func_6384(%var_6382: Tensor[(450), int8]) -> (Tensor[(450), float64],) {
  @func_6381(%var_6382) /* ty=(Tensor[(450), float64],) */
}

def @func_4238() -> Tensor[(780), float32] {
  %808 = fn () -> Tensor[(780), float32] {
    %807 = @func_3628() /* ty=(Tensor[(780), float32], Tensor[(450), int8]) */;
    %807.0
  };
  %808() /* ty=Tensor[(780), float32] */
}

def @func_7889() -> Tensor[(7, 13, 7), float64] {
  @func_7887() /* ty=Tensor[(7, 13, 7), float64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen338/build/output.py:2275: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen338/build/output.py", line 2280, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(882) tvmgen_default_fused_reshape_power_kernel0(float* __restrict__ T_power, float* __restrict__ placeholder, float* __restrict__ placeholder1) {
  T_power[(((int)threadIdx.x))] = powf(placeholder[(((int)threadIdx.x))], placeholder1[(((int)threadIdx.x))]);
}

extern "C" __global__ void __launch_bounds__(882) tvmgen_default_fused_cast_tan_kernel0(double* __restrict__ T_tan, float* __restrict__ placeholder) {
  T_tan[(((int)threadIdx.x))] = tan(((double)placeholder[(((int)threadIdx.x))]));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

