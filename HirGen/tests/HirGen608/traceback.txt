==========mod==========
#[version = "0.0.5"]
def @func_7761() -> (Tensor[(30, 2), float32], Tensor[(14, 14, 9), float64]) {
  %0 = @func_7534() /* ty=(Tensor[(30, 2), float64],) */;
  %1 = %0.0;
  %2 = cast(%1, dtype="float32") /* ty=Tensor[(30, 2), float32] */;
  %3 = log(%2) /* ty=Tensor[(30, 2), float32] */;
  %4 = @func_4278() /* ty=Tensor[(14, 14, 9), float64] */;
  (%3, %4)
}

def @func_9166() -> (Tensor[(14, 14, 9), float64],) {
  %5 = @func_7554() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %6 = %5.0;
  (%6,)
}

def @func_5399(%var_5354: Tensor[(1, 15, 14), int32]) -> (Tensor[(2, 15, 14), int32], Tensor[(14, 14, 9), float64]) {
  %7 = cast(%var_5354, dtype="int32") /* ty=Tensor[(1, 15, 14), int32] */;
  %8 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 15, 14), int32] */, dtype="int32") /* ty=Tensor[(2, 15, 14), int32] */;
  %9 = @func_5043() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */;
  %10 = bitwise_or(%7, %8) /* ty=Tensor[(2, 15, 14), int32] */;
  %11 = %9.0;
  (%10, %11)
}

def @func_3621() -> (Tensor[(14, 14, 9), float64],) {
  %12 = @func_2432() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %13 = %12.0;
  (%13,)
}

def @func_10234() -> (Tensor[(14, 14, 9), float64],) {
  %14 = @func_6589() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %15 = %14.0;
  (%15,)
}

def @func_6569() -> Tensor[(14, 14, 9), bool] {
  @func_6550() /* ty=Tensor[(14, 14, 9), bool] */
}

def @func_7410() -> Tensor[(14, 14, 9), float64] {
  @func_4894() /* ty=Tensor[(14, 14, 9), float64] */
}

def @func_5869() -> (Tensor[(520), float64], Tensor[(5, 104), uint64]) {
  %16 = @func_5661() /* ty=(Tensor[(520), float64],) */;
  %17 = @func_5170() /* ty=(Tensor[(5, 104), uint64],) */;
  %18 = %16.0;
  %19 = %17.0;
  (%18, %19)
}

def @func_7234() -> (Tensor[(520), float64],) {
  %20 = @func_5099() /* ty=(Tensor[(520), float64],) */;
  %21 = %20.0;
  (%21,)
}

def @func_5307() -> (Tensor[(14, 14, 9), float64],) {
  %22 = @func_3658() /* ty=Tensor[(14, 14, 9), float64] */;
  (%22,)
}

def @func_4784() -> (Tensor[(5, 104), float64],) {
  %23 = @func_3097() /* ty=(Tensor[(5, 104), float64], Tensor[(14, 14, 9), float64], Tensor[(520), float64]) */;
  %24 = %23.0;
  (%24,)
}

def @func_2775() -> (Tensor[(14, 14, 9), float64], Tensor[(13, 5, 8), float64], Tensor[(520), float64]) {
  %25 = @func_1997() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %26 = %25.0;
  %27 = cast(%26, dtype="float64") /* ty=Tensor[(14, 14, 9), float64] */;
  %28 = cast(meta[relay.Constant][1] /* ty=Tensor[(520), float64] */, dtype="float64") /* ty=Tensor[(520), float64] */;
  %29 = reshape(%28, newshape=[13, 5, 8]) /* ty=Tensor[(13, 5, 8), float64] */;
  %30 = @func_1769(%29) /* ty=(Tensor[(13, 5, 8), float64],) */;
  %31 = acos(%27) /* ty=Tensor[(14, 14, 9), float64] */;
  %32 = %30.0;
  (%31, %32, meta[relay.Constant][1] /* ty=Tensor[(520), float64] */)
}

def @func_8506() -> (Tensor[(520), float64], Tensor[(14, 2, 15), bool], Tensor[(14, 14, 9), float64], Tensor[(13, 5, 8), float64]) {
  %33 = @func_3247() /* ty=(Tensor[(520), float64],) */;
  %34 = @func_6362() /* ty=(Tensor[(14, 2, 15), bool],) */;
  %35 = @func_5043() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */;
  %36 = %33.0;
  %37 = cast(%36, dtype="float64") /* ty=Tensor[(520), float64] */;
  %38 = reshape(%37, newshape=[5, 104]) /* ty=Tensor[(5, 104), float64] */;
  %39 = @func_1845(%38) /* ty=(Tensor[(14, 14, 9), float32], Tensor[(13, 5, 8), float64], Tensor[(5, 104), float64]) */;
  %40 = %34.0;
  %41 = %35.0;
  %42 = %39.1;
  (%36, %40, %41, %42)
}

def @func_3571() -> (Tensor[(16, 6, 9), int64], Tensor[(864, 1), int64], Tensor[(14, 14, 9), float64], Tensor[(520), float64], Tensor[(13, 5, 8), float32]) {
  %43 = cast(meta[relay.Constant][2] /* ty=Tensor[(864, 1), int64] */, dtype="int64") /* ty=Tensor[(864, 1), int64] */;
  %44 = cast(meta[relay.Constant][2] /* ty=Tensor[(864, 1), int64] */, dtype="int64") /* ty=Tensor[(864, 1), int64] */;
  %45 = reshape(%43, newshape=[16, 6, 9]) /* ty=Tensor[(16, 6, 9), int64] */;
  %46 = reshape(%44, newshape=[16, 6, 9]) /* ty=Tensor[(16, 6, 9), int64] */;
  %47 = @func_2917() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %48 = @func_2404() /* ty=(Tensor[(14, 14, 9), bool], Tensor[(520), float64]) */;
  %49 = @func_2775() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(13, 5, 8), float64], Tensor[(520), float64]) */;
  %50 = %49.1;
  %51 = cast(%50, dtype="float32") /* ty=Tensor[(13, 5, 8), float32] */;
  %52 = @func_2025(%45, %46) /* ty=Tensor[(16, 6, 9), int64] */;
  %53 = %47.0;
  %54 = %48.1;
  %55 = rsqrt(%51) /* ty=Tensor[(13, 5, 8), float32] */;
  (%52, meta[relay.Constant][2] /* ty=Tensor[(864, 1), int64] */, %53, %54, %55)
}

def @func_6161(%var_6154: Tensor[(13, 5, 8), float32]) -> (Tensor[(135), float64], Tensor[(13, 5, 8), int64]) {
  %56 = @func_5236() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(3, 15, 3), float64], Tensor[(135), float64], Tensor[(14, 14, 9), float32], Tensor[(5, 104), uint64]) */;
  %57 = @func_3571() /* ty=(Tensor[(16, 6, 9), int64], Tensor[(864, 1), int64], Tensor[(14, 14, 9), float64], Tensor[(520), float64], Tensor[(13, 5, 8), float32]) */;
  %58 = %57.4;
  %59 = cast(%var_6154, dtype="int64") /* ty=Tensor[(13, 5, 8), int64] */;
  %60 = shape_of(%58, dtype="int32") /* ty=Tensor[(3), int32] */;
  %61 = cast(%58, dtype="int64") /* ty=Tensor[(13, 5, 8), int64] */;
  %62 = dyn.reshape(%59, %60, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %63 = %56.2;
  %64 = left_shift(%61, %62) /* ty=Tensor[(13, 5, 8), int64] */;
  (%63, %64)
}

def @func_2503(%var_2497: Tensor[(3, 15, 3), float64]) -> Tensor[(3, 15, 3), float64] {
  %65 = cast(%var_2497, dtype="float64") /* ty=Tensor[(3, 15, 3), float64] */;
  log(%65) /* ty=Tensor[(3, 15, 3), float64] */
}

def @func_3288() -> Tensor[(14, 14, 9), float64] {
  %66 = @func_3071() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), bool]) */;
  %66.0
}

def @func_9589() -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) {
  %67 = @func_1952() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %68 = @func_3071() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), bool]) */;
  %69 = %67.0;
  %70 = %68.0;
  (%69, %70)
}

def @func_4278() -> Tensor[(14, 14, 9), float64] {
  %71 = @func_4205() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */;
  %71.0
}

def @func_1811() -> (Tensor[(14, 14, 9), float64],) {
  %72 = @func_1673() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %73 = %72.0;
  (%73,)
}

def @func_9805(%var_9801: Tensor[(60), float32]) -> (Tensor[(14, 14, 9), float64], Tensor[(520), float64], Tensor[(60), float32]) {
  %74 = cast(%var_9801, dtype="float32") /* ty=Tensor[(60), float32] */;
  %75 = reshape(%74, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %76 = @func_7450(%75) /* ty=(Tensor[(520), float64], Tensor[(6, 10, 520), int8], Tensor[(60), float32]) */;
  %77 = @func_3658() /* ty=Tensor[(14, 14, 9), float64] */;
  %78 = %76.0;
  (%77, %78, %var_9801)
}

def @func_3418() -> (Tensor[(36), bool],) {
  %79 = @func_2904() /* ty=(Tensor[(36), bool],) */;
  %80 = %79.0;
  (%80,)
}

def @func_1802(%var_1788: Tensor[(36), bool]) -> (Tensor[(14, 14, 9), float64], Tensor[(2, 12, 3), bool], Tensor[(36), bool], Tensor[(72), bool], Tensor[(30, 2), float32]) {
  %81 = @func_1734() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */;
  %82 = cast(%var_1788, dtype="bool") /* ty=Tensor[(36), bool] */;
  %83 = cast(meta[relay.Constant][3] /* ty=Tensor[(72), bool] */, dtype="bool") /* ty=Tensor[(72), bool] */;
  %84 = cast(meta[relay.Constant][4] /* ty=Tensor[(30, 2), float32] */, dtype="float32") /* ty=Tensor[(30, 2), float32] */;
  %85 = reshape(%82, newshape=[1, 12, 3]) /* ty=Tensor[(1, 12, 3), bool] */;
  %86 = reshape(%83, newshape=[2, 12, 3]) /* ty=Tensor[(2, 12, 3), bool] */;
  %87 = reshape(%84, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %88 = @func_642(%85, %86, %87) /* ty=(Tensor[(2, 12, 3), bool], Tensor[(6, 10, ?), uint8], Tensor[(80), bool], Tensor[(60), float32]) */;
  %89 = %81.1;
  %90 = %88.0;
  (%89, %90, %var_1788, meta[relay.Constant][3] /* ty=Tensor[(72), bool] */, meta[relay.Constant][4] /* ty=Tensor[(30, 2), float32] */)
}

def @func_9297() -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), bool]) {
  %91 = @func_7069() /* ty=(Tensor[(520), float64], Tensor[(36), bool], Tensor[(14, 14, 9), bool]) */;
  %92 = @func_7104() /* ty=Tensor[(14, 14, 9), float64] */;
  %93 = %91.2;
  (%92, %93)
}

def @main(%var_10822: Tensor[(3, 3, 13), bool], %var_10823: Tensor[(3, 3, 13), bool]) -> (Tensor[(3, 3, 13), bool],) {
  %94 = cast(%var_10823, dtype="bool") /* ty=Tensor[(3, 3, 13), bool] */;
  %95 = shape_of(%var_10822, dtype="int32") /* ty=Tensor[(3), int32] */;
  %96 = cast(%var_10822, dtype="bool") /* ty=Tensor[(3, 3, 13), bool] */;
  %97 = dyn.reshape(%94, %95, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %98 = logical_or(%96, %97) /* ty=Tensor[(3, 3, 13), bool] */;
  (%98,)
}

def @func_3097() -> (Tensor[(5, 104), float64], Tensor[(14, 14, 9), float64], Tensor[(520), float64]) {
  %99 = @func_2151() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(72), bool], Tensor[(36), bool], Tensor[(14, 14, 9), float64], Tensor[(2160), float32], Tensor[(5, 104), float64], Tensor[(520), float64]) */;
  %100 = %99.5;
  %101 = @func_2722() /* ty=Tensor[(14, 14, 9), float64] */;
  %102 = @func_2365() /* ty=Tensor[(520), float64] */;
  (%100, %101, %102)
}

def @func_46(%var_22: Tensor[(6, 10, 1), float32]) -> (Tensor[(6, 10, ?), uint8],) {
  %103 = cast(%var_22, dtype="float32") /* ty=Tensor[(6, 10, 1), float32] */;
  %104 = tan(%103) /* ty=Tensor[(6, 10, 1), float32] */;
  %105 = cast(%104, dtype="uint64") /* ty=Tensor[(6, 10, 1), uint64] */;
  %106 = shape_of(%var_22, dtype="int32") /* ty=Tensor[(3), int32] */;
  %107 = cast(%var_22, dtype="uint64") /* ty=Tensor[(6, 10, 1), uint64] */;
  %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %109 = subtract(%107, %108) /* ty=Tensor[(6, 10, ?), uint64] */;
  %110 = cast(%104, dtype="uint8") /* ty=Tensor[(6, 10, 1), uint8] */;
  %111 = shape_of(%109, dtype="int32") /* ty=Tensor[(3), int32] */;
  %112 = cast(%109, dtype="uint8") /* ty=Tensor[(6, 10, ?), uint8] */;
  %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %114 = left_shift(%112, %113) /* ty=Tensor[(6, 10, ?), uint8] */;
  (%114,)
}

def @func_4838(%var_4823: Tensor[(360, 6), float32]) -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(360, 6), int8]) {
  %115 = @func_1734() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */;
  %116 = @func_4205() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */;
  %117 = cast(%var_4823, dtype="float32") /* ty=Tensor[(360, 6), float32] */;
  %118 = cast(%var_4823, dtype="float32") /* ty=Tensor[(360, 6), float32] */;
  %119 = reshape(%117, newshape=[15, 12, 12]) /* ty=Tensor[(15, 12, 12), float32] */;
  %120 = reshape(%118, newshape=[15, 12, 12]) /* ty=Tensor[(15, 12, 12), float32] */;
  %121 = @func_1090(%119, %120) /* ty=Tensor[(15, 12, 12), float32] */;
  %122 = cast(%121, dtype="int8") /* ty=Tensor[(15, 12, 12), int8] */;
  %123 = shape_of(%var_4823, dtype="int32") /* ty=Tensor[(2), int32] */;
  %124 = cast(%var_4823, dtype="int8") /* ty=Tensor[(360, 6), int8] */;
  %125 = dyn.reshape(%122, %123, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %126 = %115.0;
  %127 = %116.2;
  %128 = minimum(%124, %125) /* ty=Tensor[(360, 6), int8] */;
  (%126, %127, %128)
}

def @func_5099() -> (Tensor[(520), float64],) {
  %129 = @func_2296() /* ty=Tensor[(520), float64] */;
  (%129,)
}

def @func_2415() -> (Tensor[(14, 14, 9), float64],) {
  %130 = @func_2151() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(72), bool], Tensor[(36), bool], Tensor[(14, 14, 9), float64], Tensor[(2160), float32], Tensor[(5, 104), float64], Tensor[(520), float64]) */;
  %131 = %130.0;
  (%131,)
}

def @func_4164() -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) {
  %132 = @func_2415() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %133 = %132.0;
  %134 = @func_2475() /* ty=Tensor[(14, 14, 9), float64] */;
  (%133, %134)
}

def @func_6060() -> Tensor[(14, 14, 9), float64] {
  %135 = @func_1908() /* ty=(Tensor[(14, 14, 9), float32], Tensor[(14, 14, 9), float64]) */;
  %136 = %135.0;
  %137 = cast(%136, dtype="float64") /* ty=Tensor[(14, 14, 9), float64] */;
  asinh(%137) /* ty=Tensor[(14, 14, 9), float64] */
}

def @func_4592() -> Tensor[(14, 14, 9), float32] {
  %138 = @func_2201() /* ty=(Tensor[(14, 14, 9), float32],) */;
  %138.0
}

def @func_6550() -> Tensor[(14, 14, 9), bool] {
  %139 = @func_5298() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(5, 104), float64], Tensor[(14, 14, 9), bool]) */;
  %139.2
}

def @func_7554() -> (Tensor[(14, 14, 9), float64],) {
  %140 = @func_2475() /* ty=Tensor[(14, 14, 9), float64] */;
  (%140,)
}

def @func_9884() -> Tensor[(14, 14, 9), float64] {
  %141 = @func_5043() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */;
  %141.0
}

def @func_5647(%var_5628: Tensor[(14, 14, 9), float64]) -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), int8], Tensor[(6, 10, ?), uint8], Tensor[(2160), float32]) {
  %142 = @func_1605() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %143 = @func_2415() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %144 = %143.0;
  %145 = cast(%var_5628, dtype="int8") /* ty=Tensor[(14, 14, 9), int8] */;
  %146 = shape_of(%144, dtype="int32") /* ty=Tensor[(3), int32] */;
  %147 = cast(%144, dtype="int8") /* ty=Tensor[(14, 14, 9), int8] */;
  %148 = dyn.reshape(%145, %146, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %149 = cast(meta[relay.Constant][5] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %150 = reshape(%149, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
  %151 = @func_1640(%150) /* ty=(Tensor[(14, 14, 9), float64], Tensor[(6, 10, ?), uint8], Tensor[(60), float32], Tensor[(15, 12, 12), float32], Tensor[(2160), float32], Tensor[(14, 14, 9), float64]) */;
  %152 = %142.0;
  %153 = minimum(%147, %148) /* ty=Tensor[(14, 14, 9), int8] */;
  %154 = %151.1;
  (%152, %153, %154, meta[relay.Constant][5] /* ty=Tensor[(2160), float32] */)
}

def @func_6209(%var_6193: Tensor[(60), float32]) -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(60), float32], Tensor[(6, 10, 520), int8]) {
  %155 = @func_5075() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %156 = @func_5307() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %157 = cast(%var_6193, dtype="float32") /* ty=Tensor[(60), float32] */;
  %158 = reshape(%157, newshape=[6, 10, 1]) /* ty=Tensor[(6, 10, 1), float32] */;
  %159 = @func_46(%158) /* ty=(Tensor[(6, 10, ?), uint8],) */;
  %160 = %159.0;
  %161 = @func_2365() /* ty=Tensor[(520), float64] */;
  %162 = cast(%160, dtype="int8") /* ty=Tensor[(6, 10, ?), int8] */;
  %163 = cast(%161, dtype="int8") /* ty=Tensor[(520), int8] */;
  %164 = %155.0;
  %165 = %156.0;
  %166 = left_shift(%162, %163) /* ty=Tensor[(6, 10, 520), int8] */;
  (%164, %165, %var_6193, %166)
}

def @func_2404() -> (Tensor[(14, 14, 9), bool], Tensor[(520), float64]) {
  %167 = @func_1908() /* ty=(Tensor[(14, 14, 9), float32], Tensor[(14, 14, 9), float64]) */;
  %168 = %167.0;
  %169 = cast(meta[relay.Constant][6] /* ty=Tensor[(14, 14, 9), float32] */, dtype="bool") /* ty=Tensor[(14, 14, 9), bool] */;
  %170 = shape_of(%168, dtype="int32") /* ty=Tensor[(3), int32] */;
  %171 = cast(%168, dtype="bool") /* ty=Tensor[(14, 14, 9), bool] */;
  %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %173 = equal(%171, %172) /* ty=Tensor[(14, 14, 9), bool] */;
  %174 = @func_2365() /* ty=Tensor[(520), float64] */;
  (%173, %174)
}

def @func_3379() -> Tensor[(14, 14, 9), bool] {
  %175 = @func_3071() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), bool]) */;
  %175.1
}

def @func_3071() -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), bool]) {
  %176 = @func_2722() /* ty=Tensor[(14, 14, 9), float64] */;
  %177 = cast(%176, dtype="float32") /* ty=Tensor[(14, 14, 9), float32] */;
  %178 = reshape(%177, newshape=[14, 14, 9]) /* ty=Tensor[(14, 14, 9), float32] */;
  %179 = @func_2535(%178) /* ty=Tensor[(14, 14, 9), bool] */;
  (%176, %179)
}

def @func_6301() -> (Tensor[(14, 14, 9), float64],) {
  %180 = @func_5331() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */;
  %181 = %180.0;
  (%181,)
}

def @func_5784(%var_5702: Tensor[(6, 10, 5), float64], %var_5731: Tensor[(6, 10, 5), float64]) -> (Tensor[(6, 10, 5), float64], Tensor[(6, 10, 5), float64], Tensor[(14, 14, 9), float32], Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) {
  %182 = cast(%var_5702, dtype="float64") /* ty=Tensor[(6, 10, 5), float64] */;
  %183 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(6, 10, 5), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %184 = cast(meta[relay.Constant][7] /* ty=Tensor[(6, 10, 5), float64] */, dtype="float64") /* ty=Tensor[(6, 10, 5), float64] */;
  %185 = dyn.reshape(%182, %183, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %186 = cast(%var_5731, dtype="float64") /* ty=Tensor[(6, 10, 5), float64] */;
  %187 = shape_of(%var_5702, dtype="int32") /* ty=Tensor[(3), int32] */;
  %188 = cast(%var_5702, dtype="float64") /* ty=Tensor[(6, 10, 5), float64] */;
  %189 = dyn.reshape(%186, %187, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %190 = @func_1605() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %191 = %190.0;
  %192 = cast(%191, dtype="float64") /* ty=Tensor[(14, 14, 9), float64] */;
  %193 = @func_1734() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */;
  %194 = divide(%184, %185) /* ty=Tensor[(6, 10, 5), float64] */;
  %195 = floor_divide(%188, %189) /* ty=Tensor[(6, 10, 5), float64] */;
  %196 = @func_4592() /* ty=Tensor[(14, 14, 9), float32] */;
  %197 = exp(%192) /* ty=Tensor[(14, 14, 9), float64] */;
  %198 = %193.1;
  (%194, %195, %196, %197, %198)
}

def @func_6589() -> (Tensor[(14, 14, 9), float64],) {
  %199 = @func_4894() /* ty=Tensor[(14, 14, 9), float64] */;
  (%199,)
}

def @func_10335(%var_10312: Tensor[(4, 2), uint32], %var_10313: Tensor[(12, 4), uint32], %var_10315: Tensor[(15, 12, 12), float32]) -> (Tensor[(14, 14, 9), float64], Tensor[(60), float32], Tensor[(4, 2), uint32], Tensor[(12, 4), uint32], Tensor[(15, 12, 12), bool], Tensor[(6, 10, ?), bool]) {
  %200 = @func_1734() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */;
  %201 = cast(%var_10312, dtype="uint32") /* ty=Tensor[(4, 2), uint32] */;
  %202 = cast(%var_10313, dtype="uint32") /* ty=Tensor[(12, 4), uint32] */;
  %203 = reshape(%201, newshape=[4, 2, 1]) /* ty=Tensor[(4, 2, 1), uint32] */;
  %204 = reshape(%202, newshape=[4, 2, 6]) /* ty=Tensor[(4, 2, 6), uint32] */;
  %205 = @func_1293(%203, %204) /* ty=(Tensor[(4, 2, 6), uint32], Tensor[(6, 10, ?), uint8], Tensor[(60), float32], Tensor[(15, 12, 12), float32], Tensor[(2160), float32]) */;
  %206 = %205.3;
  %207 = cast(%var_10315, dtype="bool") /* ty=Tensor[(15, 12, 12), bool] */;
  %208 = shape_of(%206, dtype="int32") /* ty=Tensor[(3), int32] */;
  %209 = cast(%206, dtype="bool") /* ty=Tensor[(15, 12, 12), bool] */;
  %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %211 = cast(meta[relay.Constant][8] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %212 = reshape(%211, newshape=[6, 10, 1]) /* ty=Tensor[(6, 10, 1), float32] */;
  %213 = @func_46(%212) /* ty=(Tensor[(6, 10, ?), uint8],) */;
  %214 = %213.0;
  %215 = cast(%214, dtype="float64") /* ty=Tensor[(6, 10, ?), float64] */;
  %216 = asin(%215) /* ty=Tensor[(6, 10, ?), float64] */;
  %217 = cast(%214, dtype="bool") /* ty=Tensor[(6, 10, ?), bool] */;
  %218 = shape_of(%216, dtype="int32") /* ty=Tensor[(3), int32] */;
  %219 = cast(%216, dtype="bool") /* ty=Tensor[(6, 10, ?), bool] */;
  %220 = dyn.reshape(%217, %218, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %221 = %200.0;
  %222 = greater_equal(%209, %210) /* ty=Tensor[(15, 12, 12), bool] */;
  %223 = not_equal(%219, %220) /* ty=Tensor[(6, 10, ?), bool] */;
  (%221, meta[relay.Constant][8] /* ty=Tensor[(60), float32] */, %var_10312, %var_10313, %222, %223)
}

def @func_4953() -> (Tensor[(14, 14, 9), float64],) {
  %224 = @func_2722() /* ty=Tensor[(14, 14, 9), float64] */;
  (%224,)
}

def @func_6678(%var_6647: Tensor[(520), float64], %var_6650: Tensor[(2160), float32], %var_6671: Tensor[(30), float64]) -> (Tensor[(14, 14, 9), float64], Tensor[(4, 16, 8), float64], Tensor[(512), float64], Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(60), float32], Tensor[(520), float64], Tensor[(360, 6), int8], Tensor[(2160), float32], Tensor[(6, 5, 1), float64], Tensor[(30), float64]) {
  %225 = @func_1673() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %226 = %225.0;
  %227 = cast(%226, dtype="float64") /* ty=Tensor[(14, 14, 9), float64] */;
  %228 = cast(meta[relay.Constant][9] /* ty=Tensor[(512), float64] */, dtype="float64") /* ty=Tensor[(512), float64] */;
  %229 = reshape(%228, newshape=[4, 16, 8]) /* ty=Tensor[(4, 16, 8), float64] */;
  %230 = @func_6228(%229) /* ty=(Tensor[(4, 16, 8), float64],) */;
  %231 = @func_3621() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %232 = @func_2917() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %233 = cast(%var_6647, dtype="float64") /* ty=Tensor[(520), float64] */;
  %234 = reshape(%233, newshape=[520]) /* ty=Tensor[(520), float64] */;
  %235 = @func_3042(%234) /* ty=(Tensor[(14, 14, 9), float64], Tensor[(13, 5, 8), float64], Tensor[(520), float32], Tensor[(6, 10, ?), uint8], Tensor[(60), float32], Tensor[(14, 14, 9), float32], Tensor[(14, 14, 9), float64]) */;
  %236 = cast(%var_6650, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %237 = reshape(%236, newshape=[360, 6]) /* ty=Tensor[(360, 6), float32] */;
  %238 = @func_4838(%237) /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(360, 6), int8]) */;
  %239 = cast(%var_6671, dtype="float64") /* ty=Tensor[(30), float64] */;
  %240 = reshape(%239, newshape=[6, 5, 1]) /* ty=Tensor[(6, 5, 1), float64] */;
  %241 = tan(%227) /* ty=Tensor[(14, 14, 9), float64] */;
  %242 = %230.0;
  %243 = %231.0;
  %244 = %232.0;
  %245 = %235.4;
  %246 = %238.2;
  %247 = @func_4773(%240) /* ty=Tensor[(6, 5, 1), float64] */;
  (%241, %242, meta[relay.Constant][9] /* ty=Tensor[(512), float64] */, %243, %244, %245, %var_6647, %246, %var_6650, %247, %var_6671)
}

def @func_9960() -> (Tensor[(520), float64],) {
  %248 = @func_8554() /* ty=Tensor[(520), float64] */;
  (%248,)
}

def @func_1908() -> (Tensor[(14, 14, 9), float32], Tensor[(14, 14, 9), float64]) {
  %249 = @func_1811() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %250 = %249.0;
  %251 = cast(%250, dtype="float32") /* ty=Tensor[(14, 14, 9), float32] */;
  %252 = @func_1734() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */;
  %253 = acosh(%251) /* ty=Tensor[(14, 14, 9), float32] */;
  %254 = %252.1;
  (%253, %254)
}

def @func_6228(%var_6224: Tensor[(4, 16, 8), float64]) -> (Tensor[(4, 16, 8), float64],) {
  %255 = cast(%var_6224, dtype="float64") /* ty=Tensor[(4, 16, 8), float64] */;
  %256 = sinh(%255) /* ty=Tensor[(4, 16, 8), float64] */;
  (%256,)
}

def @func_1845(%var_1843: Tensor[(5, 104), float64]) -> (Tensor[(14, 14, 9), float32], Tensor[(13, 5, 8), float64], Tensor[(5, 104), float64]) {
  %257 = @func_1673() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %258 = %257.0;
  %259 = cast(%258, dtype="float32") /* ty=Tensor[(14, 14, 9), float32] */;
  %260 = cast(%var_1843, dtype="float64") /* ty=Tensor[(5, 104), float64] */;
  %261 = reshape(%260, newshape=[13, 5, 8]) /* ty=Tensor[(13, 5, 8), float64] */;
  %262 = @func_1769(%261) /* ty=(Tensor[(13, 5, 8), float64],) */;
  %263 = log10(%259) /* ty=Tensor[(14, 14, 9), float32] */;
  %264 = %262.0;
  (%263, %264, %var_1843)
}

def @func_4622() -> (Tensor[(16, 2, 5), float64],) {
  %265 = cast(meta[relay.Constant][10] /* ty=Tensor[(16, 2, 5), float64] */, dtype="float64") /* ty=Tensor[(16, 2, 5), float64] */;
  %266 = tan(%265) /* ty=Tensor[(16, 2, 5), float64] */;
  (%266,)
}

def @func_5507(%var_5476: Tensor[(135), float64]) -> (Tensor[(14, 14, 9), float64], Tensor[(3, 15, 3), float64], Tensor[(135), float64], Tensor[(14, 14, 9), float32], Tensor[(520), float64]) {
  %267 = @func_1997() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %268 = cast(%var_5476, dtype="float64") /* ty=Tensor[(135), float64] */;
  %269 = reshape(%268, newshape=[3, 15, 3]) /* ty=Tensor[(3, 15, 3), float64] */;
  %270 = @func_2201() /* ty=(Tensor[(14, 14, 9), float32],) */;
  %271 = @func_2775() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(13, 5, 8), float64], Tensor[(520), float64]) */;
  %272 = %267.0;
  %273 = @func_2503(%269) /* ty=Tensor[(3, 15, 3), float64] */;
  %274 = %270.0;
  %275 = %271.2;
  (%272, %273, %var_5476, %274, %275)
}

def @func_8012(%var_8008: Tensor[(8), uint32]) -> (Tensor[(520), float64], Tensor[(4, 2, 6), uint32], Tensor[(8), uint32], Tensor[(48), uint32]) {
  %276 = cast(%var_8008, dtype="uint32") /* ty=Tensor[(8), uint32] */;
  %277 = cast(meta[relay.Constant][11] /* ty=Tensor[(48), uint32] */, dtype="uint32") /* ty=Tensor[(48), uint32] */;
  %278 = reshape(%276, newshape=[4, 2, 1]) /* ty=Tensor[(4, 2, 1), uint32] */;
  %279 = reshape(%277, newshape=[4, 2, 6]) /* ty=Tensor[(4, 2, 6), uint32] */;
  %280 = @func_1293(%278, %279) /* ty=(Tensor[(4, 2, 6), uint32], Tensor[(6, 10, ?), uint8], Tensor[(60), float32], Tensor[(15, 12, 12), float32], Tensor[(2160), float32]) */;
  %281 = @func_7502() /* ty=Tensor[(520), float64] */;
  %282 = %280.0;
  (%281, %282, %var_8008, meta[relay.Constant][11] /* ty=Tensor[(48), uint32] */)
}

def @func_5189() -> Tensor[(520), float64] {
  %283 = @func_5099() /* ty=(Tensor[(520), float64],) */;
  %283.0
}

def @func_6439(%var_6434: uint64, %var_6435: Tensor[(1, 10, 8), uint64]) -> (Tensor[(1, 10, 8), uint64],) {
  %284 = cast(%var_6434, dtype="uint64") /* ty=uint64 */;
  %285 = cast(%var_6435, dtype="uint64") /* ty=Tensor[(1, 10, 8), uint64] */;
  %286 = add(%284, %285) /* ty=Tensor[(1, 10, 8), uint64] */;
  (%286,)
}

def @func_7860() -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(30, 2), float64], Tensor[(14, 14, 9), float64]) {
  %287 = @func_1673() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %288 = @func_5067() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %289 = @func_7534() /* ty=(Tensor[(30, 2), float64],) */;
  %290 = %289.0;
  %291 = cast(%290, dtype="float64") /* ty=Tensor[(30, 2), float64] */;
  %292 = %288.0;
  %293 = cast(%292, dtype="float64") /* ty=Tensor[(14, 14, 9), float64] */;
  %294 = reshape(%293, newshape=[14, 14, 9]) /* ty=Tensor[(14, 14, 9), float64] */;
  %295 = %287.0;
  %296 = acos(%291) /* ty=Tensor[(30, 2), float64] */;
  %297 = @func_2231(%294) /* ty=Tensor[(14, 14, 9), float64] */;
  (%295, %292, %296, %297)
}

def @func_5661() -> (Tensor[(520), float64],) {
  %298 = @func_2626() /* ty=Tensor[(520), float64] */;
  (%298,)
}

def @func_7450(%var_7444: Tensor[(60), float32]) -> (Tensor[(520), float64], Tensor[(6, 10, 520), int8], Tensor[(60), float32]) {
  %299 = cast(%var_7444, dtype="float32") /* ty=Tensor[(60), float32] */;
  %300 = reshape(%299, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %301 = @func_6209(%300) /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(60), float32], Tensor[(6, 10, 520), int8]) */;
  %302 = @func_2296() /* ty=Tensor[(520), float64] */;
  %303 = %301.3;
  (%302, %303, %var_7444)
}

def @func_2365() -> Tensor[(520), float64] {
  %304 = @func_2151() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(72), bool], Tensor[(36), bool], Tensor[(14, 14, 9), float64], Tensor[(2160), float32], Tensor[(5, 104), float64], Tensor[(520), float64]) */;
  %304.6
}

def @func_8673() -> Tensor[(14, 14, 9), float64] {
  %305 = @func_8284() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %305.0
}

def @func_9079() -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) {
  %306 = @func_5331() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */;
  %307 = @func_7104() /* ty=Tensor[(14, 14, 9), float64] */;
  %308 = %306.0;
  (%307, %308)
}

def @func_10504(%var_10497: Tensor[(14, 14, 9), float64]) -> (Tensor[(36), bool], Tensor[(14, 14, 9), bool], Tensor[(300), float64], Tensor[(14, 14, 9), bool]) {
  %309 = @func_3418() /* ty=(Tensor[(36), bool],) */;
  %310 = cast(meta[relay.Constant][12] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %311 = cast(meta[relay.Constant][12] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %312 = reshape(%310, newshape=[6, 10, 5]) /* ty=Tensor[(6, 10, 5), float64] */;
  %313 = reshape(%311, newshape=[6, 10, 5]) /* ty=Tensor[(6, 10, 5), float64] */;
  %314 = @func_5784(%312, %313) /* ty=(Tensor[(6, 10, 5), float64], Tensor[(6, 10, 5), float64], Tensor[(14, 14, 9), float32], Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */;
  %315 = %314.3;
  %316 = cast(%var_10497, dtype="bool") /* ty=Tensor[(14, 14, 9), bool] */;
  %317 = shape_of(%315, dtype="int32") /* ty=Tensor[(3), int32] */;
  %318 = cast(%315, dtype="bool") /* ty=Tensor[(14, 14, 9), bool] */;
  %319 = dyn.reshape(%316, %317, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %320 = %309.0;
  %321 = @func_3379() /* ty=Tensor[(14, 14, 9), bool] */;
  %322 = greater_equal(%318, %319) /* ty=Tensor[(14, 14, 9), bool] */;
  (%320, %321, meta[relay.Constant][12] /* ty=Tensor[(300), float64] */, %322)
}

def @func_2968(%var_2960: Tensor[(2, 6, 2), float64]) -> Tensor[(2, 6, 2), float64] {
  %323 = cast(%var_2960, dtype="float64") /* ty=Tensor[(2, 6, 2), float64] */;
  sigmoid(%323) /* ty=Tensor[(2, 6, 2), float64] */
}

def @func_10796() -> (Tensor[(14, 14, 9), bool], Tensor[(14, 14, 9), float64]) {
  %324 = @func_8567() /* ty=Tensor[(14, 14, 9), bool] */;
  %325 = @func_10380() /* ty=Tensor[(14, 14, 9), float64] */;
  (%324, %325)
}

def @func_2151() -> (Tensor[(14, 14, 9), float64], Tensor[(72), bool], Tensor[(36), bool], Tensor[(14, 14, 9), float64], Tensor[(2160), float32], Tensor[(5, 104), float64], Tensor[(520), float64]) {
  %326 = @func_1605() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %327 = cast(meta[relay.Constant][13] /* ty=Tensor[(36), bool] */, dtype="bool") /* ty=Tensor[(36), bool] */;
  %328 = reshape(%327, newshape=[36]) /* ty=Tensor[(36), bool] */;
  %329 = @func_1802(%328) /* ty=(Tensor[(14, 14, 9), float64], Tensor[(2, 12, 3), bool], Tensor[(36), bool], Tensor[(72), bool], Tensor[(30, 2), float32]) */;
  %330 = cast(meta[relay.Constant][14] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %331 = reshape(%330, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
  %332 = @func_1640(%331) /* ty=(Tensor[(14, 14, 9), float64], Tensor[(6, 10, ?), uint8], Tensor[(60), float32], Tensor[(15, 12, 12), float32], Tensor[(2160), float32], Tensor[(14, 14, 9), float64]) */;
  %333 = cast(meta[relay.Constant][15] /* ty=Tensor[(520), float64] */, dtype="float64") /* ty=Tensor[(520), float64] */;
  %334 = reshape(%333, newshape=[5, 104]) /* ty=Tensor[(5, 104), float64] */;
  %335 = @func_1845(%334) /* ty=(Tensor[(14, 14, 9), float32], Tensor[(13, 5, 8), float64], Tensor[(5, 104), float64]) */;
  %336 = %326.0;
  %337 = %329.3;
  %338 = %332.0;
  %339 = %335.2;
  (%336, %337, meta[relay.Constant][13] /* ty=Tensor[(36), bool] */, %338, meta[relay.Constant][14] /* ty=Tensor[(2160), float32] */, %339, meta[relay.Constant][15] /* ty=Tensor[(520), float64] */)
}

def @func_3906() -> (Tensor[(14, 14, 9), float64], Tensor[(36), bool], Tensor[(36), bool], Tensor[(14, 14, 9), bool], Tensor[(14, 14, 9), float64], Tensor[(2160), float64]) {
  %340 = @func_3607() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %341 = cast(meta[relay.Constant][16] /* ty=Tensor[(36), bool] */, dtype="bool") /* ty=Tensor[(36), bool] */;
  %342 = reshape(%341, newshape=[36]) /* ty=Tensor[(36), bool] */;
  %343 = @func_1802(%342) /* ty=(Tensor[(14, 14, 9), float64], Tensor[(2, 12, 3), bool], Tensor[(36), bool], Tensor[(72), bool], Tensor[(30, 2), float32]) */;
  %344 = cast(meta[relay.Constant][17] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %345 = reshape(%344, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
  %346 = @func_1640(%345) /* ty=(Tensor[(14, 14, 9), float64], Tensor[(6, 10, ?), uint8], Tensor[(60), float32], Tensor[(15, 12, 12), float32], Tensor[(2160), float32], Tensor[(14, 14, 9), float64]) */;
  %347 = cast(meta[relay.Constant][17] /* ty=Tensor[(2160), float32] */, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %348 = %340.0;
  %349 = %343.2;
  %350 = @func_3379() /* ty=Tensor[(14, 14, 9), bool] */;
  %351 = %346.5;
  %352 = cos(%347) /* ty=Tensor[(2160), float64] */;
  (%348, %349, meta[relay.Constant][16] /* ty=Tensor[(36), bool] */, %350, %351, %352)
}

def @func_436(%var_419: Tensor[(8, 2, 5), bool], %var_420: Tensor[(8, 2, 5), bool], %var_434: Tensor[(15, 4), float32]) -> (Tensor[(8, 2, 5), bool], Tensor[(6, 10, ?), uint8], Tensor[(15, 4), float32]) {
  %353 = cast(%var_420, dtype="bool") /* ty=Tensor[(8, 2, 5), bool] */;
  %354 = shape_of(%var_419, dtype="int32") /* ty=Tensor[(3), int32] */;
  %355 = cast(%var_419, dtype="bool") /* ty=Tensor[(8, 2, 5), bool] */;
  %356 = dyn.reshape(%353, %354, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %357 = cast(%var_434, dtype="float32") /* ty=Tensor[(15, 4), float32] */;
  %358 = reshape(%357, newshape=[6, 10, 1]) /* ty=Tensor[(6, 10, 1), float32] */;
  %359 = @func_46(%358) /* ty=(Tensor[(6, 10, ?), uint8],) */;
  %360 = logical_or(%355, %356) /* ty=Tensor[(8, 2, 5), bool] */;
  %361 = %359.0;
  (%360, %361, %var_434)
}

def @func_9356(%var_9331: Tensor[(9, 11, 11), float64], %var_9341: Tensor[(8), uint32], %var_9342: Tensor[(48), uint32], %var_9346: Tensor[(36), bool]) -> (Tensor[(9, 11, 11), float64], Tensor[(15, 12, 12), float32], Tensor[(8), uint32], Tensor[(48), uint32], Tensor[(72), bool], Tensor[(36), bool]) {
  %362 = cast(%var_9331, dtype="float64") /* ty=Tensor[(9, 11, 11), float64] */;
  %363 = cast(%var_9341, dtype="uint32") /* ty=Tensor[(8), uint32] */;
  %364 = cast(%var_9342, dtype="uint32") /* ty=Tensor[(48), uint32] */;
  %365 = reshape(%363, newshape=[4, 2, 1]) /* ty=Tensor[(4, 2, 1), uint32] */;
  %366 = reshape(%364, newshape=[4, 2, 6]) /* ty=Tensor[(4, 2, 6), uint32] */;
  %367 = @func_1293(%365, %366) /* ty=(Tensor[(4, 2, 6), uint32], Tensor[(6, 10, ?), uint8], Tensor[(60), float32], Tensor[(15, 12, 12), float32], Tensor[(2160), float32]) */;
  %368 = cast(%var_9346, dtype="bool") /* ty=Tensor[(36), bool] */;
  %369 = reshape(%368, newshape=[36]) /* ty=Tensor[(36), bool] */;
  %370 = @func_1802(%369) /* ty=(Tensor[(14, 14, 9), float64], Tensor[(2, 12, 3), bool], Tensor[(36), bool], Tensor[(72), bool], Tensor[(30, 2), float32]) */;
  %371 = exp(%362) /* ty=Tensor[(9, 11, 11), float64] */;
  %372 = %367.3;
  %373 = %370.3;
  (%371, %372, %var_9341, %var_9342, %373, %var_9346)
}

def @func_5043() -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) {
  %374 = @func_4205() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */;
  %375 = @func_4168() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %376 = %374.0;
  %377 = %375.0;
  (%376, %377)
}

def @func_7502() -> Tensor[(520), float64] {
  %378 = @func_2151() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(72), bool], Tensor[(36), bool], Tensor[(14, 14, 9), float64], Tensor[(2160), float32], Tensor[(5, 104), float64], Tensor[(520), float64]) */;
  %378.6
}

def @func_9925() -> (Tensor[(14, 14, 9), float64],) {
  %379 = @func_2775() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(13, 5, 8), float64], Tensor[(520), float64]) */;
  %380 = %379.0;
  (%380,)
}

def @func_5170() -> (Tensor[(5, 104), uint64],) {
  %381 = @func_4784() /* ty=(Tensor[(5, 104), float64],) */;
  %382 = %381.0;
  %383 = cast(meta[relay.Constant][18] /* ty=Tensor[(5, 104), float64] */, dtype="uint64") /* ty=Tensor[(5, 104), uint64] */;
  %384 = shape_of(%382, dtype="int32") /* ty=Tensor[(2), int32] */;
  %385 = cast(%382, dtype="uint64") /* ty=Tensor[(5, 104), uint64] */;
  %386 = dyn.reshape(%383, %384, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %387 = right_shift(%385, %386) /* ty=Tensor[(5, 104), uint64] */;
  (%387,)
}

def @func_9401() -> (Tensor[(36), bool], Tensor[(36), bool], Tensor[(14, 14, 9), float64]) {
  %388 = @func_2904() /* ty=(Tensor[(36), bool],) */;
  %389 = %388.0;
  %390 = cast(%389, dtype="bool") /* ty=Tensor[(36), bool] */;
  %391 = reshape(%390, newshape=[36]) /* ty=Tensor[(36), bool] */;
  %392 = @func_1802(%391) /* ty=(Tensor[(14, 14, 9), float64], Tensor[(2, 12, 3), bool], Tensor[(36), bool], Tensor[(72), bool], Tensor[(30, 2), float32]) */;
  %393 = %392.2;
  %394 = @func_8688() /* ty=Tensor[(14, 14, 9), float64] */;
  (%389, %393, %394)
}

def @func_1640(%var_1623: Tensor[(2160), float32]) -> (Tensor[(14, 14, 9), float64], Tensor[(6, 10, ?), uint8], Tensor[(60), float32], Tensor[(15, 12, 12), float32], Tensor[(2160), float32], Tensor[(14, 14, 9), float64]) {
  %395 = @func_1605() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %396 = cast(meta[relay.Constant][19] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %397 = reshape(%396, newshape=[6, 10, 1]) /* ty=Tensor[(6, 10, 1), float32] */;
  %398 = @func_46(%397) /* ty=(Tensor[(6, 10, ?), uint8],) */;
  %399 = cast(%var_1623, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %400 = cast(%var_1623, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %401 = reshape(%399, newshape=[15, 12, 12]) /* ty=Tensor[(15, 12, 12), float32] */;
  %402 = reshape(%400, newshape=[15, 12, 12]) /* ty=Tensor[(15, 12, 12), float32] */;
  %403 = @func_1605() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %404 = %395.0;
  %405 = %398.0;
  %406 = @func_1090(%401, %402) /* ty=Tensor[(15, 12, 12), float32] */;
  %407 = %403.0;
  (%404, %405, meta[relay.Constant][19] /* ty=Tensor[(60), float32] */, %406, %var_1623, %407)
}

def @func_5689() -> Tensor[(14, 14, 9), float64] {
  %408 = @func_5307() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %408.0
}

def @func_3780() -> (Tensor[(14, 14, 9), float64],) {
  %409 = @func_3071() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), bool]) */;
  %410 = %409.0;
  (%410,)
}

def @func_6333() -> (Tensor[(14, 14, 9), float64],) {
  %411 = @func_6086() /* ty=Tensor[(14, 14, 9), float64] */;
  (%411,)
}

def @func_8434(%var_8404: Tensor[(16, 4, 5), float32]) -> (Tensor[(16, 4, 5), int16],) {
  %412 = cast(%var_8404, dtype="float32") /* ty=Tensor[(16, 4, 5), float32] */;
  %413 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(16, 4, 5), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %414 = cast(meta[relay.Constant][20] /* ty=Tensor[(16, 4, 5), float32] */, dtype="float32") /* ty=Tensor[(16, 4, 5), float32] */;
  %415 = dyn.reshape(%412, %413, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %416 = mod(%414, %415) /* ty=Tensor[(16, 4, 5), float32] */;
  %417 = cast(meta[relay.Constant][20] /* ty=Tensor[(16, 4, 5), float32] */, dtype="int16") /* ty=Tensor[(16, 4, 5), int16] */;
  %418 = shape_of(%416, dtype="int32") /* ty=Tensor[(3), int32] */;
  %419 = cast(%416, dtype="int16") /* ty=Tensor[(16, 4, 5), int16] */;
  %420 = dyn.reshape(%417, %418, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %421 = minimum(%419, %420) /* ty=Tensor[(16, 4, 5), int16] */;
  (%421,)
}

def @func_7104() -> Tensor[(14, 14, 9), float64] {
  @func_6060() /* ty=Tensor[(14, 14, 9), float64] */
}

def @func_4140(%var_4095: Tensor[(8, 15, 1), bool]) -> (Tensor[(8, 15, 14), bool], Tensor[(14, 14, 9), float32], Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) {
  %422 = cast(%var_4095, dtype="bool") /* ty=Tensor[(8, 15, 1), bool] */;
  %423 = cast(meta[relay.Constant][21] /* ty=Tensor[(8, 15, 14), bool] */, dtype="bool") /* ty=Tensor[(8, 15, 14), bool] */;
  %424 = @func_2201() /* ty=(Tensor[(14, 14, 9), float32],) */;
  %425 = @func_1952() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %426 = %425.0;
  %427 = cast(%426, dtype="float64") /* ty=Tensor[(14, 14, 9), float64] */;
  %428 = logical_or(%422, %423) /* ty=Tensor[(8, 15, 14), bool] */;
  %429 = %424.0;
  %430 = sin(%427) /* ty=Tensor[(14, 14, 9), float64] */;
  %431 = @func_3288() /* ty=Tensor[(14, 14, 9), float64] */;
  (%428, %429, %430, %431)
}

def @func_7254() -> (Tensor[(520), float64],) {
  %432 = @func_2296() /* ty=Tensor[(520), float64] */;
  (%432,)
}

def @func_8458(%var_8447: Tensor[(2160), float32]) -> (Tensor[(14, 14, 9), bool], Tensor[(5, 104), uint64], Tensor[(14, 14, 9), float64], Tensor[(2160), float32]) {
  %433 = cast(%var_8447, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %434 = reshape(%433, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
  %435 = @func_1640(%434) /* ty=(Tensor[(14, 14, 9), float64], Tensor[(6, 10, ?), uint8], Tensor[(60), float32], Tensor[(15, 12, 12), float32], Tensor[(2160), float32], Tensor[(14, 14, 9), float64]) */;
  %436 = @func_6550() /* ty=Tensor[(14, 14, 9), bool] */;
  %437 = @func_6220() /* ty=Tensor[(5, 104), uint64] */;
  %438 = %435.5;
  (%436, %437, %438, %var_8447)
}

def @func_1734() -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) {
  %439 = @func_1605() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %440 = @func_1605() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %441 = %439.0;
  %442 = %440.0;
  (%441, %442)
}

def @func_2231(%var_2220: Tensor[(14, 14, 9), float64]) -> Tensor[(14, 14, 9), float64] {
  %443 = @func_1908() /* ty=(Tensor[(14, 14, 9), float32], Tensor[(14, 14, 9), float64]) */;
  %444 = %443.1;
  %445 = cast(%var_2220, dtype="float64") /* ty=Tensor[(14, 14, 9), float64] */;
  %446 = shape_of(%444, dtype="int32") /* ty=Tensor[(3), int32] */;
  %447 = cast(%444, dtype="float64") /* ty=Tensor[(14, 14, 9), float64] */;
  %448 = dyn.reshape(%445, %446, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%447, %448) /* ty=Tensor[(14, 14, 9), float64] */
}

def @func_8284() -> (Tensor[(14, 14, 9), float64],) {
  %449 = @func_7045() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %450 = %449.0;
  (%450,)
}

def @func_8108() -> Tensor[(14, 14, 9), float64] {
  %451 = @func_5331() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */;
  %451.0
}

def @func_8567() -> Tensor[(14, 14, 9), bool] {
  @func_6569() /* ty=Tensor[(14, 14, 9), bool] */
}

def @func_8867() -> (Tensor[(14, 14, 9), float64],) {
  %452 = @func_4168() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %453 = %452.0;
  (%453,)
}

def @func_2626() -> Tensor[(520), float64] {
  @func_2296() /* ty=Tensor[(520), float64] */
}

def @func_4347() -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) {
  %454 = @func_1605() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %455 = @func_2917() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %456 = %454.0;
  %457 = %455.0;
  (%456, %457)
}

def @func_3986(%var_3954: Tensor[(36), bool], %var_3955: Tensor[(72), bool], %var_3956: Tensor[(60), float32], %var_3970: Tensor[(14, 14, 9), bool]) -> (Tensor[(6, 10, ?), uint8], Tensor[(36), bool], Tensor[(72), bool], Tensor[(60), float32], Tensor[(14, 14, 9), float32], Tensor[(14, 14, 9), float32], Tensor[(14, 14, 9), float64]) {
  %458 = cast(%var_3954, dtype="bool") /* ty=Tensor[(36), bool] */;
  %459 = cast(%var_3955, dtype="bool") /* ty=Tensor[(72), bool] */;
  %460 = cast(%var_3956, dtype="float32") /* ty=Tensor[(60), float32] */;
  %461 = reshape(%458, newshape=[1, 12, 3]) /* ty=Tensor[(1, 12, 3), bool] */;
  %462 = reshape(%459, newshape=[2, 12, 3]) /* ty=Tensor[(2, 12, 3), bool] */;
  %463 = reshape(%460, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %464 = @func_642(%461, %462, %463) /* ty=(Tensor[(2, 12, 3), bool], Tensor[(6, 10, ?), uint8], Tensor[(80), bool], Tensor[(60), float32]) */;
  %465 = @func_1811() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %466 = %465.0;
  %467 = @func_3379() /* ty=Tensor[(14, 14, 9), bool] */;
  %468 = cast(%467, dtype="float32") /* ty=Tensor[(14, 14, 9), float32] */;
  %469 = shape_of(%466, dtype="int32") /* ty=Tensor[(3), int32] */;
  %470 = cast(%466, dtype="float32") /* ty=Tensor[(14, 14, 9), float32] */;
  %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %472 = cast(%var_3970, dtype="float32") /* ty=Tensor[(14, 14, 9), float32] */;
  %473 = shape_of(%467, dtype="int32") /* ty=Tensor[(3), int32] */;
  %474 = cast(%467, dtype="float32") /* ty=Tensor[(14, 14, 9), float32] */;
  %475 = dyn.reshape(%472, %473, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %476 = %464.1;
  %477 = power(%470, %471) /* ty=Tensor[(14, 14, 9), float32] */;
  %478 = floor_mod(%474, %475) /* ty=Tensor[(14, 14, 9), float32] */;
  %479 = @func_2722() /* ty=Tensor[(14, 14, 9), float64] */;
  (%476, %var_3954, %var_3955, %var_3956, %477, %478, %479)
}

def @func_9560() -> (Tensor[(13, 5, 8), float64], Tensor[(36), bool]) {
  %480 = @func_2775() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(13, 5, 8), float64], Tensor[(520), float64]) */;
  %481 = @func_9401() /* ty=(Tensor[(36), bool], Tensor[(36), bool], Tensor[(14, 14, 9), float64]) */;
  %482 = %480.1;
  %483 = %481.1;
  (%482, %483)
}

def @func_2296() -> Tensor[(520), float64] {
  %484 = @func_2151() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(72), bool], Tensor[(36), bool], Tensor[(14, 14, 9), float64], Tensor[(2160), float32], Tensor[(5, 104), float64], Tensor[(520), float64]) */;
  %484.6
}

def @func_8688() -> Tensor[(14, 14, 9), float64] {
  @func_6086() /* ty=Tensor[(14, 14, 9), float64] */
}

def @func_8554() -> Tensor[(520), float64] {
  @func_2626() /* ty=Tensor[(520), float64] */
}

def @func_4505(%var_4437: Tensor[(14, 14, 9), float64], %var_4500: Tensor[(5, 104), float32]) -> (Tensor[(14, 14, 9), int8], Tensor[(520), float64], Tensor[(5, 104), int8], Tensor[(5, 104), uint64]) {
  %485 = @func_1997() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %486 = %485.0;
  %487 = cast(%var_4437, dtype="int8") /* ty=Tensor[(14, 14, 9), int8] */;
  %488 = shape_of(%486, dtype="int32") /* ty=Tensor[(3), int32] */;
  %489 = cast(%486, dtype="int8") /* ty=Tensor[(14, 14, 9), int8] */;
  %490 = dyn.reshape(%487, %488, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %491 = cast(%var_4437, dtype="float32") /* ty=Tensor[(14, 14, 9), float32] */;
  %492 = reshape(%491, newshape=[14, 14, 9]) /* ty=Tensor[(14, 14, 9), float32] */;
  %493 = @func_4086(%492) /* ty=(Tensor[(60), float32], Tensor[(520), float64], Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(16, 6, 9), int64], Tensor[(6, 10, ?), float64]) */;
  %494 = @func_2151() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(72), bool], Tensor[(36), bool], Tensor[(14, 14, 9), float64], Tensor[(2160), float32], Tensor[(5, 104), float64], Tensor[(520), float64]) */;
  %495 = %494.5;
  %496 = cast(%495, dtype="float64") /* ty=Tensor[(5, 104), float64] */;
  %497 = atanh(%496) /* ty=Tensor[(5, 104), float64] */;
  %498 = @func_2775() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(13, 5, 8), float64], Tensor[(520), float64]) */;
  %499 = %498.1;
  %500 = cast(%499, dtype="int8") /* ty=Tensor[(13, 5, 8), int8] */;
  %501 = shape_of(%497, dtype="int32") /* ty=Tensor[(2), int32] */;
  %502 = cast(%497, dtype="int8") /* ty=Tensor[(5, 104), int8] */;
  %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %504 = cast(%497, dtype="float32") /* ty=Tensor[(5, 104), float32] */;
  %505 = asin(%504) /* ty=Tensor[(5, 104), float32] */;
  %506 = cast(%505, dtype="float32") /* ty=Tensor[(5, 104), float32] */;
  %507 = log10(%506) /* ty=Tensor[(5, 104), float32] */;
  %508 = cast(%var_4500, dtype="uint64") /* ty=Tensor[(5, 104), uint64] */;
  %509 = shape_of(%507, dtype="int32") /* ty=Tensor[(2), int32] */;
  %510 = cast(%507, dtype="uint64") /* ty=Tensor[(5, 104), uint64] */;
  %511 = dyn.reshape(%508, %509, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %512 = bitwise_and(%489, %490) /* ty=Tensor[(14, 14, 9), int8] */;
  %513 = %493.1;
  %514 = logical_xor(%502, %503) /* ty=Tensor[(5, 104), int8] */;
  %515 = bitwise_and(%510, %511) /* ty=Tensor[(5, 104), uint64] */;
  (%512, %513, %514, %515)
}

def @func_1605() -> (Tensor[(14, 14, 9), float64],) {
  %516 = cast(meta[relay.Constant][22] /* ty=Tensor[(14, 14, 9), float64] */, dtype="float64") /* ty=Tensor[(14, 14, 9), float64] */;
  %517 = log(%516) /* ty=Tensor[(14, 14, 9), float64] */;
  (%517,)
}

def @func_6796(%var_6771: Tensor[(135), float64]) -> (Tensor[(14, 14, 9), float64], Tensor[(135), float64], Tensor[(3, 15, 3), float32]) {
  %518 = @func_5298() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(5, 104), float64], Tensor[(14, 14, 9), bool]) */;
  %519 = cast(%var_6771, dtype="float64") /* ty=Tensor[(135), float64] */;
  %520 = reshape(%519, newshape=[3, 15, 3]) /* ty=Tensor[(3, 15, 3), float64] */;
  %521 = @func_2503(%520) /* ty=Tensor[(3, 15, 3), float64] */;
  %522 = cast(%521, dtype="float32") /* ty=Tensor[(3, 15, 3), float32] */;
  %523 = %518.0;
  %524 = rsqrt(%522) /* ty=Tensor[(3, 15, 3), float32] */;
  (%523, %var_6771, %524)
}

def @func_7069() -> (Tensor[(520), float64], Tensor[(36), bool], Tensor[(14, 14, 9), bool]) {
  %525 = @func_2904() /* ty=(Tensor[(36), bool],) */;
  %526 = @func_5189() /* ty=Tensor[(520), float64] */;
  %527 = %525.0;
  %528 = @func_6569() /* ty=Tensor[(14, 14, 9), bool] */;
  (%526, %527, %528)
}

def @func_2201() -> (Tensor[(14, 14, 9), float32],) {
  %529 = @func_1908() /* ty=(Tensor[(14, 14, 9), float32], Tensor[(14, 14, 9), float64]) */;
  %530 = %529.0;
  (%530,)
}

def @func_10280() -> (Tensor[(5, 104), uint64], Tensor[(14, 14, 9), float64], Tensor[(5, 104), uint64], Tensor[(30, 2), float64]) {
  %531 = @func_5236() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(3, 15, 3), float64], Tensor[(135), float64], Tensor[(14, 14, 9), float32], Tensor[(5, 104), uint64]) */;
  %532 = @func_6301() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %533 = @func_5170() /* ty=(Tensor[(5, 104), uint64],) */;
  %534 = @func_7534() /* ty=(Tensor[(30, 2), float64],) */;
  %535 = %534.0;
  %536 = cast(%535, dtype="float64") /* ty=Tensor[(30, 2), float64] */;
  %537 = %531.4;
  %538 = %532.0;
  %539 = %533.0;
  %540 = sin(%536) /* ty=Tensor[(30, 2), float64] */;
  (%537, %538, %539, %540)
}

def @func_2335(%var_2323: Tensor[(36), bool]) -> (Tensor[(14, 14, 9), float64], Tensor[(72), bool], Tensor[(36), bool]) {
  %541 = @func_1673() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %542 = cast(%var_2323, dtype="bool") /* ty=Tensor[(36), bool] */;
  %543 = reshape(%542, newshape=[36]) /* ty=Tensor[(36), bool] */;
  %544 = @func_1802(%543) /* ty=(Tensor[(14, 14, 9), float64], Tensor[(2, 12, 3), bool], Tensor[(36), bool], Tensor[(72), bool], Tensor[(30, 2), float32]) */;
  %545 = %541.0;
  %546 = %544.3;
  (%545, %546, %var_2323)
}

def @func_4168() -> (Tensor[(14, 14, 9), float64],) {
  %547 = @func_2415() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %548 = %547.0;
  (%548,)
}

def @func_2917() -> (Tensor[(14, 14, 9), float64],) {
  %549 = @func_1673() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %550 = %549.0;
  (%550,)
}

def @func_1997() -> (Tensor[(14, 14, 9), float64],) {
  %551 = @func_1952() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %552 = %551.0;
  (%552,)
}

def @func_4086(%var_4051: Tensor[(14, 14, 9), float32]) -> (Tensor[(60), float32], Tensor[(520), float64], Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(16, 6, 9), int64], Tensor[(6, 10, ?), float64]) {
  %553 = @func_3247() /* ty=(Tensor[(520), float64],) */;
  %554 = @func_2201() /* ty=(Tensor[(14, 14, 9), float32],) */;
  %555 = %554.0;
  %556 = cast(%var_4051, dtype="float64") /* ty=Tensor[(14, 14, 9), float64] */;
  %557 = shape_of(%555, dtype="int32") /* ty=Tensor[(3), int32] */;
  %558 = cast(%555, dtype="float64") /* ty=Tensor[(14, 14, 9), float64] */;
  %559 = dyn.reshape(%556, %557, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %560 = @func_2415() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %561 = @func_3571() /* ty=(Tensor[(16, 6, 9), int64], Tensor[(864, 1), int64], Tensor[(14, 14, 9), float64], Tensor[(520), float64], Tensor[(13, 5, 8), float32]) */;
  %562 = cast(meta[relay.Constant][23] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %563 = reshape(%562, newshape=[6, 10, 1]) /* ty=Tensor[(6, 10, 1), float32] */;
  %564 = @func_46(%563) /* ty=(Tensor[(6, 10, ?), uint8],) */;
  %565 = %564.0;
  %566 = cast(%565, dtype="float64") /* ty=Tensor[(6, 10, ?), float64] */;
  %567 = %553.0;
  %568 = divide(%558, %559) /* ty=Tensor[(14, 14, 9), float64] */;
  %569 = %560.0;
  %570 = %561.0;
  %571 = log10(%566) /* ty=Tensor[(6, 10, ?), float64] */;
  (meta[relay.Constant][23] /* ty=Tensor[(60), float32] */, %567, %568, %569, %570, %571)
}

def @func_9278(%var_9192: Tensor[(2, 9, 14), int16], %var_9230: Tensor[(120), bool]) -> (Tensor[(2, 9, 14), int64], Tensor[(14, 14, 9), float64], Tensor[(120), bool], Tensor[(5, 104), uint8], Tensor[(14, 14, 9), float64], Tensor[(2, 9, 14), float64]) {
  %572 = cast(%var_9192, dtype="bool") /* ty=Tensor[(2, 9, 14), bool] */;
  %573 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(2, 9, 14), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %574 = cast(meta[relay.Constant][24] /* ty=Tensor[(2, 9, 14), int16] */, dtype="bool") /* ty=Tensor[(2, 9, 14), bool] */;
  %575 = dyn.reshape(%572, %573, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %576 = equal(%574, %575) /* ty=Tensor[(2, 9, 14), bool] */;
  %577 = cast(meta[relay.Constant][25] /* ty=Tensor[(2, 9, 14), bool] */, dtype="float64") /* ty=Tensor[(2, 9, 14), float64] */;
  %578 = shape_of(%576, dtype="int32") /* ty=Tensor[(3), int32] */;
  %579 = cast(%576, dtype="float64") /* ty=Tensor[(2, 9, 14), float64] */;
  %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %581 = floor_divide(%579, %580) /* ty=Tensor[(2, 9, 14), float64] */;
  %582 = cast(meta[relay.Constant][24] /* ty=Tensor[(2, 9, 14), int16] */, dtype="int64") /* ty=Tensor[(2, 9, 14), int64] */;
  %583 = shape_of(%581, dtype="int32") /* ty=Tensor[(3), int32] */;
  %584 = cast(%581, dtype="int64") /* ty=Tensor[(2, 9, 14), int64] */;
  %585 = dyn.reshape(%582, %583, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %586 = cast(%var_9230, dtype="bool") /* ty=Tensor[(120), bool] */;
  %587 = reshape(%586, newshape=[8, 15, 1]) /* ty=Tensor[(8, 15, 1), bool] */;
  %588 = @func_4140(%587) /* ty=(Tensor[(8, 15, 14), bool], Tensor[(14, 14, 9), float32], Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */;
  %589 = @func_6000() /* ty=(Tensor[(5, 104), float64],) */;
  %590 = %589.0;
  %591 = @func_2775() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(13, 5, 8), float64], Tensor[(520), float64]) */;
  %592 = %591.2;
  %593 = cast(%592, dtype="uint8") /* ty=Tensor[(520), uint8] */;
  %594 = shape_of(%590, dtype="int32") /* ty=Tensor[(2), int32] */;
  %595 = cast(%590, dtype="uint8") /* ty=Tensor[(5, 104), uint8] */;
  %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %597 = @func_5067() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %598 = cast(%576, dtype="float32") /* ty=Tensor[(2, 9, 14), float32] */;
  %599 = sin(%598) /* ty=Tensor[(2, 9, 14), float32] */;
  %600 = cast(%599, dtype="float64") /* ty=Tensor[(2, 9, 14), float64] */;
  %601 = bitwise_xor(%584, %585) /* ty=Tensor[(2, 9, 14), int64] */;
  %602 = %588.2;
  %603 = bitwise_or(%595, %596) /* ty=Tensor[(5, 104), uint8] */;
  %604 = %597.0;
  %605 = cos(%600) /* ty=Tensor[(2, 9, 14), float64] */;
  (%601, %602, %var_9230, %603, %604, %605)
}

def @func_3808() -> (Tensor[(14, 14, 9), float64], Tensor[(5, 104), float64]) {
  %606 = @func_2775() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(13, 5, 8), float64], Tensor[(520), float64]) */;
  %607 = @func_2151() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(72), bool], Tensor[(36), bool], Tensor[(14, 14, 9), float64], Tensor[(2160), float32], Tensor[(5, 104), float64], Tensor[(520), float64]) */;
  %608 = %606.0;
  %609 = %607.5;
  (%608, %609)
}

def @func_5331() -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) {
  %610 = @func_2475() /* ty=Tensor[(14, 14, 9), float64] */;
  %611 = @func_4278() /* ty=Tensor[(14, 14, 9), float64] */;
  (%610, %611)
}

def @func_3270() -> (Tensor[(14, 14, 9), float64],) {
  %612 = @func_1952() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %613 = %612.0;
  (%613,)
}

def @func_7534() -> (Tensor[(30, 2), float64],) {
  %614 = @func_6873() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(30, 2), float32], Tensor[(3, 12), bool]) */;
  %615 = %614.1;
  %616 = cast(%615, dtype="float64") /* ty=Tensor[(30, 2), float64] */;
  %617 = sigmoid(%616) /* ty=Tensor[(30, 2), float64] */;
  (%617,)
}

def @func_2904() -> (Tensor[(36), bool],) {
  %618 = @func_2151() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(72), bool], Tensor[(36), bool], Tensor[(14, 14, 9), float64], Tensor[(2160), float32], Tensor[(5, 104), float64], Tensor[(520), float64]) */;
  %619 = %618.2;
  (%619,)
}

def @func_10461() -> (Tensor[(5, 104), uint64],) {
  %620 = @func_6220() /* ty=Tensor[(5, 104), uint64] */;
  (%620,)
}

def @func_10441() -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(3, 15, 3), float64], Tensor[(135), float64]) {
  %621 = @func_10280() /* ty=(Tensor[(5, 104), uint64], Tensor[(14, 14, 9), float64], Tensor[(5, 104), uint64], Tensor[(30, 2), float64]) */;
  %622 = @func_10280() /* ty=(Tensor[(5, 104), uint64], Tensor[(14, 14, 9), float64], Tensor[(5, 104), uint64], Tensor[(30, 2), float64]) */;
  %623 = %622.1;
  %624 = cast(%623, dtype="float64") /* ty=Tensor[(14, 14, 9), float64] */;
  %625 = cast(meta[relay.Constant][26] /* ty=Tensor[(135), float64] */, dtype="float64") /* ty=Tensor[(135), float64] */;
  %626 = reshape(%625, newshape=[3, 15, 3]) /* ty=Tensor[(3, 15, 3), float64] */;
  %627 = %621.1;
  %628 = log2(%624) /* ty=Tensor[(14, 14, 9), float64] */;
  %629 = @func_2503(%626) /* ty=Tensor[(3, 15, 3), float64] */;
  (%627, %628, %629, meta[relay.Constant][26] /* ty=Tensor[(135), float64] */)
}

def @func_9529(%var_9501: Tensor[(1, 4, 4), float32], %var_9502: Tensor[(1, 4, 4), float32]) -> (Tensor[(?, 4, 4), bool], Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) {
  %630 = cast(%var_9502, dtype="bool") /* ty=Tensor[(1, 4, 4), bool] */;
  %631 = shape_of(%var_9501, dtype="int32") /* ty=Tensor[(3), int32] */;
  %632 = cast(%var_9501, dtype="bool") /* ty=Tensor[(1, 4, 4), bool] */;
  %633 = dyn.reshape(%630, %631, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %634 = @func_9401() /* ty=(Tensor[(36), bool], Tensor[(36), bool], Tensor[(14, 14, 9), float64]) */;
  %635 = %634.2;
  %636 = cast(%635, dtype="float64") /* ty=Tensor[(14, 14, 9), float64] */;
  %637 = reshape(%636, newshape=[14, 14, 9]) /* ty=Tensor[(14, 14, 9), float64] */;
  %638 = equal(%632, %633) /* ty=Tensor[(?, 4, 4), bool] */;
  %639 = @func_2231(%637) /* ty=Tensor[(14, 14, 9), float64] */;
  (%638, %635, %639)
}

def @func_6000() -> (Tensor[(5, 104), float64],) {
  %640 = @func_4784() /* ty=(Tensor[(5, 104), float64],) */;
  %641 = %640.0;
  (%641,)
}

def @func_642(%var_632: Tensor[(1, 12, 3), bool], %var_633: Tensor[(2, 12, 3), bool], %var_639: Tensor[(60), float32]) -> (Tensor[(2, 12, 3), bool], Tensor[(6, 10, ?), uint8], Tensor[(80), bool], Tensor[(60), float32]) {
  %642 = cast(%var_632, dtype="bool") /* ty=Tensor[(1, 12, 3), bool] */;
  %643 = cast(%var_633, dtype="bool") /* ty=Tensor[(2, 12, 3), bool] */;
  %644 = cast(meta[relay.Constant][27] /* ty=Tensor[(80), bool] */, dtype="bool") /* ty=Tensor[(80), bool] */;
  %645 = cast(meta[relay.Constant][27] /* ty=Tensor[(80), bool] */, dtype="bool") /* ty=Tensor[(80), bool] */;
  %646 = cast(%var_639, dtype="float32") /* ty=Tensor[(60), float32] */;
  %647 = reshape(%644, newshape=[8, 2, 5]) /* ty=Tensor[(8, 2, 5), bool] */;
  %648 = reshape(%645, newshape=[8, 2, 5]) /* ty=Tensor[(8, 2, 5), bool] */;
  %649 = reshape(%646, newshape=[15, 4]) /* ty=Tensor[(15, 4), float32] */;
  %650 = @func_436(%647, %648, %649) /* ty=(Tensor[(8, 2, 5), bool], Tensor[(6, 10, ?), uint8], Tensor[(15, 4), float32]) */;
  %651 = logical_and(%642, %643) /* ty=Tensor[(2, 12, 3), bool] */;
  %652 = %650.1;
  (%651, %652, meta[relay.Constant][27] /* ty=Tensor[(80), bool] */, %var_639)
}

def @func_8811() -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float32]) {
  %653 = @func_7554() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %654 = @func_8688() /* ty=Tensor[(14, 14, 9), float64] */;
  %655 = @func_2415() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %656 = %655.0;
  %657 = cast(%656, dtype="float32") /* ty=Tensor[(14, 14, 9), float32] */;
  %658 = shape_of(%654, dtype="int32") /* ty=Tensor[(3), int32] */;
  %659 = cast(%654, dtype="float32") /* ty=Tensor[(14, 14, 9), float32] */;
  %660 = dyn.reshape(%657, %658, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %661 = %653.0;
  %662 = @func_6086() /* ty=Tensor[(14, 14, 9), float64] */;
  %663 = floor_divide(%659, %660) /* ty=Tensor[(14, 14, 9), float32] */;
  (%661, %662, %663)
}

def @func_1673() -> (Tensor[(14, 14, 9), float64],) {
  %664 = @func_1605() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %665 = %664.0;
  (%665,)
}

def @func_3042(%var_2991: Tensor[(520), float64]) -> (Tensor[(14, 14, 9), float64], Tensor[(13, 5, 8), float64], Tensor[(520), float32], Tensor[(6, 10, ?), uint8], Tensor[(60), float32], Tensor[(14, 14, 9), float32], Tensor[(14, 14, 9), float64]) {
  %666 = @func_1811() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %667 = cast(%var_2991, dtype="float64") /* ty=Tensor[(520), float64] */;
  %668 = reshape(%667, newshape=[5, 104]) /* ty=Tensor[(5, 104), float64] */;
  %669 = @func_1845(%668) /* ty=(Tensor[(14, 14, 9), float32], Tensor[(13, 5, 8), float64], Tensor[(5, 104), float64]) */;
  %670 = cast(%var_2991, dtype="float32") /* ty=Tensor[(520), float32] */;
  %671 = cast(meta[relay.Constant][28] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %672 = reshape(%671, newshape=[6, 10, 1]) /* ty=Tensor[(6, 10, 1), float32] */;
  %673 = @func_46(%672) /* ty=(Tensor[(6, 10, ?), uint8],) */;
  %674 = @func_2201() /* ty=(Tensor[(14, 14, 9), float32],) */;
  %675 = @func_2917() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %676 = %666.0;
  %677 = %669.1;
  %678 = sigmoid(%670) /* ty=Tensor[(520), float32] */;
  %679 = %673.0;
  %680 = %674.0;
  %681 = %675.0;
  (%676, %677, %678, %679, meta[relay.Constant][28] /* ty=Tensor[(60), float32] */, %680, %681)
}

def @func_1293(%var_1254: Tensor[(4, 2, 1), uint32], %var_1255: Tensor[(4, 2, 6), uint32]) -> (Tensor[(4, 2, 6), uint32], Tensor[(6, 10, ?), uint8], Tensor[(60), float32], Tensor[(15, 12, 12), float32], Tensor[(2160), float32]) {
  %682 = cast(%var_1254, dtype="uint32") /* ty=Tensor[(4, 2, 1), uint32] */;
  %683 = cast(%var_1255, dtype="uint32") /* ty=Tensor[(4, 2, 6), uint32] */;
  %684 = cast(meta[relay.Constant][29] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %685 = reshape(%684, newshape=[6, 10, 1]) /* ty=Tensor[(6, 10, 1), float32] */;
  %686 = @func_46(%685) /* ty=(Tensor[(6, 10, ?), uint8],) */;
  %687 = cast(meta[relay.Constant][30] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %688 = cast(meta[relay.Constant][30] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %689 = reshape(%687, newshape=[15, 12, 12]) /* ty=Tensor[(15, 12, 12), float32] */;
  %690 = reshape(%688, newshape=[15, 12, 12]) /* ty=Tensor[(15, 12, 12), float32] */;
  %691 = add(%682, %683) /* ty=Tensor[(4, 2, 6), uint32] */;
  %692 = %686.0;
  %693 = @func_1090(%689, %690) /* ty=Tensor[(15, 12, 12), float32] */;
  (%691, %692, meta[relay.Constant][29] /* ty=Tensor[(60), float32] */, %693, meta[relay.Constant][30] /* ty=Tensor[(2160), float32] */)
}

def @func_4894() -> Tensor[(14, 14, 9), float64] {
  %694 = @func_4164() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */;
  %694.0
}

def @func_5298() -> (Tensor[(14, 14, 9), float64], Tensor[(5, 104), float64], Tensor[(14, 14, 9), bool]) {
  %695 = @func_3621() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %696 = @func_4784() /* ty=(Tensor[(5, 104), float64],) */;
  %697 = %696.0;
  %698 = cast(%697, dtype="float64") /* ty=Tensor[(5, 104), float64] */;
  %699 = cos(%698) /* ty=Tensor[(5, 104), float64] */;
  %700 = cast(%699, dtype="float64") /* ty=Tensor[(5, 104), float64] */;
  %701 = %695.0;
  %702 = cast(%701, dtype="float32") /* ty=Tensor[(14, 14, 9), float32] */;
  %703 = reshape(%702, newshape=[14, 14, 9]) /* ty=Tensor[(14, 14, 9), float32] */;
  %704 = rsqrt(%700) /* ty=Tensor[(5, 104), float64] */;
  %705 = @func_2535(%703) /* ty=Tensor[(14, 14, 9), bool] */;
  (%701, %704, %705)
}

def @func_7889() -> (Tensor[(14, 14, 9), float32],) {
  %706 = @func_4592() /* ty=Tensor[(14, 14, 9), float32] */;
  (%706,)
}

def @func_5792() -> Tensor[(520), float64] {
  @func_2365() /* ty=Tensor[(520), float64] */
}

def @func_2432() -> (Tensor[(14, 14, 9), float64],) {
  %707 = @func_1605() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %708 = %707.0;
  (%708,)
}

def @func_2475() -> Tensor[(14, 14, 9), float64] {
  %709 = @func_1811() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %709.0
}

def @func_3607() -> (Tensor[(14, 14, 9), float64],) {
  %710 = @func_2151() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(72), bool], Tensor[(36), bool], Tensor[(14, 14, 9), float64], Tensor[(2160), float32], Tensor[(5, 104), float64], Tensor[(520), float64]) */;
  %711 = %710.3;
  (%711,)
}

def @func_6873() -> (Tensor[(14, 14, 9), float64], Tensor[(30, 2), float32], Tensor[(3, 12), bool]) {
  %712 = cast(meta[relay.Constant][31] /* ty=Tensor[(3, 12), bool] */, dtype="bool") /* ty=Tensor[(3, 12), bool] */;
  %713 = reshape(%712, newshape=[36]) /* ty=Tensor[(36), bool] */;
  %714 = @func_1802(%713) /* ty=(Tensor[(14, 14, 9), float64], Tensor[(2, 12, 3), bool], Tensor[(36), bool], Tensor[(72), bool], Tensor[(30, 2), float32]) */;
  %715 = @func_4894() /* ty=Tensor[(14, 14, 9), float64] */;
  %716 = %714.4;
  (%715, %716, meta[relay.Constant][31] /* ty=Tensor[(3, 12), bool] */)
}

def @func_6220() -> Tensor[(5, 104), uint64] {
  %717 = @func_5170() /* ty=(Tensor[(5, 104), uint64],) */;
  %717.0
}

def @func_4773(%var_4755: Tensor[(6, 5, 1), float64]) -> Tensor[(6, 5, 1), float64] {
  %718 = cast(%var_4755, dtype="float64") /* ty=Tensor[(6, 5, 1), float64] */;
  %719 = sigmoid(%718) /* ty=Tensor[(6, 5, 1), float64] */;
  %720 = cast(%719, dtype="float64") /* ty=Tensor[(6, 5, 1), float64] */;
  log10(%720) /* ty=Tensor[(6, 5, 1), float64] */
}

def @func_8703() -> Tensor[(14, 2, 15), bool] {
  %721 = @func_6362() /* ty=(Tensor[(14, 2, 15), bool],) */;
  %721.0
}

def @func_4205() -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) {
  %722 = @func_4164() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */;
  %723 = %722.0;
  %724 = @func_2722() /* ty=Tensor[(14, 14, 9), float64] */;
  %725 = @func_2722() /* ty=Tensor[(14, 14, 9), float64] */;
  (%723, %724, %725)
}

def @func_1952() -> (Tensor[(14, 14, 9), float64],) {
  %726 = @func_1811() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %727 = %726.0;
  (%727,)
}

def @func_10002(%var_9988: Tensor[(15, 15, 4), float32]) -> (Tensor[(15, 15, 4), float32],) {
  %728 = cast(%var_9988, dtype="float32") /* ty=Tensor[(15, 15, 4), float32] */;
  %729 = log2(%728) /* ty=Tensor[(15, 15, 4), float32] */;
  %730 = cast(%729, dtype="float32") /* ty=Tensor[(15, 15, 4), float32] */;
  %731 = erf(%730) /* ty=Tensor[(15, 15, 4), float32] */;
  (%731,)
}

def @func_4730(%var_4716: Tensor[(1764, 1), float64]) -> (Tensor[(520), float64], Tensor[(14, 14, 9), bool], Tensor[(1764, 1), float64]) {
  %732 = cast(%var_4716, dtype="float64") /* ty=Tensor[(1764, 1), float64] */;
  %733 = reshape(%732, newshape=[14, 14, 9]) /* ty=Tensor[(14, 14, 9), float64] */;
  %734 = @func_4576(%733) /* ty=(Tensor[(14, 14, 9), bool], Tensor[(36), bool], Tensor[(14, 14, 9), float32]) */;
  %735 = @func_2296() /* ty=Tensor[(520), float64] */;
  %736 = %734.0;
  (%735, %736, %var_4716)
}

def @func_9017(%var_9000: float64) -> (Tensor[(7, 9, 8), float64], Tensor[(14, 14, 9), float64]) {
  %737 = cast(%var_9000, dtype="float64") /* ty=float64 */;
  %738 = cast(meta[relay.Constant][32] /* ty=Tensor[(7, 9, 8), float64] */, dtype="float64") /* ty=Tensor[(7, 9, 8), float64] */;
  %739 = @func_7992() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %740 = floor_divide(%737, %738) /* ty=Tensor[(7, 9, 8), float64] */;
  %741 = %739.0;
  (%740, %741)
}

def @func_2535(%var_2530: Tensor[(14, 14, 9), float32]) -> Tensor[(14, 14, 9), bool] {
  %742 = @func_1811() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %743 = %742.0;
  %744 = cast(%743, dtype="float32") /* ty=Tensor[(14, 14, 9), float32] */;
  %745 = sigmoid(%744) /* ty=Tensor[(14, 14, 9), float32] */;
  %746 = cast(%var_2530, dtype="bool") /* ty=Tensor[(14, 14, 9), bool] */;
  %747 = shape_of(%745, dtype="int32") /* ty=Tensor[(3), int32] */;
  %748 = cast(%745, dtype="bool") /* ty=Tensor[(14, 14, 9), bool] */;
  %749 = dyn.reshape(%746, %747, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%748, %749) /* ty=Tensor[(14, 14, 9), bool] */
}

def @func_6086() -> Tensor[(14, 14, 9), float64] {
  @func_4278() /* ty=Tensor[(14, 14, 9), float64] */
}

def @func_5067() -> (Tensor[(14, 14, 9), float64],) {
  %750 = @func_1908() /* ty=(Tensor[(14, 14, 9), float32], Tensor[(14, 14, 9), float64]) */;
  %751 = %750.1;
  (%751,)
}

def @func_10177() -> Tensor[(14, 14, 9), float64] {
  %752 = @func_7992() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %752.0
}

def @func_5425() -> Tensor[(520), float64] {
  @func_2365() /* ty=Tensor[(520), float64] */
}

def @func_10380() -> Tensor[(14, 14, 9), float64] {
  %753 = @func_6333() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %753.0
}

def @func_4576(%var_4539: Tensor[(14, 14, 9), float64]) -> (Tensor[(14, 14, 9), bool], Tensor[(36), bool], Tensor[(14, 14, 9), float32]) {
  %754 = @func_2917() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %755 = %754.0;
  %756 = cast(%var_4539, dtype="bool") /* ty=Tensor[(14, 14, 9), bool] */;
  %757 = shape_of(%755, dtype="int32") /* ty=Tensor[(3), int32] */;
  %758 = cast(%755, dtype="bool") /* ty=Tensor[(14, 14, 9), bool] */;
  %759 = dyn.reshape(%756, %757, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %760 = @func_3906() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(36), bool], Tensor[(36), bool], Tensor[(14, 14, 9), bool], Tensor[(14, 14, 9), float64], Tensor[(2160), float64]) */;
  %761 = @func_2201() /* ty=(Tensor[(14, 14, 9), float32],) */;
  %762 = not_equal(%758, %759) /* ty=Tensor[(14, 14, 9), bool] */;
  %763 = %760.2;
  %764 = %761.0;
  (%762, %763, %764)
}

def @func_3658() -> Tensor[(14, 14, 9), float64] {
  %765 = @func_3270() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %765.0
}

def @func_10662(%var_10652: Tensor[(16, 9, 1), float64]) -> (Tensor[(16, 9, 1), float64],) {
  %766 = cast(%var_10652, dtype="float64") /* ty=Tensor[(16, 9, 1), float64] */;
  %767 = atan(%766) /* ty=Tensor[(16, 9, 1), float64] */;
  (%767,)
}

def @func_8171(%var_8124: Tensor[(135), float64]) -> (Tensor[(14, 14, 9), bool], Tensor[(135), float64], Tensor[(3, 15, 3), float64]) {
  %768 = @func_5298() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(5, 104), float64], Tensor[(14, 14, 9), bool]) */;
  %769 = cast(%var_8124, dtype="float64") /* ty=Tensor[(135), float64] */;
  %770 = reshape(%769, newshape=[3, 15, 3]) /* ty=Tensor[(3, 15, 3), float64] */;
  %771 = @func_2503(%770) /* ty=Tensor[(3, 15, 3), float64] */;
  %772 = cast(%771, dtype="float64") /* ty=Tensor[(3, 15, 3), float64] */;
  %773 = %768.2;
  %774 = tan(%772) /* ty=Tensor[(3, 15, 3), float64] */;
  (%773, %var_8124, %774)
}

def @func_7364(%var_7350: Tensor[(14, 14, 9), bool]) -> Tensor[(14, 14, 9), uint64] {
  %775 = @func_3379() /* ty=Tensor[(14, 14, 9), bool] */;
  %776 = cast(%var_7350, dtype="uint64") /* ty=Tensor[(14, 14, 9), uint64] */;
  %777 = shape_of(%775, dtype="int32") /* ty=Tensor[(3), int32] */;
  %778 = cast(%775, dtype="uint64") /* ty=Tensor[(14, 14, 9), uint64] */;
  %779 = dyn.reshape(%776, %777, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  left_shift(%778, %779) /* ty=Tensor[(14, 14, 9), uint64] */
}

def @func_6540() -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) {
  %780 = @func_4953() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %781 = @func_3071() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), bool]) */;
  %782 = @func_6060() /* ty=Tensor[(14, 14, 9), float64] */;
  %783 = %780.0;
  %784 = %781.0;
  (%782, %783, %784)
}

def @func_1769(%var_1757: Tensor[(13, 5, 8), float64]) -> (Tensor[(13, 5, 8), float64],) {
  %785 = cast(%var_1757, dtype="float64") /* ty=Tensor[(13, 5, 8), float64] */;
  %786 = log10(%785) /* ty=Tensor[(13, 5, 8), float64] */;
  (%786,)
}

def @func_4641() -> (Tensor[(14, 14, 9), float64],) {
  %787 = @func_2475() /* ty=Tensor[(14, 14, 9), float64] */;
  (%787,)
}

def @func_9858(%var_9851: Tensor[(4, 1, 12), float32], %var_9854: Tensor[(4, 14, 12), float32]) -> (Tensor[(4, 1, 12), float32], Tensor[(4, 14, 12), uint16]) {
  %788 = cast(%var_9851, dtype="float32") /* ty=Tensor[(4, 1, 12), float32] */;
  %789 = cast(%var_9851, dtype="uint16") /* ty=Tensor[(4, 1, 12), uint16] */;
  %790 = cast(%var_9854, dtype="uint16") /* ty=Tensor[(4, 14, 12), uint16] */;
  %791 = sinh(%788) /* ty=Tensor[(4, 1, 12), float32] */;
  %792 = maximum(%789, %790) /* ty=Tensor[(4, 14, 12), uint16] */;
  (%791, %792)
}

def @func_10634(%var_10631: Tensor[(15, 11, 10), float32]) -> (Tensor[(15, 11, 10), float32],) {
  %793 = cast(%var_10631, dtype="float32") /* ty=Tensor[(15, 11, 10), float32] */;
  %794 = asinh(%793) /* ty=Tensor[(15, 11, 10), float32] */;
  (%794,)
}

def @func_6362() -> (Tensor[(14, 2, 15), bool],) {
  %795 = cast(meta[relay.Constant][34] /* ty=Tensor[(14, 2, 15), uint64] */, dtype="bool") /* ty=Tensor[(14, 2, 15), bool] */;
  %796 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(14, 2, 15), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %797 = cast(meta[relay.Constant][33] /* ty=Tensor[(14, 2, 15), uint64] */, dtype="bool") /* ty=Tensor[(14, 2, 15), bool] */;
  %798 = dyn.reshape(%795, %796, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %799 = greater(%797, %798) /* ty=Tensor[(14, 2, 15), bool] */;
  (%799,)
}

def @func_10116(%var_10043: Tensor[(7, 13, 5), float64], %var_10063: Tensor[(135), float64], %var_10095: Tensor[(210), int32]) -> (Tensor[(14, 14, 9), bool], Tensor[(8), uint32], Tensor[(3, 15, 3), float64], Tensor[(135), float64], Tensor[(14, 14, 9), float64], Tensor[(1080, 2), float32], Tensor[(14, 14, 9), float64], Tensor[(210), int32], Tensor[(7, 13, 5), float32], Tensor[(14, 14, 9), float64], Tensor[(7, 13, 5), float64]) {
  %800 = cast(meta[relay.Constant][35] /* ty=Tensor[(8), uint32] */, dtype="uint32") /* ty=Tensor[(8), uint32] */;
  %801 = reshape(%800, newshape=[8, 1]) /* ty=Tensor[(8, 1), uint32] */;
  %802 = @func_8943(%801) /* ty=(Tensor[(14, 14, 9), bool], Tensor[(6, 10, ?), uint8], Tensor[(8, 1), uint32], Tensor[(48), uint32]) */;
  %803 = cast(%var_10063, dtype="float64") /* ty=Tensor[(135), float64] */;
  %804 = reshape(%803, newshape=[135]) /* ty=Tensor[(135), float64] */;
  %805 = @func_8171(%804) /* ty=(Tensor[(14, 14, 9), bool], Tensor[(135), float64], Tensor[(3, 15, 3), float64]) */;
  %806 = cast(meta[relay.Constant][36] /* ty=Tensor[(1080, 2), float32] */, dtype="float32") /* ty=Tensor[(1080, 2), float32] */;
  %807 = reshape(%806, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
  %808 = @func_1640(%807) /* ty=(Tensor[(14, 14, 9), float64], Tensor[(6, 10, ?), uint8], Tensor[(60), float32], Tensor[(15, 12, 12), float32], Tensor[(2160), float32], Tensor[(14, 14, 9), float64]) */;
  %809 = cast(%var_10095, dtype="int32") /* ty=Tensor[(210), int32] */;
  %810 = reshape(%809, newshape=[1, 15, 14]) /* ty=Tensor[(1, 15, 14), int32] */;
  %811 = @func_5399(%810) /* ty=(Tensor[(2, 15, 14), int32], Tensor[(14, 14, 9), float64]) */;
  %812 = cast(%var_10043, dtype="float64") /* ty=Tensor[(7, 13, 5), float64] */;
  %813 = asinh(%812) /* ty=Tensor[(7, 13, 5), float64] */;
  %814 = cast(%813, dtype="float32") /* ty=Tensor[(7, 13, 5), float32] */;
  %815 = @func_6333() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %816 = cast(%813, dtype="float64") /* ty=Tensor[(7, 13, 5), float64] */;
  %817 = rsqrt(%816) /* ty=Tensor[(7, 13, 5), float64] */;
  %818 = cast(%817, dtype="float64") /* ty=Tensor[(7, 13, 5), float64] */;
  %819 = %802.0;
  %820 = %805.2;
  %821 = %808.0;
  %822 = %811.1;
  %823 = sinh(%814) /* ty=Tensor[(7, 13, 5), float32] */;
  %824 = %815.0;
  %825 = log(%818) /* ty=Tensor[(7, 13, 5), float64] */;
  (%819, meta[relay.Constant][35] /* ty=Tensor[(8), uint32] */, %820, %var_10063, %821, meta[relay.Constant][36] /* ty=Tensor[(1080, 2), float32] */, %822, %var_10095, %823, %824, %825)
}

def @func_7193(%var_7106: int8, %var_7107: Tensor[(4, 1, 9), int8]) -> (Tensor[(520), float64], Tensor[(14, 14, 9), float64], Tensor[(4, ?, 9), float32], Tensor[(14, 2, 15), bool], Tensor[(14, 14, 9), float64], Tensor[(4, 1, 9), float32], Tensor[(14, 14, 9), bool], Tensor[(3, 15, 3), float64], Tensor[(3, 45), float64]) {
  %826 = @func_2904() /* ty=(Tensor[(36), bool],) */;
  %827 = %826.0;
  %828 = cast(%827, dtype="float32") /* ty=Tensor[(36), float32] */;
  %829 = shape_of(%var_7107, dtype="int32") /* ty=Tensor[(3), int32] */;
  %830 = cast(%var_7107, dtype="float32") /* ty=Tensor[(4, 1, 9), float32] */;
  %831 = dyn.reshape(%828, %829, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %832 = @func_6362() /* ty=(Tensor[(14, 2, 15), bool],) */;
  %833 = @func_4168() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %834 = cast(%var_7106, dtype="int8") /* ty=int8 */;
  %835 = cast(%var_7107, dtype="int8") /* ty=Tensor[(4, 1, 9), int8] */;
  %836 = logical_xor(%834, %835) /* ty=Tensor[(4, 1, 9), int8] */;
  %837 = cast(%836, dtype="float64") /* ty=Tensor[(4, 1, 9), float64] */;
  %838 = sigmoid(%837) /* ty=Tensor[(4, 1, 9), float64] */;
  %839 = cast(%838, dtype="float32") /* ty=Tensor[(4, 1, 9), float32] */;
  %840 = cast(meta[relay.Constant][37] /* ty=Tensor[(3, 45), float64] */, dtype="float64") /* ty=Tensor[(3, 45), float64] */;
  %841 = reshape(%840, newshape=[3, 15, 3]) /* ty=Tensor[(3, 15, 3), float64] */;
  %842 = @func_2365() /* ty=Tensor[(520), float64] */;
  %843 = @func_3658() /* ty=Tensor[(14, 14, 9), float64] */;
  %844 = floor_mod(%830, %831) /* ty=Tensor[(4, ?, 9), float32] */;
  %845 = %832.0;
  %846 = %833.0;
  %847 = acos(%839) /* ty=Tensor[(4, 1, 9), float32] */;
  %848 = @func_3379() /* ty=Tensor[(14, 14, 9), bool] */;
  %849 = @func_2503(%841) /* ty=Tensor[(3, 15, 3), float64] */;
  (%842, %843, %844, %845, %846, %847, %848, %849, meta[relay.Constant][37] /* ty=Tensor[(3, 45), float64] */)
}

def @func_7992() -> (Tensor[(14, 14, 9), float64],) {
  %850 = @func_6086() /* ty=Tensor[(14, 14, 9), float64] */;
  (%850,)
}

def @func_5236() -> (Tensor[(14, 14, 9), float64], Tensor[(3, 15, 3), float64], Tensor[(135), float64], Tensor[(14, 14, 9), float32], Tensor[(5, 104), uint64]) {
  %851 = @func_5043() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */;
  %852 = cast(meta[relay.Constant][38] /* ty=Tensor[(135), float64] */, dtype="float64") /* ty=Tensor[(135), float64] */;
  %853 = reshape(%852, newshape=[3, 15, 3]) /* ty=Tensor[(3, 15, 3), float64] */;
  %854 = @func_2201() /* ty=(Tensor[(14, 14, 9), float32],) */;
  %855 = @func_5170() /* ty=(Tensor[(5, 104), uint64],) */;
  %856 = %851.0;
  %857 = @func_2503(%853) /* ty=Tensor[(3, 15, 3), float64] */;
  %858 = %854.0;
  %859 = %855.0;
  (%856, %857, meta[relay.Constant][38] /* ty=Tensor[(135), float64] */, %858, %859)
}

def @func_10817() -> (Tensor[(5, 104), uint64],) {
  %860 = @func_10461() /* ty=(Tensor[(5, 104), uint64],) */;
  %861 = %860.0;
  (%861,)
}

def @func_8970(%var_8962: Tensor[(7, 2, 2), uint16], %var_8963: Tensor[(7, 2, 2), uint16]) -> (Tensor[(7, 2, 2), bool],) {
  %862 = cast(%var_8963, dtype="bool") /* ty=Tensor[(7, 2, 2), bool] */;
  %863 = shape_of(%var_8962, dtype="int32") /* ty=Tensor[(3), int32] */;
  %864 = cast(%var_8962, dtype="bool") /* ty=Tensor[(7, 2, 2), bool] */;
  %865 = dyn.reshape(%862, %863, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %866 = greater(%864, %865) /* ty=Tensor[(7, 2, 2), bool] */;
  (%866,)
}

def @func_6823() -> (Tensor[(14, 14, 9), float64], Tensor[(520), float64]) {
  %867 = @func_4168() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %868 = %867.0;
  %869 = cast(%868, dtype="float64") /* ty=Tensor[(14, 14, 9), float64] */;
  %870 = reshape(%869, newshape=[1764, 1]) /* ty=Tensor[(1764, 1), float64] */;
  %871 = @func_4730(%870) /* ty=(Tensor[(520), float64], Tensor[(14, 14, 9), bool], Tensor[(1764, 1), float64]) */;
  %872 = %871.0;
  (%868, %872)
}

def @func_10623(%var_10546: Tensor[(1, 2, 8), float32], %var_10588: Tensor[(2, 2, 8), float32]) -> (Tensor[(520), float64], Tensor[(14, 14, 9), float64], Tensor[(?, 2, 8), int64], Tensor[(2, 2, 8), bool]) {
  %873 = @func_4953() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %874 = cast(%var_10546, dtype="float32") /* ty=Tensor[(1, 2, 8), float32] */;
  %875 = acosh(%874) /* ty=Tensor[(1, 2, 8), float32] */;
  %876 = cast(%var_10546, dtype="float32") /* ty=Tensor[(1, 2, 8), float32] */;
  %877 = shape_of(%875, dtype="int32") /* ty=Tensor[(3), int32] */;
  %878 = cast(%875, dtype="float32") /* ty=Tensor[(1, 2, 8), float32] */;
  %879 = dyn.reshape(%876, %877, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %880 = maximum(%878, %879) /* ty=Tensor[(?, 2, 8), float32] */;
  %881 = cast(%875, dtype="int64") /* ty=Tensor[(1, 2, 8), int64] */;
  %882 = shape_of(%880, dtype="int32") /* ty=Tensor[(3), int32] */;
  %883 = cast(%880, dtype="int64") /* ty=Tensor[(?, 2, 8), int64] */;
  %884 = dyn.reshape(%881, %882, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %885 = cast(%875, dtype="bool") /* ty=Tensor[(1, 2, 8), bool] */;
  %886 = cast(%var_10588, dtype="bool") /* ty=Tensor[(2, 2, 8), bool] */;
  %887 = @func_7502() /* ty=Tensor[(520), float64] */;
  %888 = %873.0;
  %889 = bitwise_or(%883, %884) /* ty=Tensor[(?, 2, 8), int64] */;
  %890 = greater(%885, %886) /* ty=Tensor[(2, 2, 8), bool] */;
  (%887, %888, %889, %890)
}

def @func_7045() -> (Tensor[(14, 14, 9), float64],) {
  %891 = @func_5067() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %892 = %891.0;
  (%892,)
}

def @func_7484() -> (Tensor[(14, 14, 9), float64],) {
  %893 = @func_1605() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %894 = %893.0;
  (%894,)
}

def @func_2025(%var_2017: Tensor[(16, 6, 9), int64], %var_2018: Tensor[(16, 6, 9), int64]) -> Tensor[(16, 6, 9), int64] {
  %895 = cast(%var_2018, dtype="int64") /* ty=Tensor[(16, 6, 9), int64] */;
  %896 = shape_of(%var_2017, dtype="int32") /* ty=Tensor[(3), int32] */;
  %897 = cast(%var_2017, dtype="int64") /* ty=Tensor[(16, 6, 9), int64] */;
  %898 = dyn.reshape(%895, %896, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  minimum(%897, %898) /* ty=Tensor[(16, 6, 9), int64] */
}

def @func_1090(%var_1082: Tensor[(15, 12, 12), float32], %var_1083: Tensor[(15, 12, 12), float32]) -> Tensor[(15, 12, 12), float32] {
  %899 = cast(%var_1083, dtype="float32") /* ty=Tensor[(15, 12, 12), float32] */;
  %900 = shape_of(%var_1082, dtype="int32") /* ty=Tensor[(3), int32] */;
  %901 = cast(%var_1082, dtype="float32") /* ty=Tensor[(15, 12, 12), float32] */;
  %902 = dyn.reshape(%899, %900, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%901, %902) /* ty=Tensor[(15, 12, 12), float32] */
}

def @func_5075() -> (Tensor[(14, 14, 9), float64],) {
  %903 = @func_5043() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */;
  %904 = %903.1;
  (%904,)
}

def @func_8363() -> (Tensor[(14, 14, 9), float64], Tensor[(520), float64], Tensor[(520), float64], Tensor[(14, 14, 9), float32], Tensor[(520), float64]) {
  %905 = @func_4953() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %906 = @func_7254() /* ty=(Tensor[(520), float64],) */;
  %907 = @func_2201() /* ty=(Tensor[(14, 14, 9), float32],) */;
  %908 = @func_2404() /* ty=(Tensor[(14, 14, 9), bool], Tensor[(520), float64]) */;
  %909 = %905.0;
  %910 = %906.0;
  %911 = @func_5792() /* ty=Tensor[(520), float64] */;
  %912 = %907.0;
  %913 = %908.1;
  (%909, %910, %911, %912, %913)
}

def @func_9641(%var_9623: Tensor[(5, 104), uint64]) -> (Tensor[(14, 14, 9), float64], Tensor[(5, 104), int64]) {
  %914 = @func_4953() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %915 = @func_6220() /* ty=Tensor[(5, 104), uint64] */;
  %916 = cast(%var_9623, dtype="int64") /* ty=Tensor[(5, 104), int64] */;
  %917 = shape_of(%915, dtype="int32") /* ty=Tensor[(2), int32] */;
  %918 = cast(%915, dtype="int64") /* ty=Tensor[(5, 104), int64] */;
  %919 = dyn.reshape(%916, %917, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %920 = %914.0;
  %921 = left_shift(%918, %919) /* ty=Tensor[(5, 104), int64] */;
  (%920, %921)
}

def @func_8943(%var_8938: Tensor[(8, 1), uint32]) -> (Tensor[(14, 14, 9), bool], Tensor[(6, 10, ?), uint8], Tensor[(8, 1), uint32], Tensor[(48), uint32]) {
  %922 = cast(%var_8938, dtype="uint32") /* ty=Tensor[(8, 1), uint32] */;
  %923 = cast(meta[relay.Constant][39] /* ty=Tensor[(48), uint32] */, dtype="uint32") /* ty=Tensor[(48), uint32] */;
  %924 = reshape(%922, newshape=[4, 2, 1]) /* ty=Tensor[(4, 2, 1), uint32] */;
  %925 = reshape(%923, newshape=[4, 2, 6]) /* ty=Tensor[(4, 2, 6), uint32] */;
  %926 = @func_1293(%924, %925) /* ty=(Tensor[(4, 2, 6), uint32], Tensor[(6, 10, ?), uint8], Tensor[(60), float32], Tensor[(15, 12, 12), float32], Tensor[(2160), float32]) */;
  %927 = @func_3379() /* ty=Tensor[(14, 14, 9), bool] */;
  %928 = %926.1;
  (%927, %928, %var_8938, meta[relay.Constant][39] /* ty=Tensor[(48), uint32] */)
}

def @func_2722() -> Tensor[(14, 14, 9), float64] {
  %929 = @func_1605() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %929.0
}

def @func_9659() -> (Tensor[(14, 14, 9), float32], Tensor[(14, 14, 9), float64]) {
  %930 = @func_5236() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(3, 15, 3), float64], Tensor[(135), float64], Tensor[(14, 14, 9), float32], Tensor[(5, 104), uint64]) */;
  %931 = @func_8867() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %932 = %930.3;
  %933 = %931.0;
  (%932, %933)
}

def @func_3247() -> (Tensor[(520), float64],) {
  %934 = @func_2775() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(13, 5, 8), float64], Tensor[(520), float64]) */;
  %935 = %934.2;
  (%935,)
}

def @func_9727(%var_9684: Tensor[(60), float32]) -> (Tensor[(14, 14, 9), float64], Tensor[(520), float32], Tensor[(60), float32], Tensor[(14, 14, 9), float64], Tensor[(13, 5, 8), float64], Tensor[(6, 10, 135), bool], Tensor[(16, 4, 5), int16], Tensor[(320), float32]) {
  %936 = @func_6540() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */;
  %937 = @func_1908() /* ty=(Tensor[(14, 14, 9), float32], Tensor[(14, 14, 9), float64]) */;
  %938 = @func_9560() /* ty=(Tensor[(13, 5, 8), float64], Tensor[(36), bool]) */;
  %939 = cast(meta[relay.Constant][40] /* ty=Tensor[(520), float32] */, dtype="float32") /* ty=Tensor[(520), float32] */;
  %940 = reshape(%939, newshape=[13, 5, 8]) /* ty=Tensor[(13, 5, 8), float32] */;
  %941 = @func_6161(%940) /* ty=(Tensor[(135), float64], Tensor[(13, 5, 8), int64]) */;
  %942 = %941.0;
  %943 = cast(%var_9684, dtype="float32") /* ty=Tensor[(60), float32] */;
  %944 = reshape(%943, newshape=[6, 10, 1]) /* ty=Tensor[(6, 10, 1), float32] */;
  %945 = @func_46(%944) /* ty=(Tensor[(6, 10, ?), uint8],) */;
  %946 = %945.0;
  %947 = cast(%942, dtype="bool") /* ty=Tensor[(135), bool] */;
  %948 = cast(%946, dtype="bool") /* ty=Tensor[(6, 10, ?), bool] */;
  %949 = cast(meta[relay.Constant][41] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %950 = reshape(%949, newshape=[16, 4, 5]) /* ty=Tensor[(16, 4, 5), float32] */;
  %951 = @func_8434(%950) /* ty=(Tensor[(16, 4, 5), int16],) */;
  %952 = %936.2;
  %953 = %937.1;
  %954 = %938.0;
  %955 = greater_equal(%947, %948) /* ty=Tensor[(6, 10, 135), bool] */;
  %956 = %951.0;
  (%952, meta[relay.Constant][40] /* ty=Tensor[(520), float32] */, %var_9684, %953, %954, %955, %956, meta[relay.Constant][41] /* ty=Tensor[(320), float32] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_9020(%var_9018: float64) -> (Tensor[(7, 9, 8), float64], Tensor[(14, 14, 9), float64]) {
  @func_9017(%var_9018) /* ty=(Tensor[(7, 9, 8), float64], Tensor[(14, 14, 9), float64]) */
}

def @func_2406() -> (Tensor[(14, 14, 9), bool], Tensor[(520), float64]) {
  @func_2404() /* ty=(Tensor[(14, 14, 9), bool], Tensor[(520), float64]) */
}

def @func_5691() -> Tensor[(14, 14, 9), float64] {
  @func_5689() /* ty=Tensor[(14, 14, 9), float64] */
}

def @func_10120(%var_10117: Tensor[(7, 13, 5), float64], %var_10118: Tensor[(135), float64], %var_10119: Tensor[(210), int32]) -> (Tensor[(14, 14, 9), bool], Tensor[(8), uint32], Tensor[(3, 15, 3), float64], Tensor[(135), float64], Tensor[(14, 14, 9), float64], Tensor[(1080, 2), float32], Tensor[(14, 14, 9), float64], Tensor[(210), int32], Tensor[(7, 13, 5), float32], Tensor[(14, 14, 9), float64], Tensor[(7, 13, 5), float64]) {
  %26 = fn (%var_10043: Tensor[(7, 13, 5), float64], %var_10063: Tensor[(135), float64], %var_10095: Tensor[(210), int32]) -> (Tensor[(14, 14, 9), bool], Tensor[(8), uint32], Tensor[(3, 15, 3), float64], Tensor[(135), float64], Tensor[(14, 14, 9), float64], Tensor[(1080, 2), float32], Tensor[(14, 14, 9), float64], Tensor[(210), int32], Tensor[(7, 13, 5), float32], Tensor[(14, 14, 9), float64], Tensor[(7, 13, 5), float64]) {
    %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(8), uint32] */, dtype="uint32") /* ty=Tensor[(8), uint32] */;
    %1 = reshape(%0, newshape=[8, 1]) /* ty=Tensor[(8, 1), uint32] */;
    %2 = @func_8943(%1) /* ty=(Tensor[(14, 14, 9), bool], Tensor[(6, 10, ?), uint8], Tensor[(8, 1), uint32], Tensor[(48), uint32]) */;
    %3 = cast(%var_10063, dtype="float64") /* ty=Tensor[(135), float64] */;
    %4 = reshape(%3, newshape=[135]) /* ty=Tensor[(135), float64] */;
    %5 = @func_8171(%4) /* ty=(Tensor[(14, 14, 9), bool], Tensor[(135), float64], Tensor[(3, 15, 3), float64]) */;
    %6 = cast(meta[relay.Constant][1] /* ty=Tensor[(1080, 2), float32] */, dtype="float32") /* ty=Tensor[(1080, 2), float32] */;
    %7 = reshape(%6, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
    %8 = @func_1640(%7) /* ty=(Tensor[(14, 14, 9), float64], Tensor[(6, 10, ?), uint8], Tensor[(60), float32], Tensor[(15, 12, 12), float32], Tensor[(2160), float32], Tensor[(14, 14, 9), float64]) */;
    %9 = cast(%var_10095, dtype="int32") /* ty=Tensor[(210), int32] */;
    %10 = reshape(%9, newshape=[1, 15, 14]) /* ty=Tensor[(1, 15, 14), int32] */;
    %11 = @func_5399(%10) /* ty=(Tensor[(2, 15, 14), int32], Tensor[(14, 14, 9), float64]) */;
    %12 = cast(%var_10043, dtype="float64") /* ty=Tensor[(7, 13, 5), float64] */;
    %13 = asinh(%12) /* ty=Tensor[(7, 13, 5), float64] */;
    %14 = cast(%13, dtype="float32") /* ty=Tensor[(7, 13, 5), float32] */;
    %15 = @func_6333() /* ty=(Tensor[(14, 14, 9), float64],) */;
    %16 = cast(%13, dtype="float64") /* ty=Tensor[(7, 13, 5), float64] */;
    %17 = rsqrt(%16) /* ty=Tensor[(7, 13, 5), float64] */;
    %18 = cast(%17, dtype="float64") /* ty=Tensor[(7, 13, 5), float64] */;
    %19 = %2.0;
    %20 = %5.2;
    %21 = %8.0;
    %22 = %11.1;
    %23 = sinh(%14) /* ty=Tensor[(7, 13, 5), float32] */;
    %24 = %15.0;
    %25 = log(%18) /* ty=Tensor[(7, 13, 5), float64] */;
    (%19, meta[relay.Constant][0] /* ty=Tensor[(8), uint32] */, %20, %var_10063, %21, meta[relay.Constant][1] /* ty=Tensor[(1080, 2), float32] */, %22, %var_10095, %23, %24, %25)
  };
  %26(%var_10117, %var_10118, %var_10119) /* ty=(Tensor[(14, 14, 9), bool], Tensor[(8), uint32], Tensor[(3, 15, 3), float64], Tensor[(135), float64], Tensor[(14, 14, 9), float64], Tensor[(1080, 2), float32], Tensor[(14, 14, 9), float64], Tensor[(210), int32], Tensor[(7, 13, 5), float32], Tensor[(14, 14, 9), float64], Tensor[(7, 13, 5), float64]) */
}

def @func_6062() -> Tensor[(14, 14, 9), float64] {
  @func_6060() /* ty=Tensor[(14, 14, 9), float64] */
}

def @func_10626(%var_10624: Tensor[(1, 2, 8), float32], %var_10625: Tensor[(2, 2, 8), float32]) -> (Tensor[(520), float64], Tensor[(14, 14, 9), float64], Tensor[(?, 2, 8), int64], Tensor[(2, 2, 8), bool]) {
  %45 = fn (%var_10546: Tensor[(1, 2, 8), float32], %var_10588: Tensor[(2, 2, 8), float32]) -> (Tensor[(520), float64], Tensor[(14, 14, 9), float64], Tensor[(?, 2, 8), int64], Tensor[(2, 2, 8), bool]) {
    %27 = @func_4953() /* ty=(Tensor[(14, 14, 9), float64],) */;
    %28 = cast(%var_10546, dtype="float32") /* ty=Tensor[(1, 2, 8), float32] */;
    %29 = acosh(%28) /* ty=Tensor[(1, 2, 8), float32] */;
    %30 = cast(%var_10546, dtype="float32") /* ty=Tensor[(1, 2, 8), float32] */;
    %31 = shape_of(%29, dtype="int32") /* ty=Tensor[(3), int32] */;
    %32 = cast(%29, dtype="float32") /* ty=Tensor[(1, 2, 8), float32] */;
    %33 = dyn.reshape(%30, %31, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %34 = maximum(%32, %33) /* ty=Tensor[(?, 2, 8), float32] */;
    %35 = cast(%29, dtype="int64") /* ty=Tensor[(1, 2, 8), int64] */;
    %36 = shape_of(%34, dtype="int32") /* ty=Tensor[(3), int32] */;
    %37 = cast(%34, dtype="int64") /* ty=Tensor[(?, 2, 8), int64] */;
    %38 = dyn.reshape(%35, %36, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %39 = cast(%29, dtype="bool") /* ty=Tensor[(1, 2, 8), bool] */;
    %40 = cast(%var_10588, dtype="bool") /* ty=Tensor[(2, 2, 8), bool] */;
    %41 = @func_7502() /* ty=Tensor[(520), float64] */;
    %42 = %27.0;
    %43 = bitwise_or(%37, %38) /* ty=Tensor[(?, 2, 8), int64] */;
    %44 = greater(%39, %40) /* ty=Tensor[(2, 2, 8), bool] */;
    (%41, %42, %43, %44)
  };
  %45(%var_10624, %var_10625) /* ty=(Tensor[(520), float64], Tensor[(14, 14, 9), float64], Tensor[(?, 2, 8), int64], Tensor[(2, 2, 8), bool]) */
}

def @func_6875() -> (Tensor[(14, 14, 9), float64], Tensor[(30, 2), float32], Tensor[(3, 12), bool]) {
  @func_6873() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(30, 2), float32], Tensor[(3, 12), bool]) */
}

def @func_4733(%var_4731: Tensor[(1764, 1), float64]) -> (Tensor[(520), float64], Tensor[(14, 14, 9), bool], Tensor[(1764, 1), float64]) {
  @func_4730(%var_4731) /* ty=(Tensor[(520), float64], Tensor[(14, 14, 9), bool], Tensor[(1764, 1), float64]) */
}

def @func_10443() -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(3, 15, 3), float64], Tensor[(135), float64]) {
  @func_10441() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(3, 15, 3), float64], Tensor[(135), float64]) */
}

def @func_4840(%var_4839: Tensor[(360, 6), float32]) -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(360, 6), int8]) {
  %60 = fn (%var_4823: Tensor[(360, 6), float32]) -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(360, 6), int8]) {
    %46 = @func_1734() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */;
    %47 = @func_4205() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */;
    %48 = cast(%var_4823, dtype="float32") /* ty=Tensor[(360, 6), float32] */;
    %49 = cast(%var_4823, dtype="float32") /* ty=Tensor[(360, 6), float32] */;
    %50 = reshape(%48, newshape=[15, 12, 12]) /* ty=Tensor[(15, 12, 12), float32] */;
    %51 = reshape(%49, newshape=[15, 12, 12]) /* ty=Tensor[(15, 12, 12), float32] */;
    %52 = @func_1090(%50, %51) /* ty=Tensor[(15, 12, 12), float32] */;
    %53 = cast(%52, dtype="int8") /* ty=Tensor[(15, 12, 12), int8] */;
    %54 = shape_of(%var_4823, dtype="int32") /* ty=Tensor[(2), int32] */;
    %55 = cast(%var_4823, dtype="int8") /* ty=Tensor[(360, 6), int8] */;
    %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
    %57 = %46.0;
    %58 = %47.2;
    %59 = minimum(%55, %56) /* ty=Tensor[(360, 6), int8] */;
    (%57, %58, %59)
  };
  %60(%var_4839) /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(360, 6), int8]) */
}

def @func_6335() -> (Tensor[(14, 14, 9), float64],) {
  @func_6333() /* ty=(Tensor[(14, 14, 9), float64],) */
}

def @func_7193(%var_7106: int8, %var_7107: Tensor[(4, 1, 9), int8]) -> (Tensor[(520), float64], Tensor[(14, 14, 9), float64], Tensor[(4, ?, 9), float32], Tensor[(14, 2, 15), bool], Tensor[(14, 14, 9), float64], Tensor[(4, 1, 9), float32], Tensor[(14, 14, 9), bool], Tensor[(3, 15, 3), float64], Tensor[(3, 45), float64]) {
  %61 = @func_2904() /* ty=(Tensor[(36), bool],) */;
  %62 = %61.0;
  %63 = cast(%62, dtype="float32") /* ty=Tensor[(36), float32] */;
  %64 = shape_of(%var_7107, dtype="int32") /* ty=Tensor[(3), int32] */;
  %65 = cast(%var_7107, dtype="float32") /* ty=Tensor[(4, 1, 9), float32] */;
  %66 = dyn.reshape(%63, %64, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %67 = @func_6362() /* ty=(Tensor[(14, 2, 15), bool],) */;
  %68 = @func_4168() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %69 = cast(%var_7106, dtype="int8") /* ty=int8 */;
  %70 = cast(%var_7107, dtype="int8") /* ty=Tensor[(4, 1, 9), int8] */;
  %71 = logical_xor(%69, %70) /* ty=Tensor[(4, 1, 9), int8] */;
  %72 = cast(%71, dtype="float64") /* ty=Tensor[(4, 1, 9), float64] */;
  %73 = sigmoid(%72) /* ty=Tensor[(4, 1, 9), float64] */;
  %74 = cast(%73, dtype="float32") /* ty=Tensor[(4, 1, 9), float32] */;
  %75 = cast(meta[relay.Constant][2] /* ty=Tensor[(3, 45), float64] */, dtype="float64") /* ty=Tensor[(3, 45), float64] */;
  %76 = reshape(%75, newshape=[3, 15, 3]) /* ty=Tensor[(3, 15, 3), float64] */;
  %77 = @func_2365() /* ty=Tensor[(520), float64] */;
  %78 = @func_3658() /* ty=Tensor[(14, 14, 9), float64] */;
  %79 = floor_mod(%65, %66) /* ty=Tensor[(4, ?, 9), float32] */;
  %80 = %67.0;
  %81 = %68.0;
  %82 = acos(%74) /* ty=Tensor[(4, 1, 9), float32] */;
  %83 = @func_3379() /* ty=Tensor[(14, 14, 9), bool] */;
  %84 = @func_2503(%76) /* ty=Tensor[(3, 15, 3), float64] */;
  (%77, %78, %79, %80, %81, %82, %83, %84, meta[relay.Constant][2] /* ty=Tensor[(3, 45), float64] */)
}

def @func_8284() -> (Tensor[(14, 14, 9), float64],) {
  %85 = @func_7045() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %86 = %85.0;
  (%86,)
}

def @func_4143(%var_4141: Tensor[(8, 15, 1), bool]) -> (Tensor[(8, 15, 14), bool], Tensor[(14, 14, 9), float32], Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) {
  @func_4140(%var_4141) /* ty=(Tensor[(8, 15, 14), bool], Tensor[(14, 14, 9), float32], Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */
}

def @func_6799(%var_6797: Tensor[(135), float64]) -> (Tensor[(14, 14, 9), float64], Tensor[(135), float64], Tensor[(3, 15, 3), float32]) {
  @func_6796(%var_6797) /* ty=(Tensor[(14, 14, 9), float64], Tensor[(135), float64], Tensor[(3, 15, 3), float32]) */
}

def @func_5067() -> (Tensor[(14, 14, 9), float64],) {
  %87 = @func_1908() /* ty=(Tensor[(14, 14, 9), float32], Tensor[(14, 14, 9), float64]) */;
  %88 = %87.1;
  (%88,)
}

def @func_2417() -> (Tensor[(14, 14, 9), float64],) {
  @func_2415() /* ty=(Tensor[(14, 14, 9), float64],) */
}

def @func_6230(%var_6229: Tensor[(4, 16, 8), float64]) -> (Tensor[(4, 16, 8), float64],) {
  %91 = fn (%var_6224: Tensor[(4, 16, 8), float64]) -> (Tensor[(4, 16, 8), float64],) {
    %89 = cast(%var_6224, dtype="float64") /* ty=Tensor[(4, 16, 8), float64] */;
    %90 = sinh(%89) /* ty=Tensor[(4, 16, 8), float64] */;
    (%90,)
  };
  %91(%var_6229) /* ty=(Tensor[(4, 16, 8), float64],) */
}

def @func_6212(%var_6210: Tensor[(60), float32]) -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(60), float32], Tensor[(6, 10, 520), int8]) {
  @func_6209(%var_6210) /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(60), float32], Tensor[(6, 10, 520), int8]) */
}

def @func_7484() -> (Tensor[(14, 14, 9), float64],) {
  %92 = @func_1605() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %93 = %92.0;
  (%93,)
}

def @func_8705() -> Tensor[(14, 2, 15), bool] {
  @func_8703() /* ty=Tensor[(14, 2, 15), bool] */
}

def @func_1093(%var_1091: Tensor[(15, 12, 12), float32], %var_1092: Tensor[(15, 12, 12), float32]) -> Tensor[(15, 12, 12), float32] {
  %98 = fn (%var_1082: Tensor[(15, 12, 12), float32], %var_1083: Tensor[(15, 12, 12), float32]) -> Tensor[(15, 12, 12), float32] {
    %94 = cast(%var_1083, dtype="float32") /* ty=Tensor[(15, 12, 12), float32] */;
    %95 = shape_of(%var_1082, dtype="int32") /* ty=Tensor[(3), int32] */;
    %96 = cast(%var_1082, dtype="float32") /* ty=Tensor[(15, 12, 12), float32] */;
    %97 = dyn.reshape(%94, %95, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    floor_mod(%96, %97) /* ty=Tensor[(15, 12, 12), float32] */
  };
  %98(%var_1091, %var_1092) /* ty=Tensor[(15, 12, 12), float32] */
}

def @func_440(%var_437: Tensor[(8, 2, 5), bool], %var_438: Tensor[(8, 2, 5), bool], %var_439: Tensor[(15, 4), float32]) -> (Tensor[(8, 2, 5), bool], Tensor[(6, 10, ?), uint8], Tensor[(15, 4), float32]) {
  %108 = fn (%var_419: Tensor[(8, 2, 5), bool], %var_420: Tensor[(8, 2, 5), bool], %var_434: Tensor[(15, 4), float32]) -> (Tensor[(8, 2, 5), bool], Tensor[(6, 10, ?), uint8], Tensor[(15, 4), float32]) {
    %99 = cast(%var_420, dtype="bool") /* ty=Tensor[(8, 2, 5), bool] */;
    %100 = shape_of(%var_419, dtype="int32") /* ty=Tensor[(3), int32] */;
    %101 = cast(%var_419, dtype="bool") /* ty=Tensor[(8, 2, 5), bool] */;
    %102 = dyn.reshape(%99, %100, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %103 = cast(%var_434, dtype="float32") /* ty=Tensor[(15, 4), float32] */;
    %104 = reshape(%103, newshape=[6, 10, 1]) /* ty=Tensor[(6, 10, 1), float32] */;
    %105 = @func_46(%104) /* ty=(Tensor[(6, 10, ?), uint8],) */;
    %106 = logical_or(%101, %102) /* ty=Tensor[(8, 2, 5), bool] */;
    %107 = %105.0;
    (%106, %107, %var_434)
  };
  %108(%var_437, %var_438, %var_439) /* ty=(Tensor[(8, 2, 5), bool], Tensor[(6, 10, ?), uint8], Tensor[(15, 4), float32]) */
}

def @func_2503(%var_2497: Tensor[(3, 15, 3), float64]) -> Tensor[(3, 15, 3), float64] {
  %109 = cast(%var_2497, dtype="float64") /* ty=Tensor[(3, 15, 3), float64] */;
  log(%109) /* ty=Tensor[(3, 15, 3), float64] */
}

def @func_7453(%var_7451: Tensor[(60), float32]) -> (Tensor[(520), float64], Tensor[(6, 10, 520), int8], Tensor[(60), float32]) {
  @func_7450(%var_7451) /* ty=(Tensor[(520), float64], Tensor[(6, 10, 520), int8], Tensor[(60), float32]) */
}

def @func_2025(%var_2017: Tensor[(16, 6, 9), int64], %var_2018: Tensor[(16, 6, 9), int64]) -> Tensor[(16, 6, 9), int64] {
  %110 = cast(%var_2018, dtype="int64") /* ty=Tensor[(16, 6, 9), int64] */;
  %111 = shape_of(%var_2017, dtype="int32") /* ty=Tensor[(3), int32] */;
  %112 = cast(%var_2017, dtype="int64") /* ty=Tensor[(16, 6, 9), int64] */;
  %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  minimum(%112, %113) /* ty=Tensor[(16, 6, 9), int64] */
}

def @func_7412() -> Tensor[(14, 14, 9), float64] {
  @func_7410() /* ty=Tensor[(14, 14, 9), float64] */
}

def @func_7889() -> (Tensor[(14, 14, 9), float32],) {
  %114 = @func_4592() /* ty=Tensor[(14, 14, 9), float32] */;
  (%114,)
}

def @func_9659() -> (Tensor[(14, 14, 9), float32], Tensor[(14, 14, 9), float64]) {
  %115 = @func_5236() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(3, 15, 3), float64], Tensor[(135), float64], Tensor[(14, 14, 9), float32], Tensor[(5, 104), uint64]) */;
  %116 = @func_8867() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %117 = %115.3;
  %118 = %116.0;
  (%117, %118)
}

def @func_8974(%var_8972: Tensor[(7, 2, 2), uint16], %var_8973: Tensor[(7, 2, 2), uint16]) -> (Tensor[(7, 2, 2), bool],) {
  @func_8970(%var_8972, %var_8973) /* ty=(Tensor[(7, 2, 2), bool],) */
}

def @func_9808(%var_9806: Tensor[(60), float32]) -> (Tensor[(14, 14, 9), float64], Tensor[(520), float64], Tensor[(60), float32]) {
  @func_9805(%var_9806) /* ty=(Tensor[(14, 14, 9), float64], Tensor[(520), float64], Tensor[(60), float32]) */
}

def @func_7763() -> (Tensor[(30, 2), float32], Tensor[(14, 14, 9), float64]) {
  @func_7761() /* ty=(Tensor[(30, 2), float32], Tensor[(14, 14, 9), float64]) */
}

def @func_5661() -> (Tensor[(520), float64],) {
  %119 = @func_2626() /* ty=Tensor[(520), float64] */;
  (%119,)
}

def @func_2233(%var_2232: Tensor[(14, 14, 9), float64]) -> Tensor[(14, 14, 9), float64] {
  %126 = fn (%var_2220: Tensor[(14, 14, 9), float64]) -> Tensor[(14, 14, 9), float64] {
    %120 = @func_1908() /* ty=(Tensor[(14, 14, 9), float32], Tensor[(14, 14, 9), float64]) */;
    %121 = %120.1;
    %122 = cast(%var_2220, dtype="float64") /* ty=Tensor[(14, 14, 9), float64] */;
    %123 = shape_of(%121, dtype="int32") /* ty=Tensor[(3), int32] */;
    %124 = cast(%121, dtype="float64") /* ty=Tensor[(14, 14, 9), float64] */;
    %125 = dyn.reshape(%122, %123, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    mod(%124, %125) /* ty=Tensor[(14, 14, 9), float64] */
  };
  %126(%var_2232) /* ty=Tensor[(14, 14, 9), float64] */
}

def @func_1997() -> (Tensor[(14, 14, 9), float64],) {
  %127 = @func_1952() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %128 = %127.0;
  (%128,)
}

def @func_5788(%var_5786: Tensor[(6, 10, 5), float64], %var_5787: Tensor[(6, 10, 5), float64]) -> (Tensor[(6, 10, 5), float64], Tensor[(6, 10, 5), float64], Tensor[(14, 14, 9), float32], Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) {
  @func_5784(%var_5786, %var_5787) /* ty=(Tensor[(6, 10, 5), float64], Tensor[(6, 10, 5), float64], Tensor[(14, 14, 9), float32], Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */
}

def @func_8946(%var_8944: Tensor[(8, 1), uint32]) -> (Tensor[(14, 14, 9), bool], Tensor[(6, 10, ?), uint8], Tensor[(8, 1), uint32], Tensor[(48), uint32]) {
  @func_8943(%var_8944) /* ty=(Tensor[(14, 14, 9), bool], Tensor[(6, 10, ?), uint8], Tensor[(8, 1), uint32], Tensor[(48), uint32]) */
}

def @func_9401() -> (Tensor[(36), bool], Tensor[(36), bool], Tensor[(14, 14, 9), float64]) {
  %129 = @func_2904() /* ty=(Tensor[(36), bool],) */;
  %130 = %129.0;
  %131 = cast(%130, dtype="bool") /* ty=Tensor[(36), bool] */;
  %132 = reshape(%131, newshape=[36]) /* ty=Tensor[(36), bool] */;
  %133 = @func_1802(%132) /* ty=(Tensor[(14, 14, 9), float64], Tensor[(2, 12, 3), bool], Tensor[(36), bool], Tensor[(72), bool], Tensor[(30, 2), float32]) */;
  %134 = %133.2;
  %135 = @func_8688() /* ty=Tensor[(14, 14, 9), float64] */;
  (%130, %134, %135)
}

def @func_9532(%var_9530: Tensor[(1, 4, 4), float32], %var_9531: Tensor[(1, 4, 4), float32]) -> (Tensor[(?, 4, 4), bool], Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) {
  %146 = fn (%var_9501: Tensor[(1, 4, 4), float32], %var_9502: Tensor[(1, 4, 4), float32]) -> (Tensor[(?, 4, 4), bool], Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) {
    %136 = cast(%var_9502, dtype="bool") /* ty=Tensor[(1, 4, 4), bool] */;
    %137 = shape_of(%var_9501, dtype="int32") /* ty=Tensor[(3), int32] */;
    %138 = cast(%var_9501, dtype="bool") /* ty=Tensor[(1, 4, 4), bool] */;
    %139 = dyn.reshape(%136, %137, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %140 = @func_9401() /* ty=(Tensor[(36), bool], Tensor[(36), bool], Tensor[(14, 14, 9), float64]) */;
    %141 = %140.2;
    %142 = cast(%141, dtype="float64") /* ty=Tensor[(14, 14, 9), float64] */;
    %143 = reshape(%142, newshape=[14, 14, 9]) /* ty=Tensor[(14, 14, 9), float64] */;
    %144 = equal(%138, %139) /* ty=Tensor[(?, 4, 4), bool] */;
    %145 = @func_2231(%143) /* ty=Tensor[(14, 14, 9), float64] */;
    (%144, %141, %145)
  };
  %146(%var_9530, %var_9531) /* ty=(Tensor[(?, 4, 4), bool], Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */
}

def @func_9297() -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), bool]) {
  %147 = @func_7069() /* ty=(Tensor[(520), float64], Tensor[(36), bool], Tensor[(14, 14, 9), bool]) */;
  %148 = @func_7104() /* ty=Tensor[(14, 14, 9), float64] */;
  %149 = %147.2;
  (%148, %149)
}

def @main(%var_10822: Tensor[(3, 3, 13), bool], %var_10823: Tensor[(3, 3, 13), bool]) -> (Tensor[(3, 3, 13), bool],) {
  %150 = cast(%var_10823, dtype="bool") /* ty=Tensor[(3, 3, 13), bool] */;
  %151 = shape_of(%var_10822, dtype="int32") /* ty=Tensor[(3), int32] */;
  %152 = cast(%var_10822, dtype="bool") /* ty=Tensor[(3, 3, 13), bool] */;
  %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %154 = logical_or(%152, %153) /* ty=Tensor[(3, 3, 13), bool] */;
  (%154,)
}

def @func_5650(%var_5648: Tensor[(14, 14, 9), float64]) -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), int8], Tensor[(6, 10, ?), uint8], Tensor[(2160), float32]) {
  @func_5647(%var_5648) /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), int8], Tensor[(6, 10, ?), uint8], Tensor[(2160), float32]) */
}

def @func_2404() -> (Tensor[(14, 14, 9), bool], Tensor[(520), float64]) {
  %155 = @func_1908() /* ty=(Tensor[(14, 14, 9), float32], Tensor[(14, 14, 9), float64]) */;
  %156 = %155.0;
  %157 = cast(meta[relay.Constant][3] /* ty=Tensor[(14, 14, 9), float32] */, dtype="bool") /* ty=Tensor[(14, 14, 9), bool] */;
  %158 = shape_of(%156, dtype="int32") /* ty=Tensor[(3), int32] */;
  %159 = cast(%156, dtype="bool") /* ty=Tensor[(14, 14, 9), bool] */;
  %160 = dyn.reshape(%157, %158, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %161 = equal(%159, %160) /* ty=Tensor[(14, 14, 9), bool] */;
  %162 = @func_2365() /* ty=Tensor[(520), float64] */;
  (%161, %162)
}

def @func_3419() -> (Tensor[(36), bool],) {
  %165 = fn () -> (Tensor[(36), bool],) {
    %163 = @func_2904() /* ty=(Tensor[(36), bool],) */;
    %164 = %163.0;
    (%164,)
  };
  %165() /* ty=(Tensor[(36), bool],) */
}

def @func_3660() -> Tensor[(14, 14, 9), float64] {
  @func_3658() /* ty=Tensor[(14, 14, 9), float64] */
}

def @func_10462() -> (Tensor[(5, 104), uint64],) {
  %167 = fn () -> (Tensor[(5, 104), uint64],) {
    %166 = @func_6220() /* ty=Tensor[(5, 104), uint64] */;
    (%166,)
  };
  %167() /* ty=(Tensor[(5, 104), uint64],) */
}

def @func_5794() -> Tensor[(520), float64] {
  @func_5792() /* ty=Tensor[(520), float64] */
}

def @func_9727(%var_9684: Tensor[(60), float32]) -> (Tensor[(14, 14, 9), float64], Tensor[(520), float32], Tensor[(60), float32], Tensor[(14, 14, 9), float64], Tensor[(13, 5, 8), float64], Tensor[(6, 10, 135), bool], Tensor[(16, 4, 5), int16], Tensor[(320), float32]) {
  %168 = @func_6540() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */;
  %169 = @func_1908() /* ty=(Tensor[(14, 14, 9), float32], Tensor[(14, 14, 9), float64]) */;
  %170 = @func_9560() /* ty=(Tensor[(13, 5, 8), float64], Tensor[(36), bool]) */;
  %171 = cast(meta[relay.Constant][4] /* ty=Tensor[(520), float32] */, dtype="float32") /* ty=Tensor[(520), float32] */;
  %172 = reshape(%171, newshape=[13, 5, 8]) /* ty=Tensor[(13, 5, 8), float32] */;
  %173 = @func_6161(%172) /* ty=(Tensor[(135), float64], Tensor[(13, 5, 8), int64]) */;
  %174 = %173.0;
  %175 = cast(%var_9684, dtype="float32") /* ty=Tensor[(60), float32] */;
  %176 = reshape(%175, newshape=[6, 10, 1]) /* ty=Tensor[(6, 10, 1), float32] */;
  %177 = @func_46(%176) /* ty=(Tensor[(6, 10, ?), uint8],) */;
  %178 = %177.0;
  %179 = cast(%174, dtype="bool") /* ty=Tensor[(135), bool] */;
  %180 = cast(%178, dtype="bool") /* ty=Tensor[(6, 10, ?), bool] */;
  %181 = cast(meta[relay.Constant][5] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %182 = reshape(%181, newshape=[16, 4, 5]) /* ty=Tensor[(16, 4, 5), float32] */;
  %183 = @func_8434(%182) /* ty=(Tensor[(16, 4, 5), int16],) */;
  %184 = %168.2;
  %185 = %169.1;
  %186 = %170.0;
  %187 = greater_equal(%179, %180) /* ty=Tensor[(6, 10, 135), bool] */;
  %188 = %183.0;
  (%184, meta[relay.Constant][4] /* ty=Tensor[(520), float32] */, %var_9684, %185, %186, %187, %188, meta[relay.Constant][5] /* ty=Tensor[(320), float32] */)
}

def @func_8364() -> (Tensor[(14, 14, 9), float64], Tensor[(520), float64], Tensor[(520), float64], Tensor[(14, 14, 9), float32], Tensor[(520), float64]) {
  %198 = fn () -> (Tensor[(14, 14, 9), float64], Tensor[(520), float64], Tensor[(520), float64], Tensor[(14, 14, 9), float32], Tensor[(520), float64]) {
    %189 = @func_4953() /* ty=(Tensor[(14, 14, 9), float64],) */;
    %190 = @func_7254() /* ty=(Tensor[(520), float64],) */;
    %191 = @func_2201() /* ty=(Tensor[(14, 14, 9), float32],) */;
    %192 = @func_2404() /* ty=(Tensor[(14, 14, 9), bool], Tensor[(520), float64]) */;
    %193 = %189.0;
    %194 = %190.0;
    %195 = @func_5792() /* ty=Tensor[(520), float64] */;
    %196 = %191.0;
    %197 = %192.1;
    (%193, %194, %195, %196, %197)
  };
  %198() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(520), float64], Tensor[(520), float64], Tensor[(14, 14, 9), float32], Tensor[(520), float64]) */
}

def @func_4578(%var_4577: Tensor[(14, 14, 9), float64]) -> (Tensor[(14, 14, 9), bool], Tensor[(36), bool], Tensor[(14, 14, 9), float32]) {
  %210 = fn (%var_4539: Tensor[(14, 14, 9), float64]) -> (Tensor[(14, 14, 9), bool], Tensor[(36), bool], Tensor[(14, 14, 9), float32]) {
    %199 = @func_2917() /* ty=(Tensor[(14, 14, 9), float64],) */;
    %200 = %199.0;
    %201 = cast(%var_4539, dtype="bool") /* ty=Tensor[(14, 14, 9), bool] */;
    %202 = shape_of(%200, dtype="int32") /* ty=Tensor[(3), int32] */;
    %203 = cast(%200, dtype="bool") /* ty=Tensor[(14, 14, 9), bool] */;
    %204 = dyn.reshape(%201, %202, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %205 = @func_3906() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(36), bool], Tensor[(36), bool], Tensor[(14, 14, 9), bool], Tensor[(14, 14, 9), float64], Tensor[(2160), float64]) */;
    %206 = @func_2201() /* ty=(Tensor[(14, 14, 9), float32],) */;
    %207 = not_equal(%203, %204) /* ty=Tensor[(14, 14, 9), bool] */;
    %208 = %205.2;
    %209 = %206.0;
    (%207, %208, %209)
  };
  %210(%var_4577) /* ty=(Tensor[(14, 14, 9), bool], Tensor[(36), bool], Tensor[(14, 14, 9), float32]) */
}

def @func_2151() -> (Tensor[(14, 14, 9), float64], Tensor[(72), bool], Tensor[(36), bool], Tensor[(14, 14, 9), float64], Tensor[(2160), float32], Tensor[(5, 104), float64], Tensor[(520), float64]) {
  %211 = @func_1605() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %212 = cast(meta[relay.Constant][6] /* ty=Tensor[(36), bool] */, dtype="bool") /* ty=Tensor[(36), bool] */;
  %213 = reshape(%212, newshape=[36]) /* ty=Tensor[(36), bool] */;
  %214 = @func_1802(%213) /* ty=(Tensor[(14, 14, 9), float64], Tensor[(2, 12, 3), bool], Tensor[(36), bool], Tensor[(72), bool], Tensor[(30, 2), float32]) */;
  %215 = cast(meta[relay.Constant][7] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %216 = reshape(%215, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
  %217 = @func_1640(%216) /* ty=(Tensor[(14, 14, 9), float64], Tensor[(6, 10, ?), uint8], Tensor[(60), float32], Tensor[(15, 12, 12), float32], Tensor[(2160), float32], Tensor[(14, 14, 9), float64]) */;
  %218 = cast(meta[relay.Constant][8] /* ty=Tensor[(520), float64] */, dtype="float64") /* ty=Tensor[(520), float64] */;
  %219 = reshape(%218, newshape=[5, 104]) /* ty=Tensor[(5, 104), float64] */;
  %220 = @func_1845(%219) /* ty=(Tensor[(14, 14, 9), float32], Tensor[(13, 5, 8), float64], Tensor[(5, 104), float64]) */;
  %221 = %211.0;
  %222 = %214.3;
  %223 = %217.0;
  %224 = %220.2;
  (%221, %222, meta[relay.Constant][6] /* ty=Tensor[(36), bool] */, %223, meta[relay.Constant][7] /* ty=Tensor[(2160), float32] */, %224, meta[relay.Constant][8] /* ty=Tensor[(520), float64] */)
}

def @func_5236() -> (Tensor[(14, 14, 9), float64], Tensor[(3, 15, 3), float64], Tensor[(135), float64], Tensor[(14, 14, 9), float32], Tensor[(5, 104), uint64]) {
  %225 = @func_5043() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */;
  %226 = cast(meta[relay.Constant][9] /* ty=Tensor[(135), float64] */, dtype="float64") /* ty=Tensor[(135), float64] */;
  %227 = reshape(%226, newshape=[3, 15, 3]) /* ty=Tensor[(3, 15, 3), float64] */;
  %228 = @func_2201() /* ty=(Tensor[(14, 14, 9), float32],) */;
  %229 = @func_5170() /* ty=(Tensor[(5, 104), uint64],) */;
  %230 = %225.0;
  %231 = @func_2503(%227) /* ty=Tensor[(3, 15, 3), float64] */;
  %232 = %228.0;
  %233 = %229.0;
  (%230, %231, meta[relay.Constant][9] /* ty=Tensor[(135), float64] */, %232, %233)
}

def @func_7254() -> (Tensor[(520), float64],) {
  %234 = @func_2296() /* ty=Tensor[(520), float64] */;
  (%234,)
}

def @func_5689() -> Tensor[(14, 14, 9), float64] {
  %235 = @func_5307() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %235.0
}

def @func_1953() -> (Tensor[(14, 14, 9), float64],) {
  %238 = fn () -> (Tensor[(14, 14, 9), float64],) {
    %236 = @func_1811() /* ty=(Tensor[(14, 14, 9), float64],) */;
    %237 = %236.0;
    (%237,)
  };
  %238() /* ty=(Tensor[(14, 14, 9), float64],) */
}

def @func_2202() -> (Tensor[(14, 14, 9), float32],) {
  %241 = fn () -> (Tensor[(14, 14, 9), float32],) {
    %239 = @func_1908() /* ty=(Tensor[(14, 14, 9), float32], Tensor[(14, 14, 9), float64]) */;
    %240 = %239.0;
    (%240,)
  };
  %241() /* ty=(Tensor[(14, 14, 9), float32],) */
}

def @func_6589() -> (Tensor[(14, 14, 9), float64],) {
  %242 = @func_4894() /* ty=Tensor[(14, 14, 9), float64] */;
  (%242,)
}

def @func_6873() -> (Tensor[(14, 14, 9), float64], Tensor[(30, 2), float32], Tensor[(3, 12), bool]) {
  %243 = cast(meta[relay.Constant][10] /* ty=Tensor[(3, 12), bool] */, dtype="bool") /* ty=Tensor[(3, 12), bool] */;
  %244 = reshape(%243, newshape=[36]) /* ty=Tensor[(36), bool] */;
  %245 = @func_1802(%244) /* ty=(Tensor[(14, 14, 9), float64], Tensor[(2, 12, 3), bool], Tensor[(36), bool], Tensor[(72), bool], Tensor[(30, 2), float32]) */;
  %246 = @func_4894() /* ty=Tensor[(14, 14, 9), float64] */;
  %247 = %245.4;
  (%246, %247, meta[relay.Constant][10] /* ty=Tensor[(3, 12), bool] */)
}

def @func_2366() -> Tensor[(520), float64] {
  %249 = fn () -> Tensor[(520), float64] {
    %248 = @func_2151() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(72), bool], Tensor[(36), bool], Tensor[(14, 14, 9), float64], Tensor[(2160), float32], Tensor[(5, 104), float64], Tensor[(520), float64]) */;
    %248.6
  };
  %249() /* ty=Tensor[(520), float64] */
}

def @func_5191() -> Tensor[(520), float64] {
  @func_5189() /* ty=Tensor[(520), float64] */
}

def @func_10281() -> (Tensor[(5, 104), uint64], Tensor[(14, 14, 9), float64], Tensor[(5, 104), uint64], Tensor[(30, 2), float64]) {
  %260 = fn () -> (Tensor[(5, 104), uint64], Tensor[(14, 14, 9), float64], Tensor[(5, 104), uint64], Tensor[(30, 2), float64]) {
    %250 = @func_5236() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(3, 15, 3), float64], Tensor[(135), float64], Tensor[(14, 14, 9), float32], Tensor[(5, 104), uint64]) */;
    %251 = @func_6301() /* ty=(Tensor[(14, 14, 9), float64],) */;
    %252 = @func_5170() /* ty=(Tensor[(5, 104), uint64],) */;
    %253 = @func_7534() /* ty=(Tensor[(30, 2), float64],) */;
    %254 = %253.0;
    %255 = cast(%254, dtype="float64") /* ty=Tensor[(30, 2), float64] */;
    %256 = %250.4;
    %257 = %251.0;
    %258 = %252.0;
    %259 = sin(%255) /* ty=Tensor[(30, 2), float64] */;
    (%256, %257, %258, %259)
  };
  %260() /* ty=(Tensor[(5, 104), uint64], Tensor[(14, 14, 9), float64], Tensor[(5, 104), uint64], Tensor[(30, 2), float64]) */
}

def @func_4775(%var_4774: Tensor[(6, 5, 1), float64]) -> Tensor[(6, 5, 1), float64] {
  %264 = fn (%var_4755: Tensor[(6, 5, 1), float64]) -> Tensor[(6, 5, 1), float64] {
    %261 = cast(%var_4755, dtype="float64") /* ty=Tensor[(6, 5, 1), float64] */;
    %262 = sigmoid(%261) /* ty=Tensor[(6, 5, 1), float64] */;
    %263 = cast(%262, dtype="float64") /* ty=Tensor[(6, 5, 1), float64] */;
    log10(%263) /* ty=Tensor[(6, 5, 1), float64] */
  };
  %264(%var_4774) /* ty=Tensor[(6, 5, 1), float64] */
}

def @func_4784() -> (Tensor[(5, 104), float64],) {
  %265 = @func_3097() /* ty=(Tensor[(5, 104), float64], Tensor[(14, 14, 9), float64], Tensor[(520), float64]) */;
  %266 = %265.0;
  (%266,)
}

def @func_8869() -> (Tensor[(14, 14, 9), float64],) {
  @func_8867() /* ty=(Tensor[(14, 14, 9), float64],) */
}

def @func_1606() -> (Tensor[(14, 14, 9), float64],) {
  %269 = fn () -> (Tensor[(14, 14, 9), float64],) {
    %267 = cast(meta[relay.Constant][11] /* ty=Tensor[(14, 14, 9), float64] */, dtype="float64") /* ty=Tensor[(14, 14, 9), float64] */;
    %268 = log(%267) /* ty=Tensor[(14, 14, 9), float64] */;
    (%268,)
  };
  %269() /* ty=(Tensor[(14, 14, 9), float64],) */
}

def @func_1802(%var_1788: Tensor[(36), bool]) -> (Tensor[(14, 14, 9), float64], Tensor[(2, 12, 3), bool], Tensor[(36), bool], Tensor[(72), bool], Tensor[(30, 2), float32]) {
  %270 = @func_1734() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */;
  %271 = cast(%var_1788, dtype="bool") /* ty=Tensor[(36), bool] */;
  %272 = cast(meta[relay.Constant][12] /* ty=Tensor[(72), bool] */, dtype="bool") /* ty=Tensor[(72), bool] */;
  %273 = cast(meta[relay.Constant][13] /* ty=Tensor[(30, 2), float32] */, dtype="float32") /* ty=Tensor[(30, 2), float32] */;
  %274 = reshape(%271, newshape=[1, 12, 3]) /* ty=Tensor[(1, 12, 3), bool] */;
  %275 = reshape(%272, newshape=[2, 12, 3]) /* ty=Tensor[(2, 12, 3), bool] */;
  %276 = reshape(%273, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %277 = @func_642(%274, %275, %276) /* ty=(Tensor[(2, 12, 3), bool], Tensor[(6, 10, ?), uint8], Tensor[(80), bool], Tensor[(60), float32]) */;
  %278 = %270.1;
  %279 = %277.0;
  (%278, %279, %var_1788, meta[relay.Constant][12] /* ty=Tensor[(72), bool] */, meta[relay.Constant][13] /* ty=Tensor[(30, 2), float32] */)
}

def @func_4730(%var_4716: Tensor[(1764, 1), float64]) -> (Tensor[(520), float64], Tensor[(14, 14, 9), bool], Tensor[(1764, 1), float64]) {
  %280 = cast(%var_4716, dtype="float64") /* ty=Tensor[(1764, 1), float64] */;
  %281 = reshape(%280, newshape=[14, 14, 9]) /* ty=Tensor[(14, 14, 9), float64] */;
  %282 = @func_4576(%281) /* ty=(Tensor[(14, 14, 9), bool], Tensor[(36), bool], Tensor[(14, 14, 9), float32]) */;
  %283 = @func_2296() /* ty=Tensor[(520), float64] */;
  %284 = %282.0;
  (%283, %284, %var_4716)
}

def @func_2970(%var_2969: Tensor[(2, 6, 2), float64]) -> Tensor[(2, 6, 2), float64] {
  %286 = fn (%var_2960: Tensor[(2, 6, 2), float64]) -> Tensor[(2, 6, 2), float64] {
    %285 = cast(%var_2960, dtype="float64") /* ty=Tensor[(2, 6, 2), float64] */;
    sigmoid(%285) /* ty=Tensor[(2, 6, 2), float64] */
  };
  %286(%var_2969) /* ty=Tensor[(2, 6, 2), float64] */
}

def @func_6333() -> (Tensor[(14, 14, 9), float64],) {
  %287 = @func_6086() /* ty=Tensor[(14, 14, 9), float64] */;
  (%287,)
}

def @func_1771(%var_1770: Tensor[(13, 5, 8), float64]) -> (Tensor[(13, 5, 8), float64],) {
  %290 = fn (%var_1757: Tensor[(13, 5, 8), float64]) -> (Tensor[(13, 5, 8), float64],) {
    %288 = cast(%var_1757, dtype="float64") /* ty=Tensor[(13, 5, 8), float64] */;
    %289 = log10(%288) /* ty=Tensor[(13, 5, 8), float64] */;
    (%289,)
  };
  %290(%var_1770) /* ty=(Tensor[(13, 5, 8), float64],) */
}

def @func_3044(%var_3043: Tensor[(520), float64]) -> (Tensor[(14, 14, 9), float64], Tensor[(13, 5, 8), float64], Tensor[(520), float32], Tensor[(6, 10, ?), uint8], Tensor[(60), float32], Tensor[(14, 14, 9), float32], Tensor[(14, 14, 9), float64]) {
  %307 = fn (%var_2991: Tensor[(520), float64]) -> (Tensor[(14, 14, 9), float64], Tensor[(13, 5, 8), float64], Tensor[(520), float32], Tensor[(6, 10, ?), uint8], Tensor[(60), float32], Tensor[(14, 14, 9), float32], Tensor[(14, 14, 9), float64]) {
    %291 = @func_1811() /* ty=(Tensor[(14, 14, 9), float64],) */;
    %292 = cast(%var_2991, dtype="float64") /* ty=Tensor[(520), float64] */;
    %293 = reshape(%292, newshape=[5, 104]) /* ty=Tensor[(5, 104), float64] */;
    %294 = @func_1845(%293) /* ty=(Tensor[(14, 14, 9), float32], Tensor[(13, 5, 8), float64], Tensor[(5, 104), float64]) */;
    %295 = cast(%var_2991, dtype="float32") /* ty=Tensor[(520), float32] */;
    %296 = cast(meta[relay.Constant][14] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
    %297 = reshape(%296, newshape=[6, 10, 1]) /* ty=Tensor[(6, 10, 1), float32] */;
    %298 = @func_46(%297) /* ty=(Tensor[(6, 10, ?), uint8],) */;
    %299 = @func_2201() /* ty=(Tensor[(14, 14, 9), float32],) */;
    %300 = @func_2917() /* ty=(Tensor[(14, 14, 9), float64],) */;
    %301 = %291.0;
    %302 = %294.1;
    %303 = sigmoid(%295) /* ty=Tensor[(520), float32] */;
    %304 = %298.0;
    %305 = %299.0;
    %306 = %300.0;
    (%301, %302, %303, %304, meta[relay.Constant][14] /* ty=Tensor[(60), float32] */, %305, %306)
  };
  %307(%var_3043) /* ty=(Tensor[(14, 14, 9), float64], Tensor[(13, 5, 8), float64], Tensor[(520), float32], Tensor[(6, 10, ?), uint8], Tensor[(60), float32], Tensor[(14, 14, 9), float32], Tensor[(14, 14, 9), float64]) */
}

def @func_3271() -> (Tensor[(14, 14, 9), float64],) {
  %310 = fn () -> (Tensor[(14, 14, 9), float64],) {
    %308 = @func_1952() /* ty=(Tensor[(14, 14, 9), float64],) */;
    %309 = %308.0;
    (%309,)
  };
  %310() /* ty=(Tensor[(14, 14, 9), float64],) */
}

def @func_647(%var_644: Tensor[(1, 12, 3), bool], %var_645: Tensor[(2, 12, 3), bool], %var_646: Tensor[(60), float32]) -> (Tensor[(2, 12, 3), bool], Tensor[(6, 10, ?), uint8], Tensor[(80), bool], Tensor[(60), float32]) {
  @func_642(%var_644, %var_645, %var_646) /* ty=(Tensor[(2, 12, 3), bool], Tensor[(6, 10, ?), uint8], Tensor[(80), bool], Tensor[(60), float32]) */
}

def @func_2476() -> Tensor[(14, 14, 9), float64] {
  %312 = fn () -> Tensor[(14, 14, 9), float64] {
    %311 = @func_1811() /* ty=(Tensor[(14, 14, 9), float64],) */;
    %311.0
  };
  %312() /* ty=Tensor[(14, 14, 9), float64] */
}

def @func_1642(%var_1641: Tensor[(2160), float32]) -> (Tensor[(14, 14, 9), float64], Tensor[(6, 10, ?), uint8], Tensor[(60), float32], Tensor[(15, 12, 12), float32], Tensor[(2160), float32], Tensor[(14, 14, 9), float64]) {
  %326 = fn (%var_1623: Tensor[(2160), float32]) -> (Tensor[(14, 14, 9), float64], Tensor[(6, 10, ?), uint8], Tensor[(60), float32], Tensor[(15, 12, 12), float32], Tensor[(2160), float32], Tensor[(14, 14, 9), float64]) {
    %313 = @func_1605() /* ty=(Tensor[(14, 14, 9), float64],) */;
    %314 = cast(meta[relay.Constant][15] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
    %315 = reshape(%314, newshape=[6, 10, 1]) /* ty=Tensor[(6, 10, 1), float32] */;
    %316 = @func_46(%315) /* ty=(Tensor[(6, 10, ?), uint8],) */;
    %317 = cast(%var_1623, dtype="float32") /* ty=Tensor[(2160), float32] */;
    %318 = cast(%var_1623, dtype="float32") /* ty=Tensor[(2160), float32] */;
    %319 = reshape(%317, newshape=[15, 12, 12]) /* ty=Tensor[(15, 12, 12), float32] */;
    %320 = reshape(%318, newshape=[15, 12, 12]) /* ty=Tensor[(15, 12, 12), float32] */;
    %321 = @func_1605() /* ty=(Tensor[(14, 14, 9), float64],) */;
    %322 = %313.0;
    %323 = %316.0;
    %324 = @func_1090(%319, %320) /* ty=Tensor[(15, 12, 12), float32] */;
    %325 = %321.0;
    (%322, %323, meta[relay.Constant][15] /* ty=Tensor[(60), float32] */, %324, %var_1623, %325)
  };
  %326(%var_1641) /* ty=(Tensor[(14, 14, 9), float64], Tensor[(6, 10, ?), uint8], Tensor[(60), float32], Tensor[(15, 12, 12), float32], Tensor[(2160), float32], Tensor[(14, 14, 9), float64]) */
}

def @func_6362() -> (Tensor[(14, 2, 15), bool],) {
  %327 = cast(meta[relay.Constant][17] /* ty=Tensor[(14, 2, 15), uint64] */, dtype="bool") /* ty=Tensor[(14, 2, 15), bool] */;
  %328 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(14, 2, 15), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %329 = cast(meta[relay.Constant][16] /* ty=Tensor[(14, 2, 15), uint64] */, dtype="bool") /* ty=Tensor[(14, 2, 15), bool] */;
  %330 = dyn.reshape(%327, %328, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %331 = greater(%329, %330) /* ty=Tensor[(14, 2, 15), bool] */;
  (%331,)
}

def @func_2905() -> (Tensor[(36), bool],) {
  %334 = fn () -> (Tensor[(36), bool],) {
    %332 = @func_2151() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(72), bool], Tensor[(36), bool], Tensor[(14, 14, 9), float64], Tensor[(2160), float32], Tensor[(5, 104), float64], Tensor[(520), float64]) */;
    %333 = %332.2;
    (%333,)
  };
  %334() /* ty=(Tensor[(36), bool],) */
}

def @func_5870() -> (Tensor[(520), float64], Tensor[(5, 104), uint64]) {
  %339 = fn () -> (Tensor[(520), float64], Tensor[(5, 104), uint64]) {
    %335 = @func_5661() /* ty=(Tensor[(520), float64],) */;
    %336 = @func_5170() /* ty=(Tensor[(5, 104), uint64],) */;
    %337 = %335.0;
    %338 = %336.0;
    (%337, %338)
  };
  %339() /* ty=(Tensor[(520), float64], Tensor[(5, 104), uint64]) */
}

def @func_8703() -> Tensor[(14, 2, 15), bool] {
  %340 = @func_6362() /* ty=(Tensor[(14, 2, 15), bool],) */;
  %340.0
}

def @func_5509(%var_5508: Tensor[(135), float64]) -> (Tensor[(14, 14, 9), float64], Tensor[(3, 15, 3), float64], Tensor[(135), float64], Tensor[(14, 14, 9), float32], Tensor[(520), float64]) {
  %350 = fn (%var_5476: Tensor[(135), float64]) -> (Tensor[(14, 14, 9), float64], Tensor[(3, 15, 3), float64], Tensor[(135), float64], Tensor[(14, 14, 9), float32], Tensor[(520), float64]) {
    %341 = @func_1997() /* ty=(Tensor[(14, 14, 9), float64],) */;
    %342 = cast(%var_5476, dtype="float64") /* ty=Tensor[(135), float64] */;
    %343 = reshape(%342, newshape=[3, 15, 3]) /* ty=Tensor[(3, 15, 3), float64] */;
    %344 = @func_2201() /* ty=(Tensor[(14, 14, 9), float32],) */;
    %345 = @func_2775() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(13, 5, 8), float64], Tensor[(520), float64]) */;
    %346 = %341.0;
    %347 = @func_2503(%343) /* ty=Tensor[(3, 15, 3), float64] */;
    %348 = %344.0;
    %349 = %345.2;
    (%346, %347, %var_5476, %348, %349)
  };
  %350(%var_5508) /* ty=(Tensor[(14, 14, 9), float64], Tensor[(3, 15, 3), float64], Tensor[(135), float64], Tensor[(14, 14, 9), float32], Tensor[(520), float64]) */
}

def @func_4170() -> (Tensor[(14, 14, 9), float64],) {
  @func_4168() /* ty=(Tensor[(14, 14, 9), float64],) */
}

def @func_7554() -> (Tensor[(14, 14, 9), float64],) {
  %351 = @func_2475() /* ty=Tensor[(14, 14, 9), float64] */;
  (%351,)
}

def @func_8970(%var_8962: Tensor[(7, 2, 2), uint16], %var_8963: Tensor[(7, 2, 2), uint16]) -> (Tensor[(7, 2, 2), bool],) {
  %352 = cast(%var_8963, dtype="bool") /* ty=Tensor[(7, 2, 2), bool] */;
  %353 = shape_of(%var_8962, dtype="int32") /* ty=Tensor[(3), int32] */;
  %354 = cast(%var_8962, dtype="bool") /* ty=Tensor[(7, 2, 2), bool] */;
  %355 = dyn.reshape(%352, %353, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %356 = greater(%354, %355) /* ty=Tensor[(7, 2, 2), bool] */;
  (%356,)
}

def @func_3290() -> Tensor[(14, 14, 9), float64] {
  @func_3288() /* ty=Tensor[(14, 14, 9), float64] */
}

def @func_10004(%var_10003: Tensor[(15, 15, 4), float32]) -> (Tensor[(15, 15, 4), float32],) {
  %361 = fn (%var_9988: Tensor[(15, 15, 4), float32]) -> (Tensor[(15, 15, 4), float32],) {
    %357 = cast(%var_9988, dtype="float32") /* ty=Tensor[(15, 15, 4), float32] */;
    %358 = log2(%357) /* ty=Tensor[(15, 15, 4), float32] */;
    %359 = cast(%358, dtype="float32") /* ty=Tensor[(15, 15, 4), float32] */;
    %360 = erf(%359) /* ty=Tensor[(15, 15, 4), float32] */;
    (%360,)
  };
  %361(%var_10003) /* ty=(Tensor[(15, 15, 4), float32],) */
}

def @func_6221() -> Tensor[(5, 104), uint64] {
  %363 = fn () -> Tensor[(5, 104), uint64] {
    %362 = @func_5170() /* ty=(Tensor[(5, 104), uint64],) */;
    %362.0
  };
  %363() /* ty=Tensor[(5, 104), uint64] */
}

def @func_2627() -> Tensor[(520), float64] {
  %364 = fn () -> Tensor[(520), float64] {
    @func_2296() /* ty=Tensor[(520), float64] */
  };
  %364() /* ty=Tensor[(520), float64] */
}

def @func_8689() -> Tensor[(14, 14, 9), float64] {
  %365 = fn () -> Tensor[(14, 14, 9), float64] {
    @func_6086() /* ty=Tensor[(14, 14, 9), float64] */
  };
  %365() /* ty=Tensor[(14, 14, 9), float64] */
}

def @func_6364() -> (Tensor[(14, 2, 15), bool],) {
  @func_6362() /* ty=(Tensor[(14, 2, 15), bool],) */
}

def @func_9884() -> Tensor[(14, 14, 9), float64] {
  %366 = @func_5043() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */;
  %366.0
}

def @func_9017(%var_9000: float64) -> (Tensor[(7, 9, 8), float64], Tensor[(14, 14, 9), float64]) {
  %367 = cast(%var_9000, dtype="float64") /* ty=float64 */;
  %368 = cast(meta[relay.Constant][18] /* ty=Tensor[(7, 9, 8), float64] */, dtype="float64") /* ty=Tensor[(7, 9, 8), float64] */;
  %369 = @func_7992() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %370 = floor_divide(%367, %368) /* ty=Tensor[(7, 9, 8), float64] */;
  %371 = %369.0;
  (%370, %371)
}

def @func_2432() -> (Tensor[(14, 14, 9), float64],) {
  %372 = @func_1605() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %373 = %372.0;
  (%373,)
}

def @func_3379() -> Tensor[(14, 14, 9), bool] {
  %374 = @func_3071() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), bool]) */;
  %374.1
}

def @func_642(%var_632: Tensor[(1, 12, 3), bool], %var_633: Tensor[(2, 12, 3), bool], %var_639: Tensor[(60), float32]) -> (Tensor[(2, 12, 3), bool], Tensor[(6, 10, ?), uint8], Tensor[(80), bool], Tensor[(60), float32]) {
  %375 = cast(%var_632, dtype="bool") /* ty=Tensor[(1, 12, 3), bool] */;
  %376 = cast(%var_633, dtype="bool") /* ty=Tensor[(2, 12, 3), bool] */;
  %377 = cast(meta[relay.Constant][19] /* ty=Tensor[(80), bool] */, dtype="bool") /* ty=Tensor[(80), bool] */;
  %378 = cast(meta[relay.Constant][19] /* ty=Tensor[(80), bool] */, dtype="bool") /* ty=Tensor[(80), bool] */;
  %379 = cast(%var_639, dtype="float32") /* ty=Tensor[(60), float32] */;
  %380 = reshape(%377, newshape=[8, 2, 5]) /* ty=Tensor[(8, 2, 5), bool] */;
  %381 = reshape(%378, newshape=[8, 2, 5]) /* ty=Tensor[(8, 2, 5), bool] */;
  %382 = reshape(%379, newshape=[15, 4]) /* ty=Tensor[(15, 4), float32] */;
  %383 = @func_436(%380, %381, %382) /* ty=(Tensor[(8, 2, 5), bool], Tensor[(6, 10, ?), uint8], Tensor[(15, 4), float32]) */;
  %384 = logical_and(%375, %376) /* ty=Tensor[(2, 12, 3), bool] */;
  %385 = %383.1;
  (%384, %385, meta[relay.Constant][19] /* ty=Tensor[(80), bool] */, %var_639)
}

def @func_10637(%var_10635: Tensor[(15, 11, 10), float32]) -> (Tensor[(15, 11, 10), float32],) {
  @func_10634(%var_10635) /* ty=(Tensor[(15, 11, 10), float32],) */
}

def @func_7070() -> (Tensor[(520), float64], Tensor[(36), bool], Tensor[(14, 14, 9), bool]) {
  %390 = fn () -> (Tensor[(520), float64], Tensor[(36), bool], Tensor[(14, 14, 9), bool]) {
    %386 = @func_2904() /* ty=(Tensor[(36), bool],) */;
    %387 = @func_5189() /* ty=Tensor[(520), float64] */;
    %388 = %386.0;
    %389 = @func_6569() /* ty=Tensor[(14, 14, 9), bool] */;
    (%387, %388, %389)
  };
  %390() /* ty=(Tensor[(520), float64], Tensor[(36), bool], Tensor[(14, 14, 9), bool]) */
}

def @func_1673() -> (Tensor[(14, 14, 9), float64],) {
  %391 = @func_1605() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %392 = %391.0;
  (%392,)
}

def @func_2537(%var_2536: Tensor[(14, 14, 9), float32]) -> Tensor[(14, 14, 9), bool] {
  %401 = fn (%var_2530: Tensor[(14, 14, 9), float32]) -> Tensor[(14, 14, 9), bool] {
    %393 = @func_1811() /* ty=(Tensor[(14, 14, 9), float64],) */;
    %394 = %393.0;
    %395 = cast(%394, dtype="float32") /* ty=Tensor[(14, 14, 9), float32] */;
    %396 = sigmoid(%395) /* ty=Tensor[(14, 14, 9), float32] */;
    %397 = cast(%var_2530, dtype="bool") /* ty=Tensor[(14, 14, 9), bool] */;
    %398 = shape_of(%396, dtype="int32") /* ty=Tensor[(3), int32] */;
    %399 = cast(%396, dtype="bool") /* ty=Tensor[(14, 14, 9), bool] */;
    %400 = dyn.reshape(%397, %398, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less_equal(%399, %400) /* ty=Tensor[(14, 14, 9), bool] */
  };
  %401(%var_2536) /* ty=Tensor[(14, 14, 9), bool] */
}

def @func_6442(%var_6440: uint64, %var_6441: Tensor[(1, 10, 8), uint64]) -> (Tensor[(1, 10, 8), uint64],) {
  %405 = fn (%var_6434: uint64, %var_6435: Tensor[(1, 10, 8), uint64]) -> (Tensor[(1, 10, 8), uint64],) {
    %402 = cast(%var_6434, dtype="uint64") /* ty=uint64 */;
    %403 = cast(%var_6435, dtype="uint64") /* ty=Tensor[(1, 10, 8), uint64] */;
    %404 = add(%402, %403) /* ty=Tensor[(1, 10, 8), uint64] */;
    (%404,)
  };
  %405(%var_6440, %var_6441) /* ty=(Tensor[(1, 10, 8), uint64],) */
}

def @func_3072() -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), bool]) {
  %410 = fn () -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), bool]) {
    %406 = @func_2722() /* ty=Tensor[(14, 14, 9), float64] */;
    %407 = cast(%406, dtype="float32") /* ty=Tensor[(14, 14, 9), float32] */;
    %408 = reshape(%407, newshape=[14, 14, 9]) /* ty=Tensor[(14, 14, 9), float32] */;
    %409 = @func_2535(%408) /* ty=Tensor[(14, 14, 9), bool] */;
    (%406, %409)
  };
  %410() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), bool]) */
}

def @func_8012(%var_8008: Tensor[(8), uint32]) -> (Tensor[(520), float64], Tensor[(4, 2, 6), uint32], Tensor[(8), uint32], Tensor[(48), uint32]) {
  %411 = cast(%var_8008, dtype="uint32") /* ty=Tensor[(8), uint32] */;
  %412 = cast(meta[relay.Constant][20] /* ty=Tensor[(48), uint32] */, dtype="uint32") /* ty=Tensor[(48), uint32] */;
  %413 = reshape(%411, newshape=[4, 2, 1]) /* ty=Tensor[(4, 2, 1), uint32] */;
  %414 = reshape(%412, newshape=[4, 2, 6]) /* ty=Tensor[(4, 2, 6), uint32] */;
  %415 = @func_1293(%413, %414) /* ty=(Tensor[(4, 2, 6), uint32], Tensor[(6, 10, ?), uint8], Tensor[(60), float32], Tensor[(15, 12, 12), float32], Tensor[(2160), float32]) */;
  %416 = @func_7502() /* ty=Tensor[(520), float64] */;
  %417 = %415.0;
  (%416, %417, %var_8008, meta[relay.Constant][20] /* ty=Tensor[(48), uint32] */)
}

def @func_7535() -> (Tensor[(30, 2), float64],) {
  %422 = fn () -> (Tensor[(30, 2), float64],) {
    %418 = @func_6873() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(30, 2), float32], Tensor[(3, 12), bool]) */;
    %419 = %418.1;
    %420 = cast(%419, dtype="float64") /* ty=Tensor[(30, 2), float64] */;
    %421 = sigmoid(%420) /* ty=Tensor[(30, 2), float64] */;
    (%421,)
  };
  %422() /* ty=(Tensor[(30, 2), float64],) */
}

def @func_5189() -> Tensor[(520), float64] {
  %423 = @func_5099() /* ty=(Tensor[(520), float64],) */;
  %423.0
}

def @func_2506(%var_2504: Tensor[(3, 15, 3), float64]) -> Tensor[(3, 15, 3), float64] {
  @func_2503(%var_2504) /* ty=Tensor[(3, 15, 3), float64] */
}

def @func_9361(%var_9357: Tensor[(9, 11, 11), float64], %var_9358: Tensor[(8), uint32], %var_9359: Tensor[(48), uint32], %var_9360: Tensor[(36), bool]) -> (Tensor[(9, 11, 11), float64], Tensor[(15, 12, 12), float32], Tensor[(8), uint32], Tensor[(48), uint32], Tensor[(72), bool], Tensor[(36), bool]) {
  %436 = fn (%var_9331: Tensor[(9, 11, 11), float64], %var_9341: Tensor[(8), uint32], %var_9342: Tensor[(48), uint32], %var_9346: Tensor[(36), bool]) -> (Tensor[(9, 11, 11), float64], Tensor[(15, 12, 12), float32], Tensor[(8), uint32], Tensor[(48), uint32], Tensor[(72), bool], Tensor[(36), bool]) {
    %424 = cast(%var_9331, dtype="float64") /* ty=Tensor[(9, 11, 11), float64] */;
    %425 = cast(%var_9341, dtype="uint32") /* ty=Tensor[(8), uint32] */;
    %426 = cast(%var_9342, dtype="uint32") /* ty=Tensor[(48), uint32] */;
    %427 = reshape(%425, newshape=[4, 2, 1]) /* ty=Tensor[(4, 2, 1), uint32] */;
    %428 = reshape(%426, newshape=[4, 2, 6]) /* ty=Tensor[(4, 2, 6), uint32] */;
    %429 = @func_1293(%427, %428) /* ty=(Tensor[(4, 2, 6), uint32], Tensor[(6, 10, ?), uint8], Tensor[(60), float32], Tensor[(15, 12, 12), float32], Tensor[(2160), float32]) */;
    %430 = cast(%var_9346, dtype="bool") /* ty=Tensor[(36), bool] */;
    %431 = reshape(%430, newshape=[36]) /* ty=Tensor[(36), bool] */;
    %432 = @func_1802(%431) /* ty=(Tensor[(14, 14, 9), float64], Tensor[(2, 12, 3), bool], Tensor[(36), bool], Tensor[(72), bool], Tensor[(30, 2), float32]) */;
    %433 = exp(%424) /* ty=Tensor[(9, 11, 11), float64] */;
    %434 = %429.3;
    %435 = %432.3;
    (%433, %434, %var_9341, %var_9342, %435, %var_9346)
  };
  %436(%var_9357, %var_9358, %var_9359, %var_9360) /* ty=(Tensor[(9, 11, 11), float64], Tensor[(15, 12, 12), float32], Tensor[(8), uint32], Tensor[(48), uint32], Tensor[(72), bool], Tensor[(36), bool]) */
}

def @func_1999() -> (Tensor[(14, 14, 9), float64],) {
  @func_1997() /* ty=(Tensor[(14, 14, 9), float64],) */
}

def @func_9962() -> (Tensor[(520), float64],) {
  @func_9960() /* ty=(Tensor[(520), float64],) */
}

def @func_3781() -> (Tensor[(14, 14, 9), float64],) {
  %439 = fn () -> (Tensor[(14, 14, 9), float64],) {
    %437 = @func_3071() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), bool]) */;
    %438 = %437.0;
    (%438,)
  };
  %439() /* ty=(Tensor[(14, 14, 9), float64],) */
}

def @func_1909() -> (Tensor[(14, 14, 9), float32], Tensor[(14, 14, 9), float64]) {
  %446 = fn () -> (Tensor[(14, 14, 9), float32], Tensor[(14, 14, 9), float64]) {
    %440 = @func_1811() /* ty=(Tensor[(14, 14, 9), float64],) */;
    %441 = %440.0;
    %442 = cast(%441, dtype="float32") /* ty=Tensor[(14, 14, 9), float32] */;
    %443 = @func_1734() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */;
    %444 = acosh(%442) /* ty=Tensor[(14, 14, 9), float32] */;
    %445 = %443.1;
    (%444, %445)
  };
  %446() /* ty=(Tensor[(14, 14, 9), float32], Tensor[(14, 14, 9), float64]) */
}

def @func_4140(%var_4095: Tensor[(8, 15, 1), bool]) -> (Tensor[(8, 15, 14), bool], Tensor[(14, 14, 9), float32], Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) {
  %447 = cast(%var_4095, dtype="bool") /* ty=Tensor[(8, 15, 1), bool] */;
  %448 = cast(meta[relay.Constant][21] /* ty=Tensor[(8, 15, 14), bool] */, dtype="bool") /* ty=Tensor[(8, 15, 14), bool] */;
  %449 = @func_2201() /* ty=(Tensor[(14, 14, 9), float32],) */;
  %450 = @func_1952() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %451 = %450.0;
  %452 = cast(%451, dtype="float64") /* ty=Tensor[(14, 14, 9), float64] */;
  %453 = logical_or(%447, %448) /* ty=Tensor[(8, 15, 14), bool] */;
  %454 = %449.0;
  %455 = sin(%452) /* ty=Tensor[(14, 14, 9), float64] */;
  %456 = @func_3288() /* ty=Tensor[(14, 14, 9), float64] */;
  (%453, %454, %455, %456)
}

def @func_7105() -> Tensor[(14, 14, 9), float64] {
  %457 = fn () -> Tensor[(14, 14, 9), float64] {
    @func_6060() /* ty=Tensor[(14, 14, 9), float64] */
  };
  %457() /* ty=Tensor[(14, 14, 9), float64] */
}

def @func_5425() -> Tensor[(520), float64] {
  @func_2365() /* ty=Tensor[(520), float64] */
}

def @func_48(%var_47: Tensor[(6, 10, 1), float32]) -> (Tensor[(6, 10, ?), uint8],) {
  %470 = fn (%var_22: Tensor[(6, 10, 1), float32]) -> (Tensor[(6, 10, ?), uint8],) {
    %458 = cast(%var_22, dtype="float32") /* ty=Tensor[(6, 10, 1), float32] */;
    %459 = tan(%458) /* ty=Tensor[(6, 10, 1), float32] */;
    %460 = cast(%459, dtype="uint64") /* ty=Tensor[(6, 10, 1), uint64] */;
    %461 = shape_of(%var_22, dtype="int32") /* ty=Tensor[(3), int32] */;
    %462 = cast(%var_22, dtype="uint64") /* ty=Tensor[(6, 10, 1), uint64] */;
    %463 = dyn.reshape(%460, %461, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %464 = subtract(%462, %463) /* ty=Tensor[(6, 10, ?), uint64] */;
    %465 = cast(%459, dtype="uint8") /* ty=Tensor[(6, 10, 1), uint8] */;
    %466 = shape_of(%464, dtype="int32") /* ty=Tensor[(3), int32] */;
    %467 = cast(%464, dtype="uint8") /* ty=Tensor[(6, 10, ?), uint8] */;
    %468 = dyn.reshape(%465, %466, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %469 = left_shift(%467, %468) /* ty=Tensor[(6, 10, ?), uint8] */;
    (%469,)
  };
  %470(%var_47) /* ty=(Tensor[(6, 10, ?), uint8],) */
}

def @func_8943(%var_8938: Tensor[(8, 1), uint32]) -> (Tensor[(14, 14, 9), bool], Tensor[(6, 10, ?), uint8], Tensor[(8, 1), uint32], Tensor[(48), uint32]) {
  %471 = cast(%var_8938, dtype="uint32") /* ty=Tensor[(8, 1), uint32] */;
  %472 = cast(meta[relay.Constant][22] /* ty=Tensor[(48), uint32] */, dtype="uint32") /* ty=Tensor[(48), uint32] */;
  %473 = reshape(%471, newshape=[4, 2, 1]) /* ty=Tensor[(4, 2, 1), uint32] */;
  %474 = reshape(%472, newshape=[4, 2, 6]) /* ty=Tensor[(4, 2, 6), uint32] */;
  %475 = @func_1293(%473, %474) /* ty=(Tensor[(4, 2, 6), uint32], Tensor[(6, 10, ?), uint8], Tensor[(60), float32], Tensor[(15, 12, 12), float32], Tensor[(2160), float32]) */;
  %476 = @func_3379() /* ty=Tensor[(14, 14, 9), bool] */;
  %477 = %475.1;
  (%476, %477, %var_8938, meta[relay.Constant][22] /* ty=Tensor[(48), uint32] */)
}

def @func_2776() -> (Tensor[(14, 14, 9), float64], Tensor[(13, 5, 8), float64], Tensor[(520), float64]) {
  %486 = fn () -> (Tensor[(14, 14, 9), float64], Tensor[(13, 5, 8), float64], Tensor[(520), float64]) {
    %478 = @func_1997() /* ty=(Tensor[(14, 14, 9), float64],) */;
    %479 = %478.0;
    %480 = cast(%479, dtype="float64") /* ty=Tensor[(14, 14, 9), float64] */;
    %481 = cast(meta[relay.Constant][23] /* ty=Tensor[(520), float64] */, dtype="float64") /* ty=Tensor[(520), float64] */;
    %482 = reshape(%481, newshape=[13, 5, 8]) /* ty=Tensor[(13, 5, 8), float64] */;
    %483 = @func_1769(%482) /* ty=(Tensor[(13, 5, 8), float64],) */;
    %484 = acos(%480) /* ty=Tensor[(14, 14, 9), float64] */;
    %485 = %483.0;
    (%484, %485, meta[relay.Constant][23] /* ty=Tensor[(520), float64] */)
  };
  %486() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(13, 5, 8), float64], Tensor[(520), float64]) */
}

def @func_5399(%var_5354: Tensor[(1, 15, 14), int32]) -> (Tensor[(2, 15, 14), int32], Tensor[(14, 14, 9), float64]) {
  %487 = cast(%var_5354, dtype="int32") /* ty=Tensor[(1, 15, 14), int32] */;
  %488 = cast(meta[relay.Constant][24] /* ty=Tensor[(2, 15, 14), int32] */, dtype="int32") /* ty=Tensor[(2, 15, 14), int32] */;
  %489 = @func_5043() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */;
  %490 = bitwise_or(%487, %488) /* ty=Tensor[(2, 15, 14), int32] */;
  %491 = %489.0;
  (%490, %491)
}

def @func_7556() -> (Tensor[(14, 14, 9), float64],) {
  @func_7554() /* ty=(Tensor[(14, 14, 9), float64],) */
}

def @func_7486() -> (Tensor[(14, 14, 9), float64],) {
  @func_7484() /* ty=(Tensor[(14, 14, 9), float64],) */
}

def @func_4280() -> Tensor[(14, 14, 9), float64] {
  @func_4278() /* ty=Tensor[(14, 14, 9), float64] */
}

def @func_3097() -> (Tensor[(5, 104), float64], Tensor[(14, 14, 9), float64], Tensor[(520), float64]) {
  %492 = @func_2151() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(72), bool], Tensor[(36), bool], Tensor[(14, 14, 9), float64], Tensor[(2160), float32], Tensor[(5, 104), float64], Tensor[(520), float64]) */;
  %493 = %492.5;
  %494 = @func_2722() /* ty=Tensor[(14, 14, 9), float64] */;
  %495 = @func_2365() /* ty=Tensor[(520), float64] */;
  (%493, %494, %495)
}

def @func_9561() -> (Tensor[(13, 5, 8), float64], Tensor[(36), bool]) {
  %500 = fn () -> (Tensor[(13, 5, 8), float64], Tensor[(36), bool]) {
    %496 = @func_2775() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(13, 5, 8), float64], Tensor[(520), float64]) */;
    %497 = @func_9401() /* ty=(Tensor[(36), bool], Tensor[(36), bool], Tensor[(14, 14, 9), float64]) */;
    %498 = %496.1;
    %499 = %497.1;
    (%498, %499)
  };
  %500() /* ty=(Tensor[(13, 5, 8), float64], Tensor[(36), bool]) */
}

def @func_4786() -> (Tensor[(5, 104), float64],) {
  @func_4784() /* ty=(Tensor[(5, 104), float64],) */
}

def @func_3809() -> (Tensor[(14, 14, 9), float64], Tensor[(5, 104), float64]) {
  %505 = fn () -> (Tensor[(14, 14, 9), float64], Tensor[(5, 104), float64]) {
    %501 = @func_2775() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(13, 5, 8), float64], Tensor[(520), float64]) */;
    %502 = @func_2151() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(72), bool], Tensor[(36), bool], Tensor[(14, 14, 9), float64], Tensor[(2160), float32], Tensor[(5, 104), float64], Tensor[(520), float64]) */;
    %503 = %501.0;
    %504 = %502.5;
    (%503, %504)
  };
  %505() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(5, 104), float64]) */
}

def @func_1734() -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) {
  %506 = @func_1605() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %507 = @func_1605() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %508 = %506.0;
  %509 = %507.0;
  (%508, %509)
}

def @func_5044() -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) {
  %514 = fn () -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) {
    %510 = @func_4205() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */;
    %511 = @func_4168() /* ty=(Tensor[(14, 14, 9), float64],) */;
    %512 = %510.0;
    %513 = %511.0;
    (%512, %513)
  };
  %514() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */
}

def @func_6824() -> (Tensor[(14, 14, 9), float64], Tensor[(520), float64]) {
  %521 = fn () -> (Tensor[(14, 14, 9), float64], Tensor[(520), float64]) {
    %515 = @func_4168() /* ty=(Tensor[(14, 14, 9), float64],) */;
    %516 = %515.0;
    %517 = cast(%516, dtype="float64") /* ty=Tensor[(14, 14, 9), float64] */;
    %518 = reshape(%517, newshape=[1764, 1]) /* ty=Tensor[(1764, 1), float64] */;
    %519 = @func_4730(%518) /* ty=(Tensor[(520), float64], Tensor[(14, 14, 9), bool], Tensor[(1764, 1), float64]) */;
    %520 = %519.0;
    (%516, %520)
  };
  %521() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(520), float64]) */
}

def @func_8286() -> (Tensor[(14, 14, 9), float64],) {
  @func_8284() /* ty=(Tensor[(14, 14, 9), float64],) */
}

def @func_5402(%var_5400: Tensor[(1, 15, 14), int32]) -> (Tensor[(2, 15, 14), int32], Tensor[(14, 14, 9), float64]) {
  @func_5399(%var_5400) /* ty=(Tensor[(2, 15, 14), int32], Tensor[(14, 14, 9), float64]) */
}

def @func_7860() -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(30, 2), float64], Tensor[(14, 14, 9), float64]) {
  %522 = @func_1673() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %523 = @func_5067() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %524 = @func_7534() /* ty=(Tensor[(30, 2), float64],) */;
  %525 = %524.0;
  %526 = cast(%525, dtype="float64") /* ty=Tensor[(30, 2), float64] */;
  %527 = %523.0;
  %528 = cast(%527, dtype="float64") /* ty=Tensor[(14, 14, 9), float64] */;
  %529 = reshape(%528, newshape=[14, 14, 9]) /* ty=Tensor[(14, 14, 9), float64] */;
  %530 = %522.0;
  %531 = acos(%526) /* ty=Tensor[(30, 2), float64] */;
  %532 = @func_2231(%529) /* ty=Tensor[(14, 14, 9), float64] */;
  (%530, %527, %531, %532)
}

def @func_8015(%var_8013: Tensor[(8), uint32]) -> (Tensor[(520), float64], Tensor[(4, 2, 6), uint32], Tensor[(8), uint32], Tensor[(48), uint32]) {
  @func_8012(%var_8013) /* ty=(Tensor[(520), float64], Tensor[(4, 2, 6), uint32], Tensor[(8), uint32], Tensor[(48), uint32]) */
}

def @func_9661() -> (Tensor[(14, 14, 9), float32], Tensor[(14, 14, 9), float64]) {
  @func_9659() /* ty=(Tensor[(14, 14, 9), float32], Tensor[(14, 14, 9), float64]) */
}

def @func_10634(%var_10631: Tensor[(15, 11, 10), float32]) -> (Tensor[(15, 11, 10), float32],) {
  %533 = cast(%var_10631, dtype="float32") /* ty=Tensor[(15, 11, 10), float32] */;
  %534 = asinh(%533) /* ty=Tensor[(15, 11, 10), float32] */;
  (%534,)
}

def @func_5171() -> (Tensor[(5, 104), uint64],) {
  %542 = fn () -> (Tensor[(5, 104), uint64],) {
    %535 = @func_4784() /* ty=(Tensor[(5, 104), float64],) */;
    %536 = %535.0;
    %537 = cast(meta[relay.Constant][25] /* ty=Tensor[(5, 104), float64] */, dtype="uint64") /* ty=Tensor[(5, 104), uint64] */;
    %538 = shape_of(%536, dtype="int32") /* ty=Tensor[(2), int32] */;
    %539 = cast(%536, dtype="uint64") /* ty=Tensor[(5, 104), uint64] */;
    %540 = dyn.reshape(%537, %538, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %541 = right_shift(%539, %540) /* ty=Tensor[(5, 104), uint64] */;
    (%541,)
  };
  %542() /* ty=(Tensor[(5, 104), uint64],) */
}

def @func_5427() -> Tensor[(520), float64] {
  @func_5425() /* ty=Tensor[(520), float64] */
}

def @func_6000() -> (Tensor[(5, 104), float64],) {
  %543 = @func_4784() /* ty=(Tensor[(5, 104), float64],) */;
  %544 = %543.0;
  (%544,)
}

def @func_8673() -> Tensor[(14, 14, 9), float64] {
  %545 = @func_8284() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %545.0
}

def @func_8567() -> Tensor[(14, 14, 9), bool] {
  @func_6569() /* ty=Tensor[(14, 14, 9), bool] */
}

def @func_5069() -> (Tensor[(14, 14, 9), float64],) {
  @func_5067() /* ty=(Tensor[(14, 14, 9), float64],) */
}

def @func_9926() -> (Tensor[(14, 14, 9), float64],) {
  %548 = fn () -> (Tensor[(14, 14, 9), float64],) {
    %546 = @func_2775() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(13, 5, 8), float64], Tensor[(520), float64]) */;
    %547 = %546.0;
    (%547,)
  };
  %548() /* ty=(Tensor[(14, 14, 9), float64],) */
}

def @func_4623() -> (Tensor[(16, 2, 5), float64],) {
  %551 = fn () -> (Tensor[(16, 2, 5), float64],) {
    %549 = cast(meta[relay.Constant][26] /* ty=Tensor[(16, 2, 5), float64] */, dtype="float64") /* ty=Tensor[(16, 2, 5), float64] */;
    %550 = tan(%549) /* ty=Tensor[(16, 2, 5), float64] */;
    (%550,)
  };
  %551() /* ty=(Tensor[(16, 2, 5), float64],) */
}

def @func_3623() -> (Tensor[(14, 14, 9), float64],) {
  @func_3621() /* ty=(Tensor[(14, 14, 9), float64],) */
}

def @func_9730(%var_9728: Tensor[(60), float32]) -> (Tensor[(14, 14, 9), float64], Tensor[(520), float32], Tensor[(60), float32], Tensor[(14, 14, 9), float64], Tensor[(13, 5, 8), float64], Tensor[(6, 10, 135), bool], Tensor[(16, 4, 5), int16], Tensor[(320), float32]) {
  @func_9727(%var_9728) /* ty=(Tensor[(14, 14, 9), float64], Tensor[(520), float32], Tensor[(60), float32], Tensor[(14, 14, 9), float64], Tensor[(13, 5, 8), float64], Tensor[(6, 10, 135), bool], Tensor[(16, 4, 5), int16], Tensor[(320), float32]) */
}

def @func_9805(%var_9801: Tensor[(60), float32]) -> (Tensor[(14, 14, 9), float64], Tensor[(520), float64], Tensor[(60), float32]) {
  %552 = cast(%var_9801, dtype="float32") /* ty=Tensor[(60), float32] */;
  %553 = reshape(%552, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %554 = @func_7450(%553) /* ty=(Tensor[(520), float64], Tensor[(6, 10, 520), int8], Tensor[(60), float32]) */;
  %555 = @func_3658() /* ty=Tensor[(14, 14, 9), float64] */;
  %556 = %554.0;
  (%555, %556, %var_9801)
}

def @func_8675() -> Tensor[(14, 14, 9), float64] {
  @func_8673() /* ty=Tensor[(14, 14, 9), float64] */
}

def @func_1812() -> (Tensor[(14, 14, 9), float64],) {
  %559 = fn () -> (Tensor[(14, 14, 9), float64],) {
    %557 = @func_1673() /* ty=(Tensor[(14, 14, 9), float64],) */;
    %558 = %557.0;
    (%558,)
  };
  %559() /* ty=(Tensor[(14, 14, 9), float64],) */
}

def @func_6303() -> (Tensor[(14, 14, 9), float64],) {
  @func_6301() /* ty=(Tensor[(14, 14, 9), float64],) */
}

def @func_8508() -> (Tensor[(520), float64], Tensor[(14, 2, 15), bool], Tensor[(14, 14, 9), float64], Tensor[(13, 5, 8), float64]) {
  @func_8506() /* ty=(Tensor[(520), float64], Tensor[(14, 2, 15), bool], Tensor[(14, 14, 9), float64], Tensor[(13, 5, 8), float64]) */
}

def @func_3381() -> Tensor[(14, 14, 9), bool] {
  @func_3379() /* ty=Tensor[(14, 14, 9), bool] */
}

def @func_9960() -> (Tensor[(520), float64],) {
  %560 = @func_8554() /* ty=Tensor[(520), float64] */;
  (%560,)
}

def @func_2029(%var_2027: Tensor[(16, 6, 9), int64], %var_2028: Tensor[(16, 6, 9), int64]) -> Tensor[(16, 6, 9), int64] {
  @func_2025(%var_2027, %var_2028) /* ty=Tensor[(16, 6, 9), int64] */
}

def @func_2415() -> (Tensor[(14, 14, 9), float64],) {
  %561 = @func_2151() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(72), bool], Tensor[(36), bool], Tensor[(14, 14, 9), float64], Tensor[(2160), float32], Tensor[(5, 104), float64], Tensor[(520), float64]) */;
  %562 = %561.0;
  (%562,)
}

def @func_5308() -> (Tensor[(14, 14, 9), float64],) {
  %564 = fn () -> (Tensor[(14, 14, 9), float64],) {
    %563 = @func_3658() /* ty=Tensor[(14, 14, 9), float64] */;
    (%563,)
  };
  %564() /* ty=(Tensor[(14, 14, 9), float64],) */
}

def @func_8555() -> Tensor[(520), float64] {
  %565 = fn () -> Tensor[(520), float64] {
    @func_2626() /* ty=Tensor[(520), float64] */
  };
  %565() /* ty=Tensor[(520), float64] */
}

def @func_1805(%var_1803: Tensor[(36), bool]) -> (Tensor[(14, 14, 9), float64], Tensor[(2, 12, 3), bool], Tensor[(36), bool], Tensor[(72), bool], Tensor[(30, 2), float32]) {
  @func_1802(%var_1803) /* ty=(Tensor[(14, 14, 9), float64], Tensor[(2, 12, 3), bool], Tensor[(36), bool], Tensor[(72), bool], Tensor[(30, 2), float32]) */
}

def @func_8867() -> (Tensor[(14, 14, 9), float64],) {
  %566 = @func_4168() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %567 = %566.0;
  (%567,)
}

def @func_5077() -> (Tensor[(14, 14, 9), float64],) {
  @func_5075() /* ty=(Tensor[(14, 14, 9), float64],) */
}

def @func_9643(%var_9642: Tensor[(5, 104), uint64]) -> (Tensor[(14, 14, 9), float64], Tensor[(5, 104), int64]) {
  %576 = fn (%var_9623: Tensor[(5, 104), uint64]) -> (Tensor[(14, 14, 9), float64], Tensor[(5, 104), int64]) {
    %568 = @func_4953() /* ty=(Tensor[(14, 14, 9), float64],) */;
    %569 = @func_6220() /* ty=Tensor[(5, 104), uint64] */;
    %570 = cast(%var_9623, dtype="int64") /* ty=Tensor[(5, 104), int64] */;
    %571 = shape_of(%569, dtype="int32") /* ty=Tensor[(2), int32] */;
    %572 = cast(%569, dtype="int64") /* ty=Tensor[(5, 104), int64] */;
    %573 = dyn.reshape(%570, %571, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
    %574 = %568.0;
    %575 = left_shift(%572, %573) /* ty=Tensor[(5, 104), int64] */;
    (%574, %575)
  };
  %576(%var_9642) /* ty=(Tensor[(14, 14, 9), float64], Tensor[(5, 104), int64]) */
}

def @func_1845(%var_1843: Tensor[(5, 104), float64]) -> (Tensor[(14, 14, 9), float32], Tensor[(13, 5, 8), float64], Tensor[(5, 104), float64]) {
  %577 = @func_1673() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %578 = %577.0;
  %579 = cast(%578, dtype="float32") /* ty=Tensor[(14, 14, 9), float32] */;
  %580 = cast(%var_1843, dtype="float64") /* ty=Tensor[(5, 104), float64] */;
  %581 = reshape(%580, newshape=[13, 5, 8]) /* ty=Tensor[(13, 5, 8), float64] */;
  %582 = @func_1769(%581) /* ty=(Tensor[(13, 5, 8), float64],) */;
  %583 = log10(%579) /* ty=Tensor[(14, 14, 9), float32] */;
  %584 = %582.0;
  (%583, %584, %var_1843)
}

def @func_4641() -> (Tensor[(14, 14, 9), float64],) {
  %585 = @func_2475() /* ty=Tensor[(14, 14, 9), float64] */;
  (%585,)
}

def @func_9886() -> Tensor[(14, 14, 9), float64] {
  @func_9884() /* ty=Tensor[(14, 14, 9), float64] */
}

def @func_5075() -> (Tensor[(14, 14, 9), float64],) {
  %586 = @func_5043() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */;
  %587 = %586.1;
  (%587,)
}

def @func_2337(%var_2336: Tensor[(36), bool]) -> (Tensor[(14, 14, 9), float64], Tensor[(72), bool], Tensor[(36), bool]) {
  %594 = fn (%var_2323: Tensor[(36), bool]) -> (Tensor[(14, 14, 9), float64], Tensor[(72), bool], Tensor[(36), bool]) {
    %588 = @func_1673() /* ty=(Tensor[(14, 14, 9), float64],) */;
    %589 = cast(%var_2323, dtype="bool") /* ty=Tensor[(36), bool] */;
    %590 = reshape(%589, newshape=[36]) /* ty=Tensor[(36), bool] */;
    %591 = @func_1802(%590) /* ty=(Tensor[(14, 14, 9), float64], Tensor[(2, 12, 3), bool], Tensor[(36), bool], Tensor[(72), bool], Tensor[(30, 2), float32]) */;
    %592 = %588.0;
    %593 = %591.3;
    (%592, %593, %var_2323)
  };
  %594(%var_2336) /* ty=(Tensor[(14, 14, 9), float64], Tensor[(72), bool], Tensor[(36), bool]) */
}

def @func_6678(%var_6647: Tensor[(520), float64], %var_6650: Tensor[(2160), float32], %var_6671: Tensor[(30), float64]) -> (Tensor[(14, 14, 9), float64], Tensor[(4, 16, 8), float64], Tensor[(512), float64], Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(60), float32], Tensor[(520), float64], Tensor[(360, 6), int8], Tensor[(2160), float32], Tensor[(6, 5, 1), float64], Tensor[(30), float64]) {
  %595 = @func_1673() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %596 = %595.0;
  %597 = cast(%596, dtype="float64") /* ty=Tensor[(14, 14, 9), float64] */;
  %598 = cast(meta[relay.Constant][27] /* ty=Tensor[(512), float64] */, dtype="float64") /* ty=Tensor[(512), float64] */;
  %599 = reshape(%598, newshape=[4, 16, 8]) /* ty=Tensor[(4, 16, 8), float64] */;
  %600 = @func_6228(%599) /* ty=(Tensor[(4, 16, 8), float64],) */;
  %601 = @func_3621() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %602 = @func_2917() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %603 = cast(%var_6647, dtype="float64") /* ty=Tensor[(520), float64] */;
  %604 = reshape(%603, newshape=[520]) /* ty=Tensor[(520), float64] */;
  %605 = @func_3042(%604) /* ty=(Tensor[(14, 14, 9), float64], Tensor[(13, 5, 8), float64], Tensor[(520), float32], Tensor[(6, 10, ?), uint8], Tensor[(60), float32], Tensor[(14, 14, 9), float32], Tensor[(14, 14, 9), float64]) */;
  %606 = cast(%var_6650, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %607 = reshape(%606, newshape=[360, 6]) /* ty=Tensor[(360, 6), float32] */;
  %608 = @func_4838(%607) /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(360, 6), int8]) */;
  %609 = cast(%var_6671, dtype="float64") /* ty=Tensor[(30), float64] */;
  %610 = reshape(%609, newshape=[6, 5, 1]) /* ty=Tensor[(6, 5, 1), float64] */;
  %611 = tan(%597) /* ty=Tensor[(14, 14, 9), float64] */;
  %612 = %600.0;
  %613 = %601.0;
  %614 = %602.0;
  %615 = %605.4;
  %616 = %608.2;
  %617 = @func_4773(%610) /* ty=Tensor[(6, 5, 1), float64] */;
  (%611, %612, meta[relay.Constant][27] /* ty=Tensor[(512), float64] */, %613, %614, %615, %var_6647, %616, %var_6650, %617, %var_6671)
}

def @func_2918() -> (Tensor[(14, 14, 9), float64],) {
  %620 = fn () -> (Tensor[(14, 14, 9), float64],) {
    %618 = @func_1673() /* ty=(Tensor[(14, 14, 9), float64],) */;
    %619 = %618.0;
    (%619,)
  };
  %620() /* ty=(Tensor[(14, 14, 9), float64],) */
}

def @func_7503() -> Tensor[(520), float64] {
  %622 = fn () -> Tensor[(520), float64] {
    %621 = @func_2151() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(72), bool], Tensor[(36), bool], Tensor[(14, 14, 9), float64], Tensor[(2160), float32], Tensor[(5, 104), float64], Tensor[(520), float64]) */;
    %621.6
  };
  %622() /* ty=Tensor[(520), float64] */
}

def @func_9590() -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) {
  %627 = fn () -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) {
    %623 = @func_1952() /* ty=(Tensor[(14, 14, 9), float64],) */;
    %624 = @func_3071() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), bool]) */;
    %625 = %623.0;
    %626 = %624.0;
    (%625, %626)
  };
  %627() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */
}

def @func_9167() -> (Tensor[(14, 14, 9), float64],) {
  %630 = fn () -> (Tensor[(14, 14, 9), float64],) {
    %628 = @func_7554() /* ty=(Tensor[(14, 14, 9), float64],) */;
    %629 = %628.0;
    (%629,)
  };
  %630() /* ty=(Tensor[(14, 14, 9), float64],) */
}

def @func_10339(%var_10336: Tensor[(4, 2), uint32], %var_10337: Tensor[(12, 4), uint32], %var_10338: Tensor[(15, 12, 12), float32]) -> (Tensor[(14, 14, 9), float64], Tensor[(60), float32], Tensor[(4, 2), uint32], Tensor[(12, 4), uint32], Tensor[(15, 12, 12), bool], Tensor[(6, 10, ?), bool]) {
  %655 = fn (%var_10312: Tensor[(4, 2), uint32], %var_10313: Tensor[(12, 4), uint32], %var_10315: Tensor[(15, 12, 12), float32]) -> (Tensor[(14, 14, 9), float64], Tensor[(60), float32], Tensor[(4, 2), uint32], Tensor[(12, 4), uint32], Tensor[(15, 12, 12), bool], Tensor[(6, 10, ?), bool]) {
    %631 = @func_1734() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */;
    %632 = cast(%var_10312, dtype="uint32") /* ty=Tensor[(4, 2), uint32] */;
    %633 = cast(%var_10313, dtype="uint32") /* ty=Tensor[(12, 4), uint32] */;
    %634 = reshape(%632, newshape=[4, 2, 1]) /* ty=Tensor[(4, 2, 1), uint32] */;
    %635 = reshape(%633, newshape=[4, 2, 6]) /* ty=Tensor[(4, 2, 6), uint32] */;
    %636 = @func_1293(%634, %635) /* ty=(Tensor[(4, 2, 6), uint32], Tensor[(6, 10, ?), uint8], Tensor[(60), float32], Tensor[(15, 12, 12), float32], Tensor[(2160), float32]) */;
    %637 = %636.3;
    %638 = cast(%var_10315, dtype="bool") /* ty=Tensor[(15, 12, 12), bool] */;
    %639 = shape_of(%637, dtype="int32") /* ty=Tensor[(3), int32] */;
    %640 = cast(%637, dtype="bool") /* ty=Tensor[(15, 12, 12), bool] */;
    %641 = dyn.reshape(%638, %639, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %642 = cast(meta[relay.Constant][28] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
    %643 = reshape(%642, newshape=[6, 10, 1]) /* ty=Tensor[(6, 10, 1), float32] */;
    %644 = @func_46(%643) /* ty=(Tensor[(6, 10, ?), uint8],) */;
    %645 = %644.0;
    %646 = cast(%645, dtype="float64") /* ty=Tensor[(6, 10, ?), float64] */;
    %647 = asin(%646) /* ty=Tensor[(6, 10, ?), float64] */;
    %648 = cast(%645, dtype="bool") /* ty=Tensor[(6, 10, ?), bool] */;
    %649 = shape_of(%647, dtype="int32") /* ty=Tensor[(3), int32] */;
    %650 = cast(%647, dtype="bool") /* ty=Tensor[(6, 10, ?), bool] */;
    %651 = dyn.reshape(%648, %649, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %652 = %631.0;
    %653 = greater_equal(%640, %641) /* ty=Tensor[(15, 12, 12), bool] */;
    %654 = not_equal(%650, %651) /* ty=Tensor[(6, 10, ?), bool] */;
    (%652, meta[relay.Constant][28] /* ty=Tensor[(60), float32] */, %var_10312, %var_10313, %653, %654)
  };
  %655(%var_10336, %var_10337, %var_10338) /* ty=(Tensor[(14, 14, 9), float64], Tensor[(60), float32], Tensor[(4, 2), uint32], Tensor[(12, 4), uint32], Tensor[(15, 12, 12), bool], Tensor[(6, 10, ?), bool]) */
}

def @func_5663() -> (Tensor[(520), float64],) {
  @func_5661() /* ty=(Tensor[(520), float64],) */
}

def @func_10818() -> (Tensor[(5, 104), uint64],) {
  %658 = fn () -> (Tensor[(5, 104), uint64],) {
    %656 = @func_10461() /* ty=(Tensor[(5, 104), uint64],) */;
    %657 = %656.0;
    (%657,)
  };
  %658() /* ty=(Tensor[(5, 104), uint64],) */
}

def @func_4348() -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) {
  %663 = fn () -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) {
    %659 = @func_1605() /* ty=(Tensor[(14, 14, 9), float64],) */;
    %660 = @func_2917() /* ty=(Tensor[(14, 14, 9), float64],) */;
    %661 = %659.0;
    %662 = %660.0;
    (%661, %662)
  };
  %663() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */
}

def @func_6002() -> (Tensor[(5, 104), float64],) {
  @func_6000() /* ty=(Tensor[(5, 104), float64],) */
}

def @func_4593() -> Tensor[(14, 14, 9), float32] {
  %665 = fn () -> Tensor[(14, 14, 9), float32] {
    %664 = @func_2201() /* ty=(Tensor[(14, 14, 9), float32],) */;
    %664.0
  };
  %665() /* ty=Tensor[(14, 14, 9), float32] */
}

def @func_9278(%var_9192: Tensor[(2, 9, 14), int16], %var_9230: Tensor[(120), bool]) -> (Tensor[(2, 9, 14), int64], Tensor[(14, 14, 9), float64], Tensor[(120), bool], Tensor[(5, 104), uint8], Tensor[(14, 14, 9), float64], Tensor[(2, 9, 14), float64]) {
  %666 = cast(%var_9192, dtype="bool") /* ty=Tensor[(2, 9, 14), bool] */;
  %667 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(2, 9, 14), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %668 = cast(meta[relay.Constant][29] /* ty=Tensor[(2, 9, 14), int16] */, dtype="bool") /* ty=Tensor[(2, 9, 14), bool] */;
  %669 = dyn.reshape(%666, %667, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %670 = equal(%668, %669) /* ty=Tensor[(2, 9, 14), bool] */;
  %671 = cast(meta[relay.Constant][30] /* ty=Tensor[(2, 9, 14), bool] */, dtype="float64") /* ty=Tensor[(2, 9, 14), float64] */;
  %672 = shape_of(%670, dtype="int32") /* ty=Tensor[(3), int32] */;
  %673 = cast(%670, dtype="float64") /* ty=Tensor[(2, 9, 14), float64] */;
  %674 = dyn.reshape(%671, %672, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %675 = floor_divide(%673, %674) /* ty=Tensor[(2, 9, 14), float64] */;
  %676 = cast(meta[relay.Constant][29] /* ty=Tensor[(2, 9, 14), int16] */, dtype="int64") /* ty=Tensor[(2, 9, 14), int64] */;
  %677 = shape_of(%675, dtype="int32") /* ty=Tensor[(3), int32] */;
  %678 = cast(%675, dtype="int64") /* ty=Tensor[(2, 9, 14), int64] */;
  %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %680 = cast(%var_9230, dtype="bool") /* ty=Tensor[(120), bool] */;
  %681 = reshape(%680, newshape=[8, 15, 1]) /* ty=Tensor[(8, 15, 1), bool] */;
  %682 = @func_4140(%681) /* ty=(Tensor[(8, 15, 14), bool], Tensor[(14, 14, 9), float32], Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */;
  %683 = @func_6000() /* ty=(Tensor[(5, 104), float64],) */;
  %684 = %683.0;
  %685 = @func_2775() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(13, 5, 8), float64], Tensor[(520), float64]) */;
  %686 = %685.2;
  %687 = cast(%686, dtype="uint8") /* ty=Tensor[(520), uint8] */;
  %688 = shape_of(%684, dtype="int32") /* ty=Tensor[(2), int32] */;
  %689 = cast(%684, dtype="uint8") /* ty=Tensor[(5, 104), uint8] */;
  %690 = dyn.reshape(%687, %688, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %691 = @func_5067() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %692 = cast(%670, dtype="float32") /* ty=Tensor[(2, 9, 14), float32] */;
  %693 = sin(%692) /* ty=Tensor[(2, 9, 14), float32] */;
  %694 = cast(%693, dtype="float64") /* ty=Tensor[(2, 9, 14), float64] */;
  %695 = bitwise_xor(%678, %679) /* ty=Tensor[(2, 9, 14), int64] */;
  %696 = %682.2;
  %697 = bitwise_or(%689, %690) /* ty=Tensor[(5, 104), uint8] */;
  %698 = %691.0;
  %699 = cos(%694) /* ty=Tensor[(2, 9, 14), float64] */;
  (%695, %696, %var_9230, %697, %698, %699)
}

def @func_1736() -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) {
  @func_1734() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */
}

def @func_7761() -> (Tensor[(30, 2), float32], Tensor[(14, 14, 9), float64]) {
  %700 = @func_7534() /* ty=(Tensor[(30, 2), float64],) */;
  %701 = %700.0;
  %702 = cast(%701, dtype="float32") /* ty=Tensor[(30, 2), float32] */;
  %703 = log(%702) /* ty=Tensor[(30, 2), float32] */;
  %704 = @func_4278() /* ty=Tensor[(14, 14, 9), float64] */;
  (%703, %704)
}

def @func_2153() -> (Tensor[(14, 14, 9), float64], Tensor[(72), bool], Tensor[(36), bool], Tensor[(14, 14, 9), float64], Tensor[(2160), float32], Tensor[(5, 104), float64], Tensor[(520), float64]) {
  @func_2151() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(72), bool], Tensor[(36), bool], Tensor[(14, 14, 9), float64], Tensor[(2160), float32], Tensor[(5, 104), float64], Tensor[(520), float64]) */
}

def @func_3658() -> Tensor[(14, 14, 9), float64] {
  %705 = @func_3270() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %705.0
}

def @func_9861(%var_9859: Tensor[(4, 1, 12), float32], %var_9860: Tensor[(4, 14, 12), float32]) -> (Tensor[(4, 1, 12), float32], Tensor[(4, 14, 12), uint16]) {
  %711 = fn (%var_9851: Tensor[(4, 1, 12), float32], %var_9854: Tensor[(4, 14, 12), float32]) -> (Tensor[(4, 1, 12), float32], Tensor[(4, 14, 12), uint16]) {
    %706 = cast(%var_9851, dtype="float32") /* ty=Tensor[(4, 1, 12), float32] */;
    %707 = cast(%var_9851, dtype="uint16") /* ty=Tensor[(4, 1, 12), uint16] */;
    %708 = cast(%var_9854, dtype="uint16") /* ty=Tensor[(4, 14, 12), uint16] */;
    %709 = sinh(%706) /* ty=Tensor[(4, 1, 12), float32] */;
    %710 = maximum(%707, %708) /* ty=Tensor[(4, 14, 12), uint16] */;
    (%709, %710)
  };
  %711(%var_9859, %var_9860) /* ty=(Tensor[(4, 1, 12), float32], Tensor[(4, 14, 12), uint16]) */
}

def @func_3249() -> (Tensor[(520), float64],) {
  @func_3247() /* ty=(Tensor[(520), float64],) */
}

def @func_6541() -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) {
  %717 = fn () -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) {
    %712 = @func_4953() /* ty=(Tensor[(14, 14, 9), float64],) */;
    %713 = @func_3071() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), bool]) */;
    %714 = @func_6060() /* ty=Tensor[(14, 14, 9), float64] */;
    %715 = %712.0;
    %716 = %713.0;
    (%714, %715, %716)
  };
  %717() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */
}

def @func_1675() -> (Tensor[(14, 14, 9), float64],) {
  @func_1673() /* ty=(Tensor[(14, 14, 9), float64],) */
}

def @func_7450(%var_7444: Tensor[(60), float32]) -> (Tensor[(520), float64], Tensor[(6, 10, 520), int8], Tensor[(60), float32]) {
  %718 = cast(%var_7444, dtype="float32") /* ty=Tensor[(60), float32] */;
  %719 = reshape(%718, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %720 = @func_6209(%719) /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(60), float32], Tensor[(6, 10, 520), int8]) */;
  %721 = @func_2296() /* ty=Tensor[(520), float64] */;
  %722 = %720.3;
  (%721, %722, %var_7444)
}

def @func_4953() -> (Tensor[(14, 14, 9), float64],) {
  %723 = @func_2722() /* ty=Tensor[(14, 14, 9), float64] */;
  (%723,)
}

def @func_7366(%var_7365: Tensor[(14, 14, 9), bool]) -> Tensor[(14, 14, 9), uint64] {
  %729 = fn (%var_7350: Tensor[(14, 14, 9), bool]) -> Tensor[(14, 14, 9), uint64] {
    %724 = @func_3379() /* ty=Tensor[(14, 14, 9), bool] */;
    %725 = cast(%var_7350, dtype="uint64") /* ty=Tensor[(14, 14, 9), uint64] */;
    %726 = shape_of(%724, dtype="int32") /* ty=Tensor[(3), int32] */;
    %727 = cast(%724, dtype="uint64") /* ty=Tensor[(14, 14, 9), uint64] */;
    %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    left_shift(%727, %728) /* ty=Tensor[(14, 14, 9), uint64] */
  };
  %729(%var_7365) /* ty=Tensor[(14, 14, 9), uint64] */
}

def @func_3571() -> (Tensor[(16, 6, 9), int64], Tensor[(864, 1), int64], Tensor[(14, 14, 9), float64], Tensor[(520), float64], Tensor[(13, 5, 8), float32]) {
  %730 = cast(meta[relay.Constant][31] /* ty=Tensor[(864, 1), int64] */, dtype="int64") /* ty=Tensor[(864, 1), int64] */;
  %731 = cast(meta[relay.Constant][31] /* ty=Tensor[(864, 1), int64] */, dtype="int64") /* ty=Tensor[(864, 1), int64] */;
  %732 = reshape(%730, newshape=[16, 6, 9]) /* ty=Tensor[(16, 6, 9), int64] */;
  %733 = reshape(%731, newshape=[16, 6, 9]) /* ty=Tensor[(16, 6, 9), int64] */;
  %734 = @func_2917() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %735 = @func_2404() /* ty=(Tensor[(14, 14, 9), bool], Tensor[(520), float64]) */;
  %736 = @func_2775() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(13, 5, 8), float64], Tensor[(520), float64]) */;
  %737 = %736.1;
  %738 = cast(%737, dtype="float32") /* ty=Tensor[(13, 5, 8), float32] */;
  %739 = @func_2025(%732, %733) /* ty=Tensor[(16, 6, 9), int64] */;
  %740 = %734.0;
  %741 = %735.1;
  %742 = rsqrt(%738) /* ty=Tensor[(13, 5, 8), float32] */;
  (%739, meta[relay.Constant][31] /* ty=Tensor[(864, 1), int64] */, %740, %741, %742)
}

def @func_7862() -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(30, 2), float64], Tensor[(14, 14, 9), float64]) {
  @func_7860() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(30, 2), float64], Tensor[(14, 14, 9), float64]) */
}

def @func_4278() -> Tensor[(14, 14, 9), float64] {
  %743 = @func_4205() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */;
  %743.0
}

def @func_3573() -> (Tensor[(16, 6, 9), int64], Tensor[(864, 1), int64], Tensor[(14, 14, 9), float64], Tensor[(520), float64], Tensor[(13, 5, 8), float32]) {
  @func_3571() /* ty=(Tensor[(16, 6, 9), int64], Tensor[(864, 1), int64], Tensor[(14, 14, 9), float64], Tensor[(520), float64], Tensor[(13, 5, 8), float32]) */
}

def @func_5331() -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) {
  %744 = @func_2475() /* ty=Tensor[(14, 14, 9), float64] */;
  %745 = @func_4278() /* ty=Tensor[(14, 14, 9), float64] */;
  (%744, %745)
}

def @func_4168() -> (Tensor[(14, 14, 9), float64],) {
  %746 = @func_2415() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %747 = %746.0;
  (%747,)
}

def @func_10797() -> (Tensor[(14, 14, 9), bool], Tensor[(14, 14, 9), float64]) {
  %750 = fn () -> (Tensor[(14, 14, 9), bool], Tensor[(14, 14, 9), float64]) {
    %748 = @func_8567() /* ty=Tensor[(14, 14, 9), bool] */;
    %749 = @func_10380() /* ty=Tensor[(14, 14, 9), float64] */;
    (%748, %749)
  };
  %750() /* ty=(Tensor[(14, 14, 9), bool], Tensor[(14, 14, 9), float64]) */
}

def @func_3907() -> (Tensor[(14, 14, 9), float64], Tensor[(36), bool], Tensor[(36), bool], Tensor[(14, 14, 9), bool], Tensor[(14, 14, 9), float64], Tensor[(2160), float64]) {
  %764 = fn () -> (Tensor[(14, 14, 9), float64], Tensor[(36), bool], Tensor[(36), bool], Tensor[(14, 14, 9), bool], Tensor[(14, 14, 9), float64], Tensor[(2160), float64]) {
    %751 = @func_3607() /* ty=(Tensor[(14, 14, 9), float64],) */;
    %752 = cast(meta[relay.Constant][32] /* ty=Tensor[(36), bool] */, dtype="bool") /* ty=Tensor[(36), bool] */;
    %753 = reshape(%752, newshape=[36]) /* ty=Tensor[(36), bool] */;
    %754 = @func_1802(%753) /* ty=(Tensor[(14, 14, 9), float64], Tensor[(2, 12, 3), bool], Tensor[(36), bool], Tensor[(72), bool], Tensor[(30, 2), float32]) */;
    %755 = cast(meta[relay.Constant][33] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
    %756 = reshape(%755, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
    %757 = @func_1640(%756) /* ty=(Tensor[(14, 14, 9), float64], Tensor[(6, 10, ?), uint8], Tensor[(60), float32], Tensor[(15, 12, 12), float32], Tensor[(2160), float32], Tensor[(14, 14, 9), float64]) */;
    %758 = cast(meta[relay.Constant][33] /* ty=Tensor[(2160), float32] */, dtype="float64") /* ty=Tensor[(2160), float64] */;
    %759 = %751.0;
    %760 = %754.2;
    %761 = @func_3379() /* ty=Tensor[(14, 14, 9), bool] */;
    %762 = %757.5;
    %763 = cos(%758) /* ty=Tensor[(2160), float64] */;
    (%759, %760, meta[relay.Constant][32] /* ty=Tensor[(36), bool] */, %761, %762, %763)
  };
  %764() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(36), bool], Tensor[(36), bool], Tensor[(14, 14, 9), bool], Tensor[(14, 14, 9), float64], Tensor[(2160), float64]) */
}

def @func_6551() -> Tensor[(14, 14, 9), bool] {
  %766 = fn () -> Tensor[(14, 14, 9), bool] {
    %765 = @func_5298() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(5, 104), float64], Tensor[(14, 14, 9), bool]) */;
    %765.2
  };
  %766() /* ty=Tensor[(14, 14, 9), bool] */
}

def @func_7256() -> (Tensor[(520), float64],) {
  @func_7254() /* ty=(Tensor[(520), float64],) */
}

def @func_10381() -> Tensor[(14, 14, 9), float64] {
  %768 = fn () -> Tensor[(14, 14, 9), float64] {
    %767 = @func_6333() /* ty=(Tensor[(14, 14, 9), float64],) */;
    %767.0
  };
  %768() /* ty=Tensor[(14, 14, 9), float64] */
}

def @func_10664(%var_10663: Tensor[(16, 9, 1), float64]) -> (Tensor[(16, 9, 1), float64],) {
  %771 = fn (%var_10652: Tensor[(16, 9, 1), float64]) -> (Tensor[(16, 9, 1), float64],) {
    %769 = cast(%var_10652, dtype="float64") /* ty=Tensor[(16, 9, 1), float64] */;
    %770 = atan(%769) /* ty=Tensor[(16, 9, 1), float64] */;
    (%770,)
  };
  %771(%var_10663) /* ty=(Tensor[(16, 9, 1), float64],) */
}

def @func_6570() -> Tensor[(14, 14, 9), bool] {
  %772 = fn () -> Tensor[(14, 14, 9), bool] {
    @func_6550() /* ty=Tensor[(14, 14, 9), bool] */
  };
  %772() /* ty=Tensor[(14, 14, 9), bool] */
}

def @func_8506() -> (Tensor[(520), float64], Tensor[(14, 2, 15), bool], Tensor[(14, 14, 9), float64], Tensor[(13, 5, 8), float64]) {
  %773 = @func_3247() /* ty=(Tensor[(520), float64],) */;
  %774 = @func_6362() /* ty=(Tensor[(14, 2, 15), bool],) */;
  %775 = @func_5043() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */;
  %776 = %773.0;
  %777 = cast(%776, dtype="float64") /* ty=Tensor[(520), float64] */;
  %778 = reshape(%777, newshape=[5, 104]) /* ty=Tensor[(5, 104), float64] */;
  %779 = @func_1845(%778) /* ty=(Tensor[(14, 14, 9), float32], Tensor[(13, 5, 8), float64], Tensor[(5, 104), float64]) */;
  %780 = %774.0;
  %781 = %775.0;
  %782 = %779.1;
  (%776, %780, %781, %782)
}

def @func_9080() -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) {
  %786 = fn () -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) {
    %783 = @func_5331() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */;
    %784 = @func_7104() /* ty=Tensor[(14, 14, 9), float64] */;
    %785 = %783.0;
    (%784, %785)
  };
  %786() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */
}

def @func_9403() -> (Tensor[(36), bool], Tensor[(36), bool], Tensor[(14, 14, 9), float64]) {
  @func_9401() /* ty=(Tensor[(36), bool], Tensor[(36), bool], Tensor[(14, 14, 9), float64]) */
}

def @func_8569() -> Tensor[(14, 14, 9), bool] {
  @func_8567() /* ty=Tensor[(14, 14, 9), bool] */
}

def @func_6683(%var_6680: Tensor[(520), float64], %var_6681: Tensor[(2160), float32], %var_6682: Tensor[(30), float64]) -> (Tensor[(14, 14, 9), float64], Tensor[(4, 16, 8), float64], Tensor[(512), float64], Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(60), float32], Tensor[(520), float64], Tensor[(360, 6), int8], Tensor[(2160), float32], Tensor[(6, 5, 1), float64], Tensor[(30), float64]) {
  @func_6678(%var_6680, %var_6681, %var_6682) /* ty=(Tensor[(14, 14, 9), float64], Tensor[(4, 16, 8), float64], Tensor[(512), float64], Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(60), float32], Tensor[(520), float64], Tensor[(360, 6), int8], Tensor[(2160), float32], Tensor[(6, 5, 1), float64], Tensor[(30), float64]) */
}

def @func_7410() -> Tensor[(14, 14, 9), float64] {
  @func_4894() /* ty=Tensor[(14, 14, 9), float64] */
}

def @func_3288() -> Tensor[(14, 14, 9), float64] {
  %787 = @func_3071() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), bool]) */;
  %787.0
}

def @func_5647(%var_5628: Tensor[(14, 14, 9), float64]) -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), int8], Tensor[(6, 10, ?), uint8], Tensor[(2160), float32]) {
  %788 = @func_1605() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %789 = @func_2415() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %790 = %789.0;
  %791 = cast(%var_5628, dtype="int8") /* ty=Tensor[(14, 14, 9), int8] */;
  %792 = shape_of(%790, dtype="int32") /* ty=Tensor[(3), int32] */;
  %793 = cast(%790, dtype="int8") /* ty=Tensor[(14, 14, 9), int8] */;
  %794 = dyn.reshape(%791, %792, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %795 = cast(meta[relay.Constant][34] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %796 = reshape(%795, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
  %797 = @func_1640(%796) /* ty=(Tensor[(14, 14, 9), float64], Tensor[(6, 10, ?), uint8], Tensor[(60), float32], Tensor[(15, 12, 12), float32], Tensor[(2160), float32], Tensor[(14, 14, 9), float64]) */;
  %798 = %788.0;
  %799 = minimum(%793, %794) /* ty=Tensor[(14, 14, 9), int8] */;
  %800 = %797.1;
  (%798, %799, %800, meta[relay.Constant][34] /* ty=Tensor[(2160), float32] */)
}

def @func_5238() -> (Tensor[(14, 14, 9), float64], Tensor[(3, 15, 3), float64], Tensor[(135), float64], Tensor[(14, 14, 9), float32], Tensor[(5, 104), uint64]) {
  @func_5236() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(3, 15, 3), float64], Tensor[(135), float64], Tensor[(14, 14, 9), float32], Tensor[(5, 104), uint64]) */
}

def @func_2434() -> (Tensor[(14, 14, 9), float64],) {
  @func_2432() /* ty=(Tensor[(14, 14, 9), float64],) */
}

def @func_6209(%var_6193: Tensor[(60), float32]) -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(60), float32], Tensor[(6, 10, 520), int8]) {
  %801 = @func_5075() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %802 = @func_5307() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %803 = cast(%var_6193, dtype="float32") /* ty=Tensor[(60), float32] */;
  %804 = reshape(%803, newshape=[6, 10, 1]) /* ty=Tensor[(6, 10, 1), float32] */;
  %805 = @func_46(%804) /* ty=(Tensor[(6, 10, ?), uint8],) */;
  %806 = %805.0;
  %807 = @func_2365() /* ty=Tensor[(520), float64] */;
  %808 = cast(%806, dtype="int8") /* ty=Tensor[(6, 10, ?), int8] */;
  %809 = cast(%807, dtype="int8") /* ty=Tensor[(520), int8] */;
  %810 = %801.0;
  %811 = %802.0;
  %812 = left_shift(%808, %809) /* ty=Tensor[(6, 10, 520), int8] */;
  (%810, %811, %var_6193, %812)
}

def @func_9282(%var_9280: Tensor[(2, 9, 14), int16], %var_9281: Tensor[(120), bool]) -> (Tensor[(2, 9, 14), int64], Tensor[(14, 14, 9), float64], Tensor[(120), bool], Tensor[(5, 104), uint8], Tensor[(14, 14, 9), float64], Tensor[(2, 9, 14), float64]) {
  @func_9278(%var_9280, %var_9281) /* ty=(Tensor[(2, 9, 14), int64], Tensor[(14, 14, 9), float64], Tensor[(120), bool], Tensor[(5, 104), uint8], Tensor[(14, 14, 9), float64], Tensor[(2, 9, 14), float64]) */
}

def @func_10178() -> Tensor[(14, 14, 9), float64] {
  %814 = fn () -> Tensor[(14, 14, 9), float64] {
    %813 = @func_7992() /* ty=(Tensor[(14, 14, 9), float64],) */;
    %813.0
  };
  %814() /* ty=Tensor[(14, 14, 9), float64] */
}

def @func_2297() -> Tensor[(520), float64] {
  %816 = fn () -> Tensor[(520), float64] {
    %815 = @func_2151() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(72), bool], Tensor[(36), bool], Tensor[(14, 14, 9), float64], Tensor[(2160), float32], Tensor[(5, 104), float64], Tensor[(520), float64]) */;
    %815.6
  };
  %816() /* ty=Tensor[(520), float64] */
}

def @func_7046() -> (Tensor[(14, 14, 9), float64],) {
  %819 = fn () -> (Tensor[(14, 14, 9), float64],) {
    %817 = @func_5067() /* ty=(Tensor[(14, 14, 9), float64],) */;
    %818 = %817.0;
    (%818,)
  };
  %819() /* ty=(Tensor[(14, 14, 9), float64],) */
}

def @func_4165() -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) {
  %823 = fn () -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) {
    %820 = @func_2415() /* ty=(Tensor[(14, 14, 9), float64],) */;
    %821 = %820.0;
    %822 = @func_2475() /* ty=Tensor[(14, 14, 9), float64] */;
    (%821, %822)
  };
  %823() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */
}

def @func_4088(%var_4087: Tensor[(14, 14, 9), float32]) -> (Tensor[(60), float32], Tensor[(520), float64], Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(16, 6, 9), int64], Tensor[(6, 10, ?), float64]) {
  %843 = fn (%var_4051: Tensor[(14, 14, 9), float32]) -> (Tensor[(60), float32], Tensor[(520), float64], Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(16, 6, 9), int64], Tensor[(6, 10, ?), float64]) {
    %824 = @func_3247() /* ty=(Tensor[(520), float64],) */;
    %825 = @func_2201() /* ty=(Tensor[(14, 14, 9), float32],) */;
    %826 = %825.0;
    %827 = cast(%var_4051, dtype="float64") /* ty=Tensor[(14, 14, 9), float64] */;
    %828 = shape_of(%826, dtype="int32") /* ty=Tensor[(3), int32] */;
    %829 = cast(%826, dtype="float64") /* ty=Tensor[(14, 14, 9), float64] */;
    %830 = dyn.reshape(%827, %828, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %831 = @func_2415() /* ty=(Tensor[(14, 14, 9), float64],) */;
    %832 = @func_3571() /* ty=(Tensor[(16, 6, 9), int64], Tensor[(864, 1), int64], Tensor[(14, 14, 9), float64], Tensor[(520), float64], Tensor[(13, 5, 8), float32]) */;
    %833 = cast(meta[relay.Constant][35] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
    %834 = reshape(%833, newshape=[6, 10, 1]) /* ty=Tensor[(6, 10, 1), float32] */;
    %835 = @func_46(%834) /* ty=(Tensor[(6, 10, ?), uint8],) */;
    %836 = %835.0;
    %837 = cast(%836, dtype="float64") /* ty=Tensor[(6, 10, ?), float64] */;
    %838 = %824.0;
    %839 = divide(%829, %830) /* ty=Tensor[(14, 14, 9), float64] */;
    %840 = %831.0;
    %841 = %832.0;
    %842 = log10(%837) /* ty=Tensor[(6, 10, ?), float64] */;
    (meta[relay.Constant][35] /* ty=Tensor[(60), float32] */, %838, %839, %840, %841, %842)
  };
  %843(%var_4087) /* ty=(Tensor[(60), float32], Tensor[(520), float64], Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(16, 6, 9), int64], Tensor[(6, 10, ?), float64]) */
}

def @func_4206() -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) {
  %848 = fn () -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) {
    %844 = @func_4164() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */;
    %845 = %844.0;
    %846 = @func_2722() /* ty=Tensor[(14, 14, 9), float64] */;
    %847 = @func_2722() /* ty=Tensor[(14, 14, 9), float64] */;
    (%845, %846, %847)
  };
  %848() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */
}

def @func_10506(%var_10505: Tensor[(14, 14, 9), float64]) -> (Tensor[(36), bool], Tensor[(14, 14, 9), bool], Tensor[(300), float64], Tensor[(14, 14, 9), bool]) {
  %863 = fn (%var_10497: Tensor[(14, 14, 9), float64]) -> (Tensor[(36), bool], Tensor[(14, 14, 9), bool], Tensor[(300), float64], Tensor[(14, 14, 9), bool]) {
    %849 = @func_3418() /* ty=(Tensor[(36), bool],) */;
    %850 = cast(meta[relay.Constant][36] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
    %851 = cast(meta[relay.Constant][36] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
    %852 = reshape(%850, newshape=[6, 10, 5]) /* ty=Tensor[(6, 10, 5), float64] */;
    %853 = reshape(%851, newshape=[6, 10, 5]) /* ty=Tensor[(6, 10, 5), float64] */;
    %854 = @func_5784(%852, %853) /* ty=(Tensor[(6, 10, 5), float64], Tensor[(6, 10, 5), float64], Tensor[(14, 14, 9), float32], Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */;
    %855 = %854.3;
    %856 = cast(%var_10497, dtype="bool") /* ty=Tensor[(14, 14, 9), bool] */;
    %857 = shape_of(%855, dtype="int32") /* ty=Tensor[(3), int32] */;
    %858 = cast(%855, dtype="bool") /* ty=Tensor[(14, 14, 9), bool] */;
    %859 = dyn.reshape(%856, %857, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %860 = %849.0;
    %861 = @func_3379() /* ty=Tensor[(14, 14, 9), bool] */;
    %862 = greater_equal(%858, %859) /* ty=Tensor[(14, 14, 9), bool] */;
    (%860, %861, meta[relay.Constant][36] /* ty=Tensor[(300), float64] */, %862)
  };
  %863(%var_10505) /* ty=(Tensor[(36), bool], Tensor[(14, 14, 9), bool], Tensor[(300), float64], Tensor[(14, 14, 9), bool]) */
}

def @func_7235() -> (Tensor[(520), float64],) {
  %866 = fn () -> (Tensor[(520), float64],) {
    %864 = @func_5099() /* ty=(Tensor[(520), float64],) */;
    %865 = %864.0;
    (%865,)
  };
  %866() /* ty=(Tensor[(520), float64],) */
}

def @func_6163(%var_6162: Tensor[(13, 5, 8), float32]) -> (Tensor[(135), float64], Tensor[(13, 5, 8), int64]) {
  %876 = fn (%var_6154: Tensor[(13, 5, 8), float32]) -> (Tensor[(135), float64], Tensor[(13, 5, 8), int64]) {
    %867 = @func_5236() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(3, 15, 3), float64], Tensor[(135), float64], Tensor[(14, 14, 9), float32], Tensor[(5, 104), uint64]) */;
    %868 = @func_3571() /* ty=(Tensor[(16, 6, 9), int64], Tensor[(864, 1), int64], Tensor[(14, 14, 9), float64], Tensor[(520), float64], Tensor[(13, 5, 8), float32]) */;
    %869 = %868.4;
    %870 = cast(%var_6154, dtype="int64") /* ty=Tensor[(13, 5, 8), int64] */;
    %871 = shape_of(%869, dtype="int32") /* ty=Tensor[(3), int32] */;
    %872 = cast(%869, dtype="int64") /* ty=Tensor[(13, 5, 8), int64] */;
    %873 = dyn.reshape(%870, %871, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %874 = %867.2;
    %875 = left_shift(%872, %873) /* ty=Tensor[(13, 5, 8), int64] */;
    (%874, %875)
  };
  %876(%var_6162) /* ty=(Tensor[(135), float64], Tensor[(13, 5, 8), int64]) */
}

def @func_10235() -> (Tensor[(14, 14, 9), float64],) {
  %879 = fn () -> (Tensor[(14, 14, 9), float64],) {
    %877 = @func_6589() /* ty=(Tensor[(14, 14, 9), float64],) */;
    %878 = %877.0;
    (%878,)
  };
  %879() /* ty=(Tensor[(14, 14, 9), float64],) */
}

def @func_4955() -> (Tensor[(14, 14, 9), float64],) {
  @func_4953() /* ty=(Tensor[(14, 14, 9), float64],) */
}

def @func_7197(%var_7195: int8, %var_7196: Tensor[(4, 1, 9), int8]) -> (Tensor[(520), float64], Tensor[(14, 14, 9), float64], Tensor[(4, ?, 9), float32], Tensor[(14, 2, 15), bool], Tensor[(14, 14, 9), float64], Tensor[(4, 1, 9), float32], Tensor[(14, 14, 9), bool], Tensor[(3, 15, 3), float64], Tensor[(3, 45), float64]) {
  @func_7193(%var_7195, %var_7196) /* ty=(Tensor[(520), float64], Tensor[(14, 14, 9), float64], Tensor[(4, ?, 9), float32], Tensor[(14, 2, 15), bool], Tensor[(14, 14, 9), float64], Tensor[(4, 1, 9), float32], Tensor[(14, 14, 9), bool], Tensor[(3, 15, 3), float64], Tensor[(3, 45), float64]) */
}

def @func_3608() -> (Tensor[(14, 14, 9), float64],) {
  %882 = fn () -> (Tensor[(14, 14, 9), float64],) {
    %880 = @func_2151() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(72), bool], Tensor[(36), bool], Tensor[(14, 14, 9), float64], Tensor[(2160), float32], Tensor[(5, 104), float64], Tensor[(520), float64]) */;
    %881 = %880.3;
    (%881,)
  };
  %882() /* ty=(Tensor[(14, 14, 9), float64],) */
}

def @func_4643() -> (Tensor[(14, 14, 9), float64],) {
  @func_4641() /* ty=(Tensor[(14, 14, 9), float64],) */
}

def @func_6301() -> (Tensor[(14, 14, 9), float64],) {
  %883 = @func_5331() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */;
  %884 = %883.0;
  (%884,)
}

def @func_8813() -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float32]) {
  @func_8811() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float32]) */
}

def @func_5784(%var_5702: Tensor[(6, 10, 5), float64], %var_5731: Tensor[(6, 10, 5), float64]) -> (Tensor[(6, 10, 5), float64], Tensor[(6, 10, 5), float64], Tensor[(14, 14, 9), float32], Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) {
  %885 = cast(%var_5702, dtype="float64") /* ty=Tensor[(6, 10, 5), float64] */;
  %886 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(6, 10, 5), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %887 = cast(meta[relay.Constant][37] /* ty=Tensor[(6, 10, 5), float64] */, dtype="float64") /* ty=Tensor[(6, 10, 5), float64] */;
  %888 = dyn.reshape(%885, %886, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %889 = cast(%var_5731, dtype="float64") /* ty=Tensor[(6, 10, 5), float64] */;
  %890 = shape_of(%var_5702, dtype="int32") /* ty=Tensor[(3), int32] */;
  %891 = cast(%var_5702, dtype="float64") /* ty=Tensor[(6, 10, 5), float64] */;
  %892 = dyn.reshape(%889, %890, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %893 = @func_1605() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %894 = %893.0;
  %895 = cast(%894, dtype="float64") /* ty=Tensor[(14, 14, 9), float64] */;
  %896 = @func_1734() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */;
  %897 = divide(%887, %888) /* ty=Tensor[(6, 10, 5), float64] */;
  %898 = floor_divide(%891, %892) /* ty=Tensor[(6, 10, 5), float64] */;
  %899 = @func_4592() /* ty=Tensor[(14, 14, 9), float32] */;
  %900 = exp(%895) /* ty=Tensor[(14, 14, 9), float64] */;
  %901 = %896.1;
  (%897, %898, %899, %900, %901)
}

def @func_6796(%var_6771: Tensor[(135), float64]) -> (Tensor[(14, 14, 9), float64], Tensor[(135), float64], Tensor[(3, 15, 3), float32]) {
  %902 = @func_5298() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(5, 104), float64], Tensor[(14, 14, 9), bool]) */;
  %903 = cast(%var_6771, dtype="float64") /* ty=Tensor[(135), float64] */;
  %904 = reshape(%903, newshape=[3, 15, 3]) /* ty=Tensor[(3, 15, 3), float64] */;
  %905 = @func_2503(%904) /* ty=Tensor[(3, 15, 3), float64] */;
  %906 = cast(%905, dtype="float32") /* ty=Tensor[(3, 15, 3), float32] */;
  %907 = %902.0;
  %908 = rsqrt(%906) /* ty=Tensor[(3, 15, 3), float32] */;
  (%907, %var_6771, %908)
}

def @func_6591() -> (Tensor[(14, 14, 9), float64],) {
  @func_6589() /* ty=(Tensor[(14, 14, 9), float64],) */
}

def @func_8109() -> Tensor[(14, 14, 9), float64] {
  %910 = fn () -> Tensor[(14, 14, 9), float64] {
    %909 = @func_5331() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */;
    %909.0
  };
  %910() /* ty=Tensor[(14, 14, 9), float64] */
}

def @func_7891() -> (Tensor[(14, 14, 9), float32],) {
  @func_7889() /* ty=(Tensor[(14, 14, 9), float32],) */
}

def @func_5299() -> (Tensor[(14, 14, 9), float64], Tensor[(5, 104), float64], Tensor[(14, 14, 9), bool]) {
  %922 = fn () -> (Tensor[(14, 14, 9), float64], Tensor[(5, 104), float64], Tensor[(14, 14, 9), bool]) {
    %911 = @func_3621() /* ty=(Tensor[(14, 14, 9), float64],) */;
    %912 = @func_4784() /* ty=(Tensor[(5, 104), float64],) */;
    %913 = %912.0;
    %914 = cast(%913, dtype="float64") /* ty=Tensor[(5, 104), float64] */;
    %915 = cos(%914) /* ty=Tensor[(5, 104), float64] */;
    %916 = cast(%915, dtype="float64") /* ty=Tensor[(5, 104), float64] */;
    %917 = %911.0;
    %918 = cast(%917, dtype="float32") /* ty=Tensor[(14, 14, 9), float32] */;
    %919 = reshape(%918, newshape=[14, 14, 9]) /* ty=Tensor[(14, 14, 9), float32] */;
    %920 = rsqrt(%916) /* ty=Tensor[(5, 104), float64] */;
    %921 = @func_2535(%919) /* ty=Tensor[(14, 14, 9), bool] */;
    (%917, %920, %921)
  };
  %922() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(5, 104), float64], Tensor[(14, 14, 9), bool]) */
}

def @func_6060() -> Tensor[(14, 14, 9), float64] {
  %923 = @func_1908() /* ty=(Tensor[(14, 14, 9), float32], Tensor[(14, 14, 9), float64]) */;
  %924 = %923.0;
  %925 = cast(%924, dtype="float64") /* ty=Tensor[(14, 14, 9), float64] */;
  asinh(%925) /* ty=Tensor[(14, 14, 9), float64] */
}

def @func_5333() -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) {
  @func_5331() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */
}

def @func_8436(%var_8435: Tensor[(16, 4, 5), float32]) -> (Tensor[(16, 4, 5), int16],) {
  %936 = fn (%var_8404: Tensor[(16, 4, 5), float32]) -> (Tensor[(16, 4, 5), int16],) {
    %926 = cast(%var_8404, dtype="float32") /* ty=Tensor[(16, 4, 5), float32] */;
    %927 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(16, 4, 5), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %928 = cast(meta[relay.Constant][38] /* ty=Tensor[(16, 4, 5), float32] */, dtype="float32") /* ty=Tensor[(16, 4, 5), float32] */;
    %929 = dyn.reshape(%926, %927, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %930 = mod(%928, %929) /* ty=Tensor[(16, 4, 5), float32] */;
    %931 = cast(meta[relay.Constant][38] /* ty=Tensor[(16, 4, 5), float32] */, dtype="int16") /* ty=Tensor[(16, 4, 5), int16] */;
    %932 = shape_of(%930, dtype="int32") /* ty=Tensor[(3), int32] */;
    %933 = cast(%930, dtype="int16") /* ty=Tensor[(16, 4, 5), int16] */;
    %934 = dyn.reshape(%931, %932, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %935 = minimum(%933, %934) /* ty=Tensor[(16, 4, 5), int16] */;
    (%935,)
  };
  %936(%var_8435) /* ty=(Tensor[(16, 4, 5), int16],) */
}

def @func_9299() -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), bool]) {
  @func_9297() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), bool]) */
}

def @func_5792() -> Tensor[(520), float64] {
  @func_2365() /* ty=Tensor[(520), float64] */
}

def @func_5099() -> (Tensor[(520), float64],) {
  %937 = @func_2296() /* ty=Tensor[(520), float64] */;
  (%937,)
}

def @func_8173(%var_8172: Tensor[(135), float64]) -> (Tensor[(14, 14, 9), bool], Tensor[(135), float64], Tensor[(3, 15, 3), float64]) {
  %945 = fn (%var_8124: Tensor[(135), float64]) -> (Tensor[(14, 14, 9), bool], Tensor[(135), float64], Tensor[(3, 15, 3), float64]) {
    %938 = @func_5298() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(5, 104), float64], Tensor[(14, 14, 9), bool]) */;
    %939 = cast(%var_8124, dtype="float64") /* ty=Tensor[(135), float64] */;
    %940 = reshape(%939, newshape=[3, 15, 3]) /* ty=Tensor[(3, 15, 3), float64] */;
    %941 = @func_2503(%940) /* ty=Tensor[(3, 15, 3), float64] */;
    %942 = cast(%941, dtype="float64") /* ty=Tensor[(3, 15, 3), float64] */;
    %943 = %938.2;
    %944 = tan(%942) /* ty=Tensor[(3, 15, 3), float64] */;
    (%943, %var_8124, %944)
  };
  %945(%var_8172) /* ty=(Tensor[(14, 14, 9), bool], Tensor[(135), float64], Tensor[(3, 15, 3), float64]) */
}

def @func_6087() -> Tensor[(14, 14, 9), float64] {
  %946 = fn () -> Tensor[(14, 14, 9), float64] {
    @func_4278() /* ty=Tensor[(14, 14, 9), float64] */
  };
  %946() /* ty=Tensor[(14, 14, 9), float64] */
}

def @func_7993() -> (Tensor[(14, 14, 9), float64],) {
  %948 = fn () -> (Tensor[(14, 14, 9), float64],) {
    %947 = @func_6086() /* ty=Tensor[(14, 14, 9), float64] */;
    (%947,)
  };
  %948() /* ty=(Tensor[(14, 14, 9), float64],) */
}

def @func_3991(%var_3987: Tensor[(36), bool], %var_3988: Tensor[(72), bool], %var_3989: Tensor[(60), float32], %var_3990: Tensor[(14, 14, 9), bool]) -> (Tensor[(6, 10, ?), uint8], Tensor[(36), bool], Tensor[(72), bool], Tensor[(60), float32], Tensor[(14, 14, 9), float32], Tensor[(14, 14, 9), float32], Tensor[(14, 14, 9), float64]) {
  %971 = fn (%var_3954: Tensor[(36), bool], %var_3955: Tensor[(72), bool], %var_3956: Tensor[(60), float32], %var_3970: Tensor[(14, 14, 9), bool]) -> (Tensor[(6, 10, ?), uint8], Tensor[(36), bool], Tensor[(72), bool], Tensor[(60), float32], Tensor[(14, 14, 9), float32], Tensor[(14, 14, 9), float32], Tensor[(14, 14, 9), float64]) {
    %949 = cast(%var_3954, dtype="bool") /* ty=Tensor[(36), bool] */;
    %950 = cast(%var_3955, dtype="bool") /* ty=Tensor[(72), bool] */;
    %951 = cast(%var_3956, dtype="float32") /* ty=Tensor[(60), float32] */;
    %952 = reshape(%949, newshape=[1, 12, 3]) /* ty=Tensor[(1, 12, 3), bool] */;
    %953 = reshape(%950, newshape=[2, 12, 3]) /* ty=Tensor[(2, 12, 3), bool] */;
    %954 = reshape(%951, newshape=[60]) /* ty=Tensor[(60), float32] */;
    %955 = @func_642(%952, %953, %954) /* ty=(Tensor[(2, 12, 3), bool], Tensor[(6, 10, ?), uint8], Tensor[(80), bool], Tensor[(60), float32]) */;
    %956 = @func_1811() /* ty=(Tensor[(14, 14, 9), float64],) */;
    %957 = %956.0;
    %958 = @func_3379() /* ty=Tensor[(14, 14, 9), bool] */;
    %959 = cast(%958, dtype="float32") /* ty=Tensor[(14, 14, 9), float32] */;
    %960 = shape_of(%957, dtype="int32") /* ty=Tensor[(3), int32] */;
    %961 = cast(%957, dtype="float32") /* ty=Tensor[(14, 14, 9), float32] */;
    %962 = dyn.reshape(%959, %960, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %963 = cast(%var_3970, dtype="float32") /* ty=Tensor[(14, 14, 9), float32] */;
    %964 = shape_of(%958, dtype="int32") /* ty=Tensor[(3), int32] */;
    %965 = cast(%958, dtype="float32") /* ty=Tensor[(14, 14, 9), float32] */;
    %966 = dyn.reshape(%963, %964, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %967 = %955.1;
    %968 = power(%961, %962) /* ty=Tensor[(14, 14, 9), float32] */;
    %969 = floor_mod(%965, %966) /* ty=Tensor[(14, 14, 9), float32] */;
    %970 = @func_2722() /* ty=Tensor[(14, 14, 9), float64] */;
    (%967, %var_3954, %var_3955, %var_3956, %968, %969, %970)
  };
  %971(%var_3987, %var_3988, %var_3989, %var_3990) /* ty=(Tensor[(6, 10, ?), uint8], Tensor[(36), bool], Tensor[(72), bool], Tensor[(60), float32], Tensor[(14, 14, 9), float32], Tensor[(14, 14, 9), float32], Tensor[(14, 14, 9), float64]) */
}

def @func_5101() -> (Tensor[(520), float64],) {
  @func_5099() /* ty=(Tensor[(520), float64],) */
}

def @func_4508(%var_4506: Tensor[(14, 14, 9), float64], %var_4507: Tensor[(5, 104), float32]) -> (Tensor[(14, 14, 9), int8], Tensor[(520), float64], Tensor[(5, 104), int8], Tensor[(5, 104), uint64]) {
  %1003 = fn (%var_4437: Tensor[(14, 14, 9), float64], %var_4500: Tensor[(5, 104), float32]) -> (Tensor[(14, 14, 9), int8], Tensor[(520), float64], Tensor[(5, 104), int8], Tensor[(5, 104), uint64]) {
    %972 = @func_1997() /* ty=(Tensor[(14, 14, 9), float64],) */;
    %973 = %972.0;
    %974 = cast(%var_4437, dtype="int8") /* ty=Tensor[(14, 14, 9), int8] */;
    %975 = shape_of(%973, dtype="int32") /* ty=Tensor[(3), int32] */;
    %976 = cast(%973, dtype="int8") /* ty=Tensor[(14, 14, 9), int8] */;
    %977 = dyn.reshape(%974, %975, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %978 = cast(%var_4437, dtype="float32") /* ty=Tensor[(14, 14, 9), float32] */;
    %979 = reshape(%978, newshape=[14, 14, 9]) /* ty=Tensor[(14, 14, 9), float32] */;
    %980 = @func_4086(%979) /* ty=(Tensor[(60), float32], Tensor[(520), float64], Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(16, 6, 9), int64], Tensor[(6, 10, ?), float64]) */;
    %981 = @func_2151() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(72), bool], Tensor[(36), bool], Tensor[(14, 14, 9), float64], Tensor[(2160), float32], Tensor[(5, 104), float64], Tensor[(520), float64]) */;
    %982 = %981.5;
    %983 = cast(%982, dtype="float64") /* ty=Tensor[(5, 104), float64] */;
    %984 = atanh(%983) /* ty=Tensor[(5, 104), float64] */;
    %985 = @func_2775() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(13, 5, 8), float64], Tensor[(520), float64]) */;
    %986 = %985.1;
    %987 = cast(%986, dtype="int8") /* ty=Tensor[(13, 5, 8), int8] */;
    %988 = shape_of(%984, dtype="int32") /* ty=Tensor[(2), int32] */;
    %989 = cast(%984, dtype="int8") /* ty=Tensor[(5, 104), int8] */;
    %990 = dyn.reshape(%987, %988, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
    %991 = cast(%984, dtype="float32") /* ty=Tensor[(5, 104), float32] */;
    %992 = asin(%991) /* ty=Tensor[(5, 104), float32] */;
    %993 = cast(%992, dtype="float32") /* ty=Tensor[(5, 104), float32] */;
    %994 = log10(%993) /* ty=Tensor[(5, 104), float32] */;
    %995 = cast(%var_4500, dtype="uint64") /* ty=Tensor[(5, 104), uint64] */;
    %996 = shape_of(%994, dtype="int32") /* ty=Tensor[(2), int32] */;
    %997 = cast(%994, dtype="uint64") /* ty=Tensor[(5, 104), uint64] */;
    %998 = dyn.reshape(%995, %996, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %999 = bitwise_and(%976, %977) /* ty=Tensor[(14, 14, 9), int8] */;
    %1000 = %980.1;
    %1001 = logical_xor(%989, %990) /* ty=Tensor[(5, 104), int8] */;
    %1002 = bitwise_and(%997, %998) /* ty=Tensor[(5, 104), uint64] */;
    (%999, %1000, %1001, %1002)
  };
  %1003(%var_4506, %var_4507) /* ty=(Tensor[(14, 14, 9), int8], Tensor[(520), float64], Tensor[(5, 104), int8], Tensor[(5, 104), uint64]) */
}

def @func_3099() -> (Tensor[(5, 104), float64], Tensor[(14, 14, 9), float64], Tensor[(520), float64]) {
  @func_3097() /* ty=(Tensor[(5, 104), float64], Tensor[(14, 14, 9), float64], Tensor[(520), float64]) */
}

def @func_2723() -> Tensor[(14, 14, 9), float64] {
  %1005 = fn () -> Tensor[(14, 14, 9), float64] {
    %1004 = @func_1605() /* ty=(Tensor[(14, 14, 9), float64],) */;
    %1004.0
  };
  %1005() /* ty=Tensor[(14, 14, 9), float64] */
}

def @func_10441() -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(3, 15, 3), float64], Tensor[(135), float64]) {
  %1006 = @func_10280() /* ty=(Tensor[(5, 104), uint64], Tensor[(14, 14, 9), float64], Tensor[(5, 104), uint64], Tensor[(30, 2), float64]) */;
  %1007 = @func_10280() /* ty=(Tensor[(5, 104), uint64], Tensor[(14, 14, 9), float64], Tensor[(5, 104), uint64], Tensor[(30, 2), float64]) */;
  %1008 = %1007.1;
  %1009 = cast(%1008, dtype="float64") /* ty=Tensor[(14, 14, 9), float64] */;
  %1010 = cast(meta[relay.Constant][39] /* ty=Tensor[(135), float64] */, dtype="float64") /* ty=Tensor[(135), float64] */;
  %1011 = reshape(%1010, newshape=[3, 15, 3]) /* ty=Tensor[(3, 15, 3), float64] */;
  %1012 = %1006.1;
  %1013 = log2(%1009) /* ty=Tensor[(14, 14, 9), float64] */;
  %1014 = @func_2503(%1011) /* ty=Tensor[(3, 15, 3), float64] */;
  (%1012, %1013, %1014, meta[relay.Constant][39] /* ty=Tensor[(135), float64] */)
}

def @func_8460(%var_8459: Tensor[(2160), float32]) -> (Tensor[(14, 14, 9), bool], Tensor[(5, 104), uint64], Tensor[(14, 14, 9), float64], Tensor[(2160), float32]) {
  %1021 = fn (%var_8447: Tensor[(2160), float32]) -> (Tensor[(14, 14, 9), bool], Tensor[(5, 104), uint64], Tensor[(14, 14, 9), float64], Tensor[(2160), float32]) {
    %1015 = cast(%var_8447, dtype="float32") /* ty=Tensor[(2160), float32] */;
    %1016 = reshape(%1015, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
    %1017 = @func_1640(%1016) /* ty=(Tensor[(14, 14, 9), float64], Tensor[(6, 10, ?), uint8], Tensor[(60), float32], Tensor[(15, 12, 12), float32], Tensor[(2160), float32], Tensor[(14, 14, 9), float64]) */;
    %1018 = @func_6550() /* ty=Tensor[(14, 14, 9), bool] */;
    %1019 = @func_6220() /* ty=Tensor[(5, 104), uint64] */;
    %1020 = %1017.5;
    (%1018, %1019, %1020, %var_8447)
  };
  %1021(%var_8459) /* ty=(Tensor[(14, 14, 9), bool], Tensor[(5, 104), uint64], Tensor[(14, 14, 9), float64], Tensor[(2160), float32]) */
}

def @func_4895() -> Tensor[(14, 14, 9), float64] {
  %1023 = fn () -> Tensor[(14, 14, 9), float64] {
    %1022 = @func_4164() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */;
    %1022.0
  };
  %1023() /* ty=Tensor[(14, 14, 9), float64] */
}

def @func_1296(%var_1294: Tensor[(4, 2, 1), uint32], %var_1295: Tensor[(4, 2, 6), uint32]) -> (Tensor[(4, 2, 6), uint32], Tensor[(6, 10, ?), uint8], Tensor[(60), float32], Tensor[(15, 12, 12), float32], Tensor[(2160), float32]) {
  %1036 = fn (%var_1254: Tensor[(4, 2, 1), uint32], %var_1255: Tensor[(4, 2, 6), uint32]) -> (Tensor[(4, 2, 6), uint32], Tensor[(6, 10, ?), uint8], Tensor[(60), float32], Tensor[(15, 12, 12), float32], Tensor[(2160), float32]) {
    %1024 = cast(%var_1254, dtype="uint32") /* ty=Tensor[(4, 2, 1), uint32] */;
    %1025 = cast(%var_1255, dtype="uint32") /* ty=Tensor[(4, 2, 6), uint32] */;
    %1026 = cast(meta[relay.Constant][40] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
    %1027 = reshape(%1026, newshape=[6, 10, 1]) /* ty=Tensor[(6, 10, 1), float32] */;
    %1028 = @func_46(%1027) /* ty=(Tensor[(6, 10, ?), uint8],) */;
    %1029 = cast(meta[relay.Constant][41] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
    %1030 = cast(meta[relay.Constant][41] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
    %1031 = reshape(%1029, newshape=[15, 12, 12]) /* ty=Tensor[(15, 12, 12), float32] */;
    %1032 = reshape(%1030, newshape=[15, 12, 12]) /* ty=Tensor[(15, 12, 12), float32] */;
    %1033 = add(%1024, %1025) /* ty=Tensor[(4, 2, 6), uint32] */;
    %1034 = %1028.0;
    %1035 = @func_1090(%1031, %1032) /* ty=Tensor[(15, 12, 12), float32] */;
    (%1033, %1034, meta[relay.Constant][40] /* ty=Tensor[(60), float32] */, %1035, meta[relay.Constant][41] /* ty=Tensor[(2160), float32] */)
  };
  %1036(%var_1294, %var_1295) /* ty=(Tensor[(4, 2, 6), uint32], Tensor[(6, 10, ?), uint8], Tensor[(60), float32], Tensor[(15, 12, 12), float32], Tensor[(2160), float32]) */
}

def @func_8811() -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float32]) {
  %1037 = @func_7554() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %1038 = @func_8688() /* ty=Tensor[(14, 14, 9), float64] */;
  %1039 = @func_2415() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %1040 = %1039.0;
  %1041 = cast(%1040, dtype="float32") /* ty=Tensor[(14, 14, 9), float32] */;
  %1042 = shape_of(%1038, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1043 = cast(%1038, dtype="float32") /* ty=Tensor[(14, 14, 9), float32] */;
  %1044 = dyn.reshape(%1041, %1042, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1045 = %1037.0;
  %1046 = @func_6086() /* ty=Tensor[(14, 14, 9), float64] */;
  %1047 = floor_divide(%1043, %1044) /* ty=Tensor[(14, 14, 9), float32] */;
  (%1045, %1046, %1047)
}

def @func_3247() -> (Tensor[(520), float64],) {
  %1048 = @func_2775() /* ty=(Tensor[(14, 14, 9), float64], Tensor[(13, 5, 8), float64], Tensor[(520), float64]) */;
  %1049 = %1048.2;
  (%1049,)
}

def @func_1848(%var_1846: Tensor[(5, 104), float64]) -> (Tensor[(14, 14, 9), float32], Tensor[(13, 5, 8), float64], Tensor[(5, 104), float64]) {
  @func_1845(%var_1846) /* ty=(Tensor[(14, 14, 9), float32], Tensor[(13, 5, 8), float64], Tensor[(5, 104), float64]) */
}

def @func_3621() -> (Tensor[(14, 14, 9), float64],) {
  %1050 = @func_2432() /* ty=(Tensor[(14, 14, 9), float64],) */;
  %1051 = %1050.0;
  (%1051,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen608/build/output.py:3455: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen608/build/output.py", line 3460, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(117) tvmgen_default_fused_reshape_logical_or_kernel0(signed char* __restrict__ T_logical_or, signed char* __restrict__ placeholder, signed char* __restrict__ placeholder1) {
  T_logical_or[(((int)threadIdx.x))] = ((signed char)(((bool)placeholder[(((int)threadIdx.x))]) || ((bool)placeholder1[(((int)threadIdx.x))])));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

