==========mod==========
#[version = "0.0.5"]
def @func_6512(%var_6504: Tensor[(2940), float64]) -> (Tensor[(3, 4, 13), int32], Tensor[(14, 15, 14), float64], Tensor[(2940), float64], Tensor[(14, 15, 14), float64]) {
  %0 = cast(meta[relay.Constant][1] /* ty=Tensor[(3, 4, 13), int32] */, dtype="int32") /* ty=Tensor[(3, 4, 13), int32] */;
  %1 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(3, 4, 13), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(3, 4, 13), int32] */, dtype="int32") /* ty=Tensor[(3, 4, 13), int32] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %4 = cast(%var_6504, dtype="float64") /* ty=Tensor[(2940), float64] */;
  %5 = reshape(%4, newshape=[14, 15, 14]) /* ty=Tensor[(14, 15, 14), float64] */;
  %6 = @func_2534(%5) /* ty=Tensor[(14, 15, 14), float64] */;
  %7 = cast(%6, dtype="float64") /* ty=Tensor[(14, 15, 14), float64] */;
  %8 = reshape(%7, newshape=[14, 15, 14]) /* ty=Tensor[(14, 15, 14), float64] */;
  %9 = maximum(%2, %3) /* ty=Tensor[(3, 4, 13), int32] */;
  %10 = @func_2534(%8) /* ty=Tensor[(14, 15, 14), float64] */;
  (%9, %6, %var_6504, %10)
}

def @func_9380() -> Tensor[(8, 16, 8), float32] {
  %11 = @func_8173() /* ty=(Tensor[(8, 16, 8), float32],) */;
  %11.0
}

def @func_9744() -> (Tensor[(8, 16, 8), float32], Tensor[(315), float32], Tensor[(7, 3, 15), float32], Tensor[(8, 16, 8), int64]) {
  %12 = @func_8889() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), int64], Tensor[(7, 3, 15), float32], Tensor[(315), float32]) */;
  %13 = %12.3;
  %14 = cast(%13, dtype="float32") /* ty=Tensor[(315), float32] */;
  %15 = reshape(%14, newshape=[7, 3, 15]) /* ty=Tensor[(7, 3, 15), float32] */;
  %16 = @func_8889() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), int64], Tensor[(7, 3, 15), float32], Tensor[(315), float32]) */;
  %17 = @func_9064() /* ty=Tensor[(8, 16, 8), float32] */;
  %18 = @func_6097(%15) /* ty=Tensor[(7, 3, 15), float32] */;
  %19 = %16.1;
  (%17, %13, %18, %19)
}

def @func_8769(%var_8762: bool, %var_8763: Tensor[(3, 4, 9), bool]) -> (Tensor[(3, 4, 9), bool],) {
  %20 = cast(%var_8762, dtype="bool") /* ty=bool */;
  %21 = cast(%var_8763, dtype="bool") /* ty=Tensor[(3, 4, 9), bool] */;
  %22 = logical_and(%20, %21) /* ty=Tensor[(3, 4, 9), bool] */;
  (%22,)
}

def @func_11968(%var_11962: Tensor[(2940), float64]) -> (Tensor[(8, 16, 8), float64], Tensor[(3, 4, 13), int32], Tensor[(2940), bool], Tensor[(14, 15, 14), float64]) {
  %23 = cast(meta[relay.Constant][2] /* ty=Tensor[(2940), float64] */, dtype="float64") /* ty=Tensor[(2940), float64] */;
  %24 = reshape(%23, newshape=[2940]) /* ty=Tensor[(2940), float64] */;
  %25 = @func_6512(%24) /* ty=(Tensor[(3, 4, 13), int32], Tensor[(14, 15, 14), float64], Tensor[(2940), float64], Tensor[(14, 15, 14), float64]) */;
  %26 = cast(%var_11962, dtype="bool") /* ty=Tensor[(2940), bool] */;
  %27 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(2940), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %28 = cast(meta[relay.Constant][2] /* ty=Tensor[(2940), float64] */, dtype="bool") /* ty=Tensor[(2940), bool] */;
  %29 = dyn.reshape(%26, %27, newshape=[]) /* ty=Tensor[(?), bool] */;
  %30 = cast(%var_11962, dtype="float64") /* ty=Tensor[(2940), float64] */;
  %31 = reshape(%30, newshape=[14, 15, 14]) /* ty=Tensor[(14, 15, 14), float64] */;
  %32 = @func_9830() /* ty=Tensor[(8, 16, 8), float64] */;
  %33 = %25.0;
  %34 = less(%28, %29) /* ty=Tensor[(2940), bool] */;
  %35 = @func_2534(%31) /* ty=Tensor[(14, 15, 14), float64] */;
  (%32, %33, %34, %35)
}

def @func_17696() -> (Tensor[(315), float32], Tensor[(14, 5, 5), bool], Tensor[(350), bool]) {
  %36 = cast(meta[relay.Constant][3] /* ty=Tensor[(350), bool] */, dtype="bool") /* ty=Tensor[(350), bool] */;
  %37 = cast(meta[relay.Constant][3] /* ty=Tensor[(350), bool] */, dtype="bool") /* ty=Tensor[(350), bool] */;
  %38 = reshape(%36, newshape=[14, 5, 5]) /* ty=Tensor[(14, 5, 5), bool] */;
  %39 = reshape(%37, newshape=[14, 5, 5]) /* ty=Tensor[(14, 5, 5), bool] */;
  %40 = @func_9849() /* ty=Tensor[(315), float32] */;
  %41 = @func_7951(%38, %39) /* ty=Tensor[(14, 5, 5), bool] */;
  (%40, %41, meta[relay.Constant][3] /* ty=Tensor[(350), bool] */)
}

def @func_17307() -> Tensor[(8, 1), float64] {
  @func_15306() /* ty=Tensor[(8, 1), float64] */
}

def @func_15571() -> Tensor[(14, 15, 14), float64] {
  %42 = @func_13270() /* ty=(Tensor[(14, 15, 14), float64],) */;
  %42.0
}

def @func_14233(%var_14197: Tensor[(16, 7, 4), uint8]) -> Tensor[(16, 7, 4), uint8] {
  %43 = cast(meta[relay.Constant][4] /* ty=Tensor[(16, 7, 4), uint8] */, dtype="uint8") /* ty=Tensor[(16, 7, 4), uint8] */;
  %44 = shape_of(%var_14197, dtype="int32") /* ty=Tensor[(3), int32] */;
  %45 = cast(%var_14197, dtype="uint8") /* ty=Tensor[(16, 7, 4), uint8] */;
  %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  logical_xor(%45, %46) /* ty=Tensor[(16, 7, 4), uint8] */
}

def @func_17978(%var_17931: Tensor[(4, 13, 12), float32], %var_17932: Tensor[(4, 13, 12), float32]) -> (Tensor[(4, 13, 12), float32], Tensor[(448), uint64]) {
  %47 = cast(%var_17932, dtype="float32") /* ty=Tensor[(4, 13, 12), float32] */;
  %48 = shape_of(%var_17931, dtype="int32") /* ty=Tensor[(3), int32] */;
  %49 = cast(%var_17931, dtype="float32") /* ty=Tensor[(4, 13, 12), float32] */;
  %50 = dyn.reshape(%47, %48, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %51 = @func_12096() /* ty=(Tensor[(448), uint64], Tensor[(8, 16, 8), float64], uint64, Tensor[(8, 1), float64], uint64, Tensor[(8, 16, 8), float64]) */;
  %52 = mod(%49, %50) /* ty=Tensor[(4, 13, 12), float32] */;
  %53 = %51.0;
  (%52, %53)
}

def @func_10255(%var_10193: Tensor[(10, 3, 1), float64], %var_10203: Tensor[(225, 10), float32], %var_10237: Tensor[(10, 3, 1), float64]) -> (Tensor[(30, 9), float32], Tensor[(270), float32], Tensor[(225, 10), float32], Tensor[(7, 13, 6), uint64], Tensor[(546), bool], Tensor[(10, 3, 2310), int32], Tensor[(8, 16, 8), float64], Tensor[(392), uint64], Tensor[(10, 3, ?), bool], Tensor[(16, 15, 5), float32]) {
  %54 = cast(meta[relay.Constant][5] /* ty=Tensor[(2310), float32] */, dtype="float32") /* ty=Tensor[(2310), float32] */;
  %55 = cast(meta[relay.Constant][5] /* ty=Tensor[(2310), float32] */, dtype="float32") /* ty=Tensor[(2310), float32] */;
  %56 = cast(meta[relay.Constant][6] /* ty=Tensor[(270), float32] */, dtype="float32") /* ty=Tensor[(270), float32] */;
  %57 = cast(%var_10203, dtype="float32") /* ty=Tensor[(225, 10), float32] */;
  %58 = reshape(%54, newshape=[11, 15, 14]) /* ty=Tensor[(11, 15, 14), float32] */;
  %59 = reshape(%55, newshape=[11, 15, 14]) /* ty=Tensor[(11, 15, 14), float32] */;
  %60 = reshape(%56, newshape=[30, 9]) /* ty=Tensor[(30, 9), float32] */;
  %61 = reshape(%57, newshape=[2250]) /* ty=Tensor[(2250), float32] */;
  %62 = @func_2639(%58, %59, %60, %61) /* ty=(Tensor[(11, 15, 14), float32], Tensor[(9, 5, 6), float64], Tensor[(30, 9), float32], Tensor[(30, 9), float32], Tensor[(2250), float32], Tensor[(16, 15, 5), float32], Tensor[(224), int64], uint32) */;
  %63 = cast(meta[relay.Constant][7] /* ty=Tensor[(546), bool] */, dtype="bool") /* ty=Tensor[(546), bool] */;
  %64 = cast(meta[relay.Constant][7] /* ty=Tensor[(546), bool] */, dtype="bool") /* ty=Tensor[(546), bool] */;
  %65 = reshape(%63, newshape=[7, 13, 6]) /* ty=Tensor[(7, 13, 6), bool] */;
  %66 = reshape(%64, newshape=[7, 13, 6]) /* ty=Tensor[(7, 13, 6), bool] */;
  %67 = @func_4270(%65, %66) /* ty=(Tensor[(7, 13, 6), uint64],) */;
  %68 = cast(meta[relay.Constant][5] /* ty=Tensor[(2310), float32] */, dtype="int32") /* ty=Tensor[(2310), int32] */;
  %69 = cast(%var_10193, dtype="int32") /* ty=Tensor[(10, 3, 1), int32] */;
  %70 = cast(meta[relay.Constant][8] /* ty=Tensor[(392), uint64] */, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %71 = reshape(%70, newshape=[392]) /* ty=Tensor[(392), uint64] */;
  %72 = @func_8634(%71) /* ty=(Tensor[(14, 15, 14), float64], Tensor[(7, 4, 16), bool], uint64, Tensor[(448), uint64], Tensor[(8, 16, 8), float64], Tensor[(392), uint64], Tensor[(14, 15, 14), float64]) */;
  %73 = cast(%var_10193, dtype="float64") /* ty=Tensor[(10, 3, 1), float64] */;
  %74 = acosh(%73) /* ty=Tensor[(10, 3, 1), float64] */;
  %75 = cast(%var_10237, dtype="bool") /* ty=Tensor[(10, 3, 1), bool] */;
  %76 = shape_of(%74, dtype="int32") /* ty=Tensor[(3), int32] */;
  %77 = cast(%74, dtype="bool") /* ty=Tensor[(10, 3, 1), bool] */;
  %78 = dyn.reshape(%75, %76, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %79 = cast(meta[relay.Constant][5] /* ty=Tensor[(2310), float32] */, dtype="float32") /* ty=Tensor[(2310), float32] */;
  %80 = cast(meta[relay.Constant][6] /* ty=Tensor[(270), float32] */, dtype="float32") /* ty=Tensor[(270), float32] */;
  %81 = reshape(%79, newshape=[2310]) /* ty=Tensor[(2310), float32] */;
  %82 = reshape(%80, newshape=[270]) /* ty=Tensor[(270), float32] */;
  %83 = @func_10154(%81, %82) /* ty=(Tensor[(315), float32], Tensor[(16, 15, 5), float32], Tensor[(2310), float32], Tensor[(270), float32], Tensor[(2250), float32]) */;
  %84 = %62.3;
  %85 = %67.0;
  %86 = bitwise_or(%68, %69) /* ty=Tensor[(10, 3, 2310), int32] */;
  %87 = %72.4;
  %88 = less(%77, %78) /* ty=Tensor[(10, 3, ?), bool] */;
  %89 = %83.1;
  (%84, meta[relay.Constant][6] /* ty=Tensor[(270), float32] */, %var_10203, %85, meta[relay.Constant][7] /* ty=Tensor[(546), bool] */, %86, %87, meta[relay.Constant][8] /* ty=Tensor[(392), uint64] */, %88, %89)
}

def @func_15863() -> (Tensor[(8, 16, 8), float32], Tensor[(10, 9, 15), float32], Tensor[(1350), float32], Tensor[(8, 16, 8), float64]) {
  %90 = cast(meta[relay.Constant][9] /* ty=Tensor[(1350), float32] */, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %91 = reshape(%90, newshape=[10, 9, 15]) /* ty=Tensor[(10, 9, 15), float32] */;
  %92 = @func_13258() /* ty=Tensor[(8, 16, 8), float32] */;
  %93 = @func_7200(%91) /* ty=Tensor[(10, 9, 15), float32] */;
  %94 = @func_13104() /* ty=Tensor[(8, 16, 8), float64] */;
  (%92, %93, meta[relay.Constant][9] /* ty=Tensor[(1350), float32] */, %94)
}

def @func_5723(%var_5703: Tensor[(1, 1, 11), uint16]) -> (Tensor[(6, 1, 12), uint8], Tensor[(1, 1, 11), float32]) {
  %95 = cast(meta[relay.Constant][10] /* ty=uint16 */, dtype="int32") /* ty=int32 */;
  %96 = reshape(%95, newshape=[]) /* ty=int32 */;
  %97 = @func_3958(%96) /* ty=(Tensor[(6, 1, 12), int32], Tensor[(6, 1, 12), uint8]) */;
  %98 = cast(meta[relay.Constant][10] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %99 = cast(%var_5703, dtype="uint16") /* ty=Tensor[(1, 1, 11), uint16] */;
  %100 = bitwise_or(%98, %99) /* ty=Tensor[(1, 1, 11), uint16] */;
  %101 = cast(%100, dtype="float32") /* ty=Tensor[(1, 1, 11), float32] */;
  %102 = atan(%101) /* ty=Tensor[(1, 1, 11), float32] */;
  %103 = cast(%102, dtype="float32") /* ty=Tensor[(1, 1, 11), float32] */;
  %104 = %97.1;
  %105 = exp(%103) /* ty=Tensor[(1, 1, 11), float32] */;
  (%104, %105)
}

def @func_17165() -> (Tensor[(8, 16, 8), float64],) {
  %106 = @func_11564() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32]) */;
  %107 = %106.0;
  (%107,)
}

def @func_7107(%var_7074: Tensor[(16, 13, 2), int8]) -> (Tensor[(6, 1, 12), int32], Tensor[(16, 13, 2), bool], Tensor[(7, 13, 6), uint64], Tensor[(546), bool]) {
  %108 = cast(9 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %109 = reshape(%108, newshape=[]) /* ty=int32 */;
  %110 = @func_3958(%109) /* ty=(Tensor[(6, 1, 12), int32], Tensor[(6, 1, 12), uint8]) */;
  %111 = cast(meta[relay.Constant][11] /* ty=Tensor[(16, 13, 2), int8] */, dtype="bool") /* ty=Tensor[(16, 13, 2), bool] */;
  %112 = shape_of(%var_7074, dtype="int32") /* ty=Tensor[(3), int32] */;
  %113 = cast(%var_7074, dtype="bool") /* ty=Tensor[(16, 13, 2), bool] */;
  %114 = dyn.reshape(%111, %112, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %115 = less_equal(%113, %114) /* ty=Tensor[(16, 13, 2), bool] */;
  %116 = cast(9 /* ty=int32 */, dtype="bool") /* ty=bool */;
  %117 = cast(%115, dtype="bool") /* ty=Tensor[(16, 13, 2), bool] */;
  %118 = cast(meta[relay.Constant][12] /* ty=Tensor[(546), bool] */, dtype="bool") /* ty=Tensor[(546), bool] */;
  %119 = cast(meta[relay.Constant][12] /* ty=Tensor[(546), bool] */, dtype="bool") /* ty=Tensor[(546), bool] */;
  %120 = reshape(%118, newshape=[7, 13, 6]) /* ty=Tensor[(7, 13, 6), bool] */;
  %121 = reshape(%119, newshape=[7, 13, 6]) /* ty=Tensor[(7, 13, 6), bool] */;
  %122 = @func_4270(%120, %121) /* ty=(Tensor[(7, 13, 6), uint64],) */;
  %123 = %110.0;
  %124 = logical_or(%116, %117) /* ty=Tensor[(16, 13, 2), bool] */;
  %125 = %122.0;
  (%123, %124, %125, meta[relay.Constant][12] /* ty=Tensor[(546), bool] */)
}

def @func_13204() -> (Tensor[(14, 15, 14), float64], Tensor[(7, 3, 15), float32], Tensor[(315), float32], Tensor[(8, 16, 8), float32]) {
  %126 = @func_12378() /* ty=(Tensor[(14, 15, 14), float64],) */;
  %127 = cast(meta[relay.Constant][13] /* ty=Tensor[(315), float32] */, dtype="float32") /* ty=Tensor[(315), float32] */;
  %128 = reshape(%127, newshape=[7, 3, 15]) /* ty=Tensor[(7, 3, 15), float32] */;
  %129 = %126.0;
  %130 = @func_6097(%128) /* ty=Tensor[(7, 3, 15), float32] */;
  %131 = @func_13006() /* ty=Tensor[(8, 16, 8), float32] */;
  (%129, %130, meta[relay.Constant][13] /* ty=Tensor[(315), float32] */, %131)
}

def @func_18550() -> (Tensor[(8, 16, 8), float32],) {
  %132 = @func_8424() /* ty=(Tensor[(8, 16, 8), float32], Tensor[(3, 6, 7), float32], Tensor[(3), float32], Tensor[(126), float32]) */;
  %133 = %132.0;
  (%133,)
}

def @func_8548(%var_8545: Tensor[(270), float32]) -> (Tensor[(8, 16, 8), float64], Tensor[(4, 7, 14), float64], Tensor[(392), uint64], Tensor[(9, 5, 6), float64], Tensor[(270), float32]) {
  %134 = cast(meta[relay.Constant][14] /* ty=Tensor[(392), uint64] */, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %135 = reshape(%134, newshape=[14, 28]) /* ty=Tensor[(14, 28), uint64] */;
  %136 = @func_8232(%135) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(4, 7, 14), float64], Tensor[(14, 28), uint64]) */;
  %137 = cast(%var_8545, dtype="float32") /* ty=Tensor[(270), float32] */;
  %138 = reshape(%137, newshape=[9, 5, 6]) /* ty=Tensor[(9, 5, 6), float32] */;
  %139 = @func_652(%138) /* ty=(Tensor[(9, 5, 6), float64],) */;
  %140 = @func_7783() /* ty=Tensor[(8, 16, 8), float64] */;
  %141 = %136.2;
  %142 = %139.0;
  (%140, %141, meta[relay.Constant][14] /* ty=Tensor[(392), uint64] */, %142, %var_8545)
}

def @func_16189() -> (Tensor[(8, 16, 8), float64],) {
  %143 = @func_15457() /* ty=Tensor[(8, 16, 8), float64] */;
  (%143,)
}

def @func_11792(%var_11753: Tensor[(8, 16, 8), float64], %var_11789: Tensor[(585), float64]) -> (Tensor[(8, 16, 8), uint16], Tensor[(7, 3, 15), float32], Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(9, 5, 13), float64], Tensor[(585), float64]) {
  %144 = @func_9795() /* ty=Tensor[(8, 16, 8), float64] */;
  %145 = cast(%var_11753, dtype="uint16") /* ty=Tensor[(8, 16, 8), uint16] */;
  %146 = shape_of(%144, dtype="int32") /* ty=Tensor[(3), int32] */;
  %147 = cast(%144, dtype="uint16") /* ty=Tensor[(8, 16, 8), uint16] */;
  %148 = dyn.reshape(%145, %146, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %149 = @func_8889() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), int64], Tensor[(7, 3, 15), float32], Tensor[(315), float32]) */;
  %150 = @func_11440() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %151 = cast(%var_11789, dtype="float64") /* ty=Tensor[(585), float64] */;
  %152 = reshape(%151, newshape=[9, 5, 13]) /* ty=Tensor[(9, 5, 13), float64] */;
  %153 = add(%147, %148) /* ty=Tensor[(8, 16, 8), uint16] */;
  %154 = %149.2;
  %155 = %150.0;
  %156 = @func_9399() /* ty=Tensor[(8, 16, 8), float64] */;
  %157 = @func_7412(%152) /* ty=Tensor[(9, 5, 13), float64] */;
  (%153, %154, %155, %156, %157, %var_11789)
}

def @func_9983() -> Tensor[(8, 16, 8), float32] {
  @func_9013() /* ty=Tensor[(8, 16, 8), float32] */
}

def @func_13553() -> (Tensor[(8, 1), float64],) {
  %158 = @func_12096() /* ty=(Tensor[(448), uint64], Tensor[(8, 16, 8), float64], uint64, Tensor[(8, 1), float64], uint64, Tensor[(8, 16, 8), float64]) */;
  %159 = %158.3;
  (%159,)
}

def @func_18068(%var_17999: Tensor[(8), float64], %var_18001: Tensor[(2, 224), uint64]) -> (Tensor[(8, 16, 8), float32], Tensor[(8), float64], Tensor[(8, 16, 8), float64], Tensor[(2, 224), float64], uint64, Tensor[(2, 224), float64]) {
  %160 = cast(%var_17999, dtype="float64") /* ty=Tensor[(8), float64] */;
  %161 = cast(meta[relay.Constant][15] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %162 = cast(%var_18001, dtype="uint64") /* ty=Tensor[(2, 224), uint64] */;
  %163 = reshape(%160, newshape=[2, 1, 4]) /* ty=Tensor[(2, 1, 4), float64] */;
  %164 = reshape(%161, newshape=[]) /* ty=uint64 */;
  %165 = reshape(%162, newshape=[448]) /* ty=Tensor[(448), uint64] */;
  %166 = @func_4427(%163, %164, %165) /* ty=(Tensor[(2, 1, 4), float64], Tensor[(7, 4, 16), bool], uint64, Tensor[(448), uint64]) */;
  %167 = %166.1;
  %168 = cast(%167, dtype="int64") /* ty=Tensor[(7, 4, 16), int64] */;
  %169 = shape_of(%var_18001, dtype="int32") /* ty=Tensor[(2), int32] */;
  %170 = cast(%var_18001, dtype="int64") /* ty=Tensor[(2, 224), int64] */;
  %171 = dyn.reshape(%168, %169, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %172 = maximum(%170, %171) /* ty=Tensor[(2, 224), int64] */;
  %173 = cast(meta[relay.Constant][15] /* ty=uint64 */, dtype="int16") /* ty=int16 */;
  %174 = cast(%172, dtype="int16") /* ty=Tensor[(2, 224), int16] */;
  %175 = bitwise_xor(%173, %174) /* ty=Tensor[(2, 224), int16] */;
  %176 = cast(%175, dtype="float64") /* ty=Tensor[(2, 224), float64] */;
  %177 = cast(%var_18001, dtype="float64") /* ty=Tensor[(2, 224), float64] */;
  %178 = @func_11546() /* ty=Tensor[(8, 16, 8), float32] */;
  %179 = @func_7915() /* ty=Tensor[(8, 16, 8), float64] */;
  %180 = sin(%176) /* ty=Tensor[(2, 224), float64] */;
  %181 = @func_17610() /* ty=uint64 */;
  %182 = log2(%177) /* ty=Tensor[(2, 224), float64] */;
  (%178, %var_17999, %179, %180, %181, %182)
}

def @func_10354() -> (Tensor[(8, 16, 8), float32], Tensor[(7, 4, 16), bool], uint64, Tensor[(448), uint64], Tensor[(8, 16, 8), float64]) {
  %183 = @func_7874() /* ty=(Tensor[(8, 16, 8), float32],) */;
  %184 = cast(meta[relay.Constant][16] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %185 = cast(meta[relay.Constant][17] /* ty=Tensor[(448), uint64] */, dtype="uint64") /* ty=Tensor[(448), uint64] */;
  %186 = reshape(%184, newshape=[]) /* ty=uint64 */;
  %187 = reshape(%185, newshape=[7, 4, 16]) /* ty=Tensor[(7, 4, 16), uint64] */;
  %188 = @func_9577() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %189 = %183.0;
  %190 = @func_2096(%186, %187) /* ty=Tensor[(7, 4, 16), bool] */;
  %191 = %188.0;
  (%189, %190, meta[relay.Constant][16] /* ty=uint64 */, meta[relay.Constant][17] /* ty=Tensor[(448), uint64] */, %191)
}

def @func_13258() -> Tensor[(8, 16, 8), float32] {
  @func_11546() /* ty=Tensor[(8, 16, 8), float32] */
}

def @func_10738(%var_10734: Tensor[(224), int64]) -> (Tensor[(8, 16, 8), float64], Tensor[(350), int64], uint32, Tensor[(224), int64], uint32) {
  %192 = cast(meta[relay.Constant][18] /* ty=Tensor[(350), bool] */, dtype="bool") /* ty=Tensor[(350), bool] */;
  %193 = cast(meta[relay.Constant][18] /* ty=Tensor[(350), bool] */, dtype="bool") /* ty=Tensor[(350), bool] */;
  %194 = reshape(%192, newshape=[14, 5, 5]) /* ty=Tensor[(14, 5, 5), bool] */;
  %195 = reshape(%193, newshape=[14, 5, 5]) /* ty=Tensor[(14, 5, 5), bool] */;
  %196 = @func_7951(%194, %195) /* ty=Tensor[(14, 5, 5), bool] */;
  %197 = cast(%196, dtype="int64") /* ty=Tensor[(14, 5, 5), int64] */;
  %198 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(350), bool] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %199 = cast(meta[relay.Constant][18] /* ty=Tensor[(350), bool] */, dtype="int64") /* ty=Tensor[(350), int64] */;
  %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?), int64] */;
  %201 = cast(%var_10734, dtype="int64") /* ty=Tensor[(224), int64] */;
  %202 = cast(%var_10734, dtype="int64") /* ty=Tensor[(224), int64] */;
  %203 = cast(meta[relay.Constant][19] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %204 = reshape(%201, newshape=[7, 4, 8]) /* ty=Tensor[(7, 4, 8), int64] */;
  %205 = reshape(%202, newshape=[7, 4, 8]) /* ty=Tensor[(7, 4, 8), int64] */;
  %206 = reshape(%203, newshape=[]) /* ty=uint32 */;
  %207 = @func_1485(%204, %205, %206) /* ty=(Tensor[(7, 4, 8), int64], Tensor[(16, 15, 5), uint32], uint32, Tensor[(16, 15, 5), float32], Tensor[(16, 15, 5), float32]) */;
  %208 = @func_9830() /* ty=Tensor[(8, 16, 8), float64] */;
  %209 = bitwise_and(%199, %200) /* ty=Tensor[(350), int64] */;
  %210 = %207.2;
  (%208, %209, %210, %var_10734, meta[relay.Constant][19] /* ty=uint32 */)
}

def @func_14548() -> Tensor[(8, 16, 8), float32] {
  @func_9254() /* ty=Tensor[(8, 16, 8), float32] */
}

def @func_9830() -> Tensor[(8, 16, 8), float64] {
  %211 = @func_8501() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64], Tensor[(2940), float64]) */;
  %211.0
}

def @func_11564() -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32]) {
  %212 = @func_9399() /* ty=Tensor[(8, 16, 8), float64] */;
  %213 = @func_9380() /* ty=Tensor[(8, 16, 8), float32] */;
  (%212, %213)
}

def @func_14665(%var_14655: Tensor[(270), float64]) -> (Tensor[(16, 10, 7), bool], Tensor[(8, 16, 8), float64], Tensor[(495, 1), float32], Tensor[(270), float64]) {
  %214 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 10, 7), bool] */, dtype="bool") /* ty=Tensor[(1, 10, 7), bool] */;
  %215 = cast(meta[relay.Constant][21] /* ty=Tensor[(16, 10, 7), bool] */, dtype="bool") /* ty=Tensor[(16, 10, 7), bool] */;
  %216 = cast(%var_14655, dtype="float64") /* ty=Tensor[(270), float64] */;
  %217 = reshape(%216, newshape=[9, 5, 6]) /* ty=Tensor[(9, 5, 6), float64] */;
  %218 = @func_14035(%217) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(270), float32], Tensor[(8, 16, 8), float64], Tensor[(15, 3, 11), float32], Tensor[(495, 1), float32], Tensor[(9, 5, 6), bool]) */;
  %219 = logical_and(%214, %215) /* ty=Tensor[(16, 10, 7), bool] */;
  %220 = @func_14184() /* ty=Tensor[(8, 16, 8), float64] */;
  %221 = %218.4;
  (%219, %220, %221, %var_14655)
}

def @func_17333() -> Tensor[(8, 16, 8), float32] {
  %222 = @func_16598() /* ty=(Tensor[(8, 16, 8), float32],) */;
  %222.0
}

def @func_9352(%var_9312: uint32, %var_9341: Tensor[(3, 4, 7), bool]) -> (Tensor[(8, 16, 8), float32], Tensor[(3, 4, 7), int16]) {
  %223 = cast(%var_9312, dtype="bool") /* ty=bool */;
  %224 = cast(meta[relay.Constant][22] /* ty=Tensor[(3, 4, 7), uint32] */, dtype="bool") /* ty=Tensor[(3, 4, 7), bool] */;
  %225 = less_equal(%223, %224) /* ty=Tensor[(3, 4, 7), bool] */;
  %226 = cast(%var_9341, dtype="int16") /* ty=Tensor[(3, 4, 7), int16] */;
  %227 = shape_of(%225, dtype="int32") /* ty=Tensor[(3), int32] */;
  %228 = cast(%225, dtype="int16") /* ty=Tensor[(3, 4, 7), int16] */;
  %229 = dyn.reshape(%226, %227, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %230 = @func_9064() /* ty=Tensor[(8, 16, 8), float32] */;
  %231 = minimum(%228, %229) /* ty=Tensor[(3, 4, 7), int16] */;
  (%230, %231)
}

def @func_673(%var_669: Tensor[(15, 15, 10), uint16]) -> (Tensor[(15, 15, 10), uint16],) {
  %232 = cast(%var_669, dtype="uint16") /* ty=Tensor[(15, 15, 10), uint16] */;
  %233 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(15, 15, 10), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %234 = cast(meta[relay.Constant][23] /* ty=Tensor[(15, 15, 10), uint16] */, dtype="uint16") /* ty=Tensor[(15, 15, 10), uint16] */;
  %235 = dyn.reshape(%232, %233, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %236 = maximum(%234, %235) /* ty=Tensor[(15, 15, 10), uint16] */;
  (%236,)
}

def @func_12271(%var_12218: Tensor[(14, 1, 2), int16]) -> (Tensor[(8, 16, 8), float32], Tensor[(4, 7, 14), float64], Tensor[(7, 56), uint64], Tensor[(14, ?, 2), bool]) {
  %237 = cast(meta[relay.Constant][24] /* ty=Tensor[(7, 56), uint64] */, dtype="uint64") /* ty=Tensor[(7, 56), uint64] */;
  %238 = reshape(%237, newshape=[4, 7, 14]) /* ty=Tensor[(4, 7, 14), uint64] */;
  %239 = @func_7629(%238) /* ty=(Tensor[(4, 7, 14), bool], Tensor[(9, 7, 10), float64], Tensor[(630), float64], Tensor[(7, 13, 6), uint64], Tensor[(546), bool], Tensor[(4, 7, 14), uint16], Tensor[(4, 7, 14), float64]) */;
  %240 = cast(meta[relay.Constant][25] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %241 = cast(%var_12218, dtype="int16") /* ty=Tensor[(14, 1, 2), int16] */;
  %242 = logical_xor(%240, %241) /* ty=Tensor[(14, 1, 2), int16] */;
  %243 = cast(%var_12218, dtype="bool") /* ty=Tensor[(14, 1, 2), bool] */;
  %244 = shape_of(%242, dtype="int32") /* ty=Tensor[(3), int32] */;
  %245 = cast(%242, dtype="bool") /* ty=Tensor[(14, 1, 2), bool] */;
  %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %247 = @func_11546() /* ty=Tensor[(8, 16, 8), float32] */;
  %248 = %239.6;
  %249 = greater_equal(%245, %246) /* ty=Tensor[(14, ?, 2), bool] */;
  (%247, %248, meta[relay.Constant][24] /* ty=Tensor[(7, 56), uint64] */, %249)
}

def @func_9203() -> (Tensor[(8, 16, 8), float32],) {
  %250 = @func_7874() /* ty=(Tensor[(8, 16, 8), float32],) */;
  %251 = %250.0;
  (%251,)
}

def @func_10940(%var_10922: Tensor[(9, 150), float32]) -> (Tensor[(8, 16, 8), float32], Tensor[(7, 13, 6), uint64], Tensor[(546), bool], Tensor[(8, 16, 8), float64], Tensor[(9, 150), float32], Tensor[(392), uint64]) {
  %252 = cast(meta[relay.Constant][26] /* ty=Tensor[(546), bool] */, dtype="bool") /* ty=Tensor[(546), bool] */;
  %253 = cast(meta[relay.Constant][26] /* ty=Tensor[(546), bool] */, dtype="bool") /* ty=Tensor[(546), bool] */;
  %254 = reshape(%252, newshape=[7, 13, 6]) /* ty=Tensor[(7, 13, 6), bool] */;
  %255 = reshape(%253, newshape=[7, 13, 6]) /* ty=Tensor[(7, 13, 6), bool] */;
  %256 = @func_4270(%254, %255) /* ty=(Tensor[(7, 13, 6), uint64],) */;
  %257 = cast(%var_10922, dtype="float32") /* ty=Tensor[(9, 150), float32] */;
  %258 = cast(meta[relay.Constant][27] /* ty=Tensor[(392), uint64] */, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %259 = reshape(%257, newshape=[1350]) /* ty=Tensor[(1350), float32] */;
  %260 = reshape(%258, newshape=[392]) /* ty=Tensor[(392), uint64] */;
  %261 = @func_8742(%259, %260) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(1350), float32], Tensor[(8, 16, 8), float64], Tensor[(392), uint64]) */;
  %262 = @func_8028() /* ty=Tensor[(8, 16, 8), float32] */;
  %263 = %256.0;
  %264 = %261.2;
  (%262, %263, meta[relay.Constant][26] /* ty=Tensor[(546), bool] */, %264, %var_10922, meta[relay.Constant][27] /* ty=Tensor[(392), uint64] */)
}

def @func_13006() -> Tensor[(8, 16, 8), float32] {
  %265 = @func_11583() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32]) */;
  %265.1
}

def @func_8232(%var_8207: Tensor[(14, 28), uint64]) -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(4, 7, 14), float64], Tensor[(14, 28), uint64]) {
  %266 = @func_7714() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %267 = cast(%var_8207, dtype="uint64") /* ty=Tensor[(14, 28), uint64] */;
  %268 = reshape(%267, newshape=[4, 7, 14]) /* ty=Tensor[(4, 7, 14), uint64] */;
  %269 = @func_7629(%268) /* ty=(Tensor[(4, 7, 14), bool], Tensor[(9, 7, 10), float64], Tensor[(630), float64], Tensor[(7, 13, 6), uint64], Tensor[(546), bool], Tensor[(4, 7, 14), uint16], Tensor[(4, 7, 14), float64]) */;
  %270 = %266.0;
  %271 = @func_7783() /* ty=Tensor[(8, 16, 8), float64] */;
  %272 = %269.6;
  (%270, %271, %272, %var_8207)
}

def @func_13174(%var_13171: int32) -> (Tensor[(8, 16, 8), float32], Tensor[(6, 1, 12), int32], int32) {
  %273 = @func_11818() /* ty=(Tensor[(8, 16, 8), float32],) */;
  %274 = cast(%var_13171, dtype="int32") /* ty=int32 */;
  %275 = reshape(%274, newshape=[]) /* ty=int32 */;
  %276 = @func_3958(%275) /* ty=(Tensor[(6, 1, 12), int32], Tensor[(6, 1, 12), uint8]) */;
  %277 = %273.0;
  %278 = %276.0;
  (%277, %278, %var_13171)
}

def @func_10994() -> Tensor[(8, 16, 8), float64] {
  %279 = @func_9577() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %279.0
}

def @func_16546(%var_16544: Tensor[(2250), float32]) -> (Tensor[(8, 16, 8), float64], Tensor[(16, 15, 5), float32], Tensor[(10, 3), float64], Tensor[(2250), float32]) {
  %280 = @func_11440() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %281 = cast(meta[relay.Constant][28] /* ty=Tensor[(10, 3), float64] */, dtype="float64") /* ty=Tensor[(10, 3), float64] */;
  %282 = cast(%var_16544, dtype="float32") /* ty=Tensor[(2250), float32] */;
  %283 = cast(meta[relay.Constant][28] /* ty=Tensor[(10, 3), float64] */, dtype="float64") /* ty=Tensor[(10, 3), float64] */;
  %284 = reshape(%281, newshape=[10, 3, 1]) /* ty=Tensor[(10, 3, 1), float64] */;
  %285 = reshape(%282, newshape=[225, 10]) /* ty=Tensor[(225, 10), float32] */;
  %286 = reshape(%283, newshape=[10, 3, 1]) /* ty=Tensor[(10, 3, 1), float64] */;
  %287 = @func_10255(%284, %285, %286) /* ty=(Tensor[(30, 9), float32], Tensor[(270), float32], Tensor[(225, 10), float32], Tensor[(7, 13, 6), uint64], Tensor[(546), bool], Tensor[(10, 3, 2310), int32], Tensor[(8, 16, 8), float64], Tensor[(392), uint64], Tensor[(10, 3, ?), bool], Tensor[(16, 15, 5), float32]) */;
  %288 = %280.0;
  %289 = %287.9;
  (%288, %289, meta[relay.Constant][28] /* ty=Tensor[(10, 3), float64] */, %var_16544)
}

def @func_4904(%var_4896: Tensor[(2, 9, 10), int8], %var_4897: Tensor[(2, 9, 10), int8]) -> (Tensor[(2, 9, 10), int8],) {
  %290 = cast(%var_4897, dtype="int8") /* ty=Tensor[(2, 9, 10), int8] */;
  %291 = shape_of(%var_4896, dtype="int32") /* ty=Tensor[(3), int32] */;
  %292 = cast(%var_4896, dtype="int8") /* ty=Tensor[(2, 9, 10), int8] */;
  %293 = dyn.reshape(%290, %291, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %294 = bitwise_xor(%292, %293) /* ty=Tensor[(2, 9, 10), int8] */;
  (%294,)
}

def @func_8889() -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), int64], Tensor[(7, 3, 15), float32], Tensor[(315), float32]) {
  %295 = @func_8606() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %296 = @func_7714() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %297 = %296.0;
  %298 = cast(meta[relay.Constant][29] /* ty=Tensor[(8, 16, 8), float64] */, dtype="int64") /* ty=Tensor[(8, 16, 8), int64] */;
  %299 = shape_of(%297, dtype="int32") /* ty=Tensor[(3), int32] */;
  %300 = cast(%297, dtype="int64") /* ty=Tensor[(8, 16, 8), int64] */;
  %301 = dyn.reshape(%298, %299, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %302 = cast(meta[relay.Constant][30] /* ty=Tensor[(315), float32] */, dtype="float32") /* ty=Tensor[(315), float32] */;
  %303 = reshape(%302, newshape=[7, 3, 15]) /* ty=Tensor[(7, 3, 15), float32] */;
  %304 = %295.0;
  %305 = bitwise_and(%300, %301) /* ty=Tensor[(8, 16, 8), int64] */;
  %306 = @func_6097(%303) /* ty=Tensor[(7, 3, 15), float32] */;
  (%304, %305, %306, meta[relay.Constant][30] /* ty=Tensor[(315), float32] */)
}

def @func_17718(%var_17709: Tensor[(14, 15, 14), float64]) -> (Tensor[(14, 15, 14), float32],) {
  %307 = @func_9514() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64], Tensor[(392), uint64]) */;
  %308 = %307.1;
  %309 = cast(%var_17709, dtype="float32") /* ty=Tensor[(14, 15, 14), float32] */;
  %310 = shape_of(%308, dtype="int32") /* ty=Tensor[(3), int32] */;
  %311 = cast(%308, dtype="float32") /* ty=Tensor[(14, 15, 14), float32] */;
  %312 = dyn.reshape(%309, %310, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %313 = floor_divide(%311, %312) /* ty=Tensor[(14, 15, 14), float32] */;
  (%313,)
}

def @func_13828() -> (Tensor[(8, 16, 8), float32],) {
  %314 = @func_9254() /* ty=Tensor[(8, 16, 8), float32] */;
  (%314,)
}

def @func_2096(%var_2091: uint64, %var_2092: Tensor[(7, 4, 16), uint64]) -> Tensor[(7, 4, 16), bool] {
  %315 = cast(%var_2091, dtype="bool") /* ty=bool */;
  %316 = cast(%var_2092, dtype="bool") /* ty=Tensor[(7, 4, 16), bool] */;
  equal(%315, %316) /* ty=Tensor[(7, 4, 16), bool] */
}

def @func_14152() -> (Tensor[(8, 16, 8), float32], Tensor[(14, 15, 14), float64], Tensor[(8, 16, 8), int64]) {
  %317 = @func_12988() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64], Tensor[(3), float32]) */;
  %318 = @func_9744() /* ty=(Tensor[(8, 16, 8), float32], Tensor[(315), float32], Tensor[(7, 3, 15), float32], Tensor[(8, 16, 8), int64]) */;
  %319 = @func_9254() /* ty=Tensor[(8, 16, 8), float32] */;
  %320 = %317.1;
  %321 = %318.3;
  (%319, %320, %321)
}

def @func_16301() -> (Tensor[(8, 16, 8), float32], Tensor[(14, 15, 14), float64]) {
  %322 = @func_14772() /* ty=(Tensor[(8, 16, 8), float32],) */;
  %323 = @func_13615() /* ty=(Tensor[(14, 15, 14), float64],) */;
  %324 = %322.0;
  %325 = %323.0;
  (%324, %325)
}

def @func_17917() -> (Tensor[(448), uint64],) {
  %326 = @func_16823() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(7, 4, 16), bool], Tensor[(448), uint64]) */;
  %327 = %326.2;
  (%327,)
}

def @func_14076() -> Tensor[(8, 16, 8), float32] {
  @func_9064() /* ty=Tensor[(8, 16, 8), float32] */
}

def @func_16723() -> (Tensor[(14, 15, 14), float64], Tensor[(3, 4, 7), int16], uint32, Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32]) {
  %328 = @func_13615() /* ty=(Tensor[(14, 15, 14), float64],) */;
  %329 = cast(meta[relay.Constant][31] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %330 = reshape(%329, newshape=[]) /* ty=uint32 */;
  %331 = @func_12669(%330) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(3, 4, 7), int16], uint32, Tensor[(8, 16, 8), float64]) */;
  %332 = @func_10030() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %333 = @func_7874() /* ty=(Tensor[(8, 16, 8), float32],) */;
  %334 = %328.0;
  %335 = %331.1;
  %336 = %332.0;
  %337 = %333.0;
  (%334, %335, meta[relay.Constant][31] /* ty=uint32 */, %336, %337)
}

def @func_551(%var_532: uint32) -> (Tensor[(16, 15, 5), uint32], Tensor[(16, 15, 5), float32], Tensor[(16, 15, 5), float32]) {
  %338 = cast(%var_532, dtype="uint32") /* ty=uint32 */;
  %339 = cast(meta[relay.Constant][32] /* ty=Tensor[(16, 15, 5), uint32] */, dtype="uint32") /* ty=Tensor[(16, 15, 5), uint32] */;
  %340 = cast(meta[relay.Constant][32] /* ty=Tensor[(16, 15, 5), uint32] */, dtype="float32") /* ty=Tensor[(16, 15, 5), float32] */;
  %341 = sqrt(%340) /* ty=Tensor[(16, 15, 5), float32] */;
  %342 = cast(%341, dtype="float32") /* ty=Tensor[(16, 15, 5), float32] */;
  %343 = cast(%341, dtype="float32") /* ty=Tensor[(16, 15, 5), float32] */;
  %344 = bitwise_or(%338, %339) /* ty=Tensor[(16, 15, 5), uint32] */;
  %345 = acos(%342) /* ty=Tensor[(16, 15, 5), float32] */;
  %346 = log10(%343) /* ty=Tensor[(16, 15, 5), float32] */;
  (%344, %345, %346)
}

def @func_4427(%var_4410: Tensor[(2, 1, 4), float64], %var_4419: uint64, %var_4420: Tensor[(448), uint64]) -> (Tensor[(2, 1, 4), float64], Tensor[(7, 4, 16), bool], uint64, Tensor[(448), uint64]) {
  %347 = cast(%var_4410, dtype="float64") /* ty=Tensor[(2, 1, 4), float64] */;
  %348 = cast(%var_4419, dtype="uint64") /* ty=uint64 */;
  %349 = cast(%var_4420, dtype="uint64") /* ty=Tensor[(448), uint64] */;
  %350 = reshape(%348, newshape=[]) /* ty=uint64 */;
  %351 = reshape(%349, newshape=[7, 4, 16]) /* ty=Tensor[(7, 4, 16), uint64] */;
  %352 = atan(%347) /* ty=Tensor[(2, 1, 4), float64] */;
  %353 = @func_2096(%350, %351) /* ty=Tensor[(7, 4, 16), bool] */;
  (%352, %353, %var_4419, %var_4420)
}

def @func_15824() -> (Tensor[(8, 16, 8), float32],) {
  %354 = @func_9254() /* ty=Tensor[(8, 16, 8), float32] */;
  (%354,)
}

def @func_8173() -> (Tensor[(8, 16, 8), float32],) {
  %355 = @func_8028() /* ty=Tensor[(8, 16, 8), float32] */;
  (%355,)
}

def @func_15288(%var_15272: Tensor[(448), uint64]) -> (Tensor[(8, 1), float64], Tensor[(2, 1, 4), float64], uint64, Tensor[(448), uint64], Tensor[(9, 5, 6), bool], Tensor[(270), float64]) {
  %356 = @func_13553() /* ty=(Tensor[(8, 1), float64],) */;
  %357 = %356.0;
  %358 = cast(%357, dtype="float64") /* ty=Tensor[(8, 1), float64] */;
  %359 = cast(meta[relay.Constant][33] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %360 = cast(%var_15272, dtype="uint64") /* ty=Tensor[(448), uint64] */;
  %361 = reshape(%358, newshape=[2, 1, 4]) /* ty=Tensor[(2, 1, 4), float64] */;
  %362 = reshape(%359, newshape=[]) /* ty=uint64 */;
  %363 = reshape(%360, newshape=[448]) /* ty=Tensor[(448), uint64] */;
  %364 = @func_4427(%361, %362, %363) /* ty=(Tensor[(2, 1, 4), float64], Tensor[(7, 4, 16), bool], uint64, Tensor[(448), uint64]) */;
  %365 = cast(meta[relay.Constant][34] /* ty=Tensor[(270), float64] */, dtype="float64") /* ty=Tensor[(270), float64] */;
  %366 = reshape(%365, newshape=[9, 5, 6]) /* ty=Tensor[(9, 5, 6), float64] */;
  %367 = @func_14035(%366) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(270), float32], Tensor[(8, 16, 8), float64], Tensor[(15, 3, 11), float32], Tensor[(495, 1), float32], Tensor[(9, 5, 6), bool]) */;
  %368 = %364.0;
  %369 = %367.5;
  (%357, %368, meta[relay.Constant][33] /* ty=uint64 */, %var_15272, %369, meta[relay.Constant][34] /* ty=Tensor[(270), float64] */)
}

def @func_17835() -> Tensor[(8, 16, 8), float64] {
  %370 = @func_16189() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %370.0
}

def @func_8825() -> Tensor[(8, 16, 8), float64] {
  @func_7783() /* ty=Tensor[(8, 16, 8), float64] */
}

def @func_7874() -> (Tensor[(8, 16, 8), float32],) {
  %371 = @func_7714() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %372 = %371.0;
  %373 = cast(%372, dtype="float32") /* ty=Tensor[(8, 16, 8), float32] */;
  %374 = sinh(%373) /* ty=Tensor[(8, 16, 8), float32] */;
  (%374,)
}

def @func_11440() -> (Tensor[(8, 16, 8), float64],) {
  %375 = @func_9795() /* ty=Tensor[(8, 16, 8), float64] */;
  %376 = cast(%375, dtype="float64") /* ty=Tensor[(8, 16, 8), float64] */;
  %377 = log2(%376) /* ty=Tensor[(8, 16, 8), float64] */;
  (%377,)
}

def @func_12988() -> (Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64], Tensor[(3), float32]) {
  %378 = @func_7714() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %379 = cast(meta[relay.Constant][35] /* ty=Tensor[(3), float32] */, dtype="float32") /* ty=Tensor[(3), float32] */;
  %380 = reshape(%379, newshape=[3]) /* ty=Tensor[(3), float32] */;
  %381 = @func_7828(%380) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64], Tensor[(2940, 1), float64], Tensor[(3, 6, 7), float32], Tensor[(3), float32], Tensor[(126), float32]) */;
  %382 = %378.0;
  %383 = %381.1;
  (%382, %383, meta[relay.Constant][35] /* ty=Tensor[(3), float32] */)
}

def @func_17610() -> uint64 {
  %384 = @func_12565() /* ty=(Tensor[(315), float32], Tensor[(8, 16, 8), uint32], uint64) */;
  %384.2
}

def @func_14035(%var_14021: Tensor[(9, 5, 6), float64]) -> (Tensor[(8, 16, 8), float32], Tensor[(270), float32], Tensor[(8, 16, 8), float64], Tensor[(15, 3, 11), float32], Tensor[(495, 1), float32], Tensor[(9, 5, 6), bool]) {
  %385 = @func_12730() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32]) */;
  %386 = cast(meta[relay.Constant][37] /* ty=Tensor[(495, 1), float32] */, dtype="float32") /* ty=Tensor[(495, 1), float32] */;
  %387 = reshape(%386, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), float32] */;
  %388 = cast(meta[relay.Constant][36] /* ty=Tensor[(270), float32] */, dtype="float32") /* ty=Tensor[(270), float32] */;
  %389 = reshape(%388, newshape=[9, 5, 6]) /* ty=Tensor[(9, 5, 6), float32] */;
  %390 = @func_652(%389) /* ty=(Tensor[(9, 5, 6), float64],) */;
  %391 = %390.0;
  %392 = cast(%var_14021, dtype="bool") /* ty=Tensor[(9, 5, 6), bool] */;
  %393 = shape_of(%391, dtype="int32") /* ty=Tensor[(3), int32] */;
  %394 = cast(%391, dtype="bool") /* ty=Tensor[(9, 5, 6), bool] */;
  %395 = dyn.reshape(%392, %393, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %396 = @func_9380() /* ty=Tensor[(8, 16, 8), float32] */;
  %397 = %385.2;
  %398 = @func_11501(%387) /* ty=Tensor[(15, 3, 11), float32] */;
  %399 = greater(%394, %395) /* ty=Tensor[(9, 5, 6), bool] */;
  (%396, meta[relay.Constant][36] /* ty=Tensor[(270), float32] */, %397, %398, meta[relay.Constant][37] /* ty=Tensor[(495, 1), float32] */, %399)
}

def @func_16517(%var_16393: int64, %var_16394: Tensor[(4, 12, 5), int64], %var_16502: Tensor[(2940), float64]) -> (Tensor[(4, 12, 5), bool], Tensor[(8, 16, 8), float64], Tensor[(270), float64], Tensor[(2, 9, 10), int8], Tensor[(180), int8], Tensor[(9, 5, 6), float64], Tensor[(16, 15, 5), float32], Tensor[(14, 15, 14), float64], Tensor[(2940), float64], Tensor[(8, 16, 8), float64]) {
  %400 = cast(%var_16393, dtype="bool") /* ty=bool */;
  %401 = cast(%var_16394, dtype="bool") /* ty=Tensor[(4, 12, 5), bool] */;
  %402 = @func_12448() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64]) */;
  %403 = cast(meta[relay.Constant][39] /* ty=Tensor[(180), int8] */, dtype="int8") /* ty=Tensor[(180), int8] */;
  %404 = reshape(%403, newshape=[180]) /* ty=Tensor[(180), int8] */;
  %405 = @func_8011(%404) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(2, 9, 10), int8], Tensor[(180), int8]) */;
  %406 = cast(meta[relay.Constant][38] /* ty=Tensor[(270), float64] */, dtype="float64") /* ty=Tensor[(270), float64] */;
  %407 = reshape(%406, newshape=[9, 5, 6]) /* ty=Tensor[(9, 5, 6), float64] */;
  %408 = @func_14035(%407) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(270), float32], Tensor[(8, 16, 8), float64], Tensor[(15, 3, 11), float32], Tensor[(495, 1), float32], Tensor[(9, 5, 6), bool]) */;
  %409 = %408.5;
  %410 = cast(%409, dtype="float64") /* ty=Tensor[(9, 5, 6), float64] */;
  %411 = cast(%var_16393, dtype="uint32") /* ty=uint32 */;
  %412 = reshape(%411, newshape=[]) /* ty=uint32 */;
  %413 = @func_551(%412) /* ty=(Tensor[(16, 15, 5), uint32], Tensor[(16, 15, 5), float32], Tensor[(16, 15, 5), float32]) */;
  %414 = %413.1;
  %415 = cast(%var_16393, dtype="float32") /* ty=float32 */;
  %416 = cast(%414, dtype="float32") /* ty=Tensor[(16, 15, 5), float32] */;
  %417 = cast(%var_16502, dtype="float64") /* ty=Tensor[(2940), float64] */;
  %418 = reshape(%417, newshape=[2940]) /* ty=Tensor[(2940), float64] */;
  %419 = @func_11968(%418) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(3, 4, 13), int32], Tensor[(2940), bool], Tensor[(14, 15, 14), float64]) */;
  %420 = less_equal(%400, %401) /* ty=Tensor[(4, 12, 5), bool] */;
  %421 = %402.0;
  %422 = %405.1;
  %423 = tan(%410) /* ty=Tensor[(9, 5, 6), float64] */;
  %424 = divide(%415, %416) /* ty=Tensor[(16, 15, 5), float32] */;
  %425 = %419.3;
  %426 = @func_15457() /* ty=Tensor[(8, 16, 8), float64] */;
  (%420, %421, meta[relay.Constant][38] /* ty=Tensor[(270), float64] */, %422, meta[relay.Constant][39] /* ty=Tensor[(180), int8] */, %423, %424, %425, %var_16502, %426)
}

def @func_1061(%var_1042: Tensor[(15, 10, 15), float32], %var_1050: Tensor[(30, 9), float32]) -> (Tensor[(15, 10, 15), float32], Tensor[(9, 5, 6), float64], Tensor[(30, 9), float32], Tensor[(9, 5, 6), float64]) {
  %427 = cast(%var_1042, dtype="float32") /* ty=Tensor[(15, 10, 15), float32] */;
  %428 = cast(%var_1050, dtype="float32") /* ty=Tensor[(30, 9), float32] */;
  %429 = reshape(%428, newshape=[9, 5, 6]) /* ty=Tensor[(9, 5, 6), float32] */;
  %430 = @func_652(%429) /* ty=(Tensor[(9, 5, 6), float64],) */;
  %431 = %430.0;
  %432 = cast(%431, dtype="float32") /* ty=Tensor[(9, 5, 6), float32] */;
  %433 = reshape(%432, newshape=[9, 5, 6]) /* ty=Tensor[(9, 5, 6), float32] */;
  %434 = @func_652(%433) /* ty=(Tensor[(9, 5, 6), float64],) */;
  %435 = exp(%427) /* ty=Tensor[(15, 10, 15), float32] */;
  %436 = %434.0;
  (%435, %431, %var_1050, %436)
}

def @func_14996() -> (Tensor[(270), float32], Tensor[(8, 16, 8), float64], Tensor[(6, 1, 12), int32], int32) {
  %437 = @func_11129() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(270), float32]) */;
  %438 = @func_10876() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %439 = cast(8 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %440 = reshape(%439, newshape=[]) /* ty=int32 */;
  %441 = @func_3958(%440) /* ty=(Tensor[(6, 1, 12), int32], Tensor[(6, 1, 12), uint8]) */;
  %442 = %437.2;
  %443 = %438.0;
  %444 = %441.0;
  (%442, %443, %444, 8 /* ty=int32 */)
}

def @func_8424() -> (Tensor[(8, 16, 8), float32], Tensor[(3, 6, 7), float32], Tensor[(3), float32], Tensor[(126), float32]) {
  %445 = cast(meta[relay.Constant][40] /* ty=Tensor[(3), float32] */, dtype="float32") /* ty=Tensor[(3), float32] */;
  %446 = cast(meta[relay.Constant][41] /* ty=Tensor[(126), float32] */, dtype="float32") /* ty=Tensor[(126), float32] */;
  %447 = reshape(%445, newshape=[3, 1, 1]) /* ty=Tensor[(3, 1, 1), float32] */;
  %448 = reshape(%446, newshape=[3, 6, 7]) /* ty=Tensor[(3, 6, 7), float32] */;
  %449 = @func_8028() /* ty=Tensor[(8, 16, 8), float32] */;
  %450 = @func_7314(%447, %448) /* ty=Tensor[(3, 6, 7), float32] */;
  (%449, %450, meta[relay.Constant][40] /* ty=Tensor[(3), float32] */, meta[relay.Constant][41] /* ty=Tensor[(126), float32] */)
}

def @func_4319(%var_4304: int64, %var_4305: Tensor[(8, 1, 5), int64]) -> (Tensor[(8, 1, 5), int64], Tensor[(7, 13, 6), uint64], Tensor[(546), bool]) {
  %451 = cast(%var_4304, dtype="int64") /* ty=int64 */;
  %452 = cast(%var_4305, dtype="int64") /* ty=Tensor[(8, 1, 5), int64] */;
  %453 = cast(meta[relay.Constant][42] /* ty=Tensor[(546), bool] */, dtype="bool") /* ty=Tensor[(546), bool] */;
  %454 = cast(meta[relay.Constant][42] /* ty=Tensor[(546), bool] */, dtype="bool") /* ty=Tensor[(546), bool] */;
  %455 = reshape(%453, newshape=[7, 13, 6]) /* ty=Tensor[(7, 13, 6), bool] */;
  %456 = reshape(%454, newshape=[7, 13, 6]) /* ty=Tensor[(7, 13, 6), bool] */;
  %457 = @func_4270(%455, %456) /* ty=(Tensor[(7, 13, 6), uint64],) */;
  %458 = minimum(%451, %452) /* ty=Tensor[(8, 1, 5), int64] */;
  %459 = %457.0;
  (%458, %459, meta[relay.Constant][42] /* ty=Tensor[(546), bool] */)
}

def @func_15709(%var_15658: Tensor[(512), float64]) -> (Tensor[(8, 16, 8), int64], Tensor[(8, 1), float64], Tensor[(9, 7, 10), float64], float64, Tensor[(512), float64], Tensor[(392), uint64], Tensor[(14, 15, 14), float64], Tensor[(8, 16, 8), float64], Tensor[(9, 5, 13), float64], Tensor[(5, 117), float64]) {
  %460 = @func_8889() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), int64], Tensor[(7, 3, 15), float32], Tensor[(315), float32]) */;
  %461 = cast(2.19055f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %462 = cast(%var_15658, dtype="float64") /* ty=Tensor[(512), float64] */;
  %463 = cast(meta[relay.Constant][43] /* ty=Tensor[(392), uint64] */, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %464 = reshape(%461, newshape=[]) /* ty=float64 */;
  %465 = reshape(%462, newshape=[4, 8, 16]) /* ty=Tensor[(4, 8, 16), float64] */;
  %466 = reshape(%463, newshape=[392]) /* ty=Tensor[(392), uint64] */;
  %467 = @func_12123(%464, %465, %466) /* ty=(Tensor[(4, 8, 16), int8], Tensor[(9, 7, 10), float64], Tensor[(392), uint64], Tensor[(8, 16, 8), float64]) */;
  %468 = @func_14262() /* ty=(Tensor[(14, 15, 14), float64], Tensor[(8, 16, 8), float64]) */;
  %469 = @func_14262() /* ty=(Tensor[(14, 15, 14), float64], Tensor[(8, 16, 8), float64]) */;
  %470 = cast(meta[relay.Constant][44] /* ty=Tensor[(5, 117), float64] */, dtype="float64") /* ty=Tensor[(5, 117), float64] */;
  %471 = reshape(%470, newshape=[65, 9]) /* ty=Tensor[(65, 9), float64] */;
  %472 = @func_11268(%471) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(9, 5, 13), float64], Tensor[(65, 9), float64]) */;
  %473 = %460.1;
  %474 = @func_15306() /* ty=Tensor[(8, 1), float64] */;
  %475 = %467.1;
  %476 = %468.0;
  %477 = %469.1;
  %478 = %472.1;
  (%473, %474, %475, 2.19055f64 /* ty=float64 */, %var_15658, meta[relay.Constant][43] /* ty=Tensor[(392), uint64] */, %476, %477, %478, meta[relay.Constant][44] /* ty=Tensor[(5, 117), float64] */)
}

def @func_12942(%var_12893: uint64) -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(7, 4, 16), bool], uint64, Tensor[(448), uint64], Tensor[(8, 16, 8), float64]) {
  %479 = @func_11440() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %480 = cast(%var_12893, dtype="uint64") /* ty=uint64 */;
  %481 = cast(meta[relay.Constant][45] /* ty=Tensor[(448), uint64] */, dtype="uint64") /* ty=Tensor[(448), uint64] */;
  %482 = reshape(%480, newshape=[]) /* ty=uint64 */;
  %483 = reshape(%481, newshape=[7, 4, 16]) /* ty=Tensor[(7, 4, 16), uint64] */;
  %484 = @func_8606() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %485 = @func_10300() /* ty=Tensor[(8, 16, 8), float64] */;
  %486 = %479.0;
  %487 = @func_2096(%482, %483) /* ty=Tensor[(7, 4, 16), bool] */;
  %488 = %484.0;
  (%485, %486, %487, %var_12893, meta[relay.Constant][45] /* ty=Tensor[(448), uint64] */, %488)
}

def @func_7200(%var_7190: Tensor[(10, 9, 15), float32]) -> Tensor[(10, 9, 15), float32] {
  %489 = cast(meta[relay.Constant][46] /* ty=Tensor[(10, 9, 15), float32] */, dtype="float32") /* ty=Tensor[(10, 9, 15), float32] */;
  %490 = shape_of(%var_7190, dtype="int32") /* ty=Tensor[(3), int32] */;
  %491 = cast(%var_7190, dtype="float32") /* ty=Tensor[(10, 9, 15), float32] */;
  %492 = dyn.reshape(%489, %490, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%491, %492) /* ty=Tensor[(10, 9, 15), float32] */
}

def @func_16844(%var_16834: bool, %var_16835: Tensor[(108), bool]) -> (Tensor[(8, 16, 8), float32], Tensor[(3, 4, 9), bool], bool, Tensor[(108), bool]) {
  %493 = @func_16598() /* ty=(Tensor[(8, 16, 8), float32],) */;
  %494 = cast(%var_16834, dtype="bool") /* ty=bool */;
  %495 = cast(%var_16835, dtype="bool") /* ty=Tensor[(108), bool] */;
  %496 = reshape(%494, newshape=[]) /* ty=bool */;
  %497 = reshape(%495, newshape=[3, 4, 9]) /* ty=Tensor[(3, 4, 9), bool] */;
  %498 = @func_8769(%496, %497) /* ty=(Tensor[(3, 4, 9), bool],) */;
  %499 = %493.0;
  %500 = %498.0;
  (%499, %500, %var_16834, %var_16835)
}

def @func_16942() -> (Tensor[(8, 16, 8), float32],) {
  %501 = @func_8028() /* ty=Tensor[(8, 16, 8), float32] */;
  %502 = cast(%501, dtype="float32") /* ty=Tensor[(8, 16, 8), float32] */;
  %503 = sin(%502) /* ty=Tensor[(8, 16, 8), float32] */;
  (%503,)
}

def @func_13426(%var_13339: Tensor[(416), int8], %var_13373: Tensor[(9, 5, 6), float64], %var_13415: Tensor[(630), float64], %var_13418: Tensor[(270, 14), bool]) -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(7, 13, 6), uint64], Tensor[(270, 416), bool], Tensor[(8, 16, 8), float64], Tensor[(9, 5, 6), uint32], Tensor[(270, ?), float64], Tensor[(8, 16, 8), float32], Tensor[(9, 7, 10), float64], Tensor[(630), float64], Tensor[(270, 14), uint16]) {
  %504 = @func_11583() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32]) */;
  %505 = @func_13022() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64]) */;
  %506 = cast(%var_13339, dtype="int8") /* ty=Tensor[(416), int8] */;
  %507 = reshape(%506, newshape=[16, 13, 2]) /* ty=Tensor[(16, 13, 2), int8] */;
  %508 = @func_7107(%507) /* ty=(Tensor[(6, 1, 12), int32], Tensor[(16, 13, 2), bool], Tensor[(7, 13, 6), uint64], Tensor[(546), bool]) */;
  %509 = cast(%var_13339, dtype="bool") /* ty=Tensor[(416), bool] */;
  %510 = cast(meta[relay.Constant][47] /* ty=Tensor[(270, 1), float32] */, dtype="bool") /* ty=Tensor[(270, 1), bool] */;
  %511 = cast(meta[relay.Constant][47] /* ty=Tensor[(270, 1), float32] */, dtype="float32") /* ty=Tensor[(270, 1), float32] */;
  %512 = reshape(%511, newshape=[9, 5, 6]) /* ty=Tensor[(9, 5, 6), float32] */;
  %513 = @func_652(%512) /* ty=(Tensor[(9, 5, 6), float64],) */;
  %514 = %513.0;
  %515 = cast(%var_13373, dtype="uint32") /* ty=Tensor[(9, 5, 6), uint32] */;
  %516 = shape_of(%514, dtype="int32") /* ty=Tensor[(3), int32] */;
  %517 = cast(%514, dtype="uint32") /* ty=Tensor[(9, 5, 6), uint32] */;
  %518 = dyn.reshape(%515, %516, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %519 = cast(meta[relay.Constant][47] /* ty=Tensor[(270, 1), float32] */, dtype="float64") /* ty=Tensor[(270, 1), float64] */;
  %520 = log(%519) /* ty=Tensor[(270, 1), float64] */;
  %521 = cast(meta[relay.Constant][47] /* ty=Tensor[(270, 1), float32] */, dtype="float64") /* ty=Tensor[(270, 1), float64] */;
  %522 = shape_of(%520, dtype="int32") /* ty=Tensor[(2), int32] */;
  %523 = cast(%520, dtype="float64") /* ty=Tensor[(270, 1), float64] */;
  %524 = dyn.reshape(%521, %522, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %525 = cast(%var_13415, dtype="float64") /* ty=Tensor[(630), float64] */;
  %526 = reshape(%525, newshape=[9, 7, 10]) /* ty=Tensor[(9, 7, 10), float64] */;
  %527 = @func_3445(%526) /* ty=(Tensor[(9, 7, 10), float64],) */;
  %528 = cast(%514, dtype="bool") /* ty=Tensor[(9, 5, 6), bool] */;
  %529 = shape_of(%520, dtype="int32") /* ty=Tensor[(2), int32] */;
  %530 = cast(%520, dtype="bool") /* ty=Tensor[(270, 1), bool] */;
  %531 = dyn.reshape(%528, %529, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %532 = greater_equal(%530, %531) /* ty=Tensor[(270, ?), bool] */;
  %533 = cast(%532, dtype="uint16") /* ty=Tensor[(270, ?), uint16] */;
  %534 = cast(%var_13418, dtype="uint16") /* ty=Tensor[(270, 14), uint16] */;
  %535 = %504.0;
  %536 = %505.1;
  %537 = %508.2;
  %538 = logical_and(%509, %510) /* ty=Tensor[(270, 416), bool] */;
  %539 = @func_9492() /* ty=Tensor[(8, 16, 8), float64] */;
  %540 = subtract(%517, %518) /* ty=Tensor[(9, 5, 6), uint32] */;
  %541 = minimum(%523, %524) /* ty=Tensor[(270, ?), float64] */;
  %542 = @func_8028() /* ty=Tensor[(8, 16, 8), float32] */;
  %543 = %527.0;
  %544 = logical_xor(%533, %534) /* ty=Tensor[(270, 14), uint16] */;
  (%535, %536, %537, %538, %539, %540, %541, %542, %543, %var_13415, %544)
}

def @func_17116() -> (Tensor[(8, 16, 8), float32],) {
  %545 = @func_9254() /* ty=Tensor[(8, 16, 8), float32] */;
  (%545,)
}

def @func_18224() -> (Tensor[(8, 16, 8), float32], Tensor[(270), float32]) {
  %546 = @func_12768() /* ty=(Tensor[(8, 16, 8), float32],) */;
  %547 = @func_11129() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(270), float32]) */;
  %548 = %546.0;
  %549 = %547.2;
  (%548, %549)
}

def @func_13615() -> (Tensor[(14, 15, 14), float64],) {
  %550 = @func_12378() /* ty=(Tensor[(14, 15, 14), float64],) */;
  %551 = %550.0;
  (%551,)
}

def @func_17576(%var_17448: Tensor[(14, 4, 5), float64], %var_17449: Tensor[(14, 4, 5), float64], %var_17456: Tensor[(1350, 1), float32]) -> (Tensor[(8, 16, 8), float64], Tensor[(1350, 1), float32], Tensor[(392), uint64], uint64, Tensor[(14, 4, 5), float64], Tensor[(8, 16, 8), float32], Tensor[(6, 18), bool], Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], Tensor[(448), uint64], Tensor[(392), uint64], Tensor[(6, 1, 12), uint8], Tensor[(4, 16, 8), float64], Tensor[(16, 32), float64], Tensor[(84), bool], Tensor[(1, 84), bool], Tensor[(8, 16, 8), float64]) {
  %552 = cast(%var_17456, dtype="float32") /* ty=Tensor[(1350, 1), float32] */;
  %553 = cast(meta[relay.Constant][48] /* ty=Tensor[(392), uint64] */, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %554 = reshape(%552, newshape=[1350]) /* ty=Tensor[(1350), float32] */;
  %555 = reshape(%553, newshape=[392]) /* ty=Tensor[(392), uint64] */;
  %556 = @func_8742(%554, %555) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(1350), float32], Tensor[(8, 16, 8), float64], Tensor[(392), uint64]) */;
  %557 = @func_12096() /* ty=(Tensor[(448), uint64], Tensor[(8, 16, 8), float64], uint64, Tensor[(8, 1), float64], uint64, Tensor[(8, 16, 8), float64]) */;
  %558 = cast(%var_17449, dtype="float64") /* ty=Tensor[(14, 4, 5), float64] */;
  %559 = shape_of(%var_17448, dtype="int32") /* ty=Tensor[(3), int32] */;
  %560 = cast(%var_17448, dtype="float64") /* ty=Tensor[(14, 4, 5), float64] */;
  %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %562 = divide(%560, %561) /* ty=Tensor[(14, 4, 5), float64] */;
  %563 = cast(%562, dtype="float64") /* ty=Tensor[(14, 4, 5), float64] */;
  %564 = %557.4;
  %565 = cast(%564, dtype="bool") /* ty=bool */;
  %566 = cast(meta[relay.Constant][49] /* ty=Tensor[(6, 18), bool] */, dtype="bool") /* ty=Tensor[(6, 18), bool] */;
  %567 = reshape(%565, newshape=[]) /* ty=bool */;
  %568 = reshape(%566, newshape=[108]) /* ty=Tensor[(108), bool] */;
  %569 = @func_16844(%567, %568) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(3, 4, 9), bool], bool, Tensor[(108), bool]) */;
  %570 = @func_16598() /* ty=(Tensor[(8, 16, 8), float32],) */;
  %571 = @func_15824() /* ty=(Tensor[(8, 16, 8), float32],) */;
  %572 = @func_16648() /* ty=(Tensor[(448), uint64], Tensor[(7, 3, 15), float32], Tensor[(8, 16, 8), float64]) */;
  %573 = cast(%var_17456, dtype="float32") /* ty=Tensor[(1350, 1), float32] */;
  %574 = reshape(%573, newshape=[9, 150]) /* ty=Tensor[(9, 150), float32] */;
  %575 = @func_10940(%574) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(7, 13, 6), uint64], Tensor[(546), bool], Tensor[(8, 16, 8), float64], Tensor[(9, 150), float32], Tensor[(392), uint64]) */;
  %576 = cast(%564, dtype="int32") /* ty=int32 */;
  %577 = reshape(%576, newshape=[]) /* ty=int32 */;
  %578 = @func_3958(%577) /* ty=(Tensor[(6, 1, 12), int32], Tensor[(6, 1, 12), uint8]) */;
  %579 = cast(meta[relay.Constant][50] /* ty=Tensor[(16, 32), float64] */, dtype="float64") /* ty=Tensor[(16, 32), float64] */;
  %580 = reshape(%579, newshape=[4, 16, 8]) /* ty=Tensor[(4, 16, 8), float64] */;
  %581 = cast(meta[relay.Constant][51] /* ty=Tensor[(1, 84), bool] */, dtype="bool") /* ty=Tensor[(1, 84), bool] */;
  %582 = reshape(%581, newshape=[84]) /* ty=Tensor[(84), bool] */;
  %583 = @func_10651(%582) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], Tensor[(8, 11, 3), float64], Tensor[(264), float64], Tensor[(16, 15, 5), float32], Tensor[(224), int64], uint32, Tensor[(8, 16, 8), float32], Tensor[(84), bool], Tensor[(315), float32]) */;
  %584 = @func_15798() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %585 = %556.0;
  %586 = acos(%563) /* ty=Tensor[(14, 4, 5), float64] */;
  %587 = %569.0;
  %588 = %570.0;
  %589 = %571.0;
  %590 = %572.0;
  %591 = %575.5;
  %592 = %578.1;
  %593 = @func_12787(%580) /* ty=Tensor[(4, 16, 8), float64] */;
  %594 = %583.8;
  %595 = %584.0;
  (%585, %var_17456, meta[relay.Constant][48] /* ty=Tensor[(392), uint64] */, %564, %586, %587, meta[relay.Constant][49] /* ty=Tensor[(6, 18), bool] */, %588, %589, %590, %591, %592, %593, meta[relay.Constant][50] /* ty=Tensor[(16, 32), float64] */, %594, meta[relay.Constant][51] /* ty=Tensor[(1, 84), bool] */, %595)
}

def @func_14539() -> (Tensor[(8, 16, 8), float64], Tensor[(2940), int16]) {
  %596 = cast(meta[relay.Constant][52] /* ty=Tensor[(2940), float64] */, dtype="float32") /* ty=Tensor[(2940), float32] */;
  %597 = acosh(%596) /* ty=Tensor[(2940), float32] */;
  %598 = cast(meta[relay.Constant][52] /* ty=Tensor[(2940), float64] */, dtype="float64") /* ty=Tensor[(2940), float64] */;
  %599 = reshape(%598, newshape=[2940]) /* ty=Tensor[(2940), float64] */;
  %600 = @func_6512(%599) /* ty=(Tensor[(3, 4, 13), int32], Tensor[(14, 15, 14), float64], Tensor[(2940), float64], Tensor[(14, 15, 14), float64]) */;
  %601 = %600.1;
  %602 = cast(%601, dtype="int16") /* ty=Tensor[(14, 15, 14), int16] */;
  %603 = shape_of(%597, dtype="int32") /* ty=Tensor[(1), int32] */;
  %604 = cast(%597, dtype="int16") /* ty=Tensor[(2940), int16] */;
  %605 = dyn.reshape(%602, %603, newshape=[]) /* ty=Tensor[(?), int16] */;
  %606 = @func_9830() /* ty=Tensor[(8, 16, 8), float64] */;
  %607 = logical_xor(%604, %605) /* ty=Tensor[(2940), int16] */;
  (%606, %607)
}

def @func_14772() -> (Tensor[(8, 16, 8), float32],) {
  %608 = @func_9064() /* ty=Tensor[(8, 16, 8), float32] */;
  (%608,)
}

def @func_2534(%var_2530: Tensor[(14, 15, 14), float64]) -> Tensor[(14, 15, 14), float64] {
  %609 = cast(%var_2530, dtype="float64") /* ty=Tensor[(14, 15, 14), float64] */;
  log(%609) /* ty=Tensor[(14, 15, 14), float64] */
}

def @func_4270(%var_4250: Tensor[(7, 13, 6), bool], %var_4251: Tensor[(7, 13, 6), bool]) -> (Tensor[(7, 13, 6), uint64],) {
  %610 = cast(%var_4251, dtype="bool") /* ty=Tensor[(7, 13, 6), bool] */;
  %611 = shape_of(%var_4250, dtype="int32") /* ty=Tensor[(3), int32] */;
  %612 = cast(%var_4250, dtype="bool") /* ty=Tensor[(7, 13, 6), bool] */;
  %613 = dyn.reshape(%610, %611, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %614 = logical_and(%612, %613) /* ty=Tensor[(7, 13, 6), bool] */;
  %615 = cast(%614, dtype="uint64") /* ty=Tensor[(7, 13, 6), uint64] */;
  %616 = shape_of(%var_4250, dtype="int32") /* ty=Tensor[(3), int32] */;
  %617 = cast(%var_4250, dtype="uint64") /* ty=Tensor[(7, 13, 6), uint64] */;
  %618 = dyn.reshape(%615, %616, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %619 = bitwise_and(%617, %618) /* ty=Tensor[(7, 13, 6), uint64] */;
  (%619,)
}

def @func_2890(%var_2872: uint16, %var_2873: Tensor[(5, 11, 3), uint16]) -> (Tensor[(5, 11, 3), bool], Tensor[(9, 5, 6), float64], Tensor[(270), float32], Tensor[(14, 15, 14), float64], Tensor[(2940, 1), float64]) {
  %620 = cast(%var_2872, dtype="bool") /* ty=bool */;
  %621 = cast(%var_2873, dtype="bool") /* ty=Tensor[(5, 11, 3), bool] */;
  %622 = cast(meta[relay.Constant][53] /* ty=Tensor[(270), float32] */, dtype="float32") /* ty=Tensor[(270), float32] */;
  %623 = reshape(%622, newshape=[9, 5, 6]) /* ty=Tensor[(9, 5, 6), float32] */;
  %624 = @func_652(%623) /* ty=(Tensor[(9, 5, 6), float64],) */;
  %625 = cast(meta[relay.Constant][54] /* ty=Tensor[(2940, 1), float64] */, dtype="float64") /* ty=Tensor[(2940, 1), float64] */;
  %626 = reshape(%625, newshape=[14, 15, 14]) /* ty=Tensor[(14, 15, 14), float64] */;
  %627 = not_equal(%620, %621) /* ty=Tensor[(5, 11, 3), bool] */;
  %628 = %624.0;
  %629 = @func_2534(%626) /* ty=Tensor[(14, 15, 14), float64] */;
  (%627, %628, meta[relay.Constant][53] /* ty=Tensor[(270), float32] */, %629, meta[relay.Constant][54] /* ty=Tensor[(2940, 1), float64] */)
}

def @func_8589(%var_8568: Tensor[(1, 11), uint16], %var_8578: Tensor[(3, 88), float64]) -> (Tensor[(8, 16, 8), float32], Tensor[(7, 78), bool], Tensor[(624), int64], Tensor[(2250), uint16], Tensor[(1, 11), uint16], Tensor[(8, 11, 3), float64], Tensor[(3, 88), float64]) {
  %630 = cast(meta[relay.Constant][55] /* ty=Tensor[(624), int64] */, dtype="int64") /* ty=Tensor[(624), int64] */;
  %631 = cast(meta[relay.Constant][56] /* ty=Tensor[(2250), uint16] */, dtype="uint16") /* ty=Tensor[(2250), uint16] */;
  %632 = cast(%var_8568, dtype="uint16") /* ty=Tensor[(1, 11), uint16] */;
  %633 = reshape(%630, newshape=[3, 13, 16]) /* ty=Tensor[(3, 13, 16), int64] */;
  %634 = reshape(%631, newshape=[15, 15, 10]) /* ty=Tensor[(15, 15, 10), uint16] */;
  %635 = reshape(%632, newshape=[11]) /* ty=Tensor[(11), uint16] */;
  %636 = @func_8119(%633, %634, %635) /* ty=(Tensor[(3, 13, 16), int64], Tensor[(7, 13, 6), uint64], Tensor[(7, 78), bool], Tensor[(7, 13, 6), uint64], Tensor[(2250), uint16], Tensor[(15, 15, 10), bool], Tensor[(6, 1, 12), uint8], Tensor[(11), uint16]) */;
  %637 = cast(%var_8578, dtype="float64") /* ty=Tensor[(3, 88), float64] */;
  %638 = reshape(%637, newshape=[8, 11, 3]) /* ty=Tensor[(8, 11, 3), float64] */;
  %639 = @func_8347(%638) /* ty=(Tensor[(8, 11, 3), float64],) */;
  %640 = @func_8028() /* ty=Tensor[(8, 16, 8), float32] */;
  %641 = %636.2;
  %642 = %639.0;
  (%640, %641, meta[relay.Constant][55] /* ty=Tensor[(624), int64] */, meta[relay.Constant][56] /* ty=Tensor[(2250), uint16] */, %var_8568, %642, %var_8578)
}

def @func_14572(%var_14566: Tensor[(1350), float32]) -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32], Tensor[(1350), float32]) {
  %643 = cast(%var_14566, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %644 = reshape(%643, newshape=[9, 150]) /* ty=Tensor[(9, 150), float32] */;
  %645 = @func_10940(%644) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(7, 13, 6), uint64], Tensor[(546), bool], Tensor[(8, 16, 8), float64], Tensor[(9, 150), float32], Tensor[(392), uint64]) */;
  %646 = @func_7915() /* ty=Tensor[(8, 16, 8), float64] */;
  %647 = %645.0;
  (%646, %647, %var_14566)
}

def @func_11268(%var_11260: Tensor[(65, 9), float64]) -> (Tensor[(8, 16, 8), float64], Tensor[(9, 5, 13), float64], Tensor[(65, 9), float64]) {
  %648 = @func_8501() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64], Tensor[(2940), float64]) */;
  %649 = cast(%var_11260, dtype="float64") /* ty=Tensor[(65, 9), float64] */;
  %650 = reshape(%649, newshape=[9, 5, 13]) /* ty=Tensor[(9, 5, 13), float64] */;
  %651 = %648.0;
  %652 = @func_7412(%650) /* ty=Tensor[(9, 5, 13), float64] */;
  (%651, %652, %var_11260)
}

def @func_14427() -> (Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], Tensor[(350), int64], Tensor[(224), int64]) {
  %653 = cast(meta[relay.Constant][57] /* ty=Tensor[(224), int64] */, dtype="int64") /* ty=Tensor[(224), int64] */;
  %654 = reshape(%653, newshape=[224]) /* ty=Tensor[(224), int64] */;
  %655 = @func_10738(%654) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(350), int64], uint32, Tensor[(224), int64], uint32) */;
  %656 = @func_9380() /* ty=Tensor[(8, 16, 8), float32] */;
  %657 = @func_13258() /* ty=Tensor[(8, 16, 8), float32] */;
  %658 = %655.1;
  (%656, %657, %658, meta[relay.Constant][57] /* ty=Tensor[(224), int64] */)
}

def @func_18769() -> (Tensor[(8, 16, 8), float64], uint64) {
  %659 = @func_9577() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %660 = @func_18113() /* ty=(uint64,) */;
  %661 = %659.0;
  %662 = %660.0;
  (%661, %662)
}

def @func_9064() -> Tensor[(8, 16, 8), float32] {
  %663 = @func_8173() /* ty=(Tensor[(8, 16, 8), float32],) */;
  %663.0
}

def @func_13793(%var_13781: Tensor[(1350), float32]) -> (Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], Tensor[(9, 150), float32], Tensor[(1350), float32], Tensor[(8, 16, 8), float64]) {
  %664 = @func_7874() /* ty=(Tensor[(8, 16, 8), float32],) */;
  %665 = @func_11818() /* ty=(Tensor[(8, 16, 8), float32],) */;
  %666 = cast(%var_13781, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %667 = reshape(%666, newshape=[9, 150]) /* ty=Tensor[(9, 150), float32] */;
  %668 = @func_10940(%667) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(7, 13, 6), uint64], Tensor[(546), bool], Tensor[(8, 16, 8), float64], Tensor[(9, 150), float32], Tensor[(392), uint64]) */;
  %669 = %664.0;
  %670 = %665.0;
  %671 = %668.4;
  %672 = @func_9830() /* ty=Tensor[(8, 16, 8), float64] */;
  (%669, %670, %671, %var_13781, %672)
}

def @func_12518() -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64]) {
  %673 = @func_10876() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %674 = @func_10876() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %675 = @func_12378() /* ty=(Tensor[(14, 15, 14), float64],) */;
  %676 = @func_8825() /* ty=Tensor[(8, 16, 8), float64] */;
  %677 = %673.0;
  %678 = @func_9013() /* ty=Tensor[(8, 16, 8), float32] */;
  %679 = %674.0;
  %680 = %675.0;
  (%676, %677, %678, %679, %680)
}

def @func_11520() -> (Tensor[(8, 16, 8), float64],) {
  %681 = @func_8889() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), int64], Tensor[(7, 3, 15), float32], Tensor[(315), float32]) */;
  %682 = %681.0;
  (%682,)
}

def @func_11583() -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32]) {
  %683 = @func_7714() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %684 = %683.0;
  %685 = @func_9983() /* ty=Tensor[(8, 16, 8), float32] */;
  (%684, %685)
}

def @func_9514() -> (Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64], Tensor[(392), uint64]) {
  %686 = @func_8606() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %687 = cast(meta[relay.Constant][58] /* ty=Tensor[(392), uint64] */, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %688 = reshape(%687, newshape=[392]) /* ty=Tensor[(392), uint64] */;
  %689 = @func_8634(%688) /* ty=(Tensor[(14, 15, 14), float64], Tensor[(7, 4, 16), bool], uint64, Tensor[(448), uint64], Tensor[(8, 16, 8), float64], Tensor[(392), uint64], Tensor[(14, 15, 14), float64]) */;
  %690 = %686.0;
  %691 = %689.0;
  (%690, %691, meta[relay.Constant][58] /* ty=Tensor[(392), uint64] */)
}

def @func_9492() -> Tensor[(8, 16, 8), float64] {
  %692 = @func_8889() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), int64], Tensor[(7, 3, 15), float32], Tensor[(315), float32]) */;
  %692.0
}

def @func_11546() -> Tensor[(8, 16, 8), float32] {
  @func_9254() /* ty=Tensor[(8, 16, 8), float32] */
}

def @func_8501() -> (Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64], Tensor[(2940), float64]) {
  %693 = cast(meta[relay.Constant][59] /* ty=Tensor[(2940), float64] */, dtype="float64") /* ty=Tensor[(2940), float64] */;
  %694 = reshape(%693, newshape=[14, 15, 14]) /* ty=Tensor[(14, 15, 14), float64] */;
  %695 = @func_7915() /* ty=Tensor[(8, 16, 8), float64] */;
  %696 = @func_2534(%694) /* ty=Tensor[(14, 15, 14), float64] */;
  (%695, %696, meta[relay.Constant][59] /* ty=Tensor[(2940), float64] */)
}

def @func_12123(%var_12103: float64, %var_12104: Tensor[(4, 8, 16), float64], %var_12114: Tensor[(392), uint64]) -> (Tensor[(4, 8, 16), int8], Tensor[(9, 7, 10), float64], Tensor[(392), uint64], Tensor[(8, 16, 8), float64]) {
  %697 = cast(%var_12103, dtype="float64") /* ty=float64 */;
  %698 = cast(%var_12104, dtype="float64") /* ty=Tensor[(4, 8, 16), float64] */;
  %699 = divide(%697, %698) /* ty=Tensor[(4, 8, 16), float64] */;
  %700 = cast(%699, dtype="int8") /* ty=Tensor[(4, 8, 16), int8] */;
  %701 = shape_of(%var_12104, dtype="int32") /* ty=Tensor[(3), int32] */;
  %702 = cast(%var_12104, dtype="int8") /* ty=Tensor[(4, 8, 16), int8] */;
  %703 = dyn.reshape(%700, %701, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %704 = cast(%var_12114, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %705 = reshape(%704, newshape=[4, 7, 14]) /* ty=Tensor[(4, 7, 14), uint64] */;
  %706 = @func_7629(%705) /* ty=(Tensor[(4, 7, 14), bool], Tensor[(9, 7, 10), float64], Tensor[(630), float64], Tensor[(7, 13, 6), uint64], Tensor[(546), bool], Tensor[(4, 7, 14), uint16], Tensor[(4, 7, 14), float64]) */;
  %707 = left_shift(%702, %703) /* ty=Tensor[(4, 8, 16), int8] */;
  %708 = %706.1;
  %709 = @func_9830() /* ty=Tensor[(8, 16, 8), float64] */;
  (%707, %708, %var_12114, %709)
}

def @func_16598() -> (Tensor[(8, 16, 8), float32],) {
  %710 = @func_13828() /* ty=(Tensor[(8, 16, 8), float32],) */;
  %711 = %710.0;
  (%711,)
}

def @func_14869(%var_14815: Tensor[(2250), float32]) -> (Tensor[(8, 16, 8), float32], Tensor[(2250), float32], Tensor[(270), float32], Tensor[(14, ?, 2), bool], Tensor[(28), int16], Tensor[(8, 16, 8), float64], Tensor[(270), float64], Tensor[(770, 3), float64], Tensor[(490), float64]) {
  %712 = cast(meta[relay.Constant][61] /* ty=Tensor[(770, 3), float32] */, dtype="float32") /* ty=Tensor[(770, 3), float32] */;
  %713 = cast(meta[relay.Constant][61] /* ty=Tensor[(770, 3), float32] */, dtype="float32") /* ty=Tensor[(770, 3), float32] */;
  %714 = cast(meta[relay.Constant][60] /* ty=Tensor[(270), float32] */, dtype="float32") /* ty=Tensor[(270), float32] */;
  %715 = cast(%var_14815, dtype="float32") /* ty=Tensor[(2250), float32] */;
  %716 = reshape(%712, newshape=[11, 15, 14]) /* ty=Tensor[(11, 15, 14), float32] */;
  %717 = reshape(%713, newshape=[11, 15, 14]) /* ty=Tensor[(11, 15, 14), float32] */;
  %718 = reshape(%714, newshape=[30, 9]) /* ty=Tensor[(30, 9), float32] */;
  %719 = reshape(%715, newshape=[2250]) /* ty=Tensor[(2250), float32] */;
  %720 = @func_2639(%716, %717, %718, %719) /* ty=(Tensor[(11, 15, 14), float32], Tensor[(9, 5, 6), float64], Tensor[(30, 9), float32], Tensor[(30, 9), float32], Tensor[(2250), float32], Tensor[(16, 15, 5), float32], Tensor[(224), int64], uint32) */;
  %721 = %720.7;
  %722 = cast(meta[relay.Constant][60] /* ty=Tensor[(270), float32] */, dtype="float32") /* ty=Tensor[(270), float32] */;
  %723 = cast(%721, dtype="float32") /* ty=float32 */;
  %724 = cast(meta[relay.Constant][62] /* ty=Tensor[(28), int16] */, dtype="int16") /* ty=Tensor[(28), int16] */;
  %725 = reshape(%724, newshape=[14, 1, 2]) /* ty=Tensor[(14, 1, 2), int16] */;
  %726 = @func_12271(%725) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(4, 7, 14), float64], Tensor[(7, 56), uint64], Tensor[(14, ?, 2), bool]) */;
  %727 = mod(%722, %723) /* ty=Tensor[(270), float32] */;
  %728 = cast(%727, dtype="float64") /* ty=Tensor[(270), float64] */;
  %729 = reshape(%728, newshape=[270]) /* ty=Tensor[(270), float64] */;
  %730 = @func_14665(%729) /* ty=(Tensor[(16, 10, 7), bool], Tensor[(8, 16, 8), float64], Tensor[(495, 1), float32], Tensor[(270), float64]) */;
  %731 = cast(meta[relay.Constant][61] /* ty=Tensor[(770, 3), float32] */, dtype="float64") /* ty=Tensor[(770, 3), float64] */;
  %732 = @func_13239() /* ty=(Tensor[(8, 1), float64], Tensor[(16, 15, 5), float32], Tensor[(1, 224), int64], uint32, Tensor[(7, 7, 10), float64], Tensor[(490), float64], Tensor[(8, 16, 8), float64]) */;
  %733 = @func_9013() /* ty=Tensor[(8, 16, 8), float32] */;
  %734 = %726.3;
  %735 = @func_9795() /* ty=Tensor[(8, 16, 8), float64] */;
  %736 = %730.3;
  %737 = atanh(%731) /* ty=Tensor[(770, 3), float64] */;
  %738 = %732.5;
  (%733, %var_14815, %727, %734, meta[relay.Constant][62] /* ty=Tensor[(28), int16] */, %735, %736, %737, %738)
}

def @func_10651(%var_10642: Tensor[(84), bool]) -> (Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], Tensor[(8, 11, 3), float64], Tensor[(264), float64], Tensor[(16, 15, 5), float32], Tensor[(224), int64], uint32, Tensor[(8, 16, 8), float32], Tensor[(84), bool], Tensor[(315), float32]) {
  %739 = @func_7874() /* ty=(Tensor[(8, 16, 8), float32],) */;
  %740 = cast(meta[relay.Constant][63] /* ty=Tensor[(264), float64] */, dtype="float64") /* ty=Tensor[(264), float64] */;
  %741 = reshape(%740, newshape=[8, 11, 3]) /* ty=Tensor[(8, 11, 3), float64] */;
  %742 = @func_8347(%741) /* ty=(Tensor[(8, 11, 3), float64],) */;
  %743 = cast(meta[relay.Constant][64] /* ty=Tensor[(224), int64] */, dtype="int64") /* ty=Tensor[(224), int64] */;
  %744 = cast(meta[relay.Constant][64] /* ty=Tensor[(224), int64] */, dtype="int64") /* ty=Tensor[(224), int64] */;
  %745 = cast(meta[relay.Constant][65] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %746 = reshape(%743, newshape=[7, 4, 8]) /* ty=Tensor[(7, 4, 8), int64] */;
  %747 = reshape(%744, newshape=[7, 4, 8]) /* ty=Tensor[(7, 4, 8), int64] */;
  %748 = reshape(%745, newshape=[]) /* ty=uint32 */;
  %749 = @func_1485(%746, %747, %748) /* ty=(Tensor[(7, 4, 8), int64], Tensor[(16, 15, 5), uint32], uint32, Tensor[(16, 15, 5), float32], Tensor[(16, 15, 5), float32]) */;
  %750 = cast(meta[relay.Constant][65] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %751 = cast(%var_10642, dtype="bool") /* ty=Tensor[(84), bool] */;
  %752 = reshape(%750, newshape=[]) /* ty=uint32 */;
  %753 = reshape(%751, newshape=[3, 4, 7]) /* ty=Tensor[(3, 4, 7), bool] */;
  %754 = @func_9352(%752, %753) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(3, 4, 7), int16]) */;
  %755 = %739.0;
  %756 = @func_9013() /* ty=Tensor[(8, 16, 8), float32] */;
  %757 = %742.0;
  %758 = %749.4;
  %759 = %754.0;
  %760 = @func_9849() /* ty=Tensor[(315), float32] */;
  (%755, %756, %757, meta[relay.Constant][63] /* ty=Tensor[(264), float64] */, %758, meta[relay.Constant][64] /* ty=Tensor[(224), int64] */, meta[relay.Constant][65] /* ty=uint32 */, %759, %var_10642, %760)
}

def @func_16148(%var_16140: Tensor[(448), uint64]) -> (Tensor[(8, 16, 8), float32], Tensor[(7, 4, 16), bool], uint64, Tensor[(448), uint64]) {
  %761 = @func_10354() /* ty=(Tensor[(8, 16, 8), float32], Tensor[(7, 4, 16), bool], uint64, Tensor[(448), uint64], Tensor[(8, 16, 8), float64]) */;
  %762 = cast(meta[relay.Constant][66] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %763 = cast(%var_16140, dtype="uint64") /* ty=Tensor[(448), uint64] */;
  %764 = reshape(%762, newshape=[]) /* ty=uint64 */;
  %765 = reshape(%763, newshape=[7, 4, 16]) /* ty=Tensor[(7, 4, 16), uint64] */;
  %766 = %761.0;
  %767 = @func_2096(%764, %765) /* ty=Tensor[(7, 4, 16), bool] */;
  (%766, %767, meta[relay.Constant][66] /* ty=uint64 */, %var_16140)
}

def @func_12967() -> (Tensor[(8, 16, 8), float64],) {
  %768 = @func_9577() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %769 = %768.0;
  (%769,)
}

def @func_13136(%var_13120: Tensor[(1, 2250), float32]) -> (Tensor[(8, 16, 8), float64], Tensor[(3, 4, 9), bool], bool, Tensor[(108), bool], Tensor[(7, 13, 6), uint64], Tensor[(30), float64], Tensor[(1, 2250), float32], Tensor[(3, 4, 7), int16], Tensor[(84), bool]) {
  %770 = @func_9514() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64], Tensor[(392), uint64]) */;
  %771 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %772 = cast(meta[relay.Constant][67] /* ty=Tensor[(108), bool] */, dtype="bool") /* ty=Tensor[(108), bool] */;
  %773 = reshape(%771, newshape=[]) /* ty=bool */;
  %774 = reshape(%772, newshape=[3, 4, 9]) /* ty=Tensor[(3, 4, 9), bool] */;
  %775 = @func_8769(%773, %774) /* ty=(Tensor[(3, 4, 9), bool],) */;
  %776 = cast(meta[relay.Constant][68] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
  %777 = cast(%var_13120, dtype="float32") /* ty=Tensor[(1, 2250), float32] */;
  %778 = cast(meta[relay.Constant][68] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
  %779 = reshape(%776, newshape=[10, 3, 1]) /* ty=Tensor[(10, 3, 1), float64] */;
  %780 = reshape(%777, newshape=[225, 10]) /* ty=Tensor[(225, 10), float32] */;
  %781 = reshape(%778, newshape=[10, 3, 1]) /* ty=Tensor[(10, 3, 1), float64] */;
  %782 = @func_10255(%779, %780, %781) /* ty=(Tensor[(30, 9), float32], Tensor[(270), float32], Tensor[(225, 10), float32], Tensor[(7, 13, 6), uint64], Tensor[(546), bool], Tensor[(10, 3, 2310), int32], Tensor[(8, 16, 8), float64], Tensor[(392), uint64], Tensor[(10, 3, ?), bool], Tensor[(16, 15, 5), float32]) */;
  %783 = cast(True /* ty=bool */, dtype="uint32") /* ty=uint32 */;
  %784 = cast(meta[relay.Constant][69] /* ty=Tensor[(84), bool] */, dtype="bool") /* ty=Tensor[(84), bool] */;
  %785 = reshape(%783, newshape=[]) /* ty=uint32 */;
  %786 = reshape(%784, newshape=[3, 4, 7]) /* ty=Tensor[(3, 4, 7), bool] */;
  %787 = @func_9352(%785, %786) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(3, 4, 7), int16]) */;
  %788 = %770.0;
  %789 = %775.0;
  %790 = %782.3;
  %791 = %787.1;
  (%788, %789, True /* ty=bool */, meta[relay.Constant][67] /* ty=Tensor[(108), bool] */, %790, meta[relay.Constant][68] /* ty=Tensor[(30), float64] */, %var_13120, %791, meta[relay.Constant][69] /* ty=Tensor[(84), bool] */)
}

def @func_15931() -> (Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], Tensor[(8, 1), float64], Tensor[(8, 16, 8), float32]) {
  %792 = @func_11583() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32]) */;
  %793 = @func_12573() /* ty=(Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float64]) */;
  %794 = @func_9064() /* ty=Tensor[(8, 16, 8), float32] */;
  %795 = %792.1;
  %796 = @func_13258() /* ty=Tensor[(8, 16, 8), float32] */;
  %797 = @func_13006() /* ty=Tensor[(8, 16, 8), float32] */;
  %798 = @func_15306() /* ty=Tensor[(8, 1), float64] */;
  %799 = %793.0;
  (%794, %795, %796, %797, %798, %799)
}

def @func_14184() -> Tensor[(8, 16, 8), float64] {
  %800 = @func_11129() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(270), float32]) */;
  %800.0
}

def @func_17208(%var_17198: Tensor[(15, 150), float32]) -> (Tensor[(8, 16, 8), float32], Tensor[(2250), float32], Tensor[(15, 150), float32]) {
  %801 = cast(%var_17198, dtype="float32") /* ty=Tensor[(15, 150), float32] */;
  %802 = reshape(%801, newshape=[2250]) /* ty=Tensor[(2250), float32] */;
  %803 = @func_16546(%802) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(16, 15, 5), float32], Tensor[(10, 3), float64], Tensor[(2250), float32]) */;
  %804 = @func_15398() /* ty=Tensor[(8, 16, 8), float32] */;
  %805 = %803.3;
  (%804, %805, %var_17198)
}

def @func_12669(%var_12655: uint32) -> (Tensor[(8, 16, 8), float64], Tensor[(3, 4, 7), int16], uint32, Tensor[(8, 16, 8), float64]) {
  %806 = cast(%var_12655, dtype="uint32") /* ty=uint32 */;
  %807 = reshape(%806, newshape=[]) /* ty=uint32 */;
  %808 = @func_10116(%807) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(3, 4, 7), int16], uint32, Tensor[(84), bool]) */;
  %809 = @func_10596() /* ty=(Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float64]) */;
  %810 = @func_8825() /* ty=Tensor[(8, 16, 8), float64] */;
  %811 = %808.1;
  %812 = %809.1;
  (%810, %811, %var_12655, %812)
}

def @func_17251() -> (Tensor[(8, 16, 8), float64],) {
  %813 = @func_16189() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %814 = %813.0;
  (%814,)
}

def @func_18609(%var_18600: Tensor[(6, 13, 16), float64]) -> (Tensor[(6, 13, 16), float64], Tensor[(6, 13, 16), float64]) {
  %815 = cast(%var_18600, dtype="float64") /* ty=Tensor[(6, 13, 16), float64] */;
  %816 = cast(%var_18600, dtype="float64") /* ty=Tensor[(6, 13, 16), float64] */;
  %817 = rsqrt(%815) /* ty=Tensor[(6, 13, 16), float64] */;
  %818 = asinh(%816) /* ty=Tensor[(6, 13, 16), float64] */;
  (%817, %818)
}

def @func_7714() -> (Tensor[(8, 16, 8), float64],) {
  %819 = cast(meta[relay.Constant][70] /* ty=Tensor[(8, 16, 8), float64] */, dtype="float64") /* ty=Tensor[(8, 16, 8), float64] */;
  %820 = erf(%819) /* ty=Tensor[(8, 16, 8), float64] */;
  (%820,)
}

def @func_7629(%var_7548: Tensor[(4, 7, 14), uint64]) -> (Tensor[(4, 7, 14), bool], Tensor[(9, 7, 10), float64], Tensor[(630), float64], Tensor[(7, 13, 6), uint64], Tensor[(546), bool], Tensor[(4, 7, 14), uint16], Tensor[(4, 7, 14), float64]) {
  %821 = cast(%var_7548, dtype="bool") /* ty=Tensor[(4, 7, 14), bool] */;
  %822 = shape_of(meta[relay.Constant][71] /* ty=Tensor[(4, 7, 14), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %823 = cast(meta[relay.Constant][71] /* ty=Tensor[(4, 7, 14), uint64] */, dtype="bool") /* ty=Tensor[(4, 7, 14), bool] */;
  %824 = dyn.reshape(%821, %822, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %825 = cast(meta[relay.Constant][72] /* ty=Tensor[(630), float64] */, dtype="float64") /* ty=Tensor[(630), float64] */;
  %826 = reshape(%825, newshape=[9, 7, 10]) /* ty=Tensor[(9, 7, 10), float64] */;
  %827 = @func_3445(%826) /* ty=(Tensor[(9, 7, 10), float64],) */;
  %828 = cast(meta[relay.Constant][73] /* ty=Tensor[(546), bool] */, dtype="bool") /* ty=Tensor[(546), bool] */;
  %829 = cast(meta[relay.Constant][73] /* ty=Tensor[(546), bool] */, dtype="bool") /* ty=Tensor[(546), bool] */;
  %830 = reshape(%828, newshape=[7, 13, 6]) /* ty=Tensor[(7, 13, 6), bool] */;
  %831 = reshape(%829, newshape=[7, 13, 6]) /* ty=Tensor[(7, 13, 6), bool] */;
  %832 = @func_4270(%830, %831) /* ty=(Tensor[(7, 13, 6), uint64],) */;
  %833 = cast(%var_7548, dtype="float64") /* ty=Tensor[(4, 7, 14), float64] */;
  %834 = erf(%833) /* ty=Tensor[(4, 7, 14), float64] */;
  %835 = cast(meta[relay.Constant][71] /* ty=Tensor[(4, 7, 14), uint64] */, dtype="uint16") /* ty=Tensor[(4, 7, 14), uint16] */;
  %836 = shape_of(%834, dtype="int32") /* ty=Tensor[(3), int32] */;
  %837 = cast(%834, dtype="uint16") /* ty=Tensor[(4, 7, 14), uint16] */;
  %838 = dyn.reshape(%835, %836, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %839 = cast(%834, dtype="float64") /* ty=Tensor[(4, 7, 14), float64] */;
  %840 = not_equal(%823, %824) /* ty=Tensor[(4, 7, 14), bool] */;
  %841 = %827.0;
  %842 = %832.0;
  %843 = bitwise_or(%837, %838) /* ty=Tensor[(4, 7, 14), uint16] */;
  %844 = tan(%839) /* ty=Tensor[(4, 7, 14), float64] */;
  (%840, %841, meta[relay.Constant][72] /* ty=Tensor[(630), float64] */, %842, meta[relay.Constant][73] /* ty=Tensor[(546), bool] */, %843, %844)
}

def @func_11818() -> (Tensor[(8, 16, 8), float32],) {
  %845 = @func_11744() /* ty=(Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], Tensor[(7, 3, 15), float32]) */;
  %846 = %845.1;
  (%846,)
}

def @func_13543(%var_13493: Tensor[(12, 4, 7), int32], %var_13494: Tensor[(12, 4, 7), int32]) -> (Tensor[(12, 4, 7), int32], Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float64]) {
  %847 = cast(%var_13494, dtype="int32") /* ty=Tensor[(12, 4, 7), int32] */;
  %848 = shape_of(%var_13493, dtype="int32") /* ty=Tensor[(3), int32] */;
  %849 = cast(%var_13493, dtype="int32") /* ty=Tensor[(12, 4, 7), int32] */;
  %850 = dyn.reshape(%847, %848, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %851 = @func_13022() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64]) */;
  %852 = left_shift(%849, %850) /* ty=Tensor[(12, 4, 7), int32] */;
  %853 = @func_13006() /* ty=Tensor[(8, 16, 8), float32] */;
  %854 = %851.1;
  (%852, %853, %854)
}

def @func_16055(%var_15968: Tensor[(1350), float32], %var_15969: Tensor[(392), uint64], %var_16004: Tensor[(11), uint16]) -> (Tensor[(315), float32], Tensor[(8, 16, 8), float64], Tensor[(1350), float32], Tensor[(392), uint64], Tensor[(1, 1, 11), float32], Tensor[(11), uint16], Tensor[(2940), int16], Tensor[(8, 16, 8), float64]) {
  %855 = cast(%var_15968, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %856 = cast(%var_15969, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %857 = reshape(%855, newshape=[1350]) /* ty=Tensor[(1350), float32] */;
  %858 = reshape(%856, newshape=[392]) /* ty=Tensor[(392), uint64] */;
  %859 = @func_8742(%857, %858) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(1350), float32], Tensor[(8, 16, 8), float64], Tensor[(392), uint64]) */;
  %860 = cast(%var_16004, dtype="uint16") /* ty=Tensor[(11), uint16] */;
  %861 = reshape(%860, newshape=[1, 1, 11]) /* ty=Tensor[(1, 1, 11), uint16] */;
  %862 = @func_5723(%861) /* ty=(Tensor[(6, 1, 12), uint8], Tensor[(1, 1, 11), float32]) */;
  %863 = @func_14539() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(2940), int16]) */;
  %864 = @func_9849() /* ty=Tensor[(315), float32] */;
  %865 = %859.2;
  %866 = %862.1;
  %867 = %863.1;
  %868 = @func_15457() /* ty=Tensor[(8, 16, 8), float64] */;
  (%864, %865, %var_15968, %var_15969, %866, %var_16004, %867, %868)
}

def @func_19029() -> (Tensor[(8, 16, 8), float64], Tensor[(315), float32], Tensor[(8, 16, 8), float32], bool) {
  %869 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %870 = reshape(%869, newshape=[]) /* ty=bool */;
  %871 = @func_18969(%870) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], bool, Tensor[(8, 16, 8), float32], Tensor[(108), bool]) */;
  %872 = @func_13746() /* ty=Tensor[(8, 16, 8), float64] */;
  %873 = @func_9849() /* ty=Tensor[(315), float32] */;
  %874 = %871.0;
  (%872, %873, %874, False /* ty=bool */)
}

def @func_7314(%var_7309: Tensor[(3, 1, 1), float32], %var_7310: Tensor[(3, 6, 7), float32]) -> Tensor[(3, 6, 7), float32] {
  %875 = cast(%var_7309, dtype="float32") /* ty=Tensor[(3, 1, 1), float32] */;
  %876 = cast(%var_7310, dtype="float32") /* ty=Tensor[(3, 6, 7), float32] */;
  divide(%875, %876) /* ty=Tensor[(3, 6, 7), float32] */
}

def @func_16897() -> (Tensor[(8, 16, 8), float32], uint64, Tensor[(2940), float64]) {
  %877 = @func_9203() /* ty=(Tensor[(8, 16, 8), float32],) */;
  %878 = @func_12565() /* ty=(Tensor[(315), float32], Tensor[(8, 16, 8), uint32], uint64) */;
  %879 = @func_14539() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(2940), int16]) */;
  %880 = %879.1;
  %881 = cast(%880, dtype="float64") /* ty=Tensor[(2940), float64] */;
  %882 = %877.0;
  %883 = %878.2;
  %884 = sqrt(%881) /* ty=Tensor[(2940), float64] */;
  (%882, %883, %884)
}

def @func_15524() -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64]) {
  %885 = @func_9514() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64], Tensor[(392), uint64]) */;
  %886 = @func_14996() /* ty=(Tensor[(270), float32], Tensor[(8, 16, 8), float64], Tensor[(6, 1, 12), int32], int32) */;
  %887 = %885.0;
  %888 = %886.1;
  (%887, %888)
}

def @func_10030() -> (Tensor[(8, 16, 8), float64],) {
  %889 = @func_9830() /* ty=Tensor[(8, 16, 8), float64] */;
  (%889,)
}

def @func_7915() -> Tensor[(8, 16, 8), float64] {
  %890 = @func_7714() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %890.0
}

def @func_10596() -> (Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float64]) {
  %891 = @func_9380() /* ty=Tensor[(8, 16, 8), float32] */;
  %892 = @func_10300() /* ty=Tensor[(8, 16, 8), float64] */;
  (%891, %892)
}

def @func_9013() -> Tensor[(8, 16, 8), float32] {
  @func_8028() /* ty=Tensor[(8, 16, 8), float32] */
}

def @main(%var_19078: Tensor[(495), float32], %var_19088: Tensor[(126), float32], %var_19217: Tensor[(2940), float64]) -> (Tensor[(8, 16, 8), float64], Tensor[(15, 3, 11), float32], Tensor[(495), float32], Tensor[(1, 3), float32], Tensor[(126), float32], Tensor[(14, 15, 14), float32], Tensor[(14, 15, 14), float64], Tensor[(315), float32], Tensor[(3, 6, 7), float64], Tensor[(8, 1), float64], Tensor[(9, 5, 13), float64], Tensor[(585), float64], Tensor[(8, 16, 8), float32], Tensor[(2940), float64]) {
  %893 = @func_16189() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %894 = cast(%var_19078, dtype="float32") /* ty=Tensor[(495), float32] */;
  %895 = reshape(%894, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), float32] */;
  %896 = cast(meta[relay.Constant][75] /* ty=Tensor[(2940), float64] */, dtype="float64") /* ty=Tensor[(2940), float64] */;
  %897 = reshape(%896, newshape=[14, 15, 14]) /* ty=Tensor[(14, 15, 14), float64] */;
  %898 = @func_17718(%897) /* ty=(Tensor[(14, 15, 14), float32],) */;
  %899 = @func_16301() /* ty=(Tensor[(8, 16, 8), float32], Tensor[(14, 15, 14), float64]) */;
  %900 = @func_13204() /* ty=(Tensor[(14, 15, 14), float64], Tensor[(7, 3, 15), float32], Tensor[(315), float32], Tensor[(8, 16, 8), float32]) */;
  %901 = cast(meta[relay.Constant][74] /* ty=Tensor[(1, 3), float32] */, dtype="float32") /* ty=Tensor[(1, 3), float32] */;
  %902 = cast(%var_19088, dtype="float32") /* ty=Tensor[(126), float32] */;
  %903 = reshape(%901, newshape=[3, 1, 1]) /* ty=Tensor[(3, 1, 1), float32] */;
  %904 = reshape(%902, newshape=[3, 6, 7]) /* ty=Tensor[(3, 6, 7), float32] */;
  %905 = @func_7314(%903, %904) /* ty=Tensor[(3, 6, 7), float32] */;
  %906 = cast(%905, dtype="float64") /* ty=Tensor[(3, 6, 7), float64] */;
  %907 = cast(meta[relay.Constant][76] /* ty=Tensor[(585), float64] */, dtype="float64") /* ty=Tensor[(585), float64] */;
  %908 = reshape(%907, newshape=[9, 5, 13]) /* ty=Tensor[(9, 5, 13), float64] */;
  %909 = cast(%var_19217, dtype="float64") /* ty=Tensor[(2940), float64] */;
  %910 = shape_of(meta[relay.Constant][75] /* ty=Tensor[(2940), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %911 = cast(meta[relay.Constant][75] /* ty=Tensor[(2940), float64] */, dtype="float64") /* ty=Tensor[(2940), float64] */;
  %912 = dyn.reshape(%909, %910, newshape=[]) /* ty=Tensor[(?), float64] */;
  %913 = %893.0;
  %914 = @func_11501(%895) /* ty=Tensor[(15, 3, 11), float32] */;
  %915 = %898.0;
  %916 = %899.1;
  %917 = %900.2;
  %918 = log10(%906) /* ty=Tensor[(3, 6, 7), float64] */;
  %919 = @func_15306() /* ty=Tensor[(8, 1), float64] */;
  %920 = @func_7412(%908) /* ty=Tensor[(9, 5, 13), float64] */;
  %921 = @func_14326() /* ty=Tensor[(8, 16, 8), float32] */;
  %922 = mod(%911, %912) /* ty=Tensor[(2940), float64] */;
  (%913, %914, %var_19078, meta[relay.Constant][74] /* ty=Tensor[(1, 3), float32] */, %var_19088, %915, %916, %917, %918, %919, %920, meta[relay.Constant][76] /* ty=Tensor[(585), float64] */, %921, %922)
}

def @func_3445(%var_3437: Tensor[(9, 7, 10), float64]) -> (Tensor[(9, 7, 10), float64],) {
  %923 = cast(%var_3437, dtype="float64") /* ty=Tensor[(9, 7, 10), float64] */;
  %924 = acos(%923) /* ty=Tensor[(9, 7, 10), float64] */;
  (%924,)
}

def @func_15635() -> (Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32]) {
  %925 = @func_7874() /* ty=(Tensor[(8, 16, 8), float32],) */;
  %926 = @func_14427() /* ty=(Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], Tensor[(350), int64], Tensor[(224), int64]) */;
  %927 = %925.0;
  %928 = %926.0;
  (%927, %928)
}

def @func_8347(%var_8337: Tensor[(8, 11, 3), float64]) -> (Tensor[(8, 11, 3), float64],) {
  %929 = cast(%var_8337, dtype="float64") /* ty=Tensor[(8, 11, 3), float64] */;
  %930 = acosh(%929) /* ty=Tensor[(8, 11, 3), float64] */;
  (%930,)
}

def @func_16330() -> (Tensor[(7, 3, 15), float32], Tensor[(8, 16, 8), float64]) {
  %931 = @func_9744() /* ty=(Tensor[(8, 16, 8), float32], Tensor[(315), float32], Tensor[(7, 3, 15), float32], Tensor[(8, 16, 8), int64]) */;
  %932 = @func_14539() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(2940), int16]) */;
  %933 = %931.2;
  %934 = %932.0;
  (%933, %934)
}

def @func_15306() -> Tensor[(8, 1), float64] {
  %935 = @func_13553() /* ty=(Tensor[(8, 1), float64],) */;
  %935.0
}

def @func_16805() -> Tensor[(8, 16, 8), float64] {
  %936 = @func_8889() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), int64], Tensor[(7, 3, 15), float32], Tensor[(315), float32]) */;
  %936.0
}

def @func_10300() -> Tensor[(8, 16, 8), float64] {
  @func_9830() /* ty=Tensor[(8, 16, 8), float64] */
}

def @func_9399() -> Tensor[(8, 16, 8), float64] {
  %937 = @func_8606() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %937.0
}

def @func_15398() -> Tensor[(8, 16, 8), float32] {
  %938 = @func_7874() /* ty=(Tensor[(8, 16, 8), float32],) */;
  %938.0
}

def @func_7280(%var_7273: Tensor[(7, 7, 10), float64]) -> (Tensor[(7, 7, 10), float64],) {
  %939 = cast(%var_7273, dtype="float64") /* ty=Tensor[(7, 7, 10), float64] */;
  %940 = atan(%939) /* ty=Tensor[(7, 7, 10), float64] */;
  (%940,)
}

def @func_14262() -> (Tensor[(14, 15, 14), float64], Tensor[(8, 16, 8), float64]) {
  %941 = @func_13270() /* ty=(Tensor[(14, 15, 14), float64],) */;
  %942 = %941.0;
  %943 = @func_12354() /* ty=Tensor[(8, 16, 8), float64] */;
  (%942, %943)
}

def @func_15155(%var_15120: Tensor[(8), float64], %var_15122: Tensor[(448), uint64], %var_15133: Tensor[(180), int8]) -> (Tensor[(315), float32], Tensor[(8, 16, 8), float64], uint64, Tensor[(8), float64], uint64, Tensor[(448), uint64], Tensor[(2, 9, 10), int8], Tensor[(180), int8], Tensor[(8, 16, 8), float64]) {
  %944 = @func_8889() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), int64], Tensor[(7, 3, 15), float32], Tensor[(315), float32]) */;
  %945 = @func_11520() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %946 = cast(%var_15120, dtype="float64") /* ty=Tensor[(8), float64] */;
  %947 = cast(meta[relay.Constant][77] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %948 = cast(%var_15122, dtype="uint64") /* ty=Tensor[(448), uint64] */;
  %949 = reshape(%946, newshape=[2, 1, 4]) /* ty=Tensor[(2, 1, 4), float64] */;
  %950 = reshape(%947, newshape=[]) /* ty=uint64 */;
  %951 = reshape(%948, newshape=[448]) /* ty=Tensor[(448), uint64] */;
  %952 = @func_4427(%949, %950, %951) /* ty=(Tensor[(2, 1, 4), float64], Tensor[(7, 4, 16), bool], uint64, Tensor[(448), uint64]) */;
  %953 = cast(%var_15133, dtype="int8") /* ty=Tensor[(180), int8] */;
  %954 = reshape(%953, newshape=[180]) /* ty=Tensor[(180), int8] */;
  %955 = @func_8011(%954) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(2, 9, 10), int8], Tensor[(180), int8]) */;
  %956 = %944.3;
  %957 = %945.0;
  %958 = %952.2;
  %959 = %955.1;
  %960 = @func_7783() /* ty=Tensor[(8, 16, 8), float64] */;
  (%956, %957, %958, %var_15120, meta[relay.Constant][77] /* ty=uint64 */, %var_15122, %959, %var_15133, %960)
}

def @func_17753() -> (Tensor[(8, 16, 8), float32],) {
  %961 = @func_16942() /* ty=(Tensor[(8, 16, 8), float32],) */;
  %962 = %961.0;
  (%962,)
}

def @func_8742(%var_8717: Tensor[(1350), float32], %var_8740: Tensor[(392), uint64]) -> (Tensor[(8, 16, 8), float64], Tensor[(1350), float32], Tensor[(8, 16, 8), float64], Tensor[(392), uint64]) {
  %963 = cast(%var_8717, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %964 = reshape(%963, newshape=[10, 9, 15]) /* ty=Tensor[(10, 9, 15), float32] */;
  %965 = @func_7200(%964) /* ty=Tensor[(10, 9, 15), float32] */;
  %966 = cast(%965, dtype="float32") /* ty=Tensor[(10, 9, 15), float32] */;
  %967 = shape_of(%var_8717, dtype="int32") /* ty=Tensor[(1), int32] */;
  %968 = cast(%var_8717, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %969 = dyn.reshape(%966, %967, newshape=[]) /* ty=Tensor[(?), float32] */;
  %970 = cast(%var_8740, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %971 = reshape(%970, newshape=[14, 28]) /* ty=Tensor[(14, 28), uint64] */;
  %972 = @func_8232(%971) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(4, 7, 14), float64], Tensor[(14, 28), uint64]) */;
  %973 = @func_7915() /* ty=Tensor[(8, 16, 8), float64] */;
  %974 = power(%968, %969) /* ty=Tensor[(1350), float32] */;
  %975 = %972.1;
  (%973, %974, %975, %var_8740)
}

def @func_16823() -> (Tensor[(8, 16, 8), float64], Tensor[(7, 4, 16), bool], Tensor[(448), uint64]) {
  %976 = @func_9577() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %977 = cast(meta[relay.Constant][78] /* ty=Tensor[(448), uint64] */, dtype="uint64") /* ty=Tensor[(448), uint64] */;
  %978 = reshape(%977, newshape=[56, 8]) /* ty=Tensor[(56, 8), uint64] */;
  %979 = @func_7896(%978) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(7, 4, 16), bool], uint64, Tensor[(56, 8), uint64]) */;
  %980 = %976.0;
  %981 = %979.1;
  (%980, %981, meta[relay.Constant][78] /* ty=Tensor[(448), uint64] */)
}

def @func_10116(%var_10104: uint32) -> (Tensor[(8, 16, 8), float32], Tensor[(3, 4, 7), int16], uint32, Tensor[(84), bool]) {
  %982 = @func_9577() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %983 = %982.0;
  %984 = cast(meta[relay.Constant][79] /* ty=Tensor[(8, 16, 8), float64] */, dtype="float32") /* ty=Tensor[(8, 16, 8), float32] */;
  %985 = shape_of(%983, dtype="int32") /* ty=Tensor[(3), int32] */;
  %986 = cast(%983, dtype="float32") /* ty=Tensor[(8, 16, 8), float32] */;
  %987 = dyn.reshape(%984, %985, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %988 = cast(%var_10104, dtype="uint32") /* ty=uint32 */;
  %989 = cast(meta[relay.Constant][80] /* ty=Tensor[(84), bool] */, dtype="bool") /* ty=Tensor[(84), bool] */;
  %990 = reshape(%988, newshape=[]) /* ty=uint32 */;
  %991 = reshape(%989, newshape=[3, 4, 7]) /* ty=Tensor[(3, 4, 7), bool] */;
  %992 = @func_9352(%990, %991) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(3, 4, 7), int16]) */;
  %993 = floor_mod(%986, %987) /* ty=Tensor[(8, 16, 8), float32] */;
  %994 = %992.1;
  (%993, %994, %var_10104, meta[relay.Constant][80] /* ty=Tensor[(84), bool] */)
}

def @func_9577() -> (Tensor[(8, 16, 8), float64],) {
  %995 = @func_7783() /* ty=Tensor[(8, 16, 8), float64] */;
  (%995,)
}

def @func_13733(%var_13697: Tensor[(416), int8], %var_13699: Tensor[(630), float64], %var_13700: Tensor[(3780), bool]) -> (Tensor[(8, 16, 8), float64], Tensor[(3, 4, 9), bool], Tensor[(2250), float32], uint64, Tensor[(448), uint64], Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(9, 5, 6), uint32], Tensor[(416), int8], Tensor[(6, 45), float64], Tensor[(630), float64], Tensor[(3780), bool], Tensor[(7, 13, 6), uint64], Tensor[(1350), float32]) {
  %996 = @func_10876() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %997 = cast(meta[relay.Constant][81] /* ty=Tensor[(2250), float32] */, dtype="float32") /* ty=Tensor[(2250), float32] */;
  %998 = reshape(%997, newshape=[1, 2250]) /* ty=Tensor[(1, 2250), float32] */;
  %999 = @func_13136(%998) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(3, 4, 9), bool], bool, Tensor[(108), bool], Tensor[(7, 13, 6), uint64], Tensor[(30), float64], Tensor[(1, 2250), float32], Tensor[(3, 4, 7), int16], Tensor[(84), bool]) */;
  %1000 = cast(meta[relay.Constant][82] /* ty=Tensor[(448), uint64] */, dtype="uint64") /* ty=Tensor[(448), uint64] */;
  %1001 = reshape(%1000, newshape=[56, 8]) /* ty=Tensor[(56, 8), uint64] */;
  %1002 = @func_7896(%1001) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(7, 4, 16), bool], uint64, Tensor[(56, 8), uint64]) */;
  %1003 = @func_12967() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %1004 = cast(%var_13697, dtype="int8") /* ty=Tensor[(416), int8] */;
  %1005 = cast(meta[relay.Constant][83] /* ty=Tensor[(6, 45), float64] */, dtype="float64") /* ty=Tensor[(6, 45), float64] */;
  %1006 = cast(%var_13699, dtype="float64") /* ty=Tensor[(630), float64] */;
  %1007 = cast(%var_13700, dtype="bool") /* ty=Tensor[(3780), bool] */;
  %1008 = reshape(%1004, newshape=[416]) /* ty=Tensor[(416), int8] */;
  %1009 = reshape(%1005, newshape=[9, 5, 6]) /* ty=Tensor[(9, 5, 6), float64] */;
  %1010 = reshape(%1006, newshape=[630]) /* ty=Tensor[(630), float64] */;
  %1011 = reshape(%1007, newshape=[270, 14]) /* ty=Tensor[(270, 14), bool] */;
  %1012 = @func_13426(%1008, %1009, %1010, %1011) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(7, 13, 6), uint64], Tensor[(270, 416), bool], Tensor[(8, 16, 8), float64], Tensor[(9, 5, 6), uint32], Tensor[(270, ?), float64], Tensor[(8, 16, 8), float32], Tensor[(9, 7, 10), float64], Tensor[(630), float64], Tensor[(270, 14), uint16]) */;
  %1013 = cast(meta[relay.Constant][84] /* ty=Tensor[(3780), bool] */, dtype="bool") /* ty=Tensor[(3780), bool] */;
  %1014 = shape_of(%var_13700, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1015 = cast(%var_13700, dtype="bool") /* ty=Tensor[(3780), bool] */;
  %1016 = dyn.reshape(%1013, %1014, newshape=[]) /* ty=Tensor[(?), bool] */;
  %1017 = cast(meta[relay.Constant][85] /* ty=Tensor[(1350), float32] */, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %1018 = reshape(%1017, newshape=[9, 150]) /* ty=Tensor[(9, 150), float32] */;
  %1019 = @func_10940(%1018) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(7, 13, 6), uint64], Tensor[(546), bool], Tensor[(8, 16, 8), float64], Tensor[(9, 150), float32], Tensor[(392), uint64]) */;
  %1020 = %996.0;
  %1021 = %999.1;
  %1022 = %1002.2;
  %1023 = %1003.0;
  %1024 = @func_9795() /* ty=Tensor[(8, 16, 8), float64] */;
  %1025 = @func_9447() /* ty=Tensor[(8, 16, 8), float64] */;
  %1026 = %1012.5;
  %1027 = greater(%1015, %1016) /* ty=Tensor[(3780), bool] */;
  %1028 = %1019.1;
  (%1020, %1021, meta[relay.Constant][81] /* ty=Tensor[(2250), float32] */, %1022, meta[relay.Constant][82] /* ty=Tensor[(448), uint64] */, %1023, %1024, %1025, %1026, %var_13697, meta[relay.Constant][83] /* ty=Tensor[(6, 45), float64] */, %var_13699, %1027, %1028, meta[relay.Constant][85] /* ty=Tensor[(1350), float32] */)
}

def @func_7783() -> Tensor[(8, 16, 8), float64] {
  %1029 = @func_7714() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %1029.0
}

def @func_18149() -> Tensor[(14, 15, 14), float64] {
  %1030 = @func_16723() /* ty=(Tensor[(14, 15, 14), float64], Tensor[(3, 4, 7), int16], uint32, Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32]) */;
  %1030.0
}

def @func_13975() -> (Tensor[(8, 16, 8), float64], Tensor[(65, 9), float64], Tensor[(585), float64], Tensor[(8, 16, 8), float32], Tensor[(1350), float32], Tensor[(8, 16, 8), float32], Tensor[(7, 7, 10), float64], Tensor[(490), float64]) {
  %1031 = cast(meta[relay.Constant][86] /* ty=Tensor[(585), float64] */, dtype="float64") /* ty=Tensor[(585), float64] */;
  %1032 = reshape(%1031, newshape=[65, 9]) /* ty=Tensor[(65, 9), float64] */;
  %1033 = @func_11268(%1032) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(9, 5, 13), float64], Tensor[(65, 9), float64]) */;
  %1034 = cast(meta[relay.Constant][87] /* ty=Tensor[(1350), float32] */, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %1035 = reshape(%1034, newshape=[1350]) /* ty=Tensor[(1350), float32] */;
  %1036 = @func_13793(%1035) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], Tensor[(9, 150), float32], Tensor[(1350), float32], Tensor[(8, 16, 8), float64]) */;
  %1037 = cast(meta[relay.Constant][88] /* ty=Tensor[(490), float64] */, dtype="float64") /* ty=Tensor[(490), float64] */;
  %1038 = reshape(%1037, newshape=[7, 7, 10]) /* ty=Tensor[(7, 7, 10), float64] */;
  %1039 = @func_7280(%1038) /* ty=(Tensor[(7, 7, 10), float64],) */;
  %1040 = @func_9795() /* ty=Tensor[(8, 16, 8), float64] */;
  %1041 = %1033.2;
  %1042 = %1036.1;
  %1043 = @func_9254() /* ty=Tensor[(8, 16, 8), float32] */;
  %1044 = %1039.0;
  (%1040, %1041, meta[relay.Constant][86] /* ty=Tensor[(585), float64] */, %1042, meta[relay.Constant][87] /* ty=Tensor[(1350), float32] */, %1043, %1044, meta[relay.Constant][88] /* ty=Tensor[(490), float64] */)
}

def @func_11129() -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(270), float32]) {
  %1045 = cast(meta[relay.Constant][89] /* ty=Tensor[(270), float32] */, dtype="float32") /* ty=Tensor[(270), float32] */;
  %1046 = reshape(%1045, newshape=[270]) /* ty=Tensor[(270), float32] */;
  %1047 = @func_8548(%1046) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(4, 7, 14), float64], Tensor[(392), uint64], Tensor[(9, 5, 6), float64], Tensor[(270), float32]) */;
  %1048 = @func_7915() /* ty=Tensor[(8, 16, 8), float64] */;
  %1049 = %1047.0;
  (%1048, %1049, meta[relay.Constant][89] /* ty=Tensor[(270), float32] */)
}

def @func_15798() -> (Tensor[(8, 16, 8), float64],) {
  %1050 = @func_9830() /* ty=Tensor[(8, 16, 8), float64] */;
  (%1050,)
}

def @func_8028() -> Tensor[(8, 16, 8), float32] {
  %1051 = @func_7874() /* ty=(Tensor[(8, 16, 8), float32],) */;
  %1051.0
}

def @func_12378() -> (Tensor[(14, 15, 14), float64],) {
  %1052 = @func_9514() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64], Tensor[(392), uint64]) */;
  %1053 = %1052.1;
  (%1053,)
}

def @func_13270() -> (Tensor[(14, 15, 14), float64],) {
  %1054 = @func_9514() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64], Tensor[(392), uint64]) */;
  %1055 = %1054.1;
  (%1055,)
}

def @func_13746() -> Tensor[(8, 16, 8), float64] {
  %1056 = @func_11440() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %1056.0
}

def @func_1485(%var_1443: Tensor[(7, 4, 8), int64], %var_1444: Tensor[(7, 4, 8), int64], %var_1460: uint32) -> (Tensor[(7, 4, 8), int64], Tensor[(16, 15, 5), uint32], uint32, Tensor[(16, 15, 5), float32], Tensor[(16, 15, 5), float32]) {
  %1057 = cast(%var_1444, dtype="int64") /* ty=Tensor[(7, 4, 8), int64] */;
  %1058 = shape_of(%var_1443, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1059 = cast(%var_1443, dtype="int64") /* ty=Tensor[(7, 4, 8), int64] */;
  %1060 = dyn.reshape(%1057, %1058, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %1061 = cast(%var_1460, dtype="uint32") /* ty=uint32 */;
  %1062 = reshape(%1061, newshape=[]) /* ty=uint32 */;
  %1063 = @func_551(%1062) /* ty=(Tensor[(16, 15, 5), uint32], Tensor[(16, 15, 5), float32], Tensor[(16, 15, 5), float32]) */;
  %1064 = cast(%var_1460, dtype="uint32") /* ty=uint32 */;
  %1065 = reshape(%1064, newshape=[]) /* ty=uint32 */;
  %1066 = @func_551(%1065) /* ty=(Tensor[(16, 15, 5), uint32], Tensor[(16, 15, 5), float32], Tensor[(16, 15, 5), float32]) */;
  %1067 = cast(%var_1460, dtype="uint32") /* ty=uint32 */;
  %1068 = reshape(%1067, newshape=[]) /* ty=uint32 */;
  %1069 = @func_551(%1068) /* ty=(Tensor[(16, 15, 5), uint32], Tensor[(16, 15, 5), float32], Tensor[(16, 15, 5), float32]) */;
  %1070 = right_shift(%1059, %1060) /* ty=Tensor[(7, 4, 8), int64] */;
  %1071 = %1063.0;
  %1072 = %1066.1;
  %1073 = %1069.1;
  (%1070, %1071, %var_1460, %1072, %1073)
}

def @func_7412(%var_7406: Tensor[(9, 5, 13), float64]) -> Tensor[(9, 5, 13), float64] {
  %1074 = cast(%var_7406, dtype="float64") /* ty=Tensor[(9, 5, 13), float64] */;
  tan(%1074) /* ty=Tensor[(9, 5, 13), float64] */
}

def @func_8634(%var_8627: Tensor[(392), uint64]) -> (Tensor[(14, 15, 14), float64], Tensor[(7, 4, 16), bool], uint64, Tensor[(448), uint64], Tensor[(8, 16, 8), float64], Tensor[(392), uint64], Tensor[(14, 15, 14), float64]) {
  %1075 = @func_8501() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64], Tensor[(2940), float64]) */;
  %1076 = cast(meta[relay.Constant][90] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %1077 = cast(meta[relay.Constant][91] /* ty=Tensor[(448), uint64] */, dtype="uint64") /* ty=Tensor[(448), uint64] */;
  %1078 = reshape(%1076, newshape=[]) /* ty=uint64 */;
  %1079 = reshape(%1077, newshape=[7, 4, 16]) /* ty=Tensor[(7, 4, 16), uint64] */;
  %1080 = cast(%var_8627, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %1081 = reshape(%1080, newshape=[14, 28]) /* ty=Tensor[(14, 28), uint64] */;
  %1082 = @func_8232(%1081) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(4, 7, 14), float64], Tensor[(14, 28), uint64]) */;
  %1083 = @func_8501() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64], Tensor[(2940), float64]) */;
  %1084 = %1075.1;
  %1085 = @func_2096(%1078, %1079) /* ty=Tensor[(7, 4, 16), bool] */;
  %1086 = %1082.1;
  %1087 = %1083.1;
  (%1084, %1085, meta[relay.Constant][90] /* ty=uint64 */, meta[relay.Constant][91] /* ty=Tensor[(448), uint64] */, %1086, %var_8627, %1087)
}

def @func_12787(%var_12771: Tensor[(4, 16, 8), float64]) -> Tensor[(4, 16, 8), float64] {
  %1088 = cast(%var_12771, dtype="float64") /* ty=Tensor[(4, 16, 8), float64] */;
  log2(%1088) /* ty=Tensor[(4, 16, 8), float64] */
}

def @func_11330() -> (Tensor[(8, 16, 8), float64], Tensor[(3, 4, 7), int16], uint32, Tensor[(84), bool], uint64, Tensor[(8), float64], Tensor[(448), uint64]) {
  %1089 = @func_8606() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %1090 = cast(meta[relay.Constant][92] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %1091 = cast(meta[relay.Constant][93] /* ty=Tensor[(84), bool] */, dtype="bool") /* ty=Tensor[(84), bool] */;
  %1092 = reshape(%1090, newshape=[]) /* ty=uint32 */;
  %1093 = reshape(%1091, newshape=[3, 4, 7]) /* ty=Tensor[(3, 4, 7), bool] */;
  %1094 = @func_9352(%1092, %1093) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(3, 4, 7), int16]) */;
  %1095 = cast(meta[relay.Constant][94] /* ty=Tensor[(8), float64] */, dtype="float64") /* ty=Tensor[(8), float64] */;
  %1096 = cast(meta[relay.Constant][92] /* ty=uint32 */, dtype="uint64") /* ty=uint64 */;
  %1097 = cast(meta[relay.Constant][95] /* ty=Tensor[(448), uint64] */, dtype="uint64") /* ty=Tensor[(448), uint64] */;
  %1098 = reshape(%1095, newshape=[2, 1, 4]) /* ty=Tensor[(2, 1, 4), float64] */;
  %1099 = reshape(%1096, newshape=[]) /* ty=uint64 */;
  %1100 = reshape(%1097, newshape=[448]) /* ty=Tensor[(448), uint64] */;
  %1101 = @func_4427(%1098, %1099, %1100) /* ty=(Tensor[(2, 1, 4), float64], Tensor[(7, 4, 16), bool], uint64, Tensor[(448), uint64]) */;
  %1102 = %1089.0;
  %1103 = %1094.1;
  %1104 = %1101.2;
  (%1102, %1103, meta[relay.Constant][92] /* ty=uint32 */, meta[relay.Constant][93] /* ty=Tensor[(84), bool] */, %1104, meta[relay.Constant][94] /* ty=Tensor[(8), float64] */, meta[relay.Constant][95] /* ty=Tensor[(448), uint64] */)
}

def @func_9849() -> Tensor[(315), float32] {
  %1105 = @func_8889() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), int64], Tensor[(7, 3, 15), float32], Tensor[(315), float32]) */;
  %1105.3
}

def @func_7828(%var_7825: Tensor[(3), float32]) -> (Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64], Tensor[(2940, 1), float64], Tensor[(3, 6, 7), float32], Tensor[(3), float32], Tensor[(126), float32]) {
  %1106 = @func_7714() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %1107 = cast(meta[relay.Constant][96] /* ty=Tensor[(2940, 1), float64] */, dtype="float64") /* ty=Tensor[(2940, 1), float64] */;
  %1108 = reshape(%1107, newshape=[2940]) /* ty=Tensor[(2940), float64] */;
  %1109 = @func_6512(%1108) /* ty=(Tensor[(3, 4, 13), int32], Tensor[(14, 15, 14), float64], Tensor[(2940), float64], Tensor[(14, 15, 14), float64]) */;
  %1110 = cast(%var_7825, dtype="float32") /* ty=Tensor[(3), float32] */;
  %1111 = cast(meta[relay.Constant][97] /* ty=Tensor[(126), float32] */, dtype="float32") /* ty=Tensor[(126), float32] */;
  %1112 = reshape(%1110, newshape=[3, 1, 1]) /* ty=Tensor[(3, 1, 1), float32] */;
  %1113 = reshape(%1111, newshape=[3, 6, 7]) /* ty=Tensor[(3, 6, 7), float32] */;
  %1114 = %1106.0;
  %1115 = %1109.1;
  %1116 = @func_7314(%1112, %1113) /* ty=Tensor[(3, 6, 7), float32] */;
  (%1114, %1115, meta[relay.Constant][96] /* ty=Tensor[(2940, 1), float64] */, %1116, %var_7825, meta[relay.Constant][97] /* ty=Tensor[(126), float32] */)
}

def @func_12096() -> (Tensor[(448), uint64], Tensor[(8, 16, 8), float64], uint64, Tensor[(8, 1), float64], uint64, Tensor[(8, 16, 8), float64]) {
  %1117 = @func_11330() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(3, 4, 7), int16], uint32, Tensor[(84), bool], uint64, Tensor[(8), float64], Tensor[(448), uint64]) */;
  %1118 = cast(meta[relay.Constant][98] /* ty=Tensor[(8, 1), float64] */, dtype="float64") /* ty=Tensor[(8, 1), float64] */;
  %1119 = cast(meta[relay.Constant][99] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %1120 = %1117.6;
  %1121 = cast(%1120, dtype="uint64") /* ty=Tensor[(448), uint64] */;
  %1122 = reshape(%1118, newshape=[2, 1, 4]) /* ty=Tensor[(2, 1, 4), float64] */;
  %1123 = reshape(%1119, newshape=[]) /* ty=uint64 */;
  %1124 = reshape(%1121, newshape=[448]) /* ty=Tensor[(448), uint64] */;
  %1125 = @func_4427(%1122, %1123, %1124) /* ty=(Tensor[(2, 1, 4), float64], Tensor[(7, 4, 16), bool], uint64, Tensor[(448), uint64]) */;
  %1126 = @func_7783() /* ty=Tensor[(8, 16, 8), float64] */;
  %1127 = %1125.2;
  %1128 = @func_8825() /* ty=Tensor[(8, 16, 8), float64] */;
  (%1120, %1126, %1127, meta[relay.Constant][98] /* ty=Tensor[(8, 1), float64] */, meta[relay.Constant][99] /* ty=uint64 */, %1128)
}

def @func_14326() -> Tensor[(8, 16, 8), float32] {
  %1129 = @func_13482() /* ty=(Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float64]) */;
  %1129.0
}

def @func_2639(%var_2584: Tensor[(11, 15, 14), float32], %var_2585: Tensor[(11, 15, 14), float32], %var_2597: Tensor[(30, 9), float32], %var_2604: Tensor[(2250), float32]) -> (Tensor[(11, 15, 14), float32], Tensor[(9, 5, 6), float64], Tensor[(30, 9), float32], Tensor[(30, 9), float32], Tensor[(2250), float32], Tensor[(16, 15, 5), float32], Tensor[(224), int64], uint32) {
  %1130 = cast(%var_2585, dtype="float32") /* ty=Tensor[(11, 15, 14), float32] */;
  %1131 = shape_of(%var_2584, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1132 = cast(%var_2584, dtype="float32") /* ty=Tensor[(11, 15, 14), float32] */;
  %1133 = dyn.reshape(%1130, %1131, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1134 = cast(%var_2597, dtype="float32") /* ty=Tensor[(30, 9), float32] */;
  %1135 = reshape(%1134, newshape=[9, 5, 6]) /* ty=Tensor[(9, 5, 6), float32] */;
  %1136 = @func_652(%1135) /* ty=(Tensor[(9, 5, 6), float64],) */;
  %1137 = cast(%var_2604, dtype="float32") /* ty=Tensor[(2250), float32] */;
  %1138 = %1136.0;
  %1139 = cast(%1138, dtype="float32") /* ty=Tensor[(9, 5, 6), float32] */;
  %1140 = reshape(%1137, newshape=[15, 10, 15]) /* ty=Tensor[(15, 10, 15), float32] */;
  %1141 = reshape(%1139, newshape=[30, 9]) /* ty=Tensor[(30, 9), float32] */;
  %1142 = @func_1061(%1140, %1141) /* ty=(Tensor[(15, 10, 15), float32], Tensor[(9, 5, 6), float64], Tensor[(30, 9), float32], Tensor[(9, 5, 6), float64]) */;
  %1143 = cast(meta[relay.Constant][100] /* ty=Tensor[(224), int64] */, dtype="int64") /* ty=Tensor[(224), int64] */;
  %1144 = cast(meta[relay.Constant][100] /* ty=Tensor[(224), int64] */, dtype="int64") /* ty=Tensor[(224), int64] */;
  %1145 = cast(meta[relay.Constant][101] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %1146 = reshape(%1143, newshape=[7, 4, 8]) /* ty=Tensor[(7, 4, 8), int64] */;
  %1147 = reshape(%1144, newshape=[7, 4, 8]) /* ty=Tensor[(7, 4, 8), int64] */;
  %1148 = reshape(%1145, newshape=[]) /* ty=uint32 */;
  %1149 = @func_1485(%1146, %1147, %1148) /* ty=(Tensor[(7, 4, 8), int64], Tensor[(16, 15, 5), uint32], uint32, Tensor[(16, 15, 5), float32], Tensor[(16, 15, 5), float32]) */;
  %1150 = mod(%1132, %1133) /* ty=Tensor[(11, 15, 14), float32] */;
  %1151 = %1142.2;
  %1152 = %1149.3;
  (%1150, %1138, %var_2597, %1151, %var_2604, %1152, meta[relay.Constant][100] /* ty=Tensor[(224), int64] */, meta[relay.Constant][101] /* ty=uint32 */)
}

def @func_18113() -> (uint64,) {
  %1153 = @func_12565() /* ty=(Tensor[(315), float32], Tensor[(8, 16, 8), uint32], uint64) */;
  %1154 = %1153.2;
  (%1154,)
}

def @func_13239() -> (Tensor[(8, 1), float64], Tensor[(16, 15, 5), float32], Tensor[(1, 224), int64], uint32, Tensor[(7, 7, 10), float64], Tensor[(490), float64], Tensor[(8, 16, 8), float64]) {
  %1155 = @func_12096() /* ty=(Tensor[(448), uint64], Tensor[(8, 16, 8), float64], uint64, Tensor[(8, 1), float64], uint64, Tensor[(8, 16, 8), float64]) */;
  %1156 = cast(meta[relay.Constant][102] /* ty=Tensor[(1, 224), int64] */, dtype="int64") /* ty=Tensor[(1, 224), int64] */;
  %1157 = cast(meta[relay.Constant][102] /* ty=Tensor[(1, 224), int64] */, dtype="int64") /* ty=Tensor[(1, 224), int64] */;
  %1158 = cast(meta[relay.Constant][103] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %1159 = reshape(%1156, newshape=[7, 4, 8]) /* ty=Tensor[(7, 4, 8), int64] */;
  %1160 = reshape(%1157, newshape=[7, 4, 8]) /* ty=Tensor[(7, 4, 8), int64] */;
  %1161 = reshape(%1158, newshape=[]) /* ty=uint32 */;
  %1162 = @func_1485(%1159, %1160, %1161) /* ty=(Tensor[(7, 4, 8), int64], Tensor[(16, 15, 5), uint32], uint32, Tensor[(16, 15, 5), float32], Tensor[(16, 15, 5), float32]) */;
  %1163 = cast(meta[relay.Constant][104] /* ty=Tensor[(490), float64] */, dtype="float64") /* ty=Tensor[(490), float64] */;
  %1164 = reshape(%1163, newshape=[7, 7, 10]) /* ty=Tensor[(7, 7, 10), float64] */;
  %1165 = @func_7280(%1164) /* ty=(Tensor[(7, 7, 10), float64],) */;
  %1166 = @func_7714() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %1167 = %1155.3;
  %1168 = %1162.3;
  %1169 = %1165.0;
  %1170 = %1166.0;
  (%1167, %1168, meta[relay.Constant][102] /* ty=Tensor[(1, 224), int64] */, meta[relay.Constant][103] /* ty=uint32 */, %1169, meta[relay.Constant][104] /* ty=Tensor[(490), float64] */, %1170)
}

def @func_13482() -> (Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float64]) {
  %1171 = @func_12768() /* ty=(Tensor[(8, 16, 8), float32],) */;
  %1172 = @func_8889() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), int64], Tensor[(7, 3, 15), float32], Tensor[(315), float32]) */;
  %1173 = %1171.0;
  %1174 = %1172.0;
  (%1173, %1174)
}

def @func_18493() -> (Tensor[(8, 16, 8), float32],) {
  %1175 = @func_9983() /* ty=Tensor[(8, 16, 8), float32] */;
  (%1175,)
}

def @func_15771() -> (Tensor[(8, 16, 8), float32],) {
  %1176 = @func_15635() /* ty=(Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32]) */;
  %1177 = %1176.1;
  (%1177,)
}

def @func_13104() -> Tensor[(8, 16, 8), float64] {
  @func_7783() /* ty=Tensor[(8, 16, 8), float64] */
}

def @func_18471(%var_18456: bool) -> (Tensor[(8, 16, 8), float32], Tensor[(3, 4, 9), bool], bool, Tensor[(108), bool]) {
  %1178 = cast(%var_18456, dtype="bool") /* ty=bool */;
  %1179 = cast(meta[relay.Constant][105] /* ty=Tensor[(108), bool] */, dtype="bool") /* ty=Tensor[(108), bool] */;
  %1180 = reshape(%1178, newshape=[]) /* ty=bool */;
  %1181 = reshape(%1179, newshape=[3, 4, 9]) /* ty=Tensor[(3, 4, 9), bool] */;
  %1182 = @func_8769(%1180, %1181) /* ty=(Tensor[(3, 4, 9), bool],) */;
  %1183 = @func_18409() /* ty=Tensor[(8, 16, 8), float32] */;
  %1184 = %1182.0;
  (%1183, %1184, %var_18456, meta[relay.Constant][105] /* ty=Tensor[(108), bool] */)
}

def @func_12354() -> Tensor[(8, 16, 8), float64] {
  @func_10994() /* ty=Tensor[(8, 16, 8), float64] */
}

def @func_10876() -> (Tensor[(8, 16, 8), float64],) {
  %1185 = @func_9577() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %1186 = %1185.0;
  (%1186,)
}

def @func_652(%var_630: Tensor[(9, 5, 6), float32]) -> (Tensor[(9, 5, 6), float64],) {
  %1187 = cast(%var_630, dtype="float32") /* ty=Tensor[(9, 5, 6), float32] */;
  %1188 = asin(%1187) /* ty=Tensor[(9, 5, 6), float32] */;
  %1189 = cast(%1188, dtype="float64") /* ty=Tensor[(9, 5, 6), float64] */;
  %1190 = sqrt(%1189) /* ty=Tensor[(9, 5, 6), float64] */;
  (%1190,)
}

def @func_12448() -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64]) {
  %1191 = @func_12354() /* ty=Tensor[(8, 16, 8), float64] */;
  %1192 = @func_9447() /* ty=Tensor[(8, 16, 8), float64] */;
  (%1191, %1192)
}

def @func_9628(%var_9592: Tensor[(270), float32]) -> (Tensor[(8, 16, 8), float32], Tensor[(9, 5, 6), float64], Tensor[(270), float32], Tensor[(8, 16, 8), float64]) {
  %1193 = cast(%var_9592, dtype="float32") /* ty=Tensor[(270), float32] */;
  %1194 = reshape(%1193, newshape=[270]) /* ty=Tensor[(270), float32] */;
  %1195 = @func_8548(%1194) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(4, 7, 14), float64], Tensor[(392), uint64], Tensor[(9, 5, 6), float64], Tensor[(270), float32]) */;
  %1196 = @func_9254() /* ty=Tensor[(8, 16, 8), float32] */;
  %1197 = %1195.3;
  %1198 = @func_8825() /* ty=Tensor[(8, 16, 8), float64] */;
  (%1196, %1197, %var_9592, %1198)
}

def @func_11199(%var_11178: Tensor[(224), int64], %var_11179: uint32) -> (Tensor[(16, 15, 5), float32], Tensor[(224), int64], Tensor[(8, 16, 8), float32]) {
  %1199 = cast(%var_11178, dtype="int64") /* ty=Tensor[(224), int64] */;
  %1200 = cast(%var_11178, dtype="int64") /* ty=Tensor[(224), int64] */;
  %1201 = cast(%var_11179, dtype="uint32") /* ty=uint32 */;
  %1202 = reshape(%1199, newshape=[7, 4, 8]) /* ty=Tensor[(7, 4, 8), int64] */;
  %1203 = reshape(%1200, newshape=[7, 4, 8]) /* ty=Tensor[(7, 4, 8), int64] */;
  %1204 = reshape(%1201, newshape=[]) /* ty=uint32 */;
  %1205 = @func_1485(%1202, %1203, %1204) /* ty=(Tensor[(7, 4, 8), int64], Tensor[(16, 15, 5), uint32], uint32, Tensor[(16, 15, 5), float32], Tensor[(16, 15, 5), float32]) */;
  %1206 = @func_9447() /* ty=Tensor[(8, 16, 8), float64] */;
  %1207 = cast(%1206, dtype="float32") /* ty=Tensor[(8, 16, 8), float32] */;
  %1208 = cast(%var_11179, dtype="float32") /* ty=float32 */;
  %1209 = %1205.4;
  %1210 = power(%1207, %1208) /* ty=Tensor[(8, 16, 8), float32] */;
  (%1209, %var_11178, %1210)
}

def @func_3958(%var_3933: int32) -> (Tensor[(6, 1, 12), int32], Tensor[(6, 1, 12), uint8]) {
  %1211 = cast(%var_3933, dtype="int32") /* ty=int32 */;
  %1212 = cast(meta[relay.Constant][106] /* ty=Tensor[(6, 1, 12), int32] */, dtype="int32") /* ty=Tensor[(6, 1, 12), int32] */;
  %1213 = cast(meta[relay.Constant][106] /* ty=Tensor[(6, 1, 12), int32] */, dtype="uint8") /* ty=Tensor[(6, 1, 12), uint8] */;
  %1214 = cast(%var_3933, dtype="uint8") /* ty=uint8 */;
  %1215 = bitwise_and(%1211, %1212) /* ty=Tensor[(6, 1, 12), int32] */;
  %1216 = add(%1213, %1214) /* ty=Tensor[(6, 1, 12), uint8] */;
  (%1215, %1216)
}

def @func_18969(%var_18944: bool) -> (Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], bool, Tensor[(8, 16, 8), float32], Tensor[(108), bool]) {
  %1217 = cast(%var_18944, dtype="bool") /* ty=bool */;
  %1218 = reshape(%1217, newshape=[]) /* ty=bool */;
  %1219 = @func_18471(%1218) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(3, 4, 9), bool], bool, Tensor[(108), bool]) */;
  %1220 = cast(%var_18944, dtype="bool") /* ty=bool */;
  %1221 = cast(meta[relay.Constant][107] /* ty=Tensor[(108), bool] */, dtype="bool") /* ty=Tensor[(108), bool] */;
  %1222 = reshape(%1220, newshape=[]) /* ty=bool */;
  %1223 = reshape(%1221, newshape=[108]) /* ty=Tensor[(108), bool] */;
  %1224 = @func_16844(%1222, %1223) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(3, 4, 9), bool], bool, Tensor[(108), bool]) */;
  %1225 = @func_11546() /* ty=Tensor[(8, 16, 8), float32] */;
  %1226 = @func_15398() /* ty=Tensor[(8, 16, 8), float32] */;
  %1227 = %1219.0;
  %1228 = %1224.0;
  (%1225, %1226, %1227, %var_18944, %1228, meta[relay.Constant][107] /* ty=Tensor[(108), bool] */)
}

def @func_6097(%var_6075: Tensor[(7, 3, 15), float32]) -> Tensor[(7, 3, 15), float32] {
  %1229 = cast(%var_6075, dtype="float32") /* ty=Tensor[(7, 3, 15), float32] */;
  tan(%1229) /* ty=Tensor[(7, 3, 15), float32] */
}

def @func_17393() -> (Tensor[(8, 1), float64], Tensor[(8, 16, 8), float64]) {
  %1230 = @func_13553() /* ty=(Tensor[(8, 1), float64],) */;
  %1231 = @func_10030() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %1232 = %1230.0;
  %1233 = %1231.0;
  (%1232, %1233)
}

def @func_12730() -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32]) {
  %1234 = @func_12448() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64]) */;
  %1235 = @func_9399() /* ty=Tensor[(8, 16, 8), float64] */;
  %1236 = @func_9380() /* ty=Tensor[(8, 16, 8), float32] */;
  %1237 = %1234.0;
  %1238 = @func_9983() /* ty=Tensor[(8, 16, 8), float32] */;
  (%1235, %1236, %1237, %1238)
}

def @func_8011(%var_7997: Tensor[(180), int8]) -> (Tensor[(8, 16, 8), float64], Tensor[(2, 9, 10), int8], Tensor[(180), int8]) {
  %1239 = cast(%var_7997, dtype="int8") /* ty=Tensor[(180), int8] */;
  %1240 = cast(%var_7997, dtype="int8") /* ty=Tensor[(180), int8] */;
  %1241 = reshape(%1239, newshape=[2, 9, 10]) /* ty=Tensor[(2, 9, 10), int8] */;
  %1242 = reshape(%1240, newshape=[2, 9, 10]) /* ty=Tensor[(2, 9, 10), int8] */;
  %1243 = @func_4904(%1241, %1242) /* ty=(Tensor[(2, 9, 10), int8],) */;
  %1244 = @func_7915() /* ty=Tensor[(8, 16, 8), float64] */;
  %1245 = %1243.0;
  (%1244, %1245, %var_7997)
}

def @func_12573() -> (Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float64]) {
  %1246 = @func_8606() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %1247 = @func_9254() /* ty=Tensor[(8, 16, 8), float32] */;
  %1248 = %1246.0;
  (%1247, %1248)
}

def @func_8606() -> (Tensor[(8, 16, 8), float64],) {
  %1249 = @func_7783() /* ty=Tensor[(8, 16, 8), float64] */;
  (%1249,)
}

def @func_9254() -> Tensor[(8, 16, 8), float32] {
  %1250 = @func_8173() /* ty=(Tensor[(8, 16, 8), float32],) */;
  %1250.0
}

def @func_12768() -> (Tensor[(8, 16, 8), float32],) {
  %1251 = @func_9983() /* ty=Tensor[(8, 16, 8), float32] */;
  (%1251,)
}

def @func_18409() -> Tensor[(8, 16, 8), float32] {
  %1252 = @func_15824() /* ty=(Tensor[(8, 16, 8), float32],) */;
  %1252.0
}

def @func_11644(%var_11607: Tensor[(16, 1, 1), float32]) -> (Tensor[(8, 16, 8), float64], Tensor[(16, ?, ?), float32], Tensor[(16, ?, ?), bool]) {
  %1253 = @func_11583() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32]) */;
  %1254 = cast(%var_11607, dtype="float32") /* ty=Tensor[(16, 1, 1), float32] */;
  %1255 = cosh(%1254) /* ty=Tensor[(16, 1, 1), float32] */;
  %1256 = cast(%var_11607, dtype="uint16") /* ty=Tensor[(16, 1, 1), uint16] */;
  %1257 = shape_of(%1255, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1258 = cast(%1255, dtype="uint16") /* ty=Tensor[(16, 1, 1), uint16] */;
  %1259 = dyn.reshape(%1256, %1257, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %1260 = logical_xor(%1258, %1259) /* ty=Tensor[(16, ?, ?), uint16] */;
  %1261 = cast(%1260, dtype="float32") /* ty=Tensor[(16, ?, ?), float32] */;
  %1262 = erf(%1261) /* ty=Tensor[(16, ?, ?), float32] */;
  %1263 = cast(%var_11607, dtype="float32") /* ty=Tensor[(16, 1, 1), float32] */;
  %1264 = shape_of(%1262, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1265 = cast(%1262, dtype="float32") /* ty=Tensor[(16, ?, ?), float32] */;
  %1266 = dyn.reshape(%1263, %1264, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1267 = cast(%1262, dtype="bool") /* ty=Tensor[(16, ?, ?), bool] */;
  %1268 = shape_of(%1255, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1269 = cast(%1255, dtype="bool") /* ty=Tensor[(16, 1, 1), bool] */;
  %1270 = dyn.reshape(%1267, %1268, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1271 = %1253.0;
  %1272 = mod(%1265, %1266) /* ty=Tensor[(16, ?, ?), float32] */;
  %1273 = greater(%1269, %1270) /* ty=Tensor[(16, ?, ?), bool] */;
  (%1271, %1272, %1273)
}

def @func_11501(%var_11487: Tensor[(15, 3, 11), float32]) -> Tensor[(15, 3, 11), float32] {
  %1274 = cast(%var_11487, dtype="float32") /* ty=Tensor[(15, 3, 11), float32] */;
  atan(%1274) /* ty=Tensor[(15, 3, 11), float32] */
}

def @func_16648() -> (Tensor[(448), uint64], Tensor[(7, 3, 15), float32], Tensor[(8, 16, 8), float64]) {
  %1275 = @func_12096() /* ty=(Tensor[(448), uint64], Tensor[(8, 16, 8), float64], uint64, Tensor[(8, 1), float64], uint64, Tensor[(8, 16, 8), float64]) */;
  %1276 = @func_16330() /* ty=(Tensor[(7, 3, 15), float32], Tensor[(8, 16, 8), float64]) */;
  %1277 = %1275.0;
  %1278 = %1276.0;
  %1279 = @func_9830() /* ty=Tensor[(8, 16, 8), float64] */;
  (%1277, %1278, %1279)
}

def @func_10530(%var_10492: Tensor[(392), uint64], %var_10503: Tensor[(30), float64], %var_10504: Tensor[(2250), float32]) -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(392), uint64], Tensor[(4, 7, 14), uint16], Tensor[(270), float32], Tensor[(30), float64], Tensor[(2250), float32]) {
  %1280 = @func_7714() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %1281 = cast(%var_10492, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %1282 = reshape(%1281, newshape=[392]) /* ty=Tensor[(392), uint64] */;
  %1283 = @func_8634(%1282) /* ty=(Tensor[(14, 15, 14), float64], Tensor[(7, 4, 16), bool], uint64, Tensor[(448), uint64], Tensor[(8, 16, 8), float64], Tensor[(392), uint64], Tensor[(14, 15, 14), float64]) */;
  %1284 = cast(%var_10492, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %1285 = reshape(%1284, newshape=[4, 7, 14]) /* ty=Tensor[(4, 7, 14), uint64] */;
  %1286 = @func_7629(%1285) /* ty=(Tensor[(4, 7, 14), bool], Tensor[(9, 7, 10), float64], Tensor[(630), float64], Tensor[(7, 13, 6), uint64], Tensor[(546), bool], Tensor[(4, 7, 14), uint16], Tensor[(4, 7, 14), float64]) */;
  %1287 = cast(%var_10503, dtype="float64") /* ty=Tensor[(30), float64] */;
  %1288 = cast(%var_10504, dtype="float32") /* ty=Tensor[(2250), float32] */;
  %1289 = cast(%var_10503, dtype="float64") /* ty=Tensor[(30), float64] */;
  %1290 = reshape(%1287, newshape=[10, 3, 1]) /* ty=Tensor[(10, 3, 1), float64] */;
  %1291 = reshape(%1288, newshape=[225, 10]) /* ty=Tensor[(225, 10), float32] */;
  %1292 = reshape(%1289, newshape=[10, 3, 1]) /* ty=Tensor[(10, 3, 1), float64] */;
  %1293 = @func_10255(%1290, %1291, %1292) /* ty=(Tensor[(30, 9), float32], Tensor[(270), float32], Tensor[(225, 10), float32], Tensor[(7, 13, 6), uint64], Tensor[(546), bool], Tensor[(10, 3, 2310), int32], Tensor[(8, 16, 8), float64], Tensor[(392), uint64], Tensor[(10, 3, ?), bool], Tensor[(16, 15, 5), float32]) */;
  %1294 = %1280.0;
  %1295 = %1283.4;
  %1296 = %1286.5;
  %1297 = %1293.1;
  (%1294, %1295, %var_10492, %1296, %1297, %var_10503, %var_10504)
}

def @func_16997() -> (Tensor[(8, 16, 8), float32],) {
  %1298 = @func_7874() /* ty=(Tensor[(8, 16, 8), float32],) */;
  %1299 = %1298.0;
  (%1299,)
}

def @func_7951(%var_7943: Tensor[(14, 5, 5), bool], %var_7944: Tensor[(14, 5, 5), bool]) -> Tensor[(14, 5, 5), bool] {
  %1300 = cast(%var_7944, dtype="bool") /* ty=Tensor[(14, 5, 5), bool] */;
  %1301 = shape_of(%var_7943, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1302 = cast(%var_7943, dtype="bool") /* ty=Tensor[(14, 5, 5), bool] */;
  %1303 = dyn.reshape(%1300, %1301, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%1302, %1303) /* ty=Tensor[(14, 5, 5), bool] */
}

def @func_9447() -> Tensor[(8, 16, 8), float64] {
  %1304 = @func_8606() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %1304.0
}

def @func_9795() -> Tensor[(8, 16, 8), float64] {
  %1305 = @func_8501() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64], Tensor[(2940), float64]) */;
  %1305.0
}

def @func_15457() -> Tensor[(8, 16, 8), float64] {
  %1306 = @func_11129() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(270), float32]) */;
  %1306.0
}

def @func_18720() -> (Tensor[(8, 16, 8), float32], Tensor[(448), uint64], Tensor[(8, 16, 8), float32], Tensor[(512), float64], Tensor[(512), float64]) {
  %1307 = @func_12730() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32]) */;
  %1308 = @func_16823() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(7, 4, 16), bool], Tensor[(448), uint64]) */;
  %1309 = @func_15771() /* ty=(Tensor[(8, 16, 8), float32],) */;
  %1310 = cast(meta[relay.Constant][108] /* ty=Tensor[(512), float64] */, dtype="float64") /* ty=Tensor[(512), float64] */;
  %1311 = reshape(%1310, newshape=[512]) /* ty=Tensor[(512), float64] */;
  %1312 = @func_15709(%1311) /* ty=(Tensor[(8, 16, 8), int64], Tensor[(8, 1), float64], Tensor[(9, 7, 10), float64], float64, Tensor[(512), float64], Tensor[(392), uint64], Tensor[(14, 15, 14), float64], Tensor[(8, 16, 8), float64], Tensor[(9, 5, 13), float64], Tensor[(5, 117), float64]) */;
  %1313 = %1307.3;
  %1314 = %1308.2;
  %1315 = %1309.0;
  %1316 = %1312.4;
  (%1313, %1314, %1315, %1316, meta[relay.Constant][108] /* ty=Tensor[(512), float64] */)
}

def @func_15953() -> Tensor[(8, 16, 8), float32] {
  @func_14548() /* ty=Tensor[(8, 16, 8), float32] */
}

def @func_12565() -> (Tensor[(315), float32], Tensor[(8, 16, 8), uint32], uint64) {
  %1317 = @func_9399() /* ty=Tensor[(8, 16, 8), float64] */;
  %1318 = cast(meta[relay.Constant][109] /* ty=Tensor[(8, 16, 8), float64] */, dtype="uint32") /* ty=Tensor[(8, 16, 8), uint32] */;
  %1319 = shape_of(%1317, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1320 = cast(%1317, dtype="uint32") /* ty=Tensor[(8, 16, 8), uint32] */;
  %1321 = dyn.reshape(%1318, %1319, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %1322 = @func_12096() /* ty=(Tensor[(448), uint64], Tensor[(8, 16, 8), float64], uint64, Tensor[(8, 1), float64], uint64, Tensor[(8, 16, 8), float64]) */;
  %1323 = @func_9849() /* ty=Tensor[(315), float32] */;
  %1324 = left_shift(%1320, %1321) /* ty=Tensor[(8, 16, 8), uint32] */;
  %1325 = %1322.2;
  (%1323, %1324, %1325)
}

def @func_17802() -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32]) {
  %1326 = @func_17082() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64]) */;
  %1327 = %1326.1;
  %1328 = @func_8028() /* ty=Tensor[(8, 16, 8), float32] */;
  (%1327, %1328)
}

def @func_17082() -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64]) {
  %1329 = @func_8606() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %1330 = @func_14184() /* ty=Tensor[(8, 16, 8), float64] */;
  %1331 = %1329.0;
  (%1330, %1331)
}

def @func_10154(%var_10148: Tensor[(2310), float32], %var_10149: Tensor[(270), float32]) -> (Tensor[(315), float32], Tensor[(16, 15, 5), float32], Tensor[(2310), float32], Tensor[(270), float32], Tensor[(2250), float32]) {
  %1332 = cast(%var_10148, dtype="float32") /* ty=Tensor[(2310), float32] */;
  %1333 = cast(%var_10148, dtype="float32") /* ty=Tensor[(2310), float32] */;
  %1334 = cast(%var_10149, dtype="float32") /* ty=Tensor[(270), float32] */;
  %1335 = cast(meta[relay.Constant][110] /* ty=Tensor[(2250), float32] */, dtype="float32") /* ty=Tensor[(2250), float32] */;
  %1336 = reshape(%1332, newshape=[11, 15, 14]) /* ty=Tensor[(11, 15, 14), float32] */;
  %1337 = reshape(%1333, newshape=[11, 15, 14]) /* ty=Tensor[(11, 15, 14), float32] */;
  %1338 = reshape(%1334, newshape=[30, 9]) /* ty=Tensor[(30, 9), float32] */;
  %1339 = reshape(%1335, newshape=[2250]) /* ty=Tensor[(2250), float32] */;
  %1340 = @func_2639(%1336, %1337, %1338, %1339) /* ty=(Tensor[(11, 15, 14), float32], Tensor[(9, 5, 6), float64], Tensor[(30, 9), float32], Tensor[(30, 9), float32], Tensor[(2250), float32], Tensor[(16, 15, 5), float32], Tensor[(224), int64], uint32) */;
  %1341 = @func_9849() /* ty=Tensor[(315), float32] */;
  %1342 = %1340.5;
  (%1341, %1342, %var_10148, %var_10149, meta[relay.Constant][110] /* ty=Tensor[(2250), float32] */)
}

def @func_16271(%var_16269: Tensor[(270), float32]) -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64], Tensor[(8, 16, 8), float64], Tensor[(270), float32]) {
  %1343 = @func_12448() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64]) */;
  %1344 = @func_16189() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %1345 = @func_8501() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64], Tensor[(2940), float64]) */;
  %1346 = cast(%var_16269, dtype="float32") /* ty=Tensor[(270), float32] */;
  %1347 = reshape(%1346, newshape=[270]) /* ty=Tensor[(270), float32] */;
  %1348 = @func_8548(%1347) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(4, 7, 14), float64], Tensor[(392), uint64], Tensor[(9, 5, 6), float64], Tensor[(270), float32]) */;
  %1349 = %1343.1;
  %1350 = %1344.0;
  %1351 = %1345.1;
  %1352 = %1348.0;
  (%1349, %1350, %1351, %1352, %var_16269)
}

def @func_8119(%var_8076: Tensor[(3, 13, 16), int64], %var_8095: Tensor[(15, 15, 10), uint16], %var_8117: Tensor[(11), uint16]) -> (Tensor[(3, 13, 16), int64], Tensor[(7, 13, 6), uint64], Tensor[(7, 78), bool], Tensor[(7, 13, 6), uint64], Tensor[(2250), uint16], Tensor[(15, 15, 10), bool], Tensor[(6, 1, 12), uint8], Tensor[(11), uint16]) {
  %1353 = cast(meta[relay.Constant][111] /* ty=Tensor[(3, 13, 16), int64] */, dtype="int64") /* ty=Tensor[(3, 13, 16), int64] */;
  %1354 = shape_of(%var_8076, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1355 = cast(%var_8076, dtype="int64") /* ty=Tensor[(3, 13, 16), int64] */;
  %1356 = dyn.reshape(%1353, %1354, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %1357 = cast(meta[relay.Constant][112] /* ty=Tensor[(7, 78), bool] */, dtype="bool") /* ty=Tensor[(7, 78), bool] */;
  %1358 = cast(meta[relay.Constant][112] /* ty=Tensor[(7, 78), bool] */, dtype="bool") /* ty=Tensor[(7, 78), bool] */;
  %1359 = reshape(%1357, newshape=[7, 13, 6]) /* ty=Tensor[(7, 13, 6), bool] */;
  %1360 = reshape(%1358, newshape=[7, 13, 6]) /* ty=Tensor[(7, 13, 6), bool] */;
  %1361 = @func_4270(%1359, %1360) /* ty=(Tensor[(7, 13, 6), uint64],) */;
  %1362 = %1361.0;
  %1363 = cast(%1362, dtype="bool") /* ty=Tensor[(7, 13, 6), bool] */;
  %1364 = cast(%1362, dtype="bool") /* ty=Tensor[(7, 13, 6), bool] */;
  %1365 = reshape(%1363, newshape=[7, 13, 6]) /* ty=Tensor[(7, 13, 6), bool] */;
  %1366 = reshape(%1364, newshape=[7, 13, 6]) /* ty=Tensor[(7, 13, 6), bool] */;
  %1367 = @func_4270(%1365, %1366) /* ty=(Tensor[(7, 13, 6), uint64],) */;
  %1368 = cast(meta[relay.Constant][113] /* ty=Tensor[(2250), uint16] */, dtype="uint16") /* ty=Tensor[(2250), uint16] */;
  %1369 = reshape(%1368, newshape=[15, 15, 10]) /* ty=Tensor[(15, 15, 10), uint16] */;
  %1370 = @func_673(%1369) /* ty=(Tensor[(15, 15, 10), uint16],) */;
  %1371 = %1370.0;
  %1372 = cast(%var_8095, dtype="bool") /* ty=Tensor[(15, 15, 10), bool] */;
  %1373 = shape_of(%1371, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1374 = cast(%1371, dtype="bool") /* ty=Tensor[(15, 15, 10), bool] */;
  %1375 = dyn.reshape(%1372, %1373, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1376 = cast(%var_8117, dtype="uint16") /* ty=Tensor[(11), uint16] */;
  %1377 = reshape(%1376, newshape=[1, 1, 11]) /* ty=Tensor[(1, 1, 11), uint16] */;
  %1378 = @func_5723(%1377) /* ty=(Tensor[(6, 1, 12), uint8], Tensor[(1, 1, 11), float32]) */;
  %1379 = bitwise_and(%1355, %1356) /* ty=Tensor[(3, 13, 16), int64] */;
  %1380 = %1367.0;
  %1381 = logical_and(%1374, %1375) /* ty=Tensor[(15, 15, 10), bool] */;
  %1382 = %1378.0;
  (%1379, %1362, meta[relay.Constant][112] /* ty=Tensor[(7, 78), bool] */, %1380, meta[relay.Constant][113] /* ty=Tensor[(2250), uint16] */, %1381, %1382, %var_8117)
}

def @func_14973() -> (Tensor[(8, 16, 8), float64],) {
  %1383 = @func_12967() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %1384 = %1383.0;
  (%1384,)
}

def @func_18799() -> Tensor[(14, 15, 14), float64] {
  @func_15571() /* ty=Tensor[(14, 15, 14), float64] */
}

def @func_7896(%var_7888: Tensor[(56, 8), uint64]) -> (Tensor[(8, 16, 8), float64], Tensor[(7, 4, 16), bool], uint64, Tensor[(56, 8), uint64]) {
  %1385 = @func_7714() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %1386 = cast(meta[relay.Constant][114] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %1387 = cast(%var_7888, dtype="uint64") /* ty=Tensor[(56, 8), uint64] */;
  %1388 = reshape(%1386, newshape=[]) /* ty=uint64 */;
  %1389 = reshape(%1387, newshape=[7, 4, 16]) /* ty=Tensor[(7, 4, 16), uint64] */;
  %1390 = %1385.0;
  %1391 = @func_2096(%1388, %1389) /* ty=Tensor[(7, 4, 16), bool] */;
  (%1390, %1391, meta[relay.Constant][114] /* ty=uint64 */, %var_7888)
}

def @func_13022() -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64]) {
  %1392 = @func_7714() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %1393 = %1392.0;
  %1394 = @func_9447() /* ty=Tensor[(8, 16, 8), float64] */;
  (%1393, %1394)
}

def @func_11744() -> (Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], Tensor[(7, 3, 15), float32]) {
  %1395 = @func_9744() /* ty=(Tensor[(8, 16, 8), float32], Tensor[(315), float32], Tensor[(7, 3, 15), float32], Tensor[(8, 16, 8), int64]) */;
  %1396 = @func_9013() /* ty=Tensor[(8, 16, 8), float32] */;
  %1397 = @func_8028() /* ty=Tensor[(8, 16, 8), float32] */;
  %1398 = %1395.2;
  (%1396, %1397, %1398)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_12669(%var_12655: uint32) -> (Tensor[(8, 16, 8), float64], Tensor[(3, 4, 7), int16], uint32, Tensor[(8, 16, 8), float64]) {
  %0 = cast(%var_12655, dtype="uint32") /* ty=uint32 */;
  %1 = reshape(%0, newshape=[]) /* ty=uint32 */;
  %2 = @func_10116(%1) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(3, 4, 7), int16], uint32, Tensor[(84), bool]) */;
  %3 = @func_10596() /* ty=(Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float64]) */;
  %4 = @func_8825() /* ty=Tensor[(8, 16, 8), float64] */;
  %5 = %2.1;
  %6 = %3.1;
  (%4, %5, %var_12655, %6)
}

def @func_3960(%var_3959: int32) -> (Tensor[(6, 1, 12), int32], Tensor[(6, 1, 12), uint8]) {
  %13 = fn (%var_3933: int32) -> (Tensor[(6, 1, 12), int32], Tensor[(6, 1, 12), uint8]) {
    %7 = cast(%var_3933, dtype="int32") /* ty=int32 */;
    %8 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 1, 12), int32] */, dtype="int32") /* ty=Tensor[(6, 1, 12), int32] */;
    %9 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 1, 12), int32] */, dtype="uint8") /* ty=Tensor[(6, 1, 12), uint8] */;
    %10 = cast(%var_3933, dtype="uint8") /* ty=uint8 */;
    %11 = bitwise_and(%7, %8) /* ty=Tensor[(6, 1, 12), int32] */;
    %12 = add(%9, %10) /* ty=Tensor[(6, 1, 12), uint8] */;
    (%11, %12)
  };
  %13(%var_3959) /* ty=(Tensor[(6, 1, 12), int32], Tensor[(6, 1, 12), uint8]) */
}

def @func_17919() -> (Tensor[(448), uint64],) {
  @func_17917() /* ty=(Tensor[(448), uint64],) */
}

def @func_9066() -> Tensor[(8, 16, 8), float32] {
  @func_9064() /* ty=Tensor[(8, 16, 8), float32] */
}

def @func_17116() -> (Tensor[(8, 16, 8), float32],) {
  %14 = @func_9254() /* ty=Tensor[(8, 16, 8), float32] */;
  (%14,)
}

def @func_1065(%var_1063: Tensor[(15, 10, 15), float32], %var_1064: Tensor[(30, 9), float32]) -> (Tensor[(15, 10, 15), float32], Tensor[(9, 5, 6), float64], Tensor[(30, 9), float32], Tensor[(9, 5, 6), float64]) {
  @func_1061(%var_1063, %var_1064) /* ty=(Tensor[(15, 10, 15), float32], Tensor[(9, 5, 6), float64], Tensor[(30, 9), float32], Tensor[(9, 5, 6), float64]) */
}

def @func_10530(%var_10492: Tensor[(392), uint64], %var_10503: Tensor[(30), float64], %var_10504: Tensor[(2250), float32]) -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(392), uint64], Tensor[(4, 7, 14), uint16], Tensor[(270), float32], Tensor[(30), float64], Tensor[(2250), float32]) {
  %15 = @func_7714() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %16 = cast(%var_10492, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %17 = reshape(%16, newshape=[392]) /* ty=Tensor[(392), uint64] */;
  %18 = @func_8634(%17) /* ty=(Tensor[(14, 15, 14), float64], Tensor[(7, 4, 16), bool], uint64, Tensor[(448), uint64], Tensor[(8, 16, 8), float64], Tensor[(392), uint64], Tensor[(14, 15, 14), float64]) */;
  %19 = cast(%var_10492, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %20 = reshape(%19, newshape=[4, 7, 14]) /* ty=Tensor[(4, 7, 14), uint64] */;
  %21 = @func_7629(%20) /* ty=(Tensor[(4, 7, 14), bool], Tensor[(9, 7, 10), float64], Tensor[(630), float64], Tensor[(7, 13, 6), uint64], Tensor[(546), bool], Tensor[(4, 7, 14), uint16], Tensor[(4, 7, 14), float64]) */;
  %22 = cast(%var_10503, dtype="float64") /* ty=Tensor[(30), float64] */;
  %23 = cast(%var_10504, dtype="float32") /* ty=Tensor[(2250), float32] */;
  %24 = cast(%var_10503, dtype="float64") /* ty=Tensor[(30), float64] */;
  %25 = reshape(%22, newshape=[10, 3, 1]) /* ty=Tensor[(10, 3, 1), float64] */;
  %26 = reshape(%23, newshape=[225, 10]) /* ty=Tensor[(225, 10), float32] */;
  %27 = reshape(%24, newshape=[10, 3, 1]) /* ty=Tensor[(10, 3, 1), float64] */;
  %28 = @func_10255(%25, %26, %27) /* ty=(Tensor[(30, 9), float32], Tensor[(270), float32], Tensor[(225, 10), float32], Tensor[(7, 13, 6), uint64], Tensor[(546), bool], Tensor[(10, 3, 2310), int32], Tensor[(8, 16, 8), float64], Tensor[(392), uint64], Tensor[(10, 3, ?), bool], Tensor[(16, 15, 5), float32]) */;
  %29 = %15.0;
  %30 = %18.4;
  %31 = %21.5;
  %32 = %28.1;
  (%29, %30, %var_10492, %31, %32, %var_10503, %var_10504)
}

def @func_12128(%var_12125: float64, %var_12126: Tensor[(4, 8, 16), float64], %var_12127: Tensor[(392), uint64]) -> (Tensor[(4, 8, 16), int8], Tensor[(9, 7, 10), float64], Tensor[(392), uint64], Tensor[(8, 16, 8), float64]) {
  @func_12123(%var_12125, %var_12126, %var_12127) /* ty=(Tensor[(4, 8, 16), int8], Tensor[(9, 7, 10), float64], Tensor[(392), uint64], Tensor[(8, 16, 8), float64]) */
}

def @func_7200(%var_7190: Tensor[(10, 9, 15), float32]) -> Tensor[(10, 9, 15), float32] {
  %33 = cast(meta[relay.Constant][1] /* ty=Tensor[(10, 9, 15), float32] */, dtype="float32") /* ty=Tensor[(10, 9, 15), float32] */;
  %34 = shape_of(%var_7190, dtype="int32") /* ty=Tensor[(3), int32] */;
  %35 = cast(%var_7190, dtype="float32") /* ty=Tensor[(10, 9, 15), float32] */;
  %36 = dyn.reshape(%33, %34, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%35, %36) /* ty=Tensor[(10, 9, 15), float32] */
}

def @func_8827() -> Tensor[(8, 16, 8), float64] {
  @func_8825() /* ty=Tensor[(8, 16, 8), float64] */
}

def @func_11129() -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(270), float32]) {
  %37 = cast(meta[relay.Constant][2] /* ty=Tensor[(270), float32] */, dtype="float32") /* ty=Tensor[(270), float32] */;
  %38 = reshape(%37, newshape=[270]) /* ty=Tensor[(270), float32] */;
  %39 = @func_8548(%38) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(4, 7, 14), float64], Tensor[(392), uint64], Tensor[(9, 5, 6), float64], Tensor[(270), float32]) */;
  %40 = @func_7915() /* ty=Tensor[(8, 16, 8), float64] */;
  %41 = %39.0;
  (%40, %41, meta[relay.Constant][2] /* ty=Tensor[(270), float32] */)
}

def @func_9256() -> Tensor[(8, 16, 8), float32] {
  @func_9254() /* ty=Tensor[(8, 16, 8), float32] */
}

def @func_8608() -> (Tensor[(8, 16, 8), float64],) {
  @func_8606() /* ty=(Tensor[(8, 16, 8), float64],) */
}

def @func_11546() -> Tensor[(8, 16, 8), float32] {
  @func_9254() /* ty=Tensor[(8, 16, 8), float32] */
}

def @func_7629(%var_7548: Tensor[(4, 7, 14), uint64]) -> (Tensor[(4, 7, 14), bool], Tensor[(9, 7, 10), float64], Tensor[(630), float64], Tensor[(7, 13, 6), uint64], Tensor[(546), bool], Tensor[(4, 7, 14), uint16], Tensor[(4, 7, 14), float64]) {
  %42 = cast(%var_7548, dtype="bool") /* ty=Tensor[(4, 7, 14), bool] */;
  %43 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(4, 7, 14), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %44 = cast(meta[relay.Constant][3] /* ty=Tensor[(4, 7, 14), uint64] */, dtype="bool") /* ty=Tensor[(4, 7, 14), bool] */;
  %45 = dyn.reshape(%42, %43, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %46 = cast(meta[relay.Constant][4] /* ty=Tensor[(630), float64] */, dtype="float64") /* ty=Tensor[(630), float64] */;
  %47 = reshape(%46, newshape=[9, 7, 10]) /* ty=Tensor[(9, 7, 10), float64] */;
  %48 = @func_3445(%47) /* ty=(Tensor[(9, 7, 10), float64],) */;
  %49 = cast(meta[relay.Constant][5] /* ty=Tensor[(546), bool] */, dtype="bool") /* ty=Tensor[(546), bool] */;
  %50 = cast(meta[relay.Constant][5] /* ty=Tensor[(546), bool] */, dtype="bool") /* ty=Tensor[(546), bool] */;
  %51 = reshape(%49, newshape=[7, 13, 6]) /* ty=Tensor[(7, 13, 6), bool] */;
  %52 = reshape(%50, newshape=[7, 13, 6]) /* ty=Tensor[(7, 13, 6), bool] */;
  %53 = @func_4270(%51, %52) /* ty=(Tensor[(7, 13, 6), uint64],) */;
  %54 = cast(%var_7548, dtype="float64") /* ty=Tensor[(4, 7, 14), float64] */;
  %55 = erf(%54) /* ty=Tensor[(4, 7, 14), float64] */;
  %56 = cast(meta[relay.Constant][3] /* ty=Tensor[(4, 7, 14), uint64] */, dtype="uint16") /* ty=Tensor[(4, 7, 14), uint16] */;
  %57 = shape_of(%55, dtype="int32") /* ty=Tensor[(3), int32] */;
  %58 = cast(%55, dtype="uint16") /* ty=Tensor[(4, 7, 14), uint16] */;
  %59 = dyn.reshape(%56, %57, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %60 = cast(%55, dtype="float64") /* ty=Tensor[(4, 7, 14), float64] */;
  %61 = not_equal(%44, %45) /* ty=Tensor[(4, 7, 14), bool] */;
  %62 = %48.0;
  %63 = %53.0;
  %64 = bitwise_or(%58, %59) /* ty=Tensor[(4, 7, 14), uint16] */;
  %65 = tan(%60) /* ty=Tensor[(4, 7, 14), float64] */;
  (%61, %62, meta[relay.Constant][4] /* ty=Tensor[(630), float64] */, %63, meta[relay.Constant][5] /* ty=Tensor[(546), bool] */, %64, %65)
}

def @func_18149() -> Tensor[(14, 15, 14), float64] {
  %66 = @func_16723() /* ty=(Tensor[(14, 15, 14), float64], Tensor[(3, 4, 7), int16], uint32, Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32]) */;
  %66.0
}

def @func_8501() -> (Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64], Tensor[(2940), float64]) {
  %67 = cast(meta[relay.Constant][6] /* ty=Tensor[(2940), float64] */, dtype="float64") /* ty=Tensor[(2940), float64] */;
  %68 = reshape(%67, newshape=[14, 15, 14]) /* ty=Tensor[(14, 15, 14), float64] */;
  %69 = @func_7915() /* ty=Tensor[(8, 16, 8), float64] */;
  %70 = @func_2534(%68) /* ty=Tensor[(14, 15, 14), float64] */;
  (%69, %70, meta[relay.Constant][6] /* ty=Tensor[(2940), float64] */)
}

def @func_9204() -> (Tensor[(8, 16, 8), float32],) {
  %73 = fn () -> (Tensor[(8, 16, 8), float32],) {
    %71 = @func_7874() /* ty=(Tensor[(8, 16, 8), float32],) */;
    %72 = %71.0;
    (%72,)
  };
  %73() /* ty=(Tensor[(8, 16, 8), float32],) */
}

def @func_7784() -> Tensor[(8, 16, 8), float64] {
  %75 = fn () -> Tensor[(8, 16, 8), float64] {
    %74 = @func_7714() /* ty=(Tensor[(8, 16, 8), float64],) */;
    %74.0
  };
  %75() /* ty=Tensor[(8, 16, 8), float64] */
}

def @func_12355() -> Tensor[(8, 16, 8), float64] {
  %76 = fn () -> Tensor[(8, 16, 8), float64] {
    @func_10994() /* ty=Tensor[(8, 16, 8), float64] */
  };
  %76() /* ty=Tensor[(8, 16, 8), float64] */
}

def @func_11744() -> (Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], Tensor[(7, 3, 15), float32]) {
  %77 = @func_9744() /* ty=(Tensor[(8, 16, 8), float32], Tensor[(315), float32], Tensor[(7, 3, 15), float32], Tensor[(8, 16, 8), int64]) */;
  %78 = @func_9013() /* ty=Tensor[(8, 16, 8), float32] */;
  %79 = @func_8028() /* ty=Tensor[(8, 16, 8), float32] */;
  %80 = %77.2;
  (%78, %79, %80)
}

def @func_12123(%var_12103: float64, %var_12104: Tensor[(4, 8, 16), float64], %var_12114: Tensor[(392), uint64]) -> (Tensor[(4, 8, 16), int8], Tensor[(9, 7, 10), float64], Tensor[(392), uint64], Tensor[(8, 16, 8), float64]) {
  %81 = cast(%var_12103, dtype="float64") /* ty=float64 */;
  %82 = cast(%var_12104, dtype="float64") /* ty=Tensor[(4, 8, 16), float64] */;
  %83 = divide(%81, %82) /* ty=Tensor[(4, 8, 16), float64] */;
  %84 = cast(%83, dtype="int8") /* ty=Tensor[(4, 8, 16), int8] */;
  %85 = shape_of(%var_12104, dtype="int32") /* ty=Tensor[(3), int32] */;
  %86 = cast(%var_12104, dtype="int8") /* ty=Tensor[(4, 8, 16), int8] */;
  %87 = dyn.reshape(%84, %85, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %88 = cast(%var_12114, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %89 = reshape(%88, newshape=[4, 7, 14]) /* ty=Tensor[(4, 7, 14), uint64] */;
  %90 = @func_7629(%89) /* ty=(Tensor[(4, 7, 14), bool], Tensor[(9, 7, 10), float64], Tensor[(630), float64], Tensor[(7, 13, 6), uint64], Tensor[(546), bool], Tensor[(4, 7, 14), uint16], Tensor[(4, 7, 14), float64]) */;
  %91 = left_shift(%86, %87) /* ty=Tensor[(4, 8, 16), int8] */;
  %92 = %90.1;
  %93 = @func_9830() /* ty=Tensor[(8, 16, 8), float64] */;
  (%91, %92, %var_12114, %93)
}

def @func_17082() -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64]) {
  %94 = @func_8606() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %95 = @func_14184() /* ty=Tensor[(8, 16, 8), float64] */;
  %96 = %94.0;
  (%95, %96)
}

def @func_14973() -> (Tensor[(8, 16, 8), float64],) {
  %97 = @func_12967() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %98 = %97.0;
  (%98,)
}

def @func_17211(%var_17209: Tensor[(15, 150), float32]) -> (Tensor[(8, 16, 8), float32], Tensor[(2250), float32], Tensor[(15, 150), float32]) {
  @func_17208(%var_17209) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(2250), float32], Tensor[(15, 150), float32]) */
}

def @func_9447() -> Tensor[(8, 16, 8), float64] {
  %99 = @func_8606() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %99.0
}

def @func_10995() -> Tensor[(8, 16, 8), float64] {
  %101 = fn () -> Tensor[(8, 16, 8), float64] {
    %100 = @func_9577() /* ty=(Tensor[(8, 16, 8), float64],) */;
    %100.0
  };
  %101() /* ty=Tensor[(8, 16, 8), float64] */
}

def @func_16059(%var_16056: Tensor[(1350), float32], %var_16057: Tensor[(392), uint64], %var_16058: Tensor[(11), uint16]) -> (Tensor[(315), float32], Tensor[(8, 16, 8), float64], Tensor[(1350), float32], Tensor[(392), uint64], Tensor[(1, 1, 11), float32], Tensor[(11), uint16], Tensor[(2940), int16], Tensor[(8, 16, 8), float64]) {
  %116 = fn (%var_15968: Tensor[(1350), float32], %var_15969: Tensor[(392), uint64], %var_16004: Tensor[(11), uint16]) -> (Tensor[(315), float32], Tensor[(8, 16, 8), float64], Tensor[(1350), float32], Tensor[(392), uint64], Tensor[(1, 1, 11), float32], Tensor[(11), uint16], Tensor[(2940), int16], Tensor[(8, 16, 8), float64]) {
    %102 = cast(%var_15968, dtype="float32") /* ty=Tensor[(1350), float32] */;
    %103 = cast(%var_15969, dtype="uint64") /* ty=Tensor[(392), uint64] */;
    %104 = reshape(%102, newshape=[1350]) /* ty=Tensor[(1350), float32] */;
    %105 = reshape(%103, newshape=[392]) /* ty=Tensor[(392), uint64] */;
    %106 = @func_8742(%104, %105) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(1350), float32], Tensor[(8, 16, 8), float64], Tensor[(392), uint64]) */;
    %107 = cast(%var_16004, dtype="uint16") /* ty=Tensor[(11), uint16] */;
    %108 = reshape(%107, newshape=[1, 1, 11]) /* ty=Tensor[(1, 1, 11), uint16] */;
    %109 = @func_5723(%108) /* ty=(Tensor[(6, 1, 12), uint8], Tensor[(1, 1, 11), float32]) */;
    %110 = @func_14539() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(2940), int16]) */;
    %111 = @func_9849() /* ty=Tensor[(315), float32] */;
    %112 = %106.2;
    %113 = %109.1;
    %114 = %110.1;
    %115 = @func_15457() /* ty=Tensor[(8, 16, 8), float64] */;
    (%111, %112, %var_15968, %var_15969, %113, %var_16004, %114, %115)
  };
  %116(%var_16056, %var_16057, %var_16058) /* ty=(Tensor[(315), float32], Tensor[(8, 16, 8), float64], Tensor[(1350), float32], Tensor[(392), uint64], Tensor[(1, 1, 11), float32], Tensor[(11), uint16], Tensor[(2940), int16], Tensor[(8, 16, 8), float64]) */
}

def @func_9628(%var_9592: Tensor[(270), float32]) -> (Tensor[(8, 16, 8), float32], Tensor[(9, 5, 6), float64], Tensor[(270), float32], Tensor[(8, 16, 8), float64]) {
  %117 = cast(%var_9592, dtype="float32") /* ty=Tensor[(270), float32] */;
  %118 = reshape(%117, newshape=[270]) /* ty=Tensor[(270), float32] */;
  %119 = @func_8548(%118) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(4, 7, 14), float64], Tensor[(392), uint64], Tensor[(9, 5, 6), float64], Tensor[(270), float32]) */;
  %120 = @func_9254() /* ty=Tensor[(8, 16, 8), float32] */;
  %121 = %119.3;
  %122 = @func_8825() /* ty=Tensor[(8, 16, 8), float64] */;
  (%120, %121, %var_9592, %122)
}

def @func_11584() -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32]) {
  %126 = fn () -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32]) {
    %123 = @func_7714() /* ty=(Tensor[(8, 16, 8), float64],) */;
    %124 = %123.0;
    %125 = @func_9983() /* ty=Tensor[(8, 16, 8), float32] */;
    (%124, %125)
  };
  %126() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32]) */
}

def @func_7917() -> Tensor[(8, 16, 8), float64] {
  @func_7915() /* ty=Tensor[(8, 16, 8), float64] */
}

def @func_10654(%var_10652: Tensor[(84), bool]) -> (Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], Tensor[(8, 11, 3), float64], Tensor[(264), float64], Tensor[(16, 15, 5), float32], Tensor[(224), int64], uint32, Tensor[(8, 16, 8), float32], Tensor[(84), bool], Tensor[(315), float32]) {
  @func_10651(%var_10652) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], Tensor[(8, 11, 3), float64], Tensor[(264), float64], Tensor[(16, 15, 5), float32], Tensor[(224), int64], uint32, Tensor[(8, 16, 8), float32], Tensor[(84), bool], Tensor[(315), float32]) */
}

def @func_15291(%var_15289: Tensor[(448), uint64]) -> (Tensor[(8, 1), float64], Tensor[(2, 1, 4), float64], uint64, Tensor[(448), uint64], Tensor[(9, 5, 6), bool], Tensor[(270), float64]) {
  @func_15288(%var_15289) /* ty=(Tensor[(8, 1), float64], Tensor[(2, 1, 4), float64], uint64, Tensor[(448), uint64], Tensor[(9, 5, 6), bool], Tensor[(270), float64]) */
}

def @func_9850() -> Tensor[(315), float32] {
  %128 = fn () -> Tensor[(315), float32] {
    %127 = @func_8889() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), int64], Tensor[(7, 3, 15), float32], Tensor[(315), float32]) */;
    %127.3
  };
  %128() /* ty=Tensor[(315), float32] */
}

def @func_13617() -> (Tensor[(14, 15, 14), float64],) {
  @func_13615() /* ty=(Tensor[(14, 15, 14), float64],) */
}

def @func_13615() -> (Tensor[(14, 15, 14), float64],) {
  %129 = @func_12378() /* ty=(Tensor[(14, 15, 14), float64],) */;
  %130 = %129.0;
  (%130,)
}

def @func_9399() -> Tensor[(8, 16, 8), float64] {
  %131 = @func_8606() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %131.0
}

def @func_13738(%var_13735: Tensor[(416), int8], %var_13736: Tensor[(630), float64], %var_13737: Tensor[(3780), bool]) -> (Tensor[(8, 16, 8), float64], Tensor[(3, 4, 9), bool], Tensor[(2250), float32], uint64, Tensor[(448), uint64], Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(9, 5, 6), uint32], Tensor[(416), int8], Tensor[(6, 45), float64], Tensor[(630), float64], Tensor[(3780), bool], Tensor[(7, 13, 6), uint64], Tensor[(1350), float32]) {
  @func_13733(%var_13735, %var_13736, %var_13737) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(3, 4, 9), bool], Tensor[(2250), float32], uint64, Tensor[(448), uint64], Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(9, 5, 6), uint32], Tensor[(416), int8], Tensor[(6, 45), float64], Tensor[(630), float64], Tensor[(3780), bool], Tensor[(7, 13, 6), uint64], Tensor[(1350), float32]) */
}

def @func_15712(%var_15710: Tensor[(512), float64]) -> (Tensor[(8, 16, 8), int64], Tensor[(8, 1), float64], Tensor[(9, 7, 10), float64], float64, Tensor[(512), float64], Tensor[(392), uint64], Tensor[(14, 15, 14), float64], Tensor[(8, 16, 8), float64], Tensor[(9, 5, 13), float64], Tensor[(5, 117), float64]) {
  @func_15709(%var_15710) /* ty=(Tensor[(8, 16, 8), int64], Tensor[(8, 1), float64], Tensor[(9, 7, 10), float64], float64, Tensor[(512), float64], Tensor[(392), uint64], Tensor[(14, 15, 14), float64], Tensor[(8, 16, 8), float64], Tensor[(9, 5, 13), float64], Tensor[(5, 117), float64]) */
}

def @func_17309() -> Tensor[(8, 1), float64] {
  @func_17307() /* ty=Tensor[(8, 1), float64] */
}

def @func_17612() -> uint64 {
  @func_17610() /* ty=uint64 */
}

def @func_7414(%var_7413: Tensor[(9, 5, 13), float64]) -> Tensor[(9, 5, 13), float64] {
  %133 = fn (%var_7406: Tensor[(9, 5, 13), float64]) -> Tensor[(9, 5, 13), float64] {
    %132 = cast(%var_7406, dtype="float64") /* ty=Tensor[(9, 5, 13), float64] */;
    tan(%132) /* ty=Tensor[(9, 5, 13), float64] */
  };
  %133(%var_7413) /* ty=Tensor[(9, 5, 13), float64] */
}

def @func_14184() -> Tensor[(8, 16, 8), float64] {
  %134 = @func_11129() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(270), float32]) */;
  %134.0
}

def @func_17697() -> (Tensor[(315), float32], Tensor[(14, 5, 5), bool], Tensor[(350), bool]) {
  %141 = fn () -> (Tensor[(315), float32], Tensor[(14, 5, 5), bool], Tensor[(350), bool]) {
    %135 = cast(meta[relay.Constant][7] /* ty=Tensor[(350), bool] */, dtype="bool") /* ty=Tensor[(350), bool] */;
    %136 = cast(meta[relay.Constant][7] /* ty=Tensor[(350), bool] */, dtype="bool") /* ty=Tensor[(350), bool] */;
    %137 = reshape(%135, newshape=[14, 5, 5]) /* ty=Tensor[(14, 5, 5), bool] */;
    %138 = reshape(%136, newshape=[14, 5, 5]) /* ty=Tensor[(14, 5, 5), bool] */;
    %139 = @func_9849() /* ty=Tensor[(315), float32] */;
    %140 = @func_7951(%137, %138) /* ty=Tensor[(14, 5, 5), bool] */;
    (%139, %140, meta[relay.Constant][7] /* ty=Tensor[(350), bool] */)
  };
  %141() /* ty=(Tensor[(315), float32], Tensor[(14, 5, 5), bool], Tensor[(350), bool]) */
}

def @func_8350(%var_8348: Tensor[(8, 11, 3), float64]) -> (Tensor[(8, 11, 3), float64],) {
  @func_8347(%var_8348) /* ty=(Tensor[(8, 11, 3), float64],) */
}

def @func_11199(%var_11178: Tensor[(224), int64], %var_11179: uint32) -> (Tensor[(16, 15, 5), float32], Tensor[(224), int64], Tensor[(8, 16, 8), float32]) {
  %142 = cast(%var_11178, dtype="int64") /* ty=Tensor[(224), int64] */;
  %143 = cast(%var_11178, dtype="int64") /* ty=Tensor[(224), int64] */;
  %144 = cast(%var_11179, dtype="uint32") /* ty=uint32 */;
  %145 = reshape(%142, newshape=[7, 4, 8]) /* ty=Tensor[(7, 4, 8), int64] */;
  %146 = reshape(%143, newshape=[7, 4, 8]) /* ty=Tensor[(7, 4, 8), int64] */;
  %147 = reshape(%144, newshape=[]) /* ty=uint32 */;
  %148 = @func_1485(%145, %146, %147) /* ty=(Tensor[(7, 4, 8), int64], Tensor[(16, 15, 5), uint32], uint32, Tensor[(16, 15, 5), float32], Tensor[(16, 15, 5), float32]) */;
  %149 = @func_9447() /* ty=Tensor[(8, 16, 8), float64] */;
  %150 = cast(%149, dtype="float32") /* ty=Tensor[(8, 16, 8), float32] */;
  %151 = cast(%var_11179, dtype="float32") /* ty=float32 */;
  %152 = %148.4;
  %153 = power(%150, %151) /* ty=Tensor[(8, 16, 8), float32] */;
  (%152, %var_11178, %153)
}

def @func_17576(%var_17448: Tensor[(14, 4, 5), float64], %var_17449: Tensor[(14, 4, 5), float64], %var_17456: Tensor[(1350, 1), float32]) -> (Tensor[(8, 16, 8), float64], Tensor[(1350, 1), float32], Tensor[(392), uint64], uint64, Tensor[(14, 4, 5), float64], Tensor[(8, 16, 8), float32], Tensor[(6, 18), bool], Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], Tensor[(448), uint64], Tensor[(392), uint64], Tensor[(6, 1, 12), uint8], Tensor[(4, 16, 8), float64], Tensor[(16, 32), float64], Tensor[(84), bool], Tensor[(1, 84), bool], Tensor[(8, 16, 8), float64]) {
  %154 = cast(%var_17456, dtype="float32") /* ty=Tensor[(1350, 1), float32] */;
  %155 = cast(meta[relay.Constant][8] /* ty=Tensor[(392), uint64] */, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %156 = reshape(%154, newshape=[1350]) /* ty=Tensor[(1350), float32] */;
  %157 = reshape(%155, newshape=[392]) /* ty=Tensor[(392), uint64] */;
  %158 = @func_8742(%156, %157) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(1350), float32], Tensor[(8, 16, 8), float64], Tensor[(392), uint64]) */;
  %159 = @func_12096() /* ty=(Tensor[(448), uint64], Tensor[(8, 16, 8), float64], uint64, Tensor[(8, 1), float64], uint64, Tensor[(8, 16, 8), float64]) */;
  %160 = cast(%var_17449, dtype="float64") /* ty=Tensor[(14, 4, 5), float64] */;
  %161 = shape_of(%var_17448, dtype="int32") /* ty=Tensor[(3), int32] */;
  %162 = cast(%var_17448, dtype="float64") /* ty=Tensor[(14, 4, 5), float64] */;
  %163 = dyn.reshape(%160, %161, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %164 = divide(%162, %163) /* ty=Tensor[(14, 4, 5), float64] */;
  %165 = cast(%164, dtype="float64") /* ty=Tensor[(14, 4, 5), float64] */;
  %166 = %159.4;
  %167 = cast(%166, dtype="bool") /* ty=bool */;
  %168 = cast(meta[relay.Constant][9] /* ty=Tensor[(6, 18), bool] */, dtype="bool") /* ty=Tensor[(6, 18), bool] */;
  %169 = reshape(%167, newshape=[]) /* ty=bool */;
  %170 = reshape(%168, newshape=[108]) /* ty=Tensor[(108), bool] */;
  %171 = @func_16844(%169, %170) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(3, 4, 9), bool], bool, Tensor[(108), bool]) */;
  %172 = @func_16598() /* ty=(Tensor[(8, 16, 8), float32],) */;
  %173 = @func_15824() /* ty=(Tensor[(8, 16, 8), float32],) */;
  %174 = @func_16648() /* ty=(Tensor[(448), uint64], Tensor[(7, 3, 15), float32], Tensor[(8, 16, 8), float64]) */;
  %175 = cast(%var_17456, dtype="float32") /* ty=Tensor[(1350, 1), float32] */;
  %176 = reshape(%175, newshape=[9, 150]) /* ty=Tensor[(9, 150), float32] */;
  %177 = @func_10940(%176) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(7, 13, 6), uint64], Tensor[(546), bool], Tensor[(8, 16, 8), float64], Tensor[(9, 150), float32], Tensor[(392), uint64]) */;
  %178 = cast(%166, dtype="int32") /* ty=int32 */;
  %179 = reshape(%178, newshape=[]) /* ty=int32 */;
  %180 = @func_3958(%179) /* ty=(Tensor[(6, 1, 12), int32], Tensor[(6, 1, 12), uint8]) */;
  %181 = cast(meta[relay.Constant][10] /* ty=Tensor[(16, 32), float64] */, dtype="float64") /* ty=Tensor[(16, 32), float64] */;
  %182 = reshape(%181, newshape=[4, 16, 8]) /* ty=Tensor[(4, 16, 8), float64] */;
  %183 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 84), bool] */, dtype="bool") /* ty=Tensor[(1, 84), bool] */;
  %184 = reshape(%183, newshape=[84]) /* ty=Tensor[(84), bool] */;
  %185 = @func_10651(%184) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], Tensor[(8, 11, 3), float64], Tensor[(264), float64], Tensor[(16, 15, 5), float32], Tensor[(224), int64], uint32, Tensor[(8, 16, 8), float32], Tensor[(84), bool], Tensor[(315), float32]) */;
  %186 = @func_15798() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %187 = %158.0;
  %188 = acos(%165) /* ty=Tensor[(14, 4, 5), float64] */;
  %189 = %171.0;
  %190 = %172.0;
  %191 = %173.0;
  %192 = %174.0;
  %193 = %177.5;
  %194 = %180.1;
  %195 = @func_12787(%182) /* ty=Tensor[(4, 16, 8), float64] */;
  %196 = %185.8;
  %197 = %186.0;
  (%187, %var_17456, meta[relay.Constant][8] /* ty=Tensor[(392), uint64] */, %166, %188, %189, meta[relay.Constant][9] /* ty=Tensor[(6, 18), bool] */, %190, %191, %192, %193, %194, %195, meta[relay.Constant][10] /* ty=Tensor[(16, 32), float64] */, %196, meta[relay.Constant][11] /* ty=Tensor[(1, 84), bool] */, %197)
}

def @func_13174(%var_13171: int32) -> (Tensor[(8, 16, 8), float32], Tensor[(6, 1, 12), int32], int32) {
  %198 = @func_11818() /* ty=(Tensor[(8, 16, 8), float32],) */;
  %199 = cast(%var_13171, dtype="int32") /* ty=int32 */;
  %200 = reshape(%199, newshape=[]) /* ty=int32 */;
  %201 = @func_3958(%200) /* ty=(Tensor[(6, 1, 12), int32], Tensor[(6, 1, 12), uint8]) */;
  %202 = %198.0;
  %203 = %201.0;
  (%202, %203, %var_13171)
}

def @func_14997() -> (Tensor[(270), float32], Tensor[(8, 16, 8), float64], Tensor[(6, 1, 12), int32], int32) {
  %212 = fn () -> (Tensor[(270), float32], Tensor[(8, 16, 8), float64], Tensor[(6, 1, 12), int32], int32) {
    %204 = @func_11129() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(270), float32]) */;
    %205 = @func_10876() /* ty=(Tensor[(8, 16, 8), float64],) */;
    %206 = cast(8 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %207 = reshape(%206, newshape=[]) /* ty=int32 */;
    %208 = @func_3958(%207) /* ty=(Tensor[(6, 1, 12), int32], Tensor[(6, 1, 12), uint8]) */;
    %209 = %204.2;
    %210 = %205.0;
    %211 = %208.0;
    (%209, %210, %211, 8 /* ty=int32 */)
  };
  %212() /* ty=(Tensor[(270), float32], Tensor[(8, 16, 8), float64], Tensor[(6, 1, 12), int32], int32) */
}

def @func_18411() -> Tensor[(8, 16, 8), float32] {
  @func_18409() /* ty=Tensor[(8, 16, 8), float32] */
}

def @func_12567() -> (Tensor[(315), float32], Tensor[(8, 16, 8), uint32], uint64) {
  @func_12565() /* ty=(Tensor[(315), float32], Tensor[(8, 16, 8), uint32], uint64) */
}

def @func_7915() -> Tensor[(8, 16, 8), float64] {
  %213 = @func_7714() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %213.0
}

def @func_11746() -> (Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], Tensor[(7, 3, 15), float32]) {
  @func_11744() /* ty=(Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], Tensor[(7, 3, 15), float32]) */
}

def @func_18471(%var_18456: bool) -> (Tensor[(8, 16, 8), float32], Tensor[(3, 4, 9), bool], bool, Tensor[(108), bool]) {
  %214 = cast(%var_18456, dtype="bool") /* ty=bool */;
  %215 = cast(meta[relay.Constant][12] /* ty=Tensor[(108), bool] */, dtype="bool") /* ty=Tensor[(108), bool] */;
  %216 = reshape(%214, newshape=[]) /* ty=bool */;
  %217 = reshape(%215, newshape=[3, 4, 9]) /* ty=Tensor[(3, 4, 9), bool] */;
  %218 = @func_8769(%216, %217) /* ty=(Tensor[(3, 4, 9), bool],) */;
  %219 = @func_18409() /* ty=Tensor[(8, 16, 8), float32] */;
  %220 = %218.0;
  (%219, %220, %var_18456, meta[relay.Constant][12] /* ty=Tensor[(108), bool] */)
}

def @func_2099(%var_2097: uint64, %var_2098: Tensor[(7, 4, 16), uint64]) -> Tensor[(7, 4, 16), bool] {
  %223 = fn (%var_2091: uint64, %var_2092: Tensor[(7, 4, 16), uint64]) -> Tensor[(7, 4, 16), bool] {
    %221 = cast(%var_2091, dtype="bool") /* ty=bool */;
    %222 = cast(%var_2092, dtype="bool") /* ty=Tensor[(7, 4, 16), bool] */;
    equal(%221, %222) /* ty=Tensor[(7, 4, 16), bool] */
  };
  %223(%var_2097, %var_2098) /* ty=Tensor[(7, 4, 16), bool] */
}

def @func_554(%var_552: uint32) -> (Tensor[(16, 15, 5), uint32], Tensor[(16, 15, 5), float32], Tensor[(16, 15, 5), float32]) {
  @func_551(%var_552) /* ty=(Tensor[(16, 15, 5), uint32], Tensor[(16, 15, 5), float32], Tensor[(16, 15, 5), float32]) */
}

def @func_9401() -> Tensor[(8, 16, 8), float64] {
  @func_9399() /* ty=Tensor[(8, 16, 8), float64] */
}

def @func_17251() -> (Tensor[(8, 16, 8), float64],) {
  %224 = @func_16189() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %225 = %224.0;
  (%225,)
}

def @func_9380() -> Tensor[(8, 16, 8), float32] {
  %226 = @func_8173() /* ty=(Tensor[(8, 16, 8), float32],) */;
  %226.0
}

def @func_8175() -> (Tensor[(8, 16, 8), float32],) {
  @func_8173() /* ty=(Tensor[(8, 16, 8), float32],) */
}

def @func_8637(%var_8635: Tensor[(392), uint64]) -> (Tensor[(14, 15, 14), float64], Tensor[(7, 4, 16), bool], uint64, Tensor[(448), uint64], Tensor[(8, 16, 8), float64], Tensor[(392), uint64], Tensor[(14, 15, 14), float64]) {
  @func_8634(%var_8635) /* ty=(Tensor[(14, 15, 14), float64], Tensor[(7, 4, 16), bool], uint64, Tensor[(448), uint64], Tensor[(8, 16, 8), float64], Tensor[(392), uint64], Tensor[(14, 15, 14), float64]) */
}

def @func_16944() -> (Tensor[(8, 16, 8), float32],) {
  @func_16942() /* ty=(Tensor[(8, 16, 8), float32],) */
}

def @func_8769(%var_8762: bool, %var_8763: Tensor[(3, 4, 9), bool]) -> (Tensor[(3, 4, 9), bool],) {
  %227 = cast(%var_8762, dtype="bool") /* ty=bool */;
  %228 = cast(%var_8763, dtype="bool") /* ty=Tensor[(3, 4, 9), bool] */;
  %229 = logical_and(%227, %228) /* ty=Tensor[(3, 4, 9), bool] */;
  (%229,)
}

def @func_17754() -> (Tensor[(8, 16, 8), float32],) {
  %232 = fn () -> (Tensor[(8, 16, 8), float32],) {
    %230 = @func_16942() /* ty=(Tensor[(8, 16, 8), float32],) */;
    %231 = %230.0;
    (%231,)
  };
  %232() /* ty=(Tensor[(8, 16, 8), float32],) */
}

def @func_16942() -> (Tensor[(8, 16, 8), float32],) {
  %233 = @func_8028() /* ty=Tensor[(8, 16, 8), float32] */;
  %234 = cast(%233, dtype="float32") /* ty=Tensor[(8, 16, 8), float32] */;
  %235 = sin(%234) /* ty=Tensor[(8, 16, 8), float32] */;
  (%235,)
}

def @func_12944(%var_12943: uint64) -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(7, 4, 16), bool], uint64, Tensor[(448), uint64], Tensor[(8, 16, 8), float64]) {
  %246 = fn (%var_12893: uint64) -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(7, 4, 16), bool], uint64, Tensor[(448), uint64], Tensor[(8, 16, 8), float64]) {
    %236 = @func_11440() /* ty=(Tensor[(8, 16, 8), float64],) */;
    %237 = cast(%var_12893, dtype="uint64") /* ty=uint64 */;
    %238 = cast(meta[relay.Constant][13] /* ty=Tensor[(448), uint64] */, dtype="uint64") /* ty=Tensor[(448), uint64] */;
    %239 = reshape(%237, newshape=[]) /* ty=uint64 */;
    %240 = reshape(%238, newshape=[7, 4, 16]) /* ty=Tensor[(7, 4, 16), uint64] */;
    %241 = @func_8606() /* ty=(Tensor[(8, 16, 8), float64],) */;
    %242 = @func_10300() /* ty=Tensor[(8, 16, 8), float64] */;
    %243 = %236.0;
    %244 = @func_2096(%239, %240) /* ty=Tensor[(7, 4, 16), bool] */;
    %245 = %241.0;
    (%242, %243, %244, %var_12893, meta[relay.Constant][13] /* ty=Tensor[(448), uint64] */, %245)
  };
  %246(%var_12943) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(7, 4, 16), bool], uint64, Tensor[(448), uint64], Tensor[(8, 16, 8), float64]) */
}

def @func_17395() -> (Tensor[(8, 1), float64], Tensor[(8, 16, 8), float64]) {
  @func_17393() /* ty=(Tensor[(8, 1), float64], Tensor[(8, 16, 8), float64]) */
}

def @func_17253() -> (Tensor[(8, 16, 8), float64],) {
  @func_17251() /* ty=(Tensor[(8, 16, 8), float64],) */
}

def @func_12098() -> (Tensor[(448), uint64], Tensor[(8, 16, 8), float64], uint64, Tensor[(8, 1), float64], uint64, Tensor[(8, 16, 8), float64]) {
  @func_12096() /* ty=(Tensor[(448), uint64], Tensor[(8, 16, 8), float64], uint64, Tensor[(8, 1), float64], uint64, Tensor[(8, 16, 8), float64]) */
}

def @func_14872(%var_14870: Tensor[(2250), float32]) -> (Tensor[(8, 16, 8), float32], Tensor[(2250), float32], Tensor[(270), float32], Tensor[(14, ?, 2), bool], Tensor[(28), int16], Tensor[(8, 16, 8), float64], Tensor[(270), float64], Tensor[(770, 3), float64], Tensor[(490), float64]) {
  @func_14869(%var_14870) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(2250), float32], Tensor[(270), float32], Tensor[(14, ?, 2), bool], Tensor[(28), int16], Tensor[(8, 16, 8), float64], Tensor[(270), float64], Tensor[(770, 3), float64], Tensor[(490), float64]) */
}

def @func_18721() -> (Tensor[(8, 16, 8), float32], Tensor[(448), uint64], Tensor[(8, 16, 8), float32], Tensor[(512), float64], Tensor[(512), float64]) {
  %257 = fn () -> (Tensor[(8, 16, 8), float32], Tensor[(448), uint64], Tensor[(8, 16, 8), float32], Tensor[(512), float64], Tensor[(512), float64]) {
    %247 = @func_12730() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32]) */;
    %248 = @func_16823() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(7, 4, 16), bool], Tensor[(448), uint64]) */;
    %249 = @func_15771() /* ty=(Tensor[(8, 16, 8), float32],) */;
    %250 = cast(meta[relay.Constant][14] /* ty=Tensor[(512), float64] */, dtype="float64") /* ty=Tensor[(512), float64] */;
    %251 = reshape(%250, newshape=[512]) /* ty=Tensor[(512), float64] */;
    %252 = @func_15709(%251) /* ty=(Tensor[(8, 16, 8), int64], Tensor[(8, 1), float64], Tensor[(9, 7, 10), float64], float64, Tensor[(512), float64], Tensor[(392), uint64], Tensor[(14, 15, 14), float64], Tensor[(8, 16, 8), float64], Tensor[(9, 5, 13), float64], Tensor[(5, 117), float64]) */;
    %253 = %247.3;
    %254 = %248.2;
    %255 = %249.0;
    %256 = %252.4;
    (%253, %254, %255, %256, meta[relay.Constant][14] /* ty=Tensor[(512), float64] */)
  };
  %257() /* ty=(Tensor[(8, 16, 8), float32], Tensor[(448), uint64], Tensor[(8, 16, 8), float32], Tensor[(512), float64], Tensor[(512), float64]) */
}

def @func_17981(%var_17979: Tensor[(4, 13, 12), float32], %var_17980: Tensor[(4, 13, 12), float32]) -> (Tensor[(4, 13, 12), float32], Tensor[(448), uint64]) {
  %265 = fn (%var_17931: Tensor[(4, 13, 12), float32], %var_17932: Tensor[(4, 13, 12), float32]) -> (Tensor[(4, 13, 12), float32], Tensor[(448), uint64]) {
    %258 = cast(%var_17932, dtype="float32") /* ty=Tensor[(4, 13, 12), float32] */;
    %259 = shape_of(%var_17931, dtype="int32") /* ty=Tensor[(3), int32] */;
    %260 = cast(%var_17931, dtype="float32") /* ty=Tensor[(4, 13, 12), float32] */;
    %261 = dyn.reshape(%258, %259, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %262 = @func_12096() /* ty=(Tensor[(448), uint64], Tensor[(8, 16, 8), float64], uint64, Tensor[(8, 1), float64], uint64, Tensor[(8, 16, 8), float64]) */;
    %263 = mod(%260, %261) /* ty=Tensor[(4, 13, 12), float32] */;
    %264 = %262.0;
    (%263, %264)
  };
  %265(%var_17979, %var_17980) /* ty=(Tensor[(4, 13, 12), float32], Tensor[(448), uint64]) */
}

def @func_8424() -> (Tensor[(8, 16, 8), float32], Tensor[(3, 6, 7), float32], Tensor[(3), float32], Tensor[(126), float32]) {
  %266 = cast(meta[relay.Constant][15] /* ty=Tensor[(3), float32] */, dtype="float32") /* ty=Tensor[(3), float32] */;
  %267 = cast(meta[relay.Constant][16] /* ty=Tensor[(126), float32] */, dtype="float32") /* ty=Tensor[(126), float32] */;
  %268 = reshape(%266, newshape=[3, 1, 1]) /* ty=Tensor[(3, 1, 1), float32] */;
  %269 = reshape(%267, newshape=[3, 6, 7]) /* ty=Tensor[(3, 6, 7), float32] */;
  %270 = @func_8028() /* ty=Tensor[(8, 16, 8), float32] */;
  %271 = @func_7314(%268, %269) /* ty=Tensor[(3, 6, 7), float32] */;
  (%270, %271, meta[relay.Constant][15] /* ty=Tensor[(3), float32] */, meta[relay.Constant][16] /* ty=Tensor[(126), float32] */)
}

def @func_15825() -> (Tensor[(8, 16, 8), float32],) {
  %273 = fn () -> (Tensor[(8, 16, 8), float32],) {
    %272 = @func_9254() /* ty=Tensor[(8, 16, 8), float32] */;
    (%272,)
  };
  %273() /* ty=(Tensor[(8, 16, 8), float32],) */
}

def @func_11968(%var_11962: Tensor[(2940), float64]) -> (Tensor[(8, 16, 8), float64], Tensor[(3, 4, 13), int32], Tensor[(2940), bool], Tensor[(14, 15, 14), float64]) {
  %274 = cast(meta[relay.Constant][17] /* ty=Tensor[(2940), float64] */, dtype="float64") /* ty=Tensor[(2940), float64] */;
  %275 = reshape(%274, newshape=[2940]) /* ty=Tensor[(2940), float64] */;
  %276 = @func_6512(%275) /* ty=(Tensor[(3, 4, 13), int32], Tensor[(14, 15, 14), float64], Tensor[(2940), float64], Tensor[(14, 15, 14), float64]) */;
  %277 = cast(%var_11962, dtype="bool") /* ty=Tensor[(2940), bool] */;
  %278 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(2940), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %279 = cast(meta[relay.Constant][17] /* ty=Tensor[(2940), float64] */, dtype="bool") /* ty=Tensor[(2940), bool] */;
  %280 = dyn.reshape(%277, %278, newshape=[]) /* ty=Tensor[(?), bool] */;
  %281 = cast(%var_11962, dtype="float64") /* ty=Tensor[(2940), float64] */;
  %282 = reshape(%281, newshape=[14, 15, 14]) /* ty=Tensor[(14, 15, 14), float64] */;
  %283 = @func_9830() /* ty=Tensor[(8, 16, 8), float64] */;
  %284 = %276.0;
  %285 = less(%279, %280) /* ty=Tensor[(2940), bool] */;
  %286 = @func_2534(%282) /* ty=Tensor[(14, 15, 14), float64] */;
  (%283, %284, %285, %286)
}

def @func_11548() -> Tensor[(8, 16, 8), float32] {
  @func_11546() /* ty=Tensor[(8, 16, 8), float32] */
}

def @func_4322(%var_4320: int64, %var_4321: Tensor[(8, 1, 5), int64]) -> (Tensor[(8, 1, 5), int64], Tensor[(7, 13, 6), uint64], Tensor[(546), bool]) {
  %296 = fn (%var_4304: int64, %var_4305: Tensor[(8, 1, 5), int64]) -> (Tensor[(8, 1, 5), int64], Tensor[(7, 13, 6), uint64], Tensor[(546), bool]) {
    %287 = cast(%var_4304, dtype="int64") /* ty=int64 */;
    %288 = cast(%var_4305, dtype="int64") /* ty=Tensor[(8, 1, 5), int64] */;
    %289 = cast(meta[relay.Constant][18] /* ty=Tensor[(546), bool] */, dtype="bool") /* ty=Tensor[(546), bool] */;
    %290 = cast(meta[relay.Constant][18] /* ty=Tensor[(546), bool] */, dtype="bool") /* ty=Tensor[(546), bool] */;
    %291 = reshape(%289, newshape=[7, 13, 6]) /* ty=Tensor[(7, 13, 6), bool] */;
    %292 = reshape(%290, newshape=[7, 13, 6]) /* ty=Tensor[(7, 13, 6), bool] */;
    %293 = @func_4270(%291, %292) /* ty=(Tensor[(7, 13, 6), uint64],) */;
    %294 = minimum(%287, %288) /* ty=Tensor[(8, 1, 5), int64] */;
    %295 = %293.0;
    (%294, %295, meta[relay.Constant][18] /* ty=Tensor[(546), bool] */)
  };
  %296(%var_4320, %var_4321) /* ty=(Tensor[(8, 1, 5), int64], Tensor[(7, 13, 6), uint64], Tensor[(546), bool]) */
}

def @func_9577() -> (Tensor[(8, 16, 8), float64],) {
  %297 = @func_7783() /* ty=Tensor[(8, 16, 8), float64] */;
  (%297,)
}

def @func_14667(%var_14666: Tensor[(270), float64]) -> (Tensor[(16, 10, 7), bool], Tensor[(8, 16, 8), float64], Tensor[(495, 1), float32], Tensor[(270), float64]) {
  %306 = fn (%var_14655: Tensor[(270), float64]) -> (Tensor[(16, 10, 7), bool], Tensor[(8, 16, 8), float64], Tensor[(495, 1), float32], Tensor[(270), float64]) {
    %298 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 10, 7), bool] */, dtype="bool") /* ty=Tensor[(1, 10, 7), bool] */;
    %299 = cast(meta[relay.Constant][20] /* ty=Tensor[(16, 10, 7), bool] */, dtype="bool") /* ty=Tensor[(16, 10, 7), bool] */;
    %300 = cast(%var_14655, dtype="float64") /* ty=Tensor[(270), float64] */;
    %301 = reshape(%300, newshape=[9, 5, 6]) /* ty=Tensor[(9, 5, 6), float64] */;
    %302 = @func_14035(%301) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(270), float32], Tensor[(8, 16, 8), float64], Tensor[(15, 3, 11), float32], Tensor[(495, 1), float32], Tensor[(9, 5, 6), bool]) */;
    %303 = logical_and(%298, %299) /* ty=Tensor[(16, 10, 7), bool] */;
    %304 = @func_14184() /* ty=Tensor[(8, 16, 8), float64] */;
    %305 = %302.4;
    (%303, %304, %305, %var_14655)
  };
  %306(%var_14666) /* ty=(Tensor[(16, 10, 7), bool], Tensor[(8, 16, 8), float64], Tensor[(495, 1), float32], Tensor[(270), float64]) */
}

def @func_10741(%var_10739: Tensor[(224), int64]) -> (Tensor[(8, 16, 8), float64], Tensor[(350), int64], uint32, Tensor[(224), int64], uint32) {
  @func_10738(%var_10739) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(350), int64], uint32, Tensor[(224), int64], uint32) */
}

def @func_14153() -> (Tensor[(8, 16, 8), float32], Tensor[(14, 15, 14), float64], Tensor[(8, 16, 8), int64]) {
  %312 = fn () -> (Tensor[(8, 16, 8), float32], Tensor[(14, 15, 14), float64], Tensor[(8, 16, 8), int64]) {
    %307 = @func_12988() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64], Tensor[(3), float32]) */;
    %308 = @func_9744() /* ty=(Tensor[(8, 16, 8), float32], Tensor[(315), float32], Tensor[(7, 3, 15), float32], Tensor[(8, 16, 8), int64]) */;
    %309 = @func_9254() /* ty=Tensor[(8, 16, 8), float32] */;
    %310 = %307.1;
    %311 = %308.3;
    (%309, %310, %311)
  };
  %312() /* ty=(Tensor[(8, 16, 8), float32], Tensor[(14, 15, 14), float64], Tensor[(8, 16, 8), int64]) */
}

def @func_15288(%var_15272: Tensor[(448), uint64]) -> (Tensor[(8, 1), float64], Tensor[(2, 1, 4), float64], uint64, Tensor[(448), uint64], Tensor[(9, 5, 6), bool], Tensor[(270), float64]) {
  %313 = @func_13553() /* ty=(Tensor[(8, 1), float64],) */;
  %314 = %313.0;
  %315 = cast(%314, dtype="float64") /* ty=Tensor[(8, 1), float64] */;
  %316 = cast(meta[relay.Constant][21] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %317 = cast(%var_15272, dtype="uint64") /* ty=Tensor[(448), uint64] */;
  %318 = reshape(%315, newshape=[2, 1, 4]) /* ty=Tensor[(2, 1, 4), float64] */;
  %319 = reshape(%316, newshape=[]) /* ty=uint64 */;
  %320 = reshape(%317, newshape=[448]) /* ty=Tensor[(448), uint64] */;
  %321 = @func_4427(%318, %319, %320) /* ty=(Tensor[(2, 1, 4), float64], Tensor[(7, 4, 16), bool], uint64, Tensor[(448), uint64]) */;
  %322 = cast(meta[relay.Constant][22] /* ty=Tensor[(270), float64] */, dtype="float64") /* ty=Tensor[(270), float64] */;
  %323 = reshape(%322, newshape=[9, 5, 6]) /* ty=Tensor[(9, 5, 6), float64] */;
  %324 = @func_14035(%323) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(270), float32], Tensor[(8, 16, 8), float64], Tensor[(15, 3, 11), float32], Tensor[(495, 1), float32], Tensor[(9, 5, 6), bool]) */;
  %325 = %321.0;
  %326 = %324.5;
  (%314, %325, meta[relay.Constant][21] /* ty=uint64 */, %var_15272, %326, meta[relay.Constant][22] /* ty=Tensor[(270), float64] */)
}

def @func_11503(%var_11502: Tensor[(15, 3, 11), float32]) -> Tensor[(15, 3, 11), float32] {
  %328 = fn (%var_11487: Tensor[(15, 3, 11), float32]) -> Tensor[(15, 3, 11), float32] {
    %327 = cast(%var_11487, dtype="float32") /* ty=Tensor[(15, 3, 11), float32] */;
    atan(%327) /* ty=Tensor[(15, 3, 11), float32] */
  };
  %328(%var_11502) /* ty=Tensor[(15, 3, 11), float32] */
}

def @func_17721(%var_17719: Tensor[(14, 15, 14), float64]) -> (Tensor[(14, 15, 14), float32],) {
  @func_17718(%var_17719) /* ty=(Tensor[(14, 15, 14), float32],) */
}

def @func_7955(%var_7953: Tensor[(14, 5, 5), bool], %var_7954: Tensor[(14, 5, 5), bool]) -> Tensor[(14, 5, 5), bool] {
  @func_7951(%var_7953, %var_7954) /* ty=Tensor[(14, 5, 5), bool] */
}

def @func_13177(%var_13175: int32) -> (Tensor[(8, 16, 8), float32], Tensor[(6, 1, 12), int32], int32) {
  @func_13174(%var_13175) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(6, 1, 12), int32], int32) */
}

def @func_13258() -> Tensor[(8, 16, 8), float32] {
  @func_11546() /* ty=Tensor[(8, 16, 8), float32] */
}

def @func_14326() -> Tensor[(8, 16, 8), float32] {
  %329 = @func_13482() /* ty=(Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float64]) */;
  %329.0
}

def @func_16330() -> (Tensor[(7, 3, 15), float32], Tensor[(8, 16, 8), float64]) {
  %330 = @func_9744() /* ty=(Tensor[(8, 16, 8), float32], Tensor[(315), float32], Tensor[(7, 3, 15), float32], Tensor[(8, 16, 8), int64]) */;
  %331 = @func_14539() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(2940), int16]) */;
  %332 = %330.2;
  %333 = %331.0;
  (%332, %333)
}

def @func_15636() -> (Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32]) {
  %338 = fn () -> (Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32]) {
    %334 = @func_7874() /* ty=(Tensor[(8, 16, 8), float32],) */;
    %335 = @func_14427() /* ty=(Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], Tensor[(350), int64], Tensor[(224), int64]) */;
    %336 = %334.0;
    %337 = %335.0;
    (%336, %337)
  };
  %338() /* ty=(Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32]) */
}

def @func_17208(%var_17198: Tensor[(15, 150), float32]) -> (Tensor[(8, 16, 8), float32], Tensor[(2250), float32], Tensor[(15, 150), float32]) {
  %339 = cast(%var_17198, dtype="float32") /* ty=Tensor[(15, 150), float32] */;
  %340 = reshape(%339, newshape=[2250]) /* ty=Tensor[(2250), float32] */;
  %341 = @func_16546(%340) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(16, 15, 5), float32], Tensor[(10, 3), float64], Tensor[(2250), float32]) */;
  %342 = @func_15398() /* ty=Tensor[(8, 16, 8), float32] */;
  %343 = %341.3;
  (%342, %343, %var_17198)
}

def @func_17307() -> Tensor[(8, 1), float64] {
  @func_15306() /* ty=Tensor[(8, 1), float64] */
}

def @func_12565() -> (Tensor[(315), float32], Tensor[(8, 16, 8), uint32], uint64) {
  %344 = @func_9399() /* ty=Tensor[(8, 16, 8), float64] */;
  %345 = cast(meta[relay.Constant][23] /* ty=Tensor[(8, 16, 8), float64] */, dtype="uint32") /* ty=Tensor[(8, 16, 8), uint32] */;
  %346 = shape_of(%344, dtype="int32") /* ty=Tensor[(3), int32] */;
  %347 = cast(%344, dtype="uint32") /* ty=Tensor[(8, 16, 8), uint32] */;
  %348 = dyn.reshape(%345, %346, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %349 = @func_12096() /* ty=(Tensor[(448), uint64], Tensor[(8, 16, 8), float64], uint64, Tensor[(8, 1), float64], uint64, Tensor[(8, 16, 8), float64]) */;
  %350 = @func_9849() /* ty=Tensor[(315), float32] */;
  %351 = left_shift(%347, %348) /* ty=Tensor[(8, 16, 8), uint32] */;
  %352 = %349.2;
  (%350, %351, %352)
}

def @func_13007() -> Tensor[(8, 16, 8), float32] {
  %354 = fn () -> Tensor[(8, 16, 8), float32] {
    %353 = @func_11583() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32]) */;
    %353.1
  };
  %354() /* ty=Tensor[(8, 16, 8), float32] */
}

def @func_10876() -> (Tensor[(8, 16, 8), float64],) {
  %355 = @func_9577() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %356 = %355.0;
  (%356,)
}

def @func_13829() -> (Tensor[(8, 16, 8), float32],) {
  %358 = fn () -> (Tensor[(8, 16, 8), float32],) {
    %357 = @func_9254() /* ty=Tensor[(8, 16, 8), float32] */;
    (%357,)
  };
  %358() /* ty=(Tensor[(8, 16, 8), float32],) */
}

def @func_18800() -> Tensor[(14, 15, 14), float64] {
  %359 = fn () -> Tensor[(14, 15, 14), float64] {
    @func_15571() /* ty=Tensor[(14, 15, 14), float64] */
  };
  %359() /* ty=Tensor[(14, 15, 14), float64] */
}

def @func_9983() -> Tensor[(8, 16, 8), float32] {
  @func_9013() /* ty=Tensor[(8, 16, 8), float32] */
}

def @func_16650() -> (Tensor[(448), uint64], Tensor[(7, 3, 15), float32], Tensor[(8, 16, 8), float64]) {
  @func_16648() /* ty=(Tensor[(448), uint64], Tensor[(7, 3, 15), float32], Tensor[(8, 16, 8), float64]) */
}

def @func_13431(%var_13427: Tensor[(416), int8], %var_13428: Tensor[(9, 5, 6), float64], %var_13429: Tensor[(630), float64], %var_13430: Tensor[(270, 14), bool]) -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(7, 13, 6), uint64], Tensor[(270, 416), bool], Tensor[(8, 16, 8), float64], Tensor[(9, 5, 6), uint32], Tensor[(270, ?), float64], Tensor[(8, 16, 8), float32], Tensor[(9, 7, 10), float64], Tensor[(630), float64], Tensor[(270, 14), uint16]) {
  %401 = fn (%var_13339: Tensor[(416), int8], %var_13373: Tensor[(9, 5, 6), float64], %var_13415: Tensor[(630), float64], %var_13418: Tensor[(270, 14), bool]) -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(7, 13, 6), uint64], Tensor[(270, 416), bool], Tensor[(8, 16, 8), float64], Tensor[(9, 5, 6), uint32], Tensor[(270, ?), float64], Tensor[(8, 16, 8), float32], Tensor[(9, 7, 10), float64], Tensor[(630), float64], Tensor[(270, 14), uint16]) {
    %360 = @func_11583() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32]) */;
    %361 = @func_13022() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64]) */;
    %362 = cast(%var_13339, dtype="int8") /* ty=Tensor[(416), int8] */;
    %363 = reshape(%362, newshape=[16, 13, 2]) /* ty=Tensor[(16, 13, 2), int8] */;
    %364 = @func_7107(%363) /* ty=(Tensor[(6, 1, 12), int32], Tensor[(16, 13, 2), bool], Tensor[(7, 13, 6), uint64], Tensor[(546), bool]) */;
    %365 = cast(%var_13339, dtype="bool") /* ty=Tensor[(416), bool] */;
    %366 = cast(meta[relay.Constant][24] /* ty=Tensor[(270, 1), float32] */, dtype="bool") /* ty=Tensor[(270, 1), bool] */;
    %367 = cast(meta[relay.Constant][24] /* ty=Tensor[(270, 1), float32] */, dtype="float32") /* ty=Tensor[(270, 1), float32] */;
    %368 = reshape(%367, newshape=[9, 5, 6]) /* ty=Tensor[(9, 5, 6), float32] */;
    %369 = @func_652(%368) /* ty=(Tensor[(9, 5, 6), float64],) */;
    %370 = %369.0;
    %371 = cast(%var_13373, dtype="uint32") /* ty=Tensor[(9, 5, 6), uint32] */;
    %372 = shape_of(%370, dtype="int32") /* ty=Tensor[(3), int32] */;
    %373 = cast(%370, dtype="uint32") /* ty=Tensor[(9, 5, 6), uint32] */;
    %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %375 = cast(meta[relay.Constant][24] /* ty=Tensor[(270, 1), float32] */, dtype="float64") /* ty=Tensor[(270, 1), float64] */;
    %376 = log(%375) /* ty=Tensor[(270, 1), float64] */;
    %377 = cast(meta[relay.Constant][24] /* ty=Tensor[(270, 1), float32] */, dtype="float64") /* ty=Tensor[(270, 1), float64] */;
    %378 = shape_of(%376, dtype="int32") /* ty=Tensor[(2), int32] */;
    %379 = cast(%376, dtype="float64") /* ty=Tensor[(270, 1), float64] */;
    %380 = dyn.reshape(%377, %378, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %381 = cast(%var_13415, dtype="float64") /* ty=Tensor[(630), float64] */;
    %382 = reshape(%381, newshape=[9, 7, 10]) /* ty=Tensor[(9, 7, 10), float64] */;
    %383 = @func_3445(%382) /* ty=(Tensor[(9, 7, 10), float64],) */;
    %384 = cast(%370, dtype="bool") /* ty=Tensor[(9, 5, 6), bool] */;
    %385 = shape_of(%376, dtype="int32") /* ty=Tensor[(2), int32] */;
    %386 = cast(%376, dtype="bool") /* ty=Tensor[(270, 1), bool] */;
    %387 = dyn.reshape(%384, %385, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %388 = greater_equal(%386, %387) /* ty=Tensor[(270, ?), bool] */;
    %389 = cast(%388, dtype="uint16") /* ty=Tensor[(270, ?), uint16] */;
    %390 = cast(%var_13418, dtype="uint16") /* ty=Tensor[(270, 14), uint16] */;
    %391 = %360.0;
    %392 = %361.1;
    %393 = %364.2;
    %394 = logical_and(%365, %366) /* ty=Tensor[(270, 416), bool] */;
    %395 = @func_9492() /* ty=Tensor[(8, 16, 8), float64] */;
    %396 = subtract(%373, %374) /* ty=Tensor[(9, 5, 6), uint32] */;
    %397 = minimum(%379, %380) /* ty=Tensor[(270, ?), float64] */;
    %398 = @func_8028() /* ty=Tensor[(8, 16, 8), float32] */;
    %399 = %383.0;
    %400 = logical_xor(%389, %390) /* ty=Tensor[(270, 14), uint16] */;
    (%391, %392, %393, %394, %395, %396, %397, %398, %399, %var_13415, %400)
  };
  %401(%var_13427, %var_13428, %var_13429, %var_13430) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(7, 13, 6), uint64], Tensor[(270, 416), bool], Tensor[(8, 16, 8), float64], Tensor[(9, 5, 6), uint32], Tensor[(270, ?), float64], Tensor[(8, 16, 8), float32], Tensor[(9, 7, 10), float64], Tensor[(630), float64], Tensor[(270, 14), uint16]) */
}

def @func_7896(%var_7888: Tensor[(56, 8), uint64]) -> (Tensor[(8, 16, 8), float64], Tensor[(7, 4, 16), bool], uint64, Tensor[(56, 8), uint64]) {
  %402 = @func_7714() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %403 = cast(meta[relay.Constant][25] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %404 = cast(%var_7888, dtype="uint64") /* ty=Tensor[(56, 8), uint64] */;
  %405 = reshape(%403, newshape=[]) /* ty=uint64 */;
  %406 = reshape(%404, newshape=[7, 4, 16]) /* ty=Tensor[(7, 4, 16), uint64] */;
  %407 = %402.0;
  %408 = @func_2096(%405, %406) /* ty=Tensor[(7, 4, 16), bool] */;
  (%407, %408, meta[relay.Constant][25] /* ty=uint64 */, %var_7888)
}

def @func_12573() -> (Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float64]) {
  %409 = @func_8606() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %410 = @func_9254() /* ty=Tensor[(8, 16, 8), float32] */;
  %411 = %409.0;
  (%410, %411)
}

def @func_9514() -> (Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64], Tensor[(392), uint64]) {
  %412 = @func_8606() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %413 = cast(meta[relay.Constant][26] /* ty=Tensor[(392), uint64] */, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %414 = reshape(%413, newshape=[392]) /* ty=Tensor[(392), uint64] */;
  %415 = @func_8634(%414) /* ty=(Tensor[(14, 15, 14), float64], Tensor[(7, 4, 16), bool], uint64, Tensor[(448), uint64], Tensor[(8, 16, 8), float64], Tensor[(392), uint64], Tensor[(14, 15, 14), float64]) */;
  %416 = %412.0;
  %417 = %415.0;
  (%416, %417, meta[relay.Constant][26] /* ty=Tensor[(392), uint64] */)
}

def @func_8593(%var_8591: Tensor[(1, 11), uint16], %var_8592: Tensor[(3, 88), float64]) -> (Tensor[(8, 16, 8), float32], Tensor[(7, 78), bool], Tensor[(624), int64], Tensor[(2250), uint16], Tensor[(1, 11), uint16], Tensor[(8, 11, 3), float64], Tensor[(3, 88), float64]) {
  @func_8589(%var_8591, %var_8592) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(7, 78), bool], Tensor[(624), int64], Tensor[(2250), uint16], Tensor[(1, 11), uint16], Tensor[(8, 11, 3), float64], Tensor[(3, 88), float64]) */
}

def @func_7632(%var_7630: Tensor[(4, 7, 14), uint64]) -> (Tensor[(4, 7, 14), bool], Tensor[(9, 7, 10), float64], Tensor[(630), float64], Tensor[(7, 13, 6), uint64], Tensor[(546), bool], Tensor[(4, 7, 14), uint16], Tensor[(4, 7, 14), float64]) {
  @func_7629(%var_7630) /* ty=(Tensor[(4, 7, 14), bool], Tensor[(9, 7, 10), float64], Tensor[(630), float64], Tensor[(7, 13, 6), uint64], Tensor[(546), bool], Tensor[(4, 7, 14), uint16], Tensor[(4, 7, 14), float64]) */
}

def @func_11792(%var_11753: Tensor[(8, 16, 8), float64], %var_11789: Tensor[(585), float64]) -> (Tensor[(8, 16, 8), uint16], Tensor[(7, 3, 15), float32], Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(9, 5, 13), float64], Tensor[(585), float64]) {
  %418 = @func_9795() /* ty=Tensor[(8, 16, 8), float64] */;
  %419 = cast(%var_11753, dtype="uint16") /* ty=Tensor[(8, 16, 8), uint16] */;
  %420 = shape_of(%418, dtype="int32") /* ty=Tensor[(3), int32] */;
  %421 = cast(%418, dtype="uint16") /* ty=Tensor[(8, 16, 8), uint16] */;
  %422 = dyn.reshape(%419, %420, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %423 = @func_8889() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), int64], Tensor[(7, 3, 15), float32], Tensor[(315), float32]) */;
  %424 = @func_11440() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %425 = cast(%var_11789, dtype="float64") /* ty=Tensor[(585), float64] */;
  %426 = reshape(%425, newshape=[9, 5, 13]) /* ty=Tensor[(9, 5, 13), float64] */;
  %427 = add(%421, %422) /* ty=Tensor[(8, 16, 8), uint16] */;
  %428 = %423.2;
  %429 = %424.0;
  %430 = @func_9399() /* ty=Tensor[(8, 16, 8), float64] */;
  %431 = @func_7412(%426) /* ty=Tensor[(9, 5, 13), float64] */;
  (%427, %428, %429, %430, %431, %var_11789)
}

def @func_8503() -> (Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64], Tensor[(2940), float64]) {
  @func_8501() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64], Tensor[(2940), float64]) */
}

def @func_13546(%var_13544: Tensor[(12, 4, 7), int32], %var_13545: Tensor[(12, 4, 7), int32]) -> (Tensor[(12, 4, 7), int32], Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float64]) {
  %440 = fn (%var_13493: Tensor[(12, 4, 7), int32], %var_13494: Tensor[(12, 4, 7), int32]) -> (Tensor[(12, 4, 7), int32], Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float64]) {
    %432 = cast(%var_13494, dtype="int32") /* ty=Tensor[(12, 4, 7), int32] */;
    %433 = shape_of(%var_13493, dtype="int32") /* ty=Tensor[(3), int32] */;
    %434 = cast(%var_13493, dtype="int32") /* ty=Tensor[(12, 4, 7), int32] */;
    %435 = dyn.reshape(%432, %433, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %436 = @func_13022() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64]) */;
    %437 = left_shift(%434, %435) /* ty=Tensor[(12, 4, 7), int32] */;
    %438 = @func_13006() /* ty=Tensor[(8, 16, 8), float32] */;
    %439 = %436.1;
    (%437, %438, %439)
  };
  %440(%var_13544, %var_13545) /* ty=(Tensor[(12, 4, 7), int32], Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float64]) */
}

def @func_4908(%var_4906: Tensor[(2, 9, 10), int8], %var_4907: Tensor[(2, 9, 10), int8]) -> (Tensor[(2, 9, 10), int8],) {
  @func_4904(%var_4906, %var_4907) /* ty=(Tensor[(2, 9, 10), int8],) */
}

def @func_14975() -> (Tensor[(8, 16, 8), float64],) {
  @func_14973() /* ty=(Tensor[(8, 16, 8), float64],) */
}

def @func_7876() -> (Tensor[(8, 16, 8), float32],) {
  @func_7874() /* ty=(Tensor[(8, 16, 8), float32],) */
}

def @func_16191() -> (Tensor[(8, 16, 8), float64],) {
  @func_16189() /* ty=(Tensor[(8, 16, 8), float64],) */
}

def @func_14186() -> Tensor[(8, 16, 8), float64] {
  @func_14184() /* ty=Tensor[(8, 16, 8), float64] */
}

def @func_12519() -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64]) {
  %449 = fn () -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64]) {
    %441 = @func_10876() /* ty=(Tensor[(8, 16, 8), float64],) */;
    %442 = @func_10876() /* ty=(Tensor[(8, 16, 8), float64],) */;
    %443 = @func_12378() /* ty=(Tensor[(14, 15, 14), float64],) */;
    %444 = @func_8825() /* ty=Tensor[(8, 16, 8), float64] */;
    %445 = %441.0;
    %446 = @func_9013() /* ty=Tensor[(8, 16, 8), float32] */;
    %447 = %442.0;
    %448 = %443.0;
    (%444, %445, %446, %447, %448)
  };
  %449() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64]) */
}

def @func_17335() -> Tensor[(8, 16, 8), float32] {
  @func_17333() /* ty=Tensor[(8, 16, 8), float32] */
}

def @func_10154(%var_10148: Tensor[(2310), float32], %var_10149: Tensor[(270), float32]) -> (Tensor[(315), float32], Tensor[(16, 15, 5), float32], Tensor[(2310), float32], Tensor[(270), float32], Tensor[(2250), float32]) {
  %450 = cast(%var_10148, dtype="float32") /* ty=Tensor[(2310), float32] */;
  %451 = cast(%var_10148, dtype="float32") /* ty=Tensor[(2310), float32] */;
  %452 = cast(%var_10149, dtype="float32") /* ty=Tensor[(270), float32] */;
  %453 = cast(meta[relay.Constant][27] /* ty=Tensor[(2250), float32] */, dtype="float32") /* ty=Tensor[(2250), float32] */;
  %454 = reshape(%450, newshape=[11, 15, 14]) /* ty=Tensor[(11, 15, 14), float32] */;
  %455 = reshape(%451, newshape=[11, 15, 14]) /* ty=Tensor[(11, 15, 14), float32] */;
  %456 = reshape(%452, newshape=[30, 9]) /* ty=Tensor[(30, 9), float32] */;
  %457 = reshape(%453, newshape=[2250]) /* ty=Tensor[(2250), float32] */;
  %458 = @func_2639(%454, %455, %456, %457) /* ty=(Tensor[(11, 15, 14), float32], Tensor[(9, 5, 6), float64], Tensor[(30, 9), float32], Tensor[(30, 9), float32], Tensor[(2250), float32], Tensor[(16, 15, 5), float32], Tensor[(224), int64], uint32) */;
  %459 = @func_9849() /* ty=Tensor[(315), float32] */;
  %460 = %458.5;
  (%459, %460, %var_10148, %var_10149, meta[relay.Constant][27] /* ty=Tensor[(2250), float32] */)
}

def @func_14233(%var_14197: Tensor[(16, 7, 4), uint8]) -> Tensor[(16, 7, 4), uint8] {
  %461 = cast(meta[relay.Constant][28] /* ty=Tensor[(16, 7, 4), uint8] */, dtype="uint8") /* ty=Tensor[(16, 7, 4), uint8] */;
  %462 = shape_of(%var_14197, dtype="int32") /* ty=Tensor[(3), int32] */;
  %463 = cast(%var_14197, dtype="uint8") /* ty=Tensor[(16, 7, 4), uint8] */;
  %464 = dyn.reshape(%461, %462, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  logical_xor(%463, %464) /* ty=Tensor[(16, 7, 4), uint8] */
}

def @func_17917() -> (Tensor[(448), uint64],) {
  %465 = @func_16823() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(7, 4, 16), bool], Tensor[(448), uint64]) */;
  %466 = %465.2;
  (%466,)
}

def @func_16332() -> (Tensor[(7, 3, 15), float32], Tensor[(8, 16, 8), float64]) {
  @func_16330() /* ty=(Tensor[(7, 3, 15), float32], Tensor[(8, 16, 8), float64]) */
}

def @func_18969(%var_18944: bool) -> (Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], bool, Tensor[(8, 16, 8), float32], Tensor[(108), bool]) {
  %467 = cast(%var_18944, dtype="bool") /* ty=bool */;
  %468 = reshape(%467, newshape=[]) /* ty=bool */;
  %469 = @func_18471(%468) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(3, 4, 9), bool], bool, Tensor[(108), bool]) */;
  %470 = cast(%var_18944, dtype="bool") /* ty=bool */;
  %471 = cast(meta[relay.Constant][29] /* ty=Tensor[(108), bool] */, dtype="bool") /* ty=Tensor[(108), bool] */;
  %472 = reshape(%470, newshape=[]) /* ty=bool */;
  %473 = reshape(%471, newshape=[108]) /* ty=Tensor[(108), bool] */;
  %474 = @func_16844(%472, %473) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(3, 4, 9), bool], bool, Tensor[(108), bool]) */;
  %475 = @func_11546() /* ty=Tensor[(8, 16, 8), float32] */;
  %476 = @func_15398() /* ty=Tensor[(8, 16, 8), float32] */;
  %477 = %469.0;
  %478 = %474.0;
  (%475, %476, %477, %var_18944, %478, meta[relay.Constant][29] /* ty=Tensor[(108), bool] */)
}

def @func_18113() -> (uint64,) {
  %479 = @func_12565() /* ty=(Tensor[(315), float32], Tensor[(8, 16, 8), uint32], uint64) */;
  %480 = %479.2;
  (%480,)
}

def @func_12449() -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64]) {
  %483 = fn () -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64]) {
    %481 = @func_12354() /* ty=Tensor[(8, 16, 8), float64] */;
    %482 = @func_9447() /* ty=Tensor[(8, 16, 8), float64] */;
    (%481, %482)
  };
  %483() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64]) */
}

def @func_5725(%var_5724: Tensor[(1, 1, 11), uint16]) -> (Tensor[(6, 1, 12), uint8], Tensor[(1, 1, 11), float32]) {
  %495 = fn (%var_5703: Tensor[(1, 1, 11), uint16]) -> (Tensor[(6, 1, 12), uint8], Tensor[(1, 1, 11), float32]) {
    %484 = cast(meta[relay.Constant][30] /* ty=uint16 */, dtype="int32") /* ty=int32 */;
    %485 = reshape(%484, newshape=[]) /* ty=int32 */;
    %486 = @func_3958(%485) /* ty=(Tensor[(6, 1, 12), int32], Tensor[(6, 1, 12), uint8]) */;
    %487 = cast(meta[relay.Constant][30] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %488 = cast(%var_5703, dtype="uint16") /* ty=Tensor[(1, 1, 11), uint16] */;
    %489 = bitwise_or(%487, %488) /* ty=Tensor[(1, 1, 11), uint16] */;
    %490 = cast(%489, dtype="float32") /* ty=Tensor[(1, 1, 11), float32] */;
    %491 = atan(%490) /* ty=Tensor[(1, 1, 11), float32] */;
    %492 = cast(%491, dtype="float32") /* ty=Tensor[(1, 1, 11), float32] */;
    %493 = %486.1;
    %494 = exp(%492) /* ty=Tensor[(1, 1, 11), float32] */;
    (%493, %494)
  };
  %495(%var_5724) /* ty=(Tensor[(6, 1, 12), uint8], Tensor[(1, 1, 11), float32]) */
}

def @func_17118() -> (Tensor[(8, 16, 8), float32],) {
  @func_17116() /* ty=(Tensor[(8, 16, 8), float32],) */
}

def @func_18115() -> (uint64,) {
  @func_18113() /* ty=(uint64,) */
}

def @func_16548(%var_16547: Tensor[(2250), float32]) -> (Tensor[(8, 16, 8), float64], Tensor[(16, 15, 5), float32], Tensor[(10, 3), float64], Tensor[(2250), float32]) {
  %506 = fn (%var_16544: Tensor[(2250), float32]) -> (Tensor[(8, 16, 8), float64], Tensor[(16, 15, 5), float32], Tensor[(10, 3), float64], Tensor[(2250), float32]) {
    %496 = @func_11440() /* ty=(Tensor[(8, 16, 8), float64],) */;
    %497 = cast(meta[relay.Constant][31] /* ty=Tensor[(10, 3), float64] */, dtype="float64") /* ty=Tensor[(10, 3), float64] */;
    %498 = cast(%var_16544, dtype="float32") /* ty=Tensor[(2250), float32] */;
    %499 = cast(meta[relay.Constant][31] /* ty=Tensor[(10, 3), float64] */, dtype="float64") /* ty=Tensor[(10, 3), float64] */;
    %500 = reshape(%497, newshape=[10, 3, 1]) /* ty=Tensor[(10, 3, 1), float64] */;
    %501 = reshape(%498, newshape=[225, 10]) /* ty=Tensor[(225, 10), float32] */;
    %502 = reshape(%499, newshape=[10, 3, 1]) /* ty=Tensor[(10, 3, 1), float64] */;
    %503 = @func_10255(%500, %501, %502) /* ty=(Tensor[(30, 9), float32], Tensor[(270), float32], Tensor[(225, 10), float32], Tensor[(7, 13, 6), uint64], Tensor[(546), bool], Tensor[(10, 3, 2310), int32], Tensor[(8, 16, 8), float64], Tensor[(392), uint64], Tensor[(10, 3, ?), bool], Tensor[(16, 15, 5), float32]) */;
    %504 = %496.0;
    %505 = %503.9;
    (%504, %505, meta[relay.Constant][31] /* ty=Tensor[(10, 3), float64] */, %var_16544)
  };
  %506(%var_16547) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(16, 15, 5), float32], Tensor[(10, 3), float64], Tensor[(2250), float32]) */
}

def @func_13239() -> (Tensor[(8, 1), float64], Tensor[(16, 15, 5), float32], Tensor[(1, 224), int64], uint32, Tensor[(7, 7, 10), float64], Tensor[(490), float64], Tensor[(8, 16, 8), float64]) {
  %507 = @func_12096() /* ty=(Tensor[(448), uint64], Tensor[(8, 16, 8), float64], uint64, Tensor[(8, 1), float64], uint64, Tensor[(8, 16, 8), float64]) */;
  %508 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 224), int64] */, dtype="int64") /* ty=Tensor[(1, 224), int64] */;
  %509 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 224), int64] */, dtype="int64") /* ty=Tensor[(1, 224), int64] */;
  %510 = cast(meta[relay.Constant][33] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %511 = reshape(%508, newshape=[7, 4, 8]) /* ty=Tensor[(7, 4, 8), int64] */;
  %512 = reshape(%509, newshape=[7, 4, 8]) /* ty=Tensor[(7, 4, 8), int64] */;
  %513 = reshape(%510, newshape=[]) /* ty=uint32 */;
  %514 = @func_1485(%511, %512, %513) /* ty=(Tensor[(7, 4, 8), int64], Tensor[(16, 15, 5), uint32], uint32, Tensor[(16, 15, 5), float32], Tensor[(16, 15, 5), float32]) */;
  %515 = cast(meta[relay.Constant][34] /* ty=Tensor[(490), float64] */, dtype="float64") /* ty=Tensor[(490), float64] */;
  %516 = reshape(%515, newshape=[7, 7, 10]) /* ty=Tensor[(7, 7, 10), float64] */;
  %517 = @func_7280(%516) /* ty=(Tensor[(7, 7, 10), float64],) */;
  %518 = @func_7714() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %519 = %507.3;
  %520 = %514.3;
  %521 = %517.0;
  %522 = %518.0;
  (%519, %520, meta[relay.Constant][32] /* ty=Tensor[(1, 224), int64] */, meta[relay.Constant][33] /* ty=uint32 */, %521, meta[relay.Constant][34] /* ty=Tensor[(490), float64] */, %522)
}

def @func_8028() -> Tensor[(8, 16, 8), float32] {
  %523 = @func_7874() /* ty=(Tensor[(8, 16, 8), float32],) */;
  %523.0
}

def @func_11203(%var_11201: Tensor[(224), int64], %var_11202: uint32) -> (Tensor[(16, 15, 5), float32], Tensor[(224), int64], Tensor[(8, 16, 8), float32]) {
  @func_11199(%var_11201, %var_11202) /* ty=(Tensor[(16, 15, 5), float32], Tensor[(224), int64], Tensor[(8, 16, 8), float32]) */
}

def @func_16998() -> (Tensor[(8, 16, 8), float32],) {
  %526 = fn () -> (Tensor[(8, 16, 8), float32],) {
    %524 = @func_7874() /* ty=(Tensor[(8, 16, 8), float32],) */;
    %525 = %524.0;
    (%525,)
  };
  %526() /* ty=(Tensor[(8, 16, 8), float32],) */
}

def @func_18972(%var_18970: bool) -> (Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], bool, Tensor[(8, 16, 8), float32], Tensor[(108), bool]) {
  @func_18969(%var_18970) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], bool, Tensor[(8, 16, 8), float32], Tensor[(108), bool]) */
}

def @func_13024() -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64]) {
  @func_13022() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64]) */
}

def @func_14263() -> (Tensor[(14, 15, 14), float64], Tensor[(8, 16, 8), float64]) {
  %530 = fn () -> (Tensor[(14, 15, 14), float64], Tensor[(8, 16, 8), float64]) {
    %527 = @func_13270() /* ty=(Tensor[(14, 15, 14), float64],) */;
    %528 = %527.0;
    %529 = @func_12354() /* ty=Tensor[(8, 16, 8), float64] */;
    (%528, %529)
  };
  %530() /* ty=(Tensor[(14, 15, 14), float64], Tensor[(8, 16, 8), float64]) */
}

def @func_9832() -> Tensor[(8, 16, 8), float64] {
  @func_9830() /* ty=Tensor[(8, 16, 8), float64] */
}

def @func_1490(%var_1487: Tensor[(7, 4, 8), int64], %var_1488: Tensor[(7, 4, 8), int64], %var_1489: uint32) -> (Tensor[(7, 4, 8), int64], Tensor[(16, 15, 5), uint32], uint32, Tensor[(16, 15, 5), float32], Tensor[(16, 15, 5), float32]) {
  @func_1485(%var_1487, %var_1488, %var_1489) /* ty=(Tensor[(7, 4, 8), int64], Tensor[(16, 15, 5), uint32], uint32, Tensor[(16, 15, 5), float32], Tensor[(16, 15, 5), float32]) */
}

def @func_8426() -> (Tensor[(8, 16, 8), float32], Tensor[(3, 6, 7), float32], Tensor[(3), float32], Tensor[(126), float32]) {
  @func_8424() /* ty=(Tensor[(8, 16, 8), float32], Tensor[(3, 6, 7), float32], Tensor[(3), float32], Tensor[(126), float32]) */
}

def @main(%var_19078: Tensor[(495), float32], %var_19088: Tensor[(126), float32], %var_19217: Tensor[(2940), float64]) -> (Tensor[(8, 16, 8), float64], Tensor[(15, 3, 11), float32], Tensor[(495), float32], Tensor[(1, 3), float32], Tensor[(126), float32], Tensor[(14, 15, 14), float32], Tensor[(14, 15, 14), float64], Tensor[(315), float32], Tensor[(3, 6, 7), float64], Tensor[(8, 1), float64], Tensor[(9, 5, 13), float64], Tensor[(585), float64], Tensor[(8, 16, 8), float32], Tensor[(2940), float64]) {
  %531 = @func_16191() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %532 = cast(%var_19078, dtype="float32") /* ty=Tensor[(495), float32] */;
  %533 = reshape(%532, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), float32] */;
  %534 = cast(meta[relay.Constant][36] /* ty=Tensor[(2940), float64] */, dtype="float64") /* ty=Tensor[(2940), float64] */;
  %535 = reshape(%534, newshape=[14, 15, 14]) /* ty=Tensor[(14, 15, 14), float64] */;
  %536 = @func_17721(%535) /* ty=(Tensor[(14, 15, 14), float32],) */;
  %537 = @func_16303() /* ty=(Tensor[(8, 16, 8), float32], Tensor[(14, 15, 14), float64]) */;
  %538 = @func_13205() /* ty=(Tensor[(14, 15, 14), float64], Tensor[(7, 3, 15), float32], Tensor[(315), float32], Tensor[(8, 16, 8), float32]) */;
  %539 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 3), float32] */, dtype="float32") /* ty=Tensor[(1, 3), float32] */;
  %540 = cast(%var_19088, dtype="float32") /* ty=Tensor[(126), float32] */;
  %541 = reshape(%539, newshape=[3, 1, 1]) /* ty=Tensor[(3, 1, 1), float32] */;
  %542 = reshape(%540, newshape=[3, 6, 7]) /* ty=Tensor[(3, 6, 7), float32] */;
  %543 = @func_7314(%541, %542) /* ty=Tensor[(3, 6, 7), float32] */;
  %544 = cast(%543, dtype="float64") /* ty=Tensor[(3, 6, 7), float64] */;
  %545 = cast(meta[relay.Constant][37] /* ty=Tensor[(585), float64] */, dtype="float64") /* ty=Tensor[(585), float64] */;
  %546 = reshape(%545, newshape=[9, 5, 13]) /* ty=Tensor[(9, 5, 13), float64] */;
  %547 = cast(%var_19217, dtype="float64") /* ty=Tensor[(2940), float64] */;
  %548 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(2940), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %549 = cast(meta[relay.Constant][36] /* ty=Tensor[(2940), float64] */, dtype="float64") /* ty=Tensor[(2940), float64] */;
  %550 = dyn.reshape(%547, %548, newshape=[]) /* ty=Tensor[(?), float64] */;
  %551 = %531.0;
  %552 = @func_11501(%533) /* ty=Tensor[(15, 3, 11), float32] */;
  %553 = %536.0;
  %554 = %537.1;
  %555 = %538.2;
  %556 = log10(%544) /* ty=Tensor[(3, 6, 7), float64] */;
  %557 = @func_15306() /* ty=Tensor[(8, 1), float64] */;
  %558 = @func_7412(%546) /* ty=Tensor[(9, 5, 13), float64] */;
  %559 = @func_14326() /* ty=Tensor[(8, 16, 8), float32] */;
  %560 = mod(%549, %550) /* ty=Tensor[(2940), float64] */;
  (%551, %552, %var_19078, meta[relay.Constant][35] /* ty=Tensor[(1, 3), float32] */, %var_19088, %553, %554, %555, %556, %557, %558, meta[relay.Constant][37] /* ty=Tensor[(585), float64] */, %559, %560)
}

def @func_17581(%var_17578: Tensor[(14, 4, 5), float64], %var_17579: Tensor[(14, 4, 5), float64], %var_17580: Tensor[(1350, 1), float32]) -> (Tensor[(8, 16, 8), float64], Tensor[(1350, 1), float32], Tensor[(392), uint64], uint64, Tensor[(14, 4, 5), float64], Tensor[(8, 16, 8), float32], Tensor[(6, 18), bool], Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], Tensor[(448), uint64], Tensor[(392), uint64], Tensor[(6, 1, 12), uint8], Tensor[(4, 16, 8), float64], Tensor[(16, 32), float64], Tensor[(84), bool], Tensor[(1, 84), bool], Tensor[(8, 16, 8), float64]) {
  @func_17576(%var_17578, %var_17579, %var_17580) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(1350, 1), float32], Tensor[(392), uint64], uint64, Tensor[(14, 4, 5), float64], Tensor[(8, 16, 8), float32], Tensor[(6, 18), bool], Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], Tensor[(448), uint64], Tensor[(392), uint64], Tensor[(6, 1, 12), uint8], Tensor[(4, 16, 8), float64], Tensor[(16, 32), float64], Tensor[(84), bool], Tensor[(1, 84), bool], Tensor[(8, 16, 8), float64]) */
}

def @func_13482() -> (Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float64]) {
  %561 = @func_12768() /* ty=(Tensor[(8, 16, 8), float32],) */;
  %562 = @func_8889() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), int64], Tensor[(7, 3, 15), float32], Tensor[(315), float32]) */;
  %563 = %561.0;
  %564 = %562.0;
  (%563, %564)
}

def @func_2644(%var_2640: Tensor[(11, 15, 14), float32], %var_2641: Tensor[(11, 15, 14), float32], %var_2642: Tensor[(30, 9), float32], %var_2643: Tensor[(2250), float32]) -> (Tensor[(11, 15, 14), float32], Tensor[(9, 5, 6), float64], Tensor[(30, 9), float32], Tensor[(30, 9), float32], Tensor[(2250), float32], Tensor[(16, 15, 5), float32], Tensor[(224), int64], uint32) {
  %588 = fn (%var_2584: Tensor[(11, 15, 14), float32], %var_2585: Tensor[(11, 15, 14), float32], %var_2597: Tensor[(30, 9), float32], %var_2604: Tensor[(2250), float32]) -> (Tensor[(11, 15, 14), float32], Tensor[(9, 5, 6), float64], Tensor[(30, 9), float32], Tensor[(30, 9), float32], Tensor[(2250), float32], Tensor[(16, 15, 5), float32], Tensor[(224), int64], uint32) {
    %565 = cast(%var_2585, dtype="float32") /* ty=Tensor[(11, 15, 14), float32] */;
    %566 = shape_of(%var_2584, dtype="int32") /* ty=Tensor[(3), int32] */;
    %567 = cast(%var_2584, dtype="float32") /* ty=Tensor[(11, 15, 14), float32] */;
    %568 = dyn.reshape(%565, %566, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %569 = cast(%var_2597, dtype="float32") /* ty=Tensor[(30, 9), float32] */;
    %570 = reshape(%569, newshape=[9, 5, 6]) /* ty=Tensor[(9, 5, 6), float32] */;
    %571 = @func_652(%570) /* ty=(Tensor[(9, 5, 6), float64],) */;
    %572 = cast(%var_2604, dtype="float32") /* ty=Tensor[(2250), float32] */;
    %573 = %571.0;
    %574 = cast(%573, dtype="float32") /* ty=Tensor[(9, 5, 6), float32] */;
    %575 = reshape(%572, newshape=[15, 10, 15]) /* ty=Tensor[(15, 10, 15), float32] */;
    %576 = reshape(%574, newshape=[30, 9]) /* ty=Tensor[(30, 9), float32] */;
    %577 = @func_1061(%575, %576) /* ty=(Tensor[(15, 10, 15), float32], Tensor[(9, 5, 6), float64], Tensor[(30, 9), float32], Tensor[(9, 5, 6), float64]) */;
    %578 = cast(meta[relay.Constant][38] /* ty=Tensor[(224), int64] */, dtype="int64") /* ty=Tensor[(224), int64] */;
    %579 = cast(meta[relay.Constant][38] /* ty=Tensor[(224), int64] */, dtype="int64") /* ty=Tensor[(224), int64] */;
    %580 = cast(meta[relay.Constant][39] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %581 = reshape(%578, newshape=[7, 4, 8]) /* ty=Tensor[(7, 4, 8), int64] */;
    %582 = reshape(%579, newshape=[7, 4, 8]) /* ty=Tensor[(7, 4, 8), int64] */;
    %583 = reshape(%580, newshape=[]) /* ty=uint32 */;
    %584 = @func_1485(%581, %582, %583) /* ty=(Tensor[(7, 4, 8), int64], Tensor[(16, 15, 5), uint32], uint32, Tensor[(16, 15, 5), float32], Tensor[(16, 15, 5), float32]) */;
    %585 = mod(%567, %568) /* ty=Tensor[(11, 15, 14), float32] */;
    %586 = %577.2;
    %587 = %584.3;
    (%585, %573, %var_2597, %586, %var_2604, %587, meta[relay.Constant][38] /* ty=Tensor[(224), int64] */, meta[relay.Constant][39] /* ty=uint32 */)
  };
  %588(%var_2640, %var_2641, %var_2642, %var_2643) /* ty=(Tensor[(11, 15, 14), float32], Tensor[(9, 5, 6), float64], Tensor[(30, 9), float32], Tensor[(30, 9), float32], Tensor[(2250), float32], Tensor[(16, 15, 5), float32], Tensor[(224), int64], uint32) */
}

def @func_17836() -> Tensor[(8, 16, 8), float64] {
  %590 = fn () -> Tensor[(8, 16, 8), float64] {
    %589 = @func_16189() /* ty=(Tensor[(8, 16, 8), float64],) */;
    %589.0
  };
  %590() /* ty=Tensor[(8, 16, 8), float64] */
}

def @func_7203(%var_7201: Tensor[(10, 9, 15), float32]) -> Tensor[(10, 9, 15), float32] {
  @func_7200(%var_7201) /* ty=Tensor[(10, 9, 15), float32] */
}

def @func_18151() -> Tensor[(14, 15, 14), float64] {
  @func_18149() /* ty=Tensor[(14, 15, 14), float64] */
}

def @func_12770() -> (Tensor[(8, 16, 8), float32],) {
  @func_12768() /* ty=(Tensor[(8, 16, 8), float32],) */
}

def @func_7282(%var_7281: Tensor[(7, 7, 10), float64]) -> (Tensor[(7, 7, 10), float64],) {
  %593 = fn (%var_7273: Tensor[(7, 7, 10), float64]) -> (Tensor[(7, 7, 10), float64],) {
    %591 = cast(%var_7273, dtype="float64") /* ty=Tensor[(7, 7, 10), float64] */;
    %592 = atan(%591) /* ty=Tensor[(7, 7, 10), float64] */;
    (%592,)
  };
  %593(%var_7281) /* ty=(Tensor[(7, 7, 10), float64],) */
}

def @func_14427() -> (Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], Tensor[(350), int64], Tensor[(224), int64]) {
  %594 = cast(meta[relay.Constant][40] /* ty=Tensor[(224), int64] */, dtype="int64") /* ty=Tensor[(224), int64] */;
  %595 = reshape(%594, newshape=[224]) /* ty=Tensor[(224), int64] */;
  %596 = @func_10738(%595) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(350), int64], uint32, Tensor[(224), int64], uint32) */;
  %597 = @func_9380() /* ty=Tensor[(8, 16, 8), float32] */;
  %598 = @func_13258() /* ty=Tensor[(8, 16, 8), float32] */;
  %599 = %596.1;
  (%597, %598, %599, meta[relay.Constant][40] /* ty=Tensor[(224), int64] */)
}

def @func_13747() -> Tensor[(8, 16, 8), float64] {
  %601 = fn () -> Tensor[(8, 16, 8), float64] {
    %600 = @func_11440() /* ty=(Tensor[(8, 16, 8), float64],) */;
    %600.0
  };
  %601() /* ty=Tensor[(8, 16, 8), float64] */
}

def @func_12575() -> (Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float64]) {
  @func_12573() /* ty=(Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float64]) */
}

def @func_17393() -> (Tensor[(8, 1), float64], Tensor[(8, 16, 8), float64]) {
  %602 = @func_13553() /* ty=(Tensor[(8, 1), float64],) */;
  %603 = @func_10030() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %604 = %602.0;
  %605 = %603.0;
  (%604, %605)
}

def @func_12768() -> (Tensor[(8, 16, 8), float32],) {
  %606 = @func_9983() /* ty=Tensor[(8, 16, 8), float32] */;
  (%606,)
}

def @func_14575(%var_14573: Tensor[(1350), float32]) -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32], Tensor[(1350), float32]) {
  @func_14572(%var_14573) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32], Tensor[(1350), float32]) */
}

def @func_7314(%var_7309: Tensor[(3, 1, 1), float32], %var_7310: Tensor[(3, 6, 7), float32]) -> Tensor[(3, 6, 7), float32] {
  %607 = cast(%var_7309, dtype="float32") /* ty=Tensor[(3, 1, 1), float32] */;
  %608 = cast(%var_7310, dtype="float32") /* ty=Tensor[(3, 6, 7), float32] */;
  divide(%607, %608) /* ty=Tensor[(3, 6, 7), float32] */
}

def @func_13241() -> (Tensor[(8, 1), float64], Tensor[(16, 15, 5), float32], Tensor[(1, 224), int64], uint32, Tensor[(7, 7, 10), float64], Tensor[(490), float64], Tensor[(8, 16, 8), float64]) {
  @func_13239() /* ty=(Tensor[(8, 1), float64], Tensor[(16, 15, 5), float32], Tensor[(1, 224), int64], uint32, Tensor[(7, 7, 10), float64], Tensor[(490), float64], Tensor[(8, 16, 8), float64]) */
}

def @func_673(%var_669: Tensor[(15, 15, 10), uint16]) -> (Tensor[(15, 15, 10), uint16],) {
  %609 = cast(%var_669, dtype="uint16") /* ty=Tensor[(15, 15, 10), uint16] */;
  %610 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(15, 15, 10), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %611 = cast(meta[relay.Constant][41] /* ty=Tensor[(15, 15, 10), uint16] */, dtype="uint16") /* ty=Tensor[(15, 15, 10), uint16] */;
  %612 = dyn.reshape(%609, %610, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %613 = maximum(%611, %612) /* ty=Tensor[(15, 15, 10), uint16] */;
  (%613,)
}

def @func_15159(%var_15156: Tensor[(8), float64], %var_15157: Tensor[(448), uint64], %var_15158: Tensor[(180), int8]) -> (Tensor[(315), float32], Tensor[(8, 16, 8), float64], uint64, Tensor[(8), float64], uint64, Tensor[(448), uint64], Tensor[(2, 9, 10), int8], Tensor[(180), int8], Tensor[(8, 16, 8), float64]) {
  %631 = fn (%var_15120: Tensor[(8), float64], %var_15122: Tensor[(448), uint64], %var_15133: Tensor[(180), int8]) -> (Tensor[(315), float32], Tensor[(8, 16, 8), float64], uint64, Tensor[(8), float64], uint64, Tensor[(448), uint64], Tensor[(2, 9, 10), int8], Tensor[(180), int8], Tensor[(8, 16, 8), float64]) {
    %614 = @func_8889() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), int64], Tensor[(7, 3, 15), float32], Tensor[(315), float32]) */;
    %615 = @func_11520() /* ty=(Tensor[(8, 16, 8), float64],) */;
    %616 = cast(%var_15120, dtype="float64") /* ty=Tensor[(8), float64] */;
    %617 = cast(meta[relay.Constant][42] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %618 = cast(%var_15122, dtype="uint64") /* ty=Tensor[(448), uint64] */;
    %619 = reshape(%616, newshape=[2, 1, 4]) /* ty=Tensor[(2, 1, 4), float64] */;
    %620 = reshape(%617, newshape=[]) /* ty=uint64 */;
    %621 = reshape(%618, newshape=[448]) /* ty=Tensor[(448), uint64] */;
    %622 = @func_4427(%619, %620, %621) /* ty=(Tensor[(2, 1, 4), float64], Tensor[(7, 4, 16), bool], uint64, Tensor[(448), uint64]) */;
    %623 = cast(%var_15133, dtype="int8") /* ty=Tensor[(180), int8] */;
    %624 = reshape(%623, newshape=[180]) /* ty=Tensor[(180), int8] */;
    %625 = @func_8011(%624) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(2, 9, 10), int8], Tensor[(180), int8]) */;
    %626 = %614.3;
    %627 = %615.0;
    %628 = %622.2;
    %629 = %625.1;
    %630 = @func_7783() /* ty=Tensor[(8, 16, 8), float64] */;
    (%626, %627, %628, %var_15120, meta[relay.Constant][42] /* ty=uint64 */, %var_15122, %629, %var_15133, %630)
  };
  %631(%var_15156, %var_15157, %var_15158) /* ty=(Tensor[(315), float32], Tensor[(8, 16, 8), float64], uint64, Tensor[(8), float64], uint64, Tensor[(448), uint64], Tensor[(2, 9, 10), int8], Tensor[(180), int8], Tensor[(8, 16, 8), float64]) */
}

def @func_11819() -> (Tensor[(8, 16, 8), float32],) {
  %634 = fn () -> (Tensor[(8, 16, 8), float32],) {
    %632 = @func_11744() /* ty=(Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], Tensor[(7, 3, 15), float32]) */;
    %633 = %632.1;
    (%633,)
  };
  %634() /* ty=(Tensor[(8, 16, 8), float32],) */
}

def @func_18770() -> (Tensor[(8, 16, 8), float64], uint64) {
  %639 = fn () -> (Tensor[(8, 16, 8), float64], uint64) {
    %635 = @func_9577() /* ty=(Tensor[(8, 16, 8), float64],) */;
    %636 = @func_18113() /* ty=(uint64,) */;
    %637 = %635.0;
    %638 = %636.0;
    (%637, %638)
  };
  %639() /* ty=(Tensor[(8, 16, 8), float64], uint64) */
}

def @func_13139(%var_13137: Tensor[(1, 2250), float32]) -> (Tensor[(8, 16, 8), float64], Tensor[(3, 4, 9), bool], bool, Tensor[(108), bool], Tensor[(7, 13, 6), uint64], Tensor[(30), float64], Tensor[(1, 2250), float32], Tensor[(3, 4, 7), int16], Tensor[(84), bool]) {
  @func_13136(%var_13137) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(3, 4, 9), bool], bool, Tensor[(108), bool], Tensor[(7, 13, 6), uint64], Tensor[(30), float64], Tensor[(1, 2250), float32], Tensor[(3, 4, 7), int16], Tensor[(84), bool]) */
}

def @func_12274(%var_12272: Tensor[(14, 1, 2), int16]) -> (Tensor[(8, 16, 8), float32], Tensor[(4, 7, 14), float64], Tensor[(7, 56), uint64], Tensor[(14, ?, 2), bool]) {
  @func_12271(%var_12272) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(4, 7, 14), float64], Tensor[(7, 56), uint64], Tensor[(14, ?, 2), bool]) */
}

def @func_10651(%var_10642: Tensor[(84), bool]) -> (Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], Tensor[(8, 11, 3), float64], Tensor[(264), float64], Tensor[(16, 15, 5), float32], Tensor[(224), int64], uint32, Tensor[(8, 16, 8), float32], Tensor[(84), bool], Tensor[(315), float32]) {
  %640 = @func_7874() /* ty=(Tensor[(8, 16, 8), float32],) */;
  %641 = cast(meta[relay.Constant][43] /* ty=Tensor[(264), float64] */, dtype="float64") /* ty=Tensor[(264), float64] */;
  %642 = reshape(%641, newshape=[8, 11, 3]) /* ty=Tensor[(8, 11, 3), float64] */;
  %643 = @func_8347(%642) /* ty=(Tensor[(8, 11, 3), float64],) */;
  %644 = cast(meta[relay.Constant][44] /* ty=Tensor[(224), int64] */, dtype="int64") /* ty=Tensor[(224), int64] */;
  %645 = cast(meta[relay.Constant][44] /* ty=Tensor[(224), int64] */, dtype="int64") /* ty=Tensor[(224), int64] */;
  %646 = cast(meta[relay.Constant][45] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %647 = reshape(%644, newshape=[7, 4, 8]) /* ty=Tensor[(7, 4, 8), int64] */;
  %648 = reshape(%645, newshape=[7, 4, 8]) /* ty=Tensor[(7, 4, 8), int64] */;
  %649 = reshape(%646, newshape=[]) /* ty=uint32 */;
  %650 = @func_1485(%647, %648, %649) /* ty=(Tensor[(7, 4, 8), int64], Tensor[(16, 15, 5), uint32], uint32, Tensor[(16, 15, 5), float32], Tensor[(16, 15, 5), float32]) */;
  %651 = cast(meta[relay.Constant][45] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %652 = cast(%var_10642, dtype="bool") /* ty=Tensor[(84), bool] */;
  %653 = reshape(%651, newshape=[]) /* ty=uint32 */;
  %654 = reshape(%652, newshape=[3, 4, 7]) /* ty=Tensor[(3, 4, 7), bool] */;
  %655 = @func_9352(%653, %654) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(3, 4, 7), int16]) */;
  %656 = %640.0;
  %657 = @func_9013() /* ty=Tensor[(8, 16, 8), float32] */;
  %658 = %643.0;
  %659 = %650.4;
  %660 = %655.0;
  %661 = @func_9849() /* ty=Tensor[(315), float32] */;
  (%656, %657, %658, meta[relay.Constant][43] /* ty=Tensor[(264), float64] */, %659, meta[relay.Constant][44] /* ty=Tensor[(224), int64] */, meta[relay.Constant][45] /* ty=uint32 */, %660, %var_10642, %661)
}

def @func_8550(%var_8549: Tensor[(270), float32]) -> (Tensor[(8, 16, 8), float64], Tensor[(4, 7, 14), float64], Tensor[(392), uint64], Tensor[(9, 5, 6), float64], Tensor[(270), float32]) {
  %671 = fn (%var_8545: Tensor[(270), float32]) -> (Tensor[(8, 16, 8), float64], Tensor[(4, 7, 14), float64], Tensor[(392), uint64], Tensor[(9, 5, 6), float64], Tensor[(270), float32]) {
    %662 = cast(meta[relay.Constant][46] /* ty=Tensor[(392), uint64] */, dtype="uint64") /* ty=Tensor[(392), uint64] */;
    %663 = reshape(%662, newshape=[14, 28]) /* ty=Tensor[(14, 28), uint64] */;
    %664 = @func_8232(%663) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(4, 7, 14), float64], Tensor[(14, 28), uint64]) */;
    %665 = cast(%var_8545, dtype="float32") /* ty=Tensor[(270), float32] */;
    %666 = reshape(%665, newshape=[9, 5, 6]) /* ty=Tensor[(9, 5, 6), float32] */;
    %667 = @func_652(%666) /* ty=(Tensor[(9, 5, 6), float64],) */;
    %668 = @func_7783() /* ty=Tensor[(8, 16, 8), float64] */;
    %669 = %664.2;
    %670 = %667.0;
    (%668, %669, meta[relay.Constant][46] /* ty=Tensor[(392), uint64] */, %670, %var_8545)
  };
  %671(%var_8549) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(4, 7, 14), float64], Tensor[(392), uint64], Tensor[(9, 5, 6), float64], Tensor[(270), float32]) */
}

def @func_4431(%var_4428: Tensor[(2, 1, 4), float64], %var_4429: uint64, %var_4430: Tensor[(448), uint64]) -> (Tensor[(2, 1, 4), float64], Tensor[(7, 4, 16), bool], uint64, Tensor[(448), uint64]) {
  %679 = fn (%var_4410: Tensor[(2, 1, 4), float64], %var_4419: uint64, %var_4420: Tensor[(448), uint64]) -> (Tensor[(2, 1, 4), float64], Tensor[(7, 4, 16), bool], uint64, Tensor[(448), uint64]) {
    %672 = cast(%var_4410, dtype="float64") /* ty=Tensor[(2, 1, 4), float64] */;
    %673 = cast(%var_4419, dtype="uint64") /* ty=uint64 */;
    %674 = cast(%var_4420, dtype="uint64") /* ty=Tensor[(448), uint64] */;
    %675 = reshape(%673, newshape=[]) /* ty=uint64 */;
    %676 = reshape(%674, newshape=[7, 4, 16]) /* ty=Tensor[(7, 4, 16), uint64] */;
    %677 = atan(%672) /* ty=Tensor[(2, 1, 4), float64] */;
    %678 = @func_2096(%675, %676) /* ty=Tensor[(7, 4, 16), bool] */;
    (%677, %678, %var_4419, %var_4420)
  };
  %679(%var_4428, %var_4429, %var_4430) /* ty=(Tensor[(2, 1, 4), float64], Tensor[(7, 4, 16), bool], uint64, Tensor[(448), uint64]) */
}

def @func_9355(%var_9353: uint32, %var_9354: Tensor[(3, 4, 7), bool]) -> (Tensor[(8, 16, 8), float32], Tensor[(3, 4, 7), int16]) {
  %689 = fn (%var_9312: uint32, %var_9341: Tensor[(3, 4, 7), bool]) -> (Tensor[(8, 16, 8), float32], Tensor[(3, 4, 7), int16]) {
    %680 = cast(%var_9312, dtype="bool") /* ty=bool */;
    %681 = cast(meta[relay.Constant][47] /* ty=Tensor[(3, 4, 7), uint32] */, dtype="bool") /* ty=Tensor[(3, 4, 7), bool] */;
    %682 = less_equal(%680, %681) /* ty=Tensor[(3, 4, 7), bool] */;
    %683 = cast(%var_9341, dtype="int16") /* ty=Tensor[(3, 4, 7), int16] */;
    %684 = shape_of(%682, dtype="int32") /* ty=Tensor[(3), int32] */;
    %685 = cast(%682, dtype="int16") /* ty=Tensor[(3, 4, 7), int16] */;
    %686 = dyn.reshape(%683, %684, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %687 = @func_9064() /* ty=Tensor[(8, 16, 8), float32] */;
    %688 = minimum(%685, %686) /* ty=Tensor[(3, 4, 7), int16] */;
    (%687, %688)
  };
  %689(%var_9353, %var_9354) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(3, 4, 7), int16]) */
}

def @func_15400() -> Tensor[(8, 16, 8), float32] {
  @func_15398() /* ty=Tensor[(8, 16, 8), float32] */
}

def @func_14038(%var_14036: Tensor[(9, 5, 6), float64]) -> (Tensor[(8, 16, 8), float32], Tensor[(270), float32], Tensor[(8, 16, 8), float64], Tensor[(15, 3, 11), float32], Tensor[(495, 1), float32], Tensor[(9, 5, 6), bool]) {
  @func_14035(%var_14036) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(270), float32], Tensor[(8, 16, 8), float64], Tensor[(15, 3, 11), float32], Tensor[(495, 1), float32], Tensor[(9, 5, 6), bool]) */
}

def @func_15526() -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64]) {
  @func_15524() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64]) */
}

def @func_18612(%var_18610: Tensor[(6, 13, 16), float64]) -> (Tensor[(6, 13, 16), float64], Tensor[(6, 13, 16), float64]) {
  @func_18609(%var_18610) /* ty=(Tensor[(6, 13, 16), float64], Tensor[(6, 13, 16), float64]) */
}

def @func_10356() -> (Tensor[(8, 16, 8), float32], Tensor[(7, 4, 16), bool], uint64, Tensor[(448), uint64], Tensor[(8, 16, 8), float64]) {
  @func_10354() /* ty=(Tensor[(8, 16, 8), float32], Tensor[(7, 4, 16), bool], uint64, Tensor[(448), uint64], Tensor[(8, 16, 8), float64]) */
}

def @func_18494() -> (Tensor[(8, 16, 8), float32],) {
  %691 = fn () -> (Tensor[(8, 16, 8), float32],) {
    %690 = @func_9983() /* ty=Tensor[(8, 16, 8), float32] */;
    (%690,)
  };
  %691() /* ty=(Tensor[(8, 16, 8), float32],) */
}

def @func_11332() -> (Tensor[(8, 16, 8), float64], Tensor[(3, 4, 7), int16], uint32, Tensor[(84), bool], uint64, Tensor[(8), float64], Tensor[(448), uint64]) {
  @func_11330() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(3, 4, 7), int16], uint32, Tensor[(84), bool], uint64, Tensor[(8), float64], Tensor[(448), uint64]) */
}

def @func_16189() -> (Tensor[(8, 16, 8), float64],) {
  %692 = @func_15457() /* ty=Tensor[(8, 16, 8), float64] */;
  (%692,)
}

def @func_16807() -> Tensor[(8, 16, 8), float64] {
  @func_16805() /* ty=Tensor[(8, 16, 8), float64] */
}

def @func_14077() -> Tensor[(8, 16, 8), float32] {
  %693 = fn () -> Tensor[(8, 16, 8), float32] {
    @func_9064() /* ty=Tensor[(8, 16, 8), float32] */
  };
  %693() /* ty=Tensor[(8, 16, 8), float32] */
}

def @func_2536(%var_2535: Tensor[(14, 15, 14), float64]) -> Tensor[(14, 15, 14), float64] {
  %695 = fn (%var_2530: Tensor[(14, 15, 14), float64]) -> Tensor[(14, 15, 14), float64] {
    %694 = cast(%var_2530, dtype="float64") /* ty=Tensor[(14, 15, 14), float64] */;
    log(%694) /* ty=Tensor[(14, 15, 14), float64] */
  };
  %695(%var_2535) /* ty=Tensor[(14, 15, 14), float64] */
}

def @func_9014() -> Tensor[(8, 16, 8), float32] {
  %696 = fn () -> Tensor[(8, 16, 8), float32] {
    @func_8028() /* ty=Tensor[(8, 16, 8), float32] */
  };
  %696() /* ty=Tensor[(8, 16, 8), float32] */
}

def @func_10535(%var_10532: Tensor[(392), uint64], %var_10533: Tensor[(30), float64], %var_10534: Tensor[(2250), float32]) -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(392), uint64], Tensor[(4, 7, 14), uint16], Tensor[(270), float32], Tensor[(30), float64], Tensor[(2250), float32]) {
  @func_10530(%var_10532, %var_10533, %var_10534) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(392), uint64], Tensor[(4, 7, 14), uint16], Tensor[(270), float32], Tensor[(30), float64], Tensor[(2250), float32]) */
}

def @func_12989() -> (Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64], Tensor[(3), float32]) {
  %703 = fn () -> (Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64], Tensor[(3), float32]) {
    %697 = @func_7714() /* ty=(Tensor[(8, 16, 8), float64],) */;
    %698 = cast(meta[relay.Constant][48] /* ty=Tensor[(3), float32] */, dtype="float32") /* ty=Tensor[(3), float32] */;
    %699 = reshape(%698, newshape=[3]) /* ty=Tensor[(3), float32] */;
    %700 = @func_7828(%699) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64], Tensor[(2940, 1), float64], Tensor[(3, 6, 7), float32], Tensor[(3), float32], Tensor[(126), float32]) */;
    %701 = %697.0;
    %702 = %700.1;
    (%701, %702, meta[relay.Constant][48] /* ty=Tensor[(3), float32] */)
  };
  %703() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64], Tensor[(3), float32]) */
}

def @func_9064() -> Tensor[(8, 16, 8), float32] {
  %704 = @func_8173() /* ty=(Tensor[(8, 16, 8), float32],) */;
  %704.0
}

def @func_19029() -> (Tensor[(8, 16, 8), float64], Tensor[(315), float32], Tensor[(8, 16, 8), float32], bool) {
  %705 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %706 = reshape(%705, newshape=[]) /* ty=bool */;
  %707 = @func_18969(%706) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], bool, Tensor[(8, 16, 8), float32], Tensor[(108), bool]) */;
  %708 = @func_13746() /* ty=Tensor[(8, 16, 8), float64] */;
  %709 = @func_9849() /* ty=Tensor[(315), float32] */;
  %710 = %707.0;
  (%708, %709, %710, False /* ty=bool */)
}

def @func_11131() -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(270), float32]) {
  @func_11129() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(270), float32]) */
}

def @func_14236(%var_14234: Tensor[(16, 7, 4), uint8]) -> Tensor[(16, 7, 4), uint8] {
  @func_14233(%var_14234) /* ty=Tensor[(16, 7, 4), uint8] */
}

def @func_10300() -> Tensor[(8, 16, 8), float64] {
  @func_9830() /* ty=Tensor[(8, 16, 8), float64] */
}

def @func_17718(%var_17709: Tensor[(14, 15, 14), float64]) -> (Tensor[(14, 15, 14), float32],) {
  %711 = @func_9514() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64], Tensor[(392), uint64]) */;
  %712 = %711.1;
  %713 = cast(%var_17709, dtype="float32") /* ty=Tensor[(14, 15, 14), float32] */;
  %714 = shape_of(%712, dtype="int32") /* ty=Tensor[(3), int32] */;
  %715 = cast(%712, dtype="float32") /* ty=Tensor[(14, 15, 14), float32] */;
  %716 = dyn.reshape(%713, %714, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %717 = floor_divide(%715, %716) /* ty=Tensor[(14, 15, 14), float32] */;
  (%717,)
}

def @func_7109(%var_7108: Tensor[(16, 13, 2), int8]) -> (Tensor[(6, 1, 12), int32], Tensor[(16, 13, 2), bool], Tensor[(7, 13, 6), uint64], Tensor[(546), bool]) {
  %736 = fn (%var_7074: Tensor[(16, 13, 2), int8]) -> (Tensor[(6, 1, 12), int32], Tensor[(16, 13, 2), bool], Tensor[(7, 13, 6), uint64], Tensor[(546), bool]) {
    %718 = cast(9 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %719 = reshape(%718, newshape=[]) /* ty=int32 */;
    %720 = @func_3958(%719) /* ty=(Tensor[(6, 1, 12), int32], Tensor[(6, 1, 12), uint8]) */;
    %721 = cast(meta[relay.Constant][49] /* ty=Tensor[(16, 13, 2), int8] */, dtype="bool") /* ty=Tensor[(16, 13, 2), bool] */;
    %722 = shape_of(%var_7074, dtype="int32") /* ty=Tensor[(3), int32] */;
    %723 = cast(%var_7074, dtype="bool") /* ty=Tensor[(16, 13, 2), bool] */;
    %724 = dyn.reshape(%721, %722, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %725 = less_equal(%723, %724) /* ty=Tensor[(16, 13, 2), bool] */;
    %726 = cast(9 /* ty=int32 */, dtype="bool") /* ty=bool */;
    %727 = cast(%725, dtype="bool") /* ty=Tensor[(16, 13, 2), bool] */;
    %728 = cast(meta[relay.Constant][50] /* ty=Tensor[(546), bool] */, dtype="bool") /* ty=Tensor[(546), bool] */;
    %729 = cast(meta[relay.Constant][50] /* ty=Tensor[(546), bool] */, dtype="bool") /* ty=Tensor[(546), bool] */;
    %730 = reshape(%728, newshape=[7, 13, 6]) /* ty=Tensor[(7, 13, 6), bool] */;
    %731 = reshape(%729, newshape=[7, 13, 6]) /* ty=Tensor[(7, 13, 6), bool] */;
    %732 = @func_4270(%730, %731) /* ty=(Tensor[(7, 13, 6), uint64],) */;
    %733 = %720.0;
    %734 = logical_or(%726, %727) /* ty=Tensor[(16, 13, 2), bool] */;
    %735 = %732.0;
    (%733, %734, %735, meta[relay.Constant][50] /* ty=Tensor[(546), bool] */)
  };
  %736(%var_7108) /* ty=(Tensor[(6, 1, 12), int32], Tensor[(16, 13, 2), bool], Tensor[(7, 13, 6), uint64], Tensor[(546), bool]) */
}

def @func_12789(%var_12788: Tensor[(4, 16, 8), float64]) -> Tensor[(4, 16, 8), float64] {
  %738 = fn (%var_12771: Tensor[(4, 16, 8), float64]) -> Tensor[(4, 16, 8), float64] {
    %737 = cast(%var_12771, dtype="float64") /* ty=Tensor[(4, 16, 8), float64] */;
    log2(%737) /* ty=Tensor[(4, 16, 8), float64] */
  };
  %738(%var_12788) /* ty=Tensor[(4, 16, 8), float64] */
}

def @func_8746(%var_8744: Tensor[(1350), float32], %var_8745: Tensor[(392), uint64]) -> (Tensor[(8, 16, 8), float64], Tensor[(1350), float32], Tensor[(8, 16, 8), float64], Tensor[(392), uint64]) {
  @func_8742(%var_8744, %var_8745) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(1350), float32], Tensor[(8, 16, 8), float64], Tensor[(392), uint64]) */
}

def @func_8891() -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), int64], Tensor[(7, 3, 15), float32], Tensor[(315), float32]) {
  @func_8889() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), int64], Tensor[(7, 3, 15), float32], Tensor[(315), float32]) */
}

def @func_16724() -> (Tensor[(14, 15, 14), float64], Tensor[(3, 4, 7), int16], uint32, Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32]) {
  %749 = fn () -> (Tensor[(14, 15, 14), float64], Tensor[(3, 4, 7), int16], uint32, Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32]) {
    %739 = @func_13615() /* ty=(Tensor[(14, 15, 14), float64],) */;
    %740 = cast(meta[relay.Constant][51] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %741 = reshape(%740, newshape=[]) /* ty=uint32 */;
    %742 = @func_12669(%741) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(3, 4, 7), int16], uint32, Tensor[(8, 16, 8), float64]) */;
    %743 = @func_10030() /* ty=(Tensor[(8, 16, 8), float64],) */;
    %744 = @func_7874() /* ty=(Tensor[(8, 16, 8), float32],) */;
    %745 = %739.0;
    %746 = %742.1;
    %747 = %743.0;
    %748 = %744.0;
    (%745, %746, meta[relay.Constant][51] /* ty=uint32 */, %747, %748)
  };
  %749() /* ty=(Tensor[(14, 15, 14), float64], Tensor[(3, 4, 7), int16], uint32, Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32]) */
}

def @func_7899(%var_7897: Tensor[(56, 8), uint64]) -> (Tensor[(8, 16, 8), float64], Tensor[(7, 4, 16), bool], uint64, Tensor[(56, 8), uint64]) {
  @func_7896(%var_7897) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(7, 4, 16), bool], uint64, Tensor[(56, 8), uint64]) */
}

def @func_15773() -> (Tensor[(8, 16, 8), float32],) {
  @func_15771() /* ty=(Tensor[(8, 16, 8), float32],) */
}

def @func_7715() -> (Tensor[(8, 16, 8), float64],) {
  %752 = fn () -> (Tensor[(8, 16, 8), float64],) {
    %750 = cast(meta[relay.Constant][52] /* ty=Tensor[(8, 16, 8), float64] */, dtype="float64") /* ty=Tensor[(8, 16, 8), float64] */;
    %751 = erf(%750) /* ty=Tensor[(8, 16, 8), float64] */;
    (%751,)
  };
  %752() /* ty=(Tensor[(8, 16, 8), float64],) */
}

def @func_17804() -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32]) {
  @func_17802() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32]) */
}

def @func_8742(%var_8717: Tensor[(1350), float32], %var_8740: Tensor[(392), uint64]) -> (Tensor[(8, 16, 8), float64], Tensor[(1350), float32], Tensor[(8, 16, 8), float64], Tensor[(392), uint64]) {
  %753 = cast(%var_8717, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %754 = reshape(%753, newshape=[10, 9, 15]) /* ty=Tensor[(10, 9, 15), float32] */;
  %755 = @func_7200(%754) /* ty=Tensor[(10, 9, 15), float32] */;
  %756 = cast(%755, dtype="float32") /* ty=Tensor[(10, 9, 15), float32] */;
  %757 = shape_of(%var_8717, dtype="int32") /* ty=Tensor[(1), int32] */;
  %758 = cast(%var_8717, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %759 = dyn.reshape(%756, %757, newshape=[]) /* ty=Tensor[(?), float32] */;
  %760 = cast(%var_8740, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %761 = reshape(%760, newshape=[14, 28]) /* ty=Tensor[(14, 28), uint64] */;
  %762 = @func_8232(%761) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(4, 7, 14), float64], Tensor[(14, 28), uint64]) */;
  %763 = @func_7915() /* ty=Tensor[(8, 16, 8), float64] */;
  %764 = power(%758, %759) /* ty=Tensor[(1350), float32] */;
  %765 = %762.1;
  (%763, %764, %765, %var_8740)
}

def @func_9745() -> (Tensor[(8, 16, 8), float32], Tensor[(315), float32], Tensor[(7, 3, 15), float32], Tensor[(8, 16, 8), int64]) {
  %774 = fn () -> (Tensor[(8, 16, 8), float32], Tensor[(315), float32], Tensor[(7, 3, 15), float32], Tensor[(8, 16, 8), int64]) {
    %766 = @func_8889() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), int64], Tensor[(7, 3, 15), float32], Tensor[(315), float32]) */;
    %767 = %766.3;
    %768 = cast(%767, dtype="float32") /* ty=Tensor[(315), float32] */;
    %769 = reshape(%768, newshape=[7, 3, 15]) /* ty=Tensor[(7, 3, 15), float32] */;
    %770 = @func_8889() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), int64], Tensor[(7, 3, 15), float32], Tensor[(315), float32]) */;
    %771 = @func_9064() /* ty=Tensor[(8, 16, 8), float32] */;
    %772 = @func_6097(%769) /* ty=Tensor[(7, 3, 15), float32] */;
    %773 = %770.1;
    (%771, %767, %772, %773)
  };
  %774() /* ty=(Tensor[(8, 16, 8), float32], Tensor[(315), float32], Tensor[(7, 3, 15), float32], Tensor[(8, 16, 8), int64]) */
}

def @func_9579() -> (Tensor[(8, 16, 8), float64],) {
  @func_9577() /* ty=(Tensor[(8, 16, 8), float64],) */
}

def @func_16648() -> (Tensor[(448), uint64], Tensor[(7, 3, 15), float32], Tensor[(8, 16, 8), float64]) {
  %775 = @func_12096() /* ty=(Tensor[(448), uint64], Tensor[(8, 16, 8), float64], uint64, Tensor[(8, 1), float64], uint64, Tensor[(8, 16, 8), float64]) */;
  %776 = @func_16330() /* ty=(Tensor[(7, 3, 15), float32], Tensor[(8, 16, 8), float64]) */;
  %777 = %775.0;
  %778 = %776.0;
  %779 = @func_9830() /* ty=Tensor[(8, 16, 8), float64] */;
  (%777, %778, %779)
}

def @func_16150(%var_16149: Tensor[(448), uint64]) -> (Tensor[(8, 16, 8), float32], Tensor[(7, 4, 16), bool], uint64, Tensor[(448), uint64]) {
  %787 = fn (%var_16140: Tensor[(448), uint64]) -> (Tensor[(8, 16, 8), float32], Tensor[(7, 4, 16), bool], uint64, Tensor[(448), uint64]) {
    %780 = @func_10354() /* ty=(Tensor[(8, 16, 8), float32], Tensor[(7, 4, 16), bool], uint64, Tensor[(448), uint64], Tensor[(8, 16, 8), float64]) */;
    %781 = cast(meta[relay.Constant][53] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %782 = cast(%var_16140, dtype="uint64") /* ty=Tensor[(448), uint64] */;
    %783 = reshape(%781, newshape=[]) /* ty=uint64 */;
    %784 = reshape(%782, newshape=[7, 4, 16]) /* ty=Tensor[(7, 4, 16), uint64] */;
    %785 = %780.0;
    %786 = @func_2096(%783, %784) /* ty=Tensor[(7, 4, 16), bool] */;
    (%785, %786, meta[relay.Constant][53] /* ty=uint64 */, %var_16140)
  };
  %787(%var_16149) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(7, 4, 16), bool], uint64, Tensor[(448), uint64]) */
}

def @func_13205() -> (Tensor[(14, 15, 14), float64], Tensor[(7, 3, 15), float32], Tensor[(315), float32], Tensor[(8, 16, 8), float32]) {
  %794 = fn () -> (Tensor[(14, 15, 14), float64], Tensor[(7, 3, 15), float32], Tensor[(315), float32], Tensor[(8, 16, 8), float32]) {
    %788 = @func_12378() /* ty=(Tensor[(14, 15, 14), float64],) */;
    %789 = cast(meta[relay.Constant][54] /* ty=Tensor[(315), float32] */, dtype="float32") /* ty=Tensor[(315), float32] */;
    %790 = reshape(%789, newshape=[7, 3, 15]) /* ty=Tensor[(7, 3, 15), float32] */;
    %791 = %788.0;
    %792 = @func_6097(%790) /* ty=Tensor[(7, 3, 15), float32] */;
    %793 = @func_13006() /* ty=Tensor[(8, 16, 8), float32] */;
    (%791, %792, meta[relay.Constant][54] /* ty=Tensor[(315), float32] */, %793)
  };
  %794() /* ty=(Tensor[(14, 15, 14), float64], Tensor[(7, 3, 15), float32], Tensor[(315), float32], Tensor[(8, 16, 8), float32]) */
}

def @func_18609(%var_18600: Tensor[(6, 13, 16), float64]) -> (Tensor[(6, 13, 16), float64], Tensor[(6, 13, 16), float64]) {
  %795 = cast(%var_18600, dtype="float64") /* ty=Tensor[(6, 13, 16), float64] */;
  %796 = cast(%var_18600, dtype="float64") /* ty=Tensor[(6, 13, 16), float64] */;
  %797 = rsqrt(%795) /* ty=Tensor[(6, 13, 16), float64] */;
  %798 = asinh(%796) /* ty=Tensor[(6, 13, 16), float64] */;
  (%797, %798)
}

def @func_9449() -> Tensor[(8, 16, 8), float64] {
  @func_9447() /* ty=Tensor[(8, 16, 8), float64] */
}

def @func_7951(%var_7943: Tensor[(14, 5, 5), bool], %var_7944: Tensor[(14, 5, 5), bool]) -> Tensor[(14, 5, 5), bool] {
  %799 = cast(%var_7944, dtype="bool") /* ty=Tensor[(14, 5, 5), bool] */;
  %800 = shape_of(%var_7943, dtype="int32") /* ty=Tensor[(3), int32] */;
  %801 = cast(%var_7943, dtype="bool") /* ty=Tensor[(14, 5, 5), bool] */;
  %802 = dyn.reshape(%799, %800, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%801, %802) /* ty=Tensor[(14, 5, 5), bool] */
}

def @func_2893(%var_2891: uint16, %var_2892: Tensor[(5, 11, 3), uint16]) -> (Tensor[(5, 11, 3), bool], Tensor[(9, 5, 6), float64], Tensor[(270), float32], Tensor[(14, 15, 14), float64], Tensor[(2940, 1), float64]) {
  %813 = fn (%var_2872: uint16, %var_2873: Tensor[(5, 11, 3), uint16]) -> (Tensor[(5, 11, 3), bool], Tensor[(9, 5, 6), float64], Tensor[(270), float32], Tensor[(14, 15, 14), float64], Tensor[(2940, 1), float64]) {
    %803 = cast(%var_2872, dtype="bool") /* ty=bool */;
    %804 = cast(%var_2873, dtype="bool") /* ty=Tensor[(5, 11, 3), bool] */;
    %805 = cast(meta[relay.Constant][55] /* ty=Tensor[(270), float32] */, dtype="float32") /* ty=Tensor[(270), float32] */;
    %806 = reshape(%805, newshape=[9, 5, 6]) /* ty=Tensor[(9, 5, 6), float32] */;
    %807 = @func_652(%806) /* ty=(Tensor[(9, 5, 6), float64],) */;
    %808 = cast(meta[relay.Constant][56] /* ty=Tensor[(2940, 1), float64] */, dtype="float64") /* ty=Tensor[(2940, 1), float64] */;
    %809 = reshape(%808, newshape=[14, 15, 14]) /* ty=Tensor[(14, 15, 14), float64] */;
    %810 = not_equal(%803, %804) /* ty=Tensor[(5, 11, 3), bool] */;
    %811 = %807.0;
    %812 = @func_2534(%809) /* ty=Tensor[(14, 15, 14), float64] */;
    (%810, %811, meta[relay.Constant][55] /* ty=Tensor[(270), float32] */, %812, meta[relay.Constant][56] /* ty=Tensor[(2940, 1), float64] */)
  };
  %813(%var_2891, %var_2892) /* ty=(Tensor[(5, 11, 3), bool], Tensor[(9, 5, 6), float64], Tensor[(270), float32], Tensor[(14, 15, 14), float64], Tensor[(2940, 1), float64]) */
}

def @func_17610() -> uint64 {
  %814 = @func_12565() /* ty=(Tensor[(315), float32], Tensor[(8, 16, 8), uint32], uint64) */;
  %814.2
}

def @func_6512(%var_6504: Tensor[(2940), float64]) -> (Tensor[(3, 4, 13), int32], Tensor[(14, 15, 14), float64], Tensor[(2940), float64], Tensor[(14, 15, 14), float64]) {
  %815 = cast(meta[relay.Constant][58] /* ty=Tensor[(3, 4, 13), int32] */, dtype="int32") /* ty=Tensor[(3, 4, 13), int32] */;
  %816 = shape_of(meta[relay.Constant][57] /* ty=Tensor[(3, 4, 13), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %817 = cast(meta[relay.Constant][57] /* ty=Tensor[(3, 4, 13), int32] */, dtype="int32") /* ty=Tensor[(3, 4, 13), int32] */;
  %818 = dyn.reshape(%815, %816, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %819 = cast(%var_6504, dtype="float64") /* ty=Tensor[(2940), float64] */;
  %820 = reshape(%819, newshape=[14, 15, 14]) /* ty=Tensor[(14, 15, 14), float64] */;
  %821 = @func_2534(%820) /* ty=Tensor[(14, 15, 14), float64] */;
  %822 = cast(%821, dtype="float64") /* ty=Tensor[(14, 15, 14), float64] */;
  %823 = reshape(%822, newshape=[14, 15, 14]) /* ty=Tensor[(14, 15, 14), float64] */;
  %824 = maximum(%817, %818) /* ty=Tensor[(3, 4, 13), int32] */;
  %825 = @func_2534(%823) /* ty=Tensor[(14, 15, 14), float64] */;
  (%824, %821, %var_6504, %825)
}

def @func_8011(%var_7997: Tensor[(180), int8]) -> (Tensor[(8, 16, 8), float64], Tensor[(2, 9, 10), int8], Tensor[(180), int8]) {
  %826 = cast(%var_7997, dtype="int8") /* ty=Tensor[(180), int8] */;
  %827 = cast(%var_7997, dtype="int8") /* ty=Tensor[(180), int8] */;
  %828 = reshape(%826, newshape=[2, 9, 10]) /* ty=Tensor[(2, 9, 10), int8] */;
  %829 = reshape(%827, newshape=[2, 9, 10]) /* ty=Tensor[(2, 9, 10), int8] */;
  %830 = @func_4904(%828, %829) /* ty=(Tensor[(2, 9, 10), int8],) */;
  %831 = @func_7915() /* ty=Tensor[(8, 16, 8), float64] */;
  %832 = %830.0;
  (%831, %832, %var_7997)
}

def @func_8030() -> Tensor[(8, 16, 8), float32] {
  @func_8028() /* ty=Tensor[(8, 16, 8), float32] */
}

def @func_8234(%var_8233: Tensor[(14, 28), uint64]) -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(4, 7, 14), float64], Tensor[(14, 28), uint64]) {
  %840 = fn (%var_8207: Tensor[(14, 28), uint64]) -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(4, 7, 14), float64], Tensor[(14, 28), uint64]) {
    %833 = @func_7714() /* ty=(Tensor[(8, 16, 8), float64],) */;
    %834 = cast(%var_8207, dtype="uint64") /* ty=Tensor[(14, 28), uint64] */;
    %835 = reshape(%834, newshape=[4, 7, 14]) /* ty=Tensor[(4, 7, 14), uint64] */;
    %836 = @func_7629(%835) /* ty=(Tensor[(4, 7, 14), bool], Tensor[(9, 7, 10), float64], Tensor[(630), float64], Tensor[(7, 13, 6), uint64], Tensor[(546), bool], Tensor[(4, 7, 14), uint16], Tensor[(4, 7, 14), float64]) */;
    %837 = %833.0;
    %838 = @func_7783() /* ty=Tensor[(8, 16, 8), float64] */;
    %839 = %836.6;
    (%837, %838, %839, %var_8207)
  };
  %840(%var_8233) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(4, 7, 14), float64], Tensor[(14, 28), uint64]) */
}

def @func_8606() -> (Tensor[(8, 16, 8), float64],) {
  %841 = @func_7783() /* ty=Tensor[(8, 16, 8), float64] */;
  (%841,)
}

def @func_12271(%var_12218: Tensor[(14, 1, 2), int16]) -> (Tensor[(8, 16, 8), float32], Tensor[(4, 7, 14), float64], Tensor[(7, 56), uint64], Tensor[(14, ?, 2), bool]) {
  %842 = cast(meta[relay.Constant][59] /* ty=Tensor[(7, 56), uint64] */, dtype="uint64") /* ty=Tensor[(7, 56), uint64] */;
  %843 = reshape(%842, newshape=[4, 7, 14]) /* ty=Tensor[(4, 7, 14), uint64] */;
  %844 = @func_7629(%843) /* ty=(Tensor[(4, 7, 14), bool], Tensor[(9, 7, 10), float64], Tensor[(630), float64], Tensor[(7, 13, 6), uint64], Tensor[(546), bool], Tensor[(4, 7, 14), uint16], Tensor[(4, 7, 14), float64]) */;
  %845 = cast(meta[relay.Constant][60] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %846 = cast(%var_12218, dtype="int16") /* ty=Tensor[(14, 1, 2), int16] */;
  %847 = logical_xor(%845, %846) /* ty=Tensor[(14, 1, 2), int16] */;
  %848 = cast(%var_12218, dtype="bool") /* ty=Tensor[(14, 1, 2), bool] */;
  %849 = shape_of(%847, dtype="int32") /* ty=Tensor[(3), int32] */;
  %850 = cast(%847, dtype="bool") /* ty=Tensor[(14, 1, 2), bool] */;
  %851 = dyn.reshape(%848, %849, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %852 = @func_11546() /* ty=Tensor[(8, 16, 8), float32] */;
  %853 = %844.6;
  %854 = greater_equal(%850, %851) /* ty=Tensor[(14, ?, 2), bool] */;
  (%852, %853, meta[relay.Constant][59] /* ty=Tensor[(7, 56), uint64] */, %854)
}

def @func_10118(%var_10117: uint32) -> (Tensor[(8, 16, 8), float32], Tensor[(3, 4, 7), int16], uint32, Tensor[(84), bool]) {
  %868 = fn (%var_10104: uint32) -> (Tensor[(8, 16, 8), float32], Tensor[(3, 4, 7), int16], uint32, Tensor[(84), bool]) {
    %855 = @func_9577() /* ty=(Tensor[(8, 16, 8), float64],) */;
    %856 = %855.0;
    %857 = cast(meta[relay.Constant][61] /* ty=Tensor[(8, 16, 8), float64] */, dtype="float32") /* ty=Tensor[(8, 16, 8), float32] */;
    %858 = shape_of(%856, dtype="int32") /* ty=Tensor[(3), int32] */;
    %859 = cast(%856, dtype="float32") /* ty=Tensor[(8, 16, 8), float32] */;
    %860 = dyn.reshape(%857, %858, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %861 = cast(%var_10104, dtype="uint32") /* ty=uint32 */;
    %862 = cast(meta[relay.Constant][62] /* ty=Tensor[(84), bool] */, dtype="bool") /* ty=Tensor[(84), bool] */;
    %863 = reshape(%861, newshape=[]) /* ty=uint32 */;
    %864 = reshape(%862, newshape=[3, 4, 7]) /* ty=Tensor[(3, 4, 7), bool] */;
    %865 = @func_9352(%863, %864) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(3, 4, 7), int16]) */;
    %866 = floor_mod(%859, %860) /* ty=Tensor[(8, 16, 8), float32] */;
    %867 = %865.1;
    (%866, %867, %var_10104, meta[relay.Constant][62] /* ty=Tensor[(84), bool] */)
  };
  %868(%var_10117) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(3, 4, 7), int16], uint32, Tensor[(84), bool]) */
}

def @func_15398() -> Tensor[(8, 16, 8), float32] {
  %869 = @func_7874() /* ty=(Tensor[(8, 16, 8), float32],) */;
  %869.0
}

def @func_16301() -> (Tensor[(8, 16, 8), float32], Tensor[(14, 15, 14), float64]) {
  %870 = @func_14772() /* ty=(Tensor[(8, 16, 8), float32],) */;
  %871 = @func_13615() /* ty=(Tensor[(14, 15, 14), float64],) */;
  %872 = %870.0;
  %873 = %871.0;
  (%872, %873)
}

def @func_15709(%var_15658: Tensor[(512), float64]) -> (Tensor[(8, 16, 8), int64], Tensor[(8, 1), float64], Tensor[(9, 7, 10), float64], float64, Tensor[(512), float64], Tensor[(392), uint64], Tensor[(14, 15, 14), float64], Tensor[(8, 16, 8), float64], Tensor[(9, 5, 13), float64], Tensor[(5, 117), float64]) {
  %874 = @func_8889() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), int64], Tensor[(7, 3, 15), float32], Tensor[(315), float32]) */;
  %875 = cast(2.19055f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %876 = cast(%var_15658, dtype="float64") /* ty=Tensor[(512), float64] */;
  %877 = cast(meta[relay.Constant][63] /* ty=Tensor[(392), uint64] */, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %878 = reshape(%875, newshape=[]) /* ty=float64 */;
  %879 = reshape(%876, newshape=[4, 8, 16]) /* ty=Tensor[(4, 8, 16), float64] */;
  %880 = reshape(%877, newshape=[392]) /* ty=Tensor[(392), uint64] */;
  %881 = @func_12123(%878, %879, %880) /* ty=(Tensor[(4, 8, 16), int8], Tensor[(9, 7, 10), float64], Tensor[(392), uint64], Tensor[(8, 16, 8), float64]) */;
  %882 = @func_14262() /* ty=(Tensor[(14, 15, 14), float64], Tensor[(8, 16, 8), float64]) */;
  %883 = @func_14262() /* ty=(Tensor[(14, 15, 14), float64], Tensor[(8, 16, 8), float64]) */;
  %884 = cast(meta[relay.Constant][64] /* ty=Tensor[(5, 117), float64] */, dtype="float64") /* ty=Tensor[(5, 117), float64] */;
  %885 = reshape(%884, newshape=[65, 9]) /* ty=Tensor[(65, 9), float64] */;
  %886 = @func_11268(%885) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(9, 5, 13), float64], Tensor[(65, 9), float64]) */;
  %887 = %874.1;
  %888 = @func_15306() /* ty=Tensor[(8, 1), float64] */;
  %889 = %881.1;
  %890 = %882.0;
  %891 = %883.1;
  %892 = %886.1;
  (%887, %888, %889, 2.19055f64 /* ty=float64 */, %var_15658, meta[relay.Constant][63] /* ty=Tensor[(392), uint64] */, %890, %891, %892, meta[relay.Constant][64] /* ty=Tensor[(5, 117), float64] */)
}

def @func_7874() -> (Tensor[(8, 16, 8), float32],) {
  %893 = @func_7714() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %894 = %893.0;
  %895 = cast(%894, dtype="float32") /* ty=Tensor[(8, 16, 8), float32] */;
  %896 = sinh(%895) /* ty=Tensor[(8, 16, 8), float32] */;
  (%896,)
}

def @func_11441() -> (Tensor[(8, 16, 8), float64],) {
  %900 = fn () -> (Tensor[(8, 16, 8), float64],) {
    %897 = @func_9795() /* ty=Tensor[(8, 16, 8), float64] */;
    %898 = cast(%897, dtype="float64") /* ty=Tensor[(8, 16, 8), float64] */;
    %899 = log2(%898) /* ty=Tensor[(8, 16, 8), float64] */;
    (%899,)
  };
  %900() /* ty=(Tensor[(8, 16, 8), float64],) */
}

def @func_14869(%var_14815: Tensor[(2250), float32]) -> (Tensor[(8, 16, 8), float32], Tensor[(2250), float32], Tensor[(270), float32], Tensor[(14, ?, 2), bool], Tensor[(28), int16], Tensor[(8, 16, 8), float64], Tensor[(270), float64], Tensor[(770, 3), float64], Tensor[(490), float64]) {
  %901 = cast(meta[relay.Constant][66] /* ty=Tensor[(770, 3), float32] */, dtype="float32") /* ty=Tensor[(770, 3), float32] */;
  %902 = cast(meta[relay.Constant][66] /* ty=Tensor[(770, 3), float32] */, dtype="float32") /* ty=Tensor[(770, 3), float32] */;
  %903 = cast(meta[relay.Constant][65] /* ty=Tensor[(270), float32] */, dtype="float32") /* ty=Tensor[(270), float32] */;
  %904 = cast(%var_14815, dtype="float32") /* ty=Tensor[(2250), float32] */;
  %905 = reshape(%901, newshape=[11, 15, 14]) /* ty=Tensor[(11, 15, 14), float32] */;
  %906 = reshape(%902, newshape=[11, 15, 14]) /* ty=Tensor[(11, 15, 14), float32] */;
  %907 = reshape(%903, newshape=[30, 9]) /* ty=Tensor[(30, 9), float32] */;
  %908 = reshape(%904, newshape=[2250]) /* ty=Tensor[(2250), float32] */;
  %909 = @func_2639(%905, %906, %907, %908) /* ty=(Tensor[(11, 15, 14), float32], Tensor[(9, 5, 6), float64], Tensor[(30, 9), float32], Tensor[(30, 9), float32], Tensor[(2250), float32], Tensor[(16, 15, 5), float32], Tensor[(224), int64], uint32) */;
  %910 = %909.7;
  %911 = cast(meta[relay.Constant][65] /* ty=Tensor[(270), float32] */, dtype="float32") /* ty=Tensor[(270), float32] */;
  %912 = cast(%910, dtype="float32") /* ty=float32 */;
  %913 = cast(meta[relay.Constant][67] /* ty=Tensor[(28), int16] */, dtype="int16") /* ty=Tensor[(28), int16] */;
  %914 = reshape(%913, newshape=[14, 1, 2]) /* ty=Tensor[(14, 1, 2), int16] */;
  %915 = @func_12271(%914) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(4, 7, 14), float64], Tensor[(7, 56), uint64], Tensor[(14, ?, 2), bool]) */;
  %916 = mod(%911, %912) /* ty=Tensor[(270), float32] */;
  %917 = cast(%916, dtype="float64") /* ty=Tensor[(270), float64] */;
  %918 = reshape(%917, newshape=[270]) /* ty=Tensor[(270), float64] */;
  %919 = @func_14665(%918) /* ty=(Tensor[(16, 10, 7), bool], Tensor[(8, 16, 8), float64], Tensor[(495, 1), float32], Tensor[(270), float64]) */;
  %920 = cast(meta[relay.Constant][66] /* ty=Tensor[(770, 3), float32] */, dtype="float64") /* ty=Tensor[(770, 3), float64] */;
  %921 = @func_13239() /* ty=(Tensor[(8, 1), float64], Tensor[(16, 15, 5), float32], Tensor[(1, 224), int64], uint32, Tensor[(7, 7, 10), float64], Tensor[(490), float64], Tensor[(8, 16, 8), float64]) */;
  %922 = @func_9013() /* ty=Tensor[(8, 16, 8), float32] */;
  %923 = %915.3;
  %924 = @func_9795() /* ty=Tensor[(8, 16, 8), float64] */;
  %925 = %919.3;
  %926 = atanh(%920) /* ty=Tensor[(770, 3), float64] */;
  %927 = %921.5;
  (%922, %var_14815, %916, %923, meta[relay.Constant][67] /* ty=Tensor[(28), int16] */, %924, %925, %926, %927)
}

def @func_14429() -> (Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], Tensor[(350), int64], Tensor[(224), int64]) {
  @func_14427() /* ty=(Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], Tensor[(350), int64], Tensor[(224), int64]) */
}

def @func_17333() -> Tensor[(8, 16, 8), float32] {
  %928 = @func_16598() /* ty=(Tensor[(8, 16, 8), float32],) */;
  %928.0
}

def @func_6515(%var_6513: Tensor[(2940), float64]) -> (Tensor[(3, 4, 13), int32], Tensor[(14, 15, 14), float64], Tensor[(2940), float64], Tensor[(14, 15, 14), float64]) {
  @func_6512(%var_6513) /* ty=(Tensor[(3, 4, 13), int32], Tensor[(14, 15, 14), float64], Tensor[(2940), float64], Tensor[(14, 15, 14), float64]) */
}

def @func_15307() -> Tensor[(8, 1), float64] {
  %930 = fn () -> Tensor[(8, 1), float64] {
    %929 = @func_13553() /* ty=(Tensor[(8, 1), float64],) */;
    %929.0
  };
  %930() /* ty=Tensor[(8, 1), float64] */
}

def @func_8014(%var_8012: Tensor[(180), int8]) -> (Tensor[(8, 16, 8), float64], Tensor[(2, 9, 10), int8], Tensor[(180), int8]) {
  @func_8011(%var_8012) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(2, 9, 10), int8], Tensor[(180), int8]) */
}

def @func_10597() -> (Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float64]) {
  %933 = fn () -> (Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float64]) {
    %931 = @func_9380() /* ty=Tensor[(8, 16, 8), float32] */;
    %932 = @func_10300() /* ty=Tensor[(8, 16, 8), float64] */;
    (%931, %932)
  };
  %933() /* ty=(Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float64]) */
}

def @func_14035(%var_14021: Tensor[(9, 5, 6), float64]) -> (Tensor[(8, 16, 8), float32], Tensor[(270), float32], Tensor[(8, 16, 8), float64], Tensor[(15, 3, 11), float32], Tensor[(495, 1), float32], Tensor[(9, 5, 6), bool]) {
  %934 = @func_12730() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32]) */;
  %935 = cast(meta[relay.Constant][69] /* ty=Tensor[(495, 1), float32] */, dtype="float32") /* ty=Tensor[(495, 1), float32] */;
  %936 = reshape(%935, newshape=[15, 3, 11]) /* ty=Tensor[(15, 3, 11), float32] */;
  %937 = cast(meta[relay.Constant][68] /* ty=Tensor[(270), float32] */, dtype="float32") /* ty=Tensor[(270), float32] */;
  %938 = reshape(%937, newshape=[9, 5, 6]) /* ty=Tensor[(9, 5, 6), float32] */;
  %939 = @func_652(%938) /* ty=(Tensor[(9, 5, 6), float64],) */;
  %940 = %939.0;
  %941 = cast(%var_14021, dtype="bool") /* ty=Tensor[(9, 5, 6), bool] */;
  %942 = shape_of(%940, dtype="int32") /* ty=Tensor[(3), int32] */;
  %943 = cast(%940, dtype="bool") /* ty=Tensor[(9, 5, 6), bool] */;
  %944 = dyn.reshape(%941, %942, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %945 = @func_9380() /* ty=Tensor[(8, 16, 8), float32] */;
  %946 = %934.2;
  %947 = @func_11501(%936) /* ty=Tensor[(15, 3, 11), float32] */;
  %948 = greater(%943, %944) /* ty=Tensor[(9, 5, 6), bool] */;
  (%945, meta[relay.Constant][68] /* ty=Tensor[(270), float32] */, %946, %947, meta[relay.Constant][69] /* ty=Tensor[(495, 1), float32] */, %948)
}

def @func_13260() -> Tensor[(8, 16, 8), float32] {
  @func_13258() /* ty=Tensor[(8, 16, 8), float32] */
}

def @func_7318(%var_7316: Tensor[(3, 1, 1), float32], %var_7317: Tensor[(3, 6, 7), float32]) -> Tensor[(3, 6, 7), float32] {
  @func_7314(%var_7316, %var_7317) /* ty=Tensor[(3, 6, 7), float32] */
}

def @func_9516() -> (Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64], Tensor[(392), uint64]) {
  @func_9514() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64], Tensor[(392), uint64]) */
}

def @func_11796(%var_11794: Tensor[(8, 16, 8), float64], %var_11795: Tensor[(585), float64]) -> (Tensor[(8, 16, 8), uint16], Tensor[(7, 3, 15), float32], Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(9, 5, 13), float64], Tensor[(585), float64]) {
  @func_11792(%var_11794, %var_11795) /* ty=(Tensor[(8, 16, 8), uint16], Tensor[(7, 3, 15), float32], Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(9, 5, 13), float64], Tensor[(585), float64]) */
}

def @func_13484() -> (Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float64]) {
  @func_13482() /* ty=(Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float64]) */
}

def @func_17802() -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32]) {
  %949 = @func_17082() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64]) */;
  %950 = %949.1;
  %951 = @func_8028() /* ty=Tensor[(8, 16, 8), float32] */;
  (%950, %951)
}

def @func_11268(%var_11260: Tensor[(65, 9), float64]) -> (Tensor[(8, 16, 8), float64], Tensor[(9, 5, 13), float64], Tensor[(65, 9), float64]) {
  %952 = @func_8501() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64], Tensor[(2940), float64]) */;
  %953 = cast(%var_11260, dtype="float64") /* ty=Tensor[(65, 9), float64] */;
  %954 = reshape(%953, newshape=[9, 5, 13]) /* ty=Tensor[(9, 5, 13), float64] */;
  %955 = %952.0;
  %956 = @func_7412(%954) /* ty=Tensor[(9, 5, 13), float64] */;
  (%955, %956, %var_11260)
}

def @func_10031() -> (Tensor[(8, 16, 8), float64],) {
  %958 = fn () -> (Tensor[(8, 16, 8), float64],) {
    %957 = @func_9830() /* ty=Tensor[(8, 16, 8), float64] */;
    (%957,)
  };
  %958() /* ty=(Tensor[(8, 16, 8), float64],) */
}

def @func_18071(%var_18069: Tensor[(8), float64], %var_18070: Tensor[(2, 224), uint64]) -> (Tensor[(8, 16, 8), float32], Tensor[(8), float64], Tensor[(8, 16, 8), float64], Tensor[(2, 224), float64], uint64, Tensor[(2, 224), float64]) {
  %982 = fn (%var_17999: Tensor[(8), float64], %var_18001: Tensor[(2, 224), uint64]) -> (Tensor[(8, 16, 8), float32], Tensor[(8), float64], Tensor[(8, 16, 8), float64], Tensor[(2, 224), float64], uint64, Tensor[(2, 224), float64]) {
    %959 = cast(%var_17999, dtype="float64") /* ty=Tensor[(8), float64] */;
    %960 = cast(meta[relay.Constant][70] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %961 = cast(%var_18001, dtype="uint64") /* ty=Tensor[(2, 224), uint64] */;
    %962 = reshape(%959, newshape=[2, 1, 4]) /* ty=Tensor[(2, 1, 4), float64] */;
    %963 = reshape(%960, newshape=[]) /* ty=uint64 */;
    %964 = reshape(%961, newshape=[448]) /* ty=Tensor[(448), uint64] */;
    %965 = @func_4427(%962, %963, %964) /* ty=(Tensor[(2, 1, 4), float64], Tensor[(7, 4, 16), bool], uint64, Tensor[(448), uint64]) */;
    %966 = %965.1;
    %967 = cast(%966, dtype="int64") /* ty=Tensor[(7, 4, 16), int64] */;
    %968 = shape_of(%var_18001, dtype="int32") /* ty=Tensor[(2), int32] */;
    %969 = cast(%var_18001, dtype="int64") /* ty=Tensor[(2, 224), int64] */;
    %970 = dyn.reshape(%967, %968, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
    %971 = maximum(%969, %970) /* ty=Tensor[(2, 224), int64] */;
    %972 = cast(meta[relay.Constant][70] /* ty=uint64 */, dtype="int16") /* ty=int16 */;
    %973 = cast(%971, dtype="int16") /* ty=Tensor[(2, 224), int16] */;
    %974 = bitwise_xor(%972, %973) /* ty=Tensor[(2, 224), int16] */;
    %975 = cast(%974, dtype="float64") /* ty=Tensor[(2, 224), float64] */;
    %976 = cast(%var_18001, dtype="float64") /* ty=Tensor[(2, 224), float64] */;
    %977 = @func_11546() /* ty=Tensor[(8, 16, 8), float32] */;
    %978 = @func_7915() /* ty=Tensor[(8, 16, 8), float64] */;
    %979 = sin(%975) /* ty=Tensor[(2, 224), float64] */;
    %980 = @func_17610() /* ty=uint64 */;
    %981 = log2(%976) /* ty=Tensor[(2, 224), float64] */;
    (%977, %var_17999, %978, %979, %980, %981)
  };
  %982(%var_18069, %var_18070) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(8), float64], Tensor[(8, 16, 8), float64], Tensor[(2, 224), float64], uint64, Tensor[(2, 224), float64]) */
}

def @func_15771() -> (Tensor[(8, 16, 8), float32],) {
  %983 = @func_15635() /* ty=(Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32]) */;
  %984 = %983.1;
  (%984,)
}

def @func_1485(%var_1443: Tensor[(7, 4, 8), int64], %var_1444: Tensor[(7, 4, 8), int64], %var_1460: uint32) -> (Tensor[(7, 4, 8), int64], Tensor[(16, 15, 5), uint32], uint32, Tensor[(16, 15, 5), float32], Tensor[(16, 15, 5), float32]) {
  %985 = cast(%var_1444, dtype="int64") /* ty=Tensor[(7, 4, 8), int64] */;
  %986 = shape_of(%var_1443, dtype="int32") /* ty=Tensor[(3), int32] */;
  %987 = cast(%var_1443, dtype="int64") /* ty=Tensor[(7, 4, 8), int64] */;
  %988 = dyn.reshape(%985, %986, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %989 = cast(%var_1460, dtype="uint32") /* ty=uint32 */;
  %990 = reshape(%989, newshape=[]) /* ty=uint32 */;
  %991 = @func_551(%990) /* ty=(Tensor[(16, 15, 5), uint32], Tensor[(16, 15, 5), float32], Tensor[(16, 15, 5), float32]) */;
  %992 = cast(%var_1460, dtype="uint32") /* ty=uint32 */;
  %993 = reshape(%992, newshape=[]) /* ty=uint32 */;
  %994 = @func_551(%993) /* ty=(Tensor[(16, 15, 5), uint32], Tensor[(16, 15, 5), float32], Tensor[(16, 15, 5), float32]) */;
  %995 = cast(%var_1460, dtype="uint32") /* ty=uint32 */;
  %996 = reshape(%995, newshape=[]) /* ty=uint32 */;
  %997 = @func_551(%996) /* ty=(Tensor[(16, 15, 5), uint32], Tensor[(16, 15, 5), float32], Tensor[(16, 15, 5), float32]) */;
  %998 = right_shift(%987, %988) /* ty=Tensor[(7, 4, 8), int64] */;
  %999 = %991.0;
  %1000 = %994.1;
  %1001 = %997.1;
  (%998, %999, %var_1460, %1000, %1001)
}

def @func_14572(%var_14566: Tensor[(1350), float32]) -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32], Tensor[(1350), float32]) {
  %1002 = cast(%var_14566, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %1003 = reshape(%1002, newshape=[9, 150]) /* ty=Tensor[(9, 150), float32] */;
  %1004 = @func_10940(%1003) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(7, 13, 6), uint64], Tensor[(546), bool], Tensor[(8, 16, 8), float64], Tensor[(9, 150), float32], Tensor[(392), uint64]) */;
  %1005 = @func_7915() /* ty=Tensor[(8, 16, 8), float64] */;
  %1006 = %1004.0;
  (%1005, %1006, %var_14566)
}

def @func_18474(%var_18472: bool) -> (Tensor[(8, 16, 8), float32], Tensor[(3, 4, 9), bool], bool, Tensor[(108), bool]) {
  @func_18471(%var_18472) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(3, 4, 9), bool], bool, Tensor[(108), bool]) */
}

def @func_10354() -> (Tensor[(8, 16, 8), float32], Tensor[(7, 4, 16), bool], uint64, Tensor[(448), uint64], Tensor[(8, 16, 8), float64]) {
  %1007 = @func_7874() /* ty=(Tensor[(8, 16, 8), float32],) */;
  %1008 = cast(meta[relay.Constant][71] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %1009 = cast(meta[relay.Constant][72] /* ty=Tensor[(448), uint64] */, dtype="uint64") /* ty=Tensor[(448), uint64] */;
  %1010 = reshape(%1008, newshape=[]) /* ty=uint64 */;
  %1011 = reshape(%1009, newshape=[7, 4, 16]) /* ty=Tensor[(7, 4, 16), uint64] */;
  %1012 = @func_9577() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %1013 = %1007.0;
  %1014 = @func_2096(%1010, %1011) /* ty=Tensor[(7, 4, 16), bool] */;
  %1015 = %1012.0;
  (%1013, %1014, meta[relay.Constant][71] /* ty=uint64 */, meta[relay.Constant][72] /* ty=Tensor[(448), uint64] */, %1015)
}

def @func_3445(%var_3437: Tensor[(9, 7, 10), float64]) -> (Tensor[(9, 7, 10), float64],) {
  %1016 = cast(%var_3437, dtype="float64") /* ty=Tensor[(9, 7, 10), float64] */;
  %1017 = acos(%1016) /* ty=Tensor[(9, 7, 10), float64] */;
  (%1017,)
}

def @func_16805() -> Tensor[(8, 16, 8), float64] {
  %1018 = @func_8889() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), int64], Tensor[(7, 3, 15), float32], Tensor[(315), float32]) */;
  %1018.0
}

def @func_3448(%var_3446: Tensor[(9, 7, 10), float64]) -> (Tensor[(9, 7, 10), float64],) {
  @func_3445(%var_3446) /* ty=(Tensor[(9, 7, 10), float64],) */
}

def @func_15573() -> Tensor[(14, 15, 14), float64] {
  @func_15571() /* ty=Tensor[(14, 15, 14), float64] */
}

def @func_15458() -> Tensor[(8, 16, 8), float64] {
  %1020 = fn () -> Tensor[(8, 16, 8), float64] {
    %1019 = @func_11129() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(270), float32]) */;
    %1019.0
  };
  %1020() /* ty=Tensor[(8, 16, 8), float64] */
}

def @func_10878() -> (Tensor[(8, 16, 8), float64],) {
  @func_10876() /* ty=(Tensor[(8, 16, 8), float64],) */
}

def @func_10942(%var_10941: Tensor[(9, 150), float32]) -> (Tensor[(8, 16, 8), float32], Tensor[(7, 13, 6), uint64], Tensor[(546), bool], Tensor[(8, 16, 8), float64], Tensor[(9, 150), float32], Tensor[(392), uint64]) {
  %1034 = fn (%var_10922: Tensor[(9, 150), float32]) -> (Tensor[(8, 16, 8), float32], Tensor[(7, 13, 6), uint64], Tensor[(546), bool], Tensor[(8, 16, 8), float64], Tensor[(9, 150), float32], Tensor[(392), uint64]) {
    %1021 = cast(meta[relay.Constant][73] /* ty=Tensor[(546), bool] */, dtype="bool") /* ty=Tensor[(546), bool] */;
    %1022 = cast(meta[relay.Constant][73] /* ty=Tensor[(546), bool] */, dtype="bool") /* ty=Tensor[(546), bool] */;
    %1023 = reshape(%1021, newshape=[7, 13, 6]) /* ty=Tensor[(7, 13, 6), bool] */;
    %1024 = reshape(%1022, newshape=[7, 13, 6]) /* ty=Tensor[(7, 13, 6), bool] */;
    %1025 = @func_4270(%1023, %1024) /* ty=(Tensor[(7, 13, 6), uint64],) */;
    %1026 = cast(%var_10922, dtype="float32") /* ty=Tensor[(9, 150), float32] */;
    %1027 = cast(meta[relay.Constant][74] /* ty=Tensor[(392), uint64] */, dtype="uint64") /* ty=Tensor[(392), uint64] */;
    %1028 = reshape(%1026, newshape=[1350]) /* ty=Tensor[(1350), float32] */;
    %1029 = reshape(%1027, newshape=[392]) /* ty=Tensor[(392), uint64] */;
    %1030 = @func_8742(%1028, %1029) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(1350), float32], Tensor[(8, 16, 8), float64], Tensor[(392), uint64]) */;
    %1031 = @func_8028() /* ty=Tensor[(8, 16, 8), float32] */;
    %1032 = %1025.0;
    %1033 = %1030.2;
    (%1031, %1032, meta[relay.Constant][73] /* ty=Tensor[(546), bool] */, %1033, %var_10922, meta[relay.Constant][74] /* ty=Tensor[(392), uint64] */)
  };
  %1034(%var_10941) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(7, 13, 6), uint64], Tensor[(546), bool], Tensor[(8, 16, 8), float64], Tensor[(9, 150), float32], Tensor[(392), uint64]) */
}

def @func_8589(%var_8568: Tensor[(1, 11), uint16], %var_8578: Tensor[(3, 88), float64]) -> (Tensor[(8, 16, 8), float32], Tensor[(7, 78), bool], Tensor[(624), int64], Tensor[(2250), uint16], Tensor[(1, 11), uint16], Tensor[(8, 11, 3), float64], Tensor[(3, 88), float64]) {
  %1035 = cast(meta[relay.Constant][75] /* ty=Tensor[(624), int64] */, dtype="int64") /* ty=Tensor[(624), int64] */;
  %1036 = cast(meta[relay.Constant][76] /* ty=Tensor[(2250), uint16] */, dtype="uint16") /* ty=Tensor[(2250), uint16] */;
  %1037 = cast(%var_8568, dtype="uint16") /* ty=Tensor[(1, 11), uint16] */;
  %1038 = reshape(%1035, newshape=[3, 13, 16]) /* ty=Tensor[(3, 13, 16), int64] */;
  %1039 = reshape(%1036, newshape=[15, 15, 10]) /* ty=Tensor[(15, 15, 10), uint16] */;
  %1040 = reshape(%1037, newshape=[11]) /* ty=Tensor[(11), uint16] */;
  %1041 = @func_8119(%1038, %1039, %1040) /* ty=(Tensor[(3, 13, 16), int64], Tensor[(7, 13, 6), uint64], Tensor[(7, 78), bool], Tensor[(7, 13, 6), uint64], Tensor[(2250), uint16], Tensor[(15, 15, 10), bool], Tensor[(6, 1, 12), uint8], Tensor[(11), uint16]) */;
  %1042 = cast(%var_8578, dtype="float64") /* ty=Tensor[(3, 88), float64] */;
  %1043 = reshape(%1042, newshape=[8, 11, 3]) /* ty=Tensor[(8, 11, 3), float64] */;
  %1044 = @func_8347(%1043) /* ty=(Tensor[(8, 11, 3), float64],) */;
  %1045 = @func_8028() /* ty=Tensor[(8, 16, 8), float32] */;
  %1046 = %1041.2;
  %1047 = %1044.0;
  (%1045, %1046, meta[relay.Constant][75] /* ty=Tensor[(624), int64] */, meta[relay.Constant][76] /* ty=Tensor[(2250), uint16] */, %var_8568, %1047, %var_8578)
}

def @func_11271(%var_11269: Tensor[(65, 9), float64]) -> (Tensor[(8, 16, 8), float64], Tensor[(9, 5, 13), float64], Tensor[(65, 9), float64]) {
  @func_11268(%var_11269) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(9, 5, 13), float64], Tensor[(65, 9), float64]) */
}

def @func_4273(%var_4271: Tensor[(7, 13, 6), bool], %var_4272: Tensor[(7, 13, 6), bool]) -> (Tensor[(7, 13, 6), uint64],) {
  %1058 = fn (%var_4250: Tensor[(7, 13, 6), bool], %var_4251: Tensor[(7, 13, 6), bool]) -> (Tensor[(7, 13, 6), uint64],) {
    %1048 = cast(%var_4251, dtype="bool") /* ty=Tensor[(7, 13, 6), bool] */;
    %1049 = shape_of(%var_4250, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1050 = cast(%var_4250, dtype="bool") /* ty=Tensor[(7, 13, 6), bool] */;
    %1051 = dyn.reshape(%1048, %1049, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1052 = logical_and(%1050, %1051) /* ty=Tensor[(7, 13, 6), bool] */;
    %1053 = cast(%1052, dtype="uint64") /* ty=Tensor[(7, 13, 6), uint64] */;
    %1054 = shape_of(%var_4250, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1055 = cast(%var_4250, dtype="uint64") /* ty=Tensor[(7, 13, 6), uint64] */;
    %1056 = dyn.reshape(%1053, %1054, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %1057 = bitwise_and(%1055, %1056) /* ty=Tensor[(7, 13, 6), uint64] */;
    (%1057,)
  };
  %1058(%var_4271, %var_4272) /* ty=(Tensor[(7, 13, 6), uint64],) */
}

def @func_13271() -> (Tensor[(14, 15, 14), float64],) {
  %1061 = fn () -> (Tensor[(14, 15, 14), float64],) {
    %1059 = @func_9514() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64], Tensor[(392), uint64]) */;
    %1060 = %1059.1;
    (%1060,)
  };
  %1061() /* ty=(Tensor[(14, 15, 14), float64],) */
}

def @func_14540() -> (Tensor[(8, 16, 8), float64], Tensor[(2940), int16]) {
  %1074 = fn () -> (Tensor[(8, 16, 8), float64], Tensor[(2940), int16]) {
    %1062 = cast(meta[relay.Constant][77] /* ty=Tensor[(2940), float64] */, dtype="float32") /* ty=Tensor[(2940), float32] */;
    %1063 = acosh(%1062) /* ty=Tensor[(2940), float32] */;
    %1064 = cast(meta[relay.Constant][77] /* ty=Tensor[(2940), float64] */, dtype="float64") /* ty=Tensor[(2940), float64] */;
    %1065 = reshape(%1064, newshape=[2940]) /* ty=Tensor[(2940), float64] */;
    %1066 = @func_6512(%1065) /* ty=(Tensor[(3, 4, 13), int32], Tensor[(14, 15, 14), float64], Tensor[(2940), float64], Tensor[(14, 15, 14), float64]) */;
    %1067 = %1066.1;
    %1068 = cast(%1067, dtype="int16") /* ty=Tensor[(14, 15, 14), int16] */;
    %1069 = shape_of(%1063, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1070 = cast(%1063, dtype="int16") /* ty=Tensor[(2940), int16] */;
    %1071 = dyn.reshape(%1068, %1069, newshape=[]) /* ty=Tensor[(?), int16] */;
    %1072 = @func_9830() /* ty=Tensor[(8, 16, 8), float64] */;
    %1073 = logical_xor(%1070, %1071) /* ty=Tensor[(2940), int16] */;
    (%1072, %1073)
  };
  %1074() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(2940), int16]) */
}

def @func_9830() -> Tensor[(8, 16, 8), float64] {
  %1075 = @func_8501() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64], Tensor[(2940), float64]) */;
  %1075.0
}

def @func_676(%var_674: Tensor[(15, 15, 10), uint16]) -> (Tensor[(15, 15, 10), uint16],) {
  @func_673(%var_674) /* ty=(Tensor[(15, 15, 10), uint16],) */
}

def @func_10302() -> Tensor[(8, 16, 8), float64] {
  @func_10300() /* ty=Tensor[(8, 16, 8), float64] */
}

def @func_16899() -> (Tensor[(8, 16, 8), float32], uint64, Tensor[(2940), float64]) {
  @func_16897() /* ty=(Tensor[(8, 16, 8), float32], uint64, Tensor[(2940), float64]) */
}

def @func_18409() -> Tensor[(8, 16, 8), float32] {
  %1076 = @func_15824() /* ty=(Tensor[(8, 16, 8), float32],) */;
  %1076.0
}

def @func_13553() -> (Tensor[(8, 1), float64],) {
  %1077 = @func_12096() /* ty=(Tensor[(448), uint64], Tensor[(8, 16, 8), float64], uint64, Tensor[(8, 1), float64], uint64, Tensor[(8, 16, 8), float64]) */;
  %1078 = %1077.3;
  (%1078,)
}

def @func_12096() -> (Tensor[(448), uint64], Tensor[(8, 16, 8), float64], uint64, Tensor[(8, 1), float64], uint64, Tensor[(8, 16, 8), float64]) {
  %1079 = @func_11330() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(3, 4, 7), int16], uint32, Tensor[(84), bool], uint64, Tensor[(8), float64], Tensor[(448), uint64]) */;
  %1080 = cast(meta[relay.Constant][78] /* ty=Tensor[(8, 1), float64] */, dtype="float64") /* ty=Tensor[(8, 1), float64] */;
  %1081 = cast(meta[relay.Constant][79] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %1082 = %1079.6;
  %1083 = cast(%1082, dtype="uint64") /* ty=Tensor[(448), uint64] */;
  %1084 = reshape(%1080, newshape=[2, 1, 4]) /* ty=Tensor[(2, 1, 4), float64] */;
  %1085 = reshape(%1081, newshape=[]) /* ty=uint64 */;
  %1086 = reshape(%1083, newshape=[448]) /* ty=Tensor[(448), uint64] */;
  %1087 = @func_4427(%1084, %1085, %1086) /* ty=(Tensor[(2, 1, 4), float64], Tensor[(7, 4, 16), bool], uint64, Tensor[(448), uint64]) */;
  %1088 = @func_7783() /* ty=Tensor[(8, 16, 8), float64] */;
  %1089 = %1087.2;
  %1090 = @func_8825() /* ty=Tensor[(8, 16, 8), float64] */;
  (%1082, %1088, %1089, meta[relay.Constant][78] /* ty=Tensor[(8, 1), float64] */, meta[relay.Constant][79] /* ty=uint64 */, %1090)
}

def @func_11521() -> (Tensor[(8, 16, 8), float64],) {
  %1093 = fn () -> (Tensor[(8, 16, 8), float64],) {
    %1091 = @func_8889() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), int64], Tensor[(7, 3, 15), float32], Tensor[(315), float32]) */;
    %1092 = %1091.0;
    (%1092,)
  };
  %1093() /* ty=(Tensor[(8, 16, 8), float64],) */
}

def @func_16599() -> (Tensor[(8, 16, 8), float32],) {
  %1096 = fn () -> (Tensor[(8, 16, 8), float32],) {
    %1094 = @func_13828() /* ty=(Tensor[(8, 16, 8), float32],) */;
    %1095 = %1094.0;
    (%1095,)
  };
  %1096() /* ty=(Tensor[(8, 16, 8), float32],) */
}

def @func_654(%var_653: Tensor[(9, 5, 6), float32]) -> (Tensor[(9, 5, 6), float64],) {
  %1101 = fn (%var_630: Tensor[(9, 5, 6), float32]) -> (Tensor[(9, 5, 6), float64],) {
    %1097 = cast(%var_630, dtype="float32") /* ty=Tensor[(9, 5, 6), float32] */;
    %1098 = asin(%1097) /* ty=Tensor[(9, 5, 6), float32] */;
    %1099 = cast(%1098, dtype="float64") /* ty=Tensor[(9, 5, 6), float64] */;
    %1100 = sqrt(%1099) /* ty=Tensor[(9, 5, 6), float64] */;
    (%1100,)
  };
  %1101(%var_653) /* ty=(Tensor[(9, 5, 6), float64],) */
}

def @func_13793(%var_13781: Tensor[(1350), float32]) -> (Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], Tensor[(9, 150), float32], Tensor[(1350), float32], Tensor[(8, 16, 8), float64]) {
  %1102 = @func_7874() /* ty=(Tensor[(8, 16, 8), float32],) */;
  %1103 = @func_11818() /* ty=(Tensor[(8, 16, 8), float32],) */;
  %1104 = cast(%var_13781, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %1105 = reshape(%1104, newshape=[9, 150]) /* ty=Tensor[(9, 150), float32] */;
  %1106 = @func_10940(%1105) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(7, 13, 6), uint64], Tensor[(546), bool], Tensor[(8, 16, 8), float64], Tensor[(9, 150), float32], Tensor[(392), uint64]) */;
  %1107 = %1102.0;
  %1108 = %1103.0;
  %1109 = %1106.4;
  %1110 = @func_9830() /* ty=Tensor[(8, 16, 8), float64] */;
  (%1107, %1108, %1109, %var_13781, %1110)
}

def @func_16847(%var_16845: bool, %var_16846: Tensor[(108), bool]) -> (Tensor[(8, 16, 8), float32], Tensor[(3, 4, 9), bool], bool, Tensor[(108), bool]) {
  %1119 = fn (%var_16834: bool, %var_16835: Tensor[(108), bool]) -> (Tensor[(8, 16, 8), float32], Tensor[(3, 4, 9), bool], bool, Tensor[(108), bool]) {
    %1111 = @func_16598() /* ty=(Tensor[(8, 16, 8), float32],) */;
    %1112 = cast(%var_16834, dtype="bool") /* ty=bool */;
    %1113 = cast(%var_16835, dtype="bool") /* ty=Tensor[(108), bool] */;
    %1114 = reshape(%1112, newshape=[]) /* ty=bool */;
    %1115 = reshape(%1113, newshape=[3, 4, 9]) /* ty=Tensor[(3, 4, 9), bool] */;
    %1116 = @func_8769(%1114, %1115) /* ty=(Tensor[(3, 4, 9), bool],) */;
    %1117 = %1111.0;
    %1118 = %1116.0;
    (%1117, %1118, %var_16834, %var_16835)
  };
  %1119(%var_16845, %var_16846) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(3, 4, 9), bool], bool, Tensor[(108), bool]) */
}

def @func_8825() -> Tensor[(8, 16, 8), float64] {
  @func_7783() /* ty=Tensor[(8, 16, 8), float64] */
}

def @func_12380() -> (Tensor[(14, 15, 14), float64],) {
  @func_12378() /* ty=(Tensor[(14, 15, 14), float64],) */
}

def @func_13796(%var_13794: Tensor[(1350), float32]) -> (Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], Tensor[(9, 150), float32], Tensor[(1350), float32], Tensor[(8, 16, 8), float64]) {
  @func_13793(%var_13794) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], Tensor[(9, 150), float32], Tensor[(1350), float32], Tensor[(8, 16, 8), float64]) */
}

def @func_17084() -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64]) {
  @func_17082() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64]) */
}

def @func_15954() -> Tensor[(8, 16, 8), float32] {
  %1120 = fn () -> Tensor[(8, 16, 8), float32] {
    @func_14548() /* ty=Tensor[(8, 16, 8), float32] */
  };
  %1120() /* ty=Tensor[(8, 16, 8), float32] */
}

def @func_12672(%var_12670: uint32) -> (Tensor[(8, 16, 8), float64], Tensor[(3, 4, 7), int16], uint32, Tensor[(8, 16, 8), float64]) {
  @func_12669(%var_12670) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(3, 4, 7), int16], uint32, Tensor[(8, 16, 8), float64]) */
}

def @func_14328() -> Tensor[(8, 16, 8), float32] {
  @func_14326() /* ty=Tensor[(8, 16, 8), float32] */
}

def @func_12968() -> (Tensor[(8, 16, 8), float64],) {
  %1123 = fn () -> (Tensor[(8, 16, 8), float64],) {
    %1121 = @func_9577() /* ty=(Tensor[(8, 16, 8), float64],) */;
    %1122 = %1121.0;
    (%1122,)
  };
  %1123() /* ty=(Tensor[(8, 16, 8), float64],) */
}

def @func_16823() -> (Tensor[(8, 16, 8), float64], Tensor[(7, 4, 16), bool], Tensor[(448), uint64]) {
  %1124 = @func_9577() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %1125 = cast(meta[relay.Constant][80] /* ty=Tensor[(448), uint64] */, dtype="uint64") /* ty=Tensor[(448), uint64] */;
  %1126 = reshape(%1125, newshape=[56, 8]) /* ty=Tensor[(56, 8), uint64] */;
  %1127 = @func_7896(%1126) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(7, 4, 16), bool], uint64, Tensor[(56, 8), uint64]) */;
  %1128 = %1124.0;
  %1129 = %1127.1;
  (%1128, %1129, meta[relay.Constant][80] /* ty=Tensor[(448), uint64] */)
}

def @func_12378() -> (Tensor[(14, 15, 14), float64],) {
  %1130 = @func_9514() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64], Tensor[(392), uint64]) */;
  %1131 = %1130.1;
  (%1131,)
}

def @func_14774() -> (Tensor[(8, 16, 8), float32],) {
  @func_14772() /* ty=(Tensor[(8, 16, 8), float32],) */
}

def @func_16825() -> (Tensor[(8, 16, 8), float64], Tensor[(7, 4, 16), bool], Tensor[(448), uint64]) {
  @func_16823() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(7, 4, 16), bool], Tensor[(448), uint64]) */
}

def @func_8773(%var_8771: bool, %var_8772: Tensor[(3, 4, 9), bool]) -> (Tensor[(3, 4, 9), bool],) {
  @func_8769(%var_8771, %var_8772) /* ty=(Tensor[(3, 4, 9), bool],) */
}

def @func_10738(%var_10734: Tensor[(224), int64]) -> (Tensor[(8, 16, 8), float64], Tensor[(350), int64], uint32, Tensor[(224), int64], uint32) {
  %1132 = cast(meta[relay.Constant][81] /* ty=Tensor[(350), bool] */, dtype="bool") /* ty=Tensor[(350), bool] */;
  %1133 = cast(meta[relay.Constant][81] /* ty=Tensor[(350), bool] */, dtype="bool") /* ty=Tensor[(350), bool] */;
  %1134 = reshape(%1132, newshape=[14, 5, 5]) /* ty=Tensor[(14, 5, 5), bool] */;
  %1135 = reshape(%1133, newshape=[14, 5, 5]) /* ty=Tensor[(14, 5, 5), bool] */;
  %1136 = @func_7951(%1134, %1135) /* ty=Tensor[(14, 5, 5), bool] */;
  %1137 = cast(%1136, dtype="int64") /* ty=Tensor[(14, 5, 5), int64] */;
  %1138 = shape_of(meta[relay.Constant][81] /* ty=Tensor[(350), bool] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1139 = cast(meta[relay.Constant][81] /* ty=Tensor[(350), bool] */, dtype="int64") /* ty=Tensor[(350), int64] */;
  %1140 = dyn.reshape(%1137, %1138, newshape=[]) /* ty=Tensor[(?), int64] */;
  %1141 = cast(%var_10734, dtype="int64") /* ty=Tensor[(224), int64] */;
  %1142 = cast(%var_10734, dtype="int64") /* ty=Tensor[(224), int64] */;
  %1143 = cast(meta[relay.Constant][82] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %1144 = reshape(%1141, newshape=[7, 4, 8]) /* ty=Tensor[(7, 4, 8), int64] */;
  %1145 = reshape(%1142, newshape=[7, 4, 8]) /* ty=Tensor[(7, 4, 8), int64] */;
  %1146 = reshape(%1143, newshape=[]) /* ty=uint32 */;
  %1147 = @func_1485(%1144, %1145, %1146) /* ty=(Tensor[(7, 4, 8), int64], Tensor[(16, 15, 5), uint32], uint32, Tensor[(16, 15, 5), float32], Tensor[(16, 15, 5), float32]) */;
  %1148 = @func_9830() /* ty=Tensor[(8, 16, 8), float64] */;
  %1149 = bitwise_and(%1139, %1140) /* ty=Tensor[(350), int64] */;
  %1150 = %1147.2;
  (%1148, %1149, %1150, %var_10734, meta[relay.Constant][82] /* ty=uint32 */)
}

def @func_11971(%var_11969: Tensor[(2940), float64]) -> (Tensor[(8, 16, 8), float64], Tensor[(3, 4, 13), int32], Tensor[(2940), bool], Tensor[(14, 15, 14), float64]) {
  @func_11968(%var_11969) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(3, 4, 13), int32], Tensor[(2940), bool], Tensor[(14, 15, 14), float64]) */
}

def @func_13555() -> (Tensor[(8, 1), float64],) {
  @func_13553() /* ty=(Tensor[(8, 1), float64],) */
}

def @func_11564() -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32]) {
  %1151 = @func_9399() /* ty=Tensor[(8, 16, 8), float64] */;
  %1152 = @func_9380() /* ty=Tensor[(8, 16, 8), float32] */;
  (%1151, %1152)
}

def @func_12731() -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32]) {
  %1158 = fn () -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32]) {
    %1153 = @func_12448() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64]) */;
    %1154 = @func_9399() /* ty=Tensor[(8, 16, 8), float64] */;
    %1155 = @func_9380() /* ty=Tensor[(8, 16, 8), float32] */;
    %1156 = %1153.0;
    %1157 = @func_9983() /* ty=Tensor[(8, 16, 8), float32] */;
    (%1154, %1155, %1156, %1157)
  };
  %1158() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32]) */
}

def @func_13976() -> (Tensor[(8, 16, 8), float64], Tensor[(65, 9), float64], Tensor[(585), float64], Tensor[(8, 16, 8), float32], Tensor[(1350), float32], Tensor[(8, 16, 8), float32], Tensor[(7, 7, 10), float64], Tensor[(490), float64]) {
  %1173 = fn () -> (Tensor[(8, 16, 8), float64], Tensor[(65, 9), float64], Tensor[(585), float64], Tensor[(8, 16, 8), float32], Tensor[(1350), float32], Tensor[(8, 16, 8), float32], Tensor[(7, 7, 10), float64], Tensor[(490), float64]) {
    %1159 = cast(meta[relay.Constant][83] /* ty=Tensor[(585), float64] */, dtype="float64") /* ty=Tensor[(585), float64] */;
    %1160 = reshape(%1159, newshape=[65, 9]) /* ty=Tensor[(65, 9), float64] */;
    %1161 = @func_11268(%1160) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(9, 5, 13), float64], Tensor[(65, 9), float64]) */;
    %1162 = cast(meta[relay.Constant][84] /* ty=Tensor[(1350), float32] */, dtype="float32") /* ty=Tensor[(1350), float32] */;
    %1163 = reshape(%1162, newshape=[1350]) /* ty=Tensor[(1350), float32] */;
    %1164 = @func_13793(%1163) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], Tensor[(9, 150), float32], Tensor[(1350), float32], Tensor[(8, 16, 8), float64]) */;
    %1165 = cast(meta[relay.Constant][85] /* ty=Tensor[(490), float64] */, dtype="float64") /* ty=Tensor[(490), float64] */;
    %1166 = reshape(%1165, newshape=[7, 7, 10]) /* ty=Tensor[(7, 7, 10), float64] */;
    %1167 = @func_7280(%1166) /* ty=(Tensor[(7, 7, 10), float64],) */;
    %1168 = @func_9795() /* ty=Tensor[(8, 16, 8), float64] */;
    %1169 = %1161.2;
    %1170 = %1164.1;
    %1171 = @func_9254() /* ty=Tensor[(8, 16, 8), float32] */;
    %1172 = %1167.0;
    (%1168, %1169, meta[relay.Constant][83] /* ty=Tensor[(585), float64] */, %1170, meta[relay.Constant][84] /* ty=Tensor[(1350), float32] */, %1171, %1172, meta[relay.Constant][85] /* ty=Tensor[(490), float64] */)
  };
  %1173() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(65, 9), float64], Tensor[(585), float64], Tensor[(8, 16, 8), float32], Tensor[(1350), float32], Tensor[(8, 16, 8), float32], Tensor[(7, 7, 10), float64], Tensor[(490), float64]) */
}

def @func_19031() -> (Tensor[(8, 16, 8), float64], Tensor[(315), float32], Tensor[(8, 16, 8), float32], bool) {
  @func_19029() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(315), float32], Tensor[(8, 16, 8), float32], bool) */
}

def @func_1061(%var_1042: Tensor[(15, 10, 15), float32], %var_1050: Tensor[(30, 9), float32]) -> (Tensor[(15, 10, 15), float32], Tensor[(9, 5, 6), float64], Tensor[(30, 9), float32], Tensor[(9, 5, 6), float64]) {
  %1174 = cast(%var_1042, dtype="float32") /* ty=Tensor[(15, 10, 15), float32] */;
  %1175 = cast(%var_1050, dtype="float32") /* ty=Tensor[(30, 9), float32] */;
  %1176 = reshape(%1175, newshape=[9, 5, 6]) /* ty=Tensor[(9, 5, 6), float32] */;
  %1177 = @func_652(%1176) /* ty=(Tensor[(9, 5, 6), float64],) */;
  %1178 = %1177.0;
  %1179 = cast(%1178, dtype="float32") /* ty=Tensor[(9, 5, 6), float32] */;
  %1180 = reshape(%1179, newshape=[9, 5, 6]) /* ty=Tensor[(9, 5, 6), float32] */;
  %1181 = @func_652(%1180) /* ty=(Tensor[(9, 5, 6), float64],) */;
  %1182 = exp(%1174) /* ty=Tensor[(15, 10, 15), float32] */;
  %1183 = %1181.0;
  (%1182, %1178, %var_1050, %1183)
}

def @func_9631(%var_9629: Tensor[(270), float32]) -> (Tensor[(8, 16, 8), float32], Tensor[(9, 5, 6), float64], Tensor[(270), float32], Tensor[(8, 16, 8), float64]) {
  @func_9628(%var_9629) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(9, 5, 6), float64], Tensor[(270), float32], Tensor[(8, 16, 8), float64]) */
}

def @func_13733(%var_13697: Tensor[(416), int8], %var_13699: Tensor[(630), float64], %var_13700: Tensor[(3780), bool]) -> (Tensor[(8, 16, 8), float64], Tensor[(3, 4, 9), bool], Tensor[(2250), float32], uint64, Tensor[(448), uint64], Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(9, 5, 6), uint32], Tensor[(416), int8], Tensor[(6, 45), float64], Tensor[(630), float64], Tensor[(3780), bool], Tensor[(7, 13, 6), uint64], Tensor[(1350), float32]) {
  %1184 = @func_10876() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %1185 = cast(meta[relay.Constant][86] /* ty=Tensor[(2250), float32] */, dtype="float32") /* ty=Tensor[(2250), float32] */;
  %1186 = reshape(%1185, newshape=[1, 2250]) /* ty=Tensor[(1, 2250), float32] */;
  %1187 = @func_13136(%1186) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(3, 4, 9), bool], bool, Tensor[(108), bool], Tensor[(7, 13, 6), uint64], Tensor[(30), float64], Tensor[(1, 2250), float32], Tensor[(3, 4, 7), int16], Tensor[(84), bool]) */;
  %1188 = cast(meta[relay.Constant][87] /* ty=Tensor[(448), uint64] */, dtype="uint64") /* ty=Tensor[(448), uint64] */;
  %1189 = reshape(%1188, newshape=[56, 8]) /* ty=Tensor[(56, 8), uint64] */;
  %1190 = @func_7896(%1189) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(7, 4, 16), bool], uint64, Tensor[(56, 8), uint64]) */;
  %1191 = @func_12967() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %1192 = cast(%var_13697, dtype="int8") /* ty=Tensor[(416), int8] */;
  %1193 = cast(meta[relay.Constant][88] /* ty=Tensor[(6, 45), float64] */, dtype="float64") /* ty=Tensor[(6, 45), float64] */;
  %1194 = cast(%var_13699, dtype="float64") /* ty=Tensor[(630), float64] */;
  %1195 = cast(%var_13700, dtype="bool") /* ty=Tensor[(3780), bool] */;
  %1196 = reshape(%1192, newshape=[416]) /* ty=Tensor[(416), int8] */;
  %1197 = reshape(%1193, newshape=[9, 5, 6]) /* ty=Tensor[(9, 5, 6), float64] */;
  %1198 = reshape(%1194, newshape=[630]) /* ty=Tensor[(630), float64] */;
  %1199 = reshape(%1195, newshape=[270, 14]) /* ty=Tensor[(270, 14), bool] */;
  %1200 = @func_13426(%1196, %1197, %1198, %1199) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(7, 13, 6), uint64], Tensor[(270, 416), bool], Tensor[(8, 16, 8), float64], Tensor[(9, 5, 6), uint32], Tensor[(270, ?), float64], Tensor[(8, 16, 8), float32], Tensor[(9, 7, 10), float64], Tensor[(630), float64], Tensor[(270, 14), uint16]) */;
  %1201 = cast(meta[relay.Constant][89] /* ty=Tensor[(3780), bool] */, dtype="bool") /* ty=Tensor[(3780), bool] */;
  %1202 = shape_of(%var_13700, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1203 = cast(%var_13700, dtype="bool") /* ty=Tensor[(3780), bool] */;
  %1204 = dyn.reshape(%1201, %1202, newshape=[]) /* ty=Tensor[(?), bool] */;
  %1205 = cast(meta[relay.Constant][90] /* ty=Tensor[(1350), float32] */, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %1206 = reshape(%1205, newshape=[9, 150]) /* ty=Tensor[(9, 150), float32] */;
  %1207 = @func_10940(%1206) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(7, 13, 6), uint64], Tensor[(546), bool], Tensor[(8, 16, 8), float64], Tensor[(9, 150), float32], Tensor[(392), uint64]) */;
  %1208 = %1184.0;
  %1209 = %1187.1;
  %1210 = %1190.2;
  %1211 = %1191.0;
  %1212 = @func_9795() /* ty=Tensor[(8, 16, 8), float64] */;
  %1213 = @func_9447() /* ty=Tensor[(8, 16, 8), float64] */;
  %1214 = %1200.5;
  %1215 = greater(%1203, %1204) /* ty=Tensor[(3780), bool] */;
  %1216 = %1207.1;
  (%1208, %1209, meta[relay.Constant][86] /* ty=Tensor[(2250), float32] */, %1210, meta[relay.Constant][87] /* ty=Tensor[(448), uint64] */, %1211, %1212, %1213, %1214, %var_13697, meta[relay.Constant][88] /* ty=Tensor[(6, 45), float64] */, %var_13699, %1215, %1216, meta[relay.Constant][90] /* ty=Tensor[(1350), float32] */)
}

def @func_8889() -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), int64], Tensor[(7, 3, 15), float32], Tensor[(315), float32]) {
  %1217 = @func_8606() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %1218 = @func_7714() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %1219 = %1218.0;
  %1220 = cast(meta[relay.Constant][91] /* ty=Tensor[(8, 16, 8), float64] */, dtype="int64") /* ty=Tensor[(8, 16, 8), int64] */;
  %1221 = shape_of(%1219, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1222 = cast(%1219, dtype="int64") /* ty=Tensor[(8, 16, 8), int64] */;
  %1223 = dyn.reshape(%1220, %1221, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %1224 = cast(meta[relay.Constant][92] /* ty=Tensor[(315), float32] */, dtype="float32") /* ty=Tensor[(315), float32] */;
  %1225 = reshape(%1224, newshape=[7, 3, 15]) /* ty=Tensor[(7, 3, 15), float32] */;
  %1226 = %1217.0;
  %1227 = bitwise_and(%1222, %1223) /* ty=Tensor[(8, 16, 8), int64] */;
  %1228 = @func_6097(%1225) /* ty=Tensor[(7, 3, 15), float32] */;
  (%1226, %1227, %1228, meta[relay.Constant][92] /* ty=Tensor[(315), float32] */)
}

def @func_15864() -> (Tensor[(8, 16, 8), float32], Tensor[(10, 9, 15), float32], Tensor[(1350), float32], Tensor[(8, 16, 8), float64]) {
  %1234 = fn () -> (Tensor[(8, 16, 8), float32], Tensor[(10, 9, 15), float32], Tensor[(1350), float32], Tensor[(8, 16, 8), float64]) {
    %1229 = cast(meta[relay.Constant][93] /* ty=Tensor[(1350), float32] */, dtype="float32") /* ty=Tensor[(1350), float32] */;
    %1230 = reshape(%1229, newshape=[10, 9, 15]) /* ty=Tensor[(10, 9, 15), float32] */;
    %1231 = @func_13258() /* ty=Tensor[(8, 16, 8), float32] */;
    %1232 = @func_7200(%1230) /* ty=Tensor[(10, 9, 15), float32] */;
    %1233 = @func_13104() /* ty=Tensor[(8, 16, 8), float64] */;
    (%1231, %1232, meta[relay.Constant][93] /* ty=Tensor[(1350), float32] */, %1233)
  };
  %1234() /* ty=(Tensor[(8, 16, 8), float32], Tensor[(10, 9, 15), float32], Tensor[(1350), float32], Tensor[(8, 16, 8), float64]) */
}

def @func_13136(%var_13120: Tensor[(1, 2250), float32]) -> (Tensor[(8, 16, 8), float64], Tensor[(3, 4, 9), bool], bool, Tensor[(108), bool], Tensor[(7, 13, 6), uint64], Tensor[(30), float64], Tensor[(1, 2250), float32], Tensor[(3, 4, 7), int16], Tensor[(84), bool]) {
  %1235 = @func_9514() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64], Tensor[(392), uint64]) */;
  %1236 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %1237 = cast(meta[relay.Constant][94] /* ty=Tensor[(108), bool] */, dtype="bool") /* ty=Tensor[(108), bool] */;
  %1238 = reshape(%1236, newshape=[]) /* ty=bool */;
  %1239 = reshape(%1237, newshape=[3, 4, 9]) /* ty=Tensor[(3, 4, 9), bool] */;
  %1240 = @func_8769(%1238, %1239) /* ty=(Tensor[(3, 4, 9), bool],) */;
  %1241 = cast(meta[relay.Constant][95] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
  %1242 = cast(%var_13120, dtype="float32") /* ty=Tensor[(1, 2250), float32] */;
  %1243 = cast(meta[relay.Constant][95] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
  %1244 = reshape(%1241, newshape=[10, 3, 1]) /* ty=Tensor[(10, 3, 1), float64] */;
  %1245 = reshape(%1242, newshape=[225, 10]) /* ty=Tensor[(225, 10), float32] */;
  %1246 = reshape(%1243, newshape=[10, 3, 1]) /* ty=Tensor[(10, 3, 1), float64] */;
  %1247 = @func_10255(%1244, %1245, %1246) /* ty=(Tensor[(30, 9), float32], Tensor[(270), float32], Tensor[(225, 10), float32], Tensor[(7, 13, 6), uint64], Tensor[(546), bool], Tensor[(10, 3, 2310), int32], Tensor[(8, 16, 8), float64], Tensor[(392), uint64], Tensor[(10, 3, ?), bool], Tensor[(16, 15, 5), float32]) */;
  %1248 = cast(True /* ty=bool */, dtype="uint32") /* ty=uint32 */;
  %1249 = cast(meta[relay.Constant][96] /* ty=Tensor[(84), bool] */, dtype="bool") /* ty=Tensor[(84), bool] */;
  %1250 = reshape(%1248, newshape=[]) /* ty=uint32 */;
  %1251 = reshape(%1249, newshape=[3, 4, 7]) /* ty=Tensor[(3, 4, 7), bool] */;
  %1252 = @func_9352(%1250, %1251) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(3, 4, 7), int16]) */;
  %1253 = %1235.0;
  %1254 = %1240.0;
  %1255 = %1247.3;
  %1256 = %1252.1;
  (%1253, %1254, True /* ty=bool */, meta[relay.Constant][94] /* ty=Tensor[(108), bool] */, %1255, meta[relay.Constant][95] /* ty=Tensor[(30), float64] */, %var_13120, %1256, meta[relay.Constant][96] /* ty=Tensor[(84), bool] */)
}

def @func_9985() -> Tensor[(8, 16, 8), float32] {
  @func_9983() /* ty=Tensor[(8, 16, 8), float32] */
}

def @func_9493() -> Tensor[(8, 16, 8), float64] {
  %1258 = fn () -> Tensor[(8, 16, 8), float64] {
    %1257 = @func_8889() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), int64], Tensor[(7, 3, 15), float32], Tensor[(315), float32]) */;
    %1257.0
  };
  %1258() /* ty=Tensor[(8, 16, 8), float64] */
}

def @func_15524() -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64]) {
  %1259 = @func_9514() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64], Tensor[(392), uint64]) */;
  %1260 = @func_14996() /* ty=(Tensor[(270), float32], Tensor[(8, 16, 8), float64], Tensor[(6, 1, 12), int32], int32) */;
  %1261 = %1259.0;
  %1262 = %1260.1;
  (%1261, %1262)
}

def @func_10158(%var_10156: Tensor[(2310), float32], %var_10157: Tensor[(270), float32]) -> (Tensor[(315), float32], Tensor[(16, 15, 5), float32], Tensor[(2310), float32], Tensor[(270), float32], Tensor[(2250), float32]) {
  @func_10154(%var_10156, %var_10157) /* ty=(Tensor[(315), float32], Tensor[(16, 15, 5), float32], Tensor[(2310), float32], Tensor[(270), float32], Tensor[(2250), float32]) */
}

def @func_9796() -> Tensor[(8, 16, 8), float64] {
  %1264 = fn () -> Tensor[(8, 16, 8), float64] {
    %1263 = @func_8501() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64], Tensor[(2940), float64]) */;
    %1263.0
  };
  %1264() /* ty=Tensor[(8, 16, 8), float64] */
}

def @func_16274(%var_16272: Tensor[(270), float32]) -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64], Tensor[(8, 16, 8), float64], Tensor[(270), float32]) {
  @func_16271(%var_16272) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64], Tensor[(8, 16, 8), float64], Tensor[(270), float32]) */
}

def @func_9382() -> Tensor[(8, 16, 8), float32] {
  @func_9380() /* ty=Tensor[(8, 16, 8), float32] */
}

def @func_15571() -> Tensor[(14, 15, 14), float64] {
  %1265 = @func_13270() /* ty=(Tensor[(14, 15, 14), float64],) */;
  %1265.0
}

def @func_9254() -> Tensor[(8, 16, 8), float32] {
  %1266 = @func_8173() /* ty=(Tensor[(8, 16, 8), float32],) */;
  %1266.0
}

def @func_8634(%var_8627: Tensor[(392), uint64]) -> (Tensor[(14, 15, 14), float64], Tensor[(7, 4, 16), bool], uint64, Tensor[(448), uint64], Tensor[(8, 16, 8), float64], Tensor[(392), uint64], Tensor[(14, 15, 14), float64]) {
  %1267 = @func_8501() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64], Tensor[(2940), float64]) */;
  %1268 = cast(meta[relay.Constant][97] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %1269 = cast(meta[relay.Constant][98] /* ty=Tensor[(448), uint64] */, dtype="uint64") /* ty=Tensor[(448), uint64] */;
  %1270 = reshape(%1268, newshape=[]) /* ty=uint64 */;
  %1271 = reshape(%1269, newshape=[7, 4, 16]) /* ty=Tensor[(7, 4, 16), uint64] */;
  %1272 = cast(%var_8627, dtype="uint64") /* ty=Tensor[(392), uint64] */;
  %1273 = reshape(%1272, newshape=[14, 28]) /* ty=Tensor[(14, 28), uint64] */;
  %1274 = @func_8232(%1273) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(4, 7, 14), float64], Tensor[(14, 28), uint64]) */;
  %1275 = @func_8501() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64], Tensor[(2940), float64]) */;
  %1276 = %1267.1;
  %1277 = @func_2096(%1270, %1271) /* ty=Tensor[(7, 4, 16), bool] */;
  %1278 = %1274.1;
  %1279 = %1275.1;
  (%1276, %1277, meta[relay.Constant][97] /* ty=uint64 */, meta[relay.Constant][98] /* ty=Tensor[(448), uint64] */, %1278, %var_8627, %1279)
}

def @func_15932() -> (Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], Tensor[(8, 1), float64], Tensor[(8, 16, 8), float32]) {
  %1288 = fn () -> (Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], Tensor[(8, 1), float64], Tensor[(8, 16, 8), float32]) {
    %1280 = @func_11583() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32]) */;
    %1281 = @func_12573() /* ty=(Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float64]) */;
    %1282 = @func_9064() /* ty=Tensor[(8, 16, 8), float32] */;
    %1283 = %1280.1;
    %1284 = @func_13258() /* ty=Tensor[(8, 16, 8), float32] */;
    %1285 = @func_13006() /* ty=Tensor[(8, 16, 8), float32] */;
    %1286 = @func_15306() /* ty=Tensor[(8, 1), float64] */;
    %1287 = %1281.0;
    (%1282, %1283, %1284, %1285, %1286, %1287)
  };
  %1288() /* ty=(Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], Tensor[(8, 16, 8), float32], Tensor[(8, 1), float64], Tensor[(8, 16, 8), float32]) */
}

def @func_4904(%var_4896: Tensor[(2, 9, 10), int8], %var_4897: Tensor[(2, 9, 10), int8]) -> (Tensor[(2, 9, 10), int8],) {
  %1289 = cast(%var_4897, dtype="int8") /* ty=Tensor[(2, 9, 10), int8] */;
  %1290 = shape_of(%var_4896, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1291 = cast(%var_4896, dtype="int8") /* ty=Tensor[(2, 9, 10), int8] */;
  %1292 = dyn.reshape(%1289, %1290, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %1293 = bitwise_xor(%1291, %1292) /* ty=Tensor[(2, 9, 10), int8] */;
  (%1293,)
}

def @func_551(%var_532: uint32) -> (Tensor[(16, 15, 5), uint32], Tensor[(16, 15, 5), float32], Tensor[(16, 15, 5), float32]) {
  %1294 = cast(%var_532, dtype="uint32") /* ty=uint32 */;
  %1295 = cast(meta[relay.Constant][99] /* ty=Tensor[(16, 15, 5), uint32] */, dtype="uint32") /* ty=Tensor[(16, 15, 5), uint32] */;
  %1296 = cast(meta[relay.Constant][99] /* ty=Tensor[(16, 15, 5), uint32] */, dtype="float32") /* ty=Tensor[(16, 15, 5), float32] */;
  %1297 = sqrt(%1296) /* ty=Tensor[(16, 15, 5), float32] */;
  %1298 = cast(%1297, dtype="float32") /* ty=Tensor[(16, 15, 5), float32] */;
  %1299 = cast(%1297, dtype="float32") /* ty=Tensor[(16, 15, 5), float32] */;
  %1300 = bitwise_or(%1294, %1295) /* ty=Tensor[(16, 15, 5), uint32] */;
  %1301 = acos(%1298) /* ty=Tensor[(16, 15, 5), float32] */;
  %1302 = log10(%1299) /* ty=Tensor[(16, 15, 5), float32] */;
  (%1300, %1301, %1302)
}

def @func_18551() -> (Tensor[(8, 16, 8), float32],) {
  %1305 = fn () -> (Tensor[(8, 16, 8), float32],) {
    %1303 = @func_8424() /* ty=(Tensor[(8, 16, 8), float32], Tensor[(3, 6, 7), float32], Tensor[(3), float32], Tensor[(126), float32]) */;
    %1304 = %1303.0;
    (%1304,)
  };
  %1305() /* ty=(Tensor[(8, 16, 8), float32],) */
}

def @func_7830(%var_7829: Tensor[(3), float32]) -> (Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64], Tensor[(2940, 1), float64], Tensor[(3, 6, 7), float32], Tensor[(3), float32], Tensor[(126), float32]) {
  %1317 = fn (%var_7825: Tensor[(3), float32]) -> (Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64], Tensor[(2940, 1), float64], Tensor[(3, 6, 7), float32], Tensor[(3), float32], Tensor[(126), float32]) {
    %1306 = @func_7714() /* ty=(Tensor[(8, 16, 8), float64],) */;
    %1307 = cast(meta[relay.Constant][100] /* ty=Tensor[(2940, 1), float64] */, dtype="float64") /* ty=Tensor[(2940, 1), float64] */;
    %1308 = reshape(%1307, newshape=[2940]) /* ty=Tensor[(2940), float64] */;
    %1309 = @func_6512(%1308) /* ty=(Tensor[(3, 4, 13), int32], Tensor[(14, 15, 14), float64], Tensor[(2940), float64], Tensor[(14, 15, 14), float64]) */;
    %1310 = cast(%var_7825, dtype="float32") /* ty=Tensor[(3), float32] */;
    %1311 = cast(meta[relay.Constant][101] /* ty=Tensor[(126), float32] */, dtype="float32") /* ty=Tensor[(126), float32] */;
    %1312 = reshape(%1310, newshape=[3, 1, 1]) /* ty=Tensor[(3, 1, 1), float32] */;
    %1313 = reshape(%1311, newshape=[3, 6, 7]) /* ty=Tensor[(3, 6, 7), float32] */;
    %1314 = %1306.0;
    %1315 = %1309.1;
    %1316 = @func_7314(%1312, %1313) /* ty=Tensor[(3, 6, 7), float32] */;
    (%1314, %1315, meta[relay.Constant][100] /* ty=Tensor[(2940, 1), float64] */, %1316, %var_7825, meta[relay.Constant][101] /* ty=Tensor[(126), float32] */)
  };
  %1317(%var_7829) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64], Tensor[(2940, 1), float64], Tensor[(3, 6, 7), float32], Tensor[(3), float32], Tensor[(126), float32]) */
}

def @func_16897() -> (Tensor[(8, 16, 8), float32], uint64, Tensor[(2940), float64]) {
  %1318 = @func_9203() /* ty=(Tensor[(8, 16, 8), float32],) */;
  %1319 = @func_12565() /* ty=(Tensor[(315), float32], Tensor[(8, 16, 8), uint32], uint64) */;
  %1320 = @func_14539() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(2940), int16]) */;
  %1321 = %1320.1;
  %1322 = cast(%1321, dtype="float64") /* ty=Tensor[(2940), float64] */;
  %1323 = %1318.0;
  %1324 = %1319.2;
  %1325 = sqrt(%1322) /* ty=Tensor[(2940), float64] */;
  (%1323, %1324, %1325)
}

def @func_13105() -> Tensor[(8, 16, 8), float64] {
  %1326 = fn () -> Tensor[(8, 16, 8), float64] {
    @func_7783() /* ty=Tensor[(8, 16, 8), float64] */
  };
  %1326() /* ty=Tensor[(8, 16, 8), float64] */
}

def @func_11330() -> (Tensor[(8, 16, 8), float64], Tensor[(3, 4, 7), int16], uint32, Tensor[(84), bool], uint64, Tensor[(8), float64], Tensor[(448), uint64]) {
  %1327 = @func_8606() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %1328 = cast(meta[relay.Constant][102] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %1329 = cast(meta[relay.Constant][103] /* ty=Tensor[(84), bool] */, dtype="bool") /* ty=Tensor[(84), bool] */;
  %1330 = reshape(%1328, newshape=[]) /* ty=uint32 */;
  %1331 = reshape(%1329, newshape=[3, 4, 7]) /* ty=Tensor[(3, 4, 7), bool] */;
  %1332 = @func_9352(%1330, %1331) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(3, 4, 7), int16]) */;
  %1333 = cast(meta[relay.Constant][104] /* ty=Tensor[(8), float64] */, dtype="float64") /* ty=Tensor[(8), float64] */;
  %1334 = cast(meta[relay.Constant][102] /* ty=uint32 */, dtype="uint64") /* ty=uint64 */;
  %1335 = cast(meta[relay.Constant][105] /* ty=Tensor[(448), uint64] */, dtype="uint64") /* ty=Tensor[(448), uint64] */;
  %1336 = reshape(%1333, newshape=[2, 1, 4]) /* ty=Tensor[(2, 1, 4), float64] */;
  %1337 = reshape(%1334, newshape=[]) /* ty=uint64 */;
  %1338 = reshape(%1335, newshape=[448]) /* ty=Tensor[(448), uint64] */;
  %1339 = @func_4427(%1336, %1337, %1338) /* ty=(Tensor[(2, 1, 4), float64], Tensor[(7, 4, 16), bool], uint64, Tensor[(448), uint64]) */;
  %1340 = %1327.0;
  %1341 = %1332.1;
  %1342 = %1339.2;
  (%1340, %1341, meta[relay.Constant][102] /* ty=uint32 */, meta[relay.Constant][103] /* ty=Tensor[(84), bool] */, %1342, meta[relay.Constant][104] /* ty=Tensor[(8), float64] */, meta[relay.Constant][105] /* ty=Tensor[(448), uint64] */)
}

def @func_6099(%var_6098: Tensor[(7, 3, 15), float32]) -> Tensor[(7, 3, 15), float32] {
  %1344 = fn (%var_6075: Tensor[(7, 3, 15), float32]) -> Tensor[(7, 3, 15), float32] {
    %1343 = cast(%var_6075, dtype="float32") /* ty=Tensor[(7, 3, 15), float32] */;
    tan(%1343) /* ty=Tensor[(7, 3, 15), float32] */
  };
  %1344(%var_6098) /* ty=Tensor[(7, 3, 15), float32] */
}

def @func_14549() -> Tensor[(8, 16, 8), float32] {
  %1345 = fn () -> Tensor[(8, 16, 8), float32] {
    @func_9254() /* ty=Tensor[(8, 16, 8), float32] */
  };
  %1345() /* ty=Tensor[(8, 16, 8), float32] */
}

def @func_15799() -> (Tensor[(8, 16, 8), float64],) {
  %1347 = fn () -> (Tensor[(8, 16, 8), float64],) {
    %1346 = @func_9830() /* ty=Tensor[(8, 16, 8), float64] */;
    (%1346,)
  };
  %1347() /* ty=(Tensor[(8, 16, 8), float64],) */
}

def @func_16521(%var_16518: int64, %var_16519: Tensor[(4, 12, 5), int64], %var_16520: Tensor[(2940), float64]) -> (Tensor[(4, 12, 5), bool], Tensor[(8, 16, 8), float64], Tensor[(270), float64], Tensor[(2, 9, 10), int8], Tensor[(180), int8], Tensor[(9, 5, 6), float64], Tensor[(16, 15, 5), float32], Tensor[(14, 15, 14), float64], Tensor[(2940), float64], Tensor[(8, 16, 8), float64]) {
  %1375 = fn (%var_16393: int64, %var_16394: Tensor[(4, 12, 5), int64], %var_16502: Tensor[(2940), float64]) -> (Tensor[(4, 12, 5), bool], Tensor[(8, 16, 8), float64], Tensor[(270), float64], Tensor[(2, 9, 10), int8], Tensor[(180), int8], Tensor[(9, 5, 6), float64], Tensor[(16, 15, 5), float32], Tensor[(14, 15, 14), float64], Tensor[(2940), float64], Tensor[(8, 16, 8), float64]) {
    %1348 = cast(%var_16393, dtype="bool") /* ty=bool */;
    %1349 = cast(%var_16394, dtype="bool") /* ty=Tensor[(4, 12, 5), bool] */;
    %1350 = @func_12448() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64]) */;
    %1351 = cast(meta[relay.Constant][107] /* ty=Tensor[(180), int8] */, dtype="int8") /* ty=Tensor[(180), int8] */;
    %1352 = reshape(%1351, newshape=[180]) /* ty=Tensor[(180), int8] */;
    %1353 = @func_8011(%1352) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(2, 9, 10), int8], Tensor[(180), int8]) */;
    %1354 = cast(meta[relay.Constant][106] /* ty=Tensor[(270), float64] */, dtype="float64") /* ty=Tensor[(270), float64] */;
    %1355 = reshape(%1354, newshape=[9, 5, 6]) /* ty=Tensor[(9, 5, 6), float64] */;
    %1356 = @func_14035(%1355) /* ty=(Tensor[(8, 16, 8), float32], Tensor[(270), float32], Tensor[(8, 16, 8), float64], Tensor[(15, 3, 11), float32], Tensor[(495, 1), float32], Tensor[(9, 5, 6), bool]) */;
    %1357 = %1356.5;
    %1358 = cast(%1357, dtype="float64") /* ty=Tensor[(9, 5, 6), float64] */;
    %1359 = cast(%var_16393, dtype="uint32") /* ty=uint32 */;
    %1360 = reshape(%1359, newshape=[]) /* ty=uint32 */;
    %1361 = @func_551(%1360) /* ty=(Tensor[(16, 15, 5), uint32], Tensor[(16, 15, 5), float32], Tensor[(16, 15, 5), float32]) */;
    %1362 = %1361.1;
    %1363 = cast(%var_16393, dtype="float32") /* ty=float32 */;
    %1364 = cast(%1362, dtype="float32") /* ty=Tensor[(16, 15, 5), float32] */;
    %1365 = cast(%var_16502, dtype="float64") /* ty=Tensor[(2940), float64] */;
    %1366 = reshape(%1365, newshape=[2940]) /* ty=Tensor[(2940), float64] */;
    %1367 = @func_11968(%1366) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(3, 4, 13), int32], Tensor[(2940), bool], Tensor[(14, 15, 14), float64]) */;
    %1368 = less_equal(%1348, %1349) /* ty=Tensor[(4, 12, 5), bool] */;
    %1369 = %1350.0;
    %1370 = %1353.1;
    %1371 = tan(%1358) /* ty=Tensor[(9, 5, 6), float64] */;
    %1372 = divide(%1363, %1364) /* ty=Tensor[(16, 15, 5), float32] */;
    %1373 = %1367.3;
    %1374 = @func_15457() /* ty=Tensor[(8, 16, 8), float64] */;
    (%1368, %1369, meta[relay.Constant][106] /* ty=Tensor[(270), float64] */, %1370, meta[relay.Constant][107] /* ty=Tensor[(180), int8] */, %1371, %1372, %1373, %var_16502, %1374)
  };
  %1375(%var_16518, %var_16519, %var_16520) /* ty=(Tensor[(4, 12, 5), bool], Tensor[(8, 16, 8), float64], Tensor[(270), float64], Tensor[(2, 9, 10), int8], Tensor[(180), int8], Tensor[(9, 5, 6), float64], Tensor[(16, 15, 5), float32], Tensor[(14, 15, 14), float64], Tensor[(2940), float64], Tensor[(8, 16, 8), float64]) */
}

def @func_13022() -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64]) {
  %1376 = @func_7714() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %1377 = %1376.0;
  %1378 = @func_9447() /* ty=Tensor[(8, 16, 8), float64] */;
  (%1377, %1378)
}

def @func_10259(%var_10256: Tensor[(10, 3, 1), float64], %var_10257: Tensor[(225, 10), float32], %var_10258: Tensor[(10, 3, 1), float64]) -> (Tensor[(30, 9), float32], Tensor[(270), float32], Tensor[(225, 10), float32], Tensor[(7, 13, 6), uint64], Tensor[(546), bool], Tensor[(10, 3, 2310), int32], Tensor[(8, 16, 8), float64], Tensor[(392), uint64], Tensor[(10, 3, ?), bool], Tensor[(16, 15, 5), float32]) {
  %1415 = fn (%var_10193: Tensor[(10, 3, 1), float64], %var_10203: Tensor[(225, 10), float32], %var_10237: Tensor[(10, 3, 1), float64]) -> (Tensor[(30, 9), float32], Tensor[(270), float32], Tensor[(225, 10), float32], Tensor[(7, 13, 6), uint64], Tensor[(546), bool], Tensor[(10, 3, 2310), int32], Tensor[(8, 16, 8), float64], Tensor[(392), uint64], Tensor[(10, 3, ?), bool], Tensor[(16, 15, 5), float32]) {
    %1379 = cast(meta[relay.Constant][108] /* ty=Tensor[(2310), float32] */, dtype="float32") /* ty=Tensor[(2310), float32] */;
    %1380 = cast(meta[relay.Constant][108] /* ty=Tensor[(2310), float32] */, dtype="float32") /* ty=Tensor[(2310), float32] */;
    %1381 = cast(meta[relay.Constant][109] /* ty=Tensor[(270), float32] */, dtype="float32") /* ty=Tensor[(270), float32] */;
    %1382 = cast(%var_10203, dtype="float32") /* ty=Tensor[(225, 10), float32] */;
    %1383 = reshape(%1379, newshape=[11, 15, 14]) /* ty=Tensor[(11, 15, 14), float32] */;
    %1384 = reshape(%1380, newshape=[11, 15, 14]) /* ty=Tensor[(11, 15, 14), float32] */;
    %1385 = reshape(%1381, newshape=[30, 9]) /* ty=Tensor[(30, 9), float32] */;
    %1386 = reshape(%1382, newshape=[2250]) /* ty=Tensor[(2250), float32] */;
    %1387 = @func_2639(%1383, %1384, %1385, %1386) /* ty=(Tensor[(11, 15, 14), float32], Tensor[(9, 5, 6), float64], Tensor[(30, 9), float32], Tensor[(30, 9), float32], Tensor[(2250), float32], Tensor[(16, 15, 5), float32], Tensor[(224), int64], uint32) */;
    %1388 = cast(meta[relay.Constant][110] /* ty=Tensor[(546), bool] */, dtype="bool") /* ty=Tensor[(546), bool] */;
    %1389 = cast(meta[relay.Constant][110] /* ty=Tensor[(546), bool] */, dtype="bool") /* ty=Tensor[(546), bool] */;
    %1390 = reshape(%1388, newshape=[7, 13, 6]) /* ty=Tensor[(7, 13, 6), bool] */;
    %1391 = reshape(%1389, newshape=[7, 13, 6]) /* ty=Tensor[(7, 13, 6), bool] */;
    %1392 = @func_4270(%1390, %1391) /* ty=(Tensor[(7, 13, 6), uint64],) */;
    %1393 = cast(meta[relay.Constant][108] /* ty=Tensor[(2310), float32] */, dtype="int32") /* ty=Tensor[(2310), int32] */;
    %1394 = cast(%var_10193, dtype="int32") /* ty=Tensor[(10, 3, 1), int32] */;
    %1395 = cast(meta[relay.Constant][111] /* ty=Tensor[(392), uint64] */, dtype="uint64") /* ty=Tensor[(392), uint64] */;
    %1396 = reshape(%1395, newshape=[392]) /* ty=Tensor[(392), uint64] */;
    %1397 = @func_8634(%1396) /* ty=(Tensor[(14, 15, 14), float64], Tensor[(7, 4, 16), bool], uint64, Tensor[(448), uint64], Tensor[(8, 16, 8), float64], Tensor[(392), uint64], Tensor[(14, 15, 14), float64]) */;
    %1398 = cast(%var_10193, dtype="float64") /* ty=Tensor[(10, 3, 1), float64] */;
    %1399 = acosh(%1398) /* ty=Tensor[(10, 3, 1), float64] */;
    %1400 = cast(%var_10237, dtype="bool") /* ty=Tensor[(10, 3, 1), bool] */;
    %1401 = shape_of(%1399, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1402 = cast(%1399, dtype="bool") /* ty=Tensor[(10, 3, 1), bool] */;
    %1403 = dyn.reshape(%1400, %1401, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1404 = cast(meta[relay.Constant][108] /* ty=Tensor[(2310), float32] */, dtype="float32") /* ty=Tensor[(2310), float32] */;
    %1405 = cast(meta[relay.Constant][109] /* ty=Tensor[(270), float32] */, dtype="float32") /* ty=Tensor[(270), float32] */;
    %1406 = reshape(%1404, newshape=[2310]) /* ty=Tensor[(2310), float32] */;
    %1407 = reshape(%1405, newshape=[270]) /* ty=Tensor[(270), float32] */;
    %1408 = @func_10154(%1406, %1407) /* ty=(Tensor[(315), float32], Tensor[(16, 15, 5), float32], Tensor[(2310), float32], Tensor[(270), float32], Tensor[(2250), float32]) */;
    %1409 = %1387.3;
    %1410 = %1392.0;
    %1411 = bitwise_or(%1393, %1394) /* ty=Tensor[(10, 3, 2310), int32] */;
    %1412 = %1397.4;
    %1413 = less(%1402, %1403) /* ty=Tensor[(10, 3, ?), bool] */;
    %1414 = %1408.1;
    (%1409, meta[relay.Constant][109] /* ty=Tensor[(270), float32] */, %var_10203, %1410, meta[relay.Constant][110] /* ty=Tensor[(546), bool] */, %1411, %1412, meta[relay.Constant][111] /* ty=Tensor[(392), uint64] */, %1413, %1414)
  };
  %1415(%var_10256, %var_10257, %var_10258) /* ty=(Tensor[(30, 9), float32], Tensor[(270), float32], Tensor[(225, 10), float32], Tensor[(7, 13, 6), uint64], Tensor[(546), bool], Tensor[(10, 3, 2310), int32], Tensor[(8, 16, 8), float64], Tensor[(392), uint64], Tensor[(10, 3, ?), bool], Tensor[(16, 15, 5), float32]) */
}

def @func_14772() -> (Tensor[(8, 16, 8), float32],) {
  %1416 = @func_9064() /* ty=Tensor[(8, 16, 8), float32] */;
  (%1416,)
}

def @func_11646(%var_11645: Tensor[(16, 1, 1), float32]) -> (Tensor[(8, 16, 8), float64], Tensor[(16, ?, ?), float32], Tensor[(16, ?, ?), bool]) {
  %1438 = fn (%var_11607: Tensor[(16, 1, 1), float32]) -> (Tensor[(8, 16, 8), float64], Tensor[(16, ?, ?), float32], Tensor[(16, ?, ?), bool]) {
    %1417 = @func_11583() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32]) */;
    %1418 = cast(%var_11607, dtype="float32") /* ty=Tensor[(16, 1, 1), float32] */;
    %1419 = cosh(%1418) /* ty=Tensor[(16, 1, 1), float32] */;
    %1420 = cast(%var_11607, dtype="uint16") /* ty=Tensor[(16, 1, 1), uint16] */;
    %1421 = shape_of(%1419, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1422 = cast(%1419, dtype="uint16") /* ty=Tensor[(16, 1, 1), uint16] */;
    %1423 = dyn.reshape(%1420, %1421, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %1424 = logical_xor(%1422, %1423) /* ty=Tensor[(16, ?, ?), uint16] */;
    %1425 = cast(%1424, dtype="float32") /* ty=Tensor[(16, ?, ?), float32] */;
    %1426 = erf(%1425) /* ty=Tensor[(16, ?, ?), float32] */;
    %1427 = cast(%var_11607, dtype="float32") /* ty=Tensor[(16, 1, 1), float32] */;
    %1428 = shape_of(%1426, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1429 = cast(%1426, dtype="float32") /* ty=Tensor[(16, ?, ?), float32] */;
    %1430 = dyn.reshape(%1427, %1428, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %1431 = cast(%1426, dtype="bool") /* ty=Tensor[(16, ?, ?), bool] */;
    %1432 = shape_of(%1419, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1433 = cast(%1419, dtype="bool") /* ty=Tensor[(16, 1, 1), bool] */;
    %1434 = dyn.reshape(%1431, %1432, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1435 = %1417.0;
    %1436 = mod(%1429, %1430) /* ty=Tensor[(16, ?, ?), float32] */;
    %1437 = greater(%1433, %1434) /* ty=Tensor[(16, ?, ?), bool] */;
    (%1435, %1436, %1437)
  };
  %1438(%var_11645) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(16, ?, ?), float32], Tensor[(16, ?, ?), bool]) */
}

def @func_8173() -> (Tensor[(8, 16, 8), float32],) {
  %1439 = @func_8028() /* ty=Tensor[(8, 16, 8), float32] */;
  (%1439,)
}

def @func_11566() -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32]) {
  @func_11564() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32]) */
}

def @func_17166() -> (Tensor[(8, 16, 8), float64],) {
  %1442 = fn () -> (Tensor[(8, 16, 8), float64],) {
    %1440 = @func_11564() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float32]) */;
    %1441 = %1440.0;
    (%1441,)
  };
  %1442() /* ty=(Tensor[(8, 16, 8), float64],) */
}

def @func_8347(%var_8337: Tensor[(8, 11, 3), float64]) -> (Tensor[(8, 11, 3), float64],) {
  %1443 = cast(%var_8337, dtype="float64") /* ty=Tensor[(8, 11, 3), float64] */;
  %1444 = acosh(%1443) /* ty=Tensor[(8, 11, 3), float64] */;
  (%1444,)
}

def @func_18225() -> (Tensor[(8, 16, 8), float32], Tensor[(270), float32]) {
  %1449 = fn () -> (Tensor[(8, 16, 8), float32], Tensor[(270), float32]) {
    %1445 = @func_12768() /* ty=(Tensor[(8, 16, 8), float32],) */;
    %1446 = @func_11129() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(270), float32]) */;
    %1447 = %1445.0;
    %1448 = %1446.2;
    (%1447, %1448)
  };
  %1449() /* ty=(Tensor[(8, 16, 8), float32], Tensor[(270), float32]) */
}

def @func_16303() -> (Tensor[(8, 16, 8), float32], Tensor[(14, 15, 14), float64]) {
  @func_16301() /* ty=(Tensor[(8, 16, 8), float32], Tensor[(14, 15, 14), float64]) */
}

def @func_8123(%var_8120: Tensor[(3, 13, 16), int64], %var_8121: Tensor[(15, 15, 10), uint16], %var_8122: Tensor[(11), uint16]) -> (Tensor[(3, 13, 16), int64], Tensor[(7, 13, 6), uint64], Tensor[(7, 78), bool], Tensor[(7, 13, 6), uint64], Tensor[(2250), uint16], Tensor[(15, 15, 10), bool], Tensor[(6, 1, 12), uint8], Tensor[(11), uint16]) {
  %1480 = fn (%var_8076: Tensor[(3, 13, 16), int64], %var_8095: Tensor[(15, 15, 10), uint16], %var_8117: Tensor[(11), uint16]) -> (Tensor[(3, 13, 16), int64], Tensor[(7, 13, 6), uint64], Tensor[(7, 78), bool], Tensor[(7, 13, 6), uint64], Tensor[(2250), uint16], Tensor[(15, 15, 10), bool], Tensor[(6, 1, 12), uint8], Tensor[(11), uint16]) {
    %1450 = cast(meta[relay.Constant][112] /* ty=Tensor[(3, 13, 16), int64] */, dtype="int64") /* ty=Tensor[(3, 13, 16), int64] */;
    %1451 = shape_of(%var_8076, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1452 = cast(%var_8076, dtype="int64") /* ty=Tensor[(3, 13, 16), int64] */;
    %1453 = dyn.reshape(%1450, %1451, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %1454 = cast(meta[relay.Constant][113] /* ty=Tensor[(7, 78), bool] */, dtype="bool") /* ty=Tensor[(7, 78), bool] */;
    %1455 = cast(meta[relay.Constant][113] /* ty=Tensor[(7, 78), bool] */, dtype="bool") /* ty=Tensor[(7, 78), bool] */;
    %1456 = reshape(%1454, newshape=[7, 13, 6]) /* ty=Tensor[(7, 13, 6), bool] */;
    %1457 = reshape(%1455, newshape=[7, 13, 6]) /* ty=Tensor[(7, 13, 6), bool] */;
    %1458 = @func_4270(%1456, %1457) /* ty=(Tensor[(7, 13, 6), uint64],) */;
    %1459 = %1458.0;
    %1460 = cast(%1459, dtype="bool") /* ty=Tensor[(7, 13, 6), bool] */;
    %1461 = cast(%1459, dtype="bool") /* ty=Tensor[(7, 13, 6), bool] */;
    %1462 = reshape(%1460, newshape=[7, 13, 6]) /* ty=Tensor[(7, 13, 6), bool] */;
    %1463 = reshape(%1461, newshape=[7, 13, 6]) /* ty=Tensor[(7, 13, 6), bool] */;
    %1464 = @func_4270(%1462, %1463) /* ty=(Tensor[(7, 13, 6), uint64],) */;
    %1465 = cast(meta[relay.Constant][114] /* ty=Tensor[(2250), uint16] */, dtype="uint16") /* ty=Tensor[(2250), uint16] */;
    %1466 = reshape(%1465, newshape=[15, 15, 10]) /* ty=Tensor[(15, 15, 10), uint16] */;
    %1467 = @func_673(%1466) /* ty=(Tensor[(15, 15, 10), uint16],) */;
    %1468 = %1467.0;
    %1469 = cast(%var_8095, dtype="bool") /* ty=Tensor[(15, 15, 10), bool] */;
    %1470 = shape_of(%1468, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1471 = cast(%1468, dtype="bool") /* ty=Tensor[(15, 15, 10), bool] */;
    %1472 = dyn.reshape(%1469, %1470, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1473 = cast(%var_8117, dtype="uint16") /* ty=Tensor[(11), uint16] */;
    %1474 = reshape(%1473, newshape=[1, 1, 11]) /* ty=Tensor[(1, 1, 11), uint16] */;
    %1475 = @func_5723(%1474) /* ty=(Tensor[(6, 1, 12), uint8], Tensor[(1, 1, 11), float32]) */;
    %1476 = bitwise_and(%1452, %1453) /* ty=Tensor[(3, 13, 16), int64] */;
    %1477 = %1464.0;
    %1478 = logical_and(%1471, %1472) /* ty=Tensor[(15, 15, 10), bool] */;
    %1479 = %1475.0;
    (%1476, %1459, meta[relay.Constant][113] /* ty=Tensor[(7, 78), bool] */, %1477, meta[relay.Constant][114] /* ty=Tensor[(2250), uint16] */, %1478, %1479, %var_8117)
  };
  %1480(%var_8120, %var_8121, %var_8122) /* ty=(Tensor[(3, 13, 16), int64], Tensor[(7, 13, 6), uint64], Tensor[(7, 78), bool], Tensor[(7, 13, 6), uint64], Tensor[(2250), uint16], Tensor[(15, 15, 10), bool], Tensor[(6, 1, 12), uint8], Tensor[(11), uint16]) */
}

def @func_16271(%var_16269: Tensor[(270), float32]) -> (Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64], Tensor[(8, 16, 8), float64], Tensor[(270), float32]) {
  %1481 = @func_12448() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 16, 8), float64]) */;
  %1482 = @func_16189() /* ty=(Tensor[(8, 16, 8), float64],) */;
  %1483 = @func_8501() /* ty=(Tensor[(8, 16, 8), float64], Tensor[(14, 15, 14), float64], Tensor[(2940), float64]) */;
  %1484 = cast(%var_16269, dtype="float32") /* ty=Tensor[(270), float32] */;
  %1485 = reshape(%1484, newshape=[270]) /* ty=Tensor[(270), float32] */;
  %1486 = @func_8548(%1485) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(4, 7, 14), float64], Tensor[(392), uint64], Tensor[(9, 5, 6), float64], Tensor[(270), float32]) */;
  %1487 = %1481.1;
  %1488 = %1482.0;
  %1489 = %1483.1;
  %1490 = %1486.0;
  (%1487, %1488, %1489, %1490, %var_16269)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen865/build/output.py", line 4486, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [14:31:35] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

