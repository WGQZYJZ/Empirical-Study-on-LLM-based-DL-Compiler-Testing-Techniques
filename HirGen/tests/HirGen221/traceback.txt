==========mod==========
#[version = "0.0.5"]
def @func_2458(%var_2424: Tensor[(16, 2, 4), float64], %var_2425: Tensor[(16, 2, 4), float64]) -> (Tensor[(16, 2, 4), uint64], Tensor[(16, 2, 4), float64]) {
  %0 = cast(%var_2425, dtype="float64") /* ty=Tensor[(16, 2, 4), float64] */;
  %1 = log10(%0) /* ty=Tensor[(16, 2, 4), float64] */;
  %2 = cast(%var_2425, dtype="float64") /* ty=Tensor[(16, 2, 4), float64] */;
  %3 = shape_of(%var_2424, dtype="int32") /* ty=Tensor[(3), int32] */;
  %4 = cast(%var_2424, dtype="float64") /* ty=Tensor[(16, 2, 4), float64] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %6 = floor_divide(%4, %5) /* ty=Tensor[(16, 2, 4), float64] */;
  %7 = cast(%6, dtype="uint64") /* ty=Tensor[(16, 2, 4), uint64] */;
  %8 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
  %9 = cast(%1, dtype="uint64") /* ty=Tensor[(16, 2, 4), uint64] */;
  %10 = dyn.reshape(%7, %8, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %11 = cast(%1, dtype="float64") /* ty=Tensor[(16, 2, 4), float64] */;
  %12 = shape_of(%6, dtype="int32") /* ty=Tensor[(3), int32] */;
  %13 = cast(%6, dtype="float64") /* ty=Tensor[(16, 2, 4), float64] */;
  %14 = dyn.reshape(%11, %12, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %15 = add(%9, %10) /* ty=Tensor[(16, 2, 4), uint64] */;
  %16 = divide(%13, %14) /* ty=Tensor[(16, 2, 4), float64] */;
  (%15, %16)
}

def @func_2534() -> (Tensor[(105), uint8],) {
  %17 = @func_1789() /* ty=(Tensor[(15, 9, 16), float64], Tensor[(7, 5, 3), bool], Tensor[(105), uint8]) */;
  %18 = %17.2;
  (%18,)
}

def @func_2186(%var_2145: Tensor[(4, 7, 3), uint32], %var_2146: Tensor[(4, 7, 3), uint32]) -> (Tensor[(4, 7, 3), float64], Tensor[(7, 5, 3), float64]) {
  %19 = cast(%var_2146, dtype="uint32") /* ty=Tensor[(4, 7, 3), uint32] */;
  %20 = shape_of(%var_2145, dtype="int32") /* ty=Tensor[(3), int32] */;
  %21 = cast(%var_2145, dtype="uint32") /* ty=Tensor[(4, 7, 3), uint32] */;
  %22 = dyn.reshape(%19, %20, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %23 = right_shift(%21, %22) /* ty=Tensor[(4, 7, 3), uint32] */;
  %24 = cast(%23, dtype="float32") /* ty=Tensor[(4, 7, 3), float32] */;
  %25 = log2(%24) /* ty=Tensor[(4, 7, 3), float32] */;
  %26 = cast(%25, dtype="float64") /* ty=Tensor[(4, 7, 3), float64] */;
  %27 = sigmoid(%26) /* ty=Tensor[(4, 7, 3), float64] */;
  %28 = @func_2065() /* ty=Tensor[(7, 5, 3), float64] */;
  (%27, %28)
}

def @func_622(%var_616: Tensor[(15, 9, 16), float32], %var_617: Tensor[(15, 9, 16), float32]) -> (Tensor[(15, 9, 16), float32],) {
  %29 = cast(%var_617, dtype="float32") /* ty=Tensor[(15, 9, 16), float32] */;
  %30 = shape_of(%var_616, dtype="int32") /* ty=Tensor[(3), int32] */;
  %31 = cast(%var_616, dtype="float32") /* ty=Tensor[(15, 9, 16), float32] */;
  %32 = dyn.reshape(%29, %30, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %33 = floor_mod(%31, %32) /* ty=Tensor[(15, 9, 16), float32] */;
  (%33,)
}

def @func_5160(%var_5140: float32) -> (Tensor[(7, 5, 3), float64], Tensor[(15, 9, 16), bool], Tensor[(105), uint8], Tensor[(96), uint8], float32, Tensor[(2160), float64]) {
  %34 = cast(meta[relay.Constant][0] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %35 = reshape(%34, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
  %36 = @func_4656(%35) /* ty=(Tensor[(7, 5, 3), float32], Tensor[(7, 5, 3), bool], Tensor[(2160), float32], Tensor[(15, 9, 16), bool]) */;
  %37 = cast(meta[relay.Constant][1] /* ty=Tensor[(96), uint8] */, dtype="uint8") /* ty=Tensor[(96), uint8] */;
  %38 = cast(meta[relay.Constant][1] /* ty=Tensor[(96), uint8] */, dtype="uint8") /* ty=Tensor[(96), uint8] */;
  %39 = cast(%var_5140, dtype="float32") /* ty=float32 */;
  %40 = reshape(%37, newshape=[6, 2, 8]) /* ty=Tensor[(6, 2, 8), uint8] */;
  %41 = reshape(%38, newshape=[6, 2, 8]) /* ty=Tensor[(6, 2, 8), uint8] */;
  %42 = reshape(%39, newshape=[]) /* ty=float32 */;
  %43 = @func_4038(%40, %41, %42) /* ty=(Tensor[(6, 2, 8), uint8], Tensor[(15, 9, 16), float64], Tensor[(105), uint8], float32, Tensor[(650), float32], Tensor[(480), float32], Tensor[(7, 5, 3), float32], Tensor[(14, 2, 3), float32], Tensor[(84), uint32]) */;
  %44 = cast(meta[relay.Constant][0] /* ty=Tensor[(2160), float32] */, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %45 = @func_2065() /* ty=Tensor[(7, 5, 3), float64] */;
  %46 = %36.3;
  %47 = %43.2;
  %48 = sin(%44) /* ty=Tensor[(2160), float64] */;
  (%45, %46, %47, meta[relay.Constant][1] /* ty=Tensor[(96), uint8] */, %var_5140, %48)
}

def @func_4656(%var_4633: Tensor[(2160), float32]) -> (Tensor[(7, 5, 3), float32], Tensor[(7, 5, 3), bool], Tensor[(2160), float32], Tensor[(15, 9, 16), bool]) {
  %49 = @func_4400() /* ty=(Tensor[(7, 5, 3), float32],) */;
  %50 = %49.0;
  %51 = cast(%50, dtype="uint8") /* ty=Tensor[(7, 5, 3), uint8] */;
  %52 = cast(%50, dtype="uint8") /* ty=Tensor[(7, 5, 3), uint8] */;
  %53 = cast(%var_4633, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %54 = reshape(%51, newshape=[7, 5, 3]) /* ty=Tensor[(7, 5, 3), uint8] */;
  %55 = reshape(%52, newshape=[7, 5, 3]) /* ty=Tensor[(7, 5, 3), uint8] */;
  %56 = reshape(%53, newshape=[15, 9, 16]) /* ty=Tensor[(15, 9, 16), float32] */;
  %57 = @func_880(%54, %55, %56) /* ty=(Tensor[(7, 5, 3), bool], Tensor[(2160), float32], Tensor[(7, 5, 3), float32], Tensor[(15, 9, 16), float32], Tensor[(15, 9, 16), float64], Tensor[(15, 9, 16), float32]) */;
  %58 = %57.0;
  %59 = cast(%58, dtype="uint8") /* ty=Tensor[(7, 5, 3), uint8] */;
  %60 = reshape(%59, newshape=[105]) /* ty=Tensor[(105), uint8] */;
  %61 = @func_1942(%60) /* ty=(Tensor[(105), uint8], Tensor[(15, 9, 16), bool], Tensor[(15, 9, 16), bool], Tensor[(15, 9, 16), bool]) */;
  %62 = %61.2;
  (%50, %58, %var_4633, %62)
}

def @func_5321() -> (Tensor[(15, 9, 16), float64], Tensor[(7, 5, 3), float32]) {
  %63 = @func_2937() /* ty=(Tensor[(15, 9, 16), float64],) */;
  %64 = @func_1824() /* ty=(Tensor[(7, 5, 3), float64], Tensor[(7, 5, 3), float32]) */;
  %65 = %63.0;
  %66 = %64.1;
  (%65, %66)
}

def @func_1994(%var_1952: Tensor[(11, 7, 10), float32], %var_1958: Tensor[(2160), float32]) -> (Tensor[(11, 7, 10), float32], Tensor[(15, 9, 16), float32], Tensor[(2160), float32], Tensor[(15, 9, 16), float32], Tensor[(105), uint8]) {
  %67 = cast(%var_1952, dtype="float32") /* ty=Tensor[(11, 7, 10), float32] */;
  %68 = acos(%67) /* ty=Tensor[(11, 7, 10), float32] */;
  %69 = cast(%68, dtype="float32") /* ty=Tensor[(11, 7, 10), float32] */;
  %70 = cast(%var_1958, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %71 = cast(%var_1958, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %72 = reshape(%70, newshape=[15, 9, 16]) /* ty=Tensor[(15, 9, 16), float32] */;
  %73 = reshape(%71, newshape=[15, 9, 16]) /* ty=Tensor[(15, 9, 16), float32] */;
  %74 = @func_622(%72, %73) /* ty=(Tensor[(15, 9, 16), float32],) */;
  %75 = cast(meta[relay.Constant][2] /* ty=Tensor[(105), uint8] */, dtype="uint8") /* ty=Tensor[(105), uint8] */;
  %76 = %74.0;
  %77 = cast(%76, dtype="float32") /* ty=Tensor[(15, 9, 16), float32] */;
  %78 = reshape(%75, newshape=[105]) /* ty=Tensor[(105), uint8] */;
  %79 = reshape(%77, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
  %80 = @func_1158(%78, %79) /* ty=(Tensor[(11, 11, 15), float64], Tensor[(15, 9, 16), float32], float32, Tensor[(480), float32], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(15, 9, 16), float32]) */;
  %81 = rsqrt(%69) /* ty=Tensor[(11, 7, 10), float32] */;
  %82 = %80.1;
  (%81, %76, %var_1958, %82, meta[relay.Constant][2] /* ty=Tensor[(105), uint8] */)
}

def @func_2065() -> Tensor[(7, 5, 3), float64] {
  %83 = @func_1824() /* ty=(Tensor[(7, 5, 3), float64], Tensor[(7, 5, 3), float32]) */;
  %83.0
}

def @func_5015() -> (Tensor[(14, 2, 3), float32],) {
  %84 = @func_3595() /* ty=(Tensor[(14, 2, 3), float32],) */;
  %85 = %84.0;
  (%85,)
}

def @func_3487(%var_3419: Tensor[(1, 16, 12), float64], %var_3441: Tensor[(14, 16, 12), float64], %var_3479: Tensor[(364), float64], %var_3485: Tensor[(84), uint32]) -> (Tensor[(3, 9, 5), uint64], Tensor[(1, 135), bool], Tensor[(14, 16, 12), uint64], Tensor[(14, 2, 13), float64], Tensor[(364), float64], Tensor[(14, 16, 12), float32], Tensor[(4, 7, 3), float64], Tensor[(84), uint32]) {
  %86 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 135), bool] */, dtype="bool") /* ty=Tensor[(1, 135), bool] */;
  %87 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 135), bool] */, dtype="bool") /* ty=Tensor[(1, 135), bool] */;
  %88 = reshape(%86, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), bool] */;
  %89 = reshape(%87, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), bool] */;
  %90 = @func_76(%88, %89) /* ty=(Tensor[(3, 9, 5), uint64], Tensor[(3, 9, 5), bool], Tensor[(3, 9, 5), float64]) */;
  %91 = cast(%var_3419, dtype="float64") /* ty=Tensor[(1, 16, 12), float64] */;
  %92 = log2(%91) /* ty=Tensor[(1, 16, 12), float64] */;
  %93 = cast(%92, dtype="int32") /* ty=Tensor[(1, 16, 12), int32] */;
  %94 = cast(%var_3441, dtype="int32") /* ty=Tensor[(14, 16, 12), int32] */;
  %95 = bitwise_xor(%93, %94) /* ty=Tensor[(14, 16, 12), int32] */;
  %96 = cast(%92, dtype="float64") /* ty=Tensor[(1, 16, 12), float64] */;
  %97 = cast(%95, dtype="float64") /* ty=Tensor[(14, 16, 12), float64] */;
  %98 = divide(%96, %97) /* ty=Tensor[(14, 16, 12), float64] */;
  %99 = cast(%98, dtype="float64") /* ty=Tensor[(14, 16, 12), float64] */;
  %100 = atan(%99) /* ty=Tensor[(14, 16, 12), float64] */;
  %101 = cast(%92, dtype="bool") /* ty=Tensor[(1, 16, 12), bool] */;
  %102 = cast(%98, dtype="bool") /* ty=Tensor[(14, 16, 12), bool] */;
  %103 = equal(%101, %102) /* ty=Tensor[(14, 16, 12), bool] */;
  %104 = cast(%103, dtype="uint64") /* ty=Tensor[(14, 16, 12), uint64] */;
  %105 = shape_of(%100, dtype="int32") /* ty=Tensor[(3), int32] */;
  %106 = cast(%100, dtype="uint64") /* ty=Tensor[(14, 16, 12), uint64] */;
  %107 = dyn.reshape(%104, %105, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %108 = cast(%var_3479, dtype="float64") /* ty=Tensor[(364), float64] */;
  %109 = reshape(%108, newshape=[14, 2, 13]) /* ty=Tensor[(14, 2, 13), float64] */;
  %110 = @func_3328(%109) /* ty=(Tensor[(14, 2, 13), float64],) */;
  %111 = cast(%var_3441, dtype="float32") /* ty=Tensor[(14, 16, 12), float32] */;
  %112 = shape_of(%100, dtype="int32") /* ty=Tensor[(3), int32] */;
  %113 = cast(%100, dtype="float32") /* ty=Tensor[(14, 16, 12), float32] */;
  %114 = dyn.reshape(%111, %112, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %115 = cast(%var_3485, dtype="uint32") /* ty=Tensor[(84), uint32] */;
  %116 = cast(%var_3485, dtype="uint32") /* ty=Tensor[(84), uint32] */;
  %117 = reshape(%115, newshape=[4, 7, 3]) /* ty=Tensor[(4, 7, 3), uint32] */;
  %118 = reshape(%116, newshape=[4, 7, 3]) /* ty=Tensor[(4, 7, 3), uint32] */;
  %119 = @func_2186(%117, %118) /* ty=(Tensor[(4, 7, 3), float64], Tensor[(7, 5, 3), float64]) */;
  %120 = %90.0;
  %121 = bitwise_or(%106, %107) /* ty=Tensor[(14, 16, 12), uint64] */;
  %122 = %110.0;
  %123 = floor_divide(%113, %114) /* ty=Tensor[(14, 16, 12), float32] */;
  %124 = %119.0;
  (%120, meta[relay.Constant][3] /* ty=Tensor[(1, 135), bool] */, %121, %122, %var_3479, %123, %124, %var_3485)
}

def @func_3643() -> Tensor[(15, 9, 16), float64] {
  %125 = @func_1789() /* ty=(Tensor[(15, 9, 16), float64], Tensor[(7, 5, 3), bool], Tensor[(105), uint8]) */;
  %125.0
}

def @func_1158(%var_1142: Tensor[(105), uint8], %var_1143: Tensor[(2160), float32]) -> (Tensor[(11, 11, 15), float64], Tensor[(15, 9, 16), float32], float32, Tensor[(480), float32], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(15, 9, 16), float32]) {
  %126 = cast(meta[relay.Constant][4] /* ty=Tensor[(11, 11, 15), float64] */, dtype="float64") /* ty=Tensor[(11, 11, 15), float64] */;
  %127 = erf(%126) /* ty=Tensor[(11, 11, 15), float64] */;
  %128 = cast(meta[relay.Constant][4] /* ty=Tensor[(11, 11, 15), float64] */, dtype="bool") /* ty=Tensor[(11, 11, 15), bool] */;
  %129 = shape_of(%127, dtype="int32") /* ty=Tensor[(3), int32] */;
  %130 = cast(%127, dtype="bool") /* ty=Tensor[(11, 11, 15), bool] */;
  %131 = dyn.reshape(%128, %129, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %132 = less(%130, %131) /* ty=Tensor[(11, 11, 15), bool] */;
  %133 = cast(%127, dtype="float64") /* ty=Tensor[(11, 11, 15), float64] */;
  %134 = shape_of(%132, dtype="int32") /* ty=Tensor[(3), int32] */;
  %135 = cast(%132, dtype="float64") /* ty=Tensor[(11, 11, 15), float64] */;
  %136 = dyn.reshape(%133, %134, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %137 = cast(1.25336f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %138 = cast(meta[relay.Constant][5] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %139 = cast(%var_1142, dtype="uint8") /* ty=Tensor[(105), uint8] */;
  %140 = cast(%var_1143, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %141 = reshape(%137, newshape=[]) /* ty=float32 */;
  %142 = reshape(%138, newshape=[480]) /* ty=Tensor[(480), float32] */;
  %143 = reshape(%139, newshape=[105]) /* ty=Tensor[(105), uint8] */;
  %144 = reshape(%140, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
  %145 = @func_1053(%141, %142, %143, %144) /* ty=(Tensor[(4, 15, 8), float32], Tensor[(480), float32], Tensor[(15, 9, 16), float32], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(13, 1, 14), float32], Tensor[(15, 9, 16), float32]) */;
  %146 = cast(1.25336f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %147 = cast(meta[relay.Constant][5] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %148 = cast(%var_1142, dtype="uint8") /* ty=Tensor[(105), uint8] */;
  %149 = %145.6;
  %150 = cast(%149, dtype="float32") /* ty=Tensor[(15, 9, 16), float32] */;
  %151 = reshape(%146, newshape=[]) /* ty=float32 */;
  %152 = reshape(%147, newshape=[480]) /* ty=Tensor[(480), float32] */;
  %153 = reshape(%148, newshape=[105]) /* ty=Tensor[(105), uint8] */;
  %154 = reshape(%150, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
  %155 = @func_1053(%151, %152, %153, %154) /* ty=(Tensor[(4, 15, 8), float32], Tensor[(480), float32], Tensor[(15, 9, 16), float32], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(13, 1, 14), float32], Tensor[(15, 9, 16), float32]) */;
  %156 = power(%135, %136) /* ty=Tensor[(11, 11, 15), float64] */;
  %157 = %155.6;
  (%156, %149, 1.25336f /* ty=float32 */, meta[relay.Constant][5] /* ty=Tensor[(480), float32] */, %var_1142, %var_1143, %157)
}

def @func_2928() -> Tensor[(105), uint8] {
  %158 = @func_1789() /* ty=(Tensor[(15, 9, 16), float64], Tensor[(7, 5, 3), bool], Tensor[(105), uint8]) */;
  %158.2
}

def @func_4329() -> (Tensor[(15, 9, 16), float32], Tensor[(105), uint8], Tensor[(2160), float32]) {
  %159 = @func_3643() /* ty=Tensor[(15, 9, 16), float64] */;
  %160 = cast(%159, dtype="float32") /* ty=Tensor[(15, 9, 16), float32] */;
  %161 = @func_2534() /* ty=(Tensor[(105), uint8],) */;
  %162 = @func_2819() /* ty=(Tensor[(15, 9, 16), float64], Tensor[(2160), float32]) */;
  %163 = sigmoid(%160) /* ty=Tensor[(15, 9, 16), float32] */;
  %164 = %161.0;
  %165 = %162.1;
  (%163, %164, %165)
}

def @func_76(%var_28: Tensor[(3, 9, 5), bool], %var_50: Tensor[(3, 9, 5), bool]) -> (Tensor[(3, 9, 5), uint64], Tensor[(3, 9, 5), bool], Tensor[(3, 9, 5), float64]) {
  %166 = cast(%var_50, dtype="uint64") /* ty=Tensor[(3, 9, 5), uint64] */;
  %167 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(3, 9, 5), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %168 = cast(meta[relay.Constant][6] /* ty=Tensor[(3, 9, 5), bool] */, dtype="uint64") /* ty=Tensor[(3, 9, 5), uint64] */;
  %169 = dyn.reshape(%166, %167, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %170 = cast(%var_50, dtype="bool") /* ty=Tensor[(3, 9, 5), bool] */;
  %171 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(3, 9, 5), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %172 = cast(meta[relay.Constant][6] /* ty=Tensor[(3, 9, 5), bool] */, dtype="bool") /* ty=Tensor[(3, 9, 5), bool] */;
  %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %174 = cast(%var_28, dtype="bool") /* ty=Tensor[(3, 9, 5), bool] */;
  %175 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(3, 9, 5), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %176 = cast(meta[relay.Constant][6] /* ty=Tensor[(3, 9, 5), bool] */, dtype="bool") /* ty=Tensor[(3, 9, 5), bool] */;
  %177 = dyn.reshape(%174, %175, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %178 = logical_and(%176, %177) /* ty=Tensor[(3, 9, 5), bool] */;
  %179 = cast(%178, dtype="float64") /* ty=Tensor[(3, 9, 5), float64] */;
  %180 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(3, 9, 5), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %181 = cast(meta[relay.Constant][6] /* ty=Tensor[(3, 9, 5), bool] */, dtype="float64") /* ty=Tensor[(3, 9, 5), float64] */;
  %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %183 = maximum(%168, %169) /* ty=Tensor[(3, 9, 5), uint64] */;
  %184 = less(%172, %173) /* ty=Tensor[(3, 9, 5), bool] */;
  %185 = floor_mod(%181, %182) /* ty=Tensor[(3, 9, 5), float64] */;
  (%183, %184, %185)
}

def @func_2138() -> Tensor[(7, 5, 3), float64] {
  %186 = @func_1824() /* ty=(Tensor[(7, 5, 3), float64], Tensor[(7, 5, 3), float32]) */;
  %186.0
}

def @func_4379() -> (Tensor[(105), uint8], Tensor[(105), uint8]) {
  %187 = @func_2682() /* ty=(Tensor[(7, 5, 3), float32], Tensor[(105), uint8], Tensor[(84), uint32]) */;
  %188 = %187.1;
  %189 = @func_2928() /* ty=Tensor[(105), uint8] */;
  (%188, %189)
}

def @func_3779() -> Tensor[(105), uint8] {
  %190 = @func_2534() /* ty=(Tensor[(105), uint8],) */;
  %190.0
}

def @func_6382() -> Tensor[(15, 9, 16), float64] {
  %191 = @func_1789() /* ty=(Tensor[(15, 9, 16), float64], Tensor[(7, 5, 3), bool], Tensor[(105), uint8]) */;
  %191.0
}

def @func_3367(%var_3353: Tensor[(16, 1, 2), float32]) -> (Tensor[(16, 1, 2), float32], Tensor[(105), uint8], Tensor[(7, 5, 3), float64]) {
  %192 = cast(%var_3353, dtype="float32") /* ty=Tensor[(16, 1, 2), float32] */;
  %193 = @func_3202() /* ty=(Tensor[(105), uint8],) */;
  %194 = tan(%192) /* ty=Tensor[(16, 1, 2), float32] */;
  %195 = %193.0;
  %196 = @func_2138() /* ty=Tensor[(7, 5, 3), float64] */;
  (%194, %195, %196)
}

def @func_3749(%var_3681: float32, %var_3682: Tensor[(10, 5, 13), float32], %var_3747: Tensor[(480), float32]) -> (Tensor[(15, 9, 16), float64], Tensor[(10, 5, 13), uint32], Tensor[(10, 5, 13), int32], Tensor[(15, 9, 16), float64], Tensor[(105), uint8], Tensor[(15, 9, 16), float32], Tensor[(480), float32]) {
  %197 = @func_2937() /* ty=(Tensor[(15, 9, 16), float64],) */;
  %198 = cast(%var_3681, dtype="float32") /* ty=float32 */;
  %199 = cast(%var_3682, dtype="float32") /* ty=Tensor[(10, 5, 13), float32] */;
  %200 = mod(%198, %199) /* ty=Tensor[(10, 5, 13), float32] */;
  %201 = cast(%200, dtype="uint32") /* ty=Tensor[(10, 5, 13), uint32] */;
  %202 = cast(%var_3681, dtype="uint32") /* ty=uint32 */;
  %203 = cast(%var_3682, dtype="float32") /* ty=Tensor[(10, 5, 13), float32] */;
  %204 = acos(%203) /* ty=Tensor[(10, 5, 13), float32] */;
  %205 = cast(%var_3682, dtype="int32") /* ty=Tensor[(10, 5, 13), int32] */;
  %206 = shape_of(%204, dtype="int32") /* ty=Tensor[(3), int32] */;
  %207 = cast(%204, dtype="int32") /* ty=Tensor[(10, 5, 13), int32] */;
  %208 = dyn.reshape(%205, %206, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %209 = @func_2614() /* ty=(Tensor[(105), uint8],) */;
  %210 = cast(%var_3681, dtype="float32") /* ty=float32 */;
  %211 = cast(%var_3747, dtype="float32") /* ty=Tensor[(480), float32] */;
  %212 = %209.0;
  %213 = cast(%212, dtype="uint8") /* ty=Tensor[(105), uint8] */;
  %214 = @func_3643() /* ty=Tensor[(15, 9, 16), float64] */;
  %215 = cast(%214, dtype="float32") /* ty=Tensor[(15, 9, 16), float32] */;
  %216 = reshape(%210, newshape=[]) /* ty=float32 */;
  %217 = reshape(%211, newshape=[480]) /* ty=Tensor[(480), float32] */;
  %218 = reshape(%213, newshape=[105]) /* ty=Tensor[(105), uint8] */;
  %219 = reshape(%215, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
  %220 = @func_1053(%216, %217, %218, %219) /* ty=(Tensor[(4, 15, 8), float32], Tensor[(480), float32], Tensor[(15, 9, 16), float32], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(13, 1, 14), float32], Tensor[(15, 9, 16), float32]) */;
  %221 = %197.0;
  %222 = multiply(%201, %202) /* ty=Tensor[(10, 5, 13), uint32] */;
  %223 = bitwise_and(%207, %208) /* ty=Tensor[(10, 5, 13), int32] */;
  %224 = %220.6;
  (%221, %222, %223, %214, %212, %224, %var_3747)
}

def @func_3268() -> Tensor[(7, 5, 3), uint16] {
  %225 = @func_1824() /* ty=(Tensor[(7, 5, 3), float64], Tensor[(7, 5, 3), float32]) */;
  %226 = %225.0;
  %227 = cast(meta[relay.Constant][7] /* ty=Tensor[(7, 5, 3), float64] */, dtype="uint16") /* ty=Tensor[(7, 5, 3), uint16] */;
  %228 = shape_of(%226, dtype="int32") /* ty=Tensor[(3), int32] */;
  %229 = cast(%226, dtype="uint16") /* ty=Tensor[(7, 5, 3), uint16] */;
  %230 = dyn.reshape(%227, %228, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  right_shift(%229, %230) /* ty=Tensor[(7, 5, 3), uint16] */
}

def @func_2614() -> (Tensor[(105), uint8],) {
  %231 = @func_2534() /* ty=(Tensor[(105), uint8],) */;
  %232 = %231.0;
  (%232,)
}

def @func_4923(%var_4876: Tensor[(50), uint64]) -> (Tensor[(15, 9, 16), float64], Tensor[(105), uint8], Tensor[(1386), uint8], Tensor[(50), uint64], Tensor[(15, 9, 16), float64]) {
  %233 = cast(meta[relay.Constant][8] /* ty=Tensor[(1386), uint8] */, dtype="uint8") /* ty=Tensor[(1386), uint8] */;
  %234 = cast(meta[relay.Constant][8] /* ty=Tensor[(1386), uint8] */, dtype="uint8") /* ty=Tensor[(1386), uint8] */;
  %235 = cast(%var_4876, dtype="uint64") /* ty=Tensor[(50), uint64] */;
  %236 = @func_3643() /* ty=Tensor[(15, 9, 16), float64] */;
  %237 = cast(%236, dtype="float32") /* ty=Tensor[(15, 9, 16), float32] */;
  %238 = reshape(%233, newshape=[11, 14, 9]) /* ty=Tensor[(11, 14, 9), uint8] */;
  %239 = reshape(%234, newshape=[11, 14, 9]) /* ty=Tensor[(11, 14, 9), uint8] */;
  %240 = reshape(%235, newshape=[50]) /* ty=Tensor[(50), uint64] */;
  %241 = reshape(%237, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
  %242 = @func_4839(%238, %239, %240, %241) /* ty=(Tensor[(105), uint8], Tensor[(364), float64], Tensor[(120), bool], Tensor[(6, 2, 10), float64], Tensor[(10, 10, 5), uint32], Tensor[(50), uint64], Tensor[(50, 10), uint64], Tensor[(11, 14, 9), float64], Tensor[(7, 5, 3), bool], Tensor[(2160), float32], Tensor[(364, 3), bool], Tensor[(364, ?), float64]) */;
  %243 = @func_2937() /* ty=(Tensor[(15, 9, 16), float64],) */;
  %244 = %242.0;
  %245 = %243.0;
  (%236, %244, meta[relay.Constant][8] /* ty=Tensor[(1386), uint8] */, %var_4876, %245)
}

def @func_4989() -> (Tensor[(105), uint8], Tensor[(7, 5, 3), float32], Tensor[(105), uint8]) {
  %246 = @func_2534() /* ty=(Tensor[(105), uint8],) */;
  %247 = @func_3779() /* ty=Tensor[(105), uint8] */;
  %248 = @func_2557() /* ty=Tensor[(7, 5, 3), float32] */;
  %249 = %246.0;
  (%247, %248, %249)
}

def @func_3202() -> (Tensor[(105), uint8],) {
  %250 = @func_1739() /* ty=(Tensor[(14, 7, 7), float32], Tensor[(15, 9, 16), float64], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(15, 9, 16), float32]) */;
  %251 = %250.2;
  (%251,)
}

def @func_4604(%var_4601: Tensor[(1, 6, 15), float64]) -> Tensor[(1, 6, 15), float64] {
  %252 = cast(%var_4601, dtype="float64") /* ty=Tensor[(1, 6, 15), float64] */;
  atan(%252) /* ty=Tensor[(1, 6, 15), float64] */
}

def @func_993(%var_930: Tensor[(4, 15, 8), float32]) -> (Tensor[(3, 9, 5), uint64], Tensor[(1, 135), bool], Tensor[(4, 15, 8), bool], Tensor[(4, 15, 8), float32]) {
  %253 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 135), bool] */, dtype="bool") /* ty=Tensor[(1, 135), bool] */;
  %254 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 135), bool] */, dtype="bool") /* ty=Tensor[(1, 135), bool] */;
  %255 = reshape(%253, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), bool] */;
  %256 = reshape(%254, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), bool] */;
  %257 = @func_76(%255, %256) /* ty=(Tensor[(3, 9, 5), uint64], Tensor[(3, 9, 5), bool], Tensor[(3, 9, 5), float64]) */;
  %258 = cast(meta[relay.Constant][10] /* ty=Tensor[(4, 15, 8), float32] */, dtype="bool") /* ty=Tensor[(4, 15, 8), bool] */;
  %259 = shape_of(%var_930, dtype="int32") /* ty=Tensor[(3), int32] */;
  %260 = cast(%var_930, dtype="bool") /* ty=Tensor[(4, 15, 8), bool] */;
  %261 = dyn.reshape(%258, %259, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %262 = equal(%260, %261) /* ty=Tensor[(4, 15, 8), bool] */;
  %263 = cast(%262, dtype="float64") /* ty=Tensor[(4, 15, 8), float64] */;
  %264 = log(%263) /* ty=Tensor[(4, 15, 8), float64] */;
  %265 = cast(%var_930, dtype="bool") /* ty=Tensor[(4, 15, 8), bool] */;
  %266 = shape_of(%264, dtype="int32") /* ty=Tensor[(3), int32] */;
  %267 = cast(%264, dtype="bool") /* ty=Tensor[(4, 15, 8), bool] */;
  %268 = dyn.reshape(%265, %266, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %269 = cast(%262, dtype="float32") /* ty=Tensor[(4, 15, 8), float32] */;
  %270 = shape_of(%264, dtype="int32") /* ty=Tensor[(3), int32] */;
  %271 = cast(%264, dtype="float32") /* ty=Tensor[(4, 15, 8), float32] */;
  %272 = dyn.reshape(%269, %270, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %273 = %257.0;
  %274 = logical_or(%267, %268) /* ty=Tensor[(4, 15, 8), bool] */;
  %275 = multiply(%271, %272) /* ty=Tensor[(4, 15, 8), float32] */;
  (%273, meta[relay.Constant][9] /* ty=Tensor[(1, 135), bool] */, %274, %275)
}

def @func_2980(%var_2969: Tensor[(1, 10, 5), uint64], %var_2970: Tensor[(10, 10, 5), uint64]) -> (Tensor[(10, 10, 5), uint32],) {
  %276 = cast(%var_2969, dtype="uint64") /* ty=Tensor[(1, 10, 5), uint64] */;
  %277 = cast(%var_2970, dtype="uint64") /* ty=Tensor[(10, 10, 5), uint64] */;
  %278 = logical_xor(%276, %277) /* ty=Tensor[(10, 10, 5), uint64] */;
  %279 = cast(%var_2970, dtype="uint32") /* ty=Tensor[(10, 10, 5), uint32] */;
  %280 = shape_of(%278, dtype="int32") /* ty=Tensor[(3), int32] */;
  %281 = cast(%278, dtype="uint32") /* ty=Tensor[(10, 10, 5), uint32] */;
  %282 = dyn.reshape(%279, %280, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %283 = bitwise_and(%281, %282) /* ty=Tensor[(10, 10, 5), uint32] */;
  (%283,)
}

def @func_6332() -> (Tensor[(7, 5, 3), float32],) {
  %284 = @func_4400() /* ty=(Tensor[(7, 5, 3), float32],) */;
  %285 = %284.0;
  (%285,)
}

def @func_880(%var_810: Tensor[(7, 5, 3), uint8], %var_827: Tensor[(7, 5, 3), uint8], %var_838: Tensor[(15, 9, 16), float32]) -> (Tensor[(7, 5, 3), bool], Tensor[(2160), float32], Tensor[(7, 5, 3), float32], Tensor[(15, 9, 16), float32], Tensor[(15, 9, 16), float64], Tensor[(15, 9, 16), float32]) {
  %286 = cast(meta[relay.Constant][11] /* ty=uint8 */, dtype="bool") /* ty=bool */;
  %287 = cast(%var_810, dtype="bool") /* ty=Tensor[(7, 5, 3), bool] */;
  %288 = cast(meta[relay.Constant][11] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %289 = cast(%var_810, dtype="uint8") /* ty=Tensor[(7, 5, 3), uint8] */;
  %290 = logical_xor(%288, %289) /* ty=Tensor[(7, 5, 3), uint8] */;
  %291 = cast(%var_827, dtype="float32") /* ty=Tensor[(7, 5, 3), float32] */;
  %292 = shape_of(%290, dtype="int32") /* ty=Tensor[(3), int32] */;
  %293 = cast(%290, dtype="float32") /* ty=Tensor[(7, 5, 3), float32] */;
  %294 = dyn.reshape(%291, %292, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %295 = cast(meta[relay.Constant][12] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %296 = cast(meta[relay.Constant][12] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %297 = reshape(%295, newshape=[15, 9, 16]) /* ty=Tensor[(15, 9, 16), float32] */;
  %298 = reshape(%296, newshape=[15, 9, 16]) /* ty=Tensor[(15, 9, 16), float32] */;
  %299 = @func_622(%297, %298) /* ty=(Tensor[(15, 9, 16), float32],) */;
  %300 = %299.0;
  %301 = cast(%var_838, dtype="float32") /* ty=Tensor[(15, 9, 16), float32] */;
  %302 = shape_of(%300, dtype="int32") /* ty=Tensor[(3), int32] */;
  %303 = cast(%300, dtype="float32") /* ty=Tensor[(15, 9, 16), float32] */;
  %304 = dyn.reshape(%301, %302, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %305 = cast(%var_838, dtype="float64") /* ty=Tensor[(15, 9, 16), float64] */;
  %306 = shape_of(%300, dtype="int32") /* ty=Tensor[(3), int32] */;
  %307 = cast(%300, dtype="float64") /* ty=Tensor[(15, 9, 16), float64] */;
  %308 = dyn.reshape(%305, %306, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %309 = cast(meta[relay.Constant][12] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %310 = divide(%303, %304) /* ty=Tensor[(15, 9, 16), float32] */;
  %311 = cast(%310, dtype="float32") /* ty=Tensor[(15, 9, 16), float32] */;
  %312 = reshape(%309, newshape=[15, 9, 16]) /* ty=Tensor[(15, 9, 16), float32] */;
  %313 = reshape(%311, newshape=[15, 9, 16]) /* ty=Tensor[(15, 9, 16), float32] */;
  %314 = @func_622(%312, %313) /* ty=(Tensor[(15, 9, 16), float32],) */;
  %315 = greater_equal(%286, %287) /* ty=Tensor[(7, 5, 3), bool] */;
  %316 = divide(%293, %294) /* ty=Tensor[(7, 5, 3), float32] */;
  %317 = floor_divide(%307, %308) /* ty=Tensor[(15, 9, 16), float64] */;
  %318 = %314.0;
  (%315, meta[relay.Constant][12] /* ty=Tensor[(2160), float32] */, %316, %310, %317, %318)
}

def @func_1602(%var_1591: Tensor[(11, 2, 7), uint64], %var_1592: Tensor[(11, 2, 7), uint64]) -> Tensor[(11, 2, 7), uint64] {
  %319 = cast(%var_1592, dtype="uint64") /* ty=Tensor[(11, 2, 7), uint64] */;
  %320 = shape_of(%var_1591, dtype="int32") /* ty=Tensor[(3), int32] */;
  %321 = cast(%var_1591, dtype="uint64") /* ty=Tensor[(11, 2, 7), uint64] */;
  %322 = dyn.reshape(%319, %320, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  multiply(%321, %322) /* ty=Tensor[(11, 2, 7), uint64] */
}

def @main() -> (Tensor[(105), uint8], Tensor[(15, 9, 16), float32], Tensor[(15, 9, 16), float32]) {
  %323 = @func_4329() /* ty=(Tensor[(15, 9, 16), float32], Tensor[(105), uint8], Tensor[(2160), float32]) */;
  %324 = @func_4329() /* ty=(Tensor[(15, 9, 16), float32], Tensor[(105), uint8], Tensor[(2160), float32]) */;
  %325 = @func_3826() /* ty=Tensor[(15, 9, 16), float64] */;
  %326 = cast(%325, dtype="float32") /* ty=Tensor[(15, 9, 16), float32] */;
  %327 = %323.1;
  %328 = %324.0;
  %329 = acos(%326) /* ty=Tensor[(15, 9, 16), float32] */;
  (%327, %328, %329)
}

def @func_1739() -> (Tensor[(14, 7, 7), float32], Tensor[(15, 9, 16), float64], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(15, 9, 16), float32]) {
  %330 = cast(meta[relay.Constant][13] /* ty=Tensor[(14, 7, 7), float32] */, dtype="float32") /* ty=Tensor[(14, 7, 7), float32] */;
  %331 = cast(meta[relay.Constant][14] /* ty=Tensor[(105), uint8] */, dtype="uint8") /* ty=Tensor[(105), uint8] */;
  %332 = cast(meta[relay.Constant][14] /* ty=Tensor[(105), uint8] */, dtype="uint8") /* ty=Tensor[(105), uint8] */;
  %333 = cast(meta[relay.Constant][15] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %334 = reshape(%331, newshape=[7, 5, 3]) /* ty=Tensor[(7, 5, 3), uint8] */;
  %335 = reshape(%332, newshape=[7, 5, 3]) /* ty=Tensor[(7, 5, 3), uint8] */;
  %336 = reshape(%333, newshape=[15, 9, 16]) /* ty=Tensor[(15, 9, 16), float32] */;
  %337 = @func_880(%334, %335, %336) /* ty=(Tensor[(7, 5, 3), bool], Tensor[(2160), float32], Tensor[(7, 5, 3), float32], Tensor[(15, 9, 16), float32], Tensor[(15, 9, 16), float64], Tensor[(15, 9, 16), float32]) */;
  %338 = cast(meta[relay.Constant][15] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %339 = cast(meta[relay.Constant][15] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %340 = reshape(%338, newshape=[15, 9, 16]) /* ty=Tensor[(15, 9, 16), float32] */;
  %341 = reshape(%339, newshape=[15, 9, 16]) /* ty=Tensor[(15, 9, 16), float32] */;
  %342 = @func_622(%340, %341) /* ty=(Tensor[(15, 9, 16), float32],) */;
  %343 = erf(%330) /* ty=Tensor[(14, 7, 7), float32] */;
  %344 = %337.4;
  %345 = %342.0;
  (%343, %344, meta[relay.Constant][14] /* ty=Tensor[(105), uint8] */, meta[relay.Constant][15] /* ty=Tensor[(2160), float32] */, %345)
}

def @func_3800() -> Tensor[(105), uint8] {
  %346 = @func_3202() /* ty=(Tensor[(105), uint8],) */;
  %346.0
}

def @func_4289(%var_4253: Tensor[(364), float64]) -> (Tensor[(105), uint8], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(364), float64]) {
  %347 = @func_3202() /* ty=(Tensor[(105), uint8],) */;
  %348 = @func_3890() /* ty=(Tensor[(2160), float32],) */;
  %349 = cast(%var_4253, dtype="float64") /* ty=Tensor[(364), float64] */;
  %350 = reshape(%349, newshape=[14, 2, 13]) /* ty=Tensor[(14, 2, 13), float64] */;
  %351 = @func_3328(%350) /* ty=(Tensor[(14, 2, 13), float64],) */;
  %352 = %351.0;
  %353 = cast(%352, dtype="uint32") /* ty=Tensor[(14, 2, 13), uint32] */;
  %354 = shape_of(%var_4253, dtype="int32") /* ty=Tensor[(1), int32] */;
  %355 = cast(%var_4253, dtype="uint32") /* ty=Tensor[(364), uint32] */;
  %356 = dyn.reshape(%353, %354, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %357 = bitwise_or(%355, %356) /* ty=Tensor[(364), uint32] */;
  %358 = cast(%var_4253, dtype="float64") /* ty=Tensor[(364), float64] */;
  %359 = shape_of(%357, dtype="int32") /* ty=Tensor[(1), int32] */;
  %360 = cast(%357, dtype="float64") /* ty=Tensor[(364), float64] */;
  %361 = dyn.reshape(%358, %359, newshape=[]) /* ty=Tensor[(?), float64] */;
  %362 = %347.0;
  %363 = @func_2928() /* ty=Tensor[(105), uint8] */;
  %364 = %348.0;
  %365 = mod(%360, %361) /* ty=Tensor[(364), float64] */;
  (%362, %363, %364, %365)
}

def @func_5490() -> (Tensor[(7, 5, 3), float64], Tensor[(15, 9, 16), float64], Tensor[(7, 5, 3), float64]) {
  %366 = @func_2138() /* ty=Tensor[(7, 5, 3), float64] */;
  %367 = cast(%366, dtype="float64") /* ty=Tensor[(7, 5, 3), float64] */;
  %368 = cast(%366, dtype="float64") /* ty=Tensor[(7, 5, 3), float64] */;
  %369 = sin(%367) /* ty=Tensor[(7, 5, 3), float64] */;
  %370 = @func_3643() /* ty=Tensor[(15, 9, 16), float64] */;
  %371 = acos(%368) /* ty=Tensor[(7, 5, 3), float64] */;
  (%369, %370, %371)
}

def @func_5881(%var_5842: Tensor[(7, 5, 3), float32]) -> (Tensor[(16, 1, 2), float32], Tensor[(32), float32], Tensor[(7, 5, 3), float32]) {
  %372 = cast(meta[relay.Constant][16] /* ty=Tensor[(32), float32] */, dtype="float32") /* ty=Tensor[(32), float32] */;
  %373 = reshape(%372, newshape=[16, 1, 2]) /* ty=Tensor[(16, 1, 2), float32] */;
  %374 = @func_3367(%373) /* ty=(Tensor[(16, 1, 2), float32], Tensor[(105), uint8], Tensor[(7, 5, 3), float64]) */;
  %375 = @func_4400() /* ty=(Tensor[(7, 5, 3), float32],) */;
  %376 = %375.0;
  %377 = cast(%var_5842, dtype="float32") /* ty=Tensor[(7, 5, 3), float32] */;
  %378 = shape_of(%376, dtype="int32") /* ty=Tensor[(3), int32] */;
  %379 = cast(%376, dtype="float32") /* ty=Tensor[(7, 5, 3), float32] */;
  %380 = dyn.reshape(%377, %378, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %381 = %374.0;
  %382 = mod(%379, %380) /* ty=Tensor[(7, 5, 3), float32] */;
  (%381, meta[relay.Constant][16] /* ty=Tensor[(32), float32] */, %382)
}

def @func_3621(%var_3600: Tensor[(6, 2, 10), bool], %var_3601: Tensor[(6, 2, 10), bool], %var_3611: Tensor[(6, 2, 10), bool]) -> (Tensor[(6, 2, 10), bool], Tensor[(6, 2, 10), bool]) {
  %383 = cast(%var_3601, dtype="bool") /* ty=Tensor[(6, 2, 10), bool] */;
  %384 = shape_of(%var_3600, dtype="int32") /* ty=Tensor[(3), int32] */;
  %385 = cast(%var_3600, dtype="bool") /* ty=Tensor[(6, 2, 10), bool] */;
  %386 = dyn.reshape(%383, %384, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %387 = cast(%var_3611, dtype="bool") /* ty=Tensor[(6, 2, 10), bool] */;
  %388 = shape_of(%var_3600, dtype="int32") /* ty=Tensor[(3), int32] */;
  %389 = cast(%var_3600, dtype="bool") /* ty=Tensor[(6, 2, 10), bool] */;
  %390 = dyn.reshape(%387, %388, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %391 = logical_and(%385, %386) /* ty=Tensor[(6, 2, 10), bool] */;
  %392 = greater_equal(%389, %390) /* ty=Tensor[(6, 2, 10), bool] */;
  (%391, %392)
}

def @func_1824() -> (Tensor[(7, 5, 3), float64], Tensor[(7, 5, 3), float32]) {
  %393 = @func_1789() /* ty=(Tensor[(15, 9, 16), float64], Tensor[(7, 5, 3), bool], Tensor[(105), uint8]) */;
  %394 = %393.1;
  %395 = cast(%394, dtype="float64") /* ty=Tensor[(7, 5, 3), float64] */;
  %396 = cast(%394, dtype="float32") /* ty=Tensor[(7, 5, 3), float32] */;
  %397 = cosh(%395) /* ty=Tensor[(7, 5, 3), float64] */;
  %398 = sigmoid(%396) /* ty=Tensor[(7, 5, 3), float32] */;
  (%397, %398)
}

def @func_4839(%var_4755: Tensor[(11, 14, 9), uint8], %var_4756: Tensor[(11, 14, 9), uint8], %var_4799: Tensor[(50), uint64], %var_4809: Tensor[(2160), float32]) -> (Tensor[(105), uint8], Tensor[(364), float64], Tensor[(120), bool], Tensor[(6, 2, 10), float64], Tensor[(10, 10, 5), uint32], Tensor[(50), uint64], Tensor[(50, 10), uint64], Tensor[(11, 14, 9), float64], Tensor[(7, 5, 3), bool], Tensor[(2160), float32], Tensor[(364, 3), bool], Tensor[(364, ?), float64]) {
  %399 = cast(meta[relay.Constant][17] /* ty=Tensor[(364, 1), float64] */, dtype="float64") /* ty=Tensor[(364, 1), float64] */;
  %400 = reshape(%399, newshape=[364]) /* ty=Tensor[(364), float64] */;
  %401 = @func_4289(%400) /* ty=(Tensor[(105), uint8], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(364), float64]) */;
  %402 = cast(meta[relay.Constant][18] /* ty=Tensor[(120), bool] */, dtype="bool") /* ty=Tensor[(120), bool] */;
  %403 = cast(meta[relay.Constant][18] /* ty=Tensor[(120), bool] */, dtype="bool") /* ty=Tensor[(120), bool] */;
  %404 = cast(meta[relay.Constant][18] /* ty=Tensor[(120), bool] */, dtype="bool") /* ty=Tensor[(120), bool] */;
  %405 = reshape(%402, newshape=[6, 2, 10]) /* ty=Tensor[(6, 2, 10), bool] */;
  %406 = reshape(%403, newshape=[6, 2, 10]) /* ty=Tensor[(6, 2, 10), bool] */;
  %407 = reshape(%404, newshape=[6, 2, 10]) /* ty=Tensor[(6, 2, 10), bool] */;
  %408 = @func_3621(%405, %406, %407) /* ty=(Tensor[(6, 2, 10), bool], Tensor[(6, 2, 10), bool]) */;
  %409 = %408.0;
  %410 = cast(%409, dtype="float64") /* ty=Tensor[(6, 2, 10), float64] */;
  %411 = cast(%var_4799, dtype="uint64") /* ty=Tensor[(50), uint64] */;
  %412 = cast(meta[relay.Constant][19] /* ty=Tensor[(50, 10), uint64] */, dtype="uint64") /* ty=Tensor[(50, 10), uint64] */;
  %413 = reshape(%411, newshape=[1, 10, 5]) /* ty=Tensor[(1, 10, 5), uint64] */;
  %414 = reshape(%412, newshape=[10, 10, 5]) /* ty=Tensor[(10, 10, 5), uint64] */;
  %415 = @func_2980(%413, %414) /* ty=(Tensor[(10, 10, 5), uint32],) */;
  %416 = cast(%var_4756, dtype="bool") /* ty=Tensor[(11, 14, 9), bool] */;
  %417 = shape_of(%var_4755, dtype="int32") /* ty=Tensor[(3), int32] */;
  %418 = cast(%var_4755, dtype="bool") /* ty=Tensor[(11, 14, 9), bool] */;
  %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %420 = greater(%418, %419) /* ty=Tensor[(11, 14, 9), bool] */;
  %421 = cast(%420, dtype="float64") /* ty=Tensor[(11, 14, 9), float64] */;
  %422 = @func_3779() /* ty=Tensor[(105), uint8] */;
  %423 = cast(%422, dtype="uint8") /* ty=Tensor[(105), uint8] */;
  %424 = cast(%422, dtype="uint8") /* ty=Tensor[(105), uint8] */;
  %425 = cast(%var_4809, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %426 = reshape(%423, newshape=[7, 5, 3]) /* ty=Tensor[(7, 5, 3), uint8] */;
  %427 = reshape(%424, newshape=[7, 5, 3]) /* ty=Tensor[(7, 5, 3), uint8] */;
  %428 = reshape(%425, newshape=[15, 9, 16]) /* ty=Tensor[(15, 9, 16), float32] */;
  %429 = @func_880(%426, %427, %428) /* ty=(Tensor[(7, 5, 3), bool], Tensor[(2160), float32], Tensor[(7, 5, 3), float32], Tensor[(15, 9, 16), float32], Tensor[(15, 9, 16), float64], Tensor[(15, 9, 16), float32]) */;
  %430 = cast(meta[relay.Constant][17] /* ty=Tensor[(364, 1), float64] */, dtype="bool") /* ty=Tensor[(364, 1), bool] */;
  %431 = cast(meta[relay.Constant][20] /* ty=Tensor[(364, 3), float64] */, dtype="bool") /* ty=Tensor[(364, 3), bool] */;
  %432 = cast(meta[relay.Constant][17] /* ty=Tensor[(364, 1), float64] */, dtype="float64") /* ty=Tensor[(364, 1), float64] */;
  %433 = sin(%432) /* ty=Tensor[(364, 1), float64] */;
  %434 = cast(%433, dtype="uint16") /* ty=Tensor[(364, 1), uint16] */;
  %435 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(364, 1), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %436 = cast(meta[relay.Constant][17] /* ty=Tensor[(364, 1), float64] */, dtype="uint16") /* ty=Tensor[(364, 1), uint16] */;
  %437 = dyn.reshape(%434, %435, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %438 = maximum(%436, %437) /* ty=Tensor[(364, ?), uint16] */;
  %439 = cast(%438, dtype="float64") /* ty=Tensor[(364, ?), float64] */;
  %440 = shape_of(%433, dtype="int32") /* ty=Tensor[(2), int32] */;
  %441 = cast(%433, dtype="float64") /* ty=Tensor[(364, 1), float64] */;
  %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %443 = %401.3;
  %444 = atanh(%410) /* ty=Tensor[(6, 2, 10), float64] */;
  %445 = %415.0;
  %446 = tan(%421) /* ty=Tensor[(11, 14, 9), float64] */;
  %447 = %429.0;
  %448 = greater_equal(%430, %431) /* ty=Tensor[(364, 3), bool] */;
  %449 = mod(%441, %442) /* ty=Tensor[(364, ?), float64] */;
  (%422, %443, meta[relay.Constant][18] /* ty=Tensor[(120), bool] */, %444, %445, %var_4799, meta[relay.Constant][19] /* ty=Tensor[(50, 10), uint64] */, %446, %447, %var_4809, %448, %449)
}

def @func_5972(%var_5947: Tensor[(16, 16, 4), float32], %var_5948: Tensor[(16, 16, 4), float32]) -> (Tensor[(16, 16, 4), bool], Tensor[(2160), float32]) {
  %450 = cast(%var_5948, dtype="bool") /* ty=Tensor[(16, 16, 4), bool] */;
  %451 = shape_of(%var_5947, dtype="int32") /* ty=Tensor[(3), int32] */;
  %452 = cast(%var_5947, dtype="bool") /* ty=Tensor[(16, 16, 4), bool] */;
  %453 = dyn.reshape(%450, %451, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %454 = @func_3890() /* ty=(Tensor[(2160), float32],) */;
  %455 = equal(%452, %453) /* ty=Tensor[(16, 16, 4), bool] */;
  %456 = %454.0;
  (%455, %456)
}

def @func_2682() -> (Tensor[(7, 5, 3), float32], Tensor[(105), uint8], Tensor[(84), uint32]) {
  %457 = @func_2557() /* ty=Tensor[(7, 5, 3), float32] */;
  %458 = cast(%457, dtype="float32") /* ty=Tensor[(7, 5, 3), float32] */;
  %459 = cast(meta[relay.Constant][21] /* ty=Tensor[(84), uint32] */, dtype="uint32") /* ty=Tensor[(84), uint32] */;
  %460 = reshape(%459, newshape=[84]) /* ty=Tensor[(84), uint32] */;
  %461 = @func_2306(%460) /* ty=(Tensor[(105), uint8], Tensor[(4, 7, 3), float64], Tensor[(84), uint32], Tensor[(15, 9, 16), bool]) */;
  %462 = tan(%458) /* ty=Tensor[(7, 5, 3), float32] */;
  %463 = %461.0;
  (%462, %463, meta[relay.Constant][21] /* ty=Tensor[(84), uint32] */)
}

def @func_4349() -> Tensor[(105), uint8] {
  @func_2928() /* ty=Tensor[(105), uint8] */
}

def @func_2743(%var_2716: Tensor[(5, 15, 5), uint16], %var_2717: Tensor[(5, 15, 5), uint16], %var_2737: Tensor[(105), uint8], %var_2738: Tensor[(2160), float32]) -> (Tensor[(5, 15, 5), bool], Tensor[(105), uint8], Tensor[(105), uint8], Tensor[(2160), float32]) {
  %464 = cast(%var_2717, dtype="bool") /* ty=Tensor[(5, 15, 5), bool] */;
  %465 = shape_of(%var_2716, dtype="int32") /* ty=Tensor[(3), int32] */;
  %466 = cast(%var_2716, dtype="bool") /* ty=Tensor[(5, 15, 5), bool] */;
  %467 = dyn.reshape(%464, %465, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %468 = cast(%var_2737, dtype="uint8") /* ty=Tensor[(105), uint8] */;
  %469 = cast(%var_2738, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %470 = reshape(%468, newshape=[105]) /* ty=Tensor[(105), uint8] */;
  %471 = reshape(%469, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
  %472 = @func_1158(%470, %471) /* ty=(Tensor[(11, 11, 15), float64], Tensor[(15, 9, 16), float32], float32, Tensor[(480), float32], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(15, 9, 16), float32]) */;
  %473 = greater(%466, %467) /* ty=Tensor[(5, 15, 5), bool] */;
  %474 = %472.4;
  (%473, %474, %var_2737, %var_2738)
}

def @func_3826() -> Tensor[(15, 9, 16), float64] {
  @func_3643() /* ty=Tensor[(15, 9, 16), float64] */
}

def @func_4954(%var_4941: Tensor[(2160), float32]) -> (Tensor[(105), uint8], Tensor[(480), float32], Tensor[(2160), float32]) {
  %475 = @func_2928() /* ty=Tensor[(105), uint8] */;
  %476 = cast(%475, dtype="uint8") /* ty=Tensor[(105), uint8] */;
  %477 = cast(%var_4941, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %478 = reshape(%476, newshape=[105]) /* ty=Tensor[(105), uint8] */;
  %479 = reshape(%477, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
  %480 = @func_1158(%478, %479) /* ty=(Tensor[(11, 11, 15), float64], Tensor[(15, 9, 16), float32], float32, Tensor[(480), float32], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(15, 9, 16), float32]) */;
  %481 = %480.3;
  (%475, %481, %var_4941)
}

def @func_5377() -> (Tensor[(2160), bool],) {
  %482 = @func_2819() /* ty=(Tensor[(15, 9, 16), float64], Tensor[(2160), float32]) */;
  %483 = %482.1;
  %484 = cast(meta[relay.Constant][22] /* ty=Tensor[(2160), float32] */, dtype="bool") /* ty=Tensor[(2160), bool] */;
  %485 = shape_of(%483, dtype="int32") /* ty=Tensor[(1), int32] */;
  %486 = cast(%483, dtype="bool") /* ty=Tensor[(2160), bool] */;
  %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?), bool] */;
  %488 = equal(%486, %487) /* ty=Tensor[(2160), bool] */;
  (%488,)
}

def @func_5799(%var_5731: Tensor[(182, 2), float64], %var_5746: Tensor[(192), float64], %var_5747: Tensor[(2688), float64]) -> (Tensor[(7, 5, 3), float32], Tensor[(14, 2, 13), float64], Tensor[(182, 2), float64], Tensor[(84), uint32], Tensor[(192), float64], Tensor[(2688), float64], Tensor[(84), uint32], Tensor[(7, 5, 3), float32], Tensor[(105), uint8], Tensor[(105), uint8], Tensor[(11, 8, 12), int64], Tensor[(2160), float32]) {
  %489 = @func_4400() /* ty=(Tensor[(7, 5, 3), float32],) */;
  %490 = cast(%var_5731, dtype="float64") /* ty=Tensor[(182, 2), float64] */;
  %491 = reshape(%490, newshape=[14, 2, 13]) /* ty=Tensor[(14, 2, 13), float64] */;
  %492 = @func_3328(%491) /* ty=(Tensor[(14, 2, 13), float64],) */;
  %493 = cast(%var_5746, dtype="float64") /* ty=Tensor[(192), float64] */;
  %494 = cast(%var_5747, dtype="float64") /* ty=Tensor[(2688), float64] */;
  %495 = cast(%var_5731, dtype="float64") /* ty=Tensor[(182, 2), float64] */;
  %496 = cast(meta[relay.Constant][23] /* ty=Tensor[(84), uint32] */, dtype="uint32") /* ty=Tensor[(84), uint32] */;
  %497 = reshape(%493, newshape=[1, 16, 12]) /* ty=Tensor[(1, 16, 12), float64] */;
  %498 = reshape(%494, newshape=[14, 16, 12]) /* ty=Tensor[(14, 16, 12), float64] */;
  %499 = reshape(%495, newshape=[364]) /* ty=Tensor[(364), float64] */;
  %500 = reshape(%496, newshape=[84]) /* ty=Tensor[(84), uint32] */;
  %501 = @func_3487(%497, %498, %499, %500) /* ty=(Tensor[(3, 9, 5), uint64], Tensor[(1, 135), bool], Tensor[(14, 16, 12), uint64], Tensor[(14, 2, 13), float64], Tensor[(364), float64], Tensor[(14, 16, 12), float32], Tensor[(4, 7, 3), float64], Tensor[(84), uint32]) */;
  %502 = @func_5321() /* ty=(Tensor[(15, 9, 16), float64], Tensor[(7, 5, 3), float32]) */;
  %503 = @func_3202() /* ty=(Tensor[(105), uint8],) */;
  %504 = @func_5624() /* ty=(Tensor[(105), uint8], Tensor[(14, 2, 3), float32], Tensor[(7, 5, 3), float64]) */;
  %505 = @func_1739() /* ty=(Tensor[(14, 7, 7), float32], Tensor[(15, 9, 16), float64], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(15, 9, 16), float32]) */;
  %506 = %489.0;
  %507 = %492.0;
  %508 = %501.7;
  %509 = %502.1;
  %510 = %503.0;
  %511 = %504.0;
  %512 = @func_4707() /* ty=Tensor[(11, 8, 12), int64] */;
  %513 = %505.3;
  (%506, %507, %var_5731, %508, %var_5746, %var_5747, meta[relay.Constant][23] /* ty=Tensor[(84), uint32] */, %509, %510, %511, %512, %513)
}

def @func_3595() -> (Tensor[(14, 2, 3), float32],) {
  %514 = cast(meta[relay.Constant][24] /* ty=Tensor[(14, 2, 3), float32] */, dtype="float32") /* ty=Tensor[(14, 2, 3), float32] */;
  %515 = acosh(%514) /* ty=Tensor[(14, 2, 3), float32] */;
  (%515,)
}

def @func_6081(%var_6069: Tensor[(50), uint64]) -> (Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(50), uint64], Tensor[(50), uint64]) {
  %516 = @func_2534() /* ty=(Tensor[(105), uint8],) */;
  %517 = @func_4329() /* ty=(Tensor[(15, 9, 16), float32], Tensor[(105), uint8], Tensor[(2160), float32]) */;
  %518 = cast(%var_6069, dtype="uint64") /* ty=Tensor[(50), uint64] */;
  %519 = reshape(%518, newshape=[50]) /* ty=Tensor[(50), uint64] */;
  %520 = @func_4923(%519) /* ty=(Tensor[(15, 9, 16), float64], Tensor[(105), uint8], Tensor[(1386), uint8], Tensor[(50), uint64], Tensor[(15, 9, 16), float64]) */;
  %521 = %516.0;
  %522 = %517.2;
  %523 = %520.3;
  (%521, %522, %523, %var_6069)
}

def @func_5454(%var_5417: Tensor[(2160), float32]) -> (Tensor[(105), uint8], Tensor[(480), float32], Tensor[(2160), float32], Tensor[(11, 2, 7), uint64], Tensor[(480), float32], Tensor[(154), float32]) {
  %524 = cast(%var_5417, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %525 = reshape(%524, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
  %526 = @func_4954(%525) /* ty=(Tensor[(105), uint8], Tensor[(480), float32], Tensor[(2160), float32]) */;
  %527 = cast(meta[relay.Constant][25] /* ty=Tensor[(154), uint64] */, dtype="uint64") /* ty=Tensor[(154), uint64] */;
  %528 = cast(meta[relay.Constant][25] /* ty=Tensor[(154), uint64] */, dtype="uint64") /* ty=Tensor[(154), uint64] */;
  %529 = reshape(%527, newshape=[11, 2, 7]) /* ty=Tensor[(11, 2, 7), uint64] */;
  %530 = reshape(%528, newshape=[11, 2, 7]) /* ty=Tensor[(11, 2, 7), uint64] */;
  %531 = @func_4349() /* ty=Tensor[(105), uint8] */;
  %532 = cast(%531, dtype="uint8") /* ty=Tensor[(105), uint8] */;
  %533 = cast(%var_5417, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %534 = reshape(%532, newshape=[105]) /* ty=Tensor[(105), uint8] */;
  %535 = reshape(%533, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
  %536 = @func_1158(%534, %535) /* ty=(Tensor[(11, 11, 15), float64], Tensor[(15, 9, 16), float32], float32, Tensor[(480), float32], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(15, 9, 16), float32]) */;
  %537 = cast(meta[relay.Constant][25] /* ty=Tensor[(154), uint64] */, dtype="float32") /* ty=Tensor[(154), float32] */;
  %538 = acosh(%537) /* ty=Tensor[(154), float32] */;
  %539 = cast(meta[relay.Constant][25] /* ty=Tensor[(154), uint64] */, dtype="float32") /* ty=Tensor[(154), float32] */;
  %540 = shape_of(%538, dtype="int32") /* ty=Tensor[(1), int32] */;
  %541 = cast(%538, dtype="float32") /* ty=Tensor[(154), float32] */;
  %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?), float32] */;
  %543 = %526.1;
  %544 = @func_1602(%529, %530) /* ty=Tensor[(11, 2, 7), uint64] */;
  %545 = %536.3;
  %546 = floor_divide(%541, %542) /* ty=Tensor[(154), float32] */;
  (%531, %543, %var_5417, %544, %545, %546)
}

def @func_1053(%var_1014: float32, %var_1029: Tensor[(480), float32], %var_1032: Tensor[(105), uint8], %var_1033: Tensor[(2160), float32]) -> (Tensor[(4, 15, 8), float32], Tensor[(480), float32], Tensor[(15, 9, 16), float32], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(13, 1, 14), float32], Tensor[(15, 9, 16), float32]) {
  %547 = cast(%var_1029, dtype="float32") /* ty=Tensor[(480), float32] */;
  %548 = reshape(%547, newshape=[4, 15, 8]) /* ty=Tensor[(4, 15, 8), float32] */;
  %549 = @func_993(%548) /* ty=(Tensor[(3, 9, 5), uint64], Tensor[(1, 135), bool], Tensor[(4, 15, 8), bool], Tensor[(4, 15, 8), float32]) */;
  %550 = cast(%var_1032, dtype="uint8") /* ty=Tensor[(105), uint8] */;
  %551 = cast(%var_1032, dtype="uint8") /* ty=Tensor[(105), uint8] */;
  %552 = cast(%var_1033, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %553 = reshape(%550, newshape=[7, 5, 3]) /* ty=Tensor[(7, 5, 3), uint8] */;
  %554 = reshape(%551, newshape=[7, 5, 3]) /* ty=Tensor[(7, 5, 3), uint8] */;
  %555 = reshape(%552, newshape=[15, 9, 16]) /* ty=Tensor[(15, 9, 16), float32] */;
  %556 = @func_880(%553, %554, %555) /* ty=(Tensor[(7, 5, 3), bool], Tensor[(2160), float32], Tensor[(7, 5, 3), float32], Tensor[(15, 9, 16), float32], Tensor[(15, 9, 16), float64], Tensor[(15, 9, 16), float32]) */;
  %557 = cast(%var_1014, dtype="float32") /* ty=float32 */;
  %558 = cast(meta[relay.Constant][26] /* ty=Tensor[(13, 1, 14), float32] */, dtype="float32") /* ty=Tensor[(13, 1, 14), float32] */;
  %559 = divide(%557, %558) /* ty=Tensor[(13, 1, 14), float32] */;
  %560 = cast(%559, dtype="float64") /* ty=Tensor[(13, 1, 14), float64] */;
  %561 = sin(%560) /* ty=Tensor[(13, 1, 14), float64] */;
  %562 = cast(%561, dtype="float32") /* ty=Tensor[(13, 1, 14), float32] */;
  %563 = cast(%var_1032, dtype="uint8") /* ty=Tensor[(105), uint8] */;
  %564 = cast(%var_1032, dtype="uint8") /* ty=Tensor[(105), uint8] */;
  %565 = %556.3;
  %566 = cast(%565, dtype="float32") /* ty=Tensor[(15, 9, 16), float32] */;
  %567 = reshape(%563, newshape=[7, 5, 3]) /* ty=Tensor[(7, 5, 3), uint8] */;
  %568 = reshape(%564, newshape=[7, 5, 3]) /* ty=Tensor[(7, 5, 3), uint8] */;
  %569 = reshape(%566, newshape=[15, 9, 16]) /* ty=Tensor[(15, 9, 16), float32] */;
  %570 = @func_880(%567, %568, %569) /* ty=(Tensor[(7, 5, 3), bool], Tensor[(2160), float32], Tensor[(7, 5, 3), float32], Tensor[(15, 9, 16), float32], Tensor[(15, 9, 16), float64], Tensor[(15, 9, 16), float32]) */;
  %571 = %549.3;
  %572 = acos(%562) /* ty=Tensor[(13, 1, 14), float32] */;
  %573 = %570.5;
  (%571, %var_1029, %565, %var_1032, %var_1033, %572, %573)
}

def @func_4707() -> Tensor[(11, 8, 12), int64] {
  %574 = cast(meta[relay.Constant][28] /* ty=Tensor[(11, 8, 12), int64] */, dtype="int64") /* ty=Tensor[(11, 8, 12), int64] */;
  %575 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(11, 8, 12), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %576 = cast(meta[relay.Constant][27] /* ty=Tensor[(11, 8, 12), int64] */, dtype="int64") /* ty=Tensor[(11, 8, 12), int64] */;
  %577 = dyn.reshape(%574, %575, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  left_shift(%576, %577) /* ty=Tensor[(11, 8, 12), int64] */
}

def @func_3890() -> (Tensor[(2160), float32],) {
  %578 = @func_2819() /* ty=(Tensor[(15, 9, 16), float64], Tensor[(2160), float32]) */;
  %579 = %578.1;
  (%579,)
}

def @func_5088(%var_5023: Tensor[(7, 5, 3), float64]) -> (Tensor[(7, 5, 3), bool], Tensor[(7, 5, 3), float32]) {
  %580 = @func_2065() /* ty=Tensor[(7, 5, 3), float64] */;
  %581 = cast(%var_5023, dtype="float32") /* ty=Tensor[(7, 5, 3), float32] */;
  %582 = shape_of(%580, dtype="int32") /* ty=Tensor[(3), int32] */;
  %583 = cast(%580, dtype="float32") /* ty=Tensor[(7, 5, 3), float32] */;
  %584 = dyn.reshape(%581, %582, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %585 = floor_mod(%583, %584) /* ty=Tensor[(7, 5, 3), float32] */;
  %586 = cast(%580, dtype="bool") /* ty=Tensor[(7, 5, 3), bool] */;
  %587 = shape_of(%585, dtype="int32") /* ty=Tensor[(3), int32] */;
  %588 = cast(%585, dtype="bool") /* ty=Tensor[(7, 5, 3), bool] */;
  %589 = dyn.reshape(%586, %587, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %590 = cast(%580, dtype="float32") /* ty=Tensor[(7, 5, 3), float32] */;
  %591 = acosh(%590) /* ty=Tensor[(7, 5, 3), float32] */;
  %592 = cast(%591, dtype="float32") /* ty=Tensor[(7, 5, 3), float32] */;
  %593 = not_equal(%588, %589) /* ty=Tensor[(7, 5, 3), bool] */;
  %594 = asin(%592) /* ty=Tensor[(7, 5, 3), float32] */;
  (%593, %594)
}

def @func_1942(%var_1871: Tensor[(105), uint8]) -> (Tensor[(105), uint8], Tensor[(15, 9, 16), bool], Tensor[(15, 9, 16), bool], Tensor[(15, 9, 16), bool]) {
  %595 = cast(%var_1871, dtype="uint8") /* ty=Tensor[(105), uint8] */;
  %596 = @func_1739() /* ty=(Tensor[(14, 7, 7), float32], Tensor[(15, 9, 16), float64], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(15, 9, 16), float32]) */;
  %597 = %596.4;
  %598 = cast(%597, dtype="float32") /* ty=Tensor[(15, 9, 16), float32] */;
  %599 = reshape(%595, newshape=[105]) /* ty=Tensor[(105), uint8] */;
  %600 = reshape(%598, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
  %601 = @func_1158(%599, %600) /* ty=(Tensor[(11, 11, 15), float64], Tensor[(15, 9, 16), float32], float32, Tensor[(480), float32], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(15, 9, 16), float32]) */;
  %602 = %601.1;
  %603 = cast(%602, dtype="float32") /* ty=Tensor[(15, 9, 16), float32] */;
  %604 = exp(%603) /* ty=Tensor[(15, 9, 16), float32] */;
  %605 = cast(%602, dtype="bool") /* ty=Tensor[(15, 9, 16), bool] */;
  %606 = shape_of(%604, dtype="int32") /* ty=Tensor[(3), int32] */;
  %607 = cast(%604, dtype="bool") /* ty=Tensor[(15, 9, 16), bool] */;
  %608 = dyn.reshape(%605, %606, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %609 = cast(%597, dtype="float32") /* ty=Tensor[(15, 9, 16), float32] */;
  %610 = sqrt(%609) /* ty=Tensor[(15, 9, 16), float32] */;
  %611 = cast(%610, dtype="bool") /* ty=Tensor[(15, 9, 16), bool] */;
  %612 = shape_of(%604, dtype="int32") /* ty=Tensor[(3), int32] */;
  %613 = cast(%604, dtype="bool") /* ty=Tensor[(15, 9, 16), bool] */;
  %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %615 = cast(meta[relay.Constant][29] /* ty=Tensor[(15, 9, 16), float32] */, dtype="bool") /* ty=Tensor[(15, 9, 16), bool] */;
  %616 = shape_of(%604, dtype="int32") /* ty=Tensor[(3), int32] */;
  %617 = cast(%604, dtype="bool") /* ty=Tensor[(15, 9, 16), bool] */;
  %618 = dyn.reshape(%615, %616, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %619 = logical_or(%607, %608) /* ty=Tensor[(15, 9, 16), bool] */;
  %620 = less_equal(%613, %614) /* ty=Tensor[(15, 9, 16), bool] */;
  %621 = greater_equal(%617, %618) /* ty=Tensor[(15, 9, 16), bool] */;
  (%var_1871, %619, %620, %621)
}

def @func_5255(%var_5222: Tensor[(8, 24), float64], %var_5225: Tensor[(84), uint32], %var_5249: Tensor[(154), uint64]) -> (Tensor[(7, 5, 3), float64], Tensor[(105), uint8], Tensor[(1, 135), bool], Tensor[(8, 24), float64], Tensor[(2688), float64], Tensor[(364), float64], Tensor[(84), uint32], Tensor[(11, 2, 7), uint64], Tensor[(154), uint64], Tensor[(7, 5, 3), float64], Tensor[(11, 2, 7), uint64]) {
  %622 = @func_2534() /* ty=(Tensor[(105), uint8],) */;
  %623 = cast(%var_5222, dtype="float64") /* ty=Tensor[(8, 24), float64] */;
  %624 = cast(meta[relay.Constant][30] /* ty=Tensor[(2688), float64] */, dtype="float64") /* ty=Tensor[(2688), float64] */;
  %625 = cast(meta[relay.Constant][31] /* ty=Tensor[(364), float64] */, dtype="float64") /* ty=Tensor[(364), float64] */;
  %626 = cast(%var_5225, dtype="uint32") /* ty=Tensor[(84), uint32] */;
  %627 = reshape(%623, newshape=[1, 16, 12]) /* ty=Tensor[(1, 16, 12), float64] */;
  %628 = reshape(%624, newshape=[14, 16, 12]) /* ty=Tensor[(14, 16, 12), float64] */;
  %629 = reshape(%625, newshape=[364]) /* ty=Tensor[(364), float64] */;
  %630 = reshape(%626, newshape=[84]) /* ty=Tensor[(84), uint32] */;
  %631 = @func_3487(%627, %628, %629, %630) /* ty=(Tensor[(3, 9, 5), uint64], Tensor[(1, 135), bool], Tensor[(14, 16, 12), uint64], Tensor[(14, 2, 13), float64], Tensor[(364), float64], Tensor[(14, 16, 12), float32], Tensor[(4, 7, 3), float64], Tensor[(84), uint32]) */;
  %632 = cast(%var_5249, dtype="uint64") /* ty=Tensor[(154), uint64] */;
  %633 = cast(%var_5249, dtype="uint64") /* ty=Tensor[(154), uint64] */;
  %634 = reshape(%632, newshape=[11, 2, 7]) /* ty=Tensor[(11, 2, 7), uint64] */;
  %635 = reshape(%633, newshape=[11, 2, 7]) /* ty=Tensor[(11, 2, 7), uint64] */;
  %636 = cast(%var_5225, dtype="uint32") /* ty=Tensor[(84), uint32] */;
  %637 = cast(%var_5225, dtype="uint32") /* ty=Tensor[(84), uint32] */;
  %638 = reshape(%636, newshape=[4, 7, 3]) /* ty=Tensor[(4, 7, 3), uint32] */;
  %639 = reshape(%637, newshape=[4, 7, 3]) /* ty=Tensor[(4, 7, 3), uint32] */;
  %640 = @func_2186(%638, %639) /* ty=(Tensor[(4, 7, 3), float64], Tensor[(7, 5, 3), float64]) */;
  %641 = @func_1602(%634, %635) /* ty=Tensor[(11, 2, 7), uint64] */;
  %642 = cast(%641, dtype="uint64") /* ty=Tensor[(11, 2, 7), uint64] */;
  %643 = reshape(%642, newshape=[154]) /* ty=Tensor[(154), uint64] */;
  %644 = @func_2378(%643) /* ty=(Tensor[(105), uint8], Tensor[(11, 2, 7), uint64], Tensor[(154), uint64], Tensor[(3, 9, 5), bool], Tensor[(135), bool]) */;
  %645 = @func_2138() /* ty=Tensor[(7, 5, 3), float64] */;
  %646 = %622.0;
  %647 = %631.1;
  %648 = %640.1;
  %649 = %644.1;
  (%645, %646, %647, %var_5222, meta[relay.Constant][30] /* ty=Tensor[(2688), float64] */, meta[relay.Constant][31] /* ty=Tensor[(364), float64] */, %var_5225, %641, %var_5249, %648, %649)
}

def @func_2306(%var_2284: Tensor[(84), uint32]) -> (Tensor[(105), uint8], Tensor[(4, 7, 3), float64], Tensor[(84), uint32], Tensor[(15, 9, 16), bool]) {
  %650 = @func_1739() /* ty=(Tensor[(14, 7, 7), float32], Tensor[(15, 9, 16), float64], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(15, 9, 16), float32]) */;
  %651 = cast(%var_2284, dtype="uint32") /* ty=Tensor[(84), uint32] */;
  %652 = cast(%var_2284, dtype="uint32") /* ty=Tensor[(84), uint32] */;
  %653 = reshape(%651, newshape=[4, 7, 3]) /* ty=Tensor[(4, 7, 3), uint32] */;
  %654 = reshape(%652, newshape=[4, 7, 3]) /* ty=Tensor[(4, 7, 3), uint32] */;
  %655 = @func_2186(%653, %654) /* ty=(Tensor[(4, 7, 3), float64], Tensor[(7, 5, 3), float64]) */;
  %656 = %650.2;
  %657 = cast(%656, dtype="uint8") /* ty=Tensor[(105), uint8] */;
  %658 = reshape(%657, newshape=[105]) /* ty=Tensor[(105), uint8] */;
  %659 = @func_1942(%658) /* ty=(Tensor[(105), uint8], Tensor[(15, 9, 16), bool], Tensor[(15, 9, 16), bool], Tensor[(15, 9, 16), bool]) */;
  %660 = %655.0;
  %661 = %659.3;
  (%656, %660, %var_2284, %661)
}

def @func_6022(%var_6012: Tensor[(4, 14, 8), float32]) -> Tensor[(4, 14, 8), float32] {
  %662 = cast(meta[relay.Constant][32] /* ty=Tensor[(4, 1, 8), float32] */, dtype="float32") /* ty=Tensor[(4, 1, 8), float32] */;
  %663 = cast(%var_6012, dtype="float32") /* ty=Tensor[(4, 14, 8), float32] */;
  mod(%662, %663) /* ty=Tensor[(4, 14, 8), float32] */
}

def @func_1789() -> (Tensor[(15, 9, 16), float64], Tensor[(7, 5, 3), bool], Tensor[(105), uint8]) {
  %664 = @func_1739() /* ty=(Tensor[(14, 7, 7), float32], Tensor[(15, 9, 16), float64], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(15, 9, 16), float32]) */;
  %665 = cast(meta[relay.Constant][33] /* ty=Tensor[(105), uint8] */, dtype="uint8") /* ty=Tensor[(105), uint8] */;
  %666 = cast(meta[relay.Constant][33] /* ty=Tensor[(105), uint8] */, dtype="uint8") /* ty=Tensor[(105), uint8] */;
  %667 = %664.1;
  %668 = cast(%667, dtype="float32") /* ty=Tensor[(15, 9, 16), float32] */;
  %669 = reshape(%665, newshape=[7, 5, 3]) /* ty=Tensor[(7, 5, 3), uint8] */;
  %670 = reshape(%666, newshape=[7, 5, 3]) /* ty=Tensor[(7, 5, 3), uint8] */;
  %671 = reshape(%668, newshape=[15, 9, 16]) /* ty=Tensor[(15, 9, 16), float32] */;
  %672 = @func_880(%669, %670, %671) /* ty=(Tensor[(7, 5, 3), bool], Tensor[(2160), float32], Tensor[(7, 5, 3), float32], Tensor[(15, 9, 16), float32], Tensor[(15, 9, 16), float64], Tensor[(15, 9, 16), float32]) */;
  %673 = %672.0;
  (%667, %673, meta[relay.Constant][33] /* ty=Tensor[(105), uint8] */)
}

def @func_5827() -> (Tensor[(14, 2, 3), float32], Tensor[(7, 5, 3), float64]) {
  %674 = @func_5624() /* ty=(Tensor[(105), uint8], Tensor[(14, 2, 3), float32], Tensor[(7, 5, 3), float64]) */;
  %675 = @func_5490() /* ty=(Tensor[(7, 5, 3), float64], Tensor[(15, 9, 16), float64], Tensor[(7, 5, 3), float64]) */;
  %676 = %674.1;
  %677 = %675.2;
  (%676, %677)
}

def @func_3230(%var_3216: Tensor[(480), float32]) -> (Tensor[(7, 5, 3), float32], Tensor[(4, 15, 8), float32], Tensor[(480), float32], Tensor[(15, 9, 16), float32], Tensor[(2160), float32]) {
  %678 = @func_1824() /* ty=(Tensor[(7, 5, 3), float64], Tensor[(7, 5, 3), float32]) */;
  %679 = cast(%var_3216, dtype="float32") /* ty=Tensor[(480), float32] */;
  %680 = reshape(%679, newshape=[4, 15, 8]) /* ty=Tensor[(4, 15, 8), float32] */;
  %681 = @func_993(%680) /* ty=(Tensor[(3, 9, 5), uint64], Tensor[(1, 135), bool], Tensor[(4, 15, 8), bool], Tensor[(4, 15, 8), float32]) */;
  %682 = %678.1;
  %683 = cast(%682, dtype="uint8") /* ty=Tensor[(7, 5, 3), uint8] */;
  %684 = cast(%682, dtype="uint8") /* ty=Tensor[(7, 5, 3), uint8] */;
  %685 = cast(meta[relay.Constant][34] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %686 = reshape(%683, newshape=[7, 5, 3]) /* ty=Tensor[(7, 5, 3), uint8] */;
  %687 = reshape(%684, newshape=[7, 5, 3]) /* ty=Tensor[(7, 5, 3), uint8] */;
  %688 = reshape(%685, newshape=[15, 9, 16]) /* ty=Tensor[(15, 9, 16), float32] */;
  %689 = @func_880(%686, %687, %688) /* ty=(Tensor[(7, 5, 3), bool], Tensor[(2160), float32], Tensor[(7, 5, 3), float32], Tensor[(15, 9, 16), float32], Tensor[(15, 9, 16), float64], Tensor[(15, 9, 16), float32]) */;
  %690 = %681.3;
  %691 = %689.3;
  (%682, %690, %var_3216, %691, meta[relay.Constant][34] /* ty=Tensor[(2160), float32] */)
}

def @func_3328(%var_3318: Tensor[(14, 2, 13), float64]) -> (Tensor[(14, 2, 13), float64],) {
  %692 = cast(%var_3318, dtype="float64") /* ty=Tensor[(14, 2, 13), float64] */;
  %693 = asin(%692) /* ty=Tensor[(14, 2, 13), float64] */;
  (%693,)
}

def @func_5669(%var_5652: Tensor[(2160), float32], %var_5657: Tensor[(2160), float32]) -> (Tensor[(7, 5, 3), float32], Tensor[(2160), int16], Tensor[(2160), bool]) {
  %694 = @func_3890() /* ty=(Tensor[(2160), float32],) */;
  %695 = %694.0;
  %696 = cast(%var_5652, dtype="int16") /* ty=Tensor[(2160), int16] */;
  %697 = shape_of(%695, dtype="int32") /* ty=Tensor[(1), int32] */;
  %698 = cast(%695, dtype="int16") /* ty=Tensor[(2160), int16] */;
  %699 = dyn.reshape(%696, %697, newshape=[]) /* ty=Tensor[(?), int16] */;
  %700 = cast(%var_5657, dtype="bool") /* ty=Tensor[(2160), bool] */;
  %701 = shape_of(%var_5652, dtype="int32") /* ty=Tensor[(1), int32] */;
  %702 = cast(%var_5652, dtype="bool") /* ty=Tensor[(2160), bool] */;
  %703 = dyn.reshape(%700, %701, newshape=[]) /* ty=Tensor[(?), bool] */;
  %704 = @func_2557() /* ty=Tensor[(7, 5, 3), float32] */;
  %705 = maximum(%698, %699) /* ty=Tensor[(2160), int16] */;
  %706 = less(%702, %703) /* ty=Tensor[(2160), bool] */;
  (%704, %705, %706)
}

def @func_3401(%var_3388: Tensor[(375), uint16], %var_3389: Tensor[(2160), float32]) -> (Tensor[(105), uint8], Tensor[(5, 15, 5), bool], Tensor[(375), uint16], Tensor[(2160), float32]) {
  %707 = @func_2614() /* ty=(Tensor[(105), uint8],) */;
  %708 = cast(%var_3388, dtype="uint16") /* ty=Tensor[(375), uint16] */;
  %709 = cast(%var_3388, dtype="uint16") /* ty=Tensor[(375), uint16] */;
  %710 = %707.0;
  %711 = cast(%710, dtype="uint8") /* ty=Tensor[(105), uint8] */;
  %712 = cast(%var_3389, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %713 = reshape(%708, newshape=[5, 15, 5]) /* ty=Tensor[(5, 15, 5), uint16] */;
  %714 = reshape(%709, newshape=[5, 15, 5]) /* ty=Tensor[(5, 15, 5), uint16] */;
  %715 = reshape(%711, newshape=[105]) /* ty=Tensor[(105), uint8] */;
  %716 = reshape(%712, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
  %717 = @func_2743(%713, %714, %715, %716) /* ty=(Tensor[(5, 15, 5), bool], Tensor[(105), uint8], Tensor[(105), uint8], Tensor[(2160), float32]) */;
  %718 = cast(%var_3389, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %719 = %717.0;
  %720 = erf(%718) /* ty=Tensor[(2160), float32] */;
  (%710, %719, %var_3388, %720)
}

def @func_4400() -> (Tensor[(7, 5, 3), float32],) {
  %721 = @func_2557() /* ty=Tensor[(7, 5, 3), float32] */;
  (%721,)
}

def @func_2557() -> Tensor[(7, 5, 3), float32] {
  %722 = @func_1824() /* ty=(Tensor[(7, 5, 3), float64], Tensor[(7, 5, 3), float32]) */;
  %722.1
}

def @func_6249() -> (Tensor[(15, 9, 16), float64], Tensor[(105), uint8]) {
  %723 = @func_2937() /* ty=(Tensor[(15, 9, 16), float64],) */;
  %724 = %723.0;
  %725 = cast(%724, dtype="float64") /* ty=Tensor[(15, 9, 16), float64] */;
  %726 = cast(%724, dtype="float32") /* ty=Tensor[(15, 9, 16), float32] */;
  %727 = reshape(%726, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
  %728 = @func_4954(%727) /* ty=(Tensor[(105), uint8], Tensor[(480), float32], Tensor[(2160), float32]) */;
  %729 = log2(%725) /* ty=Tensor[(15, 9, 16), float64] */;
  %730 = %728.0;
  (%729, %730)
}

def @func_6387() -> (Tensor[(105), uint8],) {
  %731 = @func_2928() /* ty=Tensor[(105), uint8] */;
  (%731,)
}

def @func_3112(%var_3091: float32) -> (Tensor[(7, 5, 3), float32], Tensor[(4, 15, 8), float32], Tensor[(480), float32], Tensor[(2160), float32], Tensor[(15, 9, 16), float32], Tensor[(7, 5, 3), float64], Tensor[(7, 5, 3), float64]) {
  %732 = @func_2682() /* ty=(Tensor[(7, 5, 3), float32], Tensor[(105), uint8], Tensor[(84), uint32]) */;
  %733 = cast(%var_3091, dtype="float32") /* ty=float32 */;
  %734 = cast(meta[relay.Constant][35] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %735 = @func_2557() /* ty=Tensor[(7, 5, 3), float32] */;
  %736 = cast(%735, dtype="float32") /* ty=Tensor[(7, 5, 3), float32] */;
  %737 = log2(%736) /* ty=Tensor[(7, 5, 3), float32] */;
  %738 = cast(%737, dtype="uint8") /* ty=Tensor[(7, 5, 3), uint8] */;
  %739 = cast(meta[relay.Constant][36] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %740 = reshape(%733, newshape=[]) /* ty=float32 */;
  %741 = reshape(%734, newshape=[480]) /* ty=Tensor[(480), float32] */;
  %742 = reshape(%738, newshape=[105]) /* ty=Tensor[(105), uint8] */;
  %743 = reshape(%739, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
  %744 = @func_1053(%740, %741, %742, %743) /* ty=(Tensor[(4, 15, 8), float32], Tensor[(480), float32], Tensor[(15, 9, 16), float32], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(13, 1, 14), float32], Tensor[(15, 9, 16), float32]) */;
  %745 = cast(meta[relay.Constant][36] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %746 = cast(meta[relay.Constant][36] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %747 = reshape(%745, newshape=[15, 9, 16]) /* ty=Tensor[(15, 9, 16), float32] */;
  %748 = reshape(%746, newshape=[15, 9, 16]) /* ty=Tensor[(15, 9, 16), float32] */;
  %749 = @func_622(%747, %748) /* ty=(Tensor[(15, 9, 16), float32],) */;
  %750 = cast(%735, dtype="uint64") /* ty=Tensor[(7, 5, 3), uint64] */;
  %751 = shape_of(%737, dtype="int32") /* ty=Tensor[(3), int32] */;
  %752 = cast(%737, dtype="uint64") /* ty=Tensor[(7, 5, 3), uint64] */;
  %753 = dyn.reshape(%750, %751, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %754 = left_shift(%752, %753) /* ty=Tensor[(7, 5, 3), uint64] */;
  %755 = cast(%754, dtype="float64") /* ty=Tensor[(7, 5, 3), float64] */;
  %756 = cast(%var_3091, dtype="float64") /* ty=float64 */;
  %757 = %732.0;
  %758 = %744.0;
  %759 = %749.0;
  %760 = @func_2065() /* ty=Tensor[(7, 5, 3), float64] */;
  %761 = minimum(%755, %756) /* ty=Tensor[(7, 5, 3), float64] */;
  (%757, %758, meta[relay.Constant][35] /* ty=Tensor[(480), float32] */, meta[relay.Constant][36] /* ty=Tensor[(2160), float32] */, %759, %760, %761)
}

def @func_2819() -> (Tensor[(15, 9, 16), float64], Tensor[(2160), float32]) {
  %762 = @func_1789() /* ty=(Tensor[(15, 9, 16), float64], Tensor[(7, 5, 3), bool], Tensor[(105), uint8]) */;
  %763 = @func_1739() /* ty=(Tensor[(14, 7, 7), float32], Tensor[(15, 9, 16), float64], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(15, 9, 16), float32]) */;
  %764 = %763.3;
  %765 = cast(%764, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %766 = %762.0;
  %767 = log2(%765) /* ty=Tensor[(2160), float32] */;
  (%766, %767)
}

def @func_5624() -> (Tensor[(105), uint8], Tensor[(14, 2, 3), float32], Tensor[(7, 5, 3), float64]) {
  %768 = @func_5015() /* ty=(Tensor[(14, 2, 3), float32],) */;
  %769 = @func_3800() /* ty=Tensor[(105), uint8] */;
  %770 = %768.0;
  %771 = @func_2065() /* ty=Tensor[(7, 5, 3), float64] */;
  (%769, %770, %771)
}

def @func_2937() -> (Tensor[(15, 9, 16), float64],) {
  %772 = @func_1789() /* ty=(Tensor[(15, 9, 16), float64], Tensor[(7, 5, 3), bool], Tensor[(105), uint8]) */;
  %773 = %772.0;
  (%773,)
}

def @func_2914(%var_2860: Tensor[(480), float32]) -> (Tensor[(7, 5, 3), float64], Tensor[(1, 135), bool], Tensor[(480), float32], Tensor[(105), uint8], Tensor[(105), uint8], Tensor[(15, 9, 16), float32]) {
  %774 = cast(%var_2860, dtype="float32") /* ty=Tensor[(480), float32] */;
  %775 = reshape(%774, newshape=[4, 15, 8]) /* ty=Tensor[(4, 15, 8), float32] */;
  %776 = @func_993(%775) /* ty=(Tensor[(3, 9, 5), uint64], Tensor[(1, 135), bool], Tensor[(4, 15, 8), bool], Tensor[(4, 15, 8), float32]) */;
  %777 = @func_2614() /* ty=(Tensor[(105), uint8],) */;
  %778 = @func_1739() /* ty=(Tensor[(14, 7, 7), float32], Tensor[(15, 9, 16), float64], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(15, 9, 16), float32]) */;
  %779 = @func_2819() /* ty=(Tensor[(15, 9, 16), float64], Tensor[(2160), float32]) */;
  %780 = %779.0;
  %781 = cast(%780, dtype="float64") /* ty=Tensor[(15, 9, 16), float64] */;
  %782 = atanh(%781) /* ty=Tensor[(15, 9, 16), float64] */;
  %783 = cast(%782, dtype="float32") /* ty=Tensor[(15, 9, 16), float32] */;
  %784 = sin(%783) /* ty=Tensor[(15, 9, 16), float32] */;
  %785 = cast(%782, dtype="int32") /* ty=Tensor[(15, 9, 16), int32] */;
  %786 = shape_of(%784, dtype="int32") /* ty=Tensor[(3), int32] */;
  %787 = cast(%784, dtype="int32") /* ty=Tensor[(15, 9, 16), int32] */;
  %788 = dyn.reshape(%785, %786, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %789 = bitwise_and(%787, %788) /* ty=Tensor[(15, 9, 16), int32] */;
  %790 = cast(%782, dtype="float32") /* ty=Tensor[(15, 9, 16), float32] */;
  %791 = shape_of(%789, dtype="int32") /* ty=Tensor[(3), int32] */;
  %792 = cast(%789, dtype="float32") /* ty=Tensor[(15, 9, 16), float32] */;
  %793 = dyn.reshape(%790, %791, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %794 = @func_2065() /* ty=Tensor[(7, 5, 3), float64] */;
  %795 = %776.1;
  %796 = %777.0;
  %797 = %778.2;
  %798 = add(%792, %793) /* ty=Tensor[(15, 9, 16), float32] */;
  (%794, %795, %var_2860, %796, %797, %798)
}

def @func_4038(%var_3965: Tensor[(6, 2, 8), uint8], %var_3966: Tensor[(6, 2, 8), uint8], %var_4008: float32) -> (Tensor[(6, 2, 8), uint8], Tensor[(15, 9, 16), float64], Tensor[(105), uint8], float32, Tensor[(650), float32], Tensor[(480), float32], Tensor[(7, 5, 3), float32], Tensor[(14, 2, 3), float32], Tensor[(84), uint32]) {
  %799 = cast(%var_3966, dtype="uint8") /* ty=Tensor[(6, 2, 8), uint8] */;
  %800 = shape_of(%var_3965, dtype="int32") /* ty=Tensor[(3), int32] */;
  %801 = cast(%var_3965, dtype="uint8") /* ty=Tensor[(6, 2, 8), uint8] */;
  %802 = dyn.reshape(%799, %800, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %803 = cast(%var_4008, dtype="float32") /* ty=float32 */;
  %804 = cast(meta[relay.Constant][37] /* ty=Tensor[(650), float32] */, dtype="float32") /* ty=Tensor[(650), float32] */;
  %805 = cast(meta[relay.Constant][38] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %806 = reshape(%803, newshape=[]) /* ty=float32 */;
  %807 = reshape(%804, newshape=[10, 5, 13]) /* ty=Tensor[(10, 5, 13), float32] */;
  %808 = reshape(%805, newshape=[480]) /* ty=Tensor[(480), float32] */;
  %809 = @func_3749(%806, %807, %808) /* ty=(Tensor[(15, 9, 16), float64], Tensor[(10, 5, 13), uint32], Tensor[(10, 5, 13), int32], Tensor[(15, 9, 16), float64], Tensor[(105), uint8], Tensor[(15, 9, 16), float32], Tensor[(480), float32]) */;
  %810 = @func_3595() /* ty=(Tensor[(14, 2, 3), float32],) */;
  %811 = @func_2682() /* ty=(Tensor[(7, 5, 3), float32], Tensor[(105), uint8], Tensor[(84), uint32]) */;
  %812 = logical_xor(%801, %802) /* ty=Tensor[(6, 2, 8), uint8] */;
  %813 = @func_3826() /* ty=Tensor[(15, 9, 16), float64] */;
  %814 = %809.4;
  %815 = @func_2557() /* ty=Tensor[(7, 5, 3), float32] */;
  %816 = %810.0;
  %817 = %811.2;
  (%812, %813, %814, %var_4008, meta[relay.Constant][37] /* ty=Tensor[(650), float32] */, meta[relay.Constant][38] /* ty=Tensor[(480), float32] */, %815, %816, %817)
}

def @func_6134() -> Tensor[(105), uint8] {
  @func_4349() /* ty=Tensor[(105), uint8] */
}

def @func_5596() -> Tensor[(105), uint8] {
  @func_3779() /* ty=Tensor[(105), uint8] */
}

def @func_2378(%var_2368: Tensor[(154), uint64]) -> (Tensor[(105), uint8], Tensor[(11, 2, 7), uint64], Tensor[(154), uint64], Tensor[(3, 9, 5), bool], Tensor[(135), bool]) {
  %818 = @func_1739() /* ty=(Tensor[(14, 7, 7), float32], Tensor[(15, 9, 16), float64], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(15, 9, 16), float32]) */;
  %819 = cast(%var_2368, dtype="uint64") /* ty=Tensor[(154), uint64] */;
  %820 = cast(%var_2368, dtype="uint64") /* ty=Tensor[(154), uint64] */;
  %821 = reshape(%819, newshape=[11, 2, 7]) /* ty=Tensor[(11, 2, 7), uint64] */;
  %822 = reshape(%820, newshape=[11, 2, 7]) /* ty=Tensor[(11, 2, 7), uint64] */;
  %823 = cast(meta[relay.Constant][39] /* ty=Tensor[(135), bool] */, dtype="bool") /* ty=Tensor[(135), bool] */;
  %824 = cast(meta[relay.Constant][39] /* ty=Tensor[(135), bool] */, dtype="bool") /* ty=Tensor[(135), bool] */;
  %825 = reshape(%823, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), bool] */;
  %826 = reshape(%824, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), bool] */;
  %827 = @func_76(%825, %826) /* ty=(Tensor[(3, 9, 5), uint64], Tensor[(3, 9, 5), bool], Tensor[(3, 9, 5), float64]) */;
  %828 = %818.2;
  %829 = @func_1602(%821, %822) /* ty=Tensor[(11, 2, 7), uint64] */;
  %830 = %827.1;
  (%828, %829, %var_2368, %830, meta[relay.Constant][39] /* ty=Tensor[(135), bool] */)
}

def @func_4490(%var_4485: Tensor[(8, 8, 6), float32]) -> (Tensor[(8, 1, 6), float32], Tensor[(8, 8, 6), bool]) {
  %831 = cast(meta[relay.Constant][40] /* ty=Tensor[(8, 1, 6), float32] */, dtype="float32") /* ty=Tensor[(8, 1, 6), float32] */;
  %832 = cast(meta[relay.Constant][40] /* ty=Tensor[(8, 1, 6), float32] */, dtype="bool") /* ty=Tensor[(8, 1, 6), bool] */;
  %833 = cast(%var_4485, dtype="bool") /* ty=Tensor[(8, 8, 6), bool] */;
  %834 = sqrt(%831) /* ty=Tensor[(8, 1, 6), float32] */;
  %835 = less_equal(%832, %833) /* ty=Tensor[(8, 8, 6), bool] */;
  (%834, %835)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4381() -> (Tensor[(105), uint8], Tensor[(105), uint8]) {
  @func_4379() /* ty=(Tensor[(105), uint8], Tensor[(105), uint8]) */
}

def @func_2917(%var_2915: Tensor[(480), float32]) -> (Tensor[(7, 5, 3), float64], Tensor[(1, 135), bool], Tensor[(480), float32], Tensor[(105), uint8], Tensor[(105), uint8], Tensor[(15, 9, 16), float32]) {
  @func_2914(%var_2915) /* ty=(Tensor[(7, 5, 3), float64], Tensor[(1, 135), bool], Tensor[(480), float32], Tensor[(105), uint8], Tensor[(105), uint8], Tensor[(15, 9, 16), float32]) */
}

def @func_2186(%var_2145: Tensor[(4, 7, 3), uint32], %var_2146: Tensor[(4, 7, 3), uint32]) -> (Tensor[(4, 7, 3), float64], Tensor[(7, 5, 3), float64]) {
  %0 = cast(%var_2146, dtype="uint32") /* ty=Tensor[(4, 7, 3), uint32] */;
  %1 = shape_of(%var_2145, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(%var_2145, dtype="uint32") /* ty=Tensor[(4, 7, 3), uint32] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %4 = right_shift(%2, %3) /* ty=Tensor[(4, 7, 3), uint32] */;
  %5 = cast(%4, dtype="float32") /* ty=Tensor[(4, 7, 3), float32] */;
  %6 = log2(%5) /* ty=Tensor[(4, 7, 3), float32] */;
  %7 = cast(%6, dtype="float64") /* ty=Tensor[(4, 7, 3), float64] */;
  %8 = sigmoid(%7) /* ty=Tensor[(4, 7, 3), float64] */;
  %9 = @func_2065() /* ty=Tensor[(7, 5, 3), float64] */;
  (%8, %9)
}

def @func_2378(%var_2368: Tensor[(154), uint64]) -> (Tensor[(105), uint8], Tensor[(11, 2, 7), uint64], Tensor[(154), uint64], Tensor[(3, 9, 5), bool], Tensor[(135), bool]) {
  %10 = @func_1739() /* ty=(Tensor[(14, 7, 7), float32], Tensor[(15, 9, 16), float64], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(15, 9, 16), float32]) */;
  %11 = cast(%var_2368, dtype="uint64") /* ty=Tensor[(154), uint64] */;
  %12 = cast(%var_2368, dtype="uint64") /* ty=Tensor[(154), uint64] */;
  %13 = reshape(%11, newshape=[11, 2, 7]) /* ty=Tensor[(11, 2, 7), uint64] */;
  %14 = reshape(%12, newshape=[11, 2, 7]) /* ty=Tensor[(11, 2, 7), uint64] */;
  %15 = cast(meta[relay.Constant][0] /* ty=Tensor[(135), bool] */, dtype="bool") /* ty=Tensor[(135), bool] */;
  %16 = cast(meta[relay.Constant][0] /* ty=Tensor[(135), bool] */, dtype="bool") /* ty=Tensor[(135), bool] */;
  %17 = reshape(%15, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), bool] */;
  %18 = reshape(%16, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), bool] */;
  %19 = @func_76(%17, %18) /* ty=(Tensor[(3, 9, 5), uint64], Tensor[(3, 9, 5), bool], Tensor[(3, 9, 5), float64]) */;
  %20 = %10.2;
  %21 = @func_1602(%13, %14) /* ty=Tensor[(11, 2, 7), uint64] */;
  %22 = %19.1;
  (%20, %21, %var_2368, %22, meta[relay.Constant][0] /* ty=Tensor[(135), bool] */)
}

def @func_4844(%var_4840: Tensor[(11, 14, 9), uint8], %var_4841: Tensor[(11, 14, 9), uint8], %var_4842: Tensor[(50), uint64], %var_4843: Tensor[(2160), float32]) -> (Tensor[(105), uint8], Tensor[(364), float64], Tensor[(120), bool], Tensor[(6, 2, 10), float64], Tensor[(10, 10, 5), uint32], Tensor[(50), uint64], Tensor[(50, 10), uint64], Tensor[(11, 14, 9), float64], Tensor[(7, 5, 3), bool], Tensor[(2160), float32], Tensor[(364, 3), bool], Tensor[(364, ?), float64]) {
  %74 = fn (%var_4755: Tensor[(11, 14, 9), uint8], %var_4756: Tensor[(11, 14, 9), uint8], %var_4799: Tensor[(50), uint64], %var_4809: Tensor[(2160), float32]) -> (Tensor[(105), uint8], Tensor[(364), float64], Tensor[(120), bool], Tensor[(6, 2, 10), float64], Tensor[(10, 10, 5), uint32], Tensor[(50), uint64], Tensor[(50, 10), uint64], Tensor[(11, 14, 9), float64], Tensor[(7, 5, 3), bool], Tensor[(2160), float32], Tensor[(364, 3), bool], Tensor[(364, ?), float64]) {
    %23 = cast(meta[relay.Constant][1] /* ty=Tensor[(364, 1), float64] */, dtype="float64") /* ty=Tensor[(364, 1), float64] */;
    %24 = reshape(%23, newshape=[364]) /* ty=Tensor[(364), float64] */;
    %25 = @func_4289(%24) /* ty=(Tensor[(105), uint8], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(364), float64]) */;
    %26 = cast(meta[relay.Constant][2] /* ty=Tensor[(120), bool] */, dtype="bool") /* ty=Tensor[(120), bool] */;
    %27 = cast(meta[relay.Constant][2] /* ty=Tensor[(120), bool] */, dtype="bool") /* ty=Tensor[(120), bool] */;
    %28 = cast(meta[relay.Constant][2] /* ty=Tensor[(120), bool] */, dtype="bool") /* ty=Tensor[(120), bool] */;
    %29 = reshape(%26, newshape=[6, 2, 10]) /* ty=Tensor[(6, 2, 10), bool] */;
    %30 = reshape(%27, newshape=[6, 2, 10]) /* ty=Tensor[(6, 2, 10), bool] */;
    %31 = reshape(%28, newshape=[6, 2, 10]) /* ty=Tensor[(6, 2, 10), bool] */;
    %32 = @func_3621(%29, %30, %31) /* ty=(Tensor[(6, 2, 10), bool], Tensor[(6, 2, 10), bool]) */;
    %33 = %32.0;
    %34 = cast(%33, dtype="float64") /* ty=Tensor[(6, 2, 10), float64] */;
    %35 = cast(%var_4799, dtype="uint64") /* ty=Tensor[(50), uint64] */;
    %36 = cast(meta[relay.Constant][3] /* ty=Tensor[(50, 10), uint64] */, dtype="uint64") /* ty=Tensor[(50, 10), uint64] */;
    %37 = reshape(%35, newshape=[1, 10, 5]) /* ty=Tensor[(1, 10, 5), uint64] */;
    %38 = reshape(%36, newshape=[10, 10, 5]) /* ty=Tensor[(10, 10, 5), uint64] */;
    %39 = @func_2980(%37, %38) /* ty=(Tensor[(10, 10, 5), uint32],) */;
    %40 = cast(%var_4756, dtype="bool") /* ty=Tensor[(11, 14, 9), bool] */;
    %41 = shape_of(%var_4755, dtype="int32") /* ty=Tensor[(3), int32] */;
    %42 = cast(%var_4755, dtype="bool") /* ty=Tensor[(11, 14, 9), bool] */;
    %43 = dyn.reshape(%40, %41, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %44 = greater(%42, %43) /* ty=Tensor[(11, 14, 9), bool] */;
    %45 = cast(%44, dtype="float64") /* ty=Tensor[(11, 14, 9), float64] */;
    %46 = @func_3779() /* ty=Tensor[(105), uint8] */;
    %47 = cast(%46, dtype="uint8") /* ty=Tensor[(105), uint8] */;
    %48 = cast(%46, dtype="uint8") /* ty=Tensor[(105), uint8] */;
    %49 = cast(%var_4809, dtype="float32") /* ty=Tensor[(2160), float32] */;
    %50 = reshape(%47, newshape=[7, 5, 3]) /* ty=Tensor[(7, 5, 3), uint8] */;
    %51 = reshape(%48, newshape=[7, 5, 3]) /* ty=Tensor[(7, 5, 3), uint8] */;
    %52 = reshape(%49, newshape=[15, 9, 16]) /* ty=Tensor[(15, 9, 16), float32] */;
    %53 = @func_880(%50, %51, %52) /* ty=(Tensor[(7, 5, 3), bool], Tensor[(2160), float32], Tensor[(7, 5, 3), float32], Tensor[(15, 9, 16), float32], Tensor[(15, 9, 16), float64], Tensor[(15, 9, 16), float32]) */;
    %54 = cast(meta[relay.Constant][1] /* ty=Tensor[(364, 1), float64] */, dtype="bool") /* ty=Tensor[(364, 1), bool] */;
    %55 = cast(meta[relay.Constant][4] /* ty=Tensor[(364, 3), float64] */, dtype="bool") /* ty=Tensor[(364, 3), bool] */;
    %56 = cast(meta[relay.Constant][1] /* ty=Tensor[(364, 1), float64] */, dtype="float64") /* ty=Tensor[(364, 1), float64] */;
    %57 = sin(%56) /* ty=Tensor[(364, 1), float64] */;
    %58 = cast(%57, dtype="uint16") /* ty=Tensor[(364, 1), uint16] */;
    %59 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(364, 1), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %60 = cast(meta[relay.Constant][1] /* ty=Tensor[(364, 1), float64] */, dtype="uint16") /* ty=Tensor[(364, 1), uint16] */;
    %61 = dyn.reshape(%58, %59, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    %62 = maximum(%60, %61) /* ty=Tensor[(364, ?), uint16] */;
    %63 = cast(%62, dtype="float64") /* ty=Tensor[(364, ?), float64] */;
    %64 = shape_of(%57, dtype="int32") /* ty=Tensor[(2), int32] */;
    %65 = cast(%57, dtype="float64") /* ty=Tensor[(364, 1), float64] */;
    %66 = dyn.reshape(%63, %64, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %67 = %25.3;
    %68 = atanh(%34) /* ty=Tensor[(6, 2, 10), float64] */;
    %69 = %39.0;
    %70 = tan(%45) /* ty=Tensor[(11, 14, 9), float64] */;
    %71 = %53.0;
    %72 = greater_equal(%54, %55) /* ty=Tensor[(364, 3), bool] */;
    %73 = mod(%65, %66) /* ty=Tensor[(364, ?), float64] */;
    (%46, %67, meta[relay.Constant][2] /* ty=Tensor[(120), bool] */, %68, %69, %var_4799, meta[relay.Constant][3] /* ty=Tensor[(50, 10), uint64] */, %70, %71, %var_4809, %72, %73)
  };
  %74(%var_4840, %var_4841, %var_4842, %var_4843) /* ty=(Tensor[(105), uint8], Tensor[(364), float64], Tensor[(120), bool], Tensor[(6, 2, 10), float64], Tensor[(10, 10, 5), uint32], Tensor[(50), uint64], Tensor[(50, 10), uint64], Tensor[(11, 14, 9), float64], Tensor[(7, 5, 3), bool], Tensor[(2160), float32], Tensor[(364, 3), bool], Tensor[(364, ?), float64]) */
}

def @func_3780() -> Tensor[(105), uint8] {
  %76 = fn () -> Tensor[(105), uint8] {
    %75 = @func_2534() /* ty=(Tensor[(105), uint8],) */;
    %75.0
  };
  %76() /* ty=Tensor[(105), uint8] */
}

def @func_1162(%var_1160: Tensor[(105), uint8], %var_1161: Tensor[(2160), float32]) -> (Tensor[(11, 11, 15), float64], Tensor[(15, 9, 16), float32], float32, Tensor[(480), float32], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(15, 9, 16), float32]) {
  @func_1158(%var_1160, %var_1161) /* ty=(Tensor[(11, 11, 15), float64], Tensor[(15, 9, 16), float32], float32, Tensor[(480), float32], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(15, 9, 16), float32]) */
}

def @func_2616() -> (Tensor[(105), uint8],) {
  @func_2614() /* ty=(Tensor[(105), uint8],) */
}

def @func_2939() -> (Tensor[(15, 9, 16), float64],) {
  @func_2937() /* ty=(Tensor[(15, 9, 16), float64],) */
}

def @func_4607(%var_4605: Tensor[(1, 6, 15), float64]) -> Tensor[(1, 6, 15), float64] {
  @func_4604(%var_4605) /* ty=Tensor[(1, 6, 15), float64] */
}

def @func_880(%var_810: Tensor[(7, 5, 3), uint8], %var_827: Tensor[(7, 5, 3), uint8], %var_838: Tensor[(15, 9, 16), float32]) -> (Tensor[(7, 5, 3), bool], Tensor[(2160), float32], Tensor[(7, 5, 3), float32], Tensor[(15, 9, 16), float32], Tensor[(15, 9, 16), float64], Tensor[(15, 9, 16), float32]) {
  %77 = cast(meta[relay.Constant][5] /* ty=uint8 */, dtype="bool") /* ty=bool */;
  %78 = cast(%var_810, dtype="bool") /* ty=Tensor[(7, 5, 3), bool] */;
  %79 = cast(meta[relay.Constant][5] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %80 = cast(%var_810, dtype="uint8") /* ty=Tensor[(7, 5, 3), uint8] */;
  %81 = logical_xor(%79, %80) /* ty=Tensor[(7, 5, 3), uint8] */;
  %82 = cast(%var_827, dtype="float32") /* ty=Tensor[(7, 5, 3), float32] */;
  %83 = shape_of(%81, dtype="int32") /* ty=Tensor[(3), int32] */;
  %84 = cast(%81, dtype="float32") /* ty=Tensor[(7, 5, 3), float32] */;
  %85 = dyn.reshape(%82, %83, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %86 = cast(meta[relay.Constant][6] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %87 = cast(meta[relay.Constant][6] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %88 = reshape(%86, newshape=[15, 9, 16]) /* ty=Tensor[(15, 9, 16), float32] */;
  %89 = reshape(%87, newshape=[15, 9, 16]) /* ty=Tensor[(15, 9, 16), float32] */;
  %90 = @func_622(%88, %89) /* ty=(Tensor[(15, 9, 16), float32],) */;
  %91 = %90.0;
  %92 = cast(%var_838, dtype="float32") /* ty=Tensor[(15, 9, 16), float32] */;
  %93 = shape_of(%91, dtype="int32") /* ty=Tensor[(3), int32] */;
  %94 = cast(%91, dtype="float32") /* ty=Tensor[(15, 9, 16), float32] */;
  %95 = dyn.reshape(%92, %93, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %96 = cast(%var_838, dtype="float64") /* ty=Tensor[(15, 9, 16), float64] */;
  %97 = shape_of(%91, dtype="int32") /* ty=Tensor[(3), int32] */;
  %98 = cast(%91, dtype="float64") /* ty=Tensor[(15, 9, 16), float64] */;
  %99 = dyn.reshape(%96, %97, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %100 = cast(meta[relay.Constant][6] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %101 = divide(%94, %95) /* ty=Tensor[(15, 9, 16), float32] */;
  %102 = cast(%101, dtype="float32") /* ty=Tensor[(15, 9, 16), float32] */;
  %103 = reshape(%100, newshape=[15, 9, 16]) /* ty=Tensor[(15, 9, 16), float32] */;
  %104 = reshape(%102, newshape=[15, 9, 16]) /* ty=Tensor[(15, 9, 16), float32] */;
  %105 = @func_622(%103, %104) /* ty=(Tensor[(15, 9, 16), float32],) */;
  %106 = greater_equal(%77, %78) /* ty=Tensor[(7, 5, 3), bool] */;
  %107 = divide(%84, %85) /* ty=Tensor[(7, 5, 3), float32] */;
  %108 = floor_divide(%98, %99) /* ty=Tensor[(15, 9, 16), float64] */;
  %109 = %105.0;
  (%106, meta[relay.Constant][6] /* ty=Tensor[(2160), float32] */, %107, %101, %108, %109)
}

def @func_2821() -> (Tensor[(15, 9, 16), float64], Tensor[(2160), float32]) {
  @func_2819() /* ty=(Tensor[(15, 9, 16), float64], Tensor[(2160), float32]) */
}

def @func_5163(%var_5161: float32) -> (Tensor[(7, 5, 3), float64], Tensor[(15, 9, 16), bool], Tensor[(105), uint8], Tensor[(96), uint8], float32, Tensor[(2160), float64]) {
  @func_5160(%var_5161) /* ty=(Tensor[(7, 5, 3), float64], Tensor[(15, 9, 16), bool], Tensor[(105), uint8], Tensor[(96), uint8], float32, Tensor[(2160), float64]) */
}

def @func_5160(%var_5140: float32) -> (Tensor[(7, 5, 3), float64], Tensor[(15, 9, 16), bool], Tensor[(105), uint8], Tensor[(96), uint8], float32, Tensor[(2160), float64]) {
  %110 = cast(meta[relay.Constant][7] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %111 = reshape(%110, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
  %112 = @func_4656(%111) /* ty=(Tensor[(7, 5, 3), float32], Tensor[(7, 5, 3), bool], Tensor[(2160), float32], Tensor[(15, 9, 16), bool]) */;
  %113 = cast(meta[relay.Constant][8] /* ty=Tensor[(96), uint8] */, dtype="uint8") /* ty=Tensor[(96), uint8] */;
  %114 = cast(meta[relay.Constant][8] /* ty=Tensor[(96), uint8] */, dtype="uint8") /* ty=Tensor[(96), uint8] */;
  %115 = cast(%var_5140, dtype="float32") /* ty=float32 */;
  %116 = reshape(%113, newshape=[6, 2, 8]) /* ty=Tensor[(6, 2, 8), uint8] */;
  %117 = reshape(%114, newshape=[6, 2, 8]) /* ty=Tensor[(6, 2, 8), uint8] */;
  %118 = reshape(%115, newshape=[]) /* ty=float32 */;
  %119 = @func_4038(%116, %117, %118) /* ty=(Tensor[(6, 2, 8), uint8], Tensor[(15, 9, 16), float64], Tensor[(105), uint8], float32, Tensor[(650), float32], Tensor[(480), float32], Tensor[(7, 5, 3), float32], Tensor[(14, 2, 3), float32], Tensor[(84), uint32]) */;
  %120 = cast(meta[relay.Constant][7] /* ty=Tensor[(2160), float32] */, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %121 = @func_2065() /* ty=Tensor[(7, 5, 3), float64] */;
  %122 = %112.3;
  %123 = %119.2;
  %124 = sin(%120) /* ty=Tensor[(2160), float64] */;
  (%121, %122, %123, meta[relay.Constant][8] /* ty=Tensor[(96), uint8] */, %var_5140, %124)
}

def @func_5015() -> (Tensor[(14, 2, 3), float32],) {
  %125 = @func_3595() /* ty=(Tensor[(14, 2, 3), float32],) */;
  %126 = %125.0;
  (%126,)
}

def @func_5378() -> (Tensor[(2160), bool],) {
  %134 = fn () -> (Tensor[(2160), bool],) {
    %127 = @func_2819() /* ty=(Tensor[(15, 9, 16), float64], Tensor[(2160), float32]) */;
    %128 = %127.1;
    %129 = cast(meta[relay.Constant][9] /* ty=Tensor[(2160), float32] */, dtype="bool") /* ty=Tensor[(2160), bool] */;
    %130 = shape_of(%128, dtype="int32") /* ty=Tensor[(1), int32] */;
    %131 = cast(%128, dtype="bool") /* ty=Tensor[(2160), bool] */;
    %132 = dyn.reshape(%129, %130, newshape=[]) /* ty=Tensor[(?), bool] */;
    %133 = equal(%131, %132) /* ty=Tensor[(2160), bool] */;
    (%133,)
  };
  %134() /* ty=(Tensor[(2160), bool],) */
}

def @func_2748(%var_2744: Tensor[(5, 15, 5), uint16], %var_2745: Tensor[(5, 15, 5), uint16], %var_2746: Tensor[(105), uint8], %var_2747: Tensor[(2160), float32]) -> (Tensor[(5, 15, 5), bool], Tensor[(105), uint8], Tensor[(105), uint8], Tensor[(2160), float32]) {
  %146 = fn (%var_2716: Tensor[(5, 15, 5), uint16], %var_2717: Tensor[(5, 15, 5), uint16], %var_2737: Tensor[(105), uint8], %var_2738: Tensor[(2160), float32]) -> (Tensor[(5, 15, 5), bool], Tensor[(105), uint8], Tensor[(105), uint8], Tensor[(2160), float32]) {
    %135 = cast(%var_2717, dtype="bool") /* ty=Tensor[(5, 15, 5), bool] */;
    %136 = shape_of(%var_2716, dtype="int32") /* ty=Tensor[(3), int32] */;
    %137 = cast(%var_2716, dtype="bool") /* ty=Tensor[(5, 15, 5), bool] */;
    %138 = dyn.reshape(%135, %136, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %139 = cast(%var_2737, dtype="uint8") /* ty=Tensor[(105), uint8] */;
    %140 = cast(%var_2738, dtype="float32") /* ty=Tensor[(2160), float32] */;
    %141 = reshape(%139, newshape=[105]) /* ty=Tensor[(105), uint8] */;
    %142 = reshape(%140, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
    %143 = @func_1158(%141, %142) /* ty=(Tensor[(11, 11, 15), float64], Tensor[(15, 9, 16), float32], float32, Tensor[(480), float32], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(15, 9, 16), float32]) */;
    %144 = greater(%137, %138) /* ty=Tensor[(5, 15, 5), bool] */;
    %145 = %143.4;
    (%144, %145, %var_2737, %var_2738)
  };
  %146(%var_2744, %var_2745, %var_2746, %var_2747) /* ty=(Tensor[(5, 15, 5), bool], Tensor[(105), uint8], Tensor[(105), uint8], Tensor[(2160), float32]) */
}

def @func_1158(%var_1142: Tensor[(105), uint8], %var_1143: Tensor[(2160), float32]) -> (Tensor[(11, 11, 15), float64], Tensor[(15, 9, 16), float32], float32, Tensor[(480), float32], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(15, 9, 16), float32]) {
  %147 = cast(meta[relay.Constant][10] /* ty=Tensor[(11, 11, 15), float64] */, dtype="float64") /* ty=Tensor[(11, 11, 15), float64] */;
  %148 = erf(%147) /* ty=Tensor[(11, 11, 15), float64] */;
  %149 = cast(meta[relay.Constant][10] /* ty=Tensor[(11, 11, 15), float64] */, dtype="bool") /* ty=Tensor[(11, 11, 15), bool] */;
  %150 = shape_of(%148, dtype="int32") /* ty=Tensor[(3), int32] */;
  %151 = cast(%148, dtype="bool") /* ty=Tensor[(11, 11, 15), bool] */;
  %152 = dyn.reshape(%149, %150, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %153 = less(%151, %152) /* ty=Tensor[(11, 11, 15), bool] */;
  %154 = cast(%148, dtype="float64") /* ty=Tensor[(11, 11, 15), float64] */;
  %155 = shape_of(%153, dtype="int32") /* ty=Tensor[(3), int32] */;
  %156 = cast(%153, dtype="float64") /* ty=Tensor[(11, 11, 15), float64] */;
  %157 = dyn.reshape(%154, %155, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %158 = cast(1.25336f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %159 = cast(meta[relay.Constant][11] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %160 = cast(%var_1142, dtype="uint8") /* ty=Tensor[(105), uint8] */;
  %161 = cast(%var_1143, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %162 = reshape(%158, newshape=[]) /* ty=float32 */;
  %163 = reshape(%159, newshape=[480]) /* ty=Tensor[(480), float32] */;
  %164 = reshape(%160, newshape=[105]) /* ty=Tensor[(105), uint8] */;
  %165 = reshape(%161, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
  %166 = @func_1053(%162, %163, %164, %165) /* ty=(Tensor[(4, 15, 8), float32], Tensor[(480), float32], Tensor[(15, 9, 16), float32], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(13, 1, 14), float32], Tensor[(15, 9, 16), float32]) */;
  %167 = cast(1.25336f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %168 = cast(meta[relay.Constant][11] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %169 = cast(%var_1142, dtype="uint8") /* ty=Tensor[(105), uint8] */;
  %170 = %166.6;
  %171 = cast(%170, dtype="float32") /* ty=Tensor[(15, 9, 16), float32] */;
  %172 = reshape(%167, newshape=[]) /* ty=float32 */;
  %173 = reshape(%168, newshape=[480]) /* ty=Tensor[(480), float32] */;
  %174 = reshape(%169, newshape=[105]) /* ty=Tensor[(105), uint8] */;
  %175 = reshape(%171, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
  %176 = @func_1053(%172, %173, %174, %175) /* ty=(Tensor[(4, 15, 8), float32], Tensor[(480), float32], Tensor[(15, 9, 16), float32], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(13, 1, 14), float32], Tensor[(15, 9, 16), float32]) */;
  %177 = power(%156, %157) /* ty=Tensor[(11, 11, 15), float64] */;
  %178 = %176.6;
  (%177, %170, 1.25336f /* ty=float32 */, meta[relay.Constant][11] /* ty=Tensor[(480), float32] */, %var_1142, %var_1143, %178)
}

def @func_3802() -> Tensor[(105), uint8] {
  @func_3800() /* ty=Tensor[(105), uint8] */
}

def @func_2065() -> Tensor[(7, 5, 3), float64] {
  %179 = @func_1824() /* ty=(Tensor[(7, 5, 3), float64], Tensor[(7, 5, 3), float32]) */;
  %179.0
}

def @func_1053(%var_1014: float32, %var_1029: Tensor[(480), float32], %var_1032: Tensor[(105), uint8], %var_1033: Tensor[(2160), float32]) -> (Tensor[(4, 15, 8), float32], Tensor[(480), float32], Tensor[(15, 9, 16), float32], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(13, 1, 14), float32], Tensor[(15, 9, 16), float32]) {
  %180 = cast(%var_1029, dtype="float32") /* ty=Tensor[(480), float32] */;
  %181 = reshape(%180, newshape=[4, 15, 8]) /* ty=Tensor[(4, 15, 8), float32] */;
  %182 = @func_993(%181) /* ty=(Tensor[(3, 9, 5), uint64], Tensor[(1, 135), bool], Tensor[(4, 15, 8), bool], Tensor[(4, 15, 8), float32]) */;
  %183 = cast(%var_1032, dtype="uint8") /* ty=Tensor[(105), uint8] */;
  %184 = cast(%var_1032, dtype="uint8") /* ty=Tensor[(105), uint8] */;
  %185 = cast(%var_1033, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %186 = reshape(%183, newshape=[7, 5, 3]) /* ty=Tensor[(7, 5, 3), uint8] */;
  %187 = reshape(%184, newshape=[7, 5, 3]) /* ty=Tensor[(7, 5, 3), uint8] */;
  %188 = reshape(%185, newshape=[15, 9, 16]) /* ty=Tensor[(15, 9, 16), float32] */;
  %189 = @func_880(%186, %187, %188) /* ty=(Tensor[(7, 5, 3), bool], Tensor[(2160), float32], Tensor[(7, 5, 3), float32], Tensor[(15, 9, 16), float32], Tensor[(15, 9, 16), float64], Tensor[(15, 9, 16), float32]) */;
  %190 = cast(%var_1014, dtype="float32") /* ty=float32 */;
  %191 = cast(meta[relay.Constant][12] /* ty=Tensor[(13, 1, 14), float32] */, dtype="float32") /* ty=Tensor[(13, 1, 14), float32] */;
  %192 = divide(%190, %191) /* ty=Tensor[(13, 1, 14), float32] */;
  %193 = cast(%192, dtype="float64") /* ty=Tensor[(13, 1, 14), float64] */;
  %194 = sin(%193) /* ty=Tensor[(13, 1, 14), float64] */;
  %195 = cast(%194, dtype="float32") /* ty=Tensor[(13, 1, 14), float32] */;
  %196 = cast(%var_1032, dtype="uint8") /* ty=Tensor[(105), uint8] */;
  %197 = cast(%var_1032, dtype="uint8") /* ty=Tensor[(105), uint8] */;
  %198 = %189.3;
  %199 = cast(%198, dtype="float32") /* ty=Tensor[(15, 9, 16), float32] */;
  %200 = reshape(%196, newshape=[7, 5, 3]) /* ty=Tensor[(7, 5, 3), uint8] */;
  %201 = reshape(%197, newshape=[7, 5, 3]) /* ty=Tensor[(7, 5, 3), uint8] */;
  %202 = reshape(%199, newshape=[15, 9, 16]) /* ty=Tensor[(15, 9, 16), float32] */;
  %203 = @func_880(%200, %201, %202) /* ty=(Tensor[(7, 5, 3), bool], Tensor[(2160), float32], Tensor[(7, 5, 3), float32], Tensor[(15, 9, 16), float32], Tensor[(15, 9, 16), float64], Tensor[(15, 9, 16), float32]) */;
  %204 = %182.3;
  %205 = acos(%195) /* ty=Tensor[(13, 1, 14), float32] */;
  %206 = %203.5;
  (%204, %var_1029, %198, %var_1032, %var_1033, %205, %206)
}

def @func_5491() -> (Tensor[(7, 5, 3), float64], Tensor[(15, 9, 16), float64], Tensor[(7, 5, 3), float64]) {
  %213 = fn () -> (Tensor[(7, 5, 3), float64], Tensor[(15, 9, 16), float64], Tensor[(7, 5, 3), float64]) {
    %207 = @func_2138() /* ty=Tensor[(7, 5, 3), float64] */;
    %208 = cast(%207, dtype="float64") /* ty=Tensor[(7, 5, 3), float64] */;
    %209 = cast(%207, dtype="float64") /* ty=Tensor[(7, 5, 3), float64] */;
    %210 = sin(%208) /* ty=Tensor[(7, 5, 3), float64] */;
    %211 = @func_3643() /* ty=Tensor[(15, 9, 16), float64] */;
    %212 = acos(%209) /* ty=Tensor[(7, 5, 3), float64] */;
    (%210, %211, %212)
  };
  %213() /* ty=(Tensor[(7, 5, 3), float64], Tensor[(15, 9, 16), float64], Tensor[(7, 5, 3), float64]) */
}

def @func_3204() -> (Tensor[(105), uint8],) {
  @func_3202() /* ty=(Tensor[(105), uint8],) */
}

def @func_5624() -> (Tensor[(105), uint8], Tensor[(14, 2, 3), float32], Tensor[(7, 5, 3), float64]) {
  %214 = @func_5015() /* ty=(Tensor[(14, 2, 3), float32],) */;
  %215 = @func_3800() /* ty=Tensor[(105), uint8] */;
  %216 = %214.0;
  %217 = @func_2065() /* ty=Tensor[(7, 5, 3), float64] */;
  (%215, %216, %217)
}

def @func_2984(%var_2982: Tensor[(1, 10, 5), uint64], %var_2983: Tensor[(10, 10, 5), uint64]) -> (Tensor[(10, 10, 5), uint32],) {
  @func_2980(%var_2982, %var_2983) /* ty=(Tensor[(10, 10, 5), uint32],) */
}

def @func_6388() -> (Tensor[(105), uint8],) {
  %219 = fn () -> (Tensor[(105), uint8],) {
    %218 = @func_2928() /* ty=Tensor[(105), uint8] */;
    (%218,)
  };
  %219() /* ty=(Tensor[(105), uint8],) */
}

def @func_5881(%var_5842: Tensor[(7, 5, 3), float32]) -> (Tensor[(16, 1, 2), float32], Tensor[(32), float32], Tensor[(7, 5, 3), float32]) {
  %220 = cast(meta[relay.Constant][13] /* ty=Tensor[(32), float32] */, dtype="float32") /* ty=Tensor[(32), float32] */;
  %221 = reshape(%220, newshape=[16, 1, 2]) /* ty=Tensor[(16, 1, 2), float32] */;
  %222 = @func_3367(%221) /* ty=(Tensor[(16, 1, 2), float32], Tensor[(105), uint8], Tensor[(7, 5, 3), float64]) */;
  %223 = @func_4400() /* ty=(Tensor[(7, 5, 3), float32],) */;
  %224 = %223.0;
  %225 = cast(%var_5842, dtype="float32") /* ty=Tensor[(7, 5, 3), float32] */;
  %226 = shape_of(%224, dtype="int32") /* ty=Tensor[(3), int32] */;
  %227 = cast(%224, dtype="float32") /* ty=Tensor[(7, 5, 3), float32] */;
  %228 = dyn.reshape(%225, %226, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %229 = %222.0;
  %230 = mod(%227, %228) /* ty=Tensor[(7, 5, 3), float32] */;
  (%229, meta[relay.Constant][13] /* ty=Tensor[(32), float32] */, %230)
}

def @func_1998(%var_1996: Tensor[(11, 7, 10), float32], %var_1997: Tensor[(2160), float32]) -> (Tensor[(11, 7, 10), float32], Tensor[(15, 9, 16), float32], Tensor[(2160), float32], Tensor[(15, 9, 16), float32], Tensor[(105), uint8]) {
  @func_1994(%var_1996, %var_1997) /* ty=(Tensor[(11, 7, 10), float32], Tensor[(15, 9, 16), float32], Tensor[(2160), float32], Tensor[(15, 9, 16), float32], Tensor[(105), uint8]) */
}

def @func_5456(%var_5455: Tensor[(2160), float32]) -> (Tensor[(105), uint8], Tensor[(480), float32], Tensor[(2160), float32], Tensor[(11, 2, 7), uint64], Tensor[(480), float32], Tensor[(154), float32]) {
  %254 = fn (%var_5417: Tensor[(2160), float32]) -> (Tensor[(105), uint8], Tensor[(480), float32], Tensor[(2160), float32], Tensor[(11, 2, 7), uint64], Tensor[(480), float32], Tensor[(154), float32]) {
    %231 = cast(%var_5417, dtype="float32") /* ty=Tensor[(2160), float32] */;
    %232 = reshape(%231, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
    %233 = @func_4954(%232) /* ty=(Tensor[(105), uint8], Tensor[(480), float32], Tensor[(2160), float32]) */;
    %234 = cast(meta[relay.Constant][14] /* ty=Tensor[(154), uint64] */, dtype="uint64") /* ty=Tensor[(154), uint64] */;
    %235 = cast(meta[relay.Constant][14] /* ty=Tensor[(154), uint64] */, dtype="uint64") /* ty=Tensor[(154), uint64] */;
    %236 = reshape(%234, newshape=[11, 2, 7]) /* ty=Tensor[(11, 2, 7), uint64] */;
    %237 = reshape(%235, newshape=[11, 2, 7]) /* ty=Tensor[(11, 2, 7), uint64] */;
    %238 = @func_4349() /* ty=Tensor[(105), uint8] */;
    %239 = cast(%238, dtype="uint8") /* ty=Tensor[(105), uint8] */;
    %240 = cast(%var_5417, dtype="float32") /* ty=Tensor[(2160), float32] */;
    %241 = reshape(%239, newshape=[105]) /* ty=Tensor[(105), uint8] */;
    %242 = reshape(%240, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
    %243 = @func_1158(%241, %242) /* ty=(Tensor[(11, 11, 15), float64], Tensor[(15, 9, 16), float32], float32, Tensor[(480), float32], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(15, 9, 16), float32]) */;
    %244 = cast(meta[relay.Constant][14] /* ty=Tensor[(154), uint64] */, dtype="float32") /* ty=Tensor[(154), float32] */;
    %245 = acosh(%244) /* ty=Tensor[(154), float32] */;
    %246 = cast(meta[relay.Constant][14] /* ty=Tensor[(154), uint64] */, dtype="float32") /* ty=Tensor[(154), float32] */;
    %247 = shape_of(%245, dtype="int32") /* ty=Tensor[(1), int32] */;
    %248 = cast(%245, dtype="float32") /* ty=Tensor[(154), float32] */;
    %249 = dyn.reshape(%246, %247, newshape=[]) /* ty=Tensor[(?), float32] */;
    %250 = %233.1;
    %251 = @func_1602(%236, %237) /* ty=Tensor[(11, 2, 7), uint64] */;
    %252 = %243.3;
    %253 = floor_divide(%248, %249) /* ty=Tensor[(154), float32] */;
    (%238, %250, %var_5417, %251, %252, %253)
  };
  %254(%var_5455) /* ty=(Tensor[(105), uint8], Tensor[(480), float32], Tensor[(2160), float32], Tensor[(11, 2, 7), uint64], Tensor[(480), float32], Tensor[(154), float32]) */
}

def @func_3890() -> (Tensor[(2160), float32],) {
  %255 = @func_2819() /* ty=(Tensor[(15, 9, 16), float64], Tensor[(2160), float32]) */;
  %256 = %255.1;
  (%256,)
}

def @func_4604(%var_4601: Tensor[(1, 6, 15), float64]) -> Tensor[(1, 6, 15), float64] {
  %257 = cast(%var_4601, dtype="float64") /* ty=Tensor[(1, 6, 15), float64] */;
  atan(%257) /* ty=Tensor[(1, 6, 15), float64] */
}

def @func_1944(%var_1943: Tensor[(105), uint8]) -> (Tensor[(105), uint8], Tensor[(15, 9, 16), bool], Tensor[(15, 9, 16), bool], Tensor[(15, 9, 16), bool]) {
  %285 = fn (%var_1871: Tensor[(105), uint8]) -> (Tensor[(105), uint8], Tensor[(15, 9, 16), bool], Tensor[(15, 9, 16), bool], Tensor[(15, 9, 16), bool]) {
    %258 = cast(%var_1871, dtype="uint8") /* ty=Tensor[(105), uint8] */;
    %259 = @func_1739() /* ty=(Tensor[(14, 7, 7), float32], Tensor[(15, 9, 16), float64], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(15, 9, 16), float32]) */;
    %260 = %259.4;
    %261 = cast(%260, dtype="float32") /* ty=Tensor[(15, 9, 16), float32] */;
    %262 = reshape(%258, newshape=[105]) /* ty=Tensor[(105), uint8] */;
    %263 = reshape(%261, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
    %264 = @func_1158(%262, %263) /* ty=(Tensor[(11, 11, 15), float64], Tensor[(15, 9, 16), float32], float32, Tensor[(480), float32], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(15, 9, 16), float32]) */;
    %265 = %264.1;
    %266 = cast(%265, dtype="float32") /* ty=Tensor[(15, 9, 16), float32] */;
    %267 = exp(%266) /* ty=Tensor[(15, 9, 16), float32] */;
    %268 = cast(%265, dtype="bool") /* ty=Tensor[(15, 9, 16), bool] */;
    %269 = shape_of(%267, dtype="int32") /* ty=Tensor[(3), int32] */;
    %270 = cast(%267, dtype="bool") /* ty=Tensor[(15, 9, 16), bool] */;
    %271 = dyn.reshape(%268, %269, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %272 = cast(%260, dtype="float32") /* ty=Tensor[(15, 9, 16), float32] */;
    %273 = sqrt(%272) /* ty=Tensor[(15, 9, 16), float32] */;
    %274 = cast(%273, dtype="bool") /* ty=Tensor[(15, 9, 16), bool] */;
    %275 = shape_of(%267, dtype="int32") /* ty=Tensor[(3), int32] */;
    %276 = cast(%267, dtype="bool") /* ty=Tensor[(15, 9, 16), bool] */;
    %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %278 = cast(meta[relay.Constant][15] /* ty=Tensor[(15, 9, 16), float32] */, dtype="bool") /* ty=Tensor[(15, 9, 16), bool] */;
    %279 = shape_of(%267, dtype="int32") /* ty=Tensor[(3), int32] */;
    %280 = cast(%267, dtype="bool") /* ty=Tensor[(15, 9, 16), bool] */;
    %281 = dyn.reshape(%278, %279, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %282 = logical_or(%270, %271) /* ty=Tensor[(15, 9, 16), bool] */;
    %283 = less_equal(%276, %277) /* ty=Tensor[(15, 9, 16), bool] */;
    %284 = greater_equal(%280, %281) /* ty=Tensor[(15, 9, 16), bool] */;
    (%var_1871, %282, %283, %284)
  };
  %285(%var_1943) /* ty=(Tensor[(105), uint8], Tensor[(15, 9, 16), bool], Tensor[(15, 9, 16), bool], Tensor[(15, 9, 16), bool]) */
}

def @func_2067() -> Tensor[(7, 5, 3), float64] {
  @func_2065() /* ty=Tensor[(7, 5, 3), float64] */
}

def @func_3232(%var_3231: Tensor[(480), float32]) -> (Tensor[(7, 5, 3), float32], Tensor[(4, 15, 8), float32], Tensor[(480), float32], Tensor[(15, 9, 16), float32], Tensor[(2160), float32]) {
  %300 = fn (%var_3216: Tensor[(480), float32]) -> (Tensor[(7, 5, 3), float32], Tensor[(4, 15, 8), float32], Tensor[(480), float32], Tensor[(15, 9, 16), float32], Tensor[(2160), float32]) {
    %286 = @func_1824() /* ty=(Tensor[(7, 5, 3), float64], Tensor[(7, 5, 3), float32]) */;
    %287 = cast(%var_3216, dtype="float32") /* ty=Tensor[(480), float32] */;
    %288 = reshape(%287, newshape=[4, 15, 8]) /* ty=Tensor[(4, 15, 8), float32] */;
    %289 = @func_993(%288) /* ty=(Tensor[(3, 9, 5), uint64], Tensor[(1, 135), bool], Tensor[(4, 15, 8), bool], Tensor[(4, 15, 8), float32]) */;
    %290 = %286.1;
    %291 = cast(%290, dtype="uint8") /* ty=Tensor[(7, 5, 3), uint8] */;
    %292 = cast(%290, dtype="uint8") /* ty=Tensor[(7, 5, 3), uint8] */;
    %293 = cast(meta[relay.Constant][16] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
    %294 = reshape(%291, newshape=[7, 5, 3]) /* ty=Tensor[(7, 5, 3), uint8] */;
    %295 = reshape(%292, newshape=[7, 5, 3]) /* ty=Tensor[(7, 5, 3), uint8] */;
    %296 = reshape(%293, newshape=[15, 9, 16]) /* ty=Tensor[(15, 9, 16), float32] */;
    %297 = @func_880(%294, %295, %296) /* ty=(Tensor[(7, 5, 3), bool], Tensor[(2160), float32], Tensor[(7, 5, 3), float32], Tensor[(15, 9, 16), float32], Tensor[(15, 9, 16), float64], Tensor[(15, 9, 16), float32]) */;
    %298 = %289.3;
    %299 = %297.3;
    (%290, %298, %var_3216, %299, meta[relay.Constant][16] /* ty=Tensor[(2160), float32] */)
  };
  %300(%var_3231) /* ty=(Tensor[(7, 5, 3), float32], Tensor[(4, 15, 8), float32], Tensor[(480), float32], Tensor[(15, 9, 16), float32], Tensor[(2160), float32]) */
}

def @func_4291(%var_4290: Tensor[(364), float64]) -> (Tensor[(105), uint8], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(364), float64]) {
  %320 = fn (%var_4253: Tensor[(364), float64]) -> (Tensor[(105), uint8], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(364), float64]) {
    %301 = @func_3202() /* ty=(Tensor[(105), uint8],) */;
    %302 = @func_3890() /* ty=(Tensor[(2160), float32],) */;
    %303 = cast(%var_4253, dtype="float64") /* ty=Tensor[(364), float64] */;
    %304 = reshape(%303, newshape=[14, 2, 13]) /* ty=Tensor[(14, 2, 13), float64] */;
    %305 = @func_3328(%304) /* ty=(Tensor[(14, 2, 13), float64],) */;
    %306 = %305.0;
    %307 = cast(%306, dtype="uint32") /* ty=Tensor[(14, 2, 13), uint32] */;
    %308 = shape_of(%var_4253, dtype="int32") /* ty=Tensor[(1), int32] */;
    %309 = cast(%var_4253, dtype="uint32") /* ty=Tensor[(364), uint32] */;
    %310 = dyn.reshape(%307, %308, newshape=[]) /* ty=Tensor[(?), uint32] */;
    %311 = bitwise_or(%309, %310) /* ty=Tensor[(364), uint32] */;
    %312 = cast(%var_4253, dtype="float64") /* ty=Tensor[(364), float64] */;
    %313 = shape_of(%311, dtype="int32") /* ty=Tensor[(1), int32] */;
    %314 = cast(%311, dtype="float64") /* ty=Tensor[(364), float64] */;
    %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?), float64] */;
    %316 = %301.0;
    %317 = @func_2928() /* ty=Tensor[(105), uint8] */;
    %318 = %302.0;
    %319 = mod(%314, %315) /* ty=Tensor[(364), float64] */;
    (%316, %317, %318, %319)
  };
  %320(%var_4290) /* ty=(Tensor[(105), uint8], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(364), float64]) */
}

def @func_2534() -> (Tensor[(105), uint8],) {
  %321 = @func_1789() /* ty=(Tensor[(15, 9, 16), float64], Tensor[(7, 5, 3), bool], Tensor[(105), uint8]) */;
  %322 = %321.2;
  (%322,)
}

def @func_3597() -> (Tensor[(14, 2, 3), float32],) {
  @func_3595() /* ty=(Tensor[(14, 2, 3), float32],) */
}

def @func_2558() -> Tensor[(7, 5, 3), float32] {
  %324 = fn () -> Tensor[(7, 5, 3), float32] {
    %323 = @func_1824() /* ty=(Tensor[(7, 5, 3), float64], Tensor[(7, 5, 3), float32]) */;
    %323.1
  };
  %324() /* ty=Tensor[(7, 5, 3), float32] */
}

def @func_4658(%var_4657: Tensor[(2160), float32]) -> (Tensor[(7, 5, 3), float32], Tensor[(7, 5, 3), bool], Tensor[(2160), float32], Tensor[(15, 9, 16), bool]) {
  %339 = fn (%var_4633: Tensor[(2160), float32]) -> (Tensor[(7, 5, 3), float32], Tensor[(7, 5, 3), bool], Tensor[(2160), float32], Tensor[(15, 9, 16), bool]) {
    %325 = @func_4400() /* ty=(Tensor[(7, 5, 3), float32],) */;
    %326 = %325.0;
    %327 = cast(%326, dtype="uint8") /* ty=Tensor[(7, 5, 3), uint8] */;
    %328 = cast(%326, dtype="uint8") /* ty=Tensor[(7, 5, 3), uint8] */;
    %329 = cast(%var_4633, dtype="float32") /* ty=Tensor[(2160), float32] */;
    %330 = reshape(%327, newshape=[7, 5, 3]) /* ty=Tensor[(7, 5, 3), uint8] */;
    %331 = reshape(%328, newshape=[7, 5, 3]) /* ty=Tensor[(7, 5, 3), uint8] */;
    %332 = reshape(%329, newshape=[15, 9, 16]) /* ty=Tensor[(15, 9, 16), float32] */;
    %333 = @func_880(%330, %331, %332) /* ty=(Tensor[(7, 5, 3), bool], Tensor[(2160), float32], Tensor[(7, 5, 3), float32], Tensor[(15, 9, 16), float32], Tensor[(15, 9, 16), float64], Tensor[(15, 9, 16), float32]) */;
    %334 = %333.0;
    %335 = cast(%334, dtype="uint8") /* ty=Tensor[(7, 5, 3), uint8] */;
    %336 = reshape(%335, newshape=[105]) /* ty=Tensor[(105), uint8] */;
    %337 = @func_1942(%336) /* ty=(Tensor[(105), uint8], Tensor[(15, 9, 16), bool], Tensor[(15, 9, 16), bool], Tensor[(15, 9, 16), bool]) */;
    %338 = %337.2;
    (%326, %334, %var_4633, %338)
  };
  %339(%var_4657) /* ty=(Tensor[(7, 5, 3), float32], Tensor[(7, 5, 3), bool], Tensor[(2160), float32], Tensor[(15, 9, 16), bool]) */
}

def @func_5673(%var_5671: Tensor[(2160), float32], %var_5672: Tensor[(2160), float32]) -> (Tensor[(7, 5, 3), float32], Tensor[(2160), int16], Tensor[(2160), bool]) {
  @func_5669(%var_5671, %var_5672) /* ty=(Tensor[(7, 5, 3), float32], Tensor[(2160), int16], Tensor[(2160), bool]) */
}

def @func_2684() -> (Tensor[(7, 5, 3), float32], Tensor[(105), uint8], Tensor[(84), uint32]) {
  @func_2682() /* ty=(Tensor[(7, 5, 3), float32], Tensor[(105), uint8], Tensor[(84), uint32]) */
}

def @func_1741() -> (Tensor[(14, 7, 7), float32], Tensor[(15, 9, 16), float64], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(15, 9, 16), float32]) {
  @func_1739() /* ty=(Tensor[(14, 7, 7), float32], Tensor[(15, 9, 16), float64], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(15, 9, 16), float32]) */
}

def @func_993(%var_930: Tensor[(4, 15, 8), float32]) -> (Tensor[(3, 9, 5), uint64], Tensor[(1, 135), bool], Tensor[(4, 15, 8), bool], Tensor[(4, 15, 8), float32]) {
  %340 = cast(meta[relay.Constant][17] /* ty=Tensor[(1, 135), bool] */, dtype="bool") /* ty=Tensor[(1, 135), bool] */;
  %341 = cast(meta[relay.Constant][17] /* ty=Tensor[(1, 135), bool] */, dtype="bool") /* ty=Tensor[(1, 135), bool] */;
  %342 = reshape(%340, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), bool] */;
  %343 = reshape(%341, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), bool] */;
  %344 = @func_76(%342, %343) /* ty=(Tensor[(3, 9, 5), uint64], Tensor[(3, 9, 5), bool], Tensor[(3, 9, 5), float64]) */;
  %345 = cast(meta[relay.Constant][18] /* ty=Tensor[(4, 15, 8), float32] */, dtype="bool") /* ty=Tensor[(4, 15, 8), bool] */;
  %346 = shape_of(%var_930, dtype="int32") /* ty=Tensor[(3), int32] */;
  %347 = cast(%var_930, dtype="bool") /* ty=Tensor[(4, 15, 8), bool] */;
  %348 = dyn.reshape(%345, %346, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %349 = equal(%347, %348) /* ty=Tensor[(4, 15, 8), bool] */;
  %350 = cast(%349, dtype="float64") /* ty=Tensor[(4, 15, 8), float64] */;
  %351 = log(%350) /* ty=Tensor[(4, 15, 8), float64] */;
  %352 = cast(%var_930, dtype="bool") /* ty=Tensor[(4, 15, 8), bool] */;
  %353 = shape_of(%351, dtype="int32") /* ty=Tensor[(3), int32] */;
  %354 = cast(%351, dtype="bool") /* ty=Tensor[(4, 15, 8), bool] */;
  %355 = dyn.reshape(%352, %353, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %356 = cast(%349, dtype="float32") /* ty=Tensor[(4, 15, 8), float32] */;
  %357 = shape_of(%351, dtype="int32") /* ty=Tensor[(3), int32] */;
  %358 = cast(%351, dtype="float32") /* ty=Tensor[(4, 15, 8), float32] */;
  %359 = dyn.reshape(%356, %357, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %360 = %344.0;
  %361 = logical_or(%354, %355) /* ty=Tensor[(4, 15, 8), bool] */;
  %362 = multiply(%358, %359) /* ty=Tensor[(4, 15, 8), float32] */;
  (%360, meta[relay.Constant][17] /* ty=Tensor[(1, 135), bool] */, %361, %362)
}

def @func_3828() -> Tensor[(15, 9, 16), float64] {
  @func_3826() /* ty=Tensor[(15, 9, 16), float64] */
}

def @func_996(%var_994: Tensor[(4, 15, 8), float32]) -> (Tensor[(3, 9, 5), uint64], Tensor[(1, 135), bool], Tensor[(4, 15, 8), bool], Tensor[(4, 15, 8), float32]) {
  @func_993(%var_994) /* ty=(Tensor[(3, 9, 5), uint64], Tensor[(1, 135), bool], Tensor[(4, 15, 8), bool], Tensor[(4, 15, 8), float32]) */
}

def @func_4401() -> (Tensor[(7, 5, 3), float32],) {
  %364 = fn () -> (Tensor[(7, 5, 3), float32],) {
    %363 = @func_2557() /* ty=Tensor[(7, 5, 3), float32] */;
    (%363,)
  };
  %364() /* ty=(Tensor[(7, 5, 3), float32],) */
}

def @func_1994(%var_1952: Tensor[(11, 7, 10), float32], %var_1958: Tensor[(2160), float32]) -> (Tensor[(11, 7, 10), float32], Tensor[(15, 9, 16), float32], Tensor[(2160), float32], Tensor[(15, 9, 16), float32], Tensor[(105), uint8]) {
  %365 = cast(%var_1952, dtype="float32") /* ty=Tensor[(11, 7, 10), float32] */;
  %366 = acos(%365) /* ty=Tensor[(11, 7, 10), float32] */;
  %367 = cast(%366, dtype="float32") /* ty=Tensor[(11, 7, 10), float32] */;
  %368 = cast(%var_1958, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %369 = cast(%var_1958, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %370 = reshape(%368, newshape=[15, 9, 16]) /* ty=Tensor[(15, 9, 16), float32] */;
  %371 = reshape(%369, newshape=[15, 9, 16]) /* ty=Tensor[(15, 9, 16), float32] */;
  %372 = @func_622(%370, %371) /* ty=(Tensor[(15, 9, 16), float32],) */;
  %373 = cast(meta[relay.Constant][19] /* ty=Tensor[(105), uint8] */, dtype="uint8") /* ty=Tensor[(105), uint8] */;
  %374 = %372.0;
  %375 = cast(%374, dtype="float32") /* ty=Tensor[(15, 9, 16), float32] */;
  %376 = reshape(%373, newshape=[105]) /* ty=Tensor[(105), uint8] */;
  %377 = reshape(%375, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
  %378 = @func_1158(%376, %377) /* ty=(Tensor[(11, 11, 15), float64], Tensor[(15, 9, 16), float32], float32, Tensor[(480), float32], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(15, 9, 16), float32]) */;
  %379 = rsqrt(%367) /* ty=Tensor[(11, 7, 10), float32] */;
  %380 = %378.1;
  (%379, %374, %var_1958, %380, meta[relay.Constant][19] /* ty=Tensor[(105), uint8] */)
}

def @func_5598() -> Tensor[(105), uint8] {
  @func_5596() /* ty=Tensor[(105), uint8] */
}

def @func_5669(%var_5652: Tensor[(2160), float32], %var_5657: Tensor[(2160), float32]) -> (Tensor[(7, 5, 3), float32], Tensor[(2160), int16], Tensor[(2160), bool]) {
  %381 = @func_3890() /* ty=(Tensor[(2160), float32],) */;
  %382 = %381.0;
  %383 = cast(%var_5652, dtype="int16") /* ty=Tensor[(2160), int16] */;
  %384 = shape_of(%382, dtype="int32") /* ty=Tensor[(1), int32] */;
  %385 = cast(%382, dtype="int16") /* ty=Tensor[(2160), int16] */;
  %386 = dyn.reshape(%383, %384, newshape=[]) /* ty=Tensor[(?), int16] */;
  %387 = cast(%var_5657, dtype="bool") /* ty=Tensor[(2160), bool] */;
  %388 = shape_of(%var_5652, dtype="int32") /* ty=Tensor[(1), int32] */;
  %389 = cast(%var_5652, dtype="bool") /* ty=Tensor[(2160), bool] */;
  %390 = dyn.reshape(%387, %388, newshape=[]) /* ty=Tensor[(?), bool] */;
  %391 = @func_2557() /* ty=Tensor[(7, 5, 3), float32] */;
  %392 = maximum(%385, %386) /* ty=Tensor[(2160), int16] */;
  %393 = less(%389, %390) /* ty=Tensor[(2160), bool] */;
  (%391, %392, %393)
}

def @func_3625(%var_3622: Tensor[(6, 2, 10), bool], %var_3623: Tensor[(6, 2, 10), bool], %var_3624: Tensor[(6, 2, 10), bool]) -> (Tensor[(6, 2, 10), bool], Tensor[(6, 2, 10), bool]) {
  %404 = fn (%var_3600: Tensor[(6, 2, 10), bool], %var_3601: Tensor[(6, 2, 10), bool], %var_3611: Tensor[(6, 2, 10), bool]) -> (Tensor[(6, 2, 10), bool], Tensor[(6, 2, 10), bool]) {
    %394 = cast(%var_3601, dtype="bool") /* ty=Tensor[(6, 2, 10), bool] */;
    %395 = shape_of(%var_3600, dtype="int32") /* ty=Tensor[(3), int32] */;
    %396 = cast(%var_3600, dtype="bool") /* ty=Tensor[(6, 2, 10), bool] */;
    %397 = dyn.reshape(%394, %395, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %398 = cast(%var_3611, dtype="bool") /* ty=Tensor[(6, 2, 10), bool] */;
    %399 = shape_of(%var_3600, dtype="int32") /* ty=Tensor[(3), int32] */;
    %400 = cast(%var_3600, dtype="bool") /* ty=Tensor[(6, 2, 10), bool] */;
    %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %402 = logical_and(%396, %397) /* ty=Tensor[(6, 2, 10), bool] */;
    %403 = greater_equal(%400, %401) /* ty=Tensor[(6, 2, 10), bool] */;
    (%402, %403)
  };
  %404(%var_3622, %var_3623, %var_3624) /* ty=(Tensor[(6, 2, 10), bool], Tensor[(6, 2, 10), bool]) */
}

def @func_2190(%var_2188: Tensor[(4, 7, 3), uint32], %var_2189: Tensor[(4, 7, 3), uint32]) -> (Tensor[(4, 7, 3), float64], Tensor[(7, 5, 3), float64]) {
  @func_2186(%var_2188, %var_2189) /* ty=(Tensor[(4, 7, 3), float64], Tensor[(7, 5, 3), float64]) */
}

def @func_6136() -> Tensor[(105), uint8] {
  @func_6134() /* ty=Tensor[(105), uint8] */
}

def @func_4923(%var_4876: Tensor[(50), uint64]) -> (Tensor[(15, 9, 16), float64], Tensor[(105), uint8], Tensor[(1386), uint8], Tensor[(50), uint64], Tensor[(15, 9, 16), float64]) {
  %405 = cast(meta[relay.Constant][20] /* ty=Tensor[(1386), uint8] */, dtype="uint8") /* ty=Tensor[(1386), uint8] */;
  %406 = cast(meta[relay.Constant][20] /* ty=Tensor[(1386), uint8] */, dtype="uint8") /* ty=Tensor[(1386), uint8] */;
  %407 = cast(%var_4876, dtype="uint64") /* ty=Tensor[(50), uint64] */;
  %408 = @func_3643() /* ty=Tensor[(15, 9, 16), float64] */;
  %409 = cast(%408, dtype="float32") /* ty=Tensor[(15, 9, 16), float32] */;
  %410 = reshape(%405, newshape=[11, 14, 9]) /* ty=Tensor[(11, 14, 9), uint8] */;
  %411 = reshape(%406, newshape=[11, 14, 9]) /* ty=Tensor[(11, 14, 9), uint8] */;
  %412 = reshape(%407, newshape=[50]) /* ty=Tensor[(50), uint64] */;
  %413 = reshape(%409, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
  %414 = @func_4839(%410, %411, %412, %413) /* ty=(Tensor[(105), uint8], Tensor[(364), float64], Tensor[(120), bool], Tensor[(6, 2, 10), float64], Tensor[(10, 10, 5), uint32], Tensor[(50), uint64], Tensor[(50, 10), uint64], Tensor[(11, 14, 9), float64], Tensor[(7, 5, 3), bool], Tensor[(2160), float32], Tensor[(364, 3), bool], Tensor[(364, ?), float64]) */;
  %415 = @func_2937() /* ty=(Tensor[(15, 9, 16), float64],) */;
  %416 = %414.0;
  %417 = %415.0;
  (%408, %416, meta[relay.Constant][20] /* ty=Tensor[(1386), uint8] */, %var_4876, %417)
}

def @func_3492(%var_3488: Tensor[(1, 16, 12), float64], %var_3489: Tensor[(14, 16, 12), float64], %var_3490: Tensor[(364), float64], %var_3491: Tensor[(84), uint32]) -> (Tensor[(3, 9, 5), uint64], Tensor[(1, 135), bool], Tensor[(14, 16, 12), uint64], Tensor[(14, 2, 13), float64], Tensor[(364), float64], Tensor[(14, 16, 12), float32], Tensor[(4, 7, 3), float64], Tensor[(84), uint32]) {
  %457 = fn (%var_3419: Tensor[(1, 16, 12), float64], %var_3441: Tensor[(14, 16, 12), float64], %var_3479: Tensor[(364), float64], %var_3485: Tensor[(84), uint32]) -> (Tensor[(3, 9, 5), uint64], Tensor[(1, 135), bool], Tensor[(14, 16, 12), uint64], Tensor[(14, 2, 13), float64], Tensor[(364), float64], Tensor[(14, 16, 12), float32], Tensor[(4, 7, 3), float64], Tensor[(84), uint32]) {
    %418 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 135), bool] */, dtype="bool") /* ty=Tensor[(1, 135), bool] */;
    %419 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 135), bool] */, dtype="bool") /* ty=Tensor[(1, 135), bool] */;
    %420 = reshape(%418, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), bool] */;
    %421 = reshape(%419, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), bool] */;
    %422 = @func_76(%420, %421) /* ty=(Tensor[(3, 9, 5), uint64], Tensor[(3, 9, 5), bool], Tensor[(3, 9, 5), float64]) */;
    %423 = cast(%var_3419, dtype="float64") /* ty=Tensor[(1, 16, 12), float64] */;
    %424 = log2(%423) /* ty=Tensor[(1, 16, 12), float64] */;
    %425 = cast(%424, dtype="int32") /* ty=Tensor[(1, 16, 12), int32] */;
    %426 = cast(%var_3441, dtype="int32") /* ty=Tensor[(14, 16, 12), int32] */;
    %427 = bitwise_xor(%425, %426) /* ty=Tensor[(14, 16, 12), int32] */;
    %428 = cast(%424, dtype="float64") /* ty=Tensor[(1, 16, 12), float64] */;
    %429 = cast(%427, dtype="float64") /* ty=Tensor[(14, 16, 12), float64] */;
    %430 = divide(%428, %429) /* ty=Tensor[(14, 16, 12), float64] */;
    %431 = cast(%430, dtype="float64") /* ty=Tensor[(14, 16, 12), float64] */;
    %432 = atan(%431) /* ty=Tensor[(14, 16, 12), float64] */;
    %433 = cast(%424, dtype="bool") /* ty=Tensor[(1, 16, 12), bool] */;
    %434 = cast(%430, dtype="bool") /* ty=Tensor[(14, 16, 12), bool] */;
    %435 = equal(%433, %434) /* ty=Tensor[(14, 16, 12), bool] */;
    %436 = cast(%435, dtype="uint64") /* ty=Tensor[(14, 16, 12), uint64] */;
    %437 = shape_of(%432, dtype="int32") /* ty=Tensor[(3), int32] */;
    %438 = cast(%432, dtype="uint64") /* ty=Tensor[(14, 16, 12), uint64] */;
    %439 = dyn.reshape(%436, %437, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %440 = cast(%var_3479, dtype="float64") /* ty=Tensor[(364), float64] */;
    %441 = reshape(%440, newshape=[14, 2, 13]) /* ty=Tensor[(14, 2, 13), float64] */;
    %442 = @func_3328(%441) /* ty=(Tensor[(14, 2, 13), float64],) */;
    %443 = cast(%var_3441, dtype="float32") /* ty=Tensor[(14, 16, 12), float32] */;
    %444 = shape_of(%432, dtype="int32") /* ty=Tensor[(3), int32] */;
    %445 = cast(%432, dtype="float32") /* ty=Tensor[(14, 16, 12), float32] */;
    %446 = dyn.reshape(%443, %444, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %447 = cast(%var_3485, dtype="uint32") /* ty=Tensor[(84), uint32] */;
    %448 = cast(%var_3485, dtype="uint32") /* ty=Tensor[(84), uint32] */;
    %449 = reshape(%447, newshape=[4, 7, 3]) /* ty=Tensor[(4, 7, 3), uint32] */;
    %450 = reshape(%448, newshape=[4, 7, 3]) /* ty=Tensor[(4, 7, 3), uint32] */;
    %451 = @func_2186(%449, %450) /* ty=(Tensor[(4, 7, 3), float64], Tensor[(7, 5, 3), float64]) */;
    %452 = %422.0;
    %453 = bitwise_or(%438, %439) /* ty=Tensor[(14, 16, 12), uint64] */;
    %454 = %442.0;
    %455 = floor_divide(%445, %446) /* ty=Tensor[(14, 16, 12), float32] */;
    %456 = %451.0;
    (%452, meta[relay.Constant][21] /* ty=Tensor[(1, 135), bool] */, %453, %454, %var_3479, %455, %456, %var_3485)
  };
  %457(%var_3488, %var_3489, %var_3490, %var_3491) /* ty=(Tensor[(3, 9, 5), uint64], Tensor[(1, 135), bool], Tensor[(14, 16, 12), uint64], Tensor[(14, 2, 13), float64], Tensor[(364), float64], Tensor[(14, 16, 12), float32], Tensor[(4, 7, 3), float64], Tensor[(84), uint32]) */
}

def @func_2914(%var_2860: Tensor[(480), float32]) -> (Tensor[(7, 5, 3), float64], Tensor[(1, 135), bool], Tensor[(480), float32], Tensor[(105), uint8], Tensor[(105), uint8], Tensor[(15, 9, 16), float32]) {
  %458 = cast(%var_2860, dtype="float32") /* ty=Tensor[(480), float32] */;
  %459 = reshape(%458, newshape=[4, 15, 8]) /* ty=Tensor[(4, 15, 8), float32] */;
  %460 = @func_993(%459) /* ty=(Tensor[(3, 9, 5), uint64], Tensor[(1, 135), bool], Tensor[(4, 15, 8), bool], Tensor[(4, 15, 8), float32]) */;
  %461 = @func_2614() /* ty=(Tensor[(105), uint8],) */;
  %462 = @func_1739() /* ty=(Tensor[(14, 7, 7), float32], Tensor[(15, 9, 16), float64], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(15, 9, 16), float32]) */;
  %463 = @func_2819() /* ty=(Tensor[(15, 9, 16), float64], Tensor[(2160), float32]) */;
  %464 = %463.0;
  %465 = cast(%464, dtype="float64") /* ty=Tensor[(15, 9, 16), float64] */;
  %466 = atanh(%465) /* ty=Tensor[(15, 9, 16), float64] */;
  %467 = cast(%466, dtype="float32") /* ty=Tensor[(15, 9, 16), float32] */;
  %468 = sin(%467) /* ty=Tensor[(15, 9, 16), float32] */;
  %469 = cast(%466, dtype="int32") /* ty=Tensor[(15, 9, 16), int32] */;
  %470 = shape_of(%468, dtype="int32") /* ty=Tensor[(3), int32] */;
  %471 = cast(%468, dtype="int32") /* ty=Tensor[(15, 9, 16), int32] */;
  %472 = dyn.reshape(%469, %470, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %473 = bitwise_and(%471, %472) /* ty=Tensor[(15, 9, 16), int32] */;
  %474 = cast(%466, dtype="float32") /* ty=Tensor[(15, 9, 16), float32] */;
  %475 = shape_of(%473, dtype="int32") /* ty=Tensor[(3), int32] */;
  %476 = cast(%473, dtype="float32") /* ty=Tensor[(15, 9, 16), float32] */;
  %477 = dyn.reshape(%474, %475, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %478 = @func_2065() /* ty=Tensor[(7, 5, 3), float64] */;
  %479 = %460.1;
  %480 = %461.0;
  %481 = %462.2;
  %482 = add(%476, %477) /* ty=Tensor[(15, 9, 16), float32] */;
  (%478, %479, %var_2860, %480, %481, %482)
}

def @func_1825() -> (Tensor[(7, 5, 3), float64], Tensor[(7, 5, 3), float32]) {
  %489 = fn () -> (Tensor[(7, 5, 3), float64], Tensor[(7, 5, 3), float32]) {
    %483 = @func_1789() /* ty=(Tensor[(15, 9, 16), float64], Tensor[(7, 5, 3), bool], Tensor[(105), uint8]) */;
    %484 = %483.1;
    %485 = cast(%484, dtype="float64") /* ty=Tensor[(7, 5, 3), float64] */;
    %486 = cast(%484, dtype="float32") /* ty=Tensor[(7, 5, 3), float32] */;
    %487 = cosh(%485) /* ty=Tensor[(7, 5, 3), float64] */;
    %488 = sigmoid(%486) /* ty=Tensor[(7, 5, 3), float32] */;
    (%487, %488)
  };
  %489() /* ty=(Tensor[(7, 5, 3), float64], Tensor[(7, 5, 3), float32]) */
}

def @func_4954(%var_4941: Tensor[(2160), float32]) -> (Tensor[(105), uint8], Tensor[(480), float32], Tensor[(2160), float32]) {
  %490 = @func_2928() /* ty=Tensor[(105), uint8] */;
  %491 = cast(%490, dtype="uint8") /* ty=Tensor[(105), uint8] */;
  %492 = cast(%var_4941, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %493 = reshape(%491, newshape=[105]) /* ty=Tensor[(105), uint8] */;
  %494 = reshape(%492, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
  %495 = @func_1158(%493, %494) /* ty=(Tensor[(11, 11, 15), float64], Tensor[(15, 9, 16), float32], float32, Tensor[(480), float32], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(15, 9, 16), float32]) */;
  %496 = %495.3;
  (%490, %496, %var_4941)
}

def @func_5626() -> (Tensor[(105), uint8], Tensor[(14, 2, 3), float32], Tensor[(7, 5, 3), float64]) {
  @func_5624() /* ty=(Tensor[(105), uint8], Tensor[(14, 2, 3), float32], Tensor[(7, 5, 3), float64]) */
}

def @func_2308(%var_2307: Tensor[(84), uint32]) -> (Tensor[(105), uint8], Tensor[(4, 7, 3), float64], Tensor[(84), uint32], Tensor[(15, 9, 16), bool]) {
  %509 = fn (%var_2284: Tensor[(84), uint32]) -> (Tensor[(105), uint8], Tensor[(4, 7, 3), float64], Tensor[(84), uint32], Tensor[(15, 9, 16), bool]) {
    %497 = @func_1739() /* ty=(Tensor[(14, 7, 7), float32], Tensor[(15, 9, 16), float64], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(15, 9, 16), float32]) */;
    %498 = cast(%var_2284, dtype="uint32") /* ty=Tensor[(84), uint32] */;
    %499 = cast(%var_2284, dtype="uint32") /* ty=Tensor[(84), uint32] */;
    %500 = reshape(%498, newshape=[4, 7, 3]) /* ty=Tensor[(4, 7, 3), uint32] */;
    %501 = reshape(%499, newshape=[4, 7, 3]) /* ty=Tensor[(4, 7, 3), uint32] */;
    %502 = @func_2186(%500, %501) /* ty=(Tensor[(4, 7, 3), float64], Tensor[(7, 5, 3), float64]) */;
    %503 = %497.2;
    %504 = cast(%503, dtype="uint8") /* ty=Tensor[(105), uint8] */;
    %505 = reshape(%504, newshape=[105]) /* ty=Tensor[(105), uint8] */;
    %506 = @func_1942(%505) /* ty=(Tensor[(105), uint8], Tensor[(15, 9, 16), bool], Tensor[(15, 9, 16), bool], Tensor[(15, 9, 16), bool]) */;
    %507 = %502.0;
    %508 = %506.3;
    (%503, %507, %var_2284, %508)
  };
  %509(%var_2307) /* ty=(Tensor[(105), uint8], Tensor[(4, 7, 3), float64], Tensor[(84), uint32], Tensor[(15, 9, 16), bool]) */
}

def @func_3800() -> Tensor[(105), uint8] {
  %510 = @func_3202() /* ty=(Tensor[(105), uint8],) */;
  %510.0
}

def @func_4957(%var_4955: Tensor[(2160), float32]) -> (Tensor[(105), uint8], Tensor[(480), float32], Tensor[(2160), float32]) {
  @func_4954(%var_4955) /* ty=(Tensor[(105), uint8], Tensor[(480), float32], Tensor[(2160), float32]) */
}

def @func_2138() -> Tensor[(7, 5, 3), float64] {
  %511 = @func_1824() /* ty=(Tensor[(7, 5, 3), float64], Tensor[(7, 5, 3), float32]) */;
  %511.0
}

def @func_4331() -> (Tensor[(15, 9, 16), float32], Tensor[(105), uint8], Tensor[(2160), float32]) {
  @func_4329() /* ty=(Tensor[(15, 9, 16), float32], Tensor[(105), uint8], Tensor[(2160), float32]) */
}

def @func_4349() -> Tensor[(105), uint8] {
  @func_2928() /* ty=Tensor[(105), uint8] */
}

def @func_5884(%var_5882: Tensor[(7, 5, 3), float32]) -> (Tensor[(16, 1, 2), float32], Tensor[(32), float32], Tensor[(7, 5, 3), float32]) {
  @func_5881(%var_5882) /* ty=(Tensor[(16, 1, 2), float32], Tensor[(32), float32], Tensor[(7, 5, 3), float32]) */
}

def @func_2381(%var_2379: Tensor[(154), uint64]) -> (Tensor[(105), uint8], Tensor[(11, 2, 7), uint64], Tensor[(154), uint64], Tensor[(3, 9, 5), bool], Tensor[(135), bool]) {
  @func_2378(%var_2379) /* ty=(Tensor[(105), uint8], Tensor[(11, 2, 7), uint64], Tensor[(154), uint64], Tensor[(3, 9, 5), bool], Tensor[(135), bool]) */
}

def @func_1790() -> (Tensor[(15, 9, 16), float64], Tensor[(7, 5, 3), bool], Tensor[(105), uint8]) {
  %522 = fn () -> (Tensor[(15, 9, 16), float64], Tensor[(7, 5, 3), bool], Tensor[(105), uint8]) {
    %512 = @func_1739() /* ty=(Tensor[(14, 7, 7), float32], Tensor[(15, 9, 16), float64], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(15, 9, 16), float32]) */;
    %513 = cast(meta[relay.Constant][22] /* ty=Tensor[(105), uint8] */, dtype="uint8") /* ty=Tensor[(105), uint8] */;
    %514 = cast(meta[relay.Constant][22] /* ty=Tensor[(105), uint8] */, dtype="uint8") /* ty=Tensor[(105), uint8] */;
    %515 = %512.1;
    %516 = cast(%515, dtype="float32") /* ty=Tensor[(15, 9, 16), float32] */;
    %517 = reshape(%513, newshape=[7, 5, 3]) /* ty=Tensor[(7, 5, 3), uint8] */;
    %518 = reshape(%514, newshape=[7, 5, 3]) /* ty=Tensor[(7, 5, 3), uint8] */;
    %519 = reshape(%516, newshape=[15, 9, 16]) /* ty=Tensor[(15, 9, 16), float32] */;
    %520 = @func_880(%517, %518, %519) /* ty=(Tensor[(7, 5, 3), bool], Tensor[(2160), float32], Tensor[(7, 5, 3), float32], Tensor[(15, 9, 16), float32], Tensor[(15, 9, 16), float64], Tensor[(15, 9, 16), float32]) */;
    %521 = %520.0;
    (%515, %521, meta[relay.Constant][22] /* ty=Tensor[(105), uint8] */)
  };
  %522() /* ty=(Tensor[(15, 9, 16), float64], Tensor[(7, 5, 3), bool], Tensor[(105), uint8]) */
}

def @func_5259(%var_5256: Tensor[(8, 24), float64], %var_5257: Tensor[(84), uint32], %var_5258: Tensor[(154), uint64]) -> (Tensor[(7, 5, 3), float64], Tensor[(105), uint8], Tensor[(1, 135), bool], Tensor[(8, 24), float64], Tensor[(2688), float64], Tensor[(364), float64], Tensor[(84), uint32], Tensor[(11, 2, 7), uint64], Tensor[(154), uint64], Tensor[(7, 5, 3), float64], Tensor[(11, 2, 7), uint64]) {
  %551 = fn (%var_5222: Tensor[(8, 24), float64], %var_5225: Tensor[(84), uint32], %var_5249: Tensor[(154), uint64]) -> (Tensor[(7, 5, 3), float64], Tensor[(105), uint8], Tensor[(1, 135), bool], Tensor[(8, 24), float64], Tensor[(2688), float64], Tensor[(364), float64], Tensor[(84), uint32], Tensor[(11, 2, 7), uint64], Tensor[(154), uint64], Tensor[(7, 5, 3), float64], Tensor[(11, 2, 7), uint64]) {
    %523 = @func_2534() /* ty=(Tensor[(105), uint8],) */;
    %524 = cast(%var_5222, dtype="float64") /* ty=Tensor[(8, 24), float64] */;
    %525 = cast(meta[relay.Constant][23] /* ty=Tensor[(2688), float64] */, dtype="float64") /* ty=Tensor[(2688), float64] */;
    %526 = cast(meta[relay.Constant][24] /* ty=Tensor[(364), float64] */, dtype="float64") /* ty=Tensor[(364), float64] */;
    %527 = cast(%var_5225, dtype="uint32") /* ty=Tensor[(84), uint32] */;
    %528 = reshape(%524, newshape=[1, 16, 12]) /* ty=Tensor[(1, 16, 12), float64] */;
    %529 = reshape(%525, newshape=[14, 16, 12]) /* ty=Tensor[(14, 16, 12), float64] */;
    %530 = reshape(%526, newshape=[364]) /* ty=Tensor[(364), float64] */;
    %531 = reshape(%527, newshape=[84]) /* ty=Tensor[(84), uint32] */;
    %532 = @func_3487(%528, %529, %530, %531) /* ty=(Tensor[(3, 9, 5), uint64], Tensor[(1, 135), bool], Tensor[(14, 16, 12), uint64], Tensor[(14, 2, 13), float64], Tensor[(364), float64], Tensor[(14, 16, 12), float32], Tensor[(4, 7, 3), float64], Tensor[(84), uint32]) */;
    %533 = cast(%var_5249, dtype="uint64") /* ty=Tensor[(154), uint64] */;
    %534 = cast(%var_5249, dtype="uint64") /* ty=Tensor[(154), uint64] */;
    %535 = reshape(%533, newshape=[11, 2, 7]) /* ty=Tensor[(11, 2, 7), uint64] */;
    %536 = reshape(%534, newshape=[11, 2, 7]) /* ty=Tensor[(11, 2, 7), uint64] */;
    %537 = cast(%var_5225, dtype="uint32") /* ty=Tensor[(84), uint32] */;
    %538 = cast(%var_5225, dtype="uint32") /* ty=Tensor[(84), uint32] */;
    %539 = reshape(%537, newshape=[4, 7, 3]) /* ty=Tensor[(4, 7, 3), uint32] */;
    %540 = reshape(%538, newshape=[4, 7, 3]) /* ty=Tensor[(4, 7, 3), uint32] */;
    %541 = @func_2186(%539, %540) /* ty=(Tensor[(4, 7, 3), float64], Tensor[(7, 5, 3), float64]) */;
    %542 = @func_1602(%535, %536) /* ty=Tensor[(11, 2, 7), uint64] */;
    %543 = cast(%542, dtype="uint64") /* ty=Tensor[(11, 2, 7), uint64] */;
    %544 = reshape(%543, newshape=[154]) /* ty=Tensor[(154), uint64] */;
    %545 = @func_2378(%544) /* ty=(Tensor[(105), uint8], Tensor[(11, 2, 7), uint64], Tensor[(154), uint64], Tensor[(3, 9, 5), bool], Tensor[(135), bool]) */;
    %546 = @func_2138() /* ty=Tensor[(7, 5, 3), float64] */;
    %547 = %523.0;
    %548 = %532.1;
    %549 = %541.1;
    %550 = %545.1;
    (%546, %547, %548, %var_5222, meta[relay.Constant][23] /* ty=Tensor[(2688), float64] */, meta[relay.Constant][24] /* ty=Tensor[(364), float64] */, %var_5225, %542, %var_5249, %549, %550)
  };
  %551(%var_5256, %var_5257, %var_5258) /* ty=(Tensor[(7, 5, 3), float64], Tensor[(105), uint8], Tensor[(1, 135), bool], Tensor[(8, 24), float64], Tensor[(2688), float64], Tensor[(364), float64], Tensor[(84), uint32], Tensor[(11, 2, 7), uint64], Tensor[(154), uint64], Tensor[(7, 5, 3), float64], Tensor[(11, 2, 7), uint64]) */
}

def @func_5596() -> Tensor[(105), uint8] {
  @func_3779() /* ty=Tensor[(105), uint8] */
}

def @func_2980(%var_2969: Tensor[(1, 10, 5), uint64], %var_2970: Tensor[(10, 10, 5), uint64]) -> (Tensor[(10, 10, 5), uint32],) {
  %552 = cast(%var_2969, dtype="uint64") /* ty=Tensor[(1, 10, 5), uint64] */;
  %553 = cast(%var_2970, dtype="uint64") /* ty=Tensor[(10, 10, 5), uint64] */;
  %554 = logical_xor(%552, %553) /* ty=Tensor[(10, 10, 5), uint64] */;
  %555 = cast(%var_2970, dtype="uint32") /* ty=Tensor[(10, 10, 5), uint32] */;
  %556 = shape_of(%554, dtype="int32") /* ty=Tensor[(3), int32] */;
  %557 = cast(%554, dtype="uint32") /* ty=Tensor[(10, 10, 5), uint32] */;
  %558 = dyn.reshape(%555, %556, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %559 = bitwise_and(%557, %558) /* ty=Tensor[(10, 10, 5), uint32] */;
  (%559,)
}

def @func_2614() -> (Tensor[(105), uint8],) {
  %560 = @func_2534() /* ty=(Tensor[(105), uint8],) */;
  %561 = %560.0;
  (%561,)
}

def @func_2930() -> Tensor[(105), uint8] {
  @func_2928() /* ty=Tensor[(105), uint8] */
}

def @func_6334() -> (Tensor[(7, 5, 3), float32],) {
  @func_6332() /* ty=(Tensor[(7, 5, 3), float32],) */
}

def @func_3892() -> (Tensor[(2160), float32],) {
  @func_3890() /* ty=(Tensor[(2160), float32],) */
}

def @func_2928() -> Tensor[(105), uint8] {
  %562 = @func_1789() /* ty=(Tensor[(15, 9, 16), float64], Tensor[(7, 5, 3), bool], Tensor[(105), uint8]) */;
  %562.2
}

def @func_3114(%var_3113: float32) -> (Tensor[(7, 5, 3), float32], Tensor[(4, 15, 8), float32], Tensor[(480), float32], Tensor[(2160), float32], Tensor[(15, 9, 16), float32], Tensor[(7, 5, 3), float64], Tensor[(7, 5, 3), float64]) {
  %593 = fn (%var_3091: float32) -> (Tensor[(7, 5, 3), float32], Tensor[(4, 15, 8), float32], Tensor[(480), float32], Tensor[(2160), float32], Tensor[(15, 9, 16), float32], Tensor[(7, 5, 3), float64], Tensor[(7, 5, 3), float64]) {
    %563 = @func_2682() /* ty=(Tensor[(7, 5, 3), float32], Tensor[(105), uint8], Tensor[(84), uint32]) */;
    %564 = cast(%var_3091, dtype="float32") /* ty=float32 */;
    %565 = cast(meta[relay.Constant][25] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
    %566 = @func_2557() /* ty=Tensor[(7, 5, 3), float32] */;
    %567 = cast(%566, dtype="float32") /* ty=Tensor[(7, 5, 3), float32] */;
    %568 = log2(%567) /* ty=Tensor[(7, 5, 3), float32] */;
    %569 = cast(%568, dtype="uint8") /* ty=Tensor[(7, 5, 3), uint8] */;
    %570 = cast(meta[relay.Constant][26] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
    %571 = reshape(%564, newshape=[]) /* ty=float32 */;
    %572 = reshape(%565, newshape=[480]) /* ty=Tensor[(480), float32] */;
    %573 = reshape(%569, newshape=[105]) /* ty=Tensor[(105), uint8] */;
    %574 = reshape(%570, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
    %575 = @func_1053(%571, %572, %573, %574) /* ty=(Tensor[(4, 15, 8), float32], Tensor[(480), float32], Tensor[(15, 9, 16), float32], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(13, 1, 14), float32], Tensor[(15, 9, 16), float32]) */;
    %576 = cast(meta[relay.Constant][26] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
    %577 = cast(meta[relay.Constant][26] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
    %578 = reshape(%576, newshape=[15, 9, 16]) /* ty=Tensor[(15, 9, 16), float32] */;
    %579 = reshape(%577, newshape=[15, 9, 16]) /* ty=Tensor[(15, 9, 16), float32] */;
    %580 = @func_622(%578, %579) /* ty=(Tensor[(15, 9, 16), float32],) */;
    %581 = cast(%566, dtype="uint64") /* ty=Tensor[(7, 5, 3), uint64] */;
    %582 = shape_of(%568, dtype="int32") /* ty=Tensor[(3), int32] */;
    %583 = cast(%568, dtype="uint64") /* ty=Tensor[(7, 5, 3), uint64] */;
    %584 = dyn.reshape(%581, %582, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %585 = left_shift(%583, %584) /* ty=Tensor[(7, 5, 3), uint64] */;
    %586 = cast(%585, dtype="float64") /* ty=Tensor[(7, 5, 3), float64] */;
    %587 = cast(%var_3091, dtype="float64") /* ty=float64 */;
    %588 = %563.0;
    %589 = %575.0;
    %590 = %580.0;
    %591 = @func_2065() /* ty=Tensor[(7, 5, 3), float64] */;
    %592 = minimum(%586, %587) /* ty=Tensor[(7, 5, 3), float64] */;
    (%588, %589, meta[relay.Constant][25] /* ty=Tensor[(480), float32] */, meta[relay.Constant][26] /* ty=Tensor[(2160), float32] */, %590, %591, %592)
  };
  %593(%var_3113) /* ty=(Tensor[(7, 5, 3), float32], Tensor[(4, 15, 8), float32], Tensor[(480), float32], Tensor[(2160), float32], Tensor[(15, 9, 16), float32], Tensor[(7, 5, 3), float64], Tensor[(7, 5, 3), float64]) */
}

def @func_6249() -> (Tensor[(15, 9, 16), float64], Tensor[(105), uint8]) {
  %594 = @func_2937() /* ty=(Tensor[(15, 9, 16), float64],) */;
  %595 = %594.0;
  %596 = cast(%595, dtype="float64") /* ty=Tensor[(15, 9, 16), float64] */;
  %597 = cast(%595, dtype="float32") /* ty=Tensor[(15, 9, 16), float32] */;
  %598 = reshape(%597, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
  %599 = @func_4954(%598) /* ty=(Tensor[(105), uint8], Tensor[(480), float32], Tensor[(2160), float32]) */;
  %600 = log2(%596) /* ty=Tensor[(15, 9, 16), float64] */;
  %601 = %599.0;
  (%600, %601)
}

def @func_2461(%var_2459: Tensor[(16, 2, 4), float64], %var_2460: Tensor[(16, 2, 4), float64]) -> (Tensor[(16, 2, 4), uint64], Tensor[(16, 2, 4), float64]) {
  %619 = fn (%var_2424: Tensor[(16, 2, 4), float64], %var_2425: Tensor[(16, 2, 4), float64]) -> (Tensor[(16, 2, 4), uint64], Tensor[(16, 2, 4), float64]) {
    %602 = cast(%var_2425, dtype="float64") /* ty=Tensor[(16, 2, 4), float64] */;
    %603 = log10(%602) /* ty=Tensor[(16, 2, 4), float64] */;
    %604 = cast(%var_2425, dtype="float64") /* ty=Tensor[(16, 2, 4), float64] */;
    %605 = shape_of(%var_2424, dtype="int32") /* ty=Tensor[(3), int32] */;
    %606 = cast(%var_2424, dtype="float64") /* ty=Tensor[(16, 2, 4), float64] */;
    %607 = dyn.reshape(%604, %605, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %608 = floor_divide(%606, %607) /* ty=Tensor[(16, 2, 4), float64] */;
    %609 = cast(%608, dtype="uint64") /* ty=Tensor[(16, 2, 4), uint64] */;
    %610 = shape_of(%603, dtype="int32") /* ty=Tensor[(3), int32] */;
    %611 = cast(%603, dtype="uint64") /* ty=Tensor[(16, 2, 4), uint64] */;
    %612 = dyn.reshape(%609, %610, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %613 = cast(%603, dtype="float64") /* ty=Tensor[(16, 2, 4), float64] */;
    %614 = shape_of(%608, dtype="int32") /* ty=Tensor[(3), int32] */;
    %615 = cast(%608, dtype="float64") /* ty=Tensor[(16, 2, 4), float64] */;
    %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %617 = add(%611, %612) /* ty=Tensor[(16, 2, 4), uint64] */;
    %618 = divide(%615, %616) /* ty=Tensor[(16, 2, 4), float64] */;
    (%617, %618)
  };
  %619(%var_2459, %var_2460) /* ty=(Tensor[(16, 2, 4), uint64], Tensor[(16, 2, 4), float64]) */
}

def @func_1739() -> (Tensor[(14, 7, 7), float32], Tensor[(15, 9, 16), float64], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(15, 9, 16), float32]) {
  %620 = cast(meta[relay.Constant][27] /* ty=Tensor[(14, 7, 7), float32] */, dtype="float32") /* ty=Tensor[(14, 7, 7), float32] */;
  %621 = cast(meta[relay.Constant][28] /* ty=Tensor[(105), uint8] */, dtype="uint8") /* ty=Tensor[(105), uint8] */;
  %622 = cast(meta[relay.Constant][28] /* ty=Tensor[(105), uint8] */, dtype="uint8") /* ty=Tensor[(105), uint8] */;
  %623 = cast(meta[relay.Constant][29] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %624 = reshape(%621, newshape=[7, 5, 3]) /* ty=Tensor[(7, 5, 3), uint8] */;
  %625 = reshape(%622, newshape=[7, 5, 3]) /* ty=Tensor[(7, 5, 3), uint8] */;
  %626 = reshape(%623, newshape=[15, 9, 16]) /* ty=Tensor[(15, 9, 16), float32] */;
  %627 = @func_880(%624, %625, %626) /* ty=(Tensor[(7, 5, 3), bool], Tensor[(2160), float32], Tensor[(7, 5, 3), float32], Tensor[(15, 9, 16), float32], Tensor[(15, 9, 16), float64], Tensor[(15, 9, 16), float32]) */;
  %628 = cast(meta[relay.Constant][29] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %629 = cast(meta[relay.Constant][29] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %630 = reshape(%628, newshape=[15, 9, 16]) /* ty=Tensor[(15, 9, 16), float32] */;
  %631 = reshape(%629, newshape=[15, 9, 16]) /* ty=Tensor[(15, 9, 16), float32] */;
  %632 = @func_622(%630, %631) /* ty=(Tensor[(15, 9, 16), float32],) */;
  %633 = erf(%620) /* ty=Tensor[(14, 7, 7), float32] */;
  %634 = %627.4;
  %635 = %632.0;
  (%633, %634, meta[relay.Constant][28] /* ty=Tensor[(105), uint8] */, meta[relay.Constant][29] /* ty=Tensor[(2160), float32] */, %635)
}

def @func_4329() -> (Tensor[(15, 9, 16), float32], Tensor[(105), uint8], Tensor[(2160), float32]) {
  %636 = @func_3643() /* ty=Tensor[(15, 9, 16), float64] */;
  %637 = cast(%636, dtype="float32") /* ty=Tensor[(15, 9, 16), float32] */;
  %638 = @func_2534() /* ty=(Tensor[(105), uint8],) */;
  %639 = @func_2819() /* ty=(Tensor[(15, 9, 16), float64], Tensor[(2160), float32]) */;
  %640 = sigmoid(%637) /* ty=Tensor[(15, 9, 16), float32] */;
  %641 = %638.0;
  %642 = %639.1;
  (%640, %641, %642)
}

def @func_3644() -> Tensor[(15, 9, 16), float64] {
  %644 = fn () -> Tensor[(15, 9, 16), float64] {
    %643 = @func_1789() /* ty=(Tensor[(15, 9, 16), float64], Tensor[(7, 5, 3), bool], Tensor[(105), uint8]) */;
    %643.0
  };
  %644() /* ty=Tensor[(15, 9, 16), float64] */
}

def @func_4379() -> (Tensor[(105), uint8], Tensor[(105), uint8]) {
  %645 = @func_2682() /* ty=(Tensor[(7, 5, 3), float32], Tensor[(105), uint8], Tensor[(84), uint32]) */;
  %646 = %645.1;
  %647 = @func_2928() /* ty=Tensor[(105), uint8] */;
  (%646, %647)
}

def @func_4709() -> Tensor[(11, 8, 12), int64] {
  @func_4707() /* ty=Tensor[(11, 8, 12), int64] */
}

def @func_3404(%var_3402: Tensor[(375), uint16], %var_3403: Tensor[(2160), float32]) -> (Tensor[(105), uint8], Tensor[(5, 15, 5), bool], Tensor[(375), uint16], Tensor[(2160), float32]) {
  %662 = fn (%var_3388: Tensor[(375), uint16], %var_3389: Tensor[(2160), float32]) -> (Tensor[(105), uint8], Tensor[(5, 15, 5), bool], Tensor[(375), uint16], Tensor[(2160), float32]) {
    %648 = @func_2614() /* ty=(Tensor[(105), uint8],) */;
    %649 = cast(%var_3388, dtype="uint16") /* ty=Tensor[(375), uint16] */;
    %650 = cast(%var_3388, dtype="uint16") /* ty=Tensor[(375), uint16] */;
    %651 = %648.0;
    %652 = cast(%651, dtype="uint8") /* ty=Tensor[(105), uint8] */;
    %653 = cast(%var_3389, dtype="float32") /* ty=Tensor[(2160), float32] */;
    %654 = reshape(%649, newshape=[5, 15, 5]) /* ty=Tensor[(5, 15, 5), uint16] */;
    %655 = reshape(%650, newshape=[5, 15, 5]) /* ty=Tensor[(5, 15, 5), uint16] */;
    %656 = reshape(%652, newshape=[105]) /* ty=Tensor[(105), uint8] */;
    %657 = reshape(%653, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
    %658 = @func_2743(%654, %655, %656, %657) /* ty=(Tensor[(5, 15, 5), bool], Tensor[(105), uint8], Tensor[(105), uint8], Tensor[(2160), float32]) */;
    %659 = cast(%var_3389, dtype="float32") /* ty=Tensor[(2160), float32] */;
    %660 = %658.0;
    %661 = erf(%659) /* ty=Tensor[(2160), float32] */;
    (%651, %660, %var_3388, %661)
  };
  %662(%var_3402, %var_3403) /* ty=(Tensor[(105), uint8], Tensor[(5, 15, 5), bool], Tensor[(375), uint16], Tensor[(2160), float32]) */
}

def @func_4351() -> Tensor[(105), uint8] {
  @func_4349() /* ty=Tensor[(105), uint8] */
}

def @func_3369(%var_3368: Tensor[(16, 1, 2), float32]) -> (Tensor[(16, 1, 2), float32], Tensor[(105), uint8], Tensor[(7, 5, 3), float64]) {
  %668 = fn (%var_3353: Tensor[(16, 1, 2), float32]) -> (Tensor[(16, 1, 2), float32], Tensor[(105), uint8], Tensor[(7, 5, 3), float64]) {
    %663 = cast(%var_3353, dtype="float32") /* ty=Tensor[(16, 1, 2), float32] */;
    %664 = @func_3202() /* ty=(Tensor[(105), uint8],) */;
    %665 = tan(%663) /* ty=Tensor[(16, 1, 2), float32] */;
    %666 = %664.0;
    %667 = @func_2138() /* ty=Tensor[(7, 5, 3), float64] */;
    (%665, %666, %667)
  };
  %668(%var_3368) /* ty=(Tensor[(16, 1, 2), float32], Tensor[(105), uint8], Tensor[(7, 5, 3), float64]) */
}

def @func_5975(%var_5973: Tensor[(16, 16, 4), float32], %var_5974: Tensor[(16, 16, 4), float32]) -> (Tensor[(16, 16, 4), bool], Tensor[(2160), float32]) {
  %676 = fn (%var_5947: Tensor[(16, 16, 4), float32], %var_5948: Tensor[(16, 16, 4), float32]) -> (Tensor[(16, 16, 4), bool], Tensor[(2160), float32]) {
    %669 = cast(%var_5948, dtype="bool") /* ty=Tensor[(16, 16, 4), bool] */;
    %670 = shape_of(%var_5947, dtype="int32") /* ty=Tensor[(3), int32] */;
    %671 = cast(%var_5947, dtype="bool") /* ty=Tensor[(16, 16, 4), bool] */;
    %672 = dyn.reshape(%669, %670, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %673 = @func_3890() /* ty=(Tensor[(2160), float32],) */;
    %674 = equal(%671, %672) /* ty=Tensor[(16, 16, 4), bool] */;
    %675 = %673.0;
    (%674, %675)
  };
  %676(%var_5973, %var_5974) /* ty=(Tensor[(16, 16, 4), bool], Tensor[(2160), float32]) */
}

def @func_6081(%var_6069: Tensor[(50), uint64]) -> (Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(50), uint64], Tensor[(50), uint64]) {
  %677 = @func_2534() /* ty=(Tensor[(105), uint8],) */;
  %678 = @func_4329() /* ty=(Tensor[(15, 9, 16), float32], Tensor[(105), uint8], Tensor[(2160), float32]) */;
  %679 = cast(%var_6069, dtype="uint64") /* ty=Tensor[(50), uint64] */;
  %680 = reshape(%679, newshape=[50]) /* ty=Tensor[(50), uint64] */;
  %681 = @func_4923(%680) /* ty=(Tensor[(15, 9, 16), float64], Tensor[(105), uint8], Tensor[(1386), uint8], Tensor[(50), uint64], Tensor[(15, 9, 16), float64]) */;
  %682 = %677.0;
  %683 = %678.2;
  %684 = %681.3;
  (%682, %683, %684, %var_6069)
}

def @func_5804(%var_5801: Tensor[(182, 2), float64], %var_5802: Tensor[(192), float64], %var_5803: Tensor[(2688), float64]) -> (Tensor[(7, 5, 3), float32], Tensor[(14, 2, 13), float64], Tensor[(182, 2), float64], Tensor[(84), uint32], Tensor[(192), float64], Tensor[(2688), float64], Tensor[(84), uint32], Tensor[(7, 5, 3), float32], Tensor[(105), uint8], Tensor[(105), uint8], Tensor[(11, 8, 12), int64], Tensor[(2160), float32]) {
  @func_5799(%var_5801, %var_5802, %var_5803) /* ty=(Tensor[(7, 5, 3), float32], Tensor[(14, 2, 13), float64], Tensor[(182, 2), float64], Tensor[(84), uint32], Tensor[(192), float64], Tensor[(2688), float64], Tensor[(84), uint32], Tensor[(7, 5, 3), float32], Tensor[(105), uint8], Tensor[(105), uint8], Tensor[(11, 8, 12), int64], Tensor[(2160), float32]) */
}

def @func_3826() -> Tensor[(15, 9, 16), float64] {
  @func_3643() /* ty=Tensor[(15, 9, 16), float64] */
}

def @func_6332() -> (Tensor[(7, 5, 3), float32],) {
  %685 = @func_4400() /* ty=(Tensor[(7, 5, 3), float32],) */;
  %686 = %685.0;
  (%686,)
}

def @func_3595() -> (Tensor[(14, 2, 3), float32],) {
  %687 = cast(meta[relay.Constant][30] /* ty=Tensor[(14, 2, 3), float32] */, dtype="float32") /* ty=Tensor[(14, 2, 3), float32] */;
  %688 = acosh(%687) /* ty=Tensor[(14, 2, 3), float32] */;
  (%688,)
}

def @func_625(%var_623: Tensor[(15, 9, 16), float32], %var_624: Tensor[(15, 9, 16), float32]) -> (Tensor[(15, 9, 16), float32],) {
  %694 = fn (%var_616: Tensor[(15, 9, 16), float32], %var_617: Tensor[(15, 9, 16), float32]) -> (Tensor[(15, 9, 16), float32],) {
    %689 = cast(%var_617, dtype="float32") /* ty=Tensor[(15, 9, 16), float32] */;
    %690 = shape_of(%var_616, dtype="int32") /* ty=Tensor[(3), int32] */;
    %691 = cast(%var_616, dtype="float32") /* ty=Tensor[(15, 9, 16), float32] */;
    %692 = dyn.reshape(%689, %690, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %693 = floor_mod(%691, %692) /* ty=Tensor[(15, 9, 16), float32] */;
    (%693,)
  };
  %694(%var_623, %var_624) /* ty=(Tensor[(15, 9, 16), float32],) */
}

def @func_5827() -> (Tensor[(14, 2, 3), float32], Tensor[(7, 5, 3), float64]) {
  %695 = @func_5624() /* ty=(Tensor[(105), uint8], Tensor[(14, 2, 3), float32], Tensor[(7, 5, 3), float64]) */;
  %696 = @func_5490() /* ty=(Tensor[(7, 5, 3), float64], Tensor[(15, 9, 16), float64], Tensor[(7, 5, 3), float64]) */;
  %697 = %695.1;
  %698 = %696.2;
  (%697, %698)
}

def @func_5829() -> (Tensor[(14, 2, 3), float32], Tensor[(7, 5, 3), float64]) {
  @func_5827() /* ty=(Tensor[(14, 2, 3), float32], Tensor[(7, 5, 3), float64]) */
}

def @func_6024(%var_6023: Tensor[(4, 14, 8), float32]) -> Tensor[(4, 14, 8), float32] {
  %701 = fn (%var_6012: Tensor[(4, 14, 8), float32]) -> Tensor[(4, 14, 8), float32] {
    %699 = cast(meta[relay.Constant][31] /* ty=Tensor[(4, 1, 8), float32] */, dtype="float32") /* ty=Tensor[(4, 1, 8), float32] */;
    %700 = cast(%var_6012, dtype="float32") /* ty=Tensor[(4, 14, 8), float32] */;
    mod(%699, %700) /* ty=Tensor[(4, 14, 8), float32] */
  };
  %701(%var_6023) /* ty=Tensor[(4, 14, 8), float32] */
}

def @func_5088(%var_5023: Tensor[(7, 5, 3), float64]) -> (Tensor[(7, 5, 3), bool], Tensor[(7, 5, 3), float32]) {
  %702 = @func_2065() /* ty=Tensor[(7, 5, 3), float64] */;
  %703 = cast(%var_5023, dtype="float32") /* ty=Tensor[(7, 5, 3), float32] */;
  %704 = shape_of(%702, dtype="int32") /* ty=Tensor[(3), int32] */;
  %705 = cast(%702, dtype="float32") /* ty=Tensor[(7, 5, 3), float32] */;
  %706 = dyn.reshape(%703, %704, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %707 = floor_mod(%705, %706) /* ty=Tensor[(7, 5, 3), float32] */;
  %708 = cast(%702, dtype="bool") /* ty=Tensor[(7, 5, 3), bool] */;
  %709 = shape_of(%707, dtype="int32") /* ty=Tensor[(3), int32] */;
  %710 = cast(%707, dtype="bool") /* ty=Tensor[(7, 5, 3), bool] */;
  %711 = dyn.reshape(%708, %709, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %712 = cast(%702, dtype="float32") /* ty=Tensor[(7, 5, 3), float32] */;
  %713 = acosh(%712) /* ty=Tensor[(7, 5, 3), float32] */;
  %714 = cast(%713, dtype="float32") /* ty=Tensor[(7, 5, 3), float32] */;
  %715 = not_equal(%710, %711) /* ty=Tensor[(7, 5, 3), bool] */;
  %716 = asin(%714) /* ty=Tensor[(7, 5, 3), float32] */;
  (%715, %716)
}

def @func_2682() -> (Tensor[(7, 5, 3), float32], Tensor[(105), uint8], Tensor[(84), uint32]) {
  %717 = @func_2557() /* ty=Tensor[(7, 5, 3), float32] */;
  %718 = cast(%717, dtype="float32") /* ty=Tensor[(7, 5, 3), float32] */;
  %719 = cast(meta[relay.Constant][32] /* ty=Tensor[(84), uint32] */, dtype="uint32") /* ty=Tensor[(84), uint32] */;
  %720 = reshape(%719, newshape=[84]) /* ty=Tensor[(84), uint32] */;
  %721 = @func_2306(%720) /* ty=(Tensor[(105), uint8], Tensor[(4, 7, 3), float64], Tensor[(84), uint32], Tensor[(15, 9, 16), bool]) */;
  %722 = tan(%718) /* ty=Tensor[(7, 5, 3), float32] */;
  %723 = %721.0;
  (%722, %723, meta[relay.Constant][32] /* ty=Tensor[(84), uint32] */)
}

def @func_6251() -> (Tensor[(15, 9, 16), float64], Tensor[(105), uint8]) {
  @func_6249() /* ty=(Tensor[(15, 9, 16), float64], Tensor[(105), uint8]) */
}

def @func_4990() -> (Tensor[(105), uint8], Tensor[(7, 5, 3), float32], Tensor[(105), uint8]) {
  %728 = fn () -> (Tensor[(105), uint8], Tensor[(7, 5, 3), float32], Tensor[(105), uint8]) {
    %724 = @func_2534() /* ty=(Tensor[(105), uint8],) */;
    %725 = @func_3779() /* ty=Tensor[(105), uint8] */;
    %726 = @func_2557() /* ty=Tensor[(7, 5, 3), float32] */;
    %727 = %724.0;
    (%725, %726, %727)
  };
  %728() /* ty=(Tensor[(105), uint8], Tensor[(7, 5, 3), float32], Tensor[(105), uint8]) */
}

def @func_4707() -> Tensor[(11, 8, 12), int64] {
  %729 = cast(meta[relay.Constant][34] /* ty=Tensor[(11, 8, 12), int64] */, dtype="int64") /* ty=Tensor[(11, 8, 12), int64] */;
  %730 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(11, 8, 12), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %731 = cast(meta[relay.Constant][33] /* ty=Tensor[(11, 8, 12), int64] */, dtype="int64") /* ty=Tensor[(11, 8, 12), int64] */;
  %732 = dyn.reshape(%729, %730, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  left_shift(%731, %732) /* ty=Tensor[(11, 8, 12), int64] */
}

def @func_5321() -> (Tensor[(15, 9, 16), float64], Tensor[(7, 5, 3), float32]) {
  %733 = @func_2937() /* ty=(Tensor[(15, 9, 16), float64],) */;
  %734 = @func_1824() /* ty=(Tensor[(7, 5, 3), float64], Tensor[(7, 5, 3), float32]) */;
  %735 = %733.0;
  %736 = %734.1;
  (%735, %736)
}

def @main() -> (Tensor[(105), uint8], Tensor[(15, 9, 16), float32], Tensor[(15, 9, 16), float32]) {
  %737 = @func_4331() /* ty=(Tensor[(15, 9, 16), float32], Tensor[(105), uint8], Tensor[(2160), float32]) */;
  %738 = @func_4331() /* ty=(Tensor[(15, 9, 16), float32], Tensor[(105), uint8], Tensor[(2160), float32]) */;
  %739 = @func_3826() /* ty=Tensor[(15, 9, 16), float64] */;
  %740 = cast(%739, dtype="float32") /* ty=Tensor[(15, 9, 16), float32] */;
  %741 = %737.1;
  %742 = %738.0;
  %743 = acos(%740) /* ty=Tensor[(15, 9, 16), float32] */;
  (%741, %742, %743)
}

def @func_2937() -> (Tensor[(15, 9, 16), float64],) {
  %744 = @func_1789() /* ty=(Tensor[(15, 9, 16), float64], Tensor[(7, 5, 3), bool], Tensor[(105), uint8]) */;
  %745 = %744.0;
  (%745,)
}

def @func_6084(%var_6082: Tensor[(50), uint64]) -> (Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(50), uint64], Tensor[(50), uint64]) {
  @func_6081(%var_6082) /* ty=(Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(50), uint64], Tensor[(50), uint64]) */
}

def @func_2536() -> (Tensor[(105), uint8],) {
  @func_2534() /* ty=(Tensor[(105), uint8],) */
}

def @func_5091(%var_5089: Tensor[(7, 5, 3), float64]) -> (Tensor[(7, 5, 3), bool], Tensor[(7, 5, 3), float32]) {
  @func_5088(%var_5089) /* ty=(Tensor[(7, 5, 3), bool], Tensor[(7, 5, 3), float32]) */
}

def @func_4042(%var_4039: Tensor[(6, 2, 8), uint8], %var_4040: Tensor[(6, 2, 8), uint8], %var_4041: float32) -> (Tensor[(6, 2, 8), uint8], Tensor[(15, 9, 16), float64], Tensor[(105), uint8], float32, Tensor[(650), float32], Tensor[(480), float32], Tensor[(7, 5, 3), float32], Tensor[(14, 2, 3), float32], Tensor[(84), uint32]) {
  %765 = fn (%var_3965: Tensor[(6, 2, 8), uint8], %var_3966: Tensor[(6, 2, 8), uint8], %var_4008: float32) -> (Tensor[(6, 2, 8), uint8], Tensor[(15, 9, 16), float64], Tensor[(105), uint8], float32, Tensor[(650), float32], Tensor[(480), float32], Tensor[(7, 5, 3), float32], Tensor[(14, 2, 3), float32], Tensor[(84), uint32]) {
    %746 = cast(%var_3966, dtype="uint8") /* ty=Tensor[(6, 2, 8), uint8] */;
    %747 = shape_of(%var_3965, dtype="int32") /* ty=Tensor[(3), int32] */;
    %748 = cast(%var_3965, dtype="uint8") /* ty=Tensor[(6, 2, 8), uint8] */;
    %749 = dyn.reshape(%746, %747, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %750 = cast(%var_4008, dtype="float32") /* ty=float32 */;
    %751 = cast(meta[relay.Constant][35] /* ty=Tensor[(650), float32] */, dtype="float32") /* ty=Tensor[(650), float32] */;
    %752 = cast(meta[relay.Constant][36] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
    %753 = reshape(%750, newshape=[]) /* ty=float32 */;
    %754 = reshape(%751, newshape=[10, 5, 13]) /* ty=Tensor[(10, 5, 13), float32] */;
    %755 = reshape(%752, newshape=[480]) /* ty=Tensor[(480), float32] */;
    %756 = @func_3749(%753, %754, %755) /* ty=(Tensor[(15, 9, 16), float64], Tensor[(10, 5, 13), uint32], Tensor[(10, 5, 13), int32], Tensor[(15, 9, 16), float64], Tensor[(105), uint8], Tensor[(15, 9, 16), float32], Tensor[(480), float32]) */;
    %757 = @func_3595() /* ty=(Tensor[(14, 2, 3), float32],) */;
    %758 = @func_2682() /* ty=(Tensor[(7, 5, 3), float32], Tensor[(105), uint8], Tensor[(84), uint32]) */;
    %759 = logical_xor(%748, %749) /* ty=Tensor[(6, 2, 8), uint8] */;
    %760 = @func_3826() /* ty=Tensor[(15, 9, 16), float64] */;
    %761 = %756.4;
    %762 = @func_2557() /* ty=Tensor[(7, 5, 3), float32] */;
    %763 = %757.0;
    %764 = %758.2;
    (%759, %760, %761, %var_4008, meta[relay.Constant][35] /* ty=Tensor[(650), float32] */, meta[relay.Constant][36] /* ty=Tensor[(480), float32] */, %762, %763, %764)
  };
  %765(%var_4039, %var_4040, %var_4041) /* ty=(Tensor[(6, 2, 8), uint8], Tensor[(15, 9, 16), float64], Tensor[(105), uint8], float32, Tensor[(650), float32], Tensor[(480), float32], Tensor[(7, 5, 3), float32], Tensor[(14, 2, 3), float32], Tensor[(84), uint32]) */
}

def @func_5799(%var_5731: Tensor[(182, 2), float64], %var_5746: Tensor[(192), float64], %var_5747: Tensor[(2688), float64]) -> (Tensor[(7, 5, 3), float32], Tensor[(14, 2, 13), float64], Tensor[(182, 2), float64], Tensor[(84), uint32], Tensor[(192), float64], Tensor[(2688), float64], Tensor[(84), uint32], Tensor[(7, 5, 3), float32], Tensor[(105), uint8], Tensor[(105), uint8], Tensor[(11, 8, 12), int64], Tensor[(2160), float32]) {
  %766 = @func_4400() /* ty=(Tensor[(7, 5, 3), float32],) */;
  %767 = cast(%var_5731, dtype="float64") /* ty=Tensor[(182, 2), float64] */;
  %768 = reshape(%767, newshape=[14, 2, 13]) /* ty=Tensor[(14, 2, 13), float64] */;
  %769 = @func_3328(%768) /* ty=(Tensor[(14, 2, 13), float64],) */;
  %770 = cast(%var_5746, dtype="float64") /* ty=Tensor[(192), float64] */;
  %771 = cast(%var_5747, dtype="float64") /* ty=Tensor[(2688), float64] */;
  %772 = cast(%var_5731, dtype="float64") /* ty=Tensor[(182, 2), float64] */;
  %773 = cast(meta[relay.Constant][37] /* ty=Tensor[(84), uint32] */, dtype="uint32") /* ty=Tensor[(84), uint32] */;
  %774 = reshape(%770, newshape=[1, 16, 12]) /* ty=Tensor[(1, 16, 12), float64] */;
  %775 = reshape(%771, newshape=[14, 16, 12]) /* ty=Tensor[(14, 16, 12), float64] */;
  %776 = reshape(%772, newshape=[364]) /* ty=Tensor[(364), float64] */;
  %777 = reshape(%773, newshape=[84]) /* ty=Tensor[(84), uint32] */;
  %778 = @func_3487(%774, %775, %776, %777) /* ty=(Tensor[(3, 9, 5), uint64], Tensor[(1, 135), bool], Tensor[(14, 16, 12), uint64], Tensor[(14, 2, 13), float64], Tensor[(364), float64], Tensor[(14, 16, 12), float32], Tensor[(4, 7, 3), float64], Tensor[(84), uint32]) */;
  %779 = @func_5321() /* ty=(Tensor[(15, 9, 16), float64], Tensor[(7, 5, 3), float32]) */;
  %780 = @func_3202() /* ty=(Tensor[(105), uint8],) */;
  %781 = @func_5624() /* ty=(Tensor[(105), uint8], Tensor[(14, 2, 3), float32], Tensor[(7, 5, 3), float64]) */;
  %782 = @func_1739() /* ty=(Tensor[(14, 7, 7), float32], Tensor[(15, 9, 16), float64], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(15, 9, 16), float32]) */;
  %783 = %766.0;
  %784 = %769.0;
  %785 = %778.7;
  %786 = %779.1;
  %787 = %780.0;
  %788 = %781.0;
  %789 = @func_4707() /* ty=Tensor[(11, 8, 12), int64] */;
  %790 = %782.3;
  (%783, %784, %var_5731, %785, %var_5746, %var_5747, meta[relay.Constant][37] /* ty=Tensor[(84), uint32] */, %786, %787, %788, %789, %790)
}

def @func_79(%var_77: Tensor[(3, 9, 5), bool], %var_78: Tensor[(3, 9, 5), bool]) -> (Tensor[(3, 9, 5), uint64], Tensor[(3, 9, 5), bool], Tensor[(3, 9, 5), float64]) {
  %811 = fn (%var_28: Tensor[(3, 9, 5), bool], %var_50: Tensor[(3, 9, 5), bool]) -> (Tensor[(3, 9, 5), uint64], Tensor[(3, 9, 5), bool], Tensor[(3, 9, 5), float64]) {
    %791 = cast(%var_50, dtype="uint64") /* ty=Tensor[(3, 9, 5), uint64] */;
    %792 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(3, 9, 5), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %793 = cast(meta[relay.Constant][38] /* ty=Tensor[(3, 9, 5), bool] */, dtype="uint64") /* ty=Tensor[(3, 9, 5), uint64] */;
    %794 = dyn.reshape(%791, %792, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %795 = cast(%var_50, dtype="bool") /* ty=Tensor[(3, 9, 5), bool] */;
    %796 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(3, 9, 5), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %797 = cast(meta[relay.Constant][38] /* ty=Tensor[(3, 9, 5), bool] */, dtype="bool") /* ty=Tensor[(3, 9, 5), bool] */;
    %798 = dyn.reshape(%795, %796, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %799 = cast(%var_28, dtype="bool") /* ty=Tensor[(3, 9, 5), bool] */;
    %800 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(3, 9, 5), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %801 = cast(meta[relay.Constant][38] /* ty=Tensor[(3, 9, 5), bool] */, dtype="bool") /* ty=Tensor[(3, 9, 5), bool] */;
    %802 = dyn.reshape(%799, %800, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %803 = logical_and(%801, %802) /* ty=Tensor[(3, 9, 5), bool] */;
    %804 = cast(%803, dtype="float64") /* ty=Tensor[(3, 9, 5), float64] */;
    %805 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(3, 9, 5), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %806 = cast(meta[relay.Constant][38] /* ty=Tensor[(3, 9, 5), bool] */, dtype="float64") /* ty=Tensor[(3, 9, 5), float64] */;
    %807 = dyn.reshape(%804, %805, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %808 = maximum(%793, %794) /* ty=Tensor[(3, 9, 5), uint64] */;
    %809 = less(%797, %798) /* ty=Tensor[(3, 9, 5), bool] */;
    %810 = floor_mod(%806, %807) /* ty=Tensor[(3, 9, 5), float64] */;
    (%808, %809, %810)
  };
  %811(%var_77, %var_78) /* ty=(Tensor[(3, 9, 5), uint64], Tensor[(3, 9, 5), bool], Tensor[(3, 9, 5), float64]) */
}

def @func_885(%var_882: Tensor[(7, 5, 3), uint8], %var_883: Tensor[(7, 5, 3), uint8], %var_884: Tensor[(15, 9, 16), float32]) -> (Tensor[(7, 5, 3), bool], Tensor[(2160), float32], Tensor[(7, 5, 3), float32], Tensor[(15, 9, 16), float32], Tensor[(15, 9, 16), float64], Tensor[(15, 9, 16), float32]) {
  @func_880(%var_882, %var_883, %var_884) /* ty=(Tensor[(7, 5, 3), bool], Tensor[(2160), float32], Tensor[(7, 5, 3), float32], Tensor[(15, 9, 16), float32], Tensor[(15, 9, 16), float64], Tensor[(15, 9, 16), float32]) */
}

def @func_3331(%var_3329: Tensor[(14, 2, 13), float64]) -> (Tensor[(14, 2, 13), float64],) {
  @func_3328(%var_3329) /* ty=(Tensor[(14, 2, 13), float64],) */
}

def @func_3269() -> Tensor[(7, 5, 3), uint16] {
  %818 = fn () -> Tensor[(7, 5, 3), uint16] {
    %812 = @func_1824() /* ty=(Tensor[(7, 5, 3), float64], Tensor[(7, 5, 3), float32]) */;
    %813 = %812.0;
    %814 = cast(meta[relay.Constant][39] /* ty=Tensor[(7, 5, 3), float64] */, dtype="uint16") /* ty=Tensor[(7, 5, 3), uint16] */;
    %815 = shape_of(%813, dtype="int32") /* ty=Tensor[(3), int32] */;
    %816 = cast(%813, dtype="uint16") /* ty=Tensor[(7, 5, 3), uint16] */;
    %817 = dyn.reshape(%814, %815, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    right_shift(%816, %817) /* ty=Tensor[(7, 5, 3), uint16] */
  };
  %818() /* ty=Tensor[(7, 5, 3), uint16] */
}

def @func_3202() -> (Tensor[(105), uint8],) {
  %819 = @func_1739() /* ty=(Tensor[(14, 7, 7), float32], Tensor[(15, 9, 16), float64], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(15, 9, 16), float32]) */;
  %820 = %819.2;
  (%820,)
}

def @func_5323() -> (Tensor[(15, 9, 16), float64], Tensor[(7, 5, 3), float32]) {
  @func_5321() /* ty=(Tensor[(15, 9, 16), float64], Tensor[(7, 5, 3), float32]) */
}

def @func_4926(%var_4924: Tensor[(50), uint64]) -> (Tensor[(15, 9, 16), float64], Tensor[(105), uint8], Tensor[(1386), uint8], Tensor[(50), uint64], Tensor[(15, 9, 16), float64]) {
  @func_4923(%var_4924) /* ty=(Tensor[(15, 9, 16), float64], Tensor[(105), uint8], Tensor[(1386), uint8], Tensor[(50), uint64], Tensor[(15, 9, 16), float64]) */
}

def @func_2819() -> (Tensor[(15, 9, 16), float64], Tensor[(2160), float32]) {
  %821 = @func_1789() /* ty=(Tensor[(15, 9, 16), float64], Tensor[(7, 5, 3), bool], Tensor[(105), uint8]) */;
  %822 = @func_1739() /* ty=(Tensor[(14, 7, 7), float32], Tensor[(15, 9, 16), float64], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(15, 9, 16), float32]) */;
  %823 = %822.3;
  %824 = cast(%823, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %825 = %821.0;
  %826 = log2(%824) /* ty=Tensor[(2160), float32] */;
  (%825, %826)
}

def @func_6383() -> Tensor[(15, 9, 16), float64] {
  %828 = fn () -> Tensor[(15, 9, 16), float64] {
    %827 = @func_1789() /* ty=(Tensor[(15, 9, 16), float64], Tensor[(7, 5, 3), bool], Tensor[(105), uint8]) */;
    %827.0
  };
  %828() /* ty=Tensor[(15, 9, 16), float64] */
}

def @func_2140() -> Tensor[(7, 5, 3), float64] {
  @func_2138() /* ty=Tensor[(7, 5, 3), float64] */
}

def @func_3753(%var_3750: float32, %var_3751: Tensor[(10, 5, 13), float32], %var_3752: Tensor[(480), float32]) -> (Tensor[(15, 9, 16), float64], Tensor[(10, 5, 13), uint32], Tensor[(10, 5, 13), int32], Tensor[(15, 9, 16), float64], Tensor[(105), uint8], Tensor[(15, 9, 16), float32], Tensor[(480), float32]) {
  %857 = fn (%var_3681: float32, %var_3682: Tensor[(10, 5, 13), float32], %var_3747: Tensor[(480), float32]) -> (Tensor[(15, 9, 16), float64], Tensor[(10, 5, 13), uint32], Tensor[(10, 5, 13), int32], Tensor[(15, 9, 16), float64], Tensor[(105), uint8], Tensor[(15, 9, 16), float32], Tensor[(480), float32]) {
    %829 = @func_2937() /* ty=(Tensor[(15, 9, 16), float64],) */;
    %830 = cast(%var_3681, dtype="float32") /* ty=float32 */;
    %831 = cast(%var_3682, dtype="float32") /* ty=Tensor[(10, 5, 13), float32] */;
    %832 = mod(%830, %831) /* ty=Tensor[(10, 5, 13), float32] */;
    %833 = cast(%832, dtype="uint32") /* ty=Tensor[(10, 5, 13), uint32] */;
    %834 = cast(%var_3681, dtype="uint32") /* ty=uint32 */;
    %835 = cast(%var_3682, dtype="float32") /* ty=Tensor[(10, 5, 13), float32] */;
    %836 = acos(%835) /* ty=Tensor[(10, 5, 13), float32] */;
    %837 = cast(%var_3682, dtype="int32") /* ty=Tensor[(10, 5, 13), int32] */;
    %838 = shape_of(%836, dtype="int32") /* ty=Tensor[(3), int32] */;
    %839 = cast(%836, dtype="int32") /* ty=Tensor[(10, 5, 13), int32] */;
    %840 = dyn.reshape(%837, %838, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %841 = @func_2614() /* ty=(Tensor[(105), uint8],) */;
    %842 = cast(%var_3681, dtype="float32") /* ty=float32 */;
    %843 = cast(%var_3747, dtype="float32") /* ty=Tensor[(480), float32] */;
    %844 = %841.0;
    %845 = cast(%844, dtype="uint8") /* ty=Tensor[(105), uint8] */;
    %846 = @func_3643() /* ty=Tensor[(15, 9, 16), float64] */;
    %847 = cast(%846, dtype="float32") /* ty=Tensor[(15, 9, 16), float32] */;
    %848 = reshape(%842, newshape=[]) /* ty=float32 */;
    %849 = reshape(%843, newshape=[480]) /* ty=Tensor[(480), float32] */;
    %850 = reshape(%845, newshape=[105]) /* ty=Tensor[(105), uint8] */;
    %851 = reshape(%847, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
    %852 = @func_1053(%848, %849, %850, %851) /* ty=(Tensor[(4, 15, 8), float32], Tensor[(480), float32], Tensor[(15, 9, 16), float32], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(13, 1, 14), float32], Tensor[(15, 9, 16), float32]) */;
    %853 = %829.0;
    %854 = multiply(%833, %834) /* ty=Tensor[(10, 5, 13), uint32] */;
    %855 = bitwise_and(%839, %840) /* ty=Tensor[(10, 5, 13), int32] */;
    %856 = %852.6;
    (%853, %854, %855, %846, %844, %856, %var_3747)
  };
  %857(%var_3750, %var_3751, %var_3752) /* ty=(Tensor[(15, 9, 16), float64], Tensor[(10, 5, 13), uint32], Tensor[(10, 5, 13), int32], Tensor[(15, 9, 16), float64], Tensor[(105), uint8], Tensor[(15, 9, 16), float32], Tensor[(480), float32]) */
}

def @func_1605(%var_1603: Tensor[(11, 2, 7), uint64], %var_1604: Tensor[(11, 2, 7), uint64]) -> Tensor[(11, 2, 7), uint64] {
  %862 = fn (%var_1591: Tensor[(11, 2, 7), uint64], %var_1592: Tensor[(11, 2, 7), uint64]) -> Tensor[(11, 2, 7), uint64] {
    %858 = cast(%var_1592, dtype="uint64") /* ty=Tensor[(11, 2, 7), uint64] */;
    %859 = shape_of(%var_1591, dtype="int32") /* ty=Tensor[(3), int32] */;
    %860 = cast(%var_1591, dtype="uint64") /* ty=Tensor[(11, 2, 7), uint64] */;
    %861 = dyn.reshape(%858, %859, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    multiply(%860, %861) /* ty=Tensor[(11, 2, 7), uint64] */
  };
  %862(%var_1603, %var_1604) /* ty=Tensor[(11, 2, 7), uint64] */
}

def @func_5017() -> (Tensor[(14, 2, 3), float32],) {
  @func_5015() /* ty=(Tensor[(14, 2, 3), float32],) */
}

def @func_3328(%var_3318: Tensor[(14, 2, 13), float64]) -> (Tensor[(14, 2, 13), float64],) {
  %863 = cast(%var_3318, dtype="float64") /* ty=Tensor[(14, 2, 13), float64] */;
  %864 = asin(%863) /* ty=Tensor[(14, 2, 13), float64] */;
  (%864,)
}

def @func_1059(%var_1055: float32, %var_1056: Tensor[(480), float32], %var_1057: Tensor[(105), uint8], %var_1058: Tensor[(2160), float32]) -> (Tensor[(4, 15, 8), float32], Tensor[(480), float32], Tensor[(15, 9, 16), float32], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(13, 1, 14), float32], Tensor[(15, 9, 16), float32]) {
  @func_1053(%var_1055, %var_1056, %var_1057, %var_1058) /* ty=(Tensor[(4, 15, 8), float32], Tensor[(480), float32], Tensor[(15, 9, 16), float32], Tensor[(105), uint8], Tensor[(2160), float32], Tensor[(13, 1, 14), float32], Tensor[(15, 9, 16), float32]) */
}

def @func_4492(%var_4491: Tensor[(8, 8, 6), float32]) -> (Tensor[(8, 1, 6), float32], Tensor[(8, 8, 6), bool]) {
  %870 = fn (%var_4485: Tensor[(8, 8, 6), float32]) -> (Tensor[(8, 1, 6), float32], Tensor[(8, 8, 6), bool]) {
    %865 = cast(meta[relay.Constant][40] /* ty=Tensor[(8, 1, 6), float32] */, dtype="float32") /* ty=Tensor[(8, 1, 6), float32] */;
    %866 = cast(meta[relay.Constant][40] /* ty=Tensor[(8, 1, 6), float32] */, dtype="bool") /* ty=Tensor[(8, 1, 6), bool] */;
    %867 = cast(%var_4485, dtype="bool") /* ty=Tensor[(8, 8, 6), bool] */;
    %868 = sqrt(%865) /* ty=Tensor[(8, 1, 6), float32] */;
    %869 = less_equal(%866, %867) /* ty=Tensor[(8, 8, 6), bool] */;
    (%868, %869)
  };
  %870(%var_4491) /* ty=(Tensor[(8, 1, 6), float32], Tensor[(8, 8, 6), bool]) */
}

def @func_6134() -> Tensor[(105), uint8] {
  @func_4349() /* ty=Tensor[(105), uint8] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */The type inference pass was unable to infer a type for this expression.
This usually occurs when an operator call is under constrained in some way, check other reported errors for hints of what may of happened.

===================================
note: run with `TVM_BACKTRACE=1` environment variable to display a backtrace.
