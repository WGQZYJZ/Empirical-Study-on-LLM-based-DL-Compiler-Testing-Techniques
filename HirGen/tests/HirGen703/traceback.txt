==========mod==========
#[version = "0.0.5"]
def @func_9571() -> (Tensor[(1152), float32], Tensor[(1152), float32]) {
  %0 = @func_6490() /* ty=(Tensor[(1152), float32],) */;
  %1 = @func_7116() /* ty=Tensor[(1152), float32] */;
  %2 = %0.0;
  (%1, %2)
}

def @func_3945(%var_3928: Tensor[(1404, 2), float32], %var_3940: Tensor[(1404, 2), float64]) -> (Tensor[(1404, 2), float64], Tensor[(1404, 2), bool]) {
  %3 = @func_2713() /* ty=(Tensor[(1152), float32], Tensor[(1404, 1), float32], Tensor[(9, 156), float32]) */;
  %4 = %3.1;
  %5 = cast(%4, dtype="float64") /* ty=Tensor[(1404, 1), float64] */;
  %6 = cast(%var_3928, dtype="float64") /* ty=Tensor[(1404, 2), float64] */;
  %7 = divide(%5, %6) /* ty=Tensor[(1404, 2), float64] */;
  %8 = cast(%7, dtype="float64") /* ty=Tensor[(1404, 2), float64] */;
  %9 = cast(%var_3940, dtype="bool") /* ty=Tensor[(1404, 2), bool] */;
  %10 = shape_of(%7, dtype="int32") /* ty=Tensor[(2), int32] */;
  %11 = cast(%7, dtype="bool") /* ty=Tensor[(1404, 2), bool] */;
  %12 = dyn.reshape(%9, %10, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %13 = asinh(%8) /* ty=Tensor[(1404, 2), float64] */;
  %14 = not_equal(%11, %12) /* ty=Tensor[(1404, 2), bool] */;
  (%13, %14)
}

def @func_8637() -> (Tensor[(250), float64], Tensor[(8, 2, 9), float64]) {
  %15 = @func_6262() /* ty=(Tensor[(250), bool],) */;
  %16 = %15.0;
  %17 = cast(%16, dtype="float64") /* ty=Tensor[(250), float64] */;
  %18 = @func_3280() /* ty=(Tensor[(8, 2, 9), float64],) */;
  %19 = atanh(%17) /* ty=Tensor[(250), float64] */;
  %20 = %18.0;
  (%19, %20)
}

def @func_10048() -> (Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float64], Tensor[(1404), float32], Tensor[(6, 13, 5), bool]) {
  %21 = @func_3584() /* ty=(Tensor[(1152), float32], Tensor[(7, 15, 9), float64], Tensor[(7, 15, 9), float64], Tensor[(8, 2, 9), float64]) */;
  %22 = @func_9695() /* ty=(Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float32], Tensor[(1152), float32], Tensor[(1404), float32]) */;
  %23 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 13, 5), float32] */, dtype="float32") /* ty=Tensor[(6, 13, 5), float32] */;
  %24 = exp(%23) /* ty=Tensor[(6, 13, 5), float32] */;
  %25 = cast(%24, dtype="bool") /* ty=Tensor[(6, 13, 5), bool] */;
  %26 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(6, 13, 5), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %27 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 13, 5), float32] */, dtype="bool") /* ty=Tensor[(6, 13, 5), bool] */;
  %28 = dyn.reshape(%25, %26, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %29 = @func_6398() /* ty=Tensor[(8, 2, 9), float64] */;
  %30 = %21.3;
  %31 = %22.3;
  %32 = greater_equal(%27, %28) /* ty=Tensor[(6, 13, 5), bool] */;
  (%29, %30, %31, %32)
}

def @func_4541(%var_4518: Tensor[(210), float32]) -> (Tensor[(8, 2, 9), float64], Tensor[(3, 5, 14), float32], Tensor[(24), float32], Tensor[(210), float32], Tensor[(5, 15, 16), float32], Tensor[(1200), float32], Tensor[(1404, 1), float32], Tensor[(288), uint32]) {
  %33 = @func_2855() /* ty=(Tensor[(8, 2, 9), float64],) */;
  %34 = cast(meta[relay.Constant][1] /* ty=Tensor[(24), float32] */, dtype="float32") /* ty=Tensor[(24), float32] */;
  %35 = cast(%var_4518, dtype="float32") /* ty=Tensor[(210), float32] */;
  %36 = reshape(%34, newshape=[8, 3, 1]) /* ty=Tensor[(8, 3, 1), float32] */;
  %37 = reshape(%35, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %38 = @func_570(%36, %37) /* ty=(Tensor[(3, 5, 14), float32], Tensor[(8, 3, 210), int32], Tensor[(8, 3, 210), bool], Tensor[(3, 5, 14), float32]) */;
  %39 = cast(meta[relay.Constant][2] /* ty=Tensor[(1200), float32] */, dtype="float32") /* ty=Tensor[(1200), float32] */;
  %40 = reshape(%39, newshape=[5, 15, 16]) /* ty=Tensor[(5, 15, 16), float32] */;
  %41 = @func_2818(%40) /* ty=(Tensor[(5, 15, 16), float32],) */;
  %42 = %33.0;
  %43 = cast(%42, dtype="uint32") /* ty=Tensor[(8, 2, 9), uint32] */;
  %44 = cast(meta[relay.Constant][3] /* ty=Tensor[(288), uint32] */, dtype="uint32") /* ty=Tensor[(288), uint32] */;
  %45 = reshape(%43, newshape=[9, 16, 1]) /* ty=Tensor[(9, 16, 1), uint32] */;
  %46 = reshape(%44, newshape=[9, 16, 2]) /* ty=Tensor[(9, 16, 2), uint32] */;
  %47 = @func_2727(%45, %46) /* ty=(Tensor[(9, 16, 2), bool], Tensor[(1404, 1), float32]) */;
  %48 = %38.0;
  %49 = %41.0;
  %50 = %47.1;
  (%42, %48, meta[relay.Constant][1] /* ty=Tensor[(24), float32] */, %var_4518, %49, meta[relay.Constant][2] /* ty=Tensor[(1200), float32] */, %50, meta[relay.Constant][3] /* ty=Tensor[(288), uint32] */)
}

def @func_4398(%var_4381: Tensor[(1152), float32]) -> (Tensor[(1152), float64], Tensor[(1152), float32]) {
  %51 = @func_2369() /* ty=(Tensor[(1152), float32],) */;
  %52 = %51.0;
  %53 = cast(%var_4381, dtype="float64") /* ty=Tensor[(1152), float64] */;
  %54 = shape_of(%52, dtype="int32") /* ty=Tensor[(1), int32] */;
  %55 = cast(%52, dtype="float64") /* ty=Tensor[(1152), float64] */;
  %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?), float64] */;
  %57 = @func_3260() /* ty=(Tensor[(1152), float32],) */;
  %58 = divide(%55, %56) /* ty=Tensor[(1152), float64] */;
  %59 = %57.0;
  (%58, %59)
}

def @func_11112() -> (Tensor[(6, 5, 11), float64], Tensor[(1404), float32]) {
  %60 = @func_8248() /* ty=(Tensor[(6, 5, 11), float64], Tensor[(1152), float32], Tensor[(6, 5, 11), bool]) */;
  %61 = @func_7493() /* ty=(Tensor[(1404), float32], Tensor[(6, 15, 6), bool]) */;
  %62 = %60.0;
  %63 = %61.0;
  (%62, %63)
}

def @func_11762() -> (Tensor[(8, 2, 9), float64],) {
  %64 = @func_4496() /* ty=(Tensor[(1152), float32], Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64], Tensor[(1404), float32]) */;
  %65 = %64.2;
  (%65,)
}

def @func_10716() -> Tensor[(8, 2, 9), float64] {
  @func_6398() /* ty=Tensor[(8, 2, 9), float64] */
}

def @func_6415() -> (Tensor[(1152), float32],) {
  %66 = @func_2713() /* ty=(Tensor[(1152), float32], Tensor[(1404, 1), float32], Tensor[(9, 156), float32]) */;
  %67 = %66.0;
  (%67,)
}

def @func_8741() -> Tensor[(8, 2, 9), float32] {
  %68 = @func_4496() /* ty=(Tensor[(1152), float32], Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64], Tensor[(1404), float32]) */;
  %68.1
}

def @func_11122() -> (Tensor[(1404), float32],) {
  %69 = @func_4080() /* ty=(Tensor[(1152), float32], Tensor[(8, 2, 9), float32], Tensor[(16, 12, 6), float64], Tensor[(1404), float32]) */;
  %70 = %69.3;
  (%70,)
}

def @func_11418() -> (Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64]) {
  %71 = @func_5248() /* ty=(Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float32]) */;
  %72 = @func_3005() /* ty=(Tensor[(8, 2, 9), float64],) */;
  %73 = %71.0;
  %74 = %72.0;
  (%73, %74)
}

def @func_6889() -> (Tensor[(1152), float32], Tensor[(35, 6), int32]) {
  %75 = @func_6310() /* ty=(Tensor[(1152), float32], Tensor[(250), bool], Tensor[(8, 2, 9), float64]) */;
  %76 = @func_2811() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(35, 6), int64], Tensor[(5, 50), float32]) */;
  %77 = %76.1;
  %78 = cast(meta[relay.Constant][4] /* ty=Tensor[(35, 6), int64] */, dtype="int32") /* ty=Tensor[(35, 6), int32] */;
  %79 = shape_of(%77, dtype="int32") /* ty=Tensor[(2), int32] */;
  %80 = cast(%77, dtype="int32") /* ty=Tensor[(35, 6), int32] */;
  %81 = dyn.reshape(%78, %79, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %82 = %75.0;
  %83 = maximum(%80, %81) /* ty=Tensor[(35, 6), int32] */;
  (%82, %83)
}

def @func_10891(%var_10886: Tensor[(250), float64]) -> (Tensor[(8, 3, 210), int32], Tensor[(250), bool]) {
  %84 = @func_8637() /* ty=(Tensor[(250), float64], Tensor[(8, 2, 9), float64]) */;
  %85 = %84.0;
  %86 = cast(%85, dtype="float32") /* ty=Tensor[(250), float32] */;
  %87 = cast(%85, dtype="float32") /* ty=Tensor[(250), float32] */;
  %88 = reshape(%86, newshape=[250]) /* ty=Tensor[(250), float32] */;
  %89 = reshape(%87, newshape=[250]) /* ty=Tensor[(250), float32] */;
  %90 = @func_3149(%88, %89) /* ty=(Tensor[(8, 2, 9), float32], Tensor[(5, 5, 10), float32], Tensor[(250), bool], Tensor[(8, 3, 210), int32], Tensor[(24), float32], Tensor[(210), float32]) */;
  %91 = cast(%var_10886, dtype="bool") /* ty=Tensor[(250), bool] */;
  %92 = shape_of(%85, dtype="int32") /* ty=Tensor[(1), int32] */;
  %93 = cast(%85, dtype="bool") /* ty=Tensor[(250), bool] */;
  %94 = dyn.reshape(%91, %92, newshape=[]) /* ty=Tensor[(?), bool] */;
  %95 = %90.3;
  %96 = greater(%93, %94) /* ty=Tensor[(250), bool] */;
  (%95, %96)
}

def @func_9160() -> Tensor[(1152), float32] {
  %97 = @func_6451() /* ty=(Tensor[(1152), float32],) */;
  %97.0
}

def @func_4080() -> (Tensor[(1152), float32], Tensor[(8, 2, 9), float32], Tensor[(16, 12, 6), float64], Tensor[(1404), float32]) {
  %98 = @func_2898() /* ty=(Tensor[(1152), float32],) */;
  %99 = @func_3620() /* ty=(Tensor[(8, 2, 9), float32],) */;
  %100 = %98.0;
  %101 = cast(%100, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %102 = cast(meta[relay.Constant][5] /* ty=Tensor[(1404), float32] */, dtype="float32") /* ty=Tensor[(1404), float32] */;
  %103 = reshape(%101, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %104 = reshape(%102, newshape=[1404, 1]) /* ty=Tensor[(1404, 1), float32] */;
  %105 = @func_2167(%103, %104) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(5, 5, 10), float32], Tensor[(250), float32], Tensor[(16, 12, 6), float64], Tensor[(1152), float32], Tensor[(3, 5, 14), float32], Tensor[(1404, 1), float32]) */;
  %106 = %99.0;
  %107 = %105.3;
  (%100, %106, %107, meta[relay.Constant][5] /* ty=Tensor[(1404), float32] */)
}

def @func_6848() -> (Tensor[(1152), float32], Tensor[(8, 2, 9), float64], Tensor[(1404), float32]) {
  %108 = cast(meta[relay.Constant][6] /* ty=Tensor[(1404), float32] */, dtype="float32") /* ty=Tensor[(1404), float32] */;
  %109 = reshape(%108, newshape=[1404]) /* ty=Tensor[(1404), float32] */;
  %110 = @func_5134(%109) /* ty=(Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64], Tensor[(1404, 1), float32], Tensor[(1152), float32], Tensor[(1404), float32], Tensor[(8, 2, 9), float64]) */;
  %111 = @func_3668() /* ty=Tensor[(1152), float32] */;
  %112 = %110.1;
  (%111, %112, meta[relay.Constant][6] /* ty=Tensor[(1404), float32] */)
}

def @func_8497() -> (Tensor[(8, 2, 9), float64],) {
  %113 = @func_6805() /* ty=(Tensor[(1152), float32], Tensor[(8, 2, 9), float64]) */;
  %114 = %113.1;
  (%114,)
}

def @func_8018() -> Tensor[(8, 2, 9), float32] {
  %115 = @func_3659() /* ty=(Tensor[(8, 2, 9), float32],) */;
  %115.0
}

def @func_9032() -> (Tensor[(1152), float32],) {
  %116 = @func_4784() /* ty=Tensor[(1152), float32] */;
  (%116,)
}

def @func_10234() -> (Tensor[(1152), float32],) {
  %117 = @func_7116() /* ty=Tensor[(1152), float32] */;
  (%117,)
}

def @func_6398() -> Tensor[(8, 2, 9), float64] {
  %118 = @func_2197() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1152), float32], Tensor[(250), float32]) */;
  %118.0
}

def @func_2205() -> Tensor[(8, 2, 9), float64] {
  @func_1909() /* ty=Tensor[(8, 2, 9), float64] */
}

def @func_3355(%var_3337: Tensor[(7, 15, 9), int16]) -> (Tensor[(7, 15, 9), int16], Tensor[(7, 15, 9), float64]) {
  %119 = cast(meta[relay.Constant][7] /* ty=Tensor[(7, 15, 9), int16] */, dtype="int16") /* ty=Tensor[(7, 15, 9), int16] */;
  %120 = shape_of(%var_3337, dtype="int32") /* ty=Tensor[(3), int32] */;
  %121 = cast(%var_3337, dtype="int16") /* ty=Tensor[(7, 15, 9), int16] */;
  %122 = dyn.reshape(%119, %120, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %123 = cast(meta[relay.Constant][7] /* ty=Tensor[(7, 15, 9), int16] */, dtype="float64") /* ty=Tensor[(7, 15, 9), float64] */;
  %124 = shape_of(%var_3337, dtype="int32") /* ty=Tensor[(3), int32] */;
  %125 = cast(%var_3337, dtype="float64") /* ty=Tensor[(7, 15, 9), float64] */;
  %126 = dyn.reshape(%123, %124, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %127 = logical_xor(%121, %122) /* ty=Tensor[(7, 15, 9), int16] */;
  %128 = subtract(%125, %126) /* ty=Tensor[(7, 15, 9), float64] */;
  (%127, %128)
}

def @func_8899() -> (Tensor[(1152), float32],) {
  %129 = @func_8449() /* ty=Tensor[(1152), float32] */;
  (%129,)
}

def @func_4894(%var_4888: Tensor[(1152), float32]) -> Tensor[(1152), int64] {
  %130 = @func_4145() /* ty=(Tensor[(1152), float32],) */;
  %131 = %130.0;
  %132 = cast(%var_4888, dtype="int64") /* ty=Tensor[(1152), int64] */;
  %133 = shape_of(%131, dtype="int32") /* ty=Tensor[(1), int32] */;
  %134 = cast(%131, dtype="int64") /* ty=Tensor[(1152), int64] */;
  %135 = dyn.reshape(%132, %133, newshape=[]) /* ty=Tensor[(?), int64] */;
  bitwise_or(%134, %135) /* ty=Tensor[(1152), int64] */
}

def @main() -> (Tensor[(315, 3), float32],) {
  %136 = @func_7560() /* ty=(Tensor[(1152), float32], Tensor[(8, 2, 9), float64], Tensor[(7, 15, 9), float64], Tensor[(315, 3), int16]) */;
  %137 = %136.3;
  %138 = cast(%137, dtype="float32") /* ty=Tensor[(315, 3), float32] */;
  %139 = log10(%138) /* ty=Tensor[(315, 3), float32] */;
  %140 = cast(%139, dtype="float64") /* ty=Tensor[(315, 3), float64] */;
  %141 = atanh(%140) /* ty=Tensor[(315, 3), float64] */;
  %142 = cast(%141, dtype="float32") /* ty=Tensor[(315, 3), float32] */;
  %143 = erf(%142) /* ty=Tensor[(315, 3), float32] */;
  (%143,)
}

def @func_5672(%var_5628: Tensor[(6, 15, 6), uint16], %var_5629: Tensor[(6, 15, 6), uint16]) -> Tensor[(6, 15, 6), bool] {
  %144 = cast(%var_5629, dtype="bool") /* ty=Tensor[(6, 15, 6), bool] */;
  %145 = shape_of(%var_5628, dtype="int32") /* ty=Tensor[(3), int32] */;
  %146 = cast(%var_5628, dtype="bool") /* ty=Tensor[(6, 15, 6), bool] */;
  %147 = dyn.reshape(%144, %145, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%146, %147) /* ty=Tensor[(6, 15, 6), bool] */
}

def @func_6503() -> (Tensor[(8, 2, 9), float32],) {
  %148 = @func_3620() /* ty=(Tensor[(8, 2, 9), float32],) */;
  %149 = %148.0;
  (%149,)
}

def @func_2727(%var_2715: Tensor[(9, 16, 1), uint32], %var_2716: Tensor[(9, 16, 2), uint32]) -> (Tensor[(9, 16, 2), bool], Tensor[(1404, 1), float32]) {
  %150 = cast(%var_2715, dtype="bool") /* ty=Tensor[(9, 16, 1), bool] */;
  %151 = cast(%var_2716, dtype="bool") /* ty=Tensor[(9, 16, 2), bool] */;
  %152 = @func_2713() /* ty=(Tensor[(1152), float32], Tensor[(1404, 1), float32], Tensor[(9, 156), float32]) */;
  %153 = greater(%150, %151) /* ty=Tensor[(9, 16, 2), bool] */;
  %154 = %152.1;
  (%153, %154)
}

def @func_5416(%var_5403: Tensor[(32), int8]) -> (Tensor[(8, 2, 9), float64], Tensor[(2, 2, 8), int8], Tensor[(32), int8]) {
  %155 = @func_2197() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1152), float32], Tensor[(250), float32]) */;
  %156 = cast(%var_5403, dtype="int8") /* ty=Tensor[(32), int8] */;
  %157 = reshape(%156, newshape=[8, 4]) /* ty=Tensor[(8, 4), int8] */;
  %158 = @func_4808(%157) /* ty=(Tensor[(1152), float32], Tensor[(2, 2, 8), int8], Tensor[(8, 4), int8]) */;
  %159 = %155.0;
  %160 = %158.1;
  (%159, %160, %var_5403)
}

def @func_7621() -> (Tensor[(1152), float32], Tensor[(8, 2, 9), float64]) {
  %161 = @func_4145() /* ty=(Tensor[(1152), float32],) */;
  %162 = @func_7097() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1404, 2), uint8]) */;
  %163 = %161.0;
  %164 = %162.0;
  (%163, %164)
}

def @func_11311(%var_11168: Tensor[(10, 1, 10), uint64], %var_11169: Tensor[(10, 14, 10), uint64], %var_11198: Tensor[(10, 15, 10), float32]) -> (Tensor[(10, 14, 10), bool], Tensor[(1152), float32], Tensor[(32), int8], Tensor[(10, 1, 10), float64], Tensor[(8, 2, 9), float32], Tensor[(945), int16], Tensor[(105, 9), int16], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(1404, 2), uint8], Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float64], Tensor[(10, 15, 10), bool]) {
  %165 = cast(%var_11168, dtype="bool") /* ty=Tensor[(10, 1, 10), bool] */;
  %166 = cast(%var_11169, dtype="bool") /* ty=Tensor[(10, 14, 10), bool] */;
  %167 = @func_4145() /* ty=(Tensor[(1152), float32],) */;
  %168 = @func_9343() /* ty=(Tensor[(8, 2, 9), float32], Tensor[(1152), float32], Tensor[(32), int8]) */;
  %169 = cast(%var_11168, dtype="float32") /* ty=Tensor[(10, 1, 10), float32] */;
  %170 = sigmoid(%169) /* ty=Tensor[(10, 1, 10), float32] */;
  %171 = cast(%170, dtype="float64") /* ty=Tensor[(10, 1, 10), float64] */;
  %172 = @func_6615() /* ty=(Tensor[(8, 2, 9), float32],) */;
  %173 = cast(meta[relay.Constant][8] /* ty=Tensor[(105, 9), int16] */, dtype="int16") /* ty=Tensor[(105, 9), int16] */;
  %174 = reshape(%173, newshape=[945]) /* ty=Tensor[(945), int16] */;
  %175 = @func_6564(%174) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(7, 15, 9), float64], Tensor[(945), int16], Tensor[(1152), float32]) */;
  %176 = @func_6415() /* ty=(Tensor[(1152), float32],) */;
  %177 = @func_10234() /* ty=(Tensor[(1152), float32],) */;
  %178 = @func_8797() /* ty=(Tensor[(1404, 2), uint8],) */;
  %179 = @func_8687() /* ty=(Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64]) */;
  %180 = @func_10618() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float32]) */;
  %181 = cast(%170, dtype="bool") /* ty=Tensor[(10, 1, 10), bool] */;
  %182 = cast(%var_11198, dtype="bool") /* ty=Tensor[(10, 15, 10), bool] */;
  %183 = less(%181, %182) /* ty=Tensor[(10, 15, 10), bool] */;
  %184 = cast(%183, dtype="float64") /* ty=Tensor[(10, 15, 10), float64] */;
  %185 = sinh(%184) /* ty=Tensor[(10, 15, 10), float64] */;
  %186 = cast(%185, dtype="float32") /* ty=Tensor[(10, 15, 10), float32] */;
  %187 = erf(%186) /* ty=Tensor[(10, 15, 10), float32] */;
  %188 = cast(%187, dtype="float32") /* ty=Tensor[(10, 15, 10), float32] */;
  %189 = atan(%188) /* ty=Tensor[(10, 15, 10), float32] */;
  %190 = cast(%185, dtype="bool") /* ty=Tensor[(10, 15, 10), bool] */;
  %191 = shape_of(%189, dtype="int32") /* ty=Tensor[(3), int32] */;
  %192 = cast(%189, dtype="bool") /* ty=Tensor[(10, 15, 10), bool] */;
  %193 = dyn.reshape(%190, %191, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %194 = less(%165, %166) /* ty=Tensor[(10, 14, 10), bool] */;
  %195 = %167.0;
  %196 = %168.2;
  %197 = cos(%171) /* ty=Tensor[(10, 1, 10), float64] */;
  %198 = %172.0;
  %199 = %175.2;
  %200 = %176.0;
  %201 = %177.0;
  %202 = %178.0;
  %203 = %179.1;
  %204 = %180.0;
  %205 = equal(%192, %193) /* ty=Tensor[(10, 15, 10), bool] */;
  (%194, %195, %196, %197, %198, %199, meta[relay.Constant][8] /* ty=Tensor[(105, 9), int16] */, %200, %201, %202, %203, %204, %205)
}

def @func_4784() -> Tensor[(1152), float32] {
  @func_3668() /* ty=Tensor[(1152), float32] */
}

def @func_10800() -> (Tensor[(8, 2, 9), float32],) {
  %206 = @func_8962() /* ty=Tensor[(8, 2, 9), float32] */;
  (%206,)
}

def @func_2606() -> (Tensor[(8, 2, 9), float64], Tensor[(1152), float32], Tensor[(1404), float32], Tensor[(4, 14, 12), float32]) {
  %207 = cast(meta[relay.Constant][9] /* ty=Tensor[(1152), float32] */, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %208 = cast(meta[relay.Constant][10] /* ty=Tensor[(1404), float32] */, dtype="float32") /* ty=Tensor[(1404), float32] */;
  %209 = reshape(%207, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %210 = reshape(%208, newshape=[1404, 1]) /* ty=Tensor[(1404, 1), float32] */;
  %211 = @func_2167(%209, %210) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(5, 5, 10), float32], Tensor[(250), float32], Tensor[(16, 12, 6), float64], Tensor[(1152), float32], Tensor[(3, 5, 14), float32], Tensor[(1404, 1), float32]) */;
  %212 = cast(meta[relay.Constant][11] /* ty=Tensor[(4, 14, 12), float64] */, dtype="float64") /* ty=Tensor[(4, 14, 12), float64] */;
  %213 = cos(%212) /* ty=Tensor[(4, 14, 12), float64] */;
  %214 = cast(%213, dtype="float32") /* ty=Tensor[(4, 14, 12), float32] */;
  %215 = %211.0;
  %216 = sqrt(%214) /* ty=Tensor[(4, 14, 12), float32] */;
  (%215, meta[relay.Constant][9] /* ty=Tensor[(1152), float32] */, meta[relay.Constant][10] /* ty=Tensor[(1404), float32] */, %216)
}

def @func_2167(%var_2151: Tensor[(1152), float32], %var_2165: Tensor[(1404, 1), float32]) -> (Tensor[(8, 2, 9), float64], Tensor[(5, 5, 10), float32], Tensor[(250), float32], Tensor[(16, 12, 6), float64], Tensor[(1152), float32], Tensor[(3, 5, 14), float32], Tensor[(1404, 1), float32]) {
  %217 = @func_1957() /* ty=(Tensor[(8, 2, 9), float64],) */;
  %218 = cast(meta[relay.Constant][12] /* ty=Tensor[(250), float32] */, dtype="float32") /* ty=Tensor[(250), float32] */;
  %219 = reshape(%218, newshape=[5, 5, 10]) /* ty=Tensor[(5, 5, 10), float32] */;
  %220 = @func_1815(%219) /* ty=(Tensor[(16, 12, 6), float64], Tensor[(1152), float32], Tensor[(16, 12, 6), float64], Tensor[(3, 5, 14), float32], Tensor[(210), float32], Tensor[(35, 6), int64], Tensor[(1404), float32], Tensor[(5, 5, 10), float32], Tensor[(3, 5, 14), float32]) */;
  %221 = cast(%var_2151, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %222 = reshape(%221, newshape=[16, 12, 6]) /* ty=Tensor[(16, 12, 6), float32] */;
  %223 = cast(%var_2165, dtype="float32") /* ty=Tensor[(1404, 1), float32] */;
  %224 = reshape(%223, newshape=[9, 12, 13]) /* ty=Tensor[(9, 12, 13), float32] */;
  %225 = @func_1417(%224) /* ty=(Tensor[(9, 12, 13), float32], Tensor[(3, 5, 14), float32], Tensor[(35, 6), int64]) */;
  %226 = %217.0;
  %227 = %220.7;
  %228 = @func_1446(%222) /* ty=Tensor[(16, 12, 6), float64] */;
  %229 = %225.1;
  (%226, %227, meta[relay.Constant][12] /* ty=Tensor[(250), float32] */, %228, %var_2151, %229, %var_2165)
}

def @func_3668() -> Tensor[(1152), float32] {
  %230 = @func_2369() /* ty=(Tensor[(1152), float32],) */;
  %230.0
}

def @func_7064() -> (Tensor[(6, 15, 6), bool], Tensor[(8, 2, 9), float64]) {
  %231 = @func_3044() /* ty=(Tensor[(8, 2, 9), float64],) */;
  %232 = @func_6604() /* ty=Tensor[(6, 15, 6), bool] */;
  %233 = %231.0;
  (%232, %233)
}

def @func_8133() -> Tensor[(8, 2, 9), float32] {
  %234 = @func_7979() /* ty=(Tensor[(1152), float32], Tensor[(8, 2, 9), float32]) */;
  %234.1
}

def @func_4445(%var_4434: uint64) -> (Tensor[(7, 1, 9), bool], Tensor[(8, 2, 9), float64]) {
  %235 = cast(%var_4434, dtype="bool") /* ty=bool */;
  %236 = cast(meta[relay.Constant][13] /* ty=Tensor[(7, 1, 9), uint64] */, dtype="bool") /* ty=Tensor[(7, 1, 9), bool] */;
  %237 = @func_2811() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(35, 6), int64], Tensor[(5, 50), float32]) */;
  %238 = not_equal(%235, %236) /* ty=Tensor[(7, 1, 9), bool] */;
  %239 = %237.0;
  (%238, %239)
}

def @func_3005() -> (Tensor[(8, 2, 9), float64],) {
  %240 = @func_2197() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1152), float32], Tensor[(250), float32]) */;
  %241 = %240.0;
  (%241,)
}

def @func_2855() -> (Tensor[(8, 2, 9), float64],) {
  %242 = @func_2606() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1152), float32], Tensor[(1404), float32], Tensor[(4, 14, 12), float32]) */;
  %243 = %242.0;
  (%243,)
}

def @func_4339() -> (Tensor[(8, 2, 9), float64],) {
  %244 = @func_2205() /* ty=Tensor[(8, 2, 9), float64] */;
  (%244,)
}

def @func_3685() -> Tensor[(1152), float32] {
  %245 = @func_3260() /* ty=(Tensor[(1152), float32],) */;
  %245.0
}

def @func_6237() -> Tensor[(8, 2, 9), float64] {
  @func_2416() /* ty=Tensor[(8, 2, 9), float64] */
}

def @func_11163(%var_11133: Tensor[(9, 5, 6), int64], %var_11134: Tensor[(9, 5, 6), int64]) -> (Tensor[(9, 5, 6), bool], Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64]) {
  %246 = cast(%var_11134, dtype="bool") /* ty=Tensor[(9, 5, 6), bool] */;
  %247 = shape_of(%var_11133, dtype="int32") /* ty=Tensor[(3), int32] */;
  %248 = cast(%var_11133, dtype="bool") /* ty=Tensor[(9, 5, 6), bool] */;
  %249 = dyn.reshape(%246, %247, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %250 = equal(%248, %249) /* ty=Tensor[(9, 5, 6), bool] */;
  %251 = @func_8133() /* ty=Tensor[(8, 2, 9), float32] */;
  %252 = @func_7632() /* ty=Tensor[(8, 2, 9), float64] */;
  (%250, %251, %252)
}

def @func_6755() -> (Tensor[(1152), float32], Tensor[(1152), float64]) {
  %253 = @func_3685() /* ty=Tensor[(1152), float32] */;
  %254 = cast(%253, dtype="float64") /* ty=Tensor[(1152), float64] */;
  %255 = @func_4784() /* ty=Tensor[(1152), float32] */;
  %256 = asin(%254) /* ty=Tensor[(1152), float64] */;
  (%255, %256)
}

def @func_2683() -> (Tensor[(8, 2, 9), float64],) {
  %257 = @func_1909() /* ty=Tensor[(8, 2, 9), float64] */;
  (%257,)
}

def @func_4610() -> (Tensor[(8, 2, 9), float32], Tensor[(1152), float32], Tensor[(16, 12, 6), float64]) {
  %258 = @func_3898() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float32]) */;
  %259 = @func_4145() /* ty=(Tensor[(1152), float32],) */;
  %260 = %259.0;
  %261 = cast(%260, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %262 = reshape(%261, newshape=[16, 12, 6]) /* ty=Tensor[(16, 12, 6), float32] */;
  %263 = %258.1;
  %264 = @func_1446(%262) /* ty=Tensor[(16, 12, 6), float64] */;
  (%263, %260, %264)
}

def @func_2120() -> (Tensor[(8, 2, 9), float64],) {
  %265 = @func_1957() /* ty=(Tensor[(8, 2, 9), float64],) */;
  %266 = %265.0;
  (%266,)
}

def @func_2811() -> (Tensor[(8, 2, 9), float64], Tensor[(35, 6), int64], Tensor[(5, 50), float32]) {
  %267 = @func_2683() /* ty=(Tensor[(8, 2, 9), float64],) */;
  %268 = cast(meta[relay.Constant][14] /* ty=Tensor[(5, 50), float32] */, dtype="float32") /* ty=Tensor[(5, 50), float32] */;
  %269 = reshape(%268, newshape=[5, 5, 10]) /* ty=Tensor[(5, 5, 10), float32] */;
  %270 = @func_1815(%269) /* ty=(Tensor[(16, 12, 6), float64], Tensor[(1152), float32], Tensor[(16, 12, 6), float64], Tensor[(3, 5, 14), float32], Tensor[(210), float32], Tensor[(35, 6), int64], Tensor[(1404), float32], Tensor[(5, 5, 10), float32], Tensor[(3, 5, 14), float32]) */;
  %271 = %267.0;
  %272 = %270.5;
  (%271, %272, meta[relay.Constant][14] /* ty=Tensor[(5, 50), float32] */)
}

def @func_7902() -> (Tensor[(250), float32],) {
  %273 = @func_5511() /* ty=(Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(210), float32], Tensor[(250), float32]) */;
  %274 = %273.3;
  (%274,)
}

def @func_4863() -> Tensor[(8, 2, 9), float32] {
  %275 = @func_3659() /* ty=(Tensor[(8, 2, 9), float32],) */;
  %275.0
}

def @func_1909() -> Tensor[(8, 2, 9), float64] {
  %276 = cast(meta[relay.Constant][15] /* ty=Tensor[(8, 2, 9), float64] */, dtype="float64") /* ty=Tensor[(8, 2, 9), float64] */;
  acosh(%276) /* ty=Tensor[(8, 2, 9), float64] */
}

def @func_9977(%var_9936: Tensor[(9, 2, 4), uint8]) -> (Tensor[(9, 2, 4), int32], Tensor[(8, 2, 9), float64]) {
  %277 = cast(%var_9936, dtype="uint8") /* ty=Tensor[(9, 2, 4), uint8] */;
  %278 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(9, 2, 4), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %279 = cast(meta[relay.Constant][16] /* ty=Tensor[(9, 2, 4), uint8] */, dtype="uint8") /* ty=Tensor[(9, 2, 4), uint8] */;
  %280 = dyn.reshape(%277, %278, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %281 = add(%279, %280) /* ty=Tensor[(9, 2, 4), uint8] */;
  %282 = cast(%281, dtype="float32") /* ty=Tensor[(9, 2, 4), float32] */;
  %283 = sigmoid(%282) /* ty=Tensor[(9, 2, 4), float32] */;
  %284 = cast(%283, dtype="float32") /* ty=Tensor[(9, 2, 4), float32] */;
  %285 = asinh(%284) /* ty=Tensor[(9, 2, 4), float32] */;
  %286 = cast(%281, dtype="int32") /* ty=Tensor[(9, 2, 4), int32] */;
  %287 = shape_of(%285, dtype="int32") /* ty=Tensor[(3), int32] */;
  %288 = cast(%285, dtype="int32") /* ty=Tensor[(9, 2, 4), int32] */;
  %289 = dyn.reshape(%286, %287, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %290 = @func_6116() /* ty=(Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64]) */;
  %291 = multiply(%288, %289) /* ty=Tensor[(9, 2, 4), int32] */;
  %292 = %290.1;
  (%291, %292)
}

def @func_4145() -> (Tensor[(1152), float32],) {
  %293 = @func_2898() /* ty=(Tensor[(1152), float32],) */;
  %294 = %293.0;
  (%294,)
}

def @func_8129() -> Tensor[(8, 2, 9), float32] {
  %295 = @func_7381() /* ty=(Tensor[(8, 2, 9), float32],) */;
  %295.0
}

def @func_6350(%var_6336: Tensor[(15, 8, 3), uint16], %var_6337: Tensor[(15, 8, 3), uint16]) -> (Tensor[(15, 8, 3), uint16], Tensor[(8, 2, 9), float64]) {
  %296 = cast(%var_6337, dtype="uint16") /* ty=Tensor[(15, 8, 3), uint16] */;
  %297 = shape_of(%var_6336, dtype="int32") /* ty=Tensor[(3), int32] */;
  %298 = cast(%var_6336, dtype="uint16") /* ty=Tensor[(15, 8, 3), uint16] */;
  %299 = dyn.reshape(%296, %297, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %300 = minimum(%298, %299) /* ty=Tensor[(15, 8, 3), uint16] */;
  %301 = @func_6237() /* ty=Tensor[(8, 2, 9), float64] */;
  (%300, %301)
}

def @func_8449() -> Tensor[(1152), float32] {
  @func_3239() /* ty=Tensor[(1152), float32] */
}

def @func_10310(%var_10289: Tensor[(1152), float32], %var_10307: float64) -> (Tensor[(8, 2, 9), float64], Tensor[(7, 15, 9), float64], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(11, 1, 5), bool], float64) {
  %302 = @func_2811() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(35, 6), int64], Tensor[(5, 50), float32]) */;
  %303 = @func_3584() /* ty=(Tensor[(1152), float32], Tensor[(7, 15, 9), float64], Tensor[(7, 15, 9), float64], Tensor[(8, 2, 9), float64]) */;
  %304 = cast(%var_10289, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %305 = reshape(%304, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %306 = @func_4398(%305) /* ty=(Tensor[(1152), float64], Tensor[(1152), float32]) */;
  %307 = cast(%var_10307, dtype="float64") /* ty=float64 */;
  %308 = reshape(%307, newshape=[]) /* ty=float64 */;
  %309 = %302.0;
  %310 = %303.1;
  %311 = %306.1;
  %312 = @func_8763(%308) /* ty=Tensor[(11, 1, 5), bool] */;
  (%309, %310, %311, %var_10289, %312, %var_10307)
}

def @func_10823() -> (Tensor[(1152), float32], Tensor[(8, 2, 9), float32]) {
  %313 = @func_8166() /* ty=(Tensor[(1152), float32],) */;
  %314 = @func_9343() /* ty=(Tensor[(8, 2, 9), float32], Tensor[(1152), float32], Tensor[(32), int8]) */;
  %315 = %313.0;
  %316 = %314.0;
  (%315, %316)
}

def @func_7771() -> (Tensor[(315, 3), int16], Tensor[(9, 8, 8), float64], Tensor[(576), float32]) {
  %317 = @func_7560() /* ty=(Tensor[(1152), float32], Tensor[(8, 2, 9), float64], Tensor[(7, 15, 9), float64], Tensor[(315, 3), int16]) */;
  %318 = cast(meta[relay.Constant][17] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
  %319 = reshape(%318, newshape=[9, 8, 8]) /* ty=Tensor[(9, 8, 8), float32] */;
  %320 = @func_7294(%319) /* ty=(Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float32], Tensor[(1152), float32], Tensor[(8, 2, 9), float64], Tensor[(9, 8, 8), float64], Tensor[(3, 5, 14), float32], Tensor[(250), float32], Tensor[(1152), float32]) */;
  %321 = %317.3;
  %322 = %320.4;
  (%321, %322, meta[relay.Constant][17] /* ty=Tensor[(576), float32] */)
}

def @func_570(%var_523: Tensor[(8, 3, 1), float32], %var_532: Tensor[(210), float32]) -> (Tensor[(3, 5, 14), float32], Tensor[(8, 3, 210), int32], Tensor[(8, 3, 210), bool], Tensor[(3, 5, 14), float32]) {
  %323 = cast(%var_532, dtype="float32") /* ty=Tensor[(210), float32] */;
  %324 = reshape(%323, newshape=[3, 5, 14]) /* ty=Tensor[(3, 5, 14), float32] */;
  %325 = @func_293(%324) /* ty=(Tensor[(3, 5, 14), float32],) */;
  %326 = cast(%var_523, dtype="float32") /* ty=Tensor[(8, 3, 1), float32] */;
  %327 = log(%326) /* ty=Tensor[(8, 3, 1), float32] */;
  %328 = cast(%327, dtype="int32") /* ty=Tensor[(8, 3, 1), int32] */;
  %329 = cast(%var_532, dtype="int32") /* ty=Tensor[(210), int32] */;
  %330 = cast(%var_532, dtype="bool") /* ty=Tensor[(210), bool] */;
  %331 = cast(%327, dtype="bool") /* ty=Tensor[(8, 3, 1), bool] */;
  %332 = %325.0;
  %333 = cast(%332, dtype="float32") /* ty=Tensor[(3, 5, 14), float32] */;
  %334 = reshape(%333, newshape=[3, 5, 14]) /* ty=Tensor[(3, 5, 14), float32] */;
  %335 = @func_293(%334) /* ty=(Tensor[(3, 5, 14), float32],) */;
  %336 = logical_xor(%328, %329) /* ty=Tensor[(8, 3, 210), int32] */;
  %337 = greater_equal(%330, %331) /* ty=Tensor[(8, 3, 210), bool] */;
  %338 = %335.0;
  (%332, %336, %337, %338)
}

def @func_3044() -> (Tensor[(8, 2, 9), float64],) {
  %339 = @func_2205() /* ty=Tensor[(8, 2, 9), float64] */;
  (%339,)
}

def @func_3239() -> Tensor[(1152), float32] {
  %340 = @func_2898() /* ty=(Tensor[(1152), float32],) */;
  %340.0
}

def @func_5224(%var_5194: Tensor[(32), int8]) -> (Tensor[(8, 2, 9), float64], Tensor[(1152), int32], Tensor[(8, 4), int8], Tensor[(32), int8]) {
  %341 = @func_2683() /* ty=(Tensor[(8, 2, 9), float64],) */;
  %342 = @func_2197() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1152), float32], Tensor[(250), float32]) */;
  %343 = %342.1;
  %344 = @func_2648() /* ty=Tensor[(1152), float32] */;
  %345 = cast(%344, dtype="int32") /* ty=Tensor[(1152), int32] */;
  %346 = shape_of(%343, dtype="int32") /* ty=Tensor[(1), int32] */;
  %347 = cast(%343, dtype="int32") /* ty=Tensor[(1152), int32] */;
  %348 = dyn.reshape(%345, %346, newshape=[]) /* ty=Tensor[(?), int32] */;
  %349 = cast(%var_5194, dtype="int8") /* ty=Tensor[(32), int8] */;
  %350 = reshape(%349, newshape=[8, 4]) /* ty=Tensor[(8, 4), int8] */;
  %351 = @func_4808(%350) /* ty=(Tensor[(1152), float32], Tensor[(2, 2, 8), int8], Tensor[(8, 4), int8]) */;
  %352 = %341.0;
  %353 = maximum(%347, %348) /* ty=Tensor[(1152), int32] */;
  %354 = %351.2;
  (%352, %353, %354, %var_5194)
}

def @func_9922() -> (Tensor[(8, 2, 9), float32],) {
  %355 = @func_8062() /* ty=Tensor[(8, 2, 9), float32] */;
  (%355,)
}

def @func_10221(%var_10217: Tensor[(16, 7, 2), float32]) -> (Tensor[(16, 7, 2), float32],) {
  %356 = cast(%var_10217, dtype="float32") /* ty=Tensor[(16, 7, 2), float32] */;
  %357 = erf(%356) /* ty=Tensor[(16, 7, 2), float32] */;
  (%357,)
}

def @func_12008() -> (Tensor[(1152), float32], Tensor[(16, 12, 6), float64], Tensor[(1404), float32]) {
  %358 = @func_7979() /* ty=(Tensor[(1152), float32], Tensor[(8, 2, 9), float32]) */;
  %359 = cast(meta[relay.Constant][18] /* ty=Tensor[(1404), float32] */, dtype="float32") /* ty=Tensor[(1404), float32] */;
  %360 = reshape(%359, newshape=[1404]) /* ty=Tensor[(1404), float32] */;
  %361 = @func_3208(%360) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(16, 12, 6), float64], Tensor[(4, 288), float32], Tensor[(1404), float32]) */;
  %362 = %358.0;
  %363 = %361.1;
  (%362, %363, meta[relay.Constant][18] /* ty=Tensor[(1404), float32] */)
}

def @func_8166() -> (Tensor[(1152), float32],) {
  %364 = @func_2197() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1152), float32], Tensor[(250), float32]) */;
  %365 = %364.1;
  (%365,)
}

def @func_4496() -> (Tensor[(1152), float32], Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64], Tensor[(1404), float32]) {
  %366 = @func_3363() /* ty=(Tensor[(8, 2, 9), float32],) */;
  %367 = @func_3239() /* ty=Tensor[(1152), float32] */;
  %368 = cast(%367, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %369 = cast(meta[relay.Constant][19] /* ty=Tensor[(1404), float32] */, dtype="float32") /* ty=Tensor[(1404), float32] */;
  %370 = reshape(%368, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %371 = reshape(%369, newshape=[1404, 1]) /* ty=Tensor[(1404, 1), float32] */;
  %372 = @func_2167(%370, %371) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(5, 5, 10), float32], Tensor[(250), float32], Tensor[(16, 12, 6), float64], Tensor[(1152), float32], Tensor[(3, 5, 14), float32], Tensor[(1404, 1), float32]) */;
  %373 = %366.0;
  %374 = %372.0;
  (%367, %373, %374, meta[relay.Constant][19] /* ty=Tensor[(1404), float32] */)
}

def @func_3363() -> (Tensor[(8, 2, 9), float32],) {
  %375 = @func_2786() /* ty=(Tensor[(8, 2, 9), float32],) */;
  %376 = %375.0;
  (%376,)
}

def @func_7097() -> (Tensor[(8, 2, 9), float64], Tensor[(1404, 2), uint8]) {
  %377 = @func_6848() /* ty=(Tensor[(1152), float32], Tensor[(8, 2, 9), float64], Tensor[(1404), float32]) */;
  %378 = cast(meta[relay.Constant][20] /* ty=Tensor[(2808), float32] */, dtype="float32") /* ty=Tensor[(2808), float32] */;
  %379 = cast(meta[relay.Constant][20] /* ty=Tensor[(2808), float32] */, dtype="float64") /* ty=Tensor[(2808), float64] */;
  %380 = reshape(%378, newshape=[1404, 2]) /* ty=Tensor[(1404, 2), float32] */;
  %381 = reshape(%379, newshape=[1404, 2]) /* ty=Tensor[(1404, 2), float64] */;
  %382 = @func_3945(%380, %381) /* ty=(Tensor[(1404, 2), float64], Tensor[(1404, 2), bool]) */;
  %383 = %382.1;
  %384 = cast(meta[relay.Constant][20] /* ty=Tensor[(2808), float32] */, dtype="uint8") /* ty=Tensor[(2808), uint8] */;
  %385 = shape_of(%383, dtype="int32") /* ty=Tensor[(2), int32] */;
  %386 = cast(%383, dtype="uint8") /* ty=Tensor[(1404, 2), uint8] */;
  %387 = dyn.reshape(%384, %385, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %388 = %377.1;
  %389 = logical_xor(%386, %387) /* ty=Tensor[(1404, 2), uint8] */;
  (%388, %389)
}

def @func_7294(%var_7203: Tensor[(9, 8, 8), float32]) -> (Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float32], Tensor[(1152), float32], Tensor[(8, 2, 9), float64], Tensor[(9, 8, 8), float64], Tensor[(3, 5, 14), float32], Tensor[(250), float32], Tensor[(1152), float32]) {
  %390 = @func_3659() /* ty=(Tensor[(8, 2, 9), float32],) */;
  %391 = @func_4145() /* ty=(Tensor[(1152), float32],) */;
  %392 = @func_2698() /* ty=(Tensor[(8, 2, 9), float64],) */;
  %393 = cast(%var_7203, dtype="float32") /* ty=Tensor[(9, 8, 8), float32] */;
  %394 = sin(%393) /* ty=Tensor[(9, 8, 8), float32] */;
  %395 = cast(%394, dtype="float32") /* ty=Tensor[(9, 8, 8), float32] */;
  %396 = acosh(%395) /* ty=Tensor[(9, 8, 8), float32] */;
  %397 = cast(%394, dtype="float32") /* ty=Tensor[(9, 8, 8), float32] */;
  %398 = sqrt(%397) /* ty=Tensor[(9, 8, 8), float32] */;
  %399 = cast(%398, dtype="float64") /* ty=Tensor[(9, 8, 8), float64] */;
  %400 = shape_of(%396, dtype="int32") /* ty=Tensor[(3), int32] */;
  %401 = cast(%396, dtype="float64") /* ty=Tensor[(9, 8, 8), float64] */;
  %402 = dyn.reshape(%399, %400, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %403 = cast(meta[relay.Constant][21] /* ty=Tensor[(250), float32] */, dtype="float32") /* ty=Tensor[(250), float32] */;
  %404 = reshape(%403, newshape=[5, 5, 10]) /* ty=Tensor[(5, 5, 10), float32] */;
  %405 = @func_1815(%404) /* ty=(Tensor[(16, 12, 6), float64], Tensor[(1152), float32], Tensor[(16, 12, 6), float64], Tensor[(3, 5, 14), float32], Tensor[(210), float32], Tensor[(35, 6), int64], Tensor[(1404), float32], Tensor[(5, 5, 10), float32], Tensor[(3, 5, 14), float32]) */;
  %406 = @func_6889() /* ty=(Tensor[(1152), float32], Tensor[(35, 6), int32]) */;
  %407 = @func_4863() /* ty=Tensor[(8, 2, 9), float32] */;
  %408 = %390.0;
  %409 = %391.0;
  %410 = %392.0;
  %411 = mod(%401, %402) /* ty=Tensor[(9, 8, 8), float64] */;
  %412 = %405.8;
  %413 = %406.0;
  (%407, %408, %409, %410, %411, %412, meta[relay.Constant][21] /* ty=Tensor[(250), float32] */, %413)
}

def @func_1957() -> (Tensor[(8, 2, 9), float64],) {
  %414 = @func_1909() /* ty=Tensor[(8, 2, 9), float64] */;
  (%414,)
}

def @func_2698() -> (Tensor[(8, 2, 9), float64],) {
  %415 = @func_1909() /* ty=Tensor[(8, 2, 9), float64] */;
  (%415,)
}

def @func_7863(%var_7843: Tensor[(315, 3), int16]) -> (Tensor[(8, 2, 9), float64], Tensor[(315, 3), uint16]) {
  %416 = @func_1957() /* ty=(Tensor[(8, 2, 9), float64],) */;
  %417 = @func_7560() /* ty=(Tensor[(1152), float32], Tensor[(8, 2, 9), float64], Tensor[(7, 15, 9), float64], Tensor[(315, 3), int16]) */;
  %418 = %417.3;
  %419 = cast(%var_7843, dtype="bool") /* ty=Tensor[(315, 3), bool] */;
  %420 = shape_of(%418, dtype="int32") /* ty=Tensor[(2), int32] */;
  %421 = cast(%418, dtype="bool") /* ty=Tensor[(315, 3), bool] */;
  %422 = dyn.reshape(%419, %420, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %423 = greater(%421, %422) /* ty=Tensor[(315, 3), bool] */;
  %424 = cast(meta[relay.Constant][22] /* ty=Tensor[(315, 3), bool] */, dtype="uint16") /* ty=Tensor[(315, 3), uint16] */;
  %425 = shape_of(%423, dtype="int32") /* ty=Tensor[(2), int32] */;
  %426 = cast(%423, dtype="uint16") /* ty=Tensor[(315, 3), uint16] */;
  %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %428 = %416.0;
  %429 = multiply(%426, %427) /* ty=Tensor[(315, 3), uint16] */;
  (%428, %429)
}

def @func_5026(%var_5006: Tensor[(288), uint32]) -> (Tensor[(8, 2, 9), float32], Tensor[(9, 16, 2), bool], Tensor[(288), uint32], Tensor[(8, 2, 9), float32]) {
  %430 = @func_3363() /* ty=(Tensor[(8, 2, 9), float32],) */;
  %431 = %430.0;
  %432 = cast(%431, dtype="uint32") /* ty=Tensor[(8, 2, 9), uint32] */;
  %433 = cast(%var_5006, dtype="uint32") /* ty=Tensor[(288), uint32] */;
  %434 = reshape(%432, newshape=[9, 16, 1]) /* ty=Tensor[(9, 16, 1), uint32] */;
  %435 = reshape(%433, newshape=[9, 16, 2]) /* ty=Tensor[(9, 16, 2), uint32] */;
  %436 = @func_2727(%434, %435) /* ty=(Tensor[(9, 16, 2), bool], Tensor[(1404, 1), float32]) */;
  %437 = %436.0;
  %438 = @func_4863() /* ty=Tensor[(8, 2, 9), float32] */;
  (%431, %437, %var_5006, %438)
}

def @func_8962() -> Tensor[(8, 2, 9), float32] {
  %439 = @func_3659() /* ty=(Tensor[(8, 2, 9), float32],) */;
  %439.0
}

def @func_9515() -> (Tensor[(1152), float32], Tensor[(8, 2, 9), float64]) {
  %440 = @func_4339() /* ty=(Tensor[(8, 2, 9), float64],) */;
  %441 = @func_3239() /* ty=Tensor[(1152), float32] */;
  %442 = %440.0;
  (%441, %442)
}

def @func_10382() -> (Tensor[(1152), float32],) {
  %443 = @func_3880() /* ty=Tensor[(1152), float32] */;
  (%443,)
}

def @func_7184() -> (Tensor[(1152), float32],) {
  %444 = @func_3880() /* ty=Tensor[(1152), float32] */;
  (%444,)
}

def @func_10786(%var_10751: uint32, %var_10769: Tensor[(210), float32]) -> (Tensor[(1200), float32], Tensor[(210), float32], Tensor[(7, 4, 1152), int32]) {
  %445 = cast(%var_10769, dtype="float32") /* ty=Tensor[(210), float32] */;
  %446 = reshape(%445, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %447 = @func_4541(%446) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(3, 5, 14), float32], Tensor[(24), float32], Tensor[(210), float32], Tensor[(5, 15, 16), float32], Tensor[(1200), float32], Tensor[(1404, 1), float32], Tensor[(288), uint32]) */;
  %448 = @func_3260() /* ty=(Tensor[(1152), float32],) */;
  %449 = %448.0;
  %450 = cast(%var_10751, dtype="bool") /* ty=bool */;
  %451 = cast(meta[relay.Constant][23] /* ty=Tensor[(7, 4, 1), uint32] */, dtype="bool") /* ty=Tensor[(7, 4, 1), bool] */;
  %452 = less_equal(%450, %451) /* ty=Tensor[(7, 4, 1), bool] */;
  %453 = cast(%449, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %454 = cast(%452, dtype="float32") /* ty=Tensor[(7, 4, 1), float32] */;
  %455 = multiply(%453, %454) /* ty=Tensor[(7, 4, 1152), float32] */;
  %456 = cast(%455, dtype="int32") /* ty=Tensor[(7, 4, 1152), int32] */;
  %457 = cast(%452, dtype="int32") /* ty=Tensor[(7, 4, 1), int32] */;
  %458 = %447.5;
  %459 = subtract(%456, %457) /* ty=Tensor[(7, 4, 1152), int32] */;
  (%458, %var_10769, %459)
}

def @func_5134(%var_5112: Tensor[(1404), float32]) -> (Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64], Tensor[(1404, 1), float32], Tensor[(1152), float32], Tensor[(1404), float32], Tensor[(8, 2, 9), float64]) {
  %460 = @func_3363() /* ty=(Tensor[(8, 2, 9), float32],) */;
  %461 = @func_2786() /* ty=(Tensor[(8, 2, 9), float32],) */;
  %462 = %461.0;
  %463 = cast(%462, dtype="float64") /* ty=Tensor[(8, 2, 9), float64] */;
  %464 = cast(meta[relay.Constant][24] /* ty=Tensor[(1152), float32] */, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %465 = cast(%var_5112, dtype="float32") /* ty=Tensor[(1404), float32] */;
  %466 = reshape(%464, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %467 = reshape(%465, newshape=[1404, 1]) /* ty=Tensor[(1404, 1), float32] */;
  %468 = @func_2167(%466, %467) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(5, 5, 10), float32], Tensor[(250), float32], Tensor[(16, 12, 6), float64], Tensor[(1152), float32], Tensor[(3, 5, 14), float32], Tensor[(1404, 1), float32]) */;
  %469 = @func_2455() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float64]) */;
  %470 = %460.0;
  %471 = sqrt(%463) /* ty=Tensor[(8, 2, 9), float64] */;
  %472 = %468.6;
  %473 = %469.1;
  (%470, %471, %472, meta[relay.Constant][24] /* ty=Tensor[(1152), float32] */, %var_5112, %473)
}

def @func_4241(%var_4236: Tensor[(210, 1), float32], %var_4237: Tensor[(250, 1), float32]) -> (Tensor[(4, 14, 12), float32], Tensor[(250), int32], Tensor[(210, 1), float32], Tensor[(250, 1), float32]) {
  %474 = @func_2606() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1152), float32], Tensor[(1404), float32], Tensor[(4, 14, 12), float32]) */;
  %475 = %474.3;
  %476 = cast(%475, dtype="float32") /* ty=Tensor[(4, 14, 12), float32] */;
  %477 = cast(%var_4236, dtype="float32") /* ty=Tensor[(210, 1), float32] */;
  %478 = cast(%var_4237, dtype="float32") /* ty=Tensor[(250, 1), float32] */;
  %479 = reshape(%477, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %480 = reshape(%478, newshape=[250]) /* ty=Tensor[(250), float32] */;
  %481 = @func_2544(%479, %480) /* ty=(Tensor[(1152), float32], Tensor[(8, 2, 9), float64], Tensor[(16, 12, 6), float64], Tensor[(3, 5, 14), float32], Tensor[(210), float32], Tensor[(250), uint8], Tensor[(250), int32]) */;
  %482 = sin(%476) /* ty=Tensor[(4, 14, 12), float32] */;
  %483 = %481.6;
  (%482, %483, %var_4236, %var_4237)
}

def @func_9129() -> Tensor[(1152), float32] {
  @func_3685() /* ty=Tensor[(1152), float32] */
}

def @func_10102() -> (Tensor[(250), float32],) {
  %484 = @func_7902() /* ty=(Tensor[(250), float32],) */;
  %485 = %484.0;
  (%485,)
}

def @func_7754() -> (Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(8, 2, 9), float64]) {
  %486 = @func_6065() /* ty=(Tensor[(250), int8], Tensor[(250), float64], Tensor[(1152), float32]) */;
  %487 = %486.2;
  %488 = @func_2648() /* ty=Tensor[(1152), float32] */;
  %489 = @func_6600() /* ty=Tensor[(8, 2, 9), float64] */;
  (%487, %488, %489)
}

def @func_7560() -> (Tensor[(1152), float32], Tensor[(8, 2, 9), float64], Tensor[(7, 15, 9), float64], Tensor[(315, 3), int16]) {
  %490 = @func_6889() /* ty=(Tensor[(1152), float32], Tensor[(35, 6), int32]) */;
  %491 = cast(meta[relay.Constant][25] /* ty=Tensor[(315, 3), int16] */, dtype="int16") /* ty=Tensor[(315, 3), int16] */;
  %492 = reshape(%491, newshape=[7, 15, 9]) /* ty=Tensor[(7, 15, 9), int16] */;
  %493 = @func_3355(%492) /* ty=(Tensor[(7, 15, 9), int16], Tensor[(7, 15, 9), float64]) */;
  %494 = %490.0;
  %495 = @func_6237() /* ty=Tensor[(8, 2, 9), float64] */;
  %496 = %493.1;
  (%494, %495, %496, meta[relay.Constant][25] /* ty=Tensor[(315, 3), int16] */)
}

def @func_3208(%var_3206: Tensor[(1404), float32]) -> (Tensor[(8, 2, 9), float64], Tensor[(16, 12, 6), float64], Tensor[(4, 288), float32], Tensor[(1404), float32]) {
  %497 = @func_3044() /* ty=(Tensor[(8, 2, 9), float64],) */;
  %498 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 288), float32] */, dtype="float32") /* ty=Tensor[(4, 288), float32] */;
  %499 = cast(%var_3206, dtype="float32") /* ty=Tensor[(1404), float32] */;
  %500 = reshape(%498, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %501 = reshape(%499, newshape=[1404, 1]) /* ty=Tensor[(1404, 1), float32] */;
  %502 = @func_2167(%500, %501) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(5, 5, 10), float32], Tensor[(250), float32], Tensor[(16, 12, 6), float64], Tensor[(1152), float32], Tensor[(3, 5, 14), float32], Tensor[(1404, 1), float32]) */;
  %503 = %497.0;
  %504 = %502.3;
  (%503, %504, meta[relay.Constant][26] /* ty=Tensor[(4, 288), float32] */, %var_3206)
}

def @func_2455() -> (Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float64]) {
  %505 = @func_2120() /* ty=(Tensor[(8, 2, 9), float64],) */;
  %506 = @func_2416() /* ty=Tensor[(8, 2, 9), float64] */;
  %507 = %505.0;
  (%506, %507)
}

def @func_6130() -> Tensor[(8, 2, 9), float32] {
  %508 = @func_3659() /* ty=(Tensor[(8, 2, 9), float32],) */;
  %508.0
}

def @func_6451() -> (Tensor[(1152), float32],) {
  %509 = @func_2898() /* ty=(Tensor[(1152), float32],) */;
  %510 = %509.0;
  (%510,)
}

def @func_11535() -> Tensor[(5, 11, 3), float64] {
  %511 = cast(meta[relay.Constant][27] /* ty=Tensor[(5, 11, 3), float64] */, dtype="float64") /* ty=Tensor[(5, 11, 3), float64] */;
  log2(%511) /* ty=Tensor[(5, 11, 3), float64] */
}

def @func_7979() -> (Tensor[(1152), float32], Tensor[(8, 2, 9), float32]) {
  %512 = @func_5248() /* ty=(Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float32]) */;
  %513 = @func_7116() /* ty=Tensor[(1152), float32] */;
  %514 = %512.1;
  (%513, %514)
}

def @func_5805(%var_5758: Tensor[(32), int8]) -> (Tensor[(8, 2, 9), float32], Tensor[(1152), int32], Tensor[(32), int8]) {
  %515 = @func_3659() /* ty=(Tensor[(8, 2, 9), float32],) */;
  %516 = cast(%var_5758, dtype="int8") /* ty=Tensor[(32), int8] */;
  %517 = reshape(%516, newshape=[32]) /* ty=Tensor[(32), int8] */;
  %518 = @func_5224(%517) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1152), int32], Tensor[(8, 4), int8], Tensor[(32), int8]) */;
  %519 = %515.0;
  %520 = %518.1;
  (%519, %520, %var_5758)
}

def @func_4000() -> (Tensor[(1152), float32],) {
  %521 = @func_2369() /* ty=(Tensor[(1152), float32],) */;
  %522 = %521.0;
  (%522,)
}

def @func_3833(%var_3822: Tensor[(1, 7, 7), float32]) -> (Tensor[(1, 7, 7), float32], Tensor[(1, 7, 7), float32]) {
  %523 = cast(%var_3822, dtype="float32") /* ty=Tensor[(1, 7, 7), float32] */;
  %524 = cast(%var_3822, dtype="float32") /* ty=Tensor[(1, 7, 7), float32] */;
  %525 = sinh(%523) /* ty=Tensor[(1, 7, 7), float32] */;
  %526 = erf(%524) /* ty=Tensor[(1, 7, 7), float32] */;
  (%525, %526)
}

def @func_7326(%var_7321: Tensor[(1, 14, 1), uint8], %var_7322: Tensor[(7, 14, 12), uint8]) -> Tensor[(7, 14, 12), bool] {
  %527 = cast(%var_7321, dtype="bool") /* ty=Tensor[(1, 14, 1), bool] */;
  %528 = cast(%var_7322, dtype="bool") /* ty=Tensor[(7, 14, 12), bool] */;
  greater_equal(%527, %528) /* ty=Tensor[(7, 14, 12), bool] */
}

def @func_6564(%var_6528: Tensor[(945), int16]) -> (Tensor[(8, 2, 9), float64], Tensor[(7, 15, 9), float64], Tensor[(945), int16], Tensor[(1152), float32]) {
  %529 = @func_4339() /* ty=(Tensor[(8, 2, 9), float64],) */;
  %530 = cast(%var_6528, dtype="int16") /* ty=Tensor[(945), int16] */;
  %531 = reshape(%530, newshape=[7, 15, 9]) /* ty=Tensor[(7, 15, 9), int16] */;
  %532 = @func_3355(%531) /* ty=(Tensor[(7, 15, 9), int16], Tensor[(7, 15, 9), float64]) */;
  %533 = %529.0;
  %534 = %532.1;
  %535 = @func_3685() /* ty=Tensor[(1152), float32] */;
  (%533, %534, %var_6528, %535)
}

def @func_7116() -> Tensor[(1152), float32] {
  @func_3239() /* ty=Tensor[(1152), float32] */
}

def @func_7381() -> (Tensor[(8, 2, 9), float32],) {
  %536 = @func_4863() /* ty=Tensor[(8, 2, 9), float32] */;
  (%536,)
}

def @func_11946() -> (Tensor[(1152), float32], Tensor[(1152), float32]) {
  %537 = @func_2369() /* ty=(Tensor[(1152), float32],) */;
  %538 = @func_3668() /* ty=Tensor[(1152), float32] */;
  %539 = %537.0;
  (%538, %539)
}

def @func_6065() -> (Tensor[(250), int8], Tensor[(250), float64], Tensor[(1152), float32]) {
  %540 = @func_2197() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1152), float32], Tensor[(250), float32]) */;
  %541 = %540.2;
  %542 = cast(meta[relay.Constant][28] /* ty=Tensor[(250), float32] */, dtype="int8") /* ty=Tensor[(250), int8] */;
  %543 = shape_of(%541, dtype="int32") /* ty=Tensor[(1), int32] */;
  %544 = cast(%541, dtype="int8") /* ty=Tensor[(250), int8] */;
  %545 = dyn.reshape(%542, %543, newshape=[]) /* ty=Tensor[(?), int8] */;
  %546 = cast(meta[relay.Constant][28] /* ty=Tensor[(250), float32] */, dtype="float64") /* ty=Tensor[(250), float64] */;
  %547 = asinh(%546) /* ty=Tensor[(250), float64] */;
  %548 = cast(%547, dtype="float64") /* ty=Tensor[(250), float64] */;
  %549 = rsqrt(%548) /* ty=Tensor[(250), float64] */;
  %550 = cast(meta[relay.Constant][28] /* ty=Tensor[(250), float32] */, dtype="float64") /* ty=Tensor[(250), float64] */;
  %551 = shape_of(%549, dtype="int32") /* ty=Tensor[(1), int32] */;
  %552 = cast(%549, dtype="float64") /* ty=Tensor[(250), float64] */;
  %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?), float64] */;
  %554 = bitwise_xor(%544, %545) /* ty=Tensor[(250), int8] */;
  %555 = floor_mod(%552, %553) /* ty=Tensor[(250), float64] */;
  %556 = @func_2648() /* ty=Tensor[(1152), float32] */;
  (%554, %555, %556)
}

def @func_3332(%var_3325: Tensor[(1152), float32], %var_3326: Tensor[(1404), float32]) -> (Tensor[(8, 2, 9), float64], Tensor[(1404, 1), float32], Tensor[(1152), float32], Tensor[(1404), float32]) {
  %557 = @func_2120() /* ty=(Tensor[(8, 2, 9), float64],) */;
  %558 = cast(%var_3325, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %559 = cast(%var_3326, dtype="float32") /* ty=Tensor[(1404), float32] */;
  %560 = reshape(%558, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %561 = reshape(%559, newshape=[1404, 1]) /* ty=Tensor[(1404, 1), float32] */;
  %562 = @func_2167(%560, %561) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(5, 5, 10), float32], Tensor[(250), float32], Tensor[(16, 12, 6), float64], Tensor[(1152), float32], Tensor[(3, 5, 14), float32], Tensor[(1404, 1), float32]) */;
  %563 = %557.0;
  %564 = %562.6;
  (%563, %564, %var_3325, %var_3326)
}

def @func_10618() -> (Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float32]) {
  %565 = @func_7632() /* ty=Tensor[(8, 2, 9), float64] */;
  %566 = @func_8062() /* ty=Tensor[(8, 2, 9), float32] */;
  (%565, %566)
}

def @func_6310() -> (Tensor[(1152), float32], Tensor[(250), bool], Tensor[(8, 2, 9), float64]) {
  %567 = @func_6262() /* ty=(Tensor[(250), bool],) */;
  %568 = @func_3005() /* ty=(Tensor[(8, 2, 9), float64],) */;
  %569 = @func_3880() /* ty=Tensor[(1152), float32] */;
  %570 = %567.0;
  %571 = %568.0;
  (%569, %570, %571)
}

def @func_7402() -> (Tensor[(1152), float32],) {
  %572 = @func_6415() /* ty=(Tensor[(1152), float32],) */;
  %573 = %572.0;
  (%573,)
}

def @func_4808(%var_4804: Tensor[(8, 4), int8]) -> (Tensor[(1152), float32], Tensor[(2, 2, 8), int8], Tensor[(8, 4), int8]) {
  %574 = cast(%var_4804, dtype="int8") /* ty=Tensor[(8, 4), int8] */;
  %575 = cast(%var_4804, dtype="int8") /* ty=Tensor[(8, 4), int8] */;
  %576 = reshape(%574, newshape=[2, 2, 8]) /* ty=Tensor[(2, 2, 8), int8] */;
  %577 = reshape(%575, newshape=[2, 2, 8]) /* ty=Tensor[(2, 2, 8), int8] */;
  %578 = @func_4784() /* ty=Tensor[(1152), float32] */;
  %579 = @func_3451(%576, %577) /* ty=Tensor[(2, 2, 8), int8] */;
  (%578, %579, %var_4804)
}

def @func_8763(%var_8753: float64) -> Tensor[(11, 1, 5), bool] {
  %580 = cast(%var_8753, dtype="bool") /* ty=bool */;
  %581 = cast(meta[relay.Constant][29] /* ty=Tensor[(11, 1, 5), float64] */, dtype="bool") /* ty=Tensor[(11, 1, 5), bool] */;
  not_equal(%580, %581) /* ty=Tensor[(11, 1, 5), bool] */
}

def @func_7493() -> (Tensor[(1404), float32], Tensor[(6, 15, 6), bool]) {
  %582 = @func_2606() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1152), float32], Tensor[(1404), float32], Tensor[(4, 14, 12), float32]) */;
  %583 = %582.2;
  %584 = @func_6604() /* ty=Tensor[(6, 15, 6), bool] */;
  (%583, %584)
}

def @func_6615() -> (Tensor[(8, 2, 9), float32],) {
  %585 = @func_4863() /* ty=Tensor[(8, 2, 9), float32] */;
  (%585,)
}

def @func_6116() -> (Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64]) {
  %586 = @func_5248() /* ty=(Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float32]) */;
  %587 = @func_2811() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(35, 6), int64], Tensor[(5, 50), float32]) */;
  %588 = %586.0;
  %589 = %587.0;
  (%588, %589)
}

def @func_11514() -> (Tensor[(8, 2, 9), float64], Tensor[(1152), float32], Tensor[(8, 2, 9), float64]) {
  %590 = @func_7402() /* ty=(Tensor[(1152), float32],) */;
  %591 = @func_10376() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1152), float32]) */;
  %592 = @func_10716() /* ty=Tensor[(8, 2, 9), float64] */;
  %593 = %590.0;
  %594 = %591.0;
  (%592, %593, %594)
}

def @func_5511() -> (Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(210), float32], Tensor[(250), float32]) {
  %595 = cast(meta[relay.Constant][30] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %596 = cast(meta[relay.Constant][31] /* ty=Tensor[(250), float32] */, dtype="float32") /* ty=Tensor[(250), float32] */;
  %597 = reshape(%595, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %598 = reshape(%596, newshape=[250]) /* ty=Tensor[(250), float32] */;
  %599 = @func_5074(%597, %598) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1152), float32], Tensor[(16, 12, 6), float64], Tensor[(210), float32], Tensor[(250), float32], Tensor[(1152), float32]) */;
  %600 = @func_3239() /* ty=Tensor[(1152), float32] */;
  %601 = %599.5;
  (%600, %601, meta[relay.Constant][30] /* ty=Tensor[(210), float32] */, meta[relay.Constant][31] /* ty=Tensor[(250), float32] */)
}

def @func_7447(%var_7411: Tensor[(4, 12, 14), float32]) -> (Tensor[(4, 12, 14), float32], Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64], Tensor[(4, 288), float32], Tensor[(1404), float32]) {
  %602 = cast(%var_7411, dtype="float32") /* ty=Tensor[(4, 12, 14), float32] */;
  %603 = @func_4339() /* ty=(Tensor[(8, 2, 9), float64],) */;
  %604 = @func_2786() /* ty=(Tensor[(8, 2, 9), float32],) */;
  %605 = @func_3280() /* ty=(Tensor[(8, 2, 9), float64],) */;
  %606 = cast(meta[relay.Constant][32] /* ty=Tensor[(1404), float32] */, dtype="float32") /* ty=Tensor[(1404), float32] */;
  %607 = reshape(%606, newshape=[1404]) /* ty=Tensor[(1404), float32] */;
  %608 = @func_3208(%607) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(16, 12, 6), float64], Tensor[(4, 288), float32], Tensor[(1404), float32]) */;
  %609 = cosh(%602) /* ty=Tensor[(4, 12, 14), float32] */;
  %610 = %603.0;
  %611 = %604.0;
  %612 = %605.0;
  %613 = %608.2;
  (%609, %610, %611, %612, %613, meta[relay.Constant][32] /* ty=Tensor[(1404), float32] */)
}

def @func_3497(%var_3463: Tensor[(1152), float32]) -> Tensor[(1152), float32] {
  %614 = @func_2898() /* ty=(Tensor[(1152), float32],) */;
  %615 = %614.0;
  %616 = cast(%var_3463, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %617 = shape_of(%615, dtype="int32") /* ty=Tensor[(1), int32] */;
  %618 = cast(%615, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %619 = dyn.reshape(%616, %617, newshape=[]) /* ty=Tensor[(?), float32] */;
  floor_mod(%618, %619) /* ty=Tensor[(1152), float32] */
}

def @func_7823(%var_7780: Tensor[(2, 576), float32]) -> (Tensor[(8, 2, 9), float32], Tensor[(1404), float32], Tensor[(1404), float32], Tensor[(2, 576), float32], Tensor[(9, 156), float32]) {
  %620 = @func_7381() /* ty=(Tensor[(8, 2, 9), float32],) */;
  %621 = cast(%var_7780, dtype="float32") /* ty=Tensor[(2, 576), float32] */;
  %622 = cast(meta[relay.Constant][33] /* ty=Tensor[(1404), float32] */, dtype="float32") /* ty=Tensor[(1404), float32] */;
  %623 = reshape(%621, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %624 = reshape(%622, newshape=[1404]) /* ty=Tensor[(1404), float32] */;
  %625 = @func_3332(%623, %624) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1404, 1), float32], Tensor[(1152), float32], Tensor[(1404), float32]) */;
  %626 = cast(%var_7780, dtype="float32") /* ty=Tensor[(2, 576), float32] */;
  %627 = sin(%626) /* ty=Tensor[(2, 576), float32] */;
  %628 = cast(%627, dtype="float64") /* ty=Tensor[(2, 576), float64] */;
  %629 = exp(%628) /* ty=Tensor[(2, 576), float64] */;
  %630 = cast(%629, dtype="float32") /* ty=Tensor[(2, 576), float32] */;
  %631 = asin(%630) /* ty=Tensor[(2, 576), float32] */;
  %632 = cast(%631, dtype="float32") /* ty=Tensor[(2, 576), float32] */;
  %633 = @func_2713() /* ty=(Tensor[(1152), float32], Tensor[(1404, 1), float32], Tensor[(9, 156), float32]) */;
  %634 = %620.0;
  %635 = %625.3;
  %636 = cos(%632) /* ty=Tensor[(2, 576), float32] */;
  %637 = %633.2;
  (%634, %635, meta[relay.Constant][33] /* ty=Tensor[(1404), float32] */, %636, %637)
}

def @func_2416() -> Tensor[(8, 2, 9), float64] {
  %638 = @func_2120() /* ty=(Tensor[(8, 2, 9), float64],) */;
  %638.0
}

def @func_2786() -> (Tensor[(8, 2, 9), float32],) {
  %639 = @func_2416() /* ty=Tensor[(8, 2, 9), float64] */;
  %640 = cast(%639, dtype="float32") /* ty=Tensor[(8, 2, 9), float32] */;
  %641 = log(%640) /* ty=Tensor[(8, 2, 9), float32] */;
  (%641,)
}

def @func_2307(%var_2264: Tensor[(1152), float32], %var_2278: Tensor[(24), float32], %var_2279: Tensor[(210), float32], %var_2300: Tensor[(1, 250), float32]) -> (Tensor[(8, 2, 9), float64], Tensor[(16, 12, 6), float64], Tensor[(1152), float32], Tensor[(8, 2, 9), float64], Tensor[(24), float32], Tensor[(210), float32], Tensor[(16, 12, 6), float64], Tensor[(8, 2, 9), float64], Tensor[(1, 250), float32]) {
  %642 = @func_2120() /* ty=(Tensor[(8, 2, 9), float64],) */;
  %643 = cast(%var_2264, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %644 = reshape(%643, newshape=[16, 12, 6]) /* ty=Tensor[(16, 12, 6), float32] */;
  %645 = cast(%var_2264, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %646 = cast(%var_2278, dtype="float32") /* ty=Tensor[(24), float32] */;
  %647 = cast(%var_2279, dtype="float32") /* ty=Tensor[(210), float32] */;
  %648 = reshape(%645, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %649 = reshape(%646, newshape=[24]) /* ty=Tensor[(24), float32] */;
  %650 = reshape(%647, newshape=[105, 2]) /* ty=Tensor[(105, 2), float32] */;
  %651 = @func_2106(%648, %649, %650) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(16, 12, 6), float64], Tensor[(1152), float32], Tensor[(8, 3, 210), bool], Tensor[(24), float32], Tensor[(105, 2), float32], Tensor[(8, 2, 9), float64]) */;
  %652 = cast(%var_2264, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %653 = reshape(%652, newshape=[16, 12, 6]) /* ty=Tensor[(16, 12, 6), float32] */;
  %654 = cast(%var_2300, dtype="float32") /* ty=Tensor[(1, 250), float32] */;
  %655 = reshape(%654, newshape=[250]) /* ty=Tensor[(250), float32] */;
  %656 = @func_1917(%655) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(5, 5, 10), float32], Tensor[(250), float32]) */;
  %657 = %642.0;
  %658 = @func_1446(%644) /* ty=Tensor[(16, 12, 6), float64] */;
  %659 = %651.6;
  %660 = @func_1446(%653) /* ty=Tensor[(16, 12, 6), float64] */;
  %661 = %656.0;
  (%657, %658, %var_2264, %659, %var_2278, %var_2279, %660, %661, %var_2300)
}

def @func_2197() -> (Tensor[(8, 2, 9), float64], Tensor[(1152), float32], Tensor[(250), float32]) {
  %662 = cast(meta[relay.Constant][34] /* ty=Tensor[(250), float32] */, dtype="float32") /* ty=Tensor[(250), float32] */;
  %663 = reshape(%662, newshape=[5, 5, 10]) /* ty=Tensor[(5, 5, 10), float32] */;
  %664 = @func_1815(%663) /* ty=(Tensor[(16, 12, 6), float64], Tensor[(1152), float32], Tensor[(16, 12, 6), float64], Tensor[(3, 5, 14), float32], Tensor[(210), float32], Tensor[(35, 6), int64], Tensor[(1404), float32], Tensor[(5, 5, 10), float32], Tensor[(3, 5, 14), float32]) */;
  %665 = @func_1909() /* ty=Tensor[(8, 2, 9), float64] */;
  %666 = %664.1;
  (%665, %666, meta[relay.Constant][34] /* ty=Tensor[(250), float32] */)
}

def @func_7691() -> Tensor[(8, 2, 9), float32] {
  %667 = @func_4080() /* ty=(Tensor[(1152), float32], Tensor[(8, 2, 9), float32], Tensor[(16, 12, 6), float64], Tensor[(1404), float32]) */;
  %667.1
}

def @func_8097() -> (Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float64], Tensor[(6, 15, 6), bool]) {
  %668 = @func_1957() /* ty=(Tensor[(8, 2, 9), float64],) */;
  %669 = @func_3044() /* ty=(Tensor[(8, 2, 9), float64],) */;
  %670 = @func_7064() /* ty=(Tensor[(6, 15, 6), bool], Tensor[(8, 2, 9), float64]) */;
  %671 = %668.0;
  %672 = %669.0;
  %673 = %670.0;
  (%671, %672, %673)
}

def @func_7632() -> Tensor[(8, 2, 9), float64] {
  %674 = @func_2855() /* ty=(Tensor[(8, 2, 9), float64],) */;
  %674.0
}

def @func_3898() -> (Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float32]) {
  %675 = @func_2455() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float64]) */;
  %676 = @func_3363() /* ty=(Tensor[(8, 2, 9), float32],) */;
  %677 = %675.0;
  %678 = %676.0;
  (%677, %678)
}

def @func_8867() -> (Tensor[(8, 2, 9), float64],) {
  %679 = @func_6237() /* ty=Tensor[(8, 2, 9), float64] */;
  (%679,)
}

def @func_3584() -> (Tensor[(1152), float32], Tensor[(7, 15, 9), float64], Tensor[(7, 15, 9), float64], Tensor[(8, 2, 9), float64]) {
  %680 = @func_2197() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1152), float32], Tensor[(250), float32]) */;
  %681 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 945), int16] */, dtype="int16") /* ty=Tensor[(1, 945), int16] */;
  %682 = reshape(%681, newshape=[7, 15, 9]) /* ty=Tensor[(7, 15, 9), int16] */;
  %683 = @func_3355(%682) /* ty=(Tensor[(7, 15, 9), int16], Tensor[(7, 15, 9), float64]) */;
  %684 = %683.1;
  %685 = cast(%684, dtype="float32") /* ty=Tensor[(7, 15, 9), float32] */;
  %686 = rsqrt(%685) /* ty=Tensor[(7, 15, 9), float32] */;
  %687 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 945), int16] */, dtype="float64") /* ty=Tensor[(1, 945), float64] */;
  %688 = shape_of(%686, dtype="int32") /* ty=Tensor[(3), int32] */;
  %689 = cast(%686, dtype="float64") /* ty=Tensor[(7, 15, 9), float64] */;
  %690 = dyn.reshape(%687, %688, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %691 = cast(%684, dtype="float64") /* ty=Tensor[(7, 15, 9), float64] */;
  %692 = @func_2455() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float64]) */;
  %693 = %680.1;
  %694 = floor_divide(%689, %690) /* ty=Tensor[(7, 15, 9), float64] */;
  %695 = erf(%691) /* ty=Tensor[(7, 15, 9), float64] */;
  %696 = %692.1;
  (%693, %694, %695, %696)
}

def @func_9343() -> (Tensor[(8, 2, 9), float32], Tensor[(1152), float32], Tensor[(32), int8]) {
  %697 = @func_3659() /* ty=(Tensor[(8, 2, 9), float32],) */;
  %698 = cast(meta[relay.Constant][36] /* ty=Tensor[(32), int8] */, dtype="int8") /* ty=Tensor[(32), int8] */;
  %699 = reshape(%698, newshape=[8, 4]) /* ty=Tensor[(8, 4), int8] */;
  %700 = @func_4808(%699) /* ty=(Tensor[(1152), float32], Tensor[(2, 2, 8), int8], Tensor[(8, 4), int8]) */;
  %701 = %697.0;
  %702 = %700.0;
  (%701, %702, meta[relay.Constant][36] /* ty=Tensor[(32), int8] */)
}

def @func_10505() -> (Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float64], Tensor[(250), bool], Tensor[(1152), float32]) {
  %703 = @func_3898() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float32]) */;
  %704 = @func_6262() /* ty=(Tensor[(250), bool],) */;
  %705 = %703.0;
  %706 = @func_6398() /* ty=Tensor[(8, 2, 9), float64] */;
  %707 = %704.0;
  %708 = @func_3880() /* ty=Tensor[(1152), float32] */;
  (%705, %706, %707, %708)
}

def @func_8797() -> (Tensor[(1404, 2), uint8],) {
  %709 = @func_7097() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1404, 2), uint8]) */;
  %710 = %709.1;
  (%710,)
}

def @func_8561() -> Tensor[(4, 14, 12), float32] {
  %711 = @func_2606() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1152), float32], Tensor[(1404), float32], Tensor[(4, 14, 12), float32]) */;
  %711.3
}

def @func_7919() -> (Tensor[(8, 2, 9), float64],) {
  %712 = @func_2205() /* ty=Tensor[(8, 2, 9), float64] */;
  (%712,)
}

def @func_1417(%var_1364: Tensor[(9, 12, 13), float32]) -> (Tensor[(9, 12, 13), float32], Tensor[(3, 5, 14), float32], Tensor[(35, 6), int64]) {
  %713 = cast(%var_1364, dtype="float32") /* ty=Tensor[(9, 12, 13), float32] */;
  %714 = cast(meta[relay.Constant][37] /* ty=Tensor[(35, 6), float32] */, dtype="float32") /* ty=Tensor[(35, 6), float32] */;
  %715 = reshape(%714, newshape=[3, 5, 14]) /* ty=Tensor[(3, 5, 14), float32] */;
  %716 = @func_293(%715) /* ty=(Tensor[(3, 5, 14), float32],) */;
  %717 = cast(meta[relay.Constant][37] /* ty=Tensor[(35, 6), float32] */, dtype="float64") /* ty=Tensor[(35, 6), float64] */;
  %718 = atanh(%717) /* ty=Tensor[(35, 6), float64] */;
  %719 = cast(meta[relay.Constant][37] /* ty=Tensor[(35, 6), float32] */, dtype="float32") /* ty=Tensor[(35, 6), float32] */;
  %720 = tan(%719) /* ty=Tensor[(35, 6), float32] */;
  %721 = cast(%720, dtype="int64") /* ty=Tensor[(35, 6), int64] */;
  %722 = shape_of(%718, dtype="int32") /* ty=Tensor[(2), int32] */;
  %723 = cast(%718, dtype="int64") /* ty=Tensor[(35, 6), int64] */;
  %724 = dyn.reshape(%721, %722, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %725 = sin(%713) /* ty=Tensor[(9, 12, 13), float32] */;
  %726 = %716.0;
  %727 = bitwise_or(%723, %724) /* ty=Tensor[(35, 6), int64] */;
  (%725, %726, %727)
}

def @func_6805() -> (Tensor[(1152), float32], Tensor[(8, 2, 9), float64]) {
  %728 = @func_4496() /* ty=(Tensor[(1152), float32], Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64], Tensor[(1404), float32]) */;
  %729 = @func_2455() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float64]) */;
  %730 = %728.0;
  %731 = %729.1;
  (%730, %731)
}

def @func_293(%var_272: Tensor[(3, 5, 14), float32]) -> (Tensor[(3, 5, 14), float32],) {
  %732 = cast(meta[relay.Constant][38] /* ty=Tensor[(3, 5, 1), float32] */, dtype="float32") /* ty=Tensor[(3, 5, 1), float32] */;
  %733 = cast(%var_272, dtype="float32") /* ty=Tensor[(3, 5, 14), float32] */;
  %734 = divide(%732, %733) /* ty=Tensor[(3, 5, 14), float32] */;
  (%734,)
}

def @func_8923() -> Tensor[(8, 2, 9), float32] {
  @func_8741() /* ty=Tensor[(8, 2, 9), float32] */
}

def @func_3451(%var_3445: Tensor[(2, 2, 8), int8], %var_3446: Tensor[(2, 2, 8), int8]) -> Tensor[(2, 2, 8), int8] {
  %735 = cast(%var_3446, dtype="int8") /* ty=Tensor[(2, 2, 8), int8] */;
  %736 = shape_of(%var_3445, dtype="int32") /* ty=Tensor[(3), int32] */;
  %737 = cast(%var_3445, dtype="int8") /* ty=Tensor[(2, 2, 8), int8] */;
  %738 = dyn.reshape(%735, %736, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  bitwise_and(%737, %738) /* ty=Tensor[(2, 2, 8), int8] */
}

def @func_3659() -> (Tensor[(8, 2, 9), float32],) {
  %739 = @func_3363() /* ty=(Tensor[(8, 2, 9), float32],) */;
  %740 = %739.0;
  (%740,)
}

def @func_5337(%var_5253: Tensor[(8, 2, 9), float64]) -> (Tensor[(8, 2, 9), uint8], Tensor[(8, 2, 9), float32], Tensor[(1152), int64], Tensor[(576, 2), float32]) {
  %741 = @func_2811() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(35, 6), int64], Tensor[(5, 50), float32]) */;
  %742 = %741.0;
  %743 = cast(%var_5253, dtype="uint8") /* ty=Tensor[(8, 2, 9), uint8] */;
  %744 = shape_of(%742, dtype="int32") /* ty=Tensor[(3), int32] */;
  %745 = cast(%742, dtype="uint8") /* ty=Tensor[(8, 2, 9), uint8] */;
  %746 = dyn.reshape(%743, %744, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %747 = cast(meta[relay.Constant][39] /* ty=Tensor[(8, 2, 9), float64] */, dtype="float32") /* ty=Tensor[(8, 2, 9), float32] */;
  %748 = shape_of(%var_5253, dtype="int32") /* ty=Tensor[(3), int32] */;
  %749 = cast(%var_5253, dtype="float32") /* ty=Tensor[(8, 2, 9), float32] */;
  %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %751 = cast(meta[relay.Constant][40] /* ty=Tensor[(576, 2), float32] */, dtype="float32") /* ty=Tensor[(576, 2), float32] */;
  %752 = reshape(%751, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %753 = left_shift(%745, %746) /* ty=Tensor[(8, 2, 9), uint8] */;
  %754 = power(%749, %750) /* ty=Tensor[(8, 2, 9), float32] */;
  %755 = @func_4894(%752) /* ty=Tensor[(1152), int64] */;
  (%753, %754, %755, meta[relay.Constant][40] /* ty=Tensor[(576, 2), float32] */)
}

def @func_10981() -> (Tensor[(8, 2, 9), float32],) {
  %756 = @func_6130() /* ty=Tensor[(8, 2, 9), float32] */;
  (%756,)
}

def @func_11704(%var_11693: Tensor[(1404), float32]) -> (Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(1404), float32]) {
  %757 = @func_7979() /* ty=(Tensor[(1152), float32], Tensor[(8, 2, 9), float32]) */;
  %758 = %757.0;
  %759 = cast(%758, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %760 = cast(%var_11693, dtype="float32") /* ty=Tensor[(1404), float32] */;
  %761 = reshape(%759, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %762 = reshape(%760, newshape=[1404]) /* ty=Tensor[(1404), float32] */;
  %763 = @func_3332(%761, %762) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1404, 1), float32], Tensor[(1152), float32], Tensor[(1404), float32]) */;
  %764 = %763.2;
  (%758, %764, %var_11693)
}

def @func_9078() -> (Tensor[(8, 2, 9), float32],) {
  %765 = @func_3363() /* ty=(Tensor[(8, 2, 9), float32],) */;
  %766 = %765.0;
  (%766,)
}

def @func_1815(%var_1726: Tensor[(5, 5, 10), float32]) -> (Tensor[(16, 12, 6), float64], Tensor[(1152), float32], Tensor[(16, 12, 6), float64], Tensor[(3, 5, 14), float32], Tensor[(210), float32], Tensor[(35, 6), int64], Tensor[(1404), float32], Tensor[(5, 5, 10), float32], Tensor[(3, 5, 14), float32]) {
  %767 = cast(meta[relay.Constant][41] /* ty=Tensor[(1152), float32] */, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %768 = reshape(%767, newshape=[16, 12, 6]) /* ty=Tensor[(16, 12, 6), float32] */;
  %769 = cast(meta[relay.Constant][41] /* ty=Tensor[(1152), float32] */, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %770 = reshape(%769, newshape=[16, 12, 6]) /* ty=Tensor[(16, 12, 6), float32] */;
  %771 = cast(meta[relay.Constant][42] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %772 = reshape(%771, newshape=[3, 5, 14]) /* ty=Tensor[(3, 5, 14), float32] */;
  %773 = @func_293(%772) /* ty=(Tensor[(3, 5, 14), float32],) */;
  %774 = cast(meta[relay.Constant][43] /* ty=Tensor[(1404), float32] */, dtype="float32") /* ty=Tensor[(1404), float32] */;
  %775 = reshape(%774, newshape=[9, 12, 13]) /* ty=Tensor[(9, 12, 13), float32] */;
  %776 = @func_1417(%775) /* ty=(Tensor[(9, 12, 13), float32], Tensor[(3, 5, 14), float32], Tensor[(35, 6), int64]) */;
  %777 = cast(%var_1726, dtype="float32") /* ty=Tensor[(5, 5, 10), float32] */;
  %778 = sqrt(%777) /* ty=Tensor[(5, 5, 10), float32] */;
  %779 = cast(%778, dtype="float32") /* ty=Tensor[(5, 5, 10), float32] */;
  %780 = asin(%779) /* ty=Tensor[(5, 5, 10), float32] */;
  %781 = cast(%780, dtype="float32") /* ty=Tensor[(5, 5, 10), float32] */;
  %782 = %773.0;
  %783 = cast(%782, dtype="float32") /* ty=Tensor[(3, 5, 14), float32] */;
  %784 = reshape(%783, newshape=[3, 5, 14]) /* ty=Tensor[(3, 5, 14), float32] */;
  %785 = @func_293(%784) /* ty=(Tensor[(3, 5, 14), float32],) */;
  %786 = @func_1446(%768) /* ty=Tensor[(16, 12, 6), float64] */;
  %787 = @func_1446(%770) /* ty=Tensor[(16, 12, 6), float64] */;
  %788 = %776.2;
  %789 = sin(%781) /* ty=Tensor[(5, 5, 10), float32] */;
  %790 = %785.0;
  (%786, meta[relay.Constant][41] /* ty=Tensor[(1152), float32] */, %787, %782, meta[relay.Constant][42] /* ty=Tensor[(210), float32] */, %788, meta[relay.Constant][43] /* ty=Tensor[(1404), float32] */, %789, %790)
}

def @func_3801(%var_3745: Tensor[(8, 2, 9), float64]) -> (Tensor[(8, 2, 9), bool], Tensor[(8, 2, 9), bool], Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float64], Tensor[(1152), float32]) {
  %791 = @func_2698() /* ty=(Tensor[(8, 2, 9), float64],) */;
  %792 = %791.0;
  %793 = cast(%var_3745, dtype="bool") /* ty=Tensor[(8, 2, 9), bool] */;
  %794 = shape_of(%792, dtype="int32") /* ty=Tensor[(3), int32] */;
  %795 = cast(%792, dtype="bool") /* ty=Tensor[(8, 2, 9), bool] */;
  %796 = dyn.reshape(%793, %794, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %797 = cast(meta[relay.Constant][44] /* ty=Tensor[(8, 2, 9), float64] */, dtype="bool") /* ty=Tensor[(8, 2, 9), bool] */;
  %798 = shape_of(%var_3745, dtype="int32") /* ty=Tensor[(3), int32] */;
  %799 = cast(%var_3745, dtype="bool") /* ty=Tensor[(8, 2, 9), bool] */;
  %800 = dyn.reshape(%797, %798, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %801 = @func_2898() /* ty=(Tensor[(1152), float32],) */;
  %802 = logical_and(%795, %796) /* ty=Tensor[(8, 2, 9), bool] */;
  %803 = equal(%799, %800) /* ty=Tensor[(8, 2, 9), bool] */;
  %804 = @func_2416() /* ty=Tensor[(8, 2, 9), float64] */;
  %805 = @func_2205() /* ty=Tensor[(8, 2, 9), float64] */;
  %806 = %801.0;
  (%802, %803, %804, %805, %806)
}

def @func_1917(%var_1915: Tensor[(250), float32]) -> (Tensor[(8, 2, 9), float64], Tensor[(5, 5, 10), float32], Tensor[(250), float32]) {
  %807 = cast(%var_1915, dtype="float32") /* ty=Tensor[(250), float32] */;
  %808 = reshape(%807, newshape=[5, 5, 10]) /* ty=Tensor[(5, 5, 10), float32] */;
  %809 = @func_1815(%808) /* ty=(Tensor[(16, 12, 6), float64], Tensor[(1152), float32], Tensor[(16, 12, 6), float64], Tensor[(3, 5, 14), float32], Tensor[(210), float32], Tensor[(35, 6), int64], Tensor[(1404), float32], Tensor[(5, 5, 10), float32], Tensor[(3, 5, 14), float32]) */;
  %810 = @func_1909() /* ty=Tensor[(8, 2, 9), float64] */;
  %811 = %809.7;
  (%810, %811, %var_1915)
}

def @func_6262() -> (Tensor[(250), bool],) {
  %812 = @func_2197() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1152), float32], Tensor[(250), float32]) */;
  %813 = %812.2;
  %814 = cast(meta[relay.Constant][45] /* ty=Tensor[(250), float32] */, dtype="bool") /* ty=Tensor[(250), bool] */;
  %815 = shape_of(%813, dtype="int32") /* ty=Tensor[(1), int32] */;
  %816 = cast(%813, dtype="bool") /* ty=Tensor[(250), bool] */;
  %817 = dyn.reshape(%814, %815, newshape=[]) /* ty=Tensor[(?), bool] */;
  %818 = logical_and(%816, %817) /* ty=Tensor[(250), bool] */;
  (%818,)
}

def @func_10576(%var_10547: Tensor[(8, 2, 9), float64]) -> (Tensor[(1152), float32], Tensor[(8, 2, 9), float32]) {
  %819 = @func_6600() /* ty=Tensor[(8, 2, 9), float64] */;
  %820 = cast(%var_10547, dtype="float32") /* ty=Tensor[(8, 2, 9), float32] */;
  %821 = shape_of(%819, dtype="int32") /* ty=Tensor[(3), int32] */;
  %822 = cast(%819, dtype="float32") /* ty=Tensor[(8, 2, 9), float32] */;
  %823 = dyn.reshape(%820, %821, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %824 = @func_8449() /* ty=Tensor[(1152), float32] */;
  %825 = floor_divide(%822, %823) /* ty=Tensor[(8, 2, 9), float32] */;
  (%824, %825)
}

def @func_8217() -> (Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64]) {
  %826 = @func_6503() /* ty=(Tensor[(8, 2, 9), float32],) */;
  %827 = @func_7097() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1404, 2), uint8]) */;
  %828 = %826.0;
  %829 = %827.0;
  (%828, %829)
}

def @func_2544(%var_2517: Tensor[(210), float32], %var_2521: Tensor[(250), float32]) -> (Tensor[(1152), float32], Tensor[(8, 2, 9), float64], Tensor[(16, 12, 6), float64], Tensor[(3, 5, 14), float32], Tensor[(210), float32], Tensor[(250), uint8], Tensor[(250), int32]) {
  %830 = @func_2369() /* ty=(Tensor[(1152), float32],) */;
  %831 = @func_2120() /* ty=(Tensor[(8, 2, 9), float64],) */;
  %832 = cast(meta[relay.Constant][46] /* ty=Tensor[(250), float32] */, dtype="float32") /* ty=Tensor[(250), float32] */;
  %833 = reshape(%832, newshape=[5, 5, 10]) /* ty=Tensor[(5, 5, 10), float32] */;
  %834 = @func_1815(%833) /* ty=(Tensor[(16, 12, 6), float64], Tensor[(1152), float32], Tensor[(16, 12, 6), float64], Tensor[(3, 5, 14), float32], Tensor[(210), float32], Tensor[(35, 6), int64], Tensor[(1404), float32], Tensor[(5, 5, 10), float32], Tensor[(3, 5, 14), float32]) */;
  %835 = cast(%var_2517, dtype="float32") /* ty=Tensor[(210), float32] */;
  %836 = reshape(%835, newshape=[3, 5, 14]) /* ty=Tensor[(3, 5, 14), float32] */;
  %837 = @func_293(%836) /* ty=(Tensor[(3, 5, 14), float32],) */;
  %838 = cast(%var_2521, dtype="float64") /* ty=Tensor[(250), float64] */;
  %839 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(250), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %840 = cast(meta[relay.Constant][46] /* ty=Tensor[(250), float32] */, dtype="float64") /* ty=Tensor[(250), float64] */;
  %841 = dyn.reshape(%838, %839, newshape=[]) /* ty=Tensor[(?), float64] */;
  %842 = power(%840, %841) /* ty=Tensor[(250), float64] */;
  %843 = cast(%842, dtype="uint8") /* ty=Tensor[(250), uint8] */;
  %844 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(250), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %845 = cast(meta[relay.Constant][46] /* ty=Tensor[(250), float32] */, dtype="uint8") /* ty=Tensor[(250), uint8] */;
  %846 = dyn.reshape(%843, %844, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %847 = cast(%842, dtype="int32") /* ty=Tensor[(250), int32] */;
  %848 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(250), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %849 = cast(meta[relay.Constant][46] /* ty=Tensor[(250), float32] */, dtype="int32") /* ty=Tensor[(250), int32] */;
  %850 = dyn.reshape(%847, %848, newshape=[]) /* ty=Tensor[(?), int32] */;
  %851 = %830.0;
  %852 = %831.0;
  %853 = %834.2;
  %854 = %837.0;
  %855 = minimum(%845, %846) /* ty=Tensor[(250), uint8] */;
  %856 = bitwise_or(%849, %850) /* ty=Tensor[(250), int32] */;
  (%851, %852, %853, %854, %var_2517, %855, %856)
}

def @func_8198() -> (Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(1152), float32]) {
  %857 = @func_2898() /* ty=(Tensor[(1152), float32],) */;
  %858 = @func_4610() /* ty=(Tensor[(8, 2, 9), float32], Tensor[(1152), float32], Tensor[(16, 12, 6), float64]) */;
  %859 = @func_4784() /* ty=Tensor[(1152), float32] */;
  %860 = %857.0;
  %861 = %858.1;
  (%859, %860, %861)
}

def @func_8158(%var_8156: Tensor[(3, 468), float32]) -> (Tensor[(1152), float32], Tensor[(1404, 6), uint16], Tensor[(3, 468), float32]) {
  %862 = @func_7402() /* ty=(Tensor[(1152), float32],) */;
  %863 = cast(%var_8156, dtype="float32") /* ty=Tensor[(3, 468), float32] */;
  %864 = reshape(%863, newshape=[702, 2]) /* ty=Tensor[(702, 2), float32] */;
  %865 = @func_6980(%864) /* ty=(Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(702, 2), float32], Tensor[(1404, 6), uint16]) */;
  %866 = %862.0;
  %867 = %865.3;
  (%866, %867, %var_8156)
}

def @func_11653() -> (Tensor[(8, 2, 9), float32], Tensor[(1152), float32]) {
  %868 = @func_9695() /* ty=(Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float32], Tensor[(1152), float32], Tensor[(1404), float32]) */;
  %869 = @func_8198() /* ty=(Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(1152), float32]) */;
  %870 = %868.1;
  %871 = %869.2;
  (%870, %871)
}

def @func_8687() -> (Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64]) {
  %872 = @func_8497() /* ty=(Tensor[(8, 2, 9), float64],) */;
  %873 = @func_8133() /* ty=Tensor[(8, 2, 9), float32] */;
  %874 = %872.0;
  (%873, %874)
}

def @func_2898() -> (Tensor[(1152), float32],) {
  %875 = @func_2648() /* ty=Tensor[(1152), float32] */;
  (%875,)
}

def @func_9534() -> Tensor[(1152), float32] {
  %876 = @func_6415() /* ty=(Tensor[(1152), float32],) */;
  %876.0
}

def @func_9319() -> Tensor[(1152), float32] {
  @func_9160() /* ty=Tensor[(1152), float32] */
}

def @func_7011() -> (Tensor[(8, 2, 9), float64], Tensor[(1152), float32]) {
  %877 = @func_2898() /* ty=(Tensor[(1152), float32],) */;
  %878 = @func_6237() /* ty=Tensor[(8, 2, 9), float64] */;
  %879 = %877.0;
  (%878, %879)
}

def @func_1446(%var_1440: Tensor[(16, 12, 6), float32]) -> Tensor[(16, 12, 6), float64] {
  %880 = cast(%var_1440, dtype="float32") /* ty=Tensor[(16, 12, 6), float32] */;
  %881 = sinh(%880) /* ty=Tensor[(16, 12, 6), float32] */;
  %882 = cast(%881, dtype="float64") /* ty=Tensor[(16, 12, 6), float64] */;
  rsqrt(%882) /* ty=Tensor[(16, 12, 6), float64] */
}

def @func_7893(%var_7889: Tensor[(2808), float32]) -> (Tensor[(1152), float32], Tensor[(1404, 2), bool], Tensor[(2808), float32]) {
  %883 = cast(%var_7889, dtype="float32") /* ty=Tensor[(2808), float32] */;
  %884 = cast(%var_7889, dtype="float64") /* ty=Tensor[(2808), float64] */;
  %885 = reshape(%883, newshape=[1404, 2]) /* ty=Tensor[(1404, 2), float32] */;
  %886 = reshape(%884, newshape=[1404, 2]) /* ty=Tensor[(1404, 2), float64] */;
  %887 = @func_3945(%885, %886) /* ty=(Tensor[(1404, 2), float64], Tensor[(1404, 2), bool]) */;
  %888 = @func_4784() /* ty=Tensor[(1152), float32] */;
  %889 = %887.1;
  (%888, %889, %var_7889)
}

def @func_2106(%var_2084: Tensor[(1152), float32], %var_2099: Tensor[(24), float32], %var_2100: Tensor[(105, 2), float32]) -> (Tensor[(8, 2, 9), float64], Tensor[(16, 12, 6), float64], Tensor[(1152), float32], Tensor[(8, 3, 210), bool], Tensor[(24), float32], Tensor[(105, 2), float32], Tensor[(8, 2, 9), float64]) {
  %890 = cast(%var_2084, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %891 = reshape(%890, newshape=[16, 12, 6]) /* ty=Tensor[(16, 12, 6), float32] */;
  %892 = cast(%var_2099, dtype="float32") /* ty=Tensor[(24), float32] */;
  %893 = cast(%var_2100, dtype="float32") /* ty=Tensor[(105, 2), float32] */;
  %894 = reshape(%892, newshape=[8, 3, 1]) /* ty=Tensor[(8, 3, 1), float32] */;
  %895 = reshape(%893, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %896 = @func_570(%894, %895) /* ty=(Tensor[(3, 5, 14), float32], Tensor[(8, 3, 210), int32], Tensor[(8, 3, 210), bool], Tensor[(3, 5, 14), float32]) */;
  %897 = @func_1957() /* ty=(Tensor[(8, 2, 9), float64],) */;
  %898 = @func_1909() /* ty=Tensor[(8, 2, 9), float64] */;
  %899 = @func_1446(%891) /* ty=Tensor[(16, 12, 6), float64] */;
  %900 = %896.2;
  %901 = %897.0;
  (%898, %899, %var_2084, %900, %var_2099, %var_2100, %901)
}

def @func_2648() -> Tensor[(1152), float32] {
  %902 = @func_2606() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1152), float32], Tensor[(1404), float32], Tensor[(4, 14, 12), float32]) */;
  %902.1
}

def @func_10182() -> Tensor[(1152), float32] {
  %903 = @func_8198() /* ty=(Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(1152), float32]) */;
  %903.1
}

def @func_9200() -> (Tensor[(1152), float32], Tensor[(8, 2, 9), float32]) {
  %904 = @func_8899() /* ty=(Tensor[(1152), float32],) */;
  %905 = @func_3898() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float32]) */;
  %906 = %904.0;
  %907 = %905.1;
  (%906, %907)
}

def @func_9933() -> Tensor[(1404, 2), uint8] {
  %908 = @func_8797() /* ty=(Tensor[(1404, 2), uint8],) */;
  %908.0
}

def @func_6600() -> Tensor[(8, 2, 9), float64] {
  @func_2416() /* ty=Tensor[(8, 2, 9), float64] */
}

def @func_2818(%var_2813: Tensor[(5, 15, 16), float32]) -> (Tensor[(5, 15, 16), float32],) {
  %909 = cast(%var_2813, dtype="float32") /* ty=Tensor[(5, 15, 16), float32] */;
  %910 = cos(%909) /* ty=Tensor[(5, 15, 16), float32] */;
  (%910,)
}

def @func_3260() -> (Tensor[(1152), float32],) {
  %911 = @func_2369() /* ty=(Tensor[(1152), float32],) */;
  %912 = %911.0;
  (%912,)
}

def @func_5248() -> (Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float32]) {
  %913 = @func_2786() /* ty=(Tensor[(8, 2, 9), float32],) */;
  %914 = @func_2786() /* ty=(Tensor[(8, 2, 9), float32],) */;
  %915 = %913.0;
  %916 = %914.0;
  (%915, %916)
}

def @func_3880() -> Tensor[(1152), float32] {
  @func_3239() /* ty=Tensor[(1152), float32] */
}

def @func_5573() -> Tensor[(8, 2, 9), float32] {
  %917 = @func_3659() /* ty=(Tensor[(8, 2, 9), float32],) */;
  %917.0
}

def @func_11015() -> Tensor[(1152), float32] {
  @func_9534() /* ty=Tensor[(1152), float32] */
}

def @func_6944() -> Tensor[(8, 2, 9), float32] {
  @func_5573() /* ty=Tensor[(8, 2, 9), float32] */
}

def @func_5074(%var_5059: Tensor[(210), float32], %var_5060: Tensor[(250), float32]) -> (Tensor[(8, 2, 9), float64], Tensor[(1152), float32], Tensor[(16, 12, 6), float64], Tensor[(210), float32], Tensor[(250), float32], Tensor[(1152), float32]) {
  %918 = @func_4339() /* ty=(Tensor[(8, 2, 9), float64],) */;
  %919 = cast(%var_5059, dtype="float32") /* ty=Tensor[(210), float32] */;
  %920 = cast(%var_5060, dtype="float32") /* ty=Tensor[(250), float32] */;
  %921 = reshape(%919, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %922 = reshape(%920, newshape=[250]) /* ty=Tensor[(250), float32] */;
  %923 = @func_2544(%921, %922) /* ty=(Tensor[(1152), float32], Tensor[(8, 2, 9), float64], Tensor[(16, 12, 6), float64], Tensor[(3, 5, 14), float32], Tensor[(210), float32], Tensor[(250), uint8], Tensor[(250), int32]) */;
  %924 = @func_2369() /* ty=(Tensor[(1152), float32],) */;
  %925 = %918.0;
  %926 = @func_4784() /* ty=Tensor[(1152), float32] */;
  %927 = %923.2;
  %928 = %924.0;
  (%925, %926, %927, %var_5059, %var_5060, %928)
}

def @func_5739() -> (Tensor[(1152), float32], Tensor[(6, 15, 6), bool], Tensor[(540, 1), uint16]) {
  %929 = cast(meta[relay.Constant][47] /* ty=Tensor[(540, 1), uint16] */, dtype="uint16") /* ty=Tensor[(540, 1), uint16] */;
  %930 = cast(meta[relay.Constant][47] /* ty=Tensor[(540, 1), uint16] */, dtype="uint16") /* ty=Tensor[(540, 1), uint16] */;
  %931 = reshape(%929, newshape=[6, 15, 6]) /* ty=Tensor[(6, 15, 6), uint16] */;
  %932 = reshape(%930, newshape=[6, 15, 6]) /* ty=Tensor[(6, 15, 6), uint16] */;
  %933 = @func_3239() /* ty=Tensor[(1152), float32] */;
  %934 = @func_5672(%931, %932) /* ty=Tensor[(6, 15, 6), bool] */;
  (%933, %934, meta[relay.Constant][47] /* ty=Tensor[(540, 1), uint16] */)
}

def @func_6980(%var_6970: Tensor[(702, 2), float32]) -> (Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(702, 2), float32], Tensor[(1404, 6), uint16]) {
  %935 = @func_6415() /* ty=(Tensor[(1152), float32],) */;
  %936 = @func_3260() /* ty=(Tensor[(1152), float32],) */;
  %937 = cast(%var_6970, dtype="float32") /* ty=Tensor[(702, 2), float32] */;
  %938 = reshape(%937, newshape=[1404]) /* ty=Tensor[(1404), float32] */;
  %939 = @func_5134(%938) /* ty=(Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64], Tensor[(1404, 1), float32], Tensor[(1152), float32], Tensor[(1404), float32], Tensor[(8, 2, 9), float64]) */;
  %940 = %939.2;
  %941 = cast(%940, dtype="uint16") /* ty=Tensor[(1404, 1), uint16] */;
  %942 = cast(meta[relay.Constant][48] /* ty=Tensor[(1404, 6), float32] */, dtype="uint16") /* ty=Tensor[(1404, 6), uint16] */;
  %943 = %935.0;
  %944 = %936.0;
  %945 = left_shift(%941, %942) /* ty=Tensor[(1404, 6), uint16] */;
  (%943, %944, %var_6970, %945)
}

def @func_9104() -> (Tensor[(8, 2, 9), float64],) {
  %946 = @func_8497() /* ty=(Tensor[(8, 2, 9), float64],) */;
  %947 = %946.0;
  (%947,)
}

def @func_9384() -> Tensor[(8, 2, 9), float64] {
  %948 = @func_4496() /* ty=(Tensor[(1152), float32], Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64], Tensor[(1404), float32]) */;
  %948.2
}

def @func_9555() -> (Tensor[(8, 2, 9), float64], Tensor[(1404), float32]) {
  %949 = @func_3280() /* ty=(Tensor[(8, 2, 9), float64],) */;
  %950 = @func_4496() /* ty=(Tensor[(1152), float32], Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64], Tensor[(1404), float32]) */;
  %951 = %949.0;
  %952 = %950.3;
  (%951, %952)
}

def @func_6604() -> Tensor[(6, 15, 6), bool] {
  %953 = @func_5739() /* ty=(Tensor[(1152), float32], Tensor[(6, 15, 6), bool], Tensor[(540, 1), uint16]) */;
  %953.1
}

def @func_9695() -> (Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float32], Tensor[(1152), float32], Tensor[(1404), float32]) {
  %954 = @func_3363() /* ty=(Tensor[(8, 2, 9), float32],) */;
  %955 = cast(meta[relay.Constant][49] /* ty=Tensor[(1404), float32] */, dtype="float32") /* ty=Tensor[(1404), float32] */;
  %956 = reshape(%955, newshape=[3, 468]) /* ty=Tensor[(3, 468), float32] */;
  %957 = @func_8158(%956) /* ty=(Tensor[(1152), float32], Tensor[(1404, 6), uint16], Tensor[(3, 468), float32]) */;
  %958 = @func_7691() /* ty=Tensor[(8, 2, 9), float32] */;
  %959 = %954.0;
  %960 = %957.0;
  (%958, %959, %960, meta[relay.Constant][49] /* ty=Tensor[(1404), float32] */)
}

def @func_4719(%var_4691: Tensor[(3, 5, 14), float32], %var_4711: Tensor[(1152, 1), float32]) -> (Tensor[(8, 2, 9), float32], Tensor[(210), float32], uint64, Tensor[(8, 2, 9), float64], Tensor[(3, 5, 14), bool], Tensor[(7, 1, 9), float32], Tensor[(8, 2, 9), float64], Tensor[(1152, 1), float32], Tensor[(1404), float32]) {
  %961 = @func_2786() /* ty=(Tensor[(8, 2, 9), float32],) */;
  %962 = @func_2197() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1152), float32], Tensor[(250), float32]) */;
  %963 = cast(meta[relay.Constant][50] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %964 = reshape(%963, newshape=[3, 5, 14]) /* ty=Tensor[(3, 5, 14), float32] */;
  %965 = @func_293(%964) /* ty=(Tensor[(3, 5, 14), float32],) */;
  %966 = %965.0;
  %967 = cast(%var_4691, dtype="bool") /* ty=Tensor[(3, 5, 14), bool] */;
  %968 = shape_of(%966, dtype="int32") /* ty=Tensor[(3), int32] */;
  %969 = cast(%966, dtype="bool") /* ty=Tensor[(3, 5, 14), bool] */;
  %970 = dyn.reshape(%967, %968, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %971 = cast(meta[relay.Constant][51] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %972 = reshape(%971, newshape=[]) /* ty=uint64 */;
  %973 = @func_4445(%972) /* ty=(Tensor[(7, 1, 9), bool], Tensor[(8, 2, 9), float64]) */;
  %974 = %973.0;
  %975 = cast(%974, dtype="float32") /* ty=Tensor[(7, 1, 9), float32] */;
  %976 = cast(%var_4711, dtype="float32") /* ty=Tensor[(1152, 1), float32] */;
  %977 = cast(meta[relay.Constant][52] /* ty=Tensor[(1404), float32] */, dtype="float32") /* ty=Tensor[(1404), float32] */;
  %978 = reshape(%976, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %979 = reshape(%977, newshape=[1404, 1]) /* ty=Tensor[(1404, 1), float32] */;
  %980 = @func_2167(%978, %979) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(5, 5, 10), float32], Tensor[(250), float32], Tensor[(16, 12, 6), float64], Tensor[(1152), float32], Tensor[(3, 5, 14), float32], Tensor[(1404, 1), float32]) */;
  %981 = %961.0;
  %982 = %962.0;
  %983 = less(%969, %970) /* ty=Tensor[(3, 5, 14), bool] */;
  %984 = log(%975) /* ty=Tensor[(7, 1, 9), float32] */;
  %985 = %980.0;
  (%981, meta[relay.Constant][50] /* ty=Tensor[(210), float32] */, meta[relay.Constant][51] /* ty=uint64 */, %982, %983, %984, %985, %var_4711, meta[relay.Constant][52] /* ty=Tensor[(1404), float32] */)
}

def @func_3280() -> (Tensor[(8, 2, 9), float64],) {
  %986 = @func_2416() /* ty=Tensor[(8, 2, 9), float64] */;
  (%986,)
}

def @func_8062() -> Tensor[(8, 2, 9), float32] {
  %987 = @func_5248() /* ty=(Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float32]) */;
  %987.0
}

def @func_2713() -> (Tensor[(1152), float32], Tensor[(1404, 1), float32], Tensor[(9, 156), float32]) {
  %988 = @func_2648() /* ty=Tensor[(1152), float32] */;
  %989 = cast(%988, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %990 = cast(meta[relay.Constant][53] /* ty=Tensor[(9, 156), float32] */, dtype="float32") /* ty=Tensor[(9, 156), float32] */;
  %991 = reshape(%989, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %992 = reshape(%990, newshape=[1404, 1]) /* ty=Tensor[(1404, 1), float32] */;
  %993 = @func_2167(%991, %992) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(5, 5, 10), float32], Tensor[(250), float32], Tensor[(16, 12, 6), float64], Tensor[(1152), float32], Tensor[(3, 5, 14), float32], Tensor[(1404, 1), float32]) */;
  %994 = %993.6;
  (%988, %994, meta[relay.Constant][53] /* ty=Tensor[(9, 156), float32] */)
}

def @func_3149(%var_3088: Tensor[(250), float32], %var_3111: Tensor[(250), float32]) -> (Tensor[(8, 2, 9), float32], Tensor[(5, 5, 10), float32], Tensor[(250), bool], Tensor[(8, 3, 210), int32], Tensor[(24), float32], Tensor[(210), float32]) {
  %995 = @func_2786() /* ty=(Tensor[(8, 2, 9), float32],) */;
  %996 = cast(%var_3088, dtype="float32") /* ty=Tensor[(250), float32] */;
  %997 = reshape(%996, newshape=[250]) /* ty=Tensor[(250), float32] */;
  %998 = @func_1917(%997) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(5, 5, 10), float32], Tensor[(250), float32]) */;
  %999 = cast(%var_3111, dtype="bool") /* ty=Tensor[(250), bool] */;
  %1000 = shape_of(%var_3088, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1001 = cast(%var_3088, dtype="bool") /* ty=Tensor[(250), bool] */;
  %1002 = dyn.reshape(%999, %1000, newshape=[]) /* ty=Tensor[(?), bool] */;
  %1003 = cast(meta[relay.Constant][54] /* ty=Tensor[(24), float32] */, dtype="float32") /* ty=Tensor[(24), float32] */;
  %1004 = cast(meta[relay.Constant][55] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %1005 = reshape(%1003, newshape=[8, 3, 1]) /* ty=Tensor[(8, 3, 1), float32] */;
  %1006 = reshape(%1004, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %1007 = @func_570(%1005, %1006) /* ty=(Tensor[(3, 5, 14), float32], Tensor[(8, 3, 210), int32], Tensor[(8, 3, 210), bool], Tensor[(3, 5, 14), float32]) */;
  %1008 = %995.0;
  %1009 = %998.1;
  %1010 = less_equal(%1001, %1002) /* ty=Tensor[(250), bool] */;
  %1011 = %1007.1;
  (%1008, %1009, %1010, %1011, meta[relay.Constant][54] /* ty=Tensor[(24), float32] */, meta[relay.Constant][55] /* ty=Tensor[(210), float32] */)
}

def @func_2369() -> (Tensor[(1152), float32],) {
  %1012 = @func_2197() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1152), float32], Tensor[(250), float32]) */;
  %1013 = %1012.1;
  (%1013,)
}

def @func_3620() -> (Tensor[(8, 2, 9), float32],) {
  %1014 = @func_2786() /* ty=(Tensor[(8, 2, 9), float32],) */;
  %1015 = %1014.0;
  (%1015,)
}

def @func_6490() -> (Tensor[(1152), float32],) {
  %1016 = @func_4000() /* ty=(Tensor[(1152), float32],) */;
  %1017 = %1016.0;
  (%1017,)
}

def @func_8317() -> Tensor[(1152), float32] {
  @func_2648() /* ty=Tensor[(1152), float32] */
}

def @func_10376() -> (Tensor[(8, 2, 9), float64], Tensor[(1152), float32]) {
  %1018 = @func_3280() /* ty=(Tensor[(8, 2, 9), float64],) */;
  %1019 = %1018.0;
  %1020 = @func_8317() /* ty=Tensor[(1152), float32] */;
  (%1019, %1020)
}

def @func_8248() -> (Tensor[(6, 5, 11), float64], Tensor[(1152), float32], Tensor[(6, 5, 11), bool]) {
  %1021 = cast(meta[relay.Constant][57] /* ty=Tensor[(6, 5, 11), float64] */, dtype="float64") /* ty=Tensor[(6, 5, 11), float64] */;
  %1022 = shape_of(meta[relay.Constant][56] /* ty=Tensor[(6, 5, 11), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1023 = cast(meta[relay.Constant][56] /* ty=Tensor[(6, 5, 11), float64] */, dtype="float64") /* ty=Tensor[(6, 5, 11), float64] */;
  %1024 = dyn.reshape(%1021, %1022, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1025 = @func_6065() /* ty=(Tensor[(250), int8], Tensor[(250), float64], Tensor[(1152), float32]) */;
  %1026 = cast(meta[relay.Constant][56] /* ty=Tensor[(6, 5, 11), float64] */, dtype="bool") /* ty=Tensor[(6, 5, 11), bool] */;
  %1027 = shape_of(meta[relay.Constant][57] /* ty=Tensor[(6, 5, 11), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1028 = cast(meta[relay.Constant][57] /* ty=Tensor[(6, 5, 11), float64] */, dtype="bool") /* ty=Tensor[(6, 5, 11), bool] */;
  %1029 = dyn.reshape(%1026, %1027, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1030 = add(%1023, %1024) /* ty=Tensor[(6, 5, 11), float64] */;
  %1031 = %1025.2;
  %1032 = greater_equal(%1028, %1029) /* ty=Tensor[(6, 5, 11), bool] */;
  (%1030, %1031, %1032)
}

def @func_10589() -> (Tensor[(8, 2, 9), float64],) {
  %1033 = @func_9104() /* ty=(Tensor[(8, 2, 9), float64],) */;
  %1034 = %1033.0;
  (%1034,)
}

def @func_8302(%var_8297: uint8, %var_8298: Tensor[(1, 12, 3), uint8]) -> (Tensor[(1, 12, 3), uint8],) {
  %1035 = cast(%var_8297, dtype="uint8") /* ty=uint8 */;
  %1036 = cast(%var_8298, dtype="uint8") /* ty=Tensor[(1, 12, 3), uint8] */;
  %1037 = bitwise_and(%1035, %1036) /* ty=Tensor[(1, 12, 3), uint8] */;
  (%1037,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_10049() -> (Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float64], Tensor[(1404), float32], Tensor[(6, 13, 5), bool]) {
  %12 = fn () -> (Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float64], Tensor[(1404), float32], Tensor[(6, 13, 5), bool]) {
    %0 = @func_3584() /* ty=(Tensor[(1152), float32], Tensor[(7, 15, 9), float64], Tensor[(7, 15, 9), float64], Tensor[(8, 2, 9), float64]) */;
    %1 = @func_9695() /* ty=(Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float32], Tensor[(1152), float32], Tensor[(1404), float32]) */;
    %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 13, 5), float32] */, dtype="float32") /* ty=Tensor[(6, 13, 5), float32] */;
    %3 = exp(%2) /* ty=Tensor[(6, 13, 5), float32] */;
    %4 = cast(%3, dtype="bool") /* ty=Tensor[(6, 13, 5), bool] */;
    %5 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(6, 13, 5), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 13, 5), float32] */, dtype="bool") /* ty=Tensor[(6, 13, 5), bool] */;
    %7 = dyn.reshape(%4, %5, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %8 = @func_6398() /* ty=Tensor[(8, 2, 9), float64] */;
    %9 = %0.3;
    %10 = %1.3;
    %11 = greater_equal(%6, %7) /* ty=Tensor[(6, 13, 5), bool] */;
    (%8, %9, %10, %11)
  };
  %12() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float64], Tensor[(1404), float32], Tensor[(6, 13, 5), bool]) */
}

def @func_8688() -> (Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64]) {
  %16 = fn () -> (Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64]) {
    %13 = @func_8497() /* ty=(Tensor[(8, 2, 9), float64],) */;
    %14 = @func_8133() /* ty=Tensor[(8, 2, 9), float32] */;
    %15 = %13.0;
    (%14, %15)
  };
  %16() /* ty=(Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64]) */
}

def @func_4864() -> Tensor[(8, 2, 9), float32] {
  %18 = fn () -> Tensor[(8, 2, 9), float32] {
    %17 = @func_3659() /* ty=(Tensor[(8, 2, 9), float32],) */;
    %17.0
  };
  %18() /* ty=Tensor[(8, 2, 9), float32] */
}

def @func_7825(%var_7824: Tensor[(2, 576), float32]) -> (Tensor[(8, 2, 9), float32], Tensor[(1404), float32], Tensor[(1404), float32], Tensor[(2, 576), float32], Tensor[(9, 156), float32]) {
  %37 = fn (%var_7780: Tensor[(2, 576), float32]) -> (Tensor[(8, 2, 9), float32], Tensor[(1404), float32], Tensor[(1404), float32], Tensor[(2, 576), float32], Tensor[(9, 156), float32]) {
    %19 = @func_7381() /* ty=(Tensor[(8, 2, 9), float32],) */;
    %20 = cast(%var_7780, dtype="float32") /* ty=Tensor[(2, 576), float32] */;
    %21 = cast(meta[relay.Constant][1] /* ty=Tensor[(1404), float32] */, dtype="float32") /* ty=Tensor[(1404), float32] */;
    %22 = reshape(%20, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
    %23 = reshape(%21, newshape=[1404]) /* ty=Tensor[(1404), float32] */;
    %24 = @func_3332(%22, %23) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1404, 1), float32], Tensor[(1152), float32], Tensor[(1404), float32]) */;
    %25 = cast(%var_7780, dtype="float32") /* ty=Tensor[(2, 576), float32] */;
    %26 = sin(%25) /* ty=Tensor[(2, 576), float32] */;
    %27 = cast(%26, dtype="float64") /* ty=Tensor[(2, 576), float64] */;
    %28 = exp(%27) /* ty=Tensor[(2, 576), float64] */;
    %29 = cast(%28, dtype="float32") /* ty=Tensor[(2, 576), float32] */;
    %30 = asin(%29) /* ty=Tensor[(2, 576), float32] */;
    %31 = cast(%30, dtype="float32") /* ty=Tensor[(2, 576), float32] */;
    %32 = @func_2713() /* ty=(Tensor[(1152), float32], Tensor[(1404, 1), float32], Tensor[(9, 156), float32]) */;
    %33 = %19.0;
    %34 = %24.3;
    %35 = cos(%31) /* ty=Tensor[(2, 576), float32] */;
    %36 = %32.2;
    (%33, %34, meta[relay.Constant][1] /* ty=Tensor[(1404), float32] */, %35, %36)
  };
  %37(%var_7824) /* ty=(Tensor[(8, 2, 9), float32], Tensor[(1404), float32], Tensor[(1404), float32], Tensor[(2, 576), float32], Tensor[(9, 156), float32]) */
}

def @func_9536() -> Tensor[(1152), float32] {
  @func_9534() /* ty=Tensor[(1152), float32] */
}

def @func_11124() -> (Tensor[(1404), float32],) {
  @func_11122() /* ty=(Tensor[(1404), float32],) */
}

def @func_7895(%var_7894: Tensor[(2808), float32]) -> (Tensor[(1152), float32], Tensor[(1404, 2), bool], Tensor[(2808), float32]) {
  %45 = fn (%var_7889: Tensor[(2808), float32]) -> (Tensor[(1152), float32], Tensor[(1404, 2), bool], Tensor[(2808), float32]) {
    %38 = cast(%var_7889, dtype="float32") /* ty=Tensor[(2808), float32] */;
    %39 = cast(%var_7889, dtype="float64") /* ty=Tensor[(2808), float64] */;
    %40 = reshape(%38, newshape=[1404, 2]) /* ty=Tensor[(1404, 2), float32] */;
    %41 = reshape(%39, newshape=[1404, 2]) /* ty=Tensor[(1404, 2), float64] */;
    %42 = @func_3945(%40, %41) /* ty=(Tensor[(1404, 2), float64], Tensor[(1404, 2), bool]) */;
    %43 = @func_4784() /* ty=Tensor[(1152), float32] */;
    %44 = %42.1;
    (%43, %44, %var_7889)
  };
  %45(%var_7894) /* ty=(Tensor[(1152), float32], Tensor[(1404, 2), bool], Tensor[(2808), float32]) */
}

def @func_7013() -> (Tensor[(8, 2, 9), float64], Tensor[(1152), float32]) {
  @func_7011() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1152), float32]) */
}

def @func_7560() -> (Tensor[(1152), float32], Tensor[(8, 2, 9), float64], Tensor[(7, 15, 9), float64], Tensor[(315, 3), int16]) {
  %46 = @func_6889() /* ty=(Tensor[(1152), float32], Tensor[(35, 6), int32]) */;
  %47 = cast(meta[relay.Constant][2] /* ty=Tensor[(315, 3), int16] */, dtype="int16") /* ty=Tensor[(315, 3), int16] */;
  %48 = reshape(%47, newshape=[7, 15, 9]) /* ty=Tensor[(7, 15, 9), int16] */;
  %49 = @func_3355(%48) /* ty=(Tensor[(7, 15, 9), int16], Tensor[(7, 15, 9), float64]) */;
  %50 = %46.0;
  %51 = @func_6237() /* ty=Tensor[(8, 2, 9), float64] */;
  %52 = %49.1;
  (%50, %51, %52, meta[relay.Constant][2] /* ty=Tensor[(315, 3), int16] */)
}

def @func_2455() -> (Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float64]) {
  %53 = @func_2120() /* ty=(Tensor[(8, 2, 9), float64],) */;
  %54 = @func_2416() /* ty=Tensor[(8, 2, 9), float64] */;
  %55 = %53.0;
  (%54, %55)
}

def @func_6131() -> Tensor[(8, 2, 9), float32] {
  %57 = fn () -> Tensor[(8, 2, 9), float32] {
    %56 = @func_3659() /* ty=(Tensor[(8, 2, 9), float32],) */;
    %56.0
  };
  %57() /* ty=Tensor[(8, 2, 9), float32] */
}

def @func_3281() -> (Tensor[(8, 2, 9), float64],) {
  %59 = fn () -> (Tensor[(8, 2, 9), float64],) {
    %58 = @func_2416() /* ty=Tensor[(8, 2, 9), float64] */;
    (%58,)
  };
  %59() /* ty=(Tensor[(8, 2, 9), float64],) */
}

def @func_4497() -> (Tensor[(1152), float32], Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64], Tensor[(1404), float32]) {
  %69 = fn () -> (Tensor[(1152), float32], Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64], Tensor[(1404), float32]) {
    %60 = @func_3363() /* ty=(Tensor[(8, 2, 9), float32],) */;
    %61 = @func_3239() /* ty=Tensor[(1152), float32] */;
    %62 = cast(%61, dtype="float32") /* ty=Tensor[(1152), float32] */;
    %63 = cast(meta[relay.Constant][3] /* ty=Tensor[(1404), float32] */, dtype="float32") /* ty=Tensor[(1404), float32] */;
    %64 = reshape(%62, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
    %65 = reshape(%63, newshape=[1404, 1]) /* ty=Tensor[(1404, 1), float32] */;
    %66 = @func_2167(%64, %65) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(5, 5, 10), float32], Tensor[(250), float32], Tensor[(16, 12, 6), float64], Tensor[(1152), float32], Tensor[(3, 5, 14), float32], Tensor[(1404, 1), float32]) */;
    %67 = %60.0;
    %68 = %66.0;
    (%61, %67, %68, meta[relay.Constant][3] /* ty=Tensor[(1404), float32] */)
  };
  %69() /* ty=(Tensor[(1152), float32], Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64], Tensor[(1404), float32]) */
}

def @func_7065() -> (Tensor[(6, 15, 6), bool], Tensor[(8, 2, 9), float64]) {
  %73 = fn () -> (Tensor[(6, 15, 6), bool], Tensor[(8, 2, 9), float64]) {
    %70 = @func_3044() /* ty=(Tensor[(8, 2, 9), float64],) */;
    %71 = @func_6604() /* ty=Tensor[(6, 15, 6), bool] */;
    %72 = %70.0;
    (%71, %72)
  };
  %73() /* ty=(Tensor[(6, 15, 6), bool], Tensor[(8, 2, 9), float64]) */
}

def @func_7495() -> (Tensor[(1404), float32], Tensor[(6, 15, 6), bool]) {
  @func_7493() /* ty=(Tensor[(1404), float32], Tensor[(6, 15, 6), bool]) */
}

def @func_6889() -> (Tensor[(1152), float32], Tensor[(35, 6), int32]) {
  %74 = @func_6310() /* ty=(Tensor[(1152), float32], Tensor[(250), bool], Tensor[(8, 2, 9), float64]) */;
  %75 = @func_2811() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(35, 6), int64], Tensor[(5, 50), float32]) */;
  %76 = %75.1;
  %77 = cast(meta[relay.Constant][4] /* ty=Tensor[(35, 6), int64] */, dtype="int32") /* ty=Tensor[(35, 6), int32] */;
  %78 = shape_of(%76, dtype="int32") /* ty=Tensor[(2), int32] */;
  %79 = cast(%76, dtype="int32") /* ty=Tensor[(35, 6), int32] */;
  %80 = dyn.reshape(%77, %78, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %81 = %74.0;
  %82 = maximum(%79, %80) /* ty=Tensor[(35, 6), int32] */;
  (%81, %82)
}

def @func_10377() -> (Tensor[(8, 2, 9), float64], Tensor[(1152), float32]) {
  %86 = fn () -> (Tensor[(8, 2, 9), float64], Tensor[(1152), float32]) {
    %83 = @func_3280() /* ty=(Tensor[(8, 2, 9), float64],) */;
    %84 = %83.0;
    %85 = @func_8317() /* ty=Tensor[(1152), float32] */;
    (%84, %85)
  };
  %86() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1152), float32]) */
}

def @func_8449() -> Tensor[(1152), float32] {
  @func_3239() /* ty=Tensor[(1152), float32] */
}

def @func_8130() -> Tensor[(8, 2, 9), float32] {
  %88 = fn () -> Tensor[(8, 2, 9), float32] {
    %87 = @func_7381() /* ty=(Tensor[(8, 2, 9), float32],) */;
    %87.0
  };
  %88() /* ty=Tensor[(8, 2, 9), float32] */
}

def @func_6601() -> Tensor[(8, 2, 9), float64] {
  %89 = fn () -> Tensor[(8, 2, 9), float64] {
    @func_2416() /* ty=Tensor[(8, 2, 9), float64] */
  };
  %89() /* ty=Tensor[(8, 2, 9), float64] */
}

def @func_5077(%var_5075: Tensor[(210), float32], %var_5076: Tensor[(250), float32]) -> (Tensor[(8, 2, 9), float64], Tensor[(1152), float32], Tensor[(16, 12, 6), float64], Tensor[(210), float32], Tensor[(250), float32], Tensor[(1152), float32]) {
  %101 = fn (%var_5059: Tensor[(210), float32], %var_5060: Tensor[(250), float32]) -> (Tensor[(8, 2, 9), float64], Tensor[(1152), float32], Tensor[(16, 12, 6), float64], Tensor[(210), float32], Tensor[(250), float32], Tensor[(1152), float32]) {
    %90 = @func_4339() /* ty=(Tensor[(8, 2, 9), float64],) */;
    %91 = cast(%var_5059, dtype="float32") /* ty=Tensor[(210), float32] */;
    %92 = cast(%var_5060, dtype="float32") /* ty=Tensor[(250), float32] */;
    %93 = reshape(%91, newshape=[210]) /* ty=Tensor[(210), float32] */;
    %94 = reshape(%92, newshape=[250]) /* ty=Tensor[(250), float32] */;
    %95 = @func_2544(%93, %94) /* ty=(Tensor[(1152), float32], Tensor[(8, 2, 9), float64], Tensor[(16, 12, 6), float64], Tensor[(3, 5, 14), float32], Tensor[(210), float32], Tensor[(250), uint8], Tensor[(250), int32]) */;
    %96 = @func_2369() /* ty=(Tensor[(1152), float32],) */;
    %97 = %90.0;
    %98 = @func_4784() /* ty=Tensor[(1152), float32] */;
    %99 = %95.2;
    %100 = %96.0;
    (%97, %98, %99, %var_5059, %var_5060, %100)
  };
  %101(%var_5075, %var_5076) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1152), float32], Tensor[(16, 12, 6), float64], Tensor[(210), float32], Tensor[(250), float32], Tensor[(1152), float32]) */
}

def @func_7382() -> (Tensor[(8, 2, 9), float32],) {
  %103 = fn () -> (Tensor[(8, 2, 9), float32],) {
    %102 = @func_4863() /* ty=Tensor[(8, 2, 9), float32] */;
    (%102,)
  };
  %103() /* ty=(Tensor[(8, 2, 9), float32],) */
}

def @func_6564(%var_6528: Tensor[(945), int16]) -> (Tensor[(8, 2, 9), float64], Tensor[(7, 15, 9), float64], Tensor[(945), int16], Tensor[(1152), float32]) {
  %104 = @func_4339() /* ty=(Tensor[(8, 2, 9), float64],) */;
  %105 = cast(%var_6528, dtype="int16") /* ty=Tensor[(945), int16] */;
  %106 = reshape(%105, newshape=[7, 15, 9]) /* ty=Tensor[(7, 15, 9), int16] */;
  %107 = @func_3355(%106) /* ty=(Tensor[(7, 15, 9), int16], Tensor[(7, 15, 9), float64]) */;
  %108 = %104.0;
  %109 = %107.1;
  %110 = @func_3685() /* ty=Tensor[(1152), float32] */;
  (%108, %109, %var_6528, %110)
}

def @func_4894(%var_4888: Tensor[(1152), float32]) -> Tensor[(1152), int64] {
  %111 = @func_4145() /* ty=(Tensor[(1152), float32],) */;
  %112 = %111.0;
  %113 = cast(%var_4888, dtype="int64") /* ty=Tensor[(1152), int64] */;
  %114 = shape_of(%112, dtype="int32") /* ty=Tensor[(1), int32] */;
  %115 = cast(%112, dtype="int64") /* ty=Tensor[(1152), int64] */;
  %116 = dyn.reshape(%113, %114, newshape=[]) /* ty=Tensor[(?), int64] */;
  bitwise_or(%115, %116) /* ty=Tensor[(1152), int64] */
}

def @func_8498() -> (Tensor[(8, 2, 9), float64],) {
  %119 = fn () -> (Tensor[(8, 2, 9), float64],) {
    %117 = @func_6805() /* ty=(Tensor[(1152), float32], Tensor[(8, 2, 9), float64]) */;
    %118 = %117.1;
    (%118,)
  };
  %119() /* ty=(Tensor[(8, 2, 9), float64],) */
}

def @func_2899() -> (Tensor[(1152), float32],) {
  %121 = fn () -> (Tensor[(1152), float32],) {
    %120 = @func_2648() /* ty=Tensor[(1152), float32] */;
    (%120,)
  };
  %121() /* ty=(Tensor[(1152), float32],) */
}

def @func_3239() -> Tensor[(1152), float32] {
  %122 = @func_2898() /* ty=(Tensor[(1152), float32],) */;
  %122.0
}

def @func_2727(%var_2715: Tensor[(9, 16, 1), uint32], %var_2716: Tensor[(9, 16, 2), uint32]) -> (Tensor[(9, 16, 2), bool], Tensor[(1404, 1), float32]) {
  %123 = cast(%var_2715, dtype="bool") /* ty=Tensor[(9, 16, 1), bool] */;
  %124 = cast(%var_2716, dtype="bool") /* ty=Tensor[(9, 16, 2), bool] */;
  %125 = @func_2713() /* ty=(Tensor[(1152), float32], Tensor[(1404, 1), float32], Tensor[(9, 156), float32]) */;
  %126 = greater(%123, %124) /* ty=Tensor[(9, 16, 2), bool] */;
  %127 = %125.1;
  (%126, %127)
}

def @func_3260() -> (Tensor[(1152), float32],) {
  %128 = @func_2369() /* ty=(Tensor[(1152), float32],) */;
  %129 = %128.0;
  (%129,)
}

def @func_8451() -> Tensor[(1152), float32] {
  @func_8449() /* ty=Tensor[(1152), float32] */
}

def @func_5134(%var_5112: Tensor[(1404), float32]) -> (Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64], Tensor[(1404, 1), float32], Tensor[(1152), float32], Tensor[(1404), float32], Tensor[(8, 2, 9), float64]) {
  %130 = @func_3363() /* ty=(Tensor[(8, 2, 9), float32],) */;
  %131 = @func_2786() /* ty=(Tensor[(8, 2, 9), float32],) */;
  %132 = %131.0;
  %133 = cast(%132, dtype="float64") /* ty=Tensor[(8, 2, 9), float64] */;
  %134 = cast(meta[relay.Constant][5] /* ty=Tensor[(1152), float32] */, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %135 = cast(%var_5112, dtype="float32") /* ty=Tensor[(1404), float32] */;
  %136 = reshape(%134, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %137 = reshape(%135, newshape=[1404, 1]) /* ty=Tensor[(1404, 1), float32] */;
  %138 = @func_2167(%136, %137) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(5, 5, 10), float32], Tensor[(250), float32], Tensor[(16, 12, 6), float64], Tensor[(1152), float32], Tensor[(3, 5, 14), float32], Tensor[(1404, 1), float32]) */;
  %139 = @func_2455() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float64]) */;
  %140 = %130.0;
  %141 = sqrt(%133) /* ty=Tensor[(8, 2, 9), float64] */;
  %142 = %138.6;
  %143 = %139.1;
  (%140, %141, %142, meta[relay.Constant][5] /* ty=Tensor[(1152), float32] */, %var_5112, %143)
}

def @func_1959() -> (Tensor[(8, 2, 9), float64],) {
  @func_1957() /* ty=(Tensor[(8, 2, 9), float64],) */
}

def @func_6312() -> (Tensor[(1152), float32], Tensor[(250), bool], Tensor[(8, 2, 9), float64]) {
  @func_6310() /* ty=(Tensor[(1152), float32], Tensor[(250), bool], Tensor[(8, 2, 9), float64]) */
}

def @func_6451() -> (Tensor[(1152), float32],) {
  %144 = @func_2898() /* ty=(Tensor[(1152), float32],) */;
  %145 = %144.0;
  (%145,)
}

def @func_5137(%var_5135: Tensor[(1404), float32]) -> (Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64], Tensor[(1404, 1), float32], Tensor[(1152), float32], Tensor[(1404), float32], Tensor[(8, 2, 9), float64]) {
  @func_5134(%var_5135) /* ty=(Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64], Tensor[(1404, 1), float32], Tensor[(1152), float32], Tensor[(1404), float32], Tensor[(8, 2, 9), float64]) */
}

def @func_10104() -> (Tensor[(250), float32],) {
  @func_10102() /* ty=(Tensor[(250), float32],) */
}

def @func_2312(%var_2308: Tensor[(1152), float32], %var_2309: Tensor[(24), float32], %var_2310: Tensor[(210), float32], %var_2311: Tensor[(1, 250), float32]) -> (Tensor[(8, 2, 9), float64], Tensor[(16, 12, 6), float64], Tensor[(1152), float32], Tensor[(8, 2, 9), float64], Tensor[(24), float32], Tensor[(210), float32], Tensor[(16, 12, 6), float64], Tensor[(8, 2, 9), float64], Tensor[(1, 250), float32]) {
  %166 = fn (%var_2264: Tensor[(1152), float32], %var_2278: Tensor[(24), float32], %var_2279: Tensor[(210), float32], %var_2300: Tensor[(1, 250), float32]) -> (Tensor[(8, 2, 9), float64], Tensor[(16, 12, 6), float64], Tensor[(1152), float32], Tensor[(8, 2, 9), float64], Tensor[(24), float32], Tensor[(210), float32], Tensor[(16, 12, 6), float64], Tensor[(8, 2, 9), float64], Tensor[(1, 250), float32]) {
    %146 = @func_2120() /* ty=(Tensor[(8, 2, 9), float64],) */;
    %147 = cast(%var_2264, dtype="float32") /* ty=Tensor[(1152), float32] */;
    %148 = reshape(%147, newshape=[16, 12, 6]) /* ty=Tensor[(16, 12, 6), float32] */;
    %149 = cast(%var_2264, dtype="float32") /* ty=Tensor[(1152), float32] */;
    %150 = cast(%var_2278, dtype="float32") /* ty=Tensor[(24), float32] */;
    %151 = cast(%var_2279, dtype="float32") /* ty=Tensor[(210), float32] */;
    %152 = reshape(%149, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
    %153 = reshape(%150, newshape=[24]) /* ty=Tensor[(24), float32] */;
    %154 = reshape(%151, newshape=[105, 2]) /* ty=Tensor[(105, 2), float32] */;
    %155 = @func_2106(%152, %153, %154) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(16, 12, 6), float64], Tensor[(1152), float32], Tensor[(8, 3, 210), bool], Tensor[(24), float32], Tensor[(105, 2), float32], Tensor[(8, 2, 9), float64]) */;
    %156 = cast(%var_2264, dtype="float32") /* ty=Tensor[(1152), float32] */;
    %157 = reshape(%156, newshape=[16, 12, 6]) /* ty=Tensor[(16, 12, 6), float32] */;
    %158 = cast(%var_2300, dtype="float32") /* ty=Tensor[(1, 250), float32] */;
    %159 = reshape(%158, newshape=[250]) /* ty=Tensor[(250), float32] */;
    %160 = @func_1917(%159) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(5, 5, 10), float32], Tensor[(250), float32]) */;
    %161 = %146.0;
    %162 = @func_1446(%148) /* ty=Tensor[(16, 12, 6), float64] */;
    %163 = %155.6;
    %164 = @func_1446(%157) /* ty=Tensor[(16, 12, 6), float64] */;
    %165 = %160.0;
    (%161, %162, %var_2264, %163, %var_2278, %var_2279, %164, %165, %var_2300)
  };
  %166(%var_2308, %var_2309, %var_2310, %var_2311) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(16, 12, 6), float64], Tensor[(1152), float32], Tensor[(8, 2, 9), float64], Tensor[(24), float32], Tensor[(210), float32], Tensor[(16, 12, 6), float64], Tensor[(8, 2, 9), float64], Tensor[(1, 250), float32]) */
}

def @func_11016() -> Tensor[(1152), float32] {
  %167 = fn () -> Tensor[(1152), float32] {
    @func_9534() /* ty=Tensor[(1152), float32] */
  };
  %167() /* ty=Tensor[(1152), float32] */
}

def @func_7902() -> (Tensor[(250), float32],) {
  %168 = @func_5511() /* ty=(Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(210), float32], Tensor[(250), float32]) */;
  %169 = %168.3;
  (%169,)
}

def @func_8160(%var_8159: Tensor[(3, 468), float32]) -> (Tensor[(1152), float32], Tensor[(1404, 6), uint16], Tensor[(3, 468), float32]) {
  %176 = fn (%var_8156: Tensor[(3, 468), float32]) -> (Tensor[(1152), float32], Tensor[(1404, 6), uint16], Tensor[(3, 468), float32]) {
    %170 = @func_7402() /* ty=(Tensor[(1152), float32],) */;
    %171 = cast(%var_8156, dtype="float32") /* ty=Tensor[(3, 468), float32] */;
    %172 = reshape(%171, newshape=[702, 2]) /* ty=Tensor[(702, 2), float32] */;
    %173 = @func_6980(%172) /* ty=(Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(702, 2), float32], Tensor[(1404, 6), uint16]) */;
    %174 = %170.0;
    %175 = %173.3;
    (%174, %175, %var_8156)
  };
  %176(%var_8159) /* ty=(Tensor[(1152), float32], Tensor[(1404, 6), uint16], Tensor[(3, 468), float32]) */
}

def @func_3149(%var_3088: Tensor[(250), float32], %var_3111: Tensor[(250), float32]) -> (Tensor[(8, 2, 9), float32], Tensor[(5, 5, 10), float32], Tensor[(250), bool], Tensor[(8, 3, 210), int32], Tensor[(24), float32], Tensor[(210), float32]) {
  %177 = @func_2786() /* ty=(Tensor[(8, 2, 9), float32],) */;
  %178 = cast(%var_3088, dtype="float32") /* ty=Tensor[(250), float32] */;
  %179 = reshape(%178, newshape=[250]) /* ty=Tensor[(250), float32] */;
  %180 = @func_1917(%179) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(5, 5, 10), float32], Tensor[(250), float32]) */;
  %181 = cast(%var_3111, dtype="bool") /* ty=Tensor[(250), bool] */;
  %182 = shape_of(%var_3088, dtype="int32") /* ty=Tensor[(1), int32] */;
  %183 = cast(%var_3088, dtype="bool") /* ty=Tensor[(250), bool] */;
  %184 = dyn.reshape(%181, %182, newshape=[]) /* ty=Tensor[(?), bool] */;
  %185 = cast(meta[relay.Constant][6] /* ty=Tensor[(24), float32] */, dtype="float32") /* ty=Tensor[(24), float32] */;
  %186 = cast(meta[relay.Constant][7] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %187 = reshape(%185, newshape=[8, 3, 1]) /* ty=Tensor[(8, 3, 1), float32] */;
  %188 = reshape(%186, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %189 = @func_570(%187, %188) /* ty=(Tensor[(3, 5, 14), float32], Tensor[(8, 3, 210), int32], Tensor[(8, 3, 210), bool], Tensor[(3, 5, 14), float32]) */;
  %190 = %177.0;
  %191 = %180.1;
  %192 = less_equal(%183, %184) /* ty=Tensor[(250), bool] */;
  %193 = %189.1;
  (%190, %191, %192, %193, meta[relay.Constant][6] /* ty=Tensor[(24), float32] */, meta[relay.Constant][7] /* ty=Tensor[(210), float32] */)
}

def @func_1920(%var_1918: Tensor[(250), float32]) -> (Tensor[(8, 2, 9), float64], Tensor[(5, 5, 10), float32], Tensor[(250), float32]) {
  @func_1917(%var_1918) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(5, 5, 10), float32], Tensor[(250), float32]) */
}

def @func_9321() -> Tensor[(1152), float32] {
  @func_9319() /* ty=Tensor[(1152), float32] */
}

def @func_2110(%var_2107: Tensor[(1152), float32], %var_2108: Tensor[(24), float32], %var_2109: Tensor[(105, 2), float32]) -> (Tensor[(8, 2, 9), float64], Tensor[(16, 12, 6), float64], Tensor[(1152), float32], Tensor[(8, 3, 210), bool], Tensor[(24), float32], Tensor[(105, 2), float32], Tensor[(8, 2, 9), float64]) {
  %206 = fn (%var_2084: Tensor[(1152), float32], %var_2099: Tensor[(24), float32], %var_2100: Tensor[(105, 2), float32]) -> (Tensor[(8, 2, 9), float64], Tensor[(16, 12, 6), float64], Tensor[(1152), float32], Tensor[(8, 3, 210), bool], Tensor[(24), float32], Tensor[(105, 2), float32], Tensor[(8, 2, 9), float64]) {
    %194 = cast(%var_2084, dtype="float32") /* ty=Tensor[(1152), float32] */;
    %195 = reshape(%194, newshape=[16, 12, 6]) /* ty=Tensor[(16, 12, 6), float32] */;
    %196 = cast(%var_2099, dtype="float32") /* ty=Tensor[(24), float32] */;
    %197 = cast(%var_2100, dtype="float32") /* ty=Tensor[(105, 2), float32] */;
    %198 = reshape(%196, newshape=[8, 3, 1]) /* ty=Tensor[(8, 3, 1), float32] */;
    %199 = reshape(%197, newshape=[210]) /* ty=Tensor[(210), float32] */;
    %200 = @func_570(%198, %199) /* ty=(Tensor[(3, 5, 14), float32], Tensor[(8, 3, 210), int32], Tensor[(8, 3, 210), bool], Tensor[(3, 5, 14), float32]) */;
    %201 = @func_1957() /* ty=(Tensor[(8, 2, 9), float64],) */;
    %202 = @func_1909() /* ty=Tensor[(8, 2, 9), float64] */;
    %203 = @func_1446(%195) /* ty=Tensor[(16, 12, 6), float64] */;
    %204 = %200.2;
    %205 = %201.0;
    (%202, %203, %var_2084, %204, %var_2099, %var_2100, %205)
  };
  %206(%var_2107, %var_2108, %var_2109) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(16, 12, 6), float64], Tensor[(1152), float32], Tensor[(8, 3, 210), bool], Tensor[(24), float32], Tensor[(105, 2), float32], Tensor[(8, 2, 9), float64]) */
}

def @func_4541(%var_4518: Tensor[(210), float32]) -> (Tensor[(8, 2, 9), float64], Tensor[(3, 5, 14), float32], Tensor[(24), float32], Tensor[(210), float32], Tensor[(5, 15, 16), float32], Tensor[(1200), float32], Tensor[(1404, 1), float32], Tensor[(288), uint32]) {
  %207 = @func_2855() /* ty=(Tensor[(8, 2, 9), float64],) */;
  %208 = cast(meta[relay.Constant][8] /* ty=Tensor[(24), float32] */, dtype="float32") /* ty=Tensor[(24), float32] */;
  %209 = cast(%var_4518, dtype="float32") /* ty=Tensor[(210), float32] */;
  %210 = reshape(%208, newshape=[8, 3, 1]) /* ty=Tensor[(8, 3, 1), float32] */;
  %211 = reshape(%209, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %212 = @func_570(%210, %211) /* ty=(Tensor[(3, 5, 14), float32], Tensor[(8, 3, 210), int32], Tensor[(8, 3, 210), bool], Tensor[(3, 5, 14), float32]) */;
  %213 = cast(meta[relay.Constant][9] /* ty=Tensor[(1200), float32] */, dtype="float32") /* ty=Tensor[(1200), float32] */;
  %214 = reshape(%213, newshape=[5, 15, 16]) /* ty=Tensor[(5, 15, 16), float32] */;
  %215 = @func_2818(%214) /* ty=(Tensor[(5, 15, 16), float32],) */;
  %216 = %207.0;
  %217 = cast(%216, dtype="uint32") /* ty=Tensor[(8, 2, 9), uint32] */;
  %218 = cast(meta[relay.Constant][10] /* ty=Tensor[(288), uint32] */, dtype="uint32") /* ty=Tensor[(288), uint32] */;
  %219 = reshape(%217, newshape=[9, 16, 1]) /* ty=Tensor[(9, 16, 1), uint32] */;
  %220 = reshape(%218, newshape=[9, 16, 2]) /* ty=Tensor[(9, 16, 2), uint32] */;
  %221 = @func_2727(%219, %220) /* ty=(Tensor[(9, 16, 2), bool], Tensor[(1404, 1), float32]) */;
  %222 = %212.0;
  %223 = %215.0;
  %224 = %221.1;
  (%216, %222, meta[relay.Constant][8] /* ty=Tensor[(24), float32] */, %var_4518, %223, meta[relay.Constant][9] /* ty=Tensor[(1200), float32] */, %224, meta[relay.Constant][10] /* ty=Tensor[(288), uint32] */)
}

def @func_11166(%var_11164: Tensor[(9, 5, 6), int64], %var_11165: Tensor[(9, 5, 6), int64]) -> (Tensor[(9, 5, 6), bool], Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64]) {
  %232 = fn (%var_11133: Tensor[(9, 5, 6), int64], %var_11134: Tensor[(9, 5, 6), int64]) -> (Tensor[(9, 5, 6), bool], Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64]) {
    %225 = cast(%var_11134, dtype="bool") /* ty=Tensor[(9, 5, 6), bool] */;
    %226 = shape_of(%var_11133, dtype="int32") /* ty=Tensor[(3), int32] */;
    %227 = cast(%var_11133, dtype="bool") /* ty=Tensor[(9, 5, 6), bool] */;
    %228 = dyn.reshape(%225, %226, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %229 = equal(%227, %228) /* ty=Tensor[(9, 5, 6), bool] */;
    %230 = @func_8133() /* ty=Tensor[(8, 2, 9), float32] */;
    %231 = @func_7632() /* ty=Tensor[(8, 2, 9), float64] */;
    (%229, %230, %231)
  };
  %232(%var_11164, %var_11165) /* ty=(Tensor[(9, 5, 6), bool], Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64]) */
}

def @func_7754() -> (Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(8, 2, 9), float64]) {
  %233 = @func_6065() /* ty=(Tensor[(250), int8], Tensor[(250), float64], Tensor[(1152), float32]) */;
  %234 = %233.2;
  %235 = @func_2648() /* ty=Tensor[(1152), float32] */;
  %236 = @func_6600() /* ty=Tensor[(8, 2, 9), float64] */;
  (%234, %235, %236)
}

def @func_9556() -> (Tensor[(8, 2, 9), float64], Tensor[(1404), float32]) {
  %241 = fn () -> (Tensor[(8, 2, 9), float64], Tensor[(1404), float32]) {
    %237 = @func_3280() /* ty=(Tensor[(8, 2, 9), float64],) */;
    %238 = @func_4496() /* ty=(Tensor[(1152), float32], Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64], Tensor[(1404), float32]) */;
    %239 = %237.0;
    %240 = %238.3;
    (%239, %240)
  };
  %241() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1404), float32]) */
}

def @func_11764() -> (Tensor[(8, 2, 9), float64],) {
  @func_11762() /* ty=(Tensor[(8, 2, 9), float64],) */
}

def @func_2714() -> (Tensor[(1152), float32], Tensor[(1404, 1), float32], Tensor[(9, 156), float32]) {
  %249 = fn () -> (Tensor[(1152), float32], Tensor[(1404, 1), float32], Tensor[(9, 156), float32]) {
    %242 = @func_2648() /* ty=Tensor[(1152), float32] */;
    %243 = cast(%242, dtype="float32") /* ty=Tensor[(1152), float32] */;
    %244 = cast(meta[relay.Constant][11] /* ty=Tensor[(9, 156), float32] */, dtype="float32") /* ty=Tensor[(9, 156), float32] */;
    %245 = reshape(%243, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
    %246 = reshape(%244, newshape=[1404, 1]) /* ty=Tensor[(1404, 1), float32] */;
    %247 = @func_2167(%245, %246) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(5, 5, 10), float32], Tensor[(250), float32], Tensor[(16, 12, 6), float64], Tensor[(1152), float32], Tensor[(3, 5, 14), float32], Tensor[(1404, 1), float32]) */;
    %248 = %247.6;
    (%242, %248, meta[relay.Constant][11] /* ty=Tensor[(9, 156), float32] */)
  };
  %249() /* ty=(Tensor[(1152), float32], Tensor[(1404, 1), float32], Tensor[(9, 156), float32]) */
}

def @func_6756() -> (Tensor[(1152), float32], Tensor[(1152), float64]) {
  %254 = fn () -> (Tensor[(1152), float32], Tensor[(1152), float64]) {
    %250 = @func_3685() /* ty=Tensor[(1152), float32] */;
    %251 = cast(%250, dtype="float64") /* ty=Tensor[(1152), float64] */;
    %252 = @func_4784() /* ty=Tensor[(1152), float32] */;
    %253 = asin(%251) /* ty=Tensor[(1152), float64] */;
    (%252, %253)
  };
  %254() /* ty=(Tensor[(1152), float32], Tensor[(1152), float64]) */
}

def @func_3500(%var_3498: Tensor[(1152), float32]) -> Tensor[(1152), float32] {
  @func_3497(%var_3498) /* ty=Tensor[(1152), float32] */
}

def @func_6491() -> (Tensor[(1152), float32],) {
  %257 = fn () -> (Tensor[(1152), float32],) {
    %255 = @func_4000() /* ty=(Tensor[(1152), float32],) */;
    %256 = %255.0;
    (%256,)
  };
  %257() /* ty=(Tensor[(1152), float32],) */
}

def @func_5808(%var_5806: Tensor[(32), int8]) -> (Tensor[(8, 2, 9), float32], Tensor[(1152), int32], Tensor[(32), int8]) {
  @func_5805(%var_5806) /* ty=(Tensor[(8, 2, 9), float32], Tensor[(1152), int32], Tensor[(32), int8]) */
}

def @func_11114() -> (Tensor[(6, 5, 11), float64], Tensor[(1404), float32]) {
  @func_11112() /* ty=(Tensor[(6, 5, 11), float64], Tensor[(1404), float32]) */
}

def @func_6350(%var_6336: Tensor[(15, 8, 3), uint16], %var_6337: Tensor[(15, 8, 3), uint16]) -> (Tensor[(15, 8, 3), uint16], Tensor[(8, 2, 9), float64]) {
  %258 = cast(%var_6337, dtype="uint16") /* ty=Tensor[(15, 8, 3), uint16] */;
  %259 = shape_of(%var_6336, dtype="int32") /* ty=Tensor[(3), int32] */;
  %260 = cast(%var_6336, dtype="uint16") /* ty=Tensor[(15, 8, 3), uint16] */;
  %261 = dyn.reshape(%258, %259, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %262 = minimum(%260, %261) /* ty=Tensor[(15, 8, 3), uint16] */;
  %263 = @func_6237() /* ty=Tensor[(8, 2, 9), float64] */;
  (%262, %263)
}

def @func_9534() -> Tensor[(1152), float32] {
  %264 = @func_6415() /* ty=(Tensor[(1152), float32],) */;
  %264.0
}

def @func_3945(%var_3928: Tensor[(1404, 2), float32], %var_3940: Tensor[(1404, 2), float64]) -> (Tensor[(1404, 2), float64], Tensor[(1404, 2), bool]) {
  %265 = @func_2713() /* ty=(Tensor[(1152), float32], Tensor[(1404, 1), float32], Tensor[(9, 156), float32]) */;
  %266 = %265.1;
  %267 = cast(%266, dtype="float64") /* ty=Tensor[(1404, 1), float64] */;
  %268 = cast(%var_3928, dtype="float64") /* ty=Tensor[(1404, 2), float64] */;
  %269 = divide(%267, %268) /* ty=Tensor[(1404, 2), float64] */;
  %270 = cast(%269, dtype="float64") /* ty=Tensor[(1404, 2), float64] */;
  %271 = cast(%var_3940, dtype="bool") /* ty=Tensor[(1404, 2), bool] */;
  %272 = shape_of(%269, dtype="int32") /* ty=Tensor[(2), int32] */;
  %273 = cast(%269, dtype="bool") /* ty=Tensor[(1404, 2), bool] */;
  %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %275 = asinh(%270) /* ty=Tensor[(1404, 2), float64] */;
  %276 = not_equal(%273, %274) /* ty=Tensor[(1404, 2), bool] */;
  (%275, %276)
}

def @func_9571() -> (Tensor[(1152), float32], Tensor[(1152), float32]) {
  %277 = @func_6490() /* ty=(Tensor[(1152), float32],) */;
  %278 = @func_7116() /* ty=Tensor[(1152), float32] */;
  %279 = %277.0;
  (%278, %279)
}

def @func_9516() -> (Tensor[(1152), float32], Tensor[(8, 2, 9), float64]) {
  %283 = fn () -> (Tensor[(1152), float32], Tensor[(8, 2, 9), float64]) {
    %280 = @func_4339() /* ty=(Tensor[(8, 2, 9), float64],) */;
    %281 = @func_3239() /* ty=Tensor[(1152), float32] */;
    %282 = %280.0;
    (%281, %282)
  };
  %283() /* ty=(Tensor[(1152), float32], Tensor[(8, 2, 9), float64]) */
}

def @func_3622() -> (Tensor[(8, 2, 9), float32],) {
  @func_3620() /* ty=(Tensor[(8, 2, 9), float32],) */
}

def @func_10224(%var_10222: Tensor[(16, 7, 2), float32]) -> (Tensor[(16, 7, 2), float32],) {
  @func_10221(%var_10222) /* ty=(Tensor[(16, 7, 2), float32],) */
}

def @func_4784() -> Tensor[(1152), float32] {
  @func_3668() /* ty=Tensor[(1152), float32] */
}

def @func_3006() -> (Tensor[(8, 2, 9), float64],) {
  %286 = fn () -> (Tensor[(8, 2, 9), float64],) {
    %284 = @func_2197() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1152), float32], Tensor[(250), float32]) */;
    %285 = %284.0;
    (%285,)
  };
  %286() /* ty=(Tensor[(8, 2, 9), float64],) */
}

def @func_5740() -> (Tensor[(1152), float32], Tensor[(6, 15, 6), bool], Tensor[(540, 1), uint16]) {
  %293 = fn () -> (Tensor[(1152), float32], Tensor[(6, 15, 6), bool], Tensor[(540, 1), uint16]) {
    %287 = cast(meta[relay.Constant][12] /* ty=Tensor[(540, 1), uint16] */, dtype="uint16") /* ty=Tensor[(540, 1), uint16] */;
    %288 = cast(meta[relay.Constant][12] /* ty=Tensor[(540, 1), uint16] */, dtype="uint16") /* ty=Tensor[(540, 1), uint16] */;
    %289 = reshape(%287, newshape=[6, 15, 6]) /* ty=Tensor[(6, 15, 6), uint16] */;
    %290 = reshape(%288, newshape=[6, 15, 6]) /* ty=Tensor[(6, 15, 6), uint16] */;
    %291 = @func_3239() /* ty=Tensor[(1152), float32] */;
    %292 = @func_5672(%289, %290) /* ty=Tensor[(6, 15, 6), bool] */;
    (%291, %292, meta[relay.Constant][12] /* ty=Tensor[(540, 1), uint16] */)
  };
  %293() /* ty=(Tensor[(1152), float32], Tensor[(6, 15, 6), bool], Tensor[(540, 1), uint16]) */
}

def @func_4786() -> Tensor[(1152), float32] {
  @func_4784() /* ty=Tensor[(1152), float32] */
}

def @func_7904() -> (Tensor[(250), float32],) {
  @func_7902() /* ty=(Tensor[(250), float32],) */
}

def @func_9201() -> (Tensor[(1152), float32], Tensor[(8, 2, 9), float32]) {
  %298 = fn () -> (Tensor[(1152), float32], Tensor[(8, 2, 9), float32]) {
    %294 = @func_8899() /* ty=(Tensor[(1152), float32],) */;
    %295 = @func_3898() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float32]) */;
    %296 = %294.0;
    %297 = %295.1;
    (%296, %297)
  };
  %298() /* ty=(Tensor[(1152), float32], Tensor[(8, 2, 9), float32]) */
}

def @func_3335(%var_3333: Tensor[(1152), float32], %var_3334: Tensor[(1404), float32]) -> (Tensor[(8, 2, 9), float64], Tensor[(1404, 1), float32], Tensor[(1152), float32], Tensor[(1404), float32]) {
  %307 = fn (%var_3325: Tensor[(1152), float32], %var_3326: Tensor[(1404), float32]) -> (Tensor[(8, 2, 9), float64], Tensor[(1404, 1), float32], Tensor[(1152), float32], Tensor[(1404), float32]) {
    %299 = @func_2120() /* ty=(Tensor[(8, 2, 9), float64],) */;
    %300 = cast(%var_3325, dtype="float32") /* ty=Tensor[(1152), float32] */;
    %301 = cast(%var_3326, dtype="float32") /* ty=Tensor[(1404), float32] */;
    %302 = reshape(%300, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
    %303 = reshape(%301, newshape=[1404, 1]) /* ty=Tensor[(1404, 1), float32] */;
    %304 = @func_2167(%302, %303) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(5, 5, 10), float32], Tensor[(250), float32], Tensor[(16, 12, 6), float64], Tensor[(1152), float32], Tensor[(3, 5, 14), float32], Tensor[(1404, 1), float32]) */;
    %305 = %299.0;
    %306 = %304.6;
    (%305, %306, %var_3325, %var_3326)
  };
  %307(%var_3333, %var_3334) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1404, 1), float32], Tensor[(1152), float32], Tensor[(1404), float32]) */
}

def @func_10891(%var_10886: Tensor[(250), float64]) -> (Tensor[(8, 3, 210), int32], Tensor[(250), bool]) {
  %308 = @func_8637() /* ty=(Tensor[(250), float64], Tensor[(8, 2, 9), float64]) */;
  %309 = %308.0;
  %310 = cast(%309, dtype="float32") /* ty=Tensor[(250), float32] */;
  %311 = cast(%309, dtype="float32") /* ty=Tensor[(250), float32] */;
  %312 = reshape(%310, newshape=[250]) /* ty=Tensor[(250), float32] */;
  %313 = reshape(%311, newshape=[250]) /* ty=Tensor[(250), float32] */;
  %314 = @func_3149(%312, %313) /* ty=(Tensor[(8, 2, 9), float32], Tensor[(5, 5, 10), float32], Tensor[(250), bool], Tensor[(8, 3, 210), int32], Tensor[(24), float32], Tensor[(210), float32]) */;
  %315 = cast(%var_10886, dtype="bool") /* ty=Tensor[(250), bool] */;
  %316 = shape_of(%309, dtype="int32") /* ty=Tensor[(1), int32] */;
  %317 = cast(%309, dtype="bool") /* ty=Tensor[(250), bool] */;
  %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?), bool] */;
  %319 = %314.3;
  %320 = greater(%317, %318) /* ty=Tensor[(250), bool] */;
  (%319, %320)
}

def @func_5513() -> (Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(210), float32], Tensor[(250), float32]) {
  @func_5511() /* ty=(Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(210), float32], Tensor[(250), float32]) */
}

def @func_10576(%var_10547: Tensor[(8, 2, 9), float64]) -> (Tensor[(1152), float32], Tensor[(8, 2, 9), float32]) {
  %321 = @func_6600() /* ty=Tensor[(8, 2, 9), float64] */;
  %322 = cast(%var_10547, dtype="float32") /* ty=Tensor[(8, 2, 9), float32] */;
  %323 = shape_of(%321, dtype="int32") /* ty=Tensor[(3), int32] */;
  %324 = cast(%321, dtype="float32") /* ty=Tensor[(8, 2, 9), float32] */;
  %325 = dyn.reshape(%322, %323, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %326 = @func_8449() /* ty=Tensor[(1152), float32] */;
  %327 = floor_divide(%324, %325) /* ty=Tensor[(8, 2, 9), float32] */;
  (%326, %327)
}

def @func_1446(%var_1440: Tensor[(16, 12, 6), float32]) -> Tensor[(16, 12, 6), float64] {
  %328 = cast(%var_1440, dtype="float32") /* ty=Tensor[(16, 12, 6), float32] */;
  %329 = sinh(%328) /* ty=Tensor[(16, 12, 6), float32] */;
  %330 = cast(%329, dtype="float64") /* ty=Tensor[(16, 12, 6), float64] */;
  rsqrt(%330) /* ty=Tensor[(16, 12, 6), float64] */
}

def @func_9130() -> Tensor[(1152), float32] {
  %331 = fn () -> Tensor[(1152), float32] {
    @func_3685() /* ty=Tensor[(1152), float32] */
  };
  %331() /* ty=Tensor[(1152), float32] */
}

def @func_3454(%var_3452: Tensor[(2, 2, 8), int8], %var_3453: Tensor[(2, 2, 8), int8]) -> Tensor[(2, 2, 8), int8] {
  %336 = fn (%var_3445: Tensor[(2, 2, 8), int8], %var_3446: Tensor[(2, 2, 8), int8]) -> Tensor[(2, 2, 8), int8] {
    %332 = cast(%var_3446, dtype="int8") /* ty=Tensor[(2, 2, 8), int8] */;
    %333 = shape_of(%var_3445, dtype="int32") /* ty=Tensor[(3), int32] */;
    %334 = cast(%var_3445, dtype="int8") /* ty=Tensor[(2, 2, 8), int8] */;
    %335 = dyn.reshape(%332, %333, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    bitwise_and(%334, %335) /* ty=Tensor[(2, 2, 8), int8] */
  };
  %336(%var_3452, %var_3453) /* ty=Tensor[(2, 2, 8), int8] */
}

def @func_3685() -> Tensor[(1152), float32] {
  %337 = @func_3260() /* ty=(Tensor[(1152), float32],) */;
  %337.0
}

def @func_4445(%var_4434: uint64) -> (Tensor[(7, 1, 9), bool], Tensor[(8, 2, 9), float64]) {
  %338 = cast(%var_4434, dtype="bool") /* ty=bool */;
  %339 = cast(meta[relay.Constant][13] /* ty=Tensor[(7, 1, 9), uint64] */, dtype="bool") /* ty=Tensor[(7, 1, 9), bool] */;
  %340 = @func_2811() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(35, 6), int64], Tensor[(5, 50), float32]) */;
  %341 = not_equal(%338, %339) /* ty=Tensor[(7, 1, 9), bool] */;
  %342 = %340.0;
  (%341, %342)
}

def @func_9032() -> (Tensor[(1152), float32],) {
  %343 = @func_4784() /* ty=Tensor[(1152), float32] */;
  (%343,)
}

def @func_4241(%var_4236: Tensor[(210, 1), float32], %var_4237: Tensor[(250, 1), float32]) -> (Tensor[(4, 14, 12), float32], Tensor[(250), int32], Tensor[(210, 1), float32], Tensor[(250, 1), float32]) {
  %344 = @func_2606() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1152), float32], Tensor[(1404), float32], Tensor[(4, 14, 12), float32]) */;
  %345 = %344.3;
  %346 = cast(%345, dtype="float32") /* ty=Tensor[(4, 14, 12), float32] */;
  %347 = cast(%var_4236, dtype="float32") /* ty=Tensor[(210, 1), float32] */;
  %348 = cast(%var_4237, dtype="float32") /* ty=Tensor[(250, 1), float32] */;
  %349 = reshape(%347, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %350 = reshape(%348, newshape=[250]) /* ty=Tensor[(250), float32] */;
  %351 = @func_2544(%349, %350) /* ty=(Tensor[(1152), float32], Tensor[(8, 2, 9), float64], Tensor[(16, 12, 6), float64], Tensor[(3, 5, 14), float32], Tensor[(210), float32], Tensor[(250), uint8], Tensor[(250), int32]) */;
  %352 = sin(%346) /* ty=Tensor[(4, 14, 12), float32] */;
  %353 = %351.6;
  (%352, %353, %var_4236, %var_4237)
}

def @func_4811(%var_4809: Tensor[(8, 4), int8]) -> (Tensor[(1152), float32], Tensor[(2, 2, 8), int8], Tensor[(8, 4), int8]) {
  @func_4808(%var_4809) /* ty=(Tensor[(1152), float32], Tensor[(2, 2, 8), int8], Tensor[(8, 4), int8]) */
}

def @func_3365() -> (Tensor[(8, 2, 9), float32],) {
  @func_3363() /* ty=(Tensor[(8, 2, 9), float32],) */
}

def @func_9922() -> (Tensor[(8, 2, 9), float32],) {
  %354 = @func_8062() /* ty=Tensor[(8, 2, 9), float32] */;
  (%354,)
}

def @func_5574() -> Tensor[(8, 2, 9), float32] {
  %356 = fn () -> Tensor[(8, 2, 9), float32] {
    %355 = @func_3659() /* ty=(Tensor[(8, 2, 9), float32],) */;
    %355.0
  };
  %356() /* ty=Tensor[(8, 2, 9), float32] */
}

def @func_10579(%var_10577: Tensor[(8, 2, 9), float64]) -> (Tensor[(1152), float32], Tensor[(8, 2, 9), float32]) {
  @func_10576(%var_10577) /* ty=(Tensor[(1152), float32], Tensor[(8, 2, 9), float32]) */
}

def @func_7693() -> Tensor[(8, 2, 9), float32] {
  @func_7691() /* ty=Tensor[(8, 2, 9), float32] */
}

def @func_5511() -> (Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(210), float32], Tensor[(250), float32]) {
  %357 = cast(meta[relay.Constant][14] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %358 = cast(meta[relay.Constant][15] /* ty=Tensor[(250), float32] */, dtype="float32") /* ty=Tensor[(250), float32] */;
  %359 = reshape(%357, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %360 = reshape(%358, newshape=[250]) /* ty=Tensor[(250), float32] */;
  %361 = @func_5074(%359, %360) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1152), float32], Tensor[(16, 12, 6), float64], Tensor[(210), float32], Tensor[(250), float32], Tensor[(1152), float32]) */;
  %362 = @func_3239() /* ty=Tensor[(1152), float32] */;
  %363 = %361.5;
  (%362, %363, meta[relay.Constant][14] /* ty=Tensor[(210), float32] */, meta[relay.Constant][15] /* ty=Tensor[(250), float32] */)
}

def @func_10235() -> (Tensor[(1152), float32],) {
  %365 = fn () -> (Tensor[(1152), float32],) {
    %364 = @func_7116() /* ty=Tensor[(1152), float32] */;
    (%364,)
  };
  %365() /* ty=(Tensor[(1152), float32],) */
}

def @func_3660() -> (Tensor[(8, 2, 9), float32],) {
  %368 = fn () -> (Tensor[(8, 2, 9), float32],) {
    %366 = @func_3363() /* ty=(Tensor[(8, 2, 9), float32],) */;
    %367 = %366.0;
    (%367,)
  };
  %368() /* ty=(Tensor[(8, 2, 9), float32],) */
}

def @func_8020() -> Tensor[(8, 2, 9), float32] {
  @func_8018() /* ty=Tensor[(8, 2, 9), float32] */
}

def @func_6066() -> (Tensor[(250), int8], Tensor[(250), float64], Tensor[(1152), float32]) {
  %386 = fn () -> (Tensor[(250), int8], Tensor[(250), float64], Tensor[(1152), float32]) {
    %369 = @func_2197() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1152), float32], Tensor[(250), float32]) */;
    %370 = %369.2;
    %371 = cast(meta[relay.Constant][16] /* ty=Tensor[(250), float32] */, dtype="int8") /* ty=Tensor[(250), int8] */;
    %372 = shape_of(%370, dtype="int32") /* ty=Tensor[(1), int32] */;
    %373 = cast(%370, dtype="int8") /* ty=Tensor[(250), int8] */;
    %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?), int8] */;
    %375 = cast(meta[relay.Constant][16] /* ty=Tensor[(250), float32] */, dtype="float64") /* ty=Tensor[(250), float64] */;
    %376 = asinh(%375) /* ty=Tensor[(250), float64] */;
    %377 = cast(%376, dtype="float64") /* ty=Tensor[(250), float64] */;
    %378 = rsqrt(%377) /* ty=Tensor[(250), float64] */;
    %379 = cast(meta[relay.Constant][16] /* ty=Tensor[(250), float32] */, dtype="float64") /* ty=Tensor[(250), float64] */;
    %380 = shape_of(%378, dtype="int32") /* ty=Tensor[(1), int32] */;
    %381 = cast(%378, dtype="float64") /* ty=Tensor[(250), float64] */;
    %382 = dyn.reshape(%379, %380, newshape=[]) /* ty=Tensor[(?), float64] */;
    %383 = bitwise_xor(%373, %374) /* ty=Tensor[(250), int8] */;
    %384 = floor_mod(%381, %382) /* ty=Tensor[(250), float64] */;
    %385 = @func_2648() /* ty=Tensor[(1152), float32] */;
    (%383, %384, %385)
  };
  %386() /* ty=(Tensor[(250), int8], Tensor[(250), float64], Tensor[(1152), float32]) */
}

def @func_2416() -> Tensor[(8, 2, 9), float64] {
  %387 = @func_2120() /* ty=(Tensor[(8, 2, 9), float64],) */;
  %387.0
}

def @func_11707(%var_11705: Tensor[(1404), float32]) -> (Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(1404), float32]) {
  @func_11704(%var_11705) /* ty=(Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(1404), float32]) */
}

def @func_9104() -> (Tensor[(8, 2, 9), float64],) {
  %388 = @func_8497() /* ty=(Tensor[(8, 2, 9), float64],) */;
  %389 = %388.0;
  (%389,)
}

def @func_7623() -> (Tensor[(1152), float32], Tensor[(8, 2, 9), float64]) {
  @func_7621() /* ty=(Tensor[(1152), float32], Tensor[(8, 2, 9), float64]) */
}

def @func_2608() -> (Tensor[(8, 2, 9), float64], Tensor[(1152), float32], Tensor[(1404), float32], Tensor[(4, 14, 12), float32]) {
  @func_2606() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1152), float32], Tensor[(1404), float32], Tensor[(4, 14, 12), float32]) */
}

def @func_6567(%var_6565: Tensor[(945), int16]) -> (Tensor[(8, 2, 9), float64], Tensor[(7, 15, 9), float64], Tensor[(945), int16], Tensor[(1152), float32]) {
  @func_6564(%var_6565) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(7, 15, 9), float64], Tensor[(945), int16], Tensor[(1152), float32]) */
}

def @func_7756() -> (Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(8, 2, 9), float64]) {
  @func_7754() /* ty=(Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(8, 2, 9), float64]) */
}

def @func_293(%var_272: Tensor[(3, 5, 14), float32]) -> (Tensor[(3, 5, 14), float32],) {
  %390 = cast(meta[relay.Constant][17] /* ty=Tensor[(3, 5, 1), float32] */, dtype="float32") /* ty=Tensor[(3, 5, 1), float32] */;
  %391 = cast(%var_272, dtype="float32") /* ty=Tensor[(3, 5, 14), float32] */;
  %392 = divide(%390, %391) /* ty=Tensor[(3, 5, 14), float32] */;
  (%392,)
}

def @func_2683() -> (Tensor[(8, 2, 9), float64],) {
  %393 = @func_1909() /* ty=Tensor[(8, 2, 9), float64] */;
  (%393,)
}

def @func_10182() -> Tensor[(1152), float32] {
  %394 = @func_8198() /* ty=(Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(1152), float32]) */;
  %394.1
}

def @func_10824() -> (Tensor[(1152), float32], Tensor[(8, 2, 9), float32]) {
  %399 = fn () -> (Tensor[(1152), float32], Tensor[(8, 2, 9), float32]) {
    %395 = @func_8166() /* ty=(Tensor[(1152), float32],) */;
    %396 = @func_9343() /* ty=(Tensor[(8, 2, 9), float32], Tensor[(1152), float32], Tensor[(32), int8]) */;
    %397 = %395.0;
    %398 = %396.0;
    (%397, %398)
  };
  %399() /* ty=(Tensor[(1152), float32], Tensor[(8, 2, 9), float32]) */
}

def @func_7326(%var_7321: Tensor[(1, 14, 1), uint8], %var_7322: Tensor[(7, 14, 12), uint8]) -> Tensor[(7, 14, 12), bool] {
  %400 = cast(%var_7321, dtype="bool") /* ty=Tensor[(1, 14, 1), bool] */;
  %401 = cast(%var_7322, dtype="bool") /* ty=Tensor[(7, 14, 12), bool] */;
  greater_equal(%400, %401) /* ty=Tensor[(7, 14, 12), bool] */
}

def @func_6453() -> (Tensor[(1152), float32],) {
  @func_6451() /* ty=(Tensor[(1152), float32],) */
}

def @func_10506() -> (Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float64], Tensor[(250), bool], Tensor[(1152), float32]) {
  %408 = fn () -> (Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float64], Tensor[(250), bool], Tensor[(1152), float32]) {
    %402 = @func_3898() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float32]) */;
    %403 = @func_6262() /* ty=(Tensor[(250), bool],) */;
    %404 = %402.0;
    %405 = @func_6398() /* ty=Tensor[(8, 2, 9), float64] */;
    %406 = %403.0;
    %407 = @func_3880() /* ty=Tensor[(1152), float32] */;
    (%404, %405, %406, %407)
  };
  %408() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float64], Tensor[(250), bool], Tensor[(1152), float32]) */
}

def @func_3585() -> (Tensor[(1152), float32], Tensor[(7, 15, 9), float64], Tensor[(7, 15, 9), float64], Tensor[(8, 2, 9), float64]) {
  %426 = fn () -> (Tensor[(1152), float32], Tensor[(7, 15, 9), float64], Tensor[(7, 15, 9), float64], Tensor[(8, 2, 9), float64]) {
    %409 = @func_2197() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1152), float32], Tensor[(250), float32]) */;
    %410 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 945), int16] */, dtype="int16") /* ty=Tensor[(1, 945), int16] */;
    %411 = reshape(%410, newshape=[7, 15, 9]) /* ty=Tensor[(7, 15, 9), int16] */;
    %412 = @func_3355(%411) /* ty=(Tensor[(7, 15, 9), int16], Tensor[(7, 15, 9), float64]) */;
    %413 = %412.1;
    %414 = cast(%413, dtype="float32") /* ty=Tensor[(7, 15, 9), float32] */;
    %415 = rsqrt(%414) /* ty=Tensor[(7, 15, 9), float32] */;
    %416 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 945), int16] */, dtype="float64") /* ty=Tensor[(1, 945), float64] */;
    %417 = shape_of(%415, dtype="int32") /* ty=Tensor[(3), int32] */;
    %418 = cast(%415, dtype="float64") /* ty=Tensor[(7, 15, 9), float64] */;
    %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %420 = cast(%413, dtype="float64") /* ty=Tensor[(7, 15, 9), float64] */;
    %421 = @func_2455() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float64]) */;
    %422 = %409.1;
    %423 = floor_divide(%418, %419) /* ty=Tensor[(7, 15, 9), float64] */;
    %424 = erf(%420) /* ty=Tensor[(7, 15, 9), float64] */;
    %425 = %421.1;
    (%422, %423, %424, %425)
  };
  %426() /* ty=(Tensor[(1152), float32], Tensor[(7, 15, 9), float64], Tensor[(7, 15, 9), float64], Tensor[(8, 2, 9), float64]) */
}

def @func_3687() -> Tensor[(1152), float32] {
  @func_3685() /* ty=Tensor[(1152), float32] */
}

def @func_8306(%var_8304: uint8, %var_8305: Tensor[(1, 12, 3), uint8]) -> (Tensor[(1, 12, 3), uint8],) {
  @func_8302(%var_8304, %var_8305) /* ty=(Tensor[(1, 12, 3), uint8],) */
}

def @func_11762() -> (Tensor[(8, 2, 9), float64],) {
  %427 = @func_4496() /* ty=(Tensor[(1152), float32], Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64], Tensor[(1404), float32]) */;
  %428 = %427.2;
  (%428,)
}

def @func_10589() -> (Tensor[(8, 2, 9), float64],) {
  %429 = @func_9104() /* ty=(Tensor[(8, 2, 9), float64],) */;
  %430 = %429.0;
  (%430,)
}

def @func_6805() -> (Tensor[(1152), float32], Tensor[(8, 2, 9), float64]) {
  %431 = @func_4496() /* ty=(Tensor[(1152), float32], Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64], Tensor[(1404), float32]) */;
  %432 = @func_2455() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float64]) */;
  %433 = %431.0;
  %434 = %432.1;
  (%433, %434)
}

def @func_7562() -> (Tensor[(1152), float32], Tensor[(8, 2, 9), float64], Tensor[(7, 15, 9), float64], Tensor[(315, 3), int16]) {
  @func_7560() /* ty=(Tensor[(1152), float32], Tensor[(8, 2, 9), float64], Tensor[(7, 15, 9), float64], Tensor[(315, 3), int16]) */
}

def @func_9080() -> (Tensor[(8, 2, 9), float32],) {
  @func_9078() /* ty=(Tensor[(8, 2, 9), float32],) */
}

def @func_6848() -> (Tensor[(1152), float32], Tensor[(8, 2, 9), float64], Tensor[(1404), float32]) {
  %435 = cast(meta[relay.Constant][19] /* ty=Tensor[(1404), float32] */, dtype="float32") /* ty=Tensor[(1404), float32] */;
  %436 = reshape(%435, newshape=[1404]) /* ty=Tensor[(1404), float32] */;
  %437 = @func_5134(%436) /* ty=(Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64], Tensor[(1404, 1), float32], Tensor[(1152), float32], Tensor[(1404), float32], Tensor[(8, 2, 9), float64]) */;
  %438 = @func_3668() /* ty=Tensor[(1152), float32] */;
  %439 = %437.1;
  (%438, %439, meta[relay.Constant][19] /* ty=Tensor[(1404), float32] */)
}

def @func_7621() -> (Tensor[(1152), float32], Tensor[(8, 2, 9), float64]) {
  %440 = @func_4145() /* ty=(Tensor[(1152), float32],) */;
  %441 = @func_7097() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1404, 2), uint8]) */;
  %442 = %440.0;
  %443 = %441.0;
  (%442, %443)
}

def @func_10102() -> (Tensor[(250), float32],) {
  %444 = @func_7902() /* ty=(Tensor[(250), float32],) */;
  %445 = %444.0;
  (%445,)
}

def @func_12009() -> (Tensor[(1152), float32], Tensor[(16, 12, 6), float64], Tensor[(1404), float32]) {
  %452 = fn () -> (Tensor[(1152), float32], Tensor[(16, 12, 6), float64], Tensor[(1404), float32]) {
    %446 = @func_7979() /* ty=(Tensor[(1152), float32], Tensor[(8, 2, 9), float32]) */;
    %447 = cast(meta[relay.Constant][20] /* ty=Tensor[(1404), float32] */, dtype="float32") /* ty=Tensor[(1404), float32] */;
    %448 = reshape(%447, newshape=[1404]) /* ty=Tensor[(1404), float32] */;
    %449 = @func_3208(%448) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(16, 12, 6), float64], Tensor[(4, 288), float32], Tensor[(1404), float32]) */;
    %450 = %446.0;
    %451 = %449.1;
    (%450, %451, meta[relay.Constant][20] /* ty=Tensor[(1404), float32] */)
  };
  %452() /* ty=(Tensor[(1152), float32], Tensor[(16, 12, 6), float64], Tensor[(1404), float32]) */
}

def @func_10894(%var_10892: Tensor[(250), float64]) -> (Tensor[(8, 3, 210), int32], Tensor[(250), bool]) {
  @func_10891(%var_10892) /* ty=(Tensor[(8, 3, 210), int32], Tensor[(250), bool]) */
}

def @func_2197() -> (Tensor[(8, 2, 9), float64], Tensor[(1152), float32], Tensor[(250), float32]) {
  %453 = cast(meta[relay.Constant][21] /* ty=Tensor[(250), float32] */, dtype="float32") /* ty=Tensor[(250), float32] */;
  %454 = reshape(%453, newshape=[5, 5, 10]) /* ty=Tensor[(5, 5, 10), float32] */;
  %455 = @func_1815(%454) /* ty=(Tensor[(16, 12, 6), float64], Tensor[(1152), float32], Tensor[(16, 12, 6), float64], Tensor[(3, 5, 14), float32], Tensor[(210), float32], Tensor[(35, 6), int64], Tensor[(1404), float32], Tensor[(5, 5, 10), float32], Tensor[(3, 5, 14), float32]) */;
  %456 = @func_1909() /* ty=Tensor[(8, 2, 9), float64] */;
  %457 = %455.1;
  (%456, %457, meta[relay.Constant][21] /* ty=Tensor[(250), float32] */)
}

def @func_9319() -> Tensor[(1152), float32] {
  @func_9160() /* ty=Tensor[(1152), float32] */
}

def @func_4448(%var_4446: uint64) -> (Tensor[(7, 1, 9), bool], Tensor[(8, 2, 9), float64]) {
  @func_4445(%var_4446) /* ty=(Tensor[(7, 1, 9), bool], Tensor[(8, 2, 9), float64]) */
}

def @func_2606() -> (Tensor[(8, 2, 9), float64], Tensor[(1152), float32], Tensor[(1404), float32], Tensor[(4, 14, 12), float32]) {
  %458 = cast(meta[relay.Constant][22] /* ty=Tensor[(1152), float32] */, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %459 = cast(meta[relay.Constant][23] /* ty=Tensor[(1404), float32] */, dtype="float32") /* ty=Tensor[(1404), float32] */;
  %460 = reshape(%458, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %461 = reshape(%459, newshape=[1404, 1]) /* ty=Tensor[(1404, 1), float32] */;
  %462 = @func_2167(%460, %461) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(5, 5, 10), float32], Tensor[(250), float32], Tensor[(16, 12, 6), float64], Tensor[(1152), float32], Tensor[(3, 5, 14), float32], Tensor[(1404, 1), float32]) */;
  %463 = cast(meta[relay.Constant][24] /* ty=Tensor[(4, 14, 12), float64] */, dtype="float64") /* ty=Tensor[(4, 14, 12), float64] */;
  %464 = cos(%463) /* ty=Tensor[(4, 14, 12), float64] */;
  %465 = cast(%464, dtype="float32") /* ty=Tensor[(4, 14, 12), float32] */;
  %466 = %462.0;
  %467 = sqrt(%465) /* ty=Tensor[(4, 14, 12), float32] */;
  (%466, meta[relay.Constant][22] /* ty=Tensor[(1152), float32] */, meta[relay.Constant][23] /* ty=Tensor[(1404), float32] */, %467)
}

def @func_3497(%var_3463: Tensor[(1152), float32]) -> Tensor[(1152), float32] {
  %468 = @func_2898() /* ty=(Tensor[(1152), float32],) */;
  %469 = %468.0;
  %470 = cast(%var_3463, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %471 = shape_of(%469, dtype="int32") /* ty=Tensor[(1), int32] */;
  %472 = cast(%469, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?), float32] */;
  floor_mod(%472, %473) /* ty=Tensor[(1152), float32] */
}

def @func_2786() -> (Tensor[(8, 2, 9), float32],) {
  %474 = @func_2416() /* ty=Tensor[(8, 2, 9), float64] */;
  %475 = cast(%474, dtype="float32") /* ty=Tensor[(8, 2, 9), float32] */;
  %476 = log(%475) /* ty=Tensor[(8, 2, 9), float32] */;
  (%476,)
}

def @func_8219() -> (Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64]) {
  @func_8217() /* ty=(Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64]) */
}

def @func_2685() -> (Tensor[(8, 2, 9), float64],) {
  @func_2683() /* ty=(Tensor[(8, 2, 9), float64],) */
}

def @func_3900() -> (Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float32]) {
  @func_3898() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float32]) */
}

def @func_10619() -> (Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float32]) {
  %479 = fn () -> (Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float32]) {
    %477 = @func_7632() /* ty=Tensor[(8, 2, 9), float64] */;
    %478 = @func_8062() /* ty=Tensor[(8, 2, 9), float32] */;
    (%477, %478)
  };
  %479() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float32]) */
}

def @func_6415() -> (Tensor[(1152), float32],) {
  %480 = @func_2713() /* ty=(Tensor[(1152), float32], Tensor[(1404, 1), float32], Tensor[(9, 156), float32]) */;
  %481 = %480.0;
  (%481,)
}

def @func_10717() -> Tensor[(8, 2, 9), float64] {
  %482 = fn () -> Tensor[(8, 2, 9), float64] {
    @func_6398() /* ty=Tensor[(8, 2, 9), float64] */
  };
  %482() /* ty=Tensor[(8, 2, 9), float64] */
}

def @func_2369() -> (Tensor[(1152), float32],) {
  %483 = @func_2197() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1152), float32], Tensor[(250), float32]) */;
  %484 = %483.1;
  (%484,)
}

def @func_6264() -> (Tensor[(250), bool],) {
  @func_6262() /* ty=(Tensor[(250), bool],) */
}

def @func_7691() -> Tensor[(8, 2, 9), float32] {
  %485 = @func_4080() /* ty=(Tensor[(1152), float32], Tensor[(8, 2, 9), float32], Tensor[(16, 12, 6), float64], Tensor[(1404), float32]) */;
  %485.1
}

def @func_10981() -> (Tensor[(8, 2, 9), float32],) {
  %486 = @func_6130() /* ty=Tensor[(8, 2, 9), float32] */;
  (%486,)
}

def @func_7296(%var_7295: Tensor[(9, 8, 8), float32]) -> (Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float32], Tensor[(1152), float32], Tensor[(8, 2, 9), float64], Tensor[(9, 8, 8), float64], Tensor[(3, 5, 14), float32], Tensor[(250), float32], Tensor[(1152), float32]) {
  %511 = fn (%var_7203: Tensor[(9, 8, 8), float32]) -> (Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float32], Tensor[(1152), float32], Tensor[(8, 2, 9), float64], Tensor[(9, 8, 8), float64], Tensor[(3, 5, 14), float32], Tensor[(250), float32], Tensor[(1152), float32]) {
    %487 = @func_3659() /* ty=(Tensor[(8, 2, 9), float32],) */;
    %488 = @func_4145() /* ty=(Tensor[(1152), float32],) */;
    %489 = @func_2698() /* ty=(Tensor[(8, 2, 9), float64],) */;
    %490 = cast(%var_7203, dtype="float32") /* ty=Tensor[(9, 8, 8), float32] */;
    %491 = sin(%490) /* ty=Tensor[(9, 8, 8), float32] */;
    %492 = cast(%491, dtype="float32") /* ty=Tensor[(9, 8, 8), float32] */;
    %493 = acosh(%492) /* ty=Tensor[(9, 8, 8), float32] */;
    %494 = cast(%491, dtype="float32") /* ty=Tensor[(9, 8, 8), float32] */;
    %495 = sqrt(%494) /* ty=Tensor[(9, 8, 8), float32] */;
    %496 = cast(%495, dtype="float64") /* ty=Tensor[(9, 8, 8), float64] */;
    %497 = shape_of(%493, dtype="int32") /* ty=Tensor[(3), int32] */;
    %498 = cast(%493, dtype="float64") /* ty=Tensor[(9, 8, 8), float64] */;
    %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %500 = cast(meta[relay.Constant][25] /* ty=Tensor[(250), float32] */, dtype="float32") /* ty=Tensor[(250), float32] */;
    %501 = reshape(%500, newshape=[5, 5, 10]) /* ty=Tensor[(5, 5, 10), float32] */;
    %502 = @func_1815(%501) /* ty=(Tensor[(16, 12, 6), float64], Tensor[(1152), float32], Tensor[(16, 12, 6), float64], Tensor[(3, 5, 14), float32], Tensor[(210), float32], Tensor[(35, 6), int64], Tensor[(1404), float32], Tensor[(5, 5, 10), float32], Tensor[(3, 5, 14), float32]) */;
    %503 = @func_6889() /* ty=(Tensor[(1152), float32], Tensor[(35, 6), int32]) */;
    %504 = @func_4863() /* ty=Tensor[(8, 2, 9), float32] */;
    %505 = %487.0;
    %506 = %488.0;
    %507 = %489.0;
    %508 = mod(%498, %499) /* ty=Tensor[(9, 8, 8), float64] */;
    %509 = %502.8;
    %510 = %503.0;
    (%504, %505, %506, %507, %508, %509, meta[relay.Constant][25] /* ty=Tensor[(250), float32] */, %510)
  };
  %511(%var_7295) /* ty=(Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float32], Tensor[(1152), float32], Tensor[(8, 2, 9), float64], Tensor[(9, 8, 8), float64], Tensor[(3, 5, 14), float32], Tensor[(250), float32], Tensor[(1152), float32]) */
}

def @func_8168() -> (Tensor[(1152), float32],) {
  @func_8166() /* ty=(Tensor[(1152), float32],) */
}

def @func_10983() -> (Tensor[(8, 2, 9), float32],) {
  @func_10981() /* ty=(Tensor[(8, 2, 9), float32],) */
}

def @func_11316(%var_11313: Tensor[(10, 1, 10), uint64], %var_11314: Tensor[(10, 14, 10), uint64], %var_11315: Tensor[(10, 15, 10), float32]) -> (Tensor[(10, 14, 10), bool], Tensor[(1152), float32], Tensor[(32), int8], Tensor[(10, 1, 10), float64], Tensor[(8, 2, 9), float32], Tensor[(945), int16], Tensor[(105, 9), int16], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(1404, 2), uint8], Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float64], Tensor[(10, 15, 10), bool]) {
  @func_11311(%var_11313, %var_11314, %var_11315) /* ty=(Tensor[(10, 14, 10), bool], Tensor[(1152), float32], Tensor[(32), int8], Tensor[(10, 1, 10), float64], Tensor[(8, 2, 9), float32], Tensor[(945), int16], Tensor[(105, 9), int16], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(1404, 2), uint8], Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float64], Tensor[(10, 15, 10), bool]) */
}

def @func_5248() -> (Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float32]) {
  %512 = @func_2786() /* ty=(Tensor[(8, 2, 9), float32],) */;
  %513 = @func_2786() /* ty=(Tensor[(8, 2, 9), float32],) */;
  %514 = %512.0;
  %515 = %513.0;
  (%514, %515)
}

def @func_9696() -> (Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float32], Tensor[(1152), float32], Tensor[(1404), float32]) {
  %523 = fn () -> (Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float32], Tensor[(1152), float32], Tensor[(1404), float32]) {
    %516 = @func_3363() /* ty=(Tensor[(8, 2, 9), float32],) */;
    %517 = cast(meta[relay.Constant][26] /* ty=Tensor[(1404), float32] */, dtype="float32") /* ty=Tensor[(1404), float32] */;
    %518 = reshape(%517, newshape=[3, 468]) /* ty=Tensor[(3, 468), float32] */;
    %519 = @func_8158(%518) /* ty=(Tensor[(1152), float32], Tensor[(1404, 6), uint16], Tensor[(3, 468), float32]) */;
    %520 = @func_7691() /* ty=Tensor[(8, 2, 9), float32] */;
    %521 = %516.0;
    %522 = %519.0;
    (%520, %521, %522, meta[relay.Constant][26] /* ty=Tensor[(1404), float32] */)
  };
  %523() /* ty=(Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float32], Tensor[(1152), float32], Tensor[(1404), float32]) */
}

def @func_8250() -> (Tensor[(6, 5, 11), float64], Tensor[(1152), float32], Tensor[(6, 5, 11), bool]) {
  @func_8248() /* ty=(Tensor[(6, 5, 11), float64], Tensor[(1152), float32], Tensor[(6, 5, 11), bool]) */
}

def @func_2855() -> (Tensor[(8, 2, 9), float64],) {
  %524 = @func_2606() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1152), float32], Tensor[(1404), float32], Tensor[(4, 14, 12), float32]) */;
  %525 = %524.0;
  (%525,)
}

def @func_4245(%var_4243: Tensor[(210, 1), float32], %var_4244: Tensor[(250, 1), float32]) -> (Tensor[(4, 14, 12), float32], Tensor[(250), int32], Tensor[(210, 1), float32], Tensor[(250, 1), float32]) {
  @func_4241(%var_4243, %var_4244) /* ty=(Tensor[(4, 14, 12), float32], Tensor[(250), int32], Tensor[(210, 1), float32], Tensor[(250, 1), float32]) */
}

def @func_9344() -> (Tensor[(8, 2, 9), float32], Tensor[(1152), float32], Tensor[(32), int8]) {
  %532 = fn () -> (Tensor[(8, 2, 9), float32], Tensor[(1152), float32], Tensor[(32), int8]) {
    %526 = @func_3659() /* ty=(Tensor[(8, 2, 9), float32],) */;
    %527 = cast(meta[relay.Constant][27] /* ty=Tensor[(32), int8] */, dtype="int8") /* ty=Tensor[(32), int8] */;
    %528 = reshape(%527, newshape=[8, 4]) /* ty=Tensor[(8, 4), int8] */;
    %529 = @func_4808(%528) /* ty=(Tensor[(1152), float32], Tensor[(2, 2, 8), int8], Tensor[(8, 4), int8]) */;
    %530 = %526.0;
    %531 = %529.0;
    (%530, %531, meta[relay.Constant][27] /* ty=Tensor[(32), int8] */)
  };
  %532() /* ty=(Tensor[(8, 2, 9), float32], Tensor[(1152), float32], Tensor[(32), int8]) */
}

def @func_2199() -> (Tensor[(8, 2, 9), float64], Tensor[(1152), float32], Tensor[(250), float32]) {
  @func_2197() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1152), float32], Tensor[(250), float32]) */
}

def @func_10383() -> (Tensor[(1152), float32],) {
  %534 = fn () -> (Tensor[(1152), float32],) {
    %533 = @func_3880() /* ty=Tensor[(1152), float32] */;
    (%533,)
  };
  %534() /* ty=(Tensor[(1152), float32],) */
}

def @func_2857() -> (Tensor[(8, 2, 9), float64],) {
  @func_2855() /* ty=(Tensor[(8, 2, 9), float64],) */
}

def @func_3357(%var_3356: Tensor[(7, 15, 9), int16]) -> (Tensor[(7, 15, 9), int16], Tensor[(7, 15, 9), float64]) {
  %545 = fn (%var_3337: Tensor[(7, 15, 9), int16]) -> (Tensor[(7, 15, 9), int16], Tensor[(7, 15, 9), float64]) {
    %535 = cast(meta[relay.Constant][28] /* ty=Tensor[(7, 15, 9), int16] */, dtype="int16") /* ty=Tensor[(7, 15, 9), int16] */;
    %536 = shape_of(%var_3337, dtype="int32") /* ty=Tensor[(3), int32] */;
    %537 = cast(%var_3337, dtype="int16") /* ty=Tensor[(7, 15, 9), int16] */;
    %538 = dyn.reshape(%535, %536, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %539 = cast(meta[relay.Constant][28] /* ty=Tensor[(7, 15, 9), int16] */, dtype="float64") /* ty=Tensor[(7, 15, 9), float64] */;
    %540 = shape_of(%var_3337, dtype="int32") /* ty=Tensor[(3), int32] */;
    %541 = cast(%var_3337, dtype="float64") /* ty=Tensor[(7, 15, 9), float64] */;
    %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %543 = logical_xor(%537, %538) /* ty=Tensor[(7, 15, 9), int16] */;
    %544 = subtract(%541, %542) /* ty=Tensor[(7, 15, 9), float64] */;
    (%543, %544)
  };
  %545(%var_3356) /* ty=(Tensor[(7, 15, 9), int16], Tensor[(7, 15, 9), float64]) */
}

def @func_8797() -> (Tensor[(1404, 2), uint8],) {
  %546 = @func_7097() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1404, 2), uint8]) */;
  %547 = %546.1;
  (%547,)
}

def @func_11419() -> (Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64]) {
  %552 = fn () -> (Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64]) {
    %548 = @func_5248() /* ty=(Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float32]) */;
    %549 = @func_3005() /* ty=(Tensor[(8, 2, 9), float64],) */;
    %550 = %548.0;
    %551 = %549.0;
    (%550, %551)
  };
  %552() /* ty=(Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64]) */
}

def @main() -> (Tensor[(315, 3), float32],) {
  %553 = @func_7562() /* ty=(Tensor[(1152), float32], Tensor[(8, 2, 9), float64], Tensor[(7, 15, 9), float64], Tensor[(315, 3), int16]) */;
  %554 = %553.3;
  %555 = cast(%554, dtype="float32") /* ty=Tensor[(315, 3), float32] */;
  %556 = log10(%555) /* ty=Tensor[(315, 3), float32] */;
  %557 = cast(%556, dtype="float64") /* ty=Tensor[(315, 3), float64] */;
  %558 = atanh(%557) /* ty=Tensor[(315, 3), float64] */;
  %559 = cast(%558, dtype="float32") /* ty=Tensor[(315, 3), float32] */;
  %560 = erf(%559) /* ty=Tensor[(315, 3), float32] */;
  (%560,)
}

def @func_1957() -> (Tensor[(8, 2, 9), float64],) {
  %561 = @func_1909() /* ty=Tensor[(8, 2, 9), float64] */;
  (%561,)
}

def @func_2170(%var_2168: Tensor[(1152), float32], %var_2169: Tensor[(1404, 1), float32]) -> (Tensor[(8, 2, 9), float64], Tensor[(5, 5, 10), float32], Tensor[(250), float32], Tensor[(16, 12, 6), float64], Tensor[(1152), float32], Tensor[(3, 5, 14), float32], Tensor[(1404, 1), float32]) {
  %575 = fn (%var_2151: Tensor[(1152), float32], %var_2165: Tensor[(1404, 1), float32]) -> (Tensor[(8, 2, 9), float64], Tensor[(5, 5, 10), float32], Tensor[(250), float32], Tensor[(16, 12, 6), float64], Tensor[(1152), float32], Tensor[(3, 5, 14), float32], Tensor[(1404, 1), float32]) {
    %562 = @func_1957() /* ty=(Tensor[(8, 2, 9), float64],) */;
    %563 = cast(meta[relay.Constant][29] /* ty=Tensor[(250), float32] */, dtype="float32") /* ty=Tensor[(250), float32] */;
    %564 = reshape(%563, newshape=[5, 5, 10]) /* ty=Tensor[(5, 5, 10), float32] */;
    %565 = @func_1815(%564) /* ty=(Tensor[(16, 12, 6), float64], Tensor[(1152), float32], Tensor[(16, 12, 6), float64], Tensor[(3, 5, 14), float32], Tensor[(210), float32], Tensor[(35, 6), int64], Tensor[(1404), float32], Tensor[(5, 5, 10), float32], Tensor[(3, 5, 14), float32]) */;
    %566 = cast(%var_2151, dtype="float32") /* ty=Tensor[(1152), float32] */;
    %567 = reshape(%566, newshape=[16, 12, 6]) /* ty=Tensor[(16, 12, 6), float32] */;
    %568 = cast(%var_2165, dtype="float32") /* ty=Tensor[(1404, 1), float32] */;
    %569 = reshape(%568, newshape=[9, 12, 13]) /* ty=Tensor[(9, 12, 13), float32] */;
    %570 = @func_1417(%569) /* ty=(Tensor[(9, 12, 13), float32], Tensor[(3, 5, 14), float32], Tensor[(35, 6), int64]) */;
    %571 = %562.0;
    %572 = %565.7;
    %573 = @func_1446(%567) /* ty=Tensor[(16, 12, 6), float64] */;
    %574 = %570.1;
    (%571, %572, meta[relay.Constant][29] /* ty=Tensor[(250), float32] */, %573, %var_2151, %574, %var_2165)
  };
  %575(%var_2168, %var_2169) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(5, 5, 10), float32], Tensor[(250), float32], Tensor[(16, 12, 6), float64], Tensor[(1152), float32], Tensor[(3, 5, 14), float32], Tensor[(1404, 1), float32]) */
}

def @func_3210(%var_3209: Tensor[(1404), float32]) -> (Tensor[(8, 2, 9), float64], Tensor[(16, 12, 6), float64], Tensor[(4, 288), float32], Tensor[(1404), float32]) {
  %584 = fn (%var_3206: Tensor[(1404), float32]) -> (Tensor[(8, 2, 9), float64], Tensor[(16, 12, 6), float64], Tensor[(4, 288), float32], Tensor[(1404), float32]) {
    %576 = @func_3044() /* ty=(Tensor[(8, 2, 9), float64],) */;
    %577 = cast(meta[relay.Constant][30] /* ty=Tensor[(4, 288), float32] */, dtype="float32") /* ty=Tensor[(4, 288), float32] */;
    %578 = cast(%var_3206, dtype="float32") /* ty=Tensor[(1404), float32] */;
    %579 = reshape(%577, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
    %580 = reshape(%578, newshape=[1404, 1]) /* ty=Tensor[(1404, 1), float32] */;
    %581 = @func_2167(%579, %580) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(5, 5, 10), float32], Tensor[(250), float32], Tensor[(16, 12, 6), float64], Tensor[(1152), float32], Tensor[(3, 5, 14), float32], Tensor[(1404, 1), float32]) */;
    %582 = %576.0;
    %583 = %581.3;
    (%582, %583, meta[relay.Constant][30] /* ty=Tensor[(4, 288), float32] */, %var_3206)
  };
  %584(%var_3209) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(16, 12, 6), float64], Tensor[(4, 288), float32], Tensor[(1404), float32]) */
}

def @func_3620() -> (Tensor[(8, 2, 9), float32],) {
  %585 = @func_2786() /* ty=(Tensor[(8, 2, 9), float32],) */;
  %586 = %585.0;
  (%586,)
}

def @func_8018() -> Tensor[(8, 2, 9), float32] {
  %587 = @func_3659() /* ty=(Tensor[(8, 2, 9), float32],) */;
  %587.0
}

def @func_6399() -> Tensor[(8, 2, 9), float64] {
  %589 = fn () -> Tensor[(8, 2, 9), float64] {
    %588 = @func_2197() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1152), float32], Tensor[(250), float32]) */;
    %588.0
  };
  %589() /* ty=Tensor[(8, 2, 9), float64] */
}

def @func_1815(%var_1726: Tensor[(5, 5, 10), float32]) -> (Tensor[(16, 12, 6), float64], Tensor[(1152), float32], Tensor[(16, 12, 6), float64], Tensor[(3, 5, 14), float32], Tensor[(210), float32], Tensor[(35, 6), int64], Tensor[(1404), float32], Tensor[(5, 5, 10), float32], Tensor[(3, 5, 14), float32]) {
  %590 = cast(meta[relay.Constant][31] /* ty=Tensor[(1152), float32] */, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %591 = reshape(%590, newshape=[16, 12, 6]) /* ty=Tensor[(16, 12, 6), float32] */;
  %592 = cast(meta[relay.Constant][31] /* ty=Tensor[(1152), float32] */, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %593 = reshape(%592, newshape=[16, 12, 6]) /* ty=Tensor[(16, 12, 6), float32] */;
  %594 = cast(meta[relay.Constant][32] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %595 = reshape(%594, newshape=[3, 5, 14]) /* ty=Tensor[(3, 5, 14), float32] */;
  %596 = @func_293(%595) /* ty=(Tensor[(3, 5, 14), float32],) */;
  %597 = cast(meta[relay.Constant][33] /* ty=Tensor[(1404), float32] */, dtype="float32") /* ty=Tensor[(1404), float32] */;
  %598 = reshape(%597, newshape=[9, 12, 13]) /* ty=Tensor[(9, 12, 13), float32] */;
  %599 = @func_1417(%598) /* ty=(Tensor[(9, 12, 13), float32], Tensor[(3, 5, 14), float32], Tensor[(35, 6), int64]) */;
  %600 = cast(%var_1726, dtype="float32") /* ty=Tensor[(5, 5, 10), float32] */;
  %601 = sqrt(%600) /* ty=Tensor[(5, 5, 10), float32] */;
  %602 = cast(%601, dtype="float32") /* ty=Tensor[(5, 5, 10), float32] */;
  %603 = asin(%602) /* ty=Tensor[(5, 5, 10), float32] */;
  %604 = cast(%603, dtype="float32") /* ty=Tensor[(5, 5, 10), float32] */;
  %605 = %596.0;
  %606 = cast(%605, dtype="float32") /* ty=Tensor[(3, 5, 14), float32] */;
  %607 = reshape(%606, newshape=[3, 5, 14]) /* ty=Tensor[(3, 5, 14), float32] */;
  %608 = @func_293(%607) /* ty=(Tensor[(3, 5, 14), float32],) */;
  %609 = @func_1446(%591) /* ty=Tensor[(16, 12, 6), float64] */;
  %610 = @func_1446(%593) /* ty=Tensor[(16, 12, 6), float64] */;
  %611 = %599.2;
  %612 = sin(%604) /* ty=Tensor[(5, 5, 10), float32] */;
  %613 = %608.0;
  (%609, meta[relay.Constant][31] /* ty=Tensor[(1152), float32] */, %610, %605, meta[relay.Constant][32] /* ty=Tensor[(210), float32] */, %611, meta[relay.Constant][33] /* ty=Tensor[(1404), float32] */, %612, %613)
}

def @func_8217() -> (Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64]) {
  %614 = @func_6503() /* ty=(Tensor[(8, 2, 9), float32],) */;
  %615 = @func_7097() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1404, 2), uint8]) */;
  %616 = %614.0;
  %617 = %615.0;
  (%616, %617)
}

def @func_2649() -> Tensor[(1152), float32] {
  %619 = fn () -> Tensor[(1152), float32] {
    %618 = @func_2606() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1152), float32], Tensor[(1404), float32], Tensor[(4, 14, 12), float32]) */;
    %618.1
  };
  %619() /* ty=Tensor[(1152), float32] */
}

def @func_7863(%var_7843: Tensor[(315, 3), int16]) -> (Tensor[(8, 2, 9), float64], Tensor[(315, 3), uint16]) {
  %620 = @func_1957() /* ty=(Tensor[(8, 2, 9), float64],) */;
  %621 = @func_7560() /* ty=(Tensor[(1152), float32], Tensor[(8, 2, 9), float64], Tensor[(7, 15, 9), float64], Tensor[(315, 3), int16]) */;
  %622 = %621.3;
  %623 = cast(%var_7843, dtype="bool") /* ty=Tensor[(315, 3), bool] */;
  %624 = shape_of(%622, dtype="int32") /* ty=Tensor[(2), int32] */;
  %625 = cast(%622, dtype="bool") /* ty=Tensor[(315, 3), bool] */;
  %626 = dyn.reshape(%623, %624, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %627 = greater(%625, %626) /* ty=Tensor[(315, 3), bool] */;
  %628 = cast(meta[relay.Constant][34] /* ty=Tensor[(315, 3), bool] */, dtype="uint16") /* ty=Tensor[(315, 3), uint16] */;
  %629 = shape_of(%627, dtype="int32") /* ty=Tensor[(2), int32] */;
  %630 = cast(%627, dtype="uint16") /* ty=Tensor[(315, 3), uint16] */;
  %631 = dyn.reshape(%628, %629, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %632 = %620.0;
  %633 = multiply(%630, %631) /* ty=Tensor[(315, 3), uint16] */;
  (%632, %633)
}

def @func_8248() -> (Tensor[(6, 5, 11), float64], Tensor[(1152), float32], Tensor[(6, 5, 11), bool]) {
  %634 = cast(meta[relay.Constant][36] /* ty=Tensor[(6, 5, 11), float64] */, dtype="float64") /* ty=Tensor[(6, 5, 11), float64] */;
  %635 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(6, 5, 11), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %636 = cast(meta[relay.Constant][35] /* ty=Tensor[(6, 5, 11), float64] */, dtype="float64") /* ty=Tensor[(6, 5, 11), float64] */;
  %637 = dyn.reshape(%634, %635, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %638 = @func_6065() /* ty=(Tensor[(250), int8], Tensor[(250), float64], Tensor[(1152), float32]) */;
  %639 = cast(meta[relay.Constant][35] /* ty=Tensor[(6, 5, 11), float64] */, dtype="bool") /* ty=Tensor[(6, 5, 11), bool] */;
  %640 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(6, 5, 11), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %641 = cast(meta[relay.Constant][36] /* ty=Tensor[(6, 5, 11), float64] */, dtype="bool") /* ty=Tensor[(6, 5, 11), bool] */;
  %642 = dyn.reshape(%639, %640, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %643 = add(%636, %637) /* ty=Tensor[(6, 5, 11), float64] */;
  %644 = %638.2;
  %645 = greater_equal(%641, %642) /* ty=Tensor[(6, 5, 11), bool] */;
  (%643, %644, %645)
}

def @func_11515() -> (Tensor[(8, 2, 9), float64], Tensor[(1152), float32], Tensor[(8, 2, 9), float64]) {
  %651 = fn () -> (Tensor[(8, 2, 9), float64], Tensor[(1152), float32], Tensor[(8, 2, 9), float64]) {
    %646 = @func_7402() /* ty=(Tensor[(1152), float32],) */;
    %647 = @func_10376() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1152), float32]) */;
    %648 = @func_10716() /* ty=Tensor[(8, 2, 9), float64] */;
    %649 = %646.0;
    %650 = %647.0;
    (%648, %649, %650)
  };
  %651() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1152), float32], Tensor[(8, 2, 9), float64]) */
}

def @func_11704(%var_11693: Tensor[(1404), float32]) -> (Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(1404), float32]) {
  %652 = @func_7979() /* ty=(Tensor[(1152), float32], Tensor[(8, 2, 9), float32]) */;
  %653 = %652.0;
  %654 = cast(%653, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %655 = cast(%var_11693, dtype="float32") /* ty=Tensor[(1404), float32] */;
  %656 = reshape(%654, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %657 = reshape(%655, newshape=[1404]) /* ty=Tensor[(1404), float32] */;
  %658 = @func_3332(%656, %657) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1404, 1), float32], Tensor[(1152), float32], Tensor[(1404), float32]) */;
  %659 = %658.2;
  (%653, %659, %var_11693)
}

def @func_1449(%var_1447: Tensor[(16, 12, 6), float32]) -> Tensor[(16, 12, 6), float64] {
  @func_1446(%var_1447) /* ty=Tensor[(16, 12, 6), float64] */
}

def @func_3835(%var_3834: Tensor[(1, 7, 7), float32]) -> (Tensor[(1, 7, 7), float32], Tensor[(1, 7, 7), float32]) {
  %664 = fn (%var_3822: Tensor[(1, 7, 7), float32]) -> (Tensor[(1, 7, 7), float32], Tensor[(1, 7, 7), float32]) {
    %660 = cast(%var_3822, dtype="float32") /* ty=Tensor[(1, 7, 7), float32] */;
    %661 = cast(%var_3822, dtype="float32") /* ty=Tensor[(1, 7, 7), float32] */;
    %662 = sinh(%660) /* ty=Tensor[(1, 7, 7), float32] */;
    %663 = erf(%661) /* ty=Tensor[(1, 7, 7), float32] */;
    (%662, %663)
  };
  %664(%var_3834) /* ty=(Tensor[(1, 7, 7), float32], Tensor[(1, 7, 7), float32]) */
}

def @func_9078() -> (Tensor[(8, 2, 9), float32],) {
  %665 = @func_3363() /* ty=(Tensor[(8, 2, 9), float32],) */;
  %666 = %665.0;
  (%666,)
}

def @func_2818(%var_2813: Tensor[(5, 15, 16), float32]) -> (Tensor[(5, 15, 16), float32],) {
  %667 = cast(%var_2813, dtype="float32") /* ty=Tensor[(5, 15, 16), float32] */;
  %668 = cos(%667) /* ty=Tensor[(5, 15, 16), float32] */;
  (%668,)
}

def @func_2547(%var_2545: Tensor[(210), float32], %var_2546: Tensor[(250), float32]) -> (Tensor[(1152), float32], Tensor[(8, 2, 9), float64], Tensor[(16, 12, 6), float64], Tensor[(3, 5, 14), float32], Tensor[(210), float32], Tensor[(250), uint8], Tensor[(250), int32]) {
  %696 = fn (%var_2517: Tensor[(210), float32], %var_2521: Tensor[(250), float32]) -> (Tensor[(1152), float32], Tensor[(8, 2, 9), float64], Tensor[(16, 12, 6), float64], Tensor[(3, 5, 14), float32], Tensor[(210), float32], Tensor[(250), uint8], Tensor[(250), int32]) {
    %669 = @func_2369() /* ty=(Tensor[(1152), float32],) */;
    %670 = @func_2120() /* ty=(Tensor[(8, 2, 9), float64],) */;
    %671 = cast(meta[relay.Constant][37] /* ty=Tensor[(250), float32] */, dtype="float32") /* ty=Tensor[(250), float32] */;
    %672 = reshape(%671, newshape=[5, 5, 10]) /* ty=Tensor[(5, 5, 10), float32] */;
    %673 = @func_1815(%672) /* ty=(Tensor[(16, 12, 6), float64], Tensor[(1152), float32], Tensor[(16, 12, 6), float64], Tensor[(3, 5, 14), float32], Tensor[(210), float32], Tensor[(35, 6), int64], Tensor[(1404), float32], Tensor[(5, 5, 10), float32], Tensor[(3, 5, 14), float32]) */;
    %674 = cast(%var_2517, dtype="float32") /* ty=Tensor[(210), float32] */;
    %675 = reshape(%674, newshape=[3, 5, 14]) /* ty=Tensor[(3, 5, 14), float32] */;
    %676 = @func_293(%675) /* ty=(Tensor[(3, 5, 14), float32],) */;
    %677 = cast(%var_2521, dtype="float64") /* ty=Tensor[(250), float64] */;
    %678 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(250), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %679 = cast(meta[relay.Constant][37] /* ty=Tensor[(250), float32] */, dtype="float64") /* ty=Tensor[(250), float64] */;
    %680 = dyn.reshape(%677, %678, newshape=[]) /* ty=Tensor[(?), float64] */;
    %681 = power(%679, %680) /* ty=Tensor[(250), float64] */;
    %682 = cast(%681, dtype="uint8") /* ty=Tensor[(250), uint8] */;
    %683 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(250), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %684 = cast(meta[relay.Constant][37] /* ty=Tensor[(250), float32] */, dtype="uint8") /* ty=Tensor[(250), uint8] */;
    %685 = dyn.reshape(%682, %683, newshape=[]) /* ty=Tensor[(?), uint8] */;
    %686 = cast(%681, dtype="int32") /* ty=Tensor[(250), int32] */;
    %687 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(250), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %688 = cast(meta[relay.Constant][37] /* ty=Tensor[(250), float32] */, dtype="int32") /* ty=Tensor[(250), int32] */;
    %689 = dyn.reshape(%686, %687, newshape=[]) /* ty=Tensor[(?), int32] */;
    %690 = %669.0;
    %691 = %670.0;
    %692 = %673.2;
    %693 = %676.0;
    %694 = minimum(%684, %685) /* ty=Tensor[(250), uint8] */;
    %695 = bitwise_or(%688, %689) /* ty=Tensor[(250), int32] */;
    (%690, %691, %692, %693, %var_2517, %694, %695)
  };
  %696(%var_2545, %var_2546) /* ty=(Tensor[(1152), float32], Tensor[(8, 2, 9), float64], Tensor[(16, 12, 6), float64], Tensor[(3, 5, 14), float32], Tensor[(210), float32], Tensor[(250), uint8], Tensor[(250), int32]) */
}

def @func_6417() -> (Tensor[(1152), float32],) {
  @func_6415() /* ty=(Tensor[(1152), float32],) */
}

def @func_8799() -> (Tensor[(1404, 2), uint8],) {
  @func_8797() /* ty=(Tensor[(1404, 2), uint8],) */
}

def @func_7981() -> (Tensor[(1152), float32], Tensor[(8, 2, 9), float32]) {
  @func_7979() /* ty=(Tensor[(1152), float32], Tensor[(8, 2, 9), float32]) */
}

def @func_9161() -> Tensor[(1152), float32] {
  %698 = fn () -> Tensor[(1152), float32] {
    %697 = @func_6451() /* ty=(Tensor[(1152), float32],) */;
    %697.0
  };
  %698() /* ty=Tensor[(1152), float32] */
}

def @func_3153(%var_3151: Tensor[(250), float32], %var_3152: Tensor[(250), float32]) -> (Tensor[(8, 2, 9), float32], Tensor[(5, 5, 10), float32], Tensor[(250), bool], Tensor[(8, 3, 210), int32], Tensor[(24), float32], Tensor[(210), float32]) {
  @func_3149(%var_3151, %var_3152) /* ty=(Tensor[(8, 2, 9), float32], Tensor[(5, 5, 10), float32], Tensor[(250), bool], Tensor[(8, 3, 210), int32], Tensor[(24), float32], Tensor[(210), float32]) */
}

def @func_5224(%var_5194: Tensor[(32), int8]) -> (Tensor[(8, 2, 9), float64], Tensor[(1152), int32], Tensor[(8, 4), int8], Tensor[(32), int8]) {
  %699 = @func_2683() /* ty=(Tensor[(8, 2, 9), float64],) */;
  %700 = @func_2197() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1152), float32], Tensor[(250), float32]) */;
  %701 = %700.1;
  %702 = @func_2648() /* ty=Tensor[(1152), float32] */;
  %703 = cast(%702, dtype="int32") /* ty=Tensor[(1152), int32] */;
  %704 = shape_of(%701, dtype="int32") /* ty=Tensor[(1), int32] */;
  %705 = cast(%701, dtype="int32") /* ty=Tensor[(1152), int32] */;
  %706 = dyn.reshape(%703, %704, newshape=[]) /* ty=Tensor[(?), int32] */;
  %707 = cast(%var_5194, dtype="int8") /* ty=Tensor[(32), int8] */;
  %708 = reshape(%707, newshape=[8, 4]) /* ty=Tensor[(8, 4), int8] */;
  %709 = @func_4808(%708) /* ty=(Tensor[(1152), float32], Tensor[(2, 2, 8), int8], Tensor[(8, 4), int8]) */;
  %710 = %699.0;
  %711 = maximum(%705, %706) /* ty=Tensor[(1152), int32] */;
  %712 = %709.2;
  (%710, %711, %712, %var_5194)
}

def @func_1818(%var_1816: Tensor[(5, 5, 10), float32]) -> (Tensor[(16, 12, 6), float64], Tensor[(1152), float32], Tensor[(16, 12, 6), float64], Tensor[(3, 5, 14), float32], Tensor[(210), float32], Tensor[(35, 6), int64], Tensor[(1404), float32], Tensor[(5, 5, 10), float32], Tensor[(3, 5, 14), float32]) {
  @func_1815(%var_1816) /* ty=(Tensor[(16, 12, 6), float64], Tensor[(1152), float32], Tensor[(16, 12, 6), float64], Tensor[(3, 5, 14), float32], Tensor[(210), float32], Tensor[(35, 6), int64], Tensor[(1404), float32], Tensor[(5, 5, 10), float32], Tensor[(3, 5, 14), float32]) */
}

def @func_8134() -> Tensor[(8, 2, 9), float32] {
  %714 = fn () -> Tensor[(8, 2, 9), float32] {
    %713 = @func_7979() /* ty=(Tensor[(1152), float32], Tensor[(8, 2, 9), float32]) */;
    %713.1
  };
  %714() /* ty=Tensor[(8, 2, 9), float32] */
}

def @func_8166() -> (Tensor[(1152), float32],) {
  %715 = @func_2197() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1152), float32], Tensor[(250), float32]) */;
  %716 = %715.1;
  (%716,)
}

def @func_2731(%var_2729: Tensor[(9, 16, 1), uint32], %var_2730: Tensor[(9, 16, 2), uint32]) -> (Tensor[(9, 16, 2), bool], Tensor[(1404, 1), float32]) {
  @func_2727(%var_2729, %var_2730) /* ty=(Tensor[(9, 16, 2), bool], Tensor[(1404, 1), float32]) */
}

def @func_7920() -> (Tensor[(8, 2, 9), float64],) {
  %718 = fn () -> (Tensor[(8, 2, 9), float64],) {
    %717 = @func_2205() /* ty=Tensor[(8, 2, 9), float64] */;
    (%717,)
  };
  %718() /* ty=(Tensor[(8, 2, 9), float64],) */
}

def @func_2457() -> (Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float64]) {
  @func_2455() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float64]) */
}

def @func_7866(%var_7864: Tensor[(315, 3), int16]) -> (Tensor[(8, 2, 9), float64], Tensor[(315, 3), uint16]) {
  @func_7863(%var_7864) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(315, 3), uint16]) */
}

def @func_8199() -> (Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(1152), float32]) {
  %724 = fn () -> (Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(1152), float32]) {
    %719 = @func_2898() /* ty=(Tensor[(1152), float32],) */;
    %720 = @func_4610() /* ty=(Tensor[(8, 2, 9), float32], Tensor[(1152), float32], Tensor[(16, 12, 6), float64]) */;
    %721 = @func_4784() /* ty=Tensor[(1152), float32] */;
    %722 = %719.0;
    %723 = %720.1;
    (%721, %722, %723)
  };
  %724() /* ty=(Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(1152), float32]) */
}

def @func_7773() -> (Tensor[(315, 3), int16], Tensor[(9, 8, 8), float64], Tensor[(576), float32]) {
  @func_7771() /* ty=(Tensor[(315, 3), int16], Tensor[(9, 8, 8), float64], Tensor[(576), float32]) */
}

def @func_5250() -> (Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float32]) {
  @func_5248() /* ty=(Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float32]) */
}

def @func_4808(%var_4804: Tensor[(8, 4), int8]) -> (Tensor[(1152), float32], Tensor[(2, 2, 8), int8], Tensor[(8, 4), int8]) {
  %725 = cast(%var_4804, dtype="int8") /* ty=Tensor[(8, 4), int8] */;
  %726 = cast(%var_4804, dtype="int8") /* ty=Tensor[(8, 4), int8] */;
  %727 = reshape(%725, newshape=[2, 2, 8]) /* ty=Tensor[(2, 2, 8), int8] */;
  %728 = reshape(%726, newshape=[2, 2, 8]) /* ty=Tensor[(2, 2, 8), int8] */;
  %729 = @func_4784() /* ty=Tensor[(1152), float32] */;
  %730 = @func_3451(%727, %728) /* ty=Tensor[(2, 2, 8), int8] */;
  (%729, %730, %var_4804)
}

def @func_8962() -> Tensor[(8, 2, 9), float32] {
  %731 = @func_3659() /* ty=(Tensor[(8, 2, 9), float32],) */;
  %731.0
}

def @func_11311(%var_11168: Tensor[(10, 1, 10), uint64], %var_11169: Tensor[(10, 14, 10), uint64], %var_11198: Tensor[(10, 15, 10), float32]) -> (Tensor[(10, 14, 10), bool], Tensor[(1152), float32], Tensor[(32), int8], Tensor[(10, 1, 10), float64], Tensor[(8, 2, 9), float32], Tensor[(945), int16], Tensor[(105, 9), int16], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(1404, 2), uint8], Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float64], Tensor[(10, 15, 10), bool]) {
  %732 = cast(%var_11168, dtype="bool") /* ty=Tensor[(10, 1, 10), bool] */;
  %733 = cast(%var_11169, dtype="bool") /* ty=Tensor[(10, 14, 10), bool] */;
  %734 = @func_4145() /* ty=(Tensor[(1152), float32],) */;
  %735 = @func_9343() /* ty=(Tensor[(8, 2, 9), float32], Tensor[(1152), float32], Tensor[(32), int8]) */;
  %736 = cast(%var_11168, dtype="float32") /* ty=Tensor[(10, 1, 10), float32] */;
  %737 = sigmoid(%736) /* ty=Tensor[(10, 1, 10), float32] */;
  %738 = cast(%737, dtype="float64") /* ty=Tensor[(10, 1, 10), float64] */;
  %739 = @func_6615() /* ty=(Tensor[(8, 2, 9), float32],) */;
  %740 = cast(meta[relay.Constant][38] /* ty=Tensor[(105, 9), int16] */, dtype="int16") /* ty=Tensor[(105, 9), int16] */;
  %741 = reshape(%740, newshape=[945]) /* ty=Tensor[(945), int16] */;
  %742 = @func_6564(%741) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(7, 15, 9), float64], Tensor[(945), int16], Tensor[(1152), float32]) */;
  %743 = @func_6415() /* ty=(Tensor[(1152), float32],) */;
  %744 = @func_10234() /* ty=(Tensor[(1152), float32],) */;
  %745 = @func_8797() /* ty=(Tensor[(1404, 2), uint8],) */;
  %746 = @func_8687() /* ty=(Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64]) */;
  %747 = @func_10618() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float32]) */;
  %748 = cast(%737, dtype="bool") /* ty=Tensor[(10, 1, 10), bool] */;
  %749 = cast(%var_11198, dtype="bool") /* ty=Tensor[(10, 15, 10), bool] */;
  %750 = less(%748, %749) /* ty=Tensor[(10, 15, 10), bool] */;
  %751 = cast(%750, dtype="float64") /* ty=Tensor[(10, 15, 10), float64] */;
  %752 = sinh(%751) /* ty=Tensor[(10, 15, 10), float64] */;
  %753 = cast(%752, dtype="float32") /* ty=Tensor[(10, 15, 10), float32] */;
  %754 = erf(%753) /* ty=Tensor[(10, 15, 10), float32] */;
  %755 = cast(%754, dtype="float32") /* ty=Tensor[(10, 15, 10), float32] */;
  %756 = atan(%755) /* ty=Tensor[(10, 15, 10), float32] */;
  %757 = cast(%752, dtype="bool") /* ty=Tensor[(10, 15, 10), bool] */;
  %758 = shape_of(%756, dtype="int32") /* ty=Tensor[(3), int32] */;
  %759 = cast(%756, dtype="bool") /* ty=Tensor[(10, 15, 10), bool] */;
  %760 = dyn.reshape(%757, %758, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %761 = less(%732, %733) /* ty=Tensor[(10, 14, 10), bool] */;
  %762 = %734.0;
  %763 = %735.2;
  %764 = cos(%738) /* ty=Tensor[(10, 1, 10), float64] */;
  %765 = %739.0;
  %766 = %742.2;
  %767 = %743.0;
  %768 = %744.0;
  %769 = %745.0;
  %770 = %746.1;
  %771 = %747.0;
  %772 = equal(%759, %760) /* ty=Tensor[(10, 15, 10), bool] */;
  (%761, %762, %763, %764, %765, %766, meta[relay.Constant][38] /* ty=Tensor[(105, 9), int16] */, %767, %768, %769, %770, %771, %772)
}

def @func_6504() -> (Tensor[(8, 2, 9), float32],) {
  %775 = fn () -> (Tensor[(8, 2, 9), float32],) {
    %773 = @func_3620() /* ty=(Tensor[(8, 2, 9), float32],) */;
    %774 = %773.0;
    (%774,)
  };
  %775() /* ty=(Tensor[(8, 2, 9), float32],) */
}

def @func_8765(%var_8764: float64) -> Tensor[(11, 1, 5), bool] {
  %778 = fn (%var_8753: float64) -> Tensor[(11, 1, 5), bool] {
    %776 = cast(%var_8753, dtype="bool") /* ty=bool */;
    %777 = cast(meta[relay.Constant][39] /* ty=Tensor[(11, 1, 5), float64] */, dtype="bool") /* ty=Tensor[(11, 1, 5), bool] */;
    not_equal(%776, %777) /* ty=Tensor[(11, 1, 5), bool] */
  };
  %778(%var_8764) /* ty=Tensor[(11, 1, 5), bool] */
}

def @func_9034() -> (Tensor[(1152), float32],) {
  @func_9032() /* ty=(Tensor[(1152), float32],) */
}

def @func_1419(%var_1418: Tensor[(9, 12, 13), float32]) -> (Tensor[(9, 12, 13), float32], Tensor[(3, 5, 14), float32], Tensor[(35, 6), int64]) {
  %794 = fn (%var_1364: Tensor[(9, 12, 13), float32]) -> (Tensor[(9, 12, 13), float32], Tensor[(3, 5, 14), float32], Tensor[(35, 6), int64]) {
    %779 = cast(%var_1364, dtype="float32") /* ty=Tensor[(9, 12, 13), float32] */;
    %780 = cast(meta[relay.Constant][40] /* ty=Tensor[(35, 6), float32] */, dtype="float32") /* ty=Tensor[(35, 6), float32] */;
    %781 = reshape(%780, newshape=[3, 5, 14]) /* ty=Tensor[(3, 5, 14), float32] */;
    %782 = @func_293(%781) /* ty=(Tensor[(3, 5, 14), float32],) */;
    %783 = cast(meta[relay.Constant][40] /* ty=Tensor[(35, 6), float32] */, dtype="float64") /* ty=Tensor[(35, 6), float64] */;
    %784 = atanh(%783) /* ty=Tensor[(35, 6), float64] */;
    %785 = cast(meta[relay.Constant][40] /* ty=Tensor[(35, 6), float32] */, dtype="float32") /* ty=Tensor[(35, 6), float32] */;
    %786 = tan(%785) /* ty=Tensor[(35, 6), float32] */;
    %787 = cast(%786, dtype="int64") /* ty=Tensor[(35, 6), int64] */;
    %788 = shape_of(%784, dtype="int32") /* ty=Tensor[(2), int32] */;
    %789 = cast(%784, dtype="int64") /* ty=Tensor[(35, 6), int64] */;
    %790 = dyn.reshape(%787, %788, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
    %791 = sin(%779) /* ty=Tensor[(9, 12, 13), float32] */;
    %792 = %782.0;
    %793 = bitwise_or(%789, %790) /* ty=Tensor[(35, 6), int64] */;
    (%791, %792, %793)
  };
  %794(%var_1418) /* ty=(Tensor[(9, 12, 13), float32], Tensor[(3, 5, 14), float32], Tensor[(35, 6), int64]) */
}

def @func_6945() -> Tensor[(8, 2, 9), float32] {
  %795 = fn () -> Tensor[(8, 2, 9), float32] {
    @func_5573() /* ty=Tensor[(8, 2, 9), float32] */
  };
  %795() /* ty=Tensor[(8, 2, 9), float32] */
}

def @func_3898() -> (Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float32]) {
  %796 = @func_2455() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float64]) */;
  %797 = @func_3363() /* ty=(Tensor[(8, 2, 9), float32],) */;
  %798 = %796.0;
  %799 = %797.0;
  (%798, %799)
}

def @func_10184() -> Tensor[(1152), float32] {
  @func_10182() /* ty=Tensor[(1152), float32] */
}

def @func_4610() -> (Tensor[(8, 2, 9), float32], Tensor[(1152), float32], Tensor[(16, 12, 6), float64]) {
  %800 = @func_3898() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float32]) */;
  %801 = @func_4145() /* ty=(Tensor[(1152), float32],) */;
  %802 = %801.0;
  %803 = cast(%802, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %804 = reshape(%803, newshape=[16, 12, 6]) /* ty=Tensor[(16, 12, 6), float32] */;
  %805 = %800.1;
  %806 = @func_1446(%804) /* ty=Tensor[(16, 12, 6), float64] */;
  (%805, %802, %806)
}

def @func_9980(%var_9978: Tensor[(9, 2, 4), uint8]) -> (Tensor[(9, 2, 4), int32], Tensor[(8, 2, 9), float64]) {
  @func_9977(%var_9978) /* ty=(Tensor[(9, 2, 4), int32], Tensor[(8, 2, 9), float64]) */
}

def @func_8743() -> Tensor[(8, 2, 9), float32] {
  @func_8741() /* ty=Tensor[(8, 2, 9), float32] */
}

def @func_8899() -> (Tensor[(1152), float32],) {
  %807 = @func_8449() /* ty=Tensor[(1152), float32] */;
  (%807,)
}

def @func_6116() -> (Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64]) {
  %808 = @func_5248() /* ty=(Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float32]) */;
  %809 = @func_2811() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(35, 6), int64], Tensor[(5, 50), float32]) */;
  %810 = %808.0;
  %811 = %809.0;
  (%810, %811)
}

def @func_2371() -> (Tensor[(1152), float32],) {
  @func_2369() /* ty=(Tensor[(1152), float32],) */
}

def @func_5675(%var_5673: Tensor[(6, 15, 6), uint16], %var_5674: Tensor[(6, 15, 6), uint16]) -> Tensor[(6, 15, 6), bool] {
  %816 = fn (%var_5628: Tensor[(6, 15, 6), uint16], %var_5629: Tensor[(6, 15, 6), uint16]) -> Tensor[(6, 15, 6), bool] {
    %812 = cast(%var_5629, dtype="bool") /* ty=Tensor[(6, 15, 6), bool] */;
    %813 = shape_of(%var_5628, dtype="int32") /* ty=Tensor[(3), int32] */;
    %814 = cast(%var_5628, dtype="bool") /* ty=Tensor[(6, 15, 6), bool] */;
    %815 = dyn.reshape(%812, %813, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    not_equal(%814, %815) /* ty=Tensor[(6, 15, 6), bool] */
  };
  %816(%var_5673, %var_5674) /* ty=Tensor[(6, 15, 6), bool] */
}

def @func_6118() -> (Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64]) {
  @func_6116() /* ty=(Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64]) */
}

def @func_4081() -> (Tensor[(1152), float32], Tensor[(8, 2, 9), float32], Tensor[(16, 12, 6), float64], Tensor[(1404), float32]) {
  %827 = fn () -> (Tensor[(1152), float32], Tensor[(8, 2, 9), float32], Tensor[(16, 12, 6), float64], Tensor[(1404), float32]) {
    %817 = @func_2898() /* ty=(Tensor[(1152), float32],) */;
    %818 = @func_3620() /* ty=(Tensor[(8, 2, 9), float32],) */;
    %819 = %817.0;
    %820 = cast(%819, dtype="float32") /* ty=Tensor[(1152), float32] */;
    %821 = cast(meta[relay.Constant][41] /* ty=Tensor[(1404), float32] */, dtype="float32") /* ty=Tensor[(1404), float32] */;
    %822 = reshape(%820, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
    %823 = reshape(%821, newshape=[1404, 1]) /* ty=Tensor[(1404, 1), float32] */;
    %824 = @func_2167(%822, %823) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(5, 5, 10), float32], Tensor[(250), float32], Tensor[(16, 12, 6), float64], Tensor[(1152), float32], Tensor[(3, 5, 14), float32], Tensor[(1404, 1), float32]) */;
    %825 = %818.0;
    %826 = %824.3;
    (%819, %825, %826, meta[relay.Constant][41] /* ty=Tensor[(1404), float32] */)
  };
  %827() /* ty=(Tensor[(1152), float32], Tensor[(8, 2, 9), float32], Tensor[(16, 12, 6), float64], Tensor[(1404), float32]) */
}

def @func_4340() -> (Tensor[(8, 2, 9), float64],) {
  %829 = fn () -> (Tensor[(8, 2, 9), float64],) {
    %828 = @func_2205() /* ty=Tensor[(8, 2, 9), float64] */;
    (%828,)
  };
  %829() /* ty=(Tensor[(8, 2, 9), float64],) */
}

def @func_7184() -> (Tensor[(1152), float32],) {
  %830 = @func_3880() /* ty=Tensor[(1152), float32] */;
  (%830,)
}

def @func_3880() -> Tensor[(1152), float32] {
  @func_3239() /* ty=Tensor[(1152), float32] */
}

def @func_8319() -> Tensor[(1152), float32] {
  @func_8317() /* ty=Tensor[(1152), float32] */
}

def @func_6616() -> (Tensor[(8, 2, 9), float32],) {
  %832 = fn () -> (Tensor[(8, 2, 9), float32],) {
    %831 = @func_4863() /* ty=Tensor[(8, 2, 9), float32] */;
    (%831,)
  };
  %832() /* ty=(Tensor[(8, 2, 9), float32],) */
}

def @func_7632() -> Tensor[(8, 2, 9), float64] {
  %833 = @func_2855() /* ty=(Tensor[(8, 2, 9), float64],) */;
  %833.0
}

def @func_8563() -> Tensor[(4, 14, 12), float32] {
  @func_8561() /* ty=Tensor[(4, 14, 12), float32] */
}

def @func_10802() -> (Tensor[(8, 2, 9), float32],) {
  @func_10800() /* ty=(Tensor[(8, 2, 9), float32],) */
}

def @func_9924() -> (Tensor[(8, 2, 9), float32],) {
  @func_9922() /* ty=(Tensor[(8, 2, 9), float32],) */
}

def @func_3949(%var_3947: Tensor[(1404, 2), float32], %var_3948: Tensor[(1404, 2), float64]) -> (Tensor[(1404, 2), float64], Tensor[(1404, 2), bool]) {
  @func_3945(%var_3947, %var_3948) /* ty=(Tensor[(1404, 2), float64], Tensor[(1404, 2), bool]) */
}

def @func_7099() -> (Tensor[(8, 2, 9), float64], Tensor[(1404, 2), uint8]) {
  @func_7097() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1404, 2), uint8]) */
}

def @func_10313(%var_10311: Tensor[(1152), float32], %var_10312: float64) -> (Tensor[(8, 2, 9), float64], Tensor[(7, 15, 9), float64], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(11, 1, 5), bool], float64) {
  %845 = fn (%var_10289: Tensor[(1152), float32], %var_10307: float64) -> (Tensor[(8, 2, 9), float64], Tensor[(7, 15, 9), float64], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(11, 1, 5), bool], float64) {
    %834 = @func_2811() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(35, 6), int64], Tensor[(5, 50), float32]) */;
    %835 = @func_3584() /* ty=(Tensor[(1152), float32], Tensor[(7, 15, 9), float64], Tensor[(7, 15, 9), float64], Tensor[(8, 2, 9), float64]) */;
    %836 = cast(%var_10289, dtype="float32") /* ty=Tensor[(1152), float32] */;
    %837 = reshape(%836, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
    %838 = @func_4398(%837) /* ty=(Tensor[(1152), float64], Tensor[(1152), float32]) */;
    %839 = cast(%var_10307, dtype="float64") /* ty=float64 */;
    %840 = reshape(%839, newshape=[]) /* ty=float64 */;
    %841 = %834.0;
    %842 = %835.1;
    %843 = %838.1;
    %844 = @func_8763(%840) /* ty=Tensor[(11, 1, 5), bool] */;
    (%841, %842, %843, %var_10289, %844, %var_10307)
  };
  %845(%var_10311, %var_10312) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(7, 15, 9), float64], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(11, 1, 5), bool], float64) */
}

def @func_11946() -> (Tensor[(1152), float32], Tensor[(1152), float32]) {
  %846 = @func_2369() /* ty=(Tensor[(1152), float32],) */;
  %847 = @func_3668() /* ty=Tensor[(1152), float32] */;
  %848 = %846.0;
  (%847, %848)
}

def @func_7979() -> (Tensor[(1152), float32], Tensor[(8, 2, 9), float32]) {
  %849 = @func_5248() /* ty=(Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float32]) */;
  %850 = @func_7116() /* ty=Tensor[(1152), float32] */;
  %851 = %849.1;
  (%850, %851)
}

def @func_2121() -> (Tensor[(8, 2, 9), float64],) {
  %854 = fn () -> (Tensor[(8, 2, 9), float64],) {
    %852 = @func_1957() /* ty=(Tensor[(8, 2, 9), float64],) */;
    %853 = %852.0;
    (%853,)
  };
  %854() /* ty=(Tensor[(8, 2, 9), float64],) */
}

def @func_4146() -> (Tensor[(1152), float32],) {
  %857 = fn () -> (Tensor[(1152), float32],) {
    %855 = @func_2898() /* ty=(Tensor[(1152), float32],) */;
    %856 = %855.0;
    (%856,)
  };
  %857() /* ty=(Tensor[(1152), float32],) */
}

def @func_6262() -> (Tensor[(250), bool],) {
  %858 = @func_2197() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1152), float32], Tensor[(250), float32]) */;
  %859 = %858.2;
  %860 = cast(meta[relay.Constant][42] /* ty=Tensor[(250), float32] */, dtype="bool") /* ty=Tensor[(250), bool] */;
  %861 = shape_of(%859, dtype="int32") /* ty=Tensor[(1), int32] */;
  %862 = cast(%859, dtype="bool") /* ty=Tensor[(250), bool] */;
  %863 = dyn.reshape(%860, %861, newshape=[]) /* ty=Tensor[(?), bool] */;
  %864 = logical_and(%862, %863) /* ty=Tensor[(250), bool] */;
  (%864,)
}

def @func_7634() -> Tensor[(8, 2, 9), float64] {
  @func_7632() /* ty=Tensor[(8, 2, 9), float64] */
}

def @func_6982(%var_6981: Tensor[(702, 2), float32]) -> (Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(702, 2), float32], Tensor[(1404, 6), uint16]) {
  %876 = fn (%var_6970: Tensor[(702, 2), float32]) -> (Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(702, 2), float32], Tensor[(1404, 6), uint16]) {
    %865 = @func_6415() /* ty=(Tensor[(1152), float32],) */;
    %866 = @func_3260() /* ty=(Tensor[(1152), float32],) */;
    %867 = cast(%var_6970, dtype="float32") /* ty=Tensor[(702, 2), float32] */;
    %868 = reshape(%867, newshape=[1404]) /* ty=Tensor[(1404), float32] */;
    %869 = @func_5134(%868) /* ty=(Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64], Tensor[(1404, 1), float32], Tensor[(1152), float32], Tensor[(1404), float32], Tensor[(8, 2, 9), float64]) */;
    %870 = %869.2;
    %871 = cast(%870, dtype="uint16") /* ty=Tensor[(1404, 1), uint16] */;
    %872 = cast(meta[relay.Constant][43] /* ty=Tensor[(1404, 6), float32] */, dtype="uint16") /* ty=Tensor[(1404, 6), uint16] */;
    %873 = %865.0;
    %874 = %866.0;
    %875 = left_shift(%871, %872) /* ty=Tensor[(1404, 6), uint16] */;
    (%873, %874, %var_6970, %875)
  };
  %876(%var_6981) /* ty=(Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(702, 2), float32], Tensor[(1404, 6), uint16]) */
}

def @func_8317() -> Tensor[(1152), float32] {
  @func_2648() /* ty=Tensor[(1152), float32] */
}

def @func_3803(%var_3802: Tensor[(8, 2, 9), float64]) -> (Tensor[(8, 2, 9), bool], Tensor[(8, 2, 9), bool], Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float64], Tensor[(1152), float32]) {
  %893 = fn (%var_3745: Tensor[(8, 2, 9), float64]) -> (Tensor[(8, 2, 9), bool], Tensor[(8, 2, 9), bool], Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float64], Tensor[(1152), float32]) {
    %877 = @func_2698() /* ty=(Tensor[(8, 2, 9), float64],) */;
    %878 = %877.0;
    %879 = cast(%var_3745, dtype="bool") /* ty=Tensor[(8, 2, 9), bool] */;
    %880 = shape_of(%878, dtype="int32") /* ty=Tensor[(3), int32] */;
    %881 = cast(%878, dtype="bool") /* ty=Tensor[(8, 2, 9), bool] */;
    %882 = dyn.reshape(%879, %880, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %883 = cast(meta[relay.Constant][44] /* ty=Tensor[(8, 2, 9), float64] */, dtype="bool") /* ty=Tensor[(8, 2, 9), bool] */;
    %884 = shape_of(%var_3745, dtype="int32") /* ty=Tensor[(3), int32] */;
    %885 = cast(%var_3745, dtype="bool") /* ty=Tensor[(8, 2, 9), bool] */;
    %886 = dyn.reshape(%883, %884, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %887 = @func_2898() /* ty=(Tensor[(1152), float32],) */;
    %888 = logical_and(%881, %882) /* ty=Tensor[(8, 2, 9), bool] */;
    %889 = equal(%885, %886) /* ty=Tensor[(8, 2, 9), bool] */;
    %890 = @func_2416() /* ty=Tensor[(8, 2, 9), float64] */;
    %891 = @func_2205() /* ty=Tensor[(8, 2, 9), float64] */;
    %892 = %887.0;
    (%888, %889, %890, %891, %892)
  };
  %893(%var_3802) /* ty=(Tensor[(8, 2, 9), bool], Tensor[(8, 2, 9), bool], Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float64], Tensor[(1152), float32]) */
}

def @func_11112() -> (Tensor[(6, 5, 11), float64], Tensor[(1404), float32]) {
  %894 = @func_8248() /* ty=(Tensor[(6, 5, 11), float64], Tensor[(1152), float32], Tensor[(6, 5, 11), bool]) */;
  %895 = @func_7493() /* ty=(Tensor[(1404), float32], Tensor[(6, 15, 6), bool]) */;
  %896 = %894.0;
  %897 = %895.0;
  (%896, %897)
}

def @func_11536() -> Tensor[(5, 11, 3), float64] {
  %899 = fn () -> Tensor[(5, 11, 3), float64] {
    %898 = cast(meta[relay.Constant][45] /* ty=Tensor[(5, 11, 3), float64] */, dtype="float64") /* ty=Tensor[(5, 11, 3), float64] */;
    log2(%898) /* ty=Tensor[(5, 11, 3), float64] */
  };
  %899() /* ty=Tensor[(5, 11, 3), float64] */
}

def @func_11948() -> (Tensor[(1152), float32], Tensor[(1152), float32]) {
  @func_11946() /* ty=(Tensor[(1152), float32], Tensor[(1152), float32]) */
}

def @func_7117() -> Tensor[(1152), float32] {
  %900 = fn () -> Tensor[(1152), float32] {
    @func_3239() /* ty=Tensor[(1152), float32] */
  };
  %900() /* ty=Tensor[(1152), float32] */
}

def @func_9385() -> Tensor[(8, 2, 9), float64] {
  %902 = fn () -> Tensor[(8, 2, 9), float64] {
    %901 = @func_4496() /* ty=(Tensor[(1152), float32], Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64], Tensor[(1404), float32]) */;
    %901.2
  };
  %902() /* ty=Tensor[(8, 2, 9), float64] */
}

def @func_6891() -> (Tensor[(1152), float32], Tensor[(35, 6), int32]) {
  @func_6889() /* ty=(Tensor[(1152), float32], Tensor[(35, 6), int32]) */
}

def @func_5227(%var_5225: Tensor[(32), int8]) -> (Tensor[(8, 2, 9), float64], Tensor[(1152), int32], Tensor[(8, 4), int8], Tensor[(32), int8]) {
  @func_5224(%var_5225) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1152), int32], Tensor[(8, 4), int8], Tensor[(32), int8]) */
}

def @func_11654() -> (Tensor[(8, 2, 9), float32], Tensor[(1152), float32]) {
  %907 = fn () -> (Tensor[(8, 2, 9), float32], Tensor[(1152), float32]) {
    %903 = @func_9695() /* ty=(Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float32], Tensor[(1152), float32], Tensor[(1404), float32]) */;
    %904 = @func_8198() /* ty=(Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(1152), float32]) */;
    %905 = %903.1;
    %906 = %904.2;
    (%905, %906)
  };
  %907() /* ty=(Tensor[(8, 2, 9), float32], Tensor[(1152), float32]) */
}

def @func_7449(%var_7448: Tensor[(4, 12, 14), float32]) -> (Tensor[(4, 12, 14), float32], Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64], Tensor[(4, 288), float32], Tensor[(1404), float32]) {
  %920 = fn (%var_7411: Tensor[(4, 12, 14), float32]) -> (Tensor[(4, 12, 14), float32], Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64], Tensor[(4, 288), float32], Tensor[(1404), float32]) {
    %908 = cast(%var_7411, dtype="float32") /* ty=Tensor[(4, 12, 14), float32] */;
    %909 = @func_4339() /* ty=(Tensor[(8, 2, 9), float64],) */;
    %910 = @func_2786() /* ty=(Tensor[(8, 2, 9), float32],) */;
    %911 = @func_3280() /* ty=(Tensor[(8, 2, 9), float64],) */;
    %912 = cast(meta[relay.Constant][46] /* ty=Tensor[(1404), float32] */, dtype="float32") /* ty=Tensor[(1404), float32] */;
    %913 = reshape(%912, newshape=[1404]) /* ty=Tensor[(1404), float32] */;
    %914 = @func_3208(%913) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(16, 12, 6), float64], Tensor[(4, 288), float32], Tensor[(1404), float32]) */;
    %915 = cosh(%908) /* ty=Tensor[(4, 12, 14), float32] */;
    %916 = %909.0;
    %917 = %910.0;
    %918 = %911.0;
    %919 = %914.2;
    (%915, %916, %917, %918, %919, meta[relay.Constant][46] /* ty=Tensor[(1404), float32] */)
  };
  %920(%var_7448) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64], Tensor[(4, 288), float32], Tensor[(1404), float32]) */
}

def @func_8561() -> Tensor[(4, 14, 12), float32] {
  %921 = @func_2606() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1152), float32], Tensor[(1404), float32], Tensor[(4, 14, 12), float32]) */;
  %921.3
}

def @func_4400(%var_4399: Tensor[(1152), float32]) -> (Tensor[(1152), float64], Tensor[(1152), float32]) {
  %931 = fn (%var_4381: Tensor[(1152), float32]) -> (Tensor[(1152), float64], Tensor[(1152), float32]) {
    %922 = @func_2369() /* ty=(Tensor[(1152), float32],) */;
    %923 = %922.0;
    %924 = cast(%var_4381, dtype="float64") /* ty=Tensor[(1152), float64] */;
    %925 = shape_of(%923, dtype="int32") /* ty=Tensor[(1), int32] */;
    %926 = cast(%923, dtype="float64") /* ty=Tensor[(1152), float64] */;
    %927 = dyn.reshape(%924, %925, newshape=[]) /* ty=Tensor[(?), float64] */;
    %928 = @func_3260() /* ty=(Tensor[(1152), float32],) */;
    %929 = divide(%926, %927) /* ty=Tensor[(1152), float64] */;
    %930 = %928.0;
    (%929, %930)
  };
  %931(%var_4399) /* ty=(Tensor[(1152), float64], Tensor[(1152), float32]) */
}

def @func_9106() -> (Tensor[(8, 2, 9), float64],) {
  @func_9104() /* ty=(Tensor[(8, 2, 9), float64],) */
}

def @func_6850() -> (Tensor[(1152), float32], Tensor[(8, 2, 9), float64], Tensor[(1404), float32]) {
  @func_6848() /* ty=(Tensor[(1152), float32], Tensor[(8, 2, 9), float64], Tensor[(1404), float32]) */
}

def @func_3669() -> Tensor[(1152), float32] {
  %933 = fn () -> Tensor[(1152), float32] {
    %932 = @func_2369() /* ty=(Tensor[(1152), float32],) */;
    %932.0
  };
  %933() /* ty=Tensor[(1152), float32] */
}

def @func_3241() -> Tensor[(1152), float32] {
  @func_3239() /* ty=Tensor[(1152), float32] */
}

def @func_5339(%var_5338: Tensor[(8, 2, 9), float64]) -> (Tensor[(8, 2, 9), uint8], Tensor[(8, 2, 9), float32], Tensor[(1152), int64], Tensor[(576, 2), float32]) {
  %949 = fn (%var_5253: Tensor[(8, 2, 9), float64]) -> (Tensor[(8, 2, 9), uint8], Tensor[(8, 2, 9), float32], Tensor[(1152), int64], Tensor[(576, 2), float32]) {
    %934 = @func_2811() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(35, 6), int64], Tensor[(5, 50), float32]) */;
    %935 = %934.0;
    %936 = cast(%var_5253, dtype="uint8") /* ty=Tensor[(8, 2, 9), uint8] */;
    %937 = shape_of(%935, dtype="int32") /* ty=Tensor[(3), int32] */;
    %938 = cast(%935, dtype="uint8") /* ty=Tensor[(8, 2, 9), uint8] */;
    %939 = dyn.reshape(%936, %937, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %940 = cast(meta[relay.Constant][47] /* ty=Tensor[(8, 2, 9), float64] */, dtype="float32") /* ty=Tensor[(8, 2, 9), float32] */;
    %941 = shape_of(%var_5253, dtype="int32") /* ty=Tensor[(3), int32] */;
    %942 = cast(%var_5253, dtype="float32") /* ty=Tensor[(8, 2, 9), float32] */;
    %943 = dyn.reshape(%940, %941, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %944 = cast(meta[relay.Constant][48] /* ty=Tensor[(576, 2), float32] */, dtype="float32") /* ty=Tensor[(576, 2), float32] */;
    %945 = reshape(%944, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
    %946 = left_shift(%938, %939) /* ty=Tensor[(8, 2, 9), uint8] */;
    %947 = power(%942, %943) /* ty=Tensor[(8, 2, 9), float32] */;
    %948 = @func_4894(%945) /* ty=Tensor[(1152), int64] */;
    (%946, %947, %948, meta[relay.Constant][48] /* ty=Tensor[(576, 2), float32] */)
  };
  %949(%var_5338) /* ty=(Tensor[(8, 2, 9), uint8], Tensor[(8, 2, 9), float32], Tensor[(1152), int64], Tensor[(576, 2), float32]) */
}

def @func_6310() -> (Tensor[(1152), float32], Tensor[(250), bool], Tensor[(8, 2, 9), float64]) {
  %950 = @func_6262() /* ty=(Tensor[(250), bool],) */;
  %951 = @func_3005() /* ty=(Tensor[(8, 2, 9), float64],) */;
  %952 = @func_3880() /* ty=Tensor[(1152), float32] */;
  %953 = %950.0;
  %954 = %951.0;
  (%952, %953, %954)
}

def @func_1910() -> Tensor[(8, 2, 9), float64] {
  %956 = fn () -> Tensor[(8, 2, 9), float64] {
    %955 = cast(meta[relay.Constant][49] /* ty=Tensor[(8, 2, 9), float64] */, dtype="float64") /* ty=Tensor[(8, 2, 9), float64] */;
    acosh(%955) /* ty=Tensor[(8, 2, 9), float64] */
  };
  %956() /* ty=Tensor[(8, 2, 9), float64] */
}

def @func_2788() -> (Tensor[(8, 2, 9), float32],) {
  @func_2786() /* ty=(Tensor[(8, 2, 9), float32],) */
}

def @func_7330(%var_7328: Tensor[(1, 14, 1), uint8], %var_7329: Tensor[(7, 14, 12), uint8]) -> Tensor[(7, 14, 12), bool] {
  @func_7326(%var_7328, %var_7329) /* ty=Tensor[(7, 14, 12), bool] */
}

def @func_6238() -> Tensor[(8, 2, 9), float64] {
  %957 = fn () -> Tensor[(8, 2, 9), float64] {
    @func_2416() /* ty=Tensor[(8, 2, 9), float64] */
  };
  %957() /* ty=Tensor[(8, 2, 9), float64] */
}

def @func_8302(%var_8297: uint8, %var_8298: Tensor[(1, 12, 3), uint8]) -> (Tensor[(1, 12, 3), uint8],) {
  %958 = cast(%var_8297, dtype="uint8") /* ty=uint8 */;
  %959 = cast(%var_8298, dtype="uint8") /* ty=Tensor[(1, 12, 3), uint8] */;
  %960 = bitwise_and(%958, %959) /* ty=Tensor[(1, 12, 3), uint8] */;
  (%960,)
}

def @func_4612() -> (Tensor[(8, 2, 9), float32], Tensor[(1152), float32], Tensor[(16, 12, 6), float64]) {
  @func_4610() /* ty=(Tensor[(8, 2, 9), float32], Tensor[(1152), float32], Tensor[(16, 12, 6), float64]) */
}

def @func_5418(%var_5417: Tensor[(32), int8]) -> (Tensor[(8, 2, 9), float64], Tensor[(2, 2, 8), int8], Tensor[(32), int8]) {
  %967 = fn (%var_5403: Tensor[(32), int8]) -> (Tensor[(8, 2, 9), float64], Tensor[(2, 2, 8), int8], Tensor[(32), int8]) {
    %961 = @func_2197() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1152), float32], Tensor[(250), float32]) */;
    %962 = cast(%var_5403, dtype="int8") /* ty=Tensor[(32), int8] */;
    %963 = reshape(%962, newshape=[8, 4]) /* ty=Tensor[(8, 4), int8] */;
    %964 = @func_4808(%963) /* ty=(Tensor[(1152), float32], Tensor[(2, 2, 8), int8], Tensor[(8, 4), int8]) */;
    %965 = %961.0;
    %966 = %964.1;
    (%965, %966, %var_5403)
  };
  %967(%var_5417) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(2, 2, 8), int8], Tensor[(32), int8]) */
}

def @func_8964() -> Tensor[(8, 2, 9), float32] {
  @func_8962() /* ty=Tensor[(8, 2, 9), float32] */
}

def @func_5805(%var_5758: Tensor[(32), int8]) -> (Tensor[(8, 2, 9), float32], Tensor[(1152), int32], Tensor[(32), int8]) {
  %968 = @func_3659() /* ty=(Tensor[(8, 2, 9), float32],) */;
  %969 = cast(%var_5758, dtype="int8") /* ty=Tensor[(32), int8] */;
  %970 = reshape(%969, newshape=[32]) /* ty=Tensor[(32), int8] */;
  %971 = @func_5224(%970) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1152), int32], Tensor[(8, 4), int8], Tensor[(32), int8]) */;
  %972 = %968.0;
  %973 = %971.1;
  (%972, %973, %var_5758)
}

def @func_5028(%var_5027: Tensor[(288), uint32]) -> (Tensor[(8, 2, 9), float32], Tensor[(9, 16, 2), bool], Tensor[(288), uint32], Tensor[(8, 2, 9), float32]) {
  %983 = fn (%var_5006: Tensor[(288), uint32]) -> (Tensor[(8, 2, 9), float32], Tensor[(9, 16, 2), bool], Tensor[(288), uint32], Tensor[(8, 2, 9), float32]) {
    %974 = @func_3363() /* ty=(Tensor[(8, 2, 9), float32],) */;
    %975 = %974.0;
    %976 = cast(%975, dtype="uint32") /* ty=Tensor[(8, 2, 9), uint32] */;
    %977 = cast(%var_5006, dtype="uint32") /* ty=Tensor[(288), uint32] */;
    %978 = reshape(%976, newshape=[9, 16, 1]) /* ty=Tensor[(9, 16, 1), uint32] */;
    %979 = reshape(%977, newshape=[9, 16, 2]) /* ty=Tensor[(9, 16, 2), uint32] */;
    %980 = @func_2727(%978, %979) /* ty=(Tensor[(9, 16, 2), bool], Tensor[(1404, 1), float32]) */;
    %981 = %980.0;
    %982 = @func_4863() /* ty=Tensor[(8, 2, 9), float32] */;
    (%975, %981, %var_5006, %982)
  };
  %983(%var_5027) /* ty=(Tensor[(8, 2, 9), float32], Tensor[(9, 16, 2), bool], Tensor[(288), uint32], Tensor[(8, 2, 9), float32]) */
}

def @func_3882() -> Tensor[(1152), float32] {
  @func_3880() /* ty=Tensor[(1152), float32] */
}

def @func_2206() -> Tensor[(8, 2, 9), float64] {
  %984 = fn () -> Tensor[(8, 2, 9), float64] {
    @func_1909() /* ty=Tensor[(8, 2, 9), float64] */
  };
  %984() /* ty=Tensor[(8, 2, 9), float64] */
}

def @func_4897(%var_4895: Tensor[(1152), float32]) -> Tensor[(1152), int64] {
  @func_4894(%var_4895) /* ty=Tensor[(1152), int64] */
}

def @func_8063() -> Tensor[(8, 2, 9), float32] {
  %986 = fn () -> Tensor[(8, 2, 9), float32] {
    %985 = @func_5248() /* ty=(Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float32]) */;
    %985.0
  };
  %986() /* ty=Tensor[(8, 2, 9), float32] */
}

def @func_8741() -> Tensor[(8, 2, 9), float32] {
  %987 = @func_4496() /* ty=(Tensor[(1152), float32], Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64], Tensor[(1404), float32]) */;
  %987.1
}

def @func_3045() -> (Tensor[(8, 2, 9), float64],) {
  %989 = fn () -> (Tensor[(8, 2, 9), float64],) {
    %988 = @func_2205() /* ty=Tensor[(8, 2, 9), float64] */;
    (%988,)
  };
  %989() /* ty=(Tensor[(8, 2, 9), float64],) */
}

def @func_10591() -> (Tensor[(8, 2, 9), float64],) {
  @func_10589() /* ty=(Tensor[(8, 2, 9), float64],) */
}

def @func_7403() -> (Tensor[(1152), float32],) {
  %992 = fn () -> (Tensor[(1152), float32],) {
    %990 = @func_6415() /* ty=(Tensor[(1152), float32],) */;
    %991 = %990.0;
    (%991,)
  };
  %992() /* ty=(Tensor[(1152), float32],) */
}

def @func_10221(%var_10217: Tensor[(16, 7, 2), float32]) -> (Tensor[(16, 7, 2), float32],) {
  %993 = cast(%var_10217, dtype="float32") /* ty=Tensor[(16, 7, 2), float32] */;
  %994 = erf(%993) /* ty=Tensor[(16, 7, 2), float32] */;
  (%994,)
}

def @func_9573() -> (Tensor[(1152), float32], Tensor[(1152), float32]) {
  @func_9571() /* ty=(Tensor[(1152), float32], Tensor[(1152), float32]) */
}

def @func_6807() -> (Tensor[(1152), float32], Tensor[(8, 2, 9), float64]) {
  @func_6805() /* ty=(Tensor[(1152), float32], Tensor[(8, 2, 9), float64]) */
}

def @func_296(%var_294: Tensor[(3, 5, 14), float32]) -> (Tensor[(3, 5, 14), float32],) {
  @func_293(%var_294) /* ty=(Tensor[(3, 5, 14), float32],) */
}

def @func_4544(%var_4542: Tensor[(210), float32]) -> (Tensor[(8, 2, 9), float64], Tensor[(3, 5, 14), float32], Tensor[(24), float32], Tensor[(210), float32], Tensor[(5, 15, 16), float32], Tensor[(1200), float32], Tensor[(1404, 1), float32], Tensor[(288), uint32]) {
  @func_4541(%var_4542) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(3, 5, 14), float32], Tensor[(24), float32], Tensor[(210), float32], Tensor[(5, 15, 16), float32], Tensor[(1200), float32], Tensor[(1404, 1), float32], Tensor[(288), uint32]) */
}

def @func_2699() -> (Tensor[(8, 2, 9), float64],) {
  %996 = fn () -> (Tensor[(8, 2, 9), float64],) {
    %995 = @func_1909() /* ty=Tensor[(8, 2, 9), float64] */;
    (%995,)
  };
  %996() /* ty=(Tensor[(8, 2, 9), float64],) */
}

def @func_3262() -> (Tensor[(1152), float32],) {
  @func_3260() /* ty=(Tensor[(1152), float32],) */
}

def @func_573(%var_571: Tensor[(8, 3, 1), float32], %var_572: Tensor[(210), float32]) -> (Tensor[(3, 5, 14), float32], Tensor[(8, 3, 210), int32], Tensor[(8, 3, 210), bool], Tensor[(3, 5, 14), float32]) {
  %1013 = fn (%var_523: Tensor[(8, 3, 1), float32], %var_532: Tensor[(210), float32]) -> (Tensor[(3, 5, 14), float32], Tensor[(8, 3, 210), int32], Tensor[(8, 3, 210), bool], Tensor[(3, 5, 14), float32]) {
    %997 = cast(%var_532, dtype="float32") /* ty=Tensor[(210), float32] */;
    %998 = reshape(%997, newshape=[3, 5, 14]) /* ty=Tensor[(3, 5, 14), float32] */;
    %999 = @func_293(%998) /* ty=(Tensor[(3, 5, 14), float32],) */;
    %1000 = cast(%var_523, dtype="float32") /* ty=Tensor[(8, 3, 1), float32] */;
    %1001 = log(%1000) /* ty=Tensor[(8, 3, 1), float32] */;
    %1002 = cast(%1001, dtype="int32") /* ty=Tensor[(8, 3, 1), int32] */;
    %1003 = cast(%var_532, dtype="int32") /* ty=Tensor[(210), int32] */;
    %1004 = cast(%var_532, dtype="bool") /* ty=Tensor[(210), bool] */;
    %1005 = cast(%1001, dtype="bool") /* ty=Tensor[(8, 3, 1), bool] */;
    %1006 = %999.0;
    %1007 = cast(%1006, dtype="float32") /* ty=Tensor[(3, 5, 14), float32] */;
    %1008 = reshape(%1007, newshape=[3, 5, 14]) /* ty=Tensor[(3, 5, 14), float32] */;
    %1009 = @func_293(%1008) /* ty=(Tensor[(3, 5, 14), float32],) */;
    %1010 = logical_xor(%1002, %1003) /* ty=Tensor[(8, 3, 210), int32] */;
    %1011 = greater_equal(%1004, %1005) /* ty=Tensor[(8, 3, 210), bool] */;
    %1012 = %1009.0;
    (%1006, %1010, %1011, %1012)
  };
  %1013(%var_571, %var_572) /* ty=(Tensor[(3, 5, 14), float32], Tensor[(8, 3, 210), int32], Tensor[(8, 3, 210), bool], Tensor[(3, 5, 14), float32]) */
}

def @func_8098() -> (Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float64], Tensor[(6, 15, 6), bool]) {
  %1020 = fn () -> (Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float64], Tensor[(6, 15, 6), bool]) {
    %1014 = @func_1957() /* ty=(Tensor[(8, 2, 9), float64],) */;
    %1015 = @func_3044() /* ty=(Tensor[(8, 2, 9), float64],) */;
    %1016 = @func_7064() /* ty=(Tensor[(6, 15, 6), bool], Tensor[(8, 2, 9), float64]) */;
    %1017 = %1014.0;
    %1018 = %1015.0;
    %1019 = %1016.0;
    (%1017, %1018, %1019)
  };
  %1020() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(8, 2, 9), float64], Tensor[(6, 15, 6), bool]) */
}

def @func_7493() -> (Tensor[(1404), float32], Tensor[(6, 15, 6), bool]) {
  %1021 = @func_2606() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1152), float32], Tensor[(1404), float32], Tensor[(4, 14, 12), float32]) */;
  %1022 = %1021.2;
  %1023 = @func_6604() /* ty=Tensor[(6, 15, 6), bool] */;
  (%1022, %1023)
}

def @func_9934() -> Tensor[(1404, 2), uint8] {
  %1025 = fn () -> Tensor[(1404, 2), uint8] {
    %1024 = @func_8797() /* ty=(Tensor[(1404, 2), uint8],) */;
    %1024.0
  };
  %1025() /* ty=Tensor[(1404, 2), uint8] */
}

def @func_8868() -> (Tensor[(8, 2, 9), float64],) {
  %1027 = fn () -> (Tensor[(8, 2, 9), float64],) {
    %1026 = @func_6237() /* ty=Tensor[(8, 2, 9), float64] */;
    (%1026,)
  };
  %1027() /* ty=(Tensor[(8, 2, 9), float64],) */
}

def @func_4001() -> (Tensor[(1152), float32],) {
  %1030 = fn () -> (Tensor[(1152), float32],) {
    %1028 = @func_2369() /* ty=(Tensor[(1152), float32],) */;
    %1029 = %1028.0;
    (%1029,)
  };
  %1030() /* ty=(Tensor[(1152), float32],) */
}

def @func_2812() -> (Tensor[(8, 2, 9), float64], Tensor[(35, 6), int64], Tensor[(5, 50), float32]) {
  %1037 = fn () -> (Tensor[(8, 2, 9), float64], Tensor[(35, 6), int64], Tensor[(5, 50), float32]) {
    %1031 = @func_2683() /* ty=(Tensor[(8, 2, 9), float64],) */;
    %1032 = cast(meta[relay.Constant][50] /* ty=Tensor[(5, 50), float32] */, dtype="float32") /* ty=Tensor[(5, 50), float32] */;
    %1033 = reshape(%1032, newshape=[5, 5, 10]) /* ty=Tensor[(5, 5, 10), float32] */;
    %1034 = @func_1815(%1033) /* ty=(Tensor[(16, 12, 6), float64], Tensor[(1152), float32], Tensor[(16, 12, 6), float64], Tensor[(3, 5, 14), float32], Tensor[(210), float32], Tensor[(35, 6), int64], Tensor[(1404), float32], Tensor[(5, 5, 10), float32], Tensor[(3, 5, 14), float32]) */;
    %1035 = %1031.0;
    %1036 = %1034.5;
    (%1035, %1036, meta[relay.Constant][50] /* ty=Tensor[(5, 50), float32] */)
  };
  %1037() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(35, 6), int64], Tensor[(5, 50), float32]) */
}

def @func_11122() -> (Tensor[(1404), float32],) {
  %1038 = @func_4080() /* ty=(Tensor[(1152), float32], Tensor[(8, 2, 9), float32], Tensor[(16, 12, 6), float64], Tensor[(1404), float32]) */;
  %1039 = %1038.3;
  (%1039,)
}

def @func_7771() -> (Tensor[(315, 3), int16], Tensor[(9, 8, 8), float64], Tensor[(576), float32]) {
  %1040 = @func_7560() /* ty=(Tensor[(1152), float32], Tensor[(8, 2, 9), float64], Tensor[(7, 15, 9), float64], Tensor[(315, 3), int16]) */;
  %1041 = cast(meta[relay.Constant][51] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
  %1042 = reshape(%1041, newshape=[9, 8, 8]) /* ty=Tensor[(9, 8, 8), float32] */;
  %1043 = @func_7294(%1042) /* ty=(Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float32], Tensor[(1152), float32], Tensor[(8, 2, 9), float64], Tensor[(9, 8, 8), float64], Tensor[(3, 5, 14), float32], Tensor[(250), float32], Tensor[(1152), float32]) */;
  %1044 = %1040.3;
  %1045 = %1043.4;
  (%1044, %1045, meta[relay.Constant][51] /* ty=Tensor[(576), float32] */)
}

def @func_10789(%var_10787: uint32, %var_10788: Tensor[(210), float32]) -> (Tensor[(1200), float32], Tensor[(210), float32], Tensor[(7, 4, 1152), int32]) {
  %1061 = fn (%var_10751: uint32, %var_10769: Tensor[(210), float32]) -> (Tensor[(1200), float32], Tensor[(210), float32], Tensor[(7, 4, 1152), int32]) {
    %1046 = cast(%var_10769, dtype="float32") /* ty=Tensor[(210), float32] */;
    %1047 = reshape(%1046, newshape=[210]) /* ty=Tensor[(210), float32] */;
    %1048 = @func_4541(%1047) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(3, 5, 14), float32], Tensor[(24), float32], Tensor[(210), float32], Tensor[(5, 15, 16), float32], Tensor[(1200), float32], Tensor[(1404, 1), float32], Tensor[(288), uint32]) */;
    %1049 = @func_3260() /* ty=(Tensor[(1152), float32],) */;
    %1050 = %1049.0;
    %1051 = cast(%var_10751, dtype="bool") /* ty=bool */;
    %1052 = cast(meta[relay.Constant][52] /* ty=Tensor[(7, 4, 1), uint32] */, dtype="bool") /* ty=Tensor[(7, 4, 1), bool] */;
    %1053 = less_equal(%1051, %1052) /* ty=Tensor[(7, 4, 1), bool] */;
    %1054 = cast(%1050, dtype="float32") /* ty=Tensor[(1152), float32] */;
    %1055 = cast(%1053, dtype="float32") /* ty=Tensor[(7, 4, 1), float32] */;
    %1056 = multiply(%1054, %1055) /* ty=Tensor[(7, 4, 1152), float32] */;
    %1057 = cast(%1056, dtype="int32") /* ty=Tensor[(7, 4, 1152), int32] */;
    %1058 = cast(%1053, dtype="int32") /* ty=Tensor[(7, 4, 1), int32] */;
    %1059 = %1048.5;
    %1060 = subtract(%1057, %1058) /* ty=Tensor[(7, 4, 1152), int32] */;
    (%1059, %var_10769, %1060)
  };
  %1061(%var_10787, %var_10788) /* ty=(Tensor[(1200), float32], Tensor[(210), float32], Tensor[(7, 4, 1152), int32]) */
}

def @func_4722(%var_4720: Tensor[(3, 5, 14), float32], %var_4721: Tensor[(1152, 1), float32]) -> (Tensor[(8, 2, 9), float32], Tensor[(210), float32], uint64, Tensor[(8, 2, 9), float64], Tensor[(3, 5, 14), bool], Tensor[(7, 1, 9), float32], Tensor[(8, 2, 9), float64], Tensor[(1152, 1), float32], Tensor[(1404), float32]) {
  %1087 = fn (%var_4691: Tensor[(3, 5, 14), float32], %var_4711: Tensor[(1152, 1), float32]) -> (Tensor[(8, 2, 9), float32], Tensor[(210), float32], uint64, Tensor[(8, 2, 9), float64], Tensor[(3, 5, 14), bool], Tensor[(7, 1, 9), float32], Tensor[(8, 2, 9), float64], Tensor[(1152, 1), float32], Tensor[(1404), float32]) {
    %1062 = @func_2786() /* ty=(Tensor[(8, 2, 9), float32],) */;
    %1063 = @func_2197() /* ty=(Tensor[(8, 2, 9), float64], Tensor[(1152), float32], Tensor[(250), float32]) */;
    %1064 = cast(meta[relay.Constant][53] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
    %1065 = reshape(%1064, newshape=[3, 5, 14]) /* ty=Tensor[(3, 5, 14), float32] */;
    %1066 = @func_293(%1065) /* ty=(Tensor[(3, 5, 14), float32],) */;
    %1067 = %1066.0;
    %1068 = cast(%var_4691, dtype="bool") /* ty=Tensor[(3, 5, 14), bool] */;
    %1069 = shape_of(%1067, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1070 = cast(%1067, dtype="bool") /* ty=Tensor[(3, 5, 14), bool] */;
    %1071 = dyn.reshape(%1068, %1069, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1072 = cast(meta[relay.Constant][54] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %1073 = reshape(%1072, newshape=[]) /* ty=uint64 */;
    %1074 = @func_4445(%1073) /* ty=(Tensor[(7, 1, 9), bool], Tensor[(8, 2, 9), float64]) */;
    %1075 = %1074.0;
    %1076 = cast(%1075, dtype="float32") /* ty=Tensor[(7, 1, 9), float32] */;
    %1077 = cast(%var_4711, dtype="float32") /* ty=Tensor[(1152, 1), float32] */;
    %1078 = cast(meta[relay.Constant][55] /* ty=Tensor[(1404), float32] */, dtype="float32") /* ty=Tensor[(1404), float32] */;
    %1079 = reshape(%1077, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
    %1080 = reshape(%1078, newshape=[1404, 1]) /* ty=Tensor[(1404, 1), float32] */;
    %1081 = @func_2167(%1079, %1080) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(5, 5, 10), float32], Tensor[(250), float32], Tensor[(16, 12, 6), float64], Tensor[(1152), float32], Tensor[(3, 5, 14), float32], Tensor[(1404, 1), float32]) */;
    %1082 = %1062.0;
    %1083 = %1063.0;
    %1084 = less(%1070, %1071) /* ty=Tensor[(3, 5, 14), bool] */;
    %1085 = log(%1076) /* ty=Tensor[(7, 1, 9), float32] */;
    %1086 = %1081.0;
    (%1082, meta[relay.Constant][53] /* ty=Tensor[(210), float32] */, meta[relay.Constant][54] /* ty=uint64 */, %1083, %1084, %1085, %1086, %var_4711, meta[relay.Constant][55] /* ty=Tensor[(1404), float32] */)
  };
  %1087(%var_4720, %var_4721) /* ty=(Tensor[(8, 2, 9), float32], Tensor[(210), float32], uint64, Tensor[(8, 2, 9), float64], Tensor[(3, 5, 14), bool], Tensor[(7, 1, 9), float32], Tensor[(8, 2, 9), float64], Tensor[(1152, 1), float32], Tensor[(1404), float32]) */
}

def @func_8901() -> (Tensor[(1152), float32],) {
  @func_8899() /* ty=(Tensor[(1152), float32],) */
}

def @func_6354(%var_6352: Tensor[(15, 8, 3), uint16], %var_6353: Tensor[(15, 8, 3), uint16]) -> (Tensor[(15, 8, 3), uint16], Tensor[(8, 2, 9), float64]) {
  @func_6350(%var_6352, %var_6353) /* ty=(Tensor[(15, 8, 3), uint16], Tensor[(8, 2, 9), float64]) */
}

def @func_8638() -> (Tensor[(250), float64], Tensor[(8, 2, 9), float64]) {
  %1094 = fn () -> (Tensor[(250), float64], Tensor[(8, 2, 9), float64]) {
    %1088 = @func_6262() /* ty=(Tensor[(250), bool],) */;
    %1089 = %1088.0;
    %1090 = cast(%1089, dtype="float64") /* ty=Tensor[(250), float64] */;
    %1091 = @func_3280() /* ty=(Tensor[(8, 2, 9), float64],) */;
    %1092 = atanh(%1090) /* ty=Tensor[(250), float64] */;
    %1093 = %1091.0;
    (%1092, %1093)
  };
  %1094() /* ty=(Tensor[(250), float64], Tensor[(8, 2, 9), float64]) */
}

def @func_6605() -> Tensor[(6, 15, 6), bool] {
  %1096 = fn () -> Tensor[(6, 15, 6), bool] {
    %1095 = @func_5739() /* ty=(Tensor[(1152), float32], Tensor[(6, 15, 6), bool], Tensor[(540, 1), uint16]) */;
    %1095.1
  };
  %1096() /* ty=Tensor[(6, 15, 6), bool] */
}

def @func_7011() -> (Tensor[(8, 2, 9), float64], Tensor[(1152), float32]) {
  %1097 = @func_2898() /* ty=(Tensor[(1152), float32],) */;
  %1098 = @func_6237() /* ty=Tensor[(8, 2, 9), float64] */;
  %1099 = %1097.0;
  (%1098, %1099)
}

def @func_7097() -> (Tensor[(8, 2, 9), float64], Tensor[(1404, 2), uint8]) {
  %1100 = @func_6848() /* ty=(Tensor[(1152), float32], Tensor[(8, 2, 9), float64], Tensor[(1404), float32]) */;
  %1101 = cast(meta[relay.Constant][56] /* ty=Tensor[(2808), float32] */, dtype="float32") /* ty=Tensor[(2808), float32] */;
  %1102 = cast(meta[relay.Constant][56] /* ty=Tensor[(2808), float32] */, dtype="float64") /* ty=Tensor[(2808), float64] */;
  %1103 = reshape(%1101, newshape=[1404, 2]) /* ty=Tensor[(1404, 2), float32] */;
  %1104 = reshape(%1102, newshape=[1404, 2]) /* ty=Tensor[(1404, 2), float64] */;
  %1105 = @func_3945(%1103, %1104) /* ty=(Tensor[(1404, 2), float64], Tensor[(1404, 2), bool]) */;
  %1106 = %1105.1;
  %1107 = cast(meta[relay.Constant][56] /* ty=Tensor[(2808), float32] */, dtype="uint8") /* ty=Tensor[(2808), uint8] */;
  %1108 = shape_of(%1106, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1109 = cast(%1106, dtype="uint8") /* ty=Tensor[(1404, 2), uint8] */;
  %1110 = dyn.reshape(%1107, %1108, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %1111 = %1100.1;
  %1112 = logical_xor(%1109, %1110) /* ty=Tensor[(1404, 2), uint8] */;
  (%1111, %1112)
}

def @func_9977(%var_9936: Tensor[(9, 2, 4), uint8]) -> (Tensor[(9, 2, 4), int32], Tensor[(8, 2, 9), float64]) {
  %1113 = cast(%var_9936, dtype="uint8") /* ty=Tensor[(9, 2, 4), uint8] */;
  %1114 = shape_of(meta[relay.Constant][57] /* ty=Tensor[(9, 2, 4), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1115 = cast(meta[relay.Constant][57] /* ty=Tensor[(9, 2, 4), uint8] */, dtype="uint8") /* ty=Tensor[(9, 2, 4), uint8] */;
  %1116 = dyn.reshape(%1113, %1114, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %1117 = add(%1115, %1116) /* ty=Tensor[(9, 2, 4), uint8] */;
  %1118 = cast(%1117, dtype="float32") /* ty=Tensor[(9, 2, 4), float32] */;
  %1119 = sigmoid(%1118) /* ty=Tensor[(9, 2, 4), float32] */;
  %1120 = cast(%1119, dtype="float32") /* ty=Tensor[(9, 2, 4), float32] */;
  %1121 = asinh(%1120) /* ty=Tensor[(9, 2, 4), float32] */;
  %1122 = cast(%1117, dtype="int32") /* ty=Tensor[(9, 2, 4), int32] */;
  %1123 = shape_of(%1121, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1124 = cast(%1121, dtype="int32") /* ty=Tensor[(9, 2, 4), int32] */;
  %1125 = dyn.reshape(%1122, %1123, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %1126 = @func_6116() /* ty=(Tensor[(8, 2, 9), float32], Tensor[(8, 2, 9), float64]) */;
  %1127 = multiply(%1124, %1125) /* ty=Tensor[(9, 2, 4), int32] */;
  %1128 = %1126.1;
  (%1127, %1128)
}

def @func_1917(%var_1915: Tensor[(250), float32]) -> (Tensor[(8, 2, 9), float64], Tensor[(5, 5, 10), float32], Tensor[(250), float32]) {
  %1129 = cast(%var_1915, dtype="float32") /* ty=Tensor[(250), float32] */;
  %1130 = reshape(%1129, newshape=[5, 5, 10]) /* ty=Tensor[(5, 5, 10), float32] */;
  %1131 = @func_1815(%1130) /* ty=(Tensor[(16, 12, 6), float64], Tensor[(1152), float32], Tensor[(16, 12, 6), float64], Tensor[(3, 5, 14), float32], Tensor[(210), float32], Tensor[(35, 6), int64], Tensor[(1404), float32], Tensor[(5, 5, 10), float32], Tensor[(3, 5, 14), float32]) */;
  %1132 = @func_1909() /* ty=Tensor[(8, 2, 9), float64] */;
  %1133 = %1131.7;
  (%1132, %1133, %var_1915)
}

def @func_2821(%var_2819: Tensor[(5, 15, 16), float32]) -> (Tensor[(5, 15, 16), float32],) {
  @func_2818(%var_2819) /* ty=(Tensor[(5, 15, 16), float32],) */
}

def @func_8924() -> Tensor[(8, 2, 9), float32] {
  %1134 = fn () -> Tensor[(8, 2, 9), float32] {
    @func_8741() /* ty=Tensor[(8, 2, 9), float32] */
  };
  %1134() /* ty=Tensor[(8, 2, 9), float32] */
}

def @func_2418() -> Tensor[(8, 2, 9), float64] {
  @func_2416() /* ty=Tensor[(8, 2, 9), float64] */
}

def @func_7186() -> (Tensor[(1152), float32],) {
  @func_7184() /* ty=(Tensor[(1152), float32],) */
}

def @func_3363() -> (Tensor[(8, 2, 9), float32],) {
  %1135 = @func_2786() /* ty=(Tensor[(8, 2, 9), float32],) */;
  %1136 = %1135.0;
  (%1136,)
}

def @func_10800() -> (Tensor[(8, 2, 9), float32],) {
  %1137 = @func_8962() /* ty=Tensor[(8, 2, 9), float32] */;
  (%1137,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen703/build/output.py", line 3832, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:55:27] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

