==========mod==========
#[version = "0.0.5"]
def @func_2228(%var_2216: Tensor[(12, 5, 15), float32]) -> (Tensor[(12, 5, 15), float64], Tensor[(880), float64]) {
  %0 = cast(%var_2216, dtype="float32") /* ty=Tensor[(12, 5, 15), float32] */;
  %1 = asin(%0) /* ty=Tensor[(12, 5, 15), float32] */;
  %2 = cast(%1, dtype="float64") /* ty=Tensor[(12, 5, 15), float64] */;
  %3 = @func_1885() /* ty=(Tensor[(11, 2, 11), float32], Tensor[(10, 8, 11), int8], Tensor[(88), float64], Tensor[(880), float64]) */;
  %4 = cosh(%2) /* ty=Tensor[(12, 5, 15), float64] */;
  %5 = %3.3;
  (%4, %5)
}

def @func_4320() -> Tensor[(130), int32] {
  %6 = @func_2641() /* ty=(Tensor[(11, 2, 11), float32], Tensor[(3, 3, 3), bool], Tensor[(728, 1), float32], Tensor[(130), float32], Tensor[(78), int16], Tensor[(728), float32]) */;
  %7 = %6.3;
  %8 = cast(meta[relay.Constant][0] /* ty=Tensor[(130), float32] */, dtype="float64") /* ty=Tensor[(130), float64] */;
  %9 = shape_of(%7, dtype="int32") /* ty=Tensor[(1), int32] */;
  %10 = cast(%7, dtype="float64") /* ty=Tensor[(130), float64] */;
  %11 = dyn.reshape(%8, %9, newshape=[]) /* ty=Tensor[(?), float64] */;
  %12 = floor_divide(%10, %11) /* ty=Tensor[(130), float64] */;
  %13 = cast(%7, dtype="int32") /* ty=Tensor[(130), int32] */;
  %14 = shape_of(%12, dtype="int32") /* ty=Tensor[(1), int32] */;
  %15 = cast(%12, dtype="int32") /* ty=Tensor[(130), int32] */;
  %16 = dyn.reshape(%13, %14, newshape=[]) /* ty=Tensor[(?), int32] */;
  bitwise_or(%15, %16) /* ty=Tensor[(130), int32] */
}

def @func_3383() -> (Tensor[(11, 2, 11), float32],) {
  %17 = @func_2935() /* ty=(Tensor[(11, 2, 11), float32], Tensor[(12, 4, 15), uint16], Tensor[(180), uint16]) */;
  %18 = %17.0;
  (%18,)
}

def @func_6419(%var_6417: Tensor[(210), float64]) -> (Tensor[(6, 11, 8), uint64], Tensor[(10, 3, 7), bool], Tensor[(210), float64]) {
  %19 = cast(%var_6417, dtype="float64") /* ty=Tensor[(210), float64] */;
  %20 = reshape(%19, newshape=[10, 3, 7]) /* ty=Tensor[(10, 3, 7), float64] */;
  %21 = @func_5778(%20) /* ty=(Tensor[(8, 6, 6), float32], Tensor[(288), float32], Tensor[(88), float64], Tensor[(10, 3, 7), bool]) */;
  %22 = @func_5039() /* ty=Tensor[(6, 11, 8), uint64] */;
  %23 = %21.3;
  (%22, %23, %var_6417)
}

def @func_3358() -> Tensor[(88), float64] {
  @func_2402() /* ty=Tensor[(88), float64] */
}

def @func_4498() -> Tensor[(24, 22), uint32] {
  @func_3965() /* ty=Tensor[(24, 22), uint32] */
}

def @func_6325(%var_6322: Tensor[(10, 14, 9), float32]) -> (Tensor[(10, 14, 9), float32],) {
  %24 = cast(%var_6322, dtype="float32") /* ty=Tensor[(10, 14, 9), float32] */;
  %25 = exp(%24) /* ty=Tensor[(10, 14, 9), float32] */;
  (%25,)
}

def @func_4791() -> Tensor[(11, 2, 11), uint8] {
  @func_4421() /* ty=Tensor[(11, 2, 11), uint8] */
}

def @func_5903(%var_5878: Tensor[(7, 16, 14), float32], %var_5892: Tensor[(728), float32]) -> (Tensor[(7, 16, 14), float32], Tensor[(7, 16, 14), float32], Tensor[(8, 7, 13), float32], Tensor[(1, 78), int16], Tensor[(1, 546), int16], Tensor[(728), float32], Tensor[(7, 16, 14), float64]) {
  %26 = cast(%var_5878, dtype="float32") /* ty=Tensor[(7, 16, 14), float32] */;
  %27 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(7, 16, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %28 = cast(meta[relay.Constant][1] /* ty=Tensor[(7, 16, 14), float32] */, dtype="float32") /* ty=Tensor[(7, 16, 14), float32] */;
  %29 = dyn.reshape(%26, %27, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %30 = cast(%var_5878, dtype="float64") /* ty=Tensor[(7, 16, 14), float64] */;
  %31 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(7, 16, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %32 = cast(meta[relay.Constant][1] /* ty=Tensor[(7, 16, 14), float32] */, dtype="float64") /* ty=Tensor[(7, 16, 14), float64] */;
  %33 = dyn.reshape(%30, %31, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %34 = floor_divide(%32, %33) /* ty=Tensor[(7, 16, 14), float64] */;
  %35 = cast(%34, dtype="float32") /* ty=Tensor[(7, 16, 14), float32] */;
  %36 = cast(meta[relay.Constant][2] /* ty=Tensor[(1, 78), int16] */, dtype="int16") /* ty=Tensor[(1, 78), int16] */;
  %37 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 546), int16] */, dtype="int16") /* ty=Tensor[(1, 546), int16] */;
  %38 = cast(%var_5892, dtype="float32") /* ty=Tensor[(728), float32] */;
  %39 = reshape(%36, newshape=[6, 1, 13]) /* ty=Tensor[(6, 1, 13), int16] */;
  %40 = reshape(%37, newshape=[6, 7, 13]) /* ty=Tensor[(6, 7, 13), int16] */;
  %41 = reshape(%38, newshape=[1, 728]) /* ty=Tensor[(1, 728), float32] */;
  %42 = @func_219(%39, %40, %41) /* ty=(Tensor[(6, 7, 13), int16], Tensor[(8, 7, 13), float32], Tensor[(1, 728), float32], Tensor[(8, 7, 13), float32], Tensor[(8, 7, 13), float32], Tensor[(8, 7, 13), float32]) */;
  %43 = cast(meta[relay.Constant][1] /* ty=Tensor[(7, 16, 14), float32] */, dtype="float64") /* ty=Tensor[(7, 16, 14), float64] */;
  %44 = shape_of(%var_5878, dtype="int32") /* ty=Tensor[(3), int32] */;
  %45 = cast(%var_5878, dtype="float64") /* ty=Tensor[(7, 16, 14), float64] */;
  %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %47 = add(%28, %29) /* ty=Tensor[(7, 16, 14), float32] */;
  %48 = sinh(%35) /* ty=Tensor[(7, 16, 14), float32] */;
  %49 = %42.3;
  %50 = floor_mod(%45, %46) /* ty=Tensor[(7, 16, 14), float64] */;
  (%47, %48, %49, meta[relay.Constant][2] /* ty=Tensor[(1, 78), int16] */, meta[relay.Constant][3] /* ty=Tensor[(1, 546), int16] */, %var_5892, %50)
}

def @func_4530() -> (Tensor[(130), int32],) {
  %51 = @func_4320() /* ty=Tensor[(130), int32] */;
  (%51,)
}

def @func_6178(%var_6085: Tensor[(24), bool], %var_6102: Tensor[(6, 15, 4), bool]) -> (Tensor[(88), float64], Tensor[(11, 2, 11), float32], Tensor[(24), bool], Tensor[(6, 60), bool], Tensor[(6, 15, 4), int32], Tensor[(24, 22), float64]) {
  %52 = @func_5675() /* ty=(Tensor[(88), float64],) */;
  %53 = @func_1590() /* ty=(Tensor[(11, 2, 11), float32],) */;
  %54 = cast(%var_6085, dtype="bool") /* ty=Tensor[(24), bool] */;
  %55 = cast(meta[relay.Constant][4] /* ty=Tensor[(6, 60), bool] */, dtype="bool") /* ty=Tensor[(6, 60), bool] */;
  %56 = reshape(%54, newshape=[6, 1, 4]) /* ty=Tensor[(6, 1, 4), bool] */;
  %57 = reshape(%55, newshape=[6, 15, 4]) /* ty=Tensor[(6, 15, 4), bool] */;
  %58 = @func_1485(%56, %57) /* ty=(Tensor[(6, 15, 4), bool],) */;
  %59 = %58.0;
  %60 = cast(%var_6102, dtype="int32") /* ty=Tensor[(6, 15, 4), int32] */;
  %61 = shape_of(%59, dtype="int32") /* ty=Tensor[(3), int32] */;
  %62 = cast(%59, dtype="int32") /* ty=Tensor[(6, 15, 4), int32] */;
  %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %64 = @func_4498() /* ty=Tensor[(24, 22), uint32] */;
  %65 = cast(%64, dtype="float64") /* ty=Tensor[(24, 22), float64] */;
  %66 = %52.0;
  %67 = %53.0;
  %68 = right_shift(%62, %63) /* ty=Tensor[(6, 15, 4), int32] */;
  %69 = exp(%65) /* ty=Tensor[(24, 22), float64] */;
  (%66, %67, %var_6085, meta[relay.Constant][4] /* ty=Tensor[(6, 60), bool] */, %68, %69)
}

def @func_2162() -> (Tensor[(6, 11, 8), float32], Tensor[(24, 22), uint32], Tensor[(11, 2, 11), int8]) {
  %70 = cast(meta[relay.Constant][5] /* ty=Tensor[(24, 22), uint32] */, dtype="uint32") /* ty=Tensor[(24, 22), uint32] */;
  %71 = reshape(%70, newshape=[6, 11, 8]) /* ty=Tensor[(6, 11, 8), uint32] */;
  %72 = @func_1330(%71) /* ty=(Tensor[(6, 11, 8), bool], Tensor[(6, 11, 8), float32]) */;
  %73 = @func_1655() /* ty=Tensor[(11, 2, 11), float32] */;
  %74 = cast(meta[relay.Constant][6] /* ty=Tensor[(11, 2, 11), float32] */, dtype="int8") /* ty=Tensor[(11, 2, 11), int8] */;
  %75 = shape_of(%73, dtype="int32") /* ty=Tensor[(3), int32] */;
  %76 = cast(%73, dtype="int8") /* ty=Tensor[(11, 2, 11), int8] */;
  %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %78 = %72.1;
  %79 = subtract(%76, %77) /* ty=Tensor[(11, 2, 11), int8] */;
  (%78, meta[relay.Constant][5] /* ty=Tensor[(24, 22), uint32] */, %79)
}

def @func_5975() -> Tensor[(13, 12, 4), float32] {
  %80 = @func_4135() /* ty=(Tensor[(10, 8, 11), int8], Tensor[(13, 12, 4), uint64]) */;
  %81 = %80.1;
  %82 = cast(%81, dtype="float32") /* ty=Tensor[(13, 12, 4), float32] */;
  atan(%82) /* ty=Tensor[(13, 12, 4), float32] */
}

def @func_6630() -> (Tensor[(11, 2, 11), float64], Tensor[(8, 6, 6), float32], Tensor[(288), float32]) {
  %83 = @func_5698() /* ty=(Tensor[(11, 2, 11), float64], Tensor[(11, 2, 11), float64]) */;
  %84 = cast(meta[relay.Constant][7] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %85 = reshape(%84, newshape=[288]) /* ty=Tensor[(288), float32] */;
  %86 = @func_2754(%85) /* ty=(Tensor[(3, 3, 3), bool], Tensor[(?, 728), bool], Tensor[(8, 6, 6), float32], Tensor[(288), float32]) */;
  %87 = %83.1;
  %88 = %86.2;
  (%87, %88, meta[relay.Constant][7] /* ty=Tensor[(288), float32] */)
}

def @func_2402() -> Tensor[(88), float64] {
  %89 = @func_1885() /* ty=(Tensor[(11, 2, 11), float32], Tensor[(10, 8, 11), int8], Tensor[(88), float64], Tensor[(880), float64]) */;
  %89.2
}

def @func_7007() -> Tensor[(11, 2, 11), float32] {
  @func_6364() /* ty=Tensor[(11, 2, 11), float32] */
}

def @func_5003() -> Tensor[(11, 2, 11), float64] {
  %90 = @func_3383() /* ty=(Tensor[(11, 2, 11), float32],) */;
  %91 = %90.0;
  %92 = cast(%91, dtype="float64") /* ty=Tensor[(11, 2, 11), float64] */;
  log(%92) /* ty=Tensor[(11, 2, 11), float64] */
}

def @func_7024() -> Tensor[(11, 2, 11), float32] {
  @func_5190() /* ty=Tensor[(11, 2, 11), float32] */
}

def @func_1390(%var_1385: Tensor[(8, 6, 6), float32]) -> (Tensor[(8, 6, 6), float32],) {
  %93 = cast(%var_1385, dtype="float32") /* ty=Tensor[(8, 6, 6), float32] */;
  %94 = acosh(%93) /* ty=Tensor[(8, 6, 6), float32] */;
  (%94,)
}

def @func_1870(%var_1829: Tensor[(5, 13, 2), float32], %var_1863: Tensor[(78), int16], %var_1865: Tensor[(728, 1), float32]) -> (Tensor[(6, 11, 8), bool], Tensor[(528), uint32], Tensor[(5, 13, 2), float64], Tensor[(8, 7, 13), float32], Tensor[(78), int16], Tensor[(1, 546), int16], Tensor[(728, 1), float32]) {
  %95 = cast(meta[relay.Constant][8] /* ty=Tensor[(528), uint32] */, dtype="uint32") /* ty=Tensor[(528), uint32] */;
  %96 = reshape(%95, newshape=[6, 11, 8]) /* ty=Tensor[(6, 11, 8), uint32] */;
  %97 = @func_1330(%96) /* ty=(Tensor[(6, 11, 8), bool], Tensor[(6, 11, 8), float32]) */;
  %98 = cast(%var_1829, dtype="float32") /* ty=Tensor[(5, 13, 2), float32] */;
  %99 = cosh(%98) /* ty=Tensor[(5, 13, 2), float32] */;
  %100 = cast(%var_1829, dtype="float64") /* ty=Tensor[(5, 13, 2), float64] */;
  %101 = shape_of(%99, dtype="int32") /* ty=Tensor[(3), int32] */;
  %102 = cast(%99, dtype="float64") /* ty=Tensor[(5, 13, 2), float64] */;
  %103 = dyn.reshape(%100, %101, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %104 = cast(%var_1863, dtype="int16") /* ty=Tensor[(78), int16] */;
  %105 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 546), int16] */, dtype="int16") /* ty=Tensor[(1, 546), int16] */;
  %106 = cast(%var_1865, dtype="float32") /* ty=Tensor[(728, 1), float32] */;
  %107 = reshape(%104, newshape=[6, 1, 13]) /* ty=Tensor[(6, 1, 13), int16] */;
  %108 = reshape(%105, newshape=[6, 7, 13]) /* ty=Tensor[(6, 7, 13), int16] */;
  %109 = reshape(%106, newshape=[1, 728]) /* ty=Tensor[(1, 728), float32] */;
  %110 = @func_219(%107, %108, %109) /* ty=(Tensor[(6, 7, 13), int16], Tensor[(8, 7, 13), float32], Tensor[(1, 728), float32], Tensor[(8, 7, 13), float32], Tensor[(8, 7, 13), float32], Tensor[(8, 7, 13), float32]) */;
  %111 = %97.0;
  %112 = floor_divide(%102, %103) /* ty=Tensor[(5, 13, 2), float64] */;
  %113 = %110.4;
  (%111, meta[relay.Constant][8] /* ty=Tensor[(528), uint32] */, %112, %113, %var_1863, meta[relay.Constant][9] /* ty=Tensor[(1, 546), int16] */, %var_1865)
}

def @func_6238(%var_6210: Tensor[(288), float32]) -> (Tensor[(360), float64], Tensor[(3, 3, 3), bool], Tensor[(288), float32]) {
  %114 = @func_5868() /* ty=(Tensor[(360), float64],) */;
  %115 = cast(%var_6210, dtype="float32") /* ty=Tensor[(288), float32] */;
  %116 = reshape(%115, newshape=[288]) /* ty=Tensor[(288), float32] */;
  %117 = @func_2754(%116) /* ty=(Tensor[(3, 3, 3), bool], Tensor[(?, 728), bool], Tensor[(8, 6, 6), float32], Tensor[(288), float32]) */;
  %118 = %114.0;
  %119 = %117.0;
  (%118, %119, %var_6210)
}

def @func_6198() -> (Tensor[(88), float64],) {
  %120 = @func_3358() /* ty=Tensor[(88), float64] */;
  (%120,)
}

def @func_7220(%var_7185: Tensor[(728), float32]) -> (Tensor[(11, 2, 11), float32], Tensor[(130), float32], Tensor[(130), float32], Tensor[(78), int16], Tensor[(728), float32], Tensor[(130), int32]) {
  %121 = cast(meta[relay.Constant][10] /* ty=Tensor[(130), float32] */, dtype="float32") /* ty=Tensor[(130), float32] */;
  %122 = cast(meta[relay.Constant][11] /* ty=Tensor[(78), int16] */, dtype="int16") /* ty=Tensor[(78), int16] */;
  %123 = cast(%var_7185, dtype="float32") /* ty=Tensor[(728), float32] */;
  %124 = reshape(%121, newshape=[130]) /* ty=Tensor[(130), float32] */;
  %125 = reshape(%122, newshape=[78]) /* ty=Tensor[(78), int16] */;
  %126 = reshape(%123, newshape=[1, 728]) /* ty=Tensor[(1, 728), float32] */;
  %127 = @func_6503(%124, %125, %126) /* ty=(Tensor[(11, 2, 11), float32], Tensor[(728, 1), float32], Tensor[(130), float32], Tensor[(78), int16], Tensor[(1, 728), float32]) */;
  %128 = @func_5139() /* ty=(Tensor[(130), int32], Tensor[(11, 2, 11), float32]) */;
  %129 = @func_1620() /* ty=Tensor[(11, 2, 11), float32] */;
  %130 = %127.2;
  %131 = %128.0;
  (%129, %130, meta[relay.Constant][10] /* ty=Tensor[(130), float32] */, meta[relay.Constant][11] /* ty=Tensor[(78), int16] */, %var_7185, %131)
}

def @func_2570() -> (Tensor[(11, 2, 11), float32],) {
  %132 = @func_1885() /* ty=(Tensor[(11, 2, 11), float32], Tensor[(10, 8, 11), int8], Tensor[(88), float64], Tensor[(880), float64]) */;
  %133 = %132.0;
  (%133,)
}

def @func_1655() -> Tensor[(11, 2, 11), float32] {
  %134 = @func_1590() /* ty=(Tensor[(11, 2, 11), float32],) */;
  %134.0
}

def @func_1885() -> (Tensor[(11, 2, 11), float32], Tensor[(10, 8, 11), int8], Tensor[(88), float64], Tensor[(880), float64]) {
  %135 = cast(meta[relay.Constant][12] /* ty=Tensor[(88), float64] */, dtype="float64") /* ty=Tensor[(88), float64] */;
  %136 = cast(meta[relay.Constant][13] /* ty=Tensor[(880), float64] */, dtype="float64") /* ty=Tensor[(880), float64] */;
  %137 = reshape(%135, newshape=[1, 8, 11]) /* ty=Tensor[(1, 8, 11), float64] */;
  %138 = reshape(%136, newshape=[10, 8, 11]) /* ty=Tensor[(10, 8, 11), float64] */;
  %139 = @func_454(%137, %138) /* ty=(Tensor[(1, 8, 11), float64], Tensor[(10, 8, 11), int8]) */;
  %140 = @func_1620() /* ty=Tensor[(11, 2, 11), float32] */;
  %141 = %139.1;
  (%140, %141, meta[relay.Constant][12] /* ty=Tensor[(88), float64] */, meta[relay.Constant][13] /* ty=Tensor[(880), float64] */)
}

def @func_1561() -> Tensor[(11, 2, 11), float32] {
  %142 = cast(meta[relay.Constant][14] /* ty=Tensor[(11, 2, 11), float32] */, dtype="float32") /* ty=Tensor[(11, 2, 11), float32] */;
  log10(%142) /* ty=Tensor[(11, 2, 11), float32] */
}

def @func_2754(%var_2752: Tensor[(288), float32]) -> (Tensor[(3, 3, 3), bool], Tensor[(?, 728), bool], Tensor[(8, 6, 6), float32], Tensor[(288), float32]) {
  %143 = @func_2318() /* ty=(Tensor[(3, 3, 3), bool],) */;
  %144 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 728), float32] */, dtype="float32") /* ty=Tensor[(1, 728), float32] */;
  %145 = reshape(%144, newshape=[8, 7, 13]) /* ty=Tensor[(8, 7, 13), float32] */;
  %146 = @func_141(%145) /* ty=(Tensor[(8, 7, 13), float32],) */;
  %147 = %146.0;
  %148 = cast(%147, dtype="bool") /* ty=Tensor[(8, 7, 13), bool] */;
  %149 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(1, 728), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %150 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 728), float32] */, dtype="bool") /* ty=Tensor[(1, 728), bool] */;
  %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %152 = cast(%var_2752, dtype="float32") /* ty=Tensor[(288), float32] */;
  %153 = reshape(%152, newshape=[8, 6, 6]) /* ty=Tensor[(8, 6, 6), float32] */;
  %154 = @func_1390(%153) /* ty=(Tensor[(8, 6, 6), float32],) */;
  %155 = %143.0;
  %156 = less_equal(%150, %151) /* ty=Tensor[(?, 728), bool] */;
  %157 = %154.0;
  (%155, %156, %157, %var_2752)
}

def @func_3593(%var_3551: Tensor[(6, 3, 1), bool], %var_3552: Tensor[(6, 3, 11), bool]) -> (Tensor[(6, 3, 11), bool], Tensor[(6, 3, 11), bool]) {
  %158 = cast(%var_3552, dtype="float32") /* ty=Tensor[(6, 3, 11), float32] */;
  %159 = log(%158) /* ty=Tensor[(6, 3, 11), float32] */;
  %160 = cast(%var_3552, dtype="bool") /* ty=Tensor[(6, 3, 11), bool] */;
  %161 = shape_of(%159, dtype="int32") /* ty=Tensor[(3), int32] */;
  %162 = cast(%159, dtype="bool") /* ty=Tensor[(6, 3, 11), bool] */;
  %163 = dyn.reshape(%160, %161, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %164 = cast(%var_3551, dtype="bool") /* ty=Tensor[(6, 3, 1), bool] */;
  %165 = cast(%var_3552, dtype="bool") /* ty=Tensor[(6, 3, 11), bool] */;
  %166 = logical_or(%164, %165) /* ty=Tensor[(6, 3, 11), bool] */;
  %167 = cast(%var_3551, dtype="int32") /* ty=Tensor[(6, 3, 1), int32] */;
  %168 = cast(%166, dtype="int32") /* ty=Tensor[(6, 3, 11), int32] */;
  %169 = multiply(%167, %168) /* ty=Tensor[(6, 3, 11), int32] */;
  %170 = cast(%169, dtype="bool") /* ty=Tensor[(6, 3, 11), bool] */;
  %171 = shape_of(%159, dtype="int32") /* ty=Tensor[(3), int32] */;
  %172 = cast(%159, dtype="bool") /* ty=Tensor[(6, 3, 11), bool] */;
  %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %174 = not_equal(%162, %163) /* ty=Tensor[(6, 3, 11), bool] */;
  %175 = greater_equal(%172, %173) /* ty=Tensor[(6, 3, 11), bool] */;
  (%174, %175)
}

def @func_454(%var_443: Tensor[(1, 8, 11), float64], %var_449: Tensor[(10, 8, 11), float64]) -> (Tensor[(1, 8, 11), float64], Tensor[(10, 8, 11), int8]) {
  %176 = cast(%var_443, dtype="float64") /* ty=Tensor[(1, 8, 11), float64] */;
  %177 = cast(%var_443, dtype="int8") /* ty=Tensor[(1, 8, 11), int8] */;
  %178 = cast(%var_449, dtype="int8") /* ty=Tensor[(10, 8, 11), int8] */;
  %179 = atanh(%176) /* ty=Tensor[(1, 8, 11), float64] */;
  %180 = left_shift(%177, %178) /* ty=Tensor[(10, 8, 11), int8] */;
  (%179, %180)
}

def @func_4480(%var_4455: Tensor[(4, 132), uint32]) -> (Tensor[(11, 2, 11), float32], Tensor[(11, 2, 11), float32], Tensor[(4, 132), bool], Tensor[(6, 11, 8), float32]) {
  %181 = @func_1590() /* ty=(Tensor[(11, 2, 11), float32],) */;
  %182 = cast(%var_4455, dtype="uint32") /* ty=Tensor[(4, 132), uint32] */;
  %183 = reshape(%182, newshape=[6, 11, 8]) /* ty=Tensor[(6, 11, 8), uint32] */;
  %184 = @func_1330(%183) /* ty=(Tensor[(6, 11, 8), bool], Tensor[(6, 11, 8), float32]) */;
  %185 = %184.1;
  %186 = cast(%185, dtype="bool") /* ty=Tensor[(6, 11, 8), bool] */;
  %187 = shape_of(%var_4455, dtype="int32") /* ty=Tensor[(2), int32] */;
  %188 = cast(%var_4455, dtype="bool") /* ty=Tensor[(4, 132), bool] */;
  %189 = dyn.reshape(%186, %187, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %190 = cast(%185, dtype="float32") /* ty=Tensor[(6, 11, 8), float32] */;
  %191 = @func_3994() /* ty=Tensor[(11, 2, 11), float32] */;
  %192 = %181.0;
  %193 = logical_or(%188, %189) /* ty=Tensor[(4, 132), bool] */;
  %194 = exp(%190) /* ty=Tensor[(6, 11, 8), float32] */;
  (%191, %192, %193, %194)
}

def @func_7290() -> (Tensor[(6, 11, 8), float32], Tensor[(13, 12, 4), bool]) {
  %195 = @func_2162() /* ty=(Tensor[(6, 11, 8), float32], Tensor[(24, 22), uint32], Tensor[(11, 2, 11), int8]) */;
  %196 = %195.0;
  %197 = @func_6547() /* ty=Tensor[(13, 12, 4), bool] */;
  (%196, %197)
}

def @func_1330(%var_1322: Tensor[(6, 11, 8), uint32]) -> (Tensor[(6, 11, 8), bool], Tensor[(6, 11, 8), float32]) {
  %198 = cast(%var_1322, dtype="bool") /* ty=Tensor[(6, 11, 8), bool] */;
  %199 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(6, 11, 8), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %200 = cast(meta[relay.Constant][16] /* ty=Tensor[(6, 11, 8), uint32] */, dtype="bool") /* ty=Tensor[(6, 11, 8), bool] */;
  %201 = dyn.reshape(%198, %199, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %202 = cast(meta[relay.Constant][16] /* ty=Tensor[(6, 11, 8), uint32] */, dtype="float32") /* ty=Tensor[(6, 11, 8), float32] */;
  %203 = greater_equal(%200, %201) /* ty=Tensor[(6, 11, 8), bool] */;
  %204 = acos(%202) /* ty=Tensor[(6, 11, 8), float32] */;
  (%203, %204)
}

def @func_6364() -> Tensor[(11, 2, 11), float32] {
  %205 = @func_2570() /* ty=(Tensor[(11, 2, 11), float32],) */;
  %205.0
}

def @func_6503(%var_6499: Tensor[(130), float32], %var_6500: Tensor[(78), int16], %var_6501: Tensor[(1, 728), float32]) -> (Tensor[(11, 2, 11), float32], Tensor[(728, 1), float32], Tensor[(130), float32], Tensor[(78), int16], Tensor[(1, 728), float32]) {
  %206 = @func_2935() /* ty=(Tensor[(11, 2, 11), float32], Tensor[(12, 4, 15), uint16], Tensor[(180), uint16]) */;
  %207 = cast(%var_6499, dtype="float32") /* ty=Tensor[(130), float32] */;
  %208 = cast(%var_6500, dtype="int16") /* ty=Tensor[(78), int16] */;
  %209 = cast(%var_6501, dtype="float32") /* ty=Tensor[(1, 728), float32] */;
  %210 = reshape(%207, newshape=[5, 13, 2]) /* ty=Tensor[(5, 13, 2), float32] */;
  %211 = reshape(%208, newshape=[78]) /* ty=Tensor[(78), int16] */;
  %212 = reshape(%209, newshape=[728, 1]) /* ty=Tensor[(728, 1), float32] */;
  %213 = @func_1870(%210, %211, %212) /* ty=(Tensor[(6, 11, 8), bool], Tensor[(528), uint32], Tensor[(5, 13, 2), float64], Tensor[(8, 7, 13), float32], Tensor[(78), int16], Tensor[(1, 546), int16], Tensor[(728, 1), float32]) */;
  %214 = %206.0;
  %215 = %213.6;
  (%214, %215, %var_6499, %var_6500, %var_6501)
}

def @func_5039() -> Tensor[(6, 11, 8), uint64] {
  %216 = @func_2162() /* ty=(Tensor[(6, 11, 8), float32], Tensor[(24, 22), uint32], Tensor[(11, 2, 11), int8]) */;
  %217 = %216.0;
  %218 = cast(%217, dtype="float32") /* ty=Tensor[(6, 11, 8), float32] */;
  %219 = sigmoid(%218) /* ty=Tensor[(6, 11, 8), float32] */;
  %220 = cast(%217, dtype="uint64") /* ty=Tensor[(6, 11, 8), uint64] */;
  %221 = shape_of(%219, dtype="int32") /* ty=Tensor[(3), int32] */;
  %222 = cast(%219, dtype="uint64") /* ty=Tensor[(6, 11, 8), uint64] */;
  %223 = dyn.reshape(%220, %221, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  left_shift(%222, %223) /* ty=Tensor[(6, 11, 8), uint64] */
}

def @func_4625(%var_4580: Tensor[(2, 180), float32], %var_4618: Tensor[(728), float32]) -> (Tensor[(11, 2, 11), float32], Tensor[(10, 8, 11), int8], Tensor[(11, 2, 11), float64], Tensor[(88), float64], Tensor[(360), float32], Tensor[(2, 180), float32], Tensor[(1, 8, 11), float64], Tensor[(24), bool], Tensor[(6, 11, 8), float32], Tensor[(8, 66), uint32], Tensor[(8, 7, 13), float32], Tensor[(728), float32]) {
  %224 = @func_4400() /* ty=(Tensor[(10, 8, 11), int8],) */;
  %225 = @func_3994() /* ty=Tensor[(11, 2, 11), float32] */;
  %226 = cast(%225, dtype="float32") /* ty=Tensor[(11, 2, 11), float32] */;
  %227 = reshape(%226, newshape=[11, 2, 11]) /* ty=Tensor[(11, 2, 11), float32] */;
  %228 = @func_1819(%227) /* ty=(Tensor[(11, 2, 11), float64], Tensor[(11, 2, 11), bool], Tensor[(11, 2, 11), int64]) */;
  %229 = cast(%var_4580, dtype="float32") /* ty=Tensor[(2, 180), float32] */;
  %230 = reshape(%229, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %231 = @func_3102(%230) /* ty=(Tensor[(11, 2, 11), float32], Tensor[(6, 15, 4), bool], Tensor[(360), float32]) */;
  %232 = cast(meta[relay.Constant][17] /* ty=Tensor[(24), bool] */, dtype="bool") /* ty=Tensor[(24), bool] */;
  %233 = %231.2;
  %234 = cast(%233, dtype="bool") /* ty=Tensor[(360), bool] */;
  %235 = @func_3358() /* ty=Tensor[(88), float64] */;
  %236 = cast(%235, dtype="float64") /* ty=Tensor[(88), float64] */;
  %237 = reshape(%232, newshape=[24]) /* ty=Tensor[(24), bool] */;
  %238 = reshape(%234, newshape=[1, 360]) /* ty=Tensor[(1, 360), bool] */;
  %239 = reshape(%236, newshape=[88]) /* ty=Tensor[(88), float64] */;
  %240 = @func_2984(%237, %238, %239) /* ty=(Tensor[(78), int16], Tensor[(6, 15, 4), bool], Tensor[(24), bool], Tensor[(1, 360), bool], Tensor[(1, 8, 11), float64], Tensor[(88), float64], Tensor[(880), float64]) */;
  %241 = cast(meta[relay.Constant][18] /* ty=Tensor[(8, 66), uint32] */, dtype="uint32") /* ty=Tensor[(8, 66), uint32] */;
  %242 = reshape(%241, newshape=[6, 11, 8]) /* ty=Tensor[(6, 11, 8), uint32] */;
  %243 = @func_1330(%242) /* ty=(Tensor[(6, 11, 8), bool], Tensor[(6, 11, 8), float32]) */;
  %244 = cast(%var_4618, dtype="float32") /* ty=Tensor[(728), float32] */;
  %245 = reshape(%244, newshape=[8, 7, 13]) /* ty=Tensor[(8, 7, 13), float32] */;
  %246 = @func_141(%245) /* ty=(Tensor[(8, 7, 13), float32],) */;
  %247 = %224.0;
  %248 = %228.0;
  %249 = %240.4;
  %250 = %243.1;
  %251 = %246.0;
  (%225, %247, %248, %235, %233, %var_4580, %249, meta[relay.Constant][17] /* ty=Tensor[(24), bool] */, %250, meta[relay.Constant][18] /* ty=Tensor[(8, 66), uint32] */, %251, %var_4618)
}

def @func_2318() -> (Tensor[(3, 3, 3), bool],) {
  %252 = cast(meta[relay.Constant][19] /* ty=Tensor[(3, 3, 1), bool] */, dtype="bool") /* ty=Tensor[(3, 3, 1), bool] */;
  %253 = cast(meta[relay.Constant][20] /* ty=Tensor[(3, 3, 3), bool] */, dtype="bool") /* ty=Tensor[(3, 3, 3), bool] */;
  %254 = logical_and(%252, %253) /* ty=Tensor[(3, 3, 3), bool] */;
  (%254,)
}

def @func_5361() -> Tensor[(11, 2, 11), uint8] {
  @func_4421() /* ty=Tensor[(11, 2, 11), uint8] */
}

def @func_4680() -> (Tensor[(130), int32], Tensor[(360), float32], Tensor[(11, 2, 11), float32], Tensor[(360), float64]) {
  %255 = @func_4530() /* ty=(Tensor[(130), int32],) */;
  %256 = cast(meta[relay.Constant][21] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
  %257 = reshape(%256, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %258 = @func_3102(%257) /* ty=(Tensor[(11, 2, 11), float32], Tensor[(6, 15, 4), bool], Tensor[(360), float32]) */;
  %259 = @func_1885() /* ty=(Tensor[(11, 2, 11), float32], Tensor[(10, 8, 11), int8], Tensor[(88), float64], Tensor[(880), float64]) */;
  %260 = cast(meta[relay.Constant][21] /* ty=Tensor[(360), float32] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %261 = %255.0;
  %262 = %258.2;
  %263 = %259.0;
  %264 = acos(%260) /* ty=Tensor[(360), float64] */;
  (%261, %262, %263, %264)
}

def @func_6833(%var_6779: int32, %var_6780: Tensor[(6, 6, 11), int32]) -> (Tensor[(6, 6, 11), bool], Tensor[(11, 2, 11), float32], Tensor[(6, 6, 11), float32], Tensor[(8, 7, 16), int16], Tensor[(896), int16], Tensor[(11, 2, 11), int8], Tensor[(6, 6, 11), float32]) {
  %265 = cast(%var_6779, dtype="bool") /* ty=bool */;
  %266 = cast(%var_6780, dtype="bool") /* ty=Tensor[(6, 6, 11), bool] */;
  %267 = cast(%var_6780, dtype="float64") /* ty=Tensor[(6, 6, 11), float64] */;
  %268 = sinh(%267) /* ty=Tensor[(6, 6, 11), float64] */;
  %269 = cast(%268, dtype="float32") /* ty=Tensor[(6, 6, 11), float32] */;
  %270 = cast(%var_6779, dtype="float32") /* ty=float32 */;
  %271 = cast(meta[relay.Constant][22] /* ty=Tensor[(896), int16] */, dtype="int16") /* ty=Tensor[(896), int16] */;
  %272 = cast(meta[relay.Constant][22] /* ty=Tensor[(896), int16] */, dtype="int16") /* ty=Tensor[(896), int16] */;
  %273 = reshape(%271, newshape=[8, 7, 16]) /* ty=Tensor[(8, 7, 16), int16] */;
  %274 = reshape(%272, newshape=[8, 7, 16]) /* ty=Tensor[(8, 7, 16), int16] */;
  %275 = @func_2162() /* ty=(Tensor[(6, 11, 8), float32], Tensor[(24, 22), uint32], Tensor[(11, 2, 11), int8]) */;
  %276 = cast(%268, dtype="float32") /* ty=Tensor[(6, 6, 11), float32] */;
  %277 = less(%265, %266) /* ty=Tensor[(6, 6, 11), bool] */;
  %278 = @func_5190() /* ty=Tensor[(11, 2, 11), float32] */;
  %279 = divide(%269, %270) /* ty=Tensor[(6, 6, 11), float32] */;
  %280 = @func_1306(%273, %274) /* ty=Tensor[(8, 7, 16), int16] */;
  %281 = %275.2;
  %282 = sin(%276) /* ty=Tensor[(6, 6, 11), float32] */;
  (%277, %278, %279, %280, meta[relay.Constant][22] /* ty=Tensor[(896), int16] */, %281, %282)
}

def @func_5698() -> (Tensor[(11, 2, 11), float64], Tensor[(11, 2, 11), float64]) {
  %283 = @func_5003() /* ty=Tensor[(11, 2, 11), float64] */;
  %284 = cast(%283, dtype="float32") /* ty=Tensor[(11, 2, 11), float32] */;
  %285 = reshape(%284, newshape=[11, 2, 11]) /* ty=Tensor[(11, 2, 11), float32] */;
  %286 = @func_1819(%285) /* ty=(Tensor[(11, 2, 11), float64], Tensor[(11, 2, 11), bool], Tensor[(11, 2, 11), int64]) */;
  %287 = %286.0;
  (%283, %287)
}

def @func_6071(%var_6060: Tensor[(10, 7, 11), float32]) -> Tensor[(10, 7, 11), float32] {
  %288 = cast(%var_6060, dtype="float32") /* ty=Tensor[(10, 7, 11), float32] */;
  sigmoid(%288) /* ty=Tensor[(10, 7, 11), float32] */
}

def @func_5778(%var_5747: Tensor[(10, 3, 7), float64]) -> (Tensor[(8, 6, 6), float32], Tensor[(288), float32], Tensor[(88), float64], Tensor[(10, 3, 7), bool]) {
  %289 = cast(meta[relay.Constant][23] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %290 = reshape(%289, newshape=[8, 6, 6]) /* ty=Tensor[(8, 6, 6), float32] */;
  %291 = @func_1390(%290) /* ty=(Tensor[(8, 6, 6), float32],) */;
  %292 = cast(%var_5747, dtype="float64") /* ty=Tensor[(10, 3, 7), float64] */;
  %293 = sinh(%292) /* ty=Tensor[(10, 3, 7), float64] */;
  %294 = cast(%var_5747, dtype="int8") /* ty=Tensor[(10, 3, 7), int8] */;
  %295 = shape_of(%293, dtype="int32") /* ty=Tensor[(3), int32] */;
  %296 = cast(%293, dtype="int8") /* ty=Tensor[(10, 3, 7), int8] */;
  %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %298 = minimum(%296, %297) /* ty=Tensor[(10, 3, 7), int8] */;
  %299 = cast(%293, dtype="bool") /* ty=Tensor[(10, 3, 7), bool] */;
  %300 = shape_of(%298, dtype="int32") /* ty=Tensor[(3), int32] */;
  %301 = cast(%298, dtype="bool") /* ty=Tensor[(10, 3, 7), bool] */;
  %302 = dyn.reshape(%299, %300, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %303 = %291.0;
  %304 = @func_4263() /* ty=Tensor[(88), float64] */;
  %305 = less(%301, %302) /* ty=Tensor[(10, 3, 7), bool] */;
  (%303, meta[relay.Constant][23] /* ty=Tensor[(288), float32] */, %304, %305)
}

def @func_219(%var_194: Tensor[(6, 1, 13), int16], %var_195: Tensor[(6, 7, 13), int16], %var_200: Tensor[(1, 728), float32]) -> (Tensor[(6, 7, 13), int16], Tensor[(8, 7, 13), float32], Tensor[(1, 728), float32], Tensor[(8, 7, 13), float32], Tensor[(8, 7, 13), float32], Tensor[(8, 7, 13), float32]) {
  %306 = cast(%var_194, dtype="int16") /* ty=Tensor[(6, 1, 13), int16] */;
  %307 = cast(%var_195, dtype="int16") /* ty=Tensor[(6, 7, 13), int16] */;
  %308 = cast(%var_200, dtype="float32") /* ty=Tensor[(1, 728), float32] */;
  %309 = reshape(%308, newshape=[8, 7, 13]) /* ty=Tensor[(8, 7, 13), float32] */;
  %310 = @func_141(%309) /* ty=(Tensor[(8, 7, 13), float32],) */;
  %311 = cast(%var_200, dtype="float32") /* ty=Tensor[(1, 728), float32] */;
  %312 = reshape(%311, newshape=[8, 7, 13]) /* ty=Tensor[(8, 7, 13), float32] */;
  %313 = @func_141(%312) /* ty=(Tensor[(8, 7, 13), float32],) */;
  %314 = cast(%var_200, dtype="float32") /* ty=Tensor[(1, 728), float32] */;
  %315 = reshape(%314, newshape=[8, 7, 13]) /* ty=Tensor[(8, 7, 13), float32] */;
  %316 = @func_141(%315) /* ty=(Tensor[(8, 7, 13), float32],) */;
  %317 = cast(%var_200, dtype="float32") /* ty=Tensor[(1, 728), float32] */;
  %318 = reshape(%317, newshape=[8, 7, 13]) /* ty=Tensor[(8, 7, 13), float32] */;
  %319 = @func_141(%318) /* ty=(Tensor[(8, 7, 13), float32],) */;
  %320 = multiply(%306, %307) /* ty=Tensor[(6, 7, 13), int16] */;
  %321 = %310.0;
  %322 = %313.0;
  %323 = %316.0;
  %324 = %319.0;
  (%320, %321, %var_200, %322, %323, %324)
}

def @func_1306(%var_1301: Tensor[(8, 7, 16), int16], %var_1302: Tensor[(8, 7, 16), int16]) -> Tensor[(8, 7, 16), int16] {
  %325 = cast(%var_1302, dtype="int16") /* ty=Tensor[(8, 7, 16), int16] */;
  %326 = shape_of(%var_1301, dtype="int32") /* ty=Tensor[(3), int32] */;
  %327 = cast(%var_1301, dtype="int16") /* ty=Tensor[(8, 7, 16), int16] */;
  %328 = dyn.reshape(%325, %326, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  minimum(%327, %328) /* ty=Tensor[(8, 7, 16), int16] */
}

def @func_3219() -> (Tensor[(11, 2, 11), float32], Tensor[(8, 7, 13), float32], Tensor[(14, 52), float32]) {
  %329 = cast(meta[relay.Constant][24] /* ty=Tensor[(14, 52), float32] */, dtype="float32") /* ty=Tensor[(14, 52), float32] */;
  %330 = reshape(%329, newshape=[8, 7, 13]) /* ty=Tensor[(8, 7, 13), float32] */;
  %331 = @func_141(%330) /* ty=(Tensor[(8, 7, 13), float32],) */;
  %332 = @func_1620() /* ty=Tensor[(11, 2, 11), float32] */;
  %333 = %331.0;
  (%332, %333, meta[relay.Constant][24] /* ty=Tensor[(14, 52), float32] */)
}

def @func_2907(%var_2877: Tensor[(32), bool], %var_2878: Tensor[(288), bool]) -> (Tensor[(88), float64], Tensor[(8, 7, 13), float32], Tensor[(1, 2, 16), float32], Tensor[(32), bool], Tensor[(288), bool], Tensor[(11, 2, 11), float32], Tensor[(728), float32], Tensor[(11, 2, 11), float32]) {
  %334 = cast(meta[relay.Constant][25] /* ty=Tensor[(728), float32] */, dtype="float32") /* ty=Tensor[(728), float32] */;
  %335 = reshape(%334, newshape=[8, 7, 13]) /* ty=Tensor[(8, 7, 13), float32] */;
  %336 = @func_141(%335) /* ty=(Tensor[(8, 7, 13), float32],) */;
  %337 = cast(%var_2877, dtype="bool") /* ty=Tensor[(32), bool] */;
  %338 = cast(%var_2878, dtype="bool") /* ty=Tensor[(288), bool] */;
  %339 = reshape(%337, newshape=[1, 2, 16]) /* ty=Tensor[(1, 2, 16), bool] */;
  %340 = reshape(%338, newshape=[9, 2, 16]) /* ty=Tensor[(9, 2, 16), bool] */;
  %341 = @func_367(%339, %340) /* ty=(Tensor[(9, 2, 16), bool], Tensor[(1, 2, 16), float32]) */;
  %342 = cast(meta[relay.Constant][25] /* ty=Tensor[(728), float32] */, dtype="float32") /* ty=Tensor[(728), float32] */;
  %343 = @func_2570() /* ty=(Tensor[(11, 2, 11), float32],) */;
  %344 = @func_2402() /* ty=Tensor[(88), float64] */;
  %345 = %336.0;
  %346 = %341.1;
  %347 = @func_1620() /* ty=Tensor[(11, 2, 11), float32] */;
  %348 = log(%342) /* ty=Tensor[(728), float32] */;
  %349 = %343.0;
  (%344, %345, %346, %var_2877, %var_2878, %347, %348, %349)
}

def @func_4135() -> (Tensor[(10, 8, 11), int8], Tensor[(13, 12, 4), uint64]) {
  %350 = @func_1885() /* ty=(Tensor[(11, 2, 11), float32], Tensor[(10, 8, 11), int8], Tensor[(88), float64], Tensor[(880), float64]) */;
  %351 = %350.1;
  %352 = @func_3886() /* ty=Tensor[(13, 12, 4), uint64] */;
  (%351, %352)
}

def @func_4236() -> (Tensor[(88), float64], Tensor[(11, 2, 11), float32]) {
  %353 = @func_3358() /* ty=Tensor[(88), float64] */;
  %354 = @func_3994() /* ty=Tensor[(11, 2, 11), float32] */;
  (%353, %354)
}

def @func_3786(%var_3721: Tensor[(288), float32]) -> (Tensor[(3, 3, 3), bool], Tensor[(180), uint16], Tensor[(8, 6, 6), float32], Tensor[(288), float32], Tensor[(11, 2, 11), float32], Tensor[(88), float64]) {
  %355 = @func_2318() /* ty=(Tensor[(3, 3, 3), bool],) */;
  %356 = @func_2935() /* ty=(Tensor[(11, 2, 11), float32], Tensor[(12, 4, 15), uint16], Tensor[(180), uint16]) */;
  %357 = cast(%var_3721, dtype="float32") /* ty=Tensor[(288), float32] */;
  %358 = reshape(%357, newshape=[288]) /* ty=Tensor[(288), float32] */;
  %359 = @func_2754(%358) /* ty=(Tensor[(3, 3, 3), bool], Tensor[(?, 728), bool], Tensor[(8, 6, 6), float32], Tensor[(288), float32]) */;
  %360 = %355.0;
  %361 = %356.2;
  %362 = %359.2;
  %363 = @func_1561() /* ty=Tensor[(11, 2, 11), float32] */;
  %364 = @func_2402() /* ty=Tensor[(88), float64] */;
  (%360, %361, %362, %var_3721, %363, %364)
}

def @func_5227() -> Tensor[(13, 12, 4), uint64] {
  %365 = @func_4135() /* ty=(Tensor[(10, 8, 11), int8], Tensor[(13, 12, 4), uint64]) */;
  %365.1
}

def @func_6990() -> (Tensor[(88), float64],) {
  %366 = @func_2402() /* ty=Tensor[(88), float64] */;
  (%366,)
}

def @func_6907() -> (Tensor[(11, 2, 11), float32], Tensor[(130), float64]) {
  %367 = @func_3383() /* ty=(Tensor[(11, 2, 11), float32],) */;
  %368 = @func_4946() /* ty=(Tensor[(11, 2, 11), float32], Tensor[(130), int32]) */;
  %369 = %368.1;
  %370 = cast(%369, dtype="float64") /* ty=Tensor[(130), float64] */;
  %371 = %367.0;
  %372 = tan(%370) /* ty=Tensor[(130), float64] */;
  (%371, %372)
}

def @func_3425() -> (Tensor[(16, 3, 2), float32], Tensor[(16, 3, 2), float32]) {
  %373 = cast(meta[relay.Constant][26] /* ty=Tensor[(16, 3, 2), float32] */, dtype="float32") /* ty=Tensor[(16, 3, 2), float32] */;
  %374 = cast(meta[relay.Constant][26] /* ty=Tensor[(16, 3, 2), float32] */, dtype="float32") /* ty=Tensor[(16, 3, 2), float32] */;
  %375 = log10(%373) /* ty=Tensor[(16, 3, 2), float32] */;
  %376 = log(%374) /* ty=Tensor[(16, 3, 2), float32] */;
  (%375, %376)
}

def @func_4400() -> (Tensor[(10, 8, 11), int8],) {
  %377 = @func_4135() /* ty=(Tensor[(10, 8, 11), int8], Tensor[(13, 12, 4), uint64]) */;
  %378 = %377.0;
  (%378,)
}

def @func_1788(%var_1768: Tensor[(896), int16]) -> (Tensor[(8, 7, 16), int16], Tensor[(896), int16], Tensor[(12, 2, 2), int16], Tensor[(12, 2, 2), float64]) {
  %379 = cast(%var_1768, dtype="int16") /* ty=Tensor[(896), int16] */;
  %380 = cast(%var_1768, dtype="int16") /* ty=Tensor[(896), int16] */;
  %381 = reshape(%379, newshape=[8, 7, 16]) /* ty=Tensor[(8, 7, 16), int16] */;
  %382 = reshape(%380, newshape=[8, 7, 16]) /* ty=Tensor[(8, 7, 16), int16] */;
  %383 = cast(meta[relay.Constant][27] /* ty=Tensor[(12, 2, 2), float32] */, dtype="float32") /* ty=Tensor[(12, 2, 2), float32] */;
  %384 = exp(%383) /* ty=Tensor[(12, 2, 2), float32] */;
  %385 = cast(meta[relay.Constant][27] /* ty=Tensor[(12, 2, 2), float32] */, dtype="int8") /* ty=Tensor[(12, 2, 2), int8] */;
  %386 = shape_of(%384, dtype="int32") /* ty=Tensor[(3), int32] */;
  %387 = cast(%384, dtype="int8") /* ty=Tensor[(12, 2, 2), int8] */;
  %388 = dyn.reshape(%385, %386, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %389 = multiply(%387, %388) /* ty=Tensor[(12, 2, 2), int8] */;
  %390 = cast(%389, dtype="int16") /* ty=Tensor[(12, 2, 2), int16] */;
  %391 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(12, 2, 2), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %392 = cast(meta[relay.Constant][27] /* ty=Tensor[(12, 2, 2), float32] */, dtype="int16") /* ty=Tensor[(12, 2, 2), int16] */;
  %393 = dyn.reshape(%390, %391, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %394 = cast(%384, dtype="float64") /* ty=Tensor[(12, 2, 2), float64] */;
  %395 = @func_1306(%381, %382) /* ty=Tensor[(8, 7, 16), int16] */;
  %396 = right_shift(%392, %393) /* ty=Tensor[(12, 2, 2), int16] */;
  %397 = cos(%394) /* ty=Tensor[(12, 2, 2), float64] */;
  (%395, %var_1768, %396, %397)
}

def @func_7147(%var_7132: Tensor[(24, 22), uint32]) -> (Tensor[(728, 1), float32], Tensor[(24, 22), float32], Tensor[(6, 15, 4), bool], Tensor[(360), float32]) {
  %398 = @func_2641() /* ty=(Tensor[(11, 2, 11), float32], Tensor[(3, 3, 3), bool], Tensor[(728, 1), float32], Tensor[(130), float32], Tensor[(78), int16], Tensor[(728), float32]) */;
  %399 = @func_4032() /* ty=(Tensor[(24, 22), uint32],) */;
  %400 = %399.0;
  %401 = cast(%var_7132, dtype="float32") /* ty=Tensor[(24, 22), float32] */;
  %402 = shape_of(%400, dtype="int32") /* ty=Tensor[(2), int32] */;
  %403 = cast(%400, dtype="float32") /* ty=Tensor[(24, 22), float32] */;
  %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %405 = cast(meta[relay.Constant][28] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
  %406 = reshape(%405, newshape=[15, 12, 2]) /* ty=Tensor[(15, 12, 2), float32] */;
  %407 = @func_2293(%406) /* ty=(Tensor[(6, 15, 4), bool], Tensor[(24), bool], Tensor[(6, 15, 4), bool], Tensor[(11, 2, 11), int8], Tensor[(15, 12, 2), float32]) */;
  %408 = %398.2;
  %409 = maximum(%403, %404) /* ty=Tensor[(24, 22), float32] */;
  %410 = %407.0;
  (%408, %409, %410, meta[relay.Constant][28] /* ty=Tensor[(360), float32] */)
}

def @func_5139() -> (Tensor[(130), int32], Tensor[(11, 2, 11), float32]) {
  %411 = @func_4530() /* ty=(Tensor[(130), int32],) */;
  %412 = @func_1590() /* ty=(Tensor[(11, 2, 11), float32],) */;
  %413 = %411.0;
  %414 = %412.0;
  (%413, %414)
}

def @func_3886() -> Tensor[(13, 12, 4), uint64] {
  %415 = cast(meta[relay.Constant][30] /* ty=Tensor[(13, 12, 4), uint64] */, dtype="uint64") /* ty=Tensor[(13, 12, 4), uint64] */;
  %416 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(13, 12, 4), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %417 = cast(meta[relay.Constant][29] /* ty=Tensor[(13, 12, 4), uint64] */, dtype="uint64") /* ty=Tensor[(13, 12, 4), uint64] */;
  %418 = dyn.reshape(%415, %416, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  bitwise_or(%417, %418) /* ty=Tensor[(13, 12, 4), uint64] */
}

def @func_2935() -> (Tensor[(11, 2, 11), float32], Tensor[(12, 4, 15), uint16], Tensor[(180), uint16]) {
  %419 = @func_1590() /* ty=(Tensor[(11, 2, 11), float32],) */;
  %420 = cast(meta[relay.Constant][31] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %421 = reshape(%420, newshape=[12, 1, 15]) /* ty=Tensor[(12, 1, 15), uint16] */;
  %422 = %419.0;
  %423 = @func_1081(%421) /* ty=Tensor[(12, 4, 15), uint16] */;
  (%422, %423, meta[relay.Constant][31] /* ty=Tensor[(180), uint16] */)
}

def @func_986(%var_924: Tensor[(2, 10, 10), int32], %var_950: Tensor[(728), float32], %var_961: Tensor[(288), bool], %var_966: Tensor[(880), float64], %var_970: Tensor[(91, 6), int16]) -> (Tensor[(2, 10, 10), int32], Tensor[(2, 10, 10), float64], Tensor[(8, 7, 13), float32], Tensor[(728), float32], Tensor[(32), bool], Tensor[(288), bool], Tensor[(10, 8, 11), int8], Tensor[(88), float64], Tensor[(880), float64], Tensor[(8, 7, 13), float32], Tensor[(13, 6), int16], Tensor[(91, 6), int16], Tensor[(1, 2, 16), float32]) {
  %424 = cast(%var_924, dtype="int32") /* ty=Tensor[(2, 10, 10), int32] */;
  %425 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(2, 10, 10), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %426 = cast(meta[relay.Constant][32] /* ty=Tensor[(2, 10, 10), int32] */, dtype="int32") /* ty=Tensor[(2, 10, 10), int32] */;
  %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %428 = cast(%var_924, dtype="float64") /* ty=Tensor[(2, 10, 10), float64] */;
  %429 = cast(%var_950, dtype="float32") /* ty=Tensor[(728), float32] */;
  %430 = reshape(%429, newshape=[8, 7, 13]) /* ty=Tensor[(8, 7, 13), float32] */;
  %431 = @func_141(%430) /* ty=(Tensor[(8, 7, 13), float32],) */;
  %432 = cast(meta[relay.Constant][34] /* ty=Tensor[(88), float64] */, dtype="float64") /* ty=Tensor[(88), float64] */;
  %433 = cast(%var_966, dtype="float64") /* ty=Tensor[(880), float64] */;
  %434 = reshape(%432, newshape=[1, 8, 11]) /* ty=Tensor[(1, 8, 11), float64] */;
  %435 = reshape(%433, newshape=[10, 8, 11]) /* ty=Tensor[(10, 8, 11), float64] */;
  %436 = @func_454(%434, %435) /* ty=(Tensor[(1, 8, 11), float64], Tensor[(10, 8, 11), int8]) */;
  %437 = cast(meta[relay.Constant][35] /* ty=Tensor[(13, 6), int16] */, dtype="int16") /* ty=Tensor[(13, 6), int16] */;
  %438 = cast(%var_970, dtype="int16") /* ty=Tensor[(91, 6), int16] */;
  %439 = %431.0;
  %440 = cast(%439, dtype="float32") /* ty=Tensor[(8, 7, 13), float32] */;
  %441 = reshape(%437, newshape=[6, 1, 13]) /* ty=Tensor[(6, 1, 13), int16] */;
  %442 = reshape(%438, newshape=[6, 7, 13]) /* ty=Tensor[(6, 7, 13), int16] */;
  %443 = reshape(%440, newshape=[1, 728]) /* ty=Tensor[(1, 728), float32] */;
  %444 = @func_219(%441, %442, %443) /* ty=(Tensor[(6, 7, 13), int16], Tensor[(8, 7, 13), float32], Tensor[(1, 728), float32], Tensor[(8, 7, 13), float32], Tensor[(8, 7, 13), float32], Tensor[(8, 7, 13), float32]) */;
  %445 = cast(meta[relay.Constant][33] /* ty=Tensor[(32), bool] */, dtype="bool") /* ty=Tensor[(32), bool] */;
  %446 = cast(%var_961, dtype="bool") /* ty=Tensor[(288), bool] */;
  %447 = reshape(%445, newshape=[1, 2, 16]) /* ty=Tensor[(1, 2, 16), bool] */;
  %448 = reshape(%446, newshape=[9, 2, 16]) /* ty=Tensor[(9, 2, 16), bool] */;
  %449 = @func_367(%447, %448) /* ty=(Tensor[(9, 2, 16), bool], Tensor[(1, 2, 16), float32]) */;
  %450 = %449.1;
  %451 = cast(%450, dtype="float32") /* ty=Tensor[(1, 2, 16), float32] */;
  %452 = minimum(%426, %427) /* ty=Tensor[(2, 10, 10), int32] */;
  %453 = log2(%428) /* ty=Tensor[(2, 10, 10), float64] */;
  %454 = %436.1;
  %455 = %444.1;
  %456 = sin(%451) /* ty=Tensor[(1, 2, 16), float32] */;
  (%452, %453, %439, %var_950, meta[relay.Constant][33] /* ty=Tensor[(32), bool] */, %var_961, %454, meta[relay.Constant][34] /* ty=Tensor[(88), float64] */, %var_966, %455, meta[relay.Constant][35] /* ty=Tensor[(13, 6), int16] */, %var_970, %456)
}

def @func_5623() -> (Tensor[(6, 11, 8), float64], Tensor[(24, 22), uint32], Tensor[(11, 2, 11), float32]) {
  %457 = @func_5039() /* ty=Tensor[(6, 11, 8), uint64] */;
  %458 = cast(%457, dtype="float64") /* ty=Tensor[(6, 11, 8), float64] */;
  %459 = sinh(%458) /* ty=Tensor[(6, 11, 8), float64] */;
  %460 = @func_3965() /* ty=Tensor[(24, 22), uint32] */;
  %461 = @func_5190() /* ty=Tensor[(11, 2, 11), float32] */;
  (%459, %460, %461)
}

def @func_6706(%var_6703: Tensor[(210), float64]) -> (Tensor[(16, 3, 2), float32], Tensor[(11, 2, 11), uint8], Tensor[(8, 6, 6), float32], Tensor[(210), float64]) {
  %462 = @func_3425() /* ty=(Tensor[(16, 3, 2), float32], Tensor[(16, 3, 2), float32]) */;
  %463 = cast(%var_6703, dtype="float64") /* ty=Tensor[(210), float64] */;
  %464 = reshape(%463, newshape=[10, 3, 7]) /* ty=Tensor[(10, 3, 7), float64] */;
  %465 = @func_5778(%464) /* ty=(Tensor[(8, 6, 6), float32], Tensor[(288), float32], Tensor[(88), float64], Tensor[(10, 3, 7), bool]) */;
  %466 = %462.1;
  %467 = @func_4791() /* ty=Tensor[(11, 2, 11), uint8] */;
  %468 = %465.0;
  (%466, %467, %468, %var_6703)
}

def @func_5190() -> Tensor[(11, 2, 11), float32] {
  %469 = @func_1590() /* ty=(Tensor[(11, 2, 11), float32],) */;
  %469.0
}

def @func_7249(%var_7231: Tensor[(13, 12, 4), bool]) -> (Tensor[(13, 12, 4), bool], Tensor[(13, 12, 4), float32]) {
  %470 = @func_6547() /* ty=Tensor[(13, 12, 4), bool] */;
  %471 = cast(%var_7231, dtype="bool") /* ty=Tensor[(13, 12, 4), bool] */;
  %472 = shape_of(%470, dtype="int32") /* ty=Tensor[(3), int32] */;
  %473 = cast(%470, dtype="bool") /* ty=Tensor[(13, 12, 4), bool] */;
  %474 = dyn.reshape(%471, %472, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %475 = greater_equal(%473, %474) /* ty=Tensor[(13, 12, 4), bool] */;
  %476 = @func_5975() /* ty=Tensor[(13, 12, 4), float32] */;
  (%475, %476)
}

def @func_7065(%var_7033: Tensor[(13, 5, 7), float32]) -> (Tensor[(13, 5, 7), float64],) {
  %477 = cast(%var_7033, dtype="float32") /* ty=Tensor[(13, 5, 7), float32] */;
  %478 = asinh(%477) /* ty=Tensor[(13, 5, 7), float32] */;
  %479 = cast(%478, dtype="float64") /* ty=Tensor[(13, 5, 7), float64] */;
  %480 = asin(%479) /* ty=Tensor[(13, 5, 7), float64] */;
  (%480,)
}

def @func_2821(%var_2815: Tensor[(1, 16, 4), int16]) -> (Tensor[(14, 16, 4), bool],) {
  %481 = cast(%var_2815, dtype="bool") /* ty=Tensor[(1, 16, 4), bool] */;
  %482 = cast(meta[relay.Constant][36] /* ty=Tensor[(14, 16, 4), int16] */, dtype="bool") /* ty=Tensor[(14, 16, 4), bool] */;
  %483 = less(%481, %482) /* ty=Tensor[(14, 16, 4), bool] */;
  (%483,)
}

def @func_3994() -> Tensor[(11, 2, 11), float32] {
  %484 = @func_3383() /* ty=(Tensor[(11, 2, 11), float32],) */;
  %484.0
}

def @func_7341(%var_7317: Tensor[(32), bool]) -> (Tensor[(88), float64], Tensor[(11, 2, 11), float32], Tensor[(32), bool], Tensor[(288), bool]) {
  %485 = cast(%var_7317, dtype="bool") /* ty=Tensor[(32), bool] */;
  %486 = cast(meta[relay.Constant][37] /* ty=Tensor[(288), bool] */, dtype="bool") /* ty=Tensor[(288), bool] */;
  %487 = reshape(%485, newshape=[32]) /* ty=Tensor[(32), bool] */;
  %488 = reshape(%486, newshape=[288]) /* ty=Tensor[(288), bool] */;
  %489 = @func_2907(%487, %488) /* ty=(Tensor[(88), float64], Tensor[(8, 7, 13), float32], Tensor[(1, 2, 16), float32], Tensor[(32), bool], Tensor[(288), bool], Tensor[(11, 2, 11), float32], Tensor[(728), float32], Tensor[(11, 2, 11), float32]) */;
  %490 = @func_2402() /* ty=Tensor[(88), float64] */;
  %491 = %489.7;
  (%490, %491, %var_7317, meta[relay.Constant][37] /* ty=Tensor[(288), bool] */)
}

def @func_6547() -> Tensor[(13, 12, 4), bool] {
  %492 = @func_5975() /* ty=Tensor[(13, 12, 4), float32] */;
  %493 = cast(meta[relay.Constant][38] /* ty=Tensor[(13, 12, 4), float32] */, dtype="bool") /* ty=Tensor[(13, 12, 4), bool] */;
  %494 = shape_of(%492, dtype="int32") /* ty=Tensor[(3), int32] */;
  %495 = cast(%492, dtype="bool") /* ty=Tensor[(13, 12, 4), bool] */;
  %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%495, %496) /* ty=Tensor[(13, 12, 4), bool] */
}

def @func_2641() -> (Tensor[(11, 2, 11), float32], Tensor[(3, 3, 3), bool], Tensor[(728, 1), float32], Tensor[(130), float32], Tensor[(78), int16], Tensor[(728), float32]) {
  %497 = @func_1590() /* ty=(Tensor[(11, 2, 11), float32],) */;
  %498 = @func_2318() /* ty=(Tensor[(3, 3, 3), bool],) */;
  %499 = cast(meta[relay.Constant][39] /* ty=Tensor[(130), float32] */, dtype="float32") /* ty=Tensor[(130), float32] */;
  %500 = cast(meta[relay.Constant][40] /* ty=Tensor[(78), int16] */, dtype="int16") /* ty=Tensor[(78), int16] */;
  %501 = cast(meta[relay.Constant][41] /* ty=Tensor[(728), float32] */, dtype="float32") /* ty=Tensor[(728), float32] */;
  %502 = reshape(%499, newshape=[5, 13, 2]) /* ty=Tensor[(5, 13, 2), float32] */;
  %503 = reshape(%500, newshape=[78]) /* ty=Tensor[(78), int16] */;
  %504 = reshape(%501, newshape=[728, 1]) /* ty=Tensor[(728, 1), float32] */;
  %505 = @func_1870(%502, %503, %504) /* ty=(Tensor[(6, 11, 8), bool], Tensor[(528), uint32], Tensor[(5, 13, 2), float64], Tensor[(8, 7, 13), float32], Tensor[(78), int16], Tensor[(1, 546), int16], Tensor[(728, 1), float32]) */;
  %506 = %497.0;
  %507 = %498.0;
  %508 = %505.6;
  (%506, %507, %508, meta[relay.Constant][39] /* ty=Tensor[(130), float32] */, meta[relay.Constant][40] /* ty=Tensor[(78), int16] */, meta[relay.Constant][41] /* ty=Tensor[(728), float32] */)
}

def @func_2293(%var_2258: Tensor[(15, 12, 2), float32]) -> (Tensor[(6, 15, 4), bool], Tensor[(24), bool], Tensor[(6, 15, 4), bool], Tensor[(11, 2, 11), int8], Tensor[(15, 12, 2), float32]) {
  %509 = cast(meta[relay.Constant][42] /* ty=Tensor[(24), bool] */, dtype="bool") /* ty=Tensor[(24), bool] */;
  %510 = cast(%var_2258, dtype="bool") /* ty=Tensor[(15, 12, 2), bool] */;
  %511 = reshape(%509, newshape=[6, 1, 4]) /* ty=Tensor[(6, 1, 4), bool] */;
  %512 = reshape(%510, newshape=[6, 15, 4]) /* ty=Tensor[(6, 15, 4), bool] */;
  %513 = @func_1485(%511, %512) /* ty=(Tensor[(6, 15, 4), bool],) */;
  %514 = cast(meta[relay.Constant][42] /* ty=Tensor[(24), bool] */, dtype="bool") /* ty=Tensor[(24), bool] */;
  %515 = cast(%var_2258, dtype="bool") /* ty=Tensor[(15, 12, 2), bool] */;
  %516 = reshape(%514, newshape=[6, 1, 4]) /* ty=Tensor[(6, 1, 4), bool] */;
  %517 = reshape(%515, newshape=[6, 15, 4]) /* ty=Tensor[(6, 15, 4), bool] */;
  %518 = @func_1485(%516, %517) /* ty=(Tensor[(6, 15, 4), bool],) */;
  %519 = @func_2162() /* ty=(Tensor[(6, 11, 8), float32], Tensor[(24, 22), uint32], Tensor[(11, 2, 11), int8]) */;
  %520 = cast(%var_2258, dtype="float32") /* ty=Tensor[(15, 12, 2), float32] */;
  %521 = asin(%520) /* ty=Tensor[(15, 12, 2), float32] */;
  %522 = cast(%521, dtype="float32") /* ty=Tensor[(15, 12, 2), float32] */;
  %523 = %513.0;
  %524 = %518.0;
  %525 = %519.2;
  %526 = sigmoid(%522) /* ty=Tensor[(15, 12, 2), float32] */;
  (%523, meta[relay.Constant][42] /* ty=Tensor[(24), bool] */, %524, %525, %526)
}

def @func_1819(%var_1800: Tensor[(11, 2, 11), float32]) -> (Tensor[(11, 2, 11), float64], Tensor[(11, 2, 11), bool], Tensor[(11, 2, 11), int64]) {
  %527 = @func_1655() /* ty=Tensor[(11, 2, 11), float32] */;
  %528 = cast(%var_1800, dtype="float64") /* ty=Tensor[(11, 2, 11), float64] */;
  %529 = shape_of(%527, dtype="int32") /* ty=Tensor[(3), int32] */;
  %530 = cast(%527, dtype="float64") /* ty=Tensor[(11, 2, 11), float64] */;
  %531 = dyn.reshape(%528, %529, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %532 = cast(meta[relay.Constant][43] /* ty=Tensor[(11, 2, 11), float32] */, dtype="bool") /* ty=Tensor[(11, 2, 11), bool] */;
  %533 = shape_of(%var_1800, dtype="int32") /* ty=Tensor[(3), int32] */;
  %534 = cast(%var_1800, dtype="bool") /* ty=Tensor[(11, 2, 11), bool] */;
  %535 = dyn.reshape(%532, %533, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %536 = cast(%var_1800, dtype="int64") /* ty=Tensor[(11, 2, 11), int64] */;
  %537 = shape_of(%527, dtype="int32") /* ty=Tensor[(3), int32] */;
  %538 = cast(%527, dtype="int64") /* ty=Tensor[(11, 2, 11), int64] */;
  %539 = dyn.reshape(%536, %537, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %540 = minimum(%530, %531) /* ty=Tensor[(11, 2, 11), float64] */;
  %541 = logical_or(%534, %535) /* ty=Tensor[(11, 2, 11), bool] */;
  %542 = multiply(%538, %539) /* ty=Tensor[(11, 2, 11), int64] */;
  (%540, %541, %542)
}

def @func_1620() -> Tensor[(11, 2, 11), float32] {
  %543 = @func_1590() /* ty=(Tensor[(11, 2, 11), float32],) */;
  %543.0
}

def @func_6463() -> (Tensor[(11, 2, 11), uint8], Tensor[(6, 11, 8), float32]) {
  %544 = @func_2162() /* ty=(Tensor[(6, 11, 8), float32], Tensor[(24, 22), uint32], Tensor[(11, 2, 11), int8]) */;
  %545 = @func_5361() /* ty=Tensor[(11, 2, 11), uint8] */;
  %546 = %544.0;
  (%545, %546)
}

def @func_7370(%var_7367: Tensor[(210), float64]) -> (Tensor[(24, 22), bool], Tensor[(24, 22), int8], Tensor[(210), float64], Tensor[(210), float64]) {
  %547 = @func_4032() /* ty=(Tensor[(24, 22), uint32],) */;
  %548 = %547.0;
  %549 = cast(meta[relay.Constant][44] /* ty=Tensor[(24, 22), uint32] */, dtype="bool") /* ty=Tensor[(24, 22), bool] */;
  %550 = shape_of(%548, dtype="int32") /* ty=Tensor[(2), int32] */;
  %551 = cast(%548, dtype="bool") /* ty=Tensor[(24, 22), bool] */;
  %552 = dyn.reshape(%549, %550, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %553 = cast(meta[relay.Constant][44] /* ty=Tensor[(24, 22), uint32] */, dtype="int8") /* ty=Tensor[(24, 22), int8] */;
  %554 = shape_of(%548, dtype="int32") /* ty=Tensor[(2), int32] */;
  %555 = cast(%548, dtype="int8") /* ty=Tensor[(24, 22), int8] */;
  %556 = dyn.reshape(%553, %554, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %557 = cast(%var_7367, dtype="float64") /* ty=Tensor[(210), float64] */;
  %558 = reshape(%557, newshape=[210]) /* ty=Tensor[(210), float64] */;
  %559 = @func_6419(%558) /* ty=(Tensor[(6, 11, 8), uint64], Tensor[(10, 3, 7), bool], Tensor[(210), float64]) */;
  %560 = not_equal(%551, %552) /* ty=Tensor[(24, 22), bool] */;
  %561 = minimum(%555, %556) /* ty=Tensor[(24, 22), int8] */;
  %562 = %559.2;
  (%560, %561, %562, %var_7367)
}

def @func_3431() -> (Tensor[(88), float64],) {
  %563 = @func_1885() /* ty=(Tensor[(11, 2, 11), float32], Tensor[(10, 8, 11), int8], Tensor[(88), float64], Tensor[(880), float64]) */;
  %564 = %563.2;
  (%564,)
}

def @func_1081(%var_1061: Tensor[(12, 1, 15), uint16]) -> Tensor[(12, 4, 15), uint16] {
  %565 = cast(%var_1061, dtype="uint16") /* ty=Tensor[(12, 1, 15), uint16] */;
  %566 = cast(meta[relay.Constant][45] /* ty=Tensor[(12, 4, 15), uint16] */, dtype="uint16") /* ty=Tensor[(12, 4, 15), uint16] */;
  maximum(%565, %566) /* ty=Tensor[(12, 4, 15), uint16] */
}

def @func_2706(%var_2680: Tensor[(1, 6, 13), float32], %var_2681: Tensor[(8, 6, 13), float32]) -> Tensor[(8, 6, 13), float32] {
  %567 = cast(%var_2680, dtype="float32") /* ty=Tensor[(1, 6, 13), float32] */;
  %568 = cast(%var_2681, dtype="float32") /* ty=Tensor[(8, 6, 13), float32] */;
  add(%567, %568) /* ty=Tensor[(8, 6, 13), float32] */
}

def @func_5868() -> (Tensor[(360), float64],) {
  %569 = @func_4680() /* ty=(Tensor[(130), int32], Tensor[(360), float32], Tensor[(11, 2, 11), float32], Tensor[(360), float64]) */;
  %570 = %569.3;
  (%570,)
}

def @func_3540() -> (Tensor[(88), float64],) {
  %571 = @func_3358() /* ty=Tensor[(88), float64] */;
  (%571,)
}

def @func_5655() -> Tensor[(88), float64] {
  %572 = @func_3510() /* ty=(Tensor[(88), float64],) */;
  %572.0
}

def @func_5110() -> (Tensor[(11, 2, 11), float32], Tensor[(288), float32], Tensor[(288), float32], Tensor[(24, 22), uint32]) {
  %573 = @func_3383() /* ty=(Tensor[(11, 2, 11), float32],) */;
  %574 = cast(meta[relay.Constant][46] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %575 = reshape(%574, newshape=[288]) /* ty=Tensor[(288), float32] */;
  %576 = @func_2754(%575) /* ty=(Tensor[(3, 3, 3), bool], Tensor[(?, 728), bool], Tensor[(8, 6, 6), float32], Tensor[(288), float32]) */;
  %577 = @func_2162() /* ty=(Tensor[(6, 11, 8), float32], Tensor[(24, 22), uint32], Tensor[(11, 2, 11), int8]) */;
  %578 = %573.0;
  %579 = %576.3;
  %580 = %577.1;
  (%578, %579, meta[relay.Constant][46] /* ty=Tensor[(288), float32] */, %580)
}

def @func_2189(%var_2186: Tensor[(15, 3, 8), float64]) -> Tensor[(15, 3, 8), float64] {
  %581 = cast(%var_2186, dtype="float64") /* ty=Tensor[(15, 3, 8), float64] */;
  sqrt(%581) /* ty=Tensor[(15, 3, 8), float64] */
}

def @func_4032() -> (Tensor[(24, 22), uint32],) {
  %582 = @func_3965() /* ty=Tensor[(24, 22), uint32] */;
  (%582,)
}

def @main(%var_7392: int64, %var_7393: Tensor[(14, 5, 15), int64]) -> Tensor[(14, 5, 15), int64] {
  %583 = cast(%var_7392, dtype="int64") /* ty=int64 */;
  %584 = cast(%var_7393, dtype="int64") /* ty=Tensor[(14, 5, 15), int64] */;
  logical_xor(%583, %584) /* ty=Tensor[(14, 5, 15), int64] */
}

def @func_2136(%var_2093: Tensor[(896), int16], %var_2121: Tensor[(8, 7, 16), float32]) -> (Tensor[(10, 8, 11), int8], Tensor[(896), int16], Tensor[(11, 2, 11), float32], Tensor[(8, 7, 16), int32]) {
  %585 = @func_1885() /* ty=(Tensor[(11, 2, 11), float32], Tensor[(10, 8, 11), int8], Tensor[(88), float64], Tensor[(880), float64]) */;
  %586 = cast(%var_2093, dtype="int16") /* ty=Tensor[(896), int16] */;
  %587 = cast(%var_2093, dtype="int16") /* ty=Tensor[(896), int16] */;
  %588 = reshape(%586, newshape=[8, 7, 16]) /* ty=Tensor[(8, 7, 16), int16] */;
  %589 = reshape(%587, newshape=[8, 7, 16]) /* ty=Tensor[(8, 7, 16), int16] */;
  %590 = @func_1306(%588, %589) /* ty=Tensor[(8, 7, 16), int16] */;
  %591 = cast(%590, dtype="float32") /* ty=Tensor[(8, 7, 16), float32] */;
  %592 = sin(%591) /* ty=Tensor[(8, 7, 16), float32] */;
  %593 = cast(%var_2121, dtype="int32") /* ty=Tensor[(8, 7, 16), int32] */;
  %594 = shape_of(%592, dtype="int32") /* ty=Tensor[(3), int32] */;
  %595 = cast(%592, dtype="int32") /* ty=Tensor[(8, 7, 16), int32] */;
  %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %597 = %585.1;
  %598 = @func_1655() /* ty=Tensor[(11, 2, 11), float32] */;
  %599 = right_shift(%595, %596) /* ty=Tensor[(8, 7, 16), int32] */;
  (%597, %var_2093, %598, %599)
}

def @func_5839() -> (Tensor[(11, 2, 11), uint8], Tensor[(8, 7, 16), int16], Tensor[(896), int16], Tensor[(88), float64]) {
  %600 = cast(meta[relay.Constant][47] /* ty=Tensor[(896), int16] */, dtype="int16") /* ty=Tensor[(896), int16] */;
  %601 = cast(meta[relay.Constant][47] /* ty=Tensor[(896), int16] */, dtype="int16") /* ty=Tensor[(896), int16] */;
  %602 = reshape(%600, newshape=[8, 7, 16]) /* ty=Tensor[(8, 7, 16), int16] */;
  %603 = reshape(%601, newshape=[8, 7, 16]) /* ty=Tensor[(8, 7, 16), int16] */;
  %604 = @func_4791() /* ty=Tensor[(11, 2, 11), uint8] */;
  %605 = @func_1306(%602, %603) /* ty=Tensor[(8, 7, 16), int16] */;
  %606 = @func_4179() /* ty=Tensor[(88), float64] */;
  (%604, %605, meta[relay.Constant][47] /* ty=Tensor[(896), int16] */, %606)
}

def @func_4946() -> (Tensor[(11, 2, 11), float32], Tensor[(130), int32]) {
  %607 = @func_3383() /* ty=(Tensor[(11, 2, 11), float32],) */;
  %608 = @func_4530() /* ty=(Tensor[(130), int32],) */;
  %609 = %607.0;
  %610 = %608.0;
  (%609, %610)
}

def @func_2438(%var_2421: Tensor[(14, 7, 16), uint32]) -> (Tensor[(14, 7, 16), uint32], Tensor[(14, 7, 16), float32], Tensor[(6, 11, 8), float32], Tensor[(528), uint32]) {
  %611 = cast(meta[relay.Constant][48] /* ty=Tensor[(14, 7, 16), uint32] */, dtype="uint32") /* ty=Tensor[(14, 7, 16), uint32] */;
  %612 = shape_of(%var_2421, dtype="int32") /* ty=Tensor[(3), int32] */;
  %613 = cast(%var_2421, dtype="uint32") /* ty=Tensor[(14, 7, 16), uint32] */;
  %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %615 = cast(meta[relay.Constant][48] /* ty=Tensor[(14, 7, 16), uint32] */, dtype="float32") /* ty=Tensor[(14, 7, 16), float32] */;
  %616 = cast(meta[relay.Constant][49] /* ty=Tensor[(528), uint32] */, dtype="uint32") /* ty=Tensor[(528), uint32] */;
  %617 = reshape(%616, newshape=[6, 11, 8]) /* ty=Tensor[(6, 11, 8), uint32] */;
  %618 = @func_1330(%617) /* ty=(Tensor[(6, 11, 8), bool], Tensor[(6, 11, 8), float32]) */;
  %619 = minimum(%613, %614) /* ty=Tensor[(14, 7, 16), uint32] */;
  %620 = cosh(%615) /* ty=Tensor[(14, 7, 16), float32] */;
  %621 = %618.1;
  (%619, %620, %621, meta[relay.Constant][49] /* ty=Tensor[(528), uint32] */)
}

def @func_2372(%var_2344: Tensor[(288), float32], %var_2354: Tensor[(11, 2, 11), float32]) -> (Tensor[(11, 2, 11), float32], Tensor[(8, 6, 6), float32], Tensor[(288), float32], Tensor[(11, 2, 11), uint64]) {
  %622 = cast(%var_2344, dtype="float32") /* ty=Tensor[(288), float32] */;
  %623 = reshape(%622, newshape=[8, 6, 6]) /* ty=Tensor[(8, 6, 6), float32] */;
  %624 = @func_1390(%623) /* ty=(Tensor[(8, 6, 6), float32],) */;
  %625 = @func_1590() /* ty=(Tensor[(11, 2, 11), float32],) */;
  %626 = %625.0;
  %627 = cast(%var_2354, dtype="uint64") /* ty=Tensor[(11, 2, 11), uint64] */;
  %628 = shape_of(%626, dtype="int32") /* ty=Tensor[(3), int32] */;
  %629 = cast(%626, dtype="uint64") /* ty=Tensor[(11, 2, 11), uint64] */;
  %630 = dyn.reshape(%627, %628, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %631 = @func_1655() /* ty=Tensor[(11, 2, 11), float32] */;
  %632 = %624.0;
  %633 = bitwise_or(%629, %630) /* ty=Tensor[(11, 2, 11), uint64] */;
  (%631, %632, %var_2344, %633)
}

def @func_3179(%var_3136: Tensor[(360), float32], %var_3176: Tensor[(32, 1), bool]) -> (Tensor[(88), float64], Tensor[(11, 2, 11), float32], Tensor[(360), float32], Tensor[(6, 11, 8), float32], Tensor[(528), uint32], Tensor[(1, 2, 16), float32], Tensor[(32, 1), bool], Tensor[(288), bool]) {
  %634 = cast(%var_3136, dtype="float32") /* ty=Tensor[(360), float32] */;
  %635 = reshape(%634, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %636 = @func_3102(%635) /* ty=(Tensor[(11, 2, 11), float32], Tensor[(6, 15, 4), bool], Tensor[(360), float32]) */;
  %637 = cast(meta[relay.Constant][50] /* ty=Tensor[(528), uint32] */, dtype="uint32") /* ty=Tensor[(528), uint32] */;
  %638 = reshape(%637, newshape=[6, 11, 8]) /* ty=Tensor[(6, 11, 8), uint32] */;
  %639 = @func_1330(%638) /* ty=(Tensor[(6, 11, 8), bool], Tensor[(6, 11, 8), float32]) */;
  %640 = cast(%var_3176, dtype="bool") /* ty=Tensor[(32, 1), bool] */;
  %641 = cast(meta[relay.Constant][51] /* ty=Tensor[(288), bool] */, dtype="bool") /* ty=Tensor[(288), bool] */;
  %642 = reshape(%640, newshape=[1, 2, 16]) /* ty=Tensor[(1, 2, 16), bool] */;
  %643 = reshape(%641, newshape=[9, 2, 16]) /* ty=Tensor[(9, 2, 16), bool] */;
  %644 = @func_367(%642, %643) /* ty=(Tensor[(9, 2, 16), bool], Tensor[(1, 2, 16), float32]) */;
  %645 = @func_2402() /* ty=Tensor[(88), float64] */;
  %646 = %636.0;
  %647 = %639.1;
  %648 = %644.1;
  (%645, %646, %var_3136, %647, meta[relay.Constant][50] /* ty=Tensor[(528), uint32] */, %648, %var_3176, meta[relay.Constant][51] /* ty=Tensor[(288), bool] */)
}

def @func_6486() -> Tensor[(88), float32] {
  %649 = @func_6314() /* ty=Tensor[(88), float64] */;
  %650 = cast(%649, dtype="float32") /* ty=Tensor[(88), float32] */;
  sqrt(%650) /* ty=Tensor[(88), float32] */
}

def @func_5675() -> (Tensor[(88), float64],) {
  %651 = @func_4179() /* ty=Tensor[(88), float64] */;
  (%651,)
}

def @func_7106(%var_7101: Tensor[(16, 12, 10), float32]) -> (Tensor[(16, 12, 10), float32],) {
  %652 = cast(%var_7101, dtype="float32") /* ty=Tensor[(16, 12, 10), float32] */;
  %653 = tan(%652) /* ty=Tensor[(16, 12, 10), float32] */;
  (%653,)
}

def @func_141(%var_138: Tensor[(8, 7, 13), float32]) -> (Tensor[(8, 7, 13), float32],) {
  %654 = cast(%var_138, dtype="float32") /* ty=Tensor[(8, 7, 13), float32] */;
  %655 = atan(%654) /* ty=Tensor[(8, 7, 13), float32] */;
  (%655,)
}

def @func_3102(%var_3100: Tensor[(360), float32]) -> (Tensor[(11, 2, 11), float32], Tensor[(6, 15, 4), bool], Tensor[(360), float32]) {
  %656 = @func_2570() /* ty=(Tensor[(11, 2, 11), float32],) */;
  %657 = cast(%var_3100, dtype="float32") /* ty=Tensor[(360), float32] */;
  %658 = reshape(%657, newshape=[15, 12, 2]) /* ty=Tensor[(15, 12, 2), float32] */;
  %659 = @func_2293(%658) /* ty=(Tensor[(6, 15, 4), bool], Tensor[(24), bool], Tensor[(6, 15, 4), bool], Tensor[(11, 2, 11), int8], Tensor[(15, 12, 2), float32]) */;
  %660 = %656.0;
  %661 = %659.2;
  (%660, %661, %var_3100)
}

def @func_4421() -> Tensor[(11, 2, 11), uint8] {
  %662 = @func_1885() /* ty=(Tensor[(11, 2, 11), float32], Tensor[(10, 8, 11), int8], Tensor[(88), float64], Tensor[(880), float64]) */;
  %663 = %662.0;
  %664 = cast(meta[relay.Constant][52] /* ty=Tensor[(11, 2, 11), float32] */, dtype="uint8") /* ty=Tensor[(11, 2, 11), uint8] */;
  %665 = shape_of(%663, dtype="int32") /* ty=Tensor[(3), int32] */;
  %666 = cast(%663, dtype="uint8") /* ty=Tensor[(11, 2, 11), uint8] */;
  %667 = dyn.reshape(%664, %665, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  right_shift(%666, %667) /* ty=Tensor[(11, 2, 11), uint8] */
}

def @func_3510() -> (Tensor[(88), float64],) {
  %668 = @func_3358() /* ty=Tensor[(88), float64] */;
  %669 = cast(%668, dtype="float32") /* ty=Tensor[(88), float32] */;
  %670 = acos(%669) /* ty=Tensor[(88), float32] */;
  %671 = cast(%670, dtype="float32") /* ty=Tensor[(88), float32] */;
  %672 = atanh(%671) /* ty=Tensor[(88), float32] */;
  %673 = cast(%672, dtype="float64") /* ty=Tensor[(88), float64] */;
  %674 = cos(%673) /* ty=Tensor[(88), float64] */;
  (%674,)
}

def @func_1485(%var_1478: Tensor[(6, 1, 4), bool], %var_1479: Tensor[(6, 15, 4), bool]) -> (Tensor[(6, 15, 4), bool],) {
  %675 = cast(%var_1478, dtype="bool") /* ty=Tensor[(6, 1, 4), bool] */;
  %676 = cast(%var_1479, dtype="bool") /* ty=Tensor[(6, 15, 4), bool] */;
  %677 = logical_or(%675, %676) /* ty=Tensor[(6, 15, 4), bool] */;
  (%677,)
}

def @func_6314() -> Tensor[(88), float64] {
  %678 = @func_3510() /* ty=(Tensor[(88), float64],) */;
  %678.0
}

def @func_6760() -> (Tensor[(11, 2, 11), float64],) {
  %679 = @func_5698() /* ty=(Tensor[(11, 2, 11), float64], Tensor[(11, 2, 11), float64]) */;
  %680 = %679.1;
  (%680,)
}

def @func_4179() -> Tensor[(88), float64] {
  %681 = @func_3510() /* ty=(Tensor[(88), float64],) */;
  %681.0
}

def @func_5303() -> Tensor[(3, 3, 3), bool] {
  %682 = @func_2318() /* ty=(Tensor[(3, 3, 3), bool],) */;
  %682.0
}

def @func_3304(%var_3299: Tensor[(360), float32]) -> (Tensor[(6, 11, 8), float32], Tensor[(360), float32], Tensor[(360), float32], Tensor[(16, 2), bool]) {
  %683 = @func_2162() /* ty=(Tensor[(6, 11, 8), float32], Tensor[(24, 22), uint32], Tensor[(11, 2, 11), int8]) */;
  %684 = cast(%var_3299, dtype="float32") /* ty=Tensor[(360), float32] */;
  %685 = cast(meta[relay.Constant][53] /* ty=Tensor[(16, 2), bool] */, dtype="bool") /* ty=Tensor[(16, 2), bool] */;
  %686 = reshape(%684, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %687 = reshape(%685, newshape=[32, 1]) /* ty=Tensor[(32, 1), bool] */;
  %688 = @func_3179(%686, %687) /* ty=(Tensor[(88), float64], Tensor[(11, 2, 11), float32], Tensor[(360), float32], Tensor[(6, 11, 8), float32], Tensor[(528), uint32], Tensor[(1, 2, 16), float32], Tensor[(32, 1), bool], Tensor[(288), bool]) */;
  %689 = %683.0;
  %690 = %688.2;
  (%689, %690, %var_3299, meta[relay.Constant][53] /* ty=Tensor[(16, 2), bool] */)
}

def @func_367(%var_344: Tensor[(1, 2, 16), bool], %var_345: Tensor[(9, 2, 16), bool]) -> (Tensor[(9, 2, 16), bool], Tensor[(1, 2, 16), float32]) {
  %691 = cast(%var_344, dtype="bool") /* ty=Tensor[(1, 2, 16), bool] */;
  %692 = cast(%var_345, dtype="bool") /* ty=Tensor[(9, 2, 16), bool] */;
  %693 = cast(%var_344, dtype="float32") /* ty=Tensor[(1, 2, 16), float32] */;
  %694 = logical_or(%691, %692) /* ty=Tensor[(9, 2, 16), bool] */;
  %695 = log10(%693) /* ty=Tensor[(1, 2, 16), float32] */;
  (%694, %695)
}

def @func_5353() -> (Tensor[(88), float64], Tensor[(8, 6, 6), float32], Tensor[(144, 2), float32], Tensor[(8, 7, 16), int32], Tensor[(896), int16]) {
  %696 = @func_3431() /* ty=(Tensor[(88), float64],) */;
  %697 = cast(meta[relay.Constant][54] /* ty=Tensor[(144, 2), float32] */, dtype="float32") /* ty=Tensor[(144, 2), float32] */;
  %698 = reshape(%697, newshape=[8, 6, 6]) /* ty=Tensor[(8, 6, 6), float32] */;
  %699 = @func_1390(%698) /* ty=(Tensor[(8, 6, 6), float32],) */;
  %700 = cast(meta[relay.Constant][55] /* ty=Tensor[(896), int16] */, dtype="int16") /* ty=Tensor[(896), int16] */;
  %701 = cast(meta[relay.Constant][55] /* ty=Tensor[(896), int16] */, dtype="float32") /* ty=Tensor[(896), float32] */;
  %702 = reshape(%700, newshape=[896]) /* ty=Tensor[(896), int16] */;
  %703 = reshape(%701, newshape=[8, 7, 16]) /* ty=Tensor[(8, 7, 16), float32] */;
  %704 = @func_2136(%702, %703) /* ty=(Tensor[(10, 8, 11), int8], Tensor[(896), int16], Tensor[(11, 2, 11), float32], Tensor[(8, 7, 16), int32]) */;
  %705 = %696.0;
  %706 = %699.0;
  %707 = %704.3;
  (%705, %706, meta[relay.Constant][54] /* ty=Tensor[(144, 2), float32] */, %707, meta[relay.Constant][55] /* ty=Tensor[(896), int16] */)
}

def @func_3965() -> Tensor[(24, 22), uint32] {
  %708 = @func_2162() /* ty=(Tensor[(6, 11, 8), float32], Tensor[(24, 22), uint32], Tensor[(11, 2, 11), int8]) */;
  %708.1
}

def @func_4727() -> (Tensor[(11, 2, 11), uint8], Tensor[(360), float64], Tensor[(11, 2, 11), float64], Tensor[(88), float64], Tensor[(8, 6, 6), float32], Tensor[(288), float32]) {
  %709 = @func_4680() /* ty=(Tensor[(130), int32], Tensor[(360), float32], Tensor[(11, 2, 11), float32], Tensor[(360), float64]) */;
  %710 = %709.1;
  %711 = cast(%710, dtype="float64") /* ty=Tensor[(360), float64] */;
  %712 = @func_1655() /* ty=Tensor[(11, 2, 11), float32] */;
  %713 = cast(%712, dtype="float64") /* ty=Tensor[(11, 2, 11), float64] */;
  %714 = @func_3540() /* ty=(Tensor[(88), float64],) */;
  %715 = cast(meta[relay.Constant][56] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %716 = reshape(%715, newshape=[8, 6, 6]) /* ty=Tensor[(8, 6, 6), float32] */;
  %717 = @func_1390(%716) /* ty=(Tensor[(8, 6, 6), float32],) */;
  %718 = @func_4421() /* ty=Tensor[(11, 2, 11), uint8] */;
  %719 = cos(%711) /* ty=Tensor[(360), float64] */;
  %720 = acosh(%713) /* ty=Tensor[(11, 2, 11), float64] */;
  %721 = %714.0;
  %722 = %717.0;
  (%718, %719, %720, %721, %722, meta[relay.Constant][56] /* ty=Tensor[(288), float32] */)
}

def @func_6689() -> (Tensor[(3, 3, 3), bool],) {
  %723 = @func_5303() /* ty=Tensor[(3, 3, 3), bool] */;
  (%723,)
}

def @func_2984(%var_2957: Tensor[(24), bool], %var_2958: Tensor[(1, 360), bool], %var_2961: Tensor[(88), float64]) -> (Tensor[(78), int16], Tensor[(6, 15, 4), bool], Tensor[(24), bool], Tensor[(1, 360), bool], Tensor[(1, 8, 11), float64], Tensor[(88), float64], Tensor[(880), float64]) {
  %724 = @func_2641() /* ty=(Tensor[(11, 2, 11), float32], Tensor[(3, 3, 3), bool], Tensor[(728, 1), float32], Tensor[(130), float32], Tensor[(78), int16], Tensor[(728), float32]) */;
  %725 = cast(%var_2957, dtype="bool") /* ty=Tensor[(24), bool] */;
  %726 = cast(%var_2958, dtype="bool") /* ty=Tensor[(1, 360), bool] */;
  %727 = reshape(%725, newshape=[6, 1, 4]) /* ty=Tensor[(6, 1, 4), bool] */;
  %728 = reshape(%726, newshape=[6, 15, 4]) /* ty=Tensor[(6, 15, 4), bool] */;
  %729 = @func_1485(%727, %728) /* ty=(Tensor[(6, 15, 4), bool],) */;
  %730 = cast(%var_2961, dtype="float64") /* ty=Tensor[(88), float64] */;
  %731 = cast(meta[relay.Constant][57] /* ty=Tensor[(880), float64] */, dtype="float64") /* ty=Tensor[(880), float64] */;
  %732 = reshape(%730, newshape=[1, 8, 11]) /* ty=Tensor[(1, 8, 11), float64] */;
  %733 = reshape(%731, newshape=[10, 8, 11]) /* ty=Tensor[(10, 8, 11), float64] */;
  %734 = @func_454(%732, %733) /* ty=(Tensor[(1, 8, 11), float64], Tensor[(10, 8, 11), int8]) */;
  %735 = cast(meta[relay.Constant][57] /* ty=Tensor[(880), float64] */, dtype="float64") /* ty=Tensor[(880), float64] */;
  %736 = %724.4;
  %737 = %729.0;
  %738 = %734.0;
  %739 = atan(%735) /* ty=Tensor[(880), float64] */;
  (%736, %737, %var_2957, %var_2958, %738, %var_2961, %739)
}

def @func_7308() -> (Tensor[(11, 2, 11), uint8],) {
  %740 = @func_4791() /* ty=Tensor[(11, 2, 11), uint8] */;
  (%740,)
}

def @func_4904(%var_4842: Tensor[(360), float32], %var_4878: Tensor[(288), float32]) -> (Tensor[(16, 2), bool], Tensor[(360), float32], Tensor[(3, 3, 3), bool], Tensor[(288), float32], Tensor[(24, 22), bool], Tensor[(88), float64], Tensor[(11, 2, 11), float32], Tensor[(24, 22), uint16]) {
  %741 = cast(%var_4842, dtype="float32") /* ty=Tensor[(360), float32] */;
  %742 = reshape(%741, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %743 = @func_3304(%742) /* ty=(Tensor[(6, 11, 8), float32], Tensor[(360), float32], Tensor[(360), float32], Tensor[(16, 2), bool]) */;
  %744 = cast(%var_4878, dtype="float32") /* ty=Tensor[(288), float32] */;
  %745 = reshape(%744, newshape=[288]) /* ty=Tensor[(288), float32] */;
  %746 = @func_2754(%745) /* ty=(Tensor[(3, 3, 3), bool], Tensor[(?, 728), bool], Tensor[(8, 6, 6), float32], Tensor[(288), float32]) */;
  %747 = @func_3965() /* ty=Tensor[(24, 22), uint32] */;
  %748 = cast(meta[relay.Constant][58] /* ty=Tensor[(24, 22), uint32] */, dtype="float32") /* ty=Tensor[(24, 22), float32] */;
  %749 = shape_of(%747, dtype="int32") /* ty=Tensor[(2), int32] */;
  %750 = cast(%747, dtype="float32") /* ty=Tensor[(24, 22), float32] */;
  %751 = dyn.reshape(%748, %749, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %752 = power(%750, %751) /* ty=Tensor[(24, 22), float32] */;
  %753 = cast(%752, dtype="float32") /* ty=Tensor[(24, 22), float32] */;
  %754 = sinh(%753) /* ty=Tensor[(24, 22), float32] */;
  %755 = cast(%754, dtype="float32") /* ty=Tensor[(24, 22), float32] */;
  %756 = erf(%755) /* ty=Tensor[(24, 22), float32] */;
  %757 = cast(%754, dtype="bool") /* ty=Tensor[(24, 22), bool] */;
  %758 = shape_of(%756, dtype="int32") /* ty=Tensor[(2), int32] */;
  %759 = cast(%756, dtype="bool") /* ty=Tensor[(24, 22), bool] */;
  %760 = dyn.reshape(%757, %758, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %761 = cast(%752, dtype="uint16") /* ty=Tensor[(24, 22), uint16] */;
  %762 = shape_of(%754, dtype="int32") /* ty=Tensor[(2), int32] */;
  %763 = cast(%754, dtype="uint16") /* ty=Tensor[(24, 22), uint16] */;
  %764 = dyn.reshape(%761, %762, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %765 = %743.3;
  %766 = %746.0;
  %767 = less_equal(%759, %760) /* ty=Tensor[(24, 22), bool] */;
  %768 = @func_4263() /* ty=Tensor[(88), float64] */;
  %769 = @func_1620() /* ty=Tensor[(11, 2, 11), float32] */;
  %770 = add(%763, %764) /* ty=Tensor[(24, 22), uint16] */;
  (%765, %var_4842, %766, %var_4878, %767, %768, %769, %770)
}

def @func_5535(%var_5472: Tensor[(11, 2, 11), uint8], %var_5485: Tensor[(11, 2, 11), int32], %var_5501: Tensor[(288), float32]) -> (Tensor[(11, 2, 11), bool], Tensor[(8, 6, 6), float32], Tensor[(288), float32], Tensor[(32), bool], Tensor[(8, 6, 6), float32], Tensor[(11, 2, 11), float64], Tensor[(6, 15, 4), bool], Tensor[(24), bool], Tensor[(2, 180), bool]) {
  %771 = @func_4421() /* ty=Tensor[(11, 2, 11), uint8] */;
  %772 = cast(%var_5472, dtype="int32") /* ty=Tensor[(11, 2, 11), int32] */;
  %773 = shape_of(%771, dtype="int32") /* ty=Tensor[(3), int32] */;
  %774 = cast(%771, dtype="int32") /* ty=Tensor[(11, 2, 11), int32] */;
  %775 = dyn.reshape(%772, %773, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %776 = bitwise_and(%774, %775) /* ty=Tensor[(11, 2, 11), int32] */;
  %777 = cast(%var_5485, dtype="bool") /* ty=Tensor[(11, 2, 11), bool] */;
  %778 = shape_of(%776, dtype="int32") /* ty=Tensor[(3), int32] */;
  %779 = cast(%776, dtype="bool") /* ty=Tensor[(11, 2, 11), bool] */;
  %780 = dyn.reshape(%777, %778, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %781 = cast(%var_5501, dtype="float32") /* ty=Tensor[(288), float32] */;
  %782 = cast(%var_5472, dtype="float32") /* ty=Tensor[(11, 2, 11), float32] */;
  %783 = reshape(%781, newshape=[288]) /* ty=Tensor[(288), float32] */;
  %784 = reshape(%782, newshape=[11, 2, 11]) /* ty=Tensor[(11, 2, 11), float32] */;
  %785 = @func_2372(%783, %784) /* ty=(Tensor[(11, 2, 11), float32], Tensor[(8, 6, 6), float32], Tensor[(288), float32], Tensor[(11, 2, 11), uint64]) */;
  %786 = %785.1;
  %787 = cast(%786, dtype="float32") /* ty=Tensor[(8, 6, 6), float32] */;
  %788 = reshape(%787, newshape=[8, 6, 6]) /* ty=Tensor[(8, 6, 6), float32] */;
  %789 = @func_1390(%788) /* ty=(Tensor[(8, 6, 6), float32],) */;
  %790 = cast(meta[relay.Constant][59] /* ty=Tensor[(32), bool] */, dtype="bool") /* ty=Tensor[(32), bool] */;
  %791 = cast(%786, dtype="bool") /* ty=Tensor[(8, 6, 6), bool] */;
  %792 = reshape(%790, newshape=[32]) /* ty=Tensor[(32), bool] */;
  %793 = reshape(%791, newshape=[288]) /* ty=Tensor[(288), bool] */;
  %794 = @func_2907(%792, %793) /* ty=(Tensor[(88), float64], Tensor[(8, 7, 13), float32], Tensor[(1, 2, 16), float32], Tensor[(32), bool], Tensor[(288), bool], Tensor[(11, 2, 11), float32], Tensor[(728), float32], Tensor[(11, 2, 11), float32]) */;
  %795 = %794.7;
  %796 = cast(%795, dtype="float64") /* ty=Tensor[(11, 2, 11), float64] */;
  %797 = cast(meta[relay.Constant][60] /* ty=Tensor[(24), bool] */, dtype="bool") /* ty=Tensor[(24), bool] */;
  %798 = cast(meta[relay.Constant][61] /* ty=Tensor[(2, 180), bool] */, dtype="bool") /* ty=Tensor[(2, 180), bool] */;
  %799 = reshape(%797, newshape=[6, 1, 4]) /* ty=Tensor[(6, 1, 4), bool] */;
  %800 = reshape(%798, newshape=[6, 15, 4]) /* ty=Tensor[(6, 15, 4), bool] */;
  %801 = @func_1485(%799, %800) /* ty=(Tensor[(6, 15, 4), bool],) */;
  %802 = logical_and(%779, %780) /* ty=Tensor[(11, 2, 11), bool] */;
  %803 = %789.0;
  %804 = cosh(%796) /* ty=Tensor[(11, 2, 11), float64] */;
  %805 = %801.0;
  (%802, %786, %var_5501, meta[relay.Constant][59] /* ty=Tensor[(32), bool] */, %803, %804, %805, meta[relay.Constant][60] /* ty=Tensor[(24), bool] */, meta[relay.Constant][61] /* ty=Tensor[(2, 180), bool] */)
}

def @func_4263() -> Tensor[(88), float64] {
  %806 = @func_4236() /* ty=(Tensor[(88), float64], Tensor[(11, 2, 11), float32]) */;
  %806.0
}

def @func_1590() -> (Tensor[(11, 2, 11), float32],) {
  %807 = @func_1561() /* ty=Tensor[(11, 2, 11), float32] */;
  (%807,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1563() -> Tensor[(11, 2, 11), float32] {
  @func_1561() /* ty=Tensor[(11, 2, 11), float32] */
}

def @func_4423() -> Tensor[(11, 2, 11), uint8] {
  @func_4421() /* ty=Tensor[(11, 2, 11), uint8] */
}

def @func_992(%var_987: Tensor[(2, 10, 10), int32], %var_988: Tensor[(728), float32], %var_989: Tensor[(288), bool], %var_990: Tensor[(880), float64], %var_991: Tensor[(91, 6), int16]) -> (Tensor[(2, 10, 10), int32], Tensor[(2, 10, 10), float64], Tensor[(8, 7, 13), float32], Tensor[(728), float32], Tensor[(32), bool], Tensor[(288), bool], Tensor[(10, 8, 11), int8], Tensor[(88), float64], Tensor[(880), float64], Tensor[(8, 7, 13), float32], Tensor[(13, 6), int16], Tensor[(91, 6), int16], Tensor[(1, 2, 16), float32]) {
  %33 = fn (%var_924: Tensor[(2, 10, 10), int32], %var_950: Tensor[(728), float32], %var_961: Tensor[(288), bool], %var_966: Tensor[(880), float64], %var_970: Tensor[(91, 6), int16]) -> (Tensor[(2, 10, 10), int32], Tensor[(2, 10, 10), float64], Tensor[(8, 7, 13), float32], Tensor[(728), float32], Tensor[(32), bool], Tensor[(288), bool], Tensor[(10, 8, 11), int8], Tensor[(88), float64], Tensor[(880), float64], Tensor[(8, 7, 13), float32], Tensor[(13, 6), int16], Tensor[(91, 6), int16], Tensor[(1, 2, 16), float32]) {
    %0 = cast(%var_924, dtype="int32") /* ty=Tensor[(2, 10, 10), int32] */;
    %1 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(2, 10, 10), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 10, 10), int32] */, dtype="int32") /* ty=Tensor[(2, 10, 10), int32] */;
    %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %4 = cast(%var_924, dtype="float64") /* ty=Tensor[(2, 10, 10), float64] */;
    %5 = cast(%var_950, dtype="float32") /* ty=Tensor[(728), float32] */;
    %6 = reshape(%5, newshape=[8, 7, 13]) /* ty=Tensor[(8, 7, 13), float32] */;
    %7 = @func_141(%6) /* ty=(Tensor[(8, 7, 13), float32],) */;
    %8 = cast(meta[relay.Constant][2] /* ty=Tensor[(88), float64] */, dtype="float64") /* ty=Tensor[(88), float64] */;
    %9 = cast(%var_966, dtype="float64") /* ty=Tensor[(880), float64] */;
    %10 = reshape(%8, newshape=[1, 8, 11]) /* ty=Tensor[(1, 8, 11), float64] */;
    %11 = reshape(%9, newshape=[10, 8, 11]) /* ty=Tensor[(10, 8, 11), float64] */;
    %12 = @func_454(%10, %11) /* ty=(Tensor[(1, 8, 11), float64], Tensor[(10, 8, 11), int8]) */;
    %13 = cast(meta[relay.Constant][3] /* ty=Tensor[(13, 6), int16] */, dtype="int16") /* ty=Tensor[(13, 6), int16] */;
    %14 = cast(%var_970, dtype="int16") /* ty=Tensor[(91, 6), int16] */;
    %15 = %7.0;
    %16 = cast(%15, dtype="float32") /* ty=Tensor[(8, 7, 13), float32] */;
    %17 = reshape(%13, newshape=[6, 1, 13]) /* ty=Tensor[(6, 1, 13), int16] */;
    %18 = reshape(%14, newshape=[6, 7, 13]) /* ty=Tensor[(6, 7, 13), int16] */;
    %19 = reshape(%16, newshape=[1, 728]) /* ty=Tensor[(1, 728), float32] */;
    %20 = @func_219(%17, %18, %19) /* ty=(Tensor[(6, 7, 13), int16], Tensor[(8, 7, 13), float32], Tensor[(1, 728), float32], Tensor[(8, 7, 13), float32], Tensor[(8, 7, 13), float32], Tensor[(8, 7, 13), float32]) */;
    %21 = cast(meta[relay.Constant][1] /* ty=Tensor[(32), bool] */, dtype="bool") /* ty=Tensor[(32), bool] */;
    %22 = cast(%var_961, dtype="bool") /* ty=Tensor[(288), bool] */;
    %23 = reshape(%21, newshape=[1, 2, 16]) /* ty=Tensor[(1, 2, 16), bool] */;
    %24 = reshape(%22, newshape=[9, 2, 16]) /* ty=Tensor[(9, 2, 16), bool] */;
    %25 = @func_367(%23, %24) /* ty=(Tensor[(9, 2, 16), bool], Tensor[(1, 2, 16), float32]) */;
    %26 = %25.1;
    %27 = cast(%26, dtype="float32") /* ty=Tensor[(1, 2, 16), float32] */;
    %28 = minimum(%2, %3) /* ty=Tensor[(2, 10, 10), int32] */;
    %29 = log2(%4) /* ty=Tensor[(2, 10, 10), float64] */;
    %30 = %12.1;
    %31 = %20.1;
    %32 = sin(%27) /* ty=Tensor[(1, 2, 16), float32] */;
    (%28, %29, %15, %var_950, meta[relay.Constant][1] /* ty=Tensor[(32), bool] */, %var_961, %30, meta[relay.Constant][2] /* ty=Tensor[(88), float64] */, %var_966, %31, meta[relay.Constant][3] /* ty=Tensor[(13, 6), int16] */, %var_970, %32)
  };
  %33(%var_987, %var_988, %var_989, %var_990, %var_991) /* ty=(Tensor[(2, 10, 10), int32], Tensor[(2, 10, 10), float64], Tensor[(8, 7, 13), float32], Tensor[(728), float32], Tensor[(32), bool], Tensor[(288), bool], Tensor[(10, 8, 11), int8], Tensor[(88), float64], Tensor[(880), float64], Tensor[(8, 7, 13), float32], Tensor[(13, 6), int16], Tensor[(91, 6), int16], Tensor[(1, 2, 16), float32]) */
}

def @func_3786(%var_3721: Tensor[(288), float32]) -> (Tensor[(3, 3, 3), bool], Tensor[(180), uint16], Tensor[(8, 6, 6), float32], Tensor[(288), float32], Tensor[(11, 2, 11), float32], Tensor[(88), float64]) {
  %34 = @func_2318() /* ty=(Tensor[(3, 3, 3), bool],) */;
  %35 = @func_2935() /* ty=(Tensor[(11, 2, 11), float32], Tensor[(12, 4, 15), uint16], Tensor[(180), uint16]) */;
  %36 = cast(%var_3721, dtype="float32") /* ty=Tensor[(288), float32] */;
  %37 = reshape(%36, newshape=[288]) /* ty=Tensor[(288), float32] */;
  %38 = @func_2754(%37) /* ty=(Tensor[(3, 3, 3), bool], Tensor[(?, 728), bool], Tensor[(8, 6, 6), float32], Tensor[(288), float32]) */;
  %39 = %34.0;
  %40 = %35.2;
  %41 = %38.2;
  %42 = @func_1561() /* ty=Tensor[(11, 2, 11), float32] */;
  %43 = @func_2402() /* ty=Tensor[(88), float64] */;
  (%39, %40, %41, %var_3721, %42, %43)
}

def @func_6241(%var_6239: Tensor[(288), float32]) -> (Tensor[(360), float64], Tensor[(3, 3, 3), bool], Tensor[(288), float32]) {
  @func_6238(%var_6239) /* ty=(Tensor[(360), float64], Tensor[(3, 3, 3), bool], Tensor[(288), float32]) */
}

def @func_3432() -> (Tensor[(88), float64],) {
  %46 = fn () -> (Tensor[(88), float64],) {
    %44 = @func_1885() /* ty=(Tensor[(11, 2, 11), float32], Tensor[(10, 8, 11), int8], Tensor[(88), float64], Tensor[(880), float64]) */;
    %45 = %44.2;
    (%45,)
  };
  %46() /* ty=(Tensor[(88), float64],) */
}

def @func_6689() -> (Tensor[(3, 3, 3), bool],) {
  %47 = @func_5303() /* ty=Tensor[(3, 3, 3), bool] */;
  (%47,)
}

def @func_3540() -> (Tensor[(88), float64],) {
  %48 = @func_3358() /* ty=Tensor[(88), float64] */;
  (%48,)
}

def @func_6992() -> (Tensor[(88), float64],) {
  @func_6990() /* ty=(Tensor[(88), float64],) */
}

def @main(%var_7392: int64, %var_7393: Tensor[(14, 5, 15), int64]) -> Tensor[(14, 5, 15), int64] {
  %49 = cast(%var_7392, dtype="int64") /* ty=int64 */;
  %50 = cast(%var_7393, dtype="int64") /* ty=Tensor[(14, 5, 15), int64] */;
  logical_xor(%49, %50) /* ty=Tensor[(14, 5, 15), int64] */
}

def @func_5975() -> Tensor[(13, 12, 4), float32] {
  %51 = @func_4135() /* ty=(Tensor[(10, 8, 11), int8], Tensor[(13, 12, 4), uint64]) */;
  %52 = %51.1;
  %53 = cast(%52, dtype="float32") /* ty=Tensor[(13, 12, 4), float32] */;
  atan(%53) /* ty=Tensor[(13, 12, 4), float32] */
}

def @func_2372(%var_2344: Tensor[(288), float32], %var_2354: Tensor[(11, 2, 11), float32]) -> (Tensor[(11, 2, 11), float32], Tensor[(8, 6, 6), float32], Tensor[(288), float32], Tensor[(11, 2, 11), uint64]) {
  %54 = cast(%var_2344, dtype="float32") /* ty=Tensor[(288), float32] */;
  %55 = reshape(%54, newshape=[8, 6, 6]) /* ty=Tensor[(8, 6, 6), float32] */;
  %56 = @func_1390(%55) /* ty=(Tensor[(8, 6, 6), float32],) */;
  %57 = @func_1590() /* ty=(Tensor[(11, 2, 11), float32],) */;
  %58 = %57.0;
  %59 = cast(%var_2354, dtype="uint64") /* ty=Tensor[(11, 2, 11), uint64] */;
  %60 = shape_of(%58, dtype="int32") /* ty=Tensor[(3), int32] */;
  %61 = cast(%58, dtype="uint64") /* ty=Tensor[(11, 2, 11), uint64] */;
  %62 = dyn.reshape(%59, %60, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %63 = @func_1655() /* ty=Tensor[(11, 2, 11), float32] */;
  %64 = %56.0;
  %65 = bitwise_or(%61, %62) /* ty=Tensor[(11, 2, 11), uint64] */;
  (%63, %64, %var_2344, %65)
}

def @func_3596(%var_3594: Tensor[(6, 3, 1), bool], %var_3595: Tensor[(6, 3, 11), bool]) -> (Tensor[(6, 3, 11), bool], Tensor[(6, 3, 11), bool]) {
  %84 = fn (%var_3551: Tensor[(6, 3, 1), bool], %var_3552: Tensor[(6, 3, 11), bool]) -> (Tensor[(6, 3, 11), bool], Tensor[(6, 3, 11), bool]) {
    %66 = cast(%var_3552, dtype="float32") /* ty=Tensor[(6, 3, 11), float32] */;
    %67 = log(%66) /* ty=Tensor[(6, 3, 11), float32] */;
    %68 = cast(%var_3552, dtype="bool") /* ty=Tensor[(6, 3, 11), bool] */;
    %69 = shape_of(%67, dtype="int32") /* ty=Tensor[(3), int32] */;
    %70 = cast(%67, dtype="bool") /* ty=Tensor[(6, 3, 11), bool] */;
    %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %72 = cast(%var_3551, dtype="bool") /* ty=Tensor[(6, 3, 1), bool] */;
    %73 = cast(%var_3552, dtype="bool") /* ty=Tensor[(6, 3, 11), bool] */;
    %74 = logical_or(%72, %73) /* ty=Tensor[(6, 3, 11), bool] */;
    %75 = cast(%var_3551, dtype="int32") /* ty=Tensor[(6, 3, 1), int32] */;
    %76 = cast(%74, dtype="int32") /* ty=Tensor[(6, 3, 11), int32] */;
    %77 = multiply(%75, %76) /* ty=Tensor[(6, 3, 11), int32] */;
    %78 = cast(%77, dtype="bool") /* ty=Tensor[(6, 3, 11), bool] */;
    %79 = shape_of(%67, dtype="int32") /* ty=Tensor[(3), int32] */;
    %80 = cast(%67, dtype="bool") /* ty=Tensor[(6, 3, 11), bool] */;
    %81 = dyn.reshape(%78, %79, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %82 = not_equal(%70, %71) /* ty=Tensor[(6, 3, 11), bool] */;
    %83 = greater_equal(%80, %81) /* ty=Tensor[(6, 3, 11), bool] */;
    (%82, %83)
  };
  %84(%var_3594, %var_3595) /* ty=(Tensor[(6, 3, 11), bool], Tensor[(6, 3, 11), bool]) */
}

def @func_6464() -> (Tensor[(11, 2, 11), uint8], Tensor[(6, 11, 8), float32]) {
  %88 = fn () -> (Tensor[(11, 2, 11), uint8], Tensor[(6, 11, 8), float32]) {
    %85 = @func_2162() /* ty=(Tensor[(6, 11, 8), float32], Tensor[(24, 22), uint32], Tensor[(11, 2, 11), int8]) */;
    %86 = @func_5361() /* ty=Tensor[(11, 2, 11), uint8] */;
    %87 = %85.0;
    (%86, %87)
  };
  %88() /* ty=(Tensor[(11, 2, 11), uint8], Tensor[(6, 11, 8), float32]) */
}

def @func_3385() -> (Tensor[(11, 2, 11), float32],) {
  @func_3383() /* ty=(Tensor[(11, 2, 11), float32],) */
}

def @func_6238(%var_6210: Tensor[(288), float32]) -> (Tensor[(360), float64], Tensor[(3, 3, 3), bool], Tensor[(288), float32]) {
  %89 = @func_5868() /* ty=(Tensor[(360), float64],) */;
  %90 = cast(%var_6210, dtype="float32") /* ty=Tensor[(288), float32] */;
  %91 = reshape(%90, newshape=[288]) /* ty=Tensor[(288), float32] */;
  %92 = @func_2754(%91) /* ty=(Tensor[(3, 3, 3), bool], Tensor[(?, 728), bool], Tensor[(8, 6, 6), float32], Tensor[(288), float32]) */;
  %93 = %89.0;
  %94 = %92.0;
  (%93, %94, %var_6210)
}

def @func_2570() -> (Tensor[(11, 2, 11), float32],) {
  %95 = @func_1885() /* ty=(Tensor[(11, 2, 11), float32], Tensor[(10, 8, 11), int8], Tensor[(88), float64], Tensor[(880), float64]) */;
  %96 = %95.0;
  (%96,)
}

def @func_1819(%var_1800: Tensor[(11, 2, 11), float32]) -> (Tensor[(11, 2, 11), float64], Tensor[(11, 2, 11), bool], Tensor[(11, 2, 11), int64]) {
  %97 = @func_1655() /* ty=Tensor[(11, 2, 11), float32] */;
  %98 = cast(%var_1800, dtype="float64") /* ty=Tensor[(11, 2, 11), float64] */;
  %99 = shape_of(%97, dtype="int32") /* ty=Tensor[(3), int32] */;
  %100 = cast(%97, dtype="float64") /* ty=Tensor[(11, 2, 11), float64] */;
  %101 = dyn.reshape(%98, %99, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %102 = cast(meta[relay.Constant][4] /* ty=Tensor[(11, 2, 11), float32] */, dtype="bool") /* ty=Tensor[(11, 2, 11), bool] */;
  %103 = shape_of(%var_1800, dtype="int32") /* ty=Tensor[(3), int32] */;
  %104 = cast(%var_1800, dtype="bool") /* ty=Tensor[(11, 2, 11), bool] */;
  %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %106 = cast(%var_1800, dtype="int64") /* ty=Tensor[(11, 2, 11), int64] */;
  %107 = shape_of(%97, dtype="int32") /* ty=Tensor[(3), int32] */;
  %108 = cast(%97, dtype="int64") /* ty=Tensor[(11, 2, 11), int64] */;
  %109 = dyn.reshape(%106, %107, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %110 = minimum(%100, %101) /* ty=Tensor[(11, 2, 11), float64] */;
  %111 = logical_or(%104, %105) /* ty=Tensor[(11, 2, 11), bool] */;
  %112 = multiply(%108, %109) /* ty=Tensor[(11, 2, 11), int64] */;
  (%110, %111, %112)
}

def @func_5354() -> (Tensor[(88), float64], Tensor[(8, 6, 6), float32], Tensor[(144, 2), float32], Tensor[(8, 7, 16), int32], Tensor[(896), int16]) {
  %125 = fn () -> (Tensor[(88), float64], Tensor[(8, 6, 6), float32], Tensor[(144, 2), float32], Tensor[(8, 7, 16), int32], Tensor[(896), int16]) {
    %113 = @func_3431() /* ty=(Tensor[(88), float64],) */;
    %114 = cast(meta[relay.Constant][5] /* ty=Tensor[(144, 2), float32] */, dtype="float32") /* ty=Tensor[(144, 2), float32] */;
    %115 = reshape(%114, newshape=[8, 6, 6]) /* ty=Tensor[(8, 6, 6), float32] */;
    %116 = @func_1390(%115) /* ty=(Tensor[(8, 6, 6), float32],) */;
    %117 = cast(meta[relay.Constant][6] /* ty=Tensor[(896), int16] */, dtype="int16") /* ty=Tensor[(896), int16] */;
    %118 = cast(meta[relay.Constant][6] /* ty=Tensor[(896), int16] */, dtype="float32") /* ty=Tensor[(896), float32] */;
    %119 = reshape(%117, newshape=[896]) /* ty=Tensor[(896), int16] */;
    %120 = reshape(%118, newshape=[8, 7, 16]) /* ty=Tensor[(8, 7, 16), float32] */;
    %121 = @func_2136(%119, %120) /* ty=(Tensor[(10, 8, 11), int8], Tensor[(896), int16], Tensor[(11, 2, 11), float32], Tensor[(8, 7, 16), int32]) */;
    %122 = %113.0;
    %123 = %116.0;
    %124 = %121.3;
    (%122, %123, meta[relay.Constant][5] /* ty=Tensor[(144, 2), float32] */, %124, meta[relay.Constant][6] /* ty=Tensor[(896), int16] */)
  };
  %125() /* ty=(Tensor[(88), float64], Tensor[(8, 6, 6), float32], Tensor[(144, 2), float32], Tensor[(8, 7, 16), int32], Tensor[(896), int16]) */
}

def @func_5623() -> (Tensor[(6, 11, 8), float64], Tensor[(24, 22), uint32], Tensor[(11, 2, 11), float32]) {
  %126 = @func_5039() /* ty=Tensor[(6, 11, 8), uint64] */;
  %127 = cast(%126, dtype="float64") /* ty=Tensor[(6, 11, 8), float64] */;
  %128 = sinh(%127) /* ty=Tensor[(6, 11, 8), float64] */;
  %129 = @func_3965() /* ty=Tensor[(24, 22), uint32] */;
  %130 = @func_5190() /* ty=Tensor[(11, 2, 11), float32] */;
  (%128, %129, %130)
}

def @func_1887() -> (Tensor[(11, 2, 11), float32], Tensor[(10, 8, 11), int8], Tensor[(88), float64], Tensor[(880), float64]) {
  @func_1885() /* ty=(Tensor[(11, 2, 11), float32], Tensor[(10, 8, 11), int8], Tensor[(88), float64], Tensor[(880), float64]) */
}

def @func_4320() -> Tensor[(130), int32] {
  %131 = @func_2641() /* ty=(Tensor[(11, 2, 11), float32], Tensor[(3, 3, 3), bool], Tensor[(728, 1), float32], Tensor[(130), float32], Tensor[(78), int16], Tensor[(728), float32]) */;
  %132 = %131.3;
  %133 = cast(meta[relay.Constant][7] /* ty=Tensor[(130), float32] */, dtype="float64") /* ty=Tensor[(130), float64] */;
  %134 = shape_of(%132, dtype="int32") /* ty=Tensor[(1), int32] */;
  %135 = cast(%132, dtype="float64") /* ty=Tensor[(130), float64] */;
  %136 = dyn.reshape(%133, %134, newshape=[]) /* ty=Tensor[(?), float64] */;
  %137 = floor_divide(%135, %136) /* ty=Tensor[(130), float64] */;
  %138 = cast(%132, dtype="int32") /* ty=Tensor[(130), int32] */;
  %139 = shape_of(%137, dtype="int32") /* ty=Tensor[(1), int32] */;
  %140 = cast(%137, dtype="int32") /* ty=Tensor[(130), int32] */;
  %141 = dyn.reshape(%138, %139, newshape=[]) /* ty=Tensor[(?), int32] */;
  bitwise_or(%140, %141) /* ty=Tensor[(130), int32] */
}

def @func_2984(%var_2957: Tensor[(24), bool], %var_2958: Tensor[(1, 360), bool], %var_2961: Tensor[(88), float64]) -> (Tensor[(78), int16], Tensor[(6, 15, 4), bool], Tensor[(24), bool], Tensor[(1, 360), bool], Tensor[(1, 8, 11), float64], Tensor[(88), float64], Tensor[(880), float64]) {
  %142 = @func_2641() /* ty=(Tensor[(11, 2, 11), float32], Tensor[(3, 3, 3), bool], Tensor[(728, 1), float32], Tensor[(130), float32], Tensor[(78), int16], Tensor[(728), float32]) */;
  %143 = cast(%var_2957, dtype="bool") /* ty=Tensor[(24), bool] */;
  %144 = cast(%var_2958, dtype="bool") /* ty=Tensor[(1, 360), bool] */;
  %145 = reshape(%143, newshape=[6, 1, 4]) /* ty=Tensor[(6, 1, 4), bool] */;
  %146 = reshape(%144, newshape=[6, 15, 4]) /* ty=Tensor[(6, 15, 4), bool] */;
  %147 = @func_1485(%145, %146) /* ty=(Tensor[(6, 15, 4), bool],) */;
  %148 = cast(%var_2961, dtype="float64") /* ty=Tensor[(88), float64] */;
  %149 = cast(meta[relay.Constant][8] /* ty=Tensor[(880), float64] */, dtype="float64") /* ty=Tensor[(880), float64] */;
  %150 = reshape(%148, newshape=[1, 8, 11]) /* ty=Tensor[(1, 8, 11), float64] */;
  %151 = reshape(%149, newshape=[10, 8, 11]) /* ty=Tensor[(10, 8, 11), float64] */;
  %152 = @func_454(%150, %151) /* ty=(Tensor[(1, 8, 11), float64], Tensor[(10, 8, 11), int8]) */;
  %153 = cast(meta[relay.Constant][8] /* ty=Tensor[(880), float64] */, dtype="float64") /* ty=Tensor[(880), float64] */;
  %154 = %142.4;
  %155 = %147.0;
  %156 = %152.0;
  %157 = atan(%153) /* ty=Tensor[(880), float64] */;
  (%154, %155, %var_2957, %var_2958, %156, %var_2961, %157)
}

def @func_3967() -> Tensor[(24, 22), uint32] {
  @func_3965() /* ty=Tensor[(24, 22), uint32] */
}

def @func_5004() -> Tensor[(11, 2, 11), float64] {
  %161 = fn () -> Tensor[(11, 2, 11), float64] {
    %158 = @func_3383() /* ty=(Tensor[(11, 2, 11), float32],) */;
    %159 = %158.0;
    %160 = cast(%159, dtype="float64") /* ty=Tensor[(11, 2, 11), float64] */;
    log(%160) /* ty=Tensor[(11, 2, 11), float64] */
  };
  %161() /* ty=Tensor[(11, 2, 11), float64] */
}

def @func_5303() -> Tensor[(3, 3, 3), bool] {
  %162 = @func_2318() /* ty=(Tensor[(3, 3, 3), bool],) */;
  %162.0
}

def @func_3105(%var_3103: Tensor[(360), float32]) -> (Tensor[(11, 2, 11), float32], Tensor[(6, 15, 4), bool], Tensor[(360), float32]) {
  @func_3102(%var_3103) /* ty=(Tensor[(11, 2, 11), float32], Tensor[(6, 15, 4), bool], Tensor[(360), float32]) */
}

def @func_4322() -> Tensor[(130), int32] {
  @func_4320() /* ty=Tensor[(130), int32] */
}

def @func_1081(%var_1061: Tensor[(12, 1, 15), uint16]) -> Tensor[(12, 4, 15), uint16] {
  %163 = cast(%var_1061, dtype="uint16") /* ty=Tensor[(12, 1, 15), uint16] */;
  %164 = cast(meta[relay.Constant][9] /* ty=Tensor[(12, 4, 15), uint16] */, dtype="uint16") /* ty=Tensor[(12, 4, 15), uint16] */;
  maximum(%163, %164) /* ty=Tensor[(12, 4, 15), uint16] */
}

def @func_5228() -> Tensor[(13, 12, 4), uint64] {
  %166 = fn () -> Tensor[(13, 12, 4), uint64] {
    %165 = @func_4135() /* ty=(Tensor[(10, 8, 11), int8], Tensor[(13, 12, 4), uint64]) */;
    %165.1
  };
  %166() /* ty=Tensor[(13, 12, 4), uint64] */
}

def @func_5625() -> (Tensor[(6, 11, 8), float64], Tensor[(24, 22), uint32], Tensor[(11, 2, 11), float32]) {
  @func_5623() /* ty=(Tensor[(6, 11, 8), float64], Tensor[(24, 22), uint32], Tensor[(11, 2, 11), float32]) */
}

def @func_6314() -> Tensor[(88), float64] {
  %167 = @func_3510() /* ty=(Tensor[(88), float64],) */;
  %167.0
}

def @func_5535(%var_5472: Tensor[(11, 2, 11), uint8], %var_5485: Tensor[(11, 2, 11), int32], %var_5501: Tensor[(288), float32]) -> (Tensor[(11, 2, 11), bool], Tensor[(8, 6, 6), float32], Tensor[(288), float32], Tensor[(32), bool], Tensor[(8, 6, 6), float32], Tensor[(11, 2, 11), float64], Tensor[(6, 15, 4), bool], Tensor[(24), bool], Tensor[(2, 180), bool]) {
  %168 = @func_4421() /* ty=Tensor[(11, 2, 11), uint8] */;
  %169 = cast(%var_5472, dtype="int32") /* ty=Tensor[(11, 2, 11), int32] */;
  %170 = shape_of(%168, dtype="int32") /* ty=Tensor[(3), int32] */;
  %171 = cast(%168, dtype="int32") /* ty=Tensor[(11, 2, 11), int32] */;
  %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %173 = bitwise_and(%171, %172) /* ty=Tensor[(11, 2, 11), int32] */;
  %174 = cast(%var_5485, dtype="bool") /* ty=Tensor[(11, 2, 11), bool] */;
  %175 = shape_of(%173, dtype="int32") /* ty=Tensor[(3), int32] */;
  %176 = cast(%173, dtype="bool") /* ty=Tensor[(11, 2, 11), bool] */;
  %177 = dyn.reshape(%174, %175, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %178 = cast(%var_5501, dtype="float32") /* ty=Tensor[(288), float32] */;
  %179 = cast(%var_5472, dtype="float32") /* ty=Tensor[(11, 2, 11), float32] */;
  %180 = reshape(%178, newshape=[288]) /* ty=Tensor[(288), float32] */;
  %181 = reshape(%179, newshape=[11, 2, 11]) /* ty=Tensor[(11, 2, 11), float32] */;
  %182 = @func_2372(%180, %181) /* ty=(Tensor[(11, 2, 11), float32], Tensor[(8, 6, 6), float32], Tensor[(288), float32], Tensor[(11, 2, 11), uint64]) */;
  %183 = %182.1;
  %184 = cast(%183, dtype="float32") /* ty=Tensor[(8, 6, 6), float32] */;
  %185 = reshape(%184, newshape=[8, 6, 6]) /* ty=Tensor[(8, 6, 6), float32] */;
  %186 = @func_1390(%185) /* ty=(Tensor[(8, 6, 6), float32],) */;
  %187 = cast(meta[relay.Constant][10] /* ty=Tensor[(32), bool] */, dtype="bool") /* ty=Tensor[(32), bool] */;
  %188 = cast(%183, dtype="bool") /* ty=Tensor[(8, 6, 6), bool] */;
  %189 = reshape(%187, newshape=[32]) /* ty=Tensor[(32), bool] */;
  %190 = reshape(%188, newshape=[288]) /* ty=Tensor[(288), bool] */;
  %191 = @func_2907(%189, %190) /* ty=(Tensor[(88), float64], Tensor[(8, 7, 13), float32], Tensor[(1, 2, 16), float32], Tensor[(32), bool], Tensor[(288), bool], Tensor[(11, 2, 11), float32], Tensor[(728), float32], Tensor[(11, 2, 11), float32]) */;
  %192 = %191.7;
  %193 = cast(%192, dtype="float64") /* ty=Tensor[(11, 2, 11), float64] */;
  %194 = cast(meta[relay.Constant][11] /* ty=Tensor[(24), bool] */, dtype="bool") /* ty=Tensor[(24), bool] */;
  %195 = cast(meta[relay.Constant][12] /* ty=Tensor[(2, 180), bool] */, dtype="bool") /* ty=Tensor[(2, 180), bool] */;
  %196 = reshape(%194, newshape=[6, 1, 4]) /* ty=Tensor[(6, 1, 4), bool] */;
  %197 = reshape(%195, newshape=[6, 15, 4]) /* ty=Tensor[(6, 15, 4), bool] */;
  %198 = @func_1485(%196, %197) /* ty=(Tensor[(6, 15, 4), bool],) */;
  %199 = logical_and(%176, %177) /* ty=Tensor[(11, 2, 11), bool] */;
  %200 = %186.0;
  %201 = cosh(%193) /* ty=Tensor[(11, 2, 11), float64] */;
  %202 = %198.0;
  (%199, %183, %var_5501, meta[relay.Constant][10] /* ty=Tensor[(32), bool] */, %200, %201, %202, meta[relay.Constant][11] /* ty=Tensor[(24), bool] */, meta[relay.Constant][12] /* ty=Tensor[(2, 180), bool] */)
}

def @func_5675() -> (Tensor[(88), float64],) {
  %203 = @func_4179() /* ty=Tensor[(88), float64] */;
  (%203,)
}

def @func_6507(%var_6504: Tensor[(130), float32], %var_6505: Tensor[(78), int16], %var_6506: Tensor[(1, 728), float32]) -> (Tensor[(11, 2, 11), float32], Tensor[(728, 1), float32], Tensor[(130), float32], Tensor[(78), int16], Tensor[(1, 728), float32]) {
  %214 = fn (%var_6499: Tensor[(130), float32], %var_6500: Tensor[(78), int16], %var_6501: Tensor[(1, 728), float32]) -> (Tensor[(11, 2, 11), float32], Tensor[(728, 1), float32], Tensor[(130), float32], Tensor[(78), int16], Tensor[(1, 728), float32]) {
    %204 = @func_2935() /* ty=(Tensor[(11, 2, 11), float32], Tensor[(12, 4, 15), uint16], Tensor[(180), uint16]) */;
    %205 = cast(%var_6499, dtype="float32") /* ty=Tensor[(130), float32] */;
    %206 = cast(%var_6500, dtype="int16") /* ty=Tensor[(78), int16] */;
    %207 = cast(%var_6501, dtype="float32") /* ty=Tensor[(1, 728), float32] */;
    %208 = reshape(%205, newshape=[5, 13, 2]) /* ty=Tensor[(5, 13, 2), float32] */;
    %209 = reshape(%206, newshape=[78]) /* ty=Tensor[(78), int16] */;
    %210 = reshape(%207, newshape=[728, 1]) /* ty=Tensor[(728, 1), float32] */;
    %211 = @func_1870(%208, %209, %210) /* ty=(Tensor[(6, 11, 8), bool], Tensor[(528), uint32], Tensor[(5, 13, 2), float64], Tensor[(8, 7, 13), float32], Tensor[(78), int16], Tensor[(1, 546), int16], Tensor[(728, 1), float32]) */;
    %212 = %204.0;
    %213 = %211.6;
    (%212, %213, %var_6499, %var_6500, %var_6501)
  };
  %214(%var_6504, %var_6505, %var_6506) /* ty=(Tensor[(11, 2, 11), float32], Tensor[(728, 1), float32], Tensor[(130), float32], Tensor[(78), int16], Tensor[(1, 728), float32]) */
}

def @func_2296(%var_2294: Tensor[(15, 12, 2), float32]) -> (Tensor[(6, 15, 4), bool], Tensor[(24), bool], Tensor[(6, 15, 4), bool], Tensor[(11, 2, 11), int8], Tensor[(15, 12, 2), float32]) {
  @func_2293(%var_2294) /* ty=(Tensor[(6, 15, 4), bool], Tensor[(24), bool], Tensor[(6, 15, 4), bool], Tensor[(11, 2, 11), int8], Tensor[(15, 12, 2), float32]) */
}

def @func_1874(%var_1871: Tensor[(5, 13, 2), float32], %var_1872: Tensor[(78), int16], %var_1873: Tensor[(728, 1), float32]) -> (Tensor[(6, 11, 8), bool], Tensor[(528), uint32], Tensor[(5, 13, 2), float64], Tensor[(8, 7, 13), float32], Tensor[(78), int16], Tensor[(1, 546), int16], Tensor[(728, 1), float32]) {
  %234 = fn (%var_1829: Tensor[(5, 13, 2), float32], %var_1863: Tensor[(78), int16], %var_1865: Tensor[(728, 1), float32]) -> (Tensor[(6, 11, 8), bool], Tensor[(528), uint32], Tensor[(5, 13, 2), float64], Tensor[(8, 7, 13), float32], Tensor[(78), int16], Tensor[(1, 546), int16], Tensor[(728, 1), float32]) {
    %215 = cast(meta[relay.Constant][13] /* ty=Tensor[(528), uint32] */, dtype="uint32") /* ty=Tensor[(528), uint32] */;
    %216 = reshape(%215, newshape=[6, 11, 8]) /* ty=Tensor[(6, 11, 8), uint32] */;
    %217 = @func_1330(%216) /* ty=(Tensor[(6, 11, 8), bool], Tensor[(6, 11, 8), float32]) */;
    %218 = cast(%var_1829, dtype="float32") /* ty=Tensor[(5, 13, 2), float32] */;
    %219 = cosh(%218) /* ty=Tensor[(5, 13, 2), float32] */;
    %220 = cast(%var_1829, dtype="float64") /* ty=Tensor[(5, 13, 2), float64] */;
    %221 = shape_of(%219, dtype="int32") /* ty=Tensor[(3), int32] */;
    %222 = cast(%219, dtype="float64") /* ty=Tensor[(5, 13, 2), float64] */;
    %223 = dyn.reshape(%220, %221, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %224 = cast(%var_1863, dtype="int16") /* ty=Tensor[(78), int16] */;
    %225 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 546), int16] */, dtype="int16") /* ty=Tensor[(1, 546), int16] */;
    %226 = cast(%var_1865, dtype="float32") /* ty=Tensor[(728, 1), float32] */;
    %227 = reshape(%224, newshape=[6, 1, 13]) /* ty=Tensor[(6, 1, 13), int16] */;
    %228 = reshape(%225, newshape=[6, 7, 13]) /* ty=Tensor[(6, 7, 13), int16] */;
    %229 = reshape(%226, newshape=[1, 728]) /* ty=Tensor[(1, 728), float32] */;
    %230 = @func_219(%227, %228, %229) /* ty=(Tensor[(6, 7, 13), int16], Tensor[(8, 7, 13), float32], Tensor[(1, 728), float32], Tensor[(8, 7, 13), float32], Tensor[(8, 7, 13), float32], Tensor[(8, 7, 13), float32]) */;
    %231 = %217.0;
    %232 = floor_divide(%222, %223) /* ty=Tensor[(5, 13, 2), float64] */;
    %233 = %230.4;
    (%231, meta[relay.Constant][13] /* ty=Tensor[(528), uint32] */, %232, %233, %var_1863, meta[relay.Constant][14] /* ty=Tensor[(1, 546), int16] */, %var_1865)
  };
  %234(%var_1871, %var_1872, %var_1873) /* ty=(Tensor[(6, 11, 8), bool], Tensor[(528), uint32], Tensor[(5, 13, 2), float64], Tensor[(8, 7, 13), float32], Tensor[(78), int16], Tensor[(1, 546), int16], Tensor[(728, 1), float32]) */
}

def @func_7370(%var_7367: Tensor[(210), float64]) -> (Tensor[(24, 22), bool], Tensor[(24, 22), int8], Tensor[(210), float64], Tensor[(210), float64]) {
  %235 = @func_4032() /* ty=(Tensor[(24, 22), uint32],) */;
  %236 = %235.0;
  %237 = cast(meta[relay.Constant][15] /* ty=Tensor[(24, 22), uint32] */, dtype="bool") /* ty=Tensor[(24, 22), bool] */;
  %238 = shape_of(%236, dtype="int32") /* ty=Tensor[(2), int32] */;
  %239 = cast(%236, dtype="bool") /* ty=Tensor[(24, 22), bool] */;
  %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %241 = cast(meta[relay.Constant][15] /* ty=Tensor[(24, 22), uint32] */, dtype="int8") /* ty=Tensor[(24, 22), int8] */;
  %242 = shape_of(%236, dtype="int32") /* ty=Tensor[(2), int32] */;
  %243 = cast(%236, dtype="int8") /* ty=Tensor[(24, 22), int8] */;
  %244 = dyn.reshape(%241, %242, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %245 = cast(%var_7367, dtype="float64") /* ty=Tensor[(210), float64] */;
  %246 = reshape(%245, newshape=[210]) /* ty=Tensor[(210), float64] */;
  %247 = @func_6419(%246) /* ty=(Tensor[(6, 11, 8), uint64], Tensor[(10, 3, 7), bool], Tensor[(210), float64]) */;
  %248 = not_equal(%239, %240) /* ty=Tensor[(24, 22), bool] */;
  %249 = minimum(%243, %244) /* ty=Tensor[(24, 22), int8] */;
  %250 = %247.2;
  (%248, %249, %250, %var_7367)
}

def @func_2757(%var_2755: Tensor[(288), float32]) -> (Tensor[(3, 3, 3), bool], Tensor[(?, 728), bool], Tensor[(8, 6, 6), float32], Tensor[(288), float32]) {
  @func_2754(%var_2755) /* ty=(Tensor[(3, 3, 3), bool], Tensor[(?, 728), bool], Tensor[(8, 6, 6), float32], Tensor[(288), float32]) */
}

def @func_4499() -> Tensor[(24, 22), uint32] {
  %251 = fn () -> Tensor[(24, 22), uint32] {
    @func_3965() /* ty=Tensor[(24, 22), uint32] */
  };
  %251() /* ty=Tensor[(24, 22), uint32] */
}

def @func_5041() -> Tensor[(6, 11, 8), uint64] {
  @func_5039() /* ty=Tensor[(6, 11, 8), uint64] */
}

def @func_4034() -> (Tensor[(24, 22), uint32],) {
  @func_4032() /* ty=(Tensor[(24, 22), uint32],) */
}

def @func_5677() -> (Tensor[(88), float64],) {
  @func_5675() /* ty=(Tensor[(88), float64],) */
}

def @func_6907() -> (Tensor[(11, 2, 11), float32], Tensor[(130), float64]) {
  %252 = @func_3383() /* ty=(Tensor[(11, 2, 11), float32],) */;
  %253 = @func_4946() /* ty=(Tensor[(11, 2, 11), float32], Tensor[(130), int32]) */;
  %254 = %253.1;
  %255 = cast(%254, dtype="float64") /* ty=Tensor[(130), float64] */;
  %256 = %252.0;
  %257 = tan(%255) /* ty=Tensor[(130), float64] */;
  (%256, %257)
}

def @func_4401() -> (Tensor[(10, 8, 11), int8],) {
  %260 = fn () -> (Tensor[(10, 8, 11), int8],) {
    %258 = @func_4135() /* ty=(Tensor[(10, 8, 11), int8], Tensor[(13, 12, 4), uint64]) */;
    %259 = %258.0;
    (%259,)
  };
  %260() /* ty=(Tensor[(10, 8, 11), int8],) */
}

def @func_7249(%var_7231: Tensor[(13, 12, 4), bool]) -> (Tensor[(13, 12, 4), bool], Tensor[(13, 12, 4), float32]) {
  %261 = @func_6547() /* ty=Tensor[(13, 12, 4), bool] */;
  %262 = cast(%var_7231, dtype="bool") /* ty=Tensor[(13, 12, 4), bool] */;
  %263 = shape_of(%261, dtype="int32") /* ty=Tensor[(3), int32] */;
  %264 = cast(%261, dtype="bool") /* ty=Tensor[(13, 12, 4), bool] */;
  %265 = dyn.reshape(%262, %263, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %266 = greater_equal(%264, %265) /* ty=Tensor[(13, 12, 4), bool] */;
  %267 = @func_5975() /* ty=Tensor[(13, 12, 4), float32] */;
  (%266, %267)
}

def @func_4180() -> Tensor[(88), float64] {
  %269 = fn () -> Tensor[(88), float64] {
    %268 = @func_3510() /* ty=(Tensor[(88), float64],) */;
    %268.0
  };
  %269() /* ty=Tensor[(88), float64] */
}

def @func_458(%var_456: Tensor[(1, 8, 11), float64], %var_457: Tensor[(10, 8, 11), float64]) -> (Tensor[(1, 8, 11), float64], Tensor[(10, 8, 11), int8]) {
  @func_454(%var_456, %var_457) /* ty=(Tensor[(1, 8, 11), float64], Tensor[(10, 8, 11), int8]) */
}

def @func_4263() -> Tensor[(88), float64] {
  %270 = @func_4236() /* ty=(Tensor[(88), float64], Tensor[(11, 2, 11), float32]) */;
  %270.0
}

def @func_7147(%var_7132: Tensor[(24, 22), uint32]) -> (Tensor[(728, 1), float32], Tensor[(24, 22), float32], Tensor[(6, 15, 4), bool], Tensor[(360), float32]) {
  %271 = @func_2641() /* ty=(Tensor[(11, 2, 11), float32], Tensor[(3, 3, 3), bool], Tensor[(728, 1), float32], Tensor[(130), float32], Tensor[(78), int16], Tensor[(728), float32]) */;
  %272 = @func_4032() /* ty=(Tensor[(24, 22), uint32],) */;
  %273 = %272.0;
  %274 = cast(%var_7132, dtype="float32") /* ty=Tensor[(24, 22), float32] */;
  %275 = shape_of(%273, dtype="int32") /* ty=Tensor[(2), int32] */;
  %276 = cast(%273, dtype="float32") /* ty=Tensor[(24, 22), float32] */;
  %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %278 = cast(meta[relay.Constant][16] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
  %279 = reshape(%278, newshape=[15, 12, 2]) /* ty=Tensor[(15, 12, 2), float32] */;
  %280 = @func_2293(%279) /* ty=(Tensor[(6, 15, 4), bool], Tensor[(24), bool], Tensor[(6, 15, 4), bool], Tensor[(11, 2, 11), int8], Tensor[(15, 12, 2), float32]) */;
  %281 = %271.2;
  %282 = maximum(%276, %277) /* ty=Tensor[(24, 22), float32] */;
  %283 = %280.0;
  (%281, %282, %283, meta[relay.Constant][16] /* ty=Tensor[(360), float32] */)
}

def @func_5112() -> (Tensor[(11, 2, 11), float32], Tensor[(288), float32], Tensor[(288), float32], Tensor[(24, 22), uint32]) {
  @func_5110() /* ty=(Tensor[(11, 2, 11), float32], Tensor[(288), float32], Tensor[(288), float32], Tensor[(24, 22), uint32]) */
}

def @func_2823(%var_2822: Tensor[(1, 16, 4), int16]) -> (Tensor[(14, 16, 4), bool],) {
  %287 = fn (%var_2815: Tensor[(1, 16, 4), int16]) -> (Tensor[(14, 16, 4), bool],) {
    %284 = cast(%var_2815, dtype="bool") /* ty=Tensor[(1, 16, 4), bool] */;
    %285 = cast(meta[relay.Constant][17] /* ty=Tensor[(14, 16, 4), int16] */, dtype="bool") /* ty=Tensor[(14, 16, 4), bool] */;
    %286 = less(%284, %285) /* ty=Tensor[(14, 16, 4), bool] */;
    (%286,)
  };
  %287(%var_2822) /* ty=(Tensor[(14, 16, 4), bool],) */
}

def @func_3427() -> (Tensor[(16, 3, 2), float32], Tensor[(16, 3, 2), float32]) {
  @func_3425() /* ty=(Tensor[(16, 3, 2), float32], Tensor[(16, 3, 2), float32]) */
}

def @func_5039() -> Tensor[(6, 11, 8), uint64] {
  %288 = @func_2162() /* ty=(Tensor[(6, 11, 8), float32], Tensor[(24, 22), uint32], Tensor[(11, 2, 11), int8]) */;
  %289 = %288.0;
  %290 = cast(%289, dtype="float32") /* ty=Tensor[(6, 11, 8), float32] */;
  %291 = sigmoid(%290) /* ty=Tensor[(6, 11, 8), float32] */;
  %292 = cast(%289, dtype="uint64") /* ty=Tensor[(6, 11, 8), uint64] */;
  %293 = shape_of(%291, dtype="int32") /* ty=Tensor[(3), int32] */;
  %294 = cast(%291, dtype="uint64") /* ty=Tensor[(6, 11, 8), uint64] */;
  %295 = dyn.reshape(%292, %293, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  left_shift(%294, %295) /* ty=Tensor[(6, 11, 8), uint64] */
}

def @func_4625(%var_4580: Tensor[(2, 180), float32], %var_4618: Tensor[(728), float32]) -> (Tensor[(11, 2, 11), float32], Tensor[(10, 8, 11), int8], Tensor[(11, 2, 11), float64], Tensor[(88), float64], Tensor[(360), float32], Tensor[(2, 180), float32], Tensor[(1, 8, 11), float64], Tensor[(24), bool], Tensor[(6, 11, 8), float32], Tensor[(8, 66), uint32], Tensor[(8, 7, 13), float32], Tensor[(728), float32]) {
  %296 = @func_4400() /* ty=(Tensor[(10, 8, 11), int8],) */;
  %297 = @func_3994() /* ty=Tensor[(11, 2, 11), float32] */;
  %298 = cast(%297, dtype="float32") /* ty=Tensor[(11, 2, 11), float32] */;
  %299 = reshape(%298, newshape=[11, 2, 11]) /* ty=Tensor[(11, 2, 11), float32] */;
  %300 = @func_1819(%299) /* ty=(Tensor[(11, 2, 11), float64], Tensor[(11, 2, 11), bool], Tensor[(11, 2, 11), int64]) */;
  %301 = cast(%var_4580, dtype="float32") /* ty=Tensor[(2, 180), float32] */;
  %302 = reshape(%301, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %303 = @func_3102(%302) /* ty=(Tensor[(11, 2, 11), float32], Tensor[(6, 15, 4), bool], Tensor[(360), float32]) */;
  %304 = cast(meta[relay.Constant][18] /* ty=Tensor[(24), bool] */, dtype="bool") /* ty=Tensor[(24), bool] */;
  %305 = %303.2;
  %306 = cast(%305, dtype="bool") /* ty=Tensor[(360), bool] */;
  %307 = @func_3358() /* ty=Tensor[(88), float64] */;
  %308 = cast(%307, dtype="float64") /* ty=Tensor[(88), float64] */;
  %309 = reshape(%304, newshape=[24]) /* ty=Tensor[(24), bool] */;
  %310 = reshape(%306, newshape=[1, 360]) /* ty=Tensor[(1, 360), bool] */;
  %311 = reshape(%308, newshape=[88]) /* ty=Tensor[(88), float64] */;
  %312 = @func_2984(%309, %310, %311) /* ty=(Tensor[(78), int16], Tensor[(6, 15, 4), bool], Tensor[(24), bool], Tensor[(1, 360), bool], Tensor[(1, 8, 11), float64], Tensor[(88), float64], Tensor[(880), float64]) */;
  %313 = cast(meta[relay.Constant][19] /* ty=Tensor[(8, 66), uint32] */, dtype="uint32") /* ty=Tensor[(8, 66), uint32] */;
  %314 = reshape(%313, newshape=[6, 11, 8]) /* ty=Tensor[(6, 11, 8), uint32] */;
  %315 = @func_1330(%314) /* ty=(Tensor[(6, 11, 8), bool], Tensor[(6, 11, 8), float32]) */;
  %316 = cast(%var_4618, dtype="float32") /* ty=Tensor[(728), float32] */;
  %317 = reshape(%316, newshape=[8, 7, 13]) /* ty=Tensor[(8, 7, 13), float32] */;
  %318 = @func_141(%317) /* ty=(Tensor[(8, 7, 13), float32],) */;
  %319 = %296.0;
  %320 = %300.0;
  %321 = %312.4;
  %322 = %315.1;
  %323 = %318.0;
  (%297, %319, %320, %307, %305, %var_4580, %321, meta[relay.Constant][18] /* ty=Tensor[(24), bool] */, %322, meta[relay.Constant][19] /* ty=Tensor[(8, 66), uint32] */, %323, %var_4618)
}

def @func_5839() -> (Tensor[(11, 2, 11), uint8], Tensor[(8, 7, 16), int16], Tensor[(896), int16], Tensor[(88), float64]) {
  %324 = cast(meta[relay.Constant][20] /* ty=Tensor[(896), int16] */, dtype="int16") /* ty=Tensor[(896), int16] */;
  %325 = cast(meta[relay.Constant][20] /* ty=Tensor[(896), int16] */, dtype="int16") /* ty=Tensor[(896), int16] */;
  %326 = reshape(%324, newshape=[8, 7, 16]) /* ty=Tensor[(8, 7, 16), int16] */;
  %327 = reshape(%325, newshape=[8, 7, 16]) /* ty=Tensor[(8, 7, 16), int16] */;
  %328 = @func_4791() /* ty=Tensor[(11, 2, 11), uint8] */;
  %329 = @func_1306(%326, %327) /* ty=Tensor[(8, 7, 16), int16] */;
  %330 = @func_4179() /* ty=Tensor[(88), float64] */;
  (%328, %329, meta[relay.Constant][20] /* ty=Tensor[(896), int16] */, %330)
}

def @func_3996() -> Tensor[(11, 2, 11), float32] {
  @func_3994() /* ty=Tensor[(11, 2, 11), float32] */
}

def @func_5656() -> Tensor[(88), float64] {
  %332 = fn () -> Tensor[(88), float64] {
    %331 = @func_3510() /* ty=(Tensor[(88), float64],) */;
    %331.0
  };
  %332() /* ty=Tensor[(88), float64] */
}

def @func_6691() -> (Tensor[(3, 3, 3), bool],) {
  @func_6689() /* ty=(Tensor[(3, 3, 3), bool],) */
}

def @func_6708(%var_6707: Tensor[(210), float64]) -> (Tensor[(16, 3, 2), float32], Tensor[(11, 2, 11), uint8], Tensor[(8, 6, 6), float32], Tensor[(210), float64]) {
  %340 = fn (%var_6703: Tensor[(210), float64]) -> (Tensor[(16, 3, 2), float32], Tensor[(11, 2, 11), uint8], Tensor[(8, 6, 6), float32], Tensor[(210), float64]) {
    %333 = @func_3425() /* ty=(Tensor[(16, 3, 2), float32], Tensor[(16, 3, 2), float32]) */;
    %334 = cast(%var_6703, dtype="float64") /* ty=Tensor[(210), float64] */;
    %335 = reshape(%334, newshape=[10, 3, 7]) /* ty=Tensor[(10, 3, 7), float64] */;
    %336 = @func_5778(%335) /* ty=(Tensor[(8, 6, 6), float32], Tensor[(288), float32], Tensor[(88), float64], Tensor[(10, 3, 7), bool]) */;
    %337 = %333.1;
    %338 = @func_4791() /* ty=Tensor[(11, 2, 11), uint8] */;
    %339 = %336.0;
    (%337, %338, %339, %var_6703)
  };
  %340(%var_6707) /* ty=(Tensor[(16, 3, 2), float32], Tensor[(11, 2, 11), uint8], Tensor[(8, 6, 6), float32], Tensor[(210), float64]) */
}

def @func_5540(%var_5537: Tensor[(11, 2, 11), uint8], %var_5538: Tensor[(11, 2, 11), int32], %var_5539: Tensor[(288), float32]) -> (Tensor[(11, 2, 11), bool], Tensor[(8, 6, 6), float32], Tensor[(288), float32], Tensor[(32), bool], Tensor[(8, 6, 6), float32], Tensor[(11, 2, 11), float64], Tensor[(6, 15, 4), bool], Tensor[(24), bool], Tensor[(2, 180), bool]) {
  @func_5535(%var_5537, %var_5538, %var_5539) /* ty=(Tensor[(11, 2, 11), bool], Tensor[(8, 6, 6), float32], Tensor[(288), float32], Tensor[(32), bool], Tensor[(8, 6, 6), float32], Tensor[(11, 2, 11), float64], Tensor[(6, 15, 4), bool], Tensor[(24), bool], Tensor[(2, 180), bool]) */
}

def @func_6632() -> (Tensor[(11, 2, 11), float64], Tensor[(8, 6, 6), float32], Tensor[(288), float32]) {
  @func_6630() /* ty=(Tensor[(11, 2, 11), float64], Tensor[(8, 6, 6), float32], Tensor[(288), float32]) */
}

def @func_1489(%var_1487: Tensor[(6, 1, 4), bool], %var_1488: Tensor[(6, 15, 4), bool]) -> (Tensor[(6, 15, 4), bool],) {
  @func_1485(%var_1487, %var_1488) /* ty=(Tensor[(6, 15, 4), bool],) */
}

def @func_3359() -> Tensor[(88), float64] {
  %341 = fn () -> Tensor[(88), float64] {
    @func_2402() /* ty=Tensor[(88), float64] */
  };
  %341() /* ty=Tensor[(88), float64] */
}

def @func_2910(%var_2908: Tensor[(32), bool], %var_2909: Tensor[(288), bool]) -> (Tensor[(88), float64], Tensor[(8, 7, 13), float32], Tensor[(1, 2, 16), float32], Tensor[(32), bool], Tensor[(288), bool], Tensor[(11, 2, 11), float32], Tensor[(728), float32], Tensor[(11, 2, 11), float32]) {
  %358 = fn (%var_2877: Tensor[(32), bool], %var_2878: Tensor[(288), bool]) -> (Tensor[(88), float64], Tensor[(8, 7, 13), float32], Tensor[(1, 2, 16), float32], Tensor[(32), bool], Tensor[(288), bool], Tensor[(11, 2, 11), float32], Tensor[(728), float32], Tensor[(11, 2, 11), float32]) {
    %342 = cast(meta[relay.Constant][21] /* ty=Tensor[(728), float32] */, dtype="float32") /* ty=Tensor[(728), float32] */;
    %343 = reshape(%342, newshape=[8, 7, 13]) /* ty=Tensor[(8, 7, 13), float32] */;
    %344 = @func_141(%343) /* ty=(Tensor[(8, 7, 13), float32],) */;
    %345 = cast(%var_2877, dtype="bool") /* ty=Tensor[(32), bool] */;
    %346 = cast(%var_2878, dtype="bool") /* ty=Tensor[(288), bool] */;
    %347 = reshape(%345, newshape=[1, 2, 16]) /* ty=Tensor[(1, 2, 16), bool] */;
    %348 = reshape(%346, newshape=[9, 2, 16]) /* ty=Tensor[(9, 2, 16), bool] */;
    %349 = @func_367(%347, %348) /* ty=(Tensor[(9, 2, 16), bool], Tensor[(1, 2, 16), float32]) */;
    %350 = cast(meta[relay.Constant][21] /* ty=Tensor[(728), float32] */, dtype="float32") /* ty=Tensor[(728), float32] */;
    %351 = @func_2570() /* ty=(Tensor[(11, 2, 11), float32],) */;
    %352 = @func_2402() /* ty=Tensor[(88), float64] */;
    %353 = %344.0;
    %354 = %349.1;
    %355 = @func_1620() /* ty=Tensor[(11, 2, 11), float32] */;
    %356 = log(%350) /* ty=Tensor[(728), float32] */;
    %357 = %351.0;
    (%352, %353, %354, %var_2877, %var_2878, %355, %356, %357)
  };
  %358(%var_2908, %var_2909) /* ty=(Tensor[(88), float64], Tensor[(8, 7, 13), float32], Tensor[(1, 2, 16), float32], Tensor[(32), bool], Tensor[(288), bool], Tensor[(11, 2, 11), float32], Tensor[(728), float32], Tensor[(11, 2, 11), float32]) */
}

def @func_2162() -> (Tensor[(6, 11, 8), float32], Tensor[(24, 22), uint32], Tensor[(11, 2, 11), int8]) {
  %359 = cast(meta[relay.Constant][22] /* ty=Tensor[(24, 22), uint32] */, dtype="uint32") /* ty=Tensor[(24, 22), uint32] */;
  %360 = reshape(%359, newshape=[6, 11, 8]) /* ty=Tensor[(6, 11, 8), uint32] */;
  %361 = @func_1330(%360) /* ty=(Tensor[(6, 11, 8), bool], Tensor[(6, 11, 8), float32]) */;
  %362 = @func_1655() /* ty=Tensor[(11, 2, 11), float32] */;
  %363 = cast(meta[relay.Constant][23] /* ty=Tensor[(11, 2, 11), float32] */, dtype="int8") /* ty=Tensor[(11, 2, 11), int8] */;
  %364 = shape_of(%362, dtype="int32") /* ty=Tensor[(3), int32] */;
  %365 = cast(%362, dtype="int8") /* ty=Tensor[(11, 2, 11), int8] */;
  %366 = dyn.reshape(%363, %364, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %367 = %361.1;
  %368 = subtract(%365, %366) /* ty=Tensor[(11, 2, 11), int8] */;
  (%367, meta[relay.Constant][22] /* ty=Tensor[(24, 22), uint32] */, %368)
}

def @func_7291() -> (Tensor[(6, 11, 8), float32], Tensor[(13, 12, 4), bool]) {
  %372 = fn () -> (Tensor[(6, 11, 8), float32], Tensor[(13, 12, 4), bool]) {
    %369 = @func_2162() /* ty=(Tensor[(6, 11, 8), float32], Tensor[(24, 22), uint32], Tensor[(11, 2, 11), int8]) */;
    %370 = %369.0;
    %371 = @func_6547() /* ty=Tensor[(13, 12, 4), bool] */;
    (%370, %371)
  };
  %372() /* ty=(Tensor[(6, 11, 8), float32], Tensor[(13, 12, 4), bool]) */
}

def @func_7108(%var_7107: Tensor[(16, 12, 10), float32]) -> (Tensor[(16, 12, 10), float32],) {
  %375 = fn (%var_7101: Tensor[(16, 12, 10), float32]) -> (Tensor[(16, 12, 10), float32],) {
    %373 = cast(%var_7101, dtype="float32") /* ty=Tensor[(16, 12, 10), float32] */;
    %374 = tan(%373) /* ty=Tensor[(16, 12, 10), float32] */;
    (%374,)
  };
  %375(%var_7107) /* ty=(Tensor[(16, 12, 10), float32],) */
}

def @func_1885() -> (Tensor[(11, 2, 11), float32], Tensor[(10, 8, 11), int8], Tensor[(88), float64], Tensor[(880), float64]) {
  %376 = cast(meta[relay.Constant][24] /* ty=Tensor[(88), float64] */, dtype="float64") /* ty=Tensor[(88), float64] */;
  %377 = cast(meta[relay.Constant][25] /* ty=Tensor[(880), float64] */, dtype="float64") /* ty=Tensor[(880), float64] */;
  %378 = reshape(%376, newshape=[1, 8, 11]) /* ty=Tensor[(1, 8, 11), float64] */;
  %379 = reshape(%377, newshape=[10, 8, 11]) /* ty=Tensor[(10, 8, 11), float64] */;
  %380 = @func_454(%378, %379) /* ty=(Tensor[(1, 8, 11), float64], Tensor[(10, 8, 11), int8]) */;
  %381 = @func_1620() /* ty=Tensor[(11, 2, 11), float32] */;
  %382 = %380.1;
  (%381, %382, meta[relay.Constant][24] /* ty=Tensor[(88), float64] */, meta[relay.Constant][25] /* ty=Tensor[(880), float64] */)
}

def @func_5698() -> (Tensor[(11, 2, 11), float64], Tensor[(11, 2, 11), float64]) {
  %383 = @func_5003() /* ty=Tensor[(11, 2, 11), float64] */;
  %384 = cast(%383, dtype="float32") /* ty=Tensor[(11, 2, 11), float32] */;
  %385 = reshape(%384, newshape=[11, 2, 11]) /* ty=Tensor[(11, 2, 11), float32] */;
  %386 = @func_1819(%385) /* ty=(Tensor[(11, 2, 11), float64], Tensor[(11, 2, 11), bool], Tensor[(11, 2, 11), int64]) */;
  %387 = %386.0;
  (%383, %387)
}

def @func_1084(%var_1082: Tensor[(12, 1, 15), uint16]) -> Tensor[(12, 4, 15), uint16] {
  @func_1081(%var_1082) /* ty=Tensor[(12, 4, 15), uint16] */
}

def @func_3425() -> (Tensor[(16, 3, 2), float32], Tensor[(16, 3, 2), float32]) {
  %388 = cast(meta[relay.Constant][26] /* ty=Tensor[(16, 3, 2), float32] */, dtype="float32") /* ty=Tensor[(16, 3, 2), float32] */;
  %389 = cast(meta[relay.Constant][26] /* ty=Tensor[(16, 3, 2), float32] */, dtype="float32") /* ty=Tensor[(16, 3, 2), float32] */;
  %390 = log10(%388) /* ty=Tensor[(16, 3, 2), float32] */;
  %391 = log(%389) /* ty=Tensor[(16, 3, 2), float32] */;
  (%390, %391)
}

def @func_3219() -> (Tensor[(11, 2, 11), float32], Tensor[(8, 7, 13), float32], Tensor[(14, 52), float32]) {
  %392 = cast(meta[relay.Constant][27] /* ty=Tensor[(14, 52), float32] */, dtype="float32") /* ty=Tensor[(14, 52), float32] */;
  %393 = reshape(%392, newshape=[8, 7, 13]) /* ty=Tensor[(8, 7, 13), float32] */;
  %394 = @func_141(%393) /* ty=(Tensor[(8, 7, 13), float32],) */;
  %395 = @func_1620() /* ty=Tensor[(11, 2, 11), float32] */;
  %396 = %394.0;
  (%395, %396, meta[relay.Constant][27] /* ty=Tensor[(14, 52), float32] */)
}

def @func_2710(%var_2708: Tensor[(1, 6, 13), float32], %var_2709: Tensor[(8, 6, 13), float32]) -> Tensor[(8, 6, 13), float32] {
  @func_2706(%var_2708, %var_2709) /* ty=Tensor[(8, 6, 13), float32] */
}

def @func_2754(%var_2752: Tensor[(288), float32]) -> (Tensor[(3, 3, 3), bool], Tensor[(?, 728), bool], Tensor[(8, 6, 6), float32], Tensor[(288), float32]) {
  %397 = @func_2318() /* ty=(Tensor[(3, 3, 3), bool],) */;
  %398 = cast(meta[relay.Constant][28] /* ty=Tensor[(1, 728), float32] */, dtype="float32") /* ty=Tensor[(1, 728), float32] */;
  %399 = reshape(%398, newshape=[8, 7, 13]) /* ty=Tensor[(8, 7, 13), float32] */;
  %400 = @func_141(%399) /* ty=(Tensor[(8, 7, 13), float32],) */;
  %401 = %400.0;
  %402 = cast(%401, dtype="bool") /* ty=Tensor[(8, 7, 13), bool] */;
  %403 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(1, 728), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %404 = cast(meta[relay.Constant][28] /* ty=Tensor[(1, 728), float32] */, dtype="bool") /* ty=Tensor[(1, 728), bool] */;
  %405 = dyn.reshape(%402, %403, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %406 = cast(%var_2752, dtype="float32") /* ty=Tensor[(288), float32] */;
  %407 = reshape(%406, newshape=[8, 6, 6]) /* ty=Tensor[(8, 6, 6), float32] */;
  %408 = @func_1390(%407) /* ty=(Tensor[(8, 6, 6), float32],) */;
  %409 = %397.0;
  %410 = less_equal(%404, %405) /* ty=Tensor[(?, 728), bool] */;
  %411 = %408.0;
  (%409, %410, %411, %var_2752)
}

def @func_6909() -> (Tensor[(11, 2, 11), float32], Tensor[(130), float64]) {
  @func_6907() /* ty=(Tensor[(11, 2, 11), float32], Tensor[(130), float64]) */
}

def @func_6074(%var_6072: Tensor[(10, 7, 11), float32]) -> Tensor[(10, 7, 11), float32] {
  @func_6071(%var_6072) /* ty=Tensor[(10, 7, 11), float32] */
}

def @func_7025() -> Tensor[(11, 2, 11), float32] {
  %412 = fn () -> Tensor[(11, 2, 11), float32] {
    @func_5190() /* ty=Tensor[(11, 2, 11), float32] */
  };
  %412() /* ty=Tensor[(11, 2, 11), float32] */
}

def @func_7252(%var_7250: Tensor[(13, 12, 4), bool]) -> (Tensor[(13, 12, 4), bool], Tensor[(13, 12, 4), float32]) {
  @func_7249(%var_7250) /* ty=(Tensor[(13, 12, 4), bool], Tensor[(13, 12, 4), float32]) */
}

def @func_2191(%var_2190: Tensor[(15, 3, 8), float64]) -> Tensor[(15, 3, 8), float64] {
  %414 = fn (%var_2186: Tensor[(15, 3, 8), float64]) -> Tensor[(15, 3, 8), float64] {
    %413 = cast(%var_2186, dtype="float64") /* ty=Tensor[(15, 3, 8), float64] */;
    sqrt(%413) /* ty=Tensor[(15, 3, 8), float64] */
  };
  %414(%var_2190) /* ty=Tensor[(15, 3, 8), float64] */
}

def @func_6328(%var_6326: Tensor[(10, 14, 9), float32]) -> (Tensor[(10, 14, 9), float32],) {
  @func_6325(%var_6326) /* ty=(Tensor[(10, 14, 9), float32],) */
}

def @func_1620() -> Tensor[(11, 2, 11), float32] {
  %415 = @func_1590() /* ty=(Tensor[(11, 2, 11), float32],) */;
  %415.0
}

def @func_1561() -> Tensor[(11, 2, 11), float32] {
  %416 = cast(meta[relay.Constant][29] /* ty=Tensor[(11, 2, 11), float32] */, dtype="float32") /* ty=Tensor[(11, 2, 11), float32] */;
  log10(%416) /* ty=Tensor[(11, 2, 11), float32] */
}

def @func_3102(%var_3100: Tensor[(360), float32]) -> (Tensor[(11, 2, 11), float32], Tensor[(6, 15, 4), bool], Tensor[(360), float32]) {
  %417 = @func_2570() /* ty=(Tensor[(11, 2, 11), float32],) */;
  %418 = cast(%var_3100, dtype="float32") /* ty=Tensor[(360), float32] */;
  %419 = reshape(%418, newshape=[15, 12, 2]) /* ty=Tensor[(15, 12, 2), float32] */;
  %420 = @func_2293(%419) /* ty=(Tensor[(6, 15, 4), bool], Tensor[(24), bool], Tensor[(6, 15, 4), bool], Tensor[(11, 2, 11), int8], Tensor[(15, 12, 2), float32]) */;
  %421 = %417.0;
  %422 = %420.2;
  (%421, %422, %var_3100)
}

def @func_2319() -> (Tensor[(3, 3, 3), bool],) {
  %426 = fn () -> (Tensor[(3, 3, 3), bool],) {
    %423 = cast(meta[relay.Constant][30] /* ty=Tensor[(3, 3, 1), bool] */, dtype="bool") /* ty=Tensor[(3, 3, 1), bool] */;
    %424 = cast(meta[relay.Constant][31] /* ty=Tensor[(3, 3, 3), bool] */, dtype="bool") /* ty=Tensor[(3, 3, 3), bool] */;
    %425 = logical_and(%423, %424) /* ty=Tensor[(3, 3, 3), bool] */;
    (%425,)
  };
  %426() /* ty=(Tensor[(3, 3, 3), bool],) */
}

def @func_1485(%var_1478: Tensor[(6, 1, 4), bool], %var_1479: Tensor[(6, 15, 4), bool]) -> (Tensor[(6, 15, 4), bool],) {
  %427 = cast(%var_1478, dtype="bool") /* ty=Tensor[(6, 1, 4), bool] */;
  %428 = cast(%var_1479, dtype="bool") /* ty=Tensor[(6, 15, 4), bool] */;
  %429 = logical_or(%427, %428) /* ty=Tensor[(6, 15, 4), bool] */;
  (%429,)
}

def @func_4532() -> (Tensor[(130), int32],) {
  @func_4530() /* ty=(Tensor[(130), int32],) */
}

def @func_3221() -> (Tensor[(11, 2, 11), float32], Tensor[(8, 7, 13), float32], Tensor[(14, 52), float32]) {
  @func_3219() /* ty=(Tensor[(11, 2, 11), float32], Tensor[(8, 7, 13), float32], Tensor[(14, 52), float32]) */
}

def @func_6837(%var_6835: int32, %var_6836: Tensor[(6, 6, 11), int32]) -> (Tensor[(6, 6, 11), bool], Tensor[(11, 2, 11), float32], Tensor[(6, 6, 11), float32], Tensor[(8, 7, 16), int16], Tensor[(896), int16], Tensor[(11, 2, 11), int8], Tensor[(6, 6, 11), float32]) {
  @func_6833(%var_6835, %var_6836) /* ty=(Tensor[(6, 6, 11), bool], Tensor[(11, 2, 11), float32], Tensor[(6, 6, 11), float32], Tensor[(8, 7, 16), int16], Tensor[(896), int16], Tensor[(11, 2, 11), int8], Tensor[(6, 6, 11), float32]) */
}

def @func_3887() -> Tensor[(13, 12, 4), uint64] {
  %434 = fn () -> Tensor[(13, 12, 4), uint64] {
    %430 = cast(meta[relay.Constant][33] /* ty=Tensor[(13, 12, 4), uint64] */, dtype="uint64") /* ty=Tensor[(13, 12, 4), uint64] */;
    %431 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(13, 12, 4), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %432 = cast(meta[relay.Constant][32] /* ty=Tensor[(13, 12, 4), uint64] */, dtype="uint64") /* ty=Tensor[(13, 12, 4), uint64] */;
    %433 = dyn.reshape(%430, %431, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    bitwise_or(%432, %433) /* ty=Tensor[(13, 12, 4), uint64] */
  };
  %434() /* ty=Tensor[(13, 12, 4), uint64] */
}

def @func_6547() -> Tensor[(13, 12, 4), bool] {
  %435 = @func_5975() /* ty=Tensor[(13, 12, 4), float32] */;
  %436 = cast(meta[relay.Constant][34] /* ty=Tensor[(13, 12, 4), float32] */, dtype="bool") /* ty=Tensor[(13, 12, 4), bool] */;
  %437 = shape_of(%435, dtype="int32") /* ty=Tensor[(3), int32] */;
  %438 = cast(%435, dtype="bool") /* ty=Tensor[(13, 12, 4), bool] */;
  %439 = dyn.reshape(%436, %437, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%438, %439) /* ty=Tensor[(13, 12, 4), bool] */
}

def @func_1590() -> (Tensor[(11, 2, 11), float32],) {
  %440 = @func_1561() /* ty=Tensor[(11, 2, 11), float32] */;
  (%440,)
}

def @func_2989(%var_2986: Tensor[(24), bool], %var_2987: Tensor[(1, 360), bool], %var_2988: Tensor[(88), float64]) -> (Tensor[(78), int16], Tensor[(6, 15, 4), bool], Tensor[(24), bool], Tensor[(1, 360), bool], Tensor[(1, 8, 11), float64], Tensor[(88), float64], Tensor[(880), float64]) {
  @func_2984(%var_2986, %var_2987, %var_2988) /* ty=(Tensor[(78), int16], Tensor[(6, 15, 4), bool], Tensor[(24), bool], Tensor[(1, 360), bool], Tensor[(1, 8, 11), float64], Tensor[(88), float64], Tensor[(880), float64]) */
}

def @func_371(%var_369: Tensor[(1, 2, 16), bool], %var_370: Tensor[(9, 2, 16), bool]) -> (Tensor[(9, 2, 16), bool], Tensor[(1, 2, 16), float32]) {
  @func_367(%var_369, %var_370) /* ty=(Tensor[(9, 2, 16), bool], Tensor[(1, 2, 16), float32]) */
}

def @func_1656() -> Tensor[(11, 2, 11), float32] {
  %442 = fn () -> Tensor[(11, 2, 11), float32] {
    %441 = @func_1590() /* ty=(Tensor[(11, 2, 11), float32],) */;
    %441.0
  };
  %442() /* ty=Tensor[(11, 2, 11), float32] */
}

def @func_2293(%var_2258: Tensor[(15, 12, 2), float32]) -> (Tensor[(6, 15, 4), bool], Tensor[(24), bool], Tensor[(6, 15, 4), bool], Tensor[(11, 2, 11), int8], Tensor[(15, 12, 2), float32]) {
  %443 = cast(meta[relay.Constant][35] /* ty=Tensor[(24), bool] */, dtype="bool") /* ty=Tensor[(24), bool] */;
  %444 = cast(%var_2258, dtype="bool") /* ty=Tensor[(15, 12, 2), bool] */;
  %445 = reshape(%443, newshape=[6, 1, 4]) /* ty=Tensor[(6, 1, 4), bool] */;
  %446 = reshape(%444, newshape=[6, 15, 4]) /* ty=Tensor[(6, 15, 4), bool] */;
  %447 = @func_1485(%445, %446) /* ty=(Tensor[(6, 15, 4), bool],) */;
  %448 = cast(meta[relay.Constant][35] /* ty=Tensor[(24), bool] */, dtype="bool") /* ty=Tensor[(24), bool] */;
  %449 = cast(%var_2258, dtype="bool") /* ty=Tensor[(15, 12, 2), bool] */;
  %450 = reshape(%448, newshape=[6, 1, 4]) /* ty=Tensor[(6, 1, 4), bool] */;
  %451 = reshape(%449, newshape=[6, 15, 4]) /* ty=Tensor[(6, 15, 4), bool] */;
  %452 = @func_1485(%450, %451) /* ty=(Tensor[(6, 15, 4), bool],) */;
  %453 = @func_2162() /* ty=(Tensor[(6, 11, 8), float32], Tensor[(24, 22), uint32], Tensor[(11, 2, 11), int8]) */;
  %454 = cast(%var_2258, dtype="float32") /* ty=Tensor[(15, 12, 2), float32] */;
  %455 = asin(%454) /* ty=Tensor[(15, 12, 2), float32] */;
  %456 = cast(%455, dtype="float32") /* ty=Tensor[(15, 12, 2), float32] */;
  %457 = %447.0;
  %458 = %452.0;
  %459 = %453.2;
  %460 = sigmoid(%456) /* ty=Tensor[(15, 12, 2), float32] */;
  (%457, meta[relay.Constant][35] /* ty=Tensor[(24), bool] */, %458, %459, %460)
}

def @func_7068(%var_7066: Tensor[(13, 5, 7), float32]) -> (Tensor[(13, 5, 7), float64],) {
  @func_7065(%var_7066) /* ty=(Tensor[(13, 5, 7), float64],) */
}

def @func_4791() -> Tensor[(11, 2, 11), uint8] {
  @func_4421() /* ty=Tensor[(11, 2, 11), uint8] */
}

def @func_4265() -> Tensor[(88), float64] {
  @func_4263() /* ty=Tensor[(88), float64] */
}

def @func_143(%var_142: Tensor[(8, 7, 13), float32]) -> (Tensor[(8, 7, 13), float32],) {
  %463 = fn (%var_138: Tensor[(8, 7, 13), float32]) -> (Tensor[(8, 7, 13), float32],) {
    %461 = cast(%var_138, dtype="float32") /* ty=Tensor[(8, 7, 13), float32] */;
    %462 = atan(%461) /* ty=Tensor[(8, 7, 13), float32] */;
    (%462,)
  };
  %463(%var_142) /* ty=(Tensor[(8, 7, 13), float32],) */
}

def @func_6178(%var_6085: Tensor[(24), bool], %var_6102: Tensor[(6, 15, 4), bool]) -> (Tensor[(88), float64], Tensor[(11, 2, 11), float32], Tensor[(24), bool], Tensor[(6, 60), bool], Tensor[(6, 15, 4), int32], Tensor[(24, 22), float64]) {
  %464 = @func_5675() /* ty=(Tensor[(88), float64],) */;
  %465 = @func_1590() /* ty=(Tensor[(11, 2, 11), float32],) */;
  %466 = cast(%var_6085, dtype="bool") /* ty=Tensor[(24), bool] */;
  %467 = cast(meta[relay.Constant][36] /* ty=Tensor[(6, 60), bool] */, dtype="bool") /* ty=Tensor[(6, 60), bool] */;
  %468 = reshape(%466, newshape=[6, 1, 4]) /* ty=Tensor[(6, 1, 4), bool] */;
  %469 = reshape(%467, newshape=[6, 15, 4]) /* ty=Tensor[(6, 15, 4), bool] */;
  %470 = @func_1485(%468, %469) /* ty=(Tensor[(6, 15, 4), bool],) */;
  %471 = %470.0;
  %472 = cast(%var_6102, dtype="int32") /* ty=Tensor[(6, 15, 4), int32] */;
  %473 = shape_of(%471, dtype="int32") /* ty=Tensor[(3), int32] */;
  %474 = cast(%471, dtype="int32") /* ty=Tensor[(6, 15, 4), int32] */;
  %475 = dyn.reshape(%472, %473, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %476 = @func_4498() /* ty=Tensor[(24, 22), uint32] */;
  %477 = cast(%476, dtype="float64") /* ty=Tensor[(24, 22), float64] */;
  %478 = %464.0;
  %479 = %465.0;
  %480 = right_shift(%474, %475) /* ty=Tensor[(6, 15, 4), int32] */;
  %481 = exp(%477) /* ty=Tensor[(24, 22), float64] */;
  (%478, %479, %var_6085, meta[relay.Constant][36] /* ty=Tensor[(6, 60), bool] */, %480, %481)
}

def @func_6630() -> (Tensor[(11, 2, 11), float64], Tensor[(8, 6, 6), float32], Tensor[(288), float32]) {
  %482 = @func_5698() /* ty=(Tensor[(11, 2, 11), float64], Tensor[(11, 2, 11), float64]) */;
  %483 = cast(meta[relay.Constant][37] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %484 = reshape(%483, newshape=[288]) /* ty=Tensor[(288), float32] */;
  %485 = @func_2754(%484) /* ty=(Tensor[(3, 3, 3), bool], Tensor[(?, 728), bool], Tensor[(8, 6, 6), float32], Tensor[(288), float32]) */;
  %486 = %482.1;
  %487 = %485.2;
  (%486, %487, meta[relay.Constant][37] /* ty=Tensor[(288), float32] */)
}

def @func_4236() -> (Tensor[(88), float64], Tensor[(11, 2, 11), float32]) {
  %488 = @func_3358() /* ty=Tensor[(88), float64] */;
  %489 = @func_3994() /* ty=Tensor[(11, 2, 11), float32] */;
  (%488, %489)
}

def @func_2572() -> (Tensor[(11, 2, 11), float32],) {
  @func_2570() /* ty=(Tensor[(11, 2, 11), float32],) */
}

def @func_6419(%var_6417: Tensor[(210), float64]) -> (Tensor[(6, 11, 8), uint64], Tensor[(10, 3, 7), bool], Tensor[(210), float64]) {
  %490 = cast(%var_6417, dtype="float64") /* ty=Tensor[(210), float64] */;
  %491 = reshape(%490, newshape=[10, 3, 7]) /* ty=Tensor[(10, 3, 7), float64] */;
  %492 = @func_5778(%491) /* ty=(Tensor[(8, 6, 6), float32], Tensor[(288), float32], Tensor[(88), float64], Tensor[(10, 3, 7), bool]) */;
  %493 = @func_5039() /* ty=Tensor[(6, 11, 8), uint64] */;
  %494 = %492.3;
  (%493, %494, %var_6417)
}

def @func_6316() -> Tensor[(88), float64] {
  @func_6314() /* ty=Tensor[(88), float64] */
}

def @func_6486() -> Tensor[(88), float32] {
  %495 = @func_6314() /* ty=Tensor[(88), float64] */;
  %496 = cast(%495, dtype="float32") /* ty=Tensor[(88), float32] */;
  sqrt(%496) /* ty=Tensor[(88), float32] */
}

def @func_3182(%var_3180: Tensor[(360), float32], %var_3181: Tensor[(32, 1), bool]) -> (Tensor[(88), float64], Tensor[(11, 2, 11), float32], Tensor[(360), float32], Tensor[(6, 11, 8), float32], Tensor[(528), uint32], Tensor[(1, 2, 16), float32], Tensor[(32, 1), bool], Tensor[(288), bool]) {
  %512 = fn (%var_3136: Tensor[(360), float32], %var_3176: Tensor[(32, 1), bool]) -> (Tensor[(88), float64], Tensor[(11, 2, 11), float32], Tensor[(360), float32], Tensor[(6, 11, 8), float32], Tensor[(528), uint32], Tensor[(1, 2, 16), float32], Tensor[(32, 1), bool], Tensor[(288), bool]) {
    %497 = cast(%var_3136, dtype="float32") /* ty=Tensor[(360), float32] */;
    %498 = reshape(%497, newshape=[360]) /* ty=Tensor[(360), float32] */;
    %499 = @func_3102(%498) /* ty=(Tensor[(11, 2, 11), float32], Tensor[(6, 15, 4), bool], Tensor[(360), float32]) */;
    %500 = cast(meta[relay.Constant][38] /* ty=Tensor[(528), uint32] */, dtype="uint32") /* ty=Tensor[(528), uint32] */;
    %501 = reshape(%500, newshape=[6, 11, 8]) /* ty=Tensor[(6, 11, 8), uint32] */;
    %502 = @func_1330(%501) /* ty=(Tensor[(6, 11, 8), bool], Tensor[(6, 11, 8), float32]) */;
    %503 = cast(%var_3176, dtype="bool") /* ty=Tensor[(32, 1), bool] */;
    %504 = cast(meta[relay.Constant][39] /* ty=Tensor[(288), bool] */, dtype="bool") /* ty=Tensor[(288), bool] */;
    %505 = reshape(%503, newshape=[1, 2, 16]) /* ty=Tensor[(1, 2, 16), bool] */;
    %506 = reshape(%504, newshape=[9, 2, 16]) /* ty=Tensor[(9, 2, 16), bool] */;
    %507 = @func_367(%505, %506) /* ty=(Tensor[(9, 2, 16), bool], Tensor[(1, 2, 16), float32]) */;
    %508 = @func_2402() /* ty=Tensor[(88), float64] */;
    %509 = %499.0;
    %510 = %502.1;
    %511 = %507.1;
    (%508, %509, %var_3136, %510, meta[relay.Constant][38] /* ty=Tensor[(528), uint32] */, %511, %var_3176, meta[relay.Constant][39] /* ty=Tensor[(288), bool] */)
  };
  %512(%var_3180, %var_3181) /* ty=(Tensor[(88), float64], Tensor[(11, 2, 11), float32], Tensor[(360), float32], Tensor[(6, 11, 8), float32], Tensor[(528), uint32], Tensor[(1, 2, 16), float32], Tensor[(32, 1), bool], Tensor[(288), bool]) */
}

def @func_3304(%var_3299: Tensor[(360), float32]) -> (Tensor[(6, 11, 8), float32], Tensor[(360), float32], Tensor[(360), float32], Tensor[(16, 2), bool]) {
  %513 = @func_2162() /* ty=(Tensor[(6, 11, 8), float32], Tensor[(24, 22), uint32], Tensor[(11, 2, 11), int8]) */;
  %514 = cast(%var_3299, dtype="float32") /* ty=Tensor[(360), float32] */;
  %515 = cast(meta[relay.Constant][40] /* ty=Tensor[(16, 2), bool] */, dtype="bool") /* ty=Tensor[(16, 2), bool] */;
  %516 = reshape(%514, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %517 = reshape(%515, newshape=[32, 1]) /* ty=Tensor[(32, 1), bool] */;
  %518 = @func_3179(%516, %517) /* ty=(Tensor[(88), float64], Tensor[(11, 2, 11), float32], Tensor[(360), float32], Tensor[(6, 11, 8), float32], Tensor[(528), uint32], Tensor[(1, 2, 16), float32], Tensor[(32, 1), bool], Tensor[(288), bool]) */;
  %519 = %513.0;
  %520 = %518.2;
  (%519, %520, %var_3299, meta[relay.Constant][40] /* ty=Tensor[(16, 2), bool] */)
}

def @func_4793() -> Tensor[(11, 2, 11), uint8] {
  @func_4791() /* ty=Tensor[(11, 2, 11), uint8] */
}

def @func_2164() -> (Tensor[(6, 11, 8), float32], Tensor[(24, 22), uint32], Tensor[(11, 2, 11), int8]) {
  @func_2162() /* ty=(Tensor[(6, 11, 8), float32], Tensor[(24, 22), uint32], Tensor[(11, 2, 11), int8]) */
}

def @func_6182(%var_6180: Tensor[(24), bool], %var_6181: Tensor[(6, 15, 4), bool]) -> (Tensor[(88), float64], Tensor[(11, 2, 11), float32], Tensor[(24), bool], Tensor[(6, 60), bool], Tensor[(6, 15, 4), int32], Tensor[(24, 22), float64]) {
  @func_6178(%var_6180, %var_6181) /* ty=(Tensor[(88), float64], Tensor[(11, 2, 11), float32], Tensor[(24), bool], Tensor[(6, 60), bool], Tensor[(6, 15, 4), int32], Tensor[(24, 22), float64]) */
}

def @func_5906(%var_5904: Tensor[(7, 16, 14), float32], %var_5905: Tensor[(728), float32]) -> (Tensor[(7, 16, 14), float32], Tensor[(7, 16, 14), float32], Tensor[(8, 7, 13), float32], Tensor[(1, 78), int16], Tensor[(1, 546), int16], Tensor[(728), float32], Tensor[(7, 16, 14), float64]) {
  %546 = fn (%var_5878: Tensor[(7, 16, 14), float32], %var_5892: Tensor[(728), float32]) -> (Tensor[(7, 16, 14), float32], Tensor[(7, 16, 14), float32], Tensor[(8, 7, 13), float32], Tensor[(1, 78), int16], Tensor[(1, 546), int16], Tensor[(728), float32], Tensor[(7, 16, 14), float64]) {
    %521 = cast(%var_5878, dtype="float32") /* ty=Tensor[(7, 16, 14), float32] */;
    %522 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(7, 16, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %523 = cast(meta[relay.Constant][41] /* ty=Tensor[(7, 16, 14), float32] */, dtype="float32") /* ty=Tensor[(7, 16, 14), float32] */;
    %524 = dyn.reshape(%521, %522, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %525 = cast(%var_5878, dtype="float64") /* ty=Tensor[(7, 16, 14), float64] */;
    %526 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(7, 16, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %527 = cast(meta[relay.Constant][41] /* ty=Tensor[(7, 16, 14), float32] */, dtype="float64") /* ty=Tensor[(7, 16, 14), float64] */;
    %528 = dyn.reshape(%525, %526, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %529 = floor_divide(%527, %528) /* ty=Tensor[(7, 16, 14), float64] */;
    %530 = cast(%529, dtype="float32") /* ty=Tensor[(7, 16, 14), float32] */;
    %531 = cast(meta[relay.Constant][42] /* ty=Tensor[(1, 78), int16] */, dtype="int16") /* ty=Tensor[(1, 78), int16] */;
    %532 = cast(meta[relay.Constant][43] /* ty=Tensor[(1, 546), int16] */, dtype="int16") /* ty=Tensor[(1, 546), int16] */;
    %533 = cast(%var_5892, dtype="float32") /* ty=Tensor[(728), float32] */;
    %534 = reshape(%531, newshape=[6, 1, 13]) /* ty=Tensor[(6, 1, 13), int16] */;
    %535 = reshape(%532, newshape=[6, 7, 13]) /* ty=Tensor[(6, 7, 13), int16] */;
    %536 = reshape(%533, newshape=[1, 728]) /* ty=Tensor[(1, 728), float32] */;
    %537 = @func_219(%534, %535, %536) /* ty=(Tensor[(6, 7, 13), int16], Tensor[(8, 7, 13), float32], Tensor[(1, 728), float32], Tensor[(8, 7, 13), float32], Tensor[(8, 7, 13), float32], Tensor[(8, 7, 13), float32]) */;
    %538 = cast(meta[relay.Constant][41] /* ty=Tensor[(7, 16, 14), float32] */, dtype="float64") /* ty=Tensor[(7, 16, 14), float64] */;
    %539 = shape_of(%var_5878, dtype="int32") /* ty=Tensor[(3), int32] */;
    %540 = cast(%var_5878, dtype="float64") /* ty=Tensor[(7, 16, 14), float64] */;
    %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %542 = add(%523, %524) /* ty=Tensor[(7, 16, 14), float32] */;
    %543 = sinh(%530) /* ty=Tensor[(7, 16, 14), float32] */;
    %544 = %537.3;
    %545 = floor_mod(%540, %541) /* ty=Tensor[(7, 16, 14), float64] */;
    (%542, %543, %544, meta[relay.Constant][42] /* ty=Tensor[(1, 78), int16] */, meta[relay.Constant][43] /* ty=Tensor[(1, 546), int16] */, %var_5892, %545)
  };
  %546(%var_5904, %var_5905) /* ty=(Tensor[(7, 16, 14), float32], Tensor[(7, 16, 14), float32], Tensor[(8, 7, 13), float32], Tensor[(1, 78), int16], Tensor[(1, 546), int16], Tensor[(728), float32], Tensor[(7, 16, 14), float64]) */
}

def @func_5869() -> (Tensor[(360), float64],) {
  %549 = fn () -> (Tensor[(360), float64],) {
    %547 = @func_4680() /* ty=(Tensor[(130), int32], Tensor[(360), float32], Tensor[(11, 2, 11), float32], Tensor[(360), float64]) */;
    %548 = %547.3;
    (%548,)
  };
  %549() /* ty=(Tensor[(360), float64],) */
}

def @func_6488() -> Tensor[(88), float32] {
  @func_6486() /* ty=Tensor[(88), float32] */
}

def @func_2139(%var_2137: Tensor[(896), int16], %var_2138: Tensor[(8, 7, 16), float32]) -> (Tensor[(10, 8, 11), int8], Tensor[(896), int16], Tensor[(11, 2, 11), float32], Tensor[(8, 7, 16), int32]) {
  %565 = fn (%var_2093: Tensor[(896), int16], %var_2121: Tensor[(8, 7, 16), float32]) -> (Tensor[(10, 8, 11), int8], Tensor[(896), int16], Tensor[(11, 2, 11), float32], Tensor[(8, 7, 16), int32]) {
    %550 = @func_1885() /* ty=(Tensor[(11, 2, 11), float32], Tensor[(10, 8, 11), int8], Tensor[(88), float64], Tensor[(880), float64]) */;
    %551 = cast(%var_2093, dtype="int16") /* ty=Tensor[(896), int16] */;
    %552 = cast(%var_2093, dtype="int16") /* ty=Tensor[(896), int16] */;
    %553 = reshape(%551, newshape=[8, 7, 16]) /* ty=Tensor[(8, 7, 16), int16] */;
    %554 = reshape(%552, newshape=[8, 7, 16]) /* ty=Tensor[(8, 7, 16), int16] */;
    %555 = @func_1306(%553, %554) /* ty=Tensor[(8, 7, 16), int16] */;
    %556 = cast(%555, dtype="float32") /* ty=Tensor[(8, 7, 16), float32] */;
    %557 = sin(%556) /* ty=Tensor[(8, 7, 16), float32] */;
    %558 = cast(%var_2121, dtype="int32") /* ty=Tensor[(8, 7, 16), int32] */;
    %559 = shape_of(%557, dtype="int32") /* ty=Tensor[(3), int32] */;
    %560 = cast(%557, dtype="int32") /* ty=Tensor[(8, 7, 16), int32] */;
    %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %562 = %550.1;
    %563 = @func_1655() /* ty=Tensor[(11, 2, 11), float32] */;
    %564 = right_shift(%560, %561) /* ty=Tensor[(8, 7, 16), int32] */;
    (%562, %var_2093, %563, %564)
  };
  %565(%var_2137, %var_2138) /* ty=(Tensor[(10, 8, 11), int8], Tensor[(896), int16], Tensor[(11, 2, 11), float32], Tensor[(8, 7, 16), int32]) */
}

def @func_3994() -> Tensor[(11, 2, 11), float32] {
  %566 = @func_3383() /* ty=(Tensor[(11, 2, 11), float32],) */;
  %566.0
}

def @func_5700() -> (Tensor[(11, 2, 11), float64], Tensor[(11, 2, 11), float64]) {
  @func_5698() /* ty=(Tensor[(11, 2, 11), float64], Tensor[(11, 2, 11), float64]) */
}

def @func_6366() -> Tensor[(11, 2, 11), float32] {
  @func_6364() /* ty=Tensor[(11, 2, 11), float32] */
}

def @func_5305() -> Tensor[(3, 3, 3), bool] {
  @func_5303() /* ty=Tensor[(3, 3, 3), bool] */
}

def @func_1392(%var_1391: Tensor[(8, 6, 6), float32]) -> (Tensor[(8, 6, 6), float32],) {
  %569 = fn (%var_1385: Tensor[(8, 6, 6), float32]) -> (Tensor[(8, 6, 6), float32],) {
    %567 = cast(%var_1385, dtype="float32") /* ty=Tensor[(8, 6, 6), float32] */;
    %568 = acosh(%567) /* ty=Tensor[(8, 6, 6), float32] */;
    (%568,)
  };
  %569(%var_1391) /* ty=(Tensor[(8, 6, 6), float32],) */
}

def @func_4530() -> (Tensor[(130), int32],) {
  %570 = @func_4320() /* ty=Tensor[(130), int32] */;
  (%570,)
}

def @func_5781(%var_5779: Tensor[(10, 3, 7), float64]) -> (Tensor[(8, 6, 6), float32], Tensor[(288), float32], Tensor[(88), float64], Tensor[(10, 3, 7), bool]) {
  @func_5778(%var_5779) /* ty=(Tensor[(8, 6, 6), float32], Tensor[(288), float32], Tensor[(88), float64], Tensor[(10, 3, 7), bool]) */
}

def @func_5140() -> (Tensor[(130), int32], Tensor[(11, 2, 11), float32]) {
  %575 = fn () -> (Tensor[(130), int32], Tensor[(11, 2, 11), float32]) {
    %571 = @func_4530() /* ty=(Tensor[(130), int32],) */;
    %572 = @func_1590() /* ty=(Tensor[(11, 2, 11), float32],) */;
    %573 = %571.0;
    %574 = %572.0;
    (%573, %574)
  };
  %575() /* ty=(Tensor[(130), int32], Tensor[(11, 2, 11), float32]) */
}

def @func_6071(%var_6060: Tensor[(10, 7, 11), float32]) -> Tensor[(10, 7, 11), float32] {
  %576 = cast(%var_6060, dtype="float32") /* ty=Tensor[(10, 7, 11), float32] */;
  sigmoid(%576) /* ty=Tensor[(10, 7, 11), float32] */
}

def @func_4629(%var_4627: Tensor[(2, 180), float32], %var_4628: Tensor[(728), float32]) -> (Tensor[(11, 2, 11), float32], Tensor[(10, 8, 11), int8], Tensor[(11, 2, 11), float64], Tensor[(88), float64], Tensor[(360), float32], Tensor[(2, 180), float32], Tensor[(1, 8, 11), float64], Tensor[(24), bool], Tensor[(6, 11, 8), float32], Tensor[(8, 66), uint32], Tensor[(8, 7, 13), float32], Tensor[(728), float32]) {
  @func_4625(%var_4627, %var_4628) /* ty=(Tensor[(11, 2, 11), float32], Tensor[(10, 8, 11), int8], Tensor[(11, 2, 11), float64], Tensor[(88), float64], Tensor[(360), float32], Tensor[(2, 180), float32], Tensor[(1, 8, 11), float64], Tensor[(24), bool], Tensor[(6, 11, 8), float32], Tensor[(8, 66), uint32], Tensor[(8, 7, 13), float32], Tensor[(728), float32]) */
}

def @func_2440(%var_2439: Tensor[(14, 7, 16), uint32]) -> (Tensor[(14, 7, 16), uint32], Tensor[(14, 7, 16), float32], Tensor[(6, 11, 8), float32], Tensor[(528), uint32]) {
  %588 = fn (%var_2421: Tensor[(14, 7, 16), uint32]) -> (Tensor[(14, 7, 16), uint32], Tensor[(14, 7, 16), float32], Tensor[(6, 11, 8), float32], Tensor[(528), uint32]) {
    %577 = cast(meta[relay.Constant][44] /* ty=Tensor[(14, 7, 16), uint32] */, dtype="uint32") /* ty=Tensor[(14, 7, 16), uint32] */;
    %578 = shape_of(%var_2421, dtype="int32") /* ty=Tensor[(3), int32] */;
    %579 = cast(%var_2421, dtype="uint32") /* ty=Tensor[(14, 7, 16), uint32] */;
    %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %581 = cast(meta[relay.Constant][44] /* ty=Tensor[(14, 7, 16), uint32] */, dtype="float32") /* ty=Tensor[(14, 7, 16), float32] */;
    %582 = cast(meta[relay.Constant][45] /* ty=Tensor[(528), uint32] */, dtype="uint32") /* ty=Tensor[(528), uint32] */;
    %583 = reshape(%582, newshape=[6, 11, 8]) /* ty=Tensor[(6, 11, 8), uint32] */;
    %584 = @func_1330(%583) /* ty=(Tensor[(6, 11, 8), bool], Tensor[(6, 11, 8), float32]) */;
    %585 = minimum(%579, %580) /* ty=Tensor[(14, 7, 16), uint32] */;
    %586 = cosh(%581) /* ty=Tensor[(14, 7, 16), float32] */;
    %587 = %584.1;
    (%585, %586, %587, meta[relay.Constant][45] /* ty=Tensor[(528), uint32] */)
  };
  %588(%var_2439) /* ty=(Tensor[(14, 7, 16), uint32], Tensor[(14, 7, 16), float32], Tensor[(6, 11, 8), float32], Tensor[(528), uint32]) */
}

def @func_2403() -> Tensor[(88), float64] {
  %590 = fn () -> Tensor[(88), float64] {
    %589 = @func_1885() /* ty=(Tensor[(11, 2, 11), float32], Tensor[(10, 8, 11), int8], Tensor[(88), float64], Tensor[(880), float64]) */;
    %589.2
  };
  %590() /* ty=Tensor[(88), float64] */
}

def @func_4680() -> (Tensor[(130), int32], Tensor[(360), float32], Tensor[(11, 2, 11), float32], Tensor[(360), float64]) {
  %591 = @func_4530() /* ty=(Tensor[(130), int32],) */;
  %592 = cast(meta[relay.Constant][46] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
  %593 = reshape(%592, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %594 = @func_3102(%593) /* ty=(Tensor[(11, 2, 11), float32], Tensor[(6, 15, 4), bool], Tensor[(360), float32]) */;
  %595 = @func_1885() /* ty=(Tensor[(11, 2, 11), float32], Tensor[(10, 8, 11), int8], Tensor[(88), float64], Tensor[(880), float64]) */;
  %596 = cast(meta[relay.Constant][46] /* ty=Tensor[(360), float32] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %597 = %591.0;
  %598 = %594.2;
  %599 = %595.0;
  %600 = acos(%596) /* ty=Tensor[(360), float64] */;
  (%597, %598, %599, %600)
}

def @func_1822(%var_1820: Tensor[(11, 2, 11), float32]) -> (Tensor[(11, 2, 11), float64], Tensor[(11, 2, 11), bool], Tensor[(11, 2, 11), int64]) {
  @func_1819(%var_1820) /* ty=(Tensor[(11, 2, 11), float64], Tensor[(11, 2, 11), bool], Tensor[(11, 2, 11), int64]) */
}

def @func_6199() -> (Tensor[(88), float64],) {
  %602 = fn () -> (Tensor[(88), float64],) {
    %601 = @func_3358() /* ty=Tensor[(88), float64] */;
    (%601,)
  };
  %602() /* ty=(Tensor[(88), float64],) */
}

def @func_3511() -> (Tensor[(88), float64],) {
  %610 = fn () -> (Tensor[(88), float64],) {
    %603 = @func_3358() /* ty=Tensor[(88), float64] */;
    %604 = cast(%603, dtype="float32") /* ty=Tensor[(88), float32] */;
    %605 = acos(%604) /* ty=Tensor[(88), float32] */;
    %606 = cast(%605, dtype="float32") /* ty=Tensor[(88), float32] */;
    %607 = atanh(%606) /* ty=Tensor[(88), float32] */;
    %608 = cast(%607, dtype="float64") /* ty=Tensor[(88), float64] */;
    %609 = cos(%608) /* ty=Tensor[(88), float64] */;
    (%609,)
  };
  %610() /* ty=(Tensor[(88), float64],) */
}

def @func_3307(%var_3305: Tensor[(360), float32]) -> (Tensor[(6, 11, 8), float32], Tensor[(360), float32], Tensor[(360), float32], Tensor[(16, 2), bool]) {
  @func_3304(%var_3305) /* ty=(Tensor[(6, 11, 8), float32], Tensor[(360), float32], Tensor[(360), float32], Tensor[(16, 2), bool]) */
}

def @func_6761() -> (Tensor[(11, 2, 11), float64],) {
  %613 = fn () -> (Tensor[(11, 2, 11), float64],) {
    %611 = @func_5698() /* ty=(Tensor[(11, 2, 11), float64], Tensor[(11, 2, 11), float64]) */;
    %612 = %611.1;
    (%612,)
  };
  %613() /* ty=(Tensor[(11, 2, 11), float64],) */
}

def @func_6990() -> (Tensor[(88), float64],) {
  %614 = @func_2402() /* ty=Tensor[(88), float64] */;
  (%614,)
}

def @func_454(%var_443: Tensor[(1, 8, 11), float64], %var_449: Tensor[(10, 8, 11), float64]) -> (Tensor[(1, 8, 11), float64], Tensor[(10, 8, 11), int8]) {
  %615 = cast(%var_443, dtype="float64") /* ty=Tensor[(1, 8, 11), float64] */;
  %616 = cast(%var_443, dtype="int8") /* ty=Tensor[(1, 8, 11), int8] */;
  %617 = cast(%var_449, dtype="int8") /* ty=Tensor[(10, 8, 11), int8] */;
  %618 = atanh(%615) /* ty=Tensor[(1, 8, 11), float64] */;
  %619 = left_shift(%616, %617) /* ty=Tensor[(10, 8, 11), int8] */;
  (%618, %619)
}

def @func_7373(%var_7371: Tensor[(210), float64]) -> (Tensor[(24, 22), bool], Tensor[(24, 22), int8], Tensor[(210), float64], Tensor[(210), float64]) {
  @func_7370(%var_7371) /* ty=(Tensor[(24, 22), bool], Tensor[(24, 22), int8], Tensor[(210), float64], Tensor[(210), float64]) */
}

def @func_2376(%var_2374: Tensor[(288), float32], %var_2375: Tensor[(11, 2, 11), float32]) -> (Tensor[(11, 2, 11), float32], Tensor[(8, 6, 6), float32], Tensor[(288), float32], Tensor[(11, 2, 11), uint64]) {
  @func_2372(%var_2374, %var_2375) /* ty=(Tensor[(11, 2, 11), float32], Tensor[(8, 6, 6), float32], Tensor[(288), float32], Tensor[(11, 2, 11), uint64]) */
}

def @func_223(%var_220: Tensor[(6, 1, 13), int16], %var_221: Tensor[(6, 7, 13), int16], %var_222: Tensor[(1, 728), float32]) -> (Tensor[(6, 7, 13), int16], Tensor[(8, 7, 13), float32], Tensor[(1, 728), float32], Tensor[(8, 7, 13), float32], Tensor[(8, 7, 13), float32], Tensor[(8, 7, 13), float32]) {
  %639 = fn (%var_194: Tensor[(6, 1, 13), int16], %var_195: Tensor[(6, 7, 13), int16], %var_200: Tensor[(1, 728), float32]) -> (Tensor[(6, 7, 13), int16], Tensor[(8, 7, 13), float32], Tensor[(1, 728), float32], Tensor[(8, 7, 13), float32], Tensor[(8, 7, 13), float32], Tensor[(8, 7, 13), float32]) {
    %620 = cast(%var_194, dtype="int16") /* ty=Tensor[(6, 1, 13), int16] */;
    %621 = cast(%var_195, dtype="int16") /* ty=Tensor[(6, 7, 13), int16] */;
    %622 = cast(%var_200, dtype="float32") /* ty=Tensor[(1, 728), float32] */;
    %623 = reshape(%622, newshape=[8, 7, 13]) /* ty=Tensor[(8, 7, 13), float32] */;
    %624 = @func_141(%623) /* ty=(Tensor[(8, 7, 13), float32],) */;
    %625 = cast(%var_200, dtype="float32") /* ty=Tensor[(1, 728), float32] */;
    %626 = reshape(%625, newshape=[8, 7, 13]) /* ty=Tensor[(8, 7, 13), float32] */;
    %627 = @func_141(%626) /* ty=(Tensor[(8, 7, 13), float32],) */;
    %628 = cast(%var_200, dtype="float32") /* ty=Tensor[(1, 728), float32] */;
    %629 = reshape(%628, newshape=[8, 7, 13]) /* ty=Tensor[(8, 7, 13), float32] */;
    %630 = @func_141(%629) /* ty=(Tensor[(8, 7, 13), float32],) */;
    %631 = cast(%var_200, dtype="float32") /* ty=Tensor[(1, 728), float32] */;
    %632 = reshape(%631, newshape=[8, 7, 13]) /* ty=Tensor[(8, 7, 13), float32] */;
    %633 = @func_141(%632) /* ty=(Tensor[(8, 7, 13), float32],) */;
    %634 = multiply(%620, %621) /* ty=Tensor[(6, 7, 13), int16] */;
    %635 = %624.0;
    %636 = %627.0;
    %637 = %630.0;
    %638 = %633.0;
    (%634, %635, %var_200, %636, %637, %638)
  };
  %639(%var_220, %var_221, %var_222) /* ty=(Tensor[(6, 7, 13), int16], Tensor[(8, 7, 13), float32], Tensor[(1, 728), float32], Tensor[(8, 7, 13), float32], Tensor[(8, 7, 13), float32], Tensor[(8, 7, 13), float32]) */
}

def @func_4421() -> Tensor[(11, 2, 11), uint8] {
  %640 = @func_1885() /* ty=(Tensor[(11, 2, 11), float32], Tensor[(10, 8, 11), int8], Tensor[(88), float64], Tensor[(880), float64]) */;
  %641 = %640.0;
  %642 = cast(meta[relay.Constant][47] /* ty=Tensor[(11, 2, 11), float32] */, dtype="uint8") /* ty=Tensor[(11, 2, 11), uint8] */;
  %643 = shape_of(%641, dtype="int32") /* ty=Tensor[(3), int32] */;
  %644 = cast(%641, dtype="uint8") /* ty=Tensor[(11, 2, 11), uint8] */;
  %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  right_shift(%644, %645) /* ty=Tensor[(11, 2, 11), uint8] */
}

def @func_5841() -> (Tensor[(11, 2, 11), uint8], Tensor[(8, 7, 16), int16], Tensor[(896), int16], Tensor[(88), float64]) {
  @func_5839() /* ty=(Tensor[(11, 2, 11), uint8], Tensor[(8, 7, 16), int16], Tensor[(896), int16], Tensor[(88), float64]) */
}

def @func_5778(%var_5747: Tensor[(10, 3, 7), float64]) -> (Tensor[(8, 6, 6), float32], Tensor[(288), float32], Tensor[(88), float64], Tensor[(10, 3, 7), bool]) {
  %646 = cast(meta[relay.Constant][48] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %647 = reshape(%646, newshape=[8, 6, 6]) /* ty=Tensor[(8, 6, 6), float32] */;
  %648 = @func_1390(%647) /* ty=(Tensor[(8, 6, 6), float32],) */;
  %649 = cast(%var_5747, dtype="float64") /* ty=Tensor[(10, 3, 7), float64] */;
  %650 = sinh(%649) /* ty=Tensor[(10, 3, 7), float64] */;
  %651 = cast(%var_5747, dtype="int8") /* ty=Tensor[(10, 3, 7), int8] */;
  %652 = shape_of(%650, dtype="int32") /* ty=Tensor[(3), int32] */;
  %653 = cast(%650, dtype="int8") /* ty=Tensor[(10, 3, 7), int8] */;
  %654 = dyn.reshape(%651, %652, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %655 = minimum(%653, %654) /* ty=Tensor[(10, 3, 7), int8] */;
  %656 = cast(%650, dtype="bool") /* ty=Tensor[(10, 3, 7), bool] */;
  %657 = shape_of(%655, dtype="int32") /* ty=Tensor[(3), int32] */;
  %658 = cast(%655, dtype="bool") /* ty=Tensor[(10, 3, 7), bool] */;
  %659 = dyn.reshape(%656, %657, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %660 = %648.0;
  %661 = @func_4263() /* ty=Tensor[(88), float64] */;
  %662 = less(%658, %659) /* ty=Tensor[(10, 3, 7), bool] */;
  (%660, meta[relay.Constant][48] /* ty=Tensor[(288), float32] */, %661, %662)
}

def @func_3542() -> (Tensor[(88), float64],) {
  @func_3540() /* ty=(Tensor[(88), float64],) */
}

def @func_4482(%var_4481: Tensor[(4, 132), uint32]) -> (Tensor[(11, 2, 11), float32], Tensor[(11, 2, 11), float32], Tensor[(4, 132), bool], Tensor[(6, 11, 8), float32]) {
  %677 = fn (%var_4455: Tensor[(4, 132), uint32]) -> (Tensor[(11, 2, 11), float32], Tensor[(11, 2, 11), float32], Tensor[(4, 132), bool], Tensor[(6, 11, 8), float32]) {
    %663 = @func_1590() /* ty=(Tensor[(11, 2, 11), float32],) */;
    %664 = cast(%var_4455, dtype="uint32") /* ty=Tensor[(4, 132), uint32] */;
    %665 = reshape(%664, newshape=[6, 11, 8]) /* ty=Tensor[(6, 11, 8), uint32] */;
    %666 = @func_1330(%665) /* ty=(Tensor[(6, 11, 8), bool], Tensor[(6, 11, 8), float32]) */;
    %667 = %666.1;
    %668 = cast(%667, dtype="bool") /* ty=Tensor[(6, 11, 8), bool] */;
    %669 = shape_of(%var_4455, dtype="int32") /* ty=Tensor[(2), int32] */;
    %670 = cast(%var_4455, dtype="bool") /* ty=Tensor[(4, 132), bool] */;
    %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %672 = cast(%667, dtype="float32") /* ty=Tensor[(6, 11, 8), float32] */;
    %673 = @func_3994() /* ty=Tensor[(11, 2, 11), float32] */;
    %674 = %663.0;
    %675 = logical_or(%670, %671) /* ty=Tensor[(4, 132), bool] */;
    %676 = exp(%672) /* ty=Tensor[(6, 11, 8), float32] */;
    (%673, %674, %675, %676)
  };
  %677(%var_4481) /* ty=(Tensor[(11, 2, 11), float32], Tensor[(11, 2, 11), float32], Tensor[(4, 132), bool], Tensor[(6, 11, 8), float32]) */
}

def @func_1790(%var_1789: Tensor[(896), int16]) -> (Tensor[(8, 7, 16), int16], Tensor[(896), int16], Tensor[(12, 2, 2), int16], Tensor[(12, 2, 2), float64]) {
  %697 = fn (%var_1768: Tensor[(896), int16]) -> (Tensor[(8, 7, 16), int16], Tensor[(896), int16], Tensor[(12, 2, 2), int16], Tensor[(12, 2, 2), float64]) {
    %678 = cast(%var_1768, dtype="int16") /* ty=Tensor[(896), int16] */;
    %679 = cast(%var_1768, dtype="int16") /* ty=Tensor[(896), int16] */;
    %680 = reshape(%678, newshape=[8, 7, 16]) /* ty=Tensor[(8, 7, 16), int16] */;
    %681 = reshape(%679, newshape=[8, 7, 16]) /* ty=Tensor[(8, 7, 16), int16] */;
    %682 = cast(meta[relay.Constant][49] /* ty=Tensor[(12, 2, 2), float32] */, dtype="float32") /* ty=Tensor[(12, 2, 2), float32] */;
    %683 = exp(%682) /* ty=Tensor[(12, 2, 2), float32] */;
    %684 = cast(meta[relay.Constant][49] /* ty=Tensor[(12, 2, 2), float32] */, dtype="int8") /* ty=Tensor[(12, 2, 2), int8] */;
    %685 = shape_of(%683, dtype="int32") /* ty=Tensor[(3), int32] */;
    %686 = cast(%683, dtype="int8") /* ty=Tensor[(12, 2, 2), int8] */;
    %687 = dyn.reshape(%684, %685, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %688 = multiply(%686, %687) /* ty=Tensor[(12, 2, 2), int8] */;
    %689 = cast(%688, dtype="int16") /* ty=Tensor[(12, 2, 2), int16] */;
    %690 = shape_of(meta[relay.Constant][49] /* ty=Tensor[(12, 2, 2), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %691 = cast(meta[relay.Constant][49] /* ty=Tensor[(12, 2, 2), float32] */, dtype="int16") /* ty=Tensor[(12, 2, 2), int16] */;
    %692 = dyn.reshape(%689, %690, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %693 = cast(%683, dtype="float64") /* ty=Tensor[(12, 2, 2), float64] */;
    %694 = @func_1306(%680, %681) /* ty=Tensor[(8, 7, 16), int16] */;
    %695 = right_shift(%691, %692) /* ty=Tensor[(12, 2, 2), int16] */;
    %696 = cos(%693) /* ty=Tensor[(12, 2, 2), float64] */;
    (%694, %var_1768, %695, %696)
  };
  %697(%var_1789) /* ty=(Tensor[(8, 7, 16), int16], Tensor[(896), int16], Tensor[(12, 2, 2), int16], Tensor[(12, 2, 2), float64]) */
}

def @func_6364() -> Tensor[(11, 2, 11), float32] {
  %698 = @func_2570() /* ty=(Tensor[(11, 2, 11), float32],) */;
  %698.0
}

def @func_6833(%var_6779: int32, %var_6780: Tensor[(6, 6, 11), int32]) -> (Tensor[(6, 6, 11), bool], Tensor[(11, 2, 11), float32], Tensor[(6, 6, 11), float32], Tensor[(8, 7, 16), int16], Tensor[(896), int16], Tensor[(11, 2, 11), int8], Tensor[(6, 6, 11), float32]) {
  %699 = cast(%var_6779, dtype="bool") /* ty=bool */;
  %700 = cast(%var_6780, dtype="bool") /* ty=Tensor[(6, 6, 11), bool] */;
  %701 = cast(%var_6780, dtype="float64") /* ty=Tensor[(6, 6, 11), float64] */;
  %702 = sinh(%701) /* ty=Tensor[(6, 6, 11), float64] */;
  %703 = cast(%702, dtype="float32") /* ty=Tensor[(6, 6, 11), float32] */;
  %704 = cast(%var_6779, dtype="float32") /* ty=float32 */;
  %705 = cast(meta[relay.Constant][50] /* ty=Tensor[(896), int16] */, dtype="int16") /* ty=Tensor[(896), int16] */;
  %706 = cast(meta[relay.Constant][50] /* ty=Tensor[(896), int16] */, dtype="int16") /* ty=Tensor[(896), int16] */;
  %707 = reshape(%705, newshape=[8, 7, 16]) /* ty=Tensor[(8, 7, 16), int16] */;
  %708 = reshape(%706, newshape=[8, 7, 16]) /* ty=Tensor[(8, 7, 16), int16] */;
  %709 = @func_2162() /* ty=(Tensor[(6, 11, 8), float32], Tensor[(24, 22), uint32], Tensor[(11, 2, 11), int8]) */;
  %710 = cast(%702, dtype="float32") /* ty=Tensor[(6, 6, 11), float32] */;
  %711 = less(%699, %700) /* ty=Tensor[(6, 6, 11), bool] */;
  %712 = @func_5190() /* ty=Tensor[(11, 2, 11), float32] */;
  %713 = divide(%703, %704) /* ty=Tensor[(6, 6, 11), float32] */;
  %714 = @func_1306(%707, %708) /* ty=Tensor[(8, 7, 16), int16] */;
  %715 = %709.2;
  %716 = sin(%710) /* ty=Tensor[(6, 6, 11), float32] */;
  (%711, %712, %713, %714, meta[relay.Constant][50] /* ty=Tensor[(896), int16] */, %715, %716)
}

def @func_2230(%var_2229: Tensor[(12, 5, 15), float32]) -> (Tensor[(12, 5, 15), float64], Tensor[(880), float64]) {
  %723 = fn (%var_2216: Tensor[(12, 5, 15), float32]) -> (Tensor[(12, 5, 15), float64], Tensor[(880), float64]) {
    %717 = cast(%var_2216, dtype="float32") /* ty=Tensor[(12, 5, 15), float32] */;
    %718 = asin(%717) /* ty=Tensor[(12, 5, 15), float32] */;
    %719 = cast(%718, dtype="float64") /* ty=Tensor[(12, 5, 15), float64] */;
    %720 = @func_1885() /* ty=(Tensor[(11, 2, 11), float32], Tensor[(10, 8, 11), int8], Tensor[(88), float64], Tensor[(880), float64]) */;
    %721 = cosh(%719) /* ty=Tensor[(12, 5, 15), float64] */;
    %722 = %720.3;
    (%721, %722)
  };
  %723(%var_2229) /* ty=(Tensor[(12, 5, 15), float64], Tensor[(880), float64]) */
}

def @func_4904(%var_4842: Tensor[(360), float32], %var_4878: Tensor[(288), float32]) -> (Tensor[(16, 2), bool], Tensor[(360), float32], Tensor[(3, 3, 3), bool], Tensor[(288), float32], Tensor[(24, 22), bool], Tensor[(88), float64], Tensor[(11, 2, 11), float32], Tensor[(24, 22), uint16]) {
  %724 = cast(%var_4842, dtype="float32") /* ty=Tensor[(360), float32] */;
  %725 = reshape(%724, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %726 = @func_3304(%725) /* ty=(Tensor[(6, 11, 8), float32], Tensor[(360), float32], Tensor[(360), float32], Tensor[(16, 2), bool]) */;
  %727 = cast(%var_4878, dtype="float32") /* ty=Tensor[(288), float32] */;
  %728 = reshape(%727, newshape=[288]) /* ty=Tensor[(288), float32] */;
  %729 = @func_2754(%728) /* ty=(Tensor[(3, 3, 3), bool], Tensor[(?, 728), bool], Tensor[(8, 6, 6), float32], Tensor[(288), float32]) */;
  %730 = @func_3965() /* ty=Tensor[(24, 22), uint32] */;
  %731 = cast(meta[relay.Constant][51] /* ty=Tensor[(24, 22), uint32] */, dtype="float32") /* ty=Tensor[(24, 22), float32] */;
  %732 = shape_of(%730, dtype="int32") /* ty=Tensor[(2), int32] */;
  %733 = cast(%730, dtype="float32") /* ty=Tensor[(24, 22), float32] */;
  %734 = dyn.reshape(%731, %732, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %735 = power(%733, %734) /* ty=Tensor[(24, 22), float32] */;
  %736 = cast(%735, dtype="float32") /* ty=Tensor[(24, 22), float32] */;
  %737 = sinh(%736) /* ty=Tensor[(24, 22), float32] */;
  %738 = cast(%737, dtype="float32") /* ty=Tensor[(24, 22), float32] */;
  %739 = erf(%738) /* ty=Tensor[(24, 22), float32] */;
  %740 = cast(%737, dtype="bool") /* ty=Tensor[(24, 22), bool] */;
  %741 = shape_of(%739, dtype="int32") /* ty=Tensor[(2), int32] */;
  %742 = cast(%739, dtype="bool") /* ty=Tensor[(24, 22), bool] */;
  %743 = dyn.reshape(%740, %741, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %744 = cast(%735, dtype="uint16") /* ty=Tensor[(24, 22), uint16] */;
  %745 = shape_of(%737, dtype="int32") /* ty=Tensor[(2), int32] */;
  %746 = cast(%737, dtype="uint16") /* ty=Tensor[(24, 22), uint16] */;
  %747 = dyn.reshape(%744, %745, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %748 = %726.3;
  %749 = %729.0;
  %750 = less_equal(%742, %743) /* ty=Tensor[(24, 22), bool] */;
  %751 = @func_4263() /* ty=Tensor[(88), float64] */;
  %752 = @func_1620() /* ty=Tensor[(11, 2, 11), float32] */;
  %753 = add(%746, %747) /* ty=Tensor[(24, 22), uint16] */;
  (%748, %var_4842, %749, %var_4878, %750, %751, %752, %753)
}

def @func_4682() -> (Tensor[(130), int32], Tensor[(360), float32], Tensor[(11, 2, 11), float32], Tensor[(360), float64]) {
  @func_4680() /* ty=(Tensor[(130), int32], Tensor[(360), float32], Tensor[(11, 2, 11), float32], Tensor[(360), float64]) */
}

def @func_4032() -> (Tensor[(24, 22), uint32],) {
  %754 = @func_3965() /* ty=Tensor[(24, 22), uint32] */;
  (%754,)
}

def @func_2706(%var_2680: Tensor[(1, 6, 13), float32], %var_2681: Tensor[(8, 6, 13), float32]) -> Tensor[(8, 6, 13), float32] {
  %755 = cast(%var_2680, dtype="float32") /* ty=Tensor[(1, 6, 13), float32] */;
  %756 = cast(%var_2681, dtype="float32") /* ty=Tensor[(8, 6, 13), float32] */;
  add(%755, %756) /* ty=Tensor[(8, 6, 13), float32] */
}

def @func_5191() -> Tensor[(11, 2, 11), float32] {
  %758 = fn () -> Tensor[(11, 2, 11), float32] {
    %757 = @func_1590() /* ty=(Tensor[(11, 2, 11), float32],) */;
    %757.0
  };
  %758() /* ty=Tensor[(11, 2, 11), float32] */
}

def @func_1332(%var_1331: Tensor[(6, 11, 8), uint32]) -> (Tensor[(6, 11, 8), bool], Tensor[(6, 11, 8), float32]) {
  %766 = fn (%var_1322: Tensor[(6, 11, 8), uint32]) -> (Tensor[(6, 11, 8), bool], Tensor[(6, 11, 8), float32]) {
    %759 = cast(%var_1322, dtype="bool") /* ty=Tensor[(6, 11, 8), bool] */;
    %760 = shape_of(meta[relay.Constant][52] /* ty=Tensor[(6, 11, 8), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %761 = cast(meta[relay.Constant][52] /* ty=Tensor[(6, 11, 8), uint32] */, dtype="bool") /* ty=Tensor[(6, 11, 8), bool] */;
    %762 = dyn.reshape(%759, %760, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %763 = cast(meta[relay.Constant][52] /* ty=Tensor[(6, 11, 8), uint32] */, dtype="float32") /* ty=Tensor[(6, 11, 8), float32] */;
    %764 = greater_equal(%761, %762) /* ty=Tensor[(6, 11, 8), bool] */;
    %765 = acos(%763) /* ty=Tensor[(6, 11, 8), float32] */;
    (%764, %765)
  };
  %766(%var_1331) /* ty=(Tensor[(6, 11, 8), bool], Tensor[(6, 11, 8), float32]) */
}

def @func_3789(%var_3787: Tensor[(288), float32]) -> (Tensor[(3, 3, 3), bool], Tensor[(180), uint16], Tensor[(8, 6, 6), float32], Tensor[(288), float32], Tensor[(11, 2, 11), float32], Tensor[(88), float64]) {
  @func_3786(%var_3787) /* ty=(Tensor[(3, 3, 3), bool], Tensor[(180), uint16], Tensor[(8, 6, 6), float32], Tensor[(288), float32], Tensor[(11, 2, 11), float32], Tensor[(88), float64]) */
}

def @func_1592() -> (Tensor[(11, 2, 11), float32],) {
  @func_1590() /* ty=(Tensor[(11, 2, 11), float32],) */
}

def @func_4946() -> (Tensor[(11, 2, 11), float32], Tensor[(130), int32]) {
  %767 = @func_3383() /* ty=(Tensor[(11, 2, 11), float32],) */;
  %768 = @func_4530() /* ty=(Tensor[(130), int32],) */;
  %769 = %767.0;
  %770 = %768.0;
  (%769, %770)
}

def @func_4948() -> (Tensor[(11, 2, 11), float32], Tensor[(130), int32]) {
  @func_4946() /* ty=(Tensor[(11, 2, 11), float32], Tensor[(130), int32]) */
}

def @func_1622() -> Tensor[(11, 2, 11), float32] {
  @func_1620() /* ty=Tensor[(11, 2, 11), float32] */
}

def @func_3965() -> Tensor[(24, 22), uint32] {
  %771 = @func_2162() /* ty=(Tensor[(6, 11, 8), float32], Tensor[(24, 22), uint32], Tensor[(11, 2, 11), int8]) */;
  %771.1
}

def @func_4238() -> (Tensor[(88), float64], Tensor[(11, 2, 11), float32]) {
  @func_4236() /* ty=(Tensor[(88), float64], Tensor[(11, 2, 11), float32]) */
}

def @func_7008() -> Tensor[(11, 2, 11), float32] {
  %772 = fn () -> Tensor[(11, 2, 11), float32] {
    @func_6364() /* ty=Tensor[(11, 2, 11), float32] */
  };
  %772() /* ty=Tensor[(11, 2, 11), float32] */
}

def @func_367(%var_344: Tensor[(1, 2, 16), bool], %var_345: Tensor[(9, 2, 16), bool]) -> (Tensor[(9, 2, 16), bool], Tensor[(1, 2, 16), float32]) {
  %773 = cast(%var_344, dtype="bool") /* ty=Tensor[(1, 2, 16), bool] */;
  %774 = cast(%var_345, dtype="bool") /* ty=Tensor[(9, 2, 16), bool] */;
  %775 = cast(%var_344, dtype="float32") /* ty=Tensor[(1, 2, 16), float32] */;
  %776 = logical_or(%773, %774) /* ty=Tensor[(9, 2, 16), bool] */;
  %777 = log10(%775) /* ty=Tensor[(1, 2, 16), float32] */;
  (%776, %777)
}

def @func_2641() -> (Tensor[(11, 2, 11), float32], Tensor[(3, 3, 3), bool], Tensor[(728, 1), float32], Tensor[(130), float32], Tensor[(78), int16], Tensor[(728), float32]) {
  %778 = @func_1590() /* ty=(Tensor[(11, 2, 11), float32],) */;
  %779 = @func_2318() /* ty=(Tensor[(3, 3, 3), bool],) */;
  %780 = cast(meta[relay.Constant][53] /* ty=Tensor[(130), float32] */, dtype="float32") /* ty=Tensor[(130), float32] */;
  %781 = cast(meta[relay.Constant][54] /* ty=Tensor[(78), int16] */, dtype="int16") /* ty=Tensor[(78), int16] */;
  %782 = cast(meta[relay.Constant][55] /* ty=Tensor[(728), float32] */, dtype="float32") /* ty=Tensor[(728), float32] */;
  %783 = reshape(%780, newshape=[5, 13, 2]) /* ty=Tensor[(5, 13, 2), float32] */;
  %784 = reshape(%781, newshape=[78]) /* ty=Tensor[(78), int16] */;
  %785 = reshape(%782, newshape=[728, 1]) /* ty=Tensor[(728, 1), float32] */;
  %786 = @func_1870(%783, %784, %785) /* ty=(Tensor[(6, 11, 8), bool], Tensor[(528), uint32], Tensor[(5, 13, 2), float64], Tensor[(8, 7, 13), float32], Tensor[(78), int16], Tensor[(1, 546), int16], Tensor[(728, 1), float32]) */;
  %787 = %778.0;
  %788 = %779.0;
  %789 = %786.6;
  (%787, %788, %789, meta[relay.Constant][53] /* ty=Tensor[(130), float32] */, meta[relay.Constant][54] /* ty=Tensor[(78), int16] */, meta[relay.Constant][55] /* ty=Tensor[(728), float32] */)
}

def @func_5110() -> (Tensor[(11, 2, 11), float32], Tensor[(288), float32], Tensor[(288), float32], Tensor[(24, 22), uint32]) {
  %790 = @func_3383() /* ty=(Tensor[(11, 2, 11), float32],) */;
  %791 = cast(meta[relay.Constant][56] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %792 = reshape(%791, newshape=[288]) /* ty=Tensor[(288), float32] */;
  %793 = @func_2754(%792) /* ty=(Tensor[(3, 3, 3), bool], Tensor[(?, 728), bool], Tensor[(8, 6, 6), float32], Tensor[(288), float32]) */;
  %794 = @func_2162() /* ty=(Tensor[(6, 11, 8), float32], Tensor[(24, 22), uint32], Tensor[(11, 2, 11), int8]) */;
  %795 = %790.0;
  %796 = %793.3;
  %797 = %794.1;
  (%795, %796, meta[relay.Constant][56] /* ty=Tensor[(288), float32] */, %797)
}

def @func_7309() -> (Tensor[(11, 2, 11), uint8],) {
  %799 = fn () -> (Tensor[(11, 2, 11), uint8],) {
    %798 = @func_4791() /* ty=Tensor[(11, 2, 11), uint8] */;
    (%798,)
  };
  %799() /* ty=(Tensor[(11, 2, 11), uint8],) */
}

def @func_7150(%var_7148: Tensor[(24, 22), uint32]) -> (Tensor[(728, 1), float32], Tensor[(24, 22), float32], Tensor[(6, 15, 4), bool], Tensor[(360), float32]) {
  @func_7147(%var_7148) /* ty=(Tensor[(728, 1), float32], Tensor[(24, 22), float32], Tensor[(6, 15, 4), bool], Tensor[(360), float32]) */
}

def @func_5363() -> Tensor[(11, 2, 11), uint8] {
  @func_5361() /* ty=Tensor[(11, 2, 11), uint8] */
}

def @func_6422(%var_6420: Tensor[(210), float64]) -> (Tensor[(6, 11, 8), uint64], Tensor[(10, 3, 7), bool], Tensor[(210), float64]) {
  @func_6419(%var_6420) /* ty=(Tensor[(6, 11, 8), uint64], Tensor[(10, 3, 7), bool], Tensor[(210), float64]) */
}

def @func_5977() -> Tensor[(13, 12, 4), float32] {
  @func_5975() /* ty=Tensor[(13, 12, 4), float32] */
}

def @func_7343(%var_7342: Tensor[(32), bool]) -> (Tensor[(88), float64], Tensor[(11, 2, 11), float32], Tensor[(32), bool], Tensor[(288), bool]) {
  %807 = fn (%var_7317: Tensor[(32), bool]) -> (Tensor[(88), float64], Tensor[(11, 2, 11), float32], Tensor[(32), bool], Tensor[(288), bool]) {
    %800 = cast(%var_7317, dtype="bool") /* ty=Tensor[(32), bool] */;
    %801 = cast(meta[relay.Constant][57] /* ty=Tensor[(288), bool] */, dtype="bool") /* ty=Tensor[(288), bool] */;
    %802 = reshape(%800, newshape=[32]) /* ty=Tensor[(32), bool] */;
    %803 = reshape(%801, newshape=[288]) /* ty=Tensor[(288), bool] */;
    %804 = @func_2907(%802, %803) /* ty=(Tensor[(88), float64], Tensor[(8, 7, 13), float32], Tensor[(1, 2, 16), float32], Tensor[(32), bool], Tensor[(288), bool], Tensor[(11, 2, 11), float32], Tensor[(728), float32], Tensor[(11, 2, 11), float32]) */;
    %805 = @func_2402() /* ty=Tensor[(88), float64] */;
    %806 = %804.7;
    (%805, %806, %var_7317, meta[relay.Constant][57] /* ty=Tensor[(288), bool] */)
  };
  %807(%var_7342) /* ty=(Tensor[(88), float64], Tensor[(11, 2, 11), float32], Tensor[(32), bool], Tensor[(288), bool]) */
}

def @func_4728() -> (Tensor[(11, 2, 11), uint8], Tensor[(360), float64], Tensor[(11, 2, 11), float64], Tensor[(88), float64], Tensor[(8, 6, 6), float32], Tensor[(288), float32]) {
  %822 = fn () -> (Tensor[(11, 2, 11), uint8], Tensor[(360), float64], Tensor[(11, 2, 11), float64], Tensor[(88), float64], Tensor[(8, 6, 6), float32], Tensor[(288), float32]) {
    %808 = @func_4680() /* ty=(Tensor[(130), int32], Tensor[(360), float32], Tensor[(11, 2, 11), float32], Tensor[(360), float64]) */;
    %809 = %808.1;
    %810 = cast(%809, dtype="float64") /* ty=Tensor[(360), float64] */;
    %811 = @func_1655() /* ty=Tensor[(11, 2, 11), float32] */;
    %812 = cast(%811, dtype="float64") /* ty=Tensor[(11, 2, 11), float64] */;
    %813 = @func_3540() /* ty=(Tensor[(88), float64],) */;
    %814 = cast(meta[relay.Constant][58] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
    %815 = reshape(%814, newshape=[8, 6, 6]) /* ty=Tensor[(8, 6, 6), float32] */;
    %816 = @func_1390(%815) /* ty=(Tensor[(8, 6, 6), float32],) */;
    %817 = @func_4421() /* ty=Tensor[(11, 2, 11), uint8] */;
    %818 = cos(%810) /* ty=Tensor[(360), float64] */;
    %819 = acosh(%812) /* ty=Tensor[(11, 2, 11), float64] */;
    %820 = %813.0;
    %821 = %816.0;
    (%817, %818, %819, %820, %821, meta[relay.Constant][58] /* ty=Tensor[(288), float32] */)
  };
  %822() /* ty=(Tensor[(11, 2, 11), uint8], Tensor[(360), float64], Tensor[(11, 2, 11), float64], Tensor[(88), float64], Tensor[(8, 6, 6), float32], Tensor[(288), float32]) */
}

def @func_5361() -> Tensor[(11, 2, 11), uint8] {
  @func_4421() /* ty=Tensor[(11, 2, 11), uint8] */
}

def @func_4908(%var_4906: Tensor[(360), float32], %var_4907: Tensor[(288), float32]) -> (Tensor[(16, 2), bool], Tensor[(360), float32], Tensor[(3, 3, 3), bool], Tensor[(288), float32], Tensor[(24, 22), bool], Tensor[(88), float64], Tensor[(11, 2, 11), float32], Tensor[(24, 22), uint16]) {
  @func_4904(%var_4906, %var_4907) /* ty=(Tensor[(16, 2), bool], Tensor[(360), float32], Tensor[(3, 3, 3), bool], Tensor[(288), float32], Tensor[(24, 22), bool], Tensor[(88), float64], Tensor[(11, 2, 11), float32], Tensor[(24, 22), uint16]) */
}

def @func_7065(%var_7033: Tensor[(13, 5, 7), float32]) -> (Tensor[(13, 5, 7), float64],) {
  %823 = cast(%var_7033, dtype="float32") /* ty=Tensor[(13, 5, 7), float32] */;
  %824 = asinh(%823) /* ty=Tensor[(13, 5, 7), float32] */;
  %825 = cast(%824, dtype="float64") /* ty=Tensor[(13, 5, 7), float64] */;
  %826 = asin(%825) /* ty=Tensor[(13, 5, 7), float64] */;
  (%826,)
}

def @func_7222(%var_7221: Tensor[(728), float32]) -> (Tensor[(11, 2, 11), float32], Tensor[(130), float32], Tensor[(130), float32], Tensor[(78), int16], Tensor[(728), float32], Tensor[(130), int32]) {
  %838 = fn (%var_7185: Tensor[(728), float32]) -> (Tensor[(11, 2, 11), float32], Tensor[(130), float32], Tensor[(130), float32], Tensor[(78), int16], Tensor[(728), float32], Tensor[(130), int32]) {
    %827 = cast(meta[relay.Constant][59] /* ty=Tensor[(130), float32] */, dtype="float32") /* ty=Tensor[(130), float32] */;
    %828 = cast(meta[relay.Constant][60] /* ty=Tensor[(78), int16] */, dtype="int16") /* ty=Tensor[(78), int16] */;
    %829 = cast(%var_7185, dtype="float32") /* ty=Tensor[(728), float32] */;
    %830 = reshape(%827, newshape=[130]) /* ty=Tensor[(130), float32] */;
    %831 = reshape(%828, newshape=[78]) /* ty=Tensor[(78), int16] */;
    %832 = reshape(%829, newshape=[1, 728]) /* ty=Tensor[(1, 728), float32] */;
    %833 = @func_6503(%830, %831, %832) /* ty=(Tensor[(11, 2, 11), float32], Tensor[(728, 1), float32], Tensor[(130), float32], Tensor[(78), int16], Tensor[(1, 728), float32]) */;
    %834 = @func_5139() /* ty=(Tensor[(130), int32], Tensor[(11, 2, 11), float32]) */;
    %835 = @func_1620() /* ty=Tensor[(11, 2, 11), float32] */;
    %836 = %833.2;
    %837 = %834.0;
    (%835, %836, meta[relay.Constant][59] /* ty=Tensor[(130), float32] */, meta[relay.Constant][60] /* ty=Tensor[(78), int16] */, %var_7185, %837)
  };
  %838(%var_7221) /* ty=(Tensor[(11, 2, 11), float32], Tensor[(130), float32], Tensor[(130), float32], Tensor[(78), int16], Tensor[(728), float32], Tensor[(130), int32]) */
}

def @func_6549() -> Tensor[(13, 12, 4), bool] {
  @func_6547() /* ty=Tensor[(13, 12, 4), bool] */
}

def @func_2643() -> (Tensor[(11, 2, 11), float32], Tensor[(3, 3, 3), bool], Tensor[(728, 1), float32], Tensor[(130), float32], Tensor[(78), int16], Tensor[(728), float32]) {
  @func_2641() /* ty=(Tensor[(11, 2, 11), float32], Tensor[(3, 3, 3), bool], Tensor[(728, 1), float32], Tensor[(130), float32], Tensor[(78), int16], Tensor[(728), float32]) */
}

def @func_6325(%var_6322: Tensor[(10, 14, 9), float32]) -> (Tensor[(10, 14, 9), float32],) {
  %839 = cast(%var_6322, dtype="float32") /* ty=Tensor[(10, 14, 9), float32] */;
  %840 = exp(%839) /* ty=Tensor[(10, 14, 9), float32] */;
  (%840,)
}

def @func_2936() -> (Tensor[(11, 2, 11), float32], Tensor[(12, 4, 15), uint16], Tensor[(180), uint16]) {
  %846 = fn () -> (Tensor[(11, 2, 11), float32], Tensor[(12, 4, 15), uint16], Tensor[(180), uint16]) {
    %841 = @func_1590() /* ty=(Tensor[(11, 2, 11), float32],) */;
    %842 = cast(meta[relay.Constant][61] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
    %843 = reshape(%842, newshape=[12, 1, 15]) /* ty=Tensor[(12, 1, 15), uint16] */;
    %844 = %841.0;
    %845 = @func_1081(%843) /* ty=Tensor[(12, 4, 15), uint16] */;
    (%844, %845, meta[relay.Constant][61] /* ty=Tensor[(180), uint16] */)
  };
  %846() /* ty=(Tensor[(11, 2, 11), float32], Tensor[(12, 4, 15), uint16], Tensor[(180), uint16]) */
}

def @func_3383() -> (Tensor[(11, 2, 11), float32],) {
  %847 = @func_2935() /* ty=(Tensor[(11, 2, 11), float32], Tensor[(12, 4, 15), uint16], Tensor[(180), uint16]) */;
  %848 = %847.0;
  (%848,)
}

def @func_1309(%var_1307: Tensor[(8, 7, 16), int16], %var_1308: Tensor[(8, 7, 16), int16]) -> Tensor[(8, 7, 16), int16] {
  %853 = fn (%var_1301: Tensor[(8, 7, 16), int16], %var_1302: Tensor[(8, 7, 16), int16]) -> Tensor[(8, 7, 16), int16] {
    %849 = cast(%var_1302, dtype="int16") /* ty=Tensor[(8, 7, 16), int16] */;
    %850 = shape_of(%var_1301, dtype="int32") /* ty=Tensor[(3), int32] */;
    %851 = cast(%var_1301, dtype="int16") /* ty=Tensor[(8, 7, 16), int16] */;
    %852 = dyn.reshape(%849, %850, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    minimum(%851, %852) /* ty=Tensor[(8, 7, 16), int16] */
  };
  %853(%var_1307, %var_1308) /* ty=Tensor[(8, 7, 16), int16] */
}

def @func_4136() -> (Tensor[(10, 8, 11), int8], Tensor[(13, 12, 4), uint64]) {
  %857 = fn () -> (Tensor[(10, 8, 11), int8], Tensor[(13, 12, 4), uint64]) {
    %854 = @func_1885() /* ty=(Tensor[(11, 2, 11), float32], Tensor[(10, 8, 11), int8], Tensor[(88), float64], Tensor[(880), float64]) */;
    %855 = %854.1;
    %856 = @func_3886() /* ty=Tensor[(13, 12, 4), uint64] */;
    (%855, %856)
  };
  %857() /* ty=(Tensor[(10, 8, 11), int8], Tensor[(13, 12, 4), uint64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen31/build/output.py:2452: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen31/build/output.py", line 2457, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(1024) tvmgen_default_fused_logical_xor_kernel0(int64_t* __restrict__ T_logical_xor, int64_t* __restrict__ placeholder, int64_t* __restrict__ placeholder1) {
  if (((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) < 1050) {
    T_logical_xor[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))] = (placeholder[(0)] ^ placeholder1[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))]);
  }
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

