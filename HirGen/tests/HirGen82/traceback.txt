==========mod==========
#[version = "0.0.5"]
def @func_860() -> (Tensor[(16, 9, 2), bool], Tensor[(99, 9), float32], Tensor[(704, 1), float64], Tensor[(2, 10, 8), float64], Tensor[(160), bool], Tensor[(2, 10, 8), float64], Tensor[(8, 260), int64], Tensor[(2080), float32]) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(16, 1, 2), int16] */, dtype="bool") /* ty=Tensor[(16, 1, 2), bool] */;
  %1 = cast(meta[relay.Constant][1] /* ty=Tensor[(16, 9, 2), int16] */, dtype="bool") /* ty=Tensor[(16, 9, 2), bool] */;
  %2 = cast(meta[relay.Constant][2] /* ty=Tensor[(704, 1), float64] */, dtype="float64") /* ty=Tensor[(704, 1), float64] */;
  %3 = reshape(%2, newshape=[8, 8, 11]) /* ty=Tensor[(8, 8, 11), float64] */;
  %4 = @func_563(%3) /* ty=(Tensor[(10, 13, 16), int64], Tensor[(8, 260), int64], Tensor[(160), bool], Tensor[(99, 9), float32], Tensor[(1, 7, 9), float32], Tensor[(21, 3), float32], Tensor[(9, 11, 9), float32], Tensor[(8, 8, 11), float32], Tensor[(9, 11, 9), float32]) */;
  %5 = cast(meta[relay.Constant][3] /* ty=Tensor[(2080), int64] */, dtype="int64") /* ty=Tensor[(2080), int64] */;
  %6 = cast(meta[relay.Constant][3] /* ty=Tensor[(2080), int64] */, dtype="int64") /* ty=Tensor[(2080), int64] */;
  %7 = cast(meta[relay.Constant][4] /* ty=Tensor[(160), bool] */, dtype="bool") /* ty=Tensor[(160), bool] */;
  %8 = %4.3;
  %9 = cast(%8, dtype="float32") /* ty=Tensor[(99, 9), float32] */;
  %10 = cast(meta[relay.Constant][3] /* ty=Tensor[(2080), int64] */, dtype="int64") /* ty=Tensor[(2080), int64] */;
  %11 = reshape(%5, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), int64] */;
  %12 = reshape(%6, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), int64] */;
  %13 = reshape(%7, newshape=[160]) /* ty=Tensor[(160), bool] */;
  %14 = reshape(%9, newshape=[99, 9]) /* ty=Tensor[(99, 9), float32] */;
  %15 = reshape(%10, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), int64] */;
  %16 = @func_272(%11, %12, %13, %14, %15) /* ty=(Tensor[(10, 13, 16), int64], Tensor[(2, 10, 8), bool], Tensor[(9, 11, 9), float32], Tensor[(99, 9), float32], Tensor[(160), float32], Tensor[(10, 13, 16), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64]) */;
  %17 = cast(meta[relay.Constant][3] /* ty=Tensor[(2080), int64] */, dtype="float32") /* ty=Tensor[(2080), float32] */;
  %18 = sinh(%17) /* ty=Tensor[(2080), float32] */;
  %19 = cast(%18, dtype="int64") /* ty=Tensor[(2080), int64] */;
  %20 = cast(meta[relay.Constant][3] /* ty=Tensor[(2080), int64] */, dtype="int64") /* ty=Tensor[(2080), int64] */;
  %21 = cast(meta[relay.Constant][4] /* ty=Tensor[(160), bool] */, dtype="bool") /* ty=Tensor[(160), bool] */;
  %22 = cast(%8, dtype="float32") /* ty=Tensor[(99, 9), float32] */;
  %23 = cast(meta[relay.Constant][3] /* ty=Tensor[(2080), int64] */, dtype="int64") /* ty=Tensor[(2080), int64] */;
  %24 = reshape(%19, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), int64] */;
  %25 = reshape(%20, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), int64] */;
  %26 = reshape(%21, newshape=[160]) /* ty=Tensor[(160), bool] */;
  %27 = reshape(%22, newshape=[99, 9]) /* ty=Tensor[(99, 9), float32] */;
  %28 = reshape(%23, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), int64] */;
  %29 = @func_272(%24, %25, %26, %27, %28) /* ty=(Tensor[(10, 13, 16), int64], Tensor[(2, 10, 8), bool], Tensor[(9, 11, 9), float32], Tensor[(99, 9), float32], Tensor[(160), float32], Tensor[(10, 13, 16), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64]) */;
  %30 = cast(meta[relay.Constant][2] /* ty=Tensor[(704, 1), float64] */, dtype="float64") /* ty=Tensor[(704, 1), float64] */;
  %31 = reshape(%30, newshape=[8, 8, 11]) /* ty=Tensor[(8, 8, 11), float64] */;
  %32 = @func_563(%31) /* ty=(Tensor[(10, 13, 16), int64], Tensor[(8, 260), int64], Tensor[(160), bool], Tensor[(99, 9), float32], Tensor[(1, 7, 9), float32], Tensor[(21, 3), float32], Tensor[(9, 11, 9), float32], Tensor[(8, 8, 11), float32], Tensor[(9, 11, 9), float32]) */;
  %33 = cast(%18, dtype="float32") /* ty=Tensor[(2080), float32] */;
  %34 = not_equal(%0, %1) /* ty=Tensor[(16, 9, 2), bool] */;
  %35 = %16.7;
  %36 = %29.8;
  %37 = %32.1;
  %38 = sin(%33) /* ty=Tensor[(2080), float32] */;
  (%34, %8, meta[relay.Constant][2] /* ty=Tensor[(704, 1), float64] */, %35, meta[relay.Constant][4] /* ty=Tensor[(160), bool] */, %36, %37, %38)
}

def @func_3789(%var_3765: Tensor[(6, 3, 11), int64], %var_3783: Tensor[(1728), float64]) -> (Tensor[(6, 3, 11), int64], Tensor[(6, 3, 11), float64], Tensor[(9, 16, 12), float64], Tensor[(1728), float64]) {
  %39 = cast(%var_3765, dtype="int64") /* ty=Tensor[(6, 3, 11), int64] */;
  %40 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(6, 3, 11), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %41 = cast(meta[relay.Constant][5] /* ty=Tensor[(6, 3, 11), int64] */, dtype="int64") /* ty=Tensor[(6, 3, 11), int64] */;
  %42 = dyn.reshape(%39, %40, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %43 = cast(%var_3765, dtype="float64") /* ty=Tensor[(6, 3, 11), float64] */;
  %44 = cast(%var_3783, dtype="float64") /* ty=Tensor[(1728), float64] */;
  %45 = cast(%var_3783, dtype="float64") /* ty=Tensor[(1728), float64] */;
  %46 = reshape(%44, newshape=[9, 16, 12]) /* ty=Tensor[(9, 16, 12), float64] */;
  %47 = reshape(%45, newshape=[9, 16, 12]) /* ty=Tensor[(9, 16, 12), float64] */;
  %48 = @func_581(%46, %47) /* ty=(Tensor[(9, 16, 12), float64],) */;
  %49 = bitwise_xor(%41, %42) /* ty=Tensor[(6, 3, 11), int64] */;
  %50 = acos(%43) /* ty=Tensor[(6, 3, 11), float64] */;
  %51 = %48.0;
  (%49, %50, %51, %var_3783)
}

def @func_4462() -> Tensor[(12, 48), float64] {
  %52 = @func_2015() /* ty=(Tensor[(2, 10, 8), float64], float64, Tensor[(1260), int16], Tensor[(12, 48), float64], Tensor[(2, 10, 8), float64], Tensor[(24, 72), float64]) */;
  %52.3
}

def @func_2714(%var_2682: Tensor[(16, 7, 6), float64]) -> (Tensor[(2, 7, 16), bool], Tensor[(224), uint8], Tensor[(16, 7, 6), int8]) {
  %53 = cast(meta[relay.Constant][6] /* ty=Tensor[(224), uint8] */, dtype="uint8") /* ty=Tensor[(224), uint8] */;
  %54 = cast(meta[relay.Constant][6] /* ty=Tensor[(224), uint8] */, dtype="uint8") /* ty=Tensor[(224), uint8] */;
  %55 = reshape(%53, newshape=[2, 7, 16]) /* ty=Tensor[(2, 7, 16), uint8] */;
  %56 = reshape(%54, newshape=[2, 7, 16]) /* ty=Tensor[(2, 7, 16), uint8] */;
  %57 = @func_2559(%55, %56) /* ty=(Tensor[(2, 7, 16), bool], Tensor[(2, 10, 8), float64], Tensor[(8, 88), bool]) */;
  %58 = cast(%var_2682, dtype="float64") /* ty=Tensor[(16, 7, 6), float64] */;
  %59 = log10(%58) /* ty=Tensor[(16, 7, 6), float64] */;
  %60 = cast(%var_2682, dtype="int8") /* ty=Tensor[(16, 7, 6), int8] */;
  %61 = shape_of(%59, dtype="int32") /* ty=Tensor[(3), int32] */;
  %62 = cast(%59, dtype="int8") /* ty=Tensor[(16, 7, 6), int8] */;
  %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %64 = %57.0;
  %65 = left_shift(%62, %63) /* ty=Tensor[(16, 7, 6), int8] */;
  (%64, meta[relay.Constant][6] /* ty=Tensor[(224), uint8] */, %65)
}

def @func_1315() -> Tensor[(2, 10, 8), float64] {
  %66 = @func_1156() /* ty=(Tensor[(2, 10, 8), float64], Tensor[(13, 2, 4), bool], Tensor[(104), uint16]) */;
  %66.0
}

def @func_3716() -> (Tensor[(2, 10, 8), float64],) {
  %67 = @func_1289() /* ty=(Tensor[(2, 10, 8), float64],) */;
  %68 = %67.0;
  (%68,)
}

def @func_2015() -> (Tensor[(2, 10, 8), float64], float64, Tensor[(1260), int16], Tensor[(12, 48), float64], Tensor[(2, 10, 8), float64], Tensor[(24, 72), float64]) {
  %69 = cast(meta[relay.Constant][7] /* ty=Tensor[(1260), int16] */, dtype="int16") /* ty=Tensor[(1260), int16] */;
  %70 = cast(meta[relay.Constant][7] /* ty=Tensor[(1260), int16] */, dtype="int16") /* ty=Tensor[(1260), int16] */;
  %71 = cast(meta[relay.Constant][8] /* ty=Tensor[(12, 48), float64] */, dtype="float64") /* ty=Tensor[(12, 48), float64] */;
  %72 = reshape(%69, newshape=[10, 14, 9]) /* ty=Tensor[(10, 14, 9), int16] */;
  %73 = reshape(%70, newshape=[10, 14, 9]) /* ty=Tensor[(10, 14, 9), int16] */;
  %74 = reshape(%71, newshape=[1, 576]) /* ty=Tensor[(1, 576), float64] */;
  %75 = @func_1956(%72, %73, %74) /* ty=(Tensor[(10, 14, 9), float64], float64, Tensor[(10, 14, 9), int8], Tensor[(?, 576), float32], Tensor[(?, 576), float32]) */;
  %76 = cast(meta[relay.Constant][9] /* ty=Tensor[(24, 72), float64] */, dtype="float64") /* ty=Tensor[(24, 72), float64] */;
  %77 = reshape(%76, newshape=[1728]) /* ty=Tensor[(1728), float64] */;
  %78 = @func_1732(%77) /* ty=(Tensor[(2, 10, 8), float64], Tensor[(9, 16, 12), float64], Tensor[(1728), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64]) */;
  %79 = @func_1315() /* ty=Tensor[(2, 10, 8), float64] */;
  %80 = %75.1;
  %81 = %78.3;
  (%79, %80, meta[relay.Constant][7] /* ty=Tensor[(1260), int16] */, meta[relay.Constant][8] /* ty=Tensor[(12, 48), float64] */, %81, meta[relay.Constant][9] /* ty=Tensor[(24, 72), float64] */)
}

def @func_716(%var_705: Tensor[(13, 2, 4), uint16], %var_706: Tensor[(13, 2, 4), uint16]) -> Tensor[(13, 2, 4), bool] {
  %82 = cast(%var_706, dtype="bool") /* ty=Tensor[(13, 2, 4), bool] */;
  %83 = shape_of(%var_705, dtype="int32") /* ty=Tensor[(3), int32] */;
  %84 = cast(%var_705, dtype="bool") /* ty=Tensor[(13, 2, 4), bool] */;
  %85 = dyn.reshape(%82, %83, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%84, %85) /* ty=Tensor[(13, 2, 4), bool] */
}

def @func_3509() -> (Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64]) {
  %86 = @func_3318() /* ty=(Tensor[(2, 10, 8), float64],) */;
  %87 = %86.0;
  %88 = @func_1315() /* ty=Tensor[(2, 10, 8), float64] */;
  %89 = cast(%88, dtype="float64") /* ty=Tensor[(2, 10, 8), float64] */;
  %90 = shape_of(%87, dtype="int32") /* ty=Tensor[(3), int32] */;
  %91 = cast(%87, dtype="float64") /* ty=Tensor[(2, 10, 8), float64] */;
  %92 = dyn.reshape(%89, %90, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %93 = @func_1289() /* ty=(Tensor[(2, 10, 8), float64],) */;
  %94 = cast(%87, dtype="float64") /* ty=Tensor[(2, 10, 8), float64] */;
  %95 = floor_divide(%91, %92) /* ty=Tensor[(2, 10, 8), float64] */;
  %96 = %93.0;
  %97 = asinh(%94) /* ty=Tensor[(2, 10, 8), float64] */;
  (%95, %96, %97)
}

def @func_1289() -> (Tensor[(2, 10, 8), float64],) {
  %98 = @func_1083() /* ty=(Tensor[(2, 10, 8), float64],) */;
  %99 = %98.0;
  (%99,)
}

def @func_127(%var_118: Tensor[(9, 11, 9), float32]) -> (Tensor[(9, 11, 9), float32],) {
  %100 = cast(%var_118, dtype="float32") /* ty=Tensor[(9, 11, 9), float32] */;
  %101 = atan(%100) /* ty=Tensor[(9, 11, 9), float32] */;
  %102 = cast(%101, dtype="bool") /* ty=Tensor[(9, 11, 9), bool] */;
  %103 = shape_of(%var_118, dtype="int32") /* ty=Tensor[(3), int32] */;
  %104 = cast(%var_118, dtype="bool") /* ty=Tensor[(9, 11, 9), bool] */;
  %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %106 = logical_or(%104, %105) /* ty=Tensor[(9, 11, 9), bool] */;
  %107 = cast(%106, dtype="float32") /* ty=Tensor[(9, 11, 9), float32] */;
  %108 = acosh(%107) /* ty=Tensor[(9, 11, 9), float32] */;
  (%108,)
}

def @func_4159() -> Tensor[(9, 2, 4), int8] {
  %109 = @func_2902() /* ty=(Tensor[(9, 2, 4), int8],) */;
  %109.0
}

def @func_3106() -> Tensor[(2, 10, 8), float64] {
  %110 = @func_1870() /* ty=(Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(1728), float64]) */;
  %110.1
}

def @func_2408(%var_2390: Tensor[(104, 20), int64], %var_2391: Tensor[(891), float32]) -> (Tensor[(2, 10, 8), float64], Tensor[(13, 2, 4), bool], Tensor[(1, 7, 9), float32], Tensor[(21, 3), float32], Tensor[(10, 13, 16), float64], Tensor[(891), float32], Tensor[(104, 20), float64], Tensor[(2, 10, 8), float64]) {
  %111 = @func_1870() /* ty=(Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(1728), float64]) */;
  %112 = @func_2141() /* ty=(Tensor[(13, 2, 4), bool],) */;
  %113 = cast(meta[relay.Constant][10] /* ty=Tensor[(21, 3), float32] */, dtype="float32") /* ty=Tensor[(21, 3), float32] */;
  %114 = reshape(%113, newshape=[1, 7, 9]) /* ty=Tensor[(1, 7, 9), float32] */;
  %115 = cast(%var_2390, dtype="int64") /* ty=Tensor[(104, 20), int64] */;
  %116 = cast(%var_2390, dtype="int64") /* ty=Tensor[(104, 20), int64] */;
  %117 = %111.1;
  %118 = cast(%117, dtype="bool") /* ty=Tensor[(2, 10, 8), bool] */;
  %119 = cast(%var_2391, dtype="float32") /* ty=Tensor[(891), float32] */;
  %120 = cast(%var_2390, dtype="int64") /* ty=Tensor[(104, 20), int64] */;
  %121 = reshape(%115, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), int64] */;
  %122 = reshape(%116, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), int64] */;
  %123 = reshape(%118, newshape=[160]) /* ty=Tensor[(160), bool] */;
  %124 = reshape(%119, newshape=[99, 9]) /* ty=Tensor[(99, 9), float32] */;
  %125 = reshape(%120, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), int64] */;
  %126 = @func_272(%121, %122, %123, %124, %125) /* ty=(Tensor[(10, 13, 16), int64], Tensor[(2, 10, 8), bool], Tensor[(9, 11, 9), float32], Tensor[(99, 9), float32], Tensor[(160), float32], Tensor[(10, 13, 16), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64]) */;
  %127 = cast(%var_2390, dtype="float64") /* ty=Tensor[(104, 20), float64] */;
  %128 = @func_1628() /* ty=(Tensor[(2, 10, 8), float64],) */;
  %129 = %112.0;
  %130 = @func_382(%114) /* ty=Tensor[(1, 7, 9), float32] */;
  %131 = %126.5;
  %132 = atanh(%127) /* ty=Tensor[(104, 20), float64] */;
  %133 = %128.0;
  (%117, %129, %130, meta[relay.Constant][10] /* ty=Tensor[(21, 3), float32] */, %131, %var_2391, %132, %133)
}

def @func_581(%var_570: Tensor[(9, 16, 12), float64], %var_571: Tensor[(9, 16, 12), float64]) -> (Tensor[(9, 16, 12), float64],) {
  %134 = cast(%var_571, dtype="float64") /* ty=Tensor[(9, 16, 12), float64] */;
  %135 = shape_of(%var_570, dtype="int32") /* ty=Tensor[(3), int32] */;
  %136 = cast(%var_570, dtype="float64") /* ty=Tensor[(9, 16, 12), float64] */;
  %137 = dyn.reshape(%134, %135, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %138 = maximum(%136, %137) /* ty=Tensor[(9, 16, 12), float64] */;
  (%138,)
}

def @func_3221() -> Tensor[(8, 260), int64] {
  %139 = @func_2284() /* ty=(Tensor[(8, 260), int64],) */;
  %139.0
}

def @func_1956(%var_1876: Tensor[(10, 14, 9), int16], %var_1877: Tensor[(10, 14, 9), int16], %var_1918: Tensor[(1, 576), float64]) -> (Tensor[(10, 14, 9), float64], float64, Tensor[(10, 14, 9), int8], Tensor[(?, 576), float32], Tensor[(?, 576), float32]) {
  %140 = cast(%var_1877, dtype="int16") /* ty=Tensor[(10, 14, 9), int16] */;
  %141 = shape_of(%var_1876, dtype="int32") /* ty=Tensor[(3), int32] */;
  %142 = cast(%var_1876, dtype="int16") /* ty=Tensor[(10, 14, 9), int16] */;
  %143 = dyn.reshape(%140, %141, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %144 = logical_xor(%142, %143) /* ty=Tensor[(10, 14, 9), int16] */;
  %145 = cast(%var_1876, dtype="float64") /* ty=Tensor[(10, 14, 9), float64] */;
  %146 = shape_of(%144, dtype="int32") /* ty=Tensor[(3), int32] */;
  %147 = cast(%144, dtype="float64") /* ty=Tensor[(10, 14, 9), float64] */;
  %148 = dyn.reshape(%145, %146, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %149 = cast(%var_1876, dtype="int8") /* ty=Tensor[(10, 14, 9), int8] */;
  %150 = shape_of(%144, dtype="int32") /* ty=Tensor[(3), int32] */;
  %151 = cast(%144, dtype="int8") /* ty=Tensor[(10, 14, 9), int8] */;
  %152 = dyn.reshape(%149, %150, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %153 = cast(%var_1918, dtype="float64") /* ty=Tensor[(1, 576), float64] */;
  %154 = tan(%153) /* ty=Tensor[(1, 576), float64] */;
  %155 = cast(%var_1918, dtype="int32") /* ty=Tensor[(1, 576), int32] */;
  %156 = shape_of(%154, dtype="int32") /* ty=Tensor[(2), int32] */;
  %157 = cast(%154, dtype="int32") /* ty=Tensor[(1, 576), int32] */;
  %158 = dyn.reshape(%155, %156, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %159 = maximum(%157, %158) /* ty=Tensor[(?, 576), int32] */;
  %160 = cast(%159, dtype="float64") /* ty=Tensor[(?, 576), float64] */;
  %161 = acos(%160) /* ty=Tensor[(?, 576), float64] */;
  %162 = cast(-3.06014f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %163 = cast(%var_1918, dtype="float64") /* ty=Tensor[(1, 576), float64] */;
  %164 = reshape(%162, newshape=[]) /* ty=float64 */;
  %165 = reshape(%163, newshape=[576]) /* ty=Tensor[(576), float64] */;
  %166 = @func_1511(%164, %165) /* ty=(Tensor[(576), uint16], Tensor[(2, 10, 8), float64]) */;
  %167 = %166.0;
  %168 = cast(%167, dtype="float32") /* ty=Tensor[(576), float32] */;
  %169 = shape_of(%161, dtype="int32") /* ty=Tensor[(2), int32] */;
  %170 = cast(%161, dtype="float32") /* ty=Tensor[(?, 576), float32] */;
  %171 = dyn.reshape(%168, %169, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %172 = cast(%154, dtype="float32") /* ty=Tensor[(1, 576), float32] */;
  %173 = shape_of(%161, dtype="int32") /* ty=Tensor[(2), int32] */;
  %174 = cast(%161, dtype="float32") /* ty=Tensor[(?, 576), float32] */;
  %175 = dyn.reshape(%172, %173, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %176 = floor_mod(%147, %148) /* ty=Tensor[(10, 14, 9), float64] */;
  %177 = bitwise_xor(%151, %152) /* ty=Tensor[(10, 14, 9), int8] */;
  %178 = floor_mod(%170, %171) /* ty=Tensor[(?, 576), float32] */;
  %179 = divide(%174, %175) /* ty=Tensor[(?, 576), float32] */;
  (%176, -3.06014f64 /* ty=float64 */, %177, %178, %179)
}

def @func_1343(%var_1338: Tensor[(4, 14, 16), bool], %var_1339: Tensor[(4, 14, 16), bool]) -> (Tensor[(4, 14, 16), bool],) {
  %180 = cast(%var_1339, dtype="bool") /* ty=Tensor[(4, 14, 16), bool] */;
  %181 = shape_of(%var_1338, dtype="int32") /* ty=Tensor[(3), int32] */;
  %182 = cast(%var_1338, dtype="bool") /* ty=Tensor[(4, 14, 16), bool] */;
  %183 = dyn.reshape(%180, %181, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %184 = logical_or(%182, %183) /* ty=Tensor[(4, 14, 16), bool] */;
  (%184,)
}

def @func_1732(%var_1706: Tensor[(1728), float64]) -> (Tensor[(2, 10, 8), float64], Tensor[(9, 16, 12), float64], Tensor[(1728), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64]) {
  %185 = @func_1083() /* ty=(Tensor[(2, 10, 8), float64],) */;
  %186 = cast(%var_1706, dtype="float64") /* ty=Tensor[(1728), float64] */;
  %187 = cast(%var_1706, dtype="float64") /* ty=Tensor[(1728), float64] */;
  %188 = reshape(%186, newshape=[9, 16, 12]) /* ty=Tensor[(9, 16, 12), float64] */;
  %189 = reshape(%187, newshape=[9, 16, 12]) /* ty=Tensor[(9, 16, 12), float64] */;
  %190 = @func_581(%188, %189) /* ty=(Tensor[(9, 16, 12), float64],) */;
  %191 = @func_1289() /* ty=(Tensor[(2, 10, 8), float64],) */;
  %192 = @func_860() /* ty=(Tensor[(16, 9, 2), bool], Tensor[(99, 9), float32], Tensor[(704, 1), float64], Tensor[(2, 10, 8), float64], Tensor[(160), bool], Tensor[(2, 10, 8), float64], Tensor[(8, 260), int64], Tensor[(2080), float32]) */;
  %193 = %185.0;
  %194 = %190.0;
  %195 = %191.0;
  %196 = %192.5;
  (%193, %194, %var_1706, %195, %196)
}

def @func_2205() -> (Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64]) {
  %197 = @func_1083() /* ty=(Tensor[(2, 10, 8), float64],) */;
  %198 = @func_1315() /* ty=Tensor[(2, 10, 8), float64] */;
  %199 = %197.0;
  (%198, %199)
}

def @func_3742(%var_3727: float64, %var_3728: Tensor[(576), float64]) -> (Tensor[(2, 10, 8), float64], float64, float64, Tensor[(576), float64]) {
  %200 = @func_1083() /* ty=(Tensor[(2, 10, 8), float64],) */;
  %201 = cast(%var_3727, dtype="float64") /* ty=float64 */;
  %202 = cast(%var_3728, dtype="float64") /* ty=Tensor[(576), float64] */;
  %203 = reshape(%201, newshape=[]) /* ty=float64 */;
  %204 = reshape(%202, newshape=[576]) /* ty=Tensor[(576), float64] */;
  %205 = @func_3449(%203, %204) /* ty=(float64, Tensor[(576), float64], Tensor[(2, 10, 8), float32]) */;
  %206 = %200.0;
  %207 = %205.0;
  (%206, %207, %var_3727, %var_3728)
}

def @main(%var_4647: Tensor[(2, 10, 2), int64]) -> Tensor[(2, 10, 2), bool] {
  %208 = cast(%var_4647, dtype="bool") /* ty=Tensor[(2, 10, 2), bool] */;
  %209 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(2, 10, 2), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %210 = cast(meta[relay.Constant][11] /* ty=Tensor[(2, 10, 2), int64] */, dtype="bool") /* ty=Tensor[(2, 10, 2), bool] */;
  %211 = dyn.reshape(%208, %209, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%210, %211) /* ty=Tensor[(2, 10, 2), bool] */
}

def @func_563(%var_500: Tensor[(8, 8, 11), float64]) -> (Tensor[(10, 13, 16), int64], Tensor[(8, 260), int64], Tensor[(160), bool], Tensor[(99, 9), float32], Tensor[(1, 7, 9), float32], Tensor[(21, 3), float32], Tensor[(9, 11, 9), float32], Tensor[(8, 8, 11), float32], Tensor[(9, 11, 9), float32]) {
  %212 = cast(meta[relay.Constant][12] /* ty=Tensor[(8, 260), int64] */, dtype="int64") /* ty=Tensor[(8, 260), int64] */;
  %213 = cast(meta[relay.Constant][12] /* ty=Tensor[(8, 260), int64] */, dtype="int64") /* ty=Tensor[(8, 260), int64] */;
  %214 = cast(meta[relay.Constant][13] /* ty=Tensor[(160), bool] */, dtype="bool") /* ty=Tensor[(160), bool] */;
  %215 = cast(meta[relay.Constant][14] /* ty=Tensor[(99, 9), float32] */, dtype="float32") /* ty=Tensor[(99, 9), float32] */;
  %216 = cast(meta[relay.Constant][12] /* ty=Tensor[(8, 260), int64] */, dtype="int64") /* ty=Tensor[(8, 260), int64] */;
  %217 = reshape(%212, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), int64] */;
  %218 = reshape(%213, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), int64] */;
  %219 = reshape(%214, newshape=[160]) /* ty=Tensor[(160), bool] */;
  %220 = reshape(%215, newshape=[99, 9]) /* ty=Tensor[(99, 9), float32] */;
  %221 = reshape(%216, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), int64] */;
  %222 = @func_272(%217, %218, %219, %220, %221) /* ty=(Tensor[(10, 13, 16), int64], Tensor[(2, 10, 8), bool], Tensor[(9, 11, 9), float32], Tensor[(99, 9), float32], Tensor[(160), float32], Tensor[(10, 13, 16), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64]) */;
  %223 = cast(meta[relay.Constant][15] /* ty=Tensor[(21, 3), float32] */, dtype="float32") /* ty=Tensor[(21, 3), float32] */;
  %224 = reshape(%223, newshape=[1, 7, 9]) /* ty=Tensor[(1, 7, 9), float32] */;
  %225 = cast(meta[relay.Constant][14] /* ty=Tensor[(99, 9), float32] */, dtype="float32") /* ty=Tensor[(99, 9), float32] */;
  %226 = reshape(%225, newshape=[9, 11, 9]) /* ty=Tensor[(9, 11, 9), float32] */;
  %227 = @func_127(%226) /* ty=(Tensor[(9, 11, 9), float32],) */;
  %228 = cast(%var_500, dtype="float64") /* ty=Tensor[(8, 8, 11), float64] */;
  %229 = asin(%228) /* ty=Tensor[(8, 8, 11), float64] */;
  %230 = cast(%229, dtype="float32") /* ty=Tensor[(8, 8, 11), float32] */;
  %231 = cast(meta[relay.Constant][14] /* ty=Tensor[(99, 9), float32] */, dtype="float32") /* ty=Tensor[(99, 9), float32] */;
  %232 = reshape(%231, newshape=[9, 11, 9]) /* ty=Tensor[(9, 11, 9), float32] */;
  %233 = @func_127(%232) /* ty=(Tensor[(9, 11, 9), float32],) */;
  %234 = %222.0;
  %235 = @func_382(%224) /* ty=Tensor[(1, 7, 9), float32] */;
  %236 = %227.0;
  %237 = rsqrt(%230) /* ty=Tensor[(8, 8, 11), float32] */;
  %238 = %233.0;
  (%234, meta[relay.Constant][12] /* ty=Tensor[(8, 260), int64] */, meta[relay.Constant][13] /* ty=Tensor[(160), bool] */, meta[relay.Constant][14] /* ty=Tensor[(99, 9), float32] */, %235, meta[relay.Constant][15] /* ty=Tensor[(21, 3), float32] */, %236, %237, %238)
}

def @func_4452() -> (Tensor[(182, 10), bool], Tensor[(2, 10, 8), float64]) {
  %239 = @func_3282() /* ty=(Tensor[(13, 2, 4), bool], Tensor[(8, 260), int16], Tensor[(2, 10, 8), float64], Tensor[(182, 10), bool]) */;
  %240 = @func_3716() /* ty=(Tensor[(2, 10, 8), float64],) */;
  %241 = %239.3;
  %242 = %240.0;
  (%241, %242)
}

def @func_1244(%var_1234: float64, %var_1235: Tensor[(4, 9, 16), float64]) -> Tensor[(4, 9, 16), float64] {
  %243 = cast(%var_1234, dtype="float64") /* ty=float64 */;
  %244 = cast(%var_1235, dtype="float64") /* ty=Tensor[(4, 9, 16), float64] */;
  power(%243, %244) /* ty=Tensor[(4, 9, 16), float64] */
}

def @func_3180(%var_3168: Tensor[(12, 6, 16), float32], %var_3169: Tensor[(12, 6, 16), float32]) -> (Tensor[(12, 6, 16), float32],) {
  %245 = cast(%var_3169, dtype="float32") /* ty=Tensor[(12, 6, 16), float32] */;
  %246 = shape_of(%var_3168, dtype="int32") /* ty=Tensor[(3), int32] */;
  %247 = cast(%var_3168, dtype="float32") /* ty=Tensor[(12, 6, 16), float32] */;
  %248 = dyn.reshape(%245, %246, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %249 = floor_divide(%247, %248) /* ty=Tensor[(12, 6, 16), float32] */;
  (%249,)
}

def @func_4394() -> Tensor[(2080), float32] {
  %250 = @func_860() /* ty=(Tensor[(16, 9, 2), bool], Tensor[(99, 9), float32], Tensor[(704, 1), float64], Tensor[(2, 10, 8), float64], Tensor[(160), bool], Tensor[(2, 10, 8), float64], Tensor[(8, 260), int64], Tensor[(2080), float32]) */;
  %250.7
}

def @func_4078(%var_4057: float64) -> (Tensor[(9, 2, 4), float64], Tensor[(2, 10, 8), float32], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], float64, float64, Tensor[(576), float64]) {
  %251 = @func_2617() /* ty=(Tensor[(9, 2, 4), float64], Tensor[(9, 2, 4), float64]) */;
  %252 = @func_2518() /* ty=(Tensor[(2, 10, 8), float64],) */;
  %253 = %252.0;
  %254 = cast(%253, dtype="float32") /* ty=Tensor[(2, 10, 8), float32] */;
  %255 = cast(%253, dtype="float64") /* ty=Tensor[(2, 10, 8), float64] */;
  %256 = erf(%255) /* ty=Tensor[(2, 10, 8), float64] */;
  %257 = cast(%256, dtype="float64") /* ty=Tensor[(2, 10, 8), float64] */;
  %258 = @func_2205() /* ty=(Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64]) */;
  %259 = cast(%var_4057, dtype="float64") /* ty=float64 */;
  %260 = cast(meta[relay.Constant][16] /* ty=Tensor[(576), float64] */, dtype="float64") /* ty=Tensor[(576), float64] */;
  %261 = reshape(%259, newshape=[]) /* ty=float64 */;
  %262 = reshape(%260, newshape=[576]) /* ty=Tensor[(576), float64] */;
  %263 = @func_3449(%261, %262) /* ty=(float64, Tensor[(576), float64], Tensor[(2, 10, 8), float32]) */;
  %264 = %251.1;
  %265 = log(%254) /* ty=Tensor[(2, 10, 8), float32] */;
  %266 = atan(%257) /* ty=Tensor[(2, 10, 8), float64] */;
  %267 = %258.0;
  %268 = %263.0;
  (%264, %265, %266, %267, %268, %var_4057, meta[relay.Constant][16] /* ty=Tensor[(576), float64] */)
}

def @func_2500(%var_2487: Tensor[(14, 13, 10), float64]) -> (Tensor[(14, 13, 10), float64], Tensor[(2, 10, 8), float64]) {
  %269 = cast(%var_2487, dtype="float64") /* ty=Tensor[(14, 13, 10), float64] */;
  %270 = @func_1083() /* ty=(Tensor[(2, 10, 8), float64],) */;
  %271 = rsqrt(%269) /* ty=Tensor[(14, 13, 10), float64] */;
  %272 = %270.0;
  (%271, %272)
}

def @func_3721() -> Tensor[(704, 1), float64] {
  %273 = @func_1801() /* ty=(Tensor[(704, 1), float64],) */;
  %273.0
}

def @func_84(%var_64: Tensor[(2, 10, 8), bool], %var_65: Tensor[(2, 10, 8), bool]) -> (Tensor[(2, 10, 8), bool], Tensor[(2, 10, 8), float64]) {
  %274 = cast(%var_65, dtype="bool") /* ty=Tensor[(2, 10, 8), bool] */;
  %275 = shape_of(%var_64, dtype="int32") /* ty=Tensor[(3), int32] */;
  %276 = cast(%var_64, dtype="bool") /* ty=Tensor[(2, 10, 8), bool] */;
  %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %278 = logical_or(%276, %277) /* ty=Tensor[(2, 10, 8), bool] */;
  %279 = cast(%var_65, dtype="bool") /* ty=Tensor[(2, 10, 8), bool] */;
  %280 = shape_of(%278, dtype="int32") /* ty=Tensor[(3), int32] */;
  %281 = cast(%278, dtype="bool") /* ty=Tensor[(2, 10, 8), bool] */;
  %282 = dyn.reshape(%279, %280, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %283 = cast(%var_64, dtype="float64") /* ty=Tensor[(2, 10, 8), float64] */;
  %284 = less(%281, %282) /* ty=Tensor[(2, 10, 8), bool] */;
  %285 = tan(%283) /* ty=Tensor[(2, 10, 8), float64] */;
  (%284, %285)
}

def @func_2141() -> (Tensor[(13, 2, 4), bool],) {
  %286 = @func_1156() /* ty=(Tensor[(2, 10, 8), float64], Tensor[(13, 2, 4), bool], Tensor[(104), uint16]) */;
  %287 = %286.1;
  (%287,)
}

def @func_4144() -> (Tensor[(1728), float64],) {
  %288 = @func_1693() /* ty=(Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(9, 16, 12), float64], Tensor[(1728), float64], Tensor[(1, 7, 9), float32], Tensor[(63), float32]) */;
  %289 = %288.3;
  (%289,)
}

def @func_3989(%var_3871: Tensor[(3, 12, 3), float32], %var_3940: Tensor[(8, 260), int64], %var_3941: Tensor[(891), float32], %var_3952: Tensor[(3, 12, 3), float32]) -> (Tensor[(4, 14, 16), bool], Tensor[(4, 40), float64], Tensor[(2, 10, 8), float64], Tensor[(99, 9), float32], Tensor[(8, 260), int64], Tensor[(891), float32], Tensor[(3, 12, 3), uint16], Tensor[(?, 35), uint16], Tensor[(704, 1), float64], Tensor[(3, 12, 3), float64]) {
  %290 = cast(meta[relay.Constant][17] /* ty=Tensor[(4, 40), float64] */, dtype="float64") /* ty=Tensor[(4, 40), float64] */;
  %291 = reshape(%290, newshape=[2, 10, 8]) /* ty=Tensor[(2, 10, 8), float64] */;
  %292 = @func_2957(%291) /* ty=(Tensor[(2, 10, 8), bool], Tensor[(4, 14, 16), bool], Tensor[(2, 10, 8), float64], Tensor[(896, 1), float64]) */;
  %293 = @func_2205() /* ty=(Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64]) */;
  %294 = cast(%var_3940, dtype="int64") /* ty=Tensor[(8, 260), int64] */;
  %295 = cast(%var_3940, dtype="int64") /* ty=Tensor[(8, 260), int64] */;
  %296 = cast(meta[relay.Constant][17] /* ty=Tensor[(4, 40), float64] */, dtype="bool") /* ty=Tensor[(4, 40), bool] */;
  %297 = cast(%var_3941, dtype="float32") /* ty=Tensor[(891), float32] */;
  %298 = cast(%var_3940, dtype="int64") /* ty=Tensor[(8, 260), int64] */;
  %299 = reshape(%294, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), int64] */;
  %300 = reshape(%295, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), int64] */;
  %301 = reshape(%296, newshape=[160]) /* ty=Tensor[(160), bool] */;
  %302 = reshape(%297, newshape=[99, 9]) /* ty=Tensor[(99, 9), float32] */;
  %303 = reshape(%298, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), int64] */;
  %304 = @func_272(%299, %300, %301, %302, %303) /* ty=(Tensor[(10, 13, 16), int64], Tensor[(2, 10, 8), bool], Tensor[(9, 11, 9), float32], Tensor[(99, 9), float32], Tensor[(160), float32], Tensor[(10, 13, 16), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64]) */;
  %305 = cast(%var_3871, dtype="float32") /* ty=Tensor[(3, 12, 3), float32] */;
  %306 = rsqrt(%305) /* ty=Tensor[(3, 12, 3), float32] */;
  %307 = cast(%var_3871, dtype="int8") /* ty=Tensor[(3, 12, 3), int8] */;
  %308 = shape_of(%306, dtype="int32") /* ty=Tensor[(3), int32] */;
  %309 = cast(%306, dtype="int8") /* ty=Tensor[(3, 12, 3), int8] */;
  %310 = dyn.reshape(%307, %308, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %311 = left_shift(%309, %310) /* ty=Tensor[(3, 12, 3), int8] */;
  %312 = cast(%var_3871, dtype="uint16") /* ty=Tensor[(3, 12, 3), uint16] */;
  %313 = shape_of(%311, dtype="int32") /* ty=Tensor[(3), int32] */;
  %314 = cast(%311, dtype="uint16") /* ty=Tensor[(3, 12, 3), uint16] */;
  %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %316 = cast(meta[relay.Constant][18] /* ty=Tensor[(35), int32] */, dtype="int32") /* ty=Tensor[(35), int32] */;
  %317 = reshape(%316, newshape=[1, 35]) /* ty=Tensor[(1, 35), int32] */;
  %318 = @func_1815(%317) /* ty=(Tensor[(2, 10, 8), float64], Tensor[(15, 7, 5), int32], Tensor[(1, 35), int32]) */;
  %319 = %318.2;
  %320 = cast(meta[relay.Constant][18] /* ty=Tensor[(35), int32] */, dtype="uint16") /* ty=Tensor[(35), uint16] */;
  %321 = shape_of(%319, dtype="int32") /* ty=Tensor[(2), int32] */;
  %322 = cast(%319, dtype="uint16") /* ty=Tensor[(1, 35), uint16] */;
  %323 = dyn.reshape(%320, %321, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %324 = cast(%var_3952, dtype="bool") /* ty=Tensor[(3, 12, 3), bool] */;
  %325 = shape_of(%306, dtype="int32") /* ty=Tensor[(3), int32] */;
  %326 = cast(%306, dtype="bool") /* ty=Tensor[(3, 12, 3), bool] */;
  %327 = dyn.reshape(%324, %325, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %328 = greater_equal(%326, %327) /* ty=Tensor[(3, 12, 3), bool] */;
  %329 = cast(%328, dtype="float64") /* ty=Tensor[(3, 12, 3), float64] */;
  %330 = %292.1;
  %331 = %293.1;
  %332 = %304.3;
  %333 = right_shift(%314, %315) /* ty=Tensor[(3, 12, 3), uint16] */;
  %334 = bitwise_or(%322, %323) /* ty=Tensor[(?, 35), uint16] */;
  %335 = @func_3721() /* ty=Tensor[(704, 1), float64] */;
  %336 = sinh(%329) /* ty=Tensor[(3, 12, 3), float64] */;
  (%330, meta[relay.Constant][17] /* ty=Tensor[(4, 40), float64] */, %331, %332, %var_3940, %var_3941, %333, %334, %335, %336)
}

def @func_2957(%var_2936: Tensor[(2, 10, 8), float64]) -> (Tensor[(2, 10, 8), bool], Tensor[(4, 14, 16), bool], Tensor[(2, 10, 8), float64], Tensor[(896, 1), float64]) {
  %337 = @func_1083() /* ty=(Tensor[(2, 10, 8), float64],) */;
  %338 = %337.0;
  %339 = cast(%var_2936, dtype="bool") /* ty=Tensor[(2, 10, 8), bool] */;
  %340 = shape_of(%338, dtype="int32") /* ty=Tensor[(3), int32] */;
  %341 = cast(%338, dtype="bool") /* ty=Tensor[(2, 10, 8), bool] */;
  %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %343 = cast(meta[relay.Constant][19] /* ty=Tensor[(896, 1), bool] */, dtype="bool") /* ty=Tensor[(896, 1), bool] */;
  %344 = cast(meta[relay.Constant][19] /* ty=Tensor[(896, 1), bool] */, dtype="bool") /* ty=Tensor[(896, 1), bool] */;
  %345 = reshape(%343, newshape=[4, 14, 16]) /* ty=Tensor[(4, 14, 16), bool] */;
  %346 = reshape(%344, newshape=[4, 14, 16]) /* ty=Tensor[(4, 14, 16), bool] */;
  %347 = @func_1343(%345, %346) /* ty=(Tensor[(4, 14, 16), bool],) */;
  %348 = @func_1083() /* ty=(Tensor[(2, 10, 8), float64],) */;
  %349 = cast(meta[relay.Constant][19] /* ty=Tensor[(896, 1), bool] */, dtype="float64") /* ty=Tensor[(896, 1), float64] */;
  %350 = less_equal(%341, %342) /* ty=Tensor[(2, 10, 8), bool] */;
  %351 = %347.0;
  %352 = %348.0;
  %353 = log2(%349) /* ty=Tensor[(896, 1), float64] */;
  (%350, %351, %352, %353)
}

def @func_1628() -> (Tensor[(2, 10, 8), float64],) {
  %354 = @func_860() /* ty=(Tensor[(16, 9, 2), bool], Tensor[(99, 9), float32], Tensor[(704, 1), float64], Tensor[(2, 10, 8), float64], Tensor[(160), bool], Tensor[(2, 10, 8), float64], Tensor[(8, 260), int64], Tensor[(2080), float32]) */;
  %355 = %354.5;
  (%355,)
}

def @func_2862(%var_2787: Tensor[(10, 8, 16), int8], %var_2809: Tensor[(35), int32], %var_2848: Tensor[(672), float64], %var_2855: Tensor[(10, 8, 16), bool]) -> (Tensor[(10, 8, 16), float32], Tensor[(15, 7, 5), int32], Tensor[(35), int32], Tensor[(10, 8, 16), int32], Tensor[(9, 2, 4), float64], Tensor[(224), uint8], Tensor[(672), float64], Tensor[(10, 8, 16), bool], Tensor[(2, 10, 8), bool], Tensor[(160), bool]) {
  %356 = cast(%var_2787, dtype="int8") /* ty=Tensor[(10, 8, 16), int8] */;
  %357 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(10, 8, 16), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %358 = cast(meta[relay.Constant][20] /* ty=Tensor[(10, 8, 16), int8] */, dtype="int8") /* ty=Tensor[(10, 8, 16), int8] */;
  %359 = dyn.reshape(%356, %357, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %360 = maximum(%358, %359) /* ty=Tensor[(10, 8, 16), int8] */;
  %361 = cast(%360, dtype="float32") /* ty=Tensor[(10, 8, 16), float32] */;
  %362 = cast(%var_2809, dtype="int32") /* ty=Tensor[(35), int32] */;
  %363 = reshape(%362, newshape=[1, 7, 5]) /* ty=Tensor[(1, 7, 5), int32] */;
  %364 = cast(%var_2787, dtype="int32") /* ty=Tensor[(10, 8, 16), int32] */;
  %365 = shape_of(%360, dtype="int32") /* ty=Tensor[(3), int32] */;
  %366 = cast(%360, dtype="int32") /* ty=Tensor[(10, 8, 16), int32] */;
  %367 = dyn.reshape(%364, %365, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %368 = @func_2617() /* ty=(Tensor[(9, 2, 4), float64], Tensor[(9, 2, 4), float64]) */;
  %369 = cast(%var_2848, dtype="float64") /* ty=Tensor[(672), float64] */;
  %370 = reshape(%369, newshape=[16, 7, 6]) /* ty=Tensor[(16, 7, 6), float64] */;
  %371 = @func_2714(%370) /* ty=(Tensor[(2, 7, 16), bool], Tensor[(224), uint8], Tensor[(16, 7, 6), int8]) */;
  %372 = cast(%360, dtype="bool") /* ty=Tensor[(10, 8, 16), bool] */;
  %373 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(10, 8, 16), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %374 = cast(meta[relay.Constant][20] /* ty=Tensor[(10, 8, 16), int8] */, dtype="bool") /* ty=Tensor[(10, 8, 16), bool] */;
  %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %376 = not_equal(%374, %375) /* ty=Tensor[(10, 8, 16), bool] */;
  %377 = cast(%var_2855, dtype="bool") /* ty=Tensor[(10, 8, 16), bool] */;
  %378 = shape_of(%376, dtype="int32") /* ty=Tensor[(3), int32] */;
  %379 = cast(%376, dtype="bool") /* ty=Tensor[(10, 8, 16), bool] */;
  %380 = dyn.reshape(%377, %378, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %381 = cast(meta[relay.Constant][21] /* ty=Tensor[(160), bool] */, dtype="bool") /* ty=Tensor[(160), bool] */;
  %382 = cast(meta[relay.Constant][21] /* ty=Tensor[(160), bool] */, dtype="bool") /* ty=Tensor[(160), bool] */;
  %383 = reshape(%381, newshape=[2, 10, 8]) /* ty=Tensor[(2, 10, 8), bool] */;
  %384 = reshape(%382, newshape=[2, 10, 8]) /* ty=Tensor[(2, 10, 8), bool] */;
  %385 = @func_84(%383, %384) /* ty=(Tensor[(2, 10, 8), bool], Tensor[(2, 10, 8), float64]) */;
  %386 = exp(%361) /* ty=Tensor[(10, 8, 16), float32] */;
  %387 = @func_1229(%363) /* ty=Tensor[(15, 7, 5), int32] */;
  %388 = multiply(%366, %367) /* ty=Tensor[(10, 8, 16), int32] */;
  %389 = %368.1;
  %390 = %371.1;
  %391 = less_equal(%379, %380) /* ty=Tensor[(10, 8, 16), bool] */;
  %392 = %385.0;
  (%386, %387, %var_2809, %388, %389, %390, %var_2848, %391, %392, meta[relay.Constant][21] /* ty=Tensor[(160), bool] */)
}

def @func_1156() -> (Tensor[(2, 10, 8), float64], Tensor[(13, 2, 4), bool], Tensor[(104), uint16]) {
  %393 = @func_1083() /* ty=(Tensor[(2, 10, 8), float64],) */;
  %394 = cast(meta[relay.Constant][22] /* ty=Tensor[(104), uint16] */, dtype="uint16") /* ty=Tensor[(104), uint16] */;
  %395 = cast(meta[relay.Constant][22] /* ty=Tensor[(104), uint16] */, dtype="uint16") /* ty=Tensor[(104), uint16] */;
  %396 = reshape(%394, newshape=[13, 2, 4]) /* ty=Tensor[(13, 2, 4), uint16] */;
  %397 = reshape(%395, newshape=[13, 2, 4]) /* ty=Tensor[(13, 2, 4), uint16] */;
  %398 = %393.0;
  %399 = @func_716(%396, %397) /* ty=Tensor[(13, 2, 4), bool] */;
  (%398, %399, meta[relay.Constant][22] /* ty=Tensor[(104), uint16] */)
}

def @func_1464(%var_1401: Tensor[(16, 8, 7), int32]) -> (Tensor[(13, 2, 4), bool], Tensor[(4, 14, 16), bool], Tensor[(16, 8, 7), bool], Tensor[(16, 8, 7), int32], Tensor[(2, 10, 8), float64]) {
  %400 = @func_1156() /* ty=(Tensor[(2, 10, 8), float64], Tensor[(13, 2, 4), bool], Tensor[(104), uint16]) */;
  %401 = cast(%var_1401, dtype="bool") /* ty=Tensor[(16, 8, 7), bool] */;
  %402 = cast(6 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %403 = cast(%var_1401, dtype="int32") /* ty=Tensor[(16, 8, 7), int32] */;
  %404 = bitwise_and(%402, %403) /* ty=Tensor[(16, 8, 7), int32] */;
  %405 = cast(%404, dtype="bool") /* ty=Tensor[(16, 8, 7), bool] */;
  %406 = reshape(%401, newshape=[4, 14, 16]) /* ty=Tensor[(4, 14, 16), bool] */;
  %407 = reshape(%405, newshape=[4, 14, 16]) /* ty=Tensor[(4, 14, 16), bool] */;
  %408 = @func_1343(%406, %407) /* ty=(Tensor[(4, 14, 16), bool],) */;
  %409 = cast(%var_1401, dtype="bool") /* ty=Tensor[(16, 8, 7), bool] */;
  %410 = shape_of(%404, dtype="int32") /* ty=Tensor[(3), int32] */;
  %411 = cast(%404, dtype="bool") /* ty=Tensor[(16, 8, 7), bool] */;
  %412 = dyn.reshape(%409, %410, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %413 = cast(meta[relay.Constant][23] /* ty=Tensor[(16, 8, 7), int32] */, dtype="int32") /* ty=Tensor[(16, 8, 7), int32] */;
  %414 = shape_of(%var_1401, dtype="int32") /* ty=Tensor[(3), int32] */;
  %415 = cast(%var_1401, dtype="int32") /* ty=Tensor[(16, 8, 7), int32] */;
  %416 = dyn.reshape(%413, %414, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %417 = %400.1;
  %418 = %408.0;
  %419 = equal(%411, %412) /* ty=Tensor[(16, 8, 7), bool] */;
  %420 = minimum(%415, %416) /* ty=Tensor[(16, 8, 7), int32] */;
  %421 = @func_1315() /* ty=Tensor[(2, 10, 8), float64] */;
  (%417, %418, %419, %420, %421)
}

def @func_3002(%var_2994: Tensor[(2, 10, 8), float64]) -> (Tensor[(2, 10, 8), int32],) {
  %422 = @func_2205() /* ty=(Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64]) */;
  %423 = %422.0;
  %424 = cast(%var_2994, dtype="int32") /* ty=Tensor[(2, 10, 8), int32] */;
  %425 = shape_of(%423, dtype="int32") /* ty=Tensor[(3), int32] */;
  %426 = cast(%423, dtype="int32") /* ty=Tensor[(2, 10, 8), int32] */;
  %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %428 = multiply(%426, %427) /* ty=Tensor[(2, 10, 8), int32] */;
  (%428,)
}

def @func_1594(%var_1557: Tensor[(2, 10, 4), float32], %var_1578: Tensor[(36, 16), float64], %var_1583: Tensor[(36, 16), float64]) -> (Tensor[(2, 10, 4), float32], Tensor[(99, 9), bool], Tensor[(891), float32], Tensor[(2, 10, 8), float64], float64, Tensor[(36, 16), uint16], Tensor[(99, 9), float32]) {
  %429 = cast(meta[relay.Constant][24] /* ty=Tensor[(1, 10, 4), float32] */, dtype="float32") /* ty=Tensor[(1, 10, 4), float32] */;
  %430 = cast(%var_1557, dtype="float32") /* ty=Tensor[(2, 10, 4), float32] */;
  %431 = cast(meta[relay.Constant][25] /* ty=Tensor[(891), float32] */, dtype="float32") /* ty=Tensor[(891), float32] */;
  %432 = reshape(%431, newshape=[99, 9]) /* ty=Tensor[(99, 9), float32] */;
  %433 = @func_1026(%432) /* ty=(Tensor[(99, 9), bool], Tensor[(2, 10, 8), float64], Tensor[(160), bool]) */;
  %434 = cast(-3.23526f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %435 = cast(%var_1578, dtype="float64") /* ty=Tensor[(36, 16), float64] */;
  %436 = reshape(%434, newshape=[]) /* ty=float64 */;
  %437 = reshape(%435, newshape=[576]) /* ty=Tensor[(576), float64] */;
  %438 = @func_1511(%436, %437) /* ty=(Tensor[(576), uint16], Tensor[(2, 10, 8), float64]) */;
  %439 = cast(%var_1583, dtype="uint16") /* ty=Tensor[(36, 16), uint16] */;
  %440 = shape_of(%var_1578, dtype="int32") /* ty=Tensor[(2), int32] */;
  %441 = cast(%var_1578, dtype="uint16") /* ty=Tensor[(36, 16), uint16] */;
  %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %443 = @func_860() /* ty=(Tensor[(16, 9, 2), bool], Tensor[(99, 9), float32], Tensor[(704, 1), float64], Tensor[(2, 10, 8), float64], Tensor[(160), bool], Tensor[(2, 10, 8), float64], Tensor[(8, 260), int64], Tensor[(2080), float32]) */;
  %444 = %443.1;
  %445 = cast(%444, dtype="float32") /* ty=Tensor[(99, 9), float32] */;
  %446 = floor_mod(%429, %430) /* ty=Tensor[(2, 10, 4), float32] */;
  %447 = %433.0;
  %448 = %438.1;
  %449 = add(%441, %442) /* ty=Tensor[(36, 16), uint16] */;
  %450 = sqrt(%445) /* ty=Tensor[(99, 9), float32] */;
  (%446, %447, meta[relay.Constant][25] /* ty=Tensor[(891), float32] */, %448, -3.23526f64 /* ty=float64 */, %449, %450)
}

def @func_382(%var_372: Tensor[(1, 7, 9), float32]) -> Tensor[(1, 7, 9), float32] {
  %451 = cast(%var_372, dtype="float32") /* ty=Tensor[(1, 7, 9), float32] */;
  cos(%451) /* ty=Tensor[(1, 7, 9), float32] */
}

def @func_2518() -> (Tensor[(2, 10, 8), float64],) {
  %452 = @func_1083() /* ty=(Tensor[(2, 10, 8), float64],) */;
  %453 = %452.0;
  (%453,)
}

def @func_3085(%var_3031: Tensor[(14, 5, 13), float64], %var_3041: Tensor[(112, 8), bool]) -> (Tensor[(4, 14, 16), bool], Tensor[(112, 8), bool], Tensor[(14, 5, 13), float32], Tensor[(14, 5, 13), float32], Tensor[(2, 10, 8), float64]) {
  %454 = cast(%var_3041, dtype="bool") /* ty=Tensor[(112, 8), bool] */;
  %455 = cast(%var_3041, dtype="bool") /* ty=Tensor[(112, 8), bool] */;
  %456 = reshape(%454, newshape=[4, 14, 16]) /* ty=Tensor[(4, 14, 16), bool] */;
  %457 = reshape(%455, newshape=[4, 14, 16]) /* ty=Tensor[(4, 14, 16), bool] */;
  %458 = @func_1343(%456, %457) /* ty=(Tensor[(4, 14, 16), bool],) */;
  %459 = cast(%var_3031, dtype="float64") /* ty=Tensor[(14, 5, 13), float64] */;
  %460 = sin(%459) /* ty=Tensor[(14, 5, 13), float64] */;
  %461 = cast(%460, dtype="float64") /* ty=Tensor[(14, 5, 13), float64] */;
  %462 = sinh(%461) /* ty=Tensor[(14, 5, 13), float64] */;
  %463 = cast(%462, dtype="float32") /* ty=Tensor[(14, 5, 13), float32] */;
  %464 = cast(%460, dtype="float32") /* ty=Tensor[(14, 5, 13), float32] */;
  %465 = shape_of(%462, dtype="int32") /* ty=Tensor[(3), int32] */;
  %466 = cast(%462, dtype="float32") /* ty=Tensor[(14, 5, 13), float32] */;
  %467 = dyn.reshape(%464, %465, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %468 = %458.0;
  %469 = asinh(%463) /* ty=Tensor[(14, 5, 13), float32] */;
  %470 = mod(%466, %467) /* ty=Tensor[(14, 5, 13), float32] */;
  %471 = @func_2650() /* ty=Tensor[(2, 10, 8), float64] */;
  (%468, %var_3041, %469, %470, %471)
}

def @func_3449(%var_3416: float64, %var_3417: Tensor[(576), float64]) -> (float64, Tensor[(576), float64], Tensor[(2, 10, 8), float32]) {
  %472 = cast(%var_3416, dtype="float64") /* ty=float64 */;
  %473 = cast(%var_3417, dtype="float64") /* ty=Tensor[(576), float64] */;
  %474 = reshape(%472, newshape=[]) /* ty=float64 */;
  %475 = reshape(%473, newshape=[576]) /* ty=Tensor[(576), float64] */;
  %476 = @func_1511(%474, %475) /* ty=(Tensor[(576), uint16], Tensor[(2, 10, 8), float64]) */;
  %477 = %476.1;
  %478 = @func_1628() /* ty=(Tensor[(2, 10, 8), float64],) */;
  %479 = %478.0;
  %480 = cast(%479, dtype="float32") /* ty=Tensor[(2, 10, 8), float32] */;
  %481 = shape_of(%477, dtype="int32") /* ty=Tensor[(3), int32] */;
  %482 = cast(%477, dtype="float32") /* ty=Tensor[(2, 10, 8), float32] */;
  %483 = dyn.reshape(%480, %481, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %484 = add(%482, %483) /* ty=Tensor[(2, 10, 8), float32] */;
  (%var_3416, %var_3417, %484)
}

def @func_4623(%var_4555: Tensor[(14, 4, 1), float64], %var_4604: Tensor[(2048), float32]) -> (Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(14, 4, ?), uint32], Tensor[(14, 4, 1), float64], Tensor[(8, 16, 16), uint64], Tensor[(2048), float32], Tensor[(14, 4, ?), int32], Tensor[(2, 10, 8), bool]) {
  %485 = @func_3509() /* ty=(Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64]) */;
  %486 = cast(meta[relay.Constant][26] /* ty=Tensor[(14, 4, 1), float64] */, dtype="uint32") /* ty=Tensor[(14, 4, 1), uint32] */;
  %487 = shape_of(%var_4555, dtype="int32") /* ty=Tensor[(3), int32] */;
  %488 = cast(%var_4555, dtype="uint32") /* ty=Tensor[(14, 4, 1), uint32] */;
  %489 = dyn.reshape(%486, %487, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %490 = cast(%var_4555, dtype="float64") /* ty=Tensor[(14, 4, 1), float64] */;
  %491 = acosh(%490) /* ty=Tensor[(14, 4, 1), float64] */;
  %492 = cast(%491, dtype="float64") /* ty=Tensor[(14, 4, 1), float64] */;
  %493 = sinh(%492) /* ty=Tensor[(14, 4, 1), float64] */;
  %494 = cast(%493, dtype="float64") /* ty=Tensor[(14, 4, 1), float64] */;
  %495 = cast(%var_4604, dtype="float32") /* ty=Tensor[(2048), float32] */;
  %496 = cast(%var_4604, dtype="float32") /* ty=Tensor[(2048), float32] */;
  %497 = cast(%var_4604, dtype="float32") /* ty=Tensor[(2048), float32] */;
  %498 = %485.0;
  %499 = cast(%498, dtype="bool") /* ty=Tensor[(2, 10, 8), bool] */;
  %500 = reshape(%495, newshape=[8, 16, 16]) /* ty=Tensor[(8, 16, 16), float32] */;
  %501 = reshape(%496, newshape=[8, 16, 16]) /* ty=Tensor[(8, 16, 16), float32] */;
  %502 = reshape(%497, newshape=[8, 16, 16]) /* ty=Tensor[(8, 16, 16), float32] */;
  %503 = reshape(%499, newshape=[4, 40]) /* ty=Tensor[(4, 40), bool] */;
  %504 = @func_936(%500, %501, %502, %503) /* ty=(Tensor[(8, 16, 16), uint64], Tensor[(2, 10, 8), float64], Tensor[(4, 40), bool]) */;
  %505 = cast(%var_4555, dtype="float64") /* ty=Tensor[(14, 4, 1), float64] */;
  %506 = cos(%505) /* ty=Tensor[(14, 4, 1), float64] */;
  %507 = cast(meta[relay.Constant][26] /* ty=Tensor[(14, 4, 1), float64] */, dtype="float32") /* ty=Tensor[(14, 4, 1), float32] */;
  %508 = shape_of(%506, dtype="int32") /* ty=Tensor[(3), int32] */;
  %509 = cast(%506, dtype="float32") /* ty=Tensor[(14, 4, 1), float32] */;
  %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %511 = floor_mod(%509, %510) /* ty=Tensor[(14, 4, ?), float32] */;
  %512 = cast(%511, dtype="int32") /* ty=Tensor[(14, 4, ?), int32] */;
  %513 = shape_of(%491, dtype="int32") /* ty=Tensor[(3), int32] */;
  %514 = cast(%491, dtype="int32") /* ty=Tensor[(14, 4, 1), int32] */;
  %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %516 = cast(%498, dtype="bool") /* ty=Tensor[(2, 10, 8), bool] */;
  %517 = cast(%498, dtype="bool") /* ty=Tensor[(2, 10, 8), bool] */;
  %518 = reshape(%516, newshape=[2, 10, 8]) /* ty=Tensor[(2, 10, 8), bool] */;
  %519 = reshape(%517, newshape=[2, 10, 8]) /* ty=Tensor[(2, 10, 8), bool] */;
  %520 = @func_84(%518, %519) /* ty=(Tensor[(2, 10, 8), bool], Tensor[(2, 10, 8), float64]) */;
  %521 = @func_2650() /* ty=Tensor[(2, 10, 8), float64] */;
  %522 = minimum(%488, %489) /* ty=Tensor[(14, 4, ?), uint32] */;
  %523 = erf(%494) /* ty=Tensor[(14, 4, 1), float64] */;
  %524 = %504.0;
  %525 = logical_xor(%514, %515) /* ty=Tensor[(14, 4, ?), int32] */;
  %526 = %520.0;
  (%498, %521, %522, %523, %524, %var_4604, %525, %526)
}

def @func_3282() -> (Tensor[(13, 2, 4), bool], Tensor[(8, 260), int16], Tensor[(2, 10, 8), float64], Tensor[(182, 10), bool]) {
  %527 = @func_2141() /* ty=(Tensor[(13, 2, 4), bool],) */;
  %528 = @func_2284() /* ty=(Tensor[(8, 260), int64],) */;
  %529 = %528.0;
  %530 = cast(meta[relay.Constant][27] /* ty=Tensor[(8, 260), int64] */, dtype="int16") /* ty=Tensor[(8, 260), int16] */;
  %531 = shape_of(%529, dtype="int32") /* ty=Tensor[(2), int32] */;
  %532 = cast(%529, dtype="int16") /* ty=Tensor[(8, 260), int16] */;
  %533 = dyn.reshape(%530, %531, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %534 = cast(meta[relay.Constant][28] /* ty=Tensor[(182, 10), float64] */, dtype="float64") /* ty=Tensor[(182, 10), float64] */;
  %535 = reshape(%534, newshape=[14, 13, 10]) /* ty=Tensor[(14, 13, 10), float64] */;
  %536 = @func_2500(%535) /* ty=(Tensor[(14, 13, 10), float64], Tensor[(2, 10, 8), float64]) */;
  %537 = cast(meta[relay.Constant][29] /* ty=Tensor[(182, 10), float64] */, dtype="bool") /* ty=Tensor[(182, 10), bool] */;
  %538 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(182, 10), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %539 = cast(meta[relay.Constant][28] /* ty=Tensor[(182, 10), float64] */, dtype="bool") /* ty=Tensor[(182, 10), bool] */;
  %540 = dyn.reshape(%537, %538, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %541 = %527.0;
  %542 = logical_xor(%532, %533) /* ty=Tensor[(8, 260), int16] */;
  %543 = %536.1;
  %544 = greater_equal(%539, %540) /* ty=Tensor[(182, 10), bool] */;
  (%541, %542, %543, %544)
}

def @func_4285(%var_4281: Tensor[(1, 13, 10), float64]) -> Tensor[(1, 13, 10), float64] {
  %545 = cast(%var_4281, dtype="float64") /* ty=Tensor[(1, 13, 10), float64] */;
  cosh(%545) /* ty=Tensor[(1, 13, 10), float64] */
}

def @func_3646(%var_3585: Tensor[(576), float64], %var_3590: Tensor[(1152), float32], %var_3641: Tensor[(896), float64]) -> (Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(1820), float64], Tensor[(4, 14, 16), bool], Tensor[(4, 9, 16), float64], float64, Tensor[(576), float64], Tensor[(12, 6, 16), float32], Tensor[(1152), float32], Tensor[(8, 260), int64], Tensor[(2, 10, 8), float64], Tensor[(896), float32], Tensor[(896), uint16]) {
  %546 = @func_3509() /* ty=(Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64]) */;
  %547 = %546.1;
  %548 = cast(%547, dtype="bool") /* ty=Tensor[(2, 10, 8), bool] */;
  %549 = cast(%547, dtype="bool") /* ty=Tensor[(2, 10, 8), bool] */;
  %550 = reshape(%548, newshape=[2, 10, 8]) /* ty=Tensor[(2, 10, 8), bool] */;
  %551 = reshape(%549, newshape=[2, 10, 8]) /* ty=Tensor[(2, 10, 8), bool] */;
  %552 = @func_84(%550, %551) /* ty=(Tensor[(2, 10, 8), bool], Tensor[(2, 10, 8), float64]) */;
  %553 = @func_1628() /* ty=(Tensor[(2, 10, 8), float64],) */;
  %554 = cast(meta[relay.Constant][30] /* ty=Tensor[(1820), float64] */, dtype="float64") /* ty=Tensor[(1820), float64] */;
  %555 = reshape(%554, newshape=[14, 13, 10]) /* ty=Tensor[(14, 13, 10), float64] */;
  %556 = @func_2500(%555) /* ty=(Tensor[(14, 13, 10), float64], Tensor[(2, 10, 8), float64]) */;
  %557 = cast(meta[relay.Constant][31] /* ty=Tensor[(896), int32] */, dtype="int32") /* ty=Tensor[(896), int32] */;
  %558 = reshape(%557, newshape=[16, 8, 7]) /* ty=Tensor[(16, 8, 7), int32] */;
  %559 = @func_1464(%558) /* ty=(Tensor[(13, 2, 4), bool], Tensor[(4, 14, 16), bool], Tensor[(16, 8, 7), bool], Tensor[(16, 8, 7), int32], Tensor[(2, 10, 8), float64]) */;
  %560 = cast(1.75476f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %561 = cast(%var_3585, dtype="float64") /* ty=Tensor[(576), float64] */;
  %562 = reshape(%560, newshape=[]) /* ty=float64 */;
  %563 = reshape(%561, newshape=[4, 9, 16]) /* ty=Tensor[(4, 9, 16), float64] */;
  %564 = cast(%var_3590, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %565 = cast(%var_3590, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %566 = reshape(%564, newshape=[12, 6, 16]) /* ty=Tensor[(12, 6, 16), float32] */;
  %567 = reshape(%565, newshape=[12, 6, 16]) /* ty=Tensor[(12, 6, 16), float32] */;
  %568 = @func_3180(%566, %567) /* ty=(Tensor[(12, 6, 16), float32],) */;
  %569 = @func_2284() /* ty=(Tensor[(8, 260), int64],) */;
  %570 = @func_1693() /* ty=(Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(9, 16, 12), float64], Tensor[(1728), float64], Tensor[(1, 7, 9), float32], Tensor[(63), float32]) */;
  %571 = cast(meta[relay.Constant][31] /* ty=Tensor[(896), int32] */, dtype="float64") /* ty=Tensor[(896), float64] */;
  %572 = exp(%571) /* ty=Tensor[(896), float64] */;
  %573 = cast(meta[relay.Constant][31] /* ty=Tensor[(896), int32] */, dtype="float32") /* ty=Tensor[(896), float32] */;
  %574 = shape_of(%572, dtype="int32") /* ty=Tensor[(1), int32] */;
  %575 = cast(%572, dtype="float32") /* ty=Tensor[(896), float32] */;
  %576 = dyn.reshape(%573, %574, newshape=[]) /* ty=Tensor[(?), float32] */;
  %577 = cast(%var_3641, dtype="uint16") /* ty=Tensor[(896), uint16] */;
  %578 = shape_of(%572, dtype="int32") /* ty=Tensor[(1), int32] */;
  %579 = cast(%572, dtype="uint16") /* ty=Tensor[(896), uint16] */;
  %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %581 = @func_1315() /* ty=Tensor[(2, 10, 8), float64] */;
  %582 = %552.1;
  %583 = %553.0;
  %584 = %556.1;
  %585 = %559.1;
  %586 = @func_1244(%562, %563) /* ty=Tensor[(4, 9, 16), float64] */;
  %587 = %568.0;
  %588 = %569.0;
  %589 = %570.1;
  %590 = power(%575, %576) /* ty=Tensor[(896), float32] */;
  %591 = subtract(%579, %580) /* ty=Tensor[(896), uint16] */;
  (%581, %547, %582, %583, %584, meta[relay.Constant][30] /* ty=Tensor[(1820), float64] */, %585, %586, 1.75476f64 /* ty=float64 */, %var_3585, %587, %var_3590, %588, %589, %590, %591)
}

def @func_4123(%var_4095: float64) -> (Tensor[(14, 5, 6), float64], Tensor[(2, 10, 8), float64], Tensor[(35), int32], Tensor[(704, 1), float64]) {
  %592 = cast(%var_4095, dtype="float64") /* ty=float64 */;
  %593 = cast(meta[relay.Constant][32] /* ty=Tensor[(14, 5, 6), float64] */, dtype="float64") /* ty=Tensor[(14, 5, 6), float64] */;
  %594 = cast(meta[relay.Constant][33] /* ty=Tensor[(35), int32] */, dtype="int32") /* ty=Tensor[(35), int32] */;
  %595 = reshape(%594, newshape=[1, 35]) /* ty=Tensor[(1, 35), int32] */;
  %596 = @func_1815(%595) /* ty=(Tensor[(2, 10, 8), float64], Tensor[(15, 7, 5), int32], Tensor[(1, 35), int32]) */;
  %597 = floor_mod(%592, %593) /* ty=Tensor[(14, 5, 6), float64] */;
  %598 = %596.0;
  %599 = @func_3721() /* ty=Tensor[(704, 1), float64] */;
  (%597, %598, meta[relay.Constant][33] /* ty=Tensor[(35), int32] */, %599)
}

def @func_4188(%var_4167: float32, %var_4168: Tensor[(2, 1, 14), float32]) -> (Tensor[(8, 260), int64], Tensor[(2, 1, 14), float64], Tensor[(2, 1, 14), float32]) {
  %600 = cast(%var_4167, dtype="bool") /* ty=bool */;
  %601 = cast(%var_4168, dtype="bool") /* ty=Tensor[(2, 1, 14), bool] */;
  %602 = not_equal(%600, %601) /* ty=Tensor[(2, 1, 14), bool] */;
  %603 = cast(%602, dtype="float64") /* ty=Tensor[(2, 1, 14), float64] */;
  %604 = cast(%602, dtype="float32") /* ty=Tensor[(2, 1, 14), float32] */;
  %605 = @func_3221() /* ty=Tensor[(8, 260), int64] */;
  %606 = sqrt(%603) /* ty=Tensor[(2, 1, 14), float64] */;
  %607 = log2(%604) /* ty=Tensor[(2, 1, 14), float32] */;
  (%605, %606, %607)
}

def @func_2284() -> (Tensor[(8, 260), int64],) {
  %608 = @func_860() /* ty=(Tensor[(16, 9, 2), bool], Tensor[(99, 9), float32], Tensor[(704, 1), float64], Tensor[(2, 10, 8), float64], Tensor[(160), bool], Tensor[(2, 10, 8), float64], Tensor[(8, 260), int64], Tensor[(2080), float32]) */;
  %609 = %608.6;
  (%609,)
}

def @func_4196() -> Tensor[(2, 10, 8), float64] {
  %610 = @func_2205() /* ty=(Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64]) */;
  %610.0
}

def @func_2559(%var_2528: Tensor[(2, 7, 16), uint8], %var_2529: Tensor[(2, 7, 16), uint8]) -> (Tensor[(2, 7, 16), bool], Tensor[(2, 10, 8), float64], Tensor[(8, 88), bool]) {
  %611 = cast(%var_2529, dtype="bool") /* ty=Tensor[(2, 7, 16), bool] */;
  %612 = shape_of(%var_2528, dtype="int32") /* ty=Tensor[(3), int32] */;
  %613 = cast(%var_2528, dtype="bool") /* ty=Tensor[(2, 7, 16), bool] */;
  %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %615 = @func_2015() /* ty=(Tensor[(2, 10, 8), float64], float64, Tensor[(1260), int16], Tensor[(12, 48), float64], Tensor[(2, 10, 8), float64], Tensor[(24, 72), float64]) */;
  %616 = cast(meta[relay.Constant][34] /* ty=Tensor[(8, 88), float64] */, dtype="float64") /* ty=Tensor[(8, 88), float64] */;
  %617 = reshape(%616, newshape=[8, 8, 11]) /* ty=Tensor[(8, 8, 11), float64] */;
  %618 = @func_563(%617) /* ty=(Tensor[(10, 13, 16), int64], Tensor[(8, 260), int64], Tensor[(160), bool], Tensor[(99, 9), float32], Tensor[(1, 7, 9), float32], Tensor[(21, 3), float32], Tensor[(9, 11, 9), float32], Tensor[(8, 8, 11), float32], Tensor[(9, 11, 9), float32]) */;
  %619 = %618.7;
  %620 = cast(%619, dtype="bool") /* ty=Tensor[(8, 8, 11), bool] */;
  %621 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(8, 88), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %622 = cast(meta[relay.Constant][34] /* ty=Tensor[(8, 88), float64] */, dtype="bool") /* ty=Tensor[(8, 88), bool] */;
  %623 = dyn.reshape(%620, %621, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %624 = not_equal(%613, %614) /* ty=Tensor[(2, 7, 16), bool] */;
  %625 = %615.0;
  %626 = greater_equal(%622, %623) /* ty=Tensor[(8, 88), bool] */;
  (%624, %625, %626)
}

def @func_4547(%var_4529: Tensor[(13, 2, 4), bool]) -> (Tensor[(13, 2, 4), bool], Tensor[(8, 88), bool], Tensor[(224), uint8]) {
  %627 = @func_2141() /* ty=(Tensor[(13, 2, 4), bool],) */;
  %628 = %627.0;
  %629 = cast(%var_4529, dtype="bool") /* ty=Tensor[(13, 2, 4), bool] */;
  %630 = shape_of(%628, dtype="int32") /* ty=Tensor[(3), int32] */;
  %631 = cast(%628, dtype="bool") /* ty=Tensor[(13, 2, 4), bool] */;
  %632 = dyn.reshape(%629, %630, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %633 = cast(meta[relay.Constant][35] /* ty=Tensor[(224), uint8] */, dtype="uint8") /* ty=Tensor[(224), uint8] */;
  %634 = cast(meta[relay.Constant][35] /* ty=Tensor[(224), uint8] */, dtype="uint8") /* ty=Tensor[(224), uint8] */;
  %635 = reshape(%633, newshape=[2, 7, 16]) /* ty=Tensor[(2, 7, 16), uint8] */;
  %636 = reshape(%634, newshape=[2, 7, 16]) /* ty=Tensor[(2, 7, 16), uint8] */;
  %637 = @func_2559(%635, %636) /* ty=(Tensor[(2, 7, 16), bool], Tensor[(2, 10, 8), float64], Tensor[(8, 88), bool]) */;
  %638 = less_equal(%631, %632) /* ty=Tensor[(13, 2, 4), bool] */;
  %639 = %637.2;
  (%638, %639, meta[relay.Constant][35] /* ty=Tensor[(224), uint8] */)
}

def @func_1801() -> (Tensor[(704, 1), float64],) {
  %640 = @func_860() /* ty=(Tensor[(16, 9, 2), bool], Tensor[(99, 9), float32], Tensor[(704, 1), float64], Tensor[(2, 10, 8), float64], Tensor[(160), bool], Tensor[(2, 10, 8), float64], Tensor[(8, 260), int64], Tensor[(2080), float32]) */;
  %641 = %640.2;
  (%641,)
}

def @func_3669() -> (Tensor[(2, 10, 8), float64],) {
  %642 = @func_1083() /* ty=(Tensor[(2, 10, 8), float64],) */;
  %643 = %642.0;
  (%643,)
}

def @func_4216(%var_4205: float64, %var_4206: Tensor[(576), float64]) -> (Tensor[(4, 9, 16), float64], Tensor[(576), float64], Tensor[(13, 2, 4), uint8]) {
  %644 = cast(%var_4205, dtype="float64") /* ty=float64 */;
  %645 = cast(%var_4206, dtype="float64") /* ty=Tensor[(576), float64] */;
  %646 = reshape(%644, newshape=[]) /* ty=float64 */;
  %647 = reshape(%645, newshape=[4, 9, 16]) /* ty=Tensor[(4, 9, 16), float64] */;
  %648 = @func_3282() /* ty=(Tensor[(13, 2, 4), bool], Tensor[(8, 260), int16], Tensor[(2, 10, 8), float64], Tensor[(182, 10), bool]) */;
  %649 = %648.0;
  %650 = cast(%var_4205, dtype="uint8") /* ty=uint8 */;
  %651 = cast(%649, dtype="uint8") /* ty=Tensor[(13, 2, 4), uint8] */;
  %652 = @func_1244(%646, %647) /* ty=Tensor[(4, 9, 16), float64] */;
  %653 = multiply(%650, %651) /* ty=Tensor[(13, 2, 4), uint8] */;
  (%652, %var_4206, %653)
}

def @func_272(%var_185: Tensor[(10, 13, 16), int64], %var_186: Tensor[(10, 13, 16), int64], %var_191: Tensor[(160), bool], %var_200: Tensor[(99, 9), float32], %var_215: Tensor[(10, 13, 16), int64]) -> (Tensor[(10, 13, 16), int64], Tensor[(2, 10, 8), bool], Tensor[(9, 11, 9), float32], Tensor[(99, 9), float32], Tensor[(160), float32], Tensor[(10, 13, 16), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64]) {
  %654 = cast(%var_186, dtype="int64") /* ty=Tensor[(10, 13, 16), int64] */;
  %655 = shape_of(%var_185, dtype="int32") /* ty=Tensor[(3), int32] */;
  %656 = cast(%var_185, dtype="int64") /* ty=Tensor[(10, 13, 16), int64] */;
  %657 = dyn.reshape(%654, %655, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %658 = cast(%var_191, dtype="bool") /* ty=Tensor[(160), bool] */;
  %659 = cast(%var_191, dtype="bool") /* ty=Tensor[(160), bool] */;
  %660 = reshape(%658, newshape=[2, 10, 8]) /* ty=Tensor[(2, 10, 8), bool] */;
  %661 = reshape(%659, newshape=[2, 10, 8]) /* ty=Tensor[(2, 10, 8), bool] */;
  %662 = @func_84(%660, %661) /* ty=(Tensor[(2, 10, 8), bool], Tensor[(2, 10, 8), float64]) */;
  %663 = cast(%var_200, dtype="float32") /* ty=Tensor[(99, 9), float32] */;
  %664 = reshape(%663, newshape=[9, 11, 9]) /* ty=Tensor[(9, 11, 9), float32] */;
  %665 = @func_127(%664) /* ty=(Tensor[(9, 11, 9), float32],) */;
  %666 = cast(%var_191, dtype="float32") /* ty=Tensor[(160), float32] */;
  %667 = cast(%var_215, dtype="float64") /* ty=Tensor[(10, 13, 16), float64] */;
  %668 = shape_of(%var_186, dtype="int32") /* ty=Tensor[(3), int32] */;
  %669 = cast(%var_186, dtype="float64") /* ty=Tensor[(10, 13, 16), float64] */;
  %670 = dyn.reshape(%667, %668, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %671 = cast(%var_191, dtype="bool") /* ty=Tensor[(160), bool] */;
  %672 = acos(%666) /* ty=Tensor[(160), float32] */;
  %673 = cast(%672, dtype="bool") /* ty=Tensor[(160), bool] */;
  %674 = reshape(%671, newshape=[2, 10, 8]) /* ty=Tensor[(2, 10, 8), bool] */;
  %675 = reshape(%673, newshape=[2, 10, 8]) /* ty=Tensor[(2, 10, 8), bool] */;
  %676 = @func_84(%674, %675) /* ty=(Tensor[(2, 10, 8), bool], Tensor[(2, 10, 8), float64]) */;
  %677 = %676.1;
  %678 = cast(%677, dtype="bool") /* ty=Tensor[(2, 10, 8), bool] */;
  %679 = cast(%677, dtype="bool") /* ty=Tensor[(2, 10, 8), bool] */;
  %680 = reshape(%678, newshape=[2, 10, 8]) /* ty=Tensor[(2, 10, 8), bool] */;
  %681 = reshape(%679, newshape=[2, 10, 8]) /* ty=Tensor[(2, 10, 8), bool] */;
  %682 = @func_84(%680, %681) /* ty=(Tensor[(2, 10, 8), bool], Tensor[(2, 10, 8), float64]) */;
  %683 = cast(%677, dtype="bool") /* ty=Tensor[(2, 10, 8), bool] */;
  %684 = cast(%672, dtype="bool") /* ty=Tensor[(160), bool] */;
  %685 = reshape(%683, newshape=[2, 10, 8]) /* ty=Tensor[(2, 10, 8), bool] */;
  %686 = reshape(%684, newshape=[2, 10, 8]) /* ty=Tensor[(2, 10, 8), bool] */;
  %687 = @func_84(%685, %686) /* ty=(Tensor[(2, 10, 8), bool], Tensor[(2, 10, 8), float64]) */;
  %688 = left_shift(%656, %657) /* ty=Tensor[(10, 13, 16), int64] */;
  %689 = %662.0;
  %690 = %665.0;
  %691 = subtract(%669, %670) /* ty=Tensor[(10, 13, 16), float64] */;
  %692 = %682.1;
  %693 = %687.1;
  (%688, %689, %690, %var_200, %672, %691, %677, %692, %693)
}

def @func_3150() -> (Tensor[(2, 10, 8), int32],) {
  %694 = @func_1315() /* ty=Tensor[(2, 10, 8), float64] */;
  %695 = @func_2015() /* ty=(Tensor[(2, 10, 8), float64], float64, Tensor[(1260), int16], Tensor[(12, 48), float64], Tensor[(2, 10, 8), float64], Tensor[(24, 72), float64]) */;
  %696 = %695.1;
  %697 = cast(%694, dtype="int32") /* ty=Tensor[(2, 10, 8), int32] */;
  %698 = cast(%696, dtype="int32") /* ty=int32 */;
  %699 = logical_xor(%697, %698) /* ty=Tensor[(2, 10, 8), int32] */;
  (%699,)
}

def @func_1693() -> (Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(9, 16, 12), float64], Tensor[(1728), float64], Tensor[(1, 7, 9), float32], Tensor[(63), float32]) {
  %700 = cast(meta[relay.Constant][36] /* ty=Tensor[(1728), float64] */, dtype="float64") /* ty=Tensor[(1728), float64] */;
  %701 = cast(meta[relay.Constant][36] /* ty=Tensor[(1728), float64] */, dtype="float64") /* ty=Tensor[(1728), float64] */;
  %702 = reshape(%700, newshape=[9, 16, 12]) /* ty=Tensor[(9, 16, 12), float64] */;
  %703 = reshape(%701, newshape=[9, 16, 12]) /* ty=Tensor[(9, 16, 12), float64] */;
  %704 = @func_581(%702, %703) /* ty=(Tensor[(9, 16, 12), float64],) */;
  %705 = cast(meta[relay.Constant][37] /* ty=Tensor[(63), float32] */, dtype="float32") /* ty=Tensor[(63), float32] */;
  %706 = reshape(%705, newshape=[1, 7, 9]) /* ty=Tensor[(1, 7, 9), float32] */;
  %707 = @func_1315() /* ty=Tensor[(2, 10, 8), float64] */;
  %708 = @func_1315() /* ty=Tensor[(2, 10, 8), float64] */;
  %709 = %704.0;
  %710 = @func_382(%706) /* ty=Tensor[(1, 7, 9), float32] */;
  (%707, %708, %709, meta[relay.Constant][36] /* ty=Tensor[(1728), float64] */, %710, meta[relay.Constant][37] /* ty=Tensor[(63), float32] */)
}

def @func_936(%var_901: Tensor[(8, 16, 16), float32], %var_902: Tensor[(8, 16, 16), float32], %var_911: Tensor[(8, 16, 16), float32], %var_920: Tensor[(4, 40), bool]) -> (Tensor[(8, 16, 16), uint64], Tensor[(2, 10, 8), float64], Tensor[(4, 40), bool]) {
  %711 = cast(%var_902, dtype="float32") /* ty=Tensor[(8, 16, 16), float32] */;
  %712 = shape_of(%var_901, dtype="int32") /* ty=Tensor[(3), int32] */;
  %713 = cast(%var_901, dtype="float32") /* ty=Tensor[(8, 16, 16), float32] */;
  %714 = dyn.reshape(%711, %712, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %715 = maximum(%713, %714) /* ty=Tensor[(8, 16, 16), float32] */;
  %716 = cast(%var_911, dtype="uint64") /* ty=Tensor[(8, 16, 16), uint64] */;
  %717 = shape_of(%715, dtype="int32") /* ty=Tensor[(3), int32] */;
  %718 = cast(%715, dtype="uint64") /* ty=Tensor[(8, 16, 16), uint64] */;
  %719 = dyn.reshape(%716, %717, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %720 = cast(%var_920, dtype="bool") /* ty=Tensor[(4, 40), bool] */;
  %721 = cast(%var_920, dtype="bool") /* ty=Tensor[(4, 40), bool] */;
  %722 = reshape(%720, newshape=[2, 10, 8]) /* ty=Tensor[(2, 10, 8), bool] */;
  %723 = reshape(%721, newshape=[2, 10, 8]) /* ty=Tensor[(2, 10, 8), bool] */;
  %724 = @func_84(%722, %723) /* ty=(Tensor[(2, 10, 8), bool], Tensor[(2, 10, 8), float64]) */;
  %725 = bitwise_and(%718, %719) /* ty=Tensor[(8, 16, 16), uint64] */;
  %726 = %724.1;
  (%725, %726, %var_920)
}

def @func_1229(%var_1222: Tensor[(1, 7, 5), int32]) -> Tensor[(15, 7, 5), int32] {
  %727 = cast(%var_1222, dtype="int32") /* ty=Tensor[(1, 7, 5), int32] */;
  %728 = cast(meta[relay.Constant][38] /* ty=Tensor[(15, 7, 5), int32] */, dtype="int32") /* ty=Tensor[(15, 7, 5), int32] */;
  bitwise_and(%727, %728) /* ty=Tensor[(15, 7, 5), int32] */
}

def @func_1026(%var_990: Tensor[(99, 9), float32]) -> (Tensor[(99, 9), bool], Tensor[(2, 10, 8), float64], Tensor[(160), bool]) {
  %729 = @func_860() /* ty=(Tensor[(16, 9, 2), bool], Tensor[(99, 9), float32], Tensor[(704, 1), float64], Tensor[(2, 10, 8), float64], Tensor[(160), bool], Tensor[(2, 10, 8), float64], Tensor[(8, 260), int64], Tensor[(2080), float32]) */;
  %730 = %729.1;
  %731 = cast(%var_990, dtype="bool") /* ty=Tensor[(99, 9), bool] */;
  %732 = shape_of(%730, dtype="int32") /* ty=Tensor[(2), int32] */;
  %733 = cast(%730, dtype="bool") /* ty=Tensor[(99, 9), bool] */;
  %734 = dyn.reshape(%731, %732, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %735 = cast(meta[relay.Constant][39] /* ty=Tensor[(160), bool] */, dtype="bool") /* ty=Tensor[(160), bool] */;
  %736 = cast(meta[relay.Constant][39] /* ty=Tensor[(160), bool] */, dtype="bool") /* ty=Tensor[(160), bool] */;
  %737 = reshape(%735, newshape=[2, 10, 8]) /* ty=Tensor[(2, 10, 8), bool] */;
  %738 = reshape(%736, newshape=[2, 10, 8]) /* ty=Tensor[(2, 10, 8), bool] */;
  %739 = @func_84(%737, %738) /* ty=(Tensor[(2, 10, 8), bool], Tensor[(2, 10, 8), float64]) */;
  %740 = less(%733, %734) /* ty=Tensor[(99, 9), bool] */;
  %741 = %739.1;
  (%740, %741, meta[relay.Constant][39] /* ty=Tensor[(160), bool] */)
}

def @func_1511(%var_1482: float64, %var_1483: Tensor[(576), float64]) -> (Tensor[(576), uint16], Tensor[(2, 10, 8), float64]) {
  %742 = cast(%var_1482, dtype="float64") /* ty=float64 */;
  %743 = cast(%var_1483, dtype="float64") /* ty=Tensor[(576), float64] */;
  %744 = reshape(%742, newshape=[]) /* ty=float64 */;
  %745 = reshape(%743, newshape=[4, 9, 16]) /* ty=Tensor[(4, 9, 16), float64] */;
  %746 = @func_1244(%744, %745) /* ty=Tensor[(4, 9, 16), float64] */;
  %747 = cast(%746, dtype="int32") /* ty=Tensor[(4, 9, 16), int32] */;
  %748 = shape_of(%var_1483, dtype="int32") /* ty=Tensor[(1), int32] */;
  %749 = cast(%var_1483, dtype="int32") /* ty=Tensor[(576), int32] */;
  %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?), int32] */;
  %751 = logical_xor(%749, %750) /* ty=Tensor[(576), int32] */;
  %752 = cast(%var_1482, dtype="uint16") /* ty=uint16 */;
  %753 = cast(%751, dtype="uint16") /* ty=Tensor[(576), uint16] */;
  %754 = @func_860() /* ty=(Tensor[(16, 9, 2), bool], Tensor[(99, 9), float32], Tensor[(704, 1), float64], Tensor[(2, 10, 8), float64], Tensor[(160), bool], Tensor[(2, 10, 8), float64], Tensor[(8, 260), int64], Tensor[(2080), float32]) */;
  %755 = %754.5;
  %756 = cast(%755, dtype="float64") /* ty=Tensor[(2, 10, 8), float64] */;
  %757 = bitwise_xor(%752, %753) /* ty=Tensor[(576), uint16] */;
  %758 = log2(%756) /* ty=Tensor[(2, 10, 8), float64] */;
  (%757, %758)
}

def @func_2772(%var_2730: float64, %var_2739: Tensor[(9, 11, 9), float32]) -> (Tensor[(704, 1), float64], Tensor[(891), float32], Tensor[(4, 9, 16), float64], float64, Tensor[(576), float64], Tensor[(9, 11, 9), bool]) {
  %759 = @func_1801() /* ty=(Tensor[(704, 1), float64],) */;
  %760 = cast(%var_2730, dtype="float64") /* ty=float64 */;
  %761 = cast(meta[relay.Constant][41] /* ty=Tensor[(576), float64] */, dtype="float64") /* ty=Tensor[(576), float64] */;
  %762 = reshape(%760, newshape=[]) /* ty=float64 */;
  %763 = reshape(%761, newshape=[4, 9, 16]) /* ty=Tensor[(4, 9, 16), float64] */;
  %764 = cast(meta[relay.Constant][40] /* ty=Tensor[(891), float32] */, dtype="float32") /* ty=Tensor[(891), float32] */;
  %765 = reshape(%764, newshape=[9, 11, 9]) /* ty=Tensor[(9, 11, 9), float32] */;
  %766 = @func_127(%765) /* ty=(Tensor[(9, 11, 9), float32],) */;
  %767 = %766.0;
  %768 = cast(%var_2739, dtype="bool") /* ty=Tensor[(9, 11, 9), bool] */;
  %769 = shape_of(%767, dtype="int32") /* ty=Tensor[(3), int32] */;
  %770 = cast(%767, dtype="bool") /* ty=Tensor[(9, 11, 9), bool] */;
  %771 = dyn.reshape(%768, %769, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %772 = %759.0;
  %773 = @func_1244(%762, %763) /* ty=Tensor[(4, 9, 16), float64] */;
  %774 = logical_and(%770, %771) /* ty=Tensor[(9, 11, 9), bool] */;
  (%772, meta[relay.Constant][40] /* ty=Tensor[(891), float32] */, %773, %var_2730, meta[relay.Constant][41] /* ty=Tensor[(576), float64] */, %774)
}

def @func_2617() -> (Tensor[(9, 2, 4), float64], Tensor[(9, 2, 4), float64]) {
  %775 = cast(meta[relay.Constant][42] /* ty=Tensor[(9, 2, 4), float64] */, dtype="float64") /* ty=Tensor[(9, 2, 4), float64] */;
  %776 = cast(meta[relay.Constant][42] /* ty=Tensor[(9, 2, 4), float64] */, dtype="float64") /* ty=Tensor[(9, 2, 4), float64] */;
  %777 = sqrt(%775) /* ty=Tensor[(9, 2, 4), float64] */;
  %778 = exp(%776) /* ty=Tensor[(9, 2, 4), float64] */;
  (%777, %778)
}

def @func_2902() -> (Tensor[(9, 2, 4), int8],) {
  %779 = @func_2617() /* ty=(Tensor[(9, 2, 4), float64], Tensor[(9, 2, 4), float64]) */;
  %780 = %779.1;
  %781 = cast(meta[relay.Constant][43] /* ty=Tensor[(9, 2, 4), float64] */, dtype="uint16") /* ty=Tensor[(9, 2, 4), uint16] */;
  %782 = shape_of(%780, dtype="int32") /* ty=Tensor[(3), int32] */;
  %783 = cast(%780, dtype="uint16") /* ty=Tensor[(9, 2, 4), uint16] */;
  %784 = dyn.reshape(%781, %782, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %785 = logical_xor(%783, %784) /* ty=Tensor[(9, 2, 4), uint16] */;
  %786 = cast(%780, dtype="int8") /* ty=Tensor[(9, 2, 4), int8] */;
  %787 = shape_of(%785, dtype="int32") /* ty=Tensor[(3), int32] */;
  %788 = cast(%785, dtype="int8") /* ty=Tensor[(9, 2, 4), int8] */;
  %789 = dyn.reshape(%786, %787, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %790 = left_shift(%788, %789) /* ty=Tensor[(9, 2, 4), int8] */;
  (%790,)
}

def @func_1815(%var_1810: Tensor[(1, 35), int32]) -> (Tensor[(2, 10, 8), float64], Tensor[(15, 7, 5), int32], Tensor[(1, 35), int32]) {
  %791 = @func_1083() /* ty=(Tensor[(2, 10, 8), float64],) */;
  %792 = cast(%var_1810, dtype="int32") /* ty=Tensor[(1, 35), int32] */;
  %793 = reshape(%792, newshape=[1, 7, 5]) /* ty=Tensor[(1, 7, 5), int32] */;
  %794 = %791.0;
  %795 = @func_1229(%793) /* ty=Tensor[(15, 7, 5), int32] */;
  (%794, %795, %var_1810)
}

def @func_1083() -> (Tensor[(2, 10, 8), float64],) {
  %796 = @func_860() /* ty=(Tensor[(16, 9, 2), bool], Tensor[(99, 9), float32], Tensor[(704, 1), float64], Tensor[(2, 10, 8), float64], Tensor[(160), bool], Tensor[(2, 10, 8), float64], Tensor[(8, 260), int64], Tensor[(2080), float32]) */;
  %797 = %796.3;
  (%797,)
}

def @func_2650() -> Tensor[(2, 10, 8), float64] {
  %798 = @func_1628() /* ty=(Tensor[(2, 10, 8), float64],) */;
  %798.0
}

def @func_4424() -> Tensor[(2, 10, 8), float64] {
  @func_3106() /* ty=Tensor[(2, 10, 8), float64] */
}

def @func_2474(%var_2438: Tensor[(2080), int64], %var_2439: Tensor[(891), float32]) -> (Tensor[(2, 10, 8), float64], Tensor[(10, 13, 16), float64], Tensor[(2080), int64], Tensor[(891), float32]) {
  %799 = @func_2205() /* ty=(Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64]) */;
  %800 = cast(%var_2438, dtype="int64") /* ty=Tensor[(2080), int64] */;
  %801 = cast(%var_2438, dtype="int64") /* ty=Tensor[(2080), int64] */;
  %802 = %799.0;
  %803 = cast(%802, dtype="bool") /* ty=Tensor[(2, 10, 8), bool] */;
  %804 = cast(%var_2439, dtype="float32") /* ty=Tensor[(891), float32] */;
  %805 = cast(%var_2438, dtype="int64") /* ty=Tensor[(2080), int64] */;
  %806 = reshape(%800, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), int64] */;
  %807 = reshape(%801, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), int64] */;
  %808 = reshape(%803, newshape=[160]) /* ty=Tensor[(160), bool] */;
  %809 = reshape(%804, newshape=[99, 9]) /* ty=Tensor[(99, 9), float32] */;
  %810 = reshape(%805, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), int64] */;
  %811 = @func_272(%806, %807, %808, %809, %810) /* ty=(Tensor[(10, 13, 16), int64], Tensor[(2, 10, 8), bool], Tensor[(9, 11, 9), float32], Tensor[(99, 9), float32], Tensor[(160), float32], Tensor[(10, 13, 16), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64]) */;
  %812 = %811.5;
  (%802, %812, %var_2438, %var_2439)
}

def @func_3318() -> (Tensor[(2, 10, 8), float64],) {
  %813 = @func_2518() /* ty=(Tensor[(2, 10, 8), float64],) */;
  %814 = %813.0;
  (%814,)
}

def @func_1870() -> (Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(1728), float64]) {
  %815 = @func_1083() /* ty=(Tensor[(2, 10, 8), float64],) */;
  %816 = @func_1693() /* ty=(Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(9, 16, 12), float64], Tensor[(1728), float64], Tensor[(1, 7, 9), float32], Tensor[(63), float32]) */;
  %817 = @func_860() /* ty=(Tensor[(16, 9, 2), bool], Tensor[(99, 9), float32], Tensor[(704, 1), float64], Tensor[(2, 10, 8), float64], Tensor[(160), bool], Tensor[(2, 10, 8), float64], Tensor[(8, 260), int64], Tensor[(2080), float32]) */;
  %818 = @func_1693() /* ty=(Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(9, 16, 12), float64], Tensor[(1728), float64], Tensor[(1, 7, 9), float32], Tensor[(63), float32]) */;
  %819 = %815.0;
  %820 = %816.1;
  %821 = %817.5;
  %822 = %818.3;
  (%819, %820, %821, %822)
}

def @func_4518() -> (Tensor[(2080), float32],) {
  %823 = @func_4394() /* ty=Tensor[(2080), float32] */;
  (%823,)
}

def @func_4365(%var_4358: Tensor[(21, 3), float32]) -> (Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(21, 3), uint16]) {
  %824 = @func_2205() /* ty=(Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64]) */;
  %825 = cast(%var_4358, dtype="float32") /* ty=Tensor[(21, 3), float32] */;
  %826 = reshape(%825, newshape=[1, 7, 9]) /* ty=Tensor[(1, 7, 9), float32] */;
  %827 = @func_382(%826) /* ty=Tensor[(1, 7, 9), float32] */;
  %828 = cast(%827, dtype="uint16") /* ty=Tensor[(1, 7, 9), uint16] */;
  %829 = shape_of(%var_4358, dtype="int32") /* ty=Tensor[(2), int32] */;
  %830 = cast(%var_4358, dtype="uint16") /* ty=Tensor[(21, 3), uint16] */;
  %831 = dyn.reshape(%828, %829, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %832 = @func_4196() /* ty=Tensor[(2, 10, 8), float64] */;
  %833 = %824.1;
  %834 = bitwise_or(%830, %831) /* ty=Tensor[(21, 3), uint16] */;
  (%832, %833, %834)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1157() -> (Tensor[(2, 10, 8), float64], Tensor[(13, 2, 4), bool], Tensor[(104), uint16]) {
  %7 = fn () -> (Tensor[(2, 10, 8), float64], Tensor[(13, 2, 4), bool], Tensor[(104), uint16]) {
    %0 = @func_1083() /* ty=(Tensor[(2, 10, 8), float64],) */;
    %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(104), uint16] */, dtype="uint16") /* ty=Tensor[(104), uint16] */;
    %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(104), uint16] */, dtype="uint16") /* ty=Tensor[(104), uint16] */;
    %3 = reshape(%1, newshape=[13, 2, 4]) /* ty=Tensor[(13, 2, 4), uint16] */;
    %4 = reshape(%2, newshape=[13, 2, 4]) /* ty=Tensor[(13, 2, 4), uint16] */;
    %5 = %0.0;
    %6 = @func_716(%3, %4) /* ty=Tensor[(13, 2, 4), bool] */;
    (%5, %6, meta[relay.Constant][0] /* ty=Tensor[(104), uint16] */)
  };
  %7() /* ty=(Tensor[(2, 10, 8), float64], Tensor[(13, 2, 4), bool], Tensor[(104), uint16]) */
}

def @func_3646(%var_3585: Tensor[(576), float64], %var_3590: Tensor[(1152), float32], %var_3641: Tensor[(896), float64]) -> (Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(1820), float64], Tensor[(4, 14, 16), bool], Tensor[(4, 9, 16), float64], float64, Tensor[(576), float64], Tensor[(12, 6, 16), float32], Tensor[(1152), float32], Tensor[(8, 260), int64], Tensor[(2, 10, 8), float64], Tensor[(896), float32], Tensor[(896), uint16]) {
  %8 = @func_3509() /* ty=(Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64]) */;
  %9 = %8.1;
  %10 = cast(%9, dtype="bool") /* ty=Tensor[(2, 10, 8), bool] */;
  %11 = cast(%9, dtype="bool") /* ty=Tensor[(2, 10, 8), bool] */;
  %12 = reshape(%10, newshape=[2, 10, 8]) /* ty=Tensor[(2, 10, 8), bool] */;
  %13 = reshape(%11, newshape=[2, 10, 8]) /* ty=Tensor[(2, 10, 8), bool] */;
  %14 = @func_84(%12, %13) /* ty=(Tensor[(2, 10, 8), bool], Tensor[(2, 10, 8), float64]) */;
  %15 = @func_1628() /* ty=(Tensor[(2, 10, 8), float64],) */;
  %16 = cast(meta[relay.Constant][1] /* ty=Tensor[(1820), float64] */, dtype="float64") /* ty=Tensor[(1820), float64] */;
  %17 = reshape(%16, newshape=[14, 13, 10]) /* ty=Tensor[(14, 13, 10), float64] */;
  %18 = @func_2500(%17) /* ty=(Tensor[(14, 13, 10), float64], Tensor[(2, 10, 8), float64]) */;
  %19 = cast(meta[relay.Constant][2] /* ty=Tensor[(896), int32] */, dtype="int32") /* ty=Tensor[(896), int32] */;
  %20 = reshape(%19, newshape=[16, 8, 7]) /* ty=Tensor[(16, 8, 7), int32] */;
  %21 = @func_1464(%20) /* ty=(Tensor[(13, 2, 4), bool], Tensor[(4, 14, 16), bool], Tensor[(16, 8, 7), bool], Tensor[(16, 8, 7), int32], Tensor[(2, 10, 8), float64]) */;
  %22 = cast(1.75476f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %23 = cast(%var_3585, dtype="float64") /* ty=Tensor[(576), float64] */;
  %24 = reshape(%22, newshape=[]) /* ty=float64 */;
  %25 = reshape(%23, newshape=[4, 9, 16]) /* ty=Tensor[(4, 9, 16), float64] */;
  %26 = cast(%var_3590, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %27 = cast(%var_3590, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %28 = reshape(%26, newshape=[12, 6, 16]) /* ty=Tensor[(12, 6, 16), float32] */;
  %29 = reshape(%27, newshape=[12, 6, 16]) /* ty=Tensor[(12, 6, 16), float32] */;
  %30 = @func_3180(%28, %29) /* ty=(Tensor[(12, 6, 16), float32],) */;
  %31 = @func_2284() /* ty=(Tensor[(8, 260), int64],) */;
  %32 = @func_1693() /* ty=(Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(9, 16, 12), float64], Tensor[(1728), float64], Tensor[(1, 7, 9), float32], Tensor[(63), float32]) */;
  %33 = cast(meta[relay.Constant][2] /* ty=Tensor[(896), int32] */, dtype="float64") /* ty=Tensor[(896), float64] */;
  %34 = exp(%33) /* ty=Tensor[(896), float64] */;
  %35 = cast(meta[relay.Constant][2] /* ty=Tensor[(896), int32] */, dtype="float32") /* ty=Tensor[(896), float32] */;
  %36 = shape_of(%34, dtype="int32") /* ty=Tensor[(1), int32] */;
  %37 = cast(%34, dtype="float32") /* ty=Tensor[(896), float32] */;
  %38 = dyn.reshape(%35, %36, newshape=[]) /* ty=Tensor[(?), float32] */;
  %39 = cast(%var_3641, dtype="uint16") /* ty=Tensor[(896), uint16] */;
  %40 = shape_of(%34, dtype="int32") /* ty=Tensor[(1), int32] */;
  %41 = cast(%34, dtype="uint16") /* ty=Tensor[(896), uint16] */;
  %42 = dyn.reshape(%39, %40, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %43 = @func_1315() /* ty=Tensor[(2, 10, 8), float64] */;
  %44 = %14.1;
  %45 = %15.0;
  %46 = %18.1;
  %47 = %21.1;
  %48 = @func_1244(%24, %25) /* ty=Tensor[(4, 9, 16), float64] */;
  %49 = %30.0;
  %50 = %31.0;
  %51 = %32.1;
  %52 = power(%37, %38) /* ty=Tensor[(896), float32] */;
  %53 = subtract(%41, %42) /* ty=Tensor[(896), uint16] */;
  (%43, %9, %44, %45, %46, meta[relay.Constant][1] /* ty=Tensor[(1820), float64] */, %47, %48, 1.75476f64 /* ty=float64 */, %var_3585, %49, %var_3590, %50, %51, %52, %53)
}

def @func_3989(%var_3871: Tensor[(3, 12, 3), float32], %var_3940: Tensor[(8, 260), int64], %var_3941: Tensor[(891), float32], %var_3952: Tensor[(3, 12, 3), float32]) -> (Tensor[(4, 14, 16), bool], Tensor[(4, 40), float64], Tensor[(2, 10, 8), float64], Tensor[(99, 9), float32], Tensor[(8, 260), int64], Tensor[(891), float32], Tensor[(3, 12, 3), uint16], Tensor[(?, 35), uint16], Tensor[(704, 1), float64], Tensor[(3, 12, 3), float64]) {
  %54 = cast(meta[relay.Constant][3] /* ty=Tensor[(4, 40), float64] */, dtype="float64") /* ty=Tensor[(4, 40), float64] */;
  %55 = reshape(%54, newshape=[2, 10, 8]) /* ty=Tensor[(2, 10, 8), float64] */;
  %56 = @func_2957(%55) /* ty=(Tensor[(2, 10, 8), bool], Tensor[(4, 14, 16), bool], Tensor[(2, 10, 8), float64], Tensor[(896, 1), float64]) */;
  %57 = @func_2205() /* ty=(Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64]) */;
  %58 = cast(%var_3940, dtype="int64") /* ty=Tensor[(8, 260), int64] */;
  %59 = cast(%var_3940, dtype="int64") /* ty=Tensor[(8, 260), int64] */;
  %60 = cast(meta[relay.Constant][3] /* ty=Tensor[(4, 40), float64] */, dtype="bool") /* ty=Tensor[(4, 40), bool] */;
  %61 = cast(%var_3941, dtype="float32") /* ty=Tensor[(891), float32] */;
  %62 = cast(%var_3940, dtype="int64") /* ty=Tensor[(8, 260), int64] */;
  %63 = reshape(%58, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), int64] */;
  %64 = reshape(%59, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), int64] */;
  %65 = reshape(%60, newshape=[160]) /* ty=Tensor[(160), bool] */;
  %66 = reshape(%61, newshape=[99, 9]) /* ty=Tensor[(99, 9), float32] */;
  %67 = reshape(%62, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), int64] */;
  %68 = @func_272(%63, %64, %65, %66, %67) /* ty=(Tensor[(10, 13, 16), int64], Tensor[(2, 10, 8), bool], Tensor[(9, 11, 9), float32], Tensor[(99, 9), float32], Tensor[(160), float32], Tensor[(10, 13, 16), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64]) */;
  %69 = cast(%var_3871, dtype="float32") /* ty=Tensor[(3, 12, 3), float32] */;
  %70 = rsqrt(%69) /* ty=Tensor[(3, 12, 3), float32] */;
  %71 = cast(%var_3871, dtype="int8") /* ty=Tensor[(3, 12, 3), int8] */;
  %72 = shape_of(%70, dtype="int32") /* ty=Tensor[(3), int32] */;
  %73 = cast(%70, dtype="int8") /* ty=Tensor[(3, 12, 3), int8] */;
  %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %75 = left_shift(%73, %74) /* ty=Tensor[(3, 12, 3), int8] */;
  %76 = cast(%var_3871, dtype="uint16") /* ty=Tensor[(3, 12, 3), uint16] */;
  %77 = shape_of(%75, dtype="int32") /* ty=Tensor[(3), int32] */;
  %78 = cast(%75, dtype="uint16") /* ty=Tensor[(3, 12, 3), uint16] */;
  %79 = dyn.reshape(%76, %77, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %80 = cast(meta[relay.Constant][4] /* ty=Tensor[(35), int32] */, dtype="int32") /* ty=Tensor[(35), int32] */;
  %81 = reshape(%80, newshape=[1, 35]) /* ty=Tensor[(1, 35), int32] */;
  %82 = @func_1815(%81) /* ty=(Tensor[(2, 10, 8), float64], Tensor[(15, 7, 5), int32], Tensor[(1, 35), int32]) */;
  %83 = %82.2;
  %84 = cast(meta[relay.Constant][4] /* ty=Tensor[(35), int32] */, dtype="uint16") /* ty=Tensor[(35), uint16] */;
  %85 = shape_of(%83, dtype="int32") /* ty=Tensor[(2), int32] */;
  %86 = cast(%83, dtype="uint16") /* ty=Tensor[(1, 35), uint16] */;
  %87 = dyn.reshape(%84, %85, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %88 = cast(%var_3952, dtype="bool") /* ty=Tensor[(3, 12, 3), bool] */;
  %89 = shape_of(%70, dtype="int32") /* ty=Tensor[(3), int32] */;
  %90 = cast(%70, dtype="bool") /* ty=Tensor[(3, 12, 3), bool] */;
  %91 = dyn.reshape(%88, %89, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %92 = greater_equal(%90, %91) /* ty=Tensor[(3, 12, 3), bool] */;
  %93 = cast(%92, dtype="float64") /* ty=Tensor[(3, 12, 3), float64] */;
  %94 = %56.1;
  %95 = %57.1;
  %96 = %68.3;
  %97 = right_shift(%78, %79) /* ty=Tensor[(3, 12, 3), uint16] */;
  %98 = bitwise_or(%86, %87) /* ty=Tensor[(?, 35), uint16] */;
  %99 = @func_3721() /* ty=Tensor[(704, 1), float64] */;
  %100 = sinh(%93) /* ty=Tensor[(3, 12, 3), float64] */;
  (%94, meta[relay.Constant][3] /* ty=Tensor[(4, 40), float64] */, %95, %96, %var_3940, %var_3941, %97, %98, %99, %100)
}

def @func_1598(%var_1595: Tensor[(2, 10, 4), float32], %var_1596: Tensor[(36, 16), float64], %var_1597: Tensor[(36, 16), float64]) -> (Tensor[(2, 10, 4), float32], Tensor[(99, 9), bool], Tensor[(891), float32], Tensor[(2, 10, 8), float64], float64, Tensor[(36, 16), uint16], Tensor[(99, 9), float32]) {
  %123 = fn (%var_1557: Tensor[(2, 10, 4), float32], %var_1578: Tensor[(36, 16), float64], %var_1583: Tensor[(36, 16), float64]) -> (Tensor[(2, 10, 4), float32], Tensor[(99, 9), bool], Tensor[(891), float32], Tensor[(2, 10, 8), float64], float64, Tensor[(36, 16), uint16], Tensor[(99, 9), float32]) {
    %101 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 10, 4), float32] */, dtype="float32") /* ty=Tensor[(1, 10, 4), float32] */;
    %102 = cast(%var_1557, dtype="float32") /* ty=Tensor[(2, 10, 4), float32] */;
    %103 = cast(meta[relay.Constant][6] /* ty=Tensor[(891), float32] */, dtype="float32") /* ty=Tensor[(891), float32] */;
    %104 = reshape(%103, newshape=[99, 9]) /* ty=Tensor[(99, 9), float32] */;
    %105 = @func_1026(%104) /* ty=(Tensor[(99, 9), bool], Tensor[(2, 10, 8), float64], Tensor[(160), bool]) */;
    %106 = cast(-3.23526f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %107 = cast(%var_1578, dtype="float64") /* ty=Tensor[(36, 16), float64] */;
    %108 = reshape(%106, newshape=[]) /* ty=float64 */;
    %109 = reshape(%107, newshape=[576]) /* ty=Tensor[(576), float64] */;
    %110 = @func_1511(%108, %109) /* ty=(Tensor[(576), uint16], Tensor[(2, 10, 8), float64]) */;
    %111 = cast(%var_1583, dtype="uint16") /* ty=Tensor[(36, 16), uint16] */;
    %112 = shape_of(%var_1578, dtype="int32") /* ty=Tensor[(2), int32] */;
    %113 = cast(%var_1578, dtype="uint16") /* ty=Tensor[(36, 16), uint16] */;
    %114 = dyn.reshape(%111, %112, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    %115 = @func_860() /* ty=(Tensor[(16, 9, 2), bool], Tensor[(99, 9), float32], Tensor[(704, 1), float64], Tensor[(2, 10, 8), float64], Tensor[(160), bool], Tensor[(2, 10, 8), float64], Tensor[(8, 260), int64], Tensor[(2080), float32]) */;
    %116 = %115.1;
    %117 = cast(%116, dtype="float32") /* ty=Tensor[(99, 9), float32] */;
    %118 = floor_mod(%101, %102) /* ty=Tensor[(2, 10, 4), float32] */;
    %119 = %105.0;
    %120 = %110.1;
    %121 = add(%113, %114) /* ty=Tensor[(36, 16), uint16] */;
    %122 = sqrt(%117) /* ty=Tensor[(99, 9), float32] */;
    (%118, %119, meta[relay.Constant][6] /* ty=Tensor[(891), float32] */, %120, -3.23526f64 /* ty=float64 */, %121, %122)
  };
  %123(%var_1595, %var_1596, %var_1597) /* ty=(Tensor[(2, 10, 4), float32], Tensor[(99, 9), bool], Tensor[(891), float32], Tensor[(2, 10, 8), float64], float64, Tensor[(36, 16), uint16], Tensor[(99, 9), float32]) */
}

def @func_3089(%var_3087: Tensor[(14, 5, 13), float64], %var_3088: Tensor[(112, 8), bool]) -> (Tensor[(4, 14, 16), bool], Tensor[(112, 8), bool], Tensor[(14, 5, 13), float32], Tensor[(14, 5, 13), float32], Tensor[(2, 10, 8), float64]) {
  @func_3085(%var_3087, %var_3088) /* ty=(Tensor[(4, 14, 16), bool], Tensor[(112, 8), bool], Tensor[(14, 5, 13), float32], Tensor[(14, 5, 13), float32], Tensor[(2, 10, 8), float64]) */
}

def @func_3222() -> Tensor[(8, 260), int64] {
  %125 = fn () -> Tensor[(8, 260), int64] {
    %124 = @func_2284() /* ty=(Tensor[(8, 260), int64],) */;
    %124.0
  };
  %125() /* ty=Tensor[(8, 260), int64] */
}

def @func_4145() -> (Tensor[(1728), float64],) {
  %128 = fn () -> (Tensor[(1728), float64],) {
    %126 = @func_1693() /* ty=(Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(9, 16, 12), float64], Tensor[(1728), float64], Tensor[(1, 7, 9), float32], Tensor[(63), float32]) */;
    %127 = %126.3;
    (%127,)
  };
  %128() /* ty=(Tensor[(1728), float64],) */
}

def @func_1244(%var_1234: float64, %var_1235: Tensor[(4, 9, 16), float64]) -> Tensor[(4, 9, 16), float64] {
  %129 = cast(%var_1234, dtype="float64") /* ty=float64 */;
  %130 = cast(%var_1235, dtype="float64") /* ty=Tensor[(4, 9, 16), float64] */;
  power(%129, %130) /* ty=Tensor[(4, 9, 16), float64] */
}

def @func_566(%var_564: Tensor[(8, 8, 11), float64]) -> (Tensor[(10, 13, 16), int64], Tensor[(8, 260), int64], Tensor[(160), bool], Tensor[(99, 9), float32], Tensor[(1, 7, 9), float32], Tensor[(21, 3), float32], Tensor[(9, 11, 9), float32], Tensor[(8, 8, 11), float32], Tensor[(9, 11, 9), float32]) {
  @func_563(%var_564) /* ty=(Tensor[(10, 13, 16), int64], Tensor[(8, 260), int64], Tensor[(160), bool], Tensor[(99, 9), float32], Tensor[(1, 7, 9), float32], Tensor[(21, 3), float32], Tensor[(9, 11, 9), float32], Tensor[(8, 8, 11), float32], Tensor[(9, 11, 9), float32]) */
}

def @func_1734(%var_1733: Tensor[(1728), float64]) -> (Tensor[(2, 10, 8), float64], Tensor[(9, 16, 12), float64], Tensor[(1728), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64]) {
  %143 = fn (%var_1706: Tensor[(1728), float64]) -> (Tensor[(2, 10, 8), float64], Tensor[(9, 16, 12), float64], Tensor[(1728), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64]) {
    %131 = @func_1083() /* ty=(Tensor[(2, 10, 8), float64],) */;
    %132 = cast(%var_1706, dtype="float64") /* ty=Tensor[(1728), float64] */;
    %133 = cast(%var_1706, dtype="float64") /* ty=Tensor[(1728), float64] */;
    %134 = reshape(%132, newshape=[9, 16, 12]) /* ty=Tensor[(9, 16, 12), float64] */;
    %135 = reshape(%133, newshape=[9, 16, 12]) /* ty=Tensor[(9, 16, 12), float64] */;
    %136 = @func_581(%134, %135) /* ty=(Tensor[(9, 16, 12), float64],) */;
    %137 = @func_1289() /* ty=(Tensor[(2, 10, 8), float64],) */;
    %138 = @func_860() /* ty=(Tensor[(16, 9, 2), bool], Tensor[(99, 9), float32], Tensor[(704, 1), float64], Tensor[(2, 10, 8), float64], Tensor[(160), bool], Tensor[(2, 10, 8), float64], Tensor[(8, 260), int64], Tensor[(2080), float32]) */;
    %139 = %131.0;
    %140 = %136.0;
    %141 = %137.0;
    %142 = %138.5;
    (%139, %140, %var_1706, %141, %142)
  };
  %143(%var_1733) /* ty=(Tensor[(2, 10, 8), float64], Tensor[(9, 16, 12), float64], Tensor[(1728), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64]) */
}

def @func_1466(%var_1465: Tensor[(16, 8, 7), int32]) -> (Tensor[(13, 2, 4), bool], Tensor[(4, 14, 16), bool], Tensor[(16, 8, 7), bool], Tensor[(16, 8, 7), int32], Tensor[(2, 10, 8), float64]) {
  %166 = fn (%var_1401: Tensor[(16, 8, 7), int32]) -> (Tensor[(13, 2, 4), bool], Tensor[(4, 14, 16), bool], Tensor[(16, 8, 7), bool], Tensor[(16, 8, 7), int32], Tensor[(2, 10, 8), float64]) {
    %144 = @func_1156() /* ty=(Tensor[(2, 10, 8), float64], Tensor[(13, 2, 4), bool], Tensor[(104), uint16]) */;
    %145 = cast(%var_1401, dtype="bool") /* ty=Tensor[(16, 8, 7), bool] */;
    %146 = cast(6 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %147 = cast(%var_1401, dtype="int32") /* ty=Tensor[(16, 8, 7), int32] */;
    %148 = bitwise_and(%146, %147) /* ty=Tensor[(16, 8, 7), int32] */;
    %149 = cast(%148, dtype="bool") /* ty=Tensor[(16, 8, 7), bool] */;
    %150 = reshape(%145, newshape=[4, 14, 16]) /* ty=Tensor[(4, 14, 16), bool] */;
    %151 = reshape(%149, newshape=[4, 14, 16]) /* ty=Tensor[(4, 14, 16), bool] */;
    %152 = @func_1343(%150, %151) /* ty=(Tensor[(4, 14, 16), bool],) */;
    %153 = cast(%var_1401, dtype="bool") /* ty=Tensor[(16, 8, 7), bool] */;
    %154 = shape_of(%148, dtype="int32") /* ty=Tensor[(3), int32] */;
    %155 = cast(%148, dtype="bool") /* ty=Tensor[(16, 8, 7), bool] */;
    %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %157 = cast(meta[relay.Constant][7] /* ty=Tensor[(16, 8, 7), int32] */, dtype="int32") /* ty=Tensor[(16, 8, 7), int32] */;
    %158 = shape_of(%var_1401, dtype="int32") /* ty=Tensor[(3), int32] */;
    %159 = cast(%var_1401, dtype="int32") /* ty=Tensor[(16, 8, 7), int32] */;
    %160 = dyn.reshape(%157, %158, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %161 = %144.1;
    %162 = %152.0;
    %163 = equal(%155, %156) /* ty=Tensor[(16, 8, 7), bool] */;
    %164 = minimum(%159, %160) /* ty=Tensor[(16, 8, 7), int32] */;
    %165 = @func_1315() /* ty=Tensor[(2, 10, 8), float64] */;
    (%161, %162, %163, %164, %165)
  };
  %166(%var_1465) /* ty=(Tensor[(13, 2, 4), bool], Tensor[(4, 14, 16), bool], Tensor[(16, 8, 7), bool], Tensor[(16, 8, 7), int32], Tensor[(2, 10, 8), float64]) */
}

def @func_3669() -> (Tensor[(2, 10, 8), float64],) {
  %167 = @func_1083() /* ty=(Tensor[(2, 10, 8), float64],) */;
  %168 = %167.0;
  (%168,)
}

def @func_3716() -> (Tensor[(2, 10, 8), float64],) {
  %169 = @func_1289() /* ty=(Tensor[(2, 10, 8), float64],) */;
  %170 = %169.0;
  (%170,)
}

def @func_3510() -> (Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64]) {
  %183 = fn () -> (Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64]) {
    %171 = @func_3318() /* ty=(Tensor[(2, 10, 8), float64],) */;
    %172 = %171.0;
    %173 = @func_1315() /* ty=Tensor[(2, 10, 8), float64] */;
    %174 = cast(%173, dtype="float64") /* ty=Tensor[(2, 10, 8), float64] */;
    %175 = shape_of(%172, dtype="int32") /* ty=Tensor[(3), int32] */;
    %176 = cast(%172, dtype="float64") /* ty=Tensor[(2, 10, 8), float64] */;
    %177 = dyn.reshape(%174, %175, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %178 = @func_1289() /* ty=(Tensor[(2, 10, 8), float64],) */;
    %179 = cast(%172, dtype="float64") /* ty=Tensor[(2, 10, 8), float64] */;
    %180 = floor_divide(%176, %177) /* ty=Tensor[(2, 10, 8), float64] */;
    %181 = %178.0;
    %182 = asinh(%179) /* ty=Tensor[(2, 10, 8), float64] */;
    (%180, %181, %182)
  };
  %183() /* ty=(Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64]) */
}

def @func_1084() -> (Tensor[(2, 10, 8), float64],) {
  %186 = fn () -> (Tensor[(2, 10, 8), float64],) {
    %184 = @func_860() /* ty=(Tensor[(16, 9, 2), bool], Tensor[(99, 9), float32], Tensor[(704, 1), float64], Tensor[(2, 10, 8), float64], Tensor[(160), bool], Tensor[(2, 10, 8), float64], Tensor[(8, 260), int64], Tensor[(2080), float32]) */;
    %185 = %184.3;
    (%185,)
  };
  %186() /* ty=(Tensor[(2, 10, 8), float64],) */
}

def @func_2775(%var_2773: float64, %var_2774: Tensor[(9, 11, 9), float32]) -> (Tensor[(704, 1), float64], Tensor[(891), float32], Tensor[(4, 9, 16), float64], float64, Tensor[(576), float64], Tensor[(9, 11, 9), bool]) {
  %203 = fn (%var_2730: float64, %var_2739: Tensor[(9, 11, 9), float32]) -> (Tensor[(704, 1), float64], Tensor[(891), float32], Tensor[(4, 9, 16), float64], float64, Tensor[(576), float64], Tensor[(9, 11, 9), bool]) {
    %187 = @func_1801() /* ty=(Tensor[(704, 1), float64],) */;
    %188 = cast(%var_2730, dtype="float64") /* ty=float64 */;
    %189 = cast(meta[relay.Constant][9] /* ty=Tensor[(576), float64] */, dtype="float64") /* ty=Tensor[(576), float64] */;
    %190 = reshape(%188, newshape=[]) /* ty=float64 */;
    %191 = reshape(%189, newshape=[4, 9, 16]) /* ty=Tensor[(4, 9, 16), float64] */;
    %192 = cast(meta[relay.Constant][8] /* ty=Tensor[(891), float32] */, dtype="float32") /* ty=Tensor[(891), float32] */;
    %193 = reshape(%192, newshape=[9, 11, 9]) /* ty=Tensor[(9, 11, 9), float32] */;
    %194 = @func_127(%193) /* ty=(Tensor[(9, 11, 9), float32],) */;
    %195 = %194.0;
    %196 = cast(%var_2739, dtype="bool") /* ty=Tensor[(9, 11, 9), bool] */;
    %197 = shape_of(%195, dtype="int32") /* ty=Tensor[(3), int32] */;
    %198 = cast(%195, dtype="bool") /* ty=Tensor[(9, 11, 9), bool] */;
    %199 = dyn.reshape(%196, %197, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %200 = %187.0;
    %201 = @func_1244(%190, %191) /* ty=Tensor[(4, 9, 16), float64] */;
    %202 = logical_and(%198, %199) /* ty=Tensor[(9, 11, 9), bool] */;
    (%200, meta[relay.Constant][8] /* ty=Tensor[(891), float32] */, %201, %var_2730, meta[relay.Constant][9] /* ty=Tensor[(576), float64] */, %202)
  };
  %203(%var_2773, %var_2774) /* ty=(Tensor[(704, 1), float64], Tensor[(891), float32], Tensor[(4, 9, 16), float64], float64, Tensor[(576), float64], Tensor[(9, 11, 9), bool]) */
}

def @func_127(%var_118: Tensor[(9, 11, 9), float32]) -> (Tensor[(9, 11, 9), float32],) {
  %204 = cast(%var_118, dtype="float32") /* ty=Tensor[(9, 11, 9), float32] */;
  %205 = atan(%204) /* ty=Tensor[(9, 11, 9), float32] */;
  %206 = cast(%205, dtype="bool") /* ty=Tensor[(9, 11, 9), bool] */;
  %207 = shape_of(%var_118, dtype="int32") /* ty=Tensor[(3), int32] */;
  %208 = cast(%var_118, dtype="bool") /* ty=Tensor[(9, 11, 9), bool] */;
  %209 = dyn.reshape(%206, %207, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %210 = logical_or(%208, %209) /* ty=Tensor[(9, 11, 9), bool] */;
  %211 = cast(%210, dtype="float32") /* ty=Tensor[(9, 11, 9), float32] */;
  %212 = acosh(%211) /* ty=Tensor[(9, 11, 9), float32] */;
  (%212,)
}

def @func_4080(%var_4079: float64) -> (Tensor[(9, 2, 4), float64], Tensor[(2, 10, 8), float32], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], float64, float64, Tensor[(576), float64]) {
  %231 = fn (%var_4057: float64) -> (Tensor[(9, 2, 4), float64], Tensor[(2, 10, 8), float32], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], float64, float64, Tensor[(576), float64]) {
    %213 = @func_2617() /* ty=(Tensor[(9, 2, 4), float64], Tensor[(9, 2, 4), float64]) */;
    %214 = @func_2518() /* ty=(Tensor[(2, 10, 8), float64],) */;
    %215 = %214.0;
    %216 = cast(%215, dtype="float32") /* ty=Tensor[(2, 10, 8), float32] */;
    %217 = cast(%215, dtype="float64") /* ty=Tensor[(2, 10, 8), float64] */;
    %218 = erf(%217) /* ty=Tensor[(2, 10, 8), float64] */;
    %219 = cast(%218, dtype="float64") /* ty=Tensor[(2, 10, 8), float64] */;
    %220 = @func_2205() /* ty=(Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64]) */;
    %221 = cast(%var_4057, dtype="float64") /* ty=float64 */;
    %222 = cast(meta[relay.Constant][10] /* ty=Tensor[(576), float64] */, dtype="float64") /* ty=Tensor[(576), float64] */;
    %223 = reshape(%221, newshape=[]) /* ty=float64 */;
    %224 = reshape(%222, newshape=[576]) /* ty=Tensor[(576), float64] */;
    %225 = @func_3449(%223, %224) /* ty=(float64, Tensor[(576), float64], Tensor[(2, 10, 8), float32]) */;
    %226 = %213.1;
    %227 = log(%216) /* ty=Tensor[(2, 10, 8), float32] */;
    %228 = atan(%219) /* ty=Tensor[(2, 10, 8), float64] */;
    %229 = %220.0;
    %230 = %225.0;
    (%226, %227, %228, %229, %230, %var_4057, meta[relay.Constant][10] /* ty=Tensor[(576), float64] */)
  };
  %231(%var_4079) /* ty=(Tensor[(9, 2, 4), float64], Tensor[(2, 10, 8), float32], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], float64, float64, Tensor[(576), float64]) */
}

def @func_2960(%var_2958: Tensor[(2, 10, 8), float64]) -> (Tensor[(2, 10, 8), bool], Tensor[(4, 14, 16), bool], Tensor[(2, 10, 8), float64], Tensor[(896, 1), float64]) {
  @func_2957(%var_2958) /* ty=(Tensor[(2, 10, 8), bool], Tensor[(4, 14, 16), bool], Tensor[(2, 10, 8), float64], Tensor[(896, 1), float64]) */
}

def @func_3318() -> (Tensor[(2, 10, 8), float64],) {
  %232 = @func_2518() /* ty=(Tensor[(2, 10, 8), float64],) */;
  %233 = %232.0;
  (%233,)
}

def @func_1870() -> (Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(1728), float64]) {
  %234 = @func_1083() /* ty=(Tensor[(2, 10, 8), float64],) */;
  %235 = @func_1693() /* ty=(Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(9, 16, 12), float64], Tensor[(1728), float64], Tensor[(1, 7, 9), float32], Tensor[(63), float32]) */;
  %236 = @func_860() /* ty=(Tensor[(16, 9, 2), bool], Tensor[(99, 9), float32], Tensor[(704, 1), float64], Tensor[(2, 10, 8), float64], Tensor[(160), bool], Tensor[(2, 10, 8), float64], Tensor[(8, 260), int64], Tensor[(2080), float32]) */;
  %237 = @func_1693() /* ty=(Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(9, 16, 12), float64], Tensor[(1728), float64], Tensor[(1, 7, 9), float32], Tensor[(63), float32]) */;
  %238 = %234.0;
  %239 = %235.1;
  %240 = %236.5;
  %241 = %237.3;
  (%238, %239, %240, %241)
}

def @func_719(%var_717: Tensor[(13, 2, 4), uint16], %var_718: Tensor[(13, 2, 4), uint16]) -> Tensor[(13, 2, 4), bool] {
  %246 = fn (%var_705: Tensor[(13, 2, 4), uint16], %var_706: Tensor[(13, 2, 4), uint16]) -> Tensor[(13, 2, 4), bool] {
    %242 = cast(%var_706, dtype="bool") /* ty=Tensor[(13, 2, 4), bool] */;
    %243 = shape_of(%var_705, dtype="int32") /* ty=Tensor[(3), int32] */;
    %244 = cast(%var_705, dtype="bool") /* ty=Tensor[(13, 2, 4), bool] */;
    %245 = dyn.reshape(%242, %243, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less(%244, %245) /* ty=Tensor[(13, 2, 4), bool] */
  };
  %246(%var_717, %var_718) /* ty=Tensor[(13, 2, 4), bool] */
}

def @func_585(%var_583: Tensor[(9, 16, 12), float64], %var_584: Tensor[(9, 16, 12), float64]) -> (Tensor[(9, 16, 12), float64],) {
  @func_581(%var_583, %var_584) /* ty=(Tensor[(9, 16, 12), float64],) */
}

def @func_3183(%var_3181: Tensor[(12, 6, 16), float32], %var_3182: Tensor[(12, 6, 16), float32]) -> (Tensor[(12, 6, 16), float32],) {
  %252 = fn (%var_3168: Tensor[(12, 6, 16), float32], %var_3169: Tensor[(12, 6, 16), float32]) -> (Tensor[(12, 6, 16), float32],) {
    %247 = cast(%var_3169, dtype="float32") /* ty=Tensor[(12, 6, 16), float32] */;
    %248 = shape_of(%var_3168, dtype="int32") /* ty=Tensor[(3), int32] */;
    %249 = cast(%var_3168, dtype="float32") /* ty=Tensor[(12, 6, 16), float32] */;
    %250 = dyn.reshape(%247, %248, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %251 = floor_divide(%249, %250) /* ty=Tensor[(12, 6, 16), float32] */;
    (%251,)
  };
  %252(%var_3181, %var_3182) /* ty=(Tensor[(12, 6, 16), float32],) */
}

def @func_4125(%var_4124: float64) -> (Tensor[(14, 5, 6), float64], Tensor[(2, 10, 8), float64], Tensor[(35), int32], Tensor[(704, 1), float64]) {
  %261 = fn (%var_4095: float64) -> (Tensor[(14, 5, 6), float64], Tensor[(2, 10, 8), float64], Tensor[(35), int32], Tensor[(704, 1), float64]) {
    %253 = cast(%var_4095, dtype="float64") /* ty=float64 */;
    %254 = cast(meta[relay.Constant][11] /* ty=Tensor[(14, 5, 6), float64] */, dtype="float64") /* ty=Tensor[(14, 5, 6), float64] */;
    %255 = cast(meta[relay.Constant][12] /* ty=Tensor[(35), int32] */, dtype="int32") /* ty=Tensor[(35), int32] */;
    %256 = reshape(%255, newshape=[1, 35]) /* ty=Tensor[(1, 35), int32] */;
    %257 = @func_1815(%256) /* ty=(Tensor[(2, 10, 8), float64], Tensor[(15, 7, 5), int32], Tensor[(1, 35), int32]) */;
    %258 = floor_mod(%253, %254) /* ty=Tensor[(14, 5, 6), float64] */;
    %259 = %257.0;
    %260 = @func_3721() /* ty=Tensor[(704, 1), float64] */;
    (%258, %259, meta[relay.Constant][12] /* ty=Tensor[(35), int32] */, %260)
  };
  %261(%var_4124) /* ty=(Tensor[(14, 5, 6), float64], Tensor[(2, 10, 8), float64], Tensor[(35), int32], Tensor[(704, 1), float64]) */
}

def @func_4365(%var_4358: Tensor[(21, 3), float32]) -> (Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(21, 3), uint16]) {
  %262 = @func_2205() /* ty=(Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64]) */;
  %263 = cast(%var_4358, dtype="float32") /* ty=Tensor[(21, 3), float32] */;
  %264 = reshape(%263, newshape=[1, 7, 9]) /* ty=Tensor[(1, 7, 9), float32] */;
  %265 = @func_382(%264) /* ty=Tensor[(1, 7, 9), float32] */;
  %266 = cast(%265, dtype="uint16") /* ty=Tensor[(1, 7, 9), uint16] */;
  %267 = shape_of(%var_4358, dtype="int32") /* ty=Tensor[(2), int32] */;
  %268 = cast(%var_4358, dtype="uint16") /* ty=Tensor[(21, 3), uint16] */;
  %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %270 = @func_4196() /* ty=Tensor[(2, 10, 8), float64] */;
  %271 = %262.1;
  %272 = bitwise_or(%268, %269) /* ty=Tensor[(21, 3), uint16] */;
  (%270, %271, %272)
}

def @func_87(%var_85: Tensor[(2, 10, 8), bool], %var_86: Tensor[(2, 10, 8), bool]) -> (Tensor[(2, 10, 8), bool], Tensor[(2, 10, 8), float64]) {
  %285 = fn (%var_64: Tensor[(2, 10, 8), bool], %var_65: Tensor[(2, 10, 8), bool]) -> (Tensor[(2, 10, 8), bool], Tensor[(2, 10, 8), float64]) {
    %273 = cast(%var_65, dtype="bool") /* ty=Tensor[(2, 10, 8), bool] */;
    %274 = shape_of(%var_64, dtype="int32") /* ty=Tensor[(3), int32] */;
    %275 = cast(%var_64, dtype="bool") /* ty=Tensor[(2, 10, 8), bool] */;
    %276 = dyn.reshape(%273, %274, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %277 = logical_or(%275, %276) /* ty=Tensor[(2, 10, 8), bool] */;
    %278 = cast(%var_65, dtype="bool") /* ty=Tensor[(2, 10, 8), bool] */;
    %279 = shape_of(%277, dtype="int32") /* ty=Tensor[(3), int32] */;
    %280 = cast(%277, dtype="bool") /* ty=Tensor[(2, 10, 8), bool] */;
    %281 = dyn.reshape(%278, %279, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %282 = cast(%var_64, dtype="float64") /* ty=Tensor[(2, 10, 8), float64] */;
    %283 = less(%280, %281) /* ty=Tensor[(2, 10, 8), bool] */;
    %284 = tan(%282) /* ty=Tensor[(2, 10, 8), float64] */;
    (%283, %284)
  };
  %285(%var_85, %var_86) /* ty=(Tensor[(2, 10, 8), bool], Tensor[(2, 10, 8), float64]) */
}

def @func_2478(%var_2476: Tensor[(2080), int64], %var_2477: Tensor[(891), float32]) -> (Tensor[(2, 10, 8), float64], Tensor[(10, 13, 16), float64], Tensor[(2080), int64], Tensor[(891), float32]) {
  @func_2474(%var_2476, %var_2477) /* ty=(Tensor[(2, 10, 8), float64], Tensor[(10, 13, 16), float64], Tensor[(2080), int64], Tensor[(891), float32]) */
}

def @func_4191(%var_4189: float32, %var_4190: Tensor[(2, 1, 14), float32]) -> (Tensor[(8, 260), int64], Tensor[(2, 1, 14), float64], Tensor[(2, 1, 14), float32]) {
  %294 = fn (%var_4167: float32, %var_4168: Tensor[(2, 1, 14), float32]) -> (Tensor[(8, 260), int64], Tensor[(2, 1, 14), float64], Tensor[(2, 1, 14), float32]) {
    %286 = cast(%var_4167, dtype="bool") /* ty=bool */;
    %287 = cast(%var_4168, dtype="bool") /* ty=Tensor[(2, 1, 14), bool] */;
    %288 = not_equal(%286, %287) /* ty=Tensor[(2, 1, 14), bool] */;
    %289 = cast(%288, dtype="float64") /* ty=Tensor[(2, 1, 14), float64] */;
    %290 = cast(%288, dtype="float32") /* ty=Tensor[(2, 1, 14), float32] */;
    %291 = @func_3221() /* ty=Tensor[(8, 260), int64] */;
    %292 = sqrt(%289) /* ty=Tensor[(2, 1, 14), float64] */;
    %293 = log2(%290) /* ty=Tensor[(2, 1, 14), float32] */;
    (%291, %292, %293)
  };
  %294(%var_4189, %var_4190) /* ty=(Tensor[(8, 260), int64], Tensor[(2, 1, 14), float64], Tensor[(2, 1, 14), float32]) */
}

def @func_3651(%var_3648: Tensor[(576), float64], %var_3649: Tensor[(1152), float32], %var_3650: Tensor[(896), float64]) -> (Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(1820), float64], Tensor[(4, 14, 16), bool], Tensor[(4, 9, 16), float64], float64, Tensor[(576), float64], Tensor[(12, 6, 16), float32], Tensor[(1152), float32], Tensor[(8, 260), int64], Tensor[(2, 10, 8), float64], Tensor[(896), float32], Tensor[(896), uint16]) {
  @func_3646(%var_3648, %var_3649, %var_3650) /* ty=(Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(1820), float64], Tensor[(4, 14, 16), bool], Tensor[(4, 9, 16), float64], float64, Tensor[(576), float64], Tensor[(12, 6, 16), float32], Tensor[(1152), float32], Tensor[(8, 260), int64], Tensor[(2, 10, 8), float64], Tensor[(896), float32], Tensor[(896), uint16]) */
}

def @func_4368(%var_4366: Tensor[(21, 3), float32]) -> (Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(21, 3), uint16]) {
  @func_4365(%var_4366) /* ty=(Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(21, 3), uint16]) */
}

def @func_3718() -> (Tensor[(2, 10, 8), float64],) {
  @func_3716() /* ty=(Tensor[(2, 10, 8), float64],) */
}

def @func_4395() -> Tensor[(2080), float32] {
  %296 = fn () -> Tensor[(2080), float32] {
    %295 = @func_860() /* ty=(Tensor[(16, 9, 2), bool], Tensor[(99, 9), float32], Tensor[(704, 1), float64], Tensor[(2, 10, 8), float64], Tensor[(160), bool], Tensor[(2, 10, 8), float64], Tensor[(8, 260), int64], Tensor[(2080), float32]) */;
    %295.7
  };
  %296() /* ty=Tensor[(2080), float32] */
}

def @func_1693() -> (Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(9, 16, 12), float64], Tensor[(1728), float64], Tensor[(1, 7, 9), float32], Tensor[(63), float32]) {
  %297 = cast(meta[relay.Constant][13] /* ty=Tensor[(1728), float64] */, dtype="float64") /* ty=Tensor[(1728), float64] */;
  %298 = cast(meta[relay.Constant][13] /* ty=Tensor[(1728), float64] */, dtype="float64") /* ty=Tensor[(1728), float64] */;
  %299 = reshape(%297, newshape=[9, 16, 12]) /* ty=Tensor[(9, 16, 12), float64] */;
  %300 = reshape(%298, newshape=[9, 16, 12]) /* ty=Tensor[(9, 16, 12), float64] */;
  %301 = @func_581(%299, %300) /* ty=(Tensor[(9, 16, 12), float64],) */;
  %302 = cast(meta[relay.Constant][14] /* ty=Tensor[(63), float32] */, dtype="float32") /* ty=Tensor[(63), float32] */;
  %303 = reshape(%302, newshape=[1, 7, 9]) /* ty=Tensor[(1, 7, 9), float32] */;
  %304 = @func_1315() /* ty=Tensor[(2, 10, 8), float64] */;
  %305 = @func_1315() /* ty=Tensor[(2, 10, 8), float64] */;
  %306 = %301.0;
  %307 = @func_382(%303) /* ty=Tensor[(1, 7, 9), float32] */;
  (%304, %305, %306, meta[relay.Constant][13] /* ty=Tensor[(1728), float64] */, %307, meta[relay.Constant][14] /* ty=Tensor[(63), float32] */)
}

def @func_4454() -> (Tensor[(182, 10), bool], Tensor[(2, 10, 8), float64]) {
  @func_4452() /* ty=(Tensor[(182, 10), bool], Tensor[(2, 10, 8), float64]) */
}

def @func_3085(%var_3031: Tensor[(14, 5, 13), float64], %var_3041: Tensor[(112, 8), bool]) -> (Tensor[(4, 14, 16), bool], Tensor[(112, 8), bool], Tensor[(14, 5, 13), float32], Tensor[(14, 5, 13), float32], Tensor[(2, 10, 8), float64]) {
  %308 = cast(%var_3041, dtype="bool") /* ty=Tensor[(112, 8), bool] */;
  %309 = cast(%var_3041, dtype="bool") /* ty=Tensor[(112, 8), bool] */;
  %310 = reshape(%308, newshape=[4, 14, 16]) /* ty=Tensor[(4, 14, 16), bool] */;
  %311 = reshape(%309, newshape=[4, 14, 16]) /* ty=Tensor[(4, 14, 16), bool] */;
  %312 = @func_1343(%310, %311) /* ty=(Tensor[(4, 14, 16), bool],) */;
  %313 = cast(%var_3031, dtype="float64") /* ty=Tensor[(14, 5, 13), float64] */;
  %314 = sin(%313) /* ty=Tensor[(14, 5, 13), float64] */;
  %315 = cast(%314, dtype="float64") /* ty=Tensor[(14, 5, 13), float64] */;
  %316 = sinh(%315) /* ty=Tensor[(14, 5, 13), float64] */;
  %317 = cast(%316, dtype="float32") /* ty=Tensor[(14, 5, 13), float32] */;
  %318 = cast(%314, dtype="float32") /* ty=Tensor[(14, 5, 13), float32] */;
  %319 = shape_of(%316, dtype="int32") /* ty=Tensor[(3), int32] */;
  %320 = cast(%316, dtype="float32") /* ty=Tensor[(14, 5, 13), float32] */;
  %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %322 = %312.0;
  %323 = asinh(%317) /* ty=Tensor[(14, 5, 13), float32] */;
  %324 = mod(%320, %321) /* ty=Tensor[(14, 5, 13), float32] */;
  %325 = @func_2650() /* ty=Tensor[(2, 10, 8), float64] */;
  (%322, %var_3041, %323, %324, %325)
}

def @func_2408(%var_2390: Tensor[(104, 20), int64], %var_2391: Tensor[(891), float32]) -> (Tensor[(2, 10, 8), float64], Tensor[(13, 2, 4), bool], Tensor[(1, 7, 9), float32], Tensor[(21, 3), float32], Tensor[(10, 13, 16), float64], Tensor[(891), float32], Tensor[(104, 20), float64], Tensor[(2, 10, 8), float64]) {
  %326 = @func_1870() /* ty=(Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(1728), float64]) */;
  %327 = @func_2141() /* ty=(Tensor[(13, 2, 4), bool],) */;
  %328 = cast(meta[relay.Constant][15] /* ty=Tensor[(21, 3), float32] */, dtype="float32") /* ty=Tensor[(21, 3), float32] */;
  %329 = reshape(%328, newshape=[1, 7, 9]) /* ty=Tensor[(1, 7, 9), float32] */;
  %330 = cast(%var_2390, dtype="int64") /* ty=Tensor[(104, 20), int64] */;
  %331 = cast(%var_2390, dtype="int64") /* ty=Tensor[(104, 20), int64] */;
  %332 = %326.1;
  %333 = cast(%332, dtype="bool") /* ty=Tensor[(2, 10, 8), bool] */;
  %334 = cast(%var_2391, dtype="float32") /* ty=Tensor[(891), float32] */;
  %335 = cast(%var_2390, dtype="int64") /* ty=Tensor[(104, 20), int64] */;
  %336 = reshape(%330, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), int64] */;
  %337 = reshape(%331, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), int64] */;
  %338 = reshape(%333, newshape=[160]) /* ty=Tensor[(160), bool] */;
  %339 = reshape(%334, newshape=[99, 9]) /* ty=Tensor[(99, 9), float32] */;
  %340 = reshape(%335, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), int64] */;
  %341 = @func_272(%336, %337, %338, %339, %340) /* ty=(Tensor[(10, 13, 16), int64], Tensor[(2, 10, 8), bool], Tensor[(9, 11, 9), float32], Tensor[(99, 9), float32], Tensor[(160), float32], Tensor[(10, 13, 16), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64]) */;
  %342 = cast(%var_2390, dtype="float64") /* ty=Tensor[(104, 20), float64] */;
  %343 = @func_1628() /* ty=(Tensor[(2, 10, 8), float64],) */;
  %344 = %327.0;
  %345 = @func_382(%329) /* ty=Tensor[(1, 7, 9), float32] */;
  %346 = %341.5;
  %347 = atanh(%342) /* ty=Tensor[(104, 20), float64] */;
  %348 = %343.0;
  (%332, %344, %345, meta[relay.Constant][15] /* ty=Tensor[(21, 3), float32] */, %346, %var_2391, %347, %348)
}

def @func_1802() -> (Tensor[(704, 1), float64],) {
  %351 = fn () -> (Tensor[(704, 1), float64],) {
    %349 = @func_860() /* ty=(Tensor[(16, 9, 2), bool], Tensor[(99, 9), float32], Tensor[(704, 1), float64], Tensor[(2, 10, 8), float64], Tensor[(160), bool], Tensor[(2, 10, 8), float64], Tensor[(8, 260), int64], Tensor[(2080), float32]) */;
    %350 = %349.2;
    (%350,)
  };
  %351() /* ty=(Tensor[(704, 1), float64],) */
}

def @func_3452(%var_3450: float64, %var_3451: Tensor[(576), float64]) -> (float64, Tensor[(576), float64], Tensor[(2, 10, 8), float32]) {
  %365 = fn (%var_3416: float64, %var_3417: Tensor[(576), float64]) -> (float64, Tensor[(576), float64], Tensor[(2, 10, 8), float32]) {
    %352 = cast(%var_3416, dtype="float64") /* ty=float64 */;
    %353 = cast(%var_3417, dtype="float64") /* ty=Tensor[(576), float64] */;
    %354 = reshape(%352, newshape=[]) /* ty=float64 */;
    %355 = reshape(%353, newshape=[576]) /* ty=Tensor[(576), float64] */;
    %356 = @func_1511(%354, %355) /* ty=(Tensor[(576), uint16], Tensor[(2, 10, 8), float64]) */;
    %357 = %356.1;
    %358 = @func_1628() /* ty=(Tensor[(2, 10, 8), float64],) */;
    %359 = %358.0;
    %360 = cast(%359, dtype="float32") /* ty=Tensor[(2, 10, 8), float32] */;
    %361 = shape_of(%357, dtype="int32") /* ty=Tensor[(3), int32] */;
    %362 = cast(%357, dtype="float32") /* ty=Tensor[(2, 10, 8), float32] */;
    %363 = dyn.reshape(%360, %361, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %364 = add(%362, %363) /* ty=Tensor[(2, 10, 8), float32] */;
    (%var_3416, %var_3417, %364)
  };
  %365(%var_3450, %var_3451) /* ty=(float64, Tensor[(576), float64], Tensor[(2, 10, 8), float32]) */
}

def @func_4452() -> (Tensor[(182, 10), bool], Tensor[(2, 10, 8), float64]) {
  %366 = @func_3282() /* ty=(Tensor[(13, 2, 4), bool], Tensor[(8, 260), int16], Tensor[(2, 10, 8), float64], Tensor[(182, 10), bool]) */;
  %367 = @func_3716() /* ty=(Tensor[(2, 10, 8), float64],) */;
  %368 = %366.3;
  %369 = %367.0;
  (%368, %369)
}

def @func_4219(%var_4217: float64, %var_4218: Tensor[(576), float64]) -> (Tensor[(4, 9, 16), float64], Tensor[(576), float64], Tensor[(13, 2, 4), uint8]) {
  %380 = fn (%var_4205: float64, %var_4206: Tensor[(576), float64]) -> (Tensor[(4, 9, 16), float64], Tensor[(576), float64], Tensor[(13, 2, 4), uint8]) {
    %370 = cast(%var_4205, dtype="float64") /* ty=float64 */;
    %371 = cast(%var_4206, dtype="float64") /* ty=Tensor[(576), float64] */;
    %372 = reshape(%370, newshape=[]) /* ty=float64 */;
    %373 = reshape(%371, newshape=[4, 9, 16]) /* ty=Tensor[(4, 9, 16), float64] */;
    %374 = @func_3282() /* ty=(Tensor[(13, 2, 4), bool], Tensor[(8, 260), int16], Tensor[(2, 10, 8), float64], Tensor[(182, 10), bool]) */;
    %375 = %374.0;
    %376 = cast(%var_4205, dtype="uint8") /* ty=uint8 */;
    %377 = cast(%375, dtype="uint8") /* ty=Tensor[(13, 2, 4), uint8] */;
    %378 = @func_1244(%372, %373) /* ty=Tensor[(4, 9, 16), float64] */;
    %379 = multiply(%376, %377) /* ty=Tensor[(13, 2, 4), uint8] */;
    (%378, %var_4206, %379)
  };
  %380(%var_4217, %var_4218) /* ty=(Tensor[(4, 9, 16), float64], Tensor[(576), float64], Tensor[(13, 2, 4), uint8]) */
}

def @func_2868(%var_2864: Tensor[(10, 8, 16), int8], %var_2865: Tensor[(35), int32], %var_2866: Tensor[(672), float64], %var_2867: Tensor[(10, 8, 16), bool]) -> (Tensor[(10, 8, 16), float32], Tensor[(15, 7, 5), int32], Tensor[(35), int32], Tensor[(10, 8, 16), int32], Tensor[(9, 2, 4), float64], Tensor[(224), uint8], Tensor[(672), float64], Tensor[(10, 8, 16), bool], Tensor[(2, 10, 8), bool], Tensor[(160), bool]) {
  @func_2862(%var_2864, %var_2865, %var_2866, %var_2867) /* ty=(Tensor[(10, 8, 16), float32], Tensor[(15, 7, 5), int32], Tensor[(35), int32], Tensor[(10, 8, 16), int32], Tensor[(9, 2, 4), float64], Tensor[(224), uint8], Tensor[(672), float64], Tensor[(10, 8, 16), bool], Tensor[(2, 10, 8), bool], Tensor[(160), bool]) */
}

def @func_2502(%var_2501: Tensor[(14, 13, 10), float64]) -> (Tensor[(14, 13, 10), float64], Tensor[(2, 10, 8), float64]) {
  %385 = fn (%var_2487: Tensor[(14, 13, 10), float64]) -> (Tensor[(14, 13, 10), float64], Tensor[(2, 10, 8), float64]) {
    %381 = cast(%var_2487, dtype="float64") /* ty=Tensor[(14, 13, 10), float64] */;
    %382 = @func_1083() /* ty=(Tensor[(2, 10, 8), float64],) */;
    %383 = rsqrt(%381) /* ty=Tensor[(14, 13, 10), float64] */;
    %384 = %382.0;
    (%383, %384)
  };
  %385(%var_2501) /* ty=(Tensor[(14, 13, 10), float64], Tensor[(2, 10, 8), float64]) */
}

def @func_3995(%var_3991: Tensor[(3, 12, 3), float32], %var_3992: Tensor[(8, 260), int64], %var_3993: Tensor[(891), float32], %var_3994: Tensor[(3, 12, 3), float32]) -> (Tensor[(4, 14, 16), bool], Tensor[(4, 40), float64], Tensor[(2, 10, 8), float64], Tensor[(99, 9), float32], Tensor[(8, 260), int64], Tensor[(891), float32], Tensor[(3, 12, 3), uint16], Tensor[(?, 35), uint16], Tensor[(704, 1), float64], Tensor[(3, 12, 3), float64]) {
  @func_3989(%var_3991, %var_3992, %var_3993, %var_3994) /* ty=(Tensor[(4, 14, 16), bool], Tensor[(4, 40), float64], Tensor[(2, 10, 8), float64], Tensor[(99, 9), float32], Tensor[(8, 260), int64], Tensor[(891), float32], Tensor[(3, 12, 3), uint16], Tensor[(?, 35), uint16], Tensor[(704, 1), float64], Tensor[(3, 12, 3), float64]) */
}

def @func_3152() -> (Tensor[(2, 10, 8), int32],) {
  @func_3150() /* ty=(Tensor[(2, 10, 8), int32],) */
}

def @func_862() -> (Tensor[(16, 9, 2), bool], Tensor[(99, 9), float32], Tensor[(704, 1), float64], Tensor[(2, 10, 8), float64], Tensor[(160), bool], Tensor[(2, 10, 8), float64], Tensor[(8, 260), int64], Tensor[(2080), float32]) {
  @func_860() /* ty=(Tensor[(16, 9, 2), bool], Tensor[(99, 9), float32], Tensor[(704, 1), float64], Tensor[(2, 10, 8), float64], Tensor[(160), bool], Tensor[(2, 10, 8), float64], Tensor[(8, 260), int64], Tensor[(2080), float32]) */
}

def @func_3746(%var_3744: float64, %var_3745: Tensor[(576), float64]) -> (Tensor[(2, 10, 8), float64], float64, float64, Tensor[(576), float64]) {
  @func_3742(%var_3744, %var_3745) /* ty=(Tensor[(2, 10, 8), float64], float64, float64, Tensor[(576), float64]) */
}

def @func_2412(%var_2410: Tensor[(104, 20), int64], %var_2411: Tensor[(891), float32]) -> (Tensor[(2, 10, 8), float64], Tensor[(13, 2, 4), bool], Tensor[(1, 7, 9), float32], Tensor[(21, 3), float32], Tensor[(10, 13, 16), float64], Tensor[(891), float32], Tensor[(104, 20), float64], Tensor[(2, 10, 8), float64]) {
  @func_2408(%var_2410, %var_2411) /* ty=(Tensor[(2, 10, 8), float64], Tensor[(13, 2, 4), bool], Tensor[(1, 7, 9), float32], Tensor[(21, 3), float32], Tensor[(10, 13, 16), float64], Tensor[(891), float32], Tensor[(104, 20), float64], Tensor[(2, 10, 8), float64]) */
}

def @func_3792(%var_3790: Tensor[(6, 3, 11), int64], %var_3791: Tensor[(1728), float64]) -> (Tensor[(6, 3, 11), int64], Tensor[(6, 3, 11), float64], Tensor[(9, 16, 12), float64], Tensor[(1728), float64]) {
  %399 = fn (%var_3765: Tensor[(6, 3, 11), int64], %var_3783: Tensor[(1728), float64]) -> (Tensor[(6, 3, 11), int64], Tensor[(6, 3, 11), float64], Tensor[(9, 16, 12), float64], Tensor[(1728), float64]) {
    %386 = cast(%var_3765, dtype="int64") /* ty=Tensor[(6, 3, 11), int64] */;
    %387 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(6, 3, 11), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %388 = cast(meta[relay.Constant][16] /* ty=Tensor[(6, 3, 11), int64] */, dtype="int64") /* ty=Tensor[(6, 3, 11), int64] */;
    %389 = dyn.reshape(%386, %387, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %390 = cast(%var_3765, dtype="float64") /* ty=Tensor[(6, 3, 11), float64] */;
    %391 = cast(%var_3783, dtype="float64") /* ty=Tensor[(1728), float64] */;
    %392 = cast(%var_3783, dtype="float64") /* ty=Tensor[(1728), float64] */;
    %393 = reshape(%391, newshape=[9, 16, 12]) /* ty=Tensor[(9, 16, 12), float64] */;
    %394 = reshape(%392, newshape=[9, 16, 12]) /* ty=Tensor[(9, 16, 12), float64] */;
    %395 = @func_581(%393, %394) /* ty=(Tensor[(9, 16, 12), float64],) */;
    %396 = bitwise_xor(%388, %389) /* ty=Tensor[(6, 3, 11), int64] */;
    %397 = acos(%390) /* ty=Tensor[(6, 3, 11), float64] */;
    %398 = %395.0;
    (%396, %397, %398, %var_3783)
  };
  %399(%var_3790, %var_3791) /* ty=(Tensor[(6, 3, 11), int64], Tensor[(6, 3, 11), float64], Tensor[(9, 16, 12), float64], Tensor[(1728), float64]) */
}

def @func_3283() -> (Tensor[(13, 2, 4), bool], Tensor[(8, 260), int16], Tensor[(2, 10, 8), float64], Tensor[(182, 10), bool]) {
  %418 = fn () -> (Tensor[(13, 2, 4), bool], Tensor[(8, 260), int16], Tensor[(2, 10, 8), float64], Tensor[(182, 10), bool]) {
    %400 = @func_2141() /* ty=(Tensor[(13, 2, 4), bool],) */;
    %401 = @func_2284() /* ty=(Tensor[(8, 260), int64],) */;
    %402 = %401.0;
    %403 = cast(meta[relay.Constant][17] /* ty=Tensor[(8, 260), int64] */, dtype="int16") /* ty=Tensor[(8, 260), int16] */;
    %404 = shape_of(%402, dtype="int32") /* ty=Tensor[(2), int32] */;
    %405 = cast(%402, dtype="int16") /* ty=Tensor[(8, 260), int16] */;
    %406 = dyn.reshape(%403, %404, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %407 = cast(meta[relay.Constant][18] /* ty=Tensor[(182, 10), float64] */, dtype="float64") /* ty=Tensor[(182, 10), float64] */;
    %408 = reshape(%407, newshape=[14, 13, 10]) /* ty=Tensor[(14, 13, 10), float64] */;
    %409 = @func_2500(%408) /* ty=(Tensor[(14, 13, 10), float64], Tensor[(2, 10, 8), float64]) */;
    %410 = cast(meta[relay.Constant][19] /* ty=Tensor[(182, 10), float64] */, dtype="bool") /* ty=Tensor[(182, 10), bool] */;
    %411 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(182, 10), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %412 = cast(meta[relay.Constant][18] /* ty=Tensor[(182, 10), float64] */, dtype="bool") /* ty=Tensor[(182, 10), bool] */;
    %413 = dyn.reshape(%410, %411, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %414 = %400.0;
    %415 = logical_xor(%405, %406) /* ty=Tensor[(8, 260), int16] */;
    %416 = %409.1;
    %417 = greater_equal(%412, %413) /* ty=Tensor[(182, 10), bool] */;
    (%414, %415, %416, %417)
  };
  %418() /* ty=(Tensor[(13, 2, 4), bool], Tensor[(8, 260), int16], Tensor[(2, 10, 8), float64], Tensor[(182, 10), bool]) */
}

def @func_4547(%var_4529: Tensor[(13, 2, 4), bool]) -> (Tensor[(13, 2, 4), bool], Tensor[(8, 88), bool], Tensor[(224), uint8]) {
  %419 = @func_2141() /* ty=(Tensor[(13, 2, 4), bool],) */;
  %420 = %419.0;
  %421 = cast(%var_4529, dtype="bool") /* ty=Tensor[(13, 2, 4), bool] */;
  %422 = shape_of(%420, dtype="int32") /* ty=Tensor[(3), int32] */;
  %423 = cast(%420, dtype="bool") /* ty=Tensor[(13, 2, 4), bool] */;
  %424 = dyn.reshape(%421, %422, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %425 = cast(meta[relay.Constant][20] /* ty=Tensor[(224), uint8] */, dtype="uint8") /* ty=Tensor[(224), uint8] */;
  %426 = cast(meta[relay.Constant][20] /* ty=Tensor[(224), uint8] */, dtype="uint8") /* ty=Tensor[(224), uint8] */;
  %427 = reshape(%425, newshape=[2, 7, 16]) /* ty=Tensor[(2, 7, 16), uint8] */;
  %428 = reshape(%426, newshape=[2, 7, 16]) /* ty=Tensor[(2, 7, 16), uint8] */;
  %429 = @func_2559(%427, %428) /* ty=(Tensor[(2, 7, 16), bool], Tensor[(2, 10, 8), float64], Tensor[(8, 88), bool]) */;
  %430 = less_equal(%423, %424) /* ty=Tensor[(13, 2, 4), bool] */;
  %431 = %429.2;
  (%430, %431, meta[relay.Constant][20] /* ty=Tensor[(224), uint8] */)
}

def @main(%var_4647: Tensor[(2, 10, 2), int64]) -> Tensor[(2, 10, 2), bool] {
  %432 = cast(%var_4647, dtype="bool") /* ty=Tensor[(2, 10, 2), bool] */;
  %433 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(2, 10, 2), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %434 = cast(meta[relay.Constant][21] /* ty=Tensor[(2, 10, 2), int64] */, dtype="bool") /* ty=Tensor[(2, 10, 2), bool] */;
  %435 = dyn.reshape(%432, %433, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%434, %435) /* ty=Tensor[(2, 10, 2), bool] */
}

def @func_4288(%var_4286: Tensor[(1, 13, 10), float64]) -> Tensor[(1, 13, 10), float64] {
  @func_4285(%var_4286) /* ty=Tensor[(1, 13, 10), float64] */
}

def @func_4285(%var_4281: Tensor[(1, 13, 10), float64]) -> Tensor[(1, 13, 10), float64] {
  %436 = cast(%var_4281, dtype="float64") /* ty=Tensor[(1, 13, 10), float64] */;
  cosh(%436) /* ty=Tensor[(1, 13, 10), float64] */
}

def @func_581(%var_570: Tensor[(9, 16, 12), float64], %var_571: Tensor[(9, 16, 12), float64]) -> (Tensor[(9, 16, 12), float64],) {
  %437 = cast(%var_571, dtype="float64") /* ty=Tensor[(9, 16, 12), float64] */;
  %438 = shape_of(%var_570, dtype="int32") /* ty=Tensor[(3), int32] */;
  %439 = cast(%var_570, dtype="float64") /* ty=Tensor[(9, 16, 12), float64] */;
  %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %441 = maximum(%439, %440) /* ty=Tensor[(9, 16, 12), float64] */;
  (%441,)
}

def @func_1317() -> Tensor[(2, 10, 8), float64] {
  @func_1315() /* ty=Tensor[(2, 10, 8), float64] */
}

def @func_4626(%var_4624: Tensor[(14, 4, 1), float64], %var_4625: Tensor[(2048), float32]) -> (Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(14, 4, ?), uint32], Tensor[(14, 4, 1), float64], Tensor[(8, 16, 16), uint64], Tensor[(2048), float32], Tensor[(14, 4, ?), int32], Tensor[(2, 10, 8), bool]) {
  %484 = fn (%var_4555: Tensor[(14, 4, 1), float64], %var_4604: Tensor[(2048), float32]) -> (Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(14, 4, ?), uint32], Tensor[(14, 4, 1), float64], Tensor[(8, 16, 16), uint64], Tensor[(2048), float32], Tensor[(14, 4, ?), int32], Tensor[(2, 10, 8), bool]) {
    %442 = @func_3509() /* ty=(Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64]) */;
    %443 = cast(meta[relay.Constant][22] /* ty=Tensor[(14, 4, 1), float64] */, dtype="uint32") /* ty=Tensor[(14, 4, 1), uint32] */;
    %444 = shape_of(%var_4555, dtype="int32") /* ty=Tensor[(3), int32] */;
    %445 = cast(%var_4555, dtype="uint32") /* ty=Tensor[(14, 4, 1), uint32] */;
    %446 = dyn.reshape(%443, %444, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %447 = cast(%var_4555, dtype="float64") /* ty=Tensor[(14, 4, 1), float64] */;
    %448 = acosh(%447) /* ty=Tensor[(14, 4, 1), float64] */;
    %449 = cast(%448, dtype="float64") /* ty=Tensor[(14, 4, 1), float64] */;
    %450 = sinh(%449) /* ty=Tensor[(14, 4, 1), float64] */;
    %451 = cast(%450, dtype="float64") /* ty=Tensor[(14, 4, 1), float64] */;
    %452 = cast(%var_4604, dtype="float32") /* ty=Tensor[(2048), float32] */;
    %453 = cast(%var_4604, dtype="float32") /* ty=Tensor[(2048), float32] */;
    %454 = cast(%var_4604, dtype="float32") /* ty=Tensor[(2048), float32] */;
    %455 = %442.0;
    %456 = cast(%455, dtype="bool") /* ty=Tensor[(2, 10, 8), bool] */;
    %457 = reshape(%452, newshape=[8, 16, 16]) /* ty=Tensor[(8, 16, 16), float32] */;
    %458 = reshape(%453, newshape=[8, 16, 16]) /* ty=Tensor[(8, 16, 16), float32] */;
    %459 = reshape(%454, newshape=[8, 16, 16]) /* ty=Tensor[(8, 16, 16), float32] */;
    %460 = reshape(%456, newshape=[4, 40]) /* ty=Tensor[(4, 40), bool] */;
    %461 = @func_936(%457, %458, %459, %460) /* ty=(Tensor[(8, 16, 16), uint64], Tensor[(2, 10, 8), float64], Tensor[(4, 40), bool]) */;
    %462 = cast(%var_4555, dtype="float64") /* ty=Tensor[(14, 4, 1), float64] */;
    %463 = cos(%462) /* ty=Tensor[(14, 4, 1), float64] */;
    %464 = cast(meta[relay.Constant][22] /* ty=Tensor[(14, 4, 1), float64] */, dtype="float32") /* ty=Tensor[(14, 4, 1), float32] */;
    %465 = shape_of(%463, dtype="int32") /* ty=Tensor[(3), int32] */;
    %466 = cast(%463, dtype="float32") /* ty=Tensor[(14, 4, 1), float32] */;
    %467 = dyn.reshape(%464, %465, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %468 = floor_mod(%466, %467) /* ty=Tensor[(14, 4, ?), float32] */;
    %469 = cast(%468, dtype="int32") /* ty=Tensor[(14, 4, ?), int32] */;
    %470 = shape_of(%448, dtype="int32") /* ty=Tensor[(3), int32] */;
    %471 = cast(%448, dtype="int32") /* ty=Tensor[(14, 4, 1), int32] */;
    %472 = dyn.reshape(%469, %470, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %473 = cast(%455, dtype="bool") /* ty=Tensor[(2, 10, 8), bool] */;
    %474 = cast(%455, dtype="bool") /* ty=Tensor[(2, 10, 8), bool] */;
    %475 = reshape(%473, newshape=[2, 10, 8]) /* ty=Tensor[(2, 10, 8), bool] */;
    %476 = reshape(%474, newshape=[2, 10, 8]) /* ty=Tensor[(2, 10, 8), bool] */;
    %477 = @func_84(%475, %476) /* ty=(Tensor[(2, 10, 8), bool], Tensor[(2, 10, 8), float64]) */;
    %478 = @func_2650() /* ty=Tensor[(2, 10, 8), float64] */;
    %479 = minimum(%445, %446) /* ty=Tensor[(14, 4, ?), uint32] */;
    %480 = erf(%451) /* ty=Tensor[(14, 4, 1), float64] */;
    %481 = %461.0;
    %482 = logical_xor(%471, %472) /* ty=Tensor[(14, 4, ?), int32] */;
    %483 = %477.0;
    (%455, %478, %479, %480, %481, %var_4604, %482, %483)
  };
  %484(%var_4624, %var_4625) /* ty=(Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(14, 4, ?), uint32], Tensor[(14, 4, 1), float64], Tensor[(8, 16, 16), uint64], Tensor[(2048), float32], Tensor[(14, 4, ?), int32], Tensor[(2, 10, 8), bool]) */
}

def @func_1290() -> (Tensor[(2, 10, 8), float64],) {
  %487 = fn () -> (Tensor[(2, 10, 8), float64],) {
    %485 = @func_1083() /* ty=(Tensor[(2, 10, 8), float64],) */;
    %486 = %485.0;
    (%486,)
  };
  %487() /* ty=(Tensor[(2, 10, 8), float64],) */
}

def @func_1628() -> (Tensor[(2, 10, 8), float64],) {
  %488 = @func_860() /* ty=(Tensor[(16, 9, 2), bool], Tensor[(99, 9), float32], Tensor[(704, 1), float64], Tensor[(2, 10, 8), float64], Tensor[(160), bool], Tensor[(2, 10, 8), float64], Tensor[(8, 260), int64], Tensor[(2080), float32]) */;
  %489 = %488.5;
  (%489,)
}

def @func_1956(%var_1876: Tensor[(10, 14, 9), int16], %var_1877: Tensor[(10, 14, 9), int16], %var_1918: Tensor[(1, 576), float64]) -> (Tensor[(10, 14, 9), float64], float64, Tensor[(10, 14, 9), int8], Tensor[(?, 576), float32], Tensor[(?, 576), float32]) {
  %490 = cast(%var_1877, dtype="int16") /* ty=Tensor[(10, 14, 9), int16] */;
  %491 = shape_of(%var_1876, dtype="int32") /* ty=Tensor[(3), int32] */;
  %492 = cast(%var_1876, dtype="int16") /* ty=Tensor[(10, 14, 9), int16] */;
  %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %494 = logical_xor(%492, %493) /* ty=Tensor[(10, 14, 9), int16] */;
  %495 = cast(%var_1876, dtype="float64") /* ty=Tensor[(10, 14, 9), float64] */;
  %496 = shape_of(%494, dtype="int32") /* ty=Tensor[(3), int32] */;
  %497 = cast(%494, dtype="float64") /* ty=Tensor[(10, 14, 9), float64] */;
  %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %499 = cast(%var_1876, dtype="int8") /* ty=Tensor[(10, 14, 9), int8] */;
  %500 = shape_of(%494, dtype="int32") /* ty=Tensor[(3), int32] */;
  %501 = cast(%494, dtype="int8") /* ty=Tensor[(10, 14, 9), int8] */;
  %502 = dyn.reshape(%499, %500, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %503 = cast(%var_1918, dtype="float64") /* ty=Tensor[(1, 576), float64] */;
  %504 = tan(%503) /* ty=Tensor[(1, 576), float64] */;
  %505 = cast(%var_1918, dtype="int32") /* ty=Tensor[(1, 576), int32] */;
  %506 = shape_of(%504, dtype="int32") /* ty=Tensor[(2), int32] */;
  %507 = cast(%504, dtype="int32") /* ty=Tensor[(1, 576), int32] */;
  %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %509 = maximum(%507, %508) /* ty=Tensor[(?, 576), int32] */;
  %510 = cast(%509, dtype="float64") /* ty=Tensor[(?, 576), float64] */;
  %511 = acos(%510) /* ty=Tensor[(?, 576), float64] */;
  %512 = cast(-3.06014f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %513 = cast(%var_1918, dtype="float64") /* ty=Tensor[(1, 576), float64] */;
  %514 = reshape(%512, newshape=[]) /* ty=float64 */;
  %515 = reshape(%513, newshape=[576]) /* ty=Tensor[(576), float64] */;
  %516 = @func_1511(%514, %515) /* ty=(Tensor[(576), uint16], Tensor[(2, 10, 8), float64]) */;
  %517 = %516.0;
  %518 = cast(%517, dtype="float32") /* ty=Tensor[(576), float32] */;
  %519 = shape_of(%511, dtype="int32") /* ty=Tensor[(2), int32] */;
  %520 = cast(%511, dtype="float32") /* ty=Tensor[(?, 576), float32] */;
  %521 = dyn.reshape(%518, %519, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %522 = cast(%504, dtype="float32") /* ty=Tensor[(1, 576), float32] */;
  %523 = shape_of(%511, dtype="int32") /* ty=Tensor[(2), int32] */;
  %524 = cast(%511, dtype="float32") /* ty=Tensor[(?, 576), float32] */;
  %525 = dyn.reshape(%522, %523, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %526 = floor_mod(%497, %498) /* ty=Tensor[(10, 14, 9), float64] */;
  %527 = bitwise_xor(%501, %502) /* ty=Tensor[(10, 14, 9), int8] */;
  %528 = floor_mod(%520, %521) /* ty=Tensor[(?, 576), float32] */;
  %529 = divide(%524, %525) /* ty=Tensor[(?, 576), float32] */;
  (%526, -3.06014f64 /* ty=float64 */, %527, %528, %529)
}

def @func_1229(%var_1222: Tensor[(1, 7, 5), int32]) -> Tensor[(15, 7, 5), int32] {
  %530 = cast(%var_1222, dtype="int32") /* ty=Tensor[(1, 7, 5), int32] */;
  %531 = cast(meta[relay.Constant][23] /* ty=Tensor[(15, 7, 5), int32] */, dtype="int32") /* ty=Tensor[(15, 7, 5), int32] */;
  bitwise_and(%530, %531) /* ty=Tensor[(15, 7, 5), int32] */
}

def @func_1248(%var_1246: float64, %var_1247: Tensor[(4, 9, 16), float64]) -> Tensor[(4, 9, 16), float64] {
  @func_1244(%var_1246, %var_1247) /* ty=Tensor[(4, 9, 16), float64] */
}

def @func_4463() -> Tensor[(12, 48), float64] {
  %533 = fn () -> Tensor[(12, 48), float64] {
    %532 = @func_2015() /* ty=(Tensor[(2, 10, 8), float64], float64, Tensor[(1260), int16], Tensor[(12, 48), float64], Tensor[(2, 10, 8), float64], Tensor[(24, 72), float64]) */;
    %532.3
  };
  %533() /* ty=Tensor[(12, 48), float64] */
}

def @func_3002(%var_2994: Tensor[(2, 10, 8), float64]) -> (Tensor[(2, 10, 8), int32],) {
  %534 = @func_2205() /* ty=(Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64]) */;
  %535 = %534.0;
  %536 = cast(%var_2994, dtype="int32") /* ty=Tensor[(2, 10, 8), int32] */;
  %537 = shape_of(%535, dtype="int32") /* ty=Tensor[(3), int32] */;
  %538 = cast(%535, dtype="int32") /* ty=Tensor[(2, 10, 8), int32] */;
  %539 = dyn.reshape(%536, %537, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %540 = multiply(%538, %539) /* ty=Tensor[(2, 10, 8), int32] */;
  (%540,)
}

def @func_3671() -> (Tensor[(2, 10, 8), float64],) {
  @func_3669() /* ty=(Tensor[(2, 10, 8), float64],) */
}

def @func_278(%var_273: Tensor[(10, 13, 16), int64], %var_274: Tensor[(10, 13, 16), int64], %var_275: Tensor[(160), bool], %var_276: Tensor[(99, 9), float32], %var_277: Tensor[(10, 13, 16), int64]) -> (Tensor[(10, 13, 16), int64], Tensor[(2, 10, 8), bool], Tensor[(9, 11, 9), float32], Tensor[(99, 9), float32], Tensor[(160), float32], Tensor[(10, 13, 16), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64]) {
  %581 = fn (%var_185: Tensor[(10, 13, 16), int64], %var_186: Tensor[(10, 13, 16), int64], %var_191: Tensor[(160), bool], %var_200: Tensor[(99, 9), float32], %var_215: Tensor[(10, 13, 16), int64]) -> (Tensor[(10, 13, 16), int64], Tensor[(2, 10, 8), bool], Tensor[(9, 11, 9), float32], Tensor[(99, 9), float32], Tensor[(160), float32], Tensor[(10, 13, 16), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64]) {
    %541 = cast(%var_186, dtype="int64") /* ty=Tensor[(10, 13, 16), int64] */;
    %542 = shape_of(%var_185, dtype="int32") /* ty=Tensor[(3), int32] */;
    %543 = cast(%var_185, dtype="int64") /* ty=Tensor[(10, 13, 16), int64] */;
    %544 = dyn.reshape(%541, %542, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %545 = cast(%var_191, dtype="bool") /* ty=Tensor[(160), bool] */;
    %546 = cast(%var_191, dtype="bool") /* ty=Tensor[(160), bool] */;
    %547 = reshape(%545, newshape=[2, 10, 8]) /* ty=Tensor[(2, 10, 8), bool] */;
    %548 = reshape(%546, newshape=[2, 10, 8]) /* ty=Tensor[(2, 10, 8), bool] */;
    %549 = @func_84(%547, %548) /* ty=(Tensor[(2, 10, 8), bool], Tensor[(2, 10, 8), float64]) */;
    %550 = cast(%var_200, dtype="float32") /* ty=Tensor[(99, 9), float32] */;
    %551 = reshape(%550, newshape=[9, 11, 9]) /* ty=Tensor[(9, 11, 9), float32] */;
    %552 = @func_127(%551) /* ty=(Tensor[(9, 11, 9), float32],) */;
    %553 = cast(%var_191, dtype="float32") /* ty=Tensor[(160), float32] */;
    %554 = cast(%var_215, dtype="float64") /* ty=Tensor[(10, 13, 16), float64] */;
    %555 = shape_of(%var_186, dtype="int32") /* ty=Tensor[(3), int32] */;
    %556 = cast(%var_186, dtype="float64") /* ty=Tensor[(10, 13, 16), float64] */;
    %557 = dyn.reshape(%554, %555, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %558 = cast(%var_191, dtype="bool") /* ty=Tensor[(160), bool] */;
    %559 = acos(%553) /* ty=Tensor[(160), float32] */;
    %560 = cast(%559, dtype="bool") /* ty=Tensor[(160), bool] */;
    %561 = reshape(%558, newshape=[2, 10, 8]) /* ty=Tensor[(2, 10, 8), bool] */;
    %562 = reshape(%560, newshape=[2, 10, 8]) /* ty=Tensor[(2, 10, 8), bool] */;
    %563 = @func_84(%561, %562) /* ty=(Tensor[(2, 10, 8), bool], Tensor[(2, 10, 8), float64]) */;
    %564 = %563.1;
    %565 = cast(%564, dtype="bool") /* ty=Tensor[(2, 10, 8), bool] */;
    %566 = cast(%564, dtype="bool") /* ty=Tensor[(2, 10, 8), bool] */;
    %567 = reshape(%565, newshape=[2, 10, 8]) /* ty=Tensor[(2, 10, 8), bool] */;
    %568 = reshape(%566, newshape=[2, 10, 8]) /* ty=Tensor[(2, 10, 8), bool] */;
    %569 = @func_84(%567, %568) /* ty=(Tensor[(2, 10, 8), bool], Tensor[(2, 10, 8), float64]) */;
    %570 = cast(%564, dtype="bool") /* ty=Tensor[(2, 10, 8), bool] */;
    %571 = cast(%559, dtype="bool") /* ty=Tensor[(160), bool] */;
    %572 = reshape(%570, newshape=[2, 10, 8]) /* ty=Tensor[(2, 10, 8), bool] */;
    %573 = reshape(%571, newshape=[2, 10, 8]) /* ty=Tensor[(2, 10, 8), bool] */;
    %574 = @func_84(%572, %573) /* ty=(Tensor[(2, 10, 8), bool], Tensor[(2, 10, 8), float64]) */;
    %575 = left_shift(%543, %544) /* ty=Tensor[(10, 13, 16), int64] */;
    %576 = %549.0;
    %577 = %552.0;
    %578 = subtract(%556, %557) /* ty=Tensor[(10, 13, 16), float64] */;
    %579 = %569.1;
    %580 = %574.1;
    (%575, %576, %577, %var_200, %559, %578, %564, %579, %580)
  };
  %581(%var_273, %var_274, %var_275, %var_276, %var_277) /* ty=(Tensor[(10, 13, 16), int64], Tensor[(2, 10, 8), bool], Tensor[(9, 11, 9), float32], Tensor[(99, 9), float32], Tensor[(160), float32], Tensor[(10, 13, 16), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64]) */
}

def @func_1961(%var_1958: Tensor[(10, 14, 9), int16], %var_1959: Tensor[(10, 14, 9), int16], %var_1960: Tensor[(1, 576), float64]) -> (Tensor[(10, 14, 9), float64], float64, Tensor[(10, 14, 9), int8], Tensor[(?, 576), float32], Tensor[(?, 576), float32]) {
  @func_1956(%var_1958, %var_1959, %var_1960) /* ty=(Tensor[(10, 14, 9), float64], float64, Tensor[(10, 14, 9), int8], Tensor[(?, 576), float32], Tensor[(?, 576), float32]) */
}

def @func_2650() -> Tensor[(2, 10, 8), float64] {
  %582 = @func_1628() /* ty=(Tensor[(2, 10, 8), float64],) */;
  %582.0
}

def @func_4518() -> (Tensor[(2080), float32],) {
  %583 = @func_4394() /* ty=Tensor[(2080), float32] */;
  (%583,)
}

def @func_4520() -> (Tensor[(2080), float32],) {
  @func_4518() /* ty=(Tensor[(2080), float32],) */
}

def @func_860() -> (Tensor[(16, 9, 2), bool], Tensor[(99, 9), float32], Tensor[(704, 1), float64], Tensor[(2, 10, 8), float64], Tensor[(160), bool], Tensor[(2, 10, 8), float64], Tensor[(8, 260), int64], Tensor[(2080), float32]) {
  %584 = cast(meta[relay.Constant][24] /* ty=Tensor[(16, 1, 2), int16] */, dtype="bool") /* ty=Tensor[(16, 1, 2), bool] */;
  %585 = cast(meta[relay.Constant][25] /* ty=Tensor[(16, 9, 2), int16] */, dtype="bool") /* ty=Tensor[(16, 9, 2), bool] */;
  %586 = cast(meta[relay.Constant][26] /* ty=Tensor[(704, 1), float64] */, dtype="float64") /* ty=Tensor[(704, 1), float64] */;
  %587 = reshape(%586, newshape=[8, 8, 11]) /* ty=Tensor[(8, 8, 11), float64] */;
  %588 = @func_563(%587) /* ty=(Tensor[(10, 13, 16), int64], Tensor[(8, 260), int64], Tensor[(160), bool], Tensor[(99, 9), float32], Tensor[(1, 7, 9), float32], Tensor[(21, 3), float32], Tensor[(9, 11, 9), float32], Tensor[(8, 8, 11), float32], Tensor[(9, 11, 9), float32]) */;
  %589 = cast(meta[relay.Constant][27] /* ty=Tensor[(2080), int64] */, dtype="int64") /* ty=Tensor[(2080), int64] */;
  %590 = cast(meta[relay.Constant][27] /* ty=Tensor[(2080), int64] */, dtype="int64") /* ty=Tensor[(2080), int64] */;
  %591 = cast(meta[relay.Constant][28] /* ty=Tensor[(160), bool] */, dtype="bool") /* ty=Tensor[(160), bool] */;
  %592 = %588.3;
  %593 = cast(%592, dtype="float32") /* ty=Tensor[(99, 9), float32] */;
  %594 = cast(meta[relay.Constant][27] /* ty=Tensor[(2080), int64] */, dtype="int64") /* ty=Tensor[(2080), int64] */;
  %595 = reshape(%589, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), int64] */;
  %596 = reshape(%590, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), int64] */;
  %597 = reshape(%591, newshape=[160]) /* ty=Tensor[(160), bool] */;
  %598 = reshape(%593, newshape=[99, 9]) /* ty=Tensor[(99, 9), float32] */;
  %599 = reshape(%594, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), int64] */;
  %600 = @func_272(%595, %596, %597, %598, %599) /* ty=(Tensor[(10, 13, 16), int64], Tensor[(2, 10, 8), bool], Tensor[(9, 11, 9), float32], Tensor[(99, 9), float32], Tensor[(160), float32], Tensor[(10, 13, 16), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64]) */;
  %601 = cast(meta[relay.Constant][27] /* ty=Tensor[(2080), int64] */, dtype="float32") /* ty=Tensor[(2080), float32] */;
  %602 = sinh(%601) /* ty=Tensor[(2080), float32] */;
  %603 = cast(%602, dtype="int64") /* ty=Tensor[(2080), int64] */;
  %604 = cast(meta[relay.Constant][27] /* ty=Tensor[(2080), int64] */, dtype="int64") /* ty=Tensor[(2080), int64] */;
  %605 = cast(meta[relay.Constant][28] /* ty=Tensor[(160), bool] */, dtype="bool") /* ty=Tensor[(160), bool] */;
  %606 = cast(%592, dtype="float32") /* ty=Tensor[(99, 9), float32] */;
  %607 = cast(meta[relay.Constant][27] /* ty=Tensor[(2080), int64] */, dtype="int64") /* ty=Tensor[(2080), int64] */;
  %608 = reshape(%603, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), int64] */;
  %609 = reshape(%604, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), int64] */;
  %610 = reshape(%605, newshape=[160]) /* ty=Tensor[(160), bool] */;
  %611 = reshape(%606, newshape=[99, 9]) /* ty=Tensor[(99, 9), float32] */;
  %612 = reshape(%607, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), int64] */;
  %613 = @func_272(%608, %609, %610, %611, %612) /* ty=(Tensor[(10, 13, 16), int64], Tensor[(2, 10, 8), bool], Tensor[(9, 11, 9), float32], Tensor[(99, 9), float32], Tensor[(160), float32], Tensor[(10, 13, 16), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64]) */;
  %614 = cast(meta[relay.Constant][26] /* ty=Tensor[(704, 1), float64] */, dtype="float64") /* ty=Tensor[(704, 1), float64] */;
  %615 = reshape(%614, newshape=[8, 8, 11]) /* ty=Tensor[(8, 8, 11), float64] */;
  %616 = @func_563(%615) /* ty=(Tensor[(10, 13, 16), int64], Tensor[(8, 260), int64], Tensor[(160), bool], Tensor[(99, 9), float32], Tensor[(1, 7, 9), float32], Tensor[(21, 3), float32], Tensor[(9, 11, 9), float32], Tensor[(8, 8, 11), float32], Tensor[(9, 11, 9), float32]) */;
  %617 = cast(%602, dtype="float32") /* ty=Tensor[(2080), float32] */;
  %618 = not_equal(%584, %585) /* ty=Tensor[(16, 9, 2), bool] */;
  %619 = %600.7;
  %620 = %613.8;
  %621 = %616.1;
  %622 = sin(%617) /* ty=Tensor[(2080), float32] */;
  (%618, %592, meta[relay.Constant][26] /* ty=Tensor[(704, 1), float64] */, %619, meta[relay.Constant][28] /* ty=Tensor[(160), bool] */, %620, %621, %622)
}

def @func_2862(%var_2787: Tensor[(10, 8, 16), int8], %var_2809: Tensor[(35), int32], %var_2848: Tensor[(672), float64], %var_2855: Tensor[(10, 8, 16), bool]) -> (Tensor[(10, 8, 16), float32], Tensor[(15, 7, 5), int32], Tensor[(35), int32], Tensor[(10, 8, 16), int32], Tensor[(9, 2, 4), float64], Tensor[(224), uint8], Tensor[(672), float64], Tensor[(10, 8, 16), bool], Tensor[(2, 10, 8), bool], Tensor[(160), bool]) {
  %623 = cast(%var_2787, dtype="int8") /* ty=Tensor[(10, 8, 16), int8] */;
  %624 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(10, 8, 16), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %625 = cast(meta[relay.Constant][29] /* ty=Tensor[(10, 8, 16), int8] */, dtype="int8") /* ty=Tensor[(10, 8, 16), int8] */;
  %626 = dyn.reshape(%623, %624, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %627 = maximum(%625, %626) /* ty=Tensor[(10, 8, 16), int8] */;
  %628 = cast(%627, dtype="float32") /* ty=Tensor[(10, 8, 16), float32] */;
  %629 = cast(%var_2809, dtype="int32") /* ty=Tensor[(35), int32] */;
  %630 = reshape(%629, newshape=[1, 7, 5]) /* ty=Tensor[(1, 7, 5), int32] */;
  %631 = cast(%var_2787, dtype="int32") /* ty=Tensor[(10, 8, 16), int32] */;
  %632 = shape_of(%627, dtype="int32") /* ty=Tensor[(3), int32] */;
  %633 = cast(%627, dtype="int32") /* ty=Tensor[(10, 8, 16), int32] */;
  %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %635 = @func_2617() /* ty=(Tensor[(9, 2, 4), float64], Tensor[(9, 2, 4), float64]) */;
  %636 = cast(%var_2848, dtype="float64") /* ty=Tensor[(672), float64] */;
  %637 = reshape(%636, newshape=[16, 7, 6]) /* ty=Tensor[(16, 7, 6), float64] */;
  %638 = @func_2714(%637) /* ty=(Tensor[(2, 7, 16), bool], Tensor[(224), uint8], Tensor[(16, 7, 6), int8]) */;
  %639 = cast(%627, dtype="bool") /* ty=Tensor[(10, 8, 16), bool] */;
  %640 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(10, 8, 16), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %641 = cast(meta[relay.Constant][29] /* ty=Tensor[(10, 8, 16), int8] */, dtype="bool") /* ty=Tensor[(10, 8, 16), bool] */;
  %642 = dyn.reshape(%639, %640, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %643 = not_equal(%641, %642) /* ty=Tensor[(10, 8, 16), bool] */;
  %644 = cast(%var_2855, dtype="bool") /* ty=Tensor[(10, 8, 16), bool] */;
  %645 = shape_of(%643, dtype="int32") /* ty=Tensor[(3), int32] */;
  %646 = cast(%643, dtype="bool") /* ty=Tensor[(10, 8, 16), bool] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %648 = cast(meta[relay.Constant][30] /* ty=Tensor[(160), bool] */, dtype="bool") /* ty=Tensor[(160), bool] */;
  %649 = cast(meta[relay.Constant][30] /* ty=Tensor[(160), bool] */, dtype="bool") /* ty=Tensor[(160), bool] */;
  %650 = reshape(%648, newshape=[2, 10, 8]) /* ty=Tensor[(2, 10, 8), bool] */;
  %651 = reshape(%649, newshape=[2, 10, 8]) /* ty=Tensor[(2, 10, 8), bool] */;
  %652 = @func_84(%650, %651) /* ty=(Tensor[(2, 10, 8), bool], Tensor[(2, 10, 8), float64]) */;
  %653 = exp(%628) /* ty=Tensor[(10, 8, 16), float32] */;
  %654 = @func_1229(%630) /* ty=Tensor[(15, 7, 5), int32] */;
  %655 = multiply(%633, %634) /* ty=Tensor[(10, 8, 16), int32] */;
  %656 = %635.1;
  %657 = %638.1;
  %658 = less_equal(%646, %647) /* ty=Tensor[(10, 8, 16), bool] */;
  %659 = %652.0;
  (%653, %654, %var_2809, %655, %656, %657, %var_2848, %658, %659, meta[relay.Constant][30] /* ty=Tensor[(160), bool] */)
}

def @func_4424() -> Tensor[(2, 10, 8), float64] {
  @func_3106() /* ty=Tensor[(2, 10, 8), float64] */
}

def @func_2903() -> (Tensor[(9, 2, 4), int8],) {
  %672 = fn () -> (Tensor[(9, 2, 4), int8],) {
    %660 = @func_2617() /* ty=(Tensor[(9, 2, 4), float64], Tensor[(9, 2, 4), float64]) */;
    %661 = %660.1;
    %662 = cast(meta[relay.Constant][31] /* ty=Tensor[(9, 2, 4), float64] */, dtype="uint16") /* ty=Tensor[(9, 2, 4), uint16] */;
    %663 = shape_of(%661, dtype="int32") /* ty=Tensor[(3), int32] */;
    %664 = cast(%661, dtype="uint16") /* ty=Tensor[(9, 2, 4), uint16] */;
    %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %666 = logical_xor(%664, %665) /* ty=Tensor[(9, 2, 4), uint16] */;
    %667 = cast(%661, dtype="int8") /* ty=Tensor[(9, 2, 4), int8] */;
    %668 = shape_of(%666, dtype="int32") /* ty=Tensor[(3), int32] */;
    %669 = cast(%666, dtype="int8") /* ty=Tensor[(9, 2, 4), int8] */;
    %670 = dyn.reshape(%667, %668, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %671 = left_shift(%669, %670) /* ty=Tensor[(9, 2, 4), int8] */;
    (%671,)
  };
  %672() /* ty=(Tensor[(9, 2, 4), int8],) */
}

def @func_1818(%var_1816: Tensor[(1, 35), int32]) -> (Tensor[(2, 10, 8), float64], Tensor[(15, 7, 5), int32], Tensor[(1, 35), int32]) {
  @func_1815(%var_1816) /* ty=(Tensor[(2, 10, 8), float64], Tensor[(15, 7, 5), int32], Tensor[(1, 35), int32]) */
}

def @func_2957(%var_2936: Tensor[(2, 10, 8), float64]) -> (Tensor[(2, 10, 8), bool], Tensor[(4, 14, 16), bool], Tensor[(2, 10, 8), float64], Tensor[(896, 1), float64]) {
  %673 = @func_1083() /* ty=(Tensor[(2, 10, 8), float64],) */;
  %674 = %673.0;
  %675 = cast(%var_2936, dtype="bool") /* ty=Tensor[(2, 10, 8), bool] */;
  %676 = shape_of(%674, dtype="int32") /* ty=Tensor[(3), int32] */;
  %677 = cast(%674, dtype="bool") /* ty=Tensor[(2, 10, 8), bool] */;
  %678 = dyn.reshape(%675, %676, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %679 = cast(meta[relay.Constant][32] /* ty=Tensor[(896, 1), bool] */, dtype="bool") /* ty=Tensor[(896, 1), bool] */;
  %680 = cast(meta[relay.Constant][32] /* ty=Tensor[(896, 1), bool] */, dtype="bool") /* ty=Tensor[(896, 1), bool] */;
  %681 = reshape(%679, newshape=[4, 14, 16]) /* ty=Tensor[(4, 14, 16), bool] */;
  %682 = reshape(%680, newshape=[4, 14, 16]) /* ty=Tensor[(4, 14, 16), bool] */;
  %683 = @func_1343(%681, %682) /* ty=(Tensor[(4, 14, 16), bool],) */;
  %684 = @func_1083() /* ty=(Tensor[(2, 10, 8), float64],) */;
  %685 = cast(meta[relay.Constant][32] /* ty=Tensor[(896, 1), bool] */, dtype="float64") /* ty=Tensor[(896, 1), float64] */;
  %686 = less_equal(%677, %678) /* ty=Tensor[(2, 10, 8), bool] */;
  %687 = %683.0;
  %688 = %684.0;
  %689 = log2(%685) /* ty=Tensor[(896, 1), float64] */;
  (%686, %687, %688, %689)
}

def @func_1514(%var_1512: float64, %var_1513: Tensor[(576), float64]) -> (Tensor[(576), uint16], Tensor[(2, 10, 8), float64]) {
  %707 = fn (%var_1482: float64, %var_1483: Tensor[(576), float64]) -> (Tensor[(576), uint16], Tensor[(2, 10, 8), float64]) {
    %690 = cast(%var_1482, dtype="float64") /* ty=float64 */;
    %691 = cast(%var_1483, dtype="float64") /* ty=Tensor[(576), float64] */;
    %692 = reshape(%690, newshape=[]) /* ty=float64 */;
    %693 = reshape(%691, newshape=[4, 9, 16]) /* ty=Tensor[(4, 9, 16), float64] */;
    %694 = @func_1244(%692, %693) /* ty=Tensor[(4, 9, 16), float64] */;
    %695 = cast(%694, dtype="int32") /* ty=Tensor[(4, 9, 16), int32] */;
    %696 = shape_of(%var_1483, dtype="int32") /* ty=Tensor[(1), int32] */;
    %697 = cast(%var_1483, dtype="int32") /* ty=Tensor[(576), int32] */;
    %698 = dyn.reshape(%695, %696, newshape=[]) /* ty=Tensor[(?), int32] */;
    %699 = logical_xor(%697, %698) /* ty=Tensor[(576), int32] */;
    %700 = cast(%var_1482, dtype="uint16") /* ty=uint16 */;
    %701 = cast(%699, dtype="uint16") /* ty=Tensor[(576), uint16] */;
    %702 = @func_860() /* ty=(Tensor[(16, 9, 2), bool], Tensor[(99, 9), float32], Tensor[(704, 1), float64], Tensor[(2, 10, 8), float64], Tensor[(160), bool], Tensor[(2, 10, 8), float64], Tensor[(8, 260), int64], Tensor[(2080), float32]) */;
    %703 = %702.5;
    %704 = cast(%703, dtype="float64") /* ty=Tensor[(2, 10, 8), float64] */;
    %705 = bitwise_xor(%700, %701) /* ty=Tensor[(576), uint16] */;
    %706 = log2(%704) /* ty=Tensor[(2, 10, 8), float64] */;
    (%705, %706)
  };
  %707(%var_1512, %var_1513) /* ty=(Tensor[(576), uint16], Tensor[(2, 10, 8), float64]) */
}

def @func_3742(%var_3727: float64, %var_3728: Tensor[(576), float64]) -> (Tensor[(2, 10, 8), float64], float64, float64, Tensor[(576), float64]) {
  %708 = @func_1083() /* ty=(Tensor[(2, 10, 8), float64],) */;
  %709 = cast(%var_3727, dtype="float64") /* ty=float64 */;
  %710 = cast(%var_3728, dtype="float64") /* ty=Tensor[(576), float64] */;
  %711 = reshape(%709, newshape=[]) /* ty=float64 */;
  %712 = reshape(%710, newshape=[576]) /* ty=Tensor[(576), float64] */;
  %713 = @func_3449(%711, %712) /* ty=(float64, Tensor[(576), float64], Tensor[(2, 10, 8), float32]) */;
  %714 = %708.0;
  %715 = %713.0;
  (%714, %715, %var_3727, %var_3728)
}

def @func_563(%var_500: Tensor[(8, 8, 11), float64]) -> (Tensor[(10, 13, 16), int64], Tensor[(8, 260), int64], Tensor[(160), bool], Tensor[(99, 9), float32], Tensor[(1, 7, 9), float32], Tensor[(21, 3), float32], Tensor[(9, 11, 9), float32], Tensor[(8, 8, 11), float32], Tensor[(9, 11, 9), float32]) {
  %716 = cast(meta[relay.Constant][33] /* ty=Tensor[(8, 260), int64] */, dtype="int64") /* ty=Tensor[(8, 260), int64] */;
  %717 = cast(meta[relay.Constant][33] /* ty=Tensor[(8, 260), int64] */, dtype="int64") /* ty=Tensor[(8, 260), int64] */;
  %718 = cast(meta[relay.Constant][34] /* ty=Tensor[(160), bool] */, dtype="bool") /* ty=Tensor[(160), bool] */;
  %719 = cast(meta[relay.Constant][35] /* ty=Tensor[(99, 9), float32] */, dtype="float32") /* ty=Tensor[(99, 9), float32] */;
  %720 = cast(meta[relay.Constant][33] /* ty=Tensor[(8, 260), int64] */, dtype="int64") /* ty=Tensor[(8, 260), int64] */;
  %721 = reshape(%716, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), int64] */;
  %722 = reshape(%717, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), int64] */;
  %723 = reshape(%718, newshape=[160]) /* ty=Tensor[(160), bool] */;
  %724 = reshape(%719, newshape=[99, 9]) /* ty=Tensor[(99, 9), float32] */;
  %725 = reshape(%720, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), int64] */;
  %726 = @func_272(%721, %722, %723, %724, %725) /* ty=(Tensor[(10, 13, 16), int64], Tensor[(2, 10, 8), bool], Tensor[(9, 11, 9), float32], Tensor[(99, 9), float32], Tensor[(160), float32], Tensor[(10, 13, 16), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64]) */;
  %727 = cast(meta[relay.Constant][36] /* ty=Tensor[(21, 3), float32] */, dtype="float32") /* ty=Tensor[(21, 3), float32] */;
  %728 = reshape(%727, newshape=[1, 7, 9]) /* ty=Tensor[(1, 7, 9), float32] */;
  %729 = cast(meta[relay.Constant][35] /* ty=Tensor[(99, 9), float32] */, dtype="float32") /* ty=Tensor[(99, 9), float32] */;
  %730 = reshape(%729, newshape=[9, 11, 9]) /* ty=Tensor[(9, 11, 9), float32] */;
  %731 = @func_127(%730) /* ty=(Tensor[(9, 11, 9), float32],) */;
  %732 = cast(%var_500, dtype="float64") /* ty=Tensor[(8, 8, 11), float64] */;
  %733 = asin(%732) /* ty=Tensor[(8, 8, 11), float64] */;
  %734 = cast(%733, dtype="float32") /* ty=Tensor[(8, 8, 11), float32] */;
  %735 = cast(meta[relay.Constant][35] /* ty=Tensor[(99, 9), float32] */, dtype="float32") /* ty=Tensor[(99, 9), float32] */;
  %736 = reshape(%735, newshape=[9, 11, 9]) /* ty=Tensor[(9, 11, 9), float32] */;
  %737 = @func_127(%736) /* ty=(Tensor[(9, 11, 9), float32],) */;
  %738 = %726.0;
  %739 = @func_382(%728) /* ty=Tensor[(1, 7, 9), float32] */;
  %740 = %731.0;
  %741 = rsqrt(%734) /* ty=Tensor[(8, 8, 11), float32] */;
  %742 = %737.0;
  (%738, meta[relay.Constant][33] /* ty=Tensor[(8, 260), int64] */, meta[relay.Constant][34] /* ty=Tensor[(160), bool] */, meta[relay.Constant][35] /* ty=Tensor[(99, 9), float32] */, %739, meta[relay.Constant][36] /* ty=Tensor[(21, 3), float32] */, %740, %741, %742)
}

def @func_2142() -> (Tensor[(13, 2, 4), bool],) {
  %745 = fn () -> (Tensor[(13, 2, 4), bool],) {
    %743 = @func_1156() /* ty=(Tensor[(2, 10, 8), float64], Tensor[(13, 2, 4), bool], Tensor[(104), uint16]) */;
    %744 = %743.1;
    (%744,)
  };
  %745() /* ty=(Tensor[(13, 2, 4), bool],) */
}

def @func_384(%var_383: Tensor[(1, 7, 9), float32]) -> Tensor[(1, 7, 9), float32] {
  %747 = fn (%var_372: Tensor[(1, 7, 9), float32]) -> Tensor[(1, 7, 9), float32] {
    %746 = cast(%var_372, dtype="float32") /* ty=Tensor[(1, 7, 9), float32] */;
    cos(%746) /* ty=Tensor[(1, 7, 9), float32] */
  };
  %747(%var_383) /* ty=Tensor[(1, 7, 9), float32] */
}

def @func_2562(%var_2560: Tensor[(2, 7, 16), uint8], %var_2561: Tensor[(2, 7, 16), uint8]) -> (Tensor[(2, 7, 16), bool], Tensor[(2, 10, 8), float64], Tensor[(8, 88), bool]) {
  %764 = fn (%var_2528: Tensor[(2, 7, 16), uint8], %var_2529: Tensor[(2, 7, 16), uint8]) -> (Tensor[(2, 7, 16), bool], Tensor[(2, 10, 8), float64], Tensor[(8, 88), bool]) {
    %748 = cast(%var_2529, dtype="bool") /* ty=Tensor[(2, 7, 16), bool] */;
    %749 = shape_of(%var_2528, dtype="int32") /* ty=Tensor[(3), int32] */;
    %750 = cast(%var_2528, dtype="bool") /* ty=Tensor[(2, 7, 16), bool] */;
    %751 = dyn.reshape(%748, %749, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %752 = @func_2015() /* ty=(Tensor[(2, 10, 8), float64], float64, Tensor[(1260), int16], Tensor[(12, 48), float64], Tensor[(2, 10, 8), float64], Tensor[(24, 72), float64]) */;
    %753 = cast(meta[relay.Constant][37] /* ty=Tensor[(8, 88), float64] */, dtype="float64") /* ty=Tensor[(8, 88), float64] */;
    %754 = reshape(%753, newshape=[8, 8, 11]) /* ty=Tensor[(8, 8, 11), float64] */;
    %755 = @func_563(%754) /* ty=(Tensor[(10, 13, 16), int64], Tensor[(8, 260), int64], Tensor[(160), bool], Tensor[(99, 9), float32], Tensor[(1, 7, 9), float32], Tensor[(21, 3), float32], Tensor[(9, 11, 9), float32], Tensor[(8, 8, 11), float32], Tensor[(9, 11, 9), float32]) */;
    %756 = %755.7;
    %757 = cast(%756, dtype="bool") /* ty=Tensor[(8, 8, 11), bool] */;
    %758 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(8, 88), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %759 = cast(meta[relay.Constant][37] /* ty=Tensor[(8, 88), float64] */, dtype="bool") /* ty=Tensor[(8, 88), bool] */;
    %760 = dyn.reshape(%757, %758, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %761 = not_equal(%750, %751) /* ty=Tensor[(2, 7, 16), bool] */;
    %762 = %752.0;
    %763 = greater_equal(%759, %760) /* ty=Tensor[(8, 88), bool] */;
    (%761, %762, %763)
  };
  %764(%var_2560, %var_2561) /* ty=(Tensor[(2, 7, 16), bool], Tensor[(2, 10, 8), float64], Tensor[(8, 88), bool]) */
}

def @func_936(%var_901: Tensor[(8, 16, 16), float32], %var_902: Tensor[(8, 16, 16), float32], %var_911: Tensor[(8, 16, 16), float32], %var_920: Tensor[(4, 40), bool]) -> (Tensor[(8, 16, 16), uint64], Tensor[(2, 10, 8), float64], Tensor[(4, 40), bool]) {
  %765 = cast(%var_902, dtype="float32") /* ty=Tensor[(8, 16, 16), float32] */;
  %766 = shape_of(%var_901, dtype="int32") /* ty=Tensor[(3), int32] */;
  %767 = cast(%var_901, dtype="float32") /* ty=Tensor[(8, 16, 16), float32] */;
  %768 = dyn.reshape(%765, %766, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %769 = maximum(%767, %768) /* ty=Tensor[(8, 16, 16), float32] */;
  %770 = cast(%var_911, dtype="uint64") /* ty=Tensor[(8, 16, 16), uint64] */;
  %771 = shape_of(%769, dtype="int32") /* ty=Tensor[(3), int32] */;
  %772 = cast(%769, dtype="uint64") /* ty=Tensor[(8, 16, 16), uint64] */;
  %773 = dyn.reshape(%770, %771, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %774 = cast(%var_920, dtype="bool") /* ty=Tensor[(4, 40), bool] */;
  %775 = cast(%var_920, dtype="bool") /* ty=Tensor[(4, 40), bool] */;
  %776 = reshape(%774, newshape=[2, 10, 8]) /* ty=Tensor[(2, 10, 8), bool] */;
  %777 = reshape(%775, newshape=[2, 10, 8]) /* ty=Tensor[(2, 10, 8), bool] */;
  %778 = @func_84(%776, %777) /* ty=(Tensor[(2, 10, 8), bool], Tensor[(2, 10, 8), float64]) */;
  %779 = bitwise_and(%772, %773) /* ty=Tensor[(8, 16, 16), uint64] */;
  %780 = %778.1;
  (%779, %780, %var_920)
}

def @func_1315() -> Tensor[(2, 10, 8), float64] {
  %781 = @func_1156() /* ty=(Tensor[(2, 10, 8), float64], Tensor[(13, 2, 4), bool], Tensor[(104), uint16]) */;
  %781.0
}

def @func_3320() -> (Tensor[(2, 10, 8), float64],) {
  @func_3318() /* ty=(Tensor[(2, 10, 8), float64],) */
}

def @func_1347(%var_1345: Tensor[(4, 14, 16), bool], %var_1346: Tensor[(4, 14, 16), bool]) -> (Tensor[(4, 14, 16), bool],) {
  @func_1343(%var_1345, %var_1346) /* ty=(Tensor[(4, 14, 16), bool],) */
}

def @func_3005(%var_3003: Tensor[(2, 10, 8), float64]) -> (Tensor[(2, 10, 8), int32],) {
  @func_3002(%var_3003) /* ty=(Tensor[(2, 10, 8), int32],) */
}

def @func_2206() -> (Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64]) {
  %785 = fn () -> (Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64]) {
    %782 = @func_1083() /* ty=(Tensor[(2, 10, 8), float64],) */;
    %783 = @func_1315() /* ty=Tensor[(2, 10, 8), float64] */;
    %784 = %782.0;
    (%783, %784)
  };
  %785() /* ty=(Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64]) */
}

def @func_2652() -> Tensor[(2, 10, 8), float64] {
  @func_2650() /* ty=Tensor[(2, 10, 8), float64] */
}

def @func_1695() -> (Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(9, 16, 12), float64], Tensor[(1728), float64], Tensor[(1, 7, 9), float32], Tensor[(63), float32]) {
  @func_1693() /* ty=(Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(9, 16, 12), float64], Tensor[(1728), float64], Tensor[(1, 7, 9), float32], Tensor[(63), float32]) */
}

def @func_1029(%var_1027: Tensor[(99, 9), float32]) -> (Tensor[(99, 9), bool], Tensor[(2, 10, 8), float64], Tensor[(160), bool]) {
  @func_1026(%var_1027) /* ty=(Tensor[(99, 9), bool], Tensor[(2, 10, 8), float64], Tensor[(160), bool]) */
}

def @func_3150() -> (Tensor[(2, 10, 8), int32],) {
  %786 = @func_1315() /* ty=Tensor[(2, 10, 8), float64] */;
  %787 = @func_2015() /* ty=(Tensor[(2, 10, 8), float64], float64, Tensor[(1260), int16], Tensor[(12, 48), float64], Tensor[(2, 10, 8), float64], Tensor[(24, 72), float64]) */;
  %788 = %787.1;
  %789 = cast(%786, dtype="int32") /* ty=Tensor[(2, 10, 8), int32] */;
  %790 = cast(%788, dtype="int32") /* ty=int32 */;
  %791 = logical_xor(%789, %790) /* ty=Tensor[(2, 10, 8), int32] */;
  (%791,)
}

def @func_2716(%var_2715: Tensor[(16, 7, 6), float64]) -> (Tensor[(2, 7, 16), bool], Tensor[(224), uint8], Tensor[(16, 7, 6), int8]) {
  %805 = fn (%var_2682: Tensor[(16, 7, 6), float64]) -> (Tensor[(2, 7, 16), bool], Tensor[(224), uint8], Tensor[(16, 7, 6), int8]) {
    %792 = cast(meta[relay.Constant][38] /* ty=Tensor[(224), uint8] */, dtype="uint8") /* ty=Tensor[(224), uint8] */;
    %793 = cast(meta[relay.Constant][38] /* ty=Tensor[(224), uint8] */, dtype="uint8") /* ty=Tensor[(224), uint8] */;
    %794 = reshape(%792, newshape=[2, 7, 16]) /* ty=Tensor[(2, 7, 16), uint8] */;
    %795 = reshape(%793, newshape=[2, 7, 16]) /* ty=Tensor[(2, 7, 16), uint8] */;
    %796 = @func_2559(%794, %795) /* ty=(Tensor[(2, 7, 16), bool], Tensor[(2, 10, 8), float64], Tensor[(8, 88), bool]) */;
    %797 = cast(%var_2682, dtype="float64") /* ty=Tensor[(16, 7, 6), float64] */;
    %798 = log10(%797) /* ty=Tensor[(16, 7, 6), float64] */;
    %799 = cast(%var_2682, dtype="int8") /* ty=Tensor[(16, 7, 6), int8] */;
    %800 = shape_of(%798, dtype="int32") /* ty=Tensor[(3), int32] */;
    %801 = cast(%798, dtype="int8") /* ty=Tensor[(16, 7, 6), int8] */;
    %802 = dyn.reshape(%799, %800, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %803 = %796.0;
    %804 = left_shift(%801, %802) /* ty=Tensor[(16, 7, 6), int8] */;
    (%803, meta[relay.Constant][38] /* ty=Tensor[(224), uint8] */, %804)
  };
  %805(%var_2715) /* ty=(Tensor[(2, 7, 16), bool], Tensor[(224), uint8], Tensor[(16, 7, 6), int8]) */
}

def @func_4160() -> Tensor[(9, 2, 4), int8] {
  %807 = fn () -> Tensor[(9, 2, 4), int8] {
    %806 = @func_2902() /* ty=(Tensor[(9, 2, 4), int8],) */;
    %806.0
  };
  %807() /* ty=Tensor[(9, 2, 4), int8] */
}

def @func_4197() -> Tensor[(2, 10, 8), float64] {
  %809 = fn () -> Tensor[(2, 10, 8), float64] {
    %808 = @func_2205() /* ty=(Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64]) */;
    %808.0
  };
  %809() /* ty=Tensor[(2, 10, 8), float64] */
}

def @func_130(%var_128: Tensor[(9, 11, 9), float32]) -> (Tensor[(9, 11, 9), float32],) {
  @func_127(%var_128) /* ty=(Tensor[(9, 11, 9), float32],) */
}

def @func_4426() -> Tensor[(2, 10, 8), float64] {
  @func_4424() /* ty=Tensor[(2, 10, 8), float64] */
}

def @func_2519() -> (Tensor[(2, 10, 8), float64],) {
  %812 = fn () -> (Tensor[(2, 10, 8), float64],) {
    %810 = @func_1083() /* ty=(Tensor[(2, 10, 8), float64],) */;
    %811 = %810.0;
    (%811,)
  };
  %812() /* ty=(Tensor[(2, 10, 8), float64],) */
}

def @func_1026(%var_990: Tensor[(99, 9), float32]) -> (Tensor[(99, 9), bool], Tensor[(2, 10, 8), float64], Tensor[(160), bool]) {
  %813 = @func_860() /* ty=(Tensor[(16, 9, 2), bool], Tensor[(99, 9), float32], Tensor[(704, 1), float64], Tensor[(2, 10, 8), float64], Tensor[(160), bool], Tensor[(2, 10, 8), float64], Tensor[(8, 260), int64], Tensor[(2080), float32]) */;
  %814 = %813.1;
  %815 = cast(%var_990, dtype="bool") /* ty=Tensor[(99, 9), bool] */;
  %816 = shape_of(%814, dtype="int32") /* ty=Tensor[(2), int32] */;
  %817 = cast(%814, dtype="bool") /* ty=Tensor[(99, 9), bool] */;
  %818 = dyn.reshape(%815, %816, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %819 = cast(meta[relay.Constant][39] /* ty=Tensor[(160), bool] */, dtype="bool") /* ty=Tensor[(160), bool] */;
  %820 = cast(meta[relay.Constant][39] /* ty=Tensor[(160), bool] */, dtype="bool") /* ty=Tensor[(160), bool] */;
  %821 = reshape(%819, newshape=[2, 10, 8]) /* ty=Tensor[(2, 10, 8), bool] */;
  %822 = reshape(%820, newshape=[2, 10, 8]) /* ty=Tensor[(2, 10, 8), bool] */;
  %823 = @func_84(%821, %822) /* ty=(Tensor[(2, 10, 8), bool], Tensor[(2, 10, 8), float64]) */;
  %824 = less(%817, %818) /* ty=Tensor[(99, 9), bool] */;
  %825 = %823.1;
  (%824, %825, meta[relay.Constant][39] /* ty=Tensor[(160), bool] */)
}

def @func_4550(%var_4548: Tensor[(13, 2, 4), bool]) -> (Tensor[(13, 2, 4), bool], Tensor[(8, 88), bool], Tensor[(224), uint8]) {
  @func_4547(%var_4548) /* ty=(Tensor[(13, 2, 4), bool], Tensor[(8, 88), bool], Tensor[(224), uint8]) */
}

def @func_2285() -> (Tensor[(8, 260), int64],) {
  %828 = fn () -> (Tensor[(8, 260), int64],) {
    %826 = @func_860() /* ty=(Tensor[(16, 9, 2), bool], Tensor[(99, 9), float32], Tensor[(704, 1), float64], Tensor[(2, 10, 8), float64], Tensor[(160), bool], Tensor[(2, 10, 8), float64], Tensor[(8, 260), int64], Tensor[(2080), float32]) */;
    %827 = %826.6;
    (%827,)
  };
  %828() /* ty=(Tensor[(8, 260), int64],) */
}

def @func_2474(%var_2438: Tensor[(2080), int64], %var_2439: Tensor[(891), float32]) -> (Tensor[(2, 10, 8), float64], Tensor[(10, 13, 16), float64], Tensor[(2080), int64], Tensor[(891), float32]) {
  %829 = @func_2205() /* ty=(Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64]) */;
  %830 = cast(%var_2438, dtype="int64") /* ty=Tensor[(2080), int64] */;
  %831 = cast(%var_2438, dtype="int64") /* ty=Tensor[(2080), int64] */;
  %832 = %829.0;
  %833 = cast(%832, dtype="bool") /* ty=Tensor[(2, 10, 8), bool] */;
  %834 = cast(%var_2439, dtype="float32") /* ty=Tensor[(891), float32] */;
  %835 = cast(%var_2438, dtype="int64") /* ty=Tensor[(2080), int64] */;
  %836 = reshape(%830, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), int64] */;
  %837 = reshape(%831, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), int64] */;
  %838 = reshape(%833, newshape=[160]) /* ty=Tensor[(160), bool] */;
  %839 = reshape(%834, newshape=[99, 9]) /* ty=Tensor[(99, 9), float32] */;
  %840 = reshape(%835, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), int64] */;
  %841 = @func_272(%836, %837, %838, %839, %840) /* ty=(Tensor[(10, 13, 16), int64], Tensor[(2, 10, 8), bool], Tensor[(9, 11, 9), float32], Tensor[(99, 9), float32], Tensor[(160), float32], Tensor[(10, 13, 16), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64]) */;
  %842 = %841.5;
  (%832, %842, %var_2438, %var_2439)
}

def @func_2618() -> (Tensor[(9, 2, 4), float64], Tensor[(9, 2, 4), float64]) {
  %847 = fn () -> (Tensor[(9, 2, 4), float64], Tensor[(9, 2, 4), float64]) {
    %843 = cast(meta[relay.Constant][40] /* ty=Tensor[(9, 2, 4), float64] */, dtype="float64") /* ty=Tensor[(9, 2, 4), float64] */;
    %844 = cast(meta[relay.Constant][40] /* ty=Tensor[(9, 2, 4), float64] */, dtype="float64") /* ty=Tensor[(9, 2, 4), float64] */;
    %845 = sqrt(%843) /* ty=Tensor[(9, 2, 4), float64] */;
    %846 = exp(%844) /* ty=Tensor[(9, 2, 4), float64] */;
    (%845, %846)
  };
  %847() /* ty=(Tensor[(9, 2, 4), float64], Tensor[(9, 2, 4), float64]) */
}

def @func_1630() -> (Tensor[(2, 10, 8), float64],) {
  @func_1628() /* ty=(Tensor[(2, 10, 8), float64],) */
}

def @func_942(%var_938: Tensor[(8, 16, 16), float32], %var_939: Tensor[(8, 16, 16), float32], %var_940: Tensor[(8, 16, 16), float32], %var_941: Tensor[(4, 40), bool]) -> (Tensor[(8, 16, 16), uint64], Tensor[(2, 10, 8), float64], Tensor[(4, 40), bool]) {
  @func_936(%var_938, %var_939, %var_940, %var_941) /* ty=(Tensor[(8, 16, 16), uint64], Tensor[(2, 10, 8), float64], Tensor[(4, 40), bool]) */
}

def @func_1343(%var_1338: Tensor[(4, 14, 16), bool], %var_1339: Tensor[(4, 14, 16), bool]) -> (Tensor[(4, 14, 16), bool],) {
  %848 = cast(%var_1339, dtype="bool") /* ty=Tensor[(4, 14, 16), bool] */;
  %849 = shape_of(%var_1338, dtype="int32") /* ty=Tensor[(3), int32] */;
  %850 = cast(%var_1338, dtype="bool") /* ty=Tensor[(4, 14, 16), bool] */;
  %851 = dyn.reshape(%848, %849, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %852 = logical_or(%850, %851) /* ty=Tensor[(4, 14, 16), bool] */;
  (%852,)
}

def @func_1232(%var_1230: Tensor[(1, 7, 5), int32]) -> Tensor[(15, 7, 5), int32] {
  @func_1229(%var_1230) /* ty=Tensor[(15, 7, 5), int32] */
}

def @func_1815(%var_1810: Tensor[(1, 35), int32]) -> (Tensor[(2, 10, 8), float64], Tensor[(15, 7, 5), int32], Tensor[(1, 35), int32]) {
  %853 = @func_1083() /* ty=(Tensor[(2, 10, 8), float64],) */;
  %854 = cast(%var_1810, dtype="int32") /* ty=Tensor[(1, 35), int32] */;
  %855 = reshape(%854, newshape=[1, 7, 5]) /* ty=Tensor[(1, 7, 5), int32] */;
  %856 = %853.0;
  %857 = @func_1229(%855) /* ty=Tensor[(15, 7, 5), int32] */;
  (%856, %857, %var_1810)
}

def @func_1872() -> (Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(1728), float64]) {
  @func_1870() /* ty=(Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(1728), float64]) */
}

def @func_3107() -> Tensor[(2, 10, 8), float64] {
  %859 = fn () -> Tensor[(2, 10, 8), float64] {
    %858 = @func_1870() /* ty=(Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64], Tensor[(1728), float64]) */;
    %858.1
  };
  %859() /* ty=Tensor[(2, 10, 8), float64] */
}

def @func_3722() -> Tensor[(704, 1), float64] {
  %861 = fn () -> Tensor[(704, 1), float64] {
    %860 = @func_1801() /* ty=(Tensor[(704, 1), float64],) */;
    %860.0
  };
  %861() /* ty=Tensor[(704, 1), float64] */
}

def @func_2016() -> (Tensor[(2, 10, 8), float64], float64, Tensor[(1260), int16], Tensor[(12, 48), float64], Tensor[(2, 10, 8), float64], Tensor[(24, 72), float64]) {
  %875 = fn () -> (Tensor[(2, 10, 8), float64], float64, Tensor[(1260), int16], Tensor[(12, 48), float64], Tensor[(2, 10, 8), float64], Tensor[(24, 72), float64]) {
    %862 = cast(meta[relay.Constant][41] /* ty=Tensor[(1260), int16] */, dtype="int16") /* ty=Tensor[(1260), int16] */;
    %863 = cast(meta[relay.Constant][41] /* ty=Tensor[(1260), int16] */, dtype="int16") /* ty=Tensor[(1260), int16] */;
    %864 = cast(meta[relay.Constant][42] /* ty=Tensor[(12, 48), float64] */, dtype="float64") /* ty=Tensor[(12, 48), float64] */;
    %865 = reshape(%862, newshape=[10, 14, 9]) /* ty=Tensor[(10, 14, 9), int16] */;
    %866 = reshape(%863, newshape=[10, 14, 9]) /* ty=Tensor[(10, 14, 9), int16] */;
    %867 = reshape(%864, newshape=[1, 576]) /* ty=Tensor[(1, 576), float64] */;
    %868 = @func_1956(%865, %866, %867) /* ty=(Tensor[(10, 14, 9), float64], float64, Tensor[(10, 14, 9), int8], Tensor[(?, 576), float32], Tensor[(?, 576), float32]) */;
    %869 = cast(meta[relay.Constant][43] /* ty=Tensor[(24, 72), float64] */, dtype="float64") /* ty=Tensor[(24, 72), float64] */;
    %870 = reshape(%869, newshape=[1728]) /* ty=Tensor[(1728), float64] */;
    %871 = @func_1732(%870) /* ty=(Tensor[(2, 10, 8), float64], Tensor[(9, 16, 12), float64], Tensor[(1728), float64], Tensor[(2, 10, 8), float64], Tensor[(2, 10, 8), float64]) */;
    %872 = @func_1315() /* ty=Tensor[(2, 10, 8), float64] */;
    %873 = %868.1;
    %874 = %871.3;
    (%872, %873, meta[relay.Constant][41] /* ty=Tensor[(1260), int16] */, meta[relay.Constant][42] /* ty=Tensor[(12, 48), float64] */, %874, meta[relay.Constant][43] /* ty=Tensor[(24, 72), float64] */)
  };
  %875() /* ty=(Tensor[(2, 10, 8), float64], float64, Tensor[(1260), int16], Tensor[(12, 48), float64], Tensor[(2, 10, 8), float64], Tensor[(24, 72), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen82/build/output.py:1741: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen82/build/output.py", line 1746, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(40) tvmgen_default_fused_cast_reshape_equal_kernel0(signed char* __restrict__ T_equal, signed char* __restrict__ placeholder, int64_t* __restrict__ placeholder1) {
  T_equal[(((int)threadIdx.x))] = ((signed char)(((bool)placeholder[(((int)threadIdx.x))]) == ((bool)placeholder1[(((int)threadIdx.x))])));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

