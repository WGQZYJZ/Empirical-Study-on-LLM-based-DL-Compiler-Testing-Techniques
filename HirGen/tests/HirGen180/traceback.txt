==========mod==========
#[version = "0.0.5"]
def @func_7240() -> (Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float32], Tensor[(15, 3, 8), float32]) {
  %0 = @func_5736() /* ty=(Tensor[(15, 3, 8), bool], Tensor[(650), float64], Tensor[(15, 3, 8), float64], Tensor[(64), float64]) */;
  %1 = @func_2565() /* ty=(Tensor[(15, 3, 8), float32],) */;
  %2 = @func_4155() /* ty=(Tensor[(15, 3, 8), float32],) */;
  %3 = %0.2;
  %4 = %1.0;
  %5 = %2.0;
  (%3, %4, %5)
}

def @func_7494() -> (Tensor[(15, 3, 8), float64], Tensor[(15, 3, 2), int64]) {
  %6 = @func_2548() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64]) */;
  %7 = cast(meta[relay.Constant][0] /* ty=Tensor[(90), uint64] */, dtype="uint64") /* ty=Tensor[(90), uint64] */;
  %8 = reshape(%7, newshape=[15, 3, 2]) /* ty=Tensor[(15, 3, 2), uint64] */;
  %9 = @func_648(%8) /* ty=Tensor[(15, 3, 2), uint64] */;
  %10 = cast(meta[relay.Constant][0] /* ty=Tensor[(90), uint64] */, dtype="int64") /* ty=Tensor[(90), int64] */;
  %11 = shape_of(%9, dtype="int32") /* ty=Tensor[(3), int32] */;
  %12 = cast(%9, dtype="int64") /* ty=Tensor[(15, 3, 2), int64] */;
  %13 = dyn.reshape(%10, %11, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %14 = %6.0;
  %15 = bitwise_xor(%12, %13) /* ty=Tensor[(15, 3, 2), int64] */;
  (%14, %15)
}

def @func_1703() -> Tensor[(15, 3, 8), float64] {
  @func_1649() /* ty=Tensor[(15, 3, 8), float64] */
}

def @func_2565() -> (Tensor[(15, 3, 8), float32],) {
  %16 = @func_1684() /* ty=Tensor[(15, 3, 8), float64] */;
  %17 = cast(%16, dtype="float32") /* ty=Tensor[(15, 3, 8), float32] */;
  %18 = sigmoid(%17) /* ty=Tensor[(15, 3, 8), float32] */;
  (%18,)
}

def @func_4712(%var_4679: Tensor[(15, 3, 8), float64], %var_4690: Tensor[(64), float64], %var_4693: Tensor[(8, 308), int16]) -> (Tensor[(15, 3, 8), float64], float32, Tensor[(64), float64], Tensor[(650), float32], Tensor[(480), float32], Tensor[(8, 308), int16]) {
  %19 = @func_1684() /* ty=Tensor[(15, 3, 8), float64] */;
  %20 = cast(%var_4679, dtype="float64") /* ty=Tensor[(15, 3, 8), float64] */;
  %21 = shape_of(%19, dtype="int32") /* ty=Tensor[(3), int32] */;
  %22 = cast(%19, dtype="float64") /* ty=Tensor[(15, 3, 8), float64] */;
  %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %24 = cast(%var_4690, dtype="float64") /* ty=Tensor[(64), float64] */;
  %25 = cast(%var_4690, dtype="float64") /* ty=Tensor[(64), float64] */;
  %26 = cast(meta[relay.Constant][1] /* ty=Tensor[(650), float32] */, dtype="float32") /* ty=Tensor[(650), float32] */;
  %27 = cast(meta[relay.Constant][2] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %28 = cast(%var_4693, dtype="int16") /* ty=Tensor[(8, 308), int16] */;
  %29 = reshape(%24, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float64] */;
  %30 = reshape(%25, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float64] */;
  %31 = reshape(%26, newshape=[650]) /* ty=Tensor[(650), float32] */;
  %32 = reshape(%27, newshape=[8, 60]) /* ty=Tensor[(8, 60), float32] */;
  %33 = reshape(%28, newshape=[16, 11, 14]) /* ty=Tensor[(16, 11, 14), int16] */;
  %34 = @func_2061(%29, %30, %31, %32, %33) /* ty=(Tensor[(4, 4, 4), bool], float32, Tensor[(210), float32], Tensor[(120), float32], Tensor[(650), float32], Tensor[(11, 12, 11), float64], Tensor[(?, 650), bool], Tensor[(8, 60), float32], Tensor[(2464), int16], Tensor[(16, 11, 14), bool], Tensor[(15, 3, 8), float64]) */;
  %35 = mod(%22, %23) /* ty=Tensor[(15, 3, 8), float64] */;
  %36 = %34.1;
  (%35, %36, %var_4690, meta[relay.Constant][1] /* ty=Tensor[(650), float32] */, meta[relay.Constant][2] /* ty=Tensor[(480), float32] */, %var_4693)
}

def @func_4447() -> (Tensor[(15, 3, 8), float64],) {
  %37 = @func_2127() /* ty=Tensor[(15, 3, 8), float64] */;
  (%37,)
}

def @func_5977() -> Tensor[(650), float32] {
  %38 = @func_3694() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(2464), int16], Tensor[(650), float64]) */;
  %39 = %38.2;
  %40 = cast(%39, dtype="float64") /* ty=Tensor[(650), float64] */;
  %41 = log10(%40) /* ty=Tensor[(650), float64] */;
  %42 = cast(%39, dtype="bool") /* ty=Tensor[(650), bool] */;
  %43 = shape_of(%41, dtype="int32") /* ty=Tensor[(1), int32] */;
  %44 = cast(%41, dtype="bool") /* ty=Tensor[(650), bool] */;
  %45 = dyn.reshape(%42, %43, newshape=[]) /* ty=Tensor[(?), bool] */;
  %46 = logical_and(%44, %45) /* ty=Tensor[(650), bool] */;
  %47 = cast(%46, dtype="float32") /* ty=Tensor[(650), float32] */;
  sqrt(%47) /* ty=Tensor[(650), float32] */
}

def @func_4243(%var_4235: Tensor[(60), float32]) -> (Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64], Tensor[(60), float32]) {
  %48 = @func_2669() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(13, 10, 5), float32], float32, Tensor[(650), float32]) */;
  %49 = cast(%var_4235, dtype="float32") /* ty=Tensor[(60), float32] */;
  %50 = reshape(%49, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %51 = @func_3229(%50) /* ty=(Tensor[(15, 3, 8), float64], Tensor[(12, 5), float32], Tensor[(60), float32]) */;
  %52 = %48.0;
  %53 = %51.0;
  (%52, %53, %var_4235)
}

def @func_2127() -> Tensor[(15, 3, 8), float64] {
  @func_2106() /* ty=Tensor[(15, 3, 8), float64] */
}

def @func_1576(%var_1554: Tensor[(16, 11, 14), int16]) -> (Tensor[(16, 11, 14), int16], Tensor[(16, 11, 14), uint32], Tensor[(15, 3, 2), uint64], Tensor[(90), uint64]) {
  %54 = cast(%var_1554, dtype="int16") /* ty=Tensor[(16, 11, 14), int16] */;
  %55 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(16, 11, 14), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %56 = cast(meta[relay.Constant][3] /* ty=Tensor[(16, 11, 14), int16] */, dtype="int16") /* ty=Tensor[(16, 11, 14), int16] */;
  %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %58 = cast(%var_1554, dtype="uint32") /* ty=Tensor[(16, 11, 14), uint32] */;
  %59 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(16, 11, 14), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %60 = cast(meta[relay.Constant][3] /* ty=Tensor[(16, 11, 14), int16] */, dtype="uint32") /* ty=Tensor[(16, 11, 14), uint32] */;
  %61 = dyn.reshape(%58, %59, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %62 = cast(meta[relay.Constant][4] /* ty=Tensor[(90), uint64] */, dtype="uint64") /* ty=Tensor[(90), uint64] */;
  %63 = reshape(%62, newshape=[15, 3, 2]) /* ty=Tensor[(15, 3, 2), uint64] */;
  %64 = left_shift(%56, %57) /* ty=Tensor[(16, 11, 14), int16] */;
  %65 = logical_xor(%60, %61) /* ty=Tensor[(16, 11, 14), uint32] */;
  %66 = @func_648(%63) /* ty=Tensor[(15, 3, 2), uint64] */;
  (%64, %65, %66, meta[relay.Constant][4] /* ty=Tensor[(90), uint64] */)
}

def @func_6025() -> (Tensor[(15, 3, 8), float64],) {
  %67 = @func_2852() /* ty=Tensor[(15, 3, 8), float64] */;
  (%67,)
}

def @func_2942() -> (Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64]) {
  %68 = @func_2160() /* ty=(Tensor[(15, 3, 8), float64],) */;
  %69 = %68.0;
  %70 = cast(%69, dtype="float64") /* ty=Tensor[(15, 3, 8), float64] */;
  %71 = cos(%70) /* ty=Tensor[(15, 3, 8), float64] */;
  %72 = @func_2852() /* ty=Tensor[(15, 3, 8), float64] */;
  (%71, %72)
}

def @func_4638() -> (Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64]) {
  %73 = @func_4447() /* ty=(Tensor[(15, 3, 8), float64],) */;
  %74 = @func_2160() /* ty=(Tensor[(15, 3, 8), float64],) */;
  %75 = %73.0;
  %76 = @func_3367() /* ty=Tensor[(15, 3, 8), float64] */;
  %77 = %74.0;
  (%75, %76, %77)
}

def @func_2603(%var_2572: Tensor[(5, 12, 12), int64]) -> (Tensor[(5, 12, 12), float64],) {
  %78 = cast(meta[relay.Constant][5] /* ty=Tensor[(5, 1, 12), int64] */, dtype="bool") /* ty=Tensor[(5, 1, 12), bool] */;
  %79 = cast(%var_2572, dtype="bool") /* ty=Tensor[(5, 12, 12), bool] */;
  %80 = less_equal(%78, %79) /* ty=Tensor[(5, 12, 12), bool] */;
  %81 = cast(%80, dtype="float64") /* ty=Tensor[(5, 12, 12), float64] */;
  %82 = asinh(%81) /* ty=Tensor[(5, 12, 12), float64] */;
  (%82,)
}

def @func_6244(%var_6241: Tensor[(10, 8, 7), float64]) -> Tensor[(10, 8, 7), float64] {
  %83 = cast(%var_6241, dtype="float64") /* ty=Tensor[(10, 8, 7), float64] */;
  exp(%83) /* ty=Tensor[(10, 8, 7), float64] */
}

def @func_6478(%var_6475: Tensor[(2464), int16]) -> (Tensor[(13, 10, 5), float32], Tensor[(13, 10, 5), uint8], Tensor[(16, 11, 14), int16], Tensor[(2464), int16]) {
  %84 = @func_2833() /* ty=Tensor[(13, 10, 5), float32] */;
  %85 = cast(%84, dtype="float32") /* ty=Tensor[(13, 10, 5), float32] */;
  %86 = cast(%84, dtype="float64") /* ty=Tensor[(13, 10, 5), float64] */;
  %87 = atanh(%86) /* ty=Tensor[(13, 10, 5), float64] */;
  %88 = cast(%87, dtype="float32") /* ty=Tensor[(13, 10, 5), float32] */;
  %89 = asin(%88) /* ty=Tensor[(13, 10, 5), float32] */;
  %90 = cast(%87, dtype="uint8") /* ty=Tensor[(13, 10, 5), uint8] */;
  %91 = shape_of(%89, dtype="int32") /* ty=Tensor[(3), int32] */;
  %92 = cast(%89, dtype="uint8") /* ty=Tensor[(13, 10, 5), uint8] */;
  %93 = dyn.reshape(%90, %91, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %94 = cast(%var_6475, dtype="int16") /* ty=Tensor[(2464), int16] */;
  %95 = reshape(%94, newshape=[88, 28]) /* ty=Tensor[(88, 28), int16] */;
  %96 = @func_3837(%95) /* ty=(Tensor[(16, 11, 14), int16], Tensor[(88, 28), int16], Tensor[(15, 3, 8), float32]) */;
  %97 = atan(%85) /* ty=Tensor[(13, 10, 5), float32] */;
  %98 = maximum(%92, %93) /* ty=Tensor[(13, 10, 5), uint8] */;
  %99 = %96.0;
  (%97, %98, %99, %var_6475)
}

def @func_2833() -> Tensor[(13, 10, 5), float32] {
  %100 = @func_2669() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(13, 10, 5), float32], float32, Tensor[(650), float32]) */;
  %100.1
}

def @func_7279(%var_7266: Tensor[(6, 2, 3), float32]) -> (Tensor[(15, 3, 8), float64], Tensor[(6, 2, 3), int16]) {
  %101 = @func_6723() /* ty=(Tensor[(6, 2, 3), float32], Tensor[(650), float32]) */;
  %102 = %101.0;
  %103 = cast(%var_7266, dtype="int16") /* ty=Tensor[(6, 2, 3), int16] */;
  %104 = shape_of(%102, dtype="int32") /* ty=Tensor[(3), int32] */;
  %105 = cast(%102, dtype="int16") /* ty=Tensor[(6, 2, 3), int16] */;
  %106 = dyn.reshape(%103, %104, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %107 = @func_3640() /* ty=Tensor[(15, 3, 8), float64] */;
  %108 = minimum(%105, %106) /* ty=Tensor[(6, 2, 3), int16] */;
  (%107, %108)
}

def @func_4357(%var_4316: Tensor[(1, 2464), int16], %var_4321: Tensor[(15, 4), float32]) -> (Tensor[(15, 3, 8), float64], Tensor[(64), float64], Tensor[(650), float32], Tensor[(480), float32], Tensor[(1, 2464), int16], Tensor[(60), float32], Tensor[(15, 4), float32], Tensor[(11, 12, 11), float64], Tensor[(650), float32], Tensor[(16, 11, 14), bool]) {
  %109 = cast(%var_4321, dtype="float32") /* ty=Tensor[(15, 4), float32] */;
  %110 = reshape(%109, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %111 = @func_3229(%110) /* ty=(Tensor[(15, 3, 8), float64], Tensor[(12, 5), float32], Tensor[(60), float32]) */;
  %112 = cast(meta[relay.Constant][6] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
  %113 = cast(meta[relay.Constant][7] /* ty=Tensor[(650), float32] */, dtype="float32") /* ty=Tensor[(650), float32] */;
  %114 = cast(meta[relay.Constant][8] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %115 = reshape(%112, newshape=[64]) /* ty=Tensor[(64), float64] */;
  %116 = reshape(%113, newshape=[650]) /* ty=Tensor[(650), float32] */;
  %117 = reshape(%114, newshape=[480]) /* ty=Tensor[(480), float32] */;
  %118 = @func_3027(%115, %116, %117) /* ty=(Tensor[(15, 3, 8), float32], Tensor[(650), float32], Tensor[(64), float64], Tensor[(480), float32], Tensor[(2464), float64], Tensor[(11, 12, 11), float64], float32, Tensor[(2464), int16], Tensor[(650), float32], Tensor[(15, 3, 8), float32]) */;
  %119 = @func_4006() /* ty=(Tensor[(650), float32],) */;
  %120 = cast(meta[relay.Constant][6] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
  %121 = cast(meta[relay.Constant][6] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
  %122 = cast(meta[relay.Constant][7] /* ty=Tensor[(650), float32] */, dtype="float32") /* ty=Tensor[(650), float32] */;
  %123 = cast(meta[relay.Constant][8] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %124 = cast(%var_4316, dtype="int16") /* ty=Tensor[(1, 2464), int16] */;
  %125 = reshape(%120, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float64] */;
  %126 = reshape(%121, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float64] */;
  %127 = reshape(%122, newshape=[650]) /* ty=Tensor[(650), float32] */;
  %128 = reshape(%123, newshape=[8, 60]) /* ty=Tensor[(8, 60), float32] */;
  %129 = reshape(%124, newshape=[16, 11, 14]) /* ty=Tensor[(16, 11, 14), int16] */;
  %130 = @func_2061(%125, %126, %127, %128, %129) /* ty=(Tensor[(4, 4, 4), bool], float32, Tensor[(210), float32], Tensor[(120), float32], Tensor[(650), float32], Tensor[(11, 12, 11), float64], Tensor[(?, 650), bool], Tensor[(8, 60), float32], Tensor[(2464), int16], Tensor[(16, 11, 14), bool], Tensor[(15, 3, 8), float64]) */;
  %131 = %130.9;
  %132 = cast(%131, dtype="float64") /* ty=Tensor[(16, 11, 14), float64] */;
  %133 = sinh(%132) /* ty=Tensor[(16, 11, 14), float64] */;
  %134 = cast(%133, dtype="bool") /* ty=Tensor[(16, 11, 14), bool] */;
  %135 = shape_of(%131, dtype="int32") /* ty=Tensor[(3), int32] */;
  %136 = cast(%131, dtype="bool") /* ty=Tensor[(16, 11, 14), bool] */;
  %137 = dyn.reshape(%134, %135, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %138 = @func_1703() /* ty=Tensor[(15, 3, 8), float64] */;
  %139 = %111.2;
  %140 = %118.5;
  %141 = %119.0;
  %142 = greater_equal(%136, %137) /* ty=Tensor[(16, 11, 14), bool] */;
  (%138, meta[relay.Constant][6] /* ty=Tensor[(64), float64] */, meta[relay.Constant][7] /* ty=Tensor[(650), float32] */, meta[relay.Constant][8] /* ty=Tensor[(480), float32] */, %var_4316, %139, %var_4321, %140, %141, %142)
}

def @func_6940() -> (Tensor[(546), uint64],) {
  %143 = @func_6894() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(312), float32], Tensor[(546), uint64]) */;
  %144 = %143.2;
  (%144,)
}

def @func_1620(%var_1598: Tensor[(5, 7, 6), float32], %var_1605: Tensor[(6, 20), float32], %var_1611: Tensor[(650), float32]) -> (Tensor[(5, 7, 6), float32], Tensor[(11, 12, 11), bool], Tensor[(6, 20), float32], Tensor[(13, 10, 5), float32], float32, Tensor[(650), float32]) {
  %145 = cast(%var_1598, dtype="float32") /* ty=Tensor[(5, 7, 6), float32] */;
  %146 = cast(%var_1605, dtype="float32") /* ty=Tensor[(6, 20), float32] */;
  %147 = cast(%var_1605, dtype="float32") /* ty=Tensor[(6, 20), float32] */;
  %148 = reshape(%146, newshape=[15, 2, 4]) /* ty=Tensor[(15, 2, 4), float32] */;
  %149 = reshape(%147, newshape=[15, 2, 4]) /* ty=Tensor[(15, 2, 4), float32] */;
  %150 = @func_817(%148, %149) /* ty=(Tensor[(15, 2, 4), uint32], Tensor[(15, 2, 4), float32], Tensor[(12, 5), float32], Tensor[(3, 20), float32], Tensor[(15, 2, 4), float64], Tensor[(15, 2, 4), bool], Tensor[(11, 12, 11), bool], Tensor[(132), uint8], Tensor[(15, 3, 2), uint64], Tensor[(15, 6), uint64], Tensor[(12, 5), float32], Tensor[(11, 12, 11), bool], Tensor[(15, 3, 2), uint64], Tensor[(15, 2, 4), float64]) */;
  %151 = cast(0.024623f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %152 = cast(%var_1611, dtype="float32") /* ty=Tensor[(650), float32] */;
  %153 = reshape(%151, newshape=[]) /* ty=float32 */;
  %154 = reshape(%152, newshape=[13, 10, 5]) /* ty=Tensor[(13, 10, 5), float32] */;
  %155 = @func_897(%153, %154) /* ty=(Tensor[(13, 10, 5), float32], Tensor[(132), uint8], Tensor[(11, 12, 11), float64]) */;
  %156 = cosh(%145) /* ty=Tensor[(5, 7, 6), float32] */;
  %157 = %150.6;
  %158 = %155.0;
  (%156, %157, %var_1605, %158, 0.024623f /* ty=float32 */, %var_1611)
}

def @func_3446() -> (Tensor[(15, 3, 8), float64],) {
  %159 = @func_3367() /* ty=Tensor[(15, 3, 8), float64] */;
  (%159,)
}

def @func_5736() -> (Tensor[(15, 3, 8), bool], Tensor[(650), float64], Tensor[(15, 3, 8), float64], Tensor[(64), float64]) {
  %160 = @func_1703() /* ty=Tensor[(15, 3, 8), float64] */;
  %161 = cast(meta[relay.Constant][9] /* ty=Tensor[(15, 3, 8), float64] */, dtype="bool") /* ty=Tensor[(15, 3, 8), bool] */;
  %162 = shape_of(%160, dtype="int32") /* ty=Tensor[(3), int32] */;
  %163 = cast(%160, dtype="bool") /* ty=Tensor[(15, 3, 8), bool] */;
  %164 = dyn.reshape(%161, %162, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %165 = @func_4828() /* ty=(Tensor[(650), float32],) */;
  %166 = %165.0;
  %167 = cast(meta[relay.Constant][10] /* ty=Tensor[(650), float32] */, dtype="float64") /* ty=Tensor[(650), float64] */;
  %168 = shape_of(%166, dtype="int32") /* ty=Tensor[(1), int32] */;
  %169 = cast(%166, dtype="float64") /* ty=Tensor[(650), float64] */;
  %170 = dyn.reshape(%167, %168, newshape=[]) /* ty=Tensor[(?), float64] */;
  %171 = @func_3602() /* ty=(float32, Tensor[(2464), int8], Tensor[(64), float64], Tensor[(480), float32], Tensor[(360), float64], Tensor[(8450), float32]) */;
  %172 = greater_equal(%163, %164) /* ty=Tensor[(15, 3, 8), bool] */;
  %173 = floor_mod(%169, %170) /* ty=Tensor[(650), float64] */;
  %174 = @func_1649() /* ty=Tensor[(15, 3, 8), float64] */;
  %175 = %171.2;
  (%172, %173, %174, %175)
}

def @main(%var_8125: Tensor[(5, 16, 2), float32]) -> (Tensor[(5, 16, 2), uint16], Tensor[(5, 16, 2), float64]) {
  %176 = cast(%var_8125, dtype="float32") /* ty=Tensor[(5, 16, 2), float32] */;
  %177 = atanh(%176) /* ty=Tensor[(5, 16, 2), float32] */;
  %178 = cast(%177, dtype="uint16") /* ty=Tensor[(5, 16, 2), uint16] */;
  %179 = shape_of(%var_8125, dtype="int32") /* ty=Tensor[(3), int32] */;
  %180 = cast(%var_8125, dtype="uint16") /* ty=Tensor[(5, 16, 2), uint16] */;
  %181 = dyn.reshape(%178, %179, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %182 = cast(%var_8125, dtype="float64") /* ty=Tensor[(5, 16, 2), float64] */;
  %183 = minimum(%180, %181) /* ty=Tensor[(5, 16, 2), uint16] */;
  %184 = sin(%182) /* ty=Tensor[(5, 16, 2), float64] */;
  (%183, %184)
}

def @func_1389(%var_1382: Tensor[(5, 1, 9), float64]) -> Tensor[(5, 1, 9), float64] {
  %185 = cast(%var_1382, dtype="float64") /* ty=Tensor[(5, 1, 9), float64] */;
  cosh(%185) /* ty=Tensor[(5, 1, 9), float64] */
}

def @func_3922() -> (Tensor[(15, 3, 8), float32], Tensor[(15, 3, 8), float64]) {
  %186 = @func_1703() /* ty=Tensor[(15, 3, 8), float64] */;
  %187 = cast(%186, dtype="float32") /* ty=Tensor[(15, 3, 8), float32] */;
  %188 = asinh(%187) /* ty=Tensor[(15, 3, 8), float32] */;
  %189 = @func_2852() /* ty=Tensor[(15, 3, 8), float64] */;
  (%188, %189)
}

def @func_7301() -> (Tensor[(15, 3, 8), float32],) {
  %190 = @func_6684() /* ty=(Tensor[(6, 2, 3), float32], Tensor[(15, 3, 8), float32]) */;
  %191 = %190.1;
  (%191,)
}

def @func_7973() -> (Tensor[(15, 3, 8), float32], Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64]) {
  %192 = @func_6684() /* ty=(Tensor[(6, 2, 3), float32], Tensor[(15, 3, 8), float32]) */;
  %193 = @func_5480() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64]) */;
  %194 = %192.1;
  %195 = @func_3149() /* ty=Tensor[(15, 3, 8), float64] */;
  %196 = %193.1;
  (%194, %195, %196)
}

def @func_4179() -> (Tensor[(15, 3, 8), float64],) {
  %197 = @func_1703() /* ty=Tensor[(15, 3, 8), float64] */;
  (%197,)
}

def @func_648(%var_642: Tensor[(15, 3, 2), uint64]) -> Tensor[(15, 3, 2), uint64] {
  %198 = cast(meta[relay.Constant][11] /* ty=Tensor[(15, 3, 2), uint64] */, dtype="uint64") /* ty=Tensor[(15, 3, 2), uint64] */;
  %199 = shape_of(%var_642, dtype="int32") /* ty=Tensor[(3), int32] */;
  %200 = cast(%var_642, dtype="uint64") /* ty=Tensor[(15, 3, 2), uint64] */;
  %201 = dyn.reshape(%198, %199, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  add(%200, %201) /* ty=Tensor[(15, 3, 2), uint64] */
}

def @func_2794() -> (Tensor[(650), float32],) {
  %202 = @func_2669() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(13, 10, 5), float32], float32, Tensor[(650), float32]) */;
  %203 = %202.3;
  (%203,)
}

def @func_3367() -> Tensor[(15, 3, 8), float64] {
  @func_1649() /* ty=Tensor[(15, 3, 8), float64] */
}

def @func_2061(%var_2004: Tensor[(4, 4, 4), float64], %var_2005: Tensor[(4, 4, 4), float64], %var_2022: Tensor[(650), float32], %var_2033: Tensor[(8, 60), float32], %var_2052: Tensor[(16, 11, 14), int16]) -> (Tensor[(4, 4, 4), bool], float32, Tensor[(210), float32], Tensor[(120), float32], Tensor[(650), float32], Tensor[(11, 12, 11), float64], Tensor[(?, 650), bool], Tensor[(8, 60), float32], Tensor[(2464), int16], Tensor[(16, 11, 14), bool], Tensor[(15, 3, 8), float64]) {
  %204 = cast(%var_2005, dtype="bool") /* ty=Tensor[(4, 4, 4), bool] */;
  %205 = shape_of(%var_2004, dtype="int32") /* ty=Tensor[(3), int32] */;
  %206 = cast(%var_2004, dtype="bool") /* ty=Tensor[(4, 4, 4), bool] */;
  %207 = dyn.reshape(%204, %205, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %208 = cast(meta[relay.Constant][12] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %209 = cast(meta[relay.Constant][13] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %210 = cast(%var_2022, dtype="float32") /* ty=Tensor[(650), float32] */;
  %211 = reshape(%208, newshape=[5, 7, 6]) /* ty=Tensor[(5, 7, 6), float32] */;
  %212 = reshape(%209, newshape=[6, 20]) /* ty=Tensor[(6, 20), float32] */;
  %213 = reshape(%210, newshape=[650]) /* ty=Tensor[(650), float32] */;
  %214 = @func_1620(%211, %212, %213) /* ty=(Tensor[(5, 7, 6), float32], Tensor[(11, 12, 11), bool], Tensor[(6, 20), float32], Tensor[(13, 10, 5), float32], float32, Tensor[(650), float32]) */;
  %215 = %214.4;
  %216 = cast(%215, dtype="float32") /* ty=float32 */;
  %217 = cast(%var_2022, dtype="float32") /* ty=Tensor[(650), float32] */;
  %218 = reshape(%216, newshape=[]) /* ty=float32 */;
  %219 = reshape(%217, newshape=[13, 10, 5]) /* ty=Tensor[(13, 10, 5), float32] */;
  %220 = @func_897(%218, %219) /* ty=(Tensor[(13, 10, 5), float32], Tensor[(132), uint8], Tensor[(11, 12, 11), float64]) */;
  %221 = cast(%var_2033, dtype="float32") /* ty=Tensor[(8, 60), float32] */;
  %222 = reshape(%221, newshape=[16, 5, 6]) /* ty=Tensor[(16, 5, 6), float32] */;
  %223 = @func_1022(%222) /* ty=(Tensor[(16, 5, 6), float32], float32, Tensor[(?, 650), bool]) */;
  %224 = cast(meta[relay.Constant][14] /* ty=Tensor[(2464), int16] */, dtype="int16") /* ty=Tensor[(2464), int16] */;
  %225 = reshape(%224, newshape=[16, 11, 14]) /* ty=Tensor[(16, 11, 14), int16] */;
  %226 = @func_1576(%225) /* ty=(Tensor[(16, 11, 14), int16], Tensor[(16, 11, 14), uint32], Tensor[(15, 3, 2), uint64], Tensor[(90), uint64]) */;
  %227 = %226.0;
  %228 = cast(%var_2052, dtype="bool") /* ty=Tensor[(16, 11, 14), bool] */;
  %229 = shape_of(%227, dtype="int32") /* ty=Tensor[(3), int32] */;
  %230 = cast(%227, dtype="bool") /* ty=Tensor[(16, 11, 14), bool] */;
  %231 = dyn.reshape(%228, %229, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %232 = greater(%206, %207) /* ty=Tensor[(4, 4, 4), bool] */;
  %233 = %220.2;
  %234 = %223.2;
  %235 = less_equal(%230, %231) /* ty=Tensor[(16, 11, 14), bool] */;
  %236 = @func_1703() /* ty=Tensor[(15, 3, 8), float64] */;
  (%232, %215, meta[relay.Constant][12] /* ty=Tensor[(210), float32] */, meta[relay.Constant][13] /* ty=Tensor[(120), float32] */, %var_2022, %233, %234, %var_2033, meta[relay.Constant][14] /* ty=Tensor[(2464), int16] */, %235, %236)
}

def @func_4400() -> (Tensor[(15, 3, 8), float64], Tensor[(13, 10, 5), float32]) {
  %237 = @func_3446() /* ty=(Tensor[(15, 3, 8), float64],) */;
  %238 = %237.0;
  %239 = @func_2833() /* ty=Tensor[(13, 10, 5), float32] */;
  (%238, %239)
}

def @func_6505() -> Tensor[(15, 3, 8), float64] {
  %240 = @func_4179() /* ty=(Tensor[(15, 3, 8), float64],) */;
  %240.0
}

def @func_7128() -> (Tensor[(15, 3, 8), float64],) {
  %241 = @func_2106() /* ty=Tensor[(15, 3, 8), float64] */;
  (%241,)
}

def @func_5170() -> (Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64]) {
  %242 = @func_1703() /* ty=Tensor[(15, 3, 8), float64] */;
  %243 = @func_1649() /* ty=Tensor[(15, 3, 8), float64] */;
  (%242, %243)
}

def @func_5248() -> Tensor[(15, 3, 8), float64] {
  @func_3274() /* ty=Tensor[(15, 3, 8), float64] */
}

def @func_3980() -> (Tensor[(13, 10, 5), bool], Tensor[(15, 3, 8), float64]) {
  %244 = @func_2833() /* ty=Tensor[(13, 10, 5), float32] */;
  %245 = cast(%244, dtype="float32") /* ty=Tensor[(13, 10, 5), float32] */;
  %246 = log10(%245) /* ty=Tensor[(13, 10, 5), float32] */;
  %247 = cast(%246, dtype="bool") /* ty=Tensor[(13, 10, 5), bool] */;
  %248 = shape_of(%244, dtype="int32") /* ty=Tensor[(3), int32] */;
  %249 = cast(%244, dtype="bool") /* ty=Tensor[(13, 10, 5), bool] */;
  %250 = dyn.reshape(%247, %248, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %251 = equal(%249, %250) /* ty=Tensor[(13, 10, 5), bool] */;
  %252 = @func_2127() /* ty=Tensor[(15, 3, 8), float64] */;
  (%251, %252)
}

def @func_6199(%var_6177: Tensor[(3, 44), uint8], %var_6186: Tensor[(120), float32], %var_6187: Tensor[(650), float32]) -> (Tensor[(11, 12, 11), bool], Tensor[(6, 20), float32], Tensor[(35, 6), float32], Tensor[(120), float32], Tensor[(650), float32], Tensor[(3, 44), bool]) {
  %253 = cast(%var_6177, dtype="uint8") /* ty=Tensor[(3, 44), uint8] */;
  %254 = reshape(%253, newshape=[11, 12, 1]) /* ty=Tensor[(11, 12, 1), uint8] */;
  %255 = @func_564(%254) /* ty=(Tensor[(11, 12, 11), bool],) */;
  %256 = cast(meta[relay.Constant][15] /* ty=Tensor[(35, 6), float32] */, dtype="float32") /* ty=Tensor[(35, 6), float32] */;
  %257 = cast(%var_6186, dtype="float32") /* ty=Tensor[(120), float32] */;
  %258 = cast(%var_6187, dtype="float32") /* ty=Tensor[(650), float32] */;
  %259 = reshape(%256, newshape=[5, 7, 6]) /* ty=Tensor[(5, 7, 6), float32] */;
  %260 = reshape(%257, newshape=[6, 20]) /* ty=Tensor[(6, 20), float32] */;
  %261 = reshape(%258, newshape=[650]) /* ty=Tensor[(650), float32] */;
  %262 = @func_1620(%259, %260, %261) /* ty=(Tensor[(5, 7, 6), float32], Tensor[(11, 12, 11), bool], Tensor[(6, 20), float32], Tensor[(13, 10, 5), float32], float32, Tensor[(650), float32]) */;
  %263 = @func_3410() /* ty=(float32,) */;
  %264 = %263.0;
  %265 = cast(%264, dtype="bool") /* ty=bool */;
  %266 = cast(%var_6177, dtype="bool") /* ty=Tensor[(3, 44), bool] */;
  %267 = %255.0;
  %268 = %262.2;
  %269 = less(%265, %266) /* ty=Tensor[(3, 44), bool] */;
  (%267, %268, meta[relay.Constant][15] /* ty=Tensor[(35, 6), float32] */, %var_6186, %var_6187, %269)
}

def @func_5394(%var_5381: Tensor[(13, 10, 5), float32], %var_5390: Tensor[(64), float64], %var_5391: Tensor[(480), float32], %var_5392: Tensor[(2464), int16]) -> (Tensor[(13, 10, 5), int16], Tensor[(16, 11, 14), bool], Tensor[(64), float64], Tensor[(480), float32], Tensor[(2464), int16]) {
  %270 = @func_2833() /* ty=Tensor[(13, 10, 5), float32] */;
  %271 = cast(%var_5381, dtype="int16") /* ty=Tensor[(13, 10, 5), int16] */;
  %272 = shape_of(%270, dtype="int32") /* ty=Tensor[(3), int32] */;
  %273 = cast(%270, dtype="int16") /* ty=Tensor[(13, 10, 5), int16] */;
  %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %275 = cast(%var_5390, dtype="float64") /* ty=Tensor[(64), float64] */;
  %276 = cast(%var_5390, dtype="float64") /* ty=Tensor[(64), float64] */;
  %277 = cast(%var_5381, dtype="float32") /* ty=Tensor[(13, 10, 5), float32] */;
  %278 = cast(%var_5391, dtype="float32") /* ty=Tensor[(480), float32] */;
  %279 = cast(%var_5392, dtype="int16") /* ty=Tensor[(2464), int16] */;
  %280 = reshape(%275, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float64] */;
  %281 = reshape(%276, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float64] */;
  %282 = reshape(%277, newshape=[650]) /* ty=Tensor[(650), float32] */;
  %283 = reshape(%278, newshape=[8, 60]) /* ty=Tensor[(8, 60), float32] */;
  %284 = reshape(%279, newshape=[16, 11, 14]) /* ty=Tensor[(16, 11, 14), int16] */;
  %285 = @func_2061(%280, %281, %282, %283, %284) /* ty=(Tensor[(4, 4, 4), bool], float32, Tensor[(210), float32], Tensor[(120), float32], Tensor[(650), float32], Tensor[(11, 12, 11), float64], Tensor[(?, 650), bool], Tensor[(8, 60), float32], Tensor[(2464), int16], Tensor[(16, 11, 14), bool], Tensor[(15, 3, 8), float64]) */;
  %286 = add(%273, %274) /* ty=Tensor[(13, 10, 5), int16] */;
  %287 = %285.9;
  (%286, %287, %var_5390, %var_5391, %var_5392)
}

def @func_7223(%var_7215: Tensor[(3, 8, 15), bool]) -> (Tensor[(3, 8, 15), bool],) {
  %288 = cast(meta[relay.Constant][16] /* ty=Tensor[(3, 8, 15), bool] */, dtype="bool") /* ty=Tensor[(3, 8, 15), bool] */;
  %289 = shape_of(%var_7215, dtype="int32") /* ty=Tensor[(3), int32] */;
  %290 = cast(%var_7215, dtype="bool") /* ty=Tensor[(3, 8, 15), bool] */;
  %291 = dyn.reshape(%288, %289, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %292 = logical_and(%290, %291) /* ty=Tensor[(3, 8, 15), bool] */;
  (%292,)
}

def @func_3027(%var_2969: Tensor[(64), float64], %var_2970: Tensor[(650), float32], %var_2971: Tensor[(480), float32]) -> (Tensor[(15, 3, 8), float32], Tensor[(650), float32], Tensor[(64), float64], Tensor[(480), float32], Tensor[(2464), float64], Tensor[(11, 12, 11), float64], float32, Tensor[(2464), int16], Tensor[(650), float32], Tensor[(15, 3, 8), float32]) {
  %293 = @func_2127() /* ty=Tensor[(15, 3, 8), float64] */;
  %294 = cast(%293, dtype="float32") /* ty=Tensor[(15, 3, 8), float32] */;
  %295 = cast(%var_2969, dtype="float64") /* ty=Tensor[(64), float64] */;
  %296 = cast(%var_2969, dtype="float64") /* ty=Tensor[(64), float64] */;
  %297 = cast(%var_2970, dtype="float32") /* ty=Tensor[(650), float32] */;
  %298 = cast(%var_2971, dtype="float32") /* ty=Tensor[(480), float32] */;
  %299 = cast(meta[relay.Constant][17] /* ty=Tensor[(2464), int16] */, dtype="int16") /* ty=Tensor[(2464), int16] */;
  %300 = reshape(%295, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float64] */;
  %301 = reshape(%296, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float64] */;
  %302 = reshape(%297, newshape=[650]) /* ty=Tensor[(650), float32] */;
  %303 = reshape(%298, newshape=[8, 60]) /* ty=Tensor[(8, 60), float32] */;
  %304 = reshape(%299, newshape=[16, 11, 14]) /* ty=Tensor[(16, 11, 14), int16] */;
  %305 = @func_2061(%300, %301, %302, %303, %304) /* ty=(Tensor[(4, 4, 4), bool], float32, Tensor[(210), float32], Tensor[(120), float32], Tensor[(650), float32], Tensor[(11, 12, 11), float64], Tensor[(?, 650), bool], Tensor[(8, 60), float32], Tensor[(2464), int16], Tensor[(16, 11, 14), bool], Tensor[(15, 3, 8), float64]) */;
  %306 = cast(meta[relay.Constant][17] /* ty=Tensor[(2464), int16] */, dtype="float32") /* ty=Tensor[(2464), float32] */;
  %307 = cos(%306) /* ty=Tensor[(2464), float32] */;
  %308 = cast(meta[relay.Constant][17] /* ty=Tensor[(2464), int16] */, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %309 = shape_of(%307, dtype="int32") /* ty=Tensor[(1), int32] */;
  %310 = cast(%307, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %311 = dyn.reshape(%308, %309, newshape=[]) /* ty=Tensor[(?), float64] */;
  %312 = cast(%var_2969, dtype="float64") /* ty=Tensor[(64), float64] */;
  %313 = cast(%var_2970, dtype="float32") /* ty=Tensor[(650), float32] */;
  %314 = cast(%var_2971, dtype="float32") /* ty=Tensor[(480), float32] */;
  %315 = cast(-8.71035f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %316 = reshape(%312, newshape=[64]) /* ty=Tensor[(64), float64] */;
  %317 = reshape(%313, newshape=[325, 2]) /* ty=Tensor[(325, 2), float32] */;
  %318 = reshape(%314, newshape=[480]) /* ty=Tensor[(480), float32] */;
  %319 = reshape(%315, newshape=[]) /* ty=float32 */;
  %320 = @func_2407(%316, %317, %318, %319) /* ty=(Tensor[(15, 3, 8), float64], Tensor[(5, 1, 9), float64], Tensor[(45), float64], Tensor[(8, 60), float32], Tensor[(64), float64], Tensor[(325, 2), float32], Tensor[(480), float32], Tensor[(2464), int8], Tensor[(11, 12, 11), float64], float32) */;
  %321 = cast(%var_2969, dtype="float64") /* ty=Tensor[(64), float64] */;
  %322 = cast(%var_2969, dtype="float64") /* ty=Tensor[(64), float64] */;
  %323 = cast(%var_2970, dtype="float32") /* ty=Tensor[(650), float32] */;
  %324 = cast(%var_2971, dtype="float32") /* ty=Tensor[(480), float32] */;
  %325 = cast(meta[relay.Constant][17] /* ty=Tensor[(2464), int16] */, dtype="int16") /* ty=Tensor[(2464), int16] */;
  %326 = reshape(%321, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float64] */;
  %327 = reshape(%322, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float64] */;
  %328 = reshape(%323, newshape=[650]) /* ty=Tensor[(650), float32] */;
  %329 = reshape(%324, newshape=[8, 60]) /* ty=Tensor[(8, 60), float32] */;
  %330 = reshape(%325, newshape=[16, 11, 14]) /* ty=Tensor[(16, 11, 14), int16] */;
  %331 = @func_2061(%326, %327, %328, %329, %330) /* ty=(Tensor[(4, 4, 4), bool], float32, Tensor[(210), float32], Tensor[(120), float32], Tensor[(650), float32], Tensor[(11, 12, 11), float64], Tensor[(?, 650), bool], Tensor[(8, 60), float32], Tensor[(2464), int16], Tensor[(16, 11, 14), bool], Tensor[(15, 3, 8), float64]) */;
  %332 = cast(meta[relay.Constant][18] /* ty=Tensor[(650), float32] */, dtype="float32") /* ty=Tensor[(650), float32] */;
  %333 = shape_of(%var_2970, dtype="int32") /* ty=Tensor[(1), int32] */;
  %334 = cast(%var_2970, dtype="float32") /* ty=Tensor[(650), float32] */;
  %335 = dyn.reshape(%332, %333, newshape=[]) /* ty=Tensor[(?), float32] */;
  %336 = @func_2565() /* ty=(Tensor[(15, 3, 8), float32],) */;
  %337 = acos(%294) /* ty=Tensor[(15, 3, 8), float32] */;
  %338 = %305.4;
  %339 = floor_mod(%310, %311) /* ty=Tensor[(2464), float64] */;
  %340 = %320.8;
  %341 = %331.8;
  %342 = power(%334, %335) /* ty=Tensor[(650), float32] */;
  %343 = %336.0;
  (%337, %338, %var_2969, %var_2971, %339, %340, -8.71035f /* ty=float32 */, %341, %342, %343)
}

def @func_6723() -> (Tensor[(6, 2, 3), float32], Tensor[(650), float32]) {
  %344 = @func_5374() /* ty=(Tensor[(6, 2, 3), float32], Tensor[(15, 3, 8), float64]) */;
  %345 = @func_4006() /* ty=(Tensor[(650), float32],) */;
  %346 = %344.0;
  %347 = %345.0;
  (%346, %347)
}

def @func_3076() -> (Tensor[(15, 3, 8), float64],) {
  %348 = @func_2852() /* ty=Tensor[(15, 3, 8), float64] */;
  (%348,)
}

def @func_3229(%var_3224: Tensor[(60), float32]) -> (Tensor[(15, 3, 8), float64], Tensor[(12, 5), float32], Tensor[(60), float32]) {
  %349 = cast(%var_3224, dtype="float32") /* ty=Tensor[(60), float32] */;
  %350 = reshape(%349, newshape=[12, 5]) /* ty=Tensor[(12, 5), float32] */;
  %351 = @func_3149() /* ty=Tensor[(15, 3, 8), float64] */;
  %352 = @func_100(%350) /* ty=Tensor[(12, 5), float32] */;
  (%351, %352, %var_3224)
}

def @func_6158() -> (Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float32]) {
  %353 = @func_3922() /* ty=(Tensor[(15, 3, 8), float32], Tensor[(15, 3, 8), float64]) */;
  %354 = @func_3640() /* ty=Tensor[(15, 3, 8), float64] */;
  %355 = %353.0;
  (%354, %355)
}

def @func_4545(%var_4533: Tensor[(15, 3, 8), float64]) -> (Tensor[(15, 3, 8), bool], Tensor[(15, 3, 8), float32], Tensor[(15, 3, 8), float64]) {
  %356 = @func_4081() /* ty=Tensor[(15, 3, 8), float64] */;
  %357 = cast(%var_4533, dtype="bool") /* ty=Tensor[(15, 3, 8), bool] */;
  %358 = shape_of(%356, dtype="int32") /* ty=Tensor[(3), int32] */;
  %359 = cast(%356, dtype="bool") /* ty=Tensor[(15, 3, 8), bool] */;
  %360 = dyn.reshape(%357, %358, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %361 = @func_2565() /* ty=(Tensor[(15, 3, 8), float32],) */;
  %362 = logical_or(%359, %360) /* ty=Tensor[(15, 3, 8), bool] */;
  %363 = %361.0;
  %364 = @func_3149() /* ty=Tensor[(15, 3, 8), float64] */;
  (%362, %363, %364)
}

def @func_897(%var_872: float32, %var_873: Tensor[(13, 10, 5), float32]) -> (Tensor[(13, 10, 5), float32], Tensor[(132), uint8], Tensor[(11, 12, 11), float64]) {
  %365 = cast(%var_872, dtype="float32") /* ty=float32 */;
  %366 = cast(%var_873, dtype="float32") /* ty=Tensor[(13, 10, 5), float32] */;
  %367 = cast(meta[relay.Constant][19] /* ty=Tensor[(132), uint8] */, dtype="uint8") /* ty=Tensor[(132), uint8] */;
  %368 = reshape(%367, newshape=[11, 12, 1]) /* ty=Tensor[(11, 12, 1), uint8] */;
  %369 = @func_564(%368) /* ty=(Tensor[(11, 12, 11), bool],) */;
  %370 = %369.0;
  %371 = cast(%370, dtype="float64") /* ty=Tensor[(11, 12, 11), float64] */;
  %372 = cast(%var_872, dtype="float64") /* ty=float64 */;
  %373 = mod(%365, %366) /* ty=Tensor[(13, 10, 5), float32] */;
  %374 = floor_mod(%371, %372) /* ty=Tensor[(11, 12, 11), float64] */;
  (%373, meta[relay.Constant][19] /* ty=Tensor[(132), uint8] */, %374)
}

def @func_4884(%var_4880: Tensor[(14, 3, 16), int32]) -> Tensor[(14, 3, 16), int32] {
  %375 = cast(%var_4880, dtype="int32") /* ty=Tensor[(14, 3, 16), int32] */;
  %376 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(14, 3, 16), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %377 = cast(meta[relay.Constant][20] /* ty=Tensor[(14, 3, 16), int32] */, dtype="int32") /* ty=Tensor[(14, 3, 16), int32] */;
  %378 = dyn.reshape(%375, %376, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  add(%377, %378) /* ty=Tensor[(14, 3, 16), int32] */
}

def @func_3274() -> Tensor[(15, 3, 8), float64] {
  @func_2106() /* ty=Tensor[(15, 3, 8), float64] */
}

def @func_4983(%var_4974: Tensor[(15, 3, 8), float64]) -> (Tensor[(15, 3, 8), int16],) {
  %379 = @func_3640() /* ty=Tensor[(15, 3, 8), float64] */;
  %380 = cast(%var_4974, dtype="int16") /* ty=Tensor[(15, 3, 8), int16] */;
  %381 = shape_of(%379, dtype="int32") /* ty=Tensor[(3), int32] */;
  %382 = cast(%379, dtype="int16") /* ty=Tensor[(15, 3, 8), int16] */;
  %383 = dyn.reshape(%380, %381, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %384 = bitwise_xor(%382, %383) /* ty=Tensor[(15, 3, 8), int16] */;
  (%384,)
}

def @func_6567() -> (Tensor[(15, 3, 8), float64], Tensor[(8450), float32]) {
  %385 = @func_5267() /* ty=(Tensor[(15, 3, 8), float64],) */;
  %386 = @func_3602() /* ty=(float32, Tensor[(2464), int8], Tensor[(64), float64], Tensor[(480), float32], Tensor[(360), float64], Tensor[(8450), float32]) */;
  %387 = %385.0;
  %388 = %386.5;
  (%387, %388)
}

def @func_5010(%var_4989: Tensor[(9, 1, 13), float64], %var_5005: Tensor[(9, 13, 13), float64]) -> (Tensor[(9, 1, 13), float64], Tensor[(650), float32], Tensor[(9, 13, 13), bool]) {
  %389 = cast(%var_4989, dtype="float64") /* ty=Tensor[(9, 1, 13), float64] */;
  %390 = @func_2794() /* ty=(Tensor[(650), float32],) */;
  %391 = cast(%var_4989, dtype="bool") /* ty=Tensor[(9, 1, 13), bool] */;
  %392 = cast(%var_5005, dtype="bool") /* ty=Tensor[(9, 13, 13), bool] */;
  %393 = cosh(%389) /* ty=Tensor[(9, 1, 13), float64] */;
  %394 = %390.0;
  %395 = logical_or(%391, %392) /* ty=Tensor[(9, 13, 13), bool] */;
  (%393, %394, %395)
}

def @func_7028() -> Tensor[(650), float32] {
  %396 = @func_4006() /* ty=(Tensor[(650), float32],) */;
  %396.0
}

def @func_7339() -> (Tensor[(2464), int8], Tensor[(15, 3, 8), float32], Tensor[(15, 3, 8), float64]) {
  %397 = @func_5514() /* ty=(Tensor[(2464), int8],) */;
  %398 = @func_7240() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float32], Tensor[(15, 3, 8), float32]) */;
  %399 = @func_2852() /* ty=Tensor[(15, 3, 8), float64] */;
  %400 = cast(%399, dtype="float64") /* ty=Tensor[(15, 3, 8), float64] */;
  %401 = %397.0;
  %402 = %398.1;
  %403 = log10(%400) /* ty=Tensor[(15, 3, 8), float64] */;
  (%401, %402, %403)
}

def @func_6112(%var_6070: Tensor[(15, 3, 8), float64], %var_6101: Tensor[(64, 1), float64]) -> (Tensor[(15, 3, 8), int32], Tensor[(64, 1), float64], Tensor[(64, 1), float64], Tensor[(480), float32], Tensor[(8450), float32], Tensor[(15, 3, 8), float64], Tensor[(12, 5), float32], Tensor[(60), float32]) {
  %404 = @func_5665() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64]) */;
  %405 = %404.2;
  %406 = cast(%var_6070, dtype="bool") /* ty=Tensor[(15, 3, 8), bool] */;
  %407 = shape_of(%405, dtype="int32") /* ty=Tensor[(3), int32] */;
  %408 = cast(%405, dtype="bool") /* ty=Tensor[(15, 3, 8), bool] */;
  %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %410 = equal(%408, %409) /* ty=Tensor[(15, 3, 8), bool] */;
  %411 = cast(%410, dtype="uint64") /* ty=Tensor[(15, 3, 8), uint64] */;
  %412 = shape_of(%var_6070, dtype="int32") /* ty=Tensor[(3), int32] */;
  %413 = cast(%var_6070, dtype="uint64") /* ty=Tensor[(15, 3, 8), uint64] */;
  %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %415 = subtract(%413, %414) /* ty=Tensor[(15, 3, 8), uint64] */;
  %416 = cast(%var_6070, dtype="int32") /* ty=Tensor[(15, 3, 8), int32] */;
  %417 = shape_of(%415, dtype="int32") /* ty=Tensor[(3), int32] */;
  %418 = cast(%415, dtype="int32") /* ty=Tensor[(15, 3, 8), int32] */;
  %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %420 = cast(%var_6101, dtype="float64") /* ty=Tensor[(64, 1), float64] */;
  %421 = cast(meta[relay.Constant][21] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %422 = cast(%415, dtype="float64") /* ty=Tensor[(15, 3, 8), float64] */;
  %423 = cast(meta[relay.Constant][22] /* ty=Tensor[(8450), float32] */, dtype="float32") /* ty=Tensor[(8450), float32] */;
  %424 = reshape(%420, newshape=[64, 1]) /* ty=Tensor[(64, 1), float64] */;
  %425 = reshape(%421, newshape=[480]) /* ty=Tensor[(480), float32] */;
  %426 = reshape(%422, newshape=[15, 3, 8]) /* ty=Tensor[(15, 3, 8), float64] */;
  %427 = reshape(%423, newshape=[650, 13]) /* ty=Tensor[(650, 13), float32] */;
  %428 = @func_2767(%424, %425, %426, %427) /* ty=(Tensor[(2464), int8], Tensor[(64, 1), float64], Tensor[(480), float32], float32, Tensor[(15, 3, 8), uint8], Tensor[(15, 3, 8), int16], Tensor[(8, 60), float32], Tensor[(15, 3, 8), float64], Tensor[(650, 13), bool]) */;
  %429 = cast(meta[relay.Constant][23] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %430 = reshape(%429, newshape=[12, 5]) /* ty=Tensor[(12, 5), float32] */;
  %431 = multiply(%418, %419) /* ty=Tensor[(15, 3, 8), int32] */;
  %432 = %428.1;
  %433 = @func_3635() /* ty=Tensor[(15, 3, 8), float64] */;
  %434 = @func_100(%430) /* ty=Tensor[(12, 5), float32] */;
  (%431, %432, %var_6101, meta[relay.Constant][21] /* ty=Tensor[(480), float32] */, meta[relay.Constant][22] /* ty=Tensor[(8450), float32] */, %433, %434, meta[relay.Constant][23] /* ty=Tensor[(60), float32] */)
}

def @func_5211() -> (Tensor[(6, 2, 3), float32],) {
  %435 = cast(meta[relay.Constant][24] /* ty=Tensor[(6, 2, 3), float32] */, dtype="float32") /* ty=Tensor[(6, 2, 3), float32] */;
  %436 = log(%435) /* ty=Tensor[(6, 2, 3), float32] */;
  (%436,)
}

def @func_7839() -> Tensor[(15, 3, 8), float64] {
  %437 = @func_3446() /* ty=(Tensor[(15, 3, 8), float64],) */;
  %437.0
}

def @func_3635() -> Tensor[(15, 3, 8), float64] {
  %438 = @func_2548() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64]) */;
  %438.0
}

def @func_6980() -> (Tensor[(6, 2, 3), float32],) {
  %439 = @func_5991() /* ty=(Tensor[(6, 2, 3), float32],) */;
  %440 = %439.0;
  (%440,)
}

def @func_6348(%var_6336: Tensor[(10, 11, 4), float64]) -> (Tensor[(10, 11, 4), float64], Tensor[(10, 11, 4), uint64]) {
  %441 = cast(meta[relay.Constant][25] /* ty=Tensor[(10, 11, 4), float64] */, dtype="float64") /* ty=Tensor[(10, 11, 4), float64] */;
  %442 = shape_of(%var_6336, dtype="int32") /* ty=Tensor[(3), int32] */;
  %443 = cast(%var_6336, dtype="float64") /* ty=Tensor[(10, 11, 4), float64] */;
  %444 = dyn.reshape(%441, %442, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %445 = cast(%var_6336, dtype="uint64") /* ty=Tensor[(10, 11, 4), uint64] */;
  %446 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(10, 11, 4), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %447 = cast(meta[relay.Constant][25] /* ty=Tensor[(10, 11, 4), float64] */, dtype="uint64") /* ty=Tensor[(10, 11, 4), uint64] */;
  %448 = dyn.reshape(%445, %446, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %449 = power(%443, %444) /* ty=Tensor[(10, 11, 4), float64] */;
  %450 = right_shift(%447, %448) /* ty=Tensor[(10, 11, 4), uint64] */;
  (%449, %450)
}

def @func_6789(%var_6764: Tensor[(650), float32]) -> (Tensor[(15, 3, 8), float64], Tensor[(120), float32], Tensor[(650), int8], Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64]) {
  %451 = @func_5665() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64]) */;
  %452 = cast(meta[relay.Constant][26] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %453 = reshape(%452, newshape=[120]) /* ty=Tensor[(120), float32] */;
  %454 = @func_2527(%453) /* ty=(Tensor[(11, 12, 11), bool], Tensor[(210), float32], Tensor[(120), float32], Tensor[(650), float32], Tensor[(15, 3, 8), bool], Tensor[(15, 3, 8), float64]) */;
  %455 = %454.3;
  %456 = cast(%var_6764, dtype="int8") /* ty=Tensor[(650), int8] */;
  %457 = shape_of(%455, dtype="int32") /* ty=Tensor[(1), int32] */;
  %458 = cast(%455, dtype="int8") /* ty=Tensor[(650), int8] */;
  %459 = dyn.reshape(%456, %457, newshape=[]) /* ty=Tensor[(?), int8] */;
  %460 = %451.0;
  %461 = logical_xor(%458, %459) /* ty=Tensor[(650), int8] */;
  %462 = @func_3274() /* ty=Tensor[(15, 3, 8), float64] */;
  %463 = @func_1649() /* ty=Tensor[(15, 3, 8), float64] */;
  (%460, meta[relay.Constant][26] /* ty=Tensor[(120), float32] */, %461, %462, %463)
}

def @func_4155() -> (Tensor[(15, 3, 8), float32],) {
  %464 = @func_3403() /* ty=Tensor[(15, 3, 8), float32] */;
  (%464,)
}

def @func_4479() -> (Tensor[(15, 3, 8), float64], Tensor[(13, 10, 5), float32]) {
  %465 = @func_2942() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64]) */;
  %466 = @func_3308() /* ty=(Tensor[(13, 10, 5), float32], Tensor[(13, 10, 5), float32], float32) */;
  %467 = %465.1;
  %468 = %466.0;
  (%467, %468)
}

def @func_7796(%var_7784: Tensor[(180, 4), int64]) -> (Tensor[(15, 3, 8), float32], Tensor[(15, 3, 8), float64], Tensor[(5, 12, 12), float64], Tensor[(180, 4), int64], Tensor[(15, 3, 8), float64]) {
  %469 = @func_6684() /* ty=(Tensor[(6, 2, 3), float32], Tensor[(15, 3, 8), float32]) */;
  %470 = @func_5480() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64]) */;
  %471 = cast(%var_7784, dtype="int64") /* ty=Tensor[(180, 4), int64] */;
  %472 = reshape(%471, newshape=[5, 12, 12]) /* ty=Tensor[(5, 12, 12), int64] */;
  %473 = @func_2603(%472) /* ty=(Tensor[(5, 12, 12), float64],) */;
  %474 = %469.1;
  %475 = %470.1;
  %476 = %473.0;
  %477 = @func_1649() /* ty=Tensor[(15, 3, 8), float64] */;
  (%474, %475, %476, %var_7784, %477)
}

def @func_2548() -> (Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64]) {
  %478 = @func_1684() /* ty=Tensor[(15, 3, 8), float64] */;
  %479 = @func_2106() /* ty=Tensor[(15, 3, 8), float64] */;
  (%478, %479)
}

def @func_2767(%var_2729: Tensor[(64, 1), float64], %var_2731: Tensor[(480), float32], %var_2739: Tensor[(15, 3, 8), float64], %var_2759: Tensor[(650, 13), float32]) -> (Tensor[(2464), int8], Tensor[(64, 1), float64], Tensor[(480), float32], float32, Tensor[(15, 3, 8), uint8], Tensor[(15, 3, 8), int16], Tensor[(8, 60), float32], Tensor[(15, 3, 8), float64], Tensor[(650, 13), bool]) {
  %480 = cast(%var_2729, dtype="float64") /* ty=Tensor[(64, 1), float64] */;
  %481 = cast(meta[relay.Constant][27] /* ty=Tensor[(650, 1), float32] */, dtype="float32") /* ty=Tensor[(650, 1), float32] */;
  %482 = cast(%var_2731, dtype="float32") /* ty=Tensor[(480), float32] */;
  %483 = cast(8.70733f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %484 = reshape(%480, newshape=[64]) /* ty=Tensor[(64), float64] */;
  %485 = reshape(%481, newshape=[325, 2]) /* ty=Tensor[(325, 2), float32] */;
  %486 = reshape(%482, newshape=[480]) /* ty=Tensor[(480), float32] */;
  %487 = reshape(%483, newshape=[]) /* ty=float32 */;
  %488 = @func_2407(%484, %485, %486, %487) /* ty=(Tensor[(15, 3, 8), float64], Tensor[(5, 1, 9), float64], Tensor[(45), float64], Tensor[(8, 60), float32], Tensor[(64), float64], Tensor[(325, 2), float32], Tensor[(480), float32], Tensor[(2464), int8], Tensor[(11, 12, 11), float64], float32) */;
  %489 = @func_1684() /* ty=Tensor[(15, 3, 8), float64] */;
  %490 = cast(%var_2739, dtype="uint8") /* ty=Tensor[(15, 3, 8), uint8] */;
  %491 = shape_of(%489, dtype="int32") /* ty=Tensor[(3), int32] */;
  %492 = cast(%489, dtype="uint8") /* ty=Tensor[(15, 3, 8), uint8] */;
  %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %494 = @func_2160() /* ty=(Tensor[(15, 3, 8), float64],) */;
  %495 = %494.0;
  %496 = cast(%495, dtype="int16") /* ty=Tensor[(15, 3, 8), int16] */;
  %497 = shape_of(%var_2739, dtype="int32") /* ty=Tensor[(3), int32] */;
  %498 = cast(%var_2739, dtype="int16") /* ty=Tensor[(15, 3, 8), int16] */;
  %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %500 = cast(%var_2729, dtype="float64") /* ty=Tensor[(64, 1), float64] */;
  %501 = cast(%var_2729, dtype="float64") /* ty=Tensor[(64, 1), float64] */;
  %502 = cast(meta[relay.Constant][27] /* ty=Tensor[(650, 1), float32] */, dtype="float32") /* ty=Tensor[(650, 1), float32] */;
  %503 = cast(%var_2731, dtype="float32") /* ty=Tensor[(480), float32] */;
  %504 = %488.7;
  %505 = cast(%504, dtype="int16") /* ty=Tensor[(2464), int16] */;
  %506 = reshape(%500, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float64] */;
  %507 = reshape(%501, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float64] */;
  %508 = reshape(%502, newshape=[650]) /* ty=Tensor[(650), float32] */;
  %509 = reshape(%503, newshape=[8, 60]) /* ty=Tensor[(8, 60), float32] */;
  %510 = reshape(%505, newshape=[16, 11, 14]) /* ty=Tensor[(16, 11, 14), int16] */;
  %511 = @func_2061(%506, %507, %508, %509, %510) /* ty=(Tensor[(4, 4, 4), bool], float32, Tensor[(210), float32], Tensor[(120), float32], Tensor[(650), float32], Tensor[(11, 12, 11), float64], Tensor[(?, 650), bool], Tensor[(8, 60), float32], Tensor[(2464), int16], Tensor[(16, 11, 14), bool], Tensor[(15, 3, 8), float64]) */;
  %512 = cast(meta[relay.Constant][27] /* ty=Tensor[(650, 1), float32] */, dtype="bool") /* ty=Tensor[(650, 1), bool] */;
  %513 = cast(%var_2759, dtype="bool") /* ty=Tensor[(650, 13), bool] */;
  %514 = bitwise_and(%492, %493) /* ty=Tensor[(15, 3, 8), uint8] */;
  %515 = right_shift(%498, %499) /* ty=Tensor[(15, 3, 8), int16] */;
  %516 = %511.7;
  %517 = @func_1649() /* ty=Tensor[(15, 3, 8), float64] */;
  %518 = greater_equal(%512, %513) /* ty=Tensor[(650, 13), bool] */;
  (%504, %var_2729, %var_2731, 8.70733f /* ty=float32 */, %514, %515, %516, %517, %518)
}

def @func_4828() -> (Tensor[(650), float32],) {
  %519 = @func_4006() /* ty=(Tensor[(650), float32],) */;
  %520 = %519.0;
  (%520,)
}

def @func_6636(%var_6606: Tensor[(1521), float64], %var_6628: Tensor[(650), float32]) -> (Tensor[(15, 3, 8), float64], Tensor[(117), float64], Tensor[(1521), float64], Tensor[(650), uint8]) {
  %521 = @func_4479() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(13, 10, 5), float32]) */;
  %522 = cast(meta[relay.Constant][28] /* ty=Tensor[(117), float64] */, dtype="float64") /* ty=Tensor[(117), float64] */;
  %523 = cast(%var_6606, dtype="float64") /* ty=Tensor[(1521), float64] */;
  %524 = reshape(%522, newshape=[9, 1, 13]) /* ty=Tensor[(9, 1, 13), float64] */;
  %525 = reshape(%523, newshape=[9, 13, 13]) /* ty=Tensor[(9, 13, 13), float64] */;
  %526 = @func_5010(%524, %525) /* ty=(Tensor[(9, 1, 13), float64], Tensor[(650), float32], Tensor[(9, 13, 13), bool]) */;
  %527 = %526.1;
  %528 = cast(%var_6628, dtype="uint8") /* ty=Tensor[(650), uint8] */;
  %529 = shape_of(%527, dtype="int32") /* ty=Tensor[(1), int32] */;
  %530 = cast(%527, dtype="uint8") /* ty=Tensor[(650), uint8] */;
  %531 = dyn.reshape(%528, %529, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %532 = %521.0;
  %533 = bitwise_or(%530, %531) /* ty=Tensor[(650), uint8] */;
  (%532, meta[relay.Constant][28] /* ty=Tensor[(117), float64] */, %var_6606, %533)
}

def @func_817(%var_725: Tensor[(15, 2, 4), float32], %var_770: Tensor[(15, 2, 4), float32]) -> (Tensor[(15, 2, 4), uint32], Tensor[(15, 2, 4), float32], Tensor[(12, 5), float32], Tensor[(3, 20), float32], Tensor[(15, 2, 4), float64], Tensor[(15, 2, 4), bool], Tensor[(11, 12, 11), bool], Tensor[(132), uint8], Tensor[(15, 3, 2), uint64], Tensor[(15, 6), uint64], Tensor[(12, 5), float32], Tensor[(11, 12, 11), bool], Tensor[(15, 3, 2), uint64], Tensor[(15, 2, 4), float64]) {
  %534 = cast(%var_725, dtype="float32") /* ty=Tensor[(15, 2, 4), float32] */;
  %535 = sigmoid(%534) /* ty=Tensor[(15, 2, 4), float32] */;
  %536 = cast(%var_725, dtype="uint32") /* ty=Tensor[(15, 2, 4), uint32] */;
  %537 = shape_of(%535, dtype="int32") /* ty=Tensor[(3), int32] */;
  %538 = cast(%535, dtype="uint32") /* ty=Tensor[(15, 2, 4), uint32] */;
  %539 = dyn.reshape(%536, %537, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %540 = cast(%var_725, dtype="float32") /* ty=Tensor[(15, 2, 4), float32] */;
  %541 = shape_of(%535, dtype="int32") /* ty=Tensor[(3), int32] */;
  %542 = cast(%535, dtype="float32") /* ty=Tensor[(15, 2, 4), float32] */;
  %543 = dyn.reshape(%540, %541, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %544 = cast(meta[relay.Constant][29] /* ty=Tensor[(3, 20), float32] */, dtype="float32") /* ty=Tensor[(3, 20), float32] */;
  %545 = reshape(%544, newshape=[12, 5]) /* ty=Tensor[(12, 5), float32] */;
  %546 = cast(%var_725, dtype="float64") /* ty=Tensor[(15, 2, 4), float64] */;
  %547 = cast(%var_770, dtype="bool") /* ty=Tensor[(15, 2, 4), bool] */;
  %548 = shape_of(%var_725, dtype="int32") /* ty=Tensor[(3), int32] */;
  %549 = cast(%var_725, dtype="bool") /* ty=Tensor[(15, 2, 4), bool] */;
  %550 = dyn.reshape(%547, %548, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %551 = cast(meta[relay.Constant][30] /* ty=Tensor[(132), uint8] */, dtype="uint8") /* ty=Tensor[(132), uint8] */;
  %552 = reshape(%551, newshape=[11, 12, 1]) /* ty=Tensor[(11, 12, 1), uint8] */;
  %553 = @func_564(%552) /* ty=(Tensor[(11, 12, 11), bool],) */;
  %554 = cast(meta[relay.Constant][31] /* ty=Tensor[(15, 6), uint64] */, dtype="uint64") /* ty=Tensor[(15, 6), uint64] */;
  %555 = reshape(%554, newshape=[15, 3, 2]) /* ty=Tensor[(15, 3, 2), uint64] */;
  %556 = @func_100(%545) /* ty=Tensor[(12, 5), float32] */;
  %557 = cast(%556, dtype="float32") /* ty=Tensor[(12, 5), float32] */;
  %558 = reshape(%557, newshape=[12, 5]) /* ty=Tensor[(12, 5), float32] */;
  %559 = cast(meta[relay.Constant][30] /* ty=Tensor[(132), uint8] */, dtype="uint8") /* ty=Tensor[(132), uint8] */;
  %560 = reshape(%559, newshape=[11, 12, 1]) /* ty=Tensor[(11, 12, 1), uint8] */;
  %561 = @func_564(%560) /* ty=(Tensor[(11, 12, 11), bool],) */;
  %562 = @func_648(%555) /* ty=Tensor[(15, 3, 2), uint64] */;
  %563 = cast(%562, dtype="uint64") /* ty=Tensor[(15, 3, 2), uint64] */;
  %564 = reshape(%563, newshape=[15, 3, 2]) /* ty=Tensor[(15, 3, 2), uint64] */;
  %565 = cast(%535, dtype="float64") /* ty=Tensor[(15, 2, 4), float64] */;
  %566 = bitwise_xor(%538, %539) /* ty=Tensor[(15, 2, 4), uint32] */;
  %567 = mod(%542, %543) /* ty=Tensor[(15, 2, 4), float32] */;
  %568 = rsqrt(%546) /* ty=Tensor[(15, 2, 4), float64] */;
  %569 = logical_and(%549, %550) /* ty=Tensor[(15, 2, 4), bool] */;
  %570 = %553.0;
  %571 = @func_100(%558) /* ty=Tensor[(12, 5), float32] */;
  %572 = %561.0;
  %573 = @func_648(%564) /* ty=Tensor[(15, 3, 2), uint64] */;
  %574 = asinh(%565) /* ty=Tensor[(15, 2, 4), float64] */;
  (%566, %567, %556, meta[relay.Constant][29] /* ty=Tensor[(3, 20), float32] */, %568, %569, %570, meta[relay.Constant][30] /* ty=Tensor[(132), uint8] */, %562, meta[relay.Constant][31] /* ty=Tensor[(15, 6), uint64] */, %571, %572, %573, %574)
}

def @func_5665() -> (Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64]) {
  %575 = @func_4400() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(13, 10, 5), float32]) */;
  %576 = %575.0;
  %577 = @func_2852() /* ty=Tensor[(15, 3, 8), float64] */;
  %578 = @func_1684() /* ty=Tensor[(15, 3, 8), float64] */;
  (%576, %577, %578)
}

def @func_3403() -> Tensor[(15, 3, 8), float32] {
  %579 = @func_3076() /* ty=(Tensor[(15, 3, 8), float64],) */;
  %580 = %579.0;
  %581 = cast(%580, dtype="float32") /* ty=Tensor[(15, 3, 8), float32] */;
  atan(%581) /* ty=Tensor[(15, 3, 8), float32] */
}

def @func_1684() -> Tensor[(15, 3, 8), float64] {
  @func_1649() /* ty=Tensor[(15, 3, 8), float64] */
}

def @func_3769(%var_3757: Tensor[(480), float32]) -> (Tensor[(15, 3, 8), float64], Tensor[(16, 11, 14), bool], Tensor[(1, 64), float64], Tensor[(650), float32], Tensor[(480), float32], Tensor[(2464), int16], Tensor[(15, 3, 8), float64]) {
  %582 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 64), float64] */, dtype="float64") /* ty=Tensor[(1, 64), float64] */;
  %583 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 64), float64] */, dtype="float64") /* ty=Tensor[(1, 64), float64] */;
  %584 = cast(meta[relay.Constant][33] /* ty=Tensor[(650), float32] */, dtype="float32") /* ty=Tensor[(650), float32] */;
  %585 = cast(%var_3757, dtype="float32") /* ty=Tensor[(480), float32] */;
  %586 = cast(meta[relay.Constant][34] /* ty=Tensor[(2464), int16] */, dtype="int16") /* ty=Tensor[(2464), int16] */;
  %587 = reshape(%582, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float64] */;
  %588 = reshape(%583, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float64] */;
  %589 = reshape(%584, newshape=[650]) /* ty=Tensor[(650), float32] */;
  %590 = reshape(%585, newshape=[8, 60]) /* ty=Tensor[(8, 60), float32] */;
  %591 = reshape(%586, newshape=[16, 11, 14]) /* ty=Tensor[(16, 11, 14), int16] */;
  %592 = @func_2061(%587, %588, %589, %590, %591) /* ty=(Tensor[(4, 4, 4), bool], float32, Tensor[(210), float32], Tensor[(120), float32], Tensor[(650), float32], Tensor[(11, 12, 11), float64], Tensor[(?, 650), bool], Tensor[(8, 60), float32], Tensor[(2464), int16], Tensor[(16, 11, 14), bool], Tensor[(15, 3, 8), float64]) */;
  %593 = @func_2160() /* ty=(Tensor[(15, 3, 8), float64],) */;
  %594 = @func_3274() /* ty=Tensor[(15, 3, 8), float64] */;
  %595 = %592.9;
  %596 = %593.0;
  (%594, %595, meta[relay.Constant][32] /* ty=Tensor[(1, 64), float64] */, meta[relay.Constant][33] /* ty=Tensor[(650), float32] */, %var_3757, meta[relay.Constant][34] /* ty=Tensor[(2464), int16] */, %596)
}

def @func_6684() -> (Tensor[(6, 2, 3), float32], Tensor[(15, 3, 8), float32]) {
  %597 = @func_5211() /* ty=(Tensor[(6, 2, 3), float32],) */;
  %598 = @func_4155() /* ty=(Tensor[(15, 3, 8), float32],) */;
  %599 = %597.0;
  %600 = %598.0;
  (%599, %600)
}

def @func_4006() -> (Tensor[(650), float32],) {
  %601 = @func_2794() /* ty=(Tensor[(650), float32],) */;
  %602 = %601.0;
  (%602,)
}

def @func_5795() -> Tensor[(15, 3, 8), float64] {
  @func_1703() /* ty=Tensor[(15, 3, 8), float64] */
}

def @func_7175() -> Tensor[(15, 3, 8), float64] {
  @func_1703() /* ty=Tensor[(15, 3, 8), float64] */
}

def @func_7743(%var_7677: Tensor[(4, 140), float64]) -> (Tensor[(15, 3, 8), int64], Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float32], Tensor[(10, 8, 7), float64], Tensor[(650), float32], Tensor[(10, 8, 7), float32]) {
  %603 = @func_3367() /* ty=Tensor[(15, 3, 8), float64] */;
  %604 = cast(meta[relay.Constant][35] /* ty=Tensor[(15, 3, 8), float64] */, dtype="int64") /* ty=Tensor[(15, 3, 8), int64] */;
  %605 = shape_of(%603, dtype="int32") /* ty=Tensor[(3), int32] */;
  %606 = cast(%603, dtype="int64") /* ty=Tensor[(15, 3, 8), int64] */;
  %607 = dyn.reshape(%604, %605, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %608 = @func_6684() /* ty=(Tensor[(6, 2, 3), float32], Tensor[(15, 3, 8), float32]) */;
  %609 = cast(%var_7677, dtype="float64") /* ty=Tensor[(4, 140), float64] */;
  %610 = reshape(%609, newshape=[10, 8, 7]) /* ty=Tensor[(10, 8, 7), float64] */;
  %611 = @func_4828() /* ty=(Tensor[(650), float32],) */;
  %612 = @func_6244(%610) /* ty=Tensor[(10, 8, 7), float64] */;
  %613 = cast(%612, dtype="float64") /* ty=Tensor[(10, 8, 7), float64] */;
  %614 = reshape(%613, newshape=[10, 8, 7]) /* ty=Tensor[(10, 8, 7), float64] */;
  %615 = @func_6244(%614) /* ty=Tensor[(10, 8, 7), float64] */;
  %616 = cast(%var_7677, dtype="float32") /* ty=Tensor[(4, 140), float32] */;
  %617 = shape_of(%615, dtype="int32") /* ty=Tensor[(3), int32] */;
  %618 = cast(%615, dtype="float32") /* ty=Tensor[(10, 8, 7), float32] */;
  %619 = dyn.reshape(%616, %617, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %620 = minimum(%606, %607) /* ty=Tensor[(15, 3, 8), int64] */;
  %621 = @func_3640() /* ty=Tensor[(15, 3, 8), float64] */;
  %622 = %608.1;
  %623 = %611.0;
  %624 = floor_divide(%618, %619) /* ty=Tensor[(10, 8, 7), float32] */;
  (%620, %621, %622, %612, %623, %624)
}

def @func_2810(%var_2800: Tensor[(7, 8), float64]) -> Tensor[(7, 8), float64] {
  %625 = cast(%var_2800, dtype="float64") /* ty=Tensor[(7, 8), float64] */;
  exp(%625) /* ty=Tensor[(7, 8), float64] */
}

def @func_7558() -> (Tensor[(15, 3, 8), float64], Tensor[(5, 1, 9), float64], Tensor[(45), float64]) {
  %626 = cast(meta[relay.Constant][36] /* ty=Tensor[(45), float64] */, dtype="float64") /* ty=Tensor[(45), float64] */;
  %627 = reshape(%626, newshape=[5, 1, 9]) /* ty=Tensor[(5, 1, 9), float64] */;
  %628 = @func_4081() /* ty=Tensor[(15, 3, 8), float64] */;
  %629 = @func_1389(%627) /* ty=Tensor[(5, 1, 9), float64] */;
  (%628, %629, meta[relay.Constant][36] /* ty=Tensor[(45), float64] */)
}

def @func_5342(%var_5324: int64, %var_5325: Tensor[(15, 4, 7), int64]) -> (Tensor[(15, 4, 7), int64], Tensor[(15, 3, 8), float64], Tensor[(650), uint64]) {
  %630 = cast(%var_5324, dtype="int64") /* ty=int64 */;
  %631 = cast(%var_5325, dtype="int64") /* ty=Tensor[(15, 4, 7), int64] */;
  %632 = @func_4828() /* ty=(Tensor[(650), float32],) */;
  %633 = %632.0;
  %634 = cast(%633, dtype="uint64") /* ty=Tensor[(650), uint64] */;
  %635 = cast(%var_5324, dtype="uint64") /* ty=uint64 */;
  %636 = add(%630, %631) /* ty=Tensor[(15, 4, 7), int64] */;
  %637 = @func_3274() /* ty=Tensor[(15, 3, 8), float64] */;
  %638 = bitwise_xor(%634, %635) /* ty=Tensor[(650), uint64] */;
  (%636, %637, %638)
}

def @func_5914(%var_5805: Tensor[(13, 7, 6), uint64]) -> (Tensor[(13, 7, 6), uint64], Tensor[(13, 10, 5), float32], Tensor[(650), float32], float32, Tensor[(936), float32], Tensor[(13, 10, 5), float32], Tensor[(15, 3, 8), float64], Tensor[(11, 12, 11), float64], Tensor[(312), float32], Tensor[(15, 3, 8), int16]) {
  %639 = cast(%var_5805, dtype="uint64") /* ty=Tensor[(13, 7, 6), uint64] */;
  %640 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(13, 7, 6), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %641 = cast(meta[relay.Constant][37] /* ty=Tensor[(13, 7, 6), uint64] */, dtype="uint64") /* ty=Tensor[(13, 7, 6), uint64] */;
  %642 = dyn.reshape(%639, %640, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %643 = @func_2794() /* ty=(Tensor[(650), float32],) */;
  %644 = cast(meta[relay.Constant][38] /* ty=Tensor[(936), float32] */, dtype="float32") /* ty=Tensor[(936), float32] */;
  %645 = reshape(%644, newshape=[9, 13, 8]) /* ty=Tensor[(9, 13, 8), float32] */;
  %646 = @func_3338(%645) /* ty=(Tensor[(9, 13, 8), float32], Tensor[(9, 13, 8), float64], Tensor[(7, 8), float64], Tensor[(56), float64], float32) */;
  %647 = @func_4479() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(13, 10, 5), float32]) */;
  %648 = cast(meta[relay.Constant][39] /* ty=Tensor[(312), float32] */, dtype="float32") /* ty=Tensor[(312), float32] */;
  %649 = reshape(%648, newshape=[8, 13, 3]) /* ty=Tensor[(8, 13, 3), float32] */;
  %650 = @func_3184(%649) /* ty=(Tensor[(8, 13, 3), float64], Tensor[(650), float32], Tensor[(15, 3, 8), float64], Tensor[(8, 13, 3), float64], Tensor[(11, 12, 11), float64], Tensor[(64), float64], Tensor[(480), float32], float32) */;
  %651 = @func_3403() /* ty=Tensor[(15, 3, 8), float32] */;
  %652 = cast(%651, dtype="float64") /* ty=Tensor[(15, 3, 8), float64] */;
  %653 = sin(%652) /* ty=Tensor[(15, 3, 8), float64] */;
  %654 = cast(%653, dtype="float64") /* ty=Tensor[(15, 3, 8), float64] */;
  %655 = erf(%654) /* ty=Tensor[(15, 3, 8), float64] */;
  %656 = cast(%653, dtype="float32") /* ty=Tensor[(15, 3, 8), float32] */;
  %657 = shape_of(%655, dtype="int32") /* ty=Tensor[(3), int32] */;
  %658 = cast(%655, dtype="float32") /* ty=Tensor[(15, 3, 8), float32] */;
  %659 = dyn.reshape(%656, %657, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %660 = floor_mod(%658, %659) /* ty=Tensor[(15, 3, 8), float32] */;
  %661 = cast(%651, dtype="int16") /* ty=Tensor[(15, 3, 8), int16] */;
  %662 = shape_of(%660, dtype="int32") /* ty=Tensor[(3), int32] */;
  %663 = cast(%660, dtype="int16") /* ty=Tensor[(15, 3, 8), int16] */;
  %664 = dyn.reshape(%661, %662, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %665 = right_shift(%641, %642) /* ty=Tensor[(13, 7, 6), uint64] */;
  %666 = @func_2833() /* ty=Tensor[(13, 10, 5), float32] */;
  %667 = %643.0;
  %668 = %646.4;
  %669 = @func_2833() /* ty=Tensor[(13, 10, 5), float32] */;
  %670 = %647.0;
  %671 = %650.4;
  %672 = left_shift(%663, %664) /* ty=Tensor[(15, 3, 8), int16] */;
  (%665, %666, %667, %668, meta[relay.Constant][38] /* ty=Tensor[(936), float32] */, %669, %670, %671, meta[relay.Constant][39] /* ty=Tensor[(312), float32] */, %672)
}

def @func_3338(%var_3319: Tensor[(9, 13, 8), float32]) -> (Tensor[(9, 13, 8), float32], Tensor[(9, 13, 8), float64], Tensor[(7, 8), float64], Tensor[(56), float64], float32) {
  %673 = cast(%var_3319, dtype="float32") /* ty=Tensor[(9, 13, 8), float32] */;
  %674 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(9, 13, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %675 = cast(meta[relay.Constant][40] /* ty=Tensor[(9, 13, 8), float32] */, dtype="float32") /* ty=Tensor[(9, 13, 8), float32] */;
  %676 = dyn.reshape(%673, %674, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %677 = cast(meta[relay.Constant][40] /* ty=Tensor[(9, 13, 8), float32] */, dtype="float64") /* ty=Tensor[(9, 13, 8), float64] */;
  %678 = cast(meta[relay.Constant][41] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
  %679 = reshape(%678, newshape=[7, 8]) /* ty=Tensor[(7, 8), float64] */;
  %680 = @func_3308() /* ty=(Tensor[(13, 10, 5), float32], Tensor[(13, 10, 5), float32], float32) */;
  %681 = divide(%675, %676) /* ty=Tensor[(9, 13, 8), float32] */;
  %682 = sin(%677) /* ty=Tensor[(9, 13, 8), float64] */;
  %683 = @func_2810(%679) /* ty=Tensor[(7, 8), float64] */;
  %684 = %680.2;
  (%681, %682, %683, meta[relay.Constant][41] /* ty=Tensor[(56), float64] */, %684)
}

def @func_2669() -> (Tensor[(15, 3, 8), float64], Tensor[(13, 10, 5), float32], float32, Tensor[(650), float32]) {
  %685 = cast(-1.32306f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %686 = cast(meta[relay.Constant][42] /* ty=Tensor[(650), float32] */, dtype="float32") /* ty=Tensor[(650), float32] */;
  %687 = reshape(%685, newshape=[]) /* ty=float32 */;
  %688 = reshape(%686, newshape=[13, 10, 5]) /* ty=Tensor[(13, 10, 5), float32] */;
  %689 = @func_897(%687, %688) /* ty=(Tensor[(13, 10, 5), float32], Tensor[(132), uint8], Tensor[(11, 12, 11), float64]) */;
  %690 = @func_2106() /* ty=Tensor[(15, 3, 8), float64] */;
  %691 = %689.0;
  (%690, %691, -1.32306f /* ty=float32 */, meta[relay.Constant][42] /* ty=Tensor[(650), float32] */)
}

def @func_4081() -> Tensor[(15, 3, 8), float64] {
  %692 = @func_3367() /* ty=Tensor[(15, 3, 8), float64] */;
  %693 = cast(%692, dtype="float64") /* ty=Tensor[(15, 3, 8), float64] */;
  tan(%693) /* ty=Tensor[(15, 3, 8), float64] */
}

def @func_3615() -> (Tensor[(15, 3, 8), float32],) {
  %694 = @func_2565() /* ty=(Tensor[(15, 3, 8), float32],) */;
  %695 = %694.0;
  (%695,)
}

def @func_3837(%var_3807: Tensor[(88, 28), int16]) -> (Tensor[(16, 11, 14), int16], Tensor[(88, 28), int16], Tensor[(15, 3, 8), float32]) {
  %696 = cast(%var_3807, dtype="int16") /* ty=Tensor[(88, 28), int16] */;
  %697 = reshape(%696, newshape=[16, 11, 14]) /* ty=Tensor[(16, 11, 14), int16] */;
  %698 = @func_1576(%697) /* ty=(Tensor[(16, 11, 14), int16], Tensor[(16, 11, 14), uint32], Tensor[(15, 3, 2), uint64], Tensor[(90), uint64]) */;
  %699 = @func_3149() /* ty=Tensor[(15, 3, 8), float64] */;
  %700 = @func_3694() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(2464), int16], Tensor[(650), float64]) */;
  %701 = %700.0;
  %702 = cast(%701, dtype="float32") /* ty=Tensor[(15, 3, 8), float32] */;
  %703 = shape_of(%699, dtype="int32") /* ty=Tensor[(3), int32] */;
  %704 = cast(%699, dtype="float32") /* ty=Tensor[(15, 3, 8), float32] */;
  %705 = dyn.reshape(%702, %703, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %706 = %698.0;
  %707 = power(%704, %705) /* ty=Tensor[(15, 3, 8), float32] */;
  (%706, %var_3807, %707)
}

def @func_2263(%var_2250: Tensor[(650, 1), float32]) -> (Tensor[(15, 3, 8), float64], Tensor[(120), float32], Tensor[(64), float64], Tensor[(650, 1), float32], Tensor[(480), float32], Tensor[(2464), int16]) {
  %708 = cast(meta[relay.Constant][43] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
  %709 = cast(meta[relay.Constant][43] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
  %710 = cast(%var_2250, dtype="float32") /* ty=Tensor[(650, 1), float32] */;
  %711 = cast(meta[relay.Constant][44] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %712 = cast(meta[relay.Constant][45] /* ty=Tensor[(2464), int16] */, dtype="int16") /* ty=Tensor[(2464), int16] */;
  %713 = reshape(%708, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float64] */;
  %714 = reshape(%709, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float64] */;
  %715 = reshape(%710, newshape=[650]) /* ty=Tensor[(650), float32] */;
  %716 = reshape(%711, newshape=[8, 60]) /* ty=Tensor[(8, 60), float32] */;
  %717 = reshape(%712, newshape=[16, 11, 14]) /* ty=Tensor[(16, 11, 14), int16] */;
  %718 = @func_2061(%713, %714, %715, %716, %717) /* ty=(Tensor[(4, 4, 4), bool], float32, Tensor[(210), float32], Tensor[(120), float32], Tensor[(650), float32], Tensor[(11, 12, 11), float64], Tensor[(?, 650), bool], Tensor[(8, 60), float32], Tensor[(2464), int16], Tensor[(16, 11, 14), bool], Tensor[(15, 3, 8), float64]) */;
  %719 = @func_1649() /* ty=Tensor[(15, 3, 8), float64] */;
  %720 = %718.3;
  (%719, %720, meta[relay.Constant][43] /* ty=Tensor[(64), float64] */, %var_2250, meta[relay.Constant][44] /* ty=Tensor[(480), float32] */, meta[relay.Constant][45] /* ty=Tensor[(2464), int16] */)
}

def @func_7096(%var_7061: Tensor[(6, 2, 3), float32]) -> (Tensor[(6, 2, 3), uint64], Tensor[(15, 3, 8), float64], Tensor[(6, 2, 3), float64], Tensor[(15, 3, 8), float64]) {
  %721 = @func_5374() /* ty=(Tensor[(6, 2, 3), float32], Tensor[(15, 3, 8), float64]) */;
  %722 = %721.0;
  %723 = cast(%var_7061, dtype="uint16") /* ty=Tensor[(6, 2, 3), uint16] */;
  %724 = shape_of(%722, dtype="int32") /* ty=Tensor[(3), int32] */;
  %725 = cast(%722, dtype="uint16") /* ty=Tensor[(6, 2, 3), uint16] */;
  %726 = dyn.reshape(%723, %724, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %727 = left_shift(%725, %726) /* ty=Tensor[(6, 2, 3), uint16] */;
  %728 = cast(%722, dtype="uint64") /* ty=Tensor[(6, 2, 3), uint64] */;
  %729 = shape_of(%727, dtype="int32") /* ty=Tensor[(3), int32] */;
  %730 = cast(%727, dtype="uint64") /* ty=Tensor[(6, 2, 3), uint64] */;
  %731 = dyn.reshape(%728, %729, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %732 = cast(%722, dtype="float64") /* ty=Tensor[(6, 2, 3), float64] */;
  %733 = maximum(%730, %731) /* ty=Tensor[(6, 2, 3), uint64] */;
  %734 = @func_2852() /* ty=Tensor[(15, 3, 8), float64] */;
  %735 = sigmoid(%732) /* ty=Tensor[(6, 2, 3), float64] */;
  %736 = @func_1649() /* ty=Tensor[(15, 3, 8), float64] */;
  (%733, %734, %735, %736)
}

def @func_7927() -> Tensor[(13, 10, 5), float32] {
  %737 = @func_4479() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(13, 10, 5), float32]) */;
  %737.1
}

def @func_3694() -> (Tensor[(15, 3, 8), float64], Tensor[(2464), int16], Tensor[(650), float64]) {
  %738 = @func_3446() /* ty=(Tensor[(15, 3, 8), float64],) */;
  %739 = cast(meta[relay.Constant][46] /* ty=Tensor[(650), float32] */, dtype="float32") /* ty=Tensor[(650), float32] */;
  %740 = reshape(%739, newshape=[650, 1]) /* ty=Tensor[(650, 1), float32] */;
  %741 = @func_2263(%740) /* ty=(Tensor[(15, 3, 8), float64], Tensor[(120), float32], Tensor[(64), float64], Tensor[(650, 1), float32], Tensor[(480), float32], Tensor[(2464), int16]) */;
  %742 = cast(meta[relay.Constant][46] /* ty=Tensor[(650), float32] */, dtype="float64") /* ty=Tensor[(650), float64] */;
  %743 = %738.0;
  %744 = %741.5;
  %745 = erf(%742) /* ty=Tensor[(650), float64] */;
  (%743, %744, %745)
}

def @func_5635() -> (Tensor[(15, 3, 8), bool], Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float32]) {
  %746 = @func_4447() /* ty=(Tensor[(15, 3, 8), float64],) */;
  %747 = %746.0;
  %748 = cast(meta[relay.Constant][47] /* ty=Tensor[(15, 3, 8), float64] */, dtype="bool") /* ty=Tensor[(15, 3, 8), bool] */;
  %749 = shape_of(%747, dtype="int32") /* ty=Tensor[(3), int32] */;
  %750 = cast(%747, dtype="bool") /* ty=Tensor[(15, 3, 8), bool] */;
  %751 = dyn.reshape(%748, %749, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %752 = @func_4400() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(13, 10, 5), float32]) */;
  %753 = @func_4155() /* ty=(Tensor[(15, 3, 8), float32],) */;
  %754 = less_equal(%750, %751) /* ty=Tensor[(15, 3, 8), bool] */;
  %755 = %752.0;
  %756 = %753.0;
  (%754, %755, %756)
}

def @func_6894() -> (Tensor[(15, 3, 8), float64], Tensor[(312), float32], Tensor[(546), uint64]) {
  %757 = @func_4179() /* ty=(Tensor[(15, 3, 8), float64],) */;
  %758 = cast(meta[relay.Constant][48] /* ty=Tensor[(546), uint64] */, dtype="uint64") /* ty=Tensor[(546), uint64] */;
  %759 = reshape(%758, newshape=[13, 7, 6]) /* ty=Tensor[(13, 7, 6), uint64] */;
  %760 = @func_5914(%759) /* ty=(Tensor[(13, 7, 6), uint64], Tensor[(13, 10, 5), float32], Tensor[(650), float32], float32, Tensor[(936), float32], Tensor[(13, 10, 5), float32], Tensor[(15, 3, 8), float64], Tensor[(11, 12, 11), float64], Tensor[(312), float32], Tensor[(15, 3, 8), int16]) */;
  %761 = %757.0;
  %762 = %760.8;
  (%761, %762, meta[relay.Constant][48] /* ty=Tensor[(546), uint64] */)
}

def @func_2407(%var_2382: Tensor[(64), float64], %var_2383: Tensor[(325, 2), float32], %var_2384: Tensor[(480), float32], %var_2405: float32) -> (Tensor[(15, 3, 8), float64], Tensor[(5, 1, 9), float64], Tensor[(45), float64], Tensor[(8, 60), float32], Tensor[(64), float64], Tensor[(325, 2), float32], Tensor[(480), float32], Tensor[(2464), int8], Tensor[(11, 12, 11), float64], float32) {
  %763 = cast(meta[relay.Constant][49] /* ty=Tensor[(45), float64] */, dtype="float64") /* ty=Tensor[(45), float64] */;
  %764 = reshape(%763, newshape=[5, 1, 9]) /* ty=Tensor[(5, 1, 9), float64] */;
  %765 = cast(%var_2382, dtype="float64") /* ty=Tensor[(64), float64] */;
  %766 = cast(%var_2382, dtype="float64") /* ty=Tensor[(64), float64] */;
  %767 = cast(%var_2383, dtype="float32") /* ty=Tensor[(325, 2), float32] */;
  %768 = cast(%var_2384, dtype="float32") /* ty=Tensor[(480), float32] */;
  %769 = cast(meta[relay.Constant][50] /* ty=Tensor[(2464), int16] */, dtype="int16") /* ty=Tensor[(2464), int16] */;
  %770 = reshape(%765, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float64] */;
  %771 = reshape(%766, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float64] */;
  %772 = reshape(%767, newshape=[650]) /* ty=Tensor[(650), float32] */;
  %773 = reshape(%768, newshape=[8, 60]) /* ty=Tensor[(8, 60), float32] */;
  %774 = reshape(%769, newshape=[16, 11, 14]) /* ty=Tensor[(16, 11, 14), int16] */;
  %775 = @func_2061(%770, %771, %772, %773, %774) /* ty=(Tensor[(4, 4, 4), bool], float32, Tensor[(210), float32], Tensor[(120), float32], Tensor[(650), float32], Tensor[(11, 12, 11), float64], Tensor[(?, 650), bool], Tensor[(8, 60), float32], Tensor[(2464), int16], Tensor[(16, 11, 14), bool], Tensor[(15, 3, 8), float64]) */;
  %776 = cast(meta[relay.Constant][51] /* ty=Tensor[(2464), int16] */, dtype="int8") /* ty=Tensor[(2464), int8] */;
  %777 = shape_of(meta[relay.Constant][50] /* ty=Tensor[(2464), int16] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %778 = cast(meta[relay.Constant][50] /* ty=Tensor[(2464), int16] */, dtype="int8") /* ty=Tensor[(2464), int8] */;
  %779 = dyn.reshape(%776, %777, newshape=[]) /* ty=Tensor[(?), int8] */;
  %780 = cast(%var_2405, dtype="float32") /* ty=float32 */;
  %781 = cast(%var_2383, dtype="float32") /* ty=Tensor[(325, 2), float32] */;
  %782 = reshape(%780, newshape=[]) /* ty=float32 */;
  %783 = reshape(%781, newshape=[13, 10, 5]) /* ty=Tensor[(13, 10, 5), float32] */;
  %784 = @func_897(%782, %783) /* ty=(Tensor[(13, 10, 5), float32], Tensor[(132), uint8], Tensor[(11, 12, 11), float64]) */;
  %785 = @func_1703() /* ty=Tensor[(15, 3, 8), float64] */;
  %786 = @func_1389(%764) /* ty=Tensor[(5, 1, 9), float64] */;
  %787 = %775.7;
  %788 = add(%778, %779) /* ty=Tensor[(2464), int8] */;
  %789 = %784.2;
  (%785, %786, meta[relay.Constant][49] /* ty=Tensor[(45), float64] */, %787, %var_2382, %var_2383, %var_2384, %788, %789, %var_2405)
}

def @func_2106() -> Tensor[(15, 3, 8), float64] {
  @func_1684() /* ty=Tensor[(15, 3, 8), float64] */
}

def @func_1649() -> Tensor[(15, 3, 8), float64] {
  %790 = cast(meta[relay.Constant][52] /* ty=Tensor[(15, 3, 8), float64] */, dtype="float64") /* ty=Tensor[(15, 3, 8), float64] */;
  acosh(%790) /* ty=Tensor[(15, 3, 8), float64] */
}

def @func_564(%var_556: Tensor[(11, 12, 1), uint8]) -> (Tensor[(11, 12, 11), bool],) {
  %791 = cast(%var_556, dtype="bool") /* ty=Tensor[(11, 12, 1), bool] */;
  %792 = cast(meta[relay.Constant][53] /* ty=Tensor[(11, 12, 11), uint8] */, dtype="bool") /* ty=Tensor[(11, 12, 11), bool] */;
  %793 = greater(%791, %792) /* ty=Tensor[(11, 12, 11), bool] */;
  (%793,)
}

def @func_5991() -> (Tensor[(6, 2, 3), float32],) {
  %794 = @func_5211() /* ty=(Tensor[(6, 2, 3), float32],) */;
  %795 = %794.0;
  (%795,)
}

def @func_2852() -> Tensor[(15, 3, 8), float64] {
  @func_1703() /* ty=Tensor[(15, 3, 8), float64] */
}

def @func_5320(%var_5302: Tensor[(8, 13, 16), float64]) -> Tensor[(8, 13, 16), float64] {
  %796 = cast(%var_5302, dtype="float64") /* ty=Tensor[(8, 13, 16), float64] */;
  acosh(%796) /* ty=Tensor[(8, 13, 16), float64] */
}

def @func_7435() -> (Tensor[(15, 3, 8), float64], Tensor[(120), float32], Tensor[(120), float32], Tensor[(650), float32]) {
  %797 = cast(meta[relay.Constant][54] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %798 = reshape(%797, newshape=[120]) /* ty=Tensor[(120), float32] */;
  %799 = @func_2527(%798) /* ty=(Tensor[(11, 12, 11), bool], Tensor[(210), float32], Tensor[(120), float32], Tensor[(650), float32], Tensor[(15, 3, 8), bool], Tensor[(15, 3, 8), float64]) */;
  %800 = @func_4828() /* ty=(Tensor[(650), float32],) */;
  %801 = @func_4081() /* ty=Tensor[(15, 3, 8), float64] */;
  %802 = %799.2;
  %803 = %800.0;
  (%801, %802, meta[relay.Constant][54] /* ty=Tensor[(120), float32] */, %803)
}

def @func_2160() -> (Tensor[(15, 3, 8), float64],) {
  %804 = @func_1649() /* ty=Tensor[(15, 3, 8), float64] */;
  %805 = cast(%804, dtype="float64") /* ty=Tensor[(15, 3, 8), float64] */;
  %806 = sinh(%805) /* ty=Tensor[(15, 3, 8), float64] */;
  (%806,)
}

def @func_4282() -> (Tensor[(650), float32], Tensor[(15, 3, 8), float64], Tensor[(7, 8), float64], Tensor[(56), float64]) {
  %807 = @func_2794() /* ty=(Tensor[(650), float32],) */;
  %808 = cast(meta[relay.Constant][55] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
  %809 = reshape(%808, newshape=[7, 8]) /* ty=Tensor[(7, 8), float64] */;
  %810 = %807.0;
  %811 = @func_4081() /* ty=Tensor[(15, 3, 8), float64] */;
  %812 = @func_2810(%809) /* ty=Tensor[(7, 8), float64] */;
  (%810, %811, %812, meta[relay.Constant][55] /* ty=Tensor[(56), float64] */)
}

def @func_3410() -> (float32,) {
  %813 = @func_3308() /* ty=(Tensor[(13, 10, 5), float32], Tensor[(13, 10, 5), float32], float32) */;
  %814 = %813.2;
  (%814,)
}

def @func_100(%var_83: Tensor[(12, 5), float32]) -> Tensor[(12, 5), float32] {
  %815 = cast(%var_83, dtype="float32") /* ty=Tensor[(12, 5), float32] */;
  sinh(%815) /* ty=Tensor[(12, 5), float32] */
}

def @func_5374() -> (Tensor[(6, 2, 3), float32], Tensor[(15, 3, 8), float64]) {
  %816 = @func_5211() /* ty=(Tensor[(6, 2, 3), float32],) */;
  %817 = %816.0;
  %818 = @func_2127() /* ty=Tensor[(15, 3, 8), float64] */;
  (%817, %818)
}

def @func_3640() -> Tensor[(15, 3, 8), float64] {
  %819 = @func_3446() /* ty=(Tensor[(15, 3, 8), float64],) */;
  %819.0
}

def @func_5480() -> (Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64]) {
  %820 = @func_4400() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(13, 10, 5), float32]) */;
  %821 = %820.0;
  %822 = @func_4576() /* ty=Tensor[(15, 3, 8), float64] */;
  (%821, %822)
}

def @func_3474(%var_3464: Tensor[(90), uint64]) -> (Tensor[(650), float32], Tensor[(15, 3, 2), uint64], Tensor[(90), uint64]) {
  %823 = @func_2794() /* ty=(Tensor[(650), float32],) */;
  %824 = cast(%var_3464, dtype="uint64") /* ty=Tensor[(90), uint64] */;
  %825 = reshape(%824, newshape=[15, 3, 2]) /* ty=Tensor[(15, 3, 2), uint64] */;
  %826 = %823.0;
  %827 = @func_648(%825) /* ty=Tensor[(15, 3, 2), uint64] */;
  (%826, %827, %var_3464)
}

def @func_3602() -> (float32, Tensor[(2464), int8], Tensor[(64), float64], Tensor[(480), float32], Tensor[(360), float64], Tensor[(8450), float32]) {
  %828 = @func_2669() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(13, 10, 5), float32], float32, Tensor[(650), float32]) */;
  %829 = cast(meta[relay.Constant][56] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
  %830 = cast(meta[relay.Constant][57] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %831 = cast(meta[relay.Constant][58] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %832 = cast(meta[relay.Constant][59] /* ty=Tensor[(8450), float32] */, dtype="float32") /* ty=Tensor[(8450), float32] */;
  %833 = reshape(%829, newshape=[64, 1]) /* ty=Tensor[(64, 1), float64] */;
  %834 = reshape(%830, newshape=[480]) /* ty=Tensor[(480), float32] */;
  %835 = reshape(%831, newshape=[15, 3, 8]) /* ty=Tensor[(15, 3, 8), float64] */;
  %836 = reshape(%832, newshape=[650, 13]) /* ty=Tensor[(650, 13), float32] */;
  %837 = @func_2767(%833, %834, %835, %836) /* ty=(Tensor[(2464), int8], Tensor[(64, 1), float64], Tensor[(480), float32], float32, Tensor[(15, 3, 8), uint8], Tensor[(15, 3, 8), int16], Tensor[(8, 60), float32], Tensor[(15, 3, 8), float64], Tensor[(650, 13), bool]) */;
  %838 = %828.2;
  %839 = %837.0;
  (%838, %839, meta[relay.Constant][56] /* ty=Tensor[(64), float64] */, meta[relay.Constant][57] /* ty=Tensor[(480), float32] */, meta[relay.Constant][58] /* ty=Tensor[(360), float64] */, meta[relay.Constant][59] /* ty=Tensor[(8450), float32] */)
}

def @func_4117(%var_4104: Tensor[(650), float32]) -> (Tensor[(650), float32], Tensor[(15, 3, 2), uint64], Tensor[(90), uint64]) {
  %840 = @func_2794() /* ty=(Tensor[(650), float32],) */;
  %841 = %840.0;
  %842 = cast(%var_4104, dtype="float32") /* ty=Tensor[(650), float32] */;
  %843 = shape_of(%841, dtype="int32") /* ty=Tensor[(1), int32] */;
  %844 = cast(%841, dtype="float32") /* ty=Tensor[(650), float32] */;
  %845 = dyn.reshape(%842, %843, newshape=[]) /* ty=Tensor[(?), float32] */;
  %846 = cast(meta[relay.Constant][60] /* ty=Tensor[(90), uint64] */, dtype="uint64") /* ty=Tensor[(90), uint64] */;
  %847 = reshape(%846, newshape=[15, 3, 2]) /* ty=Tensor[(15, 3, 2), uint64] */;
  %848 = minimum(%844, %845) /* ty=Tensor[(650), float32] */;
  %849 = @func_648(%847) /* ty=Tensor[(15, 3, 2), uint64] */;
  (%848, %849, meta[relay.Constant][60] /* ty=Tensor[(90), uint64] */)
}

def @func_3184(%var_3152: Tensor[(8, 13, 3), float32]) -> (Tensor[(8, 13, 3), float64], Tensor[(650), float32], Tensor[(15, 3, 8), float64], Tensor[(8, 13, 3), float64], Tensor[(11, 12, 11), float64], Tensor[(64), float64], Tensor[(480), float32], float32) {
  %850 = cast(meta[relay.Constant][61] /* ty=Tensor[(8, 13, 3), float32] */, dtype="float64") /* ty=Tensor[(8, 13, 3), float64] */;
  %851 = @func_2794() /* ty=(Tensor[(650), float32],) */;
  %852 = cast(meta[relay.Constant][61] /* ty=Tensor[(8, 13, 3), float32] */, dtype="float32") /* ty=Tensor[(8, 13, 3), float32] */;
  %853 = shape_of(%var_3152, dtype="int32") /* ty=Tensor[(3), int32] */;
  %854 = cast(%var_3152, dtype="float32") /* ty=Tensor[(8, 13, 3), float32] */;
  %855 = dyn.reshape(%852, %853, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %856 = mod(%854, %855) /* ty=Tensor[(8, 13, 3), float32] */;
  %857 = cast(%856, dtype="float64") /* ty=Tensor[(8, 13, 3), float64] */;
  %858 = cast(meta[relay.Constant][62] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
  %859 = %851.0;
  %860 = cast(%859, dtype="float32") /* ty=Tensor[(650), float32] */;
  %861 = cast(meta[relay.Constant][63] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %862 = cast(3.92473f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %863 = reshape(%858, newshape=[64]) /* ty=Tensor[(64), float64] */;
  %864 = reshape(%860, newshape=[325, 2]) /* ty=Tensor[(325, 2), float32] */;
  %865 = reshape(%861, newshape=[480]) /* ty=Tensor[(480), float32] */;
  %866 = reshape(%862, newshape=[]) /* ty=float32 */;
  %867 = @func_2407(%863, %864, %865, %866) /* ty=(Tensor[(15, 3, 8), float64], Tensor[(5, 1, 9), float64], Tensor[(45), float64], Tensor[(8, 60), float32], Tensor[(64), float64], Tensor[(325, 2), float32], Tensor[(480), float32], Tensor[(2464), int8], Tensor[(11, 12, 11), float64], float32) */;
  %868 = cosh(%850) /* ty=Tensor[(8, 13, 3), float64] */;
  %869 = @func_2106() /* ty=Tensor[(15, 3, 8), float64] */;
  %870 = atan(%857) /* ty=Tensor[(8, 13, 3), float64] */;
  %871 = %867.8;
  (%868, %859, %869, %870, %871, meta[relay.Constant][62] /* ty=Tensor[(64), float64] */, meta[relay.Constant][63] /* ty=Tensor[(480), float32] */, 3.92473f /* ty=float32 */)
}

def @func_3149() -> Tensor[(15, 3, 8), float64] {
  @func_1703() /* ty=Tensor[(15, 3, 8), float64] */
}

def @func_6325(%var_6316: Tensor[(4, 15, 15), float64]) -> (Tensor[(4, 15, 15), float32],) {
  %872 = cast(%var_6316, dtype="float64") /* ty=Tensor[(4, 15, 15), float64] */;
  %873 = acos(%872) /* ty=Tensor[(4, 15, 15), float64] */;
  %874 = cast(%873, dtype="float32") /* ty=Tensor[(4, 15, 15), float32] */;
  %875 = sinh(%874) /* ty=Tensor[(4, 15, 15), float32] */;
  (%875,)
}

def @func_1022(%var_1003: Tensor[(16, 5, 6), float32]) -> (Tensor[(16, 5, 6), float32], float32, Tensor[(?, 650), bool]) {
  %876 = cast(%var_1003, dtype="float32") /* ty=Tensor[(16, 5, 6), float32] */;
  %877 = shape_of(meta[relay.Constant][64] /* ty=Tensor[(16, 5, 6), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %878 = cast(meta[relay.Constant][64] /* ty=Tensor[(16, 5, 6), float32] */, dtype="float32") /* ty=Tensor[(16, 5, 6), float32] */;
  %879 = dyn.reshape(%876, %877, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %880 = cast(1.12205f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %881 = cast(meta[relay.Constant][65] /* ty=Tensor[(1, 650), float32] */, dtype="float32") /* ty=Tensor[(1, 650), float32] */;
  %882 = reshape(%880, newshape=[]) /* ty=float32 */;
  %883 = reshape(%881, newshape=[13, 10, 5]) /* ty=Tensor[(13, 10, 5), float32] */;
  %884 = @func_897(%882, %883) /* ty=(Tensor[(13, 10, 5), float32], Tensor[(132), uint8], Tensor[(11, 12, 11), float64]) */;
  %885 = %884.0;
  %886 = cast(%885, dtype="bool") /* ty=Tensor[(13, 10, 5), bool] */;
  %887 = shape_of(meta[relay.Constant][65] /* ty=Tensor[(1, 650), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %888 = cast(meta[relay.Constant][65] /* ty=Tensor[(1, 650), float32] */, dtype="bool") /* ty=Tensor[(1, 650), bool] */;
  %889 = dyn.reshape(%886, %887, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %890 = divide(%878, %879) /* ty=Tensor[(16, 5, 6), float32] */;
  %891 = logical_and(%888, %889) /* ty=Tensor[(?, 650), bool] */;
  (%890, 1.12205f /* ty=float32 */, %891)
}

def @func_2527(%var_2498: Tensor[(120), float32]) -> (Tensor[(11, 12, 11), bool], Tensor[(210), float32], Tensor[(120), float32], Tensor[(650), float32], Tensor[(15, 3, 8), bool], Tensor[(15, 3, 8), float64]) {
  %892 = cast(meta[relay.Constant][66] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %893 = cast(%var_2498, dtype="float32") /* ty=Tensor[(120), float32] */;
  %894 = cast(meta[relay.Constant][67] /* ty=Tensor[(650), float32] */, dtype="float32") /* ty=Tensor[(650), float32] */;
  %895 = reshape(%892, newshape=[5, 7, 6]) /* ty=Tensor[(5, 7, 6), float32] */;
  %896 = reshape(%893, newshape=[6, 20]) /* ty=Tensor[(6, 20), float32] */;
  %897 = reshape(%894, newshape=[650]) /* ty=Tensor[(650), float32] */;
  %898 = @func_1620(%895, %896, %897) /* ty=(Tensor[(5, 7, 6), float32], Tensor[(11, 12, 11), bool], Tensor[(6, 20), float32], Tensor[(13, 10, 5), float32], float32, Tensor[(650), float32]) */;
  %899 = @func_2127() /* ty=Tensor[(15, 3, 8), float64] */;
  %900 = cast(%899, dtype="float64") /* ty=Tensor[(15, 3, 8), float64] */;
  %901 = cosh(%900) /* ty=Tensor[(15, 3, 8), float64] */;
  %902 = @func_1703() /* ty=Tensor[(15, 3, 8), float64] */;
  %903 = cast(%902, dtype="bool") /* ty=Tensor[(15, 3, 8), bool] */;
  %904 = shape_of(%901, dtype="int32") /* ty=Tensor[(3), int32] */;
  %905 = cast(%901, dtype="bool") /* ty=Tensor[(15, 3, 8), bool] */;
  %906 = dyn.reshape(%903, %904, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %907 = %898.1;
  %908 = less(%905, %906) /* ty=Tensor[(15, 3, 8), bool] */;
  %909 = @func_1649() /* ty=Tensor[(15, 3, 8), float64] */;
  (%907, meta[relay.Constant][66] /* ty=Tensor[(210), float32] */, %var_2498, meta[relay.Constant][67] /* ty=Tensor[(650), float32] */, %908, %909)
}

def @func_4576() -> Tensor[(15, 3, 8), float64] {
  %910 = @func_4400() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(13, 10, 5), float32]) */;
  %910.0
}

def @func_5267() -> (Tensor[(15, 3, 8), float64],) {
  %911 = @func_3446() /* ty=(Tensor[(15, 3, 8), float64],) */;
  %912 = %911.0;
  (%912,)
}

def @func_3308() -> (Tensor[(13, 10, 5), float32], Tensor[(13, 10, 5), float32], float32) {
  %913 = cast(-1.87823f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %914 = @func_2833() /* ty=Tensor[(13, 10, 5), float32] */;
  %915 = cast(%914, dtype="float32") /* ty=Tensor[(13, 10, 5), float32] */;
  %916 = reshape(%913, newshape=[]) /* ty=float32 */;
  %917 = reshape(%915, newshape=[13, 10, 5]) /* ty=Tensor[(13, 10, 5), float32] */;
  %918 = @func_897(%916, %917) /* ty=(Tensor[(13, 10, 5), float32], Tensor[(132), uint8], Tensor[(11, 12, 11), float64]) */;
  %919 = %918.0;
  (%914, %919, -1.87823f /* ty=float32 */)
}

def @func_5514() -> (Tensor[(2464), int8],) {
  %920 = @func_3602() /* ty=(float32, Tensor[(2464), int8], Tensor[(64), float64], Tensor[(480), float32], Tensor[(360), float64], Tensor[(8450), float32]) */;
  %921 = %920.1;
  (%921,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_3604() -> (float32, Tensor[(2464), int8], Tensor[(64), float64], Tensor[(480), float32], Tensor[(360), float64], Tensor[(8450), float32]) {
  @func_3602() /* ty=(float32, Tensor[(2464), int8], Tensor[(64), float64], Tensor[(480), float32], Tensor[(360), float64], Tensor[(8450), float32]) */
}

def @func_3412() -> (float32,) {
  @func_3410() /* ty=(float32,) */
}

def @func_6942() -> (Tensor[(546), uint64],) {
  @func_6940() /* ty=(Tensor[(546), uint64],) */
}

def @func_7799(%var_7797: Tensor[(180, 4), int64]) -> (Tensor[(15, 3, 8), float32], Tensor[(15, 3, 8), float64], Tensor[(5, 12, 12), float64], Tensor[(180, 4), int64], Tensor[(15, 3, 8), float64]) {
  @func_7796(%var_7797) /* ty=(Tensor[(15, 3, 8), float32], Tensor[(15, 3, 8), float64], Tensor[(5, 12, 12), float64], Tensor[(180, 4), int64], Tensor[(15, 3, 8), float64]) */
}

def @func_2603(%var_2572: Tensor[(5, 12, 12), int64]) -> (Tensor[(5, 12, 12), float64],) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(5, 1, 12), int64] */, dtype="bool") /* ty=Tensor[(5, 1, 12), bool] */;
  %1 = cast(%var_2572, dtype="bool") /* ty=Tensor[(5, 12, 12), bool] */;
  %2 = less_equal(%0, %1) /* ty=Tensor[(5, 12, 12), bool] */;
  %3 = cast(%2, dtype="float64") /* ty=Tensor[(5, 12, 12), float64] */;
  %4 = asinh(%3) /* ty=Tensor[(5, 12, 12), float64] */;
  (%4,)
}

def @func_3149() -> Tensor[(15, 3, 8), float64] {
  @func_1703() /* ty=Tensor[(15, 3, 8), float64] */
}

def @func_3309() -> (Tensor[(13, 10, 5), float32], Tensor[(13, 10, 5), float32], float32) {
  %12 = fn () -> (Tensor[(13, 10, 5), float32], Tensor[(13, 10, 5), float32], float32) {
    %5 = cast(-1.87823f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %6 = @func_2833() /* ty=Tensor[(13, 10, 5), float32] */;
    %7 = cast(%6, dtype="float32") /* ty=Tensor[(13, 10, 5), float32] */;
    %8 = reshape(%5, newshape=[]) /* ty=float32 */;
    %9 = reshape(%7, newshape=[13, 10, 5]) /* ty=Tensor[(13, 10, 5), float32] */;
    %10 = @func_897(%8, %9) /* ty=(Tensor[(13, 10, 5), float32], Tensor[(132), uint8], Tensor[(11, 12, 11), float64]) */;
    %11 = %10.0;
    (%6, %11, -1.87823f /* ty=float32 */)
  };
  %12() /* ty=(Tensor[(13, 10, 5), float32], Tensor[(13, 10, 5), float32], float32) */
}

def @func_1624(%var_1621: Tensor[(5, 7, 6), float32], %var_1622: Tensor[(6, 20), float32], %var_1623: Tensor[(650), float32]) -> (Tensor[(5, 7, 6), float32], Tensor[(11, 12, 11), bool], Tensor[(6, 20), float32], Tensor[(13, 10, 5), float32], float32, Tensor[(650), float32]) {
  %27 = fn (%var_1598: Tensor[(5, 7, 6), float32], %var_1605: Tensor[(6, 20), float32], %var_1611: Tensor[(650), float32]) -> (Tensor[(5, 7, 6), float32], Tensor[(11, 12, 11), bool], Tensor[(6, 20), float32], Tensor[(13, 10, 5), float32], float32, Tensor[(650), float32]) {
    %13 = cast(%var_1598, dtype="float32") /* ty=Tensor[(5, 7, 6), float32] */;
    %14 = cast(%var_1605, dtype="float32") /* ty=Tensor[(6, 20), float32] */;
    %15 = cast(%var_1605, dtype="float32") /* ty=Tensor[(6, 20), float32] */;
    %16 = reshape(%14, newshape=[15, 2, 4]) /* ty=Tensor[(15, 2, 4), float32] */;
    %17 = reshape(%15, newshape=[15, 2, 4]) /* ty=Tensor[(15, 2, 4), float32] */;
    %18 = @func_817(%16, %17) /* ty=(Tensor[(15, 2, 4), uint32], Tensor[(15, 2, 4), float32], Tensor[(12, 5), float32], Tensor[(3, 20), float32], Tensor[(15, 2, 4), float64], Tensor[(15, 2, 4), bool], Tensor[(11, 12, 11), bool], Tensor[(132), uint8], Tensor[(15, 3, 2), uint64], Tensor[(15, 6), uint64], Tensor[(12, 5), float32], Tensor[(11, 12, 11), bool], Tensor[(15, 3, 2), uint64], Tensor[(15, 2, 4), float64]) */;
    %19 = cast(0.024623f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %20 = cast(%var_1611, dtype="float32") /* ty=Tensor[(650), float32] */;
    %21 = reshape(%19, newshape=[]) /* ty=float32 */;
    %22 = reshape(%20, newshape=[13, 10, 5]) /* ty=Tensor[(13, 10, 5), float32] */;
    %23 = @func_897(%21, %22) /* ty=(Tensor[(13, 10, 5), float32], Tensor[(132), uint8], Tensor[(11, 12, 11), float64]) */;
    %24 = cosh(%13) /* ty=Tensor[(5, 7, 6), float32] */;
    %25 = %18.6;
    %26 = %23.0;
    (%24, %25, %var_1605, %26, 0.024623f /* ty=float32 */, %var_1611)
  };
  %27(%var_1621, %var_1622, %var_1623) /* ty=(Tensor[(5, 7, 6), float32], Tensor[(11, 12, 11), bool], Tensor[(6, 20), float32], Tensor[(13, 10, 5), float32], float32, Tensor[(650), float32]) */
}

def @func_4180() -> (Tensor[(15, 3, 8), float64],) {
  %29 = fn () -> (Tensor[(15, 3, 8), float64],) {
    %28 = @func_1703() /* ty=Tensor[(15, 3, 8), float64] */;
    (%28,)
  };
  %29() /* ty=(Tensor[(15, 3, 8), float64],) */
}

def @func_7130() -> (Tensor[(15, 3, 8), float64],) {
  @func_7128() /* ty=(Tensor[(15, 3, 8), float64],) */
}

def @func_7223(%var_7215: Tensor[(3, 8, 15), bool]) -> (Tensor[(3, 8, 15), bool],) {
  %30 = cast(meta[relay.Constant][1] /* ty=Tensor[(3, 8, 15), bool] */, dtype="bool") /* ty=Tensor[(3, 8, 15), bool] */;
  %31 = shape_of(%var_7215, dtype="int32") /* ty=Tensor[(3), int32] */;
  %32 = cast(%var_7215, dtype="bool") /* ty=Tensor[(3, 8, 15), bool] */;
  %33 = dyn.reshape(%30, %31, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %34 = logical_and(%32, %33) /* ty=Tensor[(3, 8, 15), bool] */;
  (%34,)
}

def @func_2810(%var_2800: Tensor[(7, 8), float64]) -> Tensor[(7, 8), float64] {
  %35 = cast(%var_2800, dtype="float64") /* ty=Tensor[(7, 8), float64] */;
  exp(%35) /* ty=Tensor[(7, 8), float64] */
}

def @func_5212() -> (Tensor[(6, 2, 3), float32],) {
  %38 = fn () -> (Tensor[(6, 2, 3), float32],) {
    %36 = cast(meta[relay.Constant][2] /* ty=Tensor[(6, 2, 3), float32] */, dtype="float32") /* ty=Tensor[(6, 2, 3), float32] */;
    %37 = log(%36) /* ty=Tensor[(6, 2, 3), float32] */;
    (%37,)
  };
  %38() /* ty=(Tensor[(6, 2, 3), float32],) */
}

def @func_7975() -> (Tensor[(15, 3, 8), float32], Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64]) {
  @func_7973() /* ty=(Tensor[(15, 3, 8), float32], Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64]) */
}

def @func_4008() -> (Tensor[(650), float32],) {
  @func_4006() /* ty=(Tensor[(650), float32],) */
}

def @func_1650() -> Tensor[(15, 3, 8), float64] {
  %40 = fn () -> Tensor[(15, 3, 8), float64] {
    %39 = cast(meta[relay.Constant][3] /* ty=Tensor[(15, 3, 8), float64] */, dtype="float64") /* ty=Tensor[(15, 3, 8), float64] */;
    acosh(%39) /* ty=Tensor[(15, 3, 8), float64] */
  };
  %40() /* ty=Tensor[(15, 3, 8), float64] */
}

def @func_6328(%var_6326: Tensor[(4, 15, 15), float64]) -> (Tensor[(4, 15, 15), float32],) {
  @func_6325(%var_6326) /* ty=(Tensor[(4, 15, 15), float32],) */
}

def @func_2565() -> (Tensor[(15, 3, 8), float32],) {
  %41 = @func_1684() /* ty=Tensor[(15, 3, 8), float64] */;
  %42 = cast(%41, dtype="float32") /* ty=Tensor[(15, 3, 8), float32] */;
  %43 = sigmoid(%42) /* ty=Tensor[(15, 3, 8), float32] */;
  (%43,)
}

def @func_5269() -> (Tensor[(15, 3, 8), float64],) {
  @func_5267() /* ty=(Tensor[(15, 3, 8), float64],) */
}

def @func_4082() -> Tensor[(15, 3, 8), float64] {
  %46 = fn () -> Tensor[(15, 3, 8), float64] {
    %44 = @func_3367() /* ty=Tensor[(15, 3, 8), float64] */;
    %45 = cast(%44, dtype="float64") /* ty=Tensor[(15, 3, 8), float64] */;
    tan(%45) /* ty=Tensor[(15, 3, 8), float64] */
  };
  %46() /* ty=Tensor[(15, 3, 8), float64] */
}

def @func_7177() -> Tensor[(15, 3, 8), float64] {
  @func_7175() /* ty=Tensor[(15, 3, 8), float64] */
}

def @func_4829() -> (Tensor[(650), float32],) {
  %49 = fn () -> (Tensor[(650), float32],) {
    %47 = @func_4006() /* ty=(Tensor[(650), float32],) */;
    %48 = %47.0;
    (%48,)
  };
  %49() /* ty=(Tensor[(650), float32],) */
}

def @func_3695() -> (Tensor[(15, 3, 8), float64], Tensor[(2464), int16], Tensor[(650), float64]) {
  %58 = fn () -> (Tensor[(15, 3, 8), float64], Tensor[(2464), int16], Tensor[(650), float64]) {
    %50 = @func_3446() /* ty=(Tensor[(15, 3, 8), float64],) */;
    %51 = cast(meta[relay.Constant][4] /* ty=Tensor[(650), float32] */, dtype="float32") /* ty=Tensor[(650), float32] */;
    %52 = reshape(%51, newshape=[650, 1]) /* ty=Tensor[(650, 1), float32] */;
    %53 = @func_2263(%52) /* ty=(Tensor[(15, 3, 8), float64], Tensor[(120), float32], Tensor[(64), float64], Tensor[(650, 1), float32], Tensor[(480), float32], Tensor[(2464), int16]) */;
    %54 = cast(meta[relay.Constant][4] /* ty=Tensor[(650), float32] */, dtype="float64") /* ty=Tensor[(650), float64] */;
    %55 = %50.0;
    %56 = %53.5;
    %57 = erf(%54) /* ty=Tensor[(650), float64] */;
    (%55, %56, %57)
  };
  %58() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(2464), int16], Tensor[(650), float64]) */
}

def @func_2567() -> (Tensor[(15, 3, 8), float32],) {
  @func_2565() /* ty=(Tensor[(15, 3, 8), float32],) */
}

def @func_5991() -> (Tensor[(6, 2, 3), float32],) {
  %59 = @func_5211() /* ty=(Tensor[(6, 2, 3), float32],) */;
  %60 = %59.0;
  (%60,)
}

def @func_4447() -> (Tensor[(15, 3, 8), float64],) {
  %61 = @func_2127() /* ty=Tensor[(15, 3, 8), float64] */;
  (%61,)
}

def @func_2108() -> Tensor[(15, 3, 8), float64] {
  @func_2106() /* ty=Tensor[(15, 3, 8), float64] */
}

def @func_7242() -> (Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float32], Tensor[(15, 3, 8), float32]) {
  @func_7240() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float32], Tensor[(15, 3, 8), float32]) */
}

def @func_7226(%var_7224: Tensor[(3, 8, 15), bool]) -> (Tensor[(3, 8, 15), bool],) {
  @func_7223(%var_7224) /* ty=(Tensor[(3, 8, 15), bool],) */
}

def @func_6725() -> (Tensor[(6, 2, 3), float32], Tensor[(650), float32]) {
  @func_6723() /* ty=(Tensor[(6, 2, 3), float32], Tensor[(650), float32]) */
}

def @func_2127() -> Tensor[(15, 3, 8), float64] {
  @func_2106() /* ty=Tensor[(15, 3, 8), float64] */
}

def @func_1579(%var_1577: Tensor[(16, 11, 14), int16]) -> (Tensor[(16, 11, 14), int16], Tensor[(16, 11, 14), uint32], Tensor[(15, 3, 2), uint64], Tensor[(90), uint64]) {
  @func_1576(%var_1577) /* ty=(Tensor[(16, 11, 14), int16], Tensor[(16, 11, 14), uint32], Tensor[(15, 3, 2), uint64], Tensor[(90), uint64]) */
}

def @func_6246(%var_6245: Tensor[(10, 8, 7), float64]) -> Tensor[(10, 8, 7), float64] {
  %63 = fn (%var_6241: Tensor[(10, 8, 7), float64]) -> Tensor[(10, 8, 7), float64] {
    %62 = cast(%var_6241, dtype="float64") /* ty=Tensor[(10, 8, 7), float64] */;
    exp(%62) /* ty=Tensor[(10, 8, 7), float64] */
  };
  %63(%var_6245) /* ty=Tensor[(10, 8, 7), float64] */
}

def @func_4006() -> (Tensor[(650), float32],) {
  %64 = @func_2794() /* ty=(Tensor[(650), float32],) */;
  %65 = %64.0;
  (%65,)
}

def @func_564(%var_556: Tensor[(11, 12, 1), uint8]) -> (Tensor[(11, 12, 11), bool],) {
  %66 = cast(%var_556, dtype="bool") /* ty=Tensor[(11, 12, 1), bool] */;
  %67 = cast(meta[relay.Constant][5] /* ty=Tensor[(11, 12, 11), uint8] */, dtype="bool") /* ty=Tensor[(11, 12, 11), bool] */;
  %68 = greater(%66, %67) /* ty=Tensor[(11, 12, 11), bool] */;
  (%68,)
}

def @func_6791(%var_6790: Tensor[(650), float32]) -> (Tensor[(15, 3, 8), float64], Tensor[(120), float32], Tensor[(650), int8], Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64]) {
  %82 = fn (%var_6764: Tensor[(650), float32]) -> (Tensor[(15, 3, 8), float64], Tensor[(120), float32], Tensor[(650), int8], Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64]) {
    %69 = @func_5665() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64]) */;
    %70 = cast(meta[relay.Constant][6] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
    %71 = reshape(%70, newshape=[120]) /* ty=Tensor[(120), float32] */;
    %72 = @func_2527(%71) /* ty=(Tensor[(11, 12, 11), bool], Tensor[(210), float32], Tensor[(120), float32], Tensor[(650), float32], Tensor[(15, 3, 8), bool], Tensor[(15, 3, 8), float64]) */;
    %73 = %72.3;
    %74 = cast(%var_6764, dtype="int8") /* ty=Tensor[(650), int8] */;
    %75 = shape_of(%73, dtype="int32") /* ty=Tensor[(1), int32] */;
    %76 = cast(%73, dtype="int8") /* ty=Tensor[(650), int8] */;
    %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?), int8] */;
    %78 = %69.0;
    %79 = logical_xor(%76, %77) /* ty=Tensor[(650), int8] */;
    %80 = @func_3274() /* ty=Tensor[(15, 3, 8), float64] */;
    %81 = @func_1649() /* ty=Tensor[(15, 3, 8), float64] */;
    (%78, meta[relay.Constant][6] /* ty=Tensor[(120), float32] */, %79, %80, %81)
  };
  %82(%var_6790) /* ty=(Tensor[(15, 3, 8), float64], Tensor[(120), float32], Tensor[(650), int8], Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64]) */
}

def @func_5267() -> (Tensor[(15, 3, 8), float64],) {
  %83 = @func_3446() /* ty=(Tensor[(15, 3, 8), float64],) */;
  %84 = %83.0;
  (%84,)
}

def @func_7240() -> (Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float32], Tensor[(15, 3, 8), float32]) {
  %85 = @func_5736() /* ty=(Tensor[(15, 3, 8), bool], Tensor[(650), float64], Tensor[(15, 3, 8), float64], Tensor[(64), float64]) */;
  %86 = @func_2565() /* ty=(Tensor[(15, 3, 8), float32],) */;
  %87 = @func_4155() /* ty=(Tensor[(15, 3, 8), float32],) */;
  %88 = %85.2;
  %89 = %86.0;
  %90 = %87.0;
  (%88, %89, %90)
}

def @func_3447() -> (Tensor[(15, 3, 8), float64],) {
  %92 = fn () -> (Tensor[(15, 3, 8), float64],) {
    %91 = @func_3367() /* ty=Tensor[(15, 3, 8), float64] */;
    (%91,)
  };
  %92() /* ty=(Tensor[(15, 3, 8), float64],) */
}

def @func_4578() -> Tensor[(15, 3, 8), float64] {
  @func_4576() /* ty=Tensor[(15, 3, 8), float64] */
}

def @func_4155() -> (Tensor[(15, 3, 8), float32],) {
  %93 = @func_3403() /* ty=Tensor[(15, 3, 8), float32] */;
  (%93,)
}

def @func_3615() -> (Tensor[(15, 3, 8), float32],) {
  %94 = @func_2565() /* ty=(Tensor[(15, 3, 8), float32],) */;
  %95 = %94.0;
  (%95,)
}

def @func_5342(%var_5324: int64, %var_5325: Tensor[(15, 4, 7), int64]) -> (Tensor[(15, 4, 7), int64], Tensor[(15, 3, 8), float64], Tensor[(650), uint64]) {
  %96 = cast(%var_5324, dtype="int64") /* ty=int64 */;
  %97 = cast(%var_5325, dtype="int64") /* ty=Tensor[(15, 4, 7), int64] */;
  %98 = @func_4828() /* ty=(Tensor[(650), float32],) */;
  %99 = %98.0;
  %100 = cast(%99, dtype="uint64") /* ty=Tensor[(650), uint64] */;
  %101 = cast(%var_5324, dtype="uint64") /* ty=uint64 */;
  %102 = add(%96, %97) /* ty=Tensor[(15, 4, 7), int64] */;
  %103 = @func_3274() /* ty=Tensor[(15, 3, 8), float64] */;
  %104 = bitwise_xor(%100, %101) /* ty=Tensor[(650), uint64] */;
  (%102, %103, %104)
}

def @func_4480() -> (Tensor[(15, 3, 8), float64], Tensor[(13, 10, 5), float32]) {
  %109 = fn () -> (Tensor[(15, 3, 8), float64], Tensor[(13, 10, 5), float32]) {
    %105 = @func_2942() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64]) */;
    %106 = @func_3308() /* ty=(Tensor[(13, 10, 5), float32], Tensor[(13, 10, 5), float32], float32) */;
    %107 = %105.1;
    %108 = %106.0;
    (%107, %108)
  };
  %109() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(13, 10, 5), float32]) */
}

def @func_3410() -> (float32,) {
  %110 = @func_3308() /* ty=(Tensor[(13, 10, 5), float32], Tensor[(13, 10, 5), float32], float32) */;
  %111 = %110.2;
  (%111,)
}

def @func_5736() -> (Tensor[(15, 3, 8), bool], Tensor[(650), float64], Tensor[(15, 3, 8), float64], Tensor[(64), float64]) {
  %112 = @func_1703() /* ty=Tensor[(15, 3, 8), float64] */;
  %113 = cast(meta[relay.Constant][7] /* ty=Tensor[(15, 3, 8), float64] */, dtype="bool") /* ty=Tensor[(15, 3, 8), bool] */;
  %114 = shape_of(%112, dtype="int32") /* ty=Tensor[(3), int32] */;
  %115 = cast(%112, dtype="bool") /* ty=Tensor[(15, 3, 8), bool] */;
  %116 = dyn.reshape(%113, %114, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %117 = @func_4828() /* ty=(Tensor[(650), float32],) */;
  %118 = %117.0;
  %119 = cast(meta[relay.Constant][8] /* ty=Tensor[(650), float32] */, dtype="float64") /* ty=Tensor[(650), float64] */;
  %120 = shape_of(%118, dtype="int32") /* ty=Tensor[(1), int32] */;
  %121 = cast(%118, dtype="float64") /* ty=Tensor[(650), float64] */;
  %122 = dyn.reshape(%119, %120, newshape=[]) /* ty=Tensor[(?), float64] */;
  %123 = @func_3602() /* ty=(float32, Tensor[(2464), int8], Tensor[(64), float64], Tensor[(480), float32], Tensor[(360), float64], Tensor[(8450), float32]) */;
  %124 = greater_equal(%115, %116) /* ty=Tensor[(15, 3, 8), bool] */;
  %125 = floor_mod(%121, %122) /* ty=Tensor[(650), float64] */;
  %126 = @func_1649() /* ty=Tensor[(15, 3, 8), float64] */;
  %127 = %123.2;
  (%124, %125, %126, %127)
}

def @func_6567() -> (Tensor[(15, 3, 8), float64], Tensor[(8450), float32]) {
  %128 = @func_5267() /* ty=(Tensor[(15, 3, 8), float64],) */;
  %129 = @func_3602() /* ty=(float32, Tensor[(2464), int8], Tensor[(64), float64], Tensor[(480), float32], Tensor[(360), float64], Tensor[(8450), float32]) */;
  %130 = %128.0;
  %131 = %129.5;
  (%130, %131)
}

def @func_1684() -> Tensor[(15, 3, 8), float64] {
  @func_1649() /* ty=Tensor[(15, 3, 8), float64] */
}

def @func_4243(%var_4235: Tensor[(60), float32]) -> (Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64], Tensor[(60), float32]) {
  %132 = @func_2669() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(13, 10, 5), float32], float32, Tensor[(650), float32]) */;
  %133 = cast(%var_4235, dtype="float32") /* ty=Tensor[(60), float32] */;
  %134 = reshape(%133, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %135 = @func_3229(%134) /* ty=(Tensor[(15, 3, 8), float64], Tensor[(12, 5), float32], Tensor[(60), float32]) */;
  %136 = %132.0;
  %137 = %135.0;
  (%136, %137, %var_4235)
}

def @func_7128() -> (Tensor[(15, 3, 8), float64],) {
  %138 = @func_2106() /* ty=Tensor[(15, 3, 8), float64] */;
  (%138,)
}

def @func_2794() -> (Tensor[(650), float32],) {
  %139 = @func_2669() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(13, 10, 5), float32], float32, Tensor[(650), float32]) */;
  %140 = %139.3;
  (%140,)
}

def @func_1024(%var_1023: Tensor[(16, 5, 6), float32]) -> (Tensor[(16, 5, 6), float32], float32, Tensor[(?, 650), bool]) {
  %157 = fn (%var_1003: Tensor[(16, 5, 6), float32]) -> (Tensor[(16, 5, 6), float32], float32, Tensor[(?, 650), bool]) {
    %141 = cast(%var_1003, dtype="float32") /* ty=Tensor[(16, 5, 6), float32] */;
    %142 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(16, 5, 6), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %143 = cast(meta[relay.Constant][9] /* ty=Tensor[(16, 5, 6), float32] */, dtype="float32") /* ty=Tensor[(16, 5, 6), float32] */;
    %144 = dyn.reshape(%141, %142, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %145 = cast(1.12205f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %146 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 650), float32] */, dtype="float32") /* ty=Tensor[(1, 650), float32] */;
    %147 = reshape(%145, newshape=[]) /* ty=float32 */;
    %148 = reshape(%146, newshape=[13, 10, 5]) /* ty=Tensor[(13, 10, 5), float32] */;
    %149 = @func_897(%147, %148) /* ty=(Tensor[(13, 10, 5), float32], Tensor[(132), uint8], Tensor[(11, 12, 11), float64]) */;
    %150 = %149.0;
    %151 = cast(%150, dtype="bool") /* ty=Tensor[(13, 10, 5), bool] */;
    %152 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(1, 650), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %153 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 650), float32] */, dtype="bool") /* ty=Tensor[(1, 650), bool] */;
    %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %155 = divide(%143, %144) /* ty=Tensor[(16, 5, 6), float32] */;
    %156 = logical_and(%153, %154) /* ty=Tensor[(?, 650), bool] */;
    (%155, 1.12205f /* ty=float32 */, %156)
  };
  %157(%var_1023) /* ty=(Tensor[(16, 5, 6), float32], float32, Tensor[(?, 650), bool]) */
}

def @func_4283() -> (Tensor[(650), float32], Tensor[(15, 3, 8), float64], Tensor[(7, 8), float64], Tensor[(56), float64]) {
  %164 = fn () -> (Tensor[(650), float32], Tensor[(15, 3, 8), float64], Tensor[(7, 8), float64], Tensor[(56), float64]) {
    %158 = @func_2794() /* ty=(Tensor[(650), float32],) */;
    %159 = cast(meta[relay.Constant][11] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
    %160 = reshape(%159, newshape=[7, 8]) /* ty=Tensor[(7, 8), float64] */;
    %161 = %158.0;
    %162 = @func_4081() /* ty=Tensor[(15, 3, 8), float64] */;
    %163 = @func_2810(%160) /* ty=Tensor[(7, 8), float64] */;
    (%161, %162, %163, meta[relay.Constant][11] /* ty=Tensor[(56), float64] */)
  };
  %164() /* ty=(Tensor[(650), float32], Tensor[(15, 3, 8), float64], Tensor[(7, 8), float64], Tensor[(56), float64]) */
}

def @func_5482() -> (Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64]) {
  @func_5480() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64]) */
}

def @func_2852() -> Tensor[(15, 3, 8), float64] {
  @func_1703() /* ty=Tensor[(15, 3, 8), float64] */
}

def @func_5170() -> (Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64]) {
  %165 = @func_1703() /* ty=Tensor[(15, 3, 8), float64] */;
  %166 = @func_1649() /* ty=Tensor[(15, 3, 8), float64] */;
  (%165, %166)
}

def @func_6478(%var_6475: Tensor[(2464), int16]) -> (Tensor[(13, 10, 5), float32], Tensor[(13, 10, 5), uint8], Tensor[(16, 11, 14), int16], Tensor[(2464), int16]) {
  %167 = @func_2833() /* ty=Tensor[(13, 10, 5), float32] */;
  %168 = cast(%167, dtype="float32") /* ty=Tensor[(13, 10, 5), float32] */;
  %169 = cast(%167, dtype="float64") /* ty=Tensor[(13, 10, 5), float64] */;
  %170 = atanh(%169) /* ty=Tensor[(13, 10, 5), float64] */;
  %171 = cast(%170, dtype="float32") /* ty=Tensor[(13, 10, 5), float32] */;
  %172 = asin(%171) /* ty=Tensor[(13, 10, 5), float32] */;
  %173 = cast(%170, dtype="uint8") /* ty=Tensor[(13, 10, 5), uint8] */;
  %174 = shape_of(%172, dtype="int32") /* ty=Tensor[(3), int32] */;
  %175 = cast(%172, dtype="uint8") /* ty=Tensor[(13, 10, 5), uint8] */;
  %176 = dyn.reshape(%173, %174, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %177 = cast(%var_6475, dtype="int16") /* ty=Tensor[(2464), int16] */;
  %178 = reshape(%177, newshape=[88, 28]) /* ty=Tensor[(88, 28), int16] */;
  %179 = @func_3837(%178) /* ty=(Tensor[(16, 11, 14), int16], Tensor[(88, 28), int16], Tensor[(15, 3, 8), float32]) */;
  %180 = atan(%168) /* ty=Tensor[(13, 10, 5), float32] */;
  %181 = maximum(%175, %176) /* ty=Tensor[(13, 10, 5), uint8] */;
  %182 = %179.0;
  (%180, %181, %182, %var_6475)
}

def @func_5248() -> Tensor[(15, 3, 8), float64] {
  @func_3274() /* ty=Tensor[(15, 3, 8), float64] */
}

def @func_5480() -> (Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64]) {
  %183 = @func_4400() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(13, 10, 5), float32]) */;
  %184 = %183.0;
  %185 = @func_4576() /* ty=Tensor[(15, 3, 8), float64] */;
  (%184, %185)
}

def @func_7341() -> (Tensor[(2464), int8], Tensor[(15, 3, 8), float32], Tensor[(15, 3, 8), float64]) {
  @func_7339() /* ty=(Tensor[(2464), int8], Tensor[(15, 3, 8), float32], Tensor[(15, 3, 8), float64]) */
}

def @func_2412(%var_2408: Tensor[(64), float64], %var_2409: Tensor[(325, 2), float32], %var_2410: Tensor[(480), float32], %var_2411: float32) -> (Tensor[(15, 3, 8), float64], Tensor[(5, 1, 9), float64], Tensor[(45), float64], Tensor[(8, 60), float32], Tensor[(64), float64], Tensor[(325, 2), float32], Tensor[(480), float32], Tensor[(2464), int8], Tensor[(11, 12, 11), float64], float32) {
  %213 = fn (%var_2382: Tensor[(64), float64], %var_2383: Tensor[(325, 2), float32], %var_2384: Tensor[(480), float32], %var_2405: float32) -> (Tensor[(15, 3, 8), float64], Tensor[(5, 1, 9), float64], Tensor[(45), float64], Tensor[(8, 60), float32], Tensor[(64), float64], Tensor[(325, 2), float32], Tensor[(480), float32], Tensor[(2464), int8], Tensor[(11, 12, 11), float64], float32) {
    %186 = cast(meta[relay.Constant][12] /* ty=Tensor[(45), float64] */, dtype="float64") /* ty=Tensor[(45), float64] */;
    %187 = reshape(%186, newshape=[5, 1, 9]) /* ty=Tensor[(5, 1, 9), float64] */;
    %188 = cast(%var_2382, dtype="float64") /* ty=Tensor[(64), float64] */;
    %189 = cast(%var_2382, dtype="float64") /* ty=Tensor[(64), float64] */;
    %190 = cast(%var_2383, dtype="float32") /* ty=Tensor[(325, 2), float32] */;
    %191 = cast(%var_2384, dtype="float32") /* ty=Tensor[(480), float32] */;
    %192 = cast(meta[relay.Constant][13] /* ty=Tensor[(2464), int16] */, dtype="int16") /* ty=Tensor[(2464), int16] */;
    %193 = reshape(%188, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float64] */;
    %194 = reshape(%189, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float64] */;
    %195 = reshape(%190, newshape=[650]) /* ty=Tensor[(650), float32] */;
    %196 = reshape(%191, newshape=[8, 60]) /* ty=Tensor[(8, 60), float32] */;
    %197 = reshape(%192, newshape=[16, 11, 14]) /* ty=Tensor[(16, 11, 14), int16] */;
    %198 = @func_2061(%193, %194, %195, %196, %197) /* ty=(Tensor[(4, 4, 4), bool], float32, Tensor[(210), float32], Tensor[(120), float32], Tensor[(650), float32], Tensor[(11, 12, 11), float64], Tensor[(?, 650), bool], Tensor[(8, 60), float32], Tensor[(2464), int16], Tensor[(16, 11, 14), bool], Tensor[(15, 3, 8), float64]) */;
    %199 = cast(meta[relay.Constant][14] /* ty=Tensor[(2464), int16] */, dtype="int8") /* ty=Tensor[(2464), int8] */;
    %200 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(2464), int16] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %201 = cast(meta[relay.Constant][13] /* ty=Tensor[(2464), int16] */, dtype="int8") /* ty=Tensor[(2464), int8] */;
    %202 = dyn.reshape(%199, %200, newshape=[]) /* ty=Tensor[(?), int8] */;
    %203 = cast(%var_2405, dtype="float32") /* ty=float32 */;
    %204 = cast(%var_2383, dtype="float32") /* ty=Tensor[(325, 2), float32] */;
    %205 = reshape(%203, newshape=[]) /* ty=float32 */;
    %206 = reshape(%204, newshape=[13, 10, 5]) /* ty=Tensor[(13, 10, 5), float32] */;
    %207 = @func_897(%205, %206) /* ty=(Tensor[(13, 10, 5), float32], Tensor[(132), uint8], Tensor[(11, 12, 11), float64]) */;
    %208 = @func_1703() /* ty=Tensor[(15, 3, 8), float64] */;
    %209 = @func_1389(%187) /* ty=Tensor[(5, 1, 9), float64] */;
    %210 = %198.7;
    %211 = add(%201, %202) /* ty=Tensor[(2464), int8] */;
    %212 = %207.2;
    (%208, %209, meta[relay.Constant][12] /* ty=Tensor[(45), float64] */, %210, %var_2382, %var_2383, %var_2384, %211, %212, %var_2405)
  };
  %213(%var_2408, %var_2409, %var_2410, %var_2411) /* ty=(Tensor[(15, 3, 8), float64], Tensor[(5, 1, 9), float64], Tensor[(45), float64], Tensor[(8, 60), float32], Tensor[(64), float64], Tensor[(325, 2), float32], Tensor[(480), float32], Tensor[(2464), int8], Tensor[(11, 12, 11), float64], float32) */
}

def @func_2161() -> (Tensor[(15, 3, 8), float64],) {
  %217 = fn () -> (Tensor[(15, 3, 8), float64],) {
    %214 = @func_1649() /* ty=Tensor[(15, 3, 8), float64] */;
    %215 = cast(%214, dtype="float64") /* ty=Tensor[(15, 3, 8), float64] */;
    %216 = sinh(%215) /* ty=Tensor[(15, 3, 8), float64] */;
    (%216,)
  };
  %217() /* ty=(Tensor[(15, 3, 8), float64],) */
}

def @func_5013(%var_5011: Tensor[(9, 1, 13), float64], %var_5012: Tensor[(9, 13, 13), float64]) -> (Tensor[(9, 1, 13), float64], Tensor[(650), float32], Tensor[(9, 13, 13), bool]) {
  %225 = fn (%var_4989: Tensor[(9, 1, 13), float64], %var_5005: Tensor[(9, 13, 13), float64]) -> (Tensor[(9, 1, 13), float64], Tensor[(650), float32], Tensor[(9, 13, 13), bool]) {
    %218 = cast(%var_4989, dtype="float64") /* ty=Tensor[(9, 1, 13), float64] */;
    %219 = @func_2794() /* ty=(Tensor[(650), float32],) */;
    %220 = cast(%var_4989, dtype="bool") /* ty=Tensor[(9, 1, 13), bool] */;
    %221 = cast(%var_5005, dtype="bool") /* ty=Tensor[(9, 13, 13), bool] */;
    %222 = cosh(%218) /* ty=Tensor[(9, 1, 13), float64] */;
    %223 = %219.0;
    %224 = logical_or(%220, %221) /* ty=Tensor[(9, 13, 13), bool] */;
    (%222, %223, %224)
  };
  %225(%var_5011, %var_5012) /* ty=(Tensor[(9, 1, 13), float64], Tensor[(650), float32], Tensor[(9, 13, 13), bool]) */
}

def @func_2606(%var_2604: Tensor[(5, 12, 12), int64]) -> (Tensor[(5, 12, 12), float64],) {
  @func_2603(%var_2604) /* ty=(Tensor[(5, 12, 12), float64],) */
}

def @func_1391(%var_1390: Tensor[(5, 1, 9), float64]) -> Tensor[(5, 1, 9), float64] {
  %227 = fn (%var_1382: Tensor[(5, 1, 9), float64]) -> Tensor[(5, 1, 9), float64] {
    %226 = cast(%var_1382, dtype="float64") /* ty=Tensor[(5, 1, 9), float64] */;
    cosh(%226) /* ty=Tensor[(5, 1, 9), float64] */
  };
  %227(%var_1390) /* ty=Tensor[(5, 1, 9), float64] */
}

def @func_7559() -> (Tensor[(15, 3, 8), float64], Tensor[(5, 1, 9), float64], Tensor[(45), float64]) {
  %232 = fn () -> (Tensor[(15, 3, 8), float64], Tensor[(5, 1, 9), float64], Tensor[(45), float64]) {
    %228 = cast(meta[relay.Constant][15] /* ty=Tensor[(45), float64] */, dtype="float64") /* ty=Tensor[(45), float64] */;
    %229 = reshape(%228, newshape=[5, 1, 9]) /* ty=Tensor[(5, 1, 9), float64] */;
    %230 = @func_4081() /* ty=Tensor[(15, 3, 8), float64] */;
    %231 = @func_1389(%229) /* ty=Tensor[(5, 1, 9), float64] */;
    (%230, %231, meta[relay.Constant][15] /* ty=Tensor[(45), float64] */)
  };
  %232() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(5, 1, 9), float64], Tensor[(45), float64]) */
}

def @func_3981() -> (Tensor[(13, 10, 5), bool], Tensor[(15, 3, 8), float64]) {
  %242 = fn () -> (Tensor[(13, 10, 5), bool], Tensor[(15, 3, 8), float64]) {
    %233 = @func_2833() /* ty=Tensor[(13, 10, 5), float32] */;
    %234 = cast(%233, dtype="float32") /* ty=Tensor[(13, 10, 5), float32] */;
    %235 = log10(%234) /* ty=Tensor[(13, 10, 5), float32] */;
    %236 = cast(%235, dtype="bool") /* ty=Tensor[(13, 10, 5), bool] */;
    %237 = shape_of(%233, dtype="int32") /* ty=Tensor[(3), int32] */;
    %238 = cast(%233, dtype="bool") /* ty=Tensor[(13, 10, 5), bool] */;
    %239 = dyn.reshape(%236, %237, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %240 = equal(%238, %239) /* ty=Tensor[(13, 10, 5), bool] */;
    %241 = @func_2127() /* ty=Tensor[(15, 3, 8), float64] */;
    (%240, %241)
  };
  %242() /* ty=(Tensor[(13, 10, 5), bool], Tensor[(15, 3, 8), float64]) */
}

def @func_3477(%var_3475: Tensor[(90), uint64]) -> (Tensor[(650), float32], Tensor[(15, 3, 2), uint64], Tensor[(90), uint64]) {
  @func_3474(%var_3475) /* ty=(Tensor[(650), float32], Tensor[(15, 3, 2), uint64], Tensor[(90), uint64]) */
}

def @func_6723() -> (Tensor[(6, 2, 3), float32], Tensor[(650), float32]) {
  %243 = @func_5374() /* ty=(Tensor[(6, 2, 3), float32], Tensor[(15, 3, 8), float64]) */;
  %244 = @func_4006() /* ty=(Tensor[(650), float32],) */;
  %245 = %243.0;
  %246 = %244.0;
  (%245, %246)
}

def @func_900(%var_898: float32, %var_899: Tensor[(13, 10, 5), float32]) -> (Tensor[(13, 10, 5), float32], Tensor[(132), uint8], Tensor[(11, 12, 11), float64]) {
  %257 = fn (%var_872: float32, %var_873: Tensor[(13, 10, 5), float32]) -> (Tensor[(13, 10, 5), float32], Tensor[(132), uint8], Tensor[(11, 12, 11), float64]) {
    %247 = cast(%var_872, dtype="float32") /* ty=float32 */;
    %248 = cast(%var_873, dtype="float32") /* ty=Tensor[(13, 10, 5), float32] */;
    %249 = cast(meta[relay.Constant][16] /* ty=Tensor[(132), uint8] */, dtype="uint8") /* ty=Tensor[(132), uint8] */;
    %250 = reshape(%249, newshape=[11, 12, 1]) /* ty=Tensor[(11, 12, 1), uint8] */;
    %251 = @func_564(%250) /* ty=(Tensor[(11, 12, 11), bool],) */;
    %252 = %251.0;
    %253 = cast(%252, dtype="float64") /* ty=Tensor[(11, 12, 11), float64] */;
    %254 = cast(%var_872, dtype="float64") /* ty=float64 */;
    %255 = mod(%247, %248) /* ty=Tensor[(13, 10, 5), float32] */;
    %256 = floor_mod(%253, %254) /* ty=Tensor[(11, 12, 11), float64] */;
    (%255, meta[relay.Constant][16] /* ty=Tensor[(132), uint8] */, %256)
  };
  %257(%var_898, %var_899) /* ty=(Tensor[(13, 10, 5), float32], Tensor[(132), uint8], Tensor[(11, 12, 11), float64]) */
}

def @func_3032(%var_3029: Tensor[(64), float64], %var_3030: Tensor[(650), float32], %var_3031: Tensor[(480), float32]) -> (Tensor[(15, 3, 8), float32], Tensor[(650), float32], Tensor[(64), float64], Tensor[(480), float32], Tensor[(2464), float64], Tensor[(11, 12, 11), float64], float32, Tensor[(2464), int16], Tensor[(650), float32], Tensor[(15, 3, 8), float32]) {
  @func_3027(%var_3029, %var_3030, %var_3031) /* ty=(Tensor[(15, 3, 8), float32], Tensor[(650), float32], Tensor[(64), float64], Tensor[(480), float32], Tensor[(2464), float64], Tensor[(11, 12, 11), float64], float32, Tensor[(2464), int16], Tensor[(650), float32], Tensor[(15, 3, 8), float32]) */
}

def @func_3922() -> (Tensor[(15, 3, 8), float32], Tensor[(15, 3, 8), float64]) {
  %258 = @func_1703() /* ty=Tensor[(15, 3, 8), float64] */;
  %259 = cast(%258, dtype="float32") /* ty=Tensor[(15, 3, 8), float32] */;
  %260 = asinh(%259) /* ty=Tensor[(15, 3, 8), float32] */;
  %261 = @func_2852() /* ty=Tensor[(15, 3, 8), float64] */;
  (%260, %261)
}

def @func_2813(%var_2811: Tensor[(7, 8), float64]) -> Tensor[(7, 8), float64] {
  @func_2810(%var_2811) /* ty=Tensor[(7, 8), float64] */
}

def @func_6115(%var_6113: Tensor[(15, 3, 8), float64], %var_6114: Tensor[(64, 1), float64]) -> (Tensor[(15, 3, 8), int32], Tensor[(64, 1), float64], Tensor[(64, 1), float64], Tensor[(480), float32], Tensor[(8450), float32], Tensor[(15, 3, 8), float64], Tensor[(12, 5), float32], Tensor[(60), float32]) {
  %293 = fn (%var_6070: Tensor[(15, 3, 8), float64], %var_6101: Tensor[(64, 1), float64]) -> (Tensor[(15, 3, 8), int32], Tensor[(64, 1), float64], Tensor[(64, 1), float64], Tensor[(480), float32], Tensor[(8450), float32], Tensor[(15, 3, 8), float64], Tensor[(12, 5), float32], Tensor[(60), float32]) {
    %262 = @func_5665() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64]) */;
    %263 = %262.2;
    %264 = cast(%var_6070, dtype="bool") /* ty=Tensor[(15, 3, 8), bool] */;
    %265 = shape_of(%263, dtype="int32") /* ty=Tensor[(3), int32] */;
    %266 = cast(%263, dtype="bool") /* ty=Tensor[(15, 3, 8), bool] */;
    %267 = dyn.reshape(%264, %265, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %268 = equal(%266, %267) /* ty=Tensor[(15, 3, 8), bool] */;
    %269 = cast(%268, dtype="uint64") /* ty=Tensor[(15, 3, 8), uint64] */;
    %270 = shape_of(%var_6070, dtype="int32") /* ty=Tensor[(3), int32] */;
    %271 = cast(%var_6070, dtype="uint64") /* ty=Tensor[(15, 3, 8), uint64] */;
    %272 = dyn.reshape(%269, %270, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %273 = subtract(%271, %272) /* ty=Tensor[(15, 3, 8), uint64] */;
    %274 = cast(%var_6070, dtype="int32") /* ty=Tensor[(15, 3, 8), int32] */;
    %275 = shape_of(%273, dtype="int32") /* ty=Tensor[(3), int32] */;
    %276 = cast(%273, dtype="int32") /* ty=Tensor[(15, 3, 8), int32] */;
    %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %278 = cast(%var_6101, dtype="float64") /* ty=Tensor[(64, 1), float64] */;
    %279 = cast(meta[relay.Constant][17] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
    %280 = cast(%273, dtype="float64") /* ty=Tensor[(15, 3, 8), float64] */;
    %281 = cast(meta[relay.Constant][18] /* ty=Tensor[(8450), float32] */, dtype="float32") /* ty=Tensor[(8450), float32] */;
    %282 = reshape(%278, newshape=[64, 1]) /* ty=Tensor[(64, 1), float64] */;
    %283 = reshape(%279, newshape=[480]) /* ty=Tensor[(480), float32] */;
    %284 = reshape(%280, newshape=[15, 3, 8]) /* ty=Tensor[(15, 3, 8), float64] */;
    %285 = reshape(%281, newshape=[650, 13]) /* ty=Tensor[(650, 13), float32] */;
    %286 = @func_2767(%282, %283, %284, %285) /* ty=(Tensor[(2464), int8], Tensor[(64, 1), float64], Tensor[(480), float32], float32, Tensor[(15, 3, 8), uint8], Tensor[(15, 3, 8), int16], Tensor[(8, 60), float32], Tensor[(15, 3, 8), float64], Tensor[(650, 13), bool]) */;
    %287 = cast(meta[relay.Constant][19] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
    %288 = reshape(%287, newshape=[12, 5]) /* ty=Tensor[(12, 5), float32] */;
    %289 = multiply(%276, %277) /* ty=Tensor[(15, 3, 8), int32] */;
    %290 = %286.1;
    %291 = @func_3635() /* ty=Tensor[(15, 3, 8), float64] */;
    %292 = @func_100(%288) /* ty=Tensor[(12, 5), float32] */;
    (%289, %290, %var_6101, meta[relay.Constant][17] /* ty=Tensor[(480), float32] */, meta[relay.Constant][18] /* ty=Tensor[(8450), float32] */, %291, %292, meta[relay.Constant][19] /* ty=Tensor[(60), float32] */)
  };
  %293(%var_6113, %var_6114) /* ty=(Tensor[(15, 3, 8), int32], Tensor[(64, 1), float64], Tensor[(64, 1), float64], Tensor[(480), float32], Tensor[(8450), float32], Tensor[(15, 3, 8), float64], Tensor[(12, 5), float32], Tensor[(60), float32]) */
}

def @func_6506() -> Tensor[(15, 3, 8), float64] {
  %295 = fn () -> Tensor[(15, 3, 8), float64] {
    %294 = @func_4179() /* ty=(Tensor[(15, 3, 8), float64],) */;
    %294.0
  };
  %295() /* ty=Tensor[(15, 3, 8), float64] */
}

def @func_6685() -> (Tensor[(6, 2, 3), float32], Tensor[(15, 3, 8), float32]) {
  %300 = fn () -> (Tensor[(6, 2, 3), float32], Tensor[(15, 3, 8), float32]) {
    %296 = @func_5211() /* ty=(Tensor[(6, 2, 3), float32],) */;
    %297 = @func_4155() /* ty=(Tensor[(15, 3, 8), float32],) */;
    %298 = %296.0;
    %299 = %297.0;
    (%298, %299)
  };
  %300() /* ty=(Tensor[(6, 2, 3), float32], Tensor[(15, 3, 8), float32]) */
}

def @func_7301() -> (Tensor[(15, 3, 8), float32],) {
  %301 = @func_6684() /* ty=(Tensor[(6, 2, 3), float32], Tensor[(15, 3, 8), float32]) */;
  %302 = %301.1;
  (%302,)
}

def @func_4157() -> (Tensor[(15, 3, 8), float32],) {
  @func_4155() /* ty=(Tensor[(15, 3, 8), float32],) */
}

def @func_5374() -> (Tensor[(6, 2, 3), float32], Tensor[(15, 3, 8), float64]) {
  %303 = @func_5211() /* ty=(Tensor[(6, 2, 3), float32],) */;
  %304 = %303.0;
  %305 = @func_2127() /* ty=Tensor[(15, 3, 8), float64] */;
  (%304, %305)
}

def @func_2796() -> (Tensor[(650), float32],) {
  @func_2794() /* ty=(Tensor[(650), float32],) */
}

def @func_6639(%var_6637: Tensor[(1521), float64], %var_6638: Tensor[(650), float32]) -> (Tensor[(15, 3, 8), float64], Tensor[(117), float64], Tensor[(1521), float64], Tensor[(650), uint8]) {
  %319 = fn (%var_6606: Tensor[(1521), float64], %var_6628: Tensor[(650), float32]) -> (Tensor[(15, 3, 8), float64], Tensor[(117), float64], Tensor[(1521), float64], Tensor[(650), uint8]) {
    %306 = @func_4479() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(13, 10, 5), float32]) */;
    %307 = cast(meta[relay.Constant][20] /* ty=Tensor[(117), float64] */, dtype="float64") /* ty=Tensor[(117), float64] */;
    %308 = cast(%var_6606, dtype="float64") /* ty=Tensor[(1521), float64] */;
    %309 = reshape(%307, newshape=[9, 1, 13]) /* ty=Tensor[(9, 1, 13), float64] */;
    %310 = reshape(%308, newshape=[9, 13, 13]) /* ty=Tensor[(9, 13, 13), float64] */;
    %311 = @func_5010(%309, %310) /* ty=(Tensor[(9, 1, 13), float64], Tensor[(650), float32], Tensor[(9, 13, 13), bool]) */;
    %312 = %311.1;
    %313 = cast(%var_6628, dtype="uint8") /* ty=Tensor[(650), uint8] */;
    %314 = shape_of(%312, dtype="int32") /* ty=Tensor[(1), int32] */;
    %315 = cast(%312, dtype="uint8") /* ty=Tensor[(650), uint8] */;
    %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?), uint8] */;
    %317 = %306.0;
    %318 = bitwise_or(%315, %316) /* ty=Tensor[(650), uint8] */;
    (%317, meta[relay.Constant][20] /* ty=Tensor[(117), float64] */, %var_6606, %318)
  };
  %319(%var_6637, %var_6638) /* ty=(Tensor[(15, 3, 8), float64], Tensor[(117), float64], Tensor[(1521), float64], Tensor[(650), uint8]) */
}

def @func_2669() -> (Tensor[(15, 3, 8), float64], Tensor[(13, 10, 5), float32], float32, Tensor[(650), float32]) {
  %320 = cast(-1.32306f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %321 = cast(meta[relay.Constant][21] /* ty=Tensor[(650), float32] */, dtype="float32") /* ty=Tensor[(650), float32] */;
  %322 = reshape(%320, newshape=[]) /* ty=float32 */;
  %323 = reshape(%321, newshape=[13, 10, 5]) /* ty=Tensor[(13, 10, 5), float32] */;
  %324 = @func_897(%322, %323) /* ty=(Tensor[(13, 10, 5), float32], Tensor[(132), uint8], Tensor[(11, 12, 11), float64]) */;
  %325 = @func_2106() /* ty=Tensor[(15, 3, 8), float64] */;
  %326 = %324.0;
  (%325, %326, -1.32306f /* ty=float32 */, meta[relay.Constant][21] /* ty=Tensor[(650), float32] */)
}

def @func_5993() -> (Tensor[(6, 2, 3), float32],) {
  @func_5991() /* ty=(Tensor[(6, 2, 3), float32],) */
}

def @func_4117(%var_4104: Tensor[(650), float32]) -> (Tensor[(650), float32], Tensor[(15, 3, 2), uint64], Tensor[(90), uint64]) {
  %327 = @func_2794() /* ty=(Tensor[(650), float32],) */;
  %328 = %327.0;
  %329 = cast(%var_4104, dtype="float32") /* ty=Tensor[(650), float32] */;
  %330 = shape_of(%328, dtype="int32") /* ty=Tensor[(1), int32] */;
  %331 = cast(%328, dtype="float32") /* ty=Tensor[(650), float32] */;
  %332 = dyn.reshape(%329, %330, newshape=[]) /* ty=Tensor[(?), float32] */;
  %333 = cast(meta[relay.Constant][22] /* ty=Tensor[(90), uint64] */, dtype="uint64") /* ty=Tensor[(90), uint64] */;
  %334 = reshape(%333, newshape=[15, 3, 2]) /* ty=Tensor[(15, 3, 2), uint64] */;
  %335 = minimum(%331, %332) /* ty=Tensor[(650), float32] */;
  %336 = @func_648(%334) /* ty=Tensor[(15, 3, 2), uint64] */;
  (%335, %336, meta[relay.Constant][22] /* ty=Tensor[(90), uint64] */)
}

def @func_5399(%var_5395: Tensor[(13, 10, 5), float32], %var_5396: Tensor[(64), float64], %var_5397: Tensor[(480), float32], %var_5398: Tensor[(2464), int16]) -> (Tensor[(13, 10, 5), int16], Tensor[(16, 11, 14), bool], Tensor[(64), float64], Tensor[(480), float32], Tensor[(2464), int16]) {
  %355 = fn (%var_5381: Tensor[(13, 10, 5), float32], %var_5390: Tensor[(64), float64], %var_5391: Tensor[(480), float32], %var_5392: Tensor[(2464), int16]) -> (Tensor[(13, 10, 5), int16], Tensor[(16, 11, 14), bool], Tensor[(64), float64], Tensor[(480), float32], Tensor[(2464), int16]) {
    %337 = @func_2833() /* ty=Tensor[(13, 10, 5), float32] */;
    %338 = cast(%var_5381, dtype="int16") /* ty=Tensor[(13, 10, 5), int16] */;
    %339 = shape_of(%337, dtype="int32") /* ty=Tensor[(3), int32] */;
    %340 = cast(%337, dtype="int16") /* ty=Tensor[(13, 10, 5), int16] */;
    %341 = dyn.reshape(%338, %339, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %342 = cast(%var_5390, dtype="float64") /* ty=Tensor[(64), float64] */;
    %343 = cast(%var_5390, dtype="float64") /* ty=Tensor[(64), float64] */;
    %344 = cast(%var_5381, dtype="float32") /* ty=Tensor[(13, 10, 5), float32] */;
    %345 = cast(%var_5391, dtype="float32") /* ty=Tensor[(480), float32] */;
    %346 = cast(%var_5392, dtype="int16") /* ty=Tensor[(2464), int16] */;
    %347 = reshape(%342, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float64] */;
    %348 = reshape(%343, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float64] */;
    %349 = reshape(%344, newshape=[650]) /* ty=Tensor[(650), float32] */;
    %350 = reshape(%345, newshape=[8, 60]) /* ty=Tensor[(8, 60), float32] */;
    %351 = reshape(%346, newshape=[16, 11, 14]) /* ty=Tensor[(16, 11, 14), int16] */;
    %352 = @func_2061(%347, %348, %349, %350, %351) /* ty=(Tensor[(4, 4, 4), bool], float32, Tensor[(210), float32], Tensor[(120), float32], Tensor[(650), float32], Tensor[(11, 12, 11), float64], Tensor[(?, 650), bool], Tensor[(8, 60), float32], Tensor[(2464), int16], Tensor[(16, 11, 14), bool], Tensor[(15, 3, 8), float64]) */;
    %353 = add(%340, %341) /* ty=Tensor[(13, 10, 5), int16] */;
    %354 = %352.9;
    (%353, %354, %var_5390, %var_5391, %var_5392)
  };
  %355(%var_5395, %var_5396, %var_5397, %var_5398) /* ty=(Tensor[(13, 10, 5), int16], Tensor[(16, 11, 14), bool], Tensor[(64), float64], Tensor[(480), float32], Tensor[(2464), int16]) */
}

def @func_7339() -> (Tensor[(2464), int8], Tensor[(15, 3, 8), float32], Tensor[(15, 3, 8), float64]) {
  %356 = @func_5514() /* ty=(Tensor[(2464), int8],) */;
  %357 = @func_7240() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float32], Tensor[(15, 3, 8), float32]) */;
  %358 = @func_2852() /* ty=Tensor[(15, 3, 8), float64] */;
  %359 = cast(%358, dtype="float64") /* ty=Tensor[(15, 3, 8), float64] */;
  %360 = %356.0;
  %361 = %357.1;
  %362 = log10(%359) /* ty=Tensor[(15, 3, 8), float64] */;
  (%360, %361, %362)
}

def @func_5916(%var_5915: Tensor[(13, 7, 6), uint64]) -> (Tensor[(13, 7, 6), uint64], Tensor[(13, 10, 5), float32], Tensor[(650), float32], float32, Tensor[(936), float32], Tensor[(13, 10, 5), float32], Tensor[(15, 3, 8), float64], Tensor[(11, 12, 11), float64], Tensor[(312), float32], Tensor[(15, 3, 8), int16]) {
  %397 = fn (%var_5805: Tensor[(13, 7, 6), uint64]) -> (Tensor[(13, 7, 6), uint64], Tensor[(13, 10, 5), float32], Tensor[(650), float32], float32, Tensor[(936), float32], Tensor[(13, 10, 5), float32], Tensor[(15, 3, 8), float64], Tensor[(11, 12, 11), float64], Tensor[(312), float32], Tensor[(15, 3, 8), int16]) {
    %363 = cast(%var_5805, dtype="uint64") /* ty=Tensor[(13, 7, 6), uint64] */;
    %364 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(13, 7, 6), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %365 = cast(meta[relay.Constant][23] /* ty=Tensor[(13, 7, 6), uint64] */, dtype="uint64") /* ty=Tensor[(13, 7, 6), uint64] */;
    %366 = dyn.reshape(%363, %364, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %367 = @func_2794() /* ty=(Tensor[(650), float32],) */;
    %368 = cast(meta[relay.Constant][24] /* ty=Tensor[(936), float32] */, dtype="float32") /* ty=Tensor[(936), float32] */;
    %369 = reshape(%368, newshape=[9, 13, 8]) /* ty=Tensor[(9, 13, 8), float32] */;
    %370 = @func_3338(%369) /* ty=(Tensor[(9, 13, 8), float32], Tensor[(9, 13, 8), float64], Tensor[(7, 8), float64], Tensor[(56), float64], float32) */;
    %371 = @func_4479() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(13, 10, 5), float32]) */;
    %372 = cast(meta[relay.Constant][25] /* ty=Tensor[(312), float32] */, dtype="float32") /* ty=Tensor[(312), float32] */;
    %373 = reshape(%372, newshape=[8, 13, 3]) /* ty=Tensor[(8, 13, 3), float32] */;
    %374 = @func_3184(%373) /* ty=(Tensor[(8, 13, 3), float64], Tensor[(650), float32], Tensor[(15, 3, 8), float64], Tensor[(8, 13, 3), float64], Tensor[(11, 12, 11), float64], Tensor[(64), float64], Tensor[(480), float32], float32) */;
    %375 = @func_3403() /* ty=Tensor[(15, 3, 8), float32] */;
    %376 = cast(%375, dtype="float64") /* ty=Tensor[(15, 3, 8), float64] */;
    %377 = sin(%376) /* ty=Tensor[(15, 3, 8), float64] */;
    %378 = cast(%377, dtype="float64") /* ty=Tensor[(15, 3, 8), float64] */;
    %379 = erf(%378) /* ty=Tensor[(15, 3, 8), float64] */;
    %380 = cast(%377, dtype="float32") /* ty=Tensor[(15, 3, 8), float32] */;
    %381 = shape_of(%379, dtype="int32") /* ty=Tensor[(3), int32] */;
    %382 = cast(%379, dtype="float32") /* ty=Tensor[(15, 3, 8), float32] */;
    %383 = dyn.reshape(%380, %381, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %384 = floor_mod(%382, %383) /* ty=Tensor[(15, 3, 8), float32] */;
    %385 = cast(%375, dtype="int16") /* ty=Tensor[(15, 3, 8), int16] */;
    %386 = shape_of(%384, dtype="int32") /* ty=Tensor[(3), int32] */;
    %387 = cast(%384, dtype="int16") /* ty=Tensor[(15, 3, 8), int16] */;
    %388 = dyn.reshape(%385, %386, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %389 = right_shift(%365, %366) /* ty=Tensor[(13, 7, 6), uint64] */;
    %390 = @func_2833() /* ty=Tensor[(13, 10, 5), float32] */;
    %391 = %367.0;
    %392 = %370.4;
    %393 = @func_2833() /* ty=Tensor[(13, 10, 5), float32] */;
    %394 = %371.0;
    %395 = %374.4;
    %396 = left_shift(%387, %388) /* ty=Tensor[(15, 3, 8), int16] */;
    (%389, %390, %391, %392, meta[relay.Constant][24] /* ty=Tensor[(936), float32] */, %393, %394, %395, meta[relay.Constant][25] /* ty=Tensor[(312), float32] */, %396)
  };
  %397(%var_5915) /* ty=(Tensor[(13, 7, 6), uint64], Tensor[(13, 10, 5), float32], Tensor[(650), float32], float32, Tensor[(936), float32], Tensor[(13, 10, 5), float32], Tensor[(15, 3, 8), float64], Tensor[(11, 12, 11), float64], Tensor[(312), float32], Tensor[(15, 3, 8), int16]) */
}

def @func_3602() -> (float32, Tensor[(2464), int8], Tensor[(64), float64], Tensor[(480), float32], Tensor[(360), float64], Tensor[(8450), float32]) {
  %398 = @func_2669() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(13, 10, 5), float32], float32, Tensor[(650), float32]) */;
  %399 = cast(meta[relay.Constant][26] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
  %400 = cast(meta[relay.Constant][27] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %401 = cast(meta[relay.Constant][28] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %402 = cast(meta[relay.Constant][29] /* ty=Tensor[(8450), float32] */, dtype="float32") /* ty=Tensor[(8450), float32] */;
  %403 = reshape(%399, newshape=[64, 1]) /* ty=Tensor[(64, 1), float64] */;
  %404 = reshape(%400, newshape=[480]) /* ty=Tensor[(480), float32] */;
  %405 = reshape(%401, newshape=[15, 3, 8]) /* ty=Tensor[(15, 3, 8), float64] */;
  %406 = reshape(%402, newshape=[650, 13]) /* ty=Tensor[(650, 13), float32] */;
  %407 = @func_2767(%403, %404, %405, %406) /* ty=(Tensor[(2464), int8], Tensor[(64, 1), float64], Tensor[(480), float32], float32, Tensor[(15, 3, 8), uint8], Tensor[(15, 3, 8), int16], Tensor[(8, 60), float32], Tensor[(15, 3, 8), float64], Tensor[(650, 13), bool]) */;
  %408 = %398.2;
  %409 = %407.0;
  (%408, %409, meta[relay.Constant][26] /* ty=Tensor[(64), float64] */, meta[relay.Constant][27] /* ty=Tensor[(480), float32] */, meta[relay.Constant][28] /* ty=Tensor[(360), float64] */, meta[relay.Constant][29] /* ty=Tensor[(8450), float32] */)
}

def @func_4639() -> (Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64]) {
  %415 = fn () -> (Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64]) {
    %410 = @func_4447() /* ty=(Tensor[(15, 3, 8), float64],) */;
    %411 = @func_2160() /* ty=(Tensor[(15, 3, 8), float64],) */;
    %412 = %410.0;
    %413 = @func_3367() /* ty=Tensor[(15, 3, 8), float64] */;
    %414 = %411.0;
    (%412, %413, %414)
  };
  %415() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64]) */
}

def @func_2548() -> (Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64]) {
  %416 = @func_1684() /* ty=Tensor[(15, 3, 8), float64] */;
  %417 = @func_2106() /* ty=Tensor[(15, 3, 8), float64] */;
  (%416, %417)
}

def @func_3635() -> Tensor[(15, 3, 8), float64] {
  %418 = @func_2548() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64]) */;
  %418.0
}

def @func_6940() -> (Tensor[(546), uint64],) {
  %419 = @func_6894() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(312), float32], Tensor[(546), uint64]) */;
  %420 = %419.2;
  (%420,)
}

def @func_5346(%var_5344: int64, %var_5345: Tensor[(15, 4, 7), int64]) -> (Tensor[(15, 4, 7), int64], Tensor[(15, 3, 8), float64], Tensor[(650), uint64]) {
  @func_5342(%var_5344, %var_5345) /* ty=(Tensor[(15, 4, 7), int64], Tensor[(15, 3, 8), float64], Tensor[(650), uint64]) */
}

def @func_2550() -> (Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64]) {
  @func_2548() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64]) */
}

def @func_3027(%var_2969: Tensor[(64), float64], %var_2970: Tensor[(650), float32], %var_2971: Tensor[(480), float32]) -> (Tensor[(15, 3, 8), float32], Tensor[(650), float32], Tensor[(64), float64], Tensor[(480), float32], Tensor[(2464), float64], Tensor[(11, 12, 11), float64], float32, Tensor[(2464), int16], Tensor[(650), float32], Tensor[(15, 3, 8), float32]) {
  %421 = @func_2127() /* ty=Tensor[(15, 3, 8), float64] */;
  %422 = cast(%421, dtype="float32") /* ty=Tensor[(15, 3, 8), float32] */;
  %423 = cast(%var_2969, dtype="float64") /* ty=Tensor[(64), float64] */;
  %424 = cast(%var_2969, dtype="float64") /* ty=Tensor[(64), float64] */;
  %425 = cast(%var_2970, dtype="float32") /* ty=Tensor[(650), float32] */;
  %426 = cast(%var_2971, dtype="float32") /* ty=Tensor[(480), float32] */;
  %427 = cast(meta[relay.Constant][30] /* ty=Tensor[(2464), int16] */, dtype="int16") /* ty=Tensor[(2464), int16] */;
  %428 = reshape(%423, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float64] */;
  %429 = reshape(%424, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float64] */;
  %430 = reshape(%425, newshape=[650]) /* ty=Tensor[(650), float32] */;
  %431 = reshape(%426, newshape=[8, 60]) /* ty=Tensor[(8, 60), float32] */;
  %432 = reshape(%427, newshape=[16, 11, 14]) /* ty=Tensor[(16, 11, 14), int16] */;
  %433 = @func_2061(%428, %429, %430, %431, %432) /* ty=(Tensor[(4, 4, 4), bool], float32, Tensor[(210), float32], Tensor[(120), float32], Tensor[(650), float32], Tensor[(11, 12, 11), float64], Tensor[(?, 650), bool], Tensor[(8, 60), float32], Tensor[(2464), int16], Tensor[(16, 11, 14), bool], Tensor[(15, 3, 8), float64]) */;
  %434 = cast(meta[relay.Constant][30] /* ty=Tensor[(2464), int16] */, dtype="float32") /* ty=Tensor[(2464), float32] */;
  %435 = cos(%434) /* ty=Tensor[(2464), float32] */;
  %436 = cast(meta[relay.Constant][30] /* ty=Tensor[(2464), int16] */, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %437 = shape_of(%435, dtype="int32") /* ty=Tensor[(1), int32] */;
  %438 = cast(%435, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %439 = dyn.reshape(%436, %437, newshape=[]) /* ty=Tensor[(?), float64] */;
  %440 = cast(%var_2969, dtype="float64") /* ty=Tensor[(64), float64] */;
  %441 = cast(%var_2970, dtype="float32") /* ty=Tensor[(650), float32] */;
  %442 = cast(%var_2971, dtype="float32") /* ty=Tensor[(480), float32] */;
  %443 = cast(-8.71035f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %444 = reshape(%440, newshape=[64]) /* ty=Tensor[(64), float64] */;
  %445 = reshape(%441, newshape=[325, 2]) /* ty=Tensor[(325, 2), float32] */;
  %446 = reshape(%442, newshape=[480]) /* ty=Tensor[(480), float32] */;
  %447 = reshape(%443, newshape=[]) /* ty=float32 */;
  %448 = @func_2407(%444, %445, %446, %447) /* ty=(Tensor[(15, 3, 8), float64], Tensor[(5, 1, 9), float64], Tensor[(45), float64], Tensor[(8, 60), float32], Tensor[(64), float64], Tensor[(325, 2), float32], Tensor[(480), float32], Tensor[(2464), int8], Tensor[(11, 12, 11), float64], float32) */;
  %449 = cast(%var_2969, dtype="float64") /* ty=Tensor[(64), float64] */;
  %450 = cast(%var_2969, dtype="float64") /* ty=Tensor[(64), float64] */;
  %451 = cast(%var_2970, dtype="float32") /* ty=Tensor[(650), float32] */;
  %452 = cast(%var_2971, dtype="float32") /* ty=Tensor[(480), float32] */;
  %453 = cast(meta[relay.Constant][30] /* ty=Tensor[(2464), int16] */, dtype="int16") /* ty=Tensor[(2464), int16] */;
  %454 = reshape(%449, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float64] */;
  %455 = reshape(%450, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float64] */;
  %456 = reshape(%451, newshape=[650]) /* ty=Tensor[(650), float32] */;
  %457 = reshape(%452, newshape=[8, 60]) /* ty=Tensor[(8, 60), float32] */;
  %458 = reshape(%453, newshape=[16, 11, 14]) /* ty=Tensor[(16, 11, 14), int16] */;
  %459 = @func_2061(%454, %455, %456, %457, %458) /* ty=(Tensor[(4, 4, 4), bool], float32, Tensor[(210), float32], Tensor[(120), float32], Tensor[(650), float32], Tensor[(11, 12, 11), float64], Tensor[(?, 650), bool], Tensor[(8, 60), float32], Tensor[(2464), int16], Tensor[(16, 11, 14), bool], Tensor[(15, 3, 8), float64]) */;
  %460 = cast(meta[relay.Constant][31] /* ty=Tensor[(650), float32] */, dtype="float32") /* ty=Tensor[(650), float32] */;
  %461 = shape_of(%var_2970, dtype="int32") /* ty=Tensor[(1), int32] */;
  %462 = cast(%var_2970, dtype="float32") /* ty=Tensor[(650), float32] */;
  %463 = dyn.reshape(%460, %461, newshape=[]) /* ty=Tensor[(?), float32] */;
  %464 = @func_2565() /* ty=(Tensor[(15, 3, 8), float32],) */;
  %465 = acos(%422) /* ty=Tensor[(15, 3, 8), float32] */;
  %466 = %433.4;
  %467 = floor_mod(%438, %439) /* ty=Tensor[(2464), float64] */;
  %468 = %448.8;
  %469 = %459.8;
  %470 = power(%462, %463) /* ty=Tensor[(650), float32] */;
  %471 = %464.0;
  (%465, %466, %var_2969, %var_2971, %467, %468, -8.71035f /* ty=float32 */, %469, %470, %471)
}

def @func_5667() -> (Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64]) {
  @func_5665() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64]) */
}

def @func_4360(%var_4358: Tensor[(1, 2464), int16], %var_4359: Tensor[(15, 4), float32]) -> (Tensor[(15, 3, 8), float64], Tensor[(64), float64], Tensor[(650), float32], Tensor[(480), float32], Tensor[(1, 2464), int16], Tensor[(60), float32], Tensor[(15, 4), float32], Tensor[(11, 12, 11), float64], Tensor[(650), float32], Tensor[(16, 11, 14), bool]) {
  %506 = fn (%var_4316: Tensor[(1, 2464), int16], %var_4321: Tensor[(15, 4), float32]) -> (Tensor[(15, 3, 8), float64], Tensor[(64), float64], Tensor[(650), float32], Tensor[(480), float32], Tensor[(1, 2464), int16], Tensor[(60), float32], Tensor[(15, 4), float32], Tensor[(11, 12, 11), float64], Tensor[(650), float32], Tensor[(16, 11, 14), bool]) {
    %472 = cast(%var_4321, dtype="float32") /* ty=Tensor[(15, 4), float32] */;
    %473 = reshape(%472, newshape=[60]) /* ty=Tensor[(60), float32] */;
    %474 = @func_3229(%473) /* ty=(Tensor[(15, 3, 8), float64], Tensor[(12, 5), float32], Tensor[(60), float32]) */;
    %475 = cast(meta[relay.Constant][32] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
    %476 = cast(meta[relay.Constant][33] /* ty=Tensor[(650), float32] */, dtype="float32") /* ty=Tensor[(650), float32] */;
    %477 = cast(meta[relay.Constant][34] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
    %478 = reshape(%475, newshape=[64]) /* ty=Tensor[(64), float64] */;
    %479 = reshape(%476, newshape=[650]) /* ty=Tensor[(650), float32] */;
    %480 = reshape(%477, newshape=[480]) /* ty=Tensor[(480), float32] */;
    %481 = @func_3027(%478, %479, %480) /* ty=(Tensor[(15, 3, 8), float32], Tensor[(650), float32], Tensor[(64), float64], Tensor[(480), float32], Tensor[(2464), float64], Tensor[(11, 12, 11), float64], float32, Tensor[(2464), int16], Tensor[(650), float32], Tensor[(15, 3, 8), float32]) */;
    %482 = @func_4006() /* ty=(Tensor[(650), float32],) */;
    %483 = cast(meta[relay.Constant][32] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
    %484 = cast(meta[relay.Constant][32] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
    %485 = cast(meta[relay.Constant][33] /* ty=Tensor[(650), float32] */, dtype="float32") /* ty=Tensor[(650), float32] */;
    %486 = cast(meta[relay.Constant][34] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
    %487 = cast(%var_4316, dtype="int16") /* ty=Tensor[(1, 2464), int16] */;
    %488 = reshape(%483, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float64] */;
    %489 = reshape(%484, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float64] */;
    %490 = reshape(%485, newshape=[650]) /* ty=Tensor[(650), float32] */;
    %491 = reshape(%486, newshape=[8, 60]) /* ty=Tensor[(8, 60), float32] */;
    %492 = reshape(%487, newshape=[16, 11, 14]) /* ty=Tensor[(16, 11, 14), int16] */;
    %493 = @func_2061(%488, %489, %490, %491, %492) /* ty=(Tensor[(4, 4, 4), bool], float32, Tensor[(210), float32], Tensor[(120), float32], Tensor[(650), float32], Tensor[(11, 12, 11), float64], Tensor[(?, 650), bool], Tensor[(8, 60), float32], Tensor[(2464), int16], Tensor[(16, 11, 14), bool], Tensor[(15, 3, 8), float64]) */;
    %494 = %493.9;
    %495 = cast(%494, dtype="float64") /* ty=Tensor[(16, 11, 14), float64] */;
    %496 = sinh(%495) /* ty=Tensor[(16, 11, 14), float64] */;
    %497 = cast(%496, dtype="bool") /* ty=Tensor[(16, 11, 14), bool] */;
    %498 = shape_of(%494, dtype="int32") /* ty=Tensor[(3), int32] */;
    %499 = cast(%494, dtype="bool") /* ty=Tensor[(16, 11, 14), bool] */;
    %500 = dyn.reshape(%497, %498, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %501 = @func_1703() /* ty=Tensor[(15, 3, 8), float64] */;
    %502 = %474.2;
    %503 = %481.5;
    %504 = %482.0;
    %505 = greater_equal(%499, %500) /* ty=Tensor[(16, 11, 14), bool] */;
    (%501, meta[relay.Constant][32] /* ty=Tensor[(64), float64] */, meta[relay.Constant][33] /* ty=Tensor[(650), float32] */, meta[relay.Constant][34] /* ty=Tensor[(480), float32] */, %var_4316, %502, %var_4321, %503, %504, %505)
  };
  %506(%var_4358, %var_4359) /* ty=(Tensor[(15, 3, 8), float64], Tensor[(64), float64], Tensor[(650), float32], Tensor[(480), float32], Tensor[(1, 2464), int16], Tensor[(60), float32], Tensor[(15, 4), float32], Tensor[(11, 12, 11), float64], Tensor[(650), float32], Tensor[(16, 11, 14), bool]) */
}

def @func_6025() -> (Tensor[(15, 3, 8), float64],) {
  %507 = @func_2852() /* ty=Tensor[(15, 3, 8), float64] */;
  (%507,)
}

def @func_7973() -> (Tensor[(15, 3, 8), float32], Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64]) {
  %508 = @func_6684() /* ty=(Tensor[(6, 2, 3), float32], Tensor[(15, 3, 8), float32]) */;
  %509 = @func_5480() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64]) */;
  %510 = %508.1;
  %511 = @func_3149() /* ty=Tensor[(15, 3, 8), float64] */;
  %512 = %509.1;
  (%510, %511, %512)
}

def @func_4120(%var_4118: Tensor[(650), float32]) -> (Tensor[(650), float32], Tensor[(15, 3, 2), uint64], Tensor[(90), uint64]) {
  @func_4117(%var_4118) /* ty=(Tensor[(650), float32], Tensor[(15, 3, 2), uint64], Tensor[(90), uint64]) */
}

def @func_3077() -> (Tensor[(15, 3, 8), float64],) {
  %514 = fn () -> (Tensor[(15, 3, 8), float64],) {
    %513 = @func_2852() /* ty=Tensor[(15, 3, 8), float64] */;
    (%513,)
  };
  %514() /* ty=(Tensor[(15, 3, 8), float64],) */
}

def @func_4401() -> (Tensor[(15, 3, 8), float64], Tensor[(13, 10, 5), float32]) {
  %518 = fn () -> (Tensor[(15, 3, 8), float64], Tensor[(13, 10, 5), float32]) {
    %515 = @func_3446() /* ty=(Tensor[(15, 3, 8), float64],) */;
    %516 = %515.0;
    %517 = @func_2833() /* ty=Tensor[(13, 10, 5), float32] */;
    (%516, %517)
  };
  %518() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(13, 10, 5), float32]) */
}

def @func_650(%var_649: Tensor[(15, 3, 2), uint64]) -> Tensor[(15, 3, 2), uint64] {
  %523 = fn (%var_642: Tensor[(15, 3, 2), uint64]) -> Tensor[(15, 3, 2), uint64] {
    %519 = cast(meta[relay.Constant][35] /* ty=Tensor[(15, 3, 2), uint64] */, dtype="uint64") /* ty=Tensor[(15, 3, 2), uint64] */;
    %520 = shape_of(%var_642, dtype="int32") /* ty=Tensor[(3), int32] */;
    %521 = cast(%var_642, dtype="uint64") /* ty=Tensor[(15, 3, 2), uint64] */;
    %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    add(%521, %522) /* ty=Tensor[(15, 3, 2), uint64] */
  };
  %523(%var_649) /* ty=Tensor[(15, 3, 2), uint64] */
}

def @func_3338(%var_3319: Tensor[(9, 13, 8), float32]) -> (Tensor[(9, 13, 8), float32], Tensor[(9, 13, 8), float64], Tensor[(7, 8), float64], Tensor[(56), float64], float32) {
  %524 = cast(%var_3319, dtype="float32") /* ty=Tensor[(9, 13, 8), float32] */;
  %525 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(9, 13, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %526 = cast(meta[relay.Constant][36] /* ty=Tensor[(9, 13, 8), float32] */, dtype="float32") /* ty=Tensor[(9, 13, 8), float32] */;
  %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %528 = cast(meta[relay.Constant][36] /* ty=Tensor[(9, 13, 8), float32] */, dtype="float64") /* ty=Tensor[(9, 13, 8), float64] */;
  %529 = cast(meta[relay.Constant][37] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
  %530 = reshape(%529, newshape=[7, 8]) /* ty=Tensor[(7, 8), float64] */;
  %531 = @func_3308() /* ty=(Tensor[(13, 10, 5), float32], Tensor[(13, 10, 5), float32], float32) */;
  %532 = divide(%526, %527) /* ty=Tensor[(9, 13, 8), float32] */;
  %533 = sin(%528) /* ty=Tensor[(9, 13, 8), float64] */;
  %534 = @func_2810(%530) /* ty=Tensor[(7, 8), float64] */;
  %535 = %531.2;
  (%532, %533, %534, meta[relay.Constant][37] /* ty=Tensor[(56), float64] */, %535)
}

def @func_4717(%var_4714: Tensor[(15, 3, 8), float64], %var_4715: Tensor[(64), float64], %var_4716: Tensor[(8, 308), int16]) -> (Tensor[(15, 3, 8), float64], float32, Tensor[(64), float64], Tensor[(650), float32], Tensor[(480), float32], Tensor[(8, 308), int16]) {
  @func_4712(%var_4714, %var_4715, %var_4716) /* ty=(Tensor[(15, 3, 8), float64], float32, Tensor[(64), float64], Tensor[(650), float32], Tensor[(480), float32], Tensor[(8, 308), int16]) */
}

def @func_1686() -> Tensor[(15, 3, 8), float64] {
  @func_1684() /* ty=Tensor[(15, 3, 8), float64] */
}

def @func_3186(%var_3185: Tensor[(8, 13, 3), float32]) -> (Tensor[(8, 13, 3), float64], Tensor[(650), float32], Tensor[(15, 3, 8), float64], Tensor[(8, 13, 3), float64], Tensor[(11, 12, 11), float64], Tensor[(64), float64], Tensor[(480), float32], float32) {
  %558 = fn (%var_3152: Tensor[(8, 13, 3), float32]) -> (Tensor[(8, 13, 3), float64], Tensor[(650), float32], Tensor[(15, 3, 8), float64], Tensor[(8, 13, 3), float64], Tensor[(11, 12, 11), float64], Tensor[(64), float64], Tensor[(480), float32], float32) {
    %536 = cast(meta[relay.Constant][38] /* ty=Tensor[(8, 13, 3), float32] */, dtype="float64") /* ty=Tensor[(8, 13, 3), float64] */;
    %537 = @func_2794() /* ty=(Tensor[(650), float32],) */;
    %538 = cast(meta[relay.Constant][38] /* ty=Tensor[(8, 13, 3), float32] */, dtype="float32") /* ty=Tensor[(8, 13, 3), float32] */;
    %539 = shape_of(%var_3152, dtype="int32") /* ty=Tensor[(3), int32] */;
    %540 = cast(%var_3152, dtype="float32") /* ty=Tensor[(8, 13, 3), float32] */;
    %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %542 = mod(%540, %541) /* ty=Tensor[(8, 13, 3), float32] */;
    %543 = cast(%542, dtype="float64") /* ty=Tensor[(8, 13, 3), float64] */;
    %544 = cast(meta[relay.Constant][39] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
    %545 = %537.0;
    %546 = cast(%545, dtype="float32") /* ty=Tensor[(650), float32] */;
    %547 = cast(meta[relay.Constant][40] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
    %548 = cast(3.92473f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %549 = reshape(%544, newshape=[64]) /* ty=Tensor[(64), float64] */;
    %550 = reshape(%546, newshape=[325, 2]) /* ty=Tensor[(325, 2), float32] */;
    %551 = reshape(%547, newshape=[480]) /* ty=Tensor[(480), float32] */;
    %552 = reshape(%548, newshape=[]) /* ty=float32 */;
    %553 = @func_2407(%549, %550, %551, %552) /* ty=(Tensor[(15, 3, 8), float64], Tensor[(5, 1, 9), float64], Tensor[(45), float64], Tensor[(8, 60), float32], Tensor[(64), float64], Tensor[(325, 2), float32], Tensor[(480), float32], Tensor[(2464), int8], Tensor[(11, 12, 11), float64], float32) */;
    %554 = cosh(%536) /* ty=Tensor[(8, 13, 3), float64] */;
    %555 = @func_2106() /* ty=Tensor[(15, 3, 8), float64] */;
    %556 = atan(%543) /* ty=Tensor[(8, 13, 3), float64] */;
    %557 = %553.8;
    (%554, %545, %555, %556, %557, meta[relay.Constant][39] /* ty=Tensor[(64), float64] */, meta[relay.Constant][40] /* ty=Tensor[(480), float32] */, 3.92473f /* ty=float32 */)
  };
  %558(%var_3185) /* ty=(Tensor[(8, 13, 3), float64], Tensor[(650), float32], Tensor[(15, 3, 8), float64], Tensor[(8, 13, 3), float64], Tensor[(11, 12, 11), float64], Tensor[(64), float64], Tensor[(480), float32], float32) */
}

def @func_2067(%var_2062: Tensor[(4, 4, 4), float64], %var_2063: Tensor[(4, 4, 4), float64], %var_2064: Tensor[(650), float32], %var_2065: Tensor[(8, 60), float32], %var_2066: Tensor[(16, 11, 14), int16]) -> (Tensor[(4, 4, 4), bool], float32, Tensor[(210), float32], Tensor[(120), float32], Tensor[(650), float32], Tensor[(11, 12, 11), float64], Tensor[(?, 650), bool], Tensor[(8, 60), float32], Tensor[(2464), int16], Tensor[(16, 11, 14), bool], Tensor[(15, 3, 8), float64]) {
  %592 = fn (%var_2004: Tensor[(4, 4, 4), float64], %var_2005: Tensor[(4, 4, 4), float64], %var_2022: Tensor[(650), float32], %var_2033: Tensor[(8, 60), float32], %var_2052: Tensor[(16, 11, 14), int16]) -> (Tensor[(4, 4, 4), bool], float32, Tensor[(210), float32], Tensor[(120), float32], Tensor[(650), float32], Tensor[(11, 12, 11), float64], Tensor[(?, 650), bool], Tensor[(8, 60), float32], Tensor[(2464), int16], Tensor[(16, 11, 14), bool], Tensor[(15, 3, 8), float64]) {
    %559 = cast(%var_2005, dtype="bool") /* ty=Tensor[(4, 4, 4), bool] */;
    %560 = shape_of(%var_2004, dtype="int32") /* ty=Tensor[(3), int32] */;
    %561 = cast(%var_2004, dtype="bool") /* ty=Tensor[(4, 4, 4), bool] */;
    %562 = dyn.reshape(%559, %560, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %563 = cast(meta[relay.Constant][41] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
    %564 = cast(meta[relay.Constant][42] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
    %565 = cast(%var_2022, dtype="float32") /* ty=Tensor[(650), float32] */;
    %566 = reshape(%563, newshape=[5, 7, 6]) /* ty=Tensor[(5, 7, 6), float32] */;
    %567 = reshape(%564, newshape=[6, 20]) /* ty=Tensor[(6, 20), float32] */;
    %568 = reshape(%565, newshape=[650]) /* ty=Tensor[(650), float32] */;
    %569 = @func_1620(%566, %567, %568) /* ty=(Tensor[(5, 7, 6), float32], Tensor[(11, 12, 11), bool], Tensor[(6, 20), float32], Tensor[(13, 10, 5), float32], float32, Tensor[(650), float32]) */;
    %570 = %569.4;
    %571 = cast(%570, dtype="float32") /* ty=float32 */;
    %572 = cast(%var_2022, dtype="float32") /* ty=Tensor[(650), float32] */;
    %573 = reshape(%571, newshape=[]) /* ty=float32 */;
    %574 = reshape(%572, newshape=[13, 10, 5]) /* ty=Tensor[(13, 10, 5), float32] */;
    %575 = @func_897(%573, %574) /* ty=(Tensor[(13, 10, 5), float32], Tensor[(132), uint8], Tensor[(11, 12, 11), float64]) */;
    %576 = cast(%var_2033, dtype="float32") /* ty=Tensor[(8, 60), float32] */;
    %577 = reshape(%576, newshape=[16, 5, 6]) /* ty=Tensor[(16, 5, 6), float32] */;
    %578 = @func_1022(%577) /* ty=(Tensor[(16, 5, 6), float32], float32, Tensor[(?, 650), bool]) */;
    %579 = cast(meta[relay.Constant][43] /* ty=Tensor[(2464), int16] */, dtype="int16") /* ty=Tensor[(2464), int16] */;
    %580 = reshape(%579, newshape=[16, 11, 14]) /* ty=Tensor[(16, 11, 14), int16] */;
    %581 = @func_1576(%580) /* ty=(Tensor[(16, 11, 14), int16], Tensor[(16, 11, 14), uint32], Tensor[(15, 3, 2), uint64], Tensor[(90), uint64]) */;
    %582 = %581.0;
    %583 = cast(%var_2052, dtype="bool") /* ty=Tensor[(16, 11, 14), bool] */;
    %584 = shape_of(%582, dtype="int32") /* ty=Tensor[(3), int32] */;
    %585 = cast(%582, dtype="bool") /* ty=Tensor[(16, 11, 14), bool] */;
    %586 = dyn.reshape(%583, %584, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %587 = greater(%561, %562) /* ty=Tensor[(4, 4, 4), bool] */;
    %588 = %575.2;
    %589 = %578.2;
    %590 = less_equal(%585, %586) /* ty=Tensor[(16, 11, 14), bool] */;
    %591 = @func_1703() /* ty=Tensor[(15, 3, 8), float64] */;
    (%587, %570, meta[relay.Constant][41] /* ty=Tensor[(210), float32] */, meta[relay.Constant][42] /* ty=Tensor[(120), float32] */, %var_2022, %588, %589, %var_2033, meta[relay.Constant][43] /* ty=Tensor[(2464), int16] */, %590, %591)
  };
  %592(%var_2062, %var_2063, %var_2064, %var_2065, %var_2066) /* ty=(Tensor[(4, 4, 4), bool], float32, Tensor[(210), float32], Tensor[(120), float32], Tensor[(650), float32], Tensor[(11, 12, 11), float64], Tensor[(?, 650), bool], Tensor[(8, 60), float32], Tensor[(2464), int16], Tensor[(16, 11, 14), bool], Tensor[(15, 3, 8), float64]) */
}

def @func_5516() -> (Tensor[(2464), int8],) {
  @func_5514() /* ty=(Tensor[(2464), int8],) */
}

def @func_5665() -> (Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64]) {
  %593 = @func_4400() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(13, 10, 5), float32]) */;
  %594 = %593.0;
  %595 = @func_2852() /* ty=Tensor[(15, 3, 8), float64] */;
  %596 = @func_1684() /* ty=Tensor[(15, 3, 8), float64] */;
  (%594, %595, %596)
}

def @func_3368() -> Tensor[(15, 3, 8), float64] {
  %597 = fn () -> Tensor[(15, 3, 8), float64] {
    @func_1649() /* ty=Tensor[(15, 3, 8), float64] */
  };
  %597() /* ty=Tensor[(15, 3, 8), float64] */
}

def @func_7281(%var_7280: Tensor[(6, 2, 3), float32]) -> (Tensor[(15, 3, 8), float64], Tensor[(6, 2, 3), int16]) {
  %606 = fn (%var_7266: Tensor[(6, 2, 3), float32]) -> (Tensor[(15, 3, 8), float64], Tensor[(6, 2, 3), int16]) {
    %598 = @func_6723() /* ty=(Tensor[(6, 2, 3), float32], Tensor[(650), float32]) */;
    %599 = %598.0;
    %600 = cast(%var_7266, dtype="int16") /* ty=Tensor[(6, 2, 3), int16] */;
    %601 = shape_of(%599, dtype="int32") /* ty=Tensor[(3), int32] */;
    %602 = cast(%599, dtype="int16") /* ty=Tensor[(6, 2, 3), int16] */;
    %603 = dyn.reshape(%600, %601, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %604 = @func_3640() /* ty=Tensor[(15, 3, 8), float64] */;
    %605 = minimum(%602, %603) /* ty=Tensor[(6, 2, 3), int16] */;
    (%604, %605)
  };
  %606(%var_7280) /* ty=(Tensor[(15, 3, 8), float64], Tensor[(6, 2, 3), int16]) */
}

def @func_6481(%var_6479: Tensor[(2464), int16]) -> (Tensor[(13, 10, 5), float32], Tensor[(13, 10, 5), uint8], Tensor[(16, 11, 14), int16], Tensor[(2464), int16]) {
  @func_6478(%var_6479) /* ty=(Tensor[(13, 10, 5), float32], Tensor[(13, 10, 5), uint8], Tensor[(16, 11, 14), int16], Tensor[(2464), int16]) */
}

def @func_7743(%var_7677: Tensor[(4, 140), float64]) -> (Tensor[(15, 3, 8), int64], Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float32], Tensor[(10, 8, 7), float64], Tensor[(650), float32], Tensor[(10, 8, 7), float32]) {
  %607 = @func_3367() /* ty=Tensor[(15, 3, 8), float64] */;
  %608 = cast(meta[relay.Constant][44] /* ty=Tensor[(15, 3, 8), float64] */, dtype="int64") /* ty=Tensor[(15, 3, 8), int64] */;
  %609 = shape_of(%607, dtype="int32") /* ty=Tensor[(3), int32] */;
  %610 = cast(%607, dtype="int64") /* ty=Tensor[(15, 3, 8), int64] */;
  %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %612 = @func_6684() /* ty=(Tensor[(6, 2, 3), float32], Tensor[(15, 3, 8), float32]) */;
  %613 = cast(%var_7677, dtype="float64") /* ty=Tensor[(4, 140), float64] */;
  %614 = reshape(%613, newshape=[10, 8, 7]) /* ty=Tensor[(10, 8, 7), float64] */;
  %615 = @func_4828() /* ty=(Tensor[(650), float32],) */;
  %616 = @func_6244(%614) /* ty=Tensor[(10, 8, 7), float64] */;
  %617 = cast(%616, dtype="float64") /* ty=Tensor[(10, 8, 7), float64] */;
  %618 = reshape(%617, newshape=[10, 8, 7]) /* ty=Tensor[(10, 8, 7), float64] */;
  %619 = @func_6244(%618) /* ty=Tensor[(10, 8, 7), float64] */;
  %620 = cast(%var_7677, dtype="float32") /* ty=Tensor[(4, 140), float32] */;
  %621 = shape_of(%619, dtype="int32") /* ty=Tensor[(3), int32] */;
  %622 = cast(%619, dtype="float32") /* ty=Tensor[(10, 8, 7), float32] */;
  %623 = dyn.reshape(%620, %621, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %624 = minimum(%610, %611) /* ty=Tensor[(15, 3, 8), int64] */;
  %625 = @func_3640() /* ty=Tensor[(15, 3, 8), float64] */;
  %626 = %612.1;
  %627 = %615.0;
  %628 = floor_divide(%622, %623) /* ty=Tensor[(10, 8, 7), float32] */;
  (%624, %625, %626, %616, %627, %628)
}

def @func_7796(%var_7784: Tensor[(180, 4), int64]) -> (Tensor[(15, 3, 8), float32], Tensor[(15, 3, 8), float64], Tensor[(5, 12, 12), float64], Tensor[(180, 4), int64], Tensor[(15, 3, 8), float64]) {
  %629 = @func_6684() /* ty=(Tensor[(6, 2, 3), float32], Tensor[(15, 3, 8), float32]) */;
  %630 = @func_5480() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64]) */;
  %631 = cast(%var_7784, dtype="int64") /* ty=Tensor[(180, 4), int64] */;
  %632 = reshape(%631, newshape=[5, 12, 12]) /* ty=Tensor[(5, 12, 12), int64] */;
  %633 = @func_2603(%632) /* ty=(Tensor[(5, 12, 12), float64],) */;
  %634 = %629.1;
  %635 = %630.1;
  %636 = %633.0;
  %637 = @func_1649() /* ty=Tensor[(15, 3, 8), float64] */;
  (%634, %635, %636, %var_7784, %637)
}

def @func_102(%var_101: Tensor[(12, 5), float32]) -> Tensor[(12, 5), float32] {
  %639 = fn (%var_83: Tensor[(12, 5), float32]) -> Tensor[(12, 5), float32] {
    %638 = cast(%var_83, dtype="float32") /* ty=Tensor[(12, 5), float32] */;
    sinh(%638) /* ty=Tensor[(12, 5), float32] */
  };
  %639(%var_101) /* ty=Tensor[(12, 5), float32] */
}

def @func_7839() -> Tensor[(15, 3, 8), float64] {
  %640 = @func_3446() /* ty=(Tensor[(15, 3, 8), float64],) */;
  %640.0
}

def @func_2129() -> Tensor[(15, 3, 8), float64] {
  @func_2127() /* ty=Tensor[(15, 3, 8), float64] */
}

def @func_2671() -> (Tensor[(15, 3, 8), float64], Tensor[(13, 10, 5), float32], float32, Tensor[(650), float32]) {
  @func_2669() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(13, 10, 5), float32], float32, Tensor[(650), float32]) */
}

def @func_2854() -> Tensor[(15, 3, 8), float64] {
  @func_2852() /* ty=Tensor[(15, 3, 8), float64] */
}

def @func_7096(%var_7061: Tensor[(6, 2, 3), float32]) -> (Tensor[(6, 2, 3), uint64], Tensor[(15, 3, 8), float64], Tensor[(6, 2, 3), float64], Tensor[(15, 3, 8), float64]) {
  %641 = @func_5374() /* ty=(Tensor[(6, 2, 3), float32], Tensor[(15, 3, 8), float64]) */;
  %642 = %641.0;
  %643 = cast(%var_7061, dtype="uint16") /* ty=Tensor[(6, 2, 3), uint16] */;
  %644 = shape_of(%642, dtype="int32") /* ty=Tensor[(3), int32] */;
  %645 = cast(%642, dtype="uint16") /* ty=Tensor[(6, 2, 3), uint16] */;
  %646 = dyn.reshape(%643, %644, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %647 = left_shift(%645, %646) /* ty=Tensor[(6, 2, 3), uint16] */;
  %648 = cast(%642, dtype="uint64") /* ty=Tensor[(6, 2, 3), uint64] */;
  %649 = shape_of(%647, dtype="int32") /* ty=Tensor[(3), int32] */;
  %650 = cast(%647, dtype="uint64") /* ty=Tensor[(6, 2, 3), uint64] */;
  %651 = dyn.reshape(%648, %649, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %652 = cast(%642, dtype="float64") /* ty=Tensor[(6, 2, 3), float64] */;
  %653 = maximum(%650, %651) /* ty=Tensor[(6, 2, 3), uint64] */;
  %654 = @func_2852() /* ty=Tensor[(15, 3, 8), float64] */;
  %655 = sigmoid(%652) /* ty=Tensor[(6, 2, 3), float64] */;
  %656 = @func_1649() /* ty=Tensor[(15, 3, 8), float64] */;
  (%653, %654, %655, %656)
}

def @func_3403() -> Tensor[(15, 3, 8), float32] {
  %657 = @func_3076() /* ty=(Tensor[(15, 3, 8), float64],) */;
  %658 = %657.0;
  %659 = cast(%658, dtype="float32") /* ty=Tensor[(15, 3, 8), float32] */;
  atan(%659) /* ty=Tensor[(15, 3, 8), float32] */
}

def @func_7927() -> Tensor[(13, 10, 5), float32] {
  %660 = @func_4479() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(13, 10, 5), float32]) */;
  %660.1
}

def @func_5738() -> (Tensor[(15, 3, 8), bool], Tensor[(650), float64], Tensor[(15, 3, 8), float64], Tensor[(64), float64]) {
  @func_5736() /* ty=(Tensor[(15, 3, 8), bool], Tensor[(650), float64], Tensor[(15, 3, 8), float64], Tensor[(64), float64]) */
}

def @func_6027() -> (Tensor[(15, 3, 8), float64],) {
  @func_6025() /* ty=(Tensor[(15, 3, 8), float64],) */
}

def @func_4985(%var_4984: Tensor[(15, 3, 8), float64]) -> (Tensor[(15, 3, 8), int16],) {
  %667 = fn (%var_4974: Tensor[(15, 3, 8), float64]) -> (Tensor[(15, 3, 8), int16],) {
    %661 = @func_3640() /* ty=Tensor[(15, 3, 8), float64] */;
    %662 = cast(%var_4974, dtype="int16") /* ty=Tensor[(15, 3, 8), int16] */;
    %663 = shape_of(%661, dtype="int32") /* ty=Tensor[(3), int32] */;
    %664 = cast(%661, dtype="int16") /* ty=Tensor[(15, 3, 8), int16] */;
    %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %666 = bitwise_xor(%664, %665) /* ty=Tensor[(15, 3, 8), int16] */;
    (%666,)
  };
  %667(%var_4984) /* ty=(Tensor[(15, 3, 8), int16],) */
}

def @main(%var_8125: Tensor[(5, 16, 2), float32]) -> (Tensor[(5, 16, 2), uint16], Tensor[(5, 16, 2), float64]) {
  %668 = cast(%var_8125, dtype="float32") /* ty=Tensor[(5, 16, 2), float32] */;
  %669 = atanh(%668) /* ty=Tensor[(5, 16, 2), float32] */;
  %670 = cast(%669, dtype="uint16") /* ty=Tensor[(5, 16, 2), uint16] */;
  %671 = shape_of(%var_8125, dtype="int32") /* ty=Tensor[(3), int32] */;
  %672 = cast(%var_8125, dtype="uint16") /* ty=Tensor[(5, 16, 2), uint16] */;
  %673 = dyn.reshape(%670, %671, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %674 = cast(%var_8125, dtype="float64") /* ty=Tensor[(5, 16, 2), float64] */;
  %675 = minimum(%672, %673) /* ty=Tensor[(5, 16, 2), uint16] */;
  %676 = sin(%674) /* ty=Tensor[(5, 16, 2), float64] */;
  (%675, %676)
}

def @func_1704() -> Tensor[(15, 3, 8), float64] {
  %677 = fn () -> Tensor[(15, 3, 8), float64] {
    @func_1649() /* ty=Tensor[(15, 3, 8), float64] */
  };
  %677() /* ty=Tensor[(15, 3, 8), float64] */
}

def @func_3232(%var_3230: Tensor[(60), float32]) -> (Tensor[(15, 3, 8), float64], Tensor[(12, 5), float32], Tensor[(60), float32]) {
  @func_3229(%var_3230) /* ty=(Tensor[(15, 3, 8), float64], Tensor[(12, 5), float32], Tensor[(60), float32]) */
}

def @func_3772(%var_3770: Tensor[(480), float32]) -> (Tensor[(15, 3, 8), float64], Tensor[(16, 11, 14), bool], Tensor[(1, 64), float64], Tensor[(650), float32], Tensor[(480), float32], Tensor[(2464), int16], Tensor[(15, 3, 8), float64]) {
  @func_3769(%var_3770) /* ty=(Tensor[(15, 3, 8), float64], Tensor[(16, 11, 14), bool], Tensor[(1, 64), float64], Tensor[(650), float32], Tensor[(480), float32], Tensor[(2464), int16], Tensor[(15, 3, 8), float64]) */
}

def @func_820(%var_818: Tensor[(15, 2, 4), float32], %var_819: Tensor[(15, 2, 4), float32]) -> (Tensor[(15, 2, 4), uint32], Tensor[(15, 2, 4), float32], Tensor[(12, 5), float32], Tensor[(3, 20), float32], Tensor[(15, 2, 4), float64], Tensor[(15, 2, 4), bool], Tensor[(11, 12, 11), bool], Tensor[(132), uint8], Tensor[(15, 3, 2), uint64], Tensor[(15, 6), uint64], Tensor[(12, 5), float32], Tensor[(11, 12, 11), bool], Tensor[(15, 3, 2), uint64], Tensor[(15, 2, 4), float64]) {
  %719 = fn (%var_725: Tensor[(15, 2, 4), float32], %var_770: Tensor[(15, 2, 4), float32]) -> (Tensor[(15, 2, 4), uint32], Tensor[(15, 2, 4), float32], Tensor[(12, 5), float32], Tensor[(3, 20), float32], Tensor[(15, 2, 4), float64], Tensor[(15, 2, 4), bool], Tensor[(11, 12, 11), bool], Tensor[(132), uint8], Tensor[(15, 3, 2), uint64], Tensor[(15, 6), uint64], Tensor[(12, 5), float32], Tensor[(11, 12, 11), bool], Tensor[(15, 3, 2), uint64], Tensor[(15, 2, 4), float64]) {
    %678 = cast(%var_725, dtype="float32") /* ty=Tensor[(15, 2, 4), float32] */;
    %679 = sigmoid(%678) /* ty=Tensor[(15, 2, 4), float32] */;
    %680 = cast(%var_725, dtype="uint32") /* ty=Tensor[(15, 2, 4), uint32] */;
    %681 = shape_of(%679, dtype="int32") /* ty=Tensor[(3), int32] */;
    %682 = cast(%679, dtype="uint32") /* ty=Tensor[(15, 2, 4), uint32] */;
    %683 = dyn.reshape(%680, %681, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %684 = cast(%var_725, dtype="float32") /* ty=Tensor[(15, 2, 4), float32] */;
    %685 = shape_of(%679, dtype="int32") /* ty=Tensor[(3), int32] */;
    %686 = cast(%679, dtype="float32") /* ty=Tensor[(15, 2, 4), float32] */;
    %687 = dyn.reshape(%684, %685, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %688 = cast(meta[relay.Constant][45] /* ty=Tensor[(3, 20), float32] */, dtype="float32") /* ty=Tensor[(3, 20), float32] */;
    %689 = reshape(%688, newshape=[12, 5]) /* ty=Tensor[(12, 5), float32] */;
    %690 = cast(%var_725, dtype="float64") /* ty=Tensor[(15, 2, 4), float64] */;
    %691 = cast(%var_770, dtype="bool") /* ty=Tensor[(15, 2, 4), bool] */;
    %692 = shape_of(%var_725, dtype="int32") /* ty=Tensor[(3), int32] */;
    %693 = cast(%var_725, dtype="bool") /* ty=Tensor[(15, 2, 4), bool] */;
    %694 = dyn.reshape(%691, %692, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %695 = cast(meta[relay.Constant][46] /* ty=Tensor[(132), uint8] */, dtype="uint8") /* ty=Tensor[(132), uint8] */;
    %696 = reshape(%695, newshape=[11, 12, 1]) /* ty=Tensor[(11, 12, 1), uint8] */;
    %697 = @func_564(%696) /* ty=(Tensor[(11, 12, 11), bool],) */;
    %698 = cast(meta[relay.Constant][47] /* ty=Tensor[(15, 6), uint64] */, dtype="uint64") /* ty=Tensor[(15, 6), uint64] */;
    %699 = reshape(%698, newshape=[15, 3, 2]) /* ty=Tensor[(15, 3, 2), uint64] */;
    %700 = @func_100(%689) /* ty=Tensor[(12, 5), float32] */;
    %701 = cast(%700, dtype="float32") /* ty=Tensor[(12, 5), float32] */;
    %702 = reshape(%701, newshape=[12, 5]) /* ty=Tensor[(12, 5), float32] */;
    %703 = cast(meta[relay.Constant][46] /* ty=Tensor[(132), uint8] */, dtype="uint8") /* ty=Tensor[(132), uint8] */;
    %704 = reshape(%703, newshape=[11, 12, 1]) /* ty=Tensor[(11, 12, 1), uint8] */;
    %705 = @func_564(%704) /* ty=(Tensor[(11, 12, 11), bool],) */;
    %706 = @func_648(%699) /* ty=Tensor[(15, 3, 2), uint64] */;
    %707 = cast(%706, dtype="uint64") /* ty=Tensor[(15, 3, 2), uint64] */;
    %708 = reshape(%707, newshape=[15, 3, 2]) /* ty=Tensor[(15, 3, 2), uint64] */;
    %709 = cast(%679, dtype="float64") /* ty=Tensor[(15, 2, 4), float64] */;
    %710 = bitwise_xor(%682, %683) /* ty=Tensor[(15, 2, 4), uint32] */;
    %711 = mod(%686, %687) /* ty=Tensor[(15, 2, 4), float32] */;
    %712 = rsqrt(%690) /* ty=Tensor[(15, 2, 4), float64] */;
    %713 = logical_and(%693, %694) /* ty=Tensor[(15, 2, 4), bool] */;
    %714 = %697.0;
    %715 = @func_100(%702) /* ty=Tensor[(12, 5), float32] */;
    %716 = %705.0;
    %717 = @func_648(%708) /* ty=Tensor[(15, 3, 2), uint64] */;
    %718 = asinh(%709) /* ty=Tensor[(15, 2, 4), float64] */;
    (%710, %711, %700, meta[relay.Constant][45] /* ty=Tensor[(3, 20), float32] */, %712, %713, %714, meta[relay.Constant][46] /* ty=Tensor[(132), uint8] */, %706, meta[relay.Constant][47] /* ty=Tensor[(15, 6), uint64] */, %715, %716, %717, %718)
  };
  %719(%var_818, %var_819) /* ty=(Tensor[(15, 2, 4), uint32], Tensor[(15, 2, 4), float32], Tensor[(12, 5), float32], Tensor[(3, 20), float32], Tensor[(15, 2, 4), float64], Tensor[(15, 2, 4), bool], Tensor[(11, 12, 11), bool], Tensor[(132), uint8], Tensor[(15, 3, 2), uint64], Tensor[(15, 6), uint64], Tensor[(12, 5), float32], Tensor[(11, 12, 11), bool], Tensor[(15, 3, 2), uint64], Tensor[(15, 2, 4), float64]) */
}

def @func_5796() -> Tensor[(15, 3, 8), float64] {
  %720 = fn () -> Tensor[(15, 3, 8), float64] {
    @func_1703() /* ty=Tensor[(15, 3, 8), float64] */
  };
  %720() /* ty=Tensor[(15, 3, 8), float64] */
}

def @func_6199(%var_6177: Tensor[(3, 44), uint8], %var_6186: Tensor[(120), float32], %var_6187: Tensor[(650), float32]) -> (Tensor[(11, 12, 11), bool], Tensor[(6, 20), float32], Tensor[(35, 6), float32], Tensor[(120), float32], Tensor[(650), float32], Tensor[(3, 44), bool]) {
  %721 = cast(%var_6177, dtype="uint8") /* ty=Tensor[(3, 44), uint8] */;
  %722 = reshape(%721, newshape=[11, 12, 1]) /* ty=Tensor[(11, 12, 1), uint8] */;
  %723 = @func_564(%722) /* ty=(Tensor[(11, 12, 11), bool],) */;
  %724 = cast(meta[relay.Constant][48] /* ty=Tensor[(35, 6), float32] */, dtype="float32") /* ty=Tensor[(35, 6), float32] */;
  %725 = cast(%var_6186, dtype="float32") /* ty=Tensor[(120), float32] */;
  %726 = cast(%var_6187, dtype="float32") /* ty=Tensor[(650), float32] */;
  %727 = reshape(%724, newshape=[5, 7, 6]) /* ty=Tensor[(5, 7, 6), float32] */;
  %728 = reshape(%725, newshape=[6, 20]) /* ty=Tensor[(6, 20), float32] */;
  %729 = reshape(%726, newshape=[650]) /* ty=Tensor[(650), float32] */;
  %730 = @func_1620(%727, %728, %729) /* ty=(Tensor[(5, 7, 6), float32], Tensor[(11, 12, 11), bool], Tensor[(6, 20), float32], Tensor[(13, 10, 5), float32], float32, Tensor[(650), float32]) */;
  %731 = @func_3410() /* ty=(float32,) */;
  %732 = %731.0;
  %733 = cast(%732, dtype="bool") /* ty=bool */;
  %734 = cast(%var_6177, dtype="bool") /* ty=Tensor[(3, 44), bool] */;
  %735 = %723.0;
  %736 = %730.2;
  %737 = less(%733, %734) /* ty=Tensor[(3, 44), bool] */;
  (%735, %736, meta[relay.Constant][48] /* ty=Tensor[(35, 6), float32] */, %var_6186, %var_6187, %737)
}

def @func_3474(%var_3464: Tensor[(90), uint64]) -> (Tensor[(650), float32], Tensor[(15, 3, 2), uint64], Tensor[(90), uint64]) {
  %738 = @func_2794() /* ty=(Tensor[(650), float32],) */;
  %739 = cast(%var_3464, dtype="uint64") /* ty=Tensor[(90), uint64] */;
  %740 = reshape(%739, newshape=[15, 3, 2]) /* ty=Tensor[(15, 3, 2), uint64] */;
  %741 = %738.0;
  %742 = @func_648(%740) /* ty=Tensor[(15, 3, 2), uint64] */;
  (%741, %742, %var_3464)
}

def @func_3839(%var_3838: Tensor[(88, 28), int16]) -> (Tensor[(16, 11, 14), int16], Tensor[(88, 28), int16], Tensor[(15, 3, 8), float32]) {
  %755 = fn (%var_3807: Tensor[(88, 28), int16]) -> (Tensor[(16, 11, 14), int16], Tensor[(88, 28), int16], Tensor[(15, 3, 8), float32]) {
    %743 = cast(%var_3807, dtype="int16") /* ty=Tensor[(88, 28), int16] */;
    %744 = reshape(%743, newshape=[16, 11, 14]) /* ty=Tensor[(16, 11, 14), int16] */;
    %745 = @func_1576(%744) /* ty=(Tensor[(16, 11, 14), int16], Tensor[(16, 11, 14), uint32], Tensor[(15, 3, 2), uint64], Tensor[(90), uint64]) */;
    %746 = @func_3149() /* ty=Tensor[(15, 3, 8), float64] */;
    %747 = @func_3694() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(2464), int16], Tensor[(650), float64]) */;
    %748 = %747.0;
    %749 = cast(%748, dtype="float32") /* ty=Tensor[(15, 3, 8), float32] */;
    %750 = shape_of(%746, dtype="int32") /* ty=Tensor[(3), int32] */;
    %751 = cast(%746, dtype="float32") /* ty=Tensor[(15, 3, 8), float32] */;
    %752 = dyn.reshape(%749, %750, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %753 = %745.0;
    %754 = power(%751, %752) /* ty=Tensor[(15, 3, 8), float32] */;
    (%753, %var_3807, %754)
  };
  %755(%var_3838) /* ty=(Tensor[(16, 11, 14), int16], Tensor[(88, 28), int16], Tensor[(15, 3, 8), float32]) */
}

def @func_6981() -> (Tensor[(6, 2, 3), float32],) {
  %758 = fn () -> (Tensor[(6, 2, 3), float32],) {
    %756 = @func_5991() /* ty=(Tensor[(6, 2, 3), float32],) */;
    %757 = %756.0;
    (%757,)
  };
  %758() /* ty=(Tensor[(6, 2, 3), float32],) */
}

def @func_7099(%var_7097: Tensor[(6, 2, 3), float32]) -> (Tensor[(6, 2, 3), uint64], Tensor[(15, 3, 8), float64], Tensor[(6, 2, 3), float64], Tensor[(15, 3, 8), float64]) {
  @func_7096(%var_7097) /* ty=(Tensor[(6, 2, 3), uint64], Tensor[(15, 3, 8), float64], Tensor[(6, 2, 3), float64], Tensor[(15, 3, 8), float64]) */
}

def @func_3641() -> Tensor[(15, 3, 8), float64] {
  %760 = fn () -> Tensor[(15, 3, 8), float64] {
    %759 = @func_3446() /* ty=(Tensor[(15, 3, 8), float64],) */;
    %759.0
  };
  %760() /* ty=Tensor[(15, 3, 8), float64] */
}

def @func_6160() -> (Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float32]) {
  @func_6158() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float32]) */
}

def @func_4449() -> (Tensor[(15, 3, 8), float64],) {
  @func_4447() /* ty=(Tensor[(15, 3, 8), float64],) */
}

def @func_4576() -> Tensor[(15, 3, 8), float64] {
  %761 = @func_4400() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(13, 10, 5), float32]) */;
  %761.0
}

def @func_7841() -> Tensor[(15, 3, 8), float64] {
  @func_7839() /* ty=Tensor[(15, 3, 8), float64] */
}

def @func_4548(%var_4546: Tensor[(15, 3, 8), float64]) -> (Tensor[(15, 3, 8), bool], Tensor[(15, 3, 8), float32], Tensor[(15, 3, 8), float64]) {
  @func_4545(%var_4546) /* ty=(Tensor[(15, 3, 8), bool], Tensor[(15, 3, 8), float32], Tensor[(15, 3, 8), float64]) */
}

def @func_4886(%var_4885: Tensor[(14, 3, 16), int32]) -> Tensor[(14, 3, 16), int32] {
  %766 = fn (%var_4880: Tensor[(14, 3, 16), int32]) -> Tensor[(14, 3, 16), int32] {
    %762 = cast(%var_4880, dtype="int32") /* ty=Tensor[(14, 3, 16), int32] */;
    %763 = shape_of(meta[relay.Constant][49] /* ty=Tensor[(14, 3, 16), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %764 = cast(meta[relay.Constant][49] /* ty=Tensor[(14, 3, 16), int32] */, dtype="int32") /* ty=Tensor[(14, 3, 16), int32] */;
    %765 = dyn.reshape(%762, %763, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    add(%764, %765) /* ty=Tensor[(14, 3, 16), int32] */
  };
  %766(%var_4885) /* ty=Tensor[(14, 3, 16), int32] */
}

def @func_3617() -> (Tensor[(15, 3, 8), float32],) {
  @func_3615() /* ty=(Tensor[(15, 3, 8), float32],) */
}

def @func_7303() -> (Tensor[(15, 3, 8), float32],) {
  @func_7301() /* ty=(Tensor[(15, 3, 8), float32],) */
}

def @func_4712(%var_4679: Tensor[(15, 3, 8), float64], %var_4690: Tensor[(64), float64], %var_4693: Tensor[(8, 308), int16]) -> (Tensor[(15, 3, 8), float64], float32, Tensor[(64), float64], Tensor[(650), float32], Tensor[(480), float32], Tensor[(8, 308), int16]) {
  %767 = @func_1684() /* ty=Tensor[(15, 3, 8), float64] */;
  %768 = cast(%var_4679, dtype="float64") /* ty=Tensor[(15, 3, 8), float64] */;
  %769 = shape_of(%767, dtype="int32") /* ty=Tensor[(3), int32] */;
  %770 = cast(%767, dtype="float64") /* ty=Tensor[(15, 3, 8), float64] */;
  %771 = dyn.reshape(%768, %769, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %772 = cast(%var_4690, dtype="float64") /* ty=Tensor[(64), float64] */;
  %773 = cast(%var_4690, dtype="float64") /* ty=Tensor[(64), float64] */;
  %774 = cast(meta[relay.Constant][50] /* ty=Tensor[(650), float32] */, dtype="float32") /* ty=Tensor[(650), float32] */;
  %775 = cast(meta[relay.Constant][51] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %776 = cast(%var_4693, dtype="int16") /* ty=Tensor[(8, 308), int16] */;
  %777 = reshape(%772, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float64] */;
  %778 = reshape(%773, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float64] */;
  %779 = reshape(%774, newshape=[650]) /* ty=Tensor[(650), float32] */;
  %780 = reshape(%775, newshape=[8, 60]) /* ty=Tensor[(8, 60), float32] */;
  %781 = reshape(%776, newshape=[16, 11, 14]) /* ty=Tensor[(16, 11, 14), int16] */;
  %782 = @func_2061(%777, %778, %779, %780, %781) /* ty=(Tensor[(4, 4, 4), bool], float32, Tensor[(210), float32], Tensor[(120), float32], Tensor[(650), float32], Tensor[(11, 12, 11), float64], Tensor[(?, 650), bool], Tensor[(8, 60), float32], Tensor[(2464), int16], Tensor[(16, 11, 14), bool], Tensor[(15, 3, 8), float64]) */;
  %783 = mod(%770, %771) /* ty=Tensor[(15, 3, 8), float64] */;
  %784 = %782.1;
  (%783, %784, %var_4690, meta[relay.Constant][50] /* ty=Tensor[(650), float32] */, meta[relay.Constant][51] /* ty=Tensor[(480), float32] */, %var_4693)
}

def @func_7746(%var_7744: Tensor[(4, 140), float64]) -> (Tensor[(15, 3, 8), int64], Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float32], Tensor[(10, 8, 7), float64], Tensor[(650), float32], Tensor[(10, 8, 7), float32]) {
  @func_7743(%var_7744) /* ty=(Tensor[(15, 3, 8), int64], Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float32], Tensor[(10, 8, 7), float64], Tensor[(650), float32], Tensor[(10, 8, 7), float32]) */
}

def @func_1576(%var_1554: Tensor[(16, 11, 14), int16]) -> (Tensor[(16, 11, 14), int16], Tensor[(16, 11, 14), uint32], Tensor[(15, 3, 2), uint64], Tensor[(90), uint64]) {
  %785 = cast(%var_1554, dtype="int16") /* ty=Tensor[(16, 11, 14), int16] */;
  %786 = shape_of(meta[relay.Constant][52] /* ty=Tensor[(16, 11, 14), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %787 = cast(meta[relay.Constant][52] /* ty=Tensor[(16, 11, 14), int16] */, dtype="int16") /* ty=Tensor[(16, 11, 14), int16] */;
  %788 = dyn.reshape(%785, %786, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %789 = cast(%var_1554, dtype="uint32") /* ty=Tensor[(16, 11, 14), uint32] */;
  %790 = shape_of(meta[relay.Constant][52] /* ty=Tensor[(16, 11, 14), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %791 = cast(meta[relay.Constant][52] /* ty=Tensor[(16, 11, 14), int16] */, dtype="uint32") /* ty=Tensor[(16, 11, 14), uint32] */;
  %792 = dyn.reshape(%789, %790, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %793 = cast(meta[relay.Constant][53] /* ty=Tensor[(90), uint64] */, dtype="uint64") /* ty=Tensor[(90), uint64] */;
  %794 = reshape(%793, newshape=[15, 3, 2]) /* ty=Tensor[(15, 3, 2), uint64] */;
  %795 = left_shift(%787, %788) /* ty=Tensor[(16, 11, 14), int16] */;
  %796 = logical_xor(%791, %792) /* ty=Tensor[(16, 11, 14), uint32] */;
  %797 = @func_648(%794) /* ty=Tensor[(15, 3, 2), uint64] */;
  (%795, %796, %797, meta[relay.Constant][53] /* ty=Tensor[(90), uint64] */)
}

def @func_2834() -> Tensor[(13, 10, 5), float32] {
  %799 = fn () -> Tensor[(13, 10, 5), float32] {
    %798 = @func_2669() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(13, 10, 5), float32], float32, Tensor[(650), float32]) */;
    %798.1
  };
  %799() /* ty=Tensor[(13, 10, 5), float32] */
}

def @func_5637() -> (Tensor[(15, 3, 8), bool], Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float32]) {
  @func_5635() /* ty=(Tensor[(15, 3, 8), bool], Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float32]) */
}

def @func_6158() -> (Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float32]) {
  %800 = @func_3922() /* ty=(Tensor[(15, 3, 8), float32], Tensor[(15, 3, 8), float64]) */;
  %801 = @func_3640() /* ty=Tensor[(15, 3, 8), float64] */;
  %802 = %800.0;
  (%801, %802)
}

def @func_3151() -> Tensor[(15, 3, 8), float64] {
  @func_3149() /* ty=Tensor[(15, 3, 8), float64] */
}

def @func_5250() -> Tensor[(15, 3, 8), float64] {
  @func_5248() /* ty=Tensor[(15, 3, 8), float64] */
}

def @func_2772(%var_2768: Tensor[(64, 1), float64], %var_2769: Tensor[(480), float32], %var_2770: Tensor[(15, 3, 8), float64], %var_2771: Tensor[(650, 13), float32]) -> (Tensor[(2464), int8], Tensor[(64, 1), float64], Tensor[(480), float32], float32, Tensor[(15, 3, 8), uint8], Tensor[(15, 3, 8), int16], Tensor[(8, 60), float32], Tensor[(15, 3, 8), float64], Tensor[(650, 13), bool]) {
  %842 = fn (%var_2729: Tensor[(64, 1), float64], %var_2731: Tensor[(480), float32], %var_2739: Tensor[(15, 3, 8), float64], %var_2759: Tensor[(650, 13), float32]) -> (Tensor[(2464), int8], Tensor[(64, 1), float64], Tensor[(480), float32], float32, Tensor[(15, 3, 8), uint8], Tensor[(15, 3, 8), int16], Tensor[(8, 60), float32], Tensor[(15, 3, 8), float64], Tensor[(650, 13), bool]) {
    %803 = cast(%var_2729, dtype="float64") /* ty=Tensor[(64, 1), float64] */;
    %804 = cast(meta[relay.Constant][54] /* ty=Tensor[(650, 1), float32] */, dtype="float32") /* ty=Tensor[(650, 1), float32] */;
    %805 = cast(%var_2731, dtype="float32") /* ty=Tensor[(480), float32] */;
    %806 = cast(8.70733f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %807 = reshape(%803, newshape=[64]) /* ty=Tensor[(64), float64] */;
    %808 = reshape(%804, newshape=[325, 2]) /* ty=Tensor[(325, 2), float32] */;
    %809 = reshape(%805, newshape=[480]) /* ty=Tensor[(480), float32] */;
    %810 = reshape(%806, newshape=[]) /* ty=float32 */;
    %811 = @func_2407(%807, %808, %809, %810) /* ty=(Tensor[(15, 3, 8), float64], Tensor[(5, 1, 9), float64], Tensor[(45), float64], Tensor[(8, 60), float32], Tensor[(64), float64], Tensor[(325, 2), float32], Tensor[(480), float32], Tensor[(2464), int8], Tensor[(11, 12, 11), float64], float32) */;
    %812 = @func_1684() /* ty=Tensor[(15, 3, 8), float64] */;
    %813 = cast(%var_2739, dtype="uint8") /* ty=Tensor[(15, 3, 8), uint8] */;
    %814 = shape_of(%812, dtype="int32") /* ty=Tensor[(3), int32] */;
    %815 = cast(%812, dtype="uint8") /* ty=Tensor[(15, 3, 8), uint8] */;
    %816 = dyn.reshape(%813, %814, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %817 = @func_2160() /* ty=(Tensor[(15, 3, 8), float64],) */;
    %818 = %817.0;
    %819 = cast(%818, dtype="int16") /* ty=Tensor[(15, 3, 8), int16] */;
    %820 = shape_of(%var_2739, dtype="int32") /* ty=Tensor[(3), int32] */;
    %821 = cast(%var_2739, dtype="int16") /* ty=Tensor[(15, 3, 8), int16] */;
    %822 = dyn.reshape(%819, %820, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %823 = cast(%var_2729, dtype="float64") /* ty=Tensor[(64, 1), float64] */;
    %824 = cast(%var_2729, dtype="float64") /* ty=Tensor[(64, 1), float64] */;
    %825 = cast(meta[relay.Constant][54] /* ty=Tensor[(650, 1), float32] */, dtype="float32") /* ty=Tensor[(650, 1), float32] */;
    %826 = cast(%var_2731, dtype="float32") /* ty=Tensor[(480), float32] */;
    %827 = %811.7;
    %828 = cast(%827, dtype="int16") /* ty=Tensor[(2464), int16] */;
    %829 = reshape(%823, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float64] */;
    %830 = reshape(%824, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float64] */;
    %831 = reshape(%825, newshape=[650]) /* ty=Tensor[(650), float32] */;
    %832 = reshape(%826, newshape=[8, 60]) /* ty=Tensor[(8, 60), float32] */;
    %833 = reshape(%828, newshape=[16, 11, 14]) /* ty=Tensor[(16, 11, 14), int16] */;
    %834 = @func_2061(%829, %830, %831, %832, %833) /* ty=(Tensor[(4, 4, 4), bool], float32, Tensor[(210), float32], Tensor[(120), float32], Tensor[(650), float32], Tensor[(11, 12, 11), float64], Tensor[(?, 650), bool], Tensor[(8, 60), float32], Tensor[(2464), int16], Tensor[(16, 11, 14), bool], Tensor[(15, 3, 8), float64]) */;
    %835 = cast(meta[relay.Constant][54] /* ty=Tensor[(650, 1), float32] */, dtype="bool") /* ty=Tensor[(650, 1), bool] */;
    %836 = cast(%var_2759, dtype="bool") /* ty=Tensor[(650, 13), bool] */;
    %837 = bitwise_and(%815, %816) /* ty=Tensor[(15, 3, 8), uint8] */;
    %838 = right_shift(%821, %822) /* ty=Tensor[(15, 3, 8), int16] */;
    %839 = %834.7;
    %840 = @func_1649() /* ty=Tensor[(15, 3, 8), float64] */;
    %841 = greater_equal(%835, %836) /* ty=Tensor[(650, 13), bool] */;
    (%827, %var_2729, %var_2731, 8.70733f /* ty=float32 */, %837, %838, %839, %840, %841)
  };
  %842(%var_2768, %var_2769, %var_2770, %var_2771) /* ty=(Tensor[(2464), int8], Tensor[(64, 1), float64], Tensor[(480), float32], float32, Tensor[(15, 3, 8), uint8], Tensor[(15, 3, 8), int16], Tensor[(8, 60), float32], Tensor[(15, 3, 8), float64], Tensor[(650, 13), bool]) */
}

def @func_3924() -> (Tensor[(15, 3, 8), float32], Tensor[(15, 3, 8), float64]) {
  @func_3922() /* ty=(Tensor[(15, 3, 8), float32], Tensor[(15, 3, 8), float64]) */
}

def @func_6569() -> (Tensor[(15, 3, 8), float64], Tensor[(8450), float32]) {
  @func_6567() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(8450), float32]) */
}

def @func_7029() -> Tensor[(650), float32] {
  %844 = fn () -> Tensor[(650), float32] {
    %843 = @func_4006() /* ty=(Tensor[(650), float32],) */;
    %843.0
  };
  %844() /* ty=Tensor[(650), float32] */
}

def @func_6325(%var_6316: Tensor[(4, 15, 15), float64]) -> (Tensor[(4, 15, 15), float32],) {
  %845 = cast(%var_6316, dtype="float64") /* ty=Tensor[(4, 15, 15), float64] */;
  %846 = acos(%845) /* ty=Tensor[(4, 15, 15), float64] */;
  %847 = cast(%846, dtype="float32") /* ty=Tensor[(4, 15, 15), float32] */;
  %848 = sinh(%847) /* ty=Tensor[(4, 15, 15), float32] */;
  (%848,)
}

def @func_3275() -> Tensor[(15, 3, 8), float64] {
  %849 = fn () -> Tensor[(15, 3, 8), float64] {
    @func_2106() /* ty=Tensor[(15, 3, 8), float64] */
  };
  %849() /* ty=Tensor[(15, 3, 8), float64] */
}

def @func_6350(%var_6349: Tensor[(10, 11, 4), float64]) -> (Tensor[(10, 11, 4), float64], Tensor[(10, 11, 4), uint64]) {
  %860 = fn (%var_6336: Tensor[(10, 11, 4), float64]) -> (Tensor[(10, 11, 4), float64], Tensor[(10, 11, 4), uint64]) {
    %850 = cast(meta[relay.Constant][55] /* ty=Tensor[(10, 11, 4), float64] */, dtype="float64") /* ty=Tensor[(10, 11, 4), float64] */;
    %851 = shape_of(%var_6336, dtype="int32") /* ty=Tensor[(3), int32] */;
    %852 = cast(%var_6336, dtype="float64") /* ty=Tensor[(10, 11, 4), float64] */;
    %853 = dyn.reshape(%850, %851, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %854 = cast(%var_6336, dtype="uint64") /* ty=Tensor[(10, 11, 4), uint64] */;
    %855 = shape_of(meta[relay.Constant][55] /* ty=Tensor[(10, 11, 4), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %856 = cast(meta[relay.Constant][55] /* ty=Tensor[(10, 11, 4), float64] */, dtype="uint64") /* ty=Tensor[(10, 11, 4), uint64] */;
    %857 = dyn.reshape(%854, %855, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %858 = power(%852, %853) /* ty=Tensor[(10, 11, 4), float64] */;
    %859 = right_shift(%856, %857) /* ty=Tensor[(10, 11, 4), uint64] */;
    (%858, %859)
  };
  %860(%var_6349) /* ty=(Tensor[(10, 11, 4), float64], Tensor[(10, 11, 4), uint64]) */
}

def @func_7494() -> (Tensor[(15, 3, 8), float64], Tensor[(15, 3, 2), int64]) {
  %861 = @func_2548() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64]) */;
  %862 = cast(meta[relay.Constant][56] /* ty=Tensor[(90), uint64] */, dtype="uint64") /* ty=Tensor[(90), uint64] */;
  %863 = reshape(%862, newshape=[15, 3, 2]) /* ty=Tensor[(15, 3, 2), uint64] */;
  %864 = @func_648(%863) /* ty=Tensor[(15, 3, 2), uint64] */;
  %865 = cast(meta[relay.Constant][56] /* ty=Tensor[(90), uint64] */, dtype="int64") /* ty=Tensor[(90), int64] */;
  %866 = shape_of(%864, dtype="int32") /* ty=Tensor[(3), int32] */;
  %867 = cast(%864, dtype="int64") /* ty=Tensor[(15, 3, 2), int64] */;
  %868 = dyn.reshape(%865, %866, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %869 = %861.0;
  %870 = bitwise_xor(%867, %868) /* ty=Tensor[(15, 3, 2), int64] */;
  (%869, %870)
}

def @func_5635() -> (Tensor[(15, 3, 8), bool], Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float32]) {
  %871 = @func_4447() /* ty=(Tensor[(15, 3, 8), float64],) */;
  %872 = %871.0;
  %873 = cast(meta[relay.Constant][57] /* ty=Tensor[(15, 3, 8), float64] */, dtype="bool") /* ty=Tensor[(15, 3, 8), bool] */;
  %874 = shape_of(%872, dtype="int32") /* ty=Tensor[(3), int32] */;
  %875 = cast(%872, dtype="bool") /* ty=Tensor[(15, 3, 8), bool] */;
  %876 = dyn.reshape(%873, %874, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %877 = @func_4400() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(13, 10, 5), float32]) */;
  %878 = @func_4155() /* ty=(Tensor[(15, 3, 8), float32],) */;
  %879 = less_equal(%875, %876) /* ty=Tensor[(15, 3, 8), bool] */;
  %880 = %877.0;
  %881 = %878.0;
  (%879, %880, %881)
}

def @func_4545(%var_4533: Tensor[(15, 3, 8), float64]) -> (Tensor[(15, 3, 8), bool], Tensor[(15, 3, 8), float32], Tensor[(15, 3, 8), float64]) {
  %882 = @func_4081() /* ty=Tensor[(15, 3, 8), float64] */;
  %883 = cast(%var_4533, dtype="bool") /* ty=Tensor[(15, 3, 8), bool] */;
  %884 = shape_of(%882, dtype="int32") /* ty=Tensor[(3), int32] */;
  %885 = cast(%882, dtype="bool") /* ty=Tensor[(15, 3, 8), bool] */;
  %886 = dyn.reshape(%883, %884, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %887 = @func_2565() /* ty=(Tensor[(15, 3, 8), float32],) */;
  %888 = logical_or(%885, %886) /* ty=Tensor[(15, 3, 8), bool] */;
  %889 = %887.0;
  %890 = @func_3149() /* ty=Tensor[(15, 3, 8), float64] */;
  (%888, %889, %890)
}

def @func_5978() -> Tensor[(650), float32] {
  %901 = fn () -> Tensor[(650), float32] {
    %891 = @func_3694() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(2464), int16], Tensor[(650), float64]) */;
    %892 = %891.2;
    %893 = cast(%892, dtype="float64") /* ty=Tensor[(650), float64] */;
    %894 = log10(%893) /* ty=Tensor[(650), float64] */;
    %895 = cast(%892, dtype="bool") /* ty=Tensor[(650), bool] */;
    %896 = shape_of(%894, dtype="int32") /* ty=Tensor[(1), int32] */;
    %897 = cast(%894, dtype="bool") /* ty=Tensor[(650), bool] */;
    %898 = dyn.reshape(%895, %896, newshape=[]) /* ty=Tensor[(?), bool] */;
    %899 = logical_and(%897, %898) /* ty=Tensor[(650), bool] */;
    %900 = cast(%899, dtype="float32") /* ty=Tensor[(650), float32] */;
    sqrt(%900) /* ty=Tensor[(650), float32] */
  };
  %901() /* ty=Tensor[(650), float32] */
}

def @func_2106() -> Tensor[(15, 3, 8), float64] {
  @func_1684() /* ty=Tensor[(15, 3, 8), float64] */
}

def @func_4246(%var_4244: Tensor[(60), float32]) -> (Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64], Tensor[(60), float32]) {
  @func_4243(%var_4244) /* ty=(Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64], Tensor[(60), float32]) */
}

def @func_3341(%var_3339: Tensor[(9, 13, 8), float32]) -> (Tensor[(9, 13, 8), float32], Tensor[(9, 13, 8), float64], Tensor[(7, 8), float64], Tensor[(56), float64], float32) {
  @func_3338(%var_3339) /* ty=(Tensor[(9, 13, 8), float32], Tensor[(9, 13, 8), float64], Tensor[(7, 8), float64], Tensor[(56), float64], float32) */
}

def @func_6894() -> (Tensor[(15, 3, 8), float64], Tensor[(312), float32], Tensor[(546), uint64]) {
  %902 = @func_4179() /* ty=(Tensor[(15, 3, 8), float64],) */;
  %903 = cast(meta[relay.Constant][58] /* ty=Tensor[(546), uint64] */, dtype="uint64") /* ty=Tensor[(546), uint64] */;
  %904 = reshape(%903, newshape=[13, 7, 6]) /* ty=Tensor[(13, 7, 6), uint64] */;
  %905 = @func_5914(%904) /* ty=(Tensor[(13, 7, 6), uint64], Tensor[(13, 10, 5), float32], Tensor[(650), float32], float32, Tensor[(936), float32], Tensor[(13, 10, 5), float32], Tensor[(15, 3, 8), float64], Tensor[(11, 12, 11), float64], Tensor[(312), float32], Tensor[(15, 3, 8), int16]) */;
  %906 = %902.0;
  %907 = %905.8;
  (%906, %907, meta[relay.Constant][58] /* ty=Tensor[(546), uint64] */)
}

def @func_7929() -> Tensor[(13, 10, 5), float32] {
  @func_7927() /* ty=Tensor[(13, 10, 5), float32] */
}

def @func_6204(%var_6201: Tensor[(3, 44), uint8], %var_6202: Tensor[(120), float32], %var_6203: Tensor[(650), float32]) -> (Tensor[(11, 12, 11), bool], Tensor[(6, 20), float32], Tensor[(35, 6), float32], Tensor[(120), float32], Tensor[(650), float32], Tensor[(3, 44), bool]) {
  @func_6199(%var_6201, %var_6202, %var_6203) /* ty=(Tensor[(11, 12, 11), bool], Tensor[(6, 20), float32], Tensor[(35, 6), float32], Tensor[(120), float32], Tensor[(650), float32], Tensor[(3, 44), bool]) */
}

def @func_6896() -> (Tensor[(15, 3, 8), float64], Tensor[(312), float32], Tensor[(546), uint64]) {
  @func_6894() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(312), float32], Tensor[(546), uint64]) */
}

def @func_7435() -> (Tensor[(15, 3, 8), float64], Tensor[(120), float32], Tensor[(120), float32], Tensor[(650), float32]) {
  %908 = cast(meta[relay.Constant][59] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %909 = reshape(%908, newshape=[120]) /* ty=Tensor[(120), float32] */;
  %910 = @func_2527(%909) /* ty=(Tensor[(11, 12, 11), bool], Tensor[(210), float32], Tensor[(120), float32], Tensor[(650), float32], Tensor[(15, 3, 8), bool], Tensor[(15, 3, 8), float64]) */;
  %911 = @func_4828() /* ty=(Tensor[(650), float32],) */;
  %912 = @func_4081() /* ty=Tensor[(15, 3, 8), float64] */;
  %913 = %910.2;
  %914 = %911.0;
  (%912, %913, meta[relay.Constant][59] /* ty=Tensor[(120), float32] */, %914)
}

def @func_3769(%var_3757: Tensor[(480), float32]) -> (Tensor[(15, 3, 8), float64], Tensor[(16, 11, 14), bool], Tensor[(1, 64), float64], Tensor[(650), float32], Tensor[(480), float32], Tensor[(2464), int16], Tensor[(15, 3, 8), float64]) {
  %915 = cast(meta[relay.Constant][60] /* ty=Tensor[(1, 64), float64] */, dtype="float64") /* ty=Tensor[(1, 64), float64] */;
  %916 = cast(meta[relay.Constant][60] /* ty=Tensor[(1, 64), float64] */, dtype="float64") /* ty=Tensor[(1, 64), float64] */;
  %917 = cast(meta[relay.Constant][61] /* ty=Tensor[(650), float32] */, dtype="float32") /* ty=Tensor[(650), float32] */;
  %918 = cast(%var_3757, dtype="float32") /* ty=Tensor[(480), float32] */;
  %919 = cast(meta[relay.Constant][62] /* ty=Tensor[(2464), int16] */, dtype="int16") /* ty=Tensor[(2464), int16] */;
  %920 = reshape(%915, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float64] */;
  %921 = reshape(%916, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float64] */;
  %922 = reshape(%917, newshape=[650]) /* ty=Tensor[(650), float32] */;
  %923 = reshape(%918, newshape=[8, 60]) /* ty=Tensor[(8, 60), float32] */;
  %924 = reshape(%919, newshape=[16, 11, 14]) /* ty=Tensor[(16, 11, 14), int16] */;
  %925 = @func_2061(%920, %921, %922, %923, %924) /* ty=(Tensor[(4, 4, 4), bool], float32, Tensor[(210), float32], Tensor[(120), float32], Tensor[(650), float32], Tensor[(11, 12, 11), float64], Tensor[(?, 650), bool], Tensor[(8, 60), float32], Tensor[(2464), int16], Tensor[(16, 11, 14), bool], Tensor[(15, 3, 8), float64]) */;
  %926 = @func_2160() /* ty=(Tensor[(15, 3, 8), float64],) */;
  %927 = @func_3274() /* ty=Tensor[(15, 3, 8), float64] */;
  %928 = %925.9;
  %929 = %926.0;
  (%927, %928, meta[relay.Constant][60] /* ty=Tensor[(1, 64), float64] */, meta[relay.Constant][61] /* ty=Tensor[(650), float32] */, %var_3757, meta[relay.Constant][62] /* ty=Tensor[(2464), int16] */, %929)
}

def @func_2265(%var_2264: Tensor[(650, 1), float32]) -> (Tensor[(15, 3, 8), float64], Tensor[(120), float32], Tensor[(64), float64], Tensor[(650, 1), float32], Tensor[(480), float32], Tensor[(2464), int16]) {
  %943 = fn (%var_2250: Tensor[(650, 1), float32]) -> (Tensor[(15, 3, 8), float64], Tensor[(120), float32], Tensor[(64), float64], Tensor[(650, 1), float32], Tensor[(480), float32], Tensor[(2464), int16]) {
    %930 = cast(meta[relay.Constant][63] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
    %931 = cast(meta[relay.Constant][63] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
    %932 = cast(%var_2250, dtype="float32") /* ty=Tensor[(650, 1), float32] */;
    %933 = cast(meta[relay.Constant][64] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
    %934 = cast(meta[relay.Constant][65] /* ty=Tensor[(2464), int16] */, dtype="int16") /* ty=Tensor[(2464), int16] */;
    %935 = reshape(%930, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float64] */;
    %936 = reshape(%931, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float64] */;
    %937 = reshape(%932, newshape=[650]) /* ty=Tensor[(650), float32] */;
    %938 = reshape(%933, newshape=[8, 60]) /* ty=Tensor[(8, 60), float32] */;
    %939 = reshape(%934, newshape=[16, 11, 14]) /* ty=Tensor[(16, 11, 14), int16] */;
    %940 = @func_2061(%935, %936, %937, %938, %939) /* ty=(Tensor[(4, 4, 4), bool], float32, Tensor[(210), float32], Tensor[(120), float32], Tensor[(650), float32], Tensor[(11, 12, 11), float64], Tensor[(?, 650), bool], Tensor[(8, 60), float32], Tensor[(2464), int16], Tensor[(16, 11, 14), bool], Tensor[(15, 3, 8), float64]) */;
    %941 = @func_1649() /* ty=Tensor[(15, 3, 8), float64] */;
    %942 = %940.3;
    (%941, %942, meta[relay.Constant][63] /* ty=Tensor[(64), float64] */, %var_2250, meta[relay.Constant][64] /* ty=Tensor[(480), float32] */, meta[relay.Constant][65] /* ty=Tensor[(2464), int16] */)
  };
  %943(%var_2264) /* ty=(Tensor[(15, 3, 8), float64], Tensor[(120), float32], Tensor[(64), float64], Tensor[(650, 1), float32], Tensor[(480), float32], Tensor[(2464), int16]) */
}

def @func_2529(%var_2528: Tensor[(120), float32]) -> (Tensor[(11, 12, 11), bool], Tensor[(210), float32], Tensor[(120), float32], Tensor[(650), float32], Tensor[(15, 3, 8), bool], Tensor[(15, 3, 8), float64]) {
  %962 = fn (%var_2498: Tensor[(120), float32]) -> (Tensor[(11, 12, 11), bool], Tensor[(210), float32], Tensor[(120), float32], Tensor[(650), float32], Tensor[(15, 3, 8), bool], Tensor[(15, 3, 8), float64]) {
    %944 = cast(meta[relay.Constant][66] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
    %945 = cast(%var_2498, dtype="float32") /* ty=Tensor[(120), float32] */;
    %946 = cast(meta[relay.Constant][67] /* ty=Tensor[(650), float32] */, dtype="float32") /* ty=Tensor[(650), float32] */;
    %947 = reshape(%944, newshape=[5, 7, 6]) /* ty=Tensor[(5, 7, 6), float32] */;
    %948 = reshape(%945, newshape=[6, 20]) /* ty=Tensor[(6, 20), float32] */;
    %949 = reshape(%946, newshape=[650]) /* ty=Tensor[(650), float32] */;
    %950 = @func_1620(%947, %948, %949) /* ty=(Tensor[(5, 7, 6), float32], Tensor[(11, 12, 11), bool], Tensor[(6, 20), float32], Tensor[(13, 10, 5), float32], float32, Tensor[(650), float32]) */;
    %951 = @func_2127() /* ty=Tensor[(15, 3, 8), float64] */;
    %952 = cast(%951, dtype="float64") /* ty=Tensor[(15, 3, 8), float64] */;
    %953 = cosh(%952) /* ty=Tensor[(15, 3, 8), float64] */;
    %954 = @func_1703() /* ty=Tensor[(15, 3, 8), float64] */;
    %955 = cast(%954, dtype="bool") /* ty=Tensor[(15, 3, 8), bool] */;
    %956 = shape_of(%953, dtype="int32") /* ty=Tensor[(3), int32] */;
    %957 = cast(%953, dtype="bool") /* ty=Tensor[(15, 3, 8), bool] */;
    %958 = dyn.reshape(%955, %956, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %959 = %950.1;
    %960 = less(%957, %958) /* ty=Tensor[(15, 3, 8), bool] */;
    %961 = @func_1649() /* ty=Tensor[(15, 3, 8), float64] */;
    (%959, meta[relay.Constant][66] /* ty=Tensor[(210), float32] */, %var_2498, meta[relay.Constant][67] /* ty=Tensor[(650), float32] */, %960, %961)
  };
  %962(%var_2528) /* ty=(Tensor[(11, 12, 11), bool], Tensor[(210), float32], Tensor[(120), float32], Tensor[(650), float32], Tensor[(15, 3, 8), bool], Tensor[(15, 3, 8), float64]) */
}

def @func_3229(%var_3224: Tensor[(60), float32]) -> (Tensor[(15, 3, 8), float64], Tensor[(12, 5), float32], Tensor[(60), float32]) {
  %963 = cast(%var_3224, dtype="float32") /* ty=Tensor[(60), float32] */;
  %964 = reshape(%963, newshape=[12, 5]) /* ty=Tensor[(12, 5), float32] */;
  %965 = @func_3149() /* ty=Tensor[(15, 3, 8), float64] */;
  %966 = @func_100(%964) /* ty=Tensor[(12, 5), float32] */;
  (%965, %966, %var_3224)
}

def @func_7496() -> (Tensor[(15, 3, 8), float64], Tensor[(15, 3, 2), int64]) {
  @func_7494() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(15, 3, 2), int64]) */
}

def @func_5514() -> (Tensor[(2464), int8],) {
  %967 = @func_3602() /* ty=(float32, Tensor[(2464), int8], Tensor[(64), float64], Tensor[(480), float32], Tensor[(360), float64], Tensor[(8450), float32]) */;
  %968 = %967.1;
  (%968,)
}

def @func_5322(%var_5321: Tensor[(8, 13, 16), float64]) -> Tensor[(8, 13, 16), float64] {
  %970 = fn (%var_5302: Tensor[(8, 13, 16), float64]) -> Tensor[(8, 13, 16), float64] {
    %969 = cast(%var_5302, dtype="float64") /* ty=Tensor[(8, 13, 16), float64] */;
    acosh(%969) /* ty=Tensor[(8, 13, 16), float64] */
  };
  %970(%var_5321) /* ty=Tensor[(8, 13, 16), float64] */
}

def @func_2943() -> (Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64]) {
  %976 = fn () -> (Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64]) {
    %971 = @func_2160() /* ty=(Tensor[(15, 3, 8), float64],) */;
    %972 = %971.0;
    %973 = cast(%972, dtype="float64") /* ty=Tensor[(15, 3, 8), float64] */;
    %974 = cos(%973) /* ty=Tensor[(15, 3, 8), float64] */;
    %975 = @func_2852() /* ty=Tensor[(15, 3, 8), float64] */;
    (%974, %975)
  };
  %976() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64]) */
}

def @func_3405() -> Tensor[(15, 3, 8), float32] {
  @func_3403() /* ty=Tensor[(15, 3, 8), float32] */
}

def @func_7437() -> (Tensor[(15, 3, 8), float64], Tensor[(120), float32], Tensor[(120), float32], Tensor[(650), float32]) {
  @func_7435() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(120), float32], Tensor[(120), float32], Tensor[(650), float32]) */
}

def @func_5376() -> (Tensor[(6, 2, 3), float32], Tensor[(15, 3, 8), float64]) {
  @func_5374() /* ty=(Tensor[(6, 2, 3), float32], Tensor[(15, 3, 8), float64]) */
}

def @func_7175() -> Tensor[(15, 3, 8), float64] {
  @func_1703() /* ty=Tensor[(15, 3, 8), float64] */
}

def @func_3637() -> Tensor[(15, 3, 8), float64] {
  @func_3635() /* ty=Tensor[(15, 3, 8), float64] */
}

def @func_5172() -> (Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64]) {
  @func_5170() /* ty=(Tensor[(15, 3, 8), float64], Tensor[(15, 3, 8), float64]) */
}

def @func_567(%var_565: Tensor[(11, 12, 1), uint8]) -> (Tensor[(11, 12, 11), bool],) {
  @func_564(%var_565) /* ty=(Tensor[(11, 12, 11), bool],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen180/build/output.py:2628: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen180/build/output.py", line 2633, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(160) tvmgen_default_fused_cast_atanh_cast_reshape_minimum_kernel0(ushort* __restrict__ T_minimum, float* __restrict__ placeholder) {
  T_minimum[(((int)threadIdx.x))] = min(((ushort)placeholder[(((int)threadIdx.x))]), ((ushort)atanhf(placeholder[(((int)threadIdx.x))])));
}

extern "C" __global__ void __launch_bounds__(160) tvmgen_default_fused_cast_sin_kernel0(double* __restrict__ T_sin, float* __restrict__ placeholder) {
  T_sin[(((int)threadIdx.x))] = sin(((double)placeholder[(((int)threadIdx.x))]));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

