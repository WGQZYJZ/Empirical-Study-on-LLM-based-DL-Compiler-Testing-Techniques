==========mod==========
#[version = "0.0.5"]
def @func_2202(%var_2149: Tensor[(98), float32], %var_2150: Tensor[(10), bool]) -> (Tensor[(11, 14), float64], Tensor[(10), bool], Tensor[(98), float32], Tensor[(10), bool], Tensor[(11, 14), float64], Tensor[(11, 14), float64]) {
  %0 = @func_934() /* ty=(Tensor[(8, 12, 9), uint32], Tensor[(11, 14), float64], Tensor[(11, 14), float64]) */;
  %1 = cast(%var_2149, dtype="float32") /* ty=Tensor[(98), float32] */;
  %2 = cast(%var_2150, dtype="bool") /* ty=Tensor[(10), bool] */;
  %3 = reshape(%1, newshape=[98]) /* ty=Tensor[(98), float32] */;
  %4 = reshape(%2, newshape=[10]) /* ty=Tensor[(10), bool] */;
  %5 = @func_1749(%3, %4) /* ty=(Tensor[(11, 14), float64], Tensor[(7, ?, 14), uint32], Tensor[(98), float32], Tensor[(10), bool]) */;
  %6 = @func_1029() /* ty=(Tensor[(11, 14), float64], Tensor[(11, 14), float64]) */;
  %7 = %0.1;
  %8 = %5.3;
  %9 = %6.1;
  %10 = @func_677() /* ty=Tensor[(11, 14), float64] */;
  (%7, %8, %var_2149, %var_2150, %9, %10)
}

def @func_2628(%var_2591: Tensor[(4, 3, 12), float64], %var_2623: Tensor[(8, 12, 9), bool]) -> (Tensor[(4, 3, 12), uint8], Tensor[(4, 3, 12), float64], Tensor[(6, 144), bool], Tensor[(8, 12, 9), bool]) {
  %11 = cast(%var_2591, dtype="float64") /* ty=Tensor[(4, 3, 12), float64] */;
  %12 = cos(%11) /* ty=Tensor[(4, 3, 12), float64] */;
  %13 = cast(%var_2591, dtype="float32") /* ty=Tensor[(4, 3, 12), float32] */;
  %14 = shape_of(%12, dtype="int32") /* ty=Tensor[(3), int32] */;
  %15 = cast(%12, dtype="float32") /* ty=Tensor[(4, 3, 12), float32] */;
  %16 = dyn.reshape(%13, %14, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %17 = divide(%15, %16) /* ty=Tensor[(4, 3, 12), float32] */;
  %18 = cast(%12, dtype="uint8") /* ty=Tensor[(4, 3, 12), uint8] */;
  %19 = shape_of(%17, dtype="int32") /* ty=Tensor[(3), int32] */;
  %20 = cast(%17, dtype="uint8") /* ty=Tensor[(4, 3, 12), uint8] */;
  %21 = dyn.reshape(%18, %19, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %22 = cast(%17, dtype="float64") /* ty=Tensor[(4, 3, 12), float64] */;
  %23 = @func_1818() /* ty=(Tensor[(8, 12, 9), bool], Tensor[(594), uint8], Tensor[(594), bool]) */;
  %24 = %23.0;
  %25 = cast(%24, dtype="float64") /* ty=Tensor[(8, 12, 9), float64] */;
  %26 = reshape(%25, newshape=[6, 144]) /* ty=Tensor[(6, 144), float64] */;
  %27 = @func_1413(%26) /* ty=(Tensor[(6, 144), bool], Tensor[(4, 9, 8), float32]) */;
  %28 = cast(%var_2623, dtype="bool") /* ty=Tensor[(8, 12, 9), bool] */;
  %29 = shape_of(%24, dtype="int32") /* ty=Tensor[(3), int32] */;
  %30 = cast(%24, dtype="bool") /* ty=Tensor[(8, 12, 9), bool] */;
  %31 = dyn.reshape(%28, %29, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %32 = multiply(%20, %21) /* ty=Tensor[(4, 3, 12), uint8] */;
  %33 = acos(%22) /* ty=Tensor[(4, 3, 12), float64] */;
  %34 = %27.0;
  %35 = greater(%30, %31) /* ty=Tensor[(8, 12, 9), bool] */;
  (%32, %33, %34, %35)
}

def @func_1915() -> (Tensor[(11, 14), float64], Tensor[(594), bool]) {
  %36 = @func_838() /* ty=(Tensor[(11, 14), float64], Tensor[(11, 14), float64]) */;
  %37 = %36.1;
  %38 = cast(%37, dtype="float64") /* ty=Tensor[(11, 14), float64] */;
  %39 = @func_1818() /* ty=(Tensor[(8, 12, 9), bool], Tensor[(594), uint8], Tensor[(594), bool]) */;
  %40 = asinh(%38) /* ty=Tensor[(11, 14), float64] */;
  %41 = %39.2;
  (%40, %41)
}

def @func_2989(%var_2978: Tensor[(11, 15, 16), float32]) -> (Tensor[(11, 15, 16), float32], Tensor[(2, 5, 5), int64], Tensor[(5, 10), int64]) {
  %42 = cast(%var_2978, dtype="float32") /* ty=Tensor[(11, 15, 16), float32] */;
  %43 = cast(meta[relay.Constant][0] /* ty=Tensor[(5, 10), int64] */, dtype="int64") /* ty=Tensor[(5, 10), int64] */;
  %44 = reshape(%43, newshape=[2, 5, 5]) /* ty=Tensor[(2, 5, 5), int64] */;
  %45 = @func_2313(%44) /* ty=(Tensor[(2, 5, 5), int64],) */;
  %46 = sinh(%42) /* ty=Tensor[(11, 15, 16), float32] */;
  %47 = %45.0;
  (%46, %47, meta[relay.Constant][0] /* ty=Tensor[(5, 10), int64] */)
}

def @func_1717(%var_1675: Tensor[(3, 1, 7), int32]) -> (Tensor[(3, 15, 7), bool], Tensor[(6, 144), int16], Tensor[(864), float32], Tensor[(8, 12, 9), float64]) {
  %48 = cast(%var_1675, dtype="bool") /* ty=Tensor[(3, 1, 7), bool] */;
  %49 = cast(meta[relay.Constant][1] /* ty=Tensor[(3, 15, 7), int32] */, dtype="bool") /* ty=Tensor[(3, 15, 7), bool] */;
  %50 = cast(meta[relay.Constant][2] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %51 = reshape(%50, newshape=[6, 144]) /* ty=Tensor[(6, 144), float32] */;
  %52 = @func_1231() /* ty=(Tensor[(8, 12, 9), float64],) */;
  %53 = less_equal(%48, %49) /* ty=Tensor[(3, 15, 7), bool] */;
  %54 = @func_1588(%51) /* ty=Tensor[(6, 144), int16] */;
  %55 = %52.0;
  (%53, %54, meta[relay.Constant][2] /* ty=Tensor[(864), float32] */, %55)
}

def @main() -> (Tensor[(4, 9, 8), float64], Tensor[(4, 9, 8), float32]) {
  %56 = @func_4426() /* ty=(Tensor[(4, 9, 8), float64], Tensor[(11, 14), float64]) */;
  %57 = @func_3271() /* ty=Tensor[(4, 9, 8), float32] */;
  %58 = cast(%57, dtype="float32") /* ty=Tensor[(4, 9, 8), float32] */;
  %59 = %56.0;
  %60 = rsqrt(%58) /* ty=Tensor[(4, 9, 8), float32] */;
  (%59, %60)
}

def @func_1342(%var_1298: Tensor[(12, 9, 4), int8]) -> (Tensor[(11, 14), float64], Tensor[(12, 9, 4), float64], Tensor[(12, 9, 4), float32], Tensor[(12, 9, 4), float64]) {
  %61 = @func_1029() /* ty=(Tensor[(11, 14), float64], Tensor[(11, 14), float64]) */;
  %62 = cast(%var_1298, dtype="bool") /* ty=Tensor[(12, 9, 4), bool] */;
  %63 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(12, 9, 4), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %64 = cast(meta[relay.Constant][3] /* ty=Tensor[(12, 9, 4), int8] */, dtype="bool") /* ty=Tensor[(12, 9, 4), bool] */;
  %65 = dyn.reshape(%62, %63, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %66 = less_equal(%64, %65) /* ty=Tensor[(12, 9, 4), bool] */;
  %67 = cast(meta[relay.Constant][3] /* ty=Tensor[(12, 9, 4), int8] */, dtype="float64") /* ty=Tensor[(12, 9, 4), float64] */;
  %68 = shape_of(%66, dtype="int32") /* ty=Tensor[(3), int32] */;
  %69 = cast(%66, dtype="float64") /* ty=Tensor[(12, 9, 4), float64] */;
  %70 = dyn.reshape(%67, %68, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %71 = cast(meta[relay.Constant][3] /* ty=Tensor[(12, 9, 4), int8] */, dtype="float32") /* ty=Tensor[(12, 9, 4), float32] */;
  %72 = cast(meta[relay.Constant][3] /* ty=Tensor[(12, 9, 4), int8] */, dtype="float64") /* ty=Tensor[(12, 9, 4), float64] */;
  %73 = %61.0;
  %74 = multiply(%69, %70) /* ty=Tensor[(12, 9, 4), float64] */;
  %75 = sin(%71) /* ty=Tensor[(12, 9, 4), float32] */;
  %76 = acosh(%72) /* ty=Tensor[(12, 9, 4), float64] */;
  (%73, %74, %75, %76)
}

def @func_4192() -> Tensor[(594), uint8] {
  %77 = @func_1818() /* ty=(Tensor[(8, 12, 9), bool], Tensor[(594), uint8], Tensor[(594), bool]) */;
  %77.1
}

def @func_1749(%var_1740: Tensor[(98), float32], %var_1741: Tensor[(10), bool]) -> (Tensor[(11, 14), float64], Tensor[(7, ?, 14), uint32], Tensor[(98), float32], Tensor[(10), bool]) {
  %78 = @func_838() /* ty=(Tensor[(11, 14), float64], Tensor[(11, 14), float64]) */;
  %79 = cast(%var_1740, dtype="float32") /* ty=Tensor[(98), float32] */;
  %80 = cast(%var_1741, dtype="bool") /* ty=Tensor[(10), bool] */;
  %81 = reshape(%79, newshape=[7, 1, 14]) /* ty=Tensor[(7, 1, 14), float32] */;
  %82 = reshape(%80, newshape=[10]) /* ty=Tensor[(10), bool] */;
  %83 = @func_1081(%81, %82) /* ty=(Tensor[(7, ?, 14), uint32], Tensor[(11, 14), float64], Tensor[(10), bool], Tensor[(10), bool], Tensor[(7, 1, 14), float64], Tensor[(11, 14), float64], Tensor[(9, 16, 12), float64], Tensor[(1728), uint16]) */;
  %84 = %78.1;
  %85 = %83.0;
  (%84, %85, %var_1740, %var_1741)
}

def @func_1648(%var_1644: Tensor[(864), float32]) -> (Tensor[(9, 6, 11), float64], Tensor[(8, 12, 9), bool], Tensor[(864), float32]) {
  %86 = @func_1151() /* ty=(Tensor[(8, 12, 9), bool], Tensor[(11, 14), float64], Tensor[(11, 14), float64], Tensor[(9, 6, 11), float64], Tensor[(594), float64]) */;
  %87 = cast(%var_1644, dtype="float32") /* ty=Tensor[(864), float32] */;
  %88 = reshape(%87, newshape=[8, 12, 9]) /* ty=Tensor[(8, 12, 9), float32] */;
  %89 = %86.3;
  %90 = @func_572(%88) /* ty=Tensor[(8, 12, 9), bool] */;
  (%89, %90, %var_1644)
}

def @func_4798() -> Tensor[(11, 14), float64] {
  @func_677() /* ty=Tensor[(11, 14), float64] */
}

def @func_1505(%var_1497: Tensor[(432), int8]) -> (Tensor[(11, 14), float64], Tensor[(11, 14), float64], Tensor[(432), int8]) {
  %91 = @func_838() /* ty=(Tensor[(11, 14), float64], Tensor[(11, 14), float64]) */;
  %92 = cast(%var_1497, dtype="int8") /* ty=Tensor[(432), int8] */;
  %93 = reshape(%92, newshape=[12, 9, 4]) /* ty=Tensor[(12, 9, 4), int8] */;
  %94 = @func_1342(%93) /* ty=(Tensor[(11, 14), float64], Tensor[(12, 9, 4), float64], Tensor[(12, 9, 4), float32], Tensor[(12, 9, 4), float64]) */;
  %95 = %91.0;
  %96 = %94.0;
  (%95, %96, %var_1497)
}

def @func_3338() -> Tensor[(4, 9, 8), float32] {
  %97 = @func_2850() /* ty=(Tensor[(4, 9, 8), float32],) */;
  %97.0
}

def @func_1291() -> (Tensor[(11, 14), float64],) {
  %98 = @func_838() /* ty=(Tensor[(11, 14), float64], Tensor[(11, 14), float64]) */;
  %99 = %98.1;
  (%99,)
}

def @func_4919() -> (Tensor[(12, 9, 4), float64], Tensor[(432), int8], Tensor[(8, 12, 9), bool], Tensor[(10), bool], Tensor[(1728), uint16], Tensor[(1, 288), float32], Tensor[(4, 9, 8), float32], Tensor[(98), float32], Tensor[(72, 2), float32]) {
  %100 = cast(meta[relay.Constant][4] /* ty=Tensor[(432), int8] */, dtype="int8") /* ty=Tensor[(432), int8] */;
  %101 = reshape(%100, newshape=[12, 9, 4]) /* ty=Tensor[(12, 9, 4), int8] */;
  %102 = @func_1342(%101) /* ty=(Tensor[(11, 14), float64], Tensor[(12, 9, 4), float64], Tensor[(12, 9, 4), float32], Tensor[(12, 9, 4), float64]) */;
  %103 = @func_772() /* ty=(Tensor[(8, 12, 9), bool],) */;
  %104 = cast(meta[relay.Constant][5] /* ty=Tensor[(1728), uint16] */, dtype="uint16") /* ty=Tensor[(1728), uint16] */;
  %105 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 288), float32] */, dtype="float32") /* ty=Tensor[(1, 288), float32] */;
  %106 = reshape(%104, newshape=[1728]) /* ty=Tensor[(1728), uint16] */;
  %107 = reshape(%105, newshape=[4, 9, 8]) /* ty=Tensor[(4, 9, 8), float32] */;
  %108 = @func_3448(%106, %107) /* ty=(Tensor[(11, 14), float64], Tensor[(1728), uint16], Tensor[(6, 144), bool], Tensor[(8, 12, 9), uint32], Tensor[(2, 12, 6), bool], Tensor[(144), float32], Tensor[(6, 144), uint8], Tensor[(6, 144), float32], Tensor[(10), bool], Tensor[(4, 9, 8), bool], Tensor[(6, 144), float64], Tensor[(6, 144), float64]) */;
  %109 = %108.8;
  %110 = cast(%109, dtype="bool") /* ty=Tensor[(10), bool] */;
  %111 = %103.0;
  %112 = cast(%111, dtype="bool") /* ty=Tensor[(8, 12, 9), bool] */;
  %113 = reshape(%110, newshape=[10]) /* ty=Tensor[(10), bool] */;
  %114 = reshape(%112, newshape=[8, 12, 9]) /* ty=Tensor[(8, 12, 9), bool] */;
  %115 = @func_2498(%113, %114) /* ty=(Tensor[(11, 14), float64], Tensor[(98), float32], Tensor[(10), bool], Tensor[(11, 14), float64], Tensor[(8, 12, 9), float32], Tensor[(2, 12, 6), bool], Tensor[(144), float32]) */;
  %116 = @func_4775() /* ty=(Tensor[(6, 144), float64], Tensor[(11, 14), float64], Tensor[(432), int8], Tensor[(2, 12, 6), bool], Tensor[(72, 2), float32], Tensor[(8, 12, 9), bool], Tensor[(11, 14), float64]) */;
  %117 = %116.4;
  %118 = cast(%117, dtype="float64") /* ty=Tensor[(72, 2), float64] */;
  %119 = exp(%118) /* ty=Tensor[(72, 2), float64] */;
  %120 = cast(%119, dtype="float32") /* ty=Tensor[(72, 2), float32] */;
  %121 = %102.3;
  %122 = @func_3271() /* ty=Tensor[(4, 9, 8), float32] */;
  %123 = %115.1;
  %124 = erf(%120) /* ty=Tensor[(72, 2), float32] */;
  (%121, meta[relay.Constant][4] /* ty=Tensor[(432), int8] */, %111, %109, meta[relay.Constant][5] /* ty=Tensor[(1728), uint16] */, meta[relay.Constant][6] /* ty=Tensor[(1, 288), float32] */, %122, %123, %124)
}

def @func_1970(%var_1920: Tensor[(2, 14, 2), float32], %var_1921: Tensor[(2, 14, 2), float32]) -> (Tensor[(2, 14, 2), int8], Tensor[(594), bool], Tensor[(2, 14, 2), float32], Tensor[(8, 12, 9), float64], Tensor[(8, 12, 9), bool]) {
  %125 = cast(%var_1921, dtype="int8") /* ty=Tensor[(2, 14, 2), int8] */;
  %126 = shape_of(%var_1920, dtype="int32") /* ty=Tensor[(3), int32] */;
  %127 = cast(%var_1920, dtype="int8") /* ty=Tensor[(2, 14, 2), int8] */;
  %128 = dyn.reshape(%125, %126, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %129 = @func_1818() /* ty=(Tensor[(8, 12, 9), bool], Tensor[(594), uint8], Tensor[(594), bool]) */;
  %130 = cast(%var_1921, dtype="float32") /* ty=Tensor[(2, 14, 2), float32] */;
  %131 = shape_of(%var_1920, dtype="int32") /* ty=Tensor[(3), int32] */;
  %132 = cast(%var_1920, dtype="float32") /* ty=Tensor[(2, 14, 2), float32] */;
  %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %134 = floor_mod(%132, %133) /* ty=Tensor[(2, 14, 2), float32] */;
  %135 = cast(meta[relay.Constant][7] /* ty=Tensor[(2, 14, 2), float32] */, dtype="float32") /* ty=Tensor[(2, 14, 2), float32] */;
  %136 = shape_of(%134, dtype="int32") /* ty=Tensor[(3), int32] */;
  %137 = cast(%134, dtype="float32") /* ty=Tensor[(2, 14, 2), float32] */;
  %138 = dyn.reshape(%135, %136, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %139 = power(%137, %138) /* ty=Tensor[(2, 14, 2), float32] */;
  %140 = cast(%139, dtype="float32") /* ty=Tensor[(2, 14, 2), float32] */;
  %141 = asinh(%140) /* ty=Tensor[(2, 14, 2), float32] */;
  %142 = cast(%141, dtype="float32") /* ty=Tensor[(2, 14, 2), float32] */;
  %143 = @func_1231() /* ty=(Tensor[(8, 12, 9), float64],) */;
  %144 = @func_1818() /* ty=(Tensor[(8, 12, 9), bool], Tensor[(594), uint8], Tensor[(594), bool]) */;
  %145 = bitwise_xor(%127, %128) /* ty=Tensor[(2, 14, 2), int8] */;
  %146 = %129.2;
  %147 = atanh(%142) /* ty=Tensor[(2, 14, 2), float32] */;
  %148 = %143.0;
  %149 = %144.0;
  (%145, %146, %147, %148, %149)
}

def @func_4369(%var_4361: Tensor[(180), float32]) -> (Tensor[(1, 15, 12), float32], Tensor[(180), float32], Tensor[(4, 9, 8), float32]) {
  %150 = cast(%var_4361, dtype="float32") /* ty=Tensor[(180), float32] */;
  %151 = reshape(%150, newshape=[1, 15, 12]) /* ty=Tensor[(1, 15, 12), float32] */;
  %152 = @func_4069(%151) /* ty=(Tensor[(1, 15, 12), float32],) */;
  %153 = @func_1356() /* ty=Tensor[(4, 9, 8), float32] */;
  %154 = cast(%153, dtype="float64") /* ty=Tensor[(4, 9, 8), float64] */;
  %155 = acosh(%154) /* ty=Tensor[(4, 9, 8), float64] */;
  %156 = cast(%153, dtype="float32") /* ty=Tensor[(4, 9, 8), float32] */;
  %157 = shape_of(%155, dtype="int32") /* ty=Tensor[(3), int32] */;
  %158 = cast(%155, dtype="float32") /* ty=Tensor[(4, 9, 8), float32] */;
  %159 = dyn.reshape(%156, %157, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %160 = %152.0;
  %161 = floor_divide(%158, %159) /* ty=Tensor[(4, 9, 8), float32] */;
  (%160, %var_4361, %161)
}

def @func_750(%var_723: Tensor[(1, 5, 2), bool], %var_724: Tensor[(7, 5, 2), bool]) -> Tensor[(7, 5, 2), float64] {
  %162 = cast(%var_723, dtype="bool") /* ty=Tensor[(1, 5, 2), bool] */;
  %163 = cast(%var_724, dtype="bool") /* ty=Tensor[(7, 5, 2), bool] */;
  %164 = logical_and(%162, %163) /* ty=Tensor[(7, 5, 2), bool] */;
  %165 = cast(%164, dtype="float64") /* ty=Tensor[(7, 5, 2), float64] */;
  %166 = cast(%var_723, dtype="float64") /* ty=Tensor[(1, 5, 2), float64] */;
  multiply(%165, %166) /* ty=Tensor[(7, 5, 2), float64] */
}

def @func_1356() -> Tensor[(4, 9, 8), float32] {
  %167 = cast(meta[relay.Constant][8] /* ty=Tensor[(4, 9, 8), float64] */, dtype="float64") /* ty=Tensor[(4, 9, 8), float64] */;
  %168 = cosh(%167) /* ty=Tensor[(4, 9, 8), float64] */;
  %169 = cast(meta[relay.Constant][8] /* ty=Tensor[(4, 9, 8), float64] */, dtype="float32") /* ty=Tensor[(4, 9, 8), float32] */;
  %170 = shape_of(%168, dtype="int32") /* ty=Tensor[(3), int32] */;
  %171 = cast(%168, dtype="float32") /* ty=Tensor[(4, 9, 8), float32] */;
  %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  subtract(%171, %172) /* ty=Tensor[(4, 9, 8), float32] */
}

def @func_1081(%var_1040: Tensor[(7, 1, 14), float32], %var_1057: Tensor[(10), bool]) -> (Tensor[(7, ?, 14), uint32], Tensor[(11, 14), float64], Tensor[(10), bool], Tensor[(10), bool], Tensor[(7, 1, 14), float64], Tensor[(11, 14), float64], Tensor[(9, 16, 12), float64], Tensor[(1728), uint16]) {
  %173 = cast(%var_1040, dtype="float32") /* ty=Tensor[(7, 1, 14), float32] */;
  %174 = rsqrt(%173) /* ty=Tensor[(7, 1, 14), float32] */;
  %175 = cast(%var_1040, dtype="uint32") /* ty=Tensor[(7, 1, 14), uint32] */;
  %176 = shape_of(%174, dtype="int32") /* ty=Tensor[(3), int32] */;
  %177 = cast(%174, dtype="uint32") /* ty=Tensor[(7, 1, 14), uint32] */;
  %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %179 = @func_934() /* ty=(Tensor[(8, 12, 9), uint32], Tensor[(11, 14), float64], Tensor[(11, 14), float64]) */;
  %180 = cast(%var_1057, dtype="bool") /* ty=Tensor[(10), bool] */;
  %181 = reshape(%180, newshape=[10]) /* ty=Tensor[(10), bool] */;
  %182 = @func_904(%181) /* ty=(Tensor[(8, 12, 9), bool], Tensor[(7, 5, 2), float64], Tensor[(10), bool], Tensor[(70), bool], Tensor[(7, 5, 2), float64], Tensor[(594), bool], Tensor[(6, 144), float32], Tensor[(11, 14), float64]) */;
  %183 = cast(%174, dtype="float64") /* ty=Tensor[(7, 1, 14), float64] */;
  %184 = @func_613() /* ty=(Tensor[(11, 14), float64], Tensor[(8, 12, 9), bool], Tensor[(6, 144), float32]) */;
  %185 = cast(meta[relay.Constant][9] /* ty=Tensor[(1728), uint16] */, dtype="uint16") /* ty=Tensor[(1728), uint16] */;
  %186 = cast(meta[relay.Constant][9] /* ty=Tensor[(1728), uint16] */, dtype="uint16") /* ty=Tensor[(1728), uint16] */;
  %187 = reshape(%185, newshape=[9, 16, 12]) /* ty=Tensor[(9, 16, 12), uint16] */;
  %188 = reshape(%186, newshape=[9, 16, 12]) /* ty=Tensor[(9, 16, 12), uint16] */;
  %189 = @func_186(%187, %188) /* ty=(Tensor[(9, 16, 12), bool], Tensor[(9, 16, 12), float64], Tensor[(9, 16, 12), int16]) */;
  %190 = bitwise_and(%177, %178) /* ty=Tensor[(7, ?, 14), uint32] */;
  %191 = %179.2;
  %192 = %182.2;
  %193 = exp(%183) /* ty=Tensor[(7, 1, 14), float64] */;
  %194 = %184.0;
  %195 = %189.1;
  (%190, %191, %192, %var_1057, %193, %194, %195, meta[relay.Constant][9] /* ty=Tensor[(1728), uint16] */)
}

def @func_82(%var_32: Tensor[(2, 12, 6), float32], %var_78: Tensor[(2, 12, 6), float32]) -> Tensor[(2, 12, 6), bool] {
  %196 = cast(%var_32, dtype="float32") /* ty=Tensor[(2, 12, 6), float32] */;
  %197 = log10(%196) /* ty=Tensor[(2, 12, 6), float32] */;
  %198 = cast(%var_78, dtype="bool") /* ty=Tensor[(2, 12, 6), bool] */;
  %199 = shape_of(%197, dtype="int32") /* ty=Tensor[(3), int32] */;
  %200 = cast(%197, dtype="bool") /* ty=Tensor[(2, 12, 6), bool] */;
  %201 = dyn.reshape(%198, %199, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%200, %201) /* ty=Tensor[(2, 12, 6), bool] */
}

def @func_707(%var_693: Tensor[(9, 6, 11), float64]) -> (Tensor[(9, 6, 11), float64], Tensor[(9, 6, 11), float64]) {
  %202 = cast(%var_693, dtype="float64") /* ty=Tensor[(9, 6, 11), float64] */;
  %203 = cast(meta[relay.Constant][10] /* ty=Tensor[(9, 6, 11), float64] */, dtype="float64") /* ty=Tensor[(9, 6, 11), float64] */;
  %204 = shape_of(%var_693, dtype="int32") /* ty=Tensor[(3), int32] */;
  %205 = cast(%var_693, dtype="float64") /* ty=Tensor[(9, 6, 11), float64] */;
  %206 = dyn.reshape(%203, %204, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %207 = tan(%202) /* ty=Tensor[(9, 6, 11), float64] */;
  %208 = divide(%205, %206) /* ty=Tensor[(9, 6, 11), float64] */;
  (%207, %208)
}

def @func_3647() -> (Tensor[(11, 14), float64],) {
  %209 = @func_934() /* ty=(Tensor[(8, 12, 9), uint32], Tensor[(11, 14), float64], Tensor[(11, 14), float64]) */;
  %210 = %209.2;
  (%210,)
}

def @func_1151() -> (Tensor[(8, 12, 9), bool], Tensor[(11, 14), float64], Tensor[(11, 14), float64], Tensor[(9, 6, 11), float64], Tensor[(594), float64]) {
  %211 = @func_772() /* ty=(Tensor[(8, 12, 9), bool],) */;
  %212 = @func_838() /* ty=(Tensor[(11, 14), float64], Tensor[(11, 14), float64]) */;
  %213 = @func_934() /* ty=(Tensor[(8, 12, 9), uint32], Tensor[(11, 14), float64], Tensor[(11, 14), float64]) */;
  %214 = cast(meta[relay.Constant][11] /* ty=Tensor[(594), float64] */, dtype="float64") /* ty=Tensor[(594), float64] */;
  %215 = reshape(%214, newshape=[9, 6, 11]) /* ty=Tensor[(9, 6, 11), float64] */;
  %216 = @func_707(%215) /* ty=(Tensor[(9, 6, 11), float64], Tensor[(9, 6, 11), float64]) */;
  %217 = %211.0;
  %218 = %212.1;
  %219 = %213.1;
  %220 = %216.0;
  (%217, %218, %219, %220, meta[relay.Constant][11] /* ty=Tensor[(594), float64] */)
}

def @func_1253() -> Tensor[(6, 144), float64] {
  %221 = @func_613() /* ty=(Tensor[(11, 14), float64], Tensor[(8, 12, 9), bool], Tensor[(6, 144), float32]) */;
  %222 = %221.2;
  %223 = cast(meta[relay.Constant][12] /* ty=Tensor[(6, 144), float32] */, dtype="float64") /* ty=Tensor[(6, 144), float64] */;
  %224 = shape_of(%222, dtype="int32") /* ty=Tensor[(2), int32] */;
  %225 = cast(%222, dtype="float64") /* ty=Tensor[(6, 144), float64] */;
  %226 = dyn.reshape(%223, %224, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  divide(%225, %226) /* ty=Tensor[(6, 144), float64] */
}

def @func_2748() -> Tensor[(9, 16, 15), float64] {
  %227 = cast(meta[relay.Constant][13] /* ty=Tensor[(9, 16, 15), float64] */, dtype="float64") /* ty=Tensor[(9, 16, 15), float64] */;
  sin(%227) /* ty=Tensor[(9, 16, 15), float64] */
}

def @func_3818(%var_3812: Tensor[(10), bool]) -> (Tensor[(594), bool], Tensor[(8, 12, 9), float32], Tensor[(70), bool], Tensor[(10), bool]) {
  %228 = @func_1818() /* ty=(Tensor[(8, 12, 9), bool], Tensor[(594), uint8], Tensor[(594), bool]) */;
  %229 = cast(%var_3812, dtype="bool") /* ty=Tensor[(10), bool] */;
  %230 = reshape(%229, newshape=[10]) /* ty=Tensor[(10), bool] */;
  %231 = @func_904(%230) /* ty=(Tensor[(8, 12, 9), bool], Tensor[(7, 5, 2), float64], Tensor[(10), bool], Tensor[(70), bool], Tensor[(7, 5, 2), float64], Tensor[(594), bool], Tensor[(6, 144), float32], Tensor[(11, 14), float64]) */;
  %232 = %228.2;
  %233 = @func_2056() /* ty=Tensor[(8, 12, 9), float32] */;
  %234 = %231.3;
  (%232, %233, %234, %var_3812)
}

def @func_3916(%var_3879: Tensor[(56), float32], %var_3893: Tensor[(594), bool]) -> (Tensor[(8, 12, 9), float32], Tensor[(56), float32], Tensor[(6, 144), float64], Tensor[(864, 2), float32], Tensor[(1728), uint16], Tensor[(594), int16]) {
  %235 = @func_2056() /* ty=Tensor[(8, 12, 9), float32] */;
  %236 = cast(%235, dtype="float64") /* ty=Tensor[(8, 12, 9), float64] */;
  %237 = reshape(%236, newshape=[6, 144]) /* ty=Tensor[(6, 144), float64] */;
  %238 = @func_1413(%237) /* ty=(Tensor[(6, 144), bool], Tensor[(4, 9, 8), float32]) */;
  %239 = %238.0;
  %240 = cast(%239, dtype="float64") /* ty=Tensor[(6, 144), float64] */;
  %241 = cast(meta[relay.Constant][14] /* ty=Tensor[(1728), uint16] */, dtype="uint16") /* ty=Tensor[(1728), uint16] */;
  %242 = reshape(%241, newshape=[864, 2]) /* ty=Tensor[(864, 2), uint16] */;
  %243 = @func_2810(%242) /* ty=(Tensor[(11, 14), float64], Tensor[(864, 2), float32]) */;
  %244 = cast(%var_3879, dtype="float32") /* ty=Tensor[(56), float32] */;
  %245 = cast(%var_3879, dtype="float32") /* ty=Tensor[(56), float32] */;
  %246 = reshape(%244, newshape=[2, 14, 2]) /* ty=Tensor[(2, 14, 2), float32] */;
  %247 = reshape(%245, newshape=[2, 14, 2]) /* ty=Tensor[(2, 14, 2), float32] */;
  %248 = @func_1970(%246, %247) /* ty=(Tensor[(2, 14, 2), int8], Tensor[(594), bool], Tensor[(2, 14, 2), float32], Tensor[(8, 12, 9), float64], Tensor[(8, 12, 9), bool]) */;
  %249 = %248.1;
  %250 = cast(%var_3893, dtype="int16") /* ty=Tensor[(594), int16] */;
  %251 = shape_of(%249, dtype="int32") /* ty=Tensor[(1), int32] */;
  %252 = cast(%249, dtype="int16") /* ty=Tensor[(594), int16] */;
  %253 = dyn.reshape(%250, %251, newshape=[]) /* ty=Tensor[(?), int16] */;
  %254 = sin(%240) /* ty=Tensor[(6, 144), float64] */;
  %255 = %243.1;
  %256 = bitwise_or(%252, %253) /* ty=Tensor[(594), int16] */;
  (%235, %var_3879, %254, %255, meta[relay.Constant][14] /* ty=Tensor[(1728), uint16] */, %256)
}

def @func_4697() -> (Tensor[(11, 14), float64], Tensor[(6, 144), float32]) {
  %257 = @func_3516() /* ty=(Tensor[(11, 14), float64], Tensor[(11, 14), float64], Tensor[(432), int8], Tensor[(6, 144), float64]) */;
  %258 = @func_613() /* ty=(Tensor[(11, 14), float64], Tensor[(8, 12, 9), bool], Tensor[(6, 144), float32]) */;
  %259 = %257.1;
  %260 = %258.2;
  (%259, %260)
}

def @func_1198() -> (Tensor[(11, 14), float64], Tensor[(11, 14), float64]) {
  %261 = @func_838() /* ty=(Tensor[(11, 14), float64], Tensor[(11, 14), float64]) */;
  %262 = @func_1029() /* ty=(Tensor[(11, 14), float64], Tensor[(11, 14), float64]) */;
  %263 = %261.1;
  %264 = %262.1;
  (%263, %264)
}

def @func_2278(%var_2251: Tensor[(594), uint8]) -> (Tensor[(6, 144), uint16], Tensor[(11, 14), float64], Tensor[(594), uint8], Tensor[(6, 144), float64]) {
  %265 = @func_1253() /* ty=Tensor[(6, 144), float64] */;
  %266 = cast(meta[relay.Constant][15] /* ty=Tensor[(6, 144), float64] */, dtype="uint16") /* ty=Tensor[(6, 144), uint16] */;
  %267 = shape_of(%265, dtype="int32") /* ty=Tensor[(2), int32] */;
  %268 = cast(%265, dtype="uint16") /* ty=Tensor[(6, 144), uint16] */;
  %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %270 = @func_1198() /* ty=(Tensor[(11, 14), float64], Tensor[(11, 14), float64]) */;
  %271 = @func_1818() /* ty=(Tensor[(8, 12, 9), bool], Tensor[(594), uint8], Tensor[(594), bool]) */;
  %272 = %271.1;
  %273 = cast(%var_2251, dtype="uint8") /* ty=Tensor[(594), uint8] */;
  %274 = shape_of(%272, dtype="int32") /* ty=Tensor[(1), int32] */;
  %275 = cast(%272, dtype="uint8") /* ty=Tensor[(594), uint8] */;
  %276 = dyn.reshape(%273, %274, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %277 = cast(%265, dtype="float64") /* ty=Tensor[(6, 144), float64] */;
  %278 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(6, 144), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %279 = cast(meta[relay.Constant][15] /* ty=Tensor[(6, 144), float64] */, dtype="float64") /* ty=Tensor[(6, 144), float64] */;
  %280 = dyn.reshape(%277, %278, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %281 = left_shift(%268, %269) /* ty=Tensor[(6, 144), uint16] */;
  %282 = %270.1;
  %283 = bitwise_xor(%275, %276) /* ty=Tensor[(594), uint8] */;
  %284 = floor_divide(%279, %280) /* ty=Tensor[(6, 144), float64] */;
  (%281, %282, %283, %284)
}

def @func_772() -> (Tensor[(8, 12, 9), bool],) {
  %285 = @func_613() /* ty=(Tensor[(11, 14), float64], Tensor[(8, 12, 9), bool], Tensor[(6, 144), float32]) */;
  %286 = %285.1;
  (%286,)
}

def @func_934() -> (Tensor[(8, 12, 9), uint32], Tensor[(11, 14), float64], Tensor[(11, 14), float64]) {
  %287 = @func_613() /* ty=(Tensor[(11, 14), float64], Tensor[(8, 12, 9), bool], Tensor[(6, 144), float32]) */;
  %288 = %287.1;
  %289 = cast(meta[relay.Constant][16] /* ty=Tensor[(8, 12, 9), bool] */, dtype="uint32") /* ty=Tensor[(8, 12, 9), uint32] */;
  %290 = shape_of(%288, dtype="int32") /* ty=Tensor[(3), int32] */;
  %291 = cast(%288, dtype="uint32") /* ty=Tensor[(8, 12, 9), uint32] */;
  %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %293 = @func_838() /* ty=(Tensor[(11, 14), float64], Tensor[(11, 14), float64]) */;
  %294 = @func_838() /* ty=(Tensor[(11, 14), float64], Tensor[(11, 14), float64]) */;
  %295 = right_shift(%291, %292) /* ty=Tensor[(8, 12, 9), uint32] */;
  %296 = %293.1;
  %297 = %294.0;
  (%295, %296, %297)
}

def @func_4042(%var_4034: Tensor[(8, 12, 9), float32]) -> Tensor[(8, 12, 9), float32] {
  %298 = @func_3602() /* ty=(Tensor[(8, 12, 9), bool], Tensor[(8, 12, 9), float32]) */;
  %299 = %298.1;
  %300 = cast(%var_4034, dtype="float32") /* ty=Tensor[(8, 12, 9), float32] */;
  %301 = shape_of(%299, dtype="int32") /* ty=Tensor[(3), int32] */;
  %302 = cast(%299, dtype="float32") /* ty=Tensor[(8, 12, 9), float32] */;
  %303 = dyn.reshape(%300, %301, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%302, %303) /* ty=Tensor[(8, 12, 9), float32] */
}

def @func_4469(%var_4457: Tensor[(432), int8]) -> (Tensor[(594), uint8], Tensor[(12, 9, 4), float32], Tensor[(432), int8]) {
  %304 = cast(%var_4457, dtype="int8") /* ty=Tensor[(432), int8] */;
  %305 = reshape(%304, newshape=[12, 9, 4]) /* ty=Tensor[(12, 9, 4), int8] */;
  %306 = @func_1342(%305) /* ty=(Tensor[(11, 14), float64], Tensor[(12, 9, 4), float64], Tensor[(12, 9, 4), float32], Tensor[(12, 9, 4), float64]) */;
  %307 = @func_4192() /* ty=Tensor[(594), uint8] */;
  %308 = %306.2;
  (%307, %308, %var_4457)
}

def @func_3516() -> (Tensor[(11, 14), float64], Tensor[(11, 14), float64], Tensor[(432), int8], Tensor[(6, 144), float64]) {
  %309 = cast(meta[relay.Constant][17] /* ty=Tensor[(432), int8] */, dtype="int8") /* ty=Tensor[(432), int8] */;
  %310 = reshape(%309, newshape=[432]) /* ty=Tensor[(432), int8] */;
  %311 = @func_1505(%310) /* ty=(Tensor[(11, 14), float64], Tensor[(11, 14), float64], Tensor[(432), int8]) */;
  %312 = @func_677() /* ty=Tensor[(11, 14), float64] */;
  %313 = %311.1;
  %314 = @func_1253() /* ty=Tensor[(6, 144), float64] */;
  (%312, %313, meta[relay.Constant][17] /* ty=Tensor[(432), int8] */, %314)
}

def @func_1029() -> (Tensor[(11, 14), float64], Tensor[(11, 14), float64]) {
  %315 = @func_838() /* ty=(Tensor[(11, 14), float64], Tensor[(11, 14), float64]) */;
  %316 = %315.0;
  %317 = @func_677() /* ty=Tensor[(11, 14), float64] */;
  (%316, %317)
}

def @func_779() -> (Tensor[(11, 14), float64],) {
  %318 = @func_613() /* ty=(Tensor[(11, 14), float64], Tensor[(8, 12, 9), bool], Tensor[(6, 144), float32]) */;
  %319 = %318.0;
  (%319,)
}

def @func_3271() -> Tensor[(4, 9, 8), float32] {
  @func_2959() /* ty=Tensor[(4, 9, 8), float32] */
}

def @func_4721(%var_4716: Tensor[(3, 5, 16), float32]) -> (Tensor[(3, 5, 16), float32],) {
  %320 = cast(meta[relay.Constant][18] /* ty=Tensor[(3, 1, 16), float32] */, dtype="float32") /* ty=Tensor[(3, 1, 16), float32] */;
  %321 = cast(%var_4716, dtype="float32") /* ty=Tensor[(3, 5, 16), float32] */;
  %322 = floor_mod(%320, %321) /* ty=Tensor[(3, 5, 16), float32] */;
  (%322,)
}

def @func_677() -> Tensor[(11, 14), float64] {
  %323 = @func_613() /* ty=(Tensor[(11, 14), float64], Tensor[(8, 12, 9), bool], Tensor[(6, 144), float32]) */;
  %323.0
}

def @func_2313(%var_2307: Tensor[(2, 5, 5), int64]) -> (Tensor[(2, 5, 5), int64],) {
  %324 = cast(%var_2307, dtype="int64") /* ty=Tensor[(2, 5, 5), int64] */;
  %325 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(2, 5, 5), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %326 = cast(meta[relay.Constant][19] /* ty=Tensor[(2, 5, 5), int64] */, dtype="int64") /* ty=Tensor[(2, 5, 5), int64] */;
  %327 = dyn.reshape(%324, %325, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %328 = left_shift(%326, %327) /* ty=Tensor[(2, 5, 5), int64] */;
  (%328,)
}

def @func_904(%var_866: Tensor[(10), bool]) -> (Tensor[(8, 12, 9), bool], Tensor[(7, 5, 2), float64], Tensor[(10), bool], Tensor[(70), bool], Tensor[(7, 5, 2), float64], Tensor[(594), bool], Tensor[(6, 144), float32], Tensor[(11, 14), float64]) {
  %329 = @func_772() /* ty=(Tensor[(8, 12, 9), bool],) */;
  %330 = cast(%var_866, dtype="bool") /* ty=Tensor[(10), bool] */;
  %331 = cast(meta[relay.Constant][20] /* ty=Tensor[(70), bool] */, dtype="bool") /* ty=Tensor[(70), bool] */;
  %332 = reshape(%330, newshape=[1, 5, 2]) /* ty=Tensor[(1, 5, 2), bool] */;
  %333 = reshape(%331, newshape=[7, 5, 2]) /* ty=Tensor[(7, 5, 2), bool] */;
  %334 = cast(%var_866, dtype="bool") /* ty=Tensor[(10), bool] */;
  %335 = cast(meta[relay.Constant][20] /* ty=Tensor[(70), bool] */, dtype="bool") /* ty=Tensor[(70), bool] */;
  %336 = reshape(%334, newshape=[1, 5, 2]) /* ty=Tensor[(1, 5, 2), bool] */;
  %337 = reshape(%335, newshape=[7, 5, 2]) /* ty=Tensor[(7, 5, 2), bool] */;
  %338 = cast(meta[relay.Constant][21] /* ty=Tensor[(594), float64] */, dtype="float64") /* ty=Tensor[(594), float64] */;
  %339 = reshape(%338, newshape=[9, 6, 11]) /* ty=Tensor[(9, 6, 11), float64] */;
  %340 = @func_707(%339) /* ty=(Tensor[(9, 6, 11), float64], Tensor[(9, 6, 11), float64]) */;
  %341 = %340.0;
  %342 = cast(%341, dtype="bool") /* ty=Tensor[(9, 6, 11), bool] */;
  %343 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(594), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %344 = cast(meta[relay.Constant][21] /* ty=Tensor[(594), float64] */, dtype="bool") /* ty=Tensor[(594), bool] */;
  %345 = dyn.reshape(%342, %343, newshape=[]) /* ty=Tensor[(?), bool] */;
  %346 = @func_613() /* ty=(Tensor[(11, 14), float64], Tensor[(8, 12, 9), bool], Tensor[(6, 144), float32]) */;
  %347 = %329.0;
  %348 = @func_750(%332, %333) /* ty=Tensor[(7, 5, 2), float64] */;
  %349 = @func_750(%336, %337) /* ty=Tensor[(7, 5, 2), float64] */;
  %350 = greater_equal(%344, %345) /* ty=Tensor[(594), bool] */;
  %351 = %346.2;
  %352 = @func_677() /* ty=Tensor[(11, 14), float64] */;
  (%347, %348, %var_866, meta[relay.Constant][20] /* ty=Tensor[(70), bool] */, %349, %350, %351, %352)
}

def @func_3835() -> Tensor[(8, 12, 9), float64] {
  %353 = @func_1231() /* ty=(Tensor[(8, 12, 9), float64],) */;
  %353.0
}

def @func_4553(%var_4533: Tensor[(2, 6, 4), float32]) -> Tensor[(2, 6, 4), float64] {
  %354 = cast(%var_4533, dtype="float32") /* ty=Tensor[(2, 6, 4), float32] */;
  %355 = tan(%354) /* ty=Tensor[(2, 6, 4), float32] */;
  %356 = cast(%355, dtype="float64") /* ty=Tensor[(2, 6, 4), float64] */;
  sigmoid(%356) /* ty=Tensor[(2, 6, 4), float64] */
}

def @func_2498(%var_2434: Tensor[(10), bool], %var_2483: Tensor[(8, 12, 9), bool]) -> (Tensor[(11, 14), float64], Tensor[(98), float32], Tensor[(10), bool], Tensor[(11, 14), float64], Tensor[(8, 12, 9), float32], Tensor[(2, 12, 6), bool], Tensor[(144), float32]) {
  %357 = cast(meta[relay.Constant][22] /* ty=Tensor[(98), float32] */, dtype="float32") /* ty=Tensor[(98), float32] */;
  %358 = cast(%var_2434, dtype="bool") /* ty=Tensor[(10), bool] */;
  %359 = reshape(%357, newshape=[98]) /* ty=Tensor[(98), float32] */;
  %360 = reshape(%358, newshape=[10]) /* ty=Tensor[(10), bool] */;
  %361 = @func_1749(%359, %360) /* ty=(Tensor[(11, 14), float64], Tensor[(7, ?, 14), uint32], Tensor[(98), float32], Tensor[(10), bool]) */;
  %362 = @func_772() /* ty=(Tensor[(8, 12, 9), bool],) */;
  %363 = %362.0;
  %364 = cast(%var_2483, dtype="float32") /* ty=Tensor[(8, 12, 9), float32] */;
  %365 = shape_of(%363, dtype="int32") /* ty=Tensor[(3), int32] */;
  %366 = cast(%363, dtype="float32") /* ty=Tensor[(8, 12, 9), float32] */;
  %367 = dyn.reshape(%364, %365, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %368 = cast(meta[relay.Constant][23] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %369 = cast(meta[relay.Constant][23] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %370 = reshape(%368, newshape=[2, 12, 6]) /* ty=Tensor[(2, 12, 6), float32] */;
  %371 = reshape(%369, newshape=[2, 12, 6]) /* ty=Tensor[(2, 12, 6), float32] */;
  %372 = %361.0;
  %373 = @func_677() /* ty=Tensor[(11, 14), float64] */;
  %374 = power(%366, %367) /* ty=Tensor[(8, 12, 9), float32] */;
  %375 = @func_82(%370, %371) /* ty=Tensor[(2, 12, 6), bool] */;
  (%372, meta[relay.Constant][22] /* ty=Tensor[(98), float32] */, %var_2434, %373, %374, %375, meta[relay.Constant][23] /* ty=Tensor[(144), float32] */)
}

def @func_3202() -> (Tensor[(7, 5, 2), float64], Tensor[(70), bool], Tensor[(4, 9, 8), float32], Tensor[(10, 594), bool]) {
  %376 = cast(meta[relay.Constant][24] /* ty=Tensor[(10, 1), bool] */, dtype="bool") /* ty=Tensor[(10, 1), bool] */;
  %377 = cast(meta[relay.Constant][25] /* ty=Tensor[(70), bool] */, dtype="bool") /* ty=Tensor[(70), bool] */;
  %378 = reshape(%376, newshape=[1, 5, 2]) /* ty=Tensor[(1, 5, 2), bool] */;
  %379 = reshape(%377, newshape=[7, 5, 2]) /* ty=Tensor[(7, 5, 2), bool] */;
  %380 = @func_2850() /* ty=(Tensor[(4, 9, 8), float32],) */;
  %381 = @func_1818() /* ty=(Tensor[(8, 12, 9), bool], Tensor[(594), uint8], Tensor[(594), bool]) */;
  %382 = %381.2;
  %383 = cast(meta[relay.Constant][24] /* ty=Tensor[(10, 1), bool] */, dtype="bool") /* ty=Tensor[(10, 1), bool] */;
  %384 = cast(%382, dtype="bool") /* ty=Tensor[(594), bool] */;
  %385 = @func_750(%378, %379) /* ty=Tensor[(7, 5, 2), float64] */;
  %386 = %380.0;
  %387 = less(%383, %384) /* ty=Tensor[(10, 594), bool] */;
  (%385, meta[relay.Constant][25] /* ty=Tensor[(70), bool] */, %386, %387)
}

def @func_186(%var_105: Tensor[(9, 16, 12), uint16], %var_106: Tensor[(9, 16, 12), uint16]) -> (Tensor[(9, 16, 12), bool], Tensor[(9, 16, 12), float64], Tensor[(9, 16, 12), int16]) {
  %388 = cast(%var_106, dtype="bool") /* ty=Tensor[(9, 16, 12), bool] */;
  %389 = shape_of(%var_105, dtype="int32") /* ty=Tensor[(3), int32] */;
  %390 = cast(%var_105, dtype="bool") /* ty=Tensor[(9, 16, 12), bool] */;
  %391 = dyn.reshape(%388, %389, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %392 = less(%390, %391) /* ty=Tensor[(9, 16, 12), bool] */;
  %393 = cast(%392, dtype="bool") /* ty=Tensor[(9, 16, 12), bool] */;
  %394 = shape_of(%var_105, dtype="int32") /* ty=Tensor[(3), int32] */;
  %395 = cast(%var_105, dtype="bool") /* ty=Tensor[(9, 16, 12), bool] */;
  %396 = dyn.reshape(%393, %394, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %397 = cast(%var_105, dtype="float64") /* ty=Tensor[(9, 16, 12), float64] */;
  %398 = log(%397) /* ty=Tensor[(9, 16, 12), float64] */;
  %399 = cast(meta[relay.Constant][26] /* ty=Tensor[(9, 16, 12), float64] */, dtype="float64") /* ty=Tensor[(9, 16, 12), float64] */;
  %400 = shape_of(%398, dtype="int32") /* ty=Tensor[(3), int32] */;
  %401 = cast(%398, dtype="float64") /* ty=Tensor[(9, 16, 12), float64] */;
  %402 = dyn.reshape(%399, %400, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %403 = cast(%398, dtype="float32") /* ty=Tensor[(9, 16, 12), float32] */;
  %404 = asin(%403) /* ty=Tensor[(9, 16, 12), float32] */;
  %405 = cast(%404, dtype="bool") /* ty=Tensor[(9, 16, 12), bool] */;
  %406 = shape_of(%398, dtype="int32") /* ty=Tensor[(3), int32] */;
  %407 = cast(%398, dtype="bool") /* ty=Tensor[(9, 16, 12), bool] */;
  %408 = dyn.reshape(%405, %406, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %409 = less_equal(%407, %408) /* ty=Tensor[(9, 16, 12), bool] */;
  %410 = cast(%404, dtype="float32") /* ty=Tensor[(9, 16, 12), float32] */;
  %411 = acos(%410) /* ty=Tensor[(9, 16, 12), float32] */;
  %412 = cast(%411, dtype="int16") /* ty=Tensor[(9, 16, 12), int16] */;
  %413 = shape_of(%409, dtype="int32") /* ty=Tensor[(3), int32] */;
  %414 = cast(%409, dtype="int16") /* ty=Tensor[(9, 16, 12), int16] */;
  %415 = dyn.reshape(%412, %413, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %416 = logical_or(%395, %396) /* ty=Tensor[(9, 16, 12), bool] */;
  %417 = divide(%401, %402) /* ty=Tensor[(9, 16, 12), float64] */;
  %418 = bitwise_and(%414, %415) /* ty=Tensor[(9, 16, 12), int16] */;
  (%416, %417, %418)
}

def @func_4651() -> (Tensor[(11, 14), float64], Tensor[(98), float32], Tensor[(98), float32], Tensor[(10), bool]) {
  %419 = @func_1029() /* ty=(Tensor[(11, 14), float64], Tensor[(11, 14), float64]) */;
  %420 = cast(meta[relay.Constant][27] /* ty=Tensor[(98), float32] */, dtype="float32") /* ty=Tensor[(98), float32] */;
  %421 = cast(meta[relay.Constant][28] /* ty=Tensor[(10), bool] */, dtype="bool") /* ty=Tensor[(10), bool] */;
  %422 = reshape(%420, newshape=[98]) /* ty=Tensor[(98), float32] */;
  %423 = reshape(%421, newshape=[10]) /* ty=Tensor[(10), bool] */;
  %424 = @func_1749(%422, %423) /* ty=(Tensor[(11, 14), float64], Tensor[(7, ?, 14), uint32], Tensor[(98), float32], Tensor[(10), bool]) */;
  %425 = %419.0;
  %426 = %424.2;
  (%425, %426, meta[relay.Constant][27] /* ty=Tensor[(98), float32] */, meta[relay.Constant][28] /* ty=Tensor[(10), bool] */)
}

def @func_4307(%var_4287: Tensor[(9, 12, 2), bool], %var_4292: Tensor[(9, 12, 2), bool]) -> (Tensor[(9, 12, 2), float32], Tensor[(9, 12, 2), float64], Tensor[(9, 12, 2), bool], Tensor[(9, 12, 2), bool]) {
  %427 = @func_3969() /* ty=(Tensor[(8, 12, 9), float64], Tensor[(9, 12, 2), bool], Tensor[(216), float64]) */;
  %428 = %427.1;
  %429 = cast(%428, dtype="float64") /* ty=Tensor[(9, 12, 2), float64] */;
  %430 = erf(%429) /* ty=Tensor[(9, 12, 2), float64] */;
  %431 = cast(%428, dtype="float32") /* ty=Tensor[(9, 12, 2), float32] */;
  %432 = shape_of(%430, dtype="int32") /* ty=Tensor[(3), int32] */;
  %433 = cast(%430, dtype="float32") /* ty=Tensor[(9, 12, 2), float32] */;
  %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %435 = cast(%var_4287, dtype="float64") /* ty=Tensor[(9, 12, 2), float64] */;
  %436 = shape_of(%428, dtype="int32") /* ty=Tensor[(3), int32] */;
  %437 = cast(%428, dtype="float64") /* ty=Tensor[(9, 12, 2), float64] */;
  %438 = dyn.reshape(%435, %436, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %439 = cast(%var_4292, dtype="bool") /* ty=Tensor[(9, 12, 2), bool] */;
  %440 = shape_of(%428, dtype="int32") /* ty=Tensor[(3), int32] */;
  %441 = cast(%428, dtype="bool") /* ty=Tensor[(9, 12, 2), bool] */;
  %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %443 = cast(%428, dtype="bool") /* ty=Tensor[(9, 12, 2), bool] */;
  %444 = shape_of(%430, dtype="int32") /* ty=Tensor[(3), int32] */;
  %445 = cast(%430, dtype="bool") /* ty=Tensor[(9, 12, 2), bool] */;
  %446 = dyn.reshape(%443, %444, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %447 = greater_equal(%445, %446) /* ty=Tensor[(9, 12, 2), bool] */;
  %448 = cast(%447, dtype="bool") /* ty=Tensor[(9, 12, 2), bool] */;
  %449 = shape_of(%430, dtype="int32") /* ty=Tensor[(3), int32] */;
  %450 = cast(%430, dtype="bool") /* ty=Tensor[(9, 12, 2), bool] */;
  %451 = dyn.reshape(%448, %449, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %452 = multiply(%433, %434) /* ty=Tensor[(9, 12, 2), float32] */;
  %453 = floor_mod(%437, %438) /* ty=Tensor[(9, 12, 2), float64] */;
  %454 = logical_or(%441, %442) /* ty=Tensor[(9, 12, 2), bool] */;
  %455 = less(%450, %451) /* ty=Tensor[(9, 12, 2), bool] */;
  (%452, %453, %454, %455)
}

def @func_4849() -> Tensor[(4, 9, 8), float32] {
  @func_3271() /* ty=Tensor[(4, 9, 8), float32] */
}

def @func_344(%var_335: Tensor[(9, 12, 2), float64], %var_336: Tensor[(9, 12, 2), float64]) -> (Tensor[(9, 12, 2), bool],) {
  %456 = cast(%var_336, dtype="bool") /* ty=Tensor[(9, 12, 2), bool] */;
  %457 = shape_of(%var_335, dtype="int32") /* ty=Tensor[(3), int32] */;
  %458 = cast(%var_335, dtype="bool") /* ty=Tensor[(9, 12, 2), bool] */;
  %459 = dyn.reshape(%456, %457, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %460 = less_equal(%458, %459) /* ty=Tensor[(9, 12, 2), bool] */;
  (%460,)
}

def @func_2017() -> Tensor[(6, 144), float32] {
  %461 = @func_1253() /* ty=Tensor[(6, 144), float64] */;
  %462 = cast(%461, dtype="float64") /* ty=Tensor[(6, 144), float64] */;
  %463 = cos(%462) /* ty=Tensor[(6, 144), float64] */;
  %464 = cast(%463, dtype="float32") /* ty=Tensor[(6, 144), float32] */;
  log10(%464) /* ty=Tensor[(6, 144), float32] */
}

def @func_513(%var_465: Tensor[(15, 4, 5), uint32], %var_474: Tensor[(648), float32], %var_478: Tensor[(648), float32]) -> (Tensor[(15, 4, 5), uint32], Tensor[(9, 8, 9), float32], Tensor[(648), float32], Tensor[(15, 4, 5), float64]) {
  %465 = cast(meta[relay.Constant][29] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %466 = cast(%var_465, dtype="uint32") /* ty=Tensor[(15, 4, 5), uint32] */;
  %467 = cast(%var_474, dtype="float32") /* ty=Tensor[(648), float32] */;
  %468 = reshape(%467, newshape=[9, 8, 9]) /* ty=Tensor[(9, 8, 9), float32] */;
  %469 = @func_226(%468) /* ty=(Tensor[(9, 8, 9), float32],) */;
  %470 = cast(%var_478, dtype="float32") /* ty=Tensor[(648), float32] */;
  %471 = shape_of(%var_474, dtype="int32") /* ty=Tensor[(1), int32] */;
  %472 = cast(%var_474, dtype="float32") /* ty=Tensor[(648), float32] */;
  %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?), float32] */;
  %474 = cast(%var_465, dtype="float64") /* ty=Tensor[(15, 4, 5), float64] */;
  %475 = maximum(%465, %466) /* ty=Tensor[(15, 4, 5), uint32] */;
  %476 = %469.0;
  %477 = subtract(%472, %473) /* ty=Tensor[(648), float32] */;
  %478 = tan(%474) /* ty=Tensor[(15, 4, 5), float64] */;
  (%475, %476, %477, %478)
}

def @func_2056() -> Tensor[(8, 12, 9), float32] {
  %479 = @func_1231() /* ty=(Tensor[(8, 12, 9), float64],) */;
  %480 = %479.0;
  %481 = cast(%480, dtype="float32") /* ty=Tensor[(8, 12, 9), float32] */;
  erf(%481) /* ty=Tensor[(8, 12, 9), float32] */
}

def @func_1818() -> (Tensor[(8, 12, 9), bool], Tensor[(594), uint8], Tensor[(594), bool]) {
  %482 = @func_613() /* ty=(Tensor[(11, 14), float64], Tensor[(8, 12, 9), bool], Tensor[(6, 144), float32]) */;
  %483 = @func_1151() /* ty=(Tensor[(8, 12, 9), bool], Tensor[(11, 14), float64], Tensor[(11, 14), float64], Tensor[(9, 6, 11), float64], Tensor[(594), float64]) */;
  %484 = %483.4;
  %485 = cast(%484, dtype="float64") /* ty=Tensor[(594), float64] */;
  %486 = sinh(%485) /* ty=Tensor[(594), float64] */;
  %487 = cast(%484, dtype="bool") /* ty=Tensor[(594), bool] */;
  %488 = shape_of(%486, dtype="int32") /* ty=Tensor[(1), int32] */;
  %489 = cast(%486, dtype="bool") /* ty=Tensor[(594), bool] */;
  %490 = dyn.reshape(%487, %488, newshape=[]) /* ty=Tensor[(?), bool] */;
  %491 = logical_or(%489, %490) /* ty=Tensor[(594), bool] */;
  %492 = cast(%484, dtype="uint8") /* ty=Tensor[(594), uint8] */;
  %493 = shape_of(%491, dtype="int32") /* ty=Tensor[(1), int32] */;
  %494 = cast(%491, dtype="uint8") /* ty=Tensor[(594), uint8] */;
  %495 = dyn.reshape(%492, %493, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %496 = cast(%491, dtype="bool") /* ty=Tensor[(594), bool] */;
  %497 = shape_of(%484, dtype="int32") /* ty=Tensor[(1), int32] */;
  %498 = cast(%484, dtype="bool") /* ty=Tensor[(594), bool] */;
  %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?), bool] */;
  %500 = %482.1;
  %501 = maximum(%494, %495) /* ty=Tensor[(594), uint8] */;
  %502 = logical_and(%498, %499) /* ty=Tensor[(594), bool] */;
  (%500, %501, %502)
}

def @func_1231() -> (Tensor[(8, 12, 9), float64],) {
  %503 = @func_613() /* ty=(Tensor[(11, 14), float64], Tensor[(8, 12, 9), bool], Tensor[(6, 144), float32]) */;
  %504 = %503.1;
  %505 = cast(%504, dtype="float64") /* ty=Tensor[(8, 12, 9), float64] */;
  %506 = acosh(%505) /* ty=Tensor[(8, 12, 9), float64] */;
  (%506,)
}

def @func_5027() -> Tensor[(8, 12, 9), float64] {
  %507 = @func_1231() /* ty=(Tensor[(8, 12, 9), float64],) */;
  %507.0
}

def @func_572(%var_563: Tensor[(8, 12, 9), float32]) -> Tensor[(8, 12, 9), bool] {
  %508 = cast(%var_563, dtype="float32") /* ty=Tensor[(8, 12, 9), float32] */;
  %509 = acos(%508) /* ty=Tensor[(8, 12, 9), float32] */;
  %510 = cast(%var_563, dtype="bool") /* ty=Tensor[(8, 12, 9), bool] */;
  %511 = shape_of(%509, dtype="int32") /* ty=Tensor[(3), int32] */;
  %512 = cast(%509, dtype="bool") /* ty=Tensor[(8, 12, 9), bool] */;
  %513 = dyn.reshape(%510, %511, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%512, %513) /* ty=Tensor[(8, 12, 9), bool] */
}

def @func_1413(%var_1388: Tensor[(6, 144), float64]) -> (Tensor[(6, 144), bool], Tensor[(4, 9, 8), float32]) {
  %514 = @func_1253() /* ty=Tensor[(6, 144), float64] */;
  %515 = cast(%var_1388, dtype="bool") /* ty=Tensor[(6, 144), bool] */;
  %516 = shape_of(%514, dtype="int32") /* ty=Tensor[(2), int32] */;
  %517 = cast(%514, dtype="bool") /* ty=Tensor[(6, 144), bool] */;
  %518 = dyn.reshape(%515, %516, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %519 = less_equal(%517, %518) /* ty=Tensor[(6, 144), bool] */;
  %520 = @func_1356() /* ty=Tensor[(4, 9, 8), float32] */;
  (%519, %520)
}

def @func_613() -> (Tensor[(11, 14), float64], Tensor[(8, 12, 9), bool], Tensor[(6, 144), float32]) {
  %521 = cast(meta[relay.Constant][30] /* ty=Tensor[(11, 14), float64] */, dtype="float64") /* ty=Tensor[(11, 14), float64] */;
  %522 = cast(meta[relay.Constant][31] /* ty=Tensor[(6, 144), float32] */, dtype="float32") /* ty=Tensor[(6, 144), float32] */;
  %523 = reshape(%522, newshape=[8, 12, 9]) /* ty=Tensor[(8, 12, 9), float32] */;
  %524 = sqrt(%521) /* ty=Tensor[(11, 14), float64] */;
  %525 = @func_572(%523) /* ty=Tensor[(8, 12, 9), bool] */;
  (%524, %525, meta[relay.Constant][31] /* ty=Tensor[(6, 144), float32] */)
}

def @func_1460(%var_1445: Tensor[(8, 12, 9), uint32]) -> (Tensor[(8, 12, 9), bool],) {
  %526 = @func_934() /* ty=(Tensor[(8, 12, 9), uint32], Tensor[(11, 14), float64], Tensor[(11, 14), float64]) */;
  %527 = %526.0;
  %528 = cast(%var_1445, dtype="bool") /* ty=Tensor[(8, 12, 9), bool] */;
  %529 = shape_of(%527, dtype="int32") /* ty=Tensor[(3), int32] */;
  %530 = cast(%527, dtype="bool") /* ty=Tensor[(8, 12, 9), bool] */;
  %531 = dyn.reshape(%528, %529, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %532 = logical_and(%530, %531) /* ty=Tensor[(8, 12, 9), bool] */;
  (%532,)
}

def @func_2810(%var_2798: Tensor[(864, 2), uint16]) -> (Tensor[(11, 14), float64], Tensor[(864, 2), float32]) {
  %533 = @func_934() /* ty=(Tensor[(8, 12, 9), uint32], Tensor[(11, 14), float64], Tensor[(11, 14), float64]) */;
  %534 = cast(%var_2798, dtype="uint16") /* ty=Tensor[(864, 2), uint16] */;
  %535 = cast(%var_2798, dtype="uint16") /* ty=Tensor[(864, 2), uint16] */;
  %536 = reshape(%534, newshape=[9, 16, 12]) /* ty=Tensor[(9, 16, 12), uint16] */;
  %537 = reshape(%535, newshape=[9, 16, 12]) /* ty=Tensor[(9, 16, 12), uint16] */;
  %538 = @func_186(%536, %537) /* ty=(Tensor[(9, 16, 12), bool], Tensor[(9, 16, 12), float64], Tensor[(9, 16, 12), int16]) */;
  %539 = %538.0;
  %540 = cast(%539, dtype="float32") /* ty=Tensor[(9, 16, 12), float32] */;
  %541 = shape_of(%var_2798, dtype="int32") /* ty=Tensor[(2), int32] */;
  %542 = cast(%var_2798, dtype="float32") /* ty=Tensor[(864, 2), float32] */;
  %543 = dyn.reshape(%540, %541, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %544 = %533.1;
  %545 = floor_mod(%542, %543) /* ty=Tensor[(864, 2), float32] */;
  (%544, %545)
}

def @func_2919() -> (Tensor[(594), bool],) {
  %546 = @func_1818() /* ty=(Tensor[(8, 12, 9), bool], Tensor[(594), uint8], Tensor[(594), bool]) */;
  %547 = %546.2;
  (%547,)
}

def @func_2850() -> (Tensor[(4, 9, 8), float32],) {
  %548 = @func_1356() /* ty=Tensor[(4, 9, 8), float32] */;
  (%548,)
}

def @func_3969() -> (Tensor[(8, 12, 9), float64], Tensor[(9, 12, 2), bool], Tensor[(216), float64]) {
  %549 = @func_1231() /* ty=(Tensor[(8, 12, 9), float64],) */;
  %550 = cast(meta[relay.Constant][32] /* ty=Tensor[(216), float64] */, dtype="float64") /* ty=Tensor[(216), float64] */;
  %551 = cast(meta[relay.Constant][32] /* ty=Tensor[(216), float64] */, dtype="float64") /* ty=Tensor[(216), float64] */;
  %552 = reshape(%550, newshape=[9, 12, 2]) /* ty=Tensor[(9, 12, 2), float64] */;
  %553 = reshape(%551, newshape=[9, 12, 2]) /* ty=Tensor[(9, 12, 2), float64] */;
  %554 = @func_344(%552, %553) /* ty=(Tensor[(9, 12, 2), bool],) */;
  %555 = %549.0;
  %556 = %554.0;
  (%555, %556, meta[relay.Constant][32] /* ty=Tensor[(216), float64] */)
}

def @func_4775() -> (Tensor[(6, 144), float64], Tensor[(11, 14), float64], Tensor[(432), int8], Tensor[(2, 12, 6), bool], Tensor[(72, 2), float32], Tensor[(8, 12, 9), bool], Tensor[(11, 14), float64]) {
  %557 = cast(meta[relay.Constant][33] /* ty=Tensor[(432), int8] */, dtype="int8") /* ty=Tensor[(432), int8] */;
  %558 = reshape(%557, newshape=[432]) /* ty=Tensor[(432), int8] */;
  %559 = @func_1505(%558) /* ty=(Tensor[(11, 14), float64], Tensor[(11, 14), float64], Tensor[(432), int8]) */;
  %560 = cast(meta[relay.Constant][34] /* ty=Tensor[(72, 2), float32] */, dtype="float32") /* ty=Tensor[(72, 2), float32] */;
  %561 = cast(meta[relay.Constant][34] /* ty=Tensor[(72, 2), float32] */, dtype="float32") /* ty=Tensor[(72, 2), float32] */;
  %562 = reshape(%560, newshape=[2, 12, 6]) /* ty=Tensor[(2, 12, 6), float32] */;
  %563 = reshape(%561, newshape=[2, 12, 6]) /* ty=Tensor[(2, 12, 6), float32] */;
  %564 = @func_3632() /* ty=Tensor[(6, 144), float64] */;
  %565 = cast(%564, dtype="float32") /* ty=Tensor[(6, 144), float32] */;
  %566 = reshape(%565, newshape=[864]) /* ty=Tensor[(864), float32] */;
  %567 = @func_1648(%566) /* ty=(Tensor[(9, 6, 11), float64], Tensor[(8, 12, 9), bool], Tensor[(864), float32]) */;
  %568 = @func_779() /* ty=(Tensor[(11, 14), float64],) */;
  %569 = %559.1;
  %570 = @func_82(%562, %563) /* ty=Tensor[(2, 12, 6), bool] */;
  %571 = %567.1;
  %572 = %568.0;
  (%564, %569, meta[relay.Constant][33] /* ty=Tensor[(432), int8] */, %570, meta[relay.Constant][34] /* ty=Tensor[(72, 2), float32] */, %571, %572)
}

def @func_3686(%var_3676: Tensor[(300), uint32], %var_3677: Tensor[(648), float32]) -> (Tensor[(594), float64], Tensor[(15, 4, 5), float64], Tensor[(300), uint32], Tensor[(648), float32]) {
  %573 = @func_1151() /* ty=(Tensor[(8, 12, 9), bool], Tensor[(11, 14), float64], Tensor[(11, 14), float64], Tensor[(9, 6, 11), float64], Tensor[(594), float64]) */;
  %574 = cast(%var_3676, dtype="uint32") /* ty=Tensor[(300), uint32] */;
  %575 = cast(%var_3677, dtype="float32") /* ty=Tensor[(648), float32] */;
  %576 = cast(%var_3677, dtype="float32") /* ty=Tensor[(648), float32] */;
  %577 = reshape(%574, newshape=[15, 4, 5]) /* ty=Tensor[(15, 4, 5), uint32] */;
  %578 = reshape(%575, newshape=[648]) /* ty=Tensor[(648), float32] */;
  %579 = reshape(%576, newshape=[648]) /* ty=Tensor[(648), float32] */;
  %580 = @func_513(%577, %578, %579) /* ty=(Tensor[(15, 4, 5), uint32], Tensor[(9, 8, 9), float32], Tensor[(648), float32], Tensor[(15, 4, 5), float64]) */;
  %581 = %573.4;
  %582 = %580.3;
  (%581, %582, %var_3676, %var_3677)
}

def @func_4426() -> (Tensor[(4, 9, 8), float64], Tensor[(11, 14), float64]) {
  %583 = @func_3271() /* ty=Tensor[(4, 9, 8), float32] */;
  %584 = cast(%583, dtype="float64") /* ty=Tensor[(4, 9, 8), float64] */;
  %585 = sigmoid(%584) /* ty=Tensor[(4, 9, 8), float64] */;
  %586 = cast(%585, dtype="float64") /* ty=Tensor[(4, 9, 8), float64] */;
  %587 = @func_1291() /* ty=(Tensor[(11, 14), float64],) */;
  %588 = cos(%586) /* ty=Tensor[(4, 9, 8), float64] */;
  %589 = %587.0;
  (%588, %589)
}

def @func_3448(%var_3346: Tensor[(1728), uint16], %var_3428: Tensor[(4, 9, 8), float32]) -> (Tensor[(11, 14), float64], Tensor[(1728), uint16], Tensor[(6, 144), bool], Tensor[(8, 12, 9), uint32], Tensor[(2, 12, 6), bool], Tensor[(144), float32], Tensor[(6, 144), uint8], Tensor[(6, 144), float32], Tensor[(10), bool], Tensor[(4, 9, 8), bool], Tensor[(6, 144), float64], Tensor[(6, 144), float64]) {
  %590 = cast(%var_3346, dtype="uint16") /* ty=Tensor[(1728), uint16] */;
  %591 = reshape(%590, newshape=[864, 2]) /* ty=Tensor[(864, 2), uint16] */;
  %592 = @func_2810(%591) /* ty=(Tensor[(11, 14), float64], Tensor[(864, 2), float32]) */;
  %593 = @func_2017() /* ty=Tensor[(6, 144), float32] */;
  %594 = cast(meta[relay.Constant][35] /* ty=Tensor[(6, 144), float32] */, dtype="bool") /* ty=Tensor[(6, 144), bool] */;
  %595 = shape_of(%593, dtype="int32") /* ty=Tensor[(2), int32] */;
  %596 = cast(%593, dtype="bool") /* ty=Tensor[(6, 144), bool] */;
  %597 = dyn.reshape(%594, %595, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %598 = @func_934() /* ty=(Tensor[(8, 12, 9), uint32], Tensor[(11, 14), float64], Tensor[(11, 14), float64]) */;
  %599 = cast(meta[relay.Constant][36] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %600 = cast(meta[relay.Constant][36] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %601 = reshape(%599, newshape=[2, 12, 6]) /* ty=Tensor[(2, 12, 6), float32] */;
  %602 = reshape(%600, newshape=[2, 12, 6]) /* ty=Tensor[(2, 12, 6), float32] */;
  %603 = cast(meta[relay.Constant][35] /* ty=Tensor[(6, 144), float32] */, dtype="uint8") /* ty=Tensor[(6, 144), uint8] */;
  %604 = shape_of(%593, dtype="int32") /* ty=Tensor[(2), int32] */;
  %605 = cast(%593, dtype="uint8") /* ty=Tensor[(6, 144), uint8] */;
  %606 = dyn.reshape(%603, %604, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %607 = cast(meta[relay.Constant][37] /* ty=Tensor[(10), bool] */, dtype="bool") /* ty=Tensor[(10), bool] */;
  %608 = reshape(%607, newshape=[10]) /* ty=Tensor[(10), bool] */;
  %609 = @func_904(%608) /* ty=(Tensor[(8, 12, 9), bool], Tensor[(7, 5, 2), float64], Tensor[(10), bool], Tensor[(70), bool], Tensor[(7, 5, 2), float64], Tensor[(594), bool], Tensor[(6, 144), float32], Tensor[(11, 14), float64]) */;
  %610 = @func_1356() /* ty=Tensor[(4, 9, 8), float32] */;
  %611 = cast(%var_3428, dtype="bool") /* ty=Tensor[(4, 9, 8), bool] */;
  %612 = shape_of(%610, dtype="int32") /* ty=Tensor[(3), int32] */;
  %613 = cast(%610, dtype="bool") /* ty=Tensor[(4, 9, 8), bool] */;
  %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %615 = cast(meta[relay.Constant][35] /* ty=Tensor[(6, 144), float32] */, dtype="float64") /* ty=Tensor[(6, 144), float64] */;
  %616 = sinh(%615) /* ty=Tensor[(6, 144), float64] */;
  %617 = cast(%616, dtype="float64") /* ty=Tensor[(6, 144), float64] */;
  %618 = cast(%616, dtype="float64") /* ty=Tensor[(6, 144), float64] */;
  %619 = %592.0;
  %620 = equal(%596, %597) /* ty=Tensor[(6, 144), bool] */;
  %621 = %598.0;
  %622 = @func_82(%601, %602) /* ty=Tensor[(2, 12, 6), bool] */;
  %623 = bitwise_xor(%605, %606) /* ty=Tensor[(6, 144), uint8] */;
  %624 = %609.6;
  %625 = less(%613, %614) /* ty=Tensor[(4, 9, 8), bool] */;
  %626 = sigmoid(%617) /* ty=Tensor[(6, 144), float64] */;
  %627 = atan(%618) /* ty=Tensor[(6, 144), float64] */;
  (%619, %var_3346, %620, %621, %622, meta[relay.Constant][36] /* ty=Tensor[(144), float32] */, %623, %624, meta[relay.Constant][37] /* ty=Tensor[(10), bool] */, %625, %626, %627)
}

def @func_3157(%var_3068: Tensor[(8, 12, 9), bool]) -> (Tensor[(8, 12, 9), float64], Tensor[(432), int8], Tensor[(432), int8], Tensor[(11, 14), float64], Tensor[(4, 3, 12), bool], Tensor[(8, 12, 9), bool], Tensor[(11, 14), float64], Tensor[(10, 1), bool]) {
  %628 = @func_1818() /* ty=(Tensor[(8, 12, 9), bool], Tensor[(594), uint8], Tensor[(594), bool]) */;
  %629 = %628.0;
  %630 = cast(%var_3068, dtype="float64") /* ty=Tensor[(8, 12, 9), float64] */;
  %631 = shape_of(%629, dtype="int32") /* ty=Tensor[(3), int32] */;
  %632 = cast(%629, dtype="float64") /* ty=Tensor[(8, 12, 9), float64] */;
  %633 = dyn.reshape(%630, %631, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %634 = cast(meta[relay.Constant][38] /* ty=Tensor[(432), int8] */, dtype="int8") /* ty=Tensor[(432), int8] */;
  %635 = reshape(%634, newshape=[432]) /* ty=Tensor[(432), int8] */;
  %636 = @func_1505(%635) /* ty=(Tensor[(11, 14), float64], Tensor[(11, 14), float64], Tensor[(432), int8]) */;
  %637 = cast(meta[relay.Constant][39] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %638 = cast(%629, dtype="bool") /* ty=Tensor[(8, 12, 9), bool] */;
  %639 = reshape(%637, newshape=[4, 3, 12]) /* ty=Tensor[(4, 3, 12), float64] */;
  %640 = reshape(%638, newshape=[8, 12, 9]) /* ty=Tensor[(8, 12, 9), bool] */;
  %641 = @func_2628(%639, %640) /* ty=(Tensor[(4, 3, 12), uint8], Tensor[(4, 3, 12), float64], Tensor[(6, 144), bool], Tensor[(8, 12, 9), bool]) */;
  %642 = %641.0;
  %643 = cast(%642, dtype="float64") /* ty=Tensor[(4, 3, 12), float64] */;
  %644 = sinh(%643) /* ty=Tensor[(4, 3, 12), float64] */;
  %645 = cast(meta[relay.Constant][39] /* ty=Tensor[(144), float64] */, dtype="bool") /* ty=Tensor[(144), bool] */;
  %646 = shape_of(%644, dtype="int32") /* ty=Tensor[(3), int32] */;
  %647 = cast(%644, dtype="bool") /* ty=Tensor[(4, 3, 12), bool] */;
  %648 = dyn.reshape(%645, %646, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %649 = @func_772() /* ty=(Tensor[(8, 12, 9), bool],) */;
  %650 = cast(meta[relay.Constant][40] /* ty=Tensor[(10, 1), bool] */, dtype="bool") /* ty=Tensor[(10, 1), bool] */;
  %651 = cast(%var_3068, dtype="bool") /* ty=Tensor[(8, 12, 9), bool] */;
  %652 = reshape(%650, newshape=[10]) /* ty=Tensor[(10), bool] */;
  %653 = reshape(%651, newshape=[8, 12, 9]) /* ty=Tensor[(8, 12, 9), bool] */;
  %654 = @func_2498(%652, %653) /* ty=(Tensor[(11, 14), float64], Tensor[(98), float32], Tensor[(10), bool], Tensor[(11, 14), float64], Tensor[(8, 12, 9), float32], Tensor[(2, 12, 6), bool], Tensor[(144), float32]) */;
  %655 = mod(%632, %633) /* ty=Tensor[(8, 12, 9), float64] */;
  %656 = %636.2;
  %657 = @func_677() /* ty=Tensor[(11, 14), float64] */;
  %658 = equal(%647, %648) /* ty=Tensor[(4, 3, 12), bool] */;
  %659 = %649.0;
  %660 = %654.3;
  (%655, %656, meta[relay.Constant][38] /* ty=Tensor[(432), int8] */, %657, %658, %659, %660, meta[relay.Constant][40] /* ty=Tensor[(10, 1), bool] */)
}

def @func_838() -> (Tensor[(11, 14), float64], Tensor[(11, 14), float64]) {
  %661 = @func_779() /* ty=(Tensor[(11, 14), float64],) */;
  %662 = @func_677() /* ty=Tensor[(11, 14), float64] */;
  %663 = %661.0;
  (%662, %663)
}

def @func_4129() -> (Tensor[(8, 12, 9), bool], Tensor[(9, 12, 2), bool], Tensor[(216), float64], Tensor[(8, 12, 9), float64]) {
  %664 = @func_772() /* ty=(Tensor[(8, 12, 9), bool],) */;
  %665 = cast(meta[relay.Constant][41] /* ty=Tensor[(216), float64] */, dtype="float64") /* ty=Tensor[(216), float64] */;
  %666 = cast(meta[relay.Constant][41] /* ty=Tensor[(216), float64] */, dtype="float64") /* ty=Tensor[(216), float64] */;
  %667 = reshape(%665, newshape=[9, 12, 2]) /* ty=Tensor[(9, 12, 2), float64] */;
  %668 = reshape(%666, newshape=[9, 12, 2]) /* ty=Tensor[(9, 12, 2), float64] */;
  %669 = @func_344(%667, %668) /* ty=(Tensor[(9, 12, 2), bool],) */;
  %670 = @func_1231() /* ty=(Tensor[(8, 12, 9), float64],) */;
  %671 = %670.0;
  %672 = cast(%671, dtype="float64") /* ty=Tensor[(8, 12, 9), float64] */;
  %673 = %664.0;
  %674 = %669.0;
  %675 = sigmoid(%672) /* ty=Tensor[(8, 12, 9), float64] */;
  (%673, %674, meta[relay.Constant][41] /* ty=Tensor[(216), float64] */, %675)
}

def @func_1588(%var_1582: Tensor[(6, 144), float32]) -> Tensor[(6, 144), int16] {
  %676 = @func_613() /* ty=(Tensor[(11, 14), float64], Tensor[(8, 12, 9), bool], Tensor[(6, 144), float32]) */;
  %677 = %676.2;
  %678 = cast(%var_1582, dtype="int16") /* ty=Tensor[(6, 144), int16] */;
  %679 = shape_of(%677, dtype="int32") /* ty=Tensor[(2), int32] */;
  %680 = cast(%677, dtype="int16") /* ty=Tensor[(6, 144), int16] */;
  %681 = dyn.reshape(%678, %679, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  bitwise_and(%680, %681) /* ty=Tensor[(6, 144), int16] */
}

def @func_2959() -> Tensor[(4, 9, 8), float32] {
  %682 = @func_2850() /* ty=(Tensor[(4, 9, 8), float32],) */;
  %683 = %682.0;
  %684 = cast(meta[relay.Constant][42] /* ty=Tensor[(4, 9, 8), float32] */, dtype="int16") /* ty=Tensor[(4, 9, 8), int16] */;
  %685 = shape_of(%683, dtype="int32") /* ty=Tensor[(3), int32] */;
  %686 = cast(%683, dtype="int16") /* ty=Tensor[(4, 9, 8), int16] */;
  %687 = dyn.reshape(%684, %685, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %688 = maximum(%686, %687) /* ty=Tensor[(4, 9, 8), int16] */;
  %689 = cast(%688, dtype="float32") /* ty=Tensor[(4, 9, 8), float32] */;
  %690 = shape_of(%683, dtype="int32") /* ty=Tensor[(3), int32] */;
  %691 = cast(%683, dtype="float32") /* ty=Tensor[(4, 9, 8), float32] */;
  %692 = dyn.reshape(%689, %690, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%691, %692) /* ty=Tensor[(4, 9, 8), float32] */
}

def @func_226(%var_219: Tensor[(9, 8, 9), float32]) -> (Tensor[(9, 8, 9), float32],) {
  %693 = cast(%var_219, dtype="float32") /* ty=Tensor[(9, 8, 9), float32] */;
  %694 = log10(%693) /* ty=Tensor[(9, 8, 9), float32] */;
  (%694,)
}

def @func_3602() -> (Tensor[(8, 12, 9), bool], Tensor[(8, 12, 9), float32]) {
  %695 = @func_1151() /* ty=(Tensor[(8, 12, 9), bool], Tensor[(11, 14), float64], Tensor[(11, 14), float64], Tensor[(9, 6, 11), float64], Tensor[(594), float64]) */;
  %696 = %695.0;
  %697 = cast(meta[relay.Constant][43] /* ty=Tensor[(8, 12, 9), bool] */, dtype="bool") /* ty=Tensor[(8, 12, 9), bool] */;
  %698 = shape_of(%696, dtype="int32") /* ty=Tensor[(3), int32] */;
  %699 = cast(%696, dtype="bool") /* ty=Tensor[(8, 12, 9), bool] */;
  %700 = dyn.reshape(%697, %698, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %701 = cast(meta[relay.Constant][43] /* ty=Tensor[(8, 12, 9), bool] */, dtype="float32") /* ty=Tensor[(8, 12, 9), float32] */;
  %702 = greater_equal(%699, %700) /* ty=Tensor[(8, 12, 9), bool] */;
  %703 = sin(%701) /* ty=Tensor[(8, 12, 9), float32] */;
  (%702, %703)
}

def @func_3632() -> Tensor[(6, 144), float64] {
  @func_1253() /* ty=Tensor[(6, 144), float64] */
}

def @func_4069(%var_4054: Tensor[(1, 15, 12), float32]) -> (Tensor[(1, 15, 12), float32],) {
  %704 = cast(%var_4054, dtype="float32") /* ty=Tensor[(1, 15, 12), float32] */;
  %705 = asin(%704) /* ty=Tensor[(1, 15, 12), float32] */;
  (%705,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1232() -> (Tensor[(8, 12, 9), float64],) {
  %4 = fn () -> (Tensor[(8, 12, 9), float64],) {
    %0 = @func_613() /* ty=(Tensor[(11, 14), float64], Tensor[(8, 12, 9), bool], Tensor[(6, 144), float32]) */;
    %1 = %0.1;
    %2 = cast(%1, dtype="float64") /* ty=Tensor[(8, 12, 9), float64] */;
    %3 = acosh(%2) /* ty=Tensor[(8, 12, 9), float64] */;
    (%3,)
  };
  %4() /* ty=(Tensor[(8, 12, 9), float64],) */
}

def @func_3835() -> Tensor[(8, 12, 9), float64] {
  %5 = @func_1231() /* ty=(Tensor[(8, 12, 9), float64],) */;
  %5.0
}

def @func_3648() -> (Tensor[(11, 14), float64],) {
  %8 = fn () -> (Tensor[(11, 14), float64],) {
    %6 = @func_934() /* ty=(Tensor[(8, 12, 9), uint32], Tensor[(11, 14), float64], Tensor[(11, 14), float64]) */;
    %7 = %6.2;
    (%7,)
  };
  %8() /* ty=(Tensor[(11, 14), float64],) */
}

def @func_2850() -> (Tensor[(4, 9, 8), float32],) {
  %9 = @func_1356() /* ty=Tensor[(4, 9, 8), float32] */;
  (%9,)
}

def @func_4311(%var_4309: Tensor[(9, 12, 2), bool], %var_4310: Tensor[(9, 12, 2), bool]) -> (Tensor[(9, 12, 2), float32], Tensor[(9, 12, 2), float64], Tensor[(9, 12, 2), bool], Tensor[(9, 12, 2), bool]) {
  @func_4307(%var_4309, %var_4310) /* ty=(Tensor[(9, 12, 2), float32], Tensor[(9, 12, 2), float64], Tensor[(9, 12, 2), bool], Tensor[(9, 12, 2), bool]) */
}

def @func_774() -> (Tensor[(8, 12, 9), bool],) {
  @func_772() /* ty=(Tensor[(8, 12, 9), bool],) */
}

def @func_1460(%var_1445: Tensor[(8, 12, 9), uint32]) -> (Tensor[(8, 12, 9), bool],) {
  %10 = @func_934() /* ty=(Tensor[(8, 12, 9), uint32], Tensor[(11, 14), float64], Tensor[(11, 14), float64]) */;
  %11 = %10.0;
  %12 = cast(%var_1445, dtype="bool") /* ty=Tensor[(8, 12, 9), bool] */;
  %13 = shape_of(%11, dtype="int32") /* ty=Tensor[(3), int32] */;
  %14 = cast(%11, dtype="bool") /* ty=Tensor[(8, 12, 9), bool] */;
  %15 = dyn.reshape(%12, %13, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %16 = logical_and(%14, %15) /* ty=Tensor[(8, 12, 9), bool] */;
  (%16,)
}

def @func_2959() -> Tensor[(4, 9, 8), float32] {
  %17 = @func_2850() /* ty=(Tensor[(4, 9, 8), float32],) */;
  %18 = %17.0;
  %19 = cast(meta[relay.Constant][0] /* ty=Tensor[(4, 9, 8), float32] */, dtype="int16") /* ty=Tensor[(4, 9, 8), int16] */;
  %20 = shape_of(%18, dtype="int32") /* ty=Tensor[(3), int32] */;
  %21 = cast(%18, dtype="int16") /* ty=Tensor[(4, 9, 8), int16] */;
  %22 = dyn.reshape(%19, %20, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %23 = maximum(%21, %22) /* ty=Tensor[(4, 9, 8), int16] */;
  %24 = cast(%23, dtype="float32") /* ty=Tensor[(4, 9, 8), float32] */;
  %25 = shape_of(%18, dtype="int32") /* ty=Tensor[(3), int32] */;
  %26 = cast(%18, dtype="float32") /* ty=Tensor[(4, 9, 8), float32] */;
  %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%26, %27) /* ty=Tensor[(4, 9, 8), float32] */
}

def @func_4426() -> (Tensor[(4, 9, 8), float64], Tensor[(11, 14), float64]) {
  %28 = @func_3271() /* ty=Tensor[(4, 9, 8), float32] */;
  %29 = cast(%28, dtype="float64") /* ty=Tensor[(4, 9, 8), float64] */;
  %30 = sigmoid(%29) /* ty=Tensor[(4, 9, 8), float64] */;
  %31 = cast(%30, dtype="float64") /* ty=Tensor[(4, 9, 8), float64] */;
  %32 = @func_1291() /* ty=(Tensor[(11, 14), float64],) */;
  %33 = cos(%31) /* ty=Tensor[(4, 9, 8), float64] */;
  %34 = %32.0;
  (%33, %34)
}

def @func_5027() -> Tensor[(8, 12, 9), float64] {
  %35 = @func_1231() /* ty=(Tensor[(8, 12, 9), float64],) */;
  %35.0
}

def @func_4919() -> (Tensor[(12, 9, 4), float64], Tensor[(432), int8], Tensor[(8, 12, 9), bool], Tensor[(10), bool], Tensor[(1728), uint16], Tensor[(1, 288), float32], Tensor[(4, 9, 8), float32], Tensor[(98), float32], Tensor[(72, 2), float32]) {
  %36 = cast(meta[relay.Constant][1] /* ty=Tensor[(432), int8] */, dtype="int8") /* ty=Tensor[(432), int8] */;
  %37 = reshape(%36, newshape=[12, 9, 4]) /* ty=Tensor[(12, 9, 4), int8] */;
  %38 = @func_1342(%37) /* ty=(Tensor[(11, 14), float64], Tensor[(12, 9, 4), float64], Tensor[(12, 9, 4), float32], Tensor[(12, 9, 4), float64]) */;
  %39 = @func_772() /* ty=(Tensor[(8, 12, 9), bool],) */;
  %40 = cast(meta[relay.Constant][2] /* ty=Tensor[(1728), uint16] */, dtype="uint16") /* ty=Tensor[(1728), uint16] */;
  %41 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 288), float32] */, dtype="float32") /* ty=Tensor[(1, 288), float32] */;
  %42 = reshape(%40, newshape=[1728]) /* ty=Tensor[(1728), uint16] */;
  %43 = reshape(%41, newshape=[4, 9, 8]) /* ty=Tensor[(4, 9, 8), float32] */;
  %44 = @func_3448(%42, %43) /* ty=(Tensor[(11, 14), float64], Tensor[(1728), uint16], Tensor[(6, 144), bool], Tensor[(8, 12, 9), uint32], Tensor[(2, 12, 6), bool], Tensor[(144), float32], Tensor[(6, 144), uint8], Tensor[(6, 144), float32], Tensor[(10), bool], Tensor[(4, 9, 8), bool], Tensor[(6, 144), float64], Tensor[(6, 144), float64]) */;
  %45 = %44.8;
  %46 = cast(%45, dtype="bool") /* ty=Tensor[(10), bool] */;
  %47 = %39.0;
  %48 = cast(%47, dtype="bool") /* ty=Tensor[(8, 12, 9), bool] */;
  %49 = reshape(%46, newshape=[10]) /* ty=Tensor[(10), bool] */;
  %50 = reshape(%48, newshape=[8, 12, 9]) /* ty=Tensor[(8, 12, 9), bool] */;
  %51 = @func_2498(%49, %50) /* ty=(Tensor[(11, 14), float64], Tensor[(98), float32], Tensor[(10), bool], Tensor[(11, 14), float64], Tensor[(8, 12, 9), float32], Tensor[(2, 12, 6), bool], Tensor[(144), float32]) */;
  %52 = @func_4775() /* ty=(Tensor[(6, 144), float64], Tensor[(11, 14), float64], Tensor[(432), int8], Tensor[(2, 12, 6), bool], Tensor[(72, 2), float32], Tensor[(8, 12, 9), bool], Tensor[(11, 14), float64]) */;
  %53 = %52.4;
  %54 = cast(%53, dtype="float64") /* ty=Tensor[(72, 2), float64] */;
  %55 = exp(%54) /* ty=Tensor[(72, 2), float64] */;
  %56 = cast(%55, dtype="float32") /* ty=Tensor[(72, 2), float32] */;
  %57 = %38.3;
  %58 = @func_3271() /* ty=Tensor[(4, 9, 8), float32] */;
  %59 = %51.1;
  %60 = erf(%56) /* ty=Tensor[(72, 2), float32] */;
  (%57, meta[relay.Constant][1] /* ty=Tensor[(432), int8] */, %47, %45, meta[relay.Constant][2] /* ty=Tensor[(1728), uint16] */, meta[relay.Constant][3] /* ty=Tensor[(1, 288), float32] */, %58, %59, %60)
}

def @func_3448(%var_3346: Tensor[(1728), uint16], %var_3428: Tensor[(4, 9, 8), float32]) -> (Tensor[(11, 14), float64], Tensor[(1728), uint16], Tensor[(6, 144), bool], Tensor[(8, 12, 9), uint32], Tensor[(2, 12, 6), bool], Tensor[(144), float32], Tensor[(6, 144), uint8], Tensor[(6, 144), float32], Tensor[(10), bool], Tensor[(4, 9, 8), bool], Tensor[(6, 144), float64], Tensor[(6, 144), float64]) {
  %61 = cast(%var_3346, dtype="uint16") /* ty=Tensor[(1728), uint16] */;
  %62 = reshape(%61, newshape=[864, 2]) /* ty=Tensor[(864, 2), uint16] */;
  %63 = @func_2810(%62) /* ty=(Tensor[(11, 14), float64], Tensor[(864, 2), float32]) */;
  %64 = @func_2017() /* ty=Tensor[(6, 144), float32] */;
  %65 = cast(meta[relay.Constant][4] /* ty=Tensor[(6, 144), float32] */, dtype="bool") /* ty=Tensor[(6, 144), bool] */;
  %66 = shape_of(%64, dtype="int32") /* ty=Tensor[(2), int32] */;
  %67 = cast(%64, dtype="bool") /* ty=Tensor[(6, 144), bool] */;
  %68 = dyn.reshape(%65, %66, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %69 = @func_934() /* ty=(Tensor[(8, 12, 9), uint32], Tensor[(11, 14), float64], Tensor[(11, 14), float64]) */;
  %70 = cast(meta[relay.Constant][5] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %71 = cast(meta[relay.Constant][5] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %72 = reshape(%70, newshape=[2, 12, 6]) /* ty=Tensor[(2, 12, 6), float32] */;
  %73 = reshape(%71, newshape=[2, 12, 6]) /* ty=Tensor[(2, 12, 6), float32] */;
  %74 = cast(meta[relay.Constant][4] /* ty=Tensor[(6, 144), float32] */, dtype="uint8") /* ty=Tensor[(6, 144), uint8] */;
  %75 = shape_of(%64, dtype="int32") /* ty=Tensor[(2), int32] */;
  %76 = cast(%64, dtype="uint8") /* ty=Tensor[(6, 144), uint8] */;
  %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %78 = cast(meta[relay.Constant][6] /* ty=Tensor[(10), bool] */, dtype="bool") /* ty=Tensor[(10), bool] */;
  %79 = reshape(%78, newshape=[10]) /* ty=Tensor[(10), bool] */;
  %80 = @func_904(%79) /* ty=(Tensor[(8, 12, 9), bool], Tensor[(7, 5, 2), float64], Tensor[(10), bool], Tensor[(70), bool], Tensor[(7, 5, 2), float64], Tensor[(594), bool], Tensor[(6, 144), float32], Tensor[(11, 14), float64]) */;
  %81 = @func_1356() /* ty=Tensor[(4, 9, 8), float32] */;
  %82 = cast(%var_3428, dtype="bool") /* ty=Tensor[(4, 9, 8), bool] */;
  %83 = shape_of(%81, dtype="int32") /* ty=Tensor[(3), int32] */;
  %84 = cast(%81, dtype="bool") /* ty=Tensor[(4, 9, 8), bool] */;
  %85 = dyn.reshape(%82, %83, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %86 = cast(meta[relay.Constant][4] /* ty=Tensor[(6, 144), float32] */, dtype="float64") /* ty=Tensor[(6, 144), float64] */;
  %87 = sinh(%86) /* ty=Tensor[(6, 144), float64] */;
  %88 = cast(%87, dtype="float64") /* ty=Tensor[(6, 144), float64] */;
  %89 = cast(%87, dtype="float64") /* ty=Tensor[(6, 144), float64] */;
  %90 = %63.0;
  %91 = equal(%67, %68) /* ty=Tensor[(6, 144), bool] */;
  %92 = %69.0;
  %93 = @func_82(%72, %73) /* ty=Tensor[(2, 12, 6), bool] */;
  %94 = bitwise_xor(%76, %77) /* ty=Tensor[(6, 144), uint8] */;
  %95 = %80.6;
  %96 = less(%84, %85) /* ty=Tensor[(4, 9, 8), bool] */;
  %97 = sigmoid(%88) /* ty=Tensor[(6, 144), float64] */;
  %98 = atan(%89) /* ty=Tensor[(6, 144), float64] */;
  (%90, %var_3346, %91, %92, %93, meta[relay.Constant][5] /* ty=Tensor[(144), float32] */, %94, %95, meta[relay.Constant][6] /* ty=Tensor[(10), bool] */, %96, %97, %98)
}

def @func_2205(%var_2203: Tensor[(98), float32], %var_2204: Tensor[(10), bool]) -> (Tensor[(11, 14), float64], Tensor[(10), bool], Tensor[(98), float32], Tensor[(10), bool], Tensor[(11, 14), float64], Tensor[(11, 14), float64]) {
  %110 = fn (%var_2149: Tensor[(98), float32], %var_2150: Tensor[(10), bool]) -> (Tensor[(11, 14), float64], Tensor[(10), bool], Tensor[(98), float32], Tensor[(10), bool], Tensor[(11, 14), float64], Tensor[(11, 14), float64]) {
    %99 = @func_934() /* ty=(Tensor[(8, 12, 9), uint32], Tensor[(11, 14), float64], Tensor[(11, 14), float64]) */;
    %100 = cast(%var_2149, dtype="float32") /* ty=Tensor[(98), float32] */;
    %101 = cast(%var_2150, dtype="bool") /* ty=Tensor[(10), bool] */;
    %102 = reshape(%100, newshape=[98]) /* ty=Tensor[(98), float32] */;
    %103 = reshape(%101, newshape=[10]) /* ty=Tensor[(10), bool] */;
    %104 = @func_1749(%102, %103) /* ty=(Tensor[(11, 14), float64], Tensor[(7, ?, 14), uint32], Tensor[(98), float32], Tensor[(10), bool]) */;
    %105 = @func_1029() /* ty=(Tensor[(11, 14), float64], Tensor[(11, 14), float64]) */;
    %106 = %99.1;
    %107 = %104.3;
    %108 = %105.1;
    %109 = @func_677() /* ty=Tensor[(11, 14), float64] */;
    (%106, %107, %var_2149, %var_2150, %108, %109)
  };
  %110(%var_2203, %var_2204) /* ty=(Tensor[(11, 14), float64], Tensor[(10), bool], Tensor[(98), float32], Tensor[(10), bool], Tensor[(11, 14), float64], Tensor[(11, 14), float64]) */
}

def @func_186(%var_105: Tensor[(9, 16, 12), uint16], %var_106: Tensor[(9, 16, 12), uint16]) -> (Tensor[(9, 16, 12), bool], Tensor[(9, 16, 12), float64], Tensor[(9, 16, 12), int16]) {
  %111 = cast(%var_106, dtype="bool") /* ty=Tensor[(9, 16, 12), bool] */;
  %112 = shape_of(%var_105, dtype="int32") /* ty=Tensor[(3), int32] */;
  %113 = cast(%var_105, dtype="bool") /* ty=Tensor[(9, 16, 12), bool] */;
  %114 = dyn.reshape(%111, %112, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %115 = less(%113, %114) /* ty=Tensor[(9, 16, 12), bool] */;
  %116 = cast(%115, dtype="bool") /* ty=Tensor[(9, 16, 12), bool] */;
  %117 = shape_of(%var_105, dtype="int32") /* ty=Tensor[(3), int32] */;
  %118 = cast(%var_105, dtype="bool") /* ty=Tensor[(9, 16, 12), bool] */;
  %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %120 = cast(%var_105, dtype="float64") /* ty=Tensor[(9, 16, 12), float64] */;
  %121 = log(%120) /* ty=Tensor[(9, 16, 12), float64] */;
  %122 = cast(meta[relay.Constant][7] /* ty=Tensor[(9, 16, 12), float64] */, dtype="float64") /* ty=Tensor[(9, 16, 12), float64] */;
  %123 = shape_of(%121, dtype="int32") /* ty=Tensor[(3), int32] */;
  %124 = cast(%121, dtype="float64") /* ty=Tensor[(9, 16, 12), float64] */;
  %125 = dyn.reshape(%122, %123, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %126 = cast(%121, dtype="float32") /* ty=Tensor[(9, 16, 12), float32] */;
  %127 = asin(%126) /* ty=Tensor[(9, 16, 12), float32] */;
  %128 = cast(%127, dtype="bool") /* ty=Tensor[(9, 16, 12), bool] */;
  %129 = shape_of(%121, dtype="int32") /* ty=Tensor[(3), int32] */;
  %130 = cast(%121, dtype="bool") /* ty=Tensor[(9, 16, 12), bool] */;
  %131 = dyn.reshape(%128, %129, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %132 = less_equal(%130, %131) /* ty=Tensor[(9, 16, 12), bool] */;
  %133 = cast(%127, dtype="float32") /* ty=Tensor[(9, 16, 12), float32] */;
  %134 = acos(%133) /* ty=Tensor[(9, 16, 12), float32] */;
  %135 = cast(%134, dtype="int16") /* ty=Tensor[(9, 16, 12), int16] */;
  %136 = shape_of(%132, dtype="int32") /* ty=Tensor[(3), int32] */;
  %137 = cast(%132, dtype="int16") /* ty=Tensor[(9, 16, 12), int16] */;
  %138 = dyn.reshape(%135, %136, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %139 = logical_or(%118, %119) /* ty=Tensor[(9, 16, 12), bool] */;
  %140 = divide(%124, %125) /* ty=Tensor[(9, 16, 12), float64] */;
  %141 = bitwise_and(%137, %138) /* ty=Tensor[(9, 16, 12), int16] */;
  (%139, %140, %141)
}

def @func_229(%var_227: Tensor[(9, 8, 9), float32]) -> (Tensor[(9, 8, 9), float32],) {
  @func_226(%var_227) /* ty=(Tensor[(9, 8, 9), float32],) */
}

def @func_3203() -> (Tensor[(7, 5, 2), float64], Tensor[(70), bool], Tensor[(4, 9, 8), float32], Tensor[(10, 594), bool]) {
  %154 = fn () -> (Tensor[(7, 5, 2), float64], Tensor[(70), bool], Tensor[(4, 9, 8), float32], Tensor[(10, 594), bool]) {
    %142 = cast(meta[relay.Constant][8] /* ty=Tensor[(10, 1), bool] */, dtype="bool") /* ty=Tensor[(10, 1), bool] */;
    %143 = cast(meta[relay.Constant][9] /* ty=Tensor[(70), bool] */, dtype="bool") /* ty=Tensor[(70), bool] */;
    %144 = reshape(%142, newshape=[1, 5, 2]) /* ty=Tensor[(1, 5, 2), bool] */;
    %145 = reshape(%143, newshape=[7, 5, 2]) /* ty=Tensor[(7, 5, 2), bool] */;
    %146 = @func_2850() /* ty=(Tensor[(4, 9, 8), float32],) */;
    %147 = @func_1818() /* ty=(Tensor[(8, 12, 9), bool], Tensor[(594), uint8], Tensor[(594), bool]) */;
    %148 = %147.2;
    %149 = cast(meta[relay.Constant][8] /* ty=Tensor[(10, 1), bool] */, dtype="bool") /* ty=Tensor[(10, 1), bool] */;
    %150 = cast(%148, dtype="bool") /* ty=Tensor[(594), bool] */;
    %151 = @func_750(%144, %145) /* ty=Tensor[(7, 5, 2), float64] */;
    %152 = %146.0;
    %153 = less(%149, %150) /* ty=Tensor[(10, 594), bool] */;
    (%151, meta[relay.Constant][9] /* ty=Tensor[(70), bool] */, %152, %153)
  };
  %154() /* ty=(Tensor[(7, 5, 2), float64], Tensor[(70), bool], Tensor[(4, 9, 8), float32], Tensor[(10, 594), bool]) */
}

def @func_3970() -> (Tensor[(8, 12, 9), float64], Tensor[(9, 12, 2), bool], Tensor[(216), float64]) {
  %163 = fn () -> (Tensor[(8, 12, 9), float64], Tensor[(9, 12, 2), bool], Tensor[(216), float64]) {
    %155 = @func_1231() /* ty=(Tensor[(8, 12, 9), float64],) */;
    %156 = cast(meta[relay.Constant][10] /* ty=Tensor[(216), float64] */, dtype="float64") /* ty=Tensor[(216), float64] */;
    %157 = cast(meta[relay.Constant][10] /* ty=Tensor[(216), float64] */, dtype="float64") /* ty=Tensor[(216), float64] */;
    %158 = reshape(%156, newshape=[9, 12, 2]) /* ty=Tensor[(9, 12, 2), float64] */;
    %159 = reshape(%157, newshape=[9, 12, 2]) /* ty=Tensor[(9, 12, 2), float64] */;
    %160 = @func_344(%158, %159) /* ty=(Tensor[(9, 12, 2), bool],) */;
    %161 = %155.0;
    %162 = %160.0;
    (%161, %162, meta[relay.Constant][10] /* ty=Tensor[(216), float64] */)
  };
  %163() /* ty=(Tensor[(8, 12, 9), float64], Tensor[(9, 12, 2), bool], Tensor[(216), float64]) */
}

def @func_2628(%var_2591: Tensor[(4, 3, 12), float64], %var_2623: Tensor[(8, 12, 9), bool]) -> (Tensor[(4, 3, 12), uint8], Tensor[(4, 3, 12), float64], Tensor[(6, 144), bool], Tensor[(8, 12, 9), bool]) {
  %164 = cast(%var_2591, dtype="float64") /* ty=Tensor[(4, 3, 12), float64] */;
  %165 = cos(%164) /* ty=Tensor[(4, 3, 12), float64] */;
  %166 = cast(%var_2591, dtype="float32") /* ty=Tensor[(4, 3, 12), float32] */;
  %167 = shape_of(%165, dtype="int32") /* ty=Tensor[(3), int32] */;
  %168 = cast(%165, dtype="float32") /* ty=Tensor[(4, 3, 12), float32] */;
  %169 = dyn.reshape(%166, %167, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %170 = divide(%168, %169) /* ty=Tensor[(4, 3, 12), float32] */;
  %171 = cast(%165, dtype="uint8") /* ty=Tensor[(4, 3, 12), uint8] */;
  %172 = shape_of(%170, dtype="int32") /* ty=Tensor[(3), int32] */;
  %173 = cast(%170, dtype="uint8") /* ty=Tensor[(4, 3, 12), uint8] */;
  %174 = dyn.reshape(%171, %172, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %175 = cast(%170, dtype="float64") /* ty=Tensor[(4, 3, 12), float64] */;
  %176 = @func_1818() /* ty=(Tensor[(8, 12, 9), bool], Tensor[(594), uint8], Tensor[(594), bool]) */;
  %177 = %176.0;
  %178 = cast(%177, dtype="float64") /* ty=Tensor[(8, 12, 9), float64] */;
  %179 = reshape(%178, newshape=[6, 144]) /* ty=Tensor[(6, 144), float64] */;
  %180 = @func_1413(%179) /* ty=(Tensor[(6, 144), bool], Tensor[(4, 9, 8), float32]) */;
  %181 = cast(%var_2623, dtype="bool") /* ty=Tensor[(8, 12, 9), bool] */;
  %182 = shape_of(%177, dtype="int32") /* ty=Tensor[(3), int32] */;
  %183 = cast(%177, dtype="bool") /* ty=Tensor[(8, 12, 9), bool] */;
  %184 = dyn.reshape(%181, %182, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %185 = multiply(%173, %174) /* ty=Tensor[(4, 3, 12), uint8] */;
  %186 = acos(%175) /* ty=Tensor[(4, 3, 12), float64] */;
  %187 = %180.0;
  %188 = greater(%183, %184) /* ty=Tensor[(8, 12, 9), bool] */;
  (%185, %186, %187, %188)
}

def @func_1030() -> (Tensor[(11, 14), float64], Tensor[(11, 14), float64]) {
  %192 = fn () -> (Tensor[(11, 14), float64], Tensor[(11, 14), float64]) {
    %189 = @func_838() /* ty=(Tensor[(11, 14), float64], Tensor[(11, 14), float64]) */;
    %190 = %189.0;
    %191 = @func_677() /* ty=Tensor[(11, 14), float64] */;
    (%190, %191)
  };
  %192() /* ty=(Tensor[(11, 14), float64], Tensor[(11, 14), float64]) */
}

def @func_2632(%var_2630: Tensor[(4, 3, 12), float64], %var_2631: Tensor[(8, 12, 9), bool]) -> (Tensor[(4, 3, 12), uint8], Tensor[(4, 3, 12), float64], Tensor[(6, 144), bool], Tensor[(8, 12, 9), bool]) {
  @func_2628(%var_2630, %var_2631) /* ty=(Tensor[(4, 3, 12), uint8], Tensor[(4, 3, 12), float64], Tensor[(6, 144), bool], Tensor[(8, 12, 9), bool]) */
}

def @func_4131() -> (Tensor[(8, 12, 9), bool], Tensor[(9, 12, 2), bool], Tensor[(216), float64], Tensor[(8, 12, 9), float64]) {
  @func_4129() /* ty=(Tensor[(8, 12, 9), bool], Tensor[(9, 12, 2), bool], Tensor[(216), float64], Tensor[(8, 12, 9), float64]) */
}

def @func_3340() -> Tensor[(4, 9, 8), float32] {
  @func_3338() /* ty=Tensor[(4, 9, 8), float32] */
}

def @func_1344(%var_1343: Tensor[(12, 9, 4), int8]) -> (Tensor[(11, 14), float64], Tensor[(12, 9, 4), float64], Tensor[(12, 9, 4), float32], Tensor[(12, 9, 4), float64]) {
  %209 = fn (%var_1298: Tensor[(12, 9, 4), int8]) -> (Tensor[(11, 14), float64], Tensor[(12, 9, 4), float64], Tensor[(12, 9, 4), float32], Tensor[(12, 9, 4), float64]) {
    %193 = @func_1029() /* ty=(Tensor[(11, 14), float64], Tensor[(11, 14), float64]) */;
    %194 = cast(%var_1298, dtype="bool") /* ty=Tensor[(12, 9, 4), bool] */;
    %195 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(12, 9, 4), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %196 = cast(meta[relay.Constant][11] /* ty=Tensor[(12, 9, 4), int8] */, dtype="bool") /* ty=Tensor[(12, 9, 4), bool] */;
    %197 = dyn.reshape(%194, %195, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %198 = less_equal(%196, %197) /* ty=Tensor[(12, 9, 4), bool] */;
    %199 = cast(meta[relay.Constant][11] /* ty=Tensor[(12, 9, 4), int8] */, dtype="float64") /* ty=Tensor[(12, 9, 4), float64] */;
    %200 = shape_of(%198, dtype="int32") /* ty=Tensor[(3), int32] */;
    %201 = cast(%198, dtype="float64") /* ty=Tensor[(12, 9, 4), float64] */;
    %202 = dyn.reshape(%199, %200, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %203 = cast(meta[relay.Constant][11] /* ty=Tensor[(12, 9, 4), int8] */, dtype="float32") /* ty=Tensor[(12, 9, 4), float32] */;
    %204 = cast(meta[relay.Constant][11] /* ty=Tensor[(12, 9, 4), int8] */, dtype="float64") /* ty=Tensor[(12, 9, 4), float64] */;
    %205 = %193.0;
    %206 = multiply(%201, %202) /* ty=Tensor[(12, 9, 4), float64] */;
    %207 = sin(%203) /* ty=Tensor[(12, 9, 4), float32] */;
    %208 = acosh(%204) /* ty=Tensor[(12, 9, 4), float64] */;
    (%205, %206, %207, %208)
  };
  %209(%var_1343) /* ty=(Tensor[(11, 14), float64], Tensor[(12, 9, 4), float64], Tensor[(12, 9, 4), float32], Tensor[(12, 9, 4), float64]) */
}

def @func_4192() -> Tensor[(594), uint8] {
  %210 = @func_1818() /* ty=(Tensor[(8, 12, 9), bool], Tensor[(594), uint8], Tensor[(594), bool]) */;
  %210.1
}

def @func_2989(%var_2978: Tensor[(11, 15, 16), float32]) -> (Tensor[(11, 15, 16), float32], Tensor[(2, 5, 5), int64], Tensor[(5, 10), int64]) {
  %211 = cast(%var_2978, dtype="float32") /* ty=Tensor[(11, 15, 16), float32] */;
  %212 = cast(meta[relay.Constant][12] /* ty=Tensor[(5, 10), int64] */, dtype="int64") /* ty=Tensor[(5, 10), int64] */;
  %213 = reshape(%212, newshape=[2, 5, 5]) /* ty=Tensor[(2, 5, 5), int64] */;
  %214 = @func_2313(%213) /* ty=(Tensor[(2, 5, 5), int64],) */;
  %215 = sinh(%211) /* ty=Tensor[(11, 15, 16), float32] */;
  %216 = %214.0;
  (%215, %216, meta[relay.Constant][12] /* ty=Tensor[(5, 10), int64] */)
}

def @func_1749(%var_1740: Tensor[(98), float32], %var_1741: Tensor[(10), bool]) -> (Tensor[(11, 14), float64], Tensor[(7, ?, 14), uint32], Tensor[(98), float32], Tensor[(10), bool]) {
  %217 = @func_838() /* ty=(Tensor[(11, 14), float64], Tensor[(11, 14), float64]) */;
  %218 = cast(%var_1740, dtype="float32") /* ty=Tensor[(98), float32] */;
  %219 = cast(%var_1741, dtype="bool") /* ty=Tensor[(10), bool] */;
  %220 = reshape(%218, newshape=[7, 1, 14]) /* ty=Tensor[(7, 1, 14), float32] */;
  %221 = reshape(%219, newshape=[10]) /* ty=Tensor[(10), bool] */;
  %222 = @func_1081(%220, %221) /* ty=(Tensor[(7, ?, 14), uint32], Tensor[(11, 14), float64], Tensor[(10), bool], Tensor[(10), bool], Tensor[(7, 1, 14), float64], Tensor[(11, 14), float64], Tensor[(9, 16, 12), float64], Tensor[(1728), uint16]) */;
  %223 = %217.1;
  %224 = %222.0;
  (%223, %224, %var_1740, %var_1741)
}

def @func_4371(%var_4370: Tensor[(180), float32]) -> (Tensor[(1, 15, 12), float32], Tensor[(180), float32], Tensor[(4, 9, 8), float32]) {
  %237 = fn (%var_4361: Tensor[(180), float32]) -> (Tensor[(1, 15, 12), float32], Tensor[(180), float32], Tensor[(4, 9, 8), float32]) {
    %225 = cast(%var_4361, dtype="float32") /* ty=Tensor[(180), float32] */;
    %226 = reshape(%225, newshape=[1, 15, 12]) /* ty=Tensor[(1, 15, 12), float32] */;
    %227 = @func_4069(%226) /* ty=(Tensor[(1, 15, 12), float32],) */;
    %228 = @func_1356() /* ty=Tensor[(4, 9, 8), float32] */;
    %229 = cast(%228, dtype="float64") /* ty=Tensor[(4, 9, 8), float64] */;
    %230 = acosh(%229) /* ty=Tensor[(4, 9, 8), float64] */;
    %231 = cast(%228, dtype="float32") /* ty=Tensor[(4, 9, 8), float32] */;
    %232 = shape_of(%230, dtype="int32") /* ty=Tensor[(3), int32] */;
    %233 = cast(%230, dtype="float32") /* ty=Tensor[(4, 9, 8), float32] */;
    %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %235 = %227.0;
    %236 = floor_divide(%233, %234) /* ty=Tensor[(4, 9, 8), float32] */;
    (%235, %var_4361, %236)
  };
  %237(%var_4370) /* ty=(Tensor[(1, 15, 12), float32], Tensor[(180), float32], Tensor[(4, 9, 8), float32]) */
}

def @func_2019() -> Tensor[(6, 144), float32] {
  @func_2017() /* ty=Tensor[(6, 144), float32] */
}

def @func_3516() -> (Tensor[(11, 14), float64], Tensor[(11, 14), float64], Tensor[(432), int8], Tensor[(6, 144), float64]) {
  %238 = cast(meta[relay.Constant][13] /* ty=Tensor[(432), int8] */, dtype="int8") /* ty=Tensor[(432), int8] */;
  %239 = reshape(%238, newshape=[432]) /* ty=Tensor[(432), int8] */;
  %240 = @func_1505(%239) /* ty=(Tensor[(11, 14), float64], Tensor[(11, 14), float64], Tensor[(432), int8]) */;
  %241 = @func_677() /* ty=Tensor[(11, 14), float64] */;
  %242 = %240.1;
  %243 = @func_1253() /* ty=Tensor[(6, 144), float64] */;
  (%241, %242, meta[relay.Constant][13] /* ty=Tensor[(432), int8] */, %243)
}

def @func_4071(%var_4070: Tensor[(1, 15, 12), float32]) -> (Tensor[(1, 15, 12), float32],) {
  %246 = fn (%var_4054: Tensor[(1, 15, 12), float32]) -> (Tensor[(1, 15, 12), float32],) {
    %244 = cast(%var_4054, dtype="float32") /* ty=Tensor[(1, 15, 12), float32] */;
    %245 = asin(%244) /* ty=Tensor[(1, 15, 12), float32] */;
    (%245,)
  };
  %246(%var_4070) /* ty=(Tensor[(1, 15, 12), float32],) */
}

def @func_4428() -> (Tensor[(4, 9, 8), float64], Tensor[(11, 14), float64]) {
  @func_4426() /* ty=(Tensor[(4, 9, 8), float64], Tensor[(11, 14), float64]) */
}

def @func_1253() -> Tensor[(6, 144), float64] {
  %247 = @func_613() /* ty=(Tensor[(11, 14), float64], Tensor[(8, 12, 9), bool], Tensor[(6, 144), float32]) */;
  %248 = %247.2;
  %249 = cast(meta[relay.Constant][14] /* ty=Tensor[(6, 144), float32] */, dtype="float64") /* ty=Tensor[(6, 144), float64] */;
  %250 = shape_of(%248, dtype="int32") /* ty=Tensor[(2), int32] */;
  %251 = cast(%248, dtype="float64") /* ty=Tensor[(6, 144), float64] */;
  %252 = dyn.reshape(%249, %250, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  divide(%251, %252) /* ty=Tensor[(6, 144), float64] */
}

def @func_348(%var_346: Tensor[(9, 12, 2), float64], %var_347: Tensor[(9, 12, 2), float64]) -> (Tensor[(9, 12, 2), bool],) {
  @func_344(%var_346, %var_347) /* ty=(Tensor[(9, 12, 2), bool],) */
}

def @func_2056() -> Tensor[(8, 12, 9), float32] {
  %253 = @func_1231() /* ty=(Tensor[(8, 12, 9), float64],) */;
  %254 = %253.0;
  %255 = cast(%254, dtype="float32") /* ty=Tensor[(8, 12, 9), float32] */;
  erf(%255) /* ty=Tensor[(8, 12, 9), float32] */
}

def @func_3452(%var_3450: Tensor[(1728), uint16], %var_3451: Tensor[(4, 9, 8), float32]) -> (Tensor[(11, 14), float64], Tensor[(1728), uint16], Tensor[(6, 144), bool], Tensor[(8, 12, 9), uint32], Tensor[(2, 12, 6), bool], Tensor[(144), float32], Tensor[(6, 144), uint8], Tensor[(6, 144), float32], Tensor[(10), bool], Tensor[(4, 9, 8), bool], Tensor[(6, 144), float64], Tensor[(6, 144), float64]) {
  @func_3448(%var_3450, %var_3451) /* ty=(Tensor[(11, 14), float64], Tensor[(1728), uint16], Tensor[(6, 144), bool], Tensor[(8, 12, 9), uint32], Tensor[(2, 12, 6), bool], Tensor[(144), float32], Tensor[(6, 144), uint8], Tensor[(6, 144), float32], Tensor[(10), bool], Tensor[(4, 9, 8), bool], Tensor[(6, 144), float64], Tensor[(6, 144), float64]) */
}

def @func_772() -> (Tensor[(8, 12, 9), bool],) {
  %256 = @func_613() /* ty=(Tensor[(11, 14), float64], Tensor[(8, 12, 9), bool], Tensor[(6, 144), float32]) */;
  %257 = %256.1;
  (%257,)
}

def @func_4799() -> Tensor[(11, 14), float64] {
  %258 = fn () -> Tensor[(11, 14), float64] {
    @func_677() /* ty=Tensor[(11, 14), float64] */
  };
  %258() /* ty=Tensor[(11, 14), float64] */
}

def @func_4921() -> (Tensor[(12, 9, 4), float64], Tensor[(432), int8], Tensor[(8, 12, 9), bool], Tensor[(10), bool], Tensor[(1728), uint16], Tensor[(1, 288), float32], Tensor[(4, 9, 8), float32], Tensor[(98), float32], Tensor[(72, 2), float32]) {
  @func_4919() /* ty=(Tensor[(12, 9, 4), float64], Tensor[(432), int8], Tensor[(8, 12, 9), bool], Tensor[(10), bool], Tensor[(1728), uint16], Tensor[(1, 288), float32], Tensor[(4, 9, 8), float32], Tensor[(98), float32], Tensor[(72, 2), float32]) */
}

def @func_838() -> (Tensor[(11, 14), float64], Tensor[(11, 14), float64]) {
  %259 = @func_779() /* ty=(Tensor[(11, 14), float64],) */;
  %260 = @func_677() /* ty=Tensor[(11, 14), float64] */;
  %261 = %259.0;
  (%260, %261)
}

def @func_1463(%var_1461: Tensor[(8, 12, 9), uint32]) -> (Tensor[(8, 12, 9), bool],) {
  @func_1460(%var_1461) /* ty=(Tensor[(8, 12, 9), bool],) */
}

def @func_4307(%var_4287: Tensor[(9, 12, 2), bool], %var_4292: Tensor[(9, 12, 2), bool]) -> (Tensor[(9, 12, 2), float32], Tensor[(9, 12, 2), float64], Tensor[(9, 12, 2), bool], Tensor[(9, 12, 2), bool]) {
  %262 = @func_3969() /* ty=(Tensor[(8, 12, 9), float64], Tensor[(9, 12, 2), bool], Tensor[(216), float64]) */;
  %263 = %262.1;
  %264 = cast(%263, dtype="float64") /* ty=Tensor[(9, 12, 2), float64] */;
  %265 = erf(%264) /* ty=Tensor[(9, 12, 2), float64] */;
  %266 = cast(%263, dtype="float32") /* ty=Tensor[(9, 12, 2), float32] */;
  %267 = shape_of(%265, dtype="int32") /* ty=Tensor[(3), int32] */;
  %268 = cast(%265, dtype="float32") /* ty=Tensor[(9, 12, 2), float32] */;
  %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %270 = cast(%var_4287, dtype="float64") /* ty=Tensor[(9, 12, 2), float64] */;
  %271 = shape_of(%263, dtype="int32") /* ty=Tensor[(3), int32] */;
  %272 = cast(%263, dtype="float64") /* ty=Tensor[(9, 12, 2), float64] */;
  %273 = dyn.reshape(%270, %271, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %274 = cast(%var_4292, dtype="bool") /* ty=Tensor[(9, 12, 2), bool] */;
  %275 = shape_of(%263, dtype="int32") /* ty=Tensor[(3), int32] */;
  %276 = cast(%263, dtype="bool") /* ty=Tensor[(9, 12, 2), bool] */;
  %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %278 = cast(%263, dtype="bool") /* ty=Tensor[(9, 12, 2), bool] */;
  %279 = shape_of(%265, dtype="int32") /* ty=Tensor[(3), int32] */;
  %280 = cast(%265, dtype="bool") /* ty=Tensor[(9, 12, 2), bool] */;
  %281 = dyn.reshape(%278, %279, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %282 = greater_equal(%280, %281) /* ty=Tensor[(9, 12, 2), bool] */;
  %283 = cast(%282, dtype="bool") /* ty=Tensor[(9, 12, 2), bool] */;
  %284 = shape_of(%265, dtype="int32") /* ty=Tensor[(3), int32] */;
  %285 = cast(%265, dtype="bool") /* ty=Tensor[(9, 12, 2), bool] */;
  %286 = dyn.reshape(%283, %284, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %287 = multiply(%268, %269) /* ty=Tensor[(9, 12, 2), float32] */;
  %288 = floor_mod(%272, %273) /* ty=Tensor[(9, 12, 2), float64] */;
  %289 = logical_or(%276, %277) /* ty=Tensor[(9, 12, 2), bool] */;
  %290 = less(%285, %286) /* ty=Tensor[(9, 12, 2), bool] */;
  (%287, %288, %289, %290)
}

def @func_3821(%var_3819: Tensor[(10), bool]) -> (Tensor[(594), bool], Tensor[(8, 12, 9), float32], Tensor[(70), bool], Tensor[(10), bool]) {
  @func_3818(%var_3819) /* ty=(Tensor[(594), bool], Tensor[(8, 12, 9), float32], Tensor[(70), bool], Tensor[(10), bool]) */
}

def @func_2919() -> (Tensor[(594), bool],) {
  %291 = @func_1818() /* ty=(Tensor[(8, 12, 9), bool], Tensor[(594), uint8], Tensor[(594), bool]) */;
  %292 = %291.2;
  (%292,)
}

def @func_1084(%var_1082: Tensor[(7, 1, 14), float32], %var_1083: Tensor[(10), bool]) -> (Tensor[(7, ?, 14), uint32], Tensor[(11, 14), float64], Tensor[(10), bool], Tensor[(10), bool], Tensor[(7, 1, 14), float64], Tensor[(11, 14), float64], Tensor[(9, 16, 12), float64], Tensor[(1728), uint16]) {
  %316 = fn (%var_1040: Tensor[(7, 1, 14), float32], %var_1057: Tensor[(10), bool]) -> (Tensor[(7, ?, 14), uint32], Tensor[(11, 14), float64], Tensor[(10), bool], Tensor[(10), bool], Tensor[(7, 1, 14), float64], Tensor[(11, 14), float64], Tensor[(9, 16, 12), float64], Tensor[(1728), uint16]) {
    %293 = cast(%var_1040, dtype="float32") /* ty=Tensor[(7, 1, 14), float32] */;
    %294 = rsqrt(%293) /* ty=Tensor[(7, 1, 14), float32] */;
    %295 = cast(%var_1040, dtype="uint32") /* ty=Tensor[(7, 1, 14), uint32] */;
    %296 = shape_of(%294, dtype="int32") /* ty=Tensor[(3), int32] */;
    %297 = cast(%294, dtype="uint32") /* ty=Tensor[(7, 1, 14), uint32] */;
    %298 = dyn.reshape(%295, %296, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %299 = @func_934() /* ty=(Tensor[(8, 12, 9), uint32], Tensor[(11, 14), float64], Tensor[(11, 14), float64]) */;
    %300 = cast(%var_1057, dtype="bool") /* ty=Tensor[(10), bool] */;
    %301 = reshape(%300, newshape=[10]) /* ty=Tensor[(10), bool] */;
    %302 = @func_904(%301) /* ty=(Tensor[(8, 12, 9), bool], Tensor[(7, 5, 2), float64], Tensor[(10), bool], Tensor[(70), bool], Tensor[(7, 5, 2), float64], Tensor[(594), bool], Tensor[(6, 144), float32], Tensor[(11, 14), float64]) */;
    %303 = cast(%294, dtype="float64") /* ty=Tensor[(7, 1, 14), float64] */;
    %304 = @func_613() /* ty=(Tensor[(11, 14), float64], Tensor[(8, 12, 9), bool], Tensor[(6, 144), float32]) */;
    %305 = cast(meta[relay.Constant][15] /* ty=Tensor[(1728), uint16] */, dtype="uint16") /* ty=Tensor[(1728), uint16] */;
    %306 = cast(meta[relay.Constant][15] /* ty=Tensor[(1728), uint16] */, dtype="uint16") /* ty=Tensor[(1728), uint16] */;
    %307 = reshape(%305, newshape=[9, 16, 12]) /* ty=Tensor[(9, 16, 12), uint16] */;
    %308 = reshape(%306, newshape=[9, 16, 12]) /* ty=Tensor[(9, 16, 12), uint16] */;
    %309 = @func_186(%307, %308) /* ty=(Tensor[(9, 16, 12), bool], Tensor[(9, 16, 12), float64], Tensor[(9, 16, 12), int16]) */;
    %310 = bitwise_and(%297, %298) /* ty=Tensor[(7, ?, 14), uint32] */;
    %311 = %299.2;
    %312 = %302.2;
    %313 = exp(%303) /* ty=Tensor[(7, 1, 14), float64] */;
    %314 = %304.0;
    %315 = %309.1;
    (%310, %311, %312, %var_1057, %313, %314, %315, meta[relay.Constant][15] /* ty=Tensor[(1728), uint16] */)
  };
  %316(%var_1082, %var_1083) /* ty=(Tensor[(7, ?, 14), uint32], Tensor[(11, 14), float64], Tensor[(10), bool], Tensor[(10), bool], Tensor[(7, 1, 14), float64], Tensor[(11, 14), float64], Tensor[(9, 16, 12), float64], Tensor[(1728), uint16]) */
}

def @func_1293() -> (Tensor[(11, 14), float64],) {
  @func_1291() /* ty=(Tensor[(11, 14), float64],) */
}

def @func_4556(%var_4554: Tensor[(2, 6, 4), float32]) -> Tensor[(2, 6, 4), float64] {
  @func_4553(%var_4554) /* ty=Tensor[(2, 6, 4), float64] */
}

def @func_4553(%var_4533: Tensor[(2, 6, 4), float32]) -> Tensor[(2, 6, 4), float64] {
  %317 = cast(%var_4533, dtype="float32") /* ty=Tensor[(2, 6, 4), float32] */;
  %318 = tan(%317) /* ty=Tensor[(2, 6, 4), float32] */;
  %319 = cast(%318, dtype="float64") /* ty=Tensor[(2, 6, 4), float64] */;
  sigmoid(%319) /* ty=Tensor[(2, 6, 4), float64] */
}

def @main() -> (Tensor[(4, 9, 8), float64], Tensor[(4, 9, 8), float32]) {
  %320 = @func_4428() /* ty=(Tensor[(4, 9, 8), float64], Tensor[(11, 14), float64]) */;
  %321 = @func_3271() /* ty=Tensor[(4, 9, 8), float32] */;
  %322 = cast(%321, dtype="float32") /* ty=Tensor[(4, 9, 8), float32] */;
  %323 = %320.0;
  %324 = rsqrt(%322) /* ty=Tensor[(4, 9, 8), float32] */;
  (%323, %324)
}

def @func_1291() -> (Tensor[(11, 14), float64],) {
  %325 = @func_838() /* ty=(Tensor[(11, 14), float64], Tensor[(11, 14), float64]) */;
  %326 = %325.1;
  (%326,)
}

def @func_1358() -> Tensor[(4, 9, 8), float32] {
  @func_1356() /* ty=Tensor[(4, 9, 8), float32] */
}

def @func_4469(%var_4457: Tensor[(432), int8]) -> (Tensor[(594), uint8], Tensor[(12, 9, 4), float32], Tensor[(432), int8]) {
  %327 = cast(%var_4457, dtype="int8") /* ty=Tensor[(432), int8] */;
  %328 = reshape(%327, newshape=[12, 9, 4]) /* ty=Tensor[(12, 9, 4), int8] */;
  %329 = @func_1342(%328) /* ty=(Tensor[(11, 14), float64], Tensor[(12, 9, 4), float64], Tensor[(12, 9, 4), float32], Tensor[(12, 9, 4), float64]) */;
  %330 = @func_4192() /* ty=Tensor[(594), uint8] */;
  %331 = %329.2;
  (%330, %331, %var_4457)
}

def @func_2017() -> Tensor[(6, 144), float32] {
  %332 = @func_1253() /* ty=Tensor[(6, 144), float64] */;
  %333 = cast(%332, dtype="float64") /* ty=Tensor[(6, 144), float64] */;
  %334 = cos(%333) /* ty=Tensor[(6, 144), float64] */;
  %335 = cast(%334, dtype="float32") /* ty=Tensor[(6, 144), float32] */;
  log10(%335) /* ty=Tensor[(6, 144), float32] */
}

def @func_709(%var_708: Tensor[(9, 6, 11), float64]) -> (Tensor[(9, 6, 11), float64], Tensor[(9, 6, 11), float64]) {
  %343 = fn (%var_693: Tensor[(9, 6, 11), float64]) -> (Tensor[(9, 6, 11), float64], Tensor[(9, 6, 11), float64]) {
    %336 = cast(%var_693, dtype="float64") /* ty=Tensor[(9, 6, 11), float64] */;
    %337 = cast(meta[relay.Constant][16] /* ty=Tensor[(9, 6, 11), float64] */, dtype="float64") /* ty=Tensor[(9, 6, 11), float64] */;
    %338 = shape_of(%var_693, dtype="int32") /* ty=Tensor[(3), int32] */;
    %339 = cast(%var_693, dtype="float64") /* ty=Tensor[(9, 6, 11), float64] */;
    %340 = dyn.reshape(%337, %338, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %341 = tan(%336) /* ty=Tensor[(9, 6, 11), float64] */;
    %342 = divide(%339, %340) /* ty=Tensor[(9, 6, 11), float64] */;
    (%341, %342)
  };
  %343(%var_708) /* ty=(Tensor[(9, 6, 11), float64], Tensor[(9, 6, 11), float64]) */
}

def @func_753(%var_751: Tensor[(1, 5, 2), bool], %var_752: Tensor[(7, 5, 2), bool]) -> Tensor[(7, 5, 2), float64] {
  %349 = fn (%var_723: Tensor[(1, 5, 2), bool], %var_724: Tensor[(7, 5, 2), bool]) -> Tensor[(7, 5, 2), float64] {
    %344 = cast(%var_723, dtype="bool") /* ty=Tensor[(1, 5, 2), bool] */;
    %345 = cast(%var_724, dtype="bool") /* ty=Tensor[(7, 5, 2), bool] */;
    %346 = logical_and(%344, %345) /* ty=Tensor[(7, 5, 2), bool] */;
    %347 = cast(%346, dtype="float64") /* ty=Tensor[(7, 5, 2), float64] */;
    %348 = cast(%var_723, dtype="float64") /* ty=Tensor[(1, 5, 2), float64] */;
    multiply(%347, %348) /* ty=Tensor[(7, 5, 2), float64] */
  };
  %349(%var_751, %var_752) /* ty=Tensor[(7, 5, 2), float64] */
}

def @func_1753(%var_1751: Tensor[(98), float32], %var_1752: Tensor[(10), bool]) -> (Tensor[(11, 14), float64], Tensor[(7, ?, 14), uint32], Tensor[(98), float32], Tensor[(10), bool]) {
  @func_1749(%var_1751, %var_1752) /* ty=(Tensor[(11, 14), float64], Tensor[(7, ?, 14), uint32], Tensor[(98), float32], Tensor[(10), bool]) */
}

def @func_2313(%var_2307: Tensor[(2, 5, 5), int64]) -> (Tensor[(2, 5, 5), int64],) {
  %350 = cast(%var_2307, dtype="int64") /* ty=Tensor[(2, 5, 5), int64] */;
  %351 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(2, 5, 5), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %352 = cast(meta[relay.Constant][17] /* ty=Tensor[(2, 5, 5), int64] */, dtype="int64") /* ty=Tensor[(2, 5, 5), int64] */;
  %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %354 = left_shift(%352, %353) /* ty=Tensor[(2, 5, 5), int64] */;
  (%354,)
}

def @func_2921() -> (Tensor[(594), bool],) {
  @func_2919() /* ty=(Tensor[(594), bool],) */
}

def @func_190(%var_188: Tensor[(9, 16, 12), uint16], %var_189: Tensor[(9, 16, 12), uint16]) -> (Tensor[(9, 16, 12), bool], Tensor[(9, 16, 12), float64], Tensor[(9, 16, 12), int16]) {
  @func_186(%var_188, %var_189) /* ty=(Tensor[(9, 16, 12), bool], Tensor[(9, 16, 12), float64], Tensor[(9, 16, 12), int16]) */
}

def @func_4653() -> (Tensor[(11, 14), float64], Tensor[(98), float32], Tensor[(98), float32], Tensor[(10), bool]) {
  @func_4651() /* ty=(Tensor[(11, 14), float64], Tensor[(98), float32], Tensor[(98), float32], Tensor[(10), bool]) */
}

def @func_4045(%var_4043: Tensor[(8, 12, 9), float32]) -> Tensor[(8, 12, 9), float32] {
  @func_4042(%var_4043) /* ty=Tensor[(8, 12, 9), float32] */
}

def @func_5029() -> Tensor[(8, 12, 9), float64] {
  @func_5027() /* ty=Tensor[(8, 12, 9), float64] */
}

def @func_2280(%var_2279: Tensor[(594), uint8]) -> (Tensor[(6, 144), uint16], Tensor[(11, 14), float64], Tensor[(594), uint8], Tensor[(6, 144), float64]) {
  %375 = fn (%var_2251: Tensor[(594), uint8]) -> (Tensor[(6, 144), uint16], Tensor[(11, 14), float64], Tensor[(594), uint8], Tensor[(6, 144), float64]) {
    %355 = @func_1253() /* ty=Tensor[(6, 144), float64] */;
    %356 = cast(meta[relay.Constant][18] /* ty=Tensor[(6, 144), float64] */, dtype="uint16") /* ty=Tensor[(6, 144), uint16] */;
    %357 = shape_of(%355, dtype="int32") /* ty=Tensor[(2), int32] */;
    %358 = cast(%355, dtype="uint16") /* ty=Tensor[(6, 144), uint16] */;
    %359 = dyn.reshape(%356, %357, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    %360 = @func_1198() /* ty=(Tensor[(11, 14), float64], Tensor[(11, 14), float64]) */;
    %361 = @func_1818() /* ty=(Tensor[(8, 12, 9), bool], Tensor[(594), uint8], Tensor[(594), bool]) */;
    %362 = %361.1;
    %363 = cast(%var_2251, dtype="uint8") /* ty=Tensor[(594), uint8] */;
    %364 = shape_of(%362, dtype="int32") /* ty=Tensor[(1), int32] */;
    %365 = cast(%362, dtype="uint8") /* ty=Tensor[(594), uint8] */;
    %366 = dyn.reshape(%363, %364, newshape=[]) /* ty=Tensor[(?), uint8] */;
    %367 = cast(%355, dtype="float64") /* ty=Tensor[(6, 144), float64] */;
    %368 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(6, 144), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %369 = cast(meta[relay.Constant][18] /* ty=Tensor[(6, 144), float64] */, dtype="float64") /* ty=Tensor[(6, 144), float64] */;
    %370 = dyn.reshape(%367, %368, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %371 = left_shift(%358, %359) /* ty=Tensor[(6, 144), uint16] */;
    %372 = %360.1;
    %373 = bitwise_xor(%365, %366) /* ty=Tensor[(594), uint8] */;
    %374 = floor_divide(%369, %370) /* ty=Tensor[(6, 144), float64] */;
    (%371, %372, %373, %374)
  };
  %375(%var_2279) /* ty=(Tensor[(6, 144), uint16], Tensor[(11, 14), float64], Tensor[(594), uint8], Tensor[(6, 144), float64]) */
}

def @func_3633() -> Tensor[(6, 144), float64] {
  %376 = fn () -> Tensor[(6, 144), float64] {
    @func_1253() /* ty=Tensor[(6, 144), float64] */
  };
  %376() /* ty=Tensor[(6, 144), float64] */
}

def @func_226(%var_219: Tensor[(9, 8, 9), float32]) -> (Tensor[(9, 8, 9), float32],) {
  %377 = cast(%var_219, dtype="float32") /* ty=Tensor[(9, 8, 9), float32] */;
  %378 = log10(%377) /* ty=Tensor[(9, 8, 9), float32] */;
  (%378,)
}

def @func_677() -> Tensor[(11, 14), float64] {
  %379 = @func_613() /* ty=(Tensor[(11, 14), float64], Tensor[(8, 12, 9), bool], Tensor[(6, 144), float32]) */;
  %379.0
}

def @func_2749() -> Tensor[(9, 16, 15), float64] {
  %381 = fn () -> Tensor[(9, 16, 15), float64] {
    %380 = cast(meta[relay.Constant][19] /* ty=Tensor[(9, 16, 15), float64] */, dtype="float64") /* ty=Tensor[(9, 16, 15), float64] */;
    sin(%380) /* ty=Tensor[(9, 16, 15), float64] */
  };
  %381() /* ty=Tensor[(9, 16, 15), float64] */
}

def @func_2498(%var_2434: Tensor[(10), bool], %var_2483: Tensor[(8, 12, 9), bool]) -> (Tensor[(11, 14), float64], Tensor[(98), float32], Tensor[(10), bool], Tensor[(11, 14), float64], Tensor[(8, 12, 9), float32], Tensor[(2, 12, 6), bool], Tensor[(144), float32]) {
  %382 = cast(meta[relay.Constant][20] /* ty=Tensor[(98), float32] */, dtype="float32") /* ty=Tensor[(98), float32] */;
  %383 = cast(%var_2434, dtype="bool") /* ty=Tensor[(10), bool] */;
  %384 = reshape(%382, newshape=[98]) /* ty=Tensor[(98), float32] */;
  %385 = reshape(%383, newshape=[10]) /* ty=Tensor[(10), bool] */;
  %386 = @func_1749(%384, %385) /* ty=(Tensor[(11, 14), float64], Tensor[(7, ?, 14), uint32], Tensor[(98), float32], Tensor[(10), bool]) */;
  %387 = @func_772() /* ty=(Tensor[(8, 12, 9), bool],) */;
  %388 = %387.0;
  %389 = cast(%var_2483, dtype="float32") /* ty=Tensor[(8, 12, 9), float32] */;
  %390 = shape_of(%388, dtype="int32") /* ty=Tensor[(3), int32] */;
  %391 = cast(%388, dtype="float32") /* ty=Tensor[(8, 12, 9), float32] */;
  %392 = dyn.reshape(%389, %390, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %393 = cast(meta[relay.Constant][21] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %394 = cast(meta[relay.Constant][21] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %395 = reshape(%393, newshape=[2, 12, 6]) /* ty=Tensor[(2, 12, 6), float32] */;
  %396 = reshape(%394, newshape=[2, 12, 6]) /* ty=Tensor[(2, 12, 6), float32] */;
  %397 = %386.0;
  %398 = @func_677() /* ty=Tensor[(11, 14), float64] */;
  %399 = power(%391, %392) /* ty=Tensor[(8, 12, 9), float32] */;
  %400 = @func_82(%395, %396) /* ty=Tensor[(2, 12, 6), bool] */;
  (%397, meta[relay.Constant][20] /* ty=Tensor[(98), float32] */, %var_2434, %398, %399, %400, meta[relay.Constant][21] /* ty=Tensor[(144), float32] */)
}

def @func_1198() -> (Tensor[(11, 14), float64], Tensor[(11, 14), float64]) {
  %401 = @func_838() /* ty=(Tensor[(11, 14), float64], Tensor[(11, 14), float64]) */;
  %402 = @func_1029() /* ty=(Tensor[(11, 14), float64], Tensor[(11, 14), float64]) */;
  %403 = %401.1;
  %404 = %402.1;
  (%403, %404)
}

def @func_679() -> Tensor[(11, 14), float64] {
  @func_677() /* ty=Tensor[(11, 14), float64] */
}

def @func_2058() -> Tensor[(8, 12, 9), float32] {
  @func_2056() /* ty=Tensor[(8, 12, 9), float32] */
}

def @func_572(%var_563: Tensor[(8, 12, 9), float32]) -> Tensor[(8, 12, 9), bool] {
  %405 = cast(%var_563, dtype="float32") /* ty=Tensor[(8, 12, 9), float32] */;
  %406 = acos(%405) /* ty=Tensor[(8, 12, 9), float32] */;
  %407 = cast(%var_563, dtype="bool") /* ty=Tensor[(8, 12, 9), bool] */;
  %408 = shape_of(%406, dtype="int32") /* ty=Tensor[(3), int32] */;
  %409 = cast(%406, dtype="bool") /* ty=Tensor[(8, 12, 9), bool] */;
  %410 = dyn.reshape(%407, %408, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%409, %410) /* ty=Tensor[(8, 12, 9), bool] */
}

def @func_3518() -> (Tensor[(11, 14), float64], Tensor[(11, 14), float64], Tensor[(432), int8], Tensor[(6, 144), float64]) {
  @func_3516() /* ty=(Tensor[(11, 14), float64], Tensor[(11, 14), float64], Tensor[(432), int8], Tensor[(6, 144), float64]) */
}

def @func_2992(%var_2990: Tensor[(11, 15, 16), float32]) -> (Tensor[(11, 15, 16), float32], Tensor[(2, 5, 5), int64], Tensor[(5, 10), int64]) {
  @func_2989(%var_2990) /* ty=(Tensor[(11, 15, 16), float32], Tensor[(2, 5, 5), int64], Tensor[(5, 10), int64]) */
}

def @func_3272() -> Tensor[(4, 9, 8), float32] {
  %411 = fn () -> Tensor[(4, 9, 8), float32] {
    @func_2959() /* ty=Tensor[(4, 9, 8), float32] */
  };
  %411() /* ty=Tensor[(4, 9, 8), float32] */
}

def @func_1818() -> (Tensor[(8, 12, 9), bool], Tensor[(594), uint8], Tensor[(594), bool]) {
  %412 = @func_613() /* ty=(Tensor[(11, 14), float64], Tensor[(8, 12, 9), bool], Tensor[(6, 144), float32]) */;
  %413 = @func_1151() /* ty=(Tensor[(8, 12, 9), bool], Tensor[(11, 14), float64], Tensor[(11, 14), float64], Tensor[(9, 6, 11), float64], Tensor[(594), float64]) */;
  %414 = %413.4;
  %415 = cast(%414, dtype="float64") /* ty=Tensor[(594), float64] */;
  %416 = sinh(%415) /* ty=Tensor[(594), float64] */;
  %417 = cast(%414, dtype="bool") /* ty=Tensor[(594), bool] */;
  %418 = shape_of(%416, dtype="int32") /* ty=Tensor[(1), int32] */;
  %419 = cast(%416, dtype="bool") /* ty=Tensor[(594), bool] */;
  %420 = dyn.reshape(%417, %418, newshape=[]) /* ty=Tensor[(?), bool] */;
  %421 = logical_or(%419, %420) /* ty=Tensor[(594), bool] */;
  %422 = cast(%414, dtype="uint8") /* ty=Tensor[(594), uint8] */;
  %423 = shape_of(%421, dtype="int32") /* ty=Tensor[(1), int32] */;
  %424 = cast(%421, dtype="uint8") /* ty=Tensor[(594), uint8] */;
  %425 = dyn.reshape(%422, %423, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %426 = cast(%421, dtype="bool") /* ty=Tensor[(594), bool] */;
  %427 = shape_of(%414, dtype="int32") /* ty=Tensor[(1), int32] */;
  %428 = cast(%414, dtype="bool") /* ty=Tensor[(594), bool] */;
  %429 = dyn.reshape(%426, %427, newshape=[]) /* ty=Tensor[(?), bool] */;
  %430 = %412.1;
  %431 = maximum(%424, %425) /* ty=Tensor[(594), uint8] */;
  %432 = logical_and(%428, %429) /* ty=Tensor[(594), bool] */;
  (%430, %431, %432)
}

def @func_1588(%var_1582: Tensor[(6, 144), float32]) -> Tensor[(6, 144), int16] {
  %433 = @func_613() /* ty=(Tensor[(11, 14), float64], Tensor[(8, 12, 9), bool], Tensor[(6, 144), float32]) */;
  %434 = %433.2;
  %435 = cast(%var_1582, dtype="int16") /* ty=Tensor[(6, 144), int16] */;
  %436 = shape_of(%434, dtype="int32") /* ty=Tensor[(2), int32] */;
  %437 = cast(%434, dtype="int16") /* ty=Tensor[(6, 144), int16] */;
  %438 = dyn.reshape(%435, %436, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  bitwise_and(%437, %438) /* ty=Tensor[(6, 144), int16] */
}

def @func_86(%var_84: Tensor[(2, 12, 6), float32], %var_85: Tensor[(2, 12, 6), float32]) -> Tensor[(2, 12, 6), bool] {
  @func_82(%var_84, %var_85) /* ty=Tensor[(2, 12, 6), bool] */
}

def @func_1650(%var_1649: Tensor[(864), float32]) -> (Tensor[(9, 6, 11), float64], Tensor[(8, 12, 9), bool], Tensor[(864), float32]) {
  %444 = fn (%var_1644: Tensor[(864), float32]) -> (Tensor[(9, 6, 11), float64], Tensor[(8, 12, 9), bool], Tensor[(864), float32]) {
    %439 = @func_1151() /* ty=(Tensor[(8, 12, 9), bool], Tensor[(11, 14), float64], Tensor[(11, 14), float64], Tensor[(9, 6, 11), float64], Tensor[(594), float64]) */;
    %440 = cast(%var_1644, dtype="float32") /* ty=Tensor[(864), float32] */;
    %441 = reshape(%440, newshape=[8, 12, 9]) /* ty=Tensor[(8, 12, 9), float32] */;
    %442 = %439.3;
    %443 = @func_572(%441) /* ty=Tensor[(8, 12, 9), bool] */;
    (%442, %443, %var_1644)
  };
  %444(%var_1649) /* ty=(Tensor[(9, 6, 11), float64], Tensor[(8, 12, 9), bool], Tensor[(864), float32]) */
}

def @func_1916() -> (Tensor[(11, 14), float64], Tensor[(594), bool]) {
  %451 = fn () -> (Tensor[(11, 14), float64], Tensor[(594), bool]) {
    %445 = @func_838() /* ty=(Tensor[(11, 14), float64], Tensor[(11, 14), float64]) */;
    %446 = %445.1;
    %447 = cast(%446, dtype="float64") /* ty=Tensor[(11, 14), float64] */;
    %448 = @func_1818() /* ty=(Tensor[(8, 12, 9), bool], Tensor[(594), uint8], Tensor[(594), bool]) */;
    %449 = asinh(%447) /* ty=Tensor[(11, 14), float64] */;
    %450 = %448.2;
    (%449, %450)
  };
  %451() /* ty=(Tensor[(11, 14), float64], Tensor[(594), bool]) */
}

def @func_2852() -> (Tensor[(4, 9, 8), float32],) {
  @func_2850() /* ty=(Tensor[(4, 9, 8), float32],) */
}

def @func_3818(%var_3812: Tensor[(10), bool]) -> (Tensor[(594), bool], Tensor[(8, 12, 9), float32], Tensor[(70), bool], Tensor[(10), bool]) {
  %452 = @func_1818() /* ty=(Tensor[(8, 12, 9), bool], Tensor[(594), uint8], Tensor[(594), bool]) */;
  %453 = cast(%var_3812, dtype="bool") /* ty=Tensor[(10), bool] */;
  %454 = reshape(%453, newshape=[10]) /* ty=Tensor[(10), bool] */;
  %455 = @func_904(%454) /* ty=(Tensor[(8, 12, 9), bool], Tensor[(7, 5, 2), float64], Tensor[(10), bool], Tensor[(70), bool], Tensor[(7, 5, 2), float64], Tensor[(594), bool], Tensor[(6, 144), float32], Tensor[(11, 14), float64]) */;
  %456 = %452.2;
  %457 = @func_2056() /* ty=Tensor[(8, 12, 9), float32] */;
  %458 = %455.3;
  (%456, %457, %458, %var_3812)
}

def @func_614() -> (Tensor[(11, 14), float64], Tensor[(8, 12, 9), bool], Tensor[(6, 144), float32]) {
  %464 = fn () -> (Tensor[(11, 14), float64], Tensor[(8, 12, 9), bool], Tensor[(6, 144), float32]) {
    %459 = cast(meta[relay.Constant][22] /* ty=Tensor[(11, 14), float64] */, dtype="float64") /* ty=Tensor[(11, 14), float64] */;
    %460 = cast(meta[relay.Constant][23] /* ty=Tensor[(6, 144), float32] */, dtype="float32") /* ty=Tensor[(6, 144), float32] */;
    %461 = reshape(%460, newshape=[8, 12, 9]) /* ty=Tensor[(8, 12, 9), float32] */;
    %462 = sqrt(%459) /* ty=Tensor[(11, 14), float64] */;
    %463 = @func_572(%461) /* ty=Tensor[(8, 12, 9), bool] */;
    (%462, %463, meta[relay.Constant][23] /* ty=Tensor[(6, 144), float32] */)
  };
  %464() /* ty=(Tensor[(11, 14), float64], Tensor[(8, 12, 9), bool], Tensor[(6, 144), float32]) */
}

def @func_3160(%var_3158: Tensor[(8, 12, 9), bool]) -> (Tensor[(8, 12, 9), float64], Tensor[(432), int8], Tensor[(432), int8], Tensor[(11, 14), float64], Tensor[(4, 3, 12), bool], Tensor[(8, 12, 9), bool], Tensor[(11, 14), float64], Tensor[(10, 1), bool]) {
  @func_3157(%var_3158) /* ty=(Tensor[(8, 12, 9), float64], Tensor[(432), int8], Tensor[(432), int8], Tensor[(11, 14), float64], Tensor[(4, 3, 12), bool], Tensor[(8, 12, 9), bool], Tensor[(11, 14), float64], Tensor[(10, 1), bool]) */
}

def @func_2813(%var_2811: Tensor[(864, 2), uint16]) -> (Tensor[(11, 14), float64], Tensor[(864, 2), float32]) {
  @func_2810(%var_2811) /* ty=(Tensor[(11, 14), float64], Tensor[(864, 2), float32]) */
}

def @func_2961() -> Tensor[(4, 9, 8), float32] {
  @func_2959() /* ty=Tensor[(4, 9, 8), float32] */
}

def @func_4194() -> Tensor[(594), uint8] {
  @func_4192() /* ty=Tensor[(594), uint8] */
}

def @func_1507(%var_1506: Tensor[(432), int8]) -> (Tensor[(11, 14), float64], Tensor[(11, 14), float64], Tensor[(432), int8]) {
  %471 = fn (%var_1497: Tensor[(432), int8]) -> (Tensor[(11, 14), float64], Tensor[(11, 14), float64], Tensor[(432), int8]) {
    %465 = @func_838() /* ty=(Tensor[(11, 14), float64], Tensor[(11, 14), float64]) */;
    %466 = cast(%var_1497, dtype="int8") /* ty=Tensor[(432), int8] */;
    %467 = reshape(%466, newshape=[12, 9, 4]) /* ty=Tensor[(12, 9, 4), int8] */;
    %468 = @func_1342(%467) /* ty=(Tensor[(11, 14), float64], Tensor[(12, 9, 4), float64], Tensor[(12, 9, 4), float32], Tensor[(12, 9, 4), float64]) */;
    %469 = %465.0;
    %470 = %468.0;
    (%469, %470, %var_1497)
  };
  %471(%var_1506) /* ty=(Tensor[(11, 14), float64], Tensor[(11, 14), float64], Tensor[(432), int8]) */
}

def @func_3157(%var_3068: Tensor[(8, 12, 9), bool]) -> (Tensor[(8, 12, 9), float64], Tensor[(432), int8], Tensor[(432), int8], Tensor[(11, 14), float64], Tensor[(4, 3, 12), bool], Tensor[(8, 12, 9), bool], Tensor[(11, 14), float64], Tensor[(10, 1), bool]) {
  %472 = @func_1818() /* ty=(Tensor[(8, 12, 9), bool], Tensor[(594), uint8], Tensor[(594), bool]) */;
  %473 = %472.0;
  %474 = cast(%var_3068, dtype="float64") /* ty=Tensor[(8, 12, 9), float64] */;
  %475 = shape_of(%473, dtype="int32") /* ty=Tensor[(3), int32] */;
  %476 = cast(%473, dtype="float64") /* ty=Tensor[(8, 12, 9), float64] */;
  %477 = dyn.reshape(%474, %475, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %478 = cast(meta[relay.Constant][24] /* ty=Tensor[(432), int8] */, dtype="int8") /* ty=Tensor[(432), int8] */;
  %479 = reshape(%478, newshape=[432]) /* ty=Tensor[(432), int8] */;
  %480 = @func_1505(%479) /* ty=(Tensor[(11, 14), float64], Tensor[(11, 14), float64], Tensor[(432), int8]) */;
  %481 = cast(meta[relay.Constant][25] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %482 = cast(%473, dtype="bool") /* ty=Tensor[(8, 12, 9), bool] */;
  %483 = reshape(%481, newshape=[4, 3, 12]) /* ty=Tensor[(4, 3, 12), float64] */;
  %484 = reshape(%482, newshape=[8, 12, 9]) /* ty=Tensor[(8, 12, 9), bool] */;
  %485 = @func_2628(%483, %484) /* ty=(Tensor[(4, 3, 12), uint8], Tensor[(4, 3, 12), float64], Tensor[(6, 144), bool], Tensor[(8, 12, 9), bool]) */;
  %486 = %485.0;
  %487 = cast(%486, dtype="float64") /* ty=Tensor[(4, 3, 12), float64] */;
  %488 = sinh(%487) /* ty=Tensor[(4, 3, 12), float64] */;
  %489 = cast(meta[relay.Constant][25] /* ty=Tensor[(144), float64] */, dtype="bool") /* ty=Tensor[(144), bool] */;
  %490 = shape_of(%488, dtype="int32") /* ty=Tensor[(3), int32] */;
  %491 = cast(%488, dtype="bool") /* ty=Tensor[(4, 3, 12), bool] */;
  %492 = dyn.reshape(%489, %490, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %493 = @func_772() /* ty=(Tensor[(8, 12, 9), bool],) */;
  %494 = cast(meta[relay.Constant][26] /* ty=Tensor[(10, 1), bool] */, dtype="bool") /* ty=Tensor[(10, 1), bool] */;
  %495 = cast(%var_3068, dtype="bool") /* ty=Tensor[(8, 12, 9), bool] */;
  %496 = reshape(%494, newshape=[10]) /* ty=Tensor[(10), bool] */;
  %497 = reshape(%495, newshape=[8, 12, 9]) /* ty=Tensor[(8, 12, 9), bool] */;
  %498 = @func_2498(%496, %497) /* ty=(Tensor[(11, 14), float64], Tensor[(98), float32], Tensor[(10), bool], Tensor[(11, 14), float64], Tensor[(8, 12, 9), float32], Tensor[(2, 12, 6), bool], Tensor[(144), float32]) */;
  %499 = mod(%476, %477) /* ty=Tensor[(8, 12, 9), float64] */;
  %500 = %480.2;
  %501 = @func_677() /* ty=Tensor[(11, 14), float64] */;
  %502 = equal(%491, %492) /* ty=Tensor[(4, 3, 12), bool] */;
  %503 = %493.0;
  %504 = %498.3;
  (%499, %500, meta[relay.Constant][24] /* ty=Tensor[(432), int8] */, %501, %502, %503, %504, meta[relay.Constant][26] /* ty=Tensor[(10, 1), bool] */)
}

def @func_3689(%var_3687: Tensor[(300), uint32], %var_3688: Tensor[(648), float32]) -> (Tensor[(594), float64], Tensor[(15, 4, 5), float64], Tensor[(300), uint32], Tensor[(648), float32]) {
  %515 = fn (%var_3676: Tensor[(300), uint32], %var_3677: Tensor[(648), float32]) -> (Tensor[(594), float64], Tensor[(15, 4, 5), float64], Tensor[(300), uint32], Tensor[(648), float32]) {
    %505 = @func_1151() /* ty=(Tensor[(8, 12, 9), bool], Tensor[(11, 14), float64], Tensor[(11, 14), float64], Tensor[(9, 6, 11), float64], Tensor[(594), float64]) */;
    %506 = cast(%var_3676, dtype="uint32") /* ty=Tensor[(300), uint32] */;
    %507 = cast(%var_3677, dtype="float32") /* ty=Tensor[(648), float32] */;
    %508 = cast(%var_3677, dtype="float32") /* ty=Tensor[(648), float32] */;
    %509 = reshape(%506, newshape=[15, 4, 5]) /* ty=Tensor[(15, 4, 5), uint32] */;
    %510 = reshape(%507, newshape=[648]) /* ty=Tensor[(648), float32] */;
    %511 = reshape(%508, newshape=[648]) /* ty=Tensor[(648), float32] */;
    %512 = @func_513(%509, %510, %511) /* ty=(Tensor[(15, 4, 5), uint32], Tensor[(9, 8, 9), float32], Tensor[(648), float32], Tensor[(15, 4, 5), float64]) */;
    %513 = %505.4;
    %514 = %512.3;
    (%513, %514, %var_3676, %var_3677)
  };
  %515(%var_3687, %var_3688) /* ty=(Tensor[(594), float64], Tensor[(15, 4, 5), float64], Tensor[(300), uint32], Tensor[(648), float32]) */
}

def @func_344(%var_335: Tensor[(9, 12, 2), float64], %var_336: Tensor[(9, 12, 2), float64]) -> (Tensor[(9, 12, 2), bool],) {
  %516 = cast(%var_336, dtype="bool") /* ty=Tensor[(9, 12, 2), bool] */;
  %517 = shape_of(%var_335, dtype="int32") /* ty=Tensor[(3), int32] */;
  %518 = cast(%var_335, dtype="bool") /* ty=Tensor[(9, 12, 2), bool] */;
  %519 = dyn.reshape(%516, %517, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %520 = less_equal(%518, %519) /* ty=Tensor[(9, 12, 2), bool] */;
  (%520,)
}

def @func_1255() -> Tensor[(6, 144), float64] {
  @func_1253() /* ty=Tensor[(6, 144), float64] */
}

def @func_1591(%var_1589: Tensor[(6, 144), float32]) -> Tensor[(6, 144), int16] {
  @func_1588(%var_1589) /* ty=Tensor[(6, 144), int16] */
}

def @func_3916(%var_3879: Tensor[(56), float32], %var_3893: Tensor[(594), bool]) -> (Tensor[(8, 12, 9), float32], Tensor[(56), float32], Tensor[(6, 144), float64], Tensor[(864, 2), float32], Tensor[(1728), uint16], Tensor[(594), int16]) {
  %521 = @func_2056() /* ty=Tensor[(8, 12, 9), float32] */;
  %522 = cast(%521, dtype="float64") /* ty=Tensor[(8, 12, 9), float64] */;
  %523 = reshape(%522, newshape=[6, 144]) /* ty=Tensor[(6, 144), float64] */;
  %524 = @func_1413(%523) /* ty=(Tensor[(6, 144), bool], Tensor[(4, 9, 8), float32]) */;
  %525 = %524.0;
  %526 = cast(%525, dtype="float64") /* ty=Tensor[(6, 144), float64] */;
  %527 = cast(meta[relay.Constant][27] /* ty=Tensor[(1728), uint16] */, dtype="uint16") /* ty=Tensor[(1728), uint16] */;
  %528 = reshape(%527, newshape=[864, 2]) /* ty=Tensor[(864, 2), uint16] */;
  %529 = @func_2810(%528) /* ty=(Tensor[(11, 14), float64], Tensor[(864, 2), float32]) */;
  %530 = cast(%var_3879, dtype="float32") /* ty=Tensor[(56), float32] */;
  %531 = cast(%var_3879, dtype="float32") /* ty=Tensor[(56), float32] */;
  %532 = reshape(%530, newshape=[2, 14, 2]) /* ty=Tensor[(2, 14, 2), float32] */;
  %533 = reshape(%531, newshape=[2, 14, 2]) /* ty=Tensor[(2, 14, 2), float32] */;
  %534 = @func_1970(%532, %533) /* ty=(Tensor[(2, 14, 2), int8], Tensor[(594), bool], Tensor[(2, 14, 2), float32], Tensor[(8, 12, 9), float64], Tensor[(8, 12, 9), bool]) */;
  %535 = %534.1;
  %536 = cast(%var_3893, dtype="int16") /* ty=Tensor[(594), int16] */;
  %537 = shape_of(%535, dtype="int32") /* ty=Tensor[(1), int32] */;
  %538 = cast(%535, dtype="int16") /* ty=Tensor[(594), int16] */;
  %539 = dyn.reshape(%536, %537, newshape=[]) /* ty=Tensor[(?), int16] */;
  %540 = sin(%526) /* ty=Tensor[(6, 144), float64] */;
  %541 = %529.1;
  %542 = bitwise_or(%538, %539) /* ty=Tensor[(594), int16] */;
  (%521, %var_3879, %540, %541, meta[relay.Constant][27] /* ty=Tensor[(1728), uint16] */, %542)
}

def @func_1200() -> (Tensor[(11, 14), float64], Tensor[(11, 14), float64]) {
  @func_1198() /* ty=(Tensor[(11, 14), float64], Tensor[(11, 14), float64]) */
}

def @func_2810(%var_2798: Tensor[(864, 2), uint16]) -> (Tensor[(11, 14), float64], Tensor[(864, 2), float32]) {
  %543 = @func_934() /* ty=(Tensor[(8, 12, 9), uint32], Tensor[(11, 14), float64], Tensor[(11, 14), float64]) */;
  %544 = cast(%var_2798, dtype="uint16") /* ty=Tensor[(864, 2), uint16] */;
  %545 = cast(%var_2798, dtype="uint16") /* ty=Tensor[(864, 2), uint16] */;
  %546 = reshape(%544, newshape=[9, 16, 12]) /* ty=Tensor[(9, 16, 12), uint16] */;
  %547 = reshape(%545, newshape=[9, 16, 12]) /* ty=Tensor[(9, 16, 12), uint16] */;
  %548 = @func_186(%546, %547) /* ty=(Tensor[(9, 16, 12), bool], Tensor[(9, 16, 12), float64], Tensor[(9, 16, 12), int16]) */;
  %549 = %548.0;
  %550 = cast(%549, dtype="float32") /* ty=Tensor[(9, 16, 12), float32] */;
  %551 = shape_of(%var_2798, dtype="int32") /* ty=Tensor[(2), int32] */;
  %552 = cast(%var_2798, dtype="float32") /* ty=Tensor[(864, 2), float32] */;
  %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %554 = %543.1;
  %555 = floor_mod(%552, %553) /* ty=Tensor[(864, 2), float32] */;
  (%554, %555)
}

def @func_4472(%var_4470: Tensor[(432), int8]) -> (Tensor[(594), uint8], Tensor[(12, 9, 4), float32], Tensor[(432), int8]) {
  @func_4469(%var_4470) /* ty=(Tensor[(594), uint8], Tensor[(12, 9, 4), float32], Tensor[(432), int8]) */
}

def @func_517(%var_514: Tensor[(15, 4, 5), uint32], %var_515: Tensor[(648), float32], %var_516: Tensor[(648), float32]) -> (Tensor[(15, 4, 5), uint32], Tensor[(9, 8, 9), float32], Tensor[(648), float32], Tensor[(15, 4, 5), float64]) {
  %570 = fn (%var_465: Tensor[(15, 4, 5), uint32], %var_474: Tensor[(648), float32], %var_478: Tensor[(648), float32]) -> (Tensor[(15, 4, 5), uint32], Tensor[(9, 8, 9), float32], Tensor[(648), float32], Tensor[(15, 4, 5), float64]) {
    %556 = cast(meta[relay.Constant][28] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %557 = cast(%var_465, dtype="uint32") /* ty=Tensor[(15, 4, 5), uint32] */;
    %558 = cast(%var_474, dtype="float32") /* ty=Tensor[(648), float32] */;
    %559 = reshape(%558, newshape=[9, 8, 9]) /* ty=Tensor[(9, 8, 9), float32] */;
    %560 = @func_226(%559) /* ty=(Tensor[(9, 8, 9), float32],) */;
    %561 = cast(%var_478, dtype="float32") /* ty=Tensor[(648), float32] */;
    %562 = shape_of(%var_474, dtype="int32") /* ty=Tensor[(1), int32] */;
    %563 = cast(%var_474, dtype="float32") /* ty=Tensor[(648), float32] */;
    %564 = dyn.reshape(%561, %562, newshape=[]) /* ty=Tensor[(?), float32] */;
    %565 = cast(%var_465, dtype="float64") /* ty=Tensor[(15, 4, 5), float64] */;
    %566 = maximum(%556, %557) /* ty=Tensor[(15, 4, 5), uint32] */;
    %567 = %560.0;
    %568 = subtract(%563, %564) /* ty=Tensor[(648), float32] */;
    %569 = tan(%565) /* ty=Tensor[(15, 4, 5), float64] */;
    (%566, %567, %568, %569)
  };
  %570(%var_514, %var_515, %var_516) /* ty=(Tensor[(15, 4, 5), uint32], Tensor[(9, 8, 9), float32], Tensor[(648), float32], Tensor[(15, 4, 5), float64]) */
}

def @func_1970(%var_1920: Tensor[(2, 14, 2), float32], %var_1921: Tensor[(2, 14, 2), float32]) -> (Tensor[(2, 14, 2), int8], Tensor[(594), bool], Tensor[(2, 14, 2), float32], Tensor[(8, 12, 9), float64], Tensor[(8, 12, 9), bool]) {
  %571 = cast(%var_1921, dtype="int8") /* ty=Tensor[(2, 14, 2), int8] */;
  %572 = shape_of(%var_1920, dtype="int32") /* ty=Tensor[(3), int32] */;
  %573 = cast(%var_1920, dtype="int8") /* ty=Tensor[(2, 14, 2), int8] */;
  %574 = dyn.reshape(%571, %572, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %575 = @func_1818() /* ty=(Tensor[(8, 12, 9), bool], Tensor[(594), uint8], Tensor[(594), bool]) */;
  %576 = cast(%var_1921, dtype="float32") /* ty=Tensor[(2, 14, 2), float32] */;
  %577 = shape_of(%var_1920, dtype="int32") /* ty=Tensor[(3), int32] */;
  %578 = cast(%var_1920, dtype="float32") /* ty=Tensor[(2, 14, 2), float32] */;
  %579 = dyn.reshape(%576, %577, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %580 = floor_mod(%578, %579) /* ty=Tensor[(2, 14, 2), float32] */;
  %581 = cast(meta[relay.Constant][29] /* ty=Tensor[(2, 14, 2), float32] */, dtype="float32") /* ty=Tensor[(2, 14, 2), float32] */;
  %582 = shape_of(%580, dtype="int32") /* ty=Tensor[(3), int32] */;
  %583 = cast(%580, dtype="float32") /* ty=Tensor[(2, 14, 2), float32] */;
  %584 = dyn.reshape(%581, %582, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %585 = power(%583, %584) /* ty=Tensor[(2, 14, 2), float32] */;
  %586 = cast(%585, dtype="float32") /* ty=Tensor[(2, 14, 2), float32] */;
  %587 = asinh(%586) /* ty=Tensor[(2, 14, 2), float32] */;
  %588 = cast(%587, dtype="float32") /* ty=Tensor[(2, 14, 2), float32] */;
  %589 = @func_1231() /* ty=(Tensor[(8, 12, 9), float64],) */;
  %590 = @func_1818() /* ty=(Tensor[(8, 12, 9), bool], Tensor[(594), uint8], Tensor[(594), bool]) */;
  %591 = bitwise_xor(%573, %574) /* ty=Tensor[(2, 14, 2), int8] */;
  %592 = %575.2;
  %593 = atanh(%588) /* ty=Tensor[(2, 14, 2), float32] */;
  %594 = %589.0;
  %595 = %590.0;
  (%591, %592, %593, %594, %595)
}

def @func_575(%var_573: Tensor[(8, 12, 9), float32]) -> Tensor[(8, 12, 9), bool] {
  @func_572(%var_573) /* ty=Tensor[(8, 12, 9), bool] */
}

def @func_3837() -> Tensor[(8, 12, 9), float64] {
  @func_3835() /* ty=Tensor[(8, 12, 9), float64] */
}

def @func_934() -> (Tensor[(8, 12, 9), uint32], Tensor[(11, 14), float64], Tensor[(11, 14), float64]) {
  %596 = @func_613() /* ty=(Tensor[(11, 14), float64], Tensor[(8, 12, 9), bool], Tensor[(6, 144), float32]) */;
  %597 = %596.1;
  %598 = cast(meta[relay.Constant][30] /* ty=Tensor[(8, 12, 9), bool] */, dtype="uint32") /* ty=Tensor[(8, 12, 9), uint32] */;
  %599 = shape_of(%597, dtype="int32") /* ty=Tensor[(3), int32] */;
  %600 = cast(%597, dtype="uint32") /* ty=Tensor[(8, 12, 9), uint32] */;
  %601 = dyn.reshape(%598, %599, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %602 = @func_838() /* ty=(Tensor[(11, 14), float64], Tensor[(11, 14), float64]) */;
  %603 = @func_838() /* ty=(Tensor[(11, 14), float64], Tensor[(11, 14), float64]) */;
  %604 = right_shift(%600, %601) /* ty=Tensor[(8, 12, 9), uint32] */;
  %605 = %602.1;
  %606 = %603.0;
  (%604, %605, %606)
}

def @func_82(%var_32: Tensor[(2, 12, 6), float32], %var_78: Tensor[(2, 12, 6), float32]) -> Tensor[(2, 12, 6), bool] {
  %607 = cast(%var_32, dtype="float32") /* ty=Tensor[(2, 12, 6), float32] */;
  %608 = log10(%607) /* ty=Tensor[(2, 12, 6), float32] */;
  %609 = cast(%var_78, dtype="bool") /* ty=Tensor[(2, 12, 6), bool] */;
  %610 = shape_of(%608, dtype="int32") /* ty=Tensor[(3), int32] */;
  %611 = cast(%608, dtype="bool") /* ty=Tensor[(2, 12, 6), bool] */;
  %612 = dyn.reshape(%609, %610, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%611, %612) /* ty=Tensor[(2, 12, 6), bool] */
}

def @func_780() -> (Tensor[(11, 14), float64],) {
  %615 = fn () -> (Tensor[(11, 14), float64],) {
    %613 = @func_613() /* ty=(Tensor[(11, 14), float64], Tensor[(8, 12, 9), bool], Tensor[(6, 144), float32]) */;
    %614 = %613.0;
    (%614,)
  };
  %615() /* ty=(Tensor[(11, 14), float64],) */
}

def @func_3920(%var_3918: Tensor[(56), float32], %var_3919: Tensor[(594), bool]) -> (Tensor[(8, 12, 9), float32], Tensor[(56), float32], Tensor[(6, 144), float64], Tensor[(864, 2), float32], Tensor[(1728), uint16], Tensor[(594), int16]) {
  @func_3916(%var_3918, %var_3919) /* ty=(Tensor[(8, 12, 9), float32], Tensor[(56), float32], Tensor[(6, 144), float64], Tensor[(864, 2), float32], Tensor[(1728), uint16], Tensor[(594), int16]) */
}

def @func_4777() -> (Tensor[(6, 144), float64], Tensor[(11, 14), float64], Tensor[(432), int8], Tensor[(2, 12, 6), bool], Tensor[(72, 2), float32], Tensor[(8, 12, 9), bool], Tensor[(11, 14), float64]) {
  @func_4775() /* ty=(Tensor[(6, 144), float64], Tensor[(11, 14), float64], Tensor[(432), int8], Tensor[(2, 12, 6), bool], Tensor[(72, 2), float32], Tensor[(8, 12, 9), bool], Tensor[(11, 14), float64]) */
}

def @func_1974(%var_1972: Tensor[(2, 14, 2), float32], %var_1973: Tensor[(2, 14, 2), float32]) -> (Tensor[(2, 14, 2), int8], Tensor[(594), bool], Tensor[(2, 14, 2), float32], Tensor[(8, 12, 9), float64], Tensor[(8, 12, 9), bool]) {
  @func_1970(%var_1972, %var_1973) /* ty=(Tensor[(2, 14, 2), int8], Tensor[(594), bool], Tensor[(2, 14, 2), float32], Tensor[(8, 12, 9), float64], Tensor[(8, 12, 9), bool]) */
}

def @func_4651() -> (Tensor[(11, 14), float64], Tensor[(98), float32], Tensor[(98), float32], Tensor[(10), bool]) {
  %616 = @func_1029() /* ty=(Tensor[(11, 14), float64], Tensor[(11, 14), float64]) */;
  %617 = cast(meta[relay.Constant][31] /* ty=Tensor[(98), float32] */, dtype="float32") /* ty=Tensor[(98), float32] */;
  %618 = cast(meta[relay.Constant][32] /* ty=Tensor[(10), bool] */, dtype="bool") /* ty=Tensor[(10), bool] */;
  %619 = reshape(%617, newshape=[98]) /* ty=Tensor[(98), float32] */;
  %620 = reshape(%618, newshape=[10]) /* ty=Tensor[(10), bool] */;
  %621 = @func_1749(%619, %620) /* ty=(Tensor[(11, 14), float64], Tensor[(7, ?, 14), uint32], Tensor[(98), float32], Tensor[(10), bool]) */;
  %622 = %616.0;
  %623 = %621.2;
  (%622, %623, meta[relay.Constant][31] /* ty=Tensor[(98), float32] */, meta[relay.Constant][32] /* ty=Tensor[(10), bool] */)
}

def @func_4775() -> (Tensor[(6, 144), float64], Tensor[(11, 14), float64], Tensor[(432), int8], Tensor[(2, 12, 6), bool], Tensor[(72, 2), float32], Tensor[(8, 12, 9), bool], Tensor[(11, 14), float64]) {
  %624 = cast(meta[relay.Constant][33] /* ty=Tensor[(432), int8] */, dtype="int8") /* ty=Tensor[(432), int8] */;
  %625 = reshape(%624, newshape=[432]) /* ty=Tensor[(432), int8] */;
  %626 = @func_1505(%625) /* ty=(Tensor[(11, 14), float64], Tensor[(11, 14), float64], Tensor[(432), int8]) */;
  %627 = cast(meta[relay.Constant][34] /* ty=Tensor[(72, 2), float32] */, dtype="float32") /* ty=Tensor[(72, 2), float32] */;
  %628 = cast(meta[relay.Constant][34] /* ty=Tensor[(72, 2), float32] */, dtype="float32") /* ty=Tensor[(72, 2), float32] */;
  %629 = reshape(%627, newshape=[2, 12, 6]) /* ty=Tensor[(2, 12, 6), float32] */;
  %630 = reshape(%628, newshape=[2, 12, 6]) /* ty=Tensor[(2, 12, 6), float32] */;
  %631 = @func_3632() /* ty=Tensor[(6, 144), float64] */;
  %632 = cast(%631, dtype="float32") /* ty=Tensor[(6, 144), float32] */;
  %633 = reshape(%632, newshape=[864]) /* ty=Tensor[(864), float32] */;
  %634 = @func_1648(%633) /* ty=(Tensor[(9, 6, 11), float64], Tensor[(8, 12, 9), bool], Tensor[(864), float32]) */;
  %635 = @func_779() /* ty=(Tensor[(11, 14), float64],) */;
  %636 = %626.1;
  %637 = @func_82(%629, %630) /* ty=Tensor[(2, 12, 6), bool] */;
  %638 = %634.1;
  %639 = %635.0;
  (%631, %636, meta[relay.Constant][33] /* ty=Tensor[(432), int8] */, %637, meta[relay.Constant][34] /* ty=Tensor[(72, 2), float32] */, %638, %639)
}

def @func_4129() -> (Tensor[(8, 12, 9), bool], Tensor[(9, 12, 2), bool], Tensor[(216), float64], Tensor[(8, 12, 9), float64]) {
  %640 = @func_772() /* ty=(Tensor[(8, 12, 9), bool],) */;
  %641 = cast(meta[relay.Constant][35] /* ty=Tensor[(216), float64] */, dtype="float64") /* ty=Tensor[(216), float64] */;
  %642 = cast(meta[relay.Constant][35] /* ty=Tensor[(216), float64] */, dtype="float64") /* ty=Tensor[(216), float64] */;
  %643 = reshape(%641, newshape=[9, 12, 2]) /* ty=Tensor[(9, 12, 2), float64] */;
  %644 = reshape(%642, newshape=[9, 12, 2]) /* ty=Tensor[(9, 12, 2), float64] */;
  %645 = @func_344(%643, %644) /* ty=(Tensor[(9, 12, 2), bool],) */;
  %646 = @func_1231() /* ty=(Tensor[(8, 12, 9), float64],) */;
  %647 = %646.0;
  %648 = cast(%647, dtype="float64") /* ty=Tensor[(8, 12, 9), float64] */;
  %649 = %640.0;
  %650 = %645.0;
  %651 = sigmoid(%648) /* ty=Tensor[(8, 12, 9), float64] */;
  (%649, %650, meta[relay.Constant][35] /* ty=Tensor[(216), float64] */, %651)
}

def @func_3603() -> (Tensor[(8, 12, 9), bool], Tensor[(8, 12, 9), float32]) {
  %661 = fn () -> (Tensor[(8, 12, 9), bool], Tensor[(8, 12, 9), float32]) {
    %652 = @func_1151() /* ty=(Tensor[(8, 12, 9), bool], Tensor[(11, 14), float64], Tensor[(11, 14), float64], Tensor[(9, 6, 11), float64], Tensor[(594), float64]) */;
    %653 = %652.0;
    %654 = cast(meta[relay.Constant][36] /* ty=Tensor[(8, 12, 9), bool] */, dtype="bool") /* ty=Tensor[(8, 12, 9), bool] */;
    %655 = shape_of(%653, dtype="int32") /* ty=Tensor[(3), int32] */;
    %656 = cast(%653, dtype="bool") /* ty=Tensor[(8, 12, 9), bool] */;
    %657 = dyn.reshape(%654, %655, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %658 = cast(meta[relay.Constant][36] /* ty=Tensor[(8, 12, 9), bool] */, dtype="float32") /* ty=Tensor[(8, 12, 9), float32] */;
    %659 = greater_equal(%656, %657) /* ty=Tensor[(8, 12, 9), bool] */;
    %660 = sin(%658) /* ty=Tensor[(8, 12, 9), float32] */;
    (%659, %660)
  };
  %661() /* ty=(Tensor[(8, 12, 9), bool], Tensor[(8, 12, 9), float32]) */
}

def @func_936() -> (Tensor[(8, 12, 9), uint32], Tensor[(11, 14), float64], Tensor[(11, 14), float64]) {
  @func_934() /* ty=(Tensor[(8, 12, 9), uint32], Tensor[(11, 14), float64], Tensor[(11, 14), float64]) */
}

def @func_1415(%var_1414: Tensor[(6, 144), float64]) -> (Tensor[(6, 144), bool], Tensor[(4, 9, 8), float32]) {
  %669 = fn (%var_1388: Tensor[(6, 144), float64]) -> (Tensor[(6, 144), bool], Tensor[(4, 9, 8), float32]) {
    %662 = @func_1253() /* ty=Tensor[(6, 144), float64] */;
    %663 = cast(%var_1388, dtype="bool") /* ty=Tensor[(6, 144), bool] */;
    %664 = shape_of(%662, dtype="int32") /* ty=Tensor[(2), int32] */;
    %665 = cast(%662, dtype="bool") /* ty=Tensor[(6, 144), bool] */;
    %666 = dyn.reshape(%663, %664, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %667 = less_equal(%665, %666) /* ty=Tensor[(6, 144), bool] */;
    %668 = @func_1356() /* ty=Tensor[(4, 9, 8), float32] */;
    (%667, %668)
  };
  %669(%var_1414) /* ty=(Tensor[(6, 144), bool], Tensor[(4, 9, 8), float32]) */
}

def @func_2316(%var_2314: Tensor[(2, 5, 5), int64]) -> (Tensor[(2, 5, 5), int64],) {
  @func_2313(%var_2314) /* ty=(Tensor[(2, 5, 5), int64],) */
}

def @func_4042(%var_4034: Tensor[(8, 12, 9), float32]) -> Tensor[(8, 12, 9), float32] {
  %670 = @func_3602() /* ty=(Tensor[(8, 12, 9), bool], Tensor[(8, 12, 9), float32]) */;
  %671 = %670.1;
  %672 = cast(%var_4034, dtype="float32") /* ty=Tensor[(8, 12, 9), float32] */;
  %673 = shape_of(%671, dtype="int32") /* ty=Tensor[(3), int32] */;
  %674 = cast(%671, dtype="float32") /* ty=Tensor[(8, 12, 9), float32] */;
  %675 = dyn.reshape(%672, %673, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%674, %675) /* ty=Tensor[(8, 12, 9), float32] */
}

def @func_2502(%var_2500: Tensor[(10), bool], %var_2501: Tensor[(8, 12, 9), bool]) -> (Tensor[(11, 14), float64], Tensor[(98), float32], Tensor[(10), bool], Tensor[(11, 14), float64], Tensor[(8, 12, 9), float32], Tensor[(2, 12, 6), bool], Tensor[(144), float32]) {
  @func_2498(%var_2500, %var_2501) /* ty=(Tensor[(11, 14), float64], Tensor[(98), float32], Tensor[(10), bool], Tensor[(11, 14), float64], Tensor[(8, 12, 9), float32], Tensor[(2, 12, 6), bool], Tensor[(144), float32]) */
}

def @func_4850() -> Tensor[(4, 9, 8), float32] {
  %676 = fn () -> Tensor[(4, 9, 8), float32] {
    @func_3271() /* ty=Tensor[(4, 9, 8), float32] */
  };
  %676() /* ty=Tensor[(4, 9, 8), float32] */
}

def @func_3338() -> Tensor[(4, 9, 8), float32] {
  %677 = @func_2850() /* ty=(Tensor[(4, 9, 8), float32],) */;
  %677.0
}

def @func_4724(%var_4722: Tensor[(3, 5, 16), float32]) -> (Tensor[(3, 5, 16), float32],) {
  @func_4721(%var_4722) /* ty=(Tensor[(3, 5, 16), float32],) */
}

def @func_4698() -> (Tensor[(11, 14), float64], Tensor[(6, 144), float32]) {
  %682 = fn () -> (Tensor[(11, 14), float64], Tensor[(6, 144), float32]) {
    %678 = @func_3516() /* ty=(Tensor[(11, 14), float64], Tensor[(11, 14), float64], Tensor[(432), int8], Tensor[(6, 144), float64]) */;
    %679 = @func_613() /* ty=(Tensor[(11, 14), float64], Tensor[(8, 12, 9), bool], Tensor[(6, 144), float32]) */;
    %680 = %678.1;
    %681 = %679.2;
    (%680, %681)
  };
  %682() /* ty=(Tensor[(11, 14), float64], Tensor[(6, 144), float32]) */
}

def @func_1356() -> Tensor[(4, 9, 8), float32] {
  %683 = cast(meta[relay.Constant][37] /* ty=Tensor[(4, 9, 8), float64] */, dtype="float64") /* ty=Tensor[(4, 9, 8), float64] */;
  %684 = cosh(%683) /* ty=Tensor[(4, 9, 8), float64] */;
  %685 = cast(meta[relay.Constant][37] /* ty=Tensor[(4, 9, 8), float64] */, dtype="float32") /* ty=Tensor[(4, 9, 8), float32] */;
  %686 = shape_of(%684, dtype="int32") /* ty=Tensor[(3), int32] */;
  %687 = cast(%684, dtype="float32") /* ty=Tensor[(4, 9, 8), float32] */;
  %688 = dyn.reshape(%685, %686, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  subtract(%687, %688) /* ty=Tensor[(4, 9, 8), float32] */
}

def @func_1719(%var_1718: Tensor[(3, 1, 7), int32]) -> (Tensor[(3, 15, 7), bool], Tensor[(6, 144), int16], Tensor[(864), float32], Tensor[(8, 12, 9), float64]) {
  %697 = fn (%var_1675: Tensor[(3, 1, 7), int32]) -> (Tensor[(3, 15, 7), bool], Tensor[(6, 144), int16], Tensor[(864), float32], Tensor[(8, 12, 9), float64]) {
    %689 = cast(%var_1675, dtype="bool") /* ty=Tensor[(3, 1, 7), bool] */;
    %690 = cast(meta[relay.Constant][38] /* ty=Tensor[(3, 15, 7), int32] */, dtype="bool") /* ty=Tensor[(3, 15, 7), bool] */;
    %691 = cast(meta[relay.Constant][39] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
    %692 = reshape(%691, newshape=[6, 144]) /* ty=Tensor[(6, 144), float32] */;
    %693 = @func_1231() /* ty=(Tensor[(8, 12, 9), float64],) */;
    %694 = less_equal(%689, %690) /* ty=Tensor[(3, 15, 7), bool] */;
    %695 = @func_1588(%692) /* ty=Tensor[(6, 144), int16] */;
    %696 = %693.0;
    (%694, %695, meta[relay.Constant][39] /* ty=Tensor[(864), float32] */, %696)
  };
  %697(%var_1718) /* ty=(Tensor[(3, 15, 7), bool], Tensor[(6, 144), int16], Tensor[(864), float32], Tensor[(8, 12, 9), float64]) */
}

def @func_4721(%var_4716: Tensor[(3, 5, 16), float32]) -> (Tensor[(3, 5, 16), float32],) {
  %698 = cast(meta[relay.Constant][40] /* ty=Tensor[(3, 1, 16), float32] */, dtype="float32") /* ty=Tensor[(3, 1, 16), float32] */;
  %699 = cast(%var_4716, dtype="float32") /* ty=Tensor[(3, 5, 16), float32] */;
  %700 = floor_mod(%698, %699) /* ty=Tensor[(3, 5, 16), float32] */;
  (%700,)
}

def @func_1820() -> (Tensor[(8, 12, 9), bool], Tensor[(594), uint8], Tensor[(594), bool]) {
  @func_1818() /* ty=(Tensor[(8, 12, 9), bool], Tensor[(594), uint8], Tensor[(594), bool]) */
}

def @func_1152() -> (Tensor[(8, 12, 9), bool], Tensor[(11, 14), float64], Tensor[(11, 14), float64], Tensor[(9, 6, 11), float64], Tensor[(594), float64]) {
  %711 = fn () -> (Tensor[(8, 12, 9), bool], Tensor[(11, 14), float64], Tensor[(11, 14), float64], Tensor[(9, 6, 11), float64], Tensor[(594), float64]) {
    %701 = @func_772() /* ty=(Tensor[(8, 12, 9), bool],) */;
    %702 = @func_838() /* ty=(Tensor[(11, 14), float64], Tensor[(11, 14), float64]) */;
    %703 = @func_934() /* ty=(Tensor[(8, 12, 9), uint32], Tensor[(11, 14), float64], Tensor[(11, 14), float64]) */;
    %704 = cast(meta[relay.Constant][41] /* ty=Tensor[(594), float64] */, dtype="float64") /* ty=Tensor[(594), float64] */;
    %705 = reshape(%704, newshape=[9, 6, 11]) /* ty=Tensor[(9, 6, 11), float64] */;
    %706 = @func_707(%705) /* ty=(Tensor[(9, 6, 11), float64], Tensor[(9, 6, 11), float64]) */;
    %707 = %701.0;
    %708 = %702.1;
    %709 = %703.1;
    %710 = %706.0;
    (%707, %708, %709, %710, meta[relay.Constant][41] /* ty=Tensor[(594), float64] */)
  };
  %711() /* ty=(Tensor[(8, 12, 9), bool], Tensor[(11, 14), float64], Tensor[(11, 14), float64], Tensor[(9, 6, 11), float64], Tensor[(594), float64]) */
}

def @func_906(%var_905: Tensor[(10), bool]) -> (Tensor[(8, 12, 9), bool], Tensor[(7, 5, 2), float64], Tensor[(10), bool], Tensor[(70), bool], Tensor[(7, 5, 2), float64], Tensor[(594), bool], Tensor[(6, 144), float32], Tensor[(11, 14), float64]) {
  %736 = fn (%var_866: Tensor[(10), bool]) -> (Tensor[(8, 12, 9), bool], Tensor[(7, 5, 2), float64], Tensor[(10), bool], Tensor[(70), bool], Tensor[(7, 5, 2), float64], Tensor[(594), bool], Tensor[(6, 144), float32], Tensor[(11, 14), float64]) {
    %712 = @func_772() /* ty=(Tensor[(8, 12, 9), bool],) */;
    %713 = cast(%var_866, dtype="bool") /* ty=Tensor[(10), bool] */;
    %714 = cast(meta[relay.Constant][42] /* ty=Tensor[(70), bool] */, dtype="bool") /* ty=Tensor[(70), bool] */;
    %715 = reshape(%713, newshape=[1, 5, 2]) /* ty=Tensor[(1, 5, 2), bool] */;
    %716 = reshape(%714, newshape=[7, 5, 2]) /* ty=Tensor[(7, 5, 2), bool] */;
    %717 = cast(%var_866, dtype="bool") /* ty=Tensor[(10), bool] */;
    %718 = cast(meta[relay.Constant][42] /* ty=Tensor[(70), bool] */, dtype="bool") /* ty=Tensor[(70), bool] */;
    %719 = reshape(%717, newshape=[1, 5, 2]) /* ty=Tensor[(1, 5, 2), bool] */;
    %720 = reshape(%718, newshape=[7, 5, 2]) /* ty=Tensor[(7, 5, 2), bool] */;
    %721 = cast(meta[relay.Constant][43] /* ty=Tensor[(594), float64] */, dtype="float64") /* ty=Tensor[(594), float64] */;
    %722 = reshape(%721, newshape=[9, 6, 11]) /* ty=Tensor[(9, 6, 11), float64] */;
    %723 = @func_707(%722) /* ty=(Tensor[(9, 6, 11), float64], Tensor[(9, 6, 11), float64]) */;
    %724 = %723.0;
    %725 = cast(%724, dtype="bool") /* ty=Tensor[(9, 6, 11), bool] */;
    %726 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(594), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %727 = cast(meta[relay.Constant][43] /* ty=Tensor[(594), float64] */, dtype="bool") /* ty=Tensor[(594), bool] */;
    %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?), bool] */;
    %729 = @func_613() /* ty=(Tensor[(11, 14), float64], Tensor[(8, 12, 9), bool], Tensor[(6, 144), float32]) */;
    %730 = %712.0;
    %731 = @func_750(%715, %716) /* ty=Tensor[(7, 5, 2), float64] */;
    %732 = @func_750(%719, %720) /* ty=Tensor[(7, 5, 2), float64] */;
    %733 = greater_equal(%727, %728) /* ty=Tensor[(594), bool] */;
    %734 = %729.2;
    %735 = @func_677() /* ty=Tensor[(11, 14), float64] */;
    (%730, %731, %var_866, meta[relay.Constant][42] /* ty=Tensor[(70), bool] */, %732, %733, %734, %735)
  };
  %736(%var_905) /* ty=(Tensor[(8, 12, 9), bool], Tensor[(7, 5, 2), float64], Tensor[(10), bool], Tensor[(70), bool], Tensor[(7, 5, 2), float64], Tensor[(594), bool], Tensor[(6, 144), float32], Tensor[(11, 14), float64]) */
}

def @func_840() -> (Tensor[(11, 14), float64], Tensor[(11, 14), float64]) {
  @func_838() /* ty=(Tensor[(11, 14), float64], Tensor[(11, 14), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen16/build/output.py", line 1768, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:44:06] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

