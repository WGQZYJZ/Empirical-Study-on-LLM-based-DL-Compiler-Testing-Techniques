==========mod==========
#[version = "0.0.5"]
def @func_2393() -> (Tensor[(5, 10, 7), bool], Tensor[(14, 11, 12), float64]) {
  %0 = @func_2012() /* ty=Tensor[(5, 10, 7), bool] */;
  %1 = @func_1886() /* ty=Tensor[(14, 11, 12), float64] */;
  (%0, %1)
}

def @func_6011() -> (Tensor[(5, 10, 7), float64],) {
  %2 = @func_5546() /* ty=Tensor[(5, 10, 7), float64] */;
  (%2,)
}

def @func_3227() -> (float64,) {
  %3 = @func_2175() /* ty=(float64,) */;
  %4 = %3.0;
  (%4,)
}

def @func_5849() -> float64 {
  %5 = @func_3055() /* ty=(Tensor[(14, 11, 12), float64], float64, Tensor[(8, 12, 5), uint64], Tensor[(462, 1), float64], Tensor[(13, 2, 11), float64], Tensor[(26, 11), float64]) */;
  %5.1
}

def @func_3824() -> (float64, float64) {
  %6 = @func_2175() /* ty=(float64,) */;
  %7 = @func_3512() /* ty=(float64,) */;
  %8 = %6.0;
  %9 = %7.0;
  (%8, %9)
}

def @func_6175(%var_6070: Tensor[(2, 6, 5), int8], %var_6116: Tensor[(2, 6, 5), float32]) -> (Tensor[(2, 6, 5), bool], Tensor[(5, 10, 7), bool], Tensor[(2, 6, 5), float32], Tensor[(2, 6, 5), uint8], Tensor[(2, 6, 5), float32]) {
  %10 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 6, 5), int8] */, dtype="int8") /* ty=Tensor[(2, 6, 5), int8] */;
  %11 = shape_of(%var_6070, dtype="int32") /* ty=Tensor[(3), int32] */;
  %12 = cast(%var_6070, dtype="int8") /* ty=Tensor[(2, 6, 5), int8] */;
  %13 = dyn.reshape(%10, %11, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %14 = left_shift(%12, %13) /* ty=Tensor[(2, 6, 5), int8] */;
  %15 = cast(%14, dtype="float32") /* ty=Tensor[(2, 6, 5), float32] */;
  %16 = acos(%15) /* ty=Tensor[(2, 6, 5), float32] */;
  %17 = cast(%16, dtype="float64") /* ty=Tensor[(2, 6, 5), float64] */;
  %18 = atanh(%17) /* ty=Tensor[(2, 6, 5), float64] */;
  %19 = cast(%18, dtype="float32") /* ty=Tensor[(2, 6, 5), float32] */;
  %20 = log2(%19) /* ty=Tensor[(2, 6, 5), float32] */;
  %21 = cast(%var_6116, dtype="float64") /* ty=Tensor[(2, 6, 5), float64] */;
  %22 = shape_of(%20, dtype="int32") /* ty=Tensor[(3), int32] */;
  %23 = cast(%20, dtype="float64") /* ty=Tensor[(2, 6, 5), float64] */;
  %24 = dyn.reshape(%21, %22, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %25 = mod(%23, %24) /* ty=Tensor[(2, 6, 5), float64] */;
  %26 = cast(%18, dtype="bool") /* ty=Tensor[(2, 6, 5), bool] */;
  %27 = shape_of(%25, dtype="int32") /* ty=Tensor[(3), int32] */;
  %28 = cast(%25, dtype="bool") /* ty=Tensor[(2, 6, 5), bool] */;
  %29 = dyn.reshape(%26, %27, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %30 = cast(%var_6070, dtype="float32") /* ty=Tensor[(2, 6, 5), float32] */;
  %31 = shape_of(%16, dtype="int32") /* ty=Tensor[(3), int32] */;
  %32 = cast(%16, dtype="float32") /* ty=Tensor[(2, 6, 5), float32] */;
  %33 = dyn.reshape(%30, %31, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %34 = cast(%var_6116, dtype="uint8") /* ty=Tensor[(2, 6, 5), uint8] */;
  %35 = shape_of(%25, dtype="int32") /* ty=Tensor[(3), int32] */;
  %36 = cast(%25, dtype="uint8") /* ty=Tensor[(2, 6, 5), uint8] */;
  %37 = dyn.reshape(%34, %35, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %38 = cast(%18, dtype="float32") /* ty=Tensor[(2, 6, 5), float32] */;
  %39 = greater_equal(%28, %29) /* ty=Tensor[(2, 6, 5), bool] */;
  %40 = @func_2803() /* ty=Tensor[(5, 10, 7), bool] */;
  %41 = minimum(%32, %33) /* ty=Tensor[(2, 6, 5), float32] */;
  %42 = logical_xor(%36, %37) /* ty=Tensor[(2, 6, 5), uint8] */;
  %43 = asinh(%38) /* ty=Tensor[(2, 6, 5), float32] */;
  (%39, %40, %41, %42, %43)
}

def @func_6326(%var_6321: Tensor[(11, 9, 16), uint8]) -> Tensor[(11, 9, 16), uint8] {
  %44 = cast(meta[relay.Constant][1] /* ty=Tensor[(11, 9, 16), uint8] */, dtype="uint8") /* ty=Tensor[(11, 9, 16), uint8] */;
  %45 = shape_of(%var_6321, dtype="int32") /* ty=Tensor[(3), int32] */;
  %46 = cast(%var_6321, dtype="uint8") /* ty=Tensor[(11, 9, 16), uint8] */;
  %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  logical_xor(%46, %47) /* ty=Tensor[(11, 9, 16), uint8] */
}

def @func_2923(%var_2875: Tensor[(108), float32]) -> (float64, Tensor[(9, 1, 12), float32], Tensor[(108), float32], Tensor[(3, 6, 10), float32], Tensor[(180), float64]) {
  %48 = @func_2022() /* ty=(float64,) */;
  %49 = cast(%var_2875, dtype="float32") /* ty=Tensor[(108), float32] */;
  %50 = reshape(%49, newshape=[9, 1, 12]) /* ty=Tensor[(9, 1, 12), float32] */;
  %51 = @func_2573(%50) /* ty=(Tensor[(9, 1, 12), float32], Tensor[(5, 10, 7), bool]) */;
  %52 = cast(meta[relay.Constant][2] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %53 = cast(meta[relay.Constant][2] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %54 = reshape(%52, newshape=[3, 6, 10]) /* ty=Tensor[(3, 6, 10), float32] */;
  %55 = reshape(%53, newshape=[3, 6, 10]) /* ty=Tensor[(3, 6, 10), float32] */;
  %56 = @func_251(%54, %55) /* ty=(Tensor[(3, 6, 10), float32], Tensor[(8, 12, 5), uint64], Tensor[(40, 12), float32], Tensor[(3, 6, 10), float32]) */;
  %57 = cast(meta[relay.Constant][2] /* ty=Tensor[(180), float32] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %58 = asin(%57) /* ty=Tensor[(180), float64] */;
  %59 = cast(%58, dtype="float64") /* ty=Tensor[(180), float64] */;
  %60 = %48.0;
  %61 = %51.0;
  %62 = %56.3;
  %63 = sin(%59) /* ty=Tensor[(180), float64] */;
  (%60, %61, %var_2875, %62, %63)
}

def @main(%var_6355: Tensor[(5, 10, 7), bool]) -> (Tensor[(5, 10, 7), int32],) {
  %64 = @func_4384() /* ty=(Tensor[(5, 10, 7), bool],) */;
  %65 = %64.0;
  %66 = cast(%var_6355, dtype="int32") /* ty=Tensor[(5, 10, 7), int32] */;
  %67 = shape_of(%65, dtype="int32") /* ty=Tensor[(3), int32] */;
  %68 = cast(%65, dtype="int32") /* ty=Tensor[(5, 10, 7), int32] */;
  %69 = dyn.reshape(%66, %67, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %70 = right_shift(%68, %69) /* ty=Tensor[(5, 10, 7), int32] */;
  (%70,)
}

def @func_6053(%var_6046: Tensor[(480), float32]) -> (Tensor[(5, 10, 7), bool], Tensor[(8, 12, 5), float32], Tensor[(480), float32], Tensor[(10, 9, 4), float64], Tensor[(360), float64]) {
  %71 = @func_3762() /* ty=(Tensor[(5, 10, 7), bool],) */;
  %72 = cast(%var_6046, dtype="float32") /* ty=Tensor[(480), float32] */;
  %73 = cast(%var_6046, dtype="float32") /* ty=Tensor[(480), float32] */;
  %74 = reshape(%72, newshape=[8, 12, 5]) /* ty=Tensor[(8, 12, 5), float32] */;
  %75 = reshape(%73, newshape=[8, 12, 5]) /* ty=Tensor[(8, 12, 5), float32] */;
  %76 = @func_212(%74, %75) /* ty=(Tensor[(8, 12, 5), uint64], Tensor[(8, 12, 5), float32], Tensor[(8, 12, 5), float32], Tensor[(8, 12, 5), float32]) */;
  %77 = cast(meta[relay.Constant][3] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %78 = reshape(%77, newshape=[10, 9, 4]) /* ty=Tensor[(10, 9, 4), float64] */;
  %79 = @func_1101(%78) /* ty=(Tensor[(10, 9, 4), float64], Tensor[(10, 9, 4), float32]) */;
  %80 = %71.0;
  %81 = %76.2;
  %82 = %79.0;
  (%80, %81, %var_6046, %82, meta[relay.Constant][3] /* ty=Tensor[(360), float64] */)
}

def @func_1216(%var_1200: Tensor[(2, 5, 1), int64], %var_1201: Tensor[(2, 5, 6), int64]) -> Tensor[(2, 5, 6), uint8] {
  %83 = cast(%var_1200, dtype="int64") /* ty=Tensor[(2, 5, 1), int64] */;
  %84 = cast(%var_1201, dtype="int64") /* ty=Tensor[(2, 5, 6), int64] */;
  %85 = bitwise_xor(%83, %84) /* ty=Tensor[(2, 5, 6), int64] */;
  %86 = cast(%var_1201, dtype="uint8") /* ty=Tensor[(2, 5, 6), uint8] */;
  %87 = shape_of(%85, dtype="int32") /* ty=Tensor[(3), int32] */;
  %88 = cast(%85, dtype="uint8") /* ty=Tensor[(2, 5, 6), uint8] */;
  %89 = dyn.reshape(%86, %87, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  logical_xor(%88, %89) /* ty=Tensor[(2, 5, 6), uint8] */
}

def @func_3711(%var_3692: Tensor[(462), float64]) -> (float64, Tensor[(14, 3, 11), bool], Tensor[(462), float64], float64) {
  %90 = @func_1540() /* ty=(float64,) */;
  %91 = cast(%var_3692, dtype="float64") /* ty=Tensor[(462), float64] */;
  %92 = reshape(%91, newshape=[14, 3, 11]) /* ty=Tensor[(14, 3, 11), float64] */;
  %93 = @func_561(%92) /* ty=(Tensor[(14, 3, 11), bool], Tensor[(8, 12, 5), uint64], Tensor[(120, 4), float32]) */;
  %94 = @func_2543() /* ty=(float64,) */;
  %95 = %90.0;
  %96 = %93.0;
  %97 = %94.0;
  (%95, %96, %var_3692, %97)
}

def @func_3893(%var_3883: Tensor[(15, 9, 2), float32]) -> (Tensor[(15, 9, 2), float64],) {
  %98 = cast(%var_3883, dtype="float32") /* ty=Tensor[(15, 9, 2), float32] */;
  %99 = asin(%98) /* ty=Tensor[(15, 9, 2), float32] */;
  %100 = cast(%99, dtype="float64") /* ty=Tensor[(15, 9, 2), float64] */;
  %101 = tan(%100) /* ty=Tensor[(15, 9, 2), float64] */;
  (%101,)
}

def @func_212(%var_160: Tensor[(8, 12, 5), float32], %var_171: Tensor[(8, 12, 5), float32]) -> (Tensor[(8, 12, 5), uint64], Tensor[(8, 12, 5), float32], Tensor[(8, 12, 5), float32], Tensor[(8, 12, 5), float32]) {
  %102 = cast(meta[relay.Constant][4] /* ty=Tensor[(8, 12, 5), float32] */, dtype="float32") /* ty=Tensor[(8, 12, 5), float32] */;
  %103 = acos(%102) /* ty=Tensor[(8, 12, 5), float32] */;
  %104 = cast(%var_171, dtype="uint64") /* ty=Tensor[(8, 12, 5), uint64] */;
  %105 = shape_of(%103, dtype="int32") /* ty=Tensor[(3), int32] */;
  %106 = cast(%103, dtype="uint64") /* ty=Tensor[(8, 12, 5), uint64] */;
  %107 = dyn.reshape(%104, %105, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %108 = cast(meta[relay.Constant][4] /* ty=Tensor[(8, 12, 5), float32] */, dtype="float32") /* ty=Tensor[(8, 12, 5), float32] */;
  %109 = cast(%var_160, dtype="float64") /* ty=Tensor[(8, 12, 5), float64] */;
  %110 = shape_of(%103, dtype="int32") /* ty=Tensor[(3), int32] */;
  %111 = cast(%103, dtype="float64") /* ty=Tensor[(8, 12, 5), float64] */;
  %112 = dyn.reshape(%109, %110, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %113 = floor_divide(%111, %112) /* ty=Tensor[(8, 12, 5), float64] */;
  %114 = cast(%113, dtype="float32") /* ty=Tensor[(8, 12, 5), float32] */;
  %115 = cast(meta[relay.Constant][4] /* ty=Tensor[(8, 12, 5), float32] */, dtype="float32") /* ty=Tensor[(8, 12, 5), float32] */;
  %116 = logical_xor(%106, %107) /* ty=Tensor[(8, 12, 5), uint64] */;
  %117 = log10(%108) /* ty=Tensor[(8, 12, 5), float32] */;
  %118 = tan(%114) /* ty=Tensor[(8, 12, 5), float32] */;
  %119 = sigmoid(%115) /* ty=Tensor[(8, 12, 5), float32] */;
  (%116, %117, %118, %119)
}

def @func_1007(%var_983: Tensor[(7, 8, 15), float32], %var_994: float64) -> (Tensor[(7, 8, 15), float32], Tensor[(5, 10, 7), bool], float64) {
  %120 = cast(%var_983, dtype="float32") /* ty=Tensor[(7, 8, 15), float32] */;
  %121 = cast(%var_994, dtype="float64") /* ty=float64 */;
  %122 = reshape(%121, newshape=[]) /* ty=float64 */;
  %123 = log(%120) /* ty=Tensor[(7, 8, 15), float32] */;
  %124 = @func_846(%122) /* ty=Tensor[(5, 10, 7), bool] */;
  (%123, %124, %var_994)
}

def @func_5932(%var_5918: Tensor[(15, 16, 6), uint16], %var_5919: Tensor[(15, 16, 6), uint16]) -> (Tensor[(15, 16, 6), bool],) {
  %125 = cast(%var_5919, dtype="bool") /* ty=Tensor[(15, 16, 6), bool] */;
  %126 = shape_of(%var_5918, dtype="int32") /* ty=Tensor[(3), int32] */;
  %127 = cast(%var_5918, dtype="bool") /* ty=Tensor[(15, 16, 6), bool] */;
  %128 = dyn.reshape(%125, %126, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %129 = greater_equal(%127, %128) /* ty=Tensor[(15, 16, 6), bool] */;
  (%129,)
}

def @func_2175() -> (float64,) {
  %130 = @func_1540() /* ty=(float64,) */;
  %131 = %130.0;
  (%131,)
}

def @func_4647(%var_4618: Tensor[(13, 2, 11), float64]) -> (Tensor[(13, 2, 11), float64], Tensor[(13, 2, 11), float64]) {
  %132 = @func_3626() /* ty=(Tensor[(13, 2, 11), float64], float64) */;
  %133 = %132.0;
  %134 = cast(%var_4618, dtype="float64") /* ty=Tensor[(13, 2, 11), float64] */;
  %135 = shape_of(%133, dtype="int32") /* ty=Tensor[(3), int32] */;
  %136 = cast(%133, dtype="float64") /* ty=Tensor[(13, 2, 11), float64] */;
  %137 = dyn.reshape(%134, %135, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %138 = cast(%var_4618, dtype="float64") /* ty=Tensor[(13, 2, 11), float64] */;
  %139 = floor_divide(%136, %137) /* ty=Tensor[(13, 2, 11), float64] */;
  %140 = log2(%138) /* ty=Tensor[(13, 2, 11), float64] */;
  (%139, %140)
}

def @func_1658(%var_1641: Tensor[(14, 11, 12), float64], %var_1653: Tensor[(10), int64]) -> (Tensor[(14, 11, 12), bool], Tensor[(2, 5, 6), uint8], Tensor[(10), int64], Tensor[(60), int64]) {
  %141 = @func_1499() /* ty=(Tensor[(14, 11, 12), float64], Tensor[(14, 11, 12), float64], Tensor[(5, 10, 7), bool], float64) */;
  %142 = %141.1;
  %143 = cast(%var_1641, dtype="bool") /* ty=Tensor[(14, 11, 12), bool] */;
  %144 = shape_of(%142, dtype="int32") /* ty=Tensor[(3), int32] */;
  %145 = cast(%142, dtype="bool") /* ty=Tensor[(14, 11, 12), bool] */;
  %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %147 = cast(%var_1653, dtype="int64") /* ty=Tensor[(10), int64] */;
  %148 = cast(meta[relay.Constant][5] /* ty=Tensor[(60), int64] */, dtype="int64") /* ty=Tensor[(60), int64] */;
  %149 = reshape(%147, newshape=[2, 5, 1]) /* ty=Tensor[(2, 5, 1), int64] */;
  %150 = reshape(%148, newshape=[2, 5, 6]) /* ty=Tensor[(2, 5, 6), int64] */;
  %151 = greater_equal(%145, %146) /* ty=Tensor[(14, 11, 12), bool] */;
  %152 = @func_1216(%149, %150) /* ty=Tensor[(2, 5, 6), uint8] */;
  (%151, %152, %var_1653, meta[relay.Constant][5] /* ty=Tensor[(60), int64] */)
}

def @func_2102(%var_2097: Tensor[(4, 4, 9), uint32]) -> Tensor[(4, 4, 9), uint32] {
  %153 = cast(meta[relay.Constant][6] /* ty=Tensor[(4, 4, 9), uint32] */, dtype="uint32") /* ty=Tensor[(4, 4, 9), uint32] */;
  %154 = shape_of(%var_2097, dtype="int32") /* ty=Tensor[(3), int32] */;
  %155 = cast(%var_2097, dtype="uint32") /* ty=Tensor[(4, 4, 9), uint32] */;
  %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  maximum(%155, %156) /* ty=Tensor[(4, 4, 9), uint32] */
}

def @func_2303(%var_2275: int64, %var_2276: Tensor[(1, 8, 5), int64]) -> (Tensor[(1, 8, 5), int64], Tensor[(14, 11, 12), float64]) {
  %157 = cast(%var_2275, dtype="int64") /* ty=int64 */;
  %158 = cast(%var_2276, dtype="int64") /* ty=Tensor[(1, 8, 5), int64] */;
  %159 = logical_xor(%157, %158) /* ty=Tensor[(1, 8, 5), int64] */;
  %160 = @func_1886() /* ty=Tensor[(14, 11, 12), float64] */;
  (%159, %160)
}

def @func_561(%var_534: Tensor[(14, 3, 11), float64]) -> (Tensor[(14, 3, 11), bool], Tensor[(8, 12, 5), uint64], Tensor[(120, 4), float32]) {
  %161 = cast(%var_534, dtype="float64") /* ty=Tensor[(14, 3, 11), float64] */;
  %162 = rsqrt(%161) /* ty=Tensor[(14, 3, 11), float64] */;
  %163 = cast(%var_534, dtype="bool") /* ty=Tensor[(14, 3, 11), bool] */;
  %164 = shape_of(%162, dtype="int32") /* ty=Tensor[(3), int32] */;
  %165 = cast(%162, dtype="bool") /* ty=Tensor[(14, 3, 11), bool] */;
  %166 = dyn.reshape(%163, %164, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %167 = cast(meta[relay.Constant][7] /* ty=Tensor[(120, 4), float32] */, dtype="float32") /* ty=Tensor[(120, 4), float32] */;
  %168 = cast(meta[relay.Constant][7] /* ty=Tensor[(120, 4), float32] */, dtype="float32") /* ty=Tensor[(120, 4), float32] */;
  %169 = reshape(%167, newshape=[8, 12, 5]) /* ty=Tensor[(8, 12, 5), float32] */;
  %170 = reshape(%168, newshape=[8, 12, 5]) /* ty=Tensor[(8, 12, 5), float32] */;
  %171 = @func_212(%169, %170) /* ty=(Tensor[(8, 12, 5), uint64], Tensor[(8, 12, 5), float32], Tensor[(8, 12, 5), float32], Tensor[(8, 12, 5), float32]) */;
  %172 = not_equal(%165, %166) /* ty=Tensor[(14, 3, 11), bool] */;
  %173 = %171.0;
  (%172, %173, meta[relay.Constant][7] /* ty=Tensor[(120, 4), float32] */)
}

def @func_5897(%var_5886: Tensor[(15, 10, 16), bool]) -> (Tensor[(15, 10, 16), float64],) {
  %174 = cast(meta[relay.Constant][8] /* ty=Tensor[(15, 10, 16), bool] */, dtype="bool") /* ty=Tensor[(15, 10, 16), bool] */;
  %175 = shape_of(%var_5886, dtype="int32") /* ty=Tensor[(3), int32] */;
  %176 = cast(%var_5886, dtype="bool") /* ty=Tensor[(15, 10, 16), bool] */;
  %177 = dyn.reshape(%174, %175, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %178 = logical_or(%176, %177) /* ty=Tensor[(15, 10, 16), bool] */;
  %179 = cast(%178, dtype="float64") /* ty=Tensor[(15, 10, 16), float64] */;
  %180 = log(%179) /* ty=Tensor[(15, 10, 16), float64] */;
  (%180,)
}

def @func_3214() -> (float64,) {
  %181 = @func_2175() /* ty=(float64,) */;
  %182 = %181.0;
  (%182,)
}

def @func_1789(%var_1767: Tensor[(10), int64]) -> (float64, Tensor[(2, 5, 6), uint8], Tensor[(10), int64], Tensor[(3, 20), int64]) {
  %183 = @func_1622() /* ty=(float64, Tensor[(5, 10, 7), bool], Tensor[(840), float32]) */;
  %184 = cast(%var_1767, dtype="int64") /* ty=Tensor[(10), int64] */;
  %185 = cast(meta[relay.Constant][9] /* ty=Tensor[(3, 20), int64] */, dtype="int64") /* ty=Tensor[(3, 20), int64] */;
  %186 = reshape(%184, newshape=[2, 5, 1]) /* ty=Tensor[(2, 5, 1), int64] */;
  %187 = reshape(%185, newshape=[2, 5, 6]) /* ty=Tensor[(2, 5, 6), int64] */;
  %188 = %183.0;
  %189 = @func_1216(%186, %187) /* ty=Tensor[(2, 5, 6), uint8] */;
  (%188, %189, %var_1767, meta[relay.Constant][9] /* ty=Tensor[(3, 20), int64] */)
}

def @func_6028() -> (float64,) {
  %190 = @func_2146() /* ty=float64 */;
  (%190,)
}

def @func_2022() -> (float64,) {
  %191 = @func_1540() /* ty=(float64,) */;
  %192 = %191.0;
  (%192,)
}

def @func_3581() -> (Tensor[(3, 1, 10), int16],) {
  %193 = @func_3305() /* ty=float64 */;
  %194 = cast(%193, dtype="int16") /* ty=int16 */;
  %195 = cast(meta[relay.Constant][10] /* ty=Tensor[(3, 1, 10), float64] */, dtype="int16") /* ty=Tensor[(3, 1, 10), int16] */;
  %196 = maximum(%194, %195) /* ty=Tensor[(3, 1, 10), int16] */;
  (%196,)
}

def @func_5388(%var_5367: Tensor[(77, 6), float64]) -> (float64, Tensor[(120, 4), float32], Tensor[(77, 6), float64], Tensor[(14, 11, 12), float64], Tensor[(40), int64], Tensor[(13, 11, 5), float32], Tensor[(715, 1), float32]) {
  %197 = @func_3824() /* ty=(float64, float64) */;
  %198 = cast(%var_5367, dtype="float64") /* ty=Tensor[(77, 6), float64] */;
  %199 = reshape(%198, newshape=[14, 3, 11]) /* ty=Tensor[(14, 3, 11), float64] */;
  %200 = @func_561(%199) /* ty=(Tensor[(14, 3, 11), bool], Tensor[(8, 12, 5), uint64], Tensor[(120, 4), float32]) */;
  %201 = %197.0;
  %202 = cast(%201, dtype="int64") /* ty=int64 */;
  %203 = cast(meta[relay.Constant][11] /* ty=Tensor[(40), int64] */, dtype="int64") /* ty=Tensor[(40), int64] */;
  %204 = reshape(%202, newshape=[]) /* ty=int64 */;
  %205 = reshape(%203, newshape=[1, 8, 5]) /* ty=Tensor[(1, 8, 5), int64] */;
  %206 = @func_2303(%204, %205) /* ty=(Tensor[(1, 8, 5), int64], Tensor[(14, 11, 12), float64]) */;
  %207 = cast(meta[relay.Constant][12] /* ty=Tensor[(715, 1), float32] */, dtype="float32") /* ty=Tensor[(715, 1), float32] */;
  %208 = cast(meta[relay.Constant][12] /* ty=Tensor[(715, 1), float32] */, dtype="float32") /* ty=Tensor[(715, 1), float32] */;
  %209 = reshape(%207, newshape=[13, 11, 5]) /* ty=Tensor[(13, 11, 5), float32] */;
  %210 = reshape(%208, newshape=[13, 11, 5]) /* ty=Tensor[(13, 11, 5), float32] */;
  %211 = @func_1951(%209, %210) /* ty=(Tensor[(13, 11, 5), float32],) */;
  %212 = %200.2;
  %213 = %206.1;
  %214 = %211.0;
  (%201, %212, %var_5367, %213, meta[relay.Constant][11] /* ty=Tensor[(40), int64] */, %214, meta[relay.Constant][12] /* ty=Tensor[(715, 1), float32] */)
}

def @func_1951(%var_1946: Tensor[(13, 11, 5), float32], %var_1947: Tensor[(13, 11, 5), float32]) -> (Tensor[(13, 11, 5), float32],) {
  %215 = cast(%var_1947, dtype="float32") /* ty=Tensor[(13, 11, 5), float32] */;
  %216 = shape_of(%var_1946, dtype="int32") /* ty=Tensor[(3), int32] */;
  %217 = cast(%var_1946, dtype="float32") /* ty=Tensor[(13, 11, 5), float32] */;
  %218 = dyn.reshape(%215, %216, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %219 = power(%217, %218) /* ty=Tensor[(13, 11, 5), float32] */;
  (%219,)
}

def @func_1456(%var_1439: Tensor[(10, 15, 11), uint8], %var_1440: Tensor[(10, 15, 11), uint8]) -> (Tensor[(10, 15, 11), uint8], Tensor[(10, 15, 11), float32]) {
  %220 = cast(%var_1440, dtype="uint8") /* ty=Tensor[(10, 15, 11), uint8] */;
  %221 = shape_of(%var_1439, dtype="int32") /* ty=Tensor[(3), int32] */;
  %222 = cast(%var_1439, dtype="uint8") /* ty=Tensor[(10, 15, 11), uint8] */;
  %223 = dyn.reshape(%220, %221, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %224 = cast(%var_1439, dtype="float32") /* ty=Tensor[(10, 15, 11), float32] */;
  %225 = shape_of(%var_1440, dtype="int32") /* ty=Tensor[(3), int32] */;
  %226 = cast(%var_1440, dtype="float32") /* ty=Tensor[(10, 15, 11), float32] */;
  %227 = dyn.reshape(%224, %225, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %228 = bitwise_xor(%222, %223) /* ty=Tensor[(10, 15, 11), uint8] */;
  %229 = mod(%226, %227) /* ty=Tensor[(10, 15, 11), float32] */;
  (%228, %229)
}

def @func_3351() -> Tensor[(14, 11, 12), float64] {
  %230 = @func_1672() /* ty=(Tensor[(14, 11, 12), float64],) */;
  %230.0
}

def @func_5546() -> Tensor[(5, 10, 7), float64] {
  %231 = @func_3762() /* ty=(Tensor[(5, 10, 7), bool],) */;
  %232 = %231.0;
  %233 = cast(%232, dtype="float64") /* ty=Tensor[(5, 10, 7), float64] */;
  acos(%233) /* ty=Tensor[(5, 10, 7), float64] */
}

def @func_3626() -> (Tensor[(13, 2, 11), float64], float64) {
  %234 = @func_2718() /* ty=(Tensor[(13, 2, 11), float64],) */;
  %235 = @func_3055() /* ty=(Tensor[(14, 11, 12), float64], float64, Tensor[(8, 12, 5), uint64], Tensor[(462, 1), float64], Tensor[(13, 2, 11), float64], Tensor[(26, 11), float64]) */;
  %236 = %234.0;
  %237 = %235.1;
  (%236, %237)
}

def @func_2718() -> (Tensor[(13, 2, 11), float64],) {
  %238 = cast(meta[relay.Constant][14] /* ty=Tensor[(13, 2, 11), float64] */, dtype="float64") /* ty=Tensor[(13, 2, 11), float64] */;
  %239 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(13, 2, 11), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %240 = cast(meta[relay.Constant][13] /* ty=Tensor[(13, 2, 11), float64] */, dtype="float64") /* ty=Tensor[(13, 2, 11), float64] */;
  %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %242 = mod(%240, %241) /* ty=Tensor[(13, 2, 11), float64] */;
  (%242,)
}

def @func_5668(%var_5638: Tensor[(1040), float64], %var_5641: Tensor[(462), float64], %var_5647: Tensor[(585), int16], %var_5648: float64) -> (Tensor[(14, 11, 12), uint64], Tensor[(1040), float64], Tensor[(462), float64], Tensor[(462), float64], Tensor[(3, 1, 10), int16], Tensor[(5, 10, 7), bool], Tensor[(585), int16], float64, Tensor[(3, 1, 10), int16], Tensor[(5, 13, 16), float64]) {
  %243 = @func_4172() /* ty=(Tensor[(14, 11, 12), float64], Tensor[(5, 10, 7), bool], Tensor[(14, 11, 12), float32]) */;
  %244 = %243.0;
  %245 = cast(meta[relay.Constant][15] /* ty=Tensor[(14, 11, 12), float64] */, dtype="uint64") /* ty=Tensor[(14, 11, 12), uint64] */;
  %246 = shape_of(%244, dtype="int32") /* ty=Tensor[(3), int32] */;
  %247 = cast(%244, dtype="uint64") /* ty=Tensor[(14, 11, 12), uint64] */;
  %248 = dyn.reshape(%245, %246, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %249 = cast(%var_5641, dtype="float64") /* ty=Tensor[(462), float64] */;
  %250 = reshape(%249, newshape=[462]) /* ty=Tensor[(462), float64] */;
  %251 = @func_3711(%250) /* ty=(float64, Tensor[(14, 3, 11), bool], Tensor[(462), float64], float64) */;
  %252 = @func_3581() /* ty=(Tensor[(3, 1, 10), int16],) */;
  %253 = cast(%var_5647, dtype="int16") /* ty=Tensor[(585), int16] */;
  %254 = cast(%var_5647, dtype="int16") /* ty=Tensor[(585), int16] */;
  %255 = cast(%var_5648, dtype="float64") /* ty=float64 */;
  %256 = reshape(%253, newshape=[13, 5, 9]) /* ty=Tensor[(13, 5, 9), int16] */;
  %257 = reshape(%254, newshape=[13, 5, 9]) /* ty=Tensor[(13, 5, 9), int16] */;
  %258 = reshape(%255, newshape=[]) /* ty=float64 */;
  %259 = @func_4210(%256, %257, %258) /* ty=(Tensor[(13, 5, 9), int16], Tensor[(5, 10, 7), bool], float64, Tensor[(14, 11, 12), float64]) */;
  %260 = @func_3581() /* ty=(Tensor[(3, 1, 10), int16],) */;
  %261 = cast(%var_5638, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %262 = reshape(%261, newshape=[5, 13, 16]) /* ty=Tensor[(5, 13, 16), float64] */;
  %263 = @func_4113(%262) /* ty=(Tensor[(14, 3, 11), bool], Tensor[(462), float64], Tensor[(5, 13, 16), uint32], Tensor[(5, 13, 16), int16]) */;
  %264 = %263.3;
  %265 = cast(%264, dtype="float64") /* ty=Tensor[(5, 13, 16), float64] */;
  %266 = left_shift(%247, %248) /* ty=Tensor[(14, 11, 12), uint64] */;
  %267 = %251.2;
  %268 = %252.0;
  %269 = %259.1;
  %270 = %260.0;
  %271 = asin(%265) /* ty=Tensor[(5, 13, 16), float64] */;
  (%266, %var_5638, %267, %var_5641, %268, %269, %var_5647, %var_5648, %270, %271)
}

def @func_3762() -> (Tensor[(5, 10, 7), bool],) {
  %272 = @func_1499() /* ty=(Tensor[(14, 11, 12), float64], Tensor[(14, 11, 12), float64], Tensor[(5, 10, 7), bool], float64) */;
  %273 = %272.2;
  (%273,)
}

def @func_2084(%var_2040: Tensor[(14, 16, 3), int64], %var_2041: Tensor[(14, 16, 3), int64]) -> (Tensor[(14, 16, 3), bool], Tensor[(14, 11, 12), float64], Tensor[(14, 16, 3), int64]) {
  %274 = cast(%var_2041, dtype="int64") /* ty=Tensor[(14, 16, 3), int64] */;
  %275 = shape_of(%var_2040, dtype="int32") /* ty=Tensor[(3), int32] */;
  %276 = cast(%var_2040, dtype="int64") /* ty=Tensor[(14, 16, 3), int64] */;
  %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %278 = right_shift(%276, %277) /* ty=Tensor[(14, 16, 3), int64] */;
  %279 = cast(%278, dtype="bool") /* ty=Tensor[(14, 16, 3), bool] */;
  %280 = shape_of(%var_2040, dtype="int32") /* ty=Tensor[(3), int32] */;
  %281 = cast(%var_2040, dtype="bool") /* ty=Tensor[(14, 16, 3), bool] */;
  %282 = dyn.reshape(%279, %280, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %283 = @func_1681() /* ty=(Tensor[(14, 11, 12), float64],) */;
  %284 = cast(%278, dtype="float64") /* ty=Tensor[(14, 16, 3), float64] */;
  %285 = shape_of(%var_2041, dtype="int32") /* ty=Tensor[(3), int32] */;
  %286 = cast(%var_2041, dtype="float64") /* ty=Tensor[(14, 16, 3), float64] */;
  %287 = dyn.reshape(%284, %285, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %288 = power(%286, %287) /* ty=Tensor[(14, 16, 3), float64] */;
  %289 = cast(%288, dtype="float64") /* ty=Tensor[(14, 16, 3), float64] */;
  %290 = atan(%289) /* ty=Tensor[(14, 16, 3), float64] */;
  %291 = cast(%288, dtype="int64") /* ty=Tensor[(14, 16, 3), int64] */;
  %292 = shape_of(%290, dtype="int32") /* ty=Tensor[(3), int32] */;
  %293 = cast(%290, dtype="int64") /* ty=Tensor[(14, 16, 3), int64] */;
  %294 = dyn.reshape(%291, %292, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %295 = logical_and(%281, %282) /* ty=Tensor[(14, 16, 3), bool] */;
  %296 = %283.0;
  %297 = left_shift(%293, %294) /* ty=Tensor[(14, 16, 3), int64] */;
  (%295, %296, %297)
}

def @func_4187() -> (float64,) {
  %298 = @func_2022() /* ty=(float64,) */;
  %299 = %298.0;
  (%299,)
}

def @func_4384() -> (Tensor[(5, 10, 7), bool],) {
  %300 = @func_4172() /* ty=(Tensor[(14, 11, 12), float64], Tensor[(5, 10, 7), bool], Tensor[(14, 11, 12), float32]) */;
  %301 = %300.1;
  (%301,)
}

def @func_3684() -> (Tensor[(5, 10, 7), bool], Tensor[(5, 10, 7), bool], Tensor[(14, 11, 12), float32]) {
  %302 = @func_1886() /* ty=Tensor[(14, 11, 12), float64] */;
  %303 = cast(%302, dtype="float32") /* ty=Tensor[(14, 11, 12), float32] */;
  %304 = @func_2012() /* ty=Tensor[(5, 10, 7), bool] */;
  %305 = @func_2012() /* ty=Tensor[(5, 10, 7), bool] */;
  %306 = cos(%303) /* ty=Tensor[(14, 11, 12), float32] */;
  (%304, %305, %306)
}

def @func_2543() -> (float64,) {
  %307 = @func_2146() /* ty=float64 */;
  (%307,)
}

def @func_3512() -> (float64,) {
  %308 = @func_2175() /* ty=(float64,) */;
  %309 = %308.0;
  (%309,)
}

def @func_1681() -> (Tensor[(14, 11, 12), float64],) {
  %310 = @func_1672() /* ty=(Tensor[(14, 11, 12), float64],) */;
  %311 = %310.0;
  (%311,)
}

def @func_846(%var_838: float64) -> Tensor[(5, 10, 7), bool] {
  %312 = cast(%var_838, dtype="float64") /* ty=float64 */;
  %313 = cast(meta[relay.Constant][16] /* ty=Tensor[(5, 10, 7), float64] */, dtype="float64") /* ty=Tensor[(5, 10, 7), float64] */;
  %314 = add(%312, %313) /* ty=Tensor[(5, 10, 7), float64] */;
  %315 = cast(%314, dtype="bool") /* ty=Tensor[(5, 10, 7), bool] */;
  %316 = cast(%var_838, dtype="bool") /* ty=bool */;
  not_equal(%315, %316) /* ty=Tensor[(5, 10, 7), bool] */
}

def @func_251(%var_226: Tensor[(3, 6, 10), float32], %var_227: Tensor[(3, 6, 10), float32]) -> (Tensor[(3, 6, 10), float32], Tensor[(8, 12, 5), uint64], Tensor[(40, 12), float32], Tensor[(3, 6, 10), float32]) {
  %317 = cast(%var_227, dtype="float32") /* ty=Tensor[(3, 6, 10), float32] */;
  %318 = shape_of(%var_226, dtype="int32") /* ty=Tensor[(3), int32] */;
  %319 = cast(%var_226, dtype="float32") /* ty=Tensor[(3, 6, 10), float32] */;
  %320 = dyn.reshape(%317, %318, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %321 = cast(meta[relay.Constant][17] /* ty=Tensor[(40, 12), float32] */, dtype="float32") /* ty=Tensor[(40, 12), float32] */;
  %322 = cast(meta[relay.Constant][17] /* ty=Tensor[(40, 12), float32] */, dtype="float32") /* ty=Tensor[(40, 12), float32] */;
  %323 = reshape(%321, newshape=[8, 12, 5]) /* ty=Tensor[(8, 12, 5), float32] */;
  %324 = reshape(%322, newshape=[8, 12, 5]) /* ty=Tensor[(8, 12, 5), float32] */;
  %325 = @func_212(%323, %324) /* ty=(Tensor[(8, 12, 5), uint64], Tensor[(8, 12, 5), float32], Tensor[(8, 12, 5), float32], Tensor[(8, 12, 5), float32]) */;
  %326 = cast(%var_226, dtype="float32") /* ty=Tensor[(3, 6, 10), float32] */;
  %327 = power(%319, %320) /* ty=Tensor[(3, 6, 10), float32] */;
  %328 = %325.0;
  %329 = sigmoid(%326) /* ty=Tensor[(3, 6, 10), float32] */;
  (%327, %328, meta[relay.Constant][17] /* ty=Tensor[(40, 12), float32] */, %329)
}

def @func_4739() -> (float64, Tensor[(14, 11, 12), float64], Tensor[(672), int64]) {
  %330 = @func_3384() /* ty=(float64,) */;
  %331 = cast(meta[relay.Constant][18] /* ty=Tensor[(672), int64] */, dtype="int64") /* ty=Tensor[(672), int64] */;
  %332 = cast(meta[relay.Constant][18] /* ty=Tensor[(672), int64] */, dtype="int64") /* ty=Tensor[(672), int64] */;
  %333 = reshape(%331, newshape=[14, 16, 3]) /* ty=Tensor[(14, 16, 3), int64] */;
  %334 = reshape(%332, newshape=[14, 16, 3]) /* ty=Tensor[(14, 16, 3), int64] */;
  %335 = @func_2084(%333, %334) /* ty=(Tensor[(14, 16, 3), bool], Tensor[(14, 11, 12), float64], Tensor[(14, 16, 3), int64]) */;
  %336 = %330.0;
  %337 = %335.1;
  (%336, %337, meta[relay.Constant][18] /* ty=Tensor[(672), int64] */)
}

def @func_1622() -> (float64, Tensor[(5, 10, 7), bool], Tensor[(840), float32]) {
  %338 = @func_1540() /* ty=(float64,) */;
  %339 = cast(meta[relay.Constant][19] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %340 = %338.0;
  %341 = cast(%340, dtype="float64") /* ty=float64 */;
  %342 = reshape(%339, newshape=[7, 8, 15]) /* ty=Tensor[(7, 8, 15), float32] */;
  %343 = reshape(%341, newshape=[]) /* ty=float64 */;
  %344 = @func_1007(%342, %343) /* ty=(Tensor[(7, 8, 15), float32], Tensor[(5, 10, 7), bool], float64) */;
  %345 = %344.1;
  (%340, %345, meta[relay.Constant][19] /* ty=Tensor[(840), float32] */)
}

def @func_4981() -> (Tensor[(6, 6, 8), uint16],) {
  %346 = cast(meta[relay.Constant][21] /* ty=Tensor[(6, 6, 8), uint16] */, dtype="uint16") /* ty=Tensor[(6, 6, 8), uint16] */;
  %347 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(6, 6, 8), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %348 = cast(meta[relay.Constant][20] /* ty=Tensor[(6, 6, 8), uint16] */, dtype="uint16") /* ty=Tensor[(6, 6, 8), uint16] */;
  %349 = dyn.reshape(%346, %347, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %350 = bitwise_xor(%348, %349) /* ty=Tensor[(6, 6, 8), uint16] */;
  (%350,)
}

def @func_4910() -> (float64, float64, Tensor[(14, 11, 12), float64], float64, Tensor[(13, 10, 2), int32], Tensor[(260), int32], Tensor[(14, 11, 12), float64], Tensor[(40), int64]) {
  %351 = @func_4437() /* ty=(Tensor[(5, 10, 7), bool], Tensor[(14, 11, 12), float64], float64) */;
  %352 = @func_3626() /* ty=(Tensor[(13, 2, 11), float64], float64) */;
  %353 = @func_3977() /* ty=(float64,) */;
  %354 = cast(meta[relay.Constant][22] /* ty=Tensor[(260), int32] */, dtype="int32") /* ty=Tensor[(260), int32] */;
  %355 = cast(meta[relay.Constant][22] /* ty=Tensor[(260), int32] */, dtype="int32") /* ty=Tensor[(260), int32] */;
  %356 = reshape(%354, newshape=[13, 10, 2]) /* ty=Tensor[(13, 10, 2), int32] */;
  %357 = reshape(%355, newshape=[13, 10, 2]) /* ty=Tensor[(13, 10, 2), int32] */;
  %358 = @func_3850(%356, %357) /* ty=(Tensor[(13, 10, 2), int32],) */;
  %359 = %351.2;
  %360 = cast(%359, dtype="int64") /* ty=int64 */;
  %361 = cast(meta[relay.Constant][23] /* ty=Tensor[(40), int64] */, dtype="int64") /* ty=Tensor[(40), int64] */;
  %362 = reshape(%360, newshape=[]) /* ty=int64 */;
  %363 = reshape(%361, newshape=[1, 8, 5]) /* ty=Tensor[(1, 8, 5), int64] */;
  %364 = @func_2303(%362, %363) /* ty=(Tensor[(1, 8, 5), int64], Tensor[(14, 11, 12), float64]) */;
  %365 = %352.1;
  %366 = @func_1886() /* ty=Tensor[(14, 11, 12), float64] */;
  %367 = %353.0;
  %368 = %358.0;
  %369 = %364.1;
  (%359, %365, %366, %367, %368, meta[relay.Constant][22] /* ty=Tensor[(260), int32] */, %369, meta[relay.Constant][23] /* ty=Tensor[(40), int64] */)
}

def @func_4172() -> (Tensor[(14, 11, 12), float64], Tensor[(5, 10, 7), bool], Tensor[(14, 11, 12), float32]) {
  %370 = @func_1499() /* ty=(Tensor[(14, 11, 12), float64], Tensor[(14, 11, 12), float64], Tensor[(5, 10, 7), bool], float64) */;
  %371 = @func_3684() /* ty=(Tensor[(5, 10, 7), bool], Tensor[(5, 10, 7), bool], Tensor[(14, 11, 12), float32]) */;
  %372 = %370.0;
  %373 = @func_2803() /* ty=Tensor[(5, 10, 7), bool] */;
  %374 = %371.2;
  (%372, %373, %374)
}

def @func_2416() -> float64 {
  %375 = @func_2022() /* ty=(float64,) */;
  %375.0
}

def @func_5161(%var_5118: Tensor[(15, 11, 11), int32], %var_5155: Tensor[(15, 11, 11), int32]) -> (Tensor[(15, 11, 11), int32], Tensor[(15, 11, 11), float64]) {
  %376 = cast(meta[relay.Constant][24] /* ty=Tensor[(15, 11, 11), int32] */, dtype="int32") /* ty=Tensor[(15, 11, 11), int32] */;
  %377 = shape_of(%var_5118, dtype="int32") /* ty=Tensor[(3), int32] */;
  %378 = cast(%var_5118, dtype="int32") /* ty=Tensor[(15, 11, 11), int32] */;
  %379 = dyn.reshape(%376, %377, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %380 = cast(%var_5155, dtype="float64") /* ty=Tensor[(15, 11, 11), float64] */;
  %381 = shape_of(%var_5118, dtype="int32") /* ty=Tensor[(3), int32] */;
  %382 = cast(%var_5118, dtype="float64") /* ty=Tensor[(15, 11, 11), float64] */;
  %383 = dyn.reshape(%380, %381, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %384 = multiply(%378, %379) /* ty=Tensor[(15, 11, 11), int32] */;
  %385 = mod(%382, %383) /* ty=Tensor[(15, 11, 11), float64] */;
  (%384, %385)
}

def @func_6257() -> (Tensor[(5, 10, 7), float64], Tensor[(5, 10, 7), float64]) {
  %386 = @func_6011() /* ty=(Tensor[(5, 10, 7), float64],) */;
  %387 = @func_2803() /* ty=Tensor[(5, 10, 7), bool] */;
  %388 = cast(%387, dtype="float64") /* ty=Tensor[(5, 10, 7), float64] */;
  %389 = %386.0;
  %390 = rsqrt(%388) /* ty=Tensor[(5, 10, 7), float64] */;
  (%389, %390)
}

def @func_4437() -> (Tensor[(5, 10, 7), bool], Tensor[(14, 11, 12), float64], float64) {
  %391 = @func_3684() /* ty=(Tensor[(5, 10, 7), bool], Tensor[(5, 10, 7), bool], Tensor[(14, 11, 12), float32]) */;
  %392 = @func_1672() /* ty=(Tensor[(14, 11, 12), float64],) */;
  %393 = @func_3214() /* ty=(float64,) */;
  %394 = %391.0;
  %395 = %392.0;
  %396 = %393.0;
  (%394, %395, %396)
}

def @func_4825(%var_4815: Tensor[(270), float32]) -> (float64, Tensor[(15, 9, 2), float64], Tensor[(270), float32]) {
  %397 = @func_4187() /* ty=(float64,) */;
  %398 = cast(%var_4815, dtype="float32") /* ty=Tensor[(270), float32] */;
  %399 = reshape(%398, newshape=[15, 9, 2]) /* ty=Tensor[(15, 9, 2), float32] */;
  %400 = @func_3893(%399) /* ty=(Tensor[(15, 9, 2), float64],) */;
  %401 = %397.0;
  %402 = %400.0;
  (%401, %402, %var_4815)
}

def @func_2847(%var_2834: Tensor[(13, 2, 11), float64]) -> (Tensor[(13, 2, 11), float64],) {
  %403 = @func_2718() /* ty=(Tensor[(13, 2, 11), float64],) */;
  %404 = %403.0;
  %405 = cast(%var_2834, dtype="bool") /* ty=Tensor[(13, 2, 11), bool] */;
  %406 = shape_of(%404, dtype="int32") /* ty=Tensor[(3), int32] */;
  %407 = cast(%404, dtype="bool") /* ty=Tensor[(13, 2, 11), bool] */;
  %408 = dyn.reshape(%405, %406, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %409 = logical_or(%407, %408) /* ty=Tensor[(13, 2, 11), bool] */;
  %410 = cast(%409, dtype="float64") /* ty=Tensor[(13, 2, 11), float64] */;
  %411 = log(%410) /* ty=Tensor[(13, 2, 11), float64] */;
  (%411,)
}

def @func_2573(%var_2548: Tensor[(9, 1, 12), float32]) -> (Tensor[(9, 1, 12), float32], Tensor[(5, 10, 7), bool]) {
  %412 = cast(%var_2548, dtype="float32") /* ty=Tensor[(9, 1, 12), float32] */;
  %413 = asinh(%412) /* ty=Tensor[(9, 1, 12), float32] */;
  %414 = @func_2012() /* ty=Tensor[(5, 10, 7), bool] */;
  (%413, %414)
}

def @func_1540() -> (float64,) {
  %415 = @func_1499() /* ty=(Tensor[(14, 11, 12), float64], Tensor[(14, 11, 12), float64], Tensor[(5, 10, 7), bool], float64) */;
  %416 = %415.3;
  (%416,)
}

def @func_3977() -> (float64,) {
  %417 = @func_2543() /* ty=(float64,) */;
  %418 = %417.0;
  (%418,)
}

def @func_4210(%var_4198: Tensor[(13, 5, 9), int16], %var_4199: Tensor[(13, 5, 9), int16], %var_4204: float64) -> (Tensor[(13, 5, 9), int16], Tensor[(5, 10, 7), bool], float64, Tensor[(14, 11, 12), float64]) {
  %419 = cast(%var_4199, dtype="int16") /* ty=Tensor[(13, 5, 9), int16] */;
  %420 = shape_of(%var_4198, dtype="int32") /* ty=Tensor[(3), int32] */;
  %421 = cast(%var_4198, dtype="int16") /* ty=Tensor[(13, 5, 9), int16] */;
  %422 = dyn.reshape(%419, %420, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %423 = cast(%var_4204, dtype="float64") /* ty=float64 */;
  %424 = reshape(%423, newshape=[]) /* ty=float64 */;
  %425 = @func_1499() /* ty=(Tensor[(14, 11, 12), float64], Tensor[(14, 11, 12), float64], Tensor[(5, 10, 7), bool], float64) */;
  %426 = left_shift(%421, %422) /* ty=Tensor[(13, 5, 9), int16] */;
  %427 = @func_846(%424) /* ty=Tensor[(5, 10, 7), bool] */;
  %428 = %425.1;
  (%426, %427, %var_4204, %428)
}

def @func_1030(%var_1025: int64, %var_1026: Tensor[(12, 2, 13), int64]) -> (Tensor[(12, 2, 13), int64],) {
  %429 = cast(%var_1025, dtype="int64") /* ty=int64 */;
  %430 = cast(%var_1026, dtype="int64") /* ty=Tensor[(12, 2, 13), int64] */;
  %431 = bitwise_xor(%429, %430) /* ty=Tensor[(12, 2, 13), int64] */;
  (%431,)
}

def @func_4509() -> float64 {
  %432 = @func_3214() /* ty=(float64,) */;
  %432.0
}

def @func_3384() -> (float64,) {
  %433 = @func_1540() /* ty=(float64,) */;
  %434 = %433.0;
  (%434,)
}

def @func_5110(%var_5051: Tensor[(13, 10), float32], %var_5073: Tensor[(1040), float64], %var_5097: Tensor[(180, 2), float64]) -> (Tensor[(13, 10), float32], float64, Tensor[(5, 13, 16), uint32], Tensor[(1040), float64], Tensor[(120, 4), float32], Tensor[(462), float64], Tensor[(5, 10, 7), bool], Tensor[(10, 9, 4), float64], Tensor[(180, 2), float64]) {
  %435 = cast(%var_5051, dtype="float32") /* ty=Tensor[(13, 10), float32] */;
  %436 = @func_1540() /* ty=(float64,) */;
  %437 = cast(%var_5073, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %438 = reshape(%437, newshape=[5, 13, 16]) /* ty=Tensor[(5, 13, 16), float64] */;
  %439 = @func_4113(%438) /* ty=(Tensor[(14, 3, 11), bool], Tensor[(462), float64], Tensor[(5, 13, 16), uint32], Tensor[(5, 13, 16), int16]) */;
  %440 = cast(meta[relay.Constant][25] /* ty=Tensor[(462), float64] */, dtype="float64") /* ty=Tensor[(462), float64] */;
  %441 = reshape(%440, newshape=[14, 3, 11]) /* ty=Tensor[(14, 3, 11), float64] */;
  %442 = @func_561(%441) /* ty=(Tensor[(14, 3, 11), bool], Tensor[(8, 12, 5), uint64], Tensor[(120, 4), float32]) */;
  %443 = @func_1499() /* ty=(Tensor[(14, 11, 12), float64], Tensor[(14, 11, 12), float64], Tensor[(5, 10, 7), bool], float64) */;
  %444 = cast(%var_5097, dtype="float64") /* ty=Tensor[(180, 2), float64] */;
  %445 = reshape(%444, newshape=[10, 9, 4]) /* ty=Tensor[(10, 9, 4), float64] */;
  %446 = @func_1101(%445) /* ty=(Tensor[(10, 9, 4), float64], Tensor[(10, 9, 4), float32]) */;
  %447 = exp(%435) /* ty=Tensor[(13, 10), float32] */;
  %448 = %436.0;
  %449 = %439.2;
  %450 = %442.2;
  %451 = %443.2;
  %452 = %446.0;
  (%447, %448, %449, %var_5073, %450, meta[relay.Constant][25] /* ty=Tensor[(462), float64] */, %451, %452, %var_5097)
}

def @func_1849(%var_1806: Tensor[(14, 11, 12), float64], %var_1842: Tensor[(14, 11, 12), float32]) -> (Tensor[(14, 11, 12), float64], Tensor[(14, 11, 12), int64]) {
  %453 = @func_1681() /* ty=(Tensor[(14, 11, 12), float64],) */;
  %454 = %453.0;
  %455 = cast(%var_1806, dtype="float32") /* ty=Tensor[(14, 11, 12), float32] */;
  %456 = shape_of(%454, dtype="int32") /* ty=Tensor[(3), int32] */;
  %457 = cast(%454, dtype="float32") /* ty=Tensor[(14, 11, 12), float32] */;
  %458 = dyn.reshape(%455, %456, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %459 = divide(%457, %458) /* ty=Tensor[(14, 11, 12), float32] */;
  %460 = cast(%459, dtype="float64") /* ty=Tensor[(14, 11, 12), float64] */;
  %461 = atan(%460) /* ty=Tensor[(14, 11, 12), float64] */;
  %462 = cast(%var_1806, dtype="float64") /* ty=Tensor[(14, 11, 12), float64] */;
  %463 = shape_of(%461, dtype="int32") /* ty=Tensor[(3), int32] */;
  %464 = cast(%461, dtype="float64") /* ty=Tensor[(14, 11, 12), float64] */;
  %465 = dyn.reshape(%462, %463, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %466 = cast(%461, dtype="float32") /* ty=Tensor[(14, 11, 12), float32] */;
  %467 = tan(%466) /* ty=Tensor[(14, 11, 12), float32] */;
  %468 = cast(%var_1842, dtype="int64") /* ty=Tensor[(14, 11, 12), int64] */;
  %469 = shape_of(%467, dtype="int32") /* ty=Tensor[(3), int32] */;
  %470 = cast(%467, dtype="int64") /* ty=Tensor[(14, 11, 12), int64] */;
  %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %472 = floor_mod(%464, %465) /* ty=Tensor[(14, 11, 12), float64] */;
  %473 = bitwise_and(%470, %471) /* ty=Tensor[(14, 11, 12), int64] */;
  (%472, %473)
}

def @func_2658(%var_2631: Tensor[(14, 11, 12), float64]) -> Tensor[(14, 11, 12), uint64] {
  %474 = @func_1672() /* ty=(Tensor[(14, 11, 12), float64],) */;
  %475 = %474.0;
  %476 = cast(%var_2631, dtype="uint64") /* ty=Tensor[(14, 11, 12), uint64] */;
  %477 = shape_of(%475, dtype="int32") /* ty=Tensor[(3), int32] */;
  %478 = cast(%475, dtype="uint64") /* ty=Tensor[(14, 11, 12), uint64] */;
  %479 = dyn.reshape(%476, %477, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  minimum(%478, %479) /* ty=Tensor[(14, 11, 12), uint64] */
}

def @func_5191(%var_5180: Tensor[(13, 12, 2), int32], %var_5181: Tensor[(13, 12, 2), int32]) -> Tensor[(13, 12, 2), bool] {
  %480 = cast(%var_5181, dtype="bool") /* ty=Tensor[(13, 12, 2), bool] */;
  %481 = shape_of(%var_5180, dtype="int32") /* ty=Tensor[(3), int32] */;
  %482 = cast(%var_5180, dtype="bool") /* ty=Tensor[(13, 12, 2), bool] */;
  %483 = dyn.reshape(%480, %481, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%482, %483) /* ty=Tensor[(13, 12, 2), bool] */
}

def @func_5781() -> (Tensor[(14, 11, 12), float32], Tensor[(13, 2, 11), float64], Tensor[(2, 5, 6), uint8], Tensor[(10), int64], Tensor[(286), float64], Tensor[(286), float64]) {
  %484 = cast(meta[relay.Constant][26] /* ty=Tensor[(286), float64] */, dtype="float64") /* ty=Tensor[(286), float64] */;
  %485 = reshape(%484, newshape=[13, 2, 11]) /* ty=Tensor[(13, 2, 11), float64] */;
  %486 = @func_2847(%485) /* ty=(Tensor[(13, 2, 11), float64],) */;
  %487 = cast(meta[relay.Constant][27] /* ty=Tensor[(10), int64] */, dtype="int64") /* ty=Tensor[(10), int64] */;
  %488 = reshape(%487, newshape=[10]) /* ty=Tensor[(10), int64] */;
  %489 = @func_1789(%488) /* ty=(float64, Tensor[(2, 5, 6), uint8], Tensor[(10), int64], Tensor[(3, 20), int64]) */;
  %490 = cast(meta[relay.Constant][26] /* ty=Tensor[(286), float64] */, dtype="float64") /* ty=Tensor[(286), float64] */;
  %491 = @func_2416() /* ty=float64 */;
  %492 = cast(meta[relay.Constant][26] /* ty=Tensor[(286), float64] */, dtype="float64") /* ty=Tensor[(286), float64] */;
  %493 = cast(%491, dtype="float64") /* ty=float64 */;
  %494 = @func_2469() /* ty=Tensor[(14, 11, 12), float32] */;
  %495 = %486.0;
  %496 = %489.1;
  %497 = acosh(%490) /* ty=Tensor[(286), float64] */;
  %498 = multiply(%492, %493) /* ty=Tensor[(286), float64] */;
  (%494, %495, %496, meta[relay.Constant][27] /* ty=Tensor[(10), int64] */, %497, %498)
}

def @func_4054(%var_4027: Tensor[(5, 11, 16), uint32]) -> (Tensor[(5, 11, 16), uint32], Tensor[(462), float64], Tensor[(1, 462), float64]) {
  %499 = cast(meta[relay.Constant][28] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %500 = cast(%var_4027, dtype="uint32") /* ty=Tensor[(5, 11, 16), uint32] */;
  %501 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 462), float64] */, dtype="float64") /* ty=Tensor[(1, 462), float64] */;
  %502 = reshape(%501, newshape=[462]) /* ty=Tensor[(462), float64] */;
  %503 = @func_3711(%502) /* ty=(float64, Tensor[(14, 3, 11), bool], Tensor[(462), float64], float64) */;
  %504 = bitwise_or(%499, %500) /* ty=Tensor[(5, 11, 16), uint32] */;
  %505 = %503.2;
  (%504, %505, meta[relay.Constant][29] /* ty=Tensor[(1, 462), float64] */)
}

def @func_6305(%var_6289: Tensor[(26, 3), uint16], %var_6298: Tensor[(60), int8]) -> (float64, Tensor[(5, 10, 7), bool], Tensor[(26, 3), uint16], Tensor[(2, 6, 5), float32], Tensor[(60), int8]) {
  %506 = @func_3227() /* ty=(float64,) */;
  %507 = %506.0;
  %508 = cast(%507, dtype="uint16") /* ty=uint16 */;
  %509 = cast(%var_6289, dtype="uint16") /* ty=Tensor[(26, 3), uint16] */;
  %510 = reshape(%508, newshape=[]) /* ty=uint16 */;
  %511 = reshape(%509, newshape=[3, 2, 13]) /* ty=Tensor[(3, 2, 13), uint16] */;
  %512 = @func_2944(%510, %511) /* ty=(Tensor[(3, 2, 13), uint16], Tensor[(5, 10, 7), bool], Tensor[(12, 70), float32], Tensor[(3, 2, 13), float64]) */;
  %513 = cast(%var_6298, dtype="int8") /* ty=Tensor[(60), int8] */;
  %514 = cast(%var_6298, dtype="float32") /* ty=Tensor[(60), float32] */;
  %515 = reshape(%513, newshape=[2, 6, 5]) /* ty=Tensor[(2, 6, 5), int8] */;
  %516 = reshape(%514, newshape=[2, 6, 5]) /* ty=Tensor[(2, 6, 5), float32] */;
  %517 = @func_6175(%515, %516) /* ty=(Tensor[(2, 6, 5), bool], Tensor[(5, 10, 7), bool], Tensor[(2, 6, 5), float32], Tensor[(2, 6, 5), uint8], Tensor[(2, 6, 5), float32]) */;
  %518 = %512.1;
  %519 = %517.4;
  (%507, %518, %var_6289, %519, %var_6298)
}

def @func_2803() -> Tensor[(5, 10, 7), bool] {
  %520 = @func_2393() /* ty=(Tensor[(5, 10, 7), bool], Tensor[(14, 11, 12), float64]) */;
  %520.0
}

def @func_2469() -> Tensor[(14, 11, 12), float32] {
  %521 = @func_1886() /* ty=Tensor[(14, 11, 12), float64] */;
  %522 = cast(%521, dtype="float32") /* ty=Tensor[(14, 11, 12), float32] */;
  asin(%522) /* ty=Tensor[(14, 11, 12), float32] */
}

def @func_3850(%var_3844: Tensor[(13, 10, 2), int32], %var_3845: Tensor[(13, 10, 2), int32]) -> (Tensor[(13, 10, 2), int32],) {
  %523 = cast(%var_3845, dtype="int32") /* ty=Tensor[(13, 10, 2), int32] */;
  %524 = shape_of(%var_3844, dtype="int32") /* ty=Tensor[(3), int32] */;
  %525 = cast(%var_3844, dtype="int32") /* ty=Tensor[(13, 10, 2), int32] */;
  %526 = dyn.reshape(%523, %524, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %527 = subtract(%525, %526) /* ty=Tensor[(13, 10, 2), int32] */;
  (%527,)
}

def @func_4607(%var_4602: Tensor[(12, 2, 1), float64]) -> (Tensor[(12, 2, 1), bool],) {
  %528 = @func_3384() /* ty=(float64,) */;
  %529 = %528.0;
  %530 = cast(%529, dtype="bool") /* ty=bool */;
  %531 = cast(%var_4602, dtype="bool") /* ty=Tensor[(12, 2, 1), bool] */;
  %532 = logical_and(%530, %531) /* ty=Tensor[(12, 2, 1), bool] */;
  (%532,)
}

def @func_1359(%var_1354: Tensor[(4, 5, 12), float32]) -> (Tensor[(4, 5, 12), float32], Tensor[(4, 5, 12), float32]) {
  %533 = cast(%var_1354, dtype="float32") /* ty=Tensor[(4, 5, 12), float32] */;
  %534 = cast(%var_1354, dtype="float32") /* ty=Tensor[(4, 5, 12), float32] */;
  %535 = asin(%533) /* ty=Tensor[(4, 5, 12), float32] */;
  %536 = erf(%534) /* ty=Tensor[(4, 5, 12), float32] */;
  (%535, %536)
}

def @func_5325(%var_5288: Tensor[(5, 3, 13), float64], %var_5302: Tensor[(5, 3, 13), float64], %var_5318: Tensor[(5, 3, 13), float64]) -> (Tensor[(5, 3, 13), uint8], Tensor[(13, 2, 11), float64], Tensor[(286), float64], Tensor[(14, 11, 12), float32], Tensor[(5, 3, 13), bool], Tensor[(10, 9, 4), float64], Tensor[(360), float64]) {
  %537 = cast(%var_5288, dtype="float64") /* ty=Tensor[(5, 3, 13), float64] */;
  %538 = sinh(%537) /* ty=Tensor[(5, 3, 13), float64] */;
  %539 = cast(%var_5302, dtype="uint8") /* ty=Tensor[(5, 3, 13), uint8] */;
  %540 = shape_of(%538, dtype="int32") /* ty=Tensor[(3), int32] */;
  %541 = cast(%538, dtype="uint8") /* ty=Tensor[(5, 3, 13), uint8] */;
  %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %543 = cast(meta[relay.Constant][30] /* ty=Tensor[(286), float64] */, dtype="float64") /* ty=Tensor[(286), float64] */;
  %544 = reshape(%543, newshape=[13, 2, 11]) /* ty=Tensor[(13, 2, 11), float64] */;
  %545 = @func_2847(%544) /* ty=(Tensor[(13, 2, 11), float64],) */;
  %546 = cast(%var_5318, dtype="bool") /* ty=Tensor[(5, 3, 13), bool] */;
  %547 = shape_of(%538, dtype="int32") /* ty=Tensor[(3), int32] */;
  %548 = cast(%538, dtype="bool") /* ty=Tensor[(5, 3, 13), bool] */;
  %549 = dyn.reshape(%546, %547, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %550 = cast(meta[relay.Constant][31] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %551 = reshape(%550, newshape=[10, 9, 4]) /* ty=Tensor[(10, 9, 4), float64] */;
  %552 = @func_1101(%551) /* ty=(Tensor[(10, 9, 4), float64], Tensor[(10, 9, 4), float32]) */;
  %553 = bitwise_or(%541, %542) /* ty=Tensor[(5, 3, 13), uint8] */;
  %554 = %545.0;
  %555 = @func_2469() /* ty=Tensor[(14, 11, 12), float32] */;
  %556 = less_equal(%548, %549) /* ty=Tensor[(5, 3, 13), bool] */;
  %557 = %552.0;
  (%553, %554, meta[relay.Constant][30] /* ty=Tensor[(286), float64] */, %555, %556, %557, meta[relay.Constant][31] /* ty=Tensor[(360), float64] */)
}

def @func_1101(%var_1077: Tensor[(10, 9, 4), float64]) -> (Tensor[(10, 9, 4), float64], Tensor[(10, 9, 4), float32]) {
  %558 = cast(%var_1077, dtype="float64") /* ty=Tensor[(10, 9, 4), float64] */;
  %559 = cast(%var_1077, dtype="float32") /* ty=Tensor[(10, 9, 4), float32] */;
  %560 = sin(%558) /* ty=Tensor[(10, 9, 4), float64] */;
  %561 = sinh(%559) /* ty=Tensor[(10, 9, 4), float32] */;
  (%560, %561)
}

def @func_1672() -> (Tensor[(14, 11, 12), float64],) {
  %562 = @func_1499() /* ty=(Tensor[(14, 11, 12), float64], Tensor[(14, 11, 12), float64], Tensor[(5, 10, 7), bool], float64) */;
  %563 = %562.1;
  (%563,)
}

def @func_4326() -> (Tensor[(13, 2, 11), float64],) {
  %564 = @func_2718() /* ty=(Tensor[(13, 2, 11), float64],) */;
  %565 = %564.0;
  (%565,)
}

def @func_3256() -> Tensor[(5, 10, 7), bool] {
  @func_2012() /* ty=Tensor[(5, 10, 7), bool] */
}

def @func_4457() -> Tensor[(6, 4), float32] {
  %566 = cast(meta[relay.Constant][32] /* ty=Tensor[(6, 4), float32] */, dtype="float32") /* ty=Tensor[(6, 4), float32] */;
  atan(%566) /* ty=Tensor[(6, 4), float32] */
}

def @func_2944(%var_2929: uint16, %var_2930: Tensor[(3, 2, 13), uint16]) -> (Tensor[(3, 2, 13), uint16], Tensor[(5, 10, 7), bool], Tensor[(12, 70), float32], Tensor[(3, 2, 13), float64]) {
  %567 = cast(%var_2929, dtype="uint16") /* ty=uint16 */;
  %568 = cast(%var_2930, dtype="uint16") /* ty=Tensor[(3, 2, 13), uint16] */;
  %569 = cast(meta[relay.Constant][33] /* ty=Tensor[(12, 70), float32] */, dtype="float32") /* ty=Tensor[(12, 70), float32] */;
  %570 = cast(%var_2929, dtype="float64") /* ty=float64 */;
  %571 = reshape(%569, newshape=[7, 8, 15]) /* ty=Tensor[(7, 8, 15), float32] */;
  %572 = reshape(%570, newshape=[]) /* ty=float64 */;
  %573 = @func_1007(%571, %572) /* ty=(Tensor[(7, 8, 15), float32], Tensor[(5, 10, 7), bool], float64) */;
  %574 = cast(%var_2930, dtype="float64") /* ty=Tensor[(3, 2, 13), float64] */;
  %575 = logical_xor(%567, %568) /* ty=Tensor[(3, 2, 13), uint16] */;
  %576 = %573.1;
  %577 = asin(%574) /* ty=Tensor[(3, 2, 13), float64] */;
  (%575, %576, meta[relay.Constant][33] /* ty=Tensor[(12, 70), float32] */, %577)
}

def @func_5963(%var_5947: Tensor[(2, 1200), bool]) -> (Tensor[(13, 2, 11), float64], Tensor[(15, 10, 16), uint16], float64) {
  %578 = @func_4326() /* ty=(Tensor[(13, 2, 11), float64],) */;
  %579 = cast(%var_5947, dtype="bool") /* ty=Tensor[(2, 1200), bool] */;
  %580 = reshape(%579, newshape=[15, 10, 16]) /* ty=Tensor[(15, 10, 16), bool] */;
  %581 = @func_5897(%580) /* ty=(Tensor[(15, 10, 16), float64],) */;
  %582 = %581.0;
  %583 = cast(%var_5947, dtype="uint16") /* ty=Tensor[(2, 1200), uint16] */;
  %584 = shape_of(%582, dtype="int32") /* ty=Tensor[(3), int32] */;
  %585 = cast(%582, dtype="uint16") /* ty=Tensor[(15, 10, 16), uint16] */;
  %586 = dyn.reshape(%583, %584, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %587 = %578.0;
  %588 = add(%585, %586) /* ty=Tensor[(15, 10, 16), uint16] */;
  %589 = @func_3305() /* ty=float64 */;
  (%587, %588, %589)
}

def @func_3305() -> float64 {
  %590 = @func_2175() /* ty=(float64,) */;
  %590.0
}

def @func_4113(%var_4089: Tensor[(5, 13, 16), float64]) -> (Tensor[(14, 3, 11), bool], Tensor[(462), float64], Tensor[(5, 13, 16), uint32], Tensor[(5, 13, 16), int16]) {
  %591 = cast(meta[relay.Constant][34] /* ty=Tensor[(462), float64] */, dtype="float64") /* ty=Tensor[(462), float64] */;
  %592 = reshape(%591, newshape=[462]) /* ty=Tensor[(462), float64] */;
  %593 = @func_3711(%592) /* ty=(float64, Tensor[(14, 3, 11), bool], Tensor[(462), float64], float64) */;
  %594 = cast(meta[relay.Constant][35] /* ty=Tensor[(5, 13, 16), float64] */, dtype="float64") /* ty=Tensor[(5, 13, 16), float64] */;
  %595 = atanh(%594) /* ty=Tensor[(5, 13, 16), float64] */;
  %596 = cast(%var_4089, dtype="uint32") /* ty=Tensor[(5, 13, 16), uint32] */;
  %597 = shape_of(%595, dtype="int32") /* ty=Tensor[(3), int32] */;
  %598 = cast(%595, dtype="uint32") /* ty=Tensor[(5, 13, 16), uint32] */;
  %599 = dyn.reshape(%596, %597, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %600 = cast(%var_4089, dtype="int16") /* ty=Tensor[(5, 13, 16), int16] */;
  %601 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(5, 13, 16), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %602 = cast(meta[relay.Constant][35] /* ty=Tensor[(5, 13, 16), float64] */, dtype="int16") /* ty=Tensor[(5, 13, 16), int16] */;
  %603 = dyn.reshape(%600, %601, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %604 = %593.1;
  %605 = multiply(%598, %599) /* ty=Tensor[(5, 13, 16), uint32] */;
  %606 = bitwise_and(%602, %603) /* ty=Tensor[(5, 13, 16), int16] */;
  (%604, meta[relay.Constant][34] /* ty=Tensor[(462), float64] */, %605, %606)
}

def @func_3930() -> Tensor[(13, 2, 11), float64] {
  %607 = @func_2718() /* ty=(Tensor[(13, 2, 11), float64],) */;
  %607.0
}

def @func_1499() -> (Tensor[(14, 11, 12), float64], Tensor[(14, 11, 12), float64], Tensor[(5, 10, 7), bool], float64) {
  %608 = cast(meta[relay.Constant][36] /* ty=Tensor[(14, 11, 12), float64] */, dtype="float64") /* ty=Tensor[(14, 11, 12), float64] */;
  %609 = cast(meta[relay.Constant][36] /* ty=Tensor[(14, 11, 12), float64] */, dtype="float64") /* ty=Tensor[(14, 11, 12), float64] */;
  %610 = cast(-1.47578f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %611 = reshape(%610, newshape=[]) /* ty=float64 */;
  %612 = sinh(%608) /* ty=Tensor[(14, 11, 12), float64] */;
  %613 = rsqrt(%609) /* ty=Tensor[(14, 11, 12), float64] */;
  %614 = @func_846(%611) /* ty=Tensor[(5, 10, 7), bool] */;
  (%612, %613, %614, -1.47578f64 /* ty=float64 */)
}

def @func_4069() -> Tensor[(14, 11, 12), float64] {
  %615 = @func_2393() /* ty=(Tensor[(5, 10, 7), bool], Tensor[(14, 11, 12), float64]) */;
  %615.1
}

def @func_2012() -> Tensor[(5, 10, 7), bool] {
  %616 = @func_1499() /* ty=(Tensor[(14, 11, 12), float64], Tensor[(14, 11, 12), float64], Tensor[(5, 10, 7), bool], float64) */;
  %616.2
}

def @func_3189(%var_3170: Tensor[(14, 15, 16), float64]) -> (Tensor[(14, 15, 16), float64], float64) {
  %617 = cast(%var_3170, dtype="float64") /* ty=Tensor[(14, 15, 16), float64] */;
  %618 = @func_2543() /* ty=(float64,) */;
  %619 = acos(%617) /* ty=Tensor[(14, 15, 16), float64] */;
  %620 = %618.0;
  (%619, %620)
}

def @func_1886() -> Tensor[(14, 11, 12), float64] {
  %621 = @func_1672() /* ty=(Tensor[(14, 11, 12), float64],) */;
  %621.0
}

def @func_5003(%var_4999: Tensor[(108), float32]) -> (Tensor[(13, 2, 11), float64], Tensor[(180), float64], Tensor[(108), float32]) {
  %622 = @func_2718() /* ty=(Tensor[(13, 2, 11), float64],) */;
  %623 = cast(%var_4999, dtype="float32") /* ty=Tensor[(108), float32] */;
  %624 = reshape(%623, newshape=[108]) /* ty=Tensor[(108), float32] */;
  %625 = @func_2923(%624) /* ty=(float64, Tensor[(9, 1, 12), float32], Tensor[(108), float32], Tensor[(3, 6, 10), float32], Tensor[(180), float64]) */;
  %626 = %622.0;
  %627 = %625.4;
  (%626, %627, %var_4999)
}

def @func_3102() -> (Tensor[(14, 11, 12), bool], Tensor[(14, 11, 12), float64], Tensor[(14, 11, 12), float64], float64, Tensor[(14, 11, 12), float64], Tensor[(10, 9, 4), float64], Tensor[(360), float64]) {
  %628 = @func_1672() /* ty=(Tensor[(14, 11, 12), float64],) */;
  %629 = %628.0;
  %630 = cast(meta[relay.Constant][37] /* ty=Tensor[(14, 11, 12), float64] */, dtype="bool") /* ty=Tensor[(14, 11, 12), bool] */;
  %631 = shape_of(%629, dtype="int32") /* ty=Tensor[(3), int32] */;
  %632 = cast(%629, dtype="bool") /* ty=Tensor[(14, 11, 12), bool] */;
  %633 = dyn.reshape(%630, %631, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %634 = @func_1681() /* ty=(Tensor[(14, 11, 12), float64],) */;
  %635 = cast(meta[relay.Constant][38] /* ty=Tensor[(14, 11, 12), float64] */, dtype="float64") /* ty=Tensor[(14, 11, 12), float64] */;
  %636 = shape_of(%629, dtype="int32") /* ty=Tensor[(3), int32] */;
  %637 = cast(%629, dtype="float64") /* ty=Tensor[(14, 11, 12), float64] */;
  %638 = dyn.reshape(%635, %636, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %639 = cast(meta[relay.Constant][38] /* ty=Tensor[(14, 11, 12), float64] */, dtype="float64") /* ty=Tensor[(14, 11, 12), float64] */;
  %640 = cast(meta[relay.Constant][39] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %641 = reshape(%640, newshape=[10, 9, 4]) /* ty=Tensor[(10, 9, 4), float64] */;
  %642 = @func_1101(%641) /* ty=(Tensor[(10, 9, 4), float64], Tensor[(10, 9, 4), float32]) */;
  %643 = greater(%632, %633) /* ty=Tensor[(14, 11, 12), bool] */;
  %644 = %634.0;
  %645 = floor_divide(%637, %638) /* ty=Tensor[(14, 11, 12), float64] */;
  %646 = @func_2416() /* ty=float64 */;
  %647 = cosh(%639) /* ty=Tensor[(14, 11, 12), float64] */;
  %648 = %642.0;
  (%643, %644, %645, %646, %647, %648, meta[relay.Constant][39] /* ty=Tensor[(360), float64] */)
}

def @func_4710(%var_4686: Tensor[(5, 13, 16), uint32]) -> (Tensor[(5, 13, 16), uint32], Tensor[(40, 26), float64], Tensor[(5, 10, 7), float32]) {
  %649 = cast(meta[relay.Constant][40] /* ty=Tensor[(40, 26), float64] */, dtype="float64") /* ty=Tensor[(40, 26), float64] */;
  %650 = reshape(%649, newshape=[5, 13, 16]) /* ty=Tensor[(5, 13, 16), float64] */;
  %651 = @func_4113(%650) /* ty=(Tensor[(14, 3, 11), bool], Tensor[(462), float64], Tensor[(5, 13, 16), uint32], Tensor[(5, 13, 16), int16]) */;
  %652 = %651.2;
  %653 = cast(%var_4686, dtype="float64") /* ty=Tensor[(5, 13, 16), float64] */;
  %654 = shape_of(%652, dtype="int32") /* ty=Tensor[(3), int32] */;
  %655 = cast(%652, dtype="float64") /* ty=Tensor[(5, 13, 16), float64] */;
  %656 = dyn.reshape(%653, %654, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %657 = mod(%655, %656) /* ty=Tensor[(5, 13, 16), float64] */;
  %658 = cast(meta[relay.Constant][41] /* ty=Tensor[(5, 13, 16), float64] */, dtype="uint32") /* ty=Tensor[(5, 13, 16), uint32] */;
  %659 = shape_of(%657, dtype="int32") /* ty=Tensor[(3), int32] */;
  %660 = cast(%657, dtype="uint32") /* ty=Tensor[(5, 13, 16), uint32] */;
  %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %662 = cast(meta[relay.Constant][40] /* ty=Tensor[(40, 26), float64] */, dtype="float64") /* ty=Tensor[(40, 26), float64] */;
  %663 = @func_3256() /* ty=Tensor[(5, 10, 7), bool] */;
  %664 = cast(%663, dtype="float32") /* ty=Tensor[(5, 10, 7), float32] */;
  %665 = logical_xor(%660, %661) /* ty=Tensor[(5, 13, 16), uint32] */;
  %666 = rsqrt(%662) /* ty=Tensor[(40, 26), float64] */;
  %667 = log10(%664) /* ty=Tensor[(5, 10, 7), float32] */;
  (%665, %666, %667)
}

def @func_3055() -> (Tensor[(14, 11, 12), float64], float64, Tensor[(8, 12, 5), uint64], Tensor[(462, 1), float64], Tensor[(13, 2, 11), float64], Tensor[(26, 11), float64]) {
  %668 = @func_2393() /* ty=(Tensor[(5, 10, 7), bool], Tensor[(14, 11, 12), float64]) */;
  %669 = @func_2543() /* ty=(float64,) */;
  %670 = cast(meta[relay.Constant][42] /* ty=Tensor[(462, 1), float64] */, dtype="float64") /* ty=Tensor[(462, 1), float64] */;
  %671 = reshape(%670, newshape=[14, 3, 11]) /* ty=Tensor[(14, 3, 11), float64] */;
  %672 = @func_561(%671) /* ty=(Tensor[(14, 3, 11), bool], Tensor[(8, 12, 5), uint64], Tensor[(120, 4), float32]) */;
  %673 = cast(meta[relay.Constant][43] /* ty=Tensor[(26, 11), float64] */, dtype="float64") /* ty=Tensor[(26, 11), float64] */;
  %674 = reshape(%673, newshape=[13, 2, 11]) /* ty=Tensor[(13, 2, 11), float64] */;
  %675 = @func_2847(%674) /* ty=(Tensor[(13, 2, 11), float64],) */;
  %676 = %668.1;
  %677 = %669.0;
  %678 = %672.1;
  %679 = %675.0;
  (%676, %677, %678, meta[relay.Constant][42] /* ty=Tensor[(462, 1), float64] */, %679, meta[relay.Constant][43] /* ty=Tensor[(26, 11), float64] */)
}

def @func_2146() -> float64 {
  %680 = @func_2022() /* ty=(float64,) */;
  %680.0
}

def @func_5204() -> Tensor[(13, 2, 15), float32] {
  %681 = cast(meta[relay.Constant][44] /* ty=Tensor[(13, 2, 15), float32] */, dtype="float32") /* ty=Tensor[(13, 2, 15), float32] */;
  log(%681) /* ty=Tensor[(13, 2, 15), float32] */
}

def @func_5508() -> (Tensor[(14, 11, 12), float64],) {
  %682 = @func_1672() /* ty=(Tensor[(14, 11, 12), float64],) */;
  %683 = %682.0;
  (%683,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1886() -> Tensor[(14, 11, 12), float64] {
  %0 = @func_1672() /* ty=(Tensor[(14, 11, 12), float64],) */;
  %0.0
}

def @func_3257() -> Tensor[(5, 10, 7), bool] {
  %1 = fn () -> Tensor[(5, 10, 7), bool] {
    @func_2012() /* ty=Tensor[(5, 10, 7), bool] */
  };
  %1() /* ty=Tensor[(5, 10, 7), bool] */
}

def @func_1791(%var_1790: Tensor[(10), int64]) -> (float64, Tensor[(2, 5, 6), uint8], Tensor[(10), int64], Tensor[(3, 20), int64]) {
  %9 = fn (%var_1767: Tensor[(10), int64]) -> (float64, Tensor[(2, 5, 6), uint8], Tensor[(10), int64], Tensor[(3, 20), int64]) {
    %2 = @func_1622() /* ty=(float64, Tensor[(5, 10, 7), bool], Tensor[(840), float32]) */;
    %3 = cast(%var_1767, dtype="int64") /* ty=Tensor[(10), int64] */;
    %4 = cast(meta[relay.Constant][0] /* ty=Tensor[(3, 20), int64] */, dtype="int64") /* ty=Tensor[(3, 20), int64] */;
    %5 = reshape(%3, newshape=[2, 5, 1]) /* ty=Tensor[(2, 5, 1), int64] */;
    %6 = reshape(%4, newshape=[2, 5, 6]) /* ty=Tensor[(2, 5, 6), int64] */;
    %7 = %2.0;
    %8 = @func_1216(%5, %6) /* ty=Tensor[(2, 5, 6), uint8] */;
    (%7, %8, %var_1767, meta[relay.Constant][0] /* ty=Tensor[(3, 20), int64] */)
  };
  %9(%var_1790) /* ty=(float64, Tensor[(2, 5, 6), uint8], Tensor[(10), int64], Tensor[(3, 20), int64]) */
}

def @func_3763() -> (Tensor[(5, 10, 7), bool],) {
  %12 = fn () -> (Tensor[(5, 10, 7), bool],) {
    %10 = @func_1499() /* ty=(Tensor[(14, 11, 12), float64], Tensor[(14, 11, 12), float64], Tensor[(5, 10, 7), bool], float64) */;
    %11 = %10.2;
    (%11,)
  };
  %12() /* ty=(Tensor[(5, 10, 7), bool],) */
}

def @func_849(%var_847: float64) -> Tensor[(5, 10, 7), bool] {
  @func_846(%var_847) /* ty=Tensor[(5, 10, 7), bool] */
}

def @func_215(%var_213: Tensor[(8, 12, 5), float32], %var_214: Tensor[(8, 12, 5), float32]) -> (Tensor[(8, 12, 5), uint64], Tensor[(8, 12, 5), float32], Tensor[(8, 12, 5), float32], Tensor[(8, 12, 5), float32]) {
  %31 = fn (%var_160: Tensor[(8, 12, 5), float32], %var_171: Tensor[(8, 12, 5), float32]) -> (Tensor[(8, 12, 5), uint64], Tensor[(8, 12, 5), float32], Tensor[(8, 12, 5), float32], Tensor[(8, 12, 5), float32]) {
    %13 = cast(meta[relay.Constant][1] /* ty=Tensor[(8, 12, 5), float32] */, dtype="float32") /* ty=Tensor[(8, 12, 5), float32] */;
    %14 = acos(%13) /* ty=Tensor[(8, 12, 5), float32] */;
    %15 = cast(%var_171, dtype="uint64") /* ty=Tensor[(8, 12, 5), uint64] */;
    %16 = shape_of(%14, dtype="int32") /* ty=Tensor[(3), int32] */;
    %17 = cast(%14, dtype="uint64") /* ty=Tensor[(8, 12, 5), uint64] */;
    %18 = dyn.reshape(%15, %16, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %19 = cast(meta[relay.Constant][1] /* ty=Tensor[(8, 12, 5), float32] */, dtype="float32") /* ty=Tensor[(8, 12, 5), float32] */;
    %20 = cast(%var_160, dtype="float64") /* ty=Tensor[(8, 12, 5), float64] */;
    %21 = shape_of(%14, dtype="int32") /* ty=Tensor[(3), int32] */;
    %22 = cast(%14, dtype="float64") /* ty=Tensor[(8, 12, 5), float64] */;
    %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %24 = floor_divide(%22, %23) /* ty=Tensor[(8, 12, 5), float64] */;
    %25 = cast(%24, dtype="float32") /* ty=Tensor[(8, 12, 5), float32] */;
    %26 = cast(meta[relay.Constant][1] /* ty=Tensor[(8, 12, 5), float32] */, dtype="float32") /* ty=Tensor[(8, 12, 5), float32] */;
    %27 = logical_xor(%17, %18) /* ty=Tensor[(8, 12, 5), uint64] */;
    %28 = log10(%19) /* ty=Tensor[(8, 12, 5), float32] */;
    %29 = tan(%25) /* ty=Tensor[(8, 12, 5), float32] */;
    %30 = sigmoid(%26) /* ty=Tensor[(8, 12, 5), float32] */;
    (%27, %28, %29, %30)
  };
  %31(%var_213, %var_214) /* ty=(Tensor[(8, 12, 5), uint64], Tensor[(8, 12, 5), float32], Tensor[(8, 12, 5), float32], Tensor[(8, 12, 5), float32]) */
}

def @func_2948(%var_2946: uint16, %var_2947: Tensor[(3, 2, 13), uint16]) -> (Tensor[(3, 2, 13), uint16], Tensor[(5, 10, 7), bool], Tensor[(12, 70), float32], Tensor[(3, 2, 13), float64]) {
  @func_2944(%var_2946, %var_2947) /* ty=(Tensor[(3, 2, 13), uint16], Tensor[(5, 10, 7), bool], Tensor[(12, 70), float32], Tensor[(3, 2, 13), float64]) */
}

def @func_5932(%var_5918: Tensor[(15, 16, 6), uint16], %var_5919: Tensor[(15, 16, 6), uint16]) -> (Tensor[(15, 16, 6), bool],) {
  %32 = cast(%var_5919, dtype="bool") /* ty=Tensor[(15, 16, 6), bool] */;
  %33 = shape_of(%var_5918, dtype="int32") /* ty=Tensor[(3), int32] */;
  %34 = cast(%var_5918, dtype="bool") /* ty=Tensor[(15, 16, 6), bool] */;
  %35 = dyn.reshape(%32, %33, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %36 = greater_equal(%34, %35) /* ty=Tensor[(15, 16, 6), bool] */;
  (%36,)
}

def @func_1661(%var_1659: Tensor[(14, 11, 12), float64], %var_1660: Tensor[(10), int64]) -> (Tensor[(14, 11, 12), bool], Tensor[(2, 5, 6), uint8], Tensor[(10), int64], Tensor[(60), int64]) {
  %49 = fn (%var_1641: Tensor[(14, 11, 12), float64], %var_1653: Tensor[(10), int64]) -> (Tensor[(14, 11, 12), bool], Tensor[(2, 5, 6), uint8], Tensor[(10), int64], Tensor[(60), int64]) {
    %37 = @func_1499() /* ty=(Tensor[(14, 11, 12), float64], Tensor[(14, 11, 12), float64], Tensor[(5, 10, 7), bool], float64) */;
    %38 = %37.1;
    %39 = cast(%var_1641, dtype="bool") /* ty=Tensor[(14, 11, 12), bool] */;
    %40 = shape_of(%38, dtype="int32") /* ty=Tensor[(3), int32] */;
    %41 = cast(%38, dtype="bool") /* ty=Tensor[(14, 11, 12), bool] */;
    %42 = dyn.reshape(%39, %40, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %43 = cast(%var_1653, dtype="int64") /* ty=Tensor[(10), int64] */;
    %44 = cast(meta[relay.Constant][2] /* ty=Tensor[(60), int64] */, dtype="int64") /* ty=Tensor[(60), int64] */;
    %45 = reshape(%43, newshape=[2, 5, 1]) /* ty=Tensor[(2, 5, 1), int64] */;
    %46 = reshape(%44, newshape=[2, 5, 6]) /* ty=Tensor[(2, 5, 6), int64] */;
    %47 = greater_equal(%41, %42) /* ty=Tensor[(14, 11, 12), bool] */;
    %48 = @func_1216(%45, %46) /* ty=Tensor[(2, 5, 6), uint8] */;
    (%47, %48, %var_1653, meta[relay.Constant][2] /* ty=Tensor[(60), int64] */)
  };
  %49(%var_1659, %var_1660) /* ty=(Tensor[(14, 11, 12), bool], Tensor[(2, 5, 6), uint8], Tensor[(10), int64], Tensor[(60), int64]) */
}

def @func_4647(%var_4618: Tensor[(13, 2, 11), float64]) -> (Tensor[(13, 2, 11), float64], Tensor[(13, 2, 11), float64]) {
  %50 = @func_3626() /* ty=(Tensor[(13, 2, 11), float64], float64) */;
  %51 = %50.0;
  %52 = cast(%var_4618, dtype="float64") /* ty=Tensor[(13, 2, 11), float64] */;
  %53 = shape_of(%51, dtype="int32") /* ty=Tensor[(3), int32] */;
  %54 = cast(%51, dtype="float64") /* ty=Tensor[(13, 2, 11), float64] */;
  %55 = dyn.reshape(%52, %53, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %56 = cast(%var_4618, dtype="float64") /* ty=Tensor[(13, 2, 11), float64] */;
  %57 = floor_divide(%54, %55) /* ty=Tensor[(13, 2, 11), float64] */;
  %58 = log2(%56) /* ty=Tensor[(13, 2, 11), float64] */;
  (%57, %58)
}

def @func_5674(%var_5670: Tensor[(1040), float64], %var_5671: Tensor[(462), float64], %var_5672: Tensor[(585), int16], %var_5673: float64) -> (Tensor[(14, 11, 12), uint64], Tensor[(1040), float64], Tensor[(462), float64], Tensor[(462), float64], Tensor[(3, 1, 10), int16], Tensor[(5, 10, 7), bool], Tensor[(585), int16], float64, Tensor[(3, 1, 10), int16], Tensor[(5, 13, 16), float64]) {
  @func_5668(%var_5670, %var_5671, %var_5672, %var_5673) /* ty=(Tensor[(14, 11, 12), uint64], Tensor[(1040), float64], Tensor[(462), float64], Tensor[(462), float64], Tensor[(3, 1, 10), int16], Tensor[(5, 10, 7), bool], Tensor[(585), int16], float64, Tensor[(3, 1, 10), int16], Tensor[(5, 13, 16), float64]) */
}

def @func_2105(%var_2103: Tensor[(4, 4, 9), uint32]) -> Tensor[(4, 4, 9), uint32] {
  @func_2102(%var_2103) /* ty=Tensor[(4, 4, 9), uint32] */
}

def @func_4458() -> Tensor[(6, 4), float32] {
  %60 = fn () -> Tensor[(6, 4), float32] {
    %59 = cast(meta[relay.Constant][3] /* ty=Tensor[(6, 4), float32] */, dtype="float32") /* ty=Tensor[(6, 4), float32] */;
    atan(%59) /* ty=Tensor[(6, 4), float32] */
  };
  %60() /* ty=Tensor[(6, 4), float32] */
}

def @func_4710(%var_4686: Tensor[(5, 13, 16), uint32]) -> (Tensor[(5, 13, 16), uint32], Tensor[(40, 26), float64], Tensor[(5, 10, 7), float32]) {
  %61 = cast(meta[relay.Constant][4] /* ty=Tensor[(40, 26), float64] */, dtype="float64") /* ty=Tensor[(40, 26), float64] */;
  %62 = reshape(%61, newshape=[5, 13, 16]) /* ty=Tensor[(5, 13, 16), float64] */;
  %63 = @func_4113(%62) /* ty=(Tensor[(14, 3, 11), bool], Tensor[(462), float64], Tensor[(5, 13, 16), uint32], Tensor[(5, 13, 16), int16]) */;
  %64 = %63.2;
  %65 = cast(%var_4686, dtype="float64") /* ty=Tensor[(5, 13, 16), float64] */;
  %66 = shape_of(%64, dtype="int32") /* ty=Tensor[(3), int32] */;
  %67 = cast(%64, dtype="float64") /* ty=Tensor[(5, 13, 16), float64] */;
  %68 = dyn.reshape(%65, %66, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %69 = mod(%67, %68) /* ty=Tensor[(5, 13, 16), float64] */;
  %70 = cast(meta[relay.Constant][5] /* ty=Tensor[(5, 13, 16), float64] */, dtype="uint32") /* ty=Tensor[(5, 13, 16), uint32] */;
  %71 = shape_of(%69, dtype="int32") /* ty=Tensor[(3), int32] */;
  %72 = cast(%69, dtype="uint32") /* ty=Tensor[(5, 13, 16), uint32] */;
  %73 = dyn.reshape(%70, %71, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %74 = cast(meta[relay.Constant][4] /* ty=Tensor[(40, 26), float64] */, dtype="float64") /* ty=Tensor[(40, 26), float64] */;
  %75 = @func_3256() /* ty=Tensor[(5, 10, 7), bool] */;
  %76 = cast(%75, dtype="float32") /* ty=Tensor[(5, 10, 7), float32] */;
  %77 = logical_xor(%72, %73) /* ty=Tensor[(5, 13, 16), uint32] */;
  %78 = rsqrt(%74) /* ty=Tensor[(40, 26), float64] */;
  %79 = log10(%76) /* ty=Tensor[(5, 10, 7), float32] */;
  (%77, %78, %79)
}

def @func_1622() -> (float64, Tensor[(5, 10, 7), bool], Tensor[(840), float32]) {
  %80 = @func_1540() /* ty=(float64,) */;
  %81 = cast(meta[relay.Constant][6] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %82 = %80.0;
  %83 = cast(%82, dtype="float64") /* ty=float64 */;
  %84 = reshape(%81, newshape=[7, 8, 15]) /* ty=Tensor[(7, 8, 15), float32] */;
  %85 = reshape(%83, newshape=[]) /* ty=float64 */;
  %86 = @func_1007(%84, %85) /* ty=(Tensor[(7, 8, 15), float32], Tensor[(5, 10, 7), bool], float64) */;
  %87 = %86.1;
  (%82, %87, meta[relay.Constant][6] /* ty=Tensor[(840), float32] */)
}

def @func_2470() -> Tensor[(14, 11, 12), float32] {
  %90 = fn () -> Tensor[(14, 11, 12), float32] {
    %88 = @func_1886() /* ty=Tensor[(14, 11, 12), float64] */;
    %89 = cast(%88, dtype="float32") /* ty=Tensor[(14, 11, 12), float32] */;
    asin(%89) /* ty=Tensor[(14, 11, 12), float32] */
  };
  %90() /* ty=Tensor[(14, 11, 12), float32] */
}

def @func_4189() -> (float64,) {
  @func_4187() /* ty=(float64,) */
}

def @func_1683() -> (Tensor[(14, 11, 12), float64],) {
  @func_1681() /* ty=(Tensor[(14, 11, 12), float64],) */
}

def @func_2088(%var_2086: Tensor[(14, 16, 3), int64], %var_2087: Tensor[(14, 16, 3), int64]) -> (Tensor[(14, 16, 3), bool], Tensor[(14, 11, 12), float64], Tensor[(14, 16, 3), int64]) {
  @func_2084(%var_2086, %var_2087) /* ty=(Tensor[(14, 16, 3), bool], Tensor[(14, 11, 12), float64], Tensor[(14, 16, 3), int64]) */
}

def @func_5005(%var_5004: Tensor[(108), float32]) -> (Tensor[(13, 2, 11), float64], Tensor[(180), float64], Tensor[(108), float32]) {
  %97 = fn (%var_4999: Tensor[(108), float32]) -> (Tensor[(13, 2, 11), float64], Tensor[(180), float64], Tensor[(108), float32]) {
    %91 = @func_2718() /* ty=(Tensor[(13, 2, 11), float64],) */;
    %92 = cast(%var_4999, dtype="float32") /* ty=Tensor[(108), float32] */;
    %93 = reshape(%92, newshape=[108]) /* ty=Tensor[(108), float32] */;
    %94 = @func_2923(%93) /* ty=(float64, Tensor[(9, 1, 12), float32], Tensor[(108), float32], Tensor[(3, 6, 10), float32], Tensor[(180), float64]) */;
    %95 = %91.0;
    %96 = %94.4;
    (%95, %96, %var_4999)
  };
  %97(%var_5004) /* ty=(Tensor[(13, 2, 11), float64], Tensor[(180), float64], Tensor[(108), float32]) */
}

def @func_4327() -> (Tensor[(13, 2, 11), float64],) {
  %100 = fn () -> (Tensor[(13, 2, 11), float64],) {
    %98 = @func_2718() /* ty=(Tensor[(13, 2, 11), float64],) */;
    %99 = %98.0;
    (%99,)
  };
  %100() /* ty=(Tensor[(13, 2, 11), float64],) */
}

def @func_3227() -> (float64,) {
  %101 = @func_2175() /* ty=(float64,) */;
  %102 = %101.0;
  (%102,)
}

def @func_3351() -> Tensor[(14, 11, 12), float64] {
  %103 = @func_1672() /* ty=(Tensor[(14, 11, 12), float64],) */;
  %103.0
}

def @func_4069() -> Tensor[(14, 11, 12), float64] {
  %104 = @func_2393() /* ty=(Tensor[(5, 10, 7), bool], Tensor[(14, 11, 12), float64]) */;
  %104.1
}

def @func_5963(%var_5947: Tensor[(2, 1200), bool]) -> (Tensor[(13, 2, 11), float64], Tensor[(15, 10, 16), uint16], float64) {
  %105 = @func_4326() /* ty=(Tensor[(13, 2, 11), float64],) */;
  %106 = cast(%var_5947, dtype="bool") /* ty=Tensor[(2, 1200), bool] */;
  %107 = reshape(%106, newshape=[15, 10, 16]) /* ty=Tensor[(15, 10, 16), bool] */;
  %108 = @func_5897(%107) /* ty=(Tensor[(15, 10, 16), float64],) */;
  %109 = %108.0;
  %110 = cast(%var_5947, dtype="uint16") /* ty=Tensor[(2, 1200), uint16] */;
  %111 = shape_of(%109, dtype="int32") /* ty=Tensor[(3), int32] */;
  %112 = cast(%109, dtype="uint16") /* ty=Tensor[(15, 10, 16), uint16] */;
  %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %114 = %105.0;
  %115 = add(%112, %113) /* ty=Tensor[(15, 10, 16), uint16] */;
  %116 = @func_3305() /* ty=float64 */;
  (%114, %115, %116)
}

def @main(%var_6355: Tensor[(5, 10, 7), bool]) -> (Tensor[(5, 10, 7), int32],) {
  %117 = @func_4385() /* ty=(Tensor[(5, 10, 7), bool],) */;
  %118 = %117.0;
  %119 = cast(%var_6355, dtype="int32") /* ty=Tensor[(5, 10, 7), int32] */;
  %120 = shape_of(%118, dtype="int32") /* ty=Tensor[(3), int32] */;
  %121 = cast(%118, dtype="int32") /* ty=Tensor[(5, 10, 7), int32] */;
  %122 = dyn.reshape(%119, %120, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %123 = right_shift(%121, %122) /* ty=Tensor[(5, 10, 7), int32] */;
  (%123,)
}

def @func_6258() -> (Tensor[(5, 10, 7), float64], Tensor[(5, 10, 7), float64]) {
  %129 = fn () -> (Tensor[(5, 10, 7), float64], Tensor[(5, 10, 7), float64]) {
    %124 = @func_6011() /* ty=(Tensor[(5, 10, 7), float64],) */;
    %125 = @func_2803() /* ty=Tensor[(5, 10, 7), bool] */;
    %126 = cast(%125, dtype="float64") /* ty=Tensor[(5, 10, 7), float64] */;
    %127 = %124.0;
    %128 = rsqrt(%126) /* ty=Tensor[(5, 10, 7), float64] */;
    (%127, %128)
  };
  %129() /* ty=(Tensor[(5, 10, 7), float64], Tensor[(5, 10, 7), float64]) */
}

def @func_3684() -> (Tensor[(5, 10, 7), bool], Tensor[(5, 10, 7), bool], Tensor[(14, 11, 12), float32]) {
  %130 = @func_1886() /* ty=Tensor[(14, 11, 12), float64] */;
  %131 = cast(%130, dtype="float32") /* ty=Tensor[(14, 11, 12), float32] */;
  %132 = @func_2012() /* ty=Tensor[(5, 10, 7), bool] */;
  %133 = @func_2012() /* ty=Tensor[(5, 10, 7), bool] */;
  %134 = cos(%131) /* ty=Tensor[(14, 11, 12), float32] */;
  (%132, %133, %134)
}

def @func_1624() -> (float64, Tensor[(5, 10, 7), bool], Tensor[(840), float32]) {
  @func_1622() /* ty=(float64, Tensor[(5, 10, 7), bool], Tensor[(840), float32]) */
}

def @func_3307() -> float64 {
  @func_3305() /* ty=float64 */
}

def @func_4056(%var_4055: Tensor[(5, 11, 16), uint32]) -> (Tensor[(5, 11, 16), uint32], Tensor[(462), float64], Tensor[(1, 462), float64]) {
  %142 = fn (%var_4027: Tensor[(5, 11, 16), uint32]) -> (Tensor[(5, 11, 16), uint32], Tensor[(462), float64], Tensor[(1, 462), float64]) {
    %135 = cast(meta[relay.Constant][7] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %136 = cast(%var_4027, dtype="uint32") /* ty=Tensor[(5, 11, 16), uint32] */;
    %137 = cast(meta[relay.Constant][8] /* ty=Tensor[(1, 462), float64] */, dtype="float64") /* ty=Tensor[(1, 462), float64] */;
    %138 = reshape(%137, newshape=[462]) /* ty=Tensor[(462), float64] */;
    %139 = @func_3711(%138) /* ty=(float64, Tensor[(14, 3, 11), bool], Tensor[(462), float64], float64) */;
    %140 = bitwise_or(%135, %136) /* ty=Tensor[(5, 11, 16), uint32] */;
    %141 = %139.2;
    (%140, %141, meta[relay.Constant][8] /* ty=Tensor[(1, 462), float64] */)
  };
  %142(%var_4055) /* ty=(Tensor[(5, 11, 16), uint32], Tensor[(462), float64], Tensor[(1, 462), float64]) */
}

def @func_6030() -> (float64,) {
  @func_6028() /* ty=(float64,) */
}

def @func_5936(%var_5934: Tensor[(15, 16, 6), uint16], %var_5935: Tensor[(15, 16, 6), uint16]) -> (Tensor[(15, 16, 6), bool],) {
  @func_5932(%var_5934, %var_5935) /* ty=(Tensor[(15, 16, 6), bool],) */
}

def @func_3582() -> (Tensor[(3, 1, 10), int16],) {
  %147 = fn () -> (Tensor[(3, 1, 10), int16],) {
    %143 = @func_3305() /* ty=float64 */;
    %144 = cast(%143, dtype="int16") /* ty=int16 */;
    %145 = cast(meta[relay.Constant][9] /* ty=Tensor[(3, 1, 10), float64] */, dtype="int16") /* ty=Tensor[(3, 1, 10), int16] */;
    %146 = maximum(%144, %145) /* ty=Tensor[(3, 1, 10), int16] */;
    (%146,)
  };
  %147() /* ty=(Tensor[(3, 1, 10), int16],) */
}

def @func_6013() -> (Tensor[(5, 10, 7), float64],) {
  @func_6011() /* ty=(Tensor[(5, 10, 7), float64],) */
}

def @func_1033(%var_1031: int64, %var_1032: Tensor[(12, 2, 13), int64]) -> (Tensor[(12, 2, 13), int64],) {
  %151 = fn (%var_1025: int64, %var_1026: Tensor[(12, 2, 13), int64]) -> (Tensor[(12, 2, 13), int64],) {
    %148 = cast(%var_1025, dtype="int64") /* ty=int64 */;
    %149 = cast(%var_1026, dtype="int64") /* ty=Tensor[(12, 2, 13), int64] */;
    %150 = bitwise_xor(%148, %149) /* ty=Tensor[(12, 2, 13), int64] */;
    (%150,)
  };
  %151(%var_1031, %var_1032) /* ty=(Tensor[(12, 2, 13), int64],) */
}

def @func_1359(%var_1354: Tensor[(4, 5, 12), float32]) -> (Tensor[(4, 5, 12), float32], Tensor[(4, 5, 12), float32]) {
  %152 = cast(%var_1354, dtype="float32") /* ty=Tensor[(4, 5, 12), float32] */;
  %153 = cast(%var_1354, dtype="float32") /* ty=Tensor[(4, 5, 12), float32] */;
  %154 = asin(%152) /* ty=Tensor[(4, 5, 12), float32] */;
  %155 = erf(%153) /* ty=Tensor[(4, 5, 12), float32] */;
  (%154, %155)
}

def @func_4911() -> (float64, float64, Tensor[(14, 11, 12), float64], float64, Tensor[(13, 10, 2), int32], Tensor[(260), int32], Tensor[(14, 11, 12), float64], Tensor[(40), int64]) {
  %175 = fn () -> (float64, float64, Tensor[(14, 11, 12), float64], float64, Tensor[(13, 10, 2), int32], Tensor[(260), int32], Tensor[(14, 11, 12), float64], Tensor[(40), int64]) {
    %156 = @func_4437() /* ty=(Tensor[(5, 10, 7), bool], Tensor[(14, 11, 12), float64], float64) */;
    %157 = @func_3626() /* ty=(Tensor[(13, 2, 11), float64], float64) */;
    %158 = @func_3977() /* ty=(float64,) */;
    %159 = cast(meta[relay.Constant][10] /* ty=Tensor[(260), int32] */, dtype="int32") /* ty=Tensor[(260), int32] */;
    %160 = cast(meta[relay.Constant][10] /* ty=Tensor[(260), int32] */, dtype="int32") /* ty=Tensor[(260), int32] */;
    %161 = reshape(%159, newshape=[13, 10, 2]) /* ty=Tensor[(13, 10, 2), int32] */;
    %162 = reshape(%160, newshape=[13, 10, 2]) /* ty=Tensor[(13, 10, 2), int32] */;
    %163 = @func_3850(%161, %162) /* ty=(Tensor[(13, 10, 2), int32],) */;
    %164 = %156.2;
    %165 = cast(%164, dtype="int64") /* ty=int64 */;
    %166 = cast(meta[relay.Constant][11] /* ty=Tensor[(40), int64] */, dtype="int64") /* ty=Tensor[(40), int64] */;
    %167 = reshape(%165, newshape=[]) /* ty=int64 */;
    %168 = reshape(%166, newshape=[1, 8, 5]) /* ty=Tensor[(1, 8, 5), int64] */;
    %169 = @func_2303(%167, %168) /* ty=(Tensor[(1, 8, 5), int64], Tensor[(14, 11, 12), float64]) */;
    %170 = %157.1;
    %171 = @func_1886() /* ty=Tensor[(14, 11, 12), float64] */;
    %172 = %158.0;
    %173 = %163.0;
    %174 = %169.1;
    (%164, %170, %171, %172, %173, meta[relay.Constant][10] /* ty=Tensor[(260), int32] */, %174, meta[relay.Constant][11] /* ty=Tensor[(40), int64] */)
  };
  %175() /* ty=(float64, float64, Tensor[(14, 11, 12), float64], float64, Tensor[(13, 10, 2), int32], Tensor[(260), int32], Tensor[(14, 11, 12), float64], Tensor[(40), int64]) */
}

def @func_3626() -> (Tensor[(13, 2, 11), float64], float64) {
  %176 = @func_2718() /* ty=(Tensor[(13, 2, 11), float64],) */;
  %177 = @func_3055() /* ty=(Tensor[(14, 11, 12), float64], float64, Tensor[(8, 12, 5), uint64], Tensor[(462, 1), float64], Tensor[(13, 2, 11), float64], Tensor[(26, 11), float64]) */;
  %178 = %176.0;
  %179 = %177.1;
  (%178, %179)
}

def @func_4115(%var_4114: Tensor[(5, 13, 16), float64]) -> (Tensor[(14, 3, 11), bool], Tensor[(462), float64], Tensor[(5, 13, 16), uint32], Tensor[(5, 13, 16), int16]) {
  %196 = fn (%var_4089: Tensor[(5, 13, 16), float64]) -> (Tensor[(14, 3, 11), bool], Tensor[(462), float64], Tensor[(5, 13, 16), uint32], Tensor[(5, 13, 16), int16]) {
    %180 = cast(meta[relay.Constant][12] /* ty=Tensor[(462), float64] */, dtype="float64") /* ty=Tensor[(462), float64] */;
    %181 = reshape(%180, newshape=[462]) /* ty=Tensor[(462), float64] */;
    %182 = @func_3711(%181) /* ty=(float64, Tensor[(14, 3, 11), bool], Tensor[(462), float64], float64) */;
    %183 = cast(meta[relay.Constant][13] /* ty=Tensor[(5, 13, 16), float64] */, dtype="float64") /* ty=Tensor[(5, 13, 16), float64] */;
    %184 = atanh(%183) /* ty=Tensor[(5, 13, 16), float64] */;
    %185 = cast(%var_4089, dtype="uint32") /* ty=Tensor[(5, 13, 16), uint32] */;
    %186 = shape_of(%184, dtype="int32") /* ty=Tensor[(3), int32] */;
    %187 = cast(%184, dtype="uint32") /* ty=Tensor[(5, 13, 16), uint32] */;
    %188 = dyn.reshape(%185, %186, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %189 = cast(%var_4089, dtype="int16") /* ty=Tensor[(5, 13, 16), int16] */;
    %190 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(5, 13, 16), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %191 = cast(meta[relay.Constant][13] /* ty=Tensor[(5, 13, 16), float64] */, dtype="int16") /* ty=Tensor[(5, 13, 16), int16] */;
    %192 = dyn.reshape(%189, %190, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %193 = %182.1;
    %194 = multiply(%187, %188) /* ty=Tensor[(5, 13, 16), uint32] */;
    %195 = bitwise_and(%191, %192) /* ty=Tensor[(5, 13, 16), int16] */;
    (%193, meta[relay.Constant][12] /* ty=Tensor[(462), float64] */, %194, %195)
  };
  %196(%var_4114) /* ty=(Tensor[(14, 3, 11), bool], Tensor[(462), float64], Tensor[(5, 13, 16), uint32], Tensor[(5, 13, 16), int16]) */
}

def @func_5668(%var_5638: Tensor[(1040), float64], %var_5641: Tensor[(462), float64], %var_5647: Tensor[(585), int16], %var_5648: float64) -> (Tensor[(14, 11, 12), uint64], Tensor[(1040), float64], Tensor[(462), float64], Tensor[(462), float64], Tensor[(3, 1, 10), int16], Tensor[(5, 10, 7), bool], Tensor[(585), int16], float64, Tensor[(3, 1, 10), int16], Tensor[(5, 13, 16), float64]) {
  %197 = @func_4172() /* ty=(Tensor[(14, 11, 12), float64], Tensor[(5, 10, 7), bool], Tensor[(14, 11, 12), float32]) */;
  %198 = %197.0;
  %199 = cast(meta[relay.Constant][14] /* ty=Tensor[(14, 11, 12), float64] */, dtype="uint64") /* ty=Tensor[(14, 11, 12), uint64] */;
  %200 = shape_of(%198, dtype="int32") /* ty=Tensor[(3), int32] */;
  %201 = cast(%198, dtype="uint64") /* ty=Tensor[(14, 11, 12), uint64] */;
  %202 = dyn.reshape(%199, %200, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %203 = cast(%var_5641, dtype="float64") /* ty=Tensor[(462), float64] */;
  %204 = reshape(%203, newshape=[462]) /* ty=Tensor[(462), float64] */;
  %205 = @func_3711(%204) /* ty=(float64, Tensor[(14, 3, 11), bool], Tensor[(462), float64], float64) */;
  %206 = @func_3581() /* ty=(Tensor[(3, 1, 10), int16],) */;
  %207 = cast(%var_5647, dtype="int16") /* ty=Tensor[(585), int16] */;
  %208 = cast(%var_5647, dtype="int16") /* ty=Tensor[(585), int16] */;
  %209 = cast(%var_5648, dtype="float64") /* ty=float64 */;
  %210 = reshape(%207, newshape=[13, 5, 9]) /* ty=Tensor[(13, 5, 9), int16] */;
  %211 = reshape(%208, newshape=[13, 5, 9]) /* ty=Tensor[(13, 5, 9), int16] */;
  %212 = reshape(%209, newshape=[]) /* ty=float64 */;
  %213 = @func_4210(%210, %211, %212) /* ty=(Tensor[(13, 5, 9), int16], Tensor[(5, 10, 7), bool], float64, Tensor[(14, 11, 12), float64]) */;
  %214 = @func_3581() /* ty=(Tensor[(3, 1, 10), int16],) */;
  %215 = cast(%var_5638, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %216 = reshape(%215, newshape=[5, 13, 16]) /* ty=Tensor[(5, 13, 16), float64] */;
  %217 = @func_4113(%216) /* ty=(Tensor[(14, 3, 11), bool], Tensor[(462), float64], Tensor[(5, 13, 16), uint32], Tensor[(5, 13, 16), int16]) */;
  %218 = %217.3;
  %219 = cast(%218, dtype="float64") /* ty=Tensor[(5, 13, 16), float64] */;
  %220 = left_shift(%201, %202) /* ty=Tensor[(14, 11, 12), uint64] */;
  %221 = %205.2;
  %222 = %206.0;
  %223 = %213.1;
  %224 = %214.0;
  %225 = asin(%219) /* ty=Tensor[(5, 13, 16), float64] */;
  (%220, %var_5638, %221, %var_5641, %222, %223, %var_5647, %var_5648, %224, %225)
}

def @func_2804() -> Tensor[(5, 10, 7), bool] {
  %227 = fn () -> Tensor[(5, 10, 7), bool] {
    %226 = @func_2393() /* ty=(Tensor[(5, 10, 7), bool], Tensor[(14, 11, 12), float64]) */;
    %226.0
  };
  %227() /* ty=Tensor[(5, 10, 7), bool] */
}

def @func_1219(%var_1217: Tensor[(2, 5, 1), int64], %var_1218: Tensor[(2, 5, 6), int64]) -> Tensor[(2, 5, 6), uint8] {
  %235 = fn (%var_1200: Tensor[(2, 5, 1), int64], %var_1201: Tensor[(2, 5, 6), int64]) -> Tensor[(2, 5, 6), uint8] {
    %228 = cast(%var_1200, dtype="int64") /* ty=Tensor[(2, 5, 1), int64] */;
    %229 = cast(%var_1201, dtype="int64") /* ty=Tensor[(2, 5, 6), int64] */;
    %230 = bitwise_xor(%228, %229) /* ty=Tensor[(2, 5, 6), int64] */;
    %231 = cast(%var_1201, dtype="uint8") /* ty=Tensor[(2, 5, 6), uint8] */;
    %232 = shape_of(%230, dtype="int32") /* ty=Tensor[(3), int32] */;
    %233 = cast(%230, dtype="uint8") /* ty=Tensor[(2, 5, 6), uint8] */;
    %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    logical_xor(%233, %234) /* ty=Tensor[(2, 5, 6), uint8] */
  };
  %235(%var_1217, %var_1218) /* ty=Tensor[(2, 5, 6), uint8] */
}

def @func_3215() -> (float64,) {
  %238 = fn () -> (float64,) {
    %236 = @func_2175() /* ty=(float64,) */;
    %237 = %236.0;
    (%237,)
  };
  %238() /* ty=(float64,) */
}

def @func_4215(%var_4212: Tensor[(13, 5, 9), int16], %var_4213: Tensor[(13, 5, 9), int16], %var_4214: float64) -> (Tensor[(13, 5, 9), int16], Tensor[(5, 10, 7), bool], float64, Tensor[(14, 11, 12), float64]) {
  @func_4210(%var_4212, %var_4213, %var_4214) /* ty=(Tensor[(13, 5, 9), int16], Tensor[(5, 10, 7), bool], float64, Tensor[(14, 11, 12), float64]) */
}

def @func_3189(%var_3170: Tensor[(14, 15, 16), float64]) -> (Tensor[(14, 15, 16), float64], float64) {
  %239 = cast(%var_3170, dtype="float64") /* ty=Tensor[(14, 15, 16), float64] */;
  %240 = @func_2543() /* ty=(float64,) */;
  %241 = acos(%239) /* ty=Tensor[(14, 15, 16), float64] */;
  %242 = %240.0;
  (%241, %242)
}

def @func_3229() -> (float64,) {
  @func_3227() /* ty=(float64,) */
}

def @func_561(%var_534: Tensor[(14, 3, 11), float64]) -> (Tensor[(14, 3, 11), bool], Tensor[(8, 12, 5), uint64], Tensor[(120, 4), float32]) {
  %243 = cast(%var_534, dtype="float64") /* ty=Tensor[(14, 3, 11), float64] */;
  %244 = rsqrt(%243) /* ty=Tensor[(14, 3, 11), float64] */;
  %245 = cast(%var_534, dtype="bool") /* ty=Tensor[(14, 3, 11), bool] */;
  %246 = shape_of(%244, dtype="int32") /* ty=Tensor[(3), int32] */;
  %247 = cast(%244, dtype="bool") /* ty=Tensor[(14, 3, 11), bool] */;
  %248 = dyn.reshape(%245, %246, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %249 = cast(meta[relay.Constant][15] /* ty=Tensor[(120, 4), float32] */, dtype="float32") /* ty=Tensor[(120, 4), float32] */;
  %250 = cast(meta[relay.Constant][15] /* ty=Tensor[(120, 4), float32] */, dtype="float32") /* ty=Tensor[(120, 4), float32] */;
  %251 = reshape(%249, newshape=[8, 12, 5]) /* ty=Tensor[(8, 12, 5), float32] */;
  %252 = reshape(%250, newshape=[8, 12, 5]) /* ty=Tensor[(8, 12, 5), float32] */;
  %253 = @func_212(%251, %252) /* ty=(Tensor[(8, 12, 5), uint64], Tensor[(8, 12, 5), float32], Tensor[(8, 12, 5), float32], Tensor[(8, 12, 5), float32]) */;
  %254 = not_equal(%247, %248) /* ty=Tensor[(14, 3, 11), bool] */;
  %255 = %253.0;
  (%254, %255, meta[relay.Constant][15] /* ty=Tensor[(120, 4), float32] */)
}

def @func_2303(%var_2275: int64, %var_2276: Tensor[(1, 8, 5), int64]) -> (Tensor[(1, 8, 5), int64], Tensor[(14, 11, 12), float64]) {
  %256 = cast(%var_2275, dtype="int64") /* ty=int64 */;
  %257 = cast(%var_2276, dtype="int64") /* ty=Tensor[(1, 8, 5), int64] */;
  %258 = logical_xor(%256, %257) /* ty=Tensor[(1, 8, 5), int64] */;
  %259 = @func_1886() /* ty=Tensor[(14, 11, 12), float64] */;
  (%258, %259)
}

def @func_3056() -> (Tensor[(14, 11, 12), float64], float64, Tensor[(8, 12, 5), uint64], Tensor[(462, 1), float64], Tensor[(13, 2, 11), float64], Tensor[(26, 11), float64]) {
  %272 = fn () -> (Tensor[(14, 11, 12), float64], float64, Tensor[(8, 12, 5), uint64], Tensor[(462, 1), float64], Tensor[(13, 2, 11), float64], Tensor[(26, 11), float64]) {
    %260 = @func_2393() /* ty=(Tensor[(5, 10, 7), bool], Tensor[(14, 11, 12), float64]) */;
    %261 = @func_2543() /* ty=(float64,) */;
    %262 = cast(meta[relay.Constant][16] /* ty=Tensor[(462, 1), float64] */, dtype="float64") /* ty=Tensor[(462, 1), float64] */;
    %263 = reshape(%262, newshape=[14, 3, 11]) /* ty=Tensor[(14, 3, 11), float64] */;
    %264 = @func_561(%263) /* ty=(Tensor[(14, 3, 11), bool], Tensor[(8, 12, 5), uint64], Tensor[(120, 4), float32]) */;
    %265 = cast(meta[relay.Constant][17] /* ty=Tensor[(26, 11), float64] */, dtype="float64") /* ty=Tensor[(26, 11), float64] */;
    %266 = reshape(%265, newshape=[13, 2, 11]) /* ty=Tensor[(13, 2, 11), float64] */;
    %267 = @func_2847(%266) /* ty=(Tensor[(13, 2, 11), float64],) */;
    %268 = %260.1;
    %269 = %261.0;
    %270 = %264.1;
    %271 = %267.0;
    (%268, %269, %270, meta[relay.Constant][16] /* ty=Tensor[(462, 1), float64] */, %271, meta[relay.Constant][17] /* ty=Tensor[(26, 11), float64] */)
  };
  %272() /* ty=(Tensor[(14, 11, 12), float64], float64, Tensor[(8, 12, 5), uint64], Tensor[(462, 1), float64], Tensor[(13, 2, 11), float64], Tensor[(26, 11), float64]) */
}

def @func_3305() -> float64 {
  %273 = @func_2175() /* ty=(float64,) */;
  %273.0
}

def @func_3826() -> (float64, float64) {
  @func_3824() /* ty=(float64, float64) */
}

def @func_1673() -> (Tensor[(14, 11, 12), float64],) {
  %276 = fn () -> (Tensor[(14, 11, 12), float64],) {
    %274 = @func_1499() /* ty=(Tensor[(14, 11, 12), float64], Tensor[(14, 11, 12), float64], Tensor[(5, 10, 7), bool], float64) */;
    %275 = %274.1;
    (%275,)
  };
  %276() /* ty=(Tensor[(14, 11, 12), float64],) */
}

def @func_2418() -> float64 {
  @func_2416() /* ty=float64 */
}

def @func_3895(%var_3894: Tensor[(15, 9, 2), float32]) -> (Tensor[(15, 9, 2), float64],) {
  %281 = fn (%var_3883: Tensor[(15, 9, 2), float32]) -> (Tensor[(15, 9, 2), float64],) {
    %277 = cast(%var_3883, dtype="float32") /* ty=Tensor[(15, 9, 2), float32] */;
    %278 = asin(%277) /* ty=Tensor[(15, 9, 2), float32] */;
    %279 = cast(%278, dtype="float64") /* ty=Tensor[(15, 9, 2), float64] */;
    %280 = tan(%279) /* ty=Tensor[(15, 9, 2), float64] */;
    (%280,)
  };
  %281(%var_3894) /* ty=(Tensor[(15, 9, 2), float64],) */
}

def @func_6328(%var_6327: Tensor[(11, 9, 16), uint8]) -> Tensor[(11, 9, 16), uint8] {
  %286 = fn (%var_6321: Tensor[(11, 9, 16), uint8]) -> Tensor[(11, 9, 16), uint8] {
    %282 = cast(meta[relay.Constant][18] /* ty=Tensor[(11, 9, 16), uint8] */, dtype="uint8") /* ty=Tensor[(11, 9, 16), uint8] */;
    %283 = shape_of(%var_6321, dtype="int32") /* ty=Tensor[(3), int32] */;
    %284 = cast(%var_6321, dtype="uint8") /* ty=Tensor[(11, 9, 16), uint8] */;
    %285 = dyn.reshape(%282, %283, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    logical_xor(%284, %285) /* ty=Tensor[(11, 9, 16), uint8] */
  };
  %286(%var_6327) /* ty=Tensor[(11, 9, 16), uint8] */
}

def @func_2944(%var_2929: uint16, %var_2930: Tensor[(3, 2, 13), uint16]) -> (Tensor[(3, 2, 13), uint16], Tensor[(5, 10, 7), bool], Tensor[(12, 70), float32], Tensor[(3, 2, 13), float64]) {
  %287 = cast(%var_2929, dtype="uint16") /* ty=uint16 */;
  %288 = cast(%var_2930, dtype="uint16") /* ty=Tensor[(3, 2, 13), uint16] */;
  %289 = cast(meta[relay.Constant][19] /* ty=Tensor[(12, 70), float32] */, dtype="float32") /* ty=Tensor[(12, 70), float32] */;
  %290 = cast(%var_2929, dtype="float64") /* ty=float64 */;
  %291 = reshape(%289, newshape=[7, 8, 15]) /* ty=Tensor[(7, 8, 15), float32] */;
  %292 = reshape(%290, newshape=[]) /* ty=float64 */;
  %293 = @func_1007(%291, %292) /* ty=(Tensor[(7, 8, 15), float32], Tensor[(5, 10, 7), bool], float64) */;
  %294 = cast(%var_2930, dtype="float64") /* ty=Tensor[(3, 2, 13), float64] */;
  %295 = logical_xor(%287, %288) /* ty=Tensor[(3, 2, 13), uint16] */;
  %296 = %293.1;
  %297 = asin(%294) /* ty=Tensor[(3, 2, 13), float64] */;
  (%295, %296, meta[relay.Constant][19] /* ty=Tensor[(12, 70), float32] */, %297)
}

def @func_6011() -> (Tensor[(5, 10, 7), float64],) {
  %298 = @func_5546() /* ty=Tensor[(5, 10, 7), float64] */;
  (%298,)
}

def @func_1104(%var_1102: Tensor[(10, 9, 4), float64]) -> (Tensor[(10, 9, 4), float64], Tensor[(10, 9, 4), float32]) {
  @func_1101(%var_1102) /* ty=(Tensor[(10, 9, 4), float64], Tensor[(10, 9, 4), float32]) */
}

def @func_2307(%var_2305: int64, %var_2306: Tensor[(1, 8, 5), int64]) -> (Tensor[(1, 8, 5), int64], Tensor[(14, 11, 12), float64]) {
  @func_2303(%var_2305, %var_2306) /* ty=(Tensor[(1, 8, 5), int64], Tensor[(14, 11, 12), float64]) */
}

def @func_2849(%var_2848: Tensor[(13, 2, 11), float64]) -> (Tensor[(13, 2, 11), float64],) {
  %308 = fn (%var_2834: Tensor[(13, 2, 11), float64]) -> (Tensor[(13, 2, 11), float64],) {
    %299 = @func_2718() /* ty=(Tensor[(13, 2, 11), float64],) */;
    %300 = %299.0;
    %301 = cast(%var_2834, dtype="bool") /* ty=Tensor[(13, 2, 11), bool] */;
    %302 = shape_of(%300, dtype="int32") /* ty=Tensor[(3), int32] */;
    %303 = cast(%300, dtype="bool") /* ty=Tensor[(13, 2, 11), bool] */;
    %304 = dyn.reshape(%301, %302, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %305 = logical_or(%303, %304) /* ty=Tensor[(13, 2, 11), bool] */;
    %306 = cast(%305, dtype="float64") /* ty=Tensor[(13, 2, 11), float64] */;
    %307 = log(%306) /* ty=Tensor[(13, 2, 11), float64] */;
    (%307,)
  };
  %308(%var_2848) /* ty=(Tensor[(13, 2, 11), float64],) */
}

def @func_5114(%var_5111: Tensor[(13, 10), float32], %var_5112: Tensor[(1040), float64], %var_5113: Tensor[(180, 2), float64]) -> (Tensor[(13, 10), float32], float64, Tensor[(5, 13, 16), uint32], Tensor[(1040), float64], Tensor[(120, 4), float32], Tensor[(462), float64], Tensor[(5, 10, 7), bool], Tensor[(10, 9, 4), float64], Tensor[(180, 2), float64]) {
  %327 = fn (%var_5051: Tensor[(13, 10), float32], %var_5073: Tensor[(1040), float64], %var_5097: Tensor[(180, 2), float64]) -> (Tensor[(13, 10), float32], float64, Tensor[(5, 13, 16), uint32], Tensor[(1040), float64], Tensor[(120, 4), float32], Tensor[(462), float64], Tensor[(5, 10, 7), bool], Tensor[(10, 9, 4), float64], Tensor[(180, 2), float64]) {
    %309 = cast(%var_5051, dtype="float32") /* ty=Tensor[(13, 10), float32] */;
    %310 = @func_1540() /* ty=(float64,) */;
    %311 = cast(%var_5073, dtype="float64") /* ty=Tensor[(1040), float64] */;
    %312 = reshape(%311, newshape=[5, 13, 16]) /* ty=Tensor[(5, 13, 16), float64] */;
    %313 = @func_4113(%312) /* ty=(Tensor[(14, 3, 11), bool], Tensor[(462), float64], Tensor[(5, 13, 16), uint32], Tensor[(5, 13, 16), int16]) */;
    %314 = cast(meta[relay.Constant][20] /* ty=Tensor[(462), float64] */, dtype="float64") /* ty=Tensor[(462), float64] */;
    %315 = reshape(%314, newshape=[14, 3, 11]) /* ty=Tensor[(14, 3, 11), float64] */;
    %316 = @func_561(%315) /* ty=(Tensor[(14, 3, 11), bool], Tensor[(8, 12, 5), uint64], Tensor[(120, 4), float32]) */;
    %317 = @func_1499() /* ty=(Tensor[(14, 11, 12), float64], Tensor[(14, 11, 12), float64], Tensor[(5, 10, 7), bool], float64) */;
    %318 = cast(%var_5097, dtype="float64") /* ty=Tensor[(180, 2), float64] */;
    %319 = reshape(%318, newshape=[10, 9, 4]) /* ty=Tensor[(10, 9, 4), float64] */;
    %320 = @func_1101(%319) /* ty=(Tensor[(10, 9, 4), float64], Tensor[(10, 9, 4), float32]) */;
    %321 = exp(%309) /* ty=Tensor[(13, 10), float32] */;
    %322 = %310.0;
    %323 = %313.2;
    %324 = %316.2;
    %325 = %317.2;
    %326 = %320.0;
    (%321, %322, %323, %var_5073, %324, meta[relay.Constant][20] /* ty=Tensor[(462), float64] */, %325, %326, %var_5097)
  };
  %327(%var_5111, %var_5112, %var_5113) /* ty=(Tensor[(13, 10), float32], float64, Tensor[(5, 13, 16), uint32], Tensor[(1040), float64], Tensor[(120, 4), float32], Tensor[(462), float64], Tensor[(5, 10, 7), bool], Tensor[(10, 9, 4), float64], Tensor[(180, 2), float64]) */
}

def @func_5161(%var_5118: Tensor[(15, 11, 11), int32], %var_5155: Tensor[(15, 11, 11), int32]) -> (Tensor[(15, 11, 11), int32], Tensor[(15, 11, 11), float64]) {
  %328 = cast(meta[relay.Constant][21] /* ty=Tensor[(15, 11, 11), int32] */, dtype="int32") /* ty=Tensor[(15, 11, 11), int32] */;
  %329 = shape_of(%var_5118, dtype="int32") /* ty=Tensor[(3), int32] */;
  %330 = cast(%var_5118, dtype="int32") /* ty=Tensor[(15, 11, 11), int32] */;
  %331 = dyn.reshape(%328, %329, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %332 = cast(%var_5155, dtype="float64") /* ty=Tensor[(15, 11, 11), float64] */;
  %333 = shape_of(%var_5118, dtype="int32") /* ty=Tensor[(3), int32] */;
  %334 = cast(%var_5118, dtype="float64") /* ty=Tensor[(15, 11, 11), float64] */;
  %335 = dyn.reshape(%332, %333, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %336 = multiply(%330, %331) /* ty=Tensor[(15, 11, 11), int32] */;
  %337 = mod(%334, %335) /* ty=Tensor[(15, 11, 11), float64] */;
  (%336, %337)
}

def @func_1456(%var_1439: Tensor[(10, 15, 11), uint8], %var_1440: Tensor[(10, 15, 11), uint8]) -> (Tensor[(10, 15, 11), uint8], Tensor[(10, 15, 11), float32]) {
  %338 = cast(%var_1440, dtype="uint8") /* ty=Tensor[(10, 15, 11), uint8] */;
  %339 = shape_of(%var_1439, dtype="int32") /* ty=Tensor[(3), int32] */;
  %340 = cast(%var_1439, dtype="uint8") /* ty=Tensor[(10, 15, 11), uint8] */;
  %341 = dyn.reshape(%338, %339, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %342 = cast(%var_1439, dtype="float32") /* ty=Tensor[(10, 15, 11), float32] */;
  %343 = shape_of(%var_1440, dtype="int32") /* ty=Tensor[(3), int32] */;
  %344 = cast(%var_1440, dtype="float32") /* ty=Tensor[(10, 15, 11), float32] */;
  %345 = dyn.reshape(%342, %343, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %346 = bitwise_xor(%340, %341) /* ty=Tensor[(10, 15, 11), uint8] */;
  %347 = mod(%344, %345) /* ty=Tensor[(10, 15, 11), float32] */;
  (%346, %347)
}

def @func_4713(%var_4711: Tensor[(5, 13, 16), uint32]) -> (Tensor[(5, 13, 16), uint32], Tensor[(40, 26), float64], Tensor[(5, 10, 7), float32]) {
  @func_4710(%var_4711) /* ty=(Tensor[(5, 13, 16), uint32], Tensor[(40, 26), float64], Tensor[(5, 10, 7), float32]) */
}

def @func_1500() -> (Tensor[(14, 11, 12), float64], Tensor[(14, 11, 12), float64], Tensor[(5, 10, 7), bool], float64) {
  %355 = fn () -> (Tensor[(14, 11, 12), float64], Tensor[(14, 11, 12), float64], Tensor[(5, 10, 7), bool], float64) {
    %348 = cast(meta[relay.Constant][22] /* ty=Tensor[(14, 11, 12), float64] */, dtype="float64") /* ty=Tensor[(14, 11, 12), float64] */;
    %349 = cast(meta[relay.Constant][22] /* ty=Tensor[(14, 11, 12), float64] */, dtype="float64") /* ty=Tensor[(14, 11, 12), float64] */;
    %350 = cast(-1.47578f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %351 = reshape(%350, newshape=[]) /* ty=float64 */;
    %352 = sinh(%348) /* ty=Tensor[(14, 11, 12), float64] */;
    %353 = rsqrt(%349) /* ty=Tensor[(14, 11, 12), float64] */;
    %354 = @func_846(%351) /* ty=Tensor[(5, 10, 7), bool] */;
    (%352, %353, %354, -1.47578f64 /* ty=float64 */)
  };
  %355() /* ty=(Tensor[(14, 11, 12), float64], Tensor[(14, 11, 12), float64], Tensor[(5, 10, 7), bool], float64) */
}

def @func_251(%var_226: Tensor[(3, 6, 10), float32], %var_227: Tensor[(3, 6, 10), float32]) -> (Tensor[(3, 6, 10), float32], Tensor[(8, 12, 5), uint64], Tensor[(40, 12), float32], Tensor[(3, 6, 10), float32]) {
  %356 = cast(%var_227, dtype="float32") /* ty=Tensor[(3, 6, 10), float32] */;
  %357 = shape_of(%var_226, dtype="int32") /* ty=Tensor[(3), int32] */;
  %358 = cast(%var_226, dtype="float32") /* ty=Tensor[(3, 6, 10), float32] */;
  %359 = dyn.reshape(%356, %357, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %360 = cast(meta[relay.Constant][23] /* ty=Tensor[(40, 12), float32] */, dtype="float32") /* ty=Tensor[(40, 12), float32] */;
  %361 = cast(meta[relay.Constant][23] /* ty=Tensor[(40, 12), float32] */, dtype="float32") /* ty=Tensor[(40, 12), float32] */;
  %362 = reshape(%360, newshape=[8, 12, 5]) /* ty=Tensor[(8, 12, 5), float32] */;
  %363 = reshape(%361, newshape=[8, 12, 5]) /* ty=Tensor[(8, 12, 5), float32] */;
  %364 = @func_212(%362, %363) /* ty=(Tensor[(8, 12, 5), uint64], Tensor[(8, 12, 5), float32], Tensor[(8, 12, 5), float32], Tensor[(8, 12, 5), float32]) */;
  %365 = cast(%var_226, dtype="float32") /* ty=Tensor[(3, 6, 10), float32] */;
  %366 = power(%358, %359) /* ty=Tensor[(3, 6, 10), float32] */;
  %367 = %364.0;
  %368 = sigmoid(%365) /* ty=Tensor[(3, 6, 10), float32] */;
  (%366, %367, meta[relay.Constant][23] /* ty=Tensor[(40, 12), float32] */, %368)
}

def @func_4828(%var_4826: Tensor[(270), float32]) -> (float64, Tensor[(15, 9, 2), float64], Tensor[(270), float32]) {
  @func_4825(%var_4826) /* ty=(float64, Tensor[(15, 9, 2), float64], Tensor[(270), float32]) */
}

def @func_5195(%var_5193: Tensor[(13, 12, 2), int32], %var_5194: Tensor[(13, 12, 2), int32]) -> Tensor[(13, 12, 2), bool] {
  @func_5191(%var_5193, %var_5194) /* ty=Tensor[(13, 12, 2), bool] */
}

def @func_4609(%var_4608: Tensor[(12, 2, 1), float64]) -> (Tensor[(12, 2, 1), bool],) {
  %374 = fn (%var_4602: Tensor[(12, 2, 1), float64]) -> (Tensor[(12, 2, 1), bool],) {
    %369 = @func_3384() /* ty=(float64,) */;
    %370 = %369.0;
    %371 = cast(%370, dtype="bool") /* ty=bool */;
    %372 = cast(%var_4602, dtype="bool") /* ty=Tensor[(12, 2, 1), bool] */;
    %373 = logical_and(%371, %372) /* ty=Tensor[(12, 2, 1), bool] */;
    (%373,)
  };
  %374(%var_4608) /* ty=(Tensor[(12, 2, 1), bool],) */
}

def @func_564(%var_562: Tensor[(14, 3, 11), float64]) -> (Tensor[(14, 3, 11), bool], Tensor[(8, 12, 5), uint64], Tensor[(120, 4), float32]) {
  @func_561(%var_562) /* ty=(Tensor[(14, 3, 11), bool], Tensor[(8, 12, 5), uint64], Tensor[(120, 4), float32]) */
}

def @func_2544() -> (float64,) {
  %376 = fn () -> (float64,) {
    %375 = @func_2146() /* ty=float64 */;
    (%375,)
  };
  %376() /* ty=(float64,) */
}

def @func_4982() -> (Tensor[(6, 6, 8), uint16],) {
  %382 = fn () -> (Tensor[(6, 6, 8), uint16],) {
    %377 = cast(meta[relay.Constant][25] /* ty=Tensor[(6, 6, 8), uint16] */, dtype="uint16") /* ty=Tensor[(6, 6, 8), uint16] */;
    %378 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(6, 6, 8), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %379 = cast(meta[relay.Constant][24] /* ty=Tensor[(6, 6, 8), uint16] */, dtype="uint16") /* ty=Tensor[(6, 6, 8), uint16] */;
    %380 = dyn.reshape(%377, %378, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %381 = bitwise_xor(%379, %380) /* ty=Tensor[(6, 6, 8), uint16] */;
    (%381,)
  };
  %382() /* ty=(Tensor[(6, 6, 8), uint16],) */
}

def @func_3853(%var_3851: Tensor[(13, 10, 2), int32], %var_3852: Tensor[(13, 10, 2), int32]) -> (Tensor[(13, 10, 2), int32],) {
  %388 = fn (%var_3844: Tensor[(13, 10, 2), int32], %var_3845: Tensor[(13, 10, 2), int32]) -> (Tensor[(13, 10, 2), int32],) {
    %383 = cast(%var_3845, dtype="int32") /* ty=Tensor[(13, 10, 2), int32] */;
    %384 = shape_of(%var_3844, dtype="int32") /* ty=Tensor[(3), int32] */;
    %385 = cast(%var_3844, dtype="int32") /* ty=Tensor[(13, 10, 2), int32] */;
    %386 = dyn.reshape(%383, %384, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %387 = subtract(%385, %386) /* ty=Tensor[(13, 10, 2), int32] */;
    (%387,)
  };
  %388(%var_3851, %var_3852) /* ty=(Tensor[(13, 10, 2), int32],) */
}

def @func_5205() -> Tensor[(13, 2, 15), float32] {
  %390 = fn () -> Tensor[(13, 2, 15), float32] {
    %389 = cast(meta[relay.Constant][26] /* ty=Tensor[(13, 2, 15), float32] */, dtype="float32") /* ty=Tensor[(13, 2, 15), float32] */;
    log(%389) /* ty=Tensor[(13, 2, 15), float32] */
  };
  %390() /* ty=Tensor[(13, 2, 15), float32] */
}

def @func_2146() -> float64 {
  %391 = @func_2022() /* ty=(float64,) */;
  %391.0
}

def @func_2576(%var_2574: Tensor[(9, 1, 12), float32]) -> (Tensor[(9, 1, 12), float32], Tensor[(5, 10, 7), bool]) {
  @func_2573(%var_2574) /* ty=(Tensor[(9, 1, 12), float32], Tensor[(5, 10, 7), bool]) */
}

def @func_6056(%var_6054: Tensor[(480), float32]) -> (Tensor[(5, 10, 7), bool], Tensor[(8, 12, 5), float32], Tensor[(480), float32], Tensor[(10, 9, 4), float64], Tensor[(360), float64]) {
  @func_6053(%var_6054) /* ty=(Tensor[(5, 10, 7), bool], Tensor[(8, 12, 5), float32], Tensor[(480), float32], Tensor[(10, 9, 4), float64], Tensor[(360), float64]) */
}

def @func_2175() -> (float64,) {
  %392 = @func_1540() /* ty=(float64,) */;
  %393 = %392.0;
  (%393,)
}

def @func_5388(%var_5367: Tensor[(77, 6), float64]) -> (float64, Tensor[(120, 4), float32], Tensor[(77, 6), float64], Tensor[(14, 11, 12), float64], Tensor[(40), int64], Tensor[(13, 11, 5), float32], Tensor[(715, 1), float32]) {
  %394 = @func_3824() /* ty=(float64, float64) */;
  %395 = cast(%var_5367, dtype="float64") /* ty=Tensor[(77, 6), float64] */;
  %396 = reshape(%395, newshape=[14, 3, 11]) /* ty=Tensor[(14, 3, 11), float64] */;
  %397 = @func_561(%396) /* ty=(Tensor[(14, 3, 11), bool], Tensor[(8, 12, 5), uint64], Tensor[(120, 4), float32]) */;
  %398 = %394.0;
  %399 = cast(%398, dtype="int64") /* ty=int64 */;
  %400 = cast(meta[relay.Constant][27] /* ty=Tensor[(40), int64] */, dtype="int64") /* ty=Tensor[(40), int64] */;
  %401 = reshape(%399, newshape=[]) /* ty=int64 */;
  %402 = reshape(%400, newshape=[1, 8, 5]) /* ty=Tensor[(1, 8, 5), int64] */;
  %403 = @func_2303(%401, %402) /* ty=(Tensor[(1, 8, 5), int64], Tensor[(14, 11, 12), float64]) */;
  %404 = cast(meta[relay.Constant][28] /* ty=Tensor[(715, 1), float32] */, dtype="float32") /* ty=Tensor[(715, 1), float32] */;
  %405 = cast(meta[relay.Constant][28] /* ty=Tensor[(715, 1), float32] */, dtype="float32") /* ty=Tensor[(715, 1), float32] */;
  %406 = reshape(%404, newshape=[13, 11, 5]) /* ty=Tensor[(13, 11, 5), float32] */;
  %407 = reshape(%405, newshape=[13, 11, 5]) /* ty=Tensor[(13, 11, 5), float32] */;
  %408 = @func_1951(%406, %407) /* ty=(Tensor[(13, 11, 5), float32],) */;
  %409 = %397.2;
  %410 = %403.1;
  %411 = %408.0;
  (%398, %409, %var_5367, %410, meta[relay.Constant][27] /* ty=Tensor[(40), int64] */, %411, meta[relay.Constant][28] /* ty=Tensor[(715, 1), float32] */)
}

def @func_5509() -> (Tensor[(14, 11, 12), float64],) {
  %414 = fn () -> (Tensor[(14, 11, 12), float64],) {
    %412 = @func_1672() /* ty=(Tensor[(14, 11, 12), float64],) */;
    %413 = %412.0;
    (%413,)
  };
  %414() /* ty=(Tensor[(14, 11, 12), float64],) */
}

def @func_3686() -> (Tensor[(5, 10, 7), bool], Tensor[(5, 10, 7), bool], Tensor[(14, 11, 12), float32]) {
  @func_3684() /* ty=(Tensor[(5, 10, 7), bool], Tensor[(5, 10, 7), bool], Tensor[(14, 11, 12), float32]) */
}

def @func_6053(%var_6046: Tensor[(480), float32]) -> (Tensor[(5, 10, 7), bool], Tensor[(8, 12, 5), float32], Tensor[(480), float32], Tensor[(10, 9, 4), float64], Tensor[(360), float64]) {
  %415 = @func_3762() /* ty=(Tensor[(5, 10, 7), bool],) */;
  %416 = cast(%var_6046, dtype="float32") /* ty=Tensor[(480), float32] */;
  %417 = cast(%var_6046, dtype="float32") /* ty=Tensor[(480), float32] */;
  %418 = reshape(%416, newshape=[8, 12, 5]) /* ty=Tensor[(8, 12, 5), float32] */;
  %419 = reshape(%417, newshape=[8, 12, 5]) /* ty=Tensor[(8, 12, 5), float32] */;
  %420 = @func_212(%418, %419) /* ty=(Tensor[(8, 12, 5), uint64], Tensor[(8, 12, 5), float32], Tensor[(8, 12, 5), float32], Tensor[(8, 12, 5), float32]) */;
  %421 = cast(meta[relay.Constant][29] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %422 = reshape(%421, newshape=[10, 9, 4]) /* ty=Tensor[(10, 9, 4), float64] */;
  %423 = @func_1101(%422) /* ty=(Tensor[(10, 9, 4), float64], Tensor[(10, 9, 4), float32]) */;
  %424 = %415.0;
  %425 = %420.2;
  %426 = %423.0;
  (%424, %425, %var_6046, %426, meta[relay.Constant][29] /* ty=Tensor[(360), float64] */)
}

def @func_4741() -> (float64, Tensor[(14, 11, 12), float64], Tensor[(672), int64]) {
  @func_4739() /* ty=(float64, Tensor[(14, 11, 12), float64], Tensor[(672), int64]) */
}

def @func_255(%var_253: Tensor[(3, 6, 10), float32], %var_254: Tensor[(3, 6, 10), float32]) -> (Tensor[(3, 6, 10), float32], Tensor[(8, 12, 5), uint64], Tensor[(40, 12), float32], Tensor[(3, 6, 10), float32]) {
  @func_251(%var_253, %var_254) /* ty=(Tensor[(3, 6, 10), float32], Tensor[(8, 12, 5), uint64], Tensor[(40, 12), float32], Tensor[(3, 6, 10), float32]) */
}

def @func_4650(%var_4648: Tensor[(13, 2, 11), float64]) -> (Tensor[(13, 2, 11), float64], Tensor[(13, 2, 11), float64]) {
  @func_4647(%var_4648) /* ty=(Tensor[(13, 2, 11), float64], Tensor[(13, 2, 11), float64]) */
}

def @func_846(%var_838: float64) -> Tensor[(5, 10, 7), bool] {
  %427 = cast(%var_838, dtype="float64") /* ty=float64 */;
  %428 = cast(meta[relay.Constant][30] /* ty=Tensor[(5, 10, 7), float64] */, dtype="float64") /* ty=Tensor[(5, 10, 7), float64] */;
  %429 = add(%427, %428) /* ty=Tensor[(5, 10, 7), float64] */;
  %430 = cast(%429, dtype="bool") /* ty=Tensor[(5, 10, 7), bool] */;
  %431 = cast(%var_838, dtype="bool") /* ty=bool */;
  not_equal(%430, %431) /* ty=Tensor[(5, 10, 7), bool] */
}

def @func_5850() -> float64 {
  %433 = fn () -> float64 {
    %432 = @func_3055() /* ty=(Tensor[(14, 11, 12), float64], float64, Tensor[(8, 12, 5), uint64], Tensor[(462, 1), float64], Tensor[(13, 2, 11), float64], Tensor[(26, 11), float64]) */;
    %432.1
  };
  %433() /* ty=float64 */
}

def @func_1101(%var_1077: Tensor[(10, 9, 4), float64]) -> (Tensor[(10, 9, 4), float64], Tensor[(10, 9, 4), float32]) {
  %434 = cast(%var_1077, dtype="float64") /* ty=Tensor[(10, 9, 4), float64] */;
  %435 = cast(%var_1077, dtype="float32") /* ty=Tensor[(10, 9, 4), float32] */;
  %436 = sin(%434) /* ty=Tensor[(10, 9, 4), float64] */;
  %437 = sinh(%435) /* ty=Tensor[(10, 9, 4), float32] */;
  (%436, %437)
}

def @func_5966(%var_5964: Tensor[(2, 1200), bool]) -> (Tensor[(13, 2, 11), float64], Tensor[(15, 10, 16), uint16], float64) {
  @func_5963(%var_5964) /* ty=(Tensor[(13, 2, 11), float64], Tensor[(15, 10, 16), uint16], float64) */
}

def @func_5547() -> Tensor[(5, 10, 7), float64] {
  %441 = fn () -> Tensor[(5, 10, 7), float64] {
    %438 = @func_3762() /* ty=(Tensor[(5, 10, 7), bool],) */;
    %439 = %438.0;
    %440 = cast(%439, dtype="float64") /* ty=Tensor[(5, 10, 7), float64] */;
    acos(%440) /* ty=Tensor[(5, 10, 7), float64] */
  };
  %441() /* ty=Tensor[(5, 10, 7), float64] */
}

def @func_4071() -> Tensor[(14, 11, 12), float64] {
  @func_4069() /* ty=Tensor[(14, 11, 12), float64] */
}

def @func_1362(%var_1360: Tensor[(4, 5, 12), float32]) -> (Tensor[(4, 5, 12), float32], Tensor[(4, 5, 12), float32]) {
  @func_1359(%var_1360) /* ty=(Tensor[(4, 5, 12), float32], Tensor[(4, 5, 12), float32]) */
}

def @func_5329(%var_5326: Tensor[(5, 3, 13), float64], %var_5327: Tensor[(5, 3, 13), float64], %var_5328: Tensor[(5, 3, 13), float64]) -> (Tensor[(5, 3, 13), uint8], Tensor[(13, 2, 11), float64], Tensor[(286), float64], Tensor[(14, 11, 12), float32], Tensor[(5, 3, 13), bool], Tensor[(10, 9, 4), float64], Tensor[(360), float64]) {
  %463 = fn (%var_5288: Tensor[(5, 3, 13), float64], %var_5302: Tensor[(5, 3, 13), float64], %var_5318: Tensor[(5, 3, 13), float64]) -> (Tensor[(5, 3, 13), uint8], Tensor[(13, 2, 11), float64], Tensor[(286), float64], Tensor[(14, 11, 12), float32], Tensor[(5, 3, 13), bool], Tensor[(10, 9, 4), float64], Tensor[(360), float64]) {
    %442 = cast(%var_5288, dtype="float64") /* ty=Tensor[(5, 3, 13), float64] */;
    %443 = sinh(%442) /* ty=Tensor[(5, 3, 13), float64] */;
    %444 = cast(%var_5302, dtype="uint8") /* ty=Tensor[(5, 3, 13), uint8] */;
    %445 = shape_of(%443, dtype="int32") /* ty=Tensor[(3), int32] */;
    %446 = cast(%443, dtype="uint8") /* ty=Tensor[(5, 3, 13), uint8] */;
    %447 = dyn.reshape(%444, %445, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %448 = cast(meta[relay.Constant][31] /* ty=Tensor[(286), float64] */, dtype="float64") /* ty=Tensor[(286), float64] */;
    %449 = reshape(%448, newshape=[13, 2, 11]) /* ty=Tensor[(13, 2, 11), float64] */;
    %450 = @func_2847(%449) /* ty=(Tensor[(13, 2, 11), float64],) */;
    %451 = cast(%var_5318, dtype="bool") /* ty=Tensor[(5, 3, 13), bool] */;
    %452 = shape_of(%443, dtype="int32") /* ty=Tensor[(3), int32] */;
    %453 = cast(%443, dtype="bool") /* ty=Tensor[(5, 3, 13), bool] */;
    %454 = dyn.reshape(%451, %452, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %455 = cast(meta[relay.Constant][32] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
    %456 = reshape(%455, newshape=[10, 9, 4]) /* ty=Tensor[(10, 9, 4), float64] */;
    %457 = @func_1101(%456) /* ty=(Tensor[(10, 9, 4), float64], Tensor[(10, 9, 4), float32]) */;
    %458 = bitwise_or(%446, %447) /* ty=Tensor[(5, 3, 13), uint8] */;
    %459 = %450.0;
    %460 = @func_2469() /* ty=Tensor[(14, 11, 12), float32] */;
    %461 = less_equal(%453, %454) /* ty=Tensor[(5, 3, 13), bool] */;
    %462 = %457.0;
    (%458, %459, meta[relay.Constant][31] /* ty=Tensor[(286), float64] */, %460, %461, %462, meta[relay.Constant][32] /* ty=Tensor[(360), float64] */)
  };
  %463(%var_5326, %var_5327, %var_5328) /* ty=(Tensor[(5, 3, 13), uint8], Tensor[(13, 2, 11), float64], Tensor[(286), float64], Tensor[(14, 11, 12), float32], Tensor[(5, 3, 13), bool], Tensor[(10, 9, 4), float64], Tensor[(360), float64]) */
}

def @func_3385() -> (float64,) {
  %466 = fn () -> (float64,) {
    %464 = @func_1540() /* ty=(float64,) */;
    %465 = %464.0;
    (%465,)
  };
  %466() /* ty=(float64,) */
}

def @func_4385() -> (Tensor[(5, 10, 7), bool],) {
  %469 = fn () -> (Tensor[(5, 10, 7), bool],) {
    %467 = @func_4172() /* ty=(Tensor[(14, 11, 12), float64], Tensor[(5, 10, 7), bool], Tensor[(14, 11, 12), float32]) */;
    %468 = %467.1;
    (%468,)
  };
  %469() /* ty=(Tensor[(5, 10, 7), bool],) */
}

def @func_4510() -> float64 {
  %471 = fn () -> float64 {
    %470 = @func_3214() /* ty=(float64,) */;
    %470.0
  };
  %471() /* ty=float64 */
}

def @func_2102(%var_2097: Tensor[(4, 4, 9), uint32]) -> Tensor[(4, 4, 9), uint32] {
  %472 = cast(meta[relay.Constant][33] /* ty=Tensor[(4, 4, 9), uint32] */, dtype="uint32") /* ty=Tensor[(4, 4, 9), uint32] */;
  %473 = shape_of(%var_2097, dtype="int32") /* ty=Tensor[(3), int32] */;
  %474 = cast(%var_2097, dtype="uint32") /* ty=Tensor[(4, 4, 9), uint32] */;
  %475 = dyn.reshape(%472, %473, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  maximum(%474, %475) /* ty=Tensor[(4, 4, 9), uint32] */
}

def @func_2148() -> float64 {
  @func_2146() /* ty=float64 */
}

def @func_3103() -> (Tensor[(14, 11, 12), bool], Tensor[(14, 11, 12), float64], Tensor[(14, 11, 12), float64], float64, Tensor[(14, 11, 12), float64], Tensor[(10, 9, 4), float64], Tensor[(360), float64]) {
  %497 = fn () -> (Tensor[(14, 11, 12), bool], Tensor[(14, 11, 12), float64], Tensor[(14, 11, 12), float64], float64, Tensor[(14, 11, 12), float64], Tensor[(10, 9, 4), float64], Tensor[(360), float64]) {
    %476 = @func_1672() /* ty=(Tensor[(14, 11, 12), float64],) */;
    %477 = %476.0;
    %478 = cast(meta[relay.Constant][34] /* ty=Tensor[(14, 11, 12), float64] */, dtype="bool") /* ty=Tensor[(14, 11, 12), bool] */;
    %479 = shape_of(%477, dtype="int32") /* ty=Tensor[(3), int32] */;
    %480 = cast(%477, dtype="bool") /* ty=Tensor[(14, 11, 12), bool] */;
    %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %482 = @func_1681() /* ty=(Tensor[(14, 11, 12), float64],) */;
    %483 = cast(meta[relay.Constant][35] /* ty=Tensor[(14, 11, 12), float64] */, dtype="float64") /* ty=Tensor[(14, 11, 12), float64] */;
    %484 = shape_of(%477, dtype="int32") /* ty=Tensor[(3), int32] */;
    %485 = cast(%477, dtype="float64") /* ty=Tensor[(14, 11, 12), float64] */;
    %486 = dyn.reshape(%483, %484, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %487 = cast(meta[relay.Constant][35] /* ty=Tensor[(14, 11, 12), float64] */, dtype="float64") /* ty=Tensor[(14, 11, 12), float64] */;
    %488 = cast(meta[relay.Constant][36] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
    %489 = reshape(%488, newshape=[10, 9, 4]) /* ty=Tensor[(10, 9, 4), float64] */;
    %490 = @func_1101(%489) /* ty=(Tensor[(10, 9, 4), float64], Tensor[(10, 9, 4), float32]) */;
    %491 = greater(%480, %481) /* ty=Tensor[(14, 11, 12), bool] */;
    %492 = %482.0;
    %493 = floor_divide(%485, %486) /* ty=Tensor[(14, 11, 12), float64] */;
    %494 = @func_2416() /* ty=float64 */;
    %495 = cosh(%487) /* ty=Tensor[(14, 11, 12), float64] */;
    %496 = %490.0;
    (%491, %492, %493, %494, %495, %496, meta[relay.Constant][36] /* ty=Tensor[(360), float64] */)
  };
  %497() /* ty=(Tensor[(14, 11, 12), bool], Tensor[(14, 11, 12), float64], Tensor[(14, 11, 12), float64], float64, Tensor[(14, 11, 12), float64], Tensor[(10, 9, 4), float64], Tensor[(360), float64]) */
}

def @func_5165(%var_5163: Tensor[(15, 11, 11), int32], %var_5164: Tensor[(15, 11, 11), int32]) -> (Tensor[(15, 11, 11), int32], Tensor[(15, 11, 11), float64]) {
  @func_5161(%var_5163, %var_5164) /* ty=(Tensor[(15, 11, 11), int32], Tensor[(15, 11, 11), float64]) */
}

def @func_5191(%var_5180: Tensor[(13, 12, 2), int32], %var_5181: Tensor[(13, 12, 2), int32]) -> Tensor[(13, 12, 2), bool] {
  %498 = cast(%var_5181, dtype="bool") /* ty=Tensor[(13, 12, 2), bool] */;
  %499 = shape_of(%var_5180, dtype="int32") /* ty=Tensor[(3), int32] */;
  %500 = cast(%var_5180, dtype="bool") /* ty=Tensor[(13, 12, 2), bool] */;
  %501 = dyn.reshape(%498, %499, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%500, %501) /* ty=Tensor[(13, 12, 2), bool] */
}

def @func_3711(%var_3692: Tensor[(462), float64]) -> (float64, Tensor[(14, 3, 11), bool], Tensor[(462), float64], float64) {
  %502 = @func_1540() /* ty=(float64,) */;
  %503 = cast(%var_3692, dtype="float64") /* ty=Tensor[(462), float64] */;
  %504 = reshape(%503, newshape=[14, 3, 11]) /* ty=Tensor[(14, 3, 11), float64] */;
  %505 = @func_561(%504) /* ty=(Tensor[(14, 3, 11), bool], Tensor[(8, 12, 5), uint64], Tensor[(120, 4), float32]) */;
  %506 = @func_2543() /* ty=(float64,) */;
  %507 = %502.0;
  %508 = %505.0;
  %509 = %506.0;
  (%507, %508, %var_3692, %509)
}

def @func_5391(%var_5389: Tensor[(77, 6), float64]) -> (float64, Tensor[(120, 4), float32], Tensor[(77, 6), float64], Tensor[(14, 11, 12), float64], Tensor[(40), int64], Tensor[(13, 11, 5), float32], Tensor[(715, 1), float32]) {
  @func_5388(%var_5389) /* ty=(float64, Tensor[(120, 4), float32], Tensor[(77, 6), float64], Tensor[(14, 11, 12), float64], Tensor[(40), int64], Tensor[(13, 11, 5), float32], Tensor[(715, 1), float32]) */
}

def @func_1852(%var_1850: Tensor[(14, 11, 12), float64], %var_1851: Tensor[(14, 11, 12), float32]) -> (Tensor[(14, 11, 12), float64], Tensor[(14, 11, 12), int64]) {
  %531 = fn (%var_1806: Tensor[(14, 11, 12), float64], %var_1842: Tensor[(14, 11, 12), float32]) -> (Tensor[(14, 11, 12), float64], Tensor[(14, 11, 12), int64]) {
    %510 = @func_1681() /* ty=(Tensor[(14, 11, 12), float64],) */;
    %511 = %510.0;
    %512 = cast(%var_1806, dtype="float32") /* ty=Tensor[(14, 11, 12), float32] */;
    %513 = shape_of(%511, dtype="int32") /* ty=Tensor[(3), int32] */;
    %514 = cast(%511, dtype="float32") /* ty=Tensor[(14, 11, 12), float32] */;
    %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %516 = divide(%514, %515) /* ty=Tensor[(14, 11, 12), float32] */;
    %517 = cast(%516, dtype="float64") /* ty=Tensor[(14, 11, 12), float64] */;
    %518 = atan(%517) /* ty=Tensor[(14, 11, 12), float64] */;
    %519 = cast(%var_1806, dtype="float64") /* ty=Tensor[(14, 11, 12), float64] */;
    %520 = shape_of(%518, dtype="int32") /* ty=Tensor[(3), int32] */;
    %521 = cast(%518, dtype="float64") /* ty=Tensor[(14, 11, 12), float64] */;
    %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %523 = cast(%518, dtype="float32") /* ty=Tensor[(14, 11, 12), float32] */;
    %524 = tan(%523) /* ty=Tensor[(14, 11, 12), float32] */;
    %525 = cast(%var_1842, dtype="int64") /* ty=Tensor[(14, 11, 12), int64] */;
    %526 = shape_of(%524, dtype="int32") /* ty=Tensor[(3), int32] */;
    %527 = cast(%524, dtype="int64") /* ty=Tensor[(14, 11, 12), int64] */;
    %528 = dyn.reshape(%525, %526, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %529 = floor_mod(%521, %522) /* ty=Tensor[(14, 11, 12), float64] */;
    %530 = bitwise_and(%527, %528) /* ty=Tensor[(14, 11, 12), int64] */;
    (%529, %530)
  };
  %531(%var_1850, %var_1851) /* ty=(Tensor[(14, 11, 12), float64], Tensor[(14, 11, 12), int64]) */
}

def @func_4187() -> (float64,) {
  %532 = @func_2022() /* ty=(float64,) */;
  %533 = %532.0;
  (%533,)
}

def @func_3513() -> (float64,) {
  %536 = fn () -> (float64,) {
    %534 = @func_2175() /* ty=(float64,) */;
    %535 = %534.0;
    (%535,)
  };
  %536() /* ty=(float64,) */
}

def @func_3714(%var_3712: Tensor[(462), float64]) -> (float64, Tensor[(14, 3, 11), bool], Tensor[(462), float64], float64) {
  @func_3711(%var_3712) /* ty=(float64, Tensor[(14, 3, 11), bool], Tensor[(462), float64], float64) */
}

def @func_4173() -> (Tensor[(14, 11, 12), float64], Tensor[(5, 10, 7), bool], Tensor[(14, 11, 12), float32]) {
  %542 = fn () -> (Tensor[(14, 11, 12), float64], Tensor[(5, 10, 7), bool], Tensor[(14, 11, 12), float32]) {
    %537 = @func_1499() /* ty=(Tensor[(14, 11, 12), float64], Tensor[(14, 11, 12), float64], Tensor[(5, 10, 7), bool], float64) */;
    %538 = @func_3684() /* ty=(Tensor[(5, 10, 7), bool], Tensor[(5, 10, 7), bool], Tensor[(14, 11, 12), float32]) */;
    %539 = %537.0;
    %540 = @func_2803() /* ty=Tensor[(5, 10, 7), bool] */;
    %541 = %538.2;
    (%539, %540, %541)
  };
  %542() /* ty=(Tensor[(14, 11, 12), float64], Tensor[(5, 10, 7), bool], Tensor[(14, 11, 12), float32]) */
}

def @func_1541() -> (float64,) {
  %545 = fn () -> (float64,) {
    %543 = @func_1499() /* ty=(Tensor[(14, 11, 12), float64], Tensor[(14, 11, 12), float64], Tensor[(5, 10, 7), bool], float64) */;
    %544 = %543.3;
    (%544,)
  };
  %545() /* ty=(float64,) */
}

def @func_2394() -> (Tensor[(5, 10, 7), bool], Tensor[(14, 11, 12), float64]) {
  %548 = fn () -> (Tensor[(5, 10, 7), bool], Tensor[(14, 11, 12), float64]) {
    %546 = @func_2012() /* ty=Tensor[(5, 10, 7), bool] */;
    %547 = @func_1886() /* ty=Tensor[(14, 11, 12), float64] */;
    (%546, %547)
  };
  %548() /* ty=(Tensor[(5, 10, 7), bool], Tensor[(14, 11, 12), float64]) */
}

def @func_3978() -> (float64,) {
  %551 = fn () -> (float64,) {
    %549 = @func_2543() /* ty=(float64,) */;
    %550 = %549.0;
    (%550,)
  };
  %551() /* ty=(float64,) */
}

def @func_2177() -> (float64,) {
  @func_2175() /* ty=(float64,) */
}

def @func_2573(%var_2548: Tensor[(9, 1, 12), float32]) -> (Tensor[(9, 1, 12), float32], Tensor[(5, 10, 7), bool]) {
  %552 = cast(%var_2548, dtype="float32") /* ty=Tensor[(9, 1, 12), float32] */;
  %553 = asinh(%552) /* ty=Tensor[(9, 1, 12), float32] */;
  %554 = @func_2012() /* ty=Tensor[(5, 10, 7), bool] */;
  (%553, %554)
}

def @func_3824() -> (float64, float64) {
  %555 = @func_2175() /* ty=(float64,) */;
  %556 = @func_3512() /* ty=(float64,) */;
  %557 = %555.0;
  %558 = %556.0;
  (%557, %558)
}

def @func_1681() -> (Tensor[(14, 11, 12), float64],) {
  %559 = @func_1672() /* ty=(Tensor[(14, 11, 12), float64],) */;
  %560 = %559.0;
  (%560,)
}

def @func_4210(%var_4198: Tensor[(13, 5, 9), int16], %var_4199: Tensor[(13, 5, 9), int16], %var_4204: float64) -> (Tensor[(13, 5, 9), int16], Tensor[(5, 10, 7), bool], float64, Tensor[(14, 11, 12), float64]) {
  %561 = cast(%var_4199, dtype="int16") /* ty=Tensor[(13, 5, 9), int16] */;
  %562 = shape_of(%var_4198, dtype="int32") /* ty=Tensor[(3), int32] */;
  %563 = cast(%var_4198, dtype="int16") /* ty=Tensor[(13, 5, 9), int16] */;
  %564 = dyn.reshape(%561, %562, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %565 = cast(%var_4204, dtype="float64") /* ty=float64 */;
  %566 = reshape(%565, newshape=[]) /* ty=float64 */;
  %567 = @func_1499() /* ty=(Tensor[(14, 11, 12), float64], Tensor[(14, 11, 12), float64], Tensor[(5, 10, 7), bool], float64) */;
  %568 = left_shift(%563, %564) /* ty=Tensor[(13, 5, 9), int16] */;
  %569 = @func_846(%566) /* ty=Tensor[(5, 10, 7), bool] */;
  %570 = %567.1;
  (%568, %569, %var_4204, %570)
}

def @func_6175(%var_6070: Tensor[(2, 6, 5), int8], %var_6116: Tensor[(2, 6, 5), float32]) -> (Tensor[(2, 6, 5), bool], Tensor[(5, 10, 7), bool], Tensor[(2, 6, 5), float32], Tensor[(2, 6, 5), uint8], Tensor[(2, 6, 5), float32]) {
  %571 = cast(meta[relay.Constant][37] /* ty=Tensor[(2, 6, 5), int8] */, dtype="int8") /* ty=Tensor[(2, 6, 5), int8] */;
  %572 = shape_of(%var_6070, dtype="int32") /* ty=Tensor[(3), int32] */;
  %573 = cast(%var_6070, dtype="int8") /* ty=Tensor[(2, 6, 5), int8] */;
  %574 = dyn.reshape(%571, %572, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %575 = left_shift(%573, %574) /* ty=Tensor[(2, 6, 5), int8] */;
  %576 = cast(%575, dtype="float32") /* ty=Tensor[(2, 6, 5), float32] */;
  %577 = acos(%576) /* ty=Tensor[(2, 6, 5), float32] */;
  %578 = cast(%577, dtype="float64") /* ty=Tensor[(2, 6, 5), float64] */;
  %579 = atanh(%578) /* ty=Tensor[(2, 6, 5), float64] */;
  %580 = cast(%579, dtype="float32") /* ty=Tensor[(2, 6, 5), float32] */;
  %581 = log2(%580) /* ty=Tensor[(2, 6, 5), float32] */;
  %582 = cast(%var_6116, dtype="float64") /* ty=Tensor[(2, 6, 5), float64] */;
  %583 = shape_of(%581, dtype="int32") /* ty=Tensor[(3), int32] */;
  %584 = cast(%581, dtype="float64") /* ty=Tensor[(2, 6, 5), float64] */;
  %585 = dyn.reshape(%582, %583, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %586 = mod(%584, %585) /* ty=Tensor[(2, 6, 5), float64] */;
  %587 = cast(%579, dtype="bool") /* ty=Tensor[(2, 6, 5), bool] */;
  %588 = shape_of(%586, dtype="int32") /* ty=Tensor[(3), int32] */;
  %589 = cast(%586, dtype="bool") /* ty=Tensor[(2, 6, 5), bool] */;
  %590 = dyn.reshape(%587, %588, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %591 = cast(%var_6070, dtype="float32") /* ty=Tensor[(2, 6, 5), float32] */;
  %592 = shape_of(%577, dtype="int32") /* ty=Tensor[(3), int32] */;
  %593 = cast(%577, dtype="float32") /* ty=Tensor[(2, 6, 5), float32] */;
  %594 = dyn.reshape(%591, %592, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %595 = cast(%var_6116, dtype="uint8") /* ty=Tensor[(2, 6, 5), uint8] */;
  %596 = shape_of(%586, dtype="int32") /* ty=Tensor[(3), int32] */;
  %597 = cast(%586, dtype="uint8") /* ty=Tensor[(2, 6, 5), uint8] */;
  %598 = dyn.reshape(%595, %596, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %599 = cast(%579, dtype="float32") /* ty=Tensor[(2, 6, 5), float32] */;
  %600 = greater_equal(%589, %590) /* ty=Tensor[(2, 6, 5), bool] */;
  %601 = @func_2803() /* ty=Tensor[(5, 10, 7), bool] */;
  %602 = minimum(%593, %594) /* ty=Tensor[(2, 6, 5), float32] */;
  %603 = logical_xor(%597, %598) /* ty=Tensor[(2, 6, 5), uint8] */;
  %604 = asinh(%599) /* ty=Tensor[(2, 6, 5), float32] */;
  (%600, %601, %602, %603, %604)
}

def @func_2719() -> (Tensor[(13, 2, 11), float64],) {
  %610 = fn () -> (Tensor[(13, 2, 11), float64],) {
    %605 = cast(meta[relay.Constant][39] /* ty=Tensor[(13, 2, 11), float64] */, dtype="float64") /* ty=Tensor[(13, 2, 11), float64] */;
    %606 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(13, 2, 11), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %607 = cast(meta[relay.Constant][38] /* ty=Tensor[(13, 2, 11), float64] */, dtype="float64") /* ty=Tensor[(13, 2, 11), float64] */;
    %608 = dyn.reshape(%605, %606, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %609 = mod(%607, %608) /* ty=Tensor[(13, 2, 11), float64] */;
    (%609,)
  };
  %610() /* ty=(Tensor[(13, 2, 11), float64],) */
}

def @func_4825(%var_4815: Tensor[(270), float32]) -> (float64, Tensor[(15, 9, 2), float64], Tensor[(270), float32]) {
  %611 = @func_4187() /* ty=(float64,) */;
  %612 = cast(%var_4815, dtype="float32") /* ty=Tensor[(270), float32] */;
  %613 = reshape(%612, newshape=[15, 9, 2]) /* ty=Tensor[(15, 9, 2), float32] */;
  %614 = @func_3893(%613) /* ty=(Tensor[(15, 9, 2), float64],) */;
  %615 = %611.0;
  %616 = %614.0;
  (%615, %616, %var_4815)
}

def @func_1007(%var_983: Tensor[(7, 8, 15), float32], %var_994: float64) -> (Tensor[(7, 8, 15), float32], Tensor[(5, 10, 7), bool], float64) {
  %617 = cast(%var_983, dtype="float32") /* ty=Tensor[(7, 8, 15), float32] */;
  %618 = cast(%var_994, dtype="float64") /* ty=float64 */;
  %619 = reshape(%618, newshape=[]) /* ty=float64 */;
  %620 = log(%617) /* ty=Tensor[(7, 8, 15), float32] */;
  %621 = @func_846(%619) /* ty=Tensor[(5, 10, 7), bool] */;
  (%620, %621, %var_994)
}

def @func_1954(%var_1952: Tensor[(13, 11, 5), float32], %var_1953: Tensor[(13, 11, 5), float32]) -> (Tensor[(13, 11, 5), float32],) {
  %627 = fn (%var_1946: Tensor[(13, 11, 5), float32], %var_1947: Tensor[(13, 11, 5), float32]) -> (Tensor[(13, 11, 5), float32],) {
    %622 = cast(%var_1947, dtype="float32") /* ty=Tensor[(13, 11, 5), float32] */;
    %623 = shape_of(%var_1946, dtype="int32") /* ty=Tensor[(3), int32] */;
    %624 = cast(%var_1946, dtype="float32") /* ty=Tensor[(13, 11, 5), float32] */;
    %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %626 = power(%624, %625) /* ty=Tensor[(13, 11, 5), float32] */;
    (%626,)
  };
  %627(%var_1952, %var_1953) /* ty=(Tensor[(13, 11, 5), float32],) */
}

def @func_3192(%var_3190: Tensor[(14, 15, 16), float64]) -> (Tensor[(14, 15, 16), float64], float64) {
  @func_3189(%var_3190) /* ty=(Tensor[(14, 15, 16), float64], float64) */
}

def @func_2013() -> Tensor[(5, 10, 7), bool] {
  %629 = fn () -> Tensor[(5, 10, 7), bool] {
    %628 = @func_1499() /* ty=(Tensor[(14, 11, 12), float64], Tensor[(14, 11, 12), float64], Tensor[(5, 10, 7), bool], float64) */;
    %628.2
  };
  %629() /* ty=Tensor[(5, 10, 7), bool] */
}

def @func_6028() -> (float64,) {
  %630 = @func_2146() /* ty=float64 */;
  (%630,)
}

def @func_3932() -> Tensor[(13, 2, 11), float64] {
  @func_3930() /* ty=Tensor[(13, 2, 11), float64] */
}

def @func_1460(%var_1458: Tensor[(10, 15, 11), uint8], %var_1459: Tensor[(10, 15, 11), uint8]) -> (Tensor[(10, 15, 11), uint8], Tensor[(10, 15, 11), float32]) {
  @func_1456(%var_1458, %var_1459) /* ty=(Tensor[(10, 15, 11), uint8], Tensor[(10, 15, 11), float32]) */
}

def @func_6179(%var_6177: Tensor[(2, 6, 5), int8], %var_6178: Tensor[(2, 6, 5), float32]) -> (Tensor[(2, 6, 5), bool], Tensor[(5, 10, 7), bool], Tensor[(2, 6, 5), float32], Tensor[(2, 6, 5), uint8], Tensor[(2, 6, 5), float32]) {
  @func_6175(%var_6177, %var_6178) /* ty=(Tensor[(2, 6, 5), bool], Tensor[(5, 10, 7), bool], Tensor[(2, 6, 5), float32], Tensor[(2, 6, 5), uint8], Tensor[(2, 6, 5), float32]) */
}

def @func_2416() -> float64 {
  %631 = @func_2022() /* ty=(float64,) */;
  %631.0
}

def @func_2925(%var_2924: Tensor[(108), float32]) -> (float64, Tensor[(9, 1, 12), float32], Tensor[(108), float32], Tensor[(3, 6, 10), float32], Tensor[(180), float64]) {
  %648 = fn (%var_2875: Tensor[(108), float32]) -> (float64, Tensor[(9, 1, 12), float32], Tensor[(108), float32], Tensor[(3, 6, 10), float32], Tensor[(180), float64]) {
    %632 = @func_2022() /* ty=(float64,) */;
    %633 = cast(%var_2875, dtype="float32") /* ty=Tensor[(108), float32] */;
    %634 = reshape(%633, newshape=[9, 1, 12]) /* ty=Tensor[(9, 1, 12), float32] */;
    %635 = @func_2573(%634) /* ty=(Tensor[(9, 1, 12), float32], Tensor[(5, 10, 7), bool]) */;
    %636 = cast(meta[relay.Constant][40] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
    %637 = cast(meta[relay.Constant][40] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
    %638 = reshape(%636, newshape=[3, 6, 10]) /* ty=Tensor[(3, 6, 10), float32] */;
    %639 = reshape(%637, newshape=[3, 6, 10]) /* ty=Tensor[(3, 6, 10), float32] */;
    %640 = @func_251(%638, %639) /* ty=(Tensor[(3, 6, 10), float32], Tensor[(8, 12, 5), uint64], Tensor[(40, 12), float32], Tensor[(3, 6, 10), float32]) */;
    %641 = cast(meta[relay.Constant][40] /* ty=Tensor[(180), float32] */, dtype="float64") /* ty=Tensor[(180), float64] */;
    %642 = asin(%641) /* ty=Tensor[(180), float64] */;
    %643 = cast(%642, dtype="float64") /* ty=Tensor[(180), float64] */;
    %644 = %632.0;
    %645 = %635.0;
    %646 = %640.3;
    %647 = sin(%643) /* ty=Tensor[(180), float64] */;
    (%644, %645, %var_2875, %646, %647)
  };
  %648(%var_2924) /* ty=(float64, Tensor[(9, 1, 12), float32], Tensor[(108), float32], Tensor[(3, 6, 10), float32], Tensor[(180), float64]) */
}

def @func_1011(%var_1009: Tensor[(7, 8, 15), float32], %var_1010: float64) -> (Tensor[(7, 8, 15), float32], Tensor[(5, 10, 7), bool], float64) {
  @func_1007(%var_1009, %var_1010) /* ty=(Tensor[(7, 8, 15), float32], Tensor[(5, 10, 7), bool], float64) */
}

def @func_1888() -> Tensor[(14, 11, 12), float64] {
  @func_1886() /* ty=Tensor[(14, 11, 12), float64] */
}

def @func_2023() -> (float64,) {
  %651 = fn () -> (float64,) {
    %649 = @func_1540() /* ty=(float64,) */;
    %650 = %649.0;
    (%650,)
  };
  %651() /* ty=(float64,) */
}

def @func_5899(%var_5898: Tensor[(15, 10, 16), bool]) -> (Tensor[(15, 10, 16), float64],) {
  %659 = fn (%var_5886: Tensor[(15, 10, 16), bool]) -> (Tensor[(15, 10, 16), float64],) {
    %652 = cast(meta[relay.Constant][41] /* ty=Tensor[(15, 10, 16), bool] */, dtype="bool") /* ty=Tensor[(15, 10, 16), bool] */;
    %653 = shape_of(%var_5886, dtype="int32") /* ty=Tensor[(3), int32] */;
    %654 = cast(%var_5886, dtype="bool") /* ty=Tensor[(15, 10, 16), bool] */;
    %655 = dyn.reshape(%652, %653, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %656 = logical_or(%654, %655) /* ty=Tensor[(15, 10, 16), bool] */;
    %657 = cast(%656, dtype="float64") /* ty=Tensor[(15, 10, 16), float64] */;
    %658 = log(%657) /* ty=Tensor[(15, 10, 16), float64] */;
    (%658,)
  };
  %659(%var_5898) /* ty=(Tensor[(15, 10, 16), float64],) */
}

def @func_3353() -> Tensor[(14, 11, 12), float64] {
  @func_3351() /* ty=Tensor[(14, 11, 12), float64] */
}

def @func_2084(%var_2040: Tensor[(14, 16, 3), int64], %var_2041: Tensor[(14, 16, 3), int64]) -> (Tensor[(14, 16, 3), bool], Tensor[(14, 11, 12), float64], Tensor[(14, 16, 3), int64]) {
  %660 = cast(%var_2041, dtype="int64") /* ty=Tensor[(14, 16, 3), int64] */;
  %661 = shape_of(%var_2040, dtype="int32") /* ty=Tensor[(3), int32] */;
  %662 = cast(%var_2040, dtype="int64") /* ty=Tensor[(14, 16, 3), int64] */;
  %663 = dyn.reshape(%660, %661, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %664 = right_shift(%662, %663) /* ty=Tensor[(14, 16, 3), int64] */;
  %665 = cast(%664, dtype="bool") /* ty=Tensor[(14, 16, 3), bool] */;
  %666 = shape_of(%var_2040, dtype="int32") /* ty=Tensor[(3), int32] */;
  %667 = cast(%var_2040, dtype="bool") /* ty=Tensor[(14, 16, 3), bool] */;
  %668 = dyn.reshape(%665, %666, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %669 = @func_1681() /* ty=(Tensor[(14, 11, 12), float64],) */;
  %670 = cast(%664, dtype="float64") /* ty=Tensor[(14, 16, 3), float64] */;
  %671 = shape_of(%var_2041, dtype="int32") /* ty=Tensor[(3), int32] */;
  %672 = cast(%var_2041, dtype="float64") /* ty=Tensor[(14, 16, 3), float64] */;
  %673 = dyn.reshape(%670, %671, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %674 = power(%672, %673) /* ty=Tensor[(14, 16, 3), float64] */;
  %675 = cast(%674, dtype="float64") /* ty=Tensor[(14, 16, 3), float64] */;
  %676 = atan(%675) /* ty=Tensor[(14, 16, 3), float64] */;
  %677 = cast(%674, dtype="int64") /* ty=Tensor[(14, 16, 3), int64] */;
  %678 = shape_of(%676, dtype="int32") /* ty=Tensor[(3), int32] */;
  %679 = cast(%676, dtype="int64") /* ty=Tensor[(14, 16, 3), int64] */;
  %680 = dyn.reshape(%677, %678, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %681 = logical_and(%667, %668) /* ty=Tensor[(14, 16, 3), bool] */;
  %682 = %669.0;
  %683 = left_shift(%679, %680) /* ty=Tensor[(14, 16, 3), int64] */;
  (%681, %682, %683)
}

def @func_3628() -> (Tensor[(13, 2, 11), float64], float64) {
  @func_3626() /* ty=(Tensor[(13, 2, 11), float64], float64) */
}

def @func_3930() -> Tensor[(13, 2, 11), float64] {
  %684 = @func_2718() /* ty=(Tensor[(13, 2, 11), float64],) */;
  %684.0
}

def @func_5782() -> (Tensor[(14, 11, 12), float32], Tensor[(13, 2, 11), float64], Tensor[(2, 5, 6), uint8], Tensor[(10), int64], Tensor[(286), float64], Tensor[(286), float64]) {
  %700 = fn () -> (Tensor[(14, 11, 12), float32], Tensor[(13, 2, 11), float64], Tensor[(2, 5, 6), uint8], Tensor[(10), int64], Tensor[(286), float64], Tensor[(286), float64]) {
    %685 = cast(meta[relay.Constant][42] /* ty=Tensor[(286), float64] */, dtype="float64") /* ty=Tensor[(286), float64] */;
    %686 = reshape(%685, newshape=[13, 2, 11]) /* ty=Tensor[(13, 2, 11), float64] */;
    %687 = @func_2847(%686) /* ty=(Tensor[(13, 2, 11), float64],) */;
    %688 = cast(meta[relay.Constant][43] /* ty=Tensor[(10), int64] */, dtype="int64") /* ty=Tensor[(10), int64] */;
    %689 = reshape(%688, newshape=[10]) /* ty=Tensor[(10), int64] */;
    %690 = @func_1789(%689) /* ty=(float64, Tensor[(2, 5, 6), uint8], Tensor[(10), int64], Tensor[(3, 20), int64]) */;
    %691 = cast(meta[relay.Constant][42] /* ty=Tensor[(286), float64] */, dtype="float64") /* ty=Tensor[(286), float64] */;
    %692 = @func_2416() /* ty=float64 */;
    %693 = cast(meta[relay.Constant][42] /* ty=Tensor[(286), float64] */, dtype="float64") /* ty=Tensor[(286), float64] */;
    %694 = cast(%692, dtype="float64") /* ty=float64 */;
    %695 = @func_2469() /* ty=Tensor[(14, 11, 12), float32] */;
    %696 = %687.0;
    %697 = %690.1;
    %698 = acosh(%691) /* ty=Tensor[(286), float64] */;
    %699 = multiply(%693, %694) /* ty=Tensor[(286), float64] */;
    (%695, %696, %697, meta[relay.Constant][43] /* ty=Tensor[(10), int64] */, %698, %699)
  };
  %700() /* ty=(Tensor[(14, 11, 12), float32], Tensor[(13, 2, 11), float64], Tensor[(2, 5, 6), uint8], Tensor[(10), int64], Tensor[(286), float64], Tensor[(286), float64]) */
}

def @func_2660(%var_2659: Tensor[(14, 11, 12), float64]) -> Tensor[(14, 11, 12), uint64] {
  %707 = fn (%var_2631: Tensor[(14, 11, 12), float64]) -> Tensor[(14, 11, 12), uint64] {
    %701 = @func_1672() /* ty=(Tensor[(14, 11, 12), float64],) */;
    %702 = %701.0;
    %703 = cast(%var_2631, dtype="uint64") /* ty=Tensor[(14, 11, 12), uint64] */;
    %704 = shape_of(%702, dtype="int32") /* ty=Tensor[(3), int32] */;
    %705 = cast(%702, dtype="uint64") /* ty=Tensor[(14, 11, 12), uint64] */;
    %706 = dyn.reshape(%703, %704, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    minimum(%705, %706) /* ty=Tensor[(14, 11, 12), uint64] */
  };
  %707(%var_2659) /* ty=Tensor[(14, 11, 12), uint64] */
}

def @func_6308(%var_6306: Tensor[(26, 3), uint16], %var_6307: Tensor[(60), int8]) -> (float64, Tensor[(5, 10, 7), bool], Tensor[(26, 3), uint16], Tensor[(2, 6, 5), float32], Tensor[(60), int8]) {
  %722 = fn (%var_6289: Tensor[(26, 3), uint16], %var_6298: Tensor[(60), int8]) -> (float64, Tensor[(5, 10, 7), bool], Tensor[(26, 3), uint16], Tensor[(2, 6, 5), float32], Tensor[(60), int8]) {
    %708 = @func_3227() /* ty=(float64,) */;
    %709 = %708.0;
    %710 = cast(%709, dtype="uint16") /* ty=uint16 */;
    %711 = cast(%var_6289, dtype="uint16") /* ty=Tensor[(26, 3), uint16] */;
    %712 = reshape(%710, newshape=[]) /* ty=uint16 */;
    %713 = reshape(%711, newshape=[3, 2, 13]) /* ty=Tensor[(3, 2, 13), uint16] */;
    %714 = @func_2944(%712, %713) /* ty=(Tensor[(3, 2, 13), uint16], Tensor[(5, 10, 7), bool], Tensor[(12, 70), float32], Tensor[(3, 2, 13), float64]) */;
    %715 = cast(%var_6298, dtype="int8") /* ty=Tensor[(60), int8] */;
    %716 = cast(%var_6298, dtype="float32") /* ty=Tensor[(60), float32] */;
    %717 = reshape(%715, newshape=[2, 6, 5]) /* ty=Tensor[(2, 6, 5), int8] */;
    %718 = reshape(%716, newshape=[2, 6, 5]) /* ty=Tensor[(2, 6, 5), float32] */;
    %719 = @func_6175(%717, %718) /* ty=(Tensor[(2, 6, 5), bool], Tensor[(5, 10, 7), bool], Tensor[(2, 6, 5), float32], Tensor[(2, 6, 5), uint8], Tensor[(2, 6, 5), float32]) */;
    %720 = %714.1;
    %721 = %719.4;
    (%709, %720, %var_6289, %721, %var_6298)
  };
  %722(%var_6306, %var_6307) /* ty=(float64, Tensor[(5, 10, 7), bool], Tensor[(26, 3), uint16], Tensor[(2, 6, 5), float32], Tensor[(60), int8]) */
}

def @func_4438() -> (Tensor[(5, 10, 7), bool], Tensor[(14, 11, 12), float64], float64) {
  %729 = fn () -> (Tensor[(5, 10, 7), bool], Tensor[(14, 11, 12), float64], float64) {
    %723 = @func_3684() /* ty=(Tensor[(5, 10, 7), bool], Tensor[(5, 10, 7), bool], Tensor[(14, 11, 12), float32]) */;
    %724 = @func_1672() /* ty=(Tensor[(14, 11, 12), float64],) */;
    %725 = @func_3214() /* ty=(float64,) */;
    %726 = %723.0;
    %727 = %724.0;
    %728 = %725.0;
    (%726, %727, %728)
  };
  %729() /* ty=(Tensor[(5, 10, 7), bool], Tensor[(14, 11, 12), float64], float64) */
}

def @func_4739() -> (float64, Tensor[(14, 11, 12), float64], Tensor[(672), int64]) {
  %730 = @func_3384() /* ty=(float64,) */;
  %731 = cast(meta[relay.Constant][44] /* ty=Tensor[(672), int64] */, dtype="int64") /* ty=Tensor[(672), int64] */;
  %732 = cast(meta[relay.Constant][44] /* ty=Tensor[(672), int64] */, dtype="int64") /* ty=Tensor[(672), int64] */;
  %733 = reshape(%731, newshape=[14, 16, 3]) /* ty=Tensor[(14, 16, 3), int64] */;
  %734 = reshape(%732, newshape=[14, 16, 3]) /* ty=Tensor[(14, 16, 3), int64] */;
  %735 = @func_2084(%733, %734) /* ty=(Tensor[(14, 16, 3), bool], Tensor[(14, 11, 12), float64], Tensor[(14, 16, 3), int64]) */;
  %736 = %730.0;
  %737 = %735.1;
  (%736, %737, meta[relay.Constant][44] /* ty=Tensor[(672), int64] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */The type inference pass was unable to infer a type for this expression.
This usually occurs when an operator call is under constrained in some way, check other reported errors for hints of what may of happened.

===================================
note: run with `TVM_BACKTRACE=1` environment variable to display a backtrace.
