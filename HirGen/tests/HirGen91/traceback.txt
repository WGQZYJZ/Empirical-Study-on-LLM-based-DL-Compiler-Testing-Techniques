==========mod==========
#[version = "0.0.5"]
def @func_3247(%var_3233: Tensor[(7, 6, 3), float32]) -> (Tensor[(1, 128), uint16], Tensor[(8, 10, 9), uint32], Tensor[(720), uint32], Tensor[(7, 6, 3), int8], Tensor[(2, 13, 5), float32]) {
  %0 = cast(meta[relay.Constant][1] /* ty=Tensor[(720), uint32] */, dtype="uint32") /* ty=Tensor[(720), uint32] */;
  %1 = reshape(%0, newshape=[360, 2]) /* ty=Tensor[(360, 2), uint32] */;
  %2 = @func_2683(%1) /* ty=(Tensor[(1, 6, 3), float32], Tensor[(8, 10, 9), uint32], Tensor[(360, 2), bool], Tensor[(360, 2), float64]) */;
  %3 = @func_2773() /* ty=Tensor[(1, 6, 3), float32] */;
  %4 = cast(%3, dtype="int8") /* ty=Tensor[(1, 6, 3), int8] */;
  %5 = cast(%var_3233, dtype="int8") /* ty=Tensor[(7, 6, 3), int8] */;
  %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 128), uint16] */, dtype="uint16") /* ty=Tensor[(1, 128), uint16] */;
  %7 = reshape(%6, newshape=[4, 2, 16]) /* ty=Tensor[(4, 2, 16), uint16] */;
  %8 = @func_2339(%7) /* ty=(Tensor[(4, 2, 16), uint16], Tensor[(2, 13, 5), float32], Tensor[(14), int64], Tensor[(480), int32]) */;
  %9 = %8.1;
  %10 = cast(%9, dtype="float32") /* ty=Tensor[(2, 13, 5), float32] */;
  %11 = %2.1;
  %12 = add(%4, %5) /* ty=Tensor[(7, 6, 3), int8] */;
  %13 = tan(%10) /* ty=Tensor[(2, 13, 5), float32] */;
  (meta[relay.Constant][0] /* ty=Tensor[(1, 128), uint16] */, %11, meta[relay.Constant][1] /* ty=Tensor[(720), uint32] */, %12, %13)
}

def @func_7163() -> (Tensor[(1, 6, 3), float32],) {
  %14 = @func_5347() /* ty=(Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32]) */;
  %15 = %14.1;
  (%15,)
}

def @func_4884() -> (Tensor[(1, 6, 3), float32], Tensor[(480), int32], Tensor[(4, 120), int32]) {
  %16 = cast(meta[relay.Constant][2] /* ty=Tensor[(4, 120), int32] */, dtype="int32") /* ty=Tensor[(4, 120), int32] */;
  %17 = reshape(%16, newshape=[480]) /* ty=Tensor[(480), int32] */;
  %18 = @func_3514(%17) /* ty=(Tensor[(1, 6, 3), float32], Tensor[(1, 14), int64], Tensor[(980), float32], Tensor[(480), int32]) */;
  %19 = @func_4671() /* ty=Tensor[(1, 6, 3), float32] */;
  %20 = %18.3;
  (%19, %20, meta[relay.Constant][2] /* ty=Tensor[(4, 120), int32] */)
}

def @func_6058(%var_5959: Tensor[(11, 6, 3), float32], %var_6002: Tensor[(330), int32], %var_6003: Tensor[(1274), float32], %var_6051: Tensor[(11, 6, 3), float32]) -> (Tensor[(11, 6, 3), bool], Tensor[(1, 6, 3), float32], Tensor[(11, 2, 12), uint64], Tensor[(1, 6, 3), float32], Tensor[(11, 6, 3), float64], Tensor[(1, 6, 3), float32], Tensor[(14, 7, 13), int8], Tensor[(330), int32], Tensor[(1274), float32], Tensor[(11, 6, 3), float64], Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float64], Tensor[(11, 6, 3), uint8]) {
  %21 = @func_4522() /* ty=(Tensor[(1, 6, 3), float32], Tensor[(16, 5, 5), int64], Tensor[(400), int64], Tensor[(1, 6, 3), float32], Tensor[(11, 2, 12), uint64], Tensor[(132, 2), uint64], Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32]) */;
  %22 = %21.0;
  %23 = cast(%22, dtype="bool") /* ty=Tensor[(1, 6, 3), bool] */;
  %24 = cast(%var_5959, dtype="bool") /* ty=Tensor[(11, 6, 3), bool] */;
  %25 = @func_4834() /* ty=(Tensor[(1, 6, 3), float32], Tensor[(11, 2, 12), uint64]) */;
  %26 = cast(%var_5959, dtype="float32") /* ty=Tensor[(11, 6, 3), float32] */;
  %27 = sinh(%26) /* ty=Tensor[(11, 6, 3), float32] */;
  %28 = cast(%27, dtype="float64") /* ty=Tensor[(11, 6, 3), float64] */;
  %29 = cast(%var_6002, dtype="int32") /* ty=Tensor[(330), int32] */;
  %30 = cast(%var_6002, dtype="int32") /* ty=Tensor[(330), int32] */;
  %31 = cast(%var_6003, dtype="float32") /* ty=Tensor[(1274), float32] */;
  %32 = reshape(%29, newshape=[5, 6, 11]) /* ty=Tensor[(5, 6, 11), int32] */;
  %33 = reshape(%30, newshape=[5, 6, 11]) /* ty=Tensor[(5, 6, 11), int32] */;
  %34 = reshape(%31, newshape=[1274]) /* ty=Tensor[(1274), float32] */;
  %35 = @func_1543(%32, %33, %34) /* ty=(Tensor[(5, 6, 11), bool], Tensor[(5, 6, 11), uint8], Tensor[(14, 7, 13), int8], Tensor[(1274), float32]) */;
  %36 = cast(%27, dtype="float64") /* ty=Tensor[(11, 6, 3), float64] */;
  %37 = cast(%var_6051, dtype="uint8") /* ty=Tensor[(11, 6, 3), uint8] */;
  %38 = shape_of(%27, dtype="int32") /* ty=Tensor[(3), int32] */;
  %39 = cast(%27, dtype="uint8") /* ty=Tensor[(11, 6, 3), uint8] */;
  %40 = dyn.reshape(%37, %38, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %41 = not_equal(%23, %24) /* ty=Tensor[(11, 6, 3), bool] */;
  %42 = @func_3947() /* ty=Tensor[(1, 6, 3), float32] */;
  %43 = %25.1;
  %44 = @func_5630() /* ty=Tensor[(1, 6, 3), float32] */;
  %45 = log2(%28) /* ty=Tensor[(11, 6, 3), float64] */;
  %46 = @func_2393() /* ty=Tensor[(1, 6, 3), float32] */;
  %47 = %35.2;
  %48 = log(%36) /* ty=Tensor[(11, 6, 3), float64] */;
  %49 = @func_3397() /* ty=Tensor[(1, 6, 3), float32] */;
  %50 = @func_3397() /* ty=Tensor[(1, 6, 3), float32] */;
  %51 = @func_5260() /* ty=Tensor[(1, 6, 3), float64] */;
  %52 = left_shift(%39, %40) /* ty=Tensor[(11, 6, 3), uint8] */;
  (%41, %42, %43, %44, %45, %46, %47, %var_6002, %var_6003, %48, %49, %50, %51, %52)
}

def @func_3755(%var_3700: Tensor[(14), int64], %var_3701: Tensor[(480), int32]) -> (Tensor[(1, 6, 3), float32], Tensor[(66, 4), uint64], Tensor[(264), uint64], Tensor[(14), int64], Tensor[(480), int32], Tensor[(1, 128), uint16], Tensor[(126, 1), float32], Tensor[(14), int64], Tensor[(2, 13, 5), bool], Tensor[(128), int8]) {
  %53 = @func_3315() /* ty=(Tensor[(1, 6, 3), float32],) */;
  %54 = cast(meta[relay.Constant][3] /* ty=Tensor[(264), uint64] */, dtype="uint64") /* ty=Tensor[(264), uint64] */;
  %55 = reshape(%54, newshape=[66, 4]) /* ty=Tensor[(66, 4), uint64] */;
  %56 = @func_3471(%55) /* ty=(Tensor[(1, 6, 3), float32], Tensor[(11, 2, 12), uint64], Tensor[(66, 4), uint64]) */;
  %57 = cast(meta[relay.Constant][4] /* ty=Tensor[(126, 1), float32] */, dtype="float32") /* ty=Tensor[(126, 1), float32] */;
  %58 = reshape(%57, newshape=[7, 6, 3]) /* ty=Tensor[(7, 6, 3), float32] */;
  %59 = @func_3247(%58) /* ty=(Tensor[(1, 128), uint16], Tensor[(8, 10, 9), uint32], Tensor[(720), uint32], Tensor[(7, 6, 3), int8], Tensor[(2, 13, 5), float32]) */;
  %60 = %59.0;
  %61 = cast(%60, dtype="uint16") /* ty=Tensor[(1, 128), uint16] */;
  %62 = cast(%var_3700, dtype="int64") /* ty=Tensor[(14), int64] */;
  %63 = reshape(%61, newshape=[128]) /* ty=Tensor[(128), uint16] */;
  %64 = reshape(%62, newshape=[14]) /* ty=Tensor[(14), int64] */;
  %65 = @func_3072(%63, %64) /* ty=(Tensor[(6, 5, 16), int32], Tensor[(480), int32], Tensor[(1, 6, 3), float64], Tensor[(2, 13, 5), float32], Tensor[(128), int8], Tensor[(2, 13, 5), float32], Tensor[(14), int64]) */;
  %66 = cast(%var_3700, dtype="int64") /* ty=Tensor[(14), int64] */;
  %67 = cast(%var_3701, dtype="int32") /* ty=Tensor[(480), int32] */;
  %68 = reshape(%66, newshape=[7, 2]) /* ty=Tensor[(7, 2), int64] */;
  %69 = reshape(%67, newshape=[480]) /* ty=Tensor[(480), int32] */;
  %70 = @func_1238(%68, %69) /* ty=(Tensor[(7, 2), int64], Tensor[(2, 13, 5), float32], Tensor[(3, 3, 8), bool], Tensor[(480), int32], Tensor[(130), float32], Tensor[(3, 3, 8), bool]) */;
  %71 = %70.1;
  %72 = cast(%71, dtype="float32") /* ty=Tensor[(2, 13, 5), float32] */;
  %73 = cast(%71, dtype="float32") /* ty=Tensor[(2, 13, 5), float32] */;
  %74 = reshape(%72, newshape=[2, 13, 5]) /* ty=Tensor[(2, 13, 5), float32] */;
  %75 = reshape(%73, newshape=[2, 13, 5]) /* ty=Tensor[(2, 13, 5), float32] */;
  %76 = @func_168(%74, %75) /* ty=(Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), float32]) */;
  %77 = %76.0;
  %78 = cast(%77, dtype="bool") /* ty=Tensor[(2, 13, 5), bool] */;
  %79 = shape_of(%71, dtype="int32") /* ty=Tensor[(3), int32] */;
  %80 = cast(%71, dtype="bool") /* ty=Tensor[(2, 13, 5), bool] */;
  %81 = dyn.reshape(%78, %79, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %82 = cast(%60, dtype="uint16") /* ty=Tensor[(1, 128), uint16] */;
  %83 = cast(%var_3700, dtype="int64") /* ty=Tensor[(14), int64] */;
  %84 = reshape(%82, newshape=[128]) /* ty=Tensor[(128), uint16] */;
  %85 = reshape(%83, newshape=[14]) /* ty=Tensor[(14), int64] */;
  %86 = @func_3072(%84, %85) /* ty=(Tensor[(6, 5, 16), int32], Tensor[(480), int32], Tensor[(1, 6, 3), float64], Tensor[(2, 13, 5), float32], Tensor[(128), int8], Tensor[(2, 13, 5), float32], Tensor[(14), int64]) */;
  %87 = %53.0;
  %88 = %56.2;
  %89 = %65.6;
  %90 = less(%80, %81) /* ty=Tensor[(2, 13, 5), bool] */;
  %91 = %86.4;
  (%87, %88, meta[relay.Constant][3] /* ty=Tensor[(264), uint64] */, %var_3700, %var_3701, %60, meta[relay.Constant][4] /* ty=Tensor[(126, 1), float32] */, %89, %90, %91)
}

def @func_4834() -> (Tensor[(1, 6, 3), float32], Tensor[(11, 2, 12), uint64]) {
  %92 = @func_4522() /* ty=(Tensor[(1, 6, 3), float32], Tensor[(16, 5, 5), int64], Tensor[(400), int64], Tensor[(1, 6, 3), float32], Tensor[(11, 2, 12), uint64], Tensor[(132, 2), uint64], Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32]) */;
  %93 = @func_2773() /* ty=Tensor[(1, 6, 3), float32] */;
  %94 = %92.4;
  (%93, %94)
}

def @func_695(%var_652: Tensor[(6, 5, 16), int32]) -> (Tensor[(6, 5, 16), int32], Tensor[(3, 3, 8), bool], Tensor[(72), float32], Tensor[(3, 3, 8), bool]) {
  %95 = cast(%var_652, dtype="int32") /* ty=Tensor[(6, 5, 16), int32] */;
  %96 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(6, 5, 16), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %97 = cast(meta[relay.Constant][5] /* ty=Tensor[(6, 5, 16), int32] */, dtype="int32") /* ty=Tensor[(6, 5, 16), int32] */;
  %98 = dyn.reshape(%95, %96, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %99 = cast(meta[relay.Constant][6] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %100 = reshape(%99, newshape=[3, 3, 8]) /* ty=Tensor[(3, 3, 8), float32] */;
  %101 = @func_394(%100) /* ty=(Tensor[(3, 3, 8), bool],) */;
  %102 = cast(meta[relay.Constant][6] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %103 = reshape(%102, newshape=[3, 3, 8]) /* ty=Tensor[(3, 3, 8), float32] */;
  %104 = @func_394(%103) /* ty=(Tensor[(3, 3, 8), bool],) */;
  %105 = logical_xor(%97, %98) /* ty=Tensor[(6, 5, 16), int32] */;
  %106 = %101.0;
  %107 = %104.0;
  (%105, %106, meta[relay.Constant][6] /* ty=Tensor[(72), float32] */, %107)
}

def @func_4606(%var_4589: Tensor[(4, 8, 5), float64]) -> (Tensor[(4, 8, 5), float64], Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32]) {
  %108 = cast(%var_4589, dtype="float64") /* ty=Tensor[(4, 8, 5), float64] */;
  %109 = log(%108) /* ty=Tensor[(4, 8, 5), float64] */;
  %110 = cast(%109, dtype="float64") /* ty=Tensor[(4, 8, 5), float64] */;
  %111 = @func_4164() /* ty=(Tensor[(1, 6, 3), float32],) */;
  %112 = log2(%110) /* ty=Tensor[(4, 8, 5), float64] */;
  %113 = %111.0;
  %114 = @func_2773() /* ty=Tensor[(1, 6, 3), float32] */;
  (%112, %113, %114)
}

def @func_5561() -> Tensor[(1, 6, 3), float32] {
  %115 = @func_4453() /* ty=(Tensor[(1, 6, 3), float32],) */;
  %115.0
}

def @func_5519(%var_5501: Tensor[(480), int32]) -> (Tensor[(400), int64], Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32], Tensor[(72), float32], Tensor[(480), int32], Tensor[(1, 6, 3), float32]) {
  %116 = @func_4522() /* ty=(Tensor[(1, 6, 3), float32], Tensor[(16, 5, 5), int64], Tensor[(400), int64], Tensor[(1, 6, 3), float32], Tensor[(11, 2, 12), uint64], Tensor[(132, 2), uint64], Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32]) */;
  %117 = @func_4864() /* ty=(Tensor[(1, 6, 3), float32],) */;
  %118 = cast(%var_5501, dtype="int32") /* ty=Tensor[(480), int32] */;
  %119 = reshape(%118, newshape=[480]) /* ty=Tensor[(480), int32] */;
  %120 = @func_1117(%119) /* ty=(Tensor[(72), float32], Tensor[(480), int32], Tensor[(2, 12, 5), float32]) */;
  %121 = %116.2;
  %122 = %117.0;
  %123 = @func_4671() /* ty=Tensor[(1, 6, 3), float32] */;
  %124 = %120.0;
  %125 = @func_2412() /* ty=Tensor[(1, 6, 3), float32] */;
  (%121, %122, %123, %124, %var_5501, %125)
}

def @func_6933(%var_6900: Tensor[(3, 4, 4), float64]) -> (Tensor[(3, 4, 4), float64], Tensor[(1, 6, 3), float32]) {
  %126 = cast(meta[relay.Constant][7] /* ty=Tensor[(3, 4, 4), float64] */, dtype="float64") /* ty=Tensor[(3, 4, 4), float64] */;
  %127 = shape_of(%var_6900, dtype="int32") /* ty=Tensor[(3), int32] */;
  %128 = cast(%var_6900, dtype="float64") /* ty=Tensor[(3, 4, 4), float64] */;
  %129 = dyn.reshape(%126, %127, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %130 = floor_divide(%128, %129) /* ty=Tensor[(3, 4, 4), float64] */;
  %131 = cast(%130, dtype="float64") /* ty=Tensor[(3, 4, 4), float64] */;
  %132 = sin(%131) /* ty=Tensor[(3, 4, 4), float64] */;
  %133 = @func_3947() /* ty=Tensor[(1, 6, 3), float32] */;
  (%132, %133)
}

def @func_6716() -> Tensor[(1, 6, 3), float32] {
  %134 = @func_4864() /* ty=(Tensor[(1, 6, 3), float32],) */;
  %134.0
}

def @func_5241(%var_5230: Tensor[(16, 80), float32], %var_5232: Tensor[(480), int32]) -> (Tensor[(?, 6, 3), bool], Tensor[(360, 2), float64], Tensor[(16, 10, 8), bool], Tensor[(16, 80), float32], Tensor[(14), int64], Tensor[(480), int32], Tensor[(?, 6, 3), bool]) {
  %135 = @func_4139() /* ty=(Tensor[(1, 6, 3), float32],) */;
  %136 = %135.0;
  %137 = @func_4671() /* ty=Tensor[(1, 6, 3), float32] */;
  %138 = cast(%137, dtype="bool") /* ty=Tensor[(1, 6, 3), bool] */;
  %139 = shape_of(%136, dtype="int32") /* ty=Tensor[(3), int32] */;
  %140 = cast(%136, dtype="bool") /* ty=Tensor[(1, 6, 3), bool] */;
  %141 = dyn.reshape(%138, %139, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %142 = cast(meta[relay.Constant][8] /* ty=Tensor[(720), uint32] */, dtype="uint32") /* ty=Tensor[(720), uint32] */;
  %143 = reshape(%142, newshape=[360, 2]) /* ty=Tensor[(360, 2), uint32] */;
  %144 = @func_2683(%143) /* ty=(Tensor[(1, 6, 3), float32], Tensor[(8, 10, 9), uint32], Tensor[(360, 2), bool], Tensor[(360, 2), float64]) */;
  %145 = %144.3;
  %146 = cast(meta[relay.Constant][8] /* ty=Tensor[(720), uint32] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %147 = shape_of(%145, dtype="int32") /* ty=Tensor[(2), int32] */;
  %148 = cast(%145, dtype="float64") /* ty=Tensor[(360, 2), float64] */;
  %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %150 = cast(%var_5230, dtype="float32") /* ty=Tensor[(16, 80), float32] */;
  %151 = cast(meta[relay.Constant][9] /* ty=Tensor[(14), int64] */, dtype="int64") /* ty=Tensor[(14), int64] */;
  %152 = cast(%var_5232, dtype="int32") /* ty=Tensor[(480), int32] */;
  %153 = cast(%var_5230, dtype="float32") /* ty=Tensor[(16, 80), float32] */;
  %154 = reshape(%150, newshape=[16, 10, 8]) /* ty=Tensor[(16, 10, 8), float32] */;
  %155 = reshape(%151, newshape=[14]) /* ty=Tensor[(14), int64] */;
  %156 = reshape(%152, newshape=[480]) /* ty=Tensor[(480), int32] */;
  %157 = reshape(%153, newshape=[16, 10, 8]) /* ty=Tensor[(16, 10, 8), float32] */;
  %158 = @func_1634(%154, %155, %156, %157) /* ty=(Tensor[(16, 10, 8), float64], Tensor[(3, 3, 8), bool], Tensor[(14), int64], Tensor[(480), int32], Tensor[(2, 12, 5), float32], Tensor[(16, 10, 8), bool], Tensor[(3, 3, 8), float64], Tensor[(3, 3, 8), bool]) */;
  %159 = @func_3951() /* ty=Tensor[(1, 6, 3), float32] */;
  %160 = cast(%137, dtype="bool") /* ty=Tensor[(1, 6, 3), bool] */;
  %161 = shape_of(%159, dtype="int32") /* ty=Tensor[(3), int32] */;
  %162 = cast(%159, dtype="bool") /* ty=Tensor[(1, 6, 3), bool] */;
  %163 = dyn.reshape(%160, %161, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %164 = greater(%140, %141) /* ty=Tensor[(?, 6, 3), bool] */;
  %165 = power(%148, %149) /* ty=Tensor[(360, 2), float64] */;
  %166 = %158.5;
  %167 = less_equal(%162, %163) /* ty=Tensor[(?, 6, 3), bool] */;
  (%164, %165, %166, %var_5230, meta[relay.Constant][9] /* ty=Tensor[(14), int64] */, %var_5232, %167)
}

def @func_3514(%var_3502: Tensor[(480), int32]) -> (Tensor[(1, 6, 3), float32], Tensor[(1, 14), int64], Tensor[(980), float32], Tensor[(480), int32]) {
  %168 = cast(meta[relay.Constant][10] /* ty=Tensor[(980), float32] */, dtype="float32") /* ty=Tensor[(980), float32] */;
  %169 = cast(%var_3502, dtype="int32") /* ty=Tensor[(480), int32] */;
  %170 = reshape(%168, newshape=[10, 7, 14]) /* ty=Tensor[(10, 7, 14), float32] */;
  %171 = reshape(%169, newshape=[480]) /* ty=Tensor[(480), int32] */;
  %172 = @func_2174(%170, %171) /* ty=(Tensor[(10, 7, 14), bool], Tensor[(16, 10, 8), bool], Tensor[(4, 320), float32], Tensor[(1, 14), int64], Tensor[(480), int32], Tensor[(2, 12, 5), float32], Tensor[(72), float32]) */;
  %173 = @func_2773() /* ty=Tensor[(1, 6, 3), float32] */;
  %174 = %172.3;
  (%173, %174, meta[relay.Constant][10] /* ty=Tensor[(980), float32] */, %var_3502)
}

def @func_2747(%var_2736: Tensor[(11, 2, 12), uint64], %var_2737: Tensor[(11, 2, 12), uint64]) -> Tensor[(11, 2, 12), uint64] {
  %175 = cast(%var_2737, dtype="uint64") /* ty=Tensor[(11, 2, 12), uint64] */;
  %176 = shape_of(%var_2736, dtype="int32") /* ty=Tensor[(3), int32] */;
  %177 = cast(%var_2736, dtype="uint64") /* ty=Tensor[(11, 2, 12), uint64] */;
  %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  bitwise_or(%177, %178) /* ty=Tensor[(11, 2, 12), uint64] */
}

def @func_3884(%var_3859: Tensor[(16, 6, 3), float32]) -> (Tensor[(16, 6, 3), float32], Tensor[(12, 6, 3), float32]) {
  %179 = @func_2412() /* ty=Tensor[(1, 6, 3), float32] */;
  %180 = cast(%179, dtype="float32") /* ty=Tensor[(1, 6, 3), float32] */;
  %181 = cast(%var_3859, dtype="float32") /* ty=Tensor[(16, 6, 3), float32] */;
  %182 = @func_2393() /* ty=Tensor[(1, 6, 3), float32] */;
  %183 = cast(%182, dtype="float32") /* ty=Tensor[(1, 6, 3), float32] */;
  %184 = cast(meta[relay.Constant][11] /* ty=Tensor[(12, 6, 3), float32] */, dtype="float32") /* ty=Tensor[(12, 6, 3), float32] */;
  %185 = floor_mod(%180, %181) /* ty=Tensor[(16, 6, 3), float32] */;
  %186 = mod(%183, %184) /* ty=Tensor[(12, 6, 3), float32] */;
  (%185, %186)
}

def @func_7201(%var_7198: Tensor[(1890), uint32]) -> (Tensor[(1, 6, 3), float64], Tensor[(1890), uint32], Tensor[(1890), uint32]) {
  %187 = @func_5455() /* ty=(Tensor[(1, 6, 3), float64],) */;
  %188 = cast(%var_7198, dtype="uint32") /* ty=Tensor[(1890), uint32] */;
  %189 = reshape(%188, newshape=[1890]) /* ty=Tensor[(1890), uint32] */;
  %190 = @func_7048(%189) /* ty=(Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32], Tensor[(1890), uint32], Tensor[(1890), uint32]) */;
  %191 = %187.0;
  %192 = %190.3;
  (%191, %192, %var_7198)
}

def @func_3992(%var_3971: float32, %var_3972: Tensor[(16, 12, 6), float32]) -> (Tensor[(16, 12, 6), uint32], Tensor[(5, 6, 11), bool], Tensor[(5, 66), int32], Tensor[(1274), float32]) {
  %193 = cast(%var_3971, dtype="float32") /* ty=float32 */;
  %194 = cast(%var_3972, dtype="float32") /* ty=Tensor[(16, 12, 6), float32] */;
  %195 = floor_mod(%193, %194) /* ty=Tensor[(16, 12, 6), float32] */;
  %196 = cast(%var_3972, dtype="uint32") /* ty=Tensor[(16, 12, 6), uint32] */;
  %197 = shape_of(%195, dtype="int32") /* ty=Tensor[(3), int32] */;
  %198 = cast(%195, dtype="uint32") /* ty=Tensor[(16, 12, 6), uint32] */;
  %199 = dyn.reshape(%196, %197, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %200 = cast(meta[relay.Constant][12] /* ty=Tensor[(5, 66), int32] */, dtype="int32") /* ty=Tensor[(5, 66), int32] */;
  %201 = cast(meta[relay.Constant][12] /* ty=Tensor[(5, 66), int32] */, dtype="int32") /* ty=Tensor[(5, 66), int32] */;
  %202 = cast(meta[relay.Constant][13] /* ty=Tensor[(1274), float32] */, dtype="float32") /* ty=Tensor[(1274), float32] */;
  %203 = reshape(%200, newshape=[5, 6, 11]) /* ty=Tensor[(5, 6, 11), int32] */;
  %204 = reshape(%201, newshape=[5, 6, 11]) /* ty=Tensor[(5, 6, 11), int32] */;
  %205 = reshape(%202, newshape=[1274]) /* ty=Tensor[(1274), float32] */;
  %206 = @func_1543(%203, %204, %205) /* ty=(Tensor[(5, 6, 11), bool], Tensor[(5, 6, 11), uint8], Tensor[(14, 7, 13), int8], Tensor[(1274), float32]) */;
  %207 = left_shift(%198, %199) /* ty=Tensor[(16, 12, 6), uint32] */;
  %208 = %206.0;
  (%207, %208, meta[relay.Constant][12] /* ty=Tensor[(5, 66), int32] */, meta[relay.Constant][13] /* ty=Tensor[(1274), float32] */)
}

def @func_7218() -> Tensor[(1, 6, 3), float32] {
  @func_3397() /* ty=Tensor[(1, 6, 3), float32] */
}

def @func_4794(%var_4764: Tensor[(7, 2, 4), float32], %var_4787: Tensor[(360), uint64], %var_4791: Tensor[(1, 126), float32]) -> (Tensor[(7, 2, 4), float64], Tensor[(7, 2, 4), int16], Tensor[(12, 10, 3), uint64], Tensor[(360), uint64], Tensor[(720), uint32], Tensor[(1, 126), float32]) {
  %209 = cast(%var_4764, dtype="float32") /* ty=Tensor[(7, 2, 4), float32] */;
  %210 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(7, 2, 4), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %211 = cast(meta[relay.Constant][14] /* ty=Tensor[(7, 2, 4), float32] */, dtype="float32") /* ty=Tensor[(7, 2, 4), float32] */;
  %212 = dyn.reshape(%209, %210, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %213 = floor_mod(%211, %212) /* ty=Tensor[(7, 2, 4), float32] */;
  %214 = cast(%var_4764, dtype="float64") /* ty=Tensor[(7, 2, 4), float64] */;
  %215 = atan(%214) /* ty=Tensor[(7, 2, 4), float64] */;
  %216 = cast(%215, dtype="float64") /* ty=Tensor[(7, 2, 4), float64] */;
  %217 = shape_of(%213, dtype="int32") /* ty=Tensor[(3), int32] */;
  %218 = cast(%213, dtype="float64") /* ty=Tensor[(7, 2, 4), float64] */;
  %219 = dyn.reshape(%216, %217, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %220 = cast(%var_4764, dtype="int16") /* ty=Tensor[(7, 2, 4), int16] */;
  %221 = shape_of(%215, dtype="int32") /* ty=Tensor[(3), int32] */;
  %222 = cast(%215, dtype="int16") /* ty=Tensor[(7, 2, 4), int16] */;
  %223 = dyn.reshape(%220, %221, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %224 = cast(%var_4787, dtype="uint64") /* ty=Tensor[(360), uint64] */;
  %225 = reshape(%224, newshape=[12, 10, 3]) /* ty=Tensor[(12, 10, 3), uint64] */;
  %226 = @func_1022(%225) /* ty=(Tensor[(12, 10, 3), uint64],) */;
  %227 = cast(%var_4791, dtype="float32") /* ty=Tensor[(1, 126), float32] */;
  %228 = reshape(%227, newshape=[7, 6, 3]) /* ty=Tensor[(7, 6, 3), float32] */;
  %229 = @func_3247(%228) /* ty=(Tensor[(1, 128), uint16], Tensor[(8, 10, 9), uint32], Tensor[(720), uint32], Tensor[(7, 6, 3), int8], Tensor[(2, 13, 5), float32]) */;
  %230 = divide(%218, %219) /* ty=Tensor[(7, 2, 4), float64] */;
  %231 = multiply(%222, %223) /* ty=Tensor[(7, 2, 4), int16] */;
  %232 = %226.0;
  %233 = %229.2;
  (%230, %231, %232, %var_4787, %233, %var_4791)
}

def @func_5260() -> Tensor[(1, 6, 3), float64] {
  %234 = @func_5031() /* ty=(Tensor[(1, 6, 3), float64],) */;
  %235 = %234.0;
  %236 = cast(%235, dtype="float64") /* ty=Tensor[(1, 6, 3), float64] */;
  log10(%236) /* ty=Tensor[(1, 6, 3), float64] */
}

def @func_4122() -> Tensor[(1, 6, 3), float32] {
  @func_2412() /* ty=Tensor[(1, 6, 3), float32] */
}

def @func_4719() -> (Tensor[(1, 6, 3), float32],) {
  %237 = @func_4453() /* ty=(Tensor[(1, 6, 3), float32],) */;
  %238 = %237.0;
  (%238,)
}

def @func_4139() -> (Tensor[(1, 6, 3), float32],) {
  %239 = @func_4101() /* ty=Tensor[(1, 6, 3), float32] */;
  (%239,)
}

def @func_4522() -> (Tensor[(1, 6, 3), float32], Tensor[(16, 5, 5), int64], Tensor[(400), int64], Tensor[(1, 6, 3), float32], Tensor[(11, 2, 12), uint64], Tensor[(132, 2), uint64], Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32]) {
  %240 = @func_4453() /* ty=(Tensor[(1, 6, 3), float32],) */;
  %241 = cast(meta[relay.Constant][15] /* ty=Tensor[(400), int64] */, dtype="int64") /* ty=Tensor[(400), int64] */;
  %242 = cast(meta[relay.Constant][15] /* ty=Tensor[(400), int64] */, dtype="int64") /* ty=Tensor[(400), int64] */;
  %243 = reshape(%241, newshape=[16, 5, 5]) /* ty=Tensor[(16, 5, 5), int64] */;
  %244 = reshape(%242, newshape=[16, 5, 5]) /* ty=Tensor[(16, 5, 5), int64] */;
  %245 = @func_3315() /* ty=(Tensor[(1, 6, 3), float32],) */;
  %246 = cast(meta[relay.Constant][16] /* ty=Tensor[(132, 2), uint64] */, dtype="uint64") /* ty=Tensor[(132, 2), uint64] */;
  %247 = reshape(%246, newshape=[66, 4]) /* ty=Tensor[(66, 4), uint64] */;
  %248 = @func_3471(%247) /* ty=(Tensor[(1, 6, 3), float32], Tensor[(11, 2, 12), uint64], Tensor[(66, 4), uint64]) */;
  %249 = @func_4453() /* ty=(Tensor[(1, 6, 3), float32],) */;
  %250 = @func_4139() /* ty=(Tensor[(1, 6, 3), float32],) */;
  %251 = %240.0;
  %252 = @func_2420(%243, %244) /* ty=Tensor[(16, 5, 5), int64] */;
  %253 = %245.0;
  %254 = %248.1;
  %255 = %249.0;
  %256 = %250.0;
  (%251, %252, meta[relay.Constant][15] /* ty=Tensor[(400), int64] */, %253, %254, meta[relay.Constant][16] /* ty=Tensor[(132, 2), uint64] */, %255, %256)
}

def @func_4671() -> Tensor[(1, 6, 3), float32] {
  @func_4101() /* ty=Tensor[(1, 6, 3), float32] */
}

def @func_2339(%var_2312: Tensor[(4, 2, 16), uint16]) -> (Tensor[(4, 2, 16), uint16], Tensor[(2, 13, 5), float32], Tensor[(14), int64], Tensor[(480), int32]) {
  %257 = cast(meta[relay.Constant][17] /* ty=Tensor[(4, 2, 16), uint16] */, dtype="uint16") /* ty=Tensor[(4, 2, 16), uint16] */;
  %258 = shape_of(%var_2312, dtype="int32") /* ty=Tensor[(3), int32] */;
  %259 = cast(%var_2312, dtype="uint16") /* ty=Tensor[(4, 2, 16), uint16] */;
  %260 = dyn.reshape(%257, %258, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %261 = cast(meta[relay.Constant][18] /* ty=Tensor[(14), int64] */, dtype="int64") /* ty=Tensor[(14), int64] */;
  %262 = cast(meta[relay.Constant][19] /* ty=Tensor[(480), int32] */, dtype="int32") /* ty=Tensor[(480), int32] */;
  %263 = reshape(%261, newshape=[7, 2]) /* ty=Tensor[(7, 2), int64] */;
  %264 = reshape(%262, newshape=[480]) /* ty=Tensor[(480), int32] */;
  %265 = @func_1238(%263, %264) /* ty=(Tensor[(7, 2), int64], Tensor[(2, 13, 5), float32], Tensor[(3, 3, 8), bool], Tensor[(480), int32], Tensor[(130), float32], Tensor[(3, 3, 8), bool]) */;
  %266 = bitwise_xor(%259, %260) /* ty=Tensor[(4, 2, 16), uint16] */;
  %267 = %265.1;
  (%266, %267, meta[relay.Constant][18] /* ty=Tensor[(14), int64] */, meta[relay.Constant][19] /* ty=Tensor[(480), int32] */)
}

def @func_4386(%var_4356: Tensor[(11, 12, 2), float32], %var_4376: Tensor[(11, 12, 2), float32]) -> (Tensor[(11, 12, 2), float32], Tensor[(11, 12, 2), float64]) {
  %268 = cast(%var_4356, dtype="float32") /* ty=Tensor[(11, 12, 2), float32] */;
  %269 = cast(%var_4356, dtype="float32") /* ty=Tensor[(11, 12, 2), float32] */;
  %270 = erf(%269) /* ty=Tensor[(11, 12, 2), float32] */;
  %271 = cast(%var_4376, dtype="float32") /* ty=Tensor[(11, 12, 2), float32] */;
  %272 = shape_of(%270, dtype="int32") /* ty=Tensor[(3), int32] */;
  %273 = cast(%270, dtype="float32") /* ty=Tensor[(11, 12, 2), float32] */;
  %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %275 = power(%273, %274) /* ty=Tensor[(11, 12, 2), float32] */;
  %276 = cast(%275, dtype="float64") /* ty=Tensor[(11, 12, 2), float64] */;
  %277 = sqrt(%268) /* ty=Tensor[(11, 12, 2), float32] */;
  %278 = sigmoid(%276) /* ty=Tensor[(11, 12, 2), float64] */;
  (%277, %278)
}

def @func_2229(%var_2211: Tensor[(8, 10, 9), uint32], %var_2212: Tensor[(8, 10, 9), uint32]) -> (Tensor[(8, 10, 9), uint32], Tensor[(8, 10, 9), float64]) {
  %279 = cast(%var_2212, dtype="uint32") /* ty=Tensor[(8, 10, 9), uint32] */;
  %280 = shape_of(%var_2211, dtype="int32") /* ty=Tensor[(3), int32] */;
  %281 = cast(%var_2211, dtype="uint32") /* ty=Tensor[(8, 10, 9), uint32] */;
  %282 = dyn.reshape(%279, %280, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %283 = cast(%var_2212, dtype="float64") /* ty=Tensor[(8, 10, 9), float64] */;
  %284 = bitwise_and(%281, %282) /* ty=Tensor[(8, 10, 9), uint32] */;
  %285 = cosh(%283) /* ty=Tensor[(8, 10, 9), float64] */;
  (%284, %285)
}

def @func_1543(%var_1530: Tensor[(5, 6, 11), int32], %var_1531: Tensor[(5, 6, 11), int32], %var_1540: Tensor[(1274), float32]) -> (Tensor[(5, 6, 11), bool], Tensor[(5, 6, 11), uint8], Tensor[(14, 7, 13), int8], Tensor[(1274), float32]) {
  %286 = cast(%var_1531, dtype="bool") /* ty=Tensor[(5, 6, 11), bool] */;
  %287 = shape_of(%var_1530, dtype="int32") /* ty=Tensor[(3), int32] */;
  %288 = cast(%var_1530, dtype="bool") /* ty=Tensor[(5, 6, 11), bool] */;
  %289 = dyn.reshape(%286, %287, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %290 = cast(%var_1530, dtype="uint8") /* ty=Tensor[(5, 6, 11), uint8] */;
  %291 = shape_of(%var_1531, dtype="int32") /* ty=Tensor[(3), int32] */;
  %292 = cast(%var_1531, dtype="uint8") /* ty=Tensor[(5, 6, 11), uint8] */;
  %293 = dyn.reshape(%290, %291, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %294 = cast(%var_1540, dtype="float32") /* ty=Tensor[(1274), float32] */;
  %295 = reshape(%294, newshape=[14, 7, 13]) /* ty=Tensor[(14, 7, 13), float32] */;
  %296 = equal(%288, %289) /* ty=Tensor[(5, 6, 11), bool] */;
  %297 = right_shift(%292, %293) /* ty=Tensor[(5, 6, 11), uint8] */;
  %298 = @func_1520(%295) /* ty=Tensor[(14, 7, 13), int8] */;
  (%296, %297, %298, %var_1540)
}

def @func_2393() -> Tensor[(1, 6, 3), float32] {
  %299 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 6, 3), float64] */, dtype="float64") /* ty=Tensor[(1, 6, 3), float64] */;
  %300 = acosh(%299) /* ty=Tensor[(1, 6, 3), float64] */;
  %301 = cast(%300, dtype="float32") /* ty=Tensor[(1, 6, 3), float32] */;
  rsqrt(%301) /* ty=Tensor[(1, 6, 3), float32] */
}

def @func_5455() -> (Tensor[(1, 6, 3), float64],) {
  %302 = @func_4420() /* ty=Tensor[(1, 6, 3), float64] */;
  (%302,)
}

def @func_6519(%var_6456: Tensor[(8, 14, 1), float64]) -> (Tensor[(1, 6, 3), float32], Tensor[(8, 14, ?), bool], Tensor[(1, 6, 3), float32]) {
  %303 = @func_3315() /* ty=(Tensor[(1, 6, 3), float32],) */;
  %304 = cast(%var_6456, dtype="float64") /* ty=Tensor[(8, 14, 1), float64] */;
  %305 = asinh(%304) /* ty=Tensor[(8, 14, 1), float64] */;
  %306 = cast(%var_6456, dtype="bool") /* ty=Tensor[(8, 14, 1), bool] */;
  %307 = shape_of(%305, dtype="int32") /* ty=Tensor[(3), int32] */;
  %308 = cast(%305, dtype="bool") /* ty=Tensor[(8, 14, 1), bool] */;
  %309 = dyn.reshape(%306, %307, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %310 = @func_4719() /* ty=(Tensor[(1, 6, 3), float32],) */;
  %311 = %303.0;
  %312 = not_equal(%308, %309) /* ty=Tensor[(8, 14, ?), bool] */;
  %313 = %310.0;
  (%311, %312, %313)
}

def @main(%var_7285: Tensor[(9, 5, 7), int16], %var_7286: Tensor[(9, 5, 7), int16]) -> Tensor[(9, 5, 7), int16] {
  %314 = cast(%var_7286, dtype="int16") /* ty=Tensor[(9, 5, 7), int16] */;
  %315 = shape_of(%var_7285, dtype="int32") /* ty=Tensor[(3), int32] */;
  %316 = cast(%var_7285, dtype="int16") /* ty=Tensor[(9, 5, 7), int16] */;
  %317 = dyn.reshape(%314, %315, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  minimum(%316, %317) /* ty=Tensor[(9, 5, 7), int16] */
}

def @func_6995(%var_6992: Tensor[(48), float64]) -> (Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32], Tensor[(48), float64]) {
  %318 = cast(%var_6992, dtype="float64") /* ty=Tensor[(48), float64] */;
  %319 = reshape(%318, newshape=[3, 4, 4]) /* ty=Tensor[(3, 4, 4), float64] */;
  %320 = @func_6933(%319) /* ty=(Tensor[(3, 4, 4), float64], Tensor[(1, 6, 3), float32]) */;
  %321 = @func_5010() /* ty=Tensor[(1, 6, 3), float32] */;
  %322 = %320.1;
  (%321, %322, %var_6992)
}

def @func_1520(%var_1510: Tensor[(14, 7, 13), float32]) -> Tensor[(14, 7, 13), int8] {
  %323 = cast(meta[relay.Constant][21] /* ty=Tensor[(14, 7, 13), float32] */, dtype="float32") /* ty=Tensor[(14, 7, 13), float32] */;
  %324 = tan(%323) /* ty=Tensor[(14, 7, 13), float32] */;
  %325 = cast(%var_1510, dtype="uint32") /* ty=Tensor[(14, 7, 13), uint32] */;
  %326 = shape_of(%324, dtype="int32") /* ty=Tensor[(3), int32] */;
  %327 = cast(%324, dtype="uint32") /* ty=Tensor[(14, 7, 13), uint32] */;
  %328 = dyn.reshape(%325, %326, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %329 = multiply(%327, %328) /* ty=Tensor[(14, 7, 13), uint32] */;
  %330 = cast(%329, dtype="int8") /* ty=Tensor[(14, 7, 13), int8] */;
  %331 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(14, 7, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %332 = cast(meta[relay.Constant][21] /* ty=Tensor[(14, 7, 13), float32] */, dtype="int8") /* ty=Tensor[(14, 7, 13), int8] */;
  %333 = dyn.reshape(%330, %331, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  bitwise_or(%332, %333) /* ty=Tensor[(14, 7, 13), int8] */
}

def @func_5010() -> Tensor[(1, 6, 3), float32] {
  @func_2412() /* ty=Tensor[(1, 6, 3), float32] */
}

def @func_6434() -> (Tensor[(1, 6, 3), float64],) {
  %334 = @func_5455() /* ty=(Tensor[(1, 6, 3), float64],) */;
  %335 = %334.0;
  (%335,)
}

def @func_4420() -> Tensor[(1, 6, 3), float64] {
  %336 = @func_3397() /* ty=Tensor[(1, 6, 3), float32] */;
  %337 = cast(%336, dtype="float64") /* ty=Tensor[(1, 6, 3), float64] */;
  asinh(%337) /* ty=Tensor[(1, 6, 3), float64] */
}

def @func_2639(%var_2602: Tensor[(720), uint32]) -> (Tensor[(9, 15, 14), float32], Tensor[(1890), uint32], Tensor[(480), int32], Tensor[(480), int32], Tensor[(2, 13, 5), float32], Tensor[(128), uint16], Tensor[(8, 10, 9), float64], Tensor[(720), uint32], Tensor[(?, 6, 3), uint8], Tensor[(2, 13, 5), float32]) {
  %338 = cast(meta[relay.Constant][22] /* ty=Tensor[(1890), uint32] */, dtype="uint32") /* ty=Tensor[(1890), uint32] */;
  %339 = cast(meta[relay.Constant][22] /* ty=Tensor[(1890), uint32] */, dtype="uint32") /* ty=Tensor[(1890), uint32] */;
  %340 = reshape(%338, newshape=[9, 15, 14]) /* ty=Tensor[(9, 15, 14), uint32] */;
  %341 = reshape(%339, newshape=[9, 15, 14]) /* ty=Tensor[(9, 15, 14), uint32] */;
  %342 = cast(meta[relay.Constant][23] /* ty=Tensor[(480), int32] */, dtype="int32") /* ty=Tensor[(480), int32] */;
  %343 = reshape(%342, newshape=[480]) /* ty=Tensor[(480), int32] */;
  %344 = @func_1117(%343) /* ty=(Tensor[(72), float32], Tensor[(480), int32], Tensor[(2, 12, 5), float32]) */;
  %345 = cast(meta[relay.Constant][24] /* ty=Tensor[(128), uint16] */, dtype="uint16") /* ty=Tensor[(128), uint16] */;
  %346 = reshape(%345, newshape=[4, 2, 16]) /* ty=Tensor[(4, 2, 16), uint16] */;
  %347 = @func_2339(%346) /* ty=(Tensor[(4, 2, 16), uint16], Tensor[(2, 13, 5), float32], Tensor[(14), int64], Tensor[(480), int32]) */;
  %348 = cast(%var_2602, dtype="uint32") /* ty=Tensor[(720), uint32] */;
  %349 = cast(%var_2602, dtype="uint32") /* ty=Tensor[(720), uint32] */;
  %350 = reshape(%348, newshape=[8, 10, 9]) /* ty=Tensor[(8, 10, 9), uint32] */;
  %351 = reshape(%349, newshape=[8, 10, 9]) /* ty=Tensor[(8, 10, 9), uint32] */;
  %352 = @func_2229(%350, %351) /* ty=(Tensor[(8, 10, 9), uint32], Tensor[(8, 10, 9), float64]) */;
  %353 = @func_2412() /* ty=Tensor[(1, 6, 3), float32] */;
  %354 = cast(%353, dtype="float64") /* ty=Tensor[(1, 6, 3), float64] */;
  %355 = acos(%354) /* ty=Tensor[(1, 6, 3), float64] */;
  %356 = cast(%353, dtype="uint8") /* ty=Tensor[(1, 6, 3), uint8] */;
  %357 = shape_of(%355, dtype="int32") /* ty=Tensor[(3), int32] */;
  %358 = cast(%355, dtype="uint8") /* ty=Tensor[(1, 6, 3), uint8] */;
  %359 = dyn.reshape(%356, %357, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %360 = %347.1;
  %361 = cast(%360, dtype="float32") /* ty=Tensor[(2, 13, 5), float32] */;
  %362 = cast(%360, dtype="float32") /* ty=Tensor[(2, 13, 5), float32] */;
  %363 = reshape(%361, newshape=[2, 13, 5]) /* ty=Tensor[(2, 13, 5), float32] */;
  %364 = reshape(%362, newshape=[2, 13, 5]) /* ty=Tensor[(2, 13, 5), float32] */;
  %365 = @func_168(%363, %364) /* ty=(Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), float32]) */;
  %366 = @func_807(%340, %341) /* ty=Tensor[(9, 15, 14), float32] */;
  %367 = %344.1;
  %368 = %352.1;
  %369 = right_shift(%358, %359) /* ty=Tensor[(?, 6, 3), uint8] */;
  %370 = %365.2;
  (%366, meta[relay.Constant][22] /* ty=Tensor[(1890), uint32] */, %367, meta[relay.Constant][23] /* ty=Tensor[(480), int32] */, %360, meta[relay.Constant][24] /* ty=Tensor[(128), uint16] */, %368, %var_2602, %369, %370)
}

def @func_3947() -> Tensor[(1, 6, 3), float32] {
  %371 = @func_3315() /* ty=(Tensor[(1, 6, 3), float32],) */;
  %371.0
}

def @func_1634(%var_1590: Tensor[(16, 10, 8), float32], %var_1601: Tensor[(14), int64], %var_1602: Tensor[(480), int32], %var_1617: Tensor[(16, 10, 8), float32]) -> (Tensor[(16, 10, 8), float64], Tensor[(3, 3, 8), bool], Tensor[(14), int64], Tensor[(480), int32], Tensor[(2, 12, 5), float32], Tensor[(16, 10, 8), bool], Tensor[(3, 3, 8), float64], Tensor[(3, 3, 8), bool]) {
  %372 = cast(%var_1590, dtype="float32") /* ty=Tensor[(16, 10, 8), float32] */;
  %373 = sinh(%372) /* ty=Tensor[(16, 10, 8), float32] */;
  %374 = cast(%373, dtype="float64") /* ty=Tensor[(16, 10, 8), float64] */;
  %375 = cast(%var_1601, dtype="int64") /* ty=Tensor[(14), int64] */;
  %376 = cast(%var_1602, dtype="int32") /* ty=Tensor[(480), int32] */;
  %377 = reshape(%375, newshape=[7, 2]) /* ty=Tensor[(7, 2), int64] */;
  %378 = reshape(%376, newshape=[480]) /* ty=Tensor[(480), int32] */;
  %379 = @func_1238(%377, %378) /* ty=(Tensor[(7, 2), int64], Tensor[(2, 13, 5), float32], Tensor[(3, 3, 8), bool], Tensor[(480), int32], Tensor[(130), float32], Tensor[(3, 3, 8), bool]) */;
  %380 = cast(%var_1602, dtype="int32") /* ty=Tensor[(480), int32] */;
  %381 = reshape(%380, newshape=[480]) /* ty=Tensor[(480), int32] */;
  %382 = @func_1117(%381) /* ty=(Tensor[(72), float32], Tensor[(480), int32], Tensor[(2, 12, 5), float32]) */;
  %383 = cast(%var_1617, dtype="bool") /* ty=Tensor[(16, 10, 8), bool] */;
  %384 = shape_of(%373, dtype="int32") /* ty=Tensor[(3), int32] */;
  %385 = cast(%373, dtype="bool") /* ty=Tensor[(16, 10, 8), bool] */;
  %386 = dyn.reshape(%383, %384, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %387 = cast(%var_1602, dtype="int32") /* ty=Tensor[(480), int32] */;
  %388 = reshape(%387, newshape=[6, 5, 16]) /* ty=Tensor[(6, 5, 16), int32] */;
  %389 = @func_695(%388) /* ty=(Tensor[(6, 5, 16), int32], Tensor[(3, 3, 8), bool], Tensor[(72), float32], Tensor[(3, 3, 8), bool]) */;
  %390 = %389.1;
  %391 = cast(%390, dtype="float64") /* ty=Tensor[(3, 3, 8), float64] */;
  %392 = cast(%var_1601, dtype="int64") /* ty=Tensor[(14), int64] */;
  %393 = cast(%var_1602, dtype="int32") /* ty=Tensor[(480), int32] */;
  %394 = reshape(%392, newshape=[7, 2]) /* ty=Tensor[(7, 2), int64] */;
  %395 = reshape(%393, newshape=[480]) /* ty=Tensor[(480), int32] */;
  %396 = @func_1238(%394, %395) /* ty=(Tensor[(7, 2), int64], Tensor[(2, 13, 5), float32], Tensor[(3, 3, 8), bool], Tensor[(480), int32], Tensor[(130), float32], Tensor[(3, 3, 8), bool]) */;
  %397 = acos(%374) /* ty=Tensor[(16, 10, 8), float64] */;
  %398 = %379.2;
  %399 = %382.2;
  %400 = logical_and(%385, %386) /* ty=Tensor[(16, 10, 8), bool] */;
  %401 = log(%391) /* ty=Tensor[(3, 3, 8), float64] */;
  %402 = %396.2;
  (%397, %398, %var_1601, %var_1602, %399, %400, %401, %402)
}

def @func_2174(%var_2149: Tensor[(10, 7, 14), float32], %var_2156: Tensor[(480), int32]) -> (Tensor[(10, 7, 14), bool], Tensor[(16, 10, 8), bool], Tensor[(4, 320), float32], Tensor[(1, 14), int64], Tensor[(480), int32], Tensor[(2, 12, 5), float32], Tensor[(72), float32]) {
  %403 = cast(%var_2149, dtype="bool") /* ty=Tensor[(10, 7, 14), bool] */;
  %404 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(10, 7, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %405 = cast(meta[relay.Constant][25] /* ty=Tensor[(10, 7, 14), float32] */, dtype="bool") /* ty=Tensor[(10, 7, 14), bool] */;
  %406 = dyn.reshape(%403, %404, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %407 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 320), float32] */, dtype="float32") /* ty=Tensor[(4, 320), float32] */;
  %408 = cast(meta[relay.Constant][27] /* ty=Tensor[(1, 14), int64] */, dtype="int64") /* ty=Tensor[(1, 14), int64] */;
  %409 = cast(%var_2156, dtype="int32") /* ty=Tensor[(480), int32] */;
  %410 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 320), float32] */, dtype="float32") /* ty=Tensor[(4, 320), float32] */;
  %411 = reshape(%407, newshape=[16, 10, 8]) /* ty=Tensor[(16, 10, 8), float32] */;
  %412 = reshape(%408, newshape=[14]) /* ty=Tensor[(14), int64] */;
  %413 = reshape(%409, newshape=[480]) /* ty=Tensor[(480), int32] */;
  %414 = reshape(%410, newshape=[16, 10, 8]) /* ty=Tensor[(16, 10, 8), float32] */;
  %415 = @func_1634(%411, %412, %413, %414) /* ty=(Tensor[(16, 10, 8), float64], Tensor[(3, 3, 8), bool], Tensor[(14), int64], Tensor[(480), int32], Tensor[(2, 12, 5), float32], Tensor[(16, 10, 8), bool], Tensor[(3, 3, 8), float64], Tensor[(3, 3, 8), bool]) */;
  %416 = cast(%var_2156, dtype="int32") /* ty=Tensor[(480), int32] */;
  %417 = reshape(%416, newshape=[480]) /* ty=Tensor[(480), int32] */;
  %418 = @func_1117(%417) /* ty=(Tensor[(72), float32], Tensor[(480), int32], Tensor[(2, 12, 5), float32]) */;
  %419 = cast(%var_2156, dtype="int32") /* ty=Tensor[(480), int32] */;
  %420 = reshape(%419, newshape=[480]) /* ty=Tensor[(480), int32] */;
  %421 = @func_1117(%420) /* ty=(Tensor[(72), float32], Tensor[(480), int32], Tensor[(2, 12, 5), float32]) */;
  %422 = less(%405, %406) /* ty=Tensor[(10, 7, 14), bool] */;
  %423 = %415.5;
  %424 = %418.2;
  %425 = %421.0;
  (%422, %423, meta[relay.Constant][26] /* ty=Tensor[(4, 320), float32] */, meta[relay.Constant][27] /* ty=Tensor[(1, 14), int64] */, %var_2156, %424, %425)
}

def @func_2683(%var_2657: Tensor[(360, 2), uint32]) -> (Tensor[(1, 6, 3), float32], Tensor[(8, 10, 9), uint32], Tensor[(360, 2), bool], Tensor[(360, 2), float64]) {
  %426 = cast(meta[relay.Constant][28] /* ty=Tensor[(360, 2), uint32] */, dtype="uint32") /* ty=Tensor[(360, 2), uint32] */;
  %427 = cast(meta[relay.Constant][28] /* ty=Tensor[(360, 2), uint32] */, dtype="uint32") /* ty=Tensor[(360, 2), uint32] */;
  %428 = reshape(%426, newshape=[8, 10, 9]) /* ty=Tensor[(8, 10, 9), uint32] */;
  %429 = reshape(%427, newshape=[8, 10, 9]) /* ty=Tensor[(8, 10, 9), uint32] */;
  %430 = @func_2229(%428, %429) /* ty=(Tensor[(8, 10, 9), uint32], Tensor[(8, 10, 9), float64]) */;
  %431 = cast(%var_2657, dtype="uint64") /* ty=Tensor[(360, 2), uint64] */;
  %432 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(360, 2), uint32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %433 = cast(meta[relay.Constant][28] /* ty=Tensor[(360, 2), uint32] */, dtype="uint64") /* ty=Tensor[(360, 2), uint64] */;
  %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %435 = multiply(%433, %434) /* ty=Tensor[(360, 2), uint64] */;
  %436 = cast(meta[relay.Constant][28] /* ty=Tensor[(360, 2), uint32] */, dtype="bool") /* ty=Tensor[(360, 2), bool] */;
  %437 = shape_of(%435, dtype="int32") /* ty=Tensor[(2), int32] */;
  %438 = cast(%435, dtype="bool") /* ty=Tensor[(360, 2), bool] */;
  %439 = dyn.reshape(%436, %437, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %440 = cast(%var_2657, dtype="float64") /* ty=Tensor[(360, 2), float64] */;
  %441 = @func_2393() /* ty=Tensor[(1, 6, 3), float32] */;
  %442 = %430.0;
  %443 = greater(%438, %439) /* ty=Tensor[(360, 2), bool] */;
  %444 = acos(%440) /* ty=Tensor[(360, 2), float64] */;
  (%441, %442, %443, %444)
}

def @func_1238(%var_1197: Tensor[(7, 2), int64], %var_1213: Tensor[(480), int32]) -> (Tensor[(7, 2), int64], Tensor[(2, 13, 5), float32], Tensor[(3, 3, 8), bool], Tensor[(480), int32], Tensor[(130), float32], Tensor[(3, 3, 8), bool]) {
  %445 = cast(8 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %446 = cast(%var_1197, dtype="int64") /* ty=Tensor[(7, 2), int64] */;
  %447 = cast(meta[relay.Constant][29] /* ty=Tensor[(130), float32] */, dtype="float32") /* ty=Tensor[(130), float32] */;
  %448 = cast(meta[relay.Constant][29] /* ty=Tensor[(130), float32] */, dtype="float32") /* ty=Tensor[(130), float32] */;
  %449 = reshape(%447, newshape=[2, 13, 5]) /* ty=Tensor[(2, 13, 5), float32] */;
  %450 = reshape(%448, newshape=[2, 13, 5]) /* ty=Tensor[(2, 13, 5), float32] */;
  %451 = @func_168(%449, %450) /* ty=(Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), float32]) */;
  %452 = cast(%var_1213, dtype="int32") /* ty=Tensor[(480), int32] */;
  %453 = reshape(%452, newshape=[6, 5, 16]) /* ty=Tensor[(6, 5, 16), int32] */;
  %454 = @func_695(%453) /* ty=(Tensor[(6, 5, 16), int32], Tensor[(3, 3, 8), bool], Tensor[(72), float32], Tensor[(3, 3, 8), bool]) */;
  %455 = cast(meta[relay.Constant][29] /* ty=Tensor[(130), float32] */, dtype="bool") /* ty=Tensor[(130), bool] */;
  %456 = cast(8 /* ty=int64 */, dtype="bool") /* ty=bool */;
  %457 = logical_and(%455, %456) /* ty=Tensor[(130), bool] */;
  %458 = cast(%457, dtype="float32") /* ty=Tensor[(130), float32] */;
  %459 = cast(%var_1213, dtype="int32") /* ty=Tensor[(480), int32] */;
  %460 = reshape(%459, newshape=[6, 5, 16]) /* ty=Tensor[(6, 5, 16), int32] */;
  %461 = @func_695(%460) /* ty=(Tensor[(6, 5, 16), int32], Tensor[(3, 3, 8), bool], Tensor[(72), float32], Tensor[(3, 3, 8), bool]) */;
  %462 = bitwise_xor(%445, %446) /* ty=Tensor[(7, 2), int64] */;
  %463 = %451.2;
  %464 = %454.1;
  %465 = sqrt(%458) /* ty=Tensor[(130), float32] */;
  %466 = %461.1;
  (%462, %463, %464, %var_1213, %465, %466)
}

def @func_2412() -> Tensor[(1, 6, 3), float32] {
  @func_2393() /* ty=Tensor[(1, 6, 3), float32] */
}

def @func_5895(%var_5848: Tensor[(6, 6, 3), float32]) -> (Tensor[(6, 6, 3), int64], Tensor[(?, 6, 3), bool], Tensor[(1280), float32], Tensor[(480), int32]) {
  %467 = @func_4101() /* ty=Tensor[(1, 6, 3), float32] */;
  %468 = cast(%467, dtype="int64") /* ty=Tensor[(1, 6, 3), int64] */;
  %469 = cast(%var_5848, dtype="int64") /* ty=Tensor[(6, 6, 3), int64] */;
  %470 = cast(meta[relay.Constant][30] /* ty=Tensor[(1280), float32] */, dtype="float32") /* ty=Tensor[(1280), float32] */;
  %471 = cast(meta[relay.Constant][31] /* ty=Tensor[(480), int32] */, dtype="int32") /* ty=Tensor[(480), int32] */;
  %472 = reshape(%470, newshape=[16, 80]) /* ty=Tensor[(16, 80), float32] */;
  %473 = reshape(%471, newshape=[480]) /* ty=Tensor[(480), int32] */;
  %474 = @func_5241(%472, %473) /* ty=(Tensor[(?, 6, 3), bool], Tensor[(360, 2), float64], Tensor[(16, 10, 8), bool], Tensor[(16, 80), float32], Tensor[(14), int64], Tensor[(480), int32], Tensor[(?, 6, 3), bool]) */;
  %475 = bitwise_and(%468, %469) /* ty=Tensor[(6, 6, 3), int64] */;
  %476 = %474.6;
  (%475, %476, meta[relay.Constant][30] /* ty=Tensor[(1280), float32] */, meta[relay.Constant][31] /* ty=Tensor[(480), int32] */)
}

def @func_6882(%var_6878: Tensor[(5, 12, 10), int8]) -> (Tensor[(5, 12, 10), int8],) {
  %477 = cast(%var_6878, dtype="int8") /* ty=Tensor[(5, 12, 10), int8] */;
  %478 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(5, 12, 10), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %479 = cast(meta[relay.Constant][32] /* ty=Tensor[(5, 12, 10), int8] */, dtype="int8") /* ty=Tensor[(5, 12, 10), int8] */;
  %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %481 = logical_xor(%479, %480) /* ty=Tensor[(5, 12, 10), int8] */;
  (%481,)
}

def @func_807(%var_790: Tensor[(9, 15, 14), uint32], %var_791: Tensor[(9, 15, 14), uint32]) -> Tensor[(9, 15, 14), float32] {
  %482 = cast(%var_791, dtype="bool") /* ty=Tensor[(9, 15, 14), bool] */;
  %483 = shape_of(%var_790, dtype="int32") /* ty=Tensor[(3), int32] */;
  %484 = cast(%var_790, dtype="bool") /* ty=Tensor[(9, 15, 14), bool] */;
  %485 = dyn.reshape(%482, %483, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %486 = less(%484, %485) /* ty=Tensor[(9, 15, 14), bool] */;
  %487 = cast(%var_791, dtype="float32") /* ty=Tensor[(9, 15, 14), float32] */;
  %488 = shape_of(%486, dtype="int32") /* ty=Tensor[(3), int32] */;
  %489 = cast(%486, dtype="float32") /* ty=Tensor[(9, 15, 14), float32] */;
  %490 = dyn.reshape(%487, %488, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%489, %490) /* ty=Tensor[(9, 15, 14), float32] */
}

def @func_4748(%var_4739: Tensor[(264), uint64], %var_4742: Tensor[(330), int32], %var_4743: Tensor[(1274), float32]) -> (Tensor[(1, 6, 3), float32], Tensor[(8, 10, 9), float64], Tensor[(720), uint32], Tensor[(1, 6, 3), float32], Tensor[(264), uint64], Tensor[(5, 6, 11), bool], Tensor[(330), int32], Tensor[(1274), float32], Tensor[(9, 15, 14), float32], Tensor[(1890), uint32]) {
  %491 = @func_4139() /* ty=(Tensor[(1, 6, 3), float32],) */;
  %492 = cast(meta[relay.Constant][33] /* ty=Tensor[(720), uint32] */, dtype="uint32") /* ty=Tensor[(720), uint32] */;
  %493 = cast(meta[relay.Constant][33] /* ty=Tensor[(720), uint32] */, dtype="uint32") /* ty=Tensor[(720), uint32] */;
  %494 = reshape(%492, newshape=[8, 10, 9]) /* ty=Tensor[(8, 10, 9), uint32] */;
  %495 = reshape(%493, newshape=[8, 10, 9]) /* ty=Tensor[(8, 10, 9), uint32] */;
  %496 = @func_2229(%494, %495) /* ty=(Tensor[(8, 10, 9), uint32], Tensor[(8, 10, 9), float64]) */;
  %497 = cast(%var_4739, dtype="uint64") /* ty=Tensor[(264), uint64] */;
  %498 = reshape(%497, newshape=[66, 4]) /* ty=Tensor[(66, 4), uint64] */;
  %499 = @func_3471(%498) /* ty=(Tensor[(1, 6, 3), float32], Tensor[(11, 2, 12), uint64], Tensor[(66, 4), uint64]) */;
  %500 = cast(%var_4742, dtype="int32") /* ty=Tensor[(330), int32] */;
  %501 = cast(%var_4742, dtype="int32") /* ty=Tensor[(330), int32] */;
  %502 = cast(%var_4743, dtype="float32") /* ty=Tensor[(1274), float32] */;
  %503 = reshape(%500, newshape=[5, 6, 11]) /* ty=Tensor[(5, 6, 11), int32] */;
  %504 = reshape(%501, newshape=[5, 6, 11]) /* ty=Tensor[(5, 6, 11), int32] */;
  %505 = reshape(%502, newshape=[1274]) /* ty=Tensor[(1274), float32] */;
  %506 = @func_1543(%503, %504, %505) /* ty=(Tensor[(5, 6, 11), bool], Tensor[(5, 6, 11), uint8], Tensor[(14, 7, 13), int8], Tensor[(1274), float32]) */;
  %507 = cast(meta[relay.Constant][34] /* ty=Tensor[(1890), uint32] */, dtype="uint32") /* ty=Tensor[(1890), uint32] */;
  %508 = cast(meta[relay.Constant][34] /* ty=Tensor[(1890), uint32] */, dtype="uint32") /* ty=Tensor[(1890), uint32] */;
  %509 = reshape(%507, newshape=[9, 15, 14]) /* ty=Tensor[(9, 15, 14), uint32] */;
  %510 = reshape(%508, newshape=[9, 15, 14]) /* ty=Tensor[(9, 15, 14), uint32] */;
  %511 = %491.0;
  %512 = %496.1;
  %513 = %499.0;
  %514 = %506.0;
  %515 = @func_807(%509, %510) /* ty=Tensor[(9, 15, 14), float32] */;
  (%511, %512, meta[relay.Constant][33] /* ty=Tensor[(720), uint32] */, %513, %var_4739, %514, %var_4742, %var_4743, %515, meta[relay.Constant][34] /* ty=Tensor[(1890), uint32] */)
}

def @func_2773() -> Tensor[(1, 6, 3), float32] {
  %516 = @func_2412() /* ty=Tensor[(1, 6, 3), float32] */;
  %517 = cast(%516, dtype="float32") /* ty=Tensor[(1, 6, 3), float32] */;
  cosh(%517) /* ty=Tensor[(1, 6, 3), float32] */
}

def @func_5129() -> Tensor[(1, 6, 3), float32] {
  @func_3397() /* ty=Tensor[(1, 6, 3), float32] */
}

def @func_394(%var_388: Tensor[(3, 3, 8), float32]) -> (Tensor[(3, 3, 8), bool],) {
  %518 = cast(%var_388, dtype="bool") /* ty=Tensor[(3, 3, 8), bool] */;
  %519 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(3, 3, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %520 = cast(meta[relay.Constant][35] /* ty=Tensor[(3, 3, 8), float32] */, dtype="bool") /* ty=Tensor[(3, 3, 8), bool] */;
  %521 = dyn.reshape(%518, %519, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %522 = not_equal(%520, %521) /* ty=Tensor[(3, 3, 8), bool] */;
  (%522,)
}

def @func_6220() -> Tensor[(1, 6, 3), float32] {
  @func_3397() /* ty=Tensor[(1, 6, 3), float32] */
}

def @func_7048(%var_7029: Tensor[(1890), uint32]) -> (Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32], Tensor[(1890), uint32], Tensor[(1890), uint32]) {
  %523 = cast(%var_7029, dtype="uint32") /* ty=Tensor[(1890), uint32] */;
  %524 = reshape(%523, newshape=[1890]) /* ty=Tensor[(1890), uint32] */;
  %525 = @func_5168(%524) /* ty=(Tensor[(1, 6, 3), float32], Tensor[(1890), uint32], Tensor[(1890), uint32]) */;
  %526 = @func_6716() /* ty=Tensor[(1, 6, 3), float32] */;
  %527 = @func_4671() /* ty=Tensor[(1, 6, 3), float32] */;
  %528 = %525.1;
  (%526, %527, %528, %var_7029)
}

def @func_4261(%var_4184: Tensor[(1890), uint32]) -> (Tensor[(1890), uint32], Tensor[(?, 6, 3), int32], Tensor[(16, 6, 3), float32], Tensor[(288), float32], Tensor[(?, 6, 3), bool], Tensor[(11, 6, 3), bool], Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32], Tensor[(9, 15, 14), float32], Tensor[(360, 2), bool], Tensor[(720), uint32]) {
  %529 = @func_2412() /* ty=Tensor[(1, 6, 3), float32] */;
  %530 = @func_3951() /* ty=Tensor[(1, 6, 3), float32] */;
  %531 = cast(%530, dtype="int32") /* ty=Tensor[(1, 6, 3), int32] */;
  %532 = shape_of(%529, dtype="int32") /* ty=Tensor[(3), int32] */;
  %533 = cast(%529, dtype="int32") /* ty=Tensor[(1, 6, 3), int32] */;
  %534 = dyn.reshape(%531, %532, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %535 = cast(meta[relay.Constant][36] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %536 = reshape(%535, newshape=[16, 6, 3]) /* ty=Tensor[(16, 6, 3), float32] */;
  %537 = @func_3884(%536) /* ty=(Tensor[(16, 6, 3), float32], Tensor[(12, 6, 3), float32]) */;
  %538 = cast(%529, dtype="bool") /* ty=Tensor[(1, 6, 3), bool] */;
  %539 = shape_of(%530, dtype="int32") /* ty=Tensor[(3), int32] */;
  %540 = cast(%530, dtype="bool") /* ty=Tensor[(1, 6, 3), bool] */;
  %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %542 = cast(%529, dtype="bool") /* ty=Tensor[(1, 6, 3), bool] */;
  %543 = cast(meta[relay.Constant][37] /* ty=Tensor[(11, 6, 3), float32] */, dtype="bool") /* ty=Tensor[(11, 6, 3), bool] */;
  %544 = cast(%var_4184, dtype="uint32") /* ty=Tensor[(1890), uint32] */;
  %545 = cast(%var_4184, dtype="uint32") /* ty=Tensor[(1890), uint32] */;
  %546 = reshape(%544, newshape=[9, 15, 14]) /* ty=Tensor[(9, 15, 14), uint32] */;
  %547 = reshape(%545, newshape=[9, 15, 14]) /* ty=Tensor[(9, 15, 14), uint32] */;
  %548 = @func_807(%546, %547) /* ty=Tensor[(9, 15, 14), float32] */;
  %549 = cast(%548, dtype="float32") /* ty=Tensor[(9, 15, 14), float32] */;
  %550 = cast(meta[relay.Constant][38] /* ty=Tensor[(720), uint32] */, dtype="uint32") /* ty=Tensor[(720), uint32] */;
  %551 = reshape(%550, newshape=[360, 2]) /* ty=Tensor[(360, 2), uint32] */;
  %552 = @func_2683(%551) /* ty=(Tensor[(1, 6, 3), float32], Tensor[(8, 10, 9), uint32], Tensor[(360, 2), bool], Tensor[(360, 2), float64]) */;
  %553 = bitwise_or(%533, %534) /* ty=Tensor[(?, 6, 3), int32] */;
  %554 = %537.0;
  %555 = equal(%540, %541) /* ty=Tensor[(?, 6, 3), bool] */;
  %556 = less(%542, %543) /* ty=Tensor[(11, 6, 3), bool] */;
  %557 = @func_4122() /* ty=Tensor[(1, 6, 3), float32] */;
  %558 = @func_4101() /* ty=Tensor[(1, 6, 3), float32] */;
  %559 = cosh(%549) /* ty=Tensor[(9, 15, 14), float32] */;
  %560 = %552.2;
  (%var_4184, %553, %554, meta[relay.Constant][36] /* ty=Tensor[(288), float32] */, %555, %556, %557, %558, %559, %560, meta[relay.Constant][38] /* ty=Tensor[(720), uint32] */)
}

def @func_3471(%var_3469: Tensor[(66, 4), uint64]) -> (Tensor[(1, 6, 3), float32], Tensor[(11, 2, 12), uint64], Tensor[(66, 4), uint64]) {
  %561 = cast(%var_3469, dtype="uint64") /* ty=Tensor[(66, 4), uint64] */;
  %562 = cast(%var_3469, dtype="uint64") /* ty=Tensor[(66, 4), uint64] */;
  %563 = reshape(%561, newshape=[11, 2, 12]) /* ty=Tensor[(11, 2, 12), uint64] */;
  %564 = reshape(%562, newshape=[11, 2, 12]) /* ty=Tensor[(11, 2, 12), uint64] */;
  %565 = @func_2412() /* ty=Tensor[(1, 6, 3), float32] */;
  %566 = @func_2747(%563, %564) /* ty=Tensor[(11, 2, 12), uint64] */;
  (%565, %566, %var_3469)
}

def @func_3951() -> Tensor[(1, 6, 3), float32] {
  @func_2393() /* ty=Tensor[(1, 6, 3), float32] */
}

def @func_4346() -> (Tensor[(1, 6, 3), float32],) {
  %567 = @func_4101() /* ty=Tensor[(1, 6, 3), float32] */;
  (%567,)
}

def @func_4542(%var_4533: Tensor[(16, 3, 15), float64], %var_4537: Tensor[(360), uint64]) -> (Tensor[(16, 3, 15), float64], Tensor[(12, 10, 3), uint64], Tensor[(360), uint64]) {
  %568 = cast(%var_4533, dtype="float64") /* ty=Tensor[(16, 3, 15), float64] */;
  %569 = cast(%var_4537, dtype="uint64") /* ty=Tensor[(360), uint64] */;
  %570 = reshape(%569, newshape=[12, 10, 3]) /* ty=Tensor[(12, 10, 3), uint64] */;
  %571 = @func_1022(%570) /* ty=(Tensor[(12, 10, 3), uint64],) */;
  %572 = asinh(%568) /* ty=Tensor[(16, 3, 15), float64] */;
  %573 = %571.0;
  (%572, %573, %var_4537)
}

def @func_5759() -> (Tensor[(10, 6, 3), float32], Tensor[(1, 6, 3), float32]) {
  %574 = @func_4864() /* ty=(Tensor[(1, 6, 3), float32],) */;
  %575 = %574.0;
  %576 = cast(%575, dtype="float32") /* ty=Tensor[(1, 6, 3), float32] */;
  %577 = cast(meta[relay.Constant][39] /* ty=Tensor[(10, 6, 3), float32] */, dtype="float32") /* ty=Tensor[(10, 6, 3), float32] */;
  %578 = cast(%575, dtype="float32") /* ty=Tensor[(1, 6, 3), float32] */;
  %579 = floor_divide(%576, %577) /* ty=Tensor[(10, 6, 3), float32] */;
  %580 = sinh(%578) /* ty=Tensor[(1, 6, 3), float32] */;
  (%579, %580)
}

def @func_6807() -> (Tensor[(1, 6, 3), float64], Tensor[(1, 6, 3), float32]) {
  %581 = @func_4164() /* ty=(Tensor[(1, 6, 3), float32],) */;
  %582 = @func_5260() /* ty=Tensor[(1, 6, 3), float64] */;
  %583 = %581.0;
  (%582, %583)
}

def @func_5347() -> (Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32]) {
  %584 = @func_4139() /* ty=(Tensor[(1, 6, 3), float32],) */;
  %585 = @func_5010() /* ty=Tensor[(1, 6, 3), float32] */;
  %586 = %584.0;
  (%585, %586)
}

def @func_6780() -> (Tensor[(3, 6, 3), uint16], Tensor[(3, 6, 3), float32]) {
  %587 = @func_5031() /* ty=(Tensor[(1, 6, 3), float64],) */;
  %588 = %587.0;
  %589 = cast(%588, dtype="uint16") /* ty=Tensor[(1, 6, 3), uint16] */;
  %590 = cast(meta[relay.Constant][40] /* ty=Tensor[(3, 6, 3), float64] */, dtype="uint16") /* ty=Tensor[(3, 6, 3), uint16] */;
  %591 = cast(meta[relay.Constant][40] /* ty=Tensor[(3, 6, 3), float64] */, dtype="float32") /* ty=Tensor[(3, 6, 3), float32] */;
  %592 = minimum(%589, %590) /* ty=Tensor[(3, 6, 3), uint16] */;
  %593 = sigmoid(%591) /* ty=Tensor[(3, 6, 3), float32] */;
  (%592, %593)
}

def @func_5717(%var_5698: Tensor[(11, 9, 9), uint8], %var_5699: Tensor[(11, 9, 9), uint8]) -> (Tensor[(11, 9, 9), uint8], Tensor[(1, 6, 3), float64], Tensor[(1, 6, 3), float32]) {
  %594 = cast(%var_5699, dtype="uint8") /* ty=Tensor[(11, 9, 9), uint8] */;
  %595 = shape_of(%var_5698, dtype="int32") /* ty=Tensor[(3), int32] */;
  %596 = cast(%var_5698, dtype="uint8") /* ty=Tensor[(11, 9, 9), uint8] */;
  %597 = dyn.reshape(%594, %595, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %598 = right_shift(%596, %597) /* ty=Tensor[(11, 9, 9), uint8] */;
  %599 = @func_5260() /* ty=Tensor[(1, 6, 3), float64] */;
  %600 = @func_3947() /* ty=Tensor[(1, 6, 3), float32] */;
  (%598, %599, %600)
}

def @func_7272(%var_7252: Tensor[(12, 16, 16), float32], %var_7253: Tensor[(12, 16, 16), float32]) -> Tensor[(12, 16, 16), float64] {
  %601 = cast(%var_7253, dtype="float32") /* ty=Tensor[(12, 16, 16), float32] */;
  %602 = shape_of(%var_7252, dtype="int32") /* ty=Tensor[(3), int32] */;
  %603 = cast(%var_7252, dtype="float32") /* ty=Tensor[(12, 16, 16), float32] */;
  %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %605 = divide(%603, %604) /* ty=Tensor[(12, 16, 16), float32] */;
  %606 = cast(%605, dtype="float64") /* ty=Tensor[(12, 16, 16), float64] */;
  erf(%606) /* ty=Tensor[(12, 16, 16), float64] */
}

def @func_5168(%var_5151: Tensor[(1890), uint32]) -> (Tensor[(1, 6, 3), float32], Tensor[(1890), uint32], Tensor[(1890), uint32]) {
  %607 = @func_4719() /* ty=(Tensor[(1, 6, 3), float32],) */;
  %608 = cast(%var_5151, dtype="uint32") /* ty=Tensor[(1890), uint32] */;
  %609 = reshape(%608, newshape=[1890]) /* ty=Tensor[(1890), uint32] */;
  %610 = @func_4261(%609) /* ty=(Tensor[(1890), uint32], Tensor[(?, 6, 3), int32], Tensor[(16, 6, 3), float32], Tensor[(288), float32], Tensor[(?, 6, 3), bool], Tensor[(11, 6, 3), bool], Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32], Tensor[(9, 15, 14), float32], Tensor[(360, 2), bool], Tensor[(720), uint32]) */;
  %611 = %607.0;
  %612 = %610.0;
  (%611, %612, %var_5151)
}

def @func_3072(%var_3034: Tensor[(128), uint16], %var_3060: Tensor[(14), int64]) -> (Tensor[(6, 5, 16), int32], Tensor[(480), int32], Tensor[(1, 6, 3), float64], Tensor[(2, 13, 5), float32], Tensor[(128), int8], Tensor[(2, 13, 5), float32], Tensor[(14), int64]) {
  %613 = cast(meta[relay.Constant][41] /* ty=Tensor[(480), int32] */, dtype="int32") /* ty=Tensor[(480), int32] */;
  %614 = reshape(%613, newshape=[6, 5, 16]) /* ty=Tensor[(6, 5, 16), int32] */;
  %615 = @func_695(%614) /* ty=(Tensor[(6, 5, 16), int32], Tensor[(3, 3, 8), bool], Tensor[(72), float32], Tensor[(3, 3, 8), bool]) */;
  %616 = @func_2393() /* ty=Tensor[(1, 6, 3), float32] */;
  %617 = cast(%616, dtype="float64") /* ty=Tensor[(1, 6, 3), float64] */;
  %618 = cast(%var_3034, dtype="uint16") /* ty=Tensor[(128), uint16] */;
  %619 = reshape(%618, newshape=[4, 2, 16]) /* ty=Tensor[(4, 2, 16), uint16] */;
  %620 = @func_2339(%619) /* ty=(Tensor[(4, 2, 16), uint16], Tensor[(2, 13, 5), float32], Tensor[(14), int64], Tensor[(480), int32]) */;
  %621 = cast(meta[relay.Constant][42] /* ty=Tensor[(128), uint16] */, dtype="int8") /* ty=Tensor[(128), int8] */;
  %622 = shape_of(%var_3034, dtype="int32") /* ty=Tensor[(1), int32] */;
  %623 = cast(%var_3034, dtype="int8") /* ty=Tensor[(128), int8] */;
  %624 = dyn.reshape(%621, %622, newshape=[]) /* ty=Tensor[(?), int8] */;
  %625 = cast(%var_3060, dtype="int64") /* ty=Tensor[(14), int64] */;
  %626 = cast(meta[relay.Constant][41] /* ty=Tensor[(480), int32] */, dtype="int32") /* ty=Tensor[(480), int32] */;
  %627 = reshape(%625, newshape=[7, 2]) /* ty=Tensor[(7, 2), int64] */;
  %628 = reshape(%626, newshape=[480]) /* ty=Tensor[(480), int32] */;
  %629 = @func_1238(%627, %628) /* ty=(Tensor[(7, 2), int64], Tensor[(2, 13, 5), float32], Tensor[(3, 3, 8), bool], Tensor[(480), int32], Tensor[(130), float32], Tensor[(3, 3, 8), bool]) */;
  %630 = %615.0;
  %631 = cos(%617) /* ty=Tensor[(1, 6, 3), float64] */;
  %632 = %620.1;
  %633 = multiply(%623, %624) /* ty=Tensor[(128), int8] */;
  %634 = %629.1;
  (%630, meta[relay.Constant][41] /* ty=Tensor[(480), int32] */, %631, %632, %633, %634, %var_3060)
}

def @func_2420(%var_2414: Tensor[(16, 5, 5), int64], %var_2415: Tensor[(16, 5, 5), int64]) -> Tensor[(16, 5, 5), int64] {
  %635 = cast(%var_2415, dtype="int64") /* ty=Tensor[(16, 5, 5), int64] */;
  %636 = shape_of(%var_2414, dtype="int32") /* ty=Tensor[(3), int32] */;
  %637 = cast(%var_2414, dtype="int64") /* ty=Tensor[(16, 5, 5), int64] */;
  %638 = dyn.reshape(%635, %636, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_and(%637, %638) /* ty=Tensor[(16, 5, 5), int64] */
}

def @func_5630() -> Tensor[(1, 6, 3), float32] {
  @func_2773() /* ty=Tensor[(1, 6, 3), float32] */
}

def @func_4101() -> Tensor[(1, 6, 3), float32] {
  @func_3947() /* ty=Tensor[(1, 6, 3), float32] */
}

def @func_3814(%var_3784: Tensor[(130), float32]) -> (Tensor[(1, 6, 3), float32], Tensor[(130), float32], Tensor[(2, 13, 5), float32], Tensor[(4, 180), uint32], Tensor[(2, 13, 5), float64]) {
  %639 = cast(meta[relay.Constant][43] /* ty=Tensor[(4, 180), uint32] */, dtype="uint32") /* ty=Tensor[(4, 180), uint32] */;
  %640 = reshape(%639, newshape=[720]) /* ty=Tensor[(720), uint32] */;
  %641 = @func_2639(%640) /* ty=(Tensor[(9, 15, 14), float32], Tensor[(1890), uint32], Tensor[(480), int32], Tensor[(480), int32], Tensor[(2, 13, 5), float32], Tensor[(128), uint16], Tensor[(8, 10, 9), float64], Tensor[(720), uint32], Tensor[(?, 6, 3), uint8], Tensor[(2, 13, 5), float32]) */;
  %642 = cast(%var_3784, dtype="float32") /* ty=Tensor[(130), float32] */;
  %643 = cast(%var_3784, dtype="float32") /* ty=Tensor[(130), float32] */;
  %644 = reshape(%642, newshape=[2, 13, 5]) /* ty=Tensor[(2, 13, 5), float32] */;
  %645 = reshape(%643, newshape=[2, 13, 5]) /* ty=Tensor[(2, 13, 5), float32] */;
  %646 = @func_168(%644, %645) /* ty=(Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), float32]) */;
  %647 = %646.0;
  %648 = cast(%647, dtype="float64") /* ty=Tensor[(2, 13, 5), float64] */;
  %649 = sigmoid(%648) /* ty=Tensor[(2, 13, 5), float64] */;
  %650 = cast(%649, dtype="float64") /* ty=Tensor[(2, 13, 5), float64] */;
  %651 = @func_2773() /* ty=Tensor[(1, 6, 3), float32] */;
  %652 = %641.4;
  %653 = log10(%650) /* ty=Tensor[(2, 13, 5), float64] */;
  (%651, %var_3784, %652, meta[relay.Constant][43] /* ty=Tensor[(4, 180), uint32] */, %653)
}

def @func_7131() -> Tensor[(1, 6, 3), float32] {
  %654 = @func_4949() /* ty=(Tensor[(1, 6, 3), float32],) */;
  %654.0
}

def @func_6176() -> (Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32]) {
  %655 = @func_4834() /* ty=(Tensor[(1, 6, 3), float32], Tensor[(11, 2, 12), uint64]) */;
  %656 = %655.0;
  %657 = @func_3947() /* ty=Tensor[(1, 6, 3), float32] */;
  (%656, %657)
}

def @func_4453() -> (Tensor[(1, 6, 3), float32],) {
  %658 = @func_4346() /* ty=(Tensor[(1, 6, 3), float32],) */;
  %659 = %658.0;
  (%659,)
}

def @func_4652(%var_4642: Tensor[(5, 11, 11), float64], %var_4648: Tensor[(5, 11, 11), float64]) -> (Tensor[(5, 11, 11), bool],) {
  %660 = cast(%var_4642, dtype="float64") /* ty=Tensor[(5, 11, 11), float64] */;
  %661 = asinh(%660) /* ty=Tensor[(5, 11, 11), float64] */;
  %662 = cast(%var_4648, dtype="bool") /* ty=Tensor[(5, 11, 11), bool] */;
  %663 = shape_of(%661, dtype="int32") /* ty=Tensor[(3), int32] */;
  %664 = cast(%661, dtype="bool") /* ty=Tensor[(5, 11, 11), bool] */;
  %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %666 = less(%664, %665) /* ty=Tensor[(5, 11, 11), bool] */;
  (%666,)
}

def @func_168(%var_140: Tensor[(2, 13, 5), float32], %var_141: Tensor[(2, 13, 5), float32]) -> (Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), float32]) {
  %667 = cast(%var_141, dtype="float32") /* ty=Tensor[(2, 13, 5), float32] */;
  %668 = shape_of(%var_140, dtype="int32") /* ty=Tensor[(3), int32] */;
  %669 = cast(%var_140, dtype="float32") /* ty=Tensor[(2, 13, 5), float32] */;
  %670 = dyn.reshape(%667, %668, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %671 = cast(%var_140, dtype="float32") /* ty=Tensor[(2, 13, 5), float32] */;
  %672 = cast(%var_141, dtype="float32") /* ty=Tensor[(2, 13, 5), float32] */;
  %673 = power(%669, %670) /* ty=Tensor[(2, 13, 5), float32] */;
  %674 = cosh(%671) /* ty=Tensor[(2, 13, 5), float32] */;
  %675 = sin(%672) /* ty=Tensor[(2, 13, 5), float32] */;
  (%673, %674, %675)
}

def @func_7084(%var_7058: Tensor[(4, 8, 7), float64], %var_7059: Tensor[(4, 8, 7), float64], %var_7067: Tensor[(480), int32]) -> (Tensor[(4, 8, 7), float64], Tensor[(10, 7, 14), bool], Tensor[(480), int32], Tensor[(4, 8, 7), float32]) {
  %676 = cast(%var_7059, dtype="float64") /* ty=Tensor[(4, 8, 7), float64] */;
  %677 = shape_of(%var_7058, dtype="int32") /* ty=Tensor[(3), int32] */;
  %678 = cast(%var_7058, dtype="float64") /* ty=Tensor[(4, 8, 7), float64] */;
  %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %680 = cast(%var_7067, dtype="int32") /* ty=Tensor[(480), int32] */;
  %681 = reshape(%680, newshape=[2, 240]) /* ty=Tensor[(2, 240), int32] */;
  %682 = @func_6626(%681) /* ty=(Tensor[(6, 7), float32], Tensor[(10, 7, 14), bool], Tensor[(980), float32], Tensor[(2, 240), int32], Tensor[(?, 6, 3), bool]) */;
  %683 = cast(%var_7059, dtype="float32") /* ty=Tensor[(4, 8, 7), float32] */;
  %684 = divide(%678, %679) /* ty=Tensor[(4, 8, 7), float64] */;
  %685 = %682.1;
  %686 = sin(%683) /* ty=Tensor[(4, 8, 7), float32] */;
  (%684, %685, %var_7067, %686)
}

def @func_4864() -> (Tensor[(1, 6, 3), float32],) {
  %687 = @func_3397() /* ty=Tensor[(1, 6, 3), float32] */;
  (%687,)
}

def @func_3558(%var_3545: Tensor[(7, 182), float32]) -> (Tensor[(5, 6, 3), uint32], Tensor[(14, 7, 13), int8], Tensor[(330), int32], Tensor[(7, 182), float32], Tensor[(1, 6, 3), float32]) {
  %688 = @func_2773() /* ty=Tensor[(1, 6, 3), float32] */;
  %689 = cast(%688, dtype="uint32") /* ty=Tensor[(1, 6, 3), uint32] */;
  %690 = cast(meta[relay.Constant][44] /* ty=Tensor[(5, 6, 3), float32] */, dtype="uint32") /* ty=Tensor[(5, 6, 3), uint32] */;
  %691 = cast(meta[relay.Constant][45] /* ty=Tensor[(330), int32] */, dtype="int32") /* ty=Tensor[(330), int32] */;
  %692 = cast(meta[relay.Constant][45] /* ty=Tensor[(330), int32] */, dtype="int32") /* ty=Tensor[(330), int32] */;
  %693 = cast(%var_3545, dtype="float32") /* ty=Tensor[(7, 182), float32] */;
  %694 = reshape(%691, newshape=[5, 6, 11]) /* ty=Tensor[(5, 6, 11), int32] */;
  %695 = reshape(%692, newshape=[5, 6, 11]) /* ty=Tensor[(5, 6, 11), int32] */;
  %696 = reshape(%693, newshape=[1274]) /* ty=Tensor[(1274), float32] */;
  %697 = @func_1543(%694, %695, %696) /* ty=(Tensor[(5, 6, 11), bool], Tensor[(5, 6, 11), uint8], Tensor[(14, 7, 13), int8], Tensor[(1274), float32]) */;
  %698 = left_shift(%689, %690) /* ty=Tensor[(5, 6, 3), uint32] */;
  %699 = %697.2;
  %700 = @func_2773() /* ty=Tensor[(1, 6, 3), float32] */;
  (%698, %699, meta[relay.Constant][45] /* ty=Tensor[(330), int32] */, %var_3545, %700)
}

def @func_3315() -> (Tensor[(1, 6, 3), float32],) {
  %701 = @func_2412() /* ty=Tensor[(1, 6, 3), float32] */;
  (%701,)
}

def @func_1022(%var_1014: Tensor[(12, 10, 3), uint64]) -> (Tensor[(12, 10, 3), uint64],) {
  %702 = cast(%var_1014, dtype="uint64") /* ty=Tensor[(12, 10, 3), uint64] */;
  %703 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(12, 10, 3), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %704 = cast(meta[relay.Constant][46] /* ty=Tensor[(12, 10, 3), uint64] */, dtype="uint64") /* ty=Tensor[(12, 10, 3), uint64] */;
  %705 = dyn.reshape(%702, %703, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %706 = left_shift(%704, %705) /* ty=Tensor[(12, 10, 3), uint64] */;
  (%706,)
}

def @func_6158(%var_6151: Tensor[(1890), uint32]) -> (Tensor[(1, 6, 3), float32], Tensor[(?, 6, 3), bool], Tensor[(1890), uint32], Tensor[(1, 6, 3), float32]) {
  %707 = @func_4864() /* ty=(Tensor[(1, 6, 3), float32],) */;
  %708 = cast(%var_6151, dtype="uint32") /* ty=Tensor[(1890), uint32] */;
  %709 = reshape(%708, newshape=[1890]) /* ty=Tensor[(1890), uint32] */;
  %710 = @func_4261(%709) /* ty=(Tensor[(1890), uint32], Tensor[(?, 6, 3), int32], Tensor[(16, 6, 3), float32], Tensor[(288), float32], Tensor[(?, 6, 3), bool], Tensor[(11, 6, 3), bool], Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32], Tensor[(9, 15, 14), float32], Tensor[(360, 2), bool], Tensor[(720), uint32]) */;
  %711 = @func_5759() /* ty=(Tensor[(10, 6, 3), float32], Tensor[(1, 6, 3), float32]) */;
  %712 = %707.0;
  %713 = %710.4;
  %714 = %711.1;
  (%712, %713, %var_6151, %714)
}

def @func_6667(%var_6646: Tensor[(264), uint64], %var_6647: Tensor[(1, 330), int32]) -> (Tensor[(12, 6, 3), int16], Tensor[(330), int32], Tensor[(264), uint64], Tensor[(1, 330), int32], Tensor[(1274), float32], Tensor[(1, 6, 3), float32]) {
  %715 = @func_3947() /* ty=Tensor[(1, 6, 3), float32] */;
  %716 = cast(%715, dtype="int16") /* ty=Tensor[(1, 6, 3), int16] */;
  %717 = cast(meta[relay.Constant][47] /* ty=Tensor[(12, 6, 3), float32] */, dtype="int16") /* ty=Tensor[(12, 6, 3), int16] */;
  %718 = cast(%var_6646, dtype="uint64") /* ty=Tensor[(264), uint64] */;
  %719 = cast(%var_6647, dtype="int32") /* ty=Tensor[(1, 330), int32] */;
  %720 = cast(meta[relay.Constant][48] /* ty=Tensor[(1274), float32] */, dtype="float32") /* ty=Tensor[(1274), float32] */;
  %721 = reshape(%718, newshape=[264]) /* ty=Tensor[(264), uint64] */;
  %722 = reshape(%719, newshape=[330]) /* ty=Tensor[(330), int32] */;
  %723 = reshape(%720, newshape=[1274]) /* ty=Tensor[(1274), float32] */;
  %724 = @func_4748(%721, %722, %723) /* ty=(Tensor[(1, 6, 3), float32], Tensor[(8, 10, 9), float64], Tensor[(720), uint32], Tensor[(1, 6, 3), float32], Tensor[(264), uint64], Tensor[(5, 6, 11), bool], Tensor[(330), int32], Tensor[(1274), float32], Tensor[(9, 15, 14), float32], Tensor[(1890), uint32]) */;
  %725 = logical_xor(%716, %717) /* ty=Tensor[(12, 6, 3), int16] */;
  %726 = %724.6;
  %727 = @func_5561() /* ty=Tensor[(1, 6, 3), float32] */;
  (%725, %726, %var_6646, %var_6647, meta[relay.Constant][48] /* ty=Tensor[(1274), float32] */, %727)
}

def @func_2717(%var_2693: Tensor[(11, 6, 3), float32]) -> Tensor[(11, 6, 3), float32] {
  %728 = @func_2412() /* ty=Tensor[(1, 6, 3), float32] */;
  %729 = cast(%728, dtype="float32") /* ty=Tensor[(1, 6, 3), float32] */;
  %730 = cast(%var_2693, dtype="float32") /* ty=Tensor[(11, 6, 3), float32] */;
  subtract(%729, %730) /* ty=Tensor[(11, 6, 3), float32] */
}

def @func_5448() -> Tensor[(1, 6, 3), float32] {
  @func_4671() /* ty=Tensor[(1, 6, 3), float32] */
}

def @func_1117(%var_1102: Tensor[(480), int32]) -> (Tensor[(72), float32], Tensor[(480), int32], Tensor[(2, 12, 5), float32]) {
  %731 = cast(%var_1102, dtype="int32") /* ty=Tensor[(480), int32] */;
  %732 = reshape(%731, newshape=[6, 5, 16]) /* ty=Tensor[(6, 5, 16), int32] */;
  %733 = @func_695(%732) /* ty=(Tensor[(6, 5, 16), int32], Tensor[(3, 3, 8), bool], Tensor[(72), float32], Tensor[(3, 3, 8), bool]) */;
  %734 = cast(meta[relay.Constant][49] /* ty=Tensor[(2, 12, 5), float64] */, dtype="float64") /* ty=Tensor[(2, 12, 5), float64] */;
  %735 = sqrt(%734) /* ty=Tensor[(2, 12, 5), float64] */;
  %736 = cast(%735, dtype="float32") /* ty=Tensor[(2, 12, 5), float32] */;
  %737 = %733.2;
  %738 = atan(%736) /* ty=Tensor[(2, 12, 5), float32] */;
  (%737, %var_1102, %738)
}

def @func_4164() -> (Tensor[(1, 6, 3), float32],) {
  %739 = @func_3951() /* ty=Tensor[(1, 6, 3), float32] */;
  (%739,)
}

def @func_3397() -> Tensor[(1, 6, 3), float32] {
  @func_2393() /* ty=Tensor[(1, 6, 3), float32] */
}

def @func_2989(%var_2980: Tensor[(480), int32]) -> (Tensor[(1, 6, 3), float32], Tensor[(11, 6, 3), float32], Tensor[(198), float32], Tensor[(11, 6, 3), float32], Tensor[(3, 3, 8), bool], Tensor[(480), int32], Tensor[(4, 320), float32], Tensor[(1, 980), float32]) {
  %740 = cast(meta[relay.Constant][50] /* ty=Tensor[(198), float32] */, dtype="float32") /* ty=Tensor[(198), float32] */;
  %741 = reshape(%740, newshape=[11, 6, 3]) /* ty=Tensor[(11, 6, 3), float32] */;
  %742 = @func_2717(%741) /* ty=Tensor[(11, 6, 3), float32] */;
  %743 = cast(%742, dtype="float32") /* ty=Tensor[(11, 6, 3), float32] */;
  %744 = reshape(%743, newshape=[11, 6, 3]) /* ty=Tensor[(11, 6, 3), float32] */;
  %745 = cast(%var_2980, dtype="int32") /* ty=Tensor[(480), int32] */;
  %746 = reshape(%745, newshape=[6, 5, 16]) /* ty=Tensor[(6, 5, 16), int32] */;
  %747 = @func_695(%746) /* ty=(Tensor[(6, 5, 16), int32], Tensor[(3, 3, 8), bool], Tensor[(72), float32], Tensor[(3, 3, 8), bool]) */;
  %748 = cast(meta[relay.Constant][51] /* ty=Tensor[(1, 980), float32] */, dtype="float32") /* ty=Tensor[(1, 980), float32] */;
  %749 = cast(%var_2980, dtype="int32") /* ty=Tensor[(480), int32] */;
  %750 = reshape(%748, newshape=[10, 7, 14]) /* ty=Tensor[(10, 7, 14), float32] */;
  %751 = reshape(%749, newshape=[480]) /* ty=Tensor[(480), int32] */;
  %752 = @func_2174(%750, %751) /* ty=(Tensor[(10, 7, 14), bool], Tensor[(16, 10, 8), bool], Tensor[(4, 320), float32], Tensor[(1, 14), int64], Tensor[(480), int32], Tensor[(2, 12, 5), float32], Tensor[(72), float32]) */;
  %753 = @func_2773() /* ty=Tensor[(1, 6, 3), float32] */;
  %754 = @func_2717(%744) /* ty=Tensor[(11, 6, 3), float32] */;
  %755 = %747.1;
  %756 = %752.2;
  (%753, %742, meta[relay.Constant][50] /* ty=Tensor[(198), float32] */, %754, %755, %var_2980, %756, meta[relay.Constant][51] /* ty=Tensor[(1, 980), float32] */)
}

def @func_5668(%var_5657: Tensor[(1, 6, 3), float32]) -> (Tensor[(?, 6, 3), bool], Tensor[(1890), uint32], Tensor[(1, 720), uint32]) {
  %757 = @func_2773() /* ty=Tensor[(1, 6, 3), float32] */;
  %758 = cast(%var_5657, dtype="bool") /* ty=Tensor[(1, 6, 3), bool] */;
  %759 = shape_of(%757, dtype="int32") /* ty=Tensor[(3), int32] */;
  %760 = cast(%757, dtype="bool") /* ty=Tensor[(1, 6, 3), bool] */;
  %761 = dyn.reshape(%758, %759, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %762 = cast(meta[relay.Constant][52] /* ty=Tensor[(1, 720), uint32] */, dtype="uint32") /* ty=Tensor[(1, 720), uint32] */;
  %763 = reshape(%762, newshape=[720]) /* ty=Tensor[(720), uint32] */;
  %764 = @func_2639(%763) /* ty=(Tensor[(9, 15, 14), float32], Tensor[(1890), uint32], Tensor[(480), int32], Tensor[(480), int32], Tensor[(2, 13, 5), float32], Tensor[(128), uint16], Tensor[(8, 10, 9), float64], Tensor[(720), uint32], Tensor[(?, 6, 3), uint8], Tensor[(2, 13, 5), float32]) */;
  %765 = logical_and(%760, %761) /* ty=Tensor[(?, 6, 3), bool] */;
  %766 = %764.1;
  (%765, %766, meta[relay.Constant][52] /* ty=Tensor[(1, 720), uint32] */)
}

def @func_6320(%var_6308: Tensor[(15, 8, 10), int32], %var_6309: Tensor[(15, 8, 10), int32]) -> (Tensor[(15, 8, 10), int32],) {
  %767 = cast(%var_6309, dtype="int32") /* ty=Tensor[(15, 8, 10), int32] */;
  %768 = shape_of(%var_6308, dtype="int32") /* ty=Tensor[(3), int32] */;
  %769 = cast(%var_6308, dtype="int32") /* ty=Tensor[(15, 8, 10), int32] */;
  %770 = dyn.reshape(%767, %768, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %771 = multiply(%769, %770) /* ty=Tensor[(15, 8, 10), int32] */;
  (%771,)
}

def @func_3935(%var_3931: Tensor[(8, 4, 4), float64]) -> (Tensor[(8, 4, 4), float64],) {
  %772 = cast(%var_3931, dtype="float64") /* ty=Tensor[(8, 4, 4), float64] */;
  %773 = tan(%772) /* ty=Tensor[(8, 4, 4), float64] */;
  (%773,)
}

def @func_5816(%var_5798: Tensor[(480), int32]) -> (Tensor[(1, 6, 3), float32], Tensor[(480), int32], Tensor[(1280), float32], Tensor[(14), int64], Tensor[(480), int32], Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32]) {
  %774 = cast(meta[relay.Constant][53] /* ty=Tensor[(1280), float32] */, dtype="float32") /* ty=Tensor[(1280), float32] */;
  %775 = cast(meta[relay.Constant][54] /* ty=Tensor[(14), int64] */, dtype="int64") /* ty=Tensor[(14), int64] */;
  %776 = cast(%var_5798, dtype="int32") /* ty=Tensor[(480), int32] */;
  %777 = cast(meta[relay.Constant][53] /* ty=Tensor[(1280), float32] */, dtype="float32") /* ty=Tensor[(1280), float32] */;
  %778 = reshape(%774, newshape=[16, 10, 8]) /* ty=Tensor[(16, 10, 8), float32] */;
  %779 = reshape(%775, newshape=[14]) /* ty=Tensor[(14), int64] */;
  %780 = reshape(%776, newshape=[480]) /* ty=Tensor[(480), int32] */;
  %781 = reshape(%777, newshape=[16, 10, 8]) /* ty=Tensor[(16, 10, 8), float32] */;
  %782 = @func_1634(%778, %779, %780, %781) /* ty=(Tensor[(16, 10, 8), float64], Tensor[(3, 3, 8), bool], Tensor[(14), int64], Tensor[(480), int32], Tensor[(2, 12, 5), float32], Tensor[(16, 10, 8), bool], Tensor[(3, 3, 8), float64], Tensor[(3, 3, 8), bool]) */;
  %783 = @func_5347() /* ty=(Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32]) */;
  %784 = @func_4719() /* ty=(Tensor[(1, 6, 3), float32],) */;
  %785 = @func_2393() /* ty=Tensor[(1, 6, 3), float32] */;
  %786 = %782.3;
  %787 = %783.1;
  %788 = %784.0;
  (%785, %786, meta[relay.Constant][53] /* ty=Tensor[(1280), float32] */, meta[relay.Constant][54] /* ty=Tensor[(14), int64] */, %var_5798, %787, %788)
}

def @func_6626(%var_6601: Tensor[(2, 240), int32]) -> (Tensor[(6, 7), float32], Tensor[(10, 7, 14), bool], Tensor[(980), float32], Tensor[(2, 240), int32], Tensor[(?, 6, 3), bool]) {
  %789 = cast(meta[relay.Constant][55] /* ty=Tensor[(6, 7), float32] */, dtype="float32") /* ty=Tensor[(6, 7), float32] */;
  %790 = cast(meta[relay.Constant][56] /* ty=Tensor[(980), float32] */, dtype="float32") /* ty=Tensor[(980), float32] */;
  %791 = cast(%var_6601, dtype="int32") /* ty=Tensor[(2, 240), int32] */;
  %792 = reshape(%790, newshape=[10, 7, 14]) /* ty=Tensor[(10, 7, 14), float32] */;
  %793 = reshape(%791, newshape=[480]) /* ty=Tensor[(480), int32] */;
  %794 = @func_2174(%792, %793) /* ty=(Tensor[(10, 7, 14), bool], Tensor[(16, 10, 8), bool], Tensor[(4, 320), float32], Tensor[(1, 14), int64], Tensor[(480), int32], Tensor[(2, 12, 5), float32], Tensor[(72), float32]) */;
  %795 = @func_6434() /* ty=(Tensor[(1, 6, 3), float64],) */;
  %796 = %795.0;
  %797 = @func_6434() /* ty=(Tensor[(1, 6, 3), float64],) */;
  %798 = %797.0;
  %799 = cast(%798, dtype="bool") /* ty=Tensor[(1, 6, 3), bool] */;
  %800 = shape_of(%796, dtype="int32") /* ty=Tensor[(3), int32] */;
  %801 = cast(%796, dtype="bool") /* ty=Tensor[(1, 6, 3), bool] */;
  %802 = dyn.reshape(%799, %800, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %803 = log2(%789) /* ty=Tensor[(6, 7), float32] */;
  %804 = %794.0;
  %805 = greater_equal(%801, %802) /* ty=Tensor[(?, 6, 3), bool] */;
  (%803, %804, meta[relay.Constant][56] /* ty=Tensor[(980), float32] */, %var_6601, %805)
}

def @func_2911(%var_2880: Tensor[(980), float32], %var_2905: Tensor[(128), uint16]) -> (Tensor[(1, 6, 3), float32], Tensor[(1, 14), int64], Tensor[(980), float32], Tensor[(480), int32], Tensor[(14), int64], Tensor[(128), uint16]) {
  %806 = cast(%var_2880, dtype="float32") /* ty=Tensor[(980), float32] */;
  %807 = cast(meta[relay.Constant][57] /* ty=Tensor[(480), int32] */, dtype="int32") /* ty=Tensor[(480), int32] */;
  %808 = reshape(%806, newshape=[10, 7, 14]) /* ty=Tensor[(10, 7, 14), float32] */;
  %809 = reshape(%807, newshape=[480]) /* ty=Tensor[(480), int32] */;
  %810 = @func_2174(%808, %809) /* ty=(Tensor[(10, 7, 14), bool], Tensor[(16, 10, 8), bool], Tensor[(4, 320), float32], Tensor[(1, 14), int64], Tensor[(480), int32], Tensor[(2, 12, 5), float32], Tensor[(72), float32]) */;
  %811 = cast(%var_2905, dtype="uint16") /* ty=Tensor[(128), uint16] */;
  %812 = reshape(%811, newshape=[4, 2, 16]) /* ty=Tensor[(4, 2, 16), uint16] */;
  %813 = @func_2339(%812) /* ty=(Tensor[(4, 2, 16), uint16], Tensor[(2, 13, 5), float32], Tensor[(14), int64], Tensor[(480), int32]) */;
  %814 = @func_2412() /* ty=Tensor[(1, 6, 3), float32] */;
  %815 = %810.3;
  %816 = %813.2;
  (%814, %815, %var_2880, meta[relay.Constant][57] /* ty=Tensor[(480), int32] */, %816, %var_2905)
}

def @func_5031() -> (Tensor[(1, 6, 3), float64],) {
  %817 = @func_3315() /* ty=(Tensor[(1, 6, 3), float32],) */;
  %818 = %817.0;
  %819 = cast(%818, dtype="float64") /* ty=Tensor[(1, 6, 3), float64] */;
  %820 = asin(%819) /* ty=Tensor[(1, 6, 3), float64] */;
  (%820,)
}

def @func_4949() -> (Tensor[(1, 6, 3), float32],) {
  %821 = @func_4122() /* ty=Tensor[(1, 6, 3), float32] */;
  (%821,)
}

def @func_3145(%var_3135: Tensor[(16, 12, 2), float32]) -> (Tensor[(16, 12, 2), float32],) {
  %822 = cast(%var_3135, dtype="float32") /* ty=Tensor[(16, 12, 2), float32] */;
  %823 = atan(%822) /* ty=Tensor[(16, 12, 2), float32] */;
  (%823,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5761() -> (Tensor[(10, 6, 3), float32], Tensor[(1, 6, 3), float32]) {
  @func_5759() /* ty=(Tensor[(10, 6, 3), float32], Tensor[(1, 6, 3), float32]) */
}

def @func_6435() -> (Tensor[(1, 6, 3), float64],) {
  %2 = fn () -> (Tensor[(1, 6, 3), float64],) {
    %0 = @func_5455() /* ty=(Tensor[(1, 6, 3), float64],) */;
    %1 = %0.0;
    (%1,)
  };
  %2() /* ty=(Tensor[(1, 6, 3), float64],) */
}

def @func_5632() -> Tensor[(1, 6, 3), float32] {
  @func_5630() /* ty=Tensor[(1, 6, 3), float32] */
}

def @func_6667(%var_6646: Tensor[(264), uint64], %var_6647: Tensor[(1, 330), int32]) -> (Tensor[(12, 6, 3), int16], Tensor[(330), int32], Tensor[(264), uint64], Tensor[(1, 330), int32], Tensor[(1274), float32], Tensor[(1, 6, 3), float32]) {
  %3 = @func_3947() /* ty=Tensor[(1, 6, 3), float32] */;
  %4 = cast(%3, dtype="int16") /* ty=Tensor[(1, 6, 3), int16] */;
  %5 = cast(meta[relay.Constant][0] /* ty=Tensor[(12, 6, 3), float32] */, dtype="int16") /* ty=Tensor[(12, 6, 3), int16] */;
  %6 = cast(%var_6646, dtype="uint64") /* ty=Tensor[(264), uint64] */;
  %7 = cast(%var_6647, dtype="int32") /* ty=Tensor[(1, 330), int32] */;
  %8 = cast(meta[relay.Constant][1] /* ty=Tensor[(1274), float32] */, dtype="float32") /* ty=Tensor[(1274), float32] */;
  %9 = reshape(%6, newshape=[264]) /* ty=Tensor[(264), uint64] */;
  %10 = reshape(%7, newshape=[330]) /* ty=Tensor[(330), int32] */;
  %11 = reshape(%8, newshape=[1274]) /* ty=Tensor[(1274), float32] */;
  %12 = @func_4748(%9, %10, %11) /* ty=(Tensor[(1, 6, 3), float32], Tensor[(8, 10, 9), float64], Tensor[(720), uint32], Tensor[(1, 6, 3), float32], Tensor[(264), uint64], Tensor[(5, 6, 11), bool], Tensor[(330), int32], Tensor[(1274), float32], Tensor[(9, 15, 14), float32], Tensor[(1890), uint32]) */;
  %13 = logical_xor(%4, %5) /* ty=Tensor[(12, 6, 3), int16] */;
  %14 = %12.6;
  %15 = @func_5561() /* ty=Tensor[(1, 6, 3), float32] */;
  (%13, %14, %var_6646, %var_6647, meta[relay.Constant][1] /* ty=Tensor[(1274), float32] */, %15)
}

def @func_4422() -> Tensor[(1, 6, 3), float64] {
  @func_4420() /* ty=Tensor[(1, 6, 3), float64] */
}

def @func_698(%var_696: Tensor[(6, 5, 16), int32]) -> (Tensor[(6, 5, 16), int32], Tensor[(3, 3, 8), bool], Tensor[(72), float32], Tensor[(3, 3, 8), bool]) {
  @func_695(%var_696) /* ty=(Tensor[(6, 5, 16), int32], Tensor[(3, 3, 8), bool], Tensor[(72), float32], Tensor[(3, 3, 8), bool]) */
}

def @func_3814(%var_3784: Tensor[(130), float32]) -> (Tensor[(1, 6, 3), float32], Tensor[(130), float32], Tensor[(2, 13, 5), float32], Tensor[(4, 180), uint32], Tensor[(2, 13, 5), float64]) {
  %16 = cast(meta[relay.Constant][2] /* ty=Tensor[(4, 180), uint32] */, dtype="uint32") /* ty=Tensor[(4, 180), uint32] */;
  %17 = reshape(%16, newshape=[720]) /* ty=Tensor[(720), uint32] */;
  %18 = @func_2639(%17) /* ty=(Tensor[(9, 15, 14), float32], Tensor[(1890), uint32], Tensor[(480), int32], Tensor[(480), int32], Tensor[(2, 13, 5), float32], Tensor[(128), uint16], Tensor[(8, 10, 9), float64], Tensor[(720), uint32], Tensor[(?, 6, 3), uint8], Tensor[(2, 13, 5), float32]) */;
  %19 = cast(%var_3784, dtype="float32") /* ty=Tensor[(130), float32] */;
  %20 = cast(%var_3784, dtype="float32") /* ty=Tensor[(130), float32] */;
  %21 = reshape(%19, newshape=[2, 13, 5]) /* ty=Tensor[(2, 13, 5), float32] */;
  %22 = reshape(%20, newshape=[2, 13, 5]) /* ty=Tensor[(2, 13, 5), float32] */;
  %23 = @func_168(%21, %22) /* ty=(Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), float32]) */;
  %24 = %23.0;
  %25 = cast(%24, dtype="float64") /* ty=Tensor[(2, 13, 5), float64] */;
  %26 = sigmoid(%25) /* ty=Tensor[(2, 13, 5), float64] */;
  %27 = cast(%26, dtype="float64") /* ty=Tensor[(2, 13, 5), float64] */;
  %28 = @func_2773() /* ty=Tensor[(1, 6, 3), float32] */;
  %29 = %18.4;
  %30 = log10(%27) /* ty=Tensor[(2, 13, 5), float64] */;
  (%28, %var_3784, %29, meta[relay.Constant][2] /* ty=Tensor[(4, 180), uint32] */, %30)
}

def @func_4656(%var_4654: Tensor[(5, 11, 11), float64], %var_4655: Tensor[(5, 11, 11), float64]) -> (Tensor[(5, 11, 11), bool],) {
  @func_4652(%var_4654, %var_4655) /* ty=(Tensor[(5, 11, 11), bool],) */
}

def @func_6177() -> (Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32]) {
  %34 = fn () -> (Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32]) {
    %31 = @func_4834() /* ty=(Tensor[(1, 6, 3), float32], Tensor[(11, 2, 12), uint64]) */;
    %32 = %31.0;
    %33 = @func_3947() /* ty=Tensor[(1, 6, 3), float32] */;
    (%32, %33)
  };
  %34() /* ty=(Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32]) */
}

def @func_6998(%var_6996: Tensor[(48), float64]) -> (Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32], Tensor[(48), float64]) {
  @func_6995(%var_6996) /* ty=(Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32], Tensor[(48), float64]) */
}

def @func_811(%var_809: Tensor[(9, 15, 14), uint32], %var_810: Tensor[(9, 15, 14), uint32]) -> Tensor[(9, 15, 14), float32] {
  @func_807(%var_809, %var_810) /* ty=Tensor[(9, 15, 14), float32] */
}

def @func_2747(%var_2736: Tensor[(11, 2, 12), uint64], %var_2737: Tensor[(11, 2, 12), uint64]) -> Tensor[(11, 2, 12), uint64] {
  %35 = cast(%var_2737, dtype="uint64") /* ty=Tensor[(11, 2, 12), uint64] */;
  %36 = shape_of(%var_2736, dtype="int32") /* ty=Tensor[(3), int32] */;
  %37 = cast(%var_2736, dtype="uint64") /* ty=Tensor[(11, 2, 12), uint64] */;
  %38 = dyn.reshape(%35, %36, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  bitwise_or(%37, %38) /* ty=Tensor[(11, 2, 12), uint64] */
}

def @func_4103() -> Tensor[(1, 6, 3), float32] {
  @func_4101() /* ty=Tensor[(1, 6, 3), float32] */
}

def @func_7201(%var_7198: Tensor[(1890), uint32]) -> (Tensor[(1, 6, 3), float64], Tensor[(1890), uint32], Tensor[(1890), uint32]) {
  %39 = @func_5455() /* ty=(Tensor[(1, 6, 3), float64],) */;
  %40 = cast(%var_7198, dtype="uint32") /* ty=Tensor[(1890), uint32] */;
  %41 = reshape(%40, newshape=[1890]) /* ty=Tensor[(1890), uint32] */;
  %42 = @func_7048(%41) /* ty=(Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32], Tensor[(1890), uint32], Tensor[(1890), uint32]) */;
  %43 = %39.0;
  %44 = %42.3;
  (%43, %44, %var_7198)
}

def @func_4721() -> (Tensor[(1, 6, 3), float32],) {
  @func_4719() /* ty=(Tensor[(1, 6, 3), float32],) */
}

def @func_5131() -> Tensor[(1, 6, 3), float32] {
  @func_5129() /* ty=Tensor[(1, 6, 3), float32] */
}

def @func_6629(%var_6627: Tensor[(2, 240), int32]) -> (Tensor[(6, 7), float32], Tensor[(10, 7, 14), bool], Tensor[(980), float32], Tensor[(2, 240), int32], Tensor[(?, 6, 3), bool]) {
  @func_6626(%var_6627) /* ty=(Tensor[(6, 7), float32], Tensor[(10, 7, 14), bool], Tensor[(980), float32], Tensor[(2, 240), int32], Tensor[(?, 6, 3), bool]) */
}

def @func_7084(%var_7058: Tensor[(4, 8, 7), float64], %var_7059: Tensor[(4, 8, 7), float64], %var_7067: Tensor[(480), int32]) -> (Tensor[(4, 8, 7), float64], Tensor[(10, 7, 14), bool], Tensor[(480), int32], Tensor[(4, 8, 7), float32]) {
  %45 = cast(%var_7059, dtype="float64") /* ty=Tensor[(4, 8, 7), float64] */;
  %46 = shape_of(%var_7058, dtype="int32") /* ty=Tensor[(3), int32] */;
  %47 = cast(%var_7058, dtype="float64") /* ty=Tensor[(4, 8, 7), float64] */;
  %48 = dyn.reshape(%45, %46, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %49 = cast(%var_7067, dtype="int32") /* ty=Tensor[(480), int32] */;
  %50 = reshape(%49, newshape=[2, 240]) /* ty=Tensor[(2, 240), int32] */;
  %51 = @func_6626(%50) /* ty=(Tensor[(6, 7), float32], Tensor[(10, 7, 14), bool], Tensor[(980), float32], Tensor[(2, 240), int32], Tensor[(?, 6, 3), bool]) */;
  %52 = cast(%var_7059, dtype="float32") /* ty=Tensor[(4, 8, 7), float32] */;
  %53 = divide(%47, %48) /* ty=Tensor[(4, 8, 7), float64] */;
  %54 = %51.1;
  %55 = sin(%52) /* ty=Tensor[(4, 8, 7), float32] */;
  (%53, %54, %var_7067, %55)
}

def @func_6809() -> (Tensor[(1, 6, 3), float64], Tensor[(1, 6, 3), float32]) {
  @func_6807() /* ty=(Tensor[(1, 6, 3), float64], Tensor[(1, 6, 3), float32]) */
}

def @func_5897(%var_5896: Tensor[(6, 6, 3), float32]) -> (Tensor[(6, 6, 3), int64], Tensor[(?, 6, 3), bool], Tensor[(1280), float32], Tensor[(480), int32]) {
  %66 = fn (%var_5848: Tensor[(6, 6, 3), float32]) -> (Tensor[(6, 6, 3), int64], Tensor[(?, 6, 3), bool], Tensor[(1280), float32], Tensor[(480), int32]) {
    %56 = @func_4101() /* ty=Tensor[(1, 6, 3), float32] */;
    %57 = cast(%56, dtype="int64") /* ty=Tensor[(1, 6, 3), int64] */;
    %58 = cast(%var_5848, dtype="int64") /* ty=Tensor[(6, 6, 3), int64] */;
    %59 = cast(meta[relay.Constant][3] /* ty=Tensor[(1280), float32] */, dtype="float32") /* ty=Tensor[(1280), float32] */;
    %60 = cast(meta[relay.Constant][4] /* ty=Tensor[(480), int32] */, dtype="int32") /* ty=Tensor[(480), int32] */;
    %61 = reshape(%59, newshape=[16, 80]) /* ty=Tensor[(16, 80), float32] */;
    %62 = reshape(%60, newshape=[480]) /* ty=Tensor[(480), int32] */;
    %63 = @func_5241(%61, %62) /* ty=(Tensor[(?, 6, 3), bool], Tensor[(360, 2), float64], Tensor[(16, 10, 8), bool], Tensor[(16, 80), float32], Tensor[(14), int64], Tensor[(480), int32], Tensor[(?, 6, 3), bool]) */;
    %64 = bitwise_and(%57, %58) /* ty=Tensor[(6, 6, 3), int64] */;
    %65 = %63.6;
    (%64, %65, meta[relay.Constant][3] /* ty=Tensor[(1280), float32] */, meta[relay.Constant][4] /* ty=Tensor[(480), int32] */)
  };
  %66(%var_5896) /* ty=(Tensor[(6, 6, 3), int64], Tensor[(?, 6, 3), bool], Tensor[(1280), float32], Tensor[(480), int32]) */
}

def @func_5010() -> Tensor[(1, 6, 3), float32] {
  @func_2412() /* ty=Tensor[(1, 6, 3), float32] */
}

def @func_1241(%var_1239: Tensor[(7, 2), int64], %var_1240: Tensor[(480), int32]) -> (Tensor[(7, 2), int64], Tensor[(2, 13, 5), float32], Tensor[(3, 3, 8), bool], Tensor[(480), int32], Tensor[(130), float32], Tensor[(3, 3, 8), bool]) {
  %89 = fn (%var_1197: Tensor[(7, 2), int64], %var_1213: Tensor[(480), int32]) -> (Tensor[(7, 2), int64], Tensor[(2, 13, 5), float32], Tensor[(3, 3, 8), bool], Tensor[(480), int32], Tensor[(130), float32], Tensor[(3, 3, 8), bool]) {
    %67 = cast(8 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %68 = cast(%var_1197, dtype="int64") /* ty=Tensor[(7, 2), int64] */;
    %69 = cast(meta[relay.Constant][5] /* ty=Tensor[(130), float32] */, dtype="float32") /* ty=Tensor[(130), float32] */;
    %70 = cast(meta[relay.Constant][5] /* ty=Tensor[(130), float32] */, dtype="float32") /* ty=Tensor[(130), float32] */;
    %71 = reshape(%69, newshape=[2, 13, 5]) /* ty=Tensor[(2, 13, 5), float32] */;
    %72 = reshape(%70, newshape=[2, 13, 5]) /* ty=Tensor[(2, 13, 5), float32] */;
    %73 = @func_168(%71, %72) /* ty=(Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), float32]) */;
    %74 = cast(%var_1213, dtype="int32") /* ty=Tensor[(480), int32] */;
    %75 = reshape(%74, newshape=[6, 5, 16]) /* ty=Tensor[(6, 5, 16), int32] */;
    %76 = @func_695(%75) /* ty=(Tensor[(6, 5, 16), int32], Tensor[(3, 3, 8), bool], Tensor[(72), float32], Tensor[(3, 3, 8), bool]) */;
    %77 = cast(meta[relay.Constant][5] /* ty=Tensor[(130), float32] */, dtype="bool") /* ty=Tensor[(130), bool] */;
    %78 = cast(8 /* ty=int64 */, dtype="bool") /* ty=bool */;
    %79 = logical_and(%77, %78) /* ty=Tensor[(130), bool] */;
    %80 = cast(%79, dtype="float32") /* ty=Tensor[(130), float32] */;
    %81 = cast(%var_1213, dtype="int32") /* ty=Tensor[(480), int32] */;
    %82 = reshape(%81, newshape=[6, 5, 16]) /* ty=Tensor[(6, 5, 16), int32] */;
    %83 = @func_695(%82) /* ty=(Tensor[(6, 5, 16), int32], Tensor[(3, 3, 8), bool], Tensor[(72), float32], Tensor[(3, 3, 8), bool]) */;
    %84 = bitwise_xor(%67, %68) /* ty=Tensor[(7, 2), int64] */;
    %85 = %73.2;
    %86 = %76.1;
    %87 = sqrt(%80) /* ty=Tensor[(130), float32] */;
    %88 = %83.1;
    (%84, %85, %86, %var_1213, %87, %88)
  };
  %89(%var_1239, %var_1240) /* ty=(Tensor[(7, 2), int64], Tensor[(2, 13, 5), float32], Tensor[(3, 3, 8), bool], Tensor[(480), int32], Tensor[(130), float32], Tensor[(3, 3, 8), bool]) */
}

def @func_4798(%var_4795: Tensor[(7, 2, 4), float32], %var_4796: Tensor[(360), uint64], %var_4797: Tensor[(1, 126), float32]) -> (Tensor[(7, 2, 4), float64], Tensor[(7, 2, 4), int16], Tensor[(12, 10, 3), uint64], Tensor[(360), uint64], Tensor[(720), uint32], Tensor[(1, 126), float32]) {
  %115 = fn (%var_4764: Tensor[(7, 2, 4), float32], %var_4787: Tensor[(360), uint64], %var_4791: Tensor[(1, 126), float32]) -> (Tensor[(7, 2, 4), float64], Tensor[(7, 2, 4), int16], Tensor[(12, 10, 3), uint64], Tensor[(360), uint64], Tensor[(720), uint32], Tensor[(1, 126), float32]) {
    %90 = cast(%var_4764, dtype="float32") /* ty=Tensor[(7, 2, 4), float32] */;
    %91 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(7, 2, 4), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %92 = cast(meta[relay.Constant][6] /* ty=Tensor[(7, 2, 4), float32] */, dtype="float32") /* ty=Tensor[(7, 2, 4), float32] */;
    %93 = dyn.reshape(%90, %91, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %94 = floor_mod(%92, %93) /* ty=Tensor[(7, 2, 4), float32] */;
    %95 = cast(%var_4764, dtype="float64") /* ty=Tensor[(7, 2, 4), float64] */;
    %96 = atan(%95) /* ty=Tensor[(7, 2, 4), float64] */;
    %97 = cast(%96, dtype="float64") /* ty=Tensor[(7, 2, 4), float64] */;
    %98 = shape_of(%94, dtype="int32") /* ty=Tensor[(3), int32] */;
    %99 = cast(%94, dtype="float64") /* ty=Tensor[(7, 2, 4), float64] */;
    %100 = dyn.reshape(%97, %98, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %101 = cast(%var_4764, dtype="int16") /* ty=Tensor[(7, 2, 4), int16] */;
    %102 = shape_of(%96, dtype="int32") /* ty=Tensor[(3), int32] */;
    %103 = cast(%96, dtype="int16") /* ty=Tensor[(7, 2, 4), int16] */;
    %104 = dyn.reshape(%101, %102, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %105 = cast(%var_4787, dtype="uint64") /* ty=Tensor[(360), uint64] */;
    %106 = reshape(%105, newshape=[12, 10, 3]) /* ty=Tensor[(12, 10, 3), uint64] */;
    %107 = @func_1022(%106) /* ty=(Tensor[(12, 10, 3), uint64],) */;
    %108 = cast(%var_4791, dtype="float32") /* ty=Tensor[(1, 126), float32] */;
    %109 = reshape(%108, newshape=[7, 6, 3]) /* ty=Tensor[(7, 6, 3), float32] */;
    %110 = @func_3247(%109) /* ty=(Tensor[(1, 128), uint16], Tensor[(8, 10, 9), uint32], Tensor[(720), uint32], Tensor[(7, 6, 3), int8], Tensor[(2, 13, 5), float32]) */;
    %111 = divide(%99, %100) /* ty=Tensor[(7, 2, 4), float64] */;
    %112 = multiply(%103, %104) /* ty=Tensor[(7, 2, 4), int16] */;
    %113 = %107.0;
    %114 = %110.2;
    (%111, %112, %113, %var_4787, %114, %var_4791)
  };
  %115(%var_4795, %var_4796, %var_4797) /* ty=(Tensor[(7, 2, 4), float64], Tensor[(7, 2, 4), int16], Tensor[(12, 10, 3), uint64], Tensor[(360), uint64], Tensor[(720), uint32], Tensor[(1, 126), float32]) */
}

def @func_5033() -> (Tensor[(1, 6, 3), float64],) {
  @func_5031() /* ty=(Tensor[(1, 6, 3), float64],) */
}

def @func_5262() -> Tensor[(1, 6, 3), float64] {
  @func_5260() /* ty=Tensor[(1, 6, 3), float64] */
}

def @func_6058(%var_5959: Tensor[(11, 6, 3), float32], %var_6002: Tensor[(330), int32], %var_6003: Tensor[(1274), float32], %var_6051: Tensor[(11, 6, 3), float32]) -> (Tensor[(11, 6, 3), bool], Tensor[(1, 6, 3), float32], Tensor[(11, 2, 12), uint64], Tensor[(1, 6, 3), float32], Tensor[(11, 6, 3), float64], Tensor[(1, 6, 3), float32], Tensor[(14, 7, 13), int8], Tensor[(330), int32], Tensor[(1274), float32], Tensor[(11, 6, 3), float64], Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float64], Tensor[(11, 6, 3), uint8]) {
  %116 = @func_4522() /* ty=(Tensor[(1, 6, 3), float32], Tensor[(16, 5, 5), int64], Tensor[(400), int64], Tensor[(1, 6, 3), float32], Tensor[(11, 2, 12), uint64], Tensor[(132, 2), uint64], Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32]) */;
  %117 = %116.0;
  %118 = cast(%117, dtype="bool") /* ty=Tensor[(1, 6, 3), bool] */;
  %119 = cast(%var_5959, dtype="bool") /* ty=Tensor[(11, 6, 3), bool] */;
  %120 = @func_4834() /* ty=(Tensor[(1, 6, 3), float32], Tensor[(11, 2, 12), uint64]) */;
  %121 = cast(%var_5959, dtype="float32") /* ty=Tensor[(11, 6, 3), float32] */;
  %122 = sinh(%121) /* ty=Tensor[(11, 6, 3), float32] */;
  %123 = cast(%122, dtype="float64") /* ty=Tensor[(11, 6, 3), float64] */;
  %124 = cast(%var_6002, dtype="int32") /* ty=Tensor[(330), int32] */;
  %125 = cast(%var_6002, dtype="int32") /* ty=Tensor[(330), int32] */;
  %126 = cast(%var_6003, dtype="float32") /* ty=Tensor[(1274), float32] */;
  %127 = reshape(%124, newshape=[5, 6, 11]) /* ty=Tensor[(5, 6, 11), int32] */;
  %128 = reshape(%125, newshape=[5, 6, 11]) /* ty=Tensor[(5, 6, 11), int32] */;
  %129 = reshape(%126, newshape=[1274]) /* ty=Tensor[(1274), float32] */;
  %130 = @func_1543(%127, %128, %129) /* ty=(Tensor[(5, 6, 11), bool], Tensor[(5, 6, 11), uint8], Tensor[(14, 7, 13), int8], Tensor[(1274), float32]) */;
  %131 = cast(%122, dtype="float64") /* ty=Tensor[(11, 6, 3), float64] */;
  %132 = cast(%var_6051, dtype="uint8") /* ty=Tensor[(11, 6, 3), uint8] */;
  %133 = shape_of(%122, dtype="int32") /* ty=Tensor[(3), int32] */;
  %134 = cast(%122, dtype="uint8") /* ty=Tensor[(11, 6, 3), uint8] */;
  %135 = dyn.reshape(%132, %133, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %136 = not_equal(%118, %119) /* ty=Tensor[(11, 6, 3), bool] */;
  %137 = @func_3947() /* ty=Tensor[(1, 6, 3), float32] */;
  %138 = %120.1;
  %139 = @func_5630() /* ty=Tensor[(1, 6, 3), float32] */;
  %140 = log2(%123) /* ty=Tensor[(11, 6, 3), float64] */;
  %141 = @func_2393() /* ty=Tensor[(1, 6, 3), float32] */;
  %142 = %130.2;
  %143 = log(%131) /* ty=Tensor[(11, 6, 3), float64] */;
  %144 = @func_3397() /* ty=Tensor[(1, 6, 3), float32] */;
  %145 = @func_3397() /* ty=Tensor[(1, 6, 3), float32] */;
  %146 = @func_5260() /* ty=Tensor[(1, 6, 3), float64] */;
  %147 = left_shift(%134, %135) /* ty=Tensor[(11, 6, 3), uint8] */;
  (%136, %137, %138, %139, %140, %141, %142, %var_6002, %var_6003, %143, %144, %145, %146, %147)
}

def @func_5012() -> Tensor[(1, 6, 3), float32] {
  @func_5010() /* ty=Tensor[(1, 6, 3), float32] */
}

def @func_4264(%var_4262: Tensor[(1890), uint32]) -> (Tensor[(1890), uint32], Tensor[(?, 6, 3), int32], Tensor[(16, 6, 3), float32], Tensor[(288), float32], Tensor[(?, 6, 3), bool], Tensor[(11, 6, 3), bool], Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32], Tensor[(9, 15, 14), float32], Tensor[(360, 2), bool], Tensor[(720), uint32]) {
  @func_4261(%var_4262) /* ty=(Tensor[(1890), uint32], Tensor[(?, 6, 3), int32], Tensor[(16, 6, 3), float32], Tensor[(288), float32], Tensor[(?, 6, 3), bool], Tensor[(11, 6, 3), bool], Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32], Tensor[(9, 15, 14), float32], Tensor[(360, 2), bool], Tensor[(720), uint32]) */
}

def @func_4420() -> Tensor[(1, 6, 3), float64] {
  %148 = @func_3397() /* ty=Tensor[(1, 6, 3), float32] */;
  %149 = cast(%148, dtype="float64") /* ty=Tensor[(1, 6, 3), float64] */;
  asinh(%149) /* ty=Tensor[(1, 6, 3), float64] */
}

def @func_4884() -> (Tensor[(1, 6, 3), float32], Tensor[(480), int32], Tensor[(4, 120), int32]) {
  %150 = cast(meta[relay.Constant][7] /* ty=Tensor[(4, 120), int32] */, dtype="int32") /* ty=Tensor[(4, 120), int32] */;
  %151 = reshape(%150, newshape=[480]) /* ty=Tensor[(480), int32] */;
  %152 = @func_3514(%151) /* ty=(Tensor[(1, 6, 3), float32], Tensor[(1, 14), int64], Tensor[(980), float32], Tensor[(480), int32]) */;
  %153 = @func_4671() /* ty=Tensor[(1, 6, 3), float32] */;
  %154 = %152.3;
  (%153, %154, meta[relay.Constant][7] /* ty=Tensor[(4, 120), int32] */)
}

def @func_1548(%var_1545: Tensor[(5, 6, 11), int32], %var_1546: Tensor[(5, 6, 11), int32], %var_1547: Tensor[(1274), float32]) -> (Tensor[(5, 6, 11), bool], Tensor[(5, 6, 11), uint8], Tensor[(14, 7, 13), int8], Tensor[(1274), float32]) {
  @func_1543(%var_1545, %var_1546, %var_1547) /* ty=(Tensor[(5, 6, 11), bool], Tensor[(5, 6, 11), uint8], Tensor[(14, 7, 13), int8], Tensor[(1274), float32]) */
}

def @func_3560(%var_3559: Tensor[(7, 182), float32]) -> (Tensor[(5, 6, 3), uint32], Tensor[(14, 7, 13), int8], Tensor[(330), int32], Tensor[(7, 182), float32], Tensor[(1, 6, 3), float32]) {
  %168 = fn (%var_3545: Tensor[(7, 182), float32]) -> (Tensor[(5, 6, 3), uint32], Tensor[(14, 7, 13), int8], Tensor[(330), int32], Tensor[(7, 182), float32], Tensor[(1, 6, 3), float32]) {
    %155 = @func_2773() /* ty=Tensor[(1, 6, 3), float32] */;
    %156 = cast(%155, dtype="uint32") /* ty=Tensor[(1, 6, 3), uint32] */;
    %157 = cast(meta[relay.Constant][8] /* ty=Tensor[(5, 6, 3), float32] */, dtype="uint32") /* ty=Tensor[(5, 6, 3), uint32] */;
    %158 = cast(meta[relay.Constant][9] /* ty=Tensor[(330), int32] */, dtype="int32") /* ty=Tensor[(330), int32] */;
    %159 = cast(meta[relay.Constant][9] /* ty=Tensor[(330), int32] */, dtype="int32") /* ty=Tensor[(330), int32] */;
    %160 = cast(%var_3545, dtype="float32") /* ty=Tensor[(7, 182), float32] */;
    %161 = reshape(%158, newshape=[5, 6, 11]) /* ty=Tensor[(5, 6, 11), int32] */;
    %162 = reshape(%159, newshape=[5, 6, 11]) /* ty=Tensor[(5, 6, 11), int32] */;
    %163 = reshape(%160, newshape=[1274]) /* ty=Tensor[(1274), float32] */;
    %164 = @func_1543(%161, %162, %163) /* ty=(Tensor[(5, 6, 11), bool], Tensor[(5, 6, 11), uint8], Tensor[(14, 7, 13), int8], Tensor[(1274), float32]) */;
    %165 = left_shift(%156, %157) /* ty=Tensor[(5, 6, 3), uint32] */;
    %166 = %164.2;
    %167 = @func_2773() /* ty=Tensor[(1, 6, 3), float32] */;
    (%165, %166, meta[relay.Constant][9] /* ty=Tensor[(330), int32] */, %var_3545, %167)
  };
  %168(%var_3559) /* ty=(Tensor[(5, 6, 3), uint32], Tensor[(14, 7, 13), int8], Tensor[(330), int32], Tensor[(7, 182), float32], Tensor[(1, 6, 3), float32]) */
}

def @func_2685(%var_2684: Tensor[(360, 2), uint32]) -> (Tensor[(1, 6, 3), float32], Tensor[(8, 10, 9), uint32], Tensor[(360, 2), bool], Tensor[(360, 2), float64]) {
  %188 = fn (%var_2657: Tensor[(360, 2), uint32]) -> (Tensor[(1, 6, 3), float32], Tensor[(8, 10, 9), uint32], Tensor[(360, 2), bool], Tensor[(360, 2), float64]) {
    %169 = cast(meta[relay.Constant][10] /* ty=Tensor[(360, 2), uint32] */, dtype="uint32") /* ty=Tensor[(360, 2), uint32] */;
    %170 = cast(meta[relay.Constant][10] /* ty=Tensor[(360, 2), uint32] */, dtype="uint32") /* ty=Tensor[(360, 2), uint32] */;
    %171 = reshape(%169, newshape=[8, 10, 9]) /* ty=Tensor[(8, 10, 9), uint32] */;
    %172 = reshape(%170, newshape=[8, 10, 9]) /* ty=Tensor[(8, 10, 9), uint32] */;
    %173 = @func_2229(%171, %172) /* ty=(Tensor[(8, 10, 9), uint32], Tensor[(8, 10, 9), float64]) */;
    %174 = cast(%var_2657, dtype="uint64") /* ty=Tensor[(360, 2), uint64] */;
    %175 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(360, 2), uint32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %176 = cast(meta[relay.Constant][10] /* ty=Tensor[(360, 2), uint32] */, dtype="uint64") /* ty=Tensor[(360, 2), uint64] */;
    %177 = dyn.reshape(%174, %175, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %178 = multiply(%176, %177) /* ty=Tensor[(360, 2), uint64] */;
    %179 = cast(meta[relay.Constant][10] /* ty=Tensor[(360, 2), uint32] */, dtype="bool") /* ty=Tensor[(360, 2), bool] */;
    %180 = shape_of(%178, dtype="int32") /* ty=Tensor[(2), int32] */;
    %181 = cast(%178, dtype="bool") /* ty=Tensor[(360, 2), bool] */;
    %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %183 = cast(%var_2657, dtype="float64") /* ty=Tensor[(360, 2), float64] */;
    %184 = @func_2393() /* ty=Tensor[(1, 6, 3), float32] */;
    %185 = %173.0;
    %186 = greater(%181, %182) /* ty=Tensor[(360, 2), bool] */;
    %187 = acos(%183) /* ty=Tensor[(360, 2), float64] */;
    (%184, %185, %186, %187)
  };
  %188(%var_2684) /* ty=(Tensor[(1, 6, 3), float32], Tensor[(8, 10, 9), uint32], Tensor[(360, 2), bool], Tensor[(360, 2), float64]) */
}

def @func_6995(%var_6992: Tensor[(48), float64]) -> (Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32], Tensor[(48), float64]) {
  %189 = cast(%var_6992, dtype="float64") /* ty=Tensor[(48), float64] */;
  %190 = reshape(%189, newshape=[3, 4, 4]) /* ty=Tensor[(3, 4, 4), float64] */;
  %191 = @func_6933(%190) /* ty=(Tensor[(3, 4, 4), float64], Tensor[(1, 6, 3), float32]) */;
  %192 = @func_5010() /* ty=Tensor[(1, 6, 3), float32] */;
  %193 = %191.1;
  (%192, %193, %var_6992)
}

def @func_5670(%var_5669: Tensor[(1, 6, 3), float32]) -> (Tensor[(?, 6, 3), bool], Tensor[(1890), uint32], Tensor[(1, 720), uint32]) {
  %204 = fn (%var_5657: Tensor[(1, 6, 3), float32]) -> (Tensor[(?, 6, 3), bool], Tensor[(1890), uint32], Tensor[(1, 720), uint32]) {
    %194 = @func_2773() /* ty=Tensor[(1, 6, 3), float32] */;
    %195 = cast(%var_5657, dtype="bool") /* ty=Tensor[(1, 6, 3), bool] */;
    %196 = shape_of(%194, dtype="int32") /* ty=Tensor[(3), int32] */;
    %197 = cast(%194, dtype="bool") /* ty=Tensor[(1, 6, 3), bool] */;
    %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %199 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 720), uint32] */, dtype="uint32") /* ty=Tensor[(1, 720), uint32] */;
    %200 = reshape(%199, newshape=[720]) /* ty=Tensor[(720), uint32] */;
    %201 = @func_2639(%200) /* ty=(Tensor[(9, 15, 14), float32], Tensor[(1890), uint32], Tensor[(480), int32], Tensor[(480), int32], Tensor[(2, 13, 5), float32], Tensor[(128), uint16], Tensor[(8, 10, 9), float64], Tensor[(720), uint32], Tensor[(?, 6, 3), uint8], Tensor[(2, 13, 5), float32]) */;
    %202 = logical_and(%197, %198) /* ty=Tensor[(?, 6, 3), bool] */;
    %203 = %201.1;
    (%202, %203, meta[relay.Constant][11] /* ty=Tensor[(1, 720), uint32] */)
  };
  %204(%var_5669) /* ty=(Tensor[(?, 6, 3), bool], Tensor[(1890), uint32], Tensor[(1, 720), uint32]) */
}

def @func_3995(%var_3993: float32, %var_3994: Tensor[(16, 12, 6), float32]) -> (Tensor[(16, 12, 6), uint32], Tensor[(5, 6, 11), bool], Tensor[(5, 66), int32], Tensor[(1274), float32]) {
  %221 = fn (%var_3971: float32, %var_3972: Tensor[(16, 12, 6), float32]) -> (Tensor[(16, 12, 6), uint32], Tensor[(5, 6, 11), bool], Tensor[(5, 66), int32], Tensor[(1274), float32]) {
    %205 = cast(%var_3971, dtype="float32") /* ty=float32 */;
    %206 = cast(%var_3972, dtype="float32") /* ty=Tensor[(16, 12, 6), float32] */;
    %207 = floor_mod(%205, %206) /* ty=Tensor[(16, 12, 6), float32] */;
    %208 = cast(%var_3972, dtype="uint32") /* ty=Tensor[(16, 12, 6), uint32] */;
    %209 = shape_of(%207, dtype="int32") /* ty=Tensor[(3), int32] */;
    %210 = cast(%207, dtype="uint32") /* ty=Tensor[(16, 12, 6), uint32] */;
    %211 = dyn.reshape(%208, %209, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %212 = cast(meta[relay.Constant][12] /* ty=Tensor[(5, 66), int32] */, dtype="int32") /* ty=Tensor[(5, 66), int32] */;
    %213 = cast(meta[relay.Constant][12] /* ty=Tensor[(5, 66), int32] */, dtype="int32") /* ty=Tensor[(5, 66), int32] */;
    %214 = cast(meta[relay.Constant][13] /* ty=Tensor[(1274), float32] */, dtype="float32") /* ty=Tensor[(1274), float32] */;
    %215 = reshape(%212, newshape=[5, 6, 11]) /* ty=Tensor[(5, 6, 11), int32] */;
    %216 = reshape(%213, newshape=[5, 6, 11]) /* ty=Tensor[(5, 6, 11), int32] */;
    %217 = reshape(%214, newshape=[1274]) /* ty=Tensor[(1274), float32] */;
    %218 = @func_1543(%215, %216, %217) /* ty=(Tensor[(5, 6, 11), bool], Tensor[(5, 6, 11), uint8], Tensor[(14, 7, 13), int8], Tensor[(1274), float32]) */;
    %219 = left_shift(%210, %211) /* ty=Tensor[(16, 12, 6), uint32] */;
    %220 = %218.0;
    (%219, %220, meta[relay.Constant][12] /* ty=Tensor[(5, 66), int32] */, meta[relay.Constant][13] /* ty=Tensor[(1274), float32] */)
  };
  %221(%var_3993, %var_3994) /* ty=(Tensor[(16, 12, 6), uint32], Tensor[(5, 6, 11), bool], Tensor[(5, 66), int32], Tensor[(1274), float32]) */
}

def @func_6807() -> (Tensor[(1, 6, 3), float64], Tensor[(1, 6, 3), float32]) {
  %222 = @func_4164() /* ty=(Tensor[(1, 6, 3), float32],) */;
  %223 = @func_5260() /* ty=Tensor[(1, 6, 3), float64] */;
  %224 = %222.0;
  (%223, %224)
}

def @func_5759() -> (Tensor[(10, 6, 3), float32], Tensor[(1, 6, 3), float32]) {
  %225 = @func_4864() /* ty=(Tensor[(1, 6, 3), float32],) */;
  %226 = %225.0;
  %227 = cast(%226, dtype="float32") /* ty=Tensor[(1, 6, 3), float32] */;
  %228 = cast(meta[relay.Constant][14] /* ty=Tensor[(10, 6, 3), float32] */, dtype="float32") /* ty=Tensor[(10, 6, 3), float32] */;
  %229 = cast(%226, dtype="float32") /* ty=Tensor[(1, 6, 3), float32] */;
  %230 = floor_divide(%227, %228) /* ty=Tensor[(10, 6, 3), float32] */;
  %231 = sinh(%229) /* ty=Tensor[(1, 6, 3), float32] */;
  (%230, %231)
}

def @func_2229(%var_2211: Tensor[(8, 10, 9), uint32], %var_2212: Tensor[(8, 10, 9), uint32]) -> (Tensor[(8, 10, 9), uint32], Tensor[(8, 10, 9), float64]) {
  %232 = cast(%var_2212, dtype="uint32") /* ty=Tensor[(8, 10, 9), uint32] */;
  %233 = shape_of(%var_2211, dtype="int32") /* ty=Tensor[(3), int32] */;
  %234 = cast(%var_2211, dtype="uint32") /* ty=Tensor[(8, 10, 9), uint32] */;
  %235 = dyn.reshape(%232, %233, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %236 = cast(%var_2212, dtype="float64") /* ty=Tensor[(8, 10, 9), float64] */;
  %237 = bitwise_and(%234, %235) /* ty=Tensor[(8, 10, 9), uint32] */;
  %238 = cosh(%236) /* ty=Tensor[(8, 10, 9), float64] */;
  (%237, %238)
}

def @func_2751(%var_2749: Tensor[(11, 2, 12), uint64], %var_2750: Tensor[(11, 2, 12), uint64]) -> Tensor[(11, 2, 12), uint64] {
  @func_2747(%var_2749, %var_2750) /* ty=Tensor[(11, 2, 12), uint64] */
}

def @func_6222() -> Tensor[(1, 6, 3), float32] {
  @func_6220() /* ty=Tensor[(1, 6, 3), float32] */
}

def @func_4546(%var_4544: Tensor[(16, 3, 15), float64], %var_4545: Tensor[(360), uint64]) -> (Tensor[(16, 3, 15), float64], Tensor[(12, 10, 3), uint64], Tensor[(360), uint64]) {
  @func_4542(%var_4544, %var_4545) /* ty=(Tensor[(16, 3, 15), float64], Tensor[(12, 10, 3), uint64], Tensor[(360), uint64]) */
}

def @func_4165() -> (Tensor[(1, 6, 3), float32],) {
  %240 = fn () -> (Tensor[(1, 6, 3), float32],) {
    %239 = @func_3951() /* ty=Tensor[(1, 6, 3), float32] */;
    (%239,)
  };
  %240() /* ty=(Tensor[(1, 6, 3), float32],) */
}

def @func_4522() -> (Tensor[(1, 6, 3), float32], Tensor[(16, 5, 5), int64], Tensor[(400), int64], Tensor[(1, 6, 3), float32], Tensor[(11, 2, 12), uint64], Tensor[(132, 2), uint64], Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32]) {
  %241 = @func_4453() /* ty=(Tensor[(1, 6, 3), float32],) */;
  %242 = cast(meta[relay.Constant][15] /* ty=Tensor[(400), int64] */, dtype="int64") /* ty=Tensor[(400), int64] */;
  %243 = cast(meta[relay.Constant][15] /* ty=Tensor[(400), int64] */, dtype="int64") /* ty=Tensor[(400), int64] */;
  %244 = reshape(%242, newshape=[16, 5, 5]) /* ty=Tensor[(16, 5, 5), int64] */;
  %245 = reshape(%243, newshape=[16, 5, 5]) /* ty=Tensor[(16, 5, 5), int64] */;
  %246 = @func_3315() /* ty=(Tensor[(1, 6, 3), float32],) */;
  %247 = cast(meta[relay.Constant][16] /* ty=Tensor[(132, 2), uint64] */, dtype="uint64") /* ty=Tensor[(132, 2), uint64] */;
  %248 = reshape(%247, newshape=[66, 4]) /* ty=Tensor[(66, 4), uint64] */;
  %249 = @func_3471(%248) /* ty=(Tensor[(1, 6, 3), float32], Tensor[(11, 2, 12), uint64], Tensor[(66, 4), uint64]) */;
  %250 = @func_4453() /* ty=(Tensor[(1, 6, 3), float32],) */;
  %251 = @func_4139() /* ty=(Tensor[(1, 6, 3), float32],) */;
  %252 = %241.0;
  %253 = @func_2420(%244, %245) /* ty=Tensor[(16, 5, 5), int64] */;
  %254 = %246.0;
  %255 = %249.1;
  %256 = %250.0;
  %257 = %251.0;
  (%252, %253, meta[relay.Constant][15] /* ty=Tensor[(400), int64] */, %254, %255, meta[relay.Constant][16] /* ty=Tensor[(132, 2), uint64] */, %256, %257)
}

def @func_4261(%var_4184: Tensor[(1890), uint32]) -> (Tensor[(1890), uint32], Tensor[(?, 6, 3), int32], Tensor[(16, 6, 3), float32], Tensor[(288), float32], Tensor[(?, 6, 3), bool], Tensor[(11, 6, 3), bool], Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32], Tensor[(9, 15, 14), float32], Tensor[(360, 2), bool], Tensor[(720), uint32]) {
  %258 = @func_2412() /* ty=Tensor[(1, 6, 3), float32] */;
  %259 = @func_3951() /* ty=Tensor[(1, 6, 3), float32] */;
  %260 = cast(%259, dtype="int32") /* ty=Tensor[(1, 6, 3), int32] */;
  %261 = shape_of(%258, dtype="int32") /* ty=Tensor[(3), int32] */;
  %262 = cast(%258, dtype="int32") /* ty=Tensor[(1, 6, 3), int32] */;
  %263 = dyn.reshape(%260, %261, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %264 = cast(meta[relay.Constant][17] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %265 = reshape(%264, newshape=[16, 6, 3]) /* ty=Tensor[(16, 6, 3), float32] */;
  %266 = @func_3884(%265) /* ty=(Tensor[(16, 6, 3), float32], Tensor[(12, 6, 3), float32]) */;
  %267 = cast(%258, dtype="bool") /* ty=Tensor[(1, 6, 3), bool] */;
  %268 = shape_of(%259, dtype="int32") /* ty=Tensor[(3), int32] */;
  %269 = cast(%259, dtype="bool") /* ty=Tensor[(1, 6, 3), bool] */;
  %270 = dyn.reshape(%267, %268, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %271 = cast(%258, dtype="bool") /* ty=Tensor[(1, 6, 3), bool] */;
  %272 = cast(meta[relay.Constant][18] /* ty=Tensor[(11, 6, 3), float32] */, dtype="bool") /* ty=Tensor[(11, 6, 3), bool] */;
  %273 = cast(%var_4184, dtype="uint32") /* ty=Tensor[(1890), uint32] */;
  %274 = cast(%var_4184, dtype="uint32") /* ty=Tensor[(1890), uint32] */;
  %275 = reshape(%273, newshape=[9, 15, 14]) /* ty=Tensor[(9, 15, 14), uint32] */;
  %276 = reshape(%274, newshape=[9, 15, 14]) /* ty=Tensor[(9, 15, 14), uint32] */;
  %277 = @func_807(%275, %276) /* ty=Tensor[(9, 15, 14), float32] */;
  %278 = cast(%277, dtype="float32") /* ty=Tensor[(9, 15, 14), float32] */;
  %279 = cast(meta[relay.Constant][19] /* ty=Tensor[(720), uint32] */, dtype="uint32") /* ty=Tensor[(720), uint32] */;
  %280 = reshape(%279, newshape=[360, 2]) /* ty=Tensor[(360, 2), uint32] */;
  %281 = @func_2683(%280) /* ty=(Tensor[(1, 6, 3), float32], Tensor[(8, 10, 9), uint32], Tensor[(360, 2), bool], Tensor[(360, 2), float64]) */;
  %282 = bitwise_or(%262, %263) /* ty=Tensor[(?, 6, 3), int32] */;
  %283 = %266.0;
  %284 = equal(%269, %270) /* ty=Tensor[(?, 6, 3), bool] */;
  %285 = less(%271, %272) /* ty=Tensor[(11, 6, 3), bool] */;
  %286 = @func_4122() /* ty=Tensor[(1, 6, 3), float32] */;
  %287 = @func_4101() /* ty=Tensor[(1, 6, 3), float32] */;
  %288 = cosh(%278) /* ty=Tensor[(9, 15, 14), float32] */;
  %289 = %281.2;
  (%var_4184, %282, %283, meta[relay.Constant][17] /* ty=Tensor[(288), float32] */, %284, %285, %286, %287, %288, %289, meta[relay.Constant][19] /* ty=Tensor[(720), uint32] */)
}

def @func_5129() -> Tensor[(1, 6, 3), float32] {
  @func_3397() /* ty=Tensor[(1, 6, 3), float32] */
}

def @func_3516(%var_3515: Tensor[(480), int32]) -> (Tensor[(1, 6, 3), float32], Tensor[(1, 14), int64], Tensor[(980), float32], Tensor[(480), int32]) {
  %297 = fn (%var_3502: Tensor[(480), int32]) -> (Tensor[(1, 6, 3), float32], Tensor[(1, 14), int64], Tensor[(980), float32], Tensor[(480), int32]) {
    %290 = cast(meta[relay.Constant][20] /* ty=Tensor[(980), float32] */, dtype="float32") /* ty=Tensor[(980), float32] */;
    %291 = cast(%var_3502, dtype="int32") /* ty=Tensor[(480), int32] */;
    %292 = reshape(%290, newshape=[10, 7, 14]) /* ty=Tensor[(10, 7, 14), float32] */;
    %293 = reshape(%291, newshape=[480]) /* ty=Tensor[(480), int32] */;
    %294 = @func_2174(%292, %293) /* ty=(Tensor[(10, 7, 14), bool], Tensor[(16, 10, 8), bool], Tensor[(4, 320), float32], Tensor[(1, 14), int64], Tensor[(480), int32], Tensor[(2, 12, 5), float32], Tensor[(72), float32]) */;
    %295 = @func_2773() /* ty=Tensor[(1, 6, 3), float32] */;
    %296 = %294.3;
    (%295, %296, meta[relay.Constant][20] /* ty=Tensor[(980), float32] */, %var_3502)
  };
  %297(%var_3515) /* ty=(Tensor[(1, 6, 3), float32], Tensor[(1, 14), int64], Tensor[(980), float32], Tensor[(480), int32]) */
}

def @func_2991(%var_2990: Tensor[(480), int32]) -> (Tensor[(1, 6, 3), float32], Tensor[(11, 6, 3), float32], Tensor[(198), float32], Tensor[(11, 6, 3), float32], Tensor[(3, 3, 8), bool], Tensor[(480), int32], Tensor[(4, 320), float32], Tensor[(1, 980), float32]) {
  %315 = fn (%var_2980: Tensor[(480), int32]) -> (Tensor[(1, 6, 3), float32], Tensor[(11, 6, 3), float32], Tensor[(198), float32], Tensor[(11, 6, 3), float32], Tensor[(3, 3, 8), bool], Tensor[(480), int32], Tensor[(4, 320), float32], Tensor[(1, 980), float32]) {
    %298 = cast(meta[relay.Constant][21] /* ty=Tensor[(198), float32] */, dtype="float32") /* ty=Tensor[(198), float32] */;
    %299 = reshape(%298, newshape=[11, 6, 3]) /* ty=Tensor[(11, 6, 3), float32] */;
    %300 = @func_2717(%299) /* ty=Tensor[(11, 6, 3), float32] */;
    %301 = cast(%300, dtype="float32") /* ty=Tensor[(11, 6, 3), float32] */;
    %302 = reshape(%301, newshape=[11, 6, 3]) /* ty=Tensor[(11, 6, 3), float32] */;
    %303 = cast(%var_2980, dtype="int32") /* ty=Tensor[(480), int32] */;
    %304 = reshape(%303, newshape=[6, 5, 16]) /* ty=Tensor[(6, 5, 16), int32] */;
    %305 = @func_695(%304) /* ty=(Tensor[(6, 5, 16), int32], Tensor[(3, 3, 8), bool], Tensor[(72), float32], Tensor[(3, 3, 8), bool]) */;
    %306 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 980), float32] */, dtype="float32") /* ty=Tensor[(1, 980), float32] */;
    %307 = cast(%var_2980, dtype="int32") /* ty=Tensor[(480), int32] */;
    %308 = reshape(%306, newshape=[10, 7, 14]) /* ty=Tensor[(10, 7, 14), float32] */;
    %309 = reshape(%307, newshape=[480]) /* ty=Tensor[(480), int32] */;
    %310 = @func_2174(%308, %309) /* ty=(Tensor[(10, 7, 14), bool], Tensor[(16, 10, 8), bool], Tensor[(4, 320), float32], Tensor[(1, 14), int64], Tensor[(480), int32], Tensor[(2, 12, 5), float32], Tensor[(72), float32]) */;
    %311 = @func_2773() /* ty=Tensor[(1, 6, 3), float32] */;
    %312 = @func_2717(%302) /* ty=Tensor[(11, 6, 3), float32] */;
    %313 = %305.1;
    %314 = %310.2;
    (%311, %300, meta[relay.Constant][21] /* ty=Tensor[(198), float32] */, %312, %313, %var_2980, %314, meta[relay.Constant][22] /* ty=Tensor[(1, 980), float32] */)
  };
  %315(%var_2990) /* ty=(Tensor[(1, 6, 3), float32], Tensor[(11, 6, 3), float32], Tensor[(198), float32], Tensor[(11, 6, 3), float32], Tensor[(3, 3, 8), bool], Tensor[(480), int32], Tensor[(4, 320), float32], Tensor[(1, 980), float32]) */
}

def @func_4141() -> (Tensor[(1, 6, 3), float32],) {
  @func_4139() /* ty=(Tensor[(1, 6, 3), float32],) */
}

def @func_6320(%var_6308: Tensor[(15, 8, 10), int32], %var_6309: Tensor[(15, 8, 10), int32]) -> (Tensor[(15, 8, 10), int32],) {
  %316 = cast(%var_6309, dtype="int32") /* ty=Tensor[(15, 8, 10), int32] */;
  %317 = shape_of(%var_6308, dtype="int32") /* ty=Tensor[(3), int32] */;
  %318 = cast(%var_6308, dtype="int32") /* ty=Tensor[(15, 8, 10), int32] */;
  %319 = dyn.reshape(%316, %317, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %320 = multiply(%318, %319) /* ty=Tensor[(15, 8, 10), int32] */;
  (%320,)
}

def @func_6064(%var_6060: Tensor[(11, 6, 3), float32], %var_6061: Tensor[(330), int32], %var_6062: Tensor[(1274), float32], %var_6063: Tensor[(11, 6, 3), float32]) -> (Tensor[(11, 6, 3), bool], Tensor[(1, 6, 3), float32], Tensor[(11, 2, 12), uint64], Tensor[(1, 6, 3), float32], Tensor[(11, 6, 3), float64], Tensor[(1, 6, 3), float32], Tensor[(14, 7, 13), int8], Tensor[(330), int32], Tensor[(1274), float32], Tensor[(11, 6, 3), float64], Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float64], Tensor[(11, 6, 3), uint8]) {
  @func_6058(%var_6060, %var_6061, %var_6062, %var_6063) /* ty=(Tensor[(11, 6, 3), bool], Tensor[(1, 6, 3), float32], Tensor[(11, 2, 12), uint64], Tensor[(1, 6, 3), float32], Tensor[(11, 6, 3), float64], Tensor[(1, 6, 3), float32], Tensor[(14, 7, 13), int8], Tensor[(330), int32], Tensor[(1274), float32], Tensor[(11, 6, 3), float64], Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float64], Tensor[(11, 6, 3), uint8]) */
}

def @func_3316() -> (Tensor[(1, 6, 3), float32],) {
  %322 = fn () -> (Tensor[(1, 6, 3), float32],) {
    %321 = @func_2412() /* ty=Tensor[(1, 6, 3), float32] */;
    (%321,)
  };
  %322() /* ty=(Tensor[(1, 6, 3), float32],) */
}

def @func_6933(%var_6900: Tensor[(3, 4, 4), float64]) -> (Tensor[(3, 4, 4), float64], Tensor[(1, 6, 3), float32]) {
  %323 = cast(meta[relay.Constant][23] /* ty=Tensor[(3, 4, 4), float64] */, dtype="float64") /* ty=Tensor[(3, 4, 4), float64] */;
  %324 = shape_of(%var_6900, dtype="int32") /* ty=Tensor[(3), int32] */;
  %325 = cast(%var_6900, dtype="float64") /* ty=Tensor[(3, 4, 4), float64] */;
  %326 = dyn.reshape(%323, %324, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %327 = floor_divide(%325, %326) /* ty=Tensor[(3, 4, 4), float64] */;
  %328 = cast(%327, dtype="float64") /* ty=Tensor[(3, 4, 4), float64] */;
  %329 = sin(%328) /* ty=Tensor[(3, 4, 4), float64] */;
  %330 = @func_3947() /* ty=Tensor[(1, 6, 3), float32] */;
  (%329, %330)
}

def @func_7131() -> Tensor[(1, 6, 3), float32] {
  %331 = @func_4949() /* ty=(Tensor[(1, 6, 3), float32],) */;
  %331.0
}

def @func_7272(%var_7252: Tensor[(12, 16, 16), float32], %var_7253: Tensor[(12, 16, 16), float32]) -> Tensor[(12, 16, 16), float64] {
  %332 = cast(%var_7253, dtype="float32") /* ty=Tensor[(12, 16, 16), float32] */;
  %333 = shape_of(%var_7252, dtype="int32") /* ty=Tensor[(3), int32] */;
  %334 = cast(%var_7252, dtype="float32") /* ty=Tensor[(12, 16, 16), float32] */;
  %335 = dyn.reshape(%332, %333, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %336 = divide(%334, %335) /* ty=Tensor[(12, 16, 16), float32] */;
  %337 = cast(%336, dtype="float64") /* ty=Tensor[(12, 16, 16), float64] */;
  erf(%337) /* ty=Tensor[(12, 16, 16), float64] */
}

def @func_5816(%var_5798: Tensor[(480), int32]) -> (Tensor[(1, 6, 3), float32], Tensor[(480), int32], Tensor[(1280), float32], Tensor[(14), int64], Tensor[(480), int32], Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32]) {
  %338 = cast(meta[relay.Constant][24] /* ty=Tensor[(1280), float32] */, dtype="float32") /* ty=Tensor[(1280), float32] */;
  %339 = cast(meta[relay.Constant][25] /* ty=Tensor[(14), int64] */, dtype="int64") /* ty=Tensor[(14), int64] */;
  %340 = cast(%var_5798, dtype="int32") /* ty=Tensor[(480), int32] */;
  %341 = cast(meta[relay.Constant][24] /* ty=Tensor[(1280), float32] */, dtype="float32") /* ty=Tensor[(1280), float32] */;
  %342 = reshape(%338, newshape=[16, 10, 8]) /* ty=Tensor[(16, 10, 8), float32] */;
  %343 = reshape(%339, newshape=[14]) /* ty=Tensor[(14), int64] */;
  %344 = reshape(%340, newshape=[480]) /* ty=Tensor[(480), int32] */;
  %345 = reshape(%341, newshape=[16, 10, 8]) /* ty=Tensor[(16, 10, 8), float32] */;
  %346 = @func_1634(%342, %343, %344, %345) /* ty=(Tensor[(16, 10, 8), float64], Tensor[(3, 3, 8), bool], Tensor[(14), int64], Tensor[(480), int32], Tensor[(2, 12, 5), float32], Tensor[(16, 10, 8), bool], Tensor[(3, 3, 8), float64], Tensor[(3, 3, 8), bool]) */;
  %347 = @func_5347() /* ty=(Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32]) */;
  %348 = @func_4719() /* ty=(Tensor[(1, 6, 3), float32],) */;
  %349 = @func_2393() /* ty=Tensor[(1, 6, 3), float32] */;
  %350 = %346.3;
  %351 = %347.1;
  %352 = %348.0;
  (%349, %350, meta[relay.Constant][24] /* ty=Tensor[(1280), float32] */, meta[relay.Constant][25] /* ty=Tensor[(14), int64] */, %var_5798, %351, %352)
}

def @func_5241(%var_5230: Tensor[(16, 80), float32], %var_5232: Tensor[(480), int32]) -> (Tensor[(?, 6, 3), bool], Tensor[(360, 2), float64], Tensor[(16, 10, 8), bool], Tensor[(16, 80), float32], Tensor[(14), int64], Tensor[(480), int32], Tensor[(?, 6, 3), bool]) {
  %353 = @func_4139() /* ty=(Tensor[(1, 6, 3), float32],) */;
  %354 = %353.0;
  %355 = @func_4671() /* ty=Tensor[(1, 6, 3), float32] */;
  %356 = cast(%355, dtype="bool") /* ty=Tensor[(1, 6, 3), bool] */;
  %357 = shape_of(%354, dtype="int32") /* ty=Tensor[(3), int32] */;
  %358 = cast(%354, dtype="bool") /* ty=Tensor[(1, 6, 3), bool] */;
  %359 = dyn.reshape(%356, %357, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %360 = cast(meta[relay.Constant][26] /* ty=Tensor[(720), uint32] */, dtype="uint32") /* ty=Tensor[(720), uint32] */;
  %361 = reshape(%360, newshape=[360, 2]) /* ty=Tensor[(360, 2), uint32] */;
  %362 = @func_2683(%361) /* ty=(Tensor[(1, 6, 3), float32], Tensor[(8, 10, 9), uint32], Tensor[(360, 2), bool], Tensor[(360, 2), float64]) */;
  %363 = %362.3;
  %364 = cast(meta[relay.Constant][26] /* ty=Tensor[(720), uint32] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %365 = shape_of(%363, dtype="int32") /* ty=Tensor[(2), int32] */;
  %366 = cast(%363, dtype="float64") /* ty=Tensor[(360, 2), float64] */;
  %367 = dyn.reshape(%364, %365, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %368 = cast(%var_5230, dtype="float32") /* ty=Tensor[(16, 80), float32] */;
  %369 = cast(meta[relay.Constant][27] /* ty=Tensor[(14), int64] */, dtype="int64") /* ty=Tensor[(14), int64] */;
  %370 = cast(%var_5232, dtype="int32") /* ty=Tensor[(480), int32] */;
  %371 = cast(%var_5230, dtype="float32") /* ty=Tensor[(16, 80), float32] */;
  %372 = reshape(%368, newshape=[16, 10, 8]) /* ty=Tensor[(16, 10, 8), float32] */;
  %373 = reshape(%369, newshape=[14]) /* ty=Tensor[(14), int64] */;
  %374 = reshape(%370, newshape=[480]) /* ty=Tensor[(480), int32] */;
  %375 = reshape(%371, newshape=[16, 10, 8]) /* ty=Tensor[(16, 10, 8), float32] */;
  %376 = @func_1634(%372, %373, %374, %375) /* ty=(Tensor[(16, 10, 8), float64], Tensor[(3, 3, 8), bool], Tensor[(14), int64], Tensor[(480), int32], Tensor[(2, 12, 5), float32], Tensor[(16, 10, 8), bool], Tensor[(3, 3, 8), float64], Tensor[(3, 3, 8), bool]) */;
  %377 = @func_3951() /* ty=Tensor[(1, 6, 3), float32] */;
  %378 = cast(%355, dtype="bool") /* ty=Tensor[(1, 6, 3), bool] */;
  %379 = shape_of(%377, dtype="int32") /* ty=Tensor[(3), int32] */;
  %380 = cast(%377, dtype="bool") /* ty=Tensor[(1, 6, 3), bool] */;
  %381 = dyn.reshape(%378, %379, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %382 = greater(%358, %359) /* ty=Tensor[(?, 6, 3), bool] */;
  %383 = power(%366, %367) /* ty=Tensor[(360, 2), float64] */;
  %384 = %376.5;
  %385 = less_equal(%380, %381) /* ty=Tensor[(?, 6, 3), bool] */;
  (%382, %383, %384, %var_5230, meta[relay.Constant][27] /* ty=Tensor[(14), int64] */, %var_5232, %385)
}

def @func_7219() -> Tensor[(1, 6, 3), float32] {
  %386 = fn () -> Tensor[(1, 6, 3), float32] {
    @func_3397() /* ty=Tensor[(1, 6, 3), float32] */
  };
  %386() /* ty=Tensor[(1, 6, 3), float32] */
}

def @func_3147(%var_3146: Tensor[(16, 12, 2), float32]) -> (Tensor[(16, 12, 2), float32],) {
  %389 = fn (%var_3135: Tensor[(16, 12, 2), float32]) -> (Tensor[(16, 12, 2), float32],) {
    %387 = cast(%var_3135, dtype="float32") /* ty=Tensor[(16, 12, 2), float32] */;
    %388 = atan(%387) /* ty=Tensor[(16, 12, 2), float32] */;
    (%388,)
  };
  %389(%var_3146) /* ty=(Tensor[(16, 12, 2), float32],) */
}

def @func_2773() -> Tensor[(1, 6, 3), float32] {
  %390 = @func_2412() /* ty=Tensor[(1, 6, 3), float32] */;
  %391 = cast(%390, dtype="float32") /* ty=Tensor[(1, 6, 3), float32] */;
  cosh(%391) /* ty=Tensor[(1, 6, 3), float32] */
}

def @func_397(%var_395: Tensor[(3, 3, 8), float32]) -> (Tensor[(3, 3, 8), bool],) {
  @func_394(%var_395) /* ty=(Tensor[(3, 3, 8), bool],) */
}

def @func_2420(%var_2414: Tensor[(16, 5, 5), int64], %var_2415: Tensor[(16, 5, 5), int64]) -> Tensor[(16, 5, 5), int64] {
  %392 = cast(%var_2415, dtype="int64") /* ty=Tensor[(16, 5, 5), int64] */;
  %393 = shape_of(%var_2414, dtype="int32") /* ty=Tensor[(3), int32] */;
  %394 = cast(%var_2414, dtype="int64") /* ty=Tensor[(16, 5, 5), int64] */;
  %395 = dyn.reshape(%392, %393, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_and(%394, %395) /* ty=Tensor[(16, 5, 5), int64] */
}

def @func_6160(%var_6159: Tensor[(1890), uint32]) -> (Tensor[(1, 6, 3), float32], Tensor[(?, 6, 3), bool], Tensor[(1890), uint32], Tensor[(1, 6, 3), float32]) {
  %404 = fn (%var_6151: Tensor[(1890), uint32]) -> (Tensor[(1, 6, 3), float32], Tensor[(?, 6, 3), bool], Tensor[(1890), uint32], Tensor[(1, 6, 3), float32]) {
    %396 = @func_4864() /* ty=(Tensor[(1, 6, 3), float32],) */;
    %397 = cast(%var_6151, dtype="uint32") /* ty=Tensor[(1890), uint32] */;
    %398 = reshape(%397, newshape=[1890]) /* ty=Tensor[(1890), uint32] */;
    %399 = @func_4261(%398) /* ty=(Tensor[(1890), uint32], Tensor[(?, 6, 3), int32], Tensor[(16, 6, 3), float32], Tensor[(288), float32], Tensor[(?, 6, 3), bool], Tensor[(11, 6, 3), bool], Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32], Tensor[(9, 15, 14), float32], Tensor[(360, 2), bool], Tensor[(720), uint32]) */;
    %400 = @func_5759() /* ty=(Tensor[(10, 6, 3), float32], Tensor[(1, 6, 3), float32]) */;
    %401 = %396.0;
    %402 = %399.4;
    %403 = %400.1;
    (%401, %402, %var_6151, %403)
  };
  %404(%var_6159) /* ty=(Tensor[(1, 6, 3), float32], Tensor[(?, 6, 3), bool], Tensor[(1890), uint32], Tensor[(1, 6, 3), float32]) */
}

def @func_1640(%var_1636: Tensor[(16, 10, 8), float32], %var_1637: Tensor[(14), int64], %var_1638: Tensor[(480), int32], %var_1639: Tensor[(16, 10, 8), float32]) -> (Tensor[(16, 10, 8), float64], Tensor[(3, 3, 8), bool], Tensor[(14), int64], Tensor[(480), int32], Tensor[(2, 12, 5), float32], Tensor[(16, 10, 8), bool], Tensor[(3, 3, 8), float64], Tensor[(3, 3, 8), bool]) {
  @func_1634(%var_1636, %var_1637, %var_1638, %var_1639) /* ty=(Tensor[(16, 10, 8), float64], Tensor[(3, 3, 8), bool], Tensor[(14), int64], Tensor[(480), int32], Tensor[(2, 12, 5), float32], Tensor[(16, 10, 8), bool], Tensor[(3, 3, 8), float64], Tensor[(3, 3, 8), bool]) */
}

def @func_4542(%var_4533: Tensor[(16, 3, 15), float64], %var_4537: Tensor[(360), uint64]) -> (Tensor[(16, 3, 15), float64], Tensor[(12, 10, 3), uint64], Tensor[(360), uint64]) {
  %405 = cast(%var_4533, dtype="float64") /* ty=Tensor[(16, 3, 15), float64] */;
  %406 = cast(%var_4537, dtype="uint64") /* ty=Tensor[(360), uint64] */;
  %407 = reshape(%406, newshape=[12, 10, 3]) /* ty=Tensor[(12, 10, 3), uint64] */;
  %408 = @func_1022(%407) /* ty=(Tensor[(12, 10, 3), uint64],) */;
  %409 = asinh(%405) /* ty=Tensor[(16, 3, 15), float64] */;
  %410 = %408.0;
  (%409, %410, %var_4537)
}

def @func_4950() -> (Tensor[(1, 6, 3), float32],) {
  %412 = fn () -> (Tensor[(1, 6, 3), float32],) {
    %411 = @func_4122() /* ty=Tensor[(1, 6, 3), float32] */;
    (%411,)
  };
  %412() /* ty=(Tensor[(1, 6, 3), float32],) */
}

def @func_6781() -> (Tensor[(3, 6, 3), uint16], Tensor[(3, 6, 3), float32]) {
  %420 = fn () -> (Tensor[(3, 6, 3), uint16], Tensor[(3, 6, 3), float32]) {
    %413 = @func_5031() /* ty=(Tensor[(1, 6, 3), float64],) */;
    %414 = %413.0;
    %415 = cast(%414, dtype="uint16") /* ty=Tensor[(1, 6, 3), uint16] */;
    %416 = cast(meta[relay.Constant][28] /* ty=Tensor[(3, 6, 3), float64] */, dtype="uint16") /* ty=Tensor[(3, 6, 3), uint16] */;
    %417 = cast(meta[relay.Constant][28] /* ty=Tensor[(3, 6, 3), float64] */, dtype="float32") /* ty=Tensor[(3, 6, 3), float32] */;
    %418 = minimum(%415, %416) /* ty=Tensor[(3, 6, 3), uint16] */;
    %419 = sigmoid(%417) /* ty=Tensor[(3, 6, 3), float32] */;
    (%418, %419)
  };
  %420() /* ty=(Tensor[(3, 6, 3), uint16], Tensor[(3, 6, 3), float32]) */
}

def @func_4866() -> (Tensor[(1, 6, 3), float32],) {
  @func_4864() /* ty=(Tensor[(1, 6, 3), float32],) */
}

def @func_6718() -> Tensor[(1, 6, 3), float32] {
  @func_6716() /* ty=Tensor[(1, 6, 3), float32] */
}

def @func_7133() -> Tensor[(1, 6, 3), float32] {
  @func_7131() /* ty=Tensor[(1, 6, 3), float32] */
}

def @func_2641(%var_2640: Tensor[(720), uint32]) -> (Tensor[(9, 15, 14), float32], Tensor[(1890), uint32], Tensor[(480), int32], Tensor[(480), int32], Tensor[(2, 13, 5), float32], Tensor[(128), uint16], Tensor[(8, 10, 9), float64], Tensor[(720), uint32], Tensor[(?, 6, 3), uint8], Tensor[(2, 13, 5), float32]) {
  %454 = fn (%var_2602: Tensor[(720), uint32]) -> (Tensor[(9, 15, 14), float32], Tensor[(1890), uint32], Tensor[(480), int32], Tensor[(480), int32], Tensor[(2, 13, 5), float32], Tensor[(128), uint16], Tensor[(8, 10, 9), float64], Tensor[(720), uint32], Tensor[(?, 6, 3), uint8], Tensor[(2, 13, 5), float32]) {
    %421 = cast(meta[relay.Constant][29] /* ty=Tensor[(1890), uint32] */, dtype="uint32") /* ty=Tensor[(1890), uint32] */;
    %422 = cast(meta[relay.Constant][29] /* ty=Tensor[(1890), uint32] */, dtype="uint32") /* ty=Tensor[(1890), uint32] */;
    %423 = reshape(%421, newshape=[9, 15, 14]) /* ty=Tensor[(9, 15, 14), uint32] */;
    %424 = reshape(%422, newshape=[9, 15, 14]) /* ty=Tensor[(9, 15, 14), uint32] */;
    %425 = cast(meta[relay.Constant][30] /* ty=Tensor[(480), int32] */, dtype="int32") /* ty=Tensor[(480), int32] */;
    %426 = reshape(%425, newshape=[480]) /* ty=Tensor[(480), int32] */;
    %427 = @func_1117(%426) /* ty=(Tensor[(72), float32], Tensor[(480), int32], Tensor[(2, 12, 5), float32]) */;
    %428 = cast(meta[relay.Constant][31] /* ty=Tensor[(128), uint16] */, dtype="uint16") /* ty=Tensor[(128), uint16] */;
    %429 = reshape(%428, newshape=[4, 2, 16]) /* ty=Tensor[(4, 2, 16), uint16] */;
    %430 = @func_2339(%429) /* ty=(Tensor[(4, 2, 16), uint16], Tensor[(2, 13, 5), float32], Tensor[(14), int64], Tensor[(480), int32]) */;
    %431 = cast(%var_2602, dtype="uint32") /* ty=Tensor[(720), uint32] */;
    %432 = cast(%var_2602, dtype="uint32") /* ty=Tensor[(720), uint32] */;
    %433 = reshape(%431, newshape=[8, 10, 9]) /* ty=Tensor[(8, 10, 9), uint32] */;
    %434 = reshape(%432, newshape=[8, 10, 9]) /* ty=Tensor[(8, 10, 9), uint32] */;
    %435 = @func_2229(%433, %434) /* ty=(Tensor[(8, 10, 9), uint32], Tensor[(8, 10, 9), float64]) */;
    %436 = @func_2412() /* ty=Tensor[(1, 6, 3), float32] */;
    %437 = cast(%436, dtype="float64") /* ty=Tensor[(1, 6, 3), float64] */;
    %438 = acos(%437) /* ty=Tensor[(1, 6, 3), float64] */;
    %439 = cast(%436, dtype="uint8") /* ty=Tensor[(1, 6, 3), uint8] */;
    %440 = shape_of(%438, dtype="int32") /* ty=Tensor[(3), int32] */;
    %441 = cast(%438, dtype="uint8") /* ty=Tensor[(1, 6, 3), uint8] */;
    %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %443 = %430.1;
    %444 = cast(%443, dtype="float32") /* ty=Tensor[(2, 13, 5), float32] */;
    %445 = cast(%443, dtype="float32") /* ty=Tensor[(2, 13, 5), float32] */;
    %446 = reshape(%444, newshape=[2, 13, 5]) /* ty=Tensor[(2, 13, 5), float32] */;
    %447 = reshape(%445, newshape=[2, 13, 5]) /* ty=Tensor[(2, 13, 5), float32] */;
    %448 = @func_168(%446, %447) /* ty=(Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), float32]) */;
    %449 = @func_807(%423, %424) /* ty=Tensor[(9, 15, 14), float32] */;
    %450 = %427.1;
    %451 = %435.1;
    %452 = right_shift(%441, %442) /* ty=Tensor[(?, 6, 3), uint8] */;
    %453 = %448.2;
    (%449, meta[relay.Constant][29] /* ty=Tensor[(1890), uint32] */, %450, meta[relay.Constant][30] /* ty=Tensor[(480), int32] */, %443, meta[relay.Constant][31] /* ty=Tensor[(128), uint16] */, %451, %var_2602, %452, %453)
  };
  %454(%var_2640) /* ty=(Tensor[(9, 15, 14), float32], Tensor[(1890), uint32], Tensor[(480), int32], Tensor[(480), int32], Tensor[(2, 13, 5), float32], Tensor[(128), uint16], Tensor[(8, 10, 9), float64], Tensor[(720), uint32], Tensor[(?, 6, 3), uint8], Tensor[(2, 13, 5), float32]) */
}

def @func_6716() -> Tensor[(1, 6, 3), float32] {
  %455 = @func_4864() /* ty=(Tensor[(1, 6, 3), float32],) */;
  %455.0
}

def @func_4652(%var_4642: Tensor[(5, 11, 11), float64], %var_4648: Tensor[(5, 11, 11), float64]) -> (Tensor[(5, 11, 11), bool],) {
  %456 = cast(%var_4642, dtype="float64") /* ty=Tensor[(5, 11, 11), float64] */;
  %457 = asinh(%456) /* ty=Tensor[(5, 11, 11), float64] */;
  %458 = cast(%var_4648, dtype="bool") /* ty=Tensor[(5, 11, 11), bool] */;
  %459 = shape_of(%457, dtype="int32") /* ty=Tensor[(3), int32] */;
  %460 = cast(%457, dtype="bool") /* ty=Tensor[(5, 11, 11), bool] */;
  %461 = dyn.reshape(%458, %459, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %462 = less(%460, %461) /* ty=Tensor[(5, 11, 11), bool] */;
  (%462,)
}

def @func_5245(%var_5243: Tensor[(16, 80), float32], %var_5244: Tensor[(480), int32]) -> (Tensor[(?, 6, 3), bool], Tensor[(360, 2), float64], Tensor[(16, 10, 8), bool], Tensor[(16, 80), float32], Tensor[(14), int64], Tensor[(480), int32], Tensor[(?, 6, 3), bool]) {
  @func_5241(%var_5243, %var_5244) /* ty=(Tensor[(?, 6, 3), bool], Tensor[(360, 2), float64], Tensor[(16, 10, 8), bool], Tensor[(16, 80), float32], Tensor[(14), int64], Tensor[(480), int32], Tensor[(?, 6, 3), bool]) */
}

def @func_3887(%var_3885: Tensor[(16, 6, 3), float32]) -> (Tensor[(16, 6, 3), float32], Tensor[(12, 6, 3), float32]) {
  @func_3884(%var_3885) /* ty=(Tensor[(16, 6, 3), float32], Tensor[(12, 6, 3), float32]) */
}

def @func_4101() -> Tensor[(1, 6, 3), float32] {
  @func_3947() /* ty=Tensor[(1, 6, 3), float32] */
}

def @func_3884(%var_3859: Tensor[(16, 6, 3), float32]) -> (Tensor[(16, 6, 3), float32], Tensor[(12, 6, 3), float32]) {
  %463 = @func_2412() /* ty=Tensor[(1, 6, 3), float32] */;
  %464 = cast(%463, dtype="float32") /* ty=Tensor[(1, 6, 3), float32] */;
  %465 = cast(%var_3859, dtype="float32") /* ty=Tensor[(16, 6, 3), float32] */;
  %466 = @func_2393() /* ty=Tensor[(1, 6, 3), float32] */;
  %467 = cast(%466, dtype="float32") /* ty=Tensor[(1, 6, 3), float32] */;
  %468 = cast(meta[relay.Constant][32] /* ty=Tensor[(12, 6, 3), float32] */, dtype="float32") /* ty=Tensor[(12, 6, 3), float32] */;
  %469 = floor_mod(%464, %465) /* ty=Tensor[(16, 6, 3), float32] */;
  %470 = mod(%467, %468) /* ty=Tensor[(12, 6, 3), float32] */;
  (%469, %470)
}

def @func_5819(%var_5817: Tensor[(480), int32]) -> (Tensor[(1, 6, 3), float32], Tensor[(480), int32], Tensor[(1280), float32], Tensor[(14), int64], Tensor[(480), int32], Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32]) {
  @func_5816(%var_5817) /* ty=(Tensor[(1, 6, 3), float32], Tensor[(480), int32], Tensor[(1280), float32], Tensor[(14), int64], Tensor[(480), int32], Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32]) */
}

def @func_3471(%var_3469: Tensor[(66, 4), uint64]) -> (Tensor[(1, 6, 3), float32], Tensor[(11, 2, 12), uint64], Tensor[(66, 4), uint64]) {
  %471 = cast(%var_3469, dtype="uint64") /* ty=Tensor[(66, 4), uint64] */;
  %472 = cast(%var_3469, dtype="uint64") /* ty=Tensor[(66, 4), uint64] */;
  %473 = reshape(%471, newshape=[11, 2, 12]) /* ty=Tensor[(11, 2, 12), uint64] */;
  %474 = reshape(%472, newshape=[11, 2, 12]) /* ty=Tensor[(11, 2, 12), uint64] */;
  %475 = @func_2412() /* ty=Tensor[(1, 6, 3), float32] */;
  %476 = @func_2747(%473, %474) /* ty=Tensor[(11, 2, 12), uint64] */;
  (%475, %476, %var_3469)
}

def @func_2413() -> Tensor[(1, 6, 3), float32] {
  %477 = fn () -> Tensor[(1, 6, 3), float32] {
    @func_2393() /* ty=Tensor[(1, 6, 3), float32] */
  };
  %477() /* ty=Tensor[(1, 6, 3), float32] */
}

def @func_7163() -> (Tensor[(1, 6, 3), float32],) {
  %478 = @func_5347() /* ty=(Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32]) */;
  %479 = %478.1;
  (%479,)
}

def @func_5562() -> Tensor[(1, 6, 3), float32] {
  %481 = fn () -> Tensor[(1, 6, 3), float32] {
    %480 = @func_4453() /* ty=(Tensor[(1, 6, 3), float32],) */;
    %480.0
  };
  %481() /* ty=Tensor[(1, 6, 3), float32] */
}

def @func_4123() -> Tensor[(1, 6, 3), float32] {
  %482 = fn () -> Tensor[(1, 6, 3), float32] {
    @func_2412() /* ty=Tensor[(1, 6, 3), float32] */
  };
  %482() /* ty=Tensor[(1, 6, 3), float32] */
}

def @func_1523(%var_1521: Tensor[(14, 7, 13), float32]) -> Tensor[(14, 7, 13), int8] {
  @func_1520(%var_1521) /* ty=Tensor[(14, 7, 13), int8] */
}

def @func_1520(%var_1510: Tensor[(14, 7, 13), float32]) -> Tensor[(14, 7, 13), int8] {
  %483 = cast(meta[relay.Constant][33] /* ty=Tensor[(14, 7, 13), float32] */, dtype="float32") /* ty=Tensor[(14, 7, 13), float32] */;
  %484 = tan(%483) /* ty=Tensor[(14, 7, 13), float32] */;
  %485 = cast(%var_1510, dtype="uint32") /* ty=Tensor[(14, 7, 13), uint32] */;
  %486 = shape_of(%484, dtype="int32") /* ty=Tensor[(3), int32] */;
  %487 = cast(%484, dtype="uint32") /* ty=Tensor[(14, 7, 13), uint32] */;
  %488 = dyn.reshape(%485, %486, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %489 = multiply(%487, %488) /* ty=Tensor[(14, 7, 13), uint32] */;
  %490 = cast(%489, dtype="int8") /* ty=Tensor[(14, 7, 13), int8] */;
  %491 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(14, 7, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %492 = cast(meta[relay.Constant][33] /* ty=Tensor[(14, 7, 13), float32] */, dtype="int8") /* ty=Tensor[(14, 7, 13), int8] */;
  %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  bitwise_or(%492, %493) /* ty=Tensor[(14, 7, 13), int8] */
}

def @func_695(%var_652: Tensor[(6, 5, 16), int32]) -> (Tensor[(6, 5, 16), int32], Tensor[(3, 3, 8), bool], Tensor[(72), float32], Tensor[(3, 3, 8), bool]) {
  %494 = cast(%var_652, dtype="int32") /* ty=Tensor[(6, 5, 16), int32] */;
  %495 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(6, 5, 16), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %496 = cast(meta[relay.Constant][34] /* ty=Tensor[(6, 5, 16), int32] */, dtype="int32") /* ty=Tensor[(6, 5, 16), int32] */;
  %497 = dyn.reshape(%494, %495, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %498 = cast(meta[relay.Constant][35] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %499 = reshape(%498, newshape=[3, 3, 8]) /* ty=Tensor[(3, 3, 8), float32] */;
  %500 = @func_394(%499) /* ty=(Tensor[(3, 3, 8), bool],) */;
  %501 = cast(meta[relay.Constant][35] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %502 = reshape(%501, newshape=[3, 3, 8]) /* ty=Tensor[(3, 3, 8), float32] */;
  %503 = @func_394(%502) /* ty=(Tensor[(3, 3, 8), bool],) */;
  %504 = logical_xor(%496, %497) /* ty=Tensor[(6, 5, 16), int32] */;
  %505 = %500.0;
  %506 = %503.0;
  (%504, %505, meta[relay.Constant][35] /* ty=Tensor[(72), float32] */, %506)
}

def @func_5630() -> Tensor[(1, 6, 3), float32] {
  @func_2773() /* ty=Tensor[(1, 6, 3), float32] */
}

def @func_6671(%var_6669: Tensor[(264), uint64], %var_6670: Tensor[(1, 330), int32]) -> (Tensor[(12, 6, 3), int16], Tensor[(330), int32], Tensor[(264), uint64], Tensor[(1, 330), int32], Tensor[(1274), float32], Tensor[(1, 6, 3), float32]) {
  @func_6667(%var_6669, %var_6670) /* ty=(Tensor[(12, 6, 3), int16], Tensor[(330), int32], Tensor[(264), uint64], Tensor[(1, 330), int32], Tensor[(1274), float32], Tensor[(1, 6, 3), float32]) */
}

def @func_4347() -> (Tensor[(1, 6, 3), float32],) {
  %508 = fn () -> (Tensor[(1, 6, 3), float32],) {
    %507 = @func_4101() /* ty=Tensor[(1, 6, 3), float32] */;
    (%507,)
  };
  %508() /* ty=(Tensor[(1, 6, 3), float32],) */
}

def @func_4608(%var_4607: Tensor[(4, 8, 5), float64]) -> (Tensor[(4, 8, 5), float64], Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32]) {
  %516 = fn (%var_4589: Tensor[(4, 8, 5), float64]) -> (Tensor[(4, 8, 5), float64], Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32]) {
    %509 = cast(%var_4589, dtype="float64") /* ty=Tensor[(4, 8, 5), float64] */;
    %510 = log(%509) /* ty=Tensor[(4, 8, 5), float64] */;
    %511 = cast(%510, dtype="float64") /* ty=Tensor[(4, 8, 5), float64] */;
    %512 = @func_4164() /* ty=(Tensor[(1, 6, 3), float32],) */;
    %513 = log2(%511) /* ty=Tensor[(4, 8, 5), float64] */;
    %514 = %512.0;
    %515 = @func_2773() /* ty=Tensor[(1, 6, 3), float32] */;
    (%513, %514, %515)
  };
  %516(%var_4607) /* ty=(Tensor[(4, 8, 5), float64], Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32]) */
}

def @func_3474(%var_3472: Tensor[(66, 4), uint64]) -> (Tensor[(1, 6, 3), float32], Tensor[(11, 2, 12), uint64], Tensor[(66, 4), uint64]) {
  @func_3471(%var_3472) /* ty=(Tensor[(1, 6, 3), float32], Tensor[(11, 2, 12), uint64], Tensor[(66, 4), uint64]) */
}

def @func_4864() -> (Tensor[(1, 6, 3), float32],) {
  %517 = @func_3397() /* ty=Tensor[(1, 6, 3), float32] */;
  (%517,)
}

def @func_4672() -> Tensor[(1, 6, 3), float32] {
  %518 = fn () -> Tensor[(1, 6, 3), float32] {
    @func_4101() /* ty=Tensor[(1, 6, 3), float32] */
  };
  %518() /* ty=Tensor[(1, 6, 3), float32] */
}

def @func_5455() -> (Tensor[(1, 6, 3), float64],) {
  %519 = @func_4420() /* ty=Tensor[(1, 6, 3), float64] */;
  (%519,)
}

def @func_3953() -> Tensor[(1, 6, 3), float32] {
  @func_3951() /* ty=Tensor[(1, 6, 3), float32] */
}

def @func_4139() -> (Tensor[(1, 6, 3), float32],) {
  %520 = @func_4101() /* ty=Tensor[(1, 6, 3), float32] */;
  (%520,)
}

def @func_5521(%var_5520: Tensor[(480), int32]) -> (Tensor[(400), int64], Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32], Tensor[(72), float32], Tensor[(480), int32], Tensor[(1, 6, 3), float32]) {
  %531 = fn (%var_5501: Tensor[(480), int32]) -> (Tensor[(400), int64], Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32], Tensor[(72), float32], Tensor[(480), int32], Tensor[(1, 6, 3), float32]) {
    %521 = @func_4522() /* ty=(Tensor[(1, 6, 3), float32], Tensor[(16, 5, 5), int64], Tensor[(400), int64], Tensor[(1, 6, 3), float32], Tensor[(11, 2, 12), uint64], Tensor[(132, 2), uint64], Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32]) */;
    %522 = @func_4864() /* ty=(Tensor[(1, 6, 3), float32],) */;
    %523 = cast(%var_5501, dtype="int32") /* ty=Tensor[(480), int32] */;
    %524 = reshape(%523, newshape=[480]) /* ty=Tensor[(480), int32] */;
    %525 = @func_1117(%524) /* ty=(Tensor[(72), float32], Tensor[(480), int32], Tensor[(2, 12, 5), float32]) */;
    %526 = %521.2;
    %527 = %522.0;
    %528 = @func_4671() /* ty=Tensor[(1, 6, 3), float32] */;
    %529 = %525.0;
    %530 = @func_2412() /* ty=Tensor[(1, 6, 3), float32] */;
    (%526, %527, %528, %529, %var_5501, %530)
  };
  %531(%var_5520) /* ty=(Tensor[(400), int64], Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32], Tensor[(72), float32], Tensor[(480), int32], Tensor[(1, 6, 3), float32]) */
}

def @func_6884(%var_6883: Tensor[(5, 12, 10), int8]) -> (Tensor[(5, 12, 10), int8],) {
  %537 = fn (%var_6878: Tensor[(5, 12, 10), int8]) -> (Tensor[(5, 12, 10), int8],) {
    %532 = cast(%var_6878, dtype="int8") /* ty=Tensor[(5, 12, 10), int8] */;
    %533 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(5, 12, 10), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %534 = cast(meta[relay.Constant][36] /* ty=Tensor[(5, 12, 10), int8] */, dtype="int8") /* ty=Tensor[(5, 12, 10), int8] */;
    %535 = dyn.reshape(%532, %533, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %536 = logical_xor(%534, %535) /* ty=Tensor[(5, 12, 10), int8] */;
    (%536,)
  };
  %537(%var_6883) /* ty=(Tensor[(5, 12, 10), int8],) */
}

def @func_394(%var_388: Tensor[(3, 3, 8), float32]) -> (Tensor[(3, 3, 8), bool],) {
  %538 = cast(%var_388, dtype="bool") /* ty=Tensor[(3, 3, 8), bool] */;
  %539 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(3, 3, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %540 = cast(meta[relay.Constant][37] /* ty=Tensor[(3, 3, 8), float32] */, dtype="bool") /* ty=Tensor[(3, 3, 8), bool] */;
  %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %542 = not_equal(%540, %541) /* ty=Tensor[(3, 3, 8), bool] */;
  (%542,)
}

def @func_3076(%var_3074: Tensor[(128), uint16], %var_3075: Tensor[(14), int64]) -> (Tensor[(6, 5, 16), int32], Tensor[(480), int32], Tensor[(1, 6, 3), float64], Tensor[(2, 13, 5), float32], Tensor[(128), int8], Tensor[(2, 13, 5), float32], Tensor[(14), int64]) {
  @func_3072(%var_3074, %var_3075) /* ty=(Tensor[(6, 5, 16), int32], Tensor[(480), int32], Tensor[(1, 6, 3), float64], Tensor[(2, 13, 5), float32], Tensor[(128), int8], Tensor[(2, 13, 5), float32], Tensor[(14), int64]) */
}

def @func_2177(%var_2175: Tensor[(10, 7, 14), float32], %var_2176: Tensor[(480), int32]) -> (Tensor[(10, 7, 14), bool], Tensor[(16, 10, 8), bool], Tensor[(4, 320), float32], Tensor[(1, 14), int64], Tensor[(480), int32], Tensor[(2, 12, 5), float32], Tensor[(72), float32]) {
  %566 = fn (%var_2149: Tensor[(10, 7, 14), float32], %var_2156: Tensor[(480), int32]) -> (Tensor[(10, 7, 14), bool], Tensor[(16, 10, 8), bool], Tensor[(4, 320), float32], Tensor[(1, 14), int64], Tensor[(480), int32], Tensor[(2, 12, 5), float32], Tensor[(72), float32]) {
    %543 = cast(%var_2149, dtype="bool") /* ty=Tensor[(10, 7, 14), bool] */;
    %544 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(10, 7, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %545 = cast(meta[relay.Constant][38] /* ty=Tensor[(10, 7, 14), float32] */, dtype="bool") /* ty=Tensor[(10, 7, 14), bool] */;
    %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %547 = cast(meta[relay.Constant][39] /* ty=Tensor[(4, 320), float32] */, dtype="float32") /* ty=Tensor[(4, 320), float32] */;
    %548 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 14), int64] */, dtype="int64") /* ty=Tensor[(1, 14), int64] */;
    %549 = cast(%var_2156, dtype="int32") /* ty=Tensor[(480), int32] */;
    %550 = cast(meta[relay.Constant][39] /* ty=Tensor[(4, 320), float32] */, dtype="float32") /* ty=Tensor[(4, 320), float32] */;
    %551 = reshape(%547, newshape=[16, 10, 8]) /* ty=Tensor[(16, 10, 8), float32] */;
    %552 = reshape(%548, newshape=[14]) /* ty=Tensor[(14), int64] */;
    %553 = reshape(%549, newshape=[480]) /* ty=Tensor[(480), int32] */;
    %554 = reshape(%550, newshape=[16, 10, 8]) /* ty=Tensor[(16, 10, 8), float32] */;
    %555 = @func_1634(%551, %552, %553, %554) /* ty=(Tensor[(16, 10, 8), float64], Tensor[(3, 3, 8), bool], Tensor[(14), int64], Tensor[(480), int32], Tensor[(2, 12, 5), float32], Tensor[(16, 10, 8), bool], Tensor[(3, 3, 8), float64], Tensor[(3, 3, 8), bool]) */;
    %556 = cast(%var_2156, dtype="int32") /* ty=Tensor[(480), int32] */;
    %557 = reshape(%556, newshape=[480]) /* ty=Tensor[(480), int32] */;
    %558 = @func_1117(%557) /* ty=(Tensor[(72), float32], Tensor[(480), int32], Tensor[(2, 12, 5), float32]) */;
    %559 = cast(%var_2156, dtype="int32") /* ty=Tensor[(480), int32] */;
    %560 = reshape(%559, newshape=[480]) /* ty=Tensor[(480), int32] */;
    %561 = @func_1117(%560) /* ty=(Tensor[(72), float32], Tensor[(480), int32], Tensor[(2, 12, 5), float32]) */;
    %562 = less(%545, %546) /* ty=Tensor[(10, 7, 14), bool] */;
    %563 = %555.5;
    %564 = %558.2;
    %565 = %561.0;
    (%562, %563, meta[relay.Constant][39] /* ty=Tensor[(4, 320), float32] */, meta[relay.Constant][40] /* ty=Tensor[(1, 14), int64] */, %var_2156, %564, %565)
  };
  %566(%var_2175, %var_2176) /* ty=(Tensor[(10, 7, 14), bool], Tensor[(16, 10, 8), bool], Tensor[(4, 320), float32], Tensor[(1, 14), int64], Tensor[(480), int32], Tensor[(2, 12, 5), float32], Tensor[(72), float32]) */
}

def @func_5348() -> (Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32]) {
  %570 = fn () -> (Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32]) {
    %567 = @func_4139() /* ty=(Tensor[(1, 6, 3), float32],) */;
    %568 = @func_5010() /* ty=Tensor[(1, 6, 3), float32] */;
    %569 = %567.0;
    (%568, %569)
  };
  %570() /* ty=(Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32]) */
}

def @func_1543(%var_1530: Tensor[(5, 6, 11), int32], %var_1531: Tensor[(5, 6, 11), int32], %var_1540: Tensor[(1274), float32]) -> (Tensor[(5, 6, 11), bool], Tensor[(5, 6, 11), uint8], Tensor[(14, 7, 13), int8], Tensor[(1274), float32]) {
  %571 = cast(%var_1531, dtype="bool") /* ty=Tensor[(5, 6, 11), bool] */;
  %572 = shape_of(%var_1530, dtype="int32") /* ty=Tensor[(3), int32] */;
  %573 = cast(%var_1530, dtype="bool") /* ty=Tensor[(5, 6, 11), bool] */;
  %574 = dyn.reshape(%571, %572, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %575 = cast(%var_1530, dtype="uint8") /* ty=Tensor[(5, 6, 11), uint8] */;
  %576 = shape_of(%var_1531, dtype="int32") /* ty=Tensor[(3), int32] */;
  %577 = cast(%var_1531, dtype="uint8") /* ty=Tensor[(5, 6, 11), uint8] */;
  %578 = dyn.reshape(%575, %576, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %579 = cast(%var_1540, dtype="float32") /* ty=Tensor[(1274), float32] */;
  %580 = reshape(%579, newshape=[14, 7, 13]) /* ty=Tensor[(14, 7, 13), float32] */;
  %581 = equal(%573, %574) /* ty=Tensor[(5, 6, 11), bool] */;
  %582 = right_shift(%577, %578) /* ty=Tensor[(5, 6, 11), uint8] */;
  %583 = @func_1520(%580) /* ty=Tensor[(14, 7, 13), int8] */;
  (%581, %582, %583, %var_1540)
}

def @func_171(%var_169: Tensor[(2, 13, 5), float32], %var_170: Tensor[(2, 13, 5), float32]) -> (Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), float32]) {
  %593 = fn (%var_140: Tensor[(2, 13, 5), float32], %var_141: Tensor[(2, 13, 5), float32]) -> (Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), float32]) {
    %584 = cast(%var_141, dtype="float32") /* ty=Tensor[(2, 13, 5), float32] */;
    %585 = shape_of(%var_140, dtype="int32") /* ty=Tensor[(3), int32] */;
    %586 = cast(%var_140, dtype="float32") /* ty=Tensor[(2, 13, 5), float32] */;
    %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %588 = cast(%var_140, dtype="float32") /* ty=Tensor[(2, 13, 5), float32] */;
    %589 = cast(%var_141, dtype="float32") /* ty=Tensor[(2, 13, 5), float32] */;
    %590 = power(%586, %587) /* ty=Tensor[(2, 13, 5), float32] */;
    %591 = cosh(%588) /* ty=Tensor[(2, 13, 5), float32] */;
    %592 = sin(%589) /* ty=Tensor[(2, 13, 5), float32] */;
    (%590, %591, %592)
  };
  %593(%var_169, %var_170) /* ty=(Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), float32]) */
}

def @func_7048(%var_7029: Tensor[(1890), uint32]) -> (Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32], Tensor[(1890), uint32], Tensor[(1890), uint32]) {
  %594 = cast(%var_7029, dtype="uint32") /* ty=Tensor[(1890), uint32] */;
  %595 = reshape(%594, newshape=[1890]) /* ty=Tensor[(1890), uint32] */;
  %596 = @func_5168(%595) /* ty=(Tensor[(1, 6, 3), float32], Tensor[(1890), uint32], Tensor[(1890), uint32]) */;
  %597 = @func_6716() /* ty=Tensor[(1, 6, 3), float32] */;
  %598 = @func_4671() /* ty=Tensor[(1, 6, 3), float32] */;
  %599 = %596.1;
  (%597, %598, %599, %var_7029)
}

def @func_6324(%var_6322: Tensor[(15, 8, 10), int32], %var_6323: Tensor[(15, 8, 10), int32]) -> (Tensor[(15, 8, 10), int32],) {
  @func_6320(%var_6322, %var_6323) /* ty=(Tensor[(15, 8, 10), int32],) */
}

def @func_3758(%var_3756: Tensor[(14), int64], %var_3757: Tensor[(480), int32]) -> (Tensor[(1, 6, 3), float32], Tensor[(66, 4), uint64], Tensor[(264), uint64], Tensor[(14), int64], Tensor[(480), int32], Tensor[(1, 128), uint16], Tensor[(126, 1), float32], Tensor[(14), int64], Tensor[(2, 13, 5), bool], Tensor[(128), int8]) {
  %639 = fn (%var_3700: Tensor[(14), int64], %var_3701: Tensor[(480), int32]) -> (Tensor[(1, 6, 3), float32], Tensor[(66, 4), uint64], Tensor[(264), uint64], Tensor[(14), int64], Tensor[(480), int32], Tensor[(1, 128), uint16], Tensor[(126, 1), float32], Tensor[(14), int64], Tensor[(2, 13, 5), bool], Tensor[(128), int8]) {
    %600 = @func_3315() /* ty=(Tensor[(1, 6, 3), float32],) */;
    %601 = cast(meta[relay.Constant][41] /* ty=Tensor[(264), uint64] */, dtype="uint64") /* ty=Tensor[(264), uint64] */;
    %602 = reshape(%601, newshape=[66, 4]) /* ty=Tensor[(66, 4), uint64] */;
    %603 = @func_3471(%602) /* ty=(Tensor[(1, 6, 3), float32], Tensor[(11, 2, 12), uint64], Tensor[(66, 4), uint64]) */;
    %604 = cast(meta[relay.Constant][42] /* ty=Tensor[(126, 1), float32] */, dtype="float32") /* ty=Tensor[(126, 1), float32] */;
    %605 = reshape(%604, newshape=[7, 6, 3]) /* ty=Tensor[(7, 6, 3), float32] */;
    %606 = @func_3247(%605) /* ty=(Tensor[(1, 128), uint16], Tensor[(8, 10, 9), uint32], Tensor[(720), uint32], Tensor[(7, 6, 3), int8], Tensor[(2, 13, 5), float32]) */;
    %607 = %606.0;
    %608 = cast(%607, dtype="uint16") /* ty=Tensor[(1, 128), uint16] */;
    %609 = cast(%var_3700, dtype="int64") /* ty=Tensor[(14), int64] */;
    %610 = reshape(%608, newshape=[128]) /* ty=Tensor[(128), uint16] */;
    %611 = reshape(%609, newshape=[14]) /* ty=Tensor[(14), int64] */;
    %612 = @func_3072(%610, %611) /* ty=(Tensor[(6, 5, 16), int32], Tensor[(480), int32], Tensor[(1, 6, 3), float64], Tensor[(2, 13, 5), float32], Tensor[(128), int8], Tensor[(2, 13, 5), float32], Tensor[(14), int64]) */;
    %613 = cast(%var_3700, dtype="int64") /* ty=Tensor[(14), int64] */;
    %614 = cast(%var_3701, dtype="int32") /* ty=Tensor[(480), int32] */;
    %615 = reshape(%613, newshape=[7, 2]) /* ty=Tensor[(7, 2), int64] */;
    %616 = reshape(%614, newshape=[480]) /* ty=Tensor[(480), int32] */;
    %617 = @func_1238(%615, %616) /* ty=(Tensor[(7, 2), int64], Tensor[(2, 13, 5), float32], Tensor[(3, 3, 8), bool], Tensor[(480), int32], Tensor[(130), float32], Tensor[(3, 3, 8), bool]) */;
    %618 = %617.1;
    %619 = cast(%618, dtype="float32") /* ty=Tensor[(2, 13, 5), float32] */;
    %620 = cast(%618, dtype="float32") /* ty=Tensor[(2, 13, 5), float32] */;
    %621 = reshape(%619, newshape=[2, 13, 5]) /* ty=Tensor[(2, 13, 5), float32] */;
    %622 = reshape(%620, newshape=[2, 13, 5]) /* ty=Tensor[(2, 13, 5), float32] */;
    %623 = @func_168(%621, %622) /* ty=(Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), float32], Tensor[(2, 13, 5), float32]) */;
    %624 = %623.0;
    %625 = cast(%624, dtype="bool") /* ty=Tensor[(2, 13, 5), bool] */;
    %626 = shape_of(%618, dtype="int32") /* ty=Tensor[(3), int32] */;
    %627 = cast(%618, dtype="bool") /* ty=Tensor[(2, 13, 5), bool] */;
    %628 = dyn.reshape(%625, %626, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %629 = cast(%607, dtype="uint16") /* ty=Tensor[(1, 128), uint16] */;
    %630 = cast(%var_3700, dtype="int64") /* ty=Tensor[(14), int64] */;
    %631 = reshape(%629, newshape=[128]) /* ty=Tensor[(128), uint16] */;
    %632 = reshape(%630, newshape=[14]) /* ty=Tensor[(14), int64] */;
    %633 = @func_3072(%631, %632) /* ty=(Tensor[(6, 5, 16), int32], Tensor[(480), int32], Tensor[(1, 6, 3), float64], Tensor[(2, 13, 5), float32], Tensor[(128), int8], Tensor[(2, 13, 5), float32], Tensor[(14), int64]) */;
    %634 = %600.0;
    %635 = %603.2;
    %636 = %612.6;
    %637 = less(%627, %628) /* ty=Tensor[(2, 13, 5), bool] */;
    %638 = %633.4;
    (%634, %635, meta[relay.Constant][41] /* ty=Tensor[(264), uint64] */, %var_3700, %var_3701, %607, meta[relay.Constant][42] /* ty=Tensor[(126, 1), float32] */, %636, %637, %638)
  };
  %639(%var_3756, %var_3757) /* ty=(Tensor[(1, 6, 3), float32], Tensor[(66, 4), uint64], Tensor[(264), uint64], Tensor[(14), int64], Tensor[(480), int32], Tensor[(1, 128), uint16], Tensor[(126, 1), float32], Tensor[(14), int64], Tensor[(2, 13, 5), bool], Tensor[(128), int8]) */
}

def @func_3249(%var_3248: Tensor[(7, 6, 3), float32]) -> (Tensor[(1, 128), uint16], Tensor[(8, 10, 9), uint32], Tensor[(720), uint32], Tensor[(7, 6, 3), int8], Tensor[(2, 13, 5), float32]) {
  %654 = fn (%var_3233: Tensor[(7, 6, 3), float32]) -> (Tensor[(1, 128), uint16], Tensor[(8, 10, 9), uint32], Tensor[(720), uint32], Tensor[(7, 6, 3), int8], Tensor[(2, 13, 5), float32]) {
    %640 = cast(meta[relay.Constant][44] /* ty=Tensor[(720), uint32] */, dtype="uint32") /* ty=Tensor[(720), uint32] */;
    %641 = reshape(%640, newshape=[360, 2]) /* ty=Tensor[(360, 2), uint32] */;
    %642 = @func_2683(%641) /* ty=(Tensor[(1, 6, 3), float32], Tensor[(8, 10, 9), uint32], Tensor[(360, 2), bool], Tensor[(360, 2), float64]) */;
    %643 = @func_2773() /* ty=Tensor[(1, 6, 3), float32] */;
    %644 = cast(%643, dtype="int8") /* ty=Tensor[(1, 6, 3), int8] */;
    %645 = cast(%var_3233, dtype="int8") /* ty=Tensor[(7, 6, 3), int8] */;
    %646 = cast(meta[relay.Constant][43] /* ty=Tensor[(1, 128), uint16] */, dtype="uint16") /* ty=Tensor[(1, 128), uint16] */;
    %647 = reshape(%646, newshape=[4, 2, 16]) /* ty=Tensor[(4, 2, 16), uint16] */;
    %648 = @func_2339(%647) /* ty=(Tensor[(4, 2, 16), uint16], Tensor[(2, 13, 5), float32], Tensor[(14), int64], Tensor[(480), int32]) */;
    %649 = %648.1;
    %650 = cast(%649, dtype="float32") /* ty=Tensor[(2, 13, 5), float32] */;
    %651 = %642.1;
    %652 = add(%644, %645) /* ty=Tensor[(7, 6, 3), int8] */;
    %653 = tan(%650) /* ty=Tensor[(2, 13, 5), float32] */;
    (meta[relay.Constant][43] /* ty=Tensor[(1, 128), uint16] */, %651, meta[relay.Constant][44] /* ty=Tensor[(720), uint32] */, %652, %653)
  };
  %654(%var_3248) /* ty=(Tensor[(1, 128), uint16], Tensor[(8, 10, 9), uint32], Tensor[(720), uint32], Tensor[(7, 6, 3), int8], Tensor[(2, 13, 5), float32]) */
}

def @main(%var_7285: Tensor[(9, 5, 7), int16], %var_7286: Tensor[(9, 5, 7), int16]) -> Tensor[(9, 5, 7), int16] {
  %655 = cast(%var_7286, dtype="int16") /* ty=Tensor[(9, 5, 7), int16] */;
  %656 = shape_of(%var_7285, dtype="int32") /* ty=Tensor[(3), int32] */;
  %657 = cast(%var_7285, dtype="int16") /* ty=Tensor[(9, 5, 7), int16] */;
  %658 = dyn.reshape(%655, %656, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  minimum(%657, %658) /* ty=Tensor[(9, 5, 7), int16] */
}

def @func_3072(%var_3034: Tensor[(128), uint16], %var_3060: Tensor[(14), int64]) -> (Tensor[(6, 5, 16), int32], Tensor[(480), int32], Tensor[(1, 6, 3), float64], Tensor[(2, 13, 5), float32], Tensor[(128), int8], Tensor[(2, 13, 5), float32], Tensor[(14), int64]) {
  %659 = cast(meta[relay.Constant][45] /* ty=Tensor[(480), int32] */, dtype="int32") /* ty=Tensor[(480), int32] */;
  %660 = reshape(%659, newshape=[6, 5, 16]) /* ty=Tensor[(6, 5, 16), int32] */;
  %661 = @func_695(%660) /* ty=(Tensor[(6, 5, 16), int32], Tensor[(3, 3, 8), bool], Tensor[(72), float32], Tensor[(3, 3, 8), bool]) */;
  %662 = @func_2393() /* ty=Tensor[(1, 6, 3), float32] */;
  %663 = cast(%662, dtype="float64") /* ty=Tensor[(1, 6, 3), float64] */;
  %664 = cast(%var_3034, dtype="uint16") /* ty=Tensor[(128), uint16] */;
  %665 = reshape(%664, newshape=[4, 2, 16]) /* ty=Tensor[(4, 2, 16), uint16] */;
  %666 = @func_2339(%665) /* ty=(Tensor[(4, 2, 16), uint16], Tensor[(2, 13, 5), float32], Tensor[(14), int64], Tensor[(480), int32]) */;
  %667 = cast(meta[relay.Constant][46] /* ty=Tensor[(128), uint16] */, dtype="int8") /* ty=Tensor[(128), int8] */;
  %668 = shape_of(%var_3034, dtype="int32") /* ty=Tensor[(1), int32] */;
  %669 = cast(%var_3034, dtype="int8") /* ty=Tensor[(128), int8] */;
  %670 = dyn.reshape(%667, %668, newshape=[]) /* ty=Tensor[(?), int8] */;
  %671 = cast(%var_3060, dtype="int64") /* ty=Tensor[(14), int64] */;
  %672 = cast(meta[relay.Constant][45] /* ty=Tensor[(480), int32] */, dtype="int32") /* ty=Tensor[(480), int32] */;
  %673 = reshape(%671, newshape=[7, 2]) /* ty=Tensor[(7, 2), int64] */;
  %674 = reshape(%672, newshape=[480]) /* ty=Tensor[(480), int32] */;
  %675 = @func_1238(%673, %674) /* ty=(Tensor[(7, 2), int64], Tensor[(2, 13, 5), float32], Tensor[(3, 3, 8), bool], Tensor[(480), int32], Tensor[(130), float32], Tensor[(3, 3, 8), bool]) */;
  %676 = %661.0;
  %677 = cos(%663) /* ty=Tensor[(1, 6, 3), float64] */;
  %678 = %666.1;
  %679 = multiply(%669, %670) /* ty=Tensor[(128), int8] */;
  %680 = %675.1;
  (%676, meta[relay.Constant][45] /* ty=Tensor[(480), int32] */, %677, %678, %679, %680, %var_3060)
}

def @func_5448() -> Tensor[(1, 6, 3), float32] {
  @func_4671() /* ty=Tensor[(1, 6, 3), float32] */
}

def @func_7051(%var_7049: Tensor[(1890), uint32]) -> (Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32], Tensor[(1890), uint32], Tensor[(1890), uint32]) {
  @func_7048(%var_7049) /* ty=(Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32], Tensor[(1890), uint32], Tensor[(1890), uint32]) */
}

def @func_4389(%var_4387: Tensor[(11, 12, 2), float32], %var_4388: Tensor[(11, 12, 2), float32]) -> (Tensor[(11, 12, 2), float32], Tensor[(11, 12, 2), float64]) {
  %692 = fn (%var_4356: Tensor[(11, 12, 2), float32], %var_4376: Tensor[(11, 12, 2), float32]) -> (Tensor[(11, 12, 2), float32], Tensor[(11, 12, 2), float64]) {
    %681 = cast(%var_4356, dtype="float32") /* ty=Tensor[(11, 12, 2), float32] */;
    %682 = cast(%var_4356, dtype="float32") /* ty=Tensor[(11, 12, 2), float32] */;
    %683 = erf(%682) /* ty=Tensor[(11, 12, 2), float32] */;
    %684 = cast(%var_4376, dtype="float32") /* ty=Tensor[(11, 12, 2), float32] */;
    %685 = shape_of(%683, dtype="int32") /* ty=Tensor[(3), int32] */;
    %686 = cast(%683, dtype="float32") /* ty=Tensor[(11, 12, 2), float32] */;
    %687 = dyn.reshape(%684, %685, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %688 = power(%686, %687) /* ty=Tensor[(11, 12, 2), float32] */;
    %689 = cast(%688, dtype="float64") /* ty=Tensor[(11, 12, 2), float64] */;
    %690 = sqrt(%681) /* ty=Tensor[(11, 12, 2), float32] */;
    %691 = sigmoid(%689) /* ty=Tensor[(11, 12, 2), float64] */;
    (%690, %691)
  };
  %692(%var_4387, %var_4388) /* ty=(Tensor[(11, 12, 2), float32], Tensor[(11, 12, 2), float64]) */
}

def @func_6626(%var_6601: Tensor[(2, 240), int32]) -> (Tensor[(6, 7), float32], Tensor[(10, 7, 14), bool], Tensor[(980), float32], Tensor[(2, 240), int32], Tensor[(?, 6, 3), bool]) {
  %693 = cast(meta[relay.Constant][47] /* ty=Tensor[(6, 7), float32] */, dtype="float32") /* ty=Tensor[(6, 7), float32] */;
  %694 = cast(meta[relay.Constant][48] /* ty=Tensor[(980), float32] */, dtype="float32") /* ty=Tensor[(980), float32] */;
  %695 = cast(%var_6601, dtype="int32") /* ty=Tensor[(2, 240), int32] */;
  %696 = reshape(%694, newshape=[10, 7, 14]) /* ty=Tensor[(10, 7, 14), float32] */;
  %697 = reshape(%695, newshape=[480]) /* ty=Tensor[(480), int32] */;
  %698 = @func_2174(%696, %697) /* ty=(Tensor[(10, 7, 14), bool], Tensor[(16, 10, 8), bool], Tensor[(4, 320), float32], Tensor[(1, 14), int64], Tensor[(480), int32], Tensor[(2, 12, 5), float32], Tensor[(72), float32]) */;
  %699 = @func_6434() /* ty=(Tensor[(1, 6, 3), float64],) */;
  %700 = %699.0;
  %701 = @func_6434() /* ty=(Tensor[(1, 6, 3), float64],) */;
  %702 = %701.0;
  %703 = cast(%702, dtype="bool") /* ty=Tensor[(1, 6, 3), bool] */;
  %704 = shape_of(%700, dtype="int32") /* ty=Tensor[(3), int32] */;
  %705 = cast(%700, dtype="bool") /* ty=Tensor[(1, 6, 3), bool] */;
  %706 = dyn.reshape(%703, %704, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %707 = log2(%693) /* ty=Tensor[(6, 7), float32] */;
  %708 = %698.0;
  %709 = greater_equal(%705, %706) /* ty=Tensor[(?, 6, 3), bool] */;
  (%707, %708, meta[relay.Constant][48] /* ty=Tensor[(980), float32] */, %var_6601, %709)
}

def @func_7089(%var_7086: Tensor[(4, 8, 7), float64], %var_7087: Tensor[(4, 8, 7), float64], %var_7088: Tensor[(480), int32]) -> (Tensor[(4, 8, 7), float64], Tensor[(10, 7, 14), bool], Tensor[(480), int32], Tensor[(4, 8, 7), float32]) {
  @func_7084(%var_7086, %var_7087, %var_7088) /* ty=(Tensor[(4, 8, 7), float64], Tensor[(10, 7, 14), bool], Tensor[(480), int32], Tensor[(4, 8, 7), float32]) */
}

def @func_2719(%var_2718: Tensor[(11, 6, 3), float32]) -> Tensor[(11, 6, 3), float32] {
  %713 = fn (%var_2693: Tensor[(11, 6, 3), float32]) -> Tensor[(11, 6, 3), float32] {
    %710 = @func_2412() /* ty=Tensor[(1, 6, 3), float32] */;
    %711 = cast(%710, dtype="float32") /* ty=Tensor[(1, 6, 3), float32] */;
    %712 = cast(%var_2693, dtype="float32") /* ty=Tensor[(11, 6, 3), float32] */;
    subtract(%711, %712) /* ty=Tensor[(11, 6, 3), float32] */
  };
  %713(%var_2718) /* ty=Tensor[(11, 6, 3), float32] */
}

def @func_4752(%var_4749: Tensor[(264), uint64], %var_4750: Tensor[(330), int32], %var_4751: Tensor[(1274), float32]) -> (Tensor[(1, 6, 3), float32], Tensor[(8, 10, 9), float64], Tensor[(720), uint32], Tensor[(1, 6, 3), float32], Tensor[(264), uint64], Tensor[(5, 6, 11), bool], Tensor[(330), int32], Tensor[(1274), float32], Tensor[(9, 15, 14), float32], Tensor[(1890), uint32]) {
  %739 = fn (%var_4739: Tensor[(264), uint64], %var_4742: Tensor[(330), int32], %var_4743: Tensor[(1274), float32]) -> (Tensor[(1, 6, 3), float32], Tensor[(8, 10, 9), float64], Tensor[(720), uint32], Tensor[(1, 6, 3), float32], Tensor[(264), uint64], Tensor[(5, 6, 11), bool], Tensor[(330), int32], Tensor[(1274), float32], Tensor[(9, 15, 14), float32], Tensor[(1890), uint32]) {
    %714 = @func_4139() /* ty=(Tensor[(1, 6, 3), float32],) */;
    %715 = cast(meta[relay.Constant][49] /* ty=Tensor[(720), uint32] */, dtype="uint32") /* ty=Tensor[(720), uint32] */;
    %716 = cast(meta[relay.Constant][49] /* ty=Tensor[(720), uint32] */, dtype="uint32") /* ty=Tensor[(720), uint32] */;
    %717 = reshape(%715, newshape=[8, 10, 9]) /* ty=Tensor[(8, 10, 9), uint32] */;
    %718 = reshape(%716, newshape=[8, 10, 9]) /* ty=Tensor[(8, 10, 9), uint32] */;
    %719 = @func_2229(%717, %718) /* ty=(Tensor[(8, 10, 9), uint32], Tensor[(8, 10, 9), float64]) */;
    %720 = cast(%var_4739, dtype="uint64") /* ty=Tensor[(264), uint64] */;
    %721 = reshape(%720, newshape=[66, 4]) /* ty=Tensor[(66, 4), uint64] */;
    %722 = @func_3471(%721) /* ty=(Tensor[(1, 6, 3), float32], Tensor[(11, 2, 12), uint64], Tensor[(66, 4), uint64]) */;
    %723 = cast(%var_4742, dtype="int32") /* ty=Tensor[(330), int32] */;
    %724 = cast(%var_4742, dtype="int32") /* ty=Tensor[(330), int32] */;
    %725 = cast(%var_4743, dtype="float32") /* ty=Tensor[(1274), float32] */;
    %726 = reshape(%723, newshape=[5, 6, 11]) /* ty=Tensor[(5, 6, 11), int32] */;
    %727 = reshape(%724, newshape=[5, 6, 11]) /* ty=Tensor[(5, 6, 11), int32] */;
    %728 = reshape(%725, newshape=[1274]) /* ty=Tensor[(1274), float32] */;
    %729 = @func_1543(%726, %727, %728) /* ty=(Tensor[(5, 6, 11), bool], Tensor[(5, 6, 11), uint8], Tensor[(14, 7, 13), int8], Tensor[(1274), float32]) */;
    %730 = cast(meta[relay.Constant][50] /* ty=Tensor[(1890), uint32] */, dtype="uint32") /* ty=Tensor[(1890), uint32] */;
    %731 = cast(meta[relay.Constant][50] /* ty=Tensor[(1890), uint32] */, dtype="uint32") /* ty=Tensor[(1890), uint32] */;
    %732 = reshape(%730, newshape=[9, 15, 14]) /* ty=Tensor[(9, 15, 14), uint32] */;
    %733 = reshape(%731, newshape=[9, 15, 14]) /* ty=Tensor[(9, 15, 14), uint32] */;
    %734 = %714.0;
    %735 = %719.1;
    %736 = %722.0;
    %737 = %729.0;
    %738 = @func_807(%732, %733) /* ty=Tensor[(9, 15, 14), float32] */;
    (%734, %735, meta[relay.Constant][49] /* ty=Tensor[(720), uint32] */, %736, %var_4739, %737, %var_4742, %var_4743, %738, meta[relay.Constant][50] /* ty=Tensor[(1890), uint32] */)
  };
  %739(%var_4749, %var_4750, %var_4751) /* ty=(Tensor[(1, 6, 3), float32], Tensor[(8, 10, 9), float64], Tensor[(720), uint32], Tensor[(1, 6, 3), float32], Tensor[(264), uint64], Tensor[(5, 6, 11), bool], Tensor[(330), int32], Tensor[(1274), float32], Tensor[(9, 15, 14), float32], Tensor[(1890), uint32]) */
}

def @func_3948() -> Tensor[(1, 6, 3), float32] {
  %741 = fn () -> Tensor[(1, 6, 3), float32] {
    %740 = @func_3315() /* ty=(Tensor[(1, 6, 3), float32],) */;
    %740.0
  };
  %741() /* ty=Tensor[(1, 6, 3), float32] */
}

def @func_5260() -> Tensor[(1, 6, 3), float64] {
  %742 = @func_5031() /* ty=(Tensor[(1, 6, 3), float64],) */;
  %743 = %742.0;
  %744 = cast(%743, dtype="float64") /* ty=Tensor[(1, 6, 3), float64] */;
  log10(%744) /* ty=Tensor[(1, 6, 3), float64] */
}

def @func_3398() -> Tensor[(1, 6, 3), float32] {
  %745 = fn () -> Tensor[(1, 6, 3), float32] {
    @func_2393() /* ty=Tensor[(1, 6, 3), float32] */
  };
  %745() /* ty=Tensor[(1, 6, 3), float32] */
}

def @func_5170(%var_5169: Tensor[(1890), uint32]) -> (Tensor[(1, 6, 3), float32], Tensor[(1890), uint32], Tensor[(1890), uint32]) {
  %752 = fn (%var_5151: Tensor[(1890), uint32]) -> (Tensor[(1, 6, 3), float32], Tensor[(1890), uint32], Tensor[(1890), uint32]) {
    %746 = @func_4719() /* ty=(Tensor[(1, 6, 3), float32],) */;
    %747 = cast(%var_5151, dtype="uint32") /* ty=Tensor[(1890), uint32] */;
    %748 = reshape(%747, newshape=[1890]) /* ty=Tensor[(1890), uint32] */;
    %749 = @func_4261(%748) /* ty=(Tensor[(1890), uint32], Tensor[(?, 6, 3), int32], Tensor[(16, 6, 3), float32], Tensor[(288), float32], Tensor[(?, 6, 3), bool], Tensor[(11, 6, 3), bool], Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32], Tensor[(9, 15, 14), float32], Tensor[(360, 2), bool], Tensor[(720), uint32]) */;
    %750 = %746.0;
    %751 = %749.0;
    (%750, %751, %var_5151)
  };
  %752(%var_5169) /* ty=(Tensor[(1, 6, 3), float32], Tensor[(1890), uint32], Tensor[(1890), uint32]) */
}

def @func_1024(%var_1023: Tensor[(12, 10, 3), uint64]) -> (Tensor[(12, 10, 3), uint64],) {
  %758 = fn (%var_1014: Tensor[(12, 10, 3), uint64]) -> (Tensor[(12, 10, 3), uint64],) {
    %753 = cast(%var_1014, dtype="uint64") /* ty=Tensor[(12, 10, 3), uint64] */;
    %754 = shape_of(meta[relay.Constant][51] /* ty=Tensor[(12, 10, 3), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %755 = cast(meta[relay.Constant][51] /* ty=Tensor[(12, 10, 3), uint64] */, dtype="uint64") /* ty=Tensor[(12, 10, 3), uint64] */;
    %756 = dyn.reshape(%753, %754, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %757 = left_shift(%755, %756) /* ty=Tensor[(12, 10, 3), uint64] */;
    (%757,)
  };
  %758(%var_1023) /* ty=(Tensor[(12, 10, 3), uint64],) */
}

def @func_5457() -> (Tensor[(1, 6, 3), float64],) {
  @func_5455() /* ty=(Tensor[(1, 6, 3), float64],) */
}

def @func_2342(%var_2340: Tensor[(4, 2, 16), uint16]) -> (Tensor[(4, 2, 16), uint16], Tensor[(2, 13, 5), float32], Tensor[(14), int64], Tensor[(480), int32]) {
  @func_2339(%var_2340) /* ty=(Tensor[(4, 2, 16), uint16], Tensor[(2, 13, 5), float32], Tensor[(14), int64], Tensor[(480), int32]) */
}

def @func_4719() -> (Tensor[(1, 6, 3), float32],) {
  %759 = @func_4453() /* ty=(Tensor[(1, 6, 3), float32],) */;
  %760 = %759.0;
  (%760,)
}

def @func_4836() -> (Tensor[(1, 6, 3), float32], Tensor[(11, 2, 12), uint64]) {
  @func_4834() /* ty=(Tensor[(1, 6, 3), float32], Tensor[(11, 2, 12), uint64]) */
}

def @func_4834() -> (Tensor[(1, 6, 3), float32], Tensor[(11, 2, 12), uint64]) {
  %761 = @func_4522() /* ty=(Tensor[(1, 6, 3), float32], Tensor[(16, 5, 5), int64], Tensor[(400), int64], Tensor[(1, 6, 3), float32], Tensor[(11, 2, 12), uint64], Tensor[(132, 2), uint64], Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32]) */;
  %762 = @func_2773() /* ty=Tensor[(1, 6, 3), float32] */;
  %763 = %761.4;
  (%762, %763)
}

def @func_2775() -> Tensor[(1, 6, 3), float32] {
  @func_2773() /* ty=Tensor[(1, 6, 3), float32] */
}

def @func_6220() -> Tensor[(1, 6, 3), float32] {
  @func_3397() /* ty=Tensor[(1, 6, 3), float32] */
}

def @func_3935(%var_3931: Tensor[(8, 4, 4), float64]) -> (Tensor[(8, 4, 4), float64],) {
  %764 = cast(%var_3931, dtype="float64") /* ty=Tensor[(8, 4, 4), float64] */;
  %765 = tan(%764) /* ty=Tensor[(8, 4, 4), float64] */;
  (%765,)
}

def @func_4886() -> (Tensor[(1, 6, 3), float32], Tensor[(480), int32], Tensor[(4, 120), int32]) {
  @func_4884() /* ty=(Tensor[(1, 6, 3), float32], Tensor[(480), int32], Tensor[(4, 120), int32]) */
}

def @func_1119(%var_1118: Tensor[(480), int32]) -> (Tensor[(72), float32], Tensor[(480), int32], Tensor[(2, 12, 5), float32]) {
  %774 = fn (%var_1102: Tensor[(480), int32]) -> (Tensor[(72), float32], Tensor[(480), int32], Tensor[(2, 12, 5), float32]) {
    %766 = cast(%var_1102, dtype="int32") /* ty=Tensor[(480), int32] */;
    %767 = reshape(%766, newshape=[6, 5, 16]) /* ty=Tensor[(6, 5, 16), int32] */;
    %768 = @func_695(%767) /* ty=(Tensor[(6, 5, 16), int32], Tensor[(3, 3, 8), bool], Tensor[(72), float32], Tensor[(3, 3, 8), bool]) */;
    %769 = cast(meta[relay.Constant][52] /* ty=Tensor[(2, 12, 5), float64] */, dtype="float64") /* ty=Tensor[(2, 12, 5), float64] */;
    %770 = sqrt(%769) /* ty=Tensor[(2, 12, 5), float64] */;
    %771 = cast(%770, dtype="float32") /* ty=Tensor[(2, 12, 5), float32] */;
    %772 = %768.2;
    %773 = atan(%771) /* ty=Tensor[(2, 12, 5), float32] */;
    (%772, %var_1102, %773)
  };
  %774(%var_1118) /* ty=(Tensor[(72), float32], Tensor[(480), int32], Tensor[(2, 12, 5), float32]) */
}

def @func_2914(%var_2912: Tensor[(980), float32], %var_2913: Tensor[(128), uint16]) -> (Tensor[(1, 6, 3), float32], Tensor[(1, 14), int64], Tensor[(980), float32], Tensor[(480), int32], Tensor[(14), int64], Tensor[(128), uint16]) {
  %786 = fn (%var_2880: Tensor[(980), float32], %var_2905: Tensor[(128), uint16]) -> (Tensor[(1, 6, 3), float32], Tensor[(1, 14), int64], Tensor[(980), float32], Tensor[(480), int32], Tensor[(14), int64], Tensor[(128), uint16]) {
    %775 = cast(%var_2880, dtype="float32") /* ty=Tensor[(980), float32] */;
    %776 = cast(meta[relay.Constant][53] /* ty=Tensor[(480), int32] */, dtype="int32") /* ty=Tensor[(480), int32] */;
    %777 = reshape(%775, newshape=[10, 7, 14]) /* ty=Tensor[(10, 7, 14), float32] */;
    %778 = reshape(%776, newshape=[480]) /* ty=Tensor[(480), int32] */;
    %779 = @func_2174(%777, %778) /* ty=(Tensor[(10, 7, 14), bool], Tensor[(16, 10, 8), bool], Tensor[(4, 320), float32], Tensor[(1, 14), int64], Tensor[(480), int32], Tensor[(2, 12, 5), float32], Tensor[(72), float32]) */;
    %780 = cast(%var_2905, dtype="uint16") /* ty=Tensor[(128), uint16] */;
    %781 = reshape(%780, newshape=[4, 2, 16]) /* ty=Tensor[(4, 2, 16), uint16] */;
    %782 = @func_2339(%781) /* ty=(Tensor[(4, 2, 16), uint16], Tensor[(2, 13, 5), float32], Tensor[(14), int64], Tensor[(480), int32]) */;
    %783 = @func_2412() /* ty=Tensor[(1, 6, 3), float32] */;
    %784 = %779.3;
    %785 = %782.2;
    (%783, %784, %var_2880, meta[relay.Constant][53] /* ty=Tensor[(480), int32] */, %785, %var_2905)
  };
  %786(%var_2912, %var_2913) /* ty=(Tensor[(1, 6, 3), float32], Tensor[(1, 14), int64], Tensor[(980), float32], Tensor[(480), int32], Tensor[(14), int64], Tensor[(128), uint16]) */
}

def @func_4453() -> (Tensor[(1, 6, 3), float32],) {
  %787 = @func_4346() /* ty=(Tensor[(1, 6, 3), float32],) */;
  %788 = %787.0;
  (%788,)
}

def @func_2339(%var_2312: Tensor[(4, 2, 16), uint16]) -> (Tensor[(4, 2, 16), uint16], Tensor[(2, 13, 5), float32], Tensor[(14), int64], Tensor[(480), int32]) {
  %789 = cast(meta[relay.Constant][54] /* ty=Tensor[(4, 2, 16), uint16] */, dtype="uint16") /* ty=Tensor[(4, 2, 16), uint16] */;
  %790 = shape_of(%var_2312, dtype="int32") /* ty=Tensor[(3), int32] */;
  %791 = cast(%var_2312, dtype="uint16") /* ty=Tensor[(4, 2, 16), uint16] */;
  %792 = dyn.reshape(%789, %790, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %793 = cast(meta[relay.Constant][55] /* ty=Tensor[(14), int64] */, dtype="int64") /* ty=Tensor[(14), int64] */;
  %794 = cast(meta[relay.Constant][56] /* ty=Tensor[(480), int32] */, dtype="int32") /* ty=Tensor[(480), int32] */;
  %795 = reshape(%793, newshape=[7, 2]) /* ty=Tensor[(7, 2), int64] */;
  %796 = reshape(%794, newshape=[480]) /* ty=Tensor[(480), int32] */;
  %797 = @func_1238(%795, %796) /* ty=(Tensor[(7, 2), int64], Tensor[(2, 13, 5), float32], Tensor[(3, 3, 8), bool], Tensor[(480), int32], Tensor[(130), float32], Tensor[(3, 3, 8), bool]) */;
  %798 = bitwise_xor(%791, %792) /* ty=Tensor[(4, 2, 16), uint16] */;
  %799 = %797.1;
  (%798, %799, meta[relay.Constant][55] /* ty=Tensor[(14), int64] */, meta[relay.Constant][56] /* ty=Tensor[(480), int32] */)
}

def @func_3817(%var_3815: Tensor[(130), float32]) -> (Tensor[(1, 6, 3), float32], Tensor[(130), float32], Tensor[(2, 13, 5), float32], Tensor[(4, 180), uint32], Tensor[(2, 13, 5), float64]) {
  @func_3814(%var_3815) /* ty=(Tensor[(1, 6, 3), float32], Tensor[(130), float32], Tensor[(2, 13, 5), float32], Tensor[(4, 180), uint32], Tensor[(2, 13, 5), float64]) */
}

def @func_2424(%var_2422: Tensor[(16, 5, 5), int64], %var_2423: Tensor[(16, 5, 5), int64]) -> Tensor[(16, 5, 5), int64] {
  @func_2420(%var_2422, %var_2423) /* ty=Tensor[(16, 5, 5), int64] */
}

def @func_5031() -> (Tensor[(1, 6, 3), float64],) {
  %800 = @func_3315() /* ty=(Tensor[(1, 6, 3), float32],) */;
  %801 = %800.0;
  %802 = cast(%801, dtype="float64") /* ty=Tensor[(1, 6, 3), float64] */;
  %803 = asin(%802) /* ty=Tensor[(1, 6, 3), float64] */;
  (%803,)
}

def @func_2394() -> Tensor[(1, 6, 3), float32] {
  %807 = fn () -> Tensor[(1, 6, 3), float32] {
    %804 = cast(meta[relay.Constant][57] /* ty=Tensor[(1, 6, 3), float64] */, dtype="float64") /* ty=Tensor[(1, 6, 3), float64] */;
    %805 = acosh(%804) /* ty=Tensor[(1, 6, 3), float64] */;
    %806 = cast(%805, dtype="float32") /* ty=Tensor[(1, 6, 3), float32] */;
    rsqrt(%806) /* ty=Tensor[(1, 6, 3), float32] */
  };
  %807() /* ty=Tensor[(1, 6, 3), float32] */
}

def @func_5721(%var_5719: Tensor[(11, 9, 9), uint8], %var_5720: Tensor[(11, 9, 9), uint8]) -> (Tensor[(11, 9, 9), uint8], Tensor[(1, 6, 3), float64], Tensor[(1, 6, 3), float32]) {
  @func_5717(%var_5719, %var_5720) /* ty=(Tensor[(11, 9, 9), uint8], Tensor[(1, 6, 3), float64], Tensor[(1, 6, 3), float32]) */
}

def @func_6521(%var_6520: Tensor[(8, 14, 1), float64]) -> (Tensor[(1, 6, 3), float32], Tensor[(8, 14, ?), bool], Tensor[(1, 6, 3), float32]) {
  %819 = fn (%var_6456: Tensor[(8, 14, 1), float64]) -> (Tensor[(1, 6, 3), float32], Tensor[(8, 14, ?), bool], Tensor[(1, 6, 3), float32]) {
    %808 = @func_3315() /* ty=(Tensor[(1, 6, 3), float32],) */;
    %809 = cast(%var_6456, dtype="float64") /* ty=Tensor[(8, 14, 1), float64] */;
    %810 = asinh(%809) /* ty=Tensor[(8, 14, 1), float64] */;
    %811 = cast(%var_6456, dtype="bool") /* ty=Tensor[(8, 14, 1), bool] */;
    %812 = shape_of(%810, dtype="int32") /* ty=Tensor[(3), int32] */;
    %813 = cast(%810, dtype="bool") /* ty=Tensor[(8, 14, 1), bool] */;
    %814 = dyn.reshape(%811, %812, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %815 = @func_4719() /* ty=(Tensor[(1, 6, 3), float32],) */;
    %816 = %808.0;
    %817 = not_equal(%813, %814) /* ty=Tensor[(8, 14, ?), bool] */;
    %818 = %815.0;
    (%816, %817, %818)
  };
  %819(%var_6520) /* ty=(Tensor[(1, 6, 3), float32], Tensor[(8, 14, ?), bool], Tensor[(1, 6, 3), float32]) */
}

def @func_5450() -> Tensor[(1, 6, 3), float32] {
  @func_5448() /* ty=Tensor[(1, 6, 3), float32] */
}

def @func_6936(%var_6934: Tensor[(3, 4, 4), float64]) -> (Tensor[(3, 4, 4), float64], Tensor[(1, 6, 3), float32]) {
  @func_6933(%var_6934) /* ty=(Tensor[(3, 4, 4), float64], Tensor[(1, 6, 3), float32]) */
}

def @func_1634(%var_1590: Tensor[(16, 10, 8), float32], %var_1601: Tensor[(14), int64], %var_1602: Tensor[(480), int32], %var_1617: Tensor[(16, 10, 8), float32]) -> (Tensor[(16, 10, 8), float64], Tensor[(3, 3, 8), bool], Tensor[(14), int64], Tensor[(480), int32], Tensor[(2, 12, 5), float32], Tensor[(16, 10, 8), bool], Tensor[(3, 3, 8), float64], Tensor[(3, 3, 8), bool]) {
  %820 = cast(%var_1590, dtype="float32") /* ty=Tensor[(16, 10, 8), float32] */;
  %821 = sinh(%820) /* ty=Tensor[(16, 10, 8), float32] */;
  %822 = cast(%821, dtype="float64") /* ty=Tensor[(16, 10, 8), float64] */;
  %823 = cast(%var_1601, dtype="int64") /* ty=Tensor[(14), int64] */;
  %824 = cast(%var_1602, dtype="int32") /* ty=Tensor[(480), int32] */;
  %825 = reshape(%823, newshape=[7, 2]) /* ty=Tensor[(7, 2), int64] */;
  %826 = reshape(%824, newshape=[480]) /* ty=Tensor[(480), int32] */;
  %827 = @func_1238(%825, %826) /* ty=(Tensor[(7, 2), int64], Tensor[(2, 13, 5), float32], Tensor[(3, 3, 8), bool], Tensor[(480), int32], Tensor[(130), float32], Tensor[(3, 3, 8), bool]) */;
  %828 = cast(%var_1602, dtype="int32") /* ty=Tensor[(480), int32] */;
  %829 = reshape(%828, newshape=[480]) /* ty=Tensor[(480), int32] */;
  %830 = @func_1117(%829) /* ty=(Tensor[(72), float32], Tensor[(480), int32], Tensor[(2, 12, 5), float32]) */;
  %831 = cast(%var_1617, dtype="bool") /* ty=Tensor[(16, 10, 8), bool] */;
  %832 = shape_of(%821, dtype="int32") /* ty=Tensor[(3), int32] */;
  %833 = cast(%821, dtype="bool") /* ty=Tensor[(16, 10, 8), bool] */;
  %834 = dyn.reshape(%831, %832, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %835 = cast(%var_1602, dtype="int32") /* ty=Tensor[(480), int32] */;
  %836 = reshape(%835, newshape=[6, 5, 16]) /* ty=Tensor[(6, 5, 16), int32] */;
  %837 = @func_695(%836) /* ty=(Tensor[(6, 5, 16), int32], Tensor[(3, 3, 8), bool], Tensor[(72), float32], Tensor[(3, 3, 8), bool]) */;
  %838 = %837.1;
  %839 = cast(%838, dtype="float64") /* ty=Tensor[(3, 3, 8), float64] */;
  %840 = cast(%var_1601, dtype="int64") /* ty=Tensor[(14), int64] */;
  %841 = cast(%var_1602, dtype="int32") /* ty=Tensor[(480), int32] */;
  %842 = reshape(%840, newshape=[7, 2]) /* ty=Tensor[(7, 2), int64] */;
  %843 = reshape(%841, newshape=[480]) /* ty=Tensor[(480), int32] */;
  %844 = @func_1238(%842, %843) /* ty=(Tensor[(7, 2), int64], Tensor[(2, 13, 5), float32], Tensor[(3, 3, 8), bool], Tensor[(480), int32], Tensor[(130), float32], Tensor[(3, 3, 8), bool]) */;
  %845 = acos(%822) /* ty=Tensor[(16, 10, 8), float64] */;
  %846 = %827.2;
  %847 = %830.2;
  %848 = logical_and(%833, %834) /* ty=Tensor[(16, 10, 8), bool] */;
  %849 = log(%839) /* ty=Tensor[(3, 3, 8), float64] */;
  %850 = %844.2;
  (%845, %846, %var_1601, %var_1602, %847, %848, %849, %850)
}

def @func_4524() -> (Tensor[(1, 6, 3), float32], Tensor[(16, 5, 5), int64], Tensor[(400), int64], Tensor[(1, 6, 3), float32], Tensor[(11, 2, 12), uint64], Tensor[(132, 2), uint64], Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32]) {
  @func_4522() /* ty=(Tensor[(1, 6, 3), float32], Tensor[(16, 5, 5), int64], Tensor[(400), int64], Tensor[(1, 6, 3), float32], Tensor[(11, 2, 12), uint64], Tensor[(132, 2), uint64], Tensor[(1, 6, 3), float32], Tensor[(1, 6, 3), float32]) */
}

def @func_3951() -> Tensor[(1, 6, 3), float32] {
  @func_2393() /* ty=Tensor[(1, 6, 3), float32] */
}

def @func_3938(%var_3936: Tensor[(8, 4, 4), float64]) -> (Tensor[(8, 4, 4), float64],) {
  @func_3935(%var_3936) /* ty=(Tensor[(8, 4, 4), float64],) */
}

def @func_2233(%var_2231: Tensor[(8, 10, 9), uint32], %var_2232: Tensor[(8, 10, 9), uint32]) -> (Tensor[(8, 10, 9), uint32], Tensor[(8, 10, 9), float64]) {
  @func_2229(%var_2231, %var_2232) /* ty=(Tensor[(8, 10, 9), uint32], Tensor[(8, 10, 9), float64]) */
}

def @func_7204(%var_7202: Tensor[(1890), uint32]) -> (Tensor[(1, 6, 3), float64], Tensor[(1890), uint32], Tensor[(1890), uint32]) {
  @func_7201(%var_7202) /* ty=(Tensor[(1, 6, 3), float64], Tensor[(1890), uint32], Tensor[(1890), uint32]) */
}

def @func_5717(%var_5698: Tensor[(11, 9, 9), uint8], %var_5699: Tensor[(11, 9, 9), uint8]) -> (Tensor[(11, 9, 9), uint8], Tensor[(1, 6, 3), float64], Tensor[(1, 6, 3), float32]) {
  %851 = cast(%var_5699, dtype="uint8") /* ty=Tensor[(11, 9, 9), uint8] */;
  %852 = shape_of(%var_5698, dtype="int32") /* ty=Tensor[(3), int32] */;
  %853 = cast(%var_5698, dtype="uint8") /* ty=Tensor[(11, 9, 9), uint8] */;
  %854 = dyn.reshape(%851, %852, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %855 = right_shift(%853, %854) /* ty=Tensor[(11, 9, 9), uint8] */;
  %856 = @func_5260() /* ty=Tensor[(1, 6, 3), float64] */;
  %857 = @func_3947() /* ty=Tensor[(1, 6, 3), float32] */;
  (%855, %856, %857)
}

def @func_7165() -> (Tensor[(1, 6, 3), float32],) {
  @func_7163() /* ty=(Tensor[(1, 6, 3), float32],) */
}

def @func_7276(%var_7274: Tensor[(12, 16, 16), float32], %var_7275: Tensor[(12, 16, 16), float32]) -> Tensor[(12, 16, 16), float64] {
  @func_7272(%var_7274, %var_7275) /* ty=Tensor[(12, 16, 16), float64] */
}

def @func_807(%var_790: Tensor[(9, 15, 14), uint32], %var_791: Tensor[(9, 15, 14), uint32]) -> Tensor[(9, 15, 14), float32] {
  %858 = cast(%var_791, dtype="bool") /* ty=Tensor[(9, 15, 14), bool] */;
  %859 = shape_of(%var_790, dtype="int32") /* ty=Tensor[(3), int32] */;
  %860 = cast(%var_790, dtype="bool") /* ty=Tensor[(9, 15, 14), bool] */;
  %861 = dyn.reshape(%858, %859, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %862 = less(%860, %861) /* ty=Tensor[(9, 15, 14), bool] */;
  %863 = cast(%var_791, dtype="float32") /* ty=Tensor[(9, 15, 14), float32] */;
  %864 = shape_of(%862, dtype="int32") /* ty=Tensor[(3), int32] */;
  %865 = cast(%862, dtype="float32") /* ty=Tensor[(9, 15, 14), float32] */;
  %866 = dyn.reshape(%863, %864, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%865, %866) /* ty=Tensor[(9, 15, 14), float32] */
}

def @func_4455() -> (Tensor[(1, 6, 3), float32],) {
  @func_4453() /* ty=(Tensor[(1, 6, 3), float32],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen91/build/output.py:2203: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen91/build/output.py", line 2208, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(315) tvmgen_default_fused_reshape_minimum_kernel0(short* __restrict__ T_minimum, short* __restrict__ placeholder, short* __restrict__ placeholder1) {
  T_minimum[(((int)threadIdx.x))] = min(placeholder[(((int)threadIdx.x))], placeholder1[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

