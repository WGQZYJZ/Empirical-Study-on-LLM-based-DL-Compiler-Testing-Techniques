==========mod==========
#[version = "0.0.5"]
def @func_3441() -> (Tensor[(220), float64],) {
  %0 = @func_3389() /* ty=(Tensor[(350), float32], Tensor[(13, 8, 8), float64], Tensor[(384), float64], Tensor[(220), uint32]) */;
  %1 = %0.3;
  %2 = cast(%1, dtype="float64") /* ty=Tensor[(220), float64] */;
  %3 = rsqrt(%2) /* ty=Tensor[(220), float64] */;
  (%3,)
}

def @func_11177() -> (Tensor[(220), float64],) {
  %4 = @func_7053() /* ty=Tensor[(220), float64] */;
  (%4,)
}

def @func_13851() -> (Tensor[(350), uint32], Tensor[(350), float32]) {
  %5 = @func_3090() /* ty=(Tensor[(350), uint32],) */;
  %6 = @func_7368() /* ty=(Tensor[(350), float32],) */;
  %7 = %5.0;
  %8 = %6.0;
  (%7, %8)
}

def @func_11746(%var_11721: Tensor[(220), float32]) -> (Tensor[(350), uint8], Tensor[(220), int32], Tensor[(16, 16, 15), int16], Tensor[(350), uint32]) {
  %9 = @func_8862() /* ty=Tensor[(220), float32] */;
  %10 = cast(%var_11721, dtype="int32") /* ty=Tensor[(220), int32] */;
  %11 = shape_of(%9, dtype="int32") /* ty=Tensor[(1), int32] */;
  %12 = cast(%9, dtype="int32") /* ty=Tensor[(220), int32] */;
  %13 = dyn.reshape(%10, %11, newshape=[]) /* ty=Tensor[(?), int32] */;
  %14 = @func_2760() /* ty=(Tensor[(16, 16, 15), int16],) */;
  %15 = @func_6511() /* ty=(Tensor[(350), uint32],) */;
  %16 = @func_4070() /* ty=Tensor[(350), uint8] */;
  %17 = maximum(%12, %13) /* ty=Tensor[(220), int32] */;
  %18 = %14.0;
  %19 = %15.0;
  (%16, %17, %18, %19)
}

def @func_13117() -> (Tensor[(16, 16, 15), int16], Tensor[(350), uint8]) {
  %20 = @func_5028() /* ty=(Tensor[(16, 16, 15), int16],) */;
  %21 = @func_8929() /* ty=(Tensor[(350), uint8], Tensor[(350), float32]) */;
  %22 = %20.0;
  %23 = %21.0;
  (%22, %23)
}

def @func_10324(%var_10280: Tensor[(220), float32]) -> (Tensor[(220), float32], Tensor[(350), uint32], Tensor[(350), uint32]) {
  %24 = @func_8862() /* ty=Tensor[(220), float32] */;
  %25 = cast(%var_10280, dtype="float32") /* ty=Tensor[(220), float32] */;
  %26 = shape_of(%24, dtype="int32") /* ty=Tensor[(1), int32] */;
  %27 = cast(%24, dtype="float32") /* ty=Tensor[(220), float32] */;
  %28 = dyn.reshape(%25, %26, newshape=[]) /* ty=Tensor[(?), float32] */;
  %29 = @func_7321() /* ty=(Tensor[(350), uint32],) */;
  %30 = floor_divide(%27, %28) /* ty=Tensor[(220), float32] */;
  %31 = %29.0;
  %32 = @func_7930() /* ty=Tensor[(350), uint32] */;
  (%30, %31, %32)
}

def @func_12580() -> Tensor[(384), float64] {
  %33 = @func_11760() /* ty=(Tensor[(384), float64], Tensor[(384), float64]) */;
  %33.0
}

def @func_13816() -> (Tensor[(220), float64], Tensor[(350), float64], Tensor[(220), float32], Tensor[(384), float64], Tensor[(16, 16, 15), int16], Tensor[(384), float64]) {
  %34 = @func_9300() /* ty=(Tensor[(220), float64], Tensor[(350), float32], Tensor[(220), float64]) */;
  %35 = %34.0;
  %36 = cast(%35, dtype="float32") /* ty=Tensor[(220), float32] */;
  %37 = reshape(%36, newshape=[220]) /* ty=Tensor[(220), float32] */;
  %38 = @func_12952(%37) /* ty=(Tensor[(350), uint32], Tensor[(16, 16, 15), int16], Tensor[(220), float32]) */;
  %39 = @func_5028() /* ty=(Tensor[(16, 16, 15), int16],) */;
  %40 = @func_10175() /* ty=Tensor[(384), float64] */;
  %41 = cast(%40, dtype="float64") /* ty=Tensor[(384), float64] */;
  %42 = %38.2;
  %43 = cast(%42, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %44 = @func_4990() /* ty=Tensor[(350), float64] */;
  %45 = cast(%44, dtype="uint32") /* ty=Tensor[(350), uint32] */;
  %46 = reshape(%41, newshape=[384]) /* ty=Tensor[(384), float64] */;
  %47 = reshape(%43, newshape=[220]) /* ty=Tensor[(220), uint32] */;
  %48 = reshape(%45, newshape=[350]) /* ty=Tensor[(350), uint32] */;
  %49 = @func_13750(%46, %47, %48) /* ty=(Tensor[(16, 16, 15), float32], Tensor[(384), float64], Tensor[(384), float64], Tensor[(220), uint32], Tensor[(350), uint32]) */;
  %50 = %39.0;
  %51 = %49.1;
  (%35, %44, %42, %40, %50, %51)
}

def @func_2872(%var_2860: Tensor[(16, 16, 15), int16], %var_2865: Tensor[(16, 16, 15), int16]) -> (Tensor[(16, 16, 15), float64], Tensor[(16, 16, 15), uint8]) {
  %52 = @func_2760() /* ty=(Tensor[(16, 16, 15), int16],) */;
  %53 = %52.0;
  %54 = cast(%var_2860, dtype="float64") /* ty=Tensor[(16, 16, 15), float64] */;
  %55 = shape_of(%53, dtype="int32") /* ty=Tensor[(3), int32] */;
  %56 = cast(%53, dtype="float64") /* ty=Tensor[(16, 16, 15), float64] */;
  %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %58 = cast(%var_2865, dtype="uint8") /* ty=Tensor[(16, 16, 15), uint8] */;
  %59 = shape_of(%var_2860, dtype="int32") /* ty=Tensor[(3), int32] */;
  %60 = cast(%var_2860, dtype="uint8") /* ty=Tensor[(16, 16, 15), uint8] */;
  %61 = dyn.reshape(%58, %59, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %62 = floor_divide(%56, %57) /* ty=Tensor[(16, 16, 15), float64] */;
  %63 = minimum(%60, %61) /* ty=Tensor[(16, 16, 15), uint8] */;
  (%62, %63)
}

def @func_6073() -> (Tensor[(384), float64], Tensor[(220), float64]) {
  %64 = @func_5859() /* ty=Tensor[(384), float64] */;
  %65 = @func_5540() /* ty=Tensor[(220), float64] */;
  (%64, %65)
}

def @func_8202() -> (Tensor[(220), float64], Tensor[(350), uint8], Tensor[(3, 8, 14), float64], Tensor[(336), int64]) {
  %66 = cast(meta[relay.Constant][0] /* ty=Tensor[(336), int64] */, dtype="int64") /* ty=Tensor[(336), int64] */;
  %67 = cast(meta[relay.Constant][0] /* ty=Tensor[(336), int64] */, dtype="int64") /* ty=Tensor[(336), int64] */;
  %68 = reshape(%66, newshape=[3, 8, 14]) /* ty=Tensor[(3, 8, 14), int64] */;
  %69 = reshape(%67, newshape=[3, 8, 14]) /* ty=Tensor[(3, 8, 14), int64] */;
  %70 = @func_7897(%68, %69) /* ty=(Tensor[(3, 8, 14), float64], Tensor[(3, 8, 14), float64]) */;
  %71 = @func_4491() /* ty=Tensor[(220), float64] */;
  %72 = @func_4070() /* ty=Tensor[(350), uint8] */;
  %73 = %70.0;
  (%71, %72, %73, meta[relay.Constant][0] /* ty=Tensor[(336), int64] */)
}

def @func_12971() -> (Tensor[(16, 16, 15), float32],) {
  %74 = @func_5583() /* ty=Tensor[(16, 16, 15), float32] */;
  (%74,)
}

def @func_8343(%var_8312: Tensor[(220), float64]) -> (Tensor[(384), float64], Tensor[(350), uint32], Tensor[(220), bool], Tensor[(14, 5, 5), float32], Tensor[(330), uint64]) {
  %75 = cast(%var_8312, dtype="float64") /* ty=Tensor[(220), float64] */;
  %76 = reshape(%75, newshape=[220]) /* ty=Tensor[(220), float64] */;
  %77 = @func_7173(%76) /* ty=(Tensor[(220), uint64], Tensor[(350), uint32], Tensor[(13, 8, 8), float64], Tensor[(832), float64]) */;
  %78 = @func_7001() /* ty=(Tensor[(220), float64],) */;
  %79 = %78.0;
  %80 = cast(%79, dtype="bool") /* ty=Tensor[(220), bool] */;
  %81 = shape_of(%var_8312, dtype="int32") /* ty=Tensor[(1), int32] */;
  %82 = cast(%var_8312, dtype="bool") /* ty=Tensor[(220), bool] */;
  %83 = dyn.reshape(%80, %81, newshape=[]) /* ty=Tensor[(?), bool] */;
  %84 = cast(%var_8312, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %85 = cast(meta[relay.Constant][1] /* ty=Tensor[(330), uint64] */, dtype="uint64") /* ty=Tensor[(330), uint64] */;
  %86 = reshape(%84, newshape=[220]) /* ty=Tensor[(220), uint32] */;
  %87 = reshape(%85, newshape=[330]) /* ty=Tensor[(330), uint64] */;
  %88 = @func_6000(%86, %87) /* ty=(Tensor[(384), float64], Tensor[(350), float32], Tensor[(14, 5, 5), float32], Tensor[(220), uint32], Tensor[(330), uint64]) */;
  %89 = @func_7514() /* ty=Tensor[(384), float64] */;
  %90 = %77.1;
  %91 = logical_or(%82, %83) /* ty=Tensor[(220), bool] */;
  %92 = %88.2;
  (%89, %90, %91, %92, meta[relay.Constant][1] /* ty=Tensor[(330), uint64] */)
}

def @func_2840() -> (Tensor[(16, 16, 15), int16], Tensor[(10, 11, 3), bool], Tensor[(330), uint64], Tensor[(16, 16, 15), int16], Tensor[(10, 3, 12), bool], Tensor[(10, 3), uint8], Tensor[(384), float64], Tensor[(350), uint32]) {
  %93 = @func_2760() /* ty=(Tensor[(16, 16, 15), int16],) */;
  %94 = cast(meta[relay.Constant][2] /* ty=Tensor[(330), uint64] */, dtype="uint64") /* ty=Tensor[(330), uint64] */;
  %95 = cast(meta[relay.Constant][2] /* ty=Tensor[(330), uint64] */, dtype="uint64") /* ty=Tensor[(330), uint64] */;
  %96 = reshape(%94, newshape=[10, 11, 3]) /* ty=Tensor[(10, 11, 3), uint64] */;
  %97 = reshape(%95, newshape=[10, 11, 3]) /* ty=Tensor[(10, 11, 3), uint64] */;
  %98 = @func_2760() /* ty=(Tensor[(16, 16, 15), int16],) */;
  %99 = cast(meta[relay.Constant][3] /* ty=Tensor[(10, 3), uint8] */, dtype="uint8") /* ty=Tensor[(10, 3), uint8] */;
  %100 = cast(meta[relay.Constant][3] /* ty=Tensor[(10, 3), uint8] */, dtype="uint8") /* ty=Tensor[(10, 3), uint8] */;
  %101 = cast(meta[relay.Constant][4] /* ty=Tensor[(384), float64] */, dtype="float64") /* ty=Tensor[(384), float64] */;
  %102 = cast(meta[relay.Constant][5] /* ty=Tensor[(350), uint32] */, dtype="uint32") /* ty=Tensor[(350), uint32] */;
  %103 = reshape(%99, newshape=[10, 3, 1]) /* ty=Tensor[(10, 3, 1), uint8] */;
  %104 = reshape(%100, newshape=[10, 3, 1]) /* ty=Tensor[(10, 3, 1), uint8] */;
  %105 = reshape(%101, newshape=[384]) /* ty=Tensor[(384), float64] */;
  %106 = reshape(%102, newshape=[350]) /* ty=Tensor[(350), uint32] */;
  %107 = @func_2322(%103, %104, %105, %106) /* ty=(Tensor[(10, 3, ?), uint8], Tensor[(10, 11, 2), bool], Tensor[(384), float64], Tensor[(14, 5, 5), uint32], Tensor[(350), uint32], Tensor[(10, 3, 12), bool], Tensor[(10, 11, 3), bool], Tensor[(165, 2), uint64], Tensor[(220), uint32], Tensor[(10, 3, 220), float32], Tensor[(10, 11, 2), bool]) */;
  %108 = %93.0;
  %109 = @func_191(%96, %97) /* ty=Tensor[(10, 11, 3), bool] */;
  %110 = %98.0;
  %111 = %107.5;
  (%108, %109, meta[relay.Constant][2] /* ty=Tensor[(330), uint64] */, %110, %111, meta[relay.Constant][3] /* ty=Tensor[(10, 3), uint8] */, meta[relay.Constant][4] /* ty=Tensor[(384), float64] */, meta[relay.Constant][5] /* ty=Tensor[(350), uint32] */)
}

def @func_7664() -> (Tensor[(220), float32],) {
  %112 = @func_4934() /* ty=Tensor[(220), float32] */;
  (%112,)
}

def @func_8440() -> (Tensor[(16, 16, 15), int16], Tensor[(350), uint8], Tensor[(350), uint8]) {
  %113 = @func_8125() /* ty=(Tensor[(16, 16, 15), int16],) */;
  %114 = @func_5337() /* ty=(Tensor[(350), uint8], Tensor[(384), float64]) */;
  %115 = @func_5067() /* ty=(Tensor[(384), float64], Tensor[(350), uint8]) */;
  %116 = %113.0;
  %117 = %114.0;
  %118 = %115.1;
  (%116, %117, %118)
}

def @func_4778() -> Tensor[(350), uint8] {
  @func_4070() /* ty=Tensor[(350), uint8] */
}

def @func_10257(%var_10230: Tensor[(432, 20), float64]) -> (Tensor[(384), float64], Tensor[(8, 1080), uint64], Tensor[(350), float64], Tensor[(432, 20), float64]) {
  %119 = cast(meta[relay.Constant][6] /* ty=Tensor[(350), float64] */, dtype="float64") /* ty=Tensor[(350), float64] */;
  %120 = cast(%var_10230, dtype="float64") /* ty=Tensor[(432, 20), float64] */;
  %121 = reshape(%119, newshape=[350]) /* ty=Tensor[(350), float64] */;
  %122 = reshape(%120, newshape=[8, 1080]) /* ty=Tensor[(8, 1080), float64] */;
  %123 = @func_9881(%121, %122) /* ty=(Tensor[(220), float64], Tensor[(220), float64], Tensor[(350), float32], Tensor[(350), float64], Tensor[(8, 1080), uint64]) */;
  %124 = cast(%var_10230, dtype="float32") /* ty=Tensor[(432, 20), float32] */;
  %125 = log10(%124) /* ty=Tensor[(432, 20), float32] */;
  %126 = cast(%125, dtype="float64") /* ty=Tensor[(432, 20), float64] */;
  %127 = @func_7514() /* ty=Tensor[(384), float64] */;
  %128 = %123.4;
  %129 = acos(%126) /* ty=Tensor[(432, 20), float64] */;
  (%127, %128, meta[relay.Constant][6] /* ty=Tensor[(350), float64] */, %129)
}

def @func_10094() -> (Tensor[(350), uint8],) {
  %130 = @func_9082() /* ty=(Tensor[(220), float64], Tensor[(16, 16, 15), float32], Tensor[(220), float64], Tensor[(15, 9, 8), float64], Tensor[(1080), float64], Tensor[(350), float64], Tensor[(220), float64], Tensor[(350), uint32], Tensor[(350), uint8]) */;
  %131 = %130.8;
  (%131,)
}

def @func_10813() -> (Tensor[(220), float64], Tensor[(220), uint32]) {
  %132 = @func_9909() /* ty=(Tensor[(220), uint32],) */;
  %133 = @func_5540() /* ty=Tensor[(220), float64] */;
  %134 = %132.0;
  (%133, %134)
}

def @func_13489() -> (Tensor[(15, 16, 9), float64], Tensor[(350), uint32]) {
  %135 = @func_6726() /* ty=(Tensor[(220), float64], Tensor[(15, 16, 9), float64]) */;
  %136 = %135.1;
  %137 = @func_9522() /* ty=Tensor[(350), uint32] */;
  (%136, %137)
}

def @func_10764(%var_10745: Tensor[(48, 8), float64]) -> (Tensor[(350), float32], Tensor[(16, 16, 15), int16], Tensor[(10, 11, 2), bool], Tensor[(48, 8), float64], Tensor[(220), uint32]) {
  %138 = @func_5028() /* ty=(Tensor[(16, 16, 15), int16],) */;
  %139 = cast(%var_10745, dtype="float64") /* ty=Tensor[(48, 8), float64] */;
  %140 = cast(meta[relay.Constant][7] /* ty=Tensor[(220), uint32] */, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %141 = reshape(%139, newshape=[16, 4, 6]) /* ty=Tensor[(16, 4, 6), float64] */;
  %142 = reshape(%140, newshape=[220]) /* ty=Tensor[(220), uint32] */;
  %143 = @func_1219(%141, %142) /* ty=(Tensor[(16, 4, 6), bool], Tensor[(330), bool], Tensor[(10, 11, 2), bool], Tensor[(220), uint32], Tensor[(10, 11, 2), bool], Tensor[(10, 11, 3), float32], Tensor[(10, 11, 3), bool]) */;
  %144 = @func_9231() /* ty=Tensor[(350), float32] */;
  %145 = %138.0;
  %146 = %143.2;
  (%144, %145, %146, %var_10745, meta[relay.Constant][7] /* ty=Tensor[(220), uint32] */)
}

def @func_14595() -> (Tensor[(350), float64],) {
  %147 = @func_14346() /* ty=(Tensor[(350), float64], Tensor[(220), uint32]) */;
  %148 = %147.0;
  (%148,)
}

def @func_3652(%var_3597: Tensor[(220), uint32]) -> (Tensor[(220), float64], Tensor[(10, 11, 3), float32], Tensor[(384), float64], Tensor[(350), uint32], Tensor[(220), float64], Tensor[(350), uint32]) {
  %149 = @func_3389() /* ty=(Tensor[(350), float32], Tensor[(13, 8, 8), float64], Tensor[(384), float64], Tensor[(220), uint32]) */;
  %150 = %149.3;
  %151 = cast(%var_3597, dtype="float64") /* ty=Tensor[(220), float64] */;
  %152 = shape_of(%150, dtype="int32") /* ty=Tensor[(1), int32] */;
  %153 = cast(%150, dtype="float64") /* ty=Tensor[(220), float64] */;
  %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?), float64] */;
  %155 = cast(meta[relay.Constant][8] /* ty=Tensor[(384), float64] */, dtype="float64") /* ty=Tensor[(384), float64] */;
  %156 = cast(%var_3597, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %157 = cast(meta[relay.Constant][9] /* ty=Tensor[(350), uint32] */, dtype="uint32") /* ty=Tensor[(350), uint32] */;
  %158 = reshape(%155, newshape=[384]) /* ty=Tensor[(384), float64] */;
  %159 = reshape(%156, newshape=[220]) /* ty=Tensor[(220), uint32] */;
  %160 = reshape(%157, newshape=[350]) /* ty=Tensor[(350), uint32] */;
  %161 = @func_3072(%158, %159, %160) /* ty=(Tensor[(10, 3, 12), bool], Tensor[(10, 11, 3), float32], Tensor[(384), float64], Tensor[(13, 8, 8), float64], Tensor[(832), float64], Tensor[(14, 5, 5), uint32], Tensor[(350), uint32], Tensor[(220), float64]) */;
  %162 = @func_3441() /* ty=(Tensor[(220), float64],) */;
  %163 = power(%153, %154) /* ty=Tensor[(220), float64] */;
  %164 = %161.1;
  %165 = %162.0;
  %166 = @func_3206() /* ty=Tensor[(350), uint32] */;
  (%163, %164, meta[relay.Constant][8] /* ty=Tensor[(384), float64] */, meta[relay.Constant][9] /* ty=Tensor[(350), uint32] */, %165, %166)
}

def @func_7053() -> Tensor[(220), float64] {
  @func_5540() /* ty=Tensor[(220), float64] */
}

def @func_14662() -> (Tensor[(220), float64], Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(350), uint8], Tensor[(9, 5, 4), bool], Tensor[(180), float32]) {
  %167 = @func_4038() /* ty=(Tensor[(350), uint32], Tensor[(350), uint32]) */;
  %168 = cast(meta[relay.Constant][10] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %169 = cast(meta[relay.Constant][10] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %170 = reshape(%168, newshape=[9, 5, 4]) /* ty=Tensor[(9, 5, 4), float32] */;
  %171 = reshape(%169, newshape=[9, 5, 4]) /* ty=Tensor[(9, 5, 4), float32] */;
  %172 = @func_14128() /* ty=Tensor[(220), float64] */;
  %173 = %167.1;
  %174 = @func_3229() /* ty=Tensor[(350), uint32] */;
  %175 = @func_4778() /* ty=Tensor[(350), uint8] */;
  %176 = @func_4005(%170, %171) /* ty=Tensor[(9, 5, 4), bool] */;
  (%172, %173, %174, %175, %176, meta[relay.Constant][10] /* ty=Tensor[(180), float32] */)
}

def @func_6875(%var_6865: uint16, %var_6866: Tensor[(9, 1, 3), uint16]) -> Tensor[(9, 1, 3), uint16] {
  %177 = cast(%var_6865, dtype="uint16") /* ty=uint16 */;
  %178 = cast(%var_6866, dtype="uint16") /* ty=Tensor[(9, 1, 3), uint16] */;
  multiply(%177, %178) /* ty=Tensor[(9, 1, 3), uint16] */
}

def @func_7173(%var_7152: Tensor[(220), float64]) -> (Tensor[(220), uint64], Tensor[(350), uint32], Tensor[(13, 8, 8), float64], Tensor[(832), float64]) {
  %179 = @func_5540() /* ty=Tensor[(220), float64] */;
  %180 = cast(%var_7152, dtype="uint64") /* ty=Tensor[(220), uint64] */;
  %181 = shape_of(%179, dtype="int32") /* ty=Tensor[(1), int32] */;
  %182 = cast(%179, dtype="uint64") /* ty=Tensor[(220), uint64] */;
  %183 = dyn.reshape(%180, %181, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %184 = @func_3467() /* ty=(Tensor[(350), uint32],) */;
  %185 = cast(meta[relay.Constant][11] /* ty=Tensor[(832), float64] */, dtype="float64") /* ty=Tensor[(832), float64] */;
  %186 = reshape(%185, newshape=[13, 8, 8]) /* ty=Tensor[(13, 8, 8), float64] */;
  %187 = right_shift(%182, %183) /* ty=Tensor[(220), uint64] */;
  %188 = %184.0;
  %189 = @func_2433(%186) /* ty=Tensor[(13, 8, 8), float64] */;
  (%187, %188, %189, meta[relay.Constant][11] /* ty=Tensor[(832), float64] */)
}

def @func_5965() -> (Tensor[(16, 16, 15), int16],) {
  %190 = @func_5934() /* ty=(Tensor[(16, 16, 15), int16], Tensor[(350), float64], Tensor[(350), uint32]) */;
  %191 = %190.0;
  (%191,)
}

def @func_8627(%var_8619: Tensor[(180), bool]) -> (Tensor[(220), uint32], Tensor[(350), float64], Tensor[(6, 30), float32], Tensor[(180), bool]) {
  %192 = @func_5774() /* ty=(Tensor[(220), uint32],) */;
  %193 = @func_3668() /* ty=Tensor[(350), uint32] */;
  %194 = cast(%193, dtype="float64") /* ty=Tensor[(350), float64] */;
  %195 = cast(%var_8619, dtype="bool") /* ty=Tensor[(180), bool] */;
  %196 = reshape(%195, newshape=[9, 5, 4]) /* ty=Tensor[(9, 5, 4), bool] */;
  %197 = @func_5373(%196) /* ty=(Tensor[(220), uint32], Tensor[(6, 30), float32], Tensor[(9, 5, 4), uint32]) */;
  %198 = %192.0;
  %199 = log10(%194) /* ty=Tensor[(350), float64] */;
  %200 = %197.1;
  (%198, %199, %200, %var_8619)
}

def @func_12729() -> (Tensor[(350), uint32], Tensor[(330), uint64], Tensor[(1, 3840), int16], Tensor[(55, 6), uint16], Tensor[(220), bool], Tensor[(220), float64]) {
  %201 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 3840), int16] */, dtype="int16") /* ty=Tensor[(1, 3840), int16] */;
  %202 = reshape(%201, newshape=[3840]) /* ty=Tensor[(3840), int16] */;
  %203 = @func_5721(%202) /* ty=(Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(220), float64], Tensor[(16, 16, 15), float64], Tensor[(3840), int16], Tensor[(350), uint32], Tensor[(330), uint64], Tensor[(350), uint32], Tensor[(13, 8, 8), float64], Tensor[(832), float64]) */;
  %204 = %203.6;
  %205 = cast(%204, dtype="uint64") /* ty=Tensor[(330), uint64] */;
  %206 = reshape(%205, newshape=[55, 6]) /* ty=Tensor[(55, 6), uint64] */;
  %207 = @func_12678(%206) /* ty=(Tensor[(55, 6), uint16],) */;
  %208 = cast(meta[relay.Constant][13] /* ty=Tensor[(220), float64] */, dtype="float64") /* ty=Tensor[(220), float64] */;
  %209 = reshape(%208, newshape=[220]) /* ty=Tensor[(220), float64] */;
  %210 = @func_7302(%209) /* ty=(Tensor[(220), bool],) */;
  %211 = @func_7930() /* ty=Tensor[(350), uint32] */;
  %212 = %207.0;
  %213 = %210.0;
  (%211, %204, meta[relay.Constant][12] /* ty=Tensor[(1, 3840), int16] */, %212, %213, meta[relay.Constant][13] /* ty=Tensor[(220), float64] */)
}

def @func_6826() -> (Tensor[(220), float64],) {
  %214 = @func_3441() /* ty=(Tensor[(220), float64],) */;
  %215 = %214.0;
  (%215,)
}

def @func_5859() -> Tensor[(384), float64] {
  %216 = @func_3409() /* ty=(Tensor[(384), float64],) */;
  %216.0
}

def @func_3448() -> Tensor[(350), uint32] {
  %217 = @func_3090() /* ty=(Tensor[(350), uint32],) */;
  %217.0
}

def @func_4233(%var_4214: Tensor[(14, 5, 5), uint32], %var_4221: Tensor[(220, 1), uint32], %var_4222: Tensor[(330), uint64]) -> (Tensor[(350), uint32], Tensor[(14, 5, 5), bool], Tensor[(350), uint32], Tensor[(220, 1), uint32], Tensor[(330), uint64], Tensor[(14, 5, 5), float32]) {
  %218 = @func_4038() /* ty=(Tensor[(350), uint32], Tensor[(350), uint32]) */;
  %219 = %218.0;
  %220 = cast(%219, dtype="uint32") /* ty=Tensor[(350), uint32] */;
  %221 = reshape(%220, newshape=[14, 5, 5]) /* ty=Tensor[(14, 5, 5), uint32] */;
  %222 = @func_1256(%221) /* ty=Tensor[(14, 5, 5), uint32] */;
  %223 = cast(%var_4214, dtype="bool") /* ty=Tensor[(14, 5, 5), bool] */;
  %224 = shape_of(%222, dtype="int32") /* ty=Tensor[(3), int32] */;
  %225 = cast(%222, dtype="bool") /* ty=Tensor[(14, 5, 5), bool] */;
  %226 = dyn.reshape(%223, %224, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %227 = cast(%var_4221, dtype="uint32") /* ty=Tensor[(220, 1), uint32] */;
  %228 = cast(%var_4222, dtype="uint64") /* ty=Tensor[(330), uint64] */;
  %229 = cast(%var_4221, dtype="uint32") /* ty=Tensor[(220, 1), uint32] */;
  %230 = reshape(%227, newshape=[220]) /* ty=Tensor[(220), uint32] */;
  %231 = reshape(%228, newshape=[330]) /* ty=Tensor[(330), uint64] */;
  %232 = reshape(%229, newshape=[220]) /* ty=Tensor[(220), uint32] */;
  %233 = @func_3886(%230, %231, %232) /* ty=(Tensor[(13, 8, 8), float64], Tensor[(350), uint32], Tensor[(350), int64], Tensor[(350), uint32], Tensor[(10, 11, 3), bool], Tensor[(220), bool], Tensor[(220), int16], Tensor[(330), float64], Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(350), uint32]) */;
  %234 = cast(%222, dtype="float32") /* ty=Tensor[(14, 5, 5), float32] */;
  %235 = less(%225, %226) /* ty=Tensor[(14, 5, 5), bool] */;
  %236 = %233.10;
  %237 = log2(%234) /* ty=Tensor[(14, 5, 5), float32] */;
  (%219, %235, %236, %var_4221, %var_4222, %237)
}

def @func_4477(%var_4458: Tensor[(5, 66), uint64], %var_4466: Tensor[(5, 66), uint64]) -> (Tensor[(350), uint32], Tensor[(10, 11, 3), bool], Tensor[(5, 66), float32]) {
  %238 = cast(%var_4458, dtype="uint64") /* ty=Tensor[(5, 66), uint64] */;
  %239 = cast(%var_4458, dtype="uint64") /* ty=Tensor[(5, 66), uint64] */;
  %240 = reshape(%238, newshape=[10, 11, 3]) /* ty=Tensor[(10, 11, 3), uint64] */;
  %241 = reshape(%239, newshape=[10, 11, 3]) /* ty=Tensor[(10, 11, 3), uint64] */;
  %242 = cast(%var_4466, dtype="float32") /* ty=Tensor[(5, 66), float32] */;
  %243 = shape_of(%var_4458, dtype="int32") /* ty=Tensor[(2), int32] */;
  %244 = cast(%var_4458, dtype="float32") /* ty=Tensor[(5, 66), float32] */;
  %245 = dyn.reshape(%242, %243, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %246 = @func_3951() /* ty=Tensor[(350), uint32] */;
  %247 = @func_191(%240, %241) /* ty=Tensor[(10, 11, 3), bool] */;
  %248 = floor_mod(%244, %245) /* ty=Tensor[(5, 66), float32] */;
  (%246, %247, %248)
}

def @func_8170() -> (Tensor[(16, 16, 15), int16],) {
  %249 = @func_7270() /* ty=(Tensor[(16, 16, 15), int16],) */;
  %250 = %249.0;
  (%250,)
}

def @func_10175() -> Tensor[(384), float64] {
  @func_7514() /* ty=Tensor[(384), float64] */
}

def @func_7204() -> (Tensor[(55, 6), uint64],) {
  %251 = @func_6415() /* ty=(Tensor[(350), uint32], Tensor[(330), uint64], Tensor[(220), uint32], Tensor[(55, 6), uint64]) */;
  %252 = %251.3;
  (%252,)
}

def @func_12065() -> (Tensor[(350), uint32], Tensor[(350), float32]) {
  %253 = @func_3090() /* ty=(Tensor[(350), uint32],) */;
  %254 = @func_7368() /* ty=(Tensor[(350), float32],) */;
  %255 = %253.0;
  %256 = %254.0;
  (%255, %256)
}

def @func_6604() -> (Tensor[(350), float32], Tensor[(350), uint32]) {
  %257 = @func_6379() /* ty=(Tensor[(350), float32], Tensor[(16, 16, 15), int16]) */;
  %258 = %257.0;
  %259 = @func_3951() /* ty=Tensor[(350), uint32] */;
  (%258, %259)
}

def @func_8862() -> Tensor[(220), float32] {
  %260 = @func_7664() /* ty=(Tensor[(220), float32],) */;
  %260.0
}

def @func_5884(%var_5876: Tensor[(220), float64]) -> Tensor[(220), uint8] {
  %261 = @func_3441() /* ty=(Tensor[(220), float64],) */;
  %262 = %261.0;
  %263 = cast(%var_5876, dtype="uint8") /* ty=Tensor[(220), uint8] */;
  %264 = shape_of(%262, dtype="int32") /* ty=Tensor[(1), int32] */;
  %265 = cast(%262, dtype="uint8") /* ty=Tensor[(220), uint8] */;
  %266 = dyn.reshape(%263, %264, newshape=[]) /* ty=Tensor[(?), uint8] */;
  subtract(%265, %266) /* ty=Tensor[(220), uint8] */
}

def @func_9943(%var_9923: Tensor[(350), uint32]) -> (Tensor[(350), uint32], Tensor[(220), float32]) {
  %267 = @func_6604() /* ty=(Tensor[(350), float32], Tensor[(350), uint32]) */;
  %268 = %267.1;
  %269 = cast(%var_9923, dtype="uint32") /* ty=Tensor[(350), uint32] */;
  %270 = shape_of(%268, dtype="int32") /* ty=Tensor[(1), int32] */;
  %271 = cast(%268, dtype="uint32") /* ty=Tensor[(350), uint32] */;
  %272 = dyn.reshape(%269, %270, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %273 = bitwise_or(%271, %272) /* ty=Tensor[(350), uint32] */;
  %274 = @func_6357() /* ty=Tensor[(220), float32] */;
  (%273, %274)
}

def @func_5583() -> Tensor[(16, 16, 15), float32] {
  %275 = @func_3978() /* ty=Tensor[(16, 16, 15), int16] */;
  %276 = cast(%275, dtype="float32") /* ty=Tensor[(16, 16, 15), float32] */;
  asin(%276) /* ty=Tensor[(16, 16, 15), float32] */
}

def @func_5135() -> (Tensor[(350), uint8],) {
  %277 = @func_5067() /* ty=(Tensor[(384), float64], Tensor[(350), uint8]) */;
  %278 = %277.1;
  (%278,)
}

def @func_11113() -> (Tensor[(220), float64], Tensor[(220), float64]) {
  %279 = @func_9082() /* ty=(Tensor[(220), float64], Tensor[(16, 16, 15), float32], Tensor[(220), float64], Tensor[(15, 9, 8), float64], Tensor[(1080), float64], Tensor[(350), float64], Tensor[(220), float64], Tensor[(350), uint32], Tensor[(350), uint8]) */;
  %280 = @func_9300() /* ty=(Tensor[(220), float64], Tensor[(350), float32], Tensor[(220), float64]) */;
  %281 = %279.2;
  %282 = %280.2;
  (%281, %282)
}

def @func_13953() -> Tensor[(350), uint32] {
  %283 = @func_12860() /* ty=(Tensor[(350), uint32],) */;
  %283.0
}

def @func_2433(%var_2427: Tensor[(13, 8, 8), float64]) -> Tensor[(13, 8, 8), float64] {
  %284 = cast(%var_2427, dtype="float64") /* ty=Tensor[(13, 8, 8), float64] */;
  erf(%284) /* ty=Tensor[(13, 8, 8), float64] */
}

def @func_10904() -> Tensor[(384), float64] {
  %285 = @func_9127() /* ty=(Tensor[(384), float64],) */;
  %285.0
}

def @func_7241() -> (Tensor[(350), uint32], Tensor[(330), uint64], Tensor[(5, 66), uint8]) {
  %286 = @func_4038() /* ty=(Tensor[(350), uint32], Tensor[(350), uint32]) */;
  %287 = cast(meta[relay.Constant][14] /* ty=Tensor[(5, 66), uint64] */, dtype="uint64") /* ty=Tensor[(5, 66), uint64] */;
  %288 = reshape(%287, newshape=[330]) /* ty=Tensor[(330), uint64] */;
  %289 = @func_950(%288) /* ty=(Tensor[(1, 4, 3), float32], Tensor[(10, 11, 3), bool], Tensor[(330), uint64]) */;
  %290 = cast(meta[relay.Constant][15] /* ty=Tensor[(5, 66), uint64] */, dtype="uint8") /* ty=Tensor[(5, 66), uint8] */;
  %291 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(5, 66), uint64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %292 = cast(meta[relay.Constant][14] /* ty=Tensor[(5, 66), uint64] */, dtype="uint8") /* ty=Tensor[(5, 66), uint8] */;
  %293 = dyn.reshape(%290, %291, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %294 = %286.0;
  %295 = %289.2;
  %296 = subtract(%292, %293) /* ty=Tensor[(5, 66), uint8] */;
  (%294, %295, %296)
}

def @func_4070() -> Tensor[(350), uint8] {
  %297 = @func_3206() /* ty=Tensor[(350), uint32] */;
  %298 = cast(%297, dtype="uint32") /* ty=Tensor[(350), uint32] */;
  %299 = reshape(%298, newshape=[14, 5, 5]) /* ty=Tensor[(14, 5, 5), uint32] */;
  %300 = @func_1256(%299) /* ty=Tensor[(14, 5, 5), uint32] */;
  %301 = cast(%300, dtype="uint8") /* ty=Tensor[(14, 5, 5), uint8] */;
  %302 = shape_of(%297, dtype="int32") /* ty=Tensor[(1), int32] */;
  %303 = cast(%297, dtype="uint8") /* ty=Tensor[(350), uint8] */;
  %304 = dyn.reshape(%301, %302, newshape=[]) /* ty=Tensor[(?), uint8] */;
  maximum(%303, %304) /* ty=Tensor[(350), uint8] */
}

def @func_4990() -> Tensor[(350), float64] {
  %305 = @func_3090() /* ty=(Tensor[(350), uint32],) */;
  %306 = %305.0;
  %307 = cast(%306, dtype="float64") /* ty=Tensor[(350), float64] */;
  asin(%307) /* ty=Tensor[(350), float64] */
}

def @func_5934() -> (Tensor[(16, 16, 15), int16], Tensor[(350), float64], Tensor[(350), uint32]) {
  %308 = @func_5028() /* ty=(Tensor[(16, 16, 15), int16],) */;
  %309 = @func_5760() /* ty=(Tensor[(350), float64], Tensor[(220), float64]) */;
  %310 = %308.0;
  %311 = %309.0;
  %312 = @func_3894() /* ty=Tensor[(350), uint32] */;
  (%310, %311, %312)
}

def @func_4144() -> (Tensor[(350), float32], Tensor[(14, 5, 5), uint32]) {
  %313 = @func_3389() /* ty=(Tensor[(350), float32], Tensor[(13, 8, 8), float64], Tensor[(384), float64], Tensor[(220), uint32]) */;
  %314 = %313.0;
  %315 = cast(%314, dtype="uint32") /* ty=Tensor[(350), uint32] */;
  %316 = reshape(%315, newshape=[14, 5, 5]) /* ty=Tensor[(14, 5, 5), uint32] */;
  %317 = @func_1256(%316) /* ty=Tensor[(14, 5, 5), uint32] */;
  (%314, %317)
}

def @func_5373(%var_5367: Tensor[(9, 5, 4), bool]) -> (Tensor[(220), uint32], Tensor[(6, 30), float32], Tensor[(9, 5, 4), uint32]) {
  %318 = cast(meta[relay.Constant][16] /* ty=Tensor[(6, 30), float32] */, dtype="float32") /* ty=Tensor[(6, 30), float32] */;
  %319 = cast(meta[relay.Constant][16] /* ty=Tensor[(6, 30), float32] */, dtype="float32") /* ty=Tensor[(6, 30), float32] */;
  %320 = reshape(%318, newshape=[9, 5, 4]) /* ty=Tensor[(9, 5, 4), float32] */;
  %321 = reshape(%319, newshape=[9, 5, 4]) /* ty=Tensor[(9, 5, 4), float32] */;
  %322 = @func_4005(%320, %321) /* ty=Tensor[(9, 5, 4), bool] */;
  %323 = cast(%var_5367, dtype="uint32") /* ty=Tensor[(9, 5, 4), uint32] */;
  %324 = shape_of(%322, dtype="int32") /* ty=Tensor[(3), int32] */;
  %325 = cast(%322, dtype="uint32") /* ty=Tensor[(9, 5, 4), uint32] */;
  %326 = dyn.reshape(%323, %324, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %327 = @func_4612() /* ty=Tensor[(220), uint32] */;
  %328 = bitwise_and(%325, %326) /* ty=Tensor[(9, 5, 4), uint32] */;
  (%327, meta[relay.Constant][16] /* ty=Tensor[(6, 30), float32] */, %328)
}

def @func_5455(%var_5438: Tensor[(330), uint64]) -> (Tensor[(350), uint32], Tensor[(350), float32], Tensor[(330), uint64], Tensor[(330), uint64]) {
  %329 = @func_3389() /* ty=(Tensor[(350), float32], Tensor[(13, 8, 8), float64], Tensor[(384), float64], Tensor[(220), uint32]) */;
  %330 = cast(%var_5438, dtype="uint64") /* ty=Tensor[(330), uint64] */;
  %331 = reshape(%330, newshape=[330]) /* ty=Tensor[(330), uint64] */;
  %332 = @func_950(%331) /* ty=(Tensor[(1, 4, 3), float32], Tensor[(10, 11, 3), bool], Tensor[(330), uint64]) */;
  %333 = @func_4403() /* ty=Tensor[(350), uint32] */;
  %334 = %329.0;
  %335 = %332.2;
  (%333, %334, %335, %var_5438)
}

def @func_4934() -> Tensor[(220), float32] {
  %336 = @func_4612() /* ty=Tensor[(220), uint32] */;
  %337 = cast(meta[relay.Constant][17] /* ty=Tensor[(220), uint32] */, dtype="bool") /* ty=Tensor[(220), bool] */;
  %338 = shape_of(%336, dtype="int32") /* ty=Tensor[(1), int32] */;
  %339 = cast(%336, dtype="bool") /* ty=Tensor[(220), bool] */;
  %340 = dyn.reshape(%337, %338, newshape=[]) /* ty=Tensor[(?), bool] */;
  %341 = greater(%339, %340) /* ty=Tensor[(220), bool] */;
  %342 = cast(%341, dtype="float32") /* ty=Tensor[(220), float32] */;
  %343 = log(%342) /* ty=Tensor[(220), float32] */;
  %344 = cast(%343, dtype="float32") /* ty=Tensor[(220), float32] */;
  cosh(%344) /* ty=Tensor[(220), float32] */
}

def @func_11446() -> (Tensor[(384), float64], Tensor[(350), uint8]) {
  %345 = @func_10175() /* ty=Tensor[(384), float64] */;
  %346 = @func_4070() /* ty=Tensor[(350), uint8] */;
  (%345, %346)
}

def @func_5760() -> (Tensor[(350), float64], Tensor[(220), float64]) {
  %347 = @func_3441() /* ty=(Tensor[(220), float64],) */;
  %348 = @func_4990() /* ty=Tensor[(350), float64] */;
  %349 = %347.0;
  (%348, %349)
}

def @func_9730(%var_9695: Tensor[(4, 5, 5), int16], %var_9724: Tensor[(220), uint32]) -> (Tensor[(4, 5, 5), int16], Tensor[(350), uint32], Tensor[(350), int64], Tensor[(220), uint32], Tensor[(384), float64]) {
  %350 = cast(%var_9695, dtype="int16") /* ty=Tensor[(4, 5, 5), int16] */;
  %351 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(4, 5, 5), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %352 = cast(meta[relay.Constant][18] /* ty=Tensor[(4, 5, 5), int16] */, dtype="int16") /* ty=Tensor[(4, 5, 5), int16] */;
  %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %354 = @func_3090() /* ty=(Tensor[(350), uint32],) */;
  %355 = cast(%var_9724, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %356 = reshape(%355, newshape=[1, 220]) /* ty=Tensor[(1, 220), uint32] */;
  %357 = @func_3317(%356) /* ty=(Tensor[(10, 11, 3), bool], Tensor[(10, 11, 2), bool], Tensor[(1, 220), uint32], Tensor[(16, 16, 15), int16], Tensor[(350), int64]) */;
  %358 = @func_3409() /* ty=(Tensor[(384), float64],) */;
  %359 = bitwise_xor(%352, %353) /* ty=Tensor[(4, 5, 5), int16] */;
  %360 = %354.0;
  %361 = %357.4;
  %362 = %358.0;
  (%359, %360, %361, %var_9724, %362)
}

def @func_11542() -> (Tensor[(220), float64],) {
  %363 = @func_9754() /* ty=(Tensor[(220), float64],) */;
  %364 = %363.0;
  (%364,)
}

def @func_8033() -> (Tensor[(220), uint32], Tensor[(350), uint32]) {
  %365 = @func_5774() /* ty=(Tensor[(220), uint32],) */;
  %366 = %365.0;
  %367 = @func_3206() /* ty=Tensor[(350), uint32] */;
  (%366, %367)
}

def @func_10682() -> (Tensor[(16, 16, 15), int16],) {
  %368 = @func_8125() /* ty=(Tensor[(16, 16, 15), int16],) */;
  %369 = %368.0;
  (%369,)
}

def @func_9689() -> (Tensor[(220), float64],) {
  %370 = @func_9300() /* ty=(Tensor[(220), float64], Tensor[(350), float32], Tensor[(220), float64]) */;
  %371 = %370.0;
  (%371,)
}

def @func_6144(%var_6137: Tensor[(350), float64]) -> (Tensor[(350), float32],) {
  %372 = @func_5760() /* ty=(Tensor[(350), float64], Tensor[(220), float64]) */;
  %373 = %372.0;
  %374 = cast(%var_6137, dtype="float32") /* ty=Tensor[(350), float32] */;
  %375 = shape_of(%373, dtype="int32") /* ty=Tensor[(1), int32] */;
  %376 = cast(%373, dtype="float32") /* ty=Tensor[(350), float32] */;
  %377 = dyn.reshape(%374, %375, newshape=[]) /* ty=Tensor[(?), float32] */;
  %378 = power(%376, %377) /* ty=Tensor[(350), float32] */;
  (%378,)
}

def @func_11303(%var_11220: Tensor[(384), float64], %var_11268: Tensor[(3840), int16]) -> (Tensor[(220), float64], Tensor[(220), float32], Tensor[(330), uint64], Tensor[(330), bool], Tensor[(384), float64], Tensor[(350), float64], Tensor[(350), float32], Tensor[(350), float32], Tensor[(832), float64], Tensor[(3840), float32], Tensor[(350, 832), int32], Tensor[(350), uint32]) {
  %379 = @func_5540() /* ty=Tensor[(220), float64] */;
  %380 = cast(%379, dtype="float64") /* ty=Tensor[(220), float64] */;
  %381 = @func_9477() /* ty=(Tensor[(384), float64], Tensor[(330), uint64], Tensor[(330), uint64], Tensor[(350), uint32], Tensor[(350), uint8], Tensor[(350), uint8]) */;
  %382 = cast(%var_11220, dtype="float64") /* ty=Tensor[(384), float64] */;
  %383 = cast(%379, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %384 = reshape(%382, newshape=[16, 4, 6]) /* ty=Tensor[(16, 4, 6), float64] */;
  %385 = reshape(%383, newshape=[220]) /* ty=Tensor[(220), uint32] */;
  %386 = @func_1219(%384, %385) /* ty=(Tensor[(16, 4, 6), bool], Tensor[(330), bool], Tensor[(10, 11, 2), bool], Tensor[(220), uint32], Tensor[(10, 11, 2), bool], Tensor[(10, 11, 3), float32], Tensor[(10, 11, 3), bool]) */;
  %387 = @func_7368() /* ty=(Tensor[(350), float32],) */;
  %388 = cast(%var_11268, dtype="int16") /* ty=Tensor[(3840), int16] */;
  %389 = reshape(%388, newshape=[3840]) /* ty=Tensor[(3840), int16] */;
  %390 = @func_5721(%389) /* ty=(Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(220), float64], Tensor[(16, 16, 15), float64], Tensor[(3840), int16], Tensor[(350), uint32], Tensor[(330), uint64], Tensor[(350), uint32], Tensor[(13, 8, 8), float64], Tensor[(832), float64]) */;
  %391 = cast(meta[relay.Constant][19] /* ty=Tensor[(3840), int16] */, dtype="float32") /* ty=Tensor[(3840), float32] */;
  %392 = shape_of(%var_11268, dtype="int32") /* ty=Tensor[(1), int32] */;
  %393 = cast(%var_11268, dtype="float32") /* ty=Tensor[(3840), float32] */;
  %394 = dyn.reshape(%391, %392, newshape=[]) /* ty=Tensor[(?), float32] */;
  %395 = cast(%var_11220, dtype="float64") /* ty=Tensor[(384), float64] */;
  %396 = @func_10981() /* ty=Tensor[(350), float64] */;
  %397 = cast(%396, dtype="uint32") /* ty=Tensor[(350), uint32] */;
  %398 = reshape(%395, newshape=[384]) /* ty=Tensor[(384), float64] */;
  %399 = reshape(%397, newshape=[350, 1]) /* ty=Tensor[(350, 1), uint32] */;
  %400 = @func_9343(%398, %399) /* ty=(Tensor[(384), float64], Tensor[(350, 220), uint32], Tensor[(350, 832), float64]) */;
  %401 = %400.2;
  %402 = cast(%401, dtype="float64") /* ty=Tensor[(350, 832), float64] */;
  %403 = rsqrt(%402) /* ty=Tensor[(350, 832), float64] */;
  %404 = cast(%401, dtype="int32") /* ty=Tensor[(350, 832), int32] */;
  %405 = shape_of(%403, dtype="int32") /* ty=Tensor[(2), int32] */;
  %406 = cast(%403, dtype="int32") /* ty=Tensor[(350, 832), int32] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %408 = @func_4393() /* ty=(Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(1, 220), uint32], Tensor[(330), uint64], Tensor[(10, 11, 3), bool]) */;
  %409 = exp(%380) /* ty=Tensor[(220), float64] */;
  %410 = @func_8862() /* ty=Tensor[(220), float32] */;
  %411 = %381.2;
  %412 = %386.1;
  %413 = @func_6809() /* ty=Tensor[(350), float32] */;
  %414 = %387.0;
  %415 = %390.9;
  %416 = power(%393, %394) /* ty=Tensor[(3840), float32] */;
  %417 = logical_xor(%406, %407) /* ty=Tensor[(350, 832), int32] */;
  %418 = %408.1;
  (%409, %410, %411, %412, %var_11220, %396, %413, %414, %415, %416, %417, %418)
}

def @func_10719() -> (Tensor[(220), float32],) {
  %419 = @func_6357() /* ty=Tensor[(220), float32] */;
  (%419,)
}

def @func_4349(%var_4341: Tensor[(5, 44), int32]) -> (Tensor[(350), uint32], Tensor[(350), bool], Tensor[(350), uint32], Tensor[(5, 44), bool], Tensor[(5, 44), int16]) {
  %420 = @func_3951() /* ty=Tensor[(350), uint32] */;
  %421 = cast(%420, dtype="uint32") /* ty=Tensor[(350), uint32] */;
  %422 = cast(meta[relay.Constant][20] /* ty=Tensor[(5, 44), uint32] */, dtype="uint32") /* ty=Tensor[(5, 44), uint32] */;
  %423 = reshape(%421, newshape=[350]) /* ty=Tensor[(350), uint32] */;
  %424 = reshape(%422, newshape=[220]) /* ty=Tensor[(220), uint32] */;
  %425 = @func_3535(%423, %424) /* ty=(Tensor[(350), bool], Tensor[(16, 16, 15), int16], Tensor[(220), uint32], Tensor[(330), uint64], Tensor[(5, 66), uint64]) */;
  %426 = cast(meta[relay.Constant][21] /* ty=Tensor[(5, 44), uint32] */, dtype="bool") /* ty=Tensor[(5, 44), bool] */;
  %427 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(5, 44), uint32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %428 = cast(meta[relay.Constant][20] /* ty=Tensor[(5, 44), uint32] */, dtype="bool") /* ty=Tensor[(5, 44), bool] */;
  %429 = dyn.reshape(%426, %427, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %430 = cast(meta[relay.Constant][21] /* ty=Tensor[(5, 44), uint32] */, dtype="int32") /* ty=Tensor[(5, 44), int32] */;
  %431 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(5, 44), uint32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %432 = cast(meta[relay.Constant][20] /* ty=Tensor[(5, 44), uint32] */, dtype="int32") /* ty=Tensor[(5, 44), int32] */;
  %433 = dyn.reshape(%430, %431, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %434 = right_shift(%432, %433) /* ty=Tensor[(5, 44), int32] */;
  %435 = cast(%var_4341, dtype="int16") /* ty=Tensor[(5, 44), int16] */;
  %436 = shape_of(%434, dtype="int32") /* ty=Tensor[(2), int32] */;
  %437 = cast(%434, dtype="int16") /* ty=Tensor[(5, 44), int16] */;
  %438 = dyn.reshape(%435, %436, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %439 = %425.0;
  %440 = @func_3448() /* ty=Tensor[(350), uint32] */;
  %441 = less(%428, %429) /* ty=Tensor[(5, 44), bool] */;
  %442 = maximum(%437, %438) /* ty=Tensor[(5, 44), int16] */;
  (%420, %439, %440, %441, %442)
}

def @func_4612() -> Tensor[(220), uint32] {
  %443 = @func_3389() /* ty=(Tensor[(350), float32], Tensor[(13, 8, 8), float64], Tensor[(384), float64], Tensor[(220), uint32]) */;
  %443.3
}

def @func_14286(%var_14279: uint16, %var_14280: Tensor[(210), float32]) -> (Tensor[(350), float32], Tensor[(350), uint8], Tensor[(384), float64], Tensor[(5, 12, 3), uint16], uint16, Tensor[(210), float32], Tensor[(220), uint32]) {
  %444 = @func_12255() /* ty=(Tensor[(350), float32], Tensor[(220), float64], Tensor[(350), bool]) */;
  %445 = @func_9127() /* ty=(Tensor[(384), float64],) */;
  %446 = cast(%var_14279, dtype="uint16") /* ty=uint16 */;
  %447 = cast(%var_14280, dtype="float32") /* ty=Tensor[(210), float32] */;
  %448 = reshape(%446, newshape=[]) /* ty=uint16 */;
  %449 = reshape(%447, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %450 = @func_13619(%448, %449) /* ty=(Tensor[(5, 12, 3), uint16], Tensor[(3840), int16], Tensor[(210), float32], Tensor[(220), float64], Tensor[(220), float64]) */;
  %451 = @func_7568() /* ty=(Tensor[(220), uint32],) */;
  %452 = %444.0;
  %453 = @func_4778() /* ty=Tensor[(350), uint8] */;
  %454 = %445.0;
  %455 = %450.0;
  %456 = %451.0;
  (%452, %453, %454, %455, %var_14279, %var_14280, %456)
}

def @func_8929() -> (Tensor[(350), uint8], Tensor[(350), float32]) {
  %457 = @func_6379() /* ty=(Tensor[(350), float32], Tensor[(16, 16, 15), int16]) */;
  %458 = @func_7616() /* ty=Tensor[(350), uint8] */;
  %459 = %457.0;
  (%458, %459)
}

def @func_7368() -> (Tensor[(350), float32],) {
  %460 = @func_6809() /* ty=Tensor[(350), float32] */;
  (%460,)
}

def @func_3951() -> Tensor[(350), uint32] {
  %461 = @func_3467() /* ty=(Tensor[(350), uint32],) */;
  %461.0
}

def @func_7957() -> Tensor[(220), float64] {
  %462 = @func_6073() /* ty=(Tensor[(384), float64], Tensor[(220), float64]) */;
  %462.1
}

def @func_7616() -> Tensor[(350), uint8] {
  @func_4070() /* ty=Tensor[(350), uint8] */
}

def @func_9300() -> (Tensor[(220), float64], Tensor[(350), float32], Tensor[(220), float64]) {
  %463 = @func_9082() /* ty=(Tensor[(220), float64], Tensor[(16, 16, 15), float32], Tensor[(220), float64], Tensor[(15, 9, 8), float64], Tensor[(1080), float64], Tensor[(350), float64], Tensor[(220), float64], Tensor[(350), uint32], Tensor[(350), uint8]) */;
  %464 = @func_4144() /* ty=(Tensor[(350), float32], Tensor[(14, 5, 5), uint32]) */;
  %465 = %463.0;
  %466 = %464.0;
  %467 = @func_7053() /* ty=Tensor[(220), float64] */;
  (%465, %466, %467)
}

def @func_9996() -> (Tensor[(220), float64], Tensor[(350), uint32]) {
  %468 = @func_6781() /* ty=(Tensor[(220), float64],) */;
  %469 = %468.0;
  %470 = @func_8637() /* ty=Tensor[(350), uint32] */;
  (%469, %470)
}

def @func_1546(%var_1476: Tensor[(1, 16, 5), float64], %var_1477: Tensor[(16, 16, 5), float64]) -> (Tensor[(16, 16, 5), float64], Tensor[(14, 5, 5), uint32], Tensor[(1, 350), uint32], Tensor[(14, 5, 5), uint32], Tensor[(10, 11, 2), bool], Tensor[(220), uint32], Tensor[(10, 11, 3), bool], Tensor[(330), uint64]) {
  %471 = cast(%var_1476, dtype="float64") /* ty=Tensor[(1, 16, 5), float64] */;
  %472 = cast(%var_1477, dtype="float64") /* ty=Tensor[(16, 16, 5), float64] */;
  %473 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 350), uint32] */, dtype="uint32") /* ty=Tensor[(1, 350), uint32] */;
  %474 = reshape(%473, newshape=[14, 5, 5]) /* ty=Tensor[(14, 5, 5), uint32] */;
  %475 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 350), uint32] */, dtype="uint32") /* ty=Tensor[(1, 350), uint32] */;
  %476 = reshape(%475, newshape=[14, 5, 5]) /* ty=Tensor[(14, 5, 5), uint32] */;
  %477 = cast(meta[relay.Constant][23] /* ty=Tensor[(220), uint32] */, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %478 = cast(meta[relay.Constant][23] /* ty=Tensor[(220), uint32] */, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %479 = reshape(%477, newshape=[10, 11, 2]) /* ty=Tensor[(10, 11, 2), uint32] */;
  %480 = reshape(%478, newshape=[10, 11, 2]) /* ty=Tensor[(10, 11, 2), uint32] */;
  %481 = @func_534(%479, %480) /* ty=(Tensor[(10, 11, 2), bool],) */;
  %482 = cast(meta[relay.Constant][24] /* ty=Tensor[(330), uint64] */, dtype="uint64") /* ty=Tensor[(330), uint64] */;
  %483 = reshape(%482, newshape=[330]) /* ty=Tensor[(330), uint64] */;
  %484 = @func_950(%483) /* ty=(Tensor[(1, 4, 3), float32], Tensor[(10, 11, 3), bool], Tensor[(330), uint64]) */;
  %485 = floor_divide(%471, %472) /* ty=Tensor[(16, 16, 5), float64] */;
  %486 = @func_1256(%474) /* ty=Tensor[(14, 5, 5), uint32] */;
  %487 = @func_1256(%476) /* ty=Tensor[(14, 5, 5), uint32] */;
  %488 = %481.0;
  %489 = %484.1;
  (%485, %486, meta[relay.Constant][22] /* ty=Tensor[(1, 350), uint32] */, %487, %488, meta[relay.Constant][23] /* ty=Tensor[(220), uint32] */, %489, meta[relay.Constant][24] /* ty=Tensor[(330), uint64] */)
}

def @func_3894() -> Tensor[(350), uint32] {
  @func_3229() /* ty=Tensor[(350), uint32] */
}

def @func_6000(%var_5994: Tensor[(220), uint32], %var_5995: Tensor[(330), uint64]) -> (Tensor[(384), float64], Tensor[(350), float32], Tensor[(14, 5, 5), float32], Tensor[(220), uint32], Tensor[(330), uint64]) {
  %490 = @func_3409() /* ty=(Tensor[(384), float64],) */;
  %491 = @func_4144() /* ty=(Tensor[(350), float32], Tensor[(14, 5, 5), uint32]) */;
  %492 = %491.0;
  %493 = cast(%492, dtype="uint32") /* ty=Tensor[(350), uint32] */;
  %494 = cast(%var_5994, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %495 = cast(%var_5995, dtype="uint64") /* ty=Tensor[(330), uint64] */;
  %496 = reshape(%493, newshape=[14, 5, 5]) /* ty=Tensor[(14, 5, 5), uint32] */;
  %497 = reshape(%494, newshape=[220, 1]) /* ty=Tensor[(220, 1), uint32] */;
  %498 = reshape(%495, newshape=[330]) /* ty=Tensor[(330), uint64] */;
  %499 = @func_4233(%496, %497, %498) /* ty=(Tensor[(350), uint32], Tensor[(14, 5, 5), bool], Tensor[(350), uint32], Tensor[(220, 1), uint32], Tensor[(330), uint64], Tensor[(14, 5, 5), float32]) */;
  %500 = %490.0;
  %501 = %499.5;
  (%500, %492, %501, %var_5994, %var_5995)
}

def @func_14043() -> Tensor[(384), float64] {
  @func_5859() /* ty=Tensor[(384), float64] */
}

def @func_12843() -> (Tensor[(220), float32], Tensor[(350), uint32]) {
  %502 = @func_10719() /* ty=(Tensor[(220), float32],) */;
  %503 = @func_4393() /* ty=(Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(1, 220), uint32], Tensor[(330), uint64], Tensor[(10, 11, 3), bool]) */;
  %504 = %502.0;
  %505 = %503.0;
  (%504, %505)
}

def @func_11378() -> (Tensor[(350), uint32],) {
  %506 = @func_6511() /* ty=(Tensor[(350), uint32],) */;
  %507 = %506.0;
  (%507,)
}

def @func_13327() -> (Tensor[(350), uint32], Tensor[(330), uint64]) {
  %508 = @func_12729() /* ty=(Tensor[(350), uint32], Tensor[(330), uint64], Tensor[(1, 3840), int16], Tensor[(55, 6), uint16], Tensor[(220), bool], Tensor[(220), float64]) */;
  %509 = @func_4403() /* ty=Tensor[(350), uint32] */;
  %510 = %508.1;
  (%509, %510)
}

def @func_6357() -> Tensor[(220), float32] {
  @func_4934() /* ty=Tensor[(220), float32] */
}

def @func_14532() -> Tensor[(350), float64] {
  @func_4990() /* ty=Tensor[(350), float64] */
}

def @func_14128() -> Tensor[(220), float64] {
  @func_7957() /* ty=Tensor[(220), float64] */
}

def @func_5774() -> (Tensor[(220), uint32],) {
  %511 = @func_4612() /* ty=Tensor[(220), uint32] */;
  (%511,)
}

def @func_8467() -> (Tensor[(350), uint8], Tensor[(350), uint32]) {
  %512 = @func_5135() /* ty=(Tensor[(350), uint8],) */;
  %513 = @func_5793() /* ty=(Tensor[(350), uint32],) */;
  %514 = %512.0;
  %515 = %513.0;
  (%514, %515)
}

def @func_7270() -> (Tensor[(16, 16, 15), int16],) {
  %516 = @func_5965() /* ty=(Tensor[(16, 16, 15), int16],) */;
  %517 = %516.0;
  (%517,)
}

def @func_3668() -> Tensor[(350), uint32] {
  %518 = @func_3090() /* ty=(Tensor[(350), uint32],) */;
  %518.0
}

def @func_7897(%var_7879: Tensor[(3, 8, 14), int64], %var_7880: Tensor[(3, 8, 14), int64]) -> (Tensor[(3, 8, 14), float64], Tensor[(3, 8, 14), float64]) {
  %519 = cast(%var_7880, dtype="int64") /* ty=Tensor[(3, 8, 14), int64] */;
  %520 = shape_of(%var_7879, dtype="int32") /* ty=Tensor[(3), int32] */;
  %521 = cast(%var_7879, dtype="int64") /* ty=Tensor[(3, 8, 14), int64] */;
  %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %523 = logical_xor(%521, %522) /* ty=Tensor[(3, 8, 14), int64] */;
  %524 = cast(%523, dtype="float64") /* ty=Tensor[(3, 8, 14), float64] */;
  %525 = cast(%var_7879, dtype="float64") /* ty=Tensor[(3, 8, 14), float64] */;
  %526 = log10(%524) /* ty=Tensor[(3, 8, 14), float64] */;
  %527 = erf(%525) /* ty=Tensor[(3, 8, 14), float64] */;
  (%526, %527)
}

def @func_12826() -> (Tensor[(350), uint32], Tensor[(350), uint8], Tensor[(350), uint32], Tensor[(1, 4, 3), float32], Tensor[(330), uint64], Tensor[(350), uint8]) {
  %528 = @func_11378() /* ty=(Tensor[(350), uint32],) */;
  %529 = @func_8202() /* ty=(Tensor[(220), float64], Tensor[(350), uint8], Tensor[(3, 8, 14), float64], Tensor[(336), int64]) */;
  %530 = cast(meta[relay.Constant][25] /* ty=Tensor[(330), uint64] */, dtype="uint64") /* ty=Tensor[(330), uint64] */;
  %531 = reshape(%530, newshape=[330]) /* ty=Tensor[(330), uint64] */;
  %532 = @func_950(%531) /* ty=(Tensor[(1, 4, 3), float32], Tensor[(10, 11, 3), bool], Tensor[(330), uint64]) */;
  %533 = @func_6672() /* ty=(Tensor[(350), uint32], Tensor[(350), uint8]) */;
  %534 = %528.0;
  %535 = %529.1;
  %536 = @func_9522() /* ty=Tensor[(350), uint32] */;
  %537 = %532.0;
  %538 = %533.1;
  (%534, %535, %536, %537, meta[relay.Constant][25] /* ty=Tensor[(330), uint64] */, %538)
}

def @func_10507() -> (Tensor[(350), uint32], Tensor[(350), uint32]) {
  %539 = @func_7321() /* ty=(Tensor[(350), uint32],) */;
  %540 = %539.0;
  %541 = @func_9522() /* ty=Tensor[(350), uint32] */;
  (%540, %541)
}

def @func_13929() -> Tensor[(220), uint32] {
  %542 = @func_11060() /* ty=(Tensor[(55, 6), uint64], Tensor[(220), uint32], Tensor[(220), uint32]) */;
  %542.2
}

def @func_13619(%var_13582: uint16, %var_13592: Tensor[(210), float32]) -> (Tensor[(5, 12, 3), uint16], Tensor[(3840), int16], Tensor[(210), float32], Tensor[(220), float64], Tensor[(220), float64]) {
  %543 = cast(%var_13582, dtype="uint16") /* ty=uint16 */;
  %544 = cast(meta[relay.Constant][26] /* ty=Tensor[(5, 12, 3), uint16] */, dtype="uint16") /* ty=Tensor[(5, 12, 3), uint16] */;
  %545 = cast(%var_13592, dtype="float32") /* ty=Tensor[(210), float32] */;
  %546 = reshape(%545, newshape=[3, 14, 5]) /* ty=Tensor[(3, 14, 5), float32] */;
  %547 = @func_6283(%546) /* ty=(Tensor[(3, 14, 5), float32], Tensor[(13, 8, 8), float64], Tensor[(3840), int16]) */;
  %548 = @func_9996() /* ty=(Tensor[(220), float64], Tensor[(350), uint32]) */;
  %549 = subtract(%543, %544) /* ty=Tensor[(5, 12, 3), uint16] */;
  %550 = %547.2;
  %551 = %548.0;
  %552 = @func_7957() /* ty=Tensor[(220), float64] */;
  (%549, %550, %var_13592, %551, %552)
}

def @func_11060() -> (Tensor[(55, 6), uint64], Tensor[(220), uint32], Tensor[(220), uint32]) {
  %553 = @func_7204() /* ty=(Tensor[(55, 6), uint64],) */;
  %554 = %553.0;
  %555 = cast(%554, dtype="uint8") /* ty=Tensor[(55, 6), uint8] */;
  %556 = cast(meta[relay.Constant][27] /* ty=Tensor[(220), uint32] */, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %557 = reshape(%555, newshape=[5, 66]) /* ty=Tensor[(5, 66), uint8] */;
  %558 = reshape(%556, newshape=[220]) /* ty=Tensor[(220), uint32] */;
  %559 = @func_7786(%557, %558) /* ty=(Tensor[(5, 66), uint16], Tensor[(1, 220), uint32], Tensor[(220), uint32]) */;
  %560 = %559.2;
  (%554, %560, meta[relay.Constant][27] /* ty=Tensor[(220), uint32] */)
}

def @func_11586() -> (Tensor[(16, 16, 15), int16], Tensor[(350), uint32], Tensor[(350), uint8], Tensor[(220), float64]) {
  %561 = @func_5028() /* ty=(Tensor[(16, 16, 15), int16],) */;
  %562 = @func_6511() /* ty=(Tensor[(350), uint32],) */;
  %563 = @func_8993() /* ty=(Tensor[(350), uint8],) */;
  %564 = @func_8202() /* ty=(Tensor[(220), float64], Tensor[(350), uint8], Tensor[(3, 8, 14), float64], Tensor[(336), int64]) */;
  %565 = %561.0;
  %566 = %562.0;
  %567 = %563.0;
  %568 = %564.0;
  (%565, %566, %567, %568)
}

def @main(%var_14797: Tensor[(330), uint64], %var_14800: Tensor[(600, 4), float64], %var_14848: Tensor[(8640), float64]) -> (Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(384), float64], Tensor[(5, 44), uint32], Tensor[(330), uint64], Tensor[(330), uint64], Tensor[(220), float64], Tensor[(8640), float64], Tensor[(600, 4), float64], Tensor[(350), uint32], Tensor[(384), float64], Tensor[(600, 4), float64]) {
  %569 = @func_6672() /* ty=(Tensor[(350), uint32], Tensor[(350), uint8]) */;
  %570 = @func_4038() /* ty=(Tensor[(350), uint32], Tensor[(350), uint32]) */;
  %571 = cast(meta[relay.Constant][28] /* ty=Tensor[(5, 44), uint32] */, dtype="uint32") /* ty=Tensor[(5, 44), uint32] */;
  %572 = cast(%var_14797, dtype="uint64") /* ty=Tensor[(330), uint64] */;
  %573 = reshape(%571, newshape=[220]) /* ty=Tensor[(220), uint32] */;
  %574 = reshape(%572, newshape=[330]) /* ty=Tensor[(330), uint64] */;
  %575 = @func_6000(%573, %574) /* ty=(Tensor[(384), float64], Tensor[(350), float32], Tensor[(14, 5, 5), float32], Tensor[(220), uint32], Tensor[(330), uint64]) */;
  %576 = cast(meta[relay.Constant][28] /* ty=Tensor[(5, 44), uint32] */, dtype="uint32") /* ty=Tensor[(5, 44), uint32] */;
  %577 = cast(%var_14797, dtype="uint64") /* ty=Tensor[(330), uint64] */;
  %578 = reshape(%576, newshape=[220]) /* ty=Tensor[(220), uint32] */;
  %579 = reshape(%577, newshape=[330]) /* ty=Tensor[(330), uint64] */;
  %580 = @func_6000(%578, %579) /* ty=(Tensor[(384), float64], Tensor[(350), float32], Tensor[(14, 5, 5), float32], Tensor[(220), uint32], Tensor[(330), uint64]) */;
  %581 = %569.0;
  %582 = cast(%581, dtype="float64") /* ty=Tensor[(350), float64] */;
  %583 = cast(%var_14848, dtype="float64") /* ty=Tensor[(8640), float64] */;
  %584 = reshape(%582, newshape=[350]) /* ty=Tensor[(350), float64] */;
  %585 = reshape(%583, newshape=[8, 1080]) /* ty=Tensor[(8, 1080), float64] */;
  %586 = @func_9881(%584, %585) /* ty=(Tensor[(220), float64], Tensor[(220), float64], Tensor[(350), float32], Tensor[(350), float64], Tensor[(8, 1080), uint64]) */;
  %587 = cast(%var_14800, dtype="float64") /* ty=Tensor[(600, 4), float64] */;
  %588 = reshape(%587, newshape=[16, 10, 15]) /* ty=Tensor[(16, 10, 15), float64] */;
  %589 = @func_11663(%588) /* ty=(Tensor[(16, 10, 15), float64],) */;
  %590 = %589.0;
  %591 = cast(%590, dtype="int16") /* ty=Tensor[(16, 10, 15), int16] */;
  %592 = shape_of(%var_14800, dtype="int32") /* ty=Tensor[(2), int32] */;
  %593 = cast(%var_14800, dtype="int16") /* ty=Tensor[(600, 4), int16] */;
  %594 = dyn.reshape(%591, %592, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %595 = right_shift(%593, %594) /* ty=Tensor[(600, 4), int16] */;
  %596 = cast(%595, dtype="float64") /* ty=Tensor[(600, 4), float64] */;
  %597 = log(%596) /* ty=Tensor[(600, 4), float64] */;
  %598 = cast(%597, dtype="float64") /* ty=Tensor[(600, 4), float64] */;
  %599 = atanh(%598) /* ty=Tensor[(600, 4), float64] */;
  %600 = cast(%595, dtype="int16") /* ty=Tensor[(600, 4), int16] */;
  %601 = shape_of(%599, dtype="int32") /* ty=Tensor[(2), int32] */;
  %602 = cast(%599, dtype="int16") /* ty=Tensor[(600, 4), int16] */;
  %603 = dyn.reshape(%600, %601, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %604 = add(%602, %603) /* ty=Tensor[(600, 4), int16] */;
  %605 = cast(%604, dtype="float32") /* ty=Tensor[(600, 4), float32] */;
  %606 = acos(%605) /* ty=Tensor[(600, 4), float32] */;
  %607 = cast(%599, dtype="float64") /* ty=Tensor[(600, 4), float64] */;
  %608 = shape_of(%606, dtype="int32") /* ty=Tensor[(2), int32] */;
  %609 = cast(%606, dtype="float64") /* ty=Tensor[(600, 4), float64] */;
  %610 = dyn.reshape(%607, %608, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %611 = @func_11378() /* ty=(Tensor[(350), uint32],) */;
  %612 = cast(%606, dtype="float64") /* ty=Tensor[(600, 4), float64] */;
  %613 = %570.1;
  %614 = %575.0;
  %615 = %580.4;
  %616 = %586.1;
  %617 = power(%609, %610) /* ty=Tensor[(600, 4), float64] */;
  %618 = %611.0;
  %619 = @func_5859() /* ty=Tensor[(384), float64] */;
  %620 = cos(%612) /* ty=Tensor[(600, 4), float64] */;
  (%581, %613, %614, meta[relay.Constant][28] /* ty=Tensor[(5, 44), uint32] */, %var_14797, %615, %616, %var_14848, %617, %618, %619, %620)
}

def @func_13022() -> (Tensor[(350), float32], Tensor[(220), float32], Tensor[(220), float32], Tensor[(16, 16, 15), int16], Tensor[(350), uint32]) {
  %621 = @func_4144() /* ty=(Tensor[(350), float32], Tensor[(14, 5, 5), uint32]) */;
  %622 = cast(meta[relay.Constant][29] /* ty=Tensor[(220), float32] */, dtype="float32") /* ty=Tensor[(220), float32] */;
  %623 = reshape(%622, newshape=[220]) /* ty=Tensor[(220), float32] */;
  %624 = @func_12952(%623) /* ty=(Tensor[(350), uint32], Tensor[(16, 16, 15), int16], Tensor[(220), float32]) */;
  %625 = @func_10507() /* ty=(Tensor[(350), uint32], Tensor[(350), uint32]) */;
  %626 = %621.0;
  %627 = %624.2;
  %628 = @func_6108() /* ty=Tensor[(16, 16, 15), int16] */;
  %629 = %625.0;
  (%626, %627, meta[relay.Constant][29] /* ty=Tensor[(220), float32] */, %628, %629)
}

def @func_13039() -> (Tensor[(350), uint32],) {
  %630 = @func_5934() /* ty=(Tensor[(16, 16, 15), int16], Tensor[(350), float64], Tensor[(350), uint32]) */;
  %631 = %630.2;
  (%631,)
}

def @func_3978() -> Tensor[(16, 16, 15), int16] {
  %632 = @func_2760() /* ty=(Tensor[(16, 16, 15), int16],) */;
  %632.0
}

def @func_5037() -> (Tensor[(220), float64],) {
  %633 = @func_4491() /* ty=Tensor[(220), float64] */;
  (%633,)
}

def @func_7786(%var_7757: Tensor[(5, 66), uint8], %var_7783: Tensor[(220), uint32]) -> (Tensor[(5, 66), uint16], Tensor[(1, 220), uint32], Tensor[(220), uint32]) {
  %634 = @func_7241() /* ty=(Tensor[(350), uint32], Tensor[(330), uint64], Tensor[(5, 66), uint8]) */;
  %635 = %634.2;
  %636 = cast(%var_7757, dtype="bool") /* ty=Tensor[(5, 66), bool] */;
  %637 = shape_of(%635, dtype="int32") /* ty=Tensor[(2), int32] */;
  %638 = cast(%635, dtype="bool") /* ty=Tensor[(5, 66), bool] */;
  %639 = dyn.reshape(%636, %637, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %640 = logical_and(%638, %639) /* ty=Tensor[(5, 66), bool] */;
  %641 = cast(%640, dtype="float64") /* ty=Tensor[(5, 66), float64] */;
  %642 = atan(%641) /* ty=Tensor[(5, 66), float64] */;
  %643 = cast(%var_7757, dtype="uint16") /* ty=Tensor[(5, 66), uint16] */;
  %644 = shape_of(%642, dtype="int32") /* ty=Tensor[(2), int32] */;
  %645 = cast(%642, dtype="uint16") /* ty=Tensor[(5, 66), uint16] */;
  %646 = dyn.reshape(%643, %644, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %647 = cast(%var_7783, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %648 = reshape(%647, newshape=[1, 220]) /* ty=Tensor[(1, 220), uint32] */;
  %649 = @func_3317(%648) /* ty=(Tensor[(10, 11, 3), bool], Tensor[(10, 11, 2), bool], Tensor[(1, 220), uint32], Tensor[(16, 16, 15), int16], Tensor[(350), int64]) */;
  %650 = bitwise_or(%645, %646) /* ty=Tensor[(5, 66), uint16] */;
  %651 = %649.2;
  (%650, %651, %var_7783)
}

def @func_13693() -> (Tensor[(384), float64],) {
  %652 = @func_11760() /* ty=(Tensor[(384), float64], Tensor[(384), float64]) */;
  %653 = %652.1;
  (%653,)
}

def @func_10419() -> (Tensor[(350), uint32], Tensor[(350), uint32]) {
  %654 = @func_4393() /* ty=(Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(1, 220), uint32], Tensor[(330), uint64], Tensor[(10, 11, 3), bool]) */;
  %655 = @func_7321() /* ty=(Tensor[(350), uint32],) */;
  %656 = %654.1;
  %657 = %655.0;
  (%656, %657)
}

def @func_1256(%var_1249: Tensor[(14, 5, 5), uint32]) -> Tensor[(14, 5, 5), uint32] {
  %658 = cast(meta[relay.Constant][30] /* ty=Tensor[(1, 1, 1), uint32] */, dtype="uint32") /* ty=Tensor[(1, 1, 1), uint32] */;
  %659 = cast(%var_1249, dtype="uint32") /* ty=Tensor[(14, 5, 5), uint32] */;
  left_shift(%658, %659) /* ty=Tensor[(14, 5, 5), uint32] */
}

def @func_9343(%var_9309: Tensor[(384), float64], %var_9310: Tensor[(350, 1), uint32]) -> (Tensor[(384), float64], Tensor[(350, 220), uint32], Tensor[(350, 832), float64]) {
  %660 = @func_5540() /* ty=Tensor[(220), float64] */;
  %661 = cast(%660, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %662 = cast(%var_9310, dtype="uint32") /* ty=Tensor[(350, 1), uint32] */;
  %663 = cast(%var_9309, dtype="float64") /* ty=Tensor[(384), float64] */;
  %664 = cast(%660, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %665 = cast(%var_9310, dtype="uint32") /* ty=Tensor[(350, 1), uint32] */;
  %666 = reshape(%663, newshape=[384]) /* ty=Tensor[(384), float64] */;
  %667 = reshape(%664, newshape=[220]) /* ty=Tensor[(220), uint32] */;
  %668 = reshape(%665, newshape=[350]) /* ty=Tensor[(350), uint32] */;
  %669 = @func_3072(%666, %667, %668) /* ty=(Tensor[(10, 3, 12), bool], Tensor[(10, 11, 3), float32], Tensor[(384), float64], Tensor[(13, 8, 8), float64], Tensor[(832), float64], Tensor[(14, 5, 5), uint32], Tensor[(350), uint32], Tensor[(220), float64]) */;
  %670 = %669.4;
  %671 = cast(%var_9310, dtype="float32") /* ty=Tensor[(350, 1), float32] */;
  %672 = cast(%670, dtype="float32") /* ty=Tensor[(832), float32] */;
  %673 = divide(%671, %672) /* ty=Tensor[(350, 832), float32] */;
  %674 = cast(%673, dtype="float64") /* ty=Tensor[(350, 832), float64] */;
  %675 = right_shift(%661, %662) /* ty=Tensor[(350, 220), uint32] */;
  %676 = acos(%674) /* ty=Tensor[(350, 832), float64] */;
  (%var_9309, %675, %676)
}

def @func_6269(%var_6264: Tensor[(832), float64]) -> (Tensor[(350), uint32], Tensor[(13, 8, 8), float64], Tensor[(832), float64]) {
  %677 = @func_3467() /* ty=(Tensor[(350), uint32],) */;
  %678 = cast(%var_6264, dtype="float64") /* ty=Tensor[(832), float64] */;
  %679 = reshape(%678, newshape=[13, 8, 8]) /* ty=Tensor[(13, 8, 8), float64] */;
  %680 = %677.0;
  %681 = @func_2433(%679) /* ty=Tensor[(13, 8, 8), float64] */;
  (%680, %681, %var_6264)
}

def @func_8799(%var_8793: Tensor[(3840), int16]) -> (Tensor[(384), float64], Tensor[(220), float64], Tensor[(330), uint64], Tensor[(3840), int16]) {
  %682 = @func_3389() /* ty=(Tensor[(350), float32], Tensor[(13, 8, 8), float64], Tensor[(384), float64], Tensor[(220), uint32]) */;
  %683 = @func_6781() /* ty=(Tensor[(220), float64],) */;
  %684 = cast(%var_8793, dtype="int16") /* ty=Tensor[(3840), int16] */;
  %685 = reshape(%684, newshape=[3840]) /* ty=Tensor[(3840), int16] */;
  %686 = @func_5721(%685) /* ty=(Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(220), float64], Tensor[(16, 16, 15), float64], Tensor[(3840), int16], Tensor[(350), uint32], Tensor[(330), uint64], Tensor[(350), uint32], Tensor[(13, 8, 8), float64], Tensor[(832), float64]) */;
  %687 = %682.2;
  %688 = %683.0;
  %689 = %686.6;
  (%687, %688, %689, %var_8793)
}

def @func_4491() -> Tensor[(220), float64] {
  %690 = @func_3441() /* ty=(Tensor[(220), float64],) */;
  %690.0
}

def @func_12860() -> (Tensor[(350), uint32],) {
  %691 = @func_3206() /* ty=Tensor[(350), uint32] */;
  (%691,)
}

def @func_4591() -> (Tensor[(350), uint32], Tensor[(350), uint32]) {
  %692 = @func_3448() /* ty=Tensor[(350), uint32] */;
  %693 = @func_3206() /* ty=Tensor[(350), uint32] */;
  (%692, %693)
}

def @func_2915() -> Tensor[(350), uint32] {
  %694 = @func_2840() /* ty=(Tensor[(16, 16, 15), int16], Tensor[(10, 11, 3), bool], Tensor[(330), uint64], Tensor[(16, 16, 15), int16], Tensor[(10, 3, 12), bool], Tensor[(10, 3), uint8], Tensor[(384), float64], Tensor[(350), uint32]) */;
  %694.7
}

def @func_7700(%var_7690: int64, %var_7691: Tensor[(4, 7, 1), int64]) -> Tensor[(4, 7, 1), int64] {
  %695 = cast(%var_7690, dtype="int64") /* ty=int64 */;
  %696 = cast(%var_7691, dtype="int64") /* ty=Tensor[(4, 7, 1), int64] */;
  add(%695, %696) /* ty=Tensor[(4, 7, 1), int64] */
}

def @func_10354() -> (Tensor[(350), uint32],) {
  %697 = @func_6604() /* ty=(Tensor[(350), float32], Tensor[(350), uint32]) */;
  %698 = %697.1;
  (%698,)
}

def @func_10981() -> Tensor[(350), float64] {
  %699 = @func_5760() /* ty=(Tensor[(350), float64], Tensor[(220), float64]) */;
  %699.0
}

def @func_4005(%var_3992: Tensor[(9, 5, 4), float32], %var_3993: Tensor[(9, 5, 4), float32]) -> Tensor[(9, 5, 4), bool] {
  %700 = cast(%var_3993, dtype="bool") /* ty=Tensor[(9, 5, 4), bool] */;
  %701 = shape_of(%var_3992, dtype="int32") /* ty=Tensor[(3), int32] */;
  %702 = cast(%var_3992, dtype="bool") /* ty=Tensor[(9, 5, 4), bool] */;
  %703 = dyn.reshape(%700, %701, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%702, %703) /* ty=Tensor[(9, 5, 4), bool] */
}

def @func_13184() -> (Tensor[(384), float64], Tensor[(350), uint32], Tensor[(384), float64]) {
  %704 = @func_11760() /* ty=(Tensor[(384), float64], Tensor[(384), float64]) */;
  %705 = @func_8695() /* ty=(Tensor[(350), uint32], Tensor[(350), uint8]) */;
  %706 = %704.0;
  %707 = %705.0;
  %708 = @func_5859() /* ty=Tensor[(384), float64] */;
  (%706, %707, %708)
}

def @func_8993() -> (Tensor[(350), uint8],) {
  %709 = @func_4778() /* ty=Tensor[(350), uint8] */;
  (%709,)
}

def @func_9127() -> (Tensor[(384), float64],) {
  %710 = @func_7514() /* ty=Tensor[(384), float64] */;
  (%710,)
}

def @func_12551() -> (Tensor[(350), uint32],) {
  %711 = @func_10419() /* ty=(Tensor[(350), uint32], Tensor[(350), uint32]) */;
  %712 = %711.1;
  (%712,)
}

def @func_3229() -> Tensor[(350), uint32] {
  @func_2915() /* ty=Tensor[(350), uint32] */
}

def @func_3389() -> (Tensor[(350), float32], Tensor[(13, 8, 8), float64], Tensor[(384), float64], Tensor[(220), uint32]) {
  %713 = @func_3090() /* ty=(Tensor[(350), uint32],) */;
  %714 = %713.0;
  %715 = cast(%714, dtype="float32") /* ty=Tensor[(350), float32] */;
  %716 = cast(meta[relay.Constant][31] /* ty=Tensor[(384), float64] */, dtype="float64") /* ty=Tensor[(384), float64] */;
  %717 = cast(meta[relay.Constant][32] /* ty=Tensor[(220), uint32] */, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %718 = log2(%715) /* ty=Tensor[(350), float32] */;
  %719 = cast(%718, dtype="uint32") /* ty=Tensor[(350), uint32] */;
  %720 = reshape(%716, newshape=[384]) /* ty=Tensor[(384), float64] */;
  %721 = reshape(%717, newshape=[220]) /* ty=Tensor[(220), uint32] */;
  %722 = reshape(%719, newshape=[350]) /* ty=Tensor[(350), uint32] */;
  %723 = @func_3072(%720, %721, %722) /* ty=(Tensor[(10, 3, 12), bool], Tensor[(10, 11, 3), float32], Tensor[(384), float64], Tensor[(13, 8, 8), float64], Tensor[(832), float64], Tensor[(14, 5, 5), uint32], Tensor[(350), uint32], Tensor[(220), float64]) */;
  %724 = %723.3;
  (%718, %724, meta[relay.Constant][31] /* ty=Tensor[(384), float64] */, meta[relay.Constant][32] /* ty=Tensor[(220), uint32] */)
}

def @func_7514() -> Tensor[(384), float64] {
  %725 = @func_5337() /* ty=(Tensor[(350), uint8], Tensor[(384), float64]) */;
  %725.1
}

def @func_9909() -> (Tensor[(220), uint32],) {
  %726 = @func_7568() /* ty=(Tensor[(220), uint32],) */;
  %727 = %726.0;
  (%727,)
}

def @func_7001() -> (Tensor[(220), float64],) {
  %728 = @func_6826() /* ty=(Tensor[(220), float64],) */;
  %729 = %728.0;
  (%729,)
}

def @func_6444() -> Tensor[(220), float64] {
  %730 = @func_5037() /* ty=(Tensor[(220), float64],) */;
  %730.0
}

def @func_9231() -> Tensor[(350), float32] {
  %731 = @func_4144() /* ty=(Tensor[(350), float32], Tensor[(14, 5, 5), uint32]) */;
  %731.0
}

def @func_8637() -> Tensor[(350), uint32] {
  @func_3206() /* ty=Tensor[(350), uint32] */
}

def @func_3317(%var_3265: Tensor[(1, 220), uint32]) -> (Tensor[(10, 11, 3), bool], Tensor[(10, 11, 2), bool], Tensor[(1, 220), uint32], Tensor[(16, 16, 15), int16], Tensor[(350), int64]) {
  %732 = @func_2840() /* ty=(Tensor[(16, 16, 15), int16], Tensor[(10, 11, 3), bool], Tensor[(330), uint64], Tensor[(16, 16, 15), int16], Tensor[(10, 3, 12), bool], Tensor[(10, 3), uint8], Tensor[(384), float64], Tensor[(350), uint32]) */;
  %733 = cast(%var_3265, dtype="uint32") /* ty=Tensor[(1, 220), uint32] */;
  %734 = cast(%var_3265, dtype="uint32") /* ty=Tensor[(1, 220), uint32] */;
  %735 = reshape(%733, newshape=[10, 11, 2]) /* ty=Tensor[(10, 11, 2), uint32] */;
  %736 = reshape(%734, newshape=[10, 11, 2]) /* ty=Tensor[(10, 11, 2), uint32] */;
  %737 = @func_534(%735, %736) /* ty=(Tensor[(10, 11, 2), bool],) */;
  %738 = @func_2840() /* ty=(Tensor[(16, 16, 15), int16], Tensor[(10, 11, 3), bool], Tensor[(330), uint64], Tensor[(16, 16, 15), int16], Tensor[(10, 3, 12), bool], Tensor[(10, 3), uint8], Tensor[(384), float64], Tensor[(350), uint32]) */;
  %739 = @func_2915() /* ty=Tensor[(350), uint32] */;
  %740 = cast(%739, dtype="float32") /* ty=Tensor[(350), float32] */;
  %741 = acos(%740) /* ty=Tensor[(350), float32] */;
  %742 = cast(%739, dtype="int64") /* ty=Tensor[(350), int64] */;
  %743 = shape_of(%741, dtype="int32") /* ty=Tensor[(1), int32] */;
  %744 = cast(%741, dtype="int64") /* ty=Tensor[(350), int64] */;
  %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?), int64] */;
  %746 = %732.1;
  %747 = %737.0;
  %748 = %738.0;
  %749 = subtract(%744, %745) /* ty=Tensor[(350), int64] */;
  (%746, %747, %var_3265, %748, %749)
}

def @func_7809() -> Tensor[(55, 6), uint64] {
  %750 = @func_7204() /* ty=(Tensor[(55, 6), uint64],) */;
  %750.0
}

def @func_6379() -> (Tensor[(350), float32], Tensor[(16, 16, 15), int16]) {
  %751 = @func_4144() /* ty=(Tensor[(350), float32], Tensor[(14, 5, 5), uint32]) */;
  %752 = @func_5965() /* ty=(Tensor[(16, 16, 15), int16],) */;
  %753 = %751.0;
  %754 = %752.0;
  (%753, %754)
}

def @func_8952(%var_8946: Tensor[(12, 3, 4), int32]) -> (Tensor[(12, 3, 4), int32],) {
  %755 = cast(meta[relay.Constant][33] /* ty=Tensor[(12, 3, 1), int32] */, dtype="int32") /* ty=Tensor[(12, 3, 1), int32] */;
  %756 = cast(%var_8946, dtype="int32") /* ty=Tensor[(12, 3, 4), int32] */;
  %757 = minimum(%755, %756) /* ty=Tensor[(12, 3, 4), int32] */;
  (%757,)
}

def @func_11760() -> (Tensor[(384), float64], Tensor[(384), float64]) {
  %758 = @func_5859() /* ty=Tensor[(384), float64] */;
  %759 = @func_10175() /* ty=Tensor[(384), float64] */;
  (%758, %759)
}

def @func_12121() -> (Tensor[(350), uint32], Tensor[(220), float64]) {
  %760 = @func_7503() /* ty=(Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(220), uint32], Tensor[(16, 16, 15), int16], Tensor[(220), float64]) */;
  %761 = @func_9689() /* ty=(Tensor[(220), float64],) */;
  %762 = %760.0;
  %763 = %761.0;
  (%762, %763)
}

def @func_5540() -> Tensor[(220), float64] {
  @func_4491() /* ty=Tensor[(220), float64] */
}

def @func_6672() -> (Tensor[(350), uint32], Tensor[(350), uint8]) {
  %764 = @func_3467() /* ty=(Tensor[(350), uint32],) */;
  %765 = %764.0;
  %766 = @func_4070() /* ty=Tensor[(350), uint8] */;
  (%765, %766)
}

def @func_10596() -> (Tensor[(220), float64], Tensor[(350), uint32], Tensor[(350), uint32]) {
  %767 = @func_9689() /* ty=(Tensor[(220), float64],) */;
  %768 = @func_7503() /* ty=(Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(220), uint32], Tensor[(16, 16, 15), int16], Tensor[(220), float64]) */;
  %769 = %767.0;
  %770 = @func_7109() /* ty=Tensor[(350), uint32] */;
  %771 = %768.1;
  (%769, %770, %771)
}

def @func_3090() -> (Tensor[(350), uint32],) {
  %772 = @func_2915() /* ty=Tensor[(350), uint32] */;
  (%772,)
}

def @func_1219(%var_1130: Tensor[(16, 4, 6), float64], %var_1171: Tensor[(220), uint32]) -> (Tensor[(16, 4, 6), bool], Tensor[(330), bool], Tensor[(10, 11, 2), bool], Tensor[(220), uint32], Tensor[(10, 11, 2), bool], Tensor[(10, 11, 3), float32], Tensor[(10, 11, 3), bool]) {
  %773 = cast(meta[relay.Constant][34] /* ty=Tensor[(16, 4, 6), float64] */, dtype="bool") /* ty=Tensor[(16, 4, 6), bool] */;
  %774 = shape_of(%var_1130, dtype="int32") /* ty=Tensor[(3), int32] */;
  %775 = cast(%var_1130, dtype="bool") /* ty=Tensor[(16, 4, 6), bool] */;
  %776 = dyn.reshape(%773, %774, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %777 = cast(meta[relay.Constant][35] /* ty=Tensor[(330), uint64] */, dtype="uint64") /* ty=Tensor[(330), uint64] */;
  %778 = cast(meta[relay.Constant][35] /* ty=Tensor[(330), uint64] */, dtype="uint64") /* ty=Tensor[(330), uint64] */;
  %779 = reshape(%777, newshape=[10, 11, 3]) /* ty=Tensor[(10, 11, 3), uint64] */;
  %780 = reshape(%778, newshape=[10, 11, 3]) /* ty=Tensor[(10, 11, 3), uint64] */;
  %781 = @func_191(%779, %780) /* ty=Tensor[(10, 11, 3), bool] */;
  %782 = cast(%781, dtype="float32") /* ty=Tensor[(10, 11, 3), float32] */;
  %783 = sin(%782) /* ty=Tensor[(10, 11, 3), float32] */;
  %784 = cast(%783, dtype="bool") /* ty=Tensor[(10, 11, 3), bool] */;
  %785 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(330), uint64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %786 = cast(meta[relay.Constant][35] /* ty=Tensor[(330), uint64] */, dtype="bool") /* ty=Tensor[(330), bool] */;
  %787 = dyn.reshape(%784, %785, newshape=[]) /* ty=Tensor[(?), bool] */;
  %788 = cast(%var_1171, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %789 = cast(%var_1171, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %790 = reshape(%788, newshape=[10, 11, 2]) /* ty=Tensor[(10, 11, 2), uint32] */;
  %791 = reshape(%789, newshape=[10, 11, 2]) /* ty=Tensor[(10, 11, 2), uint32] */;
  %792 = @func_534(%790, %791) /* ty=(Tensor[(10, 11, 2), bool],) */;
  %793 = %792.0;
  %794 = cast(%793, dtype="uint32") /* ty=Tensor[(10, 11, 2), uint32] */;
  %795 = cast(%793, dtype="uint32") /* ty=Tensor[(10, 11, 2), uint32] */;
  %796 = reshape(%794, newshape=[10, 11, 2]) /* ty=Tensor[(10, 11, 2), uint32] */;
  %797 = reshape(%795, newshape=[10, 11, 2]) /* ty=Tensor[(10, 11, 2), uint32] */;
  %798 = @func_534(%796, %797) /* ty=(Tensor[(10, 11, 2), bool],) */;
  %799 = cast(meta[relay.Constant][35] /* ty=Tensor[(330), uint64] */, dtype="uint16") /* ty=Tensor[(330), uint16] */;
  %800 = shape_of(%783, dtype="int32") /* ty=Tensor[(3), int32] */;
  %801 = cast(%783, dtype="uint16") /* ty=Tensor[(10, 11, 3), uint16] */;
  %802 = dyn.reshape(%799, %800, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %803 = add(%801, %802) /* ty=Tensor[(10, 11, 3), uint16] */;
  %804 = cast(%803, dtype="float32") /* ty=Tensor[(10, 11, 3), float32] */;
  %805 = cast(%783, dtype="uint64") /* ty=Tensor[(10, 11, 3), uint64] */;
  %806 = atanh(%804) /* ty=Tensor[(10, 11, 3), float32] */;
  %807 = cast(%806, dtype="uint64") /* ty=Tensor[(10, 11, 3), uint64] */;
  %808 = reshape(%805, newshape=[10, 11, 3]) /* ty=Tensor[(10, 11, 3), uint64] */;
  %809 = reshape(%807, newshape=[10, 11, 3]) /* ty=Tensor[(10, 11, 3), uint64] */;
  %810 = equal(%775, %776) /* ty=Tensor[(16, 4, 6), bool] */;
  %811 = equal(%786, %787) /* ty=Tensor[(330), bool] */;
  %812 = %798.0;
  %813 = @func_191(%808, %809) /* ty=Tensor[(10, 11, 3), bool] */;
  (%810, %811, %793, %var_1171, %812, %806, %813)
}

def @func_12452() -> (Tensor[(220), float32],) {
  %814 = @func_4934() /* ty=Tensor[(220), float32] */;
  (%814,)
}

def @func_6283(%var_6274: Tensor[(3, 14, 5), float32]) -> (Tensor[(3, 14, 5), float32], Tensor[(13, 8, 8), float64], Tensor[(3840), int16]) {
  %815 = cast(%var_6274, dtype="float32") /* ty=Tensor[(3, 14, 5), float32] */;
  %816 = cast(meta[relay.Constant][36] /* ty=Tensor[(3840), int16] */, dtype="int16") /* ty=Tensor[(3840), int16] */;
  %817 = reshape(%816, newshape=[3840]) /* ty=Tensor[(3840), int16] */;
  %818 = @func_5721(%817) /* ty=(Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(220), float64], Tensor[(16, 16, 15), float64], Tensor[(3840), int16], Tensor[(350), uint32], Tensor[(330), uint64], Tensor[(350), uint32], Tensor[(13, 8, 8), float64], Tensor[(832), float64]) */;
  %819 = cosh(%815) /* ty=Tensor[(3, 14, 5), float32] */;
  %820 = %818.8;
  (%819, %820, meta[relay.Constant][36] /* ty=Tensor[(3840), int16] */)
}

def @func_5793() -> (Tensor[(350), uint32],) {
  %821 = @func_2915() /* ty=Tensor[(350), uint32] */;
  (%821,)
}

def @func_13921() -> (Tensor[(220), float64], Tensor[(220), float64]) {
  %822 = @func_11542() /* ty=(Tensor[(220), float64],) */;
  %823 = @func_7957() /* ty=Tensor[(220), float64] */;
  %824 = %822.0;
  (%823, %824)
}

def @func_7503() -> (Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(220), uint32], Tensor[(16, 16, 15), int16], Tensor[(220), float64]) {
  %825 = @func_5934() /* ty=(Tensor[(16, 16, 15), int16], Tensor[(350), float64], Tensor[(350), uint32]) */;
  %826 = @func_3389() /* ty=(Tensor[(350), float32], Tensor[(13, 8, 8), float64], Tensor[(384), float64], Tensor[(220), uint32]) */;
  %827 = @func_5965() /* ty=(Tensor[(16, 16, 15), int16],) */;
  %828 = @func_7001() /* ty=(Tensor[(220), float64],) */;
  %829 = %828.0;
  %830 = cast(%829, dtype="float64") /* ty=Tensor[(220), float64] */;
  %831 = %825.2;
  %832 = @func_2915() /* ty=Tensor[(350), uint32] */;
  %833 = %826.3;
  %834 = %827.0;
  %835 = sin(%830) /* ty=Tensor[(220), float64] */;
  (%831, %832, %833, %834, %835)
}

def @func_12678(%var_12654: Tensor[(55, 6), uint64]) -> (Tensor[(55, 6), uint16],) {
  %836 = @func_11060() /* ty=(Tensor[(55, 6), uint64], Tensor[(220), uint32], Tensor[(220), uint32]) */;
  %837 = %836.0;
  %838 = cast(%837, dtype="float64") /* ty=Tensor[(55, 6), float64] */;
  %839 = tan(%838) /* ty=Tensor[(55, 6), float64] */;
  %840 = cast(%var_12654, dtype="uint8") /* ty=Tensor[(55, 6), uint8] */;
  %841 = shape_of(%837, dtype="int32") /* ty=Tensor[(2), int32] */;
  %842 = cast(%837, dtype="uint8") /* ty=Tensor[(55, 6), uint8] */;
  %843 = dyn.reshape(%840, %841, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %844 = multiply(%842, %843) /* ty=Tensor[(55, 6), uint8] */;
  %845 = cast(%844, dtype="uint16") /* ty=Tensor[(55, 6), uint16] */;
  %846 = shape_of(%839, dtype="int32") /* ty=Tensor[(2), int32] */;
  %847 = cast(%839, dtype="uint16") /* ty=Tensor[(55, 6), uint16] */;
  %848 = dyn.reshape(%845, %846, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %849 = left_shift(%847, %848) /* ty=Tensor[(55, 6), uint16] */;
  (%849,)
}

def @func_4735(%var_4713: Tensor[(330), uint64]) -> (Tensor[(220), float64], Tensor[(10, 11, 3), bool], Tensor[(330), uint64], Tensor[(16, 16, 15), int16], Tensor[(35, 10), uint32]) {
  %850 = cast(%var_4713, dtype="uint64") /* ty=Tensor[(330), uint64] */;
  %851 = cast(%var_4713, dtype="uint64") /* ty=Tensor[(330), uint64] */;
  %852 = reshape(%850, newshape=[10, 11, 3]) /* ty=Tensor[(10, 11, 3), uint64] */;
  %853 = reshape(%851, newshape=[10, 11, 3]) /* ty=Tensor[(10, 11, 3), uint64] */;
  %854 = cast(meta[relay.Constant][37] /* ty=Tensor[(35, 10), uint32] */, dtype="uint32") /* ty=Tensor[(35, 10), uint32] */;
  %855 = @func_4491() /* ty=Tensor[(220), float64] */;
  %856 = cast(%855, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %857 = reshape(%854, newshape=[350]) /* ty=Tensor[(350), uint32] */;
  %858 = reshape(%856, newshape=[220]) /* ty=Tensor[(220), uint32] */;
  %859 = @func_3535(%857, %858) /* ty=(Tensor[(350), bool], Tensor[(16, 16, 15), int16], Tensor[(220), uint32], Tensor[(330), uint64], Tensor[(5, 66), uint64]) */;
  %860 = @func_191(%852, %853) /* ty=Tensor[(10, 11, 3), bool] */;
  %861 = %859.1;
  (%855, %860, %var_4713, %861, meta[relay.Constant][37] /* ty=Tensor[(35, 10), uint32] */)
}

def @func_14414() -> Tensor[(1, 3840), float64] {
  %862 = @func_12729() /* ty=(Tensor[(350), uint32], Tensor[(330), uint64], Tensor[(1, 3840), int16], Tensor[(55, 6), uint16], Tensor[(220), bool], Tensor[(220), float64]) */;
  %863 = %862.2;
  %864 = cast(%863, dtype="float32") /* ty=Tensor[(1, 3840), float32] */;
  %865 = sqrt(%864) /* ty=Tensor[(1, 3840), float32] */;
  %866 = cast(%865, dtype="float64") /* ty=Tensor[(1, 3840), float64] */;
  acos(%866) /* ty=Tensor[(1, 3840), float64] */
}

def @func_6949(%var_6945: Tensor[(220), uint32]) -> (Tensor[(350), uint32], Tensor[(16, 16, 15), int16], Tensor[(220), uint32]) {
  %867 = @func_3894() /* ty=Tensor[(350), uint32] */;
  %868 = cast(%867, dtype="uint32") /* ty=Tensor[(350), uint32] */;
  %869 = cast(%var_6945, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %870 = reshape(%868, newshape=[350]) /* ty=Tensor[(350), uint32] */;
  %871 = reshape(%869, newshape=[220]) /* ty=Tensor[(220), uint32] */;
  %872 = @func_3535(%870, %871) /* ty=(Tensor[(350), bool], Tensor[(16, 16, 15), int16], Tensor[(220), uint32], Tensor[(330), uint64], Tensor[(5, 66), uint64]) */;
  %873 = %872.1;
  (%867, %873, %var_6945)
}

def @func_7568() -> (Tensor[(220), uint32],) {
  %874 = @func_5774() /* ty=(Tensor[(220), uint32],) */;
  %875 = %874.0;
  (%875,)
}

def @func_9613(%var_9548: Tensor[(8, 7, 7), float32], %var_9592: Tensor[(180), float32]) -> (Tensor[(350), uint8], Tensor[(220), uint32], Tensor[(8, 7, 7), uint8], Tensor[(9, 5, 4), bool], Tensor[(180), float32], Tensor[(350), uint8]) {
  %876 = @func_8440() /* ty=(Tensor[(16, 16, 15), int16], Tensor[(350), uint8], Tensor[(350), uint8]) */;
  %877 = cast(%var_9548, dtype="float32") /* ty=Tensor[(8, 7, 7), float32] */;
  %878 = exp(%877) /* ty=Tensor[(8, 7, 7), float32] */;
  %879 = cast(%var_9548, dtype="int32") /* ty=Tensor[(8, 7, 7), int32] */;
  %880 = shape_of(%878, dtype="int32") /* ty=Tensor[(3), int32] */;
  %881 = cast(%878, dtype="int32") /* ty=Tensor[(8, 7, 7), int32] */;
  %882 = dyn.reshape(%879, %880, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %883 = bitwise_and(%881, %882) /* ty=Tensor[(8, 7, 7), int32] */;
  %884 = cast(%878, dtype="uint8") /* ty=Tensor[(8, 7, 7), uint8] */;
  %885 = shape_of(%883, dtype="int32") /* ty=Tensor[(3), int32] */;
  %886 = cast(%883, dtype="uint8") /* ty=Tensor[(8, 7, 7), uint8] */;
  %887 = dyn.reshape(%884, %885, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %888 = cast(%var_9592, dtype="float32") /* ty=Tensor[(180), float32] */;
  %889 = cast(%var_9592, dtype="float32") /* ty=Tensor[(180), float32] */;
  %890 = reshape(%888, newshape=[9, 5, 4]) /* ty=Tensor[(9, 5, 4), float32] */;
  %891 = reshape(%889, newshape=[9, 5, 4]) /* ty=Tensor[(9, 5, 4), float32] */;
  %892 = @func_5135() /* ty=(Tensor[(350), uint8],) */;
  %893 = %876.2;
  %894 = @func_4612() /* ty=Tensor[(220), uint32] */;
  %895 = multiply(%886, %887) /* ty=Tensor[(8, 7, 7), uint8] */;
  %896 = @func_4005(%890, %891) /* ty=Tensor[(9, 5, 4), bool] */;
  %897 = %892.0;
  (%893, %894, %895, %896, %var_9592, %897)
}

def @func_9082() -> (Tensor[(220), float64], Tensor[(16, 16, 15), float32], Tensor[(220), float64], Tensor[(15, 9, 8), float64], Tensor[(1080), float64], Tensor[(350), float64], Tensor[(220), float64], Tensor[(350), uint32], Tensor[(350), uint8]) {
  %898 = @func_6523() /* ty=(Tensor[(220), float64],) */;
  %899 = cast(meta[relay.Constant][38] /* ty=Tensor[(1080), float64] */, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %900 = cast(meta[relay.Constant][39] /* ty=Tensor[(350), float64] */, dtype="float64") /* ty=Tensor[(350), float64] */;
  %901 = reshape(%899, newshape=[15, 9, 8]) /* ty=Tensor[(15, 9, 8), float64] */;
  %902 = reshape(%900, newshape=[350]) /* ty=Tensor[(350), float64] */;
  %903 = @func_7874(%901, %902) /* ty=(Tensor[(15, 9, 8), float64], Tensor[(16, 16, 15), int16], Tensor[(350), float32], Tensor[(350), float64]) */;
  %904 = @func_6726() /* ty=(Tensor[(220), float64], Tensor[(15, 16, 9), float64]) */;
  %905 = @func_6672() /* ty=(Tensor[(350), uint32], Tensor[(350), uint8]) */;
  %906 = @func_6672() /* ty=(Tensor[(350), uint32], Tensor[(350), uint8]) */;
  %907 = %898.0;
  %908 = @func_5583() /* ty=Tensor[(16, 16, 15), float32] */;
  %909 = @func_4491() /* ty=Tensor[(220), float64] */;
  %910 = %903.0;
  %911 = %904.0;
  %912 = %905.0;
  %913 = %906.1;
  (%907, %908, %909, %910, meta[relay.Constant][38] /* ty=Tensor[(1080), float64] */, meta[relay.Constant][39] /* ty=Tensor[(350), float64] */, %911, %912, %913)
}

def @func_10043() -> (Tensor[(350), float32], Tensor[(55, 6), uint64], Tensor[(350), float64], Tensor[(220), float64]) {
  %914 = @func_7368() /* ty=(Tensor[(350), float32],) */;
  %915 = @func_7204() /* ty=(Tensor[(55, 6), uint64],) */;
  %916 = @func_9082() /* ty=(Tensor[(220), float64], Tensor[(16, 16, 15), float32], Tensor[(220), float64], Tensor[(15, 9, 8), float64], Tensor[(1080), float64], Tensor[(350), float64], Tensor[(220), float64], Tensor[(350), uint32], Tensor[(350), uint8]) */;
  %917 = @func_7503() /* ty=(Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(220), uint32], Tensor[(16, 16, 15), int16], Tensor[(220), float64]) */;
  %918 = %914.0;
  %919 = %915.0;
  %920 = %916.5;
  %921 = %917.4;
  (%918, %919, %920, %921)
}

def @func_7874(%var_7843: Tensor[(15, 9, 8), float64], %var_7854: Tensor[(350), float64]) -> (Tensor[(15, 9, 8), float64], Tensor[(16, 16, 15), int16], Tensor[(350), float32], Tensor[(350), float64]) {
  %922 = cast(%var_7843, dtype="float64") /* ty=Tensor[(15, 9, 8), float64] */;
  %923 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(15, 9, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %924 = cast(meta[relay.Constant][40] /* ty=Tensor[(15, 9, 8), float64] */, dtype="float64") /* ty=Tensor[(15, 9, 8), float64] */;
  %925 = dyn.reshape(%922, %923, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %926 = @func_7270() /* ty=(Tensor[(16, 16, 15), int16],) */;
  %927 = cast(%var_7854, dtype="float64") /* ty=Tensor[(350), float64] */;
  %928 = reshape(%927, newshape=[350]) /* ty=Tensor[(350), float64] */;
  %929 = @func_6144(%928) /* ty=(Tensor[(350), float32],) */;
  %930 = minimum(%924, %925) /* ty=Tensor[(15, 9, 8), float64] */;
  %931 = %926.0;
  %932 = %929.0;
  (%930, %931, %932, %var_7854)
}

def @func_10146(%var_10136: Tensor[(16, 16, 15), int16]) -> (Tensor[(16, 16, 15), bool],) {
  %933 = @func_8170() /* ty=(Tensor[(16, 16, 15), int16],) */;
  %934 = %933.0;
  %935 = cast(%var_10136, dtype="bool") /* ty=Tensor[(16, 16, 15), bool] */;
  %936 = shape_of(%934, dtype="int32") /* ty=Tensor[(3), int32] */;
  %937 = cast(%934, dtype="bool") /* ty=Tensor[(16, 16, 15), bool] */;
  %938 = dyn.reshape(%935, %936, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %939 = logical_or(%937, %938) /* ty=Tensor[(16, 16, 15), bool] */;
  (%939,)
}

def @func_7321() -> (Tensor[(350), uint32],) {
  %940 = @func_7241() /* ty=(Tensor[(350), uint32], Tensor[(330), uint64], Tensor[(5, 66), uint8]) */;
  %941 = %940.0;
  (%941,)
}

def @func_6523() -> (Tensor[(220), float64],) {
  %942 = @func_5540() /* ty=Tensor[(220), float64] */;
  (%942,)
}

def @func_8695() -> (Tensor[(350), uint32], Tensor[(350), uint8]) {
  %943 = @func_4038() /* ty=(Tensor[(350), uint32], Tensor[(350), uint32]) */;
  %944 = @func_5135() /* ty=(Tensor[(350), uint8],) */;
  %945 = %943.0;
  %946 = %944.0;
  (%945, %946)
}

def @func_9881(%var_9840: Tensor[(350), float64], %var_9857: Tensor[(8, 1080), float64]) -> (Tensor[(220), float64], Tensor[(220), float64], Tensor[(350), float32], Tensor[(350), float64], Tensor[(8, 1080), uint64]) {
  %947 = @func_3441() /* ty=(Tensor[(220), float64],) */;
  %948 = @func_9689() /* ty=(Tensor[(220), float64],) */;
  %949 = cast(meta[relay.Constant][41] /* ty=Tensor[(1, 1080), float64] */, dtype="float64") /* ty=Tensor[(1, 1080), float64] */;
  %950 = cast(%var_9840, dtype="float64") /* ty=Tensor[(350), float64] */;
  %951 = reshape(%949, newshape=[15, 9, 8]) /* ty=Tensor[(15, 9, 8), float64] */;
  %952 = reshape(%950, newshape=[350]) /* ty=Tensor[(350), float64] */;
  %953 = @func_7874(%951, %952) /* ty=(Tensor[(15, 9, 8), float64], Tensor[(16, 16, 15), int16], Tensor[(350), float32], Tensor[(350), float64]) */;
  %954 = cast(meta[relay.Constant][41] /* ty=Tensor[(1, 1080), float64] */, dtype="float64") /* ty=Tensor[(1, 1080), float64] */;
  %955 = sin(%954) /* ty=Tensor[(1, 1080), float64] */;
  %956 = cast(%955, dtype="int32") /* ty=Tensor[(1, 1080), int32] */;
  %957 = cast(%var_9857, dtype="int32") /* ty=Tensor[(8, 1080), int32] */;
  %958 = bitwise_xor(%956, %957) /* ty=Tensor[(8, 1080), int32] */;
  %959 = cast(%958, dtype="bool") /* ty=Tensor[(8, 1080), bool] */;
  %960 = cast(%955, dtype="bool") /* ty=Tensor[(1, 1080), bool] */;
  %961 = logical_and(%959, %960) /* ty=Tensor[(8, 1080), bool] */;
  %962 = cast(%958, dtype="uint64") /* ty=Tensor[(8, 1080), uint64] */;
  %963 = shape_of(%961, dtype="int32") /* ty=Tensor[(2), int32] */;
  %964 = cast(%961, dtype="uint64") /* ty=Tensor[(8, 1080), uint64] */;
  %965 = dyn.reshape(%962, %963, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %966 = %947.0;
  %967 = %948.0;
  %968 = %953.2;
  %969 = logical_xor(%964, %965) /* ty=Tensor[(8, 1080), uint64] */;
  (%966, %967, %968, %var_9840, %969)
}

def @func_14475() -> (Tensor[(384), float64], Tensor[(384), float64], Tensor[(384), float64]) {
  %970 = @func_10904() /* ty=Tensor[(384), float64] */;
  %971 = @func_10175() /* ty=Tensor[(384), float64] */;
  %972 = @func_10175() /* ty=Tensor[(384), float64] */;
  (%970, %971, %972)
}

def @func_11410() -> (Tensor[(350), uint32],) {
  %973 = @func_2915() /* ty=Tensor[(350), uint32] */;
  (%973,)
}

def @func_14429() -> Tensor[(350), uint32] {
  %974 = @func_8033() /* ty=(Tensor[(220), uint32], Tensor[(350), uint32]) */;
  %974.1
}

def @func_13750(%var_13738: Tensor[(384), float64], %var_13739: Tensor[(220), uint32], %var_13740: Tensor[(350), uint32]) -> (Tensor[(16, 16, 15), float32], Tensor[(384), float64], Tensor[(384), float64], Tensor[(220), uint32], Tensor[(350), uint32]) {
  %975 = @func_12971() /* ty=(Tensor[(16, 16, 15), float32],) */;
  %976 = cast(%var_13738, dtype="float64") /* ty=Tensor[(384), float64] */;
  %977 = cast(%var_13739, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %978 = cast(%var_13740, dtype="uint32") /* ty=Tensor[(350), uint32] */;
  %979 = reshape(%976, newshape=[384]) /* ty=Tensor[(384), float64] */;
  %980 = reshape(%977, newshape=[220]) /* ty=Tensor[(220), uint32] */;
  %981 = reshape(%978, newshape=[350]) /* ty=Tensor[(350), uint32] */;
  %982 = @func_3072(%979, %980, %981) /* ty=(Tensor[(10, 3, 12), bool], Tensor[(10, 11, 3), float32], Tensor[(384), float64], Tensor[(13, 8, 8), float64], Tensor[(832), float64], Tensor[(14, 5, 5), uint32], Tensor[(350), uint32], Tensor[(220), float64]) */;
  %983 = %975.0;
  %984 = %982.2;
  (%983, %984, %var_13738, %var_13739, %var_13740)
}

def @func_6809() -> Tensor[(350), float32] {
  %985 = @func_4144() /* ty=(Tensor[(350), float32], Tensor[(14, 5, 5), uint32]) */;
  %985.0
}

def @func_9754() -> (Tensor[(220), float64],) {
  %986 = @func_6444() /* ty=Tensor[(220), float64] */;
  (%986,)
}

def @func_6415() -> (Tensor[(350), uint32], Tensor[(330), uint64], Tensor[(220), uint32], Tensor[(55, 6), uint64]) {
  %987 = @func_5934() /* ty=(Tensor[(16, 16, 15), int16], Tensor[(350), float64], Tensor[(350), uint32]) */;
  %988 = cast(meta[relay.Constant][42] /* ty=Tensor[(220), uint32] */, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %989 = cast(meta[relay.Constant][43] /* ty=Tensor[(55, 6), uint64] */, dtype="uint64") /* ty=Tensor[(55, 6), uint64] */;
  %990 = reshape(%988, newshape=[220]) /* ty=Tensor[(220), uint32] */;
  %991 = reshape(%989, newshape=[330]) /* ty=Tensor[(330), uint64] */;
  %992 = @func_6000(%990, %991) /* ty=(Tensor[(384), float64], Tensor[(350), float32], Tensor[(14, 5, 5), float32], Tensor[(220), uint32], Tensor[(330), uint64]) */;
  %993 = %987.2;
  %994 = %992.4;
  (%993, %994, meta[relay.Constant][42] /* ty=Tensor[(220), uint32] */, meta[relay.Constant][43] /* ty=Tensor[(55, 6), uint64] */)
}

def @func_2322(%var_2254: Tensor[(10, 3, 1), uint8], %var_2255: Tensor[(10, 3, 1), uint8], %var_2267: Tensor[(384), float64], %var_2272: Tensor[(350), uint32]) -> (Tensor[(10, 3, ?), uint8], Tensor[(10, 11, 2), bool], Tensor[(384), float64], Tensor[(14, 5, 5), uint32], Tensor[(350), uint32], Tensor[(10, 3, 12), bool], Tensor[(10, 11, 3), bool], Tensor[(165, 2), uint64], Tensor[(220), uint32], Tensor[(10, 3, 220), float32], Tensor[(10, 11, 2), bool]) {
  %995 = cast(%var_2255, dtype="uint8") /* ty=Tensor[(10, 3, 1), uint8] */;
  %996 = shape_of(%var_2254, dtype="int32") /* ty=Tensor[(3), int32] */;
  %997 = cast(%var_2254, dtype="uint8") /* ty=Tensor[(10, 3, 1), uint8] */;
  %998 = dyn.reshape(%995, %996, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %999 = cast(%var_2267, dtype="float64") /* ty=Tensor[(384), float64] */;
  %1000 = cast(meta[relay.Constant][44] /* ty=Tensor[(220), uint32] */, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %1001 = reshape(%999, newshape=[16, 4, 6]) /* ty=Tensor[(16, 4, 6), float64] */;
  %1002 = reshape(%1000, newshape=[220]) /* ty=Tensor[(220), uint32] */;
  %1003 = @func_1219(%1001, %1002) /* ty=(Tensor[(16, 4, 6), bool], Tensor[(330), bool], Tensor[(10, 11, 2), bool], Tensor[(220), uint32], Tensor[(10, 11, 2), bool], Tensor[(10, 11, 3), float32], Tensor[(10, 11, 3), bool]) */;
  %1004 = cast(%var_2272, dtype="uint32") /* ty=Tensor[(350), uint32] */;
  %1005 = reshape(%1004, newshape=[14, 5, 5]) /* ty=Tensor[(14, 5, 5), uint32] */;
  %1006 = cast(%var_2255, dtype="bool") /* ty=Tensor[(10, 3, 1), bool] */;
  %1007 = cast(meta[relay.Constant][45] /* ty=Tensor[(10, 3, 12), uint8] */, dtype="bool") /* ty=Tensor[(10, 3, 12), bool] */;
  %1008 = cast(meta[relay.Constant][46] /* ty=Tensor[(165, 2), uint64] */, dtype="uint64") /* ty=Tensor[(165, 2), uint64] */;
  %1009 = cast(meta[relay.Constant][46] /* ty=Tensor[(165, 2), uint64] */, dtype="uint64") /* ty=Tensor[(165, 2), uint64] */;
  %1010 = reshape(%1008, newshape=[10, 11, 3]) /* ty=Tensor[(10, 11, 3), uint64] */;
  %1011 = reshape(%1009, newshape=[10, 11, 3]) /* ty=Tensor[(10, 11, 3), uint64] */;
  %1012 = cast(%var_2267, dtype="float64") /* ty=Tensor[(384), float64] */;
  %1013 = %1003.4;
  %1014 = cast(%1013, dtype="uint32") /* ty=Tensor[(10, 11, 2), uint32] */;
  %1015 = reshape(%1012, newshape=[16, 4, 6]) /* ty=Tensor[(16, 4, 6), float64] */;
  %1016 = reshape(%1014, newshape=[220]) /* ty=Tensor[(220), uint32] */;
  %1017 = @func_1219(%1015, %1016) /* ty=(Tensor[(16, 4, 6), bool], Tensor[(330), bool], Tensor[(10, 11, 2), bool], Tensor[(220), uint32], Tensor[(10, 11, 2), bool], Tensor[(10, 11, 3), float32], Tensor[(10, 11, 3), bool]) */;
  %1018 = cast(meta[relay.Constant][44] /* ty=Tensor[(220), uint32] */, dtype="float32") /* ty=Tensor[(220), float32] */;
  %1019 = cast(%var_2255, dtype="float32") /* ty=Tensor[(10, 3, 1), float32] */;
  %1020 = %1017.3;
  %1021 = cast(%1020, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %1022 = cast(meta[relay.Constant][44] /* ty=Tensor[(220), uint32] */, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %1023 = reshape(%1021, newshape=[10, 11, 2]) /* ty=Tensor[(10, 11, 2), uint32] */;
  %1024 = reshape(%1022, newshape=[10, 11, 2]) /* ty=Tensor[(10, 11, 2), uint32] */;
  %1025 = @func_534(%1023, %1024) /* ty=(Tensor[(10, 11, 2), bool],) */;
  %1026 = add(%997, %998) /* ty=Tensor[(10, 3, ?), uint8] */;
  %1027 = @func_1256(%1005) /* ty=Tensor[(14, 5, 5), uint32] */;
  %1028 = less_equal(%1006, %1007) /* ty=Tensor[(10, 3, 12), bool] */;
  %1029 = @func_191(%1010, %1011) /* ty=Tensor[(10, 11, 3), bool] */;
  %1030 = power(%1018, %1019) /* ty=Tensor[(10, 3, 220), float32] */;
  %1031 = %1025.0;
  (%1026, %1013, %var_2267, %1027, %var_2272, %1028, %1029, meta[relay.Constant][46] /* ty=Tensor[(165, 2), uint64] */, %1020, %1030, %1031)
}

def @func_8890() -> Tensor[(220), float64] {
  %1032 = @func_3441() /* ty=(Tensor[(220), float64],) */;
  %1032.0
}

def @func_8360() -> (Tensor[(350), uint32],) {
  %1033 = @func_2915() /* ty=Tensor[(350), uint32] */;
  (%1033,)
}

def @func_3072(%var_2986: Tensor[(384), float64], %var_2987: Tensor[(220), uint32], %var_3042: Tensor[(350), uint32]) -> (Tensor[(10, 3, 12), bool], Tensor[(10, 11, 3), float32], Tensor[(384), float64], Tensor[(13, 8, 8), float64], Tensor[(832), float64], Tensor[(14, 5, 5), uint32], Tensor[(350), uint32], Tensor[(220), float64]) {
  %1034 = @func_2840() /* ty=(Tensor[(16, 16, 15), int16], Tensor[(10, 11, 3), bool], Tensor[(330), uint64], Tensor[(16, 16, 15), int16], Tensor[(10, 3, 12), bool], Tensor[(10, 3), uint8], Tensor[(384), float64], Tensor[(350), uint32]) */;
  %1035 = cast(%var_2986, dtype="float64") /* ty=Tensor[(384), float64] */;
  %1036 = cast(%var_2987, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %1037 = reshape(%1035, newshape=[16, 4, 6]) /* ty=Tensor[(16, 4, 6), float64] */;
  %1038 = reshape(%1036, newshape=[220]) /* ty=Tensor[(220), uint32] */;
  %1039 = @func_1219(%1037, %1038) /* ty=(Tensor[(16, 4, 6), bool], Tensor[(330), bool], Tensor[(10, 11, 2), bool], Tensor[(220), uint32], Tensor[(10, 11, 2), bool], Tensor[(10, 11, 3), float32], Tensor[(10, 11, 3), bool]) */;
  %1040 = cast(meta[relay.Constant][47] /* ty=Tensor[(832), float64] */, dtype="float64") /* ty=Tensor[(832), float64] */;
  %1041 = reshape(%1040, newshape=[13, 8, 8]) /* ty=Tensor[(13, 8, 8), float64] */;
  %1042 = cast(%var_3042, dtype="uint32") /* ty=Tensor[(350), uint32] */;
  %1043 = reshape(%1042, newshape=[14, 5, 5]) /* ty=Tensor[(14, 5, 5), uint32] */;
  %1044 = cast(%var_2987, dtype="float64") /* ty=Tensor[(220), float64] */;
  %1045 = %1034.4;
  %1046 = %1039.5;
  %1047 = @func_2433(%1041) /* ty=Tensor[(13, 8, 8), float64] */;
  %1048 = @func_1256(%1043) /* ty=Tensor[(14, 5, 5), uint32] */;
  %1049 = atanh(%1044) /* ty=Tensor[(220), float64] */;
  (%1045, %1046, %var_2986, %1047, meta[relay.Constant][47] /* ty=Tensor[(832), float64] */, %1048, %var_3042, %1049)
}

def @func_11994() -> (Tensor[(384), float64],) {
  %1050 = @func_5337() /* ty=(Tensor[(350), uint8], Tensor[(384), float64]) */;
  %1051 = %1050.1;
  (%1051,)
}

def @func_14189() -> Tensor[(220), uint32] {
  %1052 = @func_11060() /* ty=(Tensor[(55, 6), uint64], Tensor[(220), uint32], Tensor[(220), uint32]) */;
  %1052.1
}

def @func_191(%var_136: Tensor[(10, 11, 3), uint64], %var_137: Tensor[(10, 11, 3), uint64]) -> Tensor[(10, 11, 3), bool] {
  %1053 = cast(%var_137, dtype="bool") /* ty=Tensor[(10, 11, 3), bool] */;
  %1054 = shape_of(%var_136, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1055 = cast(%var_136, dtype="bool") /* ty=Tensor[(10, 11, 3), bool] */;
  %1056 = dyn.reshape(%1053, %1054, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%1055, %1056) /* ty=Tensor[(10, 11, 3), bool] */
}

def @func_8672() -> (Tensor[(350), uint32],) {
  %1057 = @func_3467() /* ty=(Tensor[(350), uint32],) */;
  %1058 = %1057.0;
  (%1058,)
}

def @func_13449() -> (Tensor[(220), float64], Tensor[(220), float32], Tensor[(16, 16, 15), int16], Tensor[(350), uint32], Tensor[(220), float64], Tensor[(350), float32]) {
  %1059 = @func_11586() /* ty=(Tensor[(16, 16, 15), int16], Tensor[(350), uint32], Tensor[(350), uint8], Tensor[(220), float64]) */;
  %1060 = @func_5965() /* ty=(Tensor[(16, 16, 15), int16],) */;
  %1061 = @func_3441() /* ty=(Tensor[(220), float64],) */;
  %1062 = @func_3389() /* ty=(Tensor[(350), float32], Tensor[(13, 8, 8), float64], Tensor[(384), float64], Tensor[(220), uint32]) */;
  %1063 = %1059.3;
  %1064 = @func_8862() /* ty=Tensor[(220), float32] */;
  %1065 = %1060.0;
  %1066 = @func_2915() /* ty=Tensor[(350), uint32] */;
  %1067 = %1061.0;
  %1068 = %1062.0;
  (%1063, %1064, %1065, %1066, %1067, %1068)
}

def @func_5721(%var_5686: Tensor[(3840), int16]) -> (Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(220), float64], Tensor[(16, 16, 15), float64], Tensor[(3840), int16], Tensor[(350), uint32], Tensor[(330), uint64], Tensor[(350), uint32], Tensor[(13, 8, 8), float64], Tensor[(832), float64]) {
  %1069 = @func_3467() /* ty=(Tensor[(350), uint32],) */;
  %1070 = cast(%var_5686, dtype="int16") /* ty=Tensor[(3840), int16] */;
  %1071 = cast(%var_5686, dtype="int16") /* ty=Tensor[(3840), int16] */;
  %1072 = reshape(%1070, newshape=[16, 16, 15]) /* ty=Tensor[(16, 16, 15), int16] */;
  %1073 = reshape(%1071, newshape=[16, 16, 15]) /* ty=Tensor[(16, 16, 15), int16] */;
  %1074 = @func_2872(%1072, %1073) /* ty=(Tensor[(16, 16, 15), float64], Tensor[(16, 16, 15), uint8]) */;
  %1075 = @func_4491() /* ty=Tensor[(220), float64] */;
  %1076 = cast(%1075, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %1077 = cast(meta[relay.Constant][48] /* ty=Tensor[(330), uint64] */, dtype="uint64") /* ty=Tensor[(330), uint64] */;
  %1078 = cast(%1075, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %1079 = reshape(%1076, newshape=[220]) /* ty=Tensor[(220), uint32] */;
  %1080 = reshape(%1077, newshape=[330]) /* ty=Tensor[(330), uint64] */;
  %1081 = reshape(%1078, newshape=[220]) /* ty=Tensor[(220), uint32] */;
  %1082 = @func_3886(%1079, %1080, %1081) /* ty=(Tensor[(13, 8, 8), float64], Tensor[(350), uint32], Tensor[(350), int64], Tensor[(350), uint32], Tensor[(10, 11, 3), bool], Tensor[(220), bool], Tensor[(220), int16], Tensor[(330), float64], Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(350), uint32]) */;
  %1083 = cast(meta[relay.Constant][49] /* ty=Tensor[(832), float64] */, dtype="float64") /* ty=Tensor[(832), float64] */;
  %1084 = reshape(%1083, newshape=[13, 8, 8]) /* ty=Tensor[(13, 8, 8), float64] */;
  %1085 = %1069.0;
  %1086 = @func_4403() /* ty=Tensor[(350), uint32] */;
  %1087 = %1074.0;
  %1088 = %1082.1;
  %1089 = @func_4403() /* ty=Tensor[(350), uint32] */;
  %1090 = @func_2433(%1084) /* ty=Tensor[(13, 8, 8), float64] */;
  (%1085, %1086, %1075, %1087, %var_5686, %1088, meta[relay.Constant][48] /* ty=Tensor[(330), uint64] */, %1089, %1090, meta[relay.Constant][49] /* ty=Tensor[(832), float64] */)
}

def @func_3535(%var_3496: Tensor[(350), uint32], %var_3529: Tensor[(220), uint32]) -> (Tensor[(350), bool], Tensor[(16, 16, 15), int16], Tensor[(220), uint32], Tensor[(330), uint64], Tensor[(5, 66), uint64]) {
  %1091 = @func_3206() /* ty=Tensor[(350), uint32] */;
  %1092 = cast(%var_3496, dtype="bool") /* ty=Tensor[(350), bool] */;
  %1093 = shape_of(%1091, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1094 = cast(%1091, dtype="bool") /* ty=Tensor[(350), bool] */;
  %1095 = dyn.reshape(%1092, %1093, newshape=[]) /* ty=Tensor[(?), bool] */;
  %1096 = cast(%var_3529, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %1097 = reshape(%1096, newshape=[1, 220]) /* ty=Tensor[(1, 220), uint32] */;
  %1098 = @func_3317(%1097) /* ty=(Tensor[(10, 11, 3), bool], Tensor[(10, 11, 2), bool], Tensor[(1, 220), uint32], Tensor[(16, 16, 15), int16], Tensor[(350), int64]) */;
  %1099 = cast(meta[relay.Constant][50] /* ty=Tensor[(5, 66), uint64] */, dtype="uint64") /* ty=Tensor[(5, 66), uint64] */;
  %1100 = reshape(%1099, newshape=[330]) /* ty=Tensor[(330), uint64] */;
  %1101 = @func_950(%1100) /* ty=(Tensor[(1, 4, 3), float32], Tensor[(10, 11, 3), bool], Tensor[(330), uint64]) */;
  %1102 = less_equal(%1094, %1095) /* ty=Tensor[(350), bool] */;
  %1103 = %1098.3;
  %1104 = %1101.2;
  (%1102, %1103, %var_3529, %1104, meta[relay.Constant][50] /* ty=Tensor[(5, 66), uint64] */)
}

def @func_4751(%var_4748: Tensor[(3840), int16]) -> (Tensor[(350), uint32], Tensor[(16, 16, 15), uint8], Tensor[(3840), int16]) {
  %1105 = cast(%var_4748, dtype="int16") /* ty=Tensor[(3840), int16] */;
  %1106 = cast(%var_4748, dtype="int16") /* ty=Tensor[(3840), int16] */;
  %1107 = reshape(%1105, newshape=[16, 16, 15]) /* ty=Tensor[(16, 16, 15), int16] */;
  %1108 = reshape(%1106, newshape=[16, 16, 15]) /* ty=Tensor[(16, 16, 15), int16] */;
  %1109 = @func_2872(%1107, %1108) /* ty=(Tensor[(16, 16, 15), float64], Tensor[(16, 16, 15), uint8]) */;
  %1110 = @func_3206() /* ty=Tensor[(350), uint32] */;
  %1111 = %1109.1;
  (%1110, %1111, %var_4748)
}

def @func_6464() -> Tensor[(350), uint32] {
  %1112 = @func_4591() /* ty=(Tensor[(350), uint32], Tensor[(350), uint32]) */;
  %1112.0
}

def @func_12952(%var_12945: Tensor[(220), float32]) -> (Tensor[(350), uint32], Tensor[(16, 16, 15), int16], Tensor[(220), float32]) {
  %1113 = cast(%var_12945, dtype="float32") /* ty=Tensor[(220), float32] */;
  %1114 = reshape(%1113, newshape=[220]) /* ty=Tensor[(220), float32] */;
  %1115 = @func_11746(%1114) /* ty=(Tensor[(350), uint8], Tensor[(220), int32], Tensor[(16, 16, 15), int16], Tensor[(350), uint32]) */;
  %1116 = @func_7109() /* ty=Tensor[(350), uint32] */;
  %1117 = %1115.2;
  (%1116, %1117, %var_12945)
}

def @func_6781() -> (Tensor[(220), float64],) {
  %1118 = @func_5540() /* ty=Tensor[(220), float64] */;
  (%1118,)
}

def @func_7930() -> Tensor[(350), uint32] {
  %1119 = @func_4591() /* ty=(Tensor[(350), uint32], Tensor[(350), uint32]) */;
  %1119.0
}

def @func_14398() -> Tensor[(350), uint32] {
  @func_3951() /* ty=Tensor[(350), uint32] */
}

def @func_12149(%var_12143: Tensor[(55, 6), uint64]) -> (Tensor[(55, 6), float64],) {
  %1120 = @func_10043() /* ty=(Tensor[(350), float32], Tensor[(55, 6), uint64], Tensor[(350), float64], Tensor[(220), float64]) */;
  %1121 = %1120.1;
  %1122 = cast(%var_12143, dtype="float64") /* ty=Tensor[(55, 6), float64] */;
  %1123 = shape_of(%1121, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1124 = cast(%1121, dtype="float64") /* ty=Tensor[(55, 6), float64] */;
  %1125 = dyn.reshape(%1122, %1123, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %1126 = maximum(%1124, %1125) /* ty=Tensor[(55, 6), float64] */;
  (%1126,)
}

def @func_3409() -> (Tensor[(384), float64],) {
  %1127 = @func_3389() /* ty=(Tensor[(350), float32], Tensor[(13, 8, 8), float64], Tensor[(384), float64], Tensor[(220), uint32]) */;
  %1128 = %1127.2;
  (%1128,)
}

def @func_3206() -> Tensor[(350), uint32] {
  %1129 = @func_3090() /* ty=(Tensor[(350), uint32],) */;
  %1129.0
}

def @func_10623() -> Tensor[(350), uint32] {
  @func_9522() /* ty=Tensor[(350), uint32] */
}

def @func_11513() -> Tensor[(350), uint32] {
  %1130 = @func_8672() /* ty=(Tensor[(350), uint32],) */;
  %1130.0
}

def @func_5337() -> (Tensor[(350), uint8], Tensor[(384), float64]) {
  %1131 = @func_5067() /* ty=(Tensor[(384), float64], Tensor[(350), uint8]) */;
  %1132 = @func_4778() /* ty=Tensor[(350), uint8] */;
  %1133 = %1131.0;
  (%1132, %1133)
}

def @func_8584() -> Tensor[(350), uint8] {
  %1134 = @func_5135() /* ty=(Tensor[(350), uint8],) */;
  %1134.0
}

def @func_12852() -> Tensor[(220), float64] {
  %1135 = @func_6726() /* ty=(Tensor[(220), float64], Tensor[(15, 16, 9), float64]) */;
  %1135.0
}

def @func_4038() -> (Tensor[(350), uint32], Tensor[(350), uint32]) {
  %1136 = @func_3090() /* ty=(Tensor[(350), uint32],) */;
  %1137 = @func_3206() /* ty=Tensor[(350), uint32] */;
  %1138 = %1136.0;
  (%1137, %1138)
}

def @func_10180() -> Tensor[(350), uint32] {
  %1139 = @func_4393() /* ty=(Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(1, 220), uint32], Tensor[(330), uint64], Tensor[(10, 11, 3), bool]) */;
  %1139.0
}

def @func_950(%var_938: Tensor[(330), uint64]) -> (Tensor[(1, 4, 3), float32], Tensor[(10, 11, 3), bool], Tensor[(330), uint64]) {
  %1140 = cast(meta[relay.Constant][51] /* ty=Tensor[(1, 4, 3), float32] */, dtype="float32") /* ty=Tensor[(1, 4, 3), float32] */;
  %1141 = cast(%var_938, dtype="uint64") /* ty=Tensor[(330), uint64] */;
  %1142 = cast(%var_938, dtype="uint64") /* ty=Tensor[(330), uint64] */;
  %1143 = reshape(%1141, newshape=[10, 11, 3]) /* ty=Tensor[(10, 11, 3), uint64] */;
  %1144 = reshape(%1142, newshape=[10, 11, 3]) /* ty=Tensor[(10, 11, 3), uint64] */;
  %1145 = sin(%1140) /* ty=Tensor[(1, 4, 3), float32] */;
  %1146 = @func_191(%1143, %1144) /* ty=Tensor[(10, 11, 3), bool] */;
  (%1145, %1146, %var_938)
}

def @func_6726() -> (Tensor[(220), float64], Tensor[(15, 16, 9), float64]) {
  %1147 = @func_6523() /* ty=(Tensor[(220), float64],) */;
  %1148 = cast(meta[relay.Constant][52] /* ty=Tensor[(15, 16, 9), float64] */, dtype="float64") /* ty=Tensor[(15, 16, 9), float64] */;
  %1149 = sinh(%1148) /* ty=Tensor[(15, 16, 9), float64] */;
  %1150 = cast(%1149, dtype="float64") /* ty=Tensor[(15, 16, 9), float64] */;
  %1151 = %1147.0;
  %1152 = atan(%1150) /* ty=Tensor[(15, 16, 9), float64] */;
  (%1151, %1152)
}

def @func_8125() -> (Tensor[(16, 16, 15), int16],) {
  %1153 = @func_6108() /* ty=Tensor[(16, 16, 15), int16] */;
  (%1153,)
}

def @func_5099() -> (Tensor[(16, 16, 15), int16], Tensor[(16, 16, 15), int16], Tensor[(350), uint32]) {
  %1154 = @func_5028() /* ty=(Tensor[(16, 16, 15), int16],) */;
  %1155 = @func_4038() /* ty=(Tensor[(350), uint32], Tensor[(350), uint32]) */;
  %1156 = %1154.0;
  %1157 = @func_3978() /* ty=Tensor[(16, 16, 15), int16] */;
  %1158 = %1155.0;
  (%1156, %1157, %1158)
}

def @func_8979() -> Tensor[(220), float64] {
  @func_6444() /* ty=Tensor[(220), float64] */
}

def @func_5067() -> (Tensor[(384), float64], Tensor[(350), uint8]) {
  %1159 = @func_3409() /* ty=(Tensor[(384), float64],) */;
  %1160 = %1159.0;
  %1161 = @func_4778() /* ty=Tensor[(350), uint8] */;
  (%1160, %1161)
}

def @func_7109() -> Tensor[(350), uint32] {
  @func_4403() /* ty=Tensor[(350), uint32] */
}

def @func_6108() -> Tensor[(16, 16, 15), int16] {
  %1162 = @func_5028() /* ty=(Tensor[(16, 16, 15), int16],) */;
  %1162.0
}

def @func_9477() -> (Tensor[(384), float64], Tensor[(330), uint64], Tensor[(330), uint64], Tensor[(350), uint32], Tensor[(350), uint8], Tensor[(350), uint8]) {
  %1163 = @func_9127() /* ty=(Tensor[(384), float64],) */;
  %1164 = cast(meta[relay.Constant][53] /* ty=Tensor[(330), uint64] */, dtype="uint64") /* ty=Tensor[(330), uint64] */;
  %1165 = reshape(%1164, newshape=[330]) /* ty=Tensor[(330), uint64] */;
  %1166 = @func_5455(%1165) /* ty=(Tensor[(350), uint32], Tensor[(350), float32], Tensor[(330), uint64], Tensor[(330), uint64]) */;
  %1167 = @func_5067() /* ty=(Tensor[(384), float64], Tensor[(350), uint8]) */;
  %1168 = %1163.0;
  %1169 = %1166.2;
  %1170 = @func_2915() /* ty=Tensor[(350), uint32] */;
  %1171 = @func_4778() /* ty=Tensor[(350), uint8] */;
  %1172 = %1167.1;
  (%1168, %1169, meta[relay.Constant][53] /* ty=Tensor[(330), uint64] */, %1170, %1171, %1172)
}

def @func_14670() -> Tensor[(350), float32] {
  @func_9231() /* ty=Tensor[(350), float32] */
}

def @func_5028() -> (Tensor[(16, 16, 15), int16],) {
  %1173 = @func_2760() /* ty=(Tensor[(16, 16, 15), int16],) */;
  %1174 = %1173.0;
  (%1174,)
}

def @func_9522() -> Tensor[(350), uint32] {
  @func_7109() /* ty=Tensor[(350), uint32] */
}

def @func_2760() -> (Tensor[(16, 16, 15), int16],) {
  %1175 = cast(meta[relay.Constant][54] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %1176 = cast(meta[relay.Constant][55] /* ty=Tensor[(16, 16, 15), int16] */, dtype="int16") /* ty=Tensor[(16, 16, 15), int16] */;
  %1177 = logical_xor(%1175, %1176) /* ty=Tensor[(16, 16, 15), int16] */;
  (%1177,)
}

def @func_9191(%var_9184: Tensor[(330), uint64]) -> (Tensor[(220), float64], Tensor[(350), float32], Tensor[(330), uint64]) {
  %1178 = @func_6073() /* ty=(Tensor[(384), float64], Tensor[(220), float64]) */;
  %1179 = %1178.1;
  %1180 = cast(%1179, dtype="float64") /* ty=Tensor[(220), float64] */;
  %1181 = cast(%var_9184, dtype="uint64") /* ty=Tensor[(330), uint64] */;
  %1182 = reshape(%1181, newshape=[330]) /* ty=Tensor[(330), uint64] */;
  %1183 = @func_5455(%1182) /* ty=(Tensor[(350), uint32], Tensor[(350), float32], Tensor[(330), uint64], Tensor[(330), uint64]) */;
  %1184 = sqrt(%1180) /* ty=Tensor[(220), float64] */;
  %1185 = %1183.1;
  (%1184, %1185, %var_9184)
}

def @func_11663(%var_11654: Tensor[(16, 10, 15), float64]) -> (Tensor[(16, 10, 15), float64],) {
  %1186 = cast(%var_11654, dtype="float64") /* ty=Tensor[(16, 10, 15), float64] */;
  %1187 = rsqrt(%1186) /* ty=Tensor[(16, 10, 15), float64] */;
  (%1187,)
}

def @func_534(%var_511: Tensor[(10, 11, 2), uint32], %var_512: Tensor[(10, 11, 2), uint32]) -> (Tensor[(10, 11, 2), bool],) {
  %1188 = cast(%var_512, dtype="bool") /* ty=Tensor[(10, 11, 2), bool] */;
  %1189 = shape_of(%var_511, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1190 = cast(%var_511, dtype="bool") /* ty=Tensor[(10, 11, 2), bool] */;
  %1191 = dyn.reshape(%1188, %1189, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1192 = greater(%1190, %1191) /* ty=Tensor[(10, 11, 2), bool] */;
  (%1192,)
}

def @func_4393() -> (Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(1, 220), uint32], Tensor[(330), uint64], Tensor[(10, 11, 3), bool]) {
  %1193 = cast(meta[relay.Constant][56] /* ty=Tensor[(1, 220), uint32] */, dtype="uint32") /* ty=Tensor[(1, 220), uint32] */;
  %1194 = cast(meta[relay.Constant][57] /* ty=Tensor[(330), uint64] */, dtype="uint64") /* ty=Tensor[(330), uint64] */;
  %1195 = cast(meta[relay.Constant][56] /* ty=Tensor[(1, 220), uint32] */, dtype="uint32") /* ty=Tensor[(1, 220), uint32] */;
  %1196 = reshape(%1193, newshape=[220]) /* ty=Tensor[(220), uint32] */;
  %1197 = reshape(%1194, newshape=[330]) /* ty=Tensor[(330), uint64] */;
  %1198 = reshape(%1195, newshape=[220]) /* ty=Tensor[(220), uint32] */;
  %1199 = @func_3886(%1196, %1197, %1198) /* ty=(Tensor[(13, 8, 8), float64], Tensor[(350), uint32], Tensor[(350), int64], Tensor[(350), uint32], Tensor[(10, 11, 3), bool], Tensor[(220), bool], Tensor[(220), int16], Tensor[(330), float64], Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(350), uint32]) */;
  %1200 = cast(meta[relay.Constant][57] /* ty=Tensor[(330), uint64] */, dtype="uint64") /* ty=Tensor[(330), uint64] */;
  %1201 = cast(meta[relay.Constant][57] /* ty=Tensor[(330), uint64] */, dtype="uint64") /* ty=Tensor[(330), uint64] */;
  %1202 = reshape(%1200, newshape=[10, 11, 3]) /* ty=Tensor[(10, 11, 3), uint64] */;
  %1203 = reshape(%1201, newshape=[10, 11, 3]) /* ty=Tensor[(10, 11, 3), uint64] */;
  %1204 = @func_3448() /* ty=Tensor[(350), uint32] */;
  %1205 = @func_3894() /* ty=Tensor[(350), uint32] */;
  %1206 = %1199.10;
  %1207 = @func_191(%1202, %1203) /* ty=Tensor[(10, 11, 3), bool] */;
  (%1204, %1205, %1206, meta[relay.Constant][56] /* ty=Tensor[(1, 220), uint32] */, meta[relay.Constant][57] /* ty=Tensor[(330), uint64] */, %1207)
}

def @func_7302(%var_7290: Tensor[(220), float64]) -> (Tensor[(220), bool],) {
  %1208 = @func_7053() /* ty=Tensor[(220), float64] */;
  %1209 = cast(%var_7290, dtype="bool") /* ty=Tensor[(220), bool] */;
  %1210 = shape_of(%1208, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1211 = cast(%1208, dtype="bool") /* ty=Tensor[(220), bool] */;
  %1212 = dyn.reshape(%1209, %1210, newshape=[]) /* ty=Tensor[(?), bool] */;
  %1213 = less_equal(%1211, %1212) /* ty=Tensor[(220), bool] */;
  (%1213,)
}

def @func_3886(%var_3763: Tensor[(220), uint32], %var_3787: Tensor[(330), uint64], %var_3798: Tensor[(220), uint32]) -> (Tensor[(13, 8, 8), float64], Tensor[(350), uint32], Tensor[(350), int64], Tensor[(350), uint32], Tensor[(10, 11, 3), bool], Tensor[(220), bool], Tensor[(220), int16], Tensor[(330), float64], Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(350), uint32]) {
  %1214 = @func_3389() /* ty=(Tensor[(350), float32], Tensor[(13, 8, 8), float64], Tensor[(384), float64], Tensor[(220), uint32]) */;
  %1215 = @func_3467() /* ty=(Tensor[(350), uint32],) */;
  %1216 = cast(%var_3763, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %1217 = reshape(%1216, newshape=[1, 220]) /* ty=Tensor[(1, 220), uint32] */;
  %1218 = @func_3317(%1217) /* ty=(Tensor[(10, 11, 3), bool], Tensor[(10, 11, 2), bool], Tensor[(1, 220), uint32], Tensor[(16, 16, 15), int16], Tensor[(350), int64]) */;
  %1219 = cast(%var_3787, dtype="uint64") /* ty=Tensor[(330), uint64] */;
  %1220 = reshape(%1219, newshape=[330]) /* ty=Tensor[(330), uint64] */;
  %1221 = @func_950(%1220) /* ty=(Tensor[(1, 4, 3), float32], Tensor[(10, 11, 3), bool], Tensor[(330), uint64]) */;
  %1222 = cast(%var_3798, dtype="bool") /* ty=Tensor[(220), bool] */;
  %1223 = shape_of(%var_3763, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1224 = cast(%var_3763, dtype="bool") /* ty=Tensor[(220), bool] */;
  %1225 = dyn.reshape(%1222, %1223, newshape=[]) /* ty=Tensor[(?), bool] */;
  %1226 = cast(%var_3763, dtype="int16") /* ty=Tensor[(220), int16] */;
  %1227 = shape_of(%var_3798, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1228 = cast(%var_3798, dtype="int16") /* ty=Tensor[(220), int16] */;
  %1229 = dyn.reshape(%1226, %1227, newshape=[]) /* ty=Tensor[(?), int16] */;
  %1230 = cast(%var_3787, dtype="float64") /* ty=Tensor[(330), float64] */;
  %1231 = %1214.1;
  %1232 = %1215.0;
  %1233 = %1218.4;
  %1234 = @func_3206() /* ty=Tensor[(350), uint32] */;
  %1235 = %1221.1;
  %1236 = logical_and(%1224, %1225) /* ty=Tensor[(220), bool] */;
  %1237 = add(%1228, %1229) /* ty=Tensor[(220), int16] */;
  %1238 = log(%1230) /* ty=Tensor[(330), float64] */;
  %1239 = @func_3668() /* ty=Tensor[(350), uint32] */;
  %1240 = @func_3206() /* ty=Tensor[(350), uint32] */;
  %1241 = @func_3229() /* ty=Tensor[(350), uint32] */;
  (%1231, %1232, %1233, %1234, %1235, %1236, %1237, %1238, %1239, %1240, %1241)
}

def @func_11029() -> (Tensor[(16, 16, 15), int16],) {
  %1242 = @func_8440() /* ty=(Tensor[(16, 16, 15), int16], Tensor[(350), uint8], Tensor[(350), uint8]) */;
  %1243 = %1242.0;
  (%1243,)
}

def @func_12255() -> (Tensor[(350), float32], Tensor[(220), float64], Tensor[(350), bool]) {
  %1244 = @func_6379() /* ty=(Tensor[(350), float32], Tensor[(16, 16, 15), int16]) */;
  %1245 = @func_3441() /* ty=(Tensor[(220), float64],) */;
  %1246 = %1244.0;
  %1247 = cast(%1246, dtype="uint32") /* ty=Tensor[(350), uint32] */;
  %1248 = %1245.0;
  %1249 = cast(%1248, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %1250 = reshape(%1247, newshape=[350]) /* ty=Tensor[(350), uint32] */;
  %1251 = reshape(%1249, newshape=[220]) /* ty=Tensor[(220), uint32] */;
  %1252 = @func_3535(%1250, %1251) /* ty=(Tensor[(350), bool], Tensor[(16, 16, 15), int16], Tensor[(220), uint32], Tensor[(330), uint64], Tensor[(5, 66), uint64]) */;
  %1253 = %1252.0;
  (%1246, %1248, %1253)
}

def @func_14346() -> (Tensor[(350), float64], Tensor[(220), uint32]) {
  %1254 = @func_5760() /* ty=(Tensor[(350), float64], Tensor[(220), float64]) */;
  %1255 = @func_5774() /* ty=(Tensor[(220), uint32],) */;
  %1256 = %1254.0;
  %1257 = %1255.0;
  (%1256, %1257)
}

def @func_4403() -> Tensor[(350), uint32] {
  @func_3951() /* ty=Tensor[(350), uint32] */
}

def @func_8548(%var_8546: Tensor[(180), float32]) -> (Tensor[(350), float64], Tensor[(350), uint32], Tensor[(9, 5, 4), bool], Tensor[(180), float32]) {
  %1258 = @func_5934() /* ty=(Tensor[(16, 16, 15), int16], Tensor[(350), float64], Tensor[(350), uint32]) */;
  %1259 = @func_3467() /* ty=(Tensor[(350), uint32],) */;
  %1260 = cast(%var_8546, dtype="float32") /* ty=Tensor[(180), float32] */;
  %1261 = cast(%var_8546, dtype="float32") /* ty=Tensor[(180), float32] */;
  %1262 = reshape(%1260, newshape=[9, 5, 4]) /* ty=Tensor[(9, 5, 4), float32] */;
  %1263 = reshape(%1261, newshape=[9, 5, 4]) /* ty=Tensor[(9, 5, 4), float32] */;
  %1264 = %1258.1;
  %1265 = %1259.0;
  %1266 = @func_4005(%1262, %1263) /* ty=Tensor[(9, 5, 4), bool] */;
  (%1264, %1265, %1266, %var_8546)
}

def @func_14717(%var_14682: float32) -> (Tensor[(16, 8, 13), bool],) {
  %1267 = cast(%var_14682, dtype="bool") /* ty=bool */;
  %1268 = cast(meta[relay.Constant][58] /* ty=Tensor[(16, 8, 13), float32] */, dtype="bool") /* ty=Tensor[(16, 8, 13), bool] */;
  %1269 = not_equal(%1267, %1268) /* ty=Tensor[(16, 8, 13), bool] */;
  (%1269,)
}

def @func_6511() -> (Tensor[(350), uint32],) {
  %1270 = @func_3894() /* ty=Tensor[(350), uint32] */;
  (%1270,)
}

def @func_3467() -> (Tensor[(350), uint32],) {
  %1271 = @func_2915() /* ty=Tensor[(350), uint32] */;
  (%1271,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_8362() -> (Tensor[(350), uint32],) {
  @func_8360() /* ty=(Tensor[(350), uint32],) */
}

def @func_3206() -> Tensor[(350), uint32] {
  %0 = @func_3090() /* ty=(Tensor[(350), uint32],) */;
  %0.0
}

def @func_11379() -> (Tensor[(350), uint32],) {
  %3 = fn () -> (Tensor[(350), uint32],) {
    %1 = @func_6511() /* ty=(Tensor[(350), uint32],) */;
    %2 = %1.0;
    (%2,)
  };
  %3() /* ty=(Tensor[(350), uint32],) */
}

def @func_13922() -> (Tensor[(220), float64], Tensor[(220), float64]) {
  %7 = fn () -> (Tensor[(220), float64], Tensor[(220), float64]) {
    %4 = @func_11542() /* ty=(Tensor[(220), float64],) */;
    %5 = @func_7957() /* ty=Tensor[(220), float64] */;
    %6 = %4.0;
    (%5, %6)
  };
  %7() /* ty=(Tensor[(220), float64], Tensor[(220), float64]) */
}

def @func_6381() -> (Tensor[(350), float32], Tensor[(16, 16, 15), int16]) {
  @func_6379() /* ty=(Tensor[(350), float32], Tensor[(16, 16, 15), int16]) */
}

def @func_10682() -> (Tensor[(16, 16, 15), int16],) {
  %8 = @func_8125() /* ty=(Tensor[(16, 16, 15), int16],) */;
  %9 = %8.0;
  (%9,)
}

def @func_14400() -> Tensor[(350), uint32] {
  @func_14398() /* ty=Tensor[(350), uint32] */
}

def @func_10623() -> Tensor[(350), uint32] {
  @func_9522() /* ty=Tensor[(350), uint32] */
}

def @func_8890() -> Tensor[(220), float64] {
  %10 = @func_3441() /* ty=(Tensor[(220), float64],) */;
  %10.0
}

def @func_9302() -> (Tensor[(220), float64], Tensor[(350), float32], Tensor[(220), float64]) {
  @func_9300() /* ty=(Tensor[(220), float64], Tensor[(350), float32], Tensor[(220), float64]) */
}

def @func_6108() -> Tensor[(16, 16, 15), int16] {
  %11 = @func_5028() /* ty=(Tensor[(16, 16, 15), int16],) */;
  %11.0
}

def @func_2433(%var_2427: Tensor[(13, 8, 8), float64]) -> Tensor[(13, 8, 8), float64] {
  %12 = cast(%var_2427, dtype="float64") /* ty=Tensor[(13, 8, 8), float64] */;
  erf(%12) /* ty=Tensor[(13, 8, 8), float64] */
}

def @func_9129() -> (Tensor[(384), float64],) {
  @func_9127() /* ty=(Tensor[(384), float64],) */
}

def @func_6726() -> (Tensor[(220), float64], Tensor[(15, 16, 9), float64]) {
  %13 = @func_6523() /* ty=(Tensor[(220), float64],) */;
  %14 = cast(meta[relay.Constant][0] /* ty=Tensor[(15, 16, 9), float64] */, dtype="float64") /* ty=Tensor[(15, 16, 9), float64] */;
  %15 = sinh(%14) /* ty=Tensor[(15, 16, 9), float64] */;
  %16 = cast(%15, dtype="float64") /* ty=Tensor[(15, 16, 9), float64] */;
  %17 = %13.0;
  %18 = atan(%16) /* ty=Tensor[(15, 16, 9), float64] */;
  (%17, %18)
}

def @func_13327() -> (Tensor[(350), uint32], Tensor[(330), uint64]) {
  %19 = @func_12729() /* ty=(Tensor[(350), uint32], Tensor[(330), uint64], Tensor[(1, 3840), int16], Tensor[(55, 6), uint16], Tensor[(220), bool], Tensor[(220), float64]) */;
  %20 = @func_4403() /* ty=Tensor[(350), uint32] */;
  %21 = %19.1;
  (%20, %21)
}

def @func_11665(%var_11664: Tensor[(16, 10, 15), float64]) -> (Tensor[(16, 10, 15), float64],) {
  %24 = fn (%var_11654: Tensor[(16, 10, 15), float64]) -> (Tensor[(16, 10, 15), float64],) {
    %22 = cast(%var_11654, dtype="float64") /* ty=Tensor[(16, 10, 15), float64] */;
    %23 = rsqrt(%22) /* ty=Tensor[(16, 10, 15), float64] */;
    (%23,)
  };
  %24(%var_11664) /* ty=(Tensor[(16, 10, 15), float64],) */
}

def @func_4039() -> (Tensor[(350), uint32], Tensor[(350), uint32]) {
  %28 = fn () -> (Tensor[(350), uint32], Tensor[(350), uint32]) {
    %25 = @func_3090() /* ty=(Tensor[(350), uint32],) */;
    %26 = @func_3206() /* ty=Tensor[(350), uint32] */;
    %27 = %25.0;
    (%26, %27)
  };
  %28() /* ty=(Tensor[(350), uint32], Tensor[(350), uint32]) */
}

def @func_10766(%var_10765: Tensor[(48, 8), float64]) -> (Tensor[(350), float32], Tensor[(16, 16, 15), int16], Tensor[(10, 11, 2), bool], Tensor[(48, 8), float64], Tensor[(220), uint32]) {
  %38 = fn (%var_10745: Tensor[(48, 8), float64]) -> (Tensor[(350), float32], Tensor[(16, 16, 15), int16], Tensor[(10, 11, 2), bool], Tensor[(48, 8), float64], Tensor[(220), uint32]) {
    %29 = @func_5028() /* ty=(Tensor[(16, 16, 15), int16],) */;
    %30 = cast(%var_10745, dtype="float64") /* ty=Tensor[(48, 8), float64] */;
    %31 = cast(meta[relay.Constant][1] /* ty=Tensor[(220), uint32] */, dtype="uint32") /* ty=Tensor[(220), uint32] */;
    %32 = reshape(%30, newshape=[16, 4, 6]) /* ty=Tensor[(16, 4, 6), float64] */;
    %33 = reshape(%31, newshape=[220]) /* ty=Tensor[(220), uint32] */;
    %34 = @func_1219(%32, %33) /* ty=(Tensor[(16, 4, 6), bool], Tensor[(330), bool], Tensor[(10, 11, 2), bool], Tensor[(220), uint32], Tensor[(10, 11, 2), bool], Tensor[(10, 11, 3), float32], Tensor[(10, 11, 3), bool]) */;
    %35 = @func_9231() /* ty=Tensor[(350), float32] */;
    %36 = %29.0;
    %37 = %34.2;
    (%35, %36, %37, %var_10745, meta[relay.Constant][1] /* ty=Tensor[(220), uint32] */)
  };
  %38(%var_10765) /* ty=(Tensor[(350), float32], Tensor[(16, 16, 15), int16], Tensor[(10, 11, 2), bool], Tensor[(48, 8), float64], Tensor[(220), uint32]) */
}

def @func_13622(%var_13620: uint16, %var_13621: Tensor[(210), float32]) -> (Tensor[(5, 12, 3), uint16], Tensor[(3840), int16], Tensor[(210), float32], Tensor[(220), float64], Tensor[(220), float64]) {
  %49 = fn (%var_13582: uint16, %var_13592: Tensor[(210), float32]) -> (Tensor[(5, 12, 3), uint16], Tensor[(3840), int16], Tensor[(210), float32], Tensor[(220), float64], Tensor[(220), float64]) {
    %39 = cast(%var_13582, dtype="uint16") /* ty=uint16 */;
    %40 = cast(meta[relay.Constant][2] /* ty=Tensor[(5, 12, 3), uint16] */, dtype="uint16") /* ty=Tensor[(5, 12, 3), uint16] */;
    %41 = cast(%var_13592, dtype="float32") /* ty=Tensor[(210), float32] */;
    %42 = reshape(%41, newshape=[3, 14, 5]) /* ty=Tensor[(3, 14, 5), float32] */;
    %43 = @func_6283(%42) /* ty=(Tensor[(3, 14, 5), float32], Tensor[(13, 8, 8), float64], Tensor[(3840), int16]) */;
    %44 = @func_9996() /* ty=(Tensor[(220), float64], Tensor[(350), uint32]) */;
    %45 = subtract(%39, %40) /* ty=Tensor[(5, 12, 3), uint16] */;
    %46 = %43.2;
    %47 = %44.0;
    %48 = @func_7957() /* ty=Tensor[(220), float64] */;
    (%45, %46, %var_13592, %47, %48)
  };
  %49(%var_13620, %var_13621) /* ty=(Tensor[(5, 12, 3), uint16], Tensor[(3840), int16], Tensor[(210), float32], Tensor[(220), float64], Tensor[(220), float64]) */
}

def @func_5135() -> (Tensor[(350), uint8],) {
  %50 = @func_5067() /* ty=(Tensor[(384), float64], Tensor[(350), uint8]) */;
  %51 = %50.1;
  (%51,)
}

def @func_14130() -> Tensor[(220), float64] {
  @func_14128() /* ty=Tensor[(220), float64] */
}

def @func_8203() -> (Tensor[(220), float64], Tensor[(350), uint8], Tensor[(3, 8, 14), float64], Tensor[(336), int64]) {
  %60 = fn () -> (Tensor[(220), float64], Tensor[(350), uint8], Tensor[(3, 8, 14), float64], Tensor[(336), int64]) {
    %52 = cast(meta[relay.Constant][3] /* ty=Tensor[(336), int64] */, dtype="int64") /* ty=Tensor[(336), int64] */;
    %53 = cast(meta[relay.Constant][3] /* ty=Tensor[(336), int64] */, dtype="int64") /* ty=Tensor[(336), int64] */;
    %54 = reshape(%52, newshape=[3, 8, 14]) /* ty=Tensor[(3, 8, 14), int64] */;
    %55 = reshape(%53, newshape=[3, 8, 14]) /* ty=Tensor[(3, 8, 14), int64] */;
    %56 = @func_7897(%54, %55) /* ty=(Tensor[(3, 8, 14), float64], Tensor[(3, 8, 14), float64]) */;
    %57 = @func_4491() /* ty=Tensor[(220), float64] */;
    %58 = @func_4070() /* ty=Tensor[(350), uint8] */;
    %59 = %56.0;
    (%57, %58, %59, meta[relay.Constant][3] /* ty=Tensor[(336), int64] */)
  };
  %60() /* ty=(Tensor[(220), float64], Tensor[(350), uint8], Tensor[(3, 8, 14), float64], Tensor[(336), int64]) */
}

def @func_10354() -> (Tensor[(350), uint32],) {
  %61 = @func_6604() /* ty=(Tensor[(350), float32], Tensor[(350), uint32]) */;
  %62 = %61.1;
  (%62,)
}

def @func_7616() -> Tensor[(350), uint8] {
  @func_4070() /* ty=Tensor[(350), uint8] */
}

def @func_14346() -> (Tensor[(350), float64], Tensor[(220), uint32]) {
  %63 = @func_5760() /* ty=(Tensor[(350), float64], Tensor[(220), float64]) */;
  %64 = @func_5774() /* ty=(Tensor[(220), uint32],) */;
  %65 = %63.0;
  %66 = %64.0;
  (%65, %66)
}

def @func_8801(%var_8800: Tensor[(3840), int16]) -> (Tensor[(384), float64], Tensor[(220), float64], Tensor[(330), uint64], Tensor[(3840), int16]) {
  %75 = fn (%var_8793: Tensor[(3840), int16]) -> (Tensor[(384), float64], Tensor[(220), float64], Tensor[(330), uint64], Tensor[(3840), int16]) {
    %67 = @func_3389() /* ty=(Tensor[(350), float32], Tensor[(13, 8, 8), float64], Tensor[(384), float64], Tensor[(220), uint32]) */;
    %68 = @func_6781() /* ty=(Tensor[(220), float64],) */;
    %69 = cast(%var_8793, dtype="int16") /* ty=Tensor[(3840), int16] */;
    %70 = reshape(%69, newshape=[3840]) /* ty=Tensor[(3840), int16] */;
    %71 = @func_5721(%70) /* ty=(Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(220), float64], Tensor[(16, 16, 15), float64], Tensor[(3840), int16], Tensor[(350), uint32], Tensor[(330), uint64], Tensor[(350), uint32], Tensor[(13, 8, 8), float64], Tensor[(832), float64]) */;
    %72 = %67.2;
    %73 = %68.0;
    %74 = %71.6;
    (%72, %73, %74, %var_8793)
  };
  %75(%var_8800) /* ty=(Tensor[(384), float64], Tensor[(220), float64], Tensor[(330), uint64], Tensor[(3840), int16]) */
}

def @func_9231() -> Tensor[(350), float32] {
  %76 = @func_4144() /* ty=(Tensor[(350), float32], Tensor[(14, 5, 5), uint32]) */;
  %76.0
}

def @func_12066() -> (Tensor[(350), uint32], Tensor[(350), float32]) {
  %81 = fn () -> (Tensor[(350), uint32], Tensor[(350), float32]) {
    %77 = @func_3090() /* ty=(Tensor[(350), uint32],) */;
    %78 = @func_7368() /* ty=(Tensor[(350), float32],) */;
    %79 = %77.0;
    %80 = %78.0;
    (%79, %80)
  };
  %81() /* ty=(Tensor[(350), uint32], Tensor[(350), float32]) */
}

def @func_5965() -> (Tensor[(16, 16, 15), int16],) {
  %82 = @func_5934() /* ty=(Tensor[(16, 16, 15), int16], Tensor[(350), float64], Tensor[(350), uint32]) */;
  %83 = %82.0;
  (%83,)
}

def @func_13450() -> (Tensor[(220), float64], Tensor[(220), float32], Tensor[(16, 16, 15), int16], Tensor[(350), uint32], Tensor[(220), float64], Tensor[(350), float32]) {
  %94 = fn () -> (Tensor[(220), float64], Tensor[(220), float32], Tensor[(16, 16, 15), int16], Tensor[(350), uint32], Tensor[(220), float64], Tensor[(350), float32]) {
    %84 = @func_11586() /* ty=(Tensor[(16, 16, 15), int16], Tensor[(350), uint32], Tensor[(350), uint8], Tensor[(220), float64]) */;
    %85 = @func_5965() /* ty=(Tensor[(16, 16, 15), int16],) */;
    %86 = @func_3441() /* ty=(Tensor[(220), float64],) */;
    %87 = @func_3389() /* ty=(Tensor[(350), float32], Tensor[(13, 8, 8), float64], Tensor[(384), float64], Tensor[(220), uint32]) */;
    %88 = %84.3;
    %89 = @func_8862() /* ty=Tensor[(220), float32] */;
    %90 = %85.0;
    %91 = @func_2915() /* ty=Tensor[(350), uint32] */;
    %92 = %86.0;
    %93 = %87.0;
    (%88, %89, %90, %91, %92, %93)
  };
  %94() /* ty=(Tensor[(220), float64], Tensor[(220), float32], Tensor[(16, 16, 15), int16], Tensor[(350), uint32], Tensor[(220), float64], Tensor[(350), float32]) */
}

def @func_14415() -> Tensor[(1, 3840), float64] {
  %100 = fn () -> Tensor[(1, 3840), float64] {
    %95 = @func_12729() /* ty=(Tensor[(350), uint32], Tensor[(330), uint64], Tensor[(1, 3840), int16], Tensor[(55, 6), uint16], Tensor[(220), bool], Tensor[(220), float64]) */;
    %96 = %95.2;
    %97 = cast(%96, dtype="float32") /* ty=Tensor[(1, 3840), float32] */;
    %98 = sqrt(%97) /* ty=Tensor[(1, 3840), float32] */;
    %99 = cast(%98, dtype="float64") /* ty=Tensor[(1, 3840), float64] */;
    acos(%99) /* ty=Tensor[(1, 3840), float64] */
  };
  %100() /* ty=Tensor[(1, 3840), float64] */
}

def @func_3538(%var_3536: Tensor[(350), uint32], %var_3537: Tensor[(220), uint32]) -> (Tensor[(350), bool], Tensor[(16, 16, 15), int16], Tensor[(220), uint32], Tensor[(330), uint64], Tensor[(5, 66), uint64]) {
  %115 = fn (%var_3496: Tensor[(350), uint32], %var_3529: Tensor[(220), uint32]) -> (Tensor[(350), bool], Tensor[(16, 16, 15), int16], Tensor[(220), uint32], Tensor[(330), uint64], Tensor[(5, 66), uint64]) {
    %101 = @func_3206() /* ty=Tensor[(350), uint32] */;
    %102 = cast(%var_3496, dtype="bool") /* ty=Tensor[(350), bool] */;
    %103 = shape_of(%101, dtype="int32") /* ty=Tensor[(1), int32] */;
    %104 = cast(%101, dtype="bool") /* ty=Tensor[(350), bool] */;
    %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?), bool] */;
    %106 = cast(%var_3529, dtype="uint32") /* ty=Tensor[(220), uint32] */;
    %107 = reshape(%106, newshape=[1, 220]) /* ty=Tensor[(1, 220), uint32] */;
    %108 = @func_3317(%107) /* ty=(Tensor[(10, 11, 3), bool], Tensor[(10, 11, 2), bool], Tensor[(1, 220), uint32], Tensor[(16, 16, 15), int16], Tensor[(350), int64]) */;
    %109 = cast(meta[relay.Constant][4] /* ty=Tensor[(5, 66), uint64] */, dtype="uint64") /* ty=Tensor[(5, 66), uint64] */;
    %110 = reshape(%109, newshape=[330]) /* ty=Tensor[(330), uint64] */;
    %111 = @func_950(%110) /* ty=(Tensor[(1, 4, 3), float32], Tensor[(10, 11, 3), bool], Tensor[(330), uint64]) */;
    %112 = less_equal(%104, %105) /* ty=Tensor[(350), bool] */;
    %113 = %108.3;
    %114 = %111.2;
    (%112, %113, %var_3529, %114, meta[relay.Constant][4] /* ty=Tensor[(5, 66), uint64] */)
  };
  %115(%var_3536, %var_3537) /* ty=(Tensor[(350), bool], Tensor[(16, 16, 15), int16], Tensor[(220), uint32], Tensor[(330), uint64], Tensor[(5, 66), uint64]) */
}

def @func_7173(%var_7152: Tensor[(220), float64]) -> (Tensor[(220), uint64], Tensor[(350), uint32], Tensor[(13, 8, 8), float64], Tensor[(832), float64]) {
  %116 = @func_5540() /* ty=Tensor[(220), float64] */;
  %117 = cast(%var_7152, dtype="uint64") /* ty=Tensor[(220), uint64] */;
  %118 = shape_of(%116, dtype="int32") /* ty=Tensor[(1), int32] */;
  %119 = cast(%116, dtype="uint64") /* ty=Tensor[(220), uint64] */;
  %120 = dyn.reshape(%117, %118, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %121 = @func_3467() /* ty=(Tensor[(350), uint32],) */;
  %122 = cast(meta[relay.Constant][5] /* ty=Tensor[(832), float64] */, dtype="float64") /* ty=Tensor[(832), float64] */;
  %123 = reshape(%122, newshape=[13, 8, 8]) /* ty=Tensor[(13, 8, 8), float64] */;
  %124 = right_shift(%119, %120) /* ty=Tensor[(220), uint64] */;
  %125 = %121.0;
  %126 = @func_2433(%123) /* ty=Tensor[(13, 8, 8), float64] */;
  (%124, %125, %126, meta[relay.Constant][5] /* ty=Tensor[(832), float64] */)
}

def @func_9756() -> (Tensor[(220), float64],) {
  @func_9754() /* ty=(Tensor[(220), float64],) */
}

def @func_3391() -> (Tensor[(350), float32], Tensor[(13, 8, 8), float64], Tensor[(384), float64], Tensor[(220), uint32]) {
  @func_3389() /* ty=(Tensor[(350), float32], Tensor[(13, 8, 8), float64], Tensor[(384), float64], Tensor[(220), uint32]) */
}

def @func_12581() -> Tensor[(384), float64] {
  %128 = fn () -> Tensor[(384), float64] {
    %127 = @func_11760() /* ty=(Tensor[(384), float64], Tensor[(384), float64]) */;
    %127.0
  };
  %128() /* ty=Tensor[(384), float64] */
}

def @func_4591() -> (Tensor[(350), uint32], Tensor[(350), uint32]) {
  %129 = @func_3448() /* ty=Tensor[(350), uint32] */;
  %130 = @func_3206() /* ty=Tensor[(350), uint32] */;
  (%129, %130)
}

def @func_12828() -> (Tensor[(350), uint32], Tensor[(350), uint8], Tensor[(350), uint32], Tensor[(1, 4, 3), float32], Tensor[(330), uint64], Tensor[(350), uint8]) {
  @func_12826() /* ty=(Tensor[(350), uint32], Tensor[(350), uint8], Tensor[(350), uint32], Tensor[(1, 4, 3), float32], Tensor[(330), uint64], Tensor[(350), uint8]) */
}

def @func_7618() -> Tensor[(350), uint8] {
  @func_7616() /* ty=Tensor[(350), uint8] */
}

def @func_8929() -> (Tensor[(350), uint8], Tensor[(350), float32]) {
  %131 = @func_6379() /* ty=(Tensor[(350), float32], Tensor[(16, 16, 15), int16]) */;
  %132 = @func_7616() /* ty=Tensor[(350), uint8] */;
  %133 = %131.0;
  (%132, %133)
}

def @func_7109() -> Tensor[(350), uint32] {
  @func_4403() /* ty=Tensor[(350), uint32] */
}

def @func_8126() -> (Tensor[(16, 16, 15), int16],) {
  %135 = fn () -> (Tensor[(16, 16, 15), int16],) {
    %134 = @func_6108() /* ty=Tensor[(16, 16, 15), int16] */;
    (%134,)
  };
  %135() /* ty=(Tensor[(16, 16, 15), int16],) */
}

def @func_7241() -> (Tensor[(350), uint32], Tensor[(330), uint64], Tensor[(5, 66), uint8]) {
  %136 = @func_4038() /* ty=(Tensor[(350), uint32], Tensor[(350), uint32]) */;
  %137 = cast(meta[relay.Constant][6] /* ty=Tensor[(5, 66), uint64] */, dtype="uint64") /* ty=Tensor[(5, 66), uint64] */;
  %138 = reshape(%137, newshape=[330]) /* ty=Tensor[(330), uint64] */;
  %139 = @func_950(%138) /* ty=(Tensor[(1, 4, 3), float32], Tensor[(10, 11, 3), bool], Tensor[(330), uint64]) */;
  %140 = cast(meta[relay.Constant][7] /* ty=Tensor[(5, 66), uint64] */, dtype="uint8") /* ty=Tensor[(5, 66), uint8] */;
  %141 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(5, 66), uint64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %142 = cast(meta[relay.Constant][6] /* ty=Tensor[(5, 66), uint64] */, dtype="uint8") /* ty=Tensor[(5, 66), uint8] */;
  %143 = dyn.reshape(%140, %141, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %144 = %136.0;
  %145 = %139.2;
  %146 = subtract(%142, %143) /* ty=Tensor[(5, 66), uint8] */;
  (%144, %145, %146)
}

def @func_8952(%var_8946: Tensor[(12, 3, 4), int32]) -> (Tensor[(12, 3, 4), int32],) {
  %147 = cast(meta[relay.Constant][8] /* ty=Tensor[(12, 3, 1), int32] */, dtype="int32") /* ty=Tensor[(12, 3, 1), int32] */;
  %148 = cast(%var_8946, dtype="int32") /* ty=Tensor[(12, 3, 4), int32] */;
  %149 = minimum(%147, %148) /* ty=Tensor[(12, 3, 4), int32] */;
  (%149,)
}

def @func_7002() -> (Tensor[(220), float64],) {
  %152 = fn () -> (Tensor[(220), float64],) {
    %150 = @func_6826() /* ty=(Tensor[(220), float64],) */;
    %151 = %150.0;
    (%151,)
  };
  %152() /* ty=(Tensor[(220), float64],) */
}

def @func_3092() -> (Tensor[(350), uint32],) {
  @func_3090() /* ty=(Tensor[(350), uint32],) */
}

def @func_6285(%var_6284: Tensor[(3, 14, 5), float32]) -> (Tensor[(3, 14, 5), float32], Tensor[(13, 8, 8), float64], Tensor[(3840), int16]) {
  %159 = fn (%var_6274: Tensor[(3, 14, 5), float32]) -> (Tensor[(3, 14, 5), float32], Tensor[(13, 8, 8), float64], Tensor[(3840), int16]) {
    %153 = cast(%var_6274, dtype="float32") /* ty=Tensor[(3, 14, 5), float32] */;
    %154 = cast(meta[relay.Constant][9] /* ty=Tensor[(3840), int16] */, dtype="int16") /* ty=Tensor[(3840), int16] */;
    %155 = reshape(%154, newshape=[3840]) /* ty=Tensor[(3840), int16] */;
    %156 = @func_5721(%155) /* ty=(Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(220), float64], Tensor[(16, 16, 15), float64], Tensor[(3840), int16], Tensor[(350), uint32], Tensor[(330), uint64], Tensor[(350), uint32], Tensor[(13, 8, 8), float64], Tensor[(832), float64]) */;
    %157 = cosh(%153) /* ty=Tensor[(3, 14, 5), float32] */;
    %158 = %156.8;
    (%157, %158, meta[relay.Constant][9] /* ty=Tensor[(3840), int16] */)
  };
  %159(%var_6284) /* ty=(Tensor[(3, 14, 5), float32], Tensor[(13, 8, 8), float64], Tensor[(3840), int16]) */
}

def @func_9945(%var_9944: Tensor[(350), uint32]) -> (Tensor[(350), uint32], Tensor[(220), float32]) {
  %168 = fn (%var_9923: Tensor[(350), uint32]) -> (Tensor[(350), uint32], Tensor[(220), float32]) {
    %160 = @func_6604() /* ty=(Tensor[(350), float32], Tensor[(350), uint32]) */;
    %161 = %160.1;
    %162 = cast(%var_9923, dtype="uint32") /* ty=Tensor[(350), uint32] */;
    %163 = shape_of(%161, dtype="int32") /* ty=Tensor[(1), int32] */;
    %164 = cast(%161, dtype="uint32") /* ty=Tensor[(350), uint32] */;
    %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?), uint32] */;
    %166 = bitwise_or(%164, %165) /* ty=Tensor[(350), uint32] */;
    %167 = @func_6357() /* ty=Tensor[(220), float32] */;
    (%166, %167)
  };
  %168(%var_9944) /* ty=(Tensor[(350), uint32], Tensor[(220), float32]) */
}

def @func_11994() -> (Tensor[(384), float64],) {
  %169 = @func_5337() /* ty=(Tensor[(350), uint8], Tensor[(384), float64]) */;
  %170 = %169.1;
  (%170,)
}

def @func_13953() -> Tensor[(350), uint32] {
  %171 = @func_12860() /* ty=(Tensor[(350), uint32],) */;
  %171.0
}

def @func_12852() -> Tensor[(220), float64] {
  %172 = @func_6726() /* ty=(Tensor[(220), float64], Tensor[(15, 16, 9), float64]) */;
  %172.0
}

def @func_5137() -> (Tensor[(350), uint8],) {
  @func_5135() /* ty=(Tensor[(350), uint8],) */
}

def @func_14044() -> Tensor[(384), float64] {
  %173 = fn () -> Tensor[(384), float64] {
    @func_5859() /* ty=Tensor[(384), float64] */
  };
  %173() /* ty=Tensor[(384), float64] */
}

def @func_4935() -> Tensor[(220), float32] {
  %183 = fn () -> Tensor[(220), float32] {
    %174 = @func_4612() /* ty=Tensor[(220), uint32] */;
    %175 = cast(meta[relay.Constant][10] /* ty=Tensor[(220), uint32] */, dtype="bool") /* ty=Tensor[(220), bool] */;
    %176 = shape_of(%174, dtype="int32") /* ty=Tensor[(1), int32] */;
    %177 = cast(%174, dtype="bool") /* ty=Tensor[(220), bool] */;
    %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?), bool] */;
    %179 = greater(%177, %178) /* ty=Tensor[(220), bool] */;
    %180 = cast(%179, dtype="float32") /* ty=Tensor[(220), float32] */;
    %181 = log(%180) /* ty=Tensor[(220), float32] */;
    %182 = cast(%181, dtype="float32") /* ty=Tensor[(220), float32] */;
    cosh(%182) /* ty=Tensor[(220), float32] */
  };
  %183() /* ty=Tensor[(220), float32] */
}

def @func_11411() -> (Tensor[(350), uint32],) {
  %185 = fn () -> (Tensor[(350), uint32],) {
    %184 = @func_2915() /* ty=Tensor[(350), uint32] */;
    (%184,)
  };
  %185() /* ty=(Tensor[(350), uint32],) */
}

def @func_8627(%var_8619: Tensor[(180), bool]) -> (Tensor[(220), uint32], Tensor[(350), float64], Tensor[(6, 30), float32], Tensor[(180), bool]) {
  %186 = @func_5774() /* ty=(Tensor[(220), uint32],) */;
  %187 = @func_3668() /* ty=Tensor[(350), uint32] */;
  %188 = cast(%187, dtype="float64") /* ty=Tensor[(350), float64] */;
  %189 = cast(%var_8619, dtype="bool") /* ty=Tensor[(180), bool] */;
  %190 = reshape(%189, newshape=[9, 5, 4]) /* ty=Tensor[(9, 5, 4), bool] */;
  %191 = @func_5373(%190) /* ty=(Tensor[(220), uint32], Tensor[(6, 30), float32], Tensor[(9, 5, 4), uint32]) */;
  %192 = %186.0;
  %193 = log10(%188) /* ty=Tensor[(350), float64] */;
  %194 = %191.1;
  (%192, %193, %194, %var_8619)
}

def @func_6728() -> (Tensor[(220), float64], Tensor[(15, 16, 9), float64]) {
  @func_6726() /* ty=(Tensor[(220), float64], Tensor[(15, 16, 9), float64]) */
}

def @func_7666() -> (Tensor[(220), float32],) {
  @func_7664() /* ty=(Tensor[(220), float32],) */
}

def @func_9996() -> (Tensor[(220), float64], Tensor[(350), uint32]) {
  %195 = @func_6781() /* ty=(Tensor[(220), float64],) */;
  %196 = %195.0;
  %197 = @func_8637() /* ty=Tensor[(350), uint32] */;
  (%196, %197)
}

def @func_12453() -> (Tensor[(220), float32],) {
  %199 = fn () -> (Tensor[(220), float32],) {
    %198 = @func_4934() /* ty=Tensor[(220), float32] */;
    (%198,)
  };
  %199() /* ty=(Tensor[(220), float32],) */
}

def @func_6144(%var_6137: Tensor[(350), float64]) -> (Tensor[(350), float32],) {
  %200 = @func_5760() /* ty=(Tensor[(350), float64], Tensor[(220), float64]) */;
  %201 = %200.0;
  %202 = cast(%var_6137, dtype="float32") /* ty=Tensor[(350), float32] */;
  %203 = shape_of(%201, dtype="int32") /* ty=Tensor[(1), int32] */;
  %204 = cast(%201, dtype="float32") /* ty=Tensor[(350), float32] */;
  %205 = dyn.reshape(%202, %203, newshape=[]) /* ty=Tensor[(?), float32] */;
  %206 = power(%204, %205) /* ty=Tensor[(350), float32] */;
  (%206,)
}

def @func_7206() -> (Tensor[(55, 6), uint64],) {
  @func_7204() /* ty=(Tensor[(55, 6), uint64],) */
}

def @func_9730(%var_9695: Tensor[(4, 5, 5), int16], %var_9724: Tensor[(220), uint32]) -> (Tensor[(4, 5, 5), int16], Tensor[(350), uint32], Tensor[(350), int64], Tensor[(220), uint32], Tensor[(384), float64]) {
  %207 = cast(%var_9695, dtype="int16") /* ty=Tensor[(4, 5, 5), int16] */;
  %208 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(4, 5, 5), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %209 = cast(meta[relay.Constant][11] /* ty=Tensor[(4, 5, 5), int16] */, dtype="int16") /* ty=Tensor[(4, 5, 5), int16] */;
  %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %211 = @func_3090() /* ty=(Tensor[(350), uint32],) */;
  %212 = cast(%var_9724, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %213 = reshape(%212, newshape=[1, 220]) /* ty=Tensor[(1, 220), uint32] */;
  %214 = @func_3317(%213) /* ty=(Tensor[(10, 11, 3), bool], Tensor[(10, 11, 2), bool], Tensor[(1, 220), uint32], Tensor[(16, 16, 15), int16], Tensor[(350), int64]) */;
  %215 = @func_3409() /* ty=(Tensor[(384), float64],) */;
  %216 = bitwise_xor(%209, %210) /* ty=Tensor[(4, 5, 5), int16] */;
  %217 = %211.0;
  %218 = %214.4;
  %219 = %215.0;
  (%216, %217, %218, %var_9724, %219)
}

def @func_8979() -> Tensor[(220), float64] {
  @func_6444() /* ty=Tensor[(220), float64] */
}

def @func_12729() -> (Tensor[(350), uint32], Tensor[(330), uint64], Tensor[(1, 3840), int16], Tensor[(55, 6), uint16], Tensor[(220), bool], Tensor[(220), float64]) {
  %220 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 3840), int16] */, dtype="int16") /* ty=Tensor[(1, 3840), int16] */;
  %221 = reshape(%220, newshape=[3840]) /* ty=Tensor[(3840), int16] */;
  %222 = @func_5721(%221) /* ty=(Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(220), float64], Tensor[(16, 16, 15), float64], Tensor[(3840), int16], Tensor[(350), uint32], Tensor[(330), uint64], Tensor[(350), uint32], Tensor[(13, 8, 8), float64], Tensor[(832), float64]) */;
  %223 = %222.6;
  %224 = cast(%223, dtype="uint64") /* ty=Tensor[(330), uint64] */;
  %225 = reshape(%224, newshape=[55, 6]) /* ty=Tensor[(55, 6), uint64] */;
  %226 = @func_12678(%225) /* ty=(Tensor[(55, 6), uint16],) */;
  %227 = cast(meta[relay.Constant][13] /* ty=Tensor[(220), float64] */, dtype="float64") /* ty=Tensor[(220), float64] */;
  %228 = reshape(%227, newshape=[220]) /* ty=Tensor[(220), float64] */;
  %229 = @func_7302(%228) /* ty=(Tensor[(220), bool],) */;
  %230 = @func_7930() /* ty=Tensor[(350), uint32] */;
  %231 = %226.0;
  %232 = %229.0;
  (%230, %223, meta[relay.Constant][12] /* ty=Tensor[(1, 3840), int16] */, %231, %232, meta[relay.Constant][13] /* ty=Tensor[(220), float64] */)
}

def @func_5100() -> (Tensor[(16, 16, 15), int16], Tensor[(16, 16, 15), int16], Tensor[(350), uint32]) {
  %238 = fn () -> (Tensor[(16, 16, 15), int16], Tensor[(16, 16, 15), int16], Tensor[(350), uint32]) {
    %233 = @func_5028() /* ty=(Tensor[(16, 16, 15), int16],) */;
    %234 = @func_4038() /* ty=(Tensor[(350), uint32], Tensor[(350), uint32]) */;
    %235 = %233.0;
    %236 = @func_3978() /* ty=Tensor[(16, 16, 15), int16] */;
    %237 = %234.0;
    (%235, %236, %237)
  };
  %238() /* ty=(Tensor[(16, 16, 15), int16], Tensor[(16, 16, 15), int16], Tensor[(350), uint32]) */
}

def @func_6672() -> (Tensor[(350), uint32], Tensor[(350), uint8]) {
  %239 = @func_3467() /* ty=(Tensor[(350), uint32],) */;
  %240 = %239.0;
  %241 = @func_4070() /* ty=Tensor[(350), uint8] */;
  (%240, %241)
}

def @func_14289(%var_14287: uint16, %var_14288: Tensor[(210), float32]) -> (Tensor[(350), float32], Tensor[(350), uint8], Tensor[(384), float64], Tensor[(5, 12, 3), uint16], uint16, Tensor[(210), float32], Tensor[(220), uint32]) {
  %255 = fn (%var_14279: uint16, %var_14280: Tensor[(210), float32]) -> (Tensor[(350), float32], Tensor[(350), uint8], Tensor[(384), float64], Tensor[(5, 12, 3), uint16], uint16, Tensor[(210), float32], Tensor[(220), uint32]) {
    %242 = @func_12255() /* ty=(Tensor[(350), float32], Tensor[(220), float64], Tensor[(350), bool]) */;
    %243 = @func_9127() /* ty=(Tensor[(384), float64],) */;
    %244 = cast(%var_14279, dtype="uint16") /* ty=uint16 */;
    %245 = cast(%var_14280, dtype="float32") /* ty=Tensor[(210), float32] */;
    %246 = reshape(%244, newshape=[]) /* ty=uint16 */;
    %247 = reshape(%245, newshape=[210]) /* ty=Tensor[(210), float32] */;
    %248 = @func_13619(%246, %247) /* ty=(Tensor[(5, 12, 3), uint16], Tensor[(3840), int16], Tensor[(210), float32], Tensor[(220), float64], Tensor[(220), float64]) */;
    %249 = @func_7568() /* ty=(Tensor[(220), uint32],) */;
    %250 = %242.0;
    %251 = @func_4778() /* ty=Tensor[(350), uint8] */;
    %252 = %243.0;
    %253 = %248.0;
    %254 = %249.0;
    (%250, %251, %252, %253, %var_14279, %var_14280, %254)
  };
  %255(%var_14287, %var_14288) /* ty=(Tensor[(350), float32], Tensor[(350), uint8], Tensor[(384), float64], Tensor[(5, 12, 3), uint16], uint16, Tensor[(210), float32], Tensor[(220), uint32]) */
}

def @func_9689() -> (Tensor[(220), float64],) {
  %256 = @func_9300() /* ty=(Tensor[(220), float64], Tensor[(350), float32], Tensor[(220), float64]) */;
  %257 = %256.0;
  (%257,)
}

def @func_10096() -> (Tensor[(350), uint8],) {
  @func_10094() /* ty=(Tensor[(350), uint8],) */
}

def @func_5037() -> (Tensor[(220), float64],) {
  %258 = @func_4491() /* ty=Tensor[(220), float64] */;
  (%258,)
}

def @func_4751(%var_4748: Tensor[(3840), int16]) -> (Tensor[(350), uint32], Tensor[(16, 16, 15), uint8], Tensor[(3840), int16]) {
  %259 = cast(%var_4748, dtype="int16") /* ty=Tensor[(3840), int16] */;
  %260 = cast(%var_4748, dtype="int16") /* ty=Tensor[(3840), int16] */;
  %261 = reshape(%259, newshape=[16, 16, 15]) /* ty=Tensor[(16, 16, 15), int16] */;
  %262 = reshape(%260, newshape=[16, 16, 15]) /* ty=Tensor[(16, 16, 15), int16] */;
  %263 = @func_2872(%261, %262) /* ty=(Tensor[(16, 16, 15), float64], Tensor[(16, 16, 15), uint8]) */;
  %264 = @func_3206() /* ty=Tensor[(350), uint32] */;
  %265 = %263.1;
  (%264, %265, %var_4748)
}

def @func_2761() -> (Tensor[(16, 16, 15), int16],) {
  %269 = fn () -> (Tensor[(16, 16, 15), int16],) {
    %266 = cast(meta[relay.Constant][14] /* ty=int16 */, dtype="int16") /* ty=int16 */;
    %267 = cast(meta[relay.Constant][15] /* ty=Tensor[(16, 16, 15), int16] */, dtype="int16") /* ty=Tensor[(16, 16, 15), int16] */;
    %268 = logical_xor(%266, %267) /* ty=Tensor[(16, 16, 15), int16] */;
    (%268,)
  };
  %269() /* ty=(Tensor[(16, 16, 15), int16],) */
}

def @func_9884(%var_9882: Tensor[(350), float64], %var_9883: Tensor[(8, 1080), float64]) -> (Tensor[(220), float64], Tensor[(220), float64], Tensor[(350), float32], Tensor[(350), float64], Tensor[(8, 1080), uint64]) {
  %293 = fn (%var_9840: Tensor[(350), float64], %var_9857: Tensor[(8, 1080), float64]) -> (Tensor[(220), float64], Tensor[(220), float64], Tensor[(350), float32], Tensor[(350), float64], Tensor[(8, 1080), uint64]) {
    %270 = @func_3441() /* ty=(Tensor[(220), float64],) */;
    %271 = @func_9689() /* ty=(Tensor[(220), float64],) */;
    %272 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 1080), float64] */, dtype="float64") /* ty=Tensor[(1, 1080), float64] */;
    %273 = cast(%var_9840, dtype="float64") /* ty=Tensor[(350), float64] */;
    %274 = reshape(%272, newshape=[15, 9, 8]) /* ty=Tensor[(15, 9, 8), float64] */;
    %275 = reshape(%273, newshape=[350]) /* ty=Tensor[(350), float64] */;
    %276 = @func_7874(%274, %275) /* ty=(Tensor[(15, 9, 8), float64], Tensor[(16, 16, 15), int16], Tensor[(350), float32], Tensor[(350), float64]) */;
    %277 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 1080), float64] */, dtype="float64") /* ty=Tensor[(1, 1080), float64] */;
    %278 = sin(%277) /* ty=Tensor[(1, 1080), float64] */;
    %279 = cast(%278, dtype="int32") /* ty=Tensor[(1, 1080), int32] */;
    %280 = cast(%var_9857, dtype="int32") /* ty=Tensor[(8, 1080), int32] */;
    %281 = bitwise_xor(%279, %280) /* ty=Tensor[(8, 1080), int32] */;
    %282 = cast(%281, dtype="bool") /* ty=Tensor[(8, 1080), bool] */;
    %283 = cast(%278, dtype="bool") /* ty=Tensor[(1, 1080), bool] */;
    %284 = logical_and(%282, %283) /* ty=Tensor[(8, 1080), bool] */;
    %285 = cast(%281, dtype="uint64") /* ty=Tensor[(8, 1080), uint64] */;
    %286 = shape_of(%284, dtype="int32") /* ty=Tensor[(2), int32] */;
    %287 = cast(%284, dtype="uint64") /* ty=Tensor[(8, 1080), uint64] */;
    %288 = dyn.reshape(%285, %286, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %289 = %270.0;
    %290 = %271.0;
    %291 = %276.2;
    %292 = logical_xor(%287, %288) /* ty=Tensor[(8, 1080), uint64] */;
    (%289, %290, %291, %var_9840, %292)
  };
  %293(%var_9882, %var_9883) /* ty=(Tensor[(220), float64], Tensor[(220), float64], Tensor[(350), float32], Tensor[(350), float64], Tensor[(8, 1080), uint64]) */
}

def @func_13490() -> (Tensor[(15, 16, 9), float64], Tensor[(350), uint32]) {
  %297 = fn () -> (Tensor[(15, 16, 9), float64], Tensor[(350), uint32]) {
    %294 = @func_6726() /* ty=(Tensor[(220), float64], Tensor[(15, 16, 9), float64]) */;
    %295 = %294.1;
    %296 = @func_9522() /* ty=Tensor[(350), uint32] */;
    (%295, %296)
  };
  %297() /* ty=(Tensor[(15, 16, 9), float64], Tensor[(350), uint32]) */
}

def @func_3894() -> Tensor[(350), uint32] {
  @func_3229() /* ty=Tensor[(350), uint32] */
}

def @func_5376(%var_5374: Tensor[(9, 5, 4), bool]) -> (Tensor[(220), uint32], Tensor[(6, 30), float32], Tensor[(9, 5, 4), uint32]) {
  @func_5373(%var_5374) /* ty=(Tensor[(220), uint32], Tensor[(6, 30), float32], Tensor[(9, 5, 4), uint32]) */
}

def @func_12954(%var_12953: Tensor[(220), float32]) -> (Tensor[(350), uint32], Tensor[(16, 16, 15), int16], Tensor[(220), float32]) {
  %303 = fn (%var_12945: Tensor[(220), float32]) -> (Tensor[(350), uint32], Tensor[(16, 16, 15), int16], Tensor[(220), float32]) {
    %298 = cast(%var_12945, dtype="float32") /* ty=Tensor[(220), float32] */;
    %299 = reshape(%298, newshape=[220]) /* ty=Tensor[(220), float32] */;
    %300 = @func_11746(%299) /* ty=(Tensor[(350), uint8], Tensor[(220), int32], Tensor[(16, 16, 15), int16], Tensor[(350), uint32]) */;
    %301 = @func_7109() /* ty=Tensor[(350), uint32] */;
    %302 = %300.2;
    (%301, %302, %var_12945)
  };
  %303(%var_12953) /* ty=(Tensor[(350), uint32], Tensor[(16, 16, 15), int16], Tensor[(220), float32]) */
}

def @func_8696() -> (Tensor[(350), uint32], Tensor[(350), uint8]) {
  %308 = fn () -> (Tensor[(350), uint32], Tensor[(350), uint8]) {
    %304 = @func_4038() /* ty=(Tensor[(350), uint32], Tensor[(350), uint32]) */;
    %305 = @func_5135() /* ty=(Tensor[(350), uint8],) */;
    %306 = %304.0;
    %307 = %305.0;
    (%306, %307)
  };
  %308() /* ty=(Tensor[(350), uint32], Tensor[(350), uint8]) */
}

def @func_3951() -> Tensor[(350), uint32] {
  %309 = @func_3467() /* ty=(Tensor[(350), uint32],) */;
  %309.0
}

def @func_9191(%var_9184: Tensor[(330), uint64]) -> (Tensor[(220), float64], Tensor[(350), float32], Tensor[(330), uint64]) {
  %310 = @func_6073() /* ty=(Tensor[(384), float64], Tensor[(220), float64]) */;
  %311 = %310.1;
  %312 = cast(%311, dtype="float64") /* ty=Tensor[(220), float64] */;
  %313 = cast(%var_9184, dtype="uint64") /* ty=Tensor[(330), uint64] */;
  %314 = reshape(%313, newshape=[330]) /* ty=Tensor[(330), uint64] */;
  %315 = @func_5455(%314) /* ty=(Tensor[(350), uint32], Tensor[(350), float32], Tensor[(330), uint64], Tensor[(330), uint64]) */;
  %316 = sqrt(%312) /* ty=Tensor[(220), float64] */;
  %317 = %315.1;
  (%316, %317, %var_9184)
}

def @func_7569() -> (Tensor[(220), uint32],) {
  %320 = fn () -> (Tensor[(220), uint32],) {
    %318 = @func_5774() /* ty=(Tensor[(220), uint32],) */;
    %319 = %318.0;
    (%319,)
  };
  %320() /* ty=(Tensor[(220), uint32],) */
}

def @func_11996() -> (Tensor[(384), float64],) {
  @func_11994() /* ty=(Tensor[(384), float64],) */
}

def @func_4612() -> Tensor[(220), uint32] {
  %321 = @func_3389() /* ty=(Tensor[(350), float32], Tensor[(13, 8, 8), float64], Tensor[(384), float64], Tensor[(220), uint32]) */;
  %321.3
}

def @func_7877(%var_7875: Tensor[(15, 9, 8), float64], %var_7876: Tensor[(350), float64]) -> (Tensor[(15, 9, 8), float64], Tensor[(16, 16, 15), int16], Tensor[(350), float32], Tensor[(350), float64]) {
  %333 = fn (%var_7843: Tensor[(15, 9, 8), float64], %var_7854: Tensor[(350), float64]) -> (Tensor[(15, 9, 8), float64], Tensor[(16, 16, 15), int16], Tensor[(350), float32], Tensor[(350), float64]) {
    %322 = cast(%var_7843, dtype="float64") /* ty=Tensor[(15, 9, 8), float64] */;
    %323 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(15, 9, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %324 = cast(meta[relay.Constant][17] /* ty=Tensor[(15, 9, 8), float64] */, dtype="float64") /* ty=Tensor[(15, 9, 8), float64] */;
    %325 = dyn.reshape(%322, %323, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %326 = @func_7270() /* ty=(Tensor[(16, 16, 15), int16],) */;
    %327 = cast(%var_7854, dtype="float64") /* ty=Tensor[(350), float64] */;
    %328 = reshape(%327, newshape=[350]) /* ty=Tensor[(350), float64] */;
    %329 = @func_6144(%328) /* ty=(Tensor[(350), float32],) */;
    %330 = minimum(%324, %325) /* ty=Tensor[(15, 9, 8), float64] */;
    %331 = %326.0;
    %332 = %329.0;
    (%330, %331, %332, %var_7854)
  };
  %333(%var_7875, %var_7876) /* ty=(Tensor[(15, 9, 8), float64], Tensor[(16, 16, 15), int16], Tensor[(350), float32], Tensor[(350), float64]) */
}

def @func_6000(%var_5994: Tensor[(220), uint32], %var_5995: Tensor[(330), uint64]) -> (Tensor[(384), float64], Tensor[(350), float32], Tensor[(14, 5, 5), float32], Tensor[(220), uint32], Tensor[(330), uint64]) {
  %334 = @func_3409() /* ty=(Tensor[(384), float64],) */;
  %335 = @func_4144() /* ty=(Tensor[(350), float32], Tensor[(14, 5, 5), uint32]) */;
  %336 = %335.0;
  %337 = cast(%336, dtype="uint32") /* ty=Tensor[(350), uint32] */;
  %338 = cast(%var_5994, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %339 = cast(%var_5995, dtype="uint64") /* ty=Tensor[(330), uint64] */;
  %340 = reshape(%337, newshape=[14, 5, 5]) /* ty=Tensor[(14, 5, 5), uint32] */;
  %341 = reshape(%338, newshape=[220, 1]) /* ty=Tensor[(220, 1), uint32] */;
  %342 = reshape(%339, newshape=[330]) /* ty=Tensor[(330), uint64] */;
  %343 = @func_4233(%340, %341, %342) /* ty=(Tensor[(350), uint32], Tensor[(14, 5, 5), bool], Tensor[(350), uint32], Tensor[(220, 1), uint32], Tensor[(330), uint64], Tensor[(14, 5, 5), float32]) */;
  %344 = %334.0;
  %345 = %343.5;
  (%344, %336, %345, %var_5994, %var_5995)
}

def @func_14664() -> (Tensor[(220), float64], Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(350), uint8], Tensor[(9, 5, 4), bool], Tensor[(180), float32]) {
  @func_14662() /* ty=(Tensor[(220), float64], Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(350), uint8], Tensor[(9, 5, 4), bool], Tensor[(180), float32]) */
}

def @func_2875(%var_2873: Tensor[(16, 16, 15), int16], %var_2874: Tensor[(16, 16, 15), int16]) -> (Tensor[(16, 16, 15), float64], Tensor[(16, 16, 15), uint8]) {
  %358 = fn (%var_2860: Tensor[(16, 16, 15), int16], %var_2865: Tensor[(16, 16, 15), int16]) -> (Tensor[(16, 16, 15), float64], Tensor[(16, 16, 15), uint8]) {
    %346 = @func_2760() /* ty=(Tensor[(16, 16, 15), int16],) */;
    %347 = %346.0;
    %348 = cast(%var_2860, dtype="float64") /* ty=Tensor[(16, 16, 15), float64] */;
    %349 = shape_of(%347, dtype="int32") /* ty=Tensor[(3), int32] */;
    %350 = cast(%347, dtype="float64") /* ty=Tensor[(16, 16, 15), float64] */;
    %351 = dyn.reshape(%348, %349, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %352 = cast(%var_2865, dtype="uint8") /* ty=Tensor[(16, 16, 15), uint8] */;
    %353 = shape_of(%var_2860, dtype="int32") /* ty=Tensor[(3), int32] */;
    %354 = cast(%var_2860, dtype="uint8") /* ty=Tensor[(16, 16, 15), uint8] */;
    %355 = dyn.reshape(%352, %353, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %356 = floor_divide(%350, %351) /* ty=Tensor[(16, 16, 15), float64] */;
    %357 = minimum(%354, %355) /* ty=Tensor[(16, 16, 15), uint8] */;
    (%356, %357)
  };
  %358(%var_2873, %var_2874) /* ty=(Tensor[(16, 16, 15), float64], Tensor[(16, 16, 15), uint8]) */
}

def @func_7897(%var_7879: Tensor[(3, 8, 14), int64], %var_7880: Tensor[(3, 8, 14), int64]) -> (Tensor[(3, 8, 14), float64], Tensor[(3, 8, 14), float64]) {
  %359 = cast(%var_7880, dtype="int64") /* ty=Tensor[(3, 8, 14), int64] */;
  %360 = shape_of(%var_7879, dtype="int32") /* ty=Tensor[(3), int32] */;
  %361 = cast(%var_7879, dtype="int64") /* ty=Tensor[(3, 8, 14), int64] */;
  %362 = dyn.reshape(%359, %360, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %363 = logical_xor(%361, %362) /* ty=Tensor[(3, 8, 14), int64] */;
  %364 = cast(%363, dtype="float64") /* ty=Tensor[(3, 8, 14), float64] */;
  %365 = cast(%var_7879, dtype="float64") /* ty=Tensor[(3, 8, 14), float64] */;
  %366 = log10(%364) /* ty=Tensor[(3, 8, 14), float64] */;
  %367 = erf(%365) /* ty=Tensor[(3, 8, 14), float64] */;
  (%366, %367)
}

def @func_10684() -> (Tensor[(16, 16, 15), int16],) {
  @func_10682() /* ty=(Tensor[(16, 16, 15), int16],) */
}

def @func_7368() -> (Tensor[(350), float32],) {
  %368 = @func_6809() /* ty=Tensor[(350), float32] */;
  (%368,)
}

def @func_14533() -> Tensor[(350), float64] {
  %369 = fn () -> Tensor[(350), float64] {
    @func_4990() /* ty=Tensor[(350), float64] */
  };
  %369() /* ty=Tensor[(350), float64] */
}

def @func_2436(%var_2434: Tensor[(13, 8, 8), float64]) -> Tensor[(13, 8, 8), float64] {
  @func_2433(%var_2434) /* ty=Tensor[(13, 8, 8), float64] */
}

def @func_7204() -> (Tensor[(55, 6), uint64],) {
  %370 = @func_6415() /* ty=(Tensor[(350), uint32], Tensor[(330), uint64], Tensor[(220), uint32], Tensor[(55, 6), uint64]) */;
  %371 = %370.3;
  (%371,)
}

def @func_6879(%var_6877: uint16, %var_6878: Tensor[(9, 1, 3), uint16]) -> Tensor[(9, 1, 3), uint16] {
  @func_6875(%var_6877, %var_6878) /* ty=Tensor[(9, 1, 3), uint16] */
}

def @func_14398() -> Tensor[(350), uint32] {
  @func_3951() /* ty=Tensor[(350), uint32] */
}

def @func_10043() -> (Tensor[(350), float32], Tensor[(55, 6), uint64], Tensor[(350), float64], Tensor[(220), float64]) {
  %372 = @func_7368() /* ty=(Tensor[(350), float32],) */;
  %373 = @func_7204() /* ty=(Tensor[(55, 6), uint64],) */;
  %374 = @func_9082() /* ty=(Tensor[(220), float64], Tensor[(16, 16, 15), float32], Tensor[(220), float64], Tensor[(15, 9, 8), float64], Tensor[(1080), float64], Tensor[(350), float64], Tensor[(220), float64], Tensor[(350), uint32], Tensor[(350), uint8]) */;
  %375 = @func_7503() /* ty=(Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(220), uint32], Tensor[(16, 16, 15), int16], Tensor[(220), float64]) */;
  %376 = %372.0;
  %377 = %373.0;
  %378 = %374.5;
  %379 = %375.4;
  (%376, %377, %378, %379)
}

def @func_3076(%var_3073: Tensor[(384), float64], %var_3074: Tensor[(220), uint32], %var_3075: Tensor[(350), uint32]) -> (Tensor[(10, 3, 12), bool], Tensor[(10, 11, 3), float32], Tensor[(384), float64], Tensor[(13, 8, 8), float64], Tensor[(832), float64], Tensor[(14, 5, 5), uint32], Tensor[(350), uint32], Tensor[(220), float64]) {
  %396 = fn (%var_2986: Tensor[(384), float64], %var_2987: Tensor[(220), uint32], %var_3042: Tensor[(350), uint32]) -> (Tensor[(10, 3, 12), bool], Tensor[(10, 11, 3), float32], Tensor[(384), float64], Tensor[(13, 8, 8), float64], Tensor[(832), float64], Tensor[(14, 5, 5), uint32], Tensor[(350), uint32], Tensor[(220), float64]) {
    %380 = @func_2840() /* ty=(Tensor[(16, 16, 15), int16], Tensor[(10, 11, 3), bool], Tensor[(330), uint64], Tensor[(16, 16, 15), int16], Tensor[(10, 3, 12), bool], Tensor[(10, 3), uint8], Tensor[(384), float64], Tensor[(350), uint32]) */;
    %381 = cast(%var_2986, dtype="float64") /* ty=Tensor[(384), float64] */;
    %382 = cast(%var_2987, dtype="uint32") /* ty=Tensor[(220), uint32] */;
    %383 = reshape(%381, newshape=[16, 4, 6]) /* ty=Tensor[(16, 4, 6), float64] */;
    %384 = reshape(%382, newshape=[220]) /* ty=Tensor[(220), uint32] */;
    %385 = @func_1219(%383, %384) /* ty=(Tensor[(16, 4, 6), bool], Tensor[(330), bool], Tensor[(10, 11, 2), bool], Tensor[(220), uint32], Tensor[(10, 11, 2), bool], Tensor[(10, 11, 3), float32], Tensor[(10, 11, 3), bool]) */;
    %386 = cast(meta[relay.Constant][18] /* ty=Tensor[(832), float64] */, dtype="float64") /* ty=Tensor[(832), float64] */;
    %387 = reshape(%386, newshape=[13, 8, 8]) /* ty=Tensor[(13, 8, 8), float64] */;
    %388 = cast(%var_3042, dtype="uint32") /* ty=Tensor[(350), uint32] */;
    %389 = reshape(%388, newshape=[14, 5, 5]) /* ty=Tensor[(14, 5, 5), uint32] */;
    %390 = cast(%var_2987, dtype="float64") /* ty=Tensor[(220), float64] */;
    %391 = %380.4;
    %392 = %385.5;
    %393 = @func_2433(%387) /* ty=Tensor[(13, 8, 8), float64] */;
    %394 = @func_1256(%389) /* ty=Tensor[(14, 5, 5), uint32] */;
    %395 = atanh(%390) /* ty=Tensor[(220), float64] */;
    (%391, %392, %var_2986, %393, meta[relay.Constant][18] /* ty=Tensor[(832), float64] */, %394, %var_3042, %395)
  };
  %396(%var_3073, %var_3074, %var_3075) /* ty=(Tensor[(10, 3, 12), bool], Tensor[(10, 11, 3), float32], Tensor[(384), float64], Tensor[(13, 8, 8), float64], Tensor[(832), float64], Tensor[(14, 5, 5), uint32], Tensor[(350), uint32], Tensor[(220), float64]) */
}

def @func_8673() -> (Tensor[(350), uint32],) {
  %399 = fn () -> (Tensor[(350), uint32],) {
    %397 = @func_3467() /* ty=(Tensor[(350), uint32],) */;
    %398 = %397.0;
    (%398,)
  };
  %399() /* ty=(Tensor[(350), uint32],) */
}

def @func_7176(%var_7174: Tensor[(220), float64]) -> (Tensor[(220), uint64], Tensor[(350), uint32], Tensor[(13, 8, 8), float64], Tensor[(832), float64]) {
  @func_7173(%var_7174) /* ty=(Tensor[(220), uint64], Tensor[(350), uint32], Tensor[(13, 8, 8), float64], Tensor[(832), float64]) */
}

def @func_10045() -> (Tensor[(350), float32], Tensor[(55, 6), uint64], Tensor[(350), float64], Tensor[(220), float64]) {
  @func_10043() /* ty=(Tensor[(350), float32], Tensor[(55, 6), uint64], Tensor[(350), float64], Tensor[(220), float64]) */
}

def @func_9998() -> (Tensor[(220), float64], Tensor[(350), uint32]) {
  @func_9996() /* ty=(Tensor[(220), float64], Tensor[(350), uint32]) */
}

def @func_5373(%var_5367: Tensor[(9, 5, 4), bool]) -> (Tensor[(220), uint32], Tensor[(6, 30), float32], Tensor[(9, 5, 4), uint32]) {
  %400 = cast(meta[relay.Constant][19] /* ty=Tensor[(6, 30), float32] */, dtype="float32") /* ty=Tensor[(6, 30), float32] */;
  %401 = cast(meta[relay.Constant][19] /* ty=Tensor[(6, 30), float32] */, dtype="float32") /* ty=Tensor[(6, 30), float32] */;
  %402 = reshape(%400, newshape=[9, 5, 4]) /* ty=Tensor[(9, 5, 4), float32] */;
  %403 = reshape(%401, newshape=[9, 5, 4]) /* ty=Tensor[(9, 5, 4), float32] */;
  %404 = @func_4005(%402, %403) /* ty=Tensor[(9, 5, 4), bool] */;
  %405 = cast(%var_5367, dtype="uint32") /* ty=Tensor[(9, 5, 4), uint32] */;
  %406 = shape_of(%404, dtype="int32") /* ty=Tensor[(3), int32] */;
  %407 = cast(%404, dtype="uint32") /* ty=Tensor[(9, 5, 4), uint32] */;
  %408 = dyn.reshape(%405, %406, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %409 = @func_4612() /* ty=Tensor[(220), uint32] */;
  %410 = bitwise_and(%407, %408) /* ty=Tensor[(9, 5, 4), uint32] */;
  (%409, meta[relay.Constant][19] /* ty=Tensor[(6, 30), float32] */, %410)
}

def @func_5585() -> Tensor[(16, 16, 15), float32] {
  @func_5583() /* ty=Tensor[(16, 16, 15), float32] */
}

def @func_6379() -> (Tensor[(350), float32], Tensor[(16, 16, 15), int16]) {
  %411 = @func_4144() /* ty=(Tensor[(350), float32], Tensor[(14, 5, 5), uint32]) */;
  %412 = @func_5965() /* ty=(Tensor[(16, 16, 15), int16],) */;
  %413 = %411.0;
  %414 = %412.0;
  (%413, %414)
}

def @func_9522() -> Tensor[(350), uint32] {
  @func_7109() /* ty=Tensor[(350), uint32] */
}

def @func_10324(%var_10280: Tensor[(220), float32]) -> (Tensor[(220), float32], Tensor[(350), uint32], Tensor[(350), uint32]) {
  %415 = @func_8862() /* ty=Tensor[(220), float32] */;
  %416 = cast(%var_10280, dtype="float32") /* ty=Tensor[(220), float32] */;
  %417 = shape_of(%415, dtype="int32") /* ty=Tensor[(1), int32] */;
  %418 = cast(%415, dtype="float32") /* ty=Tensor[(220), float32] */;
  %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?), float32] */;
  %420 = @func_7321() /* ty=(Tensor[(350), uint32],) */;
  %421 = floor_divide(%418, %419) /* ty=Tensor[(220), float32] */;
  %422 = %420.0;
  %423 = @func_7930() /* ty=Tensor[(350), uint32] */;
  (%421, %422, %423)
}

def @func_3320(%var_3318: Tensor[(1, 220), uint32]) -> (Tensor[(10, 11, 3), bool], Tensor[(10, 11, 2), bool], Tensor[(1, 220), uint32], Tensor[(16, 16, 15), int16], Tensor[(350), int64]) {
  @func_3317(%var_3318) /* ty=(Tensor[(10, 11, 3), bool], Tensor[(10, 11, 2), bool], Tensor[(1, 220), uint32], Tensor[(16, 16, 15), int16], Tensor[(350), int64]) */
}

def @func_4493() -> Tensor[(220), float64] {
  @func_4491() /* ty=Tensor[(220), float64] */
}

def @func_7054() -> Tensor[(220), float64] {
  %424 = fn () -> Tensor[(220), float64] {
    @func_5540() /* ty=Tensor[(220), float64] */
  };
  %424() /* ty=Tensor[(220), float64] */
}

def @func_9343(%var_9309: Tensor[(384), float64], %var_9310: Tensor[(350, 1), uint32]) -> (Tensor[(384), float64], Tensor[(350, 220), uint32], Tensor[(350, 832), float64]) {
  %425 = @func_5540() /* ty=Tensor[(220), float64] */;
  %426 = cast(%425, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %427 = cast(%var_9310, dtype="uint32") /* ty=Tensor[(350, 1), uint32] */;
  %428 = cast(%var_9309, dtype="float64") /* ty=Tensor[(384), float64] */;
  %429 = cast(%425, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %430 = cast(%var_9310, dtype="uint32") /* ty=Tensor[(350, 1), uint32] */;
  %431 = reshape(%428, newshape=[384]) /* ty=Tensor[(384), float64] */;
  %432 = reshape(%429, newshape=[220]) /* ty=Tensor[(220), uint32] */;
  %433 = reshape(%430, newshape=[350]) /* ty=Tensor[(350), uint32] */;
  %434 = @func_3072(%431, %432, %433) /* ty=(Tensor[(10, 3, 12), bool], Tensor[(10, 11, 3), float32], Tensor[(384), float64], Tensor[(13, 8, 8), float64], Tensor[(832), float64], Tensor[(14, 5, 5), uint32], Tensor[(350), uint32], Tensor[(220), float64]) */;
  %435 = %434.4;
  %436 = cast(%var_9310, dtype="float32") /* ty=Tensor[(350, 1), float32] */;
  %437 = cast(%435, dtype="float32") /* ty=Tensor[(832), float32] */;
  %438 = divide(%436, %437) /* ty=Tensor[(350, 832), float32] */;
  %439 = cast(%438, dtype="float64") /* ty=Tensor[(350, 832), float64] */;
  %440 = right_shift(%426, %427) /* ty=Tensor[(350, 220), uint32] */;
  %441 = acos(%439) /* ty=Tensor[(350, 832), float64] */;
  (%var_9309, %440, %441)
}

def @func_2322(%var_2254: Tensor[(10, 3, 1), uint8], %var_2255: Tensor[(10, 3, 1), uint8], %var_2267: Tensor[(384), float64], %var_2272: Tensor[(350), uint32]) -> (Tensor[(10, 3, ?), uint8], Tensor[(10, 11, 2), bool], Tensor[(384), float64], Tensor[(14, 5, 5), uint32], Tensor[(350), uint32], Tensor[(10, 3, 12), bool], Tensor[(10, 11, 3), bool], Tensor[(165, 2), uint64], Tensor[(220), uint32], Tensor[(10, 3, 220), float32], Tensor[(10, 11, 2), bool]) {
  %442 = cast(%var_2255, dtype="uint8") /* ty=Tensor[(10, 3, 1), uint8] */;
  %443 = shape_of(%var_2254, dtype="int32") /* ty=Tensor[(3), int32] */;
  %444 = cast(%var_2254, dtype="uint8") /* ty=Tensor[(10, 3, 1), uint8] */;
  %445 = dyn.reshape(%442, %443, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %446 = cast(%var_2267, dtype="float64") /* ty=Tensor[(384), float64] */;
  %447 = cast(meta[relay.Constant][20] /* ty=Tensor[(220), uint32] */, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %448 = reshape(%446, newshape=[16, 4, 6]) /* ty=Tensor[(16, 4, 6), float64] */;
  %449 = reshape(%447, newshape=[220]) /* ty=Tensor[(220), uint32] */;
  %450 = @func_1219(%448, %449) /* ty=(Tensor[(16, 4, 6), bool], Tensor[(330), bool], Tensor[(10, 11, 2), bool], Tensor[(220), uint32], Tensor[(10, 11, 2), bool], Tensor[(10, 11, 3), float32], Tensor[(10, 11, 3), bool]) */;
  %451 = cast(%var_2272, dtype="uint32") /* ty=Tensor[(350), uint32] */;
  %452 = reshape(%451, newshape=[14, 5, 5]) /* ty=Tensor[(14, 5, 5), uint32] */;
  %453 = cast(%var_2255, dtype="bool") /* ty=Tensor[(10, 3, 1), bool] */;
  %454 = cast(meta[relay.Constant][21] /* ty=Tensor[(10, 3, 12), uint8] */, dtype="bool") /* ty=Tensor[(10, 3, 12), bool] */;
  %455 = cast(meta[relay.Constant][22] /* ty=Tensor[(165, 2), uint64] */, dtype="uint64") /* ty=Tensor[(165, 2), uint64] */;
  %456 = cast(meta[relay.Constant][22] /* ty=Tensor[(165, 2), uint64] */, dtype="uint64") /* ty=Tensor[(165, 2), uint64] */;
  %457 = reshape(%455, newshape=[10, 11, 3]) /* ty=Tensor[(10, 11, 3), uint64] */;
  %458 = reshape(%456, newshape=[10, 11, 3]) /* ty=Tensor[(10, 11, 3), uint64] */;
  %459 = cast(%var_2267, dtype="float64") /* ty=Tensor[(384), float64] */;
  %460 = %450.4;
  %461 = cast(%460, dtype="uint32") /* ty=Tensor[(10, 11, 2), uint32] */;
  %462 = reshape(%459, newshape=[16, 4, 6]) /* ty=Tensor[(16, 4, 6), float64] */;
  %463 = reshape(%461, newshape=[220]) /* ty=Tensor[(220), uint32] */;
  %464 = @func_1219(%462, %463) /* ty=(Tensor[(16, 4, 6), bool], Tensor[(330), bool], Tensor[(10, 11, 2), bool], Tensor[(220), uint32], Tensor[(10, 11, 2), bool], Tensor[(10, 11, 3), float32], Tensor[(10, 11, 3), bool]) */;
  %465 = cast(meta[relay.Constant][20] /* ty=Tensor[(220), uint32] */, dtype="float32") /* ty=Tensor[(220), float32] */;
  %466 = cast(%var_2255, dtype="float32") /* ty=Tensor[(10, 3, 1), float32] */;
  %467 = %464.3;
  %468 = cast(%467, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %469 = cast(meta[relay.Constant][20] /* ty=Tensor[(220), uint32] */, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %470 = reshape(%468, newshape=[10, 11, 2]) /* ty=Tensor[(10, 11, 2), uint32] */;
  %471 = reshape(%469, newshape=[10, 11, 2]) /* ty=Tensor[(10, 11, 2), uint32] */;
  %472 = @func_534(%470, %471) /* ty=(Tensor[(10, 11, 2), bool],) */;
  %473 = add(%444, %445) /* ty=Tensor[(10, 3, ?), uint8] */;
  %474 = @func_1256(%452) /* ty=Tensor[(14, 5, 5), uint32] */;
  %475 = less_equal(%453, %454) /* ty=Tensor[(10, 3, 12), bool] */;
  %476 = @func_191(%457, %458) /* ty=Tensor[(10, 11, 3), bool] */;
  %477 = power(%465, %466) /* ty=Tensor[(10, 3, 220), float32] */;
  %478 = %472.0;
  (%473, %460, %var_2267, %474, %var_2272, %475, %476, meta[relay.Constant][22] /* ty=Tensor[(165, 2), uint64] */, %467, %477, %478)
}

def @func_7958() -> Tensor[(220), float64] {
  %480 = fn () -> Tensor[(220), float64] {
    %479 = @func_6073() /* ty=(Tensor[(384), float64], Tensor[(220), float64]) */;
    %479.1
  };
  %480() /* ty=Tensor[(220), float64] */
}

def @func_10420() -> (Tensor[(350), uint32], Tensor[(350), uint32]) {
  %485 = fn () -> (Tensor[(350), uint32], Tensor[(350), uint32]) {
    %481 = @func_4393() /* ty=(Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(1, 220), uint32], Tensor[(330), uint64], Tensor[(10, 11, 3), bool]) */;
    %482 = @func_7321() /* ty=(Tensor[(350), uint32],) */;
    %483 = %481.1;
    %484 = %482.0;
    (%483, %484)
  };
  %485() /* ty=(Tensor[(350), uint32], Tensor[(350), uint32]) */
}

def @func_8994() -> (Tensor[(350), uint8],) {
  %487 = fn () -> (Tensor[(350), uint8],) {
    %486 = @func_4778() /* ty=Tensor[(350), uint8] */;
    (%486,)
  };
  %487() /* ty=(Tensor[(350), uint8],) */
}

def @func_14431() -> Tensor[(350), uint32] {
  @func_14429() /* ty=Tensor[(350), uint32] */
}

def @func_9233() -> Tensor[(350), float32] {
  @func_9231() /* ty=Tensor[(350), float32] */
}

def @func_7322() -> (Tensor[(350), uint32],) {
  %490 = fn () -> (Tensor[(350), uint32],) {
    %488 = @func_7241() /* ty=(Tensor[(350), uint32], Tensor[(330), uint64], Tensor[(5, 66), uint8]) */;
    %489 = %488.0;
    (%489,)
  };
  %490() /* ty=(Tensor[(350), uint32],) */
}

def @func_10356() -> (Tensor[(350), uint32],) {
  @func_10354() /* ty=(Tensor[(350), uint32],) */
}

def @func_14719(%var_14718: float32) -> (Tensor[(16, 8, 13), bool],) {
  %494 = fn (%var_14682: float32) -> (Tensor[(16, 8, 13), bool],) {
    %491 = cast(%var_14682, dtype="bool") /* ty=bool */;
    %492 = cast(meta[relay.Constant][23] /* ty=Tensor[(16, 8, 13), float32] */, dtype="bool") /* ty=Tensor[(16, 8, 13), bool] */;
    %493 = not_equal(%491, %492) /* ty=Tensor[(16, 8, 13), bool] */;
    (%493,)
  };
  %494(%var_14718) /* ty=(Tensor[(16, 8, 13), bool],) */
}

def @func_6828() -> (Tensor[(220), float64],) {
  @func_6826() /* ty=(Tensor[(220), float64],) */
}

def @func_1546(%var_1476: Tensor[(1, 16, 5), float64], %var_1477: Tensor[(16, 16, 5), float64]) -> (Tensor[(16, 16, 5), float64], Tensor[(14, 5, 5), uint32], Tensor[(1, 350), uint32], Tensor[(14, 5, 5), uint32], Tensor[(10, 11, 2), bool], Tensor[(220), uint32], Tensor[(10, 11, 3), bool], Tensor[(330), uint64]) {
  %495 = cast(%var_1476, dtype="float64") /* ty=Tensor[(1, 16, 5), float64] */;
  %496 = cast(%var_1477, dtype="float64") /* ty=Tensor[(16, 16, 5), float64] */;
  %497 = cast(meta[relay.Constant][24] /* ty=Tensor[(1, 350), uint32] */, dtype="uint32") /* ty=Tensor[(1, 350), uint32] */;
  %498 = reshape(%497, newshape=[14, 5, 5]) /* ty=Tensor[(14, 5, 5), uint32] */;
  %499 = cast(meta[relay.Constant][24] /* ty=Tensor[(1, 350), uint32] */, dtype="uint32") /* ty=Tensor[(1, 350), uint32] */;
  %500 = reshape(%499, newshape=[14, 5, 5]) /* ty=Tensor[(14, 5, 5), uint32] */;
  %501 = cast(meta[relay.Constant][25] /* ty=Tensor[(220), uint32] */, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %502 = cast(meta[relay.Constant][25] /* ty=Tensor[(220), uint32] */, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %503 = reshape(%501, newshape=[10, 11, 2]) /* ty=Tensor[(10, 11, 2), uint32] */;
  %504 = reshape(%502, newshape=[10, 11, 2]) /* ty=Tensor[(10, 11, 2), uint32] */;
  %505 = @func_534(%503, %504) /* ty=(Tensor[(10, 11, 2), bool],) */;
  %506 = cast(meta[relay.Constant][26] /* ty=Tensor[(330), uint64] */, dtype="uint64") /* ty=Tensor[(330), uint64] */;
  %507 = reshape(%506, newshape=[330]) /* ty=Tensor[(330), uint64] */;
  %508 = @func_950(%507) /* ty=(Tensor[(1, 4, 3), float32], Tensor[(10, 11, 3), bool], Tensor[(330), uint64]) */;
  %509 = floor_divide(%495, %496) /* ty=Tensor[(16, 16, 5), float64] */;
  %510 = @func_1256(%498) /* ty=Tensor[(14, 5, 5), uint32] */;
  %511 = @func_1256(%500) /* ty=Tensor[(14, 5, 5), uint32] */;
  %512 = %505.0;
  %513 = %508.1;
  (%509, %510, meta[relay.Constant][24] /* ty=Tensor[(1, 350), uint32] */, %511, %512, meta[relay.Constant][25] /* ty=Tensor[(220), uint32] */, %513, meta[relay.Constant][26] /* ty=Tensor[(330), uint64] */)
}

def @func_7516() -> Tensor[(384), float64] {
  @func_7514() /* ty=Tensor[(384), float64] */
}

def @func_10625() -> Tensor[(350), uint32] {
  @func_10623() /* ty=Tensor[(350), uint32] */
}

def @func_13329() -> (Tensor[(350), uint32], Tensor[(330), uint64]) {
  @func_13327() /* ty=(Tensor[(350), uint32], Tensor[(330), uint64]) */
}

def @func_9691() -> (Tensor[(220), float64],) {
  @func_9689() /* ty=(Tensor[(220), float64],) */
}

def @func_12122() -> (Tensor[(350), uint32], Tensor[(220), float64]) {
  %518 = fn () -> (Tensor[(350), uint32], Tensor[(220), float64]) {
    %514 = @func_7503() /* ty=(Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(220), uint32], Tensor[(16, 16, 15), int16], Tensor[(220), float64]) */;
    %515 = @func_9689() /* ty=(Tensor[(220), float64],) */;
    %516 = %514.0;
    %517 = %515.0;
    (%516, %517)
  };
  %518() /* ty=(Tensor[(350), uint32], Tensor[(220), float64]) */
}

def @func_12678(%var_12654: Tensor[(55, 6), uint64]) -> (Tensor[(55, 6), uint16],) {
  %519 = @func_11060() /* ty=(Tensor[(55, 6), uint64], Tensor[(220), uint32], Tensor[(220), uint32]) */;
  %520 = %519.0;
  %521 = cast(%520, dtype="float64") /* ty=Tensor[(55, 6), float64] */;
  %522 = tan(%521) /* ty=Tensor[(55, 6), float64] */;
  %523 = cast(%var_12654, dtype="uint8") /* ty=Tensor[(55, 6), uint8] */;
  %524 = shape_of(%520, dtype="int32") /* ty=Tensor[(2), int32] */;
  %525 = cast(%520, dtype="uint8") /* ty=Tensor[(55, 6), uint8] */;
  %526 = dyn.reshape(%523, %524, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %527 = multiply(%525, %526) /* ty=Tensor[(55, 6), uint8] */;
  %528 = cast(%527, dtype="uint16") /* ty=Tensor[(55, 6), uint16] */;
  %529 = shape_of(%522, dtype="int32") /* ty=Tensor[(2), int32] */;
  %530 = cast(%522, dtype="uint16") /* ty=Tensor[(55, 6), uint16] */;
  %531 = dyn.reshape(%528, %529, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %532 = left_shift(%530, %531) /* ty=Tensor[(55, 6), uint16] */;
  (%532,)
}

def @func_8360() -> (Tensor[(350), uint32],) {
  %533 = @func_2915() /* ty=Tensor[(350), uint32] */;
  (%533,)
}

def @func_7931() -> Tensor[(350), uint32] {
  %535 = fn () -> Tensor[(350), uint32] {
    %534 = @func_4591() /* ty=(Tensor[(350), uint32], Tensor[(350), uint32]) */;
    %534.0
  };
  %535() /* ty=Tensor[(350), uint32] */
}

def @func_4593() -> (Tensor[(350), uint32], Tensor[(350), uint32]) {
  @func_4591() /* ty=(Tensor[(350), uint32], Tensor[(350), uint32]) */
}

def @func_9347(%var_9345: Tensor[(384), float64], %var_9346: Tensor[(350, 1), uint32]) -> (Tensor[(384), float64], Tensor[(350, 220), uint32], Tensor[(350, 832), float64]) {
  @func_9343(%var_9345, %var_9346) /* ty=(Tensor[(384), float64], Tensor[(350, 220), uint32], Tensor[(350, 832), float64]) */
}

def @func_4481(%var_4479: Tensor[(5, 66), uint64], %var_4480: Tensor[(5, 66), uint64]) -> (Tensor[(350), uint32], Tensor[(10, 11, 3), bool], Tensor[(5, 66), float32]) {
  @func_4477(%var_4479, %var_4480) /* ty=(Tensor[(350), uint32], Tensor[(10, 11, 3), bool], Tensor[(5, 66), float32]) */
}

def @func_5540() -> Tensor[(220), float64] {
  @func_4491() /* ty=Tensor[(220), float64] */
}

def @func_4009(%var_4007: Tensor[(9, 5, 4), float32], %var_4008: Tensor[(9, 5, 4), float32]) -> Tensor[(9, 5, 4), bool] {
  @func_4005(%var_4007, %var_4008) /* ty=Tensor[(9, 5, 4), bool] */
}

def @func_10182() -> Tensor[(350), uint32] {
  @func_10180() /* ty=Tensor[(350), uint32] */
}

def @func_10813() -> (Tensor[(220), float64], Tensor[(220), uint32]) {
  %536 = @func_9909() /* ty=(Tensor[(220), uint32],) */;
  %537 = @func_5540() /* ty=Tensor[(220), float64] */;
  %538 = %536.0;
  (%537, %538)
}

def @func_13818() -> (Tensor[(220), float64], Tensor[(350), float64], Tensor[(220), float32], Tensor[(384), float64], Tensor[(16, 16, 15), int16], Tensor[(384), float64]) {
  @func_13816() /* ty=(Tensor[(220), float64], Tensor[(350), float64], Tensor[(220), float32], Tensor[(384), float64], Tensor[(16, 16, 15), int16], Tensor[(384), float64]) */
}

def @func_9479() -> (Tensor[(384), float64], Tensor[(330), uint64], Tensor[(330), uint64], Tensor[(350), uint32], Tensor[(350), uint8], Tensor[(350), uint8]) {
  @func_9477() /* ty=(Tensor[(384), float64], Tensor[(330), uint64], Tensor[(330), uint64], Tensor[(350), uint32], Tensor[(350), uint8], Tensor[(350), uint8]) */
}

def @func_10259(%var_10258: Tensor[(432, 20), float64]) -> (Tensor[(384), float64], Tensor[(8, 1080), uint64], Tensor[(350), float64], Tensor[(432, 20), float64]) {
  %550 = fn (%var_10230: Tensor[(432, 20), float64]) -> (Tensor[(384), float64], Tensor[(8, 1080), uint64], Tensor[(350), float64], Tensor[(432, 20), float64]) {
    %539 = cast(meta[relay.Constant][27] /* ty=Tensor[(350), float64] */, dtype="float64") /* ty=Tensor[(350), float64] */;
    %540 = cast(%var_10230, dtype="float64") /* ty=Tensor[(432, 20), float64] */;
    %541 = reshape(%539, newshape=[350]) /* ty=Tensor[(350), float64] */;
    %542 = reshape(%540, newshape=[8, 1080]) /* ty=Tensor[(8, 1080), float64] */;
    %543 = @func_9881(%541, %542) /* ty=(Tensor[(220), float64], Tensor[(220), float64], Tensor[(350), float32], Tensor[(350), float64], Tensor[(8, 1080), uint64]) */;
    %544 = cast(%var_10230, dtype="float32") /* ty=Tensor[(432, 20), float32] */;
    %545 = log10(%544) /* ty=Tensor[(432, 20), float32] */;
    %546 = cast(%545, dtype="float64") /* ty=Tensor[(432, 20), float64] */;
    %547 = @func_7514() /* ty=Tensor[(384), float64] */;
    %548 = %543.4;
    %549 = acos(%546) /* ty=Tensor[(432, 20), float64] */;
    (%547, %548, meta[relay.Constant][27] /* ty=Tensor[(350), float64] */, %549)
  };
  %550(%var_10258) /* ty=(Tensor[(384), float64], Tensor[(8, 1080), uint64], Tensor[(350), float64], Tensor[(432, 20), float64]) */
}

def @func_6272(%var_6270: Tensor[(832), float64]) -> (Tensor[(350), uint32], Tensor[(13, 8, 8), float64], Tensor[(832), float64]) {
  @func_6269(%var_6270) /* ty=(Tensor[(350), uint32], Tensor[(13, 8, 8), float64], Tensor[(832), float64]) */
}

def @func_1258(%var_1257: Tensor[(14, 5, 5), uint32]) -> Tensor[(14, 5, 5), uint32] {
  %553 = fn (%var_1249: Tensor[(14, 5, 5), uint32]) -> Tensor[(14, 5, 5), uint32] {
    %551 = cast(meta[relay.Constant][28] /* ty=Tensor[(1, 1, 1), uint32] */, dtype="uint32") /* ty=Tensor[(1, 1, 1), uint32] */;
    %552 = cast(%var_1249, dtype="uint32") /* ty=Tensor[(14, 5, 5), uint32] */;
    left_shift(%551, %552) /* ty=Tensor[(14, 5, 5), uint32] */
  };
  %553(%var_1257) /* ty=Tensor[(14, 5, 5), uint32] */
}

def @func_5039() -> (Tensor[(220), float64],) {
  @func_5037() /* ty=(Tensor[(220), float64],) */
}

def @func_10175() -> Tensor[(384), float64] {
  @func_7514() /* ty=Tensor[(384), float64] */
}

def @func_2842() -> (Tensor[(16, 16, 15), int16], Tensor[(10, 11, 3), bool], Tensor[(330), uint64], Tensor[(16, 16, 15), int16], Tensor[(10, 3, 12), bool], Tensor[(10, 3), uint8], Tensor[(384), float64], Tensor[(350), uint32]) {
  @func_2840() /* ty=(Tensor[(16, 16, 15), int16], Tensor[(10, 11, 3), bool], Tensor[(330), uint64], Tensor[(16, 16, 15), int16], Tensor[(10, 3, 12), bool], Tensor[(10, 3), uint8], Tensor[(384), float64], Tensor[(350), uint32]) */
}

def @func_6513() -> (Tensor[(350), uint32],) {
  @func_6511() /* ty=(Tensor[(350), uint32],) */
}

def @func_8637() -> Tensor[(350), uint32] {
  @func_3206() /* ty=Tensor[(350), uint32] */
}

def @func_5338() -> (Tensor[(350), uint8], Tensor[(384), float64]) {
  %557 = fn () -> (Tensor[(350), uint8], Tensor[(384), float64]) {
    %554 = @func_5067() /* ty=(Tensor[(384), float64], Tensor[(350), uint8]) */;
    %555 = @func_4778() /* ty=Tensor[(350), uint8] */;
    %556 = %554.0;
    (%555, %556)
  };
  %557() /* ty=(Tensor[(350), uint8], Tensor[(384), float64]) */
}

def @func_5762() -> (Tensor[(350), float64], Tensor[(220), float64]) {
  @func_5760() /* ty=(Tensor[(350), float64], Tensor[(220), float64]) */
}

def @func_7901(%var_7899: Tensor[(3, 8, 14), int64], %var_7900: Tensor[(3, 8, 14), int64]) -> (Tensor[(3, 8, 14), float64], Tensor[(3, 8, 14), float64]) {
  @func_7897(%var_7899, %var_7900) /* ty=(Tensor[(3, 8, 14), float64], Tensor[(3, 8, 14), float64]) */
}

def @func_7809() -> Tensor[(55, 6), uint64] {
  %558 = @func_7204() /* ty=(Tensor[(55, 6), uint64],) */;
  %558.0
}

def @func_12854() -> Tensor[(220), float64] {
  @func_12852() /* ty=Tensor[(220), float64] */
}

def @func_6269(%var_6264: Tensor[(832), float64]) -> (Tensor[(350), uint32], Tensor[(13, 8, 8), float64], Tensor[(832), float64]) {
  %559 = @func_3467() /* ty=(Tensor[(350), uint32],) */;
  %560 = cast(%var_6264, dtype="float64") /* ty=Tensor[(832), float64] */;
  %561 = reshape(%560, newshape=[13, 8, 8]) /* ty=Tensor[(13, 8, 8), float64] */;
  %562 = %559.0;
  %563 = @func_2433(%561) /* ty=Tensor[(13, 8, 8), float64] */;
  (%562, %563, %var_6264)
}

def @func_12861() -> (Tensor[(350), uint32],) {
  %565 = fn () -> (Tensor[(350), uint32],) {
    %564 = @func_3206() /* ty=Tensor[(350), uint32] */;
    (%564,)
  };
  %565() /* ty=(Tensor[(350), uint32],) */
}

def @func_7271() -> (Tensor[(16, 16, 15), int16],) {
  %568 = fn () -> (Tensor[(16, 16, 15), int16],) {
    %566 = @func_5965() /* ty=(Tensor[(16, 16, 15), int16],) */;
    %567 = %566.0;
    (%567,)
  };
  %568() /* ty=(Tensor[(16, 16, 15), int16],) */
}

def @func_11030() -> (Tensor[(16, 16, 15), int16],) {
  %571 = fn () -> (Tensor[(16, 16, 15), int16],) {
    %569 = @func_8440() /* ty=(Tensor[(16, 16, 15), int16], Tensor[(350), uint8], Tensor[(350), uint8]) */;
    %570 = %569.0;
    (%570,)
  };
  %571() /* ty=(Tensor[(16, 16, 15), int16],) */
}

def @func_10508() -> (Tensor[(350), uint32], Tensor[(350), uint32]) {
  %575 = fn () -> (Tensor[(350), uint32], Tensor[(350), uint32]) {
    %572 = @func_7321() /* ty=(Tensor[(350), uint32],) */;
    %573 = %572.0;
    %574 = @func_9522() /* ty=Tensor[(350), uint32] */;
    (%573, %574)
  };
  %575() /* ty=(Tensor[(350), uint32], Tensor[(350), uint32]) */
}

def @func_10597() -> (Tensor[(220), float64], Tensor[(350), uint32], Tensor[(350), uint32]) {
  %581 = fn () -> (Tensor[(220), float64], Tensor[(350), uint32], Tensor[(350), uint32]) {
    %576 = @func_9689() /* ty=(Tensor[(220), float64],) */;
    %577 = @func_7503() /* ty=(Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(220), uint32], Tensor[(16, 16, 15), int16], Tensor[(220), float64]) */;
    %578 = %576.0;
    %579 = @func_7109() /* ty=Tensor[(350), uint32] */;
    %580 = %577.1;
    (%578, %579, %580)
  };
  %581() /* ty=(Tensor[(220), float64], Tensor[(350), uint32], Tensor[(350), uint32]) */
}

def @func_7305(%var_7303: Tensor[(220), float64]) -> (Tensor[(220), bool],) {
  @func_7302(%var_7303) /* ty=(Tensor[(220), bool],) */
}

def @func_5775() -> (Tensor[(220), uint32],) {
  %583 = fn () -> (Tensor[(220), uint32],) {
    %582 = @func_4612() /* ty=Tensor[(220), uint32] */;
    (%582,)
  };
  %583() /* ty=(Tensor[(220), uint32],) */
}

def @func_4394() -> (Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(1, 220), uint32], Tensor[(330), uint64], Tensor[(10, 11, 3), bool]) {
  %599 = fn () -> (Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(1, 220), uint32], Tensor[(330), uint64], Tensor[(10, 11, 3), bool]) {
    %584 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 220), uint32] */, dtype="uint32") /* ty=Tensor[(1, 220), uint32] */;
    %585 = cast(meta[relay.Constant][30] /* ty=Tensor[(330), uint64] */, dtype="uint64") /* ty=Tensor[(330), uint64] */;
    %586 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 220), uint32] */, dtype="uint32") /* ty=Tensor[(1, 220), uint32] */;
    %587 = reshape(%584, newshape=[220]) /* ty=Tensor[(220), uint32] */;
    %588 = reshape(%585, newshape=[330]) /* ty=Tensor[(330), uint64] */;
    %589 = reshape(%586, newshape=[220]) /* ty=Tensor[(220), uint32] */;
    %590 = @func_3886(%587, %588, %589) /* ty=(Tensor[(13, 8, 8), float64], Tensor[(350), uint32], Tensor[(350), int64], Tensor[(350), uint32], Tensor[(10, 11, 3), bool], Tensor[(220), bool], Tensor[(220), int16], Tensor[(330), float64], Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(350), uint32]) */;
    %591 = cast(meta[relay.Constant][30] /* ty=Tensor[(330), uint64] */, dtype="uint64") /* ty=Tensor[(330), uint64] */;
    %592 = cast(meta[relay.Constant][30] /* ty=Tensor[(330), uint64] */, dtype="uint64") /* ty=Tensor[(330), uint64] */;
    %593 = reshape(%591, newshape=[10, 11, 3]) /* ty=Tensor[(10, 11, 3), uint64] */;
    %594 = reshape(%592, newshape=[10, 11, 3]) /* ty=Tensor[(10, 11, 3), uint64] */;
    %595 = @func_3448() /* ty=Tensor[(350), uint32] */;
    %596 = @func_3894() /* ty=Tensor[(350), uint32] */;
    %597 = %590.10;
    %598 = @func_191(%593, %594) /* ty=Tensor[(10, 11, 3), bool] */;
    (%595, %596, %597, meta[relay.Constant][29] /* ty=Tensor[(1, 220), uint32] */, meta[relay.Constant][30] /* ty=Tensor[(330), uint64] */, %598)
  };
  %599() /* ty=(Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(1, 220), uint32], Tensor[(330), uint64], Tensor[(10, 11, 3), bool]) */
}

def @func_4071() -> Tensor[(350), uint8] {
  %608 = fn () -> Tensor[(350), uint8] {
    %600 = @func_3206() /* ty=Tensor[(350), uint32] */;
    %601 = cast(%600, dtype="uint32") /* ty=Tensor[(350), uint32] */;
    %602 = reshape(%601, newshape=[14, 5, 5]) /* ty=Tensor[(14, 5, 5), uint32] */;
    %603 = @func_1256(%602) /* ty=Tensor[(14, 5, 5), uint32] */;
    %604 = cast(%603, dtype="uint8") /* ty=Tensor[(14, 5, 5), uint8] */;
    %605 = shape_of(%600, dtype="int32") /* ty=Tensor[(1), int32] */;
    %606 = cast(%600, dtype="uint8") /* ty=Tensor[(350), uint8] */;
    %607 = dyn.reshape(%604, %605, newshape=[]) /* ty=Tensor[(?), uint8] */;
    maximum(%606, %607) /* ty=Tensor[(350), uint8] */
  };
  %608() /* ty=Tensor[(350), uint8] */
}

def @func_10180() -> Tensor[(350), uint32] {
  %609 = @func_4393() /* ty=(Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(1, 220), uint32], Tensor[(330), uint64], Tensor[(10, 11, 3), bool]) */;
  %609.0
}

def @func_3896() -> Tensor[(350), uint32] {
  @func_3894() /* ty=Tensor[(350), uint32] */
}

def @func_11447() -> (Tensor[(384), float64], Tensor[(350), uint8]) {
  %612 = fn () -> (Tensor[(384), float64], Tensor[(350), uint8]) {
    %610 = @func_10175() /* ty=Tensor[(384), float64] */;
    %611 = @func_4070() /* ty=Tensor[(350), uint8] */;
    (%610, %611)
  };
  %612() /* ty=(Tensor[(384), float64], Tensor[(350), uint8]) */
}

def @func_14429() -> Tensor[(350), uint32] {
  %613 = @func_8033() /* ty=(Tensor[(220), uint32], Tensor[(350), uint32]) */;
  %613.1
}

def @func_3890(%var_3887: Tensor[(220), uint32], %var_3888: Tensor[(330), uint64], %var_3889: Tensor[(220), uint32]) -> (Tensor[(13, 8, 8), float64], Tensor[(350), uint32], Tensor[(350), int64], Tensor[(350), uint32], Tensor[(10, 11, 3), bool], Tensor[(220), bool], Tensor[(220), int16], Tensor[(330), float64], Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(350), uint32]) {
  %642 = fn (%var_3763: Tensor[(220), uint32], %var_3787: Tensor[(330), uint64], %var_3798: Tensor[(220), uint32]) -> (Tensor[(13, 8, 8), float64], Tensor[(350), uint32], Tensor[(350), int64], Tensor[(350), uint32], Tensor[(10, 11, 3), bool], Tensor[(220), bool], Tensor[(220), int16], Tensor[(330), float64], Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(350), uint32]) {
    %614 = @func_3389() /* ty=(Tensor[(350), float32], Tensor[(13, 8, 8), float64], Tensor[(384), float64], Tensor[(220), uint32]) */;
    %615 = @func_3467() /* ty=(Tensor[(350), uint32],) */;
    %616 = cast(%var_3763, dtype="uint32") /* ty=Tensor[(220), uint32] */;
    %617 = reshape(%616, newshape=[1, 220]) /* ty=Tensor[(1, 220), uint32] */;
    %618 = @func_3317(%617) /* ty=(Tensor[(10, 11, 3), bool], Tensor[(10, 11, 2), bool], Tensor[(1, 220), uint32], Tensor[(16, 16, 15), int16], Tensor[(350), int64]) */;
    %619 = cast(%var_3787, dtype="uint64") /* ty=Tensor[(330), uint64] */;
    %620 = reshape(%619, newshape=[330]) /* ty=Tensor[(330), uint64] */;
    %621 = @func_950(%620) /* ty=(Tensor[(1, 4, 3), float32], Tensor[(10, 11, 3), bool], Tensor[(330), uint64]) */;
    %622 = cast(%var_3798, dtype="bool") /* ty=Tensor[(220), bool] */;
    %623 = shape_of(%var_3763, dtype="int32") /* ty=Tensor[(1), int32] */;
    %624 = cast(%var_3763, dtype="bool") /* ty=Tensor[(220), bool] */;
    %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?), bool] */;
    %626 = cast(%var_3763, dtype="int16") /* ty=Tensor[(220), int16] */;
    %627 = shape_of(%var_3798, dtype="int32") /* ty=Tensor[(1), int32] */;
    %628 = cast(%var_3798, dtype="int16") /* ty=Tensor[(220), int16] */;
    %629 = dyn.reshape(%626, %627, newshape=[]) /* ty=Tensor[(?), int16] */;
    %630 = cast(%var_3787, dtype="float64") /* ty=Tensor[(330), float64] */;
    %631 = %614.1;
    %632 = %615.0;
    %633 = %618.4;
    %634 = @func_3206() /* ty=Tensor[(350), uint32] */;
    %635 = %621.1;
    %636 = logical_and(%624, %625) /* ty=Tensor[(220), bool] */;
    %637 = add(%628, %629) /* ty=Tensor[(220), int16] */;
    %638 = log(%630) /* ty=Tensor[(330), float64] */;
    %639 = @func_3668() /* ty=Tensor[(350), uint32] */;
    %640 = @func_3206() /* ty=Tensor[(350), uint32] */;
    %641 = @func_3229() /* ty=Tensor[(350), uint32] */;
    (%631, %632, %633, %634, %635, %636, %637, %638, %639, %640, %641)
  };
  %642(%var_3887, %var_3888, %var_3889) /* ty=(Tensor[(13, 8, 8), float64], Tensor[(350), uint32], Tensor[(350), int64], Tensor[(350), uint32], Tensor[(10, 11, 3), bool], Tensor[(220), bool], Tensor[(220), int16], Tensor[(330), float64], Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(350), uint32]) */
}

def @func_5860() -> Tensor[(384), float64] {
  %644 = fn () -> Tensor[(384), float64] {
    %643 = @func_3409() /* ty=(Tensor[(384), float64],) */;
    %643.0
  };
  %644() /* ty=Tensor[(384), float64] */
}

def @func_8171() -> (Tensor[(16, 16, 15), int16],) {
  %647 = fn () -> (Tensor[(16, 16, 15), int16],) {
    %645 = @func_7270() /* ty=(Tensor[(16, 16, 15), int16],) */;
    %646 = %645.0;
    (%646,)
  };
  %647() /* ty=(Tensor[(16, 16, 15), int16],) */
}

def @func_5886(%var_5885: Tensor[(220), float64]) -> Tensor[(220), uint8] {
  %654 = fn (%var_5876: Tensor[(220), float64]) -> Tensor[(220), uint8] {
    %648 = @func_3441() /* ty=(Tensor[(220), float64],) */;
    %649 = %648.0;
    %650 = cast(%var_5876, dtype="uint8") /* ty=Tensor[(220), uint8] */;
    %651 = shape_of(%649, dtype="int32") /* ty=Tensor[(1), int32] */;
    %652 = cast(%649, dtype="uint8") /* ty=Tensor[(220), uint8] */;
    %653 = dyn.reshape(%650, %651, newshape=[]) /* ty=Tensor[(?), uint8] */;
    subtract(%652, %653) /* ty=Tensor[(220), uint8] */
  };
  %654(%var_5885) /* ty=Tensor[(220), uint8] */
}

def @func_3654(%var_3653: Tensor[(220), uint32]) -> (Tensor[(220), float64], Tensor[(10, 11, 3), float32], Tensor[(384), float64], Tensor[(350), uint32], Tensor[(220), float64], Tensor[(350), uint32]) {
  %673 = fn (%var_3597: Tensor[(220), uint32]) -> (Tensor[(220), float64], Tensor[(10, 11, 3), float32], Tensor[(384), float64], Tensor[(350), uint32], Tensor[(220), float64], Tensor[(350), uint32]) {
    %655 = @func_3389() /* ty=(Tensor[(350), float32], Tensor[(13, 8, 8), float64], Tensor[(384), float64], Tensor[(220), uint32]) */;
    %656 = %655.3;
    %657 = cast(%var_3597, dtype="float64") /* ty=Tensor[(220), float64] */;
    %658 = shape_of(%656, dtype="int32") /* ty=Tensor[(1), int32] */;
    %659 = cast(%656, dtype="float64") /* ty=Tensor[(220), float64] */;
    %660 = dyn.reshape(%657, %658, newshape=[]) /* ty=Tensor[(?), float64] */;
    %661 = cast(meta[relay.Constant][31] /* ty=Tensor[(384), float64] */, dtype="float64") /* ty=Tensor[(384), float64] */;
    %662 = cast(%var_3597, dtype="uint32") /* ty=Tensor[(220), uint32] */;
    %663 = cast(meta[relay.Constant][32] /* ty=Tensor[(350), uint32] */, dtype="uint32") /* ty=Tensor[(350), uint32] */;
    %664 = reshape(%661, newshape=[384]) /* ty=Tensor[(384), float64] */;
    %665 = reshape(%662, newshape=[220]) /* ty=Tensor[(220), uint32] */;
    %666 = reshape(%663, newshape=[350]) /* ty=Tensor[(350), uint32] */;
    %667 = @func_3072(%664, %665, %666) /* ty=(Tensor[(10, 3, 12), bool], Tensor[(10, 11, 3), float32], Tensor[(384), float64], Tensor[(13, 8, 8), float64], Tensor[(832), float64], Tensor[(14, 5, 5), uint32], Tensor[(350), uint32], Tensor[(220), float64]) */;
    %668 = @func_3441() /* ty=(Tensor[(220), float64],) */;
    %669 = power(%659, %660) /* ty=Tensor[(220), float64] */;
    %670 = %667.1;
    %671 = %668.0;
    %672 = @func_3206() /* ty=Tensor[(350), uint32] */;
    (%669, %670, meta[relay.Constant][31] /* ty=Tensor[(384), float64] */, meta[relay.Constant][32] /* ty=Tensor[(350), uint32] */, %671, %672)
  };
  %673(%var_3653) /* ty=(Tensor[(220), float64], Tensor[(10, 11, 3), float32], Tensor[(384), float64], Tensor[(350), uint32], Tensor[(220), float64], Tensor[(350), uint32]) */
}

def @func_13119() -> (Tensor[(16, 16, 15), int16], Tensor[(350), uint8]) {
  @func_13117() /* ty=(Tensor[(16, 16, 15), int16], Tensor[(350), uint8]) */
}

def @func_11760() -> (Tensor[(384), float64], Tensor[(384), float64]) {
  %674 = @func_5859() /* ty=Tensor[(384), float64] */;
  %675 = @func_10175() /* ty=Tensor[(384), float64] */;
  (%674, %675)
}

def @func_5542() -> Tensor[(220), float64] {
  @func_5540() /* ty=Tensor[(220), float64] */
}

def @func_6444() -> Tensor[(220), float64] {
  %676 = @func_5037() /* ty=(Tensor[(220), float64],) */;
  %676.0
}

def @func_14348() -> (Tensor[(350), float64], Tensor[(220), uint32]) {
  @func_14346() /* ty=(Tensor[(350), float64], Tensor[(220), uint32]) */
}

def @func_11306(%var_11304: Tensor[(384), float64], %var_11305: Tensor[(3840), int16]) -> (Tensor[(220), float64], Tensor[(220), float32], Tensor[(330), uint64], Tensor[(330), bool], Tensor[(384), float64], Tensor[(350), float64], Tensor[(350), float32], Tensor[(350), float32], Tensor[(832), float64], Tensor[(3840), float32], Tensor[(350, 832), int32], Tensor[(350), uint32]) {
  %717 = fn (%var_11220: Tensor[(384), float64], %var_11268: Tensor[(3840), int16]) -> (Tensor[(220), float64], Tensor[(220), float32], Tensor[(330), uint64], Tensor[(330), bool], Tensor[(384), float64], Tensor[(350), float64], Tensor[(350), float32], Tensor[(350), float32], Tensor[(832), float64], Tensor[(3840), float32], Tensor[(350, 832), int32], Tensor[(350), uint32]) {
    %677 = @func_5540() /* ty=Tensor[(220), float64] */;
    %678 = cast(%677, dtype="float64") /* ty=Tensor[(220), float64] */;
    %679 = @func_9477() /* ty=(Tensor[(384), float64], Tensor[(330), uint64], Tensor[(330), uint64], Tensor[(350), uint32], Tensor[(350), uint8], Tensor[(350), uint8]) */;
    %680 = cast(%var_11220, dtype="float64") /* ty=Tensor[(384), float64] */;
    %681 = cast(%677, dtype="uint32") /* ty=Tensor[(220), uint32] */;
    %682 = reshape(%680, newshape=[16, 4, 6]) /* ty=Tensor[(16, 4, 6), float64] */;
    %683 = reshape(%681, newshape=[220]) /* ty=Tensor[(220), uint32] */;
    %684 = @func_1219(%682, %683) /* ty=(Tensor[(16, 4, 6), bool], Tensor[(330), bool], Tensor[(10, 11, 2), bool], Tensor[(220), uint32], Tensor[(10, 11, 2), bool], Tensor[(10, 11, 3), float32], Tensor[(10, 11, 3), bool]) */;
    %685 = @func_7368() /* ty=(Tensor[(350), float32],) */;
    %686 = cast(%var_11268, dtype="int16") /* ty=Tensor[(3840), int16] */;
    %687 = reshape(%686, newshape=[3840]) /* ty=Tensor[(3840), int16] */;
    %688 = @func_5721(%687) /* ty=(Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(220), float64], Tensor[(16, 16, 15), float64], Tensor[(3840), int16], Tensor[(350), uint32], Tensor[(330), uint64], Tensor[(350), uint32], Tensor[(13, 8, 8), float64], Tensor[(832), float64]) */;
    %689 = cast(meta[relay.Constant][33] /* ty=Tensor[(3840), int16] */, dtype="float32") /* ty=Tensor[(3840), float32] */;
    %690 = shape_of(%var_11268, dtype="int32") /* ty=Tensor[(1), int32] */;
    %691 = cast(%var_11268, dtype="float32") /* ty=Tensor[(3840), float32] */;
    %692 = dyn.reshape(%689, %690, newshape=[]) /* ty=Tensor[(?), float32] */;
    %693 = cast(%var_11220, dtype="float64") /* ty=Tensor[(384), float64] */;
    %694 = @func_10981() /* ty=Tensor[(350), float64] */;
    %695 = cast(%694, dtype="uint32") /* ty=Tensor[(350), uint32] */;
    %696 = reshape(%693, newshape=[384]) /* ty=Tensor[(384), float64] */;
    %697 = reshape(%695, newshape=[350, 1]) /* ty=Tensor[(350, 1), uint32] */;
    %698 = @func_9343(%696, %697) /* ty=(Tensor[(384), float64], Tensor[(350, 220), uint32], Tensor[(350, 832), float64]) */;
    %699 = %698.2;
    %700 = cast(%699, dtype="float64") /* ty=Tensor[(350, 832), float64] */;
    %701 = rsqrt(%700) /* ty=Tensor[(350, 832), float64] */;
    %702 = cast(%699, dtype="int32") /* ty=Tensor[(350, 832), int32] */;
    %703 = shape_of(%701, dtype="int32") /* ty=Tensor[(2), int32] */;
    %704 = cast(%701, dtype="int32") /* ty=Tensor[(350, 832), int32] */;
    %705 = dyn.reshape(%702, %703, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
    %706 = @func_4393() /* ty=(Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(1, 220), uint32], Tensor[(330), uint64], Tensor[(10, 11, 3), bool]) */;
    %707 = exp(%678) /* ty=Tensor[(220), float64] */;
    %708 = @func_8862() /* ty=Tensor[(220), float32] */;
    %709 = %679.2;
    %710 = %684.1;
    %711 = @func_6809() /* ty=Tensor[(350), float32] */;
    %712 = %685.0;
    %713 = %688.9;
    %714 = power(%691, %692) /* ty=Tensor[(3840), float32] */;
    %715 = logical_xor(%704, %705) /* ty=Tensor[(350, 832), int32] */;
    %716 = %706.1;
    (%707, %708, %709, %710, %var_11220, %694, %711, %712, %713, %714, %715, %716)
  };
  %717(%var_11304, %var_11305) /* ty=(Tensor[(220), float64], Tensor[(220), float32], Tensor[(330), uint64], Tensor[(330), bool], Tensor[(384), float64], Tensor[(350), float64], Tensor[(350), float32], Tensor[(350), float32], Tensor[(832), float64], Tensor[(3840), float32], Tensor[(350, 832), int32], Tensor[(350), uint32]) */
}

def @func_13693() -> (Tensor[(384), float64],) {
  %718 = @func_11760() /* ty=(Tensor[(384), float64], Tensor[(384), float64]) */;
  %719 = %718.1;
  (%719,)
}

def @func_13929() -> Tensor[(220), uint32] {
  %720 = @func_11060() /* ty=(Tensor[(55, 6), uint64], Tensor[(220), uint32], Tensor[(220), uint32]) */;
  %720.2
}

def @func_9524() -> Tensor[(350), uint32] {
  @func_9522() /* ty=Tensor[(350), uint32] */
}

def @func_4992() -> Tensor[(350), float64] {
  @func_4990() /* ty=Tensor[(350), float64] */
}

def @func_10148(%var_10147: Tensor[(16, 16, 15), int16]) -> (Tensor[(16, 16, 15), bool],) {
  %728 = fn (%var_10136: Tensor[(16, 16, 15), int16]) -> (Tensor[(16, 16, 15), bool],) {
    %721 = @func_8170() /* ty=(Tensor[(16, 16, 15), int16],) */;
    %722 = %721.0;
    %723 = cast(%var_10136, dtype="bool") /* ty=Tensor[(16, 16, 15), bool] */;
    %724 = shape_of(%722, dtype="int32") /* ty=Tensor[(3), int32] */;
    %725 = cast(%722, dtype="bool") /* ty=Tensor[(16, 16, 15), bool] */;
    %726 = dyn.reshape(%723, %724, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %727 = logical_or(%725, %726) /* ty=Tensor[(16, 16, 15), bool] */;
    (%727,)
  };
  %728(%var_10147) /* ty=(Tensor[(16, 16, 15), bool],) */
}

def @func_9754() -> (Tensor[(220), float64],) {
  %729 = @func_6444() /* ty=Tensor[(220), float64] */;
  (%729,)
}

def @func_12255() -> (Tensor[(350), float32], Tensor[(220), float64], Tensor[(350), bool]) {
  %730 = @func_6379() /* ty=(Tensor[(350), float32], Tensor[(16, 16, 15), int16]) */;
  %731 = @func_3441() /* ty=(Tensor[(220), float64],) */;
  %732 = %730.0;
  %733 = cast(%732, dtype="uint32") /* ty=Tensor[(350), uint32] */;
  %734 = %731.0;
  %735 = cast(%734, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %736 = reshape(%733, newshape=[350]) /* ty=Tensor[(350), uint32] */;
  %737 = reshape(%735, newshape=[220]) /* ty=Tensor[(220), uint32] */;
  %738 = @func_3535(%736, %737) /* ty=(Tensor[(350), bool], Tensor[(16, 16, 15), int16], Tensor[(220), uint32], Tensor[(330), uint64], Tensor[(5, 66), uint64]) */;
  %739 = %738.0;
  (%732, %734, %739)
}

def @func_8551(%var_8549: Tensor[(180), float32]) -> (Tensor[(350), float64], Tensor[(350), uint32], Tensor[(9, 5, 4), bool], Tensor[(180), float32]) {
  @func_8548(%var_8549) /* ty=(Tensor[(350), float64], Tensor[(350), uint32], Tensor[(9, 5, 4), bool], Tensor[(180), float32]) */
}

def @func_14662() -> (Tensor[(220), float64], Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(350), uint8], Tensor[(9, 5, 4), bool], Tensor[(180), float32]) {
  %740 = @func_4038() /* ty=(Tensor[(350), uint32], Tensor[(350), uint32]) */;
  %741 = cast(meta[relay.Constant][34] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %742 = cast(meta[relay.Constant][34] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %743 = reshape(%741, newshape=[9, 5, 4]) /* ty=Tensor[(9, 5, 4), float32] */;
  %744 = reshape(%742, newshape=[9, 5, 4]) /* ty=Tensor[(9, 5, 4), float32] */;
  %745 = @func_14128() /* ty=Tensor[(220), float64] */;
  %746 = %740.1;
  %747 = @func_3229() /* ty=Tensor[(350), uint32] */;
  %748 = @func_4778() /* ty=Tensor[(350), uint8] */;
  %749 = @func_4005(%743, %744) /* ty=Tensor[(9, 5, 4), bool] */;
  (%745, %746, %747, %748, %749, meta[relay.Constant][34] /* ty=Tensor[(180), float32] */)
}

def @func_4779() -> Tensor[(350), uint8] {
  %750 = fn () -> Tensor[(350), uint8] {
    @func_4070() /* ty=Tensor[(350), uint8] */
  };
  %750() /* ty=Tensor[(350), uint8] */
}

def @func_10720() -> (Tensor[(220), float32],) {
  %752 = fn () -> (Tensor[(220), float32],) {
    %751 = @func_6357() /* ty=Tensor[(220), float32] */;
    (%751,)
  };
  %752() /* ty=(Tensor[(220), float32],) */
}

def @func_3670() -> Tensor[(350), uint32] {
  @func_3668() /* ty=Tensor[(350), uint32] */
}

def @func_10177() -> Tensor[(384), float64] {
  @func_10175() /* ty=Tensor[(384), float64] */
}

def @func_5723(%var_5722: Tensor[(3840), int16]) -> (Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(220), float64], Tensor[(16, 16, 15), float64], Tensor[(3840), int16], Tensor[(350), uint32], Tensor[(330), uint64], Tensor[(350), uint32], Tensor[(13, 8, 8), float64], Tensor[(832), float64]) {
  %775 = fn (%var_5686: Tensor[(3840), int16]) -> (Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(220), float64], Tensor[(16, 16, 15), float64], Tensor[(3840), int16], Tensor[(350), uint32], Tensor[(330), uint64], Tensor[(350), uint32], Tensor[(13, 8, 8), float64], Tensor[(832), float64]) {
    %753 = @func_3467() /* ty=(Tensor[(350), uint32],) */;
    %754 = cast(%var_5686, dtype="int16") /* ty=Tensor[(3840), int16] */;
    %755 = cast(%var_5686, dtype="int16") /* ty=Tensor[(3840), int16] */;
    %756 = reshape(%754, newshape=[16, 16, 15]) /* ty=Tensor[(16, 16, 15), int16] */;
    %757 = reshape(%755, newshape=[16, 16, 15]) /* ty=Tensor[(16, 16, 15), int16] */;
    %758 = @func_2872(%756, %757) /* ty=(Tensor[(16, 16, 15), float64], Tensor[(16, 16, 15), uint8]) */;
    %759 = @func_4491() /* ty=Tensor[(220), float64] */;
    %760 = cast(%759, dtype="uint32") /* ty=Tensor[(220), uint32] */;
    %761 = cast(meta[relay.Constant][35] /* ty=Tensor[(330), uint64] */, dtype="uint64") /* ty=Tensor[(330), uint64] */;
    %762 = cast(%759, dtype="uint32") /* ty=Tensor[(220), uint32] */;
    %763 = reshape(%760, newshape=[220]) /* ty=Tensor[(220), uint32] */;
    %764 = reshape(%761, newshape=[330]) /* ty=Tensor[(330), uint64] */;
    %765 = reshape(%762, newshape=[220]) /* ty=Tensor[(220), uint32] */;
    %766 = @func_3886(%763, %764, %765) /* ty=(Tensor[(13, 8, 8), float64], Tensor[(350), uint32], Tensor[(350), int64], Tensor[(350), uint32], Tensor[(10, 11, 3), bool], Tensor[(220), bool], Tensor[(220), int16], Tensor[(330), float64], Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(350), uint32]) */;
    %767 = cast(meta[relay.Constant][36] /* ty=Tensor[(832), float64] */, dtype="float64") /* ty=Tensor[(832), float64] */;
    %768 = reshape(%767, newshape=[13, 8, 8]) /* ty=Tensor[(13, 8, 8), float64] */;
    %769 = %753.0;
    %770 = @func_4403() /* ty=Tensor[(350), uint32] */;
    %771 = %758.0;
    %772 = %766.1;
    %773 = @func_4403() /* ty=Tensor[(350), uint32] */;
    %774 = @func_2433(%768) /* ty=Tensor[(13, 8, 8), float64] */;
    (%769, %770, %759, %771, %var_5686, %772, meta[relay.Constant][35] /* ty=Tensor[(330), uint64] */, %773, %774, meta[relay.Constant][36] /* ty=Tensor[(832), float64] */)
  };
  %775(%var_5722) /* ty=(Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(220), float64], Tensor[(16, 16, 15), float64], Tensor[(3840), int16], Tensor[(350), uint32], Tensor[(330), uint64], Tensor[(350), uint32], Tensor[(13, 8, 8), float64], Tensor[(832), float64]) */
}

def @func_2840() -> (Tensor[(16, 16, 15), int16], Tensor[(10, 11, 3), bool], Tensor[(330), uint64], Tensor[(16, 16, 15), int16], Tensor[(10, 3, 12), bool], Tensor[(10, 3), uint8], Tensor[(384), float64], Tensor[(350), uint32]) {
  %776 = @func_2760() /* ty=(Tensor[(16, 16, 15), int16],) */;
  %777 = cast(meta[relay.Constant][37] /* ty=Tensor[(330), uint64] */, dtype="uint64") /* ty=Tensor[(330), uint64] */;
  %778 = cast(meta[relay.Constant][37] /* ty=Tensor[(330), uint64] */, dtype="uint64") /* ty=Tensor[(330), uint64] */;
  %779 = reshape(%777, newshape=[10, 11, 3]) /* ty=Tensor[(10, 11, 3), uint64] */;
  %780 = reshape(%778, newshape=[10, 11, 3]) /* ty=Tensor[(10, 11, 3), uint64] */;
  %781 = @func_2760() /* ty=(Tensor[(16, 16, 15), int16],) */;
  %782 = cast(meta[relay.Constant][38] /* ty=Tensor[(10, 3), uint8] */, dtype="uint8") /* ty=Tensor[(10, 3), uint8] */;
  %783 = cast(meta[relay.Constant][38] /* ty=Tensor[(10, 3), uint8] */, dtype="uint8") /* ty=Tensor[(10, 3), uint8] */;
  %784 = cast(meta[relay.Constant][39] /* ty=Tensor[(384), float64] */, dtype="float64") /* ty=Tensor[(384), float64] */;
  %785 = cast(meta[relay.Constant][40] /* ty=Tensor[(350), uint32] */, dtype="uint32") /* ty=Tensor[(350), uint32] */;
  %786 = reshape(%782, newshape=[10, 3, 1]) /* ty=Tensor[(10, 3, 1), uint8] */;
  %787 = reshape(%783, newshape=[10, 3, 1]) /* ty=Tensor[(10, 3, 1), uint8] */;
  %788 = reshape(%784, newshape=[384]) /* ty=Tensor[(384), float64] */;
  %789 = reshape(%785, newshape=[350]) /* ty=Tensor[(350), uint32] */;
  %790 = @func_2322(%786, %787, %788, %789) /* ty=(Tensor[(10, 3, ?), uint8], Tensor[(10, 11, 2), bool], Tensor[(384), float64], Tensor[(14, 5, 5), uint32], Tensor[(350), uint32], Tensor[(10, 3, 12), bool], Tensor[(10, 11, 3), bool], Tensor[(165, 2), uint64], Tensor[(220), uint32], Tensor[(10, 3, 220), float32], Tensor[(10, 11, 2), bool]) */;
  %791 = %776.0;
  %792 = @func_191(%779, %780) /* ty=Tensor[(10, 11, 3), bool] */;
  %793 = %781.0;
  %794 = %790.5;
  (%791, %792, meta[relay.Constant][37] /* ty=Tensor[(330), uint64] */, %793, %794, meta[relay.Constant][38] /* ty=Tensor[(10, 3), uint8] */, meta[relay.Constant][39] /* ty=Tensor[(384), float64] */, meta[relay.Constant][40] /* ty=Tensor[(350), uint32] */)
}

def @func_3979() -> Tensor[(16, 16, 15), int16] {
  %796 = fn () -> Tensor[(16, 16, 15), int16] {
    %795 = @func_2760() /* ty=(Tensor[(16, 16, 15), int16],) */;
    %795.0
  };
  %796() /* ty=Tensor[(16, 16, 15), int16] */
}

def @func_6524() -> (Tensor[(220), float64],) {
  %798 = fn () -> (Tensor[(220), float64],) {
    %797 = @func_5540() /* ty=Tensor[(220), float64] */;
    (%797,)
  };
  %798() /* ty=(Tensor[(220), float64],) */
}

def @func_12844() -> (Tensor[(220), float32], Tensor[(350), uint32]) {
  %803 = fn () -> (Tensor[(220), float32], Tensor[(350), uint32]) {
    %799 = @func_10719() /* ty=(Tensor[(220), float32],) */;
    %800 = @func_4393() /* ty=(Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(1, 220), uint32], Tensor[(330), uint64], Tensor[(10, 11, 3), bool]) */;
    %801 = %799.0;
    %802 = %800.0;
    (%801, %802)
  };
  %803() /* ty=(Tensor[(220), float32], Tensor[(350), uint32]) */
}

def @func_7302(%var_7290: Tensor[(220), float64]) -> (Tensor[(220), bool],) {
  %804 = @func_7053() /* ty=Tensor[(220), float64] */;
  %805 = cast(%var_7290, dtype="bool") /* ty=Tensor[(220), bool] */;
  %806 = shape_of(%804, dtype="int32") /* ty=Tensor[(1), int32] */;
  %807 = cast(%804, dtype="bool") /* ty=Tensor[(220), bool] */;
  %808 = dyn.reshape(%805, %806, newshape=[]) /* ty=Tensor[(?), bool] */;
  %809 = less_equal(%807, %808) /* ty=Tensor[(220), bool] */;
  (%809,)
}

def @func_5967() -> (Tensor[(16, 16, 15), int16],) {
  @func_5965() /* ty=(Tensor[(16, 16, 15), int16],) */
}

def @func_3229() -> Tensor[(350), uint32] {
  @func_2915() /* ty=Tensor[(350), uint32] */
}

def @func_6465() -> Tensor[(350), uint32] {
  %811 = fn () -> Tensor[(350), uint32] {
    %810 = @func_4591() /* ty=(Tensor[(350), uint32], Tensor[(350), uint32]) */;
    %810.0
  };
  %811() /* ty=Tensor[(350), uint32] */
}

def @func_8864() -> Tensor[(220), float32] {
  @func_8862() /* ty=Tensor[(220), float32] */
}

def @func_14476() -> (Tensor[(384), float64], Tensor[(384), float64], Tensor[(384), float64]) {
  %815 = fn () -> (Tensor[(384), float64], Tensor[(384), float64], Tensor[(384), float64]) {
    %812 = @func_10904() /* ty=Tensor[(384), float64] */;
    %813 = @func_10175() /* ty=Tensor[(384), float64] */;
    %814 = @func_10175() /* ty=Tensor[(384), float64] */;
    (%812, %813, %814)
  };
  %815() /* ty=(Tensor[(384), float64], Tensor[(384), float64], Tensor[(384), float64]) */
}

def @func_11748(%var_11747: Tensor[(220), float32]) -> (Tensor[(350), uint8], Tensor[(220), int32], Tensor[(16, 16, 15), int16], Tensor[(350), uint32]) {
  %827 = fn (%var_11721: Tensor[(220), float32]) -> (Tensor[(350), uint8], Tensor[(220), int32], Tensor[(16, 16, 15), int16], Tensor[(350), uint32]) {
    %816 = @func_8862() /* ty=Tensor[(220), float32] */;
    %817 = cast(%var_11721, dtype="int32") /* ty=Tensor[(220), int32] */;
    %818 = shape_of(%816, dtype="int32") /* ty=Tensor[(1), int32] */;
    %819 = cast(%816, dtype="int32") /* ty=Tensor[(220), int32] */;
    %820 = dyn.reshape(%817, %818, newshape=[]) /* ty=Tensor[(?), int32] */;
    %821 = @func_2760() /* ty=(Tensor[(16, 16, 15), int16],) */;
    %822 = @func_6511() /* ty=(Tensor[(350), uint32],) */;
    %823 = @func_4070() /* ty=Tensor[(350), uint8] */;
    %824 = maximum(%819, %820) /* ty=Tensor[(220), int32] */;
    %825 = %821.0;
    %826 = %822.0;
    (%823, %824, %825, %826)
  };
  %827(%var_11747) /* ty=(Tensor[(350), uint8], Tensor[(220), int32], Tensor[(16, 16, 15), int16], Tensor[(350), uint32]) */
}

def @func_3468() -> (Tensor[(350), uint32],) {
  %829 = fn () -> (Tensor[(350), uint32],) {
    %828 = @func_2915() /* ty=Tensor[(350), uint32] */;
    (%828,)
  };
  %829() /* ty=(Tensor[(350), uint32],) */
}

def @func_9300() -> (Tensor[(220), float64], Tensor[(350), float32], Tensor[(220), float64]) {
  %830 = @func_9082() /* ty=(Tensor[(220), float64], Tensor[(16, 16, 15), float32], Tensor[(220), float64], Tensor[(15, 9, 8), float64], Tensor[(1080), float64], Tensor[(350), float64], Tensor[(220), float64], Tensor[(350), uint32], Tensor[(350), uint8]) */;
  %831 = @func_4144() /* ty=(Tensor[(350), float32], Tensor[(14, 5, 5), uint32]) */;
  %832 = %830.0;
  %833 = %831.0;
  %834 = @func_7053() /* ty=Tensor[(220), float64] */;
  (%832, %833, %834)
}

def @func_4237(%var_4234: Tensor[(14, 5, 5), uint32], %var_4235: Tensor[(220, 1), uint32], %var_4236: Tensor[(330), uint64]) -> (Tensor[(350), uint32], Tensor[(14, 5, 5), bool], Tensor[(350), uint32], Tensor[(220, 1), uint32], Tensor[(330), uint64], Tensor[(14, 5, 5), float32]) {
  %855 = fn (%var_4214: Tensor[(14, 5, 5), uint32], %var_4221: Tensor[(220, 1), uint32], %var_4222: Tensor[(330), uint64]) -> (Tensor[(350), uint32], Tensor[(14, 5, 5), bool], Tensor[(350), uint32], Tensor[(220, 1), uint32], Tensor[(330), uint64], Tensor[(14, 5, 5), float32]) {
    %835 = @func_4038() /* ty=(Tensor[(350), uint32], Tensor[(350), uint32]) */;
    %836 = %835.0;
    %837 = cast(%836, dtype="uint32") /* ty=Tensor[(350), uint32] */;
    %838 = reshape(%837, newshape=[14, 5, 5]) /* ty=Tensor[(14, 5, 5), uint32] */;
    %839 = @func_1256(%838) /* ty=Tensor[(14, 5, 5), uint32] */;
    %840 = cast(%var_4214, dtype="bool") /* ty=Tensor[(14, 5, 5), bool] */;
    %841 = shape_of(%839, dtype="int32") /* ty=Tensor[(3), int32] */;
    %842 = cast(%839, dtype="bool") /* ty=Tensor[(14, 5, 5), bool] */;
    %843 = dyn.reshape(%840, %841, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %844 = cast(%var_4221, dtype="uint32") /* ty=Tensor[(220, 1), uint32] */;
    %845 = cast(%var_4222, dtype="uint64") /* ty=Tensor[(330), uint64] */;
    %846 = cast(%var_4221, dtype="uint32") /* ty=Tensor[(220, 1), uint32] */;
    %847 = reshape(%844, newshape=[220]) /* ty=Tensor[(220), uint32] */;
    %848 = reshape(%845, newshape=[330]) /* ty=Tensor[(330), uint64] */;
    %849 = reshape(%846, newshape=[220]) /* ty=Tensor[(220), uint32] */;
    %850 = @func_3886(%847, %848, %849) /* ty=(Tensor[(13, 8, 8), float64], Tensor[(350), uint32], Tensor[(350), int64], Tensor[(350), uint32], Tensor[(10, 11, 3), bool], Tensor[(220), bool], Tensor[(220), int16], Tensor[(330), float64], Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(350), uint32]) */;
    %851 = cast(%839, dtype="float32") /* ty=Tensor[(14, 5, 5), float32] */;
    %852 = less(%842, %843) /* ty=Tensor[(14, 5, 5), bool] */;
    %853 = %850.10;
    %854 = log2(%851) /* ty=Tensor[(14, 5, 5), float32] */;
    (%836, %852, %853, %var_4221, %var_4222, %854)
  };
  %855(%var_4234, %var_4235, %var_4236) /* ty=(Tensor[(350), uint32], Tensor[(14, 5, 5), bool], Tensor[(350), uint32], Tensor[(220, 1), uint32], Tensor[(330), uint64], Tensor[(14, 5, 5), float32]) */
}

def @func_1219(%var_1130: Tensor[(16, 4, 6), float64], %var_1171: Tensor[(220), uint32]) -> (Tensor[(16, 4, 6), bool], Tensor[(330), bool], Tensor[(10, 11, 2), bool], Tensor[(220), uint32], Tensor[(10, 11, 2), bool], Tensor[(10, 11, 3), float32], Tensor[(10, 11, 3), bool]) {
  %856 = cast(meta[relay.Constant][41] /* ty=Tensor[(16, 4, 6), float64] */, dtype="bool") /* ty=Tensor[(16, 4, 6), bool] */;
  %857 = shape_of(%var_1130, dtype="int32") /* ty=Tensor[(3), int32] */;
  %858 = cast(%var_1130, dtype="bool") /* ty=Tensor[(16, 4, 6), bool] */;
  %859 = dyn.reshape(%856, %857, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %860 = cast(meta[relay.Constant][42] /* ty=Tensor[(330), uint64] */, dtype="uint64") /* ty=Tensor[(330), uint64] */;
  %861 = cast(meta[relay.Constant][42] /* ty=Tensor[(330), uint64] */, dtype="uint64") /* ty=Tensor[(330), uint64] */;
  %862 = reshape(%860, newshape=[10, 11, 3]) /* ty=Tensor[(10, 11, 3), uint64] */;
  %863 = reshape(%861, newshape=[10, 11, 3]) /* ty=Tensor[(10, 11, 3), uint64] */;
  %864 = @func_191(%862, %863) /* ty=Tensor[(10, 11, 3), bool] */;
  %865 = cast(%864, dtype="float32") /* ty=Tensor[(10, 11, 3), float32] */;
  %866 = sin(%865) /* ty=Tensor[(10, 11, 3), float32] */;
  %867 = cast(%866, dtype="bool") /* ty=Tensor[(10, 11, 3), bool] */;
  %868 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(330), uint64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %869 = cast(meta[relay.Constant][42] /* ty=Tensor[(330), uint64] */, dtype="bool") /* ty=Tensor[(330), bool] */;
  %870 = dyn.reshape(%867, %868, newshape=[]) /* ty=Tensor[(?), bool] */;
  %871 = cast(%var_1171, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %872 = cast(%var_1171, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %873 = reshape(%871, newshape=[10, 11, 2]) /* ty=Tensor[(10, 11, 2), uint32] */;
  %874 = reshape(%872, newshape=[10, 11, 2]) /* ty=Tensor[(10, 11, 2), uint32] */;
  %875 = @func_534(%873, %874) /* ty=(Tensor[(10, 11, 2), bool],) */;
  %876 = %875.0;
  %877 = cast(%876, dtype="uint32") /* ty=Tensor[(10, 11, 2), uint32] */;
  %878 = cast(%876, dtype="uint32") /* ty=Tensor[(10, 11, 2), uint32] */;
  %879 = reshape(%877, newshape=[10, 11, 2]) /* ty=Tensor[(10, 11, 2), uint32] */;
  %880 = reshape(%878, newshape=[10, 11, 2]) /* ty=Tensor[(10, 11, 2), uint32] */;
  %881 = @func_534(%879, %880) /* ty=(Tensor[(10, 11, 2), bool],) */;
  %882 = cast(meta[relay.Constant][42] /* ty=Tensor[(330), uint64] */, dtype="uint16") /* ty=Tensor[(330), uint16] */;
  %883 = shape_of(%866, dtype="int32") /* ty=Tensor[(3), int32] */;
  %884 = cast(%866, dtype="uint16") /* ty=Tensor[(10, 11, 3), uint16] */;
  %885 = dyn.reshape(%882, %883, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %886 = add(%884, %885) /* ty=Tensor[(10, 11, 3), uint16] */;
  %887 = cast(%886, dtype="float32") /* ty=Tensor[(10, 11, 3), float32] */;
  %888 = cast(%866, dtype="uint64") /* ty=Tensor[(10, 11, 3), uint64] */;
  %889 = atanh(%887) /* ty=Tensor[(10, 11, 3), float32] */;
  %890 = cast(%889, dtype="uint64") /* ty=Tensor[(10, 11, 3), uint64] */;
  %891 = reshape(%888, newshape=[10, 11, 3]) /* ty=Tensor[(10, 11, 3), uint64] */;
  %892 = reshape(%890, newshape=[10, 11, 3]) /* ty=Tensor[(10, 11, 3), uint64] */;
  %893 = equal(%858, %859) /* ty=Tensor[(16, 4, 6), bool] */;
  %894 = equal(%869, %870) /* ty=Tensor[(330), bool] */;
  %895 = %881.0;
  %896 = @func_191(%891, %892) /* ty=Tensor[(10, 11, 3), bool] */;
  (%893, %894, %876, %var_1171, %895, %889, %896)
}

def @func_6826() -> (Tensor[(220), float64],) {
  %897 = @func_3441() /* ty=(Tensor[(220), float64],) */;
  %898 = %897.0;
  (%898,)
}

def @func_4145() -> (Tensor[(350), float32], Tensor[(14, 5, 5), uint32]) {
  %904 = fn () -> (Tensor[(350), float32], Tensor[(14, 5, 5), uint32]) {
    %899 = @func_3389() /* ty=(Tensor[(350), float32], Tensor[(13, 8, 8), float64], Tensor[(384), float64], Tensor[(220), uint32]) */;
    %900 = %899.0;
    %901 = cast(%900, dtype="uint32") /* ty=Tensor[(350), uint32] */;
    %902 = reshape(%901, newshape=[14, 5, 5]) /* ty=Tensor[(14, 5, 5), uint32] */;
    %903 = @func_1256(%902) /* ty=Tensor[(14, 5, 5), uint32] */;
    (%900, %903)
  };
  %904() /* ty=(Tensor[(350), float32], Tensor[(14, 5, 5), uint32]) */
}

def @func_191(%var_136: Tensor[(10, 11, 3), uint64], %var_137: Tensor[(10, 11, 3), uint64]) -> Tensor[(10, 11, 3), bool] {
  %905 = cast(%var_137, dtype="bool") /* ty=Tensor[(10, 11, 3), bool] */;
  %906 = shape_of(%var_136, dtype="int32") /* ty=Tensor[(3), int32] */;
  %907 = cast(%var_136, dtype="bool") /* ty=Tensor[(10, 11, 3), bool] */;
  %908 = dyn.reshape(%905, %906, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%907, %908) /* ty=Tensor[(10, 11, 3), bool] */
}

def @func_6147(%var_6145: Tensor[(350), float64]) -> (Tensor[(350), float32],) {
  @func_6144(%var_6145) /* ty=(Tensor[(350), float32],) */
}

def @func_11115() -> (Tensor[(220), float64], Tensor[(220), float64]) {
  @func_11113() /* ty=(Tensor[(220), float64], Tensor[(220), float64]) */
}

def @func_13852() -> (Tensor[(350), uint32], Tensor[(350), float32]) {
  %913 = fn () -> (Tensor[(350), uint32], Tensor[(350), float32]) {
    %909 = @func_3090() /* ty=(Tensor[(350), uint32],) */;
    %910 = @func_7368() /* ty=(Tensor[(350), float32],) */;
    %911 = %909.0;
    %912 = %910.0;
    (%911, %912)
  };
  %913() /* ty=(Tensor[(350), uint32], Tensor[(350), float32]) */
}

def @func_11542() -> (Tensor[(220), float64],) {
  %914 = @func_9754() /* ty=(Tensor[(220), float64],) */;
  %915 = %914.0;
  (%915,)
}

def @func_12972() -> (Tensor[(16, 16, 15), float32],) {
  %917 = fn () -> (Tensor[(16, 16, 15), float32],) {
    %916 = @func_5583() /* ty=Tensor[(16, 16, 15), float32] */;
    (%916,)
  };
  %917() /* ty=(Tensor[(16, 16, 15), float32],) */
}

def @func_8955(%var_8953: Tensor[(12, 3, 4), int32]) -> (Tensor[(12, 3, 4), int32],) {
  @func_8952(%var_8953) /* ty=(Tensor[(12, 3, 4), int32],) */
}

def @func_7789(%var_7787: Tensor[(5, 66), uint8], %var_7788: Tensor[(220), uint32]) -> (Tensor[(5, 66), uint16], Tensor[(1, 220), uint32], Tensor[(220), uint32]) {
  %936 = fn (%var_7757: Tensor[(5, 66), uint8], %var_7783: Tensor[(220), uint32]) -> (Tensor[(5, 66), uint16], Tensor[(1, 220), uint32], Tensor[(220), uint32]) {
    %918 = @func_7241() /* ty=(Tensor[(350), uint32], Tensor[(330), uint64], Tensor[(5, 66), uint8]) */;
    %919 = %918.2;
    %920 = cast(%var_7757, dtype="bool") /* ty=Tensor[(5, 66), bool] */;
    %921 = shape_of(%919, dtype="int32") /* ty=Tensor[(2), int32] */;
    %922 = cast(%919, dtype="bool") /* ty=Tensor[(5, 66), bool] */;
    %923 = dyn.reshape(%920, %921, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %924 = logical_and(%922, %923) /* ty=Tensor[(5, 66), bool] */;
    %925 = cast(%924, dtype="float64") /* ty=Tensor[(5, 66), float64] */;
    %926 = atan(%925) /* ty=Tensor[(5, 66), float64] */;
    %927 = cast(%var_7757, dtype="uint16") /* ty=Tensor[(5, 66), uint16] */;
    %928 = shape_of(%926, dtype="int32") /* ty=Tensor[(2), int32] */;
    %929 = cast(%926, dtype="uint16") /* ty=Tensor[(5, 66), uint16] */;
    %930 = dyn.reshape(%927, %928, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    %931 = cast(%var_7783, dtype="uint32") /* ty=Tensor[(220), uint32] */;
    %932 = reshape(%931, newshape=[1, 220]) /* ty=Tensor[(1, 220), uint32] */;
    %933 = @func_3317(%932) /* ty=(Tensor[(10, 11, 3), bool], Tensor[(10, 11, 2), bool], Tensor[(1, 220), uint32], Tensor[(16, 16, 15), int16], Tensor[(350), int64]) */;
    %934 = bitwise_or(%929, %930) /* ty=Tensor[(5, 66), uint16] */;
    %935 = %933.2;
    (%934, %935, %var_7783)
  };
  %936(%var_7787, %var_7788) /* ty=(Tensor[(5, 66), uint16], Tensor[(1, 220), uint32], Tensor[(220), uint32]) */
}

def @func_3953() -> Tensor[(350), uint32] {
  @func_3951() /* ty=Tensor[(350), uint32] */
}

def @func_10905() -> Tensor[(384), float64] {
  %938 = fn () -> Tensor[(384), float64] {
    %937 = @func_9127() /* ty=(Tensor[(384), float64],) */;
    %937.0
  };
  %938() /* ty=Tensor[(384), float64] */
}

def @func_5760() -> (Tensor[(350), float64], Tensor[(220), float64]) {
  %939 = @func_3441() /* ty=(Tensor[(220), float64],) */;
  %940 = @func_4990() /* ty=Tensor[(350), float64] */;
  %941 = %939.0;
  (%940, %941)
}

def @func_12149(%var_12143: Tensor[(55, 6), uint64]) -> (Tensor[(55, 6), float64],) {
  %942 = @func_10043() /* ty=(Tensor[(350), float32], Tensor[(55, 6), uint64], Tensor[(350), float64], Tensor[(220), float64]) */;
  %943 = %942.1;
  %944 = cast(%var_12143, dtype="float64") /* ty=Tensor[(55, 6), float64] */;
  %945 = shape_of(%943, dtype="int32") /* ty=Tensor[(2), int32] */;
  %946 = cast(%943, dtype="float64") /* ty=Tensor[(55, 6), float64] */;
  %947 = dyn.reshape(%944, %945, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %948 = maximum(%946, %947) /* ty=Tensor[(55, 6), float64] */;
  (%948,)
}

def @func_4005(%var_3992: Tensor[(9, 5, 4), float32], %var_3993: Tensor[(9, 5, 4), float32]) -> Tensor[(9, 5, 4), bool] {
  %949 = cast(%var_3993, dtype="bool") /* ty=Tensor[(9, 5, 4), bool] */;
  %950 = shape_of(%var_3992, dtype="int32") /* ty=Tensor[(3), int32] */;
  %951 = cast(%var_3992, dtype="bool") /* ty=Tensor[(9, 5, 4), bool] */;
  %952 = dyn.reshape(%949, %950, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%951, %952) /* ty=Tensor[(9, 5, 4), bool] */
}

def @func_5029() -> (Tensor[(16, 16, 15), int16],) {
  %955 = fn () -> (Tensor[(16, 16, 15), int16],) {
    %953 = @func_2760() /* ty=(Tensor[(16, 16, 15), int16],) */;
    %954 = %953.0;
    (%954,)
  };
  %955() /* ty=(Tensor[(16, 16, 15), int16],) */
}

def @func_9083() -> (Tensor[(220), float64], Tensor[(16, 16, 15), float32], Tensor[(220), float64], Tensor[(15, 9, 8), float64], Tensor[(1080), float64], Tensor[(350), float64], Tensor[(220), float64], Tensor[(350), uint32], Tensor[(350), uint8]) {
  %972 = fn () -> (Tensor[(220), float64], Tensor[(16, 16, 15), float32], Tensor[(220), float64], Tensor[(15, 9, 8), float64], Tensor[(1080), float64], Tensor[(350), float64], Tensor[(220), float64], Tensor[(350), uint32], Tensor[(350), uint8]) {
    %956 = @func_6523() /* ty=(Tensor[(220), float64],) */;
    %957 = cast(meta[relay.Constant][43] /* ty=Tensor[(1080), float64] */, dtype="float64") /* ty=Tensor[(1080), float64] */;
    %958 = cast(meta[relay.Constant][44] /* ty=Tensor[(350), float64] */, dtype="float64") /* ty=Tensor[(350), float64] */;
    %959 = reshape(%957, newshape=[15, 9, 8]) /* ty=Tensor[(15, 9, 8), float64] */;
    %960 = reshape(%958, newshape=[350]) /* ty=Tensor[(350), float64] */;
    %961 = @func_7874(%959, %960) /* ty=(Tensor[(15, 9, 8), float64], Tensor[(16, 16, 15), int16], Tensor[(350), float32], Tensor[(350), float64]) */;
    %962 = @func_6726() /* ty=(Tensor[(220), float64], Tensor[(15, 16, 9), float64]) */;
    %963 = @func_6672() /* ty=(Tensor[(350), uint32], Tensor[(350), uint8]) */;
    %964 = @func_6672() /* ty=(Tensor[(350), uint32], Tensor[(350), uint8]) */;
    %965 = %956.0;
    %966 = @func_5583() /* ty=Tensor[(16, 16, 15), float32] */;
    %967 = @func_4491() /* ty=Tensor[(220), float64] */;
    %968 = %961.0;
    %969 = %962.0;
    %970 = %963.0;
    %971 = %964.1;
    (%965, %966, %967, %968, meta[relay.Constant][43] /* ty=Tensor[(1080), float64] */, meta[relay.Constant][44] /* ty=Tensor[(350), float64] */, %969, %970, %971)
  };
  %972() /* ty=(Tensor[(220), float64], Tensor[(16, 16, 15), float32], Tensor[(220), float64], Tensor[(15, 9, 8), float64], Tensor[(1080), float64], Tensor[(350), float64], Tensor[(220), float64], Tensor[(350), uint32], Tensor[(350), uint8]) */
}

def @func_8585() -> Tensor[(350), uint8] {
  %974 = fn () -> Tensor[(350), uint8] {
    %973 = @func_5135() /* ty=(Tensor[(350), uint8],) */;
    %973.0
  };
  %974() /* ty=Tensor[(350), uint8] */
}

def @func_4403() -> Tensor[(350), uint32] {
  @func_3951() /* ty=Tensor[(350), uint32] */
}

def @func_9477() -> (Tensor[(384), float64], Tensor[(330), uint64], Tensor[(330), uint64], Tensor[(350), uint32], Tensor[(350), uint8], Tensor[(350), uint8]) {
  %975 = @func_9127() /* ty=(Tensor[(384), float64],) */;
  %976 = cast(meta[relay.Constant][45] /* ty=Tensor[(330), uint64] */, dtype="uint64") /* ty=Tensor[(330), uint64] */;
  %977 = reshape(%976, newshape=[330]) /* ty=Tensor[(330), uint64] */;
  %978 = @func_5455(%977) /* ty=(Tensor[(350), uint32], Tensor[(350), float32], Tensor[(330), uint64], Tensor[(330), uint64]) */;
  %979 = @func_5067() /* ty=(Tensor[(384), float64], Tensor[(350), uint8]) */;
  %980 = %975.0;
  %981 = %978.2;
  %982 = @func_2915() /* ty=Tensor[(350), uint32] */;
  %983 = @func_4778() /* ty=Tensor[(350), uint8] */;
  %984 = %979.1;
  (%980, %981, meta[relay.Constant][45] /* ty=Tensor[(330), uint64] */, %982, %983, %984)
}

def @func_14128() -> Tensor[(220), float64] {
  @func_7957() /* ty=Tensor[(220), float64] */
}

def @func_6782() -> (Tensor[(220), float64],) {
  %986 = fn () -> (Tensor[(220), float64],) {
    %985 = @func_5540() /* ty=Tensor[(220), float64] */;
    (%985,)
  };
  %986() /* ty=(Tensor[(220), float64],) */
}

def @func_7811() -> Tensor[(55, 6), uint64] {
  @func_7809() /* ty=Tensor[(55, 6), uint64] */
}

def @func_13023() -> (Tensor[(350), float32], Tensor[(220), float32], Tensor[(220), float32], Tensor[(16, 16, 15), int16], Tensor[(350), uint32]) {
  %996 = fn () -> (Tensor[(350), float32], Tensor[(220), float32], Tensor[(220), float32], Tensor[(16, 16, 15), int16], Tensor[(350), uint32]) {
    %987 = @func_4144() /* ty=(Tensor[(350), float32], Tensor[(14, 5, 5), uint32]) */;
    %988 = cast(meta[relay.Constant][46] /* ty=Tensor[(220), float32] */, dtype="float32") /* ty=Tensor[(220), float32] */;
    %989 = reshape(%988, newshape=[220]) /* ty=Tensor[(220), float32] */;
    %990 = @func_12952(%989) /* ty=(Tensor[(350), uint32], Tensor[(16, 16, 15), int16], Tensor[(220), float32]) */;
    %991 = @func_10507() /* ty=(Tensor[(350), uint32], Tensor[(350), uint32]) */;
    %992 = %987.0;
    %993 = %990.2;
    %994 = @func_6108() /* ty=Tensor[(16, 16, 15), int16] */;
    %995 = %991.0;
    (%992, %993, meta[relay.Constant][46] /* ty=Tensor[(220), float32] */, %994, %995)
  };
  %996() /* ty=(Tensor[(350), float32], Tensor[(220), float32], Tensor[(220), float32], Tensor[(16, 16, 15), int16], Tensor[(350), uint32]) */
}

def @func_11060() -> (Tensor[(55, 6), uint64], Tensor[(220), uint32], Tensor[(220), uint32]) {
  %997 = @func_7204() /* ty=(Tensor[(55, 6), uint64],) */;
  %998 = %997.0;
  %999 = cast(%998, dtype="uint8") /* ty=Tensor[(55, 6), uint8] */;
  %1000 = cast(meta[relay.Constant][47] /* ty=Tensor[(220), uint32] */, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %1001 = reshape(%999, newshape=[5, 66]) /* ty=Tensor[(5, 66), uint8] */;
  %1002 = reshape(%1000, newshape=[220]) /* ty=Tensor[(220), uint32] */;
  %1003 = @func_7786(%1001, %1002) /* ty=(Tensor[(5, 66), uint16], Tensor[(1, 220), uint32], Tensor[(220), uint32]) */;
  %1004 = %1003.2;
  (%998, %1004, meta[relay.Constant][47] /* ty=Tensor[(220), uint32] */)
}

def @func_3208() -> Tensor[(350), uint32] {
  @func_3206() /* ty=Tensor[(350), uint32] */
}

def @func_6809() -> Tensor[(350), float32] {
  %1005 = @func_4144() /* ty=(Tensor[(350), float32], Tensor[(14, 5, 5), uint32]) */;
  %1005.0
}

def @func_11062() -> (Tensor[(55, 6), uint64], Tensor[(220), uint32], Tensor[(220), uint32]) {
  @func_11060() /* ty=(Tensor[(55, 6), uint64], Tensor[(220), uint32], Tensor[(220), uint32]) */
}

def @func_3410() -> (Tensor[(384), float64],) {
  %1008 = fn () -> (Tensor[(384), float64],) {
    %1006 = @func_3389() /* ty=(Tensor[(350), float32], Tensor[(13, 8, 8), float64], Tensor[(384), float64], Tensor[(220), uint32]) */;
    %1007 = %1006.2;
    (%1007,)
  };
  %1008() /* ty=(Tensor[(384), float64],) */
}

def @func_5458(%var_5456: Tensor[(330), uint64]) -> (Tensor[(350), uint32], Tensor[(350), float32], Tensor[(330), uint64], Tensor[(330), uint64]) {
  @func_5455(%var_5456) /* ty=(Tensor[(350), uint32], Tensor[(350), float32], Tensor[(330), uint64], Tensor[(330), uint64]) */
}

def @func_3090() -> (Tensor[(350), uint32],) {
  %1009 = @func_2915() /* ty=Tensor[(350), uint32] */;
  (%1009,)
}

def @func_1223(%var_1221: Tensor[(16, 4, 6), float64], %var_1222: Tensor[(220), uint32]) -> (Tensor[(16, 4, 6), bool], Tensor[(330), bool], Tensor[(10, 11, 2), bool], Tensor[(220), uint32], Tensor[(10, 11, 2), bool], Tensor[(10, 11, 3), float32], Tensor[(10, 11, 3), bool]) {
  @func_1219(%var_1221, %var_1222) /* ty=(Tensor[(16, 4, 6), bool], Tensor[(330), bool], Tensor[(10, 11, 2), bool], Tensor[(220), uint32], Tensor[(10, 11, 2), bool], Tensor[(10, 11, 3), float32], Tensor[(10, 11, 3), bool]) */
}

def @func_9910() -> (Tensor[(220), uint32],) {
  %1012 = fn () -> (Tensor[(220), uint32],) {
    %1010 = @func_7568() /* ty=(Tensor[(220), uint32],) */;
    %1011 = %1010.0;
    (%1011,)
  };
  %1012() /* ty=(Tensor[(220), uint32],) */
}

def @func_4491() -> Tensor[(220), float64] {
  %1013 = @func_3441() /* ty=(Tensor[(220), float64],) */;
  %1013.0
}

def @func_8931() -> (Tensor[(350), uint8], Tensor[(350), float32]) {
  @func_8929() /* ty=(Tensor[(350), uint8], Tensor[(350), float32]) */
}

def @func_7111() -> Tensor[(350), uint32] {
  @func_7109() /* ty=Tensor[(350), uint32] */
}

def @func_9127() -> (Tensor[(384), float64],) {
  %1014 = @func_7514() /* ty=Tensor[(384), float64] */;
  (%1014,)
}

def @func_14189() -> Tensor[(220), uint32] {
  %1015 = @func_11060() /* ty=(Tensor[(55, 6), uint64], Tensor[(220), uint32], Tensor[(220), uint32]) */;
  %1015.1
}

def @func_3389() -> (Tensor[(350), float32], Tensor[(13, 8, 8), float64], Tensor[(384), float64], Tensor[(220), uint32]) {
  %1016 = @func_3090() /* ty=(Tensor[(350), uint32],) */;
  %1017 = %1016.0;
  %1018 = cast(%1017, dtype="float32") /* ty=Tensor[(350), float32] */;
  %1019 = cast(meta[relay.Constant][48] /* ty=Tensor[(384), float64] */, dtype="float64") /* ty=Tensor[(384), float64] */;
  %1020 = cast(meta[relay.Constant][49] /* ty=Tensor[(220), uint32] */, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %1021 = log2(%1018) /* ty=Tensor[(350), float32] */;
  %1022 = cast(%1021, dtype="uint32") /* ty=Tensor[(350), uint32] */;
  %1023 = reshape(%1019, newshape=[384]) /* ty=Tensor[(384), float64] */;
  %1024 = reshape(%1020, newshape=[220]) /* ty=Tensor[(220), uint32] */;
  %1025 = reshape(%1022, newshape=[350]) /* ty=Tensor[(350), uint32] */;
  %1026 = @func_3072(%1023, %1024, %1025) /* ty=(Tensor[(10, 3, 12), bool], Tensor[(10, 11, 3), float32], Tensor[(384), float64], Tensor[(13, 8, 8), float64], Tensor[(832), float64], Tensor[(14, 5, 5), uint32], Tensor[(350), uint32], Tensor[(220), float64]) */;
  %1027 = %1026.3;
  (%1021, %1027, meta[relay.Constant][48] /* ty=Tensor[(384), float64] */, meta[relay.Constant][49] /* ty=Tensor[(220), uint32] */)
}

def @func_13695() -> (Tensor[(384), float64],) {
  @func_13693() /* ty=(Tensor[(384), float64],) */
}

def @func_8892() -> Tensor[(220), float64] {
  @func_8890() /* ty=Tensor[(220), float64] */
}

def @func_6416() -> (Tensor[(350), uint32], Tensor[(330), uint64], Tensor[(220), uint32], Tensor[(55, 6), uint64]) {
  %1036 = fn () -> (Tensor[(350), uint32], Tensor[(330), uint64], Tensor[(220), uint32], Tensor[(55, 6), uint64]) {
    %1028 = @func_5934() /* ty=(Tensor[(16, 16, 15), int16], Tensor[(350), float64], Tensor[(350), uint32]) */;
    %1029 = cast(meta[relay.Constant][50] /* ty=Tensor[(220), uint32] */, dtype="uint32") /* ty=Tensor[(220), uint32] */;
    %1030 = cast(meta[relay.Constant][51] /* ty=Tensor[(55, 6), uint64] */, dtype="uint64") /* ty=Tensor[(55, 6), uint64] */;
    %1031 = reshape(%1029, newshape=[220]) /* ty=Tensor[(220), uint32] */;
    %1032 = reshape(%1030, newshape=[330]) /* ty=Tensor[(330), uint64] */;
    %1033 = @func_6000(%1031, %1032) /* ty=(Tensor[(384), float64], Tensor[(350), float32], Tensor[(14, 5, 5), float32], Tensor[(220), uint32], Tensor[(330), uint64]) */;
    %1034 = %1028.2;
    %1035 = %1033.4;
    (%1034, %1035, meta[relay.Constant][50] /* ty=Tensor[(220), uint32] */, meta[relay.Constant][51] /* ty=Tensor[(55, 6), uint64] */)
  };
  %1036() /* ty=(Tensor[(350), uint32], Tensor[(330), uint64], Tensor[(220), uint32], Tensor[(55, 6), uint64]) */
}

def @func_13117() -> (Tensor[(16, 16, 15), int16], Tensor[(350), uint8]) {
  %1037 = @func_5028() /* ty=(Tensor[(16, 16, 15), int16],) */;
  %1038 = @func_8929() /* ty=(Tensor[(350), uint8], Tensor[(350), float32]) */;
  %1039 = %1037.0;
  %1040 = %1038.0;
  (%1039, %1040)
}

def @func_6951(%var_6950: Tensor[(220), uint32]) -> (Tensor[(350), uint32], Tensor[(16, 16, 15), int16], Tensor[(220), uint32]) {
  %1048 = fn (%var_6945: Tensor[(220), uint32]) -> (Tensor[(350), uint32], Tensor[(16, 16, 15), int16], Tensor[(220), uint32]) {
    %1041 = @func_3894() /* ty=Tensor[(350), uint32] */;
    %1042 = cast(%1041, dtype="uint32") /* ty=Tensor[(350), uint32] */;
    %1043 = cast(%var_6945, dtype="uint32") /* ty=Tensor[(220), uint32] */;
    %1044 = reshape(%1042, newshape=[350]) /* ty=Tensor[(350), uint32] */;
    %1045 = reshape(%1043, newshape=[220]) /* ty=Tensor[(220), uint32] */;
    %1046 = @func_3535(%1044, %1045) /* ty=(Tensor[(350), bool], Tensor[(16, 16, 15), int16], Tensor[(220), uint32], Tensor[(330), uint64], Tensor[(5, 66), uint64]) */;
    %1047 = %1046.1;
    (%1041, %1047, %var_6945)
  };
  %1048(%var_6950) /* ty=(Tensor[(350), uint32], Tensor[(16, 16, 15), int16], Tensor[(220), uint32]) */
}

def @func_7370() -> (Tensor[(350), float32],) {
  @func_7368() /* ty=(Tensor[(350), float32],) */
}

def @func_13816() -> (Tensor[(220), float64], Tensor[(350), float64], Tensor[(220), float32], Tensor[(384), float64], Tensor[(16, 16, 15), int16], Tensor[(384), float64]) {
  %1049 = @func_9300() /* ty=(Tensor[(220), float64], Tensor[(350), float32], Tensor[(220), float64]) */;
  %1050 = %1049.0;
  %1051 = cast(%1050, dtype="float32") /* ty=Tensor[(220), float32] */;
  %1052 = reshape(%1051, newshape=[220]) /* ty=Tensor[(220), float32] */;
  %1053 = @func_12952(%1052) /* ty=(Tensor[(350), uint32], Tensor[(16, 16, 15), int16], Tensor[(220), float32]) */;
  %1054 = @func_5028() /* ty=(Tensor[(16, 16, 15), int16],) */;
  %1055 = @func_10175() /* ty=Tensor[(384), float64] */;
  %1056 = cast(%1055, dtype="float64") /* ty=Tensor[(384), float64] */;
  %1057 = %1053.2;
  %1058 = cast(%1057, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %1059 = @func_4990() /* ty=Tensor[(350), float64] */;
  %1060 = cast(%1059, dtype="uint32") /* ty=Tensor[(350), uint32] */;
  %1061 = reshape(%1056, newshape=[384]) /* ty=Tensor[(384), float64] */;
  %1062 = reshape(%1058, newshape=[220]) /* ty=Tensor[(220), uint32] */;
  %1063 = reshape(%1060, newshape=[350]) /* ty=Tensor[(350), uint32] */;
  %1064 = @func_13750(%1061, %1062, %1063) /* ty=(Tensor[(16, 16, 15), float32], Tensor[(384), float64], Tensor[(384), float64], Tensor[(220), uint32], Tensor[(350), uint32]) */;
  %1065 = %1054.0;
  %1066 = %1064.1;
  (%1050, %1059, %1057, %1055, %1065, %1066)
}

def @func_4614() -> Tensor[(220), uint32] {
  @func_4612() /* ty=Tensor[(220), uint32] */
}

def @func_12257() -> (Tensor[(350), float32], Tensor[(220), float64], Tensor[(350), bool]) {
  @func_12255() /* ty=(Tensor[(350), float32], Tensor[(220), float64], Tensor[(350), bool]) */
}

def @func_12681(%var_12679: Tensor[(55, 6), uint64]) -> (Tensor[(55, 6), uint16],) {
  @func_12678(%var_12679) /* ty=(Tensor[(55, 6), uint16],) */
}

def @func_13754(%var_13751: Tensor[(384), float64], %var_13752: Tensor[(220), uint32], %var_13753: Tensor[(350), uint32]) -> (Tensor[(16, 16, 15), float32], Tensor[(384), float64], Tensor[(384), float64], Tensor[(220), uint32], Tensor[(350), uint32]) {
  %1077 = fn (%var_13738: Tensor[(384), float64], %var_13739: Tensor[(220), uint32], %var_13740: Tensor[(350), uint32]) -> (Tensor[(16, 16, 15), float32], Tensor[(384), float64], Tensor[(384), float64], Tensor[(220), uint32], Tensor[(350), uint32]) {
    %1067 = @func_12971() /* ty=(Tensor[(16, 16, 15), float32],) */;
    %1068 = cast(%var_13738, dtype="float64") /* ty=Tensor[(384), float64] */;
    %1069 = cast(%var_13739, dtype="uint32") /* ty=Tensor[(220), uint32] */;
    %1070 = cast(%var_13740, dtype="uint32") /* ty=Tensor[(350), uint32] */;
    %1071 = reshape(%1068, newshape=[384]) /* ty=Tensor[(384), float64] */;
    %1072 = reshape(%1069, newshape=[220]) /* ty=Tensor[(220), uint32] */;
    %1073 = reshape(%1070, newshape=[350]) /* ty=Tensor[(350), uint32] */;
    %1074 = @func_3072(%1071, %1072, %1073) /* ty=(Tensor[(10, 3, 12), bool], Tensor[(10, 11, 3), float32], Tensor[(384), float64], Tensor[(13, 8, 8), float64], Tensor[(832), float64], Tensor[(14, 5, 5), uint32], Tensor[(350), uint32], Tensor[(220), float64]) */;
    %1075 = %1067.0;
    %1076 = %1074.2;
    (%1075, %1076, %var_13738, %var_13739, %var_13740)
  };
  %1077(%var_13751, %var_13752, %var_13753) /* ty=(Tensor[(16, 16, 15), float32], Tensor[(384), float64], Tensor[(384), float64], Tensor[(220), uint32], Tensor[(350), uint32]) */
}

def @func_3449() -> Tensor[(350), uint32] {
  %1079 = fn () -> Tensor[(350), uint32] {
    %1078 = @func_3090() /* ty=(Tensor[(350), uint32],) */;
    %1078.0
  };
  %1079() /* ty=Tensor[(350), uint32] */
}

def @func_4754(%var_4752: Tensor[(3840), int16]) -> (Tensor[(350), uint32], Tensor[(16, 16, 15), uint8], Tensor[(3840), int16]) {
  @func_4751(%var_4752) /* ty=(Tensor[(350), uint32], Tensor[(16, 16, 15), uint8], Tensor[(3840), int16]) */
}

def @func_8033() -> (Tensor[(220), uint32], Tensor[(350), uint32]) {
  %1080 = @func_5774() /* ty=(Tensor[(220), uint32],) */;
  %1081 = %1080.0;
  %1082 = @func_3206() /* ty=Tensor[(350), uint32] */;
  (%1081, %1082)
}

def @func_538(%var_536: Tensor[(10, 11, 2), uint32], %var_537: Tensor[(10, 11, 2), uint32]) -> (Tensor[(10, 11, 2), bool],) {
  @func_534(%var_536, %var_537) /* ty=(Tensor[(10, 11, 2), bool],) */
}

def @func_5455(%var_5438: Tensor[(330), uint64]) -> (Tensor[(350), uint32], Tensor[(350), float32], Tensor[(330), uint64], Tensor[(330), uint64]) {
  %1083 = @func_3389() /* ty=(Tensor[(350), float32], Tensor[(13, 8, 8), float64], Tensor[(384), float64], Tensor[(220), uint32]) */;
  %1084 = cast(%var_5438, dtype="uint64") /* ty=Tensor[(330), uint64] */;
  %1085 = reshape(%1084, newshape=[330]) /* ty=Tensor[(330), uint64] */;
  %1086 = @func_950(%1085) /* ty=(Tensor[(1, 4, 3), float32], Tensor[(10, 11, 3), bool], Tensor[(330), uint64]) */;
  %1087 = @func_4403() /* ty=Tensor[(350), uint32] */;
  %1088 = %1083.0;
  %1089 = %1086.2;
  (%1087, %1088, %1089, %var_5438)
}

def @func_6004(%var_6002: Tensor[(220), uint32], %var_6003: Tensor[(330), uint64]) -> (Tensor[(384), float64], Tensor[(350), float32], Tensor[(14, 5, 5), float32], Tensor[(220), uint32], Tensor[(330), uint64]) {
  @func_6000(%var_6002, %var_6003) /* ty=(Tensor[(384), float64], Tensor[(350), float32], Tensor[(14, 5, 5), float32], Tensor[(220), uint32], Tensor[(330), uint64]) */
}

def @func_11587() -> (Tensor[(16, 16, 15), int16], Tensor[(350), uint32], Tensor[(350), uint8], Tensor[(220), float64]) {
  %1098 = fn () -> (Tensor[(16, 16, 15), int16], Tensor[(350), uint32], Tensor[(350), uint8], Tensor[(220), float64]) {
    %1090 = @func_5028() /* ty=(Tensor[(16, 16, 15), int16],) */;
    %1091 = @func_6511() /* ty=(Tensor[(350), uint32],) */;
    %1092 = @func_8993() /* ty=(Tensor[(350), uint8],) */;
    %1093 = @func_8202() /* ty=(Tensor[(220), float64], Tensor[(350), uint8], Tensor[(3, 8, 14), float64], Tensor[(336), int64]) */;
    %1094 = %1090.0;
    %1095 = %1091.0;
    %1096 = %1092.0;
    %1097 = %1093.0;
    (%1094, %1095, %1096, %1097)
  };
  %1098() /* ty=(Tensor[(16, 16, 15), int16], Tensor[(350), uint32], Tensor[(350), uint8], Tensor[(220), float64]) */
}

def @func_13931() -> Tensor[(220), uint32] {
  @func_13929() /* ty=Tensor[(220), uint32] */
}

def @func_8468() -> (Tensor[(350), uint8], Tensor[(350), uint32]) {
  %1103 = fn () -> (Tensor[(350), uint8], Tensor[(350), uint32]) {
    %1099 = @func_5135() /* ty=(Tensor[(350), uint8],) */;
    %1100 = @func_5793() /* ty=(Tensor[(350), uint32],) */;
    %1101 = %1099.0;
    %1102 = %1100.0;
    (%1101, %1102)
  };
  %1103() /* ty=(Tensor[(350), uint8], Tensor[(350), uint32]) */
}

def @func_12826() -> (Tensor[(350), uint32], Tensor[(350), uint8], Tensor[(350), uint32], Tensor[(1, 4, 3), float32], Tensor[(330), uint64], Tensor[(350), uint8]) {
  %1104 = @func_11378() /* ty=(Tensor[(350), uint32],) */;
  %1105 = @func_8202() /* ty=(Tensor[(220), float64], Tensor[(350), uint8], Tensor[(3, 8, 14), float64], Tensor[(336), int64]) */;
  %1106 = cast(meta[relay.Constant][52] /* ty=Tensor[(330), uint64] */, dtype="uint64") /* ty=Tensor[(330), uint64] */;
  %1107 = reshape(%1106, newshape=[330]) /* ty=Tensor[(330), uint64] */;
  %1108 = @func_950(%1107) /* ty=(Tensor[(1, 4, 3), float32], Tensor[(10, 11, 3), bool], Tensor[(330), uint64]) */;
  %1109 = @func_6672() /* ty=(Tensor[(350), uint32], Tensor[(350), uint8]) */;
  %1110 = %1104.0;
  %1111 = %1105.1;
  %1112 = @func_9522() /* ty=Tensor[(350), uint32] */;
  %1113 = %1108.0;
  %1114 = %1109.1;
  (%1110, %1111, %1112, %1113, meta[relay.Constant][52] /* ty=Tensor[(330), uint64] */, %1114)
}

def @func_6359() -> Tensor[(220), float32] {
  @func_6357() /* ty=Tensor[(220), float32] */
}

def @func_7504() -> (Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(220), uint32], Tensor[(16, 16, 15), int16], Tensor[(220), float64]) {
  %1126 = fn () -> (Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(220), uint32], Tensor[(16, 16, 15), int16], Tensor[(220), float64]) {
    %1115 = @func_5934() /* ty=(Tensor[(16, 16, 15), int16], Tensor[(350), float64], Tensor[(350), uint32]) */;
    %1116 = @func_3389() /* ty=(Tensor[(350), float32], Tensor[(13, 8, 8), float64], Tensor[(384), float64], Tensor[(220), uint32]) */;
    %1117 = @func_5965() /* ty=(Tensor[(16, 16, 15), int16],) */;
    %1118 = @func_7001() /* ty=(Tensor[(220), float64],) */;
    %1119 = %1118.0;
    %1120 = cast(%1119, dtype="float64") /* ty=Tensor[(220), float64] */;
    %1121 = %1115.2;
    %1122 = @func_2915() /* ty=Tensor[(350), uint32] */;
    %1123 = %1116.3;
    %1124 = %1117.0;
    %1125 = sin(%1120) /* ty=Tensor[(220), float64] */;
    (%1121, %1122, %1123, %1124, %1125)
  };
  %1126() /* ty=(Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(220), uint32], Tensor[(16, 16, 15), int16], Tensor[(220), float64]) */
}

def @func_6604() -> (Tensor[(350), float32], Tensor[(350), uint32]) {
  %1127 = @func_6379() /* ty=(Tensor[(350), float32], Tensor[(16, 16, 15), int16]) */;
  %1128 = %1127.0;
  %1129 = @func_3951() /* ty=Tensor[(350), uint32] */;
  (%1128, %1129)
}

def @func_12731() -> (Tensor[(350), uint32], Tensor[(330), uint64], Tensor[(1, 3840), int16], Tensor[(55, 6), uint16], Tensor[(220), bool], Tensor[(220), float64]) {
  @func_12729() /* ty=(Tensor[(350), uint32], Tensor[(330), uint64], Tensor[(1, 3840), int16], Tensor[(55, 6), uint16], Tensor[(220), bool], Tensor[(220), float64]) */
}

def @func_6811() -> Tensor[(350), float32] {
  @func_6809() /* ty=Tensor[(350), float32] */
}

def @func_3231() -> Tensor[(350), uint32] {
  @func_3229() /* ty=Tensor[(350), uint32] */
}

def @func_6446() -> Tensor[(220), float64] {
  @func_6444() /* ty=Tensor[(220), float64] */
}

def @func_9194(%var_9192: Tensor[(330), uint64]) -> (Tensor[(220), float64], Tensor[(350), float32], Tensor[(330), uint64]) {
  @func_9191(%var_9192) /* ty=(Tensor[(220), float64], Tensor[(350), float32], Tensor[(330), uint64]) */
}

def @func_6074() -> (Tensor[(384), float64], Tensor[(220), float64]) {
  %1132 = fn () -> (Tensor[(384), float64], Tensor[(220), float64]) {
    %1130 = @func_5859() /* ty=Tensor[(384), float64] */;
    %1131 = @func_5540() /* ty=Tensor[(220), float64] */;
    (%1130, %1131)
  };
  %1132() /* ty=(Tensor[(384), float64], Tensor[(220), float64]) */
}

def @func_4405() -> Tensor[(350), uint32] {
  @func_4403() /* ty=Tensor[(350), uint32] */
}

def @func_14671() -> Tensor[(350), float32] {
  %1133 = fn () -> Tensor[(350), float32] {
    @func_9231() /* ty=Tensor[(350), float32] */
  };
  %1133() /* ty=Tensor[(350), float32] */
}

def @func_7243() -> (Tensor[(350), uint32], Tensor[(330), uint64], Tensor[(5, 66), uint8]) {
  @func_7241() /* ty=(Tensor[(350), uint32], Tensor[(330), uint64], Tensor[(5, 66), uint8]) */
}

def @func_10982() -> Tensor[(350), float64] {
  %1135 = fn () -> Tensor[(350), float64] {
    %1134 = @func_5760() /* ty=(Tensor[(350), float64], Tensor[(220), float64]) */;
    %1134.0
  };
  %1135() /* ty=Tensor[(350), float64] */
}

def @func_4990() -> Tensor[(350), float64] {
  %1136 = @func_3090() /* ty=(Tensor[(350), uint32],) */;
  %1137 = %1136.0;
  %1138 = cast(%1137, dtype="float64") /* ty=Tensor[(350), float64] */;
  asin(%1138) /* ty=Tensor[(350), float64] */
}

def @func_10815() -> (Tensor[(220), float64], Tensor[(220), uint32]) {
  @func_10813() /* ty=(Tensor[(220), float64], Tensor[(220), uint32]) */
}

def @func_10327(%var_10325: Tensor[(220), float32]) -> (Tensor[(220), float32], Tensor[(350), uint32], Tensor[(350), uint32]) {
  @func_10324(%var_10325) /* ty=(Tensor[(220), float32], Tensor[(350), uint32], Tensor[(350), uint32]) */
}

def @func_13955() -> Tensor[(350), uint32] {
  @func_13953() /* ty=Tensor[(350), uint32] */
}

def @main(%var_14797: Tensor[(330), uint64], %var_14800: Tensor[(600, 4), float64], %var_14848: Tensor[(8640), float64]) -> (Tensor[(350), uint32], Tensor[(350), uint32], Tensor[(384), float64], Tensor[(5, 44), uint32], Tensor[(330), uint64], Tensor[(330), uint64], Tensor[(220), float64], Tensor[(8640), float64], Tensor[(600, 4), float64], Tensor[(350), uint32], Tensor[(384), float64], Tensor[(600, 4), float64]) {
  %1139 = @func_6674() /* ty=(Tensor[(350), uint32], Tensor[(350), uint8]) */;
  %1140 = @func_4039() /* ty=(Tensor[(350), uint32], Tensor[(350), uint32]) */;
  %1141 = cast(meta[relay.Constant][53] /* ty=Tensor[(5, 44), uint32] */, dtype="uint32") /* ty=Tensor[(5, 44), uint32] */;
  %1142 = cast(%var_14797, dtype="uint64") /* ty=Tensor[(330), uint64] */;
  %1143 = reshape(%1141, newshape=[220]) /* ty=Tensor[(220), uint32] */;
  %1144 = reshape(%1142, newshape=[330]) /* ty=Tensor[(330), uint64] */;
  %1145 = @func_6004(%1143, %1144) /* ty=(Tensor[(384), float64], Tensor[(350), float32], Tensor[(14, 5, 5), float32], Tensor[(220), uint32], Tensor[(330), uint64]) */;
  %1146 = cast(meta[relay.Constant][53] /* ty=Tensor[(5, 44), uint32] */, dtype="uint32") /* ty=Tensor[(5, 44), uint32] */;
  %1147 = cast(%var_14797, dtype="uint64") /* ty=Tensor[(330), uint64] */;
  %1148 = reshape(%1146, newshape=[220]) /* ty=Tensor[(220), uint32] */;
  %1149 = reshape(%1147, newshape=[330]) /* ty=Tensor[(330), uint64] */;
  %1150 = @func_6004(%1148, %1149) /* ty=(Tensor[(384), float64], Tensor[(350), float32], Tensor[(14, 5, 5), float32], Tensor[(220), uint32], Tensor[(330), uint64]) */;
  %1151 = @func_6672() /* ty=(Tensor[(350), uint32], Tensor[(350), uint8]) */;
  %1152 = %1151.0;
  %1153 = cast(%1152, dtype="float64") /* ty=Tensor[(350), float64] */;
  %1154 = cast(%var_14848, dtype="float64") /* ty=Tensor[(8640), float64] */;
  %1155 = reshape(%1153, newshape=[350]) /* ty=Tensor[(350), float64] */;
  %1156 = reshape(%1154, newshape=[8, 1080]) /* ty=Tensor[(8, 1080), float64] */;
  %1157 = @func_9884(%1155, %1156) /* ty=(Tensor[(220), float64], Tensor[(220), float64], Tensor[(350), float32], Tensor[(350), float64], Tensor[(8, 1080), uint64]) */;
  %1158 = cast(%var_14800, dtype="float64") /* ty=Tensor[(600, 4), float64] */;
  %1159 = reshape(%1158, newshape=[16, 10, 15]) /* ty=Tensor[(16, 10, 15), float64] */;
  %1160 = @func_11665(%1159) /* ty=(Tensor[(16, 10, 15), float64],) */;
  %1161 = %1160.0;
  %1162 = cast(%1161, dtype="int16") /* ty=Tensor[(16, 10, 15), int16] */;
  %1163 = shape_of(%var_14800, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1164 = cast(%var_14800, dtype="int16") /* ty=Tensor[(600, 4), int16] */;
  %1165 = dyn.reshape(%1162, %1163, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %1166 = right_shift(%1164, %1165) /* ty=Tensor[(600, 4), int16] */;
  %1167 = cast(%1166, dtype="float64") /* ty=Tensor[(600, 4), float64] */;
  %1168 = log(%1167) /* ty=Tensor[(600, 4), float64] */;
  %1169 = cast(%1168, dtype="float64") /* ty=Tensor[(600, 4), float64] */;
  %1170 = atanh(%1169) /* ty=Tensor[(600, 4), float64] */;
  %1171 = cast(%1166, dtype="int16") /* ty=Tensor[(600, 4), int16] */;
  %1172 = shape_of(%1170, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1173 = cast(%1170, dtype="int16") /* ty=Tensor[(600, 4), int16] */;
  %1174 = dyn.reshape(%1171, %1172, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %1175 = add(%1173, %1174) /* ty=Tensor[(600, 4), int16] */;
  %1176 = cast(%1175, dtype="float32") /* ty=Tensor[(600, 4), float32] */;
  %1177 = acos(%1176) /* ty=Tensor[(600, 4), float32] */;
  %1178 = cast(%1170, dtype="float64") /* ty=Tensor[(600, 4), float64] */;
  %1179 = shape_of(%1177, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1180 = cast(%1177, dtype="float64") /* ty=Tensor[(600, 4), float64] */;
  %1181 = dyn.reshape(%1178, %1179, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %1182 = @func_11379() /* ty=(Tensor[(350), uint32],) */;
  %1183 = cast(%1177, dtype="float64") /* ty=Tensor[(600, 4), float64] */;
  %1184 = %1139.0;
  %1185 = %1140.1;
  %1186 = %1145.0;
  %1187 = %1150.4;
  %1188 = %1157.1;
  %1189 = power(%1180, %1181) /* ty=Tensor[(600, 4), float64] */;
  %1190 = %1182.0;
  %1191 = @func_5859() /* ty=Tensor[(384), float64] */;
  %1192 = cos(%1183) /* ty=Tensor[(600, 4), float64] */;
  (%1184, %1185, %1186, meta[relay.Constant][53] /* ty=Tensor[(5, 44), uint32] */, %var_14797, %1187, %1188, %var_14848, %1189, %1190, %1191, %1192)
}

def @func_1550(%var_1548: Tensor[(1, 16, 5), float64], %var_1549: Tensor[(16, 16, 5), float64]) -> (Tensor[(16, 16, 5), float64], Tensor[(14, 5, 5), uint32], Tensor[(1, 350), uint32], Tensor[(14, 5, 5), uint32], Tensor[(10, 11, 2), bool], Tensor[(220), uint32], Tensor[(10, 11, 3), bool], Tensor[(330), uint64]) {
  @func_1546(%var_1548, %var_1549) /* ty=(Tensor[(16, 16, 5), float64], Tensor[(14, 5, 5), uint32], Tensor[(1, 350), uint32], Tensor[(14, 5, 5), uint32], Tensor[(10, 11, 2), bool], Tensor[(220), uint32], Tensor[(10, 11, 3), bool], Tensor[(330), uint64]) */
}

def @func_3668() -> Tensor[(350), uint32] {
  %1193 = @func_3090() /* ty=(Tensor[(350), uint32],) */;
  %1193.0
}

def @func_4351(%var_4350: Tensor[(5, 44), int32]) -> (Tensor[(350), uint32], Tensor[(350), bool], Tensor[(350), uint32], Tensor[(5, 44), bool], Tensor[(5, 44), int16]) {
  %1217 = fn (%var_4341: Tensor[(5, 44), int32]) -> (Tensor[(350), uint32], Tensor[(350), bool], Tensor[(350), uint32], Tensor[(5, 44), bool], Tensor[(5, 44), int16]) {
    %1194 = @func_3951() /* ty=Tensor[(350), uint32] */;
    %1195 = cast(%1194, dtype="uint32") /* ty=Tensor[(350), uint32] */;
    %1196 = cast(meta[relay.Constant][54] /* ty=Tensor[(5, 44), uint32] */, dtype="uint32") /* ty=Tensor[(5, 44), uint32] */;
    %1197 = reshape(%1195, newshape=[350]) /* ty=Tensor[(350), uint32] */;
    %1198 = reshape(%1196, newshape=[220]) /* ty=Tensor[(220), uint32] */;
    %1199 = @func_3535(%1197, %1198) /* ty=(Tensor[(350), bool], Tensor[(16, 16, 15), int16], Tensor[(220), uint32], Tensor[(330), uint64], Tensor[(5, 66), uint64]) */;
    %1200 = cast(meta[relay.Constant][55] /* ty=Tensor[(5, 44), uint32] */, dtype="bool") /* ty=Tensor[(5, 44), bool] */;
    %1201 = shape_of(meta[relay.Constant][54] /* ty=Tensor[(5, 44), uint32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1202 = cast(meta[relay.Constant][54] /* ty=Tensor[(5, 44), uint32] */, dtype="bool") /* ty=Tensor[(5, 44), bool] */;
    %1203 = dyn.reshape(%1200, %1201, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %1204 = cast(meta[relay.Constant][55] /* ty=Tensor[(5, 44), uint32] */, dtype="int32") /* ty=Tensor[(5, 44), int32] */;
    %1205 = shape_of(meta[relay.Constant][54] /* ty=Tensor[(5, 44), uint32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1206 = cast(meta[relay.Constant][54] /* ty=Tensor[(5, 44), uint32] */, dtype="int32") /* ty=Tensor[(5, 44), int32] */;
    %1207 = dyn.reshape(%1204, %1205, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
    %1208 = right_shift(%1206, %1207) /* ty=Tensor[(5, 44), int32] */;
    %1209 = cast(%var_4341, dtype="int16") /* ty=Tensor[(5, 44), int16] */;
    %1210 = shape_of(%1208, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1211 = cast(%1208, dtype="int16") /* ty=Tensor[(5, 44), int16] */;
    %1212 = dyn.reshape(%1209, %1210, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %1213 = %1199.0;
    %1214 = @func_3448() /* ty=Tensor[(350), uint32] */;
    %1215 = less(%1202, %1203) /* ty=Tensor[(5, 44), bool] */;
    %1216 = maximum(%1211, %1212) /* ty=Tensor[(5, 44), int16] */;
    (%1194, %1213, %1214, %1215, %1216)
  };
  %1217(%var_4350) /* ty=(Tensor[(350), uint32], Tensor[(350), bool], Tensor[(350), uint32], Tensor[(5, 44), bool], Tensor[(5, 44), int16]) */
}

def @func_5935() -> (Tensor[(16, 16, 15), int16], Tensor[(350), float64], Tensor[(350), uint32]) {
  %1223 = fn () -> (Tensor[(16, 16, 15), int16], Tensor[(350), float64], Tensor[(350), uint32]) {
    %1218 = @func_5028() /* ty=(Tensor[(16, 16, 15), int16],) */;
    %1219 = @func_5760() /* ty=(Tensor[(350), float64], Tensor[(220), float64]) */;
    %1220 = %1218.0;
    %1221 = %1219.0;
    %1222 = @func_3894() /* ty=Tensor[(350), uint32] */;
    (%1220, %1221, %1222)
  };
  %1223() /* ty=(Tensor[(16, 16, 15), int16], Tensor[(350), float64], Tensor[(350), uint32]) */
}

def @func_8630(%var_8628: Tensor[(180), bool]) -> (Tensor[(220), uint32], Tensor[(350), float64], Tensor[(6, 30), float32], Tensor[(180), bool]) {
  @func_8627(%var_8628) /* ty=(Tensor[(220), uint32], Tensor[(350), float64], Tensor[(6, 30), float32], Tensor[(180), bool]) */
}

def @func_6110() -> Tensor[(16, 16, 15), int16] {
  @func_6108() /* ty=Tensor[(16, 16, 15), int16] */
}

def @func_9734(%var_9732: Tensor[(4, 5, 5), int16], %var_9733: Tensor[(220), uint32]) -> (Tensor[(4, 5, 5), int16], Tensor[(350), uint32], Tensor[(350), int64], Tensor[(220), uint32], Tensor[(384), float64]) {
  @func_9730(%var_9732, %var_9733) /* ty=(Tensor[(4, 5, 5), int16], Tensor[(350), uint32], Tensor[(350), int64], Tensor[(220), uint32], Tensor[(384), float64]) */
}

def @func_13185() -> (Tensor[(384), float64], Tensor[(350), uint32], Tensor[(384), float64]) {
  %1229 = fn () -> (Tensor[(384), float64], Tensor[(350), uint32], Tensor[(384), float64]) {
    %1224 = @func_11760() /* ty=(Tensor[(384), float64], Tensor[(384), float64]) */;
    %1225 = @func_8695() /* ty=(Tensor[(350), uint32], Tensor[(350), uint8]) */;
    %1226 = %1224.0;
    %1227 = %1225.0;
    %1228 = @func_5859() /* ty=Tensor[(384), float64] */;
    (%1226, %1227, %1228)
  };
  %1229() /* ty=(Tensor[(384), float64], Tensor[(350), uint32], Tensor[(384), float64]) */
}

def @func_7664() -> (Tensor[(220), float32],) {
  %1230 = @func_4934() /* ty=Tensor[(220), float32] */;
  (%1230,)
}

def @func_6875(%var_6865: uint16, %var_6866: Tensor[(9, 1, 3), uint16]) -> Tensor[(9, 1, 3), uint16] {
  %1231 = cast(%var_6865, dtype="uint16") /* ty=uint16 */;
  %1232 = cast(%var_6866, dtype="uint16") /* ty=Tensor[(9, 1, 3), uint16] */;
  multiply(%1231, %1232) /* ty=Tensor[(9, 1, 3), uint16] */
}

def @func_8345(%var_8344: Tensor[(220), float64]) -> (Tensor[(384), float64], Tensor[(350), uint32], Tensor[(220), bool], Tensor[(14, 5, 5), float32], Tensor[(330), uint64]) {
  %1251 = fn (%var_8312: Tensor[(220), float64]) -> (Tensor[(384), float64], Tensor[(350), uint32], Tensor[(220), bool], Tensor[(14, 5, 5), float32], Tensor[(330), uint64]) {
    %1233 = cast(%var_8312, dtype="float64") /* ty=Tensor[(220), float64] */;
    %1234 = reshape(%1233, newshape=[220]) /* ty=Tensor[(220), float64] */;
    %1235 = @func_7173(%1234) /* ty=(Tensor[(220), uint64], Tensor[(350), uint32], Tensor[(13, 8, 8), float64], Tensor[(832), float64]) */;
    %1236 = @func_7001() /* ty=(Tensor[(220), float64],) */;
    %1237 = %1236.0;
    %1238 = cast(%1237, dtype="bool") /* ty=Tensor[(220), bool] */;
    %1239 = shape_of(%var_8312, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1240 = cast(%var_8312, dtype="bool") /* ty=Tensor[(220), bool] */;
    %1241 = dyn.reshape(%1238, %1239, newshape=[]) /* ty=Tensor[(?), bool] */;
    %1242 = cast(%var_8312, dtype="uint32") /* ty=Tensor[(220), uint32] */;
    %1243 = cast(meta[relay.Constant][56] /* ty=Tensor[(330), uint64] */, dtype="uint64") /* ty=Tensor[(330), uint64] */;
    %1244 = reshape(%1242, newshape=[220]) /* ty=Tensor[(220), uint32] */;
    %1245 = reshape(%1243, newshape=[330]) /* ty=Tensor[(330), uint64] */;
    %1246 = @func_6000(%1244, %1245) /* ty=(Tensor[(384), float64], Tensor[(350), float32], Tensor[(14, 5, 5), float32], Tensor[(220), uint32], Tensor[(330), uint64]) */;
    %1247 = @func_7514() /* ty=Tensor[(384), float64] */;
    %1248 = %1235.1;
    %1249 = logical_or(%1240, %1241) /* ty=Tensor[(220), bool] */;
    %1250 = %1246.2;
    (%1247, %1248, %1249, %1250, meta[relay.Constant][56] /* ty=Tensor[(330), uint64] */)
  };
  %1251(%var_8344) /* ty=(Tensor[(384), float64], Tensor[(350), uint32], Tensor[(220), bool], Tensor[(14, 5, 5), float32], Tensor[(330), uint64]) */
}

def @func_12551() -> (Tensor[(350), uint32],) {
  %1252 = @func_10419() /* ty=(Tensor[(350), uint32], Tensor[(350), uint32]) */;
  %1253 = %1252.1;
  (%1253,)
}

def @func_8548(%var_8546: Tensor[(180), float32]) -> (Tensor[(350), float64], Tensor[(350), uint32], Tensor[(9, 5, 4), bool], Tensor[(180), float32]) {
  %1254 = @func_5934() /* ty=(Tensor[(16, 16, 15), int16], Tensor[(350), float64], Tensor[(350), uint32]) */;
  %1255 = @func_3467() /* ty=(Tensor[(350), uint32],) */;
  %1256 = cast(%var_8546, dtype="float32") /* ty=Tensor[(180), float32] */;
  %1257 = cast(%var_8546, dtype="float32") /* ty=Tensor[(180), float32] */;
  %1258 = reshape(%1256, newshape=[9, 5, 4]) /* ty=Tensor[(9, 5, 4), float32] */;
  %1259 = reshape(%1257, newshape=[9, 5, 4]) /* ty=Tensor[(9, 5, 4), float32] */;
  %1260 = %1254.1;
  %1261 = %1255.0;
  %1262 = @func_4005(%1258, %1259) /* ty=Tensor[(9, 5, 4), bool] */;
  (%1260, %1261, %1262, %var_8546)
}

def @func_2328(%var_2324: Tensor[(10, 3, 1), uint8], %var_2325: Tensor[(10, 3, 1), uint8], %var_2326: Tensor[(384), float64], %var_2327: Tensor[(350), uint32]) -> (Tensor[(10, 3, ?), uint8], Tensor[(10, 11, 2), bool], Tensor[(384), float64], Tensor[(14, 5, 5), uint32], Tensor[(350), uint32], Tensor[(10, 3, 12), bool], Tensor[(10, 11, 3), bool], Tensor[(165, 2), uint64], Tensor[(220), uint32], Tensor[(10, 3, 220), float32], Tensor[(10, 11, 2), bool]) {
  @func_2322(%var_2324, %var_2325, %var_2326, %var_2327) /* ty=(Tensor[(10, 3, ?), uint8], Tensor[(10, 11, 2), bool], Tensor[(384), float64], Tensor[(14, 5, 5), uint32], Tensor[(350), uint32], Tensor[(10, 3, 12), bool], Tensor[(10, 11, 3), bool], Tensor[(165, 2), uint64], Tensor[(220), uint32], Tensor[(10, 3, 220), float32], Tensor[(10, 11, 2), bool]) */
}

def @func_11113() -> (Tensor[(220), float64], Tensor[(220), float64]) {
  %1263 = @func_9082() /* ty=(Tensor[(220), float64], Tensor[(16, 16, 15), float32], Tensor[(220), float64], Tensor[(15, 9, 8), float64], Tensor[(1080), float64], Tensor[(350), float64], Tensor[(220), float64], Tensor[(350), uint32], Tensor[(350), uint8]) */;
  %1264 = @func_9300() /* ty=(Tensor[(220), float64], Tensor[(350), float32], Tensor[(220), float64]) */;
  %1265 = %1263.2;
  %1266 = %1264.2;
  (%1265, %1266)
}

def @func_12553() -> (Tensor[(350), uint32],) {
  @func_12551() /* ty=(Tensor[(350), uint32],) */
}

def @func_8441() -> (Tensor[(16, 16, 15), int16], Tensor[(350), uint8], Tensor[(350), uint8]) {
  %1273 = fn () -> (Tensor[(16, 16, 15), int16], Tensor[(350), uint8], Tensor[(350), uint8]) {
    %1267 = @func_8125() /* ty=(Tensor[(16, 16, 15), int16],) */;
    %1268 = @func_5337() /* ty=(Tensor[(350), uint8], Tensor[(384), float64]) */;
    %1269 = @func_5067() /* ty=(Tensor[(384), float64], Tensor[(350), uint8]) */;
    %1270 = %1267.0;
    %1271 = %1268.0;
    %1272 = %1269.1;
    (%1270, %1271, %1272)
  };
  %1273() /* ty=(Tensor[(16, 16, 15), int16], Tensor[(350), uint8], Tensor[(350), uint8]) */
}

def @func_6511() -> (Tensor[(350), uint32],) {
  %1274 = @func_3894() /* ty=Tensor[(350), uint32] */;
  (%1274,)
}

def @func_11762() -> (Tensor[(384), float64], Tensor[(384), float64]) {
  @func_11760() /* ty=(Tensor[(384), float64], Tensor[(384), float64]) */
}

def @func_8639() -> Tensor[(350), uint32] {
  @func_8637() /* ty=Tensor[(350), uint32] */
}

def @func_952(%var_951: Tensor[(330), uint64]) -> (Tensor[(1, 4, 3), float32], Tensor[(10, 11, 3), bool], Tensor[(330), uint64]) {
  %1282 = fn (%var_938: Tensor[(330), uint64]) -> (Tensor[(1, 4, 3), float32], Tensor[(10, 11, 3), bool], Tensor[(330), uint64]) {
    %1275 = cast(meta[relay.Constant][57] /* ty=Tensor[(1, 4, 3), float32] */, dtype="float32") /* ty=Tensor[(1, 4, 3), float32] */;
    %1276 = cast(%var_938, dtype="uint64") /* ty=Tensor[(330), uint64] */;
    %1277 = cast(%var_938, dtype="uint64") /* ty=Tensor[(330), uint64] */;
    %1278 = reshape(%1276, newshape=[10, 11, 3]) /* ty=Tensor[(10, 11, 3), uint64] */;
    %1279 = reshape(%1277, newshape=[10, 11, 3]) /* ty=Tensor[(10, 11, 3), uint64] */;
    %1280 = sin(%1275) /* ty=Tensor[(1, 4, 3), float32] */;
    %1281 = @func_191(%1278, %1279) /* ty=Tensor[(10, 11, 3), bool] */;
    (%1280, %1281, %var_938)
  };
  %1282(%var_951) /* ty=(Tensor[(1, 4, 3), float32], Tensor[(10, 11, 3), bool], Tensor[(330), uint64]) */
}

def @func_8862() -> Tensor[(220), float32] {
  %1283 = @func_7664() /* ty=(Tensor[(220), float32],) */;
  %1283.0
}

def @func_3317(%var_3265: Tensor[(1, 220), uint32]) -> (Tensor[(10, 11, 3), bool], Tensor[(10, 11, 2), bool], Tensor[(1, 220), uint32], Tensor[(16, 16, 15), int16], Tensor[(350), int64]) {
  %1284 = @func_2840() /* ty=(Tensor[(16, 16, 15), int16], Tensor[(10, 11, 3), bool], Tensor[(330), uint64], Tensor[(16, 16, 15), int16], Tensor[(10, 3, 12), bool], Tensor[(10, 3), uint8], Tensor[(384), float64], Tensor[(350), uint32]) */;
  %1285 = cast(%var_3265, dtype="uint32") /* ty=Tensor[(1, 220), uint32] */;
  %1286 = cast(%var_3265, dtype="uint32") /* ty=Tensor[(1, 220), uint32] */;
  %1287 = reshape(%1285, newshape=[10, 11, 2]) /* ty=Tensor[(10, 11, 2), uint32] */;
  %1288 = reshape(%1286, newshape=[10, 11, 2]) /* ty=Tensor[(10, 11, 2), uint32] */;
  %1289 = @func_534(%1287, %1288) /* ty=(Tensor[(10, 11, 2), bool],) */;
  %1290 = @func_2840() /* ty=(Tensor[(16, 16, 15), int16], Tensor[(10, 11, 3), bool], Tensor[(330), uint64], Tensor[(16, 16, 15), int16], Tensor[(10, 3, 12), bool], Tensor[(10, 3), uint8], Tensor[(384), float64], Tensor[(350), uint32]) */;
  %1291 = @func_2915() /* ty=Tensor[(350), uint32] */;
  %1292 = cast(%1291, dtype="float32") /* ty=Tensor[(350), float32] */;
  %1293 = acos(%1292) /* ty=Tensor[(350), float32] */;
  %1294 = cast(%1291, dtype="int64") /* ty=Tensor[(350), int64] */;
  %1295 = shape_of(%1293, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1296 = cast(%1293, dtype="int64") /* ty=Tensor[(350), int64] */;
  %1297 = dyn.reshape(%1294, %1295, newshape=[]) /* ty=Tensor[(?), int64] */;
  %1298 = %1284.1;
  %1299 = %1289.0;
  %1300 = %1290.0;
  %1301 = subtract(%1296, %1297) /* ty=Tensor[(350), int64] */;
  (%1298, %1299, %var_3265, %1300, %1301)
}

def @func_10094() -> (Tensor[(350), uint8],) {
  %1302 = @func_9082() /* ty=(Tensor[(220), float64], Tensor[(16, 16, 15), float32], Tensor[(220), float64], Tensor[(15, 9, 8), float64], Tensor[(1080), float64], Tensor[(350), float64], Tensor[(220), float64], Tensor[(350), uint32], Tensor[(350), uint8]) */;
  %1303 = %1302.8;
  (%1303,)
}

def @func_13040() -> (Tensor[(350), uint32],) {
  %1306 = fn () -> (Tensor[(350), uint32],) {
    %1304 = @func_5934() /* ty=(Tensor[(16, 16, 15), int16], Tensor[(350), float64], Tensor[(350), uint32]) */;
    %1305 = %1304.2;
    (%1305,)
  };
  %1306() /* ty=(Tensor[(350), uint32],) */
}

def @func_14191() -> Tensor[(220), uint32] {
  @func_14189() /* ty=Tensor[(220), uint32] */
}

def @func_8981() -> Tensor[(220), float64] {
  @func_8979() /* ty=Tensor[(220), float64] */
}

def @func_5583() -> Tensor[(16, 16, 15), float32] {
  %1307 = @func_3978() /* ty=Tensor[(16, 16, 15), int16] */;
  %1308 = cast(%1307, dtype="float32") /* ty=Tensor[(16, 16, 15), float32] */;
  asin(%1308) /* ty=Tensor[(16, 16, 15), float32] */
}

def @func_6606() -> (Tensor[(350), float32], Tensor[(350), uint32]) {
  @func_6604() /* ty=(Tensor[(350), float32], Tensor[(350), uint32]) */
}

def @func_195(%var_193: Tensor[(10, 11, 3), uint64], %var_194: Tensor[(10, 11, 3), uint64]) -> Tensor[(10, 11, 3), bool] {
  @func_191(%var_193, %var_194) /* ty=Tensor[(10, 11, 3), bool] */
}

def @func_534(%var_511: Tensor[(10, 11, 2), uint32], %var_512: Tensor[(10, 11, 2), uint32]) -> (Tensor[(10, 11, 2), bool],) {
  %1309 = cast(%var_512, dtype="bool") /* ty=Tensor[(10, 11, 2), bool] */;
  %1310 = shape_of(%var_511, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1311 = cast(%var_511, dtype="bool") /* ty=Tensor[(10, 11, 2), bool] */;
  %1312 = dyn.reshape(%1309, %1310, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1313 = greater(%1311, %1312) /* ty=Tensor[(10, 11, 2), bool] */;
  (%1313,)
}

def @func_12152(%var_12150: Tensor[(55, 6), uint64]) -> (Tensor[(55, 6), float64],) {
  @func_12149(%var_12150) /* ty=(Tensor[(55, 6), float64],) */
}

def @func_2916() -> Tensor[(350), uint32] {
  %1315 = fn () -> Tensor[(350), uint32] {
    %1314 = @func_2840() /* ty=(Tensor[(16, 16, 15), int16], Tensor[(10, 11, 3), bool], Tensor[(330), uint64], Tensor[(16, 16, 15), int16], Tensor[(10, 3, 12), bool], Tensor[(10, 3), uint8], Tensor[(384), float64], Tensor[(350), uint32]) */;
    %1314.7
  };
  %1315() /* ty=Tensor[(350), uint32] */
}

def @func_11544() -> (Tensor[(220), float64],) {
  @func_11542() /* ty=(Tensor[(220), float64],) */
}

def @func_14596() -> (Tensor[(350), float64],) {
  %1318 = fn () -> (Tensor[(350), float64],) {
    %1316 = @func_14346() /* ty=(Tensor[(350), float64], Tensor[(220), uint32]) */;
    %1317 = %1316.0;
    (%1317,)
  };
  %1318() /* ty=(Tensor[(350), float64],) */
}

def @func_9616(%var_9614: Tensor[(8, 7, 7), float32], %var_9615: Tensor[(180), float32]) -> (Tensor[(350), uint8], Tensor[(220), uint32], Tensor[(8, 7, 7), uint8], Tensor[(9, 5, 4), bool], Tensor[(180), float32], Tensor[(350), uint8]) {
  %1341 = fn (%var_9548: Tensor[(8, 7, 7), float32], %var_9592: Tensor[(180), float32]) -> (Tensor[(350), uint8], Tensor[(220), uint32], Tensor[(8, 7, 7), uint8], Tensor[(9, 5, 4), bool], Tensor[(180), float32], Tensor[(350), uint8]) {
    %1319 = @func_8440() /* ty=(Tensor[(16, 16, 15), int16], Tensor[(350), uint8], Tensor[(350), uint8]) */;
    %1320 = cast(%var_9548, dtype="float32") /* ty=Tensor[(8, 7, 7), float32] */;
    %1321 = exp(%1320) /* ty=Tensor[(8, 7, 7), float32] */;
    %1322 = cast(%var_9548, dtype="int32") /* ty=Tensor[(8, 7, 7), int32] */;
    %1323 = shape_of(%1321, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1324 = cast(%1321, dtype="int32") /* ty=Tensor[(8, 7, 7), int32] */;
    %1325 = dyn.reshape(%1322, %1323, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %1326 = bitwise_and(%1324, %1325) /* ty=Tensor[(8, 7, 7), int32] */;
    %1327 = cast(%1321, dtype="uint8") /* ty=Tensor[(8, 7, 7), uint8] */;
    %1328 = shape_of(%1326, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1329 = cast(%1326, dtype="uint8") /* ty=Tensor[(8, 7, 7), uint8] */;
    %1330 = dyn.reshape(%1327, %1328, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %1331 = cast(%var_9592, dtype="float32") /* ty=Tensor[(180), float32] */;
    %1332 = cast(%var_9592, dtype="float32") /* ty=Tensor[(180), float32] */;
    %1333 = reshape(%1331, newshape=[9, 5, 4]) /* ty=Tensor[(9, 5, 4), float32] */;
    %1334 = reshape(%1332, newshape=[9, 5, 4]) /* ty=Tensor[(9, 5, 4), float32] */;
    %1335 = @func_5135() /* ty=(Tensor[(350), uint8],) */;
    %1336 = %1319.2;
    %1337 = @func_4612() /* ty=Tensor[(220), uint32] */;
    %1338 = multiply(%1329, %1330) /* ty=Tensor[(8, 7, 7), uint8] */;
    %1339 = @func_4005(%1333, %1334) /* ty=Tensor[(9, 5, 4), bool] */;
    %1340 = %1335.0;
    (%1336, %1337, %1338, %1339, %var_9592, %1340)
  };
  %1341(%var_9614, %var_9615) /* ty=(Tensor[(350), uint8], Tensor[(220), uint32], Tensor[(8, 7, 7), uint8], Tensor[(9, 5, 4), bool], Tensor[(180), float32], Tensor[(350), uint8]) */
}

def @func_11514() -> Tensor[(350), uint32] {
  %1343 = fn () -> Tensor[(350), uint32] {
    %1342 = @func_8672() /* ty=(Tensor[(350), uint32],) */;
    %1342.0
  };
  %1343() /* ty=Tensor[(350), uint32] */
}

def @func_7514() -> Tensor[(384), float64] {
  %1344 = @func_5337() /* ty=(Tensor[(350), uint8], Tensor[(384), float64]) */;
  %1344.1
}

def @func_7703(%var_7701: int64, %var_7702: Tensor[(4, 7, 1), int64]) -> Tensor[(4, 7, 1), int64] {
  %1347 = fn (%var_7690: int64, %var_7691: Tensor[(4, 7, 1), int64]) -> Tensor[(4, 7, 1), int64] {
    %1345 = cast(%var_7690, dtype="int64") /* ty=int64 */;
    %1346 = cast(%var_7691, dtype="int64") /* ty=Tensor[(4, 7, 1), int64] */;
    add(%1345, %1346) /* ty=Tensor[(4, 7, 1), int64] */
  };
  %1347(%var_7701, %var_7702) /* ty=Tensor[(4, 7, 1), int64] */
}

def @func_6674() -> (Tensor[(350), uint32], Tensor[(350), uint8]) {
  @func_6672() /* ty=(Tensor[(350), uint32], Tensor[(350), uint8]) */
}

def @func_5068() -> (Tensor[(384), float64], Tensor[(350), uint8]) {
  %1351 = fn () -> (Tensor[(384), float64], Tensor[(350), uint8]) {
    %1348 = @func_3409() /* ty=(Tensor[(384), float64],) */;
    %1349 = %1348.0;
    %1350 = @func_4778() /* ty=Tensor[(350), uint8] */;
    (%1349, %1350)
  };
  %1351() /* ty=(Tensor[(384), float64], Tensor[(350), uint8]) */
}

def @func_4737(%var_4736: Tensor[(330), uint64]) -> (Tensor[(220), float64], Tensor[(10, 11, 3), bool], Tensor[(330), uint64], Tensor[(16, 16, 15), int16], Tensor[(35, 10), uint32]) {
  %1364 = fn (%var_4713: Tensor[(330), uint64]) -> (Tensor[(220), float64], Tensor[(10, 11, 3), bool], Tensor[(330), uint64], Tensor[(16, 16, 15), int16], Tensor[(35, 10), uint32]) {
    %1352 = cast(%var_4713, dtype="uint64") /* ty=Tensor[(330), uint64] */;
    %1353 = cast(%var_4713, dtype="uint64") /* ty=Tensor[(330), uint64] */;
    %1354 = reshape(%1352, newshape=[10, 11, 3]) /* ty=Tensor[(10, 11, 3), uint64] */;
    %1355 = reshape(%1353, newshape=[10, 11, 3]) /* ty=Tensor[(10, 11, 3), uint64] */;
    %1356 = cast(meta[relay.Constant][58] /* ty=Tensor[(35, 10), uint32] */, dtype="uint32") /* ty=Tensor[(35, 10), uint32] */;
    %1357 = @func_4491() /* ty=Tensor[(220), float64] */;
    %1358 = cast(%1357, dtype="uint32") /* ty=Tensor[(220), uint32] */;
    %1359 = reshape(%1356, newshape=[350]) /* ty=Tensor[(350), uint32] */;
    %1360 = reshape(%1358, newshape=[220]) /* ty=Tensor[(220), uint32] */;
    %1361 = @func_3535(%1359, %1360) /* ty=(Tensor[(350), bool], Tensor[(16, 16, 15), int16], Tensor[(220), uint32], Tensor[(330), uint64], Tensor[(5, 66), uint64]) */;
    %1362 = @func_191(%1354, %1355) /* ty=Tensor[(10, 11, 3), bool] */;
    %1363 = %1361.1;
    (%1357, %1362, %var_4713, %1363, meta[relay.Constant][58] /* ty=Tensor[(35, 10), uint32] */)
  };
  %1364(%var_4736) /* ty=(Tensor[(220), float64], Tensor[(10, 11, 3), bool], Tensor[(330), uint64], Tensor[(16, 16, 15), int16], Tensor[(35, 10), uint32]) */
}

def @func_3442() -> (Tensor[(220), float64],) {
  %1369 = fn () -> (Tensor[(220), float64],) {
    %1365 = @func_3389() /* ty=(Tensor[(350), float32], Tensor[(13, 8, 8), float64], Tensor[(384), float64], Tensor[(220), uint32]) */;
    %1366 = %1365.3;
    %1367 = cast(%1366, dtype="float64") /* ty=Tensor[(220), float64] */;
    %1368 = rsqrt(%1367) /* ty=Tensor[(220), float64] */;
    (%1368,)
  };
  %1369() /* ty=(Tensor[(220), float64],) */
}

def @func_11178() -> (Tensor[(220), float64],) {
  %1371 = fn () -> (Tensor[(220), float64],) {
    %1370 = @func_7053() /* ty=Tensor[(220), float64] */;
    (%1370,)
  };
  %1371() /* ty=(Tensor[(220), float64],) */
}

def @func_6357() -> Tensor[(220), float32] {
  @func_4934() /* ty=Tensor[(220), float32] */
}

def @func_4477(%var_4458: Tensor[(5, 66), uint64], %var_4466: Tensor[(5, 66), uint64]) -> (Tensor[(350), uint32], Tensor[(10, 11, 3), bool], Tensor[(5, 66), float32]) {
  %1372 = cast(%var_4458, dtype="uint64") /* ty=Tensor[(5, 66), uint64] */;
  %1373 = cast(%var_4458, dtype="uint64") /* ty=Tensor[(5, 66), uint64] */;
  %1374 = reshape(%1372, newshape=[10, 11, 3]) /* ty=Tensor[(10, 11, 3), uint64] */;
  %1375 = reshape(%1373, newshape=[10, 11, 3]) /* ty=Tensor[(10, 11, 3), uint64] */;
  %1376 = cast(%var_4466, dtype="float32") /* ty=Tensor[(5, 66), float32] */;
  %1377 = shape_of(%var_4458, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1378 = cast(%var_4458, dtype="float32") /* ty=Tensor[(5, 66), float32] */;
  %1379 = dyn.reshape(%1376, %1377, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %1380 = @func_3951() /* ty=Tensor[(350), uint32] */;
  %1381 = @func_191(%1374, %1375) /* ty=Tensor[(10, 11, 3), bool] */;
  %1382 = floor_mod(%1378, %1379) /* ty=Tensor[(5, 66), float32] */;
  (%1380, %1381, %1382)
}

def @func_8035() -> (Tensor[(220), uint32], Tensor[(350), uint32]) {
  @func_8033() /* ty=(Tensor[(220), uint32], Tensor[(350), uint32]) */
}

def @func_5794() -> (Tensor[(350), uint32],) {
  %1384 = fn () -> (Tensor[(350), uint32],) {
    %1383 = @func_2915() /* ty=Tensor[(350), uint32] */;
    (%1383,)
  };
  %1384() /* ty=(Tensor[(350), uint32],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen842/build/output.py", line 4521, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [14:26:39] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

